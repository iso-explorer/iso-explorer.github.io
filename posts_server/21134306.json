post_cb({"21139534": {"ParentId": "21134306", "CommentCount": "0", "Body": "<p>The accessibility of member of the surrounding class is affected by <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#45\" rel=\"nofollow\">CWG 45</a>. That means, at least part of the issue has been classified as a defect in the C++98 Standard. (It seems a resolution has been proposed in 2001, so I don't quite understand why it hasn't been fixed in C++03.)</p>\n<p>In C++11, the resolution is incorporated, so the paragraph has changed to [class.access.nest]/1:</p>\n<blockquote>\n<p id=\"so_21134306_21139534_0\">A nested class is a member and as such has the same access rights as any other member. The members of an enclosing class have no special access to members of a nested class; the usual access rules shall be obeyed. [<em>Example:</em></p>\n<pre><code>class E {\n    int x;\n    class B { };\n\n    class I {\n        B b;                     // OK: E::I can access E::B\n        int y;\n        void f(E* p, int i) {\n            p-&gt;x = i;            // OK: E::I can access E::x\n        }\n    };\n\n    int g(I* p) {\n        return p-&gt;y;             // error: I::y is private\n    }\n};\n</code></pre>\n<p id=\"so_21134306_21139534_1\">\u2014 <em>end example</em>]</p>\n</blockquote>\n<p>(Some) proposed resolutions to defects are implemented in the compilers; note <a href=\"http://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#C-Dialect-Options\" rel=\"nofollow\">g++ for example specifically says</a> the <code>-std=c++03</code> flag means</p>\n<blockquote>\n<p id=\"so_21134306_21139534_2\">The 1998 ISO C++ standard plus the 2003 technical corrigendum and some additional defect reports.</p>\n</blockquote>\n<p>So it's not obvious what you get when using this flag. However, DRs are \"an indication of the intent of the committee\", so they can be seen as \"bugs\" in the Standard, which <em>should</em> be fixed.</p>\n<hr>\n<p>VC++2005 seems not to implement the proposed resolution, following the original Standard.</p>\n</hr>", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "21139534", "Score": "2", "CreationDate": "2014-01-15T14:05:07.437", "LastActivityDate": "2014-01-15T14:05:07.437"}, "bq_ids": {"n4140": {"so_21134306_21139534_0": {"section_id": 6700, "quality": 0.9166666666666666, "length": 22}, "so_21134306_21134306_1": {"section_id": 6693, "quality": 1.0, "length": 5}}, "n3337": {"so_21134306_21139534_0": {"section_id": 6455, "quality": 0.9166666666666666, "length": 22}, "so_21134306_21134306_1": {"section_id": 6448, "quality": 1.0, "length": 5}}, "n4659": {"so_21134306_21139534_0": {"section_id": 8174, "quality": 0.9166666666666666, "length": 22}, "so_21134306_21134306_1": {"section_id": 8168, "quality": 1.0, "length": 5}}}, "21134306": {"CommentCount": "4", "AcceptedAnswerId": "21139534", "PostTypeId": "1", "LastEditorUserId": "176922", "CreationDate": "2014-01-15T10:02:58.420", "LastActivityDate": "2014-01-15T14:05:07.437", "LastEditDate": "2014-01-15T10:17:14.403", "ViewCount": "617", "FavoriteCount": "1", "Title": "Inner class, pimpl and a friend class - disagreeing compilers", "Id": "21134306", "Score": "6", "Body": "<p>I was mucking about in some old library code, with the basic objective of refactoring it. This old code does not exactly comply to best practices and beauty (yes - friends are bad, and it has been removed after discovering the below - as it was an oversight in the refactoring).</p>\n<p>Now preparing to run some unit tests I compiled the code with clang++, g++, and vc++ (2005 - yes I know it's old, but for backward compatibility - I have to).</p>\n<p>g++ and clang++ compiled and ran without errors, but Visual C++ was complaining, so after looking at the code, i found something to the effect of this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass one {\n\n  private:\n    struct private_impl;\n    private_impl* pimpl_;\n\n  public:\n    one();\n    ~one();\n    void say_hello();\n};\n\nclass two {\n\n  private:\n    friend class one;\n    void say_world();\n\n  public:\n\n};\n\nstruct one::private_impl {\n  two t;\n  void say_world();\n};\n\nvoid one::private_impl::say_world() {\n   std::cout &lt;&lt; \" \";\n   t.say_world();  //This should not work should it?\n}\n\none::one() : pimpl_(new private_impl) { }\n\none::~one() {\n  delete pimpl_;\n}\n\nvoid one::say_hello() {\n  std::cout &lt;&lt; \"Hello\";\n  pimpl_-&gt;say_world();\n  std::cout &lt;&lt; std::endl;\n}\n\nvoid two::say_world() {\n  std::cout &lt;&lt; \"World\";\n}\n\nint main() {\n  one test;\n  test.say_hello();\n  return 0;\n}\n</code></pre>\n<p>Compiled with switches (g++ and clang++):</p>\n<pre><code>-Wall -Wextra -pedantic\n\nclang++ version: 3.3\ng++ version:     4.8.2\n</code></pre>\n<p>Now Visual C++ complains that private_impl::say_world() cannot access the private member of the class two. To me after looking over the c++ friend rules, this is correct - but is my understanding of this wrong? Am I misreading the information (English is not my first language)?</p>\n<p>From the standard (c++03 - do not have c++11 at hand where I'm at now):</p>\n<blockquote>\n<p id=\"so_21134306_21134306_0\">The members of a nested class have no special access to members of an \n  enclosing class, nor to classes or functions that have granted friendship \n  to an enclosing class; the usual access rules (clause 11) shall be obeyed.\n  The members of an enclosing class have no special access to members of a\n  nested class; the usual access rules (clause 11) shall  be obeyed.</p>\n</blockquote>\n<p>And also this:</p>\n<blockquote>\n<p id=\"so_21134306_21134306_1\">Friendship is neither inherited nor transitive.</p>\n</blockquote>\n<p>So my basic question here - who is actually correct - clang and gcc or vc++? </p>\n<p>Also - this question is just for curiosity about the matter, and trying to understand the world a little better.</p>\n", "Tags": "<c++><inner-classes><friend><language-lawyer><pimpl-idiom>", "OwnerUserId": "1078397", "AnswerCount": "1"}});