post_cb({"bq_ids": {"n4140": {"so_41386084_41386205_0": {"length": 24, "quality": 0.5853658536585366, "section_id": 7183}}, "n4659": {"so_41386084_41386205_0": {"length": 37, "quality": 0.9024390243902439, "section_id": 8671}}}, "41386205": {"Id": "41386205", "PostTypeId": "2", "Body": "<p>When you execute <code>delete [] array;</code>, the address held in <code>array</code> becomes an invalid pointer value, so you can't even inspect it reliably in order to print it.</p>\n<blockquote>\n<p id=\"so_41386084_41386205_0\">When the end of the duration of a region of storage is reached, the values of all pointers representing the address of any part of that region of storage become invalid pointer values (3.9.2). Indirection through an invalid pointer value and passing an invalid pointer value to a deallocation function have unde\ufb01ned behavior.\n  <strong>Any other use of an invalid pointer value has implementation-defined behavior.</strong></p>\n</blockquote>\n", "Score": "3", "LastActivityDate": "2016-12-29T19:42:00.717", "CreationDate": "2016-12-29T19:42:00.717", "ParentId": "41386084", "CommentCount": "10", "OwnerUserId": "103167"}, "41386213": {"Id": "41386213", "PostTypeId": "2", "Body": "<p>Accessing the array after you <code>delete</code> it is Undefined Behaviour - meaning; <em>anything</em> could happen, you are not guaranteed any consistent result - your program has a bug if you do that and its execution is no longer well defined. Even just reading the pointer value is Implementation Defined and you can't be sure what you get across implementations.</p>\n<p>So in short; just don't do that.</p>\n", "Score": "1", "LastActivityDate": "2016-12-29T19:42:27.597", "CreationDate": "2016-12-29T19:42:27.597", "ParentId": "41386084", "CommentCount": "0", "OwnerUserId": "5910058"}, "41386252": {"Id": "41386252", "PostTypeId": "2", "Body": "<p>There is a difference between   <code>int* ptr[5]</code>\nand <code>int* ptr = new int[5];</code></p>\n<p>The first one creates an array of pointers with a fixed size 5. And the other one creates a pointer to an array of integers with a fixed size 5</p>\n<p><code>int* ptr = &amp;array[0];</code> is the same as saying <code>int* ptr = array;</code></p>\n<p>See. By doing int* array = new int[5] you</p>\n<ol>\n<li>create an array with 5 integer values</li>\n<li>create a pointer that points to the first ([0]) address of the array ... meaning that if you point to <code>&amp;array[0]</code> is the same as <code>array</code></li>\n</ol>\n<p>After deletion the pointers point to an address which has memory allocated which will result in undefined behaviour since you don't know what gets allocated on this address afterwards</p>\n", "Score": "1", "LastActivityDate": "2016-12-29T19:45:48.493", "CreationDate": "2016-12-29T19:45:48.493", "ParentId": "41386084", "CommentCount": "1", "OwnerUserId": "5292705"}, "41386084": {"ViewCount": "71", "LastEditDate": "2016-12-29T19:50:10.430", "AcceptedAnswerId": "41386205", "Title": "Where goes the pointer when I delete array? Difference between pointer to arrays, and the elements in arrays", "CreationDate": "2016-12-29T19:31:59.150", "LastActivityDate": "2016-12-29T19:53:36.787", "CommentCount": "0", "Body": "<p>Ok, so I have two pointers, one initialising new array:</p>\n<pre><code>int * array = new int [5];\nint * ptr = &amp;array[0]; // or \"= array\", is this the same?\n</code></pre>\n<p>Now let's assign some value</p>\n<pre><code>array[0] = 12;\n</code></pre>\n<p>Now check if they point the same adress and value</p>\n<pre><code>cout &lt;&lt; \"Adress under array: \"&lt;&lt; array &lt;&lt; \" Value under array: \"&lt;&lt; array[0] &lt;&lt;\n\" Adress under ptr: \"&lt;&lt; ptr &lt;&lt; \" Value under ptr: \" &lt;&lt; *ptr;\n</code></pre>\n<p>Output shows the same adresses, and 12 two times. Now let's delete array:</p>\n<pre><code>delete [] array;\n</code></pre>\n<p>Now there is my question, this:</p>\n<pre><code>cout &lt;&lt; array;\n</code></pre>\n<p>Output different address than before. Additionaly</p>\n<pre><code>cout &lt;&lt; *ptr;\n</code></pre>\n<p>does not output 12, so the value in the old array[0] changed. </p>\n<p>Then, where the pointer points after deleting array <code>[]array</code>?\nThe other question, is array pointer to array, or just pointer for int?</p>\n<p>I know that <code>int *ptr[x]</code> will be a pointer to array of x integers, but i do not use square brackets on the left side here <code>int * array = new int [5]</code> so is <code>array</code> the pointer to the first element of the array?</p>\n", "PostTypeId": "1", "LastEditorUserId": "7106772", "Id": "41386084", "Tags": "<c++><arrays><pointers>", "Score": "0", "OwnerUserId": "7106772", "ClosedDate": "2016-12-29T19:52:12.803", "AnswerCount": "3"}});