post_cb({"47762669": {"ViewCount": "83", "Body": "<p>The following code <a href=\"http://coliru.stacked-crooked.com/a/74d7c5e4e8f0872f\" rel=\"nofollow noreferrer\">compiles successfully with <em>clang++ 3.8.0</em> and fails to compile with <em>g++ 7.2.0</em></a> (with the <code>-std=c++14 -O0 -Wall -Wextra -Werror -pedantic-errors</code> compilation flags):</p>\n<pre><code>auto foo = [](auto functor, auto... argument_functors)\n{\n    functor(argument_functors()...);\n};\n\nauto do_nothing = [](auto...) {};\n\n\nint main()\n{\n    foo(do_nothing);\n}\n</code></pre>\n<p><em>g++</em> error messages:</p>\n<blockquote id=\"so_47762669_47762669_0\">\n<pre><code>main.cpp: In instantiation of '&lt;lambda(auto:1, auto:2 ...)&gt; [with auto:1 = &lt;lambda(auto:3, ...)&gt;; auto:2 = {}]':\nmain.cpp:11:16:   required from here\nmain.cpp:3:9: error: no match for call to '(&lt;lambda(auto:3, ...)&gt;) ()'\n  functor(argument_functors()...);\n  ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nmain.cpp:6:29: note: candidate: template&lt;class auto:3&gt; &lt;lambda(auto:3, ...)&gt;::operator decltype (((const&lt;lambda(auto:3, ...)&gt;*)((const&lt;lambda(auto:3, ...)&gt;* const)0))-&gt;operator()(static_cast&lt;auto:3&amp;&amp;&gt;(&lt;anonymous&gt;))) (*)(auto:3, ...)() const &lt;deleted&gt;\n auto do_nothing = [](auto...) {};\n                             ^\nmain.cpp:6:29: note:   template argument deduction/substitution failed:\nmain.cpp:3:9: note:   candidate expects 1 argument, 0 provided\n  functor(argument_functors()...);\n  ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nmain.cpp:6:29: note: candidate: template&lt;class auto:3&gt; &lt;lambda(auto:3, ...)&gt;\n auto do_nothing = [](auto...) {};\n                             ^\nmain.cpp:6:29: note:   template argument deduction/substitution failed:\nmain.cpp:3:9: note:   candidate expects 1 argument, 0 provided\n  functor(argument_functors()...);\n  ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n</blockquote>\n<p>Which compiler behavior is standard compliant?</p>\n", "AcceptedAnswerId": "47762802", "Title": "Functor variadic template pack expansion for empty pack gives different results in clang++ and g++", "CreationDate": "2017-12-11T22:45:18.440", "LastActivityDate": "2017-12-11T22:59:10.623", "CommentCount": "4", "LastEditDate": "2017-12-11T22:59:10.623", "PostTypeId": "1", "LastEditorUserId": "2069064", "Id": "47762669", "Score": "2", "OwnerUserId": "3043539", "Tags": "<c++><templates><c++14><language-lawyer><variadic-templates>", "AnswerCount": "1"}, "47762802": {"Id": "47762802", "PostTypeId": "2", "Body": "<p>This is gcc bug <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64095\" rel=\"noreferrer\">64095</a>.</p>\n<p>From <a href=\"http://eel.is/c++draft/dcl.decl#dcl.fct-18\" rel=\"noreferrer\">[dcl.fct]/18</a>:</p>\n<blockquote>\n<p id=\"so_47762669_47762802_0\">There is a syntactic ambiguity when an ellipsis occurs at the end of a <em>parameter-declaration-clause</em> without a preceding comma. In this case, the ellipsis is parsed as part of the <em>abstract-declarator</em> if the type of the parameter either names a template parameter pack that has not been expanded <strong>or contains <code>auto</code></strong>; otherwise, it is parsed as part of the <em>parameter-declaration-clause</em>.</p>\n</blockquote>\n<p>Basically, <code>(T...)</code> in a parameter list can be interpreted as either:</p>\n<ul>\n<li>One unnamed parameter of type <code>T</code>, and an ellipsis.</li>\n<li>A function parameter pack, with types of the template parameter pack <code>T</code>.</li>\n</ul>\n<p>The disambiguation rule is supposed to prefer the latter if <code>T</code> is a template parameter pack or <code>auto</code>, but gcc is choosing to interpret this as an ellipsis parameter. </p>\n", "LastActivityDate": "2017-12-11T22:58:54.773", "Score": "6", "CreationDate": "2017-12-11T22:58:54.773", "ParentId": "47762669", "CommentCount": "1", "OwnerUserId": "2069064"}, "bq_ids": {"n4140": {"so_47762669_47762802_0": {"length": 30, "quality": 1.0, "section_id": 3251}}, "n3337": {"so_47762669_47762802_0": {"length": 27, "quality": 0.9, "section_id": 3123}}, "n4659": {"so_47762669_47762802_0": {"length": 30, "quality": 1.0, "section_id": 4009}}}});