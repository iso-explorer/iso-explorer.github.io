post_cb({"29479692": {"CommentCount": "4", "AcceptedAnswerId": "29480560", "CreationDate": "2015-04-06T21:06:33.387", "LastActivityDate": "2015-04-06T22:15:14.503", "PostTypeId": "1", "ViewCount": "130", "FavoriteCount": "1", "Title": "I need some help regarding \u00a78/5 in the spec", "Id": "29479692", "Score": "7", "Body": "<p>\u00a78/5:</p>\n<blockquote>\n<p id=\"so_29479692_29479692_0\">The optional <em>attribute-specifier-seq</em> in a <em>trailing-return-type</em>\n  appertains to the indicated return type. The <em>type-id</em> in a\n  <em>trailing-return-type</em> includes the longest possible sequence of <em>abstract-declarator</em>s. [ Note: This resolves the ambiguous binding of array and function declarators. [ Example:</p>\n<pre><code>auto f()-&gt;int(*)[4]; // function returning a pointer to array[4] of int\n                     // not function returning array[4] of pointer to int\n</code></pre>\n<p id=\"so_29479692_29479692_1\">\u2014end example ] \u2014end note ]</p>\n</blockquote>\n<p>The \"<em>type-id</em> in a <em>trailing-return-type</em>\" doesn't make sense to me, simply because a <em>trailing-return-type</em> doesn't contain a <em>type-id</em> according to the grammar.</p>\n<p>I also don't understand the \"ambiguous binding\" of array and function declaration. As far as I can understand  </p>\n<pre><code>auto f() -&gt; int*[4]; // function returning an array of 4 pointers to int\nauto f() -&gt; int(*)[4]; // function returning a pointer to an array of 4 ints  \n</code></pre>\n", "Tags": "<c++><language-lawyer><c++14><trailing-return-type>", "OwnerUserId": "4470935", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29479692_29480560_1": {"section_id": 3228, "quality": 0.9090909090909091, "length": 10}, "so_29479692_29479692_0": {"section_id": 3198, "quality": 0.8, "length": 20}}, "n3337": {"so_29479692_29480560_1": {"section_id": 3101, "quality": 0.9090909090909091, "length": 10}, "so_29479692_29479692_0": {"section_id": 3072, "quality": 0.8, "length": 20}}, "n4659": {"so_29479692_29480560_1": {"section_id": 3985, "quality": 0.8181818181818182, "length": 9}}}, "29480560": {"ParentId": "29479692", "CommentCount": "2", "Body": "<pre><code>int *f();\n</code></pre>\n<p>Declares a function of <code>()</code> returning pointer to <code>int</code>.</p>\n<pre><code>int *f()[4];\n</code></pre>\n<p>Declares a function of <code>()</code> returning array of 4 pointers to <code>int</code>. Note that this is ill-formed.</p>\n<pre><code>int (*f())[4];\n</code></pre>\n<p>Declares a function of <code>()</code> returning pointer to array of 4 <code>int</code>. </p>\n<p>Now, in </p>\n<pre><code>  auto f() -&gt; int(*)[4]\n//     ^^^^^^^^^^^^^---\n</code></pre>\n<p>What the rule resolves is whether <code>[4]</code> is part of the <em>trailing-return-type</em>, and hence part of the the function declarator. If <code>[4]</code> is part of the <em>trailing-return-type</em>, then the above declaration declares a function of <code>()</code> returning pointer to array of 4 <code>int</code>. </p>\n<p>If not, then <code>[4]</code> would form an array declarator that is not part of the function declarator, and the parse would be governed by [dcl.array]/p1:</p>\n<blockquote>\n<p id=\"so_29479692_29480560_0\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<pre><code>D1 [ constant-expression_opt ] attribute-specifier-seq_opt\n</code></pre>\n<p id=\"so_29479692_29480560_1\">and the type of the identifier in the declaration <code>T D1</code> is\n  \u201c<em>derived-declarator-type-list</em> <code>T</code>\u201d [..., if] the value of the\n  constant expression is <code>N</code>, [...] the type of the identifier of <code>D</code> is\n  \u201c<em>derived-declarator-type-list</em> array of <code>N</code> <code>T</code>\u201d.</p>\n</blockquote>\n<p>and since <code>auto f()-&gt; int (*)</code> declares <code>f</code> as \"function of <code>()</code> returning pointer to <code>int</code>\", substitution tells us that this would declare a function returning an array of 4 pointers to <code>int</code>, just like <code>int *f()[4];</code>.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "29480560", "Score": "5", "CreationDate": "2015-04-06T22:15:14.503", "LastActivityDate": "2015-04-06T22:15:14.503"}});