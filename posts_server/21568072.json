post_cb({"21568094": {"Id": "21568094", "PostTypeId": "2", "Body": "<p>No need, it will get cleared automatically once it is out of scope i.e <a href=\"http://www.cplusplus.com/reference/vector/vector/~vector/\" rel=\"nofollow\">destructor will destroy the container object.</a></p>\n", "LastActivityDate": "2014-02-05T03:29:33.080", "CommentCount": "3", "CreationDate": "2014-02-05T03:29:33.080", "ParentId": "21568072", "Score": "4", "OwnerUserId": "2881489"}, "bq_ids": {"n4140": {"so_21568072_21568133_2": {"length": 7, "quality": 0.875, "section_id": 705}, "so_21568072_21568133_1": {"length": 10, "quality": 1.0, "section_id": 705}}, "n3337": {"so_21568072_21568133_2": {"length": 8, "quality": 1.0, "section_id": 695}, "so_21568072_21568133_1": {"length": 10, "quality": 1.0, "section_id": 695}}, "n4659": {"so_21568072_21568133_2": {"length": 6, "quality": 0.75, "section_id": 734}, "so_21568072_21568133_1": {"length": 10, "quality": 1.0, "section_id": 734}}}, "21568072": {"ViewCount": "5574", "Body": "<p>I have some simple function that uses vector like this (pseudo code):</p>\n<pre><code>void someFunc(void) {\n\n    std::vector&lt;std::string&gt; contentVector;\n\n    // here are some operations on the vector\n\n    // should I call the clear() here or this could be ommited ?\n    contentVector.clear();\n\n}\n</code></pre>\n<p>Should I call the clear() or this could be ommited ?</p>\n", "AcceptedAnswerId": "21568133", "Title": "Should I always call vector clear() at the end of the function?", "CreationDate": "2014-02-05T03:27:23.793", "Id": "21568072", "CommentCount": "4", "FavoriteCount": "7", "PostTypeId": "1", "LastActivityDate": "2014-02-06T18:52:32.197", "Score": "27", "OwnerUserId": "1449403", "Tags": "<c++><vector><stl><stdvector>", "AnswerCount": "5"}, "21574527": {"Id": "21574527", "PostTypeId": "2", "Body": "<p>Since I don't think anyone else has mentioned this, but if your vector was </p>\n<pre><code>std::vector&lt;std::string*&gt; vector;\n</code></pre>\n<p>you should free the memory allocated to each element before the function finishes (unless you've passed ownership to somewhere else - such as a global variable etc)</p>\n<pre><code>for (auto i : vector) {\n  delete i;\n}\n</code></pre>\n", "LastEditorUserId": "1346405", "LastActivityDate": "2014-02-05T12:37:48.917", "Score": "2", "CreationDate": "2014-02-05T10:24:19.227", "ParentId": "21568072", "CommentCount": "2", "OwnerUserId": "1346405", "LastEditDate": "2014-02-05T12:37:48.917"}, "21568133": {"Id": "21568133", "PostTypeId": "2", "Body": "<p>If we look at the <a href=\"http://en.cppreference.com/w/\" rel=\"noreferrer\">cppreference.com</a> entry for <a href=\"http://en.cppreference.com/w/cpp/container/vector/~vector\" rel=\"noreferrer\">std::vector::~vector</a> it says:</p>\n<blockquote>\n<p id=\"so_21568072_21568133_0\">Destructs the container. The destructors of the elements are called and the used storage is deallocated. Note, that if the elements are pointers, the pointed-to objects are not destroyed. </p>\n</blockquote>\n<p>so no you don't have to call <a href=\"http://en.cppreference.com/w/cpp/container/vector/clear\" rel=\"noreferrer\">clear</a>.</p>\n<p>If we want to go to the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"noreferrer\">draft standard</a>, we have to look at section <code>23.2.1</code> <em>General container requirements</em> paragraph <em>4</em> which says:</p>\n<blockquote>\n<p id=\"so_21568072_21568133_1\">In Tables 96 and 97, X denotes a container class containing objects of type T, a and b denote values of type X,[...]</p>\n</blockquote>\n<p>and then look at <code>Table 96 \u2014 Container requirements</code> which has the following expression entry:</p>\n<pre><code>(&amp;a)-&gt;~X()  \n</code></pre>\n<p>and the following note:</p>\n<blockquote>\n<p id=\"so_21568072_21568133_2\">note: the destructor is applied to every element of a; all the memory is deallocated.</p>\n</blockquote>\n<p><b>Update</b></p>\n<p>This is <a href=\"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"noreferrer\">RAII</a> in action and as <em>Bjarne Stroustrup</em> says in <a href=\"http://www.stroustrup.com/bs_faq2.html#finally\" rel=\"noreferrer\">Why doesn't C++ provide a \"finally\" construct?</a>:</p>\n<blockquote>\n<p id=\"so_21568072_21568133_3\">Because C++ supports an alternative that is almost always better: The \"resource acquisition is initialization\" technique (TC++PL3 section 14.4). The basic idea is to represent a resource by a local object, so that the local object's destructor will release the resource. That way, the programmer cannot forget to release the resource.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-02-06T18:52:32.197", "Score": "26", "CreationDate": "2014-02-05T03:32:41.847", "ParentId": "21568072", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2014-02-06T18:52:32.197"}, "21568114": {"Id": "21568114", "PostTypeId": "2", "Body": "<p>There is absolutely no need to do that. <code>std::vector</code> and all other containers automatically destroys their elements when they themselves would be destroyed. That means that their destructors are responsible for that action. So, don't.</p>\n<p>The beauty of this is that containers are naturally exception safe<sup>[1]</sup>:</p>\n<pre><code>void someFunc(void) {\n\n    std::vector&lt;std::string&gt; contentVector;\n\n    // here are some operations on the vector\n\n    throw std::runtime_error(\"I just want to throw!\");\n\n    contentVector.clear();\n}\n</code></pre>\n<p>Will the line <code>contentVector.clear();</code> be called? No. But you're still safe because it is guaranteed that <code>contentVector</code>'s destructor will be called.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/container/vector/~vector\" rel=\"nofollow\">vector</a><sup>[2]</sup>:</p>\n<blockquote>\n<p id=\"so_21568072_21568114_0\">Destructs the container. The destructors of the elements are called and the used storage is deallocated. Note, that if the elements are pointers, the pointed-to objects are not destroyed. </p>\n</blockquote>\n<hr>\n<p><sup>[1]</sup> <sub>You still need to make your elements exception safe though (have them properly free their resources whenever their destructors are called).</sub></p>\n<p><sup>[2]</sup> <sub>See comments below for some thoughts on the SGI STL docs</sub>.</p>\n</hr>", "LastEditorUserId": "127856", "LastActivityDate": "2014-02-05T17:27:34.620", "Score": "15", "CreationDate": "2014-02-05T03:30:57.773", "ParentId": "21568072", "CommentCount": "4", "OwnerUserId": "1619294", "LastEditDate": "2014-02-05T17:27:34.620"}, "21573753": {"Id": "21573753", "PostTypeId": "2", "Body": "<p>You can omit using the .clear() function because  <a href=\"http://www.cplusplus.com/reference/vector/vector/~vector/\" rel=\"nofollow\">vector's destructor</a> runs once contentVector goes out of scope at the '}'. </p>\n<p>This deallocates the memory that stores vector's data.</p>\n", "LastActivityDate": "2014-02-05T09:51:13.253", "CommentCount": "1", "CreationDate": "2014-02-05T09:51:13.253", "ParentId": "21568072", "Score": "1", "OwnerUserId": "3109826"}});