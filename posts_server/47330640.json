post_cb({"bq_ids": {"n4140": {"so_47330640_47330728_0": {"length": 57, "quality": 0.95, "section_id": 3255}}, "n3337": {"so_47330640_47330728_0": {"length": 57, "quality": 0.95, "section_id": 3127}}, "n4659": {"so_47330640_47330728_0": {"length": 57, "quality": 0.95, "section_id": 4013}}}, "47330728": {"Id": "47330728", "PostTypeId": "2", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.fct.default\" rel=\"noreferrer\">From 8.3.6 ([dcl.fct.default])/4:</a></p>\n<blockquote>\n<p id=\"so_47330640_47330728_0\">For non-template functions, default arguments can be added in later\n  declarations of a function in the same scope. Declarations in\n  different scopes have completely distinct sets of default arguments.\n  That is, declarations in inner scopes do not acquire default arguments\n  from declarations in outer scopes, and vice versa. <strong>In a given function\n  declaration, each parameter subsequent to a parameter with a default\n  argument shall have a default argument supplied in this or a previous\n  declaration or shall be a function parameter pack.</strong> A default argument\n  shall not be redefined by a later declaration (not even to the same\n  value).\n   [ Example:</p>\n<pre><code>void g(int = 0, ...); // OK, ellipsis is not a parameter. So it can follow a parameter with a default argument\n</code></pre>\n</blockquote>\n", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-16T14:45:31.930", "Score": "20", "CreationDate": "2017-11-16T13:19:21.673", "ParentId": "47330640", "CommentCount": "11", "OwnerUserId": "6935629", "LastEditDate": "2017-11-16T14:45:31.930"}, "47330640": {"ViewCount": "1416", "Body": "<p>Maybe I'm missing something obvious, but the following compiles and runs, and I'm not sure why. I am aware of <a href=\"https://stackoverflow.com/questions/27303283/clang-vs-gcc-variadic-template-parameter-pack-followed-by-parameter-with-defau\">this</a>, but in the example below the position of the parameter pack and the default argument are reversed. Doesn't it violate the rule that default arguments have to appear last? The parameter pack cannot have a default value.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;tuple&gt;\n\ntemplate&lt;typename ... Ts&gt;\nstruct Test\n{\n    int i;\n    std::string str;\n\n    Test(int _i = 0, Ts&amp;&amp; ... _ts)\n        :\n          i(_i),\n          str(std::get&lt;0&gt;(std::forward_as_tuple(std::forward&lt;Ts&gt;(_ts)...)))\n    {}\n};\n\nint main()\n{\n    Test&lt;std::string&gt; t(1, \"huh??\");\n    std::cout &lt;&lt; \"t.i = \" &lt;&lt; t.i &lt;&lt; \", t.str = \" &lt;&lt; t.str &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre>\n<p>This produces</p>\n<pre><code>t.i = 1, t.str = huh??\n</code></pre>\n", "AcceptedAnswerId": "47330728", "Title": "Why is a parameter pack allowed after default arguments?", "CreationDate": "2017-11-16T13:14:53.210", "Id": "47330640", "CommentCount": "2", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-11-16T14:13:37.553", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-16T16:40:25.127", "Score": "17", "OwnerUserId": "4639195", "Tags": "<c++><c++11><c++14><default-arguments>", "AnswerCount": "3"}, "47334936": {"Id": "47334936", "PostTypeId": "2", "Body": "<p>The why of it is simple. Effectively parameter packs always have a default: Parameter packs can be empty, so that won't contradict the concept that missing defaults must be the last arguments.</p>\n", "LastActivityDate": "2017-11-16T16:40:25.127", "CommentCount": "2", "CreationDate": "2017-11-16T16:40:25.127", "ParentId": "47330640", "Score": "6", "OwnerUserId": "8477999"}, "47331670": {"Id": "47331670", "PostTypeId": "2", "Body": "<p>As an addition to the great answer by rsp, it's also worth noting that this behavior makes logical sense. Non-default, non-parameter-pack arguments cannot follow a default argument without resulting the in the requirement that the default argument has to be specified--in which case it is no longer a default argument. </p>\n<p>For example, if the following were allowed:</p>\n<pre><code>void example(int x=0, int y);\n</code></pre>\n<p>The non-default second argument would mean a call to function would need to be structured <code>example(1, 2);</code> as the first parameter cannot be defaulted. This is not the case for an empty parameter pack. Consider the following function:</p>\n<pre><code>template &lt;typename... T&gt; void example(int x = 0, T&amp;&amp;... t);\n</code></pre>\n<p>In this case it is still possible to default <code>x</code> by calling <code>example();</code></p>\n", "LastActivityDate": "2017-11-16T14:02:39.417", "CommentCount": "1", "CreationDate": "2017-11-16T14:02:39.417", "ParentId": "47330640", "Score": "10", "OwnerUserId": "326275"}});