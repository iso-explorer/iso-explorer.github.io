post_cb({"bq_ids": {"n4140": {"so_7703575_7703674_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 37}}, "n3337": {"so_7703575_7703674_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 34}}, "n4659": {"so_7703575_7703674_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 37}}}, "7703674": {"Id": "7703674", "PostTypeId": "2", "Body": "<p>Casting a <code>double</code> to an <code>int</code> when <code>int</code> isn't big enough to hold the value yields <strong>undefined behaviour</strong>.</p>\n<blockquote>\n<p id=\"so_7703575_7703674_0\"><code>[n3290: 4.9/1]:</code> A prvalue of a floating point type can be converted\n  to a prvalue of an integer type. The conversion truncates; that is,\n  the fractional part is discarded. <strong>The behavior is undefined if the\n  truncated value cannot be represented in the destination type.</strong></p>\n</blockquote>\n<p>This behaviour is derived from C:</p>\n<blockquote>\n<p id=\"so_7703575_7703674_1\"><code>[C99: 6.3.1.4/1]:</code> When a finite value of real floating type is\n  converted to an integer type other than <code>_Bool</code>, the fractional part is\n  discarded (i.e., the value is truncated toward zero). <strong>If the value of\n  the integral part cannot be represented by the integer type, the\n  behavior is undefined.</strong></p>\n</blockquote>\n<p>For you, <code>int</code> clearly isn't big enough.</p>\n<ul>\n<li>And, in the first case, for you this just so happens to result in the sign bit being set.</li>\n<li>In the second and third cases, again for you, it's probably optimisations that happen to result in different behaviour.</li>\n</ul>\n<p>But don't rely on <em>either</em> (or, indeed, <em>any</em>) behaviour in this code.</p>\n", "LastActivityDate": "2011-10-09T13:01:47.290", "CommentCount": "0", "CreationDate": "2011-10-09T13:01:47.290", "ParentId": "7703575", "Score": "5", "OwnerUserId": "560648"}, "7703653": {"Id": "7703653", "PostTypeId": "2", "Body": "<p>From the C standard (1999):<br>\n<strong>6.3.1.4 Real floating and integer</strong><br>\n1 When a finite value of real floating type is converted to an integer type other than _Bool,\nthe fractional part is discarded (i.e., the value is truncated toward zero). If the value of\nthe integral part cannot be represented by the integer type, the behavior is undefined.</br></br></p>\n<p>From the C++ standard (2003):<br>\n<strong>4.9 Floating-integral conversions [conv.fpint]</strong><br>\n1 An rvalue of a floating point type can be converted to an rvalue of an integer type. The conversion truncates;\nthat is, the fractional part is discarded. The behavior is undefined if the truncated value cannot be\nrepresented in the destination type. [Note: If the destination type is bool, see 4.12. ]</br></br></p>\n<p>Most likely your double is too big to be converted correctly to int.</p>\n", "LastEditorUserId": "968261", "LastActivityDate": "2011-10-09T13:08:07.823", "Score": "5", "CreationDate": "2011-10-09T12:57:38.357", "ParentId": "7703575", "CommentCount": "6", "OwnerUserId": "968261", "LastEditDate": "2011-10-09T13:08:07.823"}, "7703575": {"ViewCount": "852", "Body": "<p>Here 's my simple code:</p>\n<pre><code>int main() {\n  double d1 = 10000000000.0;\n  const double d2 = 10000000000.0;\n\n  cout &lt;&lt; static_cast&lt;int&gt;(d1) &lt;&lt; endl;\n  cout &lt;&lt; static_cast&lt;int&gt;(d2) &lt;&lt; endl;\n  cout &lt;&lt; static_cast&lt;int&gt;(10000000000.0) &lt;&lt; endl;\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>-2147483648\n2147483647\n2147483647\n</code></pre>\n<p>This surprised me grealy. Why would a positive double sometimes get casted to a negative int?</p>\n<p>I'm using <code>g++</code>: GCC version 4.4.3 (Ubuntu 4.4.3-4ubuntu5).</p>\n", "Title": "Strange behavior when static casting from a big double to an integer", "CreationDate": "2011-10-09T12:43:08.177", "LastActivityDate": "2012-08-27T18:50:09.027", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-08-27T18:50:09.027", "LastEditorUserId": "834176", "Id": "7703575", "Score": "9", "OwnerUserId": "758557", "Tags": "<c++><casting><g++><int><double>", "AnswerCount": "2"}});