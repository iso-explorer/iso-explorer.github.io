post_cb({"42835144": {"ParentId": "42834902", "CommentCount": "0", "Body": "<p>Yes; citing N4640, [dcl.constexpr]/1:</p>\n<blockquote>\n<p id=\"so_42834902_42835144_0\">\u2026 A function or static data member declared with the <code>constexpr</code> specifier is implicitly an inline function or variable. \u2026</p>\n</blockquote>\n<p>The key here is \"<em>declared with</em>\" \u2013 the declaration is what matters, not the satisfaction of <code>constexpr</code> requirements.</p>\n", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "42835144", "Score": "3", "CreationDate": "2017-03-16T13:14:26.900", "LastActivityDate": "2017-03-16T13:14:26.900"}, "42834902": {"CommentCount": "4", "ViewCount": "99", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-03-16T13:03:37.213", "LastActivityDate": "2017-03-16T21:33:07.533", "Title": "Does template function declared constexpr allways inline even if instantiation is not constexpr?", "AcceptedAnswerId": "42835144", "LastEditDate": "2017-05-23T12:17:23.060", "Id": "42834902", "Score": "1", "Body": "<p>According to this <a href=\"https://stackoverflow.com/a/14391320/5632316\">answer</a> constexpr function are always <code>inline</code>.</p>\n<p>A template function can be declared <code>constexpr</code> even if all specialization does not fulfill the requirements to be a <code>constexpr</code> function. In this last case, the specialization is not <code>constexpr</code>.</p>\n<p>For example:</p>\n<pre><code>template&lt;class T&gt;\nconstexpr decltype(auto) size(const T&amp; a){\n   return a.size();\n}\nstd::array&lt;int,10&gt; arr;\nstd::vector&lt;int&gt; vec;\nsize(arr);//constexpr\nsize(vec);//not a constexpr;\n</code></pre>\n<p>The instantiation <code>size&lt;std::vector&gt;</code> is not <code>constexpr</code>, but is it <code>inline</code>?</p>\n", "Tags": "<c++><language-lawyer><inline><constexpr>", "OwnerUserId": "5632316", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_42834902_42835144_0": {"section_id": 48, "quality": 0.5454545454545454, "length": 6}}, "n3337": {"so_42834902_42835144_0": {"section_id": 254, "quality": 0.5454545454545454, "length": 6}}, "n4659": {"so_42834902_42835144_0": {"section_id": 6839, "quality": 1.0, "length": 11}}}});