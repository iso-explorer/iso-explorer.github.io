post_cb({"46946720": {"CommentCount": "1", "Body": "<p>Historically, <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#92\" rel=\"nofollow noreferrer\">exception specifiers have not been part of the type system</a>:</p>\n<blockquote>\n<ol start=\"92\">\n<li>Should <strong><em>exception-specifications</em></strong> be part of the type system? </li>\n</ol>\n<p id=\"so_46946506_46946720_0\">[\u2026]</p>\n<p id=\"so_46946506_46946720_1\">EWG determined that no action should be taken on this issue.</p>\n</blockquote>\n<p>This is certainly a bit surprising.  It is not a loophole in the type system as such because the types are still checked at run time (resulting in abnormal translation if necessary).</p>\n<p>However, this issue was resurrected in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html\" rel=\"nofollow noreferrer\">P0012R1</a> and merged into the standard with <a href=\"https://github.com/cplusplus/draft/commit/6e75f2d588a4b1b0c220eb8eec4b9ad8cb6107f3\" rel=\"nofollow noreferrer\">this commit</a>:</p>\n<pre><code>commit 6e75f2d588a4b1b0c220eb8eec4b9ad8cb6107f3\nAuthor: Dawn Perchik &lt;dperchik@embarcadero.com&gt;\nDate:   Thu Oct 29 12:11:02 2015 -0700\n\n    P0012R1 Make exception specifications be part of the type system, version 5\n</code></pre>\n<p>So it's not in C++14, but will be in C++17.  Typically, there is some lag until compilers implement new language features.</p>\n", "CreationDate": "2017-10-26T05:49:57.330", "ParentId": "46946506", "Id": "46946720", "LastActivityDate": "2017-10-26T05:49:57.330", "PostTypeId": "2", "Score": "1", "OwnerUserId": "8316315"}, "46946798": {"CommentCount": "0", "Body": "<p>GCC bug. This is not valid C++11/14 either. N3337 <a href=\"https://timsong-cpp.github.io/cppwp/n3337/except.spec\" rel=\"nofollow noreferrer\">[except.spec]/5</a>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_46946506_46946798_0\">If a virtual function has an <em>exception-specification</em>, all\n  declarations, including the definition, of any function that overrides\n  that virtual function in any derived class shall only allow exceptions\n  that are allowed by the <em>exception-specification</em> of the base class\n  virtual function. [ <em>Example:</em> ...  <em>\u2014 end example</em> ] <strong>A similar\n  restriction applies to assignment to and initialization of pointers to\n  functions, pointers to member functions, and references to functions:\n  the target entity shall allow at least the exceptions allowed by the\n  source value in the assignment or initialization.</strong></p>\n</blockquote>\n<p>This is what people mean when they say that pre-C++17 exception specification is a \"shadow type system\": they are not part of the actual type, but behave in several contexts (initialization, assignment, virtual overrides) as if they are.</p>\n", "CreationDate": "2017-10-26T05:55:41.167", "ParentId": "46946506", "Id": "46946798", "LastActivityDate": "2017-10-26T05:55:41.167", "PostTypeId": "2", "Score": "2", "OwnerUserId": "2756719"}, "46946596": {"CommentCount": "2", "Body": "<p>According to <a href=\"https://gcc.gnu.org/projects/cxx-status.html\" rel=\"nofollow noreferrer\">this page</a>, the C++17 feature \"Make exception specifications be part of the type system\" is available starting from GCC 7.0.</p>\n", "CreationDate": "2017-10-26T05:40:15.797", "ParentId": "46946506", "Id": "46946596", "LastActivityDate": "2017-10-26T05:40:15.797", "PostTypeId": "2", "Score": "1", "OwnerUserId": "481267"}, "46946506": {"CreationDate": "2017-10-26T05:33:58.303", "ViewCount": "44", "Id": "46946506", "AcceptedAnswerId": "46946596", "Score": "0", "Title": "Is there anything wrong with gcc when compiling a nonthrowing pointing to a function which might throw?", "CommentCount": "0", "Body": "<p>I have read the book C++ Primer 5th ed. In section Exception Specifications and Pointers, Virtuals, and Copy Control, it says:  </p>\n<blockquote>\n<p id=\"so_46946506_46946506_0\">That is, if we declare a pointer that has a nonthrowing exception specification, we can use that pointer only to point to similarly qualified\n  functions. </p>\n</blockquote>\n<p>And I also refer to <a href=\"http://en.cppreference.com/w/cpp/language/noexcept_spec\" rel=\"nofollow noreferrer\">noexcept specifier (since C++11)</a>, there is also something similar:  </p>\n<blockquote>\n<p id=\"so_46946506_46946506_1\">Pointers to non-throwing functions are implicitly convertible (since C++17)can be assigned (until C++17) to pointers to potentially-throwing functions, but not the other way around.</p>\n</blockquote>\n<pre><code>void ft(); // potentially-throwing\nvoid (*fn)() noexcept = ft; // error\n</code></pre>\n<p>When I compile the sample snippet with <code>gcc version 5.4.0 20160609</code>, there is no error or warning.<br>\nBut when I compile it with <code>Microsoft (R) C/C++ Optimizing Compiler Version 19.00.24215.1 for x86</code>, it complains that <code>error C2440: 'initializing': cannot convert from 'void (__cdecl *)(void)' to 'void (__cdecl *)(void) noexcept'</code>. It seems right behavior.  </br></p>\n<p>So I wonder is there something wrong with <code>gcc</code> compiler?</p>\n", "Tags": "<c++><c++11><gcc><visual-c++><noexcept>", "LastActivityDate": "2017-10-26T05:55:41.167", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "6099429"}, "bq_ids": {"n4140": {"so_46946506_46946798_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 3367}}, "n3337": {"so_46946506_46946798_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 3237}}}});