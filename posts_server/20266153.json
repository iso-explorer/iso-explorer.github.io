post_cb({"bq_ids": {"n4140": {"so_20266153_20266642_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 3326}}, "n3337": {"so_20266153_20266642_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 3196}}, "n4659": {"so_20266153_20266642_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 4092}}}, "20266642": {"Id": "20266642", "PostTypeId": "2", "Body": "<p>According to C++11 \u00a7 8.5.4 [dcl.init.list] paragraph 4:</p>\n<blockquote>\n<p id=\"so_20266153_20266642_0\">4 Within the initializer-list of a braced-init-list, the\n  initializer-clauses, including any that result from pack expansions\n  (14.5.3), are evaluated in the order in which they appear. That is,\n  every value computation and side effect associated with a given\n  initializer-clause is sequenced before every value computation and\n  side effect associated with any initializer-clause that follows it in\n  the comma-separated list of the initializer-list.</p>\n</blockquote>\n<p>As far as I know GCC 4.8.1 has a bug relative to evaluation of initializers. I described it here</p>\n<p><a href=\"http://cpp.forum24.ru/?1-3-0-00000063-000-0-0-1378892425\" rel=\"nofollow\">http://cpp.forum24.ru/?1-3-0-00000063-000-0-0-1378892425</a></p>\n<p>Though the text is written in Russion but it can be simply translated in English by using for example google translate.</p>\n", "LastEditorUserId": "923854", "LastActivityDate": "2013-11-28T16:32:23.200", "Score": "4", "CreationDate": "2013-11-28T12:48:04.047", "ParentId": "20266153", "CommentCount": "0", "LastEditDate": "2013-11-28T16:32:23.200", "OwnerUserId": "2877241"}, "20266153": {"ViewCount": "477", "Body": "<p>Is the comma (<code>,</code>) a sequence point in <code>std::initializer_list</code>?</p>\n<hr>\n<p>example: is this UB or not:</p>\n<pre><code>#include &lt;vector&gt;\n\nint main() \n{\n    auto nums = []\n    {\n        static unsigned x = 2;\n        return ( x++ % 2 ) + 1;\n    };\n\n    std::vector&lt; int &gt; v{ nums(), nums(), nums(), nums(), nums() };\n    // not sure if this is different: (note the additional brackets)\n    // std::vector&lt; int &gt; v({ nums(), nums(), nums(), nums(), nums() });\n    for( auto i : v )\n    {\n        std::cout &lt;&lt; i;\n    }\n\n    return 0;\n}\n</code></pre>\n</hr>", "AcceptedAnswerId": "20266642", "Title": "std::initializer_list and order of evaluation of the elements", "CreationDate": "2013-11-28T12:23:56.750", "Id": "20266153", "CommentCount": "13", "PostTypeId": "1", "ClosedDate": "2013-11-29T07:52:35.880", "LastActivityDate": "2013-11-28T16:32:23.200", "Score": "2", "OwnerUserId": "435800", "Tags": "<c++><c++11><initializer-list><sequence-points>", "AnswerCount": "1"}});