post_cb({"914035": {"ParentId": "913980", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The SGI implementation probably uses a growable array, so if an insert causes the array to grow, the iterators pointing to the old array are invalid.  </p>\n<p>EDIT: </p>\n<p>Looking in section 17.2.3 of The C++ Programming Language Third Edition, I don't see anything in the description of deque that indicates what operations preserve or invalidate iterators.  I may be looking in the wrong spot or the behavior may be undefined.</p>\n", "OwnerUserId": "85306", "LastEditorUserId": "85306", "LastEditDate": "2009-05-27T05:18:00.480", "Id": "914035", "Score": "0", "CreationDate": "2009-05-27T05:05:29.970", "LastActivityDate": "2009-05-27T05:18:00.480"}, "914037": {"ParentId": "913980", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"noreferrer\">standard working draft</a></p>\n<blockquote>\n<p id=\"so_913980_914037_0\">template &lt; class InputIterator &gt;\n      void insert ( iterator position ,\n                      InputIterator first , InputIterator last );</p>\n<p id=\"so_913980_914037_1\">1     Effects: An insert in the middle\n  of the deque invalidates all the\n  iterators and references to elements\n  of the deque.  An insert at either end\n  of the deque invalidates all the\n  iterators to the deque, but has no\n  effect on the validity of references\n  to elements of the deque.\"</p>\n</blockquote>\n<p>So both are correct.  As Josuttis indicates, insertion at the front or back doesn't invalidate references to elements of the deque, only iterators to the <em>deque itself</em>.</p>\n<p>EDIT: A <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2798.pdf\" rel=\"noreferrer\">more up-to-date draft</a> says essentially the same thing (section 23.2.2.3)</p>\n", "OwnerUserId": "47773", "LastEditorUserId": "47773", "LastEditDate": "2009-05-27T05:22:18.730", "Id": "914037", "Score": "13", "CreationDate": "2009-05-27T05:06:22.653", "LastActivityDate": "2009-05-27T05:22:18.730"}, "14172754": {"ParentId": "913980", "PostTypeId": "2", "CommentCount": "12", "Body": "<blockquote>\n<p id=\"so_913980_14172754_0\">IMHO, deque is collection of blocks with first block growing in one direction and the last block in opposite direction.</p>\n</blockquote>\n<p>Your opinion is your prerogative, but it's wrong. :)</p>\n<p><code>deque</code> is such a container <em>semantically</em>, but in terms of implementation it's designed to be implemented by one or more blocks of memory. <a href=\"https://stackoverflow.com/a/6442829/560648\">C++'s iterator invalidation rules</a> come from implementation, so this is why. Arguably this is a small abstraction leak but, well, whatever.</p>\n<p>The SGI STL documentation is not the proper documentation to read, because <a href=\"https://stackoverflow.com/q/5205491/560648\">the SGI STL is not the C++ Standard Library</a>. Unfortunately, Josuttis is one of those people who calls it \"the STL\", and this has led to your confusion.</p>\n<hr>\n<blockquote>\n<p id=\"so_913980_14172754_1\">Following is the excerpts from -- The C++ Standard Library: A Tutorial and Reference, By Nicolai M. Josuttis</p>\n<blockquote>\n<p id=\"so_913980_14172754_3\">Any insertion or deletion of elements <strong>other than</strong> at the beginning or end invalidates all pointers, references, and iterators that refer to elements of the deque.</p>\n</blockquote>\n</blockquote>\n<p>Put simply, this passage from Josuttis is <em>misleading</em> in implying that the insertion or deletion of elements that <em>are</em> at the beginning or end do <em>not</em> invalidate pointers, references or iterators \u2026 though it's worth noting that he never comes out and asserts this outright.</p>\n<hr>\n<p>Here are the real, proper, official rules for <code>std::deque</code>:</p>\n<h2>C++03</h2>\n<ul>\n<li><p><strong>Insertion</strong>: all iterators and references are invalidated, unless the inserted member is at an end (front or back) of the deque (in which case all iterators are invalidated, but references to elements are unaffected) [23.2.1.3/1]</p></li>\n<li><p><strong>Erasure</strong>: all iterators and references are invalidated, unless the erased members are at an end (front or back) of the deque (in which case only iterators and references to the erased members are invalidated) [23.2.1.3/4]</p></li>\n<li><p><strong>Resizing</strong>: as per insert/erase [23.2.1.2/1]</p></li>\n</ul>\n<h2>C++11</h2>\n<ul>\n<li><p><strong>Insertion</strong>: all iterators and references are invalidated, unless the inserted member is at an end (front or back) of the deque (in which case all iterators are invalidated, but references to elements are unaffected) [23.3.3.4/1]</p></li>\n<li><p><strong>Erasure</strong>: erasing the last element invalidates only iterators and references to the erased elements and the past-the-end iterator; erasing the first element invalidates only iterators and references to the erased elements; erasing any other elements invalidates all iterators and references (including the past-the-end iterator) [23.3.3.4/4]</p></li>\n<li><p><strong>Resizing</strong>: as per insert/erase [23.3.3.4/1]</p></li>\n</ul>\n<hr>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">Iterator invalidation rules</a></li>\n<li><a href=\"https://stackoverflow.com/q/5205491/560648\">What's the difference between \"STL\" and \"C++ Standard Library\"?</a></li>\n</ul>\n<p><sub>I'm not sure what further reference to credible sources you're looking for \u2014 the relevant standard passage has already been cited and quoted.</sub></p>\n</hr></hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:25.357", "Id": "14172754", "Score": "10", "CreationDate": "2013-01-05T14:31:23.027", "LastActivityDate": "2013-01-05T14:40:59.953"}, "913980": {"CommentCount": "0", "ViewCount": "5652", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2009-05-27T04:47:15.470", "LastActivityDate": "2013-01-05T14:40:59.953", "Title": "Confusion on iterators invalidation in deque", "FavoriteCount": "3", "LastEditDate": "2017-05-23T12:17:44.873", "Id": "913980", "Score": "13", "Body": "<p>I'm bit confused regarding iterator invalidation in deque. \n(In the context of <a href=\"https://stackoverflow.com/questions/913070/why-does-pushback-or-pushfront-invalidate-a-deques-iterators\">this</a> question)</p>\n<p>Following is the excerpts from -- The C++ Standard Library: A Tutorial and Reference, \nBy Nicolai M. Josuttis </p>\n<blockquote>\n<p id=\"so_913980_913980_0\">Any insertion or deletion of elements\n  <strong>other than</strong> at the beginning or end\n  invalidates all pointers, references,\n  and iterators that refer to elements\n  of the deque.</p>\n</blockquote>\n<p>Following is the excerpts from <a href=\"http://www.sgi.com/tech/stl/Deque.html\" rel=\"nofollow noreferrer\">SGI</a> site:</p>\n<blockquote>\n<p id=\"so_913980_913980_1\">The semantics of iterator invalidation\n  for deque is as follows. Insert\n  (including <code>push_front</code> and <code>push_back</code>)\n  invalidates all iterators that refer\n  to a deque. Erase in the middle of a\n  deque invalidates all iterators that\n  refer to the deque. Erase at the\n  beginning or end of a deque (including\n  <code>pop_front</code> and <code>pop_back</code>) invalidates an\n  iterator only if it points to the\n  erased element.</p>\n</blockquote>\n<p>IMHO, deque is collection of blocks with first block growing in one direction and the last block in opposite direction.</p>\n<pre><code>  -   -  -  \n  -   -  -\n  |   -  -  ^\n  |   -  -  |\n  V   -  -  |\n      -  -  -\n      -  -  -\n</code></pre>\n<p><code>push_back, push_front</code> should not have any impact on deque iterators ( I agree with Josuttis).</p>\n<p>What is the correct explanation? what the standard say on this?</p>\n", "Tags": "<c++><stl><standards><deque>", "OwnerUserId": "64960", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_913980_914037_0": {"section_id": 850, "quality": 0.8181818181818182, "length": 9}, "so_913980_914037_1": {"section_id": 817, "quality": 0.875, "length": 21}}, "n3337": {"so_913980_914037_0": {"section_id": 841, "quality": 0.8181818181818182, "length": 9}, "so_913980_914037_1": {"section_id": 806, "quality": 0.875, "length": 21}}, "n4659": {"so_913980_914037_0": {"section_id": 910, "quality": 0.8181818181818182, "length": 9}, "so_913980_914037_1": {"section_id": 876, "quality": 0.875, "length": 21}}}});