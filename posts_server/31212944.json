post_cb({"bq_ids": {"n4140": {"so_31212944_31213186_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6138}}, "n3337": {"so_31212944_31213186_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 5902}}, "n4659": {"so_31212944_31213186_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 7635}}}, "31213037": {"Id": "31213037", "PostTypeId": "2", "Body": "<p>To answer the question in the title:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main(int argc, char** argv) {\n  int x[5];\n\n  int i;\n  for (i = 0; i &lt; 5; ++i)\n    x[i] = i;\n\n\n  x[2.5] = 10;\n\n  for (i = 0; i &lt; 5; ++i)\n    printf(\"%d\\n\", x[i]);\n}\n</code></pre>\n<p>if i compile this with <code>gcc</code> i get a compiler error:</p>\n<pre><code>foo.c:10: error: array subscript is not an integer\n</code></pre>\n", "LastActivityDate": "2015-07-03T19:18:10.730", "CommentCount": "0", "CreationDate": "2015-07-03T19:18:10.730", "ParentId": "31212944", "Score": "2", "OwnerUserId": "2881298"}, "31213011": {"Id": "31213011", "PostTypeId": "2", "Body": "<p>There are no <code>float</code>s here. <code>size</code> is an integer, and <code>16</code> is an integer, and consequently <code>size/16</code> is an integer as well.</p>\n<p>Integer division rounds towards zero, so if <code>size</code> is in <code>[0,16)</code>, then <code>size/16 == 0</code>. If <code>size</code> is in <code>[16,32)</code>, then <code>size/16 == 1</code>, and so on. And if <code>size</code> is in <code>(-16, 0]</code>, then <code>size / 16 == 0</code> as well.</p>\n<p>(<code>[x,y)</code> is the \"half-open\" interval from <code>x</code> to <code>y</code>: that is, it contains every number between <code>x</code> and <code>y</code>, and furthermore it includes <code>x</code> but excludes <code>y</code>)</p>\n", "LastActivityDate": "2015-07-03T19:15:25.193", "CommentCount": "1", "CreationDate": "2015-07-03T19:15:25.193", "ParentId": "31212944", "Score": "8", "OwnerUserId": "1084944"}, "31212944": {"ViewCount": "352", "Body": "<p>I'm trying to understand exactly what happens when indexing through an array with a float value. </p>\n<p>This link: <a href=\"https://stackoverflow.com/questions/2310838/float-values-as-an-index-in-an-array-in-c\">Float Values as an index in an Array in C++</a></p>\n<p>Doesn't answer my question, as it states that the float should be rounded to an integer. However in the code I'm trying to evaluate, this answer does not make sense, as the index value would only ever be 0 or 1.</p>\n<p>I'm trying to solve a coding challenge posted by Nintendo. To solve the problem there is an archaic statement that uses a bitwise assignment into an array using a long complicated bitwise expression. </p>\n<p>The array is declared as a pointer</p>\n<p><code>unsigned int* b = new unsigned int[size / 16]; // &lt;- output tab</code></p>\n<p>Then it's assigned 0's to each element</p>\n<pre><code>for (int i = 0; i &lt; size / 16; i++) {   // Write size / 16 zeros to b\n    b[i] = 0;\n}\n</code></pre>\n<p>Here's the beginning of the statement.</p>\n<p><code>b[(i + j) / 32] ^= // some crazy bitwise expression</code></p>\n<p>The above sits inside of a nested for loop. </p>\n<p>I'm sparing a lot of code here, because I want to solve as much of this problem on my own as possible. But I'm wondering if there is a situation were you would want to iterate through an array like this.  </p>\n<p>There must be more to it than the float just automatically casting to an int. There hast to be more going on here.</p>\n", "AcceptedAnswerId": "31213011", "Title": "C++ - What happens when you index an array by a float?", "CreationDate": "2015-07-03T19:09:43.003", "Id": "31212944", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:43:49.457", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-03T19:31:43.907", "Score": "4", "OwnerUserId": "5056424", "Tags": "<c++><arrays><indexing>", "AnswerCount": "3"}, "31213186": {"Id": "31213186", "PostTypeId": "2", "Body": "<p>The <strong>subscript operator</strong> in terms of arrays is syntactic sugar. When you have the following :</p>\n<pre><code>class A {...}; \nA ar[17]; \nstd::cout &lt;&lt; ar[3] &lt;&lt; std::endl;\n</code></pre>\n<p>Saying <code>ar[3]</code> is no different than saying : </p>\n<pre><code>*(ar + 3); \n</code></pre>\n<p>So <code>ar[3.4]</code> is the same as saying </p>\n<pre><code>*(ar + 3.4)    (1)\n</code></pre>\n<p>From the C++ Standard section 5.7.1 - <strong>Additive operators</strong> we read that :</p>\n<blockquote>\n<p id=\"so_31212944_31213186_0\">(...) For addition, either both operands shall have arithmetic or unscoped enumeration type, <strong>or one operand shall be a pointer to a completely-defined object type and the other shall have integral or unscoped enumeration type.</strong></p>\n</blockquote>\n<p>that's why expression (1) causes <a href=\"http://coliru.stacked-crooked.com/a/acd00480cc7cc905\" rel=\"nofollow\">compilation error</a>. </p>\n<p><strong>So, when you index an array by a float you get a compilation error</strong></p>\n", "LastActivityDate": "2015-07-03T19:31:43.907", "CommentCount": "0", "CreationDate": "2015-07-03T19:31:43.907", "ParentId": "31212944", "Score": "3", "OwnerUserId": "2567683"}});