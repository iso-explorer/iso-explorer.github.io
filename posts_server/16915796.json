post_cb({"16916241": {"Id": "16916241", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16915796_16916241_0\">The reason I'm asking is, that I once heard that <code>std::exception_ptr</code> is implemented in terms of reference counting [...]</p>\n</blockquote>\n<p>Not necessarily, but it could be. Paragraph 18.8.5/6 of the C++11 Standard mentions this in a note:</p>\n<blockquote>\n<pre><code>typedef unspecified exception_ptr;\n</code></pre>\n<p id=\"so_16915796_16916241_1\">[...]</p>\n<p id=\"so_16915796_16916241_2\">6 [ <em>Note</em>: An implementation might use a reference-counted smart pointer as <code>exception_ptr</code>. \u2014<em>end\n  note</em> ]</p>\n</blockquote>\n<p>Therefore, you may not want to establish cycles of <code>exception_ptr</code>.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-06-04T11:13:42.397", "Score": "1", "CreationDate": "2013-06-04T11:06:59.943", "ParentId": "16915796", "CommentCount": "0", "LastEditDate": "2013-06-04T11:13:42.397", "OwnerUserId": "1932150"}, "bq_ids": {"n4140": {"so_16915796_16916241_2": {"length": 7, "quality": 0.7, "section_id": 6938}}, "n3337": {"so_16915796_16916241_2": {"length": 7, "quality": 0.7, "section_id": 6686}}, "n4659": {"so_16915796_16916241_2": {"length": 7, "quality": 0.7, "section_id": 8435}}}, "16915796": {"ViewCount": "126", "Body": "<p>If I define an exception class </p>\n<pre><code>class Exception : public std::runtime_error\n{\n/*...*/\nprivate:\n    std::exception_ptr next;\n    std::exception_ptr prev;\n}\n</code></pre>\n<p>in which I refer to pending exceptions by <code>next</code> and new thrown exceptions while <code>this</code> is pending by <code>prev</code>, do the exception get freed after the exception is handled? The reason I'm asking is, that I once heard that <code>std::exception_ptr</code> is implemented in terms of reference counting which can lead to memory leaks, if there are reference cicles as I produced in this class.</p>\n", "AcceptedAnswerId": "16916241", "Title": "Is it possible to create a memory leak by using std::exception_ptr", "CreationDate": "2013-06-04T10:44:40.240", "Id": "16915796", "CommentCount": "0", "LastEditDate": "2013-06-04T11:06:44.033", "PostTypeId": "1", "LastEditorUserId": "1932150", "LastActivityDate": "2013-06-04T11:13:42.397", "Score": "1", "OwnerUserId": "1335865", "Tags": "<c++><c++11><exception-handling><nested-exceptions>", "AnswerCount": "1"}});