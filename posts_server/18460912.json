post_cb({"18461000": {"ParentId": "18460912", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You should not call main inside main, it is <strong>undefined behavior</strong>. </p>\n<p>\u00a7 5.2.2.9 Function call</p>\n<blockquote>\n<p id=\"so_18460912_18461000_0\">Recursive calls are permitted, except to the function named main (3.6.1).</p>\n</blockquote>\n<p>\u00a7 3.6.1</p>\n<blockquote>\n<p id=\"so_18460912_18461000_1\"><strong>The function main shall not be used within a program.</strong> The linkage (3.5) of main is implementation-defined. A program that defines main as deleted or that declares main to be inline, static, or constexpr is illformed. The name main is not otherwise reserved. [ Example: member functions, classes, and enumerations can be called main, as can entities in other namespaces. \u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2013-08-27T09:02:12.147", "Id": "18461000", "Score": "3", "CreationDate": "2013-08-27T08:50:39.093", "LastActivityDate": "2013-08-27T09:02:12.147"}, "18460973": {"ParentId": "18460912", "CommentCount": "0", "Body": "<p>In C++, calling <code>main()</code> from your is not allowed. So it is an error. Even taking its address is error.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "18460973", "Score": "1", "CreationDate": "2013-08-27T08:49:26.833", "LastActivityDate": "2013-08-27T08:49:26.833"}, "18461010": {"ParentId": "18460912", "CommentCount": "1", "Body": "<p><code>main()</code> has only one entry point. So, its not allowed to be called again. </p>\n", "OwnerUserId": "1544153", "PostTypeId": "2", "Id": "18461010", "Score": "0", "CreationDate": "2013-08-27T08:51:16.083", "LastActivityDate": "2013-08-27T08:51:16.083"}, "18460986": {"ParentId": "18460912", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_18460912_18460986_0\">main() function call itself in C++, what will happen?</p>\n</blockquote>\n<p><strong>Anything can happen, since it's undefined behavior.</strong> But as the program is currently standing, some infinite recursion (and eventually a stack overflow) seems reasonable.</p>\n", "Id": "18460986", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "3", "CreationDate": "2013-08-27T08:50:05.447", "LastActivityDate": "2013-08-27T08:50:05.447"}, "18460912": {"CommentCount": "5", "ViewCount": "1212", "PostTypeId": "1", "ClosedDate": "2013-08-27T09:04:31.087", "LastEditorUserId": "1848140", "CreationDate": "2013-08-27T08:46:20.297", "LastActivityDate": "2013-08-27T09:02:12.147", "Title": "main() function calls itself in C++, what will happen?", "AcceptedAnswerId": "18460988", "LastEditDate": "2013-08-27T08:50:09.243", "Id": "18460912", "Score": "1", "Body": "<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    main();\n    std::cout&lt;&lt;\"Hello World! \"&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n<p>This is the code, How does it behave? Why?</p>\n", "Tags": "<c++><main>", "OwnerUserId": "2670135", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_18460912_18461000_0": {"section_id": 5996, "quality": 0.625, "length": 5}, "so_18460912_18461000_1": {"section_id": 7147, "quality": 0.8055555555555556, "length": 29}}, "n3337": {"so_18460912_18461000_0": {"section_id": 5764, "quality": 0.875, "length": 7}, "so_18460912_18461000_1": {"section_id": 6891, "quality": 0.8055555555555556, "length": 29}}, "n4659": {"so_18460912_18461000_0": {"section_id": 7497, "quality": 0.625, "length": 5}, "so_18460912_18460986_0": {"section_id": 8657, "quality": 0.5714285714285714, "length": 4}, "so_18460912_18461000_1": {"section_id": 8648, "quality": 0.7777777777777778, "length": 28}}}, "18460988": {"ParentId": "18460912", "CommentCount": "0", "Body": "<p>That's undefined behaviour. You cannot call main() from within a C++ program (section 3.6.1.3 of the standard).</p>\n<p>Therefore anything can happen. And there's no point in asking why.</p>\n", "OwnerUserId": "1182921", "PostTypeId": "2", "Id": "18460988", "Score": "7", "CreationDate": "2013-08-27T08:50:09.747", "LastActivityDate": "2013-08-27T08:50:09.747"}});