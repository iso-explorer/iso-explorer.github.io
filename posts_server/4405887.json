post_cb({"4405905": {"ParentId": "4405887", "PostTypeId": "2", "CommentCount": "15", "CreationDate": "2010-12-10T05:17:47.163", "Score": "3", "LastEditorUserId": "151292", "LastEditDate": "2010-12-10T05:23:06.603", "Id": "4405905", "OwnerUserId": "151292", "Body": "<p>Yes, all overloads should be brought into the global namespace.  My understanding is that the <code>math.h</code> header is intended to look something like:</p>\n<pre><code>// math.h:\n#include &lt;cmath&gt;\n\nusing std::abs;\n// etc.\n</code></pre>\n<p>So, yes:  the behavior of your example program is different when compiled as a C program than when compiled as a C++ program.  As a C++ program, it will call <code>std::abs(double)</code> from <code>&lt;math.h&gt;</code>.  As a C program it will call <code>abs(int)</code> from <code>&lt;stdlib.h&gt;</code> (this is the only <code>abs</code> function in the C Standard Library, since C does not support function overloading).</p>\n", "LastActivityDate": "2010-12-10T05:23:06.603"}, "4405887": {"CommentCount": "3", "AcceptedAnswerId": "4405905", "PostTypeId": "1", "LastEditorUserId": "103167", "CreationDate": "2010-12-10T05:13:54.460", "LastActivityDate": "2010-12-10T05:40:36.213", "LastEditDate": "2010-12-10T05:40:36.213", "ViewCount": "770", "FavoriteCount": "1", "Title": "When the C++ standard provides C headers bringing names into the global namespace, does that include overloads?", "Id": "4405887", "Score": "6", "Body": "<p>The final committee draft of the upcoming C++0x standard says:</p>\n<blockquote>\n<p id=\"so_4405887_4405887_0\">Every C header, each of which has a\n  name of the form name.h, behaves as if\n  each name placed in the standard\n  library namespace by the corresponding\n  cname header is placed within the\n  global namespace scope.  It is\n  unspecified whether these names are\n  first declared or defined within\n  namespace scope (3.3.6) of the\n  namespace std and are then injected\n  into the global namespace scope by\n  explicit using-declarations (7.3.3).</p>\n</blockquote>\n<p>Earlier C++ standards read similarly.</p>\n<p>My question is, when the C++ header <code>#include&lt;cname&gt;</code> uses overloaded functions, are all overloads brought in by <code>#include&lt;name.h&gt;</code>, since overloads aren't separate \"names\"?</p>\n<p>And should the behavior of the following code differ between standard-compliant C and C++ compilers?</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;math.h&gt;\nint main(void)\n{\n    double arg = -2.5;\n    double result = abs(arg) / 3;\n    printf(\"%f\\n\", result);\n    return 0;\n}\n</code></pre>\n<p>Compile-ready test cases:</p>\n<ul>\n<li>C++ <code>math.h</code> and <code>stdlib.h</code>: <a href=\"http://ideone.com/pmD4t\" rel=\"noreferrer\">http://ideone.com/pmD4t</a></li>\n<li>C <code>math.h</code> and <code>stdlib.h</code>: <a href=\"http://ideone.com/Sflpn\" rel=\"noreferrer\">http://ideone.com/Sflpn</a></li>\n<li>C++ <code>cmath</code> and <code>cstdlib</code>: <a href=\"http://ideone.com/yI07m\" rel=\"noreferrer\">http://ideone.com/yI07m</a></li>\n<li>C++ <code>cmath</code> only: <a href=\"http://ideone.com/KrS3W\" rel=\"noreferrer\">http://ideone.com/KrS3W</a></li>\n</ul>\n<p>From this test, C++ <code>math.h</code> acts like C and not like C++ <code>cmath</code>.</p>\n<p>But on Visual C++ 2010, C++ <code>math.h</code> acts like C++ <code>cmath</code>.</p>\n<p>And a compile-time canary for use with <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"noreferrer\">Comeau try-it-out</a>:</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;math.h&gt;\n\ntemplate&lt;typename T&gt; struct typecheck {};\ntemplate&lt;&gt; struct typecheck&lt;int&gt; { enum { value = 1 }; };\n\ntemplate&lt;typename T&gt;\ntypecheck&lt;T&gt; f(const T&amp; t) { return typecheck&lt;T&gt;(); }\n\nint main(void)\n{\n    double arg = -2.5;\n    auto result = abs(arg) / 3;\n    printf(\"%d\\n\", f(result).value);\n    return 0;\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>Comeau C/C++ 4.3.10.1 (Oct  6 2008 11:28:09) for ONLINE_EVALUATION_BETA2\nCopyright 1988-2008 Comeau Computing.  All rights reserved.\nMODE:strict errors C++ C++0x_extensions\n\n\"ComeauTest.c\", line 15: error: class \"typecheck&lt;double&gt;\" has no member \"value\"\n      printf(\"%d\\n\", f(result).value);\n                               ^\n\n1 error detected in the compilation of \"ComeauTest.c\".\n</code></pre>\n<p>Comeau agrees with Visual C++.</p>\n", "Tags": "<c++><header><backwards-compatibility><function-overloading><cmath>", "OwnerUserId": "103167", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_4405887_4405887_0": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}}, "n3337": {"so_4405887_4405887_0": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_4405887_4405887_0": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}}}});