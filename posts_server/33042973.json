post_cb({"33043078": {"ParentId": "33042973", "CommentCount": "0", "Body": "<p>From the C++ standard, \u00a727.9.1.4 [filebuf.members], paragraph 6:</p>\n<blockquote>\n<p id=\"so_33042973_33043078_0\"><code>basic_filebuf&lt;charT,traits&gt;* close();</code><br/>\n     \u00a0\u00a0  Effects: If <code>is_open() == false</code>, returns a null pointer.\u2026</p>\n</blockquote>\n", "OwnerUserId": "1566221", "PostTypeId": "2", "Id": "33043078", "Score": "8", "CreationDate": "2015-10-09T16:25:36.907", "LastActivityDate": "2015-10-09T16:25:36.907"}, "33043120": {"ParentId": "33042973", "LastEditDate": "2015-10-09T16:51:12.740", "CommentCount": "3", "CreationDate": "2015-10-09T16:27:43.080", "OwnerUserId": "5405790", "LastEditorUserId": "2692339", "PostTypeId": "2", "Id": "33043120", "Score": "6", "Body": "<p>Yes, you can <code>close()</code> the file always, even the file is not opened.\nNo matter LINUX or Windows, I always <code>close()</code> without thinking they are opened or not.</p>\n<p>From LINUX:</p>\n<pre><code>void\nclose()\n{\n     if (!_M_filebuf.close())\n        this-&gt;setstate(ios_base::failbit);\n}\n</code></pre>\n", "LastActivityDate": "2015-10-09T16:51:12.740"}, "bq_ids": {"n4140": {"so_33042973_33043078_0": {"section_id": 2426, "quality": 0.625, "length": 5}}, "n3337": {"so_33042973_33043078_0": {"section_id": 2411, "quality": 0.625, "length": 5}}, "n4659": {"so_33042973_33043078_0": {"section_id": 2701, "quality": 0.625, "length": 5}}}, "33042973": {"CommentCount": "6", "ViewCount": "974", "CreationDate": "2015-10-09T16:18:50.480", "LastActivityDate": "2015-10-09T16:51:12.740", "Title": "Can you safely close a file that was never opened?", "AcceptedAnswerId": "33043181", "PostTypeId": "1", "Id": "33042973", "Score": "12", "Body": "<p>If I have a <a href=\"http://en.cppreference.com/w/cpp/io/basic_fstream\"><code>std::ofstream</code></a> that may or may not have been opened, is it safe to try to <code>close</code> regardless? In otherwords does <code>close()</code> do anything nasty (throw exception, etc) if <code>!is_open()</code>. For example</p>\n<pre><code>std::ofstream out;\nif (some_condition)\n{\n    out.open(path, std::ios::out);\n}\n</code></pre>\n<p>After I'm done with the file, can I just say</p>\n<pre><code>out.close();\n</code></pre>\n<p>Or should I first check</p>\n<pre><code>if (out.is_open())\n    out.close();\n</code></pre>\n<p>The only description of <a href=\"http://en.cppreference.com/w/cpp/io/basic_fstream/close\"><code>std::basic_fstream::close</code></a> on cppreference is  </p>\n<blockquote>\n<p id=\"so_33042973_33042973_0\">Closes the associated file.<br>\n  Effectively calls <code>rdbuf()-&gt;close()</code>. If an error occurs during operation, <code>setstate(failbit)</code> is called.</br></p>\n</blockquote>\n", "Tags": "<c++><file-io><error-handling><ofstream>", "OwnerUserId": "2296458", "AnswerCount": "3"}, "33043181": {"ParentId": "33042973", "CommentCount": "0", "Body": "<p>It does exactly what cppreference says it will: the failbit will be set, and you can inspect it with the fail() method. For instance, the following prints \"fail\\n\":</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nint main(int argc, char ** argv)\n{\n        std::ofstream out;\n        out.close();\n        if (out.fail())\n                std::cout &lt;&lt; \"fail\" &lt;&lt; std::endl;\n        return 0;\n}\n</code></pre>\n<p>In terms of interaction with the operating system, there's nothing there to close, but it's otherwise harmless.</p>\n", "OwnerUserId": "5071598", "PostTypeId": "2", "Id": "33043181", "Score": "14", "CreationDate": "2015-10-09T16:31:09.083", "LastActivityDate": "2015-10-09T16:31:09.083"}});