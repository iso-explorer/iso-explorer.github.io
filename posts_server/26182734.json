post_cb({"26182734": {"CommentCount": "2", "AcceptedAnswerId": "26182783", "PostTypeId": "1", "LastEditorUserId": "157971", "CreationDate": "2014-10-03T16:12:26.173", "LastActivityDate": "2014-10-03T17:21:25.573", "LastEditDate": "2014-10-03T16:54:02.960", "ViewCount": "163", "FavoriteCount": "2", "Title": "What is the behavior of a defaulted default constructor with in-class initialization?", "Id": "26182734", "Score": "7", "Body": "<p>Suppose the following:</p>\n<pre><code>class foo\n{\npublic:\n  foo() = default;\n\nprivate:\n  std::string m_str = \"Hello\";\n};\n</code></pre>\n<p>I am not able to find any documentation on cppreference.com or the C++11 draft that explains what the default constructor will do to m_str here. My natural assumption is that the compiler is smart enough to not initialize <code>m_str</code> in the defaulted constructor if it has already been initialized in-class, but maybe I'm wrong.</p>\n<p>Can anyone explain the initialization behavior here? Any guarantees or is this unspecified?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "157971", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26182734_26183427_5": {"section_id": 435, "quality": 0.6538461538461539, "length": 17}, "so_26182734_26183427_1": {"section_id": 3280, "quality": 0.8648648648648649, "length": 32}, "so_26182734_26182783_0": {"section_id": 370, "quality": 0.8888888888888888, "length": 16}, "so_26182734_26183427_6": {"section_id": 435, "quality": 0.875, "length": 7}}, "n3337": {"so_26182734_26183427_3": {"section_id": 5635, "quality": 1.0, "length": 5}, "so_26182734_26183427_5": {"section_id": 427, "quality": 0.9615384615384616, "length": 25}, "so_26182734_26183427_1": {"section_id": 3151, "quality": 0.8648648648648649, "length": 32}, "so_26182734_26182783_0": {"section_id": 360, "quality": 0.8888888888888888, "length": 16}, "so_26182734_26183427_6": {"section_id": 427, "quality": 0.875, "length": 7}}, "n4659": {"so_26182734_26183427_5": {"section_id": 454, "quality": 0.6538461538461539, "length": 17}, "so_26182734_26182783_0": {"section_id": 384, "quality": 0.8888888888888888, "length": 16}, "so_26182734_26183427_1": {"section_id": 4042, "quality": 0.8378378378378378, "length": 31}, "so_26182734_26183427_6": {"section_id": 454, "quality": 0.75, "length": 6}}}, "26183427": {"ParentId": "26182734", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>The form of initialization you are using for <code>m_str</code> is called <em>brace-or-equal-initializer</em> by the standard.</p>\n<p>In the first paragraph under <strong>Intializers</strong>, the standard states:</p>\n<blockquote>\n<p id=\"so_26182734_26183427_0\"><strong>8.5 Intializers</strong></p>\n<p id=\"so_26182734_26183427_1\">1 A declarator can specify an initial value for the identifier being declared. The identifier designates a variable being initialized. The process of initialization described in the remainder of 8.5 applies also to initializations specified by other syntactic contexts, such as the initialization of function parameters with argumet expressions (5.2.2) or the initialization of return values (6.6.3).</p>\n<pre><em>\n        initializer:\n            brace-or-equal-initializer\n            ( expression-list )\n        brace-or-equal-initializer:\n            = initializer-clause\n            braced-init-list\n</em>\n</pre>\n</blockquote>\n<p>And in the section on class members...</p>\n<blockquote>\n<p id=\"so_26182734_26183427_2\"><strong>9.2 Class members</strong></p>\n<p id=\"so_26182734_26183427_3\">5 A member can be initialized using a brace-or-equal-initializer.</p>\n</blockquote>\n<p>And in the section on initializing bases and members...</p>\n<blockquote>\n<p id=\"so_26182734_26183427_4\"><strong>12.6.2 Initializing bases and members</strong></p>\n<p id=\"so_26182734_26183427_5\">8 In a non-delegating constructor, if a given non-static data member or base class is not designated by a mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no ctor-initializer) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<p id=\"so_26182734_26183427_6\">\u2014 if the entity is a non-static data member that has a brace-or-equal-initializer, the entity is initializedas specified in 8.5</p>\n</blockquote>\n<p>Coming to your class,</p>\n<pre><code>foo() = default;\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>foo(){}\n</code></pre>\n<p>When a default constructor with no member initializer list is used, the member data are default initialized. In the default initialization process, for members that have a <em>brace-or-equal-initializer</em>, that form is used to initialize them. In your case,</p>\n<pre><code>foo(){}\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>foo() : m_str(\"Hello\") {}\n</code></pre>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2014-10-03T17:21:25.573", "Id": "26183427", "Score": "4", "CreationDate": "2014-10-03T17:02:38.787", "LastActivityDate": "2014-10-03T17:21:25.573"}, "26182783": {"ParentId": "26182734", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>This is well defined and specified in [class.ctor]/5:</p>\n<blockquote>\n<p id=\"so_26182734_26182783_0\">[...] The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no ctor-initializer (12.6.2) and an empty compound-statement. [...]</p>\n</blockquote>\n<p>So the defaulted constructor performs the same action as:</p>\n<pre><code>foo() {}\n</code></pre>\n<p>This in turn applies the brace-or-equal initializer to each data member as appropriate (cf. [class.base.init]/8).</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "420683", "LastEditDate": "2014-10-03T16:30:10.757", "Id": "26182783", "Score": "11", "CreationDate": "2014-10-03T16:16:04.557", "LastActivityDate": "2014-10-03T16:30:10.757"}});