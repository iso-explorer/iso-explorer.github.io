post_cb({"3330652": {"ParentId": "3330620", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2010-07-25T19:18:15.290", "Score": "10", "LastEditorUserId": "87234", "LastEditDate": "2010-07-25T20:01:16.187", "Id": "3330652", "OwnerUserId": "87234", "Body": "<p>First understand that <code>const T*</code> is a pointer to some <code>T</code> that cannot be changed. The second thing to remember is all members are actually accessed via <code>this-&gt;</code>.</p>\n<p>So (\u00a79.3.1):</p>\n<blockquote>\n<p id=\"so_3330620_3330652_0\">A nonstatic member function may be declared const, volatile, or const volatile. These cvqualifiers affect the type of the this pointer (9.3.2).</p>\n</blockquote>\n<p>And what it does (\u00a79.3.2):</p>\n<blockquote>\n<p id=\"so_3330620_3330652_1\">In the body of a nonstatic (9.3) member function, the keyword this is a non-lvalue expression whose value is the address of the object for which the function is called. The type of this in a member function of a class X is X*. If the member function is declared const, the type of this is const X*, if the member function is declared volatile, the type of this is volatile X*, and if the member function is declared const volatile, the type of this is const volatile X*.</p>\n</blockquote>\n<p>A <code>const</code> on a function makes the <code>this</code> pointer <code>const T*</code>.</p>\n<p>This is why those examples fail: In the <code>int&amp;</code> variant, <code>a</code> is accessed as <code>this-&gt;a</code>, <code>this</code> is <code>const T*</code>, so <code>a</code> is a <code>const int</code>. And <code>const int</code> cannot be implicitly converted to <code>int&amp;</code>. Same with the other function.</p>\n<p>In other words, when a function is <code>const</code> it smacks a <code>const</code> on everything in the class, and you can't implicitly cast the <code>const</code> away. </p>\n", "LastActivityDate": "2010-07-25T20:01:16.187"}, "3335052": {"ParentId": "3330620", "CommentCount": "0", "CreationDate": "2010-07-26T13:09:06.173", "OwnerUserId": "401947", "PostTypeId": "2", "Id": "3335052", "Score": "0", "Body": "<p>Const member functions can't call non-const member function, even if they don't change any member data. Sometimes you need to provide both const and non-const versions of the same function, because <strong>this</strong> pointer is implicitly passed to member functions and plays a role in overload resolution.</p>\n", "LastActivityDate": "2010-07-26T13:09:06.173"}, "3330620": {"CommentCount": "0", "ViewCount": "166", "CreationDate": "2010-07-25T19:10:46.770", "LastActivityDate": "2010-07-26T13:09:06.173", "Title": "What all is not permitted with const member functions?", "PostTypeId": "1", "Id": "3330620", "Score": "3", "Body": "<pre><code>class A{\nprivate:\n    int a;\npublic:\n    A() {a = 4;}\n    const int&amp; random1() const {return a; }\n    //int&amp;     random2() const {return a; }\n    const int* random3() const {return &amp;a;}\n    //int*     random4() const {return &amp;a;}\n};\n\nint main(){\n    A objA;\n    cout&lt;&lt;objA.random1()&lt;&lt;\"\\n\";\n    cout&lt;&lt;*objA.random3()&lt;&lt;\"\\n\";\n}\n</code></pre>\n<p><code>random2()</code> and <code>random4()</code> are not permitted as defined above. I somehow knew this all along but never came across it while writing my own code, until today.</p>\n<p>What all except these two cases is not permitted in const member functions?</p>\n<p>Any reference to C++ standard text will also be helpful. Thanks!</p>\n", "Tags": "<c++><class><methods><const><member-functions>", "OwnerUserId": "113124", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_3330620_3330652_1": {"section_id": 5895, "quality": 0.9473684210526315, "length": 36}, "so_3330620_3330652_0": {"section_id": 5892, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_3330620_3330652_1": {"section_id": 5666, "quality": 0.9473684210526315, "length": 36}, "so_3330620_3330652_0": {"section_id": 5663, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_3330620_3330652_1": {"section_id": 7378, "quality": 0.9473684210526315, "length": 36}, "so_3330620_3330652_0": {"section_id": 7375, "quality": 0.8666666666666667, "length": 13}}}});