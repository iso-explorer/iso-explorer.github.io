post_cb({"4256902": {"ParentId": "4256817", "CommentCount": "2", "Body": "<p>Your indexes should be row, then column.</p>\n<pre><code>double** myArray = new double*[numR];\nfor( unsigned int i = 0; i &lt; numR; i++ ) {\n    myArray[i] = new double[numC];\n}\n</code></pre>\n<p>Access row 2, column 5:</p>\n<pre><code>myArray[2][5];\n</code></pre>\n", "OwnerUserId": "63814", "PostTypeId": "2", "Id": "4256902", "Score": "-1", "CreationDate": "2010-11-23T14:21:55.363", "LastActivityDate": "2010-11-23T14:21:55.363"}, "4256899": {"ParentId": "4256817", "CommentCount": "0", "Body": "<p>Why not use a <a href=\"http://www.cppreference.com/wiki/container/vector/start\" rel=\"nofollow\">std::vector</a>, and take advantage of its <a href=\"http://www.cppreference.com/wiki/container/vector/vector\" rel=\"nofollow\">constructor</a>:</p>\n<pre><code>std::vector&lt;std::vector&lt;int&gt; &gt; my2Darray(2, std::vector&lt;int&gt;(10));\nmy2Darray[0][0] = 2;\n</code></pre>\n", "OwnerUserId": "16434", "PostTypeId": "2", "Id": "4256899", "Score": "2", "CreationDate": "2010-11-23T14:21:44.053", "LastActivityDate": "2010-11-23T14:21:44.053"}, "bq_ids": {"n4140": {"so_4256817_4259436_1": {"section_id": 6086, "quality": 1.0, "length": 4}}, "n3337": {"so_4256817_4259436_1": {"section_id": 5854, "quality": 1.0, "length": 4}}, "n4659": {"so_4256817_4259436_1": {"section_id": 7582, "quality": 1.0, "length": 4}}}, "4256894": {"ParentId": "4256817", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>There needs to be a loop since you need to create an array <em>for every column</em>.</p>\n<p>I think what you're after is:</p>\n<pre><code>double *myArray[numC];\nfor (int i = 0; i &lt; numC; i++) {\n    myArray[i] = new double[numR];\n}\n\n// some code...\n\n// Cleanup:\nfor (int i = 0; i &lt; numC; i++) {\n    delete [] myArray[i];\n}\n</code></pre>\n<p>This declares an array of pointers (to <code>double</code>) with <code>numC</code> elements, then creates an array of <code>double</code>s with <code>numR</code> elements for each column in <code>myArray</code>. Don't forget to release the memory when you're done with it or you'll have memory leaks.</p>\n", "OwnerUserId": "21475", "LastEditorUserId": "21475", "LastEditDate": "2010-11-23T14:27:52.180", "Id": "4256894", "Score": "1", "CreationDate": "2010-11-23T14:20:29.997", "LastActivityDate": "2010-11-23T14:27:52.180"}, "4256817": {"CommentCount": "2", "ViewCount": "4275", "PostTypeId": "1", "LastEditorUserId": "241536", "CreationDate": "2010-11-23T14:10:38.190", "LastActivityDate": "2010-11-23T18:50:09.617", "Title": "Initialization of 2D array with dynamic number of rows and fixed number of columns. C++", "AcceptedAnswerId": "4259436", "LastEditDate": "2010-11-23T18:50:09.617", "Id": "4256817", "Score": "3", "Body": "<p>I'm having problem with creating my 2D dynamic array in C++. I want it to have dynamic number (e.g. numR) of \"rows\" and fixed (e.g. 2) number of \"columns\".</p>\n<p>I tried doing it like this:</p>\n<pre><code>const numC = 2;\nint numR;\nnumR = 10;\ndouble *myArray[numC];\nmyArray = new double[numR];\n</code></pre>\n<p>Unfortunately, it doesn't work. Is it possible to do it in such a way? </p>\n<p>Of course I could use <code>double **myArray</code> and initialize it as if both dimensions are dynamic (with numC used as limiter in loop) but I would like to avoid it if possible.</p>\n<p>Thanks in advance.</p>\n", "Tags": "<c++><multidimensional-array><fixed><dynamic-arrays>", "OwnerUserId": "32312", "AnswerCount": "4"}, "4259436": {"ParentId": "4256817", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4256817_4259436_0\">Is it possible to do it in such a way?</p>\n</blockquote>\n<p>Yes:</p>\n<pre><code>double (*myArray)[numC] = new double[numR][numC];\n// ...\ndelete[] myArray;\n</code></pre>\n<p>This may look a little unusual, but 5.3.4 \u00a75 clearly states:</p>\n<blockquote>\n<p id=\"so_4256817_4259436_1\">the type of <code>new int[i][10]</code> is <code>int (*)[10]</code></p>\n</blockquote>\n<p>Note that many programmers are not familiar with C declarator syntax and will not understand this code. Also, manual dynamic allocation is not exception safe. For these reaons, a vector of arrays is better:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;array&gt;\n\nstd::vector&lt;std::array&lt;double, numC&gt; &gt; vec(numR);\n// ...\n// no manual cleanup necessary\n</code></pre>\n<p>Replace <code>std::array</code> with <code>std::tr1::array</code> or <code>boost::array</code>, depending on your compiler.</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "4259436", "Score": "6", "CreationDate": "2010-11-23T18:26:28.210", "LastActivityDate": "2010-11-23T18:26:28.210"}});