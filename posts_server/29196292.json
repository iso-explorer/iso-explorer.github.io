post_cb({"29196371": {"ParentId": "29196292", "CommentCount": "1", "Body": "<p>There are things called forward references (different from forward declaration)</p>\n<pre><code>class C\n{\npublic:\n   void mutator(int x) { myValue = x; }\n   int accessor() const { return myValue; }\nprivate:\n   int myValue;\n};\n</code></pre>\n<p>here myValue is accessed before it it declared. C++ does not usually allow forward references but for class members it allows them. It is the compilers job to remember the definition of mutator and accessor until it sees myValue</p>\n", "OwnerUserId": "1561291", "PostTypeId": "2", "Id": "29196371", "Score": "1", "CreationDate": "2015-03-22T15:46:19.813", "LastActivityDate": "2015-03-22T15:46:19.813"}, "29196292": {"CommentCount": "9", "ViewCount": "93", "CreationDate": "2015-03-22T15:39:04.763", "LastActivityDate": "2015-03-22T17:00:32.387", "Title": "Why can member functions be called before being declared?", "AcceptedAnswerId": "29197134", "PostTypeId": "1", "Id": "29196292", "Score": "3", "Body": "<p>I have always been under the impression that C/C++ is parsed in 1 pass, therefore, a symbol must be declared before it can be used.</p>\n<p>Thus this does not work:</p>\n<pre><code>void a()\n{\n   b();\n}\n\nvoid b() \n{\n}\n</code></pre>\n<p>unless we forward declare void a();</p>\n<p>However, I noticed that this does work:</p>\n<pre><code>class Foo \n{\n  public:\n  void a() \n  {\n    b();\n  }\n\n  void b()\n  {\n  }\n};\n</code></pre>\n<p>Why does this work? If C++ is parsed in a single pass through the code then this should not work I would think because the symbol Foo::b() has not been defined when it is called.</p>\n", "Tags": "<c++>", "OwnerUserId": "146780", "AnswerCount": "4"}, "29197173": {"ParentId": "29196292", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Section 3.3.7 of the C++ Standard includes, among other rules, the statement that</p>\n<blockquote>\n<p id=\"so_29196292_29197173_0\">The potential scope of a name declared in a class consists not only of the declarative region following the name\u2019s point of declaration, but also of all function bodies, default arguments, exception-specifications, and brace-or-equal-initializers of non-static data members in that class (including such things in nested classes).</p>\n</blockquote>\n<p>Basically, this requires that analysis of the mentioned contexts, if they appear inline inside the class definition, is deferred until the entire class definition has been processed just as if you had used an out-of-line definition.</p>\n<p>A related rule is found in section 9.2:</p>\n<blockquote>\n<p id=\"so_29196292_29197173_1\">A class is considered a completely-defined object type (3.9) (or complete type) at the closing <code>}</code> of the <em>class-specifier</em>.  Within the class <em>member-specification</em>, the class is regarded as complete within function bodies,\n  default arguments, <em>using-declarations</em> introducing inheriting constructors (12.9), <em>exception-specifications</em>, and <em>brace-or-equal-initializers</em> for non-static data members (including such things in nested classes).  Otherwise\n  it is regarded as incomplete within its own class <em>member-specification</em>.</p>\n</blockquote>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2015-03-22T17:00:32.387", "Id": "29197173", "Score": "0", "CreationDate": "2015-03-22T16:54:57.037", "LastActivityDate": "2015-03-22T17:00:32.387"}, "29196325": {"ParentId": "29196292", "CommentCount": "0", "Body": "<p>On the first pass all the class interface is read and thus when the code for <code>function a</code> is compiled it knows that the function <code>b</code> exists in the class <code>Foo</code></p>\n", "OwnerUserId": "1428404", "PostTypeId": "2", "Id": "29196325", "Score": "0", "CreationDate": "2015-03-22T15:42:01.580", "LastActivityDate": "2015-03-22T15:42:01.580"}, "29197134": {"ParentId": "29196292", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The definition of your class:  </p>\n<pre><code>class Foo \n{\npublic:\n  void a()  {  b(); }\n  void b()  {  }\n};\n</code></pre>\n<p>has the same meaning than:  </p>\n<pre><code>class Foo \n{\npublic:\n  void a();\n  void b();\n};\nvoid Foo::a()  {  b(); }\nvoid Foo::b()  {  }\n</code></pre>\n<p>This is why the function body sees all the members, as if the class was already completely defined.   This is by the ways stated in the C++ standard:  </p>\n<blockquote>\n<p id=\"so_29196292_29197134_0\"><strong>3.3.7/1</strong> The potential scope of a name declared in a class consists <strong>not only of the declarative region following the name\u2019s point of declaration</strong>, but also of all function bodies,\n  brace-or-equal-initializers of non-static  data members, and default\n  arguments in that class (including such things in nested classes).</p>\n</blockquote>\n<p>The compiler still parses the file in a single pass.  But the parsing the grammatical construct is only a part of the larger compilation process, in which applying the context to the parsed grammar production plays also a role (see also this <a href=\"https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive\">SO question</a>). </p>\n", "OwnerUserId": "3723423", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:43:27.547", "Id": "29197134", "Score": "1", "CreationDate": "2015-03-22T16:51:20.670", "LastActivityDate": "2015-03-22T16:51:20.670"}, "bq_ids": {"n4140": {"so_29196292_29197173_0": {"section_id": 7070, "quality": 0.967741935483871, "length": 30}, "so_29196292_29197173_1": {"section_id": 5862, "quality": 0.9761904761904762, "length": 41}, "so_29196292_29197134_0": {"section_id": 7070, "quality": 0.8709677419354839, "length": 27}}, "n3337": {"so_29196292_29197173_0": {"section_id": 6814, "quality": 0.8709677419354839, "length": 27}, "so_29196292_29197173_1": {"section_id": 5632, "quality": 0.8809523809523809, "length": 37}, "so_29196292_29197134_0": {"section_id": 6814, "quality": 0.9354838709677419, "length": 29}}, "n4659": {"so_29196292_29197173_0": {"section_id": 8567, "quality": 0.9354838709677419, "length": 29}, "so_29196292_29197173_1": {"section_id": 7345, "quality": 0.7619047619047619, "length": 32}, "so_29196292_29197134_0": {"section_id": 8567, "quality": 0.8709677419354839, "length": 27}}}});