post_cb({"bq_ids": {"n4140": {"so_33239935_33240173_0": {"length": 11, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_33239935_33240173_0": {"length": 11, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_33239935_33240173_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}}}, "33239935": {"ViewCount": "70", "Body": "<p>When we have two operators for output an object and an array of those objects, and try to output array of constant objects, operator for objects is involved. Is there way to force operator for arrays to work with c arrays of constant objects?</p>\n<p>Sample code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n\nusing std::size_t;\n\nnamespace nm\n{\n  struct C { int i; };\n\n  template &lt;size_t N&gt;\n  using c_c_array = C[N];\n\n  inline std::ostream&amp; operator &lt;&lt; (std::ostream&amp; lhs,  C const*) { return lhs &lt;&lt; \"1\\n\"; }\n\n  template &lt;size_t N&gt;\n  inline std::ostream&amp; operator &lt;&lt; (std::ostream&amp; lhs,  c_c_array&lt;N&gt; const&amp;) { return lhs &lt;&lt; \"2\\n\"; }\n\n}\n\nint main()\n{\n  nm::C c{1};\n\n  nm::C arr[5];\n\n  nm::C const c_const{1};\n\n  nm::C const arr_const[5] {{1}, {1}, {1}, {1}, {1}};\n\n  std::cout &lt;&lt; &amp;c   // 1 - ok\n            &lt;&lt; arr  // 2 - ok\n            &lt;&lt; &amp;c_const   // 1 - ok\n            &lt;&lt; arr_const; // 1 --ups\n\n  return 0;\n}\n</code></pre>\n<p>Output: <code>1 2 1 1</code></p>\n<p>Additionally, The 2 operator in my case uses 1 for output.</p>\n", "AcceptedAnswerId": "33242297", "Title": "output of const pointer and const array", "CreationDate": "2015-10-20T14:53:26.630", "Id": "33239935", "CommentCount": "8", "LastEditDate": "2015-10-20T16:30:28.043", "PostTypeId": "1", "LastEditorUserId": "5177149", "LastActivityDate": "2015-10-20T17:22:01.967", "Score": "4", "OwnerUserId": "5177149", "Tags": "<c++><arrays><operators><overloading>", "AnswerCount": "2"}, "33242297": {"Id": "33242297", "PostTypeId": "2", "Body": "<p>I will do something like shown bellow at the moment. If somebody knows better solution, write it please.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n#include &lt;type_traits&gt;\n\nusing std::size_t;\n\nnamespace nm\n{\n  struct C { int i; };\n\n  template &lt;size_t N&gt;\n  using c_c_array = C[N];\n\n  template&lt;typename T&gt;\n  inline\n  std::enable_if_t&lt;std::is_same&lt;T, C*&gt;::value || std::is_same&lt;T, C const*&gt;::value,\n  std::ostream&amp;&gt;\n  operator &lt;&lt; (std::ostream&amp; lhs,  T const&amp;) { return lhs &lt;&lt; \"1\\n\"; }\n\n  template &lt;size_t N&gt;\n  inline std::ostream&amp; operator &lt;&lt; (std::ostream&amp; lhs,  c_c_array&lt;N&gt; const&amp;) { return lhs &lt;&lt; \"2\\n\"; }\n\n}\n\nint main()\n{\n  nm::C c{1};\n\n  nm::C arr[5];\n\n  nm::C const c_const{1};\n\n  nm::C const arr_const[] {1,2,3,4,5};\n\n  std::cout &lt;&lt; &amp;c   // 1 - ok\n            &lt;&lt; arr  // 2 - ok\n            &lt;&lt; &amp;c_const   // 1 - ok\n            &lt;&lt; arr_const; // 1 --ups\n\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "5177149", "LastActivityDate": "2015-10-20T17:22:01.967", "Score": "1", "CreationDate": "2015-10-20T16:48:54.297", "ParentId": "33239935", "CommentCount": "0", "OwnerUserId": "5177149", "LastEditDate": "2015-10-20T17:22:01.967"}, "33240173": {"Id": "33240173", "PostTypeId": "2", "Body": "<p>According to the draft standard <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4527.pdf\" rel=\"nofollow\">N4527</a> <em>8.5/p7.3 Initializers [dcl.init]</em> (<strong>Emphasis Mine</strong>):</p>\n<blockquote>\n<ul>\n<li>Otherwise, no initialization is performed. </li>\n</ul>\n<p id=\"so_33239935_33240173_0\"><strong>If a program calls for\n  the default initialization of an object of a const-qualified type T, T\n  shall be a class type with a user-provided default constructor</strong>.</p>\n</blockquote>\n<p>Thus, you have to define a default constructor for <code>class C</code> for this to work out.</p>\n", "LastActivityDate": "2015-10-20T15:04:22.697", "CommentCount": "0", "CreationDate": "2015-10-20T15:04:22.697", "ParentId": "33239935", "Score": "1", "OwnerUserId": "2352671"}});