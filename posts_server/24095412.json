post_cb({"24095412": {"CommentCount": "3", "ViewCount": "148", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-07T08:38:31.837", "LastActivityDate": "2014-06-07T12:33:52.380", "PostTypeId": "1", "AcceptedAnswerId": "24097243", "Title": "Qualified name lookup inside the class scope", "Id": "24095412", "Score": "4", "Body": "<p>There is a quote from 3.4.3.1/1:</p>\n<blockquote>\n<p id=\"so_24095412_24095412_0\">If the nested-name-specifier of a qualified-id nominates a class, the\n  name specified after the nested-name-specifier is looked up in the\n  scope of the class</p>\n</blockquote>\n<p>But further in the 3.4.3.1/1 said:</p>\n<blockquote>\n<p id=\"so_24095412_24095412_1\">The name shall represent one or more members of that class or of one\n  of its base classes</p>\n</blockquote>\n<p>And the 3.3.8/1 said:</p>\n<blockquote>\n<p id=\"so_24095412_24095412_2\">The potential scope of a name declared in a class consists not only of\n  the declarative region following the name\u2019s point of declaration, but\n  also of all function bodies, default arguments,\n  exception-specifications, and brace-or-equal-initializers of\n  non-static data members in that class (including such things in nested\n  classes).</p>\n</blockquote>\n<p>This implies that base classes does not included into the derived class scope. And the 3.4.3.1/1 shall be remade to:</p>\n<blockquote>\n<p id=\"so_24095412_24095412_3\">If the nested-name-specifier of a qualified-id nominates a class, the\n  name specified after the nested-name-specifier is looked up in the\n  scope of the class and <strong>in the scope of it base classes</strong>.</p>\n</blockquote>\n<p>Am I right?</p>\n", "Tags": "<c++><class><scope><language-lawyer>", "AnswerCount": "1"}, "24097243": {"ParentId": "24095412", "CommentCount": "1", "CreationDate": "2014-06-07T12:33:52.380", "OwnerUserId": "1090079", "PostTypeId": "2", "Id": "24097243", "Score": "2", "Body": "<h3>No, you are not correct.</h3>\n<p>What you are forgetting is that it's specified that name-lookup in the scope of a class includes looking at names declared in direct bases of said class, as is stated in <code>10.2p5</code>.</p>\n<blockquote>\n<p id=\"so_24095412_24097243_0\"><code>10.2p5</code> <strong>Member name lookup</strong> <code>[class.member.lookup]</code></p>\n<blockquote>\n<p id=\"so_24095412_24097243_2\">Otherwise (ie., <code>C</code> does not contain a declaration of <code>f</code>or the resulting declaration set is empty), <em><code>S(F,C)</code></em> is initialliy empty. If <code>C</code> has base classes, calculate the lookup set for <code>f</code> in each direct base class subobject <em><code>B_i</code></em> and merge each suck lookup set <em><code>S(F,B_i)</code></em>, in turn into <em><code>S(F,C)</code></em>.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h3>Simple explanation</h3>\n<p>The previous quotation might look overly complex, but it's describing the method in which a name <code>f</code> is looked up in the scope of <code>C</code>. If no declaration within <code>C</code> has the name <code>f</code>, search will continue to include those names declared in any direct bases of <code>C</code>.</p>\n<p>( <strong>Note</strong>: The wording is recursive, if the name <code>f</code> isn't found in a direct base of <code>C</code>, the potential bases of bases of <code>C</code> are also search for <code>f</code> )</p>\n</hr>", "LastActivityDate": "2014-06-07T12:33:52.380"}, "bq_ids": {"n4140": {"so_24095412_24095412_2": {"section_id": 7070, "quality": 0.967741935483871, "length": 30}, "so_24095412_24095412_0": {"section_id": 7113, "quality": 1.0, "length": 11}, "so_24095412_24097243_1": {"section_id": 6993, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24097243_2": {"section_id": 6993, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24095412_3": {"section_id": 7113, "quality": 0.9285714285714286, "length": 13}, "so_24095412_24095412_1": {"section_id": 7113, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_24095412_24095412_2": {"section_id": 6814, "quality": 0.8709677419354839, "length": 27}, "so_24095412_24095412_0": {"section_id": 6857, "quality": 1.0, "length": 11}, "so_24095412_24097243_1": {"section_id": 6739, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24097243_2": {"section_id": 6739, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24095412_3": {"section_id": 6857, "quality": 0.9285714285714286, "length": 13}, "so_24095412_24095412_1": {"section_id": 6857, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_24095412_24095412_2": {"section_id": 8567, "quality": 0.9354838709677419, "length": 29}, "so_24095412_24095412_0": {"section_id": 8614, "quality": 1.0, "length": 11}, "so_24095412_24097243_1": {"section_id": 8491, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24097243_2": {"section_id": 8491, "quality": 0.8387096774193549, "length": 26}, "so_24095412_24095412_3": {"section_id": 8614, "quality": 0.9285714285714286, "length": 13}, "so_24095412_24095412_1": {"section_id": 8614, "quality": 0.9090909090909091, "length": 10}}}});