post_cb({"4245339": {"Id": "4245339", "PostTypeId": "2", "Body": "<p>Just put <code>try</code>-<code>catch(...)</code> at the to level of your program. Something like this:</p>\n<pre><code>try {\n   doStuff();\n} catch( std::exception&amp; e ) {\n  //handle std::exception-derived exceptions\n} catch(...) {\n  //handle all other exceptions\n}     \n</code></pre>\n", "LastActivityDate": "2010-11-22T12:22:36.193", "CommentCount": "0", "CreationDate": "2010-11-22T12:22:36.193", "ParentId": "4245320", "Score": "0", "OwnerUserId": "57428"}, "bq_ids": {"n4140": {"so_4245320_40158380_0": {"length": 39, "quality": 0.8863636363636364, "section_id": 3352}}, "n3337": {"so_4245320_40158380_0": {"length": 40, "quality": 0.9090909090909091, "section_id": 3222}}, "n4659": {"so_4245320_40158380_0": {"length": 30, "quality": 0.6818181818181818, "section_id": 4119}}}, "4245343": {"Id": "4245343", "PostTypeId": "2", "Body": "<p>Use <a href=\"http://www.cplusplus.com/reference/std/exception/set_terminate/\" rel=\"noreferrer\">set_terminate</a> function which sets the terminate handler function:</p>\n<blockquote>\n<p id=\"so_4245320_4245343_0\">A terminate handler function is a\n  function automatically called when the\n  exception handling process has to be\n  abandoned for some reason. This\n  happens when a handler cannot be found\n  for a thrown exception, or for some\n  other exceptional circumstance that\n  makes impossible to continue the\n  handling process.</p>\n</blockquote>\n", "LastActivityDate": "2010-11-22T12:23:25.010", "CommentCount": "6", "CreationDate": "2010-11-22T12:23:25.010", "ParentId": "4245320", "Score": "5", "OwnerUserId": "471164"}, "40158380": {"Id": "40158380", "PostTypeId": "2", "Body": "<p>Adding to the answer by @vitaut, if you are using C++11 you can check for and get the current exception within the handler specified by <code>std::set_terminate</code>. </p>\n<p><a href=\"https://groups.google.com/forum/#!msg/comp.std.c++/gThVi-yActI/HE_msGQckc8J\" rel=\"nofollow\">According to Daniel Kr\u00fcgler</a> who refers to the standard quoted below, there is an implicit exception handler active during the call to <code>std::terminate</code>, which means that we can use <code>std::current_exception</code> to both check whether there is an active exception and also examine it.</p>\n<p>The C++11 standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">working draft N3242</a>, section 15.3.7 (<strong>emphasis</strong> mine):</p>\n<blockquote>\n<p id=\"so_4245320_40158380_0\">A handler is considered active when initialization is complete for the formal parameter (if any) of the catch\n  clause. <em>[ Note: The stack will have been unwound at that point. \u2014 end note ]</em> <strong>Also, an implicit handler\n  is considered active when std::terminate() or std::unexpected() is entered due to a throw</strong>. A handler\n  is no longer considered active when the catch clause exits or when std::unexpected() exits after being\n  entered due to a throw.</p>\n</blockquote>\n<hr>\n<p><a href=\"https://akrzemi1.wordpress.com/2011/10/05/using-stdterminate/\" rel=\"nofollow\">Stealing from Andrzej's C++ blog</a>, here is an example of how this can be done:</p>\n<pre><code>[[noreturn]] void onTerminate() noexcept\n{\n    if( auto exc = std::current_exception() ) { \n        // we have an exception\n        try{\n            rethrow_exception( exc ); // throw to recognize the type\n        }\n        catch( MyException const&amp; exc ) {\n            // additional action\n        }\n        catch( MyOtherException const&amp; exc ) {\n            // additional action\n        }\n        catch( std::exception const&amp; exc ) {\n            // additional action\n        }\n        catch( ... ) {\n            // additional action\n        }\n    }\n\n    std::_Exit( EXIT_FAILURE );\n}\n</code></pre>\n</hr>", "LastActivityDate": "2016-10-20T15:16:50.227", "CommentCount": "0", "CreationDate": "2016-10-20T15:16:50.227", "ParentId": "4245320", "Score": "1", "OwnerUserId": "4307047"}, "4245320": {"ViewCount": "640", "Body": "<p>So my c++ program just crashed, and the error I got was:</p>\n<pre><code>terminate called after throwing an instance of 'std::length_error'\n  what():  basic_string::_S_create\nAborted\n</code></pre>\n<p>Now, what I've added recently to my code is a SIGSEGV handler, so if it was a segmentation fault, it would proceed to print the stack trace.</p>\n<p>How do I go about making an exit handler for uncaught (or more like uncatchable) exceptions in c++?</p>\n", "AcceptedAnswerId": "4245343", "Title": "Intercepting c++ exceptions", "CreationDate": "2010-11-22T12:20:12.150", "Id": "4245320", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-10-20T15:16:50.227", "Score": "3", "OwnerUserId": "277941", "Tags": "<c++><exception><error-handling>", "AnswerCount": "4"}, "4245351": {"Id": "4245351", "PostTypeId": "2", "Body": "<p>You can install your own terminate handler with <a href=\"http://www.cplusplus.com/reference/std/exception/set_terminate/\" rel=\"nofollow\">set_terminate</a>.</p>\n<p>You can catch all C++ exceptions with a catch-all clause <code>catch (...) {}</code>.</p>\n", "LastActivityDate": "2010-11-22T12:24:21.077", "CommentCount": "0", "CreationDate": "2010-11-22T12:24:21.077", "ParentId": "4245320", "Score": "0", "OwnerUserId": "112950"}});