post_cb({"bq_ids": {"n4140": {"so_6162226_6162226_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5950}}, "n3337": {"so_6162226_6162226_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5720}}, "n4659": {"so_6162226_6162226_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 7436}}}, "6164397": {"Id": "6164397", "PostTypeId": "2", "Body": "<p>One prominent case are enumerators</p>\n<pre><code>enum arity { one, two };\n</code></pre>\n<p>The expressions <code>one</code> and <code>two</code> are rvalues (more specifically, prvalues in C++0x). Another are template non-type parameters</p>\n<pre><code>template&lt;int *P&gt; struct A { };\n</code></pre>\n<p>The expression <code>P</code> is an rvalue too (more specifically again, a prvalue in C++0x). </p>\n", "LastActivityDate": "2011-05-28T21:17:16.460", "CommentCount": "2", "CreationDate": "2011-05-28T21:17:16.460", "ParentId": "6162226", "Score": "8", "OwnerUserId": "34509"}, "6162226": {"ViewCount": "253", "Body": "<p><a href=\"http://chat.stackoverflow.com/transcript/message/782668#782668\">@FredOverflow mentioned in the C++ chatroom</a> that <code>this</code> is a rare case of rvalues that have names. The C++0x FDIS mentions under <code>5.1.1 [expr.prim.general] p4</code>:</p>\n<blockquote>\n<p id=\"so_6162226_6162226_0\">Otherwise, if a member-declarator declares a non-static data member (9.2) of a class X, <strong>the expression <code>this</code> is a prvalue of type \u201cpointer to X\u201d</strong> within the optional brace-or-equal-initializer. It shall not appear elsewhere in the member-declarator. <em>(emphasis mine)</em></p>\n</blockquote>\n<p>What others are there, if any?</p>\n", "AcceptedAnswerId": "6164397", "Title": "What rvalues have names?", "CreationDate": "2011-05-28T14:28:32.453", "Id": "6162226", "CommentCount": "1", "LastEditDate": "2011-10-02T10:25:38.913", "PostTypeId": "1", "LastEditorUserId": "34509", "LastActivityDate": "2011-10-02T10:25:38.913", "Score": "13", "OwnerUserId": "500104", "Tags": "<c++><c++11><named><rvalue>", "AnswerCount": "2"}, "6162419": {"Id": "6162419", "PostTypeId": "2", "Body": "<ol>\n<li>The boolean literals <code>true</code> and <code>false</code> are prvalues of type bool.</li>\n<li><code>nullptr</code> is a prvalue of type <code>nullptr_t</code>.</li>\n<li>When you return a named variable from a function, it becomes an <code>xvalue</code> in the context of that expression, and an <code>xvalue</code> is an <code>rvalue</code> (per \u00a73.10/1).</li>\n</ol>\n<p>There may be more, but those are all I can think of at the moment (and the third is questionable -- it's really the expression that's the xvalue, but with something like <code>return x;</code> (where <code>x</code> is a local variable and you're returning the value, not a reference), the name of the variable <em>is</em> the expression. The name really refers to a glvalue, and in the expression that value (but not really the name) gets converted to an xvalue (which is an rvalue).</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2011-05-28T16:06:12.287", "Score": "8", "CreationDate": "2011-05-28T15:04:14.787", "ParentId": "6162226", "CommentCount": "3", "OwnerUserId": "179910", "LastEditDate": "2011-05-28T16:06:12.287"}});