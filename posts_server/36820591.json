post_cb({"bq_ids": {"n4140": {"so_36820591_36831660_6": {"length": 10, "quality": 0.8333333333333334, "section_id": 45}, "so_36820591_36831660_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 45}, "so_36820591_36831660_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 45}, "so_36820591_36831660_7": {"length": 8, "quality": 0.8888888888888888, "section_id": 45}, "so_36820591_36831660_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 45}, "so_36820591_36831660_10": {"length": 21, "quality": 0.875, "section_id": 45}, "so_36820591_36831660_11": {"length": 13, "quality": 0.9285714285714286, "section_id": 45}, "so_36820591_36831660_2": {"length": 12, "quality": 1.0, "section_id": 45}, "so_36820591_36831660_8": {"length": 8, "quality": 0.8, "section_id": 45}, "so_36820591_36831660_9": {"length": 6, "quality": 0.6666666666666666, "section_id": 45}}, "n3337": {"so_36820591_36831660_6": {"length": 10, "quality": 0.8333333333333334, "section_id": 42}, "so_36820591_36831660_2": {"length": 12, "quality": 1.0, "section_id": 42}, "so_36820591_36831660_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 42}, "so_36820591_36831660_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 42}, "so_36820591_36831660_10": {"length": 21, "quality": 0.875, "section_id": 42}, "so_36820591_36831660_11": {"length": 13, "quality": 0.9285714285714286, "section_id": 42}, "so_36820591_36831660_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 42}, "so_36820591_36831660_9": {"length": 6, "quality": 0.6666666666666666, "section_id": 42}, "so_36820591_36831660_8": {"length": 8, "quality": 0.8, "section_id": 42}, "so_36820591_36831660_7": {"length": 8, "quality": 0.8888888888888888, "section_id": 42}}, "n4659": {"so_36820591_36831660_8": {"length": 8, "quality": 0.8, "section_id": 46}, "so_36820591_36831660_2": {"length": 12, "quality": 1.0, "section_id": 46}, "so_36820591_36831660_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 46}, "so_36820591_36831660_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 46}, "so_36820591_36831660_10": {"length": 21, "quality": 0.875, "section_id": 46}, "so_36820591_36831660_11": {"length": 13, "quality": 0.9285714285714286, "section_id": 46}, "so_36820591_36831660_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 46}, "so_36820591_36831660_9": {"length": 6, "quality": 0.6666666666666666, "section_id": 46}, "so_36820591_36831660_7": {"length": 8, "quality": 0.8888888888888888, "section_id": 46}, "so_36820591_36831660_6": {"length": 10, "quality": 0.8333333333333334, "section_id": 46}}}, "36820591": {"ViewCount": "58", "Body": "<p>The following code is deducing the auto to uint32_t. I am trying to understand why it is so.</p>\n<pre><code>auto value = a + b * c;\n</code></pre>\n<p>where a is int32_t, b is uint32_t and c is int.</p>\n", "Title": "Why is the type here deduced to be uint32_t?", "CreationDate": "2016-04-24T07:51:32.953", "LastActivityDate": "2016-04-26T00:03:32.150", "CommentCount": "1", "LastEditDate": "2016-04-25T22:23:49.917", "PostTypeId": "1", "LastEditorUserId": "560648", "Id": "36820591", "Score": "2", "OwnerUserId": "1410214", "Tags": "<c++><c++11><type-deduction>", "AnswerCount": "1"}, "36831660": {"Id": "36831660", "PostTypeId": "2", "Body": "<p>Type conversion rules are a bit weird sometimes.\nEvery type is given a rank, but every platform can implement the conversions as it fits them, with generally only few rules.</p>\n<p><a href=\"https://www.securecoding.cert.org/confluence/display/c/INT02-C.+Understand+integer+conversion+rules\" rel=\"nofollow\">securecoding</a> has a nice wrap up:</p>\n<blockquote>\n<p id=\"so_36820591_36831660_0\">Integer Conversion Rank</p>\n<p id=\"so_36820591_36831660_1\">Every integer type has an integer conversion rank that determines how\n  conversions are performed. The ranking is based on the concept that\n  each integer type contains at least as many bits as the types ranked\n  below it. The following rules for determining integer conversion rank\n  are defined in the C Standard, subclause 6.3.1.1 [ISO/IEC 9899:2011]:</p>\n<ul>\n<li><p id=\"so_36820591_36831660_2\">No two signed integer types shall have the same rank, even if they have the same representation.</p></li>\n<li><p id=\"so_36820591_36831660_3\">The rank of a signed integer type shall be greater than the rank of any signed integer type with less precision.</p></li>\n<li><p id=\"so_36820591_36831660_4\">The rank of long long int shall be greater than the rank of long int, which shall be greater than the rank of int, which shall be\n  greater than the rank of short int, which shall be greater than the\n  rank of signed char.</p></li>\n<li><p id=\"so_36820591_36831660_5\">The rank of any unsigned integer type shall equal the rank of the corresponding signed integer type, if any.</p></li>\n<li><p id=\"so_36820591_36831660_6\">The rank of any standard integer type shall be greater than the rank of any extended integer type with the same width.</p></li>\n<li><p id=\"so_36820591_36831660_7\">The rank of char shall equal the rank of signed char and unsigned char.</p></li>\n<li><p id=\"so_36820591_36831660_8\">The rank of _Bool shall be less than the rank of all other standard integer types.</p></li>\n<li><p id=\"so_36820591_36831660_9\">The rank of any enumerated type shall equal the rank of the compatible integer type.</p></li>\n<li><p id=\"so_36820591_36831660_10\">The rank of any extended signed integer type relative to another extended signed integer type with the same precision is\n  implementation-defined but still subject to the other rules for\n  determining the integer conversion rank.</p></li>\n<li><p id=\"so_36820591_36831660_11\">For all integer types T1, T2, and T3, if T1 has greater rank than T2 and T2 has greater rank than T3, then T1 has greater rank than T3.</p></li>\n</ul>\n<p id=\"so_36820591_36831660_12\">The integer conversion rank is used in the usual arithmetic\n  conversions to determine what conversions need to take place to\n  support an operation on mixed integer types.</p>\n</blockquote>\n", "LastEditorUserId": "827263", "LastActivityDate": "2016-04-26T00:03:32.150", "Score": "-1", "CreationDate": "2016-04-25T03:39:45.193", "ParentId": "36820591", "CommentCount": "2", "OwnerUserId": "1001195", "LastEditDate": "2016-04-26T00:03:32.150"}});