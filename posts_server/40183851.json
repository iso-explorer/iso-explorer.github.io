post_cb({"40184094": {"ParentId": "40183851", "CommentCount": "2", "Body": "<p>In your g++ command, remove f.h.</p>\n", "OwnerUserId": "6826608", "PostTypeId": "2", "Id": "40184094", "Score": "1", "CreationDate": "2016-10-21T19:22:32.153", "LastActivityDate": "2016-10-21T19:22:32.153"}, "40183851": {"CommentCount": "6", "ViewCount": "58", "PostTypeId": "1", "ClosedDate": "2016-10-21T19:43:47.903", "LastEditorUserId": "-1", "CreationDate": "2016-10-21T19:07:51.827", "LastActivityDate": "2016-10-21T19:42:47.133", "Title": "compiler error when using #include \"filename\"", "LastEditDate": "2017-05-23T12:02:00.800", "Id": "40183851", "Score": "0", "Body": "<p>I <a href=\"https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename\">read</a> that</p>\n<blockquote>\n<p id=\"so_40183851_40183851_0\"><code>#include filename</code> causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the \" delimiters. </p>\n</blockquote>\n<p>A short example is below. Compiling with <code>g++ main.cpp f.h f.cpp</code> gives compiler error. The program runs correctly after I remove the <code>#include</code> in <code>f.cpp</code>. I have two questions.</p>\n<ol>\n<li><p>What is the cause of error in the original program? </p></li>\n<li><p>Does <code>#include filename</code> really just replace the directive with the content of the quoted file? </p></li>\n</ol>\n<p>I ask the second question because the program also runs correctly when I replace the problematic line with <code>int f();</code> (which is the exact content of <code>f.h</code>). </p>\n<p>Thank you.</p>\n<hr>\n<p><strong>f.h</strong></p>\n<pre><code>int f();\n</code></pre>\n<p><strong>f.cpp</strong></p>\n<pre><code>#include \"f.h\" // problem\nint f() { return 1; }\n</code></pre>\n<p><strong>main.cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include \"f.h\"\nint main() {\n    std::cout &lt;&lt; f() &lt;&lt; std::endl;\n}\n</code></pre>\n<hr>\n<p>The error message of running <code>g++ main.cpp f.h f.cpp</code> with original program is </p>\n<pre><code>f.cpp: In function 'int f()':\nf.cpp:2:5: internal compiler error: in ggc_record_overhead, at ggc-common.c:1013\n int f() { return 1; }\n     ^\n0x8ae8eb ggc_record_overhead(unsigned long, unsigned long, void*, char const*, int, char const*)\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/ggc-common.c:1013\n0xc4af71 ggc_internal_alloc_stat(unsigned long, char const*, int, char const*)\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/ggc-page.c:1317\n0xa48462 get_combined_adhoc_loc(line_maps*, unsigned int, void*)\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/libcpp/line-map.c:136\n0xa9a5ff gimple_set_block(gimple_statement_base*, tree_node*) [clone .isra.8]\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple.h:1489\n0xa9a5ff lower_stmt\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple-low.c:239\n0xa9a5ff lower_sequence\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple-low.c:206\n0xa9b481 lower_gimple_bind\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple-low.c:415\n0xa9b5c6 lower_function_body\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple-low.c:118\n0xa9b5c6 (anonymous namespace)::pass_lower_cf::execute() [clone .lto_priv.4979]\n        /apps2/tools/gcc/4.9.2/gcc-4.9.2-src/gcc/gimple-low.c:184\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee &lt;http://gcc.gnu.org/bugs.html&gt; for instructions.\n</code></pre>\n<hr>\n<p><strong>UPDATE:</strong></p>\n<p>I found that <code>g++ main.cpp f.cpp f.h</code> fails because there is a file <code>f.h.gch</code> in my directory. The program compiles correctly after I cleanup that <code>.gch</code> file. </p>\n<p>(I'm sorry that I did not provide this information before as I just noticed it.)</p>\n<p>However, <code>g++ main.cpp f.cpp f.h</code> generates <code>f.h.gch</code>. So if I compile twice consecutively, it'll be an error.</p>\n<p>Following Donghui's advice, removing <code>f.h</code> from <code>g++</code> also compiles correctly. And, it does NOT generate the <code>f.h.gch</code> file.</p>\n<p><strong>My question is likely a duplicate of <a href=\"https://stackoverflow.com/questions/1241399/what-is-a-h-gch-file\">What is a .h.gch file?</a></strong></p>\n</hr></hr></hr>", "Tags": "<c++><include>", "OwnerUserId": "3927314", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40183851_40183851_0": {"section_id": 505, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_40183851_40183851_0": {"section_id": 496, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_40183851_40183851_0": {"section_id": 526, "quality": 0.8571428571428571, "length": 12}}}});