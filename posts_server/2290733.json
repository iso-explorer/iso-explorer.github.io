post_cb({"2290764": {"Id": "2290764", "PostTypeId": "2", "Body": "<p>You <em>can't</em> initialize members of the parent class in the derived class constructor initialization list. It doesn't matter whether they are protected, public or anything else.</p>\n<p>In your example, member <code>something</code> is member of <code>Parent</code> class, which means that it can only be initialized in the constructor initializer list of <code>Parent</code> class.</p>\n", "LastEditorUserId": "313113", "LastActivityDate": "2015-04-03T08:44:02.247", "Score": "11", "CreationDate": "2010-02-18T17:35:16.343", "ParentId": "2290733", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2015-04-03T08:44:02.247"}, "43667449": {"Id": "43667449", "PostTypeId": "2", "Body": "<p>Maybe you can try it in that way using the keyword \"using\"</p>\n<pre><code>class Parent\n{\n\nprotected:\nstd::string something;\n};\n\nclass Child : public Parent\n{\n\nprivate:\nusing Parent::something;\nChild()\n{\n    something=\"Hello, World!\";\n}\n};\n</code></pre>\n", "LastActivityDate": "2017-04-27T20:34:21.860", "CommentCount": "0", "CreationDate": "2017-04-27T20:34:21.860", "ParentId": "2290733", "Score": "0", "OwnerUserId": "7710359"}, "2290749": {"Id": "2290749", "PostTypeId": "2", "Body": "<p>It is not possible in the way you describe. You'll have to add a constructor (could be protected) to the base class to forward it along. Something like:</p>\n<pre><code>class Parent\n{\nprotected:\n    Parent( const std::string&amp; something ) : something( something )\n    {}\n\n    std::string something;\n}\n\nclass Child : public Parent\n{\nprivate:\n    Child() : Parent(\"Hello, World!\")\n    {\n    }\n}\n</code></pre>\n", "LastActivityDate": "2010-02-18T17:33:02.580", "CommentCount": "1", "CreationDate": "2010-02-18T17:33:02.580", "ParentId": "2290733", "Score": "100", "OwnerUserId": "32136"}, "2290803": {"Id": "2290803", "PostTypeId": "2", "Body": "<p>When the compiler comes across the initializer list, the derived class object is yet to be formed. The base class constructor has not been called till then. Only after the base class constructor has been called, <code>something</code> comes to being. Hence the problem. When you do not call the base class constructor explicitly, the compiler does that for you (by generating the appropriate trivial constructor for the base class). This causes the <code>something</code> member to be default initialized. </p>\n<p>From C++0x draft:</p>\n<blockquote>\n<p id=\"so_2290733_2290803_0\"><strong>12.6.2 Initializing bases and members</strong></p>\n<p id=\"so_2290733_2290803_1\"><strong>2</strong> Names in a mem-initializer-id are\n  looked up in the scope of the\n  constructor\u2019s class and, if not found\n  in that scope, are looked up in the\n  scope containing the constructor\u2019s\n  definition. [ Note: if the\n  constructor\u2019s class contains a member\n  with the same name as a direct or\n  virtual base class of the class, a\n  mem-initializer-id naming the member\n  or base class and composed of a single\n  identifier refers to the class member.\n  A meminitializer- id for the hidden\n  base class may be specified using a\n  qualified name. \u2014end note ] <strong>Unless the\n  mem-initializer-id names the\n  constructor\u2019s class, a non-static data\n  member of the constructor\u2019s class or a\n  direct or virtual base of that class,\n  the mem-initializer is ill-formed.</strong></p>\n<p id=\"so_2290733_2290803_2\"><em>Note: Emphasis mine.</em></p>\n</blockquote>\n", "LastEditorUserId": "834280", "LastActivityDate": "2014-06-06T17:04:36.187", "Score": "49", "CreationDate": "2010-02-18T17:40:10.330", "ParentId": "2290733", "CommentCount": "1", "OwnerUserId": "66692", "LastEditDate": "2014-06-06T17:04:36.187"}, "bq_ids": {"n4140": {"so_2290733_2290803_1": {"length": 57, "quality": 0.9047619047619048, "section_id": 429}}, "n3337": {"so_2290733_2290803_1": {"length": 57, "quality": 0.9047619047619048, "section_id": 421}}, "n4659": {"so_2290733_2290803_1": {"length": 57, "quality": 0.9047619047619048, "section_id": 447}}}, "2290733": {"ViewCount": "35579", "Body": "<p>Is it possible to use the initialization list of a child class' constructor to initialize data members declared as protected in the parent class?  I can't get it to work.  I can work around it, but it would be nice if I didn't have to.</p>\n<p>Some sample code:</p>\n<pre><code>class Parent\n{\nprotected:\n    std::string something;\n};\n\nclass Child : public Parent\n{\nprivate:\n    Child() : something(\"Hello, World!\")\n    {\n    }\n};\n</code></pre>\n<p>When I try this, the compiler tells me: \"class 'Child' does not have any field named 'something'\".  Is something like this possible?  If so, what is the syntax?</p>\n<p>Many thanks!</p>\n", "AcceptedAnswerId": "2290749", "Title": "Initialize parent's protected members with initialization list (C++)", "CreationDate": "2010-02-18T17:29:30.507", "Id": "2290733", "CommentCount": "0", "FavoriteCount": "21", "PostTypeId": "1", "LastEditDate": "2013-02-14T17:30:15.677", "LastEditorUserId": "71612", "LastActivityDate": "2017-04-27T20:34:21.860", "Score": "106", "OwnerUserId": "71612", "Tags": "<c++><inheritance><constructor><initialization-list>", "AnswerCount": "4"}});