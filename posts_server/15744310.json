post_cb({"bq_ids": {"n4140": {"so_15744310_15744362_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5341}}, "n3337": {"so_15744310_15744362_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5138}}, "n4659": {"so_15744310_15744362_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6762}}}, "15744362": {"Id": "15744362", "PostTypeId": "2", "Body": "<p>Per Paragraph 2.14.2/2 of the C++11 Standard, </p>\n<blockquote>\n<p id=\"so_15744310_15744362_0\">The type of an integer literal is the first of the corresponding list in Table 6 in which its value can be\n  represented.</p>\n</blockquote>\n<p>Table 6 reports that for hexadecimal constants, the type should be:</p>\n<ul>\n<li><code>int</code>; or (if it doesn't fit)</li>\n<li><code>unsigned int</code>; or (if it doesn't fit)</li>\n<li><code>long int</code>; or (if it doesn't fit)</li>\n<li><code>unsigned long int</code>; or (if it doesn't fit)</li>\n<li><code>long long int</code>; or </li>\n<li><code>unsigned long long int</code>.</li>\n</ul>\n<p>Assuming your implementation has 32-bit <code>int</code>, since <code>0xffffffff</code> does not fit in an <code>int</code>, its type should be <code>unsigned int</code>. For an implementation with a 64-bit <code>int</code>, the type would be <code>int</code>.</p>\n<p>Notice, that if you had written the same literal as a <em>decimal</em> constant instead, the type could have only been:</p>\n<ul>\n<li><code>int</code>; or (if it doesn't fit)</li>\n<li><code>long int</code>; or (if it doesn't fit)</li>\n<li><code>long long int</code>.</li>\n</ul>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-04-01T13:35:43.200", "Score": "25", "CreationDate": "2013-04-01T13:25:27.150", "ParentId": "15744310", "CommentCount": "2", "OwnerUserId": "1932150", "LastEditDate": "2013-04-01T13:35:43.200"}, "15744310": {"ViewCount": "1585", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/language/integer_literal\" rel=\"noreferrer\">this</a>, integer literals without type suffix are always <code>int</code>s. However, both gcc and clang interpret <code>0xffffffff</code> (or any literal which explicitly sets the sign bit other than using the <code>-</code>) as unsigned. Which is correct? (according to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"noreferrer\">this</a> the compilers are)</p>\n", "AcceptedAnswerId": "15744362", "Title": "Is the literal 0xffffffff int or unsigned in C++", "CreationDate": "2013-04-01T13:21:51.410", "Id": "15744310", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-04-01T13:26:20.803", "LastEditorUserId": "2087705", "LastActivityDate": "2013-04-01T13:35:43.200", "Score": "22", "OwnerUserId": "1023390", "Tags": "<c++><integer><literals>", "AnswerCount": "1"}});