post_cb({"bq_ids": {"n4140": {"so_37328444_37328444_0": {"length": 13, "quality": 1.0, "section_id": 6690}, "so_37328444_37328923_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 5485}, "so_37328444_37328923_1": {"length": 33, "quality": 0.9166666666666666, "section_id": 7106}}, "n3337": {"so_37328444_37328444_0": {"length": 13, "quality": 1.0, "section_id": 6445}, "so_37328444_37328923_1": {"length": 33, "quality": 0.9166666666666666, "section_id": 6850}}, "n4659": {"so_37328444_37328444_0": {"length": 13, "quality": 1.0, "section_id": 8165}, "so_37328444_37328923_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 6920}, "so_37328444_37328923_1": {"length": 33, "quality": 0.9166666666666666, "section_id": 8607}}}, "37328923": {"Id": "37328923", "PostTypeId": "2", "Body": "<p>The issue you're running into is that, from [namespace.memdef]:</p>\n<blockquote>\n<p id=\"so_37328444_37328923_0\">The friend declaration does not by\n  itself make the name visible to unqualified lookup (3.4.1) or qualified lookup (3.4.3).</p>\n</blockquote>\n<p>The way they are found is through argument dependent lookup, [basic.lookup.argdep]:</p>\n<blockquote>\n<p id=\"so_37328444_37328923_1\">When considering an associated namespace, the lookup is the same as the lookup performed when the\n  associated namespace is used as a qualifier (3.4.3.2) except that: [...] Any namespace-scope friend functions or friend function templates declared in associated classes are\n  visible within their respective namespaces even if they are not visible during an ordinary lookup (11.3).</p>\n</blockquote>\n<p><code>std::ostream&amp; operator&lt;&lt; (std::ostream&amp; o, test t)</code> is found due to argument-dependent lookup on the second argument. </p>\n<p>When you define <code>_UNIT</code> <em>externally</em> to the class, it makes the function visible. </p>\n<p>However, when you define <code>_UNIT</code> inline - it's not visible to normal lookup and the only argument (<code>double</code>) does not have any associated namespaces so there's no way for it to be found with argument-dependent lookup either. </p>\n", "LastActivityDate": "2016-05-19T16:20:04.717", "CommentCount": "0", "CreationDate": "2016-05-19T16:20:04.717", "ParentId": "37328444", "Score": "2", "OwnerUserId": "2069064"}, "37328444": {"ViewCount": "104", "Body": "<p>Why does defining user defined literal inside the class <a href=\"http://ideone.com/E3JFLw\" rel=\"nofollow\">give error</a>?</p>\n<pre><code>class test\n{\n    long double x;\n    public:    \n    friend test operator\"\"_UNIT(long double v)\n    {\n        test t;\n        t.x = v;\n        return t;\n    }       \n};\n\nint main()\n{\n    test T = 10.0_UNIT;        \n    return 0;\n}\n</code></pre>\n<p>ERROR:</p>\n<pre><code>unable to find numeric literal operator 'operator\"\"_UNIT'\n</code></pre>\n<p>Note: It is possible to define <a href=\"http://ideone.com/ni9CDK\" rel=\"nofollow\">any friend function</a> inside the class.</p>\n<pre><code>class test\n{\n    int x;\n    public:\n    test():x(10) {}\n    friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; o, test t)\n    {\n        o &lt;&lt; t.x ;\n        return o;\n    }\n};\n\nint main() {\n    test T;\n    std::cout &lt;&lt; T;\n    return 0;\n}\n</code></pre>\n<p>The same friend user defined literal can be defined <a href=\"http://ideone.com/p4zE0x\" rel=\"nofollow\">outside the class</a>.</p>\n<pre><code>class test\n{\n    long double x;\n    public:    \n    friend test operator\"\"_UNIT(long double v);\n};\n\ntest operator\"\"_UNIT(long double v)\n{\n    test t;\n    t.x = v;\n    return t;\n}\n\nint main()\n{\n    test T = 10.0_UNIT;        \n    return 0;\n}\n</code></pre>\n<p>Does this quote from the standard have an impact?</p>\n<blockquote>\n<p id=\"so_37328444_37328444_0\">A friend function defined in a class is in the (lexical) scope of the\n  class in which it is defined. A friend function defined outside the\n  class is not</p>\n</blockquote>\n", "AcceptedAnswerId": "37328923", "Title": "Define friend user defined literal operator inside the class", "CreationDate": "2016-05-19T15:56:33.093", "Id": "37328444", "CommentCount": "2", "LastEditDate": "2016-05-19T16:20:10.843", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2016-05-19T16:20:10.843", "Score": "0", "OwnerUserId": "2508038", "Tags": "<c++><c++11>", "AnswerCount": "1"}});