post_cb({"bq_ids": {"n4140": {"so_36024047_36024121_2": {"length": 11, "quality": 1.0, "section_id": 6159}, "so_36024047_36024121_3": {"length": 6, "quality": 1.0, "section_id": 5943}, "so_36024047_36024121_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6138}}, "n3337": {"so_36024047_36024121_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 5714}, "so_36024047_36024121_3": {"length": 6, "quality": 1.0, "section_id": 5714}, "so_36024047_36024121_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 5902}}, "n4659": {"so_36024047_36024121_2": {"length": 11, "quality": 1.0, "section_id": 7656}, "so_36024047_36024121_3": {"length": 6, "quality": 1.0, "section_id": 7428}, "so_36024047_36024121_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 7635}}}, "36024138": {"Id": "36024138", "PostTypeId": "2", "Body": "<p>They are not converted, bool actually ARE integer types.</p>\n<p>See the standard:</p>\n<p>\"Values of type bool are either true or false. As described below, bool values behave as integral types. Values of type bool participate in integral promotions\" ~ C++03</p>\n", "LastActivityDate": "2016-03-15T23:24:07.437", "CommentCount": "0", "CreationDate": "2016-03-15T23:24:07.437", "ParentId": "36024047", "Score": "1", "OwnerUserId": "2813181"}, "36024047": {"ViewCount": "109", "Body": "<p>When using comparison operators in C++, are bools converted to ints?</p>\n<p>The reason I ask is that the question of whether or not to always explicitly compare to true/false in if-statements came up. The two options being:</p>\n<pre><code>1) if (my_bool == true) doSomething();\n2) if (my_bool) doSomething();\n</code></pre>\n<p>We were thinking you should generally avoid the explicit comparison (1) because of the following:</p>\n<pre><code>int myFunc(){return 4;}\nif (myFunc() == true) doSomething();\n</code></pre>\n<p>Something like the code above would come up if you need to work with C interfaces that simply return nonzero to indicate \"true\". The <code>myFunc()</code> example would fail in C because <code>myFunc</code> returns 4, <code>true</code> is macro'd to 1, and <code>4 == 1</code> is not true.</p>\n<p>Is this still the case in C++? Does the \"equal to\" operator convert the bool to an int rather than the other way around? References to the standard (C++11 is what I'm working with) are appreciated, but if it differs among versions of the language I'd be interested in knowing.</p>\n<p>(I'd like to ask specifically about the pros/cons of explicit true/false comparison, but that seems like it could be subjective.)</p>\n", "AcceptedAnswerId": "36024121", "Title": "Are C++ bools converted to ints during comparison?", "CreationDate": "2016-03-15T23:16:06.240", "Id": "36024047", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-03-15T23:28:26.830", "Score": "6", "OwnerUserId": "1823076", "Tags": "<c++>", "AnswerCount": "2"}, "36024121": {"Id": "36024121", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_36024047_36024121_0\">When using comparison operators in C++, are bools converted to ints?</p>\n</blockquote>\n<p><strong>Yes.</strong> For relational operators ([expr.rel]/5):</p>\n<blockquote>\n<p id=\"so_36024047_36024121_1\">The usual arithmetic conversions are performed on operands of arithmetic or enumeration type.</p>\n</blockquote>\n<p>For equality operators ([expr.eq]/6):</p>\n<blockquote>\n<p id=\"so_36024047_36024121_2\">If both operands are of arithmetic or enumeration type, the usual arithmetic conversions are performed on\n  both operands;</p>\n</blockquote>\n<p>When both operands are <code>bool</code>, they are both promoted to <code>int</code>. If one operand is a <code>bool</code> and the other is of integral type, the <code>bool</code> operand is promoted to <code>int</code>. See [expr]/10:</p>\n<blockquote>\n<p id=\"so_36024047_36024121_3\">Otherwise, the integral promotions (4.5) shall be performed on both operands. </p>\n</blockquote>\n<p>As far as I know, this has been true since the beginning of time (it does not differ between revisions of the standard).</p>\n<p>I do not think there is any performance implication of doing explicit comparison to <code>true</code> or <code>false</code>, but I wouldn't do it myself, since I consider it redundant and not in a way that yields any benefit.</p>\n", "LastActivityDate": "2016-03-15T23:22:34.833", "CommentCount": "2", "CreationDate": "2016-03-15T23:22:34.833", "ParentId": "36024047", "Score": "8", "OwnerUserId": "481267"}});