post_cb({"bq_ids": {"n4140": {"so_30108274_30108422_2": {"length": 37, "quality": 0.9487179487179487, "section_id": 23}, "so_30108274_30108422_3": {"length": 14, "quality": 1.0, "section_id": 26}, "so_30108274_30108422_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6150}, "so_30108274_30108422_1": {"length": 7, "quality": 0.875, "section_id": 5943}}, "n3337": {"so_30108274_30108422_3": {"length": 14, "quality": 1.0, "section_id": 23}, "so_30108274_30108422_2": {"length": 37, "quality": 0.9487179487179487, "section_id": 20}, "so_30108274_30108422_0": {"length": 12, "quality": 0.8, "section_id": 5913}, "so_30108274_30108422_1": {"length": 7, "quality": 0.875, "section_id": 5714}}, "n4659": {"so_30108274_30108422_3": {"length": 14, "quality": 1.0, "section_id": 26}, "so_30108274_30108422_2": {"length": 37, "quality": 0.9487179487179487, "section_id": 23}, "so_30108274_30108422_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7647}, "so_30108274_30108422_1": {"length": 7, "quality": 0.875, "section_id": 7428}}}, "30108274": {"ViewCount": "108", "Body": "<pre><code>#include &lt;stddef.h&gt;\n\ntemplate&lt;size_t N = sizeof(void*)&gt; struct a;\n\ntemplate&lt;&gt; struct a&lt;4&gt; {\n    enum { b };\n};\n\ntemplate&lt;&gt; struct a&lt;8&gt; {\n    template&lt;int&gt; struct b {};\n};\n\nenum { c, d };\n\nint main() {\n    a&lt;&gt;::b&lt;c&gt;d;\n    d;\n}\n</code></pre>\n<p>I have a piece of code which succesfully compiles for x64 architecture by gcc. But fails with <code>-m32</code> with error:</p>\n<pre><code>$ g++ -m32 test.cpp \ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:16:12: warning: comparison between \u2018enum a&lt;4u&gt;::&lt;anonymous&gt;\u2019 and \u2018enum&lt;anonymous&gt;\u2019 [-Wenum-compare]\n     a&lt;&gt;::b&lt;c&gt;d;\n            ^\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>What's wrong with this code?</p>\n", "AcceptedAnswerId": "30108422", "Title": "Why this code didn't work for -m32?", "CreationDate": "2015-05-07T17:47:56.520", "Id": "30108274", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-05-07T18:51:08.103", "LastEditorUserId": "1030110", "LastActivityDate": "2015-05-11T17:02:05.140", "Score": "-1", "OwnerUserId": "1030110", "Tags": "<c++><templates><g++><32bit-64bit>", "AnswerCount": "2"}, "30108422": {"Id": "30108422", "PostTypeId": "2", "Body": "<p>Your code is correct. Clearly, since the warning is just a warning. It points towards the fact that the comparison involves two unrelated enumerations, so perhaps isn't sensible. </p>\n<p>In case you're interested in an analysis:<br>\nSince you're compiling for x86-32, <code>sizeof(void*)</code> is 4. So <code>a&lt;&gt;</code> refers to <code>a&lt;4&gt;</code>, and subsequently <code>a&lt;4&gt;::b</code> refers to an enumerator. </br></p>\n<p>So the expression-statement</p>\n<pre><code>a&lt;&gt;::b&lt;c&gt;d;\n</code></pre>\n<p>is parsed as</p>\n<pre><code>(a&lt;&gt;::b &lt; c) &gt; d;\n</code></pre>\n<p>Now the usual arithmetic conversions are performed, during which both operands are promoted to <code>int</code>, using the rules of integral promotion. [expr.rel]/2:</p>\n<blockquote>\n<p id=\"so_30108274_30108422_0\">The usual arithmetic conversions are performed on operands of\n  arithmetic or enumeration type. [\u2026]. <strong>After conversions, the operands shall have the same type.</strong></p>\n</blockquote>\n<p>(Note the bold part, which is ensured later on.) [expr]/10:</p>\n<blockquote>\n<p id=\"so_30108274_30108422_1\">This pattern is called the <em>usual arithmetic conversions</em>,\n  which are defined as follows:</p>\n<ul>\n<li>If either operand is of scoped enumeration type (7.2), no conversions are performed; if the other operand does not have the same\n  type, the expression is ill-formed.</li>\n<li>[ \u2026Bullet points concerning floating point types\u2026 ]</li>\n<li><strong>Otherwise, the integral promotions (4.5) shall be performed on both operands</strong>. Then the following rules shall be applied to the\n  promoted operands:\n  <ul>\n<li>If both operands have the same type, no further conversion is needed.</li>\n<li>[\u2026]</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>Integral promotion for enumerators is covered in [conv.prom]/3:</p>\n<blockquote>\n<p id=\"so_30108274_30108422_2\">A prvalue of an unscoped enumeration type whose underlying type is not\n  fixed (7.2) can be converted to a prvalue of the first of the\n  following types that can represent all the values of the enumeration\n  (i.e., the values in the range <em>b<sub>min</sub></em> to <em>b<sub>max</sub></em> as described in 7.2):\n  <code>int</code>, <code>unsigned int</code>, <code>long int</code>, <code>unsigned long int</code>, <code>long long int</code>, or\n  <code>unsigned long long int</code>.</p>\n</blockquote>\n<p>After both operands were promoted to <code>int</code>, the result of the expression is <code>false</code> (since <code>0</code> is not less than <code>0</code>).</p>\n<p>Then the result of this promotion is compared against <code>d</code> - here, <code>d</code> is promoted to <code>int</code> as described above, while the result of the comparison - which is of type <code>bool</code> - is promoted to <code>int</code> as well. [conv.prom]/6:</p>\n<blockquote>\n<p id=\"so_30108274_30108422_3\">A prvalue of type <code>bool</code> can be converted to a prvalue of type <code>int</code>, with\n  <code>false</code> becoming zero and <code>true</code> becoming one.</p>\n</blockquote>\n<p>So both operands have type <code>int</code>. This second, outer comparison yields <code>true</code>, since <code>false</code>-&gt;<code>0</code> is smaller than <code>1</code>, the value of <code>d</code>.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-05-07T18:16:47.167", "Score": "8", "CreationDate": "2015-05-07T17:57:03.750", "ParentId": "30108274", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2015-05-07T18:16:47.167"}, "30162604": {"Id": "30162604", "PostTypeId": "2", "Body": "<p>You code is compiled without errors, the actual error happens at linking. Most probably the linker is unable to find <strong>32-bit versions</strong> of runtime libraries. Have you installed them on your system?</p>\n", "LastEditorUserId": "2266855", "LastActivityDate": "2015-05-11T17:02:05.140", "Score": "-1", "CreationDate": "2015-05-11T08:13:16.863", "ParentId": "30108274", "CommentCount": "0", "OwnerUserId": "2266855", "LastEditDate": "2015-05-11T17:02:05.140"}});