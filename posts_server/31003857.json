post_cb({"31004188": {"PostTypeId": "2", "Body": "<p>The <code>extern</code> keyword means that it will have external linkage, in other words the symbol will be exported when the translation unit will be compiled. Because your type is const, it by default has internal linkage (as though it has been declared <code>static</code>). Templates cannot depend on types that only have internal linkage.</p>\n<p>I would love to know the reason why, but it seems like it's lost to the sands of time: <a href=\"https://stackoverflow.com/questions/14597463/why-did-c03-require-template-parameters-to-have-external-linkage\">Why did C++03 require template parameters to have external linkage?</a>.</p>\n", "LastActivityDate": "2015-06-23T13:30:53.220", "LastEditorUserId": "-1", "Id": "31004188", "CommentCount": "0", "CreationDate": "2015-06-23T13:30:53.220", "ParentId": "31003857", "Score": "1", "OwnerUserId": "1908347", "LastEditDate": "2017-05-23T11:53:37.693"}, "31003895": {"PostTypeId": "2", "Body": "<p>The <code>extern</code> keyword indicates that the variable was defined in another compilation unit (source file). </p>\n<p>So in your case, <code>baz</code> <strong>should</strong> be defined in a different source file and extern is a way of saying this is a variable not defined in this source file, but in a different one, and you will find it during compilation.</p>\n<p>The <code>extern</code> keyword means \"declare without defining\". In other words, it is a way to explicitly declare a variable, or to force a declaration without a definition.</p>\n", "LastActivityDate": "2015-06-23T13:26:07.503", "LastEditorUserId": "3987536", "Id": "31003895", "CommentCount": "2", "CreationDate": "2015-06-23T13:18:01.030", "ParentId": "31003857", "Score": "0", "OwnerUserId": "3987536", "LastEditDate": "2015-06-23T13:26:07.503"}, "31004097": {"PostTypeId": "2", "Body": "<p>From 14.3.2.1 the standard states:</p>\n<blockquote>\n<p id=\"so_31003857_31004097_0\">A template-argument for a non-type, non-template template-parameter shall be one of:</p>\n<ul>\n<li>the address of an object or function with <strong>external linkage</strong>, including\n  function templates and function template-ids but excluding non-static\n  class members, expressed as &amp; id-expression where the &amp; is optional if\n  the name refers to a function or array, or if the corresponding\n  template-parameter is a reference;</li>\n</ul>\n</blockquote>\n<p>From <a href=\"https://stackoverflow.com/a/643927/451600\">https://stackoverflow.com/a/643927/451600</a> by mweerden</p>\n", "LastActivityDate": "2015-06-23T13:27:22.867", "LastEditorUserId": "-1", "Id": "31004097", "CommentCount": "0", "CreationDate": "2015-06-23T13:27:22.867", "ParentId": "31003857", "Score": "1", "OwnerUserId": "451600", "LastEditDate": "2017-05-23T11:59:53.937"}, "bq_ids": {"n4140": {"so_31003857_31004233_1": {"length": 46, "quality": 0.9787234042553191, "section_id": 87}, "so_31003857_31004233_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_31003857_31004097_0": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_31003857_31004233_1": {"length": 40, "quality": 0.851063829787234, "section_id": 82}, "so_31003857_31004233_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_31003857_31004097_0": {"length": 5, "quality": 1.0, "section_id": 82}}}, "31004233": {"PostTypeId": "2", "Body": "<p>This is one of the parts of the standard that changed from C++03 to C++11. </p>\n<p>In C++03, [temp.arg.nontype] reads:</p>\n<blockquote>\n<p id=\"so_31003857_31004233_0\">A template-argument for a non-type, non-template template-parameter shall be one of:</p>\n<ul>\n<li>[...]</li>\n<li>[...]</li>\n<li>the address of an object or function with <strong>external linkage</strong>, including function templates and function template-ids but excluding non-static class members, expressed as &amp; id-expression where the &amp; is optional if the name refers to a function or array, or if the corresponding template-parameter is a reference; or  </li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>In C++11, that got updated as a result of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1155\" rel=\"nofollow\">issue 1155</a>, though GCC still has <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52036\" rel=\"nofollow\">a bug</a> with regards to this behavior:</p>\n<blockquote id=\"so_31003857_31004233_1\">\n<ul>\n<li>a constant expression (5.19) that designates the address of a complete object with static storage duration\n  and external or internal linkage or a function with <strong>external or internal linkage</strong>, including function\n  templates and function template-ids but excluding non-static class members, expressed (ignoring parentheses)\n  as &amp; id-expression, where the id-expression is the name of an object or function, except that the\n  &amp; may be omitted if the name refers to a function or array and shall be omitted if the corresponding\n  template-parameter is a reference; or</li>\n</ul>\n</blockquote>\n<p>In C++14, that got simplified even further and doesn't even mention linkage.</p>\n<p>As to your specific question, the <code>extern</code> specifier adds external linkage to <code>baz_instance</code>. Without it, <code>baz_instance</code> has internal linkage. In C++03, you needed external linkage to have a non-type template parameter of reference type. In C++11, you don't anymore - so <code>extern</code> is no longer necessary and it compiles fine without it. </p>\n", "LastActivityDate": "2015-06-23T13:38:01.360", "LastEditorUserId": "2069064", "Id": "31004233", "CommentCount": "0", "CreationDate": "2015-06-23T13:32:38.643", "ParentId": "31003857", "Score": "6", "OwnerUserId": "2069064", "LastEditDate": "2015-06-23T13:38:01.360"}, "31003857": {"ViewCount": "272", "Body": "<p>I am asking myself why the following code works and what the specifier <code>extern</code> does when instantiating <code>baz_instance</code>:</p>\n<pre><code>struct baz {\n    int value;\n};\n\nextern const baz baz_instance = {3};\n\ntemplate&lt;baz const&amp; b&gt;\nint foo(){\n    return b.value;\n}\n\nint main(){\n    foo&lt;baz_instance&gt;();\n    return 1;\n}\n</code></pre>\n<p>Why does the above code compile in the first place and why doesn't it compile anymore if the <code>extern</code> specifier is left out? What does the <code>extern</code> specifier do in this example?</p>\n", "AcceptedAnswerId": "31004233", "Title": "Passing a struct to a template with extern const. What is the extern for?", "CreationDate": "2015-06-23T13:16:01.340", "Id": "31003857", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-06-23T13:20:33.130", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-23T13:38:01.360", "Score": "10", "OwnerUserId": "1479518", "Tags": "<c++><templates><struct><const><extern>", "AnswerCount": "4"}});