post_cb({"32784399": {"ViewCount": "595", "Body": "<p>While testing the VS2015 C++ compiler I stumbled upon a strange bug with the <code>default</code> keyword.  If I do:</p>\n<pre><code>struct Dummy\n{\n    Dummy() = default;\n    Dummy(const Dummy &amp;) = delete;\n};  \n\nint main()\n{\n    const Dummy&amp; ref = Dummy();\n    return 0;\n}\n</code></pre>\n<p>I get</p>\n<blockquote>\n<p id=\"so_32784399_32784399_0\">error C2280: 'Dummy::Dummy(const Dummy &amp;)': attempting to reference a deleted function<br>\n  note: see declaration of 'Dummy::Dummy'</br></p>\n</blockquote>\n<p>But if I use an empty constructor</p>\n<pre><code>struct Dummy\n{\n    Dummy() {}\n    Dummy(const Dummy &amp;) = delete;\n};\n\nint main()\n{\n    const Dummy&amp; ref = Dummy();\n    return 0;\n}\n</code></pre>\n<p>The code compiles.  Running the first example with <a href=\"http://coliru.stacked-crooked.com/a/1178b084a9fdad3f\" rel=\"noreferrer\">g++</a> or <a href=\"http://coliru.stacked-crooked.com/a/0edc19b44ee1ea35\" rel=\"noreferrer\">clang</a> produces no error.  </p>\n<p>Why would using the default constructor with VS2015 try to use the copy constructor where it doesn't in g++ or clang? </p>\n", "AcceptedAnswerId": "32852344", "Title": "Possible bug in handling the `default` keyword in VS2015 C++", "CreationDate": "2015-09-25T14:25:41.363", "Id": "32784399", "CommentCount": "4", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2015-09-30T08:21:34.213", "LastEditorUserId": "1555823", "LastActivityDate": "2015-09-30T08:21:34.213", "Score": "18", "OwnerUserId": "1721250", "Tags": "<c++><visual-studio-2015><language-lawyer>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32784399_32852344_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 3321}, "so_32784399_32852344_0": {"length": 9, "quality": 0.6, "section_id": 3321}}, "n3337": {"so_32784399_32852344_0": {"length": 9, "quality": 0.6, "section_id": 3191}}, "n4659": {"so_32784399_32852344_1": {"length": 6, "quality": 0.5454545454545454, "section_id": 4087}, "so_32784399_32852344_0": {"length": 9, "quality": 0.6, "section_id": 4087}}}, "32852344": {"Id": "32852344", "PostTypeId": "2", "Body": "<p>It is definitely a bug in VS 2015.</p>\n<p>In C++11, assigning temporary to const reference must not call copy constructor, but VS 2015 does.</p>\n<p>You can check it with </p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Dummy\n{\n    Dummy() = default;\n    Dummy(const Dummy &amp;) { std::cout &lt;&lt; \"copy ctor\" &lt;&lt; std::endl; }\n    void test() const { std::cout &lt;&lt; \"test\" &lt;&lt; std::endl; }\n};  \n\nint main()\n{\n    const Dummy&amp; ref = Dummy();\n    ref.test();\n    return 0;\n}\n</code></pre>\n<p>compiled on VS 2013, 2015, gcc and clang. Only VS (any version) calls copy constructor, if class constructor defined as <code>= default</code>.</p>\n<p>I think VS compiiler still in 2015 erroneously uses old C++03 standard rules for this (8.5.3.5 of C++03):</p>\n<blockquote>\n<p id=\"so_32784399_32852344_0\">If the initializer expression is an rvalue, with T2 a class type, and\n  \"cv1 T1\" is reference-compatible with \"cv2 T2,\" the reference is bound\n  in one of the following ways (the choice is implementation-defined):</p>\n<p id=\"so_32784399_32852344_1\">-- The reference is bound to the object represented by the rvalue (see 3.10) or to a sub-object within that object.</p>\n<p id=\"so_32784399_32852344_2\">-- A temporary of type \"cv1 T2\" [sic] is created, and a constructor is called to copy the entire rvalue object into the temporary. The\n  reference is bound to the temporary or to a sub-object within the\n  temporary.</p>\n<p id=\"so_32784399_32852344_3\">The constructor that would be used to make the copy shall be callable\n  whether or not the copy is actually done.</p>\n</blockquote>\n<p>VS developers chose second way. They corrected this for empty user-defined constructor (<code>{}</code>), but forgot to do this for defaulted (<code>= default</code>) constructors.</p>\n<p>PS. <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1849804\">Bug on MS Connect</a> (please vote)</p>\n", "LastEditorUserId": "1555823", "LastActivityDate": "2015-09-29T20:20:27.617", "Score": "9", "CreationDate": "2015-09-29T19:34:54.680", "ParentId": "32784399", "CommentCount": "1", "LastEditDate": "2015-09-29T20:20:27.617", "OwnerUserId": "1555823"}});