post_cb({"3599714": {"ParentId": "3599695", "CommentCount": "0", "CreationDate": "2010-08-30T10:58:41.147", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3599714", "Score": "1", "Body": "<p>Virtual function mechanism is enabled only if the virtual function is called through either an appropriate reference or an appropriate pointer. Note that virtual function call mechanism is suppressed in constructor/destructor or while using the :: operator.</p>\n<p>If the code is as shown below, virtual function mechanism will be enabled.</p>\n<pre><code>Child c;\nParent &amp;a = c;\na.f();\n</code></pre>\n<p>Without pointers, the call is statically bound, even if it is a virtual function call.</p>\n<p>EDIT 2:</p>\n<blockquote>\n<p id=\"so_3599695_3599714_0\">$10.3/6 - [Note: the interpretation of\n  the call of a virtual function depends\n  on the type of the object for which it\n  is called (the dynamic type), whereas\n  the interpretation of a call of a\n  nonvirtual member function depends\n  only on the type of the pointer or\n  reference denoting that object (the\n  static type) (5.2.2). ]</p>\n</blockquote>\n", "LastActivityDate": "2010-08-30T10:58:41.147"}, "3599721": {"ParentId": "3599695", "CommentCount": "0", "CreationDate": "2010-08-30T10:59:19.697", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "3599721", "Score": "4", "Body": "<p>Try the following:</p>\n<pre><code>std::auto_ptr&lt;Parent&gt; b = new Child(2);\n</code></pre>\n<p>In your code you copy part of <code>Child</code> object to <code>b</code>. This is so called <a href=\"http://en.wikipedia.org/wiki/Object_slicing\" rel=\"nofollow noreferrer\">object slicing</a>.</p>\n", "LastActivityDate": "2010-08-30T10:59:19.697"}, "3599695": {"CommentCount": "3", "ViewCount": "434", "PostTypeId": "1", "LastEditorUserId": "1816580", "CreationDate": "2010-08-30T10:53:58.213", "LastActivityDate": "2014-11-27T14:04:05.953", "Title": "Why isn't this method call virtual like I was expecting?", "AcceptedAnswerId": "3599717", "LastEditDate": "2014-11-27T14:04:05.953", "Id": "3599695", "Score": "2", "Body": "<p>I want to ask what happen, when I use virtual functions without pointers ? for example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Parent\n{\n public:\n   Parent(int i) { }\n   virtual void f() { cout&lt;&lt;\"Parent\"&lt;&lt;endl; }\n};\n\nclass Child : public Parent\n{\n public:\n   Child(int i) : Parent(i) { }\n   virtual void f() { Parent::f(); cout&lt;&lt;\" Child\"&lt;&lt;endl; }\n};\n\nint main()\n{\n    Parent a(2);\n    Parent b = Child(2);\n    a.f();\n    b.f();\n    return 0;\n}\n</code></pre>\n<p>^^ Why doesn't it work ?\nWhere can I find something about how virtual methods really work?</p>\n", "Tags": "<c++><object-slicing>", "OwnerUserId": "434869", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_3599695_3599714_0": {"section_id": 7010, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_3599695_3599714_0": {"section_id": 6756, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_3599695_3599714_0": {"section_id": 8507, "quality": 0.8888888888888888, "length": 24}}}, "3599717": {"ParentId": "3599695", "CommentCount": "4", "CreationDate": "2010-08-30T10:58:53.440", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "3599717", "Score": "14", "Body": "<p>This effect is called \"slicing.\"</p>\n<pre><code>Parent b = Child(2); // initializes a new Parent object using part of Child obj\n</code></pre>\n<p>In C++, the dynamic type may only differ from the static type for references or pointers. You have a direct object. So, your suspicion was essentially correct.</p>\n", "LastActivityDate": "2010-08-30T10:58:53.440"}});