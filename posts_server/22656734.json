post_cb({"28243456": {"ParentId": "22656734", "CommentCount": "0", "Body": "<p>As has been explained by others, modifying a <code>const</code> value results in undefined behavior and nothing more needs to be said - any result is possible, including complete nonsense or a crash.</p>\n<p>If you're curious as to how <em>this particular</em> result came about, it's almost certainly due to optimization. Since you defined <code>a</code> to be <code>const</code>, the compiler is free to substitute the value <code>40</code> that you assigned to it whenever it wants; after all, its value can't change, right? This is useful when you're using <code>a</code> to define the size of an array for example. Even in gcc, which has an extension for variable-sized arrays, it's simpler for the compiler to allocate a constant-size array. Once the optimization exists it's probably applied consistently.</p>\n", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "28243456", "Score": "0", "CreationDate": "2015-01-30T19:45:03.537", "LastActivityDate": "2015-01-30T19:45:03.537"}, "22656734": {"CommentCount": "2", "ViewCount": "455", "PostTypeId": "1", "ClosedDate": "2017-07-31T11:23:29.123", "LastEditorUserId": "1505939", "CreationDate": "2014-03-26T09:34:21.893", "LastActivityDate": "2015-01-30T19:45:03.537", "Title": "How is a variable at the same address producing 2 different values?", "AcceptedAnswerId": "22656791", "LastEditDate": "2014-12-02T20:39:52.630", "Id": "22656734", "Score": "6", "Body": "<p>Consider  this :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(void)\n{\n    const int a1 = 40;\n    const int* b1 = &amp;a1;\n    char* c1 = (char *)(b1);\n    *c1 = 'A';\n    int *t = (int*)c1;\n\n\n    cout &lt;&lt; a1 &lt;&lt; \" \" &lt;&lt; *t &lt;&lt; endl;\n    cout &lt;&lt; &amp;a1 &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl; \n\n    return 0;\n}\n</code></pre>\n<p>The output for this is :</p>\n<pre><code>40 65 \n0xbfacbe8c 0xbfacbe8c\n</code></pre>\n<p>This almost seems impossible to me unless compiler is making optimizations. How ? </p>\n", "Tags": "<c++><casting><const><undefined-behavior>", "OwnerUserId": "2910606", "AnswerCount": "4"}, "22656759": {"ParentId": "22656734", "CommentCount": "1", "Body": "<p>Your code has undefined behaviour, because you are modifying a constant object. <em>Anything</em> could happen, nothing is impossible.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "22656759", "Score": "4", "CreationDate": "2014-03-26T09:35:12.310", "LastActivityDate": "2014-03-26T09:35:12.310"}, "22656791": {"ParentId": "22656734", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>This is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>, you are modifying a const variable so you can have no expectation as to the results. We can see this by going to the draft C++ standard section <code>7.1.6.1</code> <em>The cv-qualifiers</em> paragraph <em>4</em> which says:</p>\n<blockquote>\n<p id=\"so_22656734_22656791_0\">[...]any attempt to modify a const object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote>\n<p>and even provides an example:</p>\n<pre><code>const int* ciq = new const int (3); // initialized as required\nint* iq = const_cast&lt;int*&gt;(ciq); // cast required\n*iq = 4; // undefined: modifies a const object\n</code></pre>\n<p>In the standard definition of <em>undefined behaviour</em> in section <code>1.3.24</code>, gives the following possible behaviors:</p>\n<blockquote>\n<p id=\"so_22656734_22656791_1\">[...] Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of\n  a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message). [...]</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "2633527", "LastEditDate": "2014-09-16T17:13:42.023", "Id": "22656791", "Score": "14", "CreationDate": "2014-03-26T09:36:25.150", "LastActivityDate": "2014-09-16T17:13:42.023"}, "bq_ids": {"n4140": {"so_22656734_22656791_1": {"section_id": 5768, "quality": 1.0, "length": 26}, "so_22656734_22656791_0": {"section_id": 5433, "quality": 1.0, "length": 10}}, "n3337": {"so_22656734_22656791_1": {"section_id": 5541, "quality": 1.0, "length": 26}, "so_22656734_22656791_0": {"section_id": 5228, "quality": 1.0, "length": 10}}, "n4659": {"so_22656734_22656791_1": {"section_id": 7225, "quality": 1.0, "length": 26}, "so_22656734_22656791_0": {"section_id": 6861, "quality": 1.0, "length": 10}}}, "22656839": {"ParentId": "22656734", "CommentCount": "0", "Body": "<p>When you qualify them variables <code>const</code> the compiler can assume a few things and generate code, this works fine providing you respect that agreement and not break it. When you've broken it, you'll get undefined behaviour.</p>\n<p>Note that when <code>const</code> is removed, it works as expected; <a href=\"http://coliru.stacked-crooked.com/a/6faf7f9da41ca738\" rel=\"nofollow\">here's a live example</a>.</p>\n", "OwnerUserId": "183120", "PostTypeId": "2", "Id": "22656839", "Score": "2", "CreationDate": "2014-03-26T09:38:38.990", "LastActivityDate": "2014-03-26T09:38:38.990"}});