post_cb({"19613212": {"ParentId": "19613191", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>sqrt</code> is defined for <code>double</code>. And C++ allows you to convert <code>int</code> to <code>double</code> implicitly.</p>\n<pre><code>int n = 3;\ndouble x = sqrt(n);    // implicit conversion of n from int to double\n</code></pre>\n<p>Implicit conversions may happen when you use the value as a function parameter or assign it to a variable.</p>\n<p>An example for the second case would be:</p>\n<pre><code>int n = 3;\ndouble x = n;          // implicit conversion of n from int to double\n</code></pre>\n<p>Note that operators are also simply functions. Thus, you can also add an <code>int</code> to a <code>double</code>, which converts the <code>int</code> to a <code>double</code> before invoking the actual addition:</p>\n<pre><code>int n = 3;\ndouble x = 1.0;\ndouble sum = n + x;    // implicit conversion of n from int to double\n</code></pre>\n", "OwnerUserId": "592323", "LastEditorUserId": "592323", "LastEditDate": "2013-10-27T00:00:20.293", "Id": "19613212", "Score": "2", "CreationDate": "2013-10-26T23:54:01.353", "LastActivityDate": "2013-10-27T00:00:20.293"}, "19613213": {"ParentId": "19613191", "CommentCount": "5", "Body": "<p>Because there's an implicit conversion from <code>int</code> to <code>double</code>.</p>\n<p>With the conversion, your code would look like this:</p>\n<pre><code>cout &lt;&lt; \"Square root of n == \" &lt;&lt; sqrt((double)n) &lt;&lt; \"\\n\";\n</code></pre>\n", "OwnerUserId": "2632282", "PostTypeId": "2", "Id": "19613213", "Score": "1", "CreationDate": "2013-10-26T23:54:29.840", "LastActivityDate": "2013-10-26T23:54:29.840"}, "19613217": {"ParentId": "19613191", "CommentCount": "0", "Body": "<p>Because the compiler is actually automatically (i.e. \"implicitly\") converting the integer to a <code>double</code> (or maybe <code>long double</code>) and sending that value to <code>sqrt()</code>. This is completely normally and completely legal.</p>\n", "OwnerUserId": "383045", "PostTypeId": "2", "Id": "19613217", "Score": "1", "CreationDate": "2013-10-26T23:55:05.970", "LastActivityDate": "2013-10-26T23:55:05.970"}, "19613191": {"CommentCount": "13", "AcceptedAnswerId": "19684955", "CreationDate": "2013-10-26T23:51:40.813", "LastActivityDate": "2013-12-20T04:02:31.830", "PostTypeId": "1", "ViewCount": "5390", "FavoriteCount": "0", "Title": "In C++, why does sqrt() work fine on an int variable if it is not defined for an int?", "Id": "19613191", "Score": "5", "Body": "<p>In chapter 3 of <em><a href=\"http://www.stroustrup.com/Programming/index.html\">Programming: Principles and Practice using C++</a></em> (sixth printing), Stroustrup states (p.68): <strong>\"Note that <code>sqrt()</code> is not defined for an <code>int</code>\"</strong>.</p>\n<p>Here is a simple C++ program based on that chapter:</p>\n<pre><code>#include \"std_lib_facilities.h\"\n\nint main()\n{\n    int n = 3;\n    cout &lt;&lt; \"Square root of n == \" &lt;&lt; sqrt(n) &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>Given the quote above, I would expect the process of compiling or running this program to fail in some way.</p>\n<p>To my surprise, compiling it (with g++ (GCC) 4.2.1) and running it succeeded without errors or warnings, and produced the following perfectly decent output:</p>\n<pre><code>Square root of n == 1.73205\n</code></pre>\n<p>My question therefore is: if <code>sqrt()</code> really is not defined for an <code>int</code>, then why doesn't the program above fail somehow?</p>\n", "Tags": "<c++><gcc><g++><gcc4><gcc-4.2>", "OwnerUserId": "82216", "AnswerCount": "6"}, "19613211": {"ParentId": "19613191", "CommentCount": "4", "Body": "<p>Because of <em>implicit conversions</em>. <code>sqrt</code> is defined for <code>double</code>, and an <code>int</code> value can be (and is) converted implicitly to a value of type <code>double</code>.</p>\n<p>(It is in fact pretty hard to <em>prevent</em> a function that takes a <code>double</code> from being called with an <code>int</code>. You may get your compiler to emit a warning, but since this is typically a value-preserving conversion, even that may be hard. C++ inherits from C the design to try as hard as possible to make code work, even if it requires contortions. Other languages are much stricter about this sort of thing.)</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "19613211", "Score": "3", "CreationDate": "2013-10-26T23:53:58.867", "LastActivityDate": "2013-10-26T23:53:58.867"}, "19684955": {"ParentId": "19613191", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><b>Update 2</b></p>\n<p>This question was merged with an exact duplicate, on taking a look at this, the actual answer is much simpler than anyone originally thought. The current version of <a href=\"http://www.stroustrup.com/Programming/std_lib_facilities.h\" rel=\"nofollow\">std_lib_facilities.h</a> includes the following line:</p>\n<pre><code>inline double sqrt(int x) { return sqrt(double(x)); }   // to match C++0x\n</code></pre>\n<p>which creates a specific overload for the <em>int</em> case to match what modern compilers should be be doing which is <em>cast integer arguments to double</em>, although this version does not cover all the cases.</p>\n<p>If <em>std_lib_facilities.h</em> was not being used than the original logic still applies, although <code>gcc-4.2</code> is rather old compared to <em>Visual Studio 2012</em> from the original question but a <code>4.1.2</code> version have uses <code>__builtin_sqrt</code> specifically for the integer case.</p>\n<p><b>Original</b></p>\n<p>Since around <em>2005</em> the draft standard required <em>integer</em> argument to be <em>cast</em> to <em>double</em> this is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a>. If we look in section <code>26</code> <em>Numerics library</em> and then go to section <code>26.8</code> <em>C library</em> which covers the <code>&lt;cmath&gt;</code> header, it specifies overloads of the math functions for <em>float</em>, <em>double</em> and <em>long double</em> which is covered in paragraph <em>8</em>:</p>\n<blockquote>\n<p id=\"so_19613191_19684955_0\">In addition to the double versions of the math functions in , C++ adds float and long double overloaded versions of these functions, with the same semantics.</p>\n</blockquote>\n<p>which would be <code>ambiguous</code> for the <code>int</code> case but the standard requires that sufficient overload are provided so that <em>integer</em> arguments are <em>cast</em> to <em>double</em>. It is covered in paragraph <em>11</em> which says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19613191_19684955_1\">Moreover, there shall be additional overloads sufficient to ensure:</p>\n<blockquote id=\"so_19613191_19684955_2\">\n<ol>\n<li>If any arithmetic argument corresponding to a double parameter has type long double, then all arithmetic arguments corresponding to double parameters are effectively cast to long double.</li>\n<li>Otherwise, if any arithmetic argument corresponding to a double parameter has type double or an integer type, <strong>then all arithmetic arguments corresponding to double parameters are effectively cast to double.</strong></li>\n<li>Otherwise, all arithmetic arguments corresponding to double parameters have type float.</li>\n</ol>\n</blockquote>\n</blockquote>\n<p><b>Update</b></p>\n<p>As @nos points out it is possible that the version of <code>sqrt</code> being called is from <code>math.h</code> header as opposed to the overloads from <code>cmath</code>, if that is the case and there is likely a <em>implementation defined</em> caveat here then we <em>may</em> be reverting to old <em>C style</em> behavior if the only version available is <code>sqrt(double)</code> which would mean that <em>int</em> would be converted to <em>double implicitly</em>.</p>\n<p>One way I found to test this on <code>gcc</code> and <code>clang</code> would be to use <em>long</em> type for <code>a</code> which along with <code>-Wconversion</code> flag triggers a warning for a potentially value altering conversion on my platform if we only have <code>sqrt(double)</code> available. Indeed if I include <code>math.h</code> instead of <code>cmath</code> we can produce this warning. Although I can not trigger this behavior in <em>clang</em> which seems to indicate this is <em>implementation dependent</em>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-12-20T04:02:31.830", "Id": "19684955", "Score": "4", "CreationDate": "2013-10-30T14:24:04.913", "LastActivityDate": "2013-12-20T04:02:31.830"}, "bq_ids": {"n4140": {"so_19613191_19684955_1": {"section_id": 3876, "quality": 1.0, "length": 6}, "so_19613191_19684955_2": {"section_id": 3876, "quality": 1.0, "length": 49}, "so_19613191_19684955_0": {"section_id": 3873, "quality": 1.0, "length": 14}}, "n3337": {"so_19613191_19684955_1": {"section_id": 3736, "quality": 1.0, "length": 6}, "so_19613191_19684955_2": {"section_id": 3736, "quality": 0.8571428571428571, "length": 42}, "so_19613191_19684955_0": {"section_id": 3733, "quality": 1.0, "length": 14}}, "n4659": {"so_19613191_19684955_1": {"section_id": 4690, "quality": 0.8333333333333334, "length": 5}, "so_19613191_19684955_2": {"section_id": 4690, "quality": 0.8979591836734694, "length": 44}}}, "19684504": {"ParentId": "19613191", "CommentCount": "3", "Body": "<p>The 10 is being implicitly converted to a double. This will happen automatically as long as you have the correct function prototype for sqrt.</p>\n<p>Edit: beaten by comments </p>\n", "OwnerUserId": "268025", "PostTypeId": "2", "Id": "19684504", "Score": "5", "CreationDate": "2013-10-30T14:06:38.620", "LastActivityDate": "2013-10-30T14:06:38.620"}});