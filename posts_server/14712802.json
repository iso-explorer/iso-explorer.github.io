post_cb({"14713272": {"ParentId": "14712802", "CommentCount": "1", "Body": "<p>From what I can tell, Section 8.5/16 of the C++11 standard pretty much eliminates the possibility of calling a user-defined constructor for uniformly initializing all the elements of an array of class-types.  Here is the relevant text (I've clipped out a couple of listed items that didn't seem pertinent):</p>\n<blockquote>\n<p id=\"so_14712802_14713272_0\">The semantics of initializers are as follows. The destination type is\n  the type of the object or reference being initialized and the source\n  type is the type of the initializer expression. If the initializer is\n  not a single (possibly parenthesized) expression, the source type is\n  not defined. </p>\n<p id=\"so_14712802_14713272_1\">\u2014 If the initializer is a (non-parenthesized)\n  braced-init-list, the object or reference is list-initialized (8.5.4).</p>\n<p id=\"so_14712802_14713272_2\">\u2014 If the initializer is (), the object is value-initialized.</p>\n<p id=\"so_14712802_14713272_3\">\u2014 Otherwise, if the destination type is an array, the program is ill-formed.</p>\n</blockquote>\n", "OwnerUserId": "649233", "PostTypeId": "2", "Id": "14713272", "Score": "2", "CreationDate": "2013-02-05T17:23:26.683", "LastActivityDate": "2013-02-05T17:23:26.683"}, "14712802": {"CommentCount": "9", "AcceptedAnswerId": "14713008", "CreationDate": "2013-02-05T16:58:13.980", "LastActivityDate": "2013-02-05T17:23:26.683", "PostTypeId": "1", "ViewCount": "604", "FavoriteCount": "1", "Title": "warning: non-constant array size in new, unable to verify length of initializer-list", "Id": "14712802", "Score": "2", "Body": "<p>I face a problem similar to this one.</p>\n<pre><code>int j = 6;\nint *k = new int[j]{4};\n</code></pre>\n<p>The warning is :</p>\n<pre><code>warning: non-constant array size in new, unable to verify length \nof initializer-list [enabled by default]\n</code></pre>\n<p>I face only a warning, no errors and I run with -std=gnu++11 </p>\n<p>Plus, I want the constructor called for every instance. If I print the array values, all </p>\n", "Tags": "<c++><gcc-warning>", "OwnerUserId": "1150428", "AnswerCount": "2"}, "14713008": {"ParentId": "14712802", "CommentCount": "2", "Body": "<p>The problem is exactly what the compiler is telling you.</p>\n<p>The dimension is known only at runtime, so you may only use runtime functionality, such as:</p>\n<pre><code>std::vector&lt;int&gt; v(j, 4);\n// `v` contains `j` ints, all initialised to `4`\n</code></pre>\n<p>If you have an element type that cannot be default-constructed, you may construct the elements in-place:</p>\n<pre><code>std::vector&lt;T&gt; v;\nv.reserve(j);\nfor (size_t i = 0; i &lt; j; i++)\n   v.emplace_back(ctor-args-here);\n</code></pre>\n<p>You could probably also use an initializer list:</p>\n<pre><code>std::vector&lt;T&gt; v{\n   T(ctor-args-here), T(ctor-args-here), T(ctor-args-here),\n   T(ctor-args-here), T(ctor-args-here), T(ctor-args-here)\n};\n</code></pre>\n<p>and the objects will be moved or, at worst, copied.</p>\n<p>The point here is that vector elements don't <em>need</em> to be default-constructible.</p>\n<p>(Unfortunately I'm not aware of a way to do this without the loop or code repetition.)</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "14713008", "Score": "5", "CreationDate": "2013-02-05T17:10:18.780", "LastActivityDate": "2013-02-05T17:10:18.780"}, "bq_ids": {"n4140": {"so_14712802_14713272_0": {"section_id": 3296, "quality": 0.84, "length": 21}, "so_14712802_14713272_1": {"section_id": 3296, "quality": 0.8571428571428571, "length": 6}, "so_14712802_14713272_3": {"section_id": 3296, "quality": 1.0, "length": 5}}, "n3337": {"so_14712802_14713272_0": {"section_id": 3166, "quality": 0.84, "length": 21}, "so_14712802_14713272_1": {"section_id": 3166, "quality": 0.8571428571428571, "length": 6}, "so_14712802_14713272_3": {"section_id": 3166, "quality": 1.0, "length": 5}}, "n4659": {"so_14712802_14713272_1": {"section_id": 4058, "quality": 0.8571428571428571, "length": 6}, "so_14712802_14713272_0": {"section_id": 4058, "quality": 0.84, "length": 21}, "so_14712802_14713272_3": {"section_id": 4058, "quality": 1.0, "length": 5}}}});