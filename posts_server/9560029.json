post_cb({"9560079": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-03-05T00:00:05.693", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:30:59.127", "Id": "9560079", "OwnerUserId": "235058", "Body": "<p>I think the correct answer should be 2. By definition, char is the smallest addressable unit.</p>\n<p>Also see: <a href=\"https://stackoverflow.com/questions/266870/why-is-a-char-and-a-bool-the-same-size-in-c\">Why is a char and a bool the same size in c++?</a></p>\n", "LastActivityDate": "2012-03-05T00:00:05.693"}, "9561114": {"ParentId": "9560029", "CommentCount": "1", "CreationDate": "2012-03-05T03:02:11.337", "OwnerUserId": "165958", "PostTypeId": "2", "Id": "9561114", "Score": "2", "Body": "<p>The C++ standard gives following relations:</p>\n<pre><code>sizeof(char) == 1\nsizeof(char) &lt;= sizeof(int) &lt;= sizeof(long)\nsizeof(float) &lt;= sizeof(double)\n</code></pre>\n<p>...</p>\n", "LastActivityDate": "2012-03-05T03:02:11.337"}, "9560044": {"ParentId": "9560029", "CommentCount": "4", "CreationDate": "2012-03-04T23:53:24.147", "OwnerUserId": "116908", "PostTypeId": "2", "Id": "9560044", "Score": "2", "Body": "<p>The language doesn't specify any relationships between these type sizes that guarantee a correct answer to that question as posed.  They could all be 32-bit types, for example.</p>\n", "LastActivityDate": "2012-03-04T23:53:24.147"}, "9560069": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-03-04T23:58:11.083", "Score": "32", "LastEditorUserId": "596781", "LastEditDate": "2012-03-05T00:03:37.040", "Id": "9560069", "OwnerUserId": "596781", "Body": "<p>No type takes <em>less</em> than <code>char</code>, because by definition <code>sizeof(char) == 1</code>. However, it is entirely possible that all types take the <em>same</em> amount of space.</p>\n<p>(Representing each type with 16 bits (with a suitably unusual floating point format) would suffice to satisfy the standard value range requirements; real hardware where every type has 32 bits exists.)</p>\n", "LastActivityDate": "2012-03-05T00:03:37.040"}, "9589938": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-03-06T18:46:15.493", "Score": "4", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:28:26.750", "Id": "9589938", "OwnerUserId": "480943", "Body": "<p>The answer is <code>char</code>. No other answer is correct.</p>\n<p>(Though I agree the question should have been worded better).</p>\n<p>The C++03 Standard $5.3.3/1 says:</p>\n<blockquote>\n<p id=\"so_9560029_9589938_0\">sizeof(char), sizeof(signed char) and sizeof(unsigned char) are 1; the\n  result of sizeof applied to any other fundamental type (3.9.1) is\n  implementation-defined. [Note: in particular, sizeof(bool) and\n  sizeof(wchar_t) are implementation-defined.69)</p>\n</blockquote>\n<p>(Found this info from another question: <a href=\"https://stackoverflow.com/questions/5067492/why-the-sizeofbool-is-not-defined-to-be-one-by-the-standard-itself\">Why the sizeof(bool) is not defined to be one, by the Standard itself?</a>).</p>\n<p>Given that the minimum size is 1 (sizeof must return integral values), this means that the following will be true in <em>any</em> implementation that follows the standards:</p>\n<pre><code>sizeof(char) == 1\nsizeof(bool) &gt;= 1\nsizeof(int) &gt;= 1\nsizeof(float) &gt;= 1\n</code></pre>\n<p>The question was poorly phrased and probably should have been asked more clearly as \"...which variable would necessarily occupy no more space in memory than any other (in any well-behaved standard implementation of C++)?\"</p>\n", "LastActivityDate": "2012-03-06T23:46:44.300"}, "bq_ids": {"n4140": {"so_9560029_9589938_0": {"section_id": 6076, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_9560029_9589938_0": {"section_id": 5844, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_9560029_9589938_0": {"section_id": 7572, "quality": 0.7777777777777778, "length": 14}}}, "9560060": {"ParentId": "9560029", "CommentCount": "5", "CreationDate": "2012-03-04T23:56:48.503", "OwnerUserId": "1133577", "PostTypeId": "2", "Id": "9560060", "Score": "0", "Body": "<p>The correct answer is boolean in theory, as a char requires knowledge of at least 8 bits, while a bool technically only requires one bit. you could smash 8 bools inside of a single char if you wanted to in theory.</p>\n", "LastActivityDate": "2012-03-04T23:56:48.503"}, "9560076": {"ParentId": "9560029", "CommentCount": "3", "CreationDate": "2012-03-04T23:59:55.527", "OwnerUserId": "1070504", "PostTypeId": "2", "Id": "9560076", "Score": "0", "Body": "<p><em>The <strong>typical</strong> size of a <code>bool</code> is one byte.</em> does not means <em>it <strong>always</strong> is one byte</em>. The question either refers to a realization that have not one-byte-sized <code>bool</code> or implies that only one variable has a smallest size.</p>\n", "LastActivityDate": "2012-03-04T23:59:55.527"}, "9560084": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2012-03-05T00:01:00.550", "Score": "10", "LastEditorUserId": "47064", "LastEditDate": "2012-03-05T10:26:46.863", "Id": "9560084", "OwnerUserId": "47064", "Body": "<blockquote>\n<p id=\"so_9560029_9560084_0\">If a program declared four variables, one of type int, one of type float, one of type char, and one of type bool, which variable would occupy the least space in memory?</p>\n</blockquote>\n<p>The real problem with the question your have posted lies in these words:</p>\n<p><code>occupy ... space in memory</code></p>\n<p>If an interpretation is to be assumed, then in most occasions you would assume one of the current popular compilers in which case answer <code>2</code> and <code>4</code> would both occupy the least space in memory. Simply because the current popular compilers make the <code>char</code> and <code>bool</code> occupy a single byte in memory...</p>\n<p>As outlined in the comments, <code>sizeof() is of type size_t</code>, <a href=\"http://www.cplusplus.com/reference/clibrary/cstring/size_t/\">which is integral</a>.</p>\n<p>As <code>sizeof(char) == 1</code> is always true as per the standard, and the value is integral; no other <code>sizeof(T)</code> can be lower than <code>1</code>. But any other <code>T</code> than <code>char</code> can be bigger than <code>1</code> dependening on the implementation. As you can't assume that <code>sizeof(char) == sizeof(bool)</code> always holds, you can at least assume that <code>sizeof(char) &lt;= sizeof(bool)</code> holds.</p>\n<p><strong>Which makes <code>sizeof(char)</code> being the least the most correct answer...</strong></p>\n", "LastActivityDate": "2012-03-05T10:26:46.863"}, "9562288": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-03-05T06:00:47.303", "Score": "1", "LastEditorUserId": "788824", "LastEditDate": "2012-03-05T07:42:30.633", "Id": "9562288", "OwnerUserId": "788824", "Body": "<p>There is no guarantee for the exact size of these types, but there is a guarantee, that char is not bigger than short, and short is not bigger than long.</p>\n<p>So, char will always occupy the least amount of memory, but it might not be the only one to do so. It's still guaranteed, that nothing else will have a smaller size.</p>\n<p>There might be an exception with bool, however, on some special embedded microcontrollers. They can have a <code>bit</code> variable, which takes exactly one bit, however, they are not in RAM but in special registers.</p>\n<p>However, unless your architecture and compiler are especially strange or unusual, you can reasonalbly expect that <code>char</code> is 1, <code>short</code> is 2, <code>long</code> is 4, <code>long long</code> is 8 and <code>int</code> is either 2 or 4, but usually 4 bytes long.</p>\n", "LastActivityDate": "2012-03-05T07:42:30.633"}, "9560052": {"ParentId": "9560029", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-03-04T23:55:15.540", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:28:26.750", "Id": "9560052", "OwnerUserId": "57135", "Body": "<p>sizeof(bool) is implementation-defined.</p>\n<p><a href=\"https://stackoverflow.com/questions/4897844/is-sizeofbool-implementation-defined-in-c\">Is sizeof(bool) defined?</a></p>\n<p>Namely, it is not <em>required</em> to only be a single byte.</p>\n", "LastActivityDate": "2012-03-04T23:55:15.540"}, "9560029": {"CommentCount": "13", "ViewCount": "4720", "PostTypeId": "1", "LastEditorUserId": "33732", "CreationDate": "2012-03-04T23:50:14.487", "LastActivityDate": "2012-03-06T23:46:44.300", "Title": "Of int, char, float, and bool, which is smallest?", "FavoriteCount": "5", "LastEditDate": "2012-03-05T03:08:59.583", "Id": "9560029", "Score": "26", "Body": "<p>The following is from a \"fill-in at home\" programming test that is part of the application process for an MSc in game development at a UK university:</p>\n<blockquote>\n<p id=\"so_9560029_9560029_0\">C++ Basics</p>\n<p id=\"so_9560029_9560029_1\">If a program declared four variables, one of type <code>int</code>, one of type\n  <code>float</code>, one of type <code>char</code>, and one of type <code>bool</code>, which variable\n  would occupy the <em>least</em> space in memory?</p>\n<ol>\n<li>int</li>\n<li>char</li>\n<li>float</li>\n<li>bool</li>\n</ol>\n</blockquote>\n<p>According to the instructions, there is only one true statement. However, my C++ book (C++ Pocket Reference, O'Reilly) states: \"The typical size of a bool is one byte,\" and \"The size of a char is one byte. The size of a byte technically is implementation defined, but it is rarely anything but eight bits.\"</p>\n<p>Am I misunderstanding something here? What answer would you put and why?</p>\n", "Tags": "<c++><types>", "OwnerUserId": "795016", "AnswerCount": "10"}});