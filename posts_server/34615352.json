post_cb({"34615561": {"Id": "34615561", "PostTypeId": "2", "Body": "<p>From the bug here: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55783\" rel=\"nofollow\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55783</a></p>\n<blockquote>\n<p id=\"so_34615352_34615561_0\">The standard only requires that \"a conforming implementation shall\n  issue at least one diagnostic message\" so compiling the program with a\n  warning is allowed.  As Andrew said, -Werror=narrowing allows you to\n  make it an error if you want.</p>\n</blockquote>\n", "LastActivityDate": "2016-01-05T15:41:02.527", "CommentCount": "0", "CreationDate": "2016-01-05T15:41:02.527", "ParentId": "34615352", "Score": "0", "OwnerUserId": "1043773"}, "34615489": {"Id": "34615489", "PostTypeId": "2", "Body": "<p>This does indeed give a warning using <code>g++ -std=c++11</code>, however not if you leave out the c++11 compiler flag (using g++ 4.9.2).</p>\n<p>Using <code>clang++ -std=c++14 -stdlib=libc++ -Wall -pedantic -Wdeprecated -Wextra</code> this does not compile, but gives a narrowing error instead of only a warning (using clang++ 3.6.0).</p>\n", "LastActivityDate": "2016-01-05T15:37:02.243", "CommentCount": "1", "CreationDate": "2016-01-05T15:37:02.243", "ParentId": "34615352", "Score": "2", "OwnerUserId": "5739278"}, "bq_ids": {"n4140": {"so_34615352_34615529_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 5776}, "so_34615352_34615529_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5770}}, "n3337": {"so_34615352_34615529_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 5549}, "so_34615352_34615529_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5543}}, "n4659": {"so_34615352_34615529_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 7233}, "so_34615352_34615529_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 7227}}}, "34615352": {"ViewCount": "98", "Body": "<p>From my understanding of uniform initialization, the following code should produce a narrowing error but it does not:</p>\n<pre><code>#include&lt;iostream&gt;\nint main() {\n    double d;\n    float f = {d}; // should produce a narrowing error\nreturn 0;\n\n}\n</code></pre>\n<p>I believe that this is an error because the compiler has to consider all possible values of d, in other words, the range of values that d can potentially hold is larger than what a float can hold.</p>\n<blockquote>\n<p id=\"so_34615352_34615352_0\">gcc version 4.9.3</p>\n</blockquote>\n", "AcceptedAnswerId": "34615489", "Title": "Uniform initialization in C++14 double assigned to float variable does not produce narrowing error", "CreationDate": "2016-01-05T15:30:06.940", "Id": "34615352", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-01-05T15:41:02.527", "Score": "2", "OwnerUserId": "3357481", "Tags": "<c++><initialization><c++14>", "AnswerCount": "4"}, "34615529": {"Id": "34615529", "PostTypeId": "2", "Body": "<p>The standard doesn't make a distinction between \"errors\" and \"warnings\". Your code is ill-formed, but the standard says this:</p>\n<blockquote>\n<p id=\"so_34615352_34615529_0\"><code>N4140 [intro.compliance]/2.2:</code> If a program contains a violation of any diagnosable rule or an occurrence of a construct described in\n  this Standard as \u201cconditionally-supported\u201dwhen the implementation does not support that construct,\n  a conforming implementation shall issue at least one diagnostic message.</p>\n<p id=\"so_34615352_34615529_1\"><code>[intro.compliance]/8:</code> A conforming implementation may have extensions (including additional library functions), provided they do\n  not alter the behavior of any well-formed program. Implementations are required to diagnose programs that\n  use such extensions that are ill-formed according to this International Standard. Having done so, however,\n  they can compile and execute such programs.</p>\n</blockquote>\n<p>GCC emits a diagnostic for the ill-formed code, so it's compliant in this respect. Note that it <em>will</em> issue an error if you pass <code>-pedantic-errors</code>.</p>\n", "LastActivityDate": "2016-01-05T15:39:20.203", "CommentCount": "0", "CreationDate": "2016-01-05T15:39:20.203", "ParentId": "34615352", "Score": "2", "OwnerUserId": "496161"}, "34615505": {"Id": "34615505", "PostTypeId": "2", "Body": "<p>A narrowing conversion is required to emit a diagnostic.  A warning or an error satisfies that.</p>\n<p>Running you code <a href=\"http://goo.gl/yUbwQ2\" rel=\"nofollow\">here</a> (gcc 4.9.2 which is the closet version I can link to) emits a warning</p>\n<pre><code>warning: narrowing conversion of 'd' from 'double' to 'float' inside { } [-Wnarrowing]\n</code></pre>\n<p>This satisfies the requirement imposed by the standard.</p>\n<p>If you really want an error you can always use <code>-Werror</code> or which will treat all warnings as errors or <code>-pedantic-errors</code> which will treat the narrowing conversion as an error.</p>\n", "LastActivityDate": "2016-01-05T15:37:43.623", "CommentCount": "0", "CreationDate": "2016-01-05T15:37:43.623", "ParentId": "34615352", "Score": "2", "OwnerUserId": "4342498"}});