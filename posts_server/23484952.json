post_cb({"23484952": {"ViewCount": "386", "Body": "<p><strong>NOTE</strong>: When I say <em>the regex <code>[\\0]</code></em> I mean the regex <code>[\\0]</code> (not contained in a C-style string, which would then be <code>\"[\\\\0]\"</code>). If I haven't put quotes around it, it's not a C-style string, and the backslashes shouldn't be interpreted as escaping a C-style string.</p>\n<p>Inspired by <a href=\"https://stackoverflow.com/questions/23483411/c11-regex-multiline-why-does-the-group-0-nsome-text-have-everything#comment36010658_23483411\">this question and my investigation</a>, I tried the following code in clang 3.4:</p>\n<pre><code>#include &lt;regex&gt;\n#include &lt;string&gt;\n\nint main()\n{\n    std::string input = \"foobar\";\n    std::regex regex(\"[^\\\\0]*\"); // Note, this is \"\\\\0\", not \"\\0\"!\n\n    return std::regex_match(input, regex);\n}\n</code></pre>\n<p>Apparently, clang doesn't like this, as it throws:</p>\n<blockquote>\n<p id=\"so_23484952_23484952_0\"><code>std::__1::regex_error</code>: The expression contained an invalid escaped character, or a trailing escape.</p>\n</blockquote>\n<p>It seems to be the <code>[^\\0]</code> part (changing it to <code>[^\\n]</code> or something similar works fine). It seems to be an invalid escape character. I want to clarify that I'm not talking about the <code>'\\0'</code> character (null-character) or <code>'\\n'</code> character (newline character). <strong>In C-style strings, what I'm talking about is <code>\"\\\\0\"</code></strong> (a string containing backslash zero) <strong>and <code>\"\\\\n\"</code></strong> (a string containing backslash n). <code>\"\\\\n\"</code> seems to get transformed into <code>\"\\n\"</code> by the regex engine, but it chokes on <code>\"\\\\0\"</code>.</p>\n<p>The C++11 standard says in section 28.13 [re.grammar] that:</p>\n<blockquote>\n<p id=\"so_23484952_23484952_1\">The regular expression grammar recognized by <code>basic_regex</code> objects constructed with the ECMAScript flag is that specified by ECMA-262, except as specified below.</p>\n</blockquote>\n<p>I'm no expert on ECMA-262, but <a href=\"http://jsfiddle.net/WJyfB/1/\" rel=\"nofollow noreferrer\">I tried the regular expression on JSFiddle</a> and it's working fine there in JavaScript land.</p>\n<p>So now I'm wondering if the regex <code>[^\\0]</code> is valid in ECMA-262 and the C++11 standard removed support for it (in the stuff following <code>... except as specified below.</code>).</p>\n<p><strong>Question</strong>: Is the <code>\\0</code> (not the null-character; in a string literal this would be <code>\"\\\\0\"</code>) escape sequence legal in a C++11 regular expression? Is it legal in ECMA-262 (or are browser JS VMs just being \"too\" lenient)? What's the cause/justification for the different behaviors?</p>\n", "AcceptedAnswerId": "23790300", "Title": "Is \\0 (\"\\\\0\" in a C-style regex string) a valid escape sequence in C++ regular expressions?", "CreationDate": "2014-05-06T02:19:26.033", "Id": "23484952", "CommentCount": "15", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:53:24.813", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-21T17:50:40.857", "Score": "8", "OwnerUserId": "1287251", "Tags": "<javascript><c++><regex><c++11><ecma262>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23484952_23484952_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5297}, "so_23484952_23484952_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5059}}, "n3337": {"so_23484952_23484952_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5094}, "so_23484952_23484952_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 4856}}, "n4659": {"so_23484952_23484952_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6721}, "so_23484952_23484952_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6480}}}, "23790300": {"Id": "23790300", "PostTypeId": "2", "Body": "<p>This was a bug in libc++'s implementation of <code>&lt;regex&gt;</code>. It should be fixed now in the trunk, and this should propagate to OS X's release code eventually.</p>\n<ul>\n<li><a href=\"http://llvm.org/bugs/show_bug.cgi?id=19678\" rel=\"nofollow\">Bug Report</a></li>\n<li><a href=\"http://llvm.org/viewvc/llvm-project?view=revision&amp;revision=209307\" rel=\"nofollow\">Patch</a></li>\n</ul>\n<p>Also, here is the excerpt from the ECMA 262 Standard that is the basis for this bug report:</p>\n<blockquote>\n<p id=\"so_23484952_23790300_0\">15.10.2.11 DecimalEscape</p>\n<p id=\"so_23484952_23790300_1\">The production <code>DecimalEscape :: DecimalIntegerLiteral [lookahead \u2209 DecimalDigit]</code> evaluates as follows:</p>\n<ol>\n<li>Let i be the MV of DecimalIntegerLiteral.</li>\n<li>If i is zero, return the EscapeValue consisting of a &lt;NUL&gt; character (Unicode value 0000).</li>\n<li>Return the EscapeValue consisting of the integer i.</li>\n</ol>\n<p id=\"so_23484952_23790300_2\">Note: ... \\0 represents the &lt;NUL&gt; character and cannot be followed by a decimal digit.</p>\n</blockquote>\n", "LastEditorUserId": "47453", "LastActivityDate": "2014-05-21T17:50:40.857", "Score": "2", "CreationDate": "2014-05-21T17:40:49.147", "ParentId": "23484952", "CommentCount": "0", "OwnerUserId": "47453", "LastEditDate": "2014-05-21T17:50:40.857"}});