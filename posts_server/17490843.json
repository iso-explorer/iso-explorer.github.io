post_cb({"17490934": {"ParentId": "17490843", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-07-05T14:12:24.223", "Score": "3", "LastEditorUserId": "701092", "LastEditDate": "2013-07-05T14:14:26.390", "Id": "17490934", "OwnerUserId": "2254782", "Body": "<p>There is no convertions made here, it is standard defined way of variable initialisation.</p>\n<blockquote>\n<h2>8.5.4 List-initialization [dcl.init.list]</h2>\n<p id=\"so_17490843_17490934_0\">1 List-initialization is initialization of an object or reference from a braced-init-list. Such an initializer is called an initializer list, and the comma-separated initializer-clauses of the list are called the elements of the initializer list. An initializer list may be empty. List-initialization can occur in direct-initialization or copy- initialization contexts; list-initialization in a direct-initialization context is called direct-list-initialization and list-initialization in a copy-initialization context is called copy-list-initialization.<br>\n  [Note: List-initialization can be used\n  \u2014 as the initializer in a variable definition (8.5)<br>\n  ...<br>\n  [ Example:\n  int a = {1};</br></br></br></p>\n</blockquote>\n", "LastActivityDate": "2013-07-05T14:14:26.390"}, "17490902": {"ParentId": "17490843", "CommentCount": "5", "CreationDate": "2013-07-05T14:10:04.930", "OwnerUserId": "1119701", "PostTypeId": "2", "Id": "17490902", "Score": "8", "Body": "<p>C allows it in:</p>\n<blockquote>\n<p id=\"so_17490843_17490902_0\">(C99, 6.7.8p11) \"The initializer for a scalar shall be a single expression, optionally enclosed in braces.\"</p>\n</blockquote>\n<p>C++ has a similar rule in C++11, 8.5.4p1</p>\n", "LastActivityDate": "2013-07-05T14:10:04.930"}, "17490843": {"CommentCount": "3", "AcceptedAnswerId": "17490902", "CreationDate": "2013-07-05T14:06:38.680", "LastActivityDate": "2013-07-05T14:14:26.390", "PostTypeId": "1", "ViewCount": "209", "FavoriteCount": "0", "Title": "Odd C/C++ initialization syntax for integral type variable", "Id": "17490843", "Score": "5", "Body": "<p>The following snippet compiles perfectly with C/C++ compiler:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int x = {5};         //&lt;-- why this compiles?\n    printf(\"x = %d\",x);\n    return 0;\n}\n</code></pre>\n<p>The output is <code>5</code>.\n<code>x</code> is initialized here in a compound-type form although it's of integral type. I would like to understand what conversions are made here and why.</p>\n", "Tags": "<c++><c><compilation>", "OwnerUserId": "1756636", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17490843_17490934_0": {"section_id": 3323, "quality": 0.8478260869565217, "length": 39}}, "n3337": {"so_17490843_17490934_0": {"section_id": 3193, "quality": 0.8478260869565217, "length": 39}}, "n4659": {"so_17490843_17490934_0": {"section_id": 4089, "quality": 0.782608695652174, "length": 36}}}});