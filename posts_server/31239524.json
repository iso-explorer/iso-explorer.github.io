post_cb({"31239580": {"ParentId": "31239524", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-06T07:04:46.400", "Score": "1", "LastEditorUserId": "2659313", "LastEditDate": "2015-07-06T07:52:19.217", "Id": "31239580", "OwnerUserId": "2659313", "Body": "<p>From C11 specs <strong>6.4.4.4 Character constants</strong></p>\n<blockquote>\n<p id=\"so_31239524_31239580_0\">hexadecimal-escape-sequence:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\x\n  hexadecimal-digit<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hexadecimal-escape-sequence\n  hexadecimal-digit</br></br></p>\n</blockquote>\n<p></p>\n<blockquote>\n<p id=\"so_31239524_31239580_1\">EXAMPLE 3 Even if eight bits are used for objects that have type char,\n  the construction '\\x123' specifies an integer character constant\n  containing only one character, since a hexadecimal escape sequence is\n  terminated only by a non-hexadecimal character. <strong>To specify an integer\n  character constant containing the two characters whose values are\n  '\\x12' and '3', the construction '\\0223' may be used, since an octal\n  escape sequence is terminated after three octal digits.</strong> (The value of\n  this two-character integer character constant is\n  implementation-defined.)</p>\n</blockquote>\n<p>So parser will try to parse as many characters of hexadecimal as available.</p>\n<p>One workaround is to use string concatenation:</p>\n<pre><code>printf(\"10\\xF8\" \"Celsius\");\n</code></pre>\n<p><a href=\"http://ideone.com/mWp4ig\" rel=\"nofollow\">Live example</a></p>\n<p>or</p>\n<pre><code>printf(\"10%cCelsius\", '\\xF8');\n</code></pre>\n<p>Or use equivalent octal escape sequence which is guaranteed to be not more than 3 characters long.</p>\n<hr>\n<p><strong>NOTE:</strong> Using <code>'\\xF8'</code> to print is not portable and may not work on many platforms. You can use unicode string literal for a portable code. </p>\n</hr>", "LastActivityDate": "2015-07-06T07:52:19.217"}, "31239648": {"ParentId": "31239524", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-06T07:08:56.520", "Score": "1", "LastEditorUserId": "2877241", "LastEditDate": "2015-07-06T07:20:54.387", "Id": "31239648", "OwnerUserId": "2877241", "Body": "<p>You can use an octal escape sequence instead of the hexadecimal escape sequecne. For example</p>\n<pre><code>printf(\"10\\370Celsius\");\n</code></pre>\n<p>From the C++ Standard (2.14.3 Character literals)</p>\n<blockquote>\n<p id=\"so_31239524_31239648_0\">4 The escape \\ooo consists of the backslash followed by one, two, or\n  three octal digits that are taken to specify the value of the desired\n  character....</p>\n</blockquote>\n", "LastActivityDate": "2015-07-06T07:20:54.387"}, "31239688": {"ParentId": "31239524", "CommentCount": "0", "CreationDate": "2015-07-06T07:10:52.413", "OwnerUserId": "4591102", "PostTypeId": "2", "Id": "31239688", "Score": "2", "Body": "<p>The correct fix is to use the printf function as intended. Please look up printf-documentation.</p>\n<pre><code>printf(\"10%c Celsius\", 0xF8)\n</code></pre>\n", "LastActivityDate": "2015-07-06T07:10:52.413"}, "31239524": {"CommentCount": "3", "ViewCount": "144", "CreationDate": "2015-07-06T07:01:24.793", "LastActivityDate": "2015-07-06T09:28:37.900", "Title": "Tell where escaped hexadecimal ends in a string", "AcceptedAnswerId": "31239679", "PostTypeId": "1", "Id": "31239524", "Score": "3", "Body": "<p>I want to print 10\u00b0Celsius with <code>printf</code>function</p>\n<p>Normally I would do it like this:</p>\n<pre><code>printf(\"10\\xF8Celsius\");\n</code></pre>\n<p>where \\xF8 is the ANSI code for degree sign. The problem is that the compiler take all hexadecimal characters after \\x and tries to convert to a character, basically it takes <code>\\F8Ce</code> and tries to convert it to a character.</p>\n<p>I could write it like: </p>\n<pre><code>printf(\"10\\xF8 Celsius\"); //see additional space\n</code></pre>\n<p>but the question still remains. </p>\n<p>How to tell compiler where my hexadecimal code ends? Is it possible?</p>\n<p>Note: I used Visual Studio 2015 PRE on a Windows 8.1 to observe this problem (not that this problem is platform specific but just to mention it)</p>\n", "Tags": "<c++><c><windows>", "OwnerUserId": "1087370", "AnswerCount": "5"}, "31239679": {"ParentId": "31239524", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-06T07:10:29.563", "Score": "2", "LastEditorUserId": "440558", "LastEditDate": "2015-07-06T08:04:54.390", "Id": "31239679", "OwnerUserId": "440558", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/language/escape\" rel=\"nofollow\">this C++ escape sequence reference</a>:</p>\n<blockquote>\n<p id=\"so_31239524_31239679_0\">Hexadecimal escape sequences have no length limit and terminate at the first character that is not a valid hexadecimal digit.</p>\n</blockquote>\n<p>So without any workarounds there is simply no limit on the digits the compiler will read.</p>\n<p><sub>Note that the <a href=\"http://en.cppreference.com/w/c/language/escape\" rel=\"nofollow\">corresponding C reference</a> says the same thing.</sub></p>\n", "LastActivityDate": "2015-07-06T08:04:54.390"}, "bq_ids": {"n4140": {"so_31239524_31239648_0": {"section_id": 5346, "quality": 0.875, "length": 14}}, "n3337": {"so_31239524_31239648_0": {"section_id": 5143, "quality": 0.875, "length": 14}}, "n4659": {"so_31239524_31239648_0": {"section_id": 6771, "quality": 0.875, "length": 14}}}, "31239836": {"ParentId": "31239524", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-07-06T07:18:44.183", "Score": "3", "LastEditorUserId": "488700", "LastEditDate": "2015-07-06T09:28:37.900", "Id": "31239836", "OwnerUserId": "488700", "Body": "<p>Hex escape sequence has no character limit so - since parser is greedy - it grabs all hex digits it can get. C spec excerpt:</p>\n<pre><code>hexadecimal-escape-sequence:\n    \\x hexadecimal-digit\n    hexadecimal-escape-sequence hexadecimal-digit\n\nhexadecimal-digit: one of\n    0 1 2 3 4 5 6 7 8 9\n    a b c d e f\n    A B C D E F\n</code></pre>\n<p>To remedy that - split your string into 2 consecutive and they will be later joined (in translation phase #6 ;-). So instead of:</p>\n<pre><code>printf(\"10\\xF8Celsius\");\n</code></pre>\n<p>use:</p>\n<pre><code>printf(\"10\\xF8\" \"Celsius\");\n</code></pre>\n", "LastActivityDate": "2015-07-06T09:28:37.900"}});