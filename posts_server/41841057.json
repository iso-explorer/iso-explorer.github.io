post_cb({"bq_ids": {"n4140": {"so_41841057_41841115_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_41841057_41841115_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_41841057_41841115_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "41841858": {"Id": "41841858", "PostTypeId": "2", "Body": "<pre><code>vector&lt;int&gt; initVector(){\n    vector&lt;int&gt; ret;\n    ret.clear();\n    for(int i = 0 ; i &lt; 10 ; ++i){\n        ret.push_back(i);\n    }\n\n    return ret;\n\n}\n\nint uniqueRendom(){\n    static vector&lt;int&gt; randomNumbers = initVector();\n\n    int randomSize = randomNumbers.size() - 1;\n\n    if(randomSize &lt;= 0){\n        return -1;\n    }\n\n    double randomeNum = (double)rand() / INT_MAX;\n\n    int randomIndex = (int) (randomeNum  * randomSize + 0.5) ;\n\n    int returnValue = randomNumbers[randomIndex];\n    randomNumbers.erase(randomNumbers.begin() + randomIndex);\n\n    return returnValue;\n}    \n</code></pre>\n<p>include limits.h for INT_MAX.</p>\n", "LastActivityDate": "2017-01-25T01:17:17.773", "CommentCount": "0", "CreationDate": "2017-01-25T01:17:17.773", "ParentId": "41841057", "Score": "0", "OwnerUserId": "5919568"}, "41841115": {"Id": "41841115", "PostTypeId": "2", "Body": "<p>Your function doesn't appear to return a value if <code>usedRandoms.size()</code> is zero, which it will be the first time you call the function</p>\n<pre><code>int uniqueRandomInt(int x) {\n\n    std::vector&lt;int&gt; usedRandoms; // vector.size() = 0\n    int random = x;\n\n    // for loop won't be entered\n    for (unsigned int i = 0; i &lt; usedRandoms.size(); i++)\n    {\n    }\n\n    // function doesn't return a value\n}\n</code></pre>\n<p>It's worth noting that it's undefined behaviour to declare a function to return a value, and then not return a value. That's why the <em>random</em> values you're getting.</p>\n<p>From the C++ standard, 6.6.3 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_41841057_41841115_0\">Flowing off the end of a function is equivalent to a return with no value; this <strong>results in undefined behavior in a <em>value-returning function</em></strong>.</p>\n</blockquote>\n", "LastActivityDate": "2017-01-24T23:59:00.533", "CommentCount": "1", "CreationDate": "2017-01-24T23:59:00.533", "ParentId": "41841057", "Score": "0", "OwnerUserId": "4143855"}, "41841513": {"Id": "41841513", "PostTypeId": "2", "Body": "<p>I prefer to use shuffle.</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;random&gt;\n#include &lt;vector&gt;\n#include &lt;cassert&gt;\n\nclass T455_t\n{\nprivate:\n   // data\n   std::vector&lt;int&gt; m_iVec ;\n\npublic:\n   T455_t() {}\n\n   int exec()\n      {\n         std::vector&lt;int&gt; iVec;\n\n         gen10();\n\n         for (int i=0; i&lt;10; ++i)\n         {\n            int nxtRandom = uniqueRandomInt();\n            std::cout &lt;&lt; nxtRandom &lt;&lt; std::endl;\n         }\n         return(0);\n      }\n\n\nprivate: // methods\n\n   void gen10() // fills data attribute with 10 digits\n      {\n         for (int i=0; i&lt;=9; ++i)\n            m_iVec.push_back(i);\n\n         std::random_device rd;\n         std::mt19937_64 gen(rd());\n         std::shuffle (m_iVec.begin(), m_iVec.end(), gen);\n         // m_iVec now contains 10 unique numbers, \n         // range 0..9, in random order\n      }\n\n   int uniqueRandomInt()\n      {\n         assert(m_iVec.size());\n         int retVal = m_iVec.back(); // gets last element in vector\n         m_iVec.pop_back();          // removes last element\n         return(retVal);\n      }\n\n}; // class T455_t\n\n\nint main(int argc, char* argv[])\n{\n   setlocale(LC_ALL, \"\");\n   std::ios::sync_with_stdio(false);\n\n   std::chrono::high_resolution_clock::time_point  m_start_us =\n      std::chrono::high_resolution_clock::now();\n\n   int retVal = -1;\n   {\n      T455_t   t455;\n      retVal = t455.exec();\n   }\n\n   std::chrono::microseconds  chrono_duration_us =\n      std::chrono::duration_cast &lt;std::chrono::microseconds&gt;\n      (std::chrono::high_resolution_clock::now() - m_start_us);\n\n   std::cout &lt;&lt; \"  FINI   \" &lt;&lt; chrono_duration_us.count() \n             &lt;&lt; \" us\" &lt;&lt; std::endl;\n   return(retVal);\n}\n</code></pre>\n", "LastEditorUserId": "2785528", "LastActivityDate": "2017-01-25T00:57:29.827", "Score": "1", "CreationDate": "2017-01-25T00:39:24.610", "ParentId": "41841057", "CommentCount": "2", "OwnerUserId": "2785528", "LastEditDate": "2017-01-25T00:57:29.827"}, "41841057": {"ViewCount": "88", "Body": "<p>I am trying to generate a unique random number between 0 and 9. The same number cannot be generated twice and the function will be ran 9 time (until all the 9 numbers are used.) Here is the latest way I have been trying to do this:</p>\n<pre><code>int uniqueRandomInt(int x) {\n\n    std::vector&lt;int&gt; usedRandoms;\n    int random = x;\n\n    //Iterate vector\n    for (unsigned int i = 0; i &lt; usedRandoms.size(); i++) {\n        //if passed value is in vector\n        if (random = usedRandoms[i]) {\n            uniqueRandomInt(random);\n        }\n        else {\n            //If unique rand found put into vector\n            usedRandoms.push_back(random);\n            return random;\n        }\n    }\n}\n</code></pre>\n<p>Calling it in another function using:</p>\n<pre><code>cout &lt;&lt; uniqueRandomInt(-1) &lt;&lt; endl;\n</code></pre>\n<p>Result I am getting is:</p>\n<pre><code>17801152 (Changes every time the function is called)\n</code></pre>\n<p>Am I going about this totally wrong? I did try other ways but with no luck and this is where I'm currently at. Thanks in advance.</p>\n", "AcceptedAnswerId": "41841513", "Title": "Unique Random Number between 0 and 9", "CreationDate": "2017-01-24T23:52:44.597", "Id": "41841057", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2017-01-25T01:17:17.773", "Score": "-2", "OwnerUserId": "7033405", "Tags": "<c++><random>", "AnswerCount": "3"}});