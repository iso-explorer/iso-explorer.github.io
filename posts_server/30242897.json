post_cb({"30242897": {"ViewCount": "264", "Body": "<p>The following code is from <a href=\"http://www.pvv.org/~oma/PubQuiz_ACCU_Apr2014.pdf\">http://www.pvv.org/~oma/PubQuiz_ACCU_Apr2014.pdf</a> (#6, solution on page 34). The goal was to guess the output for the following.</p>\n<pre><code>#include &lt;iostream&gt;\ntemplate &lt;template &lt;typename&gt; class&gt;\nstruct X {\n    X() { std::cout &lt;&lt; \"1\"; }\n};\n\ntemplate&lt;typename &gt;\nstruct Y {};\n\ntemplate&lt;typename T&gt;\nusing Z = Y&lt;T&gt;;\n\ntemplate&lt;&gt;\nstruct X&lt;Y&gt; {\n    X() { std::cout &lt;&lt; \"2\"; }\n};\n\nint main() {\n    X&lt;Y&gt; x1;\n    X&lt;Z&gt; x2;\n}\n</code></pre>\n<p>The answer can be found on page 34. I don\u2019t understand the second case with the alias template, why the primary template is chosen for <code>X&lt;Z&gt;</code> instead of the fully specialized. </p>\n<p>The correct answer should be \"21\" as written in the presentaton. My MinGW (gcc 5.1) prints \"22\" and <a href=\"http://ideone.com\">http://ideone.com</a> (which uses gcc 4.9.2) also prints \"22\". Clang from a friend on MacOS X prints \"21\". So I guess this is a bug in gcc.</p>\n<p>Can anyone explain to me why \"1\" is printed for the <code>X&lt;Z&gt;</code> and what paragraph from the standard gcc might failed to implement or not yet implemented?</p>\n", "AcceptedAnswerId": "30243528", "Title": "Explanation behind C++ Quiz by Olve Maudal (alias template)", "CreationDate": "2015-05-14T16:52:06.210", "Id": "30242897", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-05-14T16:58:02.027", "LastEditorUserId": "4040068", "LastActivityDate": "2015-05-14T17:38:11.607", "Score": "8", "OwnerUserId": "4040068", "Tags": "<c++><templates><gcc><clang><alias>", "AnswerCount": "1"}, "30243528": {"Id": "30243528", "PostTypeId": "2", "Body": "<p>I think it is</p>\n<blockquote>\n<h3>14.5.7 Alias templates</h3>\n<p id=\"so_30242897_30243528_0\"><sup>1</sup> A <em>template-declaration</em> in which the <em>declaration</em> is an <em>alias-declaration</em> (Clause 7) declares the <em>identifier</em> to be a <em>alias template</em>. An alias template is a name for a family of types. The name of the alias template is a <em>template-name</em>.</p>\n</blockquote>\n<p>The above means that <code>Y</code> and <code>Z</code> are different <em>template-name</em>s, so they are different templates. What might confuse you/the compiler is that <code>Y&lt;T&gt;</code> and <code>Z&lt;T&gt;</code> will always yield an identical type.</p>\n<p>Consider:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename&gt;\nstruct W {};\n\ntemplate &lt;template &lt;typename&gt; class&gt;\nstruct X {};\n\ntemplate&lt;typename&gt;\nstruct Y {};\n\ntemplate&lt;typename T&gt;\nusing Z = Y&lt;T&gt;;\n\nint main()\n{\n    static_assert( std::is_same&lt; Y&lt;int&gt;, Z&lt;int&gt; &gt;::value, \"Oops\" );\n    static_assert( std::is_same&lt; W&lt;Y&lt;int&gt;&gt;, W&lt;Z&lt;int&gt;&gt; &gt;::value, \"Oops\" );\n    static_assert( ! std::is_same&lt; X&lt;Y&gt;, X&lt;Z&gt; &gt;::value, \"Oops\" );\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1573d505e5c831de\" rel=\"nofollow\"><strong>Live example</strong></a></p>\n<p>The above works for Clang, but not for GCC.</p>\n<p>EDIT: As pointed out by @T.C. there is an active <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1286\" rel=\"nofollow\">CWG issue 1286</a> which suggests that Clang is doing what the standard currently says, but not what was intended.</p>\n", "LastEditorUserId": "2073257", "LastActivityDate": "2015-05-14T17:38:11.607", "Score": "4", "CreationDate": "2015-05-14T17:24:49.137", "ParentId": "30242897", "CommentCount": "1", "OwnerUserId": "2073257", "LastEditDate": "2015-05-14T17:38:11.607"}, "bq_ids": {"n4140": {"so_30242897_30243528_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 165}}, "n3337": {"so_30242897_30243528_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 159}}, "n4659": {"so_30242897_30243528_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 169}}}});