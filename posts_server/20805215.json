post_cb({"20805215": {"ViewCount": "480", "Body": "<p>Why  cant a union class have a member object that has overloaded equals operator? The restriction is on the  member object of the union class not the object of the union class! </p>\n", "Title": "a union class with a member (object) that has overloaded equals operator", "CreationDate": "2013-12-27T17:39:52.363", "LastActivityDate": "2013-12-27T19:59:59.937", "CommentCount": "4", "LastEditDate": "2013-12-27T19:59:59.937", "PostTypeId": "1", "LastEditorUserId": "3140137", "Id": "20805215", "Score": "-3", "OwnerUserId": "3140137", "Tags": "<c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_20805215_20806004_2": {"length": 28, "quality": 0.7, "section_id": 5914}}, "n3337": {"so_20805215_20806004_2": {"length": 28, "quality": 0.7, "section_id": 5686}}, "n4659": {"so_20805215_20806004_2": {"length": 28, "quality": 0.7, "section_id": 7406}}}, "20806004": {"Id": "20806004", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_20805215_20806004_0\">why can't we overload \"equals\" operator in a union class? </p>\n</blockquote>\n<p><strong>We can.</strong></p>\n<p>It's not prohibited, and it works just fine. For example:</p>\n<pre><code>#include &lt;cassert&gt;\n\nunion T\n{\n    int x;\n    int y;\n\n    T&amp; operator=(const T&amp; other)\n    {\n        x = other.x;\n        return *this;\n    }\n\n    bool operator==(const T&amp; other)\n    {\n        return x == other.x;\n    }\n};\n\nint main()\n{\n    T a{5};\n    T b{6};\n\n    a = b;\n    assert(a == b);\n}\n</code></pre>\n<h2><a href=\"http://coliru.stacked-crooked.com/a/30bd53442d84e5e1\" rel=\"nofollow\">Live demo</a></h2>\n<hr>\n<blockquote>\n<p id=\"so_20805215_20806004_1\">Union class in c++ has some restriction compared to the normal class. one of the restriction is the overloading = operator.</p>\n</blockquote>\n<p>This is simply not true.</p>\n<p>However, if one of the <em>members</em> has a user-defined <code>operator=</code>, then the union itself must have one too:</p>\n<blockquote>\n<p id=\"so_20805215_20806004_2\"><code>[C++11: 9.5/2]:</code> <em>[..] [ Note:</em> <strong>If any non-static data member of a union has a non-trivial</strong> default constructor (12.1), copy constructor (12.8), move constructor (12.8), <strong>copy assignment operator</strong> (12.8), move assignment operator (12.8), or destructor (12.4), <strong>the corresponding member function of the union must be user-provided or it will be implicitly deleted</strong> (8.4.3) for the union. <em>\u2014end note ] [..]</em></p>\n</blockquote>\n</hr>", "LastEditorUserId": "560648", "LastActivityDate": "2013-12-27T19:54:15.433", "Score": "0", "CreationDate": "2013-12-27T18:39:35.107", "ParentId": "20805215", "CommentCount": "2", "LastEditDate": "2013-12-27T19:54:15.433", "OwnerUserId": "560648"}});