post_cb({"bq_ids": {"n4140": {"so_18556714_18556784_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5510}}, "n3337": {"so_18556714_18556784_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5296}}, "n4659": {"so_18556714_18556784_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6945}}}, "18556714": {"ViewCount": "488", "Body": "<p>I have stumbled upon an unusual to me usage of <code>using namespace</code> directive:</p>\n<p>Given a header file <code>WeirdNamespace.h</code>:</p>\n<pre><code>namespace WeirdNamespace\n{\n\nclass WeirdClass\n{\npublic:\n    int x;\n\n    void go();\n};\n\n}\n</code></pre>\n<p>I have a matching 'WeirdNamespace.cpp`:</p>\n<pre><code>#include \"WeirdNamespace.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace WeirdNamespace;\n\nvoid WeirdClass::go()\n{\n    std::cout &lt;&lt; \"Reached go?!\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The class is used as follows:</p>\n<pre><code>#include \"WeirdNamespace.h\"\n\nint main(int argc, const char * argv[])\n{   \n    WeirdNamespace::WeirdClass c;\n    c.go();\n}\n</code></pre>\n<p>Until now I have never seen the using directive used to avoid reopening the namespace in the cpp file or prefixing method names with the namespace name. Is it a correct usage of the directive? Are there any pitfalls specific to this scenario, except for the usual <code>using namespace</code> caveats?</p>\n", "AcceptedAnswerId": "18556784", "Title": "Using \"using\" directive to shorten function definition", "CreationDate": "2013-09-01T08:44:12.380", "Id": "18556714", "CommentCount": "4", "LastEditDate": "2013-09-01T09:10:23.397", "PostTypeId": "1", "LastEditorUserId": "102834", "LastActivityDate": "2013-09-01T09:39:07.560", "Score": "3", "OwnerUserId": "102834", "Tags": "<c++><namespaces>", "AnswerCount": "2"}, "18556784": {"Id": "18556784", "PostTypeId": "2", "Body": "<p>You might do:</p>\n<pre><code>namespace WN = WeirdNamespace;\nWN::WeirdClass c;\n</code></pre>\n<p><strong>Now, I got the question! The above is no answer</strong>.</p>\n<p>Quoting from [7.3.4] Using directive</p>\n<blockquote>\n<p id=\"so_18556714_18556784_0\">\"During unqualified name lookup (3.4.1), the names appear as if they\n  were declared in the nearest enclosing namespace which contains both\n  the using-directive and the nominated namespace.\"</p>\n</blockquote>\n<p>Hence your definition in the source without enclosing it in the namespace is fine.</p>\n", "LastEditorUserId": "2249683", "LastActivityDate": "2013-09-01T09:20:44.427", "Score": "2", "CreationDate": "2013-09-01T08:51:46.987", "ParentId": "18556714", "CommentCount": "0", "OwnerUserId": "2249683", "LastEditDate": "2013-09-01T09:20:44.427"}, "18556882": {"Id": "18556882", "PostTypeId": "2", "Body": "<p>Yes it is valid but there is a pitfall:</p>\n<p><code>using namespace NamespaceName</code> will make available all the names in <code>NamespaceName</code>.</p>\n<p>So instead you can use <code>using</code> to use only the class name:</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"WeirdNamespace.h\"\n\nusing WeiredNamespace::WeiredClass;\n\nvoid WeiredClass::go() {\n    // ...\n}\n</code></pre>\n", "LastEditorUserId": "1709658", "LastActivityDate": "2013-09-01T09:39:07.560", "Score": "0", "CreationDate": "2013-09-01T09:04:27.023", "ParentId": "18556714", "CommentCount": "3", "OwnerUserId": "1709658", "LastEditDate": "2013-09-01T09:39:07.560"}});