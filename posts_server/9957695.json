post_cb({"9957704": {"Id": "9957704", "PostTypeId": "2", "Body": "<p><strong>Copy elision</strong> is allowed by the standard and it is the single optimization that is not required to follow the <strong>As-If rule</strong><sup>[#1]</sup>, So you should not rely on the behavior.   </p>\n<p>You might use some compiler settings like in case of gcc, from the <strong><a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/C_002b_002b-Dialect-Options.html\" rel=\"nofollow\">man page</a></strong>:</p>\n<p><code>-fno-elide-constructor</code></p>\n<blockquote>\n<p id=\"so_9957695_9957704_0\">The C++ standard allows an implementation to omit creating a temporary which is only used to initialize another object of the same type.  Specifying this option disables that optimization, and \n  forces G++ to call the copy constructor in all cases.</p>\n</blockquote>\n<p>However, using this makes your code non portable across different compilers.</p>\n<hr>\n<p><sup>[#1]</sup> <strong>C++03 1.9 \"Program execution:</strong> </p>\n<blockquote>\n<p id=\"so_9957695_9957704_1\">conforming implementations are required to emulate (only) the observable behavior of the abstract machine.</p>\n</blockquote>\n<p>The footnote further describes it in detail.</p>\n<blockquote>\n<p id=\"so_9957695_9957704_2\">This provision is sometimes called the \u201cas-if\u201d rule, because an implementation is free to disregard any requirement of this International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "452307", "LastActivityDate": "2012-03-31T16:48:25.313", "Score": "5", "CreationDate": "2012-03-31T16:34:48.923", "ParentId": "9957695", "CommentCount": "4", "OwnerUserId": "452307", "LastEditDate": "2012-03-31T16:48:25.313"}, "bq_ids": {"n4140": {"so_9957695_9957704_2": {"length": 39, "quality": 0.9285714285714286, "section_id": 5797}, "so_9957695_9957704_1": {"length": 8, "quality": 1.0, "section_id": 5797}}, "n3337": {"so_9957695_9957704_2": {"length": 39, "quality": 0.9285714285714286, "section_id": 5570}, "so_9957695_9957704_1": {"length": 8, "quality": 1.0, "section_id": 5570}}, "n4659": {"so_9957695_9957704_2": {"length": 39, "quality": 0.9285714285714286, "section_id": 7256}, "so_9957695_9957704_1": {"length": 8, "quality": 1.0, "section_id": 7256}}}, "9957695": {"ViewCount": "154", "Body": "<p>Suppose I have this hypothetical, odd and unintuitive situation</p>\n<pre><code>    #include &lt;iostream&gt;\n\n    struct A\n    {\n      A()\n      {\n        member = 1;\n      }\n\n      A(const A &amp;)\n      {\n        member = 2;\n      }\n\n      int member;\n    };\n\n    int main()\n    {\n      A a = A();\n      A b = a;\n      std::cout &lt;&lt; a.member &lt;&lt; std::endl;\n      std::cout &lt;&lt; b.member &lt;&lt; std::endl;\n      return 0;\n    }\n</code></pre>\n<p>I know that copy elision means that <code>a</code> will be initialized with just the default constructor and that b will be initialized with the copy constructor.  I also know that (on gcc at least) you can tell the compiler not to do any copy elision.</p>\n<p>My question is there some way of having the compiler not use copy elision <em>just for this class</em>?</p>\n<p>I realize that the answer in any real situation will be to find some other way 99.9% of the time, and I don't have one of those 0.01% cases (this is an actual hypothetical question, not a \"hypothetical question\")</p>\n", "AcceptedAnswerId": "9957704", "Title": "copy elision causes different results", "CreationDate": "2012-03-31T16:32:47.057", "Id": "9957695", "CommentCount": "0", "LastEditDate": "2013-08-06T18:45:59.907", "PostTypeId": "1", "LastEditorUserId": "1277769", "LastActivityDate": "2013-08-06T18:45:59.907", "Score": "2", "OwnerUserId": "1277769", "Tags": "<c++><copy-elision>", "AnswerCount": "2"}, "9957718": {"Id": "9957718", "PostTypeId": "2", "Body": "<p>RVO/NRVO is explicitly allowed by the Standard and generally a Good Thing\u2122, and there are pretty much no good designs that are broken by it, so there's no reason for any compiler writer to implement such options.</p>\n<p>I don't know of any compiler that allows you to turn it off on a case-by-case basis.</p>\n", "LastActivityDate": "2012-03-31T16:35:55.870", "CommentCount": "0", "CreationDate": "2012-03-31T16:35:55.870", "ParentId": "9957695", "Score": "3", "OwnerUserId": "298661"}});