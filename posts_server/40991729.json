post_cb({"40992205": {"ParentId": "40991729", "PostTypeId": "2", "CommentCount": "1", "Body": "<h2>Layout:</h2>\n<p>As said in the text you quoted, the layout depends on both the order of declaration and the access control. All members with the same access control are allocated such that later declared members have a higher within the object. Order of members with different access control is unspecified. Note that this allows for all members to be laid out according to declaration order.</p>\n<blockquote>\n<p id=\"so_40991729_40992205_0\">Nonstatic data members of a (non-union) class with the same access\n  control (Clause 11) are allocated so that later members have higher\n  addresses within a class object. The order of allocation of non-static\n  data members with different access control is unspecified (Clause 11).</p>\n<p id=\"so_40991729_40992205_1\"><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4296</a> \u00a79.2/13</p>\n</blockquote>\n<p>.</p>\n<h2>Initialization</h2>\n<p>Initialisation occurs in order of member delcaration, the order of the member initialisers (what's after the <code>:</code> of the constructor) does not matter:</p>\n<blockquote>\n<p id=\"so_40991729_40992205_2\">Then, non-static data members are initialized in the order they were\n  declared in the class definition (again regardless of the order of the\n  mem-initializers).</p>\n<p id=\"so_40991729_40992205_3\"><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4296</a> \u00a712.6.2/13.3</p>\n</blockquote>\n<p>Access control does not matter.</p>\n<h2>Empirical verification</h2>\n<pre><code>#include &lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\nstruct A\n{\n    A()\n    {\n        cout &lt;&lt; \"A\" &lt;&lt; endl;\n    }\n};\n\nstruct B\n{\n    B()\n    {\n        cout &lt;&lt; \"B\" &lt;&lt; endl;\n    }\n};\n\nstruct X\n{\n    A a;\n    B b;\n    X() : b(), a() {}\n};\n\nint main() {\n    X x;\n    cout &lt;&lt; \"a @ \" &lt;&lt; &amp;(x.a) &lt;&lt; endl;\n    cout &lt;&lt; \"b @ \" &lt;&lt; &amp;(x.b) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>will output (<a href=\"http://ideone.com/Y5ibG1\" rel=\"nofollow noreferrer\">live on ideone</a>)</p>\n<pre><code>A\nB\nsome_address\nsome_address + 1\n</code></pre>\n<hr>\n<h2>Addressing your edit:</h2>\n<pre><code>class Foo\n{\npublic:\n     Foo(): a_(1), b_(2) {}\npublic:\n     int a_;\nprivate:\n     int b_;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_40991729_40992205_4\">As I understand, I cannot be sure that a_ is initialized before b_ is initialized.</p>\n</blockquote>\n<p>Yes, you can be sure that <code>a_</code> is initialized before <code>b_</code>. This is guaranteed by the standard.</p>\n<blockquote>\n<p id=\"so_40991729_40992205_5\">But in the quoute above is said, that the order of declaration of a_ (as public) and b_ (as private) is unspecified.</p>\n</blockquote>\n<p>The quote says that the (relative) layout in memory of <code>a_</code> and <code>b_</code> is unspecified. This has nothing to do with the order of initialization.</p>\n</hr>", "OwnerUserId": "1116364", "LastEditorUserId": "1116364", "LastEditDate": "2016-12-06T10:10:52.833", "Id": "40992205", "Score": "1", "CreationDate": "2016-12-06T09:43:20.627", "LastActivityDate": "2016-12-06T10:10:52.833"}, "40991729": {"CommentCount": "5", "ViewCount": "51", "PostTypeId": "1", "LastEditorUserId": "2091997", "CreationDate": "2016-12-06T09:19:04.457", "LastActivityDate": "2016-12-06T10:10:52.833", "Title": "Non-struct objects layout", "AcceptedAnswerId": "40992205", "LastEditDate": "2016-12-06T10:06:28.527", "Id": "40991729", "Score": "0", "Body": "<p>I've been reading Lippman's \"Inside the C++ Object Model\" I encountered the following thing: </p>\n<blockquote>\n<p id=\"so_40991729_40991729_0\">The data members within a single access section are guaranteed within C++ to be laid out in the order of their declaration. The layout of data contained in multiple access sections, however, is left undefined.</p>\n</blockquote>\n<p>Does it mean the comment in the code below is correct?</p>\n<pre><code>class Foo\n{\npublic:\n     Foo(): a_(1), b_(2), c_(3)\n     {\n          // it does not matter that the order of a_, b_, c_ is the same in class definition and in initialization list, we do not know which one will be initialized first?\n     }\n\npublic:\n     int a_;\n\nprivate:\n     int b_;\n\nprotected:\n     int c_;\n};\n</code></pre>\n<p>If it's true, so what about several private sections containing groups of members?</p>\n<pre><code>class Foo\n{\npublic:\n     Foo(): a_(1), b_(2)\n     {\n          // is initialization order guaranteed?\n     }\n\nprivate:\n     int a_;\n\nprivate:\n     int b_;\n};\n</code></pre>\n<p>In addition, maybe I can read anything about it in the standard?</p>\n<p><strong>UPD</strong></p>\n<p>When I have:</p>\n<pre><code>class Foo\n{\npublic:\n     Foo(): a_(1), b_(2) {}\nprivate:\n     int a_;\n     int b_;\n};\n</code></pre>\n<p>I'm sure everything is OK: a_ is initialized before b_ is initialized.</p>\n<p>When I have:</p>\n<pre><code>class Foo\n{\npublic:\n     Foo(): a_(1), b_(2) {}\npublic:\n     int a_;\nprivate:\n     int b_;\n};\n</code></pre>\n<p>As I understand, I cannot be sure that a_ is initialized before b_ is initialized.</p>\n<p>Why? Because, as we know, the order of initialization is strongly determined by the order of declaration only. But in the quoute above is said, that the order of declaration of a_ (as public) and b_ (as private) is unspecified.</p>\n", "Tags": "<c++>", "OwnerUserId": "2091997", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40991729_40992205_2": {"section_id": 438, "quality": 1.0, "length": 15}, "so_40991729_40992205_0": {"section_id": 5873, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_40991729_40992205_2": {"section_id": 429, "quality": 1.0, "length": 15}, "so_40991729_40992205_0": {"section_id": 5644, "quality": 0.9310344827586207, "length": 27}}, "n4659": {"so_40991729_40992205_0": {"section_id": 7356, "quality": 0.9655172413793104, "length": 28}, "so_40991729_40992205_2": {"section_id": 458, "quality": 1.0, "length": 15}}}});