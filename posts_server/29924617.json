post_cb({"29924809": {"ParentId": "29924617", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-04-28T16:23:30.640", "Score": "5", "LastEditorUserId": "2877241", "LastEditDate": "2015-04-28T16:30:49.960", "Id": "29924809", "OwnerUserId": "2877241", "Body": "<p>According to the C++ Standard (8.3.6 Default arguments):</p>\n<blockquote>\n<p id=\"so_29924617_29924809_0\">9 Default arguments are evaluated each time the function is called.\n  The order of evaluation of function arguments is unspecified.\n  Consequently, <strong>parameters of a function shall not be used in a\n  default argument</strong>, even if they are not evaluated. Parameters of a\n  function declared before a default argument are in scope and can hide\n  namespace and class member names.</p>\n</blockquote>\n<p>In any C++ (not only C++ 2014) you can overload the constructor. For example</p>\n<pre><code>struct Foo\n{\n  Foo(int val )\n  { Foo2 f(val); /*...*/ }\n  Foo(int val, Foo2 f )\n  {}\n};\n</code></pre>\n<p>Or you can use a delegating constructor (if your compiler supports the new Standard)</p>\n<pre><code>struct Foo\n{\n  Foo(int val ) : Foo( val, Foo2( val ) )\n  {}\n  Foo(int val, Foo2 f )\n  {}\n};\n</code></pre>\n", "LastActivityDate": "2015-04-28T16:30:49.960"}, "29924617": {"CommentCount": "2", "ViewCount": "105", "CreationDate": "2015-04-28T16:13:42.280", "LastActivityDate": "2015-04-28T16:30:49.960", "Title": "Not declared variable in default-constructed object in constructor", "AcceptedAnswerId": "29924809", "PostTypeId": "1", "Id": "29924617", "Score": "6", "Body": "<p>The above code doesn't work. Indeed the default constructed object <code>f</code> in the constructor of <code>Foo</code> complains that the value <code>val</code> is not declared in the scope. I don't understand why it is not declared. </p>\n<pre><code>struct Foo2\n{\n  Foo2(int val)\n  {}\n};\n\nstruct Foo\n{\n  Foo(int val, Foo2 f = Foo2(val))\n  {}\n};\n\nint main()\n{\n  Foo f(1);\n  return 0;\n}\n</code></pre>\n", "Tags": "<c++><constructor><default-constructor>", "OwnerUserId": "3707656", "AnswerCount": "4"}, "29924789": {"ParentId": "29924617", "CommentCount": "1", "CreationDate": "2015-04-28T16:22:38.377", "OwnerUserId": "2863290", "PostTypeId": "2", "Id": "29924789", "Score": "0", "Body": "<pre><code>struct Foo2\n{\n    int x;\n    Foo2(int val): x(val) {}\n};\n\nstruct Foo\n{\n    int y;\n    Foo2 f2;\n    Foo(int val, Foo2 f): y(val), f2(f) {}\n    Foo(int val): y(val), f2(val) {}\n};\n\nint main()\n{\n    Foo f(1);\n}\n</code></pre>\n", "LastActivityDate": "2015-04-28T16:22:38.377"}, "29924808": {"ParentId": "29924617", "CommentCount": "2", "CreationDate": "2015-04-28T16:23:27.773", "OwnerUserId": "919578", "PostTypeId": "2", "Id": "29924808", "Score": "0", "Body": "<p>You can use templates to solve this:</p>\n<pre><code>struct Foo2\n{\n  Foo2(int val)\n  {}\n};\n\ntemplate &lt;int val&gt;\nstruct Foo\n{\n  Foo(Foo2 f = Foo2(val))\n  {}\n};\n\nint main()\n{\n  Foo&lt;1&gt; f = Foo&lt;1&gt;(); \n  return 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-04-28T16:23:27.773"}, "29924726": {"ParentId": "29924617", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-04-28T16:19:40.523", "Score": "2", "LastEditorUserId": "204847", "LastEditDate": "2015-04-28T16:22:48.143", "Id": "29924726", "OwnerUserId": "204847", "Body": "<p>That's just how the language works; default arguments can't depend on other parameters, since the order of their initialisation is left unspecified.</p>\n<p>In C++11 or later, you can work around this with an overload:</p>\n<pre><code>Foo(int val) : Foo(val, Foo2(val)) {}\n</code></pre>\n", "LastActivityDate": "2015-04-28T16:22:48.143"}, "bq_ids": {"n4140": {"so_29924617_29924809_0": {"section_id": 3260, "quality": 0.9117647058823529, "length": 31}}, "n3337": {"so_29924617_29924809_0": {"section_id": 3132, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_29924617_29924809_0": {"section_id": 4018, "quality": 0.5882352941176471, "length": 20}}}});