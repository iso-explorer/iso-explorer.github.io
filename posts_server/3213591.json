post_cb({"bq_ids": {"n4140": {"so_3213591_3213598_0": {"length": 14, "quality": 0.5833333333333334, "section_id": 7230}, "so_3213591_3213820_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 597}}, "n3337": {"so_3213591_3213598_0": {"length": 14, "quality": 0.5833333333333334, "section_id": 6974}, "so_3213591_3213820_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 5832}}, "n4659": {"so_3213591_3213820_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 620}}}, "3213820": {"Id": "3213820", "PostTypeId": "2", "Body": "<p>Temporaries and rvalues are different (but related) concepts. Being temporary is a property of an <em>object</em>. Examples of objects that aren't tempory are local objects, global objects and dynamically created objects.</p>\n<p>Being an rvalue is a property of an <em>expression</em>. The opposite of rvalues are lvalues such as names or dereferenced pointers. The statement \"Temporaries are rvalues\" is meaningless. Here is the relationsip between rvalues and temporary objects:</p>\n<blockquote>\n<p id=\"so_3213591_3213820_0\">An rvalue is an expression whose evaluation creates a temporary object which is destroyed at the end of the full-expression that lexically contains the rvalue.</p>\n</blockquote>\n<p>Note that lvalues can also denote temporary objects!</p>\n<pre><code>void blah(const std::string&amp; s);\n\nblah(std::string(\"test\"));\n</code></pre>\n<p>Inside the function blah, the lvalue <code>s</code> denotes the temporary object created by evaluating the expression <code>std::string(\"test\")</code>.</p>\n<p>Your comment \"references are lvalues\" is also meaningless. A reference is not an expression and thus cannot be an lvalue. What you really mean is:</p>\n<blockquote>\n<p id=\"so_3213591_3213820_1\">The <em>expression</em> <code>function()</code> is an lvalue if the function returns a reference.</p>\n</blockquote>\n", "LastEditorUserId": "252000", "LastActivityDate": "2010-07-10T08:25:09.223", "Score": "9", "CreationDate": "2010-07-09T14:57:29.537", "ParentId": "3213591", "CommentCount": "7", "OwnerUserId": "252000", "LastEditDate": "2010-07-10T08:25:09.223"}, "3213598": {"Id": "3213598", "PostTypeId": "2", "Body": "<p>No. You are returning a reference to an global double, not a temporary.</p>\n<p>The same test with a real temporary would be:</p>\n<pre><code>double foo() { return 3.0; }\nint main() {\n   foo() = 2.0; // error: lvalue required as left operand of assignment\n}\n</code></pre>\n<p>EDIT:\nThe answer was meant just to identify that the example was wrong, and I did not really want to get into the deeper discussion of whether temporaries are or not rvalues... As others have said, lvalue-ness or rvalue-ness are properties of an expression and not of the object (in the most general sense, not only class instances). Then again, the standard says that:</p>\n<blockquote>\n<p id=\"so_3213591_3213598_0\">\u00a73.10/5 The result of calling a function that does not return a reference is an rvalue. User defined operators are functions, and whether such operators expect or yield lvalues is determined by their parameter and return types.</p>\n<p id=\"so_3213591_3213598_1\">\u00a73.10/6 An expression which holds a temporary object resulting from a cast to a nonreference type is an rvalue (this includes the explicit creation of an object using functional notation (5.2.3)).</p>\n</blockquote>\n<p>Which AFAIK are the circumstances under which temporaries are created. Now, it is also true that you can bind a constant reference to a temporary, in which case you will get a new variable (the reference) that can be used as an lvalue that effectively refers to the temporary object.</p>\n<p>The fine line is that expressions that create temporaries are rvalue expressions. You can bind a constant reference to the result of that expression to obtain a variable that can be used as an const-qualified lvalue expression.</p>\n", "LastEditorUserId": "36565", "LastActivityDate": "2010-07-09T17:05:17.263", "Score": "7", "CreationDate": "2010-07-09T14:31:48.503", "ParentId": "3213591", "CommentCount": "7", "OwnerUserId": "36565", "LastEditDate": "2010-07-09T17:05:17.263"}, "3214698": {"Id": "3214698", "PostTypeId": "2", "Body": "<p>Temporaries were so consistently protected from becoming lvalues, that they are now called rvalues. But C++0x will allow temporaries to become lvalues thanks to <em>move semantics</em>. Like in this dumb snippet</p>\n<pre><code>void blah(ICanBeTemporary &amp;&amp; temp)\n{\n    temp.data = 2; //here temporary becomes lvalue\n}\n\n\n//somewhere\nblah(ICanBeTemporary(\"yes I can\"));\n</code></pre>\n<p>Now we have terminology mess. People used to call temporaries rvalues and this is called <em>rvalue reference</em>. Named objects are now considered to be non-rvalue referenced.</p>\n", "LastActivityDate": "2010-07-09T16:38:16.220", "CommentCount": "6", "CreationDate": "2010-07-09T16:38:16.220", "ParentId": "3213591", "Score": "0", "OwnerUserId": "205955"}, "3213591": {"ViewCount": "304", "Body": "<p>Somebody generalized the statement \"Temporaries are <code>rvalues</code>\". I said \"no\" and gave him the following example</p>\n<pre><code> double k=3;\n\n double&amp; foo()\n {\n    return k;\n }\n\n int main()\n {\n\n     foo()=3; //foo() creates a temporary which is an lvalue\n }\n</code></pre>\n<p>Is my interpretation correct?</p>\n", "AcceptedAnswerId": "3213820", "Title": "Rvalues vs temporaries", "CreationDate": "2010-07-09T14:30:25.590", "Id": "3213591", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2010-07-10T08:25:09.223", "Score": "1", "OwnerUserId": "165520", "Tags": "<c++>", "AnswerCount": "3"}});