post_cb({"4640543": {"CommentCount": "0", "AcceptedAnswerId": "4640680", "OwnerDisplayName": "user283145", "CreationDate": "2011-01-09T17:24:06.253", "LastActivityDate": "2011-01-09T17:45:36.993", "PostTypeId": "1", "ViewCount": "1206", "FavoriteCount": "1", "Title": "What's the difference between integer promotions and integer conversions in C++", "Id": "4640543", "Score": "5", "Body": "<p>Section 4.5  of the C++ standard (integer promotion) talks about specific cases of converting  integral types to types with a higher rank. </p>\n<p>Section 4.7 of the C++ standard (integral conversions) begins with (bullet 4.7.1):</p>\n<blockquote>\n<p id=\"so_4640543_4640543_0\">An rvalue of an integer type can be converted to an rvalue of another integer type. An rvalue of an enumeration type can be converted to an rvalue of an integer type.</p>\n</blockquote>\n<p>As far as I understand conversions described in 4.5 (maybe except for the bullet 4.5.3 (enums)) can be performed by using the techniques from 4.7 section alone: 4.5.1 and 4.5.2 are completely covered by 4.7.1; 4.5.4 is covered by 4.7.4. So what's the purpose of the entire 4.5 section? What additional conversions does it enable? Maybe I'm missing some restrictions?</p>\n<p>P.S. I'm reading C++03 version of the standard.</p>\n", "Tags": "<c++><implicit-conversion><integer-promotion>", "AnswerCount": "2"}, "4640680": {"ParentId": "4640543", "CommentCount": "0", "Body": "<p>I <em>think</em> that the distinction is important because both do not fall in the same <em>conversion category</em> and have different <em>rank</em> (see 13.3.3.1.1, Standard conversion sequences). The rank makes a difference when it comes to overload resolution :</p>\n<blockquote>\n<p id=\"so_4640543_4640680_0\">Standard conversion sequences are ordered by their ranks: an Exact Match is a better conversion than a Promotion,\n  which is a better conversion than a Conversion.</p>\n</blockquote>\n<p>In the end, I believe it is the distinction between 4.5 and 4.7 that makes the following code unambiguous :</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid foo(int i)            { std::cout &lt;&lt; \"foo(int)\" &lt;&lt; std::endl; }\nvoid foo(unsigned short i) { std::cout &lt;&lt; \"foo(unsigned short)\" &lt;&lt; std::endl; }\n\nint main()\n{\n    foo(static_cast&lt;short&gt;(1));\n}\n</code></pre>\n<ul>\n<li><code>short</code> to <code>int</code> is a promotion (thus having promotion rank)</li>\n<li><code>short</code> to <code>unsigned short</code> is a conversion (thus having conversion rank)</li>\n</ul>\n<p>In the end, this code calls <code>foo(int)</code> because it is a better candidate.</p>\n", "OwnerUserId": "451980", "PostTypeId": "2", "Id": "4640680", "Score": "8", "CreationDate": "2011-01-09T17:45:36.993", "LastActivityDate": "2011-01-09T17:45:36.993"}, "bq_ids": {"n4140": {"so_4640543_4640680_0": {"section_id": 640, "quality": 0.9375, "length": 15}, "so_4640543_4640543_0": {"section_id": 30, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_4640543_4640680_0": {"section_id": 630, "quality": 0.9375, "length": 15}, "so_4640543_4640543_0": {"section_id": 27, "quality": 0.7647058823529411, "length": 13}}, "n4659": {"so_4640543_4640680_0": {"section_id": 668, "quality": 0.9375, "length": 15}, "so_4640543_4640543_0": {"section_id": 30, "quality": 0.7647058823529411, "length": 13}}}, "4640593": {"ParentId": "4640543", "CommentCount": "6", "Body": "<p>Promotions occur during arithmetic and other operations. Conversions occur when merely storing one integral type inside another.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "4640593", "Score": "4", "CreationDate": "2011-01-09T17:31:14.870", "LastActivityDate": "2011-01-09T17:31:14.870"}});