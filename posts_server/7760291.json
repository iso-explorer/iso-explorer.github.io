post_cb({"7760291": {"ViewCount": "12234", "Body": "<p>This is a simple question, but I can't seem to find a definitive answer.</p>\n<p>If we have the following class:</p>\n<pre><code>class Test\n{\n...\n  char testArray[10];\n\n...\n}; \n</code></pre>\n<p>When we create an instance of Test, what is the default value of testArray[1]?</p>\n<p>If it was a local array, it would be uninitialized.<br>\nIf it was a static array, it would be initialized to 0.  </br></p>\n<p>What does it do when the array is a class member?</p>\n", "AcceptedAnswerId": "7760316", "Title": "Default initialization of C++ Member arrays?", "CreationDate": "2011-10-13T20:53:23.670", "Id": "7760291", "CommentCount": "11", "PostTypeId": "1", "LastActivityDate": "2011-10-13T21:09:37.297", "Score": "17", "OwnerUserId": "102289", "Tags": "<c++>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7760291_7760316_2": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_7760291_7760316_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3286}, "so_7760291_7760316_4": {"length": 17, "quality": 0.6538461538461539, "section_id": 435}, "so_7760291_7760316_0": {"length": 4, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_7760291_7760316_2": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_7760291_7760316_0": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_7760291_7760316_4": {"length": 25, "quality": 0.9615384615384616, "section_id": 427}, "so_7760291_7760316_1": {"length": 13, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_7760291_7760316_2": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_7760291_7760316_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 4049}, "so_7760291_7760316_4": {"length": 17, "quality": 0.6538461538461539, "section_id": 454}}}, "7760330": {"Id": "7760330", "PostTypeId": "2", "Body": "<p>I believe that if you don't initialize it when you declare it, it can be set to anything.  Sometimes it is an address or random looking value.</p>\n<p>Best practice is to initialize after declaring.</p>\n", "LastActivityDate": "2011-10-13T20:57:17.620", "CommentCount": "0", "CreationDate": "2011-10-13T20:57:17.620", "ParentId": "7760291", "Score": "0", "OwnerUserId": "918077"}, "7760368": {"Id": "7760368", "PostTypeId": "2", "Body": "<p>It depends on may factors that you forgot to mention.</p>\n<p>If your <code>Test</code> has no user-defined constructor or your user-defined constructor makes no efforts to initialize the array, and you declare the object of type <code>Test</code> as </p>\n<pre><code>Test test; // no initializer supplied\n</code></pre>\n<p>then it will behave in exactly the same way as you described above. For an automatic (local) object the contents of the array will remain unpredictable. For a static object the contents is guaranteed to be zero.</p>\n<p>If your class has a user-defined constructor, then it will all depend on what constructor does. Again, keep in mind that static objects are always zero-initialized before any constructor has a chance to do anything.</p>\n<p>If your class is an aggregate, then the content might depend on the aggregate initializer you supplied in the object declaration. For example</p>\n<pre><code>Test test = {};\n</code></pre>\n<p>will zero-initialize the array even for an automatic (local) object.</p>\n", "LastActivityDate": "2011-10-13T21:00:14.170", "CommentCount": "3", "CreationDate": "2011-10-13T21:00:14.170", "ParentId": "7760291", "Score": "4", "OwnerUserId": "187690"}, "7760316": {"Id": "7760316", "PostTypeId": "2", "Body": "<p>From the standard, section 8.5 <code>[dcl.init]</code>:</p>\n<blockquote>\n<p id=\"so_7760291_7760316_0\">To default-initialize an object of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_7760291_7760316_1\">if <code>T</code> is a (possibly cv-qualified) class type (Clause 9), the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</p></li>\n<li><p id=\"so_7760291_7760316_2\"><strong>if <code>T</code> is an array type, each element is <em>default-initialized</em></strong>;</p></li>\n<li><p id=\"so_7760291_7760316_3\">otherwise, no initialization is performed.</p></li>\n</ul>\n</blockquote>\n<p>also section 12.6.2 <code>[class.base.init]</code>:</p>\n<blockquote>\n<p id=\"so_7760291_7760316_4\">In a non-delegating constructor, if a given non-static data member or base class is not designated by a <em>mem-initializer-id</em> (including the case where there is no <em>mem-initializer-list</em> because the constructor has no <em>ctor-initializer</em>) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<ul>\n<li>if the entity is a non-static data member that has a <em>brace-or-equal-initializer</em>, the entity is initialized as specified in 8.5;</li>\n<li>otherwise, if the entity is a variant member (9.5), no initialization is performed;</li>\n<li>otherwise, the entity is <em>default-initialized</em> (8.5).</li>\n</ul>\n</blockquote>\n<p>So because the element type is <code>char</code>, when each element is <em>default-initialized</em>, no initialization is performed.  The contents are left with arbitrary values.</p>\n<p>Unless, of course, it's a member of an instance of the class, and the instance has static storage duration.  Then the whole instance is <em>zero-initialized</em>, array members and all, before execution begins.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2011-10-13T21:01:41.707", "Score": "19", "CreationDate": "2011-10-13T20:55:31.193", "ParentId": "7760291", "CommentCount": "2", "OwnerUserId": "103167", "LastEditDate": "2011-10-13T21:01:41.707"}});