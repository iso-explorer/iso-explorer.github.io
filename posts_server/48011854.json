post_cb({"bq_ids": {"n4140": {"so_48011854_48012069_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3277}, "so_48011854_48012069_1": {"length": 45, "quality": 0.9183673469387755, "section_id": 607}}, "n3337": {"so_48011854_48012069_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3148}, "so_48011854_48012069_1": {"length": 45, "quality": 0.9183673469387755, "section_id": 597}}, "n4659": {"so_48011854_48012069_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 4035}, "so_48011854_48012069_1": {"length": 48, "quality": 0.9795918367346939, "section_id": 633}}}, "48011854": {"ViewCount": "435", "Body": "<p>There is global function (just example):</p>\n<pre><code>void func( int i )\n{\n    std::cout &lt;&lt; i + 100 &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I assume that calling this function with char argument does not make any sense so I use delete:</p>\n<pre><code>void func(char) = delete;\n</code></pre>\n<p>So I expect that following calls should be possible:</p>\n<pre><code>func(1);\nfunc(3.1);\nfunc(true);\n</code></pre>\n<p>And call with char argument should be forbiden:</p>\n<pre><code>func('a');\n</code></pre>\n<p>But that is not true. When calling <code>func('a')</code> I get as expected:</p>\n<pre><code>error: use of deleted function \u2018void func(char)\u2019\n</code></pre>\n<p>But during calling <code>func(2.3)</code> I get:</p>\n<pre><code>error: call of overloaded \u2018func(double)\u2019 is ambiguous\n</code></pre>\n<p>Why do I get this error? Without deleting function with char arguments double was converted to int and func(int) was called, why now it is forbidden?</p>\n", "AcceptedAnswerId": "48011983", "Title": "Deleting overloaded function. C++11. Call of overloaded ... is ambiguous", "CreationDate": "2017-12-28T17:34:39.757", "LastActivityDate": "2017-12-29T03:08:56.663", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-12-29T00:13:04.670", "LastEditorUserId": "845092", "Id": "48011854", "Score": "8", "OwnerUserId": "6836791", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "48011983": {"Id": "48011983", "PostTypeId": "2", "Body": "<p>When you call</p>\n<pre><code>func(2.3)\n</code></pre>\n<p>you pass a <code>double</code> to the function. The list of candidates contains <strong>both</strong> <code>func(int)</code> and <code>func(char)</code>, as overload resolution happens <a href=\"http://en.cppreference.com/w/cpp/language/function#Deleted_functions\" rel=\"noreferrer\"><strong>before</strong> <code>delete</code> kicks in</a>: </p>\n<blockquote>\n<p id=\"so_48011854_48011983_0\"><em>If the function is overloaded, overload resolution takes place first, and the program is only ill-formed if the deleted function was selected</em> <sub>Ref: cppreference.com, see <a href=\"https://stackoverflow.com/a/48012069/3093378\">Avishai's answer</a> for precise standard quotes.</sub></p>\n</blockquote>\n<p>Now <code>double</code> can be converted both to <code>char</code> and <code>int</code>, hence the ambiguity.</p>\n<blockquote>\n<p id=\"so_48011854_48011983_1\"><em>Without deleting function with char arguments double was converted to int and func(int) was called, why now it is forbidden?</em></p>\n</blockquote>\n<p>You get an ambiguity error even without <code>delete</code>ing the <code>char</code> version, see live <a href=\"http://coliru.stacked-crooked.com/a/f1b3830068c0a35c\" rel=\"noreferrer\">here</a>. Of course if you only define the <code>func(int)</code>, then there will be no ambiguity so <code>double</code> will happily be converted to an <code>int</code>.</p>\n", "LastEditorUserId": "3093378", "LastActivityDate": "2017-12-28T18:12:40.767", "Score": "12", "CreationDate": "2017-12-28T17:44:21.620", "ParentId": "48011854", "CommentCount": "2", "OwnerUserId": "3093378", "LastEditDate": "2017-12-28T18:12:40.767"}, "48012074": {"Id": "48012074", "PostTypeId": "2", "Body": "<p>Any time a non-exact match is passed in for a function parameter, a conversion must be done.  When you have two functions, regardless if one is deleted, they still participate in overload resolution.  The compiler picks the best match, then either generates a call to it, or fails if the function is inaccessible or deleted.</p>\n<p>For overload resolution to work, it makes a set of candidate functions then sees which has the shortest conversion path to the set of parameters.  As far as the rules go, all builtin numeric types are an \"equal\" conversion.  Therefore, if you call with 2.5, which is a double, it must convert and can convert equally to a char OR to an int, with the same ranking, so the call is ambiguous.</p>\n", "LastActivityDate": "2017-12-28T17:50:20.603", "Score": "1", "CreationDate": "2017-12-28T17:50:20.603", "ParentId": "48011854", "CommentCount": "2", "OwnerUserId": "8309701"}, "48012069": {"Id": "48012069", "PostTypeId": "2", "Body": "<p>It is still ambiguous, as the compiler tries to resolve the overload before checking for deleted functions. See:</p>\n<p>\u00a78.4.3 Deleted definitions</p>\n<blockquote>\n<p id=\"so_48011854_48012069_0\">A program that refers to a deleted function implicitly or explicitly, other than to declare it, is ill-formed.\n  [\n  Note:\n  This includes calling the function implicitly or explicitly and forming a pointer or pointer-to-member\n  to the function. It applies even for references in expressions that are not potentially-evaluated. If a function\n  is overloaded, it is referenced only if the function is selected by overload resolution.\n  \u2014 end note\n  ]</p>\n</blockquote>\n<p>\u00a713.3.3.1 Implicit conversion sequences:</p>\n<blockquote>\n<p id=\"so_48011854_48012069_1\">Implicit conversion sequences are concerned only with the type, cv-qualification, and value category of\n  the argument and how these are converted to match the corresponding properties of the parameter. Other\n  properties, such as the lifetime, storage class, alignment, accessibility of the argument, whether the argument\n  is a bit-field, and whether a function is deleted (8.4.3), are ignored. So, although an implicit conversion\n  sequence can be defined for a given argument-parameter pair, the conversion from the argument to the\n  parameter might still be ill-formed in the final analysis.</p>\n</blockquote>\n", "LastEditorUserId": "8451077", "LastActivityDate": "2017-12-29T03:08:56.663", "Score": "0", "CreationDate": "2017-12-28T17:49:52.080", "ParentId": "48011854", "CommentCount": "1", "OwnerUserId": "8451077", "LastEditDate": "2017-12-29T03:08:56.663"}});