post_cb({"11269913": {"Id": "11269913", "PostTypeId": "2", "Body": "<p>As Ed already pointed out, optimizations of floating point operations, including constant folding, are not guaranteed to happen at compile time. <a href=\"http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.jsp?topic=/com.ibm.vacpp6m.doc/proguide/ref/cvfltar.htm\" rel=\"nofollow\">Intel's page</a> on the subject gives a few examples, but mainly it's that the rounding behavior may be different and that floating point operations may throw exceptions. <a href=\"http://www.agner.org/optimize/optimizing_cpp.pdf\" rel=\"nofollow\">This paper</a> goes a bit more in-depth (section 8.3, \"Arithmetic Reduction\").</p>\n<p>GCC does only support </p>\n<blockquote>\n<p id=\"so_11269623_11269913_0\">\"floating-point expression contraction such as forming of fused multiply-add operations if the target has native support for them\"</p>\n</blockquote>\n<p>as mentioned in the description for the ffp-contract flag in the <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\" rel=\"nofollow\">compiler optimizations</a> manual.</p>\n", "LastEditorUserId": "966438", "LastActivityDate": "2012-06-29T23:14:27.440", "Score": "1", "CreationDate": "2012-06-29T22:51:06.490", "ParentId": "11269623", "CommentCount": "2", "OwnerUserId": "966438", "LastEditDate": "2012-06-29T23:14:27.440"}, "11269634": {"Id": "11269634", "PostTypeId": "2", "Body": "<p>The problem is that...</p>\n<pre><code>g++ gives: array bound is not an integer constant before \u00bb]\u00ab token\n</code></pre>\n<p>A <code>const</code> value is not a constant expression (though its quite understandable why this would confuse you).</p>\n<p>EDIT: I assumed C when I first read this.  The problem here is that this expression is not being evaluated at compile time:</p>\n<pre><code>const int N = 2*int(M_PI/rotationStep) + 3;\n</code></pre>\n<p>While this would be</p>\n<pre><code>const int N = 10;\n</code></pre>\n<p>As @ildjarn noted in the comments, floating point arithmetic is not guaranteed to be evaluated at compile time.  <a href=\"https://stackoverflow.com/questions/4417155/floating-point-arithmetic-at-compile-time\">Here is a related SO post I found.</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-29T22:30:58.567", "Score": "4", "CreationDate": "2012-06-29T22:16:26.600", "ParentId": "11269623", "CommentCount": "12", "OwnerUserId": "1053", "LastEditDate": "2017-05-23T12:00:39.557"}, "11269907": {"Id": "11269907", "PostTypeId": "2", "Body": "<p>As of the ISO C++ standard of 2003, that's not an <em>integral constant-expression</em>. Quoting section 5.19 of the standard:</p>\n<blockquote>\n<p id=\"so_11269623_11269907_0\">An <em>integral constant-expression</em> can involve only literals (2.13),\n  enumerators, <code>const</code> variables or static data members of integral or\n  enumeration types initialized with constant expressions (8.5),\n  non-type tem-plate parameters of integral or enumeration types, and\n  <code>sizeof</code> expressions.  Floating literals (2.13.3) can appear only if\n  they are cast to integral or enumeration types.</p>\n</blockquote>\n<p>You could change this:</p>\n<pre><code>const double rotationStep = 0.001;\nconst int N = 2*int(M_PI/rotationStep) + 3;\n</code></pre>\n<p>to this:</p>\n<pre><code>const int inverseRotationStep = 1000;\nconst int N = 2*int(M_PI)*inverseRotationStep + 3;\n</code></pre>\n<p>(That's assuming <code>M_PI</code> is defined somewhere; it's not specified in the standard, but it's a common extension.)</p>\n<p>The 2011 ISO C++ standard loosens this up a bit. 5.19p3 (quoting the N3337 draft) says:</p>\n<blockquote>\n<p id=\"so_11269623_11269907_1\">An <em>integral constant expression</em> is a literal constant expression of\n  integral or unscoped enumeration type.</p>\n</blockquote>\n<p>I <em>think</em> <code>2*int(M_PI/rotationStep) + 3</code>, and therefore <code>N</code>, qualifies under the new rules, but it's likely your compiler doesn't yet implement them.</p>\n", "LastActivityDate": "2012-06-29T22:50:30.903", "CommentCount": "1", "CreationDate": "2012-06-29T22:50:30.903", "ParentId": "11269623", "Score": "6", "OwnerUserId": "827263"}, "11269623": {"ViewCount": "13036", "Body": "<p>With the code,</p>\n<pre><code>const double rotationStep = 0.001;\nconst int N = 2*int(M_PI/rotationStep) + 3;\n\nstatic unsigned int counts[N];\n</code></pre>\n<p><code>g++</code> gives the error: </p>\n<blockquote>\n<p id=\"so_11269623_11269623_0\">array bound is not an integer constant before \u00bb]\u00ab token</p>\n</blockquote>\n<p>I am using <code>g++</code>/<code>gcc</code> version 4.6.1</p>\n<p>Can anybody tell me why <code>g++</code> complains about the expression?</p>\n", "AcceptedAnswerId": "11269907", "Title": "g++: array bound is not an integer constant", "CreationDate": "2012-06-29T22:15:05.923", "Id": "11269623", "CommentCount": "3", "LastEditDate": "2012-06-29T22:28:59.053", "PostTypeId": "1", "LastEditorUserId": "432294", "LastActivityDate": "2012-06-29T23:14:27.440", "Score": "8", "OwnerUserId": "765269", "Tags": "<c++><g++><constants>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_11269623_11269907_1": {"length": 8, "quality": 0.8, "section_id": 6186}}, "n3337": {"so_11269623_11269907_1": {"length": 10, "quality": 1.0, "section_id": 5947}}, "n4659": {"so_11269623_11269907_1": {"length": 7, "quality": 0.7, "section_id": 4095}}}});