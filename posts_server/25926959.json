post_cb({"25927147": {"ParentId": "25926959", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-09-19T05:46:02.473", "Score": "0", "LastEditorUserId": "1852723", "LastEditDate": "2014-10-08T12:34:14.307", "Id": "25927147", "OwnerUserId": "1852723", "Body": "<p>You stated that </p>\n<blockquote>\n<p id=\"so_25926959_25927147_0\">Although the Standard doesn't specify the declarator of\n  multidimensial array have to follow by an initializer.</p>\n</blockquote>\n<p>which is not true. Multidimensional arrays <em>are arrays</em>, so your previous cited statement from the standard about omitting array bounds also applies to them (with the added restriction).</p>\n", "LastActivityDate": "2014-10-08T12:34:14.307"}, "25926959": {"CommentCount": "1", "ViewCount": "65", "OwnerDisplayName": "user2953119", "CreationDate": "2014-09-19T05:27:43.810", "LastActivityDate": "2014-10-08T12:34:14.307", "PostTypeId": "1", "AcceptedAnswerId": "25927018", "Title": "Array with unknow bound", "Id": "25926959", "Score": "0", "Body": "<p>The Standard sec. 8.3/4 says:</p>\n<blockquote>\n<p id=\"so_25926959_25926959_0\">An array bound may also be omitted when the declarator is followed by\n  an initializer (8.5).</p>\n</blockquote>\n<p>It's ok. The following compiles fine:</p>\n<pre><code>int a[] = {1};\n\nint main()\n{\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/8a908d7c11b5f63e\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>But 8.3/4 also says</p>\n<blockquote>\n<p id=\"so_25926959_25926959_1\">When several \u201carray of\u201d specifications are adjacent, a\n  multidimensional array is created; only the first of the constant\n  expressions that specify the bounds of the arrays may be omitted.</p>\n</blockquote>\n<p>and the following</p>\n<pre><code>int a[][2];\n\nint main()\n{\n}\n</code></pre>\n<p>does not compile</p>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/74989123cb4bdbc6\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>But if we add an initializer followed after the declarator:</p>\n<pre><code>int a[][1] = {{1}};\n\nint main()\n{\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d953db88b587eec5\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>It works fine. Althought the Standard doesn't specify the declarator of multidimensial array have to follow by an initializer. Could you explain that?</p>\n", "Tags": "<c++><arrays>", "AnswerCount": "2"}, "25927018": {"ParentId": "25926959", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-09-19T05:32:49.690", "Score": "5", "LastEditorUserId": "1505939", "LastEditDate": "2014-09-19T05:56:07.297", "Id": "25927018", "OwnerUserId": "1505939", "Body": "<p>The \"also\" in your first quote refers to an earlier sentence:</p>\n<blockquote>\n<p id=\"so_25926959_25927018_0\"><strong>In addition to</strong> declarations in which an incomplete object type is allowed, an array bound may be omitted in some cases in the declaration of a function parameter (8.3.5). An array bound may <strong>also</strong> be omitted when the declarator is followed by an <em>initializer</em></p>\n</blockquote>\n<p>The text doesn't say so explicitly, but the intent is that <em>an array bound may not be omitted except for: (list of cases)</em>.</p>\n<p>The code <code>int a[][2];</code> is not a declaration in which an incomplete object type is allowed (e.g. <code>int a[];</code> is also illegal). It's not in the declaration of a function parameter; nor is the declarator followed by an initializer. </p>\n<p>So this code does not fall under any of the listed cases in which it is permitted to omit the array bound. </p>\n<hr>\n<p>The earlier quote:</p>\n<blockquote>\n<p id=\"so_25926959_25927018_1\">only the first of the constant expressions that specify the bounds of the arrays may be omitted</p>\n</blockquote>\n<p>means that bounds after the first one may not be omitted.</p>\n</hr>", "LastActivityDate": "2014-09-19T05:56:07.297"}, "bq_ids": {"n4140": {"so_25926959_25927018_0": {"section_id": 3230, "quality": 0.96, "length": 24}, "so_25926959_25926959_0": {"section_id": 3230, "quality": 1.0, "length": 9}, "so_25926959_25926959_1": {"section_id": 3230, "quality": 1.0, "length": 16}, "so_25926959_25927018_1": {"section_id": 3230, "quality": 1.0, "length": 8}}, "n3337": {"so_25926959_25927018_0": {"section_id": 3103, "quality": 0.96, "length": 24}, "so_25926959_25926959_0": {"section_id": 3103, "quality": 1.0, "length": 9}, "so_25926959_25926959_1": {"section_id": 3103, "quality": 1.0, "length": 16}, "so_25926959_25927018_1": {"section_id": 3103, "quality": 1.0, "length": 8}}, "n4659": {"so_25926959_25927018_0": {"section_id": 3987, "quality": 0.96, "length": 24}, "so_25926959_25926959_0": {"section_id": 3987, "quality": 1.0, "length": 9}, "so_25926959_25927018_1": {"section_id": 3987, "quality": 1.0, "length": 8}, "so_25926959_25926959_1": {"section_id": 3987, "quality": 1.0, "length": 16}}}});