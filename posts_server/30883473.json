post_cb({"30883739": {"ParentId": "30883473", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Some formal explanation in addition to @Joachim Pileborg's answer:<br>\nN3936::6.8.1 [stmt.ambig]:</br></p>\n<blockquote>\n<p id=\"so_30883473_30883739_0\">There is an ambiguity in the grammar involving expression-statements\n  and declarations: An expressionstatement with a function-style\n  explicit type conversion (5.2.3) as its leftmost subexpression can be\n  indistinguishable from a declaration where the first declarator starts\n  with a (. In those cases the statement is a declaration. [ Note: To\n  disambiguate, the whole statement might have to be examined to\n  determine if it is an expression-statement or a declaration. This\n  disambiguates many examples. [ Example: assuming T is a\n  simple-type-specifier (7.1.6),  </p>\n<p id=\"so_30883473_30883739_1\">T(a)-&gt;m = 7;      // expression-statement<br>\n  T(a)++;           // expression-statement<br>\n  T(a,5) &lt;&lt; c;      // expression-statement   </br></br></p>\n<p id=\"so_30883473_30883739_2\">T(*d)(int);       // declaration<br>\n  T(e)[5];          // declaration<br>\n  T(f) = { 1, 2 };  //declaration<br>\n  T(*g)(double(3)); // declaration   </br></br></br></p>\n<p id=\"so_30883473_30883739_3\">In the last example\n  above, g, which is a pointer to T, is initialized to double(3). This\n  is of course ill-formed for semantic reasons, but that does not affect\n  the syntactic analysis. \u2014end example ]</p>\n</blockquote>\n<p>Basically, in C++(and C), if a piece of code can be interpreted as a\ndeclaration, it will be.</p>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2015-06-17T06:32:50.123", "Id": "30883739", "Score": "0", "CreationDate": "2015-06-17T06:26:29.390", "LastActivityDate": "2015-06-17T06:32:50.123"}, "30883717": {"ParentId": "30883473", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In this code, the actual error lies at <code>A obj()</code>, \ninstead it should be <code>A obj;</code> </p>\n<ol>\n<li><p><code>obj</code> is an object of class so it should not follow braces. <code>A obj</code> creates the object of class A when the program begins the execution from the main(). When object is created the constructor of the class to which the object belongs is called and \"constructor called\" is printed. Similarly when control will move out of <code>main()</code>, the destructor will be called and \"destructor called\" will be printed.</p></li>\n<li><p><code>func()</code> is a function, so it should follow braces.</p></li>\n</ol>\n", "OwnerUserId": "4723561", "LastEditorUserId": "221955", "LastEditDate": "2015-06-17T06:26:37.047", "Id": "30883717", "Score": "0", "CreationDate": "2015-06-17T06:25:04.057", "LastActivityDate": "2015-06-17T06:26:37.047"}, "30883496": {"ParentId": "30883473", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This is a very tricky one, but you actually declare <code>obj</code> as a <em>function</em>, which takes no arguments and return an instance of <code>A</code>.</p>\n<p>Change to</p>\n<pre><code>A obj;\n</code></pre>\n<p>If you have a C++11 capable compiler (which are most these days, unless you run an older version, though some requires special flags to enable it) then you could also do</p>\n<pre><code>A obj{};\n</code></pre>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2015-06-17T06:23:34.293", "Id": "30883496", "Score": "8", "CreationDate": "2015-06-17T06:11:01.020", "LastActivityDate": "2015-06-17T06:23:34.293"}, "30883603": {"ParentId": "30883473", "CommentCount": "2", "Body": "<pre><code>A obj();\n</code></pre>\n<p>Says you are declaring a function which return object of A and doesn't take any argument.</p>\n<p>To create an object of <code>class A</code> simply write </p>\n<pre><code>A obj;\n</code></pre>\n<p>Explanation is given <a href=\"http://www.cplusplus.com/doc/tutorial/classes/\" rel=\"nofollow\">here</a></p>\n<blockquote>\n<p id=\"so_30883473_30883603_0\">This is because the empty set of parentheses would make of rectc a\n  function declaration instead of an object declaration: It would be a\n  function that takes no arguments and returns a value of type\n  Rectangle.</p>\n</blockquote>\n", "OwnerUserId": "3074082", "PostTypeId": "2", "Id": "30883603", "Score": "0", "CreationDate": "2015-06-17T06:17:19.660", "LastActivityDate": "2015-06-17T06:17:19.660"}, "30883473": {"CommentCount": "0", "AcceptedAnswerId": "30883496", "PostTypeId": "1", "LastEditorUserId": "221955", "CreationDate": "2015-06-17T06:09:10.437", "LastActivityDate": "2015-06-17T06:32:50.123", "LastEditDate": "2015-06-17T06:28:50.410", "ViewCount": "158", "FavoriteCount": "4", "Title": "Object declaration in C++", "Id": "30883473", "Score": "0", "Body": "<p>I have two questions about the following code in c++.</p>\n<ol>\n<li><p>What does the line <code>A obj()</code> in <code>main()</code> mean? Its not giving any error.</p></li>\n<li><p>And why does the next line <code>obj.fun();</code> give the following error?</p>\n<blockquote>\n<p id=\"so_30883473_30883473_0\">request for member 'fun' in 'obj', which is of non-class type 'A()'</p>\n</blockquote></li>\n</ol>\n<p>The code is: </p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass A{\n    public:\n        A(){\n            cout&lt;&lt;\"Constuctor called\\n\";\n        }\n        ~A(){\n            cout&lt;&lt;\"Destuctor called\\n\";\n        }\n        void fun(){\n            cout&lt;&lt;\"YES\";\n        }\n};\n\nint main(){\n    A obj();\n    obj.fun();\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><object><constructor>", "OwnerUserId": "3719247", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_30883473_30883739_0": {"section_id": 3921, "quality": 0.5681818181818182, "length": 25}, "so_30883473_30883739_2": {"section_id": 48, "quality": 0.5714285714285714, "length": 4}, "so_30883473_30883739_3": {"section_id": 3922, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_30883473_30883739_0": {"section_id": 3781, "quality": 0.7272727272727273, "length": 32}, "so_30883473_30883739_2": {"section_id": 43, "quality": 0.5714285714285714, "length": 4}, "so_30883473_30883739_3": {"section_id": 3781, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_30883473_30883739_3": {"section_id": 4808, "quality": 0.8333333333333334, "length": 15}, "so_30883473_30883739_2": {"section_id": 49, "quality": 0.5714285714285714, "length": 4}, "so_30883473_30883739_0": {"section_id": 4807, "quality": 0.5681818181818182, "length": 25}}}});