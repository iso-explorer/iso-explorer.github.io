post_cb({"bq_ids": {"n4140": {"so_48026922_48037549_1": {"length": 9, "quality": 0.9, "section_id": 763}, "so_48026922_48037549_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 7199}, "so_48026922_48026922_0": {"length": 63, "quality": 0.6176470588235294, "section_id": 5790}, "so_48026922_48026964_3": {"length": 8, "quality": 1.0, "section_id": 7199}}, "n3337": {"so_48026922_48037549_1": {"length": 9, "quality": 0.9, "section_id": 750}, "so_48026922_48026922_0": {"length": 63, "quality": 0.6176470588235294, "section_id": 5563}, "so_48026922_48037549_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6943}, "so_48026922_48026964_3": {"length": 8, "quality": 1.0, "section_id": 6943}}, "n4659": {"so_48026922_48037549_1": {"length": 8, "quality": 0.8, "section_id": 616}, "so_48026922_48026922_0": {"length": 87, "quality": 0.8529411764705882, "section_id": 7247}, "so_48026922_48037549_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 8708}, "so_48026922_48026922_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 7247}, "so_48026922_48026964_3": {"length": 8, "quality": 1.0, "section_id": 8708}}}, "48026964": {"Id": "48026964", "PostTypeId": "2", "Body": "<p><strong>Yes, an <code>int</code> is an <em>object</em>.</strong> </p>\n<p>All the sentences in the quote you posted are valid and true for <code>int</code> variables. </p>\n<p>Additionally, here are some examples that show how <code>int</code> makes sense for the quote you posted:</p>\n<hr>\n<blockquote>\n<p id=\"so_48026922_48026964_0\">An object is created by a definition </p>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/basic.def\" rel=\"nofollow noreferrer\">[basic.def]</a>:</p>\n<blockquote id=\"so_48026922_48026964_1\">\n<pre><code>int a;                          // defines a\n</code></pre>\n</blockquote>\n<p>Suggesting that <code>int</code> is an object.</p>\n<hr>\n<blockquote>\n<p id=\"so_48026922_48026964_2\">An object has a type</p>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/basic.types\" rel=\"nofollow noreferrer\">[basic.types]</a>:</p>\n<blockquote>\n<p id=\"so_48026922_48026964_3\">There are two kinds of types: fundamental types and compound types. </p>\n</blockquote>\n<p><code>int</code> is a <a href=\"http://eel.is/c++draft/basic.fundamental\" rel=\"nofollow noreferrer\">fundamental type</a>. This again suggests that <code>int</code> is an object.</p>\n</hr></hr>", "LastEditorUserId": "598696", "LastActivityDate": "2017-12-29T18:44:01.423", "Score": "4", "CreationDate": "2017-12-29T18:40:01.650", "ParentId": "48026922", "CommentCount": "6", "OwnerUserId": "598696", "LastEditDate": "2017-12-29T18:44:01.423"}, "48026922": {"ViewCount": "90", "Body": "<p>Below you'll find the definition of object in C++ Standard.</p>\n<p><a href=\"http://eel.is/c++draft/intro.object#1\" rel=\"nofollow noreferrer\">[intro.object]/1</a>:</p>\n<blockquote>\n<p id=\"so_48026922_48026922_0\">The constructs in a C++ program create, destroy, refer to, access, and\n  manipulate objects. An <em>object</em> is created by a definition (6.1), by a\n  <em>new-expression</em> (8.3.4), when implicitly changing the active member of a union (12.3), or when a temporary object is created (7.4, 15.2).\n  An object occupies a region of storage in its period of construction\n  (15.7), throughout its lifetime (6.8), and in its period of\n  destruction (15.7). [ Note: A function is not an object, regardless of\n  whether or not it occupies storage in the way that objects do. \u2014end\n  note ] The properties of an object are determined when the object is\n  created. An object can have a name (Clause 6). An object has a storage\n  duration (6.7) which influences its lifetime (6.8). An object has a\n  type (6.9). Some objects are polymorphic (13.3); the implementation\n  generates information associated with each such object that makes it\n  possible to determine that object\u2019s type during program execution. For\n  other objects, the interpretation of the values found therein is\n  determined by the type of the <em>expressions</em> (Clause 8) used to access\n  them.</p>\n</blockquote>\n<p>I have a feeling that yes, an <code>int</code> variable can be considered an object in C++, notwithstanding this statement in the paragraph above:</p>\n<blockquote>\n<p id=\"so_48026922_48026922_1\">An object occupies a region of storage in its period of construction\n  (15.7), throughout its lifetime (6.8), and in its period of\n  destruction (15.7).</p>\n</blockquote>\n<p>There are several other statements in the Standard that seem to assume that the term <em>object</em> is restricted to class objects. Thus, for the sake of precision, I'm posting this question.</p>\n", "Title": "Is an int variable an object, according to the C++ Standard?", "CreationDate": "2017-12-29T18:35:27.600", "LastActivityDate": "2017-12-30T20:18:58.587", "CommentCount": "8", "PostTypeId": "1", "Id": "48026922", "Score": "3", "OwnerUserId": "4463557", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "48037549": {"Id": "48037549", "PostTypeId": "2", "Body": "<p>Even though the standard doesn't enumerate everything that are objects, it can be deduced from various paragraphs. From <a href=\"http://eel.is/c++draft/basic.types#1\" rel=\"nofollow noreferrer\">[basic.types]/1</a></p>\n<blockquote>\n<p id=\"so_48026922_48037549_0\">[basic.types] and the subclauses thereof impose requirements on implementations regarding the representation of types. There are two kinds of types: fundamental types and compound types. Types describe objects, references, or functions.</p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/basic.types#8\" rel=\"nofollow noreferrer\">[basic.types]/8</a></p>\n<blockquote>\n<p id=\"so_48026922_48037549_1\">An object type is a (possibly cv-qualified) type that is not a function type, not a reference type, and not cv void.</p>\n</blockquote>\n<p>Since <code>int</code> is not a <a href=\"http://eel.is/c++draft/dcl.ref\" rel=\"nofollow noreferrer\">reference type</a> nor a <a href=\"http://eel.is/c++draft/dcl.fct\" rel=\"nofollow noreferrer\">function type</a>, it is deduced <code>int</code> can only be an object type, and a variable declared thus is an object.</p>\n", "LastActivityDate": "2017-12-30T20:18:58.587", "CommentCount": "0", "CreationDate": "2017-12-30T20:18:58.587", "ParentId": "48026922", "Score": "0", "OwnerUserId": "4832499"}});