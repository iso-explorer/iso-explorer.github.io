post_cb({"41596172": {"ParentId": "41596068", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2017-01-11T16:41:48.887", "Score": "4", "LastEditorUserId": "2079303", "LastEditDate": "2017-01-12T10:53:43.033", "Id": "41596172", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_41596068_41596172_0\">So does a1 have Static Storage Duration and does a2 have Automatic Storage Duration?</p>\n<p id=\"so_41596068_41596172_1\">The definition of Struct <code>A</code> is at global namespace ...</p>\n</blockquote>\n<p>This is irrelevant.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_2\">... is at global namespace, as well as <code>a1</code> declaration</p>\n</blockquote>\n<p><code>a1</code> has static storage duration and it is zero-initialized.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_3\">while <code>a2</code> declaration is at block scope</p>\n</blockquote>\n<p><code>a2</code> is a non-static block local variable. It has automatic storage duration and it is default initialized. It has an indeterminate value.</p>\n<hr>\n<blockquote>\n<p id=\"so_41596068_41596172_4\">What is the Storage Duration of Struct <code>A</code>?</p>\n</blockquote>\n<p>Types do not have storage duration. Objects do.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_5\">... And that of objects <code>a1</code> and <code>a2</code>?</p>\n</blockquote>\n<p>See above.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_6\">.. And that of variables <code>a1.x</code> and <code>a2.x</code>?</p>\n</blockquote>\n<p>Subobjects, including non static data members, inherit the lifetime of their superobject.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_7\">... Shoud <code>a1.x</code> and <code>a2.x</code> be zero-initialized? Or are they indeterminate values?</p>\n</blockquote>\n<p><code>a1</code> is zero initialized. This includes its subobjects. <code>a2</code> is not. This includes its subobjects.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_8\">Do the same rules apply to class and union?</p>\n</blockquote>\n<p>Same set of rules apply to objects of union and non-union classes as well as non class types when it comes to storage classes. There are differences in what default initialization means for different types.</p>\n<blockquote>\n<p id=\"so_41596068_41596172_9\">Does it make any difference the code in // Some Other Code? For example, if a constructor of class T \"has non-static members with default initializers\" then the default constructor can not be trivial (i.e. perform no action).</p>\n</blockquote>\n<p>A non-trivial default constructor generated by the compiler default initializes the members that have no default initializers.</p>\n</hr>", "LastActivityDate": "2017-01-12T10:53:43.033"}, "41596068": {"CommentCount": "3", "ViewCount": "179", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-01-11T16:36:38.800", "LastActivityDate": "2017-01-12T10:53:43.033", "Title": "Storage Duration and Member Initialization of a Struct in C++", "AcceptedAnswerId": "41596172", "LastEditDate": "2017-05-23T12:07:20.130", "Id": "41596068", "Score": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A {\n    // Some Other Code\n    int x;\n};\n\nA a1;\n\nint main(){\n    A a2;\n    cout &lt;&lt; \"a1.x = \" &lt;&lt; a1.x &lt;&lt; endl;\n    cout &lt;&lt; \"a2.x = \" &lt;&lt; a2.x &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>C++14 Standard (ISO/IEC 14882:2014) Section 8.5, Paragraph 12:</p>\n<blockquote>\n<p id=\"so_41596068_41596068_0\">If no initializer is specified for an object, the object is default-initialized. When storage for an object with automatic or dynamic storage duration is obtained, the object has an <em>indeterminate value</em>, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced (5.17). [ Note: Objects with static or thread storage duration are zero-initialized, see 3.6.2. - end note ] </p>\n</blockquote>\n<p>So does <code>a1</code> have Static Storage Duration and does <code>a2</code> have Automatic Storage Duration? The definition of <code>Struct A</code> is at global namespace, as well as <code>a1</code> declaration, while <code>a2</code> declaration is at block scope (inside the <code>main()</code> function).</p>\n<p>Also, Section 3.6.2 says:</p>\n<p>Paragraph 1:</p>\n<blockquote>\n<p id=\"so_41596068_41596068_1\">Non-local variables with static storage duration are initialized\n  as a consequence of program initiation.</p>\n</blockquote>\n<p>Paragraph 2:</p>\n<blockquote>\n<p id=\"so_41596068_41596068_2\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other initialization takes place.</p>\n</blockquote>\n<p>Besides, with gcc 5.4.0 I get a warning (<code>warning: 'a2.A::x' is used uninitialized in this function [-Wuninitialized]</code>) and a random value, but with clang 3.8.0 the output is always <code>a2.x = 0</code> (zero can also be an indeterminate value). I also made other more complex experiments, with nested <code>struct</code>s and default initializations placed in <code>// Some Other Code</code>. Sometimes I get random values and other times (not a negligible number of) I get a zero. </p>\n<ul>\n<li><p>What is the Storage Duration of Struct <code>A</code>? And that of objects <code>a1</code> and <code>a2</code>? And that of variables <code>a1.x</code> and <code>a2.x</code>?</p></li>\n<li><p>Shoud <code>a1.x</code> and <code>a2.x</code> be zero-initialized? Or are they indeterminate values?</p></li>\n<li><p>Do the same rules apply to <code>class</code> and <code>union</code>? </p></li>\n<li><p>Does it make any difference the code in <code>// Some Other Code</code>? For example, if a class T \"has non-static members with default initializers\" (like in <code>struct A { int b = 1; int x; };</code>) then the default constructor can not be trivial (i.e. can not perform no action).  Would that non-trivial constructor also initialize <code>x</code>? <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor.\" rel=\"nofollow noreferrer\">Trivial Default Constructor</a></p></li>\n</ul>\n<p>Interesting links:</p>\n<p><a href=\"https://stackoverflow.com/questions/11516657/c-structure-initialization\">C++ Structure Initialization</a> </p>\n<p><a href=\"https://stackoverflow.com/questions/16782103/initializing-default-values-in-a-struct\">Initializing default values in a struct</a></p>\n<p><a href=\"https://stackoverflow.com/questions/1069621/are-members-of-a-c-struct-initialized-to-0-by-default\">Are members of a C++ struct initialized to 0 by default?</a></p>\n<p><a href=\"https://stackoverflow.com/questions/15212261/default-initialization-of-pod-types-in-c\">Default initialization of POD types in C++</a></p>\n<p><a href=\"https://stackoverflow.com/questions/5474349/initialization-of-objects-with-static-storage-duration-in-c-vs-c\">Initialization of Objects with Static Storage Duration in C vs C++</a></p>\n<p><a href=\"https://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure\">C and C++ : Partial initialization of automatic structure</a></p>\n<p><a href=\"http://www.ex-parrot.com/~chris/random/initialise.html\" rel=\"nofollow noreferrer\">How to initialize structures to all-elements-zero-or-null</a></p>\n", "Tags": "<c++><struct><initialization><member><storage-duration>", "OwnerUserId": "6892577", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_41596068_41596068_0": {"section_id": 3291, "quality": 0.8421052631578947, "length": 32}, "so_41596068_41596068_2": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}, "so_41596068_41596068_1": {"section_id": 7150, "quality": 1.0, "length": 8}}, "n3337": {"so_41596068_41596068_2": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}, "so_41596068_41596068_1": {"section_id": 6894, "quality": 1.0, "length": 8}}, "n4659": {"so_41596068_41596068_0": {"section_id": 4053, "quality": 0.8421052631578947, "length": 32}, "so_41596068_41596172_8": {"section_id": 667, "quality": 0.8, "length": 4}, "so_41596068_41596166_3": {"section_id": 667, "quality": 0.8, "length": 4}, "so_41596068_41596068_1": {"section_id": 8651, "quality": 0.75, "length": 6}, "so_41596068_41596068_2": {"section_id": 4051, "quality": 0.6, "length": 9}}}, "41596166": {"ParentId": "41596068", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-11T16:41:28.250", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:13:58.987", "Id": "41596166", "OwnerUserId": "598696", "Body": "<blockquote>\n<p id=\"so_41596068_41596166_0\">What is the Storage Duration of Struct A? </p>\n</blockquote>\n<p>This question does not make sense, the storage depends on how <code>A</code> is used.</p>\n<hr>\n<blockquote>\n<p id=\"so_41596068_41596166_1\">And that of objects a1 and a2? </p>\n</blockquote>\n<p><code>a1</code> has static storage. <a href=\"https://stackoverflow.com/questions/3281925/what-is-default-storage-class-for-global-variables\">See this question for more details.</a></p>\n<p><code>a2</code> has automatic storage.</p>\n<hr>\n<blockquote>\n<p id=\"so_41596068_41596166_2\">And that of variables  a1.x and a2.x?</p>\n</blockquote>\n<p>They are stored the same way as their parent <code>A</code> instance.</p>\n<hr>\n<blockquote>\n<p id=\"so_41596068_41596166_3\">Do the same rules apply to class and union?</p>\n</blockquote>\n<p>Yes.</p>\n</hr></hr></hr>", "LastActivityDate": "2017-01-11T16:41:28.250"}});