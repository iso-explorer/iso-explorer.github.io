post_cb({"bq_ids": {"n4140": {"so_26372292_26372399_0": {"length": 16, "quality": 1.0, "section_id": 6029}}, "n3337": {"so_26372292_26372399_0": {"length": 12, "quality": 0.75, "section_id": 5797}}, "n4659": {"so_26372292_26372399_0": {"length": 11, "quality": 0.6875, "section_id": 7528}}}, "26372292": {"ViewCount": "377", "Body": "<p>Given</p>\n<pre><code>void foo( int&amp;&amp; x ) {\n\n    std::cout &lt;&lt; &amp;x;\n}\n</code></pre>\n<p>This works but what does this address actually represent? Is a temporary <code>int</code> created when foo is called and that is what the address represents? If this is true and if I write <code>int y = 5; foo(static_cast&lt;int&amp;&amp;&gt;(y));</code>, does this cause another temporary to be  created or will the compiler intelligently refer to y?</p>\n", "AcceptedAnswerId": "26372399", "Title": "What does it mean to take the address of an rvalue reference?", "CreationDate": "2014-10-14T23:50:33.380", "LastActivityDate": "2014-10-15T00:14:57.590", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "Id": "26372292", "Score": "7", "OwnerUserId": "830628", "Tags": "<c++><c++11><c++14>", "AnswerCount": "1"}, "26372399": {"Id": "26372399", "PostTypeId": "2", "Body": "<p>When you take an address of an rvalue reference, it returns a pointer to the object that reference is bound to, like with lvalue references. The object can be a temporary or not (if for example you cast an lvalue to rvalue reference like you do in your code).</p>\n<p><code>int y = 5; foo(static_cast&lt;int&amp;&amp;&gt;(y));</code> does not create a temporary. This conversion is described in part <code>5.2.9/3</code> of the standard:</p>\n<blockquote>\n<p id=\"so_26372292_26372399_0\">A glvalue, class prvalue, or array prvalue of type \u201c<code>cv1 T1</code>\u201d can be cast to type \u201crvalue reference to <code>cv2 T2</code>\u201d if \u201c<code>cv2 T2</code>\u201d is reference-compatible with \u201c<code>cv1 T1</code>\u201d.</p>\n</blockquote>\n<p>A temporary will be created if for example you call <code>foo(1);</code>.</p>\n", "LastEditorUserId": "3959454", "LastActivityDate": "2014-10-15T00:14:57.590", "Score": "7", "CreationDate": "2014-10-15T00:03:39.227", "ParentId": "26372292", "CommentCount": "2", "OwnerUserId": "3959454", "LastEditDate": "2014-10-15T00:14:57.590"}});