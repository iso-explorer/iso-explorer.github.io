post_cb({"bq_ids": {"n4140": {"so_13378989_13379959_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6536}, "so_13378989_13379959_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 2189}, "so_13378989_13379959_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 6536}}, "n3337": {"so_13378989_13379959_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6291}, "so_13378989_13379959_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 2177}, "so_13378989_13379959_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 6291}}, "n4659": {"so_13378989_13379959_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 8018}, "so_13378989_13379959_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 2462}, "so_13378989_13379959_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 8018}}}, "13379073": {"Id": "13379073", "PostTypeId": "2", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt\" rel=\"noreferrer\">this reference</a>:</p>\n<blockquote>\n<p id=\"so_13378989_13379073_0\">If extraction fails (e.g. if a letter was entered where a digit is expected), value is left unmodified and failbit is set (<strong>until C++11</strong>)</p>\n<p id=\"so_13378989_13379073_1\">If extraction fails, zero is written to value and failbit is set. If extraction results in the value too large or too small to fit in value, std::numeric_limits::max() or std::numeric_limits::min() is written and failbit flag is set. (<strong>since C++11</strong>)</p>\n</blockquote>\n<p>It seems that your compiler is compiling in C++11 mode, which changes the behavior.</p>\n<hr>\n<p>The input operator uses the locale facet <a href=\"http://en.cppreference.com/w/cpp/locale/num_get\" rel=\"noreferrer\"><code>std::num_get</code></a> whose <code>get</code> function invokes <a href=\"http://en.cppreference.com/w/cpp/locale/num_get/get\" rel=\"noreferrer\"><code>do_get</code></a>. For C++11 it's specified to use <a href=\"http://en.cppreference.com/w/cpp/string/byte/strtol\" rel=\"noreferrer\"><code>std::strtoll</code></a> et. al. type of functions. Before C++11 it apparently used <a href=\"http://en.cppreference.com/w/cpp/io/c/fscanf\" rel=\"noreferrer\"><code>std::scanf</code></a> style parsing (going by the reference, I don't have access to the C++03 specification) to extract the numbers. The change in behavior is due to this change in parsing the input.</p>\n</hr>", "LastEditorUserId": "440558", "LastActivityDate": "2012-11-14T13:33:04.770", "Score": "53", "CreationDate": "2012-11-14T12:45:20.813", "ParentId": "13378989", "CommentCount": "7", "OwnerUserId": "440558", "LastEditDate": "2012-11-14T13:33:04.770"}, "13379959": {"Id": "13379959", "PostTypeId": "2", "Body": "<p>The operator &gt;&gt; is a formatted input operator.<br>\nAs such is dependent on the locale for how input is read from the stream:</br></p>\n<h2>[istream.formatted.arithmetic]</h2>\n<blockquote>\n<p id=\"so_13378989_13379959_0\">As in the case of the inserters, these extractors depend on the locale\u2019s num_get&lt;&gt; (22.4.2.1) object to perform parsing the input stream data. These extractors behave as formatted input functions (as described in 27.7.2.2.1). After a sentry object is constructed, the conversion occurs as if performed by the following code fragment:</p>\n</blockquote>\n<pre><code>   typedef num_get&lt; charT,istreambuf_iterator&lt;charT,traits&gt; &gt; numget;\n   iostate err = iostate::goodbit;\n   use_facet&lt; numget &gt;(loc).get(*this, 0, *this, err, val);\n   setstate(err);\n</code></pre>\n<p>As we can see above the value is actually set by the <code>numget</code> facet of the locale imbuded onto the stream.</p>\n<h2>num_get virtual functions [facet.num.get.virtuals]</h2>\n<blockquote>\n<h3>Stage 3:</h3>\n<p id=\"so_13378989_13379959_1\">The numeric value to be stored can be one of:</p>\n<ul>\n<li>zero, if the conversion function fails to convert the entire field. ios_base::failbit is assigned to err.</li>\n<li>the most positive representable value, if the field represents a value too large positive to be represented in val. ios_base::failbit is assigned to err.</li>\n<li>the most negative representable value or zero for an unsigned integer type, if the field repre- sents a value too large negative to be represented in val. ios_base::failbit is assigned to err.</li>\n</ul>\n</blockquote>\n<p>The definition of stage 3 changed drastically between n2723 -&gt; n2798</p>\n<p><a href=\"https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents\">Where do I find the current C or C++ standard documents?</a></p>\n<h2>num_get virtual functions [facet.num.get.virtuals]</h2>\n<blockquote>\n<p id=\"so_13378989_13379959_2\">Stage 3: The result of stage 2 processing can be one of:</p>\n<ul>\n<li>A sequence of chars has been accumulated in stage 2 that is converted (according to the rules of scanf) to a value of the type of val . This value is stored in val and ios_base::goodbit is stored in err .</li>\n<li>The sequence of chars accumulated in stage 2 would have caused scanf to report an input failure. ios_base::failbit is assigned to err.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-14T13:42:10.530", "Score": "4", "CreationDate": "2012-11-14T13:42:10.530", "ParentId": "13378989", "CommentCount": "0", "OwnerUserId": "14065", "LastEditDate": "2017-05-23T12:18:08.593"}, "13378989": {"ViewCount": "2022", "Body": "<p>From Stroustrup's TC++PL, 3rd Edition, Section 21.3.3:  </p>\n<blockquote>\n<p id=\"so_13378989_13378989_0\">If we try to read into a variable v and the operation fails, the value of v should be unchanged (it is unchanged if v is one of the types handled by istream or ostream member functions).</p>\n</blockquote>\n<p>The following example appears to contradict the above quote.  Based on the above quote, I was expecting the value of v to remain unchanged -- but it gets zeroed.  What's the explanation for this apparent contradictory behaviour?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nint main( )\n{\n    std::stringstream  ss;\n\n    ss  &lt;&lt; \"The quick brown fox.\";\n\n    int  v = 123;\n\n    std::cout &lt;&lt; \"Before: \" &lt;&lt; v &lt;&lt; \"\\n\";\n\n    if( ss &gt;&gt; v )\n    {\n        std::cout &lt;&lt; \"Strange -- was successful at reading a word into an int!\\n\";\n    }\n\n    std::cout &lt;&lt; \"After: \" &lt;&lt; v &lt;&lt; \"\\n\";\n\n    if( ss.rdstate() &amp; std::stringstream::eofbit  ) std::cout &lt;&lt; \"state: eofbit\\n\";\n    if( ss.rdstate() &amp; std::stringstream::failbit ) std::cout &lt;&lt; \"state: failbit\\n\";\n    if( ss.rdstate() &amp; std::stringstream::badbit  ) std::cout &lt;&lt; \"state: badbit\\n\";\n\n    return 1;\n}\n</code></pre>\n<p>The output I get using x86_64-w64-mingw32-g++.exe (rubenvb-4.7.2-release) 4.7.2 is:</p>\n<pre><code>Before: 123\nAfter: 0\nstate: failbit\n</code></pre>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "13379073", "Title": "Why does stringstream >> change value of target on failure?", "CreationDate": "2012-11-14T12:39:33.163", "Id": "13378989", "CommentCount": "1", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2012-11-14T12:41:16.483", "LastEditorUserId": "440558", "LastActivityDate": "2012-11-14T13:42:10.530", "Score": "48", "OwnerUserId": "1823664", "Tags": "<c++><state><stringstream><cin>", "AnswerCount": "2"}});