post_cb({"bq_ids": {"n4140": {"so_19231959_19232203_0": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_19231959_19232203_0": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_19231959_19232203_0": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "19231959": {"ViewCount": "345", "Body": "<p>I've run into a strange issue with using type aliases and nested classes/scopes. The following code is happily accepted by clang 3.3, but rejected by nuwen MinGW 4.8.1:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename T&gt;\nstruct container\n{\n};\n\nstruct Outer\n{\n    using type_t = int;\n    struct Inner\n    {\n        using container_t = container&lt;type_t&gt;;\n        using type_t = Outer::type_t; //error in MinGW\n    };\n};\n</code></pre>\n<p>The generated error with gcc: <a href=\"http://ideone.com/cba6Fp\" rel=\"nofollow\">http://ideone.com/cba6Fp</a> (matches the error on my system)</p>\n<p>To fix the error in MinGW, you simply move the definition of <code>container_t</code> to after <code>type_t</code> (which makes sense, and is what I should have done originally) - however my question is why does this compile with clang and not MinGW? Is the code valid or invalid?</p>\n", "AcceptedAnswerId": "19232203", "Title": "Using type aliases with nested classes", "CreationDate": "2013-10-07T18:27:32.950", "Id": "19231959", "CommentCount": "0", "LastEditDate": "2013-10-07T18:56:46.647", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2013-10-07T18:56:46.647", "Score": "1", "OwnerUserId": "1959975", "Tags": "<c++><c++11><alias><using><nested-class>", "AnswerCount": "1"}, "19232203": {"Id": "19232203", "PostTypeId": "2", "Body": "<p>The issue is in 3.3.7/1 [basic.scope.class]:</p>\n<blockquote>\n<p id=\"so_19231959_19232203_0\">2) A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>You use the name <code>type_t</code> in <code>Inner</code>, but before the declaration of <code>Inner::type_t</code>. So the name refers to two different declarations, violating the rule.</p>\n<p>No diagnostic is required so clang isn't technically nonconforming, but an error would be nice here.</p>\n", "LastActivityDate": "2013-10-07T18:41:53.360", "Score": "2", "CreationDate": "2013-10-07T18:41:53.360", "ParentId": "19231959", "CommentCount": "2", "OwnerUserId": "365496"}});