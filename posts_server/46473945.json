post_cb({"bq_ids": {"n4140": {"so_46473945_46474184_0": {"length": 18, "quality": 1.0, "section_id": 239}}, "n3337": {"so_46473945_46474184_0": {"length": 18, "quality": 1.0, "section_id": 231}}, "n4659": {"so_46473945_46474184_0": {"length": 13, "quality": 0.7222222222222222, "section_id": 248}}}, "46473945": {"ViewCount": "60", "Body": "<p>Consider a simple example:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;class T, std::size_t N&gt;\nstruct MaybeAssert {\n    using type = T;\n    static_assert(N &lt; 1, \"Assertion\");\n};\n\ntemplate &lt;class T&gt;\nvoid foo(typename MaybeAssert&lt;T, 0&gt;::type) {\n}\n\ntemplate &lt;class T&gt;\nvoid foo(typename MaybeAssert&lt;T, 0&gt;::type, \n         typename MaybeAssert&lt;T, 1&gt;::type) {\n}\n\nint main() {\n   foo&lt;int&gt;(2);\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/ihmJnpVESMBbD8wm\" rel=\"nofollow noreferrer\">[gcc]</a> instantiate <code>MaybeAssert&lt;T, 1&gt;</code> which in the example triggers <code>static_assert</code>. </p>\n<p><a href=\"https://wandbox.org/permlink/IeZ4MqvFcuamPXIs\" rel=\"nofollow noreferrer\">[clang]</a> on the other hand instantiate the types only if the number of function template parameters match. Which compiler is right?</p>\n", "AcceptedAnswerId": "46474184", "Title": "Should the compiler instantiate all parameter dependent types even if the parameter count of the overloaded function does not match", "CreationDate": "2017-09-28T16:20:54.130", "Id": "46473945", "CommentCount": "2", "LastEditDate": "2017-09-28T16:28:25.470", "PostTypeId": "1", "LastEditorUserId": "4324224", "LastActivityDate": "2017-09-28T16:46:45.580", "Score": "2", "OwnerUserId": "4324224", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "1"}, "46474184": {"Id": "46474184", "PostTypeId": "2", "Body": "<p>Both are valid <a href=\"http://eel.is/c++draft/temp.inst#7\" rel=\"nofollow noreferrer\">[temp.inst]/7</a> :</p>\n<blockquote>\n<p id=\"so_46473945_46474184_0\">If the overload resolution process can determine the correct function to call without instantiating a class template definition, it is unspecified whether that instantiation actually takes place.</p>\n</blockquote>\n", "LastEditorUserId": "4324224", "LastActivityDate": "2017-09-28T16:46:45.580", "Score": "6", "CreationDate": "2017-09-28T16:34:33.820", "ParentId": "46473945", "CommentCount": "1", "OwnerUserId": "2289509", "LastEditDate": "2017-09-28T16:46:45.580"}});