post_cb({"37504163": {"ParentId": "37504020", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I think both are wrong. For the first use <code>func(...)</code> is an unqualified name looked up using argument dependent look-up which doesn't find a function in a base class. The use of <code>B::template func(...)</code> uses an excess keyword <code>template</code>. You can force look-up of <code>func</code> in the context of the class using</p>\n<pre><code>this-&gt;func(...);\n</code></pre>\n<p>The <code>this-&gt;</code> forces the necessary context. I think, <code>B::func(...)</code> should also work but I'm using <code>this-&gt;func(...)</code> in similar situations.</p>\n<p>I think the relevant clause is 14.6.2 [temp.dep] paragraph 3:</p>\n<blockquote>\n<p id=\"so_37504020_37504163_0\">In the definition of a class or class template, the scope of a dependent base class (14.6.2.1) is not examined during unqualified name lookup either at the point of definition of the class template or member or during an instantiation of the class template or member.</p>\n</blockquote>\n<p>The issue is that <code>B</code> is dependent on the template arguments of the enclosing class. Qualifying the name with <code>this-&gt;</code> or the base class name force look-up in the base class context.</p>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2016-05-28T22:26:02.620", "Id": "37504163", "Score": "4", "CreationDate": "2016-05-28T22:09:53.820", "LastActivityDate": "2016-05-28T22:26:02.620"}, "37504020": {"CommentCount": "5", "ViewCount": "54", "PostTypeId": "1", "LastEditorUserId": "3953764", "CreationDate": "2016-05-28T21:48:52.027", "LastActivityDate": "2016-05-28T22:26:02.620", "Title": "Cannot get templates to compile under Visual Studio and clang", "AcceptedAnswerId": "37504163", "LastEditDate": "2016-05-28T21:59:09.937", "Id": "37504020", "Score": "4", "Body": "<p>I have the following minified code.<br>\nThe line with <code>// Only VS</code> compiles on VS but not on clang,<br>\nAnd the line with <code>// Only clang</code> compiles on clang but not on VS.<br>\nWho is correct? More importantly, how to make an equivalent line compile on both?<br>\nThe versions tested are clang 3.7.0, and VS 2015.</br></br></br></br></p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;functional&gt;\n#include &lt;tuple&gt;\n\ntemplate&lt;typename... Args&gt;\nclass C\n{\n    struct B\n    {\n        std::function&lt;void(Args...)&gt; func;\n        B(std::function&lt;void(Args...)&gt; func) : func(func) { }\n    };\n    template&lt;typename T&gt;\n    struct D : B\n    {\n        using B::B;\n        template&lt;size_t... I&gt;\n        void Call(T &amp;t, std::index_sequence&lt;I...&gt;)\n        {\n            func(std::get&lt;I&gt;(t)...); // Only VS\n            B::template func(std::get&lt;I&gt;(t)...); // Only clang\n        }\n    };\n    D&lt;std::tuple&lt;Args...&gt;&gt; d;\npublic:\n    C(std::function&lt;void(Args...)&gt; func) : d(func) { }\n    void Call()\n    {\n        std::tuple&lt;Args...&gt; t;\n        d.Call(t, std::make_index_sequence&lt;sizeof...(Args)&gt;());\n    }\n};\n\nvoid f(int)\n{\n\n}\n\nint main()\n{\n    C&lt;int&gt; c(f);\n    c.Call();\n}\n</code></pre>\n", "Tags": "<c++><templates><c++14><name-lookup>", "OwnerUserId": "362589", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37504020_37504163_0": {"section_id": 190, "quality": 0.88, "length": 22}}, "n3337": {"so_37504020_37504163_0": {"section_id": 184, "quality": 0.88, "length": 22}}, "n4659": {"so_37504020_37504163_0": {"section_id": 195, "quality": 0.96, "length": 24}}}});