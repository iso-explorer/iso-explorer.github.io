post_cb({"24767313": {"CommentCount": "3", "ViewCount": "89", "OwnerDisplayName": "user2793162", "CreationDate": "2014-07-15T20:12:33.430", "LastActivityDate": "2014-07-15T21:07:38.363", "Title": "implementation defined behaviour and reading unicode to buffer", "PostTypeId": "1", "Id": "24767313", "Score": "2", "Body": "<p>I have two questions, one small one, hence I will ask them together.\nIs implementation defined behaviour as dangerous as undefined behaviour?</p>\n<p>I read some unicode string from file using this code:</p>\n<pre><code> char buff[1000];\n while (fgets(buf,1000, ptr_file) != NULL)\n        printf(\"line: %s\",buf);\n</code></pre>\n<p>I believe the unicode characters in the file where saved in UTF8 encoding.\nBut each UTF8 value was more than 128 when I checked. Nevertheless\nthe array is of <code>char</code> type as you can see (meaning range -127,128). \nBut the string was correctly printed. What happened? Did I invoke UB?</p>\n", "Tags": "<c++><c>", "AnswerCount": "2"}, "24767431": {"ParentId": "24767313", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>When the standard states that something has implementation defined behavior, it means the compiler writer must document what will happen for that something. The behavior is <strong>not</strong> undefined, but the behavior may differ among implementations.</p>\n<p>The signed-ness of <code>char</code> is one such example. It is implementation defined whether it is signed or unsigned, but the compiler implementation should document it (and usually, it will provide a switch to let you choose which way you want it).</p>\n<p>Note that <code>char</code> is itself a type that is distinct from <code>signed char</code> and <code>unsigned char</code> (as opposed to <code>int</code> which is synonymous with <code>signed int</code>).</p>\n<p>Cross references:\nC.11: \u00a76.2.5 \u00b615 and C++.11: \u00a73.9.1 \u00b61.</p>\n", "OwnerUserId": "315052", "LastEditorUserId": "315052", "LastEditDate": "2014-07-15T20:25:07.780", "Id": "24767431", "Score": "3", "CreationDate": "2014-07-15T20:19:37.307", "LastActivityDate": "2014-07-15T20:25:07.780"}, "bq_ids": {"n4659": {"so_24767313_24767605_0": {"section_id": 8719, "quality": 0.5128205128205128, "length": 20}}}, "24767605": {"ParentId": "24767313", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>To answer second question I think there is no UB with any code point represented in UTF-8 encoding, since referring to C99 latest draft <code>6.2.5</code>, p.3 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_24767313_24767605_0\">An object declared as type <code>char</code> is large enough to store any member of\n  the basic execution character set. If a member of the basic execution\n  character set is stored in a <code>char</code> object, its value is guaranteed to\n  be nonnegative. If <strong>any other character</strong> is stored in a <code>char</code> object, the\n  resulting value is <strong>implementation-defined</strong> but shall be within the\n  range of values that can be represented in that type.</p>\n</blockquote>\n<p>This might be useful to add that <code>fgets</code> function has prototype as:</p>\n<blockquote>\n<p id=\"so_24767313_24767605_1\">char *fgets(char * restrict s, int n, FILE * restrict stream);</p>\n</blockquote>\n<p>For example diacritic <code>\u015b</code> is encoded in UTF-8 as two bytes: <code>C5</code> (<code>197</code> in decimal, so it's outside <code>-128..127</code> range assuming signed variant of <code>char</code>) and <code>9B</code>. It's implementation-defined that <code>C5</code> is actually stored in a <code>char</code> object. As UTF-8 encoding \"produces\" bytes representation, there is no practical issue with storing value in any single-byte range.</p>\n<hr>\n<p>For first question check: <a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">Undefined, unspecified and implementation-defined behavior</a>.</p>\n</hr>", "OwnerUserId": "586873", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:20:46.790", "Id": "24767605", "Score": "2", "CreationDate": "2014-07-15T20:30:35.120", "LastActivityDate": "2014-07-15T21:07:38.363"}});