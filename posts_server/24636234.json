post_cb({"bq_ids": {"n4140": {"so_24636234_24636383_4": {"length": 6, "quality": 1.0, "section_id": 6695}, "so_24636234_24636383_1": {"length": 13, "quality": 1.0, "section_id": 6695}, "so_24636234_24637204_3": {"length": 15, "quality": 1.0, "section_id": 6682}, "so_24636234_24637204_2": {"length": 6, "quality": 1.0, "section_id": 6682}, "so_24636234_24636383_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 6695}, "so_24636234_24637204_4": {"length": 9, "quality": 1.0, "section_id": 6682}, "so_24636234_24636234_0": {"length": 56, "quality": 0.9333333333333333, "section_id": 6695}, "so_24636234_24636383_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 6695}, "so_24636234_24636383_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6695}, "so_24636234_24637204_0": {"length": 6, "quality": 1.0, "section_id": 6682}}, "n3337": {"so_24636234_24636383_4": {"length": 6, "quality": 1.0, "section_id": 6450}, "so_24636234_24637204_3": {"length": 15, "quality": 1.0, "section_id": 6437}, "so_24636234_24636383_1": {"length": 13, "quality": 1.0, "section_id": 6450}, "so_24636234_24637204_2": {"length": 6, "quality": 1.0, "section_id": 6437}, "so_24636234_24636234_0": {"length": 56, "quality": 0.9333333333333333, "section_id": 6450}, "so_24636234_24637204_4": {"length": 9, "quality": 1.0, "section_id": 6437}, "so_24636234_24636383_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 6450}, "so_24636234_24636383_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 6450}, "so_24636234_24636383_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6450}, "so_24636234_24637204_0": {"length": 6, "quality": 1.0, "section_id": 6437}}, "n4659": {"so_24636234_24636383_4": {"length": 6, "quality": 1.0, "section_id": 8170}, "so_24636234_24637204_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 8157}, "so_24636234_24636383_1": {"length": 13, "quality": 1.0, "section_id": 8170}, "so_24636234_24637204_2": {"length": 6, "quality": 1.0, "section_id": 8157}, "so_24636234_24636234_0": {"length": 56, "quality": 0.9333333333333333, "section_id": 8170}, "so_24636234_24637204_4": {"length": 9, "quality": 1.0, "section_id": 8157}, "so_24636234_24636383_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 8170}, "so_24636234_24636383_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 8170}, "so_24636234_24636383_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 8170}, "so_24636234_24637204_0": {"length": 6, "quality": 1.0, "section_id": 8157}}}, "24636383": {"Id": "24636383", "PostTypeId": "2", "Body": "<p>The <code>protected</code> access only applies to parent members <em>of your own current object type</em>. You don't get public access to the protected members of <em>other</em> objects of the parent type. In your example you only get access to the default base contructor as part of a <code>Derived</code>, not when it's a standalone object as <code>b</code>.</p>\n<p>Let's break down the quote you posted from the standard (11.4/1). We'll assume that <code>C</code> in the standard corresponds to your <code>Derived</code> class:</p>\n<blockquote>\n<p id=\"so_24636234_24636383_0\">An additional access check beyond those described earlier in Clause 11\n  is applied when a non-static data member or non-static member function\n  is a protected member of its naming class (11.2).</p>\n</blockquote>\n<p>So the base class constructor is effectively a <code>non-static member function</code> of its naming class (<code>B</code>) here, so this clause applies so far.</p>\n<blockquote>\n<p id=\"so_24636234_24636383_1\">As described earlier, access to a protected member is granted because\n  the reference occurs in a friend or member of some class C.</p>\n</blockquote>\n<p>Member (constructor) of <code>C</code> so we're still good here.</p>\n<blockquote>\n<p id=\"so_24636234_24636383_2\">If the access is to form a pointer to member (5.3.1), the\n  nested-name-specifier shall denote C or a class derived from C.</p>\n</blockquote>\n<p>This is <em>not</em> a pointer to member so this doesn't apply.</p>\n<blockquote>\n<p id=\"so_24636234_24636383_3\">All other accesses involve a (possibly implicit) object expression\n  (5.2.5).</p>\n</blockquote>\n<p>The standard then asserts that all other possible accesses must involve an object expression.</p>\n<blockquote>\n<p id=\"so_24636234_24636383_4\">In this case, the class of the object expression shall be C or a class\n  derived from C.</p>\n</blockquote>\n<p>Finally the standard states that the class of the expression must be <code>C</code> or a further derived class. In this case your expression <code>Base()</code> is in fact a <code>C</code>, calling the parent constructor (think about it as <code>this-&gt;Base()</code>. The expression <code>b</code> is clearly of type <code>Base</code> (that's the explicitly declared type of the member <code>b</code>, think about <code>this-&gt;b-&gt;Base()</code>). Now we do the check: Is <code>Base</code> a <code>C</code> or child of <code>C</code>? It is not, so the code is not legal.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2014-07-14T15:00:14.057", "Score": "1", "CreationDate": "2014-07-08T15:54:39.037", "ParentId": "24636234", "CommentCount": "3", "OwnerUserId": "251738", "LastEditDate": "2014-07-14T15:00:14.057"}, "24637204": {"Id": "24637204", "PostTypeId": "2", "Body": "<p>C++11 \u00a711.2/5:</p>\n<blockquote>\n<p id=\"so_24636234_24637204_0\"><strong>\u201d</strong><br>\n  A member <code>m</code> is accessible at the point <em>R</em> when named in class <code>N</code> if</br></p>\n<ul>\n<li><p id=\"so_24636234_24637204_1\"><code>m</code> as a member of <code>N</code> is public, or</p></li>\n<li><p id=\"so_24636234_24637204_2\"><code>m</code> as a member of <code>N</code> is private, and <em>R</em> occurs in a member or friend of class <code>N</code>, or</p></li>\n<li><p id=\"so_24636234_24637204_3\"><code>m</code> as a member of <code>N</code> is protected, and <em>R</em> occurs in a member or friend of class <code>N</code>,\n  or in a member or friend of a class <code>P</code> derived\n  from <code>N</code>, where <code>m</code> as a member of <code>P</code> is public, private, or protected, or  </p></li>\n<li><p id=\"so_24636234_24637204_4\">there exists a base class <code>B</code> of <code>N</code> that is accessible at <em>R</em>,\n  and <code>m</code> is accessible at <em>R</em> when named in class <code>B</code>.</p></li>\n</ul>\n</blockquote>\n<p>For your constructor invocation </p>\n<pre><code>Base b2;\n</code></pre>\n<p>the 3<sup>rd</sup> point above applies. <code>m</code> is the <code>Base</code> constructor. <code>N</code>, the naming class, is <code>Base</code>. <code>m</code> as a member of <code>Base</code> is protected, and the declaration occurs in a member of class <code>Derived</code> derived from <code>Base</code>, but it's not the case that the <code>Base</code> constructor as a member of <code>Derived</code> is public, private or protected: it\u2019s simply not a member of <code>Derived</code>, constructors are not implicitly inherited.</p>\n<p>I think the language \u201cis public, private, or protected\u201d is pretty awkward; I can only surmise that it\u2019s the result of some evolution of this paragraph.</p>\n<p>I have yet to find an explanation of how formally the protected <code>Base</code> constructor is accessible in a member initializer list in <code>Derived</code>, but then I just started looking at this for this question.</p>\n<hr>\n<p><em>Update</em>: I fail to find any language in the standard pertaining to access to constructors in an initializer list, and I fail to find any Defect Report about it. It\u2019s quite possibly a defect.</p>\n</hr>", "LastEditorUserId": "464581", "LastActivityDate": "2014-07-08T18:06:10.683", "Score": "1", "CreationDate": "2014-07-08T16:38:11.417", "ParentId": "24636234", "CommentCount": "3", "OwnerUserId": "464581", "LastEditDate": "2014-07-08T18:06:10.683"}, "24636234": {"ViewCount": "1754", "Body": "<p>A derived class can call a protected base class constructor in its <em>ctor-initializer</em>, but only for its own base class subobject, and not elsewhere:</p>\n<pre><code>class Base {\n  protected:\n    Base() {}\n};\n\nclass Derived : Base {\n  Base b;\n  public:\n    Derived(): Base(),    // OK\n               b() {      // error\n        Base b2;          // error\n    }\n};\n</code></pre>\n<p>What does the standard say about this? Here is [class.protected]/1:</p>\n<blockquote>\n<p id=\"so_24636234_24636234_0\">An additional access check beyond those described earlier in Clause 11 is applied when a non-static data\n  member or non-static member function is a protected member of its naming class (11.2) As described\n  earlier, access to a protected member is granted because the reference occurs in a friend or member of some\n  class <code>C</code>. If the access is to form a pointer to member (5.3.1), the <em>nested-name-specifier</em> shall denote <code>C</code> or a\n  class derived from <code>C</code>. All other accesses involve a (possibly implicit) object expression (5.2.5). In this case,\n  the class of the object expression shall be <code>C</code> or a class derived from <code>C</code>. [ <em>Example:</em> ...</p>\n</blockquote>\n<p>Is there an object expression involved when calling a constructor? There isn't, is there? So where in the standard is access control for protected base class constructors described?</p>\n", "Title": "Access to protected constructor of base class", "CreationDate": "2014-07-08T15:47:36.907", "LastActivityDate": "2014-07-14T15:00:14.057", "CommentCount": "5", "LastEditDate": "2014-07-08T16:19:49.903", "PostTypeId": "1", "LastEditorUserId": "481267", "Id": "24636234", "Score": "10", "OwnerUserId": "481267", "Tags": "<c++><oop><language-lawyer>", "AnswerCount": "2"}});