post_cb({"19876414": {"CommentCount": "0", "ViewCount": "148", "CreationDate": "2013-11-09T13:18:38.597", "LastActivityDate": "2013-11-09T13:49:02.813", "Title": "Does va_arg use the pre- or post-mangled type as its second argument?", "PostTypeId": "1", "Id": "19876414", "Score": "2", "Body": "<p>When using C-level variable arguments:</p>\n<pre><code>void  example( size_t length, ... )\n{\n    va_list  list;\n    T        x;\n    va_start( list, length );\n    //...\n    x = va_arg( list, T );\n    //...\n    va_end( list );\n}\n</code></pre>\n<p>some types get altered when passed through the \"<code>...</code>\".  For example, a <code>float</code> becomes a <code>double</code>.  If <code>T</code> is such a type, am I supposed to put the original type or the mangled one into <code>va_arg</code>?</p>\n<p>If the answer differs for C and C++ and/or Standard revisions, please indicate that.</p>\n<p>(Quick glances around here suggest that the mangled type is supposed to be used. I hope not, since that's broken because it requires the user to compute the type, which is a pain if the original type is behind a type-alias, especially aliases that don't have a universal original, like <code>size_t</code>.  Hopefully, the title of my post is more searchable.)</p>\n<p>(With more thought, I realize that the destination variable has to be declared with the mangled type. So using the mangled type in <code>va_arg</code>, if true, is less stupid than I thought. I get spoiled by C++11's <code>auto</code> sometimes.)</p>\n", "Tags": "<c++><c><variadic-functions>", "OwnerUserId": "1010226", "AnswerCount": "1"}, "19876502": {"ParentId": "19876414", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_19876414_19876502_0\">If T is such a type, am I supposed to put the original type or the mangled one into <code>va_arg</code>?</p>\n</blockquote>\n<p>If <code>T</code> is a type subject to promotion, then you are supposed to put in the <strong>converted type,</strong> else the program has undefined behavior.</p>\n<blockquote>\n<p id=\"so_19876414_19876502_1\">If the answer differs for C and C++ and/or Standard revisions, please indicate that.</p>\n</blockquote>\n<p>As far as I know, both C and C++ require this.</p>\n<hr>\n<blockquote>\n<p id=\"so_19876414_19876502_2\">With more thought, I realize that the destination variable has to be declared with the mangled type</p>\n</blockquote>\n<p>No, that's not a must. Since it is guaranteed that the \"call\" to the <code>va_arg()</code> macro will be of the type that you specify as its second argument, then something like</p>\n<pre><code>float f = va_arg(args, double);\n</code></pre>\n<p>will be perfectly fine, since <code>va_arg(...)</code> evaluates to an expression of type <code>double</code>, and that will then be implicitly converted to a <code>float</code>.</p>\n<hr>\n<p>Edit: some standard quotes.</p>\n<p>I. C99, 7.15.1.1.2:</p>\n<blockquote>\n<p id=\"so_19876414_19876502_3\">[...] If there is no actual next argument, or if type is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined [...].</p>\n</blockquote>\n<p>II. C++11 working draft, 18.10.3:</p>\n<blockquote>\n<p id=\"so_19876414_19876502_4\">The restrictions that ISO C places on the second parameter to the <code>va_start()</code> macro in header <code>&lt;stdarg.h&gt;</code> are different in this International Standard. The parameter <code>parmN</code> is the identifier of the rightmost parameter in the variable parameter list of the function definition (the one just before the ...). If the parameter <code>parmN</code> is declared with a function, array, or reference type, or with a type that is not compatible with the type that results when passing an argument for which there is no parameter, the behavior is undefined.</p>\n</blockquote>\n<p>For me, the above (C++) quote doesn't really seem to be related to the behavior of default promotions; however, I think that by saying \"the restrictions are different\", they mean that they are the same <em>except for the following [above] clause.</em></p>\n</hr></hr>", "Id": "19876502", "LastEditDate": "2013-11-09T13:49:02.813", "OwnerDisplayName": "user529758", "Score": "4", "CreationDate": "2013-11-09T13:27:36.137", "LastActivityDate": "2013-11-09T13:49:02.813", "LastEditorDisplayName": "user529758"}, "bq_ids": {"n4140": {"so_19876414_19876502_4": {"section_id": 6966, "quality": 0.8666666666666667, "length": 39}}, "n3337": {"so_19876414_19876502_4": {"section_id": 6713, "quality": 0.9333333333333333, "length": 42}}, "n4659": {"so_19876414_19876502_4": {"section_id": 8465, "quality": 0.8444444444444444, "length": 38}}}});