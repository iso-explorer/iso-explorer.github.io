post_cb({"2329041": {"Id": "2329041", "PostTypeId": "2", "Body": "<pre><code>Bar(): foo(foo) {};\n</code></pre>\n<p>This will call the copy constructor of <code>foo</code>, thus copy-constructing from a non-initialized object. That will result in undefined behavior, except if you have implemented a copy constructor that handles that specific case, for example:</p>\n<pre><code>class Foo\n{\n    public:\n        Foo()\n        {\n            std::cout &lt;&lt; \"Foo()\";\n        }\n\n        Foo(const Foo&amp; from)\n        {\n            if(this == &amp;from) std::cout &lt;&lt; \"special case\";\n            else std::cout &lt;&lt; \"other case\"; \n        }\n};\n</code></pre>\n<p>But that special case is normally used for other purposes, like cheap copies of strings (when using a string class). So don't try and exploit that special case ;)</p>\n", "LastActivityDate": "2010-02-24T19:58:42.930", "CommentCount": "2", "CreationDate": "2010-02-24T19:58:42.930", "ParentId": "2328960", "Score": "5", "OwnerUserId": "245706"}, "2328970": {"Id": "2328970", "PostTypeId": "2", "Body": "<p><code>foo</code> is fully initialized once you've entered the body of the constructor (that's the guaranteed general case; specifically once it has finished initializing in the initialize list.)</p>\n<p>In your case, you are copy-constructing from a non-constructed object. This results in undefined behavior, per \u00a712.7/1 (thank you, gf):</p>\n<blockquote>\n<p id=\"so_2328960_2328970_0\">For an object of non-POD class type (clause 9), before the constructor begins execution and after the destructor finishes execution, referring to any nonstatic member or base class of the object results in undefined behavior.</p>\n</blockquote>\n<p>In fact, it gives this example:</p>\n<pre><code>struct W { int j; };\nstruct X : public virtual W { };\nstruct Y {\n    int *p;\n    X x;\n    Y() : p(&amp;x.j) // undefined, x is not yet constructed\n    { }\n};\n</code></pre>\n<p>Note, the compiler is <em>not</em> required to give a diagnosis of undefined behavior, per \u00a71.4/1. While I think we all agree it would be nice, it simply isn't something the compiler implementers need to worry about.</p>\n<hr>\n<p>Charles points out a loophole of sorts. If <code>Bar</code> has static storage and if <code>Foo</code> is a POD type, then it <em>will</em> be initialized when this code runs. Static-stored variables are zero-initialized before an other initialization runs.</p>\n<p>This means whatever <code>Foo</code> is, as long as it doesn't need a constructor to be run to be initialized (i.e., be POD) it's members will be zero-initialized. Essentially, you'll be copying a zero-initialized object.</p>\n<p>In general though, such code is to be avoided. :)</p>\n</hr>", "LastEditorUserId": "87234", "LastActivityDate": "2010-02-24T20:47:45.543", "Score": "12", "CreationDate": "2010-02-24T19:47:35.290", "ParentId": "2328960", "CommentCount": "19", "OwnerUserId": "87234", "LastEditDate": "2010-02-24T20:47:45.543"}, "bq_ids": {"n4140": {"so_2328960_2328970_0": {"length": 16, "quality": 0.6956521739130435, "section_id": 444}}, "n3337": {"so_2328960_2328970_0": {"length": 16, "quality": 0.6956521739130435, "section_id": 435}}, "n4659": {"so_2328960_2328970_0": {"length": 16, "quality": 0.6956521739130435, "section_id": 467}}}, "2328960": {"ViewCount": "321", "Body": "<p>I have:</p>\n<pre><code>class Foo;\n\nclass Bar {\n  Foo foo;\n  Bar(): foo(foo) {};\n}\n\nBar bar;\n</code></pre>\n<p>At this point, is</p>\n<pre><code>bar.foo // &lt;--- how is this initialized?\n</code></pre>\n<p>[This question arose from a buggy ref-counted pointer implemntation; I could have sworn that I ensured each pointer was pointing at something non-null; but I ended up with a pointer that pointed at something NULL.]</p>\n", "AcceptedAnswerId": "2328970", "Title": "C++ constructors fun - constructing Foo with a copy of itself", "CreationDate": "2010-02-24T19:45:13.830", "Id": "2328960", "CommentCount": "6", "LastEditDate": "2010-02-24T20:26:37.833", "PostTypeId": "1", "LastEditorUserId": "87234", "LastActivityDate": "2010-02-24T20:47:45.543", "Score": "8", "OwnerUserId": "247265", "Tags": "<c++><constructor>", "AnswerCount": "4"}, "2328977": {"Id": "2328977", "PostTypeId": "2", "Body": "<p>Isn't Foo using a default intrinsic constructor, with the initialisation list invoking that default constructor automatically to initialise the object?</p>\n", "LastActivityDate": "2010-02-24T19:48:55.813", "CommentCount": "0", "CreationDate": "2010-02-24T19:48:55.813", "ParentId": "2328960", "Score": "0", "OwnerUserId": "87197"}, "2328996": {"Id": "2328996", "PostTypeId": "2", "Body": "<p>A slightly expanded version of your code seems to indicate that no, <code>foo</code> is never initialized; you would seem to have undefined behavior.  In this example, <code>\"Foo()\"</code> is never printed, indicating no instance of <code>Foo</code> is ever constructed:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Foo {\npublic:\n    Foo() { std::cerr &lt;&lt; \"Foo()\"; }\n};\n\nclass Bar {\npublic:\n    Foo foo;\n    Bar(): foo(foo) {};\n};\n\nint main() {\n    Bar bar;\n}\n</code></pre>\n", "LastEditorUserId": "229044", "LastActivityDate": "2010-02-24T19:57:36.707", "Score": "3", "CreationDate": "2010-02-24T19:52:11.633", "ParentId": "2328960", "CommentCount": "2", "OwnerUserId": "229044", "LastEditDate": "2010-02-24T19:57:36.707"}});