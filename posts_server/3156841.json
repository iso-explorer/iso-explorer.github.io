post_cb({"3156841": {"Tags": "<c++><boost><filesystems>", "ViewCount": "9607", "AnswerCount": "1", "CreationDate": "2010-07-01T10:15:04.057", "FavoriteCount": "1", "Title": "boost::filesystem::rename: Cannot create a file when that file already exists", "CommentCount": "0", "AcceptedAnswerId": "3158112", "Score": "3", "OwnerUserId": "78947", "Id": "3156841", "LastActivityDate": "2010-07-01T13:24:01.227", "Body": "<p>I'm renaming a file using boost::filesystem, and sometimes the target file will exist. According to the boost documentation here:</p>\n<p><a href=\"http://www.boost.org/doc/libs/1_42_0/libs/filesystem/doc/reference.html#Non-member-functions\" rel=\"nofollow noreferrer\">http://www.boost.org/doc/libs/1_42_0/libs/filesystem/doc/reference.html#Non-member-functions</a></p>\n<blockquote>\n<p id=\"so_3156841_3156841_0\">template \n  void rename(const Path1&amp; from_p, const\n  Path2&amp; to_p); Requires:\n  Path1::external_string_type and\n  Path2::external_string_type are the\n  same type.</p>\n<p id=\"so_3156841_3156841_1\">Effects: Renames from_p to to_p, as if\n  by POSIX rename().</p>\n<p id=\"so_3156841_3156841_2\">Postconditions: !exists(from_p) &amp;&amp;\n  exists(to_p), and the contents and\n  attributes of the file originally\n  named from_p are otherwise unchanged.</p>\n<p id=\"so_3156841_3156841_3\">[Note: If from_p and to_p resolve to\n  the same file, no action is taken.\n  Otherwise, <strong>if to_p resolves to an\n  existing file, it is removed</strong>. A\n  symbolic link is itself renamed,\n  rather than the file it resolves to\n  being renamed. -- end note]</p>\n</blockquote>\n<p>(my emphasis)</p>\n<p>When testing this code compiled via MS Visual Studio 2008 on XP SP3, the rename throws boost::filesystem::filesystem_error with the message:</p>\n<p>Cannot create a file when that file already exists</p>\n<p>I note this has been raised in a bug report:\n<a href=\"https://svn.boost.org/trac/boost/ticket/2866\" rel=\"nofollow noreferrer\">https://svn.boost.org/trac/boost/ticket/2866</a></p>\n<p>... but claims to be closed in Boost 1.41.0 and I'm using Boost 1.42.0.</p>\n<p>Am I doing something wrong here or should I just revert to std::rename?</p>\n<p>I haven't tested this on Linux yet so don't know if the problem exists there too. </p>\n", "PostTypeId": "1"}, "bq_ids": {"n4659": {"so_3156841_3156841_3": {"length": 18, "section_id": 3202, "quality": 0.6923076923076923}}}, "3158112": {"ParentId": "3156841", "Score": "3", "CreationDate": "2010-07-01T13:14:22.610", "LastActivityDate": "2010-07-01T13:24:01.227", "LastEditDate": "2010-07-01T13:24:01.227", "OwnerUserId": "256362", "LastEditorUserId": "256362", "Body": "<p>Looks like it was fixed, but only in the sandbox \"V3\" version of Boost.Filesystem, which is not in the mainline Boost releases yet.</p>\n<p>I tested on Boost 1.43.0 on Linux with the same results - in fact the bug report points out the offending code, which explicitly checks for existence on POSIX and throws the exception.  It's possible this was done originally because <code>MoveFile</code> on Windows exhibits the same behavior?  In the sandbox V3 version, rename will call <code>MoveFileEx</code> on Windows and <code>std::rename</code> on POSIX, and allows overwriting an existing file.</p>\n<p>I suppose you could work around it by calling <code>boost::filesystem::remove</code> on the target before calling <code>boost::filesystem::rename</code>, depending upon whether your program needs the operation to be atomic or not.</p>\n", "Id": "3158112", "PostTypeId": "2", "CommentCount": "1"}});