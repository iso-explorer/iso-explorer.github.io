post_cb({"18759947": {"CommentCount": "2", "ViewCount": "368", "PostTypeId": "1", "LastEditorUserId": "1673391", "CreationDate": "2013-09-12T09:03:51.513", "LastActivityDate": "2013-09-12T11:43:16.383", "Title": "Unable to resolve macro precedence in C?", "AcceptedAnswerId": "18760039", "LastEditDate": "2013-09-12T11:28:42.987", "Id": "18759947", "Score": "7", "Body": "<p>I was trying to write a simple C program. Here I have defined a macro.</p>\n<pre><code>#define NAME(x) #x ## _bingo\n</code></pre>\n<p>Now which one (<code>#</code> and <code>##</code>) of them will be solved first? </p>\n<p>I am stuck :) . I tried to google about such macro precedence. But couldn't find anything relevant. </p>\n", "Tags": "<c><visual-c++><c-preprocessor>", "OwnerUserId": "1983944", "AnswerCount": "1"}, "18760039": {"ParentId": "18759947", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2013-09-12T09:08:35.137", "Score": "11", "LastEditorUserId": "1394283", "LastEditDate": "2013-09-12T11:43:16.383", "Id": "18760039", "OwnerUserId": "1394283", "Body": "<blockquote>\n<p id=\"so_18759947_18760039_0\">Now which one (# and ##) of them will be solved first?</p>\n</blockquote>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_18759947_18760039_1\"><strong>16.3.2 The # operator [cpp.stringize]</strong></p>\n<p id=\"so_18759947_18760039_2\">2/ [...] The order of evaluation of <code>#</code> and <code>##</code> operators is unspecified.</p>\n</blockquote>\n<p>But what are you trying to achieve here? It seems that:</p>\n<pre><code>#define NAME(x) x ## _bingo\n</code></pre>\n<p>Would be enough if you want to concatenate the <code>x</code> token and <code>_bingo</code>.</p>\n<p>Example:</p>\n<pre><code>NAME(foo)\n</code></pre>\n<p>would be expanded as</p>\n<pre><code>foo_bingo\n</code></pre>\n<p><strong>EDIT :</strong></p>\n<p>If you want to <em>stringify</em> the generated token with the <code>NAME</code> macro, here is an example on how you can do this (solve the problem of macro replacement -&gt; <em>16.3.1 of the standard</em>):</p>\n<pre><code>#define NAME(x)  x##_bingo\n\n// Converts the parameter x to a string after macro replacement\n// on x has been performed if needed.\n#define STRINGIFY(x)    DO_STRINGIFY(x)\n#define DO_STRINGIFY(x) #x\n\nint main() {\n    std::string n  = STRINGIFY( NAME( foo ) );\n    std::string n2 = DO_STRINGIFY( NAME(foo) );\n\n    // Will print foo_bingo as expected\n    std::cout &lt;&lt; n &lt;&lt; std::endl;\n\n    // Will print NAME( foo ) because the macro NAME is not expanded\n    std::cout &lt;&lt; n2 &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>foo_bingo\nNAME(foo)\n</code></pre>\n", "LastActivityDate": "2013-09-12T11:43:16.383"}, "bq_ids": {"n4140": {"so_18759947_18760039_2": {"section_id": 526, "quality": 0.8, "length": 4}}, "n3337": {"so_18759947_18760039_2": {"section_id": 517, "quality": 0.8, "length": 4}}, "n4659": {"so_18759947_18760039_2": {"section_id": 547, "quality": 0.8, "length": 4}}}});