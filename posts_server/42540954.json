post_cb({"42541000": {"Id": "42541000", "PostTypeId": "2", "Body": "<p>There is a sequence point after function argument evaluation (i.e. before the code of any function is entered). Hence, <code>bar()</code> must be evaluated before <code>foo(...)</code> will be entered. Confer, for example, the <a href=\"http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">C11 standard</a>:</p>\n<blockquote>\n<p id=\"so_42540954_42541000_0\">6.5.2.2 Function calls: (10) There is a sequence point after the evaluations of the function designator and the actual arguments but before the actual call. Every evaluation in the calling function (including other function calls) that is not otherwise specifically sequenced before or after the execution of the body of the called function is indeterminately sequenced with respect to the execution of the called function.</p>\n</blockquote>\n", "LastEditorUserId": "2630032", "LastActivityDate": "2017-03-01T20:47:45.537", "Score": "0", "CreationDate": "2017-03-01T20:04:41.770", "ParentId": "42540954", "CommentCount": "1", "LastEditDate": "2017-03-01T20:47:45.537", "OwnerUserId": "2630032"}, "42541005": {"Id": "42541005", "PostTypeId": "2", "Body": "<blockquote id=\"so_42540954_42541005_0\">\n<ol>\n<li>Is it required that <code>bar()</code> is called first [\u2026]?</li>\n</ol>\n</blockquote>\n<p>The code is required to behave as if that's what's happening.</p>\n<blockquote id=\"so_42540954_42541005_1\">\n<ol start=\"2\">\n<li>Is it permitted that the compiler reorders the above [\u2026]?</li>\n</ol>\n</blockquote>\n<p>Yes, if the observable behavior is the same as if <code>bar()</code> was evaluated first.</p>\n<p>This is known as the <a href=\"https://stackoverflow.com/q/15718262/3425536\"><strong>\"as-if\" rule</strong></a>:</p>\n<blockquote>\n<p id=\"so_42540954_42541005_2\">[\u2026] an implementation is free to disregard any requirement of this International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the observable behavior of the program.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2017-03-01T20:19:23.247", "Score": "3", "CreationDate": "2017-03-01T20:04:51.160", "ParentId": "42540954", "CommentCount": "2", "LastEditDate": "2017-05-23T11:53:53.593", "OwnerUserId": "3425536"}, "42541028": {"Id": "42541028", "PostTypeId": "2", "Body": "<p>In C++, [intro.execution]:</p>\n<blockquote>\n<p id=\"so_42540954_42541028_0\">When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function.</p>\n</blockquote>\n<p><code>bar()</code> must be evaluated before the call to <code>foo</code> begins. </p>\n<p>There was some change in C++17 that the expression <code>a(b)</code> now evaluates <code>a</code> before <code>b</code> whereas before they were unsequenced. In this case, the evaluation of <code>foo</code> doesn't do anything, it's just an identifier. But had we had <code>foo()(bar())</code>, then the call to <code>foo()</code> would be sequenced before the call to <code>bar()</code>, whereas prior to C++17, the two were unsequenced. </p>\n", "LastActivityDate": "2017-03-01T20:06:07.383", "Score": "5", "CreationDate": "2017-03-01T20:06:07.383", "ParentId": "42540954", "CommentCount": "10", "OwnerUserId": "2069064"}, "42541006": {"Id": "42541006", "PostTypeId": "2", "Body": "<p>If you have the following statement</p>\n<pre><code>foo(bar());\n</code></pre>\n<p>The function <code>bar()</code> will be called before <code>foo()</code>. The compiler cannot reorder these function calls.</p>\n", "LastActivityDate": "2017-03-01T20:04:57.813", "Score": "0", "CreationDate": "2017-03-01T20:04:57.813", "ParentId": "42540954", "CommentCount": "0", "OwnerUserId": "2296458"}, "bq_ids": {"n4140": {"so_42540954_42541000_0": {"length": 26, "quality": 0.6666666666666666, "section_id": 5811}, "so_42540954_42541005_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 5797}, "so_42540954_42541028_0": {"length": 28, "quality": 1.0, "section_id": 5811}}, "n3337": {"so_42540954_42541000_0": {"length": 26, "quality": 0.6666666666666666, "section_id": 5584}, "so_42540954_42541005_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 5570}, "so_42540954_42541028_0": {"length": 28, "quality": 1.0, "section_id": 5584}}, "n4659": {"so_42540954_42541005_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 7256}, "so_42540954_42541028_0": {"length": 28, "quality": 1.0, "section_id": 7273}}}, "42541314": {"Id": "42541314", "PostTypeId": "2", "Body": "<p>In addition to what others have said, you might consider </p>\n<pre><code>  foo( bar1(), bar2() );\n</code></pre>\n<p>which is a more interesting case. Here, the order is allowed to be [bar1, bar2, foo] or [bar2, bar1, foo].</p>\n", "LastActivityDate": "2017-03-01T20:22:01.807", "Score": "2", "CreationDate": "2017-03-01T20:22:01.807", "ParentId": "42540954", "CommentCount": "0", "OwnerUserId": "4971422"}, "42540954": {"ViewCount": "105", "Body": "<p>Assume we have code like this in C or C++:</p>\n<pre><code>foo(bar());\n</code></pre>\n<p>What is the function execution order in this case?</p>\n<ol>\n<li>Is it required that <code>bar()</code> is called first, and <code>foo()</code> is called no earlier than <code>bar()</code> returns, in which case <code>foo()</code> is passed the return value of <code>bar()</code>?</li>\n<li>Is it permitted that the compiler reorders the above, namely that it calls <code>foo()</code> first, and delays calling <code>bar()</code> until in the code of <code>foo()</code> the value of <code>foo()</code>\u2019s parameter is actually needed?</li>\n</ol>\n<p>Case 2 could be useful for optimization should <code>foo()</code> be defined like this:</p>\n<pre><code>void foo(someType par) {\n    if(someTest())\n        baz1();\n    else\n        baz2(par);\n}\n</code></pre>\n<p>In which case calling <code>bar()</code> could even be completely skipped if <code>someTest()</code> returns <code>false</code>.</p>\n<p>However, case 2 would also make the programmer have to be more careful, as it could sometimes lead to subtle bugs (for example with recurrence).</p>\n", "AcceptedAnswerId": "42541005", "Title": "What is the function execution order in code like foo(bar())?", "CreationDate": "2017-03-01T20:02:11.667", "Id": "42540954", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2017-11-22T23:59:16.340", "Score": "1", "OwnerUserId": "4385532", "Tags": "<c++><c><order>", "AnswerCount": "6"}, "42541313": {"Id": "42541313", "PostTypeId": "2", "Body": "<p>It's same as :</p>\n<pre><code>type bar_result = bar();\nfoo(bar_result);\n</code></pre>\n<ol>\n<li>bar() will be called first. </li>\n<li>bar_result is passed as a copy/referencie.</li>\n</ol>\n", "LastEditorUserId": "2112278", "LastActivityDate": "2017-11-22T23:59:16.340", "Score": "0", "CreationDate": "2017-03-01T20:22:01.577", "ParentId": "42540954", "CommentCount": "4", "LastEditDate": "2017-11-22T23:59:16.340", "OwnerUserId": "2112278"}});