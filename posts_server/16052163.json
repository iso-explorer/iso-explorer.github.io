post_cb({"16052476": {"Id": "16052476", "PostTypeId": "2", "Body": "<p>There is no requirement on what <code>type_info::name()</code> looks like.</p>\n<blockquote>\n<p id=\"so_16052163_16052476_0\">The result of a <code>typeid</code> expression is an lvalue of static type <code>const std::type_info</code> (18.7.1) and dynamic type\n  <code>const std::type_info</code> or <code>const name</code> where name is an implementation-defined class publicly derived from\n  <code>std::type_info</code></p>\n</blockquote>\n<p>Then, about <code>std::type_info::name()</code>:</p>\n<blockquote>\n<p id=\"so_16052163_16052476_1\"><code>const char* name() const;</code></p>\n<p id=\"so_16052163_16052476_2\"><em>Returns:</em> an implementation-defined NTBS.</p>\n<p id=\"so_16052163_16052476_3\">[...]</p>\n</blockquote>\n<p><em>NTBS</em> is simply a shorthand for <em>null-terminated byte string</em>.</p>\n<p>In other words: You should not rely on any value of <code>type_info::name()</code>.</p>\n<h3>What you actually see with g++:</h3>\n<p>Those names are <a href=\"http://en.wikipedia.org/wiki/Name_mangling\" rel=\"nofollow\">mangled names</a>, and g++'s implementation of such mangled names is based on <a href=\"https://en.wikipedia.org/wiki/String_%28computer_science%29#Length-prefixed\" rel=\"nofollow\">length-prefixed strings</a>, where each substring is the namespace name, plus some other info; but that's basically it.</p>\n<p>For example:</p>\n<pre><code>unmangled: foo::bar::Frob\nmangled:   3foo3bar4Frob\n</code></pre>\n<p>Example to put into your compiler:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nnamespace foo { namespace bar { \n    enum Frob {};\n    class Frobnicate {};\n    Frob frob;\n\n    template &lt;typename T&gt; void Meh() { throw T(); }\n} }\n\nint main () {\n    std::cout &lt;&lt; typeid(foo::bar::Frob).name() &lt;&lt; '\\n'\n              &lt;&lt; typeid(foo::bar::Frobnicate).name()  &lt;&lt; '\\n'  \n              &lt;&lt; typeid(foo::bar::frob).name() &lt;&lt; '\\n'\n              &lt;&lt; typeid(foo::bar::Meh&lt;int&gt;).name() &lt;&lt; '\\n'\n              &lt;&lt; typeid(foo::bar::Meh&lt;float&gt;).name() &lt;&lt; '\\n'\n    ;\n}\n</code></pre>\n<p>Output for me:</p>\n<pre><code>N3foo3bar4FrobE\nN3foo3bar10FrobnicateE\nN3foo3bar4FrobE\nFvvE\nFvvE\n</code></pre>\n<p>The latter two show you that one even cannot rely on names being different.</p>\n", "LastEditorUserId": "76722", "LastActivityDate": "2013-04-17T08:14:50.563", "Score": "3", "CreationDate": "2013-04-17T05:47:28.347", "ParentId": "16052163", "CommentCount": "3", "OwnerUserId": "76722", "LastEditDate": "2013-04-17T08:14:50.563"}, "bq_ids": {"n4140": {"so_16052163_16052476_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 6020}, "so_16052163_16052476_1": {"length": 4, "quality": 1.0, "section_id": 2579}}, "n3337": {"so_16052163_16052476_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5788}, "so_16052163_16052476_1": {"length": 4, "quality": 1.0, "section_id": 4692}}, "n4659": {"so_16052163_16052476_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 7519}, "so_16052163_16052476_1": {"length": 4, "quality": 1.0, "section_id": 3317}}}, "16053064": {"Id": "16053064", "PostTypeId": "2", "Body": "<p>In case you are interested in \"demangling\" the name, g++ has a compiler-specific function to do this.</p>\n<p>You can find an example in <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html</a></p>\n", "LastEditorUserId": "759866", "LastActivityDate": "2013-11-24T12:17:08.327", "Score": "2", "CreationDate": "2013-04-17T06:28:31.297", "ParentId": "16052163", "CommentCount": "2", "OwnerUserId": "924727", "LastEditDate": "2013-11-24T12:17:08.327"}, "16052163": {"ViewCount": "2917", "Body": "<p>I have implemented below program for my own understanding. But I see the class name returned by typeid is slightly modified. I knew it could be because of name mangling but including extern C doesn\u2019t help either.</p>\n<p>Can someone please help me understand why such behavior and also how to fix it?</p>\n<p>g++ version - 4.7.0</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nusing namespace std;\n\nclass Base\n{\n    public:\n        virtual ~Base(){}\n};\n\nclass Derive : public Base\n{\n    public:\n        ~Derive(){}\n};\n\nclass newBase\n{\n    public:\n        ~newBase(){}\n};\n\nclass newDerive : public newBase\n{\n    public:\n        ~newDerive(){}\n};\n\nint main()\n{\n    Base base;\n    Derive derive;\n    Base *pBase;\n    Base &amp; rBase1 = base;\n    Base &amp; rBase2 = derive;\n\n    newBase newbase;\n    newDerive newderive;\n    newBase *pNewBase;\n\n    //Results with polymorphic class.\n    pBase = &amp;base;\n    cout&lt;&lt;\"Base class pointer pBase contains object of type \"&lt;&lt;typeid(*pBase).name()            &lt;&lt;\".\\n\";\n\n    pBase = &amp;derive;\n    cout&lt;&lt;\"Base class pointer pBase contains object of type \"&lt;&lt;typeid(*pBase).name()&lt;&lt;\".\\n\";\n\n    cout&lt;&lt;\"\\nReference variable rBase1 referring to \"&lt;&lt;typeid(rBase1).name()&lt;&lt;\".\\n\";\n    cout&lt;&lt;\"Reference variable rBase2 referring to \"&lt;&lt;typeid(rBase2).name()&lt;&lt;\".\\n\";\n\n    //Results with non-polymorphic class.\n    pNewBase = &amp;newbase;\n    cout&lt;&lt;\"\\nBase class pointer pNewBase contains object of type \"&lt;&lt;typeid(*pNewBase).name()&lt;&lt;\".\\n\";\n\n    pNewBase = &amp;newderive;\n    cout&lt;&lt;\"Base class pointer pNewBase contains object of type \"&lt;&lt;typeid(*pNewBase).name()&lt;&lt;\".\\n\";\n\n    return 0;\n}\n\nOutput -\nBase class pointer pBase contains object of type 4Base.\nBase class pointer pBase contains object of type 6Derive.\n\nReference variable rBase1 referring to 4Base.\nReference variable rBase2 referring to 6Derive.\n\nBase class pointer pNewBase contains object of type 7newBase.\nBase class pointer pNewBase contains object of type 7newBase.\n</code></pre>\n<p>I was expecting the class name as specified in the program.</p>\n<p>Many thanks.</p>\n", "AcceptedAnswerId": "16052476", "Title": "Getting incorrect class name when using typeid -", "CreationDate": "2013-04-17T05:24:31.770", "LastActivityDate": "2013-11-24T12:17:08.327", "CommentCount": "2", "LastEditDate": "2013-04-17T05:40:29.727", "PostTypeId": "1", "Tags": "<c++><typeid>", "Id": "16052163", "AnswerCount": "2", "Score": "-1", "OwnerUserId": "1612089", "ClosedDate": "2013-04-17T10:32:01.390", "LastEditorUserId": "1612089"}});