post_cb({"18325583": {"ParentId": "18325501", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>They are not the same type.</p>\n<p><code>s2</code> is a UTF-8 or narrow string literal. The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">C++11 draft standard</a> section 2.14.5 <em>String literals</em> paragraph 7 says:</p>\n<blockquote>\n<p id=\"so_18325501_18325583_0\">A string literal that begins with <strong><code>u8</code>, such as <code>u8\"asdf\"</code></strong>, is a <strong>UTF-8 string literal</strong> and is initialized with the given characters as encoded in UTF-8.</p>\n</blockquote>\n<p>And paragraph 8 says:</p>\n<blockquote>\n<p id=\"so_18325501_18325583_1\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type <strong>\u201carray of <em>n</em> <code>const char</code>\u201d</strong>, where <em>n</em> is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p><code>s1</code> is a wide string literal which can support UTF-16 and UTF-32. Section 2.14.5 <em>String literals</em> paragraph 11 says:</p>\n<blockquote>\n<p id=\"so_18325501_18325583_2\">A string literal that begins with <strong><code>L</code>, such as <code>L\"asdf\"</code></strong>, is a <em>wide string literal</em>. A wide string literal has type <strong>\u201carray of <em>n</em> <code>const wchar_t</code>\u201d</strong>, where <em>n</em> is the size of the string as defined below; it has static storage duration and is initialized with the given characters.</p>\n</blockquote>\n<p>See <a href=\"https://stackoverflow.com/questions/496321/utf8-utf16-and-utf32\">UTF8, UTF16, and UTF32</a> for a good discussion on the differences and advantages of each.</p>\n<p>A quick way to determine types is to use <a href=\"http://en.cppreference.com/w/cpp/language/typeid\" rel=\"nofollow noreferrer\"><code>typeid</code></a>:</p>\n<pre><code>std::cout &lt;&lt; typeid(s1).name() &lt;&lt; std::endl ;\nstd::cout &lt;&lt; typeid(s2).name() &lt;&lt; std::endl ;\n</code></pre>\n<p>On my system this is the output:</p>\n<pre><code>PKw\nPKc\n</code></pre>\n<p>Checking each of these with <code>c++filt -t</code>  gives me:</p>\n<pre><code>wchar_t const*\nchar const*\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:25:27.643", "Id": "18325583", "Score": "3", "CreationDate": "2013-08-20T01:26:57.970", "LastActivityDate": "2013-08-20T06:50:24.513"}, "18325580": {"ParentId": "18325501", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The first is a wide character string, which might be encoded as UTF-16 or UTF-32, or something else entirely (though Unicode is now common enough that a completely different encoding is pretty unlikely).</p>\n<p>The second is a string of narrow characters using UTF-8 encoding.</p>\n<p>As to which is preferred: it'll depend on what you're doing, what platform you're coding for, etc. If you're mostly dealing with something like a web page/URL that's already encoded as UTF-8, and you'll probably just read it in, possibly verify its content, and later echo it back, it may well make sense to store it as UTF-8 as well.</p>\n<p>Wide character strings vary by platform. If, for one example, you're coding for Windows, and a lot of the code interacts directly with the OS (which uses UTF-16) then storing your strings as UTF-16 can make a great deal of sense (and that's what Microsoft's compiler uses for wide character strings).</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2013-08-20T01:32:41.473", "Id": "18325580", "Score": "3", "CreationDate": "2013-08-20T01:26:43.823", "LastActivityDate": "2013-08-20T01:32:41.473"}, "18325501": {"CommentCount": "0", "ViewCount": "583", "CreationDate": "2013-08-20T01:15:29.397", "LastActivityDate": "2013-08-20T06:50:24.513", "Title": "difference between L\"\" and u8\"\"", "AcceptedAnswerId": "18325583", "PostTypeId": "1", "Id": "18325501", "Score": "0", "Body": "<p>Is there any difference between the followings?</p>\n<pre><code>auto s1 = L\"\u4f60\u597d\";\nauto s2 = u8\"\u4f60\u597d\";\n</code></pre>\n<p>Are <code>s1</code> and <code>s2</code> referring to the same type?<br>\nIf no, what's the difference and which one is preferred? </br></p>\n", "Tags": "<c++><string><c++11><utf-8>", "OwnerUserId": "395573", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_18325501_18325583_1": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_18325501_18325583_0": {"section_id": 5358, "quality": 0.6923076923076923, "length": 9}, "so_18325501_18325583_2": {"section_id": 5360, "quality": 1.0, "length": 26}}, "n3337": {"so_18325501_18325583_1": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_18325501_18325583_0": {"section_id": 5152, "quality": 1.0, "length": 13}, "so_18325501_18325583_2": {"section_id": 5156, "quality": 1.0, "length": 26}}, "n4659": {"so_18325501_18325583_1": {"section_id": 6781, "quality": 1.0, "length": 26}, "so_18325501_18325583_2": {"section_id": 6785, "quality": 0.7692307692307693, "length": 20}, "so_18325501_18325583_0": {"section_id": 6783, "quality": 0.5384615384615384, "length": 7}}}, "18325564": {"ParentId": "18325501", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>L\"\"</code> creates a null-terminated string, of type <code>const wchar_t[]</code>. This is valid in C++03. (Note that <code>wchar_t</code> refers to an implementation-dependent \"wide-character\" type).</p>\n<p><code>u8\"\"</code> creates a null-terminated UTF-8 string, of type <code>const char[]</code>. This is valid only in C++11.</p>\n<p>Which one you choose is strongly dependent on what needs you have. <code>L\"\"</code> works in C++03, so if you need to work with older code (which may need to be compiled with a C++03 compiler), you'll need to use that. <code>u8\"\"</code> is easier to work with in many circumstances, particularly when the system in question normally expects <code>char *</code> strings.</p>\n", "OwnerUserId": "1204143", "LastEditorUserId": "1204143", "LastEditDate": "2013-08-20T01:39:55.633", "Id": "18325564", "Score": "4", "CreationDate": "2013-08-20T01:23:59.807", "LastActivityDate": "2013-08-20T01:39:55.633"}});