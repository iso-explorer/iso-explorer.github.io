post_cb({"33137151": {"ParentId": "33137115", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>According to the standard (<strong>5.3.4 New</strong>):</p>\n<blockquote>\n<p id=\"so_33137115_33137151_0\"><code>new T[5]</code> results in a call of <code>operator new[](sizeof(T)*5+x)</code></p>\n<p id=\"so_33137115_33137151_1\">Here, <code>x</code> ... are non-negative unspecified values representing array allocation overhead; the result of the\n  new-expression will be offset by this amount from the value returned by operator <code>new[]</code>. ...</p>\n<p id=\"so_33137115_33137151_2\">The amount of overhead may vary from one invocation of <code>new</code> to another.</p>\n</blockquote>\n<p>In practice it can be used to represent the number of allocated elements. As <strong>@vsoftco</strong> commented, \"<em>That's how operator <code>delete[]</code> knows how to perform the cleanup</em>\".</p>\n<p>See a footnote in <strong>18.6.1.2 Array forms</strong>:</p>\n<blockquote>\n<p id=\"so_33137115_33137151_3\">It is not the direct responsibility of <code>operator new[](std::size_t)</code> or <code>operator delete[](void*)</code> to note the repetition count or element size of the array. Those operations are performed elsewhere in the array <code>new</code> and <code>delete</code> expressions. The array <code>new</code> expression, may, however, increase the <code>size</code> argument to <code>operator new[](std::size_t)</code> to obtain space to store supplemental information.</p>\n</blockquote>\n", "OwnerUserId": "3246555", "LastEditorUserId": "3246555", "LastEditDate": "2015-10-15T08:11:38.427", "Id": "33137151", "Score": "5", "CreationDate": "2015-10-14T23:05:46.427", "LastActivityDate": "2015-10-15T08:11:38.427"}, "33137115": {"CommentCount": "3", "AcceptedAnswerId": "33137151", "CreationDate": "2015-10-14T23:01:47.930", "LastActivityDate": "2015-10-15T08:11:38.427", "PostTypeId": "1", "ViewCount": "91", "FavoriteCount": "1", "Title": "Custom operator new[] requests for larger than expected memory", "Id": "33137115", "Score": "3", "Body": "<p>I am at a loss as to explain why, in the sample code, the call <code>new Foo [4]</code> to the custom <code>operator new[]</code> requests 68 bytes -- 4 more bytes than it ought to (<code>sizeof(Foo) == 16</code>), whereas the more arcane call <code>Foo::operator new[]( 4 * sizeof( Foo ) )</code> correctly requests 64 bytes. Note that when the member <code>std::vector&lt;long&gt; m_dummy</code> is removed from <code>Foo</code> both calls correctly request 16 bytes (code on <a href=\"http://ideone.com/0gHdo9\" rel=\"nofollow\">ideone</a>).</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nstruct MemoryManager\n{\n    static void* allocate( unsigned size )\n    {\n        static char block[256];\n        return block;\n    }\n};\n\nclass Foo\n{\npublic:\n    void* operator new[]( size_t size )\n    {\n        std::cout &lt;&lt; \"operator new[] : data size -- \" &lt;&lt; size &lt;&lt; std::endl;\n        return MemoryManager::allocate( size );\n    }  \n\nprivate:\n    std::vector&lt;long&gt; m_dummy;  // Huh?\n    unsigned m_num;\n};\n\nint main( int argc, char * argv[] )\n{\n    std::cout &lt;&lt; \"Foo size: \" &lt;&lt; sizeof( Foo ) &lt;&lt; std::endl;\n    new Foo [4];\n    Foo::operator new[]( 4 * sizeof( Foo ) );\n}\n</code></pre>\n", "Tags": "<c++><operator-overloading><new-operator>", "OwnerUserId": "181783", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33137115_33137151_2": {"section_id": 6095, "quality": 0.8888888888888888, "length": 8}, "so_33137115_33137151_0": {"section_id": 6095, "quality": 1.0, "length": 5}, "so_33137115_33137151_1": {"section_id": 6095, "quality": 1.0, "length": 17}, "so_33137115_33137151_3": {"section_id": 6836, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_33137115_33137151_2": {"section_id": 5861, "quality": 0.8888888888888888, "length": 8}, "so_33137115_33137151_0": {"section_id": 5861, "quality": 1.0, "length": 5}, "so_33137115_33137151_1": {"section_id": 5861, "quality": 1.0, "length": 17}, "so_33137115_33137151_3": {"section_id": 6586, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_33137115_33137151_2": {"section_id": 7592, "quality": 0.8888888888888888, "length": 8}, "so_33137115_33137151_1": {"section_id": 7592, "quality": 0.9411764705882353, "length": 16}, "so_33137115_33137151_3": {"section_id": 8328, "quality": 0.8888888888888888, "length": 32}}}});