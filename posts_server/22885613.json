post_cb({"bq_ids": {"n4140": {"so_22885613_22885737_0": {"section_id": 3321, "quality": 0.9230769230769231, "length": 12}, "so_22885613_22885737_2": {"section_id": 3321, "quality": 0.9166666666666666, "length": 11}, "so_22885613_22885737_1": {"section_id": 3321, "quality": 1.0, "length": 5}}, "n3337": {"so_22885613_22885737_0": {"section_id": 3191, "quality": 0.9230769230769231, "length": 12}, "so_22885613_22885737_2": {"section_id": 3191, "quality": 0.9166666666666666, "length": 11}, "so_22885613_22885737_1": {"section_id": 3191, "quality": 1.0, "length": 5}}, "n4659": {"so_22885613_22885737_0": {"section_id": 4087, "quality": 0.9230769230769231, "length": 12}, "so_22885613_22885737_2": {"section_id": 4087, "quality": 0.9166666666666666, "length": 11}, "so_22885613_22885737_1": {"section_id": 4087, "quality": 1.0, "length": 5}}}, "22885613": {"CommentCount": "4", "ViewCount": "117", "CreationDate": "2014-04-05T19:21:50.093", "LastActivityDate": "2014-04-05T19:39:55.547", "Title": "Where in the C++ Standard is it stated that a const rvalue reference doesn't bind to an lvalue?", "AcceptedAnswerId": "22885737", "PostTypeId": "1", "Id": "22885613", "Score": "1", "Body": "<p>Where in the C++ Standard is it stated that a const rvalue reference doesn't bind to an lvalue?</p>\n<p>For example the code below doesn't compile:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint i = 10;\n\nint f(const int&amp;&amp; j) { return j; }\nint main()\n{\n    std::cout &lt;&lt; f(i) &lt;&lt; '\\n';\n}\n</code></pre>\n", "Tags": "<c++><c++11><language-lawyer><rvalue-reference>", "OwnerUserId": "1042389", "AnswerCount": "2"}, "22885688": {"ParentId": "22885613", "CommentCount": "0", "Body": "<p><code>[C++11: 8.5.3/3]</code> lists how initialisers for references work; what you're looking for is there. It's too exhaustive to quote here verbatim, though.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "22885688", "Score": "3", "CreationDate": "2014-04-05T19:27:05.900", "LastActivityDate": "2014-04-05T19:27:05.900"}, "22885737": {"ParentId": "22885613", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>In the last bullet of [dcl.init.ref]/5 (quoting n3485):</p>\n<blockquote>\n<p id=\"so_22885613_22885737_0\">If <code>T1</code> [the type of the initialized reference] is reference-related to <code>T2</code> [the type of the initializer expression] and the reference is an rvalue reference,\n  the initializer expression shall not be an lvalue.</p>\n</blockquote>\n<p>The cv-qualification is irrelevant in this case.</p>\n<hr>\n<p>The first (main) bullet of /5 doesn't apply since the reference is not an lvalue reference:</p>\n<blockquote>\n<p id=\"so_22885613_22885737_1\">If the reference is an lvalue reference and the initializer expression [...]</p>\n</blockquote>\n<p>The second (main) bullet point applies:</p>\n<blockquote>\n<p id=\"so_22885613_22885737_2\">Otherwise, the reference shall be an lvalue reference to a non-volatile const type (i.e., <em>cv1</em> shall be <code>const</code>), <strong>or the reference shall be an rvalue reference</strong></p>\n</blockquote>\n<p>[emphasis mine]</p>\n<p>The first sub bullet point of this doesn't apply since the initializer is is not an xvalue or function prvalue and doesn't have class type.</p>\n<p>The second sub-bullet-point is an unconditional \"otherwise\", so that last sub bullet point applies.</p>\n<hr>\n<p>If the initializer is <em>not</em> reference-related to the referred type (<code>T1</code>), the example compiles:</p>\n<pre><code>#include &lt;iostream&gt;\n\ndouble i = 10;\n\nint f(const int&amp;&amp; j) { return j; }\nint main()\n{\n    std::cout &lt;&lt; f(i) &lt;&lt; '\\n';\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a60dd62e3a3f4bd7\">Live example</a></p>\n</hr></hr>", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2014-04-05T19:39:55.547", "Id": "22885737", "Score": "6", "CreationDate": "2014-04-05T19:31:08.050", "LastActivityDate": "2014-04-05T19:39:55.547"}});