post_cb({"bq_ids": {"n4140": {"so_18199728_18199974_0": {"length": 18, "quality": 0.6206896551724138, "section_id": 5449}}, "n3337": {"so_18199728_18199974_0": {"length": 19, "quality": 0.6551724137931034, "section_id": 5243}}}, "18199745": {"PostTypeId": "2", "Body": "<p>You can, but you have to declare it <code>static</code> and <code>const</code>:</p>\n<pre><code>struct Timer {\n    static const auto start = 0;\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/view?id=859d479cb184d32b3c61e8e97bbcf5b5-3afcc3bc1f2cd10b247c33a6cde9edad\">A working example in Coliru</a>.</p>\n<p>With this limitation, you therefore cannot have <code>start</code> as a non-static member, and cannot have different values in different objects.</p>\n<p>If you want different types of <code>start</code> for different objects, better have your class as a template</p>\n<pre><code>template&lt;typename T&gt;\nstruct Timer {\n    T start;\n};\n</code></pre>\n<p>If you want to deduce the type of <code>T</code>, you can make a factory-like function that does the type deduction.</p>\n<pre><code>template&lt;typename T&gt;\nTimer&lt;typename std::decay&lt;T&gt;::type&gt; MakeTimer(T&amp;&amp; startVal) {   // Forwards the parameter\n   return Timer&lt;typename std::decay&lt;T&gt;::type&gt;{std::forward&lt;T&gt;(startVal)};\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/view?id=f6834280638446e5838f1e9b72d128e1-3afcc3bc1f2cd10b247c33a6cde9edad\">Live example</a>.</p>\n", "LastActivityDate": "2013-08-13T03:01:29.143", "LastEditorUserId": "1619294", "Id": "18199745", "CommentCount": "0", "CreationDate": "2013-08-13T02:33:34.287", "ParentId": "18199728", "Score": "19", "OwnerUserId": "1619294", "LastEditDate": "2013-08-13T03:01:29.143"}, "18199728": {"ViewCount": "9607", "Body": "<p>For example I wanted to have a variable of type <code>auto</code> because I'm not sure what type it will be.</p>\n<p>When I try to declare it in class/struct declaration it's giving me this error: </p>\n<blockquote>\n<p id=\"so_18199728_18199728_0\">Cannot deduce auto type. Initializer required</p>\n</blockquote>\n<p>Is there a way around it?</p>\n<pre><code>struct Timer {\n\n    auto start;\n\n};\n</code></pre>\n", "AcceptedAnswerId": "18199745", "Title": "Is it possible to have an \"auto\" member variable?", "CreationDate": "2013-08-13T02:31:32.753", "Id": "18199728", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-08-13T13:07:53.347", "Score": "6", "OwnerUserId": "1367392", "Tags": "<c++><struct><auto>", "AnswerCount": "3"}, "18199974": {"PostTypeId": "2", "Body": "<p>This is what the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\"><code>C++ draft standard</code></a> has to say about using <code>auto</code> for member variables, in section <code>7.1.6.4 auto specifier</code> paragraph <code>4</code>:</p>\n<blockquote>\n<p id=\"so_18199728_18199974_0\">The auto type-specifier can also be used in declaring a variable in the condition of a selection statement (6.4) or an iteration statement (6.5), in the type-specifier-seq in the new-type-id or type-id of a new-expression (5.3.4), in a for-range-declaration, and <strong>in declaring a static data member with a brace-or-equal-initializer that appears within the member-specification of a class definition (9.4.2)</strong>.</p>\n</blockquote>\n<p>Since it must be initialized this also means that it must be <a href=\"https://stackoverflow.com/a/9657064\"><code>const</code></a>. So something like the following will work:</p>\n<pre><code>struct Timer\n{\n  const static int start = 1;\n}; \n</code></pre>\n<p>I don't think that gets you too much though, using template as Mark suggests or now that I think about it some more maybe you just need a <a href=\"http://en.wikipedia.org/wiki/Variant_type\" rel=\"nofollow noreferrer\"><code>Variant Type</code></a> in that case you should check out <a href=\"http://www.boost.org/doc/libs/1_54_0/doc/html/variant.html\" rel=\"nofollow noreferrer\"><code>Boost.Variant</code></a> or <a href=\"http://www.boost.org/doc/libs/1_54_0/doc/html/any.html\" rel=\"nofollow noreferrer\"><code>Boost.Any</code></a>.</p>\n", "LastActivityDate": "2013-08-13T13:07:53.347", "LastEditorUserId": "-1", "Id": "18199974", "CommentCount": "0", "CreationDate": "2013-08-13T03:00:56.723", "ParentId": "18199728", "Score": "3", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:18:05.277"}, "18203889": {"PostTypeId": "2", "Body": "<p>No. Each constructor could have its own initializer for <code>start</code>, so there could be no consistent type to use.</p>\n<p>If you <em>do</em> have a usable expression, you can use that:</p>\n<pre><code>struct Timer {\n\n   Foo getAFoo();\n\n   delctype(Timer().getAFoo().Bar()) start;\n\n   Timer() : start(getAFoo().Bar()) { /***/ }\n};\n</code></pre>\n", "LastActivityDate": "2013-08-13T08:11:55.533", "Id": "18203889", "CommentCount": "0", "CreationDate": "2013-08-13T08:11:55.533", "ParentId": "18199728", "Score": "1", "OwnerUserId": "15416"}});