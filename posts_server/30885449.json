post_cb({"30885898": {"ParentId": "30885449", "CommentCount": "0", "Body": "<p>According to the C++ Standard (6.7 Declaration statement)</p>\n<blockquote>\n<p id=\"so_30885449_30885898_0\">4 The zero-initialization (8.5) of all block-scope variables with\n  static storage duration (3.7.1) or thread storage duration (3.7.2) is\n  performed before any other initialization takes place. ...Otherwise\n  such a variable is initialized the first time control passes through\n  its declaration; such a variable is considered initialized upon the\n  completion of its initialization. If the initialization exits by\n  throwing an exception, the initialization is not complete, so it will\n  be tried again the next time control enters the declaration. ...</p>\n</blockquote>\n<p>Thus before the function will get the control local static variables are zero-initialized and then when the function will get the control they are initialized using their initializers (or constructors).</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "30885898", "Score": "1", "CreationDate": "2015-06-17T08:15:12.250", "LastActivityDate": "2015-06-17T08:15:12.250"}, "30885449": {"CommentCount": "1", "AcceptedAnswerId": "30885670", "PostTypeId": "1", "LastEditorUserId": "4007560", "CreationDate": "2015-06-17T07:51:54.790", "LastActivityDate": "2015-06-18T12:33:02.523", "LastEditDate": "2015-06-18T12:33:02.523", "ViewCount": "313", "FavoriteCount": "1", "Title": "constructor execution sequence/order: dependent initialization of static variable (class instance) in a function", "Id": "30885449", "Score": "5", "Body": "<p>For the following code segment:</p>\n<pre><code>class Bar {\npublic:\n    int x;\n    int y;\n    Bar(int _x, int _y) {  /* some codes here */ ...}\n};\nclass Foo {\npublic:\n    int x;\n    int y;\n    int z;\n    Foo(Bar b):x(b.x), y(b.y)\n    {\n        z = someFunction(x, y);\n    }\n};\n\nvoid f(int x, int y)\n{\n     Bar b(x, y);\n     static Foo x(b);\n}\nint main()\n{\n     f(2, 3);\n}\n</code></pre>\n<p>In my mind, a static variable inside a function should be initialized even before <code>main()</code>.  However, the static variable <code>x</code> of type <code>Foo</code> depends on a local variable <code>b</code> of type <code>Bar</code>.</p>\n<p>The questions are:</p>\n<p>1) When does the constructor of <code>x</code> execute?  i.e. Are <code>x</code> initialized with the first invocation of the local variable <code>b</code>?  I don't want some particular result of some special compiler case, but want to know if it is well-defined in the C++ language.</p>\n<p>2) Is it a valid program?</p>\n<p>3) It it a a good practice?</p>\n", "Tags": "<c++>", "OwnerUserId": "4007560", "AnswerCount": "3"}, "30885670": {"ParentId": "30885449", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-06-17T08:02:01.120", "Score": "3", "LastEditorUserId": "2079303", "LastEditDate": "2015-06-17T08:53:30.913", "Id": "30885670", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_30885449_30885670_0\">In my mind, a static variable inside a function should be initialized even before main()</p>\n</blockquote>\n<p>Your mind is incorrect... at least partly. A static local variable may be initialized early in some situations, but not in a case where the constructor depends on a local variable such as this one.</p>\n<p>n3242 draft of the standard \u00a76.7/4:</p>\n<blockquote>\n<p id=\"so_30885449_30885670_1\">... An implementation is permitted to perform early initialization of other block-scope variables with static or thread storage duration under the same conditions that an implementation is permitted to statically initialize a variable with static or thread storage duration in namespace scope (3.6.2). Otherwise such a variable is initialized the first time control passes through its declaration; ...</p>\n</blockquote>\n<p>For completeness, here is the requirements for constant (static) initialization \u00a73.6.2/2:</p>\n<blockquote>\n<p id=\"so_30885449_30885670_2\">Constant initialization is performed:</p>\n<p id=\"so_30885449_30885670_3\">\u2014 if each full-expression (including implicit conversions) that appears in the initializer of a reference with\n  static or thread storage duration is a constant expression (5.19) and the reference is bound to an lvalue\n  designating an object with static storage duration or to a temporary (see 12.2);</p>\n<p id=\"so_30885449_30885670_4\">\u2014 if an object with static or thread storage duration is initialized by a constructor call, if the constructor is\n  a constexpr constructor, if all constructor arguments are constant expressions (including conversions),\n  and if, after function invocation substitution (7.1.5), every constructor call and full-expression in the\n  mem-initializers is a constant expression;</p>\n<p id=\"so_30885449_30885670_5\">\u2014 if an object with static or thread storage duration is not initialized by a constructor call and if every\n  full-expression that appears in its initializer is a constant expression.</p>\n</blockquote>\n<p>1) <code>x</code> is initialized when the execution reaches it's declaration for the first time and that's when the constructor is run. So, <code>b</code> is fully initialized when the initialization of <code>x</code> starts.</p>\n<p>2) As far as the initialization dependency is concerned, yes.</p>\n<p>3) Sure, if you need that, a constructor of a static local object may depend on a local object. As long as you don't refer to that local object after the it's out of scope. In this case you simply copy it's members, so you don't depend on it after constructing <code>x</code>.</p>\n", "LastActivityDate": "2015-06-17T08:53:30.913"}, "bq_ids": {"n4140": {"so_30885449_30885670_5": {"section_id": 7151, "quality": 1.0, "length": 15}, "so_30885449_30885670_1": {"section_id": 3919, "quality": 0.9736842105263158, "length": 37}, "so_30885449_30885670_3": {"section_id": 7151, "quality": 0.9230769230769231, "length": 24}, "so_30885449_30885898_0": {"section_id": 3919, "quality": 0.9411764705882353, "length": 48}, "so_30885449_30885670_0": {"section_id": 7153, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_30885449_30885898_0": {"section_id": 3779, "quality": 0.9411764705882353, "length": 48}, "so_30885449_30885670_0": {"section_id": 6897, "quality": 0.6666666666666666, "length": 6}, "so_30885449_30885670_4": {"section_id": 6895, "quality": 0.9666666666666667, "length": 29}, "so_30885449_30885670_5": {"section_id": 6895, "quality": 1.0, "length": 15}, "so_30885449_30885670_1": {"section_id": 3779, "quality": 0.9736842105263158, "length": 37}, "so_30885449_30885670_3": {"section_id": 6895, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_30885449_30885898_0": {"section_id": 4805, "quality": 0.7058823529411765, "length": 36}, "so_30885449_30885670_5": {"section_id": 8652, "quality": 0.5333333333333333, "length": 8}, "so_30885449_30885670_0": {"section_id": 8657, "quality": 0.6666666666666666, "length": 6}}}, "30886107": {"ParentId": "30885449", "CommentCount": "0", "Body": "<p>Vlad did the hard part of finding references in C++ standard.</p>\n<p>Now for your questions :</p>\n<ul>\n<li><em>when will constructor of <code>x</code> be executed ?</em>: per Vlad's answer, it will be executed the first time you will call <code>f</code>, and x will then keep its value through any other call</li>\n<li><em>Is it a valid program?</em> : the current program does not compiler but for other mistakes : x and y are private in bar, and in <code>f</code>, <code>x</code> in already a parameter. But the initialization of a static variable with the values passed at first invocation is fine</li>\n<li><em>is it a a good practice?</em> : it is not a common usage so it must be explained in a comment for following readers or maintainers. Apart from that nothing is wrong with it <em>provided you know why you use this construct</em>.</li>\n</ul>\n", "OwnerUserId": "3545273", "PostTypeId": "2", "Id": "30886107", "Score": "0", "CreationDate": "2015-06-17T08:24:58.803", "LastActivityDate": "2015-06-17T08:24:58.803"}});