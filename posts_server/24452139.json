post_cb({"bq_ids": {"n4140": {"so_24452139_24452139_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 7143}}, "n3337": {"so_24452139_24452139_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 6887}}, "n4659": {"so_24452139_24452139_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 8644}}}, "24452333": {"Id": "24452333", "PostTypeId": "2", "Body": "<p>The quoted rule means that your violation invokes <strong>Undefined Behavior</strong>.</p>\n<p>The reasons for not fully-specifying behavior are:</p>\n<ul>\n<li>Ease of implementation.</li>\n<li>Efficiency of the program.</li>\n<li>Catering to differing existing implementations.</li>\n<li>Allowing for extensions and future evolution.</li>\n</ul>\n<p>In your case, most object-file types will not contain the neccessary information to diagnose your error if it is distributed acrross multiple implementation units.<br>\nThat makes it hard to impossible to diagnose.</br></p>\n<p>Anyway, as C++ does not contain any method to access different objects with the same name, putting that information into the object files is not a good idea, especially as the linker would then have to know <em>all</em> the rules C++ uses for exceptions and corner-cases.</p>\n", "LastActivityDate": "2014-06-27T12:53:04.660", "CommentCount": "0", "CreationDate": "2014-06-27T12:53:04.660", "ParentId": "24452139", "Score": "0", "OwnerUserId": "3204551"}, "24452139": {"ViewCount": "44", "Body": "<p>Below some code violating the type identity rule (<a href=\"http://ideone.com/dGpHmJ\" rel=\"nofollow\">on ideone</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid foo()\n{\n    typedef int I;\n    extern I a; //now a is denoting an entity, which is a member of global scope\n    std::cout &lt;&lt; a;\n}\n\ntypedef char I;\nI a; //definition of a\n\nint main()\n{\n    foo();\n}\n</code></pre>\n<p>The type identity rule(sec. 3.6/10 N3797):</p>\n<blockquote>\n<p id=\"so_24452139_24452139_0\">After all adjustments of types (during which typedefs (7.1.3) are\n  replaced by their definitions), the types specified by all\n  declarations referring to <strong>a given variable or function shall be</strong>\n<strong>identical</strong>, except that declarations for an array object can specify\n  array types that differ by the presence or absence of a major array\n  bound (8.3.4). <strong>A violation of this rule on type identity does not</strong>\n<strong>require a diagnostic.</strong></p>\n</blockquote>\n<p>I understand that violation of that rule does not require a diagnostic. But why not?</p>\n", "AcceptedAnswerId": "24452333", "Title": "Type identity rule and its violation", "CreationDate": "2014-06-27T12:43:04.340", "Id": "24452139", "CommentCount": "0", "LastEditDate": "2014-06-27T12:55:39.413", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "3204551", "LastActivityDate": "2014-06-27T12:55:39.413", "Score": "0", "Tags": "<c++><types><undefined-behavior><linkage>", "AnswerCount": "1"}});