post_cb({"34502153": {"Id": "34502153", "PostTypeId": "2", "Body": "<p>It's a specifier, like <code>long</code>, <code>short</code>, <code>unsigned</code>, etc. They can all be moved around. For example, the following are two equivalent and valid declarations:</p>\n<pre><code>int long const long unsigned constexpr foo = 5;\nconstexpr const unsigned long long int foo = 5;\n</code></pre>\n<p>By convention, though, <code>constexpr</code> would appear before the type name. It can confuse others if you put it after, but it is technically valid. Since <code>constexpr</code> serves a different purpose than <code>const</code>, I don't see the same benefit in putting it to the right. For example, you can't do <code>int constexpr * constexpr foo</code>. In fact, <code>int constexpr * foo</code> will not allow you to reassign <code>foo</code>, rather than apply to what <code>foo</code> points to, so putting it to the right can be misleading if you expect the same kind of semantics as <code>const</code>.</p>\n<p>To summarize:</p>\n<pre><code>int constexpr foo = 0; // valid\nint constexpr * constexpr foo = nullptr; // invalid\nint* constexpr foo = nullptr; // invalid\nint constexpr * foo = nullptr; // valid\nconstexpr int* foo = nullptr; // valid and same as previous\n</code></pre>\n", "LastEditorUserId": "962089", "LastActivityDate": "2015-12-28T23:19:24.067", "Score": "10", "CreationDate": "2015-12-28T23:13:24.030", "ParentId": "34502044", "CommentCount": "4", "OwnerUserId": "962089", "LastEditDate": "2015-12-28T23:19:24.067"}, "bq_ids": {"n4140": {"so_34502044_34502193_2": {"length": 4, "quality": 0.8, "section_id": 5388}}, "n3337": {"so_34502044_34502193_2": {"length": 4, "quality": 0.8, "section_id": 5182}}, "n4659": {"so_34502044_34502193_2": {"length": 4, "quality": 0.8, "section_id": 6813}}}, "34502044": {"ViewCount": "308", "Body": "<p>I have recently started using more C++11 features in my code and I have been wondering if the placement of the <code>constexpr</code> keyword makes difference whether it is before or after the constant's type.</p>\n<p><strong>Style 1:</strong></p>\n<pre><code>constexpr int FOO = 1;\nconstexpr auto BAR = \"bar\";\n</code></pre>\n<p><strong>Style 2:</strong></p>\n<pre><code>int constexpr FOO = 1;\nauto constexpr BAR = \"bar\";\n</code></pre>\n<p>Style 2 is the way I prefer to place the <code>const</code> keyword and placing <code>constexpr</code> the same way would bring some consistency to the code. However, is that considered bad practice or is there something else wrong with style 2 because I don't really see anyone writing it like that.</p>\n", "AcceptedAnswerId": "34502153", "Title": "C++ constexpr keyword placement", "CreationDate": "2015-12-28T23:01:27.853", "Id": "34502044", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-12-28T23:53:34.993", "Score": "9", "OwnerUserId": "4517548", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "2"}, "34502193": {"Id": "34502193", "PostTypeId": "2", "Body": "<p><a href=\"https://msdn.microsoft.com/en-us/library/dn956974.aspx\" rel=\"nofollow\">msdn</a> defines the syntax as:</p>\n<blockquote>\n<p id=\"so_34502044_34502193_0\"><strong>constexpr</strong>  literal-type  identifier = constant-expression;constexpr  literal-type  identifier { constant-expression };constexpr literal-type identifier(params );constexpr ctor (params);</p>\n</blockquote>\n<p>Which says that you should use it on the left.</p>\n<p><strong>Edit:</strong></p>\n<blockquote>\n<p id=\"so_34502044_34502193_1\">New specifier The keyword constexpr is a declaration specifier; modify the\n  grammar in [ISO03, \u00a77.1] as follows:</p>\n<p id=\"so_34502044_34502193_2\">1 The specifiers that can be used in a declaration are\n  decl-specifier:</p>\n<p id=\"so_34502044_34502193_3\">storage-class-specifier</p>\n<p id=\"so_34502044_34502193_4\">type-specifier</p>\n<p id=\"so_34502044_34502193_5\">function-specifier</p>\n<p id=\"so_34502044_34502193_6\">friend</p>\n<p id=\"so_34502044_34502193_7\">typedef</p>\n<p id=\"so_34502044_34502193_8\">constexpr</p>\n</blockquote>\n<p>An explanation is given for this specifiers <a href=\"http://en.cppreference.com/w/cpp/language/declarations\" rel=\"nofollow\">here</a>.</p>\n<p>To sum up @chris' answer is right :)</p>\n", "LastEditorUserId": "1632887", "LastActivityDate": "2015-12-28T23:53:34.993", "Score": "1", "CreationDate": "2015-12-28T23:17:38.943", "ParentId": "34502044", "CommentCount": "0", "OwnerUserId": "1632887", "LastEditDate": "2015-12-28T23:53:34.993"}});