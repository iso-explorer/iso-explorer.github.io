post_cb({"bq_ids": {"n4140": {"so_12834874_12846168_0": {"length": 11, "quality": 0.6875, "section_id": 5449}}, "n3337": {"so_12834874_12846168_0": {"length": 12, "quality": 0.75, "section_id": 5243}}}, "12846168": {"PostTypeId": "2", "Body": "<p>The code is valid.  Visual C++ is right to accept it and gcc is wrong to reject it (for completeness, Clang 3.1 also accepts the code).  The specification states that (C++11 7.1.6.4[dcl.spec.auto]/4):</p>\n<blockquote>\n<p id=\"so_12834874_12846168_0\">The <code>auto</code> <em>type-specifier</em> can also be used...in declaring a static data member with a <em>brace-or-equal-initializer</em> that appears within the <em>member-specification</em> of a class definition.</p>\n</blockquote>\n<p>Your <code>value</code> is a static data member.  It has a <em>brace-or-equal-initializer</em> (that is the <code>= Modulus&lt;N, 360&gt;::value</code> part of the declaration), and the initializer appears within the <em>member-specification</em> of the class definition (i.e., it's what mortals might call an \"inline initializer\").</p>\n", "LastActivityDate": "2012-10-11T18:25:48.480", "Id": "12846168", "CommentCount": "2", "CreationDate": "2012-10-11T18:25:48.480", "ParentId": "12834874", "Score": "1", "OwnerUserId": "151292"}, "12834874": {"ViewCount": "182", "Body": "<p>Consider the following simplified template meta-programming code that implements an <code>Angle</code> class that is internally storing the modulo 360 degrees reduced value.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\ntemplate&lt;int N, int D&gt;\nstruct Modulus\n{\n        static auto const value = N % D;\n};\n\ntemplate&lt;int N&gt;\nstruct Angle\n{\n        static auto const value = Modulus&lt;N, 360&gt;::value; // ERROR\n        //static int const value = Modulus&lt;N, 360&gt;::value;  // OK\n        //static auto const value = N % 360;                // OK\n\n        typedef Angle&lt;value&gt; type;\n};\n\nint main()\n{\n        std::cout &lt;&lt; typeid(Angle&lt;30&gt;::type).name() &lt;&lt; \"\\n\";\n        std::cout &lt;&lt; typeid(Angle&lt;390&gt;::type).name() &lt;&lt; \"\\n\";\n\n        return 0;\n}\n</code></pre>\n<p>Output on <a href=\"http://ideone.com/4v7pg\" rel=\"nofollow\">Ideone</a></p>\n<p>With Visual C++ 2010 Express, I can do <code>static auto const = Modulus&lt;N, 360&gt;::value</code>, but with MinGW gcc 4.7.2 (<a href=\"http://nuwen.net/mingw.html\" rel=\"nofollow\">Nuwen distro</a>) or Ideone (gcc 4.5.1) I have to either explicitly denote the type as <code>static int const value = Modulus&lt;N, 360&gt;::value</code> or I have to use <code>auto</code> with the full modular expression as <code>static auto const value = N % 360;</code>. </p>\n<p><strong>Question: Which compiler is correct acccording to the new C++11 Standard?</strong></p>\n", "AcceptedAnswerId": "12846168", "Title": "Auto + static in-class constant initalization with meta-programming", "CreationDate": "2012-10-11T08:02:17.690", "Id": "12834874", "CommentCount": "4", "LastEditDate": "2012-10-11T18:43:04.393", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2012-10-11T18:43:04.393", "Score": "6", "OwnerUserId": "819272", "Tags": "<c++><c++11><metaprogramming><static-members><auto>", "AnswerCount": "1"}});