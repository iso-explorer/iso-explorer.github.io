post_cb({"bq_ids": {"n4140": {"so_46544292_46544392_0": {"length": 30, "quality": 1.0, "section_id": 5900}}, "n3337": {"so_46544292_46544392_0": {"length": 30, "quality": 1.0, "section_id": 5672}}, "n4659": {"so_46544292_46544392_0": {"length": 30, "quality": 1.0, "section_id": 7382}}}, "46544391": {"Id": "46544391", "PostTypeId": "2", "Body": "<p>There's no difference at the point of calling. It's six of one and half a dozen of another.</p>\n<p><code>Foo::print(\"Hello world\");</code> is more <em>idiomatic</em>; a convention has grown up where this signals to the reader that <code>print</code> is <em>likely</em> to be a <code>static</code> function. To that end, using <code>foo.print(\"Hello world\");</code> in your particular case is idiosyncratic, and therefore confusing. So avoid this way, particularly if there's an overhead in introducing an unnecessary instance <code>foo</code>.</p>\n<p>Note that the notation using the scope resolution operator can also be used if you want to reach a specific override of a <code>print</code> within another method in a complex class hierarchy! Hence my use of <em>likely</em> above.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2017-10-03T12:19:57.387", "Score": "6", "CreationDate": "2017-10-03T12:14:49.107", "ParentId": "46544292", "CommentCount": "2", "OwnerUserId": "2380830", "LastEditDate": "2017-10-03T12:19:57.387"}, "46544392": {"Id": "46544392", "PostTypeId": "2", "Body": "<p>There's the obvious difference in that the first version has to construct and destruct a <code>Foo</code>.</p>\n<p>Then there's the obvious similarity in that both versions do the same thing when the function call is executed (construct a string, print, etc).</p>\n<p>The less obvious difference, is in the evaluation of the two expressions. You see, even though <code>foo</code> is not required for the call, it's still evaluated as part of the expression:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.static#1\" rel=\"nofollow noreferrer\">[class.static]/1</a></p>\n<blockquote>\n<p id=\"so_46544292_46544392_0\">A static member s of class X may be referred to using the qualified-id\n  expression X\u200b::\u200bs; it is not necessary to use the class member access\n  syntax to refer to a static member. <strong>A static member may be referred to\n  using the class member access syntax, in which case the object\n  expression is evaluated.</strong></p>\n</blockquote>\n<p>In your case that doesn't mean anything. But in certain contexts, it can prevent your program from compiling at all. <a href=\"https://stackoverflow.com/questions/44995196/static-member-access-in-constant-expressions/44996066#44996066\">For instance, if <code>foo</code> was instead a reference parameter in a constexpr function</a>.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-10-03T12:19:53.347", "Score": "6", "CreationDate": "2017-10-03T12:14:51.637", "ParentId": "46544292", "CommentCount": "4", "OwnerUserId": "817643", "LastEditDate": "2017-10-03T12:19:53.347"}, "46544292": {"ViewCount": "162", "Body": "<p>Let's say you have the following class:</p>\n<pre><code>struct Foo {        \n    static void print(std::string x) { std::cout &lt;&lt; x &lt;&lt; std::endl; }       \n};\n</code></pre>\n<p>What is the difference between calling <code>print</code> like </p>\n<pre><code>Foo foo; //Or a pointer...\nfoo.print(\"Hello world\");\n</code></pre>\n<p>and </p>\n<pre><code>Foo::print(\"Hello world\");\n</code></pre>\n<p>?</p>\n", "AcceptedAnswerId": "46544392", "Title": "C++ calling a static method", "CreationDate": "2017-10-03T12:09:15.547", "Id": "46544292", "CommentCount": "2", "LastEditDate": "2017-10-03T12:13:58.773", "PostTypeId": "1", "LastEditorUserId": "2380830", "LastActivityDate": "2017-10-03T12:19:57.387", "Score": "4", "OwnerUserId": "4462095", "Tags": "<c++><static-methods>", "AnswerCount": "3"}, "46544419": {"Id": "46544419", "PostTypeId": "2", "Body": "<p>There's no difference in your example. Keep in mind the static variables are share among all the instances of your class. So you can access them through scope operator or via member selection:</p>\n<pre><code>class A{\n    public:\n        A(){count++;}\n        ~A(){count--;}\n\n        static int count;\n};\n\nint A::count = 0;\n\nint main(){\n    A aObj, bObj, cObj;\n\n    std::cout &lt;&lt; \"number of A instances: \" &lt;&lt; A::count &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"number of A instances: \" &lt;&lt; aObj.count &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2017-10-03T12:17:14.403", "CommentCount": "0", "CreationDate": "2017-10-03T12:17:14.403", "ParentId": "46544292", "Score": "0", "OwnerUserId": "2874856"}});