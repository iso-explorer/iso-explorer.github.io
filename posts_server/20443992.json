post_cb({"20443992": {"CommentCount": "5", "ViewCount": "140", "CreationDate": "2013-12-07T16:58:33.590", "LastActivityDate": "2013-12-07T17:13:19.640", "Title": "c++ \"const T &const\" What is the meaning of the 2nd const?", "AcceptedAnswerId": "20444093", "PostTypeId": "1", "Id": "20443992", "Score": "-1", "Body": "<p>Could you please explain me the meaning of the second \"const\" in the following expression: </p>\n<pre><code>int i = 42;\nconst int &amp;const ri = i;\n</code></pre>\n<p>Are there some cases where const T &amp;const is mandatory?</p>\n<p>What I understood so far:\nPointers are objects, and they can be reassigned. </p>\n<pre><code>int i = 42;\nconst int *ptr1 = &amp;i;        // valid: (low-level const): *ptr1 cannot be changed.\nint *const ptr2 = &amp;i;        // valid: (high-level const): ptr2 cannot be changed.\nconst int *const ptr3 = &amp;i:  // also valid (combination of 2 precedent lines).\n</code></pre>\n<p>References, unliked pointers are not objects (they have no address) and cannot be reassigned ==&gt; no meaning for an \"high-level const\" </p>\n<pre><code>int i = 42;\nint &amp;ri1 = i;        // valid: ri1 is a new name for i\nconst int &amp;ri2 = 7;  // valid and const is required\nconst int &amp;ri3 = i;  // valid, what is the use of const?\n\nconst int &amp;const ri4 = i;  // valid, has the second const an importance? \n</code></pre>\n", "Tags": "<c++><reference><const>", "OwnerUserId": "3019338", "AnswerCount": "1"}, "20444093": {"ParentId": "20443992", "CommentCount": "0", "Body": "<p>The form <code>int &amp; const</code> is ill-formed (C++11 \u00a78.3.2):</p>\n<blockquote>\n<p id=\"so_20443992_20444093_0\">In a declaration T D where D has either of the forms</p>\n<pre><code>&amp; attribute-specifier-seqopt D1  \n&amp;&amp; attribute-specifier-seqopt D1\n</code></pre>\n<p id=\"so_20443992_20444093_1\">and the type of the identifier in the declaration T D1 is \u201cderived-declarator-type-list T,\u201d then the type of the identifier of D is \u201cderived-declarator-type-list reference to T.\u201d The optional attribute-specifier-seq appertains to the reference type. <strong>Cv-qualified references are ill-formed</strong> except when the cv-qualifiers are introduced through the use of a typedef (7.1.3) or of a template type argument (14.3), in which case the cv-qualifiers\n  are ignored.</p>\n</blockquote>\n<p>So no, it can't be mandatory anywhere. And it has no semantics.</p>\n", "OwnerUserId": "635608", "PostTypeId": "2", "Id": "20444093", "Score": "2", "CreationDate": "2013-12-07T17:08:33.030", "LastActivityDate": "2013-12-07T17:08:33.030"}, "bq_ids": {"n4140": {"so_20443992_20444093_0": {"section_id": 3218, "quality": 1.0, "length": 4}, "so_20443992_20444093_1": {"section_id": 3218, "quality": 0.7272727272727273, "length": 24}}, "n3337": {"so_20443992_20444093_0": {"section_id": 3092, "quality": 1.0, "length": 4}, "so_20443992_20444093_1": {"section_id": 3092, "quality": 0.8484848484848485, "length": 28}}, "n4659": {"so_20443992_20444093_0": {"section_id": 3975, "quality": 1.0, "length": 4}, "so_20443992_20444093_1": {"section_id": 3975, "quality": 0.7272727272727273, "length": 24}}}});