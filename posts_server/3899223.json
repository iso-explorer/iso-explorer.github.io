post_cb({"16233389": {"Id": "16233389", "PostTypeId": "2", "Body": "<p>There are correct answers already, but here is the quote from the Standard (which I was looking for when I came across this post):</p>\n<blockquote>\n<p id=\"so_3899223_16233389_0\">(\u00a712.1/5)\n  A default constructor is trivial if it is not user-provided and if:<br>\n  \u2014 its class has no virtual functions (10.3) and no virtual base classes (10.1), and<br>\n  \u2014 no non-static data member of its class has a brace-or-equal-initializer, and<br>\n  \u2014 all the direct base classes of its class have trivial default constructors, and<br>\n  \u2014 for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default constructor.</br></br></br></br></p>\n</blockquote>\n<p>This is from C++11. C++03 lacks the second item and uses the phrase <em>implicitly declared</em> instead of <em>not user-provided</em>. It is otherwise identical.</p>\n<p>Note that this specification only covers trivial default constructors. The word attribute <em>trivial</em> can also be used in different contexts, e.g. copy constructors.</p>\n", "LastActivityDate": "2013-04-26T09:42:29.407", "CommentCount": "0", "CreationDate": "2013-04-26T09:42:29.407", "ParentId": "3899223", "Score": "16", "OwnerUserId": "777186"}, "bq_ids": {"n4140": {"so_3899223_16233389_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 369}}, "n3337": {"so_3899223_16233389_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 359}}, "n4659": {"so_3899223_16233389_0": {"length": 41, "quality": 0.8913043478260869, "section_id": 383}}}, "3899223": {"ViewCount": "15708", "Body": "<p>I was reading this <a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#Modification_to_the_definition_of_plain_old_data\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/C%2B%2B0x#Modification_to_the_definition_of_plain_old_data</a></p>\n<p>It mentions trivial default constructor, trivial copy constructor, copy assignment operator, trivial destructor. What is trivial and not trivial?</p>\n", "AcceptedAnswerId": "3899248", "Title": "What is a non-trivial constructor in C++?", "CreationDate": "2010-10-10T06:06:31.030", "LastActivityDate": "2013-04-26T09:42:29.407", "CommentCount": "0", "FavoriteCount": "22", "PostTypeId": "1", "LastEditDate": "2010-10-10T06:14:31.047", "OwnerDisplayName": "user34537", "LastEditorUserId": "165520", "Id": "3899223", "Score": "50", "Tags": "<c++><constructor>", "AnswerCount": "3"}, "3899248": {"Id": "3899248", "PostTypeId": "2", "Body": "<p>In simple words a \"trivial\" special member function literally means a member function that does its job in a very straightforward manner. The \"straightforward manner\" means different thing for different kinds of special member functions. </p>\n<p>For a default constructor and destructor being \"trivial\" means literally \"do nothing at all\". For copy-constructor and copy-assignment operator, being \"trivial\" means literally \"be equivalent to simple raw memory copying\" (like copy with <code>memcpy</code>).</p>\n<p>If you define a constructor yourself, it is considered non-trivial, even if it doesn't do anything, so a trivial constructor must be implicitly defined by the compiler. </p>\n<p>In order for a special member function to satisfy the above requirements, the class must have a very simplistic structure, it must not require any hidden initializations when an object is being created or destroyed, or any hidden additional internal manipulations when it is being copied.</p>\n<p>For example, if class has virtual functions, it will require some extra hidden initializations when objects of this class are being created (initialize virtual method table and such), so the constructor for this class will not qualify as trivial.</p>\n<p>For another example, if a class has virtual base classes, then each object of this class might contain hidden pointers that point to other parts of the very same object. Such a self-referential object cannot be copied by a simple raw memory copy routine (like <code>memcpy</code>). Extra manipulations will be necessary to properly re-initialize the hidden pointers in the copy. For this reason the copy constructor and copy-assignment operator for this class will not qualify as trivial.</p>\n<p>For obvious reasons, this requirement is recursive: all subobjects of the class (bases and non-static members) must also have trivial constructors.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2010-10-10T06:37:06.530", "Score": "60", "CreationDate": "2010-10-10T06:14:52.607", "ParentId": "3899223", "CommentCount": "7", "OwnerUserId": "187690", "LastEditDate": "2010-10-10T06:37:06.530"}, "3899237": {"Id": "3899237", "PostTypeId": "2", "Body": "<p>A constructor of a class A is <a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr376.htm\" rel=\"noreferrer\">trivial</a> if all the following are true:</p>\n<ul>\n<li>It is implicitly defined (compiler synthesized)</li>\n<li>A has no virtual functions and no virtual base classes</li>\n<li>All the direct base classes of A have trivial constructors</li>\n<li>The classes of all the nonstatic data members of A have trivial constructors</li>\n</ul>\n", "LastActivityDate": "2010-10-10T06:10:20.697", "CommentCount": "1", "CreationDate": "2010-10-10T06:10:20.697", "ParentId": "3899223", "Score": "21", "OwnerUserId": "165520"}});