post_cb({"8467070": {"ParentId": "8467049", "CommentCount": "8", "CreationDate": "2011-12-11T20:09:39.800", "OwnerUserId": "401196", "PostTypeId": "2", "Id": "8467070", "Score": "3", "Body": "<p>String will deep copy, they do not shared the same buffer.</p>\n<p>That said when returning them from a function most good compilers can either use Return Value Optimisation or Copy elision so that manoeuvre isn't all that expensive (or even free).</p>\n<p>If you are using c++11 then move semantics are specified by the standard so for thing like return string rest assured that the worst case (even without optimisations) is fairly cheap.</p>\n<p>EDIT: to summarise, you are guaranteed that the string you \"own\" will have a unique chunk of memory which will persist for at least the life time of the local string. However it is more than likely that the compiler won't copy it from the string in the function but rather just swap it's pointers or even elided the copy altogether (meaning the string in the function would actually be the string you assign too).</p>\n", "LastActivityDate": "2011-12-11T20:09:39.800"}, "8467049": {"CommentCount": "1", "ViewCount": "11646", "PostTypeId": "1", "LastEditorUserId": "759866", "CreationDate": "2011-12-11T20:06:27.087", "LastActivityDate": "2013-12-09T20:22:01.003", "Title": "C++ STL String Copy Constructor - Always a Deep Copy?", "AcceptedAnswerId": "8467070", "LastEditDate": "2013-12-09T20:22:01.003", "Id": "8467049", "Score": "7", "Body": "<p>I've seen various conflicting references to the copy constructor behaviour of STL strings in C++ and I was hoping someone could clarify this for me, given the following code segment:</p>\n<pre><code>string str() { return string(\"this is a string\"); }\n//meanwhile, in some other function...\nstring s = str();\n</code></pre>\n<p>Does the object 's' constitute a deep copy of the string object defined in the function 'str()'? or is the object 's' simply pointing at the same chunk of memory allocated during the string constructor call in the 'str()' function?</p>\n", "Tags": "<c++><string><memory><copy-constructor>", "OwnerUserId": "300745", "AnswerCount": "2"}, "8467073": {"ParentId": "8467049", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2011-12-11T20:09:45.320", "Score": "1", "LastEditorUserId": "129570", "LastEditDate": "2011-12-11T20:19:33.957", "Id": "8467073", "OwnerUserId": "129570", "Body": "<p>Yes, it performs a logical deep copy.</p>\n<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3126.pdf\" rel=\"nofollow\">N3126</a>, 21.4.2, Table 61:</p>\n<blockquote>\n<p id=\"so_8467049_8467073_0\"><code>data()</code> - points at the first element of an allocated copy\n  of the array whose first element is pointed at by\n  <code>str.data()</code></p>\n</blockquote>\n", "LastActivityDate": "2011-12-11T20:19:33.957"}, "bq_ids": {"n4140": {"so_8467049_8467073_0": {"section_id": 1569, "quality": 1.0, "length": 12}}, "n3337": {"so_8467049_8467073_0": {"section_id": 1565, "quality": 1.0, "length": 12}}, "n4659": {"so_8467049_8467073_0": {"section_id": 1718, "quality": 1.0, "length": 12}}}});