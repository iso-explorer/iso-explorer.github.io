post_cb({"28652015": {"Id": "28652015", "PostTypeId": "2", "Body": "<p>This one does not use the assignment operator (the two lines are equivalent, as far as I know). <code>=</code> is used in the syntax but <code>operator=</code> is not actually used:</p>\n<pre><code>myClass myVariable = myClass(123);\n//or\nmyClass myVariable(123);\n</code></pre>\n<p>This one uses the assignment operator:</p>\n<pre><code>myClass myVariable;\nmyVariable = myClass(123);\n</code></pre>\n<p>If assignment operator is badly or not implemented, first statement works, second may (and will most likely) crash.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nclass Dvector\n{\npublic:\n    Dvector( int thesize = 0 )\n    {\n        std::cout &lt;&lt; \"Constructing object of size \" &lt;&lt; thesize &lt;&lt; std::endl;\n        size = thesize;\n        data = new double[size];\n    }\n    Dvector( const Dvector&amp; v )\n    {\n        std::cout &lt;&lt; \"Constructing object of size \" &lt;&lt; v.size &lt;&lt; \" by copy\" &lt;&lt; std::endl;\n        size = v.size;\n        data = new double[size];\n        memcpy( data, v.data, sizeof(double)*size );\n    }\n    Dvector&amp; operator=( const Dvector&amp; v )\n    {\n        std::cout &lt;&lt; \"Assigning object of size \" &lt;&lt; v.size &lt;&lt; std::endl;\n        if ( &amp;v != this )\n        {\n            size = v.size;\n            data = new double[size];\n            memcpy( data, v.data, sizeof(double)*size );\n        }\n        return *this;\n    }\n    ~Dvector()\n    {\n        std::cout &lt;&lt; \"Destroying object\" &lt;&lt; std::endl;\n        delete [] data;\n    }\nprivate:\n    double* data;\n    int size;\n};\n\nint main() {\n    Dvector v = Dvector(3);\n    return 0;\n}\n</code></pre>\n<p>Displays:</p>\n<pre><code>Constructing object of size 3 \nDestroying object\n</code></pre>\n<p>When:</p>\n<pre><code>int main() {\n    Dvector v;\n    v = Dvector(3);\n    return 0;\n}\n</code></pre>\n<p>Displays:</p>\n<pre><code>Constructing object of size 0\nConstructing object of size 3\nAssigning object of size 3\nDestroying object\nDestroying object\n</code></pre>\n<p>And would have crashed if copy constructor was not defined...because then <code>v.data</code> ends up pointing to <code>data</code> allocated by temporary variables (<code>Dvector(3)</code>) and then deleted. Possible crash when trying to access <code>v.data</code> or upon <code>v</code> destruction (deleting already freed memory).</p>\n", "LastEditorUserId": "3336423", "LastActivityDate": "2015-02-22T07:11:06.147", "Score": "1", "CreationDate": "2015-02-21T22:15:03.520", "ParentId": "28651855", "CommentCount": "0", "OwnerUserId": "3336423", "LastEditDate": "2015-02-22T07:11:06.147"}, "28652030": {"Id": "28652030", "PostTypeId": "2", "Body": "<pre><code>myClass myVariable = myClass(123);\n</code></pre>\n<p>is <a href=\"http://en.cppreference.com/w/cpp/language/copy_initialization\">copy initialization</a>. </p>\n<pre><code>myClass myVariable(123);\n</code></pre>\n<p>is <a href=\"http://en.cppreference.com/w/cpp/language/direct_initialization\">direct initialization</a>. </p>\n<pre><code>myClass myVariable;\nmyVariable = myClass(123);\n</code></pre>\n<p>is <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\">default initialization</a> followed by <a href=\"http://en.cppreference.com/w/cpp/language/as_operator\">copy (or move) assignment</a>.</p>\n<p>Typically, the first two are identical because of <a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\">copy elision</a>. The relevant rule can be found in [class.copy]/31 (N4140, C++14 draft standard):</p>\n<blockquote>\n<p id=\"so_28651855_28652030_0\">When certain criteria are met, an implementation is allowed to omit\n  the copy/move construction of a class object [...]:</p>\n<p id=\"so_28651855_28652030_1\">\u2014 when a temporary class object that has not been bound to a reference\n  (12.2) would be copied/moved to a class object with the same\n  cv-unqualified type, the copy/move operation can be omitted by\n  constructing the temporary object directly into the target of the\n  omitted copy/move</p>\n</blockquote>\n", "LastEditorDisplayName": "user3920237", "OwnerDisplayName": "user3920237", "LastActivityDate": "2015-02-21T22:24:48.740", "Score": "10", "CreationDate": "2015-02-21T22:16:25.003", "ParentId": "28651855", "CommentCount": "3", "LastEditDate": "2015-02-21T22:24:48.740"}, "28651855": {"ViewCount": "263", "Body": "<p>We can create an object in two ways:</p>\n<pre><code>myClass myObject = myClass(123);\n//or\nmyClass myObject(123);\n</code></pre>\n<p>Are there any differences in background between these two? I want to use the first one but it seems like combining these two lines:</p>\n<pre><code>myClass myObject;\nmyObject= myClass(123);\n</code></pre>\n<p>Does the second one also do the same thing?</p>\n", "AcceptedAnswerId": "28652030", "Title": "Are there any differences between these two lines?", "CreationDate": "2015-02-21T22:00:54.353", "Id": "28651855", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-02-21T22:15:56.357", "LastEditorUserId": "3025112", "LastActivityDate": "2015-02-22T07:11:06.147", "Score": "6", "OwnerUserId": "3025112", "Tags": "<c++>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_28651855_28652030_0": {"length": 11, "quality": 1.0, "section_id": 480}, "so_28651855_28652030_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 480}}, "n3337": {"so_28651855_28652030_0": {"length": 11, "quality": 1.0, "section_id": 471}, "so_28651855_28652030_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 471}}, "n4659": {"so_28651855_28652030_0": {"length": 11, "quality": 1.0, "section_id": 502}, "so_28651855_28652030_1": {"length": 17, "quality": 0.6296296296296297, "section_id": 502}}}, "28651930": {"Id": "28651930", "PostTypeId": "2", "Body": "<p>Not that I know of, in the end. You have described three ways of defining an object and all 3 ways place the object on top of the stack, calling the same constructor. The functionality would be different if you used the <code>new</code> operator.</p>\n", "LastActivityDate": "2015-02-21T22:08:01.010", "CommentCount": "6", "CreationDate": "2015-02-21T22:08:01.010", "ParentId": "28651855", "Score": "1", "OwnerUserId": "3371101"}});