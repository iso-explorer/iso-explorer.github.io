post_cb({"25070461": {"ParentId": "25070030", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-07-31T23:14:44.133", "Score": "15", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:23:28.397", "Id": "25070461", "OwnerUserId": "103167", "Body": "<p>The choice whether to use or avoid a legal feature becomes moot if the feature is not, in fact, legal.  I believe there's serious doubt surrounding this, because the Standard says</p>\n<blockquote>\n<p id=\"so_25070030_25070461_0\">The function <code>main</code> shall not be used within a program.</p>\n</blockquote>\n<p>There's already a question regarding whether befriending <code>::main()</code> is in fact allowed, and you'll find more details in <a href=\"https://stackoverflow.com/a/25071359/103167\">my answer there</a>.</p>\n", "LastActivityDate": "2014-08-01T01:11:32.143"}, "25070030": {"CommentCount": "10", "AcceptedAnswerId": "25070461", "PostTypeId": "1", "LastEditorUserId": "768469", "CreationDate": "2014-07-31T22:33:43.173", "LastActivityDate": "2014-08-15T02:42:19.550", "LastEditDate": "2014-08-01T00:51:49.300", "ViewCount": "499", "FavoriteCount": "1", "Title": "Declaring main as friend considered harmful?", "Id": "25070030", "Score": "14", "Body": "<h2>Discussion</h2>\n<p>I know that <code>main</code> can be a friend of a <code>class</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass foo {\n  friend int main();\n  int i = 4;\n};\n\nint main() {\n  foo obj;\n  std::cout &lt;&lt; obj.i &lt;&lt; std::endl;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/7e8a021134b403f1\"><kbd><strong>LIVE DEMO</strong></kbd></a></p>\n<p>However, I feel that although this is perfectably allowable it conceals many dangers.</p>\n<h2>Questions</h2>\n<ol>\n<li>Are there any valuable uses in making <code>main</code> a friend of a class?</li>\n<li>Are there any reasons that declaring <code>main</code> as friend of a class should be considered harmful? </li>\n</ol>\n", "Tags": "<c++><c++11><main><language-lawyer><friend>", "OwnerUserId": "2352671", "AnswerCount": "3"}, "25320532": {"ParentId": "25070030", "CommentCount": "0", "CreationDate": "2014-08-15T02:42:19.550", "OwnerUserId": "1708801", "PostTypeId": "2", "Id": "25320532", "Score": "3", "Body": "<p>Ben already indicated that the draft C++ standard in section <code>3.6.1</code> <em>Main function</em> says:</p>\n<blockquote>\n<p id=\"so_25070030_25320532_0\">The function main shall not be used within a program. [...]</p>\n</blockquote>\n<p>but the term <em>used</em> is not defined and so it is not clear what the interpretation should be. Fortunately for us, we can find two pieces of evidence outside of SO that strongly indicates any <em>use</em> at all of <code>main</code> is ill-formed.</p>\n<p>First we have this discussion in the <a href=\"http://www.open-std.org/mailman/listinfo/ub\" rel=\"nofollow\">undefined behaviour study group discussion list</a> in the thread <a href=\"http://www.open-std.org/pipermail/ub/2014-January/000474.html\" rel=\"nofollow\">What does \"The function main shall not be used within a program\" mean?</a>, this quote from <a href=\"http://www.open-std.org/pipermail/ub/2014-January/000488.html\" rel=\"nofollow\">here</a> seems to sum up the sentiment:</p>\n<blockquote>\n<p id=\"so_25070030_25320532_1\">C++98's mention of 'use' had a cross-reference to 3.2 [basic.def.odr].\n  C++11 no longer has the cross-reference, and was <em>not</em> changed to say\n  'odr-use', so I expect it means <em>any</em> use.</p>\n</blockquote>\n<p>we have further evidence from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3154.html\" rel=\"nofollow\">original proposal: N3154</a> to fix <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1109\" rel=\"nofollow\">Defect report 1109</a> would have changed <code>3.6.1</code> to:</p>\n<blockquote>\n<p id=\"so_25070030_25320532_2\">The function main shall not be odr-used (3.2) within a program. ... </p>\n</blockquote>\n<p>but was amended when <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3296.html#US19\" rel=\"nofollow\">accepted</a> and we can see that the new <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3214.htm\" rel=\"nofollow\">proposal: N3214</a> changed to what we have today:</p>\n<blockquote>\n<p id=\"so_25070030_25320532_3\">The function main shall not be used within a program</p>\n</blockquote>\n", "LastActivityDate": "2014-08-15T02:42:19.550"}, "bq_ids": {"n4140": {"so_25070030_25070319_0": {"section_id": 6687, "quality": 1.0, "length": 7}}, "n3337": {"so_25070030_25070319_0": {"section_id": 6442, "quality": 1.0, "length": 7}}, "n4659": {"so_25070030_25070319_0": {"section_id": 8162, "quality": 0.8571428571428571, "length": 6}}}, "25070319": {"ParentId": "25070030", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-07-31T23:00:34.547", "Score": "8", "LastEditorUserId": "3510483", "LastEditDate": "2014-07-31T23:26:07.833", "Id": "25070319", "OwnerUserId": "3510483", "Body": "<p>The general frienship considerations should be identical as for any other functions.</p>\n<hr>\n<p>However I see one possible danger:</p>\n<p>C++ Standard :</p>\n<ul>\n<li><strong>Section \u00a7 11.3 (Friends)</strong></li>\n</ul>\n<blockquote>\n<p id=\"so_25070030_25070319_0\">A function first declared in a friend declaration has external linkage</p>\n</blockquote>\n<ul>\n<li><strong>Section \u00a7 3.6.1 (Main Function)</strong></li>\n</ul>\n<blockquote>\n<p id=\"so_25070030_25070319_1\">The linkage of main is implementation-defined</p>\n</blockquote>\n<p>So if your implementation expects <code>main()</code> not to have external linkage <strong>and</strong> you first declare <code>main()</code> as a friend (as in your example), you contradict the standard.</p>\n</hr>", "LastActivityDate": "2014-07-31T23:26:07.833"}});