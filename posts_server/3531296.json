post_cb({"3531296": {"CreationDate": "2010-08-20T13:34:01.757", "ViewCount": "711", "Id": "3531296", "AcceptedAnswerId": "3531395", "Score": "12", "Title": "Have I found a bug in Clang?", "LastEditorUserId": "165520", "CommentCount": "5", "Body": "<p>I tried to compile the code below with <code>Clang</code></p>\n<pre><code>class Prasoon{\n\n  static const int dummy = 0;\n\n};\nint const Prasoon::dummy = 0;\n\nint main(){}\n</code></pre>\n<p>The above code did not give any error when compiled with <code>Clang.</code> </p>\n<pre><code>prasoon@prasoon-desktop ~ $ clang++ --version\nclang version 2.8 (trunk 107611)\nTarget: i386-pc-linux-gnu\nThread model: posix\nprasoon@prasoon-desktop ~ $ cat bug.cpp\nclass Prasoon{\n\n      private:\n      static const int dummy = 0;\n\n    };\n\nint const Prasoon::dummy = 0;\n\nint main(){}\nprasoon@prasoon-desktop ~ $ clang++ bug.cpp\nprasoon@prasoon-desktop ~ $ \n</code></pre>\n<p>But when I compiled the same code with <code>g++</code> I got an error as expected. </p>\n<pre><code>prasoon@prasoon-desktop ~ $ g++ bug.cpp\nbug.cpp:8: error: duplicate initialization of \u2018Prasoon::dummy\u2019\n</code></pre>\n<p>So have I found a bug in <code>Clang</code>? </p>\n", "Tags": "<c++><g++><static-members><clang>", "LastEditDate": "2010-08-21T13:11:19.653", "LastActivityDate": "2010-08-22T22:04:28.373", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "165520"}, "bq_ids": {"n4140": {"so_3531296_3531395_0": {"length": 52, "quality": 0.8524590163934426, "section_id": 5908}}, "n3337": {"so_3531296_3531395_0": {"length": 52, "quality": 0.8524590163934426, "section_id": 5680}}}, "3543626": {"CommentCount": "0", "Body": "<p>Yes this is indeed a bug. I stumbled upon your <a href=\"http://llvm.org/bugs/show_bug.cgi?id=7954\" rel=\"nofollow noreferrer\">bug report</a> to clang -- thanks for taking the time to submit it :)  While this bug was initially logged as a <a href=\"http://llvm.org/bugs/show_bug.cgi?id=6904\" rel=\"nofollow noreferrer\">bug</a> on 4/23/10, your submission brought it to my attention and I have submitted a simple <a href=\"http://lists.cs.uiuc.edu/pipermail/cfe-dev/2010-August/010514.html\" rel=\"nofollow noreferrer\">patch</a> to the developer's group for their review.  </p>\n", "CreationDate": "2010-08-22T22:04:28.373", "ParentId": "3531296", "Id": "3543626", "LastActivityDate": "2010-08-22T22:04:28.373", "PostTypeId": "2", "Score": "4", "OwnerUserId": "51103"}, "3531395": {"CommentCount": "0", "Body": "<p>Yes, you have found a bug.</p>\n<p>The rule is expressed in the standard:</p>\n<blockquote>\n<p id=\"so_3531296_3531395_0\">9.4.2-3:\n  If a static data member is of const\n  literal type, its declaration in the\n  class definition can specify a\n  brace-or- equal-initializer in which\n  every initializer-clause that is an\n  assignment-expression is a constant\n  expression. A static data member of\n  literal type can be declared in the\n  class definition with the constexpr\n  specifier; if so, its declaration\n  shall specify a\n  brace-or-equal-initializer in which\n  every initializer-clause that is an\n  assignment-expression is a constant\n  expression. [ Note: In both these\n  cases, the member may appear in\n  constant expressions. \u2014 end note ] <strong>The\n  member shall still be defined in a\n  namespace scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer.</strong></p>\n</blockquote>\n", "CreationDate": "2010-08-20T13:44:07.873", "ParentId": "3531296", "Id": "3531395", "LastActivityDate": "2010-08-20T13:44:07.873", "PostTypeId": "2", "Score": "9", "OwnerUserId": "417024"}});