post_cb({"24346868": {"ParentId": "24346841", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_24346841_24346868_0\">It always works for me but I don't know is it just undefined behaviour\n  or it actually should work.</p>\n</blockquote>\n<p>No, there is no undefined behavior because temporary object produced by g() will be deleted after evaluating full expression, that is body of f() function.</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.3/3</p>\n<p>When an implementation introduces a temporary object of a class that has a non-trivial constructor (12.1,\n12.8), it shall ensure that a constructor is called for the temporary object. Similarly, the destructor shall be\ncalled for a temporary with a non-trivial destructor (12.4). Temporary objects are destroyed as the last step\nin evaluating the full-expression (1.9) that (lexically) contains the point where they were created. This is true\neven if that evaluation ends in throwing an exception. The value computations and side effects of destroying</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.3/4</p>\n<p>There are two contexts in which temporaries are destroyed at a different point than the end of the full-\nexpression. The first context is when a default constructor is called to initialize an element of an array. If\nthe constructor has one or more default arguments, the destruction of every temporary created in a default\nargument is sequenced before the construction of the next array element, if any.</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.3/5</p>\n<p>The second context is when a reference is bound to a temporary. (...)</p>\n", "OwnerUserId": "1141471", "LastEditorUserId": "1141471", "LastEditDate": "2014-06-22T00:00:41.147", "Id": "24346868", "Score": "2", "CreationDate": "2014-06-21T23:46:25.887", "LastActivityDate": "2014-06-22T00:00:41.147"}, "24346890": {"ParentId": "24346841", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>g()</code> is a temporary. Lifetime of tempraries extends for the entire time of evaluation of the entire <em>full-expression</em> (in your case, that would be <code>f(g().c_str())</code>) Therefore your usage is safe, unless the <code>f()</code> stores the pointer somewhere.</p>\n<blockquote>\n<p id=\"so_24346841_24346890_0\">\u00a712.2/4 There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression. The first context is when an expression appears as an initializer for a declarator defining an object. In that context, the temporary that holds the result of the expression shall persist until the object\u2019s initialization is complete. [...]</p>\n<p id=\"so_24346841_24346890_1\">\u00a712.2/5 The second context is when a reference is bound to a temporary. [...]</p>\n</blockquote>\n<p>Neither of these two cases apply in your example.</p>\n", "OwnerUserId": "1012936", "LastEditorUserId": "1012936", "LastEditDate": "2014-06-21T23:58:51.073", "Id": "24346890", "Score": "2", "CreationDate": "2014-06-21T23:49:40.910", "LastActivityDate": "2014-06-21T23:58:51.073"}, "24346895": {"ParentId": "24346841", "CommentCount": "0", "Body": "<p>A temporary object constructed as part of an expression evaluation is destructed after evaluating the <em>full expression</em> containing the expression, unless it is bound to a named reference. (12.2 and 1.9 in the current draft standard are the relevant sections).</p>\n<p>So in your example, the temporary constructed to hold the return value of <code>g</code> will be destroyed after <code>f</code> returns.</p>\n", "OwnerUserId": "16406", "PostTypeId": "2", "Id": "24346895", "Score": "2", "CreationDate": "2014-06-21T23:49:57.060", "LastActivityDate": "2014-06-21T23:49:57.060"}, "bq_ids": {"n4140": {"so_24346841_24346890_1": {"section_id": 382, "quality": 0.75, "length": 6}}, "n3337": {"so_24346841_24346890_1": {"section_id": 373, "quality": 0.75, "length": 6}}, "n4659": {"so_24346841_24346890_1": {"section_id": 397, "quality": 0.625, "length": 5}}}, "24346841": {"CommentCount": "4", "ViewCount": "108", "CreationDate": "2014-06-21T23:42:25.503", "LastActivityDate": "2014-06-22T00:00:41.147", "Title": "C++: when object constructed in argument is destructed?", "AcceptedAnswerId": "24346890", "PostTypeId": "1", "Id": "24346841", "Score": "1", "Body": "<p>When object constructed in argument is destructed, before of after function call?</p>\n<p>E.g. is the following code safe?</p>\n<pre><code>void f(const char*)\n{ ... }\n\nstd::string g()\n{ ... }\n...\nf(g().c_str());\n</code></pre>\n<p>It always works for me but I don't know is it just undefined behaviour or it actually should work.</p>\n", "Tags": "<c++>", "OwnerUserId": "973730", "AnswerCount": "3"}});