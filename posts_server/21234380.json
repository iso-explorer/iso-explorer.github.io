post_cb({"bq_ids": {"n4140": {"so_21234380_21234522_0": {"length": 56, "quality": 0.875, "section_id": 3326}}, "n3337": {"so_21234380_21234522_0": {"length": 56, "quality": 0.875, "section_id": 3196}}, "n4659": {"so_21234380_21234522_0": {"length": 56, "quality": 0.875, "section_id": 4092}}}, "21234380": {"ViewCount": "748", "Body": "<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    A() { std::cout &lt;&lt; \"(A::A)\"; }\n};\n\nstruct B\n{\n    B() { std::cout &lt;&lt; \"(B::B)\"; }\n};\n\nstruct C\n{\n    template&lt;typename ...Args&gt;\n    C(Args &amp;&amp; ...) {}\n};\n\nint main(int agrc, char *argv[])\n{\n    C {A(), B()}; // &lt;-- prints (B::B)(A::A)\n    std::cout &lt;&lt; std::endl;\n    C {(A(), B())}; // &lt;-- prints (A::A)(B::B)\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>I've got 2 questions:</p>\n<ul>\n<li>Why in first braced init list objects are created in right-to-left order? </li>\n<li>Why parentheses in second case revert this order?</li>\n</ul>\n<p>Edit: I've compiled it with msvs 2013</p>\n", "AcceptedAnswerId": "21234522", "Title": "Object creation order in braced init list", "CreationDate": "2014-01-20T12:38:25.337", "Id": "21234380", "CommentCount": "18", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-01-25T19:13:10.037", "LastEditorUserId": "2952464", "LastActivityDate": "2014-01-25T19:13:10.037", "Score": "15", "OwnerUserId": "1240657", "Tags": "<c++><visual-studio><c++11><visual-studio-2013>", "AnswerCount": "3"}, "21234525": {"Id": "21234525", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21234380_21234525_0\">Why in first braced init list objects are created in right-to-left order?</p>\n</blockquote>\n<p>No. It is left-to-right. Your compiler has bug which is why it is evaluating right-to-left. <em>GCC (4.8) is known to have this bug. Do you use GCC?</em></p>\n<blockquote>\n<p id=\"so_21234380_21234525_1\">Why parentheses in second case revert this order?</p>\n</blockquote>\n<p>Same. Left to right. In this case, comma operator comes into picture, which evaluates operands left-to-right.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2014-01-20T12:49:55.323", "Score": "5", "CreationDate": "2014-01-20T12:44:53.610", "ParentId": "21234380", "CommentCount": "2", "LastEditDate": "2014-01-20T12:49:55.323", "OwnerUserId": "415784"}, "21234842": {"Id": "21234842", "PostTypeId": "2", "Body": "<p>It is an old bug of gcc 4.8.1 ( I suppose you use GCC) or of other compiler. I wrote about this bug several months ago \n<a href=\"http://cpp.forum24.ru/?1-3-0-00000063-000-0-0-1378892425\" rel=\"nofollow\">the initializer-list: a bug of GCC 4.8.1</a></p>\n<p>Though it is written in Russian but you can translate it into English using for example google service translate.</p>\n<p>As it was said by others elements of the initializer-list are evaluated from left to right and all side effects are applied before evaluation of the next element.</p>\n<p>In your second code example you in fact call the constructor with one expression that is an expression of the comma operator. The comma operator in fact behaves the same way as initializer-lists that is it evaluates its operands from left to right and applies side effects before evaluation of the next operand.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-01-20T13:07:14.620", "Score": "2", "CreationDate": "2014-01-20T13:00:39.420", "ParentId": "21234380", "CommentCount": "0", "LastEditDate": "2014-01-20T13:07:14.620", "OwnerUserId": "2877241"}, "21234522": {"Id": "21234522", "PostTypeId": "2", "Body": "<p>In the second instance, you're actually only initialising with <code>B()</code>; through the use of the <strong>comma operator</strong>, <code>A()</code> was constructed and thrown away first.</p>\n<pre><code>C {(A(), B())};\n//|^^^^^^^^^^|\n//      \\--------&gt; (A(), B())\n//                  ^^^  ^^^\n//                   |    |\n//                   /    \\\n//            evaluated,   THEN evaluated,\n//            discarded      used\n</code></pre>\n<hr>\n<p>On the other hand, in the first instance, you're initialising the <code>C</code> from <em>both</em> temporaries through an initializer list, whose elements should also be evaluated left-to-right, as it happens, but your compiler is buggy in this regard:</p>\n<blockquote>\n<p id=\"so_21234380_21234522_0\"><code>[C++11: 8.5.4/4]:</code> Within the <em>initializer-list</em> of a <em>braced-init-list</em>, <strong>the initializer-clauses</strong>, including any that result from pack expansions (14.5.3), <strong>are evaluated in the order in which they appear.</strong> That is, every value computation and side effect associated with a given <em>initializer-clause</em> is sequenced before every value computation and side effect associated with any <em>initializer-clause</em> that follows it in the comma-separated list of the <em>initializer-list</em>. <em>[ Note:</em> This evaluation ordering holds regardless of the semantics of the initialization; for example, it applies when the elements of the <em>initializer-list</em> are interpreted as arguments of a constructor call, even though ordinarily there are no sequencing constraints on the arguments of a call. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>I can reproduce the problem with GCC 4.8<sup>*</sup>, but Clang 3.5 behaves properly<sup>\u2020</sup>. The bug has been discussed on the <em>std-discussion</em> list before<sup>&amp;ddagger;</sup>, but I haven't found a GCC Bugzilla ID yet<sup>\u00a7</sup>.</p>\n<pre><code>C {A(), B()};\n// ^^^  ^^^\n//  |    \\\n// eval-  THEN\n// uated   evaluated\n//  \\       /\n//   \\     /\n//  both used\n</code></pre>\n<hr>\n<p><sup><sup>*</sup> <a href=\"http://coliru.stacked-crooked.com/a/1f18e0d1f8973f3c\">http://coliru.stacked-crooked.com/a/1f18e0d1f8973f3c</a></sup><br>\n<sup><sup>\u2020</sup> <a href=\"http://coliru.stacked-crooked.com/a/5a6e7506e9be97c3\">http://coliru.stacked-crooked.com/a/5a6e7506e9be97c3</a></sup><br>\n<sup><sup>&amp;ddagger;</sup> <a href=\"https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/TQUnBFkUBDg\">https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/TQUnBFkUBDg</a></sup><br>\n<sup><sup>\u00a7</sup> <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51253\">#51253</a> may be related.</sup></br></br></br></p>\n</hr></hr>", "LastEditorUserId": "560648", "LastActivityDate": "2014-01-20T12:58:37.400", "Score": "21", "CreationDate": "2014-01-20T12:44:42.820", "ParentId": "21234380", "CommentCount": "5", "LastEditDate": "2014-01-20T12:58:37.400", "OwnerUserId": "560648"}});