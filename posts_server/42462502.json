post_cb({"42463942": {"Id": "42463942", "PostTypeId": "2", "Body": "<p>\"generic lambda\" is defined in <a href=\"https://timsong-cpp.github.io/cppwp/dcl.spec.auto#3\" rel=\"nofollow noreferrer\">[dcl.spec.auto]/3</a>:</p>\n<blockquote>\n<p id=\"so_42462502_42463942_0\">If the <code>auto</code> <em>type-specifier</em> appears as one of the <em>decl-specifier</em>s\n  in the <em>decl-specifier-seq</em> of a <em>parameter-declaration</em> of a\n  <em>lambda-expression</em>, the lambda is a <em>generic lambda</em>.</p>\n</blockquote>\n<p>The <code>auto</code> in <code>const std::vector&lt;auto&gt;&amp; x</code> is not \"one of the <em>decl-specifier</em>s\nin the <em>decl-specifier-seq</em>\", therefore <code>[](const std::vector&lt;auto&gt;&amp; x){ }</code> is not a \"generic lambda\". Instead, per <a href=\"https://timsong-cpp.github.io/cppwp/dcl.spec.auto#6\" rel=\"nofollow noreferrer\">[dcl.spec.auto]/6</a>:</p>\n<blockquote>\n<p id=\"so_42462502_42463942_1\">A program that uses <code>auto</code> or <code>decltype(auto)</code> in a context not\n  explicitly allowed in this section is ill-formed.</p>\n</blockquote>\n", "LastActivityDate": "2017-02-26T02:11:52.447", "CommentCount": "1", "CreationDate": "2017-02-26T02:11:52.447", "ParentId": "42462502", "Score": "2", "OwnerUserId": "2756719"}, "bq_ids": {"n4140": {"so_42462502_42463942_1": {"length": 8, "quality": 1.0, "section_id": 5450}, "so_42462502_42463942_0": {"length": 11, "quality": 1.0, "section_id": 5447}}, "n3337": {"so_42462502_42463942_1": {"length": 7, "quality": 0.875, "section_id": 5244}}, "n4659": {"so_42462502_42463942_1": {"length": 8, "quality": 1.0, "section_id": 6877}, "so_42462502_42463942_0": {"length": 11, "quality": 1.0, "section_id": 6874}}}, "42462502": {"ViewCount": "101", "Body": "<p>I'm trying to figure out why clang is not compiling this code:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    auto lambda = [](const std::vector&lt;auto&gt;&amp; x){\n        std::cout &lt;&lt; x.front() &lt;&lt; x.back() &lt;&lt; std::endl;\n    };\n    lambda(std::vector&lt;int&gt;(1,1));\n}\n</code></pre>\n<p>According to this post <a href=\"https://stackoverflow.com/questions/37749044/generic-lambda-argument-for-stdpair\">auto in pair</a> it is not allowed by the C++14 Standard, but I could not find any sources to support that.\nMy understanding of the respective part of the standard is, that this feature should be allowed (Chapter 5.1.2 Clause 5 indicates that every auto is translated into a template parameter, independent of the exact positioning\n(Quote: <code>consists of one invented type template-parameter for each occurrence of auto in the lambda\u2019s parameter-declaration-clause</code>).</p>\n<p>To avoid any later questions: no I don't have an actual Standard, but use a earlier Draft (N3797). I hope that they did not remove my interpretion.</p>\n<p>Thank you!</p>\n", "AcceptedAnswerId": "42462691", "Title": "generic lambda auto in parameter type template type", "CreationDate": "2017-02-25T22:47:07.880", "Id": "42462502", "CommentCount": "1", "LastEditDate": "2017-05-23T11:53:30.537", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-02-26T02:11:52.447", "Score": "0", "OwnerUserId": "5709287", "Tags": "<c++><lambda><c++14><auto>", "AnswerCount": "2"}, "42462691": {"Id": "42462691", "PostTypeId": "2", "Body": "<p>Your misunderstanding of the standard has to do with what <code>parameter-declaration-clause</code> permits. It is a list of <code>parameter-declaration</code>s. And that involves a lot of complex grammar.</p>\n<p>But the end result of untangling that complex grammar is that <code>auto</code> cannot be used in a <code>template-argument-list</code>. And that's what you're trying to do when you use <code>vector&lt;auto&gt;</code>.</p>\n<p>So 5.1.2 is irrelevant, since grammatically <code>auto</code> simply <em>cannot</em> be put there.</p>\n", "LastActivityDate": "2017-02-25T23:06:43.827", "CommentCount": "1", "CreationDate": "2017-02-25T23:06:43.827", "ParentId": "42462502", "Score": "1", "OwnerUserId": "734069"}});