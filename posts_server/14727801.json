post_cb({"14728485": {"ParentId": "14727801", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Whether the memory leaks or not depends on the Operating system. In case of most operating systems once the process in which your program runs exits the OS simply reclaims back the memory it allocated to the process.         </p>\n<p>There is another important aspect to it. <code>new</code> results in calling of the class constructor and <code>delete</code> results in call to an destructor. So if you called <code>new</code> and never called <code>delete</code> then in addition to the <em>so called memory leak</em> which may/may not exist after the program exit there is an additional condition that if the destructor of the particular class invokes some code which has <em><a href=\"https://stackoverflow.com/questions/9563600/what-exactly-is-a-side-effect-in-c\">side effects</a></em> then it results in Undefined Behavior.     </p>\n<p>So the answer is it depends, You may possibly have:      </p>\n<ul>\n<li>A memory leak(<em>depending on the OS behavior</em>)</li>\n<li>An undefined behavior(<em>depending on whether code in destructor has side effects</em>)</li>\n</ul>\n<p><strong>C++11 Standard 3.8 Object lifetime:<br>\nPara 4:</br></strong></p>\n<blockquote>\n<p id=\"so_14727801_14728485_0\">A program may end the lifetime of any object by reusing the storage which the object occupies or by explicitly calling the destructor for an object of a class type with a non-trivial destructor. For an object of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly before the storage\n  which the object occupies is reused or released; however, <strong>if there is no explicit call to the destructor or if a delete-expression (5.3.5) is not used to release the storage, the destructor shall not be implicitly called and any program that depends on the side effects produced by the destructor has undefined behavior.</strong></p>\n</blockquote>\n", "OwnerUserId": "452307", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:06:08.963", "Id": "14728485", "Score": "3", "CreationDate": "2013-02-06T11:55:02.130", "LastActivityDate": "2013-02-06T11:55:02.130"}, "14727849": {"ParentId": "14727801", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>In short, yes.</p>\n<p>All storage mapped into a process' address space will be returned to the operating system when that process terminates, even if you did not  explicitly free it.</p>\n", "OwnerUserId": "464709", "LastEditorUserId": "464709", "LastEditDate": "2013-02-06T12:19:29.240", "Id": "14727849", "Score": "5", "CreationDate": "2013-02-06T11:22:54.310", "LastActivityDate": "2013-02-06T12:19:29.240"}, "14728022": {"ParentId": "14727801", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Your question seems to be based on a naive understanding of how memory works that just doesn't correspond to what a modern operating system does. The term \"memory\" is confusingly ambiguous, and you really should think of physical memory (RAM) and virtual memory (address space) separately.</p>\n<p>When you call <code>malloc</code>, you reserve address space in your process. If the operating system thinks it's wise to do so, it backs that address space with physical RAM. If the OS wants to use that RAM for something else, it simply does. You can't stop it. So you don't have to worry about RAM. The operating system is smart enough to always put RAM to its best use even if it's not specifically freed by a process.</p>\n<p>Virtual memory, mere address space, is not scarce. And your address space ceases to exist as soon as your process is terminated. So there is nothing to return.</p>\n<p>As soon as memory is unreachable, the operating system has no choice but to make it free.</p>\n", "OwnerUserId": "721269", "LastEditorUserId": "721269", "LastEditDate": "2013-02-06T11:37:51.973", "Id": "14728022", "Score": "1", "CreationDate": "2013-02-06T11:31:34.857", "LastActivityDate": "2013-02-06T11:37:51.973"}, "14727899": {"ParentId": "14727801", "CommentCount": "2", "Body": "<p>In C++, delete will result in the destructor of the object being called. This destructor may take care of things other than releasing memory. It may close files, reduce reference counts, etc. So there is no telling what may go wrong if you neglect to delete a dynamically allocated object.</p>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "14727899", "Score": "4", "CreationDate": "2013-02-06T11:25:13.223", "LastActivityDate": "2013-02-06T11:25:13.223"}, "14727909": {"ParentId": "14727801", "CommentCount": "0", "Body": "<p>If you wouldn't call <code>delete</code> - no destructors will be called. If any destructor closes the file, writes something to database, etc., then these actions wouldn't be done</p>\n", "OwnerUserId": "667266", "PostTypeId": "2", "Id": "14727909", "Score": "2", "CreationDate": "2013-02-06T11:25:52.597", "LastActivityDate": "2013-02-06T11:25:52.597"}, "14727801": {"CommentCount": "1", "AcceptedAnswerId": "14728485", "ClosedDate": "2013-02-06T12:21:21.033", "CreationDate": "2013-02-06T11:20:45.413", "LastActivityDate": "2013-02-06T12:19:29.240", "PostTypeId": "1", "ViewCount": "386", "Title": "free/delete - what if I don't call them", "Id": "14727801", "Score": "2", "Body": "<p>I know that if I don't free allocated memory with delete/free I'd end up with memory leaks. My question is: if my program gets terminated, does the operating system free the memory for me even if I didn't?</p>\n", "Tags": "<c++><c><memory><memory-management><malloc>", "OwnerUserId": "1494037", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_14727801_14728485_0": {"section_id": 7192, "quality": 0.9607843137254902, "length": 49}}, "n3337": {"so_14727801_14728485_0": {"section_id": 6936, "quality": 0.9607843137254902, "length": 49}}, "n4659": {"so_14727801_14728485_0": {"section_id": 8701, "quality": 0.9607843137254902, "length": 49}}}});