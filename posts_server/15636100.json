post_cb({"bq_ids": {"n4140": {"so_15636100_15636397_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}}, "n3337": {"so_15636100_15636397_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}}, "n4659": {"so_15636100_15636397_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}}}, "15636100": {"ViewCount": "183", "Body": "<p>I have written a small problem for checking the behavior of const_cast on const data member.</p>\n<pre><code>using namespace std;\n\n\n     class myString{\n         public:\n                 myString(char * str)\n                 {\n                         p=str;\n                 }\n                 const char * getString(){\n                         return p;\n                 }\n         private:\n                 const char *p;\n } ;\n\n\nint main()\n{\n        char *p=(char*)malloc(8);\n        cin&gt;&gt;p;\n        myString *m= new myString(p);\n        char *s =const_cast&lt;char*&gt;(m-&gt;getString());\n        s[6]='y';\n        cout&lt;&lt;s&lt;&lt;endl;\n        return 0;\n}\n</code></pre>\n<p>After running this program I give the out as \"yogendra\"  (a 8 letter string). and i got the output as \"yogendya\"\nNow my doubt. Through const_cast&lt;&gt; we can override the behavior of the data member itself as here the string is const char* still after casting i can modify it.</p>\n", "Title": "Behaviour about const_cast<>", "CreationDate": "2013-03-26T11:36:56.697", "LastActivityDate": "2013-03-26T12:12:37.740", "CommentCount": "4", "LastEditDate": "2013-03-26T11:47:00.120", "PostTypeId": "1", "LastEditorUserId": "1593860", "Id": "15636100", "Score": "0", "OwnerUserId": "1120878", "Tags": "<c++><const-cast>", "AnswerCount": "3"}, "15636397": {"Id": "15636397", "PostTypeId": "2", "Body": "<p>yes, you can use <code>const_cast&lt;&gt;</code> this way and it will not be an undefined behaviour since object pointed to by <code>const char*</code> in your class is indeed non-const of type <code>char*</code>. but be careful:.\nC++ standard. \u00a77.1.\u200b5.1/4 says </p>\n<blockquote>\n<p id=\"so_15636100_15636397_0\">Except that any class member declared mutable (7.1.1) can be modified,\n  any attempt to modify a const object during its lifetime (3.8) results\n  in undefined behavior</p>\n</blockquote>\n<p>safe use of const_cast is to i.e. cast const from const reference to a non-const object: when there is non const object and you have const ref to it, you can cast const from this safely  </p>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2013-03-26T12:12:37.740", "Score": "1", "CreationDate": "2013-03-26T11:50:45.987", "ParentId": "15636100", "CommentCount": "9", "OwnerUserId": "1141471", "LastEditDate": "2013-03-26T12:12:37.740"}, "15636366": {"Id": "15636366", "PostTypeId": "2", "Body": "<p>If you say</p>\n<pre><code>char *s =const_cast&lt;char*&gt;(m-&gt;getString());\n</code></pre>\n<p>then you essentially remove the \"const\" from the pointer, and you declare your <code>s</code> to be a pointer to char, and it's a writable string.  So the next line</p>\n<pre><code>s[6]='y';\n</code></pre>\n<p>is perfectly fine. To keep the const you ought to declare <code>s</code> as a const pointer</p>\n<pre><code>const char *s = m-&gt;getString();\n</code></pre>\n<p>in which case you won't be able to overwrite the constant string (error: assignment of read-only location).  I assume that is what you want?  The <code>const_cast</code> will simply add/remove the <code>const</code> and in your case, remove it.</p>\n", "LastActivityDate": "2013-03-26T11:49:07.257", "CommentCount": "4", "CreationDate": "2013-03-26T11:49:07.257", "ParentId": "15636100", "Score": "0", "OwnerUserId": "356307"}, "15636306": {"Id": "15636306", "PostTypeId": "2", "Body": "<p>You've described exactly what <code>const_cast</code> is for - it allows you to removed the <code>const</code>ness from something and modify it.  It's up to you not to abuse that power.  :-)</p>\n<p>(In your case this doesn't apply, but note that you can cause crashes by using <code>const_cast</code> - for example:</p>\n<pre><code>const char *c = \"Hello\";\nchar *s = const_cast&lt;char*&gt;(c);\ns[0] = 'h';\n</code></pre>\n<p>could crash because the compiler can put the string literal into read-only memory.)</p>\n", "LastActivityDate": "2013-03-26T11:46:03.083", "CommentCount": "1", "CreationDate": "2013-03-26T11:46:03.083", "ParentId": "15636100", "Score": "5", "OwnerUserId": "21886"}});