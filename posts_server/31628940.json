post_cb({"41549310": {"ParentId": "31628940", "CommentCount": "0", "Body": "<p>They are equivalent. Also, strings don't count characters when returning size, that's char arrays, if strings always counted characters then they would be too slow. </p>\n", "OwnerUserId": "6244076", "PostTypeId": "2", "Id": "41549310", "Score": "0", "CreationDate": "2017-01-09T13:37:03.847", "LastActivityDate": "2017-01-09T13:37:03.847"}, "31628940": {"CommentCount": "10", "ViewCount": "205", "PostTypeId": "1", "LastEditorUserId": "103167", "CreationDate": "2015-07-25T16:58:52.740", "LastActivityDate": "2017-01-09T13:37:03.847", "Title": "Which is faster C++ String length() or size()?", "AcceptedAnswerId": "31629020", "LastEditDate": "2015-07-25T17:27:35.997", "Id": "31628940", "Score": "-1", "Body": "<p><code>length()</code> returns the number of characters in the string and <code>size()</code> returns a <code>size_t</code> which is also the same but used to make it consistent with other STL containers.</p>\n<p>For computing <code>length()</code>, the string iterates through all the characters and counts the length. So, <code>O(n)</code> time.</p>\n<p>Is <code>size()</code> also the same ?</p>\n<p>Or can size of a variable be computed directly in <code>O(1)</code> time ?</p>\n<p>So, my question is, are they the same in terms of speed (as in how they are calculated) or is size computed in <code>O(1)</code> time ?</p>\n", "Tags": "<c++><string><size><time-complexity><string-length>", "OwnerUserId": "2964080", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31628940_31629020_2": {"section_id": 1601, "quality": 1.0, "length": 4}, "so_31628940_31629020_1": {"section_id": 1600, "quality": 0.6, "length": 6}}, "n3337": {"so_31628940_31629020_2": {"section_id": 1597, "quality": 1.0, "length": 4}, "so_31628940_31629020_1": {"section_id": 1596, "quality": 0.6, "length": 6}}, "n4659": {"so_31628940_31629020_2": {"section_id": 1753, "quality": 1.0, "length": 4}, "so_31628940_31629020_1": {"section_id": 1752, "quality": 0.6, "length": 6}}}, "31629030": {"ParentId": "31628940", "CommentCount": "0", "Body": "<p>If you take a look at documentation <a href=\"http://www.cplusplus.com/reference/string/string/size/\" rel=\"nofollow\">here</a> it says that <code>length</code> and <code>size</code> are the same.</p>\n<blockquote>\n<p id=\"so_31628940_31629030_0\">Both string::size and string::length are synonyms and return the same value.</p>\n</blockquote>\n<p>Also if you take a look at the code, length is cached, so the complexity is <code>O(1)</code>. (Code from MS implementation but I'm sure other libraries are done the same way.)</p>\n<pre><code>size_type length() const _NOEXCEPT\n    {   // return length of sequence\n    return (this-&gt;_Mysize);\n    }\n\nsize_type size() const _NOEXCEPT\n    {   // return length of sequence\n    return (this-&gt;_Mysize);\n    }\n</code></pre>\n", "OwnerUserId": "4203694", "PostTypeId": "2", "Id": "31629030", "Score": "2", "CreationDate": "2015-07-25T17:08:13.277", "LastActivityDate": "2015-07-25T17:08:13.277"}, "31629020": {"ParentId": "31628940", "CommentCount": "0", "Body": "<p>Both have the same complexity: Constant.</p>\n<p>From the N4431 working draft, \u00a721.4.4</p>\n<blockquote>\n<p id=\"so_31628940_31629020_0\"><code>size_type size() const noexcept;</code></p>\n<p id=\"so_31628940_31629020_1\">Returns: A count of the number of char-like objects currently in the string. Complexity: Constant time.</p>\n</blockquote>\n<p>And</p>\n<blockquote>\n<p id=\"so_31628940_31629020_2\"><code>size_type length() const noexcept;</code></p>\n<p id=\"so_31628940_31629020_3\">Returns: size().</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_31628940_31629020_4\">[...] iterates through all the characters and counts the length [...]</p>\n</blockquote>\n<p>That's C strings you're thinking of.</p>\n</hr>", "OwnerUserId": "1116364", "PostTypeId": "2", "Id": "31629020", "Score": "4", "CreationDate": "2015-07-25T17:06:58.397", "LastActivityDate": "2015-07-25T17:06:58.397"}});