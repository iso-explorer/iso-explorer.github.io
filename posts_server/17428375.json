post_cb({"17429093": {"ParentId": "17428375", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-07-02T15:04:33.583", "Score": "3", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:25:31.843", "Id": "17429093", "OwnerUserId": "1033896", "Body": "<p>From section <em>23.3.6.3 vector capacity</em> of the C++11 standard (draft n3337), clause 9 (the bolded text is my emphasis as it is the case in the posted code that <code>sz &lt;= size()</code> is true):</p>\n<pre><code>void resize(size_type sz);\n</code></pre>\n<blockquote>\n<p id=\"so_17428375_17429093_0\">Effects: <strong>If sz &lt;= size(), equivalent to erase(begin() + sz, end());</strong>. If size() &lt; sz, appends sz - size() value-initialized elements to the sequence.</p>\n</blockquote>\n<p>and from section <em>23.3.6.5 vector modifiers</em>, clause 3:</p>\n<pre><code>iterator erase(const_iterator position);\niterator erase(const_iterator first, const_iterator last);\n</code></pre>\n<blockquote>\n<p id=\"so_17428375_17429093_1\">Effects: Invalidates iterators and references at or after the point of the erase.</p>\n</blockquote>\n<p><code>begin() + sz</code> is equal to <code>it</code>, therefore <code>it</code> is invalidated.</p>\n<p>To correct, just return <code>A.size()</code> (if the caller really requires it as that information is available from <code>A</code> anyway). Suggest using <code>A.erase(it, A.end());</code> (as commented by <a href=\"https://stackoverflow.com/users/661519/juanchopanza\">juanchopanza</a>) as the intent of the code is clearer.</p>\n", "LastActivityDate": "2013-07-02T16:15:44.147"}, "17428375": {"CommentCount": "9", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "1774667", "CreationDate": "2013-07-02T14:33:07.417", "LastActivityDate": "2013-07-02T16:15:44.147", "Title": "usage of the returned iterator from std::unique", "LastEditDate": "2013-07-02T14:42:24.013", "Id": "17428375", "Score": "0", "Body": "<pre><code>template &lt;typename T&gt;\nint eliminate_duplicate(vector&lt;T&gt; &amp;A) {\n  sort(A.begin(), A.end());  // makes identical elements become neighbors\n  auto it = unique(A.begin(), A.end());  // removes neighboring duplicates\n  A.resize(it - A.cbegin());  // truncates the unnecessary trailing part\n  return it - A.cbegin(); // Question&gt; Is this line valid?\n}\n</code></pre>\n<p>Is the last line valid?</p>\n<p>Here is my concern: after the calling of <code>resize</code>, the iterator <code>it</code> will point to a invalidate location, so can we still use it as <code>it - A.cbegin()</code> in the return line?</p>\n", "Tags": "<c++>", "OwnerUserId": "391104", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17428375_17429093_1": {"section_id": 988, "quality": 0.8571428571428571, "length": 6}, "so_17428375_17429093_0": {"section_id": 810, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_17428375_17429093_1": {"section_id": 973, "quality": 0.8571428571428571, "length": 6}, "so_17428375_17429093_0": {"section_id": 801, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_17428375_17429093_1": {"section_id": 1051, "quality": 0.8571428571428571, "length": 6}, "so_17428375_17429093_0": {"section_id": 868, "quality": 0.5454545454545454, "length": 6}}}});