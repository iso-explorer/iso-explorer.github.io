post_cb({"bq_ids": {"n4140": {"so_11115484_11115950_1": {"length": 42, "quality": 0.8571428571428571, "section_id": 7113}, "so_11115484_11115950_4": {"length": 8, "quality": 1.0, "section_id": 7113}, "so_11115484_11115950_5": {"length": 13, "quality": 0.8666666666666667, "section_id": 7113}, "so_11115484_11115950_2": {"length": 4, "quality": 0.8, "section_id": 7113}, "so_11115484_11116164_0": {"length": 22, "quality": 1.0, "section_id": 7129}, "so_11115484_11115950_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 7113}}, "n3337": {"so_11115484_11115950_1": {"length": 42, "quality": 0.8571428571428571, "section_id": 6857}, "so_11115484_11115950_4": {"length": 8, "quality": 1.0, "section_id": 6857}, "so_11115484_11115950_5": {"length": 13, "quality": 0.8666666666666667, "section_id": 6857}, "so_11115484_11115950_2": {"length": 4, "quality": 0.8, "section_id": 6857}, "so_11115484_11116164_0": {"length": 22, "quality": 1.0, "section_id": 6873}, "so_11115484_11115950_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6857}}, "n4659": {"so_11115484_11115950_1": {"length": 42, "quality": 0.8571428571428571, "section_id": 8614}, "so_11115484_11115950_4": {"length": 8, "quality": 1.0, "section_id": 8614}, "so_11115484_11116164_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 8630}, "so_11115484_11115950_5": {"length": 13, "quality": 0.8666666666666667, "section_id": 8614}, "so_11115484_11115950_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 8614}}}, "11115950": {"Id": "11115950", "PostTypeId": "2", "Body": "<p>I think this part of the standard is relevant:</p>\n<blockquote>\n<p id=\"so_11115484_11115950_0\">3.4.3.1 Class members [class.qual] </p>\n<p id=\"so_11115484_11115950_1\">1) If the nested-name-specifier of a qualified-id nominates a class, the name specified after the\n  nested-namespecifier is looked up in the scope of the class (10.2),\n  except for the cases listed below. The name shall represent one or\n  more members of that class or of one of its base classes (Clause 10).\n  [ Note: A class member can be referred to using a qualified-id at any\n  point in its potential scope (3.3.7). \u2014end note ] The exceptions to\n  the name lookup rule above are the following: </p>\n<p id=\"so_11115484_11115950_2\">\u2014 a destructor name is\n  looked up as specified in 3.4.3; </p>\n<p id=\"so_11115484_11115950_3\">\u2014 a conversion-type-id of a\n  conversion-function-id is looked up in the same manner as a\n  conversion-type-id in a class member access (see 3.4.5); </p>\n<p id=\"so_11115484_11115950_4\">\u2014 the names\n  in a template-argument of a template-id are looked up in the context\n  in which the entire postfix-expression occurs. </p>\n<p id=\"so_11115484_11115950_5\">\u2014 the lookup for a name\n  specified in a using-declaration (7.3.3) also finds class or\n  enumeration names hidden within the same scope (3.3.10).</p>\n</blockquote>\n<p><code>base::</code> in this case seems to \"nominate\" a class, so the look up is done in scope of the class. I don't see how any of the exception cases could apply, so it is the scope of the class, as such <code>base</code> is equivalent to <code>A</code>.</p>\n<p>(5.1.1-8 indicates that it is a qualified-id in that case and that 3.4.3.1 applies)</p>\n", "LastEditorUserId": "833362", "LastActivityDate": "2012-06-20T08:56:06.643", "Score": "6", "CreationDate": "2012-06-20T08:50:18.643", "ParentId": "11115484", "CommentCount": "1", "OwnerUserId": "833362", "LastEditDate": "2012-06-20T08:56:06.643"}, "11116164": {"Id": "11116164", "PostTypeId": "2", "Body": "<p>From C++11, \u00a73.4.5/4:</p>\n<blockquote id=\"so_11115484_11116164_0\">\nIf the id-expression in a class member access is a qualified-id of the\nform  \n<pre>\n    class-name-or-namespace-name::...\n</pre>\nthe class-name-or-namespace-name\nfollowing the . or -&gt; operator is first looked up in the class of the\nobject expression and the name, if found, is used. Otherwise it is\nlooked up in the context of the entire postfix-expression.\n</blockquote>\n<p>I don't think it can be clearer.  This finds <code>B::base</code>, so the output\nshould be <code>A::foo()</code>.</p>\n", "LastEditorUserId": "147192", "LastActivityDate": "2012-06-20T09:07:25.007", "Score": "7", "CreationDate": "2012-06-20T09:04:34.853", "ParentId": "11115484", "CommentCount": "1", "OwnerUserId": "649665", "LastEditDate": "2012-06-20T09:07:25.007"}, "11115484": {"ViewCount": "656", "Body": "<p>I hope the title actually describes what I wanted to ask...</p>\n<p>I wrote a piece of code that compiles with gcc and works as I intended.  However, it does not compile with llvm and the code executes differently when compiled with icc!<br>\nHere is an example of the problem:</br></p>\n<pre><code>#include &lt;iostream&gt;\n\nusing std::cout; using std::endl;\n\nclass A {\npublic:\n  virtual void foo() { cout &lt;&lt; \"A::foo()\" &lt;&lt; endl; }\n};\n\nclass B : public A {\npublic:\n  typedef A  base;\n  virtual void foo() { cout &lt;&lt; \"B::foo()\" &lt;&lt; endl; }\n};\n\nint main() {\n  typedef B  base;\n  base* bp = new B();\n  bp-&gt;base::foo(); \n}\n</code></pre>\n<p>gcc output:  A::foo()<br>\nicc output:  B::foo()</br></p>\n<p>Could somebody explain what does the standard say about this case?  </p>\n", "AcceptedAnswerId": "11116164", "Title": "C++ method call and type scope resolution ambiguity", "CreationDate": "2012-06-20T08:21:02.773", "Id": "11115484", "CommentCount": "12", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2012-06-20T08:40:19.500", "LastEditorUserId": "596781", "LastActivityDate": "2012-06-20T09:07:25.007", "Score": "18", "OwnerUserId": "1468472", "Tags": "<c++><types><scope><ambiguity><method-call>", "AnswerCount": "2"}});