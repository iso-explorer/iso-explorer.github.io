post_cb({"47374303": {"ParentId": "47374251", "CommentCount": "0", "CreationDate": "2017-11-19T06:34:14.547", "OwnerUserId": "2189130", "PostTypeId": "2", "Id": "47374303", "Score": "0", "Body": "<p>Yes, <code>std::move</code> is a bit of a misnomer as it doesn't actually <em>move</em> anything. It is used to <em>indicate</em> that an object may be \"moved from\". </p>\n<p>It does this by casting the object to a <code>T&amp;&amp;</code>. <a href=\"http://en.cppreference.com/w/cpp/utility/move\" rel=\"nofollow noreferrer\">cppreference</a> states the return value is <code>static_cast&lt;typename std::remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t)</code>. (btw, that is exactly what VS2017 does)</p>\n<p>I don't know precisely what the standard says on the matter.</p>\n", "LastActivityDate": "2017-11-19T06:34:14.547"}, "47374659": {"ParentId": "47374251", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2017-11-19T07:36:52.350", "Score": "1", "LastEditorUserId": "768110", "LastEditDate": "2017-11-19T20:55:22.383", "Id": "47374659", "OwnerUserId": "768110", "Body": "<p>Yes, that's exactly as it is described in the standard. In <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"nofollow noreferrer\">N4659</a> (which is last draft I found)</p>\n<p>it says in \u00a723.2.5</p>\n<blockquote>\n<p id=\"so_47374251_47374659_0\"><code>template &lt;class T&gt; constexpr remove_reference_t&lt;T&gt;&amp;&amp; move(T&amp;&amp; t) noexcept;</code> </p>\n<p id=\"so_47374251_47374659_1\">Returns: <code>static_cast&lt;remove_reference_t&lt;T&gt;&amp;&amp;&gt;(t)</code></p>\n</blockquote>\n<p>It doesn't mark anything for destruction, and it doesn't change the object but object may be changed in function that accepts rvalue (such as move constructor, move assignment operator)</p>\n", "LastActivityDate": "2017-11-19T20:55:22.383"}, "47374251": {"CommentCount": "0", "ViewCount": "51", "CreationDate": "2017-11-19T06:24:15.767", "LastActivityDate": "2017-11-19T20:55:22.383", "Title": "std::move() is just casting?", "PostTypeId": "1", "Id": "47374251", "Score": "1", "Body": "<p>I have read a few (pesudo) implementions of std::move().  And all are just casting away the reference of the parameter and then returning it as a rvalue reference.</p>\n<p>It doesn't do anything more than that.</p>\n<p>However, I am curious:\n1.  whether it does more than that.\n2. whether standard explicitly states that so that the caller should be aware the side effect.</p>\n<p>In the book The C++ Programming Language 4th edition, it states \"move(x) marks x for destruction so that move(x) should be used with care\".</p>\n<p>Does it mean that there is a side effect imposed by the standard and so compiler can do certain optimization?</p>\n<p>Thanks in advance.</p>\n", "Tags": "<c++11>", "OwnerUserId": "2206057", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47374251_47374659_0": {"section_id": 3947, "quality": 1.0, "length": 6}}, "n3337": {"so_47374251_47374659_0": {"section_id": 3806, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_47374251_47374659_0": {"section_id": 4834, "quality": 1.0, "length": 6}}}});