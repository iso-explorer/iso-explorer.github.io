post_cb({"bq_ids": {"n4140": {"so_34081179_34083702_0": {"length": 18, "quality": 1.0, "section_id": 107}}, "n3337": {"so_34081179_34083702_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 102}}, "n4659": {"so_34081179_34083702_0": {"length": 18, "quality": 1.0, "section_id": 111}}}, "34083702": {"Id": "34083702", "PostTypeId": "2", "Body": "<p>For question 1:\nAdd this line to <strike>one of your cpp</strike> file <strong>parent.h</strong>:</p>\n<pre><code>template &lt;class CHILD_TYPE&gt;\ntypename PARENT&lt;CHILD_TYPE&gt;::CHILD_DATA PARENT&lt;CHILD_TYPE&gt;::data;\n</code></pre>\n<p>--EDITED--</p>\n<p>From N3797, article 14.5.1.3</p>\n<blockquote>\n<p id=\"so_34081179_34083702_0\">A definition for a static data member or static data member template may be provided in a namespace scope enclosing the definition of the static member\u2019s class template.</p>\n</blockquote>\n<p>--END EDITED--</p>\n<p><strike>\nQuestion 2: Did you mean this?</strike></p>\n<pre><code>class SPECIAL_CHILD : public PARENT&lt;SPECIAL_CHILD*&gt;\n{\npublic:\n    SPECIAL_CHILD (const string newname = \"unnamed\") : name (newname) {}\n    string name;\n};\n</code></pre>\n<p></p>\n", "LastEditorUserId": "4115625", "LastActivityDate": "2015-12-12T05:16:05.217", "Score": "0", "CreationDate": "2015-12-04T08:15:37.797", "ParentId": "34081179", "CommentCount": "6", "OwnerUserId": "4115625", "LastEditDate": "2015-12-12T05:16:05.217"}, "34081179": {"ViewCount": "111", "Body": "<p>Have a simple example, with two questions related. Source code - 3 files:</p>\n<p>parent.h:</p>\n<pre><code>#ifndef PARENT_H\n#define PARENT_H\n\nusing namespace std;\n#include &lt;vector&gt;\n\ntemplate &lt;class CHILD_TYPE&gt;\nclass PARENT\n{\n    public:\n        class CHILD_DATA\n        {\n        public:\n            vector&lt;CHILD_TYPE *&gt; child_ptrs;\n            void dump_child_data();\n        };\n    static CHILD_DATA data;\n};\n\ntemplate&lt;class CHILD_TYPE&gt;\nvoid PARENT&lt;CHILD_TYPE&gt;::CHILD_DATA::dump_child_data()\n{\n    return;\n}\n\n#endif  /* PARENT_H */\n</code></pre>\n<p>child.h</p>\n<pre><code>#ifndef CHILD_H\n#define CHILD_H\n\n#include \"parent.h\"\nusing namespace std;\n\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n\nclass SPECIAL_CHILD : public PARENT&lt;SPECIAL_CHILD&gt;\n{\n    public:\n        SPECIAL_CHILD (const string newname = \"unnamed\") : name (newname) {}\n        string name;\n};\n\ntemplate&lt;&gt;\nvoid PARENT&lt;SPECIAL_CHILD&gt;::CHILD_DATA::dump_child_data()\n{\n    for (vector&lt;SPECIAL_CHILD *&gt;::iterator it = child_ptrs.begin(); it != child_ptrs.end(); it++)\n    {\n        cout &lt;&lt; (*it)-&gt;name &lt;&lt; endl;;\n    }\n    return;\n}\n\n#endif  /* CHILD_H */\n</code></pre>\n<p>main.cpp</p>\n<pre><code>#include &lt;cstdlib&gt;\n#include \"parent.h\"\n#include \"child.h\"\n\nusing namespace std;\n\nint main(int argc, char** argv) {\n\n    SPECIAL_CHILD c_a;\n    SPECIAL_CHILD c_b(\"named\");\n    SPECIAL_CHILD c_c(\"named_again\");\n    c_a.data.dump_child_data();\n    return 0;\n}\n</code></pre>\n<p><strong>Question 1:</strong> this example does not build: </p>\n<blockquote>\n<p id=\"so_34081179_34081179_0\">main.cpp:12: undefined reference to `PARENT::data'</p>\n</blockquote>\n<p>Why? Parent's member named data is public, can't I access it from a subclass object just as an own member?</p>\n<p><strong>Question 2</strong>: How to create in a superclass specialized template for a subclass - in my case, with template argument being a pointer to a subclass object? I definitely don't want a superclass to know anything about subclass. Should I put the specialized template definition in subclass header, as I did? Or maybe even in subclass .cpp , if such exists?</p>\n<p>Thanks.</p>\n", "Title": "specialized template for subclass", "CreationDate": "2015-12-04T04:58:29.047", "LastActivityDate": "2015-12-12T05:16:05.217", "CommentCount": "1", "PostTypeId": "1", "Id": "34081179", "Score": "0", "OwnerUserId": "2454025", "Tags": "<c++><templates><inheritance><template-specialization>", "AnswerCount": "2"}, "34081217": {"Id": "34081217", "PostTypeId": "2", "Body": "<p>For Q1, since <code>data</code> is a <code>static</code> member I think you need to access it like:</p>\n<pre><code>PARENT&lt;SPECIAL_CHILD&gt;::data.dump_child_data();\n</code></pre>\n", "LastActivityDate": "2015-12-04T05:03:13.540", "CommentCount": "0", "CreationDate": "2015-12-04T05:03:13.540", "ParentId": "34081179", "Score": "0", "OwnerUserId": "1715829"}});