post_cb({"7370162": {"ParentId": "7370154", "LastEditDate": "2011-09-10T07:13:33.857", "CommentCount": "5", "CreationDate": "2011-09-10T07:00:45.770", "OwnerUserId": "791998", "LastEditorUserId": "791998", "PostTypeId": "2", "Id": "7370162", "Score": "4", "Body": "<p><code>X % D</code> is by <strong>definition</strong> a number <code>0 &lt;= R &lt; D</code>, such that there exists <code>Q</code> so that</p>\n<pre><code>X = D*Q + R\n</code></pre>\n<p>So if <code>D = 0</code>, no such number can exists (because <code>0 &lt;= R &lt; 0</code>)</p>\n", "LastActivityDate": "2011-09-10T07:13:33.857"}, "7370737": {"ParentId": "7370154", "CommentCount": "0", "Body": "<p>Another way that might be conceptually easy to understand the issue:</p>\n<p>Ignoring for the moment the issue of argument sign, <code>a % b</code> could easily be re-written as <code>a - ((a / b) * b)</code>. The expression <code>a / b</code> is undefined if <code>b</code> is zero, so in that case the overall expression must be too.</p>\n<p>In the end, modulus is effectively a divisive operation, so if <code>a / b</code> is undefined, it's not unreasonable to expect <code>a % b</code> to be as well.</p>\n", "OwnerUserId": "214149", "PostTypeId": "2", "Id": "7370737", "Score": "2", "CreationDate": "2011-09-10T09:04:45.267", "LastActivityDate": "2011-09-10T09:04:45.267"}, "7370250": {"ParentId": "7370154", "CommentCount": "0", "Body": "<p>I think because to get the remainder of <code>X % 0</code> you need to first calculate <code>X / 0</code> which yields infinity, and trying to calculate the remainder of infinity is not really possible.</p>\n<p>However, the best solution in line with your thinking would be to do something like this</p>\n<pre><code>REMAIN = Y ? X % Y : X\n</code></pre>\n", "OwnerUserId": "665261", "PostTypeId": "2", "Id": "7370250", "Score": "2", "CreationDate": "2011-09-10T07:21:05.863", "LastActivityDate": "2011-09-10T07:21:05.863"}, "7370211": {"ParentId": "7370154", "LastEditDate": "2011-09-10T07:40:58.523", "CommentCount": "5", "CreationDate": "2011-09-10T07:10:24.420", "OwnerUserId": "415784", "LastEditorUserId": "415784", "PostTypeId": "2", "Id": "7370211", "Score": "29", "Body": "<p>The C++ Standard(2003) says in \u00a75.6/4,</p>\n<blockquote>\n<p id=\"so_7370154_7370211_0\">[...] If the second operand of / or % is zero the behavior is <strong>undefined</strong>; [...]</p>\n</blockquote>\n<p>That is, following expressions invoke undefined-behavior(UB):</p>\n<pre><code>X / 0; //UB\nX % 0; //UB\n</code></pre>\n<hr>\n<p>Note also that <code>-5 % 2</code> is NOT equal to <code>-(5 % 2)</code> (as Petar seems to suggest in his comment to his answer).  It's implementation-defined. The spec says (\u00a75.6/4), </p>\n<blockquote>\n<p id=\"so_7370154_7370211_1\">[...] If both operands are nonnegative then the remainder is nonnegative; <strong>if not, the sign of the remainder is implementation-defined</strong>.</p>\n</blockquote>\n</hr>", "LastActivityDate": "2011-09-10T07:40:58.523"}, "7370154": {"CommentCount": "7", "AcceptedAnswerId": "7370211", "PostTypeId": "1", "LastEditorUserId": "2209007", "CreationDate": "2011-09-10T06:58:09.080", "LastActivityDate": "2017-05-29T14:15:31.167", "LastEditDate": "2014-02-15T13:32:44.090", "ViewCount": "31373", "FavoriteCount": "2", "Title": "Can't Mod Zero?", "Id": "7370154", "Score": "45", "Body": "<p>Why is <code>X % 0</code> an invalid expression?</p>\n<p>I always thought <code>X % 0</code> should equal X. Since you can't divide by zero, shouldn't the answer naturally be the remainder, X (everything left over)?</p>\n", "Tags": "<c++><modulo><divide-by-zero>", "OwnerUserId": "688707", "AnswerCount": "7"}, "44244371": {"ParentId": "7370154", "LastEditDate": "2017-05-29T14:15:31.167", "CommentCount": "0", "CreationDate": "2017-05-29T14:01:30.870", "OwnerUserId": "8081905", "LastEditorUserId": "345027", "PostTypeId": "2", "Id": "44244371", "Score": "0", "Body": "<p>you can evade the \"divivion by 0\" case of (A%B) for its type float identity mod(a,b) for float(B)=b=0.0 , that is undefined, or defined differently between any 2 implementations, to avoid logic errors (hard crashes) in favor of arithmetic errors...</p>\n<p>by computing <code>mod([a*b],[b])==b*(a-floor(a))</code><br>\nINSTREAD OF<br>\ncomputing <code>mod([a],[b])</code></br></br></p>\n<p>where [a*b]==your x-axis, over time\n[b] == the maximum of the seesaw curve (that will never be reached) == the first derivative of the seesaw function</p>\n<p><a href=\"https://www.shadertoy.com/view/MslfW8\" rel=\"nofollow noreferrer\">https://www.shadertoy.com/view/MslfW8</a></p>\n", "LastActivityDate": "2017-05-29T14:15:31.167"}, "7370195": {"ParentId": "7370154", "LastEditDate": "2011-09-10T07:12:57.903", "CommentCount": "1", "CreationDate": "2011-09-10T07:06:48.837", "OwnerUserId": "365102", "LastEditorUserId": "365102", "PostTypeId": "2", "Id": "7370195", "Score": "8", "Body": "<p>May wanna see <a href=\"http://www.perlmonks.org/?node_id=87384\" rel=\"noreferrer\">this</a>.</p>\n<p>As division by <code>0</code> is <code>undefined</code>, <code>mod</code>, which relies on division, is also <code>undefined</code>.</p>\n<hr>\n<p>This represents division; it's made up of the integral part and remainder:</p>\n<pre><code>(X / D) = floor(X / D) + (X % D) / D\n</code></pre>\n<p>Rearranged, you get:</p>\n<pre><code>(X % D) / D = (X / D) - floor(X / D)\n(X % D) = D * ((X / D) - floor(X / D))\n</code></pre>\n<p>Substituting <code>0</code> for <code>D</code>:</p>\n<pre><code>(X % D) = D * ((X / 0) - floor(X / 0))\n</code></pre>\n<p>Since division by <code>0</code> is <code>undefined</code>:</p>\n<pre><code>(X % D) = D * (undefined - floor(undefined))\n(X % D) = D * (undefined)\n(X % D) = undefined\n</code></pre>\n</hr>", "LastActivityDate": "2011-09-10T07:12:57.903"}, "bq_ids": {"n4140": {"so_7370154_7370211_0": {"section_id": 6106, "quality": 0.8, "length": 4}}, "n3337": {"so_7370154_7370211_0": {"section_id": 5872, "quality": 0.8, "length": 4}}, "n4659": {"so_7370154_7370211_0": {"section_id": 7603, "quality": 0.8, "length": 4}}}, "7370160": {"ParentId": "7370154", "CommentCount": "2", "Body": "<p>X % Y gives a result in the integer [ 0, Y ) range. X % 0 would have to give a result greater or equal to zero, and less than zero.</p>\n", "OwnerUserId": "927034", "PostTypeId": "2", "Id": "7370160", "Score": "1", "CreationDate": "2011-09-10T07:00:04.667", "LastActivityDate": "2011-09-10T07:00:04.667"}});