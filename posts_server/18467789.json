post_cb({"18467851": {"ParentId": "18467789", "CommentCount": "0", "CreationDate": "2013-08-27T14:11:12.380", "OwnerUserId": "1312406", "PostTypeId": "2", "Id": "18467851", "Score": "0", "Body": "<p>It's used inside a <code>catch</code> block to rethrow the current exception.</p>\n", "LastActivityDate": "2013-08-27T14:11:12.380"}, "18467789": {"CommentCount": "2", "AcceptedAnswerId": "18467866", "ClosedDate": "2013-08-27T14:15:53.097", "CreationDate": "2013-08-27T14:08:44.593", "LastActivityDate": "2013-08-27T14:20:41.620", "PostTypeId": "1", "ViewCount": "307", "Title": "What does it mean to \"throw\" an empty expression?", "Id": "18467789", "Score": "0", "Body": "<p>Sometimes in code I see throwing exceptions where the <code>throw</code> keyword is used without an expression next to it:</p>\n<pre><code>throw;\n</code></pre>\n<p>What does it mean and when should I use it?</p>\n", "Tags": "<c++><exception>", "OwnerUserId": "1594090", "AnswerCount": "5"}, "18467835": {"ParentId": "18467789", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-08-27T14:10:39.553", "Score": "1", "LastEditorUserId": "85371", "LastEditDate": "2013-08-27T14:20:41.620", "Id": "18467835", "OwnerUserId": "85371", "Body": "<p>It's a rethrow of the current exception. </p>\n<p>This doesn't alter the current exception, effectively just resuming the stack-unwinding after doing the actions in your catch{} block.</p>\n<p>Quoting the standard: <strong>\u00a7 15.1 ad 8</strong> <code>[except.throw]</code></p>\n<blockquote>\n<p id=\"so_18467789_18467835_0\">A throw-expression with no operand rethrows the currently handled exception (15.3). <strong><em>The exception is reactivated with the existing temporary; no new temporary exception object is created.</em></strong> The exception is <strong><em>no longer considered to be caught</em></strong>; therefore, the value of <strong><em><code>std::uncaught_exception()</code> will again be true</em></strong>.</p>\n<p id=\"so_18467789_18467835_1\">Example: code that must be executed because of an exception yet cannot completely handle the exception can be written like this:</p>\n<pre><code>try {\n// ...\n} catch (...) { // catch all exceptions\n// respond (partially) to exception\nthrow; // pass the exception to some\n// other handler\n}\n</code></pre>\n</blockquote>\n", "LastActivityDate": "2013-08-27T14:20:41.620"}, "18467837": {"ParentId": "18467789", "CommentCount": "8", "CreationDate": "2013-08-27T14:10:43.847", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "18467837", "Score": "3", "Body": "<p>It rethrows the exception of the currently active <code>catch</code> block.</p>\n<pre><code>try {\n  foo();\n} catch (...) {\n  fix_some_local_thing();\n  throw; // keep searching for an error handler\n}\n</code></pre>\n<p>If there is no currently active <code>catch</code> block, it will call <code>std::terminate</code>.</p>\n", "LastActivityDate": "2013-08-27T14:10:43.847"}, "18467854": {"ParentId": "18467789", "CommentCount": "2", "CreationDate": "2013-08-27T14:11:16.503", "OwnerUserId": "345027", "PostTypeId": "2", "Id": "18467854", "Score": "1", "Body": "<p>In a function declaration, it means that the function won't throw any exception.</p>\n<p>In a <code>catch</code> block, it re-throws the caught exception, e.g.</p>\n<pre><code>try {\n   throw \"exception\";\ncatch ( ... ) {\n   std::cout &lt;&lt; \"caught exception\";\n   throw; // Will rethrow the const char* exception\n}\n</code></pre>\n", "LastActivityDate": "2013-08-27T14:11:16.503"}, "18467866": {"ParentId": "18467789", "CommentCount": "0", "CreationDate": "2013-08-27T14:11:39.320", "OwnerUserId": "1009479", "PostTypeId": "2", "Id": "18467866", "Score": "5", "Body": "<p>An empty <code>throw</code> rethrows the exception. </p>\n<p>It can appear only in a <code>catch</code> or in a function called from a <code>catch</code>.</p>\n<p>If an empty <code>throw</code> is encountered when a handler is not active, <code>terminate</code> will be called.</p>\n", "LastActivityDate": "2013-08-27T14:11:39.320"}, "bq_ids": {"n4140": {"so_18467789_18467835_1": {"section_id": 3341, "quality": 0.9285714285714286, "length": 13}, "so_18467789_18467835_0": {"section_id": 3341, "quality": 0.8148148148148148, "length": 22}}, "n3337": {"so_18467789_18467835_1": {"section_id": 3211, "quality": 0.9285714285714286, "length": 13}, "so_18467789_18467835_0": {"section_id": 3211, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_18467789_18467835_1": {"section_id": 7673, "quality": 0.7857142857142857, "length": 11}, "so_18467789_18467835_0": {"section_id": 7673, "quality": 0.5925925925925926, "length": 16}}}});