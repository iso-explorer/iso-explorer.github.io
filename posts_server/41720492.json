post_cb({"41720600": {"ParentId": "41720492", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2017-01-18T13:22:30.477", "Score": "1", "LastEditorUserId": "2380830", "LastEditDate": "2017-01-18T13:51:34.600", "Id": "41720600", "OwnerUserId": "2380830", "Body": "<p>The evaluation of</p>\n<p><code>-1 * i</code></p>\n<p>is trivial multiplication of two <code>int</code> types: nothing strange there. And a <code>long long</code> must be capable of holding any <code>int</code>.</p>\n<hr>\n<p>First note is there is no such thing as a negative literal in C++, so</p>\n<p><code>-1 * u</code></p>\n<p>is evaluated as <code>(-1) * u</code> due to operator precedence. The type of <code>(-1)</code> must be <code>int</code>. But this will be converted to <code>unsigned int</code> due to C++'s rule of argument conversion as the other argument is an <code>unsigned int</code> In doing that it is converted modulo <code>UINT_MAX + 1</code>, so you end up with <code>UINT_MAX</code> multiplied by 1, which is the number you observe, albeit converted to a <code>long long</code> type.</p>\n<p>As a final note, the behaviour of this conversion is subject to the rules of conversion from an <code>unsigned</code> to a <code>signed</code> type: if <code>unsigned int</code> and <code>long long</code> were both 64 bits on your platform then the behaviour is implementation-defined.</p>\n</hr>", "LastActivityDate": "2017-01-18T13:51:34.600"}, "41720541": {"ParentId": "41720492", "CommentCount": "5", "Body": "<p>The key observation is that the expression <code>-1 * u</code> is of type <code>unsigned int</code>. That is because the rules for arithmetic conversions* say that if one operand is <code>unsigned int</code> and the other is <code>signed int</code>, then the latter operand is <em>converted</em> to <code>unsigned int</code>. The arithmetic expressions are ultimately only defined for homogeneous operands, so the conversions happen before the operation proper.</p>\n<p>The result of the conversion of <code>-1</code> to <code>unsigned int</code> is a large, positive number, which is representable as a <code>long long int</code>, and which is the number you see in the output.</p>\n<p><sub>Currently, that's [expr]/(11.5.3).</sub></p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "41720541", "Score": "5", "CreationDate": "2017-01-18T13:19:50.563", "LastActivityDate": "2017-01-18T13:19:50.563"}, "41720636": {"ParentId": "41720492", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2017-01-18T13:24:16.573", "Score": "1", "LastEditorUserId": "2079303", "LastEditDate": "2017-01-18T13:39:56.810", "Id": "41720636", "OwnerUserId": "2079303", "Body": "<p>The type of <code>-1</code> is <code>signed int</code>. When you perform an arithmetic operation between objects of different fundamental type, one or both of the arguments will be converted so that both have the same type. (For non-fundamental types, there may be operator overloads for mixed operands). In this case, the signed value is converted to unsigned, following the conversion rules <sup>\u2020</sup>.</p>\n<p>So, <code>-1</code> was converted to unsigned. But negative numbers cannot be represented by unsigned types. What happens, is that the resulting value will be the smallest positive value that can be represented by the unsigned type, that is congruent with the original signed value modulo the maximum value representable by unsigned type. Which on your platform happens to be 4294967295.</p>\n<hr>\n<p><sup>\u2020</sup>The rules ([expr], standard draft):</p>\n<blockquote>\n<p id=\"so_41720492_41720636_0\">... rules that apply to non-integers ...</p>\n<p id=\"so_41720492_41720636_1\">Otherwise, the integral promotions (4.5) shall be performed on both operands.61 Then the following\n  rules shall be applied to the promoted operands:</p>\n<p id=\"so_41720492_41720636_2\">\u2014 If both operands have the same type, no further conversion is needed.</p>\n<p id=\"so_41720492_41720636_3\">\u2014 Otherwise, if both operands have signed integer types or both have unsigned integer types, the\n  operand with the type of lesser integer conversion rank shall be converted to the type of the\n  operand with greater rank.</p>\n<p id=\"so_41720492_41720636_4\">\u2014 Otherwise, if the operand that has unsigned integer type has rank greater than or equal to the\n  rank of the type of the other operand, the operand with signed integer type shall be converted to\n  the type of the operand with unsigned integer type. <strong>(this applies to your case)</strong></p>\n<p id=\"so_41720492_41720636_5\">\u2014 Otherwise, if the type of the operand with signed integer type can represent all of the values of\n  the type of the operand with unsigned integer type, the operand with unsigned integer type shall\n  be converted to the type of the operand with signed integer type.</p>\n<p id=\"so_41720492_41720636_6\">\u2014 Otherwise, both operands shall be converted to the unsigned integer type corresponding to the\n  type of the operand with signed integer type.</p>\n</blockquote>\n</hr>", "LastActivityDate": "2017-01-18T13:39:56.810"}, "41720838": {"ParentId": "41720492", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-18T13:33:58.593", "Score": "0", "LastEditorUserId": "7236958", "LastEditDate": "2017-01-18T13:39:21.067", "Id": "41720838", "OwnerUserId": "7236958", "Body": "<p>The bit pattern \"0xFFFFFFFF\" corresponds with \"-1\" when interpreted as a 32b signed integer and corresponds with \"4294967295\" when interpreted as a 32b unsigned integer. </p>\n<ul>\n<li>If used -2 the result is \"4294967294\"</li>\n<li>If used -3 the result is \"4294967293\"</li>\n<li>If used -4 the result is \"4294967292\"</li>\n<li>....</li>\n</ul>\n", "LastActivityDate": "2017-01-18T13:39:21.067"}, "bq_ids": {"n4140": {"so_41720492_41720636_2": {"section_id": 5943, "quality": 1.0, "length": 8}, "so_41720492_41720636_5": {"section_id": 5943, "quality": 1.0, "length": 25}, "so_41720492_41720636_1": {"section_id": 5943, "quality": 0.9166666666666666, "length": 11}, "so_41720492_41720636_4": {"section_id": 5943, "quality": 0.8846153846153846, "length": 23}, "so_41720492_41720636_6": {"section_id": 5943, "quality": 1.0, "length": 13}, "so_41720492_41720636_3": {"section_id": 5943, "quality": 1.0, "length": 23}}, "n3337": {"so_41720492_41720636_2": {"section_id": 5714, "quality": 1.0, "length": 8}, "so_41720492_41720636_5": {"section_id": 5714, "quality": 1.0, "length": 25}, "so_41720492_41720636_1": {"section_id": 5714, "quality": 0.9166666666666666, "length": 11}, "so_41720492_41720636_4": {"section_id": 5714, "quality": 0.8846153846153846, "length": 23}, "so_41720492_41720636_6": {"section_id": 5714, "quality": 1.0, "length": 13}, "so_41720492_41720636_3": {"section_id": 5714, "quality": 1.0, "length": 23}}, "n4659": {"so_41720492_41720636_2": {"section_id": 7428, "quality": 1.0, "length": 8}, "so_41720492_41720636_5": {"section_id": 7428, "quality": 1.0, "length": 25}, "so_41720492_41720636_1": {"section_id": 7428, "quality": 0.9166666666666666, "length": 11}, "so_41720492_41720636_4": {"section_id": 7428, "quality": 0.8846153846153846, "length": 23}, "so_41720492_41720636_6": {"section_id": 7428, "quality": 1.0, "length": 13}, "so_41720492_41720636_3": {"section_id": 7428, "quality": 1.0, "length": 23}}}, "41720492": {"CommentCount": "1", "ViewCount": "96", "PostTypeId": "1", "LastEditorUserId": "3313064", "CreationDate": "2017-01-18T13:17:26.447", "LastActivityDate": "2017-01-18T17:04:47.977", "Title": "unsigned int / signed int / long long: inexplicable output", "AcceptedAnswerId": "41720541", "LastEditDate": "2017-01-18T17:04:47.977", "Id": "41720492", "Score": "1", "Body": "<p>So I was playing around with types and I came out with this weird result below. Debugging it made no sense, and then the only result was to check out the c++ spects, which didn't helped much. I was wondering if you might know what is happening here exactly, and if it is 32Bit and/or 64Bit specific issue.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    unsigned int u = 1;\n    signed int i = 1;\n\n    long long lu = -1 * u;\n    long long li = -1 * i;\n\n    std::cout&lt;&lt;\"this is a weird \" &lt;&lt; lu &lt;&lt; \" \" &lt;&lt; li &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>Where the output is</p>\n<pre><code>this is a weird 4294967295 -1\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "4899655", "AnswerCount": "4"}});