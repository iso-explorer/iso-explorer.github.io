post_cb({"26574549": {"ParentId": "26574435", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2014-10-26T15:17:53.727", "Score": "3", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:34:56.773", "Id": "26574549", "OwnerUserId": "1120273", "Body": "<p>There are a few simple reasons:</p>\n<ol>\n<li>It is harder than generally assumed to implement and specify it. The argument that it is implemented doesn't hold much water as the implementations generally do not deal with approaches to subvert the feature.</li>\n<li>Committee time is much more reasonably spent on working on modules which make most of the preprocessor unnecessary than trying to improve something we want to get rid of.</li>\n<li>There is a simple work-around around (include guards) for the absence of <code>#pragma once</code>, i.e., it isn't considered a problem.</li>\n<li>It seems, existing implementations actually do behave different which seems to be the root of one of the recent discussions. Of course, this means that standardization would be good but then it immediately starts conflicting with 2. and the discussions won't be simple because different parties would want their respective behavior to be retained.</li>\n<li>I didn't do a too thorough search but I didn't see a proposal, either: if nobody writes a proposal [and lobbies it through the process] nothing will be standardized. That said, I'd fully expect the reasons given above to stop a proposal to add <code>#pragma once</code> have a sufficient majority for it to be stopped quite quickly.</li>\n</ol>\n<p>There was a recent discussion on the proposals mailing list (see <a href=\"http://isocpp.org/\" rel=\"nofollow noreferrer\">isocpp.org</a> for how to sign up; I can't get to this site at the moment, though). I didn't follow it too thoroughly, though. Quickly browsing over it I saw the four reasons given above (the forth I added after browsing).</p>\n<p>Here are some references from the recent mailing list discussion:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/23696115/is-pragma-once-part-of-the-c11-standard\">Is #pragma once part of the standard?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1695807/why-isnt-c-cs-pragma-once-an-iso-standard\">Why isn't C/C++s #pragma once standard?</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4047.pdf\" rel=\"nofollow noreferrer\">modules proposal</a></li>\n</ol>\n", "LastActivityDate": "2014-10-26T15:46:20.810"}, "26574610": {"ParentId": "26574435", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-10-26T15:24:00.250", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:53.650", "Id": "26574610", "OwnerUserId": "2741329", "Body": "<p>From my understanding, <code>#pragma once</code> is an implementation specific instance of the standard <code>#pragma</code> directive as described in Section \u00a716.6 of the Standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow noreferrer\">draft</a>):</p>\n<blockquote>\n<p id=\"so_26574435_26574610_0\">16.6 Pragma directive                            [cpp.pragma] </p>\n<p id=\"so_26574435_26574610_1\">A preprocessing directive of the form</p>\n<p id=\"so_26574435_26574610_2\"># pragma pp-tokens opt new-line causes the implementation to behave in an implementation-\n  defined manner. The behavior might cause translation\n  to fail or cause the translator or the resulting program to behave in\n  a non-conforming manner. Any pragma that is not recognized by the\n  implementation is ignored.</p>\n</blockquote>\n<p>Having <code>pragma once</code> standardized would introduce quite a bit of complexity.\nGive also a look here: <a href=\"https://stackoverflow.com/a/1696194/2741329\">https://stackoverflow.com/a/1696194/2741329</a></p>\n", "LastActivityDate": "2014-10-26T15:24:00.250"}, "bq_ids": {"n4140": {"so_26574435_26574610_2": {"section_id": 548, "quality": 0.7037037037037037, "length": 19}}, "n3337": {"so_26574435_26574610_2": {"section_id": 539, "quality": 0.7037037037037037, "length": 19}}, "n4659": {"so_26574435_26574610_2": {"section_id": 569, "quality": 0.7037037037037037, "length": 19}}}, "26574435": {"CommentCount": "3", "ViewCount": "128", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-10-26T15:06:22.967", "LastActivityDate": "2014-10-26T15:46:20.810", "Title": "Since other abusable but useful features have been standardized, why not #pragma once?", "AcceptedAnswerId": "26574549", "LastEditDate": "2017-05-23T10:33:35.793", "Id": "26574435", "Score": "3", "Body": "<p>The nonstandard <code>#pragma once</code> feature is implemented on practically all C++ compilers, but the C++ standard excludes it.</p>\n<p><a href=\"https://stackoverflow.com/q/1695807/1275653\">The usual explanation</a> of why <code>#pragma once</code>, or some language construct that does what <code>#pragma once</code> does, has been excluded from the C++ standard is that hard links and copied header files either break <code>#pragma once</code> or provoke the compiler to heuristics.  Fair enough, heuristics are normally incompatible with the C++ philosophy anyway, but regarding plain breakage: there are many useful language features you can break, not only <code>#pragma once</code>.  The normal C++ way to manage such breakage is to let the compiler issue an optional warning in doubtful instances.  After all, C++ is purposely designed to let one program unsafely and/or unportably when one wishes to do so.  Besides, the unsafety and/or unportability of <code>#pragma once</code> is pretty minimal.  It just isn't that easy to abuse.</p>\n<p>Why is <code>#pragma once</code> excluded from the standard <em>when other abusable but useful language features are typically included?</em>  Is there something special about <code>#pragma once</code>?</p>\n<p>Also, where can one read the recent deliberations of the standards committee in the matter?  Has some committee member, or committee follower, published a recent summary of the debate?</p>\n", "Tags": "<c++><pragma><include-guards>", "OwnerUserId": "1275653", "AnswerCount": "2"}});