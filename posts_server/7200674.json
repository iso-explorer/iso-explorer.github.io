post_cb({"7200727": {"ParentId": "7200674", "LastEditDate": "2011-08-26T06:33:15.567", "CommentCount": "3", "CreationDate": "2011-08-26T06:19:57.997", "Score": "9", "LastEditorUserId": "452688", "PostTypeId": "2", "Id": "7200727", "OwnerUserId": "452688", "Body": "<p>No, NULL is still the same as before. Too many people used the NULL macro in surprising ways, redefining it to nullptr would have broken a lot of code.</p>\n<p>To elaborate: people have used NULL for example for many kinds of handle typedefs. If the real type behind such a typedef is not a pointer, defining NULL as nullptr would be a problem. Also, it seems some people have indeed used NULL to initialize numeric types.</p>\n<p>At least that is what Microsoft found when they added the nullptr to MSVC10, and why they decided to keep NULL as it always was. Other compilers might choose a different path, but I don't think they would.</p>\n", "LastActivityDate": "2011-08-26T06:33:15.567"}, "7200674": {"CommentCount": "1", "ViewCount": "10725", "PostTypeId": "1", "LastEditorUserId": "165520", "CreationDate": "2011-08-26T06:13:51.363", "LastActivityDate": "2011-08-26T06:33:15.567", "LastEditDate": "2011-08-26T06:18:34.210", "AcceptedAnswerId": "7200762", "FavoriteCount": "1", "Title": "Is NULL defined as nullptr in C++11?", "Id": "7200674", "Score": "18", "Body": "<p>Will C++11 implementations define <code>NULL</code>as <code>nullptr</code>?</p>\n<p>Would this be prescribed by the new C++ standard?</p>\n", "Tags": "<c++><null><c++11><nullptr>", "OwnerUserId": "321013", "AnswerCount": "3"}, "7200762": {"ParentId": "7200674", "CommentCount": "4", "CreationDate": "2011-08-26T06:25:12.447", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "7200762", "Score": "17", "Body": "<p>From the horse's mouth</p>\n<blockquote>\n<p id=\"so_7200674_7200762_0\"><strong>C.3.2.4 Macro NULL [diff.null]</strong></p>\n<p id=\"so_7200674_7200762_1\"><strong>1/</strong> The macro NULL, defined in any of <code>&lt;clocale&gt;</code>, <code>&lt;cstddef&gt;</code>, <code>&lt;cstdio&gt;</code>, <code>&lt;cstdlib&gt;</code>, <code>&lt;cstring&gt;</code>, <code>&lt;ctime&gt;</code>, or <code>&lt;cwchar&gt;</code>, is an implementation-defined C++ null pointer constant in this International Standard (18.2).</p>\n</blockquote>\n<p>It is up to each implementation to provide its own definition, gcc if I recall correctly defines it to <code>__nullptr</code> for which it has special checks (verifies that it is not used in arithmetic contexts for example).</p>\n<p>So it is possible to define it as <code>nullptr</code>, you will have to check your compiler/Standard Library documentation to see what has been done.</p>\n", "LastActivityDate": "2011-08-26T06:25:12.447"}, "bq_ids": {"n4140": {"so_7200674_7200762_1": {"section_id": 2515, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_7200674_7200762_1": {"section_id": 3249, "quality": 0.7777777777777778, "length": 14}}}, "7200754": {"ParentId": "7200674", "CommentCount": "7", "CreationDate": "2011-08-26T06:23:50.713", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "7200754", "Score": "1", "Body": "<p>FDIS of the upcoming standard C++11, integral expression is still a null pointer\nconstant. NULL macro is still implementation defined but must be a null\npointer constant. So in practice it means it is good as 0 or can be\nnullptr.</p>\n<p>Your code that used either 0 or NULL will work just as before.</p>\n<p>Read the details <strong><a href=\"http://en.wikipedia.org/wiki/C++0x#Null_pointer_constant\" rel=\"nofollow\">here</a></strong>.</p>\n", "LastActivityDate": "2011-08-26T06:23:50.713"}});