post_cb({"bq_ids": {"n4140": {"so_11377237_11378835_0": {"length": 6, "quality": 0.6, "section_id": 7019}}, "n3337": {"so_11377237_11378835_0": {"length": 6, "quality": 0.6, "section_id": 6765}}, "n4659": {"so_11377237_11378835_0": {"length": 6, "quality": 0.6, "section_id": 8516}}}, "11377237": {"ViewCount": "1457", "Body": "<p>Here is an interview question :</p>\n<p>How can we implement an <strong>abstract base class</strong> without using <strong>pure virtual functions</strong>.\n What we can do so that we cannot create any <strong>object</strong> of a class because in that case we can say our class is an <strong>abstract base class.</strong></p>\n<p>At first I thought of using an <strong>virtual destructor</strong> but I am not sure about this solution because of virtual keyword. Can you please help?</p>\n", "AcceptedAnswerId": "11378835", "Title": "Abstract base class implementation", "CreationDate": "2012-07-07T17:37:46.750", "Id": "11377237", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2012-07-14T02:12:58.713", "Score": "2", "OwnerUserId": "1178673", "Tags": "<c++><inheritance><abstract-class><virtual-functions>", "AnswerCount": "2"}, "11378835": {"Id": "11378835", "PostTypeId": "2", "Body": "<p>You ask two questions, which we will answer in turn:</p>\n<blockquote>\n<p id=\"so_11377237_11378835_0\">How can we implement an abstract base class without using pure virtual functions?</p>\n</blockquote>\n<p>It is impossible, per the definition of an abstract class:  \"A class is abstract if it has at least one pure virtual function\" (C++11 \u00a710.4/2).  Therefore, in order to be abstract, a class must declare a pure virtual function or it must inherit one from another class from which it derives.</p>\n<blockquote>\n<p id=\"so_11377237_11378835_1\">What we can do so that we cannot create any object of a class?</p>\n</blockquote>\n<p>This question can be interpreted in a number of different ways, each of which has a different solution.</p>\n<ol>\n<li><p>Taken literally, the question asks for a type of which no instance may be created.  A class with no defined constructors cannot be constructed.</p>\n<p>To accomplish this, one should declare (but not define) a default constructor and copy constructor for the class.  If one is using a compiler with support for C++11's deleted special member functions, they should be declared as deleted.</p></li>\n<li><p>Taken in the context of the first question, it seems more likely that the intent is to define a class that can only be instantiated as a base class subobject of another class.</p>\n<p>This can be accomplished by declaring all constructors as protected, not providing any static factory member function that creates instances of the class, and by not befriending any other classes or functions.</p></li>\n</ol>\n", "LastActivityDate": "2012-07-07T21:38:38.643", "CommentCount": "2", "CreationDate": "2012-07-07T21:38:38.643", "ParentId": "11377237", "Score": "5", "OwnerUserId": "151292"}, "11378702": {"Id": "11378702", "PostTypeId": "2", "Body": "<p>A virtual destrutor won't do the required job.You can do either of the following:</p>\n<ol>\n<li>Declare a <strong>pure virtual destructor</strong> with a definition.</li>\n<li>Make constructor of the base class protected.</li>\n</ol>\n<p>for more clear explanation refer to <a href=\"https://stackoverflow.com/questions/4640985/making-a-class-abstract-without-any-pure-virtual-methods\">Making a class abstract without any pure virtual methods</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-07-07T21:17:29.723", "Score": "0", "CreationDate": "2012-07-07T21:17:29.723", "ParentId": "11377237", "CommentCount": "0", "OwnerUserId": "619109", "LastEditDate": "2017-05-23T12:20:05.617"}});