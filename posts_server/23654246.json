post_cb({"23654435": {"Id": "23654435", "PostTypeId": "2", "Body": "<p>Consider the case of:</p>\n<p>Header1.h:</p>\n<pre><code>class A;\n\nvoid function1(A * a);\n</code></pre>\n<p>Header2.h:</p>\n<pre><code>class A;\n\nvoid function2(A * a);\n</code></pre>\n<p>main.cpp</p>\n<pre><code>#include \"Header1.h\"\n#include \"Header2.h\"\n\n#include \"A.h\" // header file defining A\n\nint main()\n{\n\n}\n</code></pre>\n<p>what this really looks like to the compiler is:</p>\n<pre><code>class A;\n\nvoid function1(A * a);\n\nclass A;\n\nvoid function2(A * a);\n\n\nclass A { /* definition from A.h */ };\n\n\nint main()\n{\n\n}\n</code></pre>\n", "LastActivityDate": "2014-05-14T12:13:21.697", "CommentCount": "0", "CreationDate": "2014-05-14T12:13:21.697", "ParentId": "23654246", "Score": "0", "OwnerUserId": "1346405"}, "bq_ids": {"n4140": {"so_23654246_23654434_0": {"length": 39, "quality": 0.7647058823529411, "section_id": 7034}, "so_23654246_23654434_2": {"length": 14, "quality": 1.0, "section_id": 7038}, "so_23654246_23654486_2": {"length": 17, "quality": 0.85, "section_id": 7047}}, "n3337": {"so_23654246_23654434_0": {"length": 39, "quality": 0.7647058823529411, "section_id": 6780}, "so_23654246_23654434_2": {"length": 14, "quality": 1.0, "section_id": 6784}, "so_23654246_23654486_2": {"length": 17, "quality": 0.85, "section_id": 6792}}, "n4659": {"so_23654246_23654434_0": {"length": 39, "quality": 0.7647058823529411, "section_id": 8531}, "so_23654246_23654434_2": {"length": 14, "quality": 1.0, "section_id": 8535}, "so_23654246_23654486_2": {"length": 17, "quality": 0.85, "section_id": 8544}}}, "23654246": {"ViewCount": "122", "Body": "<p>I thought that every declaration is definition because there was the following quote from standard:</p>\n<blockquote>\n<p id=\"so_23654246_23654246_0\">A declaration is a definition unless <strong><em>%restrictions%</em></strong>.</p>\n</blockquote>\n<p>But my assumption is not true. Actually, applying ODR we have that the following program</p>\n<pre><code>class A;\nclass A;\n\nint main(){ }\n</code></pre>\n<p>is ill-formed. But it is not true. I can't to find part of standard which permit to redeclare class type in the declarative region.</p>\n", "AcceptedAnswerId": "23654486", "Title": "Declaration and definition in c++", "CreationDate": "2014-05-14T12:04:33.500", "Id": "23654246", "CommentCount": "3", "LastEditDate": "2014-05-14T12:07:29.940", "PostTypeId": "1", "OwnerDisplayName": "user2889159", "LastEditorUserId": "485561", "LastActivityDate": "2014-05-15T20:43:15.273", "Score": "0", "Tags": "<c++><language-lawyer>", "AnswerCount": "4"}, "23654434": {"Id": "23654434", "PostTypeId": "2", "Body": "<p>The paragraph <strong>\u00a7</strong> 3.1.2 states that</p>\n<blockquote>\n<p id=\"so_23654246_23654434_0\"><strong>A declaration is a definition unless</strong> it declares a function without\n  specifying the function\u2019s body (8.4), it contains the extern specifier\n  (7.1.1) or a linkage-specification 25 (7.5) and neither an initializer\n  nor a function- body, it declares a static data member in a class\n  definition (9.2, 9.4), <strong>it is a class name declaration</strong> (9.1), it is an\n  opaque-enum-declaration (7.2), it is a template-parameter (14.1), it\n  is a parameter-declaration (8.3.5) in a function declarator that is\n  not the declarator of a function-definition, or it is a typedef\n  declaration (7.1.3), an alias-declaration (7.1.3), a using-declaration\n  (7.3.3), a static_assert-declaration (Clause 7), an attribute-\n  declaration (Clause 7), an empty-declaration (Clause 7), or a\n  using-directive (7.3.4).</p>\n</blockquote>\n<p>Here</p>\n<pre><code>class A;\nclass A;\n\nint main(){ }\n</code></pre>\n<p>it is a class name declaration.</p>\n<p>In a statement</p>\n<p><em>A declaration is a definition unless %restrictions%.</em></p>\n<p>the <em>%restrictions%.</em> part is important.</p>\n<hr>\n<blockquote>\n<p id=\"so_23654246_23654434_1\">I thought that every declaration is definition</p>\n</blockquote>\n<p>Let's prove that this is not true by a <a href=\"http://en.wikipedia.org/wiki/Proof_by_contradiction\" rel=\"nofollow\">contradiction</a>. So assume this is true. Then because we can have many redeclaration and every of this declarations is definition - we can have many redefinitions, right? But C++ Standard n3337 <strong>\u00a7</strong> 3.2/1 says</p>\n<blockquote>\n<p id=\"so_23654246_23654434_2\">No translation unit shall contain more than one definition of any\n  variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n<p>what contradicts our assumption and thus this is not true that every declaration is definition.</p>\n</hr>", "LastEditorUserId": "1141471", "LastActivityDate": "2014-05-15T20:43:15.273", "Score": "1", "CreationDate": "2014-05-14T12:13:21.230", "ParentId": "23654246", "CommentCount": "0", "LastEditDate": "2014-05-15T20:43:15.273", "OwnerUserId": "1141471"}, "23654486": {"Id": "23654486", "PostTypeId": "2", "Body": "<p>Your quote (from C++11 3.1/2) answers the general question: \"unless <strong><em>%restrictions%</em></strong>\" means that <strong>not</strong> every declaration is a definition. It's only a definition if none of those restrictions apply.</p>\n<p>If you read those restrictions, you'll find</p>\n<blockquote>\n<p id=\"so_23654246_23654486_0\">it is a class name declaration</p>\n</blockquote>\n<p>which answers your specific question. <code>class A;</code> is a class name declaration, but not a definition.</p>\n<blockquote>\n<p id=\"so_23654246_23654486_1\">I can't to find part of standard which permit to redeclare class type in the declarative region.</p>\n</blockquote>\n<p>In general, you can declare an entity multiple times in the same declarative region, per C++11 3.3.1/4</p>\n<blockquote>\n<p id=\"so_23654246_23654486_2\">Given a set of declarations in a single declarative region, each of which specifies the same unqualified name, they shall all refer to the same entity, or [other cases not relevant here]</p>\n</blockquote>\n", "LastActivityDate": "2014-05-14T12:15:35.160", "CommentCount": "3", "CreationDate": "2014-05-14T12:15:35.160", "ParentId": "23654246", "Score": "1", "OwnerUserId": "204847"}, "23654332": {"Id": "23654332", "PostTypeId": "2", "Body": "<p>Yes, \"a declaration is a definition unless <em>%restrictions%</em>\" is true. Have you read the <em>restrictions?</em> One of them is:</p>\n<blockquote>\n<p id=\"so_23654246_23654332_0\">it is a class name declaration</p>\n</blockquote>\n<p>So <code>class A;</code> is not a definition because it is covered by one of the <em>restrictions.</em></p>\n<p>Just to clarify, quoting C++11, <code>[basic.def]\u00a72</code></p>\n", "LastActivityDate": "2014-05-14T12:08:49.110", "CommentCount": "0", "CreationDate": "2014-05-14T12:08:49.110", "ParentId": "23654246", "Score": "3", "OwnerUserId": "1782465"}});