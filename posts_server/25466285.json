post_cb({"bq_ids": {"n4140": {"so_25466285_25466478_0": {"length": 113, "quality": 0.9112903225806451, "section_id": 5811}, "so_25466285_25466314_0": {"length": 11, "quality": 1.0, "section_id": 5811}}, "n3337": {"so_25466285_25466478_0": {"length": 113, "quality": 0.9112903225806451, "section_id": 5584}, "so_25466285_25466314_0": {"length": 11, "quality": 1.0, "section_id": 5584}}, "n4659": {"so_25466285_25466478_0": {"length": 82, "quality": 0.6612903225806451, "section_id": 7273}, "so_25466285_25466314_0": {"length": 11, "quality": 1.0, "section_id": 7272}}}, "25466478": {"Id": "25466478", "PostTypeId": "2", "Body": "<p>You are correct, and the interviewer shows a frighteningly common lack of understanding about the language and its rules.</p>\n<p>Those two lines are strictly equivalent, iff every <code>operator&lt;&lt;</code> called for the first line is always a free function (The standard says they are).</p>\n<p>As you rightly thought, the ordering between the function-calls, except where ones arguments are the return-value of another, are indeterminately sequenced (before or after, but unspecified which):</p>\n<blockquote>\n<h3>1.9 Program execution <code>[intro.execution]</code></h3>\n<p id=\"so_25466285_25466478_0\">[...]<br>\n  15 [...]<br>\n  When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function. <em>[ Note: Value computations and side effects associated with different argument expressions are unsequenced. \u2014end note ]</em> Every evaluation in the calling function (including other function calls) that is not otherwise specifically sequenced before or after the execution of the body of the called function is <strong>indeterminately sequenced</strong> with respect to the execution of the called function.9 Several contexts in C++ cause evaluation of a function call, even though no corresponding function call syntax appears in the translation unit. <em>[ Example: Evaluation of a new expression invokes one or more allocation and constructor functions; see 5.3.4. For another example,\n  invocation of a conversion function (12.3.2) can arise in contexts in which no function call syntax appears. \u2014end example ]</em> The sequencing constraints on the execution of the called function (as described above) are features of the function calls as evaluated, whatever the syntax of the expression that calls the function might be.</br></br></p>\n</blockquote>\n<p>Naming all the parts:</p>\n<pre><code>cout &lt;&lt; one() // a) execute one()           (\"one\\n\")\n              // b) output the return-value (\"1\")\n     &lt;&lt; '\\n'  // c) output newline          (\"\\n\")\n     &lt;&lt; two() // d) execute two()           (\"two\\n\")\n              // e) output the return-value (\"2\")\n     &lt;&lt; '\\n'; // f) output newline          (\"\\n\")\n</code></pre>\n<p>Ordering constraints:</p>\n<pre><code>a &lt; b &lt; c &lt; e &lt; f\nd &lt; e &lt; f\n</code></pre>\n<p>Or a different representation:</p>\n<pre><code>a &lt; b &lt; c &lt;\n          &lt; e &lt; f\nd         &lt;\n</code></pre>\n<p>Thus, all valid full orders:</p>\n<pre><code>abcdef \"one\\n1\\ntwo\\n2\\n\"\nabdcef \"one\\n1two\\n\\n2\\n\"\nadbcef \"one\\ntwo\\n1\\n2\\n\"\ndabcef \"two\\none\\n1\\n2\\n\"\n</code></pre>\n", "LastEditorUserId": "3204551", "LastActivityDate": "2014-08-23T22:55:30.930", "Score": "12", "CreationDate": "2014-08-23T21:19:05.250", "ParentId": "25466285", "CommentCount": "5", "OwnerUserId": "3204551", "LastEditDate": "2014-08-23T22:55:30.930"}, "25466314": {"Id": "25466314", "PostTypeId": "2", "Body": "<p><strong>You are correct, but the interview answer is wrong.</strong></p>\n<p>Per Paragraph \u00a71.9/15 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_25466285_25466314_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.</p>\n</blockquote>\n<p>As an example, this is what Clang 3.4 produces:</p>\n<pre><code>one\n1\ntwo\n2\n</code></pre>\n", "LastEditorUserId": "701092", "LastActivityDate": "2014-08-23T21:02:49.997", "Score": "6", "CreationDate": "2014-08-23T20:55:55.067", "ParentId": "25466285", "CommentCount": "6", "OwnerUserId": "701092", "LastEditDate": "2014-08-23T21:02:49.997"}, "25466285": {"ViewCount": "437", "Body": "<p>Suppose following piece of code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nchar one()\n{\n    cout &lt;&lt; \"one\\n\";\n    return '1';\n}\n\nchar two()\n{\n    cout &lt;&lt; \"two\\n\";\n    return '2';\n}\n\nint main(int,char**)\n{\n    // 1:\n    cout &lt;&lt; one()\n         &lt;&lt; '\\n'\n         &lt;&lt; two()\n         &lt;&lt; '\\n';\n\n    // 2:\n    operator&lt;&lt;(\n        operator&lt;&lt;(\n            operator&lt;&lt;(\n                operator&lt;&lt;(\n                    cout, \n                    one()),\n                '\\n'),\n            two()),\n        '\\n');\n}\n</code></pre>\n<p>execution of lines marked as <code>1</code> and <code>2</code>, being compiled with ideone does the same, it prints following:</p>\n<pre><code>two\none\n1\n2\n</code></pre>\n<p>From my point of view, what we observe here is unspecified behaviour, as order in which function arguments are resolved is unspecified.</p>\n<p>This was a question at an interview, printing above given sequence (without any alternatives) was supposed to be correct answer, but is it really correct?</p>\n", "AcceptedAnswerId": "25466478", "Title": "C++ cout side-effect sequencing", "CreationDate": "2014-08-23T20:52:36.027", "Id": "25466285", "CommentCount": "0", "LastEditDate": "2014-09-07T20:27:59.063", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2014-09-07T20:27:59.063", "Score": "10", "OwnerUserId": "1122720", "Tags": "<c++><sequence-points><unspecified-behavior>", "AnswerCount": "2"}});