post_cb({"15481796": {"Id": "15481796", "PostTypeId": "2", "Body": "<p>First of all, <br>\n5 in binary is 0000 0000 0000 0101\nbut what about -5 ? Here it is : <br/></br></p>\n<ol>\n<li>Change 1 to 0 and 0 to 1 ,then we get 1111 1111 1111 1010</li>\n<li>Then take that number + 1  , we get 1111 1111 1111 1011</li>\n</ol>\n<p>Now we get:  -5= 1111 1111 1111 1011  ( it's in 2's complement form) <br>\nSo here is how to calculate -5&gt;&gt;1   :</br></p>\n<ol>\n<li>Move each bit of -5 from left to right ( &gt;&gt; ) we get <strong>111</strong> 1111 1111 1101 (only 15 bits left)</li>\n<li>Because -5 is negative number, so we have to fill '1' to the first bit to make it become 16  bits \nThen we get 1111 1111 1111 1101 ( it's still in 2's complement form)</li>\n<li>Now convert it to a normal binary form by change 0 to 1 , 1 to 0 (except the first bit because it defines negative number in 2's complement), then plus '1' .\nso we get 1000 0000 0000 0011 = -3</li>\n</ol>\n", "LastEditorUserId": "35060", "LastActivityDate": "2014-12-08T12:35:21.130", "Score": "1", "CreationDate": "2013-03-18T16:22:35.040", "ParentId": "13858655", "CommentCount": "0", "OwnerUserId": "1908897", "LastEditDate": "2014-12-08T12:35:21.130"}, "13858691": {"Id": "13858691", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13858655_13858691_0\">It works on positive number but it does not work on negative numbers.</p>\n</blockquote>\n<p>Using shift operator on negative integer numbers is implementation defined.</p>\n<hr>\n<p>[expr.shift]/3 tells this :</p>\n<blockquote>\n<p id=\"so_13858655_13858691_1\">The value of E1 &gt;&gt; E2 is E1 right-shifted E2 bit positions. If E1 has an unsigned type or if E1 has a signed type and a non-negative value, the value of the result is the integral part of the quotient of E1/2E2 . If E1 has a signed type and a negative value, the resulting value is implementation-defined.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "476681", "LastActivityDate": "2012-12-13T11:22:35.350", "Score": "5", "CreationDate": "2012-12-13T11:17:06.297", "ParentId": "13858655", "CommentCount": "9", "OwnerUserId": "476681", "LastEditDate": "2012-12-13T11:22:35.350"}, "13859018": {"Id": "13859018", "PostTypeId": "2", "Body": "<p>As B\u0408\u043e\u0432\u0438\u045b &amp; mystical states, using bit shift operators on negative numbers is implementation defined.<br>\nThe reason for this is C doesn't distinguish between logical and arithmetic bit shifting.<br>\n(Arithmetic pads with the most significant bit, logical pads with 0's)<br>\nfor positive numbers this doesn't matter, for both arithmetic and logical bit shifts would keep the most significant bit as a 0:<br>\nArithmetic 5&gt;&gt;1<br>\n<code>0000 0000 0000 0101</code>  = 5<br>\nto<br>\n<code>0000 0000 0000 0010</code>  = 2</br></br></br></br></br></br></br></p>\n<p>Logical 5&gt;&gt;1<br>\n<code>0000 0000 0000 0101</code>  = 5<br>\nto<br>\n<code>0000 0000 0000 0010</code>  = 2</br></br></br></p>\n<p>however with a negative number (2's comp)<br>\nArithmetic -5&gt;&gt;1<br>\n<code>1111 1111 1111 1011</code>  = -5<br>\nto<br>\n<code>1111 1111 1111 1101</code>  = -3</br></br></br></br></p>\n<p>Logical -5&gt;&gt;1<br>\n<code>1111 1111 1111 1011</code>  = -5<br>\nto<br>\n<code>0111 1111 1111 1101</code>  = 32,765  </br></br></br></p>\n<p>or at least, this is how i understand it</p>\n", "LastEditorUserId": "1791851", "LastActivityDate": "2012-12-13T15:02:03.140", "Score": "6", "CreationDate": "2012-12-13T11:38:32.837", "ParentId": "13858655", "CommentCount": "3", "OwnerUserId": "1791851", "LastEditDate": "2012-12-13T15:02:03.140"}, "18056209": {"Id": "18056209", "PostTypeId": "2", "Body": "<p>I guess the answer to -5&gt;&gt;1 = -3.\nIn case of a positive number, say 5, division by 2 gives 2.5 rounding off to the nearest smallest integer i.e. 2</p>\n<p>But when we consider a negative number, -5, division by 2 gives -2.5. Its rounding off to the nearest integer gives -3. </p>\n", "LastActivityDate": "2013-08-05T10:41:31.147", "CommentCount": "0", "CreationDate": "2013-08-05T10:41:31.147", "ParentId": "13858655", "Score": "0", "OwnerUserId": "2536088"}, "13860115": {"Id": "13860115", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13858655_13860115_0\">I learn from my teacher that &gt;&gt;1 divides the number by 2. </p>\n</blockquote>\n<p>It doesn't divide the integer by two, but it performs (depending on the value)\n a <a href=\"http://en.wikipedia.org/wiki/Logical_shift\" rel=\"nofollow\">logical</a> or an <a href=\"http://en.wikipedia.org/wiki/Arithmetic_shift\" rel=\"nofollow\">arithmetic shift</a> by one bit to the right. It happens to be equal to a division by two under some circumstances.</p>\n<blockquote>\n<p id=\"so_13858655_13860115_1\">It works on positive number but it does not work on negative numbers. </p>\n</blockquote>\n<p><em>It works</em> in both cases, but the exact behavior is not mandated by the standard, but rather implementation-defined. It usually divides by two and truncates the result towards negative infinity, in constrast to towards zero as a normal division would do.</p>\n<p>For reference:</p>\n<ul>\n<li><a href=\"http://en.cppreference.com/w/cpp/language/operator_arithmetic\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/operator_arithmetic</a></li>\n</ul>\n", "LastEditorUserId": "1025391", "LastActivityDate": "2016-06-09T06:58:30.850", "Score": "1", "CreationDate": "2012-12-13T12:42:11.410", "ParentId": "13858655", "CommentCount": "0", "OwnerUserId": "1025391", "LastEditDate": "2016-06-09T06:58:30.850"}, "bq_ids": {"n4140": {"so_13858655_13858691_1": {"length": 21, "quality": 0.875, "section_id": 6148}}, "n3337": {"so_13858655_13858691_1": {"length": 21, "quality": 0.875, "section_id": 5911}}, "n4659": {"so_13858655_13858691_1": {"length": 21, "quality": 0.875, "section_id": 7644}}}, "13858655": {"ViewCount": "9260", "Body": "<pre><code>    -5 / 2 = -2\n\n    -5 &gt;&gt; 1 = -3\n</code></pre>\n<p>I learn from my teacher that &gt;&gt;1 divides the number by 2. It works on positive number but it does not work on negative numbers. Can someone explain to me??</p>\n<p>Thanks</p>\n", "AcceptedAnswerId": "13859018", "Title": "Bitwise Operator on positive and negative numbers", "CreationDate": "2012-12-13T11:14:15.357", "Id": "13858655", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-06-09T06:58:30.850", "Score": "8", "OwnerUserId": "1832057", "Tags": "<c++><bitwise-operators>", "AnswerCount": "7"}, "13858916": {"Id": "13858916", "PostTypeId": "2", "Body": "<p>I think answer is correct. As '/' (division) operator generate quotient (result of division).</p>\n<h2>In your problem :</h2>\n<pre><code>-5/2 = -3(quotient) and 1(remainder ). \n</code></pre>\n<p>So this is ok with both positive and negative number.</p>\n<h2>positive Number:</h2>\n<pre><code>5/2 = 2(quotient) and 1(remainder ). \n</code></pre>\n<p>So it is fine with positive Number.</p>\n<h2>NOTE</h2>\n<p>Remainder never be a negative number. It is always positive Number. </p>\n", "LastActivityDate": "2012-12-13T11:31:37.097", "CommentCount": "0", "CreationDate": "2012-12-13T11:31:37.097", "ParentId": "13858655", "Score": "0", "OwnerUserId": "1555772"}, "18926837": {"Id": "18926837", "PostTypeId": "2", "Body": "<p>In c the right shift operator preserves the sign bit.hence the right shifting the bits with preserving the sign bit again yields a negative number,which is in two complements form.</p>\n", "LastActivityDate": "2013-09-20T22:32:04.410", "CommentCount": "1", "CreationDate": "2013-09-20T22:32:04.410", "ParentId": "13858655", "Score": "0", "OwnerUserId": "2800926"}});