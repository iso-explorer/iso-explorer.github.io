post_cb({"bq_ids": {"n4140": {"so_35837120_35837188_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 3236}}, "n3337": {"so_35837120_35837188_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 3109}}, "n4659": {"so_35837120_35837188_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 3992}}}, "35837120": {"ViewCount": "73", "Body": "<pre><code>int color[1001][1001];\nint m,n;\nm=10;\nn=10;\nmemset(color,0,sizeof(color));\nmemset(color,0,sizeof(color[0][0])*m*n );\n</code></pre>\n<p>What's the difference between these two memset statements?</p>\n<p>Any answer will be highly appreciated. Thanks in advance.</p>\n", "AcceptedAnswerId": "35837188", "Title": "What's the difference between these two memset?", "CreationDate": "2016-03-07T05:59:44.490", "Id": "35837120", "CommentCount": "5", "LastEditDate": "2016-03-07T06:04:38.730", "PostTypeId": "1", "LastEditorUserId": "884995", "LastActivityDate": "2016-03-07T09:05:41.120", "Score": "-2", "OwnerUserId": "884995", "Tags": "<c++><c><memset>", "AnswerCount": "1"}, "35837188": {"Id": "35837188", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35837120_35837188_0\">What's the difference between these two memset statements?</p>\n</blockquote>\n<p>The <code>memset</code> function takes, the destination, value and count.  The count is <code>sizeof(color)</code> which would be <code>sizeof(int) * 1001 * 1001</code> for the first call.</p>\n<p>For the second it will be <code>sizeof(int) * 10 * 10</code>.</p>\n<p>The former clears the complete array with zeros, while the latter does it only partially, starting from <code>color[0][0]</code> to <code>color[0][99]</code>, which relies on the fact that arrays are laid out in a row-major fashion. Relevant excerpt from the C11 standard (draft n1570), <strong>\u00a76.5.2.1 Array subscripting</strong>:</p>\n<blockquote>\n<p id=\"so_35837120_35837188_1\">[\u2026] It follows from this that arrays are stored in row-major order (last subscript varies fastest).</p>\n</blockquote>\n<p>Alternatively, if <code>m = n = 1001</code> i.e. <code>m</code> and <code>n</code> actually denote the array's dimensions, the two calls then are the same, <a href=\"http://coliru.stacked-crooked.com/a/483912bbbc218bc9\" rel=\"nofollow\">just two different ways of writing it</a>.</p>\n", "LastEditorUserId": "183120", "LastActivityDate": "2016-03-07T09:05:41.120", "Score": "5", "CreationDate": "2016-03-07T06:04:37.480", "ParentId": "35837120", "CommentCount": "3", "OwnerUserId": "183120", "LastEditDate": "2016-03-07T09:05:41.120"}});