post_cb({"39603333": {"ParentId": "39603113", "CommentCount": "1", "Body": "<p>The text referenced in the comments, refers to the fact that the <code>c++</code> standard does not guide how to implement signed char, ie. it can be implemented as 1's complement giving you the value -127 -&gt; 127 (with +0 and -0). </p>\n<blockquote>\n<p id=\"so_39603113_39603333_0\">The 256 values represented by an 8-bit byte can be interpreted as the values 0 to 255 or as the values \u2212127 to 127 . No, not \u2212128 to 127 as one might expect: the c++ standard leaves open the possibility of ones-compliment hardware and eliminates one value, thus the use of -128 is non-portable.</p>\n</blockquote>\n<p>It doesn't say a char is -127 -&gt; 127, it says it <strong>might</strong> be. Yes, if you want portability with every standard conforming system, you need to consider the possibility of a 1's complement implementation of <code>char</code>. In reality, no-one ever has this ...</p>\n<p>You should be more worried about things like how some hardware implements a 16 bit char ... </p>\n", "OwnerUserId": "1294207", "PostTypeId": "2", "Id": "39603333", "Score": "5", "CreationDate": "2016-09-20T20:38:52.790", "LastActivityDate": "2016-09-20T20:38:52.790"}, "39603113": {"CommentCount": "7", "AcceptedAnswerId": "39603397", "ClosedDate": "2016-09-20T20:47:52.773", "CreationDate": "2016-09-20T20:21:12.643", "LastActivityDate": "2016-09-20T21:04:11.057", "PostTypeId": "1", "ViewCount": "162", "Title": "Why is the range of signed char is different in C and C++?", "Id": "39603113", "Score": "-1", "Body": "<p>Why the range of <code>signed char</code> is different in C and C++ ?\n  In C the range is <code>-128 t0 127</code> and in C++ it is `-127 to 127' but on the other hand the unsigned ranges are same. why ?</p>\n", "Tags": "<c><c++11>", "OwnerUserId": "6855320", "AnswerCount": "3"}, "39603232": {"ParentId": "39603113", "CommentCount": "5", "Body": "<p>I'm not an expert, but I can't find a reference to the c++ range being -127 to 127. Everything I see says it is also -128 to 127. Reference: <a href=\"https://msdn.microsoft.com/en-us/library/s3f49ktz(v=vs.80).aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/s3f49ktz(v=vs.80).aspx</a></p>\n", "OwnerUserId": "6061339", "PostTypeId": "2", "Id": "39603232", "Score": "-2", "CreationDate": "2016-09-20T20:31:47.137", "LastActivityDate": "2016-09-20T20:31:47.137"}, "bq_ids": {"n4140": {"so_39603113_39603397_0": {"section_id": 7239, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_39603113_39603397_0": {"section_id": 6983, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_39603113_39603397_0": {"section_id": 8719, "quality": 0.8333333333333334, "length": 5}}}, "39603397": {"ParentId": "39603113", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You are mistaken. The <strong>guaranteed</strong> minimum value for signed char is in fact -127 in both languages. Quote from C11 standard (draft <a href=\"http://port70.net/~nsz/c/c11/n1570.html#5.2.4.2.1p1\" rel=\"nofollow\">N1570</a>):</p>\n<blockquote>\n<ul>\n<li><p id=\"so_39603113_39603397_0\">minimum value for an object of type signed char</p>\n<pre><code>SCHAR_MIN                                -127\n</code></pre></li>\n</ul>\n</blockquote>\n<p>Do note that the actual absolute minimum value is implementation defined and may be greater:</p>\n<blockquote>\n<p id=\"so_39603113_39603397_1\">... Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown, with the same sign.</p>\n</blockquote>\n<p>And on processors that have 8 bit byte and two's complement representation (which is rather common), the minimum value will almost certainly be -128 in both C and C++. The reason why only -127 is guaranteed, is because it allows a non two's complement representation to be supported.</p>\n", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2016-09-20T21:04:11.057", "Id": "39603397", "Score": "10", "CreationDate": "2016-09-20T20:43:11.123", "LastActivityDate": "2016-09-20T21:04:11.057"}});