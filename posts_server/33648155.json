post_cb({"33648264": {"ParentId": "33648155", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-11-11T10:06:45.537", "Score": "7", "LastEditorUserId": "3309790", "LastEditDate": "2015-11-11T17:03:54.227", "Id": "33648264", "OwnerUserId": "3309790", "Body": "<blockquote>\n<p id=\"so_33648155_33648264_0\">if the function Works::foo() is never called, it simply does not get instantiated?</p>\n</blockquote>\n<p>Yes, a non-virtual member function of class template won't be instantiated until being used.</p>\n<p>From the standard, 14.7.1/11 Implicit instantiation [temp.inst] (bold by me)</p>\n<blockquote>\n<p id=\"so_33648155_33648264_1\">An implementation shall not implicitly instantiate a function\n  template, a variable template, a member template, <strong>a non-virtual member\n  function</strong>, a member class, or a static data member of a class template\n  that does not require instantiation.</p>\n</blockquote>\n", "LastActivityDate": "2015-11-11T17:03:54.227"}, "bq_ids": {"n4140": {"so_33648155_33648264_1": {"section_id": 243, "quality": 1.0, "length": 22}}, "n3337": {"so_33648155_33648264_1": {"section_id": 235, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_33648155_33648264_1": {"section_id": 250, "quality": 0.9090909090909091, "length": 20}}}, "33648258": {"ParentId": "33648155", "CommentCount": "0", "CreationDate": "2015-11-11T10:06:33.527", "OwnerUserId": "3087601", "PostTypeId": "2", "Id": "33648258", "Score": "0", "Body": "<p>Because seconds example is resolved at compile time (<code>Works::foo</code> is never called and since it's template, it's not even compiled), while the first example depends on boolean value (altough known at compile time), but in <code>if</code>, which is resolved in runtime.</p>\n", "LastActivityDate": "2015-11-11T10:06:33.527"}, "33648155": {"CommentCount": "6", "AcceptedAnswerId": "33648264", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-11-11T10:00:49.120", "LastActivityDate": "2015-11-11T17:03:54.227", "LastEditDate": "2017-05-23T10:27:15.820", "ViewCount": "80", "FavoriteCount": "0", "Title": "Does the member function of class template not get instantiated if never be called?", "Id": "33648155", "Score": "3", "Body": "<p>I just started to understand some template basics. Actually, until now I just accepted it as a fact, but I dont really understand the reason why this is broken:</p>\n<pre><code>template &lt;typename T,bool hasFoo&gt;\nstruct Broken {\n    void foobar(){\n        if (hasFoo){T::foo();}\n        else { std::cout &lt;&lt; \"BROKEN\" &lt;&lt; std::endl;}\n    }\n};\n\nint main(){\n    Broken&lt;int,false&gt; t;\n    t.foobar();\n}\n</code></pre>\n<p>while this works:</p>\n<pre><code>template &lt;typename T&gt;\nstruct Works {\n    void foo(){T::foo();}\n    void bar(){std::cout &lt;&lt; \"WORKS\" &lt;&lt; std::endl;}\n};\n\nint main(){\n    Works&lt;int&gt; t;\n    t.bar();\n}\n</code></pre>\n<p>Somehow it is obvious, but I just want to make sure that I am not missing something:\nDoes this work, because if the function <code>Works&lt;int&gt;::foo()</code> is never called, it simply does not get instantiated?</p>\n<p>PS: To avoid misunderstandings: I know, why <code>Broken</code> is broken and I recently had a <a href=\"https://stackoverflow.com/questions/33465830/how-to-fix-this-template\">question</a> related to this where I got good answers, however after that I thought that also <code>Works&lt;int&gt;</code> should not compile until I accidentally passed a \"wrong\" template parameter and was surprised that it did compile.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "4117728", "AnswerCount": "2"}});