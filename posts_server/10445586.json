post_cb({"bq_ids": {"n4140": {"so_10445586_10445657_1": {"length": 44, "quality": 0.9166666666666666, "section_id": 6259}}, "n3337": {"so_10445586_10445657_1": {"length": 44, "quality": 0.9166666666666666, "section_id": 6019}}, "n4659": {"so_10445586_10445657_1": {"length": 41, "quality": 0.8541666666666666, "section_id": 7763}}}, "10445586": {"ViewCount": "7695", "Body": "<p>Take a look at this tiny program.  </p>\n<pre><code>#include &lt;iostream&gt;\n\nint main(){\n\n  int var = atoi(\"-99\");      //convert string to int\n  var = abs(var);             //takes absolute value\n  std::cout &lt;&lt; var+1 &lt;&lt;'\\n';  //outputs 100\n\n  return EXIT_SUCCESS;\n}\n</code></pre>\n<hr>\n<p>Compiling creates the following errors messages:  </p>\n<pre><code>$ g++ -o main main.cpp\nmain.cpp: In function \u2018int main()\u2019:\nmain.cpp:5:13: error: \u2018atoi\u2019 was not declared in this scope\nmain.cpp:6:16: error: \u2018abs\u2019 was not declared in this scope\nmain.cpp:9:10: error: \u2018EXIT_SUCCESS\u2019 was not declared in this scope\n</code></pre>\n<p>Understandable. All of these exist in the \"cstdlib\" header which I neglected to include.<br>\nHowever, compiling with:  </br></p>\n<pre><code>$ g++ -std=c++0x -o main main.cpp \n</code></pre>\n<p>creates no issues.</p>\n<hr>\n<p>looking at the source of the \"cstdlib\" header, I see the following code at the bottom:</p>\n<pre><code>#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#  if defined(_GLIBCXX_INCLUDE_AS_TR1)\n#    error C++0x header cannot be included from TR1 header\n#  endif\n#  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n#    include &lt;tr1_impl/cstdlib&gt;\n#  else\n#    define _GLIBCXX_INCLUDE_AS_CXX0X\n#    define _GLIBCXX_BEGIN_NAMESPACE_TR1\n#    define _GLIBCXX_END_NAMESPACE_TR1\n#    define _GLIBCXX_TR1\n#    include &lt;tr1_impl/cstdlib&gt;\n#    undef _GLIBCXX_TR1\n#    undef _GLIBCXX_END_NAMESPACE_TR1\n#    undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n#    undef _GLIBCXX_INCLUDE_AS_CXX0X\n#  endif\n#endif\n</code></pre>\n<p>I'm not sure if that is relevant or not.. full header file code <a href=\"http://pastebin.com/2WrmiaUB\" rel=\"nofollow noreferrer\">here</a></p>\n<p>my ultimate question is, does the new standard guarantee that all of cstdlib will be brought in at a global namespace when you include iostream?  </p>\n<p>I can't find any documentation on the matter.  Appears that way to me, does it appear that way to you?  </p>\n<pre><code>gcc (Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1\n</code></pre>\n</hr></hr>", "AcceptedAnswerId": "10445657", "Title": "c++11 includes <cstdlib> at times when c++03 will not?", "CreationDate": "2012-05-04T08:46:33.083", "Id": "10445586", "CommentCount": "1", "LastEditDate": "2012-05-04T13:30:26.480", "PostTypeId": "1", "LastEditorUserId": "46642", "LastActivityDate": "2012-05-04T14:28:30.290", "Score": "7", "OwnerUserId": "908939", "Tags": "<c++><namespaces><c++11><g++>", "AnswerCount": "1"}, "10445657": {"Id": "10445657", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_10445586_10445657_0\">my ultimate question is, does the new standard guarantee that all of cstdlib will be brought in at a global namespace when you include iostream?</p>\n</blockquote>\n<p>No. You should <code>#include</code> it yourself if you need its functionality. If you get it \"for free\" with <code>&lt;iostream&gt;</code>, that's a sign that your <code>&lt;iostream&gt;</code> header requires it, but then you're relying on an implementation detail of your C++ library.</p>\n<p>Btw., <code>#include &lt;cstdlib&gt;</code> is not guaranteed to bring C functions into the global namespace (although it commonly does so in C++ implementations); it is guaranteed to put them in the namespace <code>std</code>:</p>\n<blockquote>\n<p id=\"so_10445586_10445657_1\">Except as noted in Clauses 18 through 30 and Annex D, the contents of each header <code>cname</code> shall be the same as that of the corresponding header <code>name.h</code>, as specified in the C standard library (1.2) or the C Unicode TR, as appropriate, as if by inclusion. In the C++ standard library, however, the declarations (except for names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace <code>std</code>. It is unspecified whether these names are first declared within the global namespace scope and are then injected into namespace <code>std</code> by explicit <code>using</code>-declarations (7.3.3).</p>\n</blockquote>\n<p>(Standard, section 17.6.1.2)</p>\n", "LastEditorUserId": "166749", "LastActivityDate": "2012-05-04T14:28:30.290", "Score": "15", "CreationDate": "2012-05-04T08:51:27.513", "ParentId": "10445586", "CommentCount": "9", "OwnerUserId": "166749", "LastEditDate": "2012-05-04T14:28:30.290"}});