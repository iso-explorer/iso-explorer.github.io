post_cb({"bq_ids": {"n4140": {"so_14664510_14664525_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5361}}, "n3337": {"so_14664510_14664525_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5157}}, "n4659": {"so_14664510_14664525_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6789}}}, "14664510": {"ViewCount": "884", "Body": "<p>I am trying to write a function to reverse a string, but I got such exception when I am doing:  *str++ = *end;   anyone who knows what's the reason? Thanks in advance. </p>\n<pre><code>void reverse(char* str)\n {\n    char *end = str;\n    char temp;\n    if(str)\n    {\n      while(*end)\n       {\n     end++;\n       }\n    end--;\n\n    while(str&lt;end)\n    {\n       temp = *str;\n       *str++ = *end;\n       *end--=temp;\n    }\n   }\n }\n</code></pre>\n", "Title": "Access violation writing location?", "CreationDate": "2013-02-02T17:31:18.950", "LastActivityDate": "2013-02-02T17:42:04.577", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "Id": "14664510", "Score": "2", "OwnerUserId": "1644288", "Tags": "<c++>", "AnswerCount": "2"}, "14664588": {"Id": "14664588", "PostTypeId": "2", "Body": "<p>So you need to do this:</p>\n<pre><code> char str[] = \"My string to reverse!\";\n\n reverse(str);\n</code></pre>\n<p>This means that <code>str</code> is stored in modifiable memory. Most modern compilers store literal strings (that is 'anything within quotes' in read-only memory, because you are not meant to modify the original string). </p>\n", "LastActivityDate": "2013-02-02T17:40:23.317", "CommentCount": "0", "CreationDate": "2013-02-02T17:40:23.317", "ParentId": "14664510", "Score": "0", "OwnerUserId": "1919155"}, "14664525": {"Id": "14664525", "PostTypeId": "2", "Body": "<p>Chances are, you called the function with a string literal:</p>\n<pre><code> reverse(\"ablewasiereisawelba\");\n</code></pre>\n<p>You can't modify string literals without invoking undefined behaviour, and crash is a valid response to an attempt to modify a string literal.  Make sure you pass a non-constant array instead:</p>\n<pre><code> char palindrome[] = \"ablewasiereisawelba\";\n reverse(palindrome);\n</code></pre>\n<p>The C++ 2011 standard, ISO/IEC 14882:2011 says:</p>\n<blockquote>\n<h3>2.14.5 String literal [lex.string]</h3>\n<p id=\"so_14664510_14664525_0\">\u00b612 The effect of attempting to modify a string literal is undefined.</p>\n</blockquote>\n<p>Commonly, string literals are placed in readonly memory, and an attempt to modify one leads to a 'crash'.  That is certainly a perfectly legitimate response to invoking undefined behaviour.</p>\n", "LastEditorUserId": "15168", "LastActivityDate": "2013-02-02T17:42:04.577", "Score": "5", "CreationDate": "2013-02-02T17:33:23.220", "ParentId": "14664510", "CommentCount": "3", "OwnerUserId": "15168", "LastEditDate": "2013-02-02T17:42:04.577"}});