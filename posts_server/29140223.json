post_cb({"bq_ids": {"n4140": {"so_29140223_29140340_1": {"length": 15, "quality": 1.0, "section_id": 3241}}, "n3337": {"so_29140223_29140340_1": {"length": 15, "quality": 1.0, "section_id": 3114}}, "n4659": {"so_29140223_29140340_1": {"length": 15, "quality": 1.0, "section_id": 3997}}}, "29140223": {"ViewCount": "372", "Body": "<p>there is a question about overloading functions. Look at this code:</p>\n<pre><code>#include&lt;iostream&gt;\n\nvoid fv(int){}\nvoid fc(const int){}\nvoid fvr(int&amp;){}\nvoid fcr(const int&amp;){}\n\nvoid fm(void(*fun)(const int))\n{\n    std::cout &lt;&lt; \"Constant called\" &lt;&lt; std::endl;\n}\n\n//void fm(void(*fun)(int))\n//{\n//  std::cout &lt;&lt; \"non Constant called\" &lt;&lt; std::endl;\n//}\n\nvoid fm(void(*fun)(const int&amp;))\n{\n    std::cout &lt;&lt; \"Constant ref called\" &lt;&lt; std::endl;\n}\n\nvoid fm(void(*fun)(int&amp;))\n{\n    std::cout &lt;&lt; \"non Constant ref called\" &lt;&lt; std::endl;\n}\n\nint main()\n{\n    fm(&amp;fc);\n    fm(&amp;fv);\n    fm(&amp;fvr);\n    fm(&amp;fcr);\n    return 0;\n}\n</code></pre>\n<p>if you uncomment <code>void fm(void(*fun)(int))</code> function you find that compiler can't statically overload function by pointer on function that accept parameter by value and pointer on function that accept const value. Also, if you uncomment <code>void(*fun)(const int)</code> and comment <code>void(*fun)(const int)</code> then all compiles sucessfully. But, if we using references it compiles OK. Don't get why, could you explain me please? Does this mean that pointers to function that accept parameter by value and by const value is same types?</p>\n<p>UPD:\n<a href=\"https://stackoverflow.com/questions/17208570/top-level-const-doesnt-influence-a-function-signature\">Top-level const doesn't influence a function signature</a>\nThere is a good explanation why top-level const should be removed.</p>\n", "AcceptedAnswerId": "29140340", "Title": "Function overloading by function pointer", "CreationDate": "2015-03-19T08:49:00.067", "Id": "29140223", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:06:35.037", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-19T09:39:41.373", "Score": "6", "OwnerUserId": "1584710", "Tags": "<c++><function-pointers><function-overloading>", "AnswerCount": "2"}, "29140430": {"Id": "29140430", "PostTypeId": "2", "Body": "<p>Yes you cannot overload functions based on the const ness of a non pointer / non-reference argument, see:\n<a href=\"https://stackoverflow.com/questions/3682049/functions-with-const-arguments-and-overloading\">Functions with const arguments and Overloading</a></p>\n<p>Which in turn implies that pointers to function that accept parameter by value and const value are same type.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-19T09:00:39.307", "Score": "2", "CreationDate": "2015-03-19T09:00:39.307", "ParentId": "29140223", "CommentCount": "0", "OwnerUserId": "4126652", "LastEditDate": "2017-05-23T12:06:35.037"}, "29140340": {"Id": "29140340", "PostTypeId": "2", "Body": "<p>Yes, top-level const will be just dropped. Error from gcc</p>\n<blockquote>\n<p id=\"so_29140223_29140340_0\">redefinition of \u2018void fm(void (*)(int))\u2019</p>\n</blockquote>\n<p>As you can see const is dropped.</p>\n<p>Quote from N3376 8.3.5/5</p>\n<blockquote>\n<p id=\"so_29140223_29140340_1\">After producing the list of parameter types, any top-level\n  cv-qualifiers modifying a parameter type are deleted when forming the\n  function type.</p>\n</blockquote>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-03-19T09:17:47.090", "Score": "3", "CreationDate": "2015-03-19T08:55:31.837", "ParentId": "29140223", "CommentCount": "4", "OwnerUserId": "1498580", "LastEditDate": "2015-03-19T09:17:47.090"}});