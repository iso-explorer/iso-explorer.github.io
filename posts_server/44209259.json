post_cb({"44209886": {"ParentId": "44209259", "LastEditDate": "2017-05-26T20:51:54.620", "CommentCount": "0", "CreationDate": "2017-05-26T20:44:31.807", "OwnerUserId": "6151155", "LastEditorUserId": "6151155", "PostTypeId": "2", "Id": "44209886", "Score": "0", "Body": "<p>As <a href=\"https://stackoverflow.com/users/7571258/zett42\">zett42</a> said, you can't concatenate strings using operator&lt;&lt; (unless you write your own overload), but your program still has undefined behaviour. Quote from c++14 standard:</p>\n<blockquote>\n<p id=\"so_44209259_44209886_0\">17.6.4.3.2 Global names [global.names]</p>\n<p id=\"so_44209259_44209886_1\">Certain sets of names and function signatures are always reserved to\n  the implementation:</p>\n<p id=\"so_44209259_44209886_2\">\u2014 Each name that contains a double underscore _ _ or begins with an\n  underscore followed by an uppercase letter (2.12) is reserved to the\n  implementation for any use.</p>\n<p id=\"so_44209259_44209886_3\"><strong>\u2014 Each name that begins with an underscore is reserved to the\n  implementation for use as a name in the global namespace.</strong></p>\n</blockquote>\n", "LastActivityDate": "2017-05-26T20:51:54.620"}, "44209306": {"ParentId": "44209259", "LastEditDate": "2017-05-26T20:15:12.250", "CommentCount": "0", "CreationDate": "2017-05-26T19:58:48.047", "OwnerUserId": "7571258", "LastEditorUserId": "7571258", "PostTypeId": "2", "Id": "44209306", "Score": "4", "Body": "<blockquote id=\"so_44209259_44209306_0\">\n<pre><code>logStream(\"Hello, \" &lt;&lt; \"world!\")\n</code></pre>\n</blockquote>\n<p>There is no overload of <code>operator&lt;&lt;</code> for the case that <strong>both arguments are string literals</strong> (aka <code>const char[n]</code>).</p>\n<p>There is an overload of <code>operator&lt;&lt;</code> for the case that <strong>one of the arguments is a stream</strong>. But the stream is only created inside your function <code>logStream()</code>. It is not available yet when you pass the argument to the function. </p>\n<p>To solve the issue of combining multiple values for logging, you can use <code>operator+</code> of <code>std::string</code>:</p>\n<pre><code>logStream(std::string(\"Hello, \") + \"world!\");\n</code></pre>\n<p>Similarly if one of the arguments is a number:</p>\n<pre><code>logStream(std::string(\"Hello, \") + \"world \" + std::to_string(42) + \"!\" );\n</code></pre>\n<p>This questions is not tagged C++14, but this is how you could add some syntactic sugar by using the new <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/operator%22%22s\" rel=\"nofollow noreferrer\">string literal operators</a>:</p>\n<pre><code>using namespace std::string_literals;\nlogStream(\"Hello, \"s + \"world!\");\n</code></pre>\n", "LastActivityDate": "2017-05-26T20:15:12.250"}, "44209259": {"CommentCount": "8", "ViewCount": "102", "PostTypeId": "1", "LastEditorUserId": "8072015", "CreationDate": "2017-05-26T19:54:42.700", "LastActivityDate": "2017-05-27T11:42:37.773", "Title": "error: invalid operands of types \u2018const char [8]\u2019 and \u2018const char [7]\u2019 to binary \u2018operator<<\u2019", "AcceptedAnswerId": "44209306", "LastEditDate": "2017-05-27T11:42:37.773", "Id": "44209259", "Score": "-2", "Body": "<p>I am getting the following error:</p>\n<p>error: invalid operands of types \u2018const char [8]\u2019 and \u2018const char [7]\u2019 to binary \u2018operator&lt;&lt;\u2019</p>\n<p>with the following code. Any idea why?</p>\n<h1>main.cpp</h1>\n<pre><code>#include &lt;sstream&gt;      // std::stringstream\n\n#define logStream(MSG) _logStream(MSG)\n\nvoid _logStream(std::string MSG)\n{ \n    std::stringstream _trace_stream_;\n    _trace_stream_ &lt;&lt; \"logStream: \" &lt;&lt; MSG &lt;&lt; std::endl;\n}  \n\nint main()\n{\n    logStream(\"Hello, \" &lt;&lt; \"world!\");    // compile error here\n\n    return 0;\n}\n</code></pre>\n<p>However there is no compilation error when inline logStream macro is used.</p>\n<pre><code>#include &lt;sstream&gt; // std::stringstream\n\n#define logStream(MSG) { \\ \n    std::stringstream trace_stream; \\ \n    trace_stream &lt;&lt; \"logStream: \" &lt;&lt; MSG &lt;&lt; std::endl; \\ \n} \n\nint main() \n{ \n    logStream(\"Hello, \" &lt;&lt; \"world!\"); \n    return 0; \n}\n</code></pre>\n<p>why?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "8072015", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_44209259_44209886_2": {"section_id": 6307, "quality": 0.9285714285714286, "length": 13}, "so_44209259_44209886_1": {"section_id": 6307, "quality": 1.0, "length": 8}, "so_44209259_44209886_3": {"section_id": 6307, "quality": 1.0, "length": 10}}, "n3337": {"so_44209259_44209886_2": {"section_id": 6064, "quality": 0.9285714285714286, "length": 13}, "so_44209259_44209886_1": {"section_id": 6064, "quality": 1.0, "length": 8}, "so_44209259_44209886_3": {"section_id": 6064, "quality": 1.0, "length": 10}}, "n4659": {"so_44209259_44209886_2": {"section_id": 6756, "quality": 0.8571428571428571, "length": 12}, "so_44209259_44209886_1": {"section_id": 7844, "quality": 0.625, "length": 5}, "so_44209259_44209886_3": {"section_id": 6756, "quality": 0.9, "length": 9}}}});