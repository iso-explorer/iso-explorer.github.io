post_cb({"bq_ids": {"n4140": {"so_26204671_26204671_0": {"length": 30, "quality": 0.967741935483871, "section_id": 3293}}, "n3337": {"so_26204671_26204671_0": {"length": 30, "quality": 0.967741935483871, "section_id": 3163}}}, "26204671": {"ViewCount": "90", "Body": "<p>The following code only compiles in clang AFAIK:</p>\n<pre><code>struct A { \n  char x[4]; \n  A():x(\"bug\") { } \n};\n\nint main()\n{\n    char x[4] (\"bug\");\n}\n</code></pre>\n<p>But according to this <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43453\" rel=\"nofollow\">gcc bug report</a> it is valid code and was fixed for a later version of GCC (someone should report it to Microsoft as well then.)</p>\n<p>The justification for fixing this bug is:</p>\n<p>\u00a7 8.5/13</p>\n<blockquote>\n<p id=\"so_26204671_26204671_0\">The form of initialization (using parentheses or =) is generally\n  insignificant, but does matter when the initializer or the entity\n  being initialized has a class type; see below. If the entity being\n  initialized does not have class type, the <em>expression-list</em> in a\n  parenthesized initializer shall be a single expression.</p>\n</blockquote>\n<p>Initialization of <code>char</code> arrays with string literals are covered in \u00a7 8.5.2, which only shows an example using an equals sign. Since this kind of initialization is different from other kinds, is this code valid by the standard?</p>\n", "Title": "Is this form of initialization for arrays valid?", "CreationDate": "2014-10-05T16:25:25.210", "LastActivityDate": "2014-10-05T16:41:18.793", "CommentCount": "4", "LastEditDate": "2014-10-05T16:41:18.793", "PostTypeId": "1", "LastEditorUserId": "4110876", "Id": "26204671", "Score": "3", "OwnerUserId": "4110876", "Tags": "<c++><language-lawyer>", "AnswerCount": "0"}});