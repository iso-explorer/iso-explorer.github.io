post_cb({"22061750": {"ViewCount": "3434", "Body": "<p>In a C++ reference page they provide some typedef examples and I'm trying to understand what they mean.</p>\n<pre><code>// simple typedef\ntypedef unsigned long mylong;\n\n\n// more complicated typedef\ntypedef int int_t, *intp_t, (&amp;fp)(int, mylong), arr_t[10];\n</code></pre>\n<p>So the simple typedef (the first declaration) I understand.</p>\n<p>But what are they declaring with the second one (repeated below)?</p>\n<pre><code>typedef int int_t, *intp_t, (&amp;fp)(int, ulong), arr_t[10];\n</code></pre>\n<p>Particularly what does <code>(&amp;fp)(int, mylong)</code> mean?</p>\n", "AcceptedAnswerId": "22061890", "Title": "What does this typedef statement mean?", "CreationDate": "2014-02-27T07:23:47.783", "Id": "22061750", "CommentCount": "4", "FavoriteCount": "11", "PostTypeId": "1", "LastEditDate": "2014-02-27T07:25:00.400", "LastEditorUserId": "119527", "LastActivityDate": "2016-03-15T10:21:16.587", "Score": "74", "OwnerUserId": "1181337", "Tags": "<c++><typedef>", "AnswerCount": "5"}, "22061977": {"Id": "22061977", "PostTypeId": "2", "Body": "<p>typedef is defining a new type for use in your code, like a shorthand.</p>\n<pre><code>typedef typename _MyBase::value_type value_type;\nvalue_type v;\n//use v\n</code></pre>\n<p>typename here is letting the compiler know that value_type is a type and not an object      inside of _MyBase.</p>\n<p>the :: is the scope of the type. It is kind of like \"is in\" so value_type \"is in\" _MyBase. or can also be thought of as contains.</p>\n<p>Possible duplicate : <a href=\"https://stackoverflow.com/questions/18385418/c-meaning-of-a-statement-combining-typedef-and-typename\">C++ - meaning of a statement combining typedef and typename</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-02-27T07:34:58.603", "Score": "-7", "CreationDate": "2014-02-27T07:34:58.603", "ParentId": "22061750", "CommentCount": "1", "LastEditDate": "2017-05-23T12:32:56.307", "OwnerUserId": "3237899"}, "bq_ids": {"n4140": {"so_22061750_22061811_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5407}, "so_22061750_22061811_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 5407}}, "n3337": {"so_22061750_22061811_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5202}, "so_22061750_22061811_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 5202}}, "n4659": {"so_22061750_22061811_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6829}, "so_22061750_22061811_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 6829}}}, "22061890": {"Id": "22061890", "PostTypeId": "2", "Body": "<p>It's declaring several typedefs at once, just as you can declare several variables at once. They are all types based on <code>int</code>, but some are modified into compound types.</p>\n<p>Let's break it into separate declarations:</p>\n<pre><code>typedef int int_t;              // simple int\ntypedef int *intp_t;            // pointer to int\ntypedef int (&amp;fp)(int, ulong);  // reference to function returning int\ntypedef int arr_t[10];          // array of 10 ints\n</code></pre>\n", "LastActivityDate": "2014-02-27T07:30:43.077", "CommentCount": "2", "CreationDate": "2014-02-27T07:30:43.077", "ParentId": "22061750", "Score": "96", "OwnerUserId": "204847"}, "22062021": {"Id": "22062021", "PostTypeId": "2", "Body": "<p>The <code>(&amp;fp)(int, mylong)</code> part represents a reference to a function. It is not recommended that programmers use functions in <code>typedef</code> for the very reason you're asking this question. It confuses other people looking at the code. </p>\n<p>I'm guessing they use the <code>typedef</code> in something like this:</p>\n<pre><code>typedef unsigned long mylong; //for completeness\ntypedef int (&amp;fp)(int, mylong);\nint example(int param1, mylong param2);\n\nint main() {\n     fp fp_function = example;\n     int x = fp_function(0, 1);\n     return 0;\n}\n\nint example(int param1, mylong param2) {\n     // does stuff here and returns reference\n     int x = param1;\n     return x;\n}\n</code></pre>\n<p>Edited in accordance with Brian's comment:</p>\n<p><code>int(&amp;name)(...)</code> is a <strong>function reference</strong> called <code>name</code> (the function returns an int)</p>\n<p><code>int &amp;name(...)</code> is a function called <code>name</code> <strong>returning a reference to an int</strong></p>\n<p>A reference to a function which returns an <code>int</code> reference would look something like this: <code>typedef int &amp;(&amp;fp)(int, mylong)</code> (this compiles in a program, but the behaviour is untested).</p>\n", "LastEditorUserId": "4850040", "LastActivityDate": "2016-03-15T10:21:16.587", "Score": "0", "CreationDate": "2014-02-27T07:37:22.067", "ParentId": "22061750", "CommentCount": "3", "LastEditDate": "2016-03-15T10:21:16.587", "OwnerUserId": "533242"}, "22061933": {"Id": "22061933", "PostTypeId": "2", "Body": "<p>If you have the <code>cdecl</code> command, you can use it to demystify these declarations.</p>\n<pre><code>cdecl&gt; explain int (&amp;fp)(int, char)\ndeclare fp as reference to function (int, char) returning int\ncdecl&gt; explain int (*fp)(int, char)\ndeclare fp as pointer to function (int, char) returning int\n</code></pre>\n<p>If you don't have <code>cdecl</code>, you should be able to install it in the usual way (e.g. on Debian-type systems, using <code>sudo apt-get install cdecl</code>).</p>\n", "LastEditorUserId": "4850040", "LastActivityDate": "2016-03-15T10:19:27.133", "Score": "31", "CreationDate": "2014-02-27T07:32:51.840", "ParentId": "22061750", "CommentCount": "3", "LastEditDate": "2016-03-15T10:19:27.133", "OwnerUserId": "165297"}, "22061811": {"Id": "22061811", "PostTypeId": "2", "Body": "<pre><code>typedef int int_t, *intp_t, (&amp;fp)(int, mylong), arr_t[10];\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>typedef int int_t;\ntypedef int *intp_t;\ntypedef int (&amp;fp)(int, mylong);\ntypedef int arr_t[10];\n</code></pre>\n<p>There is actually a similar example in the C++11 standard:</p>\n<blockquote>\n<h3>C++11 7.1.3 <em>The <code>typedef</code> specifier</em></h3>\n<p id=\"so_22061750_22061811_0\">A <code>typedef</code>-name does not introduce a new type the way a <code>class</code> declaration (9.1) or <code>enum</code> declaration does.Example: after</p>\n<pre><code>typedef int MILES , * KLICKSP ;\n</code></pre>\n<p id=\"so_22061750_22061811_1\">the constructions</p>\n<pre><code>MILES distance ;\nextern KLICKSP metricp ;\n</code></pre>\n<p id=\"so_22061750_22061811_2\">are all correct declarations; the type of distance is int that of <code>metricp</code> is \u201cpointer to <code>int</code>.\u201d \u2014end example</p>\n</blockquote>\n", "LastEditorUserId": "1009479", "LastActivityDate": "2014-02-27T07:35:56.187", "Score": "41", "CreationDate": "2014-02-27T07:26:44.093", "ParentId": "22061750", "CommentCount": "1", "LastEditDate": "2014-02-27T07:35:56.187", "OwnerUserId": "1009479"}});