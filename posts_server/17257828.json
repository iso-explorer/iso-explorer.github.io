post_cb({"17257828": {"ViewCount": "191", "Body": "<p>Is the behavior below well-defined?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main(int argc, char* argv[])\n{\n    int a[10] = {1, 2, 3, 4, 5};\n    for(const auto &amp;i: a)\n        cout &lt;&lt; i &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>1\n2\n3\n4\n5\n0\n0\n0\n0\n0\n</code></pre>\n", "AcceptedAnswerId": "17257838", "Title": "Is the rest element of array initialized when no more element in initialization list", "CreationDate": "2013-06-23T04:51:45.610", "Id": "17257828", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-06-23T05:10:15.383", "LastEditorUserId": "1501948", "LastActivityDate": "2013-06-23T05:28:14.683", "Score": "1", "OwnerUserId": "1501948", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17257828_17257838_4": {"length": 4, "quality": 0.5714285714285714, "section_id": 633}, "so_17257828_17257838_15": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_17257828_17257838_6": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_17257828_17257838_16": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_17257828_17257838_2": {"length": 4, "quality": 0.8, "section_id": 39}, "so_17257828_17257838_11": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_17257828_17257838_1": {"length": 10, "quality": 0.625, "section_id": 3291}, "so_17257828_17257838_13": {"length": 16, "quality": 0.9411764705882353, "section_id": 3285}, "so_17257828_17257838_8": {"length": 11, "quality": 0.6875, "section_id": 3287}, "so_17257828_17257838_9": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_17257828_17257838_14": {"length": 13, "quality": 0.8666666666666667, "section_id": 3285}, "so_17257828_17257838_7": {"length": 11, "quality": 0.6470588235294118, "section_id": 3286}}, "n3337": {"so_17257828_17257838_4": {"length": 4, "quality": 0.5714285714285714, "section_id": 593}, "so_17257828_17257838_15": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_17257828_17257838_6": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_17257828_17257838_12": {"length": 11, "quality": 0.9166666666666666, "section_id": 3155}, "so_17257828_17257838_2": {"length": 4, "quality": 0.8, "section_id": 36}, "so_17257828_17257838_11": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_17257828_17257838_1": {"length": 10, "quality": 0.625, "section_id": 6895}, "so_17257828_17257838_13": {"length": 16, "quality": 0.9411764705882353, "section_id": 3155}, "so_17257828_17257838_16": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_17257828_17257838_8": {"length": 15, "quality": 0.9375, "section_id": 3157}, "so_17257828_17257838_9": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_17257828_17257838_14": {"length": 13, "quality": 0.8666666666666667, "section_id": 3155}, "so_17257828_17257838_7": {"length": 15, "quality": 0.8823529411764706, "section_id": 3157}}, "n4659": {"so_17257828_17257838_4": {"length": 4, "quality": 0.5714285714285714, "section_id": 661}, "so_17257828_17257838_1": {"length": 10, "quality": 0.625, "section_id": 4053}, "so_17257828_17257838_7": {"length": 10, "quality": 0.5882352941176471, "section_id": 4049}, "so_17257828_17257838_15": {"length": 5, "quality": 1.0, "section_id": 4047}, "so_17257828_17257838_13": {"length": 15, "quality": 0.8823529411764706, "section_id": 4047}, "so_17257828_17257838_9": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_17257828_17257838_8": {"length": 10, "quality": 0.625, "section_id": 4049}, "so_17257828_17257838_16": {"length": 4, "quality": 1.0, "section_id": 4047}, "so_17257828_17257838_14": {"length": 13, "quality": 0.8666666666666667, "section_id": 4047}, "so_17257828_17257838_2": {"length": 4, "quality": 0.8, "section_id": 39}, "so_17257828_17257838_11": {"length": 4, "quality": 0.8, "section_id": 653}}}, "17257838": {"Id": "17257838", "PostTypeId": "2", "Body": "<p>Yes, excess elements are initialized to \"zero\" (integers to 0, floating-point numbers to 0.0, pointers to <code>NULL</code>).</p>\n<p><s>More precisely, the C standard requires that they are initialized as if they had <code>static</code> storage duration:</s></p>\n<p>C99 Standard, paragraph 6.7.8.21:</p>\n<blockquote>\n<p id=\"so_17257828_17257838_0\">If there are fewer initializers in a brace-enclosed list than there are elements or members\n  of an aggregate, or fewer characters in a string literal used to initialize an array of known\n  size than there are elements in the array, the remainder of the aggregate shall be\n  initialized implicitly the same as objects that have static storage duration.</p>\n</blockquote>\n<p>6.7.8.10:</p>\n<blockquote>\n<p id=\"so_17257828_17257838_1\">If an object that has automatic storage duration is not initialized explicitly, its value is\n  indeterminate. If an object that has static storage duration is not initialized explicitly,\n  then:</p>\n<p id=\"so_17257828_17257838_2\">\u2014 if it has pointer type, it is initialized to a null pointer;</p>\n<p id=\"so_17257828_17257838_3\">\u2014 if it has arithmetic type, it is initialized to (positive or unsigned) zero;</p>\n<p id=\"so_17257828_17257838_4\">\u2014 if it is an aggregate, every member is initialized (recursively) according to these rules;</p>\n<p id=\"so_17257828_17257838_5\">\u2014 if it is a union, the \ufb01rst named member is initialized (recursively) according to these\n  rules.\n  </p></blockquote>\n<p>Damn, it's C++. (Nobody except @yuan realized this, thanks!)</p>\n<p>So paragraph 8.5.1.7 in C++11:</p>\n<blockquote>\n<p id=\"so_17257828_17257838_6\">To value-initialize an object of type T means:</p>\n<p id=\"so_17257828_17257838_7\">\u2014 if T is a (possibly cv-quali\ufb01ed) class type (Clause 9) with a user-provided constructor (12.1), then the\n  default constructor for T is called (and the initialization is ill-formed if T has no accessible default\n  constructor);</p>\n<p id=\"so_17257828_17257838_8\">\u2014 if T is a (possibly cv-quali\ufb01ed) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is\n  called.</p>\n<p id=\"so_17257828_17257838_9\"><strong>\u2014 if T is an array type, then each element is value-initialized;</strong></p>\n<p id=\"so_17257828_17257838_10\"><strong>\u2014 otherwise, the object is zero-initialized.</strong></p>\n</blockquote>\n<p>8.5.1.5:</p>\n<blockquote>\n<p id=\"so_17257828_17257838_11\"><strong>To zero-initialize an object or reference of type T means:</strong></p>\n<p id=\"so_17257828_17257838_12\">\u2014 if T is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression,\n  converted to T;\n  103</p>\n<p id=\"so_17257828_17257838_13\">\u2014 if T is a (possibly cv-quali\ufb01ed) non-union class type, each non-static data member and each base-class\n  subobject is zero-initialized and padding is initialized to zero bits;</p>\n<p id=\"so_17257828_17257838_14\">\u2014 if T is a (possibly cv-quali\ufb01ed) union type, the object\u2019s \ufb01rst non-static named data member is zeroinitialized and padding is initialized to zero bits;</p>\n<p id=\"so_17257828_17257838_15\">\u2014 if T is an array type, each element is zero-initialized;</p>\n<p id=\"so_17257828_17257838_16\">\u2014 if T is a reference type, no initialization is performed.</p>\n</blockquote>\n", "LastEditorDisplayName": "user529758", "OwnerDisplayName": "user529758", "LastActivityDate": "2013-06-23T05:28:14.683", "Score": "5", "CreationDate": "2013-06-23T04:54:38.777", "ParentId": "17257828", "CommentCount": "4", "LastEditDate": "2013-06-23T05:28:14.683"}});