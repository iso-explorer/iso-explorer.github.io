post_cb({"bq_ids": {"n4659": {"so_41835859_41835859_0": {"section_id": 6918, "quality": 0.8135593220338984, "length": 48}}}, "41835859": {"CommentCount": "5", "ViewCount": "80", "CreationDate": "2017-01-24T18:01:45.443", "LastActivityDate": "2017-01-24T18:01:45.443", "Title": "New wording for [namespace.memdef]/1", "FavoriteCount": "1", "PostTypeId": "1", "Id": "41835859", "OwnerUserId": "4463557", "Body": "<p>I believe the new wording for <a href=\"http://eel.is/c++draft/namespace.memdef#1\">[namespace.memdef]/1</a> tries to explain the conflict between the two declarations <code>using M::g;</code> and <code>void g();</code> in namespace <code>X</code>, but I fail to understand the relationship between this new wording and the alluded conflict.</p>\n<blockquote>\n<p id=\"so_41835859_41835859_0\">A declaration in a namespace <code>N</code> (excluding declarations in nested\n  scopes) whose <em>declarator-id</em> is an <em>unqualified-id</em> ([dcl.meaning]),\n  whose <em>class-head-name</em> (Clause [class]) or <em>enum-head-name</em>\n  ([dcl.enum]) is an <em>identifier</em>, or whose <em>elaborated-type-specifier</em>\n  is of the form <em>class-key</em> <em>attribute-specifier-seq<sub>opt</sub></em>\n<em>identifier</em> ([dcl.type.elab]), or that is an <em>opaque-enum-declaration</em>, declares (or redeclares) its <em>unqualified-id</em> or <em>identifier</em> as a member of <code>N</code>. [\u2009Note: An explicit instantiation ([temp.explicit]) or explicit specialization\n  ([temp.expl.spec]) of a template does not introduce a name and thus\n  may be declared using an <em>unqualified-id</em> in a member of the enclosing\n  namespace set, if the primary template is declared in an inline\n  namespace. \u2009\u2014\u2009end note\u2009] [\u2009Example:</p>\n<pre><code>namespace X {\n  void f() { /* ... */ }        // OK: introduces X\u200b::\u200bf()\n\n  namespace M {\n    void g();                   // OK: introduces X\u200b::\u200bM\u200b::\u200bg()\n  }\n  using M::g;\n  void g();                     // error: conflicts with X\u200b::\u200bM\u200b::\u200bg()\n}\n</code></pre>\n<p id=\"so_41835859_41835859_1\">\u2009\u2014\u2009end example\u2009]</p>\n</blockquote>\n<p>Even when I look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1838\">DR 1838</a> which probably gave origin to the change in this paragraph, I have some problems understanding the following sentence (emphasis is mine):</p>\n<blockquote>\n<p id=\"so_41835859_41835859_2\">The Standard is not clear about what happens when an entity is\n  declared but not defined in an inner namespace and declared via a\n  <em>using-declaration</em> in an outer namespace, and a <strong>definition</strong> of an entity with that name as an <em>unqualified-id</em> appears in the outer\n  namespace. Is this a legitimate definition of the inner-namespace\n  entity, as it would be if the definition used a <em>qualified-id</em>, or is\n  the definition a member of the outer namespace and thus in conflict\n  with the <em>using-declaration</em>? There is implementation divergence on\n  the treatment of such definitions.</p>\n</blockquote>\n<p>The example that follows this sentence is exactly the same as the one in the paragraph <code>[namespace.memdef]/1</code>. I highlighted the word <strong>definition</strong> above, as there is no definition for the function <code>X::g()</code> in the alluded Example. What am I missing?</p>\n", "Tags": "<c++><namespaces><language-lawyer><using-declaration>", "Score": "5", "AnswerCount": "0"}});