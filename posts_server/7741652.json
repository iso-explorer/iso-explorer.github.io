post_cb({"bq_ids": {"n4140": {"so_7741652_7741652_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5973}}, "n3337": {"so_7741652_7741652_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5741}}, "n4659": {"so_7741652_7741652_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 7472}}}, "7743091": {"Id": "7743091", "PostTypeId": "2", "Body": "<p>Yes. In this respect lambda expressions are no different from other expressions (like, say, <code>0</code>). But note that deduction is not used with defaulted parameters. In other words, if you declare</p>\n<pre><code>template&lt;typename T&gt;\nvoid foo(T = 0);\n</code></pre>\n<p>then <code>foo(0);</code> will call <code>foo&lt;int&gt;</code> but <code>foo()</code> is ill-formed. You'd need to call <code>foo&lt;int&gt;()</code> explicitly. Since in your case you're using a lambda expression nobody can call <code>foo</code> since the type of the expression (at the site of the default parameter) is unique. However you can do:</p>\n<pre><code>// perhaps hide in a detail namespace or some such\nauto default_parameter = [](int x) { return x; };\n\ntemplate&lt;\n    typename Functor = decltype(default_parameter)\n&gt;\nvoid foo(Functor f = default_parameter);\n</code></pre>\n", "LastActivityDate": "2011-10-12T16:09:00.613", "CommentCount": "6", "CreationDate": "2011-10-12T16:09:00.613", "ParentId": "7741652", "Score": "24", "OwnerUserId": "726300"}, "7741652": {"ViewCount": "1608", "Body": "<p>Refering to the C++11 specification (5.1.2.13):</p>\n<blockquote>\n<p id=\"so_7741652_7741652_0\">A <em>lambda-expression</em> appearing in a default argument shall not implicitly or explicitly capture any entity.<br>\n  [ <em>Example:</em></br></p>\n<pre class=\"lang-cpp prettyprint-override\"><code>void f2() {\n    int i = 1;\n    void g1(int = ([i]{ return i; })()); // ill-formed\n    void g2(int = ([i]{ return 0; })()); // ill-formed\n    void g3(int = ([=]{ return i; })()); // ill-formed\n    void g4(int = ([=]{ return 0; })()); // OK\n    void g5(int = ([]{ return sizeof i; })()); // OK\n}\n</code></pre>\n<p id=\"so_7741652_7741652_1\"><em>\u2014end example</em> ]</p>\n</blockquote>\n<p>However, can we also use a lambda-expression itself as the default value for a function argument?</p>\n<p>e.g.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename functor&gt;\nvoid foo(functor const&amp; f = [](int x){ return x; })\n{\n}\n</code></pre>\n", "AcceptedAnswerId": "7743091", "Title": "Can we use a lambda-expression as the default value for a function argument?", "CreationDate": "2011-10-12T14:27:16.397", "Id": "7741652", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-08-19T16:19:30.183", "LastEditorUserId": "383779", "LastActivityDate": "2015-08-19T16:19:30.183", "Score": "13", "OwnerUserId": "547231", "Tags": "<c++><c++11><lambda>", "AnswerCount": "1"}});