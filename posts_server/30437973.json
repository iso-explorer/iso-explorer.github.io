post_cb({"bq_ids": {"n4140": {"so_30437973_30438534_0": {"length": 19, "quality": 0.95, "section_id": 5801}}, "n3337": {"so_30437973_30438534_0": {"length": 19, "quality": 0.95, "section_id": 5574}}, "n4659": {"so_30437973_30438534_0": {"length": 19, "quality": 0.95, "section_id": 7260}}}, "30437973": {"ViewCount": "75", "Body": "<p>I know how does the postincrement in C++ work. Also, the C++ standard says that the behaviour of things like <strong><em>y = x++ + x</em></strong> is undefined, as there is no guarantee for the order in which are the operands of + evaluated. However, I've heard that g++ (possibly clang too) compiles such code in a way that x is incremented really after the WHOLE expression is evaluated.</p>\n<p>So my questions are - how does that happen? And, more importantly, how can I imitate the same behaviour with my own class and an overloaded operator? I take into account that the behaviour of my class would probably be g++-specific, undefined by the C++ standard, and generaly not a wise thing to do, but I'm asking out of curiosity.</p>\n", "Title": "How does the C++ postincrement in g++ work", "CreationDate": "2015-05-25T12:04:38.207", "LastActivityDate": "2015-05-25T12:34:31.743", "CommentCount": "2", "PostTypeId": "1", "Id": "30437973", "Score": "-3", "OwnerUserId": "3837556", "Tags": "<c++><g++><clang><post-increment>", "AnswerCount": "1"}, "30438534": {"Id": "30438534", "PostTypeId": "2", "Body": "<p>It happens because the compiler is free to assume that you don't write undefined code. </p>\n<p>Since you're only allowed to increment a variable once in a statement, the post-increment can be performed afterwards while preserving the semantics.</p>\n<p>But since your code is undefined - and it's not because the order of evaluation is unspecified, it's because the operands aren't sequenced <em>at all</em> - your program could do anything.  </p>\n<p>It doesn't matter that a compiler generates the same code each time; an optimiser may, and sometimes will, assume that a code path that leads to the undefined code can't happen - undefined behaviour can time travel backwards.</p>\n<p>\u00a7 1.9, Program execution:</p>\n<blockquote>\n<p id=\"so_30437973_30438534_0\">However, if any such execution contains an undefined operation, this\n  International Standard places no requirement on the implementation\n  executing that program with that input (not even with regard to\n  operations preceding the first undefined operation).</p>\n</blockquote>\n", "LastActivityDate": "2015-05-25T12:34:31.743", "CommentCount": "0", "CreationDate": "2015-05-25T12:34:31.743", "ParentId": "30437973", "Score": "2", "OwnerUserId": "404970"}});