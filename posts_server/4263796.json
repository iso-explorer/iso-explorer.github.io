post_cb({"4263806": {"Id": "4263806", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4263796_4263806_0\">But in general, is there a difference between doing one versus the other?</p>\n</blockquote>\n<p>No! (unless <code>-&gt;</code> and <code>*</code> are explicitly overloaded to perform different functions) </p>\n<p><code>ptr-&gt;method()</code> and <code>(*ptr).method()</code> are equivalent.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-11-24T05:55:01.910", "Score": "4", "CreationDate": "2010-11-24T05:43:08.510", "ParentId": "4263796", "CommentCount": "2", "OwnerUserId": "165520", "LastEditDate": "2010-11-24T05:55:01.910"}, "4263851": {"Id": "4263851", "PostTypeId": "2", "Body": "<p>C++ Standard 5.2.5/3:</p>\n<blockquote>\n<p id=\"so_4263796_4263851_0\">If E1 has the type \u201cpointer to class\n  X,\u201d then the expression E1-&gt;E2 is\n  converted to the equivalent form\n  (*(E1)).E2;</p>\n</blockquote>\n<p>For non-pointer values operators could be overloaded.</p>\n", "LastEditorUserId": "72583", "LastActivityDate": "2014-12-17T15:42:01.340", "Score": "8", "CreationDate": "2010-11-24T05:52:18.463", "ParentId": "4263796", "CommentCount": "0", "OwnerUserId": "123111", "LastEditDate": "2014-12-17T15:42:01.340"}, "4263819": {"Id": "4263819", "PostTypeId": "2", "Body": "<p>Yes. <code>ptr-&gt;method()</code> is two characters shorter than <code>(*ptr).method()</code>.</p>\n<p>It is also prettier.</p>\n", "LastActivityDate": "2010-11-24T05:44:30.070", "CommentCount": "0", "CreationDate": "2010-11-24T05:44:30.070", "ParentId": "4263796", "Score": "9", "OwnerUserId": "257583"}, "4263796": {"ViewCount": "30844", "Body": "<p>Is there a general difference between doing </p>\n<pre><code>(*ptr).method()\n</code></pre>\n<p>vs</p>\n<pre><code>ptr-&gt;method()\n</code></pre>\n<p>I saw this question in a comment on another question and thought I would ask it here. Although I just remembered that pretty much every operator in C++ can be overloaded, so I guess the answer will depend. But in general, is there a difference between doing one versus the other?</p>\n", "AcceptedAnswerId": "4263882", "Title": "Pointer dereference operator ( (*) vs -> )", "CreationDate": "2010-11-24T05:41:00.727", "Id": "4263796", "CommentCount": "1", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2016-09-10T08:45:13.130", "LastEditorUserId": "3980929", "LastActivityDate": "2016-09-10T08:45:13.130", "Score": "32", "OwnerUserId": "375874", "Tags": "<c++><pointers><operator-overloading>", "AnswerCount": "8"}, "bq_ids": {"n4140": {"so_4263796_4263851_0": {"length": 9, "quality": 0.9, "section_id": 6005}}, "n3337": {"so_4263796_4263851_0": {"length": 9, "quality": 0.9, "section_id": 5773}}, "n4659": {"so_4263796_4263851_0": {"length": 9, "quality": 0.9, "section_id": 7504}}}, "24890748": {"Id": "24890748", "PostTypeId": "2", "Body": "<p>Sorry to dig this post, but even though the expressions in the OP are equivalent for raw pointer types, I think there is at least one important difference to be mentioned in C++, in addition to everything that has been said:</p>\n<p>From Wikipedia (<a href=\"http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#cite_note-arrowptr-6\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#cite_note-arrowptr-6</a>):</p>\n<blockquote>\n<p id=\"so_4263796_24890748_0\">The return type of operator-&gt;() must be a type for which the -&gt;\n  operation can be applied, such as a pointer type. If x is of type C\n  where C overloads operator-&gt;(), x-&gt;y gets expanded to\n  x.operator-&gt;()-&gt;y.</p>\n</blockquote>\n<p>This implies that <code>-&gt;</code> is expected to return a <em>dereferenceable</em> type, whereas <code>*</code> is expected to return a <em>dereferenced</em> type, and therefore this \"chaining\" applies to <code>-&gt;</code> only.</p>\n", "LastActivityDate": "2014-07-22T14:54:24.397", "CommentCount": "5", "CreationDate": "2014-07-22T14:54:24.397", "ParentId": "4263796", "Score": "2", "OwnerUserId": "472610"}, "4263850": {"Id": "4263850", "PostTypeId": "2", "Body": "<p>The <code>-&gt;</code> sequence serves as a visual indicator that it is pointing to something. Both operators do the exact same sequence of operations.</p>\n", "LastActivityDate": "2010-11-24T05:52:16.063", "CommentCount": "0", "CreationDate": "2010-11-24T05:52:16.063", "ParentId": "4263796", "Score": "1", "OwnerUserId": "377553"}, "4263882": {"Id": "4263882", "PostTypeId": "2", "Body": "<p>As \"jamesdlin\" already noted, the <code>*</code> and <code>-&gt;</code> operators can be overloaded for class types.</p>\n<p>And then the two expressions <code>(*ptr).method()</code> and <code>ptr-&gt;method()</code> can have different effect.</p>\n<p>However, for the <em>built-in</em> operators the two expressions are equivalent.</p>\n<p>The <code>-&gt;</code> operator is more convenient when you're following a chain of pointers, because <code>.</code> has higher precedence than <code>*</code>, thus requiring a lot of ungrokkable parentheses.</p>\n<p>Consider:</p>\n<pre><code>pBook-&gt;author-&gt;snailMail-&gt;zip\n</code></pre>\n<p>versus</p>\n<pre><code>(*(*(*pBook).author).snailMail).zip\n</code></pre>\n", "LastEditorUserId": "596068", "LastActivityDate": "2012-10-01T08:30:54.743", "Score": "55", "CreationDate": "2010-11-24T05:59:29.283", "ParentId": "4263796", "CommentCount": "0", "OwnerUserId": "464581", "LastEditDate": "2012-10-01T08:30:54.743"}, "4263835": {"Id": "4263835", "PostTypeId": "2", "Body": "<p>For raw pointer types, they are the equivalent.</p>\n<p>And yes, for general types, the answer is indeed \"it depends\", as classes might overload <code>operator*</code> and <code>operator-&gt;</code> to have different behaviors.</p>\n", "LastActivityDate": "2010-11-24T05:49:20.297", "CommentCount": "1", "CreationDate": "2010-11-24T05:49:20.297", "ParentId": "4263796", "Score": "12", "OwnerUserId": "179715"}, "4263800": {"Id": "4263800", "PostTypeId": "2", "Body": "<p>They are synonyms. The latter is a shorthand for the former.</p>\n", "LastActivityDate": "2010-11-24T05:42:06.650", "CommentCount": "0", "CreationDate": "2010-11-24T05:42:06.650", "ParentId": "4263796", "Score": "0", "OwnerUserId": "112950"}});