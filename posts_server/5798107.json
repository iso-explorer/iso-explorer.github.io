post_cb({"bq_ids": {"n4140": {"so_5798107_5798121_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3345}}, "n3337": {"so_5798107_5798121_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3215}}, "n4659": {"so_5798107_5798121_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 4142}}}, "5798107": {"ViewCount": "1182", "Body": "<p>This isn't a question on whether it's safe to throw an exception from a destructor.</p>\n<p><a href=\"http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.9\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.9</a> states:</p>\n<p>\"During stack unwinding, all the local objects in all those stack frames are destructed. If one of those destructors throws an exception (say it throws a Bar object), the C++ runtime system is in a no-win situation: should it ignore the Bar and end up in the } catch (Foo e) { where it was originally headed? Should it ignore the Foo and look for a } catch (Bar e) { handler? There is no good answer \u2014 either choice loses information.\"</p>\n<p>IE: if during stack unwinding another exception is thrown, then the runtime system is in a no-win situation because the catch handler to 'look for' is ambiguous.</p>\n<p>Is there an 'exception' to the above, when the exception that is thrown during stack unwinding itself is in a try/catch block? In this case there is no ambiguity:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Component\n{\npublic:\n    ~Component()\n    {\n        cout &lt;&lt; \"In component destructor\" &lt;&lt; endl;\n        try\n        {\n            throw 1;\n        }\n        catch (...)\n        {\n            cout &lt;&lt; \"Caught exception in component destructor\" &lt;&lt; endl;\n        }\n    }\n\n};\n\nclass Container\n{\npublic:\n    ~Container()\n    {\n        cout &lt;&lt; \"In container destructor\" &lt;&lt; endl;\n        Component component;\n    }\n}\n    ;\n\nint main()\n{\n    try\n    {\n        Container cont;\n        throw 'a';\n    }\n    catch (...)\n    {\n        cout &lt;&lt; \"Caught main exception ok\" &lt;&lt; endl;\n    }\nreturn 0;\n}\n</code></pre>\n<p>The following implies it, but I was wondering if anyone knew of the relevant C++ standard sections.</p>\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr155.htm\" rel=\"nofollow\">http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr155.htm</a> </p>\n<p>\"If during stack unwinding a destructor throws an exception and that exception is not handled, the terminate() function is called. The following example demonstrates this:\"                       </p>\n", "AcceptedAnswerId": "5798121", "Title": "C++ throwing an exception from a destructor", "CreationDate": "2011-04-27T00:46:27.067", "Id": "5798107", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-08-25T03:22:13.587", "LastEditorUserId": "110226", "LastActivityDate": "2011-08-25T03:22:13.587", "Score": "3", "OwnerUserId": "110226", "Tags": "<c++><exception-handling><stack-unwinding>", "AnswerCount": "1"}, "5798121": {"Id": "5798121", "PostTypeId": "2", "Body": "<p>Your Component destructor is safe. The rule you're quoting only applies if the exception is thrown out of the destructor (i.e., to the destructor's caller.)</p>\n<p><strong>EDIT</strong>: Here's one relevant quote from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"nofollow\">standard</a> (emphasis added)</p>\n<blockquote>\n<p id=\"so_5798107_5798121_0\">Note: If a destructor called during\n  stack unwinding <strong>exits</strong> with an\n  exception, std::terminate is called\n  (15.5.1).</p>\n</blockquote>\n", "LastEditorUserId": "71034", "LastActivityDate": "2011-04-27T01:01:03.937", "Score": "7", "CreationDate": "2011-04-27T00:48:28.577", "ParentId": "5798107", "CommentCount": "0", "OwnerUserId": "71034", "LastEditDate": "2011-04-27T01:01:03.937"}});