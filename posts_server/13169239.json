post_cb({"13169251": {"ParentId": "13169239", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-11-01T00:13:29.597", "Score": "7", "LastEditorUserId": "224286", "LastEditDate": "2012-11-01T00:28:02.607", "Id": "13169251", "OwnerUserId": "224286", "Body": "<p>The <code>&amp;&amp;</code> (logical and) operator <em>always</em> short circuits if it can. Your second example is safe.</p>\n<p>Note, this applies to primitive types only, not those that overload the boolean operators.</p>\n<p>Because no self-respecting <code>C++</code> answer would be complete without a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">standard quote</a>:</p>\n<blockquote>\n<p id=\"so_13169239_13169251_0\"><strong>5.14.1 (Logical AND)</strong>\n  The &amp;&amp; operator groups left-to-right. The operands are both contextually converted to type bool (Clause 4).\n  The result is true if both operands are true and false otherwise. Unlike &amp;, &amp;&amp; guarantees left-to-right\n  evaluation: the second operand is not evaluated if the \ufb01rst operand is false.</p>\n<p id=\"so_13169239_13169251_1\"><strong>5.14.2 (Logical OR)</strong>\n  The || operator groups left-to-right. The operands are both contextually converted to bool (Clause 4). It\n  returns true if either of its operands is true, and false otherwise. Unlike |, || guarantees left-to-right\n  evaluation; moreover, the second operand is not evaluated if the \ufb01rst operand evaluates to true.</p>\n</blockquote>\n", "LastActivityDate": "2012-11-01T00:28:02.607"}, "13169239": {"CommentCount": "0", "ViewCount": "105", "PostTypeId": "1", "LastEditorUserId": "1790009", "CreationDate": "2012-11-01T00:12:06.663", "LastActivityDate": "2012-11-01T00:44:00.657", "Title": "Is it safe to access an array value in the stop condition of the loop?", "AcceptedAnswerId": "13169251", "LastEditDate": "2012-11-01T00:44:00.657", "Id": "13169239", "Score": "4", "Body": "<p>To improve performance in my clique-partitioning program, which uses ordered arrays, I included in the stop condition of my <code>for</code> loop an access to an element of the array I'm looping into.</p>\n<pre><code>int myValue = 13;\n\nfor (int i=0; array[i] &lt; myValue; i++)\n{\n    //performing operations on the array\n}\n</code></pre>\n<p>This is clearly unsafe, since it could be that my array only contains values that are less than <code>myValue</code>, so I tried this</p>\n<pre><code>int myValue = 13;\n\nfor (int i=0; i &lt; array.size() &amp;&amp; array[i] &lt; myValue; i++)\n{\n    //performing operations on the array\n}\n</code></pre>\n<p>In this implementation, all seems to go well, but if I switch the conditions, I fall into the same problem of the first example.</p>\n<pre><code>int myValue = 13;\n\nfor (int i=0; array[i] &lt; myValue &amp;&amp; i &lt; array.size(); i++)\n{\n    //performing operations on the array\n}\n</code></pre>\n<p>So, I deduced that this is clearly due to the way the compiler sets the order of the two conditions, since in the last case, even if I ask to enter the loop only if <code>i</code> is not greater than the size of the array, I'm previously reading a value that could be out of the bounds of the array.</p>\n<p>My question is: is it always safe to do as I did in the second implementation, or could the compiler sometimes switch my control conditions leading to unsafe code?</p>\n<p>Thanks.</p>\n", "Tags": "<c++><arrays><loops><standards><condition>", "OwnerUserId": "1790009", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13169239_13169251_0": {"section_id": 6163, "quality": 0.7575757575757576, "length": 25}, "so_13169239_13169251_1": {"section_id": 6165, "quality": 0.8484848484848485, "length": 28}}, "n3337": {"so_13169239_13169251_0": {"section_id": 5924, "quality": 0.7878787878787878, "length": 26}, "so_13169239_13169251_1": {"section_id": 5926, "quality": 0.8484848484848485, "length": 28}}, "n4659": {"so_13169239_13169251_0": {"section_id": 7660, "quality": 0.7575757575757576, "length": 25}, "so_13169239_13169251_1": {"section_id": 7662, "quality": 0.8484848484848485, "length": 28}}}, "13169285": {"ParentId": "13169239", "CommentCount": "3", "CreationDate": "2012-11-01T00:17:50.987", "OwnerUserId": "1768232", "PostTypeId": "2", "Id": "13169285", "Score": "0", "Body": "<p>I wouldn't do either examples. Do this:</p>\n<pre><code>for (int i=0; i &lt; array.size(); i++) {\n    if (array[i] &gt;= myValue) {\n        break;\n    }\n\n    // do stuff\n}\n</code></pre>\n<p>This way you don't have any confusion or lack of safety. It has the same speed as the other examples but it's far more straightforward for debugging later.</p>\n", "LastActivityDate": "2012-11-01T00:17:50.987"}});