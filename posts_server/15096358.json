post_cb({"bq_ids": {"n4140": {"so_15096358_15096441_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 3996}, "so_15096358_15096441_0": {"length": 5, "quality": 1.0, "section_id": 3995}}, "n3337": {"so_15096358_15096441_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 3853}, "so_15096358_15096441_0": {"length": 5, "quality": 1.0, "section_id": 3852}}, "n4659": {"so_15096358_15096441_1": {"length": 9, "quality": 0.5294117647058824, "section_id": 4908}, "so_15096358_15096441_0": {"length": 5, "quality": 1.0, "section_id": 4907}}}, "15096358": {"ViewCount": "1925", "Body": "<p>What's is wrong with the following code:</p>\n<pre><code>#include &lt;ctime&gt;\n#include &lt;vector&gt;\n#include &lt;utility&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::vector&lt; std::pair&lt; char, unsigned &gt; &gt; vec;\n\n    for( unsigned i = 0; i &lt; 100; ++i )\n    {\n        char ch = 0;\n        unsigned number = 0;\n\n        do {\n            ch = i;\n            number = i;\n\n        } while( std::find( vec.begin(), vec.end(), std::make_pair&lt; char, unsigned &gt;( ch, number ) ) != vec.end() );\n\n        std::cout &lt;&lt; ch &lt;&lt; number &lt;&lt; '\\n';\n\n        vec.push_back( std::make_pair&lt; char, unsigned &gt;( ch, number ) );\n    }\n}\n</code></pre>\n<p>It does compile nicely with:</p>\n<pre><code>g++ test.cxx\n</code></pre>\n<p>but fails with:</p>\n<pre><code>$ g++ -std=c++11 test.cxx                                                                                                              /tmp\ntest.cxx: In function 'int main()':\ntest.cxx:21:98: error: no matching function for call to 'make_pair(char&amp;, unsigned int&amp;)'\ntest.cxx:21:98: note: candidate is:\nIn file included from /usr/include/c++/4.7/bits/stl_algobase.h:65:0,\n                 from /usr/include/c++/4.7/vector:61,\n                 from test.cxx:3:\n/usr/include/c++/4.7/bits/stl_pair.h:268:5: note: template&lt;class _T1, class _T2&gt; constexpr std::pair&lt;typename std::__decay_and_strip&lt;_Tp&gt;::__type, typename std::__decay_and_strip&lt;_T2&gt;::__type&gt; std::make_pair(_T1&amp;&amp;, _T2&amp;&amp;)\n/usr/include/c++/4.7/bits/stl_pair.h:268:5: note:   template argument deduction/substitution failed:\ntest.cxx:21:98: note:   cannot convert 'ch' (type 'char') to type 'char&amp;&amp;'\ntest.cxx:25:69: error: no matching function for call to 'make_pair(char&amp;, unsigned int&amp;)'\ntest.cxx:25:69: note: candidate is:\nIn file included from /usr/include/c++/4.7/bits/stl_algobase.h:65:0,\n                 from /usr/include/c++/4.7/vector:61,\n                 from test.cxx:3:\n/usr/include/c++/4.7/bits/stl_pair.h:268:5: note: template&lt;class _T1, class _T2&gt; constexpr std::pair&lt;typename std::__decay_and_strip&lt;_Tp&gt;::__type, typename std::__decay_and_strip&lt;_T2&gt;::__type&gt; std::make_pair(_T1&amp;&amp;, _T2&amp;&amp;)\n/usr/include/c++/4.7/bits/stl_pair.h:268:5: note:   template argument deduction/substitution failed:\ntest.cxx:25:69: note:   cannot convert 'ch' (type 'char') to type 'char&amp;&amp;'\n</code></pre>\n", "AcceptedAnswerId": "15096441", "Title": "std::make_pair : cannot convert 'ch' (type 'char') to type 'char&&'", "CreationDate": "2013-02-26T18:18:22.833", "Id": "15096358", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-02-26T18:44:48.380", "LastEditorUserId": "15416", "LastActivityDate": "2013-02-26T18:46:40.630", "ClosedDate": "2013-02-27T06:14:34.203", "Score": "6", "OwnerUserId": "136285", "Tags": "<c++><c++11><pair>", "AnswerCount": "1"}, "15096441": {"Id": "15096441", "PostTypeId": "2", "Body": "<p><strong>SOLUTION:</strong></p>\n<p>Instead of explicitly specifying the template arguments to <code>make_pair&lt;&gt;()</code> this way:</p>\n<pre><code>std::make_pair&lt; char, unsigned &gt;( ch, number )\n</code></pre>\n<p>Just let them be deduced:</p>\n<pre><code>std::make_pair( ch, number )\n</code></pre>\n<hr>\n<p><strong>EXPLANATION:</strong></p>\n<p>The rationale behind this guideline is found in the way <code>std::make_pair&lt;&gt;()</code> is defined, and in the way template argument deduction works for universal references. From Paragraph 20.3.3/8-9 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15096358_15096441_0\"><code>template &lt;class T1, class T2&gt;</code>\n<code>pair&lt;V1, V2&gt; make_pair(T1&amp;&amp; x, T2&amp;&amp; y);</code></p>\n<p id=\"so_15096358_15096441_1\"><em>Returns</em>: <code>pair&lt;V1, V2&gt;(std::forward&lt;T1&gt;(x), std::forward&lt;T2&gt;(y));</code>\n  where V1 and V2 are determined as follows: Let <code>Ui</code> be <code>decay&lt;Ti&gt;::type</code> for each <code>Ti</code>. Then each <code>Vi</code> is <code>X&amp;</code> if <code>Ui</code> equals <code>reference_wrapper&lt;X&gt;</code>, otherwise <code>Vi</code> is <code>Ui</code>. [ <em>Example</em>: In place of:</p>\n<p id=\"so_15096358_15096441_2\"><code>return pair&lt;int, double&gt;(5, 3.1415926); // explicit types</code></p>\n<p id=\"so_15096358_15096441_3\">a C++ program may contain:</p>\n<p id=\"so_15096358_15096441_4\"><code>return make_pair(5, 3.1415926); // types are deduced</code></p>\n<p id=\"so_15096358_15096441_5\">\u2014<em>end example</em> ]</p>\n</blockquote>\n<p>Here, <code>T1</code> and <code>T2</code> are <em>meant</em> to be deduced. By explicitly specifying the template arguments yourself, you're getting on the way of <code>make_pair&lt;&gt;()</code>'s type deduction machinery to produce the correct return type, forcing the instantiation of a function which accepts an rvalue reference to <code>char</code> and and rvalue reference to <code>unsigned</code>:</p>\n<pre><code>... make_pair(char&amp;&amp;, unsigned&amp;&amp;)\n</code></pre>\n<p>However, you are not providing rvalues in input, because <code>ch</code> and <code>number</code> are lvalues. This is what the compiler is complaining about.</p>\n<hr>\n<p><strong>ALTERNATIVE:</strong></p>\n<p>Also notice, that you can <em>implicitly construct</em> an <code>std::pair</code> object, which saves your from calling <code>make_pair&lt;&gt;()</code> at all:</p>\n<pre><code>vec.push_back( { ch, number } );\n</code></pre>\n</hr></hr>", "LastEditorUserId": "1932150", "LastActivityDate": "2013-02-26T18:46:40.630", "Score": "14", "CreationDate": "2013-02-26T18:21:41.743", "ParentId": "15096358", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-02-26T18:46:40.630"}});