post_cb({"bq_ids": {"n4140": {"so_22606392_22606673_1": {"length": 7, "quality": 1.0, "section_id": 5467}, "so_22606392_22606576_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5466}, "so_22606392_22606673_2": {"length": 7, "quality": 1.0, "section_id": 5467}}, "n3337": {"so_22606392_22606673_1": {"length": 7, "quality": 1.0, "section_id": 5253}, "so_22606392_22606576_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5252}, "so_22606392_22606673_2": {"length": 7, "quality": 1.0, "section_id": 5253}}, "n4659": {"so_22606392_22606673_1": {"length": 7, "quality": 1.0, "section_id": 6901}, "so_22606392_22606576_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6900}, "so_22606392_22606673_2": {"length": 7, "quality": 1.0, "section_id": 6901}}}, "22606392": {"ViewCount": "1010", "Body": "<p>Warning:</p>\n<pre><code>src/BoardRep.h:49:12: warning: \u2018BoardRep::BoardRep::Row::&lt;anonymous struct&gt;::a\u2019 \nis too small to hold all values of \u2018enum class BoardRep::Piece\u2019 \n[enabled by default]\nPiece a:2;\n        ^\n</code></pre>\n<p>Enum:</p>\n<pre><code>enum class Piece: unsigned char {\n    EMPTY,\n    WHITE,\n    BLACK\n};\n</code></pre>\n<p>Use:</p>\n<pre><code>union Row {\n    struct {\n        Piece a:2;\n        Piece b:2;\n        Piece c:2;\n        Piece d:2;\n        Piece e:2;\n        Piece f:2;\n        Piece g:2;\n        Piece h:2;\n    };\n    unsigned short raw;\n};\n</code></pre>\n<p>With an <code>enum</code> I'd agree with GCC, it may have to truncate but that's because <code>enum</code>s are not really separate from integers and pre-processor definitions. However an <code>enum class</code> is much stronger. If it is not strong enough to assume ALL <code>Piece</code> values taken as integers will be between 0 and 2 inclusive then the warning makes sense. Otherwise GCC is being needlessly picky and it might be worth mailing the list to say \"look, this is a silly warning\"</p>\n<h2>Incase anyone cannot see the point</h2>\n<p>You can store 4 distinct values in 2 bits of data, I only need 3 distinct values, so any enum of length 4 or less should fit nicely in the 2 bits given (and my enum does \"derive\" (better term?) from an unsigned type). If I had 5 or more THEN I'd expect a warning.</p>\n", "Title": "Is this warning related to enum class size wrong?", "CreationDate": "2014-03-24T10:13:10.037", "LastActivityDate": "2014-03-24T10:39:37.027", "CommentCount": "6", "LastEditDate": "2014-03-24T10:33:57.353", "PostTypeId": "1", "LastEditorUserId": "1968", "Id": "22606392", "Score": "5", "OwnerUserId": "2112028", "Tags": "<c++><gcc><c++11><enums>", "AnswerCount": "2"}, "22606576": {"Id": "22606576", "PostTypeId": "2", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_22606392_22606576_0\">8 For an enumeration whose underlying type is fixed, the values of the\n  enumeration are the values of the underlying type.</p>\n</blockquote>\n<p>So the values of your enumeration are in the range </p>\n<pre><code>std::numeric_limits&lt;unsigned char&gt;::min() - std::numeric_limits&lt;unsigned char&gt;::max()\n</code></pre>\n<p>Bit field a defined as </p>\n<pre><code>Piece a:2;\n</code></pre>\n<p>can not hold all values of the enumeration.</p>\n<p>If you would define an unscoped enumeration without a fixed underlying type then the range of its values would be </p>\n<pre><code>0 - 2\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-03-24T10:32:54.590", "Score": "1", "CreationDate": "2014-03-24T10:21:26.240", "ParentId": "22606392", "CommentCount": "10", "OwnerUserId": "2877241", "LastEditDate": "2014-03-24T10:32:54.590"}, "22606673": {"Id": "22606673", "PostTypeId": "2", "Body": "<p>The warning issued by <code>gcc</code> is accurate, there's no need to compose a mail to the mailing list asking them to make the warning less likely to appear.</p>\n<p>The standard says that an enumeration with the underlying type of <code>unsigned char</code> cannot be represented by a bitfield of length <code>2</code>; even if there are no enumerations that holds such value. </p>\n<hr>\n<p><strong>THE STANDARD</strong></p>\n<p>The underlying value of an enumeration is valid even if there are no enum-keys corresponding to this value, the standard only says that a legal value to be stored inside an enumeration must fit inside the <em>underlying type</em>; it doesn't state that such value must be present among the <em>enum-keys</em>.</p>\n<blockquote>\n<p id=\"so_22606392_22606673_0\">7.2 <strong>Enumeration declarations</strong> <code>[dcl.enum]</code></p>\n<blockquote>\n<p id=\"so_22606392_22606673_2\"><sup>7</sup> <sub>...</sub> It is possible to define an enumeration that has values not defined by any of its enumerators. <sub>...</sub></p>\n</blockquote>\n</blockquote>\n<p><br/></p>\n<p><sup><strong>Note:</strong> the quoted section is present in both C++11, and the draft of C++14.</sup></p>\n<p><sup><strong>Note:</strong> wording stating the same thing, but using different terminology, can be found in C++03 under <code>[dcl.enum]p6</code></sup></p>\n<p><sup><strong>Note:</strong> the entire <code>[decl.enum]p7</code> hasn't been included to preserve space in this post.</sup></p>\n<hr>\n<p><strong>DETAILS</strong></p>\n<pre><code>enum class E : unsigned char { A, B, C };\n\nE x = static_cast&lt;E&gt; (10);\n</code></pre>\n<p>Above we initialize <code>x</code> to store the value <code>10</code>, even if there's no <em>enumeration-key</em> present in the enum-declaration of <code>enum class E</code> this is still a valid construct.</p>\n<p>With the above in mind we easily deduce that <code>10</code> cannot be stored in a bit-field of length <code>2</code>, so the warning by <code>gcc</code> is nothing but accurate.. we are potentially trying to store values in our bit-field that it cannot represent.</p>\n<hr>\n<p><strong>EXAMPLE</strong></p>\n<pre><code>enum class E : unsigned char { A, B, C };\n\nstruct A {\n  E value : 2;\n};\n</code></pre>\n<p><sup></sup></p>\n<pre><code>A val;\n\nval.value = static_cast&lt;E&gt; (10); // OMG, OPS!?\n</code></pre>\n</hr></hr></hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-03-24T10:39:37.027", "Score": "9", "CreationDate": "2014-03-24T10:26:12.327", "ParentId": "22606392", "CommentCount": "5", "OwnerUserId": "1090079", "LastEditDate": "2014-03-24T10:39:37.027"}});