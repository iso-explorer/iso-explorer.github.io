post_cb({"bq_ids": {"n4140": {"so_27050187_27050336_2": {"length": 45, "quality": 0.8490566037735849, "section_id": 3274}, "so_27050187_27050336_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 400}, "so_27050187_27050336_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 402}}, "n3337": {"so_27050187_27050336_2": {"length": 47, "quality": 0.8867924528301887, "section_id": 3145}, "so_27050187_27050336_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 393}, "so_27050187_27050336_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 391}}, "n4659": {"so_27050187_27050336_2": {"length": 45, "quality": 0.8490566037735849, "section_id": 4032}, "so_27050187_27050336_1": {"length": 18, "quality": 0.782608695652174, "section_id": 384}, "so_27050187_27050336_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 417}}}, "27050253": {"Id": "27050253", "PostTypeId": "2", "Body": "<p>You have to explicitly say <code>virtual ~destructorName()</code>. Just because you have a derived class does not make the bass class's destructor virtual by default.</p>\n", "LastActivityDate": "2014-11-20T21:51:38.700", "CommentCount": "1", "CreationDate": "2014-11-20T21:51:38.700", "ParentId": "27050187", "Score": "0", "OwnerUserId": "3987536"}, "27050336": {"Id": "27050336", "PostTypeId": "2", "Body": "<p>If the compiler generates a destructor for you:</p>\n<blockquote>\n<p id=\"so_27050187_27050336_0\">\u00a712.4/4 If a class has no user-declared destructor, a destructor is\n  implicitly declared as defaulted (8.4). An implicitly-declared\n  destructor is an inline public member of its class.</p>\n</blockquote>\n<p>Note that you can do:</p>\n<pre><code>virtual ~Struct() = default;\n</code></pre>\n<blockquote>\n<p id=\"so_27050187_27050336_1\">6 Otherwise, the destructor is non-trivial. A destructor that is\n  defaulted and not defined as deleted is implicitly defined when it is\n  odr-used (3.2) to destroy an object of its class type (3.7) or when it\n  is explicitly defaulted after its first declaration.</p>\n</blockquote>\n<p>Or:</p>\n<pre><code>virtual ~Struct() { }\n</code></pre>\n<p>Admittedly, the distinction between \"user-declared\" and \"user-provided\" is pretty confusing, so here's the relevant section:</p>\n<blockquote>\n<p id=\"so_27050187_27050336_2\">\u00a78.4.3/4 Explicitly-defaulted functions and implicitly-declared\n  functions are collectively called <em>defaulted</em> functions, and the\n  implementation shall provide implicit definitions for them (12.1 12.4,\n  12.8), which might mean defining them as deleted. A special member function is <em>user-provided</em> if it is user-declared and not explicitly\n  defaulted or deleted on its first declaration. A user-provided\n  explicitly-defaulted function (i.e., explicitly defaulted after its\n  first declaration) is defined at the point where it is explicitly\n  defaulted; if such a function is implicitly defined as deleted, the\n  program is ill-formed.</p>\n</blockquote>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-11-20T21:56:14.937", "Score": "2", "CreationDate": "2014-11-20T21:56:14.937", "ParentId": "27050187", "CommentCount": "0"}, "27050187": {"ViewCount": "95", "Body": "<p>When I have a class that requires a virtual destructor is it enough to declare it virtual (and let the compiler generate the definition) or do I have to define it explicitly?</p>\n", "Title": "Is it enough to declare destructor virtual?", "CreationDate": "2014-11-20T21:47:10.127", "LastActivityDate": "2014-11-20T21:56:14.937", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "Id": "27050187", "Score": "2", "OwnerUserId": "1030598", "Tags": "<c++><virtual-destructor>", "AnswerCount": "2"}});