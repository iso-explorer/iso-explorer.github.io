post_cb({"14278575": {"Id": "14278575", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14278006_14278575_0\">C++11 3.6.3/1: Destructors for initialized objects [...] with static storage duration are called as a result of returning from <code>main</code></p>\n</blockquote>\n<p>At the point at which the program returns from <code>main</code>, <code>anotherFoo</code> has been initialised; but <code>foo2</code> hasn't, since it is not initialised until the first call to <code>GetFoo2</code> during the destruction of <code>anotherFoo</code>. Therefore, a strict interpretation of the rules would imply that its destructor should not be called.</p>\n", "LastActivityDate": "2013-01-11T12:51:13.203", "CommentCount": "4", "CreationDate": "2013-01-11T12:51:13.203", "ParentId": "14278006", "Score": "4", "OwnerUserId": "204847"}, "14278069": {"Id": "14278069", "PostTypeId": "2", "Body": "<p>All the instances I see in this code are static.</p>\n<p>By consequence their destructor is called at the end of the executable, after main is finished.</p>\n<p>if the destructor wasn't called then it was a bug. </p>\n", "LastEditorUserId": "356440", "LastActivityDate": "2013-01-11T12:41:40.207", "Score": "5", "CreationDate": "2013-01-11T12:18:45.840", "ParentId": "14278006", "CommentCount": "4", "OwnerUserId": "356440", "LastEditDate": "2013-01-11T12:41:40.207"}, "14278192": {"Id": "14278192", "PostTypeId": "2", "Body": "<p>static object will be destroyed when program exists. put a break point at <code>~Foo2()</code>, you will see it or write log to a file should help you diagnose it. If really not called then it's a compiler bug.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/spyY7.png\"/></p>\n<p>And it's fun to upload a pic to answer a question.</p>\n", "LastEditorUserId": "951757", "LastActivityDate": "2013-01-11T12:34:21.210", "Score": "4", "CreationDate": "2013-01-11T12:26:37.050", "ParentId": "14278006", "CommentCount": "3", "OwnerUserId": "951757", "LastEditDate": "2013-01-11T12:34:21.210"}, "14278006": {"ViewCount": "438", "Body": "<p>I have some problems with destructor, in next code:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;cstdio&gt;\n\nclass Foo2\n{\n    public:\n        Foo2() { printf(\"foo2 const\\n\"); }\n\n        ~Foo2()\n        {\n            printf(\"foo2 dest\\n\"); //  &lt;--- wasn't called for bionic libc\n        }\n};\n\nstatic Foo2&amp; GetFoo2()\n{\n    static Foo2 foo2;\n    printf (\"return foo2\\n\");\n    return foo2;\n}\n\nclass Foo1\n{\n    public:\n        Foo1() { printf(\"foo1 const\\n\"); }\n\n        ~Foo1()\n        {\n            printf(\"foo1 dest\\n\");\n            GetFoo2();\n        }\n};\n\nint main( int argc, const char* argv[] )\n{\n        printf(\"main 1 \\n\");\n        static Foo1 anotherFoo;\n        printf(\"main 2 \\n\");\n}\n</code></pre>\n<p>Why destructor for foo2 wasn't called for <code>bionic</code> and was for <code>glibc</code>?    </p>\n<p><strong>EDIT</strong><br>\nOutput for bionic:  </br></p>\n<pre><code>main 1  \nfoo1 const  \nmain 2  \nfoo1 dest  \nfoo2 const  \nreturn foo2  \n</code></pre>\n<p><strong>Debug info:</strong></p>\n<pre><code>(gdb) break 22\nBreakpoint 1 at 0x8048858: file test.C, line 22.\n(gdb) info breakpoints\nNum     Type           Disp Enb Address    What\n1       breakpoint     keep y   0x08048858 in Foo2::~Foo2() at test.C:22\n(gdb) cont\n[    exited with code 0]\n</code></pre>\n", "AcceptedAnswerId": "14278613", "Title": "Destructor of a static object constructed within the destructor of another static object", "CreationDate": "2013-01-11T12:14:26.927", "Id": "14278006", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-01-11T16:39:25.627", "LastEditorUserId": "567292", "LastActivityDate": "2013-01-11T16:39:25.627", "Score": "8", "OwnerUserId": "1446154", "Tags": "<c++><oop><static><g++><destructor>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_14278006_14278575_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 7156}}, "n3337": {"so_14278006_14278575_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6900}}, "n4659": {"so_14278006_14278575_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 8661}}}, "14278613": {"Id": "14278613", "PostTypeId": "2", "Body": "<p>I think your code has undefined behavior, although the standard\nisn't really clear about it (or I can't find it in the\nstandard).  Your code constructs a new static object in the\ndestructor of a static object.  The standard doesn't address\nthis case, but:</p>\n<ol>\n<li><p>It does say that destructors must be called in the reverse\norder of construction.  In your case, this would imply that the\nstatic object in <code>GetFoo2</code> must be destructed before it was\nconstructed, which is self-contradictory. </p></li>\n<li><p>The text in \u00a73.6/3 describes the sequencing of destructors\nand functions registered with <code>atexit</code>.  The requirements are\nsuch that the same registration mechanism must be used for each.\nAnd calling <code>atexit</code> once you've called <code>exit</code> (or returned from\n<code>main</code>) is undefined behavior.</p></li>\n<li><p>There's also \u00a73.6/2, which says that \"If a function contains\na block-scope object of static or thread storage duration\nthat has been destroyed and the function is called during the\ndestruction of an object with static or thread storage\nduration, the program has unde\ufb01ned behavior if the \ufb02ow of\ncontrol passes through the de\ufb01nition of the previously\ndestroyed blockscope object.\"  This sentence talks about alread\ndestroyed objects, but it doesn't take much imagination to think\nthat the absense of \"not yet constructed\" objects is just an\noversight.</p></li>\n</ol>\n<p>In the end, I'd say that my first point above is conclusive with\nregards to intent.  In \u00a71.3.24, there is a note (non normative,\nbut indicative of intent) \"Unde\ufb01ned behavior may be expected\nwhen this International Standard omits any explicit de\ufb01nition of\nbehavior or when a program uses an erroneous construct or\nerroneous data.\"  In this case, the only description of the\nrequired behavior is impossible (since you cannot destruct an\nobject before it was constructed), and the standard says nothing\nabout how this should be resolved.</p>\n", "LastActivityDate": "2013-01-11T12:53:28.753", "CommentCount": "3", "CreationDate": "2013-01-11T12:53:28.753", "ParentId": "14278006", "Score": "6", "OwnerUserId": "649665"}});