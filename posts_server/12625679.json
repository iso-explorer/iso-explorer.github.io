post_cb({"12625748": {"Id": "12625748", "PostTypeId": "2", "Body": "<p>Inside the parameter list of a function, <code>double x[]</code> is same as <code>double *x</code>. </p>\n<blockquote>\n<p id=\"so_12625679_12625748_0\">can I pass a parameter x with any length?</p>\n</blockquote>\n<p>Yes, you can pass. But there's no way to know the length of the array <code>x</code> in the function <code>evaluate</code>. So you probably want to pass the length as well.</p>\n", "LastEditorUserId": "252000", "LastActivityDate": "2012-09-27T17:33:04.680", "Score": "3", "CreationDate": "2012-09-27T16:16:15.063", "ParentId": "12625679", "CommentCount": "3", "OwnerUserId": "1275169", "LastEditDate": "2012-09-27T17:33:04.680"}, "12625792": {"Id": "12625792", "PostTypeId": "2", "Body": "<p>Arrays can be confusing, because in most contexts the name of an array decays into a pointer to its first element. So:</p>\n<pre><code>double x[3];          // x is an array of 3 doubles\nvoid f(double x[3]);  // f takes a pointer to double\nf(x);                 // calls f with the address of x[0]\n</code></pre>\n<p>The reason for having the array type decay into a pointer for <code>f</code> is so that you don't have to have a separate function for every array size:</p>\n<pre><code>double x[3];\ndouble y[4];\nvoid f(double x[3], int size) {\n    for (int i = 0; i &lt; size; ++i)\n        std::cout &lt;&lt; x[i] &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\nf(x, 3);\nf(y, 4);\n</code></pre>\n<p>It works the same way if the argument is <code>double*x</code>, <code>double x[]</code>, <code>double x[3]</code>, <code>double x[17]</code>, <code>double x[]</code>; in all of these cases, <code>x</code> is treated as <code>double*</code>.</p>\n", "LastActivityDate": "2012-09-27T16:18:39.020", "CommentCount": "0", "CreationDate": "2012-09-27T16:18:39.020", "ParentId": "12625679", "Score": "4", "OwnerUserId": "1593860"}, "12625732": {"Id": "12625732", "PostTypeId": "2", "Body": "<p>A parameter of array type behaves exactly like it is a pointer. You can not truly pass an array as a function argument. However, this syntax gives the illusion that you can for the sake of readability. So your function is equivalent to:</p>\n<pre><code>void evaluate(double *x, double *f)\n{\n  // evaluate\n}\n</code></pre>\n<p>From \u00a78.3.5/5 of ISO/IEC 14882:2011:</p>\n<blockquote>\n<p id=\"so_12625679_12625732_0\">After determining the type of each parameter, any parameter of type \u201carray of T\u201d or \u201cfunction returning T\u201d is adjusted to be \u201cpointer to T\u201d or \u201cpointer to function returning T,\u201d respectively.</p>\n</blockquote>\n<p>An expression that denotes an array will decay to a pointer to its first element, so you can still do this:</p>\n<pre><code>void evaluate(double x[]);\nint array[] = {1, 2, 3, 4, 5};\nevaluate(array); // The array decays to a pointer to its first element\n</code></pre>\n<p>From \u00a74.2:</p>\n<blockquote>\n<p id=\"so_12625679_12625732_1\">An lvalue or rvalue of type \u201carray of N T\u201d or \u201carray of unknown bound of T\u201d can be converted to a prvalue of type \u201cpointer to T\u201d. The result is a pointer to the first element of the array.</p>\n</blockquote>\n<p>So yes, you can indeed pass an array of any length. In reality, you are just passing a pointer to the first element. You will, however, need to pass the length of the array as well, if you need it.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2012-09-27T16:20:49.233", "Score": "5", "CreationDate": "2012-09-27T16:15:16.390", "ParentId": "12625679", "CommentCount": "0", "OwnerUserId": "150634", "LastEditDate": "2012-09-27T16:20:49.233"}, "12625679": {"ViewCount": "262", "Body": "<p>what is this syntax for <code>double x[]</code>?</p>\n<p>Is it a C way to declare an array? </p>\n<p>If I have a function like</p>\n<pre><code>void evaluate(double x[], double *f)\n{\n   // evaluate\n}\n</code></pre>\n<p>Can I pass a parameter x with any length? </p>\n", "AcceptedAnswerId": "12625732", "Title": "C like array syntax?", "CreationDate": "2012-09-27T16:11:54.440", "Id": "12625679", "CommentCount": "6", "LastEditDate": "2012-09-27T16:17:06.560", "PostTypeId": "1", "LastEditorUserId": "1585970", "LastActivityDate": "2012-09-27T17:33:04.680", "Score": "0", "OwnerUserId": "1141493", "Tags": "<c++><c><arrays><syntax>", "AnswerCount": "7"}, "12625736": {"Id": "12625736", "PostTypeId": "2", "Body": "<pre><code>void evaluate(double x[], double *f)\n{\n   // evaluate\n}\n</code></pre>\n<p>is actually equivalent to:</p>\n<pre><code>void evaluate(double *x, double *f)\n{\n   // evaluate\n}\n</code></pre>\n<p>in C and C++.</p>\n<p>It means the type of the <code>x</code> parameter is <code>double *</code> in both cases.</p>\n", "LastActivityDate": "2012-09-27T16:15:36.570", "CommentCount": "0", "CreationDate": "2012-09-27T16:15:36.570", "ParentId": "12625679", "Score": "1", "OwnerUserId": "1119701"}, "12625712": {"Body": "<p>yes in c the array is declared like that</p>\n<p><strong>good read</strong> </p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/4978056/char-array-declaration-and-initialization-in-c\">Char array declaration and initialization in C</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1582165/simple-c-array-declaration-assignment-question\">Simple C array declaration / assignment question</a></li>\n</ol>\n", "CreationDate": "2012-09-27T16:13:58.417", "ParentId": "12625679", "CommentCount": "1", "LastEditDate": "2017-05-23T12:27:53.803", "PostTypeId": "2", "OwnerDisplayName": "user1280616", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-27T16:20:32.250", "Id": "12625712", "Score": "0", "OwnerUserId": "1723893"}, "bq_ids": {"n4140": {"so_12625679_12625732_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 11}, "so_12625679_12625732_0": {"length": 16, "quality": 1.0, "section_id": 3241}}, "n3337": {"so_12625679_12625732_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 8}, "so_12625679_12625732_0": {"length": 16, "quality": 1.0, "section_id": 3114}}, "n4659": {"so_12625679_12625732_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 12}, "so_12625679_12625732_0": {"length": 12, "quality": 0.75, "section_id": 3997}}}, "12625753": {"Id": "12625753", "PostTypeId": "2", "Body": "<p><a href=\"http://c-faq.com/aryptr/aryptrparam.html\" rel=\"nofollow\">C FAQ, Section 6.4</a></p>\n<blockquote>\n<p id=\"so_12625679_12625753_0\">Since arrays decay immediately into pointers, an array is never actually passed to a function. You can pretend that a function receives an array as a parameter, and illustrate it by declaring the corresponding parameter as an array:</p>\n<pre><code>  void f(char a[])\n    { ... }\n</code></pre>\n<p id=\"so_12625679_12625753_1\">Interpreted literally, this declaration would have no use, so the compiler turns around and pretends that you'd written a pointer declaration, since that's what the function will in fact receive:</p>\n<pre><code>  void f(char *a)\n    { ... }\n</code></pre>\n<p id=\"so_12625679_12625753_2\">There's nothing particularly wrong with talking about a function as if it ``receives'' an array, if the function is traditionally used to operate on arrays, or if the parameter is naturally treated within the function as an array.</p>\n<p id=\"so_12625679_12625753_3\">This conversion of array-like declarators into pointers holds only within function formal parameter declarations, nowhere else. If the conversion bothers you, you're under no compulsion to make use of it; many programmers have concluded that the confusion it causes outweighs the small advantage of having the declaration ``look like'' the call or the uses within the function. (Note that the conversion happens only once; something like char a2[][] won't work. See questions 6.18 and 6.19.) </p>\n</blockquote>\n<p>In other words, in a function parameter declaration, an array with unspecified length is the same as a pointer.</p>\n", "LastActivityDate": "2012-09-27T16:16:37.950", "CommentCount": "0", "CreationDate": "2012-09-27T16:16:37.950", "ParentId": "12625679", "Score": "2", "OwnerUserId": "159369"}, "12625763": {"Id": "12625763", "PostTypeId": "2", "Body": "<p>The argument <code>x</code> to your function is an array of unspecified length. That means that you can pass any array of type <code>double</code> to it, no matter the size. You can also pass a <em>pointer</em> to a <code>double</code> as argument.</p>\n<p>There is one caveats though: You can't use the <code>sizeof</code> operator on the array <code>x</code>, as it doesn't have a size.</p>\n", "LastActivityDate": "2012-09-27T16:17:16.390", "CommentCount": "0", "CreationDate": "2012-09-27T16:17:16.390", "ParentId": "12625679", "Score": "0", "OwnerUserId": "440558"}});