post_cb({"25918446": {"ViewCount": "982", "Body": "<p>This code fragment:</p>\n<pre><code>enum {N = 10, M = 100};\n\nvector&lt;int&gt; v(N, M);\n</code></pre>\n<p>fails to compile with Visual Studio 2013, due to the following error:</p>\n<blockquote>\n<p id=\"so_25918446_25918446_0\">error C2838: 'iterator_category' : illegal qualified name in member declaration</p>\n</blockquote>\n<p>What's wrong with it?</p>\n", "AcceptedAnswerId": "25918751", "Title": "Why enums can't be used as arguments in this vector constructor?", "CreationDate": "2014-09-18T17:03:06.643", "Id": "25918446", "CommentCount": "2", "LastEditDate": "2015-10-15T14:57:12.340", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-10-15T14:57:12.340", "Score": "14", "OwnerUserId": "219153", "Tags": "<c++><c++11><visual-studio-2013><stl>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_25918446_25918723_5": {"length": 12, "quality": 1.0, "section_id": 733}, "so_25918446_25918751_4": {"length": 13, "quality": 0.5416666666666666, "section_id": 733}, "so_25918446_25918751_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 807}, "so_25918446_25918751_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 733}}, "n3337": {"so_25918446_25918723_5": {"length": 12, "quality": 1.0, "section_id": 722}, "so_25918446_25918751_4": {"length": 13, "quality": 0.5416666666666666, "section_id": 722}, "so_25918446_25918751_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 796}, "so_25918446_25918751_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 722}}, "n4659": {"so_25918446_25918723_5": {"length": 12, "quality": 1.0, "section_id": 763}, "so_25918446_25918751_4": {"length": 13, "quality": 0.5416666666666666, "section_id": 763}, "so_25918446_25918751_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 865}, "so_25918446_25918751_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 763}}}, "25918723": {"Id": "25918723", "PostTypeId": "2", "Body": "<p>This is a Visual Studio 2013 bug, from the error being generated (<em><a href=\"http://rextester.com/FGXRA34045\" rel=\"nofollow\">see it live</a></em>), this is just a small portion:</p>\n<blockquote>\n<p id=\"so_25918446_25918723_0\">[...]</p>\n<p id=\"so_25918446_25918723_1\">see reference to function template instantiation 'std::vector&gt;::vector&lt;,void&gt;(_Iter,_Iter)' being compiled</p>\n<p id=\"so_25918446_25918723_2\">[...]&gt;</p>\n</blockquote>\n<p>It is attempting to use the constructor that takes two input iterators. Which would be a bug, both <code>gcc</code> and <code>clang</code> are fine with this code.</p>\n<p>We can that in C++11 <a href=\"http://en.cppreference.com/w/cpp/container/vector/vector\" rel=\"nofollow\">that constructor</a> should not be considered:</p>\n<blockquote>\n<p id=\"so_25918446_25918723_3\">Constructs the container with the contents of the range [first, last). This constructor does not participate in overload resolution if InputIt does not satisfy InputIterator, to avoid ambiguity with the overload 2 (since C++11)</p>\n</blockquote>\n<p>This agrees with the draft C++11 standard section <code>23.2.3</code> <em>Sequence containers</em> paragraph <em>14</em> which says:</p>\n<blockquote>\n<p id=\"so_25918446_25918723_4\">If the constructor</p>\n<pre><code>template &lt;class InputIterator&gt;\nX(InputIterator first, InputIterator last,\n  const allocator_type&amp; alloc = allocator_type())\n</code></pre>\n<p id=\"so_25918446_25918723_5\">is called with a type InputIterator that does not qualify as an input iterator, then the constructor\n  shall not participate in overload resolution.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-09-18T17:25:37.920", "Score": "2", "CreationDate": "2014-09-18T17:19:02.037", "ParentId": "25918446", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2014-09-18T17:25:37.920"}, "25918540": {"Id": "25918540", "PostTypeId": "2", "Body": "<p>Since C++11 the <code>vector</code> constructor accepting two <code>InputIterators</code> should be disabled if the two arguments aren't iterators. VS2013 fails to implement this correctly.</p>\n", "LastActivityDate": "2014-09-18T17:08:11.503", "CommentCount": "0", "CreationDate": "2014-09-18T17:08:11.503", "ParentId": "25918446", "Score": "10", "OwnerUserId": "105672"}, "25918751": {"Id": "25918751", "PostTypeId": "2", "Body": "<p>It's a bug in both VS2012 and VS2013 since it's not conforming to the C++11 standard (with <code>_HAS_CPP0X</code> defined as 1):</p>\n<p>C++03 23.1.1 [lib.sequence.reqmts]/9 says:</p>\n<blockquote>\n<p id=\"so_25918446_25918751_0\">For every sequence defined in this clause and in clause 21: </p>\n<p id=\"so_25918446_25918751_1\">\u2014 the constructor\n  <code>template &lt;class InputIterator&gt; X(InputIterator f, InputIterator l, const Allocator&amp; a = Allocator())</code> shall have the same effect as: </p>\n<p id=\"so_25918446_25918751_2\"><code>X(static_cast&lt;typename X::size_type&gt;(f), static_cast&lt;typename X::value_type&gt;(l), a)</code> if <code>InputIterator</code> is an integral type.</p>\n</blockquote>\n<p>but from C++11 23.2.3 [sequence.reqmts]/14:</p>\n<blockquote>\n<p id=\"so_25918446_25918751_3\">For every sequence container defined in this Clause and in Clause 21:</p>\n<p id=\"so_25918446_25918751_4\">\u2014 If the constructor <code>template &lt;class InputIterator&gt; X(InputIterator first, InputIterator last, const allocator_type&amp; alloc = allocator_type())</code> is called with a type <code>InputIterator</code> that does not\n  qualify as an input iterator, <strong>then the constructor shall not participate in overload resolution.</strong></p>\n</blockquote>\n<p><strong>That constructor should not have been considered at all</strong></p>\n<p>More here: <a href=\"https://stackoverflow.com/a/12432482/1938163\">https://stackoverflow.com/a/12432482/1938163</a></p>\n<p>As a workaround you could \"<em>help the overload resolution a bit</em>\", e.g.</p>\n<pre><code>std::vector&lt;int&gt; v(static_cast&lt;std::vector&lt;int&gt;::size_type&gt;(N), M);\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-18T17:29:11.690", "Score": "12", "CreationDate": "2014-09-18T17:21:11.150", "ParentId": "25918446", "CommentCount": "0", "OwnerUserId": "1938163", "LastEditDate": "2017-05-23T11:58:38.670"}});