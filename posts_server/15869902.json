post_cb({"15869902": {"CommentCount": "0", "ViewCount": "116", "ClosedDate": "2013-04-08T02:25:56.547", "CreationDate": "2013-04-08T01:27:22.987", "LastActivityDate": "2013-04-08T01:28:42.843", "Title": "Will my compiler reorder this expression?", "PostTypeId": "1", "Id": "15869902", "Score": "0", "Body": "<p>If I write:</p>\n<pre><code>if(somePtr != NULL &amp;&amp; somePtr-&gt;someFun() == SUCCESS )\n{\n    /**/\n}\n</code></pre>\n<p>Will it be assured that <code>somePtr != NULL</code> will be checked before <code>somePtr-&gt;someFun() == SUCCESS</code>?</p>\n<p>Is there any chance that my compiler will reorder these two?</p>\n", "Tags": "<c++>", "OwnerUserId": "2222960", "AnswerCount": "1"}, "15869917": {"ParentId": "15869902", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_15869902_15869917_0\">Is there any chance that my compiler will reorder these two?</p>\n</blockquote>\n<p>Nope. It is guaranteed that <code>&amp;&amp;</code> evaluates the second expression only if the first one is <code>true</code> (incidentally, it also introduces a sequence point into the whole expression).</p>\n<blockquote>\n<p id=\"so_15869902_15869917_1\">The &amp;&amp; operator groups left-to-right. The operands are both contextually converted to type bool (Clause 4). The result is true if both operands are true and false otherwise. <b>Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right evaluation: the second operand is not evaluated if the first operand is false.</b></p>\n<p id=\"so_15869902_15869917_2\">The result is a bool. If the second expression is evaluated, every value computation and side effect associated with the first expression is sequenced before every value computation and side effect associated with the second expression.</p>\n</blockquote>\n<p>(C++11, [expr.log.and]; emphasis added)</p>\n", "OwnerUserId": "214671", "PostTypeId": "2", "Id": "15869917", "Score": "1", "CreationDate": "2013-04-08T01:28:42.843", "LastActivityDate": "2013-04-08T01:28:42.843"}, "bq_ids": {"n4140": {"so_15869902_15869917_1": {"section_id": 6163, "quality": 0.8666666666666667, "length": 26}, "so_15869902_15869917_2": {"section_id": 6164, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_15869902_15869917_1": {"section_id": 5924, "quality": 0.9, "length": 27}, "so_15869902_15869917_2": {"section_id": 5925, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_15869902_15869917_1": {"section_id": 7660, "quality": 0.8666666666666667, "length": 26}, "so_15869902_15869917_2": {"section_id": 7661, "quality": 0.9583333333333334, "length": 23}}}});