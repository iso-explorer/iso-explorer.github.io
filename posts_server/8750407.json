post_cb({"8750407": {"ViewCount": "230", "Body": "<p>I'd have expected the following code to yield a segmentation fault (or otherwise UB):</p>\n<pre><code>struct T {\n   T();\n};\n\nT t;\nchar const* str = \"Test string\";\n\nT::T() {\n   std::cout &lt;&lt; str; // zero-initialised, only!\n}\n\nint main() {}\n</code></pre>\n<p>That's because <code>t</code> is initialised before <code>str</code>. I'd expect <code>str</code> to hold the value <code>(char const*)0</code> due to zero-initialisation. My interpretation of <code>[C++11: 3.6.2/2]</code> supports this.</p>\n<p>However, <a href=\"http://codepad.org/9E7urd66\" rel=\"nofollow noreferrer\">the above snippet appears to output the string as expected</a> (and I confirmed the behaviour by also printing the pointer's value).</p>\n<p>Is there some rule of static initialisation that I'm missing here, that allows <code>str</code> to be value-initialised before <code>t</code> begins construction? Where is it in the standard?</p>\n<hr>\n<p><sup>This came up on <a href=\"https://stackoverflow.com/q/8749841/560648\">static variable resolution at build time</a>, where an answerer asserted that using <code>char const*</code> rather than <code>std::string</code> for a static global avoids the static initialisation order fiasco. I disagreed, but now I'm not so sure...</sup></p>\n</hr>", "AcceptedAnswerId": "8750473", "Title": "Do objects of built-in types have special static initialisation order precedence?", "CreationDate": "2012-01-05T21:55:42.553", "Id": "8750407", "CommentCount": "2", "LastEditDate": "2017-05-23T12:09:21.117", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-13T09:04:30.380", "Score": "6", "OwnerUserId": "560648", "Tags": "<c++><static-initializer>", "AnswerCount": "4"}, "8750449": {"Id": "8750449", "PostTypeId": "2", "Body": "<p>Built-in types aren't initialised at all, in the normal sense. Commonly, their initial contents are memory-mapped directly from a special region of the binary as part of loading it.</p>\n", "LastActivityDate": "2012-01-05T22:00:09.513", "CommentCount": "3", "CreationDate": "2012-01-05T22:00:09.513", "ParentId": "8750407", "Score": "1", "OwnerUserId": "9990"}, "bq_ids": {"n4140": {"so_8750407_8750473_2": {"length": 18, "quality": 0.9, "section_id": 7151}, "so_8750407_8750473_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 7151}}, "n3337": {"so_8750407_8750473_2": {"length": 18, "quality": 0.9, "section_id": 6895}, "so_8750407_8750473_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 6895}}, "n4659": {"so_8750407_8750473_2": {"length": 14, "quality": 0.7, "section_id": 8652}, "so_8750407_8750473_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 4051}}}, "8750473": {"Id": "8750473", "PostTypeId": "2", "Body": "<p>I think I found it; what's happening here is not so much about the built-in type, but about the constant initialiser:</p>\n<blockquote>\n<p id=\"so_8750407_8750473_0\"><code>[C++11: 3.6.2/2]:</code> Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other initialization takes place.</p>\n<p id=\"so_8750407_8750473_1\"><strong><em>Constant initialization</em> is performed:</strong></p>\n<ul>\n<li>if each <em>full-expression</em> (including implicit conversions) that appears in the initializer of a reference with static or thread storage duration is a constant expression (5.19) and the reference is bound to an lvalue designating an object with static storage duration or to a temporary (see 12.2);</li>\n<li>if an object with static or thread storage duration is initialized by a constructor call, if the constructor is a <code>constexpr</code> constructor, if all constructor arguments are constant expressions (including conversions), and if, after function invocation substitution (7.1.5), every constructor call and full-expression in\n  the <em>mem-initializers</em> and in the <em>brace-or-equal-initializers</em> for non-static data members is a constant expression;</li>\n<li><strong>if an object with static or thread storage duration is not initialized by a constructor call and if every <em>full-expression</em> that appears in its initializer is a constant expression.</strong></li>\n</ul>\n<p id=\"so_8750407_8750473_2\"><strong>Together, <em>zero-initialization</em> and constant initialization are called static initialization; all other initialization is dynamic initialization. Static initialization shall be performed before any dynamic initialization takes place.</strong> [..]</p>\n</blockquote>\n<p>That final sentence would seem to override subsequent sequencing rules, making this ordering apply across Translation Units.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2012-01-06T15:16:28.267", "Score": "1", "CreationDate": "2012-01-05T22:01:48.677", "ParentId": "8750407", "CommentCount": "5", "OwnerUserId": "560648", "LastEditDate": "2012-01-06T15:16:28.267"}, "8750458": {"Id": "8750458", "PostTypeId": "2", "Body": "<p><code>str</code> is initialized by a constant expression and <code>const char *</code> is a POD type (C++03 terms, but C++11 it is analogous, but with different terms and way more allowed cases). Such an initialization is done in <em>static</em> initialization phase, and the <em>static</em> initialization phase has no issue of order. It happens before any <em>dynamic</em> initialization. <code>t</code> is initialized in the <em>dynamic</em> initialization phase. </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2012-01-05T22:20:47.593", "Score": "6", "CreationDate": "2012-01-05T22:00:48.723", "ParentId": "8750407", "CommentCount": "4", "OwnerUserId": "34509", "LastEditDate": "2012-01-05T22:20:47.593"}, "8750470": {"Id": "8750470", "PostTypeId": "2", "Body": "<pre><code>char const* str = \"Test string\";\n</code></pre>\n<p>is done by the compiler/linker, so it exists in its \"initialized state\" before the program even starts to run.</p>\n", "LastEditorUserId": "1428679", "LastActivityDate": "2012-11-13T09:04:30.380", "Score": "0", "CreationDate": "2012-01-05T22:01:42.373", "ParentId": "8750407", "CommentCount": "0", "OwnerUserId": "12386", "LastEditDate": "2012-11-13T09:04:30.380"}});