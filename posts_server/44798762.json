post_cb({"bq_ids": {"n4140": {"so_44798762_44798850_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6110}}, "n3337": {"so_44798762_44798850_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5876}}, "n4659": {"so_44798762_44798850_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7607}}}, "44798762": {"ViewCount": "58", "Body": "<p>I did practicals on Destructor but when compile this program I don't know why the output not come as I thought. </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass aaa\n{\n   private:\n   static int x;\n   int code;\n   public:\n   /*after constructor executes 3 times the value of \"code\" becomes 103*/\n  aaa()   \n  {\n    code=x;\n    cout&lt;&lt;\"Default Constructor\"&lt;&lt;endl;\n    x++;\n  } \n  ~aaa() \n  {\n    cout&lt;&lt;\"Destructor of \"&lt;&lt;code&lt;&lt;endl;\n  } \n};\nint aaa::x=101;\nint main() \n{\n   aaa *p;\n   p=new aaa[3];\n   delete []p;\n   return 0;\n } \n</code></pre>\n<p>Output is:</p>\n<pre><code>Default Constructor\nDefault Constructor\nDefault Constructor\nDestructor of 103\nDestructor of 102 \nDestructor of 101\n</code></pre>\n<p>while I thought it was going to be this:</p>\n<pre><code>101\n102\n103\n</code></pre>\n", "AcceptedAnswerId": "44798847", "Title": "How Destructor executes?", "CreationDate": "2017-06-28T09:33:31.260", "Id": "44798762", "CommentCount": "0", "LastEditDate": "2017-06-28T10:22:31.440", "PostTypeId": "1", "LastEditorUserId": "2411320", "LastActivityDate": "2017-06-28T10:22:31.440", "Score": "2", "OwnerUserId": "7832116", "Tags": "<c++><arrays><oop><destructor><new-operator>", "AnswerCount": "3"}, "44798847": {"Id": "44798847", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_44798762_44798847_0\">I don't know why the output not come as I thought.</p>\n</blockquote>\n<p>Because the objets are destructed in reverse order of construction: First constructed, last destructed.</p>\n<p>The destructors are called in the <em>reverse order</em> of the constructors' calls, which explains the behavior you see.</p>\n<p>So when you dynamically allocate memory with <code>new[]</code> for your array, the constructors are called in the natural order (the one you expect), but when <code>delete[]</code> is called to free that memory, every element of the array gets destructed in the reverse order.</p>\n<p>Read more in <a href=\"https://stackoverflow.com/questions/31246000/why-destructors-are-not-called-in-reverse-order-for-array-of-objects\">Why destructors are not called in reverse order for array of objects?</a></p>\n<hr>\n<blockquote>\n<p id=\"so_44798762_44798847_1\">What happens if i write <code>delete p</code> instead of <code>delete []p</code>, so ho many times Destructor is called?</p>\n</blockquote>\n<p>C++ requires that you delete arrays with <code>delete[]</code> and delete non-arrays with <code>delete</code>. So I can't answer that. Read more in <a href=\"https://stackoverflow.com/questions/6953457/delete-and-delete-are-the-same-when-deleting-arrays\">Delete and delete [] are the same when deleting arrays?</a></p>\n</hr>", "LastEditorUserId": "2411320", "LastActivityDate": "2017-06-28T10:14:14.577", "Score": "1", "CreationDate": "2017-06-28T09:36:46.043", "ParentId": "44798762", "CommentCount": "3", "LastEditDate": "2017-06-28T10:14:14.577", "OwnerUserId": "2411320"}, "44798819": {"Id": "44798819", "PostTypeId": "2", "Body": "<p>Destruction happens in the opposite order of construction, that is why you see the destructor for 103 called first. </p>\n<p>i.e. When you allocate the array, <code>new[]</code> constructs the objects in one direction and then when you call <code>delete[]</code> the objects are destroyed from the end of the array. </p>\n<p>See <a href=\"https://stackoverflow.com/a/44798850/5501675\">@StoryTeller's answer for a quote from the C++ standard</a> regarding this behavior.</p>\n", "LastEditorUserId": "5501675", "LastActivityDate": "2017-06-28T10:15:34.230", "Score": "3", "CreationDate": "2017-06-28T09:35:52.747", "ParentId": "44798762", "CommentCount": "2", "LastEditDate": "2017-06-28T10:15:34.230", "OwnerUserId": "5501675"}, "44798850": {"Id": "44798850", "PostTypeId": "2", "Body": "<p>Destructors are invoked in reverse order to object initialization, and that is true for arrays destroyed by <code>delete[]</code> as well:</p>\n<p><a href=\"http://eel.is/c++draft/expr.delete#6\" rel=\"nofollow noreferrer\">[expr.delete/6]</a></p>\n<blockquote>\n<p id=\"so_44798762_44798850_0\">If the value of the operand of the delete-expression is not a null\n  pointer value, the delete-expression will invoke the destructor (if\n  any) for the object or the elements of the array being deleted. <strong>In the\n  case of an array, the elements will be destroyed in order of\n  decreasing address (that is, in reverse order of the completion of\n  their constructor;</strong> see [class.base.init]).</p>\n</blockquote>\n", "LastActivityDate": "2017-06-28T09:36:52.930", "Score": "2", "CreationDate": "2017-06-28T09:36:52.930", "ParentId": "44798762", "CommentCount": "1", "OwnerUserId": "817643"}});