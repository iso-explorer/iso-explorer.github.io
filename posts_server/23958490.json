post_cb({"23959049": {"ParentId": "23958490", "CommentCount": "0", "Body": "<p>Per the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow\">2011 online draft</a> of the C standard:</p>\n<blockquote id=\"so_23958490_23959049_0\">\n<b>6.4.4.1 Integer constants</b><br>\n...<br>\n5 The type of an integer constant is the \ufb01rst of the corresponding list in which its value can be represented.<br>\n<pre><code>\nSuffix           Decimal Constant          Octal or Hexadecimal\n                                               Constant\n-----------------------------------------------------------------\nNone             int                       int\n                 long int                  unsigned int\n                 long long int             long int\n                                           unsigned long int\n                                           long long int\n                                           unsigned long long int\n-----------------------------------------------------------------\nu or U           unsigned int              unsigned int\n                 unsigned long int         unsigned long int\n                 unsigned long long int    unsigned long long int\n------------------------------------------------------------------\nl or L           long int                  long int\n                 long long int             unsigned long int\n                                           long long int\n                                           unsigned long long int\n------------------------------------------------------------------\nBoth u or U      unsigned long int         unsigned long int\nand l or L       unsigned long long int    unsigned long long int\n------------------------------------------------------------------\nll or LL         long long int             long long int\n                                           unsigned long long int\n------------------------------------------------------------------\nBoth u or U      unsigned long long int    unsigned long long int\nand ll or LL\n</code></pre>\n</br></br></br></blockquote>\n<p>So, if you have a decimal integer constant without a suffix, its type will be the smallest of <code>int</code>, <code>long int</code>, or <code>long long int</code> that can represent that value.  </p>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "23959049", "Score": "3", "CreationDate": "2014-05-30T16:17:07.573", "LastActivityDate": "2014-05-30T16:17:07.573"}, "23958490": {"CommentCount": "1", "ViewCount": "74", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-05-30T15:47:03.777", "LastActivityDate": "2014-05-30T16:17:07.573", "Title": "What are the rules for 'typing' of parameters when explicit integer suffixes are not given?", "LastEditDate": "2017-05-23T12:11:03.883", "Id": "23958490", "Score": "2", "Body": "<p>For example, if I were to say:</p>\n<pre><code>#define UINT_DEF 500u\n</code></pre>\n<p>Then such a definition would have the type <code>unsigned int</code>. However, what is the default rule for when such suffixes are not given? As in</p>\n<pre><code>#define SOME_DEF 500\n</code></pre>\n<p>being placed in the type <code>int</code>. That is, at compile-time, if no suffix is given, are the constants <em>slotted</em> into the lowest data type in which they fit? </p>\n<p>Would, for instance, </p>\n<pre><code>#define SOME_DEF_2 100\n</code></pre>\n<p>Acquire the datatype of <code>char</code> since it fits? </p>\n<p>I asked a <a href=\"https://stackoverflow.com/questions/23858417/using-constants-and-their-associated-modifiers-using-gcc\">previous question</a> on a similar topic and had some good responses. However, little was said to the case where no suffix is given. It was said that if a given suffix is requested of the compiler and the assigned value does not fit in such a type then the constant would get promoted, but little else was said about it. I imagine the answer to be something similar to this in that a default casting (perhaps the smallest available) is given to the constants and in such cases where the value should not fit into this default type then a promotion is realized. </p>\n<p>And finally, do arithmetic promotion rules still apply as normal for macros? That is, would</p>\n<pre><code>#define TEST_DEF   5000000/50\n#define TEST_DEF_2 5000000/50.0\n</code></pre>\n<p>respectively evaluate to 100,000 with a type of <code>long int</code> and 100,000.00 of type <code>float</code> (assuming 5,000,000 is a long and 50 is an int/char, whatever). </p>\n<p>Or in the case:</p>\n<pre><code>#define TEST_MACRO(x) (16*x)\n</code></pre>\n<p>Since 16 is a constant of type <code>int</code> most likely, would TEST_MACRO(70000) promote the whole thing to <code>long</code>? </p>\n", "Tags": "<c++><c><gcc><constants>", "OwnerUserId": "2446071", "AnswerCount": "3"}, "23958532": {"ParentId": "23958490", "CommentCount": "2", "Body": "<pre><code>#define SOME_DEF 500\n</code></pre>\n<p><code>500</code> has type <code>int</code>. The type of an unsuffixed decimal integer constant is <em>the first of the corresponding list in which its value can be represented</em>: <code>int</code>, <code>long</code>, <code>long long</code>.</p>\n<p>Then:</p>\n<pre><code>#define TEST_DEF   5000000/50\n#define TEST_DEF_2 5000000/50.0\n</code></pre>\n<p>Assuming <code>5000000</code> is of type <code>int</code> in your system then:</p>\n<ul>\n<li><code>5000000/50</code> is of type <code>int</code></li>\n<li><code>5000000/50.0</code> is of type <code>double</code></li>\n</ul>\n<p>Of course the fact that it is macro does not change anything as macros are just relatively simple textual substitutions.</p>\n<p>Finally, assuming <code>70000</code> is of type <code>int</code> then:</p>\n<p><code>16 * 70000</code> is also of type <code>int</code></p>\n", "OwnerUserId": "1119701", "PostTypeId": "2", "Id": "23958532", "Score": "5", "CreationDate": "2014-05-30T15:49:21.447", "LastActivityDate": "2014-05-30T15:49:21.447"}, "bq_ids": {"n4140": {"so_23958490_23959049_0": {"section_id": 5341, "quality": 0.8828828828828829, "length": 98}}, "n3337": {"so_23958490_23959049_0": {"section_id": 5138, "quality": 0.8828828828828829, "length": 98}}, "n4659": {"so_23958490_23959049_0": {"section_id": 6762, "quality": 0.8828828828828829, "length": 98}}}, "23958740": {"ParentId": "23958490", "CommentCount": "0", "Body": "<p>Not so elegant but possible is to cast:</p>\n<pre><code>#include &lt;inttypes.h&gt; /* For uint16_t */\n\n#define MYFLOAT ((float) 1)\n\n#define MYUNSIGNED16BITINT ((uint16_t) 42.)\n\n#define MYVOIDPOINTER ((void *) 0)\n</code></pre>\n", "OwnerUserId": "694576", "PostTypeId": "2", "Id": "23958740", "Score": "1", "CreationDate": "2014-05-30T15:59:42.693", "LastActivityDate": "2014-05-30T15:59:42.693"}});