post_cb({"13240708": {"ParentId": "13240141", "PostTypeId": "2", "CommentCount": "8", "Body": "<blockquote>\n<p id=\"so_13240141_13240708_0\">... because you can't forward declare class-templates?</p>\n</blockquote>\n<p>class templates can be forward declared - like non template classes:</p>\n<pre><code>// forward declaration\ntemplate &lt;typename T&gt;\nclass C;\n</code></pre>\n<p>However, as @AlexandreC stated in comments, for <code>std::string</code> it would be quite complicated, because <code>std::string</code> is typedef from <code>template &lt;typename,typename,typename&gt; basic_string;</code>. </p>\n<p>I write it would be complicated, if it would be allowed. And it is not allowed, see:</p>\n<ul>\n<li><a href=\"http://www.gotw.ca/gotw/034.htm\" rel=\"nofollow noreferrer\">http://www.gotw.ca/gotw/034.htm</a></li>\n<li><a href=\"https://stackoverflow.com/a/10290176/1463922\">https://stackoverflow.com/a/10290176/1463922</a></li>\n</ul>\n<p>According to the C++11 standard, 17.6.4.2.1:</p>\n<blockquote>\n<p id=\"so_13240141_13240708_1\">The behavior of a C++ program is undefined if it adds declarations or\n  definitions to namespace std or to a namespace within namespace std\n  unless otherwise specified.</p>\n</blockquote>\n<p>So, no choice but include <code>&lt;string&gt;</code> in header file for <code>std::string</code>.</p>\n<hr>\n<p>For your main question - I would include in source and header files, unless I was pretty sure it would be always included in header file and never removed...</p>\n</hr>", "OwnerUserId": "1463922", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:41.043", "Id": "13240708", "Score": "3", "CreationDate": "2012-11-05T21:30:41.933", "LastActivityDate": "2012-11-05T21:46:36.070"}, "bq_ids": {"n4140": {"so_13240141_13240708_1": {"section_id": 6299, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_13240141_13240708_1": {"section_id": 6056, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_13240141_13240708_1": {"section_id": 7808, "quality": 0.9285714285714286, "length": 13}}}, "13240141": {"CommentCount": "5", "AcceptedAnswerId": "13240708", "PostTypeId": "1", "ClosedDate": "2012-11-06T01:22:10.443", "LastEditorUserId": "-1", "CreationDate": "2012-11-05T20:49:29.397", "LastActivityDate": "2012-11-05T21:46:36.070", "LastEditDate": "2017-05-23T11:59:35.097", "ViewCount": "2133", "FavoriteCount": "1", "Title": "including (STL) header files in a header", "Id": "13240141", "Score": "3", "Body": "<blockquote>\n<p id=\"so_13240141_13240141_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4416765/reincluding-header-in-implementation\">reincluding header in implementation</a> </br></p>\n</blockquote>\n<p>What I am wondering is that it is common practice to not use <code>using namespace xxx</code> in a header file as not to pollute the global namespace.\nHow does this go for <code>#includes</code>?</p>\n<p>If I have <code>foo.h</code> and <code>foo.cpp</code>.:</p>\n<pre><code>//Foo.h\n#ifndef FOO_H_\n#define FOO_H_\n\n#include &lt;string&gt;\n\nclass Foo\n{\n  public:\n    Foo(std::string * a, std::string * b);\n    virtual ~Foo();\n};\n\n#endif /* FOO_H_ */\n\n//Foo.cpp\n#include &lt;string&gt;\n#include &lt;Foo.h&gt;\nFoo::Foo(std::string * a, std::string * b)\n{\n  // TODO Auto-generated constructor stub\n\n}\n\nFoo::~Foo()\n{\n  // TODO Auto-generated destructor stub\n}\n</code></pre>\n<p>Would I really need to <code>#include &lt;string&gt;</code> in both files? Would including it only in the .h or .cpp suffice? (I know both will work, but what is advisable?)</p>\n<hr>\n<p>edit, a bit more background information regarding my question.<br>\nIf I would be using certain classes in my header file (either as variables or method arguments) I would forward declare them in the header file and only include the header file itself in the source file. But this will not work for most STL libs because you can't forward declare class-templates?</br></p>\n</hr>", "Tags": "<c++>", "OwnerUserId": "574115", "AnswerCount": "1"}});