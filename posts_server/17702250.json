post_cb({"bq_ids": {"n4140": {"so_17702250_17703972_0": {"length": 23, "quality": 1.0, "section_id": 300}}, "n3337": {"so_17702250_17703972_0": {"length": 23, "quality": 1.0, "section_id": 291}}, "n4659": {"so_17702250_17703972_0": {"length": 23, "quality": 1.0, "section_id": 307}}}, "17703972": {"Id": "17703972", "PostTypeId": "2", "Body": "<p>From the standard, \u00a7 14.8.2:</p>\n<blockquote>\n<p id=\"so_17702250_17703972_0\">Type deduction may fail for the following reasons:\n      [...]\n      Attempting to use a type in a nested-name-specifier of a qualified-id\n      when that type does not contain the specified member, or the specified \n      member is not a type where a type is required [...]</p>\n</blockquote>\n<p>Both cases are handled in the same sentence, so from my understanding it really should not make a difference - both implementations should be equivalent.</p>\n", "LastActivityDate": "2013-07-17T15:28:07.117", "CommentCount": "2", "CreationDate": "2013-07-17T15:28:07.117", "ParentId": "17702250", "Score": "1", "OwnerUserId": "1056003"}, "17702250": {"ViewCount": "296", "Body": "<p>For educative reasons, I was playing around with the SFINAE behavior of C++ and building my own version of <code>std::enable_if</code> in a rather simplified form. I noticed different behavior when using slightly different implementation details though:</p>\n<p>Implementation as incomplete type:</p>\n<pre><code>template &lt;bool C, typename&gt; struct enable_if; // incomplete type\ntemplate &lt;typename T&gt; struct enable_if&lt;true, T&gt; { typedef T type; };\n</code></pre>\n<p>Implementation as empty type:</p>\n<pre><code>template &lt;bool C, typename&gt; struct enable_if {}; // empty type\ntemplate &lt;typename T&gt; struct enable_if&lt;true, T&gt; { typedef T type; };\n</code></pre>\n<p>On g++ (4.8.1 and 4.3.2) both versions compile and behave the same way. MSVC 2008 seems to only accept the definition as an empty type.</p>\n<p>Are both definitions valid C++, and should they be equivalent in behavior?</p>\n", "AcceptedAnswerId": "17703972", "Title": "Proper way to use SFINAE struct defintions", "CreationDate": "2013-07-17T14:16:48.170", "Id": "17702250", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-07-17T15:28:07.117", "Score": "3", "OwnerUserId": "2573221", "Tags": "<c++><sfinae>", "AnswerCount": "1"}});