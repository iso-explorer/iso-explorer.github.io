post_cb({"bq_ids": {"n4140": {"so_15862549_15862607_1": {"length": 8, "quality": 0.8, "section_id": 558}, "so_15862549_15862607_0": {"length": 13, "quality": 1.0, "section_id": 3241}}, "n3337": {"so_15862549_15862607_1": {"length": 8, "quality": 0.8, "section_id": 549}, "so_15862549_15862607_0": {"length": 13, "quality": 1.0, "section_id": 3114}}, "n4659": {"so_15862549_15862607_1": {"length": 8, "quality": 0.8, "section_id": 581}, "so_15862549_15862607_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 3997}}}, "15862607": {"Id": "15862607", "PostTypeId": "2", "Body": "<p>There is no difference between them. The first argument is a pointer to function type, while the other two are just two ways of writing the same function type. However, in the same way that array type arguments are adjusted to be pointers, function type arguments are adjusted to be pointers to functions. From C++11 \u00a78.3.5/5:</p>\n<blockquote>\n<p id=\"so_15862549_15862607_0\">After determining the type of each parameter, any parameter of type [...] \u201cfunction returning <code>T</code>\u201d is adjusted to be [...] \u201cpointer to function returning <code>T</code>,\u201d</p>\n</blockquote>\n<p>Or from C99 \u00a76.7.5.3/8:</p>\n<blockquote>\n<p id=\"so_15862549_15862607_1\">A declaration of a parameter as \u201cfunction returning <em>type</em>\u201d shall be adjusted to \u201cpointer to function returning <em>type</em>\u201d</p>\n</blockquote>\n<p>So the second and third function declarations have their argument type adjusted to be identical to the first.</p>\n<p>Note that you can put as many parentheses as you like around the identifier and it will still be the same function type:</p>\n<pre><code>void foo2 (int (((((pf)))))()) { pf(); }\n</code></pre>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-04-07T12:59:49.270", "Score": "7", "CreationDate": "2013-04-07T12:54:38.063", "ParentId": "15862549", "CommentCount": "4", "LastEditDate": "2013-04-07T12:59:49.270", "OwnerUserId": "150634"}, "15862549": {"ViewCount": "105", "Body": "<pre><code>int func ()\n{\n  printf(\"foo()\\n\"); \n  return 0;\n}\n\nvoid foo1 (int (*pf)()) { pf(); }\nvoid foo2 (int (pf)()) { pf(); }\nvoid foo3 (int pf()) { pf(); }\n\nint main ()\n{\n  foo1(func);\n  foo2(func);\n  foo3(func);\n}\n</code></pre>\n<p>What is the difference between the argument passed to <code>foo1()</code>, <code>foo2()</code> and <code>foo3()</code>.<br>\nAll 3 syntax <a href=\"http://ideone.com/Iu1X6m\" rel=\"nofollow\">compiles fine in g++</a> and behaves in a same way. Are all 3 called function pointer technically?<br>\nTagged with C as it applicable to that as well.</br></br></p>\n", "AcceptedAnswerId": "15862607", "Title": "Different function pointer syntax(s) as an argument to another function", "CreationDate": "2013-04-07T12:48:53.303", "Id": "15862549", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-04-07T12:59:49.270", "Score": "3", "OwnerUserId": "514235", "Tags": "<c++><c><syntax><function-pointers>", "AnswerCount": "1"}});