post_cb({"8982624": {"ParentId": "8982575", "CommentCount": "3", "Body": "<p>\u00a712.4.16 of the Standard says</p>\n<blockquote>\n<p id=\"so_8982575_8982624_0\">16 [ Note: the notation for explicit call of a destructor can be used for any scalar type \n  name (5.2.4). Allowing this makes it possible to write code without having to know if a \n  destructor exists for a given type. For example,</p>\n<pre><code>typedef int I;\nI* p;\np-&gt;I::~I();\n</code></pre>\n<p id=\"so_8982575_8982624_1\">\u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "726361", "PostTypeId": "2", "Id": "8982624", "Score": "4", "CreationDate": "2012-01-24T05:59:39.560", "LastActivityDate": "2012-01-24T05:59:39.560"}, "8982727": {"ParentId": "8982575", "CommentCount": "0", "Body": "<p>The relevant part of the standard is \u00a75.2.4/1:</p>\n<blockquote>\n<p id=\"so_8982575_8982727_0\">The use of a pseudo-destructor-name after a dot . or arrow -&gt; operator represents the destructor for the non-class type named by type-name. The result shall only be used as the operand for the function call operator (), and the result of such a call has type void. The only effect is the evaluation of the postfix expression before the dot or arrow.</p>\n</blockquote>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "8982727", "Score": "1", "CreationDate": "2012-01-24T06:13:16.213", "LastActivityDate": "2012-01-24T06:13:16.213"}, "8982575": {"CommentCount": "4", "AcceptedAnswerId": "8982624", "PostTypeId": "1", "ClosedDate": "2012-01-24T06:19:15.630", "LastEditorUserId": "-1", "CreationDate": "2012-01-24T05:53:02.053", "LastActivityDate": "2012-01-24T06:13:16.213", "LastEditDate": "2017-05-23T11:44:13.993", "ViewCount": "284", "FavoriteCount": "2", "Title": "Why exactly is this template function successfully compiling?", "Id": "8982575", "Score": "4", "Body": "<blockquote>\n<p id=\"so_8982575_8982575_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/456310/destructors-of-builtin-types-int-char-etc\">Destructors of builtin types (int, char etc..)</a> </br></p>\n</blockquote>\n<p>Template Function:</p>\n<pre><code>template&lt;typename T&gt; void kill(T* type)\n{\n    type-&gt;~T();\n}\n</code></pre>\n<p>Call:</p>\n<pre><code>int x= 5;\nkill(&amp;x);\n</code></pre>\n<p>woah, it compiled!? How can a primitive type like <code>int</code> have a destructor? It is also working with <code>char</code> , <code>bool</code> etc.</p>\n", "Tags": "<c++><templates><types><int><primitive-types>", "OwnerUserId": "753341", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8982575_8982727_0": {"section_id": 6002, "quality": 0.8125, "length": 26}, "so_8982575_8982624_0": {"section_id": 412, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_8982575_8982727_0": {"section_id": 5770, "quality": 0.8125, "length": 26}, "so_8982575_8982624_0": {"section_id": 403, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_8982575_8982727_0": {"section_id": 7501, "quality": 0.8125, "length": 26}, "so_8982575_8982624_0": {"section_id": 430, "quality": 0.8695652173913043, "length": 20}}}});