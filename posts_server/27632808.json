post_cb({"bq_ids": {"n4140": {"so_27632808_27633033_2": {"length": 9, "quality": 0.75, "section_id": 3228}}, "n3337": {"so_27632808_27633033_2": {"length": 10, "quality": 0.8333333333333334, "section_id": 3101}}, "n4659": {"so_27632808_27633033_2": {"length": 9, "quality": 0.75, "section_id": 3985}}}, "27633033": {"Id": "27633033", "PostTypeId": "2", "Body": "<p>It will always return false simply because arrays can't be declared to contain zero elements.  From the C++11 standard (I don't have a more recent standard handy and I don't expect this will have changed anyway):</p>\n<blockquote>\n<p id=\"so_27632808_27633033_0\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<p id=\"so_27632808_27633033_1\">\u00a0\u00a0\u00a0\u00a0<code>D1 [</code> <em>constant-expression<sub>opt</sub></em> <code>]</code> <em>attribute-specifier-seq<sub>opt</sub></em></p>\n<p id=\"so_27632808_27633033_2\">... If the <em>constant-expression</em> is present, it shall be an integral constant expression and its value shall be greater than zero. - \u00a78.3.4 [dcl.array]</p>\n</blockquote>\n<p>Therefore this overload would always return true in a conforming implementation.</p>\n", "LastEditorUserId": "501250", "LastActivityDate": "2014-12-24T07:39:46.523", "Score": "4", "CreationDate": "2014-12-24T07:14:57.337", "ParentId": "27632808", "CommentCount": "0", "LastEditDate": "2014-12-24T07:39:46.523", "OwnerUserId": "501250"}, "27632808": {"ViewCount": "70", "Body": "<p>The [accepted] standards paper <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4280\" rel=\"nofollow\">N4280</a> adds several new non-member functions to be folded into C++17.</p>\n<p>There are remarks indicating the proper return values for each of the new non-member functions, and in particular, the <code>std::empty</code> overload for fixed-size arrays confuses me. The paper suggests that the return value for that overload will always be <code>false</code>; that <em>all</em> fixed-sized arrays will never be empty.</p>\n<p>Why would this be the case? To my knowledge it is possible (though perhaps useless) to have a zero-sized array, as in <code>int x[0];</code>, which I would call empty.</p>\n<p>For reference, the particular overload I speak of is:</p>\n<pre><code>template &lt;class T, size_t N&gt; constexpr bool empty(const T (&amp;array)[N]) noexcept;\n</code></pre>\n", "AcceptedAnswerId": "27633033", "Title": "Return value of non-member std::empty overload for fixed-size arrays", "CreationDate": "2014-12-24T06:55:24.627", "Id": "27632808", "CommentCount": "4", "LastEditDate": "2015-01-31T03:50:40.023", "PostTypeId": "1", "LastEditorUserId": "103167", "LastActivityDate": "2015-01-31T03:50:40.023", "Score": "1", "OwnerUserId": "2843835", "Tags": "<c++><arrays><c++1z>", "AnswerCount": "1"}});