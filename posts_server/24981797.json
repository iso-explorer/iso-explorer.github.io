post_cb({"24981797": {"CommentCount": "14", "ViewCount": "54", "OwnerDisplayName": "user2953119", "CreationDate": "2014-07-27T14:10:43.933", "LastActivityDate": "2014-07-27T14:16:20.673", "Title": "Extending allocation of another new expression", "PostTypeId": "1", "Id": "24981797", "Score": "1", "Body": "<p>Section 5.3.4/10 of N3797 said:</p>\n<blockquote>\n<p id=\"so_24981797_24981797_0\">An implementation is allowed to omit a call to a replaceable global\n  allocation function (18.6.1.1, 18.6.1.2). When it does so, the storage\n  is instead provided by the implementation or provided by extending the\n  allocation of another new-expression.</p>\n</blockquote>\n<p>What does mean by extending? That is, we have amount of storage allocated by new expression <code>e1</code> (assume that it is 4 bytes). Let implementation omits to call an allocation function in new-expression <code>e2</code> and the storage provides by extending the allocation of e1. How does it affect to the storage provided by e1? Whether addresses provided to object <code>o1</code> created by <code>e1</code> and object <code>o2</code> created by <code>e2</code> intersects?</p>\n", "Tags": "<c++><memory-management>", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_24981797_24981797_0": {"section_id": 6091, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_24981797_24981797_0": {"section_id": 7587, "quality": 0.9047619047619048, "length": 19}}}});