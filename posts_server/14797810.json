post_cb({"14797812": {"Id": "14797812", "PostTypeId": "2", "Body": "<p>When you write <code>= {0}</code>, that only explicitly initialises <em>the first member</em>; the rest are zero-initialised implicitly according to the standard, so it <em>appears</em> at first glance that you explicitly initialised all members with the <code>0</code> that you wrote, <em>but you didn't</em>.</p>\n<p>That place where you wrote <code>0</code> only affects the first member. So when, one day, you changed it to <code>1</code> thinking that it'll change all members, you'll have a bug, like here. <em>It's misleading/dangerous/silly/fragile code.</em></p>\n<p>For that reason, without an accompanying explanatory comment, <code>= {0}</code> will not pass code review in my team. You should originally have written:</p>\n<pre><code>T t = {};\n</code></pre>\n<p>And now, to solve your problem according to the new requirements, you should write:</p>\n<pre><code>T t = {1,1,1};\n</code></pre>\n<p>or, if you don't mind your <code>struct</code> potentially losing POD-ness, give <code>T</code> a constructor.</p>\n<hr>\n<h3>Formal wording</h3>\n<blockquote>\n<p id=\"so_14797810_14797812_0\"><code>[C++11: 8.5.1/2]:</code> When an aggregate is initialized by an initializer list, as specified in 8.5.4, the elements of the initializer list are taken as initializers for the members of the aggregate, in increasing subscript or member order. Each member is copy-initialized from the corresponding <em>initializer-clause</em>. If the <em>initializer-clause</em> is an expression and a narrowing conversion (8.5.4) is required to convert the expression, the program is ill-formed. <em>[..]</em></p>\n<p id=\"so_14797810_14797812_1\"><code>[C++11: 8.5.1/6]:</code> An <em>initializer-list</em> is ill-formed if the number of <em>initializer-clauses</em> exceeds the number of members or elements to initialize.</p>\n<p id=\"so_14797810_14797812_2\"><code>[C++11: 8.5.1/7]:</code> <strong>If there are fewer <em>initializer-clauses</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from an empty initializer list</strong> (8.5.4).</p>\n</blockquote>\n</hr>", "LastEditorUserId": "560648", "LastActivityDate": "2013-02-10T12:49:45.600", "Score": "25", "CreationDate": "2013-02-10T12:37:36.607", "ParentId": "14797810", "CommentCount": "3", "OwnerUserId": "560648", "LastEditDate": "2013-02-10T12:49:45.600"}, "bq_ids": {"n4140": {"so_14797810_14797812_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3299}, "so_14797810_14797812_2": {"length": 17, "quality": 0.85, "section_id": 3304}, "so_14797810_14797812_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 3303}}, "n3337": {"so_14797810_14797812_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 3173}, "so_14797810_14797812_2": {"length": 17, "quality": 0.85, "section_id": 3174}, "so_14797810_14797812_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3169}}, "n4659": {"so_14797810_14797812_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 4069}, "so_14797810_14797812_2": {"length": 15, "quality": 0.75, "section_id": 4070}, "so_14797810_14797812_0": {"length": 25, "quality": 0.7352941176470589, "section_id": 4065}}}, "14797810": {"ViewCount": "2002", "Body": "<p>I had the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct T\n{\n   int a, b, c;\n};\n\nint main()\n{\n   T t = {0};\n   std::cout &lt;&lt; t.a &lt;&lt; ',' &lt;&lt; t.b &lt;&lt; ',' &lt;&lt; t.c &lt;&lt; '\\n';\n}\n</code></pre>\n<p><a href=\"https://ideone.com/JfLwX9\">Output</a>:</p>\n<pre><code>0,0,0\n</code></pre>\n<p>After many years of this code running happily in a critical production environment, serving a vital function, the requirements of the project changed and I needed the output to be <code>1,1,1</code>.</p>\n<p>So, I changed <code>{0}</code> to <code>{1}</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct T\n{\n   int a, b, c;\n};\n\nint main()\n{\n   T t = {1};\n   std::cout &lt;&lt; t.a &lt;&lt; ',' &lt;&lt; t.b &lt;&lt; ',' &lt;&lt; t.c &lt;&lt; '\\n';\n}\n</code></pre>\n<p><a href=\"https://ideone.com/GPYIOn\">Output</a>:</p>\n<pre><code>1,0,0\n</code></pre>\n<p>I expected <code>1,1,1</code> instead.</p>\n<p>Why are my <code>struct</code>'s members not all being initialised properly?</p>\n", "AcceptedAnswerId": "14797812", "Title": "Why are my struct's members not properly initialised using `{}`?", "CreationDate": "2013-02-10T12:37:36.607", "Id": "14797810", "CommentCount": "6", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2013-02-10T12:55:20.700", "LastEditorUserId": "147192", "LastActivityDate": "2013-02-10T12:55:20.700", "ClosedDate": "2013-02-10T22:58:50.513", "Score": "12", "OwnerUserId": "560648", "Tags": "<c++><initialization><c++-faq>", "AnswerCount": "1"}});