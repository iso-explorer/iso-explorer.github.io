post_cb({"10401005": {"ParentId": "10400890", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As long as the classes involved have at least one virtual method (which could be a virtual destructor), using <code>dynamic_cast</code> as you are is both correct and will work on a conforming compiler.  </p>\n<p>Unlike <code>static_cast</code>, <code>dynamic_cast</code> can allow runtime checking of type information.  However, this also means that it can fail, and return a <code>NULL</code> when using it to cast pointers.  The cast result should be checked if there is any chance it might not succeed.</p>\n<p>In the previous question you asked, the classes did not have any virtual methods, and as such, would not work, since <code>dynamic_cast</code> cannot be used on such a class.</p>\n", "OwnerUserId": "862231", "LastEditorUserId": "862231", "LastEditDate": "2012-05-01T16:45:33.307", "Id": "10401005", "Score": "2", "CreationDate": "2012-05-01T16:39:00.980", "LastActivityDate": "2012-05-01T16:45:33.307"}, "10400974": {"ParentId": "10400890", "CommentCount": "3", "Body": "<p>If <code>dynamic_cast</code> succeed then it is valid. It already perform a type safety check at runtime.</p>\n", "OwnerUserId": "1122645", "PostTypeId": "2", "Id": "10400974", "Score": "0", "CreationDate": "2012-05-01T16:36:29.093", "LastActivityDate": "2012-05-01T16:36:29.093"}, "10401018": {"ParentId": "10400890", "CommentCount": "0", "Body": "<p>Consider the following:</p>\n<pre><code>Base *b = new B();\nInterface *i = dynamic_cast&lt;Interface *&gt;( b );\n</code></pre>\n<p>Should this work? No. Why, because <code>Base</code> and <code>Interface</code> are not related to each other. However, in the special case where a pointer to <code>Base</code> is pointing to an object which is also derived from <code>Interface</code> you can cast (read: coax the compiler into considering the object to be of type <code>Interface</code>) the <code>Base</code> pointer and use the result of the <code>dynamic_cast</code> operator further.</p>\n", "OwnerUserId": "66692", "PostTypeId": "2", "Id": "10401018", "Score": "0", "CreationDate": "2012-05-01T16:40:00.063", "LastActivityDate": "2012-05-01T16:40:00.063"}, "10401003": {"ParentId": "10400890", "CommentCount": "5", "Body": "<p>It is valid code.    </p>\n<p><strong>Why?</strong><br>\nBecause <code>dynamic_cast</code> tells you if the object being pointed to is actually of the type you are casting to.<br>\nIn this case the actual object being pointed to is of the type <code>Derived</code> and each object of the type <code>Derived</code> is also of the type <code>Interface</code>(Since <code>Derived</code> inherits from <code>Interface</code>) and hence the <code>dynamic_cast</code> is valid and it works.</br></br></p>\n", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "10401003", "Score": "4", "CreationDate": "2012-05-01T16:38:40.593", "LastActivityDate": "2012-05-01T16:38:40.593"}, "10401083": {"ParentId": "10400890", "CommentCount": "0", "Body": "<p>Your code is valid because the standard says so in 5.2.7 paragraph 4 (C++ 2003 standard):</p>\n<blockquote>\n<p id=\"so_10400890_10401083_0\">The run-time check logically executes as follows:</p>\n<p id=\"so_10400890_10401083_1\">\u2014 If, in the most derived object pointed (referred) to by v, v points (refers) to a public base class sub- object of a T object, and if only one object of type T is derived from the sub-object pointed (referred) to by v, the result is a pointer (an lvalue referring) to that T object.</p>\n<p id=\"so_10400890_10401083_2\">\u2014 Otherwise, if v points (refers) to a public base class sub-object of the most derived object, and the type of the most derived object has a base class, of type T, that is unambiguous and public, the result is a pointer (an lvalue referring) to the T sub-object of the most derived object.</p>\n<p id=\"so_10400890_10401083_3\">\u2014 Otherwise, the run-time check fails.</p>\n</blockquote>\n<p>Note the use of \"most derived object\" in the run-time checks. In your example, the \"most derived object\" for your <code>Base *b</code> object is a <code>Derived</code> object. Since class <code>Derived</code> inherits publicly from both <code>Base</code> and <code>Interface</code>, that <code>Base*</code> object can be cast to a <code>Interface*</code> in this particular case.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "10401083", "Score": "0", "CreationDate": "2012-05-01T16:45:29.667", "LastActivityDate": "2012-05-01T16:45:29.667"}, "10400890": {"CommentCount": "1", "ViewCount": "4387", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-05-01T16:31:18.143", "LastActivityDate": "2012-05-01T16:45:33.307", "Title": "c++ checking at runtime if object implements interface", "AcceptedAnswerId": "10401003", "LastEditDate": "2017-05-23T12:11:27.927", "Id": "10400890", "Score": "3", "Body": "<p>I'v asked these question some time ago:\n<a href=\"https://stackoverflow.com/questions/7426422/multiple-inheritance-casting-from-base-class-to-different-derived-class\">Multiple inheritance casting from base class to different derived class</a></p>\n<p>But I'm still not sure I understand the answer. <strong>The question is: Is the code below valid?</strong></p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Base\n{\n    virtual void printName() \n    {\n        cout &lt;&lt; \"Base\" &lt;&lt; endl;\n    }\n};\n\nstruct Interface\n{\n    virtual void foo()\n    {\n        cout &lt;&lt; \"Foo function\" &lt;&lt; endl;\n    }\n};\n\nstruct Derived : public Base, public Interface\n{\n    virtual void printName()\n    {\n        cout &lt;&lt; \"Derived\" &lt;&lt; endl;\n    }\n};\n\nint main(int argc, const char * argv[])\n{\n    Base *b = new Derived();\n    Interface *i = dynamic_cast&lt;Interface*&gt;(b);\n    i-&gt;foo();\n\n    return 0;\n}\n</code></pre>\n<p>The code works as I want. But as I understand, according to previous question, it should not. So I'm not sure if such code is valid. Thanks!</p>\n", "Tags": "<c++><casting><multiple-inheritance>", "OwnerUserId": "444088", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_10400890_10401083_1": {"section_id": 6018, "quality": 0.8, "length": 20}, "so_10400890_10401083_2": {"section_id": 6018, "quality": 0.8888888888888888, "length": 24}, "so_10400890_10401083_0": {"section_id": 6018, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_10400890_10401083_1": {"section_id": 5786, "quality": 0.8, "length": 20}, "so_10400890_10401083_2": {"section_id": 5786, "quality": 0.8888888888888888, "length": 24}, "so_10400890_10401083_0": {"section_id": 5786, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_10400890_10401083_1": {"section_id": 7517, "quality": 0.8, "length": 20}, "so_10400890_10401083_2": {"section_id": 7517, "quality": 0.8888888888888888, "length": 24}, "so_10400890_10401083_0": {"section_id": 7517, "quality": 0.8333333333333334, "length": 5}}}});