post_cb({"13446917": {"ViewCount": "130", "Body": "<p>In my assignment, it says \"Do not add long int or long long private members to accomplish this as there is no guarantee that either can actually store larger numbers than an int.\" I know that int has a maximum of 2^31-1 and long long has a maximum of 2^63-1. So can someone give me an example to me why the given sentence is true?</p>\n<p>Thanks in advance!</p>\n", "AcceptedAnswerId": "13446924", "Title": "long long might not store integer?", "CreationDate": "2012-11-19T02:33:44.163", "Id": "13446917", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2012-11-19T03:01:28.120", "Score": "4", "OwnerUserId": "1744217", "Tags": "<c++>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13446917_13446924_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 7211}}, "n3337": {"so_13446917_13446924_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 6955}}, "n4659": {"so_13446917_13446924_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 8720}}}, "13447076": {"Id": "13447076", "PostTypeId": "2", "Body": "<p>The C standard specifies two relevant criteria:</p>\n<ul>\n<li><p><code>sizeof(char) \u2264 sizeof(short) \u2264 sizeof(int) \u2264 sizeof(long) \u2264 sizeof(long long) \u2264 sizeof(uintmax_t)</code></p>\n<p>This is specified indirectly in ISU/IEC 9899:2011, \u00a76.2.5 Types, \u00b68: <em>For any two integer types with the same signedness and different integer conversion rank\n(see 6.3.1.1), the range of values of the type with smaller integer conversion rank is a\nsubrange of the values of the other type.</em></p></li>\n<li><p>The minimum permitted value for the maxima of the types (ISO/IEC 9899:2011, \u00a75.2.4.2.1 Sizes of integer types <code>&lt;limits.h&gt;</code>):</p>\n<ul>\n<li><code>SCHAR_MAX</code> \u2265 127 // 2<sup>7</sup>-1</li>\n<li><code>SHRT_MAX</code> \u2265 32,767 // 2<sup>15</sup>-1</li>\n<li><code>INT_MAX</code> \u2265 32,767 // 2<sup>15</sup>-1</li>\n<li><code>LONG_MAX</code> \u2265 2,147,483,647 // 2<sup>31</sup>-1</li>\n<li><code>LLONG_MAX</code> \u2265 9,223,372,036,854,775,807 // 2<sup>63</sup>-1</li>\n</ul></li>\n</ul>\n<p>The quote is formally correct; it is possible to devise systems where <code>long</code> does not store a larger range than <code>int</code> \u2014 indeed, this is the case on most 32-bit systems (all the ones I know of), and also true on Windows 64.  It is less likely to be accurate w.r.t <code>long long</code>; I know of no system where <code>sizeof(int) == sizeof(long long)</code> (and, because of the inequality quoted, <code>sizeof(int) == sizeof(long)</code>).  On most Unix 64-bit systems, <code>sizeof(int) == 4</code>, <code>sizeof(long) == 8</code>, and <code>sizeof(long long) == 8</code>; on Windows 64, <code>sizeof(long) == 4</code> and only <code>long long</code> (or <code>__int64</code>) is a 64-bit type.</p>\n", "LastActivityDate": "2012-11-19T03:01:28.120", "CommentCount": "2", "CreationDate": "2012-11-19T03:01:28.120", "ParentId": "13446917", "Score": "2", "OwnerUserId": "15168"}, "13446924": {"Id": "13446924", "PostTypeId": "2", "Body": "<p>It means exactly what it says. There's no guarantee that a <code>long long</code> can store more numbers than an <code>int</code>. It's <em>at least as big</em>, but it can be the same.</p>\n<blockquote>\n<p id=\"so_13446917_13446924_0\">I know that int has a maximum of 2^31-1 and long long has a maximum of 2^63-1</p>\n</blockquote>\n<p>This can be true for some platform, with some compiler, but it's not always the same. C++ doesn't guarantee either.</p>\n<h3>3.9.1 Fundamental types [basic.fundamental]</h3>\n<blockquote>\n<p id=\"so_13446917_13446924_1\">2) There are five standard signed integer types : \u201c<code>signed char</code>\u201d,\n  \u201c<code>short int</code>\u201d, \u201c<code>int</code>\u201d, \u201c<code>long int</code>\u201d, and \u201c<code>long long int</code>\u201d. In this list,\n  <strong>each type provides at least as much storage as those preceding it</strong> in\n  the list. [...] (emphasis mine)</p>\n</blockquote>\n", "LastEditorUserId": "673730", "LastActivityDate": "2012-11-19T02:41:32.047", "Score": "7", "CreationDate": "2012-11-19T02:35:08.917", "ParentId": "13446917", "CommentCount": "23", "OwnerUserId": "673730", "LastEditDate": "2012-11-19T02:41:32.047"}});