post_cb({"13642827": {"CommentCount": "2", "AcceptedAnswerId": "13643019", "PostTypeId": "1", "LastEditorUserId": "499359", "CreationDate": "2012-11-30T09:58:56.813", "LastActivityDate": "2013-04-17T10:20:33.763", "LastEditDate": "2013-04-17T10:20:33.763", "ViewCount": "30832", "FavoriteCount": "19", "Title": "<cstdint> vs <stdint.h>", "Id": "13642827", "Score": "56", "Body": "<p>What is the difference between <code>stdint.h</code> and <code>cstdint</code>?</p>\n<p>Both of them are available in MSVC (Visual Studio 2010) and gcc-4.5.1. Also both define the <code>intX_t</code>/<code>uintX_t</code> types (where <code>X</code> is the size in bytes of the type).</p>\n<ul>\n<li>If the rationale in both headers is the same (portable types), what decisions I must take to decide on one or the other?</li>\n</ul>\n<p>The <code>stdint.h</code> defines each type without any namespace, the <code>cstdint</code> types lies in the <code>std</code> namespace.</p>\n<ul>\n<li>Is there any reason to include or to not include the defined types into the <code>std</code> namespace? What is different between the two headers?</li>\n</ul>\n<p><code>cstdint</code> has no file extension and uses the <code>c</code> prefix, <code>stdint.h</code> uses the <code>.h</code> extension.</p>\n<ul>\n<li>What are the naming conventions for this headers? the <code>c</code> prefix indicates that this is a C library? there's a reason for the lack of file extension in <code>cstdint</code>?</li>\n</ul>\n", "Tags": "<c++><stdint><cstdint>", "OwnerUserId": "499359", "AnswerCount": "3"}, "13642921": {"ParentId": "13642827", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Including <code>cstdint</code> imports the symbol names in std namespace and <em>possibly</em> in Global namespace.<br>\nIncluding <code>stdint.h</code> imports the symbol names in Global namespace and <em>possibly</em> in std namespace.       </br></p>\n<p>Features of C standard Library are also provided in the C++ Standard library and as a general naming convention they are pre-pended by an c to the corresponding names in C standard library.</p>\n<p>In C++, You should be using:     </p>\n<pre><code>#include &lt;cstdint&gt;\n</code></pre>\n<p>and fully qualify the symbol names you use with <code>std::</code><br>\nwhile in C, You should use:</br></p>\n<pre><code>#include &lt;stdint.h&gt;\n</code></pre>\n<hr>\n<p><strong>Annex D (normative) Compatibility features [depr]</strong> states:      </p>\n<p><strong>D.6 C standard library headers</strong> </p>\n<blockquote>\n<p id=\"so_13642827_13642921_0\">1 For compatibility with the C standard library and the C Unicode TR, the C++ standard library provides the 25 C headers, as shown in Table 151.</p>\n</blockquote>\n<p>Which include:         </p>\n<blockquote>\n<p id=\"so_13642827_13642921_1\"><code>&lt;assert.h&gt; &lt;float.h&gt; &lt;math.h&gt; &lt;stddef.h&gt; &lt;tgmath.h&gt;</code>\n<code>&lt;complex.h&gt; &lt;inttypes.h&gt; &lt;setjmp.h&gt; &lt;stdio.h&gt; &lt;time.h&gt;</code>\n<code>&lt;ctype.h&gt; &lt;iso646.h&gt; &lt;signal.h&gt; &lt;stdint.h&gt; &lt;uchar.h&gt;</code>\n<code>&lt;errno.h&gt; &lt;limits.h&gt; &lt;stdarg.h&gt; &lt;stdlib.h&gt; &lt;wchar.h&gt;</code>\n<code>&lt;fenv.h&gt; &lt;locale.h&gt; &lt;stdbool.h&gt; &lt;string.h&gt; &lt;wctype.h&gt;</code></p>\n</blockquote>\n<p>And further,    </p>\n<blockquote>\n<p id=\"so_13642827_13642921_2\">2   <strong>Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname header</code> is placed within the global namespace scope.</strong> It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace std and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</p>\n<p id=\"so_13642827_13642921_3\">3 [ Example: The header <code>&lt;cstdlib&gt;</code> assuredly provides its declarations and definitions within the namespace std. It may also provide these names within the global namespace. The header <code>&lt;stdlib.h&gt;</code> assuredly provides the same declarations and definitions within the global namespace, much as in the C Standard. It may also provide these names within the namespace std. \u2014end example ]</p>\n</blockquote>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2012-11-30T10:20:08.943", "Id": "13642921", "Score": "13", "CreationDate": "2012-11-30T10:03:08.900", "LastActivityDate": "2012-11-30T10:20:08.943"}, "13643019": {"ParentId": "13642827", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The original intention in C++98 was that you should use <code>&lt;cstdint&gt;</code> in C++, to avoid polluting the global namespace (well, not <code>&lt;cstdint&gt;</code> in particular, that's only added in C++11, but the <code>&lt;c*&gt;</code> headers in general).</p>\n<p>However, implementations persisted in putting the symbols into the global namespace anyway, and C++11 ratified this practice[*]. So, you basically have three options:</p>\n<ul>\n<li>Use <code>&lt;cstdint&gt;</code> and either fully qualify each integer type you use or else bring it into scope with <code>using std::int32_t;</code> etc (annoying because verbose, but it's the right way to do it just like for any other symbol in the C++ standard library)</li>\n<li>Use <code>&lt;stdint.h&gt;</code> (slightly bad because deprecated)</li>\n<li>Use <code>&lt;cstdint&gt;</code> and assume your implementation will put the symbols in the global namespace (very bad because not guaranteed).</li>\n</ul>\n<p>In practice I suspect that an annoying large amount of code uses the last option, simply because it's easy to do by accident on an implementation where <code>&lt;cstdint&gt;</code> puts the symbols in the global namespace. You should try to use the first. The second has one virtue, that it is <em>guaranteed</em> to put stuff in the global namespace instead of only maybe doing it. I don't think that's particularly useful, but it might save some typing if that's your priority.</p>\n<p>There's a fourth option, <code>#include &lt;cstdint&gt;</code> followed by <code>using namespace std;</code> which is sometimes useful but there are places that you shouldn't put the <code>using namespace std;</code>. Different people will have different ideas where those places are, but \"at top level in a header file\" is worse than \"at top level in a cpp file\", which is worse than \"in a limited scope\". Some people never write <code>using namespace std;</code> at all.</p>\n<p>[*] That means C++ standard headers are permitted to put stuff in the global namespace but not required to. So you have to avoid colliding with those symbols, but you can't actually use them because they might not be there. Basically, the global namespace in C++ is a minefield, try to avoid it. One might argue that the committee has ratified a practice by implementations that is nearly as harmful as sticking <code>using namespace std;</code> at top level in a header file -- the difference being that the implementations only do it for symbols in the C standard library, whereas <code>using namespace std;</code> does it for C++-only symbols too. There's a section in the C standard that lists names reserved for future additions to the standard. It's not a completely stupid idea to treat those names as reserved in the C++ global namespace too, but it's not essential.</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2012-11-30T11:15:30.207", "Id": "13643019", "Score": "85", "CreationDate": "2012-11-30T10:08:03.087", "LastActivityDate": "2012-11-30T11:15:30.207"}, "bq_ids": {"n4140": {"so_13642827_13642921_0": {"section_id": 4906, "quality": 0.7, "length": 7}, "so_13642827_13642921_2": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}, "so_13642827_13642921_3": {"section_id": 4908, "quality": 0.8536585365853658, "length": 35}}, "n3337": {"so_13642827_13642921_0": {"section_id": 4701, "quality": 0.7, "length": 7}, "so_13642827_13642921_2": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}, "so_13642827_13642921_3": {"section_id": 4703, "quality": 0.8536585365853658, "length": 35}}, "n4659": {"so_13642827_13642921_2": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}, "so_13642827_13642921_3": {"section_id": 6317, "quality": 0.8536585365853658, "length": 35}}}, "13642936": {"ParentId": "13642827", "CommentCount": "6", "Body": "<ol>\n<li><p><code>cstdint</code> is C++11 header, <code>stdint.h</code> is C99 header (C and C++ are different languages!)</p></li>\n<li><p>MSVC 2008 doesn't contain neither <code>stdint.h</code> nor <code>cstdint</code>.</p></li>\n<li><p>Implementations of <code>cstdint</code> are mostly simply <code>#include &lt;stdint.h&gt;</code> with some namespace/language fixes.</p></li>\n</ol>\n", "OwnerUserId": "1317074", "PostTypeId": "2", "Id": "13642936", "Score": "0", "CreationDate": "2012-11-30T10:03:59.773", "LastActivityDate": "2012-11-30T10:03:59.773"}});