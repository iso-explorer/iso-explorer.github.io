post_cb({"15599599": {"ParentId": "15599498", "CommentCount": "1", "CreationDate": "2013-03-24T14:22:04.930", "OwnerUserId": "2204666", "PostTypeId": "2", "Id": "15599599", "Score": "1", "Body": "<p>I think  <strong>__median</strong> function in <strong>&lt; algorithm &gt;</strong> header is easier.</p>\n<pre><code>med = __median(a, b, c);\n</code></pre>\n", "LastActivityDate": "2013-03-24T14:22:04.930"}, "15599572": {"ParentId": "15599498", "CommentCount": "0", "CreationDate": "2013-03-24T14:19:42.053", "OwnerUserId": "581903", "PostTypeId": "2", "Id": "15599572", "Score": "0", "Body": "<p>When you clear the <code>vector</code> you are setting the size to 0. The <code>scanf</code> line will ususally not crash since the <code>vector</code> will usually have preallocated some storage where the read values are stored. The result is that when you call <code>sort</code>, <code>begin()</code> and <code>end()</code> will be equal.</p>\n<p>You can try either reading the values into temporaries, or calling <code>resize(3)</code> before reading the vaules. </p>\n", "LastActivityDate": "2013-03-24T14:19:42.053"}, "15599498": {"CommentCount": "0", "ViewCount": "151", "PostTypeId": "1", "LastEditorUserId": "139781", "CreationDate": "2013-03-24T14:12:46.180", "LastActivityDate": "2013-03-24T18:27:51.257", "Title": "STL sort not working", "AcceptedAnswerId": "15599511", "LastEditDate": "2013-03-24T18:27:51.257", "Id": "15599498", "Score": "0", "Body": "<pre><code>for (i = 0; i &lt; t; i++)\n{\n  values.clear();\n\n  scanf(\"%d %d %d\", &amp;values[0], &amp;values[1], &amp;values[2]);\n  printf(\"%d %d %d\\n\", values[0], values[1], values[2]);\n  sort(values.begin(), values.end());\n  printf(\"%d %d %d\\n\", values[0], values[1], values[2]);\n\n  printf(\"Case %d: %d\\n\", i + 1, values[1]);\n}\n</code></pre>\n<p>I have that small snippet. I enter \"1200 1500 1800\" and it is supposed to give me the middle value - 1500. However, it's outputting 1200, the smallest value.</p>\n<p>What I do is I use STL's sort() to sort the vector and then I print values[1], which is the middle value.</p>\n<p>However, the sort() doesn't seem to be working at all, the printed vector before and after is the same thing.</p>\n<p>I declare my vector with:</p>\n<pre><code>vector&lt;int&gt; values (3);\n</code></pre>\n<p>I tried to declare it with <code>vector&lt;int&gt; values;</code> and then <code>push_back(0)</code> three times and it.</p>\n<p>I'm wondering why it doesn't work the first way, though.</p>\n", "Tags": "<c++><sorting><stl>", "OwnerUserId": "996056", "AnswerCount": "5"}, "15599515": {"ParentId": "15599498", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-03-24T14:15:00.647", "Score": "6", "LastEditorUserId": "1932150", "LastEditDate": "2013-03-24T14:26:22.440", "Id": "15599515", "OwnerUserId": "1932150", "Body": "<p>Your program has <strong>Undefined Behavior</strong>.</p>\n<p>In order to fix it, just remove this line:</p>\n<pre><code>values.clear();\n</code></pre>\n<p>What the above line does, in fact, is to <strong>erase all elements from the vector</strong>. Then, this line:</p>\n<pre><code>scanf(\"%d %d %d\", &amp;values[0], &amp;values[1], &amp;values[2]);\n                   ^^^^^^^^^   ^^^^^^^^^   ^^^^^^^^^\n</code></pre>\n<p>Will try to access non-existing elements. Unlike <code>operator []</code> for associative containers, <code>operator []</code> for vectors won't create any new element. Thus, the expressions <code>values[0]</code>, <code>values[1]</code>, and <code>values[2]</code> are all attempts to access non-existing elements.</p>\n<p>Per Table 101 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15599498_15599515_0\"><em>Expression</em>: <code>a[n]</code></p>\n<p id=\"so_15599498_15599515_1\"><em>Return type</em>: reference; <code>const_reference</code> for constant <code>a</code></p>\n<p id=\"so_15599498_15599515_2\"><em>Operational semantics</em>: <strong><code>*(a.begin() + n)</code></strong></p>\n</blockquote>\n<p>This means that by doing this:</p>\n<pre><code>values[0]\n</code></pre>\n<p>You are actually doing this:</p>\n<pre><code>*(values.begin() + 0)\n</code></pre>\n<p>The call to <code>values.begin()</code> here returns an iterator to the first element in the array. Since there is no element in the vector (\u00a7 23.2.1/6), a call to <code>values.begin()</code> is equivalent to a call to <code>values.end()</code>:</p>\n<blockquote>\n<p id=\"so_15599498_15599515_3\"><code>begin()</code> returns an iterator referring to the first element in the container. <code>end()</code> returns an iterator which\n  is the past-the-end value for the container. If the container is empty, then <code>begin() == end()</code>;</p>\n</blockquote>\n<p>Therefore, <code>values[0]</code> in your case is actually equivalent to this:</p>\n<pre><code>*(values.end() + 0)\n</code></pre>\n<p>Which is in turn equivalent to this:</p>\n<pre><code>*(values.end())\n</code></pre>\n<p>In other words, you are dereferencing an iterator that points to a position beyond the last element in the container. This is Undefined Behavior, and the same applies of course to <code>values[1]</code> and <code>values[2]</code>.</p>\n", "LastActivityDate": "2013-03-24T14:26:22.440"}, "15599586": {"ParentId": "15599498", "CommentCount": "0", "CreationDate": "2013-03-24T14:21:21.730", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "15599586", "Score": "0", "Body": "<p>Your attempt to clear out the actual existing elements with <code>values.clear();</code> is actually removing them from the vector completely. This has the effect of making <code>begin()</code> and <code>end()</code> equal, causing the sort to have no effect (and the input where you take the address of the various elements to have undefined behavior).</p>\n<p>I think what you really wanted to do was make sure that there aren't too many elements in the vector, so instead of <code>clear</code> use <code>resize</code>: <code>values.resize(3)</code> which will have the effect of removing excess elements or increasing the size of the vector to three if it's currently smaller.</p>\n", "LastActivityDate": "2013-03-24T14:21:21.730"}, "15599511": {"ParentId": "15599498", "CommentCount": "0", "CreationDate": "2013-03-24T14:14:28.920", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "15599511", "Score": "5", "Body": "<pre><code>values.clear();\n</code></pre>\n<p>This clears <code>values</code> so that it contains no elements any more. Attempting to access any elements will result in undefined behaviour and the <code>std::sort</code> will simply sort the empty sequence of numbers.</p>\n<p>The definition of <code>a.clear()</code> where <code>a</code> is a sequence container is:</p>\n<blockquote>\n<p id=\"so_15599498_15599511_0\">Destroys all elements in <code>a</code>. Invalidates all references, pointers, and iterators referring to the elements of <code>a</code> and may invalidate the past-the-end iterator.<br>\n<em>post</em>: <code>a.empty()</code> returns true</br></p>\n</blockquote>\n", "LastActivityDate": "2013-03-24T14:14:28.920"}, "bq_ids": {"n4140": {"so_15599498_15599515_3": {"section_id": 707, "quality": 1.0, "length": 18}, "so_15599498_15599511_0": {"section_id": 723, "quality": 1.0, "length": 18}, "so_15599498_15599515_1": {"section_id": 735, "quality": 0.8, "length": 4}}, "n3337": {"so_15599498_15599515_3": {"section_id": 697, "quality": 1.0, "length": 18}, "so_15599498_15599511_0": {"section_id": 712, "quality": 1.0, "length": 18}, "so_15599498_15599515_1": {"section_id": 724, "quality": 0.8, "length": 4}}, "n4659": {"so_15599498_15599515_3": {"section_id": 736, "quality": 1.0, "length": 18}, "so_15599498_15599515_1": {"section_id": 764, "quality": 0.8, "length": 4}, "so_15599498_15599511_0": {"section_id": 754, "quality": 0.9444444444444444, "length": 17}}}});