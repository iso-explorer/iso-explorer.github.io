post_cb({"bq_ids": {"n4140": {"so_28235632_28235632_3": {"length": 9, "quality": 0.5294117647058824, "section_id": 744}, "so_28235632_28235632_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 744}}, "n3337": {"so_28235632_28235632_3": {"length": 9, "quality": 0.5294117647058824, "section_id": 733}, "so_28235632_28235632_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 733}}, "n4659": {"so_28235632_28235632_3": {"length": 10, "quality": 0.5882352941176471, "section_id": 802}, "so_28235632_28235632_4": {"length": 6, "quality": 0.5454545454545454, "section_id": 802}, "so_28235632_28235632_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 802}}}, "28236648": {"Id": "28236648", "PostTypeId": "2", "Body": "<p>It depends on the version of C++ you're using.  Before C++11, the only\nway to get an element into a vector was by copying:</p>\n<pre><code>std::vector&lt;T&gt; v( 10 );\n</code></pre>\n<p>was the equivalent of:</p>\n<pre><code>std::vector&lt;T&gt; v( 10, T() );\n</code></pre>\n<p>with the default constructed <code>T</code> copied 10 times.  C++11 changed this,\nand the first form is required to default construct <code>T</code> 10 times,\nwithout any copying.</p>\n", "LastActivityDate": "2015-01-30T13:09:19.620", "Score": "3", "CreationDate": "2015-01-30T13:09:19.620", "ParentId": "28235632", "CommentCount": "0", "OwnerUserId": "649665"}, "28235688": {"Id": "28235688", "PostTypeId": "2", "Body": "<p>Yes, that is how vector works.</p>\n<p>You misread the cplusplus.com wording. It says \"fill constructor Constructs a container with n elements. Each element is a copy of <code>val</code> (if provided)\"; you can't get away from that. But you <em>don't</em> provide <code>val</code>!</p>\n<p>We can trivially demonstrate with the following simple code that copies are not (or, at least, do not need to be) made when the elements are default-constructed:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nstruct T\n{\n    T() { std::cout &lt;&lt; \"def-cons\\n\"; }\n    ~T() { std::cout &lt;&lt; \"dest\\n\"; }\n    T(const T&amp;) = delete;\n};\n\nint main()\n{\n    std::vector&lt;T&gt; v(5);\n}\n</code></pre>\n<h3>(<a href=\"http://coliru.stacked-crooked.com/a/9cd1270335073505\" rel=\"nofollow\">live demo</a>)</h3>\n<p>The standard itself is clear that the elements need only be default-constructible, no copyability required:</p>\n<blockquote>\n<p id=\"so_28235632_28235688_0\"><code>[C++11: 23.3.6.2]:</code> <code>explicit vector(size_type n);</code></p>\n<ol start=\"3\">\n<li>Effects: Constructs a <code>vector</code> with <code>n</code> value-initialized elements.  </li>\n<li>Requires: <strong><code>T</code> shall be <code>DefaultConstructible</code>.</strong></li>\n<li>Complexity: Linear in <code>n</code>.</li>\n</ol>\n</blockquote>\n", "LastActivityDate": "2015-01-30T12:12:42.413", "Score": "4", "CreationDate": "2015-01-30T12:12:42.413", "ParentId": "28235632", "CommentCount": "0", "OwnerUserId": "560648"}, "28235632": {"ViewCount": "470", "Body": "<p>Is there a way to create a vector of N elements <strong>without</strong> calling the copy constructor and instead calling the elements' default constructor? I do not want a copy constructor for the elements because copying should be prevented.</p>\n<p>Here it looks like you can, option 3:</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/vector\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/vector</a></p>\n<blockquote>\n<p id=\"so_28235632_28235632_0\">3) Constructs the container with count default-inserted instances of\n  T. <strong>No copies are made</strong>.</p>\n</blockquote>\n<p>but here it looks like you cannot:</p>\n<p><a href=\"http://www.cplusplus.com/reference/vector/vector/vector/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/vector/</a></p>\n<blockquote>\n<ol>\n<li><p id=\"so_28235632_28235632_1\">empty container constructor (default constructor) Constructs an empty container, with no elements.</p></li>\n<li><p id=\"so_28235632_28235632_2\">fill constructor Constructs a container with n elements. Each element is a copy of val (if provided).</p></li>\n<li><p id=\"so_28235632_28235632_3\">range constructor Constructs a container with as many elements as the range [first,last), with each element emplace-constructed from its\n  corresponding element in that range, in the same order.</p></li>\n<li><p id=\"so_28235632_28235632_4\">copy constructor (and copying with allocator) Constructs a container with a copy of each of the elements in x, in the same order.</p></li>\n<li><p id=\"so_28235632_28235632_5\">move constructor (and moving with allocator) Constructs a container that acquires the elements of x. If alloc is specified and\n  is different from x's allocator, the elements are moved. Otherwise, no\n  elements are constructed (their ownership is directly transferred). x\n  is left in an unspecified but valid state.</p></li>\n<li><p id=\"so_28235632_28235632_6\">initializer list constructor Constructs a container with a copy of each of the elements in il, in the same order.</p></li>\n</ol>\n</blockquote>\n", "AcceptedAnswerId": "28235688", "Title": "Create vector of size elements, without calling copy constructor?", "CreationDate": "2015-01-30T12:10:03.487", "Id": "28235632", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-01-30T13:09:19.620", "Score": "0", "OwnerUserId": "997112", "Tags": "<c++><vector>", "AnswerCount": "2"}});