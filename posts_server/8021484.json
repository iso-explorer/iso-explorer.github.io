post_cb({"8021557": {"ParentId": "8021484", "CommentCount": "1", "CreationDate": "2011-11-05T16:33:51.443", "OwnerUserId": "52251", "PostTypeId": "2", "Id": "8021557", "Score": "1", "Body": "<p>Section 2.1 [lex.phases]. The first phase of translation is:</p>\n<blockquote>\n<p id=\"so_8021484_8021557_0\">Physical source file characters are mapped, in an implementation-defined manner, to the basic source character set (introducing new-line characters for end-of-line indicators) if necessary. ...</p>\n</blockquote>\n<p>In other words, the implementation is free to use whatever line ending convention it wants, and turn that into newline characters during the first phase of translation.</p>\n<p>Practically speaking, you should be safe using the newline character for line endings on any modern compiler.</p>\n", "LastActivityDate": "2011-11-05T16:33:51.443"}, "8021544": {"ParentId": "8021484", "CommentCount": "1", "CreationDate": "2011-11-05T16:32:17.900", "OwnerUserId": "277176", "PostTypeId": "2", "Id": "8021544", "Score": "6", "Body": "<p>You should conclude that:</p>\n<ol>\n<li>VS editor understands any line-endings and so displays it as multiple lines (well, this is a known feature).</li>\n<li>MSVC compiler doesn't understand <code>\\r</code> line-endings, so it actually counts the <code>\";</code> line as the 6th line.</li>\n<li><code>emacs</code> doesn't understand <code>\\r</code> line-endings (at least by default) so it shows you the source in a single line.</li>\n<li>GCC understands any line endings, so it doesn't loose the count.</li>\n</ol>\n<p>Ah, also the quote you provided from the standard is unrelated. The <em>new-line</em> there refers to the source character set, not the <code>\\r</code> and <code>\\n</code> in strings. The grammar rule you quoted just excludes string literal such as:</p>\n<pre><code>const char* s = \"some text, here comes 'new-line'\n    ha ha \";\n</code></pre>\n", "LastActivityDate": "2011-11-05T16:32:17.900"}, "8021572": {"ParentId": "8021484", "CommentCount": "0", "CreationDate": "2011-11-05T16:35:44.953", "OwnerUserId": "668501", "PostTypeId": "2", "Id": "8021572", "Score": "0", "Body": "<blockquote>\n<blockquote>\n<p id=\"so_8021484_8021572_1\">Now, about new-line character I see a problem when the line ending is '\\r'...</p>\n</blockquote>\n</blockquote>\n<p>'\\r' is a carriage return and not a newline -- so Im not sure what the problems is?</p>\n<p>Windows chose to make some magic of representing \\r as newlines, but that does not mean that they actually are newlines</p>\n", "LastActivityDate": "2011-11-05T16:35:44.953"}, "8021484": {"CommentCount": "2", "ViewCount": "1820", "PostTypeId": "1", "LastEditorUserId": "115149", "CreationDate": "2011-11-05T16:23:13.693", "LastActivityDate": "2011-11-06T18:25:56.550", "Title": "Carriage return as line ending in c++ file", "AcceptedAnswerId": "8021557", "LastEditDate": "2011-11-06T18:25:56.550", "Id": "8021484", "Score": "0", "Body": "<p>I have been reading the ISO 14882:2003. It says:</p>\n<blockquote>\n<p id=\"so_8021484_8021484_0\">s-char:<br>\n  any member of the source character set except the double-quote \", backslash \\, or new-line character\n  <em>escape-sequence</em><br>\n<em>universal-character-name</em> </br></br></p>\n</blockquote>\n<p>Now, about new-line character I see a problem when the line ending is '\\r'<br>\nI wrote a small cpp program:</br></p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;string&gt;\nint main()\n{\n    const char* program=\"\"\n        \"#include &lt;string&gt;\\n\"\n        \"int main()\\n\"\n        \"{\\n\"\n        \"  std::string s;\\n\"\n        \"  //s=\\\"\\r\"\n        \"  //\\r\"\n        \"  //\\r\"\n        \"  //\\r\"\n        \"  //\\\";\\n\"\n        \"  s=\\\"\\\\xAE\\\\xfffactory\\\\xAE\\\\xffaction\\\";\\n\"\n        \"  return 0;\\n\"\n        \"}\\n\"\n        ;\n    std::ofstream file(\"file.cpp\", std::ios_base::trunc);\n    file &lt;&lt; program;\n    file.close();\n    return 0;\n}\n</code></pre>\n<p>On Windows, file.cpp (as read in VS editor) is:</p>\n<pre><code>#include &lt;string&gt;\nint main()\n{\n  std::string s;\n  //s=\"\n  //\n  //\n  //\n  //\";\n  s=\"\\xAE\\xfffactory\\xAE\\xffaction\";\n  return 0;\n}\n</code></pre>\n<p>When compiling file.cpp, VS triggers and error in line 6, instead of line 10.</p>\n<p>On Linux, file.cpp (as read in emacs) is:</p>\n<pre><code>#include &lt;string&gt;\nint main()\n{\n  std::string s;\n  //s=\"^M  //^M  //^M  //^M  //\";\n  s=\"\\xAE\\xfffactory\\xAE\\xffaction\";\n  return 0;\n}\n</code></pre>\n<p>Compiling file.cpp with gcc I get an error in line 10, not in line 6.</p>\n<p>What should I conclude from this?</p>\n", "Tags": "<c++><visual-c++><gcc>", "OwnerUserId": "115149", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_8021484_8021557_0": {"section_id": 5313, "quality": 0.9411764705882353, "length": 16}, "so_8021484_8021484_0": {"section_id": 5313, "quality": 0.6666666666666666, "length": 8}}, "n3337": {"so_8021484_8021557_0": {"section_id": 5110, "quality": 0.9411764705882353, "length": 16}, "so_8021484_8021484_0": {"section_id": 5110, "quality": 0.6666666666666666, "length": 8}}, "n4659": {"so_8021484_8021557_0": {"section_id": 6737, "quality": 0.9411764705882353, "length": 16}, "so_8021484_8021484_0": {"section_id": 6737, "quality": 0.6666666666666666, "length": 8}}}, "8021519": {"ParentId": "8021484", "CommentCount": "1", "CreationDate": "2011-11-05T16:28:42.977", "OwnerUserId": "65696", "PostTypeId": "2", "Id": "8021519", "Score": "0", "Body": "<p>Windows and linux use different line ending conventions.  On linux, the end of line is <code>0x0A</code>, and on windows its <code>0x0D, 0x0A</code>.  C/C++ programs are themselves text files, and are often interoperable across platforms, so long as you conform to the text conventions on the platform .</p>\n<p>the <a href=\"http://linuxcommand.org/man_pages/dos2unix1.html\" rel=\"nofollow\"><code>dos2unix(1)</code></a> tool is purpose build for just this task.</p>\n<p>Alternatively, since you're producing this code dynamically in your own tool, you could provide an option that tells it to use one line-ending style or the other.</p>\n", "LastActivityDate": "2011-11-05T16:28:42.977"}});