post_cb({"32522393": {"ParentId": "32521974", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No, the compiler does <strong>not</strong> generate a constructor taking an <code>std::initializer_list</code>, neither for <code>std::array</code> nor for any other aggregate type.</p>\n<p>What you observe here is <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">aggregate initialization</a> which is completely unrelated to <code>std::initializer_list</code>.</p>\n<p>The term \"initializer-list\" in the standard snippet you provided refers to a list of initializers, which again has nothing to do with <code>std::initializer_list</code>.</p>\n<p>You can test that with something like this:</p>\n<pre><code>struct A {\n    int i;\n    std::string str;\n};\n\nint main() {\n    A a{1, \"asdf\"};\n}\n</code></pre>\n<p>This works, but clearly does not make use of <code>std::initializer_list</code> since that can only handle a <em>single</em> type at once.</p>\n", "OwnerUserId": "3002139", "LastEditorUserId": "3002139", "LastEditDate": "2015-09-11T14:38:42.363", "Id": "32522393", "Score": "5", "CreationDate": "2015-09-11T11:28:33.363", "LastActivityDate": "2015-09-11T14:38:42.363"}, "bq_ids": {"n4140": {"so_32521974_32522401_3": {"section_id": 3325, "quality": 0.8, "length": 4}, "so_32521974_32522401_4": {"section_id": 3299, "quality": 0.9565217391304348, "length": 22}, "so_32521974_32522401_0": {"section_id": 3296, "quality": 0.8571428571428571, "length": 6}, "so_32521974_32521974_2": {"section_id": 775, "quality": 0.875, "length": 7}, "so_32521974_32521974_0": {"section_id": 775, "quality": 0.8333333333333334, "length": 5}, "so_32521974_32522401_1": {"section_id": 3323, "quality": 0.8823529411764706, "length": 15}, "so_32521974_32522401_2": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_32521974_32522401_3": {"section_id": 3195, "quality": 0.8, "length": 4}, "so_32521974_32522401_1": {"section_id": 3193, "quality": 0.8823529411764706, "length": 15}, "so_32521974_32522401_2": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_32521974_32521974_2": {"section_id": 762, "quality": 0.875, "length": 7}, "so_32521974_32521974_0": {"section_id": 762, "quality": 0.8333333333333334, "length": 5}, "so_32521974_32522401_0": {"section_id": 3166, "quality": 0.8571428571428571, "length": 6}, "so_32521974_32522401_4": {"section_id": 3169, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_32521974_32522401_3": {"section_id": 4091, "quality": 0.8, "length": 4}, "so_32521974_32522401_4": {"section_id": 4065, "quality": 0.7391304347826086, "length": 17}, "so_32521974_32522401_0": {"section_id": 4058, "quality": 0.8571428571428571, "length": 6}, "so_32521974_32522401_2": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_32521974_32522401_1": {"section_id": 4089, "quality": 0.8235294117647058, "length": 14}}}, "32521974": {"CommentCount": "3", "ViewCount": "286", "PostTypeId": "1", "LastEditorUserId": "2543838", "CreationDate": "2015-09-11T11:06:26.113", "LastActivityDate": "2015-09-11T14:38:42.363", "Title": "Implicitly generated initializer list constructor", "AcceptedAnswerId": "32522193", "LastEditDate": "2015-09-11T11:10:07.670", "Id": "32521974", "Score": "0", "Body": "<p>In C++ standard for <code>std::array</code> it says:</p>\n<blockquote>\n<p id=\"so_32521974_32521974_0\">An array is an aggregate (8.5.1) that can be initialized with the\n  syntax</p>\n<p id=\"so_32521974_32521974_1\">array a = { initializer-list }; </p>\n<p id=\"so_32521974_32521974_2\">where initializer-list is\n  a comma-separated list of up to N elements whose types are convertible\n  to T.</p>\n</blockquote>\n<p>Also it says that <code>std::array</code> is an aggregate type and its constructors are implicitly generated.</p>\n<p>To initialize an <code>std::array</code> with an initializer list it must have a constructor taking an <code>std::initializer_list</code> as an argument.</p>\n<p>Is a constructor that takes an <code>std::initializer_list</code> also implicitly generated for user-defined types or it is specific to <code>std::array</code>?</p>\n", "Tags": "<c++><c++11><constructor>", "OwnerUserId": "2543838", "AnswerCount": "3"}, "32522193": {"ParentId": "32521974", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Edit:</p>\n<p>The syntax works for aggregate types, </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A {\n    int a;\n    int b;\n    int get_a() {return a;}\n};\n\nint main() {\n    A a1({4,5});\n    A a2{1,2};\n    cout &lt;&lt; a1.a &lt;&lt; '\\n';\n    cout &lt;&lt; a2.b &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/qBOL8i\" rel=\"nofollow\">Live</a></p>\n<p>But technically for aggregate types there is no constructor created. Those invocations present two forms of <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\" rel=\"nofollow\">list initialization</a>. Since <code>T</code> is an aggregate, it falls for the <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">aggregate initialization</a> related bullet.</p>\n", "OwnerUserId": "1133179", "LastEditorUserId": "1133179", "LastEditDate": "2015-09-11T12:37:01.413", "Id": "32522193", "Score": "0", "CreationDate": "2015-09-11T11:18:20.407", "LastActivityDate": "2015-09-11T12:37:01.413"}, "32522401": {"ParentId": "32521974", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>std::array</code> is aggregate and so aggregate-initialization is used, and no constructor that receives <code>std::initializer_list</code> is generated.</p>\n<blockquote>\n<p id=\"so_32521974_32522401_0\">If the initializer is a (non-parenthesized) <em>braced-init-list</em>, the\n  object or reference is list-initialized (8.5.4).</p>\n<p id=\"so_32521974_32522401_1\">List-initialization is initialization of an object or reference from a\n  <em>braced-init-list</em>. Such an initializer is called an <em>initializer list</em>,\n  and the comma-separated <em>initializer-clauses</em> of the list are called the\n  <em>elements</em> of the initializer list.</p>\n<p id=\"so_32521974_32522401_2\">List-initialization of an object or reference of type <code>T</code> is defined as\n  follows:</p>\n<p id=\"so_32521974_32522401_3\">If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</p>\n<p id=\"so_32521974_32522401_4\">When an aggregate is initialized by an initializer list, as specified\n  in 8.5.4, the elements of the initializer list are taken as\n  initializers for the members of the aggregate, in increasing subscript\n  or member order. Each member is copy-initialized from the\n  corresponding <em>initializer-clause</em>.</p>\n</blockquote>\n", "OwnerUserId": "1498580", "LastEditorUserId": "596781", "LastEditDate": "2015-09-11T11:44:11.130", "Id": "32522401", "Score": "1", "CreationDate": "2015-09-11T11:28:54.217", "LastActivityDate": "2015-09-11T11:44:11.130"}});