post_cb({"bq_ids": {"n4140": {"so_34839886_34839955_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 7079}}, "n3337": {"so_34839886_34839955_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 6823}}, "n4659": {"so_34839886_34839955_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 8580}}}, "34839969": {"Id": "34839969", "PostTypeId": "2", "Body": "<p>What you did was forward declarations of <code>struct x</code>. You did not declared and new variable called <code>x</code>. Example:</p>\n<pre><code>struct foo;\nint foo;\nstruct foo {\n    int foo;\n};\nstruct foo thisisfoovariable;\n</code></pre>\n<p>Above are declarations of only two variables: foo (of type <code>int</code>) and thisisfoovariable, which type is <code>struct foo</code>.</p>\n", "LastActivityDate": "2016-01-17T15:17:33.973", "CommentCount": "0", "CreationDate": "2016-01-17T15:17:33.973", "ParentId": "34839886", "Score": "0", "OwnerUserId": "5128826"}, "34839955": {"Id": "34839955", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34839886_34839955_0\"><strong>[basic.scope.hiding]/2</strong> A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member, function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data member, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is visible.</p>\n</blockquote>\n<p>This language has existed since C++98. If you've seen a compiler that worked differently, that compiler was pre-standard, or just plain buggy.</p>\n", "LastActivityDate": "2016-01-17T15:16:41.323", "CommentCount": "0", "CreationDate": "2016-01-17T15:16:41.323", "ParentId": "34839886", "Score": "8", "OwnerUserId": "1670129"}, "34839886": {"ViewCount": "156", "Body": "<p>I notice that the following code compiles with recent compilers:</p>\n<pre><code>int main()\n{\n    int x;\n    struct x;\n    x = 210;                  // \u2190\n}\n</code></pre>\n<p>As I recall it didn't compile some years ago.</p>\n<p>Were the lookup rules changed in C++11 or C++14 to make this code \u201cwork\u201d (thus breaking use of <code>struct variable_name;</code> as a means to ensure no use of the variable in the following code)?</p>\n<hr>\n<p><strong>Update</strong>:\nEvidently I remembered incorrectly. I have verified that the code compiled OK even with Visual C++ 2010. However, when used for parameters the <code>struct</code> name is in an inner scope, and shadows, like in this code:</p>\n<pre><code>void foo( int x )\n{\n    struct x;\n    x = 210;                  // \u2190 Error\n}\n\nint main()\n{\n}\n</code></pre>\n<p>Accordingly I have selected as \u201csolution\u201d the answer that there was no change; the rules were always like this.</p>\n</hr>", "AcceptedAnswerId": "34839955", "Title": "struct name not shadowing variable name", "CreationDate": "2016-01-17T15:11:21.827", "Id": "34839886", "CommentCount": "9", "LastEditDate": "2016-01-17T15:28:10.573", "PostTypeId": "1", "LastEditorUserId": "464581", "LastActivityDate": "2016-01-17T15:28:10.573", "Score": "1", "OwnerUserId": "464581", "Tags": "<c++><c++11><c++14>", "AnswerCount": "2"}});