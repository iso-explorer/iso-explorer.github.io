post_cb({"34997341": {"ParentId": "34997194", "CommentCount": "0", "Body": "<p>Assigning the value will work, but you need to do it from a non-static method (to have access to <code>tempPointerA</code>) or pass the pointer as paramter to the static method. You can access static members from non-static functions (but not the other way around).</p>\n<p>What you should pay attention is ownership and destruction. Since you assign the value to a static member the instance can't own the value anymore. Otherwise when the instance is destroyed the static member points to garbage data and you get errors. Also since the static member is never destroyed, your value may leak resources (think DB connection that's never closed).</p>\n<p>Also if you are in multi-threaded environment consider if it's possible that multiple threads will attempt to set the value of the static member. You may have the add synchronization. You can also run into race conditions if multiple threads try to initialize the value at the same time.</p>\n", "OwnerUserId": "241013", "PostTypeId": "2", "Id": "34997341", "Score": "0", "CreationDate": "2016-01-25T16:23:46.333", "LastActivityDate": "2016-01-25T16:23:46.333"}, "34997411": {"ParentId": "34997194", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is one rule: static functions can't access non-static members and function of the same class without an object. there is no opposite rule. it is because you don't have a <code>this</code> pointer.</p>\n<p>You still can declare an object of the same class in the static function  and use it's all members, or use any static member.</p>\n<p>Therefore from non-static function you can access static functions and members. </p>\n<p>If <code>pointerA</code> is static you can access it all. not only to it's static members and functions.  </p>\n", "OwnerUserId": "2852165", "LastEditorUserId": "2852165", "LastEditDate": "2016-01-25T16:49:01.373", "Id": "34997411", "Score": "0", "CreationDate": "2016-01-25T16:27:20.657", "LastActivityDate": "2016-01-25T16:49:01.373"}, "bq_ids": {"n4140": {"so_34997194_34997272_1": {"section_id": 5905, "quality": 1.0, "length": 6}}, "n3337": {"so_34997194_34997272_1": {"section_id": 5677, "quality": 1.0, "length": 6}}, "n4659": {"so_34997194_34997272_1": {"section_id": 7387, "quality": 1.0, "length": 6}}}, "34997194": {"CommentCount": "1", "ViewCount": "463", "CreationDate": "2016-01-25T16:16:15.867", "LastActivityDate": "2016-01-25T16:49:01.373", "Title": "C++: Can I assign the value of non-static member variable to static member variable?", "AcceptedAnswerId": "34997272", "PostTypeId": "1", "Id": "34997194", "Score": "2", "Body": "<p>I have a class <code>A</code> in which I have a <strong>static</strong> member function <code>passName</code> </p>\n<pre><code>int A::passName()\n{\n  .... // skip some code\n  std::string name = ...; // result from codes above\n  assign(); // this is a static member function in class A\n  pointerA-&gt;passMethodName(name); // pointerA is a class-A static member variable, but of type \n                                 // class-B, passMethodName is a class-B non-static member function.\n}\n</code></pre>\n<p>The assign function is:</p>\n<pre><code>void A::assign(){\n  pointerA = tempPointerA;\n}\n</code></pre>\n<p>Explanation: tempPointerA is a value that is generated during the running process. It is a non-static private class-A member which will be initialized everytime a new object of class A is constructed. But I know in static function I can only use static member directly, so I need to make sure that pointerA is static member. So is assign() function feasible (Or I would rather say, is the whole working principle shown here feasible)? </p>\n<p>Thanks for your idea!  </p>\n", "Tags": "<c++><static>", "OwnerUserId": "4129364", "AnswerCount": "3"}, "34997272": {"ParentId": "34997194", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>No. A static member function can only operate on static variables or call other static functions. (or namespace-scope functions, which are more or less the same as static functions).</p>\n<blockquote>\n<p id=\"so_34997194_34997272_0\">\u00a79.4.1 [class.static.mfct]</p>\n<p id=\"so_34997194_34997272_1\">A static member function does not have a this pointer.</p>\n</blockquote>\n<p>So there is no way to access a non-static member variable within a <code>static</code> function.</p>\n<p>If you really need <code>assign</code> to remain <code>static, then what you should do is to refactor your</code>assign()<code>function to accept a variable of type</code>tempPointerA`, and then pass your desired variable in.</p>\n<pre><code>int A::passName(B* _in)\n{\n  std::string name = ...; // result from code above\n  assign(_in); // this is a static member function in class A\n  _in-&gt;passMethodName(name);\n}\n</code></pre>\n<p>Otherwise I recommend that you not make it <code>static</code> at all.</p>\n", "OwnerUserId": "27678", "LastEditorUserId": "27678", "LastEditDate": "2016-01-25T16:44:22.617", "Id": "34997272", "Score": "2", "CreationDate": "2016-01-25T16:19:46.643", "LastActivityDate": "2016-01-25T16:44:22.617"}});