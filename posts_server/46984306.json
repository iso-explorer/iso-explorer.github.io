post_cb({"bq_ids": {"n4140": {"so_46984306_46985214_0": {"length": 29, "quality": 1.0, "section_id": 268}}, "n3337": {"so_46984306_46985214_0": {"length": 29, "quality": 1.0, "section_id": 259}}, "n4659": {"so_46984306_46985214_0": {"length": 29, "quality": 1.0, "section_id": 275}}}, "46985214": {"Id": "46985214", "PostTypeId": "2", "Body": "<p>You need to declare your specialization in the header:</p>\n<pre><code>template&lt;&gt;\nImageRgbT f&lt;ImageRgbT&gt;(const cv::Mat &amp; inMat);\n</code></pre>\n<p>Otherwise, your program is ill-formed NDR according to [temp.expl.spec]/6:</p>\n<blockquote>\n<p id=\"so_46984306_46985214_0\">If a template, a member template or a member of a class template is explicitly specialized then that specialization shall be declared before the first use of that specialization that would cause an implicit instantiation\n  to take place, in every translation unit in which such a use occurs; no diagnostic is required.</p>\n</blockquote>\n<p>Violating this rule can cause the compiler to emit one definition for <code>f&lt;ImageRgbT&gt;</code> in one translation unit, instantiated from the primary template, and a different one in the translation unit containing the explicit specialization, leading to linker trouble. It only appears to work in your case because you got lucky and because no diagnostic is required.</p>\n<p>Provided that the specialization is <em>declared</em> in the header, there is no problem with <em>defining</em> it in a separate file.</p>\n", "LastActivityDate": "2017-10-28T00:47:54.683", "CommentCount": "1", "CreationDate": "2017-10-28T00:47:54.683", "ParentId": "46984306", "Score": "0", "OwnerUserId": "481267"}, "46984306": {"ViewCount": "43", "Body": "<p>I just wanted to know:\nIs it ok to declare a template function (not a member function) in a header such as:</p>\n<pre><code>template&lt;class I&gt;\ninline I f(const cv::Mat &amp; inMat)\n{\n   throw(std::logic_error(\"No override found for this type of image\"));\n}\n</code></pre>\n<p>And then, define what is allowed in the cpp file like this:</p>\n<pre><code>template&lt;&gt;\nImageRgbT f&lt;ImageRgbT&gt;(const cv::Mat &amp; inMat)\n{\n}\n</code></pre>\n<p>I'm trying not to use a specialized class.</p>\n", "Title": "C++ templated function overload in cpp", "CreationDate": "2017-10-27T22:35:01.997", "LastActivityDate": "2017-10-28T00:47:54.683", "CommentCount": "5", "PostTypeId": "1", "Id": "46984306", "Score": "0", "OwnerUserId": "4285858", "Tags": "<c++><templates>", "AnswerCount": "1"}});