post_cb({"5813804": {"ParentId": "5813700", "CommentCount": "4", "Body": "<p>From C++03 \"17.4.3.1.4 Types\":</p>\n<blockquote>\n<p id=\"so_5813700_5813804_0\">For each type T from the Standard C library (footnote 169), the types ::T and std::T are reserved to the implementation and, when defined, ::T shall be identical to std::T.</p>\n</blockquote>\n<p>And footnote 169: </p>\n<blockquote>\n<p id=\"so_5813700_5813804_1\">These types are clock_t, div_t, FILE, fpos_t, lconv, ldiv_t, mbstate_t, ptrdiff_t, sig_atomic_t, size_t, time_t, tm, va_list, wctrans_t, wctype_t, and wint_t.</p>\n</blockquote>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "5813804", "Score": "13", "CreationDate": "2011-04-28T04:59:15.133", "LastActivityDate": "2011-04-28T04:59:15.133"}, "5813782": {"ParentId": "5813700", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><em>std::size_t</em> is in fact <em>stddef.h</em>'s <em>size_t</em>.</p>\n<p><em>cstddef</em> gives the following:</p>\n<pre><code>#include &lt;stddef.h&gt;\nnamespace std \n{\n  using ::ptrdiff_t;\n  using ::size_t;\n}\n</code></pre>\n<p>...effectively bringing the previous definition into the std namespace.</p>\n", "OwnerUserId": "722347", "LastEditorUserId": "5507349", "LastEditDate": "2016-11-12T21:50:22.543", "Id": "5813782", "Score": "13", "CreationDate": "2011-04-28T04:55:51.887", "LastActivityDate": "2016-11-12T21:50:22.543"}, "5813736": {"ParentId": "5813700", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>C's <code>size_t</code> and C++'s <code>std::size_t</code> are both same. </p>\n<p>In C, it's defined in <code>&lt;stddef.h&gt;</code> and in C++, its defined in <code>&lt;cstddef&gt;</code> whose contents are the same as C header (see the quotation below). Its defined as <strong>unsigned integer type</strong> of the <em>result</em> of the <strong>sizeof</strong> operator.</p>\n<p>C Standard says in \u00a717.7/2,</p>\n<blockquote>\n<p id=\"so_5813700_5813736_0\">size_t which is the <strong>unsigned integer type</strong> of the <em>result</em> of the <strong>sizeof</strong> operator</p>\n</blockquote>\n<p>And C++ Standard says (about <code>cstddef</code> header) in \u00a718.1/3,</p>\n<blockquote>\n<p id=\"so_5813700_5813736_1\">The contents are the same as the Standard C library header , <em>with the following changes</em>.</p>\n</blockquote>\n<p>So yeah, both are same; <strong>the only difference is that C++ defines <code>size_t</code> in <code>std</code> namespace.</strong> </p>\n<p>Please also notice that the above line also says <em>\"with the following changes\"</em>  which isn't referring to <code>size_t</code>. Its rather referring to the new additions (mostly) made by C++ into the language (not present in C) which are also defined in the same header.</p>\n<hr>\n<p>Wikipedia has very good info about range and storage size of size_t:</p>\n<blockquote>\n<p id=\"so_5813700_5813736_2\"><strong>Range and storage size of size_t</strong></p>\n<p id=\"so_5813700_5813736_3\">The <strong>actual</strong> type of size_t is\n  <strong>platform-dependent</strong>; a <strong>common mistake</strong>\n  is to assume size_t is the same as\n  unsigned int, which can lead to\n  programming errors,[3][4] when moving\n  from 32 to 64-bit architecture, for\n  example.</p>\n<p id=\"so_5813700_5813736_4\">According to the 1999 ISO C\n  standard (C99), size_t is an unsigned\n  integer type of at least 16 bits.</p>\n</blockquote>\n<p>And the rest you can read from <a href=\"http://en.wikipedia.org/wiki/Size_t\" rel=\"noreferrer\">this page</a> at wikipedia.</p>\n</hr>", "OwnerUserId": "415784", "LastEditorUserId": "264712", "LastEditDate": "2014-12-23T19:30:48.707", "Id": "5813736", "Score": "62", "CreationDate": "2011-04-28T04:47:22.193", "LastActivityDate": "2014-12-23T19:30:48.707"}, "bq_ids": {"n4140": {"so_5813700_5813804_1": {"section_id": 6312, "quality": 0.9411764705882353, "length": 16}, "so_5813700_5813804_0": {"section_id": 6312, "quality": 0.7333333333333333, "length": 11}, "so_5813700_5813736_1": {"section_id": 4270, "quality": 0.75, "length": 6}, "so_5813700_5813736_0": {"section_id": 3291, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_5813700_5813804_1": {"section_id": 6069, "quality": 0.9411764705882353, "length": 16}, "so_5813700_5813804_0": {"section_id": 6069, "quality": 0.7333333333333333, "length": 11}, "so_5813700_5813736_1": {"section_id": 4111, "quality": 0.75, "length": 6}, "so_5813700_5813736_0": {"section_id": 3358, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_5813700_5813804_1": {"section_id": 7822, "quality": 0.9411764705882353, "length": 16}, "so_5813700_5813736_0": {"section_id": 7797, "quality": 0.7142857142857143, "length": 5}, "so_5813700_5813736_1": {"section_id": 3233, "quality": 0.75, "length": 6}, "so_5813700_5813804_0": {"section_id": 7822, "quality": 0.7333333333333333, "length": 11}}}, "5813700": {"CommentCount": "2", "AcceptedAnswerId": "5813736", "PostTypeId": "1", "LastEditorUserId": "1863950", "CreationDate": "2011-04-28T04:41:41.740", "LastActivityDate": "2016-11-12T21:50:22.543", "LastEditDate": "2016-05-09T16:28:02.453", "ViewCount": "17863", "FavoriteCount": "17", "Title": "Difference between size_t and std::size_t", "Id": "5813700", "Score": "95", "Body": "<p>What are the differences between <code>size_t</code> and <code>std::size_t</code> in terms of where they are declared, when they should be used and any other differentiating features?</p>\n", "Tags": "<c++><size-t>", "OwnerUserId": "485561", "AnswerCount": "3"}});