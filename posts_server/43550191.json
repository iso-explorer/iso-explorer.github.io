post_cb({"43550708": {"ParentId": "43550191", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The issue is that your struct <code>A</code> has a reference member <code>B&amp; b</code>. Since references cannot be reassigned, the compiler can't implicitly generate a copy- or a move-assignment operator for you. </p>\n<p>However, for this particular overload of <code>std::vector&lt;T&gt;::insert</code>, the standard (<a href=\"https://timsong-cpp.github.io/cppwp/n4140/sequence.reqmts#4\" rel=\"nofollow noreferrer\">[sequence.reqmts]/4</a>) states</p>\n<blockquote>\n<p id=\"so_43550191_43550708_0\">Requires: T shall be EmplaceConstructible into X from *i. For <strong>vector</strong> and deque, T shall also be MoveInsertable into X, MoveConstructible, <strong>MoveAssignable</strong>, and swappable (17.6.3.2). [...]</p>\n</blockquote>\n<p>Thats why the compiler complains about the implicitly deleted assignment operators.</p>\n<p>If you really want that to be a reference member, you can use <code>std::reference_wrapper&lt;B&gt;</code> instead of <code>B&amp;</code> inside the struct <code>A</code>.</p>\n", "OwnerUserId": "3601321", "LastEditorUserId": "3601321", "LastEditDate": "2017-04-21T19:48:27.850", "Id": "43550708", "Score": "1", "CreationDate": "2017-04-21T19:37:57.847", "LastActivityDate": "2017-04-21T19:48:27.850"}, "43550191": {"CommentCount": "1", "ViewCount": "37", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-04-21T19:03:44.773", "LastActivityDate": "2017-04-21T19:48:27.850", "Title": "Circular dependency and std::vector::insert", "AcceptedAnswerId": "43550708", "LastEditDate": "2017-05-23T11:47:01.337", "Id": "43550191", "Score": "0", "Body": "<p>I have this file:</p>\n<p><strong>A.h</strong></p>\n<pre><code>struct B;\n\nstruct A\n{\n    A(... B &amp;b) :\n        b(b) {}\n\n    B &amp;b;\n};\n</code></pre>\n<p>And <strong>B.h</strong>:</p>\n<pre><code>#include \"A.h\"\nstruct B{\n...\nstd::vector&lt;A&gt; as;\n}\n</code></pre>\n<p>And this code:</p>\n<pre><code>std::vector&lt;A&gt; manya;\nstd::vector&lt;B&gt; bs;\n//fill bs\nfor(size_t i=0; i&lt;bs.size(); i++)\n  manya.insert(manya.end(), bs[i].as.begin(), bs[i].as.end());\n</code></pre>\n<p>However, I get this error (where <code>A=FindAffineShapeArgs</code> and <code>B=Wrapper</code>):</p>\n<pre><code>/usr/include/c++/5/bits/stl_algobase.h(564): error: function \"FindAffineShapeArgs::operator=(const FindAffineShapeArgs &amp;)\" (declared implicitly) cannot be referenced -- it is a deleted function\n        *--__result = std::move(*--__last);\n                    ^\n          detected during:\n            instantiation of \"_BI2 std::__copy_move_backward&lt;true, false, std::random_access_iterator_tag&gt;::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1=FindAffineShapeArgs *, _BI2=FindAffineShapeArgs *]\" at line 606\n            instantiation of \"_BI2 std::__copy_move_backward_a&lt;_IsMove,_BI1,_BI2&gt;(_BI1, _BI1, _BI2) [with _IsMove=true, _BI1=FindAffineShapeArgs *, _BI2=FindAffineShapeArgs *]\" at line 615\n            instantiation of \"_BI2 std::__copy_move_backward_a2&lt;_IsMove,_BI1,_BI2&gt;(_BI1, _BI1, _BI2) [with _IsMove=true, _BI1=FindAffineShapeArgs *, _BI2=FindAffineShapeArgs *]\" at line 686\n            instantiation of \"_BI2 std::move_backward(_BI1, _BI1, _BI2) [with _BI1=FindAffineShapeArgs *, _BI2=FindAffineShapeArgs *]\" at line 636 of \"/usr/include/c++/5/bits/vector.tcc\"\n            instantiation of \"void std::vector&lt;_Tp, _Alloc&gt;::_M_range_insert(std::vector&lt;_Tp, _Alloc&gt;::iterator, _ForwardIterator, _ForwardIterator, std::forward_iterator_tag) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _ForwardIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 1377 of \"/usr/include/c++/5/bits/stl_vector.h\"\n            instantiation of \"void std::vector&lt;_Tp, _Alloc&gt;::_M_insert_dispatch(std::vector&lt;_Tp, _Alloc&gt;::iterator, _InputIterator, _InputIterator, std::__false_type) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _InputIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 1100 of \"/usr/include/c++/5/bits/stl_vector.h\"\n            instantiation of \"std::vector&lt;_Tp, _Alloc&gt;::iterator std::vector&lt;_Tp, _Alloc&gt;::insert(std::vector&lt;_Tp, _Alloc&gt;::const_iterator, _InputIterator, _InputIterator) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _InputIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;, &lt;unnamed&gt;=void]\" at line 382 of\n                      \"/home/luca/Dropbox/HKUST/CloudCache/cloudcache/CloudCache/Descriptors/hesaff/pyramid.cpp\"\n\n/usr/include/c++/5/bits/stl_algobase.h(340): error: function \"FindAffineShapeArgs::operator=(const FindAffineShapeArgs &amp;)\" (declared implicitly) cannot be referenced -- it is a deleted function\n          *__result = *__first;\n                    ^\n          detected during:\n            instantiation of \"_OI std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m(_II, _II, _OI) [with _II=FindAffineShapeArgs *, _OI=FindAffineShapeArgs *]\" at line 402\n            instantiation of \"_OI std::__copy_move_a&lt;_IsMove,_II,_OI&gt;(_II, _II, _OI) [with _IsMove=false, _II=FindAffineShapeArgs *, _OI=FindAffineShapeArgs *]\" at line 440\n            instantiation of \"_OI std::__copy_move_a2&lt;_IsMove,_II,_OI&gt;(_II, _II, _OI) [with _IsMove=false, _II=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;, _OI=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 472\n            instantiation of \"_OI std::copy(_II, _II, _OI) [with _II=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;, _OI=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 637 of \"/usr/include/c++/5/bits/vector.tcc\"\n            instantiation of \"void std::vector&lt;_Tp, _Alloc&gt;::_M_range_insert(std::vector&lt;_Tp, _Alloc&gt;::iterator, _ForwardIterator, _ForwardIterator, std::forward_iterator_tag) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _ForwardIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 1377 of \"/usr/include/c++/5/bits/stl_vector.h\"\n            instantiation of \"void std::vector&lt;_Tp, _Alloc&gt;::_M_insert_dispatch(std::vector&lt;_Tp, _Alloc&gt;::iterator, _InputIterator, _InputIterator, std::__false_type) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _InputIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;]\" at line 1100 of \"/usr/include/c++/5/bits/stl_vector.h\"\n            instantiation of \"std::vector&lt;_Tp, _Alloc&gt;::iterator std::vector&lt;_Tp, _Alloc&gt;::insert(std::vector&lt;_Tp, _Alloc&gt;::const_iterator, _InputIterator, _InputIterator) [with _Tp=FindAffineShapeArgs, _Alloc=std::allocator&lt;FindAffineShapeArgs&gt;, _InputIterator=__gnu_cxx::__normal_iterator&lt;FindAffineShapeArgs *, std::vector&lt;FindAffineShapeArgs, std::allocator&lt;FindAffineShapeArgs&gt;&gt;&gt;, &lt;unnamed&gt;=void]\" at line 382 of\n                      \"/home/luca/Dropbox/HKUST/CloudCache/cloudcache/CloudCache/Descriptors/hesaff/pyramid.cpp\"\n\ncompilation aborted for /home/luca/Dropbox/HKUST/CloudCache/cloudcache/CloudCache/Descriptors/hesaff/pyramid.cpp (code 2)\n</code></pre>\n<p>Why this happens?</p>\n<p>This could be related to <a href=\"https://stackoverflow.com/questions/43550249/why-do-i-get-this-error-in-this-omp-declare-reduction\">this</a> but for a different case</p>\n", "Tags": "<c++><struct><include><circular-dependency>", "OwnerUserId": "4480180", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43550191_43550708_0": {"section_id": 723, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_43550191_43550708_0": {"section_id": 712, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_43550191_43550708_0": {"section_id": 754, "quality": 0.7692307692307693, "length": 10}}}});