post_cb({"30999381": {"CommentCount": "0", "ViewCount": "24", "CreationDate": "2015-06-23T09:47:44.553", "LastActivityDate": "2015-06-23T10:26:38.503", "Title": "Declaring a structure and immediately instantiating it with cv-qualifier or storage duration specifier", "AcceptedAnswerId": "30999869", "PostTypeId": "1", "Id": "30999381", "Score": "1", "Body": "<p>Consider the following code:</p>\n<pre><code>static const struct X\n{\n    int a;\n} x={1};\n\nX y;\n</code></pre>\n<p>It compiles, and <code>X</code> appears to work in the declaration of <code>y</code>. But is it actually true that <code>static const</code> and similar cv-qualifiers and storage duration specifiers don't affect the definition of <code>X</code>? I.e. is the following exactly equivalent to the above?</p>\n<pre><code>struct X\n{\n    int a;\n};\nstatic const X x={1};\n\nX y;\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "673852", "AnswerCount": "1"}, "30999869": {"ParentId": "30999381", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Name <code>X</code>  in declaration</p>\n<pre><code>static const struct X\n{\n    int a;\n} x={1};\n</code></pre>\n<p>introduces type specifier <code>struct X</code>. Thus this declaration</p>\n<pre><code>X y;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>struct X y;\n</code></pre>\n<p>As for storage class specifiers then according to the C++ Standard (7.1.1 Storage class specifiers)</p>\n<blockquote id=\"so_30999381_30999869_0\">\n<ol>\n<li>... The storage-class-specifier applies to the name declared by each init-declarator in the list and not to any names declared by other specifiers.</li>\n</ol>\n</blockquote>\n<p>So in this declaration</p>\n<pre><code>static const struct X\n{\n    int a;\n} x={1};\n</code></pre>\n<p>static is a storage class specifier of declarator <code>x</code> that is present in init-declarator <code>x={1}</code></p>\n<p>If you would use for example a typedef</p>\n<pre><code>typedef const struct\n{\n    int a;\n} X;\n</code></pre>\n<p>then in this case type name <code>X</code> would indeed have qualifier const. </p>\n<p>So if you will define for example</p>\n<pre><code>X x = { 1 };\n</code></pre>\n<p>then x will be a constant object. You will be unable to write</p>\n<pre><code>x.a = 2;\n</code></pre>\n<p>Nevertheless you may not specify a storage class specifier in a typedef because as it is said in the quote storage class specifiers may be specified only for init-declarators.\nHowever you may write</p>\n<pre><code>static X x = { 1 };\n</code></pre>\n<p>because the storage class specifier is applied to <code>x</code> that has type <code>const X</code></p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-06-23T10:26:38.503", "Id": "30999869", "Score": "3", "CreationDate": "2015-06-23T10:09:08.507", "LastActivityDate": "2015-06-23T10:26:38.503"}, "bq_ids": {"n4140": {"so_30999381_30999869_0": {"section_id": 5391, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_30999381_30999869_0": {"section_id": 5185, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_30999381_30999869_0": {"section_id": 6817, "quality": 0.9166666666666666, "length": 11}}}});