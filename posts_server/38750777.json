post_cb({"bq_ids": {"n4140": {"so_38750777_38750777_0": {"length": 26, "quality": 1.0, "section_id": 5971}, "so_38750777_38750777_3": {"length": 11, "quality": 1.0, "section_id": 5971}, "so_38750777_38750777_4": {"length": 20, "quality": 0.8333333333333334, "section_id": 5971}}, "n3337": {"so_38750777_38750777_3": {"length": 8, "quality": 0.7272727272727273, "section_id": 5739}, "so_38750777_38750777_4": {"length": 20, "quality": 0.8333333333333334, "section_id": 5739}}, "n4659": {"so_38750777_38750777_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 7470}, "so_38750777_38750777_3": {"length": 11, "quality": 1.0, "section_id": 7470}, "so_38750777_38750777_4": {"length": 20, "quality": 0.8333333333333334, "section_id": 7470}}}, "38750777": {"ViewCount": "763", "Body": "<p>I can not quite understand an example from C++14 standard draft <code>N4140 5.1.2.12 [expr.prim.lambda]</code>.</p>\n<blockquote>\n<p id=\"so_38750777_38750777_0\">A lambda-expression with an associated capture-default that does not explicitly capture this or a variable with automatic storage duration (this excludes any id-expression that has been found to refer to an initcapture\u2019s associated non-static data member), is said to implicitly capture the entity (i.e., this or a variable) if the compound-statement:</p>\n<ul>\n<li>odr-uses the entity, or</li>\n<li>names the entity in a potentially-evaluated expression where the enclosing full-expression depends on a generic lambda parameter declared within the reaching scope of the lambda-expression.</li>\n</ul>\n<p id=\"so_38750777_38750777_1\">[ Example:</p>\n<pre><code>void f(int, const int (&amp;)[2] = {}) { } // #1\nvoid f(const int&amp;, const int (&amp;)[1]) { } // #2\nvoid test() {\n  const int x = 17;\n  auto g = [](auto a) {\n    f(x); // OK: calls #1, does not capture x\n  };\n  auto g2 = [=](auto a) {\n    int selector[sizeof(a) == 1 ? 1 : 2]{};\n    f(x, selector); // OK: is a dependent expression, so captures x\n  };\n}\n</code></pre>\n<p id=\"so_38750777_38750777_2\">\u2014end example ]</p>\n<p id=\"so_38750777_38750777_3\">All such implicitly captured entities shall be declared within the reaching scope of the lambda expression.</p>\n<p id=\"so_38750777_38750777_4\">[ Note: The implicit capture of an entity by a nested lambda-expression can cause its implicit capture by the containing lambda-expression (see below). Implicit odr-uses of this can result in implicit capture. \u2014end note ]</p>\n</blockquote>\n<p>I thought that the beginning of a phrase <code>a lambda-expression with an associated capture-default</code> should prohibit any implicit capture (and it's confirmed by comment), therefore <code>#1</code> call will lead to an error (something about using not captured variable). So how it works? What will be first argument of <code>f</code>? What if <code>g</code> will be called after exiting <code>test()</code> scope? What if I change <code>#1</code> signature to <code>void(const int&amp;)</code>?</p>\n<p>--</p>\n<p>upd: Thanks to all for explanation of how it works. Later I'll try to find and post references to standard about this case.</p>\n", "Title": "Using of not captured variable in lambda", "CreationDate": "2016-08-03T18:07:01.923", "LastActivityDate": "2016-08-04T09:47:21.683", "CommentCount": "2", "LastEditDate": "2016-08-04T09:47:21.683", "PostTypeId": "1", "LastEditorUserId": "2018010", "Id": "38750777", "Score": "4", "OwnerUserId": "2018010", "Tags": "<c++><lambda><standards><c++14>", "AnswerCount": "1"}, "38752647": {"Id": "38752647", "PostTypeId": "2", "Body": "<p>As T.C. said in his comment, #1 does not require a capture as <code>x</code> is known at compile time and is therefore baked into the lambda. Not unlike how the function <code>f</code> is known at compile time so it doesn't need to be captured.</p>\n<p>I believe if you change <code>f</code>'s signature to <code>int const &amp;</code> you are now attempting to pass the address of the constant which is on the stack, thus subject to changes, and it would require capturing <code>x</code> by value or reference.</p>\n", "LastActivityDate": "2016-08-03T20:03:23.390", "CommentCount": "0", "CreationDate": "2016-08-03T20:03:23.390", "ParentId": "38750777", "Score": "0", "OwnerUserId": "973872"}});