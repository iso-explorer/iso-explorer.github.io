post_cb({"bq_ids": {"n4140": {"so_38689286_38692249_6": {"length": 26, "quality": 0.8387096774193549, "section_id": 1868}, "so_38689286_38692249_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5761}, "so_38689286_38692249_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 1900}, "so_38689286_38692249_0": {"length": 50, "quality": 0.5681818181818182, "section_id": 1866}, "so_38689286_38692249_3": {"length": 13, "quality": 0.8125, "section_id": 5761}, "so_38689286_38692249_4": {"length": 13, "quality": 0.8666666666666667, "section_id": 5762}}, "n3337": {"so_38689286_38692249_6": {"length": 19, "quality": 0.6129032258064516, "section_id": 1862}, "so_38689286_38692249_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5534}, "so_38689286_38692249_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 1889}, "so_38689286_38692249_0": {"length": 50, "quality": 0.5681818181818182, "section_id": 1860}, "so_38689286_38692249_3": {"length": 13, "quality": 0.8125, "section_id": 5534}, "so_38689286_38692249_4": {"length": 13, "quality": 0.8666666666666667, "section_id": 5535}}, "n4659": {"so_38689286_38692249_2": {"length": 17, "quality": 0.7391304347826086, "section_id": 7217}, "so_38689286_38692249_0": {"length": 50, "quality": 0.5681818181818182, "section_id": 2038}, "so_38689286_38692249_6": {"length": 26, "quality": 0.8387096774193549, "section_id": 2040}}}, "38692249": {"Id": "38692249", "PostTypeId": "2", "Body": "<p>According to the C++ standard(N4296),</p>\n<p>\u00a7 21.5</p>\n<blockquote id=\"so_38689286_38692249_0\">\n<h2>21.5 Numeric conversions [string.conversions]</h2>\n<ol>\n<li><em>Effects:</em> the first two functions call <code>strtol(str.c_str(), ptr, base)</code>, and the last three functions\n  call <code>strtoul(str.c_str(), ptr, base)</code>, <code>strtoll(str.c_str(), ptr, base)</code>, and <code>strtoull(\n  str.c_str(), ptr, base)</code>, respectively. Each function returns the converted result, if any. The argument\n  ptr designates a pointer to an object internal to the function that is used to determine what\n  to store at <code>*idx</code>. If the function does not throw an exception and <code>idx != 0</code>, the function stores in\n  <code>*idx</code> the index of the first unconverted element of str.</li>\n<li><em>Returns:</em> The converted result.</li>\n<li><em>Throws:</em> <code>invalid_argument</code> if <code>strtol</code>, <code>strtoul</code>, <code>strtoll</code>, or <code>strtoull</code> reports that no conversion\n  could be performed. Throws <code>out_of_range</code> if <code>strtol</code>, <code>strtoul</code>, <code>strtoll</code> or <code>strtoull</code> sets <code>errno</code> to\n  <code>ERANGE</code>, or if the converted value is outside the range of representable values for the return type.</li>\n</ol>\n</blockquote>\n<p>What is <code>strtol</code>?</p>\n<p>\u00a7 21.8</p>\n<blockquote>\n<h2>21.8 Null-terminated sequence utilities [c.strings]</h2>\n<ol>\n<li><strong>Tables</strong> 74, 75, 76, 77, <strong>78</strong>, and 79 describe headers <code>&lt;cctype&gt;</code>, <code>&lt;cwctype&gt;</code>, <code>&lt;cstring&gt;</code>, <code>&lt;cwchar&gt;</code>, <strong><code>&lt;cstdlib&gt;</code></strong>\n  (character conversions), and <code>&lt;cuchar&gt;</code>, respectively.</li>\n<li><strong>The contents of these headers shall be the same as the Standard C Library headers</strong> <code>&lt;ctype.h&gt;</code>, <code>&lt;wctype.h&gt;</code>,\n  <code>&lt;string.h&gt;</code>, <code>&lt;wchar.h&gt;</code>, and <strong><code>&lt;stdlib.h&gt;</code></strong> and the C Unicode TR header <code>&lt;uchar.h&gt;</code>, respectively, with the\n  following modifications:</li>\n</ol>\n<h3>Table 78 \u2014 Header <code>&lt;cstdlib&gt;</code> synopsis</h3>\n<p id=\"so_38689286_38692249_1\"><strong>Type Name(s)</strong><br>\n<strong>Macros:</strong> MB_CUR_MAX<br>\n<strong>Functions:</strong><br>\n  atof mblen strtof <strong>strtoul</strong><br>\n  atoi mbtowc <strong>strtol strtoull</strong><br>\n  atol mbstowcs strtold wctomb\n  atoll strtod <strong>strtoll</strong> wcstombs</br></br></br></br></br></p>\n</blockquote>\n<p>What the meaning of <code>Standard C Library</code>?</p>\n<p>\u00a7 1.2</p>\n<blockquote>\n<h2>1.2 Normative references [intro.refs]</h2>\n<ol>\n<li><p id=\"so_38689286_38692249_2\">The following referenced documents are indispensable for the application of this document. For dated references,\n  only the edition cited applies. For undated references, the latest edition of the referenced document\n  (including any amendments) applies.</p>\n<p id=\"so_38689286_38692249_3\">(1.3) \u2014 ISO/IEC 9899:1999, Programming languages \u2014 C<br>\n  (1.4) \u2014 ISO/IEC 9899:1999/Cor.1:2001(E), Programming languages \u2014 C, Technical Corrigendum 1<br>\n  (1.5) \u2014 ISO/IEC 9899:1999/Cor.2:2004(E), Programming languages \u2014 C, Technical Corrigendum 2</br></br></p></li>\n<li><p id=\"so_38689286_38692249_4\">The library described in Clause 7 of ISO/IEC 9899:1999 and Clause 7 of ISO/IEC 9899:1999/Cor.1:2001\n  and Clause 7 of ISO/IEC 9899:1999/Cor.2:2003 is hereinafter called the C standard library.1</p></li>\n</ol>\n</blockquote>\n<p>So, we need to watch C99 standard.</p>\n<p>According to the C99 standard(N1124)</p>\n<p>\u00a77.20.1.4</p>\n<blockquote id=\"so_38689286_38692249_5\">\n<h2>7.20.1.4 The strtol, strtoll, strtoul, and strtoull functions</h2>\n<ol start=\"2\">\n<li>Description<br>\n  The <code>strtol</code>, <code>strtoll</code>, <code>strtoul</code>, and <code>strtoull</code> functions <strong>convert the initial portion of the string pointed to by <code>nptr</code></strong> to <code>long int</code>, <code>long long int</code>, <code>unsigned long int</code>, and <code>unsigned long long int</code> representation, respectively. First, they decompose the input string into three parts: an initial, possibly empty, sequence of\n  white-space characters (as specified by the <code>isspace</code> function), a subject sequence resembling an integer represented in some radix determined by the value of <code>base</code>, and a <strong>final string of one or more unrecognized characters, including the terminating null character of the input string. Then, they attempt to convert the subject sequence to an integer, and return the result</strong>.</br></li>\n<li>If the value of <code>base</code> is zero, the expected form of the subject sequence is that of an integer constant as described in 6.4.4.1, optionally preceded by a plus or minus sign, but not including an integer suffix. If the value of <code>base</code> is between 2 and 36 (inclusive), the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by <code>base</code>, optionally preceded by a plus or minus sign,\n  but not including an integer suffix. <strong>The letters from <code>a</code> (or <code>A</code>) through <code>z</code> (or <code>Z</code>) are ascribed the values 10 through 35; only letters and digits whose ascribed values are less than that of <code>base</code> are permitted. If the value of <code>base</code> is 16, the characters <code>0x</code> or <code>0X</code> may optionally precede the sequence of letters and digits, following the sign if present</strong>.</li>\n<li>The subject sequence is defined as the longest <strong>initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form</strong>. The subject sequence contains no characters if the input string is empty or consists entirely of white space, or if the first non-white-space character is other than a sign or a permissible letter\n  or digit.</li>\n<li>If the subject sequence has the expected form and the value of <code>base</code> is zero, the sequence of characters starting with the first digit is interpreted as an integer constant according to the rules of 6.4.4.1. If the subject sequence has the expected form and the value of <code>base</code> is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated (in the return type). A pointer to the final string is stored in the object pointed to by <code>endptr</code>, provided that <code>endptr</code> is not a null pointer.</li>\n<li>In other than the <code>\"C\"</code> locale, additional locale-specific subject sequence forms may be accepted.</li>\n<li><strong>If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of <code>nptr</code> is stored in the object pointed to by <code>endptr</code></strong>, provided that <code>endptr</code> is not a null pointer.</li>\n<li>Returns<br>\n  The <code>strtol</code>, <code>strtoll</code>, <code>strtoul</code>, and <code>strtoull</code> functions return the converted value, if any. <strong>If no conversion could be performed, zero is returned</strong>. <strong>If the correct value is outside the range of representable values</strong>, <code>LONG_MIN</code>, <code>LONG_MAX</code>, <code>LLONG_MIN</code>, <code>LLONG_MAX</code>, <code>ULONG_MAX</code>, or <code>ULLONG_MAX</code> is returned (according to the return type and sign of the value, if any), and <strong>the value of the macro <code>ERANGE</code> is stored in <code>errno</code></strong>.</br></li>\n</ol>\n</blockquote>\n<p>Now we need to watch C++ standard again.</p>\n<blockquote id=\"so_38689286_38692249_6\">\n<h2>21.5 Numeric conversions [string.conversions]</h2>\n<ol start=\"3\">\n<li><em>Throws:</em> <code>invalid_argument</code> if <code>strtol</code>, <code>strtoul</code>, <code>strtoll</code>, or <code>strtoull</code> reports that no conversion\n  could be performed. Throws <code>out_of_range</code> if <code>strtol</code>, <code>strtoul</code>, <code>strtoll</code> or <code>strtoull</code> sets <code>errno</code> to\n  <code>ERANGE</code>, or if the converted value is outside the range of representable values for the return type.</li>\n</ol>\n</blockquote>\n<p>Now you can understand when <code>invalid_argument</code> and <code>out_of_range</code> exception is thrown, I hope.</p>\n", "LastActivityDate": "2016-08-01T06:28:40.483", "Score": "0", "CreationDate": "2016-08-01T06:28:40.483", "ParentId": "38689286", "CommentCount": "0", "OwnerUserId": "6277384"}, "38689286": {"ViewCount": "537", "Body": "<p>I was converting string values into integer values with std::stoi() in my program when I noticed that it returned integer value of 25 from a string value of \"25,\". </p>\n<p>This confused me because there is an exception thrown for invalid_argument when the string starts with anything but a number. For an example \",25\" would throw an invalid_exception. Based on this I made the assumption that if the entire string value wasn't a number then an exception was thrown. This is not the case I come to realize. For an example \"25,543\" will return 25.</p>\n<p>I ended up making my own function to call std::stoi() only if the entire string value is a number, otherwise, throw an invalid_argument exception.</p>\n<p>With that said, I was wondering why it was designed this way or perhaps I don't understand how it works fully. I rather not keep using it if I am going to keep getting surprises like this realization.</p>\n<p>Update: I checked the documentation from cppreference.com, I am just not experienced enough in to get it fully. I tried to reverse engineer the std::stoi definition but got the point where its was way above my level of experience. I posted this question with intent to both inform others of its functionality and the desire to know the nitty gritty.</p>\n", "Title": "std::stoi() takes first number in string?", "CreationDate": "2016-07-31T23:34:41.550", "LastActivityDate": "2016-08-01T06:28:40.483", "CommentCount": "18", "LastEditDate": "2016-08-01T00:53:42.333", "PostTypeId": "1", "LastEditorUserId": "6611111", "Id": "38689286", "Score": "-6", "OwnerUserId": "6611111", "Tags": "<c++><string><int><invalid-argument>", "AnswerCount": "1"}});