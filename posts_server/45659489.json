post_cb({"bq_ids": {"n4140": {"so_45659489_45684064_0": {"length": 23, "quality": 0.92, "section_id": 5744}}, "n3337": {"so_45659489_45684064_0": {"length": 23, "quality": 0.92, "section_id": 5527}}, "n4659": {"so_45659489_45684064_0": {"length": 23, "quality": 0.92, "section_id": 7191}}}, "45659517": {"Id": "45659517", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45659489_45659517_0\">Can you please explain to me why including an arbitrary STL header resolves this problem, </p>\n</blockquote>\n<p>Because many standard headers include other ones in their implementation.</p>\n<blockquote>\n<p id=\"so_45659489_45659517_1\">and how I should go about resolving it correctly?</p>\n</blockquote>\n<p>Include the headers that are dedicated to contain these missing functions/types.<br>\nIn your case that is the <code>&lt;iterator&gt;</code>, <code>&lt;initializer_list&gt;</code> header according to the <a href=\"http://en.cppreference.com/w/cpp/iterator/begin\" rel=\"nofollow noreferrer\">documentation</a>.</br></p>\n", "LastActivityDate": "2017-08-13T10:45:58.150", "CommentCount": "4", "CreationDate": "2017-08-13T10:45:58.150", "ParentId": "45659489", "Score": "4", "OwnerUserId": "8242698"}, "45659489": {"ViewCount": "178", "Body": "<p>I have this global function in my program:</p>\n<pre><code>static bool IsValidType(const CString&amp; cType)\n{\n    for (auto pType : {\"bmp\",\"jpg\",\"jpeg\",\"gif\",\"tif\",\"tiff\",\"png\"})\n        if (cType == CString(pType))\n            return true;\n    return false;\n}\n</code></pre>\n<p>And it gives me the following compilation errors:</p>\n<pre><code>error C3312: no callable 'begin' function found for type 'initializer-list'\nerror C3312: no callable 'end' function found for type 'initializer-list'\nerror C2065: 'pType' : undeclared identifier\n</code></pre>\n<p>I can resolve it by including an arbitrary STL header before the function body, for example:</p>\n<pre><code>#include &lt;string&gt;\nstatic bool IsValidType(const CString&amp; cType)\n{\n    ...\n}\n</code></pre>\n<p>But of course, I don't think that this is the correct way to do it.</p>\n<p>Can you please explain to me why including an arbitrary STL header resolves this problem, and how I should go about resolving it correctly?</p>\n<p>Thank you.</p>\n", "Title": "Why does including an arbitrary STL header resolves these compilation errors?", "CreationDate": "2017-08-13T10:41:50.233", "LastActivityDate": "2017-08-14T22:41:22.353", "CommentCount": "7", "PostTypeId": "1", "Id": "45659489", "Score": "4", "OwnerUserId": "7400903", "Tags": "<c++><stl>", "AnswerCount": "3"}, "45659521": {"Id": "45659521", "PostTypeId": "2", "Body": "<p>Since you are using <a href=\"http://en.cppreference.com/w/cpp/utility/initializer_list\" rel=\"noreferrer\">initializer_list</a> you should include <code>initializer_list</code>.</p>\n<pre><code>#include &lt;initializer_list&gt;\n</code></pre>\n<p>Including <code>string</code> resolve the error as <code>string</code> probably includes <code>initializer_list</code>, but that kind of indirect include is not the recommended way.</p>\n", "LastActivityDate": "2017-08-13T10:46:56.970", "CommentCount": "0", "CreationDate": "2017-08-13T10:46:56.970", "ParentId": "45659489", "Score": "8", "OwnerUserId": "377953"}, "45684064": {"Id": "45684064", "PostTypeId": "2", "Body": "<p>Not <em>an arbitrary</em> STL header.</p>\n<p>If you look at the definitions of <code>std::begin</code> and <code>std::end</code> in the standard, it says: (in [iterator.container]/p1):</p>\n<blockquote>\n<p id=\"so_45659489_45684064_0\">1 In addition to being available via inclusion of the <code>&lt;iterator&gt;</code> header, the function templates in 27.8 are available when any of the following headers are included: <code>&lt;array&gt;</code>, <code>&lt;deque&gt;</code>, <code>&lt;forward_list&gt;</code>, <code>&lt;list&gt;</code>,<code>&lt;map&gt;</code>, <code>&lt;regex&gt;</code>, <code>&lt;set&gt;</code>, <code>&lt;string&gt;</code>, <code>&lt;unordered_map&gt;</code>, <code>&lt;unordered_set&gt;</code>, and <code>&lt;vector&gt;</code>.</p>\n</blockquote>\n<p>Amusingly enough, <code>&lt;string_view&gt;</code> is not on that list.</p>\n<ul>\n<li>There's an <a href=\"http://cplusplus.github.io/LWG/lwg-active.html#3009\" rel=\"nofollow noreferrer\">existing defect report</a> report about that.</li>\n<li>libc++, at least, <em>does</em> define <code>std::begin</code> and <code>std::end</code> if you include <code>&lt;string_view&gt;</code>.</li>\n</ul>\n", "LastActivityDate": "2017-08-14T22:41:22.353", "CommentCount": "2", "CreationDate": "2017-08-14T22:41:22.353", "ParentId": "45659489", "Score": "1", "OwnerUserId": "992490"}});