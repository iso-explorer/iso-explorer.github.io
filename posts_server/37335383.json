post_cb({"37335428": {"CommentCount": "0", "Body": "<p>No, that cannot work because the evaluation of function arguments is not sequenced. It also does not work because the standard does not allow it, but I guess that was obvious.</p>\n<p>Use an overload instead:</p>\n<pre><code>void fun(int, int) {}\n\nvoid fun(int i) {\n    fun(i, i);\n}\n</code></pre>\n", "CreationDate": "2016-05-19T23:03:47.570", "ParentId": "37335383", "Id": "37335428", "LastActivityDate": "2016-05-19T23:03:47.570", "PostTypeId": "2", "Score": "70", "OwnerUserId": "3002139"}, "37345546": {"CreationDate": "2016-05-20T11:29:27.900", "CommentCount": "0", "Body": "<p>You cannot do things like that because the standard does not allow it. However since default arguments effectively just define new function overloads, you can get the desired effect by explicitly defining such an overload:</p>\n<pre><code>void RateLimiter(unsigned int rateInPermitsPerSecond, \n                 unsigned int maxAccumulatedPermits);\n\ninline void RateLimiter(unsigned int rateInPermitsPerSecond)\n{ return RateLimiter(rateInPermitsPerSecond,rateInPermitsPerSecond); }\n</code></pre>\n<p>This shows that the standard forbidding this is half-hearted, as suggested by the language (\"Consequently... shall not...\"). They just did not want to go through the hassle of making this well defined with the same effect as what the explicit overload declaration would do: if desired, they could have specified that defaulted arguments are evaluated after explicitly provided ones, and from left to right. This would not have any influence on the rule that the evaluation order of argument expressions in a function call is unspecified (because default arguments do not correspond to such expressions; they are entirely separate and not even in the same lexical scope). On the other hand if (as they did) they preferred to disallow this, they could have just said \"shall not\" without need to justify themselves from some other rule (but maybe with explanatory footnote).</p>\n", "Id": "37345546", "OwnerUserId": "1436796", "LastEditDate": "2016-05-21T12:16:20.000", "ParentId": "37335383", "LastActivityDate": "2016-05-21T12:16:20.000", "PostTypeId": "2", "Score": "11", "LastEditorUserId": "1436796"}, "bq_ids": {"n4140": {"so_37335383_37335422_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 3260}}, "n3337": {"so_37335383_37335422_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 3132}}}, "37335383": {"CreationDate": "2016-05-19T22:59:40.513", "ViewCount": "3978", "FavoriteCount": "1", "Id": "37335383", "AcceptedAnswerId": "37335422", "Score": "57", "Title": "Can a C++ default argument be initialized with another argument?", "LastEditorUserId": "63550", "CommentCount": "8", "Body": "<p>For a default argument in C++, does the value need to be a constant or will another argument do?</p>\n<p>That is, can the following work?</p>\n<pre><code>RateLimiter(unsigned double rateInPermitsPerSecond, \n            unsigned int maxAccumulatedPermits = rateInPermitsPerSecond);\n</code></pre>\n<p>Currently I am getting an error:</p>\n<blockquote>\n<p id=\"so_37335383_37335383_0\">RateLimiter.h:13: error: \u2018rateInPermitsPerSecond\u2019 was not declared in this scope</p>\n</blockquote>\n", "ClosedDate": "2017-09-23T16:59:31.060", "LastEditDate": "2016-05-21T10:09:31.307", "Tags": "<c++>", "LastActivityDate": "2016-05-25T05:21:23.497", "PostTypeId": "1", "AnswerCount": "5", "OwnerUserId": "1918858"}, "37428391": {"CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_37335383_37428391_0\">For a default argument in C++, does the value need to be a constant or will another argument do?</p>\n</blockquote>\n<p>The default value of an argument cannot be another argument. However, that does not mean it has to be a constant. It can be the return value of a function call.</p>\n<pre><code>int getNextDefaultID()\n{\n   static int id = 0;\n   return ++id;\n}\n\nstruct Foo\n{\n   Foo(int data, int id = getNextDefaultID()) : data_(data), id_(id) {}\n   int data_;\n   int id_;\n};\n\nint main()\n{\n    Foo f1(10);      // Gets the next default ID.\n    Foo f2(20, 999); // ID is specified.\n}\n</code></pre>\n", "CreationDate": "2016-05-25T05:21:23.497", "ParentId": "37335383", "Id": "37428391", "LastActivityDate": "2016-05-25T05:21:23.497", "PostTypeId": "2", "Score": "2", "OwnerUserId": "434551"}, "37335556": {"CreationDate": "2016-05-19T23:17:04.107", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_37335383_37335556_0\">I was looking for an logical explanation for why it is not allowed</p>\n</blockquote>\n<p>This is actually a good question. The reason is that C++ does not mandate the order of evaluation of arguments.</p>\n<p>So let's imagine a slightly more complex scenario:</p>\n<pre><code>int f(int a, int b = ++a);\n\n... followed by ...\n\nint a = 1;\nf(a);\n</code></pre>\n<p>C++ does not mandate the order of evaluation of arguments, remember?</p>\n<p>So what should be the value of b?</p>\n<p><code>f(a)</code> can evaluate to either:</p>\n<p><code>f(1, 2)</code>, or\n<code>f(2, 2)</code>, depending on the order of evaluation of the arguments.</p>\n<p>Thus the behaviour would be undefined (and even undefinable).</p>\n<p>Further, consider what might happen when a and b were complex objects whose constructors and copy operators had side-effects.</p>\n<p>The order of those side-effects would be undefined.</p>\n", "Id": "37335556", "OwnerUserId": "2015579", "LastEditDate": "2016-05-21T10:11:38.723", "ParentId": "37335383", "LastActivityDate": "2016-05-21T10:11:38.723", "PostTypeId": "2", "Score": "36", "LastEditorUserId": "63550"}, "37335422": {"CommentCount": "0", "Body": "<p>Another argument cannot be used as the default value. The standard states:</p>\n<blockquote>\n<p id=\"so_37335383_37335422_0\"><strong>8.3.6 Default arguments</strong><br>...<br>\n<sup>9</sup> A default argument is evaluated each time the function is called with no argument for the corresponding\n  parameter. The order of evaluation of function arguments is unspecified. Consequently, parameters of a\n  function shall not be used in a default argument, even if they are not evaluated.</br></br></p>\n</blockquote>\n<p>and illustrates it with the following sample:</p>\n<pre><code>int f(int a, int b = a); // error: parameter a\n                         // used as default argument\n</code></pre>\n", "CreationDate": "2016-05-19T23:03:09.317", "ParentId": "37335383", "Id": "37335422", "LastActivityDate": "2016-05-19T23:03:09.317", "PostTypeId": "2", "Score": "78", "OwnerUserId": "3246555"}});