post_cb({"bq_ids": {"n4140": {"so_22186751_22186816_1": {"length": 14, "quality": 1.0, "section_id": 7038}}, "n3337": {"so_22186751_22186816_1": {"length": 14, "quality": 1.0, "section_id": 6784}}, "n4659": {"so_22186751_22186816_1": {"length": 14, "quality": 1.0, "section_id": 8535}}}, "22186839": {"Id": "22186839", "PostTypeId": "2", "Body": "<p>Your example of overloading of the postincrement operator is wrong.</p>\n<p>Intsead of </p>\n<pre><code>// Passing dummy int argument is to mention overloading of post-increment  \nMyIncrDecrClass&amp; operator++(int)  \n{ \n    this-&gt;m_nCounter++; \n    return *this; \n} \n</code></pre>\n<p>there should be</p>\n<pre><code>// Passing dummy int argument is to mention overloading of post-increment  \nMyIncrDecrClass operator ++( int )  \n{\n    MyIncrDecrClass tmp( *this );\n\n    ++this-&gt;m_nCounter; \n\n    return tmp; \n}\n</code></pre>\n<p>ALso your problem is totally unclear. You defined in fact the same operator twice</p>\n<pre><code>VLongInt&amp; VLongInt::operator++()\n{\n    //...\n    return *this;\n}\n\nVLongInt&amp; VLongInt::operator++()\n{\n    //...\n    return *this;\n}\n</code></pre>\n<p>I do not see a difference. Moreover you did not show your class definition and as the result nothing can be said about your problem. It is unknown.</p>\n<p>At least as you said yourself your postincrement operator should be declared with a dummy parameter of type <code>int</code>. And it has to return a temporary object.</p>\n<pre><code>VLongInt  VLongInt::operator ++( int )\n</code></pre>\n<p>or </p>\n<pre><code>const VLongInt  VLongInt::operator ++( int )\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-03-05T01:51:27.680", "Score": "2", "CreationDate": "2014-03-05T01:42:38.880", "ParentId": "22186751", "CommentCount": "5", "OwnerUserId": "2877241", "LastEditDate": "2014-03-05T01:51:27.680"}, "22186751": {"ViewCount": "66", "Body": "<pre><code>// The following operator++() represents overloading of pre-increment \nMyIncrDecrClass&amp; operator++()  \n{ \n    ++this-&gt;m_nCounter; \n    return *this; \n} \n\n// Passing dummy int argument is to mention overloading of post-increment  \nMyIncrDecrClass&amp; operator++(int)  \n{ \n    this-&gt;m_nCounter++; \n    return *this; \n} \n</code></pre>\n<p>So this is how a post and pre increment operator are implemented, but in my case I can't really implement it like that, so this is what I did:</p>\n<pre><code>VLongInt&amp; VLongInt::operator++()\n{\n    ... //BUILD TEMP vector\n    this-&gt;vec = temp;\n    return *this;\n}\n\nVLongInt&amp; VLongInt::operator++(int)\n{\n    this-&gt;vec = this.vec; //seems unnecessary\n    ... //BUILD TEMP vector\n    this-&gt;vec = temp\n    return *this;\n}\n</code></pre>\n<p>Is there anything wrong? It seems that both should be implemented the same way. Only the header file should differ, right?</p>\n", "AcceptedAnswerId": "22186839", "Title": "Redundancy in post-increment overloading?", "CreationDate": "2014-03-05T01:32:05.837", "Id": "22186751", "CommentCount": "9", "LastEditDate": "2015-12-07T17:18:13.020", "PostTypeId": "1", "LastEditorUserId": "2877241", "LastActivityDate": "2015-12-07T17:18:13.020", "Score": "0", "OwnerUserId": "2967016", "Tags": "<c++><operator-overloading><operators><overloading>", "AnswerCount": "2"}, "22186816": {"Id": "22186816", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_22186751_22186816_0\">Is there anything wrong?</p>\n</blockquote>\n<p>Yes, with your code you are violating the ODR (one definition rule). Which is defined in \u00a7 3.2/1 as:</p>\n<blockquote>\n<p id=\"so_22186751_22186816_1\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n<p>You should define these two functions instead:</p>\n<pre><code>VLongInt&amp; VLongInt::operator++();\nconst VLongInt VLongInt::operator++(int);\n</code></pre>\n<p>Specifically, please, note that the post increment operator should return either <code>const T</code> or <code>T</code> (with <code>T</code> being your class type).</p>\n", "LastEditorUserId": "493122", "LastActivityDate": "2014-03-05T01:53:54.107", "Score": "0", "CreationDate": "2014-03-05T01:40:05.957", "ParentId": "22186751", "CommentCount": "2", "OwnerUserId": "493122", "LastEditDate": "2014-03-05T01:53:54.107"}});