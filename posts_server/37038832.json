post_cb({"bq_ids": {"n4140": {"so_37038832_37039339_0": {"length": 10, "quality": 1.0, "section_id": 5959}, "so_37038832_37039339_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5959}, "so_37038832_37038912_0": {"length": 45, "quality": 1.0, "section_id": 5949}, "so_37038832_37039339_3": {"length": 8, "quality": 1.0, "section_id": 5959}, "so_37038832_37038832_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 557}, "so_37038832_37039339_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 5949}}, "n3337": {"so_37038832_37039339_0": {"length": 10, "quality": 1.0, "section_id": 5728}, "so_37038832_37039339_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5728}, "so_37038832_37038912_0": {"length": 45, "quality": 1.0, "section_id": 5719}, "so_37038832_37039339_3": {"length": 8, "quality": 1.0, "section_id": 5728}, "so_37038832_37038832_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 548}, "so_37038832_37039339_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 5719}}, "n4659": {"so_37038832_37039339_0": {"length": 10, "quality": 1.0, "section_id": 7440}, "so_37038832_37039339_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 7440}, "so_37038832_37038912_0": {"length": 44, "quality": 0.9777777777777777, "section_id": 7435}, "so_37038832_37039339_3": {"length": 8, "quality": 1.0, "section_id": 7440}, "so_37038832_37038832_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 580}, "so_37038832_37039339_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 7435}}}, "37038912": {"Id": "37038912", "PostTypeId": "2", "Body": "<p>Since <code>a</code> is a non-static member function, <code>a()</code> is interpreted as <code>(*this).a()</code>. Quoting in part from [expr.prim.general]/3,</p>\n<blockquote>\n<p id=\"so_37038832_37038912_0\">If a declaration declares a member function or member function template of a class <code>X</code>, the expression <code>this</code>\n  is a prvalue of type \u201cpointer to <em>cv-qualifier-seq</em> <code>X</code>\u201d between the optional <em>cv-qualifer-seq</em> and the end of the\n  <em>function-definition</em>, <em>member-declarator</em>, or <em>declarator</em>. It shall not appear before the optional <em>cv-qualifier-seq</em>\n  and it shall not appear within the declaration of a static member function (although its type and value\n  category are defined within a static member function as they are within a non-static member function).</p>\n</blockquote>\n<p>The <em>trailing-return-type</em> comes after the optional <em>cv-qualifier-seq</em> (omitted in your examples, since <code>S::b</code> is not cv-qualified) so <code>this</code> can appear there, but it cannot appear before.</p>\n", "LastActivityDate": "2016-05-04T22:07:50.523", "Score": "18", "CreationDate": "2016-05-04T22:07:50.523", "ParentId": "37038832", "CommentCount": "5", "OwnerUserId": "481267"}, "37038832": {"ViewCount": "460", "Body": "<p>Consider following code: <a href=\"http://ideone.com/OXG7s1\">(Ideone)</a></p>\n<pre><code>struct S\n{\n    int a() {return 0;}\n    decltype(a()) b() {return 1;}\n};\n</code></pre>\n<p>It gives me following error:</p>\n<blockquote>\n<p id=\"so_37038832_37038832_0\">error: cannot call member function 'int S::a()' without object</p>\n</blockquote>\n<p><br>\nOn the other hand, this code compiles fine: <a href=\"http://ideone.com/JXOghO\">(Ideone)</a></br></p>\n<pre><code>struct S\n{\n    int a() {return 0;}\n    auto b() -&gt; decltype(a()) {return 1;}\n};\n</code></pre>\n<p><br>\nWhy one example works, but another fails to compile?</br></p>\n<p>Is compiler behavior fully correct in both examples?</p>\n<p>If compiler is correct, then why the standard mandates such strange behavior?</p>\n", "AcceptedAnswerId": "37038912", "Title": "Inside of a class, why `auto b() -> decltype(a()) {}` works, but `decltype(a()) b() {}` does not?", "CreationDate": "2016-05-04T22:01:13.710", "Id": "37038832", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-05-04T22:08:21.383", "LastEditorUserId": "2752075", "LastActivityDate": "2016-05-05T00:36:36.800", "Score": "21", "OwnerUserId": "2752075", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "37039339": {"Id": "37039339", "PostTypeId": "2", "Body": "<p>A few additions to <a href=\"https://stackoverflow.com/a/37038912/4143855\">@Brian's answer</a>:</p>\n<ol>\n<li><p>In the first example, the <code>a()</code> is <em>not</em> transformed to <code>(*this).a()</code>. That transformation is specified in <a href=\"http://eel.is/c++draft/class.mfct.non-static#3\" rel=\"nofollow noreferrer\">[class.mfct.non-static]/3</a> and only takes place \"in a context where <code>this</code> can be used\". Without this transformation, the code is then ill-formed for violating <a href=\"http://eel.is/c++draft/expr.prim.id#2\" rel=\"nofollow noreferrer\">[expr.prim.id]/2</a>:</p>\n<blockquote>\n<p id=\"so_37038832_37039339_0\">An <em>id-expression</em> that denotes a non-static data member or non-static\n  member function of a class can only be used:</p>\n<ul>\n<li><p id=\"so_37038832_37039339_1\">as part of a class member access ([expr.ref]) in which the object expression refers to the member's class<sup>63</sup> or a class\n  derived from that class, or</p></li>\n<li><p id=\"so_37038832_37039339_2\">to form a pointer to member ([expr.unary.op]), or</p></li>\n<li><p id=\"so_37038832_37039339_3\">if that <em>id-expression</em> denotes a non-static data member and it appears in an unevaluated operand.</p></li>\n</ul>\n</blockquote>\n<p>by using the <em>id-expression</em> <code>a</code>, which denotes a non-static member function, outside the allowed contexts.</p></li>\n<li><p>The fact that the transformation to class-member access doesn't take place is important because it makes the following code valid:</p>\n<pre><code>struct A {\n    int a;\n    decltype(a) b();\n};\n</code></pre>\n<p>If <code>decltype(a)</code> above were transformed into <code>decltype((*this).a)</code>, then the code would be ill-formed.</p></li>\n<li><p><code>*this</code> has a special exemption from the usual rule that the object in a class member access must have complete type (<a href=\"http://eel.is/c++draft/expr.prim.this#2\" rel=\"nofollow noreferrer\">[expr.prim.this]/2</a>):</p>\n<blockquote>\n<p id=\"so_37038832_37039339_4\">Unlike the object expression in other contexts, <code>*this</code> is not required to be of complete type for purposes of class member access ([expr.ref]) outside the member function body.</p>\n</blockquote></li>\n</ol>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-05-05T00:36:36.800", "Score": "10", "CreationDate": "2016-05-04T22:45:13.763", "ParentId": "37038832", "CommentCount": "0", "LastEditDate": "2017-05-23T12:23:02.327", "OwnerUserId": "2756719"}});