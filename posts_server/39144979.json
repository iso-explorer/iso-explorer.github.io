post_cb({"39145103": {"ParentId": "39144979", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2016-08-25T12:17:11.273", "Score": "1", "LastEditorUserId": "6448768", "LastEditDate": "2016-08-25T12:23:12.613", "Id": "39145103", "OwnerUserId": "6448768", "Body": "<p>Within a function of a class (including <code>static</code> functions), <em>all</em> the <code>private</code> member data and functions are accessible, even if you are dealing with a different <em>instance</em> of that class within that function.</p>\n<p>You often exploit this when writing <em>copy constructors</em> and <em>assignment operators</em>.</p>\n<p>(My boss often talks about how he would like to be able to disable this behaviour using some kind of <code>friend = delete;</code> syntax.)</p>\n", "LastActivityDate": "2016-08-25T12:23:12.613"}, "bq_ids": {"n4140": {"so_39144979_39145580_1": {"section_id": 6665, "quality": 0.7777777777777778, "length": 7}, "so_39144979_39145580_0": {"section_id": 6665, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_39144979_39145580_1": {"section_id": 6420, "quality": 0.7777777777777778, "length": 7}, "so_39144979_39145580_0": {"section_id": 6420, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_39144979_39145580_1": {"section_id": 8140, "quality": 0.7777777777777778, "length": 7}, "so_39144979_39145580_0": {"section_id": 8140, "quality": 0.9545454545454546, "length": 21}}}, "39144979": {"CommentCount": "8", "ViewCount": "5017", "PostTypeId": "1", "LastEditorUserId": "5465395", "CreationDate": "2016-08-25T12:11:18.083", "LastActivityDate": "2016-08-26T10:44:32.367", "Title": "Can a Static method access a private method of the same class?", "FavoriteCount": "1", "LastEditDate": "2016-08-26T10:44:32.367", "Id": "39144979", "Score": "12", "Body": "<p>I have this question because of the singleton/named constructor. In both cases, the real constructors are protected or private, neither of which can be accessed from outside. </p>\n<p>For example, a short named constructor is this:</p>\n<pre><code> class A\n{\n  public:\n    static A createA() { return A(0); } // named constructor\n  private:\n    A (int x);\n};\nint main(void)\n{\n   A a = A::createA(); \n}\n</code></pre>\n<p>I thought static method can only access static data member, or access private data/method via an existing object.\nHowever, in the above code, private constructor <code>A()</code> isn't static, and at the time it is being called, no object exists either.\nSo the only explanation I can think of is that static method can access non-static private method of the same class. Can anyone please either affirm or negate my thought, possibly with some lines of explanations? </p>\n<p>I apologize if this is too trivial however the key words are too common and I wasn't able to find an answer in dozens of google pages. Thanks in advance.</p>\n", "Tags": "<c++><static-methods>", "OwnerUserId": "5465395", "AnswerCount": "5"}, "39145580": {"ParentId": "39144979", "CommentCount": "0", "CreationDate": "2016-08-25T12:39:29.437", "OwnerUserId": "2352671", "PostTypeId": "2", "Id": "39145580", "Score": "3", "Body": "<p>According to the standard <em>\u00a711/p2 Member access control [class.access] <strong>(Emphasis Mine)</strong></em></p>:\n<blockquote>\n<p id=\"so_39144979_39145580_0\"><strong>A member of a class can also access all the names to which the class\n  has access.</strong> A local class of a member function may access the same\n  names that the member function itself may access.<sup>113</sup></p>\n<p id=\"so_39144979_39145580_1\"><sub>113) Access permissions are thus transitive and cumulative to nested and local classes</sub>.</p>\n</blockquote>\n<p>Since a static member function is a member of a class it has access to all the names to which the class has access and consequently to the constructor of the class itself.</p>\n<p>Consequently, in your example:</p>\n<pre><code>class A {\n  A(int x);  \npublic:\n  static A createA() { return A(0); } // named constructor  \n};\n</code></pre>\n<p>static member function <code>A::createA()</code> has access to call <code>private</code> constructor <code>A::A(int)</code>.</p>\n", "LastActivityDate": "2016-08-25T12:39:29.437"}, "39145125": {"ParentId": "39144979", "CommentCount": "2", "CreationDate": "2016-08-25T12:18:24.253", "OwnerUserId": "1683161", "PostTypeId": "2", "Id": "39145125", "Score": "1", "Body": "<p>Yes, it can. The static function can access private members, but other than that it is just like any function defined outside of the class. Especially, since it doesn't have a <code>this</code> pointer (ie. is not \"bound\" to any specific instance), you won't be able to access any members directly (which are always \"bound\" to an instance): if you wanted to do that, you need a an instance from somewhere:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\n  public:\n    static A createA() { return A(0); }\n    static void dosomething(A *a) { return a-&gt;something(); }\n  private:\n    A (int x) { cout &lt;&lt; \"ctor\" &lt;&lt; endl; }\n    void something() { cout &lt;&lt; \"something\" &lt;&lt; endl; }\n};\n\nint main(void)\n{\n   A a = A::createA(); \n   A::dosomething(&amp;a); \n   return 0;\n}\n</code></pre>\n", "LastActivityDate": "2016-08-25T12:18:24.253"}, "39145061": {"ParentId": "39144979", "CommentCount": "1", "CreationDate": "2016-08-25T12:15:26.993", "OwnerUserId": "3375670", "PostTypeId": "2", "Id": "39145061", "Score": "0", "Body": "<p>Your static method is not accessing any static member nor any non-static member of an existing instance.<br>\nIt's just creating a new instance.</br></p>\n", "LastActivityDate": "2016-08-25T12:15:26.993"}, "39145073": {"ParentId": "39144979", "CommentCount": "6", "CreationDate": "2016-08-25T12:15:56.670", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "39145073", "Score": "9", "Body": "<p>A static member function has the same access rights as a non static member function.  So yes, it can access any public, protected, and private variable in the class.  However you need to pass an instance of the class to the function for the function to be able to access the member.  Otherwise a static function can only directly access any other static member in the class.</p>\n", "LastActivityDate": "2016-08-25T12:15:56.670"}});