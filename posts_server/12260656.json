post_cb({"12260932": {"Id": "12260932", "PostTypeId": "2", "Body": "<p><code>reinterpret_cast</code> between pointer types is defined in terms of <code>static_cast</code> through <code>void *</code>:</p>\n<blockquote>\n<h3>5.2.10 Reinterpret cast [expr.reinterpret.cast]</h3>\n<p id=\"so_12260656_12260932_0\">7 - [...] When a prvalue\n  <code>v</code> of type \u201cpointer to <code>T1</code>\u201d is converted to the type \u201cpointer to <em>cv</em> <code>T2</code>\u201d, the result is <code>static_cast&lt;cv\n  T2*&gt;(static_cast&lt;cv void*&gt;(v))</code> if both <code>T1</code> and <code>T2</code> are <em>standard-layout</em> types and the alignment\n  requirements of <code>T2</code> are no stricter than those of <code>T1</code>, or if either type is <code>void</code>.</p>\n</blockquote>\n<p>So if you're converting between standard-layout object pointer types (e.g. <code>char *</code>) via <code>void *</code>, then <code>static_cast</code> is appropriate for the conversion to/from <code>void *</code>.</p>\n", "LastActivityDate": "2012-09-04T09:53:45.253", "CommentCount": "0", "CreationDate": "2012-09-04T09:53:45.253", "ParentId": "12260656", "Score": "3", "OwnerUserId": "567292"}, "12260656": {"ViewCount": "211", "Body": "<p>I want to covert a void* to char* reinterpret_cast and static_cast, which one is fit for ?<code>static_cast&lt;char*&gt; or reinterpret_cast&lt;char*&gt;</code></p>\n", "AcceptedAnswerId": "12260868", "Title": "which conversion is right in C++?", "CreationDate": "2012-09-04T09:36:45.687", "Id": "12260656", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-09-04T09:39:44.737", "LastEditorUserId": "610351", "LastActivityDate": "2012-09-04T09:55:59.950", "Score": "6", "OwnerUserId": "1400047", "Tags": "<c++><type-conversion>", "AnswerCount": "5"}, "12260713": {"Id": "12260713", "PostTypeId": "2", "Body": "<p><code>static_cast</code> (together with <code>dynamic_cast</code>) is for casting between objects in the same class hierarchy, while <code>reinterpret_cast</code> is to cast between different types completely. So in your case you should go for <code>reinterpret_cast</code>.</p>\n", "LastActivityDate": "2012-09-04T09:39:35.757", "CommentCount": "11", "CreationDate": "2012-09-04T09:39:35.757", "ParentId": "12260656", "Score": "3", "OwnerUserId": "440558"}, "bq_ids": {"n4140": {"so_12260656_12260932_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 6046}}, "n3337": {"so_12260656_12260932_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 5814}}, "n4659": {"so_12260656_12260932_0": {"length": 14, "quality": 0.6363636363636364, "section_id": 7545}}}, "12260764": {"Id": "12260764", "PostTypeId": "2", "Body": "<p><code>reinterpret_cast</code> works for you in this case, but do not make a using it often a common practice, since it's the most dangerous cast. Basically, you can <code>reinterpret_cast</code> totally unrelated pointers, so it's your obligation to take care of the result (i.e. checking if the result is valid for further usage).</p>\n", "LastEditorUserId": "1490355", "LastActivityDate": "2012-09-04T09:52:59.697", "Score": "1", "CreationDate": "2012-09-04T09:42:43.373", "ParentId": "12260656", "CommentCount": "1", "OwnerUserId": "1490355", "LastEditDate": "2012-09-04T09:52:59.697"}, "12260868": {"Id": "12260868", "PostTypeId": "2", "Body": "<p>It's largely a question of style.  <code>static_cast</code> can do any conversion\nwhich is the opposite of an implicit conversion (and which doesn't\nremove <code>const</code> or <code>volatile</code>).  Since <code>char*</code> to <code>void*</code> is implicit,\n<code>static_cast</code> would seem indicated; the usual rule is to use\n<code>static_cast</code> in preference to <code>reinterpret_cast</code> whenever possible.</p>\n<p>Given that this use is particularly dangerous, some coding guidelines\nmight prefer <code>reinterpret_cast</code>, to signal this fact. </p>\n", "LastActivityDate": "2012-09-04T09:49:09.397", "CommentCount": "4", "CreationDate": "2012-09-04T09:49:09.397", "ParentId": "12260656", "Score": "5", "OwnerUserId": "649665"}, "12260848": {"Id": "12260848", "PostTypeId": "2", "Body": "<p>I guess it depends on context: \n    static_cast&lt;&gt; \nshould be used in case when there is implicit conversion.\n    reinterpret_cast&lt;&gt;\nshould be used when both pointers are of different types</p>\n<p>Though reinterpret_cast is not recommended.</p>\n<p>You shouldn't use static_cast for casting down an inheritance hierarchy, but rather dynamic_cast.</p>\n<p>From\n<a href=\"http://msdn.microsoft.com/en-us/library/e0w9f63b(v=vs.80).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/e0w9f63b(v=vs.80).aspx</a></p>\n<p><strong>The reinterpret_cast operator can be used for conversions such as char* to int*, or One_class* to Unrelated_class*, which are inherently unsafe.</strong></p>\n", "LastEditorUserId": "1352064", "LastActivityDate": "2012-09-04T09:55:59.950", "Score": "-1", "CreationDate": "2012-09-04T09:47:41.757", "ParentId": "12260656", "CommentCount": "1", "OwnerUserId": "1352064", "LastEditDate": "2012-09-04T09:55:59.950"}});