post_cb({"13774752": {"Id": "13774752", "PostTypeId": "2", "Body": "<p>This piece of snippet is from c++ primer book. Although I am sure this is wrong.</p>\n<p>Each type parameter must be preceded by the keyword class or typename:</p>\n<pre><code>// error: must precede U with either typename or class\ntemplate &lt;typename T, U&gt; T calc(const T&amp;, const U&amp;);\n</code></pre>\n<p>These keywords have the same meaning and can be used interchangeably inside a template parameter list. A template parameter list can use both keywords:</p>\n<pre><code>// ok: no distinction between typename and class in a template parameter list\ntemplate &lt;typename T, class U&gt; calc (const T&amp;, const U&amp;);\n</code></pre>\n<p>It may seem more intuitive to use the keyword typename rather than class to designate a template type parameter. After all, we can use built-in (nonclass) types as a template type argument. Moreover, typename more clearly indicates that the name that follows is a type name. However, typename was added to C++ after templates were already in widespread use; some programmers continue to use class exclusively</p>\n", "LastActivityDate": "2012-12-08T05:17:21.867", "CommentCount": "0", "CreationDate": "2012-12-08T05:17:21.867", "ParentId": "2023977", "Score": "2", "OwnerUserId": "1610058"}, "2024035": {"Id": "2024035", "PostTypeId": "2", "Body": "<p>For naming template parameters, <code>typename</code> and <code>class</code> are equivalent. \u00a714.1.2:</p>\n<blockquote>\n<p id=\"so_2023977_2024035_0\">There is no semantic difference\n  between class and typename in a\n  template-parameter.</p>\n</blockquote>\n<p><code>typename</code> however is possible in another context when using templates - to hint at the compiler that you are referring to a dependent type. \u00a714.6.2:</p>\n<blockquote>\n<p id=\"so_2023977_2024035_1\">A name used in a template declaration\n  or definition and that is dependent on\n  a template-parameter is assumed not to\n  name a type unless the applicable name\n  lookup finds a type name or the name\n  is qualified by the keyword typename.</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>typename some_template&lt;T&gt;::some_type\n</code></pre>\n<p>Without <code>typename</code> the compiler can't tell in general whether you are referring to a type or not.</p>\n", "LastEditorUserId": "3390466", "LastActivityDate": "2017-01-29T01:33:28.833", "Score": "63", "CreationDate": "2010-01-07T22:06:35.060", "ParentId": "2023977", "CommentCount": "0", "OwnerUserId": "168225", "LastEditDate": "2017-01-29T01:33:28.833"}, "2024067": {"Id": "2024067", "PostTypeId": "2", "Body": "<p>While there is no technical difference, I have seen the two used to denote slightly different things.</p>\n<p>For a template that should accept any type as T, including built-ins (such as an array )</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo { ... }\n</code></pre>\n<p>For a template that will only work where T is a real class.</p>\n<pre><code>template&lt;class T&gt;\nclass Foo { ... }\n</code></pre>\n<p>But keep in mind that this is purely a style thing some people use. Not mandated by the standard or enforced by compilers</p>\n", "LastActivityDate": "2010-01-07T22:12:23.433", "CommentCount": "5", "CreationDate": "2010-01-07T22:12:23.433", "ParentId": "2023977", "Score": "15", "OwnerUserId": "221955"}, "2024173": {"Id": "2024173", "PostTypeId": "2", "Body": "<p><code>typename</code> and <code>class</code> are interchangeable in the basic case of specifying a template:</p>\n<pre><code>template&lt;class T&gt;\nclass Foo\n{\n};\n</code></pre>\n<p>and</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo\n{\n};\n</code></pre>\n<p>are equivalent.</p>\n<p>Having said that, there are specific cases where there is a difference between <code>typename</code> and <code>class</code>.</p>\n<p>The first one is in the case of dependent types. <code>typename</code> is used to declare when you are referencing a nested type that depends on another template parameter, such as the <code>typedef</code> in this example:</p>\n<pre><code>template&lt;typename param_t&gt;\nclass Foo\n{\n    typedef typename param_t::baz sub_t;\n};\n</code></pre>\n<p>The second one you actually show in your question, though you might not realize it:</p>\n<pre><code>template &lt; template &lt; typename, typename &gt; class Container, typename Type &gt;\n</code></pre>\n<p>When specifying a <strong>template template</strong>, the <code>class</code> keyword MUST be used as above -- it is <strong>not</strong> interchangeable with <code>typename</code> in this case <em>(note: since C++17 both keywords are allowed in this case)</em>.</p>\n<p>You also must use <code>class</code> when explicitly instantiating a template:</p>\n<pre><code>template class Foo&lt;int&gt;;\n</code></pre>\n<p>I'm sure that there are other cases that I've missed, but the bottom line is: these two keywords are not equivalent, and these are some common cases where you need to use one or the other.</p>\n", "LastEditorUserId": "3469976", "LastActivityDate": "2017-06-26T13:28:24.467", "Score": "249", "CreationDate": "2010-01-07T22:30:34.170", "ParentId": "2023977", "CommentCount": "6", "OwnerUserId": "79656", "LastEditDate": "2017-06-26T13:28:24.467"}, "bq_ids": {"n4140": {"so_2023977_2024035_0": {"length": 7, "quality": 1.0, "section_id": 55}, "so_2023977_2024035_1": {"length": 19, "quality": 1.0, "section_id": 169}}, "n3337": {"so_2023977_2024035_0": {"length": 7, "quality": 1.0, "section_id": 50}, "so_2023977_2024035_1": {"length": 19, "quality": 1.0, "section_id": 163}}, "n4659": {"so_2023977_2024035_0": {"length": 7, "quality": 1.0, "section_id": 57}, "so_2023977_2024035_1": {"length": 19, "quality": 1.0, "section_id": 174}}}, "2024008": {"Id": "2024008", "PostTypeId": "2", "Body": "<ol>\n<li>No difference\n<li>Template type parameter <code>Container</code> is itself a template with two type parameters.\n</li></li></ol>\n", "LastActivityDate": "2010-01-07T22:03:07.767", "CommentCount": "3", "CreationDate": "2010-01-07T22:03:07.767", "ParentId": "2023977", "Score": "6", "OwnerUserId": "106671"}, "2023977": {"ViewCount": "70645", "Body": "<p>For templates I have seen both declarations:</p>\n<pre><code>template &lt; typename T &gt;\ntemplate &lt; class T &gt;\n</code></pre>\n<p>What's the difference? </p>\n<p>And what exactly do those keywords mean in the following example (taken from the German Wikipedia article about templates)?</p>\n<pre><code>template &lt; template &lt; typename, typename &gt; class Container, typename Type &gt;\nclass Example\n{\n     Container&lt; Type, std::allocator &lt; Type &gt; &gt; baz;\n};\n</code></pre>\n", "AcceptedAnswerId": "2024173", "Title": "Difference of keywords 'typename' and 'class' in templates?", "CreationDate": "2010-01-07T21:59:41.047", "Id": "2023977", "CommentCount": "0", "FavoriteCount": "112", "PostTypeId": "1", "LastEditDate": "2017-07-08T07:48:27.713", "LastEditorUserId": "3980929", "LastActivityDate": "2017-11-11T13:39:38.860", "Score": "269", "OwnerUserId": "127213", "Tags": "<c++><templates><keyword>", "AnswerCount": "5"}});