post_cb({"47361356": {"ParentId": "46191545", "CommentCount": "0", "Body": "<p>For a function to be a coroutine, its return type has to have certain traits defined that describes how the coroutine will work. C++/WinRT defines those traits for their version of <code>IAsyncAction</code> or <code>IAsyncOperation&lt;TResult&gt;</code>. Specifically, there are two methods that handle returning from a coroutine: <code>return_value(...)</code> or <code>return_void()</code>. IAsyncOperation uses the former, and IAsyncAction uses the latter.</p>\n<p>Looking at the latest coroutine spec at the time of this answer, we find what happens if there is no co_return statement in the body of a coroutine function:</p>\n<blockquote>\n<p id=\"so_46191545_47361356_0\">If <code>p.return_void()</code> is a valid expression, flowing off the end of a coroutine is equivalent to a <code>co_return</code> with no operand; otherwise flowing off the end of a coroutine results in undefined behavior.</p>\n<p id=\"so_46191545_47361356_1\">\u2013<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf#page=15\" rel=\"nofollow noreferrer\">\"Programming Languages \u2013 C++ Extensions for Coroutines\" (N4680) \u00a7 6.6.3.1/3</a></p>\n</blockquote>\n<p>Since C++/WinRT defines a <a href=\"https://github.com/Microsoft/cppwinrt/blob/dc92f6f56a1f3bd9cac78cee8955fbec79bc7a3c/10.0.16299.0/winrt/base.h#L11758\" rel=\"nofollow noreferrer\">return_void for IAsyncAction's traits</a> then the compiler will follow the above rule. At the end where execution flows off the end of the coroutine, the return_void method is used, the same as if you ended the function with <code>co_return;</code>. If we look at the definition of return_void, we see it's equivalent to setting the status as Completed and calling the completion handler if there is one.</p>\n", "OwnerUserId": "1248889", "PostTypeId": "2", "Id": "47361356", "Score": "0", "CreationDate": "2017-11-18T00:52:56.883", "LastActivityDate": "2017-11-18T00:52:56.883"}, "bq_ids": {"n4659": {"so_46191545_47361356_0": {"section_id": 4799, "quality": 0.5555555555555556, "length": 10}}}, "46191545": {"CommentCount": "1", "ViewCount": "32", "LastEditDate": "2017-11-18T21:01:18.207", "LastEditorUserId": "1248889", "CreationDate": "2017-09-13T07:35:28.000", "LastActivityDate": "2017-11-18T21:01:18.207", "PostTypeId": "1", "Title": "Non-void Coroutine Without Return Statement", "Id": "46191545", "OwnerUserId": "8601700", "Body": "<p>I am trying to wrap my head around the C++ coroutine feature. I read Kenny's article (<a href=\"https://msdn.microsoft.com/en-us/magazine/mt745094.aspx\" rel=\"nofollow noreferrer\" title=\"C++ - Introducing C++/WinRT\"><em>C++ - Introducing C++/WinRT</em></a>) and also tried watching this presentation, <a href=\"http://www.youtube.com/watch?v=ZTqHjjm86Bw\" rel=\"nofollow noreferrer\" title=\"CppCon 2016: James McNellis \u201cIntroduction to C++ Coroutinesquot;.\"><em>CppCon 2016: James McNellis \u201cIntroduction to C++ Coroutines\"</em></a>. I keep seeing non-void \"functions\" without some form of return statement. As an example, see the following code sample from Kenny's article. The <strong>PrintFeedAsync</strong> function/coroutine has an <strong>IAsyncAction</strong> return type but there is no return statement in the definition. could someone explain how this works?</p>\n<pre><code>IAsyncAction PrintFeedAsync()\n{\n    Uri uri(L\"http://kennykerr.ca/feed\");\n    SyndicationClient client;\n    SyndicationFeed feed = co_await client.RetrieveFeedAsync(uri);\n    for (SyndicationItem item : feed.Items())\n    {\n        hstring title = item.Title().Text();\n        printf(\"%ls\\n\", title.c_str());\n    }\n}\n\nint main()\n{\n    initialize();\n    PrintFeedAsync().get();\n}\n</code></pre>\n", "Tags": "<visual-c++><windows-runtime><c++-winrt><c++-coroutine>", "Score": "0", "AnswerCount": "1"}});