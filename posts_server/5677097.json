post_cb({"bq_ids": {"n4140": {"so_5677097_5677097_1": {"length": 40, "quality": 0.9523809523809523, "section_id": 7062}, "so_5677097_5677097_0": {"length": 51, "quality": 0.9807692307692307, "section_id": 7062}}, "n3337": {"so_5677097_5677097_1": {"length": 40, "quality": 0.9523809523809523, "section_id": 6806}, "so_5677097_5677097_0": {"length": 51, "quality": 0.9807692307692307, "section_id": 6806}}, "n4659": {"so_5677097_5677097_1": {"length": 40, "quality": 0.9523809523809523, "section_id": 8559}, "so_5677097_5677097_0": {"length": 51, "quality": 0.9807692307692307, "section_id": 8559}}}, "5677097": {"ViewCount": "162", "Body": "<p>Can anyone explain this statement from ISO N3242 \u00a73.3.3, 2nd point</p>\n<blockquote>\n<p id=\"so_5677097_5677097_0\">The potential scope of a function parameter name <strong><em>(including one appearing in lambda-declarator) or of a function-local predefined variable</em></strong> in a function definition (8.4) begins at its point of declaration. If the function has a function-try-block the potential scope of a parameter <strong><em>or of a function-local predefined variable</em></strong> ends at the end of the last associated handler, otherwise it ends at the end of the outermost block of the function definition. A parameter name shall not be redeclared in the outermost block of the function definition nor in the outermost block of any handler associated with a function-try-block.</p>\n</blockquote>\n<p>ISO Standard 2003 says:</p>\n<blockquote>\n<p id=\"so_5677097_5677097_1\">The potential scope of a function parameter name in a function definition (8.4) begins at its point of declaration. If the function has a function-try-block the potential scope of a parameter ends at the end of the last associated handler, else it ends at the end of the outermost block of the function definition. A parameter name shall not be redeclared in the outermost block of the function definition nor in the outermost block of any handler associated with a function-try-block.</p>\n</blockquote>\n<p>What is the actual difference in these statements?</p>\n<p>Any one explain the above added point in terms of example/program...?</p>\n<p>I noticed that it belongs to <strong>function-local predefined variable</strong> what actually he is saying .. there ,regarding this ?</p>\n", "Title": "Can anyone explain this paragraph of the current C++0x standard draft?", "CreationDate": "2011-04-15T12:58:26.773", "LastActivityDate": "2011-04-15T13:52:53.233", "CommentCount": "3", "LastEditDate": "2011-04-15T13:52:53.233", "PostTypeId": "1", "LastEditorUserId": "103167", "Id": "5677097", "Score": "1", "OwnerUserId": "526255", "Tags": "<c++><scope><c++11><standards>", "AnswerCount": "1"}, "5677385": {"Id": "5677385", "PostTypeId": "2", "Body": "<p>The changes are the addition of \"function-local predefined variables\", which are new to C++0x. They are implicitly defined static variables available for use within the function. The draft standard defines one called <code>__func__</code> which gives the name of the function, and allows implementations to add more of their own. This paragraph now says that they are available wherever the function parameter names are.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2011-04-15T13:43:43.670", "Score": "4", "CreationDate": "2011-04-15T13:18:33.763", "ParentId": "5677097", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2011-04-15T13:43:43.670"}});