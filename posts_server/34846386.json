post_cb({"34846433": {"ParentId": "34846386", "CommentCount": "0", "Body": "<p>The difference is that \"Usage 1\" should not compile.  When a dependent name like <code>T::B</code> is not preceded by <code>typename</code>, it is assumed to refer to an object or function member.  In which case, <code>T::B x;</code> is invalid syntax.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "34846433", "Score": "4", "CreationDate": "2016-01-18T02:33:37.823", "LastActivityDate": "2016-01-18T02:33:37.823"}, "bq_ids": {"n4140": {"so_34846386_34846460_0": {"section_id": 169, "quality": 1.0, "length": 19}}, "n3337": {"so_34846386_34846460_0": {"section_id": 163, "quality": 1.0, "length": 19}}, "n4659": {"so_34846386_34846460_0": {"section_id": 174, "quality": 1.0, "length": 19}}}, "34846460": {"ParentId": "34846386", "CommentCount": "0", "Body": "<p>According to the standard, $14.6/2 Name resolution [temp.res]</p>\n<blockquote>\n<p id=\"so_34846386_34846460_0\">A name used in a template declaration or definition and that is\n  dependent on a template-parameter is assumed not to name a type unless\n  the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename.</p>\n</blockquote>\n<p>That means, if you don't use the keyword <code>typename</code> for <code>T::B x;</code>, <code>T::B</code> will be considered as a non-type name, such as a member <code>B</code> of <code>T</code>, whick makes <code>T::B x;</code> ill-formed.</p>\n", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "34846460", "Score": "3", "CreationDate": "2016-01-18T02:37:32.083", "LastActivityDate": "2016-01-18T02:37:32.083"}, "34846386": {"CommentCount": "0", "ViewCount": "63", "CreationDate": "2016-01-18T02:27:56.783", "LastActivityDate": "2016-01-18T02:37:32.083", "Title": "typename in Templates in C++", "AcceptedAnswerId": "34846433", "PostTypeId": "1", "Id": "34846386", "Score": "2", "Body": "<p>What is the difference between following two usages of templates?</p>\n<p>Usage 1:</p>\n<pre><code>template&lt;class T&gt; class U : A&lt;T&gt;\n{\n  T::B x;\n  void f(A&lt;T&gt;&amp; y) { *y++; }\n};\n</code></pre>\n<p>Usage 2: </p>\n<pre><code>template&lt;class T&gt; class U : A&lt;T&gt;\n{\n  typename T::B x;\n  void f(A&lt;T&gt;&amp; y) { *y++; }\n};\n</code></pre>\n<p>Is there any ambiguity in 1?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1892348", "AnswerCount": "2"}});