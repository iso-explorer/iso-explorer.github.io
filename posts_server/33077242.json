post_cb({"33077272": {"ParentId": "33077242", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The behaviour is undefined. You can only cast <code>a</code> to <code>B*</code> if it <strong>is</strong> a pointer to a <code>B</code>.</p>\n<p>Don't do this.</p>\n<p>You couldn't even write <code>A* a = new B;</code> followed by <code>(dynamic_cast&lt;B*&gt;(a))-&gt;foo();</code> since the classes are not polymorphic types.</p>\n", "OwnerUserId": "2380830", "LastEditorUserId": "2380830", "LastEditDate": "2015-10-12T09:20:02.363", "Id": "33077272", "Score": "1", "CreationDate": "2015-10-12T09:09:24.053", "LastActivityDate": "2015-10-12T09:20:02.363"}, "33077423": {"ParentId": "33077242", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Basically, what is happening here is undefined behaviour. It doesn't have a special name; most likely it is called a <em>programming mistake</em>. The memory layout of your class <code>A</code> is:</p>\n<pre><code>int a;\n</code></pre>\n<p>The memory layout of <code>B</code> is:</p>\n<pre><code>int a;\nint b;\n</code></pre>\n<p>So in your case, you only allocate space for <code>a</code> but you are lucky that the space immediately after it is free (so that no other information is overwritten) and that it doesn't border on unallocated space (otherwise, a fault might occur when trying to write to an unallocated page). So <code>b</code> is stored in free space.</p>\n<p>In short: <strong>don't rely on this code to work!</strong></p>\n", "OwnerUserId": "3198247", "LastEditorUserId": "3198247", "LastEditDate": "2015-10-12T09:28:08.643", "Id": "33077423", "Score": "6", "CreationDate": "2015-10-12T09:17:35.420", "LastActivityDate": "2015-10-12T09:28:08.643"}, "33077797": {"ParentId": "33077242", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>@anderas has provided a very good explanation why the behavior is undefined. </p>\n<p>Here is a relevant clause from the standard (n4431, emphasis mine):</p>\n<blockquote>\n<p id=\"so_33077242_33077797_0\">11 ...</p>\n<p id=\"so_33077242_33077797_1\">If the rvalue of type \u201cpointer to cv1 B\u201d points to a B that is actually a sub-object of an object of type D, the resulting pointer points to the enclosing object of type D. <strong>Otherwise, the result of the cast is undefined</strong>.</p>\n<p id=\"so_33077242_33077797_2\">[expr.static.cast]</p>\n</blockquote>\n<p>So, the cast in your code is undefined.</p>\n<p>The following would work:</p>\n<pre><code>class A\n{\npublic: \n    int a;\n    virtual void foo() = 0; // make it polymorphic\n};\nclass B:public A\n{\npublic:\n    int b;\n    virtual void foo()\n    {\n        b=a*a;\n    }\n};\nint _tmain(int argc, _TCHAR* argv[])\n{ \n    A * a=new B;  // create an instance of B\n    a-&gt;a=10;\n    ((B*)a)-&gt;foo();\n    cout&lt;&lt;((B*)a)-&gt;b;\n\n    // don't forget to delete 'a'\n}\n</code></pre>\n", "OwnerUserId": "2020827", "LastEditorUserId": "2020827", "LastEditDate": "2015-10-12T10:03:20.363", "Id": "33077797", "Score": "2", "CreationDate": "2015-10-12T09:35:52.240", "LastActivityDate": "2015-10-12T10:03:20.363"}, "33077242": {"CommentCount": "5", "ViewCount": "109", "PostTypeId": "1", "LastEditorUserId": "2020827", "CreationDate": "2015-10-12T09:07:42.073", "LastActivityDate": "2015-10-12T10:03:20.363", "Title": "Set derived class field by converting base class pointer", "AcceptedAnswerId": "33077423", "LastEditDate": "2015-10-12T09:55:29.787", "Id": "33077242", "Score": "2", "Body": "<pre><code>class A\n{\npublic: \n    int a;\n};\nclass B:public A\n{\npublic:\n    int b;\n    void foo()\n    {\n        b=a*a;\n    }\n};\nint _tmain(int argc, _TCHAR* argv[])\n{ \n    A * a=new A;\n    a-&gt;a=10;\n    ((B*)a)-&gt;foo();\n    cout&lt;&lt;((B*)a)-&gt;b;\n}\n</code></pre>\n<p>It's working for <code>b=100</code>, but I dont know by which rules it works. Where is  <code>b</code> stored? I just don't know how its called to google it.</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5242703", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_33077242_33077797_1": {"section_id": 6037, "quality": 0.7894736842105263, "length": 15}}, "n3337": {"so_33077242_33077797_1": {"section_id": 5805, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_33077242_33077797_1": {"section_id": 7536, "quality": 0.7894736842105263, "length": 15}}}, "33077414": {"ParentId": "33077242", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your code will lead to 2 undefined behaviour:</p>\n<ol>\n<li>When you cast your instance of <code>A</code> as a <code>B</code>.</li>\n<li>When you use the member variable <code>b</code> (this variable does not exist\nin memory).</li>\n</ol>\n<p>Here is pontential implementation to use an instance of B as a pointer of A.</p>\n<pre><code>class A\n{\npublic:\n    void setA(int aToSet)\n    {\n       a = aToSet;\n    }\n    virtual void foo() = 0;\n    virtual void getResult() const = 0;\nprivate:\n    int a;\n};\n\nclass B : public A\n{\npublic:\n    void foo() override\n    {\n        b = a * a;\n    }\n    void getResult() const override\n    {\n        return b;\n    }\nprivate:\n    int b;\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{ \n    A *a = new B();\n    a-&gt;setA(10);\n    a-&gt;foo();\n    cout &lt;&lt; a-&gt;getResult();\n}\n</code></pre>\n", "OwnerUserId": "1463398", "LastEditorUserId": "1463398", "LastEditDate": "2015-10-12T09:56:44.340", "Id": "33077414", "Score": "0", "CreationDate": "2015-10-12T09:17:19.653", "LastActivityDate": "2015-10-12T09:56:44.340"}});