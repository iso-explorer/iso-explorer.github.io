post_cb({"5258680": {"ParentId": "5257509", "CommentCount": "4", "Body": "<p><a href=\"http://groups.google.com/group/comp.lang.c++/msg/80ca417acb84858f\" rel=\"nofollow\">This</a> newsgroup posting explores your options.</p>\n<blockquote>\n<p id=\"so_5257509_5258680_0\">This is system dependent and the poster didn't indicate the\n  system, but cin.clear() should work.   I have tested the attached\n  program on a UNIX system with AT&amp;T version's of iostreams. </p>\n</blockquote>\n<pre><code>#include &lt;iostream.h&gt;\nint main()\n{\n    for(;;) {\n        if ( cin.eof() ) {\n            cout &lt;&lt; \"EOF\" &lt;&lt; endl;\n            cin.clear();\n        }\n        char c ;\n        if ( cin.get(c) ) cout.put(c) ;\n    }\n} \n</code></pre>\n<blockquote>\n<p id=\"so_5257509_5258680_1\">Yes, that works okay in cfront and TC++.\n  In g++ where the problem first arose an additional action is required:</p>\n</blockquote>\n<pre><code>  cin.clear();\n  rewind ( _iob ); // Seems quite out of place, doesn't it?\n                   // cfront also accepts but doesn't\n                   // require this rewind. \n</code></pre>\n<p>Though I note that this was in 1991, it should still work. Remember to use the now-standard <code>iostream</code> header, not <code>iostream.h</code>.</p>\n<p>(BTW I found that post with the Google search terms \"reopen cin c++\", second result.)</p>\n<p>Let us know how you get on. You could also just use <code>freopen</code>.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "5258680", "Score": "1", "CreationDate": "2011-03-10T10:57:17.920", "LastActivityDate": "2011-03-10T10:57:17.920"}, "5257509": {"CommentCount": "2", "AcceptedAnswerId": "5257664", "CreationDate": "2011-03-10T09:11:30.317", "LastActivityDate": "2017-01-14T20:23:25.483", "PostTypeId": "1", "ViewCount": "14746", "FavoriteCount": "2", "Title": "freopen() equivalent for c++ streams", "Id": "5257509", "Score": "14", "Body": "<p>When programming with c-style i/o I sometimes use freopen() to reopen stdin for testing purposes so that I don't have to retype the input over and over. I was wondering if there is an equivalent for c++ i/o streams. Also, I know that I can use pipes to redirect it on the command line/terminal/whateveritis but I was wondering if there was a way to do it inside my code (because as you can see, I'm not very knowledgeable about the cl/t/w).</p>\n", "Tags": "<c++><c><io>", "OwnerUserId": "622647", "AnswerCount": "3"}, "5257664": {"ParentId": "5257509", "PostTypeId": "2", "CommentCount": "9", "Body": "<p><code>freopen</code> also works with <code>cin</code> and <code>cout</code>. No need to search for something new.</p>\n<pre><code>freopen(\"input.txt\", \"r\", stdin); // redirects standard input\nfreopen(\"output.txt\", \"w\", stdout); // redirects standard output\n\nint x;\ncin &gt;&gt; x; // reads from input.txt\ncout &lt;&lt; x &lt;&lt; endl; // writes to output.txt\n</code></pre>\n<p><strong>Edit:</strong> From C++ standard 27.3.1:</p>\n<blockquote>\n<p id=\"so_5257509_5257664_0\">The object cin controls input from a stream buffer associated with the object stdin, declared in <code>&lt;cstdio&gt;</code>.</p>\n</blockquote>\n<p>So according to the standard, if we redirect <code>stdin</code> it will also redirect <code>cin</code>. Vice versa for <code>cout</code>.</p>\n", "OwnerUserId": "556049", "LastEditorUserId": "1459669", "LastEditDate": "2017-01-14T20:23:25.483", "Id": "5257664", "Score": "24", "CreationDate": "2011-03-10T09:26:46.693", "LastActivityDate": "2017-01-14T20:23:25.483"}, "bq_ids": {"n4140": {"so_5257509_5257664_0": {"section_id": 1923, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_5257509_5257664_0": {"section_id": 1912, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_5257509_5257664_0": {"section_id": 2194, "quality": 0.9166666666666666, "length": 11}}}, "5278581": {"ParentId": "5257509", "CommentCount": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main() {\n\n  // Read one line from stdin\n  std::string line;\n  std::getline(std::cin, line);\n  std::cout &lt;&lt; line &lt;&lt; \"\\n\";\n\n  // Read a line from /etc/issue\n  std::ifstream issue(\"/etc/issue\");\n  std::streambuf* issue_buf = issue.rdbuf();\n  std::streambuf* cin_buf = std::cin.rdbuf(issue_buf);\n  std::getline(std::cin, line);\n  std::cout &lt;&lt; line &lt;&lt; \"\\n\";\n\n  // Restore sanity and read a line from stdin\n  std::cin.rdbuf(cin_buf);\n  std::getline(std::cin, line);\n  std::cout &lt;&lt; line &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p><a href=\"http://www.cplusplus.com/reference/iostream/ios/rdbuf/\" rel=\"noreferrer\">http://www.cplusplus.com/reference/iostream/ios/rdbuf/</a></p>\n", "OwnerUserId": "8747", "PostTypeId": "2", "Id": "5278581", "Score": "13", "CreationDate": "2011-03-11T21:29:41.603", "LastActivityDate": "2011-03-11T21:29:41.603"}});