post_cb({"bq_ids": {"n4140": {"so_22776619_22777509_1": {"length": 38, "quality": 1.0, "section_id": 5358}, "so_22776619_22776619_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 5364}, "so_22776619_22777509_0": {"length": 30, "quality": 0.967741935483871, "section_id": 5344}}, "n3337": {"so_22776619_22777509_1": {"length": 38, "quality": 1.0, "section_id": 5154}, "so_22776619_22776619_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 5160}, "so_22776619_22777509_0": {"length": 30, "quality": 0.967741935483871, "section_id": 5141}}, "n4659": {"so_22776619_22777509_1": {"length": 33, "quality": 0.868421052631579, "section_id": 6783}, "so_22776619_22776619_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 6788}, "so_22776619_22777509_0": {"length": 30, "quality": 0.967741935483871, "section_id": 6767}}}, "22777509": {"Id": "22777509", "PostTypeId": "2", "Body": "<p>The standard is technically unconcerned with the underlying encoding, and specifies only that the value of a single <code>char16_t</code> must correspond to a UCS codepoint in the range 0~0xFFFF</p>\n<p>\u00a7 2.14.3</p>\n<blockquote>\n<p id=\"so_22776619_22777509_0\">2 A character literal that begins with the letter u, such as u\u2019y\u2019, is a\n  character literal of type char16_t. The value of a char16_t literal\n  containing a single c-char is equal to its ISO 10646 code point value,\n  provided that the code point is representable with a single 16-bit\n  code unit.</p>\n</blockquote>\n<p>Strings on the other hand can include surrogate pairs</p>\n<p>\u00a7 2.14.5</p>\n<blockquote>\n<p id=\"so_22776619_22777509_1\">10 A string literal that begins with u, such as u\"asdf\", is a char16_t\n  string literal. A char16_t string literal has type \u201carray of n const\n  char16_t\u201d, where n is the size of the string as defined below; it has\n  static storage duration and is initialized with the given characters.\n  A single c-char may produce more than one char16_t character in the\n  form of surrogate pairs.</p>\n</blockquote>\n<p>Only UTF-16 meets both of these requirements, although the standard leaves the door open for future compatible encodings, however unlikely that may be.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-04-01T06:35:22.670", "Score": "5", "CreationDate": "2014-04-01T05:27:31.017", "ParentId": "22776619", "CommentCount": "0", "OwnerUserId": "657267", "LastEditDate": "2014-04-01T06:35:22.670"}, "22776619": {"ViewCount": "515", "Body": "<p>I've been digging the specification for a while now and cannot find any conclusive clauses to support either yes/no.</p>\n<p>Does the following statement:</p>\n<pre><code>char16_t *s = u\"asdf\";\n</code></pre>\n<p>imply/enforce that the string literal \"asdf\" must be encoded in UTF-16?</p>\n<p>From all I can deduce, it's a yes.</p>\n<p>However, in this proposal <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2018.html\">n2018</a> it says only when \"<code>__STDC_UTF_16__</code>\" is defined that <code>char16_t</code> literals are UTF-16 encoded, so that leaves open the door that when \"<code>__STDC_UTF_16__</code>\" is undefined, <code>char16_t</code> literals can be encoded anyway the compiler wants.</p>\n<p>After all, the standard only guarantees the size, signed-ness and underlying representation of <code>char16_t</code>, it mentions nothing about how a compiler must encode a <code>char16_t</code> literal or string literal.</p>\n<p>In the spec, it says</p>\n<blockquote>\n<p id=\"so_22776619_22776619_0\">The size of a <code>char16_t</code> string literal is the total number of escape\n  sequences, universal-character-names, and other characters, plus one\n  for each character requiring a surrogate pair, plus one for the\n  terminating u\u2019\\0\u2019. [Note: The size of a <code>char16_t</code> string literal is\n  the number of code units, not the number of characters. \u2014end note ]</p>\n</blockquote>\n<p>This seems to mean that it is implicitly assumed that <code>char16_t</code> string literals are UTF16 encoded because \"surrogate pair\" is a UTF-16 concept.</p>\n<p>Let me know if there's anything vague in the question.</p>\n", "Title": "Must char16_t strings use UTF-16 encoding?", "CreationDate": "2014-04-01T04:08:39.807", "LastActivityDate": "2014-04-01T10:15:14.903", "CommentCount": "0", "LastEditDate": "2014-04-01T04:40:45.673", "PostTypeId": "1", "LastEditorUserId": "15168", "Id": "22776619", "Score": "6", "OwnerUserId": "3456737", "Tags": "<c++><c++11><encoding><utf-8>", "AnswerCount": "2"}, "22780824": {"Id": "22780824", "PostTypeId": "2", "Body": "<p>The <code>__STDC_UTF_16__</code> bits did not make it into the standard text. That is in the proposal probably because it was taken from a similar proposal for the C language. The C++ standard simply removed any and all of this nonsense and made it UTF-16 or GTFO.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2014-04-01T10:15:14.903", "Score": "6", "CreationDate": "2014-04-01T08:43:59.800", "ParentId": "22776619", "CommentCount": "3", "OwnerUserId": "46642", "LastEditDate": "2014-04-01T10:15:14.903"}});