post_cb({"153599": {"Id": "153599", "PostTypeId": "2", "Body": "<p>Note that an empty aggregate initializer also works:</p>\n<pre><code>SHELLEXECUTEINFO sexi = {};\nchar mytext[100] = {};\n</code></pre>\n", "LastActivityDate": "2008-09-30T15:37:18.227", "CommentCount": "0", "CreationDate": "2008-09-30T15:37:18.227", "ParentId": "88957", "Score": "18", "OwnerUserId": "19100"}, "89462": {"Body": "<p>One thing to be aware of is that this technique will not set padding bytes to zero. For example:</p>\n<pre><code>struct foo\n{\n    char c;\n    int  i;\n};\n\nfoo a = {0};\n</code></pre>\n<p>Is not the same as:</p>\n<pre><code>foo a;\nmemset(&amp;a,0,sizeof(a));\n</code></pre>\n<p>In the first case, pad bytes between c and i are uninitialized. Why would you care? Well, if you're saving this data to disk or sending it over a network or whatever, you could have a security issue.</p>\n", "CreationDate": "2008-09-18T02:25:34.117", "ParentId": "88957", "CommentCount": "9", "LastEditDate": "2008-09-18T20:40:21.707", "PostTypeId": "2", "LastEditorDisplayName": "Harold Ekstrom", "LastActivityDate": "2008-09-18T20:40:21.707", "LastEditorUserId": "8429", "Id": "89462", "OwnerDisplayName": "Harold Ekstrom", "Score": "83", "OwnerUserId": "8429"}, "25693435": {"Id": "25693435", "PostTypeId": "2", "Body": "<p><code>{0}</code> is a valid initializer for any (complete object) type, in both C and C++. It's a common idiom used to initialize an object to <em>zero</em> (read on to see what that means).</p>\n<p>For scalar types (arithmetic and pointer types), the braces are unnecessary, but they're explicitly allowed. Quoting the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"noreferrer\">N1570 draft</a> of the ISO C standard, section 6.7.9:</p>\n<blockquote>\n<p id=\"so_88957_25693435_0\">The initializer for a scalar shall be a single expression, optionally enclosed in braces.</p>\n</blockquote>\n<p>It initializes the object to zero (<code>0</code> for integers, <code>0.0</code> for floating-point, a null pointer for pointers).</p>\n<p>For non-scalar types (structures, arrays, unions), <code>{0}</code> specifies that the <em>first</em> element of the object is initialized to zero. For structures containing structures, arrays of structures, and so on, this is applied recursively, so the first scalar element is set to the zero, as appropriate for the type. As in any initializer, any elements not specified are set to zero.</p>\n<p>Intermediate braces (<code>{</code>, <code>}</code>) may be omitted; for example both these are valid and equivalent:</p>\n<pre><code>int arr[2][2] = { { 1, 2 }, {3, 4} };\n\nint arr[2][2] = { 1, 2, 3, 4 };\n</code></pre>\n<p>which is why you don't have to write, for example, <code>{ { 0 } }</code> for a type whose first element is non-scalar.</p>\n<p>So this:</p>\n<pre><code>some_type obj = { 0 };\n</code></pre>\n<p>is a shorthand way of initializing <code>obj</code> to zero, meaning that each scalar sub-object of <code>obj</code> is set to <code>0</code> if it's an integer, <code>0.0</code> if it's floating-point, or a null pointer if it's a pointer.</p>\n<p>The rules are similar for C++.</p>\n<p>In your particular case, since you're assigning values to <code>sexi.cbSize</code> and so forth, it's clear that <code>SHELLEXECUTEINFO</code> is a struct or class type (or possibly a union, but probably not), so not all of this applies, but as I said <code>{ 0 }</code> is a common idiom that can be used in more general situations.</p>\n<p>This is <em>not</em> (necessarily) equivalent to using <code>memset</code> to set the object's representation to all-bits-zero.  Neither floating-point <code>0.0</code> nor a null pointer is necessarily represented as all-bits-zero, and a <code>{ 0 }</code> initializer doesn't necessarily set padding bytes to any particular value. On most systems, though, it's likely to have the same effect.</p>\n", "LastActivityDate": "2014-09-05T20:21:39.440", "CommentCount": "1", "CreationDate": "2014-09-05T20:21:39.440", "ParentId": "88957", "Score": "5", "OwnerUserId": "827263"}, "88983": {"Id": "88983", "PostTypeId": "2", "Body": "<p>It's been awhile since I worked in c/c++ but IIRC, the same shortcut can be used for arrays as well.</p>\n", "LastActivityDate": "2008-09-18T00:42:55.393", "CommentCount": "0", "CreationDate": "2008-09-18T00:42:55.393", "ParentId": "88957", "Score": "3", "OwnerUserId": "9796"}, "88960": {"Id": "88960", "PostTypeId": "2", "Body": "<p>What's happening here is called <strong>aggregate</strong> initialization.  Here is the (abbreviated) definition of an aggregate from section 8.5.1 of the ISO spec:</p>\n<blockquote>\n<p id=\"so_88957_88960_0\">An aggregate is an array or a class with no user-declared constructors, no private or protected non-static data members, no base classes, and no virtual functions.</p>\n</blockquote>\n<p>Now, using <code>{0}</code> to initialize an aggregate like this is basically a trick to <code>0</code> the entire thing.  This is because when using aggregate initialization <strong>you don't have to specify all the members</strong> and the spec requires that all unspecified members be default initialized, which means set to <code>0</code> for simple types.</p>\n<p>Here is the relevant quote from the spec:</p>\n<blockquote>\n<p id=\"so_88957_88960_1\">If there are fewer initializers in the list than there are members in the\n  aggregate, then each member not\n  explicitly initialized shall be\n  default-initialized.\n  Example:</p>\n<pre><code>struct S { int a; char* b; int c; };\nS ss = { 1, \"asdf\" };\n</code></pre>\n<p id=\"so_88957_88960_2\">initializes <code>ss.a</code> with <code>1</code>, <code>ss.b</code> with\n  <code>\"asdf\"</code>, and <code>ss.c</code> with the value of an\n  expression of the form <code>int()</code>, that is,\n  <code>0</code>.</p>\n</blockquote>\n<p>You can find the complete spec on this topic <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf#page=207\" rel=\"noreferrer\">here</a></p>\n", "LastEditorUserId": "13097", "LastActivityDate": "2015-11-24T02:04:22.233", "Score": "289", "CreationDate": "2008-09-18T00:39:34.043", "ParentId": "88957", "CommentCount": "9", "OwnerUserId": "13097", "LastEditDate": "2015-11-24T02:04:22.233"}, "25693018": {"Id": "25693018", "PostTypeId": "2", "Body": "<p>{0} is an <strong>anonymous array</strong> containing its element as 0.</p>\n<p>This is used to <strong>initialize one or all elements of array with 0.</strong></p>\n<p>e.g. int arr[8] = {0};</p>\n<p>In this case all the elements of arr will be initialized as 0.</p>\n", "LastActivityDate": "2014-09-05T19:49:36.633", "CommentCount": "1", "CreationDate": "2014-09-05T19:49:36.633", "ParentId": "88957", "Score": "-4", "OwnerUserId": "4012858"}, "bq_ids": {"n4140": {"so_88957_88960_2": {"length": 9, "quality": 1.0, "section_id": 3304}, "so_88957_88960_1": {"length": 12, "quality": 0.8, "section_id": 3304}, "so_88957_88960_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3298}}, "n3337": {"so_88957_88960_2": {"length": 9, "quality": 1.0, "section_id": 3174}, "so_88957_88960_1": {"length": 12, "quality": 0.8, "section_id": 3174}, "so_88957_88960_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3168}}, "n4659": {"so_88957_88960_2": {"length": 9, "quality": 1.0, "section_id": 4070}, "so_88957_88960_1": {"length": 10, "quality": 0.6666666666666666, "section_id": 4070}, "so_88957_88960_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 4063}}}, "88957": {"ViewCount": "50250", "Body": "<p>When <code>{0}</code> is used to initialize an object, what does it mean? I can't find any references to <code>{0}</code> anywhere, and because of the curly braces Google searches are not helpful.</p>\n<p>Example code:</p>\n<pre><code>SHELLEXECUTEINFO sexi = {0}; // what does this do?\nsexi.cbSize = sizeof(SHELLEXECUTEINFO);\nsexi.hwnd = NULL;\nsexi.fMask = SEE_MASK_NOCLOSEPROCESS;\nsexi.lpFile = lpFile.c_str();\nsexi.lpParameters = args;\nsexi.nShow = nShow;\n\nif(ShellExecuteEx(&amp;sexi))\n{\n    DWORD wait = WaitForSingleObject(sexi.hProcess, INFINITE);\n    if(wait == WAIT_OBJECT_0)\n        GetExitCodeProcess(sexi.hProcess, &amp;returnCode);\n}\n</code></pre>\n<p>Without it, the above code will crash on runtime.</p>\n", "AcceptedAnswerId": "88960", "Title": "What does {0} mean when initializing an object?", "CreationDate": "2008-09-18T00:38:36.153", "LastActivityDate": "2017-07-08T17:54:43.320", "CommentCount": "0", "FavoriteCount": "71", "PostTypeId": "1", "LastEditDate": "2017-07-08T17:54:43.320", "OwnerDisplayName": "Computer Guru", "LastEditorUserId": "743382", "Id": "88957", "Score": "237", "OwnerUserId": "17027", "Tags": "<c++><c>", "AnswerCount": "9"}, "89093": {"Id": "89093", "PostTypeId": "2", "Body": "<p>I also use it to initialize strings eg.</p>\n<pre><code>char mytext[100] = {0};\n</code></pre>\n", "OwnerDisplayName": "Adam Pierce", "LastActivityDate": "2008-09-18T01:05:58.927", "Score": "7", "CreationDate": "2008-09-18T01:05:58.927", "ParentId": "88957", "CommentCount": "1", "OwnerUserId": "5324"}, "16534600": {"Id": "16534600", "PostTypeId": "2", "Body": "<p>I have always wondered, <strong>why</strong> you should use something like </p>\n<pre><code>struct foo bar = { 0 };\n</code></pre>\n<p>Here is a test case to explain: </p>\n<p>check.c</p>\n<pre><code>struct f {\n    int x;\n    char a;\n} my_zero_struct;\n\nint main(void)\n{\n    return my_zero_struct.x;\n}\n</code></pre>\n<p>I compile with <code>gcc -O2 -o check check.c</code> and then output the symbol table with <code>readelf -s check | sort -k 2</code> (this is with gcc 4.6.3 on ubuntu 12.04.2 on a x64 system). Excerpt:</p>\n<pre><code>59: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start\n48: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT  ABS _edata\n25: 0000000000601018     0 SECTION LOCAL  DEFAULT   25 \n33: 0000000000601018     1 OBJECT  LOCAL  DEFAULT   25 completed.6531\n34: 0000000000601020     8 OBJECT  LOCAL  DEFAULT   25 dtor_idx.6533\n62: 0000000000601028     8 OBJECT  GLOBAL DEFAULT   25 my_zero_struct\n57: 0000000000601030     0 NOTYPE  GLOBAL DEFAULT  ABS _end\n</code></pre>\n<p>The important part here is, that <code>my_zero_struct</code> is after <code>__bss_start</code>. The \".bss\" section in a C program is the section of memory which is set to zero <strong>before</strong> <code>main</code> is called see <a href=\"http://en.wikipedia.org/wiki/.bss\" rel=\"nofollow\">wikipedia on .bss</a>.</p>\n<p>If you change the code above to:</p>\n<pre><code>} my_zero_struct = { 0 };\n</code></pre>\n<p>Then the resulting \"check\" executable looks <strong>exactly</strong> the same at least with the gcc 4.6.3 compiler on ubuntu 12.04.2; the <code>my_zero_struct</code> is still in the <code>.bss</code> section and thus it will be automatically initialized to zero, before <code>main</code> is called.</p>\n<p>Hints in the comments, that a <code>memset</code> might initialize the \"full\" structure is also not an improvement, because the <code>.bss</code> section is cleared fully which also means the \"full\" structure is set to zero.</p>\n<p>It <strong>might</strong> be that the C language standard does not mention any of this, but in a real world C compiler I have never seen a different behaviour.</p>\n", "LastActivityDate": "2013-05-14T03:23:23.673", "CommentCount": "1", "CreationDate": "2013-05-14T03:23:23.673", "ParentId": "88957", "Score": "2", "OwnerUserId": "1917520"}, "734171": {"Id": "734171", "PostTypeId": "2", "Body": "<p>In answer to why <code>ShellExecuteEx()</code> is crashing: your <code>SHELLEXECUTEINFO</code> \"sexi\" struct has many members and you're only initializing some of them. </p>\n<p>For example, the member <code>sexi.lpDirectory</code> could be pointing anywhere, but <code>ShellExecuteEx()</code> will still try to use it, hence you'll get a memory access violation. </p>\n<p>When you include the line:</p>\n<pre><code>SHELLEXECUTEINFO sexi = {0};\n</code></pre>\n<p>before the rest of your structure setup, you're telling the compiler to zero out <strong>all</strong> structure members before you initialize the specific ones you're interested in. <code>ShellExecuteEx()</code> knows that if <code>sexi.lpDirectory</code> is zero, it should ignore it.</p>\n", "LastEditorUserId": "3313438", "LastActivityDate": "2015-10-11T11:48:07.113", "Score": "11", "CreationDate": "2009-04-09T13:17:24.820", "ParentId": "88957", "CommentCount": "0", "OwnerUserId": "89036", "LastEditDate": "2015-10-11T11:48:07.113"}});