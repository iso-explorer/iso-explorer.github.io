post_cb({"bq_ids": {"n4140": {"so_22753707_22755079_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 6969}}, "n3337": {"so_22753707_22755079_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 6716}}, "n4659": {"so_22753707_22755079_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 8464}}}, "22755079": {"Id": "22755079", "PostTypeId": "2", "Body": "<p>The latest draft (N3936) specifically warns against this:</p>\n<p>\u00a7 18.10</p>\n<blockquote>\n<p id=\"so_22753707_22755079_0\">6 A call to the setlocale function may introduce a data race with\n  other calls to the setlocale function or with calls to functions that\n  are affected by the current C locale. The implementation shall behave\n  as if no library function other than locale::global() calls the\n  setlocale function.</p>\n</blockquote>\n<p>More recent versions of GCC limit the call to <code>LC_NUMERIC</code> instead of <code>LC_ALL</code>, and if you use glibc &gt; 2.2 the implementation avoids the problem altogether by calling <code>uselocale</code> which only modifies the current thread (not much use for you on OSX I guess\u2026).</p>\n<p>Edit: I had a better look at the source</p>\n<p>Although issues could potentially occur with the generic locale model if a function that depends on the C locale is called from another thread while <code>__convert_from_v</code> or another function modifies the C locale, the only supported locale for the generic locale model is <code>\"C\"</code> (which is the locale set during startup), so this isn't an issue unless support for other locales is added to the generic model.</p>\n<p>The only time this could be an issue is if gcc is built with the gnu locale model and glibc is &lt;= 2.2, which isn't going to happen on OSX.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-04-02T04:48:18.873", "Score": "4", "CreationDate": "2014-03-31T06:44:38.997", "ParentId": "22753707", "CommentCount": "0", "LastEditDate": "2014-04-02T04:48:18.873", "OwnerUserId": "657267"}, "22753707": {"ViewCount": "271", "Body": "<p><code>ostream</code> operator<code>&lt;&lt;</code> uses <code>num_put::put()</code> for number formatting. I'm trying to follow the code. I'll link to OSX files but similar files appear on some other systems I looked at. It seems to me that <code>num_put::put()</code> calls <code>num_put::do_put()</code>, which calls<br>\n<code>num_put::_M_insert_float()</code>, which <code>calls __convert_from_v()</code>:</br></p>\n<pre><code>http://www.opensource.apple.com/source/libstdcxx/libstdcxx-60/include/c++/4.2.1/bits/c++locale.h\nhttp://www.opensource.apple.com/source/libstdcxx/libstdcxx-60/include/c++/4.2.1/bits/locale_facets.tcc\nhttp://www.opensource.apple.com/source/libstdcxx/libstdcxx-60/include/c++/4.2.1/bits/locale_facets.h\n</code></pre>\n<p><code>__convert_from_v()</code> checks the current global locale, and if it's different from \"C\" then it calls <code>setlocale()</code> to set the global locale to \"C\", then uses <code>vsnprintf()</code> to format the number, then calls <code>setlocale()</code> again to revert to the old locale.</p>\n<p>Since <code>setlocale()</code> affects all threads, it would seem that calling <code>ostream</code> operator<code>&lt;&lt;</code> with a floating point number is unsafe in a multi-threaded application which has the global locale set to something else than \"C\". But that would be very strange, so what am I missing? Thanks!</p>\n", "Title": "Is ostream operator<< in libstdc++ thread-hostile?", "CreationDate": "2014-03-31T04:34:23.987", "LastActivityDate": "2014-04-02T04:48:18.873", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-03-31T07:17:03.193", "LastEditorUserId": "3177124", "Id": "22753707", "Score": "11", "OwnerUserId": "1425062", "Tags": "<c++><thread-safety><locale><libstdc++>", "AnswerCount": "1"}});