post_cb({"29526716": {"ParentId": "29526585", "CommentCount": "0", "Body": "<p>Multiple translation units might need the definition of the class at compile time since it is not possible to know, for example, the types of members of the class (or even whether they exist) unless the definition of the class is available. (Therefore, you must be allowed to define a class in multiple translation units.) On the other hand, a translation unit only needs the declaration of a function because as long as it knows how to call the function, the compiler can leave the job of inserting the actual address of the function to the linker.</p>\n<p>But this comes at a price: if a class is defined multiple times in a program, all the definitions must be identical, and if they're not, then you may get strange linker errors, or if the program links, it will probably segfault.</p>\n<p>For functions you don't have this problem. If the function is defined multiple times, the linker will let you know. This is good, because it avoids accidentally defining multiple functions with the same name and signature in a given program. If you want to override this, you can declare the function <code>inline</code>. Then the same rule as that for classes applies: the function has to be defined in each translation unit in which it's used in a certain way (<em>odr-used</em>, to be precise) and all the definitions must be identical.</p>\n<p>If a function is defined within a class definition, there's a special rule that it's implicitly inline. If this were not the case, then it would make it impossible to have multiple definitions of a class as long as there's at least one function defined in the class definition unless you went to the trouble of marking all such functions <code>inline</code>.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "29526716", "Score": "4", "CreationDate": "2015-04-08T22:53:41.583", "LastActivityDate": "2015-04-08T22:53:41.583"}, "29526634": {"ParentId": "29526585", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>When member functions are defined in the body of the class definition, they are <code>inline</code> by default. If you qualify the non-member functions <code>inline</code> in the .h file, it will work fine.</p>\n<p>Without the <code>inline</code> qualifier, non-member functions defined in .h files are compiled in every .cpp file that the .h file is included in. That violates the following rule from the standard:</p>\n<blockquote>\n<p id=\"so_29526585_29526634_0\"><strong>3.2 One definition rule</strong></p>\n<p id=\"so_29526585_29526634_1\">3 Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; ...</p>\n</blockquote>\n<p>You will get the same error if you define member functions outside the body of the class definition in a .h file and did not add the <code>inline</code> qualifier explicitly.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-04-09T05:07:53.187", "Id": "29526634", "Score": "4", "CreationDate": "2015-04-08T22:46:09.233", "LastActivityDate": "2015-04-09T05:07:53.187"}, "29526585": {"CommentCount": "0", "ViewCount": "844", "PostTypeId": "1", "LastEditorUserId": "464581", "CreationDate": "2015-04-08T22:40:54.217", "LastActivityDate": "2015-04-09T05:07:53.187", "Title": "Why defining classes in header files works but not functions", "LastEditDate": "2015-04-08T22:52:59.477", "Id": "29526585", "Score": "2", "Body": "<p>I have this little piece of code :</p>\n<i>File modA.h</i>\n<pre><code>#ifndef MODA\n#define MODA\n\nclass CAdd {\npublic:\n    CAdd(int a, int b) : result_(a + b) { }\n\n    int getResult() const { return result_; }\n\nprivate:\n    int result_;\n};\n\n/*\nint add(int a, int b) {\n    return a + b;\n}\n*/\n#end\n</code></pre>\n<i>File calc.cpp</i>\n<pre><code>#include \"modA.h\"\n\nvoid doSomeCalc() {\n    //int r = add(1, 2);\n    int r = CAdd(1, 2).getResult();\n}\n</code></pre>\n<i>File main.cpp</i>\n<pre><code>#include \"modA.h\"\n\nint main() {\n    //int r = add(1, 2);\n    int r = CAdd(1, 2).getResult();\n    return 0;\n}\n</code></pre>\n<p>If I understand well, we can't define a function in a header file and use it in different unit translations (unless the function is declared static). The macro MODA wouldn't be defined in each unit translation and thus the body guard wouldn't prevent the header from being copied in place of every #include \"modA.h\". This would cause the function to be defined at different places and the linker would complain about it. Is it correct ?</p>\n<p>But then why is it possible to do so with a class and also with methods of a class. Why doesn't the linker complain about it ?\nIsn't it a redefinition of a class ?</p>\n<p>Thank you</p>\n", "Tags": "<c++><header-files>", "OwnerUserId": "1411235", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_29526585_29526634_1": {"section_id": 7041, "quality": 1.0, "length": 10}}, "n3337": {"so_29526585_29526634_1": {"section_id": 6786, "quality": 1.0, "length": 10}}, "n4659": {"so_29526585_29526634_1": {"section_id": 8538, "quality": 1.0, "length": 10}}}, "29526657": {"ParentId": "29526585", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_29526585_29526657_0\"><strong>\u201d</strong> If I understand well, we can't define a function in a header file and use it in different unit translations (unless the function is declared static)</p>\n</blockquote>\n<p>That's incorrect. You can, and in the presented code <code>CAdd::getResult</code> is one such function.</p>\n<p>In order to support general use of a header in multiple translation units, which gives multiple competing definitions of the function, it needs to be <code>inline</code>. A function defined in the class definition, like <code>getResult</code>, is automatically <code>inline</code>. A function defined outside the class definition needs to be explicitly declared <code>inline</code>.</p>\n<p>In practical terms the <code>inline</code> specifier tells the linker to just arbitrarily select one of the definitions, if there are several.</p>\n<p>There is unfortunately no simple syntax to do the same for data. That is, data can't just be declared as <code>inline</code>. However, there is an exemption for static data members of class templates, and also an <code>inline</code> function with extern linkage can contain <code>static</code> local variables, and so compilers are required to support effectively the same mechanism also for data.</p>\n<p>An <code>inline</code> function has <code>extern</code> linkage by default. Since <code>inline</code> also serves as an optimization hint it's possible to have an <code>inline static</code> function. For the case of the default <code>extern</code> linkage, be aware that the standard then requires the function to be defined, identically, in every translation unit where it's used. </p>\n<p>The part of the standard dealing with this is called the <em>One Definition Rule</em>, usually abbreviated as the <strong>ODR</strong>.</p>\n<p>In C++11 the ODR is \u00a73.2 \u201cOne definition rule\u201d. Specifically, C++11 \u00a73.2/3 specifies the requirement about definitions of an <code>inline</code> function in every relevant translation unit. This requirement is however repeated in C+11 \u00a77.1.2/4 about \u201cFunction specifiers\u201d.</p>\n", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2015-04-08T23:29:16.000", "Id": "29526657", "Score": "4", "CreationDate": "2015-04-08T22:48:05.863", "LastActivityDate": "2015-04-08T23:29:16.000"}});