post_cb({"bq_ids": {"n4140": {"so_40605343_40606884_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5440}}, "n3337": {"so_40605343_40606884_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5235}}, "n4659": {"so_40605343_40606884_1": {"length": 29, "quality": 1.0, "section_id": 4040}, "so_40605343_40606884_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6867}}}, "40605343": {"ViewCount": "192", "Body": "<p>Why does std::tuple decompose into rvalue references?</p>\n<pre><code>#include &lt;tuple&gt;\n\ntemplate &lt;typename, typename&gt; struct same_type;\ntemplate &lt;typename T&gt; struct same_type&lt;T, T&gt; {};\n\nvoid foo() {\n  std::tuple tuple(1, 'a', 2.3, true);\n  auto[i, c, d, b] = tuple;\n  same_type&lt;decltype(i), int &amp;&amp;&gt;{};\n  same_type&lt;decltype(c), char &amp;&amp;&gt;{};\n  same_type&lt;decltype(d), double &amp;&amp;&gt;{};\n  same_type&lt;decltype(b), bool &amp;&amp;&gt;{};\n}\n</code></pre>\n<p>This compiles without error using gcc trunk.\nI would have expected the plain types instead, e.g.</p>\n<pre><code>same_type&lt;decltype(i), int&gt;{};\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/9F22pVrxxrFpftgh\" rel=\"nofollow noreferrer\">Live example</a></p>\n", "AcceptedAnswerId": "40606884", "Title": "Why does std::tuple decompose into rvalue references", "CreationDate": "2016-11-15T08:41:01.847", "Id": "40605343", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-11-15T09:04:09.457", "LastEditorUserId": "3540970", "LastActivityDate": "2017-03-16T14:28:59.203", "Score": "6", "OwnerUserId": "3540970", "Tags": "<c++><c++1z>", "AnswerCount": "1"}, "40606884": {"Id": "40606884", "PostTypeId": "2", "Body": "<p>GCC bug. <code>decltype</code> applied to a structured binding returns the <em>referenced type</em>, which for the tuple-like case is the exact type returned by <code>std::tuple_element</code>. In other words, the language tries pretty hard here to hide the fact that those are actually references.</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/dcl.type.simple#4\" rel=\"nofollow noreferrer\">[dcl.type.simple]/4</a>:</p>\n<blockquote>\n<p id=\"so_40605343_40606884_0\">For an expression <code>e</code>, the type denoted by <code>decltype(e)</code> is defined as\n  follows:</p>\n<ul>\n<li>if <code>e</code> is an unparenthesized <em>id-expression</em> naming a structured binding  ([dcl.struct.bind]), <code>decltype(e)</code> is the referenced type as given in the\n  specification of the structured binding declaration;</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/dcl.struct.bind#3\" rel=\"nofollow noreferrer\">[dcl.struct.bind]/3</a>:</p>\n<blockquote>\n<p id=\"so_40605343_40606884_1\">Otherwise, if the expression <code>std::tuple_size&lt;E&gt;::value</code> is a\n  well-formed integral constant expression [...] Given the type <code>Ti</code>\n  designated by <code>std::tuple_element&lt;i, E&gt;::type</code>, each <code>vi</code> is a\n  variable of type \u201creference to <code>Ti</code>\u201d initialized with the initializer,\n  where the reference is an lvalue reference if the initializer is an\n  lvalue and an rvalue reference otherwise; the referenced type is <code>Ti</code>.</p>\n</blockquote>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2017-03-16T14:28:59.203", "Score": "9", "CreationDate": "2016-11-15T09:59:16.940", "ParentId": "40605343", "CommentCount": "1", "OwnerUserId": "2756719", "LastEditDate": "2017-03-16T14:28:59.203"}});