post_cb({"bq_ids": {"n4140": {"so_25321859_25321947_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5891}, "so_25321859_25321970_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 5955}, "so_25321859_25321859_0": {"length": 21, "quality": 1.0, "section_id": 7115}}, "n3337": {"so_25321859_25321947_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5662}, "so_25321859_25321970_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 5724}, "so_25321859_25321859_0": {"length": 21, "quality": 1.0, "section_id": 6859}}, "n4659": {"so_25321859_25321947_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 7374}, "so_25321859_25321970_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 7443}, "so_25321859_25321859_0": {"length": 21, "quality": 1.0, "section_id": 8616}}}, "25321970": {"Id": "25321970", "PostTypeId": "2", "Body": "<p>C++.11 \u00a75.1.1\u00b68</p>\n<blockquote>\n<p id=\"so_25321859_25321970_0\">A <em>nested-name-specifier</em> that denotes a class, optionally followed by the keyword <code>template</code> (14.2), and then followed by the name of a member of either that class (9.2) or one of its base classes (Clause 10), is a <em>qualified-id</em>; 3.4.3.1 describes name lookup for class members that appear in <em>qualified-ids</em>. The result is the member. The type of the result is the type of the member. The result is an lvalue if the member is a static member function or a data member and a prvalue otherwise. </p>\n</blockquote>\n", "LastActivityDate": "2014-08-15T06:10:53.953", "CommentCount": "0", "CreationDate": "2014-08-15T06:10:53.953", "ParentId": "25321859", "Score": "0", "OwnerUserId": "315052"}, "25321859": {"ViewCount": "88", "Body": "<p>The following simple code example causes some doubts for me:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A\n{\n    int a;\n    A(int a)\n    {\n        A::a = a; //It is unclear, because in that case we're applying \n                  //scope resolution operator to A and does.\n\n        this -&gt; a = a; //It is clear, because this points to the current object.\n    }\n};\n\nint main()\n{\n    A a(4);\n    cout &lt;&lt; a.a;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/761875bc55237cec\" rel=\"nofollow\">demo</a></p>\n<p>I know that the section 3.4.3.1/3 says:</p>\n<blockquote>\n<p id=\"so_25321859_25321859_0\">A class member name hidden by a name in a nested declarative region or\n  by the name of a derived class member can still be found if qualified\n  by the name of its class followed by the :: operator.</p>\n</blockquote>\n<p>But it doesn't specify that the name looked up with \"Qualified name lookup\" (e.g. <code>A::a</code> in my case) inside the member function shall denote a member of current object. \nI'm looking for relevant reference in the Standard.</p>\n", "AcceptedAnswerId": "25321947", "Title": "Class member access inside the member function body", "CreationDate": "2014-08-15T05:56:40.293", "Id": "25321859", "CommentCount": "2", "LastEditDate": "2014-08-15T06:17:34.590", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "3309790", "LastActivityDate": "2014-08-15T06:17:34.590", "Score": "0", "Tags": "<c++><class><language-lawyer><member>", "AnswerCount": "2"}, "25321947": {"Id": "25321947", "PostTypeId": "2", "Body": "<p>When searching for something specific to nonstatic class member functions, you should look first at the subclause governing...nonstatic class member functions. \u00a79.3.1 [class.mfct.non-static]/p3:</p>\n<blockquote>\n<p id=\"so_25321859_25321947_0\">When an <em>id-expression</em> (5.1) that is not part of a class member access\n  syntax (5.2.5) and not used to form a pointer to member (5.3.1) is\n  used in a member of class <code>X</code> in a context where <code>this</code> can be used\n  (5.1.1), if name lookup (3.4) resolves the name in the <em>id-expression</em>\n  to a non-static non-type member of some class <code>C</code>, and if either the\n  <em>id-expression</em> is potentially evaluated or <code>C</code> is <code>X</code> or a base class of <code>X</code>,\n  the <em>id-expression</em> is transformed into a class member access expression\n  (5.2.5) using <code>(*this)</code> (9.3.2) as the <em>postfix-expression</em> to the left of\n  the <code>.</code> operator. [ <em>Note</em>: If <code>C</code> is not <code>X</code> or a base class of <code>X</code>, the class\n  member access expression is ill-formed. \u2014<em>end note</em> ] Similarly during\n  name lookup, when an <em>unqualified-id</em> (5.1) used in the definition of a\n  member function for class <code>X</code> resolves to a static member, an enumerator\n  or a nested type of class <code>X</code> or of a base class of <code>X</code>, the\n  <em>unqualified-id is</em> transformed into a <em>qualified-id</em> (5.1) in which the\n  <em>nested-name-specifier</em> names the class of the member function.</p>\n</blockquote>\n", "LastActivityDate": "2014-08-15T06:08:04.793", "CommentCount": "1", "CreationDate": "2014-08-15T06:08:04.793", "ParentId": "25321859", "Score": "0", "OwnerUserId": "2756719"}});