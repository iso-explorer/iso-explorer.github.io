post_cb({"20840915": {"ParentId": "20840822", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is <em>ill-formed</em> in <em>C++</em> from the draft standard section <code>8.3.5</code> <em>Functions</em> paragraph <em>10</em> says:</p>\n<blockquote>\n<p id=\"so_20840822_20840915_0\">A typedef of function type may be used to declare a function but shall not be used to define a function (8.4).\n  [ Example:</p>\n<pre><code>typedef void F();\nF fv; // OK: equivalent to void fv();\nF fv { } // ill-formed\nvoid fv() { } // OK: definition of fv\n</code></pre>\n<p id=\"so_20840822_20840915_1\">\u2014end example ][...]</p>\n</blockquote>\n<p>We can see in <em>C</em> this is also specifically forbidden from the C99 draft standard section <code>6.9.1</code> <em>Function definitions</em> says:</p>\n<blockquote>\n<p id=\"so_20840822_20840915_2\">The identifier declared in a function definition (which is the name of the function) shall\n  have a function type, as specified by the declarator portion of the function definition.<sup>141)</sup></p>\n</blockquote>\n<p>and footnote <code>141</code> says:</p>\n<blockquote>\n<p id=\"so_20840822_20840915_3\">The intent is that the type category in a function definition cannot be inherited from a typedef:</p>\n</blockquote>\n<p>and has the following example:</p>\n<pre><code>typedef int F(void); // type F is \u2018\u2018function with no parameters\n                     // returning int\u2019\u2019\nF f, g; // fand g both have type compatible with F\nF f { /* ... */ } // WRONG: syntax/constraint error\n[...]\n</code></pre>\n<p><em>C11</em> says the same things except the footnote is <code>162</code>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-12-30T14:05:39.403", "Id": "20840915", "Score": "7", "CreationDate": "2013-12-30T13:52:29.493", "LastActivityDate": "2013-12-30T14:05:39.403"}, "20840889": {"ParentId": "20840822", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No. You can use the typedef to <em>declare</em> a function:</p>\n<pre><code>FunkyFunc f;\n</code></pre>\n<p>but a function definition must be written with a function-style declarator.</p>\n<p><sub>Note: This is certainly the case in C++, and I'm fairly sure C is the same in this regard; but it would be better if you chose a single language to ask about, since there can be significant differences between C and C++ even where you might imagine they'd be the same.</sub></p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2013-12-30T13:56:55.470", "Id": "20840889", "Score": "2", "CreationDate": "2013-12-30T13:50:49.673", "LastActivityDate": "2013-12-30T13:56:55.470"}, "20840917": {"ParentId": "20840822", "CommentCount": "1", "Body": "<p>What you have written will not work the way you want.  Typedef is an alias to another type.  Imagine that your typedef is not much more than a #define.  Then see what the code would look like.</p>\n<pre><code>int FunkyFunc(int x) f {\nreturn 2*x;\n}\n</code></pre>\n<p>This syntax will not compile.</p>\n", "OwnerUserId": "1778167", "PostTypeId": "2", "Id": "20840917", "Score": "-1", "CreationDate": "2013-12-30T13:52:32.743", "LastActivityDate": "2013-12-30T13:52:32.743"}, "20841237": {"ParentId": "20840822", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You could use <code>#define</code>s to simulate what the C language does not allow (as pointed out by <a href=\"https://stackoverflow.com/users/204847/mike-seymour\"><em>Mike Seymour</em></a>'s <a href=\"https://stackoverflow.com/a/20840889/694576\">answer</a>):</p>\n<pre><code>#define MYFUNKYFUNC(f) int f(int x)\n\nMYFUNKYFUNC(f1)\n{\n  return x;\n}\n\nMYFUNKYFUNC(f2)\n{\n  return 2*x;\n}\n\nint main(void)\n{\n  int x1 = f1(2); /* Assigns 2 to x1. */\n  int x2 = f2(2); /* Assigns 4 to x2. */\n\n  return 0;\n}\n</code></pre>\n<p>Whether your fellow coders will like you for doing so is a different story though.</p>\n", "OwnerUserId": "694576", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:24:12.213", "Id": "20841237", "Score": "1", "CreationDate": "2013-12-30T14:11:09.200", "LastActivityDate": "2013-12-30T14:17:21.630"}, "20840822": {"CommentCount": "2", "ViewCount": "955", "CreationDate": "2013-12-30T13:46:17.193", "LastActivityDate": "2013-12-30T14:17:21.630", "Title": "Can I use a function typedef in function definitions?", "PostTypeId": "1", "Id": "20840822", "Score": "7", "Body": "<p>I've defined:</p>\n<pre><code>typedef int FunkyFunc(int x);\n</code></pre>\n<p>Now, I would like to be able to use this typedef in the definition of functions of type <code>FunkyFunc</code>, e.g.</p>\n<pre><code>FunkyFunc f {\n    return 2*x;\n}\n</code></pre>\n<p>or</p>\n<pre><code>FunkyFunc f(int x) {\n    return 2*x;\n}\n</code></pre>\n<p>or</p>\n<pre><code>FunkyFunc f(x) {\n    return 2*x;\n}\n</code></pre>\n<p>can I do something similar to any of the above? None of them seems to compile.</p>\n", "Tags": "<c++><c><function><typedef>", "OwnerUserId": "1593077", "AnswerCount": "5"}, "20840843": {"ParentId": "20840822", "CommentCount": "0", "Body": "<p>Just write <code>int f(int x) { return 2*x; }</code>.</p>\n<p>If you want to pass a \"FunkyFunc\" as a parameter to another function, for example </p>\n<p><code>void do_something(FunkyFunc *func) { ... }</code></p>\n<p>Then you can simply write</p>\n<p><code>do_something(&amp;f);</code></p>\n", "Id": "20840843", "PostTypeId": "2", "OwnerDisplayName": "user1220978", "Score": "0", "CreationDate": "2013-12-30T13:48:30.647", "LastActivityDate": "2013-12-30T13:48:30.647"}, "bq_ids": {"n4140": {"so_20840822_20840915_0": {"section_id": 3246, "quality": 0.9, "length": 9}}, "n3337": {"so_20840822_20840915_0": {"section_id": 3119, "quality": 0.9, "length": 9}}, "n4659": {"so_20840822_20840915_2": {"section_id": 7225, "quality": 0.5333333333333333, "length": 8}, "so_20840822_20840915_0": {"section_id": 4004, "quality": 0.9, "length": 9}}}});