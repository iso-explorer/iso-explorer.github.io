post_cb({"15805474": {"ParentId": "15805394", "CommentCount": "0", "CreationDate": "2013-04-04T07:53:20.790", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "15805474", "Score": "1", "Body": "<p>The only relevant quote I could find says that an implementation is required to diagnose an ill-formed program, but it can finish compiling it:</p>\n<h3>1.4 Implementation compliance [intro.compliance]</h3>\n<blockquote>\n<p id=\"so_15805394_15805474_0\">8) A conforming implementation may have extensions (including additional\n  library functions), provided they do not alter the behavior of any\n  well-formed program. Implementations are required to diagnose programs\n  that use such extensions that are ill-formed according to this\n  International Standard. Having done so, however, they can compile and\n  execute such programs.</p>\n</blockquote>\n", "LastActivityDate": "2013-04-04T07:53:20.790"}, "15805505": {"ParentId": "15805394", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2013-04-04T07:55:08.023", "Score": "4", "LastEditorUserId": "1782465", "LastEditDate": "2013-04-04T08:41:38.610", "Id": "15805505", "OwnerUserId": "1782465", "Body": "<p>Quoting [intro.compliance]\u00a72:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_15805394_15805505_0\">If a program contains no violations of the rules in this International Standard, a conforming implementation shall, within its\n  resource limits, accept and correctly execute that program.</p></li>\n<li><p id=\"so_15805394_15805505_1\">If a program contains a violation of any diagnosable rule or an occurrence of a construct described in this Standard as\n  \u201cconditionally-supported\u201d when the implementation does not support\n  that construct, a conforming implementation shall issue at least one\n  diagnostic message.</p></li>\n<li><p id=\"so_15805394_15805505_2\">If a program contains a violation of a rule for which no diagnostic is required, this International Standard places no requirement on\n  implementations with respect to that program.</p></li>\n</ul>\n</blockquote>\n<p>I haven't found any other relevant passages in the standard. If we combine this with [defns.undefined]:</p>\n<blockquote>\n<p id=\"so_15805394_15805505_3\"><strong>undefined behavior</strong></p>\n<p id=\"so_15805394_15805505_4\">behavior for which this International Standard imposes no requirements</p>\n<p id=\"so_15805394_15805505_5\">[ <em>Note:</em> Undefined behavior may be expected when this International\n  Standard omits any explicit definition of behavior or when a program\n  uses an erroneous construct or erroneous data. Permissible undefined\n  behavior ranges from ignoring the situation completely with\n  unpredictable results, to behaving during translation or program\n  execution in a documented manner characteristic of the environment\n  (with or without the issuance of a diagnostic message), to terminating\n  a translation or execution (with the issuance of a diagnostic\n  message). Many erroneous program constructs do not engender undefined\n  behavior; they are required to be diagnosed. <em>-end note</em> ]</p>\n</blockquote>\n<p>I'd say we arrive at \"issue a diagnostic message and further the behaviour is undefined,\" because the standard doesn't say anything more about it.</p>\n", "LastActivityDate": "2013-04-04T08:41:38.610"}, "21591062": {"ParentId": "15805394", "CommentCount": "0", "CreationDate": "2014-02-05T23:40:31.367", "OwnerUserId": "1794803", "PostTypeId": "2", "Id": "21591062", "Score": "2", "Body": "<p>(First of all, sorry for my English)</p>\n<p>The Standard, in \u00a71.4.2 says:</p>\n<blockquote>\n<p id=\"so_15805394_21591062_0\">If a program contains a violation of any diagnosable rule [...] a conforming implementation shall issue at least one diagnostic message.</p>\n</blockquote>\n<p>The definition of a ill-formed program is \"a program that is not well formed\" (\u00a71.3.9), and a well-formed program is (\u00a71.3.26):</p>\n<blockquote>\n<p id=\"so_15805394_21591062_1\">C++ program constructed according to the syntax rules, diagnosable semantic rules, and the One Definition Rule</p>\n</blockquote>\n<p>So, a ill-formed program does implicitly violate \"some\" rule. If a rule R has the following structure:</p>\n<blockquote>\n<p id=\"so_15805394_21591062_2\">If a program has property P, it is an ill-formed program.</p>\n</blockquote>\n<p>When a program has such property P, it does implicitly violate a rule (by definition of an ill-formed program), although it isn't clear which rule is the one which are being violated, since R itself doesn't (from a strictly logical point of view).</p>\n", "LastActivityDate": "2014-02-05T23:40:31.367"}, "15805394": {"CommentCount": "0", "ViewCount": "1365", "CreationDate": "2013-04-04T07:48:52.043", "LastActivityDate": "2015-08-01T20:27:18.860", "Title": "What is the C++ compiler required to do with ill-formed programs according to the Standard?", "FavoriteCount": "5", "PostTypeId": "1", "Id": "15805394", "Score": "18", "Body": "<p>C++03 Standard defines <em>well-formed program</em> (1.3.14 [defns.well.formed]) as</p>\n<blockquote>\n<p id=\"so_15805394_15805394_0\">a C++ program constructed according to the syntax rules, diagnosable semantic rules, and the One Definition Rule (3.2)</p>\n</blockquote>\n<p>It further defines an <em>ill-formed program</em> (1.3.4 [defns.ill.formed]) as</p>\n<blockquote>\n<p id=\"so_15805394_15805394_1\">input to a C++ implementation that is not a well-formed program (1.3.14)</p>\n</blockquote>\n<p>and the Standard is full of statements such as \"if X then the program is ill-formed\" for example (2.13.1/3):</p>\n<blockquote>\n<p id=\"so_15805394_15805394_2\">A program is ill-formed if one of its translation units contains an integer literal that cannot be represented by any of the allowed types.</p>\n</blockquote>\n<p>Yet I haven't found what the C++ implementation is required to do with ill-formed programs.</p>\n<p>Suppose I have an ill-formed program. Now what?</p>\n<p>Is the C++ implementation required to do something specific when it encounters an ill-formed program or is the C++ implementation behavior just undefined?</p>\n", "Tags": "<c++><compiler-construction><language-lawyer>", "OwnerUserId": "57428", "AnswerCount": "4"}, "15805532": {"ParentId": "15805394", "PostTypeId": "2", "CommentCount": "16", "CreationDate": "2013-04-04T07:56:19.917", "Score": "8", "LastEditorUserId": "2756719", "LastEditDate": "2015-08-01T20:27:18.860", "Id": "15805532", "OwnerUserId": "1932150", "Body": "<blockquote>\n<p id=\"so_15805394_15805532_0\">Is the C++ implementation required to do something specific when it encounters an ill-formed program or is the C++ implementation behavior just undefined?</p>\n</blockquote>\n<p><strong>If the Standard does not specify otherwise, an implementation should emit a diagnostic message</strong> (error or warning). However, for some violations the Standard explicitly specifies that <em>no diagnostic is required</em>. In this case, the program is ill-formed, but implementations are not required to tell the user - usually, because doing so in the general case would be too difficult.</p>\n<p>Concerning the One Definition Rule, for example, see Paragraph 3.2/4 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15805394_15805532_1\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used\n  in that program; <strong>no diagnostic required</strong>.</p>\n</blockquote>\n<p>Regarding the requirements on implementations when encountering a violation of a rule, Paragraph 1.4/2 specifies:</p>\n<blockquote>\n<p id=\"so_15805394_15805532_2\">[...]</p>\n<p id=\"so_15805394_15805532_3\">\u2014 If a program contains no violations of the rules in this International Standard, a conforming implementation\n  shall, within its resource limits, accept and correctly execute that program.</p>\n<p id=\"so_15805394_15805532_4\">\u2014 <strong>If a program contains a violation of any diagnosable rule</strong> or an occurrence of a construct described in\n  this Standard as \u201cconditionally-supported\u201d when the implementation does not support that construct,\n  <strong>a conforming implementation shall issue at least one diagnostic message</strong>.</p>\n<p id=\"so_15805394_15805532_5\">\u2014 If a program contains a violation of a rule for which no diagnostic is required, this International\n  Standard places no requirement on implementations with respect to that program.</p>\n</blockquote>\n<p>Also relevant is Paragraph 1.4/1, which explains what is meant by \"<em>diagnosable rules</em>\" in the Paragraph quoted above:</p>\n<blockquote>\n<p id=\"so_15805394_15805532_6\">The set of diagnosable rules consists of <strong>all syntactic and semantic rules</strong> in this International Standard <strong>except\n  for those rules containing an explicit notation that \u201cno diagnostic is required\u201d or which are described as\n  resulting in \u201cundefined behavior.\u201d</strong></p>\n</blockquote>\n<p>So to sum it up: if an ill-formed program contains a diagnosable violation for which the Standard does not explicitly specify \"<em>no diagnostic required</em>\", conforming implementations should emit a diagnostic.</p>\n", "LastActivityDate": "2015-08-01T20:27:18.860"}, "bq_ids": {"n4140": {"so_15805394_15805532_5": {"section_id": 5770, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805505_1": {"section_id": 5770, "quality": 0.9523809523809523, "length": 20}, "so_15805394_15805394_0": {"section_id": 5768, "quality": 1.0, "length": 10}, "so_15805394_15805532_4": {"section_id": 5770, "quality": 0.9523809523809523, "length": 20}, "so_15805394_21591062_1": {"section_id": 5768, "quality": 1.0, "length": 10}, "so_15805394_15805505_4": {"section_id": 5768, "quality": 0.8, "length": 4}, "so_15805394_21591062_0": {"section_id": 5770, "quality": 1.0, "length": 11}, "so_15805394_15805505_0": {"section_id": 5770, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805394_2": {"section_id": 5342, "quality": 1.0, "length": 12}, "so_15805394_15805532_1": {"section_id": 7041, "quality": 1.0, "length": 12}, "so_15805394_15805532_3": {"section_id": 5770, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805532_6": {"section_id": 5769, "quality": 0.8695652173913043, "length": 20}, "so_15805394_15805505_5": {"section_id": 5768, "quality": 0.9272727272727272, "length": 51}, "so_15805394_15805505_2": {"section_id": 5770, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805474_0": {"section_id": 5776, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_15805394_15805532_5": {"section_id": 5543, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805505_1": {"section_id": 5543, "quality": 0.9523809523809523, "length": 20}, "so_15805394_15805394_0": {"section_id": 5541, "quality": 1.0, "length": 10}, "so_15805394_15805532_4": {"section_id": 5543, "quality": 0.9523809523809523, "length": 20}, "so_15805394_21591062_1": {"section_id": 5541, "quality": 1.0, "length": 10}, "so_15805394_15805505_4": {"section_id": 5541, "quality": 0.8, "length": 4}, "so_15805394_21591062_0": {"section_id": 5543, "quality": 1.0, "length": 11}, "so_15805394_15805505_0": {"section_id": 5543, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805394_2": {"section_id": 5139, "quality": 1.0, "length": 12}, "so_15805394_15805532_1": {"section_id": 6786, "quality": 1.0, "length": 12}, "so_15805394_15805532_3": {"section_id": 5543, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805532_6": {"section_id": 5542, "quality": 0.8695652173913043, "length": 20}, "so_15805394_15805505_5": {"section_id": 5541, "quality": 0.9272727272727272, "length": 51}, "so_15805394_15805505_2": {"section_id": 5543, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805474_0": {"section_id": 5549, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_15805394_15805532_5": {"section_id": 7227, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805505_1": {"section_id": 7227, "quality": 0.9523809523809523, "length": 20}, "so_15805394_15805532_4": {"section_id": 7227, "quality": 0.9523809523809523, "length": 20}, "so_15805394_15805532_1": {"section_id": 8538, "quality": 1.0, "length": 12}, "so_15805394_21591062_1": {"section_id": 7225, "quality": 0.7, "length": 7}, "so_15805394_15805474_0": {"section_id": 7233, "quality": 0.9705882352941176, "length": 33}, "so_15805394_15805505_4": {"section_id": 7225, "quality": 0.8, "length": 4}, "so_15805394_21591062_0": {"section_id": 7227, "quality": 1.0, "length": 11}, "so_15805394_15805505_0": {"section_id": 7227, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805532_3": {"section_id": 7227, "quality": 0.9285714285714286, "length": 13}, "so_15805394_15805394_0": {"section_id": 7225, "quality": 0.7, "length": 7}, "so_15805394_15805394_2": {"section_id": 6763, "quality": 1.0, "length": 12}, "so_15805394_15805505_5": {"section_id": 7225, "quality": 0.9272727272727272, "length": 51}, "so_15805394_15805505_2": {"section_id": 7227, "quality": 0.9090909090909091, "length": 10}, "so_15805394_15805532_6": {"section_id": 7226, "quality": 0.8695652173913043, "length": 20}}}});