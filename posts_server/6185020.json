post_cb({"6185020": {"CommentCount": "4", "AcceptedAnswerId": "6185043", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2011-05-31T08:43:50.197", "LastActivityDate": "2011-05-31T09:14:29.433", "LastEditDate": "2011-05-31T09:14:29.433", "ViewCount": "8829", "FavoriteCount": "8", "Title": "Initializing member variables using the same name for constructor arguments as for the member variables allowed by the C++ standard?", "Id": "6185020", "Score": "40", "Body": "<p>I figured out that it's possible to initialize the member variables with a constructor argument of the same name as show in the example below.</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n\nclass Blah {\n    std::vector&lt;int&gt; vec;\n\npublic:\n    Blah(std::vector&lt;int&gt; vec): vec(vec)\n    {}\n\n    void printVec() {\n\n        for(unsigned int i=0; i&lt;vec.size(); i++)\n            printf(\"%i \", vec.at(i));\n\n        printf(\"\\n\");\n    }\n};\n\nint main() {\n\n    std::vector&lt;int&gt; myVector(3);\n\n    myVector.at(0) = 1;\n    myVector.at(1) = 2;\n    myVector.at(2) = 3;\n\n    Blah blah(myVector);\n\n    blah.printVec();\n\n    return 0;\n}\n</code></pre>\n<p>g++ 4.4 with the arguments <code>-Wall -Wextra -pedantic</code> gives no warning and works correctly. It also works with clang++. I wonder what the C++ standard says about it? Is it legal and guaranteed to always work?</p>\n", "Tags": "<c++>", "OwnerUserId": "44232", "AnswerCount": "2"}, "6185043": {"ParentId": "6185020", "PostTypeId": "2", "CommentCount": "16", "Body": "<blockquote>\n<p id=\"so_6185020_6185043_0\">I wonder what the C++ standard says about it? Is it legal and guaranteed to always work?</p>\n</blockquote>\n<p>Yes. That is perfectly legal. Fully Standard conformant.</p>\n<pre><code>Blah(std::vector&lt;int&gt; vec): vec(vec){}\n                             ^   ^                           \n                             |   |\n                             |    this is the argument to the constructor\n                             this is your member data\n</code></pre>\n<p>Since you asked for the reference in the Standard, here it is, with an example.</p>\n<p>\u00a712.6.2/7</p>\n<blockquote>\n<p id=\"so_6185020_6185043_1\">Names in the expression-list of a mem-initializer are evaluated in the scope of the constructor for which the mem-initializer is specified. </p>\n</blockquote>\n<pre><code>[Example:\nclass X {\n int a;\n int b;\n int i;\n int j;\n public:\n const int&amp; r;\n  X(int i): r(a), b(i), i(i), j(this-&gt;i) {}\n                      //^^^^ note this (added by Nawaz)\n};\n</code></pre>\n<blockquote>\n<p id=\"so_6185020_6185043_2\">initializes X::r to refer to X::a,\n  initializes X::b with the value of the\n  constructor parameter i, initializes\n  X::i with the value of the constructor\n  parameter i, and initializes X::j with\n  the value of X::i; this takes place\n  each time an object of class X is\n  created. ] </p>\n<p id=\"so_6185020_6185043_3\">[Note: because the\n  mem-initializer are evaluated in the\n  scope of the constructor, the this\n  pointer can be used in the\n  expression-list of a mem-initializer\n  to refer to the object being\n  initialized. ]</p>\n</blockquote>\n<p>As you can see, there're other interesting thing to note in the above example, and the commentary from the Standard itself.</p>\n<hr>\n<p>BTW, as side note, why don't you accept the parameter as <em>const</em> reference:</p>\n<pre><code> Blah(const std::vector&lt;int&gt; &amp; vec): vec(vec) {}\n      ^^^^const              ^reference\n</code></pre>\n<p>It avoids unneccessary copy of the original vector object.</p>\n</hr>", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-05-31T09:08:07.370", "Id": "6185043", "Score": "56", "CreationDate": "2011-05-31T08:45:33.550", "LastActivityDate": "2011-05-31T09:08:07.370"}, "bq_ids": {"n4140": {"so_6185020_6185043_2": {"section_id": 440, "quality": 1.0, "length": 19}, "so_6185020_6185043_1": {"section_id": 440, "quality": 1.0, "length": 8}, "so_6185020_6185043_3": {"section_id": 440, "quality": 0.8571428571428571, "length": 12}, "so_6185020_6185105_0": {"section_id": 440, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_6185020_6185043_2": {"section_id": 431, "quality": 1.0, "length": 19}, "so_6185020_6185043_1": {"section_id": 431, "quality": 1.0, "length": 8}, "so_6185020_6185043_3": {"section_id": 431, "quality": 0.8571428571428571, "length": 12}, "so_6185020_6185105_0": {"section_id": 431, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_6185020_6185105_0": {"section_id": 460, "quality": 0.8888888888888888, "length": 8}, "so_6185020_6185043_2": {"section_id": 460, "quality": 1.0, "length": 19}, "so_6185020_6185043_1": {"section_id": 460, "quality": 1.0, "length": 8}, "so_6185020_6185043_3": {"section_id": 460, "quality": 0.8571428571428571, "length": 12}}}, "6185105": {"ParentId": "6185020", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is guaranteed always to work (I use it quite often). The compiler knows that the initializer list is of the form: <code>member(value)</code>, and so it knows that the first <code>vec</code> in <code>vec(vec)</code> must be a member. Now on the argument to initialize the member, both members, arguments to the constructor and other symbols can be used, as in any expression that would be present inside the constructor. At this point it applies the regular lookup rules, and the argument <code>vec</code> hides the member <code>vec</code>.</p>\n<p>Section 12.6.2 of the standard deals with initialization and it explains the process with paragraph 2 dealing with lookup for the member and paragraph 7 with the lookup of the argument.</p>\n<blockquote>\n<p id=\"so_6185020_6185105_0\">Names in the expression-list of a mem-initializer are evaluated in the scope of the constructor for which the mem-initializer is specified. [Example:</p>\n</blockquote>\n<pre><code>class X {\n   int a;\n   int b;\n   int i;\n   int j;\npublic:\n   const int&amp; r;\n   X(int i): r(a), b(i), i(i), j(this-&gt;i) {}\n};\n</code></pre>\n", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2011-05-31T08:59:14.600", "Id": "6185105", "Score": "8", "CreationDate": "2011-05-31T08:52:32.607", "LastActivityDate": "2011-05-31T08:59:14.600"}});