post_cb({"12669170": {"ParentId": "12668766", "CommentCount": "0", "Body": "<p>First, I don't think you want to do this.  Not all sequences have an\nunderlying container.  (Think of <code>istream_iterator</code>s, for example.)  And\nmore importantly, you're distinctly allowing (and even encouraging)\nbegin and end iterators from different containers; there is <em>no</em> case\nwhere you could legally use this function where <code>T1</code> and <code>T2</code> have\ndifferent types.  The template should have a single parameter, which\nshould be an iterator; and by convention, the constraints on the\niterator should be expressed in the name of the parameter, e.g.\n<code>InputIterator</code> (the case here), <code>ForwardIterator</code>, etc. </p>\n<p>As to why your code doesn't compile:</p>\n<blockquote>\n<p id=\"so_12668766_12669170_0\">In most cases, the types, templates, and non-type values that are used\n  to compose P participate in template argument deduction. That is, they\n  may be used to determine the value of a template argument, and the\n  value so determined must be consistent with the values determined\n  elsewhere. In certain contexts, however, the value does not\n  participate in type deduction, but instead uses the values of template\n  arguments that were either deduced elsewhere or explicitly specified.\n  If a template parameter is used only in non-deduced contexts and is\n  not explicitly specified, template argument deduction fails.</p>\n<p id=\"so_12668766_12669170_1\">The non-deduced contexts are:</p>\n<p id=\"so_12668766_12669170_2\">\u2014 The nested-name-specifier of a type that was specified using a\n  qualified-id.</p>\n<p id=\"so_12668766_12669170_3\">[...]</p>\n</blockquote>\n<p>(From \u00a714.8.2.5/4,5.)</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "12669170", "Score": "4", "CreationDate": "2012-10-01T07:38:14.893", "LastActivityDate": "2012-10-01T07:38:14.893"}, "12668908": {"ParentId": "12668766", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You dont need to tell it that iterators have to be members of some types <code>T1</code> and <code>T2</code>, just template it on iterator type itself:</p>\n<pre><code>template &lt;typename Iter&gt;\nconst double Sum(Iter iterator_begin, Iter iterator_end)\n{\n    double my_sum = 0;\n    for (; iterator_begin != iterator_end; ++iterator_end)\n        my_sum += *iterator_begin;\n    return my_sum;      \n}\n\nint main()\n{\n    std::list&lt;double&gt; test_list;\n    std::cout &lt;&lt; Sum(test_list.begin(), test_list.end());\n    return 0;\n}\n</code></pre>\n<p>also there is a standard <a href=\"http://en.cppreference.com/w/cpp/algorithm/accumulate\" rel=\"nofollow\">std::accumulate</a> that does this:</p>\n<pre><code>int main()\n{\n    std::list&lt;double&gt; test_list;\n    std::cout &lt;&lt; std::accumulate(test_list.begin(), test_list.end(), 0.0);\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "1554020", "LastEditorUserId": "1554020", "LastEditDate": "2012-10-01T07:18:30.507", "Id": "12668908", "Score": "5", "CreationDate": "2012-10-01T07:12:33.253", "LastActivityDate": "2012-10-01T07:18:30.507"}, "12668834": {"ParentId": "12668766", "CommentCount": "1", "Body": "<p>Call method like this..</p>\n<pre><code>Sum&lt;list&lt;double&gt;,list&lt;double&gt; &gt;(test_list.begin(), test_list.begin());\n</code></pre>\n", "OwnerUserId": "1195449", "PostTypeId": "2", "Id": "12668834", "Score": "2", "CreationDate": "2012-10-01T07:06:13.947", "LastActivityDate": "2012-10-01T07:06:13.947"}, "bq_ids": {"n4140": {"so_12668766_12669170_2": {"section_id": 336, "quality": 0.8571428571428571, "length": 6}, "so_12668766_12669170_0": {"section_id": 335, "quality": 0.9818181818181818, "length": 54}}, "n3337": {"so_12668766_12669170_2": {"section_id": 326, "quality": 0.8571428571428571, "length": 6}, "so_12668766_12669170_0": {"section_id": 325, "quality": 0.9818181818181818, "length": 54}}, "n4659": {"so_12668766_12669170_2": {"section_id": 345, "quality": 0.8571428571428571, "length": 6}, "so_12668766_12669170_0": {"section_id": 344, "quality": 0.9818181818181818, "length": 54}}}, "12668766": {"CommentCount": "0", "ViewCount": "1115", "PostTypeId": "1", "LastEditorUserId": "1708779", "CreationDate": "2012-10-01T06:59:05.443", "LastActivityDate": "2012-10-01T07:38:14.893", "Title": "Function Overloading, Could Not Deduce Template Argument", "AcceptedAnswerId": "12668908", "LastEditDate": "2012-10-01T07:06:20.373", "Id": "12668766", "Score": "0", "Body": "<p>I'm trying to overload a Sum function which accepts a [list or vector] start and end iterator as arguments. This compiler error is really confusing me. Relevant code is as follows:</p>\n<pre><code>template &lt;typename T1, typename T2&gt;\nconst double Sum(const typename T1::const_iterator&amp; start_iter, const typename T2::const_iterator&amp; end_iter)\n{// overloaded function that calculates sum between two iterators\n    typename T1::const_iterator iterator_begin = start_iter;\n    typename T2::const_iterator iterator_end = end_iter;\n\n    double my_sum = 0;\n\n    for (iterator_begin; iterator_begin != iterator_end; iterator_begin++)\n        my_sum += *iterator_begin;\n\n    return my_sum;      \n}\n\nint main()\n{\n\nlist&lt;double&gt; test_list(10,5.1);\ncout &lt;&lt; Sum(test_list.begin(), test_list.end()); // compiler errors here\n\n}\n</code></pre>\n<p>I get the following compiler errors:</p>\n<blockquote>\n<p id=\"so_12668766_12668766_0\">iterators.cpp(72): error C2783: 'const double Sum(const\n  T1::const_iterator &amp;,const T2::const_iterator &amp;)' : could not deduce\n  template argument for 'T1'</p>\n<p id=\"so_12668766_12668766_1\">iterators.cpp(72): error C2783: 'const double Sum(const\n  T1::const_iterator &amp;,const T2::const_iterator &amp;)' : could not deduce\n  template argument for 'T2'</p>\n<p id=\"so_12668766_12668766_2\">iterators.cpp(72): error C2780: 'const double Sum(const\n  std::map &amp;)' : expects 1 arguments - 2 provided</p>\n<p id=\"so_12668766_12668766_3\">iterators.cpp(72): error C2780: 'const double Sum(const T &amp;)' :\n  expects 1 arguments - 2 provided</p>\n</blockquote>\n<p>How is the compiler not recognizing I'm trying to call the Sum function with two inputs? I'm calling the function incorrectly?</p>\n<p>Thanks!</p>\n", "Tags": "<c++><templates><stl><iterator><function-overloading>", "OwnerUserId": "1708779", "AnswerCount": "3"}});