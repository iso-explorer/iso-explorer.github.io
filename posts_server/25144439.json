post_cb({"25144439": {"ViewCount": "184", "Body": "<p>Does <code>A::foo</code> need to be declared public for <code>B</code> to declare it friend? </p>\n<pre><code>class A {\n    protected:  // public ?\n        void foo(int x);\n};\n\nclass B : public A {\n    friend void A::foo(int);  // not fine with GCC 4.8.1 but fine with VS 2013\n    void goo(int x) {foo(x);}  // fine\n    static void hoo(int x) {}\n};\n\nvoid A::foo(int x) {B::hoo(x);}  // friend declaration needed for this\n</code></pre>\n<p>Visual Studio 2013 thinks it is fine if A::foo is protected, but GCC 4.8.1 thinks it's not and wants it to be public.  Which compiler is correct?  My initial instinct was that it can be declared protected.  After all, B is derived from A, so should have access to A::foo (as B::goo demonstrates trivially).</p>\n", "Title": "Declaring protected function friend", "CreationDate": "2014-08-05T17:02:55.913", "LastActivityDate": "2014-08-05T20:41:53.477", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-05T17:33:07.617", "LastEditorUserId": "3089350", "Id": "25144439", "Score": "6", "OwnerUserId": "3089350", "Tags": "<c++><function><friend><protected>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25144439_25146171_0": {"length": 10, "quality": 1.0, "section_id": 6692}}, "n3337": {"so_25144439_25146171_0": {"length": 10, "quality": 1.0, "section_id": 6447}}, "n4659": {"so_25144439_25146171_0": {"length": 10, "quality": 1.0, "section_id": 8167}}}, "25146171": {"Id": "25146171", "PostTypeId": "2", "Body": "<p><strong>VS is correct here</strong>. </p>\n<p>The name <code>A::foo</code> is in fact accessible in the scope of <code>B</code> since it's publicly derived from <code>A</code>. To <a href=\"http://coliru.stacked-crooked.com/a/2e8babae9d8a6aab\" rel=\"nofollow noreferrer\"><strong>prove</strong></a> this, consider </p>\n<pre><code>class A {\n    protected:\n        void foo(int x);\n};\n\nclass B : A {\n    using A::foo; // it's OK to refer to the name A::foo\n};\n\nvoid A::foo(int x) {}  \n</code></pre>\n<p>So by using the quote \u00a7 11.3 [friend functions]</p>\n<blockquote>\n<p id=\"so_25144439_25146171_0\">A name nominated by a friend declaration shall be accessible in the scope of the class containing the friend declaration.</p>\n</blockquote>\n<p>we can argue that's there's no violation of the rules (<code>foo</code> is also protected in the derived class). </p>\n<p><sup>It seems like in gcc, once the <code>friend</code> keyword is placed in front of the friend function declaration, name lookup starts ignoring inheritance (nothing to do though with friendship not being inheritable)</sup></p>\n<hr>\n<p>As mentioned by <a href=\"https://stackoverflow.com/users/2352671/40two\">40two</a> in the comments <strong>the same error is emitted from Clang and there's a <a href=\"http://llvm.org/bugs/show_bug.cgi?id=19686\" rel=\"nofollow noreferrer\">bug report</a> for it</strong>; this issue is also reffered to <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_closed.html#209\" rel=\"nofollow noreferrer\">DR209</a>. It seems that for the implementers to get this right is quite hard.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-08-05T20:41:53.477", "Score": "2", "CreationDate": "2014-08-05T18:47:21.430", "ParentId": "25144439", "CommentCount": "5", "OwnerUserId": "2567683", "LastEditDate": "2017-05-23T10:26:16.553"}});