post_cb({"34037853": {"CommentCount": "4", "AcceptedAnswerId": "34037902", "ClosedDate": "2015-12-02T10:09:22.567", "CreationDate": "2015-12-02T08:20:48.720", "LastActivityDate": "2015-12-02T08:38:55.130", "PostTypeId": "1", "ViewCount": "476", "FavoriteCount": "1", "Title": "confused by C++ logical OR (||) operator", "Id": "34037853", "Score": "8", "Body": "<p>Suppose I have two expressions left/right of <code>||</code> operator. I find if left expression is true, the right operator will never be called. For example, in my below code, when <code>getRand</code> returns true, I found <code>Foo</code> will never be called. I tested on XCode on Mac OSX, and wondering if it is a reliable feature of C++ we could rely on -- if left part of || is true, right part will never be called, or it is a special feature just for specific platform (e.g. OSX with XCode)? Post my code below, thanks.</p>\n<pre><code>bool Foo()\n{\n    std::cout &lt;&lt; \"I am called!\\n\";\n    return false;\n}\n\nbool getRand()\n{\n    int random_variable = std::rand();\n    std::cout &lt;&lt; random_variable &lt;&lt; '\\n';\n\n    return random_variable % 2 == 1;\n}\n\nint main(int argc, const char * argv[]) {\n\n    if (getRand() || Foo())\n    {\n        std::cout&lt;&lt;\"Hello World \\n\";\n    }\n\n    return 0;\n}\n</code></pre>\n<p>thanks in advance,\nLin</p>\n", "Tags": "<c++>", "OwnerUserId": "1850923", "AnswerCount": "3"}, "34037915": {"ParentId": "34037853", "CommentCount": "1", "CreationDate": "2015-12-02T08:24:04.053", "OwnerUserId": "1695172", "PostTypeId": "2", "Id": "34037915", "Score": "1", "Body": "<p>Since its one choice or another there is no need for the second part to be evaluated, is not platform dependant is a language feature.</p>\n", "LastActivityDate": "2015-12-02T08:24:04.053"}, "34037902": {"ParentId": "34037853", "CommentCount": "1", "CreationDate": "2015-12-02T08:23:08.637", "OwnerUserId": "198536", "PostTypeId": "2", "Id": "34037902", "Score": "10", "Body": "<p>Yes, it is a guaranteed feature called <a href=\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\">short circuit evaluation</a>.</p>\n<p>Likewise, an expression  <code>false  &amp;&amp;  expression</code>  will never evaluate the right expression.</p>\n", "LastActivityDate": "2015-12-02T08:23:08.637"}, "bq_ids": {"n4140": {"so_34037853_34037914_1": {"section_id": 6165, "quality": 0.9354838709677419, "length": 29}}, "n3337": {"so_34037853_34037914_1": {"section_id": 5926, "quality": 0.9354838709677419, "length": 29}}, "n4659": {"so_34037853_34037914_1": {"section_id": 7662, "quality": 0.9354838709677419, "length": 29}}}, "34037914": {"ParentId": "34037853", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-12-02T08:24:03.130", "Score": "8", "LastEditorUserId": "3309790", "LastEditDate": "2015-12-02T08:38:55.130", "Id": "34037914", "OwnerUserId": "3309790", "Body": "<blockquote>\n<p id=\"so_34037853_34037914_0\">wondering if it is a reliable feature of C++ we could rely on -- if left part of || is true, right part will never be called?</p>\n</blockquote>\n<p>Yes, for builtin operator.</p>\n<p>From the standard, $5.15/1 Logical OR operator [expr.log.or] (bold by me)</p>\n<blockquote>\n<p id=\"so_34037853_34037914_1\">The || operator groups left-to-right. The operands are both\n  contextually converted to bool (Clause 4). It returns true if either\n  of its operands is true, and false otherwise. Unlike |, || guarantees\n  left-to-right evaluation; moreover, <strong>the second operand is not\n  evaluated if the first operand evaluates to true</strong>.</p>\n</blockquote>\n<p>And note that the overload of <code>operator||</code> will lose this special property.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/operator_logical\">Logical operators</a> (bold by me)</p>\n<blockquote>\n<p id=\"so_34037853_34037914_2\">Builtin operators &amp;&amp; and || perform short-circuit evaluation (do not\n  evaluate the second operand if the result is known after evaluating\n  the first), but <strong>overloaded operators behave like regular function\n  calls and always evaluate both operands</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2015-12-02T08:38:55.130"}});