post_cb({"9921066": {"Id": "9921066", "PostTypeId": "2", "Body": "<p>I dont see how not releasing memory will lead to undefined behaviour.\nIf you dont clean up, the OS still has knowledge of the allocated memory. That will lead to a resource leak for as long as the application runs.</p>\n", "LastEditorUserId": "1052126", "LastActivityDate": "2012-04-11T11:01:17.983", "Score": "0", "CreationDate": "2012-03-29T07:41:24.707", "ParentId": "9920973", "CommentCount": "2", "OwnerUserId": "1052126", "LastEditDate": "2012-04-11T11:01:17.983"}, "9921060": {"Id": "9921060", "PostTypeId": "2", "Body": "<p>The standard is clear with regards to the semantics of <code>new</code> and <code>delete</code>.  There's certainly no undefined behavior if you don't call <code>delete</code>; it is, in fact, standard practice for singletons, and I imagine that <code>std::cout</code> and <code>std::cin</code> use <code>new[]</code> to acquire their buffers (which they almost certainly never <code>delete</code>).  Why would not calling <code>delete</code> be undefined behavior?</p>\n<p>What is undefined behavior is calling the wrong form of <code>delete</code>, calling <code>free</code> for memory allocated with <code>new</code>, or in general to attempt to delete an object without following the protocol required by its allocation.</p>\n", "LastActivityDate": "2012-03-29T07:41:16.847", "CommentCount": "2", "CreationDate": "2012-03-29T07:41:16.847", "ParentId": "9920973", "Score": "8", "OwnerUserId": "649665"}, "9921320": {"Id": "9921320", "PostTypeId": "2", "Body": "<p>[basic.life] (3.8 Object lifetime) in paragraph 4 tells :</p>\n<blockquote>\n<p id=\"so_9920973_9921320_0\">A program may end the lifetime of any object by reusing the storage which the object occupies or by explicitly calling the destructor for an object of a class type with a non-trivial destructor. For an object of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly before the storage which the object occupies is reused or released; however, <strong>if there is no explicit call to the destructor or if a delete-expression (5.3.5) is not used to release the storage, the destructor shall not be implicitly called and any program that depends on the side e\ufb00ects produced by the destructor has unde\ufb01ned\n  behavior.</strong></p>\n</blockquote>\n", "LastActivityDate": "2012-03-29T08:00:03.910", "CommentCount": "5", "CreationDate": "2012-03-29T08:00:03.910", "ParentId": "9920973", "Score": "8", "OwnerUserId": "476681"}, "9921042": {"Id": "9921042", "PostTypeId": "2", "Body": "<p>It's just a memory leak. </p>\n<p>But I explicitly remember the standard saying that use <code>new</code> with <code>delete[]</code> and <code>new []</code> with <code>delete</code> is undefined behavior. (or any combination with <code>malloc</code> or <code>free</code>)</p>\n<p>I don't think the standard specifically says calling <code>new</code> results in undefined behavior if you fail to call <code>delete</code>. Also, how can the run-time tell if you call <code>delete</code> sometime later or never call it at all?</p>\n<p>I don't think there are any contracts in the standard that say - if you do <strong>X</strong>, you MUST do <strong>Y</strong> afterwards, otherwise it's UB.</p>\n", "LastActivityDate": "2012-03-29T07:40:08.890", "CommentCount": "12", "CreationDate": "2012-03-29T07:40:08.890", "ParentId": "9920973", "Score": "0", "OwnerUserId": "673730"}, "bq_ids": {"n4140": {"so_9920973_9921320_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 7192}}, "n3337": {"so_9920973_9921320_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 6936}}, "n4659": {"so_9920973_9921320_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 8701}}}, "9920973": {"ViewCount": "2189", "Body": "<blockquote>\n<p id=\"so_9920973_9920973_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1978709/are-memory-leaks-undefined-behavior-class-problem-in-c\">Are memory leaks \u201cundefined behavior\u201d class problem in C++?</a> </br></p>\n</blockquote>\n<p>Never calling <code>delete</code> or <code>delete[]</code> on address returned by <code>new</code> or <code>new []</code> resp in a C++ program is an Undefined Behavior or merely a memory leak?      </p>\n<p>References from the Standard(if any) are welcome.<br>\nThis came up in one of the comments <a href=\"https://stackoverflow.com/a/9920252/452307\">here</a> &amp; I am just a bit confused about it.</br></p>\n", "AcceptedAnswerId": "9921320", "Title": "new() without delete() is Undefined Behavior or merely Memory Leak?", "CreationDate": "2012-03-29T07:35:36.490", "Id": "9920973", "CommentCount": "11", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:07:01.127", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-11T11:01:17.983", "ClosedDate": "2012-03-30T01:43:35.480", "Score": "1", "OwnerUserId": "452307", "Tags": "<c++><memory-leaks><new-operator><undefined-behavior>", "AnswerCount": "7"}, "9921050": {"Id": "9921050", "PostTypeId": "2", "Body": "<p>Let's say that if you do not call delete your program will still work. BUT if you do not delete memory allocations your program memory usage will keep growing until your program will run out of free memory (the longer you run it better are the chances for it to happen) which will cause crashes at different points and will be very hard to detect (and I think that whats 'Undefined Behavior' mentioned in the comment means)</p>\n", "LastActivityDate": "2012-03-29T07:40:45.803", "CommentCount": "2", "CreationDate": "2012-03-29T07:40:45.803", "ParentId": "9920973", "Score": "0", "OwnerUserId": "986169"}, "9921477": {"Id": "9921477", "PostTypeId": "2", "Body": "<p>If <code>delete/delete[]</code> is not called for the objects allocated with <code>new/new[]</code>, there would be resource leaks. It could be memory leak if the constructor had allocated dynamic memory. Other things like semaphore lock not released, file handles not released etc can happen if the constructor had allocated them.</p>\n<p>It will not be undefined behavior. </p>\n", "LastActivityDate": "2012-03-29T08:12:18.697", "CommentCount": "3", "CreationDate": "2012-03-29T08:12:18.697", "ParentId": "9920973", "Score": "0", "OwnerUserId": "790713"}, "9921171": {"Id": "9921171", "PostTypeId": "2", "Body": "<p>Referring to <strong>[basic.stc.dynamic.deallocation]</strong> (aka <strong>3.7.4.2</strong> in n3337) there are only 4 paragraphs.</p>\n<ol>\n<li><code>operator delete</code> and <code>operator delete[]</code> should be either class members or in global scope</li>\n<li>Precisions on the valide signatures of <code>operator delete</code> and <code>operator delete[]</code></li>\n<li>Precisions on which <code>delete</code> can be used for deallocation, depending on which <code>new</code> was used for allocation</li>\n<li>Precisions on the possible arguments value and effects of the call (ie the pointers to this storage are now invalid)</li>\n</ol>\n<p>There is absolutely no note here on what would happen if storage is allocated but never released.</p>\n<p>I don't think that the Standard concerns itself with this, so it is more <em>unspecified</em> rather than <em>undefined</em>.</p>\n", "LastActivityDate": "2012-03-29T07:48:22.487", "CommentCount": "1", "CreationDate": "2012-03-29T07:48:22.487", "ParentId": "9920973", "Score": "1", "OwnerUserId": "147192"}});