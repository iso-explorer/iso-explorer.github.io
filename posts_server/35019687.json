post_cb({"35019687": {"CommentCount": "4", "ViewCount": "392", "PostTypeId": "1", "LastEditorUserId": "3537677", "CreationDate": "2016-01-26T17:11:42.630", "LastActivityDate": "2016-02-03T15:52:04.013", "Title": "std::istream operator exception reset / not thrown", "LastEditDate": "2016-02-03T15:52:04.013", "Id": "35019687", "Score": "3", "Body": "<p>I'm not sure about how to use <code>std::istream::exception</code> <strong>according to the standard</strong>, to let <code>std::istream::operator&gt;&gt;</code> throw an exception if it can't read the input into a variable, e.g. double. \nThe following code has different behavior with clang/libc++ and gcc/libstdc++: </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n\nint main () {\n    double foo,bar;\n    std::istream&amp; is = std::cin;\n\n    is.exceptions(std::istream::failbit);\n    is &gt;&gt; foo; //throws exception as expected with gcc/libstdc++ with input \"ASD\"\n    std::cout &lt;&lt; foo;\n    is &gt;&gt; bar;\n    std::cout &lt;&lt; bar;\n    assert(is); //failed with clang/libc++ after input \"ASD\"\n\n    std::cout &lt;&lt; foo &lt;&lt; \" \" &lt;&lt; bar &lt;&lt; std::endl;\n\n}\n</code></pre>\n<p>Is <code>is.exceptions(std::istream::failbit);</code> right for the purpose to let <code>operator&gt;&gt;</code> throw, according to the C++ standard?</p>\n", "Tags": "<c++><libstdc++><c++-standard-library><libc++>", "OwnerUserId": "3537677", "AnswerCount": "2"}, "35020842": {"ParentId": "35019687", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It seems that libc++ follows this requirement:</p>\n<blockquote>\n<p id=\"so_35019687_35020842_0\">Each formatted input function begins execution by constructing an object of class <code>sentry</code> with the <code>noskipws</code>\n  (second) argument <code>false</code>. If the sentry object returns <code>true</code>, when converted to a value of type <code>bool</code>, the\n  function endeavors to obtain the requested input. <strong>If an exception is thrown during input then <code>ios::badbit</code>\n  is turned on<sup>312</sup> in <code>*this</code>\u2019s error state. If <code>(exceptions()&amp;badbit) != 0</code> then the exception is rethrown.</strong>\n  In any case, the formatted input function destroys the sentry object. If no exception has been thrown, it\n  returns <code>*this</code>.</p>\n<p id=\"so_35019687_35020842_1\"><sub>312) This is done without causing an <code>ios::failure</code> to be thrown.</sub></p>\n</blockquote>\n<p>(quoted from N4567 \u00a7 27.7.2.2.1 [istream.formatted.reqmts] but the C++ IS contains identical wording. Emphasis mine)</p>\n<p>I don't know whether this really implies \"if <code>(exceptions()&amp;badbit) == 0</code> then the input function shall not throw any exception\", though.</p>\n", "OwnerUserId": "4672588", "LastEditorUserId": "4672588", "LastEditDate": "2016-01-26T18:17:15.537", "Id": "35020842", "Score": "1", "CreationDate": "2016-01-26T18:10:09.297", "LastActivityDate": "2016-01-26T18:17:15.537"}, "bq_ids": {"n4140": {"so_35019687_35020842_1": {"section_id": 2188, "quality": 0.6666666666666666, "length": 4}, "so_35019687_35020842_0": {"section_id": 2188, "quality": 0.9629629629629629, "length": 52}, "so_35019687_35020134_0": {"section_id": 2029, "quality": 1.0, "length": 9}, "so_35019687_35020134_2": {"section_id": 2188, "quality": 0.9285714285714286, "length": 13}, "so_35019687_35020134_4": {"section_id": 2172, "quality": 1.0, "length": 35}, "so_35019687_35020134_1": {"section_id": 2206, "quality": 0.9375, "length": 15}}, "n3337": {"so_35019687_35020842_1": {"section_id": 2176, "quality": 0.6666666666666666, "length": 4}, "so_35019687_35020842_0": {"section_id": 2176, "quality": 0.9629629629629629, "length": 52}, "so_35019687_35020134_0": {"section_id": 2017, "quality": 1.0, "length": 9}, "so_35019687_35020134_2": {"section_id": 2176, "quality": 0.9285714285714286, "length": 13}, "so_35019687_35020134_4": {"section_id": 2160, "quality": 1.0, "length": 35}, "so_35019687_35020134_1": {"section_id": 2194, "quality": 0.9375, "length": 15}}, "n4659": {"so_35019687_35020842_1": {"section_id": 2461, "quality": 0.6666666666666666, "length": 4}, "so_35019687_35020842_0": {"section_id": 2461, "quality": 0.9629629629629629, "length": 52}, "so_35019687_35020134_0": {"section_id": 2302, "quality": 1.0, "length": 9}, "so_35019687_35020134_2": {"section_id": 2461, "quality": 0.9285714285714286, "length": 13}, "so_35019687_35020134_4": {"section_id": 2445, "quality": 1.0, "length": 35}, "so_35019687_35020134_1": {"section_id": 2479, "quality": 0.9375, "length": 15}}}, "35020134": {"ParentId": "35019687", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>First some background information (each of these is explained below under it's respective title if you would like further elaboration):</p>\n<ul>\n<li>The standard requires <code>istream</code>s to rethrow <em>only</em> when <code>ios_base::badbit</code> is set in <code>basic_istream::exceptions</code></li>\n<li>libstdc++ does not comply with this requirement but libc++ does</li>\n<li>libc++ invalidates bugs requesting it's mirroring of libstdc++ behavior</li>\n<li>libc++ proffers <code>ios_base::badbit</code> bit-wise ored with the desired <code>ios_base::iostate</code> as a workaround</li>\n</ul>\n<p>Unfortunately this workaround has the side effect of also rethrowing whenever <code>ios_base::badbit</code> is set independent of <code>ios_base::failbit</code>: <a href=\"http://en.cppreference.com/w/cpp/io/ios_base/iostate#The_badbit\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/io/ios_base/iostate#The_badbit</a></p>\n<p>If you're looking for a throw to happen <em>only</em> when <code>ios_base::failbit</code> is set and you need this to have the same behavior on libc++ and libstdc++ you'll have to check the <code>ios_base::badbit</code> after each input operation occurring on the <code>istream</code>. That'd need to look something like this:</p>\n<pre><code>if(is.rdstate() &amp; ios_base::failbit != 0) throw ios_base::failure(\"basic_ios::clear\");\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/35019687/stdistream-operator-exception-reset-not-thrown/35020134?noredirect=1#comment57786512_35020134\">As noted by cpplearner</a> you can't even use <a href=\"http://en.cppreference.com/w/cpp/io/basic_ios/fail\" rel=\"nofollow noreferrer\"><code>basic_istream::fail</code></a>, you have to do a bit-wise test of the <code>istream</code>'s <a href=\"http://en.cppreference.com/w/cpp/io/basic_ios/rdstate\" rel=\"nofollow noreferrer\"><code>rdstate</code></a> return. But honestly that only adds a bit of complexity.</p>\n<p>What could make this a monumental task is the extent to which the <code>istream</code> is used. Wide usage of the <code>istream</code> could be combated by helper functions, but use of <code>istream_iterator</code>s or compound overloads of the extraction operator quickly make the manual inspection of this an unreasonable task.</p>\n<p>If you find yourself there I would seriously consider the possibility of the <code>is.exceptions(ios_base::failbit | ios_base::badbit)</code> workaround.</p>\n<hr>\n<h1>The standard requires <code>istream</code>s to rethrow <em>only</em> when <code>ios_base::badbit</code> is set in <code>basic_istream::exceptions</code></h1>\n<p>Calling <code>basic_istream::exceptions(istream::failbit)</code> will set a mask which can be retrieved by calling <code>basic_istream::exceptions()</code> which according to 27.5.5.4 [iosstate.flags]/11 of the standard is:</p>\n<blockquote>\n<p id=\"so_35019687_35020134_0\">A mask that determines what elements set in <code>rdstate()</code> cause exceptions to be thrown.</p>\n</blockquote>\n<p>This is supported in 27.7.2.2.3 [istream::extractors]/15 for unformated insertion methods:</p>\n<blockquote>\n<p id=\"so_35019687_35020134_1\">If it inserted no characters because it caught an exception thrown while extracting characters from <code>*this</code> and <code>failbit</code> is on in <code>exceptions()</code> (27.5.5.4), then the caught exception is rethrown.  </p>\n</blockquote>\n<p>However for formatted input this is retrograded in 27.7.2.2.1 [istream.formatted.reqmts]/1; requiring a throw to occur only when a bit-wise and of the mask and <code>ios_base::badbit</code> is non-zero:</p>\n<blockquote>\n<p id=\"so_35019687_35020134_2\">If an exception is thrown during input then <code>ios::badbit</code> is turned on in <code>*this</code>\u2019s error state. If <code>(exceptions()&amp;badbit) != 0</code> then the exception is rethrown.</p>\n</blockquote>\n<hr>\n<h1>libstdc++ does not comply with this requirement but libc++ does</h1>\n<p>The <code>ios_base::failbit</code> should be set on it's respective <code>istream</code> on events such as:</p>\n<blockquote>\n<p id=\"so_35019687_35020134_3\">The numeric, pointer, and boolean input overloads of <code>basic_istream::operator&gt;&gt;</code> (technically, the overloads of <code>num_get::get</code> they call), if the input cannot be parsed as a valid value or if the value parsed does not fit in the destination type.</p>\n</blockquote>\n<p>[<a href=\"http://en.cppreference.com/w/cpp/io/ios_base/iostate#The_failbit\" rel=\"nofollow noreferrer\">Source</a>]</p>\n<p>If only the <code>ios_base::failbit</code> is set on a <code>basic_istream::exceptions</code>' mask and an event occurs, causing the <code>ios_base::failbit</code> to be set, such as extracting an invalid number as described above:</p>\n<ul>\n<li>Under libstdc++ <a href=\"http://coliru.stacked-crooked.com/a/c7b2a1560cc426b1\" rel=\"nofollow noreferrer\">an exception is still rethrown</a>, which does not conform to the standard</li>\n<li>Under libc++ <a href=\"http://coliru.stacked-crooked.com/a/23341dc0ffa0b22a\" rel=\"nofollow noreferrer\">no such exception is thrown</a>, meaning the standard is upheld</li>\n</ul>\n<hr>\n<h1>libc++ invalidates bugs requesting it's mirroring of libstdc++ behavior</h1>\n<p>There is a <a href=\"https://llvm.org/bugs/show_bug.cgi?id=15949\" rel=\"nofollow noreferrer\">now invalidated bug against libc++</a> for this very issue. Citing 27.7.2.1 [istream]/4</p>\n<blockquote>\n<p id=\"so_35019687_35020134_4\">If one of these called functions throws an exception, then unless explicitly noted otherwise, the input function sets <code>badbit</code> in error state. If <code>badbit</code> is on in <code>exceptions()</code>, the input function rethrows the exception without completing its actions, otherwise it does not throw anything and proceeds as if the called function had returned a failure indication.</p>\n</blockquote>\n<hr>\n<h1>libc++ proffers <code>ios_base::badbit</code> bit-wise ored with the desired <code>ios_base::iostate</code> as a workaround</h1>\n<p>Our own <a href=\"https://stackoverflow.com/users/576911/howard-hinnant\">Howard Hinnant</a> (who also happens to be libc++'s representative who invalidated the linked libc++ bug) <a href=\"https://stackoverflow.com/a/16473878/2642059\">suggests in answer to a duplicate of this question</a> (as well as in the libc++ bug) that you use the workaround:</p>\n<pre><code>is.exceptions(ios_base::failbit | ios_base::badbit);\n</code></pre>\n</hr></hr></hr></hr>", "OwnerUserId": "2642059", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:43.160", "Id": "35020134", "Score": "8", "CreationDate": "2016-01-26T17:33:41.610", "LastActivityDate": "2016-01-29T15:23:11.887"}});