post_cb({"32652348": {"ParentId": "32652080", "CommentCount": "4", "Body": "<p>From [lex.ext]:</p>\n<blockquote>\n<p id=\"so_32652080_32652348_0\">If L is a <em>user-defined-string-literal</em>, let <em>str</em> be the <strong>literal</strong> without its <em>ud-suffix</em> and let <em>len</em> be the number of\n  code units in <em>str</em> (i.e., its length excluding the terminating null character). The literal <code>L</code> is treated as a call\n  of the form:</p>\n<pre><code>operator \"\" X (str , len )\n</code></pre>\n</blockquote>\n<p>From [lex.string]:</p>\n<blockquote>\n<p id=\"so_32652080_32652348_1\">Evaluating a <em>string-literal</em> results in a string literal object with <strong>static storage duration</strong>, initialized from the given characters as specified above.</p>\n</blockquote>\n<p>So:</p>\n<pre><code>\"hello\"_string;\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>operator \"\" _string(\"hello\", 5)\n</code></pre>\n<p>As <code>\"hello\"</code> is a <em>string-literal</em>, it has static storage duration, so you will have no dangling pointer. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32652348", "Score": "4", "CreationDate": "2015-09-18T12:43:42.097", "LastActivityDate": "2015-09-18T12:43:42.097"}, "32652080": {"CommentCount": "4", "ViewCount": "129", "PostTypeId": "1", "LastEditorUserId": "420683", "CreationDate": "2015-09-18T12:29:29.463", "LastActivityDate": "2015-09-18T12:43:42.097", "Title": "storage duration of underlying character data with user-defined string literal", "AcceptedAnswerId": "32652348", "LastEditDate": "2015-09-18T12:35:36.380", "Id": "32652080", "Score": "7", "Body": "<p>Quick setup: I want to pass strings around in my program as a pointer and a size.  I have a String class and a user-defined literal for constructing literal Strings:</p>\n<pre><code>struct String { const char *ptr; size_t sz; };\n\ninline constexpr String operator \"\" _string(const char *s, size_t sz) {\n  return {s, sz};\n}\n\nint main() {\n  auto s = \"hello\"_string;\n  s.ptr[0]; //&lt;-- is this access guaranteed to work?\n}\n</code></pre>\n<p>Does the standard specify that the argument passed to my user-defined literal operator has static duration?  i.e. is the above code actually equivalent to writing:</p>\n<pre><code>int main() {\n  String s{\"hello\", 5};\n}\n</code></pre>\n<p>or is the compiler/linker allowed to leave me with a dangling pointer when I use the user-defined literal?</p>\n<p>(Section 2.13.8 of N4527 did not seem to say anything on the subject of storage class of the argument to the user-defined string literal operators.  Any pointers into the appropriate section(s) of the standard would be appreciated.)</p>\n", "Tags": "<c++><c++11><c++14><user-defined-literals><storage-duration>", "OwnerUserId": "4889185", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32652080_32652348_0": {"section_id": 5371, "quality": 0.8260869565217391, "length": 19}, "so_32652080_32652348_1": {"section_id": 5358, "quality": 0.5714285714285714, "length": 8}}, "n3337": {"so_32652080_32652348_0": {"section_id": 5167, "quality": 0.8260869565217391, "length": 19}, "so_32652080_32652348_1": {"section_id": 5154, "quality": 0.5714285714285714, "length": 8}}, "n4659": {"so_32652080_32652348_0": {"section_id": 6796, "quality": 0.8260869565217391, "length": 19}, "so_32652080_32652348_1": {"section_id": 6789, "quality": 1.0, "length": 14}}}});