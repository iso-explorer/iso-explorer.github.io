post_cb({"621616": {"CommentCount": "2", "AcceptedAnswerId": "621648", "PostTypeId": "1", "LastEditorUserId": "1630", "LastEditorDisplayName": "Ash", "CreationDate": "2009-03-07T10:06:50.380", "LastActivityDate": "2017-07-21T19:21:11.563", "AnswerCount": "16", "LastEditDate": "2009-03-07T10:36:18.873", "ViewCount": "54226", "FavoriteCount": "38", "Title": "C++: What is the size of an object of an empty class?", "Id": "621616", "Score": "87", "Body": "<p>I was wondering what could be the <strong>size of an object of an empty class</strong>. It surely could <em>not</em> be 0 bytes since it should be possible to reference and point to it like any other object. But, how big is such an object?</p>\n<p>I used this small program:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Empty {};\n\nint main()\n{\n    Empty e;\n    cerr &lt;&lt; sizeof(e) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>The output I got on both Visual C++ and Cygwin-g++ compilers was <strong>1 byte</strong>! This was a little surprising to me since I was expecting it to be of the size of the machine word (32 bits or 4 bytes).</p>\n<p>Can anyone explain <strong>why</strong> the size of 1 byte? <strong>Why not</strong> 4 bytes? Is this dependent on compiler or the machine too? Also, can someone give a more cogent reason for why an empty class object <strong>will not</strong> be of size 0 bytes?</p>\n", "Tags": "<c++><class><object>", "OwnerUserId": "1630", "OwnerDisplayName": "Ash"}, "26700443": {"ParentId": "621616", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think that if the size of an empty class is zero it means that it does not exist. For it (class) to exist, it requires to have at least 1 byte, since this byte is the memory/reference address.</p>\n", "OwnerUserId": "4207574", "LastEditorUserId": "214143", "LastEditDate": "2014-11-02T15:00:16.530", "Id": "26700443", "Score": "-2", "CreationDate": "2014-11-02T14:31:45.353", "LastActivityDate": "2014-11-02T15:00:16.530"}, "621638": {"CommentCount": "4", "CreationDate": "2009-03-07T10:27:56.850", "LastEditorUserId": "464581", "LastActivityDate": "2012-07-21T11:27:28.773", "ParentId": "621616", "PostTypeId": "2", "LastEditorDisplayName": "Pete Kirkham", "LastEditDate": "2012-07-21T11:27:28.773", "Id": "621638", "Score": "28", "Body": "<p>The standard states that all most derived  objects have sizeof() &gt;= 1:</p>\n<blockquote>\n<p id=\"so_621616_621638_0\">Unless it is a bit-field (class.bit), a most derived object shall have a non-zero size and shall occupy one or more bytes of storage. Base class sub-objects may have zero size. \n  <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/intro.html#intro.object\" rel=\"noreferrer\">ISO/IEC FDIS 14882:1998(E) intro.object</a> </p>\n</blockquote>\n", "OwnerUserId": "66490", "OwnerDisplayName": "TrayMan"}, "621648": {"CommentCount": "15", "CreationDate": "2009-03-07T10:36:31.073", "LastEditorUserId": "39946", "LastActivityDate": "2017-06-06T17:48:27.427", "ParentId": "621616", "LastEditDate": "2017-06-06T17:48:27.427", "OwnerDisplayName": "Sol", "PostTypeId": "2", "Id": "621648", "Score": "107", "Body": "<p>Quoting <a href=\"http://www.stroustrup.com/bs_faq2.html#sizeof-empty\" rel=\"noreferrer\">Bjarne Stroustrup's C++ Style and Technique FAQ</a>, the reason the size is non-zero is \"To ensure that the addresses of two different objects will be different.\"  And the size can be 1 because alignment doesn't matter here, as there is nothing to actually look at.</p>\n", "OwnerUserId": "27029"}, "45245267": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>It is nonzero to ensure that the two different objects will have different addresses.\nDifferent objects should have different addresses, so the size of an empty class is always 1 byte.</p>\n", "OwnerUserId": "8346126", "PostTypeId": "2", "Id": "45245267", "Score": "0", "CreationDate": "2017-07-21T19:21:11.563", "LastActivityDate": "2017-07-21T19:21:11.563"}, "44151353": {"ParentId": "621616", "CommentCount": "0", "Body": "<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\n\n    class Empty { };\n    int main()\n    {\n        Empty* e1 = new Empty;\n        Empty* e2 = new Empty;\n\n        if (e1 == e2)\n            cout &lt;&lt; \"Alas same address of two objects\" &lt;&lt; endl;\n        else\n            cout &lt;&lt; \"Okay it's Fine to have different addresses\" &lt;&lt; endl;\n\n        return 0;\n    }\n</code></pre>\n<p>Output: Okay it's Fine to have different addresses</p>\n<p>Returning size 1 ensures that the two objects will not have the same address. </p>\n", "OwnerUserId": "7277468", "PostTypeId": "2", "Id": "44151353", "Score": "0", "CreationDate": "2017-05-24T07:10:25.240", "LastActivityDate": "2017-05-24T07:10:25.240"}, "bq_ids": {"n4140": {"so_621616_621617_0": {"section_id": 6077, "quality": 0.875, "length": 7}, "so_621616_621638_0": {"section_id": 5794, "quality": 0.76, "length": 19}}, "n3337": {"so_621616_621617_0": {"section_id": 5845, "quality": 0.875, "length": 7}, "so_621616_621638_0": {"section_id": 5567, "quality": 0.76, "length": 19}}, "n4659": {"so_621616_621617_0": {"section_id": 7573, "quality": 0.875, "length": 7}, "so_621616_621638_0": {"section_id": 7253, "quality": 0.76, "length": 19}}}, "35495509": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>I think this question is only of theoretical interest but doesn't matter in practice.</p>\n<p>As already pointed out by others, deriving from an empty class doesn't do any harm, as this will not consume any extra memory for the base class portion.</p>\n<p>Moreover, if a class is empty (meaning that it - theoretically - doesn't need any per-instance memory, i.e. it doesn't have any non-static data members or virtual member functions) then all its member functions can just as well (and should) be defined as static. So there is no need to ever create an instance of this class.</p>\n<p>Bottom line: If you find yourself writing an empty class X then just make all member functions static. You then won't need to create X objects, and derived classes will not be affected in any way.</p>\n", "OwnerUserId": "5938604", "PostTypeId": "2", "Id": "35495509", "Score": "0", "CreationDate": "2016-02-19T01:04:32.430", "LastActivityDate": "2016-02-19T01:04:32.430"}, "2768579": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>Allocation of 1 byte for an empty class is compiler dependent. Compilers need to make sure objects reside in different memory locations and they need to allocate non zero memory size to an object. \nListen to notes on this topic here: <a href=\"http://listenvoice.com/listenVoiceNote.aspx?id=27\" rel=\"nofollow noreferrer\">http://listenvoice.com/listenVoiceNote.aspx?id=27</a></p>\n<p>Even though compilers allocates non zero size to an empty class they also do optimizations when new classes are derived from empty classes. \nListen about empty base optimization on ListenVoice's c++ programming interview questions.</p>\n", "OwnerUserId": "332764", "PostTypeId": "2", "Id": "2768579", "Score": "2", "CreationDate": "2010-05-04T20:02:26.067", "LastActivityDate": "2010-05-04T20:02:26.067"}, "4095415": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>the reason for class with no data members but having size 1 byte is that the this*<em>strong text</em>* must be stored in memory so that a reference or pointer can point to the object of that class</p>\n", "OwnerUserId": "497012", "PostTypeId": "2", "Id": "4095415", "Score": "1", "CreationDate": "2010-11-04T09:46:10.750", "LastActivityDate": "2010-11-04T09:46:10.750"}, "25711864": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>I think it is so because as 1 byte is the smallest memory unit that can be used as a placeholder, and it cannot give zero size as it will not be possible to create an array of objects ..</p>\n<p>and the thing you said \"This was a little surprising to me since I was expecting it to be of the size of the machine word (32 bits or 4 bytes).\" will be true for reference variable(macine words) of type empty(),not size of class itself(which is abstract data type),</p>\n", "OwnerUserId": "3188050", "PostTypeId": "2", "Id": "25711864", "Score": "0", "CreationDate": "2014-09-07T15:28:56.480", "LastActivityDate": "2014-09-07T15:28:56.480"}, "16961800": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>empty class -that class does not contain any content.</p>\n<p>any class which is not empty will be represented by its content in memory.</p>\n<p>now how empty class will be represented in memory?\nas it has no content no way to show its existance in memory, but class is present ,it is mandatory to show its presence in memory.\nTo show empty class presence in memory 1 byte is required.</p>\n", "OwnerUserId": "2459581", "PostTypeId": "2", "Id": "16961800", "Score": "0", "CreationDate": "2013-06-06T12:13:11.463", "LastActivityDate": "2013-06-06T12:13:11.463"}, "8378138": {"ParentId": "621616", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This may help u :-)\n<a href=\"http://bytes.com/topic/c/insights/660463-sizeof-empty-class-structure-1-a\" rel=\"nofollow\">http://bytes.com/topic/c/insights/660463-sizeof-empty-class-structure-1-a</a></p>\n<blockquote>\n<p id=\"so_621616_8378138_0\"><strong>The sizeof an empty class or structure is 1</strong></p>\n<p id=\"so_621616_8378138_1\">The reason this happens boils down to properly implementing the\n  standard, one of the things the C++ standard says is that \"no object\n  shall have the same address in memory as any other variable\".... What\n  is the easiest way to ensure this? Make sure that all types have a\n  non-zero size. In order to achieve this the compiler adds a dummy byte\n  to structures and classes that have no data members and no virtual\n  functions so that they have a size of 1 rather than a size of 0 and\n  then they are guaranteed to have a unique memory address.</p>\n</blockquote>\n", "OwnerUserId": "1080471", "LastEditorUserId": "815724", "LastEditDate": "2011-12-04T20:18:33.407", "Id": "8378138", "Score": "3", "CreationDate": "2011-12-04T19:52:24.417", "LastActivityDate": "2011-12-04T20:18:33.407"}, "14053947": {"ParentId": "621616", "CommentCount": "9", "Body": "<p>There is an exception: 0-length arrays</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass CompletlyEmpty {\n  char NO_DATA[0];\n};\n\nint main(int argc, const char** argv) {\n  std::cout &lt;&lt; sizeof(CompletlyEmpty) &lt;&lt; '\\n';\n}\n</code></pre>\n", "OwnerUserId": "1363533", "PostTypeId": "2", "Id": "14053947", "Score": "5", "CreationDate": "2012-12-27T11:28:50.050", "LastActivityDate": "2012-12-27T11:28:50.050"}, "13739418": {"ParentId": "621616", "CommentCount": "0", "Body": "<p>Even though its not required to assign any memory for an empty class, but in order to make objects of empty classes, compiler assigns the minimum memory that can be assigned, which is 1 byte. This way compiler can distinguish two objects of the same empty class uniquely, and will able to assign the address of the object to a pointer of the empty class type.</p>\n", "OwnerUserId": "1881662", "PostTypeId": "2", "Id": "13739418", "Score": "5", "CreationDate": "2012-12-06T08:11:09.750", "LastActivityDate": "2012-12-06T08:11:09.750"}, "623129": {"CommentCount": "1", "CreationDate": "2009-03-08T05:44:40.080", "LastEditorUserId": "-1", "LastActivityDate": "2009-03-08T05:44:40.080", "ParentId": "621616", "LastEditDate": "2017-05-23T12:10:42.083", "OwnerDisplayName": "litb", "PostTypeId": "2", "Id": "623129", "Score": "4", "Body": "<p>I think it might be helpful to link to an answer explaining this good too. <a href=\"https://stackoverflow.com/questions/97948/what-is-stdpair/573457#573457\">It is</a> about <a href=\"http://www.boost.org/doc/libs/1_38_0/libs/utility/compressed_pair.htm\" rel=\"nofollow noreferrer\"><code>boost::compressed_pair</code></a> by <a href=\"https://stackoverflow.com/users/61289/logan-capaldo\">Logan Capaldo</a>. </p>\n", "OwnerUserId": "34509"}, "621617": {"CommentCount": "7", "CreationDate": "2009-03-07T10:09:00.000", "LastEditorUserId": "14860", "LastActivityDate": "2016-06-21T11:16:52.063", "ParentId": "621616", "PostTypeId": "2", "LastEditorDisplayName": "Pax", "LastEditDate": "2016-06-21T11:16:52.063", "Id": "621617", "Score": "10", "Body": "<p>That's really an implementation detail. Once long ago, I thought it could be zero bytes or a thousand bytes, that it has no bearing on the language specification. But, after looking at the standard (section 5.3.3), <code>sizeof</code> is defined as always returning one or greater, no matter what.</p>\n<blockquote>\n<p id=\"so_621616_621617_0\">The size of a most derived class shall be greater than zero.</p>\n</blockquote>\n<p>This is required for, among other things, allowing you to handle arrays of objects and pointers to them. If your elements were allowed to be zero-sized then <code>&amp;(array[0])</code> would be identical to <code>&amp;(array[42])</code>, which is going to cause all sorts of havoc to your processing loops.</p>\n<p>The reason why it may not be a machine word is that there are no elements within it that actually require it to be aligned on a word boundary (such as an integer). For example, if you place <code>char x; int y;</code> inside the class, my GCC clocks it at eight bytes (since the second int must be aligned in that implementation).</p>\n", "OwnerUserId": "14860", "OwnerDisplayName": "Pax"}, "3043823": {"ParentId": "621616", "CommentCount": "2", "Body": "<p>It is because of <strong>this</strong> pointer , although pointer is (integer) of 4 byte but it refer \nto a one memory location ( one Unit ) which is 1 byte.</p>\n", "OwnerUserId": "367052", "PostTypeId": "2", "Id": "3043823", "Score": "-3", "CreationDate": "2010-06-15T09:00:03.983", "LastActivityDate": "2010-06-15T09:00:03.983"}});