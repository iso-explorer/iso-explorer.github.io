post_cb({"bq_ids": {"n4140": {"so_47919369_47919524_0": {"length": 17, "quality": 1.0, "section_id": 5433}}, "n3337": {"so_47919369_47919524_0": {"length": 17, "quality": 1.0, "section_id": 5228}}, "n4659": {"so_47919369_47919524_0": {"length": 17, "quality": 1.0, "section_id": 6861}}}, "47919369": {"ViewCount": "132", "Body": "<p>Is it undefined behavior to <code>const_cast</code> away an empty base class and call a non const method on it?  For example</p>\n<pre><code>class EmptyBase {\npublic:\n    void bar() { ... }\n};\n\nclass Something : public EmptyBase {\npublic:\n    void foo() const {\n        const_cast&lt;EmptyBase&amp;&gt;(static_cast&lt;const EmptyBase&amp;&gt;(*this)).bar();\n   }\n};\n</code></pre>\n<p>I haven't been able to find relevant information in the standards (C++14 and C++17) that answers this..</p>\n", "AcceptedAnswerId": "47919524", "Title": "Const casting empty base class", "CreationDate": "2017-12-21T06:43:44.870", "LastActivityDate": "2017-12-21T15:17:52.950", "CommentCount": "7", "LastEditDate": "2017-12-21T07:00:33.143", "PostTypeId": "1", "LastEditorUserId": "5501675", "Id": "47919369", "Score": "5", "OwnerUserId": "5501675", "Tags": "<c++><c++14><language-lawyer><c++17><const-cast>", "AnswerCount": "1"}, "47919524": {"Id": "47919524", "PostTypeId": "2", "Body": "<p>It's not UB in and of itself. You get undefined behavior when you cast away constness and use the obtained glvalue to modify an object which is originally declared const. Here's the standard quote on this (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/dcl.type.cv#4\" rel=\"nofollow noreferrer\">[dcl.type.cv]/4</a>):</p>\n<blockquote>\n<p id=\"so_47919369_47919524_0\">Except that any class member declared mutable can be modified, any\n  attempt to modify a const object during its lifetime results in\n  undefined behavior.</p>\n</blockquote>\n<p>Merely calling a member function is not a modification of an object. It all depends on what the function <em>does</em>. So if it does something crazy like:</p>\n<pre><code>std::memset(this, 0, sizeof(*this));\n</code></pre>\n<p>That would result in undefined behavior, for sure. But assuming it doesn't, and since there are <em>no members</em> for it to modify in an ill-formed manner, there is no UB from the call.</p>\n<p>The other question, of whether or not it's a good idea, has an obvious answer. Const casts should not litter code bases. But if the base class is well-behaved, albeit not well-defined, it may be acceptable if you can't change the class.</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2017-12-21T15:17:52.950", "Score": "7", "CreationDate": "2017-12-21T06:56:36.503", "ParentId": "47919369", "CommentCount": "3", "OwnerUserId": "817643", "LastEditDate": "2017-12-21T15:17:52.950"}});