post_cb({"7129504": {"ParentId": "7129488", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-08-20T03:45:13.280", "Score": "3", "LastEditorUserId": "636019", "LastEditDate": "2011-08-20T04:06:35.010", "Id": "7129504", "OwnerUserId": "636019", "Body": "<p>From the C++03 standard, \u00a723.3.5.2/39-41:</p>\n<blockquote>\n<pre><code>bool test(size_t pos) const;\n</code></pre>\n<p id=\"so_7129488_7129504_0\"><strong>Requires:</strong> <code>pos</code> is valid<br>\n<strong>Throws:</strong> <code>out_of_range</code> if <code>pos</code> does not correspond to a valid bit position.<br>\n<strong>Returns:</strong> <code>true</code> if the bit at position <code>pos</code> in <code>*this</code> has the value one.</br></br></p>\n</blockquote>\n<p>\u00a723.3.5.2/46-48:</p>\n<blockquote>\n<pre><code>bool operator[](size_t pos) const;\n</code></pre>\n<p id=\"so_7129488_7129504_1\"><strong>Requires:</strong> <code>pos</code> is valid.<br>\n<strong>Throws:</strong> nothing.<br>\n<strong>Returns:</strong> <code>test(pos)</code>.</br></br></p>\n</blockquote>\n<p>\u00a723.3.5.2/49-51:</p>\n<blockquote>\n<pre><code>bitset&lt;N&gt;::reference operator[](size_t pos);\n</code></pre>\n<p id=\"so_7129488_7129504_2\"><strong>Requires:</strong> <code>pos</code> is valid.<br>\n<strong>Throws:</strong> nothing.<br>\n<strong>Returns:</strong> An object of type <code>bitset&lt;N&gt;::reference</code> such that <code>(*this)[pos] == this-\n  test(pos)</code>, and such that <code>(*this)[pos] = val</code> is equivalent to <code>this-&gt;set(pos, val)</code>.</br></br></p>\n</blockquote>\n<p>So when the object is <code>const</code>, they return the same value, excepting that when <code>pos</code> is invalid <code>test</code> throws <code>out_of_range</code> while <code>operator[]</code> throws nothing. When the object is <em>not</em> <code>const</code>, the operator returns a proxy object allowing one to mutate the object's data.</p>\n", "LastActivityDate": "2011-08-20T04:06:35.010"}, "7129488": {"CommentCount": "0", "ViewCount": "468", "CreationDate": "2011-08-20T03:40:24.327", "LastActivityDate": "2011-08-20T11:29:08.863", "Title": "bitset::operator[] == false/true or bitset::test?", "AcceptedAnswerId": "7129504", "PostTypeId": "1", "Id": "7129488", "Score": "1", "Body": "<p>Is using bitset::operator[] equivalent to using bitset::test or is there some underlying optimization?</p>\n<p>That is, are these two loops equivalent?</p>\n<p>Using bitset::operator[]:</p>\n<pre><code>static const int UP = 0;\nstatic const int DOWN = 1;\n\nfor(int i = 1; i &lt; KEY_MAX; ++i) {\n    if(_handler &amp;&amp; (_prevKey[i] == UP &amp;&amp; _curKey[i] == DOWN)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyDownEvent(i));\n    }\n    if(_handler &amp;&amp; (_prevKey[i] == DOWN &amp;&amp; _curKey[i] == DOWN)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyPressEvent(i));\n    }\n    if(_handler &amp;&amp; (_prevKey[i] == DOWN &amp;&amp; _curKey[i] == UP)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyUpEvent(i));\n    }\n}\n</code></pre>\n<p>Using bitset::test():</p>\n<pre><code>static const bool UP = false;\nstatic const bool  DOWN = true;\n\nfor(int i = 1; i &lt; KEY_MAX; ++i) {\n    if(_handler &amp;&amp; (_prevKey.test(i) == UP &amp;&amp; _curKey.test(i) == DOWN)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyDownEvent(i));\n    }\n    if(_handler &amp;&amp; (_prevKey.test(i) == DOWN &amp;&amp; _curKey.test(i) == DOWN)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyPressEvent(i));\n    }\n    if(_handler &amp;&amp; (_prevKey.test(i) == DOWN &amp;&amp; _curKey.test(i) == UP)) {\n        _handler-&gt;EnqueueEvent(new KeyboardKeyUpEvent(i));\n    }\n}\n</code></pre>\n", "Tags": "<c++><bitset>", "OwnerUserId": "421178", "AnswerCount": "3"}, "7129514": {"ParentId": "7129488", "CommentCount": "0", "Body": "<p>Unlike access operator ([]), The test function performs a range check on position before retrieveing the bit value. out_of_range is thrown if the position is not a valid bit position.</p>\n<p>You can find references on:</p>\n<p><a href=\"http://www.cplusplus.com/reference/stl/bitset\" rel=\"nofollow\">http://www.cplusplus.com/reference/stl/bitset</a></p>\n", "Id": "7129514", "PostTypeId": "2", "OwnerDisplayName": "user898756", "Score": "0", "CreationDate": "2011-08-20T03:47:27.347", "LastActivityDate": "2011-08-20T03:47:27.347"}, "bq_ids": {"n4140": {"so_7129488_7129504_2": {"section_id": 4173, "quality": 0.6111111111111112, "length": 11}}, "n3337": {"so_7129488_7129504_2": {"section_id": 4016, "quality": 0.6111111111111112, "length": 11}}, "n4659": {"so_7129488_7129504_2": {"section_id": 5433, "quality": 0.6111111111111112, "length": 11}}}, "7131471": {"ParentId": "7129488", "CommentCount": "0", "CreationDate": "2011-08-20T11:29:08.863", "OwnerUserId": "264325", "PostTypeId": "2", "Id": "7131471", "Score": "0", "Body": "<p>I would optimize it this way:</p>\n<pre><code>int nPrevKey, nCurKey;\n\nfor(int i = 1; i &lt; KEY_MAX; ++i) \n{\n    if(_handler)\n    {\n        nPrevKey = _prevKey[i];\n        nCurKey = _curKey[i];\n\n        if(nPrevKey == UP &amp;&amp; nCurKey  == DOWN)\n        {\n            _handler-&gt;EnqueueEvent(new KeyboardKeyDownEvent(i));\n        }\n        if(nPrevKey  == DOWN &amp;&amp; nCurKey  == DOWN)\n        {\n            _handler-&gt;EnqueueEvent(new KeyboardKeyPressEvent(i));\n        }\n        if(nPrevKey  == DOWN &amp;&amp; nCurKey  == UP)\n        {\n            _handler-&gt;EnqueueEvent(new KeyboardKeyUpEvent(i));\n        }\n    }\n}\n</code></pre>\n<p>And similarly the other implementation.</p>\n", "LastActivityDate": "2011-08-20T11:29:08.863"}});