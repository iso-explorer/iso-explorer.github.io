post_cb({"bq_ids": {"n4140": {"so_44886942_45944822_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 401}, "so_44886942_45944822_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 3274}}, "n3337": {"so_44886942_45944822_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 3145}, "so_44886942_45944822_1": {"length": 34, "quality": 0.8947368421052632, "section_id": 392}}, "n4659": {"so_44886942_45944822_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 4032}, "so_44886942_45944822_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 418}}}, "45944822": {"Id": "45944822", "PostTypeId": "2", "Body": "<p>The main difference is that there are rules for defaulted functions that specify under which circumstances they are deleted (cf. ISO c++14(<code>N4296</code>) 8.4, 12.1, 12.4, 12.8)</p>\n<blockquote>\n<p id=\"so_44886942_45944822_0\">8.4.2.5: Explicitly-defaulted functions and implicitly-declared functions are collectively called defaulted functions, and the\n  implementation shall provide implicit definitions for them (12.1 12.4,\n  12.8), which might mean defining them as deleted.</p>\n</blockquote>\n<p>e.g.:</p>\n<blockquote>\n<p id=\"so_44886942_45944822_1\">12.4.5: A defaulted destructor for a class X is defined as deleted if: \n  (5.1) \u2014 X is a union-like class that has a variant member with a\n  non-trivial destructor, (5.2) \u2014 any potentially constructed subobject\n  has class type M (or array thereof) and M has a deleted destructor or\n  a destructor that is inaccessible from the defaulted destructor, (5.3)\n  \u2014 or, for a virtual destructor, lookup of the non-array deallocation\n  function results in an ambiguity or in a function that is deleted or\n  inaccessible from the defaulted destructor</p>\n</blockquote>\n<p>In case your use falls into one of the deleted categories, using <code>default</code> will be equivalent to using <code>delete</code> whereas <code>{}</code> won't be.</p>\n", "LastEditorUserId": "3991400", "LastActivityDate": "2017-08-29T20:54:35.373", "Score": "4", "CreationDate": "2017-08-29T17:16:44.270", "ParentId": "44886942", "CommentCount": "0", "OwnerUserId": "3991400", "LastEditDate": "2017-08-29T20:54:35.373"}, "44886942": {"ViewCount": "101", "Body": "<p>A virtual destructor which does nothing is</p>\n<pre><code>virtual ~ClassName() {}\n</code></pre>\n<p>Since C++11 <a href=\"https://stackoverflow.com/a/21499427/673852\">we can alternatively say</a>:</p>\n<pre><code>virtual ~ClassName() = default;\n</code></pre>\n<p>Is there any difference between these two?</p>\n", "AcceptedAnswerId": "45944822", "Title": "Is there any difference between virtual destructor=default and one with empty body?", "CreationDate": "2017-07-03T13:34:15.547", "Id": "44886942", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-08-29T20:54:35.373", "Score": "4", "OwnerUserId": "673852", "Tags": "<c++><c++11><destructor>", "AnswerCount": "1"}});