post_cb({"19630352": {"Id": "19630352", "PostTypeId": "2", "Body": "<p>A quick look at 3.2 [basic.def.odr] yields:</p>\n<blockquote>\n<p id=\"so_19630138_19630352_0\">3/ [...] A virtual member function is odr-used if it is not pure. [...]</p>\n</blockquote>\n<p>And I also found at 14.7.1 [temp.inst]:</p>\n<blockquote>\n<p id=\"so_19630138_19630352_1\">10/ An implementation shall not implicitly instantiate a function template, a member template, a non-virtual member function, a member class, or a static data member of a class template that does not require instantiation. <strong>It is unspecified whether or not an implementation implicitly instantiates a virtual member function of a class template if the virtual member function would not otherwise be instantiated.</strong> (emphasis mine)</p>\n</blockquote>\n<p>So... I would say it is likely that a <code>virtual</code> method will always be instantiated.</p>\n<p>In pragmatic terms, I would expect a compiler to instantiate the virtual table of a template class when it instantiates the class; and thus immediately instantiate all <code>virtual</code> member functions of this class (so it can references those from the virtual table).</p>\n", "LastActivityDate": "2013-10-28T08:46:15.890", "CommentCount": "0", "CreationDate": "2013-10-28T08:46:15.890", "ParentId": "19630138", "Score": "8", "OwnerUserId": "147192"}, "bq_ids": {"n4140": {"so_19630138_19630352_0": {"length": 5, "quality": 1.0, "section_id": 7040}, "so_19630138_19630352_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 243}}, "n3337": {"so_19630138_19630352_0": {"length": 5, "quality": 1.0, "section_id": 6785}, "so_19630138_19630352_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 235}}, "n4659": {"so_19630138_19630352_0": {"length": 5, "quality": 1.0, "section_id": 8537}, "so_19630138_19630352_1": {"length": 34, "quality": 0.8947368421052632, "section_id": 250}}}, "19630138": {"ViewCount": "427", "Body": "<p>I (vaguely) know that a template is not instantiated if it is <strong>not</strong> <em>used</em>. For example, the following code will compile fine even though <code>T::type</code> doesn't make sense when <code>T = int</code>.</p>\n<pre><code>template&lt;typename T&gt;\nstruct A\n{\n    void f() { using type = typename T::type; }\n};\n\nA&lt;int&gt; a; //ok\n</code></pre>\n<p>It compiles because <code>f()</code> is not <em>used</em>, so it is not instantiated \u2014 thus the validity of<code>T::type</code> remains unchecked. It doesn't matter if some other <em>member</em> function <code>g()</code> calls <code>f()</code>.</p>\n<pre><code>template&lt;typename T&gt;\nstruct A\n{\n    void f() { using type = typename T::type; }\n\n    void g() { f(); } //Is f() still unused?\n};\n\nA&lt;int&gt; a; //ok\n</code></pre>\n<p>This also <a href=\"http://coliru.stacked-crooked.com/a/a6eba04e3741d673\">compile fines</a>. But here I realize the vagueness in my understanding of the definition of <em>\"use\"</em>. I ask:</p>\n<ul>\n<li>Is <code>f()</code> still unused? How exactly? </li>\n</ul>\n<p>I can clearly see it being used inside <code>g()</code>. But then I thought since <code>g()</code> is not used, <code>f()</code> is not used either, from instantiation point of view.  That seems reasonable enough. so far.</p>\n<p>However if I add <code>virtual</code> keyword to <code>g()</code>, it doesn't compile:</p>\n<pre><code>template&lt;typename T&gt;\nstruct A\n{\n    void f() { using type = typename T::type; }\n\n    virtual void g() { f(); } //Now f() is used? How exactly?\n};\n\nA&lt;int&gt; a; //error\n</code></pre>\n<p>It results in <a href=\"http://coliru.stacked-crooked.com/a/e20d079078a024e6\">compilation error</a> because now it attempts to instantiate <code>f()</code>.  I don't understand this behavior. </p>\n<p>Could anybody explain this? Especially the impact of <code>virtual</code> keyword on the definition of \"use\" of member of class template.</p>\n", "AcceptedAnswerId": "19630352", "Title": "The impact of virtual on the use of member of class template", "CreationDate": "2013-10-28T08:32:32.457", "Id": "19630138", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-10-28T08:46:15.890", "Score": "10", "OwnerUserId": "415784", "Tags": "<c++><templates><c++11><virtual><instantiation>", "AnswerCount": "1"}});