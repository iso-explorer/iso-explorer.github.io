post_cb({"bq_ids": {"n4140": {"so_7084831_7085249_8": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_7084831_7085249_6": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_7084831_7085249_11": {"length": 9, "quality": 0.6, "section_id": 3286}, "so_7084831_7085249_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 3285}, "so_7084831_7085249_5": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_7084831_7085249_4": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_7084831_7085249_3": {"length": 7, "quality": 0.875, "section_id": 3285}, "so_7084831_7085249_13": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_7084831_7085249_12": {"length": 7, "quality": 0.5384615384615384, "section_id": 369}, "so_7084831_7085249_2": {"length": 11, "quality": 1.0, "section_id": 3285}, "so_7084831_7085249_0": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_7084831_7085249_10": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_7084831_7085249_7": {"length": 9, "quality": 0.75, "section_id": 3286}}, "n3337": {"so_7084831_7085249_8": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_7084831_7085249_6": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_7084831_7085249_11": {"length": 12, "quality": 0.8, "section_id": 3157}, "so_7084831_7085249_0": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_7084831_7085249_5": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_7084831_7085249_4": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_7084831_7085249_3": {"length": 7, "quality": 0.875, "section_id": 3155}, "so_7084831_7085249_13": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_7084831_7085249_12": {"length": 7, "quality": 0.5384615384615384, "section_id": 359}, "so_7084831_7085249_2": {"length": 11, "quality": 1.0, "section_id": 3155}, "so_7084831_7085249_1": {"length": 7, "quality": 1.0, "section_id": 3155}, "so_7084831_7085249_10": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_7084831_7085249_7": {"length": 10, "quality": 0.8333333333333334, "section_id": 3156}}, "n4659": {"so_7084831_7085249_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 4047}, "so_7084831_7085249_5": {"length": 4, "quality": 1.0, "section_id": 4047}, "so_7084831_7085249_4": {"length": 5, "quality": 1.0, "section_id": 4047}, "so_7084831_7085249_8": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_7084831_7085249_3": {"length": 7, "quality": 0.875, "section_id": 4047}, "so_7084831_7085249_7": {"length": 7, "quality": 0.5833333333333334, "section_id": 384}, "so_7084831_7085249_12": {"length": 7, "quality": 0.5384615384615384, "section_id": 7358}, "so_7084831_7085249_13": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_7084831_7085249_11": {"length": 8, "quality": 0.5333333333333333, "section_id": 384}, "so_7084831_7085249_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 4047}}}, "7084831": {"ViewCount": "1485", "Body": "<p>I had always thought that creating a new object would always call the default constructor on an object, and whether the constructor was explicit or automatically generated by the compiler made no difference. According to <a href=\"https://stackoverflow.com/questions/620137/do-the-parentheses-after-the-type-name-make-a-difference-with-new/620402#620402\">this highly regarded answer</a> to a different question, this changed in a subtle way between C++98 and C++03 and now works like so:</p>\n<pre><code>struct B { ~B(); int m; }; // non-POD, compiler generated default ctor \nnew B;   // default-initializes (leaves B::m uninitialized)\nnew B(); // value-initializes B which zero-initializes all fields since its default ctor is compiler generated as opposed to user-defined.\n</code></pre>\n<p>Can anyone tell me:</p>\n<ol>\n<li>Why was the standard changed, i.e. what advantage does this give or what is now possible that wasn't before;</li>\n<li>What exacly do the terms \"default-initialize\" and \"value-initialize\" represent?</li>\n<li>What's the relevant part of the standard?</li>\n</ol>\n", "AcceptedAnswerId": "7085249", "Title": "Difference between default-initialize and value-initialize in C++03?", "CreationDate": "2011-08-16T20:48:30.833", "Id": "7084831", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:07:40.503", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-16T21:26:53.017", "Score": "7", "OwnerUserId": "5987", "Tags": "<c++><standards><default-value><default-constructor>", "AnswerCount": "1"}, "7085249": {"Id": "7085249", "PostTypeId": "2", "Body": "<p>I do not know what the rationales around the change (or how the standard was before), but on how it is, basically <em>default-initialization</em> is either calling a user defined constructor or doing nothing (lots of hand-waving here: this is recursively applied to each subobject, which means that the subobjects with a default constructor will be initialized, the subobjects with no user defined constructors will be left uninitialized).</p>\n<p>This falls within the <em>only pay for what you want</em> philosophy of the language and is compatible with C in all the types that are C compatible. On the other hand, you can request <em>value-initialization</em>, and that is the equivalent to calling the default constructor for objects that have it <em>or</em> initializing to <code>0</code> converted to the appropriate type for the rest of the subobjects.</p>\n<p>This is described in \u00a78.5 Initializers, and it is not trivial to navigate through. The definitions for <em>zero-initialize</em>, <em>default-initialize</em> and <em>value-initialize</em> are the 5th paragraph:</p>\n<blockquote>\n<p id=\"so_7084831_7085249_0\">To zero-initialize an object of type T means:</p>\n<p id=\"so_7084831_7085249_1\">\u2014 if T is a scalar type (3.9), the object is set to the value of 0 (zero) converted to T;</p>\n<p id=\"so_7084831_7085249_2\">\u2014 if T is a non-union class type, each nonstatic data member and each base-class subobject is zeroinitialized;</p>\n<p id=\"so_7084831_7085249_3\">\u2014 if T is a union type, the object\u2019s first named data member89) is zero-initialized;</p>\n<p id=\"so_7084831_7085249_4\">\u2014 if T is an array type, each element is zero-initialized;</p>\n<p id=\"so_7084831_7085249_5\">\u2014 if T is a reference type, no initialization is performed.</p>\n<p id=\"so_7084831_7085249_6\">To default-initialize an object of type T means:</p>\n<p id=\"so_7084831_7085249_7\">\u2014 if T is a non-POD class type (clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_7084831_7085249_8\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_7084831_7085249_9\">\u2014 otherwise, the object is zero-initialized.</p>\n<p id=\"so_7084831_7085249_10\">To value-initialize an object of type T means:</p>\n<p id=\"so_7084831_7085249_11\">\u2014 if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_7084831_7085249_12\">\u2014 if T is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of T is value-initialized;</p>\n<p id=\"so_7084831_7085249_13\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_7084831_7085249_14\">\u2014 otherwise, the object is zero-initialized</p>\n<p id=\"so_7084831_7085249_15\">A program that calls for default-initialization or value-initialization of an entity of reference type is illformed. If T is a cv-qualified type, the cv-unqualified version of T is used for these definitions of zeroinitialization, default-initialization, and value-initialization.</p>\n</blockquote>\n", "LastActivityDate": "2011-08-16T21:26:53.017", "CommentCount": "3", "CreationDate": "2011-08-16T21:26:53.017", "ParentId": "7084831", "Score": "2", "OwnerUserId": "36565"}});