post_cb({"38827256": {"ParentId": "38826640", "CommentCount": "0", "Body": "<p>C++ 14 standard, <strong>[dcl.fct]</strong> pt. 7:</p>\n<blockquote>\n<p id=\"so_38826640_38827256_0\">The effect of a cv-qualifier-seq in a function declarator is not the same as adding cv-qualification on top\n  of the function type. In the latter case, the cv-qualifiers are ignored. [ Note: a function type that has a\n  cv-qualifier-seq is not a cv-qualified type; there are no cv-qualified function types. \u2014 end note ]</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>typedef void F();\n\nstruct S {\n    const F f; // OK: equivalent to: void f();\n};\n</code></pre>\n<p>So, this is a correct behavior.</p>\n", "OwnerUserId": "1989995", "PostTypeId": "2", "Id": "38827256", "Score": "19", "CreationDate": "2016-08-08T10:49:55.320", "LastActivityDate": "2016-08-08T10:49:55.320"}, "38826640": {"CommentCount": "8", "CreationDate": "2016-08-08T10:17:22.343", "PostTypeId": "1", "AcceptedAnswerId": "38827256", "LastEditorUserId": "1989995", "LastActivityDate": "2016-08-08T20:05:03.553", "LastEditDate": "2016-08-08T11:39:12.517", "ViewCount": "729", "FavoriteCount": "2", "Title": "Const member function and typedef, C++", "Id": "38826640", "Score": "20", "Body": "<p>Suppose we want to declare const member function via <code>typedef</code>:</p>\n<pre><code>typedef int FC() const;\ntypedef int F();\n\nstruct A\n{\n   FC fc;         // fine, we have 'int fc() const'\n   const F fc;    // not fine, 'const' is ignored, so we have 'int fc()'\n};\n</code></pre>\n<p>Since <code>const</code> is ignored the program compiles fine. Why <code>const</code> is ignored for function? Since we can form const pointer in this way the only thing I can think of is 'C heritage'. Does standard say anything about it?</p>\n", "Tags": "<c++><const><language-lawyer><typedef><member-functions>", "OwnerUserId": "1812165", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_38826640_38827256_0": {"section_id": 3242, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_38826640_38827256_0": {"section_id": 3115, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_38826640_38827256_0": {"section_id": 3999, "quality": 0.8518518518518519, "length": 23}}}, "38837625": {"ParentId": "38826640", "CommentCount": "0", "Body": "<p>This change is made by <a href=\"http://wg21.link/CWG295\" rel=\"nofollow\">CWG 295</a>, essentially to ease generic programming. Consider:</p>\n<pre><code>template&lt;class F&gt;\nvoid meow(const F&amp; f) { f(); }\nvoid purr();\n\nmeow(purr);\n</code></pre>\n<p>Ignoring the extra <code>const</code> allows this to work.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "38837625", "Score": "2", "CreationDate": "2016-08-08T20:05:03.553", "LastActivityDate": "2016-08-08T20:05:03.553"}});