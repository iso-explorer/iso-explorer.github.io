post_cb({"20787574": {"ParentId": "20787171", "CommentCount": "1", "Body": "<p>Not such a big puzzle.  Your <code>operator []</code> is returning a reference to some data variable called <code>emptyValue</code>.</p>\n<pre><code>            m[100] = 200;\n</code></pre>\n<p>is equivqlent to </p>\n<pre><code>            m.emptyValue = 200;\n</code></pre>\n<p>Then you write\n                cout &lt;&lt; m[100];</p>\n<p>which is just like</p>\n<pre><code>            cout &lt;&lt; m.emptyValue;\n</code></pre>\n<p>Note: the index '100' is irrelevant.</p>\n", "OwnerUserId": "111432", "PostTypeId": "2", "Id": "20787574", "Score": "2", "CreationDate": "2013-12-26T15:59:43.243", "LastActivityDate": "2013-12-26T15:59:43.243"}, "20787488": {"ParentId": "20787171", "CommentCount": "0", "Body": "<p>There is nothing with that :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntemplate&lt;typename TipKljuca, typename TipVrijednosti&gt;\nclass BinStabloMapa /* : public Mapa&lt;TipKljuca, TipVrijednosti&gt; */ \n//comment inheritance to make it compile, not relevant to the problem\n{\n    //C++11 syntax, not relevant either\n    TipVrijednosti emptyValue=TipVrijednosti();\n    public:    \n    TipVrijednosti &amp;operator[] (const TipKljuca &amp;kljuc) {\n        return emptyValue;\n    }\n    const TipVrijednosti &amp;operator[] (const TipKljuca &amp;kljuc) const {\n        return emptyValue;\n    }\n\n\n};\n\nint main()\n{\n    BinStabloMapa&lt;int, int&gt; m;\n    m[100] = 200; //calls no const operator[], thus emptyValue is changed \n    cout &lt;&lt; m[100] &lt;&lt; endl; //calls const operator[], thus emptyValue is return\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "2503039", "PostTypeId": "2", "Id": "20787488", "Score": "0", "CreationDate": "2013-12-26T15:52:13.927", "LastActivityDate": "2013-12-26T15:52:13.927"}, "20787171": {"CommentCount": "6", "ViewCount": "114", "PostTypeId": "1", "LastEditorUserId": "1925742", "CreationDate": "2013-12-26T15:26:25.940", "LastActivityDate": "2013-12-26T16:02:23.620", "Title": "Freaky output: why would this code give any meaningful output, let alone this?", "AcceptedAnswerId": "20787187", "LastEditDate": "2013-12-26T16:02:23.620", "Id": "20787171", "Score": "0", "Body": "<p>I'm not sure how to even state my question, but here we go...</p>\n<p>So, I have this class for which <code>operator[]</code> has an empty body (not yet implemented). Still, when I call it from <code>main()</code>, it produces an output. What's more, the output is exactly what was assigned to it in the previous line.</p>\n<p><code>EDIT</code>: I added a private attribute called <code>emptyValue</code>, and I initialized it to <code>TipVrijednosti()</code> in class constructor. </p>\n<p>Here's example:</p>\n<pre><code>  template&lt;typename TipKljuca, typename TipVrijednosti&gt;\n    class BinStabloMapa : public Mapa&lt;TipKljuca, TipVrijednosti&gt;\n    {\n            .\n            .\n        TipVrijednosti &amp;operator[] (const TipKljuca &amp;kljuc) {\n            return emptyValue;\n        }\n        const TipVrijednosti &amp;operator[] (const TipKljuca &amp;kljuc) const {\n            return emptyValue;\n        }\n            .\n            .\n    }\n\n    int main()\n    {\n        BinStabloMapa&lt;int, int&gt; m;\n        m[100] = 200;\n        cout &lt;&lt; m[100] &lt;&lt; endl;\n        return 0;\n    }\n\n    OUTPUT: 200\n</code></pre>\n<p>Could anybody tell me why i this happening?</p>\n", "Tags": "<c++><templates><operator-overloading><cout><generic-programming>", "OwnerUserId": "1925742", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_20787171_20787187_0": {"section_id": 3913, "quality": 1.0, "length": 12}, "so_20787171_20787187_1": {"section_id": 5768, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_20787171_20787187_0": {"section_id": 3773, "quality": 1.0, "length": 12}, "so_20787171_20787187_1": {"section_id": 5541, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_20787171_20787187_0": {"section_id": 4799, "quality": 0.75, "length": 9}, "so_20787171_20787187_1": {"section_id": 7225, "quality": 0.7142857142857143, "length": 5}}}, "20787187": {"ParentId": "20787171", "CommentCount": "5", "Body": "<p>You have undefined behaviour because you're not returning anything from a function that has a non-<code>void</code> return type.</p>\n<p>\u00a76.6.3:</p>\n<blockquote>\n<p id=\"so_20787171_20787187_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>\u00a71.3.24:</p>\n<blockquote>\n<p id=\"so_20787171_20787187_1\"><strong>undefined behavior</strong><br>\n  behavior for which this International Standard imposes no requirements</br></p>\n</blockquote>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "20787187", "Score": "8", "CreationDate": "2013-12-26T15:27:33.283", "LastActivityDate": "2013-12-26T15:27:33.283"}});