post_cb({"4209500": {"LastActivityDate": "2010-11-17T22:07:18.673", "CommentCount": "15", "Body": "<p>Static data members <a href=\"http://msdn.microsoft.com/en-us/library/b1b5y48f.aspx\" rel=\"nofollow\">don't work like that</a> in C++:</p>\n<blockquote>\n<p id=\"so_4209433_4209500_0\">Static data members are not part of\n  objects of a given class type; they\n  are separate objects. As a result, the\n  declaration of a static data member is\n  not considered a definition. The data\n  member is declared in class scope, but\n  definition is performed at file scope.\n  These static members have external\n  linkage.</p>\n</blockquote>\n<p>You're only declaring those constants, even though you're initializing them. You still have to <em>define</em> them at namespace scope:</p>\n<pre><code>class MagicNumbers\n{\npublic:\n    static const int BIG = 100;\n    static const int SMALL = 10;\n};\n\nconst int MagicNumbers::BIG;\nconst int MagicNumbers::SMALL;\n</code></pre>\n<p>That will get rid of the link errors.</p>\n", "CreationDate": "2010-11-17T21:49:40.257", "LastEditDate": "2010-11-17T22:07:18.673", "ParentId": "4209433", "Id": "4209500", "LastEditorUserId": "464709", "PostTypeId": "2", "Score": "7", "OwnerUserId": "464709"}, "4209525": {"CommentCount": "6", "Body": "<p>In spite of the conventional advice, I have found that <code>static const int ...</code> invariably gives me more headaches than good old <code>enum { BIG = 100, SMALL = 10 };</code>. And with C++11 providing strongly-typed enums, I now have even less cause to use <code>static const int ...</code>.</p>\n", "CreationDate": "2010-11-17T21:53:03.630", "ParentId": "4209433", "Id": "4209525", "LastActivityDate": "2010-11-17T21:53:03.630", "PostTypeId": "2", "Score": "7", "OwnerUserId": "9990"}, "4209670": {"CommentCount": "7", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#712\" rel=\"nofollow\">This is a known issue</a>. The Standard is to blame or you for not providing a definition of the statics. Depending on your point of view :)</p>\n", "CreationDate": "2010-11-17T22:09:57.410", "ParentId": "4209433", "Id": "4209670", "LastActivityDate": "2010-11-17T22:09:57.410", "PostTypeId": "2", "Score": "20", "OwnerUserId": "34509"}, "4209540": {"CommentCount": "0", "Body": "<p>You still need to allocate space for them somewhere:</p>\n<pre><code>class MagicNumbers\n{\npublic:\n  static const int BIG = 100;\n  static const int SMALL = 10;\n};\nconst int MagicNumbers::BIG;\nconst int MagicNumbers::SMALL;\n</code></pre>\n", "CreationDate": "2010-11-17T21:54:48.950", "ParentId": "4209433", "Id": "4209540", "LastActivityDate": "2010-11-17T21:54:48.950", "PostTypeId": "2", "Score": "0", "OwnerUserId": "489566"}, "bq_ids": {"n4140": {"so_4209433_4209595_0": {"length": 53, "quality": 0.8983050847457628, "section_id": 5908}}, "n3337": {"so_4209433_4209595_0": {"length": 53, "quality": 0.8983050847457628, "section_id": 5680}}}, "4209595": {"CommentCount": "4", "Body": "<p>Heh, according to the C++ standard, 9.4.2 (class.static.data):</p>\n<blockquote>\n<p id=\"so_4209433_4209595_0\">If a static data member is of const\n  literal type, its declaration in the\n  class definition can specify a\n  brace-or-equal-initializer in which\n  every initializer-clause that is an\n  assignment-expression is a constant\n  expression. A static data member of\n  literal type can be declared in the\n  class definition with the constexpr\n  specifier; if so, its declaration\n  shall specify a\n  brace-or-equal-initializer in which\n  every initializer-clause that is an\n  assignment-expression is a constant\n  expression. [ Note: In both these\n  cases, the member may appear in\n  constant expressions. \u2014end note ] <strong>The\n  member shall still be defined in a\n  namespace scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer.</strong></p>\n</blockquote>\n<p>So the declaration is correct, but you still need to have a definition somewhere. I always thought you could skill the definition, but I suppose that isn't standard conforming.</p>\n", "CreationDate": "2010-11-17T22:01:48.307", "ParentId": "4209433", "Id": "4209595", "LastActivityDate": "2010-11-17T22:01:48.307", "PostTypeId": "2", "Score": "3", "OwnerUserId": "6210"}, "4209433": {"CreationDate": "2010-11-17T21:41:14.407", "ViewCount": "641", "FavoriteCount": "2", "Id": "4209433", "AcceptedAnswerId": "4209525", "Score": "10", "Title": "C++ integral constants + choice operator = problem!", "CommentCount": "0", "Body": "<p>I have recently discovered an annoying problem in some large program i am developing; i would like to understand how to fix it in a best way. I cut the code down to the following minimal example.</p>\n<pre><code>#include &lt;iostream&gt;\nusing std::cin;\nusing std::cout;\n\nclass MagicNumbers\n{\npublic:\n  static const int BIG = 100;\n  static const int SMALL = 10;\n};\n\nint main()\n{\n  int choice;\n  cout &lt;&lt; \"How much stuff do you want?\\n\";\n  cin &gt;&gt; choice;\n  int stuff = (choice &lt; 20) ? MagicNumbers::SMALL : MagicNumbers::BIG; // PROBLEM!\n  cout &lt;&lt; \"You got \" &lt;&lt; stuff &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>\n<p>I get link errors in gcc 4.1.2 when compiling with -O0 or -O1 but everything is OK when compiling with -O2 or -O3. It links well using MS Visual Studio 2005 regardless of optimization options.</p>\n<blockquote>\n<p id=\"so_4209433_4209433_0\">test.cpp:(.text+0xab): undefined reference to `MagicNumbers::SMALL'</p>\n<p id=\"so_4209433_4209433_1\">test.cpp:(.text+0xb3): undefined reference to `MagicNumbers::BIG'</p>\n</blockquote>\n<p>I looked at the intermediate assembly code, and yes, the non-optimized code regarded SMALL and BIG as external int variables, while the optimized one used the actual numbers. Each of the following changes fixes the problem:</p>\n<ul>\n<li><p>Use enum instead of int for constants: <code>enum {SMALL = 10}</code></p></li>\n<li><p>Cast the constant (any one) at each usage: <code>(int)MagicNumbers::SMALL</code> or <code>(int)MagicNumbers::BIG</code> or even <code>MagicNumbers::SMALL + 0</code></p></li>\n<li><p>Use a macro: <code>#define SMALL 10</code></p></li>\n<li><p>Not use the choice operator: <code>if (choice &lt; 20) stuff = MagicNumbers::SMALL; else stuff = MagicNumbers::BIG;</code></p></li>\n</ul>\n<p>I like the first option best (however, it's not ideal because we actually use uint32_t instead of int for these constants, and enum is synonymous with int). But what i really want to ask is: whose bug is it?</p>\n<p>Am i the one to blame for not understanding how static integral constants work?</p>\n<p>Should i blame gcc and hope for a fix (or maybe the latest version already has a fix, or maybe there is an obscure command-line argument to make this work)?</p>\n<p>Meanwhile, i just compile my code with optimizations, and it's a pain to debug :-O3</p>\n", "Tags": "<c++><portability>", "LastActivityDate": "2010-11-18T04:22:40.970", "PostTypeId": "1", "AnswerCount": "8", "OwnerUserId": "509868"}, "4211405": {"LastActivityDate": "2010-11-18T04:22:40.970", "CommentCount": "0", "Body": "<p>Why are your magic numbers in a class?</p>\n<pre><code>namespace MagicNumbers {\n    const int BIG = 100;\n    const int SMALL = 10;\n}\n</code></pre>\n<p>Problem solved without needing to worry about flaws in the C++ standard.</p>\n", "CreationDate": "2010-11-18T03:24:19.673", "LastEditDate": "2010-11-18T04:22:40.970", "ParentId": "4209433", "Id": "4211405", "LastEditorUserId": "13005", "PostTypeId": "2", "Score": "0", "OwnerUserId": "13005"}, "4209532": {"CommentCount": "0", "Body": "<p>I'm new to C++, but I think that your class declaration only declares that those static members exist, you still need to define them somewhere:</p>\n<pre><code>class MagicNumbers\n{\npublic:\n  static const int BIG;\n  static const int SMALL;\n};\n\nconst int MagicNumbers::BIG = 100;\nconst int MagicNumbers::SMALL = 10;\n</code></pre>\n<p>The higher optimisation levels probably include a level of static analysis thorough enough to determine that <code>BIG</code> and <code>SMALL</code> can be exchanged with their actual values and not to give them any actual storage (the semantics will be the same), so defining these variables in this circumstance would be redundant, hence it links OK.</p>\n", "CreationDate": "2010-11-17T21:53:43.473", "ParentId": "4209433", "Id": "4209532", "LastActivityDate": "2010-11-17T21:53:43.473", "PostTypeId": "2", "Score": "1", "OwnerUserId": "10320"}, "4209495": {"LastActivityDate": "2010-11-17T22:02:28.850", "CommentCount": "0", "Body": "<p>I'd be hard pressed to assert that it's anyone's bug.  </p>\n<p>Static const integrals given values at point of declaration are not variables, they're constant expressions.  For there to be a variable you still need to define it.  </p>\n<p>The rules wrt the ternary operator are pretty absurdly complex, probably necessarily so, and actually doesn't really say anything about constant expressions, only rvalues; obviously the compiler thinks they should be variables unless optimization is cranked way up.  I think it's free to interpret the expression either way (as a constant expression or as variable).</p>\n", "CreationDate": "2010-11-17T21:49:12.223", "LastEditDate": "2010-11-17T22:02:28.850", "ParentId": "4209433", "Id": "4209495", "LastEditorUserId": "301883", "PostTypeId": "2", "Score": "1", "OwnerUserId": "301883"}});