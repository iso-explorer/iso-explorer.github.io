post_cb({"40061151": {"CommentCount": "7", "CreationDate": "2016-10-15T15:54:39.957", "CommunityOwnedDate": "2016-10-15T15:54:39.957", "LastEditorUserId": "560648", "LastActivityDate": "2016-10-15T16:14:26.703", "ParentId": "40061120", "LastEditDate": "2016-10-15T16:14:26.703", "PostTypeId": "2", "Id": "40061151", "OwnerUserId": "560648", "Body": "<p>Answer by StoryTeller:</p>\n<blockquote>\n<p id=\"so_40061120_40061151_0\">The standard cannot make that guarantee, simply because the result of <code>std::cos</code> may not be representable exactly by a <code>double</code>, so you get a truncation error, which will affect the result of <code>std::acos</code>.</p>\n</blockquote>\n", "Score": "3"}, "40061120": {"CommentCount": "7", "AcceptedAnswerId": "40061151", "LastEditDate": "2016-10-15T16:29:13.493", "LastEditorUserId": "2430597", "CreationDate": "2016-10-15T15:50:54.617", "LastActivityDate": "2016-10-15T16:29:13.493", "PostTypeId": "1", "ViewCount": "125", "Title": "Restoring the exact angle from std::cos(angle) using std::acos", "Id": "40061120", "OwnerUserId": "2430597", "Body": "<p>Is it guaranteed by the C++ standard that <code>angle == std::acos(std::cos(angle))</code> if <code>angle</code> is in the range [0, Pi], or in other words is it possible to restore the exact original value of <code>angle</code> from the result of <code>std::cos</code> using <code>std::acos</code> given the mentioned range limit?</p>\n<p>The marginal cases when <code>angle</code> is <code>infinity</code> or <code>NaN</code> are omitted.</p>\n", "Tags": "<c++><std><precision><numerical-stability>", "Score": "3", "AnswerCount": "4"}, "40061436": {"ParentId": "40061120", "CommentCount": "6", "Body": "<p>According to the standard:</p>\n<blockquote>\n<p id=\"so_40061120_40061436_0\">This International Standard imposes no requirements on the accuracy\n  of floating-point operations; see also 18.3.2. \u2014 end note ] </p>\n</blockquote>\n<p><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4606.pdf\" rel=\"nofollow\">http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4606.pdf</a></p>\n", "OwnerUserId": "493106", "PostTypeId": "2", "Id": "40061436", "Score": "1", "CreationDate": "2016-10-15T16:21:06.243", "LastActivityDate": "2016-10-15T16:21:06.243"}, "40061386": {"ParentId": "40061120", "CommentCount": "1", "Body": "<p>Even mathematically this is impossible. For example, <code>cos(2*PI)</code> is 0, but so is <code>cos(4*PI)</code>.</p>\n", "OwnerUserId": "1440565", "PostTypeId": "2", "Id": "40061386", "Score": "0", "CreationDate": "2016-10-15T16:16:50.580", "LastActivityDate": "2016-10-15T16:16:50.580"}, "bq_ids": {"n4659": {"so_40061120_40061436_0": {"section_id": 8726, "quality": 0.6153846153846154, "length": 8}}}, "40061369": {"ParentId": "40061120", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From cppreference.com:</p>\n<blockquote>\n<p id=\"so_40061120_40061369_0\"><strong>\u201d</strong> If no errors occur, [acos returns] the arc cosine of arg (arccos(arg)) in the range [0 ; \u03c0]</p>\n</blockquote>\n<p>In degrees, that's 0 to 180, inclusive, corresponding to cosine values 1 down through -1, inclusive.</p>\n<p>Outside that range you can't even get an approximate correspondence. Computing the cosine <em>discards</em> information about which angle you had outside of that range. There's no way to get that information back.</p>\n<p>How information is discarded:</p>\n<p>First, in degrees, cos(x) = cos(K*360 + x), for arbitrary integer K. Secondly, cos(x) = cos(-x). This adds up to an awful lot of angle values that produce the same cosine value.</p>\n<p>Also, even though all readers likely know this, but for completeness: since sines are cosines are very irrational numbers, generally not simple fractions, you can't expect exact results except for maybe cosine 1, which corresponds to 0 degrees.</p>\n", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2016-10-15T16:23:01.030", "Id": "40061369", "Score": "3", "CreationDate": "2016-10-15T16:15:04.157", "LastActivityDate": "2016-10-15T16:23:01.030"}});