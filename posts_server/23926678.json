post_cb({"bq_ids": {"n4140": {"so_23926678_23926951_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5907}, "so_23926678_23926951_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5907}, "so_23926678_23926678_0": {"length": 15, "quality": 0.9375, "section_id": 7099}}, "n3337": {"so_23926678_23926951_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5679}, "so_23926678_23926951_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5679}, "so_23926678_23926678_0": {"length": 15, "quality": 0.9375, "section_id": 6843}}, "n4659": {"so_23926678_23926951_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 7389}, "so_23926678_23926951_1": {"length": 33, "quality": 0.8918918918918919, "section_id": 7389}, "so_23926678_23926678_0": {"length": 15, "quality": 0.9375, "section_id": 8600}}}, "23926678": {"ViewCount": "55", "Body": "<p>From the sec. 3.4.1/13 of N3797:</p>\n<blockquote>\n<p id=\"so_23926678_23926678_0\">A name used in the definition of a static data member of class X\n  (9.4.2) (after the qualified-id of the static member) is looked up as\n  if the name was used in a member function of X.</p>\n</blockquote>\n<p>it is unclear how is looked up a name used in the definition of a static data member of class X after the <strong>unqualified-id</strong> of the data member. I need a quote from the standard.</p>\n", "AcceptedAnswerId": "23926951", "Title": "Name used in the static data member definition after unqualified id", "CreationDate": "2014-05-29T05:59:15.850", "Id": "23926678", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-05-29T06:18:57.413", "Score": "0", "OwnerUserId": "2786156", "Tags": "<c++><class><static>", "AnswerCount": "1"}, "23926951": {"Id": "23926951", "PostTypeId": "2", "Body": "<p>All is writed in 9.4.2. Quote from n3376 9.4.2/2</p>\n<blockquote>\n<p id=\"so_23926678_23926951_0\">In the definition at namespace scope, the name of the static data\n  member shall be qualified by its class name using the :: operator. <strong>The\n  initializer expression in the definition of a static data member is in\n  the scope of its class</strong> [ Example:</p>\n<pre><code>class process \n{ \n   static process* run_chain; \n   static process* running; \n};\n\nprocess* process::running = get_main();\nprocess* process::run_chain = running;\n</code></pre>\n<p id=\"so_23926678_23926951_1\">The static data member run_chain of class process is defined in global\n  scope; the notation process ::run_chain specifies that the member\n  run_chain is a member of class process and in the scope of class\n  process. <strong>In the static data member definition, the initializer\n  expression refers to the static data member running of class process.</strong>\n  \u2014 end example ]</p>\n</blockquote>\n", "LastActivityDate": "2014-05-29T06:18:57.413", "CommentCount": "1", "CreationDate": "2014-05-29T06:18:57.413", "ParentId": "23926678", "Score": "1", "OwnerUserId": "1498580"}});