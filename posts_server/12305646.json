post_cb({"bq_ids": {"n4140": {"so_12305646_12305725_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5404}}, "n3337": {"so_12305646_12305725_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5199}}, "n4659": {"so_12305646_12305725_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6853}}}, "12305725": {"Id": "12305725", "PostTypeId": "2", "Body": "<p>That's fine. It's guaranteed that there will only be one copy of <code>array</code>, as long as the function has external linkage, which this does. The C++ standard says:</p>\n<blockquote>\n<p id=\"so_12305646_12305725_0\">7.1.2/4 A static local variable in an extern inline function always refers to the same object.</p>\n</blockquote>\n", "LastActivityDate": "2012-09-06T17:54:05.190", "CommentCount": "2", "CreationDate": "2012-09-06T17:54:05.190", "ParentId": "12305646", "Score": "9", "OwnerUserId": "204847"}, "12305646": {"ViewCount": "1224", "Body": "<p>I am developing a library that will consist of header files only. So far, it contains only classes, which has been fine. However, I have come to a point where I need to have some library-wide accessible unchanging data in the library (that is, not class instance data) for the implementation of some functions. You obviously can't just put global data in header files, or else every compilation unit that <code>#include</code>s the header will have a definition for the symbol and you'll get multiple definition errors at link-time.</p>\n<p>I seem to have found a workaround that lets me have static data in a class without having to add a compilation unit to the library by just making the data a <code>static</code> variable in a function and returning a pointer to that data:</p>\n<pre><code>class StaticData {\npublic:\n    void doSomething() { /* this uses getData */ }\n    void doSomethingElse() { /* this does too */ }\n\nprivate:\n    static int* getData() {\n        static int array[] { 1, 2, 3, 4 };\n\n        return array;\n    }\n};\n</code></pre>\n<p>This appears to be working fine, but I must admit that I don't know what happens to function-<code>static</code> data in <code>inline</code> functions in header files. I am wondering if this \"hack\" has any unintended repercussions, such as every compilation unit that <code>#include</code>s this header getting its own version of <code>array</code>. How and where does the compiler decide to put it?</p>\n<p>Also it should be noted that I am not using this to implement the singleton antipattern or anything. I am just using it to store data that multiple functions will need to use (which is why it can't be <code>static</code> in just a function that uses it, but even if it did, that would prompt the same question).</p>\n", "AcceptedAnswerId": "12305725", "Title": "Static data in header-only libraries", "CreationDate": "2012-09-06T17:47:59.200", "Id": "12305646", "CommentCount": "0", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2012-09-06T17:53:23.423", "LastEditorUserId": "726361", "LastActivityDate": "2017-05-18T15:22:47.803", "Score": "14", "OwnerUserId": "726361", "Tags": "<c++><static><libraries><header-only>", "AnswerCount": "2"}, "44051842": {"Id": "44051842", "PostTypeId": "2", "Body": "<p>Another approach...</p>\n<pre><code>template&lt;typename&gt; class ArrayData {\n    friend class ClassWithArray;\n    static int array[4];\n};\n\nclass ClassWithArray :\n    ArrayData&lt;ClassWithArray&gt;\n{\npublic:\n    void doSomething() { \n        /* this uses getData */ \n        array[0] = 1;\n        array[1] = 2;\n        array[2] = 3;\n        array[3] = 4;\n    }\n    void doSomethingElse() { \n        /* this does too */ \n        array[0] = 4;\n        array[1] = 3;\n        array[2] = 2;\n        array[3] = 1;\n    }\n};\n\nint ArrayData&lt;ClassWithArray&gt;::array[4] = { 1, 2, 3, 4 };\n</code></pre>\n<p>generic implementation</p>\n<pre><code>template&lt;typename T&gt; class ArrayDataT \n{\n    friend T;\n    static int array[4];\n};\n\ntemplate&lt;typename T&gt;\nint ArrayDataT&lt;T&gt;::array[4] = { 1, 2, 3 ,4 };\n\nclass DerivedFromArrayDataT :\n    ArrayDataT&lt;DerivedFromArrayDataT&gt;\n{\n\n};\n</code></pre>\n", "LastActivityDate": "2017-05-18T15:22:47.803", "CommentCount": "0", "CreationDate": "2017-05-18T15:22:47.803", "ParentId": "12305646", "Score": "0", "OwnerUserId": "7232778"}});