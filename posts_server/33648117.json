post_cb({"33648372": {"Id": "33648372", "PostTypeId": "2", "Body": "<p>You might prefer <a href=\"http://en.cppreference.com/w/cpp/utility/functional/function\" rel=\"nofollow\"><code>std::function&lt;&gt;</code></a> instead of function pointers. It can not only store function pointers, but also lambdas, bind expressions, function objects (objects with <code>operator()</code>), etc. Especially the lambdas will make your API a lot better usable.</p>\n<pre><code>int f(std::function&lt;void()&gt;&amp; fun) {\n    fun();\n    return 20;\n}\n</code></pre>\n", "LastActivityDate": "2015-11-11T10:12:43.470", "CommentCount": "9", "CreationDate": "2015-11-11T10:12:43.470", "ParentId": "33648117", "Score": "4", "OwnerUserId": "5053331"}, "33649274": {"Id": "33649274", "PostTypeId": "2", "Body": "<p>Both forms are equivalent. I prefer the form which explicitly shows that the parameter is a pointer. The knowledge, that the parameter is a pointer is important, since you can pass the values <code>NULL</code>, <code>nullptr</code> or <code>0</code> as argument. Your program would compile, but crash if someone would do the function call <code>f(0)</code>.\nYou always want to check if a function pointer is not a null pointer before calling the pointee, unless you are certain that it is not possible that your function is called with a <code>NULL</code>, <code>nullptr</code> or <code>0</code> argument.</p>\n<p>If you use lambdas in your project, you should use `templates. Otherwise you can continue to use raw function pointers, but make sure that you check your function pointer (if necessary)</p>\n<pre><code>template &lt;typename Function&gt;\nint f(const Function&amp; functionp) {\n  if(functionp)\n     functionp();\n  return 20;\n}\n</code></pre>\n<p>Lambdas and <code>std::function&lt;&gt;</code> objects also have a <code>bool</code> operator, so the line <code>if(functionp)</code> will also work for those. It will evaluate to <code>false</code> for <code>std::function&lt;&gt;</code> objects which contain a nullptr and otherwise it will evaluate to <code>true</code> for <code>std::function&lt;&gt;</code> objects and lambdas.</p>\n", "LastEditorUserId": "231717", "LastActivityDate": "2015-11-11T11:25:43.137", "Score": "0", "CreationDate": "2015-11-11T11:07:45.173", "ParentId": "33648117", "CommentCount": "0", "OwnerUserId": "231717", "LastEditDate": "2015-11-11T11:25:43.137"}, "33648893": {"Id": "33648893", "PostTypeId": "2", "Body": "<p>Another way which is simple and does not have the cost of a <code>std:::function</code> is to use templates.</p>\n<pre><code>template &lt;typename Function&gt;\nint f(Function function) {\n  function();\n  return 20;\n}\n</code></pre>\n<p>That way the type will be deduced to be any kind of callable object. It should also enable the compiler to inline the call if it can (which is not possible with <code>std::function</code>).</p>\n", "LastActivityDate": "2015-11-11T10:44:57.300", "CommentCount": "0", "CreationDate": "2015-11-11T10:44:57.300", "ParentId": "33648117", "Score": "0", "OwnerUserId": "4382581"}, "33648117": {"ViewCount": "121", "Body": "<p>When searching for how to pass functions as parameters in C++, I only find examples that use function pointers. However the following compiles and outputs \"g20\" as expected in Visual Studio. Is it better to declare f like this:</p>\n<pre><code>f(void (*fun)());\n</code></pre>\n<p>instead of</p>\n<pre><code>f(void fun());\n</code></pre>\n<p>my example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint f(void fun());\nvoid g();\n\nint main() {\n    cout &lt;&lt; f(g);\n}\n\nvoid g() {\n    cout &lt;&lt; \"g\";\n}\n\nint f(void fun()) {\n    fun();\n    return 20;\n}\n</code></pre>\n", "Title": "c++ functions as parameters without pointers", "CreationDate": "2015-11-11T09:58:07.490", "LastActivityDate": "2015-11-11T23:40:29.873", "CommentCount": "2", "LastEditDate": "2015-11-11T11:12:44.167", "PostTypeId": "1", "LastEditorUserId": "3235496", "Id": "33648117", "Score": "5", "OwnerUserId": "5550040", "Tags": "<c++><function-pointers>", "AnswerCount": "5"}, "33649409": {"Id": "33649409", "PostTypeId": "2", "Body": "<p>Ampersand <code>&amp;</code> makes it a reference, <a href=\"http://en.cppreference.com/w/cpp/types/decay\" rel=\"nofollow\">std::decay_t</a> makes reference a pointer.</p>\n<pre><code>template &lt;class R, class Args...&gt;\nusing func_ref_t = R(&amp;)(Args...)\n\ntemplate &lt;class R, class Args...&gt;\nusing func_ptr_t = R(&amp;)(Args...)\n</code></pre>\n", "LastActivityDate": "2015-11-11T11:16:22.353", "CommentCount": "0", "CreationDate": "2015-11-11T11:16:22.353", "ParentId": "33648117", "Score": "0", "OwnerUserId": "267482"}, "bq_ids": {"n4140": {"so_33648117_33661933_1": {"length": 14, "quality": 1.0, "section_id": 3241}, "so_33648117_33661933_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 558}}, "n3337": {"so_33648117_33661933_1": {"length": 14, "quality": 1.0, "section_id": 3114}, "so_33648117_33661933_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 549}}, "n4659": {"so_33648117_33661933_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3997}, "so_33648117_33661933_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 581}}}, "33661933": {"Id": "33661933", "PostTypeId": "2", "Body": "<p>According to the C (and C++) standard, when a parameter has a function type, the compiler automatically adjusts it to the corresponding function pointer type. Therefore, the two are identical as far as the compiler is concerned.</p>\n<p>C99 standard section 6.7.5.3 paragraph 8:</p>\n<blockquote>\n<p id=\"so_33648117_33661933_0\">A declaration of a parameter as \u2018\u2018function returning type\u2019\u2019 shall be\n  adjusted to \u2018\u2018pointer to function returning type\u2019\u2019, as in 6.3.2.1.</p>\n</blockquote>\n<p>C++03 standard section 8.3.5 paragraph 3:</p>\n<blockquote>\n<p id=\"so_33648117_33661933_1\">[...] After determining the type of each parameter, any parameter of\n  type [...] \u201cfunction returning T\u201d is adjusted to be [...] \u201cpointer to\n  function returning T,\u201d respectively. [...]</p>\n</blockquote>\n", "LastActivityDate": "2015-11-11T23:40:29.873", "CommentCount": "0", "CreationDate": "2015-11-11T23:40:29.873", "ParentId": "33648117", "Score": "0", "OwnerUserId": "86989"}});