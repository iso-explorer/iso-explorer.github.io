post_cb({"31937668": {"ParentId": "31935470", "CommentCount": "1", "Body": "<p>Here you are overloading the operator() \"function call operator\" which returns int.(converting your object to int)</p>\n<p>constructor doesn't return anything but by use of functors(function object) you can achieve that scenario. (sry if i am wrong here, anyone let me know ur comments)</p>\n<p>Ex : lets say I have class A.</p>\n<pre><code>A obj(5);  // call to constructor.\nint b = obj(6);  // call to overloaded operator() that you need to define\n</code></pre>\n", "OwnerUserId": "5048064", "PostTypeId": "2", "Id": "31937668", "Score": "-3", "CreationDate": "2015-08-11T09:12:16.003", "LastActivityDate": "2015-08-11T09:12:16.003"}, "31935785": {"ParentId": "31935470", "CommentCount": "3", "Body": "<p>When you call <code>sequence(1, 2)</code> it is not the ctor who allocates memory for the temporary object, but code that the compiler generates. What the compiler generates is something like this pseudo code:</p>\n<pre><code>sequence *tmp = allocate_memory_from_stack_for_temp_object();\ntmp-&gt;ctor(1, 2);\nreturn *tmp;\n</code></pre>\n<p>As you can see the ctor is working on existing memory, so there is no need for the ctor function to return the constructed object. This is handled by some logic around the ctor. Of course the compiler also adds code to destroy the temporary object.</p>\n", "OwnerUserId": "1023911", "PostTypeId": "2", "Id": "31935785", "Score": "1", "CreationDate": "2015-08-11T07:33:05.413", "LastActivityDate": "2015-08-11T07:33:05.413"}, "31935546": {"ParentId": "31935470", "CommentCount": "1", "Body": "<p>Because you have <code>operator int()</code> which converts your <code>sequence</code> class objects to <code>1</code>. You can easily observe it as it prints <code>1</code> and a newline for every conversion. </p>\n", "OwnerUserId": "1280800", "PostTypeId": "2", "Id": "31935546", "Score": "6", "CreationDate": "2015-08-11T07:20:39.413", "LastActivityDate": "2015-08-11T07:20:39.413"}, "31935708": {"ParentId": "31935470", "CommentCount": "0", "Body": "<p><code>sequence(1,2)</code> is not a constructor call, it is an explicit type conversion using functional notation, resulting in a <em>prvalue</em> of type <code>sequence</code>. This is explained in [expr.type.conv]/1 (N3337):</p>\n<blockquote>\n<p id=\"so_31935470_31935708_0\">A simple-type-specifier (7.1.6.2) or typename-specifier (14.6) followed by a parenthesized expression-list constructs a value of the specified type given the expression list. </p>\n<p id=\"so_31935470_31935708_1\">[...]</p>\n<p id=\"so_31935470_31935708_2\">If the expression list specifies more than a single value, the type shall be a class with a suitably declared constructor (8.5, 12.1), and the expression T(x1, x2, ...) is equivalent in effect to the declaration T t(x1, x2, ...); for some invented temporary variable t, with the result being the value of t as a prvalue.</p>\n</blockquote>\n<p>The reason a <code>sequence</code> is acceptable as an <code>int</code> is that it provides an implicit conversion to <code>int</code> operator: <code>operator int</code>.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "31935708", "Score": "4", "CreationDate": "2015-08-11T07:28:49.097", "LastActivityDate": "2015-08-11T07:28:49.097"}, "31935470": {"CommentCount": "12", "CreationDate": "2015-08-11T07:17:13.833", "PostTypeId": "1", "AcceptedAnswerId": "31935708", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-11T13:11:19.863", "LastEditDate": "2017-05-23T11:59:37.023", "ViewCount": "137", "FavoriteCount": "1", "Title": "How is the constructor used in C++? Why does it seem to allow using it as a parameter?", "Id": "31935470", "Score": "-1", "Body": "<p>I stumbled upon this <a href=\"https://stackoverflow.com/q/4252680/1566187\">question</a> (which is a different example). And most say a constructor does not return anything. <strong>However, why does my example work?</strong></p>\n<p><code>sequence(1, 2)</code> is a constructor and obviously can be used on my machine. I use <code>g++</code> and tried without option and with C++11 option. Both work in my case.</p>\n<p><em>The example is from a course. I copy as is, no matter whether <code>public</code> makes sense or not, or something else.</em></p>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nvoid printer(int i) {\n    cout &lt;&lt; i &lt;&lt; \", \";\n}\n\nstruct sequence {\n    int val, inc;\npublic:\n\n    sequence(int s, int i) : val(s), inc(i) {\n        cout &lt;&lt; \"Sequence(\" &lt;&lt; val &lt;&lt; \", \" &lt;&lt; inc &lt;&lt; \")\" &lt;&lt; endl;\n    }\n\n    operator int() const {//LINE I\n        int r = val;\n        cout &lt;&lt; r &lt;&lt; endl;\n        return r;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; v1(7);\n    fill(v1.begin(), v1.end(), sequence(1, 2)); //LINE II\n    for_each(v1.begin(), v1.end(), printer);\n    return 0;\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>Sequence(1, 2)\n1\n1\n1\n1\n1\n1\n1\n1, 1, 1, 1, 1, 1, 1, \n</code></pre>\n<h2>Update</h2>\n<p>Thank you all for the answers. But I am still pretty confused, cannot get it into my head, probably missing proper terminology I think.</p>\n<p>So far I think I understood:</p>\n<ul>\n<li><code>sequence</code> is a <code>struct</code> object</li>\n<li><code>sequence(int, int)</code> is a constructor definition and does not return anything</li>\n<li><code>()</code> operator on <code>sequence</code> simply returns the <code>val</code> value.</li>\n</ul>\n<p>So why does it work:</p>\n<ul>\n<li>the call to <code>sequence(1,2)</code> creates a temporary object that can be accessed and read</li>\n<li>the <code>()</code> is used to fill the respective element. basically <code>fill</code> uses <code>sequence()</code> to get the value to fill in.</li>\n<li>after <code>fill</code> has finished the temporary object is destroyed. It's scope is the scope of the function <code>fill</code></li>\n</ul>\n<p>Does that sound right so far?</p>\n", "Tags": "<c++><constructor><return>", "OwnerUserId": "1566187", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_31935470_31935708_2": {"section_id": 5999, "quality": 0.9629629629629629, "length": 26}, "so_31935470_31935708_0": {"section_id": 5999, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_31935470_31935708_2": {"section_id": 5767, "quality": 0.9629629629629629, "length": 26}, "so_31935470_31935708_0": {"section_id": 5767, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_31935470_31935708_0": {"section_id": 7499, "quality": 0.7142857142857143, "length": 10}}}, "31935599": {"ParentId": "31935470", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><em>Constructor does not return anything</em> means that you can't set the return value <strong>manually</strong>. However if you use <code>sequence(1, 2)</code> in your code, it creates temporary object of your type.</p>\n<p>Then the compiler tries to convert that object to <code>int</code>. Since you have defined the <code>int()</code> operator, it succeeded.</p>\n", "OwnerUserId": "2042587", "LastEditorUserId": "2042587", "LastEditDate": "2015-08-11T07:29:04.823", "Id": "31935599", "Score": "3", "CreationDate": "2015-08-11T07:23:00.363", "LastActivityDate": "2015-08-11T07:29:04.823"}});