post_cb({"8289950": {"CommentCount": "5", "ViewCount": "2842", "PostTypeId": "1", "LastEditorUserId": "743214", "CreationDate": "2011-11-27T23:27:40.383", "LastActivityDate": "2011-11-28T07:46:13.037", "Title": "constructor call or function-style cast in C++", "FavoriteCount": "1", "LastEditDate": "2011-11-27T23:46:50.520", "Id": "8289950", "Score": "4", "Body": "<p>If I have the following c++ code:</p>\n<pre><code>class foo{\npublic:\n    explicit foo(int i){};\n};\nvoid f(const foo &amp;o){\n}\n</code></pre>\n<p>And then I call</p>\n<pre><code>f(foo(1));\n</code></pre>\n<p>Is <code>foo(1)</code> constructor call or function-style cast?</p>\n", "Tags": "<c++>", "OwnerUserId": "534617", "AnswerCount": "3"}, "8292768": {"ParentId": "8289950", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_8289950_8292768_0\"><strong>5.2.3 Explicit type conversion (functional notation)</strong></p>\n<p id=\"so_8289950_8292768_1\">1 A <em>simple-type-specifier</em> (7.1.6.2) or <em>typename-specifier</em> (14.6)\n  followed by a parenthesized <em>expression-list</em> constructs a value of\n  the specified type given the expression list. If the expression list\n  is a single expression, the <strong>type conversion expression is equivalent\n  (in definedness, and if defined in meaning) to the corresponding cast\n  expression</strong> (5.4). ...</p>\n</blockquote>\n<p>Your code creates a temporary, using the constructor you have with the argument's value 1, and binds it to a const reference. The temporary's lifetime ends at the end of the statement where it was created. </p>\n", "OwnerUserId": "155693", "PostTypeId": "2", "Id": "8292768", "Score": "5", "CreationDate": "2011-11-28T07:46:13.037", "LastActivityDate": "2011-11-28T07:46:13.037"}, "8289970": {"ParentId": "8289950", "CommentCount": "1", "Body": "<p>It's a function-style cast that results in a constructor call, so both.</p>\n", "OwnerUserId": "499449", "PostTypeId": "2", "Id": "8289970", "Score": "4", "CreationDate": "2011-11-27T23:31:52.227", "LastActivityDate": "2011-11-27T23:31:52.227"}, "bq_ids": {"n4140": {"so_8289950_8292768_0": {"section_id": 367, "quality": 0.6666666666666666, "length": 4}, "so_8289950_8292768_1": {"section_id": 5999, "quality": 0.9285714285714286, "length": 26}}, "n3337": {"so_8289950_8292768_0": {"section_id": 356, "quality": 0.6666666666666666, "length": 4}, "so_8289950_8292768_1": {"section_id": 5767, "quality": 0.9285714285714286, "length": 26}}, "n4659": {"so_8289950_8292768_0": {"section_id": 379, "quality": 0.6666666666666666, "length": 4}}}, "8289968": {"ParentId": "8289950", "CommentCount": "5", "Body": "<p>They are the same thing.</p>\n<p></p>\n", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "8289968", "Score": "4", "CreationDate": "2011-11-27T23:30:47.857", "LastActivityDate": "2011-11-27T23:30:47.857"}});