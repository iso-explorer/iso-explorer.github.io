post_cb({"bq_ids": {"n4140": {"so_14940511_14941147_1": {"length": 10, "quality": 1.0, "section_id": 969}}, "n3337": {"so_14940511_14941147_1": {"length": 10, "quality": 1.0, "section_id": 958}}, "n4659": {"so_14940511_14941147_1": {"length": 10, "quality": 1.0, "section_id": 1031}}}, "14940511": {"ViewCount": "117", "Body": "<p>Putting aside the move semantics at this moment, is vector reallocation and vector::push_back required by the standard to use placement new and copy constructor? If so where does it in the standard say so?</p>\n", "AcceptedAnswerId": "14940662", "Title": "is vector reallocation and vector::push_back required by the standard to use placement new and copy constructor?", "CreationDate": "2013-02-18T16:10:03.410", "Id": "14940511", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2013-02-18T16:52:25.200", "Score": "0", "OwnerUserId": "1864441", "Tags": "<c++><stl>", "AnswerCount": "2"}, "14940662": {"Id": "14940662", "PostTypeId": "2", "Body": "<p>Yes and no.  Vector, like all other containers, is required to\nuse <code>allocator_traits&lt;allocator_type&gt;::construct</code> and\n<code>allocator_traits&lt;allocator_type&gt;::destroy</code> (\u00a723.2.1/3) and to\nobtain all memory using the allocator (\u00a723.2.1/7).  If you\nprovide a custom allocator, you can do just about anything.  The\ndefault allocator is required to call <code>::operator new</code>\n(\u00a720.6.9.1/6) and to use placement new (\u00a720.6.9.1/12). </p>\n", "LastActivityDate": "2013-02-18T16:18:08.563", "CommentCount": "2", "CreationDate": "2013-02-18T16:18:08.563", "ParentId": "14940511", "Score": "4", "OwnerUserId": "649665"}, "14941147": {"Id": "14941147", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14940511_14941147_0\"><strong>C++11 \u00a723.3.6.3</strong>, about <code>std::vector::reserve</code>: </p>\n<p id=\"so_14940511_14941147_1\">\u201cIf an exception is thrown other than by the move constructor of a non-<code>CopyInsertable</code> type, there are no effects.\u201d</p>\n</blockquote>\n<p>This means that for buffer reallocation with a non-<code>CopyInsertable</code> item type, an implemention is free to <em>move</em> items from the old buffer to the new one, if possible, then not using the type\u2019s copy constructor.</p>\n<p>The effect of an exception from a move constructor is left unspecified in the paragraph quoted above, and this is made explicit in \u00a723.3.6.5 about <code>insert</code> and <code>push_back</code>: \u201c If an exception is thrown by the move constructor of a non-<code>CopyInsertable</code> <code>T</code>, the effects are unspecified.\u201d</p>\n<p>Use of placement new is implied because that\u2019s the language\u2019s only feature to construct an object in pre-existing storage. As James Kanze notes in his answer, it\u2019s also explicitly required via the requirements on allocators, and by \u00a723.2.1/2 requirement that the allocator\u2019s <code>construct</code> method be used.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2013-02-18T16:52:25.200", "Score": "0", "CreationDate": "2013-02-18T16:44:02.127", "ParentId": "14940511", "CommentCount": "0", "OwnerUserId": "464581", "LastEditDate": "2013-02-18T16:52:25.200"}});