post_cb({"bq_ids": {"n4140": {"so_23096929_23097164_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 3321}}, "n3337": {"so_23096929_23097164_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 3191}}, "n4659": {"so_23096929_23097164_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 4087}}}, "23096929": {"ViewCount": "81", "Body": "<p>Is this undefined behavior? If not, what is the behavior?</p>\n<pre><code>// In some external library with, say, header \"a.h\"\nvoid f(int &amp;&amp;x) {\n  x = 5;  // Which memory does this assignment apply to?\n}\n\n#include \"a.h\"\nint main() {\n  f(7);\n  // At this point, where is the value of 5?\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "23097164", "Title": "Understanding Rvalue Reference", "CreationDate": "2014-04-16T00:32:41.947", "Id": "23096929", "CommentCount": "15", "PostTypeId": "1", "LastActivityDate": "2014-04-16T01:00:44.950", "Score": "2", "OwnerUserId": "2063015", "Tags": "<c++><rvalue-reference>", "AnswerCount": "1"}, "23097164": {"Id": "23097164", "PostTypeId": "2", "Body": "<p>C++11 8.5.3 describes initialization of references (including rvalue references).</p>\n<p>It says:</p>\n<blockquote>\n<p id=\"so_23096929_23097164_0\">Otherwise, a temporary of type \u201ccv1 T1\u201d is created and initialized\n  from the initializer expression using the rules for a non-reference\n  copy-initialization (8.5). The reference is then bound to the\n  temporary.</p>\n</blockquote>\n<p>So, a temporary of type int is bound to the rvalue reference, and thrown away immediately after the call returns.</p>\n<p>Section 12.2 (Temporaries) gives examples very similar to yours.</p>\n", "LastActivityDate": "2014-04-16T01:00:44.950", "CommentCount": "0", "CreationDate": "2014-04-16T01:00:44.950", "ParentId": "23096929", "Score": "4", "OwnerUserId": "1411457"}});