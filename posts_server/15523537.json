post_cb({"15523537": {"CommentCount": "8", "AcceptedAnswerId": "15527364", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2013-03-20T12:26:40.567", "LastActivityDate": "2013-03-20T15:26:05.253", "LastEditDate": "2013-03-20T12:43:09.613", "ViewCount": "4774", "FavoriteCount": "1", "Title": "alignas specifier vs __attribute__(aligned), c++11", "Id": "15523537", "Score": "10", "Body": "<p>I'm currently in the process of developing an OS kernel in C++11, and I've come across a question, I cannot seem to find the answer to myself.</p>\n<p>Currently I'm aligning my paging structures, using compiler specific attributes (eg. gcc's <code>__attribute__(aligned)</code>), however I'm wanting to use the C++11 alignas specifier instead, on Clang++ this is no issue, as it gladly accepts 4096 alignment as parameter to alignas, however G++ does not!</p>\n<p>So first of all, what's the main difference between the <code>alignas specifier</code>, and the gcc <code>__attribute__(aligned)</code>, obviously both ensure alignment to a specific value, however the alignas specifier in gcc seems to have a limit of 128, while the attribute seems almost limitless, why is this?</p>\n<p>Also why can't one pass a const integer to the alignas specifier?</p>\n", "Tags": "<c++><gcc><c++11><alignment><clang>", "OwnerUserId": "480212", "AnswerCount": "1"}, "15527364": {"ParentId": "15523537", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>It seems from the GCC support status, alignment support is not fully supported in <a href=\"http://gcc.gnu.org/gcc-4.7/cxx0x_status.html\" rel=\"noreferrer\">gcc 4.7</a>, but it is for <a href=\"http://gcc.gnu.org/gcc-4.8/cxx0x_status.html\" rel=\"noreferrer\">gcc 4.8</a>. <code>alignas</code> is also listed as a newly supported feature from the 4.8 <a href=\"http://gcc.gnu.org/gcc-4.8/changes.html\" rel=\"noreferrer\">release page</a>.</p>\n<p>Also, from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf\" rel=\"noreferrer\">alignment support proposal</a> (3.11):</p>\n<blockquote>\n<p id=\"so_15523537_15527364_0\">A fundamental alignment is represented by an alignment less than or equal to the greatest alignment supported by the implementation in all contexts, which is equal to alignof(std::max_align_t) (18.1).</p>\n<p id=\"so_15523537_15527364_1\">An extended alignment is represented by an alignment greater than \n  alignof(std::max_align_t). It is implementation-defined whether any extended\n  alignments are supported and the contexts in which they are supported (7.1.6). A type \n  having an extended alignment requirement is an over-aligned type.</p>\n</blockquote>\n<p>And from the same document (7.1.6):</p>\n<blockquote>\n<p id=\"so_15523537_15527364_2\">if the constant expression evaluates to an extended alignment and the implementation \n  does not support that alignment in the context of the declaration, the program is illformed </p>\n</blockquote>\n<p>That might be part of the answer too. I don't have access to the full standard at the moment, someone should be able to confirm this.</p>\n<p>As for the difference between <code>__attribute__(aligned)</code> and <code>alignas</code>, i don't think they are semantically different, but one is just a compiler extension while the other is fully defined by the standard.</p>\n<p>To answer your last question, <code>alignas</code> is only defined for:</p>\n<pre><code>alignas ( constant-expression ) \nalignas ( type-id ) \n</code></pre>\n", "OwnerUserId": "401200", "LastEditorUserId": "401200", "LastEditDate": "2013-03-20T15:26:05.253", "Id": "15527364", "Score": "6", "CreationDate": "2013-03-20T15:08:13.287", "LastActivityDate": "2013-03-20T15:26:05.253"}, "bq_ids": {"n4140": {"so_15523537_15527364_1": {"section_id": 7242, "quality": 0.9130434782608695, "length": 21}, "so_15523537_15527364_2": {"section_id": 5533, "quality": 1.0, "length": 12}, "so_15523537_15527364_0": {"section_id": 7241, "quality": 0.875, "length": 14}}, "n3337": {"so_15523537_15527364_1": {"section_id": 6986, "quality": 0.9130434782608695, "length": 21}, "so_15523537_15527364_2": {"section_id": 5319, "quality": 1.0, "length": 12}, "so_15523537_15527364_0": {"section_id": 6985, "quality": 0.875, "length": 14}}, "n4659": {"so_15523537_15527364_1": {"section_id": 8751, "quality": 0.8695652173913043, "length": 20}, "so_15523537_15527364_2": {"section_id": 6969, "quality": 1.0, "length": 12}, "so_15523537_15527364_0": {"section_id": 8750, "quality": 0.875, "length": 14}}}});