post_cb({"17253652": {"Id": "17253652", "PostTypeId": "2", "Body": "<p>Because C++ does not support <a href=\"http://en.wikipedia.org/wiki/Variable-length_array\" rel=\"nofollow\"><strong><em>variable-length arrays</em></strong></a> (introduced in the <a href=\"http://en.wikipedia.org/wiki/C99\" rel=\"nofollow\"><strong>C-99</strong></a> standard, but <em>not</em> in any version of C++).  When you declare <code>nArraySize</code> as a non <code>const</code> int, the compiler complains because <code>nArraySize</code> may change at runtime.  If <code>nArraySize</code> is <code>const</code>, the compiler knows that it cannot change at runtime, and therefore the array size of <code>szName</code> cannot be variable (i.e. can be deduced at compile time).  In C++ (and versions of C before C99), the size of an array must be a constant that can be deduced at compile-time.</p>\n", "LastActivityDate": "2013-06-22T17:51:54.777", "CommentCount": "2", "CreationDate": "2013-06-22T17:51:54.777", "ParentId": "17253623", "Score": "1", "OwnerUserId": "168288"}, "17253784": {"Id": "17253784", "PostTypeId": "2", "Body": "<p>The Standard does not permit dynamically-sized, statically-allocated arrays. You may find that in GCC you will be able to do this, but that is because that is one of a number of extensions that allow non-conforming behavior.</p>\n<p>An array is defined like this:</p>\n<blockquote>\n<p id=\"so_17253623_17253784_0\"><code>D1 [ constant-expression</code><sub><code>opt</code></sub><code>] attribute-speci\ufb01er-seq</code><sub><code>opt</code></sub></p>\n</blockquote>\n<p>Where the size is an integral constant expression. The Standard defines an integral constant expression like this:</p>\n<blockquote>\n<p id=\"so_17253623_17253784_1\">An integral constant expression is an expression of integral or unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression. [Note: Such expressions\n  may be used as array bounds (8.3.4, 5.3.4), <em>[...]</em> \u2014 end note]</p>\n</blockquote>\n<pre><code>int n = 10;\nint x[n]; // error!\n</code></pre>\n<p>The variable <code>n</code> is not a constant expression, so it will not work for this case.</p>\n<p>By adding <code>constexpr</code> (C++11) to the type, it will be useable in a constant expression. But in this case <code>const</code> is enough to make it work:</p>\n<pre><code>int const n = 5;\n\nint x[n];\n</code></pre>\n<p>On the other hand, <em>dynamic</em> arrays take a dynamic size specifier:</p>\n<pre><code>int n = 10;\n\nint *x = new int[n];\n</code></pre>\n<p>But an option I would recommend using is <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow\"><code>std::vector</code></a> which is a wrapper around a dynamically-sized buffer:</p>\n<pre><code>#include &lt;vector&gt;\n\nint main()\n{\n    int n = 10;\n\n    std::vector&lt;int&gt; x(n); // x.size() is 10\n}\n</code></pre>\n<p>I hope this helped.</p>\n", "LastActivityDate": "2013-06-22T18:06:12.623", "CommentCount": "2", "CreationDate": "2013-06-22T18:06:12.623", "ParentId": "17253623", "Score": "0", "OwnerUserId": "701092"}, "17253774": {"Id": "17253774", "PostTypeId": "2", "Body": "<p>It must be said first that in C++ language, the size part of array declaration is required to be an Integral Constant Expression (ICE). A <code>const int</code> object declared with an initializer can be used in an ICE. An <code>int</code> object cannot be used in an ICE. That's the formal part of it.</p>\n<p>However, judging by the error message, your C++ compiler <strong>supports</strong> C99-style variable-length arrays (VLA) in C++, as a non-standard extension. That means that in your compiler you are allowed to use non-constant expressions to specify size in array declarations. Yet even if VLAs themselves are supported, such arrays still cannot be initialized. This is prohibited by the specification of VLAs in C99, and that is exactly how their specification is \"inherited\" by your C++ compiler.</p>\n<p>In other words, contrary to what other answers stated, this code will probably be accepted by your C++ compiler</p>\n<pre><code>int nArraySize = 7;\nchar szName[nArraySize];\n</code></pre>\n<p>even though it is formally illegal C++. It is the <code>= \"Mollie\"</code> part that triggers the error.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2013-06-22T20:17:25.753", "Score": "3", "CreationDate": "2013-06-22T18:05:09.900", "ParentId": "17253623", "CommentCount": "2", "OwnerUserId": "187690", "LastEditDate": "2013-06-22T20:17:25.753"}, "bq_ids": {"n4140": {"so_17253623_17253784_1": {"length": 22, "quality": 0.8148148148148148, "section_id": 6186}}, "n3337": {"so_17253623_17253784_1": {"length": 15, "quality": 0.5555555555555556, "section_id": 5947}}, "n4659": {"so_17253623_17253784_1": {"length": 18, "quality": 0.6666666666666666, "section_id": 7688}}}, "17253623": {"ViewCount": "1999", "Body": "<p>Why this type of declaration</p>\n<pre><code>int nArraySize = 7;\nchar szName[nArraySize] = \"Mollie\";\n</code></pre>\n<p>returns this error:</p>\n<pre><code>error: variable-sized object 'szName' may not be initialized\n</code></pre>\n<p>but when I declare the 'arraySize' variable as a 'const int' it works ?</p>\n<pre><code>const int nArraySize = 7;\nchar szName[nArraySize] = \"Mollie\";\n</code></pre>\n", "AcceptedAnswerId": "17253774", "Title": "Difference between const int and int in an array declaration?", "CreationDate": "2013-06-22T17:48:46.450", "Id": "17253623", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-06-22T20:17:25.753", "Score": "1", "OwnerUserId": "1261480", "Tags": "<c++><const>", "AnswerCount": "5"}, "17253662": {"Id": "17253662", "PostTypeId": "2", "Body": "<p>Because the program has to know at compile time how much memory to alocate for your variables. When you don't make your <code>nArraySize</code> constant it is assumed it may change during runtime. While making it constant asures the compiler this value will not be changed.</p>\n", "LastActivityDate": "2013-06-22T17:52:57.357", "CommentCount": "0", "CreationDate": "2013-06-22T17:52:57.357", "ParentId": "17253623", "Score": "0", "OwnerUserId": "2339141"}, "17253649": {"Id": "17253649", "PostTypeId": "2", "Body": "<p>The first is a <a href=\"http://en.wikipedia.org/wiki/Variable-length_array\" rel=\"nofollow\">variable length array</a> and it's standardized in C (since the C99 standard) but not in C++.</p>\n<p>C++ needs all arrays to have their sizes available at <em>compile time</em>, not runtime. Declaring the size as a constant makes it a compile-time constant.</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2013-06-22T18:01:45.513", "Score": "0", "CreationDate": "2013-06-22T17:51:46.277", "ParentId": "17253623", "CommentCount": "3", "OwnerUserId": "440558", "LastEditDate": "2013-06-22T18:01:45.513"}});