post_cb({"29118236": {"LastActivityDate": "2015-03-18T09:37:58.477", "CommentCount": "0", "Body": "<p>From the C++ Standard</p>\n<pre><code>void resize(size_type sz, bool c = false);\n</code></pre>\n<p>As for the general class std::vector then the function is overloaded</p>\n<pre><code>void resize(size_type sz);\nvoid resize(size_type sz, const T&amp; c);\n</code></pre>\n<p>and for the first function elements are default inserted.</p>\n<p>I think that for <code>std::vector&lt;bool&gt;</code> the function could be declared like</p>\n<pre><code>void resize(size_type sz, bool c = bool());\n</code></pre>\n", "PostTypeId": "2", "LastEditDate": "2015-03-18T09:37:58.477", "ParentId": "29118101", "Id": "29118236", "OwnerUserId": "2877241", "Score": "3", "CreationDate": "2015-03-18T09:27:00.323", "LastEditorUserId": "2877241"}, "bq_ids": {"n4140": {"so_29118101_29119264_0": {"length": 46, "quality": 0.7301587301587301, "section_id": 6341}}, "n3337": {"so_29118101_29119264_0": {"length": 46, "quality": 0.7301587301587301, "section_id": 6098}}}, "29118255": {"CommentCount": "1", "CreationDate": "2015-03-18T09:27:53.167", "Body": "<blockquote>\n<p id=\"so_29118101_29118255_0\">Is this standard C++ or a Microsoft extension?</p>\n</blockquote>\n<p>Yes, the default argument is standard. C++11 [vector.bool] specifies</p>\n<pre><code>void resize(size_type sz, bool c = false);\n</code></pre>\n<blockquote>\n<p id=\"so_29118101_29118255_1\">I don't think it's true for the unspecialised resize, where any elements introduced as a result of a size increase are not initialised.</p>\n</blockquote>\n<p>Yes it is; although since C++11 that's achieved by two overloads, rather than a default argument, so that if you don't specify a value they are value-initialised rather than copied from a value-initialised temporary.</p>\n", "PostTypeId": "2", "ParentId": "29118101", "Id": "29118255", "LastActivityDate": "2015-03-18T09:27:53.167", "Score": "5", "OwnerUserId": "204847"}, "29118101": {"CreationDate": "2015-03-18T09:21:08.957", "ViewCount": "80", "Id": "29118101", "AcceptedAnswerId": "29119264", "Score": "0", "Title": "Is the final default argument of std::vector<bool>::resize standard?", "LastEditorUserId": "822669", "CommentCount": "2", "Body": "<p>My compiler (MSVC2012) has a default of <code>false</code> for the final argument of</p>\n<p><code>std::vector&lt;bool&gt;::resize(std::vector&lt;bool&gt;::size_type, bool)</code></p>\n<p>Is this standard C++ or a Microsoft extension?</p>\n<p>I don't think it's true for the unspecialised <code>resize</code>, where any elements introduced as a result of a size increase are <em>not</em> initialised.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/container/vector_bool\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector_bool</a> doesn't seem to make it clear.</p>\n", "Tags": "<c++><visual-c++><vector>", "LastEditDate": "2015-03-18T09:32:26.713", "LastActivityDate": "2015-03-18T10:20:59.530", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "3415258"}, "29119264": {"LastActivityDate": "2015-03-18T10:20:59.530", "CommentCount": "0", "Body": "<p>17.6.5.5  [member.functions] says:</p>\n<blockquote>\n<p id=\"so_29118101_29119264_0\">An implementation may declare additional non-virtual member function signatures within a class:<br>\n  \u2014 by adding arguments with default values to a member function signature;187 <em>[ Note:</em> An implementation may not add arguments with default values to virtual, global, or non-member functions. \u2014 <em>end note ]</em><br>\n  \u2014 by replacing a member function signature with default values by two or more member function signatures with equivalent behavior; and<br>\n  \u2014 by adding a member function signature for a member function name.<br>\n  A call to a member function signature described in the C ++ standard library behaves as if the implementation declares no additional member function signatures.</br></br></br></br></p>\n</blockquote>\n<p>This allows implementations to add/remove default arguments, so it is perfectly conforming to replace these two signatures:</p>\n<pre><code>void resize(size_type);\nvoid resize(size_type, bool);\n</code></pre>\n<p>with a single function with a default argument:</p>\n<pre><code>void resize(size_type, bool = false);\n</code></pre>\n<p>For the non-specialized <code>vector&lt;T&gt;::resize()</code> the C++11 standard changed from one function (with a default argument) to two overloads, so that calling the 1-argument form no longer requires the type to be CopyConstructible. Implementations cannot use a default argument, because that would violate the last line quoted above, because the behaviour would be different.  That is irrelevant for <code>vector&lt;bool&gt;</code> because we always know that <code>bool</code> is CopyConstructible, so implementations can choose whether to define one <code>vector&lt;bool&gt;::resize</code> member function or two.</p>\n", "PostTypeId": "2", "LastEditDate": "2015-03-18T10:20:59.530", "ParentId": "29118101", "Id": "29119264", "OwnerUserId": "981959", "Score": "1", "CreationDate": "2015-03-18T10:14:10.163", "LastEditorUserId": "981959"}});