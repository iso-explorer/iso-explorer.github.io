post_cb({"bq_ids": {"n4140": {"so_38864967_38865125_4": {"length": 5, "quality": 1.0, "section_id": 458}, "so_38864967_38865125_6": {"length": 6, "quality": 1.0, "section_id": 458}, "so_38864967_38865125_3": {"length": 12, "quality": 1.0, "section_id": 458}, "so_38864967_38865125_5": {"length": 6, "quality": 1.0, "section_id": 458}, "so_38864967_38865125_8": {"length": 5, "quality": 0.8333333333333334, "section_id": 456}}, "n3337": {"so_38864967_38865125_3": {"length": 12, "quality": 1.0, "section_id": 449}, "so_38864967_38865125_8": {"length": 6, "quality": 1.0, "section_id": 449}, "so_38864967_38865125_4": {"length": 5, "quality": 1.0, "section_id": 449}, "so_38864967_38865125_7": {"length": 4, "quality": 1.0, "section_id": 449}, "so_38864967_38865125_5": {"length": 6, "quality": 1.0, "section_id": 449}, "so_38864967_38865125_6": {"length": 6, "quality": 1.0, "section_id": 449}}, "n4659": {"so_38864967_38865125_4": {"length": 5, "quality": 1.0, "section_id": 481}, "so_38864967_38865125_3": {"length": 12, "quality": 1.0, "section_id": 481}, "so_38864967_38865125_8": {"length": 5, "quality": 0.8333333333333334, "section_id": 479}, "so_38864967_38865125_5": {"length": 6, "quality": 1.0, "section_id": 481}, "so_38864967_38865125_6": {"length": 6, "quality": 1.0, "section_id": 481}}}, "38865125": {"Id": "38865125", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38864967_38865125_0\">Where does it say that the default constructor causes the creation of the move constructor?</p>\n</blockquote>\n<p>There is no relationship between the creation of the move constructor and the existence, or lack thereof, of the default constructor.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_38864967_38865125_1\"><strong>12.8 Copying and moving class objects</strong></p>\n<p id=\"so_38864967_38865125_2\">...</p>\n<p id=\"so_38864967_38865125_3\">9 If the definition of a class X does not explicitly declare a move constructor, one will be implicitly declared\n  as defaulted if and only if</p>\n<p id=\"so_38864967_38865125_4\">\u2014 X does not have a user-declared copy constructor,</p>\n<p id=\"so_38864967_38865125_5\">\u2014 X does not have a user-declared copy assignment operator,</p>\n<p id=\"so_38864967_38865125_6\">\u2014 X does not have a user-declared move assignment operator,</p>\n<p id=\"so_38864967_38865125_7\">\u2014 X does not have a user-declared destructor, and</p>\n<p id=\"so_38864967_38865125_8\">\u2014 the move constructor would not be implicitly defined as deleted.</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-08-10T05:57:58.347", "Score": "0", "CreationDate": "2016-08-10T05:45:26.300", "ParentId": "38864967", "CommentCount": "0", "OwnerUserId": "434551", "LastEditDate": "2016-08-10T05:57:58.347"}, "38864967": {"ViewCount": "107", "Body": "<p>Looking at <a href=\"https://stackoverflow.com/a/4944131/3667472\">this question</a> it mentions <strong><em>C++11 and later only</em></strong>:</p>\n<blockquote>\n<p id=\"so_38864967_38864967_0\">The move constructor is auto-generated if there is no user-declared copy constructor, copy assignment operator or destructor, and if the generated move constructor is valid (e.g. if it wouldn't need to assign constant members) (\u00a712.8/10).</p>\n</blockquote>\n<p>So if I have the following code:</p>\n<pre><code>class Y\n{\npublic:\n    Y(const Y&amp;) {}\n};\n\nstruct hasY {\n    hasY() = default;\n    hasY(hasY&amp;&amp;) = default;\n    Y mem; \n};\nhasY hy, hy2 = std::move(hy); //this line fails as expected as Y has a user-defined copy constructor.\n</code></pre>\n<p>Now if I add the default constructor to Y:</p>\n<pre><code>Y() {}\n</code></pre>\n<p>The error goes away.<br>\nWhere does it say that the default constructor causes the creation of the move constructor?</br></p>\n<p>(using VS 2015 update 2)</p>\n", "AcceptedAnswerId": "38865144", "Title": "c++ move constructor generated with default constructor", "CreationDate": "2016-08-10T05:33:29.113", "Id": "38864967", "CommentCount": "3", "LastEditDate": "2017-05-23T10:29:14.723", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-08-10T06:25:48.147", "Score": "1", "OwnerUserId": "3667472", "Tags": "<c++><c++11><constructor>", "AnswerCount": "3"}, "38865132": {"Id": "38865132", "PostTypeId": "2", "Body": "<pre><code>class Y\n{\npublic:\n    Y(const Y&amp;) {}\n};\n</code></pre>\n<p>This class has no default constructor, so</p>\n<pre><code>struct hasY {\n    hasY() = default;\n    hasY(hasY&amp;&amp;) = default;\n    Y mem;  // &lt;&lt; requires default ctor\n};\n</code></pre>\n<p>the error you were getting had nothing to do with move constructors:</p>\n<pre><code>prog.cpp: In function 'int main()':\nprog.cpp:13:7: error: use of deleted function 'hasY::hasY()'\n  hasY hy;\n   ^\nprog.cpp:8:5: note: 'hasY::hasY()' is implicitly deleted because the default definition would be ill-formed:\n     hasY() = default;\n</code></pre>\n<p><a href=\"http://ideone.com/u46GWS\" rel=\"nofollow\">http://ideone.com/u46GWS</a></p>\n", "LastActivityDate": "2016-08-10T05:45:48.980", "CommentCount": "0", "CreationDate": "2016-08-10T05:45:48.980", "ParentId": "38864967", "Score": "3", "OwnerUserId": "257645"}, "38865144": {"Id": "38865144", "PostTypeId": "2", "Body": "<p>It is nothing related to the move constructor It is about the default constructor. Try this:</p>\n<pre><code>class Y\n{\npublic:\n    Y(const Y&amp;) {}\n};\n\nstruct hasY {\n    hasY() = default;\n    hasY(hasY&amp;&amp;) = default;\n    Y mem; \n};\nhasY hy; // This will cause an error because there is no default constructor\n</code></pre>\n<p>Now if you add the default constructor: <code>Y(){}</code>, the error will go away.</p>\n<hr>\n<p>As @M.M commented, The copy constructor will be called in a such case.</p>\n<p>You may try this code:</p>\n<pre><code>class Y{\npublic:\n    Y(){std::cout &lt;&lt; \"Default constructor\\n\";}\n    Y(const Y&amp;) {std::cout &lt;&lt; \"Copy constructor\\n\";}\n};\n\nstruct hasY {\n    hasY() = default;\n    hasY(hasY&amp;&amp;) = default;\n    Y mem; \n};\n\nint main(){\n    hasY hy;\n    hasY h=std::move(hy);\n}\n</code></pre>\n<p>It will print:</p>\n<blockquote>\n<p id=\"so_38864967_38865144_0\">Default constructor </p>\n<p id=\"so_38864967_38865144_1\">Copy constructor</p>\n</blockquote>\n<p>If you want to make the class not moveable you should delete the move constructor by yourself <code>Y(Y&amp;&amp;)=delete;</code></p>\n</hr>", "LastEditorUserId": "4523099", "LastActivityDate": "2016-08-10T05:56:40.627", "Score": "0", "CreationDate": "2016-08-10T05:46:24.970", "ParentId": "38864967", "CommentCount": "4", "OwnerUserId": "4523099", "LastEditDate": "2016-08-10T05:56:40.627"}});