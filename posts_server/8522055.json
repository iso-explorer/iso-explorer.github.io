post_cb({"8522055": {"CommentCount": "4", "AcceptedAnswerId": "8522271", "PostTypeId": "1", "ClosedDate": "2011-12-15T18:23:38.127", "LastEditorUserId": "-1", "CreationDate": "2011-12-15T14:59:57.163", "LastActivityDate": "2012-02-10T15:39:48.757", "LastEditDate": "2017-05-23T10:28:47.277", "ViewCount": "1190", "FavoriteCount": "9", "Title": "Why destructor is called when going backward via goto", "Id": "8522055", "Score": "28", "Body": "<blockquote>\n<p id=\"so_8522055_8522055_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/7334952/will-using-goto-leak-variables\">Will using <code>goto</code> leak variables?</a> </br></p>\n</blockquote>\n<p>In the following example, when <code>goto</code> is called to go \"backwards\", the destructor of <code>A</code> is called. Why is it like that? Object <code>a</code> is not leaving its scope, is it? Does the standard say anything about this behavior regarding <code>goto</code>?</p>\n<pre><code>void f()\n{\nstart:\n    A a;\n    goto start;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "419391", "AnswerCount": "4"}, "8522271": {"ParentId": "8522055", "PostTypeId": "2", "CommentCount": "2", "Body": "<h3>6.6  Jump statements  [stmt.jump]</h3>\n<p>Paragraph 2:</p>\n<blockquote>\n<p id=\"so_8522055_8522271_0\">On exit from a scope (however accomplished), objects with automatic storage duration (3.7.3) that have been constructed in that scope are destroyed in the reverse order of their construction. [ Note: For temporaries, see 12.2. \u2014end note] Transfer out of a loop, out of a block, <strong>or back past an initialized variable with automatic storage duration involves the destruction</strong> of objects with automatic storage duration that are in scope at the point transferred from but not at the point transferred to. (See 6.7 for transfers into blocks). [Note: However, the program can be terminated (by calling std::exit() or std::abort() (18.5), for example) without destroying class objects with automatic storage duration. \u2014 end note ]</p>\n</blockquote>\n<p>I think the important part is:</p>\n<blockquote>\n<p id=\"so_8522055_8522271_1\"><strong>or back past an initialized variable with automatic storage duration involves the destruction</strong></p>\n</blockquote>\n", "OwnerUserId": "14065", "LastEditorUserId": "14065", "LastEditDate": "2012-02-10T15:39:48.757", "Id": "8522271", "Score": "24", "CreationDate": "2011-12-15T15:14:06.060", "LastActivityDate": "2012-02-10T15:39:48.757"}, "8522198": {"ParentId": "8522055", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Here is a relevant quote from the standard. It even includes an example that is almost identical to yours:</p>\n<blockquote>\n<p id=\"so_8522055_8522198_0\">C++11 6.7 Declaration statement [stmt.dcl]</p>\n<p id=\"so_8522055_8522198_1\">2 <strong>Variables with automatic storage duration (3.7.3) are initialized each time their declaration-statement is\n  executed. Variables with automatic storage duration declared in the block are destroyed on exit from the\n  block (6.6).</strong></p>\n<p id=\"so_8522055_8522198_2\">3 It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A\n  program that jumps from a point where a variable with automatic storage duration is not in scope to a\n  point where it is in scope is ill-formed unless the variable has scalar type, class type with a trivial default\n  constructor and a trivial destructor, a cv-qualified version of one of these types, or an array of one of the\n  preceding types and is declared without an initializer (8.5). [ Example:</p>\n</blockquote>\n<pre><code>void f() {\n// ...\ngoto lx; // ill-formed: jump into scope of a\n// ...\nly:\nX a = 1;\n// ...\nlx:\ngoto ly; // OK, jump implies destructor\n// call for a followed by construction\n// again immediately following label ly\n}\n</code></pre>\n<blockquote>\n<p id=\"so_8522055_8522198_3\">\u2014end example ]</p>\n</blockquote>\n<p>As explained in the example, the <code>goto</code> implies destruction. The declaration-statement (<code>A a;</code> in your code) means the constructor is re-executed after each jump.</p>\n", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2011-12-15T15:29:34.727", "Id": "8522198", "Score": "12", "CreationDate": "2011-12-15T15:08:52.887", "LastActivityDate": "2011-12-15T15:29:34.727"}, "8522133": {"ParentId": "8522055", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The lifetime of object <code>a</code> starts from its declaration, and extends to the end of the block containing it.</p>\n<p>This means that, in jumping back to before the declaration, you jump to a stack frame situations where the local didn't exist, so it must be destructed</p>\n<ol>\n<li><blockquote>\n<p id=\"so_8522055_8522133_0\">The <code>point of declaration</code> for a name is immediately after its complete declarator (Clause 8) and before its initializer (if any) , [...] (\u00a7 3.3.2)</p>\n</blockquote></li>\n<li><blockquote>\n<p id=\"so_8522055_8522133_1\">A name declared in a block (6.3) is local to that block; it has block scope. Its potential scope begins at its\n  point of declaration (3.3.2) and ends at the end of its block. A variable declared at block scope is a local\n  variable. (\u00a7 3.3.3)</p>\n</blockquote></li>\n</ol>\n", "OwnerUserId": "85371", "LastEditorUserId": "85371", "LastEditDate": "2011-12-15T15:08:32.290", "Id": "8522133", "Score": "14", "CreationDate": "2011-12-15T15:05:23.590", "LastActivityDate": "2011-12-15T15:08:32.290"}, "bq_ids": {"n4140": {"so_8522055_8522133_0": {"section_id": 7049, "quality": 0.7857142857142857, "length": 11}, "so_8522055_8522198_2": {"section_id": 3918, "quality": 0.9523809523809523, "length": 40}, "so_8522055_8522271_0": {"section_id": 3909, "quality": 0.8571428571428571, "length": 60}, "so_8522055_8522271_1": {"section_id": 3909, "quality": 1.0, "length": 9}, "so_8522055_8522198_1": {"section_id": 3917, "quality": 0.95, "length": 19}, "so_8522055_8522133_1": {"section_id": 7061, "quality": 0.8461538461538461, "length": 22}}, "n3337": {"so_8522055_8522133_0": {"section_id": 6794, "quality": 0.7857142857142857, "length": 11}, "so_8522055_8522198_2": {"section_id": 3778, "quality": 0.9523809523809523, "length": 40}, "so_8522055_8522271_0": {"section_id": 3769, "quality": 0.8571428571428571, "length": 60}, "so_8522055_8522271_1": {"section_id": 3769, "quality": 1.0, "length": 9}, "so_8522055_8522198_1": {"section_id": 3777, "quality": 0.95, "length": 19}, "so_8522055_8522133_1": {"section_id": 6805, "quality": 0.8461538461538461, "length": 22}}, "n4659": {"so_8522055_8522133_0": {"section_id": 8546, "quality": 0.7857142857142857, "length": 11}, "so_8522055_8522198_2": {"section_id": 4804, "quality": 0.9761904761904762, "length": 41}, "so_8522055_8522271_0": {"section_id": 4795, "quality": 0.8571428571428571, "length": 60}, "so_8522055_8522271_1": {"section_id": 4795, "quality": 1.0, "length": 9}, "so_8522055_8522198_1": {"section_id": 4803, "quality": 0.95, "length": 19}, "so_8522055_8522133_1": {"section_id": 8558, "quality": 0.8461538461538461, "length": 22}}}, "8523036": {"ParentId": "8522055", "CommentCount": "0", "Body": "<p>Simply put... <code>start:</code> is a label and declares a[nother] scope</p>\n<p>Assuming <code>start</code> is as <code>&lt;0x00003000&gt;</code>, A a will be at <code>&lt;0x00003000&gt; + some_offset</code> say <code>&lt;0x00003004&gt;</code>.</p>\n<p><code>goto start</code> will ask the PC (Program Counter) to go to the address of start which occurs before the declaration of A -- outside it's scope -- hence \"<em>destroy</em> <code>a</code>\" calls the destructor.</p>\n", "OwnerUserId": "393021", "PostTypeId": "2", "Id": "8523036", "Score": "1", "CreationDate": "2011-12-15T16:07:55.247", "LastActivityDate": "2011-12-15T16:07:55.247"}});