post_cb({"45146678": {"ParentId": "45146025", "CommentCount": "1", "Body": "<p>The rule in <a href=\"http://eel.is/c++draft/class.access.base#5\" rel=\"nofollow noreferrer\">[class.access.base]</a> is:</p>\n<blockquote>\n<p id=\"so_45146025_45146678_0\">A member <code>m</code> is accessible at the point <em>R</em> when named in class <code>N</code> if [...]  </p>\n<ul>\n<li><code>m</code> as a member of <code>N</code> is protected, and <em>R</em> occurs in a member or friend of class <code>N</code>, or in a member of a class <code>P</code> derived from <code>N</code>, where <code>m</code> as a member of <code>P</code> is <code>public</code>, <code>private</code>, or <code>protected</code></li>\n</ul>\n</blockquote>\n<p>There's a lot of letters in there. But there are basically two conditions:</p>\n<ol>\n<li><code>R</code> is in a member or friend of the class. This handles the <code>d.prot</code> example - we are in a member of <code>Derived</code> while accessing a protected member of <code>Derived</code>.</li>\n<li><code>R</code> is in a member of a derived class and the member being accessed <em>is a member of</em> the derived class instance. This handles the <code>b.prot</code> example - we are in a member of a derived class, but <code>prot</code> is not a member of the derived class. </li>\n</ol>\n<p>In other words, <code>Derived</code> can access <code>Base</code>'s protected members - but only in the case that it is accessing its own subobject's protected members. It cannot access other <code>Base</code> object's protected members. This makes sense when you consider that this other <code>Base</code> could easily be <code>SomeOtherDerived</code>, in which case that's just another unrelated object to us that we have no special access privileges to. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "45146678", "Score": "2", "CreationDate": "2017-07-17T14:17:25.757", "LastActivityDate": "2017-07-17T14:17:25.757"}, "45146025": {"CommentCount": "1", "ViewCount": "58", "CreationDate": "2017-07-17T13:47:52.803", "LastActivityDate": "2017-07-17T14:17:25.757", "Title": "Cannot access protected member of another instance from derived type's scope", "AcceptedAnswerId": "45146678", "PostTypeId": "1", "Id": "45146025", "Score": "2", "Body": "<p>In <a href=\"https://stackoverflow.com/a/17717142/5470596\">this answer</a> to the question \"<em>Why can't my object access protected members of another object defined in common base class?</em>\", one can read:</p>\n<blockquote>\n<p id=\"so_45146025_45146025_0\">You can only access protected members from your own base class instance.</p>\n</blockquote>\n<p>Either I don't get it correctly or the <a href=\"http://coliru.stacked-crooked.com/a/e0550246b42210ca\" rel=\"nofollow noreferrer\">following MCVE (live on coliru)</a> proves it wrong:</p>\n<pre><code>struct Base           { void f(); protected: int prot; };\nstruct Derived : Base { void g(); private:   int priv; };\n\nvoid Base::f()\n{\n    Base b;\n    b.prot = prot;\n    (void) b;\n}\n\nvoid Derived::g()\n{\n    {\n        Derived d;\n        (void) d.priv;\n    }\n\n    {\n        Derived&amp; d = *this;\n        (void) d.priv;\n    }\n\n    {\n        Derived d;\n        (void) d.prot; // &lt;-- access to other instance's protected member\n    }\n\n    {\n        Derived&amp; d = *this;\n        (void) d.prot;\n    }\n\n    // ---\n\n    {\n        Base b;\n        (void) b.prot; // error: 'int Base::prot' is protected within this context\n    }\n\n    {\n        Base&amp; b = *this;\n        (void) b.prot; // error: 'int Base::prot' is protected within this context\n    }\n}\n</code></pre>\n<p>In the light of the two errors I get to wonder: why can I access to another <code>Derived</code> instance's protected member from the scope of <code>Derived</code> but cannot access to another <code>Base</code> instance's protected member from the same scope regardless of the fact that <code>Derived</code> devires from <code>Base</code>? Tl; dr: what makes <code>protected</code> more \"private\" than <code>private</code> in this case?</p>\n<p><em>Notes</em>:</p>\n<ul>\n<li>please don't close this question as a duplicate of the linked question;</li>\n<li>better title suggestion are welcome.</li>\n</ul>\n", "Tags": "<c++><language-lawyer><encapsulation><protected>", "OwnerUserId": "5470596", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45146025_45146678_0": {"section_id": 6682, "quality": 1.0, "length": 6}}, "n3337": {"so_45146025_45146678_0": {"section_id": 6437, "quality": 1.0, "length": 6}}, "n4659": {"so_45146025_45146678_0": {"section_id": 8157, "quality": 1.0, "length": 6}}}});