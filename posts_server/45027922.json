post_cb({"45028139": {"ParentId": "45027922", "CommentCount": "6", "Body": "<p>In your case the variable is used in discarded statements only. However, even if we ignore that fact, C++ language specification still explicitly states that <em>no diagnostic is required</em> for missing definitions</p>\n<blockquote>\n<p id=\"so_45027922_45028139_0\"><strong>3.2 One-definition rule</strong></p>\n<p id=\"so_45027922_45028139_1\"><strong>4</strong> Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program outside of a discarded statement (6.4.1); <strong>no diagnostic required</strong>.</p>\n</blockquote>\n<p>The language specification understands that an optimizing compiler might be smart enough to eliminate all odr-uses of a variable. In that case it would be excessive and unnecessary to require the implementation to detect and report the potential ODR violations.</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "45028139", "Score": "40", "CreationDate": "2017-07-11T07:32:03.907", "LastActivityDate": "2017-07-11T07:32:03.907"}, "45027922": {"CommentCount": "0", "AcceptedAnswerId": "45027985", "PostTypeId": "1", "LastEditorUserId": "6935629", "CreationDate": "2017-07-11T07:21:18.400", "LastActivityDate": "2017-09-05T07:15:27.337", "LastEditDate": "2017-09-05T07:15:27.337", "ViewCount": "3212", "FavoriteCount": "5", "Title": "Why doesn't this \"undefined extern variable\" result in a linker error in C++17?", "Id": "45027922", "Score": "37", "Body": "<p>I have compiled and ran the following program in a C++17 compiler (Coliru). In the program, I <strong>declared</strong> an <code>extern</code> variable, but <strong>did not define</strong> it. However, the compiler doesn't give a <strong>linker error</strong>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nextern int i; // Only declaration\n\nint func() \n{\n    if constexpr (true)\n        return 0;\n    else if (i)\n        return i;\n    else\n        return -1;\n}\n\nint main() \n{\n    int ret = func();\n    std::cout&lt;&lt;\"Ret : \"&lt;&lt;ret&lt;&lt;std::endl;\n}\n</code></pre>\n<p><strong>Why doesn't the compiler give a linker error?</strong></p>\n", "Tags": "<c++><linker-errors><extern><c++1z><if-constexpr>", "OwnerUserId": "6935629", "AnswerCount": "4"}, "45028011": {"ParentId": "45027922", "CommentCount": "0", "Body": "<p>Because the compiler produces compiler errors, the <strong>linker</strong> would yield linker errors ...</p>\n<p>No, seriously:</p>\n<pre><code>if constexpr (true)\n</code></pre>\n<p>is always true, so the compiler ignores the rest of the if-clause because it is never reached. So <code>i</code> is never used actually.</p>\n", "OwnerUserId": "2767436", "PostTypeId": "2", "Id": "45028011", "Score": "9", "CreationDate": "2017-07-11T07:25:47.873", "LastActivityDate": "2017-07-11T07:25:47.873"}, "45876652": {"ParentId": "45027922", "CommentCount": "0", "Body": "<p>This has alrady been answered, but if you are interested, <a href=\"http://en.cppreference.com/w/cpp/language/if#Constexpr_If\" rel=\"nofollow noreferrer\">cppreference.com</a> has exactly this example for <em>constexpr if</em>:</p>\n<blockquote>\n<h3>Constexpr If</h3>\n<p id=\"so_45027922_45876652_0\">The statement that begins with <code>if constexpr</code> is known as the <em>constexpr if statement</em>.</p>\n<p id=\"so_45027922_45876652_1\">In a constexpr if statement, the value of <em>condition</em> must be a contextually converted <a href=\"http://en.cppreference.com/w/cpp/language/constant_expression\" rel=\"nofollow noreferrer\">constant expression</a> of type bool. If the value is true, then <em>statement-false</em> is discarded (if present), otherwise, <em>statement-true</em> is discarded.<br>\n  [...]<br>\n  The discarded statement can <a href=\"http://en.cppreference.com/w/cpp/language/definition#One_Definition_Rule\" rel=\"nofollow noreferrer\">odr-use</a> a variable that is not defined:</br></br></p>\n</blockquote>\n<pre><code>extern int x; // no definition of x required\nint f() {\nif constexpr (true)\n    return 0;\nelse if (x)\n    return x;\nelse\n    return -x;\n}\n</code></pre>\n", "OwnerUserId": "3982001", "PostTypeId": "2", "Id": "45876652", "Score": "1", "CreationDate": "2017-08-25T07:47:08.167", "LastActivityDate": "2017-08-25T07:47:08.167"}, "45027985": {"ParentId": "45027922", "CommentCount": "5", "Body": "<p>Because the variable isn't odr-used. You have a <code>constexpr if</code> there that always discards the branch that could use it.</p>\n<p>One of the points of <code>constexpr if</code> is that the discarded branch need not even compile, only be well-formed. That's how we can place calls to non-existing member functions in a discarded branch.</p>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "45027985", "Score": "57", "CreationDate": "2017-07-11T07:24:48.747", "LastActivityDate": "2017-07-11T07:24:48.747"}, "bq_ids": {"n4140": {"so_45027922_45028139_1": {"section_id": 7041, "quality": 0.75, "length": 12}}, "n3337": {"so_45027922_45028139_1": {"section_id": 6786, "quality": 0.75, "length": 12}}, "n4659": {"so_45027922_45876652_1": {"section_id": 4773, "quality": 0.5185185185185185, "length": 14}, "so_45027922_45876652_0": {"section_id": 4773, "quality": 0.5714285714285714, "length": 4}, "so_45027922_45028139_1": {"section_id": 8538, "quality": 0.9375, "length": 15}}}});