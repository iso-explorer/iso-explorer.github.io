post_cb({"23834845": {"CommentCount": "11", "AcceptedAnswerId": "23835015", "CreationDate": "2014-05-23T17:06:07.080", "LastActivityDate": "2014-05-23T17:31:23.623", "PostTypeId": "1", "ViewCount": "1206", "FavoriteCount": "1", "Title": "C++ lambda friendship", "Id": "23834845", "Score": "27", "Body": "<p>When a lambda function is declared inside a function <code>F</code> which is a friend of class <code>C</code>, does the lambda function have access to <code>C</code> private members?  Specifically, does the standard allow it?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "206328", "AnswerCount": "2"}, "23835015": {"ParentId": "23834845", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>C++11 \u00a7[expr.prim.lambda] 5.1.2/3:</p>\n<blockquote>\n<p id=\"so_23834845_23835015_0\">The type of the <em>lambda-expression</em> (which is also the type of the closure object) is a unique, unnamed non-union class type \u2014 called the closure type \u2014 whose properties are described below. This class type is not an aggregate (8.5.1). The closure type is declared in the smallest block scope, class scope, or namespace scope that contains the corresponding <em>lambda-expression</em>. ...</p>\n</blockquote>\n<p>Since the closure type is declared within the friend function, it will have the same access per \u00a7[class.local] 9.8/1:</p>\n<blockquote>\n<p id=\"so_23834845_23835015_1\">A class can be declared within a function definition; such a class is called a <em>local</em> class. The name of a local class is local to its enclosing scope. The local class is in the scope of the enclosing scope, and has the same access to names outside the function as does the enclosing function. ...</p>\n</blockquote>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2014-05-23T17:31:23.623", "Id": "23835015", "Score": "16", "CreationDate": "2014-05-23T17:17:45.843", "LastActivityDate": "2014-05-23T17:31:23.623"}, "23835017": {"ParentId": "23834845", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>A nested class automatically has access to all the members its \"owner\" has access to. You don't need lambdas to see this:</p>\n<pre><code>class A {\n  friend struct B;\n  friend void g();\n  static void f() { }\n};\n\nstruct B {\n  struct C {\n    static void f() { A::f(); }\n  };\n  static void f() { C::f(); }\n};\n\nvoid g() {\n  struct D {\n    static void f() { A::f(); }\n  };\n  D::f();\n}\n</code></pre>\n<p>Despite not being listed explicitly as friends, <code>C::f</code> and <code>D::f</code> can call the private <code>A::f</code> without any complaints from the compiler.</p>\n<p>Lambdas are implemented using compiler-generated local classes (that's not just an implementation detail, that's what the standard requires), so the same rules as for other local classes apply.</p>\n<p>The rule that local classes can access the same members is spelled out in the standard in  9.8:</p>\n<blockquote>\n<p id=\"so_23834845_23835017_0\">The local class is in the scope of the enclosing scope, and has the same access to names outside the function as does the enclosing function.</p>\n</blockquote>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2014-05-23T17:28:19.410", "Id": "23835017", "Score": "12", "CreationDate": "2014-05-23T17:17:50.567", "LastActivityDate": "2014-05-23T17:28:19.410"}, "bq_ids": {"n4140": {"so_23834845_23835015_1": {"section_id": 5929, "quality": 0.9393939393939394, "length": 31}, "so_23834845_23835015_0": {"section_id": 5962, "quality": 0.868421052631579, "length": 33}, "so_23834845_23835017_0": {"section_id": 5929, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_23834845_23835015_1": {"section_id": 5701, "quality": 0.9393939393939394, "length": 31}, "so_23834845_23835015_0": {"section_id": 5731, "quality": 0.868421052631579, "length": 33}, "so_23834845_23835017_0": {"section_id": 5701, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_23834845_23835015_1": {"section_id": 7414, "quality": 0.9090909090909091, "length": 30}, "so_23834845_23835017_0": {"section_id": 7414, "quality": 0.9285714285714286, "length": 13}}}});