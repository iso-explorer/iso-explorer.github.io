post_cb({"25528459": {"ParentId": "25528245", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-08-27T13:27:29.327", "Score": "8", "LastEditorUserId": "1708801", "LastEditDate": "2014-08-30T00:45:57.413", "Id": "25528459", "OwnerUserId": "1708801", "Body": "<p><code>k</code> has static storage duration and static objects are zero initialized, we can see this by going to the <a href=\"https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>3.6.2</code> <em>Initialization of non-local variables</em> paragraph <em>2</em>:</p>\n<blockquote>\n<p id=\"so_25528245_25528459_0\">Variables with static storage duration (3.7.1) or thread storage\n  duration (3.7.2) shall be zero-initialized (8.5) before any other\n  initialization takes place. [...]</p>\n</blockquote>\n<p>for scalar types that means initialization to zero, which is covered section <code>8.5</code> paragraph <em>6</em> which says:</p>\n<blockquote>\n<p id=\"so_25528245_25528459_1\">To zero-initialize an object or reference of type T means:</p>\n</blockquote>\n<p>and includes the following bullet:</p>\n<blockquote>\n<p id=\"so_25528245_25528459_2\">if T is a scalar type (3.9), the object is initialized to the value\n  obtained by converting the integer literal 0 (zero) to T;105</p>\n</blockquote>\n<p>we know an enum is a scalar type from section <code>3.9</code> <em>Types</em> paragraph <em>9</em> which says:</p>\n<blockquote>\n<p id=\"so_25528245_25528459_3\">Arithmetic types (3.9.1), enumeration types, pointer types, pointer to\n  member types (3.9.2), std::nullptr_- t, and cv-qualified versions of\n  these types (3.9.3) are collectively called scalar types.[...]</p>\n</blockquote>\n<p><code>zero</code> is a valid value since the underlying type can contain its value and section <code>7.2</code> <em>Enumeration declarations</em> paragraph <em>8</em> says that an enumeration can take a value not defined by its enumerators:</p>\n<blockquote>\n<p id=\"so_25528245_25528459_4\">[...]It is possible to define an enumeration that has values not\n  defined by any of its enumerators.[...]</p>\n</blockquote>\n", "LastActivityDate": "2014-08-30T00:45:57.413"}, "25528245": {"CommentCount": "5", "ViewCount": "618", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-08-27T13:17:47.707", "LastActivityDate": "2014-08-30T00:45:57.413", "Title": "What are global strongly-typed enums initialized to by default in C++?", "FavoriteCount": "1", "LastEditDate": "2014-08-28T02:56:57.547", "Id": "25528245", "Score": "7", "Body": "<p>I'm trying to determine the default value to which global strongly-type enums are initialized. The following code of course does not compile.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nenum class A{a=10, b=20};\n\n// Global strongly-typed enum, uninitialized\nA k;\n\nint main() {\n    if(k==A::a)\n        cout&lt;&lt;\"Equal to a\"&lt;&lt;endl;\n    else if(k==A::b)\n        cout&lt;&lt;\"Equal to b\"&lt;&lt;endl;\n    else if(k==0)\n        cout&lt;&lt;\"Equal to zero\"&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>\n<p>What is 'k' initialized to?</p>\n", "Tags": "<c++><enums><initialization>", "OwnerUserId": "364651", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25528245_25528459_0": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}, "so_25528245_25528459_4": {"section_id": 5467, "quality": 1.0, "length": 7}, "so_25528245_25528459_3": {"section_id": 7207, "quality": 0.8, "length": 16}, "so_25528245_25528459_1": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_25528245_25528459_2": {"section_id": 3285, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_25528245_25528459_0": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}, "so_25528245_25528459_4": {"section_id": 5253, "quality": 1.0, "length": 7}, "so_25528245_25528459_3": {"section_id": 6951, "quality": 0.75, "length": 15}, "so_25528245_25528459_1": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_25528245_25528459_2": {"section_id": 3155, "quality": 0.5454545454545454, "length": 6}}, "n4659": {"so_25528245_25528459_1": {"section_id": 653, "quality": 0.8, "length": 4}, "so_25528245_25528459_4": {"section_id": 6901, "quality": 1.0, "length": 7}, "so_25528245_25528459_3": {"section_id": 8716, "quality": 0.8, "length": 16}, "so_25528245_25528459_0": {"section_id": 4051, "quality": 0.6, "length": 9}, "so_25528245_25528459_2": {"section_id": 4047, "quality": 0.9090909090909091, "length": 10}}}, "25528394": {"ParentId": "25528245", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-08-27T13:24:57.453", "Score": "2", "LastEditorUserId": "2877241", "LastEditDate": "2014-08-27T13:30:57.320", "Id": "25528394", "OwnerUserId": "2877241", "Body": "<p>It is zero initialized. Take into account that the underlaying type of this enumeration is <code>int</code> (by default) and 0 is a valid enumerator though it is not explicitly used in any enumerator definition of the enumeration..</p>\n<p>Only you have to write</p>\n<pre><code>else if( k == static_cast&lt;A&gt;( 0 ) )\n    cout&lt;&lt;\"Equal to zero\"&lt;&lt;endl;\n</code></pre>\n<p>If you would use C# then zero can be implicitly converted to an enumeration of any type.:)</p>\n", "LastActivityDate": "2014-08-27T13:30:57.320"}});