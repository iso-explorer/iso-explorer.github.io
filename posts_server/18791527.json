post_cb({"bq_ids": {"n4140": {"so_18791527_18791660_2": {"length": 27, "quality": 1.0, "section_id": 6049}, "so_18791527_18791615_0": {"length": 37, "quality": 0.925, "section_id": 6049}, "so_18791527_18791660_1": {"length": 20, "quality": 1.0, "section_id": 6049}, "so_18791527_18791660_3": {"length": 36, "quality": 0.9, "section_id": 6049}, "so_18791527_18791660_0": {"length": 36, "quality": 0.9, "section_id": 6049}, "so_18791527_18791660_4": {"length": 20, "quality": 1.0, "section_id": 6049}, "so_18791527_18791660_5": {"length": 27, "quality": 1.0, "section_id": 6049}}, "n3337": {"so_18791527_18791660_2": {"length": 27, "quality": 1.0, "section_id": 5817}, "so_18791527_18791615_0": {"length": 37, "quality": 0.925, "section_id": 5817}, "so_18791527_18791660_1": {"length": 20, "quality": 1.0, "section_id": 5817}, "so_18791527_18791660_3": {"length": 36, "quality": 0.9, "section_id": 5817}, "so_18791527_18791660_5": {"length": 27, "quality": 1.0, "section_id": 5817}, "so_18791527_18791660_4": {"length": 20, "quality": 1.0, "section_id": 5817}, "so_18791527_18791660_0": {"length": 36, "quality": 0.9, "section_id": 5817}}, "n4659": {"so_18791527_18791660_2": {"length": 27, "quality": 1.0, "section_id": 7548}, "so_18791527_18791615_0": {"length": 37, "quality": 0.925, "section_id": 7548}, "so_18791527_18791660_1": {"length": 20, "quality": 1.0, "section_id": 7548}, "so_18791527_18791660_3": {"length": 36, "quality": 0.9, "section_id": 7548}, "so_18791527_18791660_5": {"length": 27, "quality": 1.0, "section_id": 7548}, "so_18791527_18791660_4": {"length": 20, "quality": 1.0, "section_id": 7548}, "so_18791527_18791660_0": {"length": 36, "quality": 0.9, "section_id": 7548}}}, "18791527": {"ViewCount": "286", "Body": "<p>When one wants to store pointers to functions with different signatures, one might cast them to <code>void(*)()</code> (or any other function pointer type) then cast them back to original type before call and afaik C++ guarantees this round-trip to work. But what about member function pointers? Are there any guarantees that round-tripping a member function pointer through another member function pointer of different type (possibly to a member function of different class) will not break something?</p>\n", "AcceptedAnswerId": "18791615", "Title": "void(*)() analogue for member function pointer round-trip casting", "CreationDate": "2013-09-13T16:59:02.707", "Id": "18791527", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-09-13T17:12:16.650", "Score": "2", "OwnerUserId": "1554020", "Tags": "<c++><casting><standards-compliance><type-safety><member-function-pointers>", "AnswerCount": "2"}, "18791660": {"Id": "18791660", "PostTypeId": "2", "Body": "<p>I think so with a <code>reinterptret_cast</code>. That's what the standard says (5.2.11/10)</p>\n<blockquote>\n<blockquote>\n<p id=\"so_18791527_18791660_3\">A prvalue of type \u201cpointer to member of X of type T1\u201d can be explicitly converted to a prvalue of a different type \u201cpointer to member of Y of type T2\u201d if T1 and T2 are both function types or both object types.71 The null member pointer value (4.11) is converted to the null member pointer value of the destination type. The result of this conversion is unspecified, except in the following cases:</p>\n<p id=\"so_18791527_18791660_4\">\u2014 converting a prvalue of type \u201cpointer to member function\u201d to a different pointer to member function type and back to its original type yields the original pointer to member value.</p>\n<p id=\"so_18791527_18791660_5\">\u2014 converting a prvalue of type \u201cpointer to data member of X of type T1\u201d to the type \u201cpointer to data member of Y of type T2\u201d (where the alignment requirements of T2 are no stricter than those of T1) and back to its original type yields the original pointer to member value.</p>\n</blockquote>\n</blockquote>\n", "LastActivityDate": "2013-09-13T17:06:56.463", "CommentCount": "0", "CreationDate": "2013-09-13T17:06:56.463", "ParentId": "18791527", "Score": "0", "OwnerUserId": "1137388"}, "18791615": {"Id": "18791615", "PostTypeId": "2", "Body": "<p>Yes, a <code>reinterpret_cast</code> round-trip between pointer-to-member types is guaranteed to be valid, as long as you keep it pointer-to-data-member or pointer-to-member-function in both cases.</p>\n<p>Quoting C++11:</p>\n<p><code>[expr.reinterpret.cast]</code></p>\n<blockquote>\n<p id=\"so_18791527_18791615_0\">10 A prvalue of type \"pointer to member of <code>X</code> of type <code>T1</code>\" can be explicitly converted to a prvalue of a different type \"pointer to member of <code>Y</code> of type <code>T2</code>\" if <code>T1</code> and <code>T2</code> are both function types or both object types. The null member pointer value (4.11) is converted to the null member pointer value of the destination type. The result of this conversion is unspecified, except in the following cases:</p>\n<ul>\n<li>converting a prvalue of type \"pointer to member function\" to a different pointer to member function type and back to its original type yields the original pointer to member value.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2013-09-13T17:12:16.650", "Score": "1", "CreationDate": "2013-09-13T17:04:25.540", "ParentId": "18791527", "CommentCount": "5", "OwnerUserId": "1782465", "LastEditDate": "2013-09-13T17:12:16.650"}});