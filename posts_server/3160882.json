post_cb({"3160882": {"CommentCount": "5", "AcceptedAnswerId": "3160962", "PostTypeId": "1", "LastEditorUserId": "13430", "CreationDate": "2010-07-01T19:05:53.870", "LastActivityDate": "2010-07-01T19:16:05.950", "LastEditDate": "2010-07-01T19:10:18.430", "ViewCount": "471", "FavoriteCount": "1", "Title": "This is illegal right?", "Id": "3160882", "Score": "11", "Body": "<p>For a personal project I have been implementing my own libstdc++. Bit by bit, I've been making some nice progress. Usually, I will use examples from <a href=\"http://www.cplusplus.com/reference/\" rel=\"noreferrer\">http://www.cplusplus.com/reference/</a> for some basic test cases to make sure that I have the obvious functionality working as expected.</p>\n<p>Today I ran into an issue with <code>std::basic_string::replace</code>, specifically with the iterator based versions using the example copied verbatim from the site (<a href=\"http://www.cplusplus.com/reference/string/string/replace/\" rel=\"noreferrer\">http://www.cplusplus.com/reference/string/string/replace/</a>) (<strong>I've added a comment to point out the lines in question</strong>):</p>\n<pre><code>// replacing in a string\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main ()\n{\n  string base=\"this is a test string.\";\n  string str2=\"n example\";\n  string str3=\"sample phrase\";\n  string str4=\"useful.\";\n\n  // function versions used in the same order as described above:\n\n  // Using positions:                 0123456789*123456789*12345\n  string str=base;                // \"this is a test string.\"\n  str.replace(9,5,str2);          // \"this is an example string.\"\n  str.replace(19,6,str3,7,6);     // \"this is an example phrase.\"\n  str.replace(8,10,\"just all\",6); // \"this is just a phrase.\"\n  str.replace(8,6,\"a short\");     // \"this is a short phrase.\"\n  str.replace(22,1,3,'!');        // \"this is a short phrase!!!\"\n\n  // Using iterators:                      0123456789*123456789*\n  string::iterator it = str.begin();   //  ^\n  str.replace(it,str.end()-3,str3);    // \"sample phrase!!!\"\n\n  // *** this next line and most that follow are illegal right? ***\n\n  str.replace(it,it+6,\"replace it\",7); // \"replace phrase!!!\"\n  it+=8;                               //          ^\n  str.replace(it,it+6,\"is cool\");      // \"replace is cool!!!\"\n  str.replace(it+4,str.end()-4,4,'o'); // \"replace is cooool!!!\"\n  it+=3;                               //             ^\n  str.replace(it,str.end(),str4.begin(),str4.end());\n                                       // \"replace is useful.\"\n  cout &lt;&lt; str &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>In my version of replace is implemented in terms of a temporary string which I create then swap with <code>*this</code>. This clearly invalidates any iterators. So am I correct that the example is invalid? because it stores iterators, does a replace and then uses the iterators again?</p>\n<p>My copy of the standard (ISO 14882:2003 - 21.3p5) says:</p>\n<blockquote>\n<p id=\"so_3160882_3160882_0\">References, pointers, and iterators\n  referring to the elements of a\n  basic_string sequence may be\n  invalidated\n      by the following uses of that basic_string object:</p>\n<pre><code>- As an argument to non-member functions swap() (21.3.7.8), \n  operator&gt;&gt;() (21.3.7.9), and getline() (21.3.7.9).\n- As an argument to basic_string::swap().\n- Calling data() and c_str() member functions.\n- Calling non-const member functions, except operator[](), at(),\n  begin(), rbegin(),\n  end(), and rend().\n- Subsequent to any of the above uses except the forms of insert() and\n  erase() which return iterators,\n  the first call to non-const member functions operator[](), at(), begin(),\n  rbegin(), end(), or rend().\n</code></pre>\n</blockquote>\n<p>The entry about non-const member functions seems to cover this. So unless I am missing something, then this code is using invalidated iterators right? Of course this code works just fine with gcc's libstdc++, but we all know that proves nothing as far as standards compliance.</p>\n", "Tags": "<c++><string><iterator>", "OwnerUserId": "13430", "AnswerCount": "1"}, "3160962": {"ParentId": "3160882", "CommentCount": "0", "Body": "<p>This will appear to work if <code>replace</code> operates in-place.  I don't think it's required to be implemented that way though.  So yes, I would say your code is technically illegal.</p>\n", "OwnerUserId": "46821", "PostTypeId": "2", "Id": "3160962", "Score": "2", "CreationDate": "2010-07-01T19:16:05.950", "LastActivityDate": "2010-07-01T19:16:05.950"}, "bq_ids": {"n4140": {"so_3160882_3160882_0": {"section_id": 1567, "quality": 1.0, "length": 13}}, "n3337": {"so_3160882_3160882_0": {"section_id": 1562, "quality": 1.0, "length": 13}}, "n4659": {"so_3160882_3160882_0": {"section_id": 1716, "quality": 1.0, "length": 13}}}});