post_cb({"46208655": {"CommentCount": "7", "ViewCount": "111", "PostTypeId": "1", "LastEditorUserId": "1794803", "CreationDate": "2017-09-14T00:21:54.117", "LastActivityDate": "2017-09-14T00:49:07.583", "Title": "Taking the address of a literal, not a `constexpr`", "AcceptedAnswerId": "46208860", "LastEditDate": "2017-09-14T00:29:17.333", "Id": "46208655", "Score": "3", "Body": "<p>Strictly according to the rules of C++14, at least the ones given by <a href=\"http://en.cppreference.com/w/cpp/language/constant_expression\" rel=\"nofollow noreferrer\">cppreference.com</a>, isn't the line (1) a constant expression?</p>\n<pre><code>constexpr const int* addr(const int&amp; ir) { return &amp;ir; }\nconstexpr const int* tp = addr(5); // (1)\n</code></pre>\n<p>It's true that is not an <em>address constant expression</em>, because <code>&amp;ir</code> isn't the address of a static object (<code>&amp;ir</code> is the address of a temporary in this context, which cannot be known in compilation-time).</p>\n<p>But it is a <em>core constant expression</em> because it doesn't violate any of the back-listed rules of <em>core constant expression</em>, which has no back-listed rules about getting the address of an object.</p>\n", "Tags": "<c++><c++14><memory-address><constexpr>", "OwnerUserId": "1794803", "AnswerCount": "1"}, "46208860": {"ParentId": "46208655", "CommentCount": "1", "Body": "<p>No, <code>addr(5)</code> is not a constant expression, and therefore the posted code is ill-formed.  Yes, you are correct that <code>addr(5)</code> is a core constant expression.</p>\n<p>I can see why you might think from the cppreference page alone that core constant expressions, integral constant expressions, converted constant expressions, literal constant expressions, reference constant expressions, and address constant expressions are all types of constant expression.  But the true definition is given in C++14 [expr.const]/4:</p>\n<blockquote>\n<p id=\"so_46208655_46208860_0\">A <em>constant expression</em> is either a glvalue core constant expression whose value refers to an object with static storage duration or to a function, or a prvalue core constant expression whose value is an object where, for that object and its subobjects:</p>\n<ul>\n<li><p id=\"so_46208655_46208860_1\">each non-static data member of reference type refers to an object with static storage duration or to a function, and</p></li>\n<li><p id=\"so_46208655_46208860_2\">if the object or subobject is of pointer type, it contains the address of an object with static storage duration the address past the end of such an object, the address of a function, or a null pointer value.</p></li>\n</ul>\n</blockquote>\n<p>Being a \"core constant expression\" does not have many direct implications; it's merely a term used to help define \"integral constant expression\", \"converted constant expression of type <code>T</code>\", and \"constant expression\".  And \"constant expression\" actually describes a subset of the expressions described by \"core constant expression\", not a superset.</p>\n<p>For example, and to be complete, the paragraph that makes the example ill-formed ([dcl.constexpr]/9) requires a constant expression, not a core constant expression, as initializer.</p>\n<blockquote>\n<p id=\"so_46208655_46208860_3\">A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>.  Such an object shall have literal type and shall be initialized.  If it is initialized by a constructor call, that call shall be a constant expression.  Otherwise, or if a <code>constexpr</code> specifier is used in a reference declaration, every full-expression that appears in its initializer shall be a constant expression.  [<em>Note:</em> Each implicit conversion used in converting the initializer expressions and each constructor call used for the initialization is part of such a full-expression. - <em>end note</em>]</p>\n</blockquote>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "46208860", "Score": "6", "CreationDate": "2017-09-14T00:49:07.583", "LastActivityDate": "2017-09-14T00:49:07.583"}, "bq_ids": {"n4140": {"so_46208655_46208860_2": {"section_id": 6187, "quality": 1.0, "length": 20}, "so_46208655_46208860_0": {"section_id": 6187, "quality": 0.9615384615384616, "length": 25}, "so_46208655_46208860_1": {"section_id": 6187, "quality": 1.0, "length": 12}, "so_46208655_46208860_3": {"section_id": 5425, "quality": 0.9361702127659575, "length": 44}}, "n3337": {"so_46208655_46208860_2": {"section_id": 5947, "quality": 0.7, "length": 14}, "so_46208655_46208860_0": {"section_id": 5947, "quality": 0.5769230769230769, "length": 15}, "so_46208655_46208860_1": {"section_id": 559, "quality": 0.5833333333333334, "length": 7}, "so_46208655_46208860_3": {"section_id": 5220, "quality": 0.8723404255319149, "length": 41}}, "n4659": {"so_46208655_46208860_2": {"section_id": 7690, "quality": 0.95, "length": 19}, "so_46208655_46208860_0": {"section_id": 7690, "quality": 0.6538461538461539, "length": 17}, "so_46208655_46208860_1": {"section_id": 7690, "quality": 1.0, "length": 12}}}});