post_cb({"46430666": {"Id": "46430666", "PostTypeId": "2", "Body": "<p>It is possible to declare objects on which <em>no initializations</em> are performed. These objects do exist, they have an <em>indeterminate value</em>, and using this value is undefined behavior (there is an exception to this rule for chars). </p>\n<p>Such object can be created by <em>default-intialization</em>.\nThis is stated in the c++ standard, (\u00a711.6 Initializers)[dlc.init]:</p>\n<blockquote>\n<p id=\"so_46427709_46430666_0\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_46427709_46430666_1\">(7.1) \u2014 If T is a (possibly cv-qualified) class type (Clause 12), constructors are considered. The applicable\n  constructors are enumerated (16.3.1.3), and the best one for the <em>initializer</em> () is chosen through overload\n  resolution (16.3). The constructor thus selected is called, with an empty argument list, to initialize the\n  object.</p>\n<p id=\"so_46427709_46430666_2\">(7.2) \u2014 If T is an array type, each element is default-initialized.</p>\n<p id=\"so_46427709_46430666_3\">(7.3) \u2014 Otherwise, <strong>no initialization is performed.</strong></p>\n</blockquote>\n<p>Nevertheless, static objects are always <em>zero-initialized.</em> So any built-in with dynamic or automatic storage duration may not be initialized, even if it is a suboject;</p>\n<pre><code>int i; //zero-initialized\n\nstruct A{\n  int i;\n  };\n\nstruct B\n  {\n  B(){};\n   B(int i)\n    :i{i}{}\n  int i;\n  int j;\n  };\nA a; //a.i is zero-initialized\n\nint main()\n  {\n   int j;             //not initialized\n   int k{};           //zero-initialized\n   A b;               //b.i not initialized\n   int* p = new int;  //*p not initialized\n   A*   q = new A;    //q-&gt;i not initialized\n   B ab;              //ab.i and ab.j not initialized\n   B ab2{1};          //ab.j not initialized\n   int xx[10];        //xx's element not initialized.\n\n   int l = i;    //OK l==0;\n   int m = j;    //undefined behavior (because j is not initialized)\n   int n = b.i;  //undefined behavior \n   int o = *p; //undefined behavior \n   int w = q-&gt;i; //undefined behavior \n   int ex = x[0] //undefined behavior\n   }\n</code></pre>\n<p>For member initialization [class.base.init] may help:</p>\n<blockquote>\n<p id=\"so_46427709_46430666_4\">In a non-delegating constructor, if a given potentially constructed subobject is not designated by a mem-\n  initializer-id (including the case where there is no mem-initializer-list because the constructor has no\n  ctor-initializer), then\n  \u2014 if the entity is a non-static data member that has a default member initializer (12.2) and either</p>\n<p id=\"so_46427709_46430666_5\">(9.1.1) \u2014 the constructor\u2019s class is a union (12.3), and no other variant member of that union is designated\n  by a mem-initializer-id or</p>\n<p id=\"so_46427709_46430666_6\">(9.1.2) \u2014 the constructor\u2019s class is not a union, and, if the entity is a member of an anonymous union, no\n  other member of that union is designated by a mem-initializer-id,\n  the entity is initialized from its default member initializer as specified in 11.6;</p>\n<p id=\"so_46427709_46430666_7\">(9.2) \u2014 otherwise, if the entity is an anonymous union or a variant member (12.3.1), no initialization is\n  performed;</p>\n<p id=\"so_46427709_46430666_8\">(9.3) \u2014 otherwise, the entity is default-initialized (11.6)</p>\n</blockquote>\n<p>Members of a trivial anonymous union may also not be initialized.</p>\n<hr>\n<p>Also one could ask if an object life-time could begin without any initialization, for exemple by using a reinterpret_cast. The answer is <em>no</em>: <a href=\"https://stackoverflow.com/questions/40873520/reinterpret-cast-creating-a-trivially-default-constructible-object\">reinterpret_cast creating a trivially default-constructible object</a></p>\n</hr>", "LastEditorUserId": "5632316", "LastActivityDate": "2017-09-26T17:35:10.280", "Score": "15", "CreationDate": "2017-09-26T15:39:10.043", "ParentId": "46427709", "CommentCount": "7", "OwnerUserId": "5632316", "LastEditDate": "2017-09-26T17:35:10.280"}, "46428390": {"Id": "46428390", "PostTypeId": "2", "Body": "<p>The standard doesn't talk about <em>existence</em> of objects, however, there is a concept of <em>lifetimes</em> of objects.</p>\n<p>Specifically, from <a href=\"http://eel.is/c++draft/basic.life#1\" rel=\"nofollow noreferrer\">[basic.life]</a><sup>\u2020</sup></p>\n<blockquote>\n<p id=\"so_46427709_46428390_0\">The lifetime of an object of type <code>T</code> begins when:</p>\n<ul>\n<li><p id=\"so_46427709_46428390_1\">storage with the proper alignment and size for type <code>T</code> is obtained, and</p></li>\n<li><p id=\"so_46427709_46428390_2\">if the object has non-vacuous initialization, its initialization is complete</p></li>\n</ul>\n</blockquote>\n<p>With <em>non-vacuous initialization</em> defined as</p>\n<blockquote>\n<p id=\"so_46427709_46428390_3\">An object is said to have non-vacuous initialization if it is of a class or <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization#Explanation\" rel=\"nofollow noreferrer\">aggregate type</a> and it or one of its subobjects is initialized by a constructor other than a <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor#Trivial_default_constructor\" rel=\"nofollow noreferrer\">trivial default constructor</a>.</p>\n</blockquote>\n<p>We can conclude that for objects with vacuous initializations (such as <code>int</code>s), their <em>lifetimes</em> begins as soon as their storage is acquired, even if they are left uninitialized.</p>\n<pre><code>void foo()\n{\n    int i;  // i's lifetime begins after this line, but i is uninitialized\n    // ...\n}\n</code></pre>\n<p><sub>\u2020 Links are added for ease of reading, they don't appear in the standard</sub></p>\n", "LastActivityDate": "2017-09-26T13:52:46.013", "CommentCount": "2", "CreationDate": "2017-09-26T13:52:46.013", "ParentId": "46427709", "Score": "1", "OwnerUserId": "4832499"}, "46427709": {"ViewCount": "1136", "Body": "<p>If all objects have at least one constructor be it default c'tor defined by the compiler or user defined then how can objects be uninitialized.</p>\n", "Title": "Do uninitialized objects exist in C++?", "CreationDate": "2017-09-26T13:19:34.080", "LastActivityDate": "2017-09-30T01:07:28.830", "CommentCount": "26", "PostTypeId": "1", "Id": "46427709", "Score": "12", "OwnerUserId": "8667423", "Tags": "<c++><initialization>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46427709_46428390_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}, "so_46427709_46430666_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 435}, "so_46427709_46430666_7": {"length": 8, "quality": 0.8888888888888888, "section_id": 435}, "so_46427709_46428390_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}, "so_46427709_46428390_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 7189}, "so_46427709_46428390_1": {"length": 6, "quality": 1.0, "section_id": 7189}, "so_46427709_46430666_4": {"length": 21, "quality": 0.7777777777777778, "section_id": 435}, "so_46427709_46430666_2": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_46427709_46430666_6": {"length": 15, "quality": 0.7142857142857143, "section_id": 435}, "so_46427709_46430666_0": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_46427709_46430666_1": {"length": 19, "quality": 0.6551724137931034, "section_id": 3296}}, "n3337": {"so_46427709_46428390_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}, "so_46427709_46430666_4": {"length": 18, "quality": 0.6666666666666666, "section_id": 427}, "so_46427709_46428390_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}, "so_46427709_46428390_1": {"length": 6, "quality": 1.0, "section_id": 6933}, "so_46427709_46430666_7": {"length": 5, "quality": 0.5555555555555556, "section_id": 427}, "so_46427709_46428390_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 6933}, "so_46427709_46430666_2": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_46427709_46430666_0": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_46427709_46430666_1": {"length": 19, "quality": 0.6551724137931034, "section_id": 3166}}, "n4659": {"so_46427709_46428390_2": {"length": 6, "quality": 1.0, "section_id": 8697}, "so_46427709_46430666_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 454}, "so_46427709_46430666_7": {"length": 8, "quality": 0.8888888888888888, "section_id": 454}, "so_46427709_46428390_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8697}, "so_46427709_46428390_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 8697}, "so_46427709_46428390_1": {"length": 6, "quality": 1.0, "section_id": 8697}, "so_46427709_46430666_4": {"length": 24, "quality": 0.8888888888888888, "section_id": 454}, "so_46427709_46430666_2": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_46427709_46430666_6": {"length": 19, "quality": 0.9047619047619048, "section_id": 454}, "so_46427709_46430666_1": {"length": 25, "quality": 0.8620689655172413, "section_id": 4048}}}});