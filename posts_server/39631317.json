post_cb({"bq_ids": {"n4140": {"so_39631317_39631367_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 3218}}, "n3337": {"so_39631317_39631367_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 3092}}, "n4659": {"so_39631317_39631367_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 3975}}}, "39631317": {"ViewCount": "493", "Body": "<p>I am confused with the two. I am aware of the C++ references which are inherently constant and once set they cannot be changed to refer to something else. </p>\n", "AcceptedAnswerId": "39631367", "Title": "What is the difference between \"const int& jj\" and \"int& const jj\"?", "CreationDate": "2016-09-22T06:00:33.960", "Id": "39631317", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-10-06T01:12:42.603", "LastEditorUserId": "3309790", "LastActivityDate": "2016-10-06T01:12:42.603", "Score": "6", "OwnerUserId": "997704", "Tags": "<c++><reference><const><language-lawyer>", "AnswerCount": "3"}, "39631394": {"Id": "39631394", "PostTypeId": "2", "Body": "<p><code>const</code> qualifier applied to reference means that you can't change the referenced value. For example:</p>\n<pre><code>void foo(int&amp; arg) {\n   arg = 1; // OK. The value passed by a caller will be changed in-place.\n}\n\nvoid foo(const int&amp; arg) {\n   arg = 1; // Compilation error.\n}\n</code></pre>\n<p><code>int&amp; const jj</code> is a compilation error.</p>\n", "LastActivityDate": "2016-09-22T06:04:24.870", "CommentCount": "0", "CreationDate": "2016-09-22T06:04:24.870", "ParentId": "39631317", "Score": "3", "OwnerUserId": "1690777"}, "39631367": {"Id": "39631367", "PostTypeId": "2", "Body": "<p><code>const int&amp;</code> means reference to const <code>int</code>. (Similarly, <code>int&amp;</code> means reference to non-const <code>int</code>.)</p>\n<p><code>int&amp; const</code> literally means const reference (to non-const <code>int</code>), which is invalid in C++, because reference itself can't be const-qualified. </p>\n<p><a href=\"http://eel.is/c++draft/dcl.ref#1\" rel=\"nofollow\">$8.3.2/1 References [dcl.ref]</a></p>\n<blockquote>\n<p id=\"so_39631317_39631367_0\">Cv-qualified references are ill-formed except when the cv-qualifiers\n  are introduced through the use of a typedef-name ([dcl.typedef],\n  [temp.param]) or decltype-specifier ([dcl.type.simple]), in which case\n  the cv-qualifiers are ignored.</p>\n</blockquote>\n<p>As you said, references are inherently constant and once set they cannot be changed to refer to something else. (We can't rebind a reference after its initialization.) This implies reference is always \"const\", then const-qualified reference or const-unqualified reference might not make sense actually.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-22T06:32:37.777", "Score": "9", "CreationDate": "2016-09-22T06:03:09.773", "ParentId": "39631317", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-09-22T06:32:37.777"}, "39631435": {"Id": "39631435", "PostTypeId": "2", "Body": "<p>Difference :</p>\n<pre><code>const int&amp; jj// means a reference to const int.\n\nint&amp; const jj // ill formed code that should trigger a compiler error\n</code></pre>\n", "LastActivityDate": "2016-09-22T06:06:40.560", "CommentCount": "0", "CreationDate": "2016-09-22T06:06:40.560", "ParentId": "39631317", "Score": "3", "OwnerUserId": "5612562"}});