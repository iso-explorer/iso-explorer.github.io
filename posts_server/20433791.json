post_cb({"bq_ids": {"n4140": {"so_20433791_20433965_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 664}}, "n3337": {"so_20433791_20433965_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 654}}, "n4659": {"so_20433791_20433965_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 692}}}, "20433791": {"ViewCount": "92", "Body": "<p>I'm trying to implement a lock-free map, and I encountered a problem.</p>\n<p>In my iterator class I implemented an <code>operator-&gt;</code> to freely get <code>first</code> and <code>second</code>:</p>\n<pre><code>_t_iterator_return&lt;_Kty, _Ty&gt; operator-&gt;()\n{\n    _t_iterator_return&lt;_Kty, _Ty&gt; tmp((int&amp;)Cur-&gt;getKey(), Cur-&gt;getValue());\n    return tmp;\n}\n</code></pre>\n<p>Which is:</p>\n<pre><code>template &lt;class _Kty, class _Ty&gt;\nstruct _t_iterator_return\n{\n    _Kty&amp; first; // key\n    _Ty&amp; second; // val\n\n    _t_iterator_return(_Kty&amp; k, _Ty&amp; v) : first(k), second(v) {}\n};\n</code></pre>\n<p>Seems norm isn't it? But in my <code>main()</code> this:</p>\n<pre><code>for(LFMap&lt;int, stringc&gt;::iterator it = m.begin(); !it.end(); ++it)\n    fprintf(mres, \"K: %7d     V: %s\\n\", it-&gt;first, it-&gt;second.c_str());\n</code></pre>\n<p>Causes a compile-time error: <code>error C2819: type 'lightforce::core::LFMap&lt;_Kty,_Ty&gt;::_t_iterator_return&lt;_Kty,_Ty&gt;' does not have an overloaded member 'operator -&gt;'</code></p>\n<p>Nevertheless, this code:</p>\n<pre><code>for(LFMap&lt;int, stringc&gt;::iterator it = m.begin(); !it.end(); ++it)\n        fprintf(mres, \"K: %7d     V: %s\\n\", it.operator-&gt;().first, it.operator-&gt;().second.c_str());\n</code></pre>\n<p>Has been successfully compiled and worked just fine! Why <code>-&gt;</code> is not working, but <code>operator-&gt;</code> does?</p>\n", "AcceptedAnswerId": "20433965", "Title": "Class does not have a suitable operator->", "CreationDate": "2013-12-06T21:22:00.860", "Id": "20433791", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-12-06T22:00:19.480", "Score": "1", "OwnerUserId": "2708147", "Tags": "<c++><visual-studio-2010><map><operator-overloading>", "AnswerCount": "1"}, "20433965": {"Id": "20433965", "PostTypeId": "2", "Body": "<p>C++11 \u00a713.5.6 [over.ref] para 1 states:</p>\n<blockquote>\n<p id=\"so_20433791_20433965_0\">... An expression <code>x-&gt;m</code> is interpreted as <code>(x.operator-&gt;())-&gt;m</code> for a class object <code>x</code> of type <code>T</code> if <code>T::operator-&gt;()</code> exists and if the operator is selected as the best match function by the overload resolution mechanism (13.3).</p>\n</blockquote>\n<p>Since the type you return from your <code>operator-&gt;</code> - <code>_t_iterator_return&lt;_Kty, _Ty&gt;</code> - doesn't have an <code>operator -&gt;</code> it cannot be dereferenced.</p>\n<p>Add an <code>operator -&gt;</code> to <code>_t_iterator_return</code> that simply returns <code>this</code>:</p>\n<pre><code>_t_iterator_return* operator-&gt;()\n{\n    return this;\n}\n</code></pre>\n", "LastEditorUserId": "2708147", "LastActivityDate": "2013-12-06T22:00:19.480", "Score": "3", "CreationDate": "2013-12-06T21:34:11.023", "ParentId": "20433791", "CommentCount": "5", "OwnerUserId": "923854", "LastEditDate": "2013-12-06T22:00:19.480"}});