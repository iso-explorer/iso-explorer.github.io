post_cb({"bq_ids": {"n4140": {"so_38517422_38517666_0": {"length": 47, "quality": 0.8392857142857143, "section_id": 5943}}, "n3337": {"so_38517422_38517666_0": {"length": 47, "quality": 0.8392857142857143, "section_id": 5714}}, "n4659": {"so_38517422_38517666_0": {"length": 47, "quality": 0.8392857142857143, "section_id": 7428}}}, "38517666": {"Id": "38517666", "PostTypeId": "2", "Body": "<p>The primary purpose in</p>\n<pre><code>long long int sum1 = x + y;\n</code></pre>\n<p>is to evaluate the expression  <code>x + y</code>.<br> Note that <code>;</code> is a sequence point which means any side-effect of the expression must be performed on reaching that point.<br> Here the side-effect is to assign the value of  the expression  <code>x + y</code> to <code>sum1</code></br></br></p>\n<p><strong>ISO/IEC 9899:201x-&gt;6.3.1.8-&gt;1</strong> states that :</p>\n<blockquote>\n<p id=\"so_38517422_38517666_0\">Unless explicitly sstated otherwise, the common real type is also the\n  corresponding real type of the result..<br>\n  ..<br>\n  Otherwise, the integer promotions are performed on both operands. Then the\n  following rules are applied to the promoted operands:<br>\n  - If both operands have the same type, then no further conversion is needed.<br>\n  - Otherwise, if both operands have signed integer types or both have unsigned\n  integer types, the operand with the type of lesser integer conversion rank is\n  converted to the type of the operand with greater rank.</br></br></br></br></p>\n</blockquote>\n<p>What you wish to do is</p>\n<pre><code>long long int sum1 = (long long int)x + y; // Casting x to LL causes y to be auto-converted\n</code></pre>\n", "LastEditorUserId": "1620779", "LastActivityDate": "2016-07-22T03:54:05.930", "Score": "3", "CreationDate": "2016-07-22T03:25:53.150", "ParentId": "38517422", "CommentCount": "1", "OwnerUserId": "1620779", "LastEditDate": "2016-07-22T03:54:05.930"}, "38517422": {"ViewCount": "88", "Body": "<p>when i read caspp, there is a question that determine whether arguments can be added without overflow.so i write follow codes.</p>\n<pre><code>//sum1 is long long ,so there is no overflow.\n//when sum2 is overflow ,then sum1 != sum2;\nint tadd_ok (int x,int y)\n{\nlong long int sum1 = x + y;\nint sum2 = x + y;\nreturn sum1 == sum2;\n}\n</code></pre>\n<p>however , there are some question.\nwhen i assume x = -2147483647,y=-2,both sum1 and sum2 equal 2147483747(both overflow!).</p>\n<p>And i guess ,for \"long long = int + int \",first calculate ,then type conversion?\nso what are these rules?</p>\n", "Title": "\"long long = int + int \" first calculate ,then type conversion?", "CreationDate": "2016-07-22T02:55:18.910", "LastActivityDate": "2016-07-22T03:54:05.930", "CommentCount": "3", "PostTypeId": "1", "Id": "38517422", "Score": "-1", "OwnerUserId": "5997177", "Tags": "<c++><c>", "AnswerCount": "1"}});