post_cb({"14269604": {"ViewCount": "784", "Body": "<p>I have a big project (400 files) and all of the headers have include guards and everything, however I get 500 LNK2005 errors. </p>\n<p>Could it be that I have function bodies defined in some headers? Cause I saw the same things in the DirectX utility headers(DirectXCollision has some of it's functions are completely in the header).</p>\n<p>Or could it be because they are using .inl files instead of .cpp?</p>\n", "Title": "Include guards not working? (500 errors of type LNK2005 x already defined in y.obj)", "CreationDate": "2013-01-11T00:11:56.007", "LastActivityDate": "2013-01-11T17:35:59.333", "CommentCount": "0", "LastEditDate": "2013-01-11T00:16:50.747", "PostTypeId": "1", "LastEditorUserId": "241631", "Id": "14269604", "Score": "0", "OwnerUserId": "1906587", "Tags": "<c++><linker><lnk2005>", "AnswerCount": "3"}, "14283614": {"Id": "14283614", "PostTypeId": "2", "Body": "<p>Do you define global variables in your header files? That can be a cause of the error.\nAnd include guards will not help. </p>\n<p>A global variable should be defined only in one translation unit and should be externed in all other translational unit.</p>\n<p>For eg.\nin x.h, you have</p>\n<pre><code>int myVar;\n</code></pre>\n<p>Now you #include x.h in both a.cpp &amp; b.cpp,\nthen you will get a linker error even if you had include guards in x.h</p>\n<p>Because now myVar will get defined in both a.obj and b.obj and the linker will find 2 myVars.</p>\n", "LastActivityDate": "2013-01-11T17:35:59.333", "Score": "0", "CreationDate": "2013-01-11T17:35:59.333", "ParentId": "14269604", "CommentCount": "1", "OwnerUserId": "922712"}, "bq_ids": {"n4140": {"so_14269604_14269639_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5402}}, "n3337": {"so_14269604_14269639_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5197}}, "n4659": {"so_14269604_14269639_1": {"length": 40, "quality": 0.8888888888888888, "section_id": 6849}}}, "14269639": {"Id": "14269639", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14269604_14269639_0\">Could it be that I have function bodies defined in some headers?</p>\n</blockquote>\n<p>Yes, that could be. Defining a function in more than one translation unit results in a duplicated symbol definition error.</p>\n<p>You can get around the duplication error by declaring those functions <code>inline</code>. <em>[7.1.2]/2</em> reads:</p>\n<blockquote>\n<p id=\"so_14269604_14269639_1\">A function declaration (8.3.5, 9.3, 11.3) with an inline specifier declares an <em>inline function</em>. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. An implementation is not required to perform this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n", "LastEditorUserId": "927034", "LastActivityDate": "2013-01-11T17:31:24.027", "Score": "2", "CreationDate": "2013-01-11T00:16:24.663", "ParentId": "14269604", "CommentCount": "2", "LastEditDate": "2013-01-11T17:31:24.027", "OwnerUserId": "927034"}, "14269644": {"Id": "14269644", "PostTypeId": "2", "Body": "<p>Include guards will only save you from including the same header multiple times into the same compilation unit (one cpp file). If you include the header into a second cpp file and then link them together, both of them will have anything the header brings in. That's why it is usually a bad idea to have function implementations in the headers. </p>\n<p>You can work around that by declaring your function inline, then compiler will copy/paste them around.</p>\n", "LastActivityDate": "2013-01-11T00:16:48.313", "Score": "1", "CreationDate": "2013-01-11T00:16:48.313", "ParentId": "14269604", "CommentCount": "0", "OwnerUserId": "114488"}});