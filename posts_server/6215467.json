post_cb({"6215534": {"Id": "6215534", "PostTypeId": "2", "Body": "<p>The <code>cXXX</code> headers place all their stuff in the <code>std</code> namespace. They <em>may</em> also put them in the global namespace but it's not required.</p>\n<p>This is from C++0x, the upcoming standard, section D.7:</p>\n<blockquote>\n<p id=\"so_6215467_6215534_0\">2/ Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname</code> header is placed within the global namespace scope. It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace <code>std</code> and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</p>\n<p id=\"so_6215467_6215534_1\">3/ [ Example: The header <code>&lt;cstdlib&gt;</code> assuredly provides its declarations and definitions within the namespace <code>std</code>. It may also provide these names within the global namespace. The header <code>&lt;stdlib.h&gt;</code> assuredly provides the same declarations and definitions within the global namespace, much as in the C Standard. It may also provide these names within the namespace <code>std</code>. \u2014end example ]</p>\n</blockquote>\n<p>This is unchanged from section D.5 from C++03 (it's made more explicit in the newer standard but the effect is the same):</p>\n<blockquote>\n<p id=\"so_6215467_6215534_2\">2/ Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the Standard library namespace by the corresponding <code>cname</code> header is also placed within the namespace scope of the namespace <code>std</code> and is followed by an explicit using-declaration.</p>\n<p id=\"so_6215467_6215534_3\">3/ [Example: The header <code>&lt;cstdlib&gt;</code> provides its declarations and definitions within the namespace <code>std</code>. The header <code>&lt;stdlib.h&gt;</code> makes these available also in the global namespace, much as in the C Standard. \u2014end example]</p>\n</blockquote>\n<p>If you include the 'old-style' <code>XXX.h</code> header, it's placed in both namespaces (in <em>both</em> iterations of the standard).</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2011-06-02T14:09:54.973", "Score": "1", "CreationDate": "2011-06-02T13:56:54.397", "ParentId": "6215467", "CommentCount": "7", "OwnerUserId": "14860", "LastEditDate": "2011-06-02T14:09:54.973"}, "6215567": {"Id": "6215567", "PostTypeId": "2", "Body": "<p>You get the same functions by including <code>&lt;math.c&gt;</code> and <code>&lt;cmath&gt;</code> in C++, the only differences is the namespace. I.E. including <code>&lt;math.h&gt;</code> also gives you the overload.</p>\n<p>In theory, in C++03, using <code>&lt;math.h&gt;</code> gives you the symbols defined in the global namespace and also in the std namespace while using <code>&lt;cmath&gt;</code> gives you the symbols defined in the std namespace and not in the global namespace.</p>\n<p>The practice is different and C++ 0X aligned the theory with the practice. <code>&lt;math.h&gt;</code> gives you the symbols defined in the global namespace and perhaps also in the std namespace while using <code>&lt;cmath&gt;</code> gives you the symbols defined in the std namespace and perhaps also in the global namespace.</p>\n", "LastEditorUserId": "136208", "LastActivityDate": "2011-06-02T14:55:06.823", "Score": "3", "CreationDate": "2011-06-02T13:58:25.430", "ParentId": "6215467", "CommentCount": "6", "OwnerUserId": "136208", "LastEditDate": "2011-06-02T14:55:06.823"}, "bq_ids": {"n4140": {"so_6215467_6215534_1": {"length": 35, "quality": 0.8536585365853658, "section_id": 4908}, "so_6215467_6215534_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 4907}, "so_6215467_6215534_3": {"length": 14, "quality": 0.6086956521739131, "section_id": 4908}, "so_6215467_6215534_0": {"length": 38, "quality": 0.926829268292683, "section_id": 4907}}, "n3337": {"so_6215467_6215534_1": {"length": 35, "quality": 0.8536585365853658, "section_id": 4703}, "so_6215467_6215534_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 4702}, "so_6215467_6215534_3": {"length": 14, "quality": 0.6086956521739131, "section_id": 4703}, "so_6215467_6215534_0": {"length": 38, "quality": 0.926829268292683, "section_id": 4702}}, "n4659": {"so_6215467_6215534_1": {"length": 35, "quality": 0.8536585365853658, "section_id": 6317}, "so_6215467_6215534_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 6316}, "so_6215467_6215534_3": {"length": 14, "quality": 0.6086956521739131, "section_id": 6317}, "so_6215467_6215534_0": {"length": 38, "quality": 0.926829268292683, "section_id": 6316}}}, "6215527": {"Id": "6215527", "PostTypeId": "2", "Body": "<p>They are in the <code>std</code> namespace.  But, for backwards compatibility reasons the <code>cmath</code> header also shows them in the global namespace with a <code>using std::cos;</code>.</p>\n", "LastActivityDate": "2011-06-02T13:56:29.433", "CommentCount": "0", "CreationDate": "2011-06-02T13:56:29.433", "ParentId": "6215467", "Score": "3", "OwnerUserId": "7536"}, "6215467": {"ViewCount": "2341", "Body": "<p>What is the namespace for math functions? Global or std?</p>\n<p>Consider <a href=\"http://www.cplusplus.com/reference/clibrary/cmath/cos/\" rel=\"nofollow\">cos</a> function. It has 3 overloads. But there is also legacy <code>cos</code> from math.h. C doesn't know anything about function overloading. Therefore <code>cos(x)</code> can't be resolved to <code>cos(float)</code>. The solution is to call the single precision version explicitly <code>cosf(x)</code>. Did I miss anything?</p>\n<p>Thank you.</p>\n", "AcceptedAnswerId": "6215567", "Title": "cmath header confusion", "CreationDate": "2011-06-02T13:52:35.303", "Id": "6215467", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-06-02T14:55:06.823", "Score": "3", "OwnerUserId": "638231", "Tags": "<c++>", "AnswerCount": "4"}, "6215546": {"Id": "6215546", "PostTypeId": "2", "Body": "<p>If you are using C++ you can rely on the function overloading.</p>\n<p>There are three version of cos:</p>\n<pre><code>double cos (      double x );\nfloat cos (       float x );\nlong double cos ( long double x );\n</code></pre>\n<p>But if you are using only C or you want portabilty only the double version of this function exists with this name. The float function is cosf.</p>\n", "LastActivityDate": "2011-06-02T13:57:21.673", "CommentCount": "0", "CreationDate": "2011-06-02T13:57:21.673", "ParentId": "6215467", "Score": "0", "OwnerUserId": "781229"}});