post_cb({"26175697": {"ViewCount": "871", "Body": "<p>Overarching question is: how can a programmer make sure that his non-local static variables are initialized via static initialization and not via dynamic initialization?</p>\n<p>As zero-initialization is done always then one should look at the constant initialization.</p>\n<blockquote>\n<p id=\"so_26175697_26175697_0\">3.6.2.2 A constant initializer for an object o is an expression that is a constant expression, except that it may also invoke constexpr\n  constructors for o and its subobjects even if those objects are of\n  non-literal class types [ Note: such a class may have a non-trivial\n  destructor \u2014end note ]. Constant initialization is performed:</p>\n<p id=\"so_26175697_26175697_1\">\u2014 if each full-expression (including implicit conversions) that\n  appears in the initializer of a reference with static or thread\n  storage duration is a constant expression (5.19) and the reference is\n  bound to an lvalue designating an object with static storage duration\n  or to a temporary (see 12.2);</p>\n<p id=\"so_26175697_26175697_2\">\u2014 if an object with static or thread storage duration is <strong>initialized\n  by a constructor call, and if the initialization full-expression is a\n  constant initializer for the object</strong>;</p>\n<p id=\"so_26175697_26175697_3\">\u2014 if an object with static or thread storage duration is <strong>not\n  initialized by a constructor call and if either the object is\n  value-initialized</strong> or <strong>every full-expression that appears in its\n  initializer is a constant expression</strong>.</p>\n</blockquote>\n<p>I omitted the reference as it is not important in my case. How <em>I</em> understand the standard is that there are 3 cases:</p>\n<ol>\n<li>ctor</li>\n<li>no-ctor and value initialization</li>\n<li>no-ctor and constant expression</li>\n</ol>\n<p>Let's say I have a following class:</p>\n<pre><code>struct X {\n  bool flag = false;\n  // = {} will break VS2013 CTP so in that case use the\n  // regular ctor, which sadly still can't be declared constexpr\n  std::aligned_storage&lt;sizeof(int), alignof(int)&gt;::type storage = {};\n};\n</code></pre>\n<p>As far as I can say this class is perfectly valid for constant initialization (each element can be constantly initialized). Is this true?</p>\n<p>Does this class require a <code>constexpr</code> constructor?</p>\n<p>Is constant initialization guaranteed for C++11 as well as C++98?</p>\n<p>Side question: When will the static initialization done in case of so/dll? During the load time, or it might be delayed even further?</p>\n", "Title": "Guaranteeing static (constant) initialization of static objects", "CreationDate": "2014-10-03T08:30:06.523", "LastActivityDate": "2014-11-21T23:00:25.027", "CommentCount": "7", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2014-10-03T12:56:54.287", "LastEditorUserId": "339249", "Id": "26175697", "Score": "24", "OwnerUserId": "339249", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26175697_26175697_3": {"length": 18, "quality": 1.0, "section_id": 7151}, "so_26175697_26175697_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 7151}, "so_26175697_26175697_2": {"length": 13, "quality": 1.0, "section_id": 7151}, "so_26175697_26175697_1": {"length": 24, "quality": 0.9230769230769231, "section_id": 7151}}, "n3337": {"so_26175697_26175697_3": {"length": 15, "quality": 0.8333333333333334, "section_id": 6895}, "so_26175697_26175697_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 6895}, "so_26175697_26175697_1": {"length": 24, "quality": 0.9230769230769231, "section_id": 6895}}, "n4659": {"so_26175697_26175697_2": {"length": 8, "quality": 0.6153846153846154, "section_id": 8652}, "so_26175697_26175697_0": {"length": 25, "quality": 0.7575757575757576, "section_id": 8652}}}, "27071805": {"Id": "27071805", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_26175697_27071805_0\">Side question: When will the static initialization done in case of\n  so/dll? During the load time, or it might be delayed even further?</p>\n</blockquote>\n<p>On Windows, static initialization occurs before before DllMain() is invoked <em>with</em> the DLL loader lock acquired.  This severely limits what you can do in the constructors for your static objects.  You can't load any other DLLs (LoadLibrary) or call any other function that MIGHT cause a DLL to be loaded, which pretty much rules out anything beyond simple initialization and functions exported by Kernel32.</p>\n<p>See the last few paragraphs of the <a href=\"http://msdn.microsoft.com/en-us/library/ms682583%28VS.85%29.aspx\" rel=\"nofollow\">DllMain (MSDN)</a> docs for details.</p>\n", "LastActivityDate": "2014-11-21T23:00:25.027", "CommentCount": "0", "CreationDate": "2014-11-21T23:00:25.027", "ParentId": "26175697", "Score": "1", "OwnerUserId": "389833"}, "27069328": {"Id": "27069328", "PostTypeId": "2", "Body": "<p>It would be good to know the purpose behind this question. And also whether your concern is allocation or specifically initialization.</p>\n<p>However, the type of initialization shouldn't matter because the required space is allocated at compile time. Depending on how you define the variable, it will end up either in .bss or .data section.</p>\n<p>Initialization, as you know, is only to ensure a specific content in the memory before it is first used. If you do not define a constructor that allocates dynamic memory then there won't be any dynamic allocation (if that is your concern).</p>\n<p>For simple constructors, I believe the compiler will generate inline code and use the same to initialize the object at compile time (I am not sure what the standard talks about the same but it is possible that it is tool chain dependent.) With complex constructors, non-local static objects will be initialized when the image is loaded in memory and local static objects will be initialized when the stack frame is loaded. In any cases you should find the object in a known state before first use.</p>\n", "LastActivityDate": "2014-11-21T20:00:04.027", "CommentCount": "0", "CreationDate": "2014-11-21T20:00:04.027", "ParentId": "26175697", "Score": "1", "OwnerUserId": "2623102"}});