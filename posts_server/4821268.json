post_cb({"4821314": {"CommentCount": "0", "Body": "<p>You are accessing a local variable for CComplexMat in your Foo class instead of just accessing the parent class to get the value of pReal.  </p>\n<p>This <a href=\"http://www.cplusplus.com/doc/tutorial/inheritance/\" rel=\"nofollow\">tutorial</a> breaks down the difference between friendship and inheritance in C++.<br>\nNote how they accessed the member variables of the parent class directly, without a local member of the parent class type.  This is likely what you want to do in your example. </br></p>\n", "CreationDate": "2011-01-27T20:12:36.040", "ParentId": "4821268", "Id": "4821314", "LastActivityDate": "2011-01-27T20:12:36.040", "PostTypeId": "2", "Score": "0", "OwnerUserId": "585041"}, "bq_ids": {"n4140": {"so_4821268_4821663_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 4560}}, "n3337": {"so_4821268_4821663_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 4390}}}, "4821663": {"CreationDate": "2011-01-27T20:46:13.380", "CommentCount": "0", "Body": "<p>According C++ standard about access of  protected members in derived classes (11.5)</p>\n<blockquote>\n<p id=\"so_4821268_4821663_0\">Except when forming a pointer to member (5.3.1), the access must be through a\n  pointer to, reference to, or object of the derived class itself (or any class derived from that class) </p>\n</blockquote>\n<p>You are trying to access pReal through base class.</p>\n<p>Make Foo friend of CComplexMat to access it's members.</p>\n", "Id": "4821663", "OwnerUserId": "556049", "LastEditDate": "2011-01-27T20:52:06.390", "ParentId": "4821268", "LastActivityDate": "2011-01-27T20:52:06.390", "PostTypeId": "2", "Score": "0", "LastEditorUserId": "556049"}, "4821268": {"CreationDate": "2011-01-27T20:07:14.663", "ViewCount": "2863", "Id": "4821268", "AcceptedAnswerId": "4821676", "Score": "3", "Title": "Friendship vs inheritance", "LastEditorUserId": "963864", "CommentCount": "0", "Body": "<p>I've the class hierarchy below. Basically, I would like to establish a \"has-a\" relationship between the classes Foo and CComplexMat, i.e. class Foo \"has-a\" CComplexMat.\nFrom what I know, <code>private</code> and <code>protected</code> members of a class cannot be accessed from outside the class where they are defined.</p>\n<p>However, there are two possibilities to allow other classes to access such members.\nThe first one is to use <code>friend</code> classes. I could add a line <code>friend class Foo&lt;T&gt;;</code> in the declaration of <code>class CComplexMat&lt;T&gt;</code>, so that\n<code>Foo&lt;T&gt;</code> can access the <code>protected</code> and <code>private</code> members of <code>class CComplexMat&lt;T&gt;</code>.</p>\n<p>The second possibility would be to use <code>inheritance</code>, which is the solution that I've chosen in the example. In this case, I'm considering a <code>public</code> inheritance so that\nboth <code>public</code> and <code>protected</code> members of <code>class CComplexMat&lt;T&gt;</code> are accessible in class <code>Foo&lt;T&gt;</code>. However, the following error is shown:</p>\n<p><code>error: \u2018CMatrix&lt;float&gt;* CComplexMatrix&lt;float&gt;::m_pReal\u2019 is protected</code></p>\n<p><code>error: within this context</code></p>\n<ol>\n<li>I was wondering if somebody could shed some light on the bug?</li>\n<li>In which situations are \"friendships\" or \"inheritances\" more suitable?</li>\n</ol>\n<pre><code>template &lt;class T&gt;\nclass CMatrix{\n    public:\n     ...\n        CMatrix&lt;T&gt; &amp; operator = (const CMatrix&lt;T&gt; &amp;);\n        T &amp; operator()(int, int, int);\n        T operator()(int, int, int) const;\n     ...\n    private:\n       T *** pData;\n       int rows, cols, ch;\n};\n\ntemplate &lt;class T&gt;\nclass CComplexMat: public CMatrix&lt;T&gt;{\n    public:\n    ...\n    protected:\n        CMatrix&lt;T&gt; *pReal;\n        CMatrix&lt;T&gt; *pImag;\n};\n\ntemplate &lt;class T&gt;\nclass Foo: public CComplexMat&lt;T&gt;{\n    public:\n        ...\n        void doSomething(){\n           ...\n           CMatrix&lt;T&gt;*pTmp = pComplex-&gt;pReal; // error here.\n           ...\n        }\n    ...\n    private:\n        CComplexMat&lt;T&gt; * pComplex;\n    ...\n};\n</code></pre>\n", "Tags": "<c++><inheritance><friend><protected><access-control>", "LastEditDate": "2015-10-26T21:30:07.743", "LastActivityDate": "2015-10-26T21:30:07.743", "PostTypeId": "1", "AnswerCount": "4", "OwnerUserId": "324081"}, "4821621": {"CreationDate": "2011-01-27T20:41:58.783", "CommentCount": "0", "Body": "<p>You cannot access a protected member from outside a class, even if the class attempting the access is a sub class of the class that contains the protected member.</p>\n<p>In your example, if pComplex would point to an object of type Foo, then you could access pReal in the way that you are attempting.</p>\n", "Id": "4821621", "OwnerUserId": "540815", "LastEditDate": "2011-01-27T20:49:10.630", "ParentId": "4821268", "LastActivityDate": "2011-01-27T20:49:10.630", "PostTypeId": "2", "Score": "0", "LastEditorUserId": "540815"}, "4821676": {"CommentCount": "6", "Body": "<p>Inheritance should only be used for \"is-a\" relationships.  It looks to me like <code>CComplexMat&lt;T&gt;</code> has two <code>CMatrix&lt;T&gt;</code> members, but it's not the case that it \"is-a\" <code>CMatrix&lt;T&gt;</code>.  Similar deal with <code>Foo</code> and <code>CComplexMat&lt;T&gt;</code>.</p>\n<p>So inheritance is almost certainly not the correct solution.  That leaves:</p>\n<ul>\n<li>Use <code>friend</code> to allow access between closely related classes.</li>\n<li>Use public accessor methods to allow users of a class to \"get at\" private members in limited ways.</li>\n</ul>\n<p>For example, <code>CComplexMat&lt;T&gt;</code> should probably have private members for the real and imaginary parts but then also some accessors like:</p>\n<pre><code>public:\n    const CMatrix&lt;T&gt;&amp; realPart() const;\n    CMatrix&lt;T&gt;&amp; realPart();\n    const CMatrix&lt;T&gt;&amp; imagPart() const;\n    CMatrix&lt;T&gt;&amp; imagPart();\n</code></pre>\n", "CreationDate": "2011-01-27T20:48:30.207", "ParentId": "4821268", "Id": "4821676", "LastActivityDate": "2011-01-27T20:48:30.207", "PostTypeId": "2", "Score": "4", "OwnerUserId": "459640"}});