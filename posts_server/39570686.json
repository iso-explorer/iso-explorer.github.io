post_cb({"39571758": {"ParentId": "39570686", "Score": "3", "CreationDate": "2016-09-19T11:09:55.970", "LastActivityDate": "2016-09-19T11:35:48.113", "LastEditDate": "2016-09-19T11:35:48.113", "OwnerUserId": "567292", "LastEditorUserId": "567292", "Body": "<p>I can think of a few downsides:</p>\n<ul>\n<li><code>std::variant</code> can hold <em>cv</em> <code>void</code>, but conversion functions returning <em>cv</em> <code>void&amp;</code> and <em>cv</em> <code>void&amp;&amp;</code> would be illegal, and conversion functions to <em>cv</em> <code>void</code> are never called (<strong>[class.conv.fct]</strong>/1);</li>\n<li>It is possible for a <code>std::variant</code> to hold a type that can also be constructed from it, e.g.: <code>std::variant&lt;std::monostate, std::any&gt; v; std::any a{v};</code> - what should happen in this case?</li>\n</ul>\n<p>In addition, currently it is possible to take a function returning <code>T</code>, convert it to a function returning <code>std::variant&lt;T, U&gt;</code> and expect the compiler to detect all cases where code needs to be changed; with a conversion function to <code>T</code> any cases where code was copying or binding a reference to <code>T</code> would result in a bug:</p>\n<pre><code>int f();\nint i{f()};    // OK\n\n// f() changes to:\nstd::variant&lt;int, std::string&gt; f();\nint i{f()};    // can now throw std::bad_variant_access\n</code></pre>\n", "Id": "39571758", "PostTypeId": "2", "CommentCount": "3"}, "39570686": {"Tags": "<c++><variant><c++1z><conversion-operator>", "ViewCount": "114", "CreationDate": "2016-09-19T10:17:27.390", "FavoriteCount": "1", "Title": "explicit conversion operator vs get< T >() function for std::variant", "CommentCount": "2", "AnswerCount": "2", "Score": "1", "OwnerUserId": "1430927", "Id": "39570686", "LastActivityDate": "2017-03-30T06:44:09.317", "Body": "<p>What are the downsides to make a part of <code>std::variant</code> class an explicit conversion (to alternative) operator overloadings set in addition to (or even instead of) <code>get&lt; T &gt;()</code> free functions (p.568 of the <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4606.pdf\" rel=\"nofollow\">draft</a>)?</p>\n<pre><code>template&lt;class... Types&gt;\nclass variant\n{\n    template&lt;class T&gt;\n    explicit operator const T&amp; () const&amp;;\n    template&lt;class T&gt;\n    explicit operator T&amp; () &amp;;\n    template&lt;class T&gt;\n    explicit operator const T&amp;&amp; () const &amp;&amp;;\n    template&lt;class T&gt;\n    explicit operator T&amp;&amp; () &amp;&amp;;\n};\n</code></pre>\n<p>Is it unsafe in some contexts? Why do we need free <code>get()</code> function (namely, \"type\" version, not \"index\" one), when variant exposes a value semantic (cite from the draft):</p>\n<blockquote>\n<p id=\"so_39570686_39570686_0\">A variant object holds and manages the lifetime of a value.</p>\n</blockquote>\n<p>Isn't it enough to make a variant <em>explicitly</em> convertible to alternative, but still implicitly constructible from an alternative?</p>\n<p>I know, the uniformity of the interface is good thing (I remember we need <code>get&lt; I &gt;()</code> along with <code>get&lt; T &gt;()</code>), but I think it is more natural way to get containing alternative value simply by converting to it, rather then applying some function specialization to variant instance.</p>\n", "PostTypeId": "1"}, "43110405": {"ParentId": "39570686", "Score": "0", "CreationDate": "2017-03-30T06:44:09.317", "Id": "43110405", "OwnerUserId": "6182509", "LastActivityDate": "2017-03-30T06:44:09.317", "Body": "<p>My main reason not to propose it was the following:</p>\n<ul>\n<li>optional doesn't have it</li>\n<li>optional has an <code>explicit operator bool()</code> (<code>has_value()</code> or not?)</li>\n<li>variant and optional should remain as consistent as possible.</li>\n</ul>\n<p>But given the right arguments this could certainly be changed in a future revision.</p>\n", "PostTypeId": "2", "CommentCount": "0"}, "bq_ids": {"n4659": {"so_39570686_39570686_0": {"length": 6, "section_id": 5176, "quality": 1.0}}}});