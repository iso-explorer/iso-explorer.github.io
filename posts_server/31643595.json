post_cb({"31643595": {"CommentCount": "4", "AcceptedAnswerId": "31644046", "PostTypeId": "1", "LastEditorUserId": "1505939", "CreationDate": "2015-07-27T01:00:22.233", "LastActivityDate": "2016-06-11T00:45:48.220", "LastEditDate": "2016-06-11T00:45:48.220", "ViewCount": "223", "FavoriteCount": "1", "Title": "Does the following actually violate the ODR?", "Id": "31643595", "Score": "6", "Body": "<p>From <a href=\"https://isocpp.org/files/papers/n4147.pdf\" rel=\"nofollow\">here</a>:</p>\n<blockquote>\n<pre><code>struct piecewise_construct_t {};\nconstexpr piecewise_construct_t piecewise_construct = {};\n\nconst int magic_number = 42;\n\ninline std::tuple&lt;int&gt; make_magic() {\nreturn std::tuple&lt;int&gt;( piecewise_construct, magic_number );\n}\n</code></pre>\n<p id=\"so_31643595_31643595_0\">This function violates the ODR ([basic.def.odr] \u00a73.2/6 ) twice because\n  neither of the constructor 2 arguments receives an lvalue-to-rvalue\n  conversion. They are therefore passed by address, but the address\n  depends on the TU because const (and constexpr) implies internal\n  linkage.</p>\n</blockquote>\n<p>I initially thought it did, but the problem is that <code>magic_number</code> has internal linkage. Since it has internal linkage, wouldn't it essentially treat <code>magic_number</code> as if they were different variables in different translation units, and therefore not as multiple definitions of the same variable? Can someone specify this by using quotes of the latest working draft of the C++ standard?</p>\n", "Tags": "<c++><static><inline><language-lawyer><one-definition-rule>", "OwnerUserId": "1346994", "AnswerCount": "1"}, "31644046": {"ParentId": "31643595", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The problem is with <code>make_magic</code>. [basic.def.odr]/p6:</p>\n<blockquote>\n<p id=\"so_31643595_31644046_0\">There can be more than one definition of ... inline function with\n  external linkage (7.1.2) ... in a program provided that each\n  definition appears in a different translation unit, and provided the\n  definitions satisfy the following requirements. Given such an entity\n  named <code>D</code> defined in more than one translation unit, then</p>\n<ul>\n<li>each definition of <code>D</code> shall consist of the same sequence of tokens; and</li>\n<li>in each definition of <code>D</code>, corresponding names, looked up according to 3.4, shall refer to an entity defined within the definition of <code>D</code>, or shall refer to the same entity, after overload resolution (13.3) and\n  after matching of partial template specialization (14.8.3), except\n  that a name can refer to a non-volatile <code>const</code> object with internal or\n  no linkage if the object has the same literal type in all definitions\n  of <code>D</code>, and the object is initialized with a constant expression (5.20),\n  and the object is not odr-used, and the object has the same value in\n  all definitions of <code>D</code>; and</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Because <code>piecewise_construct</code> and <code>magic_number</code> have internal linkage, when the inline function <code>make_magic</code> is defined in multiple translation units, the names <code>piecewise_construct</code> and <code>magic_number</code> refer to different entities - TU 1's <code>make_magic</code> will refer to TU 1's <code>piecewise_construct</code> and <code>magic_number</code>, and TU 2's <code>make_magic</code> will refer to TU 2's <code>piecewise_construct</code> and <code>magic_number</code>. Since the constructor of <code>tuple</code> at issue takes the arguments by reference, no lvalue-to-rvalue conversion is performed, the objects are odr-used, and the exception in the second bullet doesn't apply, and you have an ODR violation.</p>\n<p>(Incidentally, <code>std::tuple</code> doesn't have a <code>piecewise_construct</code> constructor, and in any event such a constructor would presumably take tuples as arguments rather than a plain <code>int</code>, but that's orthogonal to the point the paper is trying to make.)</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-07-27T02:26:50.430", "Id": "31644046", "Score": "7", "CreationDate": "2015-07-27T02:18:50.357", "LastActivityDate": "2015-07-27T02:26:50.430"}, "bq_ids": {"n4140": {"so_31643595_31644046_0": {"section_id": 7043, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_31643595_31644046_0": {"section_id": 6788, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_31643595_31644046_0": {"section_id": 8540, "quality": 0.9705882352941176, "length": 33}}}});