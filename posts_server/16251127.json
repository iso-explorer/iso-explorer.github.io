post_cb({"16251485": {"Id": "16251485", "PostTypeId": "2", "Body": "<p>I'd say yes. A <em>data object</em> is simply a region of storage that contains a value or a group of values. Both <code>int a</code> and <code>float f</code> agree with this definition. If we want to see the differences between those and the \"traditional\" objects in object oriented languages, we should show the concept of <em>data type</em>, which helps the compiler allocate storage for that data object, and interpret its memory values when it is accessed.</p>\n<p>Each data object in C++ must have a data type (identifiers for data objects and data types are established in the variable/constant <em>declaration</em>). In the classification of data types is where we see that <code>int a;</code> and <code>Object a;</code> are not \"quite the same\":</p>\n<p><code>int</code> and <code>float</code> are <em>basic</em> data types, in the sense that they are provided by the language. The <code>Object</code> type in this example would be a <code>derived</code> type because it is created from basic types.</p>\n<p>Data types can be classified in other, often overlapping, groups: For example, one can say that <code>Object</code> is a <em>user-defined</em> type; and that <code>int</code> is a <em>scalar</em> type, because it represents a single data value.</p>\n", "LastEditorUserId": "1914276", "LastActivityDate": "2013-04-27T11:25:41.733", "Score": "1", "CreationDate": "2013-04-27T11:19:26.860", "ParentId": "16251127", "CommentCount": "0", "OwnerUserId": "1914276", "LastEditDate": "2013-04-27T11:25:41.733"}, "16253667": {"Id": "16253667", "PostTypeId": "2", "Body": "<p><strong><h1>No</h1></strong></p>\n<p>(or rather \"arguably not\")</p>\n<p>Ad <em>\"Variables and constants are objects of data types\"</em>:</p>\n<p>Although you can find the phrase \"object of type\" in the C++ Standard (like \"object of type T\" [basic.def.odr]/5) and the C Standard (e.g. \"object of type wchar_t\" 3.7.3), one could argue about the use of the term \"variable\" in your example, at least in C++:</p>\n<p>[basic]/6</p>\n<blockquote>\n<p id=\"so_16251127_16253667_0\">A variable is introduced by the declaration of a reference other than a non-static data member or of an object. The variable\u2019s name denotes the reference or object.</p>\n</blockquote>\n<p>So, <code>int answer = 42; int&amp; deepthought = answer;</code> introduces:</p>\n<ul>\n<li>an object of type <code>int</code></li>\n<li>a variable, name <code>answer</code>, referring to the object above</li>\n<li>a variable, name <code>deepthought</code>, referring to the same object</li>\n</ul>\n<p>But a reference AFAIK is not an object (does not have to be) -- so one could argue that variables are not necessarily objects. Of course, they're not identical, e.g. dynamic memory allocation.</p>\n<hr>\n<p>Ad <em>\"a is object of datatype int and f an object of type float\"</em></p>\n<p>AFAIK that complies to the Standard, although to be more precise, one would have to include something like \"denotes\", e.g. \"<code>a</code> denotes an object of datatype int\".</p>\n<p>But I think there's no ambiguity, therefore I consider it OK.</p>\n</hr>", "LastEditorUserId": "420683", "LastActivityDate": "2013-04-27T16:28:41.120", "Score": "0", "CreationDate": "2013-04-27T15:09:06.087", "ParentId": "16251127", "CommentCount": "1", "OwnerUserId": "420683", "LastEditDate": "2013-04-27T16:28:41.120"}, "16251285": {"Id": "16251285", "PostTypeId": "2", "Body": "<p><code>a</code> and <code>f</code> are objects of type <code>int</code> and type <code>float</code>, respectively. Yes, that contradicts what @Patashu says, and that's because we're using different definitions of \"object\".</p>\n<p>@Patashu uses the definition from object-oriented programming: an object is a thing with methods, etc. And that's perfectly fine.</p>\n<p>However, C++ is a multi-paradigm language -- it supports more than one programming model. The C++ language definition uses the word \"object\" in the broader sense that compiler writers use: an object is a region of storage with various operations that can be performed on that storage. The operations are defined by the object's type. There's a well-defined set of operations that can be applied to an object of type <code>int</code>, so when you know that you're dealing with an <code>int</code> you and the compiler know what things you can do with it and, by implication, what things you can't do with it.</p>\n", "LastActivityDate": "2013-04-27T10:58:24.383", "CommentCount": "0", "CreationDate": "2013-04-27T10:58:24.383", "ParentId": "16251127", "Score": "6", "OwnerUserId": "1593860"}, "bq_ids": {"n4140": {"so_16251127_16251288_0": {"length": 40, "quality": 0.7843137254901961, "section_id": 5790}, "so_16251127_16253667_0": {"length": 14, "quality": 0.875, "section_id": 7029}}, "n3337": {"so_16251127_16251288_0": {"length": 40, "quality": 0.7843137254901961, "section_id": 5563}, "so_16251127_16253667_0": {"length": 14, "quality": 0.875, "section_id": 6775}}, "n4659": {"so_16251127_16251288_0": {"length": 30, "quality": 0.5882352941176471, "section_id": 7247}, "so_16251127_16253667_0": {"length": 14, "quality": 0.875, "section_id": 8526}}}, "16251127": {"ViewCount": "262", "Body": "<p>Can one say <strong>Variables and constants are objects of data types</strong> ?</p>\n<p>I wonder what would be the proper explanation for this</p>\n<pre><code>int a;\n\nfloat f;\n</code></pre>\n<p>Here, Can we say <code>a</code> is an object of type <code>int</code> and <code>f</code> is an object of type <code>float</code>?</p>\n", "AcceptedAnswerId": "16251288", "Title": "Is it technically correct to say variables and constants are objects of data types?", "CreationDate": "2013-04-27T10:43:04.623", "Id": "16251127", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-09-22T20:11:35.253", "LastEditorUserId": "952747", "LastActivityDate": "2013-12-07T22:48:07.023", "Score": "8", "OwnerUserId": "1115185", "Tags": "<c++><c>", "AnswerCount": "4"}, "16251288": {"Id": "16251288", "PostTypeId": "2", "Body": "<h2>Yes</h2>\n<p>Per paragraph \u00a71.8, both <code>a</code> and <code>b</code> are objects of their corresponding types.</p>\n<blockquote>\n<p id=\"so_16251127_16251288_0\"><sup>1</sup> <strong>An object is a region of storage.</strong> [Note: A function is not an object,\n  regardless of whether or not it occupies storage in the way that\n  objects do. \u2014end note ] An object is created by a definition (3.1), by\n  a new-expression (5.3.4) or by the implementation (12.2) when needed.\n  The properties of an object are determined when the object is created.\n  An object can have a name (Clause 3). An object has a storage duration\n  (3.7) which influences its lifetime (3.8). An object has a type (3.9).\n  <strong>The term object type refers to the type with which the object is\n  created</strong>.</p>\n<p id=\"so_16251127_16251288_1\">[intro.object]</p>\n</blockquote>\n<p>and those variables fit in the above quoted definition.</p>\n", "LastEditorUserId": "952747", "LastActivityDate": "2013-12-07T22:48:07.023", "Score": "12", "CreationDate": "2013-04-27T10:58:31.327", "ParentId": "16251127", "CommentCount": "0", "OwnerUserId": "952747", "LastEditDate": "2013-12-07T22:48:07.023"}});