post_cb({"bq_ids": {"n4140": {"so_13171054_13171154_1": {"length": 20, "quality": 1.0, "section_id": 5924}, "so_13171054_13171148_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5923}, "so_13171054_13171148_1": {"length": 12, "quality": 1.0, "section_id": 7216}}, "n3337": {"so_13171054_13171154_1": {"length": 20, "quality": 1.0, "section_id": 5696}, "so_13171054_13171148_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5695}, "so_13171054_13171148_1": {"length": 12, "quality": 1.0, "section_id": 6960}, "so_13171054_13171154_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 5695}}, "n4659": {"so_13171054_13171154_1": {"length": 20, "quality": 1.0, "section_id": 7398}, "so_13171054_13171148_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7397}, "so_13171054_13171148_1": {"length": 12, "quality": 1.0, "section_id": 8725}}}, "13171054": {"ViewCount": "2675", "Body": "<blockquote>\n<p id=\"so_13171054_13171054_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/308364/c-bitfield-packing-with-bools\">C++ bitfield packing with bools</a> </br></p>\n</blockquote>\n<p>Is it guaranteed to be safe to use C++'s <code>bool</code> keyword inside a bitfield definition? </p>\n<p>Something like:</p>\n<pre><code>struct flags {\n    bool a : 1;\n    bool b : 1;\n}\n</code></pre>\n", "AcceptedAnswerId": "13171148", "Title": "Is bool safe in a bitfield defintion?", "CreationDate": "2012-11-01T04:43:29.520", "Id": "13171054", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:07.433", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-17T06:34:45.747", "ClosedDate": "2012-11-01T06:30:05.487", "Score": "4", "OwnerUserId": "43904", "Tags": "<c++><boolean><bit-fields>", "AnswerCount": "2"}, "13171148": {"Id": "13171148", "PostTypeId": "2", "Body": "<p>Yes.  In practice, you can use <code>sizeof(bool) * CHAR_BIT</code> as your guide to knowing how many bits are available.</p>\n<p><a href=\"http://www-d0.fnal.gov/~dladams/cxx_standard.pdf\" rel=\"nofollow\">From C++98</a>, \u00a7 9.6.3</p>\n<blockquote>\n<p id=\"so_13171054_13171148_0\">A bit-field shall have integral or enumeration type (3.9.1).</p>\n</blockquote>\n<p>From C++98, \u00a7 3.9.1.7</p>\n<blockquote>\n<p id=\"so_13171054_13171148_1\">Types bool, char, wchar_t, and the signed and unsigned integer types are collectively called integral\n  types</p>\n</blockquote>\n", "LastEditorUserId": "2352506", "LastActivityDate": "2014-09-17T06:34:45.747", "Score": "4", "CreationDate": "2012-11-01T04:53:11.403", "ParentId": "13171054", "CommentCount": "0", "OwnerUserId": "489590", "LastEditDate": "2014-09-17T06:34:45.747"}, "13171154": {"Id": "13171154", "PostTypeId": "2", "Body": "<p>From C++03 9.6 \"Bit-fields\":</p>\n<blockquote>\n<p id=\"so_13171054_13171154_0\">A bit-field shall have integral or enumeration type (3.9.1).  It is\n  implementation-defined whether a plain (neither explicitly signed nor\n  unsigned) char, short, int or long bit-field is signed or unsigned.  A\n  bool value can successfully be stored in a bit-field of any nonzero\n  size. ...</p>\n<p id=\"so_13171054_13171154_1\">If the value true or false is stored into a bit-field of type bool of\n  any size (including a one bit bit-field), the original bool value and\n  the value of the bit-field shall compare equal. ...</p>\n</blockquote>\n<p>3.9.1/7 \"Fundamental types\" specifies that <code>bool</code> is an integral type.</p>\n", "LastActivityDate": "2012-11-01T04:53:57.843", "CommentCount": "0", "CreationDate": "2012-11-01T04:53:57.843", "ParentId": "13171054", "Score": "5", "OwnerUserId": "12711"}});