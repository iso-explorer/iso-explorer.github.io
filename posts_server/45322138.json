post_cb({"45322138": {"ViewCount": "1127", "Body": "<p>The code below prints 'operator bool' when used in the if statement and 'operator void*' when it needs a bool for function call. </p>\n<p>Why isn't it using <code>operator bool</code> for the function call too? And how to make it use it in both cases?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    explicit operator bool() const\n    {\n        std::cout &lt;&lt; \"operator bool\" &lt;&lt; std::endl;\n        return true;\n    }\n\n    operator void*() const\n    {\n        std::cout &lt;&lt; \"operator void*\" &lt;&lt; std::endl;\n        return 0;\n    }\n};\n\nvoid f(bool valid)\n{\n    std::cout &lt;&lt; \"f called \" &lt;&lt; valid &lt;&lt; std::endl;\n}\n\nint main(int argc, char *argv[])\n{\n    A a;\n\n    if(a)\n        std::cout &lt;&lt; \"if a\" &lt;&lt; std::endl;\n\n    f(a);\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "45322245", "Title": "bool vs void* casts on the same object", "CreationDate": "2017-07-26T08:58:54.060", "Id": "45322138", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-07-26T09:09:55.560", "LastEditorUserId": "3980929", "LastActivityDate": "2017-07-26T09:26:21.037", "Score": "21", "OwnerUserId": "8368714", "Tags": "<c++><c++11><casting>", "AnswerCount": "2"}, "45322245": {"Id": "45322245", "PostTypeId": "2", "Body": "<p>In an <code>if</code> statement, implicit and explicit conversion operators are considered. Because <code>A</code> has an <code>operator bool</code>, it chooses that one, as it is a better match than converting <code>A</code> to a <code>void*</code> and then converting that to <code>bool</code>.</p>\n<p>But in every other statement, which are not conditions (<code>if</code>, <code>while</code>, ...), the explicit conversion operators do not participate in overload resolution, and the only valid operator then is <code>operator void*</code>, which can be used because there is an implicit conversion from pointers to <code>bool</code>.</p>\n<p>If you want <code>operator bool</code> to be selected, you need make it non-<code>explicit</code>, or use a cast (because that's what marking it <code>explicit</code> means, making sure that one has to be explicit to use it):</p>\n<pre><code>f(static_cast&lt;bool&gt;(a));\n</code></pre>\n", "LastActivityDate": "2017-07-26T09:04:17.027", "CommentCount": "3", "CreationDate": "2017-07-26T09:04:17.027", "ParentId": "45322138", "Score": "21", "OwnerUserId": "3980929"}, "45322372": {"Id": "45322372", "PostTypeId": "2", "Body": "<p>The reason is that the operator is declared with the function specifier <code>explicit</code>.</p>\n<p>In the condition of the if statement the value is contextually converted to the type bool.</p>\n<p>From the C++ Standard (4 Standard conversions)</p>\n<blockquote>\n<p id=\"so_45322138_45322372_0\">2 [ Note: expressions with a given type will be implicitly converted\n  to other types in several contexts:</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_45322138_45322372_1\">\u2014 When used in the condition of an if statement or iteration statement\n  (6.4, 6.5). The destination type is bool.</p>\n</blockquote>\n<p>However when the value is passed to the function as an argument there is used the so-called copy initialization. In this case the function specifier explicit prevents converting to the type bool.</p>\n<p>From the C++ Standard (12.3.2 Conversion functions)</p>\n<blockquote>\n<p id=\"so_45322138_45322372_2\">2 <strong>A conversion function may be explicit (7.1.2), in which case it is\n  only considered as a user-defined conversion for direct-initialization</strong>\n  (8.5). Otherwise, user-defined conversions are not restricted to use\n  in assignments and initializations.</p>\n</blockquote>\n<p>A simple way to force calling the bool operator is the following</p>\n<pre><code>f( bool( a ) );\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-07-26T09:26:21.037", "Score": "5", "CreationDate": "2017-07-26T09:09:26.157", "ParentId": "45322138", "CommentCount": "2", "OwnerUserId": "2877241", "LastEditDate": "2017-07-26T09:26:21.037"}, "bq_ids": {"n4140": {"so_45322138_45322372_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 1}, "so_45322138_45322372_2": {"length": 15, "quality": 0.9375, "section_id": 392}, "so_45322138_45322372_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 1}}, "n3337": {"so_45322138_45322372_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 1}, "so_45322138_45322372_2": {"length": 15, "quality": 0.9375, "section_id": 383}, "so_45322138_45322372_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 1}}, "n4659": {"so_45322138_45322372_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 1}, "so_45322138_45322372_2": {"length": 15, "quality": 0.9375, "section_id": 409}, "so_45322138_45322372_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 1}}}});