post_cb({"18790996": {"Id": "18790996", "PostTypeId": "2", "Body": "<p>It's a limitation of the language.</p>\n<p>To help mapping <code>&lt;&lt;</code> and <code>&gt;&gt;</code> directly to machine language instructions the language inherits the hardware limitations where shift counts that are negative or bigger than the register size are often not doing what you'd expect.</p>\n<p>For example it would be nice also to have</p>\n<pre><code>15 &lt;&lt; -1\n</code></pre>\n<p>to mean the same as</p>\n<pre><code>15 &gt;&gt; 1\n</code></pre>\n<p>but unfortunately this is not the case</p>\n", "LastEditorUserId": "320726", "LastActivityDate": "2013-09-13T16:35:40.230", "Score": "1", "CreationDate": "2013-09-13T16:25:11.940", "ParentId": "18790923", "CommentCount": "0", "OwnerUserId": "320726", "LastEditDate": "2013-09-13T16:35:40.230"}, "bq_ids": {"n4140": {"so_18790923_18790983_0": {"length": 26, "quality": 0.896551724137931, "section_id": 6146}}, "n3337": {"so_18790923_18790983_0": {"length": 26, "quality": 0.896551724137931, "section_id": 5909}}, "n4659": {"so_18790923_18790983_0": {"length": 26, "quality": 0.896551724137931, "section_id": 7642}}}, "18790923": {"ViewCount": "651", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n   cout &lt;&lt; \"sizeof(unsigned int): \" &lt;&lt; sizeof(unsigned int) &lt;&lt; endl; \n   unsigned a = 1;\n   int i = 0;\n   while (a) {         \n        cout &lt;&lt; \"a[\" &lt;&lt; i++ &lt;&lt; \"]: \" &lt;&lt; a &lt;&lt; endl;        \n        a &lt;&lt;= 1;\n   }\n\n   cout &lt;&lt; \"a[\" &lt;&lt; i &lt;&lt; \"]: \" &lt;&lt; a &lt;&lt; endl;\n\n   unsigned b = 1;\n   unsigned c = (b &lt;&lt; 31);\n   unsigned d = (b &lt;&lt; 32);\n\n   cout &lt;&lt; \"c: \" &lt;&lt; c &lt;&lt; endl;\n   cout &lt;&lt; \"d: \" &lt;&lt; d &lt;&lt; endl;\n\n   return 0;\n}\n</code></pre>\n<p>/* Output <a href=\"http://www.compileonline.com/compile_cpp_online.php\" rel=\"nofollow\">http://www.compileonline.com/compile_cpp_online.php</a> */</p>\n<pre><code>Compiling the source code....\n$g++ main.cpp -o demo -lm -pthread -lgmpxx -lgmp -lreadline 2&gt;&amp;1\nmain.cpp: In function 'int main()':\nmain.cpp:19:23: warning: left shift count &gt;= width of type [enabled by default]\n\nExecuting the program....\n$demo\n\nsizeof(unsigned int): 4\na[0]: 1\na[1]: 2\na[2]: 4\na[3]: 8\na[4]: 16\na[5]: 32\na[6]: 64\na[7]: 128\na[8]: 256\na[9]: 512\na[10]: 1024\na[11]: 2048\na[12]: 4096\na[13]: 8192\na[14]: 16384\na[15]: 32768\na[16]: 65536\na[17]: 131072\na[18]: 262144\na[19]: 524288\na[20]: 1048576\na[21]: 2097152\na[22]: 4194304\na[23]: 8388608\na[24]: 16777216\na[25]: 33554432\na[26]: 67108864\na[27]: 134217728\na[28]: 268435456\na[29]: 536870912\na[30]: 1073741824\na[31]: 2147483648\na[32]: 0\nc: 2147483648\nd: 1\n</code></pre>\n<p>Question&gt; As you can see <code>a[32</code> is equal to 0. Now why <code>d</code> is NOT <code>0</code> but <code>1</code>?</p>\n", "Title": "Why Left-Shifting an unsigned number 32 times doesn't produce a ZERO?", "CreationDate": "2013-09-13T16:20:39.167", "LastActivityDate": "2013-09-13T16:35:40.230", "CommentCount": "1", "LastEditDate": "2013-09-13T16:25:31.260", "PostTypeId": "1", "LastEditorUserId": "291737", "Id": "18790923", "Score": "4", "OwnerUserId": "391104", "Tags": "<c++><undefined-behavior>", "AnswerCount": "3"}, "18790983": {"Id": "18790983", "PostTypeId": "2", "Body": "<p><code>b &lt;&lt; 32</code> is undefined behavior because the size of <code>b</code>(<code>unsigned int</code>) is 32-bit in your machine.</p>\n<blockquote>\n<h3>C++11 \u00a75.8 Shift operators</h3>\n<p id=\"so_18790923_18790983_0\">The operands shall be of integral or unscoped enumeration type and integral promotions are performed. The type of the result is that of the promoted left operand. <strong>The behavior is undefined if the right operand is negative, or greater than or equal to the length in bits of the promoted left operand.</strong></p>\n</blockquote>\n", "LastActivityDate": "2013-09-13T16:24:12.477", "CommentCount": "0", "CreationDate": "2013-09-13T16:24:12.477", "ParentId": "18790923", "Score": "5", "OwnerUserId": "1009479"}, "18790937": {"Id": "18790937", "PostTypeId": "2", "Body": "<p>This is undefined behavior in C/C++.</p>\n<p>The standard specifically leaves this undefined because different CPUs will do different things when presented with such a shift. Specifically, on 32-bit Intel, I believe only the low 5 bits of the shift amount are used by the CPU, and the rest of the bits are just ignored. If I remember correctly, PowerPC and 64-bit Intel both use the low 6 bits and ignore the rest.</p>\n<p>A higher level language might attempt to smooth this out by correcting the results to be more logically consistent, but a low-level language like C/C++ is designed to be \"close to the metal\" and will want to generate a single bit-shift instruction for the <code>&lt;&lt;</code> operator.</p>\n", "LastActivityDate": "2013-09-13T16:21:22.180", "CommentCount": "5", "CreationDate": "2013-09-13T16:21:22.180", "ParentId": "18790923", "Score": "13", "OwnerUserId": "291737"}});