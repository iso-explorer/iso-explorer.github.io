post_cb({"37952267": {"CreationDate": "2016-06-21T18:45:12.170", "ViewCount": "225", "Id": "37952267", "AcceptedAnswerId": "37952576", "Score": "0", "Title": "MSVC 2015 cannot compile constexpr atan", "LastEditorUserId": "6342220", "CommentCount": "2", "Body": "<p>I have used <code>Mingw-w64</code> compiler in my project. Now I am compiling the project with <code>MSVC2015</code>. The following line gives an error:</p>\n<pre><code>constexpr double pi = 4*std::atan(1);\n</code></pre>\n<p>error:</p>\n<pre><code>error: C2131: expression did not evaluate to a constant\n</code></pre>\n<p>However it compiled in mingw without any problems. </p>\n", "Tags": "<c++><visual-studio><c++11>", "LastEditDate": "2016-06-21T18:51:21.957", "LastActivityDate": "2016-06-21T19:02:04.333", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "6342220"}, "37952576": {"CommentCount": "0", "Body": "<p>I think MSVC is right in this case, from \u00a726.8</p>\n<blockquote>\n<p id=\"so_37952267_37952576_0\">In addition to the <code>double</code> versions of the math functions in , C++ adds <code>float</code> and <code>long double</code> overloaded versions of these functions, <strong>with the same semantics</strong>.</p>\n</blockquote>\n<p>This would imply that the math functions are not <code>constexpr</code>, or else they would not have the same semantics as their C equivalent.</p>\n<p>So, as <code>std::atan</code> is not a <code>constexpr</code> function, it is illegal to use it in a <code>constexpr</code> expression.</p>\n", "CreationDate": "2016-06-21T19:02:04.333", "ParentId": "37952267", "Id": "37952576", "LastActivityDate": "2016-06-21T19:02:04.333", "PostTypeId": "2", "Score": "0", "OwnerUserId": "3980929"}, "bq_ids": {"n4140": {"so_37952267_37952576_0": {"length": 14, "quality": 1.0, "section_id": 3873}}, "n3337": {"so_37952267_37952576_0": {"length": 14, "quality": 1.0, "section_id": 3733}}}});