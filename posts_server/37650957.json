post_cb({"bq_ids": {"n4140": {"so_37650957_37651093_1": {"length": 49, "quality": 0.9074074074074074, "section_id": 3919}}, "n3337": {"so_37650957_37651093_1": {"length": 49, "quality": 0.9074074074074074, "section_id": 3779}}, "n4659": {"so_37650957_37651093_1": {"length": 52, "quality": 0.9629629629629629, "section_id": 4805}}}, "37651093": {"Id": "37651093", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37650957_37651093_0\">May this global function suffer from static initialization fiasco?</p>\n</blockquote>\n<p>No, it wouldn't. You are safe... :-)</p>\n<p>Quoting the C++ standard draft (emphasis mine)...</p>\n<blockquote>\n<p id=\"so_37650957_37651093_1\"><a href=\"http://eel.is/c++draft/stmt.dcl#4\">$6.7: 4:</a> <strong>Dynamic initialization of a block-scope variable with\n  static storage duration</strong> ([basic.stc.static]) <strong>or thread storage\n  duration</strong> ([basic.stc.thread]) <strong>is performed the first time control\n  passes through its declaration; such a variable is considered\n  initialized upon the completion of its initialization.</strong> If the\n  initialization exits by throwing an exception, the initialization is\n  not complete, so it will be tried again the next time control enters\n  the declaration. <strong>If control enters the declaration concurrently\n  while the variable is being initialized, the concurrent execution\n  shall wait for completion of the initialization</strong></p>\n</blockquote>\n<p>Also, see: <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables\">Static local variables</a></p>\n<p>Since your function is a function template <code>template &lt;typename TFn&gt;</code>, for each separate instantiation (substitution of <code>TFn</code>), <code>static const unsigned int NThread = std::thread::hardware_concurrency();</code> will be evaluated</p>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2016-06-06T07:14:46.320", "Score": "7", "CreationDate": "2016-06-06T06:46:48.007", "ParentId": "37650957", "CommentCount": "4", "LastEditDate": "2016-06-06T07:14:46.320", "OwnerUserId": "1621391"}, "37650957": {"ViewCount": "406", "Body": "<p>May this global function suffer from static initialization fiasco?</p>\n<pre><code>template &lt;typename TFn&gt;\nvoid ParallelFor(int iIni,int iFin,TFn Fn)    \n{\n  static const unsigned int NThread= std::thread::hardware_concurrency();\n  // ...    \n}\n</code></pre>\n", "AcceptedAnswerId": "37651093", "Title": "std::thread::hardware_concurrency and static initialization", "CreationDate": "2016-06-06T06:38:18.083", "Id": "37650957", "CommentCount": "1", "LastEditDate": "2016-06-06T08:11:13.630", "PostTypeId": "1", "LastEditorUserId": "3235496", "LastActivityDate": "2016-06-06T08:11:13.630", "Score": "8", "OwnerUserId": "6350078", "Tags": "<c++><multithreading><c++11><static><static-order-fiasco>", "AnswerCount": "1"}});