post_cb({"bq_ids": {"n4659": {"so_42670137_42673379_2": {"section_id": 6891, "quality": 0.8461538461538461, "length": 11}, "so_42670137_42673379_0": {"section_id": 6891, "quality": 0.6363636363636364, "length": 7}}}, "42673379": {"ParentId": "42670137", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>In C++17, this is well formed:</p>\n<pre><code>C c1{};\n</code></pre>\n<p>due to <a href=\"http://wg21.link/p0091\" rel=\"nofollow noreferrer\">deduction for class templates</a>. We'd synthesize a function for each constructor (and deduction guide) and perform overload resolution:</p>\n<pre><code>template &lt;class T=int&gt; C&lt;T&gt; foo();\ntemplate &lt;class T=int&gt; C&lt;T&gt; foo(C&lt;T&gt; const&amp;);\ntemplate &lt;class T=int&gt; C&lt;T&gt; foo(C&lt;T&gt;&amp;&amp;);\n</code></pre>\n<p>The first one is a viable overload, and the other two are not, so deduction succeeds and the placeholder <code>C</code> is replaced by the deduced type <code>C&lt;int&gt;</code>.</p>\n<p>However, grammatically, an initializer is <em>required</em> in [dcl.type.class.deduct]:</p>\n<blockquote>\n<p id=\"so_42670137_42673379_0\">If a placeholder for a deduced class type appears as a <em>decl-specifier</em> in the <em>decl-specifier-seq</em> of a <em>simple-declaration</em>, the <em>init-declarator</em> of that declaration shall be of the form:</p>\n<p id=\"so_42670137_42673379_1\"><em>declarator-id</em> <em>attribute-specifier-seq</em><sub>opt</sub> <em>initializer</em></p>\n<p id=\"so_42670137_42673379_2\">The placeholder is replaced by the return type of the function selected by overload resolution for class\n  template deduction (13.3.1.8).</p>\n</blockquote>\n<p><s>But <code>C c;</code> contains no <em>initializer</em>, so it doesn't fit grammatically. This is a gcc bug for allowing this. Although it seems odd to disallow this specifically.</s> Apparently, this restriction has been lifted in Kona, so <code>C c;</code> will indeed be well-formed in C++17. I will update the answer once new wording comes out.</p>\n<hr/>\n<p>Before C++17, the statement was ill-formed simply because <code>C</code> is not a type. <code>C</code> and <code>C&lt;&gt;</code> are not the same thing. There was, and still is no, special consideration for having all defaulted template parameters. Types and class templates are different, and continue to be treated differently. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-03-09T03:08:26.290", "Id": "42673379", "Score": "4", "CreationDate": "2017-03-08T14:01:51.553", "LastActivityDate": "2017-03-09T03:08:26.290"}, "42670137": {"CommentCount": "8", "AcceptedAnswerId": "42673379", "CreationDate": "2017-03-08T11:30:08.050", "LastActivityDate": "2017-03-09T03:08:26.290", "Title": "Why is <> required when specifying a template class which has defaults for all its template parameters?", "ViewCount": "300", "PostTypeId": "1", "Id": "42670137", "Score": "7", "Body": "<p>Is there a good reason why <code>&lt;&gt;</code> is required when specifying a template class which has defaults for all its template parameters?</p>\n<p>e.g.</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T = int&gt;\nclass C {\npublic:\n    T obj = 0;\n};\n\nint main()\n{\n    C c1; // Error on almost all compilers (see note below)\n    C&lt;&gt; c2;\n    std::cout &lt;&lt; c1.obj &lt;&lt; \" \" &lt;&lt; c2.obj &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>An example disadvantage of this is that if you have a class which is already used in various places, and you later refactor it to be a class template with default parameters for its template arguments, then you have to add <code>&lt;&gt;</code> in all the places which use the class.</p>\n<p>Note: it looks like GCC latest HEAD (7.0.1) <a href=\"http://melpon.org/wandbox/permlink/oum67b1nJzBcedsD\" rel=\"noreferrer\">accepts</a> the syntax without <code>&lt;&gt;</code>. Earlier versions do not and neither does any version of Clang. Is this a bug in the latest GCC HEAD? Or perhaps C++17's standard now accepts the syntax without <code>&lt;&gt;</code> and GCC is just ahead here?</p>\n", "Tags": "<c++><templates><c++1z>", "OwnerUserId": "125997", "AnswerCount": "1"}});