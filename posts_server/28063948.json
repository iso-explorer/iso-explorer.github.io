post_cb({"28064170": {"ParentId": "28063948", "CommentCount": "0", "Body": "<p>C++03 standard forbids types with non-trivial constructor(<code>std::string</code> constructor is non-trivial) to be used in <code>union</code>. This restriction has been removed in C++11.\nAlso you need to define a constructor if the union has member with non-trivial constructor.</p>\n", "OwnerUserId": "1580875", "PostTypeId": "2", "Id": "28064170", "Score": "0", "CreationDate": "2015-01-21T09:55:32.417", "LastActivityDate": "2015-01-21T09:55:32.417"}, "28064049": {"ParentId": "28063948", "CommentCount": "0", "Body": "<p>C++11 did indeed introduce the possibility to include arbitrary types in unions. However, you need to give the union all special member functions which those types have. It's nicely summarised in C++11 9.5/2:</p>\n<blockquote>\n<p id=\"so_28063948_28064049_0\">[ <em>Note:</em> If any non-static data member of a union has a non-trivial default\n  constructor (12.1), copy constructor (12.8), move constructor (12.8), copy assignment operator (12.8), move\n  assignment operator (12.8), or destructor (12.4), the corresponding member function of the union must be\n  user-provided or it will be implicitly deleted (8.4.3) for the union. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>Which means that if you want your union to have a default constructor, you must define it, something like this:</p>\n<pre><code>union foo {\n    std::string dunno;\n    foo() : dunno() {}\n} bar;\n</code></pre>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "28064049", "Score": "9", "CreationDate": "2015-01-21T09:49:49.117", "LastActivityDate": "2015-01-21T09:49:49.117"}, "bq_ids": {"n4140": {"so_28063948_28064049_0": {"section_id": 5914, "quality": 0.7368421052631579, "length": 28}}, "n3337": {"so_28063948_28064049_0": {"section_id": 5686, "quality": 0.7368421052631579, "length": 28}}, "n4659": {"so_28063948_28064049_0": {"section_id": 7406, "quality": 0.7368421052631579, "length": 28}}}, "28063948": {"CommentCount": "0", "ViewCount": "150", "ClosedDate": "2015-01-21T11:28:48.380", "CreationDate": "2015-01-21T09:44:53.977", "LastActivityDate": "2015-01-21T09:55:32.417", "Title": "Union won't take members of type 'string'", "PostTypeId": "1", "Id": "28063948", "Score": "0", "Body": "<p>Whenever I tried to compile this <strong>code</strong>: </p>\n<pre><code>union foo {\n    std::string dunno;\n} bar;\n</code></pre>\n<p>It gives me this bunch of errors. What's wrong with it?: </p>\n<pre><code>_foo.cpp:6:3: error: use of deleted function 'foo::foo()'\n } bar;\n   ^\n_foo.cpp:4:7: note: 'foo::foo()' is implicitly deleted because the default definition would be ill-formed:\n union foo {\n       ^\n_foo.cpp:5:14: error: union member 'foo::dunno' with non-trivial 'std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::basic_string() [with _CharT = char; _Traits = std::char_traits&lt;char&gt;; _Alloc = std::allocator&lt;char&gt;]'\n  std::string dunno;\n              ^\n_foo.cpp: In function 'void __static_initialization_and_destruction_0(int, int)':\n_foo.cpp:6:3: error: use of deleted function 'foo::~foo()'\n } bar;\n   ^\n_foo.cpp:4:7: note: 'foo::~foo()' is implicitly deleted because the default definition would be ill-formed:\n union foo {\n       ^\n_foo.cpp:5:14: error: union member 'foo::dunno' with non-trivial 'std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::~basic_string() [with _CharT = char; _Traits = std::char_traits&lt;char&gt;; _Alloc = std::allocator&lt;char&gt;]'\n  std::string dunno;\n              ^\n_foo.cpp: In function 'void __tcf_1()':\n_foo.cpp:6:3: error: use of deleted function 'foo::~foo()'\n } bar;\n   ^\n</code></pre>\n<p>Can you explain, why?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3458902", "AnswerCount": "2"}});