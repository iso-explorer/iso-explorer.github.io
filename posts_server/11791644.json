post_cb({"11791726": {"ParentId": "11791644", "CommentCount": "0", "Body": "<p>When copy elision is allowed, no copying will be performed, so there will be no call to the move copy constructor, even if the object is movable. So copy elision wins over move, and you cannot be certain (at least not in a portable way) when it will take place. So this is one scenario when side effects on move copy construction would be a bad idea.</p>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "11791726", "Score": "3", "CreationDate": "2012-08-03T08:05:15.710", "LastActivityDate": "2012-08-03T08:05:15.710"}, "11791644": {"CommentCount": "1", "AcceptedAnswerId": "11791712", "PostTypeId": "1", "LastEditorUserId": "27615", "CreationDate": "2012-08-03T08:00:04.500", "LastActivityDate": "2012-08-03T08:12:33.703", "LastEditDate": "2012-08-03T08:12:33.703", "ViewCount": "249", "FavoriteCount": "1", "Title": "C++11 move constructor with side effects", "Id": "11791644", "Score": "6", "Body": "<p>In C++ one cannot rely on the copy constructor being called from a return statement because of a special clause in the standard that allows a compiler to omit a call to the copy constructor resulting from a return statement, even if the copy constructor has side effects. Thus, it is bad style to write a copy constructor that does something else than just copy constructing the instance.</p>\n<p>Are there similar statements in the C++11 standard that allow the compiler to eliminate a call to the move constructor under certain circumstances - and if so, what are those circumstances?</p>\n", "Tags": "<c++><c++11><move-semantics><move-constructor>", "OwnerUserId": "712302", "AnswerCount": "3"}, "11791791": {"ParentId": "11791644", "CommentCount": "0", "Body": "<p>Elision is defined identically for both copy and move. The Standard does not have any specific wording for move, because they're defined identically. </p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "11791791", "Score": "1", "CreationDate": "2012-08-03T08:09:02.207", "LastActivityDate": "2012-08-03T08:09:02.207"}, "bq_ids": {"n4140": {"so_11791644_11791712_0": {"section_id": 480, "quality": 0.95, "length": 19}}, "n3337": {"so_11791644_11791712_0": {"section_id": 471, "quality": 1.0, "length": 20}}, "n4659": {"so_11791644_11791712_0": {"section_id": 502, "quality": 0.95, "length": 19}}}, "11791712": {"ParentId": "11791644", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Copy-elision applies just the same to move construction, it's the exact same clause and both the elision of copy construction and move construction is collectively called \"copy-elision\".</p>\n<p><code>\u00a712.8 [class.copy] p31</code></p>\n<blockquote>\n<p id=\"so_11791644_11791712_0\">When certain criteria are met, an implementation is allowed to omit the copy/<strong>move construction</strong> of a class object, even if the copy/<strong>move constructor</strong> and/or destructor for the object have side effects. [...]</p>\n</blockquote>\n", "OwnerUserId": "500104", "LastEditorUserId": "500104", "LastEditDate": "2012-08-03T08:10:35.640", "Id": "11791712", "Score": "9", "CreationDate": "2012-08-03T08:04:36.183", "LastActivityDate": "2012-08-03T08:10:35.640"}});