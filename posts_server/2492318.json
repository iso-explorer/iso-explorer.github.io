post_cb({"2492336": {"Id": "2492336", "PostTypeId": "2", "Body": "<p>Since the variables your calculation depend on are already initialized at the time of the call, it should not be undefined behavior. See <a href=\"https://stackoverflow.com/questions/2243786/inititializing-members-with-members\">this</a> question for related information.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-03-22T13:00:22.250", "Score": "3", "CreationDate": "2010-03-22T13:00:22.250", "ParentId": "2492318", "CommentCount": "3", "OwnerUserId": "160206", "LastEditDate": "2017-05-23T12:19:05.107"}, "bq_ids": {"n4140": {"so_2492318_2492395_0": {"length": 39, "quality": 0.9069767441860465, "section_id": 441}}, "n3337": {"so_2492318_2492395_0": {"length": 39, "quality": 0.9069767441860465, "section_id": 432}}, "n4659": {"so_2492318_2492395_0": {"length": 37, "quality": 0.8604651162790697, "section_id": 461}}}, "2492395": {"Id": "2492395", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_2492318_2492395_0\">12.6.2.8: Member functions (including virtual member functions, 10.3) can be called for an object under construction. Similarly,\n  an object under construction can be the operand of the typeid operator (5.2.8) or of a dynamic_cast (5.2.7). However,\n  if these operations are performed in a ctor-initializer (or in a function called directly or indirectly from a ctor-initializer)\n  before all the mem-initializers for base classes have completed, the result of the operation is undefined.</p>\n</blockquote>\n<p>So you can initialize your class members this way, but not base classes. And, as others pointed, you should be aware of members initialization order, if your function uses some of their values.</p>\n", "LastActivityDate": "2010-03-22T13:10:15.100", "CommentCount": "1", "CreationDate": "2010-03-22T13:10:15.100", "ParentId": "2492318", "Score": "8", "OwnerUserId": "113662"}, "2492373": {"Id": "2492373", "PostTypeId": "2", "Body": "<p>Not it's not undefined, but you have to be absolutely sure that those member functions are only using initialised values. Note also that values are initialised in the <strong>order that they appear in the class</strong> <em>not</em> the order they appear in the initialisation list. For example:</p>\n<pre><code>struct Foo\n{\n  int a, b;\n  int c;\n  Foo(): c(1), a(1), b(1) {}\n};\n</code></pre>\n<p>In that constructor, the variables are initialised in the order <strong>a, b, then c</strong>, the order in the list means nothing. So if you want the value of <code>a</code> to be initialised using some calculation on <code>b</code> and <code>c</code> then you'll need to move the declaration of <code>a</code> to a point after that of <code>b</code> and <code>c</code>.</p>\n", "LastActivityDate": "2010-03-22T13:06:25.147", "CommentCount": "2", "CreationDate": "2010-03-22T13:06:25.147", "ParentId": "2492318", "Score": "0", "OwnerUserId": "235825"}, "2492318": {"ViewCount": "147", "Body": "<p>Consider the following code:</p>\n<pre><code>struct Calc\n{\n   Calc(const Arg1 &amp; arg1, const Arg2 &amp; arg2, /* */ const ArgN &amp; argn) :\n      arg1(arg1), arg2(arg2), /* */ argn(argn), \n      coef1(get_coef1()), coef2(get_coef2()) \n   {\n   }\n\n   int Calc1();\n   int Calc2();\n   int Calc3();\n\nprivate:\n  const Arg1 &amp; arg1;\n  const Arg2 &amp; arg2;\n  // ...\n  const ArgN &amp; argn;\n\n  const int coef1; // I want to use const because \n  const int coef2; //      no modification is needed.\n\n  int get_coef1() const {\n     // calc coef1 using arg1, arg2, ..., argn;\n     // undefined behavior?     \n  }\n  int get_coef2() const {\n     // calc coef2 using arg1, arg2, ..., argn and coef1;\n     // undefined behavior?\n  }\n\n};\n</code></pre>\n<p><code>struct Calc</code> is not completely defined when I call <code>get_coef1</code> and <code>get_coef2</code> \nIs this code valid? Can I get UB?</p>\n", "AcceptedAnswerId": "2492395", "Title": "Is it undefined behavior in the case of the private functions call in the initializer list?", "CreationDate": "2010-03-22T12:58:28.573", "Id": "2492318", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-03-22T13:11:15.300", "Score": "5", "OwnerUserId": "124161", "Tags": "<c++><constructor><const><undefined-behavior>", "AnswerCount": "3"}});