post_cb({"11118938": {"ParentId": "11118919", "Score": "27", "CreationDate": "2012-06-20T11:52:15.457", "Id": "11118938", "OwnerUserId": "673730", "LastActivityDate": "2012-06-20T11:52:15.457", "Body": "<p>There's no other difference, <strong>but</strong> the third one you specify isn't correct:</p>\n<blockquote>\n<p id=\"so_11118919_11118938_0\">Class can take part in template while structures cannot.</p>\n</blockquote>\n<p>In case of templates, the <code>class</code> keyword is just syntactic sugar, it doesn't mean the type has to be an actual class. Generally, programmers prefer <code>typename</code> for basic types and <code>class</code> for classes or structs, but that's just by convention.</p>\n<p>Other than that, you can use both <code>class</code> and <code>struct</code> to specialize templates.</p>\n", "PostTypeId": "2", "CommentCount": "2"}, "11118919": {"Tags": "<c++>", "ViewCount": "3892", "LastEditDate": "2012-06-20T12:05:50.017", "CreationDate": "2012-06-20T11:51:00.553", "LastEditorUserId": "1347366", "Title": "structure vs class", "CommentCount": "5", "AcceptedAnswerId": "11118938", "Score": "14", "OwnerUserId": "1347366", "Id": "11118919", "LastActivityDate": "2012-06-20T16:07:00.203", "Body": "<p>Today, I was curious to find some of differences between a structure and a class, in C++. So, I found some of the differences:</p>\n<ol>\n<li>In a structure, by default members are public while private in class.    </li>\n<li>Inheritance in case of a structure is public by default, while private in case of class.</li>\n<li>Classes can take part in templates, while structures cannot.</li>\n</ol>\n<p>click here to see that a <strong>struct</strong> cannot be used in place of <strong>class</strong> in case of <strong>template.</strong>\n<a href=\"http://ideone.com/p5G57\">http://ideone.com/p5G57</a></p>\n<pre><code>template&lt;struct T&gt; void fun(T i)\n{\n    cout&lt;&lt;i&lt;&lt;endl;\n}\n\nint main()\n{\n    int i=10;\n    fun&lt;int&gt;(i);\n    return 0;\n}\n</code></pre>\n<p>It gives the errors:</p>\n<pre><code>prog.cpp:4: error: \u2018struct T\u2019 is not a valid type for a template constant parameter\nprog.cpp: In function \u2018void fun(T)\u2019:\nprog.cpp:4: error: \u2018i\u2019 has incomplete type\nprog.cpp:4: error: forward declaration of \u2018struct T\u2019\nprog.cpp: In function \u2018int main()\u2019:\nprog.cpp:12: error: no matching function for call to \u2018fun(int&amp;)\u2019\n</code></pre>\n<p>However, if <strong>struct</strong> is replaced with <strong>class</strong>, it works perfectly. see here: <a href=\"http://ideone.com/K8bFn\">http://ideone.com/K8bFn</a></p>\n<p>Apart from these above differences, when I replace <code>class</code> with <code>struct</code> in my code, the code works perfectly without making any further changes.</p>\n<p>Now, I want to know, <strong>are there more differences, that I am missing and I should know?</strong> </p>\n", "PostTypeId": "1", "FavoriteCount": "5", "AnswerCount": "3"}, "11119252": {"ParentId": "11118919", "Score": "1", "CreationDate": "2012-06-20T12:10:25.767", "LastActivityDate": "2012-06-20T13:10:04.520", "LastEditDate": "2012-06-20T13:10:04.520", "OwnerUserId": "385646", "LastEditorUserId": "385646", "Body": "<p>A struct is just a class with all members public by default.</p>\n<p>According to The C++ Programming Language (3rd ed.), section 10.2.8:</p>\n<blockquote>\n<p id=\"so_11118919_11119252_0\">By definition, a struct is a class in which members are by default\n  public; that is</p>\n<pre><code>struct s{ ...\n</code></pre>\n<p id=\"so_11118919_11119252_1\">is simply shorthand for</p>\n<pre><code>class s { public: ...\n</code></pre>\n</blockquote>\n<p>Then he goes on to say:</p>\n<blockquote>\n<p id=\"so_11118919_11119252_2\">I usually prefer to use struct for classes that have all data public.\n  I think of such classes as \"not quite proper types, just data\n  structures.\"</p>\n</blockquote>\n<p><strong>Edited per the comments</strong>:</p>\n<p>In section 15.3.2 it says:</p>\n<blockquote>\n<p id=\"so_11118919_11119252_3\">The access specifier for a base class can be left out. In that case,\n  the base defaults to a private base for a <em>class</em> and a public base\n  for a <em>struct</em>.</p>\n</blockquote>\n", "Id": "11119252", "PostTypeId": "2", "CommentCount": "2"}, "bq_ids": {"n4659": {"so_11118919_11119252_0": {"length": 4, "section_id": 6103, "quality": 0.6666666666666666}}}, "11118994": {"ParentId": "11118919", "Score": "4", "CreationDate": "2012-06-20T11:56:08.423", "LastActivityDate": "2012-06-20T15:29:01.157", "LastEditDate": "2012-06-20T15:29:01.157", "OwnerUserId": "1099643", "LastEditorUserId": "673730", "Body": "<p>There are two main differences:</p>\n<ul>\n<li><p>In absence of an access-specifier for a base <code>class</code>, public is assumed when the derived class is declared <code>struct</code> and private is assumed when the class is declared class.</p></li>\n<li><p>Member of a class defined with the keyword class are private by default. Members of a class defined with the keywords <code>struct</code> or <code>union</code> are public by default.</p></li>\n</ul>\n", "Id": "11118994", "PostTypeId": "2", "CommentCount": "1"}});