post_cb({"31762150": {"Id": "31762150", "PostTypeId": "2", "Body": "<p>This has been acknowledged as <a href=\"http://wg21.cmeerw.net/cwg/issue536\" rel=\"nofollow\">Core Working Group issue 536</a> which has been submitted almost 10 years ago. So probably it hasn't been deemed important enough to be fixed.</p>\n<blockquote>\n<p id=\"so_31761091_31762150_0\">More importantly, some kinds of <em>id-expressions</em> are not described by\n  5.1.1 [expr.prim.general]. The structure of this section is that the result, type, and lvalue-ness are specified for each of the cases it\n  covers [...]</p>\n<p id=\"so_31761091_31762150_1\">This treatment leaves unspecified all the non-<em>identifier</em>\n<em>unqualified-id</em>s (<em>operator-function-id</em>, <em>conversion-function-id</em>, and\n  <em>template-id</em>) [...]</p>\n<p id=\"so_31761091_31762150_2\">-- <em>CWG 536</em></p>\n</blockquote>\n<hr>\n<p>From the behaviour of various compilers, we can assume the intention is that all of those expressions follow the rule for identifiers:</p>\n<blockquote>\n<p id=\"so_31761091_31762150_3\">The type of the expression is the type of the <em>identifier</em>. The result is the entity denoted by the identifier. The result is an lvalue if the entity is a function, variable, or data member and a prvalue otherwise.</p>\n<p id=\"so_31761091_31762150_4\">-- <em>post-N4296 [expr.prim.general]p13</em></p>\n</blockquote>\n<p>By the way: all of those expressions but <em>template-id</em>s can only refer to functions. <em>Template-id</em>s can refer to variables as well. Both <em>template-id</em>s and ordinary <em>identifier</em>s can refer to classes and enums, which confused me slightly (can there be expressions such as <code>int</code>? are they prvalues?)</p>\n</hr>", "LastActivityDate": "2015-08-01T13:03:31.627", "CommentCount": "0", "CreationDate": "2015-08-01T13:03:31.627", "ParentId": "31761091", "Score": "0", "OwnerUserId": "420683"}, "bq_ids": {"n4140": {"so_31761091_31762150_3": {"length": 17, "quality": 0.85, "section_id": 5954}, "so_31761091_31761091_0": {"length": 9, "quality": 0.9, "section_id": 5954}}, "n3337": {"so_31761091_31762150_3": {"length": 17, "quality": 0.85, "section_id": 5724}, "so_31761091_31761091_0": {"length": 9, "quality": 0.9, "section_id": 5724}}, "n4659": {"so_31761091_31762150_3": {"length": 16, "quality": 0.8, "section_id": 7441}, "so_31761091_31761091_0": {"length": 9, "quality": 0.9, "section_id": 7441}}}, "31761091": {"ViewCount": "45", "Body": "<p>It seems that the standard does not explicitly talk about the expression categories of some <em>unqualified-id</em>s. On the other hand, an <em>identifier</em>, which is one of <em>unqualified-id</em>s, is categorized as follows:</p>\n<blockquote>\n<p id=\"so_31761091_31761091_0\">The result is an lvalue if the entity is a function, variable, or data member and a prvalue otherwise.</p>\n</blockquote>\n<p>Then, what about other <em>unqualified-id</em>s\u2014<em>operator-function-id</em>, <em>conversion-function-id</em>, <em>literal-operator-id</em>, ~<em>class-name</em>, ~<em>decltype-specifier</em>, <em>template-id</em>?</p>\n", "AcceptedAnswerId": "31762150", "Title": "How are unqualified-ids other than identifier categorized in terms of lvalue and rvalue?", "CreationDate": "2015-08-01T11:02:33.010", "Id": "31761091", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-08-01T12:14:33.023", "LastEditorUserId": "4727754", "LastActivityDate": "2015-08-01T13:03:31.627", "Score": "3", "OwnerUserId": "4727754", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}});