post_cb({"10007510": {"ParentId": "10006711", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-04-04T08:31:04.530", "Score": "3", "LastEditorUserId": "452307", "LastEditDate": "2012-04-04T08:45:57.003", "Id": "10007510", "OwnerUserId": "452307", "Body": "<p><strong>Root Cause:</strong><br>\nYou get the error because the C++ Standard mandates that <strong>All</strong> virtual methods of a class except the pure virtual methods <strong>Must</strong> have a definition<sup>[#1]</sup>.      </br></p>\n<p><strong>Solution:</strong><br>\nEither provide definitions to all your <code>virtual</code> methods or make them pure <code>virtual</code>.</br></p>\n<p><strong>Explanation:</strong><br>\nThe error generated by gcc in such scenarios is at best mis-leading. Here is a <a href=\"http://www.ideone.com/q1OZO\" rel=\"nofollow\"><strong>sample program</strong></a> which demonstrates the problem you have:      </br></p>\n<pre><code>class MyClass\n{\n    public:\n    virtual void doSomething() { }\n    virtual void doSomethingMore();\n};\n\nint main()\n{\n    MyClass obj;\n    obj.doSomething();\n    obj.doSomethingMore();\n    return 0;\n}\n</code></pre>\n<p>compilation info:</p>\n<blockquote>\n<p id=\"so_10006711_10007510_0\">/home/4VqWl0/ccMjLi2V.o: In function <code>main':<br>\n  prog.cpp:(.text+0x19): undefined reference to</br></code>vtable for MyClass<code>.<br>\n  prog.cpp:(.text+0x1e): undefined reference to</br></code>MyClass::doSomethingMore()'<br>\n  collect2: ld returned 1 exit status  </br></p>\n</blockquote>\n<p>As you see GCC is notorious in reporting errors for this particular type of problem.        </p>\n<p><strong>Does it somehow link up with the constructor and destructor?</strong> </p>\n<p>The <strong><a href=\"http://gcc.gnu.org/faq.html#vtables\" rel=\"nofollow\">gcc faq</a></strong> doccuments it as well:  </p>\n<blockquote>\n<p id=\"so_10006711_10007510_1\">The ISO C++ Standard specifies that all virtual methods of a class that are not pure-virtual must be defined, but does not require any diagnostic for violations of this rule <code>[class.virtual]/8</code>. Based on this assumption, GCC will only emit the implicitly defined constructors, the assignment operator, the destructor and the virtual table of a class in the translation unit that defines its first such non-inline method.</p>\n<p id=\"so_10006711_10007510_2\"><strong>Therefore, if you fail to define this particular method, the linker may complain about the lack of definitions for apparently unrelated symbols</strong>. Unfortunately, in order to improve this error message, it might be necessary to change the linker, and this can't always be done.</p>\n<p id=\"so_10006711_10007510_3\">The solution is to ensure that all virtual methods that are not pure are defined. Note that a destructor must be defined even if it is declared pure-virtual <code>[class.dtor]/7</code>.</p>\n</blockquote>\n<p>Good Read:  </p>\n<p><strong><a href=\"http://www.parashift.com/c++-faq-lite/strange-inheritance.html#faq-23.10\" rel=\"nofollow\">What does it mean that the \"virtual table\" is an unresolved external?</a></strong></p>\n<hr>\n<p><sup>[#1]</sup><strong>C++03 Standard: 10.3 Virtual functions   [class.virtual]</strong> </p>\n<blockquote>\n<p id=\"so_10006711_10007510_4\">A virtual function declared in a class shall be defined, or declared pure (10.4) in that class, or both; but no diagnostic is required (3.2).</p>\n</blockquote>\n</hr>", "LastActivityDate": "2012-04-04T08:45:57.003"}, "10006711": {"CommentCount": "7", "ViewCount": "1751", "PostTypeId": "1", "LastEditorUserId": "452307", "CreationDate": "2012-04-04T07:29:46.850", "LastActivityDate": "2012-04-04T10:14:29.643", "Title": "Eclipse C++ project not building: Constructor Destructor Issue", "AcceptedAnswerId": "10007510", "LastEditDate": "2012-04-04T10:14:29.643", "Id": "10006711", "Score": "2", "Body": "<p>I have all the class definitions in a header file: ModelModule.h. I have provided the sample code for that file below where I have given the declaration of 2 classes and its member functions:</p>\n<pre><code>#pragma once\n\n#if !defined( MODELMODULE_H )\n#define MODELMODULE_H\n\n\n//Required header files\n\nclass CModelModule;\nclass COrdProbitMM;\n\nclass CModelModule\n// virtual base class for all types of modeling modules\n{\n    friend class CSimCoordinator;\n    friend class CHouseholdCoordinator;\n    friend class CGenericHousehold;\n\n    public:\n        CModelModule(void);\n        ~CModelModule(void);\n\n    protected:\n        std::string         m_Label;        \n        std::vector&lt;int&gt;        m_AvailEndAttr;     \n        void GetVarValues(std::vector&lt;int&gt;&amp;, std::vector&lt;double&gt; &amp;);\n\n\n    public:\n\n\n        virtual void    Configure(void){};\n        virtual void loadXmlString(xmlNodePtr pXmlNode, xmlDocPtr pXmlDoc, xmlChar * con);\n        virtual void    SaveXml(std::ofstream&amp; fout){};\n\n        double mrand(void); \n        double UniformRand ();          // returns a U[0,1] random number \n        double StdNormalRand ();        // returns a N(0,1) random number\n};\n\nclass COrdProbitMM : public CModelModule\n// Class represent the ordered-probit models\n{\n    friend class CSimCoordinator;\n    friend class CHouseholdCoordinator;\n    friend class CMMRunner;\n\n    public:\n        COrdProbitMM(CSimCoordinator&amp; simcord, std::string&amp; sLabel);\n        COrdProbitMM(CSimCoordinator&amp; simcord, std::string&amp; sLabel, int nAlts);\n        ~COrdProbitMM(void);\n\n    private: \n\n        int             m_Max_nAlts;    \n        std::vector&lt;double&gt;     m_Thresholds;   \n\n    public:\n        void    Configure(void);\n        void    copyConfigure(COrdProbitMM* that);\n\n        int  Run(CHouseholdObject*);\n        int  Run(CPersonObject*);\n\n\n        void loadXmlString(xmlNodePtr pConfNode,  xmlDocPtr pXmlDoc, xmlChar* con);\n\n    private:\n        int     Run(void);\n};  \n</code></pre>\n<p>Now the function definitions has been given in a .cpp file: ModelModule.cpp. Note: The header file has been included</p>\n<pre><code>#include \"ModelModule.h\"\n//Other header files\n\n//Code for all the other functions defined here\n\n//Given below are the code for how the constructors and destructors are defined\n\nCOrdProbitMM::~COrdProbitMM(void)\n{\n}\n\nCModelModule::CModelModule(void)\n{\n}\n\nCModelModule::~CModelModule(void)\n{   \n}\n</code></pre>\n<p>I have rid the code of any syntactic error. However when I build the code I get the error make: <em>*</em>[ProjectName] Error1. On inspecting the console I find the following being displayed:</p>\n<pre><code>Building target: Project Name\nInvoking: GCC C++ Linker\ng++  -o \"XYZ\"  ./src/XYZ.o ./src/DataCache\\ -\\ Copy.o ./src/DataCache.o ./src/DataCoordinator.o ./src/DataObject.o ./src/HouseholdCoordinator.o ./src/\nLinearEquation.o ./src/MMRunner.o ./src/MainFrm.o ./src/ModelModule.o ./src/SimCoordinator.o ./src/main.o   -lxml2 -lsqlite3\n\n./src/ModelModule.o: In function `CModelModule::CModelModule()':\nModelModule.cpp:(.text._ZN12CModelModuleC2Ev[CModelModule::CModelModule()]+0xd): undefined reference to `vtable for CModelModule'\n./src/ModelModule.o: In function `CModelModule::~CModelModule()':\nModelModule.cpp:(.text._ZN12CModelModuleD2Ev[CModelModule::~CModelModule()]+0xd): undefined reference to `vtable for CModelModule'\n\n./src/ModelModule.o:(.rodata._ZTI12COrdProbitMM[typeinfo for COrdProbitMM]+0x8): undefined reference to `typeinfo for CModelModule'\n\ncollect2: ld returned 1 exit status\nmake: *** [Project Name] Error 1\n\n**** Build Finished ****\n</code></pre>\n<p>I checked out this forum for the vtable error and it was mentioned that the problem is when we declare a constructor/destructor but never define it. But that does not seem to be a problem in this case as it was explicitly done in ModelModule.cpp. There seems to be something very basic that is going on here that is slipping my attention. </p>\n<ul>\n<li>What is it that I'm missing?</li>\n<li>Can you tell me what is with the virtual function and how it caused the error to come? </li>\n<li>Does it somehow link up with the constructor and destructor?</li>\n</ul>\n", "Tags": "<c++><constructor><eclipse-cdt><vtable>", "OwnerUserId": "1312137", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_10006711_10007510_4": {"section_id": 7012, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_10006711_10007510_4": {"section_id": 6758, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_10006711_10007510_4": {"section_id": 8509, "quality": 0.8461538461538461, "length": 11}}}});