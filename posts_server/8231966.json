post_cb({"8232056": {"Id": "8232056", "PostTypeId": "2", "Body": "<p><code>__LINE__</code> is a special macro that is supposed to resolve to the current line number. When you do a token paste with <code>__LINE__</code> directly, however, it doesn't get a chance to resolve, so you end up with the token <code>prefix__LINE__</code> instead of, say, <code>prefix23</code>, like you would probably be expecting if you would write this code in the wild.</p>\n", "LastActivityDate": "2011-11-22T18:43:14.467", "CommentCount": "3", "CreationDate": "2011-11-22T18:43:14.467", "ParentId": "8231966", "Score": "4", "OwnerUserId": "5696"}, "12892468": {"Id": "12892468", "PostTypeId": "2", "Body": "<p>The order in which macros are declared is not important, the order in which they are used is. If you were to actually use that macro before it was declared -- (in actual code that is, not in a macro which remains dormant until summoned) then you would get an error of sorts but since most sane people don't go around doing these kinds of things, writing a macro and then writing a function that uses a macro not yet defined further down, etc,etc... It seems your question isn't just one question but I'll just answer that one part. I think you should have broken this down a little more.</p>\n", "LastActivityDate": "2012-10-15T09:11:10.553", "CommentCount": "0", "CreationDate": "2012-10-15T09:11:10.553", "ParentId": "8231966", "Score": "1", "OwnerUserId": "549506"}, "bq_ids": {"n4140": {"so_8231966_8232426_1": {"length": 53, "quality": 1.0, "section_id": 523}}, "n3337": {"so_8231966_8232426_1": {"length": 53, "quality": 1.0, "section_id": 514}}, "n4659": {"so_8231966_8232426_1": {"length": 53, "quality": 1.0, "section_id": 544}}}, "8232426": {"Id": "8232426", "PostTypeId": "2", "Body": "<p>The relevant part of the C spec:</p>\n<blockquote>\n<p id=\"so_8231966_8232426_0\">6.10.3.1 Argument substitution</p>\n<p id=\"so_8231966_8232426_1\">After the arguments for the invocation of a function-like macro have been identified,\n     argument substitution takes place. A parameter in the replacement list, unless preceded\n    by a # or ## preprocessing token or followed by a ## preprocessing token (see below), is\n   replaced by the corresponding argument after all macros contained therein have been\n  expanded. Before being substituted, each argument\u2019s preprocessing tokens are\n   completely macro replaced as if they formed the rest of the preprocessing file; no other\n    preprocessing tokens are available.</p>\n</blockquote>\n<p>The key part that determines whether you want the double indirection or not is the second sentence and the exception in it -- if the parameter is involved in a <code>#</code> or <code>##</code> operation (such as the params in <code>mymacro</code> and <code>NAME2_HIDDEN</code>), then any other macros in the argument are NOT expanded prior to doing the <code>#</code> or <code>##</code>.  If, on the other hand, there's no <code>#</code> or <code>##</code> IMMEDIATELY in the macro body (as with <code>NAME2</code>), then other macros in the parameters ARE expanded.</p>\n<p>So it comes down to what you want -- sometimes you want all macros expanded FIRST, and then do the <code>#</code> or <code>##</code> (in which case you want the double layer indirection) and sometime you DO NOT want the macros expanded first (in which case you CAN'T HAVE double layer macros, you need to do it directly.)</p>\n", "LastEditorUserId": "427332", "LastActivityDate": "2016-09-28T17:56:39.163", "Score": "29", "CreationDate": "2011-11-22T19:13:22.073", "ParentId": "8231966", "CommentCount": "1", "OwnerUserId": "16406", "LastEditDate": "2016-09-28T17:56:39.163"}, "8233093": {"Id": "8233093", "PostTypeId": "2", "Body": "<p>Chris Dodd has an excellent explanation for the first part of your question.  As for the second part, about the definition sequence, the short version is that <code>#define</code> directives by themselves are not evaluated at all; they are only evaluated and expanded when the symbol is found elsewhere in the file.  For example:</p>\n<pre><code>#define A a  //adds A-&gt;a to the symbol table\n#define B b  //adds B-&gt;b to the symbol table\n\nint A;\n\n#undef A     //removes A-&gt;a from the symbol table\n#define A B  //adds A-&gt;B to the symbol table\n\nint A;\n</code></pre>\n<p>The first <code>int A;</code> becomes <code>int a;</code> because that is how <code>A</code> is defined at that point in the file.  The second <code>int A;</code> becomes <code>int b;</code> after two expansions.  It is first expanded to <code>int B;</code> because <code>A</code> is defined as <code>B</code> at that point in the file.  The preprocessor then recognizes that <code>B</code> is a macro when it checks the symbol table.  <code>B</code> is then expanded to <code>b</code>.</p>\n<p>The only thing that matters is the definition of the symbol at the point of expansion, regardless of where the definition is.</p>\n", "LastActivityDate": "2011-11-22T20:07:37.647", "CommentCount": "1", "CreationDate": "2011-11-22T20:07:37.647", "ParentId": "8231966", "Score": "2", "OwnerUserId": "637801"}, "8231966": {"ViewCount": "3660", "Body": "<p>At: <a href=\"https://web.archive.org/web/20120229073241/http://www.parashift.com/c%2B%2B-faq-lite/misc-technical-issues.html\">C++ FAQ - Miscellaneous technical issues - [39.6] What should be done with macros that need to paste two tokens together?</a> </p>\n<p>Could someone explain to me <strong>why</strong>? All I read is <em>trust me</em>, but I simply can't just trust on something because someone said so.</p>\n<p>I tried the approach and I can't find any bugs appearing:</p>\n<pre><code>#define mymacro(a) int a ## __LINE__\nmymacro(prefix) = 5;\nmymacro(__LINE__) = 5;\nint test = prefix__LINE__*__LINE____LINE__; // fine\n</code></pre>\n<p>So <strong>why</strong> do I need to do it like this instead (quote from the webpage):</p>\n<blockquote>\n<p id=\"so_8231966_8231966_0\">However you need a double layer of indirection when you use ##.\n  Basically you need to create a special macro for \"token pasting\" such\n  as: </p>\n<pre><code> #define NAME2(a,b)         NAME2_HIDDEN(a,b)\n #define NAME2_HIDDEN(a,b)  a ## b \n</code></pre>\n<p id=\"so_8231966_8231966_1\">Trust me on this \u2014 you really need to do\n  this! (And please nobody write me saying it sometimes works without\n  the second layer of indirection. Try concatenating a symbol with\n  __ LINE__ and see what happens then.)</p>\n</blockquote>\n<p><strong>Edit:</strong> Could someone also explain why he uses <code>NAME2_HIDDEN</code> before it's declared below? It seems more logical to define <code>NAME2_HIDDEN</code> macro before I use it. Is it some sort of trick here?</p>\n", "AcceptedAnswerId": "8232426", "Title": "Why do I need double layer of indirection for macros?", "CreationDate": "2011-11-22T18:37:16.280", "Id": "8231966", "CommentCount": "4", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2016-05-24T05:26:40.940", "LastEditorUserId": "3908168", "LastActivityDate": "2016-09-28T17:56:39.163", "Score": "22", "OwnerUserId": "1036205", "Tags": "<c++><visual-c++><macros>", "AnswerCount": "4"}});