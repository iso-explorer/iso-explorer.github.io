post_cb({"33087785": {"ViewCount": "93", "Body": "<p>From C++ Primer 5th edition (D inherits from B)</p>\n<blockquote>\n<p id=\"so_33087785_33087785_0\">Member functions and friends of classes derived from D may use the derived-tobase conversion if D inherits from B using either public or protected. Such\n  code may not use the conversion if D inherits privately from B.</p>\n</blockquote>\n<p>Is there any reason for this or am I meant to take it at face value? It might seem obvious why this is but it's tripping me up in one example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base { \npublic: \n    int x = 2;\n};\n\nclass Derived : protected Base { };\n\nclass DerivedAgain : public Derived {\n    friend void test();\n};\n\nvoid test() {\n    ??? a;\n    Base* p = &amp;a;\n    cout &lt;&lt; p-&gt;x;\n}\n\nint main(){\n    test();\n}\n</code></pre>\n<p>I want to understand the accessibility of <code>test()</code> to the member <code>x</code> in derived-to-base conversions. Considering the three potential cases of the type <code>???</code> of <code>a</code> in function <code>test()</code>. </p>\n<ol>\n<li><code>???</code> is <code>Base</code>. <code>x</code> is a public member of <code>Base</code>. In which case there is no issue.</li>\n<li><code>???</code> is <code>DerivedAgain</code>. In which case the Derived-to-Base conversion makes sense since <code>test()</code> has <code>friend</code> access to all members of <code>DerivedAgain</code>, including those inherited indirectly from <code>Base</code>. So there is no issue using a pointer to access <code>x</code>.</li>\n<li><code>???</code> is <code>Derived</code>. It compiles fine. But why? I'm confused at this point. <code>test()</code> doesn't have special access to the members of a <code>Derived</code> class, so why should <code>p-&gt;x</code> work and consequently the Derived-to-Base conversion be valid? Does it work just cause?</li>\n</ol>\n<p>Indeed if I change the operation of <code>test()</code> to</p>\n<pre><code>void test() {\n    Derived a;\n    cout &lt;&lt; a.x;\n}\n</code></pre>\n<p>It does not compile, as I would expect to happen - because the <code>x</code> member that a <code>Derived</code> object inherits is made <code>protected</code> and thus can't be used by users.</p>\n<p>If I replace the type of <code>a</code> with <code>Base</code> and <code>DerivedAgain</code> the modified <code>test()</code> compiles fine, as I would expect it to.</p>\n<p>I'm just confused as to why a friend function of a second-level derived class is allowed to use the first-level direct-to-base conversion, if that friend function has no special access to the first-level derived class members. </p>\n", "AcceptedAnswerId": "33087854", "Title": "Derived-to-base conversion and friendship confusion", "CreationDate": "2015-10-12T18:25:29.017", "Id": "33087785", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-10-12T18:36:20.547", "LastEditorUserId": "3348786", "LastActivityDate": "2015-10-12T19:11:50.017", "Score": "4", "OwnerUserId": "3348786", "Tags": "<c++><inheritance><friend>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33087785_33087854_0": {"length": 42, "quality": 1.0, "section_id": 6681}}, "n3337": {"so_33087785_33087854_0": {"length": 42, "quality": 1.0, "section_id": 6436}}, "n4659": {"so_33087785_33087854_0": {"length": 42, "quality": 1.0, "section_id": 8156}}}, "33087854": {"Id": "33087854", "PostTypeId": "2", "Body": "<p>Basically, protected inheritance is weird. The reason it compiles is that, from [class.access.base] as of N4527:</p>\n<blockquote>\n<p id=\"so_33087785_33087854_0\">A base class <code>B</code> of <code>N</code> is <em>accessible</em> at <em>R</em>, if<br>\n  \u2014 an invented public member of <code>B</code> would be a public member of <code>N</code>, or<br>\n  \u2014 <em>R</em> occurs in a member or friend of class <code>N</code>, and an invented public member of <code>B</code> would be a private or\n  protected member of <code>N</code>, or<br>\n  \u2014 <em>R</em> occurs in a member or friend of a class <code>P</code> derived from <code>N</code>, and an invented public member of <code>B</code> would\n  be a private or protected member of <code>P</code>, or<br>\n  \u2014 there exists a class <code>S</code> such that <code>B</code> is a base class of <code>S</code> accessible at <em>R</em> and <code>S</code> is a base class of <code>N</code> accessible\n  at <em>R</em>.</br></br></br></br></p>\n</blockquote>\n<p>The third bullet point here is the relevant one. <em>R</em> occurs in a friend (<code>test</code>) of a class <code>P</code> (<code>DerivedAgain</code>) derived from <code>N</code> (<code>Derived</code>), and an invented public member of <code>B</code> (<code>Base</code>) would be a protected member of <code>P</code> (<code>DerivedAgain</code>). </p>\n<p>I had previously believed accepting this code to be a gcc bug (<strike><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67943\" rel=\"nofollow noreferrer\">bug 67493</a></strike>), but now I believe that failing to accept it is a clang bug - although as <a href=\"https://stackoverflow.com/questions/33087785/derived-to-base-conversion-and-friendship-confusion/33087854?noredirect=1#comment53992904_33087854\">T.C.</a> additionally points out, there is a relevant standard defect (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1873\" rel=\"nofollow noreferrer\">CWG #1873</a>). The wording change there applied only to member access, whereas what's relevant to us here is base access. But perhaps gcc is simply implementing the rule of the standard (acceptance is correct) whereas clang is following with the logical conclusion of this defect report (currently active <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#472\" rel=\"nofollow noreferrer\">CWG #472</a>) and just disallowing it. </p>\n<p>Again, protected inheritance is really weird. Welcome to the wonderful world of C++.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-12T19:11:50.017", "Score": "7", "CreationDate": "2015-10-12T18:30:14.093", "ParentId": "33087785", "CommentCount": "13", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T11:58:36.577"}});