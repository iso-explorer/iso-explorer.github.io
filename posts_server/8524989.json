post_cb({"8525315": {"ParentId": "8524989", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-12-15T19:10:32.873", "Score": "3", "LastEditorUserId": "597607", "LastEditDate": "2011-12-15T21:16:58.453", "Id": "8525315", "OwnerUserId": "452307", "Body": "<p>Accessing elements beyond the bounds of an array results in  <strong>Undefined Behavior</strong>.<br>\nCompilers do not need to do anything specific in such guaranteed Undefine Behavior cases.<br>\nAnd potentially anything might happen, your program might crash or not or show erratic behavior and this is allowed by the Standard.</br></br></p>\n<p>Reference :</p>\n<p><strong>C++ Standard section 1.3.24 states:</strong></p>\n<blockquote>\n<p id=\"so_8524989_8525315_0\">Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p>Your understanding of <code>new</code> is not correct. <code>new</code> allows you to allocate a fixed amount of memory on the freestore (a.k.a heap). It does not allocate additional memory if you extend the bounds of the allocated memory. It is up to you to ensure that you have to allocate enough memory so that you do not exceed the bounds.      </p>\n<p>In your program you are trying to allocate memory equal to 10 array elements so you should be doing:     </p>\n<pre><code>arrays = new int[10];\n</code></pre>\n<p>Also, do not forget to call <code>delete[]</code> once you are done using the allocated memory or it results in a memory leak.</p>\n<pre><code>delete []arrays;\n</code></pre>\n<p>If you need a data structure which increases automatically as per your usage, C++ provides that in the form of <strong><a href=\"http://www.cplusplus.com/reference/stl/vector/\" rel=\"nofollow\">std::vector</a></strong>.</p>\n", "LastActivityDate": "2011-12-15T21:16:58.453"}, "bq_ids": {"n4140": {"so_8524989_8525315_0": {"section_id": 5768, "quality": 1.0, "length": 26}}, "n3337": {"so_8524989_8525315_0": {"section_id": 5541, "quality": 1.0, "length": 26}}, "n4659": {"so_8524989_8525315_0": {"section_id": 7225, "quality": 1.0, "length": 26}}}, "8524989": {"CommentCount": "2", "ViewCount": "548", "PostTypeId": "1", "LastEditorUserId": "452307", "CreationDate": "2011-12-15T18:40:28.427", "LastActivityDate": "2011-12-15T21:16:58.453", "Title": "C++ Accessing bounds outside static array vs new array?", "AcceptedAnswerId": "8525315", "LastEditDate": "2011-12-15T19:18:50.223", "Id": "8524989", "Score": "2", "Body": "<p>Why does the following  code compile and run.</p>\n<p>I have created an integer array and assigned its size to <code>10</code>, why then does the program not return an error that I am trying to access an element outside the array, when inside the for loop?</p>\n<p>In addition, I would like to understand the concept of new, is my usage correct(I have not assigned how much memory *arrays needs), it is my understanding that new allows me to create an array of dynamic size (meaning that I can increase the size of this array indefinitely during runtime, correct me if I am wrong). If this is correct what is the difference in me using new or simply just allocating array[]; since both apparently allow me to increase the size of my array at runtime as can be seen with this example. I know about scope, stack and heap differences, so assume that both variables are only declared in main and use the following code as the example.</p>\n<p><a href=\"http://ideone.com/Tbud1\" rel=\"nofollow\">http://ideone.com/Tbud1</a></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\nint array[10];\nint *arrays;\narrays = new int();\nfor (int i=0; i&lt;450; i++)\n{\n   arrays[i] = i;\n   cout &lt;&lt; arrays[i] &lt;&lt; \" \";\n   array[i] = i;\n   cout &lt;&lt; array[i] &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>\n", "Tags": "<c++><arrays><dynamic><size><new-operator>", "OwnerUserId": "1084113", "AnswerCount": "1"}});