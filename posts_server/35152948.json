post_cb({"35152948": {"CommentCount": "3", "ViewCount": "215", "CreationDate": "2016-02-02T12:01:13.330", "LastActivityDate": "2016-02-02T12:12:34.420", "Title": "Maximum length of hexadecimal escape sequence", "AcceptedAnswerId": "35153185", "PostTypeId": "1", "Id": "35152948", "Score": "0", "Body": "<p>Consider the following code snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nvoid print(const T&amp; t) {\n    std::cout &lt;&lt; static_cast&lt;unsigned long long&gt;(t) &lt;&lt; \" \" &lt;&lt; sizeof(t) &lt;&lt; \"\\n\";\n}\n\nint main() {\n    auto cU = U'\\xFFFFFFFF';\n    auto cL = L'\\xFFFFFFFF';\n    auto cQ = '\\xFFFFFFFF1'; // warning in gcc; error in clang\n    print(cU);\n    print(cL);\n    print(cQ);\n}\n</code></pre>\n<p>This code gives me a warning when compiled in <a href=\"http://melpon.org/wandbox/permlink/cmoA94lRs1U9fKbX\" rel=\"nofollow\">gcc</a> and error with same text in in <a href=\"http://melpon.org/wandbox/permlink/jMoeYZhKBHleU4Sw\" rel=\"nofollow\">clang</a>:</p>\n<blockquote>\n<p id=\"so_35152948_35152948_0\">hex escape sequence out of range</p>\n</blockquote>\n<p>2.14.3/4 of C++14 Standard says:</p>\n<blockquote>\n<p id=\"so_35152948_35152948_1\">There is no limit to the number of digits in a hexadecimal sequence.</p>\n</blockquote>\n<p>But simultanously contains a restrictions to possible type of character literal: <code>char</code>, <code>wchar_t</code>, <code>char16_t</code> or <code>char32_t</code>. This means that maximum size of possible type does not exceed 32 bits. I.e. maximum length of hex-sequence (only hex-digits part) is limited to 8.</p>\n<p>My question is: Why Standard says about unlimited length of hex-sequence and how to use hex-sequence with more than 8 digits?</p>\n", "Tags": "<c++><hex><language-lawyer>", "OwnerUserId": "3240681", "AnswerCount": "1"}, "35153185": {"ParentId": "35152948", "CommentCount": "2", "Body": "<p>Your compiler vendor might want to come up with an 8 byte character type, as an extension.</p>\n<p>Placing a limitation to a character <em>literal</em> would prevent to initalize these types with a literal.</p>\n", "OwnerUserId": "650405", "PostTypeId": "2", "Id": "35153185", "Score": "1", "CreationDate": "2016-02-02T12:12:34.420", "LastActivityDate": "2016-02-02T12:12:34.420"}, "bq_ids": {"n4140": {"so_35152948_35152948_1": {"section_id": 5346, "quality": 1.0, "length": 6}}, "n3337": {"so_35152948_35152948_1": {"section_id": 5143, "quality": 1.0, "length": 6}}, "n4659": {"so_35152948_35152948_1": {"section_id": 6771, "quality": 1.0, "length": 6}}}});