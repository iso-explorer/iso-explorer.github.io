post_cb({"bq_ids": {"n4140": {"so_10587879_10588226_1": {"length": 21, "quality": 0.875, "section_id": 7242}}, "n3337": {"so_10587879_10588226_1": {"length": 21, "quality": 0.875, "section_id": 6986}}, "n4659": {"so_10587879_10588226_1": {"length": 18, "quality": 0.75, "section_id": 8751}}}, "10589019": {"Id": "10589019", "PostTypeId": "2", "Body": "<p>The expressions <code>new char[N]</code> and <code>new unsigned char[N]</code> are guaranteed\nto return memory sufficiently aligned for any object.  See \u00a75.3.4/10\n\"[...] For arrays of char and unsigned char, the difference between the\nresult of the new-expression and the address returned by the allocation\nfunction shall be an integral multiple of the strictest fundamental\nalignment requirement (3.11) of any object type whose size is no greater\nthan the size of the array being created. [ Note: Because allocation\nfunctions are assumed to return pointers to storage that is\nappropriately aligned for objects of any type with fundamental\nalignment, this constraint on array allocation overhead permits the\ncommon idiom of allocating character arrays into which objects of other\ntypes will later be placed. \u2014end note ]\". </p>\n<p>From a stylistic point of view, of course: if what you want is to allocate raw\nmemory, it's clearer to say so: <code>operator new(N)</code>.  Conceptually,\n<code>new char[N]</code> creates <code>N</code> <code>char</code>; <code>operator new(N)</code> allocates <code>N</code> bytes.</p>\n", "LastActivityDate": "2012-05-14T18:31:10.590", "Score": "16", "CreationDate": "2012-05-14T18:31:10.590", "ParentId": "10587879", "CommentCount": "3", "OwnerUserId": "649665"}, "10587879": {"ViewCount": "2006", "Body": "<p>Is allocating a buffer via <code>new char[sizeof(T)]</code> guaranteed to allocate memory which is properly aligned for the type <code>T</code>, where all members of <code>T</code> has their natural, implementation defined, alignment (that is, you have not used the <code>alignas</code> keyword to modify their alignment).</p>\n<p>I have seen this guarantee made in a few answers around here but I'm not entirely clear how the standard arrives at this guarantee.  5.3.4-10 of the standard gives the basic requirement: essentially <code>new char[]</code> must be aligned to <code>max_align_t</code>.</p>\n<p>What I'm missing is the bit which says <code>alignof(T)</code> will always be a valid alignment with a maximum value of <code>max_align_t</code>. I mean, it seems obvious, but must the resulting alignment of a structure be at most <code>max_align_t</code>? Even point 3.11-3 says extended alignments may be supported, so may the compiler decide on its own a class is an over-aligned type?</p>\n", "AcceptedAnswerId": "10588226", "Title": "Does new char actually guarantee aligned memory for a class type?", "CreationDate": "2012-05-14T17:03:15.517", "Id": "10587879", "CommentCount": "12", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2012-05-14T18:31:10.590", "Score": "51", "OwnerUserId": "229686", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "2"}, "10588226": {"Id": "10588226", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_10587879_10588226_0\">What I'm missing is the bit which says <code>alignof(T)</code> will always be a valid alignment with a maximum value of <code>max_align_t</code>. I mean, it seems obvious, but must the resulting alignment of a structure be at most <code>max_align_t</code> ? Even point 3.11-3 says extended alignments may be supported, so may the compiler decide on its own a class is an over-aligned type ?</p>\n</blockquote>\n<p>As noted by Mankarse, the best quote I could get is from <strong>[basic.align]/3</strong>:</p>\n<blockquote>\n<p id=\"so_10587879_10588226_1\">A type having an extended alignment requirement is an over-aligned type. [ Note:\n  every over-aligned type is or contains a class type to which extended alignment applies (possibly through a non-static data member). \u2014end note ]</p>\n</blockquote>\n<p>which seems to imply that extended alignment must be explicitly required (and then propagates) but cannot</p>\n<p>I would have prefer a clearer mention; the intent is obvious for a compiler-writer, and any other behavior would be insane, still...</p>\n", "LastEditorUserId": "147192", "LastActivityDate": "2012-05-14T17:38:52.897", "Score": "6", "CreationDate": "2012-05-14T17:28:37.020", "ParentId": "10587879", "CommentCount": "2", "LastEditDate": "2012-05-14T17:38:52.897", "OwnerUserId": "147192"}});