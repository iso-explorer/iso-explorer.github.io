post_cb({"6589992": {"ParentId": "6589946", "CommentCount": "0", "Body": "<p>What happens on stack overflow is extremely system-dependent (both CPU and OS, and sometimes compiler because it's up to the compiler to insert stack probes and other mechanisms for safely extending the stack), so it's impossible to mandate a particular response; the best that could be done would be to suggest responses that would be preferable <em>if</em> the target platform allows it.  Most don't; while there is a reasonable way to handle heap overflow, a stack overflow handler (a) is likely to be invoked when the stack is in an inconsistent state, with a partially constructed stack frame on it, and (b) is likely to involve invoking a handler... which requires stack space for the interrupt frame.  POSIX specifies a <code>sigaltstack()</code> mechanism, but it too has restrictions, and ANSI C C/C++ can't reasonably depend on POSIX compliance.</p>\n", "OwnerUserId": "643977", "PostTypeId": "2", "Id": "6589992", "Score": "1", "CreationDate": "2011-07-05T23:27:31.207", "LastActivityDate": "2011-07-05T23:27:31.207"}, "6589946": {"CommentCount": "18", "AcceptedAnswerId": "6590027", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-07-05T23:20:20.453", "LastActivityDate": "2014-11-20T23:34:39.743", "LastEditDate": "2017-05-23T12:06:24.587", "ViewCount": "369", "FavoriteCount": "2", "Title": "What does the C++ standard say about stack overflow?", "Id": "6589946", "Score": "10", "Body": "<p>I took a look at the draft C++0x standard, and as far as I can tell there is nothing about stack overflow in there. Searching for \"stack overflow\" yields no results, and searching for \"stack\" I've only gotten references to stack unwinding and std::stack. Does that mean that there cannot be a conforming implementation of the C++ standard, since there is no mechanism allowed for handling the error when memory is exhausted by a local object such as a huge local array?</p>\n<p>The answers to <a href=\"https://stackoverflow.com/questions/648194/does-the-c-standard-define-a-stack-overflow-behavior\">this question</a> indicate that at least the C standard does not mention stack overflow.</p>\n<p>To make the question concrete, consider this program</p>\n<pre><code>// Program A\nint identity(int a) {\n  if (a == 0)\n    return 0;\n  char hugeArray[1024 * 1024 * 1024]; // 1 GB\n  return identity(a - 1) + 1;\n}\nint main() {\n  return f(1024 * 1024 * 1024);\n}\n</code></pre>\n<p>and this program</p>\n<pre><code>// program B\nint main() {\n  return 1024 * 1024 * 1024;\n}\n</code></pre>\n<p>I think the C++ standard does not allow any C++ implementation to do something observably different on these two programs. In reality program A won't run on any modern machine as it is allocating an exabyte of memory on the stack (imagine the function actually used the huge array so the compiler can't silently remove it to no ill effect). Does the C++ standard allow program A to fail?</p>\n<p>Edit: The question is not whether the standard <strong>should</strong> define what happens on stack overflow, the question is <strong>what</strong> it says, if anything.</p>\n", "Tags": "<c++><stack-overflow><undefined-behavior>", "OwnerUserId": "822360", "AnswerCount": "4"}, "6589988": {"ParentId": "6589946", "CommentCount": "2", "Body": "<p>A stack overflow is breaking the protection mechanism that the operating system has in place. It is not a feature of the language as all machine executable code will have this same protection. </p>\n<p>If you want to catch this particular error, you'll need to write operating system specific code. On Linux, for example, you'll need to catch a SIGSEGV (segmentation fault) signal. However, note that this could also be raised by a NULL pointer deference, or any other memory protection issues, not just stack overflow. </p>\n<p>Not sure about Windows, OSX or mobile devices.</p>\n", "OwnerUserId": "381313", "PostTypeId": "2", "Id": "6589988", "Score": "1", "CreationDate": "2011-07-05T23:26:57.330", "LastActivityDate": "2011-07-05T23:26:57.330"}, "6592141": {"ParentId": "6589946", "CommentCount": "0", "Body": "<p>Behavior is undefined because the Standard does not define what happens with a program that exceeds resource limits. Note that there are recommended limits in Annex B of the spec. That annex is non-normative though and an implementation can ignore that annex, including having different limits than specified there. In 1.4 [intro.compliance], the spec says</p>\n<blockquote>\n<p id=\"so_6589946_6592141_0\">If a program contains no violations of the rules in this International Standard, a conforming implementation shall, within its resource limits, accept and correctly execute that program.</p>\n</blockquote>\n<p>There is nothing that says what shall happen with a program that contains no violation of the rules in the IS but that can't be accepted and correctly executed within the resource limits of the implementation. Hence behavior is undefined for such a case.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "6592141", "Score": "4", "CreationDate": "2011-07-06T05:57:08.630", "LastActivityDate": "2011-07-06T05:57:08.630"}, "6590027": {"ParentId": "6589946", "CommentCount": "5", "Body": "<p>I'm not sure if this is what you're looking for, but in Appendix B of the C++03 ISO standard there's the following notice:</p>\n<blockquote id=\"so_6589946_6590027_0\">\n<ol>\n<li>Because computers are finite, C++ implementations are inevitably limited in the size of the programs they\n  can successfully process. Every implementation shall document those limitations where known. This documentation may cite fixed limits where they exist, <strong>say how to compute variable limits as a function of\n  available resources</strong>, or say that fixed limits do not exist or are unknown.</li>\n<li>The limits may constrain quantities that include those described below or others.</li>\n</ol>\n</blockquote>\n<p>(My emphasis) I take this to mean it is perfectly legal for the compiler to allow one of those functions to work while failing another, provided that the compiler states what limitations are in place and how they are computed from the resources the system has available.</p>\n", "OwnerUserId": "501557", "PostTypeId": "2", "Id": "6590027", "Score": "14", "CreationDate": "2011-07-05T23:32:32.703", "LastActivityDate": "2011-07-05T23:32:32.703"}, "bq_ids": {"n4140": {"so_6589946_6590027_0": {"section_id": 46, "quality": 0.7843137254901961, "length": 40}, "so_6589946_6592141_0": {"section_id": 5770, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_6589946_6592141_0": {"section_id": 5543, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_6589946_6590027_0": {"section_id": 47, "quality": 0.7843137254901961, "length": 40}, "so_6589946_6592141_0": {"section_id": 7227, "quality": 0.9285714285714286, "length": 13}}}});