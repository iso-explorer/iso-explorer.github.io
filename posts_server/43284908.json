post_cb({"bq_ids": {"n4140": {"so_43284908_43290109_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 3915}}, "n3337": {"so_43284908_43290109_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 3775}}, "n4659": {"so_43284908_43290109_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 4801}}}, "43290150": {"Id": "43290150", "PostTypeId": "2", "Body": "<p>no, and so far as I know most compilers will not goto to exit the current function.</p>\n<p>if you must escape directly from deep recursion<code>throw</code> an <code>exception</code> (c++) or use <code>longjmp</code> (c)  these actions will restore the stack. </p>\n", "LastEditorUserId": "471930", "LastActivityDate": "2017-04-08T04:34:26.897", "Score": "1", "CreationDate": "2017-04-08T04:22:47.393", "ParentId": "43284908", "CommentCount": "0", "OwnerUserId": "471930", "LastEditDate": "2017-04-08T04:34:26.897"}, "43284908": {"ViewCount": "131", "Body": "<p>If I use goto instruction inside a recursive function (wanting to exit the function before it finishes naturally) is the stack freed automatically or not?</p>\n", "AcceptedAnswerId": "43290109", "Title": "GOTO instruction in recursive functions", "CreationDate": "2017-04-07T18:30:46.200", "Id": "43284908", "CommentCount": "9", "PostTypeId": "1", "LastActivityDate": "2017-04-08T04:34:26.897", "Score": "-1", "OwnerUserId": "7698265", "Tags": "<c++><c>", "AnswerCount": "2"}, "43290109": {"Id": "43290109", "PostTypeId": "2", "Body": "<p>Consider the below program, in which there is a goto statement for final return. Will that free the stack just by seeing goto. So even though you use goto inside functions stack will be maintained as such.</p>\n<pre><code>#include &lt;stdio.h&gt;\nint fact(int a)\n{   \n    if(a==1)\n        goto A;\n    return a*fact(a-1);\n    A: return a;\n}\nint main()\n{\n    printf(\"%d\",fact(10));\n}\n</code></pre>\n<p>You can't jump from one function to another using goto in Standard C++. From $6.6.4/1 of the C++ Language Standard</p>\n<blockquote>\n<p id=\"so_43284908_43290109_0\">The goto statement unconditionally transfers control to the statement\n  labeled by the identifier. The identifier shall be a label (6.1)\n  located in the current function.</p>\n</blockquote>\n<p>...or in Standard C. From $6.8.6.1/1 of the C Language Standard</p>\n<blockquote>\n<p id=\"so_43284908_43290109_1\">The identifier in a goto statement shall name a label located\n  somewhere in the enclosing function. A goto statement shall not jump\n  from outside the scope of an identifier having a variably modified\n  type to inside the scope of that identifier.</p>\n</blockquote>\n", "LastActivityDate": "2017-04-08T04:15:03.857", "CommentCount": "0", "CreationDate": "2017-04-08T04:15:03.857", "ParentId": "43284908", "Score": "0", "OwnerUserId": "5349104"}});