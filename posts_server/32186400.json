post_cb({"32186400": {"CommentCount": "0", "ViewCount": "275", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-08-24T15:43:16.663", "LastActivityDate": "2015-08-24T19:39:52.513", "Title": "Automatically generated move constructor with not movable members", "FavoriteCount": "1", "LastEditDate": "2015-08-24T19:39:52.513", "Id": "32186400", "Score": "5", "Body": "<p>I got in a situation which is quite interesting as the code I'm working on compiles even though I'm surprised it does so I would like to ask you for your take.</p>\n<p>The situation is this. I have a class with deleted move and copy constructors, which has user-defined assignment operators:</p>\n<pre><code>struct A {\n    A() { }\n    A(const A&amp;) = delete;\n    A(A&amp;&amp; ) = delete;\n\n    A&amp; operator=(const A&amp; ) { return *this; }\n    A&amp; operator=(A&amp;&amp; ) { return *this; }\n};\n</code></pre>\n<p>And I have another class with <code>A</code> as the only member. In this class I defined the copy constructor but I kept the move constructor as default and defined the assignment operator through a call to the swap function:</p>\n<pre><code>class B{\npublic:\n    A a;\n\n    B()\n    : a{}\n    { }\n\n    B(const B&amp;)\n    : a{}\n    { }\n\n    B(B&amp;&amp; other) = default;\n};\n\nint main() {\n    B b1;\n    B b2(std::move(b1)); // compiles??\n}\n</code></pre>\n<p>Why does the default move constructor work, considering that it cannot simply call the move or copy constructor A? I am using gcc 4.8.4.</p>\n", "Tags": "<c++><c++11><move-semantics>", "OwnerUserId": "1469167", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32186400_32186876_0": {"section_id": 460, "quality": 0.9, "length": 27}, "so_32186400_32186876_1": {"section_id": 460, "quality": 0.8076923076923077, "length": 21}}, "n3337": {"so_32186400_32186876_0": {"section_id": 451, "quality": 0.8, "length": 24}}, "n4659": {"so_32186400_32186876_1": {"section_id": 483, "quality": 0.8076923076923077, "length": 21}, "so_32186400_32186876_0": {"section_id": 483, "quality": 0.9, "length": 27}}}, "32186876": {"ParentId": "32186400", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-08-24T16:08:40.193", "Score": "7", "LastEditorUserId": "2069064", "LastEditDate": "2015-08-24T19:36:51.350", "Id": "32186876", "OwnerUserId": "2069064", "Body": "<p>My original answer was wrong, so I'm starting over.</p>\n<hr/>\n<p>In [class.copy], we have:</p>\n<blockquote>\n<p id=\"so_32186400_32186876_0\">A defaulted copy/\n  move constructor for a class X is defined as deleted (8.4.3) if X has:<br>\n  \u2014 [...]<br>\n  \u2014 a potentially constructed subobject type M (or array thereof) that cannot be copied/moved because\n  overload resolution (13.3), as applied to M\u2019s corresponding constructor, results in an ambiguity or a\n  function that is <strong>deleted</strong> or inaccessible from the defaulted constructor,<br>\n  \u2014 [...]  </br></br></br></p>\n</blockquote>\n<p>That bullet point applies to <code>B(B&amp;&amp; other) = default;</code>, so that move constructor is defined as deleted. This would seem to break compilation with <code>std::move()</code>, but we also have (via resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1402\" rel=\"noreferrer\">defect 1402</a>):</p>\n<blockquote>\n<p id=\"so_32186400_32186876_1\">A defaulted move constructor that is defined as deleted is <strong>ignored by overload resolution</strong> (13.3, 13.4). <em>[ Note:</em>\n  A deleted move constructor would otherwise interfere with initialization from an rvalue which can use the\n  copy constructor instead. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>Ignoring is the key. Thus, when we do:</p>\n<pre><code>B b1;\nB b2(std::move(b1));\n</code></pre>\n<p>Even though the move constructor for <code>B</code> is deleted, this code is well-formed because the move constructor simply doesn't participate in overload resolution and the copy constructor is called instead. Thus, <code>B</code> is MoveConstructible - even if you cannot construct it via its move constructor.</p>\n", "LastActivityDate": "2015-08-24T19:36:51.350"}});