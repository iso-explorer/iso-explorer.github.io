post_cb({"bq_ids": {"n4140": {"so_40842044_40842044_0": {"length": 10, "quality": 1.0, "section_id": 175}}, "n3337": {"so_40842044_40842044_0": {"length": 10, "quality": 1.0, "section_id": 169}}, "n4659": {"so_40842044_40842044_0": {"length": 10, "quality": 1.0, "section_id": 180}}}, "40842044": {"ViewCount": "220", "Body": "<p>This is a follow-up on <a href=\"https://stackoverflow.com/questions/40076078/are-checked-guard-parameter-packs-cause-of-ill-formed-programs\">this</a> question.</p>\n<p>Consider the following code:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate&lt;typename T, typename... P, typename U = std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;&gt;\nvoid f() { static_assert(sizeof...(P) == 0, \"!\"); }\n\nint main() {\n    f&lt;int&gt;();\n}\n</code></pre>\n<p>It compiles, but according to <a href=\"http://eel.is/c++draft/temp#res-8\" rel=\"nofollow noreferrer\">[temp.res]/8</a> it is ill-formed, no diagnostic required because of:</p>\n<blockquote>\n<p id=\"so_40842044_40842044_0\">every valid specialization of a variadic template requires an empty template parameter pack</p>\n</blockquote>\n<p>Now consider this slightly different example:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate&lt;typename T, typename... P, typename U = std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;&gt;\nvoid f() { static_assert(sizeof...(P) == 0, \"!\"); }\n\ntemplate&lt;&gt;\nvoid f&lt;int, int&gt;() { }\n\nint main() {\n    f&lt;int, int&gt;();\n}\n</code></pre>\n<p>In this case a valid full explicit specialization exists for which the parameter pack is not empty.<br>\nDoes this suffice to say that the code is no longer ill-formed?</br></p>\n<hr>\n<p><sub>Note: I'm not looking for alternative ways like putting the <code>std::enable_if_t</code> in the return type or similar.</sub></p>\n</hr>", "AcceptedAnswerId": "40847653", "Title": "Are checked guard parameter packs cause of ill-formed programs in case of specializations?", "CreationDate": "2016-11-28T10:30:03.887", "Id": "40842044", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:30:32.453", "LastEditorUserId": "-1", "LastActivityDate": "2016-12-15T23:21:47.367", "Score": "9", "OwnerUserId": "4987285", "Tags": "<c++><c++11><templates><language-lawyer><variadic-templates>", "AnswerCount": "1"}, "40847653": {"Id": "40847653", "PostTypeId": "2", "Body": "<p>[temp.res]/8 talks about <em>template-declaration</em>s, not the entity. That is, it talks about primary templates and partial specializations <em>individually</em>; these \"templates\" must <em>each</em> have a valid specialization subject to the rules. Otherwise, the first bullet in that paragraph would have to be interpreted in the same manner, which definitely doesn't give it its intended meaning.</p>\n<pre><code>template &lt;typename T&gt;\nvoid f() {T+0;} // wouldn't be allowed to diagnose this, because there could be an \n                // explicit specialization that doesn't contain this statement...?\n</code></pre>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2016-12-15T23:21:47.367", "Score": "4", "CreationDate": "2016-11-28T15:15:15.920", "ParentId": "40842044", "CommentCount": "9", "OwnerUserId": "3647361", "LastEditDate": "2016-12-15T23:21:47.367"}});