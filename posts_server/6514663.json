post_cb({"6514767": {"ParentId": "6514663", "CommentCount": "1", "Body": "<p>The C++03 standard has the following under <code>\u00a73.10 [basic.lval] p15</code>:</p>\n<blockquote>\n<p id=\"so_6514663_6514767_0\">If a program attempts to access the stored value of an object through an lvalue of other than one of the following types the behavior is undefined<sup>48)</sup>:<br>\n  \u2014 the dynamic type of the object,<br>\n  \u2014 a cv-qualified version of the dynamic type of the object,<br>\n  \u2014 a type that is the signed or unsigned type corresponding to the dynamic type of the object,<br>\n  \u2014 a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,<br>\n  \u2014 an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union),<br>\n  \u2014 a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,<br>\n  \u2014 a char or unsigned char type.</br></br></br></br></br></br></br></p>\n</blockquote>\n<p>Footnote:</p>\n<blockquote>\n<p id=\"so_6514663_6514767_1\"><sup>48)</sup> The intent of this list is to specify those circumstances in which an object may or may not be aliased.</p>\n</blockquote>\n<p><a href=\"http://dbp-consulting.com/tutorials/StrictAliasing.html\" rel=\"nofollow\">This site</a> also lists the sections in the other standards.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "6514767", "Score": "5", "CreationDate": "2011-06-29T01:10:45.347", "LastActivityDate": "2011-06-29T01:10:45.347"}, "6514753": {"ParentId": "6514663", "CommentCount": "1", "Body": "<p>3.3 in C89, 3.10/15 in C++03.</p>\n<p>Both have a footnote, words to the effect of, \"the intent of this list is to indicate when an object may or may not be aliased\".</p>\n", "OwnerUserId": "13005", "PostTypeId": "2", "Id": "6514753", "Score": "5", "CreationDate": "2011-06-29T01:09:15.527", "LastActivityDate": "2011-06-29T01:09:15.527"}, "6514750": {"ParentId": "6514663", "CommentCount": "0", "Body": "<p>This text is present in C89, \u00a73.3 EXPRESSIONS:</p>\n<blockquote>\n<p id=\"so_6514663_6514750_0\">An object shall have its stored\n  value accessed only by an lvalue that\n  has one of the following types:</p>\n<ul>\n<li><p id=\"so_6514663_6514750_1\">the declared type of the object, </p></li>\n<li><p id=\"so_6514663_6514750_2\">a qualified version of the declared\n  type of the object, </p></li>\n<li><p id=\"so_6514663_6514750_3\">a type that is the signed or\n  unsigned type corresponding to the<br>\n  declared type of the object,</br></p></li>\n<li><p id=\"so_6514663_6514750_4\">a type that is the signed or\n  unsigned type corresponding to a<br>\n  qualified version of the declared type\n  of the object,</br></p></li>\n<li><p id=\"so_6514663_6514750_5\">an aggregate or union type that\n  includes one of the aforementioned<br>\n  types among its members (including,\n  recursively, a member of a<br>\n  subaggregate or contained union), or</br></br></p></li>\n<li><p id=\"so_6514663_6514750_6\">a character type.</p></li>\n</ul>\n</blockquote>\n<p>Violation of a \"shall\" constraint leads to undefined behaviour, so a set of allowed aliasing rules can be derived from this text.</p>\n", "OwnerUserId": "134633", "PostTypeId": "2", "Id": "6514750", "Score": "5", "CreationDate": "2011-06-29T01:08:54.730", "LastActivityDate": "2011-06-29T01:08:54.730"}, "bq_ids": {"n4140": {"so_6514663_6514750_4": {"section_id": 7239, "quality": 0.8, "length": 8}, "so_6514663_6514767_0": {"section_id": 7239, "quality": 0.9710144927536232, "length": 67}, "so_6514663_6514750_5": {"section_id": 7239, "quality": 1.0, "length": 16}, "so_6514663_6514750_3": {"section_id": 7239, "quality": 0.875, "length": 7}, "so_6514663_6514767_1": {"section_id": 7239, "quality": 0.9, "length": 9}}, "n3337": {"so_6514663_6514750_4": {"section_id": 6983, "quality": 0.8, "length": 8}, "so_6514663_6514767_0": {"section_id": 6983, "quality": 0.9710144927536232, "length": 67}, "so_6514663_6514750_5": {"section_id": 6983, "quality": 1.0, "length": 16}, "so_6514663_6514750_3": {"section_id": 6983, "quality": 0.875, "length": 7}, "so_6514663_6514767_1": {"section_id": 6983, "quality": 0.9, "length": 9}}, "n4659": {"so_6514663_6514750_4": {"section_id": 8748, "quality": 0.8, "length": 8}, "so_6514663_6514767_0": {"section_id": 8748, "quality": 0.9710144927536232, "length": 67}, "so_6514663_6514750_5": {"section_id": 8748, "quality": 1.0, "length": 16}, "so_6514663_6514750_3": {"section_id": 8748, "quality": 0.875, "length": 7}, "so_6514663_6514767_1": {"section_id": 8748, "quality": 0.9, "length": 9}}}, "6514663": {"CommentCount": "1", "CreationDate": "2011-06-29T00:53:28.853", "PostTypeId": "1", "AcceptedAnswerId": "6514767", "LastEditorUserId": "-1", "LastActivityDate": "2011-06-29T01:10:45.347", "LastEditDate": "2017-05-23T12:06:23.087", "ViewCount": "305", "FavoriteCount": "1", "Title": "Do C89 or C++03 define strict aliasing rules?", "Id": "6514663", "Score": "5", "Body": "<p>I've seen <a href=\"https://stackoverflow.com/questions/6320789/c-aliasing-rules/6320834#6320834\">several assertions</a> that C89 and C++03 define strict aliasing rules. I, however, cannot find that particular bit in the standard. My understanding was that strict aliasing rules were added in C99.</p>\n", "Tags": "<c++><c>", "OwnerUserId": "82320", "AnswerCount": "3"}});