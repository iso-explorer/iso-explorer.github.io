post_cb({"bq_ids": {"n4140": {"so_33353135_33353276_0": {"length": 18, "quality": 1.0, "section_id": 6106}}, "n3337": {"so_33353135_33353276_0": {"length": 18, "quality": 1.0, "section_id": 5872}}, "n4659": {"so_33353135_33353276_0": {"length": 18, "quality": 1.0, "section_id": 7603}}}, "33353135": {"ViewCount": "105", "Body": "<p>In a bigger OpenSource project we have the problem of a dangling pointer somewhere. Instances of a polymorphic object are passed around via a pointer to it and stored in a couple of places. More specifically: A ware is passed around as a <code>Ware*</code> which is allocated at one point and then registered in e.g. the building that ordered it and the carrier that currently holds it (and a couple of more places) The 'owner' is the place the physically 'has' it (e.g. the carrier). So when the carrier dies, he tells the ware to tell the building that ordered it that it no longer comes --&gt; Building removes its pointer. Then the ware is deleted and no instance should have a pointer to it.</p>\n<p>This works in most of the cases but there seems to be some conditions where this fails and an instance still has a pointer. I want to <strong>detect</strong> this. So I thought about replacing the <code>Ware*</code> by a class <code>WarePtr</code> that acts like a shared pointer (ref-counted). So when <code>delete</code> is called, it can check, if the <code>refCount==1</code> and assert this.</p>\n<p>The problem: For most of the usages it is a drop-in replacement. So syntactic changes besides the replacement <code>Ware*</code>-&gt;<code>WarePtr</code>. But I'd also need to change the <code>delete ware</code> calls which I would like to avoid so this could be removed without the need to change this back.</p>\n<p>Is it possible to create a class or an overload so I can actually call <code>delete ware</code> where it is defined as <code>WarePtr ware</code>?<br>\nThe called function would need to check the assertion and call <code>delete</code> on the contained pointer. Overloading the <code>delete operator</code> would only allow me to intercept calls to deleting a <code>WarePtr*</code>...</br></p>\n", "Title": "Emulate pointer (including delete) with C++ class", "CreationDate": "2015-10-26T18:34:18.090", "LastActivityDate": "2015-10-26T19:43:08.290", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "Id": "33353135", "Score": "1", "OwnerUserId": "1930508", "Tags": "<c++><pointers><delete-operator>", "AnswerCount": "2"}, "33353276": {"Id": "33353276", "PostTypeId": "2", "Body": "<p>If <code>WarePtr</code> has a non-explicit conversion function to <code>Ware*</code>, then you can call <code>delete</code> on a <code>WarePtr</code>.</p>\n<blockquote>\n<p id=\"so_33353135_33353276_0\">If the operand has a class type, the operand is converted to a pointer type by calling the above-mentioned\n  conversion function, and the converted operand is used in place of the original operand for the remainder of\n  this section.</p>\n</blockquote>\n<p>([expr.delete]/2)</p>\n<p>Other than that, the operand <em>must</em> be a pointer.</p>\n", "LastActivityDate": "2015-10-26T18:43:04.417", "CommentCount": "2", "CreationDate": "2015-10-26T18:43:04.417", "ParentId": "33353135", "Score": "4", "OwnerUserId": "481267"}, "33354265": {"Id": "33354265", "PostTypeId": "2", "Body": "<p>I understand</p>\n<blockquote>\n<p id=\"so_33353135_33354265_0\">detection of a constraint violation without overhead in release mode</p>\n</blockquote>\n<p>I still suggest that you switch to <code>shared_ptr</code>, it's the right thing to do. The overhead over plain pointers will be very small, well worth the benefits.</p>\n<p>You can then test for the constraint violation in your destructor (or wherever you delete the pointer you gave out) like this:</p>\n<ul>\n<li>create a weak pointer.</li>\n<li><code>reset()</code> the shared pointer that was holding your object to delete it.</li>\n<li><code>assert()</code> that the weak pointer is <code>expired()</code>.</li>\n</ul>\n", "LastActivityDate": "2015-10-26T19:43:08.290", "CommentCount": "2", "CreationDate": "2015-10-26T19:43:08.290", "ParentId": "33353135", "Score": "0", "OwnerUserId": "168683"}});