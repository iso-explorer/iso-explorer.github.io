post_cb({"7210496": {"CommentCount": "0", "ViewCount": "506", "CreationDate": "2011-08-26T20:58:25.480", "LastActivityDate": "2011-08-26T21:42:17.173", "Title": "Explicitly calling WINAPI ReadFile()", "PostTypeId": "1", "Id": "7210496", "Score": "1", "Body": "<p>I'm working with a Garmin GPS device, and trying to pull info off it relating to latitude, longitude, etc. through USB. I was working within the SDK and got to the point I could pull this info out, so now I'm working on rolling this code into the system I'm working in. </p>\n<p>This code is being placed in a class: CGarminUSBEngine which inherits from CASCIIEngine</p>\n<p>I pull this info off the device using the code</p>\n<pre><code>ReadFile (gHandle,\n  TheNewBuffer,\n  MAX_BUFFER_SIZE,\n  &amp;theBytesReturned,\n  NULL);\n</code></pre>\n<p>My issue is that the CASCIIEngine from which CGarminUSBEngine inherits has the function</p>\n<pre><code>BOOL ReadFile(void)\n</code></pre>\n<p>and when I try to call ReadFile() with 5 paramaters to read from my USB device, I get a compiler error saying \"'CASCIIEngine::Readfile' : function does not take 5 arguments\"</p>\n<p>I have yet to figure out how to explicitly call the WINAPI version of this ReadFile() function, or even why it would be necessary. It seems to me that the compiler should know ReadFile is overloaded, and I'm trying to call the WINAPI version, not the CASCIIEngine version. </p>\n<p>Mainly I'd like to know how to explicitly call the WINAPI version, and secondly I'd like to know exactly why this is necessary. Perhaps its somthing simple I'm just missing, which would be frustrating. I appriciate any help. </p>\n", "Tags": "<c++><winapi><readfile>", "OwnerUserId": "914783", "AnswerCount": "1"}, "7210512": {"ParentId": "7210496", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You're getting the error because the compiler is resolving the call to <code>CASCIIEngine::Readfile()</code> instead of the global <code>ReadFile()</code> function provided by the Windows API<sup>\u2020</sup>.</p>\n<p>Obviously the number of arguments don't match, so the compiler complains.</p>\n<p>To tell the compiler to refer to the global <code>ReadFile()</code> function, use the <code>::</code> scope resolution operator.</p>\n<pre><code>   ::ReadFile (gHandle, TheNewBuffer, MAX_BUFFER_SIZE, &amp;theBytesReturned, NULL);\n// ^^---- Note `::`\n</code></pre>\n<hr>\n<p>\u2020 The exact rules that determine which function is resolved is laid out in great detail in the C++ standard. The relevant clauses to your situation are as follows:</p>\n<blockquote>\n<p id=\"so_7210496_7210512_0\"><strong>3.4.1 Unqualified name lookup [basic.lookup.unqual]</strong></p>\n<p id=\"so_7210496_7210512_1\"><em>1.</em> In all the cases listed in 3.4.1, the scopes are searched for a\n  declaration in the order listed in each of the respective categories;\n  <strong>name lookup ends as soon as a declaration is found for the name.</strong>\n  If no declaration is found, the program is ill-formed.</p>\n<p id=\"so_7210496_7210512_2\">...</p>\n<p id=\"so_7210496_7210512_3\"><em>8.</em> A name used in the definition of a member function (9.3) of class\n  <code>X</code> following the function\u2019s <code>declarator-id</code> shall be declared in one\n  of the following ways:</p>\n<ul>\n<li>before its use in the block in which it is used or in an enclosing\n  block (6.3), or</li>\n<li>shall be a member of class <code>X</code> or be a member of a base class of\n  <code>X</code> (10.2), or</li>\n<li>if <code>X</code> is a nested class of class <code>Y</code> (9.7), shall be a member of\n  <code>Y</code>, or shall be a member of a base class of <code>Y</code> (this lookup applies\n  in turn to <code>Y</code>\u2019s enclosing classes, starting with the innermost\n  enclosing class), or</li>\n<li>if <code>X</code> is a local class (9.8) or is a nested class of a local\n  class, before the definition of class <code>X</code> in a block enclosing the\n  definition of class <code>X</code>, or</li>\n<li>if <code>X</code> is a member of namespace <code>N</code>, or is a nested class of a\n  class that is a member of <code>N</code>, or is a local class or a nested class\n  within a local class of a function that is a member of <code>N</code>, before the\n  member function definition, in namespace <code>N</code> or in one of <code>N</code>\u2019s\n  enclosing namespaces.</li>\n</ul>\n<p id=\"so_7210496_7210512_4\">...</p>\n<p id=\"so_7210496_7210512_5\"><strong>9.3.1 Nonstatic member functions [class.mfct.nonstatic]</strong></p>\n<p id=\"so_7210496_7210512_6\"><em>2.</em> When an <code>id-expression</code> (5.1) that is not part of a class member\n  access syntax (5.2.5) and not used to form a pointer to member (5.3.1)\n  is used in the body of a nonstatic member function of class <code>X</code> or\n  used in the <code>mem-initializer</code> for a constructor of class <code>X</code>, <strong>if\n  name lookup (3.4.1) resolves the name in the <code>id-expression</code> to a\n  nonstatic nontype member of class <code>X</code> or of a base class of <code>X</code>, the\n  <code>id-expression</code> is transformed into a class member access expression\n  (5.2.5) using <code>(*this)</code> (9.3.2) as the postfix-expression to the left\n  of the <code>.</code> operator.</strong> The member name then refers to the member of\n  the object for which the function is called ...</p>\n</blockquote>\n<p>Per 3.4.1/1 and 3.4.1/8, the declaration for <code>ReadFile()</code> in the <code>CASCIIEngine</code> class was found first (second bullet point), before the <code>ReadFile()</code> in the global namespace (last bullet point), so name lookup resolves to the member function.</p>\n<p>That means your call to <code>ReadFile()</code> in your class is actually being resolved to this:</p>\n<pre><code>(*this).ReadFile(gHandle, TheNewBuffer, MAX_BUFFER_SIZE,\n    &amp;theBytesReturned, NULL); // Per 9.3.1/2\n</code></pre>\n<p>So the global function wasn't even considered for overload resolution, because it wasn't a member function.</p>\n<p>When you use the <code>::</code> scope resolution operator in the manner used above, it becomes a <em>qualified</em> name referring to a name in the global namespace and thus the above rules do not apply.</p>\n</hr>", "OwnerUserId": "308661", "LastEditorUserId": "308661", "LastEditDate": "2011-08-26T21:42:17.173", "Id": "7210512", "Score": "7", "CreationDate": "2011-08-26T20:59:47.320", "LastActivityDate": "2011-08-26T21:42:17.173"}, "bq_ids": {"n4140": {"so_7210496_7210512_6": {"section_id": 5891, "quality": 0.7407407407407407, "length": 40}, "so_7210496_7210512_3": {"section_id": 7093, "quality": 0.8333333333333334, "length": 10}, "so_7210496_7210512_1": {"section_id": 7087, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_7210496_7210512_6": {"section_id": 5662, "quality": 0.7407407407407407, "length": 40}, "so_7210496_7210512_3": {"section_id": 6838, "quality": 1.0, "length": 12}, "so_7210496_7210512_1": {"section_id": 6831, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_7210496_7210512_1": {"section_id": 8588, "quality": 0.9545454545454546, "length": 21}, "so_7210496_7210512_3": {"section_id": 8594, "quality": 0.8333333333333334, "length": 10}, "so_7210496_7210512_6": {"section_id": 7374, "quality": 0.7407407407407407, "length": 40}}}});