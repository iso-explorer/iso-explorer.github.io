post_cb({"18473525": {"Id": "18473525", "PostTypeId": "2", "Body": "<p>No, <code>g()</code> is not taking a reference to reference. It takes a reference to an <code>int</code>. <code>f()</code> forwards the reference to <code>int</code> it receives to <code>g()</code>.</p>\n<p>A \"reference to a reference\" doesn't actually exist, but there are <a href=\"https://stackoverflow.com/a/5591006/315052\"><strong>rvalue references</strong></a>, which are like references, but allow binding to temporaries.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-27T19:05:59.647", "Score": "4", "CreationDate": "2013-08-27T19:05:59.647", "ParentId": "18473496", "CommentCount": "0", "OwnerUserId": "315052", "LastEditDate": "2017-05-23T10:30:13.120"}, "18473628": {"Id": "18473628", "PostTypeId": "2", "Body": "<p>Nowhere in your code you attempt to pass a reference to a reference. Inside <code>f</code> expression <code>x</code> produces an lvalue of type <code>int</code>. It is not a reference. Expressions in C++ never produce accessible results of reference type, since any results of reference type are immediately interpreted by the language as lvalues of non-reference type.</p>\n<p>See 5/5</p>\n<blockquote>\n<p id=\"so_18473496_18473628_0\">If an expression initially has the type \u201creference to T\u201d (8.3.2,\n  8.5.3), the type is adjusted to T prior to any further analysis. The expression designates the object or function denoted by the reference,\n  and the expression is an lvalue or an xvalue, depending on the\n  expression.</p>\n</blockquote>\n<p>P.S. I'm not sure what you mean by \"Doesn't the formal parameter of g() qualify as a reference to a reference\". The formal parameter of <code>g</code> is declared as <code>int &amp;</code>. Where do you see \"a reference to a reference\" here?</p>\n", "LastActivityDate": "2013-08-27T19:11:34.340", "CommentCount": "0", "CreationDate": "2013-08-27T19:11:34.340", "ParentId": "18473496", "Score": "0", "OwnerUserId": "187690"}, "18473561": {"Id": "18473561", "PostTypeId": "2", "Body": "<p>In the body of <code>f</code>, the value of the <em>expression</em> <code>x</code> is an <code>int</code>. The fact that the <em>variable</em> <code>x</code> has type <code>int &amp;</code> means that the value of the expression is an lvalue, and thus it can bind to the parameter of the function <code>g</code>.</p>\n", "LastActivityDate": "2013-08-27T19:07:39.183", "CommentCount": "0", "CreationDate": "2013-08-27T19:07:39.183", "ParentId": "18473496", "Score": "5", "OwnerUserId": "596781"}, "18473604": {"Id": "18473604", "PostTypeId": "2", "Body": "<p>1) There is nothing wrong with passing a reference to a reference (it is what the move-constructor and move-assignment operators use - though it is actually called a rvalue-reference).</p>\n<p>2) What you are doing is not passing a reference to a reference, but rather passing the same reference through <code>f</code> to <code>g</code>:</p>\n<pre><code>void g(int&amp; x)\n{\n    x = 5;\n}\n\nvoid f(int&amp; x)\n{\n    std::cout &lt;&lt; \"f-in \" &lt;&lt; x &lt;&lt; std::endl;\n    g(x);\n    std::cout &lt;&lt; \"f-out \" &lt;&lt; x &lt;&lt; std::endl;\n}\n\nint main()\n{\n    int x = 42;\n    f(x);\n    std::cout &lt;&lt; \"New x = \" &lt;&lt; x &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastActivityDate": "2013-08-27T19:09:48.480", "CommentCount": "7", "CreationDate": "2013-08-27T19:09:48.480", "ParentId": "18473496", "Score": "3", "OwnerUserId": "529761"}, "bq_ids": {"n4140": {"so_18473496_18473628_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5938}}, "n3337": {"so_18473496_18473628_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5710}}, "n4659": {"so_18473496_18473628_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 7422}}}, "18473680": {"Id": "18473680", "PostTypeId": "2", "Body": "<p>A reference is an <em>alias</em> to a different object. Once the reference has been initialized, it behaves exactly as if you were accessing the object directly, so you are not passing a reference to a reference, but rather a reference to the real object (to which you refer by another reference).</p>\n<p>Creating a reference to a reference would be something like:</p>\n<pre><code>typedef int&amp; intr;\nvoid f(intr&amp; x);    // reference to a reference type\n</code></pre>\n", "LastActivityDate": "2013-08-27T19:15:21.787", "CommentCount": "0", "CreationDate": "2013-08-27T19:15:21.787", "ParentId": "18473496", "Score": "1", "OwnerUserId": "36565"}, "18473496": {"ViewCount": "2992", "Body": "<p>I think it's illegal to pass a reference to a reference in C++.However ,when I run this code it gives me no error.</p>\n<pre><code>void g(int&amp; y)\n{\n   std::cout &lt;&lt; y;\n   y++;\n }\n\n void f(int&amp; x)\n{\n  g(x);\n}\nint  main()\n{\n  int a = 34;\n  f(a);\n  return 0;\n\n }\n</code></pre>\n<p>Doesn't the formal parameter of\n    g()\nqualify as a reference to a reference ??</p>\n", "AcceptedAnswerId": "18473604", "Title": "Pass a reference to a reference", "CreationDate": "2013-08-27T19:04:23.630", "Id": "18473496", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-08-27T19:15:21.787", "Score": "2", "OwnerUserId": "1870685", "Tags": "<c++><pass-by-reference>", "AnswerCount": "5"}});