post_cb({"bq_ids": {"n4140": {"so_29338108_29338121_0": {"length": 19, "quality": 1.0, "section_id": 6270}}, "n3337": {"so_29338108_29338121_0": {"length": 19, "quality": 1.0, "section_id": 6030}}, "n4659": {"so_29338108_29338121_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 7776}}}, "29338509": {"Id": "29338509", "PostTypeId": "2", "Body": "<p>As you've noticed, the code snippet you provided works in Visual Studio but not with other compilers. This is because of how the standard library is implemented for each compiler.</p>\n<p>It turns out that when you include Visual Studio's implementation of <code>&lt;iostream&gt;</code>, you end up including a bunch of other headers indirectly, and one of these headers is <code>&lt;cmath&gt;</code>.</p>\n<p>To see the exact chain, navigate to the standard library include directory. For me (I use Visual Studio 2013 Community Edition) this is located at</p>\n<p>C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include</p>\n<ol>\n<li>Open iostream. Note the line <code>#include &lt;istream&gt;</code></li>\n<li>Open istream. Note the line <code>#include &lt;ostream&gt;</code></li>\n<li>Open ostream. Note the line <code>#include &lt;ios&gt;</code></li>\n<li>Open ios. Note the line <code>#include &lt;xlocnum&gt;</code></li>\n<li>Open xlocnum. Note the line <code>#include &lt;cmath&gt;</code></li>\n</ol>\n<p>Guess what? You included cmath when you included iostream... so your code is good to go, on Visual Studio at least. But, don't rely on implementation details or your code will break if you try to migrate it to another platform/toolchain.</p>\n<p>For example, trying to compile the provided snippet using g++ on Cygwin results in the following error:</p>\n<pre><code>temp.cpp: In function \u2018int main()\u2019:\ntemp.cpp:22:34: error: \u2018log10\u2019 was not declared in this scope\n             double pH = -log10(mc);\n</code></pre>\n<p>This must mean g++'s implementation of <code>&lt;iostream&gt;</code> doesn't depend on <code>&lt;cmath&gt;</code></p>\n", "LastActivityDate": "2015-03-30T04:38:51.497", "CommentCount": "3", "CreationDate": "2015-03-30T04:38:51.497", "ParentId": "29338108", "Score": "3", "OwnerUserId": "4726976"}, "29338121": {"Id": "29338121", "PostTypeId": "2", "Body": "<p>The code:</p>\n<pre><code>i = i++ + ++i;\n</code></pre>\n<p>may <em>also</em> compile okay, but that doesn't make it a good idea :-)</p>\n<p>It would be wise to include headers for library functions that you use. You don't <em>lose</em> any functionality by doing so but you do guarantee the functionality will work (misuse notwithstanding).</p>\n<hr>\n<p>Detailed analysis follows.</p>\n<p>Even if an <em>implementation</em> is relaxed about this, the standard mandates it. <code>C++11 17.6.2.2 Headers /3</code> states:</p>\n<blockquote>\n<p id=\"so_29338108_29338121_0\">A translation unit shall include a header only outside of any external declaration or definition, and <strong>shall include the header lexically before the first reference in that translation unit to any of the entities declared in that header.</strong></p>\n</blockquote>\n<p>The <code>gcc</code> compiler, for example, will grumble bitterly about your code:</p>\n<pre><code>xyzzy.cpp: In function 'int main()':\nxyzzy.cpp:22:34: error: 'log10' was not declared in this scope\n             double pH = -log10(mc);\n                                  ^\n</code></pre>\n<p>As to why VC++ <em>seemingly</em> violates this rule, it has to do with the fact that header files are allowed to include other header files.</p>\n<p>If you compile your code to produce pre-processor output (with <code>/P</code>), you'll find a line buried deep within it thus (at least in VS2013):</p>\n<pre><code>#line 1 \"c:\\\\blah\\\\blah\\\\vc\\\\include\\\\cmath\"\n</code></pre>\n<p>And a bit of analysis turns up the following hierarchy of includes:</p>\n<pre><code>iostream\n    istream\n        ostream\n            ios\n                xlocnum\n                    cmath\n</code></pre>\n<p>(<code>&lt;xlocnum&gt;</code>, one of the internal headers used by <code>&lt;locale&gt;</code>, appears to need <code>ldexp()</code> from the <code>&lt;cmath&gt;</code> library, though there may be others as well).</p>\n<p>That's further evidenced by the fact that VC++ <em>does</em> complain about the following code:</p>\n<pre><code>//#include &lt;iostream&gt;\nusing namespace std;\n\nint main()  {\n    double oneHundred = 100;\n    int two = log10 (oneHundred);\n    return two;\n}\n</code></pre>\n<p>with:</p>\n<pre><code>error C3861: 'log10': identifier not found\n</code></pre>\n<p>but that error disappears the instant you uncomment the <code>iostream</code> inclusion line.</p>\n<hr>\n<p>However, as previously stated, that is <em>not</em> behaviour you should rely on. If you are going to use a library function (or macro/template/whatever), it's up to <em>you</em> to include the correct header.</p>\n<p>Otherwise your program compiling correctly is simply an accident.</p>\n</hr></hr>", "LastEditorUserId": "14860", "LastActivityDate": "2015-03-30T05:05:46.753", "Score": "6", "CreationDate": "2015-03-30T03:50:15.240", "ParentId": "29338108", "CommentCount": "2", "OwnerUserId": "14860", "LastEditDate": "2015-03-30T05:05:46.753"}, "29338108": {"ViewCount": "766", "Body": "<p>So, I have the following code, and it builds and runs perfectly, tried various values and all is well. You'll notice I use log10 function and I do not include cmath or math.h. Why does it still build and run fine? Are those libraries really needed? Why/Why not? Does it have anything to do with me using visual studio? Like, would it not compile if say I was using a different IDE or command prompt to compile it?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\nint main()  {\n\n    cout &lt;&lt; \"Classify solutions as acidic or nonacidic\" &lt;&lt; endl&lt;&lt; endl;\n\n    //declaring double molar concentration\n    double mc = 1;\n\n    //using while and if statements to calculate pH in fixed notaion and acidic  or nonacidic\n    while (mc != 0)\n    {\n        cout &lt;&lt; \"Please enter a molar concentration (or enter 0 to exit): \";\n        cin &gt;&gt; mc;\n\n        if (mc != 0)\n        {\n            cout &lt;&lt; \"Molar Conentration = \" &lt;&lt; scientific &lt;&lt; mc &lt;&lt; endl; //scientific notation\n\n            double pH = -log10(mc);\n            cout &lt;&lt; \"pH = \" &lt;&lt; fixed &lt;&lt; setprecision(6) &lt;&lt; pH &lt;&lt; endl;  //6 deciumals\n\n            if (pH &gt; 7)\n            {\n                cout &lt;&lt; \"Nonacidic\" &lt;&lt; endl &lt;&lt; endl;\n            }\n            else if (pH &lt; 7)\n            {\n                cout &lt;&lt; \"Acidic\" &lt;&lt; endl &lt;&lt; endl;\n            }\n            else\n                cout &lt;&lt; \"Neutral\" &lt;&lt; endl &lt;&lt; endl;\n        }\n    }\n\n    //end program when inputing 0\n    cout &lt;&lt; \"End of Program\" &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "29338509", "Title": "Is <cmath> or <math.h> really needed? Compiles without it", "CreationDate": "2015-03-30T03:48:37.700", "Id": "29338108", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-03-30T05:05:46.753", "Score": "2", "OwnerUserId": "815634", "Tags": "<c++><visual-studio>", "AnswerCount": "2"}});