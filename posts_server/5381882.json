post_cb({"30322474": {"ParentId": "5381882", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>Standards</strong></p>\n<p>Extended integer types are explicitly allowed by the C and C++ standards.</p>\n<p><strong>C++11</strong></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">C++11 N3337 draft</a> 3.9.1 \"Fundamental types\" paragraph 3 says:</p>\n<blockquote>\n<p id=\"so_5381882_30322474_0\">There are five standard signed integer types : \u201csigned char\u201d, \u201cshort int\u201d, \u201cint\u201d, \u201clong int\u201d, and \u201clong long int\u201d. In this list, each type provides at least as much storage as those preceding it in the list. There may also be implementation-defined extended signed integer types. The standard and extended signed integer types are collectively called signed integer types. Plain ints have the natural size suggested by the architecture of the execution environment  the other signed integer types are provided to meet special needs.</p>\n</blockquote>\n<p>You should also consider <code>intmax_t</code>, which 18.4.1 \"Header  synopsis\" paragraph 2 says:</p>\n<blockquote>\n<p id=\"so_5381882_30322474_1\">The header defines all functions, types, and macros the same as 7.18 in the C standard.</p>\n</blockquote>\n<p><strong>C99</strong></p>\n<p><a href=\"http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">C99 N1256 draft</a> explicitly allows them at 6.2.5 \"Types\" paragraph 4:</p>\n<blockquote>\n<p id=\"so_5381882_30322474_2\">There are five standard signed integer types, designated as signed char, short int, int, long int, and long long int. (These and other types may be\n  designated in several additional ways, as described in 6.7.2.) There may also be implementation-defined extended signed integer types.28) The standard and extended signed integer types are collectively called signed integer types.29)</p>\n</blockquote>\n<p>and 7.18.1.5 \"Greatest-width integer types\" paragraph 1 says:</p>\n<blockquote>\n<p id=\"so_5381882_30322474_3\">The following type designates a signed integer type capable of representing any value of any signed integer type:</p>\n<p id=\"so_5381882_30322474_4\">intmax_t</p>\n</blockquote>\n", "OwnerUserId": "895245", "LastEditorUserId": "895245", "LastEditDate": "2017-06-21T06:07:15.860", "Id": "30322474", "Score": "3", "CreationDate": "2015-05-19T10:01:24.430", "LastActivityDate": "2017-06-21T06:07:15.860"}, "5381908": {"ParentId": "5381882", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>__int128</code><br>\n<code>__uint128</code></br></p>\n<p>\u200b\u200b\u200b\u200b\u200b \u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p>\n", "OwnerUserId": "86515", "LastEditorUserId": "86515", "LastEditDate": "2011-03-21T18:43:36.093", "Id": "5381908", "Score": "5", "CreationDate": "2011-03-21T18:24:41.833", "LastActivityDate": "2011-03-21T18:43:36.093"}, "5381968": {"ParentId": "5381882", "CommentCount": "0", "Body": "<p>you can check out BigInt class...\n<a href=\"http://sourceforge.net/projects/cpp-bigint/\" rel=\"nofollow\">http://sourceforge.net/projects/cpp-bigint/</a></p>\n<p>(There are many other BigInts out there...)</p>\n", "OwnerUserId": "324827", "PostTypeId": "2", "Id": "5381968", "Score": "0", "CreationDate": "2011-03-21T18:29:44.563", "LastActivityDate": "2011-03-21T18:29:44.563"}, "14482786": {"ParentId": "5381882", "CommentCount": "1", "Body": "<p>Summarizing...</p>\n<p>If you need to store exact integer values that won't fit in 'long long', gcc offers the type <a href=\"http://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html\" rel=\"nofollow\">__int128</a>. <em>This is a gcc extension</em>, not part of standard C++ (as of this writing).</p>\n<p>If you need to work with even bigger exact integer values, you probably need an <a href=\"http://en.wikipedia.org/wiki/Bigint\" rel=\"nofollow\">arbitrary-precision arithmetic package</a>, such as <a href=\"http://en.wikipedia.org/wiki/GNU_Multi-Precision_Library\" rel=\"nofollow\">GMP</a>.  If your need is very limited you could roll your own extended precision code, but that can quickly become more complicated (and less efficient and reliable) than using an existing library.</p>\n<p>If you need to store larger numbers but don't need to store the larger values exactly, you can use <strong>float</strong> or <strong>double</strong>: These can represent numbers of much larger magnitude, but with less <a href=\"http://en.wikipedia.org/wiki/Arithmetic_precision\" rel=\"nofollow\">precision</a>.</p>\n<p>And of course, if you just want to take up more memory, declare an array ;-)</p>\n", "OwnerUserId": "26972", "PostTypeId": "2", "Id": "14482786", "Score": "2", "CreationDate": "2013-01-23T15:06:37.717", "LastActivityDate": "2013-01-23T15:06:37.717"}, "5381882": {"CommentCount": "9", "ViewCount": "40120", "PostTypeId": "1", "LastEditorUserId": "895245", "CreationDate": "2011-03-21T18:22:35.260", "LastActivityDate": "2017-06-21T06:07:15.860", "Title": "Are there types bigger than long long int in C++?", "FavoriteCount": "6", "LastEditDate": "2015-05-19T10:03:22.850", "Id": "5381882", "Score": "32", "Body": "<p>Are there types bigger than long long int in C++?</p>\n<p>My compiler is g++.</p>\n", "Tags": "<c++><types>", "OwnerUserId": "669948", "AnswerCount": "8"}, "5381911": {"ParentId": "5381882", "CommentCount": "0", "Body": "<p>No, but you can use libraries like <a href=\"http://en.wikipedia.org/wiki/GNU_Multi-Precision_Library\">GMP</a> to handle bigger numbers.</p>\n", "OwnerUserId": "669336", "PostTypeId": "2", "Id": "5381911", "Score": "8", "CreationDate": "2011-03-21T18:24:54.963", "LastActivityDate": "2011-03-21T18:24:54.963"}, "5382282": {"ParentId": "5381882", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Depending on what your need is, you could create your own struct to handle the data type:</p>\n<pre><code>#include &lt;cstdint&gt;\n\nstruct uint256_t\n{\n    std::uint64_t bits[4];\n};\n\nuint256_t x;\n</code></pre>\n", "OwnerUserId": "591057", "LastEditorUserId": "591057", "LastEditDate": "2012-03-27T16:56:22.373", "Id": "5382282", "Score": "9", "CreationDate": "2011-03-21T18:58:05.147", "LastActivityDate": "2012-03-27T16:56:22.373"}, "5381913": {"ParentId": "5381882", "CommentCount": "1", "Body": "<p>There is a gcc <a href=\"http://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html\" rel=\"noreferrer\">extension for 128 bit integers</a>.</p>\n", "OwnerUserId": "50079", "PostTypeId": "2", "Id": "5381913", "Score": "13", "CreationDate": "2011-03-21T18:24:58.350", "LastActivityDate": "2011-03-21T18:24:58.350"}, "bq_ids": {"n4140": {"so_5381882_30322474_2": {"section_id": 7211, "quality": 0.6363636363636364, "length": 28}, "so_5381882_30322474_0": {"section_id": 7211, "quality": 0.9333333333333333, "length": 56}, "so_5381882_30322474_1": {"section_id": 6797, "quality": 0.8888888888888888, "length": 8}, "so_5381882_30322474_3": {"section_id": 45, "quality": 0.5384615384615384, "length": 7}}, "n3337": {"so_5381882_30322474_2": {"section_id": 6955, "quality": 0.6363636363636364, "length": 28}, "so_5381882_30322474_0": {"section_id": 6955, "quality": 0.9333333333333333, "length": 56}, "so_5381882_30322474_1": {"section_id": 6552, "quality": 0.8888888888888888, "length": 8}, "so_5381882_30322474_3": {"section_id": 42, "quality": 0.5384615384615384, "length": 7}}, "n4659": {"so_5381882_30322474_2": {"section_id": 8720, "quality": 0.6136363636363636, "length": 27}, "so_5381882_30322474_0": {"section_id": 8720, "quality": 0.9, "length": 54}, "so_5381882_30322474_1": {"section_id": 8287, "quality": 0.6666666666666666, "length": 6}, "so_5381882_30322474_3": {"section_id": 8721, "quality": 0.6153846153846154, "length": 8}}}, "42529342": {"ParentId": "5381882", "CommentCount": "0", "Body": "<p>If you know your number is always going to be positive, you can extend the scope of an <code>int</code> by labeling it as <code>unsigned</code></p>\n<p><code>int myNum;           // Range is from \u20132,147,483,648 to 2,147,483,647</code></p>\n<p><code>unsigned int myNum;  // Range is from 0 to 4,294,967,295</code></p>\n", "OwnerUserId": "5274923", "PostTypeId": "2", "Id": "42529342", "Score": "0", "CreationDate": "2017-03-01T10:32:51.000", "LastActivityDate": "2017-03-01T10:32:51.000"}});