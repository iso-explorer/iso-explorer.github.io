post_cb({"19224892": {"ParentId": "19224685", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It's perfectly OK to create an object of the same type inside a class. You should be able to get it to work with <code>stack&lt;T&gt;</code>, like this</p>\n<pre><code>template &lt;class T&gt;\nclass stack\n{\n    ...\n\n    void sort()\n    {\n        stack&lt;T&gt; st;\n        st.push(4);\n    }\n\n    ...\n};\n</code></pre>\n<p>It seems that <code>stack st;</code> is correct according to the latest C++ standards, but maybe your compiler hasn't implemented this part of the C++ standard yet.</p>\n<p>Having said that, it's not clear from your posted code why this is a template. If it were a template I'd expect to see</p>\n<pre><code>void push(const T&amp; x)\n{\n    ...\n}\n\nT pop()\n{\n    ...\n}\n</code></pre>\n<p>etc. Are you sure you want this to be a template? You should do that properly or not at all.</p>\n", "OwnerUserId": "882003", "LastEditorUserId": "882003", "LastEditDate": "2013-10-07T14:50:05.663", "Id": "19224892", "Score": "1", "CreationDate": "2013-10-07T12:26:12.603", "LastActivityDate": "2013-10-07T14:50:05.663"}, "19224908": {"ParentId": "19224685", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Without templates this is fine, e.g.</p>\n<pre><code>class stack\n{\n  public: //&lt;-- added so we can use this\n  void push(int d)\n  {\n  //...\n  }\n\n  int pop()\n  {\n  //...\n  }\n\n  void sort()\n  {\n    stack st;\n    st.push(4);\n  }\n};\n</code></pre>\n<p>Now, in your templated case, you will <strike>need to</strike> can tell the sort function what kind of stack to make.</p>\n<pre><code>  void sort()\n  {\n    stack&lt;T&gt; st;\n    //---^^^\n    st.push(4);\n  }\n</code></pre>\n<p><em>more edit</em>\nSection 14.6.1 </p>\n<blockquote>\n<p id=\"so_19224685_19224908_0\">\"The injected-class-name can be used with or without a\n  template-argument-list. When it is used without a\n  template-argument-list, it is equivalent to the injected-class-name\n  followed by the template-parameters of the class template enclosed in\n  &lt;&gt;.\"</p>\n</blockquote>\n<p>So, you can say <code>stack st;</code>\n<br/>\nYou will not be able to have a member variable of type <code>stack&lt;T&gt;</code> though.</p>\n", "OwnerUserId": "1055118", "LastEditorUserId": "1055118", "LastEditDate": "2013-10-07T14:28:53.807", "Id": "19224908", "Score": "1", "CreationDate": "2013-10-07T12:27:07.673", "LastActivityDate": "2013-10-07T14:28:53.807"}, "19224685": {"CommentCount": "4", "ViewCount": "1060", "PostTypeId": "1", "LastEditorUserId": "112079", "CreationDate": "2013-10-07T12:16:03.897", "LastActivityDate": "2013-10-07T14:50:05.663", "Title": "Can I create object in the same class?", "LastEditDate": "2013-10-07T12:21:05.240", "Id": "19224685", "Score": "0", "Body": "<p>Can I create an object of a class in the same class ?\nIf not what can I do ?</p>\n<p>example stack class</p>\n<pre><code>template &lt;class T&gt;\nclass stack\n{\n\nvoid push(T d)\n{\n...\n}\n\nT pop()\n{\n...\n}\n\n//my question is about this one\nvoid sort()\n{\n// I get errors when I do that ?\n stack st;\n st.push(4);\n}\n\n};\n</code></pre>\n", "Tags": "<c++><class><object><instance>", "OwnerUserId": "2849898", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_19224685_19224908_0": {"section_id": 179, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_19224685_19224908_0": {"section_id": 173, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_19224685_19224908_0": {"section_id": 184, "quality": 0.7692307692307693, "length": 10}}}});