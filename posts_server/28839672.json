post_cb({"bq_ids": {"n4140": {"so_28839672_28839755_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 7040}}, "n4659": {"so_28839672_28839755_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 8537}}}, "28839755": {"Id": "28839755", "PostTypeId": "2", "LastEditDate": "2015-03-03T19:18:46.093", "CommentCount": "0", "LastEditorUserId": "1708801", "LastActivityDate": "2015-03-03T19:18:46.093", "CreationDate": "2015-03-03T18:56:41.133", "ParentId": "28839672", "Score": "3", "Body": "<p>Because you are taking a reference the variable is odr-used and this requires a definition out of line:</p>\n<pre><code>constexpr const char* SomeStruct::someString;\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ecd786eb2f72b231\" rel=\"nofollow\">see it working live</a>.</p>\n<p>From the draft C++14 standard section <code>3.2</code> <em>[basic.def.odr]</em>:</p>\n<blockquote>\n<p id=\"so_28839672_28839755_0\">A variable x whose name appears as a potentially-evaluated expression ex is odr-used by ex unless applying\n  the lvalue-to-rvalue conversion (4.1) to x yields a constant expression (5.20) that does not invoke any nontrivial\n  functions and, if x is an object, ex is an element of the set of potential results of an expression e,\n  where either the lvalue-to-rvalue conversion (4.1) is applied to e, or e is a discarded-value expression [...]</p>\n</blockquote>\n<p>For example the following alternative <code>print</code> would not odr-use <code>someString</code>:</p>\n<pre><code>template&lt;typename T&gt; void print(T mX) \n{\n    std::cout &lt;&lt; mX &lt;&lt; std::endl;  \n}\n</code></pre>\n", "OwnerUserId": "1708801"}, "28839859": {"Id": "28839859", "PostTypeId": "2", "Body": "<p>There are a narrow set of circumstances under which you may not bother to define a <code>static</code> data member (whether it's <code>constexpr</code> or not, and whether it takes advantage of this initialisation form or not), and this is not one of them, because you indirectly take the address of it (and therefore it must exist as an actual object in memory).</p>\n<p>You can kind of think of it as a static data member that can't simply be \"inlined\" at the point of its use, due to <em>what</em> that use is.</p>\n<p>Define <code>someString</code>.</p>\n", "Score": "2", "LastActivityDate": "2015-03-03T19:02:34.253", "CreationDate": "2015-03-03T19:02:34.253", "ParentId": "28839672", "CommentCount": "2", "OwnerUserId": "560648"}, "28839672": {"ViewCount": "1432", "LastEditDate": "2015-03-03T19:00:44.703", "AcceptedAnswerId": "28839755", "Title": "Linker error (undefined reference) with `static constexpr const char*` and perfect-forwarding", "CreationDate": "2015-03-03T18:52:18.843", "LastActivityDate": "2015-03-03T19:18:46.093", "CommentCount": "6", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt; void print(T&amp;&amp; mX) \n{\n    std::cout &lt;&lt; std::forward&lt;T&gt;(mX) &lt;&lt; std::endl;  \n}\n\nstruct SomeStruct\n{\n    static constexpr const char* someString{\"hello!\"};\n    SomeStruct()\n    {\n        print(someString);\n    }\n};\n\nint main() \n{\n    SomeStruct s{};\n    return 0;\n}\n</code></pre>\n<hr>\n<p><code>clang++ -std=c++1y ./code.cpp -o code.o</code></p>\n<blockquote>\n<p id=\"so_28839672_28839672_0\">/tmp/code-a049fe.o: In function `SomeStruct::SomeStruct()':\n  ./code.cpp:(.text._ZN10SomeStructC2Ev[_ZN10SomeStructC2Ev]+0xa):\n  undefined reference to `SomeStruct::someString' clang: error: linker\n  command failed with exit code 1 (use -v to see invocation)</p>\n</blockquote>\n<hr>\n<p><code>g++ -std=c++1y ./code.cpp -o code.o</code></p>\n<blockquote>\n<p id=\"so_28839672_28839672_1\">/tmp/ccyrTsjS.o: In function `SomeStruct::SomeStruct()':\n  code.cpp:(.text._ZN10SomeStructC2Ev[_ZN10SomeStructC5Ev]+0xd):\n  undefined reference to `SomeStruct::someString' collect2: error: ld\n  returned 1 exit status</p>\n</blockquote>\n<hr>\n<p>Why is this linker error happening? Isn't <code>someString</code> supposed to be resolvable at compile-time?</p>\n<p>Also, the error doesn't happen if <code>print(someString)</code> is replaced with <code>cout &lt;&lt; someString;</code></p>\n</hr></hr></hr>", "PostTypeId": "1", "LastEditorUserId": "560648", "Id": "28839672", "Tags": "<c++><linker><c++14><constexpr><perfect-forwarding>", "Score": "2", "OwnerUserId": "598696", "ClosedDate": "2015-03-03T19:03:49.580", "AnswerCount": "2"}});