post_cb({"25701422": {"ParentId": "25701381", "CommentCount": "0", "Body": "<p>Unary <code>+</code> is not only defined for numeric types, but also for pointer types. It is not defined, however, for arrays.</p>\n<p>So, <code>foo(+c)</code> forces <code>c</code> to be converted to a pointer to its first element. If <code>foo</code> is a function defined as taking a <code>char *</code>, that wouldn't be necessary: it would already happen implicitly. It can matter when you have overloads (possibly via a template function), though.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "25701422", "Score": "22", "CreationDate": "2014-09-06T14:47:08.823", "LastActivityDate": "2014-09-06T14:47:08.823"}, "25701381": {"CommentCount": "2", "ViewCount": "4436", "CreationDate": "2014-09-06T14:43:12.167", "LastActivityDate": "2015-01-14T21:24:50.043", "Title": "What is the purpose of unary plus operator on char array?", "FavoriteCount": "3", "PostTypeId": "1", "Id": "25701381", "Score": "34", "Body": "<p>What does the following do? I thought + was for integer promotion only.</p>\n<pre><code>char c[20] = \"hello\";\nfoo(+c);\nfoo(+\"hello\");\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "4014723", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25701381_25701418_0": {"section_id": 6070, "quality": 0.92, "length": 23}}, "n3337": {"so_25701381_25701418_0": {"section_id": 5838, "quality": 0.92, "length": 23}}, "n4659": {"so_25701381_25701418_0": {"section_id": 7566, "quality": 0.92, "length": 23}}}, "25701418": {"ParentId": "25701381", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>It forces the array to decay to a pointer, as indirectly stated in \u00a75.3.1 [expr.unary.op]/7:</p>\n<blockquote>\n<p id=\"so_25701381_25701418_0\">The operand of the unary + operator shall have arithmetic, unscoped enumeration, or pointer type and the\n  result is the value of the argument. Integral promotion is performed on integral or enumeration operands.\n  The type of the result is the type of the promoted operand.</p>\n</blockquote>\n<p>You might not see it at first, but since an array is not one of the types listed, it must be converted to a pointer in order to fit. From there, the value of the pointer is returned.</p>\n<p>In both cases, a <code>foo(const char *)</code> would be chosen over a <code>foo(const char(&amp;)[N])</code>. For some examples of useful things you can use unary plus for, see <a href=\"https://stackoverflow.com/a/3182557/962089\">this answer</a>. Included are converting an enum type to an integer and getting around a linking issue. As you say, it can also be used for integral promotion. For example, <code>unsigned char byte = getByte(); std::cout &lt;&lt; +byte;</code> will print the numerical value and never the character.</p>\n<hr>\n<p>A straightforward example is:</p>\n<pre><code>char a[42];\ncout &lt;&lt; sizeof(a) &lt;&lt; endl;  // prints 42\ncout &lt;&lt; sizeof(+a) &lt;&lt; endl; // prints 4\n</code></pre>\n</hr>", "OwnerUserId": "962089", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:41.900", "Id": "25701418", "Score": "32", "CreationDate": "2014-09-06T14:46:48.983", "LastActivityDate": "2015-01-14T21:24:50.043"}});