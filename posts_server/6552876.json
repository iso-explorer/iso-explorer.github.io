post_cb({"6561367": {"ParentId": "6552876", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Ok, it is not a bug, even it seems that it is required behavior:</p>\n<p>According to C++ 2003 standard: </p>\n<ul>\n<li><p>tellg(): (27.6.1.3)</p>\n<blockquote>\n<p id=\"so_6552876_6561367_0\">After constructing a sentry object, if fail() != false, returns pos_type(-1) to indicate failure. Otherwise, returns rdbuf()-&gt;pubseekoff(0, cur, in).</p>\n</blockquote></li>\n<li><p>sentry (27.6.1.1.2):</p>\n<blockquote>\n<p id=\"so_6552876_6561367_1\">if noskipws is zero and is.flags() &amp; ios_base::skipws is nonzero, the func-\n  tion extracts and discards each character as long as the next available input character c is a whitespace character. If is.rdbuf()-&gt;sbumpc() or is.rdbuf()-&gt;sgetc() returns traits::eof(), the function calls setstate(failbit | eofbit) (which may throw ios_base::failure).</p>\n</blockquote></li>\n</ul>\n<p>So basically </p>\n<ul>\n<li>tellg() creates sentry object:</li>\n<li>sentry extracts white space characters and should set failbit after getting to eof.</li>\n<li>tellg() sees failbit should return eof() (-1)</li>\n</ul>\n<p>So gcc-4.6 seems to behave correctly... </p>\n", "OwnerUserId": "66522", "LastEditorUserId": "66522", "LastEditDate": "2011-07-03T06:14:48.093", "Id": "6561367", "Score": "5", "CreationDate": "2011-07-03T06:02:39.957", "LastActivityDate": "2011-07-03T06:14:48.093"}, "6552876": {"CommentCount": "1", "ViewCount": "1456", "PostTypeId": "1", "LastEditorUserId": "149841", "CreationDate": "2011-07-01T20:23:56.427", "LastActivityDate": "2012-07-27T08:16:17.077", "Title": "file stream tellg/tellp and gcc-4.6 is this a bug?", "AcceptedAnswerId": "6561367", "LastEditDate": "2012-07-27T08:16:17.077", "Id": "6552876", "Score": "5", "Body": "<p>This code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nint main()\n{   \n    std::remove(\"test.txt\");\n    std::fstream f(\"test.txt\",std::ios::in | std::ios::out | std::ios::binary | std::ios::trunc);\n    std::cout &lt;&lt; f.good() &lt;&lt; std::endl;\n    f&lt;&lt;\"test\"&lt;&lt; std::flush;\n    std::cout &lt;&lt; f.tellg() &lt;&lt; \" \" &lt;&lt; f.tellp() &lt;&lt; std::endl;\n    f.seekg(0);\n    std::string s;\n    f&gt;&gt;s;\n    std::cout &lt;&lt; f.tellg() &lt;&lt; \" \" &lt;&lt; f.tellp() &lt;&lt; std::endl;\n}   \n</code></pre>\n<p>Gives following output in gcc-4.4.5</p>\n<pre><code>1\n4 4\n4 4\n</code></pre>\n<p>i.e. both tellg and tellp returned expected stream position 4.</p>\n<p>While gcc-4.6.0</p>\n<p>Gives:</p>\n<pre><code>1\n4 4\n-1 4\n</code></pre>\n<p>Where can I find a reference to tell:</p>\n<ol>\n<li>1st case is correct (bug in gcc-4.6)</li>\n<li>2nd case is correct (bug in gcc &lt; gcc-4.6)</li>\n<li>Both case are correct the behavior is undefined</li>\n</ol>\n", "Tags": "<c++><gcc><iostream>", "OwnerUserId": "66522", "AnswerCount": "3"}, "6552933": {"ParentId": "6552876", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I can confirm the difference. However, it is <em>not</em> a difference of the compiler, it is not a difference of the standard library headers, it is a difference of the linked shared library.</p>\n<p>It doesn't depend on the gcc version. It doesn't depend on architecture:</p>\n<pre><code>t44:       ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped\nt45:       ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped\nt46:       ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped\n</code></pre>\n<p>The real difference seems to be</p>\n<ul>\n<li>meerkat: libstdc++6 4.5.1-7ubuntu2</li>\n<li>natty: libstdc++6 4.6.0-3~ppa1 (from <a href=\"https://launchpad.net/~ubuntu-toolchain-r/+archive/test\" rel=\"nofollow\">here</a>)</li>\n</ul>\n<h2>On ubuntu meerkat</h2>\n<pre><code>$ uname -a\nLinux natty 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:24 UTC 2011 i686 GNU/Linux\n$ for a in t4?; do ./$a; done\n1\n4 4\n4 4\n1\n4 4\n4 4\n1\n4 4\n4 4\n</code></pre>\n<h2>On ubuntu natty</h2>\n<pre><code>Linux natty 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:24 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux\nsehe@natty:/mnt/jail/home/sehe$ for a in t4?; do ./$a; done\n1\n4 4\n-1 4\n1\n4 4\n-1 4\n1\n4 4\n-1 4\n</code></pre>\n", "OwnerUserId": "85371", "LastEditorUserId": "85371", "LastEditDate": "2011-07-01T20:38:56.367", "Id": "6552933", "Score": "2", "CreationDate": "2011-07-01T20:30:46.520", "LastActivityDate": "2011-07-01T20:38:56.367"}, "bq_ids": {"n4140": {"so_6552876_6561367_1": {"section_id": 2182, "quality": 0.9310344827586207, "length": 27}, "so_6552876_6561367_0": {"section_id": 2247, "quality": 1.0, "length": 14}}, "n3337": {"so_6552876_6561367_1": {"section_id": 2170, "quality": 0.9310344827586207, "length": 27}, "so_6552876_6561367_0": {"section_id": 2235, "quality": 1.0, "length": 14}}, "n4659": {"so_6552876_6561367_1": {"section_id": 2455, "quality": 0.9310344827586207, "length": 27}, "so_6552876_6561367_0": {"section_id": 2520, "quality": 1.0, "length": 14}}}, "6553130": {"ParentId": "6552876", "CommentCount": "6", "Body": "<p>Ok, separate from the version analysis, which I'll leave for good measure, here is the answer:</p>\n<h1>PR/26211</h1>\n<p>I'll try to find source, but this thread discusses whether the documentation needs to be updated due to this change. It is therefore, a documented change :)</p>\n<p><strong>Edit</strong> Only found this: <a href=\"http://patchwork.ozlabs.org/patch/72121/\" rel=\"nofollow\">libstdc++/26211 (again) + N3168</a></p>\n<p>From this page: <a href=\"http://gcc.gnu.org/ml/libstdc++/2011-04/msg00026.html\" rel=\"nofollow\">http://gcc.gnu.org/ml/libstdc++/2011-04/msg00026.html</a></p>\n<blockquote>\n<p id=\"so_6552876_6553130_0\">Hey, all.</p>\n<p id=\"so_6552876_6553130_1\">I recently started using gcc-4.6.0 and it seems that the behaviour of\n  std::istream::tellg() has changed when (just) the eofbit is set.  I\n  managed to track this down to PR/26211, and I'm not debating the\n  changes.</p>\n<p id=\"so_6552876_6553130_2\">It took me a while to figure out what was wrong because the doxygen\n  for tellg() says:</p>\n<pre><code>If fail() is not false, returns pos_type(-1) to indicate\nfailure. Otherwise returns rdbuf()-&gt;pubseekoff(0,cur,in).\n</code></pre>\n<p id=\"so_6552876_6553130_3\">That's almost word for word what Langer and Kreft says, so I'm\n  presuming DR60's change to 27.6.1.3 paragraph 37 has lead to this\n  change in libstdc++ behaviour.</p>\n<p id=\"so_6552876_6553130_4\">Should the libstdc++ doxygen be updated to say something about the\n  fact that calling <code>tellg()</code>when <code>eof()</code> will also return <code>pos_type(-1)</code>\n  (because of the fact that it constructs a sentry)?  Are there other\n  functions that also should have updated documentation as a result of\n  DR60?</p>\n</blockquote>\n", "OwnerUserId": "85371", "PostTypeId": "2", "Id": "6553130", "Score": "2", "CreationDate": "2011-07-01T20:54:17.497", "LastActivityDate": "2011-07-01T20:54:17.497"}});