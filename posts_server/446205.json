post_cb({"bq_ids": {"n4140": {"so_446205_446212_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 745}}, "n3337": {"so_446205_446212_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 734}}, "n4659": {"so_446205_446212_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 803}}}, "446295": {"Body": "<p><a href=\"http://www.sgi.com/tech/stl/Multimap.html\" rel=\"nofollow noreferrer\">http://www.sgi.com/tech/stl/Multimap.html</a></p>\n<pre><code>Multimap has the important property that inserting a new element\ninto a multimap does not invalidate iterators that point to existing\nelements. Erasing an element from a multimap also does not invalidate\nany iterators, except, of course, for iterators that actually point to\nthe element that is being erased.\n</code></pre>\n<p>So it should look like this:</p>\n<pre><code>Blah::iterator iter;\nfor ( iter = mm.begin();iter != mm.end();)\n{\n    if ( iter-&gt;second == something )\n    {\n        mm.erase( iter++ );\n        // Use post increment. This increments the iterator but\n        // returns a copy of the original iterator to be used by\n        // the erase method\n    }\n    else\n    {\n        ++iter;   // Use Pre Increment for efficiency.\n    }\n}\n</code></pre>\n<p>Also see:\n<a href=\"https://stackoverflow.com/questions/263945/what-happens-if-you-call-erase-on-a-map-element-while-iterating-from-begin-to-e\">What happens if you call erase() on a map element while iterating from begin to end?</a></p>\n<p>and</p>\n<p><a href=\"https://stackoverflow.com/questions/268898/delete-a-specific-entry-in-the-map-but-the-iterator-must-point-to-the-next-elemen#269717\">delete a specific entry in the map,but the iterator must point to the next element after the deletion</a></p>\n", "CreationDate": "2009-01-15T10:34:23.143", "ParentId": "446205", "CommentCount": "4", "LastEditDate": "2017-05-23T12:17:05.463", "PostTypeId": "2", "LastEditorDisplayName": "Martin York", "LastActivityDate": "2009-01-17T05:33:27.177", "LastEditorUserId": "-1", "Id": "446295", "OwnerDisplayName": "Martin York", "Score": "18", "OwnerUserId": "14065"}, "446205": {"ViewCount": "4798", "Body": "<p>Can I continue to use an multimap iterator even after a call to multimap::erase()?  For example:</p>\n<pre><code>Blah::iterator iter;\nfor ( iter = mm.begin();\n      iter != mm.end();\n      iter ++ )\n{\n    if ( iter-&gt;second == something )\n    {\n        mm.erase( iter );\n    }\n}\n</code></pre>\n<p>Should this be expected to run correctly, or is the iterator invalidated following the call to erase?  Reference sites like <a href=\"http://www.cplusplus.com/reference/stl/multimap/erase.html\" rel=\"nofollow noreferrer\">http://www.cplusplus.com/reference/stl/multimap/erase.html</a> are strangely quiet on this topic of the lifespans of iterators, or the effects of constructive/destructive methods on iterators.</p>\n", "AcceptedAnswerId": "446295", "Title": "Can I continue to use an iterator after an item has been deleted from std::multimap<>?", "CreationDate": "2009-01-15T10:00:07.830", "Id": "446205", "CommentCount": "1", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2009-03-23T10:30:00.953", "LastEditorDisplayName": "dalle", "OwnerDisplayName": "St&#233;phane", "LastEditorUserId": "19100", "LastActivityDate": "2009-03-23T10:30:00.937", "ClosedDate": "2014-08-13T09:30:43.493", "Score": "3", "OwnerUserId": "13022", "Tags": "<c++><stl><multimap>", "AnswerCount": "2"}, "446212": {"Id": "446212", "PostTypeId": "2", "Body": "<p>C++ Standard 23.1.2.8:</p>\n<blockquote>\n<p id=\"so_446205_446212_0\">The insert members shall not affect the validity of iterators and references to the container, and the erase members shall\n  invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>This is a common requirement for all associative containers, and std::multimap is one of them.</p>\n", "OwnerDisplayName": "Igor Semenov", "LastActivityDate": "2009-01-15T10:03:40.007", "Score": "1", "CreationDate": "2009-01-15T10:03:40.007", "ParentId": "446205", "CommentCount": "3", "OwnerUserId": "11401"}});