post_cb({"16854902": {"ParentId": "16854768", "CommentCount": "0", "Body": "<p>The return type of <code>std::accumulate</code> is the same as the type of the third parameter, which is deduced to <code>const char*</code> in your case (because you're passing a string literal in).</p>\n<p>This means that the function expects to work with <code>const char*</code>s internally, but the iterator range contains <code>std::string</code>s, so it barfs. That's why you must pass the correct type (<code>std::string</code>) in the third argument:</p>\n<pre><code>string num = accumulate(v.begin(), v.end(), std::string());\n</code></pre>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "16854902", "Score": "0", "CreationDate": "2013-05-31T10:13:01.720", "LastActivityDate": "2013-05-31T10:13:01.720"}, "16854866": {"ParentId": "16854768", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>One of the template parameters of <a href=\"http://en.cppreference.com/w/cpp/algorithm/accumulate\" rel=\"nofollow\"><code>std::accumulate</code></a> is the return type, which would be deduced from the third function argument. This is also a type that should be capable of accumulating the values in the input iterator range. In your case, your return type should be <code>std::string</code>, but you are passing <code>\"\"</code>, which is a <code>const char[2]</code>. This is not a type that can be copied and used for an accumulation.</p>\n<p>You can fix this by passing an <code>std::string</code>:</p>\n<pre><code>string num = accumulate(v.begin(),v.end(), std::string());\n</code></pre>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2013-05-31T10:16:39.587", "Id": "16854866", "Score": "4", "CreationDate": "2013-05-31T10:11:09.637", "LastActivityDate": "2013-05-31T10:16:39.587"}, "16854768": {"CommentCount": "5", "ViewCount": "153", "PostTypeId": "1", "LastEditorUserId": "2286508", "CreationDate": "2013-05-31T10:04:49.210", "LastActivityDate": "2013-05-31T10:22:02.753", "Title": "why c++ accumulate third argument type cause compile failed", "AcceptedAnswerId": "16854951", "LastEditDate": "2013-05-31T10:22:02.753", "Id": "16854768", "Score": "4", "Body": "<p>I write following codes in my editor,but it can't be compiled,it alerts:</p>\n<pre><code>cannot convert 'std::basic_string&lt;char, std::char_traits&lt;char&gt;, \nstd::allocator&lt;char&gt; to 'const char*' in assignment|\n||=== Build finished: 1 errors, 0 warnings ===|\n</code></pre>\n<p>Code:</p>\n<pre><code>#include &lt;iostream&gt;\n//#inclide &lt;algorithm&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n\n    std::vector&lt;std::string&gt; v;\n    v.push_back(string(\"a\"));\n    v.push_back(string(\"b\"));\n    v.push_back(string(\"c\"));\n\n    string num = accumulate(v.begin(),v.end(),\"\");\n\n    std::cout &lt;&lt; num;\n\n    return 0;\n}\n</code></pre>\n<p>I don't know why it can't be compiled,please someone help me.Thanks:)</p>\n", "Tags": "<c++>", "OwnerUserId": "2408827", "AnswerCount": "4"}, "16854832": {"ParentId": "16854768", "CommentCount": "0", "Body": "<p>Instead of <code>\"\"</code> as a third argument, explicitly call <code>std::string()</code>:</p>\n<pre><code>string num = accumulate(v.begin(),v.end(),std::string());\n</code></pre>\n", "OwnerUserId": "1532256", "PostTypeId": "2", "Id": "16854832", "Score": "1", "CreationDate": "2013-05-31T10:08:46.837", "LastActivityDate": "2013-05-31T10:08:46.837"}, "16854951": {"ParentId": "16854768", "CommentCount": "2", "Body": "<p>Paragraph 26.7.2/1 of the C++11 Standard specifies:</p>\n<blockquote>\n<pre><code>template &lt;class InputIterator, class T&gt;\nT accumulate(InputIterator first, InputIterator last, T init);\n</code></pre>\n<p id=\"so_16854768_16854951_0\">[...]</p>\n<p id=\"so_16854768_16854951_1\">1 <em>Effects</em>: Computes its result by initializing the accumulator acc with the initial value init and then\n  modifies it with <code>acc = acc + *i</code> [...] for every iterator <code>i</code> in the range\n  <code>[first,last)</code> in order.</p>\n<p id=\"so_16854768_16854951_2\">[...]</p>\n</blockquote>\n<p>String literals have type <code>const char[]</code>, decaying to <code>const char*</code> when you pass them to functions. Therefore, the initializer you pass to <code>accumulate()</code> would be a <code>const char*</code>, and <code>T</code> would be a <code>const char*</code>. </p>\n<p>This means <code>acc</code> from the expression above will be a <code>const char*</code>, and <code>*i</code> will be a <code>string</code>. Which means the following will not compile:</p>\n<pre><code>acc = acc + *i;\n</code></pre>\n<p>Because <code>acc + *i</code> yields a <code>std::string</code>, and on the left side of the assignment you have a <code>const char*</code>.</p>\n<p>As other have suggested, you should do:</p>\n<pre><code> string num = accumulate(v.begin(),v.end(),string());\n</code></pre>\n<p>Also, you do not need to do:</p>\n<pre><code>v.push_back(string(\"a\"));\n</code></pre>\n<p>When inserting strings into the vector. This is enough:</p>\n<pre><code>v.push_back(\"a\");\n</code></pre>\n<p>An <code>std::string</code> will be implicitly constructed from the string literal <code>\"a\"</code>.</p>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16854951", "Score": "6", "CreationDate": "2013-05-31T10:15:39.837", "LastActivityDate": "2013-05-31T10:15:39.837"}, "bq_ids": {"n4140": {"so_16854768_16854951_1": {"section_id": 3849, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_16854768_16854951_1": {"section_id": 3710, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_16854768_16854951_1": {"section_id": 4620, "quality": 0.8947368421052632, "length": 17}}}});