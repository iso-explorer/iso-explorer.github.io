post_cb({"bq_ids": {"n4140": {"so_47549362_47549495_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 519}, "so_47549362_47549362_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 550}}, "n3337": {"so_47549362_47549495_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 510}, "so_47549362_47549362_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 541}}, "n4659": {"so_47549362_47549495_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 540}, "so_47549362_47549362_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 571}}}, "47549687": {"Id": "47549687", "PostTypeId": "2", "Body": "<pre><code>  #define y 42\n  #define x y\n</code></pre>\n<p>This makes <code>x</code> defined as a sequence of preprocessing tokens that contains one token <code>y</code>. Not the token <code>42</code>.</p>\n<pre><code>  cout &lt;&lt; x;\n</code></pre>\n<p>This will expad <code>x</code> to <code>y</code> and <em>then</em> <code>y</code> to <code>42</code>.</p>\n<pre><code>#undef y\n#define y \"oops\"\n</code></pre>\n<p><code>x</code> is still defined as <code>y</code>.</p>\n<pre><code>cout &lt;&lt; x;\n</code></pre>\n<p>You guess what happens. <code>__LINE__</code> isn't special in this regard.</p>\n", "LastActivityDate": "2017-11-29T09:49:15.023", "CommentCount": "0", "CreationDate": "2017-11-29T09:49:15.023", "ParentId": "47549362", "Score": "5", "OwnerUserId": "775806"}, "47549510": {"Id": "47549510", "PostTypeId": "2", "Body": "<p>Your <a href=\"http://en.cppreference.com/w/cpp/preprocessor/line\" rel=\"nofollow noreferrer\">#line</a> preprocessor directive changes the value to <code>20</code>:</p>\n<pre><code>#line 20\n</code></pre>\n<p>The macro is expanded where used (not where defined) which is in your <code>main()</code> function,  after the preprocessor directive which changes the value to <code>20</code>.</p>\n", "LastEditorUserId": "8202288", "LastActivityDate": "2017-11-29T09:51:48.517", "Score": "3", "CreationDate": "2017-11-29T09:39:44.340", "ParentId": "47549362", "CommentCount": "1", "OwnerUserId": "8202288", "LastEditDate": "2017-11-29T09:51:48.517"}, "47549495": {"Id": "47549495", "PostTypeId": "2", "Body": "<p>If you want to print <code>10</code> then change <code>L</code> into something that is not a macro:</p>\n<pre><code>constexpr int L = __LINE__;\n</code></pre>\n<p>Otherwise the <em>macro</em> <code>L</code> would be substituted on the line <code>int i = L;</code> and become:</p>\n<pre><code>int i = __LINE__;\n</code></pre>\n<p>Where it will have to be substituted again for the line number, and read the last <code>#line</code> directive.</p>\n<p>Recall that macros perform token substitution. When you <code>#define L __LINE__</code> it only specifies what <strong>tokens</strong> should <code>L</code> be substituted for when it appears in the source. It does not substitute anything at the point of <code>L</code>'s own definition.</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/cpp.replace#9\" rel=\"nofollow noreferrer\">C++ - [cpp.replace]/9</a> or <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.10.3p9\" rel=\"nofollow noreferrer\">C - [6.10.3 Macro replacement]/9</a></p>\n<blockquote>\n<p id=\"so_47549362_47549495_0\">A preprocessing directive of the form</p>\n<pre><code># define identifier replacement-list new-line\n</code></pre>\n<p id=\"so_47549362_47549495_1\">defines an object-like macro that causes each subsequent instance of\n  the macro name to be replaced by the replacement list of preprocessing\n  tokens that constitute the remainder of the directive. The replacement\n  list is then rescanned for more macro names as specified below.</p>\n</blockquote>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-11-29T12:46:55.240", "Score": "8", "CreationDate": "2017-11-29T09:39:00.023", "ParentId": "47549362", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-11-29T12:46:55.240"}, "47549362": {"ViewCount": "80", "Body": "<p>I read about macros using <a href=\"http://en.cppreference.com/w/cpp/preprocessor/replace\" rel=\"nofollow noreferrer\">Cppreference</a>. </p>\n<blockquote>\n<p id=\"so_47549362_47549362_0\"><strong>__LINE__</strong> : expands to the source file line number, an integer constant, can be changed by the <code>#line</code> directive</p>\n</blockquote>\n<p>I made c++ program to test <code>__LINE__</code> macro.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#line 10\n#define L __LINE__\n\nint main() \n{\n    #line 20\n    int i = L;\n    cout&lt;&lt;i&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p><strong>Output :</strong> </p>\n<pre><code>20\n</code></pre>\n<p>Why output of the above code is <code>20</code>? Why does not 10?</p>\n", "AcceptedAnswerId": "47549495", "Title": "Replacing __LINE__ macro", "CreationDate": "2017-11-29T09:32:59.697", "Id": "47549362", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-11-29T10:07:06.790", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-29T12:46:55.240", "Score": "0", "OwnerUserId": "6935629", "Tags": "<c++><c><macros>", "AnswerCount": "3"}});