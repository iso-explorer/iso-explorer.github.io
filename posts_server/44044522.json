post_cb({"44045804": {"ParentId": "44044522", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_44044522_44045804_0\">Is it legal?</p>\n</blockquote>\n<p>yes</p>\n<blockquote>\n<p id=\"so_44044522_44045804_1\">Why?</p>\n</blockquote>\n<pre><code>class Foo\n{\npublic:\n    void func1() {\n        //...\n        Foo foo; // Is it legal?\n        //...\n    }\n};\n</code></pre>\n<p>The body of a class member function is compiled after the entire class definition has been considered.</p>\n<p>For this reason, the entire class is available to the method's implementation, including methods and members declared after the current method.</p>\n<p>This is covered in [class.mem]</p>\n<blockquote>\n<p id=\"so_44044522_44045804_2\">Within the class member-specification, the class is regarded as complete within function bodies, default arguments, using-declarations introducing inheriting constructors, exception-specifications, and brace-or-equal-initializers for non-static data members (including such things in nested classes).</p>\n</blockquote>\n", "OwnerUserId": "2015579", "PostTypeId": "2", "Id": "44045804", "Score": "4", "CreationDate": "2017-05-18T10:53:18.640", "LastActivityDate": "2017-05-18T10:53:18.640"}, "44045130": {"ParentId": "44044522", "CommentCount": "0", "Body": "<p>Sloppy speaking, the only difference between a free function and a member function is that a member function get a <code>this</code> passed as first argument (you dont see it explicitly but it is there). This is not completely true, but true enough to understand that there is no reason not to have a <code>Foo</code> inside a member function of <code>Foo</code>. </p>\n<p>What you cannot do is something like this:</p>\n<pre><code>struct Bar {\n    Bar x;\n};\n</code></pre>\n<p>thats not only a quite strange construct (\"its turtles all the way down\", just in case you know that quote) but also your complier will clearly tell you that it cannot work.</p>\n", "OwnerUserId": "4117728", "PostTypeId": "2", "Id": "44045130", "Score": "1", "CreationDate": "2017-05-18T10:23:06.723", "LastActivityDate": "2017-05-18T10:23:06.723"}, "44044570": {"ParentId": "44044522", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Of course it is legal. </p>\n<p>The object <code>foo</code> in <code>func1()</code> is just an instance of your class <code>Foo</code>. The same applies to the parameter of <code>func2()</code>. The parameter in <code>func3()</code> is also legal.</p>\n<p>Note that you can use the private interface of these objects (instances of <code>Foo</code>), since they are inside the class definition.</p>\n", "OwnerUserId": "8012646", "LastEditorUserId": "8012646", "LastEditDate": "2017-05-18T10:07:27.640", "Id": "44044570", "Score": "0", "CreationDate": "2017-05-18T09:58:49.040", "LastActivityDate": "2017-05-18T10:07:27.640"}, "44044522": {"CommentCount": "3", "ViewCount": "85", "CreationDate": "2017-05-18T09:56:40.467", "LastActivityDate": "2017-05-18T10:53:18.640", "Title": "Class methd contains the same class object", "AcceptedAnswerId": "44045804", "PostTypeId": "1", "Id": "44044522", "Score": "0", "Body": "<p>Is it legal in <code>func1</code> and <code>func2</code>? Class methd contains the same class object. </p>\n<p>example:</p>\n<pre><code>class Foo\n{\npublic:\n    void func1() {\n        //...\n        Foo foo; // Is it legal?\n        //...\n    }\n\n    // Is it legal in paramete?\n    void func2(Foo object) {\n        //...\n    }\n\n    // It is legal using reference\n    // http://stackoverflow.com/questions/6921185/why-do-objects-of-the-same-class-have-access-to-each-others-private-data\n    void func3(Foo&amp; object) {\n        //\n    }\n};\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "5793273", "AnswerCount": "6"}, "44044580": {"ParentId": "44044522", "CommentCount": "0", "Body": "<p>of course it is 100% legal, that is what many operators need as parameter, and many other functions use...</p>\n<p>look this example taken from the String class:</p>\n<pre><code>string&amp; operator+= (const string&amp; str);\n</code></pre>\n<p>so string class has a function taking another string as parameter...</p>\n", "OwnerUserId": "982161", "PostTypeId": "2", "Id": "44044580", "Score": "0", "CreationDate": "2017-05-18T09:59:13.283", "LastActivityDate": "2017-05-18T09:59:13.283"}, "44044572": {"ParentId": "44044522", "CommentCount": "0", "Body": "<p>Yes, it is legal in all of those three cases.</p>\n", "OwnerUserId": "963881", "PostTypeId": "2", "Id": "44044572", "Score": "0", "CreationDate": "2017-05-18T09:58:52.847", "LastActivityDate": "2017-05-18T09:58:52.847"}, "bq_ids": {"n4140": {"so_44044522_44045804_2": {"section_id": 5862, "quality": 1.0, "length": 25}}, "n3337": {"so_44044522_44045804_2": {"section_id": 5632, "quality": 0.84, "length": 21}}, "n4659": {"so_44044522_44045804_2": {"section_id": 7345, "quality": 0.64, "length": 16}}}, "44044628": {"ParentId": "44044522", "CommentCount": "0", "Body": "<p>Yes, it is legal in all of your cases.</p>\n<p>But it is illegal in constructor of copy:</p>\n<pre><code>// here should be 'const Foo&amp;'\nFoo(const Foo object);\n</code></pre>\n", "OwnerUserId": "7160624", "PostTypeId": "2", "Id": "44044628", "Score": "2", "CreationDate": "2017-05-18T10:01:28.457", "LastActivityDate": "2017-05-18T10:01:28.457"}});