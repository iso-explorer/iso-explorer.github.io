post_cb({"6177890": {"Id": "6177890", "PostTypeId": "2", "Body": "<p>The probability is high that you type <code>static_cast&lt;unsigned int&gt;(-1)</code>, but really want <code>std::numeric_limits&lt;unsigned int&gt;::max()</code> or, if not applicable, <code>UINT_MAX</code>. </p>\n<p>The difference is primarily in that the latter two express what you want. Casting -1 to unsigned int is less expressive, if at all, therefore not the preferred solution.</p>\n<p>In general, prefer to write expressive code. You'll thank yourself later, and your fellow programmers and the HR department will not frown upon you.</p>\n", "LastActivityDate": "2011-05-30T15:00:45.743", "Score": "0", "CreationDate": "2011-05-30T15:00:45.743", "ParentId": "2963396", "CommentCount": "0", "OwnerUserId": "76722"}, "bq_ids": {"n4140": {"so_2963396_2963451_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5999}, "so_2963396_2963451_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6124}}, "n3337": {"so_2963396_2963451_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5767}, "so_2963396_2963451_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5888}}, "n4659": {"so_2963396_2963451_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 7499}, "so_2963396_2963451_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7621}}}, "2963451": {"Id": "2963451", "PostTypeId": "2", "Body": "<p>GCC is correctly crying -- <code>unsigned int(-1)</code> is a notation that is not conformant with the C++03 standard (5.4.2):</p>\n<blockquote>\n<p id=\"so_2963396_2963451_0\">An explicit type conversion can be expressed using functional notation (5.2.3), a type conversion operator (dynamic_cast, static_cast, reinterpret_cast, const_cast), or the cast notation:</p>\n</blockquote>\n<pre><code>cast-expression:\n   unary-expression\n   ( type-id ) cast-expression\n</code></pre>\n<p>Ergo, you can either correct the cast with the parenthesis, follow the excellent suggestions proposed by GMan :) -- and I'd truly recommend the latter.</p>\n<p><strong>Edit:</strong> the functional notation requires a simple-type-specifier:</p>\n<blockquote>\n<p id=\"so_2963396_2963451_1\">5.2.3 - A simple-type-specifier (7.1.5) followed by a parenthesized expression-list constructs a value of the specified type given the expression list.</p>\n</blockquote>\n<p>Simple type specifiers do not include the composite ones (the ones with spaces).</p>\n", "LastEditorUserId": "233522", "LastActivityDate": "2010-06-03T05:17:46.250", "Score": "3", "CreationDate": "2010-06-03T05:12:06.547", "ParentId": "2963396", "CommentCount": "1", "LastEditDate": "2010-06-03T05:17:46.250", "OwnerUserId": "233522"}, "2963396": {"ViewCount": "733", "Body": "<p>I am porting some C++ code to GCC, and apperantly it isn't happy with C++ style casting when sapces are involved, as in <code>unsigned int(-1)</code>, <code>long long(ShortVar)</code> etc... It gives an <code>error: expected primary-expression before 'long'</code>.</p>\n<p>Is there any way to make peace with GCC without going over each one of those and rewrite in  c-style?</p>\n", "AcceptedAnswerId": "2963451", "Title": "GCC doesn't like C++ style casts with spaces", "CreationDate": "2010-06-03T04:53:42.057", "LastActivityDate": "2011-05-30T15:00:45.743", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "Tags": "<c++><gcc><casting><g++><compiler-errors>", "Id": "2963396", "Score": "2", "OwnerUserId": "311953", "ClosedDate": "2014-04-21T18:11:51.247", "AnswerCount": "3"}, "2963405": {"Id": "2963405", "PostTypeId": "2", "Body": "<p>You want <code>static_cast&lt;unsigned int&gt;(-1)</code> and kin. Those tend to be viewed as the more C++-style casts, and don't have the same problem.</p>\n<p>For what it's worth, you'd have to do:</p>\n<pre><code>template &lt;typename T&gt;\nstruct identity\n{\n    typedef T type;\n};\n</code></pre>\n<p>And then:</p>\n<pre><code>identity&lt;unsigned int&gt;::type(-1);\n</code></pre>\n<p><sub>\nOr in C++0x:</sub></p>\n<pre><code>template &lt;typename T&gt;\nusing id = T;\n\nid&lt;unsigned int&gt;(-1);\n</code></pre>\n<p></p>\n", "LastEditorUserId": "87234", "LastActivityDate": "2010-06-03T05:01:58.543", "Score": "5", "CreationDate": "2010-06-03T04:56:15.187", "ParentId": "2963396", "CommentCount": "7", "LastEditDate": "2010-06-03T05:01:58.543", "OwnerUserId": "87234"}});