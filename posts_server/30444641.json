post_cb({"30444641": {"CommentCount": "1", "ViewCount": "144", "CreationDate": "2015-05-25T19:12:17.490", "LastActivityDate": "2015-05-25T19:25:41.207", "Title": "When I enter Ctrl+Z to finish the loop below, I get the null string in variable z. Why?", "PostTypeId": "1", "Id": "30444641", "Score": "1", "Body": "<p>The buffer <code>z[]</code> gets the null character in its first byte when the EOF (Ctrl+Z in Windows) is entered to finish the loop. Why is this?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    char z[10];\n    while( cin &gt;&gt; z ) cout &lt;&lt; z &lt;&lt; '\\n';\n\n    if( cin.eof() ) cout &lt;&lt; z &lt;&lt; \"End of input\\n\";\n}\n</code></pre>\n<p>This doesn't happen below, i.e., <code>z</code> will keep the last character read from the keyboard.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    char z;\n    while( cin &gt;&gt; z ) cout &lt;&lt; z &lt;&lt; '\\n';\n\n    if( cin.eof() ) cout &lt;&lt; z &lt;&lt; \"End of input\\n\";\n}\n</code></pre>\n", "Tags": "<c++><visual-studio-2013>", "OwnerUserId": "1042389", "AnswerCount": "1"}, "30444739": {"ParentId": "30444641", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>Because the standard says so!</strong></p>\n<p>You're giving the stream what looks like a C-string buffer. Even if the extraction results in a failure bit being set, it wants to terminate what it put in that buffer (in this case, the empty string).</p>\n<p>Here's the proof, from the definition of <code>template&lt;class charT, class traits&gt;\nbasic_istream&lt;charT,traits&gt;&amp; operator&gt;&gt;(basic_istream&lt;charT,traits&gt;&amp; in,\ncharT* s)</code>:</p>\n<blockquote>\n<p id=\"so_30444641_30444739_0\"><code>[C++11: 27.7.2.2.3/8]</code>: <strong>Characters are extracted and stored until any of the following occurs:</strong></p>\n<ul>\n<li><code>n-1</code> characters are stored;</li>\n<li><strong>end of file occurs on the input sequence;</strong></li>\n<li><code>ct.is(ct.space,c)</code> is true for the next available input character <code>c</code>, where <code>ct</code> is <code>use_facet&lt;ctype&lt;charT&gt; &gt;(in.getloc())</code>.</li>\n</ul>\n<p id=\"so_30444641_30444739_1\"><code>[C++11: 27.7.2.2.3/9]:</code> <strong><code>operator&gt;&gt;</code> then stores a null byte (<code>charT()</code>) in the next position, which may be the first position if no characters were extracted.</strong></p>\n</blockquote>\n<p>It bears mentioning that this is the case for extraction into a <code>std::string</code>, too:</p>\n<blockquote>\n<p id=\"so_30444641_30444739_2\"><code>[C++11: 21.4.8.9/1]:</code> <em>Effects:</em> Behaves as a formatted input function (27.7.2.2.1). After constructing a sentry object, if the sentry converts to true, <strong>calls <code>str.erase()</code> and then extracts characters from <code>is</code></strong> and appends them to <code>str</code> as if by calling <code>str.append(1,c)</code>. If <code>is.width()</code> is greater than zero, the maximum number n of characters appended is <code>is.width()</code>; otherwise n is <code>str.max_size()</code>. <strong>Characters are extracted and appended until any of the following occurs:</strong></p>\n<ul>\n<li><code>n</code> characters are stored;</li>\n<li><strong>end-of-file occurs on the input sequence;</strong></li>\n<li><code>isspace(c,is.getloc())</code> is <code>true</code> for the next available input character <code>c</code></li>\n</ul>\n</blockquote>\n<p>That is, for both a <code>char</code> buffer and a <code>std::string</code>, if the stream is in a valid state immediately before the extraction, even if the extraction pulls out zero characters before reaching EOF, your input object will be \"cleared\".</p>\n<p>No such rule exists for a single <code>char</code>:</p>\n<blockquote>\n<p id=\"so_30444641_30444739_3\"><code>[C++11: 27.7.2.2.3/12]:</code> <em>Effects:</em> Behaves like a formatted input member (as described in 27.7.2.2.1) of <code>in</code>. After a sentry object is constructed a character is extracted from <code>in</code>, if one is available, and stored in <code>c</code>. Otherwise, the function calls <code>in.setstate(failbit)</code>.</p>\n</blockquote>\n<p>The original value is left unperturbed if there weren't a new one to take its place.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2015-05-25T19:25:41.207", "Id": "30444739", "Score": "5", "CreationDate": "2015-05-25T19:19:27.513", "LastActivityDate": "2015-05-25T19:25:41.207"}, "bq_ids": {"n4140": {"so_30444641_30444739_1": {"section_id": 2200, "quality": 0.875, "length": 14}, "so_30444641_30444739_3": {"section_id": 2203, "quality": 0.782608695652174, "length": 18}, "so_30444641_30444739_0": {"section_id": 2199, "quality": 0.75, "length": 6}, "so_30444641_30444739_2": {"section_id": 1855, "quality": 0.9047619047619048, "length": 38}}, "n3337": {"so_30444641_30444739_1": {"section_id": 2188, "quality": 0.875, "length": 14}, "so_30444641_30444739_3": {"section_id": 2191, "quality": 0.782608695652174, "length": 18}, "so_30444641_30444739_0": {"section_id": 2187, "quality": 0.75, "length": 6}, "so_30444641_30444739_2": {"section_id": 1849, "quality": 0.9047619047619048, "length": 38}}, "n4659": {"so_30444641_30444739_1": {"section_id": 2473, "quality": 0.875, "length": 14}, "so_30444641_30444739_2": {"section_id": 2028, "quality": 0.8809523809523809, "length": 37}, "so_30444641_30444739_0": {"section_id": 2472, "quality": 0.75, "length": 6}, "so_30444641_30444739_3": {"section_id": 2476, "quality": 0.782608695652174, "length": 18}}}});