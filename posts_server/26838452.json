post_cb({"bq_ids": {"n4140": {"so_26838452_26838679_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 3364}}, "n3337": {"so_26838452_26838679_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 3234}}}, "26838679": {"CommentCount": "0", "Body": "<p>You can't typedef that. It's explicitly not allowed in the standard. (And replacing that with <code>noexcept</code> doesn't help, same problem.)</p>\n<p>Quoting C++11 draft n3290 (\u00a715.4/2 <em>Exception specifications</em>)</p>\n<blockquote>\n<p id=\"so_26838452_26838679_0\">An exception-specification shall appear only on a function declarator for a function type, pointer to function type, reference to function type, or pointer to member function type that is the top-level type of a declaration or definition, or on such a type appearing as a parameter or return type in a function declarator. An exception-specification shall not appear in a typedef declaration or alias-declaration. [ Example:</p>\n<pre><code>void f() throw(int);            // OK\nvoid (*fp)() throw (int);       // OK\nvoid g(void pfa() throw(int));  // OK\ntypedef int (*pf)() throw(int); // ill-formed\n</code></pre>\n<p id=\"so_26838452_26838679_1\">\u2013 end example]</p>\n</blockquote>\n<p>The second example allows you to do something like this:</p>\n<pre><code>void foo() throw() {}\nvoid bar() {}\n\nint main()\n{\n  void (*fa)() throw() = foo;\n  void (*fb)() throw() = bar; // error, does not compile\n}\n</code></pre>\n", "CreationDate": "2014-11-10T07:22:14.213", "ParentId": "26838452", "Id": "26838679", "LastActivityDate": "2014-11-10T07:22:14.213", "PostTypeId": "2", "Score": "7", "OwnerUserId": "635608"}, "26838452": {"CreationDate": "2014-11-10T07:06:06.073", "ViewCount": "249", "Id": "26838452", "AcceptedAnswerId": "26838679", "Score": "6", "Title": "Can I put a throw declaration in a typedef function signature?", "CommentCount": "0", "Body": "<p>Is it possible to declare a function pointer including the throw specification?  For example, I have this function:</p>\n<pre><code>void without_throw() throw() {\n}\n</code></pre>\n<p>And would like to to create a function that accepts it as a parameter, complete with the <code>throw()</code> part. I've tried adding it to the <code>typedef</code>, but that doesn't seem to work:</p>\n<pre><code>typedef void (*without)() throw();\n</code></pre>\n<p>GCC gives me the error <code>error: \u2018without\u2019 declared with an exception specification</code>.</p>\n", "Tags": "<c++>", "LastActivityDate": "2014-11-10T15:10:08.210", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "229686"}, "26846800": {"CommentCount": "0", "Body": "<p>Also you can use std::function if c++0x is acceptable:</p>\n<pre><code>#include &lt;functional&gt;\n\nvoid without_throw() throw() {}\n\ntypedef  std::function&lt;void() throw()&gt; without;\n\nint main()\n{\n    without w = &amp;without_throw;\n    w();\n}\n</code></pre>\n", "CreationDate": "2014-11-10T15:10:08.210", "ParentId": "26838452", "Id": "26846800", "LastActivityDate": "2014-11-10T15:10:08.210", "PostTypeId": "2", "Score": "2", "OwnerUserId": "1117527"}});