post_cb({"2144322": {"ParentId": "2144012", "CommentCount": "5", "CreationDate": "2010-01-27T03:06:21.637", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "2144322", "Score": "1", "Body": "<p>In \u00a77.1.5.2, keep reading down to table 7, which has the full list of what's allowed as a simple specifier (which does include \"unsigned int\").</p>\n", "LastActivityDate": "2010-01-27T03:06:21.637"}, "2144012": {"CommentCount": "3", "AcceptedAnswerId": "2434989", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-01-27T01:40:20.457", "LastActivityDate": "2010-03-12T18:45:20.070", "LastEditDate": "2017-05-23T12:16:32.243", "ViewCount": "1650", "FavoriteCount": "4", "Title": "Explicit Type Conversion and Multiple Simple Type Specifiers", "Id": "2144012", "Score": "8", "Body": "<p>To value initialize an object of type <code>T</code>, one would do something along the lines of one of the following:</p>\n<pre><code>T x = T();\nT x((T()));\n</code></pre>\n<p>My question concerns types specified by a combination of simple type specifiers, e.g., <code>unsigned int</code>:</p>\n<pre><code>unsigned int x = unsigned int();\nunsigned int x((unsigned int()));\n</code></pre>\n<p>Visual C++ 2008 and Intel C++ Compiler 11.1 accept both of these without warnings; Comeau 4.3.10.1b2 and g++ 3.4.5 (which is, admittedly, not particularly recent) do not.</p>\n<p>According to the C++ standard (C++03 5.2.3/2, expr.type.conv):</p>\n<blockquote>\n<p id=\"so_2144012_2144012_0\">The expression <code>T()</code>, where <code>T</code> is a simple-type-specifier (7.1.5.2) for a non-array complete object type or the (possibly cv-qualified) <code>void</code> type, creates an rvalue of the specified type, which is value-initialized</p>\n</blockquote>\n<p>7.1.5.2 says, \"the simple type specifiers are,\" and follows with a list that includes <code>unsigned</code> and <code>int</code>.  </p>\n<p>Therefore, given that in 5.2.3/2, \"simple-type-specifier\" is singular, and <code>unsigned</code> and <code>int</code> are two type specifiers, are the examples above that use <code>unsigned int</code> invalid?  (and, if so, the followup is, is it incorrect for Microsoft and Intel to support said expressions?)</p>\n<p>This question is more out of curiosity than anything else; for all of the types specified by a combination of multiple simple type specifiers, value initialization is equivalent to zero initialization.  (This question was prompted by <a href=\"https://stackoverflow.com/questions/2143022/how-to-correctly-initialize-variable-of-template-type/2143038#2143038\">comments in response to this answer to a question about initialization</a>).</p>\n", "Tags": "<c++><value-initialization>", "OwnerUserId": "151292", "AnswerCount": "4"}, "2145942": {"ParentId": "2144012", "CommentCount": "3", "CreationDate": "2010-01-27T10:08:19.063", "OwnerUserId": "231717", "PostTypeId": "2", "Id": "2145942", "Score": "-2", "Body": "<p>7.1.5.2: </p>\n<blockquote>\n<p id=\"so_2144012_2145942_0\">The simple-type-specifiers specify either a previously-declared user-defined type or one of the fundamental types`</p>\n</blockquote>\n<p>This implies that <code>unsigned int i = unsigned int()</code> is legal, since <code>unsigned int</code> is a fundamental type (and thus a <em>simple-type-specifier</em>, see 3.9.1).</p>\n<p>same applies for types like:</p>\n<pre><code>long double\nlong long\nlong long int\nunsigned long\nunsigned long long int\nshort int\n...\n</code></pre>\n", "LastActivityDate": "2010-01-27T10:08:19.063"}, "2144304": {"ParentId": "2144012", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2010-01-27T03:01:39.933", "Score": "1", "LastEditorUserId": "153285", "LastEditDate": "2010-01-27T05:19:40.723", "Id": "2144304", "OwnerUserId": "153285", "Body": "<p>Hmm, sometimes you need a typedef. If it doesn't say a diagnostic is required, then it's not incorrect for them to support this. Nevertheless, for portability, you can use a typedef (<code>uint16_t</code> or <code>uint64_t</code>, although those might not be right), or quote the typename with a template:</p>\n<pre><code>iterator&lt;void, unsigned long&gt;::value_type( 5 )\n</code></pre>\n<p>How's that for unreasonably verbose?</p>\n<p>Edit: Duh, or simply <code>5ul</code>. That leaves <code>unsigned short</code>, <code>unsigned char</code>, and <code>signed char</code> as the only types you can't easily explicitly construct.</p>\n", "LastActivityDate": "2010-01-27T05:19:40.723"}, "2434989": {"ParentId": "2144012", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2010-03-12T18:45:20.070", "Score": "8", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:09:10.833", "Id": "2434989", "OwnerUserId": "151292", "Body": "<p>I <a href=\"http://groups.google.com/group/comp.lang.c++.moderated/browse_thread/thread/d91b5c8517c7d6f0\" rel=\"nofollow noreferrer\">posted this question to comp.lang.c++.moderated</a>.</p>\n<p>Daniel Kr\u00fcgler of the C++ standards committee agreed with the interpretation that <code>unsigned int</code> is a <em>combination of</em> simple type specifiers, and is not itself a simple type specifier.</p>\n<p>Concerning the caption of table 7 <a href=\"https://stackoverflow.com/questions/2144012/explicit-type-conversion-and-multiple-simple-type-specifiers/2144322#2144322\">referenced by Jerry Coffin</a>, Kr\u00fcgler says:</p>\n<blockquote>\n<p id=\"so_2144012_2434989_0\">I agree that the header of Table 7 (which is Table 9 in the most\n  recent draft N3000) is somewhat misleading, but the preceeding\n  text in [dcl.type.simple]/2 looks very clear to me, when it says:</p>\n<p id=\"so_2144012_2434989_1\">Table 7 summarizes the valid combinations of simple-type-specifiers\n  and the types they specify.\" </p>\n</blockquote>\n<p><em>(I apologize it took me so long to post this back here from the newsgroup; it completely slipped my mind)</em></p>\n", "LastActivityDate": "2010-03-12T18:45:20.070"}, "bq_ids": {"n4140": {"so_2144012_2144012_0": {"section_id": 6000, "quality": 0.7777777777777778, "length": 14}, "so_2144012_2434989_1": {"section_id": 5438, "quality": 0.875, "length": 7}, "so_2144012_2145942_0": {"section_id": 5438, "quality": 0.8, "length": 8}}, "n3337": {"so_2144012_2144012_0": {"section_id": 5768, "quality": 0.7777777777777778, "length": 14}, "so_2144012_2434989_1": {"section_id": 5233, "quality": 0.875, "length": 7}, "so_2144012_2145942_0": {"section_id": 5233, "quality": 0.9, "length": 9}}, "n4659": {"so_2144012_2434989_1": {"section_id": 6865, "quality": 0.875, "length": 7}, "so_2144012_2145942_0": {"section_id": 6865, "quality": 0.8, "length": 8}}}});