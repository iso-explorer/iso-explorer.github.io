post_cb({"bq_ids": {"n4140": {"so_12278039_12278086_0": {"length": 5, "quality": 1.0, "section_id": 6732}, "so_12278039_12278086_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 6789}}, "n3337": {"so_12278039_12278086_0": {"length": 5, "quality": 1.0, "section_id": 6487}, "so_12278039_12278086_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 6544}}, "n4659": {"so_12278039_12278086_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 8281}}}, "12278039": {"ViewCount": "291", "Body": "<p>I don't have any good reference about <code>std::numeric_limits&lt;T&gt;</code>, but sites on the net says that <code>std::numeric_limits&lt;T&gt;::epsilon()</code> will return the difference between <code>1</code> and the smallest number after it. As far as I know about the <code>int</code> type, the next numer after <code>1</code> is <code>2</code>, so epsilon should be <code>1</code>. But it's <code>0</code> (Linux, g++ 4.4.5). What is the reasoning behind that?</p>\n<p>I know that in practice <code>epsilon()</code> is only useful for floating point types, I'm just nitpicking.</p>\n", "AcceptedAnswerId": "12278086", "Title": "std::numeric_limits<T>::epsilon() for integrals", "CreationDate": "2012-09-05T09:11:03.693", "Id": "12278039", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-09-05T09:14:05.763", "Score": "6", "OwnerUserId": "163454", "Tags": "<c++><stl>", "AnswerCount": "2"}, "12278086": {"Id": "12278086", "PostTypeId": "2", "Body": "<p>The standard says ([numeric.limits.members])</p>\n<blockquote>\n<p id=\"so_12278039_12278086_0\">Meaningful for all floating point types.</p>\n</blockquote>\n<p>The standard also says ([numeric.special])</p>\n<blockquote>\n<p id=\"so_12278039_12278086_1\">many values are only required to be meaningful under certain conditions (for example, epsilon() is only meaningful if is_integer is false). Any value that is not \u201cmeaningful\u201d shall be set to 0 or false.</p>\n</blockquote>\n<p>Since the value is not \"meaningful\", the value 0 is required by the standard as an indication that it is not a meaningful value.</p>\n", "LastActivityDate": "2012-09-05T09:13:46.153", "CommentCount": "2", "CreationDate": "2012-09-05T09:13:46.153", "ParentId": "12278039", "Score": "8", "OwnerUserId": "743382"}, "12278090": {"Id": "12278090", "PostTypeId": "2", "Body": "<p>I'd say it returns the range for which numbers are considered to be equal, with integer types that range ought to be 0.</p>\n<p>Ie if you're creating generic functions which can handle both integer and floating point types, you'd like the range to be 0 for integers.</p>\n", "LastActivityDate": "2012-09-05T09:14:05.763", "CommentCount": "1", "CreationDate": "2012-09-05T09:14:05.763", "ParentId": "12278039", "Score": "2", "OwnerUserId": "100724"}});