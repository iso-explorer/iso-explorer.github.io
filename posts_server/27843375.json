post_cb({"27843560": {"Id": "27843560", "PostTypeId": "2", "Body": "<p><em>CASE_1 :-</em></p>\n<pre><code>baseClass(ID);\n</code></pre>\n<p>This is giving you error as it's interpreted by compiler as </p>\n<pre><code>baseClass ID; &lt;&lt;&lt; You're redefining ID.\n</code></pre>\n<p><em>CASE_2 :-</em></p>\n<pre><code>baseClass(10);\n</code></pre>\n<p>As <code>baseClass 10</code> interpretation would be non-sense, compiler treat this as constructor call.</p>\n", "LastActivityDate": "2015-01-08T15:23:30.173", "Score": "0", "CreationDate": "2015-01-08T15:23:30.173", "ParentId": "27843375", "CommentCount": "0", "OwnerUserId": "4047092"}, "27843375": {"ViewCount": "114", "Body": "<p>Here is the problem code:</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass baseClass\n{\npublic:\n    int objID;\n\n    baseClass()\n    {\n        cout &lt;&lt; \"(1) Default constructor\" &lt;&lt; objID &lt;&lt; endl;\n    }\n\n    baseClass(int ID)  // constructor\n    {\n        objID = ID;\n        cout &lt;&lt; \"(2) Constructing base object with ID: \" &lt;&lt; objID &lt;&lt; endl;\n    }\n};\n\nclass derivedClass : public baseClass\n{\npublic:\n    derivedClass(int ID)\n    {\n        baseClass(10);    // Line 1\n        //baseClass(ID);  // Line 2\n        cout &lt;&lt; \"(4) Constructing derived object with ID: \" &lt;&lt; objID &lt;&lt; endl;\n    }\n};\n\n\nint main(int argc, char** argv)\n{\n    derivedClass dcObj(1);\n\n    return 0;\n}\n</code></pre>\n<p>The problem I am having is with line 2 in the derivedClass constructor. It gives me the error that I am redifining a formal parameter. I know this is because compiler thinks I'm declaring a variable called \"ID\" of type baseClass. And I know that I should be calling this in the initializer list.</p>\n<p>But my problem is why is line 1 working? Compiler interprets line 1 as an instantiation of a baseClass object with value 10. Then why is line 2 not working. I am passing an int in both cases. How is the compiler differentiating these two.</p>\n", "AcceptedAnswerId": "27843909", "Title": "Calling base class constructor from derived class constructor", "CreationDate": "2015-01-08T15:15:26.650", "Id": "27843375", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-01-08T15:57:26.103", "Score": "3", "OwnerUserId": "455048", "Tags": "<c++><constructor><derived-class>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_27843375_27844266_1": {"length": 25, "quality": 0.625, "section_id": 3921}}, "n3337": {"so_27843375_27844266_1": {"length": 30, "quality": 0.75, "section_id": 3781}}, "n4659": {"so_27843375_27844266_1": {"length": 25, "quality": 0.625, "section_id": 4807}}}, "27843909": {"Id": "27843909", "PostTypeId": "2", "Body": "<p>There's an old rule, inherited from C, which does its best to drive programmers insane:</p>\n<blockquote>\n<p id=\"so_27843375_27843909_0\">if it can be a declaration, treat it as a declaration.</p>\n</blockquote>\n<p>Coupled with the fact that C++ lets you insert redundant parentheses in many places - <code>int (x);</code> is a valid variable declaration - this means that</p>\n<pre><code>baseClass(ID);\n</code></pre>\n<p>is treated as</p>\n<pre><code>baseClass ID;  \n</code></pre>\n<p>(There's no checking at this stage whether \"ID\" already means something, this is just grammar.)<br>\nIn a later stage, when the parameter \"ID\" is known, this becomes a redefinition.</br></p>\n<p>On the other hand,</p>\n<pre><code>baseClass 10; \n</code></pre>\n<p>can't possibly be a declaration, so it's taken to mean</p>\n<pre><code> baseClass(10);\n</code></pre>\n<p>which constructs an unnamed <code>baseClass</code> instance and immediately throws it away. </p>\n", "LastActivityDate": "2015-01-08T15:39:34.200", "Score": "1", "CreationDate": "2015-01-08T15:39:34.200", "ParentId": "27843375", "CommentCount": "0", "OwnerUserId": "404970"}, "27843576": {"Id": "27843576", "PostTypeId": "2", "Body": "<p>Line 1 is working because <code>baseClass</code> has a default constructor <code>baseClass()</code>, which is automagically called when your creating an instance of <code>derivedClass</code>. Your call to <code>baseClass(10)</code> in line 1 creates a <em>temporary object</em> of type <code>baseClass</code>, which is never used. This call is chosen because <code>10</code> is not a valid variable name, so it's interpreted as an argument to the function.</p>\n", "LastActivityDate": "2015-01-08T15:24:08.330", "Score": "1", "CreationDate": "2015-01-08T15:24:08.330", "ParentId": "27843375", "CommentCount": "0", "OwnerUserId": "776142"}, "27844266": {"Id": "27844266", "PostTypeId": "2", "Body": "<p>The interpretation of the line</p>\n<pre><code>baseClass(ID);\n</code></pre>\n<p>as a declaration can be traced to the standard. From the C++ Draft Standard N3337 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_27843375_27844266_0\"><strong>6.8 Ambiguity resolution</strong></p>\n<p id=\"so_27843375_27844266_1\">1 There is an ambiguity in the grammar involving <em>expression-statements</em> and declarations: An <em>expression-statement</em> with a function-style explicit type conversion (5.2.3) as its leftmost subexpression can be indistinguishable from a declaration where the first declarator starts with a (. <strong>In those cases the statement is a declaration.</strong> [ Note: To disambiguate, the whole statement might have to be examined to determine if it is an expression-statement or a declaration. This disambiguates many examples.</p>\n</blockquote>\n", "LastActivityDate": "2015-01-08T15:57:26.103", "Score": "1", "CreationDate": "2015-01-08T15:57:26.103", "ParentId": "27843375", "CommentCount": "0", "OwnerUserId": "434551"}, "27843428": {"Id": "27843428", "PostTypeId": "2", "Body": "<p>The compiler does not recognize you calling derivatives,\nhe's just trying to make parameters, and for ID he tries to make a variable called ID, while with 10 he just makes a nameless temporary object.</p>\n", "LastEditorUserId": "2017469", "LastActivityDate": "2015-01-08T15:26:25.987", "Score": "0", "CreationDate": "2015-01-08T15:17:40.647", "ParentId": "27843375", "CommentCount": "1", "LastEditDate": "2015-01-08T15:26:25.987", "OwnerUserId": "2017469"}});