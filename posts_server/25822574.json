post_cb({"25823711": {"Id": "25823711", "PostTypeId": "2", "Body": "<p>int i(10);:- this deceleration is a wrong way to declare a method. to declare the method we need to a return type for the method, method name, and the argument list that is used inside the method. int i(10) is a  wrong method deceleration. </p>\n<p>int i=10:- means that i is a int type variable that has 10 value. both are different in there meanings</p>\n<p>to initialize the variable from constructor we use like that</p>\n<pre><code>class I {\nint i;\ni(int i) {\nthis.i=i;\n}\npsvm(string []m){\nI i= new I(10);\n}\n }\n</code></pre>\n", "LastActivityDate": "2014-09-13T13:30:01.437", "CommentCount": "1", "CreationDate": "2014-09-13T13:30:01.437", "ParentId": "25822574", "Score": "-2", "OwnerUserId": "3781876"}, "25822628": {"Id": "25822628", "PostTypeId": "2", "Body": "<p>It is the same.</p>\n<pre><code>int i = 10 // initializes memory  and loads with value 10.\n\nint i(10) // does the same just writing style is different.It is like initializing a class of int.\n</code></pre>\n", "LastEditorUserId": "3042253", "LastActivityDate": "2014-09-13T11:36:13.267", "Score": "0", "CreationDate": "2014-09-13T11:12:53.053", "ParentId": "25822574", "CommentCount": "1", "OwnerUserId": "3042253", "LastEditDate": "2014-09-13T11:36:13.267"}, "25822612": {"Id": "25822612", "PostTypeId": "2", "Body": "<p>Quoting the standard (\u00a78.5/14):</p>\n<blockquote>\n<p id=\"so_25822574_25822612_0\">The form of initialization (using parentheses or =) is generally\n  insignificant, but does matter when the initializer or the entity\n  being initialized has a class type; see below.</p>\n</blockquote>\n<p>So in your case, there is no difference (the \"see below\" refers to the differentiation between copy-initialization and direct-initialization, but as we are talking about <code>int</code>, this is not of interest here).</p>\n", "LastEditorUserId": "3989746", "LastActivityDate": "2014-09-13T11:19:11.857", "Score": "2", "CreationDate": "2014-09-13T11:10:28.797", "ParentId": "25822574", "CommentCount": "0", "OwnerUserId": "3989746", "LastEditDate": "2014-09-13T11:19:11.857"}, "25822661": {"Id": "25822661", "PostTypeId": "2", "Body": "<p>One of the differences between those two:</p>\n<pre><code>/*1*/ int a(10);\n/*2*/ int a = 10;\n</code></pre>\n<p>is that the first one <strong>cannot</strong> be used as an in-class member initializer:</p>\n<pre><code>struct A\n{\n    int a(10); // compilation error\n};\n</code></pre>\n<p>whereas the second one <strong>can</strong> be:</p>\n<pre><code>struct A\n{\n    int a = 10;\n};\n</code></pre>\n<p>As well as in any other places, where <em>brace-or-equal-initializer</em> (defined below) in required.</p>\n<pre><code>brace-or-equal-initializer:\n    = initializer-clause\n    braced-init-list\n\nbraced-init-list:\n    { initializer-list ,opt }\n    { }\n</code></pre>\n<p><em>Reference:</em></p>\n<blockquote id=\"so_25822574_25822661_0\">\n<h3>\u00a7 9.2 Class members <code>[class.mem]</code></h3>\n<ol start=\"4\">\n<li>A <em>brace-or-equal-initializer</em> shall appear only in the declaration of a data member. (For static data members, see 9.4.2; for non-static data members, see 12.6.2).</li>\n</ol>\n</blockquote>\n<p>which means that alternatively the below can be used instead:</p>\n<pre><code>struct A\n{\n    int a{10};\n};\n</code></pre>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2014-09-13T12:59:02.313", "Score": "1", "CreationDate": "2014-09-13T11:17:36.567", "ParentId": "25822574", "CommentCount": "0", "OwnerUserId": "3953764", "LastEditDate": "2014-09-13T12:59:02.313"}, "25822574": {"ViewCount": "195", "Body": "<p>Is </p>\n<pre><code>int i(10);\n</code></pre>\n<p>the same as </p>\n<pre><code>int i = 10 ;\n</code></pre>\n<p>what are the differences in both the methods?</p>\n", "Title": "Constructors for Primitive data types", "CreationDate": "2014-09-13T11:05:12.180", "LastActivityDate": "2014-09-13T13:30:01.437", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "Id": "25822574", "Score": "3", "OwnerUserId": "3834059", "Tags": "<c++><constructor><initialization>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_25822574_25822661_0": {"length": 13, "quality": 0.6842105263157895, "section_id": 5864}, "so_25822574_25822612_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 3293}}, "n3337": {"so_25822574_25822612_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 3163}}, "n4659": {"so_25822574_25822661_0": {"length": 13, "quality": 0.6842105263157895, "section_id": 7347}}}});