post_cb({"7515123": {"CommentCount": "6", "CreationDate": "2011-09-22T13:00:04.093", "PostTypeId": "1", "AcceptedAnswerId": "7516359", "LastEditorUserId": "430766", "LastActivityDate": "2011-09-22T14:23:06.667", "LastEditDate": "2011-09-22T13:44:48.253", "ViewCount": "162", "FavoriteCount": "1", "Title": "Automatic destruction of static object", "Id": "7515123", "Score": "7", "Body": "<p>Why doesn't C++ create/destroy a static member of a template type.</p>\n<p>Observe the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Dump {\n  Dump() {\n    std::cout &lt;&lt; \"CTOR\" &lt;&lt; std::endl;\n  }\n  ~Dump() {\n    std::cout &lt;&lt; \"DTOR\" &lt;&lt; std::endl;\n  }\n};\n\ntemplate &lt;typename T&gt; struct X {\n  static Dump dump;\n};\n\ntemplate &lt;typename T&gt; Dump X&lt;T&gt;::dump;\n\nstruct A : X&lt;A&gt; {\n};\n\nint main() {\n  A a;\n  return 0;\n}\n</code></pre>\n<p>I would have expected that on execution I see the string <code>CTOR</code> followed by <code>DTOR</code>. While I don't. What am I missing here?</p>\n<p>It has something to do with <code>dump</code> being the member of a template type, but that's as far as I get.</p>\n", "Tags": "<c++><templates><static-members>", "OwnerUserId": "430766", "AnswerCount": "3"}, "7515265": {"ParentId": "7515123", "CommentCount": "0", "Body": "<p>Members of class templates are only instantiated if they are needed; in this case, nothing refers to the static member, so it is not instantiated, even if the class template itself is.</p>\n<p>You'll find that putting the statement <code>X&lt;A&gt;::dump;</code> somewhere will cause the member to be instantiated and an object created and destroyed.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "7515265", "Score": "4", "CreationDate": "2011-09-22T13:10:57.440", "LastActivityDate": "2011-09-22T13:10:57.440"}, "7515240": {"ParentId": "7515123", "CommentCount": "6", "Body": "<p>It is not instantiated, unless used. This works :  </p>\n<pre><code>int main()\n{\n    A a;\n    (void) a.dump;\n}\n</code></pre>\n<p>Also, fix the compilation error :  </p>\n<pre><code>template &lt;typename T&gt; Dump X&lt;T&gt;::dump;\n</code></pre>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "7515240", "Score": "4", "CreationDate": "2011-09-22T13:08:53.447", "LastActivityDate": "2011-09-22T13:08:53.447"}, "7516359": {"ParentId": "7515123", "CommentCount": "1", "Body": "<p>I found something in <strong>\u00a7 14.7.1 Implicit instantiation</strong>.</p>\n<blockquote>\n<p id=\"so_7515123_7516359_0\"><strong>1/</strong> [...] The implicit instantiation of a class template specialization <strong>causes</strong> the implicit instantiation of the declarations, but <strong>not of</strong> the definitions or default arguments, of the class member functions, member classes, scoped member enumerations, <strong>static data members</strong> and member templates. [...]</p>\n</blockquote>\n<p>It goes on in the second note:</p>\n<blockquote>\n<p id=\"so_7515123_7516359_1\"><strong>2/</strong> Unless a member of a class template or a member template has been explicitly instantiated or explicitly specialized, the specialization of the member is implicitly instantiated when the specialization is referenced in a context that requires the member definition to exist; in particular, <strong>the initialization</strong> (and any associated side-effects) <strong>of a static data member does not occur unless the static data member is itself used</strong> in a way that requires the definition of the static data member to exist.</p>\n</blockquote>\n<p>Therefore, unless you use it, <em>it should not be instantiated</em>. This is not an optimization, just Standard [n3092] conformance.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "7516359", "Score": "5", "CreationDate": "2011-09-22T14:23:06.667", "LastActivityDate": "2011-09-22T14:23:06.667"}, "bq_ids": {"n4140": {"so_7515123_7516359_0": {"section_id": 233, "quality": 0.9629629629629629, "length": 26}, "so_7515123_7516359_1": {"section_id": 234, "quality": 0.9767441860465116, "length": 42}}, "n3337": {"so_7515123_7516359_0": {"section_id": 226, "quality": 0.9629629629629629, "length": 26}, "so_7515123_7516359_1": {"section_id": 227, "quality": 0.9767441860465116, "length": 42}}, "n4659": {"so_7515123_7516359_0": {"section_id": 243, "quality": 0.9629629629629629, "length": 26}, "so_7515123_7516359_1": {"section_id": 244, "quality": 0.9534883720930233, "length": 41}}}});