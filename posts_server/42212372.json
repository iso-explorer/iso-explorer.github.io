post_cb({"42212372": {"CommentCount": "0", "ViewCount": "45", "PostTypeId": "1", "LastEditorUserId": "4625005", "CreationDate": "2017-02-13T19:50:36.040", "LastActivityDate": "2017-02-13T21:02:02.373", "Title": "converting to function pointer from pointer to function with same signature, except additional qualification of parameter", "AcceptedAnswerId": "42213393", "LastEditDate": "2017-02-13T20:03:38.497", "Id": "42212372", "Score": "3", "Body": "<pre><code>void ( * pFunc_pcInt ) ( int const * ) = nullptr ; \nvoid ( * pFunc_pInt ) ( int * ) = reinterpret_cast&lt; void ( * ) ( int * ) &gt;( pFunc_pcInt ) ;\n</code></pre>\n<p>Does such conversion lead to undefined behavior.?</p>\n", "Tags": "<c++><function-pointers><undefined-behavior><reinterpret-cast>", "OwnerUserId": "4625005", "AnswerCount": "1"}, "42213393": {"ParentId": "42212372", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>As from the <a href=\"http://eel.is/c++draft/expr.reinterpret.cast#6\" rel=\"nofollow noreferrer\">standard</a>\n (working draft, emphasis mine):</p>\n<blockquote>\n<p id=\"so_42212372_42213393_0\">A function pointer can be explicitly converted to a function pointer of a different type.\u00a0[\u2009Note:\u00a0<strong>The effect of calling a function through a pointer to a function type ([dcl.fct]) that is not the same as the type used in the definition of the function is undefined</strong>.\u00a0\u2009\u2014\u2009end note\u2009] [...]</p>\n</blockquote>\n<p>And, of course, <code>void(int const *)</code> and <code>void(int *)</code> are different types.</p>\n<p>Something similar comes from one of the most known <a href=\"http://en.cppreference.com/w/cpp/language/reinterpret_cast\" rel=\"nofollow noreferrer\">online reference</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_42212372_42213393_1\">Any pointer to function can be converted to a pointer to a different function type. <strong>Calling the function through a pointer to a different function type is undefined</strong>, but converting such pointer back to pointer to the original function type yields the pointer to the original function.</p>\n</blockquote>\n<p>In your specific case it doesn't matter that much, for you are assigning <code>nullptr</code> to the function pointer. Invoking it would lead to an error in any case.<br>\nThat being said, if you had assigned a valid function pointer to <code>pFunc_pcInt</code>, invoking it through the converted pointer <code>pFunc_pInt</code> would have been an UB.</br></p>\n", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2017-02-13T21:02:02.373", "Id": "42213393", "Score": "3", "CreationDate": "2017-02-13T20:56:28.440", "LastActivityDate": "2017-02-13T21:02:02.373"}, "bq_ids": {"n4140": {"so_42212372_42213393_1": {"section_id": 6045, "quality": 0.6, "length": 18}, "so_42212372_42213393_0": {"section_id": 6045, "quality": 0.8076923076923077, "length": 21}}, "n3337": {"so_42212372_42213393_1": {"section_id": 5813, "quality": 0.6, "length": 18}, "so_42212372_42213393_0": {"section_id": 5813, "quality": 0.8076923076923077, "length": 21}}, "n4659": {"so_42212372_42213393_1": {"section_id": 7544, "quality": 0.6, "length": 18}, "so_42212372_42213393_0": {"section_id": 7544, "quality": 0.8076923076923077, "length": 21}}}});