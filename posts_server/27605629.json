post_cb({"27605629": {"CommentCount": "2", "ViewCount": "756", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-12-22T15:30:25.533", "LastActivityDate": "2014-12-22T15:48:53.297", "Title": "C++ call inline function from another cpp file", "AcceptedAnswerId": "27605757", "LastEditDate": "2017-05-23T12:25:52.237", "Id": "27605629", "Score": "2", "Body": "<p>I'm trying to understand a few basics about extern, static, etc. and tried the following example, but I don't get why I can't call the function \"just\" because it's (possibly) inlined.</p>\n<p>My first file : F1.cpp</p>\n<pre><code> #include &lt;iostream&gt;\n\n void Modify();\n int i;\n\n int main() {\n      i = 1;\n\n      std::cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; std::endl;\n      Modify();\n      std::cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; std::endl;\n\n      return 0;\n }\n</code></pre>\n<p>The second file : F2.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n\nextern int i;\n\ninline void Modify() {\n    i = 99;\n\n    std::cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; std::endl;\n\n}\n</code></pre>\n<p>If I leave the inline keyword, I get : undefined reference to Modify() in my F1.cpp file, using mingw.\nBut if I take it off, it all works alright..\nI assume that the inline keyword in C++ has some sort of behaviour like the static keyword ? </p>\n<p>I had a look at this topic aswell, but apart from the fact that the documentation says that an inline function should always be in the header file, I don't get it : <a href=\"https://stackoverflow.com/questions/3992980/c-inline-member-function-in-cpp-file\">C++ inline member function in .cpp file</a></p>\n<p>Thanks for your help ! </p>\n", "Tags": "<c++><inline><extern>", "OwnerUserId": "3424322", "AnswerCount": "4"}, "27605765": {"ParentId": "27605629", "CommentCount": "0", "Body": "<p>When you declare a function <code>inline</code>, only the translation unit that it is defined in (in this case, F2.cpp) has access to this function. If you instead put it in a header file (say F.h), and <code>#include \"F.h\"</code> in both F1.cpp and F2.cpp, then the <code>inline</code> function is defined twice, once in each translation unit. Normally, this would cause a linker error, but since you declared the function <code>inline</code>, the linker doesn't know about your <code>Modify()</code> function.</p>\n", "OwnerUserId": "125405", "PostTypeId": "2", "Id": "27605765", "Score": "1", "CreationDate": "2014-12-22T15:38:02.643", "LastActivityDate": "2014-12-22T15:38:02.643"}, "27605757": {"ParentId": "27605629", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>According to the C++ Standard (7.1.2 Function specifiers)</p>\n<blockquote>\n<p id=\"so_27605629_27605757_0\">4....If a function with external linkage is declared inline in one\n  translation unit, it shall be declared inline in all translation units\n  in which it appears; no diagnostic is required.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_27605629_27605757_1\">4 An inline function shall be defined in every translation unit in\n  which it is odr-used and shall have exactly the same definition in\n  every case</p>\n</blockquote>\n<p>In C ( section 6.7.4 Function specifiers of the C Standard ) function specifier <code>inline</code> for external functions has different semantic</p>\n<blockquote>\n<p id=\"so_27605629_27605757_2\">7....An inline definition does not provide an external definition for the function, and does not forbid an external definition in another\n  translation unit. An inline definition provides an alternative to an\n  external definition, which a translator may use to implement any call\n  to the function in the same translation unit. It is unspecified\n  whether a call to the function uses the inline definition or the\n  external definition</p>\n</blockquote>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-12-22T15:44:10.577", "Id": "27605757", "Score": "5", "CreationDate": "2014-12-22T15:37:37.020", "LastActivityDate": "2014-12-22T15:44:10.577"}, "27605763": {"ParentId": "27605629", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Yes, <code>inline</code> has a meaning that's fairly similar to <code>static</code>. The specific requirement from the standard (\u00a7[basic.def.odr]/3) is:</p>\n<blockquote>\n<p id=\"so_27605629_27605763_0\">An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<p>In this case, you've <em>defined</em> the <code>inline</code> function in one translation unit, but only <em>declared</em> it in the other, so you're not meeting the requirement above that it be <em>defined</em> in the TU where it's used.</p>\n<p>An inline function can still have external linkage. When you do this, the standard guarantees that it results in a single function that will have the same address throughout the program.</p>\n<p>Just in case it wasn't clear: a translation unit is basically a source file, after preprocessing, so it includes everything directly in that source file plus everything in the headers it includes, minus anything skipped over due to things like <code>#ifdef</code>, <code>#if</code>, etc.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2014-12-22T15:48:53.297", "Id": "27605763", "Score": "2", "CreationDate": "2014-12-22T15:37:53.760", "LastActivityDate": "2014-12-22T15:48:53.297"}, "27605857": {"ParentId": "27605629", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_27605629_27605857_0\">I assume that the <code>inline</code> keyword in C++ has some sort of behaviour like the <code>static</code> keyword ?</p>\n</blockquote>\n<p>Similar, but different. The name still has external linkage, and the program behaves as if there's only one definition (for example, the function has the same address everywhere, and only one instance of any static variables). The effects of <code>inline</code> are:</p>\n<ul>\n<li>The function can be defined in more than one translation unit, as long as all the definitions are identical. Regular functions can only be defined once.</li>\n<li>The function <em>must</em> be defined in any translation unit that uses it. This allows the compiler to omit a non-inline definition if it doesn't need one.</li>\n</ul>\n<p>Your code breaks the second rule, which might or might not lead to a link error. This is why inline functions usually need to be in headers, if you need to use them in more than one unit.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27605857", "Score": "4", "CreationDate": "2014-12-22T15:44:03.897", "LastActivityDate": "2014-12-22T15:44:03.897"}, "bq_ids": {"n4140": {"so_27605629_27605757_0": {"section_id": 5404, "quality": 0.9411764705882353, "length": 16}, "so_27605629_27605763_0": {"section_id": 5404, "quality": 1.0, "length": 7}, "so_27605629_27605757_1": {"section_id": 5404, "quality": 1.0, "length": 13}}, "n3337": {"so_27605629_27605757_0": {"section_id": 5199, "quality": 0.9411764705882353, "length": 16}, "so_27605629_27605763_0": {"section_id": 5199, "quality": 1.0, "length": 7}, "so_27605629_27605757_1": {"section_id": 5199, "quality": 1.0, "length": 13}}, "n4659": {"so_27605629_27605757_0": {"section_id": 6853, "quality": 0.9411764705882353, "length": 16}, "so_27605629_27605763_0": {"section_id": 6853, "quality": 1.0, "length": 7}, "so_27605629_27605757_1": {"section_id": 6853, "quality": 1.0, "length": 13}}}});