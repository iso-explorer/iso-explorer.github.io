post_cb({"46015090": {"CommentCount": "3", "ViewCount": "56", "CreationDate": "2017-09-02T15:00:53.577", "LastActivityDate": "2017-09-02T17:25:32.153", "Title": "const/non-const rvalue reference in overload resolution", "AcceptedAnswerId": "46016362", "PostTypeId": "1", "Id": "46015090", "Score": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nvoid func(string &amp;&amp;a) { cout &lt;&lt; \"#1\" &lt;&lt; endl; }\nvoid func(const string &amp;&amp;a) { cout &lt;&lt; \"#2\" &lt;&lt; endl; }\nvoid func(int &amp;&amp;a) { cout &lt;&lt; \"#3\" &lt;&lt; endl; }\nvoid func(const int &amp;&amp;a) { cout &lt;&lt; \"#4\" &lt;&lt; endl; }\n\nint main()\n{\n  func(string(\"1\"));                // call func(string &amp;&amp;) \n  func((const string)string(\"1\"));  // call func(const string &amp;&amp;)\n  func(1);                          // call func(int &amp;&amp;)\n  func((const int)1);               // call func(int &amp;&amp;) not func(const int &amp;&amp;)\n\n  return 0;\n}\n</code></pre>\n<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_46015090_46015090_0\">Standard conversion sequence S1 is a better conversion sequence than\n  standard conversion sequence S2 if<br>\n  ...<br>\n  S1 and S2 are reference bindings (8.5.3), and the types to which the\n  references refer are the same type except for top-level cv-qualifiers,\n  and the type to which the reference initialized by S2 refers is more\n  cv-qualified than the type to which the reference initialized by S1\n  refers.</br></br></p>\n</blockquote>\n<p>It seems that the last call doesn't behave as expected. Who can explain it for me?</p>\n", "Tags": "<c++><overloading><rvalue-reference>", "OwnerUserId": "8314962", "AnswerCount": "1"}, "46016362": {"ParentId": "46015090", "CommentCount": "0", "Body": "<p>The type of <code>(const int)1</code> is adjusted to <code>int</code> before overload resolution.</p>\n<p><a href=\"http://eel.is/c++draft/expr#6\" rel=\"nofollow noreferrer\">[expr]/6</a>:</p>\n<blockquote>\n<p id=\"so_46015090_46016362_0\">If a prvalue initially has the type \u201c<em>cv</em> <code>T</code>\u201d, where <code>T</code> is a cv-unqualified non-class, non-array type, the type of the expression is adjusted to <code>T</code> prior to any further analysis.</p>\n</blockquote>\n", "OwnerUserId": "4672588", "PostTypeId": "2", "Id": "46016362", "Score": "1", "CreationDate": "2017-09-02T17:25:32.153", "LastActivityDate": "2017-09-02T17:25:32.153"}, "bq_ids": {"n4140": {"so_46015090_46016362_0": {"section_id": 5939, "quality": 1.0, "length": 14}, "so_46015090_46015090_0": {"section_id": 639, "quality": 0.9354838709677419, "length": 29}}, "n3337": {"so_46015090_46015090_0": {"section_id": 629, "quality": 0.9354838709677419, "length": 29}}, "n4659": {"so_46015090_46016362_0": {"section_id": 7423, "quality": 1.0, "length": 14}, "so_46015090_46015090_0": {"section_id": 667, "quality": 0.9354838709677419, "length": 29}}}});