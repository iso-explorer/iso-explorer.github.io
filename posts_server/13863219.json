post_cb({"13882851": {"ParentId": "13863219", "LastEditDate": "2012-12-14T17:03:32.253", "CommentCount": "2", "CreationDate": "2012-12-14T16:44:07.283", "OwnerUserId": "1147772", "LastEditorUserId": "1147772", "PostTypeId": "2", "Id": "13882851", "Score": "3", "Body": "<blockquote>\n<p id=\"so_13863219_13882851_0\"><strong>5.1p12</strong> An <em>id-expression</em> that denotes <strong>a non-static data member</strong> or non-static member function of a class can only\n  be used:</p>\n<ul>\n<li>as part of a class member access (5.2.5) in which the object expression refers to the member\u2019s class\n  or a class derived from that class, or</li>\n<li>to form a pointer to member (5.3.1), or</li>\n<li>in a <em>mem-initializer</em> for a constructor for that class or for a class derived from that class (12.6.2), or</li>\n<li><strong>in a <em>brace-or-equal-initializer</em> for a non-static data member of that class</strong> or of a class derived from that\n  class (12.6.2), or</li>\n<li>if that id-expression denotes a non-static data member and it appears in an unevaluated operand.</li>\n</ul>\n</blockquote>\n<p>So yes, this :</p>\n<pre><code>struct Foo {\n  int bar = 1;\n  int baz = bar;\n};\n</code></pre>\n<p>is valid C++11.</p>\n<p>But be carefull about order because :</p>\n<blockquote>\n<p id=\"so_13863219_13882851_1\"><strong>12.6.2p10</strong> In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in\n  the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes,\n  where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers).</li>\n<li>Then, <strong>non-static data members are initialized in the order they were declared in the class definition</strong>\n  (again regardless of the order of the mem-initializers).</li>\n<li>Finally, the compound-statement of the constructor body is executed</li>\n</ul>\n</blockquote>\n<p>So as specified in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2756.htm\" rel=\"nofollow\">Non-static data member initializers proposal</a> (Problem 3) :</p>\n<blockquote>\n<p id=\"so_13863219_13882851_2\">A third issue is that class-scope lookup could turn a compile-time error into a run-time error:</p>\n<pre><code>struct S {\n    int i = j; // ill-formed without forward lookup, undefined behavior with\n    int j = 3;\n};\n</code></pre>\n<p id=\"so_13863219_13882851_3\">(Unless caught by the compiler, i might be intialized with the undefined value of j.)</p>\n</blockquote>\n", "LastActivityDate": "2012-12-14T17:03:32.253"}, "13863219": {"CommentCount": "0", "ViewCount": "872", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-12-13T15:36:50.867", "LastActivityDate": "2012-12-14T17:03:32.253", "Title": "Non-static member initializer from another non-static", "AcceptedAnswerId": "13882851", "LastEditDate": "2012-12-13T19:25:48.683", "Id": "13863219", "Score": "6", "Body": "<p>Very simple question. Is this valid C++11?</p>\n<pre><code>struct Foo {\n    int bar = 1;\n    int baz = bar;\n};\n</code></pre>\n<p>GCC (4.7.2) and Clang (3.1) both accept it with the pedantic settings:</p>\n<pre>-std=c++11 -Wall -W -pedantic</pre>\n<p>Intel C++ (13.0.1.117) does not. It barks at <code>int baz = bar;</code> with:</p>\n<pre>error: a nonstatic member reference must be relative to a specific object</pre>\n<p>Who is right?</p>\n<p>In case you wonder, I use this for code like this, where it brings initialization code closer together, rather than moving the last line into the constructor:</p>\n<pre><code>uint8_t colorR = -1;\nuint8_t colorG = -1;\nuint8_t colorB = -1;\nuint8_t colorA = -1;\nGLubyte RGBAVec[4] = {colorR, colorG, colorB, colorA};\n</code></pre>\n", "Tags": "<c++><gcc><c++11><clang><icc>", "OwnerUserId": "856199", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13863219_13882851_1": {"section_id": 438, "quality": 0.8571428571428571, "length": 6}, "so_13863219_13882851_0": {"section_id": 5959, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_13863219_13882851_1": {"section_id": 429, "quality": 0.8571428571428571, "length": 6}, "so_13863219_13882851_0": {"section_id": 5728, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_13863219_13882851_1": {"section_id": 458, "quality": 0.8571428571428571, "length": 6}, "so_13863219_13882851_0": {"section_id": 7440, "quality": 0.9090909090909091, "length": 10}}}});