post_cb({"bq_ids": {"n4140": {"so_10917875_10917935_2": {"length": 8, "quality": 1.0, "section_id": 435}, "so_10917875_10917935_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 370}, "so_10917875_10917935_1": {"length": 17, "quality": 0.6538461538461539, "section_id": 435}}, "n3337": {"so_10917875_10917935_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 427}, "so_10917875_10917935_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 360}, "so_10917875_10917935_2": {"length": 8, "quality": 1.0, "section_id": 427}}, "n4659": {"so_10917875_10917935_1": {"length": 17, "quality": 0.6538461538461539, "section_id": 454}, "so_10917875_10917935_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 384}, "so_10917875_10917935_2": {"length": 7, "quality": 0.875, "section_id": 454}}}, "10918618": {"Id": "10918618", "PostTypeId": "2", "Body": "<p>You're getting a <strong>warning</strong> not an error, but you are presumably using <code>-Werror</code> to turn that into an error.  You should learn to tell the difference, so you can disable the error if the warning is not useful. Warnings show the relevant warning option at the end of the line e.g. <code>[-Wuninitialized]</code> in this case, and <code>-Werror</code> causes the compiler to print:</p>\n<pre><code>cc1plus: all warnings being treated as errors\n</code></pre>\n<p>Or for <code>-Werror=uninitialized</code> </p>\n<pre><code>cc1plus: some warnings being treated as errors\n</code></pre>\n<p>The warning is incorrect, so I've reported it as a bug: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53594\" rel=\"nofollow\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53594</a></p>\n", "LastActivityDate": "2012-06-06T16:53:13.640", "CommentCount": "1", "CreationDate": "2012-06-06T16:53:13.640", "ParentId": "10917875", "Score": "2", "OwnerUserId": "981959"}, "10917935": {"Id": "10917935", "PostTypeId": "2", "Body": "<p>Yes. The implicit constructor includes those initializers, so the error doesn't occur. \u00a712.1/6:</p>\n<blockquote>\n<p id=\"so_10917875_10917935_0\">The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no ctor-initializer (12.6.2) and an empty compound-statement. If that user-written default constructor would be ill-formed, the program is ill-formed.</p>\n</blockquote>\n<p>and 12.6.2/8:</p>\n<blockquote>\n<p id=\"so_10917875_10917935_1\">In a non-delegating constructor, if a given non-static data member or base class is not designated by a mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no ctor-initializer) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<p id=\"so_10917875_10917935_2\">\u2014 if the entity is a non-static data member that has a brace-or-equal-initializer, the entity is initialized as specified in 8.5;</p>\n</blockquote>\n", "LastEditorUserId": "153285", "LastActivityDate": "2012-06-06T16:12:22.863", "Score": "2", "CreationDate": "2012-06-06T16:06:04.843", "ParentId": "10917875", "CommentCount": "4", "OwnerUserId": "153285", "LastEditDate": "2012-06-06T16:12:22.863"}, "10917875": {"ViewCount": "266", "Body": "<p>in this code snippet:  </p>\n<pre><code>template&lt;class T, int Min, int Max&gt;\nclass Range\n{\n    const T min_ = Min; // works without const\n\n    T max_ = Max;\n\n};\n</code></pre>\n<p>I'm getting the error</p>\n<blockquote>\n<p id=\"so_10917875_10917875_0\">non static const member in class without ctor</p>\n</blockquote>\n<p>but this is irrelevant if I'm initializing it in a class. Should that be logged as a bug?</p>\n", "AcceptedAnswerId": "10917935", "Title": "Bug in gcc 4.7? or not, I'm not sure so I ask here", "CreationDate": "2012-06-06T16:02:25.337", "Id": "10917875", "CommentCount": "5", "LastEditDate": "2012-06-07T23:33:02.720", "PostTypeId": "1", "LastEditorUserId": "84745", "LastActivityDate": "2012-06-07T23:33:02.720", "Score": "1", "OwnerUserId": "333390", "Tags": "<c++><gcc><c++11>", "AnswerCount": "2"}});