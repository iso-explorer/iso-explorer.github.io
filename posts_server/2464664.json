post_cb({"2464726": {"ParentId": "2464664", "CommentCount": "2", "CreationDate": "2010-03-17T18:12:39.570", "OwnerUserId": "135178", "PostTypeId": "2", "Id": "2464726", "Score": "2", "Body": "<p>Maybe this?</p>\n<pre><code>60 + !!(s &gt; 73)\n</code></pre>\n<p>The double-bang maps non-zero values to 1 and zero to zero.</p>\n", "LastActivityDate": "2010-03-17T18:12:39.570"}, "2464896": {"ParentId": "2464664", "CommentCount": "3", "CreationDate": "2010-03-17T18:34:50.173", "OwnerUserId": "102", "PostTypeId": "2", "Id": "2464896", "Score": "8", "Body": "<p>How to reduce this expression: <code>s-=s&gt;73?61:60;</code></p>\n<p>How about:</p>\n<pre><code>typedef int Price;\nPrice getPriceAfterRebate(const Price priceBeforeRebate)\n{\n  const Price normalRebate = 60;\n  const Price superRebate = 61;\n\n  const Price superRebateThreshold = 73;\n\n  Price returnValue = priceBeforeRebate;\n  if (priceBeforeRebate &gt; superRebateThreshold)\n  {\n    returnValue -= superRebate;\n  }\n  else\n  {\n    returnValue -= normalRebate;\n  }\n  return returnValue;\n}\n</code></pre>\n<p>Tada!  An ugly piece of unmaintainable code is reduced to a readable and maintainable block of code.</p>\n", "LastActivityDate": "2010-03-17T18:34:50.173"}, "2464705": {"ParentId": "2464664", "CommentCount": "0", "CreationDate": "2010-03-17T18:09:55.957", "OwnerUserId": "280577", "PostTypeId": "2", "Id": "2464705", "Score": "0", "Body": "<p>What is the value of <code>(s&gt;5)</code>?  Could you do some arithmetic with that?</p>\n<p>Without the hint, I would say this was a bad \"gotcha\" interview question that requires a particular a-ha insight that's not correlated with ability.  With the hint, it's... <em>nice, but dim</em>.</p>\n", "LastActivityDate": "2010-03-17T18:09:55.957"}, "2464693": {"ParentId": "2464664", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2010-03-17T18:07:13.160", "Score": "4", "LastEditorUserId": "280222", "LastEditDate": "2010-03-17T18:14:48.670", "Id": "2464693", "OwnerUserId": "280222", "Body": "<p>This is such an ugly piece of code that I can't beleive I wrote it, but I think it fulfills the requirement:</p>\n<p>My answer to the original question which was <code>s&gt;5?6:9</code>:</p>\n<p><code>9 - (((int)(s &gt; 5)) * 3)</code></p>\n<p>Rewritten for the updated question:</p>\n<p><code>61 - (int)(s &gt; 73)</code></p>\n", "LastActivityDate": "2010-03-17T18:14:48.670"}, "12523978": {"ParentId": "2464664", "CommentCount": "0", "CreationDate": "2012-09-21T03:46:57.647", "OwnerUserId": "692846", "PostTypeId": "2", "Id": "12523978", "Score": "0", "Body": "<p>It can be thought of as s -= (s &gt; 73) + 60 as &gt; is a relational operator and it will return 1 or 0 depending on result of expression s &gt; 73 ,As the return value is int so it will work fine</p>\n", "LastActivityDate": "2012-09-21T03:46:57.647"}, "2464738": {"ParentId": "2464664", "CommentCount": "0", "CreationDate": "2010-03-17T18:14:15.417", "OwnerUserId": "181235", "PostTypeId": "2", "Id": "2464738", "Score": "0", "Body": "<p>If we assume that <code>True = 1</code> and <code>False = 0</code>, then doesn't this work:</p>\n<pre><code>s-= (60 + (s &gt; 73))\n</code></pre>\n", "LastActivityDate": "2010-03-17T18:14:15.417"}, "2464713": {"ParentId": "2464664", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2010-03-17T18:11:02.100", "Score": "15", "LastEditorUserId": "116908", "LastEditDate": "2010-03-17T18:16:47.673", "Id": "2464713", "OwnerUserId": "116908", "Body": "<p>Just like the other answers:</p>\n<pre><code>s -= (s &gt; 73) + 60;\n</code></pre>\n<p>This expression works because the spec defines the results of the relational operators. Section 6.5.8 paragraph 6:</p>\n<blockquote>\n<p id=\"so_2464664_2464713_0\">Each of the operators <strong><code>&lt;</code></strong> (less than), <strong><code>&gt;</code></strong> (greater than), <strong><code>&lt;=</code></strong> (less than or equal to), and <strong><code>&gt;=</code></strong> (greater than or equal to) shall yield <strong><code>1</code></strong> if the specified relation is true and <strong><code>0</code></strong> if it is false. The result has type <strong><code>int</code></strong>.</p>\n</blockquote>\n", "LastActivityDate": "2010-03-17T18:16:47.673"}, "2464664": {"CommentCount": "12", "AcceptedAnswerId": "2464713", "PostTypeId": "1", "LastEditorUserId": "96780", "CreationDate": "2010-03-17T18:03:56.940", "LastActivityDate": "2013-06-27T13:26:26.553", "LastEditDate": "2013-06-27T13:26:26.553", "ViewCount": "972", "FavoriteCount": "1", "Title": "An interview question on conditional operator", "Id": "2464664", "Score": "2", "Body": "<p>I recently encountered with this question: How to reduce this expression: <strong>s&gt;73?61:60;</strong>.</p>\n<p>The hint given was that <strong>Instead of using conditional operator we could use a simple comparison which will work fine</strong>.</p>\n<p>I am not sure but I think  it is possible with some GCC extension,although I am unable to figure it out myself.</p>\n<p>EDIT:The whole expression is this : <code>s-=s&gt;73?61:60</code></p>\n", "Tags": "<c++><c><conditional-operator>", "OwnerUserId": "211631", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_2464664_2464713_0": {"section_id": 6149, "quality": 0.6666666666666666, "length": 14}}, "n3337": {"so_2464664_2464713_0": {"section_id": 5912, "quality": 0.6666666666666666, "length": 14}}, "n4659": {"so_2464664_2464713_0": {"section_id": 7646, "quality": 0.6190476190476191, "length": 13}}}});