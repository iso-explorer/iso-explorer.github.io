post_cb({"7788551": {"ParentId": "7788508", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The sizeof() operator is calculated at compile time. The expressions are <strong>NOT</strong> evaluated. It is the <strong>type</strong> of the expression that is calculated (at compile time) and then used by sizeof().</p>\n<p>So in your first one:</p>\n<pre><code>sizeof( x += 1);\n</code></pre>\n<p>The type of x is int. The result of the += operator is still int. So the sizeof() is still the size of int.</p>\n<p>In this:</p>\n<pre><code>sizeof(arr+0);\n</code></pre>\n<p>Here arr is an array and would have returned the size of the array (if used by itself). But the operator + causes the array to decay into a pointer. The result of the + operator on an array and an integer is a pointer. So here the sizeof() operator will return the sizeof a pointer.</p>\n<blockquote>\n<p id=\"so_7788508_7788551_0\">(\u00a7 5.3.3/4) The lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) standard conversions are not applied to the operand of sizeof.</p>\n</blockquote>\n<p>This means that:</p>\n<pre><code>std::cout &lt;&lt; sizeof(arr);\n       // would print sizeof(int)* 5 (because there is no conversion)\n       // if sizeof() had behaved like a normal function there\n       // would have been a conversion but as you pointed out that\n       // does not apply.\n</code></pre>\n<p>But here:</p>\n<pre><code>std::cout &lt;&lt; sizeof(arr + 5);\n       // prints the sizeof(int*) because the result of the expression\n       // is a pointer type (int*)\n</code></pre>\n<h3>As a side note:</h3>\n<p>This is why</p>\n<pre><code>int x[0];\nint const xSize = sizeof(x)/sizeof(x[0]);\n\n// This works correctly even though x[0] is technically\n// not valid if used in a real expression (but is valid here).\n</code></pre>\n", "OwnerUserId": "14065", "LastEditorUserId": "14065", "LastEditDate": "2011-10-17T01:31:31.807", "Id": "7788551", "Score": "16", "CreationDate": "2011-10-17T01:16:50.583", "LastActivityDate": "2011-10-17T01:31:31.807"}, "7788526": {"ParentId": "7788508", "CommentCount": "0", "Body": "<p>It isn\u2019t. In an arithmetic expression, array names decay into pointers. That says nothing about performing the calculation itself. The type of <code>+</code> is deducible from the types of its operands, in this case pointer and integer, yielding the same result as <code>sizeof(int*)</code>.</p>\n", "OwnerUserId": "246886", "PostTypeId": "2", "Id": "7788526", "Score": "6", "CreationDate": "2011-10-17T01:11:17.570", "LastActivityDate": "2011-10-17T01:11:17.570"}, "7788524": {"ParentId": "7788508", "CommentCount": "2", "Body": "<p>I don't know much about this, but if as you say, sizeof doesn't evaluate its operand then it must just rely on the <em>type</em> of the expression it's used on. So I would guess that <code>arr</code> on its own has a different type to <code>arr+0</code>, and that's why it was used.</p>\n", "OwnerUserId": "450128", "PostTypeId": "2", "Id": "7788524", "Score": "4", "CreationDate": "2011-10-17T01:09:44.377", "LastActivityDate": "2011-10-17T01:09:44.377"}, "7788508": {"CommentCount": "2", "AcceptedAnswerId": "7788551", "PostTypeId": "1", "LastEditorUserId": "974191", "CreationDate": "2011-10-17T01:06:58.540", "LastActivityDate": "2011-10-17T01:31:31.807", "LastEditDate": "2011-10-17T01:14:41.667", "ViewCount": "509", "FavoriteCount": "1", "Title": "sizeof operands get evaluated?", "Id": "7788508", "Score": "10", "Body": "<p>AFAIK sizeof doesn't evaluate its operands it C++.</p>\n<p>E.g.</p>\n<pre><code>int x = 0;\nsizeof(x += 1); // value of x is not changed\n</code></pre>\n<p>But what does this mean?</p>\n<pre><code>int arr[5];\nsizeof(arr+0); // here array is converted to pointer\n</code></pre>\n<p>Why does the arithmetic on array is applied here?</p>\n<blockquote>\n<p id=\"so_7788508_7788508_0\">(\u00a7 5.3.3/4) The lvalue-to-rvalue (4.1), array-to-pointer (4.2), and\n  function-to-pointer (4.3) standard conversions are not applied to the\n  operand of sizeof.</p>\n</blockquote>\n", "Tags": "<c++>", "OwnerUserId": "974191", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7788508_7788508_0": {"section_id": 6079, "quality": 0.7777777777777778, "length": 7}, "so_7788508_7788551_0": {"section_id": 6079, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_7788508_7788508_0": {"section_id": 5847, "quality": 0.7777777777777778, "length": 7}, "so_7788508_7788551_0": {"section_id": 5847, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_7788508_7788508_0": {"section_id": 7575, "quality": 0.7777777777777778, "length": 7}, "so_7788508_7788551_0": {"section_id": 7575, "quality": 0.7777777777777778, "length": 7}}}});