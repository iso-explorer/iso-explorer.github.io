post_cb({"37622767": {"CommentCount": "8", "AcceptedAnswerId": "37623408", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-06-03T20:22:41.863", "LastActivityDate": "2016-06-03T21:06:30.870", "LastEditDate": "2017-05-23T12:00:32.450", "ViewCount": "237", "FavoriteCount": "1", "Title": "Is there a way to pull in a text resource into a raw string literal using the pre-processor?", "Id": "37622767", "Score": "5", "Body": "<p>I've just noticed that an answer I have given for <a href=\"https://stackoverflow.com/questions/37487971/turn-a-text-file-into-a-string-at-compile-time\">this question</a> actually doesn't work:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_37622767_37622767_1\">Regardless of using CMake or not, the following should work with the current standard:</p>\n<pre><code>std::string resource = R\"(\n#include \"text.txt\"\n)\";\n</code></pre>\n</blockquote>\n</blockquote>\n<p>I thought that the pre-processor would recognize the <code>#include \"text.txt\"</code> statement in first place and expand the text.</p>\n<p>But that's obviously not the case, the result for </p>\n<pre><code>std::cout &lt;&lt; resource &lt;&lt; std::endl;\n</code></pre>\n<p>is </p>\n<blockquote id=\"so_37622767_37622767_2\">\n<pre><code>#include \"text.txt\"\n</code></pre>\n</blockquote>\n<p>I tried to use some macro to let the <code>#include</code> statement be expanded within, but it doesn't work either:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\n#define RESOURCE_DEFINIION(resource_var,resource_name) \\\n    const std::string resource_var = R\"xxx( \\\n    #include resource_name \\\n    )xxx\";\n\nRESOURCE_DEFINIION(resource,\"text.txt\")\n\nint main()\n{\n   std::cout &lt;&lt; resource &lt;&lt; std::endl; \n\n   return 0;\n}\n</code></pre>\n<p>The output is </p>\n<blockquote id=\"so_37622767_37622767_3\">\n<pre><code>\\                                                                                                                                                                                          \n    #include resource_name \\                                                                                                                                                                \n</code></pre>\n</blockquote>\n<p><a href=\"http://www.tutorialspoint.com/compile_cpp_online.php?PID=0Bw_CjBb95KQMRktld3FXRnpSRzA\" rel=\"nofollow noreferrer\">Here's the demo to play with</a></p>\n<hr>\n<p>Is there any trickery available to pull in the <code>text.txt</code> resource into a c++-11 raw-string literal, using the pre-processor or any other regular c++ language feature?</p>\n<hr>\n<p><strong>Disclaimer:</strong> </p>\n<p>I well know what's wrong with the above samples and why these fail this way. It's a problem that the pre-processor ignores the stuff appearing within <code>\"</code> pairs.</p>\n<p>So is there a way to escape these to be seen by the pre-processor?</p>\n</hr></hr>", "Tags": "<c++><c++11><c-preprocessor><string-literals>", "OwnerUserId": "1413395", "AnswerCount": "2"}, "37623408": {"ParentId": "37622767", "CommentCount": "0", "Body": "<p>It seems like not possible in standard C++</p>\n<p><strong>Problem 0</strong>: Only standard way of textual inclusion is <code>#include</code> directive.</p>\n<p><strong>Problem 1</strong>: String literal is a preprocessing token, which are recognised in phase 3, so when preprocessing directives are executed in phase 4, it is already determined that <code>#include</code> is a part of string literal and not a preprocessing directive.</p>\n<blockquote>\n<p id=\"so_37622767_37623408_0\"><em>preprocessing-token:<br>\n  \u00a0\u00a0\u00a0\u00a0header-name<br>\n  \u00a0\u00a0\u00a0\u00a0identifier<br>\n  \u00a0\u00a0\u00a0\u00a0pp-number<br>\n  \u00a0\u00a0\u00a0\u00a0character-literal<br>\n  \u00a0\u00a0\u00a0\u00a0user-defined-character-literal<br>\n  \u00a0\u00a0\u00a0\u00a0string-literal<br>\n  \u00a0\u00a0\u00a0\u00a0user-defined-string-literal<br>\n  \u00a0\u00a0\u00a0\u00a0preprocessing-op-or-punc<br>\n  \u00a0\u00a0\u00a0\u00a0each non-white-space character that cannot be one of the above</br></br></br></br></br></br></br></br></br></em></p>\n</blockquote>\n<p><strong>Problem 2</strong>: It is impossible to bring preprocessing directive in source and execute it by macro substitution:</p>\n<blockquote>\n<p id=\"so_37622767_37623408_1\"><strong>16.3.4/3</strong><br>\n  The resulting completely macro-replaced preprocessing token sequence is not processed as a preprocessing directive even if it resembles one</br></p>\n</blockquote>\n<p>So you cannot have working <code>#include</code> inside macro.</p>\n<p><strong>Problem 3</strong>: macro replacement list should be a valid preprocessing token:</p>\n<blockquote>\n<p id=\"so_37622767_37623408_2\"><em>control-line:</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em># define identifier replacement-list new-line</em><br>\n<em>replacement-list:</em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>pp-tokens opt</em><br>\n<em>pp-tokens:</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>preprocessing-token</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>pp-tokens preprocessing-token</em></br></br></br></br></br></br></p>\n</blockquote>\n<p>And string literal  is a preprocessing token itself, you cannot build string literal from several macro. </p>\n", "OwnerUserId": "3410396", "PostTypeId": "2", "Id": "37623408", "Score": "4", "CreationDate": "2016-06-03T21:06:30.870", "LastActivityDate": "2016-06-03T21:06:30.870"}, "37623176": {"ParentId": "37622767", "CommentCount": "3", "Body": "<p>I think you just confused the syntax; the following correctly assigns a raw string literal into a std::string variable:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n\n    std::string raw = //\n        #include \"text.txt\"\n    std::cout &lt;&lt; raw &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>where text.txt is:</p>\n<pre><code>R\"(\nA B C\n)\";\n</code></pre>\n", "OwnerUserId": "2870029", "PostTypeId": "2", "Id": "37623176", "Score": "-4", "CreationDate": "2016-06-03T20:49:52.537", "LastActivityDate": "2016-06-03T20:49:52.537"}, "bq_ids": {"n4140": {"so_37622767_37623408_2": {"section_id": 491, "quality": 0.8333333333333334, "length": 10}, "so_37622767_37623408_1": {"section_id": 532, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_37622767_37623408_2": {"section_id": 482, "quality": 0.8333333333333334, "length": 10}, "so_37622767_37623408_1": {"section_id": 523, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_37622767_37623408_2": {"section_id": 506, "quality": 0.8333333333333334, "length": 10}, "so_37622767_37623408_1": {"section_id": 553, "quality": 0.8571428571428571, "length": 12}}}});