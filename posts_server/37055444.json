post_cb({"37055633": {"ParentId": "37055444", "CommentCount": "5", "Body": "<p><code>~</code> is an arithemtic operator (bitwise NOT), and <code>a</code> is being promoted from <code>signed char</code> to <code>int</code> (and in many implementations <code>sizeof(int) == 4</code>). See below for an explanation:</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion#integral_promotion\">http://en.cppreference.com/w/cpp/language/implicit_conversion#integral_promotion</a></p>\n<blockquote>\n<p id=\"so_37055444_37055633_0\">Prvalues of small integral types (such as char) may be converted to\n  prvalues of larger integral types (such as int). In particular,\n  arithmetic operators do not accept types smaller than int as\n  arguments, and integral promotions are automatically applied after\n  lvalue-to-rvalue conversion, if applicable. This conversion always\n  preserves the value.</p>\n</blockquote>\n", "OwnerUserId": "3493731", "PostTypeId": "2", "Id": "37055633", "Score": "5", "CreationDate": "2016-05-05T16:28:36.517", "LastActivityDate": "2016-05-05T16:28:36.517"}, "37055444": {"CommentCount": "4", "ViewCount": "72", "PostTypeId": "1", "ClosedDate": "2016-05-05T17:14:03.337", "LastEditorUserId": "5348749", "CreationDate": "2016-05-05T16:18:50.287", "LastActivityDate": "2016-05-05T17:04:44.490", "Title": "Why does applying bitwise NOT to a char yield an int?", "AcceptedAnswerId": "37055633", "LastEditDate": "2016-05-05T16:51:21.500", "Id": "37055444", "Score": "2", "Body": "<p>On my laptop, running the following code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    char a;\n    cout &lt;&lt; sizeof(~a) &lt;&lt; endl;\n}\n</code></pre>\n<p>prints <code>4</code>.</p>\n<p>I expected the result of <code>~a</code> to be a <code>char</code>, but apparently, it is an <code>int</code>.</p>\n<p>Why is that?</p>\n", "Tags": "<c++>", "OwnerUserId": "5348749", "AnswerCount": "2"}, "37056269": {"ParentId": "37055444", "CommentCount": "0", "Body": "<p>The standard says (\u00a7[expr.primary]/10):</p>\n<blockquote>\n<p id=\"so_37055444_37056269_0\">The operand of ~ shall have integral or unscoped enumeration type; the result is the one\u2019s complement of its operand. Integral promotions are performed. The type of the result is the type of the promoted operand.</p>\n</blockquote>\n<p>\"Integral promotions\" means (\u00a7[conv.prom]/1):</p>\n<blockquote>\n<p id=\"so_37055444_37056269_1\">A prvalue of an integer type other than <code>bool</code>, <code>char16_t</code>, <code>char32_t</code>, or <code>wchar_t</code> whose integer conversion rank (4.13) is less than the rank of <code>int</code> can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n<p>In your case, <code>a</code> has type <code>char</code>, which has a conversion rank less than the rank of <code>int</code><sup>1</sup>, so it's being promoted to either <code>int</code> or <code>unsigned int</code>, both of which have the same size (apparently <code>4</code> in your implementation).</p>\n<p>As to why things were done this way: I think a great deal is that it just simplifies both the language definition and the compiler quite a bit. Rather than having to generate code separately for nearly every type, it does its best to collapse everything down to a few types, and most code is generated only for those types. That's not so much the case any more (now that we have multiple types larger than <code>int</code>), but back when C was young, the integer types were: <code>char</code>, <code>short</code>, <code>int</code> (and unsigned versions of those), so all the other types were promoted to <code>int</code>, and all code to manipulate anything was done with <code>int</code>s.</p>\n<p>Note that this applied to function calls and such too: in early versions of C there were no function prototypes, so any parameter of type <code>char</code> or <code>short</code> was promoted to <code>int</code> before being passed to a function too.</p>\n<p>The same basic idea was followed with floating point types: under most circumstances (including passing them to functions) <code>float</code>s were promoted to <code>double</code>, and all the actual processing was done on <code>double</code>s (after which you could convert back to <code>float</code>, if necessary.</p>\n<hr>\n<ol>\n<li>In case you really want the quote for that too (\u00a7[conv.rank]:</li>\n</ol>\n<blockquote>\n<p id=\"so_37055444_37056269_2\">1.3 A prvalue of an integer type other than bool, char16_t, char32_t, or wchar_t whose integer conversion rank (4.13) is less than the rank of int can be converted to a prvalue of type int if int can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type unsigned int.<br>\n  [...]<br>\n  1.6 The rank of char shall equal the rank of signed char and unsigned char.</br></br></p>\n</blockquote>\n</hr>", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "37056269", "Score": "3", "CreationDate": "2016-05-05T17:04:44.490", "LastActivityDate": "2016-05-05T17:04:44.490"}, "bq_ids": {"n4140": {"so_37055444_37056269_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_37055444_37056269_2": {"section_id": 21, "quality": 0.7916666666666666, "length": 38}, "so_37055444_37056269_0": {"section_id": 6073, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_37055444_37056269_1": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_37055444_37056269_2": {"section_id": 18, "quality": 0.7916666666666666, "length": 38}, "so_37055444_37056269_0": {"section_id": 5841, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_37055444_37056269_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_37055444_37056269_2": {"section_id": 21, "quality": 0.7916666666666666, "length": 38}, "so_37055444_37056269_0": {"section_id": 7569, "quality": 0.9047619047619048, "length": 19}}}});