post_cb({"24079001": {"CommentCount": "2", "CreationDate": "2014-06-06T09:53:59.030", "PostTypeId": "1", "AcceptedAnswerId": "24079229", "LastEditorUserId": "1023911", "LastActivityDate": "2014-06-23T12:58:44.170", "LastEditDate": "2014-06-23T12:58:44.170", "ViewCount": "1035", "FavoriteCount": "1", "Title": "What promoted types are used for switch-case expression comparison?", "Id": "24079001", "Score": "4", "Body": "<p>The following program prints \"unknown\" when compiled with different compilers. Why is that so?</p>\n<pre><code>#include \"stdio.h\"\n\nconst char OPTION = (char)(unsigned char)253;\n\nint main(int argc, char* argv[])\n{\n    unsigned char c = 253;\n    switch (c)\n    {\n    case OPTION:\n        printf(\"option\\n\");\n        break;\n    default:\n        printf(\"unknown\\n\");\n        break;\n    }\n\n    return 0;\n}\n</code></pre>\n<p>When looking at the C++ standard (N3690 2013-05-05) I see a clause for switch:</p>\n<blockquote>\n<h2>6.4.2 The switch statement</h2>\n<p id=\"so_24079001_24079001_0\">2 The condition shall be of integral type, enumeration\n  type, or class type. If of class type, the condition is contextually\n  implicitly converted (Clause 4) to an integral or enumeration type.\n  Integral promotions are performed. Any statement within the switch\n  statement can be labeled with one or more case labels as follows:  </p>\n<pre><code>case constant-expression :  \n</code></pre>\n<p id=\"so_24079001_24079001_1\">where the constant-expression shall be a\n  converted constant expression (5.19) of the promoted type of the\n  switch condition. No two of the case constants in the same switch\n  shall have the same value after conversion to the promoted type of the\n  switch condition.</p>\n</blockquote>\n<p>The referenced conversion clause:</p>\n<blockquote>\n<h2>4 Standard conversions</h2>\n<p id=\"so_24079001_24079001_2\">2 [ Note: expressions with a given type will be implicitly converted to other types in several contexts:<br>\n  [...]<br>\n  \u2014 When used in the expression of a switch statement. The destination type is integral (6.4).<br>\n  [...]<br>\n  \u2014end note ]</br></br></br></br></p>\n</blockquote>\n<p>Variable c is of type unsigned char, which is an integral type. So no promotion should be necessary!?</p>\n<p>If the promoted type were <code>unsigned char</code> I would expect a comparison like <code>c == (unsigned char)OPTION</code> which would yield true. If the promoted type were <code>int</code> I would expect a comparison like <code>(int)c == (int)OPTION)</code> which clearly yields false.</p>\n<p>My questions are: What is the promoted type used in the above program? What are the relevant clauses in the C and C++ standards?</p>\n", "Tags": "<c++><c><language-lawyer>", "OwnerUserId": "1023911", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24079001_24079001_2": {"section_id": 1, "quality": 0.8095238095238095, "length": 17}, "so_24079001_24079229_6": {"section_id": 7210, "quality": 0.9375, "length": 15}, "so_24079001_24079229_2": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079229_7": {"section_id": 7210, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079001_1": {"section_id": 3890, "quality": 0.75, "length": 18}, "so_24079001_24079229_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079001_0": {"section_id": 3890, "quality": 0.8787878787878788, "length": 29}, "so_24079001_24079229_4": {"section_id": 7210, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079229_9": {"section_id": 7210, "quality": 0.9375, "length": 15}}, "n3337": {"so_24079001_24079001_2": {"section_id": 1, "quality": 0.8095238095238095, "length": 17}, "so_24079001_24079229_6": {"section_id": 6954, "quality": 0.9375, "length": 15}, "so_24079001_24079229_2": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079001_1": {"section_id": 3750, "quality": 0.9583333333333334, "length": 23}, "so_24079001_24079229_7": {"section_id": 6954, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079229_1": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079229_9": {"section_id": 6954, "quality": 0.9375, "length": 15}, "so_24079001_24079229_4": {"section_id": 6954, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079001_0": {"section_id": 3750, "quality": 0.7575757575757576, "length": 25}}, "n4659": {"so_24079001_24079001_2": {"section_id": 1, "quality": 0.7619047619047619, "length": 16}, "so_24079001_24079229_6": {"section_id": 8719, "quality": 0.9375, "length": 15}, "so_24079001_24079229_2": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079229_7": {"section_id": 8719, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079001_1": {"section_id": 4776, "quality": 0.75, "length": 18}, "so_24079001_24079229_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24079001_24079001_0": {"section_id": 4776, "quality": 0.8787878787878788, "length": 29}, "so_24079001_24079229_4": {"section_id": 8719, "quality": 0.9230769230769231, "length": 12}, "so_24079001_24079229_9": {"section_id": 8719, "quality": 0.9375, "length": 15}}}, "24079229": {"ParentId": "24079001", "LastEditDate": "2014-06-06T11:27:14.760", "CommentCount": "2", "CreationDate": "2014-06-06T10:05:07.073", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "PostTypeId": "2", "Id": "24079229", "Score": "6", "Body": "<h3>What types are involved?</h3>\n<p>The promoted type will be <code>int</code>, as described in the following section:</p>\n<blockquote>\n<p id=\"so_24079001_24079229_0\"><code>4.5p1</code> <strong>Integral promotions</strong> <code>[conv.prom]</code></p>\n<blockquote>\n<p id=\"so_24079001_24079229_2\">A prvalue of an integer type other than <code>bool,</code> <code>char16_t,</code> <code>char32_t,</code> or <code>wchar_t</code> whose integer conversion rank (4.13) is less than the rank of <code>int</code> can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h3>Why does the code behave differently on different platforms?</h3>\n<p>It's implementation defined whether <em>char</em> is signed, or unsigned, as can be read in the following section of the Standard;</p>\n<blockquote>\n<p id=\"so_24079001_24079229_3\"><code>3.9.1p1</code> <strong>Fundamental types</strong> <code>[basic.fundamental]</code></p>\n<blockquote>\n<p id=\"so_24079001_24079229_7\">It is implementation-defined whether a <code>char</code> can hold negative values. Characters can be explicitly declared <code>signed</code> or <code>unsigned</code>.</p>\n<p id=\"so_24079001_24079229_8\">...</p>\n<p id=\"so_24079001_24079229_9\">In any particular implementation, a plain <code>char</code> object can take on either the same values as a <code>signed char</code> or an <code>unsigned char;</code> which one is implementation-defined.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h3>How is that relevant?</h3>\n<p>The previous quoted section means that the cast to <code>char</code> on the following line doesn't have to yield the value of <code>253</code>.</p>\n<pre><code>const char OPTION = (char)(unsigned char)253;\n</code></pre>\n<p>If <em>char</em> is made to be able to hold negative values on a platform where a <em>char</em> is 8bit, <code>253</code> won't fit and most likely the value of <code>OPTION</code> will be <code>-3</code> after initialization. </p>\n<hr>\n<h3>In other words...</h3>\n<p>The switch, after integral promotion, in your post is semantically equivalent to the below <em>if-else-statement</em>, since we have one condition and a default case.</p>\n<pre><code>unsigned char c = 253;\n\n//   .---------.-------------------- integral promotion\n//   v         v\nif ((int)c == (int)OPTION) {\n  printf (\"OPTION\\n\");\n} else {\n  printf (\"DEFAULT\\n\");\n}\n</code></pre>\n<p>Depending on the underlying implementation <code>OPTION</code> might be equal to either <code>253</code>, or <code>-3</code>; yielding the behavior your described.</p>\n<hr>\n<blockquote>\n<p id=\"so_24079001_24079229_10\"><sup><strong>Note</strong>: All standard quotations in this post are from the final <em>C++11</em> Standard (draft)  <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a>.</sup></p>\n</blockquote>\n</hr></hr></hr></hr>", "LastActivityDate": "2014-06-06T11:27:14.760"}, "24079227": {"ParentId": "24079001", "CommentCount": "2", "Body": "<p>As it is said in the quote you cited \"Integral promotions are performed\". So in this expression</p>\n<pre><code>switch (c)\n</code></pre>\n<p>c will be converted to type int and will have value 253 because c is an unsigned integral object.</p>\n<p>In this label</p>\n<pre><code>case OPTION:\n</code></pre>\n<p>as OPTION is signed character (I suppose that by default char behaves as signed char) then the sign bit will be propagated.</p>\n<p>So the control will be passed to label <code>default</code> because ( int ) ( unsigned char ) 253 is not equal to ( int )( signed char ) 253.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "24079227", "Score": "0", "CreationDate": "2014-06-06T10:04:57.060", "LastActivityDate": "2014-06-06T10:04:57.060"}, "24079247": {"ParentId": "24079001", "LastEditDate": "2014-06-06T10:13:39.460", "CommentCount": "0", "CreationDate": "2014-06-06T10:06:10.290", "OwnerUserId": "126769", "LastEditorUserId": "126769", "PostTypeId": "2", "Id": "24079247", "Score": "1", "Body": "<p>The relevant part here is \"Integral promotions are performed.\"</p>\n<p>The short version of that is that types smaller than an int are promoted to an int (or an unsigned int if an int couldn't represent the full range of the values).</p>\n<p>So you have <code>c</code> promoted to an int, which is 253. And you have <code>OPTION</code> with a value of -3  promoted to an int, which is -3. (The sign of a <code>char</code> is platform dependent though, so this program can behave differently on different platforms. The range of values a char can hold is platform dependent too, albeit a conversion of 253 to -3 will happen on 2s-complement platforms with 8 bit signed char, which are common.)</p>\n", "LastActivityDate": "2014-06-06T10:13:39.460"}});