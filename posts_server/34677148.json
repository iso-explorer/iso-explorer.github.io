post_cb({"34678859": {"Id": "34678859", "PostTypeId": "2", "Body": "<p>Other answers explain why what you're trying doesn't work; for an alternative, I'd probably go with:</p>\n<pre><code>#define RGB 1\n#define GREY 2\n#define CMYK 3\n#define MODE RGB\n\n#if MODE == RGB\n    //RGB-mode code\n#elif MODE == GREY\n    //Greyscale code\n#elif MODE == CMYK\n    //CMYK code\n#else\n#    error Undefined MODE\n#endif\n</code></pre>\n<p>You might want prefixes on the RGB/GREY/CMYK if there's a danger of clashes with \"real\" source code.</p>\n", "LastActivityDate": "2016-01-08T14:01:27.863", "Score": "7", "CreationDate": "2016-01-08T14:01:27.863", "ParentId": "34677148", "CommentCount": "2", "OwnerUserId": "2096401"}, "34677226": {"Id": "34677226", "PostTypeId": "2", "Body": "<p>The preprocessor runs before the compiler, which means that the preprocessor doesn't know anything about symbols defined by the compiler and therefore it can't act depending on them. </p>\n", "LastEditorUserId": "597607", "LastActivityDate": "2016-01-08T13:38:53.770", "Score": "11", "CreationDate": "2016-01-08T12:31:53.780", "ParentId": "34677148", "CommentCount": "2", "LastEditDate": "2016-01-08T13:38:53.770", "OwnerUserId": "5446052"}, "34679077": {"Id": "34679077", "PostTypeId": "2", "Body": "<p>As the other answers said, the C preprocessor doesn't see enums. It expects, and can only understand, macros.</p>\n<p>Per <a href=\"http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf\" rel=\"noreferrer\">the C99 standard</a>, \u00a76.10.1 (Conditional inclusion):</p>\n<blockquote>\n<p id=\"so_34677148_34679077_0\">After all replacements due to macro expansion and the defined unary operator have been performed, all remaining identifiers are replaced with the pp-number 0</p>\n</blockquote>\n<p>In other words, in an #if or #elif directive, any macros that cannot be expanded, because they don't exist/are undefined, will behave exactly as if they'd been defined as 0, and therefore will always be equal to each other.</p>\n<p>You can catch likely unintended behavior like this in GCC/clang with the warning option <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"noreferrer\">-Wundef</a> (you'll probably want to make it fatal with -Werror=undef).</p>\n", "LastActivityDate": "2016-01-08T14:12:02.773", "Score": "10", "CreationDate": "2016-01-08T14:12:02.773", "ParentId": "34677148", "CommentCount": "0", "OwnerUserId": "5086740"}, "34752366": {"Id": "34752366", "PostTypeId": "2", "Body": "<p>The posts have explained why, but a possible solution for you that keeps readability might be like this</p>\n<pre><code>#define MODE_RGB\n\nint main()\n{        \n    #ifdef MODE_RGB\n        std::cout &lt;&lt; \"RGB mode\" &lt;&lt; std::endl;\n    #elif defined MODE_GREY\n        std::cout &lt;&lt; \"Grey mode\" &lt;&lt; std::endl;\n    #elif defined MODE_CMYK\n        std::cout &lt;&lt; \"CMYK mode\" &lt;&lt; std::endl;\n    #endif\n}\n</code></pre>\n<p>You just then need to change the macro at the top, to only the macro you are interested in is defined. You could also include a check to make sure that one and only one is defined and if not then and do <code>#error \"You must define MODE_RGB, MODE_GREY or MODE_CMYK</code></p>\n", "LastEditorUserId": "5708620", "LastActivityDate": "2016-01-13T13:01:26.743", "Score": "2", "CreationDate": "2016-01-12T19:37:51.610", "ParentId": "34677148", "CommentCount": "1", "LastEditDate": "2016-01-13T13:01:26.743", "OwnerUserId": "1128110"}, "bq_ids": {"n4140": {"so_34677148_34679077_0": {"length": 17, "quality": 1.0, "section_id": 500}}, "n3337": {"so_34677148_34679077_0": {"length": 17, "quality": 1.0, "section_id": 491}}, "n4659": {"so_34677148_34679077_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 520}}}, "34677148": {"ViewCount": "4427", "Body": "<p>Why does the <code>std::cout</code> line in the following code run even though <code>A</code> and <code>B</code> are different?</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum T { A = 1, B = 2 };\n// #define A 1\n// #define B 2\n\nint main() {\n#if (A == B)\n    std::cout &lt;&lt; A &lt;&lt; B;\n#endif\n}\n</code></pre>\n<p>If I use <code>#define</code> instead (as commented out), I get no output as I expect.</p>\n<p>Reason for the question:</p>\n<p>I want to have a mode selector for some test code in which I can easily change modes by commenting/uncommenting lines on top:</p>\n<pre><code>enum T { MODE_RGB = 1, MODE_GREY = 2, MODE_CMYK = 3 };\n// #define MODE MODE_RGB\n#define MODE MODE_GREY\n// #define MODE MODE_CMYK\n\nint main() {\n#if (MODE == MODE_RGB)\n    // do RGB stuff\n#elif (MODE == MODE_GREY)\n    // do greyscale stuff\n#else\n    // do CMYK stuff\n#endif\n\n    // some common code\n\n    some_function(arg1, arg2,\n#if (MODE == MODE_RGB)\n        // RGB calculation for arg3,\n#elif (MODE == MODE_GREY)\n        // greyscale calculation for arg3,\n#else\n        // CMYK calculation for arg3,\n#endif\n        arg4, arg5);\n}\n</code></pre>\n<p>I know I can use numeric values e.g.</p>\n<pre><code>#define MODE 1 // RGB\n...\n#if (MODE == 1) // RGB\n</code></pre>\n<p>but it makes the code less readable.</p>\n<p>Is there an elegant solution for this?</p>\n", "AcceptedAnswerId": "34677270", "Title": "Why does the C preprocessor consider enum values as equal?", "CreationDate": "2016-01-08T12:27:39.140", "Id": "34677148", "CommentCount": "2", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2016-01-09T21:21:31.117", "LastEditorUserId": "2642204", "LastActivityDate": "2016-01-13T13:01:26.743", "Score": "55", "OwnerUserId": "457542", "Tags": "<c++><c-preprocessor>", "AnswerCount": "7"}, "34677227": {"Id": "34677227", "PostTypeId": "2", "Body": "<p>This is because the preprocessor works before compile time.</p>\n<p>As the enum definitions occur at compile time, A and B will both be defined as empty (pp-number <code>0</code>) - and thus equal - at pre-processing time, and thus the output statement is included in the compiled code.</p>\n<p>When you use <code>#define</code> they are defined differently at pre-processing time and thus the statement evaluates to false.</p>\n<p>In relation to your comment about what you want to do, you don't need to use pre-processor <code>#if</code> to do this. You can just use the standard <code>if</code> as both <code>MODE</code> and <code>MODE_GREY</code> (or <code>MODE_RGB</code> or <code>MODE_CMYK</code>) are all still defined:</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum T { MODE_RGB = 1, MODE_GREY = 2, MODE_CMYK = 3 };\n\n#define MODE MODE_GREY\n\nint main()\n{\n    if( MODE == MODE_GREY )\n        std::cout &lt;&lt; \"Grey mode\" &lt;&lt; std::endl;\n    else if( MODE == MODE_RGB )\n        std::cout &lt;&lt; \"RGB mode\" &lt;&lt; std::endl;\n    else if( MODE == MODE_CMYK )\n        std::cout &lt;&lt; \"CMYK mode\" &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The other option using only the pre-processor is to do this as @TripeHound <a href=\"https://stackoverflow.com/a/34678859/3933895\">correctly answered below</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-10T01:44:10.617", "Score": "44", "CreationDate": "2016-01-08T12:31:55.193", "ParentId": "34677148", "CommentCount": "6", "LastEditDate": "2017-05-23T12:17:00.903", "OwnerUserId": "3933895"}, "34677268": {"Id": "34677268", "PostTypeId": "2", "Body": "<p>Identifiers that are not defined macros are interpreted as value 0 in conditional preprocessor directives. Therefore, since you hadn't defined macros <code>A</code> and <code>B</code>, they are both considered 0 and two 0 are equal to each other.</p>\n<p>The reason why undefined (to the pre-processor) identifiers are considered 0 is because it allows using undefined macros in the conditional without using <code>#ifdef</code>.</p>\n", "LastActivityDate": "2016-01-08T12:34:07.003", "Score": "24", "CreationDate": "2016-01-08T12:34:07.003", "ParentId": "34677148", "CommentCount": "1", "OwnerUserId": "2079303"}, "34677270": {"Id": "34677270", "PostTypeId": "2", "Body": "<p>There are no macros called <code>A</code> or <code>B</code>, so on your <code>#if</code> line, <code>A</code> and <code>B</code> get replaced by <code>0</code>, so you actually have:</p>\n<pre><code>enum T { A = 1, B = 2 };\n\nint main() {\n#if (0 == 0)\n    std::cout &lt;&lt; A &lt;&lt; B;\n#endif\n}\n</code></pre>\n<p>The preprocessor runs before the compiler knows anything about your <code>enum</code>. The preprocessor only knows about macros (<code>#define</code>).</p>\n", "LastEditorUserId": "1593860", "LastActivityDate": "2016-01-08T13:31:41.533", "Score": "114", "CreationDate": "2016-01-08T12:34:08.557", "ParentId": "34677148", "CommentCount": "2", "LastEditDate": "2016-01-08T13:31:41.533", "OwnerUserId": "2491746"}});