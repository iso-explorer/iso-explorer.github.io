post_cb({"bq_ids": {"n4140": {"so_38005753_38005753_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 1347}, "so_38005753_38005874_0": {"length": 21, "quality": 0.875, "section_id": 1347}}, "n3337": {"so_38005753_38005753_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 1341}, "so_38005753_38005874_0": {"length": 21, "quality": 0.875, "section_id": 1341}}, "n4659": {"so_38005753_38005753_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 1478}, "so_38005753_38005874_0": {"length": 21, "quality": 0.875, "section_id": 1478}}}, "38005753": {"ViewCount": "105", "Body": "<p>Based on the <a href=\"http://en.cppreference.com/w/cpp/algorithm/unique\" rel=\"nofollow\">example code here</a> I wrote this small example (<a href=\"https://ideone.com/c8A1d9\" rel=\"nofollow\">ideone Link</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nint main() \n{\n    std::string s = \"foo123bar456wibble\";\n    auto end = std::unique(s.begin(), s.end(), [](char l, char r){\n        return std::isdigit(l) &amp;&amp; std::isdigit(r);\n    });\n    // What does s hold?\n    std::cout &lt;&lt; std::string(s.begin(), end) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>My output is:</p>\n<pre><code>foo1bar4wibble\n</code></pre>\n<p>Does the standard guarantee this behaviour, or would this also be acceptable?</p>\n<pre><code>foo2bar6wibble\n</code></pre>\n<p>The linked cppreference page says:</p>\n<blockquote>\n<p id=\"so_38005753_38005753_0\">Removing is done by shifting the elements in the range in such a way that elements to be erased are overwritten. </p>\n</blockquote>\n<p>But is that normative text or just a suggested implementation?</p>\n<p>Furthermore, <a href=\"http://www.cplusplus.com/reference/algorithm/unique/\" rel=\"nofollow\">cplusplus.com says</a>:</p>\n<blockquote>\n<p id=\"so_38005753_38005753_1\">Removes all but the first element from every consecutive group of equivalent elements in the range [first,last).</p>\n</blockquote>\n<p>But again is that normative?</p>\n", "AcceptedAnswerId": "38005874", "Title": "Is which element is deleted defined by std::unique?", "CreationDate": "2016-06-24T04:45:57.590", "Id": "38005753", "CommentCount": "1", "LastEditDate": "2016-06-24T04:54:28.553", "PostTypeId": "1", "LastEditorUserId": "1270789", "LastActivityDate": "2016-06-24T04:58:52.837", "Score": "2", "OwnerUserId": "1270789", "Tags": "<c++11><stl>", "AnswerCount": "1"}, "38005874": {"Id": "38005874", "PostTypeId": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\">25.3.9 [alg.unique]/1</a></p>\n<blockquote>\n<p id=\"so_38005753_38005874_0\"><em>Effects</em>: For a nonempty range, eliminates all but the first element from every consecutive group of equivalent elements referred to by the iterator <code>i</code> in the range <code>[first + 1,last)</code> for which the following\n  conditions hold: <code>*(i - 1) == *i</code> or <code>pred(*(i - 1), *i) != false</code>.</p>\n</blockquote>\n", "LastActivityDate": "2016-06-24T04:58:52.837", "CommentCount": "0", "CreationDate": "2016-06-24T04:58:52.837", "ParentId": "38005753", "Score": "6", "OwnerUserId": "1084944"}});