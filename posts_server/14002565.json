post_cb({"14002595": {"ParentId": "14002565", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You have to qualify dependent types using <code>typename</code>.  See <a href=\"https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords\">Where and why do I have to put the \"template\" and \"typename\" keywords?</a></p>\n<pre><code>//CFoo.cpp (source code, example 2)\n/* omitting irrelevant parts */\ntemplate &lt;typename T&gt;\ntypename CFoo&lt;T&gt;::SFoo* CFoo&lt;T&gt;::get() { return foo; }\n^^^^^^^^\n</code></pre>\n<p>In C++11 you can use <code>auto</code> instead since <code>SFoo</code> will be in scope after the function name</p>\n<pre><code>template &lt;typename T&gt;\nauto CFoo&lt;T&gt;::get() -&gt; SFoo* { return foo; }\n</code></pre>\n", "OwnerUserId": "964135", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:47:34.417", "Id": "14002595", "Score": "5", "CreationDate": "2012-12-22T11:51:36.513", "LastActivityDate": "2012-12-22T12:10:46.033"}, "14002596": {"ParentId": "14002565", "CommentCount": "0", "Body": "<p>You need to fully qualify <code>SFoo</code> when outside of the class declaration: <code>typename CFoo&lt;T&gt;::SFoo</code>.</p>\n", "OwnerUserId": "105672", "PostTypeId": "2", "Id": "14002596", "Score": "1", "CreationDate": "2012-12-22T11:51:49.493", "LastActivityDate": "2012-12-22T11:51:49.493"}, "14002610": {"ParentId": "14002565", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In general, <code>typename</code> has to be used whenever a name that depends on a template parameter is a type. </p>\n<pre><code>template &lt;typename T&gt;\ntypename CFoo&lt;T&gt;::SFoo* CFoo&lt;T&gt;::get() { return foo; }\n</code></pre>\n<p><strong>\u00a7 14.6.2 Name resolution</strong></p>\n<blockquote>\n<p id=\"so_14002565_14002610_0\">A name used in a template declaration or definition and that is\n  dependent on a template-parameter is assumed not to name a type unless\n  the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename.</p>\n</blockquote>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2012-12-23T07:36:24.153", "Id": "14002610", "Score": "1", "CreationDate": "2012-12-22T11:53:54.993", "LastActivityDate": "2012-12-23T07:36:24.153"}, "bq_ids": {"n4140": {"so_14002565_14002610_0": {"section_id": 169, "quality": 1.0, "length": 19}}, "n3337": {"so_14002565_14002610_0": {"section_id": 163, "quality": 1.0, "length": 19}}, "n4659": {"so_14002565_14002610_0": {"section_id": 174, "quality": 1.0, "length": 19}}}, "14002565": {"CommentCount": "2", "ViewCount": "55", "CreationDate": "2012-12-22T11:47:35.060", "LastActivityDate": "2012-12-23T07:36:24.153", "Title": "Returning inclass structure", "AcceptedAnswerId": "14002595", "PostTypeId": "1", "Id": "14002565", "Score": "2", "Body": "<p>I have a template class with the following structure</p>\n<pre><code>//CFoo.hpp (header file)\ntemplate &lt;typename T&gt;\nclass CFoo {\n        struct SFoo {\n            T *ptr;\n            /* rest is irrelevant */\n        } *foo;\n\n    public:\n    /* omitting irrelevant parts */\n    SFoo* get();\n};\n</code></pre>\n<p>Now, if I implement the method <strong>SFoo* get()</strong> inside header file everything works nice. However, if I separate declaration and definition my code stops working with the followingg compilation errors. </p>\n<pre><code>//CFoo.cpp (source code, example 1)\n/* omitting irrelevant parts */\ntemplate &lt;typename T&gt;\nSFoo* CFoo&lt;T&gt;::get() { return foo; } //ERROR HERE\n</code></pre>\n<p>Error: <code>&lt;where-is-the-error&gt;: error: \u2018SFoo\u2019 does not name a type</code></p>\n<pre><code>//CFoo.cpp (source code, example 2)\n/* omitting irrelevant parts */\ntemplate &lt;typename T&gt;\nCFoo&lt;T&gt;::SFoo* CFoo&lt;T&gt;::get() { return foo; } //ERROR HERE\n</code></pre>\n<p>Error: <code>&lt;where-is-the-error&gt;: error: need \u2018typename\u2019 before \u2018CFoo&lt;T&gt;::SFoo\u2019 because \u2018CFoo&lt;T&gt;\u2019 is a dependent scope</code></p>\n<p>I'm looking forward to any hints on how to fix that. Thanks in advance.</p>\n", "Tags": "<c++><class><templates>", "OwnerUserId": "1201526", "AnswerCount": "3"}});