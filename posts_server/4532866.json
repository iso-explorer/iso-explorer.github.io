post_cb({"4532922": {"Id": "4532922", "PostTypeId": "2", "Body": "<p>Firstly, <code>this</code> is not a \"const pointer\". Where did you get that strange idea? Pointer <code>this</code> has scalar type and is not an lvalue, meaning that it can't possibly be \"const\" or \"non-const\". Pointer <code>this</code> is an rvalue and it is non-modifiable.</p>\n<p>Secondly, the code in your question is valid regardless of whether the pointer involved is const or not. For example, the following code is valid for exactly the same reason</p>\n<pre><code>int *const p = 0; /* a const pointer */\n\nint *foo() { \n  return p; /* OK, no error here */\n}\n</code></pre>\n<p>What is returned in this case is a completely independent <em>copy</em> of the original pointer value. It does not matter whether <code>p</code> is const or not - making a copy of const value does not in any way violate its constness. </p>\n<p>This is exactly what's done in your code sample - you are returning a copy of <code>this</code>'s value. Why would you even care whether <code>this</code> is const or not?</p>\n", "LastActivityDate": "2010-12-26T05:52:50.147", "CommentCount": "8", "CreationDate": "2010-12-26T05:52:50.147", "ParentId": "4532866", "Score": "9", "OwnerUserId": "187690"}, "4533462": {"Id": "4533462", "PostTypeId": "2", "Body": "<p>A pointer is not a object, so it does not matter if the pointer is const when it is a return value.\nConsider this:</p>\n<pre><code>int x;\nint f() {\n    return x;\n}\nconst int g() {\n    return x;\n}\n</code></pre>\n<p>There's actually no difference between f() and g().</p>\n<p>But it may make difference if you replace all \"int\" to some other name of a class.\n\"const\" may prevent you from some error, e.g. when you don't write a copying constructor properly.</p>\n<pre><code>class T \n{\n    int *x;\npublic:\n    T() {x = new int;}\n    void set_x(int n) {*x = n;}\n    int get_x() const {return *x;}\n};\nT a;\nT f() {\n    return a;\n}\nconst T g() {\n    return a;\n}\nint main() {\n    f().set_x(123); // The value is modified\n                    // even though a return value is not a l-value.\n    g().set_x(123); // Compile Error\n}\n</code></pre>\n<p>So, if you want to prevent modifying data of the object by referring to the return value, what you need is:</p>\n<pre><code>class T\n{\n public:\n   const T* func() const\n   { return this; }\n};\n</code></pre>\n", "LastActivityDate": "2010-12-26T10:14:00.697", "CommentCount": "0", "CreationDate": "2010-12-26T10:14:00.697", "ParentId": "4532866", "Score": "0", "OwnerUserId": "358242"}, "4537163": {"Id": "4537163", "PostTypeId": "2", "Body": "<p><em>AndreyT</em> provided the explanation and here is the reference.</p>\n<p>From standard docs <em>9.3.2.1 The this pointer</em>,</p>\n<blockquote>\n<p id=\"so_4532866_4537163_0\">In the body of a non-static (9.3) member function, <strong>the keyword this is an rvalue expression whose value is the address\n  of the object for which the function is called.</strong> The type of this in a member function of a class X is X*. <strong>If the member\n  function is declared const, the type of this is const X*,</strong> if the member function is declared volatile, the type of\n  this is volatile X*, and if the member function is declared const volatile, the type of this is const volatile\n  X*.</p>\n</blockquote>\n<p>which explains the question that you asked and the comment you made to <em>AndreyT</em>. </p>\n<p>Hope this one also helps.</p>\n", "LastActivityDate": "2010-12-27T07:15:49.320", "CommentCount": "0", "CreationDate": "2010-12-27T07:15:49.320", "ParentId": "4532866", "Score": "1", "OwnerUserId": "249490"}, "bq_ids": {"n4140": {"so_4532866_4537163_0": {"length": 36, "quality": 0.9473684210526315, "section_id": 5895}}, "n3337": {"so_4532866_4537163_0": {"length": 36, "quality": 0.9473684210526315, "section_id": 5666}}, "n4659": {"so_4532866_4537163_0": {"length": 36, "quality": 0.9473684210526315, "section_id": 7378}}}, "4532874": {"Id": "4532874", "PostTypeId": "2", "Body": "<p>Unless the member function is const-qualified (e.g. <code>T* func() const</code> instead of just <code>T* func()</code>), <code>this</code> is of type <code>T*</code>.</p>\n<p><code>this</code> is not itself modifiable (so you can't assign something to <code>this</code>), but it's just a pointer to an object of type <code>T</code> like any other and can be used as such.</p>\n", "LastActivityDate": "2010-12-26T05:29:59.953", "CommentCount": "2", "CreationDate": "2010-12-26T05:29:59.953", "ParentId": "4532866", "Score": "2", "OwnerUserId": "151292"}, "4532866": {"ViewCount": "6824", "Body": "<p>if <code>this</code> is a const pointer to class's object how can you return a const pointer from non-const return type?</p>\n<pre><code>Class T\n{\n public:\n   T* func(){return this;}\n};\n</code></pre>\n", "AcceptedAnswerId": "4532922", "Title": "Returning const 'this' pointer", "CreationDate": "2010-12-26T05:24:17.207", "Id": "4532866", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2010-12-27T07:15:49.320", "Score": "8", "OwnerUserId": "255412", "Tags": "<c++>", "AnswerCount": "4"}});