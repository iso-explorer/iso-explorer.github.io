post_cb({"22841822": {"ParentId": "22840771", "CommentCount": "3", "Body": "<p>One issue with your regexp is you are not escaping \\ and \\d is not a valid escape sequence in the context of a string. I'm unsure if you can use an R identifier on the string but it was undefined for me.</p>\n<p>Also GCC's regexp was incomplete last time I checked. So you may be forced to use boost regexp.</p>\n<pre><code>    regex rx( \"\\\\d*;\" ); //regexp, must escape '\\'\n    string input = \"10;20;30;40;\";\n    smatch m;\n\n    if( regex_search( input, m, rx ) )\n    {\n        cout &lt;&lt; m[0] &lt;&lt; endl;\n    } \n</code></pre>\n", "OwnerUserId": "1800854", "PostTypeId": "2", "Id": "22841822", "Score": "-2", "CreationDate": "2014-04-03T15:11:57.843", "LastActivityDate": "2014-04-03T15:11:57.843"}, "22840771": {"CommentCount": "5", "AcceptedAnswerId": "22841956", "PostTypeId": "1", "LastEditorUserId": "390278", "CreationDate": "2014-04-03T14:29:23.450", "LastActivityDate": "2015-01-26T01:54:43.813", "LastEditDate": "2015-01-26T01:54:43.813", "ViewCount": "1759", "FavoriteCount": "1", "Title": "Comprehending regex in C++11", "Id": "22840771", "Score": "4", "Body": "<p>I am trying to learn the regular expressions in C++11.\nMust be doing something wrong since no brackets or escape sequences seem to work.</p>\n<p><strong>Here is my code:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;regex&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    try\n    {\n        cout &lt;&lt; R\"(\\d*(\\.\\d*)?;)\" &lt;&lt; endl &lt;&lt; endl;\n\n        regex rx{ R\"(\\d*(\\.\\d*)?;)\", regex_constants::ECMAScript };\n        smatch m;\n\n        if( regex_match( string( \"10;20;30;40;\" ), m, rx ) )\n        {\n            cout &lt;&lt; m[0];\n        }\n    }\n    catch( const regex_error &amp;e )\n    {\n        cerr &lt;&lt; e.what() &lt;&lt; \". Code: \" &lt;&lt; e.code() &lt;&lt; endl;\n\n        switch( e.code() )\n        {\n        case regex_constants::error_collate:\n            cerr &lt;&lt; \"The expression contained an invalid collating element name.\";\n            break;\n        case regex_constants::error_ctype:\n            cerr &lt;&lt; \"The expression contained an invalid character class name.\";\n            break;\n        case regex_constants::error_escape:\n            cerr &lt;&lt; \"The expression contained an invalid escaped character, or a trailing escape.\";\n            break;\n        case regex_constants::error_backref:\n            cerr &lt;&lt; \"The expression contained an invalid back reference.\";\n            break;\n        case regex_constants::error_brack:\n            cerr &lt;&lt; \"The expression contained mismatched brackets ([ and ]).\";\n            break;\n        case regex_constants::error_paren:\n            cerr &lt;&lt; \"The expression contained mismatched parentheses (( and )).\";\n            break;\n        case regex_constants::error_brace:\n            cerr &lt;&lt; \"The expression contained mismatched braces ({ and }).\";\n            break;\n        case regex_constants::error_badbrace:\n            cerr &lt;&lt; \"The expression contained an invalid range between braces ({ and }).\";\n            break;\n        case regex_constants::error_range:\n            cerr &lt;&lt; \"The expression contained an invalid character range.\";\n            break;\n        case regex_constants::error_space:\n            cerr &lt;&lt; \"There was insufficient memory to convert the expression into a finite state machine.\";\n            break;\n        case regex_constants::error_badrepeat:\n            cerr &lt;&lt; \"The expression contained a repeat specifier (one of *?+{) that was not preceded by a valid regular expression.\";\n            break;\n        case regex_constants::error_complexity:\n            cerr &lt;&lt; \"The complexity of an attempted match against a regular expression exceeded a pre-set level.\";\n            break;\n        case regex_constants::error_stack:\n            cerr &lt;&lt; \"There was insufficient memory to determine whether the regular expression could match the specified character sequence.\";\n            break;\n        default:\n            cerr &lt;&lt; \"Undefined.\";\n            break;\n\n}\n\n    cerr &lt;&lt; endl;\n}\n\n    return 0;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<blockquote>\n<p id=\"so_22840771_22840771_0\">\\d*(.\\d*)?;</p>\n<p id=\"so_22840771_22840771_1\">regex_error. Code: 2 </p>\n<p id=\"so_22840771_22840771_2\">The expression contained an invalid escaped character, or a trailing escape.</p>\n</blockquote>\n<p>What am I doing wrong?</p>\n<p><strong>Update</strong></p>\n<p>gcc version 4.8.2 20131212 (Red Hat 4.8.2-7) (GCC)</p>\n<p>clang version 3.3 (tags/RELEASE_33/final)</p>\n<p>libstdc++ version 4.8.2</p>\n<p><strong>Solution</strong></p>\n<p>Well. I am reading \"The C++ programming language\" and wanted to experiment with the std::regex stuff. So I guess the solution is to wait for gcc-4.9.</p>\n<p>I gave EagleV_Attnam the credit for pointing out other errors in my code.</p>\n", "Tags": "<c++><regex><c++11><ecma>", "OwnerUserId": "1247073", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_22840771_22840771_2": {"section_id": 5059, "quality": 0.875, "length": 7}}, "n3337": {"so_22840771_22840771_2": {"section_id": 4856, "quality": 0.875, "length": 7}}, "n4659": {"so_22840771_22840771_2": {"section_id": 6480, "quality": 0.875, "length": 7}}}, "22841956": {"ParentId": "22840771", "CommentCount": "1", "Body": "<p>Two things:</p>\n<ol>\n<li>Your string <code>\"10;20;30;40;\"</code>is only defined in the <code>match_regex</code> call. An <code>smatch</code>, as opposed to <code>cmatch</code>, expects the string (as in, the one created by <code>string()</code>) to still be alive by the time you want to access it.</li>\n<li>Your current regex doesn't match (at least not on my system). It tries to match the whole string. Adding a .* at the end (and start, but that's not necessary in your case) should fix it, as would letting the whole thing repeat (with <code>R\"((stuff)*)\"</code>)</li>\n</ol>\n<p>Working code (but couldn't try it on gcc):</p>\n<pre><code>regex rx{ R\"(\\d*(\\.\\d*)?;.*)\", regex_constants::ECMAScript };\nsmatch m;\nstring s(\"10;20;30;40;\");\nif (regex_match(s, m, rx))\n{\n    cout &lt;&lt; m[0];\n}\n</code></pre>\n<p>Don't know if that will fix your particular error - I'm afraid KitsuneYMG is right on that count - but it shouldn't hurt to try.</p>\n", "OwnerUserId": "3442908", "PostTypeId": "2", "Id": "22841956", "Score": "1", "CreationDate": "2014-04-03T15:16:51.330", "LastActivityDate": "2014-04-03T15:16:51.330"}});