post_cb({"38111950": {"ParentId": "38111837", "CommentCount": "2", "Body": "<p>In your example <code>B</code> from <code>enum</code> hides class <code>B</code>. Section 3.3.10 of the standard describes the rules for <em>name hiding</em>:</p>\n<blockquote>\n<p id=\"so_38111837_38111950_0\">A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member, function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data member, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is visible.</p>\n</blockquote>\n<p>Language designers needed to set precedence rules, so they decided that <code>enum</code> constant name should win. This rule seems arbitrary, and is probably modeled after some old rule in the C standard. However, it is part of the standard, so every compiler must comply with it.</p>\n<p>It goes without saying that making a class name collide with an <code>enum</code> member is a very bad idea. The best solution to this problem is renaming your class.</p>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "38111950", "Score": "5", "CreationDate": "2016-06-30T00:00:04.617", "LastActivityDate": "2016-06-30T00:00:04.617"}, "bq_ids": {"n4140": {"so_38111837_38111950_0": {"section_id": 7079, "quality": 1.0, "length": 41}}, "n3337": {"so_38111837_38111950_0": {"section_id": 6823, "quality": 1.0, "length": 41}}, "n4659": {"so_38111837_38111950_0": {"section_id": 8580, "quality": 1.0, "length": 41}}}, "38111837": {"CommentCount": "4", "ViewCount": "250", "PostTypeId": "1", "LastEditorUserId": "908939", "CreationDate": "2016-06-29T23:46:46.483", "LastActivityDate": "2016-06-30T00:00:04.617", "Title": "Enum Members conflict with class names", "AcceptedAnswerId": "38111950", "LastEditDate": "2016-06-29T23:50:25.577", "Id": "38111837", "Score": "0", "Body": "<p>I recently produced a wierd set of errors when working on a little project. This was basically the code that caused it:</p>\n<pre><code>#include &lt;memory&gt;\n\nenum derivedtype {B, C};\n\n//abstract class\nclass A{};\n\nclass B : public A\n{};\nclass C : public A\n{};\n\nint main()\n{\n  {\n    std::unique_ptr&lt;A&gt; myb(new B);\n    std::unique_ptr&lt;A&gt; myc(new C);\n  }\n}\n</code></pre>\n<p>Which produces this compiler error:</p>\n<pre><code>enumclasserror.cpp: In function \u2018int main()\u2019:\n  enumclasserror.cpp:15:30: error: \u2018B\u2019 does not name a type\n  std::unique_ptr&lt;A&gt; myb(new B);\n                          ^\n  enumclasserror.cpp:16:30: error: \u2018C\u2019 does not name a type\n  std::unique_ptr&lt;A&gt; myc(new C);\n</code></pre>\n<p>The fix was adding the class keyword after the new:</p>\n<pre><code>std::unique_ptr&lt;A&gt; myb(new class B);\n</code></pre>\n<p>Now the enum was included in the headerfile of the abstact class in the original code(which made it even harder to spot), but nevermind that; I could have never imagined that the members of an enum can cause the creation of an instance to fail. It literally took me hours to find that bug. Can anyone explain to me why that happens? Does new make any sense with enums?</p>\n<p>P.S.: The error was found by a collegue who uses clang which suggested the class keyword. The standard c++ compiler on my Ubuntu, as you can see, didn't tho..</p>\n", "Tags": "<c++><class><enums><abstract><derived>", "OwnerUserId": "6301103", "AnswerCount": "2"}, "38111865": {"ParentId": "38111837", "CommentCount": "11", "Body": "<p>I'm not sure what else you expected here.</p>\n<p>First, you introduced integral constants named <code>B</code> and <code>C</code>. Of course, you cannot <code>new</code> these. That would be like writing <code>new 42</code>.</p>\n<p>Then, you introduced types with the same names. Okay, fine, that's allowed, but in order to use these you must now refer to them as <code>class B</code> and <code>class C</code> (or <code>struct B</code> and <code>struct C</code>), as you've discovered.</p>\n<p><strong>Do not use the same name for different things.</strong></p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "38111865", "Score": "2", "CreationDate": "2016-06-29T23:49:58.780", "LastActivityDate": "2016-06-29T23:49:58.780"}});