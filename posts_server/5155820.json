post_cb({"5155839": {"ParentId": "5155820", "CommentCount": "1", "Body": "<p>Yes, you can use <code>dynamic_cast</code> on a null pointer.</p>\n", "OwnerUserId": "57428", "PostTypeId": "2", "Id": "5155839", "Score": "20", "CreationDate": "2011-03-01T14:28:47.003", "LastActivityDate": "2011-03-01T14:28:47.003"}, "5155820": {"CommentCount": "0", "AcceptedAnswerId": "5155876", "CreationDate": "2011-03-01T14:27:10.270", "LastActivityDate": "2016-01-18T14:38:42.310", "PostTypeId": "1", "ViewCount": "11080", "FavoriteCount": "3", "Title": "Portably safe to pass NULL/zero to dynamic_cast?", "Id": "5155820", "Score": "42", "Body": "<p>Out of habit for checking null pointers, I have sometimes written:</p>\n<pre><code>MyClass * c = someBasePtr ? dynamic_cast&lt;MyClass*&gt;(someBasePtr) : 0;\nif (c) {...\n</code></pre>\n<p>In effect, checking for a null pointer before passing to dynamic cast, and also checking the return.</p>\n<p>I then read in the MSDN documentation </p>\n<blockquote>\n<p id=\"so_5155820_5155820_0\">A null pointer value is converted to\n  the null pointer value of the\n  destination type by dynamic_cast.</p>\n</blockquote>\n<p>It appears then that I could remove the ?: construct safely.  Is this C++ <em>portable</em>?</p>\n<p>Such that the new code would be</p>\n<pre><code>MyClass * c = dynamic_cast&lt;MyClass*&gt;(someBasePtr);\nif (c) {...\n</code></pre>\n<p>Of course presuming that <em>someBasePtr</em> is either null or valid, i.e. not <em>wild</em> pointing to garbage...</p>\n", "Tags": "<c++><null><dynamic-cast>", "OwnerUserId": "3529", "AnswerCount": "4"}, "5155876": {"ParentId": "5155820", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\u00a75.2.7/4:</p>\n<blockquote>\n<p id=\"so_5155820_5155876_0\">If the value of v is a null pointer\n  value in the pointer case, the result\n  is the null pointer value of type R.</p>\n</blockquote>\n<p>So you don't have to check for a null pointer yourself. Same goes for operator delete, deleting a null pointer has no effect.</p>\n", "Id": "5155876", "LastEditDate": "2012-11-30T19:58:35.207", "OwnerDisplayName": "user405725", "Score": "57", "CreationDate": "2011-03-01T14:31:58.820", "LastActivityDate": "2012-11-30T19:58:35.207", "LastEditorDisplayName": "user405725"}, "34857313": {"ParentId": "5155820", "CommentCount": "2", "Body": "<p>I was curious about that and tried it before googling this answer. Following code produces no errors in C++14.</p>\n<pre><code>class A {\npublic:\n    virtual ~A() {}\n};\nclass B: A {};\n#include &lt;iostream&gt;\nint main() {\n   A* error_pointer = nullptr;\n   B* x = dynamic_cast&lt;B*&gt;(error_pointer);\n   std::cout&lt;&lt;\"No errors :)\\n\";\n}\n</code></pre>\n<p>Test it here: <a href=\"http://ideone.com/0dSf5p\" rel=\"nofollow\">http://ideone.com/0dSf5p</a></p>\n", "OwnerUserId": "607407", "PostTypeId": "2", "Id": "34857313", "Score": "0", "CreationDate": "2016-01-18T14:38:42.310", "LastActivityDate": "2016-01-18T14:38:42.310"}, "5155884": {"ParentId": "5155820", "CommentCount": "0", "Body": "<p>Yes, check 5.2.7.4 in standard.</p>\n", "OwnerUserId": "353091", "PostTypeId": "2", "Id": "5155884", "Score": "4", "CreationDate": "2011-03-01T14:32:48.973", "LastActivityDate": "2011-03-01T14:32:48.973"}, "bq_ids": {"n4140": {"so_5155820_5155820_0": {"section_id": 40, "quality": 0.9, "length": 9}, "so_5155820_5155876_0": {"section_id": 6014, "quality": 1.0, "length": 11}}, "n3337": {"so_5155820_5155820_0": {"section_id": 37, "quality": 0.9, "length": 9}, "so_5155820_5155876_0": {"section_id": 5782, "quality": 1.0, "length": 11}}, "n4659": {"so_5155820_5155820_0": {"section_id": 41, "quality": 0.9, "length": 9}, "so_5155820_5155876_0": {"section_id": 7513, "quality": 1.0, "length": 11}}}});