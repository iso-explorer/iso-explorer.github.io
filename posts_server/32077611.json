post_cb({"32078221": {"Id": "32078221", "PostTypeId": "2", "Body": "<p>The statement is correct.\nYes, we can use it as *(str+i) it will run until the end of the string.\nWhere as *provide value at particular address. </p>\n<p>Example:</p>\n<pre><code>char str[5]={\"test\"};\n\ncout&lt;&lt;*str;     // it will always give default first index value\n\ncout&lt;&lt;*(str+1) // it will display first character of string\n</code></pre>\n<p>So when it gets to the end of the string it will become null.\nThe end of the string is always a null character.\nSo then Loop will terminate.</p>\n", "LastEditorUserId": "2985377", "LastActivityDate": "2015-08-18T17:04:59.460", "Score": "2", "CreationDate": "2015-08-18T16:50:41.953", "ParentId": "32077611", "CommentCount": "1", "OwnerUserId": "4260817", "LastEditDate": "2015-08-18T17:04:59.460"}, "32077623": {"Id": "32077623", "PostTypeId": "2", "Body": "<p><code>*(str+i)</code> is equivalent to <code>str[i]</code> provided that <code>str</code> is a pointer to some data type. This is a valid syntax.<br>\nIt seems that <code>str</code> is a null terminated string. This condition will <code>false</code> when <code>*(str+i)</code> will be equal to <code>'\\0'</code>.</br></p>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2015-08-18T16:21:14.427", "Score": "2", "CreationDate": "2015-08-18T16:16:55.260", "ParentId": "32077611", "CommentCount": "2", "OwnerUserId": "2455888", "LastEditDate": "2015-08-18T16:21:14.427"}, "32077611": {"ViewCount": "158", "Body": "<pre><code>for (i = 0; *(str+i); i++)\n{\n    //some code;\n}\n</code></pre>\n<p>What is meant by the second condition in this syntax? Can we write it like this?</p>\n", "AcceptedAnswerId": "32077759", "Title": "Is this condition checking statement legal in a for loop?", "CreationDate": "2015-08-18T16:16:14.000", "Id": "32077611", "CommentCount": "1", "LastEditDate": "2015-08-18T17:51:05.843", "PostTypeId": "1", "LastEditorUserId": "2877241", "LastActivityDate": "2015-08-18T17:51:05.843", "Score": "3", "OwnerUserId": "4983331", "Tags": "<c++><c><for-loop><syntax>", "AnswerCount": "7"}, "32077635": {"Id": "32077635", "PostTypeId": "2", "Body": "<p>Yes it is. <code>str</code> is a pointer, thus when the string null terminator (<code>'\\0'</code>) is reached, the condition will be false, making the loop stop from executing its body.</p>\n<p>Imagine that the string will be something like this:</p>\n<pre><code>str: 'a'|'b'|'\\0'\ni:    0 | 1 | 2\n</code></pre>\n<p>So when <code>i</code> gets the value 2, then this <code>*(str+i)</code> will give 0, thus your loop will be like this at that time:</p>\n<pre><code>for (i = 0; 0; i++)\n</code></pre>\n<p>since the pointer arithmetic will result in <code>*(str+i)</code> to point to the last entry of the string.</p>\n", "LastEditorUserId": "2410359", "LastActivityDate": "2015-08-18T17:00:24.690", "Score": "3", "CreationDate": "2015-08-18T16:17:32.783", "ParentId": "32077611", "CommentCount": "4", "OwnerUserId": "2411320", "LastEditDate": "2015-08-18T17:00:24.690"}, "32077828": {"Id": "32077828", "PostTypeId": "2", "Body": "<p>Just to add clarity, the <code>for</code> loop construct</p>\n<pre><code>for (i = 0; *(str+i); i++)\n</code></pre>\n<p>can be re-written as</p>\n<pre><code> for (i = 0; str[i]; i++)  //pointer arithmetic\n</code></pre>\n<p>which can  be re-written as</p>\n<pre><code> for (i = 0; (str[i] != 0); i++)  //condition checking\n</code></pre>\n<p>so, essentially, the <code>*(str+i)</code> <strong>is</strong> a condition checking statement <em>(similar to the most-widely used condition checking statements involving <code>&lt;</code> / <code>&gt;</code> operators)</em>, which is perfectly <strong>valid and legal</strong>.</p>\n<p>The purpose it serves is, looping until the <code>i</code>th element is not null. </p>\n<p>A <code>null</code> has a decimal value of 0, FWIW.</p>\n", "LastEditorUserId": "2173917", "LastActivityDate": "2015-08-18T16:42:25.337", "Score": "1", "CreationDate": "2015-08-18T16:28:30.270", "ParentId": "32077611", "CommentCount": "0", "OwnerUserId": "2173917", "LastEditDate": "2015-08-18T16:42:25.337"}, "bq_ids": {"n4140": {"so_32077611_32077759_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 5986}}, "n3337": {"so_32077611_32077759_0": {"length": 29, "quality": 0.8529411764705882, "section_id": 5754}}, "n4659": {"so_32077611_32077759_0": {"length": 28, "quality": 0.8235294117647058, "section_id": 7486}}}, "32077839": {"Id": "32077839", "PostTypeId": "2", "Body": "<p>In its most generic form, the <code>for</code> loop contains the following elements:</p>\n<pre><code>for ( init-statement; condition-statement; iter-statement ) statement \n</code></pre>\n<p>What goes in each of those elements is very open. In your case, the <em>condition-statement</em> is just <code>*(str+i)</code>. If it evaluates to a non-zero value, the <em>statement</em> part of the loop will be exeucted. If it evaluates to a zero value, the loop will be terminated.</p>\n<p>When you want to execute <em>statement</em> a given number of times, you can use:</p>\n<pre><code>for ( i = 0; i &lt; count; ++i ) { ... }\n</code></pre>\n<p>Assuming <code>str</code> in your code points to null terminated string, you are executing <em>statement</em> for all the characters in <code>str</code>. Your <code>for</code> loop is equivalent to:</p>\n<pre><code>for (i = 0; str[i] != '\\0';  i++)\n</code></pre>\n", "LastActivityDate": "2015-08-18T16:29:01.077", "CommentCount": "0", "CreationDate": "2015-08-18T16:29:01.077", "ParentId": "32077611", "Score": "2", "OwnerUserId": "434551"}, "32077759": {"Id": "32077759", "PostTypeId": "2", "Body": "<p>Such loops usually used for arrays that have a sentinel value that can be converted to a bool value. For example for strings. (Strings are terminated by zero character)</p>\n<p>For example this loop calculates length of string literal \"Hello\"</p>\n<pre><code>const char *str = \"Hello\";\n\nsize_t i = 0;\nfor ( ; *( str + i );  i++ )\n{\n    /* empty body of the loop */\n}\n\nstd::cout &lt;&lt; \"The length of string literal \" &lt;&lt; str \n          &lt;&lt; \" is equal to \" &lt;&lt; i &lt;&lt; std::endl;\n</code></pre>\n<p>Or in C you can use <code>printf</code></p>\n<pre><code>printf( \"The length of string literal %s is equal to %zu\\n\", str, i ); \n</code></pre>\n<p>Expression <code>*( str + i )</code> is equivalent to <code>str[i]</code></p>\n<p>In the for loop this expression used like the condition is equivalent to</p>\n<pre><code>*( str + i ) != 0\n</code></pre>\n<p>That is it is just converted to type <code>bool</code></p>\n<pre><code>( bool ) *( str + i )\n</code></pre>\n<p>So if the expression is equal to 0 then it yields <code>false</code> otherwise <code>true</code>.</p>\n<p>Another example. If you want to output program parameters then you can write the following way</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main( int argc, char *argv[] )\n{\n    while ( *argv ) std::cout &lt;&lt; *argv++ &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Ot in C</p>\n<pre><code>while ( *argv ) puts( *argv++ );\n</code></pre>\n<p>Because the last element of the array with program parameters argv[] is always equal to NULL.</p>\n<p>The while loop in the program is equivalen to the following for loop</p>\n<pre><code>for ( int i = 0; *( argv + i ); i++ )\n</code></pre>\n<p>Or</p>\n<pre><code>for ( int i = 0; argv[i]; i++ )\n</code></pre>\n<p>From the C++ Standard (5.2.1 Subscripting)</p>\n<blockquote>\n<p id=\"so_32077611_32077759_0\">1 A postfix expression followed by an expression in square brackets is\n  a postfix expression. One of the expressions shall have the type\n  \u201carray of T\u201d or \u201cpointer to T\u201d and the other shall have unscoped\n  enumeration or integral type. The result is of type \u201cT.\u201d The type \u201cT\u201d\n  shall be a completely-defined object type.65 <strong>The expression E1[E2]\n  is identical (by definition) to *((E1)+(E2))</strong></p>\n</blockquote>\n<p>The same is valid in C.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-08-18T17:20:54.623", "Score": "5", "CreationDate": "2015-08-18T16:24:33.330", "ParentId": "32077611", "CommentCount": "3", "OwnerUserId": "2877241", "LastEditDate": "2015-08-18T17:20:54.623"}, "32077770": {"Id": "32077770", "PostTypeId": "2", "Body": "<p>The second statement in the loop checks for a condition to be true.  If the condition is true, the loop continues; if it is false, the loop is terminated.  Additionally, C considers <code>0</code> to be <code>false</code> and anything non-zero to be <code>true</code>.  So, <code>*(str+i)</code> evaluates to <code>true</code> if it is non-zero and <code>false</code> if it is zero.  Since each string in C is a character array that is terminated by <code>\\0</code> (or zero which evaluates to <code>false</code>), looking at the string terminating character evaluates to <code>false</code> and hence, the statement is legal and valid.</p>\n<p>For more on why it happens like this in C, it is a side effect of loading something in the accumulator of the Arithmetic Logic Unit (ALU) which results in setting of some flags (such as whether ACC is zero).</p>\n", "LastActivityDate": "2015-08-18T16:25:42.997", "CommentCount": "0", "CreationDate": "2015-08-18T16:25:42.997", "ParentId": "32077611", "Score": "1", "OwnerUserId": "1202400"}});