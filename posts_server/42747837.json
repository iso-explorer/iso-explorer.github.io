post_cb({"bq_ids": {"n4140": {"so_42747837_42750838_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 7040}, "so_42747837_42747837_0": {"length": 30, "quality": 0.9375, "section_id": 7040}, "so_42747837_42750838_1": {"length": 14, "quality": 1.0, "section_id": 7040}}, "n4659": {"so_42747837_42750838_1": {"length": 14, "quality": 1.0, "section_id": 8537}, "so_42747837_42747837_0": {"length": 30, "quality": 0.9375, "section_id": 8537}, "so_42747837_42750838_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 8537}}}, "42750838": {"Id": "42750838", "PostTypeId": "2", "LastEditDate": "2017-04-04T16:40:38.847", "CommentCount": "6", "LastEditorUserId": "2069064", "LastActivityDate": "2017-04-04T16:40:38.847", "CreationDate": "2017-03-12T17:38:41.950", "ParentId": "42747837", "Score": "1", "Body": "<p>There are two requirements in the text that both have to be fulfilled in order for a variable <code>x</code> to <em>not</em> be odr-used. Those requirements are:</p>\n<ol>\n<li><blockquote>\n<p id=\"so_42747837_42750838_0\">applying the lvalue-to-rvalue conversion (4.1) to <code>x</code> yields a constant expression (5.20) that does not invoke any non-trivial functions</p>\n</blockquote></li>\n</ol>\n<p>And</p>\n<ol start=\"2\">\n<li><blockquote>\n<p id=\"so_42747837_42750838_1\">if <code>x</code> is an object, <code>ex</code> is an element of the set of potential results of an expression <code>e</code>, where either the lvalue-to-rvalue conversion (4.1) is applied to <code>e</code>, or <code>e</code> is a discarded-value expression (Clause 5)</p>\n</blockquote></li>\n</ol>\n<p>The wording is awkward, but the second point is a logical condition: <code>P --&gt; Q</code>. Logical conditionals are only false if both <code>P</code> is <code>true</code> and <code>Q</code> is<code>false</code>. If <code>P</code> is <code>false</code>, the conditional is still <code>true</code>. In this case, the \"if <code>x</code> is an object\" premise is <code>false</code> if <code>x</code> is a reference. In that case, the whole requirement evaluates as true. </p>\n<p>In other words, if <code>x</code> is a reference, it is odr-used unless applying the lvalue-to-rvalue conversion (4.1) to <code>x</code> yields a constant expression (5.20) that does not invoke any non-trivial functions. That's it. Even if <code>ex</code> were a discard-value expression, <code>x</code> would still be odr-used if it were a reference. </p>\n", "OwnerUserId": "2069064"}, "42747837": {"ViewCount": "87", "Body": "<p><a href=\"http://eel.is/c++draft/basic.def.odr#3\" rel=\"nofollow noreferrer\">[basic.def.odr]/3</a>:</p>\n<blockquote>\n<p id=\"so_42747837_42747837_0\">A variable x whose name appears as a potentially-evaluated expression\n  ex is odr-used by ex unless applying the lvalue-to-rvalue conversion\n  (4.1) to x yields a constant expression (5.20) that does not invoke\n  any non-trivial functions and, <strong>if x is an object</strong>, ex is an element\n  of the set of potential results of an expression e, where either the\n  lvalue-to-rvalue conversion (4.1) is applied to e, or e is a\n  discarded-value expression (Clause 5). <code>...</code></p>\n</blockquote>\n<p>Why is the additional condition \"if x is an object\" included in the text above?</p>\n", "Title": "What is the purpose of the phrase `if x is an object` in [basic.def.odr]/3?", "CreationDate": "2017-03-12T13:12:53.687", "LastActivityDate": "2017-04-04T16:40:38.847", "CommentCount": "2", "PostTypeId": "1", "Id": "42747837", "Score": "1", "OwnerUserId": "4463557", "Tags": "<c++><language-lawyer><c++1z><one-definition-rule>", "AnswerCount": "2"}, "42747881": {"Id": "42747881", "PostTypeId": "2", "Body": "<p><code>x</code> is a variable. But variables don't have to be objects. They can also be references. References are references to objects but the reference itself is <em>not</em> an object (unlike pointers which are objects as well as potentially point to an object).</p>\n<p>So the statement there is making the distinction between variables that declare objects and variables that declare references to an object.</p>\n", "Score": "2", "LastActivityDate": "2017-03-12T13:16:46.173", "CreationDate": "2017-03-12T13:16:46.173", "ParentId": "42747837", "CommentCount": "1", "OwnerUserId": "734069"}});