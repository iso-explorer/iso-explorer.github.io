post_cb({"18767829": {"ViewCount": "556", "Body": "<p>following <a href=\"https://stackoverflow.com/questions/18749844/can-i-do-this-binary-search-using-the-stl/18750376\">this</a> question , I tried to copy paste the example found <a href=\"http://en.cppreference.com/w/cpp/algorithm/equal_range\" rel=\"nofollow noreferrer\">here</a> in VS2010 :</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nstruct S\n{\n    int number;\n    char name;\n\n    S ( int number, char name  )\n        : number ( number ), name ( name )\n    {}\n\n    // only the number is relevant with this comparison\n    bool operator&lt; ( const S&amp; s ) const\n    {\n        return number &lt; s.number;\n    }\n};\n\nstruct Comp\n{\n    bool operator() ( const S&amp; s, int i )\n    {\n        return s.number &lt; i;\n    }\n\n    bool operator() ( int i, const S&amp; s )\n    {\n        return i &lt; s.number;\n    }\n};\n\nint main()\n{\n    std::vector&lt;S&gt; vec = { {1,'A'}, {2,'B'}, {2,'C'}, {2,'D'}, {3,'F'}, {4,'G'} }; //this syntax won't compile in VS2010, so you can leave an empty vector here\n\n    auto p = std::equal_range(vec.begin(),vec.end(),2,Comp());\n\n    for ( auto i = p.first; i != p.second; ++i )\n        std::cout &lt;&lt; i-&gt;name &lt;&lt; ' ';\n}\n</code></pre>\n<p>This will compile fine in release mode, but in debug mode, it will fail to compile.\nThe reason is that in debug mode, the implementation will check if the iterator range is already sorted, using the given predicate:</p>\n<pre><code>template&lt;class _FwdIt,\n    class _Pr&gt; inline\n    void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,\n        _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)\n    {   // test if range is ordered by predicate, forward iterators\n    for (_FwdIt _Next = _First; _First != _Last &amp;&amp; ++_Next != _Last; ++_First)\n        if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))\n            _DEBUG_ERROR2(\"sequence not ordered\", _File, _Line);\n    }\n</code></pre>\n<p>this ends up calling :</p>\n<pre><code>template&lt;class _Pr, class _Ty1, class _Ty2&gt; inline\n    bool _Debug_lt_pred(_Pr _Pred,\n        const _Ty1&amp; _Left, const _Ty2&amp; _Right,\n        _Dbfile_t _File, _Dbline_t _Line)\n    {   // test if _Pred(_Left, _Right) and _Pred is strict weak ordering\n    if (!_Pred(_Left, _Right))\n        return (false);\n    else if (_Pred(_Right, _Left))\n        _DEBUG_ERROR2(\"invalid operator&lt;\", _File, _Line);\n    return (true);\n    }\n</code></pre>\n<p>Except that in my case, no <code>operator()</code> can take both left and right \"S\" argument.\nSo, is there a bug in the Visual implementation? Or is the original example not supposed to be portable?\nI think I could make it work by providing a 3rd operator() overload, but it seems like it should work without</p>\n<p>thanks</p>\n", "AcceptedAnswerId": "18767996", "Title": "is this C++ example portable?", "CreationDate": "2013-09-12T15:01:30.537", "Id": "18767829", "CommentCount": "1", "LastEditDate": "2017-05-23T12:16:59.327", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-09-12T16:58:47.530", "Score": "8", "OwnerUserId": "875295", "Tags": "<c++><visual-studio-2010><stl>", "AnswerCount": "5"}, "18769749": {"Id": "18769749", "PostTypeId": "2", "Body": "<p>Angew has already quoted the standard and pointed out that VS is buggy. I merely want to emphasize that <strong>VS2010 has two bugs</strong> here (under debug mode):</p>\n<ol>\n<li><p>It tries to use <code>Compare::operator(_Ty1, _Ty2)</code> which is not required to exist by the standard. This <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/769370/iterator-debug-version-of-std-equal-range-improperly-handles-predicate\" rel=\"nofollow\">known bug</a> has been highlighted by Angew and pointed to by Ben's comment.</p></li>\n<li><p>It tests whether the input range is sorted, which is not required by the standard either.\nThis is a far more serious bug, as it reduces the usability of <code>equal_range</code> and in the worst case requires a full sort of the range, even if that was not necessary algorithmicly. Perhaps somebody can file a bug report to MS?</p></li>\n</ol>\n<p>Note that the first bug is merely a consequence (in the implementation of <code>equal_range</code>) of the second bug. Presumably, for most applications the input range is already sorted, partly because the user <strong>sorted it unnecessarily</strong> (demonstrating that bugs in MS's library results in bad user code), and simply providing an additional comparison operator fixes the problem (as for the OPs' question).</p>\n", "LastEditorUserId": "1023390", "LastActivityDate": "2013-09-12T16:58:47.530", "Score": "2", "CreationDate": "2013-09-12T16:35:04.783", "ParentId": "18767829", "CommentCount": "0", "OwnerUserId": "1023390", "LastEditDate": "2013-09-12T16:58:47.530"}, "18768299": {"Id": "18768299", "PostTypeId": "2", "Body": "<p>[lib.equal.range] tells :</p>\n<blockquote>\n<p id=\"so_18767829_18768299_0\">Requires: Type T is LessThanComparable (20.1.2).</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_18767829_18768299_1\">Effects: Finds the largest subrange [i, j) such that the value can be\n  inserted at any iterator k in it without violating the ordering. k\n  satisfies the corresponding conditions: !(*k &lt; value) &amp;&amp; !(value &lt; *k)\n  or comp(*k, value) == false &amp;&amp; comp(value, *k) == false.</p>\n</blockquote>\n<p>Your code satisfies both conditions and should compile fine, meaning it is a bug in visual studio.</p>\n", "LastActivityDate": "2013-09-12T15:23:23.507", "CommentCount": "0", "CreationDate": "2013-09-12T15:23:23.507", "ParentId": "18767829", "Score": "1", "OwnerUserId": "476681"}, "18767996": {"Id": "18767996", "PostTypeId": "2", "Body": "<p>Nothing in the standard requires the comparator to be callable with two objects from the range. So that is a bug in the standard library used by VS 2010.</p>\n<p>Here are all the relevant requirements (quoting C++11):</p>\n<p>[lower.bound]\u00a71+2:</p>\n<blockquote>\n<p id=\"so_18767829_18767996_0\">1 <em>Requires:</em> The elements <code>e</code> of <code>[first,last)</code> shall be partitioned with respect to the expression ...  <code>comp(e, value)</code>.</p>\n<p id=\"so_18767829_18767996_1\">2 <em>Returns:</em> The furthermost iterator <code>i</code> in the range <code>[first,last]</code> such that for any iterator <code>j</code> in the range <code>[first,i)</code> the following corresponding conditions hold: ... <code>comp(*j, value) != false</code>.</p>\n</blockquote>\n<p>[upper.bound]\u00a71+2:</p>\n<blockquote>\n<p id=\"so_18767829_18767996_2\">1 <em>Requires:</em> The elements <code>e</code> of <code>[first,last)</code> shall be partitioned with respect to the expression ... <code>!comp(value, e)</code>.</p>\n<p id=\"so_18767829_18767996_3\">2 <em>Returns:</em> The furthermost iterator <code>i</code> in the range <code>[first,last]</code> such that for any iterator <code>j</code> in the range <code>[first,i)</code> the following corresponding conditions hold: ... <code>comp(value, *j) == false</code>.</p>\n</blockquote>\n<p>[equal.range]\u00a71+2:</p>\n<blockquote>\n<p id=\"so_18767829_18767996_4\">1 <em>Requires:</em> The elements <code>e</code> of <code>[first,last)</code> shall be partitioned with respect to the expressions ... <code>comp(e, value)</code> and <code>!comp(value, e)</code>. Also, for all elements <code>e</code> of <code>[first, last)</code>, ... <code>comp(e, value)</code> shall imply <code>!comp(value, e)</code>.</p>\n<p id=\"so_18767829_18767996_5\">2 <em>Returns:</em></p>\n<p id=\"so_18767829_18767996_6\">...</p>\n<pre><code>make_pair(lower_bound(first, last, value, comp),\n          upper_bound(first, last, value, comp))\n</code></pre>\n</blockquote>\n<p>(The ellipses are for the non-comparator version).</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2013-09-12T15:27:45.467", "Score": "12", "CreationDate": "2013-09-12T15:08:30.377", "ParentId": "18767829", "CommentCount": "5", "OwnerUserId": "1782465", "LastEditDate": "2013-09-12T15:27:45.467"}, "bq_ids": {"n4140": {"so_18767829_18767996_3": {"length": 12, "quality": 0.75, "section_id": 1426}, "so_18767829_18767996_4": {"length": 16, "quality": 0.8421052631578947, "section_id": 1428}, "so_18767829_18767996_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 1423}, "so_18767829_18767996_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 1422}}, "n3337": {"so_18767829_18767996_3": {"length": 12, "quality": 0.75, "section_id": 1420}, "so_18767829_18767996_4": {"length": 16, "quality": 0.8421052631578947, "section_id": 1422}, "so_18767829_18767996_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 1417}, "so_18767829_18767996_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 1416}}, "n4659": {"so_18767829_18767996_3": {"length": 12, "quality": 0.75, "section_id": 1546}, "so_18767829_18767996_4": {"length": 16, "quality": 0.8421052631578947, "section_id": 1548}, "so_18767829_18767996_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 1543}, "so_18767829_18767996_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 1542}}}, "18768124": {"Id": "18768124", "PostTypeId": "2", "Body": "<p>For equal range to work correctly the range need to be sorted, I think the VS compiler is trying to say that your intention is wrong, maybe?</p>\n", "LastActivityDate": "2013-09-12T15:15:05.793", "CommentCount": "15", "CreationDate": "2013-09-12T15:15:05.793", "ParentId": "18767829", "Score": "-1", "OwnerUserId": "1937526"}, "18768484": {"Id": "18768484", "PostTypeId": "2", "Body": "<p>As a General Answer. Each compiler and standard library will have quirks and places that they do not implement the standard properly. Which means that unless the code is tested on a different platform, there is always a chance that minor changes will be required.</p>\n<p>On the plus side, if one uses an attempt to  keep to the standard, these changes should be very minor.</p>\n", "LastActivityDate": "2013-09-12T15:31:15.530", "CommentCount": "0", "CreationDate": "2013-09-12T15:31:15.530", "ParentId": "18767829", "Score": "1", "OwnerUserId": "232918"}});