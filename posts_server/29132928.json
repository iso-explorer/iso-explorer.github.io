post_cb({"29132928": {"CommentCount": "3", "ViewCount": "76", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-03-18T21:21:10.907", "LastActivityDate": "2015-03-19T13:17:09.653", "Title": "Swapping storage buffers containing placement new created objects", "AcceptedAnswerId": "29145646", "LastEditDate": "2015-03-19T13:04:08.333", "Id": "29132928", "Score": "3", "Body": "<p>I recently saw a piece of code which used storage buffers to create objects and then simply swapped the buffers in order to avoid the copying overhead. Here is a simple example using integers:</p>\n<pre><code>std::aligned_storage_t&lt;sizeof(int), alignof(int)&gt; storage1;\nstd::aligned_storage_t&lt;sizeof(int), alignof(int)&gt; storage2;\n\nnew (&amp;storage1) int(1);\nnew (&amp;storage2) int(2);\n\nstd::swap(storage1, storage2);\n\nint i1 = reinterpret_cast&lt;int&amp;&gt;(storage1);\nint i2 = reinterpret_cast&lt;int&amp;&gt;(storage2);\n\n//this prints 2 1\nstd::cout &lt;&lt; i1 &lt;&lt; \" \" &lt;&lt; i2 &lt;&lt; std::endl;\n</code></pre>\n<p>This feels like undefined behaviour in the general case (specifically swapping the buffers and then accessing the objects as if they were still there) but I am not sure what the standard says about such usage of storage and placement new. Any feedback is much appreciated!</p>\n", "Tags": "<c++><c++11><language-lawyer><undefined-behavior>", "OwnerUserId": "3024983", "AnswerCount": "1"}, "29145646": {"ParentId": "29132928", "CommentCount": "2", "Body": "<p>I suspect there are a few factors rendering this undefined, but we only need one:</p>\n<blockquote>\n<p id=\"so_29132928_29145646_0\"><code>[C++11: 3.8/1]:</code> <em>[..]</em> <strong>The lifetime of an object of type <code>T</code> ends when</strong>:</p>\n<ul>\n<li>if <code>T</code> is a class type with a non-trivial destructor (12.4), the destructor call starts, or</li>\n<li><strong>the storage which the object occupies is reused</strong> or released.</li>\n</ul>\n</blockquote>\n<p>All subsequent use is use after end-of-life, which is bad and wrong.</p>\n<p>The key is that each buffer is being reused.</p>\n<p><strong>So, although I would expect this to work in practice at least for trivial types (and for some classes), it's undefined.</strong></p>\n<hr>\n<p>The following may have been able to save you:</p>\n<blockquote>\n<p id=\"so_29132928_29145646_1\"><code>[C++11: 3.8/7]:</code> If, after the lifetime of an object has ended and before the storage which the object occupied is reused or released, a new object is created at the storage location which the original object occupied, a pointer that  pointed to the original object, a reference that referred to the original object, or the name of the original object will automatically refer to the new object and, once the lifetime of the new object has started, can be used to manipulate the new object <em>[..]</em></p>\n</blockquote>\n<p>\u2026except that you are not creating a new object.</p>\n<p>It may or may not be worth noting here that, surprisingly, the ensuing implicit destructor calls are both well-defined:</p>\n<blockquote>\n<p id=\"so_29132928_29145646_2\"><code>[C++11: 3.8/8]:</code> If a program ends the lifetime of an object of type <code>T</code> with static (3.7.1), thread (3.7.2), or automatic (3.7.3) storage duration and if <code>T</code> has a non-trivial destructor, the program must ensure that an object of the original type occupies that same storage location when the implicit destructor call takes place; otherwise the behavior of the program is undefined.</p>\n</blockquote>\n</hr>", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "29145646", "Score": "1", "CreationDate": "2015-03-19T13:17:09.653", "LastActivityDate": "2015-03-19T13:17:09.653"}, "bq_ids": {"n4140": {"so_29132928_29145646_1": {"section_id": 7195, "quality": 0.9555555555555556, "length": 43}, "so_29132928_29145646_2": {"section_id": 7196, "quality": 0.8529411764705882, "length": 29}, "so_29132928_29145646_0": {"section_id": 7189, "quality": 0.625, "length": 5}}, "n3337": {"so_29132928_29145646_1": {"section_id": 6939, "quality": 0.9555555555555556, "length": 43}, "so_29132928_29145646_2": {"section_id": 6940, "quality": 0.8529411764705882, "length": 29}, "so_29132928_29145646_0": {"section_id": 6933, "quality": 0.625, "length": 5}}, "n4659": {"so_29132928_29145646_1": {"section_id": 8704, "quality": 0.9555555555555556, "length": 43}, "so_29132928_29145646_2": {"section_id": 8705, "quality": 0.8529411764705882, "length": 29}, "so_29132928_29145646_0": {"section_id": 8697, "quality": 0.625, "length": 5}}}});