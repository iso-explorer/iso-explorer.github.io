post_cb({"20212068": {"ParentId": "20211935", "CommentCount": "8", "CreationDate": "2013-11-26T08:41:54.917", "OwnerUserId": "435800", "PostTypeId": "2", "Id": "20212068", "Score": "7", "Body": "<p>If I haven't misunderstood you - no, nothing in the standard library is thread safe (except the <code>std::thread</code> specific things, of course (from C++11 and later)). You need additional synchronization. </p>\n<p>Even more - if there are several processes, reading from/writing to these files, you need to lock the files, to sync the access.</p>\n", "LastActivityDate": "2013-11-26T08:41:54.917"}, "40371965": {"ParentId": "20211935", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-11-02T03:21:41.993", "Score": "0", "LastEditorUserId": "523503", "LastEditDate": "2016-11-03T02:32:39.913", "Id": "40371965", "OwnerUserId": "523503", "Body": "<p>Yes. It is.</p>\n<p>For Windows:\nit is safe to write to fstream from multiple threads on windows. Please see the msdn document: <a href=\"https://msdn.microsoft.com/en-us/library/c9ceah3b.aspx\" rel=\"nofollow noreferrer\">Thread Safety in the C++ Standard Library</a></p>\n<p>For Linux:\nIn short, it is. From the <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_concurrency.html\" rel=\"nofollow noreferrer\">document of libstdc++</a>: \"if your platform's C library is threadsafe, then your fstream I/O operations will be threadsafe at the lowest level\". Is your platform's C library threadsafe? Yes. The POSIX standard requires that C stdio FILE* operations(such as fread/fwrite) are atomic, and glibc did so.</p>\n", "LastActivityDate": "2016-11-03T02:32:39.913"}, "20212155": {"ParentId": "20211935", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-11-26T08:46:31.853", "Score": "6", "LastEditorUserId": "1468366", "LastEditDate": "2014-02-25T07:48:41.797", "Id": "20212155", "OwnerUserId": "1570711", "Body": "<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2760.htm\" rel=\"nofollow\">C++ standards</a> (Input/Output Library Thread Safety):</p>\n<blockquote>\n<p id=\"so_20211935_20212155_0\">27.1.3 Thread safety [iostreams.thread-safety]</p>\n<p id=\"so_20211935_20212155_1\">Concurrent access to a stream object [string.streams, file.streams], stream buffer object\n  [stream.buffers], or C Library stream [c.files] by multiple threads may result in a data \n  race [intro.multithread] unless otherwise specified [iostream.objects]. [Note: Data races \n  result in undefined behavior [intro.multithread]. </p>\n</blockquote>\n", "LastActivityDate": "2014-02-25T07:48:41.797"}, "bq_ids": {"n4140": {"so_20211935_20212155_1": {"section_id": 1907, "quality": 0.7333333333333333, "length": 22}}, "n3337": {"so_20211935_20212155_1": {"section_id": 1896, "quality": 0.7333333333333333, "length": 22}}, "n4659": {"so_20211935_20212155_1": {"section_id": 2177, "quality": 0.7333333333333333, "length": 22}}}, "20211935": {"CommentCount": "3", "ViewCount": "7402", "PostTypeId": "1", "LastEditorUserId": "435800", "CreationDate": "2013-11-26T08:33:11.807", "LastActivityDate": "2016-11-03T02:32:39.913", "Title": "Is ofstream thread safe?", "AcceptedAnswerId": "20212155", "LastEditDate": "2016-09-08T06:03:21.053", "Id": "20211935", "Score": "3", "Body": "<p>I am working on a program, which uses multiple <code>std::ifstream</code>s for reading a binary file, one <code>std::ifstream</code> for each thread. Now I need to know, if <code>std::ofstream</code> is thread-safe on Windows and Linux for writing in a same file. I am using using only one <code>std::ofstream</code> and using for multiple threads.<br>\nI am reading different blocks using using each thread and writing those block in output file using <code>seekp()</code> and <code>write()</code>. Currently it is working for me but whether it is problematic for big files. </br></p>\n<p>Is <code>std::ofstream</code> thread safe?</p>\n", "Tags": "<c++><multithreading>", "OwnerUserId": "3020368", "AnswerCount": "3"}});