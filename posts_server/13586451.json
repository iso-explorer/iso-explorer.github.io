post_cb({"13586451": {"CommentCount": "0", "AcceptedAnswerId": "13586487", "PostTypeId": "1", "LastEditorUserId": "367273", "CreationDate": "2012-11-27T14:31:39.867", "LastActivityDate": "2012-11-27T17:46:10.663", "LastEditDate": "2012-11-27T16:04:58.363", "ViewCount": "2399", "FavoriteCount": "2", "Title": "When is a function registered with atexit() called", "Id": "13586451", "Score": "11", "Body": "<p>I want to know if functions registered with <code>atexit()</code> are called before or after global variables are destroyed. Is this specified by the standard or implementation defined?</p>\n", "Tags": "<c++><destructor><atexit>", "OwnerUserId": "336578", "AnswerCount": "1"}, "13586487": {"ParentId": "13586451", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It is well-defined, and depends on whether the object in question was constructed before or after the function got registered using <code>atexit()</code>:</p>\n<blockquote>\n<p id=\"so_13586451_13586487_0\"><strong>3.6.3 Termination</strong></p>\n<p id=\"so_13586451_13586487_1\"><strong>3.</strong> If the completion of the initialization of an object with static storage duration is sequenced before a call to <code>std::atexit</code> (see <code>&lt;cstdlib&gt;</code>, 18.5), the call to the function passed to <code>std::atexit</code> is sequenced before the call to the destructor for the object. If a call to <code>std::atexit</code> is sequenced before the completion of the initialization of an object with static storage duration, the call to the destructor for the object is sequenced before the call to the function passed to <code>std::atexit</code>. If a call to <code>std::atexit</code> is sequenced before another call to <code>std::atexit</code>, the call to the function passed to the second <code>std::atexit</code> call is sequenced before the call to the function passed to the \ufb01rst <code>std::atexit</code> call.</p>\n</blockquote>\n<p>My layman's interpretation of the above is that stuff that got constructed <em>before</em> you called <code>atexit(handler)</code> gets destroyed <em>after</em> <code>handler()</code> is called, and vice versa. I am sure there are subtleties, but this seems to be the basic principle.</p>\n", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2012-11-27T17:46:10.663", "Id": "13586487", "Score": "20", "CreationDate": "2012-11-27T14:33:46.693", "LastActivityDate": "2012-11-27T17:46:10.663"}, "bq_ids": {"n4140": {"so_13586451_13586487_1": {"section_id": 7158, "quality": 0.9354838709677419, "length": 58}}, "n3337": {"so_13586451_13586487_1": {"section_id": 6902, "quality": 0.9354838709677419, "length": 58}}, "n4659": {"so_13586451_13586487_1": {"section_id": 8665, "quality": 0.8870967741935484, "length": 55}}}});