post_cb({"3090268": {"CommentCount": "1", "ViewCount": "421", "LastActivityDate": "2010-06-22T04:41:28.810", "Body": "<p>When array is created using 'new' and deleted using 'delete' operator, delete knows the size of array. As mentioned in other SO threads, this size information is stored in metadata.</p>\n<p>My question: what exactly is stored in metadata and how much space is needed for that? Is it only the size which is stored in metadata? </p>\n", "PostTypeId": "1", "AcceptedAnswerId": "3090308", "FavoriteCount": "2", "Title": "how much memory is required for metadata when using new int[10]?", "Id": "3090268", "Score": "3", "CreationDate": "2010-06-22T04:28:59.930", "Tags": "<c++>", "OwnerUserId": "189618", "AnswerCount": "4"}, "3090305": {"ParentId": "3090268", "CommentCount": "0", "Body": "<p>It is implementation-defined. I would say there is at least four bytes for the length, but there could also be \"next\" and \"previous\" pointers to adjacent blocks. There could also be a \"magic\" number that the runtime uses to make sure you haven't accidentally overwritten their section of the memory and so on.</p>\n<p>But you shouldn't ever need to worry about that. In fact, for a small array like your <code>int[10]</code> (which is 40 bytes) you might find that the largest amount of space is actually taking up by padding (for example, there could be 24 bytes of padding added to make the allocation a multiple of 32 - which could be done for performance reasons, say.</p>\n<p>At the end of the day, though, as I said it's completely up to the implementation to decide how they do it.</p>\n", "OwnerUserId": "241462", "PostTypeId": "2", "Id": "3090305", "Score": "4", "CreationDate": "2010-06-22T04:38:57.873", "LastActivityDate": "2010-06-22T04:38:57.873"}, "3090322": {"ParentId": "3090268", "CommentCount": "3", "Body": "<p>That's going to depend on your standard library. Even malloc() needs data to know how many bytes were allocated. For an example, look at the glibc malloc:</p>\n<p><a href=\"http://sourceware.org/git/?p=glibc.git;a=blob_plain;f=malloc/malloc.c;hb=HEAD\" rel=\"nofollow noreferrer\">http://sourceware.org/git/?p=glibc.git;a=blob_plain;f=malloc/malloc.c;hb=HEAD</a></p>\n<blockquote>\n<p id=\"so_3090268_3090322_0\">Minimum overhead per allocated chunk:   4 or 8 bytes</p>\n<pre><code>  Each malloced chunk has a hidden word of overhead holding size\n  and status information.\n</code></pre>\n</blockquote>\n", "OwnerUserId": "224508", "PostTypeId": "2", "Id": "3090322", "Score": "0", "CreationDate": "2010-06-22T04:41:28.810", "LastActivityDate": "2010-06-22T04:41:28.810"}, "3090303": {"ParentId": "3090268", "CommentCount": "0", "Body": "<p>This kind of question is very compiler and plataform specific. Each compiler implements this in a different manner. The standard says <em>what</em> should be implemented, not exactly how shoult it be implemented.</p>\n<p>Of course, this metadata must contain the array size, or some other information that allow us to infer it. Otherwise, we wouldn't be capable of calling the destructor for all the objects in the array.</p>\n", "OwnerUserId": "252408", "PostTypeId": "2", "Id": "3090303", "Score": "0", "CreationDate": "2010-06-22T04:38:44.497", "LastActivityDate": "2010-06-22T04:38:44.497"}, "3090308": {"ParentId": "3090268", "CommentCount": "1", "Body": "<p>According to C++ Standard 5.3.4/12: </p>\n<blockquote>\n<pre><code>new T[5] results in a call of operator new[](sizeof(T)*5+x), \n</code></pre>\n<p id=\"so_3090268_3090308_0\">&lt;...&gt;where x is a non-negative unspecified values representing array allocation overhead. &lt;...&gt; The amount\n  of overhead may vary from one invocation of new to another.</p>\n</blockquote>\n", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "3090308", "Score": "8", "CreationDate": "2010-06-22T04:39:13.900", "LastActivityDate": "2010-06-22T04:39:13.900"}, "bq_ids": {"n4140": {"so_3090268_3090308_0": {"section_id": 6095, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_3090268_3090308_0": {"section_id": 5861, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_3090268_3090308_0": {"section_id": 7592, "quality": 0.8235294117647058, "length": 14}}}});