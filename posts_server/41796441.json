post_cb({"41796675": {"ParentId": "41796441", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_41796441_41796675_0\">Is there some space in the C++11 spec to allow for both implementations to be valid?</p>\n</blockquote>\n<p>With one exception the only answer to that is no.</p>\n<p>The exception is for global variables, where you can use the scoping operator <code>::</code> to reach them. Otherwise, if you <em>shadow</em> the name of a variable in an outer scope, you no longer have access to it.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "41796675", "Score": "0", "CreationDate": "2017-01-22T22:06:57.983", "LastActivityDate": "2017-01-22T22:06:57.983"}, "41796523": {"ParentId": "41796441", "CommentCount": "3", "Body": "<p>N4606 (C++17 draft) 3.3.3 basic.scope.block, section 4 says</p>\n<blockquote>\n<p id=\"so_41796441_41796523_0\">Names declared in the\n  init-statement\n  , the\n  for-range-declaration\n  , and in the\n  condition\n  of\n  if\n  ,\n  while\n  ,\n  for\n  , and\n  switch\n  statements are local to the\n  if\n  ,\n  while\n  ,\n  for\n  , or\n  switch\n  statement (including the controlled statement),\n  and shall not be redeclared in a subsequent condition of that statement nor in the outermost block (or, for\n  the\n  if\n  statement, any of the outermost blocks) of the controlled statement; see 6.4</p>\n</blockquote>\n<p>shortened:</p>\n<blockquote>\n<p id=\"so_41796441_41796523_1\">Names declared in the ... for-range-declaration ... are local to the ... for ... and shall not be redeclared in a subsequent condition of that statement nor in the outermost block</p>\n</blockquote>\n<p>I read this as saying it should not be allowed.</p>\n", "OwnerUserId": "272708", "PostTypeId": "2", "Id": "41796523", "Score": "5", "CreationDate": "2017-01-22T21:49:31.893", "LastActivityDate": "2017-01-22T21:49:31.893"}, "bq_ids": {"n4140": {"so_41796441_41796523_1": {"section_id": 7064, "quality": 1.0, "length": 11}, "so_41796441_41796523_0": {"section_id": 7064, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_41796441_41796523_1": {"section_id": 6808, "quality": 1.0, "length": 11}, "so_41796441_41796523_0": {"section_id": 6808, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_41796441_41796523_1": {"section_id": 8561, "quality": 1.0, "length": 11}, "so_41796441_41796523_0": {"section_id": 8561, "quality": 1.0, "length": 28}}}, "41796441": {"CommentCount": "2", "ViewCount": "330", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-01-22T21:39:00.590", "LastActivityDate": "2017-01-23T09:20:47.483", "Title": "C++11 redeclaration in range-based for loop", "AcceptedAnswerId": "41796523", "LastEditDate": "2017-05-23T12:33:29.990", "Id": "41796441", "Score": "4", "Body": "<p>This code compiles in Visual Studio 2015 update 3 (and here: <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow noreferrer\">visual C++ compiler online</a> , and does not in other compilers I have tried online (GCC and CLANG), giving a redeclaration error</p>\n<pre><code>vector&lt;int&gt; v = {1,2,3};\nfor (auto i : v) {\n  printf(\"%d \", i);\n  int i = 99;\n  printf(\"%d \", i);\n}\n</code></pre>\n<blockquote>\n<p id=\"so_41796441_41796441_0\">output: 1 99 2 99 3 99</p>\n</blockquote>\n<p>VS C++ online compiler (version: 19.10.24903.0) warns about this:</p>\n<blockquote>\n<p id=\"so_41796441_41796441_1\">warning C4456: declaration of 'i' hides previous local declaration</p>\n</blockquote>\n<p>Is there some space in the C++11 spec to allow for both implementations to be valid? </p>\n<p>Seems to me that VS2015 is creating a scope for the \"auto i\", and an inner scope for the loop body.</p>\n<p>Adding an extra scope, as a colleague suggested, compiles fine in the other compilers I have tested (not that I wanted this, it's just for curiosity):</p>\n<pre><code>vector&lt;int&gt; v = {1,2,3};\nfor (auto i : v) {{\n  printf(\"%d \", i);\n  int i = 99;\n  printf(\"%d \", i);\n}}\n</code></pre>\n<p>thanks</p>\n<p><strong>EDIT:</strong>\nOk, after reading this other question <a href=\"https://stackoverflow.com/questions/24526131/redeclaration-of-variable-in-range-based-for-loops\">Redeclaration of variable in range-based for loops</a> and the answer from \"Angew\", I believe that VS is actually correct.</p>\n<p>I am reading here: <a href=\"http://en.cppreference.com/w/cpp/language/range-for\" rel=\"nofollow noreferrer\">cpp reference</a></p>\n<p>Given this grammar description: </p>\n<pre><code>for ( range_declaration : range_expression ) loop_statement\n</code></pre>\n<p>and what this is equivalent to:</p>\n<pre><code>{\n auto &amp;&amp; __range = range_expression ; \n for (auto __begin = begin_expr, __end = end_expr; \n  __begin != __end; ++__begin) { \n    range_declaration = *__begin; \n    loop_statement\n } \n} \n</code></pre>\n<p>I understand that <strong>loop_statement</strong> is actually my entire block including the brackets, so the redefinition is indeed in an inner block, hence valid.</p>\n<p><strong>EDIT 2:</strong>\nMy last edit, for future reference, reading the traditional <strong>for loop</strong> grammar is a similar situation (<a href=\"http://en.cppreference.com/w/cpp/language/for\" rel=\"nofollow noreferrer\">cpp for loop</a>) as the range-based:</p>\n<pre><code>for ( init-statement condition(optional); iteration_expression(optional) ) statement\n</code></pre>\n<p>\"The above syntax produces code equivalent to:\"</p>\n<pre><code>{\n   init_statement \n   while ( condition ) { \n     statement \n     iteration_expression ; \n   }\n}\n</code></pre>\n<p>So looking back, I could also interpret/parse <strong>statement</strong> as my inner block, including the braces, for which I would at least expect a consistent behavior in which ever compiler I am. But ALL compilers will bail out with a redeclaration error for the traditional for-loop.</p>\n", "Tags": "<c++11><for-loop><visual-c++>", "OwnerUserId": "1452142", "AnswerCount": "2"}});