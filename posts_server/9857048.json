post_cb({"9857057": {"Id": "9857057", "PostTypeId": "2", "Body": "<p>Because the compiler you use does not error out on it, it doesn't mean other compilers won't. You know its not standard, after all...</p>\n", "LastActivityDate": "2012-03-25T00:57:01.750", "CommentCount": "0", "CreationDate": "2012-03-25T00:57:01.750", "ParentId": "9857048", "Score": "3", "OwnerUserId": "927034"}, "9857061": {"Id": "9857061", "PostTypeId": "2", "Body": "<p>Because every program should indicate to other programs whether or not it completed successfully, or if there was some sort of error, and you can't do that if your main doesn't return anything.</p>\n<p>Plus, the standard says that main should return an int.</p>\n", "LastActivityDate": "2012-03-25T00:57:27.297", "CommentCount": "0", "CreationDate": "2012-03-25T00:57:27.297", "ParentId": "9857048", "Score": "1", "OwnerUserId": "422674"}, "9857068": {"Id": "9857068", "PostTypeId": "2", "Body": "<p>It's nonstandard.  </p>\n<p>i.e. <strong>you're not writing \"C++\"</strong> (as it was conceived) when you write this. It might <em>look</em> like C++, but you're not following the rules, so you're not actually writing C++.</p>\n<p>Also its result is undefined in most cases.</p>\n<p>Unlike in other languages like C++ or C#, where \"bad\" behavior causes errors, C++ allows <strong>anything</strong> to happen when an erroneous construct is used. So you can't depend on the compiler doing the \"correct\" thing, because it may do so one time, but not another.</p>\n<p>In general, you want to avoid undefined behavior, so you shouldn't do this.</p>\n", "LastActivityDate": "2012-03-25T00:58:43.040", "CommentCount": "0", "CreationDate": "2012-03-25T00:58:43.040", "ParentId": "9857048", "Score": "0", "OwnerUserId": "541686"}, "bq_ids": {"n4140": {"so_9857048_9857066_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7146}}, "n3337": {"so_9857048_9857066_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 6890}, "so_9857048_9857066_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6890}}, "n4659": {"so_9857048_9857066_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 8647}}}, "9857048": {"ViewCount": "1180", "Body": "<blockquote>\n<p id=\"so_9857048_9857048_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/636829/difference-between-void-main-and-int-main\">Difference between void main and int main?</a> </br></p>\n</blockquote>\n<p>Why is </p>\n<pre><code>void main() {\n    //return void\n}\n</code></pre>\n<p>bad?</p>\n<p>The other day I typed this and someone pointed out to me that it is wrong to do so. I was so confused. I have been writing like this for a while now, I know it isn't C++ standard, but the compiler doesn't give out any warnings. Why is this wrong?</p>\n", "AcceptedAnswerId": "9857057", "Title": "Why is it bad to type void main() in C++", "CreationDate": "2012-03-25T00:55:17.780", "Id": "9857048", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:48:50.523", "LastEditorUserId": "-1", "LastActivityDate": "2012-03-25T01:03:33.533", "ClosedDate": "2012-03-25T01:05:59.507", "Score": "4", "OwnerUserId": "1266445", "Tags": "<c++><standards>", "AnswerCount": "5"}, "9857066": {"Id": "9857066", "PostTypeId": "2", "Body": "<p>It's wrong because the standard (at least C++03)  states that main should return an <code>int</code> (for hosted environments, that is - freestanding environments like embedded systems can pretty well do whatever they want). From <code>3.6.1 Main function, paragraph 2</code>:</p>\n<blockquote>\n<p id=\"so_9857048_9857066_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined.</p>\n<p id=\"so_9857048_9857066_1\">All implementations shall allow both of the following definitions of main: <code>int main() { /* ... */ }</code> and <code>int main(int argc, char* argv[]) { /* ... */ }</code>.</p>\n</blockquote>\n<p>If you value portability at all (and you should), you should writ code that conforms with the standard as much as practicable.</p>\n<p>Undefined behaviour like:</p>\n<pre><code>x = x++ + --x;\n</code></pre>\n<p>may work (for whatever definition of \"work\" you have) under some circumstances as well, that doesn't make it a good idea :-)</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2012-03-25T01:03:33.533", "Score": "1", "CreationDate": "2012-03-25T00:58:19.030", "ParentId": "9857048", "CommentCount": "0", "OwnerUserId": "14860", "LastEditDate": "2012-03-25T01:03:33.533"}, "9857063": {"Id": "9857063", "PostTypeId": "2", "Body": "<p>It is wrong exactly <em>because</em> it is not standard. One compiler might accept this, another might complain, and the pedantic believers will burn your ass on the stake anyways.</p>\n", "LastActivityDate": "2012-03-25T00:57:41.517", "CommentCount": "0", "CreationDate": "2012-03-25T00:57:41.517", "ParentId": "9857048", "Score": "1", "OwnerUserId": "500104"}});