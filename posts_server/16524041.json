post_cb({"16524270": {"ParentId": "16524041", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It means that you can access members via <code>this</code>, either explicitly or implicitly, outside function bodies within a class definition. At that point, the type is incomplete, and usually you can't access members of incomplete types.</p>\n<p>But you can only do that within restricted parts of a member function declaration; the previous sentence says about <code>this</code>:</p>\n<blockquote>\n<p id=\"so_16524041_16524270_0\">It shall not appear before the optional <em>cv-qualifier-seq</em></p>\n</blockquote>\n<p>meaning that you can't use it in a parameter or leading return type specification. As far as I can see, the only place you can use it, outside a function body, is in a trailing return type.</p>\n<p>You might need to do this when using <code>decltype</code> in a trailing return type, to get the type of an expression involving a non-static member. The example demonstrates this by implicitly using <code>this</code> to access <code>g()</code> in the trailing return type. It would have been more clear what was being demonstrated if it were written as <code>decltype(t + this-&gt;g())</code>.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2013-05-13T14:33:23.187", "Id": "16524270", "Score": "4", "CreationDate": "2013-05-13T14:16:03.770", "LastActivityDate": "2013-05-13T14:33:23.187"}, "16524224": {"ParentId": "16524041", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_16524041_16524224_0\">What exactly is this an example of? Which statement is being demonstrated here?</p>\n</blockquote>\n<p>The statement being demonstrated is that:</p>\n<blockquote>\n<p id=\"so_16524041_16524224_1\">Unlike the object expression in other contexts, *this is not required to be of complete type for purposes\n  of class member access (5.2.5) outside the member function body.</p>\n</blockquote>\n<p>Outside the body of the member function there is an invocation to <code>g()</code>, which means <code>this-&gt;g()</code>. There, the type of <code>*this</code> (i.e. <code>A</code>) is not complete.</p>\n<p>Per paragraph 9.2/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16524041_16524224_2\">A class is considered a completely-defined object type (3.9) (or complete type) at the closing <code>}</code> of the <em>class-specifier</em>.\n  Within the class <em>member-specification</em>, the class is regarded as complete within function bodies,\n  default arguments, and brace-or-equal-initializers for non-static data members (including such things in\n  nested classes). Otherwise it is regarded as incomplete within its own class <em>member-specification</em>.</p>\n</blockquote>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16524224", "Score": "6", "CreationDate": "2013-05-13T14:13:44.960", "LastActivityDate": "2013-05-13T14:13:44.960"}, "16524041": {"CommentCount": "2", "AcceptedAnswerId": "16524270", "PostTypeId": "1", "LastEditorUserId": "179910", "CreationDate": "2013-05-13T14:05:10.530", "LastActivityDate": "2013-05-13T14:33:23.187", "LastEditDate": "2013-05-13T14:18:07.923", "ViewCount": "353", "FavoriteCount": "1", "Title": "`*this` outside member function body?", "Id": "16524041", "Score": "10", "Body": "<p>In 5.1.1/3 of C++ standard [expr.prim.general]</p>\n<blockquote>\n<p id=\"so_16524041_16524041_0\">Unlike the object expression in other contexts, *this is not required to be of complete type for purposes\n  of class member access outside the member function body.  Only class members declared prior\n  to the declaration are visible.</p>\n</blockquote>\n<p>And then this example:</p>\n<pre><code>struct A {\n    char g();\n    template&lt;class T&gt; auto f(T t) -&gt; decltype(t + g()) \n    { return t + g(); }\n};\ntemplate auto A::f(int t) -&gt; decltype(t + g());\n</code></pre>\n<p>Can you explain the quote and the example? What exactly is being demonstrated here?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1131467", "AnswerCount": "3"}, "16524361": {"ParentId": "16524041", "CommentCount": "6", "Body": "<p>First of all, all member access expressions are transformed by the compiler:</p>\n<pre><code>struct X{\n  int a;\n  void f(){}\n  void g(int b){\n    int x = a + b; // actually: int x = (*this).a + b\n    f(); // actually: (*this).f();\n  }\n};\n</code></pre>\n<p><code>\u00a79.3.1 [class.mfct.non-static] p3</code></p>\n<blockquote>\n<p id=\"so_16524041_16524361_0\">[...] the <em>id-expression</em> is transformed into a class member access expression (5.2.5) using <code>(*this)</code> (9.3.2) as the <em>postfix-expression</em> to the left of the <code>.</code> operator. [...]</p>\n</blockquote>\n<p>Now, the example from the standard calls a member function outside of the body of another member function, in the trailing-return-type. And that call is transformed too:</p>\n<pre><code>template&lt;class T&gt; auto f(T t) -&gt; decltype(t + (*this).g()) \n{ return t + (*this).g(); }\n</code></pre>\n<p>And outside of a member function body, <code>*this</code> is obviously an incomplete type. This means that you can only access the names that have been declared prior to the usage - but that part does not apply only to the <code>*this</code> usage:</p>\n<pre><code>struct X{\n  using typeA = int;\n  typeA f(); // OK, 'typeA' has been declared before\n\n  typeB g(); // Error: 'typeB' not declared before usage\n  using typeB = float;\n};\n</code></pre>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "16524361", "Score": "2", "CreationDate": "2013-05-13T14:20:10.927", "LastActivityDate": "2013-05-13T14:20:10.927"}, "bq_ids": {"n4140": {"so_16524041_16524041_0": {"section_id": 5949, "quality": 0.9565217391304348, "length": 22}, "so_16524041_16524224_2": {"section_id": 5862, "quality": 1.0, "length": 36}, "so_16524041_16524270_0": {"section_id": 5949, "quality": 1.0, "length": 4}, "so_16524041_16524224_1": {"section_id": 5949, "quality": 0.9411764705882353, "length": 16}, "so_16524041_16524361_0": {"section_id": 5891, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_16524041_16524041_0": {"section_id": 5719, "quality": 0.9565217391304348, "length": 22}, "so_16524041_16524361_0": {"section_id": 5662, "quality": 0.8461538461538461, "length": 11}, "so_16524041_16524224_1": {"section_id": 5719, "quality": 0.9411764705882353, "length": 16}, "so_16524041_16524270_0": {"section_id": 5719, "quality": 1.0, "length": 4}, "so_16524041_16524224_2": {"section_id": 5632, "quality": 1.0, "length": 36}}, "n4659": {"so_16524041_16524041_0": {"section_id": 7435, "quality": 0.9565217391304348, "length": 22}, "so_16524041_16524224_1": {"section_id": 7435, "quality": 0.9411764705882353, "length": 16}, "so_16524041_16524361_0": {"section_id": 7374, "quality": 0.8461538461538461, "length": 11}, "so_16524041_16524270_0": {"section_id": 7435, "quality": 1.0, "length": 4}, "so_16524041_16524224_2": {"section_id": 7345, "quality": 0.8888888888888888, "length": 32}}}});