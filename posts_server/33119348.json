post_cb({"bq_ids": {"n4140": {"so_33119348_33119476_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 6106}}, "n3337": {"so_33119348_33119476_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5872}}, "n4659": {"so_33119348_33119476_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 7603}}}, "33119348": {"ViewCount": "57", "Body": "<p>Suppose I have a class <code>foo</code> with a function <code>release</code> that calls <code>delete this</code>:</p>\n<pre><code>struct foo\n{\n    std::int32_t release() const\n    {\n        delete this;\n        return 0;\n    }\n};\n</code></pre>\n<ol>\n<li><p>Why can I even call <code>delete this</code> given that the function is <code>const</code>?</p></li>\n<li><p>Is the behaviour on returning 0 defined? Doesn't the function \"sort-of-die\" after the <code>delete</code>?</p></li>\n</ol>\n<p>An answer referencing the standard (so I can put a fancy comment in my code) would be much appreciated.</p>\n", "Title": "Behaviour of `delete this` in a function", "CreationDate": "2015-10-14T07:37:09.727", "LastActivityDate": "2015-10-14T07:57:29.917", "CommentCount": "7", "PostTypeId": "1", "ClosedDate": "2015-10-14T07:44:19.510", "Id": "33119348", "Score": "2", "OwnerUserId": "3415258", "Tags": "<c++>", "AnswerCount": "2"}, "33119457": {"Id": "33119457", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33119348_33119457_0\">Why can I even call delete this given that the function is const</p>\n</blockquote>\n<p>Because <code>delete</code> doesn't necessarily modify the deleted pointer. </p>\n<blockquote>\n<p id=\"so_33119348_33119457_1\">Is the behaviour on returning 0 defined? Doesn't the function \"sort-of-die\" after the delete?</p>\n</blockquote>\n<p>Why would it? The logic isn't removed from the program. The functionality stays in memory for next objects to use it. It's only <code>this</code> pointer that gets invalidated.</p>\n<p>There's an <a href=\"https://stackoverflow.com/questions/3150942/c-delete-this\">SO answer</a> that points to <a href=\"https://isocpp.org/wiki/faq/freestore-mgmt#delete-this\" rel=\"nofollow noreferrer\">The ISO C++ FAQ</a> which has an entry on that, excerpts of which:</p>\n<blockquote id=\"so_33119348_33119457_2\">\n<ol start=\"3\">\n<li>You must be absolutely 100% positively sure that the rest of your member function (after the delete this line) doesn\u2019t touch any piece of this object (including calling any other member functions or touching any data members). This includes code that will run in destructors for any objects allocated on the stack that are still alive.</li>\n<li>You must be absolutely 100% positively sure that no one even touches the this pointer itself after the delete this line. In other words, you must not examine it, compare it with another pointer, compare it with nullptr, print it, cast it, do anything with it.</li>\n</ol>\n</blockquote>\n<p>Since your code abides those rules, again, it's fine.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-14T07:57:29.917", "Score": "1", "CreationDate": "2015-10-14T07:42:02.507", "ParentId": "33119348", "CommentCount": "1", "LastEditDate": "2017-05-23T12:23:35.450", "OwnerUserId": "752976"}, "33119476": {"Id": "33119476", "PostTypeId": "2", "Body": "<blockquote id=\"so_33119348_33119476_0\">\n<ol>\n<li>Why can I even call delete this given that the function is const?</li>\n</ol>\n</blockquote>\n<p>From the standard, 5.3.5$2 Delete [expr.delete]</p>\n<blockquote>\n<p id=\"so_33119348_33119476_1\">[ Note: a pointer to a const type can be the operand of a\n  delete-expression; it is not necessary to cast away the constness\n  (5.2.11) of the pointer expression before it is used as the operand of\n  the delete-expression. \u2014end note ]</p>\n</blockquote>\n<p>and  </p>\n<blockquote id=\"so_33119348_33119476_2\">\n<ol start=\"2\">\n<li>Is the behaviour on returning 0 defined?</li>\n</ol>\n</blockquote>\n<p>I think it's safe. <code>delete this;</code> will call the destructor and free the memory hold by the object (including the member variables and base class subobject). After that, if you don't derefrence <code>this</code>, or access any member variables, it'll be safe.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-10-14T07:48:59.680", "Score": "1", "CreationDate": "2015-10-14T07:42:50.533", "ParentId": "33119348", "CommentCount": "1", "LastEditDate": "2015-10-14T07:48:59.680", "OwnerUserId": "3309790"}});