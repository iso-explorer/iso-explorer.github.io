post_cb({"14990724": {"ParentId": "14990584", "CommentCount": "1", "Body": "<p>No, <code>x2</code> cannot be bypassed even if <code>i</code> is <code>1</code>. The problem with the <code>goto</code> would be that if it was taken, the constructor for <code>x1</code> would not be called (remember, the constructor is \"called\" at the <code>X x1;</code> statement - because the call to the constructor is <em>above</em> the target of the jump and you would be at a point where <code>x1</code> was still in scope.</p>\n<p>But you can't jump past the line <code>X x2;</code> and end up in a point where <code>x2</code> is <em>still</em> in scope, so that is OK.</p>\n", "OwnerUserId": "970543", "PostTypeId": "2", "Id": "14990724", "Score": "0", "CreationDate": "2013-02-20T21:58:43.467", "LastActivityDate": "2013-02-20T21:58:43.467"}, "14990584": {"CommentCount": "0", "ViewCount": "191", "PostTypeId": "1", "LastEditorUserId": "389898", "CreationDate": "2013-02-20T21:48:14.810", "LastActivityDate": "2013-02-21T17:43:45.520", "Title": "storage allocation in c++", "LastEditDate": "2013-02-21T17:43:45.520", "Id": "14990584", "Score": "7", "Body": "<p>I'm reading thinking in c++ chapter 6 initialization &amp; cleanup.\nThe author said that: </p>\n<blockquote>\n<p id=\"so_14990584_14990584_0\">It's actually more likely that the compiler will follow the practice\n  in C of allocating all the storage for a scope at the opening brace of\n  that scope. It doesn't matter because, as a programmer, you can't\n  access the storage until it has been defined. Although the storage is\n  allocated at the beginning of the block, the constructor call doesn't\n  happen until the sequence point where the object is defined because\n  the identifier isn't available until then. The compiler even checks to\n  make sure that you don't put the object definition where the sequence\n  point only conditionally passes through it, such as in a switch\n  statement or somewhere a goto can jump past it.</p>\n</blockquote>\n<p>And then the author gives an example as following:</p>\n<pre><code>class X {\npublic:\n  X();\n};\n\nX::X() {}\n\nvoid f(int i) {\n  if(i &lt; 10) {\n   //! goto jump1; // Error: goto bypasses init\n  }\n  X x1;  // Constructor called here\n jump1:\n  switch(i) {\n    case 1 :\n      X x2;  // Constructor called here\n      break;\n  // case 2 : // Error: case bypasses init\n      X x3;  // Constructor called here\n      break;\n  }\n} \n\nint main() {\n  f(9);\n  f(11);\n}///:~\n</code></pre>\n<p>I don't understand why the above code is OK? According to my understanding, <code>x2</code> can be bypassed initialization if <code>i</code> is not <code>1</code>.</p>\n<p><em><strong>Supplement:</strong></em></p>\n<p>This sentence \"It'a actually more likely that the compiler will follow the practice in C of allocating all the storage for a scope at the opening brace of that scope.\" also confused me.</p>\n<p>According to the author's description, at the opening brace of the <code>switch</code>, the compiler has already allocated space for <code>x2</code> and <code>x3</code>. If this is the case, there is an opportunity for <code>x2</code> to be uninitialized(case 1 is not satisfied).</p>\n", "Tags": "<c++><initialization><switch-statement>", "OwnerUserId": "389898", "AnswerCount": "4"}, "14990634": {"ParentId": "14990584", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>C++ object initialization and destruction semantics are completely jump-safe (exception, goto , switch and loop constructs included).</p>\n<p>(The only notable exception is inherited from the C standard library (setjmp/longjmp))</p>\n<blockquote>\n<p id=\"so_14990584_14990634_0\">6.6 Jump statements</p>\n<p id=\"so_14990584_14990634_1\"><sup>2</sup> On exit from a scope (however accomplished), objects with automatic storage duration (3.7.3) that have been constructed in that scope are destroyed in the reverse order of their construction. [ Note: For temporaries, see 12.2. \u2014end note ] <strong><em>Transfer out of a loop, out of a block, or back past an initialized variable with automatic storage duration involves the destruction of objects with automatic storage duration that are in scope at the point transferred from but not at the point transferred to</em></strong>. (See 6.7 for transfers into blocks).  [ Note: However, the program can be terminated (by calling std::exit() or std::abort() (18.5), for example) without destroying class objects with automatic storage duration. \u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "85371", "LastEditorUserId": "85371", "LastEditDate": "2013-02-20T22:27:00.703", "Id": "14990634", "Score": "2", "CreationDate": "2013-02-20T21:52:27.683", "LastActivityDate": "2013-02-20T22:27:00.703"}, "14990695": {"ParentId": "14990584", "CommentCount": "2", "Body": "<p>The problem with it, is that a local initialized variable is destroyed when you exit its scope. c++ thinks switch,if,while,for are all their own scope with regard to creating variables.</p>\n", "OwnerUserId": "2082620", "PostTypeId": "2", "Id": "14990695", "Score": "0", "CreationDate": "2013-02-20T21:56:28.617", "LastActivityDate": "2013-02-20T21:56:28.617"}, "bq_ids": {"n4140": {"so_14990584_14990634_1": {"section_id": 3909, "quality": 0.8571428571428571, "length": 60}}, "n3337": {"so_14990584_14990634_1": {"section_id": 3769, "quality": 0.8571428571428571, "length": 60}}, "n4659": {"so_14990584_14990634_1": {"section_id": 4795, "quality": 0.8571428571428571, "length": 60}}}, "14990657": {"ParentId": "14990584", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_14990584_14990657_0\">According to my understanding, x2 can be bypassed initialization if i is not 1.</p>\n</blockquote>\n<p>No, either the <code>case 1</code> is executed, and <code>x2</code> is defined and then destroyed at the end of the <code>switch</code> block, or no case is executed and the entire <code>switch</code> block does nothing, so <code>x2</code> is not in scope, so it isn't initialized but it can't be referred to either. So either it exists and is safe to use, or it doesn't exist.</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "14990657", "Score": "5", "CreationDate": "2013-02-20T21:54:03.893", "LastActivityDate": "2013-02-20T21:54:03.893"}});