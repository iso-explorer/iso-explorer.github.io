post_cb({"34562045": {"ParentId": "34559689", "CommentCount": "1", "CreationDate": "2016-01-02T02:31:59.633", "OwnerUserId": "3723423", "PostTypeId": "2", "Id": "34562045", "Score": "3", "Body": "<p>The standard is clear about this point: </p>\n<blockquote>\n<p id=\"so_34559689_34562045_0\"><strong>3.3.2/11:</strong> (..)  Function declarations at block scope and variable declarations with the extern specifier at block scope <strong>refer to</strong>\n  declarations that are <strong>members of an enclosing namespace</strong> (...)</p>\n</blockquote>\n<p>Consequently:</p>\n<pre><code>void bar()\n{\n    void foo();   // should refer to ns::foo() according to 3.3.2/11\n    foo();\n}\n</code></pre>\n<p>and the linking should refer to the separately compiled function which has the same signature:  </p>\n<blockquote>\n<p id=\"so_34559689_34562045_1\"><strong>1.3.17 signature:</strong> <code>&lt;function&gt;</code> name, parameter type list , and enclosing namespace (if any) [Note: Signatures are used as a basis for\n  name mangling and linking.\u2014end note ]</p>\n</blockquote>\n", "LastActivityDate": "2016-01-02T02:31:59.633"}, "34559689": {"CommentCount": "5", "AcceptedAnswerId": "34562045", "PostTypeId": "1", "LastEditorUserId": "1928235", "CreationDate": "2016-01-01T20:20:44.403", "LastActivityDate": "2016-01-02T02:31:59.633", "LastEditDate": "2016-01-01T20:56:05.237", "ViewCount": "272", "FavoriteCount": "0", "Title": "Forward declaring a function in a namespace inside another function in that namespace", "Id": "34559689", "Score": "4", "Body": "<p>I have two source files, <code>a.cpp</code> and <code>b.cpp</code>. In <code>a.cpp</code>, I have a function, <code>foo</code>:</p>\n<pre><code>namespace ns { void foo() { std::cout &lt;&lt; \"foo!\"; } }\n</code></pre>\n<p>In <code>b.cpp</code>, I have another function in namespace <code>ns</code> in which I'd like to prototype and call <code>foo</code>:</p>\n<pre><code>namespace ns\n{\n\nvoid bar()\n{\n    void foo();\n    foo();       \n}\n\n}\n</code></pre>\n<p>While the above is syntactically valid, it leads the compiler to think that <code>foo</code> is in the global namespace (or at least that's what I've deduced from the linker errors I get when I do this). My first two ideas to fix that were <code>void ns::foo();</code> and <code>namespace ns { void foo(); }</code>, but neither is valid. Is it possible to correctly prototype this function inside <code>bar</code>? </p>\n<p>Note that I know I could simply move this to the file scope or a header file, there have been many questions asked about this, but I want to specifically prototype it inside another function. My compiler is MSVC 14.0 with the latest update.</p>\n<p><strong>EDIT:</strong> Based on some tests I've done and our discussion in the comments, I believe this is an MSVC bug. Compare:</p>\n<pre><code>namespace ns\n{\n\nvoid bar()\n{\n    void foo();   // link error, MSVC assumes global namespace\n    foo();\n}\n\nvoid foo() { }\n\n} // namespace ns\n</code></pre>\n<p>This fails, as stated previously. However, moving the prototype out of the function makes MSVC correctly place the prototyped function in the enclosing namespace:</p>\n<pre><code>namespace ns\n{\n\nvoid foo();   // all fine\nvoid bar()\n{\n    foo();\n}\n\nvoid foo() { }\n\n} // namespace ns\n</code></pre>\n", "Tags": "<c++><visual-c++><namespaces><function-prototypes>", "OwnerUserId": "1928235", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34559689_34562045_0": {"section_id": 7059, "quality": 0.9375, "length": 15}, "so_34559689_34562045_1": {"section_id": 5768, "quality": 0.6875, "length": 11}}, "n3337": {"so_34559689_34562045_0": {"section_id": 6803, "quality": 0.9375, "length": 15}, "so_34559689_34562045_1": {"section_id": 5541, "quality": 0.6875, "length": 11}}, "n4659": {"so_34559689_34562045_0": {"section_id": 8556, "quality": 0.9375, "length": 15}, "so_34559689_34562045_1": {"section_id": 7225, "quality": 0.6875, "length": 11}}}});