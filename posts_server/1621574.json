post_cb({"1621591": {"Id": "1621591", "PostTypeId": "2", "Body": "<p>The <code>argv</code> pointers shouldn't be <code>const char* const</code> because the program is allowed to change the buffers.  </p>\n", "LastActivityDate": "2009-10-25T18:11:42.187", "CommentCount": "3", "CreationDate": "2009-10-25T18:11:42.187", "ParentId": "1621574", "Score": "2", "OwnerUserId": "74815"}, "3393718": {"Id": "3393718", "PostTypeId": "2", "Body": "<p>ISO/IEC 9899:TC3</p>\n<p>Section 5.1.2.2.1 Program startup</p>\n<p>The function called at program startup is named main. The implementation declares no\nprototype for this function. It shall be defined with a return type of int and with no\nparameters:</p>\n<pre><code>int main(void) { /* ... */ }\n</code></pre>\n<p>or with two parameters (referred to here as argc and argv, though any names may be\nused, as they are local to the function in which they are declared):</p>\n<pre><code>int main(int argc, char *argv[]) { /* ... */ }\n</code></pre>\n<p>or equivalent;9) or in some other implementation-defined manner.</p>\n", "LastEditorUserId": "507519", "LastActivityDate": "2012-01-07T11:07:25.460", "Score": "0", "CreationDate": "2010-08-03T05:07:04.977", "ParentId": "1621574", "CommentCount": "0", "OwnerUserId": "360654", "LastEditDate": "2012-01-07T11:07:25.460"}, "1624246": {"Id": "1624246", "PostTypeId": "2", "Body": "<p>This may not work if the compiler uses name mangling for <code>main</code>. It's a C++ function after all. Hence, the linker will be looking for two particular \"manglings\". Your definition would have another mangled name.</p>\n<p>Note that <code>main</code> is special (doesn't overload, not callable) and might not require name mangling at all.</p>\n", "LastActivityDate": "2009-10-26T11:15:58.397", "CommentCount": "0", "CreationDate": "2009-10-26T11:15:58.397", "ParentId": "1621574", "Score": "1", "OwnerUserId": "15416"}, "1621574": {"ViewCount": "12862", "Body": "<p>The standard explicitly states that <code>main</code> has two valid (i.e., guaranteed to work) signatures; namely:</p>\n<pre><code>int main();\nint main(int, char*[]);\n</code></pre>\n<p>My question is simple, would something like the following be legal?</p>\n<pre><code>int main(const unsigned int, const char* const* argv);\n</code></pre>\n<p>My tests say 'yes', but I'm unsure of the answer because am I not overloading <code>main</code> by changing <code>int</code> to <code>unsigned int</code> as well as the non top-level <code>const</code>-ness of argv? If I am, then that's clearly prohibited.</p>\n<p>So, are these modifications guaranteed to work on a standards conforming compiler?</p>\n", "AcceptedAnswerId": "1621664", "Title": "Can the arguments of main's signature in C++ have the unsiged and const qualifiers?", "CreationDate": "2009-10-25T18:06:20.437", "Id": "1621574", "CommentCount": "7", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2015-04-26T12:10:43.107", "LastEditorUserId": "895245", "LastActivityDate": "2015-04-26T12:10:43.107", "Score": "24", "OwnerUserId": "196266", "Tags": "<c++><signature><main>", "AnswerCount": "7"}, "1621706": {"Id": "1621706", "PostTypeId": "2", "Body": "<p>You must use one of the standard-conformant signatures to be standard-conformant. </p>\n<p>I fully understand why you want to do it your way. The best way is to write your own function <strong>myMain()</strong> or whatever with the signature you want and call it from main(), including the required casts.</p>\n", "LastActivityDate": "2009-10-25T18:52:21.547", "CommentCount": "1", "CreationDate": "2009-10-25T18:52:21.547", "ParentId": "1621574", "Score": "19", "OwnerUserId": "44134"}, "bq_ids": {"n4140": {"so_1621574_1621664_1": {"length": 36, "quality": 0.8780487804878049, "section_id": 7145}, "so_1621574_1621664_0": {"length": 21, "quality": 0.6774193548387096, "section_id": 7146}}, "n3337": {"so_1621574_1621664_0": {"length": 24, "quality": 0.7741935483870968, "section_id": 6890}, "so_1621574_1621664_1": {"length": 36, "quality": 0.8780487804878049, "section_id": 6889}}, "n4659": {"so_1621574_1621664_0": {"length": 21, "quality": 0.6774193548387096, "section_id": 8647}, "so_1621574_1621664_1": {"length": 34, "quality": 0.8292682926829268, "section_id": 8646}}}, "1621583": {"Id": "1621583", "PostTypeId": "2", "Body": "<p>As far as I can see from reading the standard, you're being non-standards-compliant. But I can't imagine a compiler that wouldn't let you do this. As in, it'd take more work from the compiler to specifically ban an edge case that is mostly harmless and very obscure.</p>\n", "LastActivityDate": "2009-10-25T18:08:50.787", "CommentCount": "1", "CreationDate": "2009-10-25T18:08:50.787", "ParentId": "1621574", "Score": "1", "OwnerUserId": "66517"}, "1621664": {"Id": "1621664", "PostTypeId": "2", "Body": "<p>The C++98 standard says in section 3.6.1 paragraph 2 </p>\n<blockquote>\n<p id=\"so_1621574_1621664_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type <code>int</code>, but otherwise its type is implementation-defined. All implementations shall allow both the following definitions of <code>main</code>: <code>int main()</code> and <code>int main(int argc, char* argv[])</code></p>\n</blockquote>\n<p>So it's not mandated by the standard that the env accepting <code>main</code> is acceptable but it is permissible.</p>\n<hr>\n<p>Because this is referred to often, here is the previous paragraph exempting freestanding environments from anything but documenting their behavior:</p>\n<blockquote>\n<p id=\"so_1621574_1621664_1\">A program shall contain a global function called main, which is the designated start of the program. It is\n  implementation defined\n  whether a program in a freestanding environment is required to define a main\n  function. [Note: in a freestanding environment, startup\n  and termination is implementation defined;\n  startup\n  contains the execution of constructors for objects of namespace scope with static storage duration; termination\n  contains the execution of destructors for objects with static storage duration. ]</p>\n</blockquote>\n</hr>", "LastEditorUserId": "3848", "LastActivityDate": "2015-03-19T07:45:51.177", "Score": "33", "CreationDate": "2009-10-25T18:36:57.223", "ParentId": "1621574", "CommentCount": "1", "OwnerUserId": "3848", "LastEditDate": "2015-03-19T07:45:51.177"}, "1621594": {"Id": "1621594", "PostTypeId": "2", "Body": "<p>You might be illegal by the standard, but most runtimes don't really care. They'll just push an integer for <code>argc</code> and a pointer for <code>argv</code>, call your <code>main</code>, and hope you parse them right.  So, in your purview, \"guaranteed to work\" is debatable as the loader really doesn't care what you've declared the arguments as.</p>\n<p>If it builds, <code>main</code> will get called.  How you parse the arguments is up to you.  I should clarify that this is highly platform-specific, as is nearly this entire question.</p>\n<p>That said, <strong>why?</strong></p>\n", "LastEditorUserId": "168771", "LastActivityDate": "2009-10-25T18:18:58.790", "Score": "0", "CreationDate": "2009-10-25T18:12:15.497", "ParentId": "1621574", "CommentCount": "4", "OwnerUserId": "168771", "LastEditDate": "2009-10-25T18:18:58.790"}});