post_cb({"bq_ids": {"n4140": {"so_15240410_15240667_3": {"length": 24, "quality": 1.0, "section_id": 2413}, "so_15240410_15240667_2": {"length": 12, "quality": 0.8, "section_id": 2412}, "so_15240410_15240667_1": {"length": 8, "quality": 0.8, "section_id": 2411}}, "n3337": {"so_15240410_15240667_3": {"length": 24, "quality": 1.0, "section_id": 2398}, "so_15240410_15240667_2": {"length": 12, "quality": 0.8, "section_id": 2397}, "so_15240410_15240667_1": {"length": 8, "quality": 0.8, "section_id": 2396}}, "n4659": {"so_15240410_15240667_3": {"length": 24, "quality": 1.0, "section_id": 2688}, "so_15240410_15240667_2": {"length": 12, "quality": 0.8, "section_id": 2687}, "so_15240410_15240667_1": {"length": 8, "quality": 0.8, "section_id": 2686}}}, "15240410": {"ViewCount": "1580", "Body": "<p>I want to read and write an binary file with a single file stream. The following code tries to read the first part of the file, and uses it to overwrite the second part of the file. But I find that I have to use \"seekp(pos [,ios_base::begin]);\" before writing. Additionally, \"seekp\" in fact doesn't change the position in my code, but it is necessary! Could any one give an explain? It should better be according to the c++ standard. Thanks very much!</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nusing namespace std;\n\nint main(){\n    fstream flib (\"tmp.txt\", ios::in | ios::out |ios::binary | ios::trunc);\n    if(!flib){\n        cerr &lt;&lt; \"file open failed!\" &lt;&lt; endl;\n        return 1;\n    }\n    int tmp;\n\n    for(int i = 0; i&lt;2 ; i++){//write 2 numbers\n        flib.write((char*)&amp;i, sizeof(tmp));\n    }\n    flib.seekg(0);\n    while(flib.read((char*)&amp;tmp, sizeof(tmp))){//read file contents\n        cout &lt;&lt;tmp&lt;&lt;endl; \n    }\n    flib.clear();\n    flib.seekg(0);\n    flib.read((char*)&amp;tmp, sizeof(tmp));\n    flib.seekp(sizeof(tmp)); //work\n    //flib.seekp(sizeof(tmp), ios_base::beg); //work\n    //flib.seekp(0, ios_base::cur); //not work\n    //flib.seekp(sizeof(tmp), ios_base::end); //not work\n    //flib.seekp(-sizeof(tmp), ios_base::end); //not work\n    flib.write((char*)&amp;tmp, sizeof(tmp));\n    flib.clear();\n    flib.seekg(0);\n    while(flib.read((char*)&amp;tmp, sizeof(tmp))){//read file contents\n        cout &lt;&lt;tmp&lt;&lt;endl; \n    }\n\n    return 0;\n }\n</code></pre>\n<p>Comment: I find that if I use flib.seekp(some_number, ios_base::cur); with nonzero some_number, it works. And I use vs2012 express compiler, is it a bug?</p>\n", "AcceptedAnswerId": "15240667", "Title": "seekp before writing?", "CreationDate": "2013-03-06T06:24:12.820", "Id": "15240410", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2013-03-06T07:05:34.217", "LastEditorUserId": "1535111", "LastActivityDate": "2013-03-06T07:05:34.217", "Score": "0", "OwnerUserId": "1535111", "Tags": "<c++><fstream>", "AnswerCount": "1"}, "15240667": {"Id": "15240667", "PostTypeId": "2", "Body": "<p>File streams use a <code>basic_filebuf&lt;&gt;</code> for the stream buffer.  The C++03 standard has this to say about <code>class basic_filebuf&lt;charT,traits&gt;</code>:</p>\n<blockquote>\n<p id=\"so_15240410_15240667_0\">27.8.1.1 Class tempate basic_filebuf</p>\n<p id=\"so_15240410_15240667_1\">The class basic_filebuf associates both the input\n  sequence and the output sequence with a file.</p>\n<p id=\"so_15240410_15240667_2\">The restrictions on reading and writing a sequence controlled by an\n  object of class basic_filebuf are the same as for\n  reading and writing with the Standard C library <code>FILE</code>s.</p>\n<p id=\"so_15240410_15240667_3\">In particular:\n    - If the file is not open for reading the input sequence cannot be read.\n    - If the file is not open for writing the output sequence cannot be written.\n    - A joint file position is maintained for both the input sequence and the output sequence.</p>\n</blockquote>\n<p>Unfortunately it doesn't call out that when transitioning between reading and writing to a <code>FILE</code> object using the standard C library, you have to perform a file positioning call (or an <code>fflush()</code> when transitioning from write operations to read operations).  See <a href=\"https://stackoverflow.com/a/14879076/12711\">https://stackoverflow.com/a/14879076/12711</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-06T06:40:06.657", "Score": "4", "CreationDate": "2013-03-06T06:40:06.657", "ParentId": "15240410", "CommentCount": "0", "OwnerUserId": "12711", "LastEditDate": "2017-05-23T12:08:50.353"}});