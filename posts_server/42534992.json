post_cb({"bq_ids": {"n4140": {"so_42534992_42535090_2": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_42534992_42535090_1": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_42534992_42536286_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 3285}, "so_42534992_42535090_0": {"length": 6, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_42534992_42535090_2": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_42534992_42535090_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_42534992_42536286_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 3155}, "so_42534992_42535090_0": {"length": 6, "quality": 1.0, "section_id": 3195}}, "n4659": {"so_42534992_42535090_2": {"length": 4, "quality": 0.8, "section_id": 653}, "so_42534992_42536286_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 4047}, "so_42534992_42535090_0": {"length": 6, "quality": 1.0, "section_id": 4091}}}, "42536286": {"Id": "42536286", "PostTypeId": "2", "Body": "<p>The entire union will be zeroed out. More exactly the first member of the union will be default initialized and all the remaining bytes in the union will be set to 0 as <em>padding</em>.</p>\n<p>References (emphasize mine):</p>\n<blockquote>\n<p id=\"so_42534992_42536286_0\">8.5 Initializers [dcl.init]<br/>...<br/></p>\n<p id=\"so_42534992_42536286_1\">5 To zero-initialize an object or reference of type T means:<br/>...<br/>\n  \u2014 if T is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zero initialized\n  <strong>and padding is initialized to zero bits</strong>;</p>\n</blockquote>\n<p>That means that the first member of the union (here <code>std::uint8_t Byte;</code>) will be initialized to a 0 and that all other bytes in the union will be set to 0 because they are padding bytes.</p>\n<hr>\n<p>But <strong>beware</strong>. As stated by Angew <em>\"padding\" is wonderfully underspecified in the standard</em> and a C compiler could interpret that the padding bytes in a union are only the bytes that follow the largest member. I would really find that weird because compatibility changes are specifically documented and previous versions (C) first initialized everything to 0 and next did specific initialization. But a new implementer could not be aware of it...</p>\n<p>TL/DR: I really think that the intent of the standard is that all bytes in the union are set to 0 in OP's example, but for a mission critical program, I would certainly add an explicit 0 constructor...</p>\n</hr>", "LastEditorUserId": "3545273", "LastActivityDate": "2017-03-02T08:13:42.230", "Score": "5", "CreationDate": "2017-03-01T15:54:23.830", "ParentId": "42534992", "CommentCount": "3", "OwnerUserId": "3545273", "LastEditDate": "2017-03-02T08:13:42.230"}, "42534992": {"ViewCount": "353", "Body": "<p>In C++11, I have the following union:</p>\n<pre><code>union SomeData\n{\n    std::uint8_t Byte;\n    std::uint16_t Word;\n    std::uint32_t DWord;\n    unsigned char String[128];\n};\n</code></pre>\n<p>If I initialize the union thusly;</p>\n<pre><code>SomeData data {};\n</code></pre>\n<p>Is it guaranteed that the <em>entire</em> contents of the union will be \"zero'd\" out?  Put another way; is an empty list-initializer of a union <em>functionally equivalent</em> to memset-ing the union to Zero?:</p>\n<pre><code>memset(&amp;data, 0, sizeof(data));\n</code></pre>\n<p>In particular, I'm concerned about the string data.  I'd like to ensure the entire length of the string contains zeros.  It appears to work in my current compiler, but does <em>the language of the spec</em> guarantee this to always be true?</p>\n<p>If not: is there a better way to initialize the full length of the union to zero?</p>\n", "AcceptedAnswerId": "42535090", "Title": "C++11 empty list Initialization of a union - is it guaranteed to initialize the full length of the union?", "CreationDate": "2017-03-01T14:56:30.953", "Id": "42534992", "CommentCount": "0", "LastEditDate": "2017-03-01T15:01:34.087", "PostTypeId": "1", "LastEditorUserId": "741988", "LastActivityDate": "2017-03-02T11:02:49.603", "Score": "10", "OwnerUserId": "741988", "Tags": "<c++><c++11><unions><list-initialization>", "AnswerCount": "2"}, "42535090": {"Id": "42535090", "PostTypeId": "2", "Body": "<p>No, it is not guaranteed that the entire union will be zeroed out. Only the first declared member of the union, plus any padding, is guaranteed to be zeroed (proof below).</p>\n<p>So to ensure the entire memory region of the union object is zeroed, you have these options:</p>\n<ul>\n<li>Order the members such that the largest member is first and thus the one zeroed out.</li>\n<li>Use <code>std::memset</code> or equivalent functionality. To prevent accidentally forgetting that, you can of course give <code>SomeData</code> a default constructor which will call this.</li>\n</ul>\n<hr>\n<p>Quoting C++11:</p>\n<p>8.5.4 [dcl.init.list]/3</p>\n<blockquote>\n<p id=\"so_42534992_42535090_0\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<ul>\n<li>If the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is\n  value-initialized.</li>\n</ul>\n</blockquote>\n<p>8.5 [dcl.init]/7</p>\n<blockquote>\n<p id=\"so_42534992_42535090_1\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the\n  default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default\n  constructor);</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if <code>T</code>\u2019s implicitly-declared default constructor is non-trivial, that constructor is\n  called.</li>\n<li>...</li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p>8.5 [dcl.init]/5:</p>\n<blockquote>\n<p id=\"so_42534992_42535090_2\">To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<p id=\"so_42534992_42535090_3\">...</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zero-initialized\n  and padding is initialized to zero bits;</li>\n</ul>\n</blockquote>\n<p>From these quotes, you can see that using <code>{}</code> to initialise <code>data</code> will cause the object to be value-initialized (since <code>SomeData</code> is a class type with a default constructor).</p>\n<p>Value-initializing a union without a user-provided default constructor (which <code>SomeData</code> is) means zero-initializing it.</p>\n<p>Finally, zero-initializing a union means zero-initializing its first non-static named data member.</p>\n</hr>", "LastEditorUserId": "4850040", "LastActivityDate": "2017-03-02T11:02:49.603", "Score": "5", "CreationDate": "2017-03-01T15:00:43.663", "ParentId": "42534992", "CommentCount": "18", "OwnerUserId": "1782465", "LastEditDate": "2017-03-02T11:02:49.603"}});