post_cb({"bq_ids": {"n4140": {"so_30350127_30350754_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_30350127_30350754_2": {"length": 30, "quality": 0.967741935483871, "section_id": 441}, "so_30350127_30350754_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}}, "n3337": {"so_30350127_30350754_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_30350127_30350754_2": {"length": 30, "quality": 0.967741935483871, "section_id": 432}, "so_30350127_30350754_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}}, "n4659": {"so_30350127_30350754_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_30350127_30350754_2": {"length": 28, "quality": 0.9032258064516129, "section_id": 461}, "so_30350127_30350754_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8697}}}, "30350754": {"Id": "30350754", "PostTypeId": "2", "Body": "<p>The lifetime of <code>A</code> will not have begun when <code>check()</code> is called because, from [base.life]:</p>\n<blockquote>\n<p id=\"so_30350127_30350754_0\">The lifetime of an object of type <code>T</code> begins when:</p>\n<ul>\n<li>storage with the proper alignment and size for type <code>T</code> is obtained, and</li>\n<li>if the object has non-vacuous initialization, its initialization is complete.</li>\n</ul>\n</blockquote>\n<p><code>A</code> has non-vacuous initialization. Its initialization is complete when, from [class.base.init]/13:</p>\n<blockquote>\n<p id=\"so_30350127_30350754_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>...</li>\n<li>\u2014 Finally, the <em>compound-statement</em> of the constructor body is executed.</li>\n</ul>\n</blockquote>\n<p>However, despite <code>A</code> not having its lifetime begun yet, the standard additionally provides, in [class.base.init]/16:</p>\n<blockquote>\n<p id=\"so_30350127_30350754_2\">Member functions (including virtual member functions, 10.3) can be called for an object under construction... However, if these operations are performed in a <em>ctor-initializer</em> (or in a function called directly\n  or indirectly from a <em>ctor-initializer</em>) before all the <em>mem-initializers</em> for base classes have completed, the result of the operation is undefined.</p>\n</blockquote>\n<p>With regards to lifetime issues, there's no difference between:</p>\n<pre><code>void check(const A&amp; ) { .. }\nstruct A { \n    A() { check(*this); } \n};\n</code></pre>\n<p>And:</p>\n<pre><code>struct A {\n    void check() const { .. }\n    A() { check(); }\n};\n</code></pre>\n<p>The latter is explicitly allowed for (as it's not in a <em>ctor-initializer</em>), so I see no reason to exclude the former on lifetime grounds. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-05-20T14:06:37.063", "Score": "8", "CreationDate": "2015-05-20T13:12:57.653", "ParentId": "30350127", "CommentCount": "7", "OwnerUserId": "2069064", "LastEditDate": "2015-05-20T14:06:37.063"}, "30350127": {"ViewCount": "196", "Body": "<p>Let's suppose I want to call an external function of my object to perform some checks inside the body constructor. Since the lifetime of an object begins when the constructor's body finishes its execution, is it an unsafe design?</p>\n<pre><code>struct A;\n\nvoid check(A const&amp;) { /* */ }\n\nstruct A\n{\n    A() { check(*this); }\n};\n</code></pre>\n<p>I mean, I'm calling and external function with a not-yet-alive object. Is it undefined behaviour?</p>\n<p>Related questions: if I put that checking function as a member function (static or not), what does the standard says about using non-yet-alive objects outside the constructor but inside the class?</p>\n<p>It there any difference in the lifetime concept between the point of view of a class and its users (a sort of in-class versus out-class lifetimes)?</p>\n", "Title": "C++: lifetime of an object and external functions", "CreationDate": "2015-05-20T12:47:27.477", "LastActivityDate": "2015-05-20T14:30:55.963", "CommentCount": "7", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-05-20T14:30:55.963", "LastEditorUserId": "2069064", "Id": "30350127", "Score": "10", "OwnerUserId": "1794803", "Tags": "<c++><constructor><language-lawyer><object-lifetime>", "AnswerCount": "1"}});