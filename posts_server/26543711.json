post_cb({"26543711": {"CommentCount": "3", "ViewCount": "170", "CreationDate": "2014-10-24T07:57:31.903", "LastActivityDate": "2014-10-24T09:20:10.610", "Title": "Same member function of a class can be declared with \"override & final\" specifier in c++?", "AcceptedAnswerId": "26544425", "PostTypeId": "1", "Id": "26543711", "Score": "1", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/language/override\" rel=\"nofollow\">override</a> and <a href=\"http://en.cppreference.com/w/cpp/language/final\" rel=\"nofollow\">final</a> specifier has been introduced in C++11.The below program uses these specifier as follows:</p>\n<pre><code>#include&lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid display(const T&amp; val) { std::cout&lt;&lt;val&lt;&lt;\"\\n\"; }\n\nclass Shape {\npublic:\n    virtual ~Shape()= default;\n    virtual void Draw() { display(\"Shape::Draw()\");}\n   virtual void DisplayName() { display(\"Shape\");}\n};\n\nclass Circle : public Shape {\npublic:\n    virtual ~Circle() = default;\n    virtual void Draw() override final { display(\"Circle::Draw()\");}\n    virtual void DisplayName() override { display(\"Cicle\");}\n};\n\n\nint main()\n{\n}\n</code></pre>\n<p>In the above sample program <code>Circle::Draw()</code> has been defined as <code>override final</code> specifier. This compiles successfully however if the same method is defined as <code>final override</code>, then it throws an <strong>compile time</strong> error.</p>\n<p>Wanted to understand the use cases of override and final specifier for the same method for a class?. When we should use it in our program?</p>\n", "Tags": "<c++><inheritance><c++11>", "OwnerUserId": "2724703", "AnswerCount": "3"}, "26544863": {"ParentId": "26543711", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is a compiler bug. According to the grammar that the C++11 standard is specifying in [class.mem]:</p>\n<blockquote>\n<p id=\"so_26543711_26544863_0\"><em>member-declarator:<br> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarator\n  virt-specifier-seq<sub>opt</sub> pure-specifier<sub>opt</sub><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarator\n  brace-or-equal-initializer<sub>opt</sub><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0identifier<sub>opt</sub>\n  attribute-specifier-seq<sub>opt</sub> : constant-expression<br>\n  virt-specifier-seq:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virt-specifier<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virt-specifier-seq\n  virt-specifier<br> virt-specifier:</br></br></br></br></br></br></br></em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>override</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <code>final</code></br></br></p>\n</blockquote>\n<p>The <em>virt-specifier-seq</em> doesn't imply any order in the <em>virt-specifier</em>s in the declaration.</p>\n<blockquote>\n<p id=\"so_26543711_26544863_1\">When we should use it in our program?</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/8730375/explicit-overrides-and-final-c0x\">This question</a> might be worth looking at.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:00:46.690", "Id": "26544863", "Score": "1", "CreationDate": "2014-10-24T09:09:32.073", "LastActivityDate": "2014-10-24T09:20:10.610"}, "26544425": {"ParentId": "26543711", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In my opinion it is a compiler bug. At least at www.ideone com the code is compiled successfully.</p>\n<p>Acoording to the C++ Standard (10.3 Virtual functions)</p>\n<blockquote>\n<p id=\"so_26543711_26544425_0\">4 If a virtual function f in some class B is marked with the\n  virt-specifier final and in a <strong>class D derived from B</strong> a function\n  D::f overrides B::f, the program is ill-formed.</p>\n</blockquote>\n<pre><code>[ Example: \nstruct B {\nvirtual void f() const final;\n};\nstruct D : B {\nvoid f() const; // error: D::f attempts to override final B::f\n};\n\u2014end example ]\n</code></pre>\n<p>A class may not be a derived class of itself. So the code you showed shall be compiled. </p>\n<p>Also</p>\n<blockquote>\n<p id=\"so_26543711_26544425_1\">5 If a virtual function is marked with the virt-specifier override and\n  does not override a member function of a base class, the program is\n  ill-formed.</p>\n</blockquote>\n<pre><code>[ Example:\nstruct B {\nvirtual void f(int);\n};\nstruct D : B {\nvirtual void f(long) override; // error: wrong signature overriding B::f\nvirtual void f(int) override; // OK\n};\n\u2014end example ]\n</code></pre>\n<p>In your example function Draw of class Circle is marked with virt-specidier override and indeed overrides the function of the base class. </p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-10-24T08:53:03.843", "Id": "26544425", "Score": "2", "CreationDate": "2014-10-24T08:44:59.117", "LastActivityDate": "2014-10-24T08:53:03.843"}, "26544981": {"ParentId": "26543711", "CommentCount": "0", "Body": "<p>It looks like Vlad from Moscow is correct</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/override\" rel=\"nofollow\">From the override specifier at cppreference.com:</a></p>\n<blockquote>\n<blockquote>\n<p id=\"so_26543711_26544981_1\">declarator virt-specifier-seq(optional) function-body\n    In both cases, virt-specifier-seq, if used, is either override or final, or <strong>final override</strong> or <strong>override final</strong>.</p>\n</blockquote>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/final\" rel=\"nofollow\">And again for the final specifier at cppreference.com:</a></p>\n<blockquote>\n<blockquote>\n<p id=\"so_26543711_26544981_3\">declarator virt-specifier-seq(optional) function-body\n    virt-specifier-seq, if used, is either override or final, or <strong>final override</strong> or <strong>override final</strong>.</p>\n</blockquote>\n</blockquote>\n<p>Compiler bugs aside, I would encourage you to pick an order and stick to it consistently - don't mix and match the word order through your codebase.</p>\n", "OwnerUserId": "1683284", "PostTypeId": "2", "Id": "26544981", "Score": "0", "CreationDate": "2014-10-24T09:16:33.793", "LastActivityDate": "2014-10-24T09:16:33.793"}, "bq_ids": {"n4140": {"so_26543711_26544425_0": {"section_id": 7005, "quality": 1.0, "length": 12}, "so_26543711_26544425_1": {"section_id": 7006, "quality": 1.0, "length": 12}}, "n3337": {"so_26543711_26544425_0": {"section_id": 6751, "quality": 1.0, "length": 12}, "so_26543711_26544425_1": {"section_id": 6752, "quality": 1.0, "length": 12}}, "n4659": {"so_26543711_26544425_0": {"section_id": 8502, "quality": 1.0, "length": 12}, "so_26543711_26544425_1": {"section_id": 8503, "quality": 1.0, "length": 12}}}});