post_cb({"22544697": {"ParentId": "22544528", "CommentCount": "0", "Body": "<p>Normally <em>in-place</em> refers to different kinds of algorithms, where <em>in-place</em> denotes that the algorithm directly modifies a sequence instead of, as an example, copying the data to later modify it and store it in a new sequence.</p>\n<pre><code>std::replace      (src.begin (), src.end (), 10, 20);               // (A)\nstd::replace_copy (src.begin (), src.end (), dst.begin (), 10, 20); // (B)\n</code></pre>\n<p>In the above <code>(A)</code> replaces elements matching <code>10</code> with <code>20</code> <em>in-place</em>, whereas <code>(B)</code> copies the data and write the changes to a new sequence (starting at <code>dst.begin ()</code>).</p>\n<hr>\n<p>It is also worth nothing that the only occurrance of the term <em>in-place</em> in the standard is the follow:</p>\n<blockquote>\n<p id=\"so_22544528_22544697_0\">25.1 <strong>General</strong> <code>[algorithms.general]</code> </p>\n<blockquote>\n<p id=\"so_22544528_22544697_2\"><sup>7</sup> Both in-place and copying versions are provided for certain algorithms. When such a version is provided for <em>algorithm</em> it is called <em>algorithm</em>_copy. Algorithms that take predicates end with the suffix <code>_if</code>, which follows the suffix <code>_copy</code>.</p>\n</blockquote>\n</blockquote>\n</hr>", "OwnerUserId": "1090079", "PostTypeId": "2", "Id": "22544697", "Score": "1", "CreationDate": "2014-03-20T20:46:28.420", "LastActivityDate": "2014-03-20T20:46:28.420"}, "22544528": {"CommentCount": "1", "ViewCount": "42", "ClosedDate": "2014-03-20T21:13:21.963", "CreationDate": "2014-03-20T20:38:05.523", "LastActivityDate": "2014-03-20T20:46:28.420", "Title": "STL C++11 - Inserters \"in place\"", "PostTypeId": "1", "Id": "22544528", "Score": "-2", "Body": "<p>What are the inserters \"in place\" of the STL ?                                                                                                                                                               </p>\n", "Tags": "<c++11><stl>", "OwnerUserId": "3254491", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22544528_22544697_1": {"section_id": 1240, "quality": 0.9130434782608695, "length": 21}, "so_22544528_22544697_2": {"section_id": 1240, "quality": 0.9130434782608695, "length": 21}}, "n3337": {"so_22544528_22544697_1": {"section_id": 1238, "quality": 0.9130434782608695, "length": 21}, "so_22544528_22544697_2": {"section_id": 1238, "quality": 0.9130434782608695, "length": 21}}, "n4659": {"so_22544528_22544697_1": {"section_id": 1328, "quality": 0.9130434782608695, "length": 21}, "so_22544528_22544697_2": {"section_id": 1328, "quality": 0.9130434782608695, "length": 21}}}});