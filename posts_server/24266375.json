post_cb({"24266375": {"CommentCount": "7", "CreationDate": "2014-06-17T14:25:37.817", "PostTypeId": "1", "AcceptedAnswerId": "24266512", "LastEditorUserId": "2805305", "LastActivityDate": "2014-06-17T14:48:58.547", "LastEditDate": "2014-06-17T14:34:36.943", "ViewCount": "639", "FavoriteCount": "0", "Title": "Can placement new (expression) throw if the constructor of the object is noexcept?", "Id": "24266375", "Score": "6", "Body": "<pre><code>template &lt;class T&gt;\nstruct Obj {\n  // Plain Old Data for T\n  using InternalPod = typename std::aligned_storage&lt;sizeof(T), std::alignment_of&lt;T&gt;::value&gt;::type;\n\n  InternalPod value_pod_;\n\n  template&lt;class... Args&gt;\n  Obj(Args&amp;&amp;... args) { // my constructor\n    // placement new: construct the value in the statically allocated space\n    new (&amp;value_pod_) T(std::forward&lt;Args&gt;(args)...); // &lt;- can this whole expression throw if the constructor of T doesn\u2019t throw?\n  }\n}\n</code></pre>\n<p><em>Normal</em> <code>new</code> can throw if the allocation fails or if the construction fails (correct me if there are other cases), but since placement new doesn\u2019t allocate any space, can the new expression throw if the constructor of <code>T</code> doesn\u2019t throw?</p>\n<p>I.e. is the following <code>noexcept</code> specification correct and safe?</p>\n<pre><code>Obj(Args&amp;&amp;... args) noexcept(noexcept(T(std::forward&lt;Args&gt;(args)...))) {\n  new (&amp;value_pod_) T(std::forward&lt;Args&gt;(args)...);\n}\n</code></pre>\n", "Tags": "<c++><exception><c++11><placement-new><noexcept>", "OwnerUserId": "2805305", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24266375_24266512_0": {"section_id": 6822, "quality": 0.75, "length": 6}}, "n3337": {"so_24266375_24266512_0": {"section_id": 6603, "quality": 0.75, "length": 6}}, "n4659": {"so_24266375_24266512_0": {"section_id": 8312, "quality": 0.875, "length": 7}}}, "24266512": {"ParentId": "24266375", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The placement <code>new</code> from <code>&lt;new&gt;</code> is declared to be <code>noexcept</code> according to 18.6 [support.dynamic] paragraph 1:</p>\n<blockquote>\n<p id=\"so_24266375_24266512_0\">... <code>void* operator new (std::size_t size, void* ptr) noexcept;</code> ...</p>\n</blockquote>\n<p>When using a <code>new</code> expression the system does exactly two things:</p>\n<ol>\n<li>It calls the appropriate version of the <code>operator new()</code> to obtain memory. If memory allocation fails it should throw <code>std::bad_alloc</code> for an <code>operator new()</code> without a <code>noexcept</code> qualification and return <code>nullptr</code> otherwise.</li>\n<li>If a non-<code>nullptr</code> is returned, the expression then calls the constructor of the type in the <code>new</code> expression. If this construction fails with an exception, the <code>operator delete()</code> matching the called <code>operator new()</code> is called with the result from that <code>operator new()</code>.</li>\n</ol>\n<p>Since memory allocation can't fail, the only option to get an exception is from the constructor of the type.</p>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2014-06-17T14:48:58.547", "Id": "24266512", "Score": "11", "CreationDate": "2014-06-17T14:31:52.840", "LastActivityDate": "2014-06-17T14:48:58.547"}});