post_cb({"6492202": {"ParentId": "6491938", "CommentCount": "1", "Body": "<p><code>int</code> does not give better performance than the other types. Really, on most modern platforms, all of the integer types will perform similarly, excepting <code>long long</code>. If you want the \"fastest\" integer available on your platform, C++ does not give you a way to do that. </p>\n<p>On the other hand, if you're willing to use things defined by C99, you can use one of the \"fastint\" types defined there.</p>\n<p>Also, on modern machines, memory hierarchy is more important than CPU calculations in most cases. Using smaller integer types lets you fit more integers into CPU cache, which will increase performance in pretty much all cases.</p>\n<p>Finally, I would recommend <strong>not</strong> using <code>int</code> as a default data type. Usually, I see people reach for <code>int</code> when they really want an unsigned integer instead. The conversion from signed to unsigned can lead to subtle integer overflow bugs, which can lead to security vulnerabilities.</p>\n<p>Don't choose the data type because of an intrinsic \"speed\" -- choose the right data type to solve the problem you're looking to solve.</p>\n", "OwnerUserId": "82320", "PostTypeId": "2", "Id": "6492202", "Score": "1", "CreationDate": "2011-06-27T11:33:02.633", "LastActivityDate": "2011-06-27T11:33:02.633"}, "6492040": {"ParentId": "6491938", "CommentCount": "2", "Body": "<p>Eskimos reportedly use forty or more different words for snow. When you only want to communicate that it's snow, then the word \"snow\" suffices. Source code is not about instructing the compiler: it's about communicating between humans, even if the communication may only be between your current and somewhat later self\u2026</p>\n<p>Cheers &amp; hth.</p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "6492040", "Score": "2", "CreationDate": "2011-06-27T11:18:58.397", "LastActivityDate": "2011-06-27T11:18:58.397"}, "6492024": {"ParentId": "6491938", "CommentCount": "1", "Body": "<p>From the standard:<br>\n3.9.1, \u00a72 :</br></p>\n<blockquote>\n<p id=\"so_6491938_6492024_0\">There are five signed integer types :\n  \"signed char\", \"short int\", \"int\",\n  \"long int\", and \"long long int\". In\n  this list, each type provides at least\n  as much storage as those preceding it\n  in the list. Plain ints have the\n  natural size suggested by the\n  architecture of the execution\n  environment (44); the other signed\n  integer types are provided to meet\n  special needs.</p>\n</blockquote>\n<p>So you can say char &lt;= short &lt;= int &lt;= long &lt;= long long.<br>\nBut you cannot tell that a short is 2 byte and a long 4.  </br></p>\n<p>Now to your question, most compiler align the int to the register size of their target platform which make alignment easier and access on some platforms faster. But that does not mean that you should prefer int.<br>\nTake the data type according to your needs. Do not optimize without performance measure.</br></p>\n", "OwnerUserId": "264338", "PostTypeId": "2", "Id": "6492024", "Score": "4", "CreationDate": "2011-06-27T11:17:28.287", "LastActivityDate": "2011-06-27T11:17:28.287"}, "6491938": {"CommentCount": "3", "ViewCount": "390", "CreationDate": "2011-06-27T11:10:42.927", "LastActivityDate": "2011-06-27T11:33:02.633", "Title": "Explanation for Why int should be preferred over long/short in c++?", "AcceptedAnswerId": "6492030", "PostTypeId": "1", "Id": "6491938", "Score": "3", "Body": "<p>I read somewhere that int data type gives better performance (as compared to long and short) regardless of the OS as its size gets modified according to the word size of the OS. Where as long and short occupy 4 and 2 bytes which may or may not match with the word size of OS.\nCould anyone give a good explanation of this?</p>\n", "Tags": "<c++><performance><operating-system><types><int>", "OwnerUserId": "200894", "AnswerCount": "5"}, "6492030": {"ParentId": "6491938", "CommentCount": "1", "Body": "<p><code>int</code> is traditionally the most \"natural\" integral type for the machine on which the program is to run.  What is meant by \"most natural\" is not too clear, but I would expect that it would not be slower than other types.  More to the point, perhaps, is that there is an almost universal tradition for using <code>int</code> in preference to other types when there is no strong reason for doing otherwise.  Using other integral types will cause an experienced C++ programmer, on reading the code, to ask why.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "6492030", "Score": "4", "CreationDate": "2011-06-27T11:17:59.877", "LastActivityDate": "2011-06-27T11:17:59.877"}, "6492015": {"ParentId": "6491938", "CommentCount": "0", "Body": "<ol>\n<li><p>short only optimize storage size; calculations always extend to an int, if applicable (i.e. unless short is already same size)</p></li>\n<li><p>not sure that int should be preferred to longs; the obvious case being when int's capacity doesn't suffice</p></li>\n</ol>\n<p>You already mention native wordsize, so I'll leave that</p>\n", "OwnerUserId": "85371", "PostTypeId": "2", "Id": "6492015", "Score": "1", "CreationDate": "2011-06-27T11:17:06.100", "LastActivityDate": "2011-06-27T11:17:06.100"}, "bq_ids": {"n4140": {"so_6491938_6492024_0": {"section_id": 7211, "quality": 1.0, "length": 42}}, "n3337": {"so_6491938_6492024_0": {"section_id": 6955, "quality": 1.0, "length": 42}}, "n4659": {"so_6491938_6492024_0": {"section_id": 8720, "quality": 0.9761904761904762, "length": 41}}}});