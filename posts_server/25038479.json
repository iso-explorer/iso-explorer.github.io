post_cb({"25038479": {"CommentCount": "0", "AcceptedAnswerId": "25038543", "PostTypeId": "1", "LastEditorUserId": "2533467", "CreationDate": "2014-07-30T13:43:53.053", "LastActivityDate": "2014-07-30T13:56:19.957", "LastEditDate": "2014-07-30T13:52:02.510", "ViewCount": "220", "FavoriteCount": "1", "Title": "Why is no empty argument list required inside this class definition?", "Id": "25038479", "Score": "6", "Body": "<p>When instantiating a variable that has the type of a templated class using only the standard type arguments, the syntax looks like this:</p>\n<pre><code>template&lt;typename Arg = int&gt;\nclass Templ;\n\nTempl&lt;&gt;&amp; myTempl;\n</code></pre>\n<p>Leaving out the empty argument list <code>&lt;&gt;</code> should give a compile error because a template argument list is needed.</p>\n<p>But apparently (at least under VS2013), the following declaration does <em>not</em> need a template argument list:</p>\n<pre><code>template&lt;typename Arg&gt; //\" = int\" left out\nclass Templ{\n    Templ&amp; myTempl; //no &lt;&gt; here\n};\n</code></pre>\n<p>But why does this work? According to IntelliSense, the correct type (<code>Templ&lt;int&gt;</code>) is selected by the compiler, so it works as intended, but shouldn't the member declaration still require an empty argument list?</p>\n<p><em>EDIT:</em> No, it doesn't work as intended. I didn't check it thoroughly enough. When hovering over the line <code>Templ&lt;short&gt;::myTempl</code>, IntelliSense reveals its type to be <code>short</code>. </p>\n", "Tags": "<c++><visual-studio><class><templates><c++11>", "OwnerUserId": "2533467", "AnswerCount": "2"}, "25038543": {"ParentId": "25038479", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The class name is injected into the class scope</p>\n<p><strong>9 Classes [class]</strong></p>\n<blockquote>\n<p id=\"so_25038479_25038543_0\">2 A class-name is inserted into the scope in which it is declared\n  immediately after the class-name is seen. <strong>The class-name is also\n  inserted into the scope of the class itself; this is known as the\n  injected-class-name</strong>. For purposes of access checking, the\n  injected-class-name is treated as if it were a public member name. A\n  class-specifier is commonly referred to as a class definition. A class\n  is considered defined after the closing brace of its class-specifier\n  has been seen even though its member functions are in general not yet\n  defined. The optional attribute-specifier-seq appertains to the class;\n  the attributes in the attribute-specifier-seq are thereafter\n  considered attributes of the class whenever it is named.</p>\n</blockquote>\n<p>and similarly for class templates</p>\n<p><strong>14.6.1 Locally declared names [temp.local]</strong></p>\n<blockquote>\n<p id=\"so_25038479_25038543_1\">1 Like normal (non-template) classes, <strong>class templates have an\n  injected-class-name</strong> (Clause 9). The injectedclass- name can be used as\n  a template-name or a type-name. When it is used with a\n  template-argument-list, as a template-argument for a template\n  template-parameter, or as the final identifier in the\n  elaborated-typespecifier of a friend class template declaration, it\n  refers to the class template itself. <strong>Otherwise, it is equivalent to\n  the template-name followed by the template-parameters of the class\n  template enclosed in <code>&lt;&gt;</code>.</strong></p>\n</blockquote>\n<p>so that you can use <code>Templ</code> where you mean <code>Templ&lt;Arg&gt;</code>.</p>\n", "OwnerUserId": "819272", "LastEditorUserId": "819272", "LastEditDate": "2014-07-30T13:56:19.957", "Id": "25038543", "Score": "10", "CreationDate": "2014-07-30T13:47:28.353", "LastActivityDate": "2014-07-30T13:56:19.957"}, "25038559": {"ParentId": "25038479", "CommentCount": "0", "Body": "<p>This is called the <em>injected class name</em>.</p>\n<p>Inside a class template, the name of the template without any template argument list refers to the current instantiation, so <code>Templ</code> means <code>Templ&lt;Arg&gt;</code> (and <em>not</em> <code>Templ&lt;&gt;</code> which is <code>Templ&lt;int&gt;</code> and so not necessarily the same).</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "25038559", "Score": "8", "CreationDate": "2014-07-30T13:48:10.660", "LastActivityDate": "2014-07-30T13:48:10.660"}, "bq_ids": {"n4140": {"so_25038479_25038543_1": {"section_id": 179, "quality": 0.9230769230769231, "length": 36}, "so_25038479_25038543_0": {"section_id": 5846, "quality": 0.9523809523809523, "length": 60}}, "n3337": {"so_25038479_25038543_1": {"section_id": 173, "quality": 0.9230769230769231, "length": 36}, "so_25038479_25038543_0": {"section_id": 5616, "quality": 0.9523809523809523, "length": 60}}, "n4659": {"so_25038479_25038543_1": {"section_id": 184, "quality": 0.9230769230769231, "length": 36}, "so_25038479_25038543_0": {"section_id": 7325, "quality": 0.9523809523809523, "length": 60}}}});