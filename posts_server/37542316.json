post_cb({"37543100": {"ParentId": "37542316", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This should not be accepted since C++11.</p>\n<p>See <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion#Pointer_conversions\" rel=\"nofollow\">Pointer conversions</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_37542316_37543100_0\">A null pointer constant (see <code>NULL</code>), can be converted to any pointer type, and the result is the null pointer value of that type. Such conversion (known as <em>null pointer conversion</em>) is allowed to convert to a cv-qualified type as a single conversion, that is, it's <strong>not considered a combination of numeric and qualifying conversions</strong>.</p>\n</blockquote>\n<p>Note since C++11 a <a href=\"http://en.cppreference.com/w/cpp/types/NULL\" rel=\"nofollow\">null pointer constant</a> might be <strong>an integer literal with value zero</strong> (or a prvalue of type <code>std::nullptr_t</code>), while <code>false</code> is not, it's a <a href=\"http://en.cppreference.com/w/cpp/language/bool_literal\" rel=\"nofollow\">boolean literal</a>.</p>\n<p>And until C++11 null pointer constant is defined as <strong>an integral constant expression rvalue of integer type that evaluates to zero</strong>, while <code>false</code> is fine. (<a href=\"http://coliru.stacked-crooked.com/a/8edf6821826366b1\" rel=\"nofollow\">GCC</a> will give a warning for it.)</p>\n<p>From the standard, <code>$4.10/1 Pointer conversions [conv.ptr]</code> (emphasis mine)</p>\n<blockquote>\n<p id=\"so_37542316_37543100_1\">A null pointer constant is <strong>an integer literal</strong> (2.13.2) with value zero or a prvalue of type std::nullptr_t.</p>\n<p id=\"so_37542316_37543100_2\">The conversion of a null pointer constant to a pointer to cv-qualified\n  type is <strong>a single conversion, and not the sequence of a pointer\n  conversion followed by a qualification conversion (4.4)</strong>.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-05-31T11:22:38.097", "Id": "37543100", "Score": "6", "CreationDate": "2016-05-31T10:24:19.890", "LastActivityDate": "2016-05-31T11:22:38.097"}, "37542316": {"CommentCount": "3", "ViewCount": "438", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-05-31T09:47:21.070", "LastActivityDate": "2016-05-31T11:22:38.097", "Title": "Is converting a bool (false) to a pointer legal in C++?", "AcceptedAnswerId": "37543100", "LastEditDate": "2016-05-31T10:36:58.770", "Id": "37542316", "Score": "11", "Body": "<p>I've recently stumbled unto something strange: converting a boolean to pointer works in Visual Studio 2013 and 2015 but not on GCC nor Clang (tried in 3.5).</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid foo(int *ptr)\n{\n    std::cout &lt;&lt; \"foo\";\n}\n\nint main()\n{\n   foo(false);\n}\n</code></pre>\n<p>Error in <a href=\"http://coliru.stacked-crooked.com/a/ae1f5cfb56277d02\">GCC</a>:</p>\n<pre><code>    main.cpp: In function 'int main()':\n    main.cpp:13:13: error: cannot convert 'bool' to 'int*' for argument '1' to 'void foo(int*)'\n    foo(false);\n             ^\n</code></pre>\n<p>My guess is that false is converted to 0 which is equivalent to NULL. Replacing the call to <em>foo</em> with <code>foo(true)</code> causes the compilation to fail with every compiler.</p>\n<p>So my question is: is this code supposed to compile? I fail to see the benefit of converting false to a pointer, it seems to me that it would only be the cause of bugs after misuse / refactoring etc</p>\n", "Tags": "<c++><visual-studio><gcc><clang><language-lawyer>", "OwnerUserId": "831673", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37542316_37543100_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_37542316_37543100_0": {"section_id": 39, "quality": 0.6451612903225806, "length": 20}, "so_37542316_37543100_2": {"section_id": 39, "quality": 0.9375, "length": 15}}, "n3337": {"so_37542316_37543100_1": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}, "so_37542316_37543100_0": {"section_id": 36, "quality": 0.6451612903225806, "length": 20}, "so_37542316_37543100_2": {"section_id": 36, "quality": 0.9375, "length": 15}}, "n4659": {"so_37542316_37543100_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_37542316_37543100_0": {"section_id": 39, "quality": 0.6451612903225806, "length": 20}, "so_37542316_37543100_2": {"section_id": 39, "quality": 0.9375, "length": 15}}}});