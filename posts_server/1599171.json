post_cb({"bq_ids": {"n4140": {"so_1599171_1599194_0": {"length": 40, "quality": 0.975609756097561, "section_id": 127}}, "n3337": {"so_1599171_1599194_0": {"length": 40, "quality": 0.975609756097561, "section_id": 121}}, "n4659": {"so_1599171_1599194_0": {"length": 40, "quality": 0.975609756097561, "section_id": 132}}}, "1599171": {"ViewCount": "2548", "Body": "<p>Ive got a problem that if I have a template class, which in turn has a template method that takes a parameter of another instance of the class (with different template arguments), that it can not access protected or private members of the class passed as a parameter, eg:</p>\n<pre><code>template&lt;typename T&gt;class MyClass\n{\n    T v;\npublic:\n    MyClass(T v):v(v){}\n\n    template&lt;typename T2&gt;void foo(MyClass&lt;T2&gt; obj)\n    {\n        std::cout &lt;&lt; v     &lt;&lt; \" \";\n        //error C2248: 'MyClass&lt;T&gt;::v' : cannot access private member declared in class 'MyClass&lt;T&gt;'\n        std::cout &lt;&lt; obj.v &lt;&lt; \" \";\n        std::cout &lt;&lt; v + obj.v &lt;&lt; std::endl;\n    }\n};\nint main()\n{\n    MyClass&lt;int&gt; x(5);\n    MyClass&lt;double&gt; y(12.3);\n    x.foo(y);\n}\n</code></pre>\n<p>Is there someway to say that methods in MyClass&lt;T&gt; have full access to MyClass&lt;SomeOtherT&gt;?</p>\n", "AcceptedAnswerId": "1599191", "Title": "C++ Class member access problem with templates", "CreationDate": "2009-10-21T07:03:54.107", "Id": "1599171", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2009-10-21T13:36:39.400", "Score": "9", "OwnerUserId": "6266", "Tags": "<c++><templates>", "AnswerCount": "2"}, "1599194": {"Id": "1599194", "PostTypeId": "2", "Body": "<p>Add <code>MyClass</code> as friend class:</p>\n<pre><code>template&lt;typename T&gt; class MyClass\n{\n    template&lt;typename TX&gt;\n    friend class MyClass;\n ...\n</code></pre>\n<p>According to C++ Standard 14.5.3/3:</p>\n<blockquote>\n<p id=\"so_1599171_1599194_0\">A friend template may be declared within a class or class template.  A friend function template may be defined within a class or class template, but a friend class template may not be defined in a class or class template.  In these cases, all specializations of the friend class or friend function template are friends of the class or class template granting friendship. [Example:</p>\n<pre><code>class A {\n  template&lt;class T&gt; friend class B;  // OK\n  template&lt;class T&gt; friend void f(T){ /* ... */ }  // OK\n};\n</code></pre>\n<p id=\"so_1599171_1599194_1\">\u2014end example]</p>\n</blockquote>\n<p>NOTE: You should know that the code above still could lead to an error with some compilers due to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#602\" rel=\"nofollow noreferrer\">Core Issue #602</a> which is still open. Despite this, the code above compiles on GCC, Visual C++ and Comeau.</p>\n<p>To make only function <code>foo</code> a friend you could write the following:</p>\n<pre><code>template&lt;typename T&gt; class MyClass\n{\n    template&lt;typename TY&gt; template&lt;typename TX&gt; \n    friend void MyClass&lt;TY&gt;::foo(MyClass&lt;TX&gt;);\n ...\n</code></pre>\n", "LastEditorUserId": "123111", "LastActivityDate": "2009-10-21T13:36:39.400", "Score": "7", "CreationDate": "2009-10-21T07:07:27.860", "ParentId": "1599171", "CommentCount": "2", "OwnerUserId": "123111", "LastEditDate": "2009-10-21T13:36:39.400"}, "1599191": {"Id": "1599191", "PostTypeId": "2", "Body": "<p>They are different types: templates construct <em>new</em> types from a template.</p>\n<p>You have to make other instantiations of your class friends:</p>\n<pre><code>template &lt;typename T&gt;class MyClass\n{\n    T v;\npublic:\n    MyClass(T v):v(v){}\n\n    template&lt;typename T2&gt;void foo(MyClass&lt;T2&gt; obj)\n    {\n        std::cout &lt;&lt; v     &lt;&lt; \" \";\n        std::cout &lt;&lt; obj.v &lt;&lt; \" \";\n        std::cout &lt;&lt; v + obj.v &lt;&lt; std::endl;\n    }\n\n    // Any other type of MyClass is a friend.\n    template &lt;typename U&gt;\n    friend class MyClass;\n\n    // You can also specialize the above:\n    friend class MyClass&lt;int&gt;; // only if this is a MyClass&lt;int&gt; will the\n                               // other class let us access its privates\n                               // (that is, when you try to access v in another\n                               // object, only if you are a MyClass&lt;int&gt; will\n                               // this friend apply)\n};\n</code></pre>\n", "LastEditorUserId": "87234", "LastActivityDate": "2009-10-21T07:35:40.813", "Score": "9", "CreationDate": "2009-10-21T07:07:08.717", "ParentId": "1599171", "CommentCount": "5", "OwnerUserId": "87234", "LastEditDate": "2009-10-21T07:35:40.813"}});