post_cb({"32141894": {"Id": "32141894", "PostTypeId": "2", "Body": "<p>You need to compile with C++14 support for that to work in cases where the body is more than just a return statement. What compiler and version are you using?</p>\n<p>In any case, why do you return (InnerItems) instead of InnerItems ? Is it to explicitly return a reference to that local variable?</p>\n", "LastEditorUserId": "1149664", "LastActivityDate": "2015-08-21T13:44:59.913", "Score": "1", "CreationDate": "2015-08-21T13:43:08.133", "ParentId": "32141754", "CommentCount": "5", "OwnerUserId": "1149664", "LastEditDate": "2015-08-21T13:44:59.913"}, "32141860": {"Id": "32141860", "PostTypeId": "2", "Body": "<p>From C++11 standard (N3242 5.1.2/4 it's really old specification)</p>\n<blockquote>\n<p id=\"so_32141754_32141860_0\"><strong>If a lambda-expression does not include a trailing-return-type, it is\n  as if the trailing-return-type denotes the following type</strong>:</p>\n<p id=\"so_32141754_32141860_1\">\u2014 if the\n  compound-statement is of the form </p>\n<p id=\"so_32141754_32141860_2\">{ attribute-specifier-seq opt return expression ; }</p>\n<p id=\"so_32141754_32141860_3\">the type of the returned expression after\n  lvalue-to-rvalue conversion (4.1), array-to-pointer conversion\n  (4.2), and function-to-pointer conversion (4.3);</p>\n<p id=\"so_32141754_32141860_4\"><strong>\u2014 otherwise, void.</strong></p>\n</blockquote>\n<p>since your lambda is not just return expression, return-type is void.</p>\n<p>This is considered a defect in C++11 (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975\" rel=\"noreferrer\">DR-985</a>) and many compilers have relaxed those restrictions to the C++14 even in C++11 mode (thanks @dyp).</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-08-21T13:48:37.930", "Score": "6", "CreationDate": "2015-08-21T13:41:50.880", "ParentId": "32141754", "CommentCount": "1", "OwnerUserId": "1498580", "LastEditDate": "2015-08-21T13:48:37.930"}, "32141754": {"ViewCount": "222", "Body": "<p>When I answewred my own question on <a href=\"https://stackoverflow.com/a/32115498/383779\">https://stackoverflow.com/a/32115498/383779</a> , I got another doubt.</p>\n<p>In</p>\n<pre><code>const CArray&lt;CItem*&gt;&amp; Items=\n    (ItemsInput!= nullptr)?\n        *ItemsInput\n    :\n        [this]() -&gt; const CArray&lt;CItem*&gt;&amp;\n        {\n            CArray&lt;CItem*&gt; InnerItems;\n            GetContainer().GetInnerItems(InnerItems, NULL, true);\n            return (InnerItems);\n        } ()\n;\n</code></pre>\n<p>I tried to remove the <code>-&gt; const CArray&lt;CItem*&gt;&amp;</code> return part, but it gave two errors when compiling:</p>\n<pre><code>1&gt;FunctionClass.cpp(line of last semicolon): error C2440: 'initializing' : cannot convert from 'void' to 'const CArray&lt;TYPE&gt; &amp;'\n1&gt;          with\n1&gt;          [\n1&gt;              TYPE=CItem *\n1&gt;          ]\n1&gt;          Expressions of type void cannot be converted to other types\n\n\n1&gt;FunctionClass.cpp(line of the return statement): error C3499: a lambda that has been specified to have a void return type cannot return a value\n</code></pre>\n<p>Can somebody explain why? Wasn't is supposed for the lambda to automatically deduce the type to be returned from its return statement?</p>\n", "Title": "Lambda did not automatically deduce return type", "CreationDate": "2015-08-21T13:36:44.890", "LastActivityDate": "2015-08-21T13:48:37.930", "CommentCount": "3", "LastEditDate": "2017-05-23T10:29:18.923", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "32141754", "Score": "3", "OwnerUserId": "383779", "Tags": "<c++><lambda><return-type><type-deduction>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32141754_32141860_3": {"length": 6, "quality": 0.6, "section_id": 0}}, "n3337": {"so_32141754_32141860_0": {"length": 8, "quality": 1.0, "section_id": 5732}, "so_32141754_32141860_3": {"length": 10, "quality": 1.0, "section_id": 5732}}, "n4659": {"so_32141754_32141860_3": {"length": 7, "quality": 0.7, "section_id": 7667}}}});