post_cb({"21210417": {"Id": "21210417", "PostTypeId": "2", "Body": "<p>In last case you call default copy constructor.</p>\n", "LastActivityDate": "2014-01-18T21:57:49.917", "CommentCount": "0", "CreationDate": "2014-01-18T21:57:49.917", "ParentId": "21210360", "Score": "0", "OwnerUserId": "1554370"}, "bq_ids": {"n4140": {"so_21210360_21210565_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 603}, "so_21210360_21210565_0": {"length": 24, "quality": 1.0, "section_id": 451}, "so_21210360_21210565_1": {"length": 37, "quality": 0.9024390243902439, "section_id": 456}}, "n3337": {"so_21210360_21210565_3": {"length": 15, "quality": 0.8333333333333334, "section_id": 593}, "so_21210360_21210565_1": {"length": 39, "quality": 0.9512195121951219, "section_id": 447}, "so_21210360_21210565_0": {"length": 24, "quality": 1.0, "section_id": 442}, "so_21210360_21210565_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 447}}, "n4659": {"so_21210360_21210565_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 629}, "so_21210360_21210565_0": {"length": 24, "quality": 1.0, "section_id": 474}, "so_21210360_21210565_1": {"length": 37, "quality": 0.9024390243902439, "section_id": 479}}}, "21210565": {"Id": "21210565", "PostTypeId": "2", "Body": "<p>There are several C++ language rules in play here.</p>\n<ol>\n<li><p>A template cannot be a copy constructor. (Standard rule 12.8p2)</p>\n<blockquote>\n<p id=\"so_21210360_21210565_0\">A <strong>non-template</strong> constructor for class <code>X</code> is a copy constructor if its first parameter is of type <code>X&amp;</code>, const <code>X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments.</p>\n</blockquote></li>\n<li><p>If no copy constructor is defined, the compiler generates a default one (if possible). (Standard rule 12.8p7)</p>\n<blockquote>\n<p id=\"so_21210360_21210565_1\"><strong>If the class definition does not explicitly declare a copy constructor, one is declared implicitly.</strong> If the class definition declares a move constructor or move assignment operator, the implicitly declared copy constructor is defined as deleted; otherwise, it is defined as defaulted (8.4). The latter case is deprecated if the class has a user-declared copy assignment operator or a user-declared destructor. Thus, for the class de\ufb01nition</p>\n<pre><code>struct X {\n   X(const X&amp;, int);\n};\n</code></pre>\n<p id=\"so_21210360_21210565_2\">a copy constructor is implicitly-declared. If the user-declared constructor is later defined as <code>X::X(const X&amp; x, int i =0) { /\u2217 ... \u2217/ }</code>\n  then any use of <code>X</code>'s copy constructor is ill-formed because of the ambiguity; no diagnostic is required.</p>\n</blockquote></li>\n<li><p>If a template and non-template are an equally good match for the arguments, the non-template wins. (Standard rule 13.3.3)  The rule is a big hard-to-digest mess, I'll show just the important part:</p>\n<blockquote>\n<p id=\"so_21210360_21210565_3\">[...] a viable function <code>F1</code> is defined to be a better function than another viable function <code>F2</code> if [...rules about argument matching...] or, if not that, <code>F1</code> is a non-template function and <code>F2</code> is a function template specialization [...]</p>\n</blockquote></li>\n</ol>\n<p>From the code you provided, only</p>\n<pre><code>C&lt;int&gt;::C(const C&lt;int&gt;&amp;)\n</code></pre>\n<p>is a user-defined copy-constructor that prints <code>2</code>.  All <code>X</code> other than <code>int</code> don't define a copy-constructor, so the compiler creates one.</p>\n<p>See also</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1249814/templated-copy-constructor-fails-with-specific-templated-type\">Templated copy-constructor fails with specific templated type</a>\nand</li>\n<li><a href=\"https://stackoverflow.com/questions/15115859/initialization-ignores-constructor-templates\">initialization ignores constructor templates</a></li>\n</ul>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-18T23:12:12.193", "Score": "5", "CreationDate": "2014-01-18T22:15:30.907", "ParentId": "21210360", "CommentCount": "10", "OwnerUserId": "103167", "LastEditDate": "2017-05-23T12:11:42.660"}, "21210360": {"ViewCount": "121", "Body": "<p>Why the output is 0003212 ?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename X&gt; class C\n{\npublic:\n    C() { cout&lt;&lt;\"0\";}\n    template&lt;class T&gt; C(const C&lt;T&gt;&amp; c) { cout&lt;&lt;\"1\";}\n    C(const C&lt;int&gt;&amp; c) { cout&lt;&lt;\"2\";}\n    template&lt;class T&gt; C(const C&lt;T*&gt;&amp; c) { cout&lt;&lt;\"3\";}\n};\n\nint main(int argc, char* args[])\n{\n    C&lt;int&gt; c1;          // 0\n    C&lt;double&gt; c2;       // 0\n    C&lt;int*&gt; c3;         // 0\n\n    C&lt;int&gt; c4(c3);      // 3\n    C&lt;int&gt; c5(c1);      // 2\n    C&lt;int&gt; c6(c2);      // 1\n    C&lt;float&gt; c7(c1);    // 2\n    C&lt;double&gt; c8(c2);   // ?\n\n    std::cin.get();\n    return 0;\n}\n</code></pre>\n<p>What is invoked in the last meaning line?</p>\n<p>I can suppose that it's some auto-created ctor\nbut can't figure out which one.</p>\n", "AcceptedAnswerId": "21210565", "Title": "Why isn't this initialization using my (template) constructor?", "CreationDate": "2014-01-18T21:52:03.393", "Id": "21210360", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-01-18T22:58:35.890", "LastEditorUserId": "103167", "LastActivityDate": "2014-01-18T23:12:12.193", "Score": "3", "OwnerUserId": "2032538", "Tags": "<c++><templates><constructor>", "AnswerCount": "3"}, "21210383": {"Id": "21210383", "PostTypeId": "2", "Body": "<p>It's copy constructor generated for you by compiler, and since it's best match it's selected in last case.</p>\n", "LastEditorUserId": "1549474", "LastActivityDate": "2014-01-18T22:13:22.857", "Score": "4", "CreationDate": "2014-01-18T21:54:58.247", "ParentId": "21210360", "CommentCount": "2", "OwnerUserId": "1549474", "LastEditDate": "2014-01-18T22:13:22.857"}});