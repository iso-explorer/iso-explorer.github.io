post_cb({"bq_ids": {"n4140": {"so_36517178_36517265_0": {"length": 14, "quality": 1.0, "section_id": 6145}, "so_36517178_36517265_1": {"length": 16, "quality": 0.7272727272727273, "section_id": 6143}}, "n3337": {"so_36517178_36517265_0": {"length": 14, "quality": 1.0, "section_id": 5908}, "so_36517178_36517265_1": {"length": 16, "quality": 0.7272727272727273, "section_id": 5907}}, "n4659": {"so_36517178_36517265_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 7641}}}, "36517265": {"Id": "36517265", "PostTypeId": "2", "Body": "<p>In C++, see <a href=\"http://eel.is/c++draft/expr.add\">[expr.add]/7</a>:</p>\n<blockquote>\n<p id=\"so_36517178_36517265_0\">If two pointers [\u2026] both are null, and the two pointers are\n  subtracted, the result compares equal to the value <code>0</code> converted to\n  the type <code>std::ptrdiff_t</code>.</p>\n</blockquote>\n<p>(This also holds with <a href=\"http://webcache.googleusercontent.com/search?q=cache:mkV-de35tToJ:www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0137r0.html%20&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=de\">P0137</a>, which shortens this paragraph.)</p>\n<p>In C11, the behavior is apparently undefined as per 6.5.6/9:</p>\n<blockquote>\n<p id=\"so_36517178_36517265_1\">When two pointers are subtracted, <strong>both shall point to elements of the\n  same array object, or one past the last element of the array object</strong>;\n  the result is the difference of the subscripts of the two array\n  elements.</p>\n</blockquote>\n", "LastActivityDate": "2016-04-09T13:15:26.050", "CommentCount": "1", "CreationDate": "2016-04-09T13:15:26.050", "ParentId": "36517178", "Score": "6", "OwnerUserId": "3647361"}, "36517178": {"ViewCount": "104", "Body": "<p>Consider following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int *a = 0, *b = 0;\n    std::cout &lt;&lt; (a - b);\n}\n</code></pre>\n<p>At <a href=\"http://ideone.com/7addql\" rel=\"nofollow\">ideone</a> this code prints 0 as expected, but I'm not sure if it is well-defined behavior or not.</p>\n<p>I wonder if <code>(T*)0 - (T*)0</code> is well-defined or not? Is it guaranteed to be equal to <code>0</code>?<br>\nIs it same in C and C++? If not, what are the differences?</br></p>\n<p>(Of course, <code>T</code> is not <code>void</code> nor <code>std::nullptr_t</code>, because pointer arithmetic does not work for them.)</p>\n", "AcceptedAnswerId": "36517265", "Title": "Is `(T *)0 - (T *)0` well-defined to be 0?", "CreationDate": "2016-04-09T13:08:00.197", "LastActivityDate": "2016-04-09T14:41:50.547", "CommentCount": "2", "LastEditDate": "2016-04-09T14:41:50.547", "PostTypeId": "1", "Tags": "<c++><c><pointers><language-lawyer>", "Id": "36517178", "AnswerCount": "1", "Score": "2", "OwnerUserId": "2752075", "ClosedDate": "2016-04-09T13:14:59.077", "LastEditorUserId": "2752075"}});