post_cb({"bq_ids": {"n4140": {"so_47960894_47960894_0": {"length": 14, "quality": 0.875, "section_id": 5907}}, "n3337": {"so_47960894_47960894_0": {"length": 14, "quality": 0.875, "section_id": 5679}}, "n4659": {"so_47960894_47960894_0": {"length": 14, "quality": 0.875, "section_id": 7389}}}, "47960894": {"ViewCount": "95", "Body": "<p><a href=\"http://eel.is/c++draft/class.static#data-2\" rel=\"nofollow noreferrer\">[class.static.data]/2</a>:</p>\n<blockquote>\n<p id=\"so_47960894_47960894_0\">The declaration of a non-inline static data member in its class\n  definition is not a definition and may be of an incomplete type other\n  than <em>cv</em> <code>void</code>. ...</p>\n</blockquote>\n<p>That means, this is a valid code:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct S\n{\n   static S s;\n};\n\nS S::s;\n\nint main()\n{\n    std::cout &lt;&lt; &amp;(S::s) &lt;&lt; '\\n';\n    std::cout &lt;&lt; &amp;(S::S::s) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>The snippet above prints the same address for <code>&amp;(S::s)</code> and <code>&amp;(S::S::s)</code>.</p>\n<p>What is the reason for allowing such a construction in C++?</p>\n", "Title": "Why does C++ allow for the declaration of an incomplete type inside its own definition?", "CreationDate": "2017-12-24T13:15:09.117", "LastActivityDate": "2017-12-24T13:53:31.177", "CommentCount": "9", "LastEditDate": "2017-12-24T13:53:31.177", "PostTypeId": "1", "LastEditorUserId": "487892", "Id": "47960894", "Score": "1", "OwnerUserId": "4463557", "Tags": "<c++><incomplete-type><static-data>", "AnswerCount": "0"}});