post_cb({"34835609": {"Id": "34835609", "PostTypeId": "2", "Body": "<p>As mentioned above inline and constexpr functions can be defined multiple times. But they should be only defined only once in each compilation units. By extension if you define them in the header and include the header in multiple compilation units they can be only defined once in the header file. <strong>NOTE:</strong> They should also have the same signature otherwise the behavior is undefined. </p>\n<p>Both inline functions and constexpr functions are resolved at compile time and that is the reason it is possible to have multiple definitions across compilation units as long as you don't violate the ODR(one definition rule) within the compilation unit.</p>\n<p>Please see the relevant excerpts from the C++ standard document:</p>\n<blockquote>\n<h3>7.1.5 The constexpr specifier</h3>\n<p id=\"so_34835430_34835609_0\">constexpr functions and constexpr constructors are implicitly\n  inline functions (7.1.2).</p>\n<h3>3.2 One-definition rule</h3>\n<p id=\"so_34835430_34835609_1\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used\n  in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found\n  in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and\n  12.8). An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n", "LastEditorUserId": "2070994", "LastActivityDate": "2016-01-17T13:58:31.670", "Score": "0", "CreationDate": "2016-01-17T06:00:13.613", "ParentId": "34835430", "CommentCount": "0", "OwnerUserId": "2070994", "LastEditDate": "2016-01-17T13:58:31.670"}, "bq_ids": {"n4140": {"so_34835430_34835609_1": {"length": 32, "quality": 0.8888888888888888, "section_id": 7041}, "so_34835430_34835609_0": {"length": 6, "quality": 0.75, "section_id": 5418}}, "n3337": {"so_34835430_34835609_1": {"length": 32, "quality": 0.8888888888888888, "section_id": 6786}, "so_34835430_34835609_0": {"length": 6, "quality": 0.75, "section_id": 5213}}, "n4659": {"so_34835430_34835609_1": {"length": 32, "quality": 0.8888888888888888, "section_id": 8538}}}, "34835488": {"Id": "34835488", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34835430_34835488_0\">Unlike other functions, <code>inline</code> and <code>constexpr</code> functions may be defined multiple times in the program.</p>\n</blockquote>\n<p>Say you have a.h:</p>\n<pre><code>inline int foo() { return 10; }\nconstexpr int bar() { return 20; }\n</code></pre>\n<p>Now, you <code>#include</code> the file in couple of <code>.cpp</code> files.</p>\n<p>file1.cpp:</p>\n<pre><code>#include \"a.h\"\n\n// ... other functions\n</code></pre>\n<p>file2.cpp:</p>\n<pre><code>#include \"a.h\"\n\n// ... other functions\n\nint main() { return 0; }\n</code></pre>\n<p>When you compile those files, the functions <code>foo</code> and <code>bar</code> are defined in the object code of file1.cpp as well as the object code of file2.cpp. When you link those object code to create an executable, there are two definitions each of <code>foo</code> and <code>bar</code>. This is legal.</p>\n<p>However, you are not allowed to have multiple definitions of the same <code>inline</code> function or <code>constexpr</code> function in the same compilation unit.</p>\n<p>Using:</p>\n<pre><code>inline int foo() { return 10; }\ninline int foo() { return 10; }\n</code></pre>\n<p>or</p>\n<pre><code>constexpr int bar() { return 20; }\nconstexpr int bar() { return 20; }\n</code></pre>\n<p>in a single cpp file is not legal.</p>\n", "LastActivityDate": "2016-01-17T05:39:23.603", "CommentCount": "1", "CreationDate": "2016-01-17T05:39:23.603", "ParentId": "34835430", "Score": "2", "OwnerUserId": "434551"}, "34835430": {"ViewCount": "403", "Body": "<p>This is my knowledge about function declaration and definition. If there is anything wrong, please correct me.</p>\n<pre><code>// Function Declaration\n// This is usually put in .h header file\nint occur (const char* sentence, const char&amp; achar);\n\n// Function Definition\n// This is usually put in .cpp\nint occur (const char* sentence, const char&amp; achar) { // do job and return }\n</code></pre>\n<p>I am reading the \"C++ Primer 5th Edition\". Under \"inline and constexpr functions @ Chapter 6.5.2 P.240\", it says</p>\n<blockquote>\n<p id=\"so_34835430_34835430_0\">Unlike other functions, inline and constexpr functions may be defined\n  multiple times in the program.</p>\n</blockquote>\n<p>I come up with something like this in my head:</p>\n<pre><code>// function delcaration .h file\nconstexpr int returnfour();\n\n// function definition in .cpp file\nconstexpr int returnfour () { return 4; }\nconstexpr int returnfour () { return 4; }\n</code></pre>\n<p>Is it correct to have multiple definitions like this? What does <code>defined multiple times in the program</code> mean and when does someone want to do it?</p>\n", "AcceptedAnswerId": "34835488", "Title": "Meaning of multiple definitions for inline or constexpr function", "CreationDate": "2016-01-17T05:27:29.113", "Id": "34835430", "CommentCount": "0", "LastEditDate": "2016-01-17T06:36:45.093", "PostTypeId": "1", "LastEditorUserId": "5113701", "LastActivityDate": "2016-01-17T13:58:31.670", "Score": "1", "OwnerUserId": "5113701", "Tags": "<c++><function><declaration><definition>", "AnswerCount": "3"}, "34835538": {"Id": "34835538", "PostTypeId": "2", "Body": "<p>A function declaration provides information to the compiler about the function's name, the number and type of arguments it accepts, and its return value.   The compiler uses this information to check statements that attempt to call the function.</p>\n<p>A function definition is a specific type of declaration that also includes a compound statement that implements the function (the part between the <code>{</code> and <code>}</code> of the function body).</p>\n<p>The statement about <code>inline</code> and <code>constexpr</code> functions having more than one definition does not mean that the definition can be repeated multiple times in a single compilation unit.    C++ has a separate compilation model, so the compiler does not have visibility of function definitions in one compilation unit when compiling another.    However, multiple compilation units can each define an <code>inline</code> or <code>constexpr</code> function  (e.g. by each <code>#include</code>ing the same header).   The results - for the program as a whole - are undefined if different compilation units have non-equivalent definitions of the same function.    A result of this is that the code for <code>constexpr</code> and <code>inline</code> functions may be duplicated within the program (e.g. inlined in multiple places, not inlined but implemented locally within an object file in a manner that is not visible to other compilation units, etc) and it is up to the compiler (usually working with other parts of the build chain) to ensure this happens in a consistent manner across compilation units.</p>\n", "LastActivityDate": "2016-01-17T05:46:09.050", "CommentCount": "0", "CreationDate": "2016-01-17T05:46:09.050", "ParentId": "34835430", "Score": "1", "OwnerUserId": "4706785"}});