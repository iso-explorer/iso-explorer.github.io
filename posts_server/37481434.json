post_cb({"37481695": {"ParentId": "37481434", "CommentCount": "0", "Body": "<p>The <code>static_cast&lt;B *&gt;(&amp;a)</code> causes undefined behaviour.</p>\n<p>C++14 [expr.static.cast]/11:</p>\n<blockquote>\n<p id=\"so_37481434_37481695_0\">[...]  If the prvalue of type \u201cpointer to cv1 <code>B</code>\u201d points to a <code>B</code> that is actually a subobject of an object of type <code>D</code>, the resulting pointer points to the enclosing object of type <code>D</code>. Otherwise, the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "37481695", "Score": "1", "CreationDate": "2016-05-27T10:57:04.320", "LastActivityDate": "2016-05-27T10:57:04.320"}, "37481434": {"CommentCount": "8", "CreationDate": "2016-05-27T10:45:29.480", "PostTypeId": "1", "AcceptedAnswerId": "37481695", "LastEditorUserId": "3545094", "LastActivityDate": "2016-05-27T10:57:04.320", "LastEditDate": "2016-05-27T10:51:43.450", "ViewCount": "140", "FavoriteCount": "1", "Title": "Exactly what is unsafe about this static_cast?", "Id": "37481434", "Score": "0", "Body": "<p>I have written a small example of an unsafe <code>static_cast</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    virtual int getA(){ return 1; }\n};\n\nclass B : public A\n{\npublic:\n    virtual int getA() { return 2; }\n    int getB() { return 3; }\n};\n\nint main()\n{\n    A a;\n    B b;\n    B* b1 = static_cast&lt;B*&gt;(&amp;a);\n\n    std::cout &lt;&lt; \"b.getA(): \" &lt;&lt; b.getA() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"b.getB(): \" &lt;&lt; b.getB() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"b1-&gt;getA(): \" &lt;&lt; b1-&gt;getA() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"b1-&gt;getB(): \" &lt;&lt; b1-&gt;getB() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The output:</p>\n<pre><code>b.getA(): 2\nb.getB(): 3\nb1-&gt;getA(): 1\nb1-&gt;getB(): 3\n</code></pre>\n<p>I consider it unsafe because I never run the <code>B</code> constructor when creating <code>b1</code>, though accessing it as a <code>B</code> object. Obviously the difference in output shows that <code>b1</code> does not point to a <code>B</code> object but an <code>A</code> object, as expected.</p>\n<p>What other aspects of this is unsafe. Does it involve undefined behavior to even perform the <code>static_cast</code> like this? Otherwise, is it perhaps undefined behavior to access the <code>getA</code> or <code>getB</code> methods?</p>\n<p>Anything else? (i don't care about the missing virtual destructor which i don't care about in this example)</p>\n<p>Code available on cpp.sh: <a href=\"http://cpp.sh/7sxtz\" rel=\"nofollow\">http://cpp.sh/7sxtz</a></p>\n", "Tags": "<c++><undefined-behavior><static-cast>", "OwnerUserId": "3545094", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37481434_37481628_5": {"section_id": 7239, "quality": 1.0, "length": 10}, "so_37481434_37481628_8": {"section_id": 45, "quality": 1.0, "length": 4}, "so_37481434_37481628_4": {"section_id": 7239, "quality": 1.0, "length": 8}, "so_37481434_37481628_0": {"section_id": 7239, "quality": 0.875, "length": 14}, "so_37481434_37481628_3": {"section_id": 7239, "quality": 1.0, "length": 6}, "so_37481434_37481695_0": {"section_id": 6037, "quality": 0.9444444444444444, "length": 17}, "so_37481434_37481628_2": {"section_id": 7239, "quality": 1.0, "length": 5}, "so_37481434_37481628_6": {"section_id": 7239, "quality": 0.9130434782608695, "length": 21}, "so_37481434_37481628_7": {"section_id": 7239, "quality": 1.0, "length": 9}}, "n3337": {"so_37481434_37481628_5": {"section_id": 6983, "quality": 1.0, "length": 10}, "so_37481434_37481628_8": {"section_id": 42, "quality": 1.0, "length": 4}, "so_37481434_37481628_4": {"section_id": 6983, "quality": 1.0, "length": 8}, "so_37481434_37481628_0": {"section_id": 6983, "quality": 0.875, "length": 14}, "so_37481434_37481628_3": {"section_id": 6983, "quality": 1.0, "length": 6}, "so_37481434_37481695_0": {"section_id": 5805, "quality": 0.8888888888888888, "length": 16}, "so_37481434_37481628_2": {"section_id": 6983, "quality": 1.0, "length": 5}, "so_37481434_37481628_6": {"section_id": 6983, "quality": 0.9130434782608695, "length": 21}, "so_37481434_37481628_7": {"section_id": 6983, "quality": 1.0, "length": 9}}, "n4659": {"so_37481434_37481695_0": {"section_id": 7536, "quality": 0.9444444444444444, "length": 17}, "so_37481434_37481628_7": {"section_id": 8748, "quality": 1.0, "length": 9}, "so_37481434_37481628_4": {"section_id": 8748, "quality": 1.0, "length": 8}, "so_37481434_37481628_3": {"section_id": 8748, "quality": 1.0, "length": 6}, "so_37481434_37481628_0": {"section_id": 8748, "quality": 0.875, "length": 14}, "so_37481434_37481628_5": {"section_id": 8748, "quality": 1.0, "length": 10}, "so_37481434_37481628_2": {"section_id": 8748, "quality": 1.0, "length": 5}, "so_37481434_37481628_6": {"section_id": 8748, "quality": 0.9130434782608695, "length": 21}, "so_37481434_37481628_8": {"section_id": 46, "quality": 1.0, "length": 4}}}, "37481628": {"ParentId": "37481434", "CommentCount": "0", "Body": "<p>Accessing the value of <code>*b1</code> after carrying out that <code>static_cast</code> is undefined behaviour:</p>\n<blockquote>\n<p id=\"so_37481434_37481628_0\"><code>[basic.lval]/10 (N3337):</code>\n  If a program attempts to access the stored value of an object through a glvalue of other than one of the\n  following types the behavior is undefined</p>\n<p id=\"so_37481434_37481628_1\">\u2014 the dynamic type of the object,</p>\n<p id=\"so_37481434_37481628_2\">\u2014 a cv-qualified version of the dynamic type of the object,</p>\n<p id=\"so_37481434_37481628_3\">\u2014 a type similar (as defined in 4.4) to the dynamic type of the object,</p>\n<p id=\"so_37481434_37481628_4\">\u2014 a type that is the signed or unsigned type corresponding to the dynamic type of the object,</p>\n<p id=\"so_37481434_37481628_5\">\u2014 a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type\n  of the object,</p>\n<p id=\"so_37481434_37481628_6\">\u2014 an aggregate or union type that includes one of the aforementioned types among its elements or non-\n  static data members (including, recursively, an element or non-static data member of a subaggregate\n  or contained union),</p>\n<p id=\"so_37481434_37481628_7\">\u2014 a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</p>\n<p id=\"so_37481434_37481628_8\">\u2014 a char or unsigned char type.</p>\n</blockquote>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "37481628", "Score": "1", "CreationDate": "2016-05-27T10:54:32.340", "LastActivityDate": "2016-05-27T10:54:32.340"}});