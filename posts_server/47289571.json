post_cb({"bq_ids": {"n4140": {"so_47289571_47290014_0": {"length": 17, "quality": 0.68, "section_id": 3614}}, "n3337": {"so_47289571_47290014_0": {"length": 17, "quality": 0.68, "section_id": 3476}}, "n4659": {"so_47289571_47290014_0": {"length": 17, "quality": 0.68, "section_id": 4378}}}, "47290014": {"Id": "47290014", "PostTypeId": "2", "Body": "<p><code>uniform_int_distribution</code>s constructor is as follows:</p>\n<pre><code>explicit uniform_int_distribution( IntType a = 0,\n    IntType b = std::numeric_limits&lt;IntType&gt;::max() );\n</code></pre>\n<p>By default, it returns an integer which covers <em>all</em> positive values of that type. The range <em>includes</em> the value of the second parameter. If it wouldn't, it would be cumbersome to specify we want all positive integers.</p>\n<p><strike><a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/uniform_int_distribution\" rel=\"nofollow noreferrer\">cppreference.com</a> does not document it, but the C++ standard does:</strike> <a href=\"https://stackoverflow.com/questions/47289571/the-program-does-not-crash-neither-executes-completely/47290014#comment81541818_47290014\">Thanks @Cubbi</a><br>\nThis is documented <a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution\" rel=\"nofollow noreferrer\">on cppreference.com</a>, or in the C++ standard:</br></p>\n<blockquote>\n<p id=\"so_47289571_47290014_0\"><strong>26.5.8.2.1  Class template uniform_int_distribution</strong>  [rand.dist.uni.int]<br>\n  1  A uniform_int_distribution random number\n  distribution produces random integers i, a \u2264 i \u2264 b, distributed\n  according to the constant discrete probability function<br>\n<em>[...]</em><br>\n<code>// constructors and reset functions\n  explicit uniform_int_distribution(IntType a = 0, IntType b = numeric_limits&lt;IntType&gt;::max());</code></br></br></br></p>\n</blockquote>\n<p>Here:</p>\n<pre><code>  uniform_int_distribution&lt;&gt; int_distribution(MIN, MAX);\n  for(unsigned int i = 0; i &lt; MAX_ITERATIONS; ++i){\n    random = int_distribution(engine);\n    Event event_x = population.at(random);\n\n    random = int_distribution(engine);\n    Event event_y = population.at(random);\n</code></pre>\n<p><code>random</code> can take the value <code>MAX</code>, which is out of the bounds of the <code>population</code> vector.</p>\n", "LastEditorUserId": "3435400", "LastActivityDate": "2017-11-14T21:43:37.887", "Score": "1", "CreationDate": "2017-11-14T15:53:50.280", "ParentId": "47289571", "CommentCount": "2", "LastEditDate": "2017-11-14T21:43:37.887", "OwnerUserId": "3435400"}, "47289571": {"ViewCount": "47", "Body": "<p>it has been a few hours since I am dealing with this issue. I was wondering if someone could point out what am I doing wrong, and if possible - how to fix it. Essentially, I am simply trying to generate <code>n</code> number of object pairs and store them into a <code>vector&lt;pair&lt;Foo, Foo&gt;&gt;</code>. The algorithm involves random number generator. I use STL <code>&lt;random&gt;</code> and its components like <code>m19937</code>, <code>uniform_real_distribution</code> and <code>uniform_int_distribution</code>. Below is the simplified version of what I am trying to do representing the case I got at hand. The second loop always cuts short. However, I fail to see the reason why. Essentially, I never get to see the program execute completely. The last two messages never show. </p>\n<p><strong>program</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;random&gt;\n#include &lt;utility&gt;\n\n// utility\nusing std::pair;\n\n// random\nusing std::mt19937;\nusing std::uniform_int_distribution;\nusing std::uniform_real_distribution;\n\n// iostream\nusing std::cout;\nusing std::endl;\n\n// vector\nusing std::vector;\n\nclass Event{\nprivate:\n  double x, y;\npublic:\n  Event(const double X, const double Y);\n};\n\nEvent::Event(const double X, const double Y): x(X), y(Y){}\n\nint main(){\n  cout &lt;&lt; \"Initializing storage...\" &lt;&lt; endl;\n  vector&lt;Event&gt; population;\n  vector&lt;pair&lt;Event,Event&gt;&gt; selection;\n\n  cout &lt;&lt; \"Initializing necessary member variables...\" &lt;&lt; endl;\n  const unsigned int SEED = 14112017;\n  const unsigned int MAX_ITERATIONS = 10000;\n\n  const double MIN = 1;\n  const double MAX = 10000;\n\n  mt19937 engine(SEED);\n\n  cout &lt;&lt; \"Generating the initial population...\" &lt;&lt; endl;\n  uniform_real_distribution&lt;&gt; real_distribution(MIN, MAX);\n  for(unsigned int i = 0; i &lt; MAX_ITERATIONS; ++i){\n    double x = real_distribution(engine);\n    double y = real_distribution(engine);\n\n    Event event(x, y);\n\n    population.push_back(event);\n  }\n  cout &lt;&lt; \"Success! The initial population has been generated successfully\" &lt;&lt; endl;\n\n  population.shrink_to_fit();\n\n  cout &lt;&lt; \"Starting the selection process...\" &lt;&lt; endl;\n  unsigned int random = 0;\n  uniform_int_distribution&lt;&gt; int_distribution(MIN, MAX);\n  for(unsigned int i = 0; i &lt; MAX_ITERATIONS; ++i){\n    random = int_distribution(engine);\n    Event event_x = population.at(random);\n\n    random = int_distribution(engine);\n    Event event_y = population.at(random);\n\n    pair&lt;Event, Event&gt; bound(event_x, event_y);\n\n    selection.push_back(bound);\n  }\n  cout &lt;&lt; \"Success! The selection process has been completed successfully\" &lt;&lt; endl;\n\n  selection.shrink_to_fit();\n\n  cout &lt;&lt; \"population size: \" &lt;&lt; population.size() &lt;&lt; endl;\n  cout &lt;&lt; \"selection size: \" &lt;&lt; selection.size() &lt;&lt; endl;\n\n  return 0;\n}\n</code></pre>\n<p>I compile the above using cygwins C++ compiler, and I execute the code in command-prompt. The OS is Windows 10 x64. The box has 32 GB memory. </p>\n", "AcceptedAnswerId": "47290014", "Title": "The program does not crash neither executes completely", "CreationDate": "2017-11-14T15:32:18.577", "Id": "47289571", "CommentCount": "6", "LastEditDate": "2017-11-14T16:00:40.810", "PostTypeId": "1", "LastEditorUserId": "902497", "LastActivityDate": "2017-11-14T21:43:37.887", "Score": "1", "OwnerUserId": "2346144", "Tags": "<loops><c++11><random>", "AnswerCount": "1"}});