post_cb({"bq_ids": {"n4140": {"so_8092670_8092791_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 3286}, "so_8092670_8092754_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 593}, "so_8092670_8092791_1": {"length": 19, "quality": 0.7037037037037037, "section_id": 3291}, "so_8092670_8092791_3": {"length": 11, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_8092670_8092791_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 3156}, "so_8092670_8092754_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 3156}, "so_8092670_8092791_1": {"length": 21, "quality": 0.7777777777777778, "section_id": 3161}, "so_8092670_8092791_3": {"length": 11, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_8092670_8092754_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 616}, "so_8092670_8092791_1": {"length": 19, "quality": 0.7037037037037037, "section_id": 4053}, "so_8092670_8092791_3": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}}}, "8092791": {"Id": "8092791", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8092670_8092791_0\"><code>[2003: 8.5/9]:</code> <strong>If no initializer is specified for an object, and the\n  object is of (possibly cv-qualified) non-POD class type</strong> (or array\n  thereof), <strong>the object shall be default-initialized; if the object is of\n  const-qualified type, the underlying class type shall have a\n  user-declared default constructor. Otherwise,</strong> if no initializer is\n  specified for a nonstatic object, the object and its subobjects, if\n  any, have an indeterminate initial value; <strong>if the object or any of\n  its subobjects are of const-qualified type, the program is ill-formed.</strong></p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_8092670_8092791_1\"><code>[n3290: 8.5/11]:</code> <strong>If no initializer is specified for an object, the object is default-initialized;</strong> if no initialization is\n  performed, an object with automatic or dynamic storage duration has\n  indeterminate value. [ <em>Note:</em> Objects with static or thread storage\n  duration are zero-initialized, see 3.6.2._ \u2014end note_ ]</p>\n<p id=\"so_8092670_8092791_2\"><code>[n3290: 8.5/6]:</code> To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><strong>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</strong></li>\n<li>if <code>T</code> is an array type, each element is default-initialized;</li>\n<li>otherwise, no initialization is performed.</li>\n</ul>\n<p id=\"so_8092670_8092791_3\"><strong>If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor.</strong></p>\n</blockquote>\n<p>So MSVC is more permissive here than both standards mandate.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-11-11T10:46:48.673", "Score": "3", "CreationDate": "2011-11-11T10:41:22.683", "ParentId": "8092670", "CommentCount": "0", "LastEditDate": "2011-11-11T10:46:48.673", "OwnerUserId": "560648"}, "8092754": {"Id": "8092754", "PostTypeId": "2", "Body": "<p><strong>The C++03 Standard:</strong> </p>\n<p><strong>8.5 [dcl.init] paragraph 9</strong></p>\n<blockquote>\n<p id=\"so_8092670_8092754_0\">If no initializer is specified for an object, and the object is of (possibly cv-qualified) non-POD class type (or array thereof), the object shall be default-initialized; if the object is of const-qualified type, the underlying class type shall have a user-declared default constructor.</p>\n</blockquote>\n<p>From the above the error in gcc seems to be perfectly valid.</p>\n", "LastActivityDate": "2011-11-11T10:38:14.790", "Score": "13", "CreationDate": "2011-11-11T10:38:14.790", "ParentId": "8092670", "CommentCount": "1", "OwnerUserId": "452307"}, "8092670": {"ViewCount": "10001", "Body": "<p>This compiles perfectly fine with the current MSVC compiler:</p>\n<pre><code>struct Foo\n{\n} const foo;\n</code></pre>\n<p>However, it fails to compile with the current g++ compiler:</p>\n<pre><code>error: uninitialized const 'foo' [-fpermissive]\nnote: 'const struct Foo' has no user-provided default constructor\n</code></pre>\n<p>If I provide a default constructor myself, it works:</p>\n<pre><code>struct Foo\n{\n    Foo() {}\n} const foo;\n</code></pre>\n<p>Is this another case of MSVC being too permissive, or is g++ too strict here?</p>\n", "AcceptedAnswerId": "8092754", "Title": "uninitialized const", "CreationDate": "2011-11-11T10:30:16.863", "Id": "8092670", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2011-11-11T10:46:48.673", "Score": "14", "OwnerUserId": "252000", "Tags": "<c++><visual-c++><g++><const><default-constructor>", "AnswerCount": "3"}, "8092725": {"Id": "8092725", "PostTypeId": "2", "Body": "<p>I don't know the exact wording of the standard, but the error in g++ seems quite more sensible than the option of not saying anything. Consider this:</p>\n<pre><code>struct X {\n   int value;\n};\nconst X constant; // constant.value is undefined\n</code></pre>\n<p>Not in the case of a user provided default constructor (even if it does nothing) the compiler will call that constructor and the object will be <em>initialized</em> (by whatever definition of <em>initialized</em> you have implemented in your constructor).</p>\n", "LastActivityDate": "2011-11-11T10:35:21.073", "Score": "1", "CreationDate": "2011-11-11T10:35:21.073", "ParentId": "8092670", "CommentCount": "0", "OwnerUserId": "36565"}});