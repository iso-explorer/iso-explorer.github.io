post_cb({"26975876": {"CommentCount": "1", "ViewCount": "4109", "PostTypeId": "1", "LastEditorUserId": "752976", "CreationDate": "2014-11-17T15:19:51.333", "LastActivityDate": "2014-11-17T16:03:55.323", "Title": "Is std::cout buffered?", "FavoriteCount": "2", "LastEditDate": "2014-11-17T15:46:29.710", "Id": "26975876", "Score": "16", "Body": "<p>Just reading an old but interesting article by \"Scott Meyers\" </p>\n<p><a href=\"http://aristeia.com/Papers/C++ReportColumns/novdec95.pdf\">http://aristeia.com/Papers/C++ReportColumns/novdec95.pdf</a></p>\n<p>Basically it is about preferring to use <code>'\\n'</code> over <code>std::endl</code> (which I agree with and have used the same augment for years).</p>\n<p><strong>BUT</strong> the last section indicates this was not included in his book because the whole thing was rendered moot because of two points:</p>\n<ol>\n<li><code>std::cout</code> was not buffered.</li>\n<li>The state of <code>ios::unitbuf</code> on std::cout is not explicitly defined (thus implementation dependent).</li>\n</ol>\n<p>I did a quick look but could not find an explicit standards reference for <code>1</code> was true. Is <code>std::cout</code> unbuffered contrary to what I have always understood?</p>\n", "Tags": "<c++><cout>", "OwnerUserId": "14065", "AnswerCount": "5"}, "26976002": {"ParentId": "26975876", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Yes, it's buffered:</p>\n<blockquote>\n<p id=\"so_26975876_26976002_0\">C++11 27.4.2 [narrow.stream.objects]/3\n  : The object <code>cout</code> controls output to a stream buffer associated with the object <code>stdout</code></p>\n</blockquote>\n<p>The article refers to a 1995 draft version of what became the C++98 standard. I've no idea whether or not that might have said something different.</p>\n<p>As for point 2, <code>unitbuf</code> is initially false on all streams (specified by the post-conditions of the <code>basic_ios</code> constructor), except for <code>cerr</code> and <code>wcerr</code> which explicitly specify otherwise. Again, that may well be different in the ancient draft being referred to.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-11-17T15:36:36.273", "Id": "26976002", "Score": "16", "CreationDate": "2014-11-17T15:25:53.653", "LastActivityDate": "2014-11-17T15:36:36.273"}, "26975996": {"ParentId": "26975876", "CommentCount": "5", "Body": "<p>From what I read form <a href=\"https://social.msdn.microsoft.com/Forums/en-US/415aac5f-0bf1-4ad1-a673-597ac042d36f/is-cout-buffered-or-not-?forum=vclanguage\" rel=\"nofollow\">here</a>, cout is usually buffered, but when it detects that it prints to an interactive environment, like the console, it falls back to unbuffered. </p>\n<p>So if you redirect the output (using the '&gt;' in UNIX) then the buffered behavior kicks in. </p>\n<p>More details in the linked post.</p>\n", "OwnerUserId": "2972255", "PostTypeId": "2", "Id": "26975996", "Score": "2", "CreationDate": "2014-11-17T15:25:40.427", "LastActivityDate": "2014-11-17T15:25:40.427"}, "26976039": {"ParentId": "26975876", "CommentCount": "0", "Body": "<p>According to this page -- <a href=\"http://www.programmingincpp.com/flush-the-output-stream-buffer.html\" rel=\"nofollow\">http://www.programmingincpp.com/flush-the-output-stream-buffer.html</a> -- std::cout is buffered.  I have had something fail to print because a program crash happened after the cout &lt;&lt; ... statement but before it was flushed:</p>\n<pre><code>cout &lt;&lt; \"My error or flag message, but it's not flushed, so I never see it\";\n\n//system crash!\n\ncout &lt;&lt; endl;\n</code></pre>\n", "OwnerUserId": "2216129", "PostTypeId": "2", "Id": "26976039", "Score": "2", "CreationDate": "2014-11-17T15:27:45.943", "LastActivityDate": "2014-11-17T15:27:45.943"}, "26976258": {"ParentId": "26975876", "CommentCount": "1", "Body": "<p>The C++ standard defines all input and output as being \"as if\" all reading and writing ultimately happened via reads and writes of C streams ([iostream.objects.overview]):</p>\n<blockquote>\n<p id=\"so_26975876_26976258_0\">The header  declares objects that associate objects with the standard C streams provided for by the functions declared in  (27.9.2), and includes all the headers necessary to use these objects.</p>\n</blockquote>\n<p>For the behavior of the standard C streams attached to those objects, we have to refer to the C standard (\u00a77.19.3):</p>\n<blockquote>\n<p id=\"so_26975876_26976258_1\">At program startup, three text streams are predefined and need not be opened explicitly\n  \u2014 standard input (for reading conventional input), standard output (for writing\n  conventional output), and standard error (for writing diagnostic output). As initially\n  opened, the standard error stream is not fully buffered; the standard input and standard\n  output streams are fully buffered if and only if the stream can be determined not to refer\n  to an interactive device.</p>\n</blockquote>\n<p>Here I'm quoting from the C99 standard, but I'm reasonably certain that (modulo changes in section numbering) the same is in all versions of the C standard.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "26976258", "Score": "9", "CreationDate": "2014-11-17T15:39:01.210", "LastActivityDate": "2014-11-17T15:39:01.210"}, "26976747": {"ParentId": "26975876", "CommentCount": "0", "Body": "<p>First, there is no requirement that <code>std::cout</code> (or even <code>std::cerr</code>) be\nunbuffered.  The only requirement is that <code>std::cerr</code> have\n<code>std::basic_ios::unitbuf</code> set (so that it will flush at the end of each\noutput function: <code>&lt;&lt;</code> or a non-formatted output function).  On the other\nhand, unless you've called <code>std::basic_ios::sync_with_stdio(false)</code>,\noutputting to the C++ streams and outputting to the corresponding\nC streams (i.e. <code>std::cout</code> and <code>stdout</code>) must have the same effects.\nIn theory, this can be done in several ways: <code>stdout</code> functions can\nforward to those of <code>std::cout</code>, <code>std::cout</code> output can forward to\n<code>stdout</code>, or they can share some common buffer implementation under the\nhood.  In practice, practically all implementations have <code>std::cout</code>\nforwarding to <code>stdout</code>.</p>\n<p>C specifies that <code>stderr</code> not be fully buffered, and that <code>stdout</code> may\nbe fully buffered only if it can be determined not to refer to an\ninteractive device (for some implementation defined meaning of\n\"interactive device\").  Typically, <code>stdout</code> will be line buffered (a\nconcept which doesn't exist in iostream), and <code>stderr</code> will be\nunbuffered, but that's not guaranteed by the C standard (and may not be\ntrue today\u2014the last time I really looked was over twenty years\nago).  Anyway, an implementation which just forwards to <code>stdout</code> will\nfollow the rules of the C implementation it forwards to, and one that\ndoesnt' still needs to take some steps to ensure that output to\n<code>std::cout</code> and <code>stdout</code> comes out in the right order, and that <code>stdout</code>\nbehaves \"as if\" it obeyed the C rules.</p>\n<p>If you're worried about performance, then you might want to run some\ntrials.  Try measuring the time it takes to output to an <code>std::ofstream</code>\nyou've opened yourself, versus the time it takes to output to\n<code>std::cout</code> (both with and without having called <code>sync_with_stdio</code>),\nwith the output redirected.  The differences should be interesting.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "26976747", "Score": "10", "CreationDate": "2014-11-17T16:03:55.323", "LastActivityDate": "2014-11-17T16:03:55.323"}, "bq_ids": {"n4140": {"so_26975876_26976258_0": {"section_id": 1919, "quality": 0.8823529411764706, "length": 15}, "so_26975876_26976002_0": {"section_id": 1925, "quality": 0.6923076923076923, "length": 9}}, "n3337": {"so_26975876_26976258_0": {"section_id": 1908, "quality": 0.8823529411764706, "length": 15}, "so_26975876_26976002_0": {"section_id": 1914, "quality": 0.6923076923076923, "length": 9}}, "n4659": {"so_26975876_26976258_0": {"section_id": 2190, "quality": 0.8823529411764706, "length": 15}, "so_26975876_26976002_0": {"section_id": 2196, "quality": 0.6923076923076923, "length": 9}}}});