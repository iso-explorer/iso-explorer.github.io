post_cb({"16767901": {"CommentCount": "0", "AcceptedAnswerId": "16769188", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2013-05-27T07:01:02.667", "LastActivityDate": "2016-07-01T10:41:37.357", "LastEditDate": "2016-07-01T10:41:37.357", "ViewCount": "2376", "FavoriteCount": "1", "Title": "Variadic macro with no arguments for its variadic parameter", "Id": "16767901", "Score": "4", "Body": "<p>Is it legal to invoke a variadic macro <code>M</code> with no arguments for its variadic parameter?</p>\n<p>The relevant standard quote is <em>[cpp.replace]/4</em>:</p>\n<blockquote>\n<p id=\"so_16767901_16767901_0\">If the identifier-list in the macro definition does not end with an ellipsis, the number of arguments (including those arguments consisting of no preprocessing tokens) in an invocation of a function-like macro shall equal the number of parameters in the macro definition. Otherwise, there shall be more arguments in the invocation than there are parameters in the macro definition (excluding the <code>...</code>). There shall exist a <code>)</code> preprocessing token that terminates the invocation.</p>\n</blockquote>\n<p>For the case with no non-variadic parameters, an invocation in the form <code>M()</code> should be legal as the invocation has one argument (consisting of no preprocessing tokens). So there is one more argument than non-variadic parameters.</p>\n<p>For the case with one non-variadic parameter, should there be a trailing <code>,</code> as in <code>M(1,)</code> to introduce an argument consisting of no preprocessing tokens for the variadic parameter? Otherwise, the number of arguments would be equal to the number of non-variadic parameters. i.e.,</p>\n<pre><code>#define variadic(x,...) #__VA_ARGS__\n\nvariadic(1,) // 2 arguments: ok\nvariadic(1) // 1 argument: wrong?\n</code></pre>\n<p>Both <em>Clang</em> and <em>GCC</em>, however, accept the following test case:</p>\n<pre><code>#include &lt;iostream&gt;\n\n#define variadic(x,...) #__VA_ARGS__\n\nint main()\n{\n    std::cout &lt;&lt; \"'\" variadic(1) \"'\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>and produce as output:</p>\n<pre><code>''\n</code></pre>\n<p>Is this non-standard behavior?</p>\n", "Tags": "<c++><c++11><c-preprocessor><language-lawyer><variadic-macros>", "OwnerUserId": "927034", "AnswerCount": "1"}, "16769188": {"ParentId": "16767901", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_16767901_16769188_0\">Otherwise, there shall be more arguments in the invocation than there are parameters in the macro definition (excluding the ...).</p>\n</blockquote>\n<p>This very extract from the standard shows that your code should not be valid: you have one parameter plus the ellipsis. If we follow the portion of the standard above, you should have at least two arguments. When you write <code>varidadic(1)</code>, you just provide one argument. Your code is not valid.</p>\n<p>By the way, clang produces a warning:</p>\n<pre><code>main.cpp:7:32: warning: must specify at least one argument for '...' parameter of variadic macro [-Wgnu]\n    std::cout &lt;&lt; \"'\" variadic(1) \"'\" &lt;&lt; std::endl;\n</code></pre>\n<p>And GCC also produces a warning:</p>\n<pre><code>main.cpp:7:32: warning: ISO C99 requires rest arguments to be used [enabled by default]\n     std::cout &lt;&lt; \"'\" variadic(1) \"'\" &lt;&lt; std::endl;\n</code></pre>\n<p>Since that may be a bother to the programmer, and since the programmer's intent is easy to guess, they both consider <code>variadic(1)</code> is equivalent to <code>variadic(1,)</code>.</p>\n", "OwnerUserId": "1364752", "PostTypeId": "2", "Id": "16769188", "Score": "3", "CreationDate": "2013-05-27T08:30:23.977", "LastActivityDate": "2013-05-27T08:30:23.977"}, "bq_ids": {"n4140": {"so_16767901_16767901_0": {"section_id": 514, "quality": 1.0, "length": 39}, "so_16767901_16769188_0": {"section_id": 514, "quality": 1.0, "length": 11}}, "n3337": {"so_16767901_16767901_0": {"section_id": 505, "quality": 1.0, "length": 39}, "so_16767901_16769188_0": {"section_id": 505, "quality": 1.0, "length": 11}}, "n4659": {"so_16767901_16769188_0": {"section_id": 535, "quality": 1.0, "length": 11}, "so_16767901_16767901_0": {"section_id": 535, "quality": 1.0, "length": 39}}}});