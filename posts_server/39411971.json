post_cb({"39412022": {"ParentId": "39411971", "CommentCount": "1", "Body": "<p>You can wrap the argument with parentheses</p>\n<pre><code>a[ ( [](){} ) ];\n</code></pre>\n", "OwnerUserId": "6022656", "PostTypeId": "2", "Id": "39412022", "Score": "1", "CreationDate": "2016-09-09T12:49:56.277", "LastActivityDate": "2016-09-09T12:49:56.277"}, "39411971": {"CommentCount": "0", "AcceptedAnswerId": "39412209", "CreationDate": "2016-09-09T12:47:18.600", "LastActivityDate": "2016-09-09T13:00:06.540", "PostTypeId": "1", "ViewCount": "156", "FavoriteCount": "0", "Title": "lambda inside subscript iterator", "Id": "39411971", "Score": "9", "Body": "<p>Having a lambda in a subscript operator seems to be not working for g++ and clang.</p>\n<p>Is this an implementation error or a \"unhappy\" rule in c++ standard?</p>\n<p>Example:</p>\n<pre><code>class A\n{   \n    public:\n        template&lt;typename T&gt; void operator[](T) {}\n        template&lt;typename T&gt; void operator()(T) {}\n};  \n\nint main()\n{   \n    A a;\n    a[ [](){} ];    // did not compiler: see error message\n    a( [](){} );    // works as expected\n} \n</code></pre>\n<p>Error:</p>\n<pre><code>main.cpp:13:6: error: two consecutive '[' shall only introduce an attribute before '[' token\n     a[ [](){} ];\n      ^   \nmain.cpp:13:15: error: expected primary-expression before ']' token\n     a[ [](){} ];\n</code></pre>\n<p>I know that attributes starts with \"[[\" but I am wondering that \"[ [\" ( with one or more white spaces ) also works like:</p>\n<pre><code> void func( int x [ [gnu::unused] ] ) {} // compiles fine! :-(\n</code></pre>\n", "Tags": "<c++><c++11><lambda><attributes><language-lawyer>", "OwnerUserId": "878532", "AnswerCount": "3"}, "39412017": {"ParentId": "39411971", "CommentCount": "1", "Body": "<p>You have to enclose the lambda in parentheses. Otherwise the compiler considers two <code>[[</code> as introducing an attribute.</p>\n<p>A similar problem can occur with using operator delete. For example you have to write</p>\n<pre><code>delete ( [] { return ( new int() ); }() );\n</code></pre>\n<p>or</p>\n<pre><code>delete [] ( [] { return ( new int[10] ); }() );\n</code></pre>\n<p>that is you have to enclose the lambda in parentheses.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "39412017", "Score": "6", "CreationDate": "2016-09-09T12:49:47.483", "LastActivityDate": "2016-09-09T12:49:47.483"}, "39412209": {"ParentId": "39411971", "CommentCount": "4", "Body": "<p>This is covered in [dcl.attr.grammar]. Having two consecutive <code>[</code> is an attribute, so you'll have to wrap in parantheses or do something else to make your intent clear:</p>\n<blockquote>\n<p id=\"so_39411971_39412209_0\">Two consecutive left square bracket tokens <strong>shall appear only</strong> when introducing an <em>attribute-specifier</em> or within\n  the <em>balanced-token-seq</em> of an <em>attribute-argument-clause</em>. <em>[ Note:</em> If two consecutive left square brackets appear\n  where an <em>attribute-specifier</em> is not allowed, the program is ill-formed <strong>even if the brackets match an alternative grammar production</strong>. <em>\u2014end note ]</em> <em>[ Example:</em></p>\n<pre><code>int p[10];\nvoid f() {\n  int x = 42, y[5];\n  int(p[[x] { return x; }()]);   // error: invalid attribute on a nested\n                                 // declarator-id and not a function-style cast of\n                                 // an element of p.\n  y[[] { return 2; }()] = 2;     // error even though attributes are not allowed\n                                 // in this context.\n  int i [[vendor::attr([[]])]];  // well-formed implementation-defined attribute.\n}\n</code></pre>\n<p id=\"so_39411971_39412209_1\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "39412209", "Score": "4", "CreationDate": "2016-09-09T13:00:06.540", "LastActivityDate": "2016-09-09T13:00:06.540"}, "bq_ids": {"n4140": {"so_39411971_39412209_0": {"section_id": 5531, "quality": 0.7878787878787878, "length": 26}}, "n3337": {"so_39411971_39412209_0": {"section_id": 5317, "quality": 0.7575757575757576, "length": 25}}, "n4659": {"so_39411971_39412209_0": {"section_id": 6967, "quality": 0.8787878787878788, "length": 29}}}});