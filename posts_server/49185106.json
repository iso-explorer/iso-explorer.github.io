post_cb({"bq_ids": {"n4140": {"so_49185106_49185169_1": {"length": 14, "quality": 0.7368421052631579, "section_id": 5979}, "so_49185106_49185582_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5979}, "so_49185106_49185169_0": {"length": 19, "quality": 0.76, "section_id": 5979}}, "n3337": {"so_49185106_49185169_1": {"length": 14, "quality": 0.7368421052631579, "section_id": 5747}, "so_49185106_49185582_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5747}, "so_49185106_49185169_0": {"length": 19, "quality": 0.76, "section_id": 5747}}, "n4659": {"so_49185106_49185169_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 7461}, "so_49185106_49185582_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7461}, "so_49185106_49185169_0": {"length": 14, "quality": 0.56, "section_id": 7461}}}, "49185169": {"Id": "49185169", "PostTypeId": "2", "Body": "<p>The fact that a lambda is implemented as a class is not really any of the programmer's concern. You are not supposed to know/care/think about that. By extension, whether it has a default constructor, or why it does/doesn't, is irrelevant to our day-to-day lives.</p>\n<p>As it happens, it currently doesn't:</p>\n<blockquote>\n<p id=\"so_49185106_49185169_0\"><code>[C++14: expr.prim.lambda/20]:</code> The closure type associated with a <em>lambda-expression</em> has a deleted (8.4.3) default constructor and a deleted copy assignment operator. It has an implicitly-declared copy constructor (12.8) and may have an implicitly-declared move constructor (12.8). <em>[..]</em></p>\n<p id=\"so_49185106_49185169_1\"><code>[C++17: expr.prim.lambda/11]:</code> The closure type associated with a lambda-expression has no default constructor and a deleted copy assignment operator. It has a defaulted copy constructor and a defaulted move constructor. <em>[..]</em></p>\n</blockquote>\n<p>However! This will <a href=\"https://botondballo.wordpress.com/2017/11/20/trip-report-c-standards-meeting-in-albuquerque-november-2017/#cxx20\" rel=\"nofollow noreferrer\">change in C++20</a>, as described in document <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf\" rel=\"nofollow noreferrer\">P0624r2</a>. As far as I can tell, your code will become valid per that standard (<a href=\"http://eel.is/c++draft/expr.prim.lambda#closure-12\" rel=\"nofollow noreferrer\">as long as you don't add any captures to it</a>).</p>\n<p>But, for now, if you want to store functions, use <code>std::function</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main()\n{\n   std::function&lt;void(int)&gt; bb;\n   bb = [](int a) { std::cout &lt;&lt; a &lt;&lt; '\\n'; };\n\n   // (time passes)\n   bb(1);\n}\n</code></pre>\n<h3>(<a href=\"http://coliru.stacked-crooked.com/a/d1dde916dd06d714\" rel=\"nofollow noreferrer\">live demo</a>)</h3>\n<p><sub><strong>Disclaimer:</strong> This is a contrived example. In the code above, you <em>wouldn't</em> take on the overhead of <code>std::function</code>; you'd just do <code>auto lam = ...</code> as in the original code and that would be that. But the OP has shown a need to copy it into a new, default-constructible object for whatever reason. That is what I show how to do.</sub></p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2018-03-09T02:33:27.510", "Score": "6", "CreationDate": "2018-03-09T01:19:04.160", "ParentId": "49185106", "CommentCount": "9", "OwnerUserId": "560648", "LastEditDate": "2018-03-09T02:33:27.510"}, "49185106": {"ViewCount": "171", "Body": "<p>I was studing <code>lambda</code> expression but come across this question:</p>\n<pre><code>    #include&lt;iostream&gt;\n    using std::cout;\n    int main()\n    {\n      auto lam=[](int a){ cout&lt;&lt;\"a\";};\n      decltype(lam) bb;//oop!deleted default constructor!\n      bb(1);\n    }\n</code></pre>\n<p>But the compiler complained as commented above.As far as I know,lambda is a object of an unnamed class.So I suppose this snippet could work.<br>\nWhere did I make mistakes and could I improve it? <strong>What kind of constructor does lambda have?</strong> Is there any non-default constructor that I can do like <code>decltype(lambda) object(args...)</code> ?</br></p>\n", "Title": "Why is defining a object by delctype(lamda) not allowed and how could i improve it?", "CreationDate": "2018-03-09T01:13:40.357", "LastActivityDate": "2018-03-09T02:33:27.510", "CommentCount": "14", "LastEditDate": "2018-03-09T01:34:34.157", "PostTypeId": "1", "LastEditorUserId": "8434761", "Id": "49185106", "Score": "5", "OwnerUserId": "8434761", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "49185389": {"Id": "49185389", "PostTypeId": "2", "Body": "<pre><code>decltype(lam) bb;\n</code></pre>\n<p>You declared the variable <code>bb</code> of some type, but not initialized it. It may be imaging like a function declaration without its definition. Try below to make your code compiled</p>\n<pre><code>decltype(lam) bb = lam;\n</code></pre>\n<p>or</p>\n<pre><code>decltype(lam) bb(lam);\n</code></pre>\n<p>It is better to use <code>auto</code> instead of <code>decltype()</code>.</p>\n", "LastActivityDate": "2018-03-09T01:46:34.340", "Score": "2", "CreationDate": "2018-03-09T01:46:34.340", "ParentId": "49185106", "CommentCount": "0", "OwnerUserId": "6752050"}, "49185582": {"Id": "49185582", "PostTypeId": "2", "Body": "<p>It is specified in the current Standard (N4659 [expr.prim.lambda]/11):</p>\n<blockquote>\n<p id=\"so_49185106_49185582_0\">The closure type associated with a lambda-expression has no default constructor and a deleted copy assignment operator.  It has a defaulted copy constructor and a defaulted move constructor.</p>\n</blockquote>\n<p>So, you cannot go <code>decltype(lam) bb;</code>. You have to initialize it from another lambda, even though this particular one doesn't have any state:</p>\n<pre><code>auto bb = lam;\n</code></pre>\n<p>As shown by <a href=\"https://wg21.link/p0624\" rel=\"nofollow noreferrer\">the proposal P0624</a> there's no real reason for this other than that nobody thought to allow default construction of a stateless lambda yet, and it may well become possible in C++20.</p>\n", "LastActivityDate": "2018-03-09T02:10:21.430", "Score": "3", "CreationDate": "2018-03-09T02:10:21.430", "ParentId": "49185106", "CommentCount": "2", "OwnerUserId": "1505939"}});