post_cb({"18216313": {"CommentCount": "0", "ViewCount": "466", "CreationDate": "2013-08-13T18:17:28.963", "LastActivityDate": "2013-08-13T18:47:31.543", "Title": "Why does this code work in Clang++ but not G++?", "AcceptedAnswerId": "18216727", "PostTypeId": "1", "Id": "18216313", "Score": "10", "Body": "<p>Consider the following code:</p>\n<pre><code>struct Foo\n{\n    int x, y;\n\n    Foo() = default;\n    Foo(const Foo&amp;) = delete;\n    Foo&amp; operator=(const Foo&amp;) = delete;\n};\n\nint main()\n{\n    Foo f1 {1, 2};\n    Foo f2 = {1, 2};\n}\n</code></pre>\n<p>Compiling with clang++ yields no errors:</p>\n<pre><code>$ clang++ --version\nApple LLVM version 4.2 (clang-425.0.28) (based on LLVM 3.2svn)\nTarget: x86_64-apple-darwin12.4.0\nThread model: posix\n$ clang++ -std=c++11 -stdlib=libc++ -pedantic t.cpp -o out\n...builds and runs fine...\n</code></pre>\n<p>However, <a href=\"http://ideone.com/2Wotvt\">compiling with g++ 4.8.1 through ideone gives errors</a>:</p>\n<pre><code>prog.cpp: In function \u2018int main()\u2019:\nprog.cpp:12:17: error: no matching function for call to \u2018Foo::Foo(&lt;brace-enclosed initializer list&gt;)\u2019\n     Foo f1 {1, 2};\n                 ^\nprog.cpp:12:17: note: candidate is:\nprog.cpp:5:5: note: Foo::Foo()\n     Foo() = default;\n     ^\nprog.cpp:5:5: note:   candidate expects 0 arguments, 2 provided\nprog.cpp:13:19: error: could not convert \u2018{1, 2}\u2019 from \u2018&lt;brace-enclosed initializer list&gt;\u2019 to \u2018Foo\u2019\n     Foo f2 = {1, 2};\n                   ^\n</code></pre>\n<p>If I remove <code>Foo(const Foo&amp;) = delete;</code> then it <a href=\"http://ideone.com/FBjobb\">compiles fine</a> in g++4.8.1.</p>\n<p>Is there an error in my code that one compiler is ignoring but the other is not?</p>\n", "Tags": "<c++><c++11><g++><clang++>", "OwnerUserId": "1287251", "AnswerCount": "1"}, "18216727": {"ParentId": "18216313", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++11 8.5.1 [dcl.init.aggr] p1 defines aggregate types:</p>\n<blockquote>\n<p id=\"so_18216313_18216727_0\">An <em>aggregate</em> is an array or a class (Clause 9) with no user-provided constructors (12.1), no <em>brace-or-equal-initializers</em> for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p><em>user-provided</em> is defined in 8.4.2 [dcl.fct.def.default] p4:</p>\n<blockquote>\n<p id=\"so_18216313_18216727_1\">... A special member function is <em>user-provided</em> if it is user-declared and not explicitly\n  defaulted or deleted on its first declaration.</p>\n</blockquote>\n<p><code>Foo</code> has two user-declared constructors, both of which are explicitly defaulted or deleted on their first declaration, so <code>Foo</code> is an aggregate.</p>\n<p>GCC is wrong.</p>\n<p>EDIT: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52707\">This is in fact GCC bug 52707</a>.</p>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2013-08-13T18:47:31.543", "Id": "18216727", "Score": "15", "CreationDate": "2013-08-13T18:41:58.610", "LastActivityDate": "2013-08-13T18:47:31.543"}, "bq_ids": {"n4140": {"so_18216313_18216727_1": {"section_id": 3274, "quality": 0.7272727272727273, "length": 8}, "so_18216313_18216727_0": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_18216313_18216727_1": {"section_id": 3145, "quality": 0.9090909090909091, "length": 10}, "so_18216313_18216727_0": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_18216313_18216727_1": {"section_id": 4032, "quality": 0.7272727272727273, "length": 8}, "so_18216313_18216727_0": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}}}});