post_cb({"15861184": {"ParentId": "15861168", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The problem is here:</p>\n<pre><code>lua_CFunction ScriptingInterface::wrap(std::function&lt;int(Game*)&gt; function) \n{\n    return [this, function] (lua_State* unused) -&gt; int {\n        int n_args = function (this-&gt;game);\n        return n_args;\n    };\n}\n</code></pre>\n<p>You are trying to return a lambda where a function pointer is expected, but a <em>capturing</em> lambda cannot be converted to a function pointer - and your lambda is capturing both <code>this</code> and <code>function</code>. Per Paragraph 5.1.2/6 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15861168_15861184_0\">The closure type for a lambda-expression <strong>with no lambda-capture</strong> has a public non-virtual non-explicit const\n  conversion function to pointer to function having the same parameter and return types as the closure type\u2019s\n  function call operator. The value returned by this conversion function shall be the address of a function\n  that, when invoked, has the same effect as invoking the closure type\u2019s function call operator.</p>\n</blockquote>\n<p>Unfortunately, unless you can return an <code>std::function&lt;int(lua_State*)&gt;</code>, you will have to change your design.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-04-07T10:13:11.907", "Id": "15861184", "Score": "2", "CreationDate": "2013-04-07T10:06:50.660", "LastActivityDate": "2013-04-07T10:13:11.907"}, "15861168": {"CommentCount": "0", "ViewCount": "1125", "OwnerDisplayName": "user744186", "CreationDate": "2013-04-07T10:04:08.780", "LastActivityDate": "2013-04-07T10:13:11.907", "PostTypeId": "1", "AcceptedAnswerId": "15861184", "Title": "C++ lua bridge problems with function pointers", "Id": "15861168", "Score": "1", "Body": "<p>I am trying to create a simple c++ wraper over *lua_CFunction* and it is defined like :</p>\n<pre><code>// header\ntypedef int (*lua_CFunction) (lua_State* lua);\n...\nlua_CFunction wrap (std::function &lt;int (Game* game)&gt; function);\n// implementation\nlua_CFunction ScriptingInterface::wrap (std::function &lt;int (Game* game)&gt; function) \n{\n    return [this, function] (lua_State* unused) -&gt; int {\n        int n_args = function (this-&gt;game);\n        return n_args;\n    };\n}\nvoid ScriptingInterface::registerFunction (std::string name, std::function &lt;int (Game* game)&gt; function) \n{\n    lua_register (lua, name.c_str (), wrap (function));\n}\n</code></pre>\n<p>The idea is to create public functions like this :</p>\n<pre><code>int setTitle (Game* interface) \n{\n    const char* title = lua_tostring (interface-&gt;getScripts ()-&gt;getLuaState (), 1);\n\n    SDL_WM_SetCaption (title, NULL);\n\n    return 0;\n}\n</code></pre>\n<p>And share them with lua like :</p>\n<p><code>scripts-&gt;registerFunction (\"setTitle\", setTitle);</code></p>\n<p><em>scripts</em> is an instance of <strong>ScriptingInterface</strong></p>\n<p>The problem occurs when trying to compile the game.</p>\n<pre><code>./scripting/scripting_interface.cc: In member function \u2018int (* ScriptingInterface::wrap(std::function&lt;int(Game*)&gt;))(lua_State*)\u2019:\n./scripting/scripting_interface.cc:40:2: error: cannot convert \u2018ScriptingInterface::wrap(std::function&lt;int(Game*)&gt;)::&lt;lambda(lua_State*)&gt;\u2019 to \u2018int (*)(lua_State*)\u2019 in return\n./scripting/scripting_interface.cc:41:1: warning: control reaches end of non-void function [-Wreturn-type]\n</code></pre>\n<p>Could anyone tell me what I am doing wrong in here, because AFAIK the code should compile without any problem?</p>\n", "Tags": "<c++><lua><function-pointers>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15861168_15861184_0": {"section_id": 5965, "quality": 0.95, "length": 38}}, "n3337": {"so_15861168_15861184_0": {"section_id": 5734, "quality": 0.95, "length": 38}}, "n4659": {"so_15861168_15861184_0": {"section_id": 7456, "quality": 0.85, "length": 34}}}});