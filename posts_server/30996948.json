post_cb({"30996948": {"CommentCount": "6", "AcceptedAnswerId": "30997046", "ClosedDate": "2015-06-23T09:15:40.297", "CreationDate": "2015-06-23T07:53:31.743", "LastActivityDate": "2015-06-23T08:13:58.070", "PostTypeId": "1", "ViewCount": "289", "FavoriteCount": "1", "Title": "C++ function overload priority", "Id": "30996948", "Score": "2", "Body": "<p>Why would the code give an output: <code>bool</code> ?\nIs there any way I could make the <code>const char*</code> to match the <code>string</code> version?</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nvoid func(bool)\n{\n    std::cout &lt;&lt; \"bool\" &lt;&lt; std::endl;\n}\n\nvoid func(const std::string&amp;)\n{\n    std::cout &lt;&lt; \"string\" &lt;&lt; std::endl;\n}\n\nint main(int argc, char* argv[])\n{\n    func(\"hello\");\n}\n</code></pre>\n", "Tags": "<c++><overloading>", "OwnerUserId": "2289969", "AnswerCount": "3"}, "30997079": {"ParentId": "30996948", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>To answer the why:</p>\n<p>Function matching is the process by which the compiler selects which function to call among an overload set.\nHere, there are two viable candidates (the two functions you defined). To pick one, the compiler ranks the conversion they imply.</p>\n<p>The first candidate <code>void func(bool)</code> implies an array-to-pointer conversion followed by a boolean conversion (from <code>const char[6]</code> to <code>const char*</code> to <code>bool</code>)\nThe second candidate implies a user-defined conversion (calling the <code>std::string</code> ctor taking a <code>const char*</code>)</p>\n<p>The second conversion has lower ranking, so the first candidate is selected as the best match.</p>\n", "OwnerUserId": "1027706", "LastEditorUserId": "1782465", "LastEditDate": "2015-06-23T08:06:33.463", "Id": "30997079", "Score": "6", "CreationDate": "2015-06-23T07:59:34.830", "LastActivityDate": "2015-06-23T08:06:33.463"}, "30997046": {"ParentId": "30996948", "CommentCount": "2", "Body": "<p>This happens because the compiler will prefer built-in conversions to user-defined conversions. The conversion from a pointer to a <code>bool</code> is built-in, so that overload is selected rather than constructing a <code>std::string</code>.</p>\n<p>You could add an overload which takes a <code>const char*</code> and forwards it to the <code>std::string</code> version:</p>\n<pre><code>void func(const char* arg)\n{\n    func(std::string{arg});\n}\n</code></pre>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "30997046", "Score": "9", "CreationDate": "2015-06-23T07:57:58.117", "LastActivityDate": "2015-06-23T07:57:58.117"}, "30997325": {"ParentId": "30996948", "CommentCount": "5", "Body": "<p>According to the standard <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4431.pdf\" rel=\"nofollow\">N4431</a> <em>\u00a713.3.3.2/2 Ranking implicit conversion sequences [over.ics.rank] <strong>(emphasis mine)</strong>:</em></p>\n<blockquote>\n<p id=\"so_30996948_30997325_0\"><strong>When comparing the basic forms of implicit conversion sequences</strong> (as\n  defined in 13.3.3.1) (2.1) \u2014 <strong>a standard conversion sequence</strong>\n  (13.3.3.1.1) <strong>is a better conversion sequence than a user-defined\n  conversion sequence</strong> or an ellipsis conversion sequence, and (2.2) \u2014 a\n  user-defined conversion sequence (13.3.3.1.2) is a better conversion\n  sequence than an ellipsis conversion sequence (13.3.3.1.3).</p>\n</blockquote>\n<p>Consequently, because the <code>char const *</code> to <code>bool</code> is a standard implicit conversion compared to the implicit conversion to <code>std::string</code> which is a user-defined conversion is a better conversion and is preferred in overload resolution.</p>\n<p>In order to force overload resolution to choose the <code>std::string</code> version:</p>\n<pre><code>func(std::string(\"hello\"));\n</code></pre>\n", "OwnerUserId": "2352671", "PostTypeId": "2", "Id": "30997325", "Score": "1", "CreationDate": "2015-06-23T08:13:58.070", "LastActivityDate": "2015-06-23T08:13:58.070"}, "bq_ids": {"n4140": {"so_30996948_30997325_0": {"section_id": 638, "quality": 0.8823529411764706, "length": 30}}, "n3337": {"so_30996948_30997325_0": {"section_id": 628, "quality": 0.8823529411764706, "length": 30}}, "n4659": {"so_30996948_30997325_0": {"section_id": 666, "quality": 0.8823529411764706, "length": 30}}}});