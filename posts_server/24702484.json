post_cb({"24702484": {"ViewCount": "1722", "Body": "<p>I am coming from the Java background. I have the following program. </p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nclass First {\n    public:\n    First(int someVal): a(someVal) {\n\n    }\n    int a;\n};\n\nclass Second {\n    public:\n    First first;\n    Second()  {   // The other option would be to add default value as \": first(0)\"\n        first = First(123);\n\n    }\n};\n\nint main()\n{\n    Second second;\n    std::cout &lt;&lt; \"hello\" &lt;&lt; second.first.a &lt;&lt; std::endl;\n}\n</code></pre>\n<p>In class <code>Second</code>, I wanted to variable <code>first</code> to remain uninitialized until I specifically initialize it in <code>Second()'s constructor</code>. Is there a way to do it? Or am I just left with 2 options?:</p>\n<ol>\n<li>Provide a parameter-less constructor. </li>\n<li>Initialize it with some default value and later re-assign the required value.</li>\n</ol>\n<p>I can't initialize <code>first</code> in the initializer-list with the right value, since the value is obtained after some operation. So, the actual required value for <code>first</code> is available in <code>Second()</code> constructor only. </p>\n", "AcceptedAnswerId": "24702644", "Title": "Is there a way to late-initialize a member variable (a class) in C++?", "CreationDate": "2014-07-11T16:32:45.397", "Id": "24702484", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2014-07-11T17:23:48.997", "Score": "5", "OwnerUserId": "556087", "Tags": "<c++><class><constructor><initialization><lazy-initialization>", "AnswerCount": "6"}, "24702574": {"Id": "24702574", "PostTypeId": "2", "Body": "<p>One way to separate object lifetimes is to use the heap, make <code>first</code> a pointer and initialize it anytime you like:</p>\n<pre><code>class Second {\npublic:\n    First* first;\n    Second()  { \n        first = new First(123);\n\n    }\n};\n</code></pre>\n<p>of course, you'll probably want to use a smart pointer of some sort rather than a <em>raw</em> pointer.</p>\n", "LastActivityDate": "2014-07-11T16:38:12.517", "CommentCount": "4", "CreationDate": "2014-07-11T16:38:12.517", "ParentId": "24702484", "Score": "1", "OwnerUserId": "1312406"}, "24702599": {"Id": "24702599", "PostTypeId": "2", "Body": "<p>Initialize <code>first</code> in the member initializer list.</p>\n<p>It may help to perform your calculations in a helper function and use a forwarding constructor:</p>\n<pre><code>class Second {\npublic:\n    Second() : Second(helper_function()) {}\n\nprivate:\n    Second(int calc): first(calc) {}\n    static int helper_function() { return ...; }\n\n    First first;\n};\n</code></pre>\n", "LastActivityDate": "2014-07-11T16:39:52.697", "CommentCount": "2", "CreationDate": "2014-07-11T16:39:52.697", "ParentId": "24702484", "Score": "4", "OwnerUserId": "567292"}, "24702754": {"Id": "24702754", "PostTypeId": "2", "Body": "<p>If you don't code to explicitly initialize a member variable, the default initializer is used to initialize it.</p>\n<p>The draft C++ standard has the following about initialization of base classes and member variables:</p>\n<blockquote>\n<p id=\"so_24702484_24702754_0\"><strong>12.6 Initialization [class.init]</strong></p>\n<p id=\"so_24702484_24702754_1\">1 When no initializer is specified for an object of (possibly cv-qualified) class type (or array thereof), or the initializer has the form (), the object is initialized as specified in 8.5.</p>\n</blockquote>\n<p>And </p>\n<blockquote>\n<p id=\"so_24702484_24702754_2\"><strong>12.6.1 Explicit initialization [class.expl.init]</strong></p>\n<p id=\"so_24702484_24702754_3\">1 An object of class type can be initialized with a parenthesized expression-list, where the expression-list is construed as an argument list for a constructor that is called to initialize the object. Alternatively, a single assignment-expression can be specified as an initializer using the = form of initialization. Either direct-initialization semantics or copy-initialization semantics apply; see 8.5.</p>\n</blockquote>\n", "LastActivityDate": "2014-07-11T16:49:43.850", "CommentCount": "0", "CreationDate": "2014-07-11T16:49:43.850", "ParentId": "24702484", "Score": "0", "OwnerUserId": "434551"}, "bq_ids": {"n4140": {"so_24702484_24702754_3": {"length": 32, "quality": 1.0, "section_id": 424}, "so_24702484_24702754_1": {"length": 15, "quality": 1.0, "section_id": 421}}, "n3337": {"so_24702484_24702754_3": {"length": 32, "quality": 1.0, "section_id": 416}, "so_24702484_24702754_1": {"length": 15, "quality": 1.0, "section_id": 413}}, "n4659": {"so_24702484_24702754_3": {"length": 32, "quality": 1.0, "section_id": 442}, "so_24702484_24702754_1": {"length": 15, "quality": 1.0, "section_id": 439}}}, "24703245": {"Id": "24703245", "PostTypeId": "2", "Body": "<p>This sentence is the core of the problem:</p>\n<blockquote>\n<p id=\"so_24702484_24703245_0\">I can't initialize first in the initializer-list with the right value,\n  since the value is obtained after some operation.</p>\n</blockquote>\n<p>You should know that what you want to do here is <strong>not perfect programming style in Java, either</strong>. Leaving the field with some default value and then assigning it a bit later after some calculations have been done effectively prevents it from being <code>final</code>, and consequently the class from being immutable.</p>\n<p>In any case, your goal must be to push those calculations directly into the initialization of the member, using <strong>private helper functions</strong> (which may be static):</p>\n<pre><code>class Second {\nprivate:\n    First first;\n\n    static int getInitializationData()\n    {\n        // complicated calculations go here...\n        return result_of_calculations;\n    }\npublic:\n    Second() : first(getInitializationData()) {}\n};\n</code></pre>\n<p>In my opinion, everything else is just a workaround and will complicate your life in the long run.</p>\n", "LastActivityDate": "2014-07-11T17:23:48.997", "CommentCount": "0", "CreationDate": "2014-07-11T17:23:48.997", "ParentId": "24702484", "Score": "1", "OwnerUserId": "3313064"}, "24702549": {"Id": "24702549", "PostTypeId": "2", "Body": "<p>You can just do what you said in the comments, or, you can make first a pointer to First and give it memory whenever you like, although i don't recommend this way</p>\n", "LastActivityDate": "2014-07-11T16:36:43.137", "CommentCount": "2", "CreationDate": "2014-07-11T16:36:43.137", "ParentId": "24702484", "Score": "2", "OwnerUserId": "3784644"}, "24702644": {"Id": "24702644", "PostTypeId": "2", "Body": "<p>MY suggestion: Use a function: </p>\n<pre><code>private: static int calculate_first(int input) {return input*5;}\nexplicit Second(int input) : first(calculate_first(input)) {}\n</code></pre>\n<p>Base classes will be initialized in the order they're declared in the class inheritance list, and then members will be initialized in the order that they're listed in the class, so the calculation <em>can</em> depend on non-static member-variables and base classes <em>if</em> they have already been initialized.\n<hr>\nAlternatively: </hr></p>\n<p>Default constructor, then reassign:</p>\n<pre><code>explicit Second(int input) { first = input*5; }\n</code></pre>\n<p>Dummy value, then reassign:</p>\n<pre><code>explicit Second(int input) : first(0) { first = input*5; }\n</code></pre>\n<p>Use boost::optional:</p>\n<pre><code>boost::optional&lt;First&gt; first;\nexplicit Second(int input) { first = input*5; }\n</code></pre>\n<p>Use the heap:</p>\n<pre><code>std::unique_ptr&lt;First&gt; first;\nexplicit Second(int input) { first.reset(new First(input*5));}\nSecond(const Second&amp; r) first(new First(*(r-&gt;first))) {}\nSecond&amp; operator=(const Second&amp; r) {first.reset(new First(*(r-&gt;first)));}\n</code></pre>\n<p>Placement new:</p>\n<pre><code>This is tricky and not suggested \nand worse in every way than boost::optional\nSo sample deliberately missing.\nBut it is an option.\n</code></pre>\n", "LastEditorUserId": "845092", "LastActivityDate": "2014-07-11T17:15:52.310", "Score": "6", "CreationDate": "2014-07-11T16:42:49.790", "ParentId": "24702484", "CommentCount": "3", "LastEditDate": "2014-07-11T17:15:52.310", "OwnerUserId": "845092"}});