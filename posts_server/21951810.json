post_cb({"21951810": {"ViewCount": "873", "Body": "<p>I was practicing c questions through \"Test your skills in c\" books\nwhere I found this question with following code</p>\n<pre><code>char str[5]=\"abhisheksoni\";\n</code></pre>\n<p>and this question was \"Will this generate any kind of error\"\nand answer given was \"No compiler never detects the error if bounds of an array are exceeded.\"\nBut when i code this program an error \"Too many initialization \" generated??</p>\n", "Title": "Too many Initialization error", "CreationDate": "2014-02-22T08:30:37.343", "LastActivityDate": "2014-02-22T09:25:18.787", "CommentCount": "3", "LastEditDate": "2014-02-22T08:31:52.163", "PostTypeId": "1", "LastEditorUserId": "1491895", "Id": "21951810", "Score": "1", "OwnerUserId": "3335653", "Tags": "<c++><c>", "AnswerCount": "4"}, "21951920": {"Id": "21951920", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21951810_21951920_0\">No compiler never detects the error if bounds of an array are exceeded.</p>\n</blockquote>\n<p>That's a double negative. In English, that's the same as \"every compiler at least sometimes detects exceeding the bounds of an array.\" Providing too many initializers may or may not be considered as such.</p>\n<p>Anyway, it is forbidden by C11 \u00a76.7.9/2:</p>\n<blockquote>\n<p id=\"so_21951810_21951920_1\">No initializer shall attempt to provide a value for an object not contained within the entity being initialized.</p>\n</blockquote>\n<p>and C++11 \u00a78.5.2/2 [dcl.init.string]:</p>\n<blockquote>\n<p id=\"so_21951810_21951920_2\">There shall not be more initializers than there are array elements.</p>\n</blockquote>\n<p>However, C and C++ do not require anything besides a message to be printed when your program contains something illegal. The message could be labelled merely as a warning, and the program still compiles and runs. (C++11 \u00a71.4/2; C11 \u00a75.1.1.3/1 and footnote.)</p>\n<p>Oddly enough, Clang and GCC mark it as a warning when compiling C and an error for C++. This perhaps reflects something about usage in practice.</p>\n<p>Since the declaration <em>looks</em> like an error, it's reasonable to expect at least a warning message from some compiler, and unreasonable to do it on purpose in any case. Why ask the compiler when you know it's wrong?</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2014-02-22T09:17:31.050", "Score": "3", "CreationDate": "2014-02-22T08:41:37.163", "ParentId": "21951810", "CommentCount": "3", "LastEditDate": "2014-02-22T09:17:31.050", "OwnerUserId": "153285"}, "21952289": {"Id": "21952289", "PostTypeId": "2", "Body": "<p>The book is incorrect. The declaration is invalid (i.e. <em>ill-formed</em> in C++ terminology, or contains <em>constraint violation</em> in C terminology), which is what we informally call a <em>compile error</em>. It means that any conforming compiler is required to issue a diagnostic message for this declaration.</p>\n<p>It is worth adding that C and C++ languages are slightly different with regard to string literal initializers that are too long by <em>one</em> character. C allows the terminating zero to fall-off the end of the array, while C++ doesn't.</p>\n<pre><code>char str[4] = \"abcd\"; // OK in C - produces a non-zero-terminated array\n                      // Error in C++\n</code></pre>\n<p>But your original example, where the initializer literal is too long by more than one character, is ill-formed in both languages.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2014-02-22T09:24:53.293", "Score": "4", "CreationDate": "2014-02-22T09:19:33.307", "ParentId": "21951810", "CommentCount": "0", "LastEditDate": "2014-02-22T09:24:53.293", "OwnerUserId": "187690"}, "21951831": {"Id": "21951831", "PostTypeId": "2", "Body": "<p>It is not necessary that every compiler will raise any error or warning for this. Some compilers may throw a warning(in C99 mode compiled with: <code>-Wall -Wextra -pedantic -g3 -std=c99</code>):  </p>\n<pre><code>[Warning] initializer-string for array of chars is too long [enabled by default]  \n</code></pre>\n<p>Better to use   </p>\n<pre><code>char str[]=\"abhisheksoni\";\n</code></pre>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2014-02-22T08:39:41.423", "Score": "2", "CreationDate": "2014-02-22T08:32:23.360", "ParentId": "21951810", "CommentCount": "0", "LastEditDate": "2014-02-22T08:39:41.423", "OwnerUserId": "2455888"}, "21952344": {"Id": "21952344", "PostTypeId": "2", "Body": "<p>There is no guarentee that compiler will ignore or report undefined behavior</p>\n<pre><code>char ch[5]=\"abhisheksoni\";\n</code></pre>\n<p>Means 5 bytes are reserved but you entered more so this is undefined behaviour and may overwrite important data\nso it is not guranteed that compiler will show error as in my system it is working</p>\n", "LastActivityDate": "2014-02-22T09:25:18.787", "Score": "-1", "CreationDate": "2014-02-22T09:25:18.787", "ParentId": "21951810", "CommentCount": "1", "OwnerUserId": "3287033"}, "bq_ids": {"n4140": {"so_21951810_21951920_2": {"length": 7, "quality": 1.0, "section_id": 3315}}, "n3337": {"so_21951810_21951920_2": {"length": 7, "quality": 1.0, "section_id": 3185}}, "n4659": {"so_21951810_21951920_2": {"length": 7, "quality": 1.0, "section_id": 4081}}}});