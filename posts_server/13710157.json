post_cb({"13710157": {"ViewCount": "245", "Body": "<p>On my system, wchar_t and int are distinct types with the same properties:</p>\n<pre><code>#include &lt;type_traits&gt;\nsizeof(wchar_t) == sizeof(int) == 4\nstd::is_signed&lt;wchar_t&gt; == std::is_signed&lt;int&gt; == std::true_type\nstd::is_same&lt;wchar_t, int&gt; == std::false_type\n</code></pre>\n<p>In contrast, <code>ptrdiff_t</code> and <code>long int</code> are identical types (same properties, and <code>is_same</code> is true).</p>\n<p>Is this distinctness of <code>wchar_t</code> guaranteed? Is it safe to overload for <code>wchar_t</code> and <code>int</code> on all systems? Is there any property in  or elsewhere that distinguishes <code>wchar_t</code> and the corresponding int property besides <code>is_same</code>?</p>\n<p>(System info: I'm interested in the general case, but my tests so far have been on an OS X machine running g++ 4.8.0 and Apple clang++ 4.1, both with -std=c++11.)</p>\n", "AcceptedAnswerId": "13710198", "Title": "Is wchar_t guaranteed to be distinct from any integer type?", "CreationDate": "2012-12-04T19:09:04.373", "Id": "13710157", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-12-04T19:17:05.473", "Score": "5", "OwnerUserId": "1455970", "Tags": "<c++><c++11><wchar-t>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13710157_13710222_0": {"length": 35, "quality": 0.9210526315789473, "section_id": 7214}, "so_13710157_13710198_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 7214}}, "n3337": {"so_13710157_13710222_0": {"length": 35, "quality": 0.9210526315789473, "section_id": 6958}, "so_13710157_13710198_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 6958}}, "n4659": {"so_13710157_13710222_0": {"length": 35, "quality": 0.9210526315789473, "section_id": 8723}, "so_13710157_13710198_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 8723}}}, "13710198": {"Id": "13710198", "PostTypeId": "2", "Body": "<p>Yes, <code>wchar_t</code> is guaranteed to be a distinct type (\u00a73.9.1/5):</p>\n<blockquote>\n<p id=\"so_13710157_13710198_0\">Type <code>wchar_t</code> is a distinct type whose values can represent distinct codes for all members of the largest extended character set specified among the supported locales (22.3.1).</p>\n</blockquote>\n<p>So yes, it's safe to overload for <code>wchar_t</code> and <code>int</code> on all systems.</p>\n<p>However, <code>wchar_t</code> is also guaranteed to have the same size, signedness and alignment requirements as another integral type, which is its <em>underlying type</em>. This isn't necessarily <code>int</code> but in your case appears to be. This means <code>wchar_t</code> is probably implemented using one of the integral types, but as far as you are concerned, they are treated as completely distinct types.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2012-12-04T19:17:05.473", "Score": "9", "CreationDate": "2012-12-04T19:11:34.470", "ParentId": "13710157", "CommentCount": "1", "OwnerUserId": "150634", "LastEditDate": "2012-12-04T19:17:05.473"}, "13710222": {"Id": "13710222", "PostTypeId": "2", "Body": "<p>Yes, for C++11, wchar_t is its own type, distinct from any other, but as you've observed, it will also have the same range, signedness, etc., as some other type (\u00a73.9.1/3):</p>\n<blockquote>\n<p id=\"so_13710157_13710222_0\">Type wchar_t is a distinct type whose values can represent distinct codes for all members of the largest extended character set specified among the supported locales (22.3.1). Type wchar_t shall have the same size, signedness, and alignment requirements (3.11) as one of the other integral types, called its underlying\n  type.</p>\n</blockquote>\n", "LastActivityDate": "2012-12-04T19:12:44.457", "CommentCount": "0", "CreationDate": "2012-12-04T19:12:44.457", "ParentId": "13710157", "Score": "8", "OwnerUserId": "179910"}});