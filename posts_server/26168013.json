post_cb({"bq_ids": {"n4140": {"so_26168013_26171543_0": {"length": 8, "quality": 1.0, "section_id": 639}}, "n3337": {"so_26168013_26171543_0": {"length": 8, "quality": 1.0, "section_id": 629}}, "n4659": {"so_26168013_26171543_0": {"length": 8, "quality": 1.0, "section_id": 667}}}, "26168013": {"ViewCount": "349", "Body": "<p>I have the following example code. It compiles on clang but it doesn't on Visual Studio 2013.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nvoid f(const pair&lt;string, string&gt;&amp; p)\n{\n    cout &lt;&lt; p.first &lt;&lt; \", \" &lt;&lt; p.second &lt;&lt; endl;\n}\n\nvoid f(initializer_list&lt;pair&lt;string, string&gt; &gt; ps) {\n    for (auto p : ps) f(p);\n}\n\nint main()\n{\n    f({ \"2\", \"3\" });\n    f({ { \"2\", \"3\" }, { \"3\", \"4\" } });\n}\n</code></pre>\n<p>The second call to f fails to compile with:</p>\n<pre><code>1error C2668: 'f' : ambiguous call to overloaded function\ncould be 'void f(std::initializer_list&lt;std::pair&lt;std::string,std::string&gt;&gt;)'\nor       'void f(const std::pair&lt;std::string,std::string&gt; &amp;)'\n1&gt;          while trying to match the argument list '(initializer-list)'\n</code></pre>\n<p>If I use pairs of int instead of pairs of string it does work fine.</p>\n<p>Is anybody aware of a problem like this in Visual Studio? Or am I doing something wrong?</p>\n<p>Thank you.</p>\n", "Title": "ambiguous call to function using initializer_list in VS2013", "CreationDate": "2014-10-02T19:19:31.877", "LastActivityDate": "2014-10-03T00:13:21.380", "CommentCount": "6", "PostTypeId": "1", "Id": "26168013", "Score": "2", "OwnerUserId": "2063166", "Tags": "<c++><c++11><visual-studio-2013><initializer-list>", "AnswerCount": "1"}, "26171543": {"Id": "26171543", "PostTypeId": "2", "Body": "<p><code>{ { \"2\", \"3\" }, { \"3\", \"4\" } }</code> may be used to initialize either a <code>initializer_list&lt;pair&lt;string, string&gt; &gt;</code> or a <code>pair&lt;string, string&gt;</code>, in the second case by calling the two-iterator constructor of <code>std::string</code> (and causing UB in the process). Both are list-initialization sequences. Both invoke a user-defined conversion.</p>\n<p>\u00a713.3.3.2 [over.ics.rank]/p3:</p>\n<blockquote>\n<p id=\"so_26168013_26171543_0\">List-initialization sequence L1 is a better conversion sequence than\n  list-initialization sequence L2 if:</p>\n<ul>\n<li>L1 converts to <code>std::initializer_list&lt;X&gt;</code> for some <code>X</code> and L2 does not [...]</li>\n</ul>\n</blockquote>\n<p>There's no ambiguity. <code>void f(initializer_list&lt;pair&lt;string, string&gt; &gt; ps);</code> should be unambiguously selected.</p>\n", "LastActivityDate": "2014-10-03T00:13:21.380", "CommentCount": "0", "CreationDate": "2014-10-03T00:13:21.380", "ParentId": "26168013", "Score": "2", "OwnerUserId": "2756719"}});