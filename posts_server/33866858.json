post_cb({"33867046": {"LastActivityDate": "2015-11-23T09:11:10.247", "CommentCount": "6", "Body": "<pre><code>_BS ~BSNode()\n{\n    Del(this);\n}\n\nvoid _BS Del(BSNode *x,int y)\n{\n    if (x-&gt;isLeaf())\n    {\n        delete x;\n        return;\n    }\n    if (x-&gt;_Right != NULL)\n        Del(x-&gt;_Right,y += 1);\n    if (x-&gt;_Left != NULL)\n        Del(x-&gt;_Left,y += 1);\n    if (y != 1)\n    {\n        delete x;\n    }\n    return;\n}\n</code></pre>\n<p>You're deleting <code>this</code> recursively. You don't need all this. You're over-thinking. All you need is:</p>\n<pre><code>BSNode::~BSNode()\n{\n    delete _Left;\n    delete _Right;\n}\n</code></pre>\n<p>That will automatically recurse down the left and right subtrees, and stop at nulls.</p>\n", "CreationDate": "2015-11-23T09:01:50.243", "LastEditDate": "2015-11-23T09:11:10.247", "ParentId": "33866858", "Id": "33867046", "LastEditorUserId": "207421", "PostTypeId": "2", "Score": "4", "OwnerUserId": "207421"}, "bq_ids": {"n4140": {"so_33866858_33868842_0": {"length": 5, "quality": 0.625, "section_id": 409}}, "n3337": {"so_33866858_33868842_0": {"length": 5, "quality": 0.625, "section_id": 400}}}, "33866939": {"CommentCount": "2", "Body": "<p>By calling <code>delete x</code>, you are calling the destructor of the node while you are in a function called the destructor of the node. There is no need to destroy the actual object in a destructor.</p>\n", "CreationDate": "2015-11-23T08:55:26.707", "ParentId": "33866858", "Id": "33866939", "LastActivityDate": "2015-11-23T08:55:26.707", "PostTypeId": "2", "Score": "1", "OwnerUserId": "2204581"}, "33866858": {"CreationDate": "2015-11-23T08:50:58.397", "ViewCount": "548", "Id": "33866858", "AcceptedAnswerId": "33867046", "Score": "3", "Title": "Stack overflow in C++ destructor", "LastEditorUserId": "207421", "CommentCount": "5", "Body": "<p>I try to create the detor and got a \"Stack Overflow\"\nI know why but I want that its work...</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"printTreeToFile.h\"\n#include \"BSNode.h\"\n#define _BS BSNode::\n#define _BSNode _BS BSNode\n_BS ~BSNode()\n{\n    Del(this);\n}\nvoid _BS Del(BSNode *x,int y)\n{\n    if (x-&gt;isLeaf())\n    {\n        delete x;\n        return;\n    }\n    if (x-&gt;_Right != NULL)\n        Del(x-&gt;_Right,y += 1);\n    if (x-&gt;_Left != NULL)\n        Del(x-&gt;_Left,y += 1);\n    if (y != 1)\n    {\n        delete x;\n    }\n    return;\n}\n</code></pre>\n<p>i try to do that as recursive but the delete call to Del so \nwe got unlimited loop</p>\n", "Tags": "<c++><stack-overflow><destructor>", "LastEditDate": "2015-11-23T09:39:52.340", "LastActivityDate": "2015-11-23T10:33:23.020", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "5594351"}, "33868842": {"CommentCount": "0", "Body": "<p>The destructor is a function that allows an object to release the resources it owns. The destruction of the object itself:</p>\n<ul>\n<li>is done automatically if the object was allocated on the stack and your code exit the block of its declaration.</li>\n<li>is explicitely done via the delete keyword by the calling code.</li>\n<li>and some more (see \u00a7 12.4.10 from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">N3242</a>)</li>\n</ul>\n<p>What you are trying to do here, is to delete the object itself from its owd destructor. By doing so, your call to delete on this will trigger a call to the destructor which itself call its destructor.</p>\n<p>The solution to your problem is to destroy only the resources the BSNode object owns (probably _Right and _Left). If the sub-nodes have no value, then the destruction chain will stop.</p>\n<blockquote>\n<p id=\"so_33866858_33868842_0\">invoking delete on a null pointer has no effect (see \u00a7 12.4.12 from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">N3242</a>)</p>\n</blockquote>\n<p>In your case, simply do this:</p>\n<pre><code>void _BS Del(BSNode *x)\n{\n    delete _Right;\n    delete _Left\n}\n</code></pre>\n<p>Sorry I don't understand why the 'y' variable was introduced in your code.</p>\n", "CreationDate": "2015-11-23T10:33:23.020", "ParentId": "33866858", "Id": "33868842", "LastActivityDate": "2015-11-23T10:33:23.020", "PostTypeId": "2", "Score": "0", "OwnerUserId": "3337570"}});