post_cb({"5406565": {"ParentId": "5406533", "CommentCount": "6", "Body": "<p>In this case neither. The derived-class method <a href=\"http://www.parashift.com/c++-faq-lite/strange-inheritance.html#faq-23.9\" rel=\"noreferrer\">hides</a> the base-class method.</p>\n", "OwnerUserId": "160206", "PostTypeId": "2", "Id": "5406565", "Score": "9", "CreationDate": "2011-03-23T14:14:25.370", "LastActivityDate": "2011-03-23T14:14:25.370"}, "5406582": {"ParentId": "5406533", "CommentCount": "5", "Body": "<p>Overloading is the process of defining multiple methods with identical names but different signatures; Overriding is when a function in a child class has an identical signature to a virtual function in a parent class.</p>\n<pre><code>class Test {\n  // Test::func is overloaded\n  virtual void func(int x);\n  virtual void func(double y);\n};\n\nclass Child : public Test {\n  // Child::func overrides Test::func\n  virtual void func(int x); \n};\n</code></pre>\n", "OwnerUserId": "229044", "PostTypeId": "2", "Id": "5406582", "Score": "5", "CreationDate": "2011-03-23T14:15:36.370", "LastActivityDate": "2011-03-23T14:15:36.370"}, "5911765": {"ParentId": "5406533", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Function <strong><em>overloading</em></strong> is when you have several functions which <strong><em>differ in their parameter list</em></strong> or, if they are member functions, in their <strong><em><code>const</code>/<code>volatile</code> qualification</em></strong>. (In some other languages you can also overload based on the return type, but C++ doesn't allow that.)<br>\nExamples: </br></p>\n<pre><code>void f(int);\nvoid f(char);\n\nclass some_class {\n  void g();\n  void g() const;\n};\n</code></pre>\n<hr>\n<p>Function <strong><em>overriding</em></strong> is when you <strong><em>redefine</em></strong> a base class function with the <strong><em>same signature</em></strong>. Usually this only makes sense if the base class function is virtual, because otherwise the function to be called (base or derived class' version) is determined <em>at compile-time</em> using a reference's/pointer's <em>static type</em>.<br>\nExamples: </br></p>\n<pre><code>class base {\n  void f();\n  virtual void g();\n};\n\nclass derived : public base {\n  void f();\n  void g();\n};\n</code></pre>\n<hr>\n<p>Function <strong><em>hiding</em></strong> is when you define a function ina derived class (or an inner scope) that has a <strong><em>different parameter list</em></strong> than a function with the same name declared in a base class (or outer scope). In this case the derived class' function(s) <em>hides</em> the base class function(s). You can avoid that by explicitly bringing the base class function(s) into the derived class' scope with a <code>using</code> declaration.<br>\nExamples: </br></p>\n<pre><code>class base {\n  void f(int);\n  void f(char);\n};\n\nclass derived1 : public base {\n  void f(double);\n};\n\nvoid f()\n{\n  derived1 d;\n  d.f(42); // calls derived1::f(double)!\n}\n\nclass derived2 : public base {\n  using base::f; // bring base class versions into derived2's scope\n  void f(double);\n};\n\nvoid g()\n{\n  derived2 d;\n  d.f(42); // calls base::f(int)!\n}\n</code></pre>\n<hr>\n<p>Just in case it's unclear: Based on these definitions, I'd call the scenario in question here <em>overriding</em>. </p>\n</hr></hr></hr>", "OwnerUserId": "140719", "LastEditorUserId": "140719", "LastEditDate": "2015-01-08T15:45:12.940", "Id": "5911765", "Score": "7", "CreationDate": "2011-05-06T12:55:44.220", "LastActivityDate": "2015-01-08T15:45:12.940"}, "5406533": {"CommentCount": "0", "AcceptedAnswerId": "5406565", "PostTypeId": "1", "LastEditorUserId": "1033581", "CreationDate": "2011-03-23T14:12:11.713", "LastActivityDate": "2017-04-27T17:41:49.340", "LastEditDate": "2017-04-27T17:41:49.340", "ViewCount": "5197", "FavoriteCount": "3", "Title": "overloading vs overriding", "Id": "5406533", "Score": "12", "Body": "<p>I am a little confused over the two terminologies and would be glad to get some doubts clarified.</p>\n<p>As I understand <code>function overloading</code> means having multiple methods in the same class with same name but either with different number of arguments, different types of arguments or sequence of arguments irrespective of the return type which has no effect in mangled name of the functions.</p>\n<p>Does the above definition also include \"....in the same class or across related classes(related through inheritance).....\"</p>\n<p>And <code>Function Overriding</code> is related to virtual functions, same method signature(declared virtual in Base class) and overridden for implementation in Sub Classes.</p>\n<p>I was wondering at a scenario, following is the code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\n    public:\n    void doSomething(int i, int j)\n    {\n        cout&lt;&lt;\"\\nInside A::doSomething\\n\";\n    }\n};\n\nclass B: public A\n{\n    public:\n    void doSomething(int i, int j)\n    {\n        cout&lt;&lt;\"\\nInside B::doSomething\\n\";\n\n    }\n};\n\nint main()\n{\n    B obj;\n    obj.doSomething(1,2);\n    return 0;\n\n} \n</code></pre>\n<p>In the above scenario, What can be said:<br>\nThe method in derived class <code>overrides</code> method in Base class OR<br>\nThe method in derived class <code>overloads</code> method in Base Class</br></br></p>\n<p>Does Overloading apply across class scopes and does overriding term doesn't necessarily apply to virtual functions?  </p>\n<p>I think it should be <code>overrides</code>, but just need the clarification because i happen to remember the term overriding being used specifically with virtual functions.</p>\n", "Tags": "<c++><override><overloading><function-overloading>", "OwnerUserId": "452307", "AnswerCount": "4"}, "5911476": {"ParentId": "5406533", "PostTypeId": "2", "CommentCount": "0", "Body": "<ul>\n<li>hiding is when a definition in a scope is not accessible due to a declaration in a nested scope or a derived class (3.3.7/1).</li>\n</ul>\n<blockquote>\n<p id=\"so_5406533_5911476_0\">A name can be hidden by an explicit declaration of that same name in a nested declarative region or derived class.</p>\n</blockquote>\n<ul>\n<li>overriding is when a virtual member is replaced in a derived class (see 10.3/2)</li>\n</ul>\n<blockquote>\n<p id=\"so_5406533_5911476_1\">If a virtual member function vf is declared in a class Base and in a class Derived, derived directly or indirectly from Base, a member function vf with the same name and same parameter list as Base::vf is declared, then Derived::vf is also virtual an it <em>overrides</em> Base::vf.</p>\n</blockquote>\n<ul>\n<li>overloading is when several declarations coexist for the same name in the same scope (13/1)</li>\n</ul>\n<blockquote>\n<p id=\"so_5406533_5911476_2\">When two or more different declarations are specified for a single name in the same scope, that name is said to be <em>overloaded</em>.</p>\n</blockquote>\n<ul>\n<li>related, there is also the possibility of replacing operator new and delete from the standard library by one's own implementation (18.4.1.1/2, 18.4.1.1/6, 18.4.1.1/11, 18.4.1.2)</li>\n</ul>\n<p>So this is clearly a case of hiding.</p>\n", "OwnerUserId": "136208", "LastEditorUserId": "140719", "LastEditDate": "2011-05-06T12:42:59.420", "Id": "5911476", "Score": "10", "CreationDate": "2011-05-06T12:32:56.667", "LastActivityDate": "2011-05-06T12:42:59.420"}, "bq_ids": {"n4140": {"so_5406533_5911476_0": {"section_id": 7078, "quality": 1.0, "length": 12}, "so_5406533_5911476_1": {"section_id": 7003, "quality": 0.8888888888888888, "length": 24}, "so_5406533_5911476_2": {"section_id": 554, "quality": 1.0, "length": 13}}, "n3337": {"so_5406533_5911476_0": {"section_id": 6822, "quality": 1.0, "length": 12}, "so_5406533_5911476_1": {"section_id": 6749, "quality": 0.8888888888888888, "length": 24}, "so_5406533_5911476_2": {"section_id": 545, "quality": 1.0, "length": 13}}, "n4659": {"so_5406533_5911476_1": {"section_id": 8500, "quality": 0.8888888888888888, "length": 24}, "so_5406533_5911476_0": {"section_id": 8579, "quality": 1.0, "length": 12}, "so_5406533_5911476_2": {"section_id": 577, "quality": 1.0, "length": 13}}}});