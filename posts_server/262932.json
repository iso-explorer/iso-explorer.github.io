post_cb({"263105": {"Id": "263105", "PostTypeId": "2", "Body": "<p>Although the two syntaxes have the same meaning for int, the second, constructor-style syntax is more general because it can be used with other types in templates. That is, \"T(x)\" can be compiled into a conversion between primitive types (e.g., if T = int) or into a constructor call (if T is a class type). An example from my own experience where this was useful was when I switched from using native types for intermediate results of calculations to arbitrary-precision integers, which are implemented as a class.</p>\n", "OwnerDisplayName": "Nathan Kitchen", "LastActivityDate": "2008-11-04T19:34:31.053", "Score": "2", "CreationDate": "2008-11-04T19:34:31.053", "ParentId": "262932", "CommentCount": "2", "OwnerUserId": "31000"}, "263107": {"Id": "263107", "PostTypeId": "2", "Body": "<p>Konrad Rudolph is right. But consider that</p>\n<ul>\n<li>(int) x  &lt;-- is valid syntax in C and C++</li>\n<li>(int*) x  &lt;-- is valid syntax in C and C++</li>\n<li>int (x)  &lt;-- is valid in C++, but gives a syntax error in C</li>\n<li>int* (x)  &lt;-- gives a syntax error in both C and C++</li>\n</ul>\n", "OwnerDisplayName": "Anonymous", "LastActivityDate": "2008-11-04T19:34:48.057", "Score": "3", "CreationDate": "2008-11-04T19:34:48.057", "ParentId": "262932", "CommentCount": "0"}, "264661": {"Id": "264661", "PostTypeId": "2", "Body": "<p>It's worth noting that both styles of casting are deprecated in C++, in favor of the longer, more specific casting methods listed in Adam Rosenfield's answer.</p>\n", "OwnerDisplayName": "Dan Olson", "LastActivityDate": "2008-11-05T09:13:14.863", "Score": "1", "CreationDate": "2008-11-05T09:13:14.863", "ParentId": "262932", "CommentCount": "0", "OwnerUserId": "33346"}, "263016": {"Id": "263016", "PostTypeId": "2", "Body": "<p><code>int(x)</code> is called function-style cast by the standard and is the same as the C-style cast in every regard (for POD) [5.2.3]:</p>\n<blockquote>\n<p id=\"so_262932_263016_0\">If the expression list is a single expression, the type conversion expression is equivalent (in definedness, and if defined in meaning) to the corresponding cast expression (5.4).</p>\n</blockquote>\n", "OwnerDisplayName": "Konrad Rudolph", "LastActivityDate": "2008-11-04T19:11:13.253", "Score": "10", "CreationDate": "2008-11-04T19:11:13.253", "ParentId": "262932", "CommentCount": "0", "OwnerUserId": "1968"}, "262978": {"Id": "262978", "PostTypeId": "2", "Body": "<p>They are the same.</p>\n", "OwnerDisplayName": "Dima", "LastActivityDate": "2008-11-04T19:01:41.697", "Score": "3", "CreationDate": "2008-11-04T19:01:41.697", "ParentId": "262932", "CommentCount": "4", "OwnerUserId": "13313"}, "bq_ids": {"n4140": {"so_262932_263016_0": {"length": 14, "quality": 1.0, "section_id": 5999}}, "n3337": {"so_262932_263016_0": {"length": 14, "quality": 1.0, "section_id": 5767}}, "n4659": {"so_262932_263016_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7500}}}, "263038": {"Id": "263038", "PostTypeId": "2", "Body": "<p>If you want to be super-nasty, then if you write something like:</p>\n<pre><code>#define int(x) 1\n</code></pre>\n<p>Then (int)x has the meaning you expect, while int(x) will be 1 for any value of x. However, if anyone ever did this, you should probably hurt them. I can also quite believe that somewhere in the standard you are forbidden from #defining keywords, although I can't find it right now.</p>\n<p>Except for that, very stupid, special case, then as said before, [5.3.2] says they are the same for PODs</p>\n", "LastEditorUserId": "27074", "LastActivityDate": "2015-11-03T13:45:53.187", "Score": "-1", "CreationDate": "2008-11-04T19:16:58.453", "ParentId": "262932", "CommentCount": "0", "OwnerUserId": "27074", "LastEditDate": "2015-11-03T13:45:53.187"}, "262958": {"Id": "262958", "PostTypeId": "2", "Body": "<p>The first is the C style, while the second is the C++ style.</p>\n<p>In C++, use the C++ style.</p>\n", "OwnerDisplayName": "warren", "LastActivityDate": "2008-11-04T18:57:44.827", "Score": "1", "CreationDate": "2008-11-04T18:57:44.827", "ParentId": "262932", "CommentCount": "6", "OwnerUserId": "4418"}, "262932": {"ViewCount": "1957", "Body": "<p>In C++, is (int) ch equivalent to int(ch). </p>\n<p>If not, what's the difference?</p>\n", "AcceptedAnswerId": "263003", "Title": "(int) ch vs. int(ch): Are they different syntaxes for the same thing?", "CreationDate": "2008-11-04T18:52:49.517", "Id": "262932", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2008-11-04T20:33:06.880", "LastEditorDisplayName": "108", "OwnerDisplayName": "108", "LastEditorUserId": "32944", "LastActivityDate": "2015-11-03T13:45:53.187", "Score": "6", "OwnerUserId": "32944", "Tags": "<c++><casting>", "AnswerCount": "8"}, "263003": {"Id": "263003", "PostTypeId": "2", "Body": "<p>They are the same thing, and also the same as <code>(int)(ch)</code>.  In C++, it's generally preferred to use a named cast to clarify your intentions:</p>\n<ul>\n<li>Use <code>static_cast</code> to cast between primitive types of different sizes or signednesses, e.g. <code>static_cast&lt;char&gt;(anInteger)</code>.</li>\n<li>Use <code>dynamic_cast</code> to downcast a base class to a derived class (polymorphic types only), e.g. <code>dynamic_cast&lt;Derived *&gt;(aBasePtr)</code>.</li>\n<li>Use <code>reinterpret_cast</code> to cast between pointers of different types or between a pointer and an integer, e.g. <code>reinterpret_cast&lt;uintptr_t&gt;(somePtr)</code>.</li>\n<li>Use <code>const_cast</code> to remove the <code>const</code> or <code>volatile</code> qualifiers from variables (<strong>VERY DANGEROUS</strong>), e.g. <code>const_cast&lt;char *&gt;(aConstantPointer)</code>.</li>\n</ul>\n", "OwnerDisplayName": "Adam Rosenfield", "LastActivityDate": "2008-11-04T19:07:58.877", "Score": "19", "CreationDate": "2008-11-04T19:07:58.877", "ParentId": "262932", "CommentCount": "1", "OwnerUserId": "9530"}});