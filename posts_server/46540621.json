post_cb({"bq_ids": {"n4140": {"so_46540621_46541819_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5350}, "so_46540621_46541819_1": {"length": 14, "quality": 0.6363636363636364, "section_id": 5314}}, "n3337": {"so_46540621_46541819_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5147}, "so_46540621_46541819_1": {"length": 14, "quality": 0.6363636363636364, "section_id": 5111}}, "n4659": {"so_46540621_46541819_2": {"length": 18, "quality": 0.782608695652174, "section_id": 6775}, "so_46540621_46541819_1": {"length": 12, "quality": 0.5454545454545454, "section_id": 6738}}}, "46541819": {"Id": "46541819", "PostTypeId": "2", "Body": "<p>Your use of raw strings is too simplistic. It takes the sequence <code>..|..</code> as delimiter, you probably don't have the sequence <code>)..|..</code> at the end of your string. </p>\n<p>Use the full specification of delimited raw strings as described <a href=\"http://en.cppreference.com/w/cpp/language/string_literal\" rel=\"nofollow noreferrer\">in cppreference</a> in variant (6). This is also described in the C++ standard section \u00a72.14.5 String literals. The template is as follows:</p>\n<blockquote>\n<p id=\"so_46540621_46541819_0\">R\"<em>d-char-sequence</em>(<em>your raw text</em>)<em>d-char-sequence</em>\"</p>\n</blockquote>\n<p>The key is to use the <em>\"d-char-sequence\"</em>. This sequence can contain the following:</p>\n<blockquote>\n<p id=\"so_46540621_46541819_1\">any member of the basic source character set except:\n  space, the left parenthesis (, the right parenthesis ), the backslash \\,\n  and the control characters representing horizontal tab,\n  vertical tab, form feed, and newline.</p>\n</blockquote>\n<p>How that <em>d-char-sequence</em> works is described as follows:</p>\n<blockquote>\n<p id=\"so_46540621_46541819_2\">A string literal that has an R in the prefix is a raw string literal. The d-char-sequence serves as a delimiter. The terminating d-char-sequence of a raw-string is the same sequence of characters as the initial d-char-sequence. A d-char-sequence shall consist of at most 16 characters.</p>\n</blockquote>\n<p>This ensures that the raw string can legally contain any character that is supported by the source character set (unicode here). The raw string may contain quotes parentheses backslashes and even newlines.</p>\n<p>It's not as complicated as it sounds. Just add a prefix and a suffix to the raw string. It could look like this:</p>\n<pre><code>std::string(R\"my-delimiter(... long text ...)my-delimiter\");\n</code></pre>\n<p>Of course substitute <code>... long text ...</code> with the raw string literal. Just make sure that the sequence <code>)my-delimiter\"</code> does not appear in the raw string text.</p>\n", "LastActivityDate": "2017-10-03T09:54:22.887", "CommentCount": "2", "CreationDate": "2017-10-03T09:54:22.887", "ParentId": "46540621", "Score": "0", "OwnerUserId": "4823151"}, "46540621": {"ViewCount": "42", "Body": "<p>I have a string I've obfuscated in my code, by XORing each character by some random value.</p>\n<p>However, the resulting multi-line raw string literal won't compile correctly.</p>\n<p>In the following image, you can see how MSVS2015 is not parsing the string correctly, even when using proper delimeters on either end (notice the black text throughout, not being parsed as part of the string).</p>\n<p>Trying to compile the code results in errors about not being able to find the closing brace of the literal (even though it's in the proper place, at the very end of the string after the closing delimeter, etc). Manually erasing the black bits results in a proper compilation (albeit with a string that can no longer be properly unscrambled, of course).</p>\n<p><a href=\"https://i.stack.imgur.com/oLfIP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/oLfIP.png\"/></a></p>\n<p>I'm assuming this is happening because various resulting characters of the XOR function cannot be properly saved inside the .h file. Is there a solution to this problem? I've tried switching the file format to Unicode but that didn't work. </p>\n", "Title": "c++: XOR'd string with special characters won't compile as raw string literal?", "CreationDate": "2017-10-03T08:48:50.413", "LastActivityDate": "2017-10-03T09:54:22.887", "CommentCount": "14", "PostTypeId": "1", "Id": "46540621", "Score": "-2", "OwnerUserId": "613979", "Tags": "<c++><string><unicode><xor><literals>", "AnswerCount": "1"}});