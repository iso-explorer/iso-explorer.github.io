post_cb({"29114288": {"ParentId": "29111008", "LastEditDate": "2015-03-18T04:47:50.360", "CommentCount": "4", "CreationDate": "2015-03-18T04:42:46.917", "Score": "2", "LastEditorUserId": "2756719", "PostTypeId": "2", "Id": "29114288", "OwnerUserId": "2756719", "Body": "<p>The problem isn't that <code>B</code> isn't complete. As shown in your own quote, it is complete immediately after its <em>enum-base</em>, <code>: int</code>. The problem is that you are using a construct that the grammar doesn't allow.</p>\n<p>The <em>type-specifier</em> production allows two ways in which the keyword <code>enum</code> can appear in it ([dcl.type]):</p>\n<ol>\n<li>in an <em>elaborated-type-specifier</em>.</li>\n<li>in an <em>enum-specifier</em>.</li>\n</ol>\n<p>An <em>elaborated-type-specifier</em> containing <code>enum</code> looks like ([dcl.type.elab])</p>\n<blockquote>\n<p id=\"so_29111008_29114288_0\"><code>enum</code> <em>nested-name-specifier<sub>opt</sub> identifier</em></p>\n</blockquote>\n<p>which doesn't fit your code, and moreover cannot declare a new type (see [basic.lookup.elab]/p2). That is, while <code>struct A* pa;</code> is legal even without a previous declaration of <code>A</code>, <code>enum B * pb;</code> is not legal. </p>\n<p>An <em>enum-specifier</em> ([dcl.enum]/p1) is one of </p>\n<blockquote>\n<p id=\"so_29111008_29114288_1\"><em>enum-head</em> <code>{</code> <em>enumerator-list<sub>opt</sub></em> <code>}</code> <br/>\n<em>enum-head</em> <code>{</code> <em>enumerator-list</em> <code>,</code> <code>}</code></p>\n</blockquote>\n<p>without digging into what <em>enum-head</em> is, it is obvious this requires braces, which isn't in your code.</p>\n<p><code>enum class B : int;</code> is an <em>opaque-enum-declaration</em>, whose grammar is</p>\n<blockquote>\n<p id=\"so_29111008_29114288_2\"><em>enum-key attribute-specifier-seq<sub>opt</sub> identifier enum-base<sub>opt</sub></em> <code>;</code></p>\n</blockquote>\n<p>This doesn't allow you to declare anything other than the enum itself.</p>\n<p>In short, the grammar simply doesn't allow <code>enum class B:int z;</code>. Instead, you can write <code>enum class B:int; B z;</code>, which is perfectly valid, though the <code>: int</code> is redundant.</p>\n", "LastActivityDate": "2015-03-18T04:47:50.360"}, "29111008": {"CommentCount": "6", "ViewCount": "101", "CreationDate": "2015-03-17T22:35:48.933", "LastActivityDate": "2015-03-18T04:47:50.360", "Title": "Trying to understand \u00a77.2/6 in C++14", "AcceptedAnswerId": "29114288", "PostTypeId": "1", "Id": "29111008", "Score": "2", "Body": "<p>7.2/6 (C++14):</p>\n<blockquote>\n<p id=\"so_29111008_29111008_0\">An enumeration whose underlying type is fixed is an incomplete type\n  from its point of declaration (3.3.2) to immediately after its\n  <em>enum-base</em> (if any), at which point it becomes a complete type. An enumeration whose underlying type is not fixed is an incomplete type\n  from its point of declaration to immediately after the closing } of\n  its <em>enum-specifier</em>, at which point it becomes a complete type.</p>\n</blockquote>\n<p>Take a look at the snippet below (see <a href=\"http://coliru.stacked-crooked.com/a/bbf1ab6b7984f7eb\" rel=\"nofollow\">live example</a>):</p>\n<pre><code>enum A{} t;                 // enum A{} is a complete type (OK)\nenum class B:int z;         // enum class B:int is not a complete type\nint main()\n{\n}\n</code></pre>\n<p>I understand why <code>B</code> is not a complete type. But, by just looking at the paragraph above, this doesn't seem so clear to me. <code>z</code> is declared right after the <em>enum-base</em> of an enumeration, whose underlying type is fixed, the same way <code>t</code>is declared right after the closing <code>}</code> of the <em>enum-specifier</em> of an enumerator whose underlying type is not fixed.</p>\n", "Tags": "<c++><enums><language-lawyer>", "OwnerUserId": "1042389", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29111008_29111008_0": {"section_id": 5465, "quality": 0.9736842105263158, "length": 37}}, "n4659": {"so_29111008_29111008_0": {"section_id": 6899, "quality": 0.9736842105263158, "length": 37}}}});