post_cb({"34442662": {"ParentId": "34441422", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><code>s = {};</code> is not safe. </p>\n<p>The problem is that you <em>hope</em> it turns into <code>s = SomeStruct{};</code> . However, if <code>s</code> has another overload for <code>operator=</code> <a href=\"https://stackoverflow.com/questions/33511641/overload-resolution-assignment-of-empty-braces\">then that may be preferred by overload resolution</a>.</p>\n<p>So this is an anti-pattern, really.   As suggested on the other thread, you're better off writing a function, e.g.:</p>\n<pre><code>template&lt;typename T&gt; void reset(T &amp;t) { t = T{}; }\n</code></pre>\n<p>I guess you could also write <code>s = decltype(s){};</code>, so long as <code>s</code> was not a reference.</p>\n", "OwnerUserId": "1505939", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:09:02.270", "Id": "34442662", "Score": "12", "CreationDate": "2015-12-23T19:44:38.677", "LastActivityDate": "2015-12-23T19:44:38.677"}, "bq_ids": {"n4140": {"so_34441422_34441528_0": {"section_id": 6181, "quality": 1.0, "length": 5}}, "n3337": {"so_34441422_34441528_0": {"section_id": 5942, "quality": 1.0, "length": 5}}, "n4659": {"so_34441422_34441528_0": {"section_id": 7683, "quality": 1.0, "length": 5}}}, "34441422": {"CommentCount": "5", "CreationDate": "2015-12-23T18:11:27.813", "PostTypeId": "1", "AcceptedAnswerId": "34441528", "LastEditorUserId": "4342498", "LastActivityDate": "2015-12-23T19:44:38.677", "LastEditDate": "2015-12-23T18:46:21.717", "ViewCount": "836", "FavoriteCount": "3", "Title": "Zero-reinitializing a struct in C++", "Id": "34441422", "Score": "20", "Body": "<p>A POD <code>struct</code> can be zero-initialized in C++11 as follows:</p>\n<pre><code>SomeStruct s{};\n</code></pre>\n<p>However, what do I do if I already have an instance of the struct and I want to re-initialize it to zeros? The following seems to work:</p>\n<pre><code>s = {};\n</code></pre>\n<p>Can someone point out the relevant standardese? I assume this is what is happening:</p>\n<ol>\n<li>A new zero-initialized instance gets created.</li>\n<li>The new instance is assigned to the existing instance, invoking the implicit assignment operator.</li>\n</ol>\n", "Tags": "<c++><c++11><struct><language-lawyer>", "OwnerUserId": "179895", "AnswerCount": "2"}, "34441528": {"ParentId": "34441422", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>What you are looking for is in [expr.ass]</p>\n<blockquote>\n<p id=\"so_34441422_34441528_0\">A <em>braced-init-list</em> may appear on the right-hand side of</p>\n<ul>\n<li>an assignment to a scalar, in which case the initializer list shall have at most a single element. The\n  meaning of <code>x={v}</code>, where T is the scalar type of the expression x, is that of <code>x=T{v}</code>. The meaning of\n  <code>x={}</code> is <code>x=T{}</code>.</li>\n<li>an assignment to an object of class type, in which case the initializer list is passed as the argument to\n  the assignment operator function selected by overload resolution (13.5.3, 13.3).</li>\n</ul>\n</blockquote>\n<p>So your guess is correct.  The compiler may be able to optimize things away but you can think of it as create a zero-initialized temporary and pass it to the <code>operator=</code>.</p>\n", "OwnerUserId": "4342498", "LastEditorUserId": "4342498", "LastEditDate": "2015-12-23T18:25:06.860", "Id": "34441528", "Score": "18", "CreationDate": "2015-12-23T18:19:58.153", "LastActivityDate": "2015-12-23T18:25:06.860"}});