post_cb({"16795467": {"ParentId": "16794972", "CommentCount": "0", "Body": "<p>Yes, there can be advantages.</p>\n<p>The most obvious is that the <code>what</code> for existing derivatives of <code>std::exception</code> (e.g., <code>std::logic_error</code>, <code>std::invalid_argument</code>) only deal with <code>std::string</code>s or <code>char *</code>s to specify the reason for the exception. That's probably fine if you only deal with an English speaking audience, but if you want to use the <code>what</code> to display an error message to somebody who doesn't use English, it can get clumsy in a hurry.</p>\n<p>If you're using (for example) 32-bit Unicode strings throughout your program, you'd typically prefer do the same in your exception handling. In such a case, a hierarchy similar to those in the standard, but using 32-bit Unicode strings for the <code>what</code> argument probably makes a <em>lot</em> of sense. I suppose you <em>could</em> still use <code>std::exception</code> for the base of that hierarchy, but it's open to question how much (if anything) you'd gain from doing so.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "16795467", "Score": "2", "CreationDate": "2013-05-28T15:08:32.697", "LastActivityDate": "2013-05-28T15:08:32.697"}, "16794972": {"CommentCount": "3", "ViewCount": "223", "CreationDate": "2013-05-28T14:44:27.953", "LastActivityDate": "2013-05-28T15:11:37.830", "Title": "Is there any advantages to throw other thing that a std::exception( or derivatives types)", "AcceptedAnswerId": "16795212", "PostTypeId": "1", "Id": "16794972", "Score": "3", "Body": "<p>Is there any advantages or uses cases to throw other thing that a std::exception( or a derivatives types).</p>\n<p>For example <code>throw 1;</code> or <code>throw \"error\";</code></p>\n<p>In other terms why the c++ standard allow it.</p>\n", "Tags": "<c++><exception-handling>", "OwnerUserId": "619570", "AnswerCount": "5"}, "16795212": {"ParentId": "16794972", "LastEditDate": "2013-05-28T15:00:13.967", "CommentCount": "0", "CreationDate": "2013-05-28T14:55:09.873", "OwnerUserId": "952747", "LastEditorUserId": "952747", "PostTypeId": "2", "Id": "16795212", "Score": "5", "Body": "<p>Per \u00a715.1 [except]:</p>\n<blockquote>\n<p id=\"so_16794972_16795212_0\">Exception handling provides a way of transferring control and\n  <strong>information</strong> from a point in the execution of a thread to an exception\n  handler associated with a point previously passed by the execution.</p>\n</blockquote>\n<p>The word <em>information</em> illustrates everything, it can be everything such as objects, numbers, ... .</p>\n<p>There is nothing in standard that says you must just throw <code>std::exception</code>. In the other words, maybe someone wants to throw his own exception objects.</p>\n<p>Maybe someone wants to use exception-handling to handle something far from normal exceptions. </p>\n", "LastActivityDate": "2013-05-28T15:00:13.967"}, "16795359": {"ParentId": "16794972", "LastEditDate": "2017-05-23T11:50:11.853", "CommentCount": "0", "CreationDate": "2013-05-28T15:03:20.020", "OwnerUserId": "96780", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "16795359", "Score": "3", "Body": "<p>From reference material about std::exception:</p>\n<blockquote>\n<p id=\"so_16794972_16795359_0\"><strong>std::exception</strong></p>\n<p id=\"so_16794972_16795359_1\">All objects thrown by components of the standard library are derived\n  from this class. Therefore, all standard exceptions can be caught by\n  catching this type by reference.</p>\n</blockquote>\n<p>By throwing anything else, for example <code>NuclearPlantException</code>, you could handle your exceptions and the ones from the standard library separately. The standard library could throw <code>std::invalid_argument</code> or <code>std::bad_alloc</code> (subtypes of <code>std::exception</code>) and you could throw <code>LossOfCoolant</code> (a subtype of <code>NuclearPlantException</code>).</p>\n<p>So there is at least one advantage: <strong>separating standard library exceptions from your exceptions</strong>. Because you don't throw <code>std::bad_alloc</code> if there's enough available space for your uranium, then any exception has a clear origin, potentially making testing and debugging easier.</p>\n<hr>\n<p><strong>Note:</strong> For more in-depth discussion see the question <a href=\"https://stackoverflow.com/q/1669514/96780\">Should I inherit from std::exception?</a>.</p>\n</hr>", "LastActivityDate": "2013-05-28T15:08:54.870"}, "16795527": {"ParentId": "16794972", "CommentCount": "0", "Body": "<p>Throwing things was in C++ a decade before std::exception or even std:: became an idea. This was not removed for backward compatibility reasons. </p>\n<p>Those who chose not use std:: certainly like it that way, and throw other exceptions, likely derived from some base class supplied by a library. It's fine until you get several exception hierarchies to deal with in client code.  So new code that does not fight against using std:: entirely (setting new_handler to avoid std::bad_alloc) is likely to re-fit its exception root classes to use std::exception as base.</p>\n<p>Throwing non-class things like ints or pointers is often advised agaist, but in a light environment can make perfect sense -- in an small embedded project leaving the exceptions enabled but throwing only an enum sounds sensible. </p>\n<p>In general, if the language allows to throw any copyable object why restrict it? While forcing to use a special library class would be not in spirit of C++ even if we had time travel. </p>\n", "OwnerUserId": "2422194", "PostTypeId": "2", "Id": "16795527", "Score": "0", "CreationDate": "2013-05-28T15:11:37.830", "LastActivityDate": "2013-05-28T15:11:37.830"}, "16795200": {"ParentId": "16794972", "LastEditDate": "2013-05-28T15:06:32.033", "CommentCount": "1", "CreationDate": "2013-05-28T14:54:26.463", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "PostTypeId": "2", "Id": "16795200", "Score": "4", "Body": "<p>I can't think of any obvious reasons why a class derived from <code>std::exception</code> wouldn't typically be better. </p>\n<p>But the <code>throw 1</code> or <code>throw \"Error\"</code> are valid expressions, and they probably take a bit less \"effort\" creating, and there may be situations where this is a benefit. Throwing an <code>exception</code> type exception from the constructor of <code>exception</code> would probably not work very well, so there's one place. </p>\n<p>However, it's probably more of a philosophical decision: Since <code>throw</code> can be made to throw a any type of object, it's not a bad idea to allow it. The more restrictions you put on things in a language, the more you restrict the possible uses of a language. </p>\n", "LastActivityDate": "2013-05-28T15:06:32.033"}, "bq_ids": {"n4140": {"so_16794972_16795212_0": {"section_id": 3330, "quality": 1.0, "length": 17}}, "n3337": {"so_16794972_16795212_0": {"section_id": 3200, "quality": 1.0, "length": 17}}, "n4659": {"so_16794972_16795212_0": {"section_id": 4096, "quality": 1.0, "length": 17}}}});