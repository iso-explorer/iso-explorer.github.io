post_cb({"37255200": {"ViewCount": "764", "Body": "<p>If I have a class <code>A</code>, and I write <code>A(5);</code>, it clearly makes a temporary variable.</p>\n<p>But what is not clear if <code>A(5);</code> is a constructor call (using <code>5</code> as parameter), or if this is a function style cast, casting <code>5</code> to <code>A</code>. Can someone explain it to me please?</p>\n", "AcceptedAnswerId": "37255383", "Title": "Function style casting vs calling constructor", "CreationDate": "2016-05-16T13:33:06.233", "Id": "37255200", "CommentCount": "8", "LastEditDate": "2016-05-16T13:54:06.920", "PostTypeId": "1", "LastEditorUserId": "3980929", "LastActivityDate": "2016-05-16T14:46:16.917", "Score": "5", "OwnerUserId": "4681099", "Tags": "<c++><casting>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37255200_37255383_2": {"length": 34, "quality": 0.8947368421052632, "section_id": 6030}, "so_37255200_37255383_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 367}, "so_37255200_37255383_1": {"length": 57, "quality": 0.9193548387096774, "section_id": 5999}}, "n3337": {"so_37255200_37255383_2": {"length": 35, "quality": 0.9210526315789473, "section_id": 5798}, "so_37255200_37255383_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 356}, "so_37255200_37255383_1": {"length": 57, "quality": 0.9193548387096774, "section_id": 5767}}, "n4659": {"so_37255200_37255383_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 379}}}, "37255383": {"Id": "37255383", "PostTypeId": "2", "Body": "<p>It's a functional-style type conversion which creates a <code>t</code> from an <code>int</code> by calling the constructor. There is no way to explicitly call a constructor in C++.</p>\n<p>This is described in <code>[expr.type.conv]</code> (N3337):</p>\n<blockquote>\n<p id=\"so_37255200_37255383_0\"><strong>5.2.3 Explicit type conversion (functional notation)</strong></p>\n<p id=\"so_37255200_37255383_1\">1) A simple-type-specifer (7.1.6.2) or typename-specifer (14.6) followed by a parenthesized expression-list\n  constructs a value of the specified type given the expression list. If the expression list is a single expression,\n  the type conversion expression is equivalent (in definedness, and if defined in meaning) to the corresponding\n  cast expression (5.4). If the type specified is a class type, the class type shall be complete. If the expression\n  list specifies more than a single value, the type shall be a class with a suitably declared constructor (8.5, 12.1),\n  and the expression <code>T(x1, x2, ...)</code> is equivalent in effect to the declaration <code>T t(x1, x2, ...);</code> for some invented temporary variable <code>t</code>, with the result being the value of <code>t</code> as a prvalue.</p>\n</blockquote>\n<p>Since <code>t</code> is a <em>simple-type-specifier</em>, this is equivalent to the corresponding cast expression. This is allowed to carry out the equivalent of a <code>static_cast</code> (<code>[expr.cast]/4</code>), which defines the final result of the conversion:</p>\n<blockquote>\n<p id=\"so_37255200_37255383_2\"><code>[expr.static.cast]/4:</code> Otherwise, an expression <code>e</code> can be explicitly converted to a type <code>T</code> using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the declaration <code>T t(e);</code> is well-formed, for some invented temporary variable <code>t</code> (8.5). The\n  effect of such an explicit conversion is the same as performing the declaration and initialization and then\n  using the temporary variable as the result of the conversion. The expression <code>e</code> is used as a glvalue if and\n  only if the initialization uses it as a glvalue.</p>\n</blockquote>\n", "LastEditorUserId": "496161", "LastActivityDate": "2016-05-16T13:57:48.590", "Score": "8", "CreationDate": "2016-05-16T13:41:28.997", "ParentId": "37255200", "CommentCount": "1", "OwnerUserId": "496161", "LastEditDate": "2016-05-16T13:57:48.590"}});