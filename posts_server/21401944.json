post_cb({"bq_ids": {"n4140": {"so_21401944_21402811_1": {"length": 10, "quality": 1.0, "section_id": 7107}, "so_21401944_21402811_0": {"length": 41, "quality": 1.0, "section_id": 7079}}, "n3337": {"so_21401944_21402811_1": {"length": 10, "quality": 1.0, "section_id": 6851}, "so_21401944_21402811_0": {"length": 41, "quality": 1.0, "section_id": 6823}}, "n4659": {"so_21401944_21402811_1": {"length": 10, "quality": 1.0, "section_id": 8608}, "so_21401944_21402811_0": {"length": 41, "quality": 1.0, "section_id": 8580}}}, "21401944": {"ViewCount": "289", "Body": "<p>I recently had the problem that I needed some helper functions to return instances of different types, similar to <code>std::make_pair</code>. My syntax of choice for this was:</p>\n<pre><code>Event event(Trigger(...), []() { });\n</code></pre>\n<p>where <code>...</code> was some simple parameter that created a different trigger type based on <code>...</code>'s type (e.g., <code>Time</code>, <code>UserInput</code>, etc.).</p>\n<p>In addition I wanted some predefined triggers that could be used directly, such as:</p>\n<pre><code>Event event(Trigger::OnInit, []() { });\n</code></pre>\n<p>I found that defining a class and instance named <code>Trigger</code> allowed me to support both syntaxes:</p>\n<pre><code>static const struct Trigger {\n    static const OnceTrigger OnInit;\n\n    TimeTrigger operator()(Time const &amp;) const;\n    UserTrigger operator()(UserInput const &amp;) const;\n} Trigger;\n</code></pre>\n<p>Notice the identically named type and instance names.</p>\n<p>This works in both GCC and MSVC, but I am wondering if and how valid this is according to the standard. Is it \"luck\" that both compilers support this? Or is name lookup defined such that this is guaranteed to work on all compilers?</p>\n", "AcceptedAnswerId": "21402811", "Title": "Identical class and instance names", "CreationDate": "2014-01-28T09:43:15.947", "Id": "21401944", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-01-28T10:19:21.630", "Score": "3", "OwnerUserId": "694509", "Tags": "<c++>", "AnswerCount": "2"}, "21402046": {"Id": "21402046", "PostTypeId": "2", "Body": "<p>Being able to name a structure (or class in C++) type the same as an instance of that structure is brought in from C, and it's because structure-names are in a separate namespace (not in the sense of C++ <code>namespace</code> though) compared to variable-names.</p>\n", "LastActivityDate": "2014-01-28T09:47:40.087", "CommentCount": "0", "CreationDate": "2014-01-28T09:47:40.087", "ParentId": "21401944", "Score": "1", "OwnerUserId": "440558"}, "21402811": {"Id": "21402811", "PostTypeId": "2", "Body": "<p>In the function call syntax <code>Trigger(...)</code>, the class is hidden by the instance per 3.3.10:</p>\n<blockquote>\n<p id=\"so_21401944_21402811_0\">2 - A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member, function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data member, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is visible.</p>\n</blockquote>\n<p>In the qualified name lookup syntax <code>Trigger::OnInit</code>, the class is visible per 3.4.3:</p>\n<blockquote>\n<p id=\"so_21401944_21402811_1\">1 - [...]  lookup of the name preceding [the] <code>::</code> considers only namespaces, types, and templates whose specializations are types.</p>\n</blockquote>\n<p>Indeed, the standard has an example which demonstrates how qualified name lookup is not subject to hiding of type names:</p>\n<pre><code>class A {\npublic:\n  static int n;\n};\nint main() {\n  int A;\n  A::n = 42; // OK\n  A b; // ill-formed: A does not name a type\n}\n</code></pre>\n<p>So your code is fine per the standard.  (Whether it's a good style is another matter entirely!)</p>\n", "LastActivityDate": "2014-01-28T10:19:21.630", "CommentCount": "0", "CreationDate": "2014-01-28T10:19:21.630", "ParentId": "21401944", "Score": "1", "OwnerUserId": "567292"}});