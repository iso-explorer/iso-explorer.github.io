post_cb({"bq_ids": {"n4140": {"so_12285638_12285672_0": {"length": 13, "quality": 1.0, "section_id": 438}, "so_12285638_12285672_1": {"length": 15, "quality": 1.0, "section_id": 438}}, "n3337": {"so_12285638_12285672_0": {"length": 13, "quality": 1.0, "section_id": 429}, "so_12285638_12285672_1": {"length": 15, "quality": 1.0, "section_id": 429}}, "n4659": {"so_12285638_12285672_0": {"length": 13, "quality": 1.0, "section_id": 458}, "so_12285638_12285672_1": {"length": 15, "quality": 1.0, "section_id": 458}}}, "12285671": {"Id": "12285671", "PostTypeId": "2", "Body": "<p>The order of initialization is the same as the order of declaration in the class.</p>\n<p>If the order on the constructor's initialization list is different then compilers usually issue a warning. For example for the class:</p>\n<pre><code>class A {\npublic:\n    A() : b(1), a(b) {}\nprivate\n    int a;\n    int b;\n};\n</code></pre>\n<p>GCC will warn that:</p>\n<pre><code>$ g++ -Wall c.cc\nc.cc:5: error: expected `:' before \u2018int\u2019\nc.cc: In constructor \u2018A::A()\u2019:\nc.cc:6: warning: \u2018A::b\u2019 will be initialized after\nc.cc:5: warning:   \u2018int A::a\u2019\nc.cc:3: warning:   when initialized here\n</code></pre>\n<p>This is because it can easily lead to errors. In the above example value of <code>a</code> will be unspecified.</p>\n", "LastEditorUserId": "300886", "LastActivityDate": "2012-09-05T16:34:04.960", "Score": "2", "CreationDate": "2012-09-05T16:16:39.107", "ParentId": "12285638", "CommentCount": "0", "OwnerUserId": "300886", "LastEditDate": "2012-09-05T16:34:04.960"}, "12285638": {"ViewCount": "147", "Body": "<blockquote>\n<p id=\"so_12285638_12285638_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6308915/member-fields-order-of-construction\">Member fields, order of construction</a> </br></p>\n</blockquote>\n<p>If i have a class with two members like this:</p>\n<pre><code>class A\n{\n    int a;\n    int b;\n    A() {}\n};\n</code></pre>\n<p>Is the <em>order</em> in which <code>a</code> and <code>b</code> are constructed <em>undefined</em>?</p>\n<p>If I use <code>cl</code>, then no matter in which order I call the constructors, the members are always constructed in the order in which they are declared in the class. In this case it would always be <code>a</code> then <code>b</code>, even if I define the constructor for <code>A</code> like:</p>\n<pre><code>A() : b(), a() {}\n</code></pre>\n<p>But I am assuming that that is just the behaviour of the specific compiler.</p>\n", "AcceptedAnswerId": "12285672", "Title": "Is the order of construction of member variables of a class undefined in c++?", "CreationDate": "2012-09-05T16:14:42.417", "LastActivityDate": "2012-09-05T16:34:04.960", "CommentCount": "3", "LastEditDate": "2017-05-23T10:24:41.217", "PostTypeId": "1", "Tags": "<c++>", "Id": "12285638", "AnswerCount": "2", "Score": "4", "OwnerUserId": "1230538", "ClosedDate": "2013-01-28T13:55:51.897", "LastEditorUserId": "-1"}, "12285672": {"Id": "12285672", "PostTypeId": "2", "Body": "<p>No. Members are constructed in the order in which they are declared.</p>\n<p>You are advised to arrange your initializer list in the same order, but you are not required to do so. It's just very confusing if you don't and may lead to hard-to-detect errors.</p>\n<p>Example:</p>\n<pre><code>struct Foo {\n    int a; int b;\n    Foo() : b(4), a(b) { }  // does not do what you think!\n};\n</code></pre>\n<p>This construction is actually undefined behaviour, because you're reading an uninitialized variable in the initializer <code>a(b)</code>.</p>\n<hr>\n<p>Standard reference (C++11, 12.6.2/10):</p>\n<blockquote>\n<p id=\"so_12285638_12285672_0\">\u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).</p>\n<p id=\"so_12285638_12285672_1\">\u2014 Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p>\n</blockquote>\n</hr>", "LastEditorUserId": "596781", "LastActivityDate": "2012-09-05T16:26:04.133", "Score": "13", "CreationDate": "2012-09-05T16:16:39.403", "ParentId": "12285638", "CommentCount": "4", "OwnerUserId": "596781", "LastEditDate": "2012-09-05T16:26:04.133"}});