post_cb({"40753597": {"CommentCount": "5", "ViewCount": "265", "CreationDate": "2016-11-22T23:35:22.720", "LastActivityDate": "2016-11-23T00:03:47.860", "Title": "c++ How to declare a class as local to a file", "AcceptedAnswerId": "40753678", "PostTypeId": "1", "Id": "40753597", "Score": "2", "Body": "<p>So, I know static functions are functions that are local to the file. Thus, they can't be accessed from other files. Does this work for classes too? I've read a ton of controversy on how <code>static class</code> does not declare the class to contain purely static members and methods (which is obvious), but couldn't find anything that mentioned whether or not this would declare the class to be locally accessible to the file scope, as is more logical.</p>\n<p>In case it doesn't, what about using an anonymous namespace, which I've heard also can be used to declare file local functions?</p>\n", "Tags": "<c++><class><scope><static><translation-unit>", "OwnerUserId": "586652", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_40753597_40753678_0": {"section_id": 5395, "quality": 0.9, "length": 9}}, "n3337": {"so_40753597_40753678_0": {"section_id": 5189, "quality": 0.9, "length": 9}}, "n4659": {"so_40753597_40753678_0": {"section_id": 6820, "quality": 0.9, "length": 9}}}, "40753678": {"ParentId": "40753597", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-11-22T23:42:15.180", "Score": "7", "LastEditorUserId": "2877241", "LastEditDate": "2016-11-22T23:54:40.343", "Id": "40753678", "OwnerUserId": "2877241", "Body": "<p>You can define a class in unnamed namespace as for example</p>\n<pre><code>namespace\n{\n    struct A {};\n}\n</code></pre>\n<p>In this case the class name will have internal linkage. That is it is visible only in the compilation unit where it is defined and all compilation units that include that definition will have their own class definitions.</p>\n<p>As for the storage class specifier <code>static</code> then (7.1.1 Storage class specifiers)</p>\n<blockquote>\n<p id=\"so_40753597_40753678_0\">5 The static specifier can be applied only to names of variables and\n  functions and to anonymous unions</p>\n</blockquote>\n", "LastActivityDate": "2016-11-22T23:54:40.343"}, "40753903": {"ParentId": "40753597", "CommentCount": "0", "CreationDate": "2016-11-23T00:03:47.860", "OwnerUserId": "2785528", "PostTypeId": "2", "Id": "40753903", "Score": "1", "Body": "<blockquote>\n<p id=\"so_40753597_40753903_0\">Does this work for classes too?</p>\n</blockquote>\n<p>No.  no such 'static' keyword for class.</p>\n<hr>\n<p>As an alternative to an 'anonymous namespace', you can declare a class (Foo) and its definition (implementation) entirely within a single cpp file.  The only code which can use this class is the code below that declaration ...</p>\n<p>File X.cpp:</p>\n<pre><code>// Foo declared\nclass Foo\n{\npublic:\n   //...ctor\n   //...dtor\n   // etc.       \n}\n\n// ... Foo defined (implemented)\nFoo::etc() { ... }\n\n\n// implementation of X - only X has access to Foo.\n</code></pre>\n<p>End of X.cpp.</p>\n<pre><code>And File X.hpp does not reference Foo.\n</code></pre>\n<p>If you subsequently discover a name collision (i.e. linker reports duplicate symbol), your only choice is to change one or the other name.</p>\n<hr>\n<p>There are many Q&amp;A's in SO about anonymous namespaces.  I am careful what kinds of things I put into one, and agree they can prevent name collision.</p>\n<p>I have used both techniques.</p>\n</hr></hr>", "LastActivityDate": "2016-11-23T00:03:47.860"}});