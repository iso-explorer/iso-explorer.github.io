post_cb({"bq_ids": {"n4140": {"so_18899383_18899438_0": {"length": 19, "quality": 0.95, "section_id": 355}, "so_18899383_18899438_1": {"length": 18, "quality": 0.9, "section_id": 603}}, "n3337": {"so_18899383_18899438_0": {"length": 19, "quality": 0.95, "section_id": 345}, "so_18899383_18899438_1": {"length": 18, "quality": 0.9, "section_id": 593}}, "n4659": {"so_18899383_18899438_0": {"length": 19, "quality": 0.95, "section_id": 365}, "so_18899383_18899438_1": {"length": 18, "quality": 0.9, "section_id": 629}}}, "18899597": {"Id": "18899597", "PostTypeId": "2", "Body": "<p>The compile will choose the best matching overload.</p>\n<pre><code>template&lt;class V&gt;\nbool tryGetValue(const std::string &amp;key,V&amp; value) {\n    return false;\n}\n\n// Overload (no specilaization)\nbool tryGetValue(const std::string &amp;key,bool&amp; value) {\n    return true;\n}\n\nint main()\n{\n    std::string s = \"Hello\";\n    int i = 1;\n    bool b = true;\n    std::cout\n        &lt;&lt; \"Template: \"\n        &lt;&lt; ((tryGetValue(s, i) == false) ? \"Success\" : \"Failure\") &lt;&lt; std::endl;\n    std::cout\n        &lt;&lt; \"No Template: \" &lt;&lt; (tryGetValue(s, b) ? \"Success\" : \"Failure\") &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2013-09-19T15:59:14.750", "CommentCount": "0", "CreationDate": "2013-09-19T15:59:14.750", "ParentId": "18899383", "Score": "0", "OwnerUserId": "2249683"}, "18899417": {"Id": "18899417", "PostTypeId": "2", "Body": "<p>The compiler will prefer the specialized version whenever possible.</p>\n", "LastActivityDate": "2013-09-19T15:51:21.610", "CommentCount": "1", "CreationDate": "2013-09-19T15:51:21.610", "ParentId": "18899383", "Score": "1", "OwnerUserId": "1828013"}, "18899383": {"ViewCount": "49", "Body": "<p>Consider these are both inside a class declaration:</p>\n<pre><code>template&lt;class V&gt;\nbool tryGetValue(const string &amp;key,V&amp; value) const { ... }\nbool tryGetValue(const string &amp;key,bool&amp; value) const { ... }\n</code></pre>\n<p>What will the compiler do here?</p>\n", "AcceptedAnswerId": "18899438", "Title": "Templated and explicit parameter type versions of same method signature", "CreationDate": "2013-09-19T15:49:56.480", "Id": "18899383", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-09-19T16:05:01.880", "Score": "3", "OwnerUserId": "197229", "Tags": "<c++><visual-c++><visual-studio-2005>", "AnswerCount": "3"}, "18899438": {"Id": "18899438", "PostTypeId": "2", "Body": "<p>It will prefer the non-template method.</p>\n<p>From 14.8.3:</p>\n<blockquote>\n<p id=\"so_18899383_18899438_0\">Note also that 13.3.3 specifies that a non-template function will be given\n  preference over a template specialization if the two functions are otherwise equally good candidates for an overload match.</p>\n</blockquote>\n<p>And a part from 13.3.3:</p>\n<blockquote>\n<p id=\"so_18899383_18899438_1\">Given these definitions, a viable function F1 is defined to be a better function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n<p id=\"so_18899383_18899438_2\">(...)</p>\n<ul>\n<li>F1 is a non-template function and F2 is a function template specialization, or, if not that,</li>\n</ul>\n<p id=\"so_18899383_18899438_3\">(...)</p>\n</blockquote>\n", "LastEditorUserId": "133707", "LastActivityDate": "2013-09-19T16:05:01.880", "Score": "1", "CreationDate": "2013-09-19T15:52:07.617", "ParentId": "18899383", "CommentCount": "0", "OwnerUserId": "133707", "LastEditDate": "2013-09-19T16:05:01.880"}});