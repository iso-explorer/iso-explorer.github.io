post_cb({"24552554": {"ParentId": "24552283", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This matters when the initialiser of one variable refers to another variable.</p>\n<pre><code>constexpr int f(int);\n\nextern const int a = f(1); // not required to be statically initialized\nextern const int b = a; // also not required to be statically initialized\n\nconstexpr int f(int x) { return x; }\n</code></pre>\n<p>Now suppose that the implementation chooses to statically initialize <code>b</code>, but dynamically initialize <code>a</code>. In that case, the initialization of <code>b</code> would take place before that of <code>a</code>. The text you ask about explains that this doesn't permit an implementation to initialize <code>b</code> to zero: even if <code>b</code> is initialized first, its value must be <code>f(1)</code>, which is <code>1</code>.</p>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2014-07-03T12:26:52.253", "Id": "24552554", "Score": "3", "CreationDate": "2014-07-03T11:30:16.670", "LastActivityDate": "2014-07-03T12:26:52.253"}, "24552283": {"CommentCount": "1", "ViewCount": "70", "OwnerDisplayName": "user2953119", "CreationDate": "2014-07-03T11:18:03.690", "LastActivityDate": "2014-07-03T12:26:52.253", "PostTypeId": "1", "AcceptedAnswerId": "24552554", "Title": "Static initialization when it is not required", "Id": "24552283", "Score": "3", "Body": "<p>Quote from 3.6.2/3 of N3797 C++14 final working draft:</p>\n<blockquote>\n<p id=\"so_24552283_24552283_0\">An implementation is permitted to perform the initialization of a\n  non-local variable with static storage duration as a static\n  initialization even if such initialization is not required to be done\n  statically, provided that</p>\n<p id=\"so_24552283_24552283_1\">\u2014 the dynamic version of the initialization does not change the value\n  of any other object of namespace scope prior to its initialization,\n  and</p>\n<p id=\"so_24552283_24552283_2\">\u2014 the static version of the initialization produces the same value in\n  the initialized variable as would be produced by the dynamic\n  initialization if <strong>all variables</strong> not required to be initialized\n  statically were initialized dynamically.</p>\n</blockquote>\n<p>What does all variable have to initialization of one specific variable?</p>\n<p>If it possible, describe the latter point by example.</p>\n", "Tags": "<c++><initialization>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24552283_24552283_0": {"section_id": 7152, "quality": 1.0, "length": 18}, "so_24552283_24552283_1": {"section_id": 7152, "quality": 1.0, "length": 13}, "so_24552283_24552283_2": {"section_id": 7152, "quality": 1.0, "length": 20}}, "n3337": {"so_24552283_24552283_0": {"section_id": 6896, "quality": 1.0, "length": 18}, "so_24552283_24552283_1": {"section_id": 6896, "quality": 1.0, "length": 13}, "so_24552283_24552283_2": {"section_id": 6896, "quality": 1.0, "length": 20}}, "n4659": {"so_24552283_24552283_0": {"section_id": 8653, "quality": 0.9444444444444444, "length": 17}, "so_24552283_24552283_1": {"section_id": 8653, "quality": 0.8461538461538461, "length": 11}, "so_24552283_24552283_2": {"section_id": 8653, "quality": 1.0, "length": 20}}}});