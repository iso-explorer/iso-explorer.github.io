post_cb({"46339519": {"ViewCount": "33", "Body": "<p>Im trying to call default copy constructor with uniform initialization, but it's not working.</p>\n<p>For example:</p>\n<pre><code>#include &lt;string&gt;\n\nstruct Work {\n        std::string author;\n        std::string name;\n        int year;\n};\n\nint main() {\n        Work s9 {\"Beethoven\", \"Symphony No. 9 in D minor, Op. 125; Choral\", 1824}; // memberwise initialization\n        Work currently_playing {s9};    // copy initialization\n\n        return 0;\n}\n</code></pre>\n<p>Im compiling it as: <code>g++ -std=c++11 -c Ex1.cpp</code></p>\n<p>And compiler gives error:</p>\n<pre><code>Ex1.cpp: In function \u2018int main()\u2019:\nEx1.cpp:11:28: error: could not convert \u2018s9\u2019 from \u2018Work\u2019 to \u2018std::string {aka std::basic_string&lt;char&gt;}\u2019\n  Work currently_playing {s9}; // copy initialization\n                            ^\n</code></pre>\n<p>Doesn't uniform initialization work to copy initialize object?</p>\n", "AcceptedAnswerId": "46339888", "Title": "calling copy constructor with uniform initialization", "CreationDate": "2017-09-21T08:54:53.457", "Id": "46339519", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-09-21T09:30:29.980", "Score": "3", "OwnerUserId": "1508907", "Tags": "<c++11><g++4.8>", "AnswerCount": "2"}, "46339595": {"Id": "46339595", "PostTypeId": "2", "LastEditDate": "2017-09-21T09:01:49.777", "CommentCount": "1", "LastEditorUserId": "598696", "LastActivityDate": "2017-09-21T09:01:49.777", "CreationDate": "2017-09-21T08:58:44.457", "ParentId": "46339519", "Score": "2", "Body": "<p>This is either an old g++ bug or an old core language defect. Your code compiles properly starting from g++ 5. I strongly suggest you to update your compiler, as 4.8 is extremely old.</p>\n<p><a href=\"https://godbolt.org/g/wh1qAp\" rel=\"nofollow noreferrer\"><strong>conformance view on godbolt.org</strong></a></p>\n<p><a href=\"https://wandbox.org/permlink/iVqGPUqVdeg9QY50\" rel=\"nofollow noreferrer\"><strong>live example on wandbox</strong></a></p>\n", "OwnerUserId": "598696"}, "bq_ids": {"n4140": {"so_46339519_46339888_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 3325}}, "n4659": {"so_46339519_46339888_0": {"length": 17, "quality": 1.0, "section_id": 4091}}}, "46339888": {"Id": "46339888", "PostTypeId": "2", "LastEditDate": "2017-09-21T09:30:29.980", "CommentCount": "0", "LastEditorUserId": "3903983", "LastActivityDate": "2017-09-21T09:30:29.980", "CreationDate": "2017-09-21T09:11:43.447", "ParentId": "46339519", "Score": "3", "Body": "<p>This is a bug in the C++11 standard. C++14 changed how <em>list-initialization</em> is performed. In C++11, <code>X{X{}}</code> would perform <em>aggregate-initialization</em> if <code>X</code> is an <a href=\"http://eel.is/c++draft/dcl.init.aggr#def:aggregate\" rel=\"nofollow noreferrer\">aggregate type</a>. C++14 added an extra clause so that this code correctly invokes the corresponding constructor; [dcl.init.list]/3.2:</p>\n<blockquote>\n<p id=\"so_46339519_46339888_0\">If T is an aggregate class and the initializer list has a single\n  element of type cv U, where U is T or a class derived from T, the\n  object is initialized from that element (by copy-initialization for\n  copy-list-initialization, or by direct-initialization for\n  direct-list-initialization).</p>\n</blockquote>\n<p>Sources:</p>\n<p><a href=\"http://eel.is/c++draft/dcl.init.list#3.2\" rel=\"nofollow noreferrer\">http://eel.is/c++draft/dcl.init.list#3.2</a></p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/list_initialization#Explanation\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/list_initialization#Explanation</a></p>\n", "OwnerUserId": "3903983"}});