post_cb({"bq_ids": {"n4140": {"so_39076641_39076977_0": {"length": 31, "quality": 0.8157894736842105, "section_id": 1922}}, "n3337": {"so_39076641_39076977_0": {"length": 31, "quality": 0.8157894736842105, "section_id": 1911}}, "n4659": {"so_39076641_39076977_0": {"length": 31, "quality": 0.8157894736842105, "section_id": 2193}}}, "39076641": {"ViewCount": "313", "Body": "<p>I'm trying out a simple program to test multi-threading.  I just print a series of \"x\" and \"O\" in alternate threads. Now, if I use cout , no output is seen on screen.  If I use fputc and output to stderr , it works fine.  Why is cout (output to stdout) not working here ?</p>\n<p>My code is given below :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n\nusing namespace std;\n\nstatic int count;\n\nvoid* print_xs(void *unused)\n{\n    while(1)\n    {\n        if (count &gt;=100) break;\n        if (count%2==0)\n        {\n            count++;\n            cout&lt;&lt;\"X=\";  // no output here\n            fputc('X',stderr); // works !\n        }\n        else\n        {\n            sleep(1);\n        }\n    }\n    return NULL;\n\n}\n\n\nint main()\n{\n    pthread_t tid;\n    pthread_create(&amp;tid,NULL,&amp;print_xs, NULL);\n\n    while(1)\n    {\n        if (count &gt;=100) break;\n        if (count%2!=0)\n        {\n            count++;\n            cout&lt;&lt;\"O=\"; // no output here \n            fputc('O',stderr); // works !\n        }\n        else\n        {\n            sleep(1);\n        }\n    }\n\n    pthread_join(tid,NULL);\n    return (0);\n\n}\n</code></pre>\n", "AcceptedAnswerId": "39076977", "Title": "Why cout doesn't work with pthreads?", "CreationDate": "2016-08-22T10:04:33.543", "Id": "39076641", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2016-08-22T10:29:34.297", "Score": "3", "OwnerUserId": "2882621", "Tags": "<c++><linux><pthreads>", "AnswerCount": "1"}, "39076977": {"Id": "39076977", "PostTypeId": "2", "Body": "<p>Since <code>std::cout</code> is a <em>buffered-stream</em>, you need to <a href=\"http://www.cplusplus.com/reference/ostream/ostream/flush/\" rel=\"nofollow\">flush</a> it in order to send the buffer to the standard output.</p>\n<p>Just try something like:</p>\n<pre><code>cout&lt;&lt; \"O=\";\ncout.flush();\n</code></pre>\n<p>That should work.</p>\n<h1>Additional notes</h1>\n<ol>\n<li>As some comments have already suggest you, <code>std::cout</code> is not <em>thread-safe</em> <em>in C++03 and before</em>. It could be useful to protect that object with a <a href=\"http://en.cppreference.com/w/cpp/thread/mutex\" rel=\"nofollow\">mutex</a>.\nThis could be not a problem since <em>C++11</em> standard.</li>\n</ol>\n<p>The FDIS says the following in \u00a727.4.1 [iostream.objects.overview]:</p>\n<blockquote>\n<p id=\"so_39076641_39076977_0\">Concurrent access to a synchronized (\u00a727.5.3.4) standard iostream object\u2019s formatted and unformatted input (\u00a727.7.2.1) and output (\u00a727.7.3.1) functions or a standard C stream by multiple threads shall not result in a data race (\u00a71.10). [ Note: Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. \u2014 end note ]</p>\n</blockquote>\n<p>That means without <em>mutex</em> it's guaranteed the object will not corrupted in a data-race context. But the problem on overlapped output remains. So if you be sure each line is printed without overlap by another thread, you still need a mutex.</p>\n<ol start=\"2\">\n<li><em>C++11</em> has introduces a multi-thread library (often is a wrapper for <em>pthread</em>). <a href=\"http://www.cplusplus.com/reference/multithreading/\" rel=\"nofollow\">Here some reference</a>. Just take a look at, you could find it useful.</li>\n</ol>\n", "LastEditorUserId": "415784", "LastActivityDate": "2016-08-22T10:29:34.297", "Score": "0", "CreationDate": "2016-08-22T10:19:28.400", "ParentId": "39076641", "CommentCount": "5", "OwnerUserId": "6040181", "LastEditDate": "2016-08-22T10:29:34.297"}});