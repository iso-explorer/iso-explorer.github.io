post_cb({"7809637": {"ParentId": "7809468", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_7809468_7809637_0\"><code>[n3290: 7.3.1.2/3]:</code> Every name first declared in a namespace is a\n  member of that namespace. If a <code>friend</code> declaration in a non-local class\n  first declares a class or function the friend class or function is a\n  member of the innermost enclosing namespace. The name of the friend is\n  not found by unqualified lookup (3.4.1) or by qualified lookup (3.4.3)\n  95) this implies that the name of the class or function is\n  unqualified. until a matching declaration is provided in that\n  namespace scope (either before or after the class definition granting\n  friendship). If a friend function is called, its name may be found by\n  the name lookup that considers functions from namespaces and classes\n  associated with the types of the function arguments (3.4.2). <strong>If the\n  name in a <code>friend</code> declaration is neither qualified nor a <em>template-id</em>\n  and the declaration is a function or an <em>elaborated-type-specifier</em>, the\n  lookup to determine whether the entity has been previously declared\n  shall not consider any scopes outside the innermost enclosing\n  namespace.</strong> [..]</p>\n</blockquote>\n<p>The innermost enclosing namespace is the anonymous one, and you didn't qualify the function name, so <a href=\"http://codepad.org/9qVdlrhC\">the name is not found</a>.</p>\n<p>The namespace <a href=\"http://codepad.org/hcZwQ2Im\">need not be anonymous</a>, either.</p>\n<p>Note that the <code>extern \"C\"</code> in the question is a red herring, as <a href=\"http://codepad.org/3GmDl2aq\">the following also fails for the same reason</a>:</p>\n<pre><code>void foo();\n\nnamespace {\nstruct T {\n   friend void foo();\n\n   private: void bar() { cout &lt;&lt; \"!\"; }\n} t;\n}\n\nvoid foo() { t.bar(); }\n\nint main() {\n   foo();\n}\n\n/*\nIn function 'void foo()':\nLine 7: error: 'void&lt;unnamed&gt;::T::bar()' is private\ncompilation terminated due to -Wfatal-errors.\n*/\n</code></pre>\n<p><a href=\"http://codepad.org/b42SzZkx\"> [alternative testcase, adapted from your original code]</a></p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2011-10-18T15:24:06.560", "Id": "7809637", "Score": "10", "CreationDate": "2011-10-18T15:18:24.573", "LastActivityDate": "2011-10-18T15:24:06.560"}, "7809468": {"CommentCount": "10", "AcceptedAnswerId": "7809637", "PostTypeId": "1", "LastEditorUserId": "168175", "CreationDate": "2011-10-18T15:06:16.367", "LastActivityDate": "2011-10-18T15:24:06.560", "LastEditDate": "2011-10-18T15:17:53.860", "ViewCount": "4398", "FavoriteCount": "1", "Title": "friendship with extern \"C\" function seems to require :: to qualify name", "Id": "7809468", "Score": "10", "Body": "<p>Trying to make a <code>class</code> friends with an <code>extern \"C\"</code> function, this code works:</p>\n<pre><code>#include &lt;iostream&gt;\n\nextern \"C\" {\n  void foo();\n}\n\nnamespace {\n  struct bar {\n    // without :: this refuses to compile\n    friend void ::foo();\n    bar() : v(666) {}\n  private:\n    int v;\n  } inst;\n}\n\nint main() {\n  foo();\n}\n\nextern \"C\" {\n  void foo() {\n    std::cout &lt;&lt; inst.v &lt;&lt; std::endl;\n  }\n}\n</code></pre>\n<p>But I was very surprised to find that with g++ 4.6.1 and 4.4.4 I have to explicitly write <code>::</code> in <code>friend void ::foo();</code> otherwise the friendship doesn't work. This <code>::</code> is only needed when it's <code>extern \"C\"</code> though.</p>\n<ol>\n<li>Is this a compiler bug/problem? I wasn't expecting that behaviour.</li>\n<li>If it isn't a bug why is this required, but only when it's <code>extern \"C\"</code> and not without it? What about the name lookup rules changes that makes this necessary? </li>\n</ol>\n<p>I'm stumped. There is probably some rule for this that I can't find.</p>\n", "Tags": "<c++><friend><extern>", "OwnerUserId": "168175", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_7809468_7809637_0": {"section_id": 5485, "quality": 0.8478260869565217, "length": 78}}, "n3337": {"so_7809468_7809637_0": {"section_id": 5271, "quality": 0.8804347826086957, "length": 81}}, "n4659": {"so_7809468_7809637_0": {"section_id": 6920, "quality": 0.7717391304347826, "length": 71}}}});