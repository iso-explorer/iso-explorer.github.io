post_cb({"40440109": {"CommentCount": "0", "ViewCount": "43", "CreationDate": "2016-11-05T15:44:22.237", "LastActivityDate": "2016-11-05T16:23:19.170", "Title": "\"typename qualified-id\" referring to a type in a non-type parameter-declaration", "AcceptedAnswerId": "40440180", "PostTypeId": "1", "Id": "40440109", "Score": "1", "Body": "<blockquote>\n<h2>14.1 [temp.param], paragraph 2</h2>\n<p id=\"so_40440109_40440109_0\">... <code>typename</code> followed by an <em>unqualified-id</em> names a template type parameter. <strong><code>typename</code> followed by a <em>qualified-id</em> denotes the type in a non-type parameter-declaration</strong>...</p>\n</blockquote>\n<p>I'm a bit confused about the meaning of the bold text. Specifically, <code>typename</code> can occur in two different contexts (<em>type-specifier</em> or <em>template-parameter</em>), but which one does this refer to?</p>\n<ul>\n<li><p>For the former case, I considered:</p>\n<pre><code>struct A {\n    struct X { };\n    int X;\n};\nstruct B {\n    struct X { };\n};\ntemplate&lt;class T&gt; void f(T t) {\n    typename T::X x;    // T can be A or B\n}\n</code></pre>\n<p>However, neither <code>A::X</code> nor <code>B::X</code> is a non-type <em>parameter-declaration</em> (they are <em>member-declaration</em>s).</p></li>\n<li><p>For the latter case, I'm not sure why that's necessary. Why not directly write down its type with <em>qualified-id</em>? Is parameterization necessary?</p></li>\n</ul>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5645940", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40440109_40440109_0": {"section_id": 55, "quality": 1.0, "length": 14}}, "n3337": {"so_40440109_40440109_0": {"section_id": 50, "quality": 1.0, "length": 14}}, "n4659": {"so_40440109_40440109_0": {"section_id": 57, "quality": 1.0, "length": 14}}}, "40440180": {"ParentId": "40440109", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This is about</p>\n<pre><code>struct S { typedef int X; };\ntemplate &lt;typename T, typename T::X&gt; void f() { }\nint main() { f&lt;S, 1&gt;(); }\n</code></pre>\n<p>Here, <code>typename T</code> means <code>T</code> is a named template type parameter, but <code>typename T::X</code> is the type of an unnamed non-type template parameter.</p>\n<p><em>type-parameter</em> is the syntax used for template type parameters, <em>parameter-declaration</em> is the syntax used for template non-type parameters.</p>\n<p><code>typename T</code> cannot be parsed as a <em>typename-specifier</em> in a <em>parameter-declaration</em>, as it lacks the <em>nested-name-specifier</em>, so it must be a <em>type-parameter</em>.</p>\n<p><code>typename T::X</code> cannot be parsed as a <em>type-parameter</em>, as it only allows a single identifier after the <code>typename</code> keyword, so it must be a <em>parameter-declaration</em>.</p>\n<p>I think there's no ambiguity, but the text clarifies how differently these two <em>template-parameter</em>s are parsed.</p>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2016-11-05T16:23:19.170", "Id": "40440180", "Score": "3", "CreationDate": "2016-11-05T15:50:05.480", "LastActivityDate": "2016-11-05T16:23:19.170"}});