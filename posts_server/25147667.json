post_cb({"43865755": {"Id": "43865755", "PostTypeId": "2", "Body": "<p>I ran into the same thing using google's unit test.\nI had a mocked function with a default return value set with</p>\n<pre><code>ON_CALL(...).WillByDefault(Return(...));\n</code></pre>\n<p>Then at an expectation I used SetArgReferee like</p>\n<pre><code>EXPECT_CALL(...).WillOnce(SetArgReferee&lt;...&gt;(...))\n</code></pre>\n<p>clang inserted an ud2 at the and of the SetArgReferee function at SOME of the identical expectations, but not at all of them. Correcting it to</p>\n<pre><code>EXPECT_CALL(...).WillOnce(\n    DoAll(\n        SetArgReferee&lt;...&gt;(...),\n        Return(...)));\n</code></pre>\n<p>fixed it.</p>\n", "LastActivityDate": "2017-05-09T09:13:02.943", "CommentCount": "0", "CreationDate": "2017-05-09T09:13:02.943", "ParentId": "25147667", "Score": "1", "OwnerUserId": "4723722"}, "bq_ids": {"n4140": {"so_25147667_25147859_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_25147667_25147859_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_25147667_25147859_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "25147859": {"Id": "25147859", "PostTypeId": "2", "Body": "<p>The \"Illegal instruction\" error is likely because your \"operator &lt;&lt;\" is missing a return statement. This leads to undefined behaviour.</p>\n<p>Section 6.6.3 of the Standard says:</p>\n<blockquote>\n<p id=\"so_25147667_25147859_0\">Flowing off the end of a function is equivalent to a return with\n  no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>You should add:</p>\n<pre><code>return o;\n</code></pre>\n<p>at the end of the function.</p>\n", "LastActivityDate": "2014-08-05T20:37:02.660", "CommentCount": "5", "CreationDate": "2014-08-05T20:37:02.660", "ParentId": "25147667", "Score": "18", "OwnerUserId": "3911959"}, "25147667": {"ViewCount": "2082", "Body": "<p>I found a situation in which Clang produces an illegal instruction, where gcc doesn't,\nwhile experimenting with <a href=\"https://stackoverflow.com/questions/25146997/teach-google-test-how-to-print-eigen-matrix\">this</a> question.</p>\n<p><strong>My question is:</strong> Am I doing something very wrong, or is this an actual issue with Clang?</p>\n<p>I boiled it down to the minimal snippet necessary to reproduce the problem.</p>\n<p>Take the file <code>eigen.cpp</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\n#define EIGEN_MATRIXBASE_PLUGIN \"eigen_matrix_addons.hpp\"\n#include &lt;Eigen/Dense&gt;\n\nint main() {\n    Eigen::Matrix2d A;\n\n    A &lt;&lt; 0, 1, 2, 3;\n\n    std::cout &lt;&lt; A &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>And the file <code>eigen_matrix_addons.hpp</code>:</p>\n<pre><code>friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;o, const Derived &amp;m) {\n    o &lt;&lt; static_cast&lt;const MatrixBase&lt;Derived&gt; &amp;&gt;(m);\n}\n</code></pre>\n<p>(See <a href=\"http://eigen.tuxfamily.org/dox/TopicCustomizingEigen.html\" rel=\"nofollow noreferrer\">here</a> for a detailed explanation on what this file does. In short, its contents are placed directly into the class definition of <code>template&lt;class Derived&gt; class MatrixBase;</code>. So, this introduces another ostream operator on <code>Derived</code> that calls the Eigen implementation of the ostream operator on <code>MatrixBase&lt;Derived&gt;</code>. The motivation for this becomes apparent if you read <a href=\"https://stackoverflow.com/questions/25146997/teach-google-test-how-to-print-eigen-matrix\">this question</a>.)</p>\n<p>Compile with GCC and run:</p>\n<pre><code>$ g++ -std=c++11 -Wall -Wextra -pedantic -isystem/usr/include/eigen3 -I. -o eigen_gcc eigen.cpp\n$ ./eigen_gcc\n0 1\n2 3\n$ g++ --version\ng++ (SUSE Linux) 4.8.1 20130909 [gcc-4_8-branch revision 202388]\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>\n<p>And then compile with Clang and run:</p>\n<pre><code>$ clang++ -std=c++11 -Wall -Wextra -pedantic -isystem/usr/include/eigen3 -I. -o eigen_clang eigen.cpp\n$ ./eigen_clang\n0 1\nIllegal instruction\n$ clang++ --version\nclang version 3.4 (branches/release_34 198681)\nTarget: x86_64-suse-linux\nThread model: posix\n</code></pre>\n<p>As you can see, the program is interrupted after executing an illegal instruction. A back-trace in gdb reveals that the issue happens in line two of <code>eigen_matrix_addons.hpp</code>:</p>\n<pre><code>(gdb) bt\n#0  0x00000000004013e1 in Eigen::operator&lt;&lt; (o=..., m=...)\n    at ./eigen_matrix_addons.hpp:2\n#1  0x00000000004010f0 in main () at eigen.cpp:15\n</code></pre>\n<p>I.e. probably the <code>static_cast</code>?</p>\n<p>My Eigen version is 3.2.0-2.1.4 according to <code>zypper</code>.</p>\n<h1>Edit</h1>\n<p>The dis-assembly that @Mysticial asked for:</p>\n<pre><code>(gdb) disass\nDump of assembler code for function Eigen::operator&lt;&lt;(std::ostream&amp;, Eigen::Matrix&lt;double, 2, 2, 0, 2, 2&gt; const&amp;):\n   0x00000000004013c0 &lt;+0&gt;:     push   %rbp\n   0x00000000004013c1 &lt;+1&gt;:     mov    %rsp,%rbp\n   0x00000000004013c4 &lt;+4&gt;:     sub    $0x20,%rsp\n   0x00000000004013c8 &lt;+8&gt;:     mov    %rdi,-0x10(%rbp)\n   0x00000000004013cc &lt;+12&gt;:    mov    %rsi,-0x18(%rbp)\n   0x00000000004013d0 &lt;+16&gt;:    mov    -0x10(%rbp),%rdi\n   0x00000000004013d4 &lt;+20&gt;:    mov    -0x18(%rbp),%rsi\n   0x00000000004013d8 &lt;+24&gt;:    callq  0x4013f0 &lt;Eigen::operator&lt;&lt; &lt;Eigen::Matrix&lt;double, 2, 2, 0, 2, 2&gt; &gt;(std::ostream&amp;, Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 2, 2, 0, 2, 2&gt; &gt; const&amp;)&gt;\n   0x00000000004013dd &lt;+29&gt;:    mov    %rax,-0x20(%rbp)\n=&gt; 0x00000000004013e1 &lt;+33&gt;:    ud2\nEnd of assembler dump.\n</code></pre>\n", "AcceptedAnswerId": "25147859", "Title": "Clang produces illegal instruction where GCC doesn't", "CreationDate": "2014-08-05T20:23:28.560", "Id": "25147667", "CommentCount": "6", "LastEditDate": "2017-05-23T12:02:41.063", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-05-09T09:13:02.943", "Score": "11", "OwnerUserId": "841562", "Tags": "<c++><clang>", "AnswerCount": "2"}});