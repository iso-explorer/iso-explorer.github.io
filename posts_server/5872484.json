post_cb({"5872484": {"CommentCount": "2", "ViewCount": "789", "CreationDate": "2011-05-03T16:15:37.867", "LastActivityDate": "2011-05-03T16:42:17.850", "Title": "How bad is this goto?", "AcceptedAnswerId": "5872710", "PostTypeId": "1", "Id": "5872484", "Score": "8", "Body": "<p>I created a tetris game where you can restart after a game over. I implemented this quick and dirty with a goto (see code). The <code>Game</code> class relies on destructors, are these called with these goto's? How bad is this goto, is it acceptable, or what should I do instead?</p>\n<pre><code>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n    // initiate sdl\n    sdl_init();\n\n    // seed rng\n    srand(time(NULL));\n\n    newgame: // new game label\n    Game game(GAME_WIDTH, GAME_HEIGHT, 1, screen);\n\n    // keydowns\n    bool fastfall = false;\n    bool gamerunning = true;\n    Uint32 lastupdate = 0;\n\n    while (gamerunning &amp;&amp; game.isalive()) {\n        // game running stuff here\n    }\n\n    // game over stuff here\n\n    while (gamerunning) {\n        if (SDL_PollEvent(&amp;event)) {\n            if (event.type == SDL_QUIT) {\n                gamerunning = false;\n            } else if (event.type == SDL_KEYDOWN) {\n                if (event.key.keysym.sym == SDLK_r) goto newgame; // yay a new game!\n            }\n        }\n    }\n\n    TTF_Quit();\n    SDL_Quit();\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><restart><goto>", "OwnerUserId": "565635", "AnswerCount": "7"}, "5872533": {"ParentId": "5872484", "CommentCount": "0", "Body": "<p>Gotos are rarely good to use. The exception seems to be for cleanup, where you need to quickly break out of many nested loops, free up some memory and exit. This here can easily be replaced with a while loop. If left as is it will only make debugging and maintenance harder.</p>\n", "OwnerUserId": "576139", "PostTypeId": "2", "Id": "5872533", "Score": "2", "CreationDate": "2011-05-03T16:20:22.757", "LastActivityDate": "2011-05-03T16:20:22.757"}, "5872617": {"ParentId": "5872484", "CommentCount": "0", "Body": "<p>Instead of a goto you can put everything from your <em>newgame</em> tag to the end of the while loop in a function. This function's return value would tell you if you have to run again. So it would be something like:</p>\n<pre><code>...\nsrand(time(NULL));\n\nwhile (runGame())\n{\n}\n\nTTF_Quit();\n...\n</code></pre>\n<p>You would have to pass <em>runGame()</em> any parameters from your main function that you use in your game code and return a 1 where the code uses the <em>goto</em> and a zero when it is the last game.</p>\n", "OwnerUserId": "87737", "PostTypeId": "2", "Id": "5872617", "Score": "6", "CreationDate": "2011-05-03T16:26:57.423", "LastActivityDate": "2011-05-03T16:26:57.423"}, "5872710": {"ParentId": "5872484", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>To answer the question about destructors no one else seems to have covered. According to 6.6/2 the destructors <em>will</em> be called for you. Quote:</p>\n<blockquote>\n<p id=\"so_5872484_5872710_0\">On exit from a scope (however\n  accomplished), destructors (12.4) are\n  called for all constructed objects\n  with automatic storage duration\n  (3.7.2) (named objects or temporaries)\n  that are declared in that scope, in\n  the reverse order of their\n  declaration. Transfer out of a loop,\n  out of a block, or back past an\n  initialized variable with automatic\n  storage duration involves the\n  destruction of variables with\n  automatic storage duration that are in\n  scope at the point transferred from\n  but not at the point transferred to.</p>\n</blockquote>\n<p>However I still don't suggest <code>goto</code> in this case at all. It doesn't clearly (to me anyway) indicate what's happening. You should just use a while loop and have it operate on the conditions instead.</p>\n<p>Even something as simple as this should be more clear (although there's probably a way to rewrite it without the inner break). It's perfectly obvious that the locals are cleaned up used inside a while loop like this:</p>\n<pre><code>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n    // initiate sdl\n    sdl_init();\n\n    // seed rng\n    srand(time(NULL));\n\n    bool gamerunning = true;\n    while(gamerunning)\n    {\n        Game game(GAME_WIDTH, GAME_HEIGHT, 1, screen);\n\n        // keydowns\n        bool fastfall = false;\n        Uint32 lastupdate = 0;\n\n        while (gamerunning &amp;&amp; game.isalive()) {\n            // game running stuff here\n        }\n\n        // game over stuff here\n\n        while (gamerunning) {\n            if (SDL_PollEvent(&amp;event)) {\n                if (event.type == SDL_QUIT) {\n                    gamerunning = false;\n                } else if (event.type == SDL_KEYDOWN) {\n                    if (event.key.keysym.sym == SDLK_r) break; // yay a new game - get out of the \"what to do next\" loop.\n                }\n            }\n        }\n    }\n\n    TTF_Quit();\n    SDL_Quit();\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "251738", "LastEditorUserId": "251738", "LastEditDate": "2011-05-03T16:42:17.850", "Id": "5872710", "Score": "13", "CreationDate": "2011-05-03T16:34:24.203", "LastActivityDate": "2011-05-03T16:42:17.850"}, "5872510": {"ParentId": "5872484", "CommentCount": "6", "Body": "<p>You could easily avoid this by putting the majority of this function in a <code>while</code> loop, and setting a flag to break out of it.</p>\n<p>In C, the only real \"acceptable\" use of <code>goto</code> was for jumping to common clean-up code in the case of errors.  In C++, you can avoid even this with exceptions.  So really, there's no excuse!</p>\n", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "5872510", "Score": "16", "CreationDate": "2011-05-03T16:17:48.097", "LastActivityDate": "2011-05-03T16:17:48.097"}, "5872703": {"ParentId": "5872484", "CommentCount": "0", "Body": "<p>There are some good times to use <code>goto</code> (eg: Implementing a state machine), but I'm not sure this is really one of them.</p>\n<p>If it were me, I'd put the \"game\" code in a subroutine, exit out of it when done, and then let the higher-level routine chose to start a new game or something.</p>\n", "OwnerUserId": "29639", "PostTypeId": "2", "Id": "5872703", "Score": "0", "CreationDate": "2011-05-03T16:33:33.867", "LastActivityDate": "2011-05-03T16:33:33.867"}, "5872551": {"ParentId": "5872484", "CommentCount": "0", "Body": "<p>Break the significant blocks up into functions and then rather than calling <code>goto</code>, just call a function instead.</p>\n", "OwnerUserId": "986", "PostTypeId": "2", "Id": "5872551", "Score": "5", "CreationDate": "2011-05-03T16:21:45.113", "LastActivityDate": "2011-05-03T16:21:45.113"}, "bq_ids": {"n4140": {"so_5872484_5872710_0": {"section_id": 3909, "quality": 0.7446808510638298, "length": 35}}, "n3337": {"so_5872484_5872710_0": {"section_id": 3769, "quality": 0.7446808510638298, "length": 35}}, "n4659": {"so_5872484_5872710_0": {"section_id": 4795, "quality": 0.7446808510638298, "length": 35}}}, "5872545": {"ParentId": "5872484", "CommentCount": "1", "Body": "<pre><code>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n    // initiate sdl\n    sdl_init();\n\n    // seed rng\n    srand(time(NULL));\n\n\n    while (1) { \n    Game game(GAME_WIDTH, GAME_HEIGHT, 1, screen);\n\n    // keydowns\n    bool fastfall = false;\n    bool gamerunning = true;\n    Uint32 lastupdate = 0;\n\n    while (gamerunning &amp;&amp; game.isalive()) {\n        // game running stuff here\n    }\n\n    // game over stuff here\n    restart_game = false; \n    while (gamerunning) {\n        if (SDL_PollEvent(&amp;event)) {\n            if (event.type == SDL_QUIT) {\n                gamerunning = false;\n            } else if (event.type == SDL_KEYDOWN) {\n                if (event.key.keysym.sym == SDLK_r) { \n                      restart_game = true; break; \n                } \n            }\n        }\n    }\n    if (!restart_game) break; \n    }\n\n    TTF_Quit();\n    SDL_Quit();\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "319741", "PostTypeId": "2", "Id": "5872545", "Score": "-1", "CreationDate": "2011-05-03T16:21:21.397", "LastActivityDate": "2011-05-03T16:21:21.397"}});