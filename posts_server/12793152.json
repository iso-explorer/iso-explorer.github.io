post_cb({"12793210": {"ParentId": "12793152", "CommentCount": "0", "Body": "<p>Because of below points, which all C++ compilers follow as rule:</p>\n<ol>\n<li>Constructor initializer list can only exist with a class constructor</li>\n<li>In initializer list only the same class member and the base class\nconstructor can be called</li>\n<li>Initialization happens in the same order as the class data member\nare declared</li>\n</ol>\n<p>When compiler looks at <code>i</code> and <code>f</code> as part of initializer list, it immediately identifies as the class member and the things goes fine (point no. 2).<br>\nIf you try anything else other than <code>i</code> and <code>f</code>, compiler will give error.</br></p>\n<p>In 2nd case where you do assignment, compiler has 2 candidates for <code>i</code> and <code>f</code>. Either it can be a class member or a local variable. Since local variables are in inner most scope, compiler consider <code>i</code> as <code>i</code> and not <code>this-&gt;i</code>.</p>\n", "OwnerUserId": "514235", "PostTypeId": "2", "Id": "12793210", "Score": "1", "CreationDate": "2012-10-09T05:15:33.083", "LastActivityDate": "2012-10-09T05:15:33.083"}, "12793209": {"ParentId": "12793152", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The compiler is designed to work with the left-hand <code>i</code> and <code>f</code> as members of the class scope and the right-hand <code>i</code> and <code>f</code> as members of the constructor scope.</p>\n", "OwnerUserId": "1348324", "LastEditorUserId": "1348324", "LastEditDate": "2012-10-09T06:07:01.237", "Id": "12793209", "Score": "0", "CreationDate": "2012-10-09T05:15:31.827", "LastActivityDate": "2012-10-09T06:07:01.237"}, "12793512": {"ParentId": "12793152", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Similar questions have been asked before, e.g. <a href=\"https://stackoverflow.com/questions/2227244/what-if-a-constructor-parameter-has-the-same-name-as-a-member-variable-in-c\">here</a> and <a href=\"https://stackoverflow.com/questions/2476381/c-constructor-initialization-list-strangeness\">here</a>, but while many answers point out that this is (contrary to what Konstantin D - Infragistics says) not compiler-specific, I couldn't find any answer that actually quotes the relevant parts of the Standard.</p>\n<p>So here they are. I've added emphasis to highlight the key statements.</p>\n<blockquote>\n<p id=\"so_12793152_12793512_0\">(\u00a712.6.2/10) <strong>In a non-delegating constructor, initialization proceeds in the following order:</strong> </p>\n<p id=\"so_12793152_12793512_1\">\u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.<br>\n  \u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).<br>\n  \u2014 Then, <strong>non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</strong><br>\n  \u2014 Finally, the compound-statement of the constructor body is executed.</br></br></br></p>\n<p id=\"so_12793152_12793512_2\">(\u00a712.6.2/12) Names in the expression-list or braced-init-list of a mem-initializer are <strong>evaluated in the scope of the constructor</strong> for which the mem-initializer is specified. [ Example:</p>\n<pre><code>    class X {\n      int a;\n      int b;\n      int i;\n      int j;\n    public:\n      const int&amp; r;\n      X(int i): r(a), b(i), i(i), j(this-&gt;i) { }\n    };\n</code></pre>\n<p id=\"so_12793152_12793512_3\">initializes <code>X::r</code> to refer to <code>X::a</code>, initializes <code>X::b</code> with the value of the constructor parameter <code>i</code>, <strong>initializes <code>X::i</code> with the value of the constructor parameter <code>i</code></strong>, and initializes <code>X::j</code> with the value of <code>X::i</code>; this takes place each time an object of class X is created. \u2014 end example ]<br>\n  [ Note: Because the mem-initializer are evaluated in the scope of the constructor, the <code>this</code> pointer can be used in the expression-list of a mem-initializer to refer to the object being initialized. \u2014 end note ]</br></p>\n</blockquote>\n", "OwnerUserId": "777186", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:56:17.980", "Id": "12793512", "Score": "2", "CreationDate": "2012-10-09T05:44:58.560", "LastActivityDate": "2012-10-09T05:44:58.560"}, "12793152": {"CommentCount": "0", "ViewCount": "1260", "CreationDate": "2012-10-09T05:08:16.547", "LastActivityDate": "2012-10-09T06:07:01.237", "Title": "Initialization lists,local variables vs data members", "AcceptedAnswerId": "12793512", "PostTypeId": "1", "Id": "12793152", "Score": "0", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Ex {\nprivate:\n    int i;\n    float f;\npublic:\n    Ex(int i,float f):i(i),f(f) {\n        cout &lt;&lt; this-&gt;i &lt;&lt; '\\t' &lt;&lt; this-&gt;f &lt;&lt; endl;\n    }\n    ~Ex(){\n        cout &lt;&lt; \"destructor\";\n    }\n};\nint main() {\n    Ex i(10,20.1f);\n}\n</code></pre>\n<p>In the program above I wrote above,if the constructor was parameterized constructor like the following:</p>\n<pre><code>Ex(int i,float f){\n        i=i;\n        f=f;\n        cout &lt;&lt; this-&gt;i &lt;&lt; '\\t' &lt;&lt; this-&gt;f &lt;&lt; endl;\n    }\n</code></pre>\n<p>here the data members of the object are initialized to junk because data members are hidden due to local variables of same name.\nBut in the program above it works fine without explicit this.How?</p>\n", "Tags": "<c++><oop><constructor><initialization>", "OwnerUserId": "1696337", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_12793152_12793512_1": {"section_id": 438, "quality": 1.0, "length": 62}, "so_12793152_12793512_3": {"section_id": 440, "quality": 0.8648648648648649, "length": 32}, "so_12793152_12793512_2": {"section_id": 440, "quality": 0.8181818181818182, "length": 9}, "so_12793152_12793512_0": {"section_id": 438, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_12793152_12793512_1": {"section_id": 429, "quality": 1.0, "length": 62}, "so_12793152_12793512_3": {"section_id": 431, "quality": 0.8648648648648649, "length": 32}, "so_12793152_12793512_2": {"section_id": 431, "quality": 0.8181818181818182, "length": 9}, "so_12793152_12793512_0": {"section_id": 429, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_12793152_12793512_3": {"section_id": 460, "quality": 0.8648648648648649, "length": 32}, "so_12793152_12793512_1": {"section_id": 458, "quality": 1.0, "length": 62}, "so_12793152_12793512_2": {"section_id": 460, "quality": 0.8181818181818182, "length": 9}, "so_12793152_12793512_0": {"section_id": 458, "quality": 0.8571428571428571, "length": 6}}}});