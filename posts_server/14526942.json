post_cb({"14526942": {"CommentCount": "4", "CreationDate": "2013-01-25T17:15:00.270", "PostTypeId": "1", "AcceptedAnswerId": "14587960", "LastEditorUserId": "1119545", "LastActivityDate": "2013-01-29T17:10:40.790", "LastEditDate": "2013-01-25T17:35:32.960", "ViewCount": "925", "FavoriteCount": "6", "Title": "What does \"break when an exception is void\" mean?", "Id": "14526942", "Score": "19", "Body": "<p>I have found the automatic break-on-exception feature of Visual C++ 2010 to be very helpful in the past and today I was looking through the options in this dialog and discovered that one of the exception types is \"void\". What does this mean? If I select this, will I break on any exception that is thrown in the code? If not, what kind of a throw statement would trigger a breakpoint of this type?</p>\n<p><img alt=\"Visual Studio Exceptions Dialog\" src=\"https://i.stack.imgur.com/tuhCk.png\"/></p>\n<p>I suppose a more general follow-up question is where can I find documentation on this dialog and all its options?</p>\n", "Tags": "<c++><visual-studio-2010><visual-c++><exception>", "OwnerUserId": "83369", "AnswerCount": "3"}, "14578710": {"ParentId": "14526942", "CommentCount": "0", "Body": "<p>I've found that it will break when throwing a <code>void*</code>, <code>int*</code> or <code>char const*</code>, but not <code>int</code>.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "14578710", "Score": "4", "CreationDate": "2013-01-29T08:41:30.610", "LastActivityDate": "2013-01-29T08:41:30.610"}, "14587960": {"ParentId": "14526942", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Regarding on how does it work (as MSalters mentioned) this is just about incorrect naming.</p>\n<p>Actually it shall be named <strong><code>void*</code></strong>, of course.</p>\n<p>But why does it work for <code>int*</code>, <code>const char*</code> etc (actually <strong>any pointer type</strong>, including pointer to user defined types)?</p>\n<p>Well, I can suppose this is related to very interesting C++ exception handling issue - <code>catch(void*)</code> exception handler <strong>actually catches any (cv-compatible) pointer type exceptions</strong>!</p>\n<p>Example:</p>\n<pre><code>try\n{\n   throw \"Catch me if you can!\";      \n}\ncatch(void* e)\n{\n   // ...and I can!\n   std::cout &lt;&lt; \"Gotcha!\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Here we throw <code>char*</code> (in Visual C++ char literals are <code>char*</code>, not <code>const char*</code>) and catch it by <code>void*</code>. And it will work!</p>\n<p>The answer can be found in C++ Holy Standard:</p>\n<blockquote>\n<p id=\"so_14526942_14587960_0\"><strong>\u00a715.3 Handling an exception</strong></p>\n<p id=\"so_14526942_14587960_1\">15.3.3 A handler is a match for an exception object of type E if</p>\n<p id=\"so_14526942_14587960_2\">...</p>\n<p id=\"so_14526942_14587960_3\">the handler is of type cv1 T* cv2 and E is a pointer type that can be converted to the type of the handler by either or both of\n  \u2014 a standard pointer conversion (4.10) not involving conversions to pointers to private or protected or ambiguous classes</p>\n<p id=\"so_14526942_14587960_4\">...</p>\n</blockquote>\n<p>And 4.10 says that standard pointer conversion includes conversion to <code>void*</code>:</p>\n<blockquote>\n<p id=\"so_14526942_14587960_5\">4.10.2 A prvalue of type \u201cpointer to cv T,\u201d where T is an object type, can be converted to a prvalue of type \u201cpointer\n  to cv void\u201d.</p>\n</blockquote>\n<p>Note also that Visual Studio debugger works similar way, but <em>not exactly</em> this way. The difference is that it ignores cv-qualifiers. So <code>void</code> in Exceptions dialog actually means any <code>[any cv] void*</code>. Catch handlers will <strong>not ignore</strong> them:</p>\n<pre><code>try\n{\n   struct Throwee {};\n   const Throwee* t = nullptr;\n   throw t;      \n}\ncatch(void* e)\n{\n   // Will be missed\n   std::cout &lt;&lt; \"Gotcha!\" &lt;&lt; std::endl;\n}\ncatch(const void* e)\n{\n   // Will be catched\n   std::cout &lt;&lt; \"Gotcha const!\" &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "1599260", "LastEditorUserId": "1599260", "LastEditDate": "2013-01-29T17:10:40.790", "Id": "14587960", "Score": "12", "CreationDate": "2013-01-29T16:51:13.997", "LastActivityDate": "2013-01-29T17:10:40.790"}, "bq_ids": {"n4140": {"so_14526942_14587960_5": {"section_id": 40, "quality": 0.9230769230769231, "length": 12}, "so_14526942_14587960_1": {"section_id": 3348, "quality": 0.6666666666666666, "length": 4}, "so_14526942_14587960_3": {"section_id": 3348, "quality": 0.7272727272727273, "length": 16}}, "n3337": {"so_14526942_14587960_5": {"section_id": 37, "quality": 0.9230769230769231, "length": 12}, "so_14526942_14587960_1": {"section_id": 3218, "quality": 0.6666666666666666, "length": 4}, "so_14526942_14587960_3": {"section_id": 3218, "quality": 0.7727272727272727, "length": 17}}, "n4659": {"so_14526942_14587960_1": {"section_id": 4115, "quality": 0.8333333333333334, "length": 5}, "so_14526942_14587960_3": {"section_id": 4115, "quality": 0.6818181818181818, "length": 15}, "so_14526942_14587960_5": {"section_id": 40, "quality": 0.9230769230769231, "length": 12}}}, "14571864": {"ParentId": "14526942", "CommentCount": "2", "Body": "<p>It may be that's the setting for catch (...). Either that propagated <code>throw;</code> statements.</p>\n", "OwnerUserId": "1325084", "PostTypeId": "2", "Id": "14571864", "Score": "0", "CreationDate": "2013-01-28T21:48:49.600", "LastActivityDate": "2013-01-28T21:48:49.600"}});