post_cb({"45991743": {"ParentId": "45991094", "CommentCount": "0", "Body": "<p>Just to add to the other answers; in the grammar summary for declarators (C++14 [dcl.decl]/4) you can find:</p>\n<pre><code>ptr-declarator:\n    noptr-declarator\n\nnoptr-declarator:\n    ( ptr-declarator )\n</code></pre>\n<p>(I have omitted other details of the grammar).  You can see from this that any declarator may be parenthesized and it would still match the same grammar rule.</p>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "45991743", "Score": "1", "CreationDate": "2017-09-01T00:16:52.650", "LastActivityDate": "2017-09-01T00:16:52.650"}, "45991162": {"ParentId": "45991094", "CommentCount": "1", "Body": "<p>[dcl.meaning] in the Standard says:</p>\n<blockquote>\n<p id=\"so_45991094_45991162_0\">In a declaration <code>T D</code> where <code>D</code> has the form <code>( D1 )</code> the type of the contained <em>declarator-id</em> is the same as that of the contained <em>declarator-id</em> in the declaration <code>T D1</code>.</p>\n<p id=\"so_45991094_45991162_1\">Parentheses do not alter the type of the embedded <em>declarator-id</em>, but they can alter the binding of complex declarators.</p>\n</blockquote>\n<p>More simply, you can put parentheses around anything considered a \"declarator\" in the C++ grammar.  (Loosely speaking, a declarator is a part of a declaration without the initial specifiers and types which contains one name.)</p>\n<p>In your example, the identifier <code>s</code> is a declarator, so you're allowed to put parentheses around it and the meaning doesn't change.</p>\n<p>The reason for this, as the second quoted sentence hints, is that it can be necessary when things get more complicated.  One example:</p>\n<pre><code>int * a [10];     // a is an array of ten pointers to int.\nint ( * b ) [10]; // b is a pointer to an array of ten ints.\n</code></pre>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "45991162", "Score": "11", "CreationDate": "2017-08-31T22:55:01.323", "LastActivityDate": "2017-08-31T22:55:01.323"}, "bq_ids": {"n4140": {"so_45991094_45991162_1": {"section_id": 3213, "quality": 1.0, "length": 12}, "so_45991094_45991162_0": {"section_id": 3213, "quality": 1.0, "length": 10}}, "n3337": {"so_45991094_45991162_1": {"section_id": 3087, "quality": 1.0, "length": 12}, "so_45991094_45991162_0": {"section_id": 3087, "quality": 1.0, "length": 10}}, "n4659": {"so_45991094_45991162_1": {"section_id": 3970, "quality": 1.0, "length": 12}, "so_45991094_45991162_0": {"section_id": 3970, "quality": 1.0, "length": 10}}}, "45991094": {"CommentCount": "6", "ViewCount": "193", "CreationDate": "2017-08-31T22:45:59.853", "LastActivityDate": "2017-09-01T00:16:52.650", "Title": "Which part of the C++ standard allow to declare variable in parenthesis?", "AcceptedAnswerId": "45991162", "PostTypeId": "1", "Id": "45991094", "Score": "3", "Body": "<p>Consider the following code:</p>\n<pre><code>int main() {\n    int(s);\n}\n</code></pre>\n<p>I am surprised by the fact that it creates valid variable <code>s</code>. Can anyone explain what's happening here?</p>\n", "Tags": "<c++>", "OwnerUserId": "2697779", "AnswerCount": "2"}});