post_cb({"bq_ids": {"n4140": {"so_19941601_19941865_0": {"section_id": 735, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_19941601_19941865_0": {"section_id": 724, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_19941601_19941865_0": {"section_id": 764, "quality": 0.9230769230769231, "length": 24}}}, "19941865": {"ParentId": "19941601", "CommentCount": "6", "Body": "<p>No it doesn't missed. In a table in 101 \u00a723.2.3,  you can see <code>pop_back</code> exists for <code>vector</code>.</p>\n<blockquote>\n<p id=\"so_19941601_19941865_0\"><sup>16</sup> Table 101 lists operations that are provided for some types of sequence containers but not others. An implementation shall provide these operations for all container types shown in the \u201ccontainer\u201d column, and shall implement them so as <strong>to take amortized constant time</strong>.</p>\n</blockquote>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/zWfuA.png\"/></p>\n<p>\u00a0</p>\n<p>Paragraph 16 mentioned they should implement to take <strong>amortized constant time</strong>.</p>\n", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "19941865", "Score": "1", "CreationDate": "2013-11-12T23:09:12.550", "LastActivityDate": "2013-11-12T23:09:12.550"}, "19941601": {"CommentCount": "11", "ViewCount": "232", "CreationDate": "2013-11-12T22:50:44.540", "LastActivityDate": "2013-11-12T23:09:12.550", "Title": "Formal specification of std::vector<T>::pop_back", "FavoriteCount": "2", "PostTypeId": "1", "Id": "19941601", "Score": "7", "Body": "<p>I'm looking in the C++ Standard (draft n3797), and I can't find any documentation of <code>pop_back</code> as it applies to <code>std::vector</code>, only for <code>std::list</code>.  Is it really missing?</p>\n<p>Specifically I was looking for the guarantee that <code>pop_back</code> doesn't change the capacity.  Or is there such a guarantee at all?  (I expect that iterators and references to other elements will remain valid, but I can't find that guarantee, and it wouldn't restrict the case of removing the last element, anyway)</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "103167", "AnswerCount": "1"}});