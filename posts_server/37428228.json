post_cb({"bq_ids": {"n4140": {"so_37428228_37428357_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3255}}, "n3337": {"so_37428228_37428357_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3127}}, "n4659": {"so_37428228_37428357_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4013}}}, "37428345": {"Id": "37428345", "PostTypeId": "2", "Body": "<p>If you compile your second code snippet with Ideone for example it gives you \"<strong>redeclaration</strong> of 'stack::stack(int)' may not have default arguments\" (see <a href=\"http://ideone.com/UKIx2r\" rel=\"nofollow\">http://ideone.com/UKIx2r</a>).</p>\n<pre><code>prog.cpp:16:35: error: redeclaration of 'stack&lt;T&gt;::stack(int)' may not have default arguments [-fpermissive]\n stack&lt;T&gt;::stack(int s=DEFAULT_SIZE) {\n</code></pre>\n<p><strong>Default parameters have to be specified in the first declaration</strong></p>\n<p>If you declare your own constructors the default constructor will be deleted. However, your constructor will act as a default constructor as long as all parameters have default values.</p>\n<p>Your first part declares a correct default value for the constructors parameter. Your second part does not and your compiler has no chance to use the constructor as a default constructor.</p>\n", "LastEditorUserId": "6172310", "LastActivityDate": "2016-05-25T05:23:33.213", "Score": "1", "CreationDate": "2016-05-25T05:16:29.377", "ParentId": "37428228", "CommentCount": "6", "OwnerUserId": "6172310", "LastEditDate": "2016-05-25T05:23:33.213"}, "37428228": {"ViewCount": "175", "Body": "<p>I've implemented stack process.this program is supposed to work exactly the same as a real stack memory.moreover i'm trying to use Template and make the the program more generic. I've got a problem in using <code>#define DEFAULT_SIZE 10</code> as the argument of class constructor.</p>\n<p>First of all when i put <code>DEFAULT_SIZE</code> in the prototype of the constructor it goes smoothly:</p>\n<pre><code>#define DEFAULT_SIZE 10\n\ntemplate&lt;typename T&gt;\nclass stack {\npublic:\n   stack(int size=DEFAULT_SIZE);\nprivate:\n   T *elements;\n   int size;\n   int count;\n};\n\ntemplate&lt;typename T&gt;\nstack&lt;T&gt;::stack(int s) {\n   cout &lt;&lt; \"--constructor called\\n\";\n   size = s;\n   elements = new T[size];\n   count = 0;\n}\n</code></pre>\n<p>But when I just put <code>DEFAULT_SIZE</code> in outline definition of the class constructor i get this error: <code>no appropriate default constructor available</code></p>\n<pre><code>#define DEFAULT_SIZE 10\n\ntemplate&lt;typename T&gt;\nclass stack {\npublic:\n   stack(int size);\nprivate:\n   T *elements;\n   int size;\n   int count;\n};\n\ntemplate&lt;typename T&gt;\nstack&lt;T&gt;::stack(int s=DEFAULT_SIZE) {\n   cout &lt;&lt; \"--constructor called\\n\";\n   size = s;\n   elements = new T[size];\n   count = 0;\n}\n</code></pre>\n<p>Finally the main of the program:</p>\n<pre><code>int main() {\n   stack&lt;int&gt; u;\n   u.push(4);\n}\n</code></pre>\n<p>My question is not about \"Why can templates only be implemented in the header file?\" My problem is the place where I use <code>DEFAULT_SIZE</code>.</p>\n", "AcceptedAnswerId": "37428334", "Title": "Template and using (#define) in class constructor", "CreationDate": "2016-05-25T05:06:50.773", "Id": "37428228", "CommentCount": "11", "LastEditDate": "2016-05-25T22:28:19.920", "PostTypeId": "1", "LastEditorUserId": "1505939", "LastActivityDate": "2016-05-25T22:28:19.920", "Score": "1", "OwnerUserId": "5875247", "Tags": "<c++><class><templates><constructor><default-arguments>", "AnswerCount": "3"}, "37428357": {"Id": "37428357", "PostTypeId": "2", "Body": "<p>It is mentioned in C++ specs(\u00a78.3.6 pt.4) that </p>\n<blockquote>\n<p id=\"so_37428228_37428357_0\">For non-template functions, default arguments can be added in later declarations of a function in the same scope.</p>\n</blockquote>\n<p>So you can't assign the default value in the definition. That is the reason for not working of second approach.</p>\n<p>While first approach will work as it is a desired behavior that you can omit the default values in the definition.</p>\n", "LastActivityDate": "2016-05-25T05:18:05.817", "CommentCount": "3", "CreationDate": "2016-05-25T05:18:05.817", "ParentId": "37428228", "Score": "1", "OwnerUserId": "6339395"}, "37428334": {"Id": "37428334", "PostTypeId": "2", "Body": "<p>I suppose, the problem is just in difference of template declaration:</p>\n<pre><code> stack(int size);\n</code></pre>\n<p>and template definition:</p>\n<pre><code>stack&lt;T&gt;::stack(int s=DEFAULT_SIZE) {\n   ...\n}\n</code></pre>\n<p>Default values must be in declaration part, and if method signature in definition is different from declaration (you add DEFAULT_SIZE in definition) compiler is not sure you write the same constructor. Note, <code>DEFAULT_SIZE</code> is applied when <code>s</code> value not given to constructor, so you definition will work as default constructor, but declaration is constructor with one parameter. </p>\n", "LastEditorUserId": "4460500", "LastActivityDate": "2016-05-25T05:19:44.263", "Score": "2", "CreationDate": "2016-05-25T05:15:16.713", "ParentId": "37428228", "CommentCount": "1", "OwnerUserId": "4460500", "LastEditDate": "2016-05-25T05:19:44.263"}});