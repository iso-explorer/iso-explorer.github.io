post_cb({"bq_ids": {"n4140": {"so_31206937_31206937_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5421}}, "n3337": {"so_31206937_31206937_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5214}}, "n4659": {"so_31206937_31206937_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 6843}}}, "31206937": {"ViewCount": "1368", "Body": "<p><strong>C++ Primer</strong> (5th edition) on page 240 has a note stating: </p>\n<blockquote>\n<p id=\"so_31206937_31206937_0\">\"A <code>constexpr</code> function is not required to return a constant expression\". </p>\n</blockquote>\n<p>A question has been asked about this: <a href=\"https://stackoverflow.com/questions/29577778/can-constexpr-function-return-type-be-a-non-const\">can constexpr function return type be a non const?</a>. The author of that question misunderstood the note. </p>\n<p>But what is the correct understanding of it (the answers to the cited post clarify the confusion of that post's author, but do not answer my question)?</p>\n", "AcceptedAnswerId": "31207280", "Title": "A constexpr function is not required to return a constant expression?", "CreationDate": "2015-07-03T12:30:45.147", "Id": "31206937", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:08:48.153", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-06T12:43:55.093", "Score": "14", "OwnerUserId": "2725810", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "31207280": {"Id": "31207280", "PostTypeId": "2", "Body": "<p>A (non-template) <code>constexpr</code> function must have at least one execution path that returns a constant expression; formally, there must exist argument values such that <em>\"an invocation of the function [...] could be an evaluated subexpression of a core constant expression\"</em> (<strong>[dcl.constexpr]</strong>/5).  For example (ibid.):</p>\n<pre><code>constexpr int f(bool b) { return b ? throw 0 : 0; }     // OK\nconstexpr int f() { return f(true); }     // ill-formed, no diagnostic required\n</code></pre>\n<p>Here <code>int f(bool)</code> is allowed to be <code>constexpr</code> because its invocation with argument value <code>false</code> returns a constant expression.</p>\n<p>It is possible to have a <code>constexpr</code> function that cannot ever return a constant expression if it is a specialization of a function template that could have at least one specialization that does return a constant expression.  Again, with the above:</p>\n<pre><code>template&lt;bool B&gt; constexpr int g() { return f(B); }    // OK\nconstexpr int h() { return g&lt;true&gt;(); }    // ill-formed, no diagnostic required\n</code></pre>\n", "LastEditorUserId": "567292", "LastActivityDate": "2015-07-06T12:43:55.093", "Score": "13", "CreationDate": "2015-07-03T12:47:23.090", "ParentId": "31206937", "CommentCount": "7", "OwnerUserId": "567292", "LastEditDate": "2015-07-06T12:43:55.093"}, "31207196": {"Id": "31207196", "PostTypeId": "2", "Body": "<p>A <code>constexpr</code> function <s>must return</s>* must have a path that returns a constant expression iff all parameters are constant expressions. This actually makes sense. Example:</p>\n<pre><code>constexpr int square(int i){\n    return i*i;\n}\n\nstd::array&lt;int, square(2)&gt; ia; //works as intended, constant expression\nint i;\nstd::cin &gt;&gt; i;\nint j = square(i); //works even though i is not a constant expression\nstd::array&lt;int, square(i)&gt; ia; //fails, because square does not (and cannot)\n                               //return a constant expression\n</code></pre>\n<p>*Correction by <a href=\"https://stackoverflow.com/users/962089/chris\">chris</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-03T12:50:40.343", "Score": "15", "CreationDate": "2015-07-03T12:43:01.243", "ParentId": "31206937", "CommentCount": "2", "OwnerUserId": "3484570", "LastEditDate": "2017-05-23T12:24:55.150"}});