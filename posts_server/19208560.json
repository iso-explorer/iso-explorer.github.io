post_cb({"19208560": {"CommentCount": "0", "ViewCount": "1009", "PostTypeId": "1", "ClosedDate": "2017-07-31T11:23:04.670", "LastEditorUserId": "245376", "CreationDate": "2013-10-06T11:51:52.307", "LastActivityDate": "2015-12-14T08:59:14.850", "LastEditDate": "2015-12-14T08:59:14.850", "FavoriteCount": "1", "Title": "Can we use `const_cast` to modify a constant variable?", "Id": "19208560", "Score": "6", "Body": "<pre><code>int main()\n{\n    const int ia = 10;\n\n    int *pia = const_cast&lt;int*&gt;(&amp;ia);\n    *pia = 5;\n\n    std::cout &lt;&lt; &amp;ia &lt;&lt; \"\\t\" &lt;&lt;  pia &lt;&lt;endl;\n    std::cout &lt;&lt;  ia &lt;&lt; \"\\t\" &lt;&lt; *pia &lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>0x28fef4       0x28fef4\n10             5\n</code></pre>\n<p><code>*pia</code> and <code>ia</code> have the same address, but they have different values. My purpose is to use <code>const_cast</code> to modify a constant value, but as the result shows that it does not work.</p>\n<p>Does anyone know why?</p>\n", "Tags": "<c++><compiler-optimization><volatile><const-cast>", "OwnerUserId": "2851640", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_19208560_19208595_0": {"section_id": 6057, "quality": 0.8260869565217391, "length": 19}}, "n3337": {"so_19208560_19208595_0": {"section_id": 5825, "quality": 0.8260869565217391, "length": 19}}, "n4659": {"so_19208560_19208595_0": {"section_id": 7555, "quality": 0.8260869565217391, "length": 19}}}, "19208595": {"ParentId": "19208560", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The reason why you see <code>10</code> printed for <code>ia</code> is most likely the compiler optimization: it sees a <code>const</code> object, decides that it's not going to change, and replaces the last printout with this:</p>\n<pre><code>cout&lt;&lt; 10 &lt;&lt;\"  \"&lt;&lt;*ppa&lt;&lt;endl;\n</code></pre>\n<p>In other words, the generated code has the value of the <code>const</code> \"baked into\" the binary.</p>\n<p>Casting away the const-ness of an object that has originally been declared as <code>const</code> and writing to that object is undefined behavior:</p>\n<blockquote>\n<p id=\"so_19208560_19208595_0\">$5.2.11/7 - Note: Depending on the type of the object, a write operation through the pointer, lvalue or pointer to data member resulting from a const_cast that casts away a const-qualifier68) may produce undefined behavior (7.1.5.1).</p>\n</blockquote>\n<p>Depending on the platform, <code>const</code> objects may be placed in a protected region of memory, to which you cannot write. Working around the <code>const</code>-ness in the type system may help your program compile, but you may see random results or even crashes.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2013-10-06T12:01:58.083", "Id": "19208595", "Score": "6", "CreationDate": "2013-10-06T11:55:59.760", "LastActivityDate": "2013-10-06T12:01:58.083"}, "19208593": {"ParentId": "19208560", "CommentCount": "0", "Body": "<p>It is undefined behaviour to modify a constant value. Don't do it. If you need to modify the value, don't declare it as <code>const</code>.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "19208593", "Score": "6", "CreationDate": "2013-10-06T11:55:46.567", "LastActivityDate": "2013-10-06T11:55:46.567"}});