post_cb({"30071603": {"CommentCount": "4", "ViewCount": "103", "PostTypeId": "1", "LastEditorUserId": "1043773", "CreationDate": "2015-05-06T08:39:50.897", "LastActivityDate": "2015-05-06T08:56:31.813", "Title": "Is calling delete operator on a memory allocated by new[] operator undefined behavior?", "AcceptedAnswerId": "30071997", "LastEditDate": "2015-05-06T08:42:00.230", "Id": "30071603", "Score": "1", "Body": "<p>I am pretty much sure it is but if I am interpreting correctly the standard (Section 18.6.1.2 new.delete.array) mentions that:</p>\n<blockquote>\n<p id=\"so_30071603_30071603_0\">void operator delete[](void* ptr) noexcept;\n  pointer.</p>\n<p id=\"so_30071603_30071603_1\">. <strong>13 Default behavior: Calls operator delete(ptr)</strong></p>\n</blockquote>\n<p>Since in its default behavior delete[] just calls its delete(ptr) equivalent why should it matter which version is called?\nI tried with a sample code to verify this and it crashes making it more evident that mismatching new[] and delete indeed lead to bad things</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nclass foo{\n    public:\n        void bar(){\n            std::cout &lt;&lt; \"foo's bar\" &lt;&lt; std::endl;\n        }\n        ~foo(){\n            std::cout &lt;&lt; \"foo dies after this\" &lt;&lt; std::endl;\n        }\n};\nint main() {\n    std::shared_ptr&lt;foo&gt; x(new foo[10]);\n    return 0;\n}\n</code></pre>\n<p>How should the above quoted line from the standard be interpreted?</p>\n", "Tags": "<c++><standards><c++14><delete-operator>", "OwnerUserId": "1043773", "AnswerCount": "1"}, "30071997": {"ParentId": "30071603", "CommentCount": "1", "Body": "<p>You're confusing the <code>delete[]</code> expression with the function <code>operator delete[]</code>. When you write:</p>\n<pre><code>delete[] p;\n</code></pre>\n<p>then the compiler issues code which will call destructors for all objects in the array pointed to by <code>p</code>, and then call the deallocation function <code>operator delete[]</code> with the argument <code>p</code>. As per the documentation you've quoted, the default <code>::operator delete[]</code> calls <code>::operator delete</code>. So the following calls to the deallocation functions are equivalent when default implementations are used:</p>\n<pre><code>::operator delete[] (p);\n::operator delete(p);\n</code></pre>\n<p>But the following are <strong>not</strong> equivalent, because they do much more than just call the deallocation functions:</p>\n<pre><code>delete[] p;\ndelete p;\n</code></pre>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "30071997", "Score": "7", "CreationDate": "2015-05-06T08:56:31.813", "LastActivityDate": "2015-05-06T08:56:31.813"}, "bq_ids": {"n4140": {"so_30071603_30071603_0": {"section_id": 6820, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_30071603_30071603_0": {"section_id": 6575, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_30071603_30071603_0": {"section_id": 8312, "quality": 0.8333333333333334, "length": 5}}}});