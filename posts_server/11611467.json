post_cb({"bq_ids": {"n4140": {"so_11611467_11617699_2": {"length": 25, "quality": 1.0, "section_id": 7211}, "so_11611467_11617699_3": {"length": 22, "quality": 0.9166666666666666, "section_id": 7212}}, "n3337": {"so_11611467_11617699_2": {"length": 25, "quality": 1.0, "section_id": 6955}, "so_11611467_11617699_3": {"length": 22, "quality": 0.9166666666666666, "section_id": 6956}}, "n4659": {"so_11611467_11617699_2": {"length": 24, "quality": 0.96, "section_id": 8720}, "so_11611467_11617699_3": {"length": 22, "quality": 0.9166666666666666, "section_id": 8721}}}, "11611467": {"ViewCount": "14743", "Body": "<p>On Visual Studio 2010 under Windows 7, 32bit, unsigned long seems to be a distinct type from both uint32_t and uint64_t. See the following test program:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\ntemplate&lt;class T, class U&gt;\nstruct is_same_type\n{\n    static const bool value = false;\n};\ntemplate&lt;class T&gt;\nstruct is_same_type&lt;T, T&gt;\n{\n    static const bool value = true;\n};\n\n#define TO_STRING(arg)        TO_STRING_IMPL(arg)\n#define TO_STRING_IMPL(arg)   #arg\n\n#define PRINT_SAME_TYPE(type1, type2) printf(\"%s (size=%d) %s %s (size=%d)\\n\", \\\n    TO_STRING(type1), int(sizeof(type1)), \\\n    is_same_type&lt;type1, type2&gt;::value ? \"==\" : \"!=\", \\\n    TO_STRING(type2), int(sizeof(type2)))\n\n\nint main(int /*argc*/, const char* /*argv*/[])\n{\n    PRINT_SAME_TYPE(uint32_t, unsigned long);\n    PRINT_SAME_TYPE(uint64_t, unsigned long);\n    return 0;\n}\n</code></pre>\n<p>I'd expect it to print either</p>\n<pre><code>uint32_t (size=4) != unsigned long (size=8)\nuint64_t (size=8) == unsigned long (size=8)\n</code></pre>\n<p>(which I get on x86_64 Linux) or</p>\n<pre><code>uint32_t (size=4) == unsigned long (size=4)\nuint64_t (size=8) != unsigned long (size=4)\n</code></pre>\n<p>assuming of course that long is not longer than 64bits.</p>\n<p>On Windows however, I get the baffling</p>\n<pre><code>uint32_t (size=4) != unsigned long (size=4)\nuint64_t (size=8) != unsigned long (size=4)\n</code></pre>\n<p>which means that there are two distinct 32bit unsigned types. Is this allowed by the C++ standard? Or is this a bug in the Visual C++ compiler?</p>\n", "AcceptedAnswerId": "11617699", "Title": "Type of unsigned long is different from uint32_t and uint64_t on Windows (VS2010)", "CreationDate": "2012-07-23T11:18:51.853", "Id": "11611467", "CommentCount": "1", "LastEditDate": "2012-07-23T17:46:44.537", "PostTypeId": "1", "LastEditorUserId": "151292", "LastActivityDate": "2012-07-23T17:46:44.537", "Score": "3", "OwnerUserId": "509319", "Tags": "<c++><visual-c++><visual-c++-2010>", "AnswerCount": "1"}, "11617699": {"Id": "11617699", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11611467_11617699_0\">There are two distinct 32-bit, unsigned types</p>\n</blockquote>\n<p>Yes, there are.  Both <code>int</code> and <code>long</code> are represented by 32 bits.</p>\n<blockquote>\n<p id=\"so_11611467_11617699_1\">Is this allowed by the C++ standard?</p>\n</blockquote>\n<p>Yes.  The specification states (C++11 \u00a73.9.1[basic.fundamental]/2):</p>\n<blockquote>\n<p id=\"so_11611467_11617699_2\">There are five standard signed integer types : <code>signed char</code>, <code>short int</code>, <code>int</code>, <code>long int</code>, and <code>long long int</code>. In this list, <strong>each type provides at least as much storage as those preceding it in the list.</strong></p>\n<p id=\"so_11611467_11617699_3\">For each of the standard signed integer types, there exists a corresponding (but different) standard unsigned integer type...each of which occupies the same amount of storage and has the same alignment requirements as the corresponding signed integer type</p>\n</blockquote>\n<p>Note that despite the fact that <code>int</code> and <code>long</code> are represented by the same number of bits, they are still different types (so, for example, they are treated differently during overload resolution).</p>\n", "LastActivityDate": "2012-07-23T17:46:35.350", "CommentCount": "2", "CreationDate": "2012-07-23T17:46:35.350", "ParentId": "11611467", "Score": "5", "OwnerUserId": "151292"}});