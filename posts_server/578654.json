post_cb({"578672": {"CommentCount": "12", "CreationDate": "2009-02-23T18:09:47.807", "LastEditorUserId": "34509", "LastActivityDate": "2009-02-23T20:33:14.980", "ParentId": "578654", "PostTypeId": "2", "LastEditorDisplayName": "litb", "LastEditDate": "2009-02-23T20:33:14.980", "Id": "578672", "Score": "3", "Body": "<p>You have to provide a <em>definition</em> in a translation unit too, in case you <em>use</em> the value variable. That means, if for example you read its value. </p>\n<p>The important thing is that the compiler is not required to give a warning or error if you violate that rule. The Standard says \"no diagnostic required\" for a violation. </p>\n<p>In the next C++ Standard version, the rule changed. A variable is <em>not</em> used when it is used as a constant expression. Simply reading <em>value</em> above where the variable is initialized directly in the class means that still no definition is required then. </p>\n<p>See the definition of <code>use</code> in section <code>3.2 One Definition Rule</code> of the Standard and requirement for a definition for static data-members in <code>9.4.2, paragraph 4 and 5</code> (in the C++98 Standard. Appears in paragraph 3 and 4 in the n2800 draft of the next Standard). </p>\n<p><strong>Correction:</strong> The rule already changed for c++03: If the variable appears where a integral constant expression is required, no definition is needed (quoting from an unofficial revisions list for the 2003 update), see resolution for <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#48\" rel=\"nofollow noreferrer\">this language defect report</a>:</p>\n<blockquote>\n<p id=\"so_578654_578672_0\">An expression is potentially evaluated unless it appears where an integral constant expression is required (see 5.19), is the operand of the sizeof operator (5.3.3), or is the operand of the typeid operator and the expression does not designate an lvalue of polymorphic class type (5.2.8)...</p>\n</blockquote>\n<p>Note that even then, many uses are in cases where an integral constant is not <em>required</em>. Cases where one is, is in array dimensions or in template metaprogramming. So strictly speaking (see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#454\" rel=\"nofollow noreferrer\">this report</a>), only the c++1x solution provides really guarantee that in obvious cases also like <code>\"s == string::npos\"</code> where an integral constant is not <em>required</em> the definition of the static member is not needed, because the next Standard has a different, better wording of 3.2. This is however quite theoretical stuff, since most (all?) compiler don't moan anyway. Thanks for the guy in the comment section for telling me.</p>\n", "OwnerUserId": "34509", "OwnerDisplayName": "litb"}, "578747": {"CommentCount": "0", "CreationDate": "2009-02-23T18:34:14.580", "LastEditorUserId": "63485", "LastActivityDate": "2009-02-23T18:47:36.217", "ParentId": "578654", "PostTypeId": "2", "LastEditorDisplayName": "Brian Neal", "LastEditDate": "2009-02-23T18:47:36.217", "Id": "578747", "Score": "0", "Body": "<p>You don't have to provide a definition for <strong>static integral constant members</strong> if you don't use them in some way that requires them to be stored in memory somewhere (e.g. take the address of such a member). See Stroustrup's <em>The C++ Programming Language</em>, section 10.4.6.2.</p>\n<p>Edit: \nOops, I just re-read the question, and the question was for some type T. In general you would need to provide a definition, I agree. But if you used something from the int family, you wouldn't necessarily have to (with the caveat above).</p>\n", "OwnerUserId": "63485", "OwnerDisplayName": "Brian Neal"}, "578654": {"CommentCount": "0", "ViewCount": "417", "PostTypeId": "1", "OwnerDisplayName": "Ag4417", "LastEditorDisplayName": "Ag4417", "CreationDate": "2009-02-23T18:04:17.007", "LastActivityDate": "2009-02-23T20:33:14.967", "LastEditDate": "2009-02-23T18:10:18.007", "AcceptedAnswerId": "578672", "FavoriteCount": "2", "Title": "Static Constant Class Members", "Id": "578654", "Score": "0", "Body": "<p>Consider the following snippet:</p>\n<pre><code>struct Foo\n{\n    static const T value = 123; //Where T is some POD-type\n};\n\nconst T Foo::value; //Is this required?\n</code></pre>\n<p>In this case, does the standard require us to explicitly declare <strong>value</strong> in a translation unit? It seems I have conflicting information; boost and things like numeric_limits from the STL seem to do this sort of thing just like in my snippet. </p>\n<p>OTOH, I remember reading somewhere (albeit a long long time ago) that you're still required to provide a declaration in a translation unit.</p>\n<p>If this is the case, what about template specialization? Will each specialization require a declaration?</p>\n<p>I'd appreciate your comments as to what the \"right way\" is.</p>\n", "Tags": "<c++>", "AnswerCount": "3"}, "578693": {"ParentId": "578654", "CommentCount": "1", "Body": "<p>To add on to what litb said, from my copy of n2798:</p>\n<blockquote>\n<p id=\"so_578654_578693_0\"><strong>9.4.2</strong></p>\n<p id=\"so_578654_578693_1\">[...]</p>\n<p id=\"so_578654_578693_2\">2 The declaration of a static data member in its class definition is not a definition and<br>\n   may be of an incomplete type other than cv-qualified void. The definition for a static<br>\n   data member shall appear in a namespace scope enclosing the member\u2019s class definition. In \n   the definition at namespace scope, the name of the static data member shall be qualified \n   by its class name using the :: operator.</br></br></p>\n</blockquote>\n", "OwnerUserId": "66692", "Id": "578693", "PostTypeId": "2", "OwnerDisplayName": "dirkgently", "Score": "0", "CreationDate": "2009-02-23T18:14:38.997", "LastActivityDate": "2009-02-23T18:14:38.997"}, "bq_ids": {"n4140": {"so_578654_578693_2": {"section_id": 5907, "quality": 0.9512195121951219, "length": 39}}, "n3337": {"so_578654_578693_2": {"section_id": 5679, "quality": 0.9512195121951219, "length": 39}}, "n4659": {"so_578654_578693_2": {"section_id": 7389, "quality": 0.9024390243902439, "length": 37}}}});