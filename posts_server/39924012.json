post_cb({"39924012": {"CommentCount": "4", "ViewCount": "123", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-10-07T18:49:01.433", "LastActivityDate": "2016-10-17T17:30:05.623", "Title": "What is the purpose of bullet point (7.5) in [class]/7, in C++14?", "LastEditDate": "2017-05-23T12:00:43.117", "Id": "39924012", "Score": "3", "Body": "<p>This is basically a continuation of <a href=\"https://stackoverflow.com/questions/39904101/definition-of-standard-layout-class-in-c14\">my prior question</a>.</p>\n<p>This is [class]/7 in C++14:</p>\n<p>A standard-layout class is a class that:</p>\n<ul>\n<li>(7.1) \u2014 has no non-static data members of type non-standard-layout class (or array of such types) or reference,</li>\n<li>(7.2) \u2014 has no virtual functions (10.3) and no virtual base classes (10.1),</li>\n<li>(7.3) \u2014 has the same access control (Clause 11) for all non-static data members,</li>\n<li>(7.4) \u2014 has no non-standard-layout base classes,</li>\n<li>(7.5) \u2014 either has no non-static data members in the most derived class and at most one base class with\nnon-static data members, or has no base classes with non-static data members, and</li>\n<li>(7.6) \u2014 has no base classes of the same type as the first non-static data member.</li>\n</ul>\n<p>Consider the following snippet:</p>\n<pre><code>struct B{ int i; };\nstruct A : B{ int j; };\n</code></pre>\n<p><code>A</code> satisfies bullet points (7.1) thru (7.4), but doesn't satisfy (7.5), as <code>A</code> has a non-static data member and has a base class with a non-static data member.</p>\n<p>What is the problem with <code>A</code> being a standard-layout class?</p>\n<p><strong>Edit</strong></p>\n<p>As far as I can understand the <a href=\"https://stackoverflow.com/a/7166667/5479741\">accepted answer</a> to the question of which this is being considered a dupe, the snippet above would have undefined behavior, if I tried to cast a pointer to <code>A</code> to the first data member of the base class <code>B</code> and back, because of this sentence written by the OP:</p>\n<p><code>Within a class, members are allocated in increasing addresses according to the declaration order. However C++ doesn't dictate the order of allocation for data members across classes.</code></p>\n<p>But that doesn't seem to answer my question. Suppose for example that in a certain compiler implementation, base <code>B</code> would follow <code>struct A</code> in memory, instead of preceding it. But this would contradict the fact that there is an implicit conversion, from a pointer to a derived class, to a pointer to a base class, according to [conv.ptr]/3:</p>\n<blockquote>\n<p id=\"so_39924012_39924012_0\">A prvalue of type \u201cpointer to cv D\u201d, where D is a class type, can be\n  converted to a prvalue of type \u201cpointer to cv B\u201d, where B is a base\n  class (Clause 10) of D.</p>\n</blockquote>\n<p>That is, if the base <code>B</code> followed <code>struct A</code> in memory, the above implicit conversion would be invalid.</p>\n", "Tags": "<c++><c++14><language-lawyer>", "OwnerUserId": "5479741", "AnswerCount": "1"}, "39931645": {"ParentId": "39924012", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Directly answering the question as phrased: </p>\n<p>The purpose of this bullet is to <em>allow</em> very simple cases of inheritance where only <em>one</em> of the classes has data members.</p>\n<p>Data layout for inheritance is unspecified, so the standard could just disallow inheritance altogether, but the standard makes an exception if one class has <em>no</em> data to treat the result still as Standard Layout. </p>\n", "OwnerUserId": "321013", "LastEditorUserId": "654953", "LastEditDate": "2016-10-17T17:30:05.623", "Id": "39931645", "Score": "0", "CreationDate": "2016-10-08T11:09:44.017", "LastActivityDate": "2016-10-17T17:30:05.623"}, "bq_ids": {"n4140": {"so_39924012_39924012_0": {"section_id": 41, "quality": 1.0, "length": 15}}, "n3337": {"so_39924012_39924012_0": {"section_id": 38, "quality": 1.0, "length": 15}}, "n4659": {"so_39924012_39924012_0": {"section_id": 41, "quality": 1.0, "length": 15}}}});