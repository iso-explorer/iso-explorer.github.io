post_cb({"26495013": {"CommentCount": "4", "ViewCount": "151", "CreationDate": "2014-10-21T19:45:33.733", "LastActivityDate": "2014-10-21T20:09:27.487", "Title": "Why does compiler not balk at a line beginning with an addition operator?", "AcceptedAnswerId": "26495150", "PostTypeId": "1", "Id": "26495013", "Score": "2", "Body": "<p>I was just doing some refactoring, and created a bug for myself:</p>\n<pre><code>int i = 2;\n    + 7;\n    + 4;\n</code></pre>\n<p>This is simplified; the additional semicolons at the ends of lines 1 &amp; 2 were not quite this obvious - at least to me :).</p>\n<p>What I cannot figure out is why the compiler didn't catch it.  Is there some valid action in C++ which begins a line with an addition operator?</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "698978", "AnswerCount": "3"}, "26495150": {"ParentId": "26495013", "CommentCount": "2", "Body": "<p>Without something to add to the addition operator just means positive so <code>+2;</code> just means <code>(+2);</code> which is like just having a line <code>i;</code> or similar. Nothing 'wrong' with it, but nothing will happen either. If you compile under *nix with gcc with -Wall specified you'll get the error <code>warning: statement has no effect</code> which is generally good to know because it is often a sign a statement you have intended to do something is in fact not doing what it was supposed to.</p>\n", "OwnerUserId": "3353819", "PostTypeId": "2", "Id": "26495150", "Score": "5", "CreationDate": "2014-10-21T19:54:23.333", "LastActivityDate": "2014-10-21T19:54:23.333"}, "26495099": {"ParentId": "26495013", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is a completely valid code you are using the <em>unary + operator</em>, the result is the value of the operand, it also performs the integer promotions on the operand. </p>\n<p>Turing on warning would have been helpful in this case, for example gcc and clang using <code>-Wall -Wextra</code> would give you a warning like this:</p>\n<blockquote>\n<p id=\"so_26495013_26495099_0\">warning: expression result unused [-Wunused-value]</p>\n<pre><code>+ 7;\n^ ~\n</code></pre>\n</blockquote>\n<p>We can get the same warning in Visual Studio using <a href=\"http://msdn.microsoft.com/en-us/library/23k5d385.aspx\" rel=\"nofollow\">/Wall</a>:</p>\n<blockquote>\n<p id=\"so_26495013_26495099_1\">warning C4555: expression has no effect; expected expression with side-effect</p>\n</blockquote>\n<p>This is covered in the draft C++ standard section <code>5.3.1</code> <em>Unary operators</em> which says:</p>\n<blockquote>\n<p id=\"so_26495013_26495099_2\">The operand of the unary + operator shall have arithmetic, unscoped\n  enumeration, or pointer type and the result is the value of the\n  argument. Integral promotion is performed on integral or enumeration\n  operands. The type of the result is the type of the promoted operand.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/operator_arithmetic\" rel=\"nofollow\">cppreference</a> has the following to say:</p>\n<blockquote>\n<p id=\"so_26495013_26495099_3\">The builtin unary plus operator returns the value of its operand. The\n  only situation where it is not a no-op is when the operand has\n  integral type or unscoped enumeration type, which is changed by\n  integral promotion, e.g, it converts char to int or if the operand is\n  subject to lvalue-to-rvalue, array-to-pointer, or function-to-pointer\n  conversion.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-10-21T20:09:27.487", "Id": "26495099", "Score": "4", "CreationDate": "2014-10-21T19:50:36.367", "LastActivityDate": "2014-10-21T20:09:27.487"}, "bq_ids": {"n4140": {"so_26495013_26495099_2": {"section_id": 6070, "quality": 0.92, "length": 23}}, "n3337": {"so_26495013_26495099_2": {"section_id": 5838, "quality": 0.92, "length": 23}}, "n4659": {"so_26495013_26495099_2": {"section_id": 7566, "quality": 0.92, "length": 23}}}, "26495167": {"ParentId": "26495013", "CommentCount": "0", "Body": "<p><code>+ 7;</code> is an <em>expression statement</em>, which consists of an expression followed by a semicolon.</p>\n<p>The expression is evaluated, and the result is discarded. Usually this is done because the expression has side effects (such as an assignment or an I/O statement). An expression statement where the expression has no side effects is legal but useless.</p>\n<p>Some compilers might warn about it if you ask them nicely.</p>\n<p>As others have pointed out, <code>+</code> is the unary plus operator, which exists for symmetry with the unary <code>-</code> operator. It yields the value of its operand (after performing integral promotions when appropriate).</p>\n", "OwnerUserId": "827263", "PostTypeId": "2", "Id": "26495167", "Score": "1", "CreationDate": "2014-10-21T19:55:05.123", "LastActivityDate": "2014-10-21T19:55:05.123"}});