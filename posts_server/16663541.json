post_cb({"16663541": {"CommentCount": "11", "ViewCount": "280", "PostTypeId": "1", "LastEditorUserId": "138170", "CreationDate": "2013-05-21T06:30:58.847", "LastActivityDate": "2013-05-21T08:21:49.493", "Title": "How to tell advance() to use += operator on input iterators if they aren't random access", "FavoriteCount": "3", "LastEditDate": "2013-05-21T08:21:49.493", "Id": "16663541", "Score": "16", "Body": "<p>Consider an input iterator like <a href=\"http://www.boost.org/doc/libs/1_46_1/boost/range/detail/join_iterator.hpp\" rel=\"nofollow\"><code>join_iterator</code></a>: it iterates over the concatenation of other ranges. Calling <code>++i</code> repeatedly can be <strong><em>much</em></strong> slower than a simple <code>i += n</code>.  </p>\n<p>Nevertheless, most C++ code that requires advancing an iterator by an arbitrary amount uses <code>std::advance</code>, which automatically resorts to calling <code>++i</code> when the iterator isn't random-access.</p>\n<p>(Sadly, most people use <code>std::advance(i, n)</code> instead of <code>using std::advance; advance(i, n)</code>, so I can't just supply <code>advance</code> for my iterator and rely on ADL.)</p>\n<p>On the other hand, I can't use <code>+</code> or <code>+=</code> because input iterators don't have to implement them.</p>\n<p>So the question is: <strong>how would I go about supporting such a scenario</strong>, when:</p>\n<ul>\n<li><p><strong>Implementing</strong> such an iterator?</p></li>\n<li><p><strong>Using</strong> an input iterator which might have an optimized <code>operator +=</code>?</p></li>\n</ul>\n<p>(Note that <code>advance</code> and <code>+</code> isn't the only scenario in which this matters -- <code>distance</code> and <code>-</code> has the same problem.)</p>\n", "Tags": "<c++><iterator>", "OwnerUserId": "541686", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16663541_16664361_0": {"section_id": 5593, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_16663541_16664361_0": {"section_id": 5376, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_16663541_16664361_0": {"section_id": 7037, "quality": 0.9705882352941176, "length": 33}}}, "16664361": {"ParentId": "16663541", "CommentCount": "11", "Body": "<p>According to C++11 \u00a724.4.4,</p>\n<blockquote>\n<p id=\"so_16663541_16664361_0\">Since only random access iterators provide + and - operators, the library provides two function templates <code>advance</code> and <code>distance</code>. <strong>These function templates use <code>+</code> and <code>-</code> for random access iterators (and are, therefore, constant time for them);</strong> for input, forward and bidirectional iterators they use ++ to provide linear time implementations.</p>\n</blockquote>\n<p>You should only have to define <code>+</code> and <code>-</code>, and specify <code>std::random_access_iterator_tag</code>. There is no need to specialize or overload <code>std::advance</code>.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "16664361", "Score": "3", "CreationDate": "2013-05-21T07:24:10.097", "LastActivityDate": "2013-05-21T07:24:10.097"}});