post_cb({"42888208": {"ParentId": "42888031", "CommentCount": "3", "Body": "<p>You can return anonymous type, but you have to define it inside the function:</p>\n<pre><code>auto foo()\n{\n    struct {} s;\n    return s;\n}\n</code></pre>\n", "OwnerUserId": "2684539", "PostTypeId": "2", "Id": "42888208", "Score": "2", "CreationDate": "2017-03-19T15:10:34.903", "LastActivityDate": "2017-03-19T15:10:34.903"}, "42888065": {"ParentId": "42888031", "CommentCount": "2", "Body": "<p>MSVC appears wrong:</p>\n<blockquote>\n<p id=\"so_42888031_42888065_0\"><strong>[dcl.fct]/9</strong> Types shall not be defined in return or parameter types...</p>\n</blockquote>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "42888065", "Score": "4", "CreationDate": "2017-03-19T14:58:53.243", "LastActivityDate": "2017-03-19T14:58:53.243"}, "bq_ids": {"n4140": {"so_42888031_42888065_0": {"section_id": 3245, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_42888031_42888065_0": {"section_id": 3118, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_42888031_42888065_0": {"section_id": 4003, "quality": 0.8333333333333334, "length": 5}}}, "42888031": {"CommentCount": "0", "ViewCount": "285", "CreationDate": "2017-03-19T14:56:09.517", "LastActivityDate": "2017-03-19T15:10:34.903", "Title": "Anonymous struct as a return type", "AcceptedAnswerId": "42888065", "PostTypeId": "1", "Id": "42888031", "Score": "2", "Body": "<p>The following code <a href=\"http://rextester.com/GMUP11493\" rel=\"nofollow noreferrer\">compiles fine with <em>vc++ 19.00.23506</em></a> (flags: <code>/Wall /WX /Za</code>) and with <em>vc++ 19.10.25109.0</em> (flags: <code>/Wall /WX /Za /permissive-</code>, this can be checked at <a href=\"http://webcompiler.cloudapp.net\" rel=\"nofollow noreferrer\">http://webcompiler.cloudapp.net</a>), but <a href=\"http://coliru.stacked-crooked.com/a/6f77956bb0e2138d\" rel=\"nofollow noreferrer\">doesn't compile with <em>clang 3.8.0</em> and <em>g++ 6.3.0</em></a> (flags: <code>-std=c++11 -Wall -Wextra -Werror -pedantic-errors</code>). Is it a bug in <em>vc++</em> and does the standard prohibit such constructions?</p>\n<pre><code>struct\n{\n}\nfoo()\n{\n    return {};\n}\n\nint main()\n{\n}\n</code></pre>\n", "Tags": "<c++><visual-c++><struct><return-type><function-declaration>", "OwnerUserId": "3043539", "AnswerCount": "2"}});