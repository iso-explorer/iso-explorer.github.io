post_cb({"15798549": {"CommentCount": "4", "ViewCount": "61", "CreationDate": "2013-04-03T21:33:26.617", "LastActivityDate": "2013-04-04T01:32:20.577", "Title": "boost::shared_pointer exit without calling release", "PostTypeId": "1", "Id": "15798549", "Score": "0", "Body": "<p>I am working with a program where my code calls a third party library which uses boost and shared_pointers to create a large and complex structure. This structure is created in a method that I call and at the end of the method I know that the program is finished. \n  For a large sample that I am handling the code to handle the processing takes 30 minutes and the boost code called automatically at exit takes many hours. Exiting the program without releasing the memory and spending all that time would be a perfectly acceptable outcome. \n   I tried \n    vector *iddListV = new vector(); //   this WILL leak memory\nwith all the relevant structures added to the vector but this does not help.\n  I also tried calling exit(0); before reaching the end of the subroutine. This also causes the boost code to spend many hours trying to release pointers.\n  How to I get a C++ program (Microsoft C++ on Windows if that matters) to abruptly exit without calling the boost destructors. \n   My constraints are I can call any function before the boost structure are allocated but cannot modify the code once it starts running.</p>\n", "Tags": "<c++><boost><shared-ptr>", "OwnerUserId": "1486990", "AnswerCount": "3"}, "15798590": {"ParentId": "15798549", "CommentCount": "0", "Body": "<p><code>_Exit</code> quits without calling any destructors.</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "15798590", "Score": "1", "CreationDate": "2013-04-03T21:35:47.990", "LastActivityDate": "2013-04-03T21:35:47.990"}, "15801086": {"ParentId": "15798549", "CommentCount": "0", "Body": "<p>It is possible, in a portable manner, to do:</p>\n<pre><code>#include &lt;exception&gt;\n...\nstd::terminate();\n</code></pre>\n<p>However, there's a big gotcha, in that, at least on linux, this may cause a core dump. (I'm really not sure what the behavior is on Windows).</p>\n<p>It should be noted, that the behavior is implementation defined as far as whether or not destructors are called. Siting \u00a715.5.1 P2:</p>\n<blockquote>\n<p id=\"so_15798549_15801086_0\">In the situation where the search for a handler (15.3) encounters the\n  outermost block of a function with a noexcept-specification that does\n  not allow the exception (15.4), it is implementation-defined whether\n  the stack is unwound, unwound partially, or not unwound at all before\n  std::terminate() is called.</p>\n</blockquote>\n<p>Additionally in \u00a718.8.3.4 P1:</p>\n<blockquote>\n<p id=\"so_15798549_15801086_1\">Remarks: Called by the implementation when exception handling must be\n  abandoned for any of several reasons (15.5.1), in effect immediately\n  after evaluating the throw-expression (18.8.3.1). May also be called\n  directly by the program.</p>\n</blockquote>\n<p>C++11 also defines the function <code>std::quick_exit(int status)</code> that can be used in a similar manner (presumably without a coredump).  This function is available from <code>&lt;cstdlib&gt;</code>.</p>\n", "OwnerUserId": "311314", "PostTypeId": "2", "Id": "15801086", "Score": "0", "CreationDate": "2013-04-04T01:32:20.577", "LastActivityDate": "2013-04-04T01:32:20.577"}, "bq_ids": {"n4140": {"so_15798549_15801086_1": {"section_id": 6929, "quality": 0.7619047619047619, "length": 16}, "so_15798549_15801086_0": {"section_id": 3383, "quality": 0.88, "length": 22}}, "n3337": {"so_15798549_15801086_1": {"section_id": 6677, "quality": 0.8571428571428571, "length": 18}, "so_15798549_15801086_0": {"section_id": 3252, "quality": 0.88, "length": 22}}, "n4659": {"so_15798549_15801086_1": {"section_id": 8426, "quality": 0.6190476190476191, "length": 13}, "so_15798549_15801086_0": {"section_id": 4143, "quality": 0.76, "length": 19}}}, "15798939": {"ParentId": "15798549", "CommentCount": "0", "Body": "<p>If you're unconcerned about portability, you can call <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.85%29.aspx\" rel=\"nofollow\"><code>TerminateProcess()</code></a>. But remember to take care that you are <strong>absolutely</strong> sure that your program is in a state which is ready to terminate. For example, if you terminate before I/O has had a chance to flush, then your file data and network streams may become invalid.</p>\n", "OwnerUserId": "1111557", "PostTypeId": "2", "Id": "15798939", "Score": "0", "CreationDate": "2013-04-03T21:58:08.973", "LastActivityDate": "2013-04-03T21:58:08.973"}});