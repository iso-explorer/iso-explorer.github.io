post_cb({"18929467": {"ViewCount": "397", "Body": "<p>The following code, which loosely represents some serialization stuff I'm working on, compiles with g++ (<a href=\"http://ideone.com/0rsGmt\" rel=\"nofollow\">http://ideone.com/0rsGmt</a>), but Visual Studio Express 2013 RC fails with the following errors:</p>\n<pre><code>Error 1 error C2326: 'void foo::print(void)' : function cannot access 'foo::bar::member_'\nError 2 error C2039: 'bar' : is not a member of 'foo'\n</code></pre>\n<p>The code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass foo\n{   \n    private:\n        struct bar\n        {\n            int member_;\n        };\n\n    public:\n        void print()\n        {\n            std::cout &lt;&lt; sizeof(decltype(foo::bar::member_)) &lt;&lt; std::endl;\n        }\n};\n\nint main(int argc, char* argv[])\n{\n    foo f;\n    f.print();\n    return 0;\n}\n</code></pre>\n<p>What's wrong? Visual Studio inadequacy or something else? Obviously I can move the struct declaration out of the class; and Daniel Frey has offered a workaround below; but I want to know <strong>why</strong> the above code won't compile as-is with Visual Studio.</p>\n<p><strong>Update:</strong> The accepted answer says that it should work, but as is typical for Microsoft it doesn't. I've filled a bug report here: <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/801829/incomplete-decltype-support-in-c-11-compiler\" rel=\"nofollow\">http://connect.microsoft.com/VisualStudio/feedback/details/801829/incomplete-decltype-support-in-c-11-compiler</a></p>\n<p>(If someone can suggest a better title for the question, I'd appreciate it!)</p>\n", "AcceptedAnswerId": "18929776", "Title": "Why can't this public member function call decltype on a private struct member declared inside the class?", "CreationDate": "2013-09-21T05:59:12.153", "Id": "18929467", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2013-09-24T03:20:23.187", "LastEditorUserId": "331024", "LastActivityDate": "2013-09-24T03:20:23.187", "Score": "1", "OwnerUserId": "331024", "Tags": "<c++><visual-studio><c++11><decltype><visual-studio-2013>", "AnswerCount": "2"}, "18929776": {"Id": "18929776", "PostTypeId": "2", "Body": "<p>I think your code <em>should</em> work (as on GCC or Clang), according to</p>\n<blockquote>\n<h3>5 Expressions [expr]</h3>\n<p id=\"so_18929467_18929776_0\"><sup>8</sup> In some contexts, <em>unevaluated operands</em> appear (5.2.8, 5.3.3, 5.3.7, 7.1.6.2). An unevaluated operand is not evaluated. An unevaluated operand is considered a full-expression. [<em>Note:</em> In an unevaluated operand, a non-static class member may be named (5.1) and naming of objects or functions does not, by itself, require that a definition be provided (3.2). \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>It seems that VC++ does not implement what the note clarifies, so you need a (faked) instance as a work-around to make VC++ happy. This should work:</p>\n<pre><code>void print()\n{\n    std::cout &lt;&lt; sizeof(std::declval&lt;bar&gt;().member_) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Note that I removed the <code>decltype</code> as <code>sizeof</code> can work on expressions directly.</p>\n", "LastEditorUserId": "2073257", "LastActivityDate": "2013-09-21T23:30:14.577", "Score": "2", "CreationDate": "2013-09-21T06:45:28.390", "ParentId": "18929467", "CommentCount": "2", "OwnerUserId": "2073257", "LastEditDate": "2013-09-21T23:30:14.577"}, "18929701": {"Id": "18929701", "PostTypeId": "2", "Body": "<p>Maybe the problem with your code is that structs are like classes and you define the struct inside the class but the compiler does not know that this class(or struct) exists until it compiles the whole class. </p>\n", "LastEditorUserId": "2667005", "LastActivityDate": "2013-09-21T07:02:50.723", "Score": "0", "CreationDate": "2013-09-21T06:33:47.667", "ParentId": "18929467", "CommentCount": "2", "OwnerUserId": "2667005", "LastEditDate": "2013-09-21T07:02:50.723"}, "bq_ids": {"n4140": {"so_18929467_18929776_0": {"length": 24, "quality": 0.7272727272727273, "section_id": 5941}}, "n3337": {"so_18929467_18929776_0": {"length": 21, "quality": 0.6363636363636364, "section_id": 5712}}, "n4659": {"so_18929467_18929776_0": {"length": 21, "quality": 0.6363636363636364, "section_id": 7425}}}});