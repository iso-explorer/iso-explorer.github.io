post_cb({"bq_ids": {"n4140": {"so_13743357_13743395_2": {"length": 12, "quality": 0.8, "section_id": 7188}}, "n3337": {"so_13743357_13743395_2": {"length": 12, "quality": 0.8, "section_id": 6932}}}, "13743357": {"CreationDate": "2012-12-06T12:10:08.143", "ViewCount": "85", "FavoriteCount": "1", "Id": "13743357", "AcceptedAnswerId": "13743395", "Score": "0", "Title": "Location of members of an object", "LastEditorUserId": "-1", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_13743357_13743357_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/187797/are-data-members-allocated-in-the-same-memory-space-as-their-objects-in-c\">Are data members allocated in the same memory space as their objects in C++?</a> </br></p>\n</blockquote>\n<p>If I declare an object like this:</p>\n<pre><code>void main() {\n  MyClass class;\n}\n</code></pre>\n<p>it will be created automatically on the stack.</p>\n<p>What happens if I do this:</p>\n<pre><code>class MySecondClass {\n  private:\n    MyClass class;\n}\n</code></pre>\n<p>Will the member be created on the stack? If so, what happens if <code>MySecondClass</code> is created via <code>new</code>? Will this member still be on the stack?</p>\n", "ClosedDate": "2012-12-06T12:36:02.153", "LastEditDate": "2017-05-23T11:48:57.990", "Tags": "<c++>", "LastActivityDate": "2012-12-06T12:20:04.177", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1716487"}, "13743417": {"CommentCount": "0", "Body": "<p>Yes, member is created on the stack.</p>\n<p>If you create a  new object of MyClass using \"new\", resources will be allocated on the heap.</p>\n", "CreationDate": "2012-12-06T12:13:39.427", "ParentId": "13743357", "Id": "13743417", "LastActivityDate": "2012-12-06T12:13:39.427", "PostTypeId": "2", "Score": "1", "OwnerUserId": "980344"}, "13743395": {"CreationDate": "2012-12-06T12:12:32.790", "CommentCount": "9", "Body": "<blockquote>\n<p id=\"so_13743357_13743395_0\">Will the member be created on the stack?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_13743357_13743395_1\">If so, what happens if <code>MySecondClass</code> is created via <code>new</code>? Will this member still be on the stack?</p>\n</blockquote>\n<p>No. It will be stored along with the rest of the object, \"on the heap\" or wherever your free store is implemented, or wherever the object gets dynamically allocated (which could be some memory pool or something else).</p>\n<p>It's worth noting here that the terms \"stack\" and \"heap\" are generally mis-used. What you're <em>really</em> asking is the following:</p>\n<p><strong>Does the member have <em>automatic storage duration</em>?</strong> Yes.</p>\n<p><strong>Will it do so even when the encapsulating object has <em>dynamic storage duration</em>?</strong> No \u2014 the <em>dynamicness</em> of the encapsulating object is, in a sense, \"inherited\".</p>\n<blockquote>\n<p id=\"so_13743357_13743395_2\"><code>[C++11: 3.7.5]:</code> The storage duration of member subobjects, base class subobjects and array elements is that of their complete object (1.8).</p>\n</blockquote>\n<p>The practical location in memory in either case will be the stack and the free store (\"heap\") respectively, and that doesn't really matter.</p>\n<p>And, by the way, <code>main</code> <em>must</em> have <code>int</code> return type.</p>\n", "Id": "13743395", "OwnerUserId": "560648", "LastEditDate": "2012-12-06T12:20:04.177", "ParentId": "13743357", "LastActivityDate": "2012-12-06T12:20:04.177", "PostTypeId": "2", "Score": "5", "LastEditorUserId": "560648"}});