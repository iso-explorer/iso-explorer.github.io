post_cb({"24935360": {"ParentId": "24934981", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The definition of placement new is in <code>N3797</code> in section <code>5.3.4.13</code>:</p>\n<blockquote>\n<p id=\"so_24934981_24935360_0\">The new-placement syntax is used to supply additional arguments to an\n  allocation function. If used, overload resolution is performed on a\n  function call created by assembling an argument list consisting of the\n  amount of space requested (the first argument) and the expressions in\n  the new-placement part of the new-expression (the second and\n  succeeding arguments). The first of these arguments has type\n  std::size_t and the remaining arguments have the corresponding types\n  of the expressions in the new-placement.</p>\n</blockquote>\n", "OwnerUserId": "2382136", "LastEditorUserId": "2617660", "LastEditDate": "2014-07-24T13:44:43.157", "Id": "24935360", "Score": "-1", "CreationDate": "2014-07-24T13:39:04.260", "LastActivityDate": "2014-07-24T13:44:43.157"}, "24934981": {"CommentCount": "12", "ViewCount": "120", "OwnerDisplayName": "user2953119", "CreationDate": "2014-07-24T13:23:20.343", "LastActivityDate": "2014-07-24T13:44:43.157", "Title": "Placement and non-placement allocators", "PostTypeId": "1", "Id": "24934981", "Score": "1", "Body": "<p>What are the placement and non-placement allocation/deallocation function? I've been reading <strong>sec. 3.7.4.2</strong> of N3797 and come across with the <strong>placement</strong> and <strong>non-placement</strong> <strong>allocation</strong>/<strong>deallocation</strong> function concepts. For instance:</p>\n<blockquote>\n<p id=\"so_24934981_24934981_0\">The global operator delete with exactly one parameter is a usual\n  (<strong>non-placement</strong>) deallocation function.</p>\n</blockquote>\n<p>I could not find a definition of these concepts and I assume that non-placement is the functions which have one of the following signature:</p>\n<pre><code>void* operator new(std::size_t);\nvoid* operator new[](std::size_t);\nvoid operator delete(void*);\nvoid operator delete[](void*);\nvoid operator delete(void*, std::size_t) noexcept;\nvoid operator delete[](void*, std::size_t) noexcept;\n</code></pre>\n<p>Have I understood correctly?</p>\n", "Tags": "<c++><language-lawyer><placement>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24934981_24935360_0": {"section_id": 6094, "quality": 0.9523809523809523, "length": 40}, "so_24934981_24934981_0": {"section_id": 7181, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_24934981_24935360_0": {"section_id": 5860, "quality": 0.9523809523809523, "length": 40}, "so_24934981_24934981_0": {"section_id": 6925, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_24934981_24934981_0": {"section_id": 8689, "quality": 0.6363636363636364, "length": 7}}}});