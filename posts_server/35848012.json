post_cb({"35848012": {"CommentCount": "15", "AcceptedAnswerId": "35848410", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2016-03-07T15:48:47.373", "LastActivityDate": "2016-03-07T16:49:47.487", "LastEditDate": "2016-03-07T16:27:31.543", "ViewCount": "367", "FavoriteCount": "3", "Title": "Can I write a function type that returns a function?", "Id": "35848012", "Score": "17", "Body": "<p>The following fails to compile on both gcc and clang</p>\n<pre><code>#include &lt;type_traits&gt;\n\nint foo();\n\nint main()\n{\n    using R = std::result_of_t&lt;decltype(foo)()&gt;; // error\n}\n</code></pre>\n<p>The error on both compilers deals with the illegality of declaring a function returning a function. But I'm not declaring such a function - I'm just trying to write its type - since that's what <code>result_of</code> expects. Is this really still ill-formed? </p>\n", "Tags": "<c++><language-lawyer><c++14><result-of>", "OwnerUserId": "2069064", "AnswerCount": "1"}, "35848410": {"ParentId": "35848012", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You're passing a <em>type-id</em>, which is defined in <a href=\"http://eel.is/c++draft/dcl.name\" rel=\"nofollow\">[dcl.name]</a> as </p>\n<blockquote>\n<p id=\"so_35848012_35848410_0\">[\u2026] syntactically a declaration for a variable or function of that type that omits the name of the entity. [\u2026] It is possible to identify uniquely the location in the <em>abstract-declarator</em> where the identifier would appear <strong>if the construction were a declarator in a declaration. The named type is then the same as the type of the\n  hypothetical identifier.</strong></p>\n</blockquote>\n<p>For the hypothetical identifier to have some type, the hypothetical declaration must be well-formed in the first place. But it isn't as per <a href=\"http://eel.is/c++draft/dcl.fct#10\" rel=\"nofollow\">[dcl.fct]/10</a>. Hence the program is ill-formed (and the compilers'  error messages are actually comprehensible). This case is also more directly covered by <a href=\"http://eel.is/c++draft/temp.deduct#8\" rel=\"nofollow\">[temp.deduct]/(8.10)</a>, implying that this is a (SFINAE-friendly) error.</p>\n<hr>\n<p>In fact, merely implying an invalid type's usage suffices to make the program ill-formed. E.g. creating the type pointer to function returning function is ill-formed:</p>\n<pre><code>using f = int();\nusing t = f(*)();\n</code></pre>\n<p>So is the following:</p>\n<pre><code>struct A {virtual void f() = 0;};\nusing t = A(*)();\n</code></pre>\n<p>(Clang shouldn't be accepting this. C.f. GCC bug <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=17232\" rel=\"nofollow\">17232</a>'s interesting discussion).</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-03-07T16:49:47.487", "Id": "35848410", "Score": "10", "CreationDate": "2016-03-07T16:04:54.270", "LastActivityDate": "2016-03-07T16:49:47.487"}, "bq_ids": {"n4140": {"so_35848012_35848410_0": {"section_id": 3199, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_35848012_35848410_0": {"section_id": 3073, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_35848012_35848410_0": {"section_id": 3960, "quality": 0.9655172413793104, "length": 28}}}});