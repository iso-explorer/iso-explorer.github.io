post_cb({"bq_ids": {"n4140": {"so_15297191_15297282_0": {"length": 30, "quality": 1.0, "section_id": 3329}}, "n3337": {"so_15297191_15297282_0": {"length": 30, "quality": 1.0, "section_id": 3199}}, "n4659": {"so_15297191_15297282_0": {"length": 30, "quality": 1.0, "section_id": 4095}}}, "15297191": {"ViewCount": "416", "Body": "<p><code>g++</code> with <code>-std=c++11</code> seems to accept it:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;initializer_list&gt;\n\nstd::vector&lt;float&gt; vf={1,2,3}; // Isn't this narrowing (i.e., an error)?\n\nint main() {}\n</code></pre>\n<p>It would seem that the line with the comment should error out, but it does not.</p>\n<p><strong>Update</strong></p>\n<p>Thanks to Jesse for pointing to the standardese (8.5.4 p7) that defines why this is OK. Here is some sample code that helps to clarify the behavior defined by the standard:</p>\n<pre><code>const int v5=5;\nint v6=6;\n\nvector&lt;double&gt; vd1={1,2,3,4};       // OK\nvector&lt;double&gt; vd2={1,2,3,4,v5};    // Still OK, v5 is const\nvector&lt;double&gt; vd3={1,2,3,4,v5,v6}; // Error, narrowing conversion, because v6 \n                                    // is non-const\nvector&lt;double&gt; vd4={1,2,3,4,v5,static_cast&lt;const int&gt;(v6)}; // Also errors on \n                                    // gcc 4.7.2, not sure why.\n</code></pre>\n<p>I hope that the examples I just presented will help others to get past some narrowing issues when using initializer lists.</p>\n<p>If anyone knows why the last case violates the standard definition, please post a comment.</p>\n", "AcceptedAnswerId": "15297282", "Title": "Why is there no narrowing conversion in this code, resulting in an error?", "CreationDate": "2013-03-08T15:14:21.107", "Id": "15297191", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-03-08T18:20:38.723", "LastEditorUserId": "473798", "LastActivityDate": "2013-06-01T03:26:28.457", "Score": "5", "OwnerUserId": "473798", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "15297282": {"Id": "15297282", "PostTypeId": "2", "Body": "<p>The rules are in 8.5.4 p7 which excludes your example</p>\n<blockquote>\n<p id=\"so_15297191_15297282_0\">from an integer type or unscoped enumeration type to a floating-point\n  type, <em>except where the source is a constant expression and the actual\n  value after conversion will fit into the target type and will produce\n  the original value when converted back to the original type</em>, or \u2026</p>\n</blockquote>\n<p><sup>(emphasis mine)</sup></p>\n", "LastEditorUserId": "732016", "LastActivityDate": "2013-06-01T03:26:28.457", "Score": "10", "CreationDate": "2013-03-08T15:18:51.010", "ParentId": "15297191", "CommentCount": "5", "OwnerUserId": "906773", "LastEditDate": "2013-06-01T03:26:28.457"}, "15297273": {"Id": "15297273", "PostTypeId": "2", "Body": "<p>I don't see why this should error out given that all three integers can be exactly represented as <code>float</code>.</p>\n<p>That said, I can get <code>g++</code> to give me a warning if I include a constant that doesn't fit in a <code>float</code>:</p>\n<pre><code>warning: narrowing conversion of '2112112112' from 'int' to 'float' inside { } [-Wnarrowing]\n</code></pre>\n", "LastActivityDate": "2013-03-08T15:18:09.713", "CommentCount": "0", "CreationDate": "2013-03-08T15:18:09.713", "ParentId": "15297191", "Score": "7", "OwnerUserId": "367273"}});