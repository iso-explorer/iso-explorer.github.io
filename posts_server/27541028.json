post_cb({"27541143": {"ParentId": "27541028", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-12-18T07:19:19.253", "Score": "5", "LastEditorUserId": "657267", "LastEditDate": "2014-12-19T07:25:53.360", "Id": "27541143", "OwnerUserId": "657267", "Body": "<p>Names either have linkage or they do not. Names with linkage can have either external or internal linkage.</p>\n<p>\"Linkage\" is how the standard refers to the visibility of a name within a translation unit (a \"translation unit\" is simply the contents of a source file after preprocessing):</p>\n<p>[basic.link]</p>\n<blockquote>\n<p id=\"so_27541028_27541143_0\">(2.1) \u2014 When a name has <em>external linkage</em> , the entity it denotes can be referred to by names from scopes of other translation units or from other scopes of the same translation unit.</p>\n<p id=\"so_27541028_27541143_1\">(2.2) \u2014 When a name has <em>internal linkage</em> , the entity it denotes can be referred to by names from other scopes in the same translation unit.</p>\n<p id=\"so_27541028_27541143_2\">(2.3) \u2014 When a name has <em>no linkage</em> , the entity it denotes cannot be referred to by names from other scopes</p>\n</blockquote>\n<p>The linkage of declarations has to match, you are trying to redeclare (and define) a variable previously declared with external linkage as a variable with no linkage.</p>\n<p>[dcl.stc]</p>\n<blockquote>\n<p id=\"so_27541028_27541143_3\">7 The linkages implied by successive declarations for a given entity shall agree. That is, within a given scope, each declaration declaring the same variable name or the same overloading of a function name shall imply the same linkage. [...]</p>\n</blockquote>\n<pre><code>int main()\n{\n  extern int i; // declare i with external linkage\n  int i;        // define  i with no linkage **ERROR**\n}\n</code></pre>\n<p>As the standard implies, if the declarations are in different scopes this isn't an issue as they refer to different names:</p>\n<pre><code>int main()\n{\n  extern int i; // declare i with external linkage\n  {\n    int i;      // define i with no linkage (shadows the previous declaration)\n  }\n}\n</code></pre>\n<p>This also works fine at global scope because variables and functions at (non-anonymous) namespace scope without an explicit <code>static</code> declaration have external linkage:</p>\n<pre><code>extern int i; // declare i with external linkage\nint i;        // define  i with external linkage\n\nextern int j; // declare j with external linkage\nstatic int j; // define  j with internal linkage **ERROR**\n\nstatic int k; // define  k with internal linkage\nextern int k; // declare k with internal linkage (!!)\n\nint main()\n{\n}\n</code></pre>\n<p>The example with <code>k</code> is a little counterintuitive: a name declared with <code>extern</code> will only have external linkage if no previous declarations of the same name exist in the same scope, otherwise the linkage will be unchanged. This isn't an error, unless the name was previously declared with no linkage, which is why you cannot redeclare local variables for instance.</p>\n<hr>\n<p>You can find a quick summary of the linkage rules on <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration\" rel=\"nofollow\">cppreference</a>.</p>\n</hr>", "LastActivityDate": "2014-12-19T07:25:53.360"}, "27558647": {"ParentId": "27541028", "CommentCount": "3", "CreationDate": "2014-12-19T01:44:35.530", "OwnerUserId": "2623102", "PostTypeId": "2", "Id": "27558647", "Score": "0", "Body": "<p>@user657267 has given a good answer, however, as your comment to his/her answer suggests, you are even more confused and you want a less technical answer. I will give it a try...</p>\n<pre><code>extern int i; says i is a 'global' variable defined somewhere else.\nint i; says i is a 'local' variable defined in side the function.\n</code></pre>\n<p>The first statement is a declaration and the second is a declaration as well as a definition. The former statement says that i lives in the world named global and the other says that the i lives in the world named local. Even though they are from different worlds and thus different entities, inside function main() i.e. in side the local world their same names create confusion and thus the compiler complains about multiple declaration.</p>\n<p>Imagine your school having two students with the same full name! One is from a different state/country. Wouldn't the principal complain about duplicate entries for the same person?</p>\n", "LastActivityDate": "2014-12-19T01:44:35.530"}, "bq_ids": {"n4140": {"so_27541028_27541143_0": {"section_id": 7135, "quality": 0.9444444444444444, "length": 17}, "so_27541028_27541143_3": {"section_id": 5397, "quality": 0.92, "length": 23}, "so_27541028_27541143_1": {"section_id": 7135, "quality": 0.9285714285714286, "length": 13}, "so_27541028_27541143_2": {"section_id": 7135, "quality": 1.0, "length": 10}}, "n3337": {"so_27541028_27541143_0": {"section_id": 6879, "quality": 0.9444444444444444, "length": 17}, "so_27541028_27541143_3": {"section_id": 5192, "quality": 0.92, "length": 23}, "so_27541028_27541143_1": {"section_id": 6879, "quality": 0.9285714285714286, "length": 13}, "so_27541028_27541143_2": {"section_id": 6879, "quality": 1.0, "length": 10}}, "n4659": {"so_27541028_27541143_0": {"section_id": 8636, "quality": 0.9444444444444444, "length": 17}, "so_27541028_27541143_2": {"section_id": 8636, "quality": 1.0, "length": 10}, "so_27541028_27541143_1": {"section_id": 8636, "quality": 0.9285714285714286, "length": 13}, "so_27541028_27541143_3": {"section_id": 6822, "quality": 0.92, "length": 23}}}, "27541028": {"CommentCount": "11", "AcceptedAnswerId": "27541143", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-12-18T07:11:43.320", "LastActivityDate": "2014-12-19T07:25:53.360", "LastEditDate": "2017-05-23T12:22:19.750", "ViewCount": "513", "FavoriteCount": "3", "Title": "Why does this give multiple definition error: extern int i; int i;", "Id": "27541028", "Score": "1", "Body": "<p>If there is multiple declarations possible and only one definition is allowed (<a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration\">ref</a>), then why does the code below give me an error as multiple declaration for <code>i</code> in Turbo C++ compiler?</p>\n<pre><code>int main()\n{\n    extern int i;\n    int i;\n    printf(\"The value of i is %d\",i);\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "4259922", "AnswerCount": "2"}});