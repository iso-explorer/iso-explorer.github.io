post_cb({"bq_ids": {"n4140": {"so_31769853_31769853_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 7056}, "so_31769853_31769853_0": {"length": 9, "quality": 0.9, "section_id": 5846}, "so_31769853_31769853_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 7114}, "so_31769853_31769853_2": {"length": 4, "quality": 1.0, "section_id": 7128}}, "n3337": {"so_31769853_31769853_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6800}, "so_31769853_31769853_0": {"length": 9, "quality": 0.9, "section_id": 5616}, "so_31769853_31769853_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 6858}, "so_31769853_31769853_2": {"length": 4, "quality": 1.0, "section_id": 6872}}, "n4659": {"so_31769853_31769853_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 8553}, "so_31769853_31769853_0": {"length": 9, "quality": 0.9, "section_id": 7325}, "so_31769853_31769853_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 8615}, "so_31769853_31769853_2": {"length": 4, "quality": 1.0, "section_id": 8629}}}, "31770521": {"Id": "31770521", "PostTypeId": "2", "Body": "<p>Since the following code compiles and runs correctly in other compilers, it is a bug in MSVC2015.</p>\n<pre><code>#include &lt;boost/type_index.hpp&gt;\n#include &lt;iostream&gt;\n\nstruct inj\n{\n    int g;\n};\n\ntypedef struct inj::inj inj2;\n\nint main()\n{\n\n    inj2 ii;\n    std::cout &lt;&lt; boost::typeindex::type_id_with_cvr&lt;decltype(ii)&gt;().pretty_name() &lt;&lt; '\\n';\n}\n</code></pre>\n<hr>\n<p>UPDATE: <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1618414\" rel=\"noreferrer\">Reported as bug</a>.</p>\n</hr>", "LastEditorUserId": "2549876", "LastActivityDate": "2015-08-02T09:41:29.823", "Score": "6", "CreationDate": "2015-08-02T09:34:09.347", "ParentId": "31769853", "CommentCount": "1", "OwnerUserId": "2549876", "LastEditDate": "2015-08-02T09:41:29.823"}, "31769853": {"ViewCount": "367", "Body": "<p>According to the standard [class]/2:</p>\n<blockquote>\n<p id=\"so_31769853_31769853_0\">\u2026 The class-name is also inserted into the scope of the class itself; this is known as the <em>injected-class-name</em>.\u2026</p>\n</blockquote>\n<p>Moreover, [basic.scope.pdecl]/9:</p>\n<blockquote>\n<p id=\"so_31769853_31769853_1\">The point of declaration for an <em>injected-class-name</em> (Clause 9) is immediately following the opening brace of the class definition.</p>\n</blockquote>\n<p>Finally, [basic.lookup.classref]/3 and its example:</p>\n<blockquote>\n<p id=\"so_31769853_31769853_2\">If the unqualified-id is ~ <em>type-name</em>, the <em>type-name</em> is looked up \u2026</p>\n</blockquote>\n<pre><code>struct A { };\nstruct B {\n    struct A { };\n    void f(::A* a);\n};\nvoid B::f(::A* a) {\n    a-&gt; ~ A(); // OK: lookup in *a finds the injected-class-name\n}\n</code></pre>\n<p>So far, we can gather:</p>\n<ol>\n<li>In the scope of a class A, there exists a name A.</li>\n<li>That name is declared at the opening of the definition brace of class A.</li>\n<li>That name names a type.</li>\n</ol>\n<p>If the above is correct, then <strong>why does the following code fails to compile</strong> (in MSVC2015):</p>\n<pre><code>struct inj\n{};\n\ntypedef struct inj::inj inj2;\n</code></pre>\n<p>The error message </p>\n<blockquote>\n<p id=\"so_31769853_31769853_3\">Error C2039   '{ctor}': is not a member of 'inj'</p>\n</blockquote>\n<p>seems to be at odds with the standard:</p>\n<blockquote>\n<p id=\"so_31769853_31769853_4\">Note: For example, the constructor is not an acceptable lookup result in an elaborated-type-specifier so the constructor would not be used in place\n  of the injected-class-name. \u2014end note</p>\n</blockquote>\n", "AcceptedAnswerId": "31770521", "Title": "C++ class name injection", "CreationDate": "2015-08-02T08:10:07.473", "Id": "31769853", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-08-02T09:41:29.823", "Score": "4", "OwnerUserId": "2549876", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}});