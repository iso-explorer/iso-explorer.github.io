post_cb({"11551881": {"Id": "11551881", "PostTypeId": "2", "Body": "<p><code>static_cast</code> can't throw exception since <code>static_cast</code> is not runtime cast, if some cannot be casted, code will not compiles. But if it compiles and cast is bad - result is undefined.</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2012-07-19T00:36:45.597", "Score": "6", "CreationDate": "2012-07-18T23:30:40.487", "ParentId": "11551853", "CommentCount": "3", "OwnerUserId": "1498580", "LastEditDate": "2012-07-19T00:36:45.597"}, "11552097": {"Id": "11552097", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11551853_11552097_0\">Is it safe to assume that <code>static_cast</code> will never throw an exception?</p>\n</blockquote>\n<p>No. For user-defined types, the constructor and/or conversion operator might throw an exception, resulting in well-defined behavior.</p>\n<p>Consider the output of this program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n  A(int) { throw 1; }\n};\n\nint main () {\n  int y = 7;\n  try {\n    static_cast&lt;A&gt;(y);\n  } catch(...) {\n    std::cout &lt;&lt; \"caught\\n\";\n  }\n}\n</code></pre>\n", "LastActivityDate": "2012-07-18T23:58:08.827", "CommentCount": "0", "CreationDate": "2012-07-18T23:58:08.827", "ParentId": "11551853", "Score": "9", "OwnerUserId": "8747"}, "bq_ids": {"n4140": {"so_11551853_11551924_1": {"length": 21, "quality": 0.8076923076923077, "section_id": 6036}}, "n3337": {"so_11551853_11551924_1": {"length": 21, "quality": 0.8076923076923077, "section_id": 5804}}, "n4659": {"so_11551853_11551924_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 7535}}}, "11551924": {"Id": "11551924", "PostTypeId": "2", "Body": "<p><em>For this particular type of cast (integral to enumeration type)</em>, an exception might be thrown.</p>\n<blockquote>\n<p id=\"so_11551853_11551924_0\"><strong>C++ standard 5.2.9 Static cast [expr.static.cast] paragraph 7</strong></p>\n<p id=\"so_11551853_11551924_1\">A value of integral or enumeration type can be explicitly converted to\n  an enumeration type. The value is unchanged if the original value is\n  within the range of the enumeration values (7.2). <strong>Otherwise, the\n  resulting enumeration value is unspecified / undefined (since C++17).</strong></p>\n</blockquote>\n<p>Note that since C++17 such conversion might in fact result in undefined behavior, <em>which may include throwing an exception.</em></p>\n<p>In other words, your particular usage of <code>static_cast</code> to get an enumerated value from an integer is fine until C++17 and always fine, if you make sure that the integer actually represents a valid enumerated value via some kind of input validation procedure.</p>\n<p>Sometimes the input validation procedure completely eliminates the need for a <code>static_cast</code>, like so:</p>\n<pre><code>animal GetAnimal(int y)\n{\n    switch(y)\n    {\n    case 1:\n        return CAT;\n    case 2:\n        return DOG;\n    default:\n        // Do something about the invalid parameter, like throw an exception,\n        // write to a log file, or assert() it.\n    }\n}\n</code></pre>\n<p>Do consider using something like the above structure, for it requires no casts and gives you the opportunity to handle boundary cases correctly.</p>\n", "LastEditorUserId": "7949231", "LastActivityDate": "2017-11-16T12:27:16.270", "Score": "13", "CreationDate": "2012-07-18T23:35:48.043", "ParentId": "11551853", "CommentCount": "0", "OwnerUserId": "308661", "LastEditDate": "2017-11-16T12:27:16.270"}, "11552196": {"Id": "11552196", "PostTypeId": "2", "Body": "<p>(This answer focuses exclusively on the <code>int</code> to <code>enum</code> conversion in your question.)</p>\n<blockquote>\n<p id=\"so_11551853_11552196_0\">For an int to Enum cast, an exception is not thrown even if it is invalid. Can I rely on this behavior? This following code works.</p>\n</blockquote>\n<pre><code>enum animal {   CAT = 1,   DOG = 2 };\nint y = 10; \nanimal x = static_cast&lt;animal&gt;(y); \n</code></pre>\n<p>Actually, enums are not restricted to the list of enumerations in their definition, and that's not just some strange quirk, but a deliberately utilised feature of enums - consider how enumeration values are often ORed together to pack them into a single value, or a 0 is passed when none of the enumerations apply.</p>\n<p>In C++03, it's not under explicit programmer control how big a backing integer will be used by the compiler, but the range is guaranteed to span 0 and the explicitly listed enumerations.</p>\n<p>So, it's not necessarily true that 10 is not a valid, storable value for an <code>animal</code>.  Even if the backing value were not big enough to store the integral value you're trying to convert to <code>animal</code>, a narrowing conversion may be applied - typically this will use however many of the least significant bits that the enum backing type can hold, discarding any additional high order bits, but for details check the Standard.</p>\n<p>In practice, most modern C++03 compilers on PC and server hardware default to using a (32 bit) <code>int</code> to back the enumeration, as that facilitates calling into C library functions where 32 bits is the norm.</p>\n<p>I would <em>never</em> expect a compiler to throw an exception when any value is shoehorned into an enum using <code>static_cast&lt;&gt;</code>.</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2012-07-19T05:38:02.917", "Score": "3", "CreationDate": "2012-07-19T00:11:03.600", "ParentId": "11551853", "CommentCount": "0", "OwnerUserId": "410767", "LastEditDate": "2012-07-19T05:38:02.917"}, "11551853": {"ViewCount": "7030", "Body": "<p>Is it safe to assume that static_cast will never throw an exception?</p>\n<p>For an int to Enum cast, an exception is not thrown even if it is invalid. Can I rely on this behavior? This following code works.</p>\n<pre><code>enum animal {\n  CAT = 1,\n  DOG = 2\n};\n\nint y = 10;\nanimal x = static_cast&lt;animal&gt;(y);\n</code></pre>\n", "AcceptedAnswerId": "11551924", "Title": "Can static_cast throw an exception in C++?", "CreationDate": "2012-07-18T23:28:21.827", "Id": "11551853", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-11-16T12:27:16.270", "Score": "10", "OwnerUserId": "172399", "Tags": "<c++><casting>", "AnswerCount": "4"}});