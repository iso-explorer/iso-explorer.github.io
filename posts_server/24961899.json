post_cb({"24962102": {"ParentId": "24961899", "CommentCount": "4", "Body": "<p>\u00a714.5.5.1/1</p>\n<blockquote>\n<p id=\"so_24961899_24962102_0\">When a class template is used in a context that requires an instantiation of the class, it is necessary to\n  determine whether the instantiation is to be generated using the primary template or one of the partial\n  specializations. This is done by matching the template arguments of the class template specialization with\n  the template argument lists of the partial specializations.</p>\n<p id=\"so_24961899_24962102_1\">\u2014 If exactly one matching specialization is found, the instantiation is generated from that specialization.</p>\n<p id=\"so_24961899_24962102_2\">\u2014 If more than one matching specialization is found, the partial order rules (14.5.5.2) are used to determine whether one of the specializations is more specialized than the others. If none of the specializations\n  is more specialized than all of the other matching specializations, then the use of the class template is\n  ambiguous and the program is ill-formed.</p>\n<p id=\"so_24961899_24962102_3\">\u2014 If no matches are found, the instantiation is generated from the primary template.</p>\n</blockquote>\n<p><em>Matching</em> occurs by a process similar to function template parameter deduction. \u00a714.5.5.1/2:</p>\n<blockquote>\n<p id=\"so_24961899_24962102_4\">A partial specialization matches a given actual template argument list if the template arguments of the\n  partial specialization can be deduced from the actual template argument list (14.8.2). ...</p>\n</blockquote>\n<p>For <code>std::remove_reference&lt;int&amp;&gt;</code> only the <code>T&amp;</code> partial specialization matches, so it is selected. For <code>std::remove_reference&lt;int&amp;&amp;&gt;</code> only the <code>T&amp;&amp;</code> partial specialization matches, so it is selected.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "24962102", "Score": "9", "CreationDate": "2014-07-25T18:18:09.643", "LastActivityDate": "2014-07-25T18:18:09.643"}, "24961899": {"CommentCount": "1", "ViewCount": "109", "CreationDate": "2014-07-25T18:03:45.260", "LastActivityDate": "2014-07-25T18:18:09.643", "Title": "Which rule in the C++11 Standard does describe the matching mentioned below?", "AcceptedAnswerId": "24962102", "PostTypeId": "1", "Id": "24961899", "Score": "0", "Body": "<p><code>std::remove_reference</code> uses the following implementations:</p>\n<pre><code>template&lt; class T &gt; struct remove_reference      {typedef T type;};\ntemplate&lt; class T &gt; struct remove_reference&lt;T&amp;&gt;  {typedef T type;};\ntemplate&lt; class T &gt; struct remove_reference&lt;T&amp;&amp;&gt; {typedef T type;};\n</code></pre>\n<p>Thus, if one does <code>std::remove_reference&lt;int&amp;&gt;</code> the type <code>int&amp;</code> will match the <code>T&amp;</code> specialization. If we use <code>std::remove_reference&lt;int&amp;&amp;&gt;</code> the type <code>int&amp;&amp;</code> matches the <code>T&amp;&amp;</code> specialization.</p>\n<p>I'd like to know which rule in the Standard describes this matching process.</p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "3694387", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24961899_24962102_1": {"section_id": 143, "quality": 1.0, "length": 8}, "so_24961899_24962102_2": {"section_id": 143, "quality": 0.9696969696969697, "length": 32}, "so_24961899_24962102_4": {"section_id": 144, "quality": 0.9473684210526315, "length": 18}, "so_24961899_24962102_3": {"section_id": 143, "quality": 1.0, "length": 6}, "so_24961899_24962102_0": {"section_id": 143, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_24961899_24962102_1": {"section_id": 137, "quality": 1.0, "length": 8}, "so_24961899_24962102_2": {"section_id": 137, "quality": 0.9696969696969697, "length": 32}, "so_24961899_24962102_4": {"section_id": 138, "quality": 0.9473684210526315, "length": 18}, "so_24961899_24962102_3": {"section_id": 137, "quality": 1.0, "length": 6}, "so_24961899_24962102_0": {"section_id": 137, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_24961899_24962102_1": {"section_id": 147, "quality": 1.0, "length": 8}, "so_24961899_24962102_2": {"section_id": 147, "quality": 0.9696969696969697, "length": 32}, "so_24961899_24962102_0": {"section_id": 147, "quality": 0.967741935483871, "length": 30}, "so_24961899_24962102_3": {"section_id": 147, "quality": 1.0, "length": 6}, "so_24961899_24962102_4": {"section_id": 148, "quality": 0.9473684210526315, "length": 18}}}});