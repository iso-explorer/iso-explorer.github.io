post_cb({"25877494": {"ParentId": "25877436", "CommentCount": "0", "Body": "<p>\u00a723.6.4 [priority.queue]/p1:</p>\n<blockquote>\n<p id=\"so_25877436_25877494_0\">Any sequence container with random access iterator and supporting\n  operations <code>front()</code>, <code>push_back()</code> and <code>pop_back()</code> can be used to\n  instantiate <code>priority_queue</code>.</p>\n</blockquote>\n<p><code>std::list</code> doesn't have random access iterators.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "25877494", "Score": "5", "CreationDate": "2014-09-16T20:04:35.123", "LastActivityDate": "2014-09-16T20:04:35.123"}, "bq_ids": {"n4140": {"so_25877436_25877494_0": {"section_id": 1113, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_25877436_25877494_0": {"section_id": 1110, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_25877436_25877494_0": {"section_id": 1204, "quality": 0.9285714285714286, "length": 13}}}, "25877436": {"CommentCount": "2", "ViewCount": "278", "CreationDate": "2014-09-16T20:01:00.023", "LastActivityDate": "2014-09-16T20:04:35.123", "Title": "priority que with a list container", "PostTypeId": "1", "Id": "25877436", "Score": "0", "Body": "<p>I'm trying to use a list as the underlying container for a priority queue that is holding datanode objects. It seems to work fine using a vector or deque, but i try to use a list as the underlying container and i try to push something onto the queue i get the error :</p>\n<p>Error   3   error C2784: 'unknown-type std::operator -(std::move_iterator&lt;_RanIt&gt; &amp;,const std::move_iterator&lt;_RanIt2&gt; &amp;)' : could not deduce template argument for 'std::move_iterator&lt;_RanIt&gt; &amp;' from 'std::_List_unchecked_iterator&gt;&gt;'</p>\n<pre><code>struct datanode{\n    int depth;\n    int cost;\n    const int SIZE = 10;\n    int ident[9];   \n    int parent;\n    datanode(int dep, int id[9], int);\n    datanode(int dep, int id[9], int, int);\n    datanode(const datanode&amp;);\n    datanode(); \n    datanode&amp; datanode::operator=(const datanode&amp;);\n};\n\nclass NodeComparison\n{\n  public:\n    bool operator() (datanode&amp; da, datanode&amp; db)\n    {\n        return da.cost &gt; db.cost;\n    }\n};\n\nint main(){\n    std::priority_queue&lt;datanode,list&lt;datanode&gt;, NodeComparison&gt; PQueue;\n    int a[10] = {1,2,3,4,5,6,7,8,9,10};\n    datanode d(0,a,0);\n    PQueue.push(d);\n }\n</code></pre>\n", "Tags": "<c++><list><priority-queue>", "OwnerUserId": "3233447", "AnswerCount": "1"}});