post_cb({"25598419": {"ParentId": "25598299", "CommentCount": "2", "Body": "<p>The function is a user defined conversion operator. More details can be found at <a href=\"http://en.cppreference.com/w/cpp/language/cast_operator\">http://en.cppreference.com/w/cpp/language/cast_operator</a>.</p>\n<p>You said,</p>\n<blockquote>\n<p id=\"so_25598299_25598419_0\">this operator don't have a return value. seconds,</p>\n</blockquote>\n<p>The return values of the user define conversion operators is the explicit type. In your case, the return type is <code>unsigned short</code>.</p>\n<p>You asked:</p>\n<blockquote>\n<p id=\"so_25598299_25598419_1\">What is a better way to call this?</p>\n</blockquote>\n<p>You could do an explicit cast to invoke the function.</p>\n<pre><code>Number n;\nunsigned short s = (unsigned short)v;\n</code></pre>\n<p>It is also called when an conversion is required by the compiler.</p>\n<pre><code>void foo(unsigned short s) {}\n\nNumber n;\nfoo(n);  // Number::operator unsigned short() is called to cast\n         // n to an unsigned short.\n</code></pre>\n<p>You asked:</p>\n<blockquote>\n<p id=\"so_25598299_25598419_2\">if I call : <code>unsigned short b = a;</code> does the operator will get called? is there any c++ standard to say about this?</p>\n</blockquote>\n<p>Yes. The user defined operator function gets called.</p>\n<p>Here's the relevant sections from the C++ Draft Standard (N3337):</p>\n<blockquote>\n<p id=\"so_25598299_25598419_3\"><strong>12.3.2 Conversion functions</strong></p>\n<p id=\"so_25598299_25598419_4\">1 A member function of a class <code>X</code> having no parameters with a name of the form</p>\n<p id=\"so_25598299_25598419_5\">...</p>\n<p id=\"so_25598299_25598419_6\">[ <em>Example:</em></p>\n<pre><code>struct X {\n    operator int();\n  };\n\nvoid f(X a) {\n    int i = int(a);\n    i = (int)a;\n    i = a;\n  }\n</code></pre>\n<p id=\"so_25598299_25598419_7\">In all three cases the value assigned will be converted by X::operator int(). \u2014 <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "25598419", "Score": "5", "CreationDate": "2014-09-01T03:18:49.167", "LastActivityDate": "2014-09-01T03:18:49.167"}, "25598299": {"CommentCount": "4", "AcceptedAnswerId": "25598419", "CreationDate": "2014-09-01T02:59:56.440", "LastActivityDate": "2014-09-01T03:25:25.323", "PostTypeId": "1", "ViewCount": "833", "FavoriteCount": "1", "Title": "strange c++ operator (operator unsigned short())", "Id": "25598299", "Score": "1", "Body": "<p>I run into a strange c++ operator.  </p>\n<p><a href=\"http://www.terralib.org/html/v410/classoracle_1_1occi_1_1_number.html#a0f2780081f0097af7530fe57a100b00d\" rel=\"nofollow\">http://www.terralib.org/html/v410/classoracle_1_1occi_1_1_number.html#a0f2780081f0097af7530fe57a100b00d</a></p>\n<pre><code>class Number \uff5b\n.. \n    operator unsigned short () const;\n\n\n\n};\n</code></pre>\n<p>I called this operator as:\na Number(..);\nunsigned short b = a.operator unsigned short();</p>\n<p>this works, but I can't understand how it works.</p>\n<p>first,  this operator don't have a return value. \nseconds,  a.operator unsigned short() is really strange to me. What is a better way to call this?</p>\n<p>if I call :\nunsigned short b = a;  does the operator will get called?  is there any c++ standard to say about this?</p>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "1903880", "AnswerCount": "3"}, "25598328": {"ParentId": "25598299", "CommentCount": "0", "Body": "<p>This is the conversion operator. A conversion function typically has the general form</p>\n<pre><code>operator type() const;\n</code></pre>\n<p>where <code>type</code> represents a type. It means objects of type <code>Number</code> can be converted to <code>short int</code>.</p>\n<p>The conversion operator have no explicitly stated return type and no parameters, because the return type is exactly the <code>type</code> in the signature.</p>\n", "OwnerUserId": "1009479", "PostTypeId": "2", "Id": "25598328", "Score": "1", "CreationDate": "2014-09-01T03:03:54.823", "LastActivityDate": "2014-09-01T03:03:54.823"}, "25598455": {"ParentId": "25598299", "CommentCount": "0", "Body": "<p>It's a conversion function, called to convert your type into a specific other type under various conditions, and it's covered in ISO C++11 <code>12.3.2 Conversion functions</code>.</p>\n<p>In your case, it's called when the <code>Number</code> instance needs to be converted into an <code>unsigned short</code>.</p>\n<p>By providing conversion operators, you can take full control over what happens during the conversion process, including such evil as the following:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X {\n    int val;\n    X(int v) { val = v; };\n    operator int() { return val + 1; }; // pure evil\n    friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, X&amp;);\n};\n\nstd::ostream&amp; operator&lt;&lt; (std::ostream &amp;out, X &amp;x) {\n    out &lt;&lt; x.val;\n    return out;\n}\n\nint main (void) {\n    X xyzzy (42);;\n    std::cout &lt;&lt; xyzzy &lt;&lt; '\\n';\n    std::cout &lt;&lt; (int)xyzzy &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n<p>which will output the value when you use the instance directly, but output something totally different when you cast it.</p>\n<p>Now granted, that's rather evil and not a really good use case but you can use this for things such as rounding floats rather than truncating them, when converting to an integer:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X {\n    double val;\n    X(double v) { val = v; };\n    operator int() { return (int)(val + 0.5); };\n    friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, X&amp;);\n};\n\nstd::ostream&amp; operator&lt;&lt; (std::ostream &amp;out, X &amp;x) {\n    out &lt;&lt; x.val;\n    return out;\n}\n\n#define E 2.718281828456\nint main (void) {\n    X xyzzy (E);\n    double plugh = E;\n\n    std::cout &lt;&lt; plugh &lt;&lt; \" -&gt; \" &lt;&lt; (int)plugh &lt;&lt; '\\n';\n    std::cout &lt;&lt; xyzzy &lt;&lt; \" -&gt; \" &lt;&lt; (int)xyzzy &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre>\n<p>The output of that code is:</p>\n<pre><code>2.71828 -&gt; 2\n2.71828 -&gt; 3\n</code></pre>\n", "OwnerUserId": "14860", "PostTypeId": "2", "Id": "25598455", "Score": "0", "CreationDate": "2014-09-01T03:25:25.323", "LastActivityDate": "2014-09-01T03:25:25.323"}, "bq_ids": {"n4140": {"so_25598299_25598419_0": {"section_id": 5991, "quality": 0.6666666666666666, "length": 4}, "so_25598299_25598419_4": {"section_id": 391, "quality": 1.0, "length": 7}, "so_25598299_25598419_7": {"section_id": 391, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_25598299_25598419_0": {"section_id": 5759, "quality": 0.6666666666666666, "length": 4}, "so_25598299_25598419_4": {"section_id": 382, "quality": 1.0, "length": 7}, "so_25598299_25598419_7": {"section_id": 382, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_25598299_25598419_7": {"section_id": 408, "quality": 0.8181818181818182, "length": 9}, "so_25598299_25598419_4": {"section_id": 408, "quality": 1.0, "length": 7}}}});