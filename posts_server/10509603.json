post_cb({"bq_ids": {"n4140": {"so_10509603_10509736_6": {"length": 10, "quality": 0.9090909090909091, "section_id": 3325}, "so_10509603_10509736_2": {"length": 25, "quality": 1.0, "section_id": 3325}, "so_10509603_10509736_1": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_10509603_10509736_3": {"length": 21, "quality": 0.84, "section_id": 3325}, "so_10509603_10509736_5": {"length": 6, "quality": 0.5454545454545454, "section_id": 3320}, "so_10509603_10509736_7": {"length": 17, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_10509603_10509736_6": {"length": 11, "quality": 1.0, "section_id": 3195}, "so_10509603_10509736_2": {"length": 19, "quality": 0.76, "section_id": 3195}, "so_10509603_10509736_1": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_10509603_10509736_3": {"length": 22, "quality": 0.88, "section_id": 3195}, "so_10509603_10509736_5": {"length": 6, "quality": 0.5454545454545454, "section_id": 3190}, "so_10509603_10509736_7": {"length": 17, "quality": 1.0, "section_id": 3195}}, "n4659": {"so_10509603_10509736_6": {"length": 7, "quality": 0.6363636363636364, "section_id": 4087}, "so_10509603_10509736_2": {"length": 25, "quality": 1.0, "section_id": 4091}, "so_10509603_10509736_1": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_10509603_10509736_3": {"length": 18, "quality": 0.72, "section_id": 4091}, "so_10509603_10509736_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 4086}, "so_10509603_10509736_7": {"length": 17, "quality": 1.0, "section_id": 4091}}}, "10509603": {"ViewCount": "3943", "Body": "<p>That is, why does this:</p>\n<pre><code>struct S {};\n\nstruct T\n{\n    T(S&amp; s) : s{s} {}\n\n    S&amp; s;\n};\n\nint main()\n{\n    S s;\n    T t{s};\n}\n</code></pre>\n<p>give me a compiler error with GCC 4.7:</p>\n<pre><code>test.cpp: In constructor 'T::T(S&amp;)':\ntest.cpp:5:18: error: invalid initialization of non-const reference of type 'S&amp;' from an rvalue of type '&lt;brace-enclosed initializer list&gt;'\n</code></pre>\n<p>?</p>\n<p>To fix the error, I have to change the <code>s{s}</code> to <code>s(s)</code>. Doesn't this break the, erm, <em>uniformity</em> of uniform initialization?</p>\n<p><strong>EDIT</strong>: I tried with clang, and clang accepts it, so perhaps it's a GCC bug?</p>\n", "AcceptedAnswerId": "10509813", "Title": "Why can't I initialize a reference in an initializer list with uniform initialization?", "CreationDate": "2012-05-09T03:54:10.567", "Id": "10509603", "CommentCount": "7", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-05-09T04:01:25.467", "LastEditorUserId": "141719", "LastActivityDate": "2014-11-11T21:08:25.620", "Score": "29", "OwnerUserId": "141719", "Tags": "<c++><reference><c++11><initializer-list><uniform-initialization>", "AnswerCount": "3"}, "10509736": {"Id": "10509736", "PostTypeId": "2", "Body": "<p>I believe that to be an error in the compiler. The two paragraphs that deal with reference initialization through <em>list-initialization</em> are (in n3337):</p>\n<blockquote>\n<p id=\"so_10509603_10509736_0\">\u00a78.5.4/3</p>\n<p id=\"so_10509603_10509736_1\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li><p id=\"so_10509603_10509736_2\">Otherwise, if the initializer list has a single element of type E and either T is not a reference type or its referenced type is reference-related to E, the object or reference is initialized from that element; if a narrowing conversion (see below) is required to convert the element to T, the program is ill-formed.</p></li>\n<li><p id=\"so_10509603_10509736_3\">Otherwise, if T is a reference type, a prvalue temporary of the type referenced by T is list-initialized, and the reference is bound to that temporary. [ Note: As usual, the binding will fail and the program is ill-formed if the reference type is an lvalue reference to a non-const type. \u2014 end note ]</p></li>\n</ul>\n</blockquote>\n<p>The compiler seems to be applying the last paragraph, when it should be applying the first, as <em>reference-related</em> is defined as</p>\n<blockquote>\n<p id=\"so_10509603_10509736_4\">8.5.3/4</p>\n<p id=\"so_10509603_10509736_5\">Given types \u201ccv1 T1\u201d and \u201ccv2 T2,\u201d \u201ccv1 T1\u201d is reference-related to \u201ccv2 T2\u201d if T1 is the same type as T2, or T1 is a base class of T2.</p>\n</blockquote>\n<p>In the case of the question, the types of the reference and the initializer inside the brace-initialization-list are exactly the same, which means that the initialization should be valid.</p>\n<hr>\n<p>In the FDIS draft, the equivalent paragraphs had the order reversed. The implication is that the FDIS draft (n3290) did not allow for <em>brace-list-initialization</em> of *lvalue*s. On the other hand, reading the text it seems obvious that it is a <em>bug</em> in the standard and that the intention was having the order of n3337:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_10509603_10509736_6\">Otherwise, if T is a reference type, a prvalue temporary of the type referenced by T is list-initialized, and the reference is bound to that temporary.</p></li>\n<li><p id=\"so_10509603_10509736_7\">Otherwise, if the initializer list has a single element, the object or <strong>reference</strong> is initialized from that element; if a narrowing conversion (see below) is required to convert the element to T, the program is ill-formed.</p></li>\n</ul>\n</blockquote>\n<p>The order in that document means that because all reference types are handled by the first clause, mentioning <strong>reference</strong> in the following paragraph would make no sense.</p>\n</hr>", "LastEditorUserId": "36565", "LastActivityDate": "2012-05-09T16:23:58.017", "Score": "8", "CreationDate": "2012-05-09T04:13:20.620", "ParentId": "10509603", "CommentCount": "0", "OwnerUserId": "36565", "LastEditDate": "2012-05-09T16:23:58.017"}, "26858431": {"Id": "26858431", "PostTypeId": "2", "Body": "<p>(Note: I'm writing this answer with the benefit of 2 years of hindsight since the original question; and to put some of the information from comments into an actual answer so that it is searchable).</p>\n<hr>\n<p>Of course, initializing a reference of type <code>S&amp;</code> with a reference also of type <code>S&amp;</code> is supposed to bind directly.  </p>\n<p>The problem is a defect <em>in the C++11 standard</em> and was addressed by <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1288\" rel=\"nofollow\">DR1288</a>.  The corrected text appears in C++14.  </p>\n<p>The Committee has clarified that the corrected text is what was intended for C++11, and so a \"conforming compiler\" should implement the corrected version.</p>\n<p>g++ 4.8 followed the published text of the C++11 standard; however once this issue came to light, g++ 4.9 implemented the corrected version, even with <code>-std=c++11</code> switch.  </p>\n<p>Note that the problem is not confined to constructor initializer lists either, e.g.: <code>S s; S &amp;t{s};</code> doesn't work in g++ 4.8, nor does <code>S s; S &amp;t = s; S &amp;u { t };</code></p>\n</hr>", "LastEditorUserId": "1505939", "LastActivityDate": "2014-11-11T21:08:25.620", "Score": "4", "CreationDate": "2014-11-11T05:51:15.313", "ParentId": "10509603", "CommentCount": "0", "OwnerUserId": "1505939", "LastEditDate": "2014-11-11T21:08:25.620"}, "10509813": {"Id": "10509813", "PostTypeId": "2", "Body": "<p>Yes, its a <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=50025\" rel=\"nofollow noreferrer\">bug</a>. This is something new and was voted in the working paper in February 2012 (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1288\" rel=\"nofollow noreferrer\">link</a>).</p>\n<p><a href=\"https://stackoverflow.com/questions/10509603/why-cant-i-initialize-a-reference-in-an-initializer-list-with-uniform-initializ/10509813#comment13589039_10509813\">Nicol Bolas</a> makes a good point in that gcc is actually the conforming compiler according to the FDIS approved C++11 standard because the changes to the working paper were made after that.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-05-09T04:57:15.613", "Score": "21", "CreationDate": "2012-05-09T04:22:52.947", "ParentId": "10509603", "CommentCount": "7", "OwnerUserId": "906773", "LastEditDate": "2017-05-23T10:29:47.480"}});