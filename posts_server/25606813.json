post_cb({"bq_ids": {"n4140": {"so_25606813_25606813_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 467}, "so_25606813_25606873_0": {"length": 7, "quality": 1.0, "section_id": 472}}, "n3337": {"so_25606813_25606813_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 458}, "so_25606813_25606873_0": {"length": 7, "quality": 1.0, "section_id": 463}}, "n4659": {"so_25606813_25606813_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 490}, "so_25606813_25606873_0": {"length": 7, "quality": 1.0, "section_id": 495}}}, "25606875": {"Id": "25606875", "PostTypeId": "2", "Body": "<p>field <code>'x'</code> is of const-qualified type of <code>const double</code>, the default assignment operator will be meaningless and is implicitly  <em>deleted</em> here</p>\n", "LastActivityDate": "2014-09-01T13:24:28.497", "CommentCount": "0", "CreationDate": "2014-09-01T13:24:28.497", "ParentId": "25606813", "Score": "4", "OwnerUserId": "1870232"}, "25606813": {"ViewCount": "5013", "Body": "<p>Following code gives a compilation error (at least when using MS VS 2008) for line \"e=f\" in main():</p>\n<blockquote>\n<p id=\"so_25606813_25606813_0\">error C2582: 'operator =' function is unavailable in 'B'</p>\n</blockquote>\n<pre><code>class A {\npublic:\n    A() { }\n    static const double x;\n};\nconst double A::x = 0.0;\n\nclass B {\npublic:\n    B() : x(0.0) { }\n    const double x;\n};\n\nint main( int argc, char *argv[] )\n{\n    A c,d;\n    B e,f;\n\n    c = d;\n    e = f;\n\n    return 0;\n}\n</code></pre>\n<p>The default assignment operator should be generated for both classes, A and B !?</p>\n<blockquote>\n<p id=\"so_25606813_25606813_1\">in 12.8.10: \"If the class definition does not explicitly declare a\n  copy assignment operator, one is declared implicitly.\"</p>\n</blockquote>\n", "AcceptedAnswerId": "25606873", "Title": "error C2582: 'operator =' function is unavailable in 'B'", "CreationDate": "2014-09-01T13:19:54.407", "Id": "25606813", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-09-01T13:39:59.267", "Score": "4", "OwnerUserId": "3290848", "Tags": "<c++><compiler-errors>", "AnswerCount": "3"}, "25606873": {"Id": "25606873", "PostTypeId": "2", "Body": "<p>The implicitly generated operator would recursively assign each non-static member. However, <code>x</code> is <code>const</code>, so it can't be assigned to. This prevents the implicit operator from being generated (specifically, it causes it to be defined as deleted).</p>\n<p>This is specified in C++11 12.8/23:</p>\n<blockquote>\n<p id=\"so_25606813_25606873_0\">A defaulted copy/move assignment operator for class X is defined as deleted if X has:</p>\n<ul>\n<li>...</li>\n<li>a non-static data member of const non-class type (or array thereof), or</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>(Although I just noticed that your compiler predates C++11; the rules are similar, but specified in different language, in older dialects with no concept of \"deleted\" functions).</p>\n<p>If you want an assignment operator for a class whose members (or base classes) can't be reassigned, you'll have to define it yourself.</p>\n<p>In <code>class A</code>, the constant member is static, so doesn't form part of an object. Therefore, it doesn't prevent an (empty) object from being assigned to.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2014-09-01T13:39:59.267", "Score": "13", "CreationDate": "2014-09-01T13:24:11.867", "ParentId": "25606813", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2014-09-01T13:39:59.267"}, "25606814": {"Id": "25606814", "PostTypeId": "2", "Body": "<p>The obvious difference between class A and B is const member x beeing static vs. non-static.\nAssignment to a const variable is/should be impossible in any case.</p>\n<p>The compiler obviously tries to generate the default assignment operator method for class B and silently decides to not generating one, as member x does not allow assignment.</p>\n<p>Took me quite a long time to find out this ...</p>\n<p>BTW: If you omit the initialization of x in class B , compiler is smart enough to find out this mistake.</p>\n", "LastActivityDate": "2014-09-01T13:19:54.407", "CommentCount": "1", "CreationDate": "2014-09-01T13:19:54.407", "ParentId": "25606813", "Score": "2", "OwnerUserId": "3290848"}});