post_cb({"32214536": {"ParentId": "24526475", "CommentCount": "1", "Body": "<p>C++ doesn't have an access control specifier for member functions that can only be called from a derived class, but a constructor for an abstract class can only be called from a derived class by definition of an abstract class.</p>\n<p>The compiler cannot know in advance exactly which classes are instantiated (this is a runtime property), and it cannot know which constructors are potentially called before link-time.</p>\n<p>The standard text (emphasis mine):</p>\n<blockquote>\n<p id=\"so_24526475_32214536_0\">All sub-objects representing virtual base classes are initialized by\n  the constructor of the most derived class (1.8 [intro.object]). If the\n  constructor of the most derived class does not specify a\n  mem-initializer for a virtual base class V, then V's default\n  constructor is called to initialize the virtual base class subobject.\n  If V does not have an accessible default constructor, the\n  initialization is ill-formed. A mem-initializer naming a virtual base\n  class shall be <strong>ignored during execution</strong> of the constructor of any\n  class that is not the most derived class.</p>\n</blockquote>\n<p>1) <strong>It makes no exception for abstract classes</strong> and can only be interpreted as saying that all constructors should do a (sometimes fake) attempt at calling virtual base constructors.</p>\n<p>2) It says that at <strong>runtime</strong> such attempts are ignored.</p>\n<p>Some committee members have stated a different opinion in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#257\" rel=\"nofollow\">DR 257</a>:</p>\n<blockquote>\n<ol start=\"257\">\n<li>Abstract base constructors and virtual base initialization</li>\n</ol>\n<p id=\"so_24526475_32214536_1\">Section: 12.6.2  [class.base.init]     Status: CD2     Submitter: Mike\n  Miller     Date: 1 Nov 2000 [Voted into WP at October, 2009 meeting.]</p>\n<p id=\"so_24526475_32214536_2\">Must a constructor for an abstract base class provide a\n  mem-initializer for each virtual base class from which it is directly\n  or indirectly derived? Since the initialization of virtual base\n  classes is performed by the most-derived class, and since an abstract\n  base class can never be the most-derived class, there would seem to be\n  no reason to require constructors for abstract base classes to\n  initialize virtual base classes.</p>\n<p id=\"so_24526475_32214536_3\">It is not clear from the Standard whether there actually is such a\n  requirement or not. The relevant text is found in 12.6.2\n  [class.base.init] paragraph 6:</p>\n</blockquote>\n<p>(...quoted above)</p>\n<blockquote>\n<p id=\"so_24526475_32214536_4\">This paragraph requires only that the most-derived class's constructor\n  have a mem-initializer for virtual base classes. Should the silence be\n  construed as permission for constructors of classes that are not the\n  most-derived to omit such mem-initializers?</p>\n</blockquote>\n<p>There is no \"silence\". The general rule applies as <em>there is no specific rule for abstract classes</em>.</p>\n<blockquote>\n<p id=\"so_24526475_32214536_5\">Christopher Lester, on comp.std.c++, March 19, 2004: If any of you\n  reading this posting happen to be members of the above working group,\n  I would like to encourage you to review the suggestion contained\n  therein, as it seems to me that the final tenor of the submission is\n  both (a) correct (the silence of the standard DOES mandate the\n  omission) and (b) describes what most users would intuitively expect\n  and desire from the C++ language as well.</p>\n<p id=\"so_24526475_32214536_6\">The suggestion is to make it clearer that constructors for abstract\n  base classes should not be required to provide initialisers for any\n  virtual base classes they contain (as only the most-derived class has\n  the job of initialising virtual base classes, and an abstract base\n  class cannot possibly be a most-derived class).</p>\n</blockquote>\n<p>The suggestion cannot make \"clearer\" something that doesn't exist now.</p>\n<p>Some committee members are taken their desire for reality and it is very wrong.</p>\n<p>(snip example and discussion similar to OP's code)</p>\n<blockquote>\n<p id=\"so_24526475_32214536_7\"><strong>Proposed resolution (July, 2009):</strong></p>\n<p id=\"so_24526475_32214536_8\">Add the indicated text (moved from paragraph 11) to the end of 12.6.2\n  [class.base.init] paragraph 7:</p>\n<p id=\"so_24526475_32214536_9\">...The initialization of each base and member constitutes a\n  full-expression. Any expression in a mem-initializer is evaluated as\n  part of the full-expression that performs the initialization. A\n  mem-initializer where the mem-initializer-id names a virtual base\n  class is ignored during execution of a constructor of any class that\n  is not the most derived class.</p>\n<p id=\"so_24526475_32214536_10\">Change 12.6.2 [class.base.init]\n  paragraph 8 as follows:</p>\n<p id=\"so_24526475_32214536_11\">If a given non-static data member or base class is not named by a\n  mem-initializer-id (including the case where there is no\n  mem-initializer-list because the constructor has no ctor-initializer)\n  and <strong>the entity is not a virtual base class of an abstract class</strong> (10.4\n  [class.abstract]), then</p>\n<p id=\"so_24526475_32214536_12\">if the entity is a non-static data member that has a\n  brace-or-equal-initializer, the entity is initialized as specified in\n  8.5 [dcl.init];</p>\n<p id=\"so_24526475_32214536_13\">otherwise, if the entity is a variant member (9.5 [class.union]), no\n  initialization is performed;</p>\n<p id=\"so_24526475_32214536_14\">otherwise, the entity is default-initialized (8.5 [dcl.init]).</p>\n<p id=\"so_24526475_32214536_15\">[Note: An abstract class (10.4 [class.abstract]) is never a most\n  derived class, thus its constructors never initialize virtual base\n  classes, therefore the corresponding mem-initializers may be omitted.\n  \u2014end note] After the call to a constructor for class X has\n  completed...</p>\n<p id=\"so_24526475_32214536_16\">Change 12.6.2 [class.base.init] paragraph 10 as follows:</p>\n<p id=\"so_24526475_32214536_17\">Initialization shall proceed proceeds in the following order:</p>\n<p id=\"so_24526475_32214536_18\">First, and only for the constructor of the most derived class as\n  described below (1.8 [intro.object]), virtual base classes shall be\n  are initialized in the order they appear on a depth-first\n  left-to-right traversal of the directed acyclic graph of base classes,\n  where \u201cleft-to-right\u201d is the order of appearance of the base class\n  names in the derived class base-specifier-list.</p>\n<p id=\"so_24526475_32214536_19\">Then, direct base classes shall be are initialized in declaration\n  order as they appear in the base-specifier-list (regardless of the\n  order of the mem-initializers).</p>\n<p id=\"so_24526475_32214536_20\">Then, non-static data members shall be are initialized in the order\n  they were declared in the class definition (again regardless of the\n  order of the mem-initializers).</p>\n<p id=\"so_24526475_32214536_21\">Finally, the compound-statement of the constructor body is executed.</p>\n<p id=\"so_24526475_32214536_22\">[Note: the declaration order is mandated to ensure that base and\n  member subobjects are destroyed in the reverse order of\n  initialization. \u2014end note]</p>\n<p id=\"so_24526475_32214536_23\">Remove all normative text in 12.6.2 [class.base.init] paragraph 11,\n  keeping the example:</p>\n<p id=\"so_24526475_32214536_24\">All subobjects representing virtual base classes are initialized by\n  the constructor of the most derived class (1.8 [intro.object]). If the\n  constructor of the most derived class does not specify a\n  mem-initializer for a virtual base class V, then V's default\n  constructor is called to initialize the virtual base class subobject.\n  If V does not have an accessible default constructor, the\n  initialization is ill-formed. A mem-initializer naming a virtual base\n  class shall be ignored during execution of the constructor of any\n  class that is not the most derived class. [Example:...</p>\n</blockquote>\n<p>The DR is marked \"CD2\": the committee agrees this was an issue and the language definition is changed to fix this issue.</p>\n", "OwnerUserId": "963864", "PostTypeId": "2", "Id": "32214536", "Score": "2", "CreationDate": "2015-08-25T21:37:51.537", "LastActivityDate": "2015-08-25T21:37:51.537"}, "24526475": {"CommentCount": "12", "ViewCount": "428", "PostTypeId": "1", "LastEditorUserId": "963864", "LastActivityDate": "2015-08-27T07:42:11.137", "Body": "<p>I face the well known \"dreaded\" diamond situation :</p>\n<pre><code>  A\n / \\\nB1 B2\n \\ /\n  C\n  |\n  D\n</code></pre>\n<p>The class <code>A</code> has, say the constructor <code>A::A(int i)</code>. I also want to forbid a default instantiation of a <code>A</code> so I declare the default constructor of <code>A</code> as <code>private</code>.</p>\n<p>The classes <code>B1</code> and <code>B2</code> are virtually derived from <code>A</code> and have some constructors and a <code>protected</code> default constructor.</p>\n<p>[edit]\nThe constructors of <code>B1</code> and <code>B2</code> don't call the default constructor of <code>A</code>.\n[reedit]\nThe default constructors of <code>B1</code> and <code>B2</code> don't call the default constructor of <code>A</code> either.\n[reedit]\n[edit]</p>\n<p>The class <code>C</code> is an abstract class and has some constructors that don't call any of the <code>A</code>, <code>B1</code> or <code>B2</code> constructors. </p>\n<p>In the class <code>D</code>, I call the constructor <code>A::A(i)</code> and some constructor of <code>C</code>.</p>\n<p>So as expected, when <code>D</code> is created, it first creates a <code>A</code> to solve the dreaded diamond problem, then it creates <code>B1</code>, <code>B2</code> and <code>C</code>. Therefore there is no call of the default constructor of <code>A</code> in <code>B1</code>, <code>B2</code> and <code>C</code> because if there was, it would create many instances of <code>A</code>.</p>\n<p>The compiler rejects the code because the default constructor of <code>A</code> is <code>private</code>. If I set it to <code>protected</code> it compiles. </p>\n<p>What I don't understand is that when I run the code, the default constructor of <code>A</code> is never called (as it should be). So why doesn't the compiler allow me to set it as <code>private</code>?</p>\n<p>[edit]\nokay I'll write an example... but it hurts ;-)</p>\n<pre><code>class A{\n        public:\n                A(int i):i_(i){};\n                virtual ~A(){};\n        protected:\n                int i_;\n        private:\n                A():i_(0){};/*if private =&gt; compilation error, if protected =&gt; ok*/\n};\n\nclass B1: public virtual A{\n        public:\n                B1(int i):A(i){};\n                virtual ~B1(){};\n        protected:\n                B1():A(0){};\n};\n\nclass B2: public virtual A{\n        public:\n                B2(int i):A(i){};\n                virtual ~B2(){};\n        protected:\n                B2():A(0){};\n};\n\nclass C: public B1, public B2{\n        public:\n                C(int j):j_(j){};\n                virtual ~C()=0;\n        protected:\n                int j_;\n\n};\n\nC::~C(){};\n\nclass D: public C{\n        public:\n                D(int i,int j):A(i),C(j){};\n                ~D(){};\n};\n\nint main(){\n        D d(1,2);\n}\n</code></pre>\n<p>The compiler says that in constructor of <code>C</code>, <code>A::A()</code> is private. I agree with this, but as <code>C</code> is an abstract class, it can't be instantiated as a complete object (but it can be instantiated as a base class subobject, by instantiating a <code>D</code>).\n[edit]</p>\n<p>I added the tag `language-lawer' on someone's recommendation. </p>\n", "Title": "In an abstract class constructor, why I do need to call a constructor of a virtual base that will never to called?", "FavoriteCount": "1", "LastEditDate": "2015-08-27T07:42:11.137", "Id": "24526475", "Score": "-1", "CreationDate": "2014-07-02T08:34:22.637", "Tags": "<c++><class><virtual><multiple-inheritance><language-lawyer>", "OwnerUserId": "2110463", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24526475_32214536_20": {"section_id": 438, "quality": 1.0, "length": 15}, "so_24526475_32214536_9": {"section_id": 434, "quality": 0.8333333333333334, "length": 25}, "so_24526475_32214536_19": {"section_id": 438, "quality": 1.0, "length": 13}, "so_24526475_32214536_13": {"section_id": 435, "quality": 0.8571428571428571, "length": 6}, "so_24526475_32214536_15": {"section_id": 435, "quality": 0.8275862068965517, "length": 24}, "so_24526475_32214536_22": {"section_id": 438, "quality": 0.7857142857142857, "length": 11}, "so_24526475_32214536_11": {"section_id": 435, "quality": 0.56, "length": 14}, "so_24526475_32214536_18": {"section_id": 438, "quality": 0.8484848484848485, "length": 28}, "so_24526475_32214536_12": {"section_id": 435, "quality": 0.8888888888888888, "length": 8}, "so_24526475_32214536_21": {"section_id": 438, "quality": 1.0, "length": 5}}, "n3337": {"so_24526475_32214536_20": {"section_id": 429, "quality": 1.0, "length": 15}, "so_24526475_32214536_9": {"section_id": 426, "quality": 0.8333333333333334, "length": 25}, "so_24526475_32214536_19": {"section_id": 429, "quality": 1.0, "length": 13}, "so_24526475_32214536_13": {"section_id": 427, "quality": 0.8571428571428571, "length": 6}, "so_24526475_32214536_15": {"section_id": 427, "quality": 0.8275862068965517, "length": 24}, "so_24526475_32214536_22": {"section_id": 429, "quality": 0.7857142857142857, "length": 11}, "so_24526475_32214536_11": {"section_id": 427, "quality": 0.88, "length": 22}, "so_24526475_32214536_18": {"section_id": 429, "quality": 0.8484848484848485, "length": 28}, "so_24526475_32214536_12": {"section_id": 427, "quality": 0.8888888888888888, "length": 8}, "so_24526475_32214536_21": {"section_id": 429, "quality": 1.0, "length": 5}}, "n4659": {"so_24526475_32214536_20": {"section_id": 458, "quality": 1.0, "length": 15}, "so_24526475_32214536_9": {"section_id": 452, "quality": 0.8333333333333334, "length": 25}, "so_24526475_32214536_19": {"section_id": 458, "quality": 1.0, "length": 13}, "so_24526475_32214536_13": {"section_id": 454, "quality": 0.8571428571428571, "length": 6}, "so_24526475_32214536_15": {"section_id": 454, "quality": 0.8275862068965517, "length": 24}, "so_24526475_32214536_22": {"section_id": 458, "quality": 0.7857142857142857, "length": 11}, "so_24526475_32214536_18": {"section_id": 458, "quality": 0.8484848484848485, "length": 28}, "so_24526475_32214536_11": {"section_id": 454, "quality": 0.56, "length": 14}, "so_24526475_32214536_12": {"section_id": 454, "quality": 0.7777777777777778, "length": 7}, "so_24526475_32214536_21": {"section_id": 458, "quality": 1.0, "length": 5}}}});