post_cb({"bq_ids": {"n4140": {"so_43791221_43907314_1": {"length": 5, "quality": 1.0, "section_id": 6324}, "so_43791221_43907314_3": {"length": 13, "quality": 0.8666666666666667, "section_id": 6324}, "so_43791221_43907314_0": {"length": 23, "quality": 0.92, "section_id": 6323}}, "n3337": {"so_43791221_43907314_1": {"length": 5, "quality": 1.0, "section_id": 6081}, "so_43791221_43907314_0": {"length": 23, "quality": 0.92, "section_id": 6080}, "so_43791221_43907314_3": {"length": 13, "quality": 0.8666666666666667, "section_id": 6081}}, "n4659": {"so_43791221_43907314_1": {"length": 5, "quality": 1.0, "section_id": 7834}, "so_43791221_43907314_0": {"length": 24, "quality": 0.96, "section_id": 7833}, "so_43791221_43907314_3": {"length": 13, "quality": 0.8666666666666667, "section_id": 7834}}}, "43907314": {"Id": "43907314", "PostTypeId": "2", "Body": "<p>the question(s) boil down to:</p>\n<ul>\n<li>Should this compile?  A: Maybe</li>\n<li>What happens if you run it? A: You get undefined behavior.</li>\n</ul>\n<p>AS @T.C. says, [res.on.functions]/2 states:</p>\n<blockquote>\n<p id=\"so_43791221_43907314_0\">In certain cases (replacement functions, handler functions, operations on types used to instantiate standard library template components), the C++ standard library depends on components supplied by a C++ program. If these components do not meet their requirements, this International Standard places no requirements on the implementation.</p>\n<p id=\"so_43791221_43907314_1\">In particular, the effects are undefined in the following cases:</p>\n<p id=\"so_43791221_43907314_2\">[skip]</p>\n<p id=\"so_43791221_43907314_3\">-- if any replacement function or handler function or destructor operation exits via an exception, unless specifically allowed in the applicable <em>Required behavior:</em> paragraph.</p>\n</blockquote>\n<p>Standard-ese aside, throwing from a destructor has been a bad idea for a long, long time (at least since C++98). If there is an exception in flight, and you throw another exception during stack unwinding, that's a quick trip to <code>std::terminate()</code>.</p>\n", "LastActivityDate": "2017-05-11T05:35:07.927", "CommentCount": "2", "CreationDate": "2017-05-11T05:35:07.927", "ParentId": "43791221", "Score": "3", "OwnerUserId": "992490"}, "43791221": {"ViewCount": "132", "Body": "<p>Here is very basic code:</p>\n<pre><code>#include &lt;memory&gt;\n\nclass foo\n{\npublic:\n    ~foo() noexcept(false) { }\n};\n\nint main()\n{\n    auto x = std::make_shared&lt;foo&gt;();\n    return 0;\n}\n</code></pre>\n<p>Compiled as follows:</p>\n<pre><code>g++ -std=c++11 test.cpp          &lt;-- OK\nclang++ -std=c++11 test.cpp          &lt;-- OK\nclang++ -std=c++11 -stdlib=libc++ test.cpp          &lt;-- FAIL\n</code></pre>\n<p>When compiling with libc++, it failes with:</p>\n<pre><code>/usr/bin/../include/c++/v1/memory:3793:7: error: exception specification of overriding function is more lax than base version\nclass __shared_ptr_emplace\n    ^\n/usr/bin/../include/c++/v1/memory:4423:26: note: in instantiation of template class 'std::__1::__shared_ptr_emplace&lt;foo,\n    std::__1::allocator&lt;foo&gt; &gt;' requested here\n    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward&lt;_Args&gt;(__args)...);\n                        ^\n/usr/bin/../include/c++/v1/memory:4787:29: note: in instantiation of function template specialization\n    'std::__1::shared_ptr&lt;foo&gt;::make_shared&lt;&gt;' requested here\n    return shared_ptr&lt;_Tp&gt;::make_shared(_VSTD::forward&lt;_Args&gt;(__args)...);\n                            ^\nexc.cpp:11:19: note: in instantiation of function template specialization 'std::__1::make_shared&lt;foo&gt;' requested here\n    auto x = std::make_shared&lt;foo&gt;();\n                ^\n/usr/bin/../include/c++/v1/memory:3719:13: note: overridden virtual function is here\n    virtual ~__shared_weak_count();\n</code></pre>\n<p>I thought it might be a bug in libc++, but wanted to check here before I file a bug.</p>\n", "AcceptedAnswerId": "43907314", "Title": "std::make_shared with throwing dtor and libc++ doesn't compile", "CreationDate": "2017-05-04T19:23:13.753", "Id": "43791221", "CommentCount": "16", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-05-11T05:35:07.927", "Score": "9", "OwnerUserId": "4358570", "Tags": "<c++><c++11><g++><clang++><libc++>", "AnswerCount": "1"}});