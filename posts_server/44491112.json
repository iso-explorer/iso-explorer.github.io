post_cb({"bq_ids": {"n4140": {"so_44491112_44491199_0": {"length": 46, "quality": 0.9387755102040817, "section_id": 5811}}, "n3337": {"so_44491112_44491199_0": {"length": 41, "quality": 0.8367346938775511, "section_id": 5584}}, "n4659": {"so_44491112_44491199_0": {"length": 40, "quality": 0.8163265306122449, "section_id": 7272}}}, "44491112": {"ViewCount": "65", "Body": "<p>In C++, the equality operator's associativity is left to right, as stated <a href=\"http://cs.stmarys.ca/~porter/csc/ref/cpp_operators.html\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow noreferrer\">here</a> and the returned value of an assignment operation is the value assigned to the given variable. (As shown <a href=\"https://stackoverflow.com/questions/14697643/low-level-details-of-c-c-assignment-operator-implementation-what-does-it-retu\">here</a>, <a href=\"https://stackoverflow.com/questions/15292892/what-is-return-type-of-assignment-operator\">here</a>, <a href=\"https://stackoverflow.com/questions/9514569/what-does-an-assignment-return\">here</a>, and <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">here</a>, (section 6.5.16, pages 101-104 for the last link).)</p>\n<p>According to this information, this:</p>\n<pre><code>double d = 5;\n\nif (d == (d = 6))\n    cout &lt;&lt; \"but d was 5...!!!\" &lt;&lt; endl;\nelse\n    cout &lt;&lt; \"5!=6 :)\" &lt;&lt; endl;\n</code></pre>\n<p>should print <code>\"5!=6 :)\"</code> since the expression, <code>(d == (d = 6))</code> is equivalent to <code>(5 == (6))</code> (which is false), but instead, <code>\"but d was 5...\"</code> is printed. Can anyone explain why?</p>\n", "AcceptedAnswerId": "44491168", "Title": "Equality operator precedence not working", "CreationDate": "2017-06-12T03:43:39.240", "LastActivityDate": "2017-06-12T04:25:04.010", "CommentCount": "6", "LastEditDate": "2017-06-12T04:25:04.010", "PostTypeId": "1", "Tags": "<c++><associativity>", "Id": "44491112", "AnswerCount": "2", "Score": "0", "OwnerUserId": "5921170", "ClosedDate": "2017-06-12T04:55:54.997", "LastEditorUserId": "1989425"}, "44491199": {"Id": "44491199", "PostTypeId": "2", "Body": "<p>The relevant part of the standard is this:</p>\n<blockquote>\n<p id=\"so_44491112_44491199_0\"><strong>[intro.execution]/15</strong> Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced. The value computations of the operands of an operator are sequenced before the value computation of the result of the operator. <strong>If a side effect on a scalar object is unsequenced relative to either another side effect on the same scalar object or a value computation using the value of the same scalar object, and they are not potentially concurrent (1.10), the behavior is undefined.</strong></p>\n</blockquote>\n<p>Emphasis mine. Your program exhibits undefined behavior because there's a modification of <code>d</code> (in the right-hand side of the comparison) unsequenced with the value computation of <code>d</code> (in the left-hand side of the same). Associativity and precedence don't enter into this.</p>\n", "LastActivityDate": "2017-06-12T03:56:37.337", "Score": "6", "CreationDate": "2017-06-12T03:56:37.337", "ParentId": "44491112", "CommentCount": "3", "OwnerUserId": "1670129"}, "44491168": {"Id": "44491168", "PostTypeId": "2", "Body": "<p>You are confusing associativity with order of evaluation.</p>\n<p>Left-to-right associativity means</p>\n<pre><code>a == b == c \n</code></pre>\n<p>is interpreted as</p>\n<pre><code>(a == b) == c \n</code></pre>\n<p>That has no relationship with order of evaluation of terms in an expression like <code>a == b</code>. The compiler is free to evaluate <code>a</code> and <code>b</code> in any order. Because of that, in your case, the compiler is free to evaluate <code>d</code> first or <code>(d = 6)</code> first. As a consequence, your program can evaluate to <code>true</code> or <code>false</code> depending which side of the operator gets evaluated first. If there is a race condition (a compiler is free to evaluate them in parallel also), the result will be different from one run to the next.</p>\n", "LastActivityDate": "2017-06-12T03:52:01.807", "Score": "4", "CreationDate": "2017-06-12T03:52:01.807", "ParentId": "44491112", "CommentCount": "11", "OwnerUserId": "434551"}});