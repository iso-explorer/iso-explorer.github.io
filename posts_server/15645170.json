post_cb({"bq_ids": {"n4140": {"so_15645170_15647342_0": {"length": 60, "quality": 0.9523809523809523, "section_id": 5313}}, "n3337": {"so_15645170_15647342_0": {"length": 62, "quality": 0.9841269841269841, "section_id": 5110}}, "n4659": {"so_15645170_15647342_0": {"length": 60, "quality": 0.9523809523809523, "section_id": 6737}}}, "15647342": {"Id": "15647342", "PostTypeId": "2", "Body": "<p>No, it is not possible. Relevant to this would be \u00a72.2.1, translation phase 2 described in ISO/IEC 14882:2011(E):</p>\n<blockquote>\n<p id=\"so_15645170_15647342_0\">Each instance of a backslash character () immediately followed by a new-line character is deleted, splicing physical source lines to\n  form logical source lines. Only the last backslash on any physical\n  source line shall be eligible for being part of such a splice. If, as\n  a result, a character sequence that matches the syntax of a\n  universal-character-name is produced, the behavior is undefined. A\n  source file that is not empty and that does not end in a new-line\n  character, or that ends in a new-line character immediately preceded\n  by a backslash character before any such splicing takes place, shall\n  be processed as if an additional new-line character were appended to\n  the file.</p>\n</blockquote>\n<p>Basically what will happen is the <code>\\\\\\n</code> (where the <code>\\n</code> is physically in the source, not an escape), will be treated as a <code>\\</code> character, followed by a line splice. The remaining <code>\\</code> will most likely result in a syntax error (there may be situations where it is legal, but I don't currently see any), and not treated during subsequent translation phases as a line splice (line splicing occurs in only phase #2).</p>\n", "LastActivityDate": "2013-03-26T21:02:28.220", "CommentCount": "0", "CreationDate": "2013-03-26T21:02:28.220", "ParentId": "15645170", "Score": "1", "OwnerUserId": "311314"}, "15645377": {"Id": "15645377", "PostTypeId": "2", "Body": "<p>I haven't found any documentation for it, but I would've thought that you could just do <code>\\\\</code> and you'll generate a backslash.</p>\n<p>However, in my research, I see that may not be the biggest thing you'll have to deal with.  As millsj just commented, you'll have issues outputting the <code>#</code> in your ENUM_BEGIN.  See <a href=\"https://stackoverflow.com/questions/1135822/escaping-a-symbol-in-a-define-macro\">Escaping a # symbol in a #define macro?</a> .</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-26T19:07:33.067", "Score": "0", "CreationDate": "2013-03-26T19:07:33.067", "ParentId": "15645170", "CommentCount": "2", "OwnerUserId": "1404311", "LastEditDate": "2017-05-23T11:57:26.963"}, "15645170": {"ViewCount": "845", "Body": "<p>Is it possible in C++ to write a macro, which <strong>AFTER</strong> expansion will output a backslash sign?</p>\n<p>Right now I'm using a code:</p>\n<pre><code>#define SOME_ENUM(XX) \\\n    XX(FirstValue,) \\\n    XX(SecondValue,) \\\n    XX(SomeOtherValue,=50) \\\n    XX(OneMoreValue,=100) \\\n</code></pre>\n<p>but I want to write a macro, which will generate the code above, so I want to be able to write:</p>\n<pre><code>ENUM_BEGIN(name) // it should output: #define SOME_ENUM(XX) \\\nENUM(ONE)        // it should output: XX(ONE,) \\\n//...\n</code></pre>\n<p>But I was not able to write a macro like <code>ENUM_BEGIN</code>, because it should expand to something with backslash on the end.\nIs it possible in C++?</p>\n", "AcceptedAnswerId": "15647342", "Title": "Outputing backslash in a C++ macro", "CreationDate": "2013-03-26T18:55:13.097", "Id": "15645170", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-03-26T21:02:28.220", "Score": "2", "OwnerUserId": "889902", "Tags": "<c++><macros><enums><code-generation>", "AnswerCount": "2"}});