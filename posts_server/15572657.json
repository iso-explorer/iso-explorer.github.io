post_cb({"15572911": {"Id": "15572911", "PostTypeId": "2", "Body": "<p>The whole idea behind a <code>switch</code> in C is that the compiler can \"prepare\" where what <code>myVar</code> value goes. Yes, it may still choose to use a if-else-if-else type chain of operations, but given a particular value of <code>myVar</code>, the outcome should be the same every time. Of course, if the expression in <code>label</code> is not a constant, then it can't determine where each value goes at compile-time. </p>\n<p>If that's not what you want, then you need to do something else in your code - tables or a lot of if-statements would be the most obvious solutions. </p>\n", "LastActivityDate": "2013-03-22T14:31:36.273", "CommentCount": "0", "CreationDate": "2013-03-22T14:31:36.273", "ParentId": "15572657", "Score": "2", "OwnerUserId": "1919155"}, "15572793": {"Id": "15572793", "PostTypeId": "2", "Body": "<p>If <strong>label</strong> is not constant it might lead to ambiguity perhaps,</p>\n<pre><code>int a = 1, b = 6;\n\nswitch(myVar)\n{\n\ncase a+1;\n//etc\nbreak;\n\ncase 2;\n//etc\nbreak;\n\n}\n</code></pre>\n", "LastActivityDate": "2013-03-22T14:26:35.060", "CommentCount": "0", "CreationDate": "2013-03-22T14:26:35.060", "ParentId": "15572657", "Score": "2", "OwnerUserId": "2087705"}, "bq_ids": {"n4140": {"so_15572657_15572720_2": {"length": 18, "quality": 0.75, "section_id": 3890}, "so_15572657_15572720_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 3890}}, "n3337": {"so_15572657_15572720_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 3750}, "so_15572657_15572720_0": {"length": 25, "quality": 0.7575757575757576, "section_id": 3750}}, "n4659": {"so_15572657_15572720_2": {"length": 18, "quality": 0.75, "section_id": 4776}, "so_15572657_15572720_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 4776}}}, "15572789": {"Id": "15572789", "PostTypeId": "2", "Body": "<p>Andy Prowl has provided the relevant paragraph from the standard, here's a possible reason <strong>why</strong> you'd want it like that.</p>\n<p>Consider <code>switch (c) { case a: ...; break; case b: ...; break; }</code>. What would you expect to happen if <code>a==b</code> and <code>b==c</code>?</p>\n<p>If you write this in terms of <code>if ...; if ...</code> or <code>if ...; else if ...</code>, the semantics are clear. In the case of <code>switch</code>, not so much. Sure, you <em>could</em> define it to behave one way or the other, but imho it would result in code whose behaviour isn't immediately clear, and that's a bad thing in general.</p>\n", "LastActivityDate": "2013-03-22T14:26:30.847", "CommentCount": "1", "CreationDate": "2013-03-22T14:26:30.847", "ParentId": "15572657", "Score": "4", "OwnerUserId": "1865077"}, "15572657": {"ViewCount": "433", "Body": "<p>I'm just curious: Take a switch-statement like:</p>\n<pre><code>switch(myVar)\n{\ncase(label):\n    ...\n    break;\n}\n</code></pre>\n<p>Why must <strong>label</strong> be const?</p>\n", "AcceptedAnswerId": "15572789", "Title": "Why can switch only compare to const values?", "CreationDate": "2013-03-22T14:20:56.697", "Id": "15572657", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-03-22T14:31:36.273", "Score": "0", "OwnerUserId": "1178267", "Tags": "<c++><switch-statement>", "AnswerCount": "4"}, "15572720": {"Id": "15572720", "PostTypeId": "2", "Body": "<p>Any constant expression can be used. Per Paragraph 6.4.2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15572657_15572720_0\">The condition shall be of integral type, enumeration type, or class type. If of class type, the condition is contextually implicitly converted (Clause 4) to an integral or enumeration type. Integral promotions are performed. Any statement within the switch statement can be labeled with one or more case labels as follows:</p>\n<p id=\"so_15572657_15572720_1\">case <strong><em>constant-expression</em></strong> :</p>\n<p id=\"so_15572657_15572720_2\"><strong>where the <em>constant-expression</em> shall be a converted constant expression (5.19) of the promoted type of the\n  switch condition</strong>. No two of the case constants in the same switch shall have the same value after conversion\n  to the promoted type of the switch condition.</p>\n</blockquote>\n", "LastActivityDate": "2013-03-22T14:23:25.357", "CommentCount": "0", "CreationDate": "2013-03-22T14:23:25.357", "ParentId": "15572657", "Score": "1", "OwnerUserId": "1932150"}});