post_cb({"bq_ids": {"n4140": {"so_25054786_25055817_0": {"length": 21, "quality": 0.875, "section_id": 6148}}, "n3337": {"so_25054786_25055817_0": {"length": 21, "quality": 0.875, "section_id": 5911}}, "n4659": {"so_25054786_25055817_0": {"length": 21, "quality": 0.875, "section_id": 7644}}}, "25056020": {"Id": "25056020", "PostTypeId": "2", "Body": "<p>The GCC documentation is <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Warning-Options.html#Warning-Options\" rel=\"nofollow\">here</a>.</p>\n<p>The answer appears to be \"no\", there's not any warning option for what you want.</p>\n<p>I don't know why, but I'd guess that there's just so much code out there that uses this that it would be too noisy. C may not define arithmetic shifts, but pretty much all CPUs do it the same way, these days, so most people assume it is defined that way.</p>\n", "LastActivityDate": "2014-07-31T10:00:01.933", "CommentCount": "1", "CreationDate": "2014-07-31T10:00:01.933", "ParentId": "25054786", "Score": "3", "OwnerUserId": "1057909"}, "25054786": {"ViewCount": "691", "Body": "<p>If I read the C++ ISO specification (sections 5.8.2 and 5.8.3) right, the right-shift of negative signed types is implementation specific and the left-shift undefined behaviour.</p>\n<p>Therefore I would like to find shift operations on signed types in our legacy source code which we compile with g++ 4.8.2.</p>\n<p>Unfortunately, I couldn't find such an option in the <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/Warning-Options.html\">manual</a>.\nI can for example compile this code with \"g++ -Wall -Wextra -pedantic\" without a warning:</p>\n<pre><code>int si    = -1;\nint left  = si &lt;&lt; 1; // -2 (multiplication by 2, sign is preserved)\nint right = si &gt;&gt; 1; // -1 (no change, only 1s)\n</code></pre>\n<p>Can anyone tell me if there is such a warning and, if not, why gcc doesn't care about it?</p>\n", "AcceptedAnswerId": "25055817", "Title": "Is there a GCC warning that detects bit shift operations on signed types?", "CreationDate": "2014-07-31T09:00:10.603", "Id": "25054786", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-07-31T10:43:00.050", "Score": "13", "OwnerUserId": "2894510", "Tags": "<c++><gcc><gcc-warning><gcc4.8>", "AnswerCount": "2"}, "25055817": {"Id": "25055817", "PostTypeId": "2", "Body": "<p>AFAIK <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/Warning-Options.html#Warning-Options\" rel=\"nofollow noreferrer\">gcc</a> doesn't provide such an option. The standard, as you cited, says:</p>\n<p>N3690 - \u00a75.8.3</p>\n<blockquote>\n<p id=\"so_25054786_25055817_0\">The value of E1 &gt;&gt; E2 is E1 right-shifted E2 bit positions. If E1 has\n  an unsigned type or if E1 has a signed type and a non-negative value,\n  the value of the result is the integral part of the quotient of\n  E1/2E2. If E1 has a signed type and a negative value, the resulting\n  value is implementation-defined.</p>\n</blockquote>\n<p>and that means doing</p>\n<pre><code>int si    = -1;\nint right = si &gt;&gt; 1;\n</code></pre>\n<p>might or might not yield -1 as a result. It's <strong>implementation defined</strong>. And that means <strong>the compiler is not forced to yield a warning</strong> like <em>\"other compilers might do this another way\"</em>.</p>\n<p>Some of the reasons for this choice follow.</p>\n<p>The original K&amp;R passage says:</p>\n<blockquote>\n<p id=\"so_25054786_25055817_1\">\"Right shifting an unsigned quantity, fills vacated bits with 0. Right\n  shifting a signed quantity will fill with sign bits (arithmetic shift)\n  on some machines such as the PDP-11, and with 0 bits (logical shift)\n  on others.\"</p>\n</blockquote>\n<p>this means that the operation is architecture-dependent. The reason behind this is that some architectures are fast in doing one of the two but not both.</p>\n<p>This reason plus the fact that the usefulness of sign-extended shifts is marginal made the standard take the choice of leaving it \"implementation defined\". By \"<em>usefulness of sign-extended shifts</em>\" I mean that right shifting a negative signed integer arithmetically does not work as the positive counterpart (because losing a 1 on the right makes the negative number smaller, i.e. bigger in modulus)</p>\n<pre><code>+63 &gt;&gt; 1 = +31 (integral part of quotient E1/2E2)\n00111111 &gt;&gt; 1 = 00011111\n-63 &gt;&gt; 1 = -32 \n11000001 &gt;&gt; 1 = 11100000\n</code></pre>\n<p>References for further reading: </p>\n<p><a href=\"https://stackoverflow.com/a/1857965/1938163\">https://stackoverflow.com/a/1857965/1938163</a></p>\n<p><a href=\"http://www.ccsinfo.com/forum/viewtopic.php?t=45711\" rel=\"nofollow noreferrer\">http://www.ccsinfo.com/forum/viewtopic.php?t=45711</a></p>\n<p><a href=\"https://isocpp.org/std/the-standard\" rel=\"nofollow noreferrer\">https://isocpp.org/std/the-standard</a></p>\n<hr>\n<p>Edit: if the above doesn't address the issue (i.e. the code is valid, why should a compiler warn about that?) I'm providing a second solution: <strong>AST matchers</strong></p>\n<p>As described here: <a href=\"http://eli.thegreenplace.net/2014/07/29/ast-matchers-and-clang-refactoring-tools/\" rel=\"nofollow noreferrer\">http://eli.thegreenplace.net/2014/07/29/ast-matchers-and-clang-refactoring-tools/</a> you can write some code to identify quickly all the right-shifts-with-signed-integers spots in your program. </p>\n<p>Think of it as \"<em>writing my small one-task static analysis checker</em>\".</p>\n<hr>\n<p>Edit 2: you might also try other static-analysis tools, clang has a <a href=\"http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation\" rel=\"nofollow noreferrer\">-fsanitize=shift</a> option which could work for you. AFAIK also for <a href=\"https://gcc.gnu.org/ml/gcc-patches/2013-06/msg00264.html\" rel=\"nofollow noreferrer\">gcc</a> they were implementing an undefined behavior sanitizer which could help diagnosing those errors. I've not been following the story but I guess you could give it a try as well.</p>\n</hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-07-31T10:43:00.050", "Score": "6", "CreationDate": "2014-07-31T09:50:23.693", "ParentId": "25054786", "CommentCount": "10", "OwnerUserId": "1938163", "LastEditDate": "2017-05-23T12:24:56.457"}});