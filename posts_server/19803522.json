post_cb({"19804110": {"ParentId": "19803522", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-11-06T04:26:16.823", "Score": "4", "LastEditorUserId": "775806", "LastEditDate": "2013-11-06T04:32:41.333", "Id": "19804110", "OwnerUserId": "775806", "Body": "<p>The standard blesses two forms of <code>main</code>:</p>\n<pre><code>int main()\nint main(int argc, char* argv[])\n</code></pre>\n<p>These forms are what any implementation must recognize. Everything else is your implementation being easy with your code and letting you be creative. It is not illegal, as the standard specifically allows it to recognize other forms of <code>main</code>.</p>\n<p>The startup code is normally written in a way that allows it to call <code>main</code> having no linkage declaration, because that's how the standard says <code>main</code> should be. The compiler usually treats <code>main</code> specially as having C linkage, as allowed by the standard, so that's how the startup code declares it. This is of no interest to a normal programmer. He just needs to follow the standard.</p>\n", "LastActivityDate": "2013-11-06T04:32:41.333"}, "19803541": {"ParentId": "19803522", "CommentCount": "2", "CreationDate": "2013-11-06T03:27:24.183", "OwnerUserId": "1680957", "PostTypeId": "2", "Id": "19803541", "Score": "3", "Body": "<p><code>extern \"C\"</code> only tells the C++ compiler specifically to NOT decorate or use name wrangling on generated function labels. </p>\n<p>Yes, both are legal.</p>\n", "LastActivityDate": "2013-11-06T03:27:24.183"}, "19803522": {"CommentCount": "3", "AcceptedAnswerId": "19803545", "CreationDate": "2013-11-06T03:24:41.703", "LastActivityDate": "2013-11-06T04:32:41.333", "PostTypeId": "1", "ViewCount": "1704", "FavoriteCount": "6", "Title": "Is it legal C++ to declare main as extern \"C\"?", "Id": "19803522", "Score": "17", "Body": "<p>Being a low-level programmer, I often work with the module startup code for executables, so I understand pretty well how code like \"crt0\" work.  When writing C++ code, I've generally declared <code>main</code> as <code>extern \"C\"</code> to match what the C startup code is going to do to call <code>main</code>.  I thus usually use this declaration for <code>main</code> (and <code>wmain</code> if specifically targeting Windows):</p>\n<pre><code>extern \"C\" int main(int argv, const char *const *argv)\n\nextern \"C\" int __cdecl wmain(int argv, const wchar_t *const *argv)\n</code></pre>\n<p>Is it legal to use <code>extern \"C\"</code> on <code>main</code>?  Also, is <code>const char *const *</code> legal for argv's type as opposed to <code>char *[]</code>?</p>\n", "Tags": "<c++><main><extern><linkage>", "OwnerUserId": "2958774", "AnswerCount": "3"}, "19803545": {"ParentId": "19803522", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-11-06T03:28:15.583", "Score": "6", "LastEditorUserId": "906773", "LastEditDate": "2013-11-06T03:40:06.520", "Id": "19803545", "OwnerUserId": "906773", "Body": "<p>The linkage is implementation defined (3.6.1p3):</p>\n<blockquote>\n<p id=\"so_19803522_19803545_0\">The linkage (3.5) of main is implementation-defined.</p>\n</blockquote>\n<p>Also, for your latter question, that is perfectly acceptable to have <code>const char* const*</code> (3.6.1p2):</p>\n<blockquote>\n<p id=\"so_19803522_19803545_1\">An implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined.</p>\n</blockquote>\n", "LastActivityDate": "2013-11-06T03:40:06.520"}, "bq_ids": {"n4140": {"so_19803522_19803545_1": {"section_id": 7146, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_19803522_19803545_1": {"section_id": 6890, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_19803522_19803545_1": {"section_id": 8647, "quality": 0.8823529411764706, "length": 15}}}});