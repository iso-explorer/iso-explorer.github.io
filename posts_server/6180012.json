post_cb({"6180183": {"Id": "6180183", "PostTypeId": "2", "Body": "<p>Compiling your example with gcc, all three of them have <code>sizeof</code> 0, so I would assume that all of them are treated equally by the compiler.</p>\n", "LastActivityDate": "2011-05-30T19:41:48.427", "CommentCount": "7", "CreationDate": "2011-05-30T19:41:48.427", "ParentId": "6180012", "Score": "2", "OwnerUserId": "776630"}, "bq_ids": {"n4140": {"so_6180012_6180200_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 3228}}, "n3337": {"so_6180012_6180200_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3101}}, "n4659": {"so_6180012_6180200_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 3985}}}, "6180012": {"ViewCount": "17308", "Body": "<p>Today I incidentally defined a two dimensional array with the size of one dimension being 0, however my compiler did not complain. I found the following which states that this is legal, at least in the case of gcc:</p>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html\" rel=\"noreferrer\">6.17 Arrays of Length Zero</a></p>\n<p>However, I have two questions on this usage:</p>\n<p>First, is this considered as good programming practice? If so, then when should we use it in real world?</p>\n<p>Second, the array I defined was two dimensional, with 0 size for one dimension. Is this the same as the one dimensional case? For example,</p>\n<pre><code>int s[0]\nint s[0][100]\nint s[100][0]\n</code></pre>\n<p>Are they all the same in the memory and for the compiler?</p>\n<p>EDIT: Reply to Greg: The compiler I am using is gcc 4.4.5. My intention for this problem is not compiler-dependent, however if there are any compiler specific quirks that would be helpful too:)</p>\n<p>Thanks in advance!</p>\n", "AcceptedAnswerId": "6180200", "Title": "Array with size 0", "CreationDate": "2011-05-30T19:22:39.480", "Id": "6180012", "CommentCount": "3", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2011-07-13T14:05:56.657", "LastEditorUserId": "688653", "LastActivityDate": "2013-07-12T10:36:32.263", "Score": "27", "OwnerUserId": "688653", "Tags": "<c++><c><arrays><gcc>", "AnswerCount": "4"}, "6180200": {"Id": "6180200", "PostTypeId": "2", "Body": "<p>In C++ it is illegal to declare an array of zero length. As such it is not normally considered a good practice as you are tying your code to a particular compiler extension. Many uses of dynamically sized arrays are better replaced with a container class such as <code>std::vector</code>.</p>\n<p>ISO/IEC 14882:2003 8.3.4/1:</p>\n<blockquote>\n<p id=\"so_6180012_6180200_0\">If the <em>constant-expression</em> (5.19) is present, it shall be an integral constant expression and its value shall be greater than zero.</p>\n</blockquote>\n<p>However, you can dynamically allocate an array of zero length with <code>new[]</code>.</p>\n<p>ISO/IEC 14882:2003 5.3.4/6:</p>\n<blockquote>\n<p id=\"so_6180012_6180200_1\">The expression in a <em>direct-new-declarator</em> shall have integral or enumeration type (3.9.1) with a non-negative value.</p>\n</blockquote>\n", "LastEditorUserId": "19563", "LastActivityDate": "2013-07-12T10:36:32.263", "Score": "25", "CreationDate": "2011-05-30T19:43:30.073", "ParentId": "6180012", "CommentCount": "2", "OwnerUserId": "19563", "LastEditDate": "2013-07-12T10:36:32.263"}, "6180170": {"Id": "6180170", "PostTypeId": "2", "Body": "<p>I ran this program at <a href=\"http://ideone.com/XPkiX\" rel=\"nofollow\">ideone.com</a></p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int a[0];\n    int b[0][100];\n    int c[100][0];\n\n    std::cout &lt;&lt; \"sizeof(a) = \" &lt;&lt; sizeof(a) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sizeof(b) = \" &lt;&lt; sizeof(b) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sizeof(c) = \" &lt;&lt; sizeof(c) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>It gave the size of all the variables as 0.</p>\n<pre><code>sizeof(a) = 0\nsizeof(b) = 0\nsizeof(c) = 0\n</code></pre>\n<p>So in the above example, no memory is allocated for <code>a</code>, <code>b</code> or <code>c</code>.</p>\n", "LastEditorUserId": "754373", "LastActivityDate": "2011-05-30T21:58:16.887", "Score": "3", "CreationDate": "2011-05-30T19:40:47.560", "ParentId": "6180012", "CommentCount": "2", "OwnerUserId": "754373", "LastEditDate": "2011-05-30T21:58:16.887"}, "6180296": {"Id": "6180296", "PostTypeId": "2", "Body": "<p>Your link explains everything. They are used as last field in a struct when the length of struct is not known at compile time. If you try using them on stack or in a middle of other declarations you will end up overwriting next elements.</p>\n", "LastActivityDate": "2011-05-30T19:56:09.540", "CommentCount": "0", "CreationDate": "2011-05-30T19:56:09.540", "ParentId": "6180012", "Score": "2", "OwnerUserId": "745924"}});