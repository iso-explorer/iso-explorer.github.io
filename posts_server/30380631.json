post_cb({"30380631": {"ViewCount": "48", "Body": "<p>Trying to understand c++ string a little more here.  Compiler here is g++ 4.7.3.  </p>\n<p>Question 1:  In the following code snippet,  will the compiler be smart enough to free the user data (in the heap, implicitly pointed to by s) at the end of the function?   I think the answer is yes, just want to confirm. </p>\n<pre><code>void dummy() {\n    string s;\n    s.append(\"hello\");\n    //more append\n}\n</code></pre>\n<p>Question 2: in the following snippet,  compiler will not free the user data pointed to by <code>s</code> when the function returns. Is that right?  If so,  the user data may be freed in the caller by the compiler (if the caller function itself doesn't return the string object).  </p>\n<pre><code>string dummy() {\n    string s;\n    s.append(\"hello\");\n    //more append\n    return s;\n}\n//some caller\nstring s1 = dummy();\n</code></pre>\n", "AcceptedAnswerId": "30380674", "Title": "Some questions on life span of a string object", "CreationDate": "2015-05-21T17:32:52.657", "Id": "30380631", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-05-21T17:40:27.530", "Score": "3", "OwnerUserId": "3337677", "Tags": "<c++><string>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30380631_30380688_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 480}, "so_30380631_30380688_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 7170}}, "n3337": {"so_30380631_30380688_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 471}, "so_30380631_30380688_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 6914}}, "n4659": {"so_30380631_30380688_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 502}, "so_30380631_30380688_1": {"length": 17, "quality": 0.7727272727272727, "section_id": 8678}}}, "30380674": {"Id": "30380674", "PostTypeId": "2", "Body": "<p>In question 1, yes the memory for the variable <code>s</code> will be freed when the function <code>dummy</code> ends because that was the enclosing scope of the <code>s</code> variable.</p>\n<p>In question 2, the compiler will likely use <a href=\"https://en.wikipedia.org/wiki/Return_value_optimization\" rel=\"nofollow\">return value optimization</a> to avoid having to copy the memory from <code>s</code> into <code>s1</code>, since <code>s</code> is about to fall out of scope.</p>\n", "LastActivityDate": "2015-05-21T17:35:06.613", "Score": "3", "CreationDate": "2015-05-21T17:35:06.613", "ParentId": "30380631", "CommentCount": "1", "OwnerUserId": "2296458"}, "30380688": {"Id": "30380688", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30380631_30380688_0\">Question 1: In the following code snippet, will the compiler be smart enough to free the user data (in the heap, implicitly pointed to by s) at the end of the function?</p>\n</blockquote>\n<p>Yes, it is required to. At the end of the function scope, the string's destructor will be called, which will free the memory allocated.</p>\n<p>The object <code>s</code>\u00a0is said to have \"automatic storage duration\", and it's described by the standard via \u00a73.7.3/1:</p>\n<blockquote>\n<p id=\"so_30380631_30380688_1\">Block-scope variables explicitly declared register or not explicitly declared static or extern have au- tomatic storage duration. The storage for these entities lasts until the block in which they are created exits.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_30380631_30380688_2\">Question 2: in the following snippet, compiler will not free the user data pointed to by s when the function returns. Is that right? If so, the user data may be freed in the caller by the compiler (if the caller function itself doesn't return the string object).</p>\n</blockquote>\n<p>The compiler <em>may</em> elide the copy there, using what's called RVO (return value optimization). Specifically the standard words this in the following way, in \u00a712.8/31:</p>\n<blockquote>\n<p id=\"so_30380631_30380688_3\">This elision of copy/move operations, called copy elision, is permitted in the following circumstances (which may be combined to eliminate multiple copies):</p>\n<ul>\n<li>in a return statement in a function with a class return type, when the expression is the name of a non-volatile automatic object (other than a function or catch-clause parameter) with the same cv- unqualified type as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function\u2019s return value</li>\n<li>in a throw-expression (5.17), when the operand is the name of a non-volatile automatic object (other than a function or catch-clause parameter) whose scope does not extend beyond the end of the innermost enclosing try-block (if there is one), the copy/move operation from the operand to the exception object (15.1) can be omitted by constructing the automatic object directly into the exception object</li>\n<li>when a temporary class object that has not been bound to a reference (12.2) would be copied/moved to a class object with the same cv-unqualified type, the copy/move operation can be omitted by constructing the temporary object directly into the target of the omitted copy/move</li>\n<li>when the exception-declaration of an exception handler (Clause 15) declares an object of the same type (except for cv-qualification) as the exception object (15.1), the copy operation can be omitted by treating the exception-declaration as an alias for the exception object if the meaning of the program will be unchanged except for the execution of constructors and destructors for the object declared by the exception-declaration. [ Note: There cannot be a move from the exception object because it is always an lvalue. \u2014endnote]</li>\n</ul>\n</blockquote>\n</hr>", "LastEditorUserId": "493122", "LastActivityDate": "2015-05-21T17:40:27.530", "Score": "3", "CreationDate": "2015-05-21T17:36:04.897", "ParentId": "30380631", "CommentCount": "1", "LastEditDate": "2015-05-21T17:40:27.530", "OwnerUserId": "493122"}});