post_cb({"19641313": {"Id": "19641313", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19640893_19641313_0\">is it possible to be given a \"zero\" address so we would have p = 0 and it would be correct?</p>\n</blockquote>\n<p>I think you are mixing up the physical and the logical side of the virtual memory management.</p>\n<p>On the logical side, your program is guaranteed to never see a pointer that compares equal to zero:</p>\n<blockquote>\n<p id=\"so_19640893_19641313_1\">6.3.2.3 (3) defines integer constant expression 0 and such an expressions cast to (void *) as <code>null</code> pointer constant. If a null pointer constant is converted to a pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal to a pointer to any object or function.</p>\n</blockquote>\n<p>On the physical side, though, there is no such restriction: there is nothing preventing the virtual memory management system from giving your program a block of memory with the physical address of zero. However, that physical address would never appear at the virtual address matching the value of the pointer constant zero: the physical address is hidden from your program by the virtual memory management system, and the virtual address corresponding to the pointer constant zero is guaranteed not to become allocated to your program by the compiler.</p>\n", "LastActivityDate": "2013-10-28T17:32:38.340", "CommentCount": "1", "CreationDate": "2013-10-28T17:32:38.340", "ParentId": "19640893", "Score": "3", "OwnerUserId": "335858"}, "19641017": {"Id": "19641017", "PostTypeId": "2", "Body": "<p>Runtime environments that provide virtual memory for C-based programs generally do not allow <code>0x00000000</code> (or anything near it) to be a valid address.</p>\n<p>You will have to work hard to get a pointer to have a <code>0x00000000</code> value and still be valid! In general this means manually making the OS system calls to map virtual memory (<code>mmap</code>, <code>VirtualAlloc</code>). In some cases the OS has safeguards to prevent mapping that particular page of memory. For example, in some older versions of Windows you had to pass <code>1</code> as the address you wanted to map instead of <code>0</code>, while in newer versions you can only do it if you have a special bit set in kernel mode. On some versions of Linux you must first set <code>mmap_min_addr</code> to <code>0</code> before you can map that page.</p>\n", "LastEditorUserId": "310574", "LastActivityDate": "2013-10-28T17:42:44.047", "Score": "1", "CreationDate": "2013-10-28T17:15:09.137", "ParentId": "19640893", "CommentCount": "0", "OwnerUserId": "310574", "LastEditDate": "2013-10-28T17:42:44.047"}, "19640893": {"ViewCount": "158", "Body": "<p>Let's assume we have a following code snippet</p>\n<pre><code>int* p = new int[5];\n</code></pre>\n<p>and our code is running in protected mode. Because of it, address located in our <code>p</code> variable is not a physical address but only an address to a part of virtual memory allocated for our application. Of course our system is additionally protected from memory violation attempts.</p>\n<p>In these circumstances, is it possible to be given a \"zero\" address so we would have <code>p = 0</code> and it would be correct? Of course I'm taking into consideration that value <code>0</code> is treated like a <code>nullptr</code>, so it could be misleading if this address would be correct.</p>\n<p>In fact, are there any rules telling us what is a legal addressable range?</p>\n<p>Of course there is another reason for not be given this value, but I don't know if I'm correct - in C (C++) pointers with zero value are treated in special way, so how would we notice a difference if our pointer points to allocated memory or if it has a value zero because it is a <code>nullptr</code>?</p>\n", "AcceptedAnswerId": "19641313", "Title": "Memory addressation - zero value", "CreationDate": "2013-10-28T17:07:37.607", "LastActivityDate": "2013-10-28T18:51:26.403", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2013-10-28T18:51:26.403", "LastEditorUserId": "19410", "Id": "19640893", "Score": "2", "OwnerUserId": "1864702", "Tags": "<c++><pointers><memory-management>", "AnswerCount": "4"}, "19640941": {"Id": "19640941", "PostTypeId": "2", "Body": "<p>The constant '0' represents a null pointer. That is not <em>necessarily</em> stored as the literal value 0x00000000 in the pointer though. So in theory you can get 0x00000000 back as your object's address and it would be valid if storing the constant 0 into a pointer stored the null pointer as a different value.</p>\n<p>In practice that doesn't happen in any compiler I'm aware of though.</p>\n", "LastActivityDate": "2013-10-28T17:10:30.353", "CommentCount": "2", "CreationDate": "2013-10-28T17:10:30.353", "ParentId": "19640893", "Score": "2", "OwnerUserId": "417292"}, "bq_ids": {"n4140": {"so_19640893_19641313_1": {"length": 15, "quality": 0.5172413793103449, "section_id": 39}}, "n3337": {"so_19640893_19641313_1": {"length": 15, "quality": 0.5172413793103449, "section_id": 36}}, "n4659": {"so_19640893_19641313_1": {"length": 15, "quality": 0.5172413793103449, "section_id": 39}}}, "19642607": {"Id": "19642607", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19640893_19642607_0\">Yes, in fact part of my question is \"whether you can trust that p==0 implies that the allocation failed?\".</p>\n</blockquote>\n<p>By default, <code>new</code> throws an exception if it fails to allocate to signal the error, so there is no point in checking the returned value. If you use the no-throw version of new, then you are guaranteed that the value returned will not be <code>nullptr</code>, so the test would be fine.</p>\n<p>Now, on the larger question of whether it is safe to use the memory returned, it might or might not. Different OS implementations overcommit on memory, so they will grant more memory to the applications than is physically available, on the assumption that by the time the app might need it, maybe something would have freed somewhere else. With that in mind, beware that if you are asking for a large amount of memory, even if it is allocated to you by the language construct (<code>new</code>) and the OS (allocator implementation underneath), there is no guarantee that you will be able to use it.</p>\n", "LastActivityDate": "2013-10-28T18:41:10.887", "CommentCount": "0", "CreationDate": "2013-10-28T18:41:10.887", "ParentId": "19640893", "Score": "0", "OwnerUserId": "36565"}});