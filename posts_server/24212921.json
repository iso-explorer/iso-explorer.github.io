post_cb({"24212921": {"ViewCount": "3403", "Body": "<p>Given a C++11 enum class, nested inside several long- and ugly-named namespaces:</p>\n<pre><code>namespace\n    long_and_ugly\n{\n    enum class\n        colour\n    {\n        red,\n        green,\n        blue\n    };\n}\n</code></pre>\n<p>Can aliases be made of the enumeration values? With clang++ 3.5, it is possible to do what follows:</p>\n<pre><code>using long_and_ugly::colour; // take all the values into the current namespace\nusing long_and_ugly::colour::red; // take only 'red' into the current namespace\n\nfunction_taking_colour_argument( red ); // instead of fully referring to the value\n</code></pre>\n<p>g++ 4.9, however, complains. I can't copy its error message because I can't access the code, but it explicitly complained about the usage of the using directive or declaration. I have also tried this:</p>\n<pre><code>using red = long_and_ugly::colour::red;\n</code></pre>\n<p>But it also failed. I'm sorry for not pasting the errors. Nevertheless, I believe you should be able to reproduce it.</p>\n<hr>\n<h3>Question(s)</h3>\n<ul>\n<li><p>Is it possible to declare aliases to enumeration values in standard C++11, or was I using a clang extension?</p></li>\n<li><p>If it is, what is the correct syntax?</p></li>\n</ul>\n</hr>", "AcceptedAnswerId": "24213261", "Title": "Is it possible to alias an enum-class enumerator?", "CreationDate": "2014-06-13T19:52:46.050", "Id": "24212921", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-06-13T20:40:15.090", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-13T22:58:20.037", "Score": "16", "OwnerUserId": "2207421", "Tags": "<c++><c++11><enums><alias><language-lawyer>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24212921_24213261_2": {"length": 4, "quality": 1.0, "section_id": 5496}, "so_24212921_24213261_1": {"length": 4, "quality": 1.0, "section_id": 5496}}, "n3337": {"so_24212921_24213261_1": {"length": 4, "quality": 1.0, "section_id": 5282}, "so_24212921_24213261_2": {"length": 4, "quality": 1.0, "section_id": 5282}}, "n4659": {"so_24212921_24213261_1": {"length": 4, "quality": 1.0, "section_id": 6930}, "so_24212921_24213261_2": {"length": 4, "quality": 1.0, "section_id": 6930}}}, "24214709": {"Id": "24214709", "PostTypeId": "2", "Body": "<p>Sort of:</p>\n<pre><code>namespace long_and_ugly {\n    enum class colour\n    {\n        red,\n        green,\n        blue\n    };\n}\nconst colour red = long_and_ugly::colour::red;\n</code></pre>\n", "LastActivityDate": "2014-06-13T22:41:26.997", "Score": "2", "CreationDate": "2014-06-13T22:41:26.997", "ParentId": "24212921", "CommentCount": "1", "OwnerUserId": "15416"}, "24213261": {"Id": "24213261", "PostTypeId": "2", "Body": "<h2>Enumerators in <em>using-declarations</em></h2>\n<p>The problem is that the standard says that you shall not refer to an enumerator inside an <em>enum class</em> when using specifying a <em>using-declaration</em>. </p>\n<blockquote>\n<p id=\"so_24212921_24213261_0\"><code>7.3.3p7</code> <strong>The <code>using</code> declaration</strong> <code>[namespace.udecl]</code> (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"noreferrer\">n3337</a>)</p>\n<blockquote>\n<p id=\"so_24212921_24213261_2\">A <em>using-declaration</em> shall not name a scoped enumerator.</p>\n</blockquote>\n</blockquote>\n<pre><code>namespace N {\n  enum class E { A };\n}\n\nusing N::E;    // legal\nusing N::E::A; // ill-formed, violation of [namespace.udecl]p7\n</code></pre>\n<p><sup><strong>Note</strong>: <code>clang</code> does accept both lines above; <a href=\"http://llvm.org/bugs/show_bug.cgi?id=9124\" rel=\"noreferrer\">here's a relevant bug report</a>.<br/></sup></p>\n<p>It's perfectly fine to refer to the actual name of the <em>enum class</em> itself, but trying to refer to one of its enumerators is ill-formed.</p>\n<hr>\n<h2>Enumerators in <em>alias-declarations</em></h2>\n<p>The standard says that an <em>alias-declaration</em> can only be used to refer to a <em>type-name</em>, since an <em>enumerator</em> isn't a type, using one in such context is ill-formed.</p>\n<pre><code>namespace N {\n  enum class E { A };\n}\n\nusing x = N::E;     // legal, `N::E` is a type\nusing y = N::E::A;  // ill-formed, `N::E::A` isn't a type\n</code></pre>\n<hr>\n<h3>Alternatives to <em>using-</em>  and <em>alias-declarations</em></h3>\n<p>You could declare a constant having whatever-name-of-your-choice initialized with the value you'd like to \"alias\":</p>\n<pre><code>namespace N {\n  enum class E { A };\n}\n\nconstexpr N::E x = N::E::A;\n</code></pre>\n<pre class=\"lang-cpp prettyprint-override\"><code>int main () {\n  N::E value = x; // semantically equivalent of `value = N::E::A`\n}\n</code></pre>\n</hr></hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-13T22:58:20.037", "Score": "16", "CreationDate": "2014-06-13T20:20:11.020", "ParentId": "24212921", "CommentCount": "0", "LastEditDate": "2014-06-13T22:58:20.037", "OwnerUserId": "1090079"}});