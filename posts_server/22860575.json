post_cb({"bq_ids": {"n4140": {"so_22860575_22883878_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 715}}, "n3337": {"so_22860575_22883878_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 704}}, "n4659": {"so_22860575_22883878_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 745}}}, "22860575": {"ViewCount": "115", "Body": "<p>I have a class with custom assignment operator that deliberately introduces controlled side effects.</p>\n<p>If I have a <code>std::set</code> of these elements, I would like to know whether the assignment operator could be called with the use of <code>insert</code>.</p>\n<p>I.e.:</p>\n<pre><code>class A\n{\npublic:\n    A &amp; operator=(A const &amp; rhs)\n    {\n        // custom assignment operator with deliberate side effects\n        // Could this be called with use of std::set::insert()?\n    }\n};\n\nstd::set&lt;A&gt; a;\n\n// Is it possible with this, or any use of \"insert\", that\n// the assignment operator will ever be called?\n\na.insert(A());\n</code></pre>\n<p>Can the assignment operator ever be called with the use of <code>std::set::insert</code>?</p>\n", "AcceptedAnswerId": "22883878", "Title": "Can std::set::insert() call the assignment operator?", "CreationDate": "2014-04-04T10:44:21.137", "Id": "22860575", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2014-04-05T19:39:02.253", "Score": "2", "OwnerUserId": "368896", "Tags": "<c++><c++11><stl>", "AnswerCount": "2"}, "22860739": {"Id": "22860739", "PostTypeId": "2", "Body": "<p>In pre-C++11, it could, theoretically.  C++11 bans it, no doubt\nbecause no implementation ever actually did it.  In C++11,\nmembers of <code>std::set</code> don't have to support assignment.\nIn pre-C++11, some implementations supporting concepts might\nhave code which uses assignment, as a means of checking that\nyour class supports it, but it should be in a non-evaluated\ncontext, so the operator will not actually be called.</p>\n", "LastActivityDate": "2014-04-04T10:51:39.863", "CommentCount": "8", "CreationDate": "2014-04-04T10:51:39.863", "ParentId": "22860575", "Score": "3", "OwnerUserId": "649665"}, "22883878": {"Id": "22883878", "PostTypeId": "2", "Body": "<p>The C++11 standard requires types to be used with <code>std::set::insert</code> to be \"CopyInsertable\n\", \"MoveInsertable\" or \"EmplaceConstructible\" depending on the insert function you are using (23.2.3/4).</p>\n<p>This is for example defined as:</p>\n<blockquote>\n<p id=\"so_22860575_22883878_0\">T is EmplaceConstructible into X from args, for zero or more arguments args, means that the following expression is well-formed: <code>allocator_traits&lt;A&gt;::construct(m, p, args);</code> (23.2.1/13)</p>\n</blockquote>\n<p>In all three cases, the default behaviour is <code>std::allocator</code> which uses placement new (17.6.3.5/2):</p>\n<pre><code>::new((void*)c)A(forward&lt;Args&gt;(args)...)\n</code></pre>\n<p>Depending on the <code>insert</code> function, in our case <code>args</code> is either an expression of type <code>A</code>, an rvalue of type <code>A</code> or some other arguments. But in all cases a constructor or copy constructor is used, not the assignment operator.</p>\n<p>This is what the standard says (and GCC 4.6.3 does). Even if there is no reason to use the assignment operator, some compiler may still do it. So I would suggest don't rely too much on it.</p>\n", "LastEditorUserId": "316448", "LastActivityDate": "2014-04-05T19:39:02.253", "Score": "1", "CreationDate": "2014-04-05T16:55:45.317", "ParentId": "22860575", "CommentCount": "0", "OwnerUserId": "316448", "LastEditDate": "2014-04-05T19:39:02.253"}});