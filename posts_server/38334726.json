post_cb({"bq_ids": {"n4140": {"so_38334726_38334827_1": {"length": 46, "quality": 0.9387755102040817, "section_id": 382}}, "n3337": {"so_38334726_38334827_1": {"length": 46, "quality": 0.9387755102040817, "section_id": 373}}, "n4659": {"so_38334726_38334827_1": {"length": 46, "quality": 0.9387755102040817, "section_id": 398}}}, "38334726": {"ViewCount": "201", "Body": "<p>If I have a setup where a function takes an object <code>Bar</code> as an argument, passes that object to a local class <code>Foo</code>, and <code>Foo</code> uses the <code>Bar</code> in its destructor such as:</p>\n<pre><code>class Foo {\n    public:\n        Foo(const Bar&amp; bar) : bar_(bar) {}\n        ~Foo() {\n            bar_.DoSomething();\n        }\n    private:\n        const Bar&amp; bar_;\n};\n\nvoid example_fn(const Bar&amp; input_bar) {\n    Foo local_foo(input_bar);\n    // ... do stuff.\n    // When foo goes out of scope, its destructor is called, using input_bar.\n}\n</code></pre>\n<p>If <code>example_fn</code> is called with a temporary <code>Bar input_bar</code>, is the local variable <code>Foo local_foo</code> guaranteed to be destroyed before the temporary argument? In other words, are arguments guaranteed to outlive local variables?</p>\n", "AcceptedAnswerId": "38334827", "Title": "Are local objects guaranteed to outlive temporary arguments? (C++11)", "CreationDate": "2016-07-12T16:44:42.707", "Id": "38334726", "CommentCount": "6", "LastEditDate": "2016-07-12T16:52:12.460", "PostTypeId": "1", "LastEditorUserId": "839829", "LastActivityDate": "2016-07-12T17:14:14.453", "Score": "2", "OwnerUserId": "839829", "Tags": "<c++><c++11><object-lifetime>", "AnswerCount": "1"}, "38334827": {"Id": "38334827", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38334726_38334827_0\">is the local variable <code>Foo local_foo</code> guaranteed to be destroyed before the temporary argument?</p>\n</blockquote>\n<p>Yes, Objects with automatic storage duration (aka locals) are guaranteed to be destroyed in the reverse order of construction. The function arguments are always constructed (in an unspecified order) before the locals within the block scope. See <a href=\"https://stackoverflow.com/questions/6403055/object-destruction-in-c\">Object Destruction in C++</a></p>\n<p><a href=\"http://eel.is/c++draft/class.temporary#6\" rel=\"nofollow noreferrer\">[class.temporary/5]</a></p>\n<blockquote>\n<p id=\"so_38334726_38334827_1\"><a href=\"http://eel.is/c++draft/class.temporary#6\" rel=\"nofollow noreferrer\">5:</a> ...In addition, the destruction of temporaries bound to references\n  shall take into account the ordering of destruction of objects with\n  static, thread, or automatic storage duration ([basic.stc.static],\n  [basic.stc.thread], [basic.stc.auto]); that is, if <code>obj1</code> is an object\n  with the same storage duration as the temporary and created before the\n  temporary is created the temporary shall be destroyed before <code>obj1</code> is\n  destroyed; if <code>obj2</code> is an object with the same storage duration as\n  the temporary and created after the temporary is created the temporary\n  shall be destroyed after <code>obj2</code> is destroyed. ...</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-12T17:14:14.453", "Score": "7", "CreationDate": "2016-07-12T16:51:11.133", "ParentId": "38334726", "CommentCount": "1", "OwnerUserId": "1621391", "LastEditDate": "2017-05-23T12:14:43.840"}});