post_cb({"33372052": {"ParentId": "33371684", "PostTypeId": "2", "CommentCount": "8", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#633\"><strong>CWG #633</strong></a> addressed the fact that references, unlike objects, didn't have actual names. It was resolved by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2993.html\"><strong>N2993</strong></a>, which extended the notion of a variable to encompass references, thereby giving them names.<br>\nNow [basic]/6 reads (all emphasis by me):</br></p>\n<blockquote>\n<p id=\"so_33371684_33372052_0\">A variable is introduced by the declaration of a reference other than a non-static data member or of an object. <strong>The variable's name denotes the object <em>or reference</em></strong>.</p>\n</blockquote>\n<p>The name of a reference denotes that variable - the <em>reference</em> - not the object that the reference refers to. Although references are commonly explained as being \"other names of objects/functions\", in standard terms that definition is plain wrong. </p>\n<p>I.e. copy elision is not applicable in your example.</p>\n<hr>\n<p>Since the above paper was not adopted until 2009, and you tagged <a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b03\" rel=\"tag\" title=\"show questions tagged 'c++03'\">c++03</a>: One can consider the paper as a retrospective correction of C++03. However, in C++03, strictly speaking, a reference is not an entity (this was rectified by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#485\">CWG #485</a>) and therefore the identifier in its declaration is never treated as a name (see [basic]/4, a name must denote a label or entity) - hence copy elision doesn't apply, again.</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-10-27T16:41:46.907", "Id": "33372052", "Score": "18", "CreationDate": "2015-10-27T15:28:19.783", "LastActivityDate": "2015-10-27T16:41:46.907"}, "33371684": {"CommentCount": "5", "AcceptedAnswerId": "33372052", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-10-27T15:13:25.970", "LastActivityDate": "2015-10-27T16:41:46.907", "LastEditDate": "2017-05-23T10:27:22.690", "ViewCount": "490", "FavoriteCount": "4", "Title": "Does a reference declaration introduce a new name for the referent?", "Id": "33371684", "Score": "20", "Body": "<p>In <a href=\"https://stackoverflow.com/q/33344259/560648\">this question</a> we've learnt that RVO cannot be applied to an expression like <code>p.first</code>.</p>\n<p>In comments it was also suggested that RVO is generally not applied to an expression like <code>r</code> after a declaration like <code>auto&amp; r = p.first</code>. It is less clear whether the standard mandates this behaviour.</p>\n<blockquote>\n<p id=\"so_33371684_33371684_0\">in a return statement in a function with a class return type, when the expression is the <strong>name of a non-volatile automatic object</strong> (other than a function parameter or a variable introduced by the exception-declaration of a handler ([except.handle])) with the same type (ignoring cv-qualification) as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function's return value</p>\n</blockquote>\n<p>In the following code, is <code>r</code> a <em>name</em> of the object also known as <code>o</code>, to the extent that RVO is permissible when it forms the expression in a <code>return</code> statement?</p>\n<pre><code>int o = 42;\nint&amp; r = o;\n</code></pre>\n", "Tags": "<c++><c++11><language-lawyer><c++14><c++03>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33371684_33371684_0": {"section_id": 480, "quality": 0.8, "length": 32}, "so_33371684_33372052_0": {"section_id": 7029, "quality": 0.8125, "length": 13}}, "n3337": {"so_33371684_33371684_0": {"section_id": 471, "quality": 0.8, "length": 32}, "so_33371684_33372052_0": {"section_id": 6775, "quality": 0.8125, "length": 13}}, "n4659": {"so_33371684_33371684_0": {"section_id": 502, "quality": 0.925, "length": 37}, "so_33371684_33372052_0": {"section_id": 8526, "quality": 0.8125, "length": 13}}}});