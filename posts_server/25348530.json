post_cb({"25348530": {"CommentCount": "5", "AcceptedAnswerId": "25348602", "OwnerDisplayName": "user2953119", "CreationDate": "2014-08-17T10:52:02.610", "LastActivityDate": "2014-08-17T11:27:59.533", "PostTypeId": "1", "ViewCount": "92", "FavoriteCount": "0", "Title": "Invokation of principal constructor", "Id": "25348530", "Score": "3", "Body": "<p>The Standard defines three kinds of constructors:</p>\n<pre><code>\u2014 delegating constructor\n\u2014 target constructor\n\u2014 principal constructor\n</code></pre>\n<p>12.6.2/6:</p>\n<blockquote>\n<p id=\"so_25348530_25348530_0\">The principal constructor is the first constructor invoked in the\n  construction of an object (that is, <strong><em>not</em></strong> a target constructor for that\n  object\u2019s construction)</p>\n</blockquote>\n<p>But the same section says:</p>\n<blockquote>\n<p id=\"so_25348530_25348530_1\">Once the target constructor returns, the body of the delegating\n  constructor is executed</p>\n</blockquote>\n<p>Since, a target constructor and a delegating constructor cannot be a principal constructor. So what one is? I would like to consider that by example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nstruct A\n{\n    int a;\n    A(int a)\n    {\n        cout &lt;&lt; A::a &lt;&lt; endl;\n        A::a = a;\n    }\n\n    A(int a, int b)\n    {\n        cout &lt;&lt; A::a &lt;&lt; endl;\n        A::a = a + b;\n    }\n\n    A() : A(10,10)\n    {\n        cout &lt;&lt; \"A()\" &lt;&lt;endl;\n    }\n};\n\nA a; //Subsequence of constructor's body execution is A(int, int) --&gt; A()\n\nint main()\n{\n    cout &lt;&lt; a.a &lt;&lt; endl;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/15pSKs\" rel=\"nofollow\">demo</a></p>\n<p>What is a principal in the example?</p>\n", "Tags": "<c++><constructor>", "AnswerCount": "2"}, "25348703": {"ParentId": "25348530", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Consider the following example</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() \n{\n    struct A\n    {\n        A() : A( 10 ) {}\n        A( int x ) : A( x, 20 ) {}\n        A( int x, int y ) : x( x ), y( y ) {}\n        int x, y;\n    };\n\n    A a;\n\n    std::cout &lt;&lt; \"a.x = \" &lt;&lt; a.x &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"a.y = \" &lt;&lt; a.y &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>In this example constructor A() is a delegating constructor. It calls constructor A( int ) that in turn also a delegating constructor that calls constructor A( int, int ).</p>\n<p>In the definition </p>\n<pre><code>A a;\n</code></pre>\n<p>the first constructor that is invoked is A(). It is the principal constructor for this definition because it is called first. That is \"The principal constructor is the <strong>first constructor invoked\nin the construction of an object\"</strong>\"</p>\n<p>If you add one more definition to the body of main as for example</p>\n<pre><code>A a2( 5 );\n</code></pre>\n<p>then for this definition the principal constructor is A( int ).</p>\n<p>You made a wrong conclusion that a delegating constructor can not be a principal constructor. The first delegating constructor in the chain of delegating constructors is the principal constructor.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-08-17T11:27:59.533", "Id": "25348703", "Score": "1", "CreationDate": "2014-08-17T11:16:01.983", "LastActivityDate": "2014-08-17T11:27:59.533"}, "25348602": {"ParentId": "25348530", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In your example you have</p>\n<pre><code>struct A\n{\n    ...\n\n    A(int a, int b)\n    {\n        ...\n    }\n\n    A() : A(10,10) // A() is a delegating constructor and A(int,int) is the target constructor\n    {\n        ...\n    }\n};\n\nA a; \n</code></pre>\n<p>This means <code>A()</code> is the delegating constructor, <code>A(int,int)</code> is the target constructor.</p>\n<p>The standard says (N3690 \u00a712.6.2 - 6)</p>\n<blockquote>\n<p id=\"so_25348530_25348602_0\">The principal constructor is the first constructor invoked in the\n  construction of an object (that is, not a target constructor for that\n  object\u2019s construction).</p>\n</blockquote>\n<p>this means <code>A()</code> is both a principal and delegating constructor in your example and that <code>A(int,int)</code>, since it's called by a delegating constructor, it's a target constructor and it <strong>cannot</strong> be a principal constructor.</p>\n<hr>\n<p><strong>TL;DR</strong> (as suggested by pqnet):</p>\n<pre><code>principal  -&gt; the one you invoke\ndelegating -&gt; the one which calls another constructor\ntarget     -&gt; the one that is called by another constructor\n</code></pre>\n<p>As an unrelated sidenote I agree with Joachim: you're default-initializing a nonstatic member variable and printing its value through scope resolution before its initialization. That is undefined behavior.</p>\n</hr>", "OwnerUserId": "1938163", "LastEditorUserId": "1938163", "LastEditDate": "2014-08-17T11:22:15.017", "Id": "25348602", "Score": "4", "CreationDate": "2014-08-17T11:01:30.603", "LastActivityDate": "2014-08-17T11:22:15.017"}, "bq_ids": {"n4140": {"so_25348530_25348602_0": {"section_id": 433, "quality": 0.8333333333333334, "length": 10}, "so_25348530_25348530_1": {"section_id": 433, "quality": 1.0, "length": 8}, "so_25348530_25348530_0": {"section_id": 433, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_25348530_25348602_0": {"section_id": 425, "quality": 0.8333333333333334, "length": 10}, "so_25348530_25348530_1": {"section_id": 425, "quality": 1.0, "length": 8}, "so_25348530_25348530_0": {"section_id": 425, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_25348530_25348530_1": {"section_id": 451, "quality": 1.0, "length": 8}}}});