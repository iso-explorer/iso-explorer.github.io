post_cb({"bq_ids": {"n4140": {"so_11428147_11428197_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 5404}}, "n3337": {"so_11428147_11428197_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 5199}}, "n4659": {"so_11428147_11428197_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 6853}}}, "11428174": {"Id": "11428174", "PostTypeId": "2", "Body": "<p>Use a separate \"implementation header\" that you will still include everywhere?</p>\n", "LastActivityDate": "2012-07-11T08:03:58.540", "CommentCount": "0", "CreationDate": "2012-07-11T08:03:58.540", "ParentId": "11428147", "Score": "1", "OwnerUserId": "1459996"}, "11428186": {"Id": "11428186", "PostTypeId": "2", "Body": "<p>You are need specify only once prototype or realization. Both is eligible.  </p>\n", "LastActivityDate": "2012-07-11T08:04:36.453", "CommentCount": "0", "CreationDate": "2012-07-11T08:04:36.453", "ParentId": "11428147", "Score": "1", "OwnerUserId": "532208"}, "28354724": {"Id": "28354724", "PostTypeId": "2", "Body": "<p>I have found that in some embedded toolchains, the #inline keyword is not allowed in the function declaration.  You <em>can</em> specify it in the definition, but (as stated above) many compilers ignore the keyword anyway.</p>\n", "LastActivityDate": "2015-02-05T21:49:11.983", "CommentCount": "0", "CreationDate": "2015-02-05T21:49:11.983", "ParentId": "11428147", "Score": "0", "OwnerUserId": "4534905"}, "11428196": {"Id": "11428196", "PostTypeId": "2", "Body": "<p>Yes, but you have to put the implementation in the header file. That is because in order to be unlined, the definition has to be known, when including the header. </p>\n<p>If you do so, modern compilers will automatically inline the function even without the <code>inline</code> keyword.</p>\n", "LastEditorUserId": "1175824", "LastActivityDate": "2012-07-11T08:23:27.990", "Score": "1", "CreationDate": "2012-07-11T08:05:07.587", "ParentId": "11428147", "CommentCount": "0", "OwnerUserId": "1175824", "LastEditDate": "2012-07-11T08:23:27.990"}, "11428190": {"Id": "11428190", "PostTypeId": "2", "Body": "<p>By definition, inline functions must be known at compile time.\nIf you want to define them in a separate .h file, you can use a </p>\n<p>#pragma once</p>\n<p>trick to only insert their definition once.</p>\n", "LastActivityDate": "2012-07-11T08:04:42.803", "CommentCount": "2", "CreationDate": "2012-07-11T08:04:42.803", "ParentId": "11428147", "Score": "1", "OwnerUserId": "527723"}, "11428336": {"Id": "11428336", "PostTypeId": "2", "Body": "<p>Are you absolutely sure that making your functions 'inline' would improve your performance? I am pretty sure it will not.</p>\n<p>The compiler is able to inline some function calls if and only if it can see the body of the inlined functions. So you need to include the body of the function as well, but if do it, you do not need to annotate your function with 'inline' because the compiler only needs the body of the function -- not your 'inline' keyword. Compilers nowadays are smart and know without your hints whether and when to inline functions. And inlining does not necessarily increase your program's performance, and it is likely to increase your executable's size.</p>\n<p>See <a href=\"http://www.gotw.ca/gotw/033.htm\" rel=\"nofollow\">this article</a> by Herb Sutter. He argues that keyword \"inline\" has no meaning in C++. But I disagree with him. Keyword \"inline\" makes one difference: you can specify the body of the inline function more than once in the program (provided that it is exactly the same definition each time) -- this is useful when putting function bodies in headers (if you need this for any reason). </p>\n", "LastActivityDate": "2012-07-11T08:15:49.413", "CommentCount": "2", "CreationDate": "2012-07-11T08:15:49.413", "ParentId": "11428147", "Score": "2", "OwnerUserId": "838509"}, "11428197": {"Id": "11428197", "PostTypeId": "2", "Body": "<p>You can separate the declaration and definition fine, but that definition <em>must</em> be available in every translation unit that uses the function, e.g.:</p>\n<pre><code>#include &lt;iostream&gt;\n\ninline void foo();\n\nint main() {\n  foo();\n}\n\ninline void foo() {\n  std::cout &lt;&lt; \"Hi\\n\";\n}\n</code></pre>\n<p>is perfectly legal and correct.</p>\n<hr>\n<p>The exact quote from n3290 \u00a7 7.1.2.4 is:</p>\n<blockquote>\n<p id=\"so_11428147_11428197_0\">An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly\n  the same definition in every case (3.2). [ Note: A call to the inline function may be encountered before its\n  definition appears in the translation unit. \u2014end note ]</p>\n</blockquote>\n<p>Where \u00a7 3.2 basically says that it has to be identical everywhere, even overload resolutions etc.</p>\n</hr>", "LastEditorUserId": "168175", "LastActivityDate": "2012-07-11T08:43:40.537", "Score": "4", "CreationDate": "2012-07-11T08:05:10.587", "ParentId": "11428147", "CommentCount": "2", "OwnerUserId": "168175", "LastEditDate": "2012-07-11T08:43:40.537"}, "11428147": {"ViewCount": "2331", "Body": "<p>I need to define inline functions to improve performance of my code. At the moment declaration of functions are in .h file and definitions are in .cpp file. I added <strong>inline</strong> keyword at the front of each declaration of functions but I am getting link error. Is possible to separate declaration and definition of inline functions ?</p>\n", "Title": "Is possible to separate declaration and definition of inline functions?", "CreationDate": "2012-07-11T08:01:35.703", "LastActivityDate": "2015-02-05T21:49:11.983", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "Id": "11428147", "Score": "4", "OwnerUserId": "486578", "Tags": "<c++>", "AnswerCount": "7"}});