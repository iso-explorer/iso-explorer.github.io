post_cb({"7501211": {"CommentCount": "1", "ViewCount": "523", "CreationDate": "2011-09-21T14:07:30.783", "LastActivityDate": "2011-09-21T14:20:24.470", "Title": "How to set the alignment in a platform independent way?", "AcceptedAnswerId": "7501423", "PostTypeId": "1", "Id": "7501211", "Score": "4", "Body": "<p>In the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">latest draft of the c++11 standard</a>, chapter 3.11 talks about the alignment.<br>\nLater, the chapter 7.6.1 defines how to define an aligned structures (or variables?)</br></p>\n<p>If I define a structure like this :</p>\n<pre><code>alignas(16) struct A\n{\n  int n;\n  unsigned char[ 1020 ];\n};\n</code></pre>\n<p>does it means that all instances of the class A are going to be aligned to 16 bytes?</p>\n<p>Or, do I have to do it like in the next code?</p>\n<pre><code>struct A\n{\n  char data[300];\n};\nalignas(16) A a;\n</code></pre>\n<p>If both examples are wrong, how to do it properly?</p>\n<p>PS I am not looking for a compiler dependent solution.</p>\n", "Tags": "<c++><c++11><memory-alignment>", "OwnerUserId": "476681", "AnswerCount": "1"}, "7501423": {"ParentId": "7501211", "CommentCount": "3", "Body": "<p>Alignment is first and foremost a property of types.</p>\n<p>It can be overridden for a type with <code>alignas</code>; <code>alignas</code> can <em>also</em> be used to assign a new alignment value to a specific object.</p>\n<p>So, both examples are valid, and will have the semantics that you've presumed.</p>\n<blockquote>\n<p id=\"so_7501211_7501423_0\"><code>[n3290: 3.11/1]:</code> Object types have <em>alignment requirements</em> (3.9.1,\n  3.9.2) which place restrictions on the addresses at which an object of\n  that type may be allocated. An <em>alignment</em> is an implementation-defined\n  integer value representing the number of bytes between successive\n  addresses at which a given object can be allocated. <strong>An object type\n  imposes an alignment requirement on every object of that type;</strong>\n  stricter alignment can be requested using the alignment specifier\n  (7.6.2).</p>\n<p id=\"so_7501211_7501423_1\"><code>[n3290: 7.6.2/1]:</code> <strong>An <em>alignment-specifier</em> may be applied to a\n  variable or to a class data member</strong>, but it shall not be applied to a\n  bit-field, a function parameter, the formal parameter of a catch\n  clause (15.3), or a variable declared with the <code>register</code> storage class\n  specifier. <strong>An <em>alignment-specifier</em> may also be applied to the\n  declaration of a class or enumeration type.</strong> An <em>alignment-specifier</em>\n  with an ellipsis is a pack expansion (14.5.3).</p>\n<p id=\"so_7501211_7501423_2\"><code>[n3290: 7.6.2/2]:</code> When the alignment-specifier is of the form\n  <code>alignas( assignment-expression ):</code></p>\n<ul>\n<li>the assignment-expression shall be an integral constant expression</li>\n<li>if the constant expression evaluates\n  to a fundamental alignment, the alignment requirement of the declared\n  entity shall be the specified fundamental alignment</li>\n<li>if the constant\n  expression evaluates to an extended alignment and the implementation\n  supports that alignment in the context of the declaration, the\n  alignment of the declared entity shall be that alignment</li>\n<li>if the\n  constant expression evaluates to an extended alignment and the\n  implementation does not support that alignment in the context of the\n  declaration, the program is ill-formed</li>\n<li>if the constant expression\n  evaluates to zero, the alignment specifier shall have no effect</li>\n<li>otherwise, the program is ill-formed.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "7501423", "Score": "3", "CreationDate": "2011-09-21T14:20:24.470", "LastActivityDate": "2011-09-21T14:20:24.470"}, "bq_ids": {"n4140": {"so_7501211_7501423_0": {"section_id": 7240, "quality": 0.8260869565217391, "length": 38}, "so_7501211_7501423_2": {"section_id": 5533, "quality": 0.5714285714285714, "length": 4}, "so_7501211_7501423_1": {"section_id": 5532, "quality": 0.7631578947368421, "length": 29}}, "n3337": {"so_7501211_7501423_0": {"section_id": 6984, "quality": 0.8260869565217391, "length": 38}, "so_7501211_7501423_2": {"section_id": 5319, "quality": 0.7142857142857143, "length": 5}, "so_7501211_7501423_1": {"section_id": 5318, "quality": 0.8947368421052632, "length": 34}}, "n4659": {"so_7501211_7501423_0": {"section_id": 8749, "quality": 0.8043478260869565, "length": 37}, "so_7501211_7501423_1": {"section_id": 6968, "quality": 0.6052631578947368, "length": 23}, "so_7501211_7501423_2": {"section_id": 6969, "quality": 0.5714285714285714, "length": 4}}}});