post_cb({"34215377": {"Id": "34215377", "PostTypeId": "2", "Body": "<p><code>auto</code> means <em>\"work out the type for me\"</em>, not <em>\"accept any type\"</em>. There is no (builtin) type that this function can be declared as, therefore <code>auto</code> is not valid</p>\n", "Score": "1", "LastActivityDate": "2015-12-11T02:54:46.740", "CreationDate": "2015-12-11T02:54:46.740", "ParentId": "34215341", "CommentCount": "0", "OwnerUserId": "102441"}, "bq_ids": {"n4140": {"so_34215341_34215431_0": {"length": 22, "quality": 1.0, "section_id": 5453}}, "n4659": {"so_34215341_34215431_0": {"length": 22, "quality": 1.0, "section_id": 6879}}}, "34215341": {"ViewCount": "45", "Body": "<p>I am having problem with the code below,it generate errors and I believe is because apparently \"auto\" can't handle several types of return based on conditions.\nIs that the case or something else is wrong with my code?\nAlso if what I am trying to do is not possible this way, it is possible in any other way?</p>\n<pre><code>auto Game_Manager::getMember(string s)\n{\n    if (s == \"rows\")return rows; // return unsigned\n    else if (s == \"columns\")return columns; // return unsigned\n    else if (s == \"p1\")return p1; //return string\n    else if (s == \"p2\")return p2; //return string\n    else cout &lt;&lt; \"\\n\\nERROR!!! Invalid argument for getMember()\\n\\n\" &lt;&lt; endl;\n    return 1;\n}\n</code></pre>\n", "AcceptedAnswerId": "34215377", "Title": "can \"auto function()\" have several types of return inside the function body?", "CreationDate": "2015-12-11T02:50:01.863", "Id": "34215341", "CommentCount": "12", "PostTypeId": "1", "LastActivityDate": "2015-12-11T14:24:10.293", "Score": "0", "OwnerUserId": "5636797", "Tags": "<c++11><auto>", "AnswerCount": "2"}, "34215431": {"Id": "34215431", "PostTypeId": "2", "Body": "<p>Here's the rule of interest (from section 7.1.6.4 of the Standard)</p>\n<blockquote>\n<p id=\"so_34215341_34215431_0\">If a function with a declared return type that contains a placeholder type has multiple <code>return</code> statements, the return type is deduced for each <code>return</code> statement. <strong>If the type deduced is not the same in each deduction, the program is ill-formed.</strong></p>\n</blockquote>\n<p>So, all return statements must have the same type.</p>\n", "Score": "2", "LastActivityDate": "2015-12-11T03:03:20.333", "CreationDate": "2015-12-11T03:03:20.333", "ParentId": "34215341", "CommentCount": "0", "OwnerUserId": "103167"}});