post_cb({"13412898": {"Id": "13412898", "PostTypeId": "2", "Body": "<p>Here is the general rule:</p>\n<ul>\n<li><p>If the type is <code>T</code>, its size <code>N</code> is calculated as <code>sizeof(T)</code> bytes. So pointer of type <code>T*</code> is increased by <code>N</code> bytes if you increment the pointer by <code>1</code>.</p>\n<p>Mathematically, </p>\n<pre><code>T  *p = getT();\n\nsize_t diff = static_cast&lt;size_t&gt;(p+1) - static_cast&lt;size_t&gt;(p);\n\nbool alwaysTrue = (diff == sizeof(T)); //alwaysTrue is always true!\n</code></pre></li>\n</ul>\n", "LastActivityDate": "2012-11-16T08:27:32.410", "CommentCount": "0", "CreationDate": "2012-11-16T08:27:32.410", "ParentId": "13412850", "Score": "2", "OwnerUserId": "415784"}, "13412862": {"Id": "13412862", "PostTypeId": "2", "Body": "<p>the size of the pointer to any data types always be the same as supported by your system</p>\n<p>If system is 32 -bit the size would be 4 bytes for all the pointers.</p>\n<p>In pointer arithmetic when you do <code>ptr++</code> or <code>ptr--</code> the increments and decrements takes place according to the size of the data type this <code>ptr</code>pointer points to .</p>\n<pre><code>char *cptr;\nint *iptr;\nchar c[5];\nint a[5];\ncptr=c;\niptr=a;\n</code></pre>\n<p>By doing <code>cptr++</code> you will get <code>c[1]</code> and pointer will increments by only one byte \nYou can check the address of each char.</p>\n<p>Similarly <code>iptr++</code> will give you <code>a[1]</code> here pointer increased by 4 bytes.</p>\n<pre><code>int main()\n{\n int i;\n for(i=0;i&lt;5;i++)\n {\n  printf(\"%p\\t\",&amp;c[i]); //internally pointer arithmeitc: (c+sizeof(char)*i) , \n  printf(\"%p\\n\",&amp;a[i]); //intenally pointer arithmetic : (a+sizeof(int)*i)\n }\n}\n</code></pre>\n<p>Size of <code>int</code> or other data types are implementation defined</p>\n", "LastEditorUserId": "270060", "LastActivityDate": "2012-11-16T08:29:52.407", "Score": "2", "CreationDate": "2012-11-16T08:24:35.400", "ParentId": "13412850", "CommentCount": "3", "OwnerUserId": "270060", "LastEditDate": "2012-11-16T08:29:52.407"}, "13412850": {"ViewCount": "2977", "Body": "<blockquote>\n<p id=\"so_13412850_13412850_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/5610298/question-about-pointer-increment\">Question about pointer increment</a> </br></p>\n</blockquote>\n<p>When i increment a int pointer then its address have a gap of 4 bytes. why it is so ? why a int pointer takes 4 bytes to store whereas a char takes 2 bytes ?</p>\n", "Title": "Why a pointer to an integer increments by 4 bytes?", "CreationDate": "2012-11-16T08:23:17.953", "Id": "13412850", "CommentCount": "1", "LastEditDate": "2017-05-23T11:56:11.943", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-16T08:31:47.297", "Tags": "<c++><c><memory><pointers><increment>", "Score": "1", "OwnerUserId": "1677785", "ClosedDate": "2012-11-16T08:42:00.290", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_13412850_13412875_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 7211}, "so_13412850_13412875_1": {"length": 9, "quality": 1.0, "section_id": 7211}}, "n3337": {"so_13412850_13412875_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 6955}, "so_13412850_13412875_1": {"length": 9, "quality": 1.0, "section_id": 6955}}, "n4659": {"so_13412850_13412875_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 8720}, "so_13412850_13412875_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 8720}}}, "13412875": {"Id": "13412875", "PostTypeId": "2", "Body": "<p>When you increment a pointer of a type A, you <em>move</em> that pointer forward in the memory by the size of the type it points to. On your machine, int takes 4 bytes, so the pointer moves by 4 bytes.</p>\n<p>As for \"why does <code>int</code> take 4 bytes on my machine?\":</p>\n<p>The C++ standard says (4.9.1. paragraph 2):</p>\n<blockquote>\n<p id=\"so_13412850_13412875_0\">There are five standard signed integer types : \u201csigned char\u201d, \u201cshort\n  int\u201d, \u201cint\u201d, \u201clong int\u201d, and \u201clong long int\u201d. In this list, each type\n  provides at least as much storage as those preceding it in the list.\n  &lt;...&gt; Plain ints have the natural size suggested by the architecture\n  of the execution environment<sup>[44]</sup>; the other signed integer types are\n  provided to meet special needs.</p>\n<hr>\n<p id=\"so_13412850_13412875_1\"><sup>[44]</sup>: that is, large enough to contain any value in the\n  range of INT_MIN and INT_MAX, as defined in the header .</p>\n</hr></blockquote>\n<p>Basically, the sizes of fundamental types are not set in stone, and are implementation-defined. The accepted answer to <a href=\"https://stackoverflow.com/questions/13398630/why-are-c-int-and-long-types-both-4-bytes\">this SO question</a> has some information about it.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-16T08:31:47.297", "Score": "6", "CreationDate": "2012-11-16T08:25:38.577", "ParentId": "13412850", "CommentCount": "2", "OwnerUserId": "1490355", "LastEditDate": "2017-05-23T12:04:35.760"}, "13412911": {"Id": "13412911", "PostTypeId": "2", "Body": "<p>Because, on your computer, <code>sizeof (int) == 4</code>, so stepping from one <code>int</code> to the next requires an increment of four bytes.</p>\n<p>Most integer types have different sizes on different computers. <code>int</code> must have at least 16 bits, and is supposed to be a \"natural\" size for the computer. Most 32 or 64-bit platforms choose 32 bits as a \"natural\" size, and most computers have 8-bit bytes, so 4 bytes is a very common size for <code>int</code>.</p>\n<p>However, <code>sizeof (char) == 1</code> on all computers, so I'm rather surprised that you say \"a char takes 2 bytes\". It should only take one.</p>\n", "LastActivityDate": "2012-11-16T08:28:29.283", "CommentCount": "0", "CreationDate": "2012-11-16T08:28:29.283", "ParentId": "13412850", "Score": "1", "OwnerUserId": "204847"}, "13412870": {"Id": "13412870", "PostTypeId": "2", "Body": "<p>Pointers increment by the size in bytes of the things they point to. ints take 4 bytes on a 32-bit machine.</p>\n", "LastActivityDate": "2012-11-16T08:25:20.543", "CommentCount": "4", "CreationDate": "2012-11-16T08:25:20.543", "ParentId": "13412850", "Score": "1", "OwnerUserId": "161424"}, "13412866": {"Id": "13412866", "PostTypeId": "2", "Body": "<p>because the size of data (int) which the pointer is pointing has 4 byte size so the pointer increments 4 bytes (size of data (int))</p>\n<p>another example: if you have structure with size 8 byte and you have pointer pointing to this structure the increment of this pointer will be 8 byte:</p>\n<pre><code>struct test {\n   int x;\n   int y;\n}\n\nstruct test ARRAY[50];\nstruct test *p=ARRAY; // p pointer is pointing here to the first element ARRAY[0]. ARRAY[0] is with size 8 bytes\n\np++; // this will increment p with 8 byte (size of struct test). So p now is pointing to the second element ARRAY[1]\n</code></pre>\n", "LastEditorUserId": "1003575", "LastActivityDate": "2012-11-16T08:30:47.227", "Score": "1", "CreationDate": "2012-11-16T08:25:02.373", "ParentId": "13412850", "CommentCount": "0", "OwnerUserId": "1003575", "LastEditDate": "2012-11-16T08:30:47.227"}});