post_cb({"2395521": {"ParentId": "2395514", "CommentCount": "0", "Body": "<p>In short: in C may be in C++ no.</p>\n<p>Widely. C defines wchar_t as typedef but in Unix it is generally 4 bytes (so generally not short) and in Windows 2 so it may be short.</p>\n<p>Under C++ it is unique built-in type like <code>char</code> or <code>int</code>, so you can legally overload <code>void foo(short x)</code> and <code>void foo(wchar_t x)</code></p>\n", "OwnerUserId": "66522", "PostTypeId": "2", "Id": "2395521", "Score": "19", "CreationDate": "2010-03-07T07:34:03.880", "LastActivityDate": "2010-03-07T07:34:03.880"}, "2395514": {"CommentCount": "1", "ViewCount": "11025", "PostTypeId": "1", "LastEditorUserId": "140719", "CreationDate": "2010-03-07T07:30:31.893", "LastActivityDate": "2012-08-03T20:14:15.620", "Title": "Is wchar_t just a typedef of unsigned short?", "AcceptedAnswerId": "2395521", "LastEditDate": "2012-08-03T20:14:15.620", "Id": "2395514", "Score": "15", "Body": "<p>for example, does:</p>\n<pre><code>wchar_t x;\n</code></pre>\n<p>translate to:</p>\n<pre><code>unsigned short x;\n</code></pre>\n", "Tags": "<c++><c><unsigned><short><wchar-t>", "OwnerUserId": "282474", "AnswerCount": "6"}, "2395656": {"ParentId": "2395514", "CommentCount": "0", "Body": "<p>For C, <code>wchar_t</code> is a <code>typedef</code>. Whether it is a synonym for <code>unsigned int</code>, whether it is an unsigned type at all, or whether it is 4 bytes, is implementation-defined. </p>\n<p>In C++, <code>wchar_t</code> is a distinct built-in type. Here, too, its size and signedness is implementation-defined. </p>\n", "OwnerUserId": "140719", "PostTypeId": "2", "Id": "2395656", "Score": "11", "CreationDate": "2010-03-07T08:39:07.290", "LastActivityDate": "2010-03-07T08:39:07.290"}, "2395517": {"ParentId": "2395514", "CommentCount": "6", "Body": "<p>Not necessarily; it could be a 4-byte quantity, or indeed any other size chosen by the implementation.</p>\n<p>It depends on the compiler.</p>\n", "OwnerUserId": "15168", "PostTypeId": "2", "Id": "2395517", "Score": "0", "CreationDate": "2010-03-07T07:32:14.810", "LastActivityDate": "2010-03-07T07:32:14.810"}, "2395563": {"ParentId": "2395514", "CommentCount": "0", "Body": "<p>No, it doesn't.  It translates to 'a wide character.'  Making any assumptions about what that <em>happens to be</em> on a particular platform is incorrect, and defeats the <em>entire purpose</em> of having a wchar_t in the first place.</p>\n<p>The point of using an abstraction is to separate the semantic meaning of the type from its underlying representation.</p>\n", "OwnerUserId": "129175", "PostTypeId": "2", "Id": "2395563", "Score": "1", "CreationDate": "2010-03-07T07:59:44.267", "LastActivityDate": "2010-03-07T07:59:44.267"}, "2395531": {"ParentId": "2395514", "CommentCount": "2", "Body": "<p>wchar_t isn't required by the standard to be unsigned. It can also be signed.  And there must be another type of the same size; but the standard doesn't explicitly say that that other type must be short. </p>\n<blockquote>\n<p id=\"so_2395514_2395531_0\">\"the same size, signedness, and alignment requirements as one of the other integral types, called its underlying type\" (C++98 \u00a73.9.1). </p>\n</blockquote>\n<p>In C compilers this is a typedef, usually defined in stddef.h</p>\n", "OwnerUserId": "234815", "PostTypeId": "2", "Id": "2395531", "Score": "1", "CreationDate": "2010-03-07T07:39:20.917", "LastActivityDate": "2010-03-07T07:39:20.917"}, "bq_ids": {"n4140": {"so_2395514_2395531_0": {"section_id": 7214, "quality": 0.8, "length": 12}}, "n3337": {"so_2395514_2395531_0": {"section_id": 6958, "quality": 0.8, "length": 12}}, "n4659": {"so_2395514_2395531_0": {"section_id": 8723, "quality": 0.8, "length": 12}}}, "3664014": {"ParentId": "2395514", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>For anyone else who may come across this answer because function calls in your Visual Studio project won't link, despite both parties taking <code>wchar_t</code> (or a comparable type, such as <code>LPCTSTR</code> with UNICODE #defined), and when you DUMPBIN the library's exports the function takes <code>const unsigned short *</code>, be aware that VS allows you to switch off <code>wchar_t</code> as a built-in type. If someone changes this in a library, and you don't hit the same compiler switch in your project, it will not link.</p>\n<p>This option can be changed under \"Project Properties&gt;C/C++/Language/Treat WChar_t as Builtin type\", it can also be changed via the \"/Zc\" option.</p>\n", "OwnerUserId": "9279", "LastEditorUserId": "86375", "LastEditDate": "2012-01-04T00:00:55.743", "Id": "3664014", "Score": "14", "CreationDate": "2010-09-08T01:27:13.407", "LastActivityDate": "2012-01-04T00:00:55.743"}});