post_cb({"bq_ids": {"n4140": {"so_27606324_27606378_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 758}}, "n3337": {"so_27606324_27606378_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 746}}, "n4659": {"so_27606324_27606378_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 818}}}, "27606378": {"Id": "27606378", "PostTypeId": "2", "Body": "<p>The standard specifies how equal elements lie in the range in [unord.req]/6:</p>\n<blockquote>\n<p id=\"so_27606324_27606378_0\">In containers that support equivalent keys, <strong>elements with equivalent\n  keys are adjacent to each other in the iteration order of the\n  container</strong>. Thus, although the absolute order of elements in an\n  unordered container is not specified, its elements are  grouped into\n  equivalent-key groups such that all elements of each group have\n  equivalent keys. Mutating operations on unordered containers shall\n  preserve the relative order of elements within each equivalent-key\n  group unless otherwise specified.</p>\n</blockquote>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-12-22T17:34:17.383", "Score": "5", "CreationDate": "2014-12-22T16:16:42.750", "ParentId": "27606324", "CommentCount": "6", "OwnerUserId": "3647361", "LastEditDate": "2014-12-22T17:34:17.383"}, "27606479": {"Id": "27606479", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/unordered_set/unordered_multiset/\" rel=\"nofollow\">cplusplus.com</a></p>\n<blockquote>\n<p id=\"so_27606324_27606479_0\">Elements with equivalent values are grouped together in the same bucket and in such a way that an iterator (see <a href=\"http://www.cplusplus.com/unordered_multiset::equal_range\" rel=\"nofollow\">equal_range</a>) can iterate through all of them.</p>\n</blockquote>\n<p>From standard:</p>\n<blockquote>\n<p id=\"so_27606324_27606479_1\"><strong>unordered_multiset::equal_range</strong>: The member function returns a range that contains all of  the  elements with the specified key. It returns make_pair(end(), end()) if no such elements exist</p>\n</blockquote>\n<p>to understand see also equal_range:</p>\n<blockquote>\n<p id=\"so_27606324_27606479_2\">Thus, the function determines the largest range of positions over which val can be inserted  in  the sequence and still preserve  its ordering.</p>\n</blockquote>\n<p><strong>There is no mandate about HOW this ordering is preserved</strong>.</p>\n<p>It is not specified anywhere that equal elements need to be contiguos if they have same key and value. Same key may mean that elements with same hash could be grouped togheter (equivalent means same hash), infact the following test provide a example in wich different elements are grouped by key (all have key 1 because of overrided hash_function), but the code is still working correctly.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct my_hash\n{\n    size_t operator()(const T k) const\n    {\n    // Compute individual hash values for two data members and combine them using XOR and bit shifting\n    return 1;\n    }\n};\n\nint main() {\n    typedef std::unordered_multiset&lt;int,my_hash&lt;int&gt; &gt; int_set;\n    typedef int_set::iterator int_set_iterator;\n\n    int_set set;\n    set.insert(1);\n    set.insert(2);\n    set.insert(1);\n    set.insert(2);\n    set.insert(3);\n    set.insert(1);\n\n    // equal_range seems to assume all 1s are located next to each other\n    std::pair&lt;int_set_iterator, int_set_iterator&gt; range = set.equal_range(1);\n    size_t range_size = std::distance(range.first, range.second);\n    std::cout&lt;&lt;range_size&lt;&lt;std::endl; // print 3\n\n    range = set.equal_range(2);\n    range_size = std::distance(range.first, range.second);\n    std::cout&lt;&lt;range_size&lt;&lt;std::endl; //print 2\n\n    range = set.equal_range(3);\n    range_size = std::distance(range.first, range.second);\n    std::cout&lt;&lt;range_size&lt;&lt;std::endl; //print 1\n\n    return 0;\n}\n</code></pre>\n<p>In short words, equal_range on unordered_multiset, generate a \"list\" of values that are first selected by key (hash value), then, those values are \"filtered\" so that they are equivalent and (according to equal_range spec) ordered by  operator &lt;=</p>\n<p>This is all based on specifications, implementation still open.\nSince the question is \"HOW\", a possible way would be</p>\n<ol>\n<li>Take elements in the bucket with a given hash_code</li>\n<li>start filtering elements discarding unneeded elements with operator &lt;=</li>\n</ol>\n<p>A smart implementation of the unordered_multiset would \"pre_filter\" in some way the elements so that calling \"equal_range\" is cheap. but a implementation's is not required to be so smart and could as well incurr a performance penality when calling \"range_equals\" (assuming you have a not very smart hash_function)</p>\n", "LastEditorUserId": "1829943", "LastActivityDate": "2014-12-22T17:18:40.857", "Score": "4", "CreationDate": "2014-12-22T16:23:26.197", "ParentId": "27606324", "CommentCount": "3", "OwnerUserId": "1829943", "LastEditDate": "2014-12-22T17:18:40.857"}, "27606324": {"ViewCount": "153", "Body": "<p>My understanding is that we can't make any assumptions about the order of the elements within unordered... containers (even though they are implemented via hash tables). If that is correct, how can std::unordered_multiset::equal_range() return a range of equal values?</p>\n<p>For instance:</p>\n<pre><code>typedef std::unordered_multiset&lt;int&gt; int_set;\ntypedef int_set::iterator int_set_iterator;\n\nint_set set;\nset.insert(1);\nset.insert(2);\nset.insert(1);\nset.insert(3);\nset.insert(1);\n\n// equal_range seems to assume all 1s are located next to each other\nstd::pair&lt;int_set_iterator, int_set_iterator&gt; range = set.equal_range(1);\n\nsize_t range_size = std::distance(range.first, range.second); // the value is 3\n</code></pre>\n", "AcceptedAnswerId": "27606378", "Title": "equal_range and std::unordered_multiset", "CreationDate": "2014-12-22T16:13:25.817", "Id": "27606324", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2014-12-22T17:34:17.383", "Score": "1", "OwnerUserId": "8899", "Tags": "<c++><c++11><stl>", "AnswerCount": "2"}});