post_cb({"25376509": {"Id": "25376509", "PostTypeId": "2", "Body": "<p>This is not a bug in MSVC. From the standard, \u00a73.4.5 [basic.lookup.classref]/p2-3 (quoting N3936, emphasis mine):</p>\n<blockquote>\n<p id=\"so_25376209_25376509_0\">If the <em>id-expression</em> in a class member access (5.2.5) is an\n  <em>unqualified-id</em>, [...]</p>\n<p id=\"so_25376209_25376509_1\">If the <em>unqualified-id</em> is <code>~type-name</code>, the <em>type-name</em> is looked up\n  in the context of the entire <em>postfix-expression</em>. If the type <code>T</code> of\n  the object expression is of a class type <code>C</code>, the type-name is also\n  looked up in the scope of class <code>C</code>. <strong>At least one of the lookups\n  shall find a name that refers to (possibly cv-qualified) <code>T</code>.</strong></p>\n</blockquote>\n<p>In your code, <code>T</code> is <code>B</code>, and lookup for <code>IBase</code> obviously can't find a name that refers to <code>B</code>. Therefore, your code is ill-formed. If g++ accepts it, it's either a bug or an extension.</p>\n<p>Since it sounds like the actual type <code>B</code> represents is \"unspeakable\" in your real code, but <code>IBase</code> is OK to write, the simplest solution would be simply to cast <code>b</code> to <code>IBase *</code>.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-19T08:51:57.937", "Score": "3", "CreationDate": "2014-08-19T05:53:20.890", "ParentId": "25376209", "CommentCount": "6", "OwnerUserId": "2756719", "LastEditDate": "2014-08-19T08:51:57.937"}, "25376503": {"Id": "25376503", "PostTypeId": "2", "Body": "<p>Base Class Destructors are invoked automatically. If you call the base class destructor manually then when the object gets destroyed it will be invoked a second time.</p>\n", "LastActivityDate": "2014-08-19T05:52:55.073", "CommentCount": "2", "CreationDate": "2014-08-19T05:52:55.073", "ParentId": "25376209", "Score": "-1", "OwnerUserId": "1772419"}, "25376209": {"ViewCount": "168", "Body": "<p>Just like the title says. The following contrived example seems to work on codepad: <a href=\"http://codepad.org/4cgGmvDQ\" rel=\"nofollow\">http://codepad.org/4cgGmvDQ</a> and under GCC 4.1.2 on my Linux box. </p>\n<pre><code>#include&lt;stdlib.h&gt;\n#include&lt;new&gt;\n\nclass IBase\n{\npublic:\n    virtual ~IBase(){}\n};\n\nclass B : public IBase\n{\npublic:\n    virtual ~B(){}\n};\n\nclass D : public B\n{\npublic:\n    virtual ~D(){ }\n};\n\nint main()\n{\n    void* p = malloc(sizeof(D));\n\n    D* d = new(p) D();\n\n    B* b = static_cast&lt;B*&gt;(d);\n\n    b-&gt;~IBase();\n\n    free(p);\n}\n</code></pre>\n<p>But Visual Studio Pro 2012 11.0.61030.00 Update 4 fails with:</p>\n<p><code>main.cpp(30): error C2300: 'B' : class does not have a destructor called '~IBase'</code></p>\n<p>Obviously the example could easily be reworked to avoid the issue, but my actual code base doesn't give me any other options. Is anyone familiar with this particular failing of the Microsoft compiler?</p>\n", "AcceptedAnswerId": "25376509", "Title": "Compile error when explicitly calling the base class destructor on a derived pointer", "CreationDate": "2014-08-19T05:28:15.673", "Id": "25376209", "CommentCount": "4", "LastEditDate": "2014-08-19T05:59:26.200", "PostTypeId": "1", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-19T08:51:57.937", "Score": "1", "OwnerUserId": "1114233", "Tags": "<c++><visual-studio><destructor><placement-new>", "AnswerCount": "3"}, "25376351": {"Id": "25376351", "PostTypeId": "2", "Body": "<p>This is a known bug. As to \"why\" it fails, I have no answer. The workaround for your example may be:</p>\n<p>b-&gt;IBase::~IBase();</p>\n", "LastActivityDate": "2014-08-19T05:40:39.240", "CommentCount": "4", "CreationDate": "2014-08-19T05:40:39.240", "ParentId": "25376209", "Score": "-1", "OwnerUserId": "3651664"}, "bq_ids": {"n4140": {"so_25376209_25376509_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5891}, "so_25376209_25376509_1": {"length": 24, "quality": 0.96, "section_id": 7128}}, "n3337": {"so_25376209_25376509_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5662}, "so_25376209_25376509_1": {"length": 24, "quality": 0.96, "section_id": 6872}}, "n4659": {"so_25376209_25376509_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7374}, "so_25376209_25376509_1": {"length": 22, "quality": 0.88, "section_id": 8629}}}});