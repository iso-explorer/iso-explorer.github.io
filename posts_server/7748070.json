post_cb({"bq_ids": {"n4140": {"so_7748070_7748110_0": {"section_id": 6045, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_7748070_7748110_0": {"section_id": 5813, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_7748070_7748110_0": {"section_id": 7544, "quality": 0.9230769230769231, "length": 12}}}, "7748123": {"ParentId": "7748070", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I'm pretty sure the answer is \"No.\"</p>\n<p>For instance, in Visual C++, a variadic function will have a different calling convention than a normal function (when using <code>/Gz</code>).</p>\n<p>The calling convention determines what pre-call and post-call assembly code is generated, and you cannot safely mix the two.</p>\n", "OwnerUserId": "567650", "LastEditorUserId": "567650", "LastEditDate": "2011-10-13T00:35:38.047", "Id": "7748123", "Score": "2", "CreationDate": "2011-10-13T00:28:08.543", "LastActivityDate": "2011-10-13T00:35:38.047"}, "7748070": {"CommentCount": "3", "AcceptedAnswerId": "7748110", "PostTypeId": "1", "LastEditorUserId": "239916", "CreationDate": "2011-10-13T00:20:31.070", "LastActivityDate": "2011-10-13T00:40:40.303", "LastEditDate": "2011-10-13T00:40:40.303", "ViewCount": "951", "FavoriteCount": "1", "Title": "C++ vararg function pointer", "Id": "7748070", "Score": "1", "Body": "<p>Does the following result in well-defined behavior? That is, if you cast a non-vararg function f as a vararg function g and call g with the arguments that f expects, does the behavior match that of calling f with those arguments?</p>\n<pre><code>class Base {};\n\nclass Derived1 : public Base {\npublic:\n    int getInt1() {return 1;}\n};\n\nclass Derived2 : public Base {\npublic:\n    int getInt2() {return 2;}\n};\n\ntypedef int (*vfunc)(...);\n\nint foo (vfunc f) {\n    Derived1 d1;\n    Derived2 d2;\n    return f(&amp;d1, &amp;d2);\n}\n\nint bar (Derived1 * p1, Derived2 * p2) {\n    return p1-&gt;getInt1() + p2-&gt;getInt2();\n}\n\nint main (int argc, char ** argv) {\n    return foo((vfunc)bar); // Is this program guaranteed to return 3?\n}\n</code></pre>\n<p><strong>UPDATE</strong></p>\n<p>Is there some way I can get the program to be well-defined, even if using proprietary keywords? Such as doing some stuff like <code>__cdecl</code> mentioned here:</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/984x0h58%28v=vs.80%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/984x0h58%28v=vs.80%29.aspx</a></p>\n<p>My end goal is to have a <code>matcher</code> function that tries matching on a list of X pointers. The matcher function takes in a predicate (not necessarily a function... might be a list) and takes in a function that it will pass the matched results to. The callback function passed to it takes the same argument types and arity as the predicate matched.</p>\n", "Tags": "<c++><variadic-functions>", "OwnerUserId": "239916", "AnswerCount": "2"}, "7748110": {"ParentId": "7748070", "CommentCount": "2", "Body": "<p>No, the behavior is undefined, per C++11 5.2.11/6 (<code>reinterpret_cast</code>):</p>\n<blockquote>\n<p id=\"so_7748070_7748110_0\">The effect of calling a function through a pointer to a function type that is not the same as the type used in the definition of the function is undefined.</p>\n</blockquote>\n<p>The type of <code>bar</code> is <code>int(Derived1*, Derived2*)</code>.  The type of the function pointed to by <code>f</code> (the expression through which the call is made) is <code>int(...)</code>.  The two are not the same and therefore the behavior is undefined.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "7748110", "Score": "5", "CreationDate": "2011-10-13T00:26:33.903", "LastActivityDate": "2011-10-13T00:26:33.903"}});