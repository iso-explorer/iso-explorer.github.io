post_cb({"30552141": {"CommentCount": "8", "ViewCount": "124", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-05-30T22:53:15.287", "LastActivityDate": "2015-05-31T01:26:07.053", "Title": "Where in the Standard does it say that a member alias-declaration can be used as if it was a static member?", "AcceptedAnswerId": "30552236", "LastEditDate": "2015-05-31T01:26:07.053", "Id": "30552141", "Score": "4", "Body": "<p>Consider the following snippet:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct A { int i; using Int = int; };\n\nint main()\n{\n    std::cout &lt;&lt; sizeof(A::Int) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>It compiles and executes normally in <a href=\"http://coliru.stacked-crooked.com/a/953568c85cf422da\" rel=\"nofollow\">clang</a> and GCC. I know this looks obvious, but I couldn't find anything in the Standard (C++14) supporting the reference to <code>A::Int</code> in <code>main()</code>.</p>\n", "Tags": "<c++><alias><language-lawyer><c++14>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "30552236": {"ParentId": "30552141", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>This is just your normal qualified lookup. From [basic.lookup.qual]:</p>\n<blockquote>\n<p id=\"so_30552141_30552236_0\">The name of a class or namespace member or enumerator can be referred to after the <code>::</code> scope resolution\n  operator (5.1) applied to a <em>nested-name-specifier</em> that denotes its class, namespace, or enumeration.</p>\n</blockquote>\n<p>Then from [class.qual]:</p>\n<blockquote>\n<p id=\"so_30552141_30552236_1\">If the <em>nested-name-specifier</em> of a <em>qualified-id</em> nominates a class, the name specified after the <em>nested-namespecifier</em>\n  is looked up in the scope of the class (10.2), except for the cases listed below. The name shall\n  represent one or more members of that class or of one of its base classes (Clause 10). <em>[ Note:</em> A class member\n  can be referred to using a <em>qualified-id</em> at any point in its potential scope (3.3.7). <em>\u2014end note ]</em> The exceptions\n  to the name lookup rule above are the following:</p>\n<ul>\n<li>a destructor name [...]</li>\n<li>a <em>conversion-type-id</em> of a <em>conversion-function-id</em> [...]</li>\n<li>the names in a <em>template-argument</em> of a <em>template-id</em> [...]</li>\n<li>the lookup for a name specified in a <em>using-declaration</em> [...]</li>\n</ul>\n</blockquote>\n<p>The <em>nested-name-specifier</em> in your example is <code>A</code>, which is a class. None of those exceptions apply. So we just look up the name, <code>Int</code>, in the scope of class.</p>\n<p>From [dcl.typedef]:</p>\n<blockquote>\n<p id=\"so_30552141_30552236_2\">A name declared with the <code>typedef</code> specifier becomes a <em>typedef-name</em>. Within the scope of its declaration, a\n  <em>typedef-name</em> is syntactically equivalent to a keyword and names the type associated with the identifier in\n  the way described in Clause 8. A <em>typedef-name</em> is thus a synonym for another type.<br>\n  [...]<br>\n  A <em>typedef-name</em> can also be introduced by an <em>alias-declaration</em>. The identifier following the using keyword\n  becomes a <em>typedef-name</em> and the optional <em>attribute-specifier-seq</em> following the identifier appertains to that\n  <em>typedef-name</em>. It has the same semantics as if it were introduced by the <code>typedef</code> specifier.</br></br></p>\n</blockquote>\n<p>So your <em>alias-declaration</em> introduces the name <code>Int</code> into the scope of <code>A</code>, which is found according to the qualified lookup rules I just enumerated.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-05-30T23:16:08.543", "Id": "30552236", "Score": "5", "CreationDate": "2015-05-30T23:07:54.083", "LastActivityDate": "2015-05-30T23:16:08.543"}, "bq_ids": {"n4140": {"so_30552141_30552236_1": {"section_id": 7113, "quality": 0.8571428571428571, "length": 42}, "so_30552141_30552236_2": {"section_id": 5407, "quality": 0.54, "length": 27}, "so_30552141_30552236_0": {"section_id": 7107, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_30552141_30552236_1": {"section_id": 6857, "quality": 0.8571428571428571, "length": 42}, "so_30552141_30552236_2": {"section_id": 5202, "quality": 0.54, "length": 27}, "so_30552141_30552236_0": {"section_id": 6851, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_30552141_30552236_1": {"section_id": 8614, "quality": 0.8571428571428571, "length": 42}, "so_30552141_30552236_2": {"section_id": 6829, "quality": 0.54, "length": 27}, "so_30552141_30552236_0": {"section_id": 8608, "quality": 0.9473684210526315, "length": 18}}}});