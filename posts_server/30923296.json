post_cb({"30923296": {"CommentCount": "5", "ViewCount": "259", "PostTypeId": "1", "LastEditorUserId": "4821282", "CreationDate": "2015-06-18T18:43:30.937", "LastActivityDate": "2015-06-18T19:33:23.440", "Title": "pointer to member function of incomplete type", "AcceptedAnswerId": "30924216", "LastEditDate": "2015-06-18T19:31:04.993", "Id": "30923296", "Score": "8", "Body": "<p>I don't understand why adding a forward declaration for a class changes a size of its pointer to member type</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    //struct CL;\n    //cout&lt;&lt;sizeof(int (CL::*)())&lt;&lt;endl; \n    struct CL{};\n    cout&lt;&lt;sizeof(int (CL::*)())&lt;&lt;endl;\n}\n</code></pre>\n<p>output VS2013:<br>\n4</br></p>\n<p>But if I uncomment the first two lines in main(), then the output is different:<br>\n16<br>\n16  </br></br></p>\n<p>So, only a simple adding a forward declaration before a definition of struct CL increases a size of a pointer to member of CL. Why? I know that a size of member function pointer depends by structure of a type (e.g. virtual functions and base classes may increase it), but why can the sizeof operator be applied to a pointer to member of an incomplete type? Or it can't? I have not found it in the Standard</p>\n", "Tags": "<c++><incomplete-type><pointer-to-member>", "OwnerUserId": "3514538", "AnswerCount": "1"}, "30924216": {"ParentId": "30923296", "CommentCount": "1", "CreationDate": "2015-06-18T19:33:23.440", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "30924216", "Score": "8", "Body": "<p>The MSVC compiler uses different sizes for pointers to member functions as an optimization. This optimization violates the Standard. Kudos to <a href=\"https://social.msdn.microsoft.com/profile/igor%20tandetnik/\">Igor Tandetnik</a> mentioning <code>reinterpret_cast</code> in <a href=\"https://social.msdn.microsoft.com/Forums/vstudio/en-US/a9cfa5c4-d90b-4c33-89b1-9366e5fbae74/strange-error-while-casting-pointers-to-member-functions?forum=vclanguage\">a MSDN form post</a>, [expr.reinterpret.cast]p10</p>\n<blockquote>\n<p id=\"so_30923296_30924216_0\">A prvalue of type \u201cpointer to member of <code>X</code> of type <code>T1</code>\u201d can be\n  explicitly converted to a prvalue of a different type \u201cpointer to\n  member of <code>Y</code> of type <code>T2</code>\u201d if <code>T1</code> and <code>T2</code> are both function types\n  or both object types. The null member pointer value is converted to\n  the null member pointer value of the destination type. The result of\n  this conversion is unspecified, except in the following cases:</p>\n<ul>\n<li>converting a prvalue of type \u201cpointer to member function\u201d to a different pointer to member function type and back to its original\n  type yields the original pointer to member value.</li>\n</ul>\n</blockquote>\n<p>So there's a roundtrip guarantee, this effectively forces conforming implementations to use the same size for all pointer to member function types.</p>\n<hr>\n<p>The MSVC optimization is performed if the <a href=\"https://msdn.microsoft.com/en-us/library/yad46a6z.aspx\"><code>/vmb</code> switch</a> is set. For the case of single inheritance, the optimised pointer to member function requires only a <code>void*</code>-sized storage, see <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2004/02/09/70002.aspx\">The Old New Thing: Pointers to member functions are very strange animals</a>.</p>\n<p>If you only forward-declare the type <code>CL</code> and then form a pointer-to-member function, the optimization hopefully is deactivated (I could not find any documentation on that, unfortunately). Otherwise, you might get inconsistent sizes before and after the definition of <code>CL</code>.</p>\n<p>By the way, you can get inconsistent sizes for enumerations in VS2010, if you forward-declare them <em>without specifying an underlying type</em> and later explicitly define the underlying type for the definition of the enum. This works only with language extensions activated.</p>\n</hr>", "LastActivityDate": "2015-06-18T19:33:23.440"}, "bq_ids": {"n4140": {"so_30923296_30924216_0": {"section_id": 6049, "quality": 0.9487179487179487, "length": 37}}, "n3337": {"so_30923296_30924216_0": {"section_id": 5817, "quality": 0.9487179487179487, "length": 37}}, "n4659": {"so_30923296_30924216_0": {"section_id": 7548, "quality": 0.9487179487179487, "length": 37}}}});