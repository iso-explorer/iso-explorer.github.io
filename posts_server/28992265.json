post_cb({"28992608": {"ParentId": "28992265", "CommentCount": "2", "Body": "<p>[basic.scope.temp]/p1:</p>\n<blockquote>\n<p id=\"so_28992265_28992608_0\">The declarative region of the name of a template parameter of a\n  template <em>template-parameter</em> is the smallest <em>template-parameter-list</em>\n  in which the name was introduced.</p>\n</blockquote>\n<p><sub>(Now try saying that 10 times.)</sub></p>\n<p>It can be used inside that list. For instance,</p>\n<pre><code>template &lt; template&lt;class T, T t&gt; class TP &gt; class foo {};\n//                           ^  ^-----T's scope ends here\n//                           |\n//                           T can be used here\n\nfoo&lt;std::integral_constant&gt; bar;\n</code></pre>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "28992608", "Score": "8", "CreationDate": "2015-03-11T16:50:27.267", "LastActivityDate": "2015-03-11T16:50:27.267"}, "28992265": {"CommentCount": "1", "AcceptedAnswerId": "28992608", "PostTypeId": "1", "LastEditorUserId": "1914005", "CreationDate": "2015-03-11T16:34:17.847", "LastActivityDate": "2015-03-26T00:54:51.663", "LastEditDate": "2015-03-26T00:54:51.663", "ViewCount": "369", "FavoriteCount": "1", "Title": "Is there any use for named parameters into template template parameters", "Id": "28992265", "Score": "7", "Body": "<p>If I need to define a template <code>foo</code> function with a template-template parameter, I usually do the following:</p>\n<pre><code>// Notice that the template parameter of class T is unnamed.\ntemplate &lt;template &lt;typename&gt; class T&gt; void f() { std::cout &lt;&lt; \"Yay!\\n\"; }\n</code></pre>\n<p>Notice that the template parameter of the template-template parameter is unnamed, but we can assign a name to this parameter:</p>\n<pre><code>// Now the template parameter of class T is named INNER.\ntemplate &lt;template &lt;typename INNER&gt; class T&gt; void f(const INNER &amp;inner)\n{ std::cout &lt;&lt; inner &lt;&lt; \" Yay!\\n\"; }\n</code></pre>\n<p>This doesn't seems to be usefull at all, because I cannot reffer the <code>INNER</code> parameter in the function, the code above produces the following error:</p>\n<blockquote>\n<p id=\"so_28992265_28992265_0\">error: 'INNER' does not name a type</p>\n</blockquote>\n<p>It surprises me that the <code>typename INNER</code> doesn't name a type, after all the <code>typename</code> keyword is there in order to naming a type. Anyway, this is easy to fix though:</p>\n<pre><code>// Now INNER is the name of the template parameter of class T and also\n// the name of the second template parameter of foo.\ntemplate &lt;template &lt;typename INNER&gt; class T, typename INNER&gt; void f(const INNER &amp;inner)\n{ std::cout &lt;&lt; inner &lt;&lt; \" Yay!\\n\"; }\n// ...\nf&lt;std::valarray, int&gt;(666); // Prints \"666 Yay!\"\n</code></pre>\n<p>But in the end, the <code>INNER</code> parameter doesn't need a name after all:</p>\n<pre><code>// Now the template parameter of class T is unnamed one more time,\n// INNER is the name of the second template parameter of foo.\ntemplate &lt;template &lt;typename&gt; class T, typename INNER&gt; void f(const INNER &amp;inner)\n{ std::cout &lt;&lt; inner &lt;&lt; \" Yay!\\n\"; }\n// ...\nf&lt;std::valarray, int&gt;(666); // Prints \"666 Yay!\"\n</code></pre>\n<p>And (sure you already noticed before me) the name in the parameter of the template-template parameter is ignored! It sure have been ignored because if not it should have a name-clash with the second template parameter of <code>foo</code>, doesn't it?</p>\n<p>Another demonstration of the name of the parameter of the template-template parameter being ignored:</p>\n<pre><code>// Now T is the name of the template parameter of class T and also\n// the name of the template parameter of foo!\ntemplate &lt;template &lt;typename T&gt; class T&gt; void f()\n{ std::cout &lt;&lt; \"Yay!\\n\"; }\n// ...\nf&lt;std::valarray&gt;(); // prints \"Yay!\"\n</code></pre>\n<p>The type named <code>T</code> is being used by the template-template parameter and by the template-template itself at the same time? I don't think so, the name into the template-template parameter is ignored AFAIK.</p>\n<p>So, what's the question?</p>\n<ol>\n<li>Are my guess correct? The names of named template parameters of template-template parameters are ignored?</li>\n<li>If I'm mistaken and I've misunderstood the whole thing, there's a use for the named parameters into the template-template parameters? Can you provide some useful examples?</li>\n</ol>\n<p>As for <em>useful examples</em> on #2 i'm referring to something that only could be achieved using the named template parameters of template-template parameters.</p>\n", "Tags": "<c++><templates><template-templates>", "OwnerUserId": "499359", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28992265_28992608_0": {"section_id": 7073, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_28992265_28992608_0": {"section_id": 6817, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_28992265_28992265_0": {"section_id": 180, "quality": 0.8, "length": 4}, "so_28992265_28992608_0": {"section_id": 8574, "quality": 0.9230769230769231, "length": 12}}}});