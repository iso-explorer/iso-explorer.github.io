post_cb({"15641365": {"ParentId": "15641318", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>A constructor that takes an <code>std::initializer_list</code> is considered when you use list-initialization. That's an initialization that involves a braced initialization list:</p>\n<pre><code>QVector&lt;int&gt; v{1, 2, 3, 4, 5};\n// or equivalently\nQVector&lt;int&gt; v = {1, 2, 3, 4, 5};\n</code></pre>\n<p>Note that this is a C++11 feature. In fact, the first syntax is new to C++11, while the second could have been used in C++03 for aggregate initialization.</p>\n<p>You can also use direct-initialization and pass the initializer list as the argument:</p>\n<pre><code>QVector&lt;int&gt; v({1, 2, 3, 4, 5});\n</code></pre>\n<p>Since the constructor is not <code>explicit</code>, it can also be used in some other interesting ways:</p>\n<ol>\n<li><p>Passing a <code>QVector</code> argument:</p>\n<pre><code>void foo(QVector&lt;int&gt;);\n\nfoo({1, 2, 3, 4, 5});\n</code></pre></li>\n<li><p>Returning a <code>QVector</code>:</p>\n<pre><code>QVector&lt;int&gt; bar()\n{\n  return {1, 2, 3, 4, 5};\n}\n</code></pre></li>\n</ol>\n<hr>\n<p>\u00a78.5.4 List-initialization [dcl.init.list]:</p>\n<blockquote>\n<p id=\"so_15641318_15641365_0\">A constructor is an <em>initializer-list constructor</em> if its first parameter is of type <code>std::initializer_list&lt;E&gt;</code> or reference to possibly cv-qualified <code>std::initializer_list&lt;E&gt;</code> for some type <code>E</code>, and either there are no other parameters or else all other parameters have default arguments (8.3.6).</p>\n</blockquote>\n<p>\u00a713.3.1.7 Initialization by list-initialization [over.match.list]:</p>\n<blockquote>\n<p id=\"so_15641318_15641365_1\">When objects of non-aggregate class type <code>T</code> are list-initialized (8.5.4), overload resolution selects the constructor in two phases:</p>\n<ul>\n<li><p id=\"so_15641318_15641365_2\">Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class <code>T</code> and the argument list consists of the initializer list as a single argument.</p></li>\n<li><p id=\"so_15641318_15641365_3\">[...]</p></li>\n</ul>\n</blockquote>\n</hr>", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2013-03-26T15:59:35.353", "Id": "15641365", "Score": "11", "CreationDate": "2013-03-26T15:46:28.653", "LastActivityDate": "2013-03-26T15:59:35.353"}, "15641318": {"CommentCount": "0", "AcceptedAnswerId": "15641365", "PostTypeId": "1", "LastEditorUserId": "1364752", "CreationDate": "2013-03-26T15:44:23.487", "LastActivityDate": "2013-04-29T13:22:44.397", "LastEditDate": "2013-04-29T13:22:44.397", "ViewCount": "8424", "FavoriteCount": "1", "Title": "Anyone give me an example to use QVector::QVector(std::initializer_list<T> args)?", "Id": "15641318", "Score": "7", "Body": "<p>Anyone give me an example to use the following constructor int Qt?</p>\n<pre><code>QVector::QVector(std::initializer_list&lt;T&gt; args);\n</code></pre>\n", "Tags": "<c++><qt><c++11><initializer-list>", "OwnerUserId": "1899020", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15641318_15641365_1": {"section_id": 599, "quality": 0.9230769230769231, "length": 12}, "so_15641318_15641365_0": {"section_id": 3324, "quality": 0.9615384615384616, "length": 25}, "so_15641318_15641365_2": {"section_id": 599, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_15641318_15641365_1": {"section_id": 589, "quality": 0.9230769230769231, "length": 12}, "so_15641318_15641365_0": {"section_id": 3194, "quality": 0.9615384615384616, "length": 25}, "so_15641318_15641365_2": {"section_id": 589, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_15641318_15641365_1": {"section_id": 622, "quality": 0.9230769230769231, "length": 12}, "so_15641318_15641365_0": {"section_id": 4090, "quality": 0.9230769230769231, "length": 24}, "so_15641318_15641365_2": {"section_id": 622, "quality": 0.9285714285714286, "length": 13}}}});