post_cb({"bq_ids": {"n4140": {"so_7419078_7419103_0": {"length": 61, "quality": 0.9838709677419355, "section_id": 7182}}, "n3337": {"so_7419078_7419103_0": {"length": 61, "quality": 0.9838709677419355, "section_id": 6926}}}, "7419078": {"ViewCount": "117", "Body": "<p>I have the following code:</p>\n<pre><code>void customHandleException  (_EXCEPTION_POINTERS* ExceptionInfo)\n{\n      char* x = (char*)ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionInformation[0];\n      delete[] x;\n}\n\n\nvoid foo()\n{\n   char* x = new char[ 256 ];\n   ULONG_PTR* args = new ULONG_PTR[1];\n   args[0] = (long)x;\n   RaiseException(EXCEPTION_CODE,0,1,args);\n}\n</code></pre>\n<p>Leaving all else aside, <code>char* x</code> from <code>customHandleException()</code> will point to the char array allocated in <code>foo()</code>. Will this cause a memory leak or will the delete work?</p>\n", "AcceptedAnswerId": "7419103", "Title": "Possible memory leak?", "CreationDate": "2011-09-14T15:37:42.850", "Id": "7419078", "CommentCount": "3", "LastEditDate": "2011-09-14T15:54:57.747", "PostTypeId": "1", "LastEditorUserId": "673730", "LastActivityDate": "2011-09-14T15:54:57.747", "Score": "0", "OwnerUserId": "673730", "Tags": "<c++><memory-leaks>", "AnswerCount": "1"}, "7419103": {"PostTypeId": "2", "Body": "<p>You should be using <code>delete[]</code>. Memory allocated with <code>new[]</code> <strong>MUST</strong> be deallocated with <code>delete[]</code>.</p>\n<p>Reference:  </p>\n<p><strong>C++03 Standard: \u00a7 3.7.4.2-3</strong></p>\n<blockquote>\n<p id=\"so_7419078_7419103_0\">If a deallocation function terminates by throwing an exception, the behavior is undefined. The value of the first argument supplied to a deallocation function may be a null pointer value; if so, and if the deallocation function is one supplied in the standard library, the call has no effect. Otherwise, the value supplied\n  to operator <code>delete(void*)</code> in the standard library shall be one of the values returned by a previous invocation of either operator <code>new(std::size_t)</code> or <code>operator new(std::size_t, const std::nothrow_-t&amp;)</code> in the standard library, <strong>and the value supplied to operator <code>delete[](void*)</code> in the standard library shall be one of the values returned by a previous invocation of either <code>operator new[](std::size_t)</code> or\n  <code>operator new[](std::size_t, const std::nothrow_t&amp;)</code> in the standard library.</strong></p>\n</blockquote>\n", "LastActivityDate": "2011-09-14T15:39:32.417", "Id": "7419103", "CommentCount": "3", "CreationDate": "2011-09-14T15:39:32.417", "ParentId": "7419078", "Score": "6", "OwnerUserId": "452307"}});