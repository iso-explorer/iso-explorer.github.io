post_cb({"bq_ids": {"n4140": {"so_11222076_11222105_1": {"length": 83, "quality": 0.9325842696629213, "section_id": 3296}}, "n3337": {"so_11222076_11222105_1": {"length": 83, "quality": 0.9325842696629213, "section_id": 3166}}, "n4659": {"so_11222076_11222105_1": {"length": 64, "quality": 0.7191011235955056, "section_id": 4058}}}, "11222076": {"ViewCount": "2963", "Body": "<p>So basically this code:</p>\n<pre><code>class A {\n};\nclass B { \n   B (const B&amp; b) {}\npublic: \n   B (){}\n   B (const A&amp; a) {} \n};\n\nint main()\n{\n   A a;\n   B b1(a);  //OK\n   B b2 = a; //Error\n}\n</code></pre>\n<p>only generates an error for <code>B b2 = a</code>. And that error is</p>\n<blockquote>\n<p id=\"so_11222076_11222076_0\">error: \u2018B::B(const B&amp;)\u2019 is private</p>\n</blockquote>\n<p>Why is it attempting to call the copy constructor in addition to the direct conversion constructor?</p>\n<p>It's clear from the error message that a temporary <code>B</code> is created which is then used for copy-construction, but why? Where is this in the standard?</p>\n", "AcceptedAnswerId": "11222105", "Title": "Why is copy constructor called instead of conversion constructor?", "CreationDate": "2012-06-27T08:20:45.370", "Id": "11222076", "CommentCount": "8", "FavoriteCount": "13", "PostTypeId": "1", "LastEditDate": "2012-06-27T08:31:57.470", "LastEditorUserId": "673730", "LastActivityDate": "2012-06-27T08:42:24.873", "Score": "21", "OwnerUserId": "673730", "Tags": "<c++><copy-constructor>", "AnswerCount": "1"}, "11222105": {"Id": "11222105", "PostTypeId": "2", "Body": "<pre><code>B b2 = a;\n</code></pre>\n<p>This is known as <strong><a href=\"http://www.gotw.ca/gotw/036.htm\" rel=\"noreferrer\">Copy Initialization</a></strong>.    </p>\n<p>It does thh following:</p>\n<ol>\n<li>Create an object of type <code>B</code> from <code>a</code> by using <code>B (const A&amp; a)</code>.</li>\n<li>Copy the created temporary object to <code>b2</code> by using <code>B (const B&amp; b)</code>.</li>\n<li>Destroy the temporary object by using <code>~B()</code>.</li>\n</ol>\n<p>The error you get is not at step 1 but rather at step 2. </p>\n<blockquote>\n<p id=\"so_11222076_11222105_0\"><strong>Where is this in the standard?</strong> </p>\n</blockquote>\n<p><strong>C++03 8.5 Initializers</strong><br>\n<strong>Para 14:</strong> </br></p>\n<blockquote>\n<p id=\"so_11222076_11222105_1\">....<br>\n  \u2014 If the destination type is a (possibly cv-qualified) class type:<br>\n  ...<br>\n  ...<br>\n  \u2014 Otherwise (i.e., for the remaining copy-initialization cases), user-defined conversion sequences that can convert from the source type to the destination type or (when a conversion function is used) to a derived class thereof are enumerated as described in 13.3.1.4, and the best one is chosen through overload resolution (13.3). If the conversion cannot be done or is ambiguous, the initialization is ill-formed. The function selected is called with the initializer expression as its argument; if the function is a constructor, the call initializes a temporary of the destination type. The result of the call (which is the temporary for the constructor case) is then used to direct-initialize, according to the rules above, the object that is the destination of the copy-initialization. In certain cases, an implementation is permitted to eliminate the copying inherent in this direct-initialization by constructing the intermediate result directly into the object being initialized; see 12.2, 12.8.</br></br></br></br></p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2012-06-27T08:42:24.873", "Score": "13", "CreationDate": "2012-06-27T08:22:58.953", "ParentId": "11222076", "CommentCount": "7", "OwnerUserId": "452307", "LastEditDate": "2012-06-27T08:42:24.873"}});