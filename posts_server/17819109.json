post_cb({"bq_ids": {"n4140": {"so_17819109_17819109_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 23}, "so_17819109_17819235_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 23}, "so_17819109_17819235_1": {"length": 15, "quality": 0.9375, "section_id": 640}, "so_17819109_17819109_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 639}, "so_17819109_17819235_2": {"length": 19, "quality": 0.76, "section_id": 22}}, "n3337": {"so_17819109_17819109_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 20}, "so_17819109_17819235_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 20}, "so_17819109_17819235_1": {"length": 15, "quality": 0.9375, "section_id": 630}, "so_17819109_17819109_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 629}, "so_17819109_17819235_2": {"length": 19, "quality": 0.76, "section_id": 19}}, "n4659": {"so_17819109_17819109_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 23}, "so_17819109_17819235_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 23}, "so_17819109_17819235_1": {"length": 15, "quality": 0.9375, "section_id": 668}, "so_17819109_17819109_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 667}, "so_17819109_17819235_2": {"length": 19, "quality": 0.76, "section_id": 22}}}, "17819235": {"Id": "17819235", "PostTypeId": "2", "Body": "<p>C++11:</p>\n<p>[conv.prom]/3</p>\n<blockquote>\n<p id=\"so_17819109_17819235_0\">A prvalue of an unscoped enumeration type whose underlying type is not fixed (7.2) can be converted to a prvalue of the <strong>first of the following types</strong> that can represent all the values of the enumeration (i.e., the values in the range b min to b max as described in 7.2): <code>int</code>, <code>unsigned int</code>, <code>long int</code>, <code>unsigned long int</code>, <code>long long int</code>, or <code>unsigned long long int</code>.</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>Then, [over.ics.rank]/4:</p>\n<blockquote>\n<p id=\"so_17819109_17819235_1\">Standard conversion sequences are ordered by their ranks: an Exact Match is a better conversion than a Promotion, which is a better conversion than a Conversion.</p>\n</blockquote>\n<p>So, for overload resolution on the expression <code>f(E(0))</code>, the overload <code>E f(int);</code> requires only an Integral Promotion (from <code>E</code> to <code>int</code>, via [conv.prom]), which has a higher rank the Integral Conversion required for <code>int f(unsigned);</code> (from <code>E</code> to <code>unsigned</code> via [conv.integral]).</p>\n<hr>\n<p>For C++03, the argumentation is the same, though the first quote is slightly different:\n[conv.prom]/2</p>\n<blockquote>\n<p id=\"so_17819109_17819235_2\">An rvalue of type <code>wchar_t</code> (3.9.1) or an enumeration type (7.2) can be converted to an rvalue of the first of the following types that can represent all the values of its underlying type: <code>int</code>, <code>unsigned int</code>, <code>long</code>, or <code>unsigned long</code>.</p>\n</blockquote>\n<p>[over.ics.rank]/4 is the same.</p>\n</hr>", "LastEditorUserId": "420683", "LastActivityDate": "2013-07-23T19:34:10.130", "Score": "6", "CreationDate": "2013-07-23T19:22:48.167", "ParentId": "17819109", "CommentCount": "4", "LastEditDate": "2013-07-23T19:34:10.130", "OwnerUserId": "420683"}, "17819109": {"ViewCount": "238", "Body": "<p>In the following code, the overload <code>f(int)</code> is chosen instead of <code>f(unsigned)</code>. Tested with clang 3.0 and gcc 4.8.</p>\n<pre><code>enum E\n{\n};\n\nE f(int);\nint f(unsigned);\n\nE e = f(E(0));\n</code></pre>\n<p>My reading of the standard lead me to think that <code>enum -&gt; int</code> and <code>enum -&gt; unsigned</code> are identical standard conversion sequences that both contain only an integral-conversion.</p>\n<blockquote>\n<p id=\"so_17819109_17819109_0\">[conv.integral] An rvalue of an enumeration type can be converted to an rvalue of an integer type.</p>\n</blockquote>\n<p>According to [over.best.ics], the rank of a standard conversion sequence containing only an integral conversion is 'Conversion'.</p>\n<blockquote>\n<p id=\"so_17819109_17819109_1\">[over.ics.rank] Two implicit conversion sequences of the same form are indistinguishable conversion sequences unless one of the following rules apply: [...]</p>\n</blockquote>\n<p>None of the rules mentioned seem to apply when comparing the two standard conversion sequences.</p>\n<p>What am I missing?</p>\n", "AcceptedAnswerId": "17819235", "Title": "What makes enum -> int a better conversion than enum -> unsigned?", "CreationDate": "2013-07-23T19:15:46.347", "Id": "17819109", "CommentCount": "7", "LastEditDate": "2013-07-23T19:27:25.767", "PostTypeId": "1", "LastEditorUserId": "1690864", "LastActivityDate": "2013-07-23T19:34:10.130", "Score": "7", "OwnerUserId": "1690864", "Tags": "<c++><overloading><language-lawyer><implicit-conversion>", "AnswerCount": "1"}});