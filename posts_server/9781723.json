post_cb({"9781823": {"ParentId": "9781723", "CommentCount": "0", "CreationDate": "2012-03-20T05:38:01.420", "OwnerUserId": "485561", "PostTypeId": "2", "Id": "9781823", "Score": "4", "Body": "<p>This is not syntactically correct.</p>\n<p>Have a look at the <a href=\"http://www.nongnu.org/hcb/#new-expression\" rel=\"nofollow\">syntax</a> for a <em>new-expression</em>.</p>\n<p>A <em>noptr-new-declarator</em> must contain an <em>expression</em> between the square brackets, and an <em>expression</em> must have a token in it.</p>\n", "LastActivityDate": "2012-03-20T05:38:01.420"}, "9781886": {"ParentId": "9781723", "PostTypeId": "2", "CommentCount": "11", "CreationDate": "2012-03-20T05:44:56.190", "Score": "4", "LastEditorUserId": "476681", "LastEditDate": "2012-03-21T13:08:41.273", "Id": "9781886", "OwnerUserId": "476681", "Body": "<p>That is not legal c++.</p>\n<p>5.3.4 New [expr.new] shows what are legal ways to call new in a big list, which contains this line :  </p>\n<pre><code>noptr-new-declarator:\n        [ expression ] attribute-speci\ufb01er-seqopt\n        noptr-new-declarator [ constant-expression ] attribute-speci\ufb01er-seqopt\n</code></pre>\n<p>and later it explains what the constant-expression can be (in 5.4.3/6 and 5.4.3/7) :</p>\n<blockquote>\n<p id=\"so_9781723_9781886_0\">Every constant-expression in a noptr-new-declarator shall be an integral constant expression (5.19) and evaluate to a strictly positive value.</p>\n</blockquote>\n<hr>\n<p>After some thoughts, next items should be relavant :</p>\n<p><strong>8.3.4/1 [dcl.array]</strong>, these parts :</p>\n<blockquote>\n<p id=\"so_9781723_9781886_1\">In a declaration T D where D has the form</p>\n</blockquote>\n<pre><code>    D1 [ constant-expressionopt ] attribute-speci\ufb01er-seqopt\n</code></pre>\n<blockquote>\n<p id=\"so_9781723_9781886_2\">and the type of the identi\ufb01er in the declaration T D1 is \u201cderived-declarator-type-list T\u201d, then the type of the identi\ufb01er of D is an array type;</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_9781723_9781886_3\">if the constant expression is omitted, the type of the identi\ufb01er of D is \u201cderived-declarator-type- list array of unknown bound of T\u201d, an incomplete object type.</p>\n</blockquote>\n<p><strong>5.3.4/1</strong> tells :</p>\n<blockquote>\n<p id=\"so_9781723_9781886_4\">This type shall be a complete object type, but not an abstract class type or array thereof </p>\n</blockquote>\n<p>Since you omitted the array size, the type is not complete, and your program is not valid c++.</p>\n</hr>", "LastActivityDate": "2012-03-21T13:08:41.273"}, "9781723": {"CommentCount": "4", "ViewCount": "522", "PostTypeId": "1", "LastEditorUserId": "452307", "CreationDate": "2012-03-20T05:24:08.877", "LastActivityDate": "2012-03-21T13:08:41.273", "Title": "Is allocating a dynamic array without specifying size well formed code?", "FavoriteCount": "2", "LastEditDate": "2012-03-20T05:31:25.927", "Id": "9781723", "Score": "10", "Body": "<p>The following simple program snippet gives compilation errors with <code>gcc-4.3.4</code>.    </p>\n<p><strong>Program:</strong></p>\n<pre><code>int main() \n{   \n    char *ptr = new char[10];     \n    char *ptr1 = new char[];      \n    return 0; \n}  \n</code></pre>\n<p><strong>Compilation errors:</strong></p>\n<blockquote>\n<p id=\"so_9781723_9781723_0\">prog.cpp: In function \u2018int main()\u2019:<br>\n  prog.cpp:4: error: expected primary-expression before \u2018]\u2019 token<br>\n  prog.cpp:3: warning: unused variable \u2018ptr\u2019<br>\n  prog.cpp:4: warning: unused variable \u2018ptr1\u2019       </br></br></br></p>\n</blockquote>\n<p>But the same compiles cleanly with MSVC without any diagnostic message.     </p>\n<p>So my question is:<br>\nDoes the Standard allow an <code>new []</code> to be called without specifying the <code>size</code>? Or this a bug in MSVC?<br>\nCan someone provide a reference from the standard which will conclusively say that the above code example is ill-formed or well-formed?     </br></br></p>\n<hr>\n<p>I have had a look at:     </p>\n<p><strong>5.3.4 New [expr.new]</strong> &amp;<br>\n<strong>18.4.1.2 Array forms [lib.new.delete.array]</strong> </br></p>\n<p>but couldnt find any conclusive evidence about the behavior.</p>\n<hr>\n<p><strong>EDIT:</strong><br>\nAdding the <code>Language Lawyer</code> tag.<br>\nI am expecting the answer for an observed behavior regardless of whether it is useful or not, I am fully aware it is not useful nor recommended.</br></br></p>\n</hr></hr>", "Tags": "<c++><new-operator><language-lawyer>", "OwnerUserId": "452307", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_9781723_9781886_0": {"section_id": 6087, "quality": 0.8181818181818182, "length": 9}, "so_9781723_9781886_4": {"section_id": 6082, "quality": 0.9090909090909091, "length": 10}, "so_9781723_9781886_3": {"section_id": 3228, "quality": 0.7692307692307693, "length": 10}, "so_9781723_9781886_2": {"section_id": 3228, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_9781723_9781886_0": {"section_id": 5855, "quality": 0.9090909090909091, "length": 10}, "so_9781723_9781886_4": {"section_id": 5850, "quality": 0.9090909090909091, "length": 10}, "so_9781723_9781886_3": {"section_id": 3101, "quality": 0.7692307692307693, "length": 10}, "so_9781723_9781886_2": {"section_id": 3101, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_9781723_9781886_0": {"section_id": 7583, "quality": 0.8181818181818182, "length": 9}, "so_9781723_9781886_4": {"section_id": 7578, "quality": 0.9090909090909091, "length": 10}, "so_9781723_9781886_3": {"section_id": 3985, "quality": 0.7692307692307693, "length": 10}, "so_9781723_9781886_2": {"section_id": 3985, "quality": 0.6666666666666666, "length": 6}}}});