post_cb({"44094815": {"Id": "44094815", "PostTypeId": "2", "Body": "<p>Yes, you are correct<sup>1</sup>, when you don't initialize a base class or a non-static member in a <em>member-initialization-list</em>, or when you don't provide a <em>member-initialization-list</em> at all, the following applies:</p>\n<p><a href=\"http://eel.is/c++draft/class.init#class.base.init-9\" rel=\"nofollow noreferrer\">class.base.init/9</a></p>\n<blockquote>\n<p id=\"so_44094458_44094815_0\">In a non-delegating constructor, if a given potentially constructed\n  subobject is not designated by a <em>mem-initializer-id</em> (including the\n  case where there is no <em>mem-initializer-list</em> because the constructor\n  has no <em>ctor-initializer</em>), then</p>\n<ul>\n<li><p id=\"so_44094458_44094815_1\">if the entity is a non-static data member that has a <em>default member initializer</em> and either</p>\n<ul>\n<li><p id=\"so_44094458_44094815_2\">the constructor's class is a union, and no other variant member of that union is designated by a <em>mem-initializer-id</em> or</p></li>\n<li><p id=\"so_44094458_44094815_3\">the constructor's class is not a union, and, if the entity is a member of an anonymous union, no other member of that union is\n  designated by a <em>mem-initializer-id</em>,</p></li>\n</ul>\n<p id=\"so_44094458_44094815_4\">-- the entity is initialized from its <em>default member initializer</em> as specified in [dcl.init];</p></li>\n<li><p id=\"so_44094458_44094815_5\">otherwise, if the entity is an anonymous union or a variant member ([class.union.anon]), no initialization is performed;</p></li>\n<li><p id=\"so_44094458_44094815_6\">otherwise, the entity is <em>default-initialized</em>.</p></li>\n</ul>\n</blockquote>\n<hr>\n<p><sup>1</sup>: You said:</p>\n<blockquote>\n<p id=\"so_44094458_44094815_7\">...If nothing has been specified then c++ does a default constructor call...</p>\n</blockquote>\n<p>To be somewhat pedantic, <em>default initialized</em> in the above quote doesn't always mean the default constructor will be called, take for example, in the case of non-class types like <code>int</code> whose <em>default initialization</em> depends on storage duration.</p>\n</hr>", "LastEditorUserId": "1621391", "LastActivityDate": "2017-05-21T08:57:38.147", "Score": "0", "CreationDate": "2017-05-21T08:35:25.803", "ParentId": "44094458", "CommentCount": "0", "LastEditDate": "2017-05-21T08:57:38.147", "OwnerUserId": "1621391"}, "bq_ids": {"n4140": {"so_44094458_44094458_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_44094458_44094458_1": {"length": 28, "quality": 0.875, "section_id": 438}, "so_44094458_44094815_2": {"length": 9, "quality": 1.0, "section_id": 435}, "so_44094458_44094815_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 435}, "so_44094458_44094815_0": {"length": 17, "quality": 1.0, "section_id": 435}, "so_44094458_44094458_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 438}, "so_44094458_44094815_1": {"length": 5, "quality": 0.625, "section_id": 369}, "so_44094458_44094815_7": {"length": 5, "quality": 0.625, "section_id": 7043}, "so_44094458_44094815_3": {"length": 12, "quality": 1.0, "section_id": 435}}, "n3337": {"so_44094458_44094458_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_44094458_44094458_1": {"length": 28, "quality": 0.875, "section_id": 429}, "so_44094458_44094815_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 5686}, "so_44094458_44094815_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 427}, "so_44094458_44094815_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 427}, "so_44094458_44094458_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 429}, "so_44094458_44094815_1": {"length": 5, "quality": 0.625, "section_id": 359}, "so_44094458_44094815_7": {"length": 5, "quality": 0.625, "section_id": 6788}}, "n4659": {"so_44094458_44094458_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_44094458_44094458_1": {"length": 28, "quality": 0.875, "section_id": 458}, "so_44094458_44094815_2": {"length": 9, "quality": 1.0, "section_id": 454}, "so_44094458_44094815_4": {"length": 7, "quality": 0.875, "section_id": 454}, "so_44094458_44094815_0": {"length": 17, "quality": 1.0, "section_id": 454}, "so_44094458_44094815_3": {"length": 12, "quality": 1.0, "section_id": 454}, "so_44094458_44094458_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 458}, "so_44094458_44094815_1": {"length": 8, "quality": 1.0, "section_id": 454}, "so_44094458_44094815_7": {"length": 5, "quality": 0.625, "section_id": 8540}, "so_44094458_44094815_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 454}}}, "44094458": {"ViewCount": "62", "Body": "<p>I am trying to understand when the initialization list is referenced (involved) during base class and class non-static member instantiation. I have read <a href=\"https://stackoverflow.com/questions/4037219/order-of-execution-in-constructor-initialization-list\">this</a> article and <a href=\"https://stackoverflow.com/questions/2517050/c-construction-and-initialization-order-guarantees\">this</a> article that summarizes the initialization order of a class (I have summarized it here)</p>\n<blockquote>\n<p id=\"so_44094458_44094458_0\">Initialization shall proceed in the following order:</p>\n<ul>\n<li><p id=\"so_44094458_44094458_1\">First, and only for the constructor of the most derived class as\n  described below, virtual base classes shall be initialized in the\n  order they appear on a depth-first left-to-right traversal of the\n  directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the\n  order of appearance of the base class names in the derived class\n  base-specifier-list. </p></li>\n<li><p id=\"so_44094458_44094458_2\">Then, direct base classes shall be initialized in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers). </p></li>\n<li><p id=\"so_44094458_44094458_3\">Then, nonstatic\n  data members shall be initialized in the order they were declared in\n  the class definition (again regardless of the order of the\n  mem-initializers). Finally, the body of the constructor is executed.</p></li>\n<li><p id=\"so_44094458_44094458_4\">Finally, the body of the constructor is executed.</p></li>\n</ul>\n</blockquote>\n<p>Now I understand by reading the above is that the base classes are created first and then the derived class. Also members are instantiated in the order they were declared in the class definition regardless of their position in the initialization list order.</p>\n<p>This makes me think that every time a base class or a member variable during class instantiation is being instantiated (in the order specified above) C++ basically checks the initialization list of a class to see if any specific parameter or argument has been specified for that base class or member variable. If nothing has been specified then c++ does a default constructor call. Is my understanding correct. Please correct me if I am wrong.</p>\n", "AcceptedAnswerId": "44094815", "Title": "When is an initialization list looked up by C++", "CreationDate": "2017-05-21T07:53:05.843", "Id": "44094458", "CommentCount": "0", "LastEditDate": "2017-05-23T12:18:23.337", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-05-21T08:57:38.147", "Score": "2", "OwnerUserId": "4589819", "Tags": "<c++><class><initialization><initialization-list>", "AnswerCount": "1"}});