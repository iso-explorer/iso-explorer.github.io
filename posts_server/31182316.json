post_cb({"31182470": {"ParentId": "31182316", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>If you read about <code>__builtin_clzll</code> in <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Other-Builtins.html\" rel=\"nofollow noreferrer\">http://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Other-Builtins.html</a></p>\n<blockquote>\n<p id=\"so_31182316_31182470_0\">\u2014 Built-in Function: <code>int __builtin_clzll (unsigned long long x)</code></p>\n<p id=\"so_31182316_31182470_1\">Returns the number of leading 0-bits in x, starting at the most significant bit position. If x is 0, the result is undefined.</p>\n</blockquote>\n<p>From <a href=\"https://cs.stackexchange.com/a/29510\">https://cs.stackexchange.com/a/29510</a>, </p>\n<blockquote>\n<p id=\"so_31182316_31182470_2\">The maximum possible XOR of any two integers from an interval <code>[l, r]</code> can be determined from <code>l \u2295 r</code>, assuming <code>l, r</code> to be integers. This value is equal to <code>pow(2, p) \u2212 1</code>, where <code>p</code> is the smallest value such that <code>pow(2, p)</code> is larger than <code>l \u2295 r</code>.</p>\n</blockquote>\n<p>Now, relating with the code,</p>\n<pre><code>val = 64 - __builtin_clzll(l ^ r);    // p\n\n(1LL &lt;&lt; val) - 1;    // pow(2, p) - 1\n</code></pre>\n", "OwnerUserId": "2425366", "LastEditorUserId": "-1", "LastEditDate": "2017-04-13T12:48:30.793", "Id": "31182470", "Score": "1", "CreationDate": "2015-07-02T10:48:05.597", "LastActivityDate": "2015-07-02T11:01:13.627"}, "31182316": {"CommentCount": "3", "ViewCount": "148", "PostTypeId": "1", "LastEditorUserId": "2425366", "CreationDate": "2015-07-02T10:39:25.223", "LastActivityDate": "2015-07-02T12:46:33.877", "Title": "\"Little girl and maximum XOR\"", "AcceptedAnswerId": "31182470", "LastEditDate": "2015-07-02T12:46:33.877", "Id": "31182316", "Score": "-6", "Body": "<p>How do i solve <a href=\"http://codeforces.com/problemset/problem/276/D\" rel=\"nofollow\">this</a> problem on codeforces.</p>\n<p>The second approach (Non DP) in the <a href=\"http://codeforces.com/blog/entry/6779\" rel=\"nofollow\">Editorial</a> seems easier but i am unable to understand how it works.</p>\n<p>Can somebody explain the non dp approach in detail?</p>\n<p>Also i found this code implementation which i'm unable to understand</p>\n<pre><code>#include &lt;iostream&gt;\n#define ll long long\n#define cnt_leading_zero_bits(x) __builtin_clzll(x);\n\nusing namespace std;\n\nint main() {\n    ll l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    if (l == r) {\n        cout &lt;&lt; \"0\\n\";\n        return 0;\n    }\n    ll cnt = cnt_leading_zero_bits(l ^ r);\n    ll val = 64 - cnt;\n    cout&lt;&lt; ((1LL &lt;&lt; val) - 1) &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>\n<p>Somebody help.</p>\n", "Tags": "<c++><bit-manipulation><xor>", "OwnerUserId": "4884793", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31182316_31182470_0": {"section_id": 22, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_31182316_31182470_0": {"section_id": 19, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_31182316_31182470_0": {"section_id": 22, "quality": 0.5714285714285714, "length": 4}}}});