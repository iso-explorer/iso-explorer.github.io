post_cb({"2468443": {"ParentId": "2468367", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2010-03-18T08:49:38.973", "Score": "2", "LastEditorUserId": "79298", "LastEditDate": "2010-03-18T09:14:58.010", "Id": "2468443", "OwnerUserId": "79298", "Body": "<p>From the standard. \n\"To default-initialize an object of type T means: -- if T is a non-POD class type \n[the case like vector],  the default constructor for T is called.\"</p>\n<p>The constructor notation <code>T()</code> is used to express the default value of type T and that this is zero for built in types and the default constructor for user-defined types. The construct <code>POD()</code> produces value initialisation and according to the stdandard, which results in all members and sub members being either default constructed or zero initialised.</p>\n<p>This is why your statement is legal, but is it zero initialized as per the standard; needs some detailed lookup IMHO.</p>\n<p>BUT, i could not find in the standard where the it <strong>defines</strong> the <em>meaning of default construction for built in types</em>.</p>\n<p><strong>EDIT:-</strong></p>\n<pre><code>struct S { int x; };\n\nvoid f () {\n   S s1;       // s1.x is uninitialized here\n   S s2 = S(); // s2.x is zero here\n}\n</code></pre>\n<p>I think we often make up our own interpretation of what default construction applied to built in types means; because the C++ standard doesn't define it (atleast i could not find it) and i remember <em>Stroustrup</em> or <em>Josuttis</em> say that it means <code>T()</code> which is described as being value initialisation is \"<strong>zero converted to type T</strong>\" for built in types.</p>\n<p>Since <code>int*</code> is a built-in type it is initialized to zero.</p>\n<p>But i am really not sure.</p>\n", "LastActivityDate": "2010-03-18T09:14:58.010"}, "bq_ids": {"n4140": {"so_2468367_2468538_3": {"section_id": 369, "quality": 0.6111111111111112, "length": 11}, "so_2468367_2468538_0": {"section_id": 6098, "quality": 1.0, "length": 7}}, "n3337": {"so_2468367_2468538_3": {"section_id": 359, "quality": 0.6111111111111112, "length": 11}, "so_2468367_2468538_0": {"section_id": 5864, "quality": 1.0, "length": 7}}, "n4659": {"so_2468367_2468538_3": {"section_id": 382, "quality": 0.5555555555555556, "length": 10}, "so_2468367_2468538_0": {"section_id": 7595, "quality": 1.0, "length": 7}}}, "2468439": {"ParentId": "2468367", "CommentCount": "3", "CreationDate": "2010-03-18T08:49:02.857", "OwnerUserId": "72312", "PostTypeId": "2", "Id": "2468439", "Score": "0", "Body": "<p>If I may guesstimate a bit (I'm sure I'll be corrected if I'm wrong):</p>\n<p>The latter () does value-initialization (as it's called in standardese) which makes the integer have value 0 in this case.</p>\n<p>That is a rather new addition to the standard (C++03?) so older compilers may not support it, and leave it uniintialized.</p>\n<p>I recall getting a lot of warnings w.r.t this when switching from MSVS 2003 to 2005 (I think), where the compiler said that \"this member will be zero-initialized now, it wasn't before\".</p>\n", "LastActivityDate": "2010-03-18T08:49:02.857"}, "2468367": {"CommentCount": "0", "AcceptedAnswerId": "2468538", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-03-18T08:35:20.617", "LastActivityDate": "2010-03-18T09:14:58.010", "LastEditDate": "2017-05-23T12:31:56.080", "ViewCount": "4401", "FavoriteCount": "7", "Title": "Is new int[10]() valid c++?", "Id": "2468367", "Score": "26", "Body": "<p>While trying to answer <a href=\"https://stackoverflow.com/questions/2468203/how-can-i-make-new-default-initialize-the-array-of-primitive-types\">this</a> question I found that the code <code>int* p = new int[10]();</code> compiles fine with VC9 compiler and initializes the integers to 0. So my questions are:</p>\n<ol>\n<li>First of all is this valid C++ or is\nit a microsoft extension?</li>\n<li>Is it guaranteed to initialize all\nthe elements of the array?</li>\n<li>Also, is there any difference if I\ndo <code>new int;</code> or <code>new int();</code>? Does\nthe latter guarantee to initialize\nthe variable?</li>\n</ol>\n", "Tags": "<c++><arrays><constructor><initialization>", "OwnerUserId": "39742", "AnswerCount": "4"}, "2468545": {"ParentId": "2468367", "CommentCount": "0", "CreationDate": "2010-03-18T09:11:39.560", "OwnerUserId": "125672", "PostTypeId": "2", "Id": "2468545", "Score": "1", "Body": "<ol>\n<li><p>This is valid C++ according to paragraph 5.3.4/1, which is hard to quote here due to special formatting.</p></li>\n<li><p>According to 5.3.4/15 the item is value-initialized if form () is used, see paragraph 8.5 but the short answer is yes.</p></li>\n<li><p>Yes there is a difference in the first case the variable is not value-initalized and can be anything, in the second case it's value initialized and will be zero.</p></li>\n</ol>\n", "LastActivityDate": "2010-03-18T09:11:39.560"}, "2468538": {"ParentId": "2468367", "CommentCount": "0", "CreationDate": "2010-03-18T09:10:47.523", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "2468538", "Score": "29", "Body": "<p><em>First of all is this valid C++ or is it a microsoft extension?</em></p>\n<p>It is valid in C++, the relevant part of the standard is 5.3.4, with the first paragraph containing the grammar</p>\n<p><em>Is it guaranteed to initialize all the elements of the array?</em></p>\n<p>Yes. Paragraph 5.3.4/15 states that </p>\n<blockquote>\n<p id=\"so_2468367_2468538_0\">A new-expression that creates an object of type T initializes that object as follows:</p>\n<p id=\"so_2468367_2468538_1\">...</p>\n<ul>\n<li>If the new-initializer is of the form (), the item is value-initialized (8.5)</li>\n</ul>\n</blockquote>\n<p>where value initialized for POD means zero-initialize.</p>\n<p><em>Also, is there any difference if I do new int; or new int();? Does the latter guarantee to initialize the variable?</em></p>\n<p>Yes they are different. According with the quote above <code>new int()</code> will zero-initialize the integer. In a previous block of the same paragraph:</p>\n<blockquote>\n<p id=\"so_2468367_2468538_2\">If the new-initializer is omitted:</p>\n<ul>\n<li><p id=\"so_2468367_2468538_3\">If T is a (possibly cv-qualified) non-POD class type (or array thereof), the object is default-initialized (8.5). If T is a const-qualified type, the underlying class type shall have a user-declared default constructor.</p></li>\n<li><p id=\"so_2468367_2468538_4\">Otherwise, the object created has indeterminate value. If T is a const-qualified type, or a (possibly cv-qualified) POD class type (or array thereof) containing (directly or indirectly) a member of const-qualified type, the program is ill-formed;</p></li>\n</ul>\n</blockquote>\n<p>so <code>new int</code> will not initialize the memory.</p>\n", "LastActivityDate": "2010-03-18T09:10:47.523"}});