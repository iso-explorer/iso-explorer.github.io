post_cb({"bq_ids": {"n4140": {"so_25830995_25831292_4": {"length": 16, "quality": 0.7619047619047619, "section_id": 361}, "so_25830995_25831292_1": {"length": 19, "quality": 0.7037037037037037, "section_id": 5850}}, "n3337": {"so_25830995_25831292_4": {"length": 16, "quality": 0.7619047619047619, "section_id": 351}, "so_25830995_25831292_1": {"length": 19, "quality": 0.7037037037037037, "section_id": 5620}}, "n4659": {"so_25830995_25831292_4": {"length": 16, "quality": 0.7619047619047619, "section_id": 373}}}, "25830995": {"ViewCount": "204", "Body": "<p>I want class B to inherit all but a few methods of class A (which is assumed to be trivially copyable), and still be trivially copyable. In C++11 I can delete methods. Take for example:</p>\n<pre><code>class A { // trivially copyable\n   // private stuff here\npublic:\n   A&amp; operator += (const A&amp;);\n   // other public stuff here\n};\n\nclass B: public A {\npublic:\n   B&amp; operator += (const A&amp;) = delete;\n};\n</code></pre>\n<p>Is B trivially copyable? I know there are issues regarding the deletion of special methods, but the compound assignment is not a special method (right?).</p>\n", "AcceptedAnswerId": "25831292", "Title": "Can C++ classes with deleted methods be trivially copyable?", "CreationDate": "2014-09-14T07:20:47.737", "Id": "25830995", "CommentCount": "2", "LastEditDate": "2016-03-17T10:37:23.530", "PostTypeId": "1", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-17T10:37:23.530", "Score": "4", "OwnerUserId": "1003814", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "2"}, "25831285": {"Id": "25831285", "PostTypeId": "2", "Body": "<p>I think you're on the right track--if A is trivially copyable and B is derived from A and simply deletes some regular methods (or operators), B will be trivially copyable too.</p>\n", "LastActivityDate": "2014-09-14T08:08:29.667", "CommentCount": "1", "CreationDate": "2014-09-14T08:08:29.667", "ParentId": "25830995", "Score": "3", "OwnerUserId": "4323"}, "25831292": {"Id": "25831292", "PostTypeId": "2", "Body": "<p>Yes, <code>B</code> is trivially copyable - regardless of what you do to non-special member functions. </p>\n<blockquote>\n<p id=\"so_25830995_25831292_0\"><strong>N3337, \u00a79/6</strong>:</p>\n<p id=\"so_25830995_25831292_1\">A <em>trivially copyable class</em> is a class that: <br/>\u2014 has no non-trivial\n  copy constructors (12.8),<br/> \u2014 has no non-trivial move constructors\n  (12.8),<br/> \u2014 has no non-trivial copy assignment operators (13.5.3, 12.8),<br/>\n  \u2014 has no non-trivial move assignment operators (13.5.3, 12.8), and<br/> \u2014\n  has a trivial destructor (12.4).</p>\n</blockquote>\n<p>\n<blockquote>\n<p id=\"so_25830995_25831292_2\">but the compound assignment is not a special method (right?)</p>\n</blockquote>\n<p>No, it's not.</p>\n<blockquote>\n<p id=\"so_25830995_25831292_3\"><strong>N3337, \u00a712/1</strong>:</p>\n<p id=\"so_25830995_25831292_4\">The default constructor (12.1), copy constructor and copy assignment\n  operator (12.8), move constructor and move assignment operator (12.8),\n  and destructor (12.4) are <em>special member functions</em>.</p>\n</blockquote>\n</p>", "LastEditorUserId": "3647361", "LastActivityDate": "2014-09-14T08:18:58.223", "Score": "9", "CreationDate": "2014-09-14T08:09:17.030", "ParentId": "25830995", "CommentCount": "1", "OwnerUserId": "3647361", "LastEditDate": "2014-09-14T08:18:58.223"}});