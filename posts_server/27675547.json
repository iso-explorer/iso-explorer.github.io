post_cb({"bq_ids": {"n4140": {"so_27675547_27675672_1": {"section_id": 5522, "quality": 0.9565217391304348, "length": 44}}, "n3337": {"so_27675547_27675672_1": {"section_id": 5308, "quality": 0.9565217391304348, "length": 44}}, "n4659": {"so_27675547_27675672_1": {"section_id": 6957, "quality": 0.9565217391304348, "length": 44}}}, "27675573": {"ParentId": "27675547", "CommentCount": "0", "CreationDate": "2014-12-28T10:31:36.550", "OwnerUserId": "3511726", "PostTypeId": "2", "Id": "27675573", "Score": "-2", "Body": "<p>That's because the two functions are imported from their namespace, this means that the same function has 2 definitions, you can solve it like this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace A\n{\n    void foo(int a = 5){ std::cout &lt;&lt; a &lt;&lt; \"1\" &lt;&lt; std::endl; }\n}\n\nnamespace B\n{\n    void foo(int a = 5){ std::cout &lt;&lt; a &lt;&lt; std::endl; }\n}\n\nint main()\n{ \n    A::foo(2);\n    B::foo(3);\n}\n</code></pre>\n", "LastActivityDate": "2014-12-28T10:31:36.550"}, "27675672": {"ParentId": "27675547", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2014-12-28T10:46:59.190", "Score": "3", "LastEditorUserId": "16673", "LastEditDate": "2014-12-28T11:54:58.527", "Id": "27675672", "OwnerUserId": "16673", "Body": "<p>The difference is the extern \"C\", which affects namespace membership of the function:</p>\n<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1997/N1138.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1997/N1138.pdf</a></p>\n<blockquote>\n<p id=\"so_27675547_27675672_0\">What remains is the definition of \u201csame entity\u201d with respect to \u2018extern \u201cC\u201d\u2019 language linkage? This is\n  addressed by 7.5\u00b66:</p>\n<p id=\"so_27675547_27675672_1\">\u201cAt most one function with a particular name can have C language linkage. Two\n  declarations for a function with C language linkage with the same function name\n  (ignoring the namespace names that qualify it) that appear in different namespace scopes\n  refer to the same function. Two declarations for an object with C language linkage with\n  the same name (ignoring the namespace names that qualify it) that appear in different\n  namespace scopes refer to the same object.\u201d</p>\n</blockquote>\n", "LastActivityDate": "2014-12-28T11:54:58.527"}, "27675547": {"CommentCount": "4", "ViewCount": "81", "OwnerDisplayName": "user2953119", "CreationDate": "2014-12-28T10:28:11.827", "LastActivityDate": "2014-12-28T11:54:58.527", "PostTypeId": "1", "AcceptedAnswerId": "27675672", "Title": "A viable function with a default argument", "Id": "27675547", "Score": "3", "Body": "<p>The following example is given in <code>N4296::13.3.3 [over.match.best]</code></p>\n<pre><code>namespace A \n{\n    extern \"C\" void f(int = 5);\n}\n\nnamespace B \n{\n    extern \"C\" void f(int = 5);\n}\n\nusing A::f;\nusing B::f;\n\nvoid use() \n{\n    f(3); // OK, default argument was not used for viability\n    f(); // Error: found default argument twice\n}\n</code></pre>\n<p>I tried to write something similar:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace A\n{\n    void foo(int a = 5){ std::cout &lt;&lt; a &lt;&lt; \"1\" &lt;&lt; std::endl; }\n}\n\nnamespace B\n{\n    void foo(int a = 5){ std::cout &lt;&lt; a &lt;&lt; std::endl; }\n}\n\nusing A::foo;\nusing B::foo;\n\nint main()\n{ \n    foo(2); //Error \n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/fa7c4983183ff295\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>But I got a compile-time error. Why does the Standard says that it's OK?</p>\n", "Tags": "<c++><overloading>", "AnswerCount": "2"}});