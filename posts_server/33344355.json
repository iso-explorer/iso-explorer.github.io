post_cb({"33344838": {"Id": "33344838", "PostTypeId": "2", "Body": "<p>You must use this form (as anatolyg said):</p>\n<pre><code>MemberFnPtr fnPtrA = &amp;ClassA::FuncA;\n</code></pre>\n<p>for calling the <code>fnPtrA</code> you have to create an object and invoke it as below:</p>\n<pre><code>ClassA a;\n(a.*fnPtrA)();\n</code></pre>\n<p>It's a strange syntax since <code>fnPtrA</code> is not member of <code>ClassA</code>.</p>\n", "LastActivityDate": "2015-10-26T11:39:09.390", "CommentCount": "2", "CreationDate": "2015-10-26T11:39:09.390", "ParentId": "33344355", "Score": "1", "OwnerUserId": "952747"}, "bq_ids": {"n4140": {"so_33344355_33344638_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6067}}, "n3337": {"so_33344355_33344638_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5835}}, "n4659": {"so_33344355_33344638_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 7563}}}, "33344638": {"Id": "33344638", "PostTypeId": "2", "Body": "<p>You should not use parentheses around the name of the member function:</p>\n<pre><code>MemberFnPtr fnPtrA = &amp;(ClassA::FuncA); // not good\nMemberFnPtr fnPtrA = &amp;ClassA::FuncA; // good\n</code></pre>\n<p>The C++ Standard mentions this explicitly in section 5.3.1:</p>\n<blockquote>\n<p id=\"so_33344355_33344638_0\">Note: that is, the expression &amp;(qualified-id), where the qualified-id is enclosed in\n  parentheses, does not form an expression of type \u201cpointer to member.\u201d</p>\n</blockquote>\n", "LastActivityDate": "2015-10-26T11:28:08.170", "CommentCount": "1", "CreationDate": "2015-10-26T11:28:08.170", "ParentId": "33344355", "Score": "8", "OwnerUserId": "509868"}, "33344355": {"ViewCount": "152", "Body": "<p>I've used a member function pointer in global function:</p>\n<pre><code>class ClassA\n{\npublic:\n    void FuncA(void);\n    ...\n}\nvoid GlobalFunc(void)\n{\n    typedef void(ClassA::*MemberFnPtr)(void);\n    MemberFnPtr fnPtrA = &amp;ClassA::FuncA;\n    ...\n}\n</code></pre>\n<p>and such pattern worked perfectly as well(as operator:: has a higher priority than operator&amp;)</p>\n<pre><code>typedef void(ClassA::*MemberFnPtr)(void);\nMemberFnPtr fnPtrA = &amp;(ClassA::FuncA);\n...\n</code></pre>\n<p>However, when I used the latter pattern in a member function, something strange appears <code>error C2276:\"&amp;\"</code>;</p>\n<p>I've read something on <code>std::bind</code> &amp; <code>std::function</code>, and I think that'll be better for me. However, I really wonder what happened when I used the latter pattern in a member function, can anyone help?</p>\n", "AcceptedAnswerId": "33344638", "Title": "Why such pattern can't be used in a member function?", "CreationDate": "2015-10-26T11:14:00.743", "Id": "33344355", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-10-26T12:05:28.967", "LastEditorUserId": "67579", "LastActivityDate": "2015-10-26T12:05:28.967", "Score": "3", "OwnerUserId": "5238911", "Tags": "<c++>", "AnswerCount": "2"}});