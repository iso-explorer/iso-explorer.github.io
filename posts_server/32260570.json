post_cb({"32261099": {"ParentId": "32260570", "CommentCount": "3", "Body": "<p>From [expr.mptr.oper]:</p>\n<blockquote>\n<p id=\"so_32260570_32261099_0\">The binary operator <code>-&gt;*</code> binds its second operand, which shall be of type \u201cpointer to member of <code>T</code>\u201d to its\n  first operand, which shall be of type \u201cpointer to <code>U</code>\u201d where <strong><code>U</code> is either <code>T</code> or a class of which <code>T</code> is an unambiguous\n  and accessible base class</strong>. The expression <code>E1-&gt;*E2</code> is converted into the equivalent form <code>(*(E1)).*E2</code>.</p>\n</blockquote>\n<p>Even though <code>Proxy&lt;T&gt;</code> has <code>operator -&gt;()</code> implemented, it doesn't matter, because:</p>\n<pre><code>(P-&gt;*fcn)(nu, 1);\n</code></pre>\n<p>would not use <code>operator -&gt;</code>. It is special according to the grammar. You can <em>only</em> invoke <code>fcn</code> on a pointer to <code>X</code> (or something derived from <code>X</code>). </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32261099", "Score": "1", "CreationDate": "2015-08-27T23:34:51.377", "LastActivityDate": "2015-08-27T23:34:51.377"}, "32260570": {"CommentCount": "4", "AcceptedAnswerId": "32261099", "CreationDate": "2015-08-27T22:40:13.397", "LastActivityDate": "2015-08-27T23:37:04.453", "PostTypeId": "1", "ViewCount": "41", "FavoriteCount": "0", "Title": "Error invoking class method via function pointer on a wrapped object", "Id": "32260570", "Score": "1", "Body": "<p>I am coming from C background and new to CPP. I have a situation where I need to call a method on an object which will modify object. But on return from method, I need to restore object to its previous state. To achieve this I am using suffix, prefix wrapper technique illustrated by \"Bjarne Stroustrup\".</p>\n<p>Along with this technique I am also trying to use function template and function pointer to generalize the methods that will be called on modified object. </p>\n<pre><code>template &lt; class T &gt;\nclass Call_proxy {\n   T* obj;\n   int ID;\npublic:\n   Call_proxy( T* pp ) : obj( pp ), ID( i ) {      \n   }\n\n   ~Call_proxy() {\n      obj-&gt;setID( ID );\n   }\n\n   T* operator -&gt;() {\n      return obj;\n   }\n};\n\ntemplate &lt; class T &gt;\nclass Proxy {\n   T* obj;\n   int ID;\npublic:\n   Proxy(T* pp) : obj(pp), ID(pp-&gt;getID()) { }\n\n   Call_proxy&lt;T&gt; operator -&gt;() {\n      return Call_proxy&lt;T&gt;( obj, ID );\n   }\n};\n\nclass X\n{\n   int id;\npublic:\n   int getID();\n   void setID(int ID) { id = ID; }\n   void somefunction(int, int);\n};\n\ntemplate&lt;class X&gt;\nvoid doSomething(int nu, void(X::*fcn)(int, int))\n{\n   Proxy&lt;X&gt; P(x);\n   P-&gt;setID(nu);\n   (P-&gt;*fcn)(nu, 1); //This call generates error on VS2010: Error   1   error C2296: '-&gt;*' : illegal, left operand has type 'Proxy&lt;T&gt;'\n}\n\nint main()\n{\n   X x;\n   doSomething&lt;X&gt;(1, &amp;X::somefunction);\n}\n</code></pre>\n<p>Can you please help me understand VS2010 keep complaining about <code>(P-&gt;*fcn)(nu, 1);</code> construct?</p>\n", "Tags": "<c++>", "OwnerUserId": "5274749", "AnswerCount": "2"}, "32261034": {"ParentId": "32260570", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_32260570_32261034_0\">void(X::*fcn)(int, int)</p>\n</blockquote>\n<p>This is a pointer to a member function of the <code>X</code> class.</p>\n<blockquote>\n<p id=\"so_32260570_32261034_1\">(P-&gt;*fcn)(nu, 1)</p>\n</blockquote>\n<p>This is attempting to use <code>P</code> to execute the member function <strong>but</strong> <code>P</code> is of type <code>Proxy&lt;X&gt;</code> (i.e., it's not of type <code>X</code> and it's not a pointer).</p>\n", "OwnerUserId": "4505712", "LastEditorUserId": "4505712", "LastEditDate": "2015-08-27T23:37:04.453", "Id": "32261034", "Score": "1", "CreationDate": "2015-08-27T23:26:45.207", "LastActivityDate": "2015-08-27T23:37:04.453"}, "bq_ids": {"n4140": {"so_32260570_32261099_0": {"section_id": 6130, "quality": 0.8666666666666667, "length": 26}}, "n3337": {"so_32260570_32261099_0": {"section_id": 5894, "quality": 0.8666666666666667, "length": 26}}, "n4659": {"so_32260570_32261099_0": {"section_id": 7627, "quality": 0.9333333333333333, "length": 28}}}});