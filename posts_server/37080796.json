post_cb({"37080796": {"ViewCount": "169", "Body": "<p>I have this section of code that was previously compiling fine with the Microsoft compiler. I have now switched to clang and am receiving the following errors:</p>\n<blockquote>\n<p id=\"so_37080796_37080796_0\">Error 16 error : expected member name or ';' after declaration\n  specifiers'</p>\n</blockquote>\n<p>-</p>\n<blockquote>\n<p id=\"so_37080796_37080796_1\">Error 15 error : expected a qualified name after 'typename'</p>\n</blockquote>\n<p>for the line of code</p>\n<pre><code>template&lt;typename PRIM&gt; typename const PRIM::OutputPtrType          GetData(unsigned long index = 0) const;\n</code></pre>\n<p>Does anyone know what the problem is?</p>\n", "AcceptedAnswerId": "37080868", "Title": "Function template failing in clang", "CreationDate": "2016-05-06T20:19:56.527", "Id": "37080796", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-05-06T21:05:46.740", "Score": "0", "OwnerUserId": "4027338", "Tags": "<c++><clang>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37080796_37080868_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 170}, "so_37080796_37080868_3": {"length": 5, "quality": 0.625, "section_id": 170}}, "n3337": {"so_37080796_37080868_3": {"length": 5, "quality": 0.625, "section_id": 164}, "so_37080796_37080868_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 164}}, "n4659": {"so_37080796_37080868_3": {"length": 5, "quality": 0.625, "section_id": 175}, "so_37080796_37080868_2": {"length": 24, "quality": 0.9230769230769231, "section_id": 175}}}, "37080868": {"Id": "37080868", "PostTypeId": "2", "Body": "<p>Switch your <code>typename const</code> to <code>const typename</code>.</p>\n<pre><code>template&lt;typename PRIM&gt; const typename PRIM::OutputPtrType          GetData(unsigned long index = 0) const;\n</code></pre>\n<p>The <a href=\"http://eel.is/c++draft/gram.temp\" rel=\"nofollow\">C++ Grammar rules for <code>templates</code></a> has an entry for <code>typename</code> which dictates:</p>\n<blockquote>\n<p id=\"so_37080796_37080868_0\"><em>typename...<sub>opt</sub> identifier<sub>opt</sub>.</em></p>\n<p id=\"so_37080796_37080868_1\"><em>typename nested-name-specifier identifier</em></p>\n</blockquote>\n<p><code>const</code> isn't an <code>identifier</code> rather a <em><code>cv-qualifier</code></em>. An identifier in your context is a dependent name. which is basically <code>PRIM::OutputPtrType</code>, since <code>OutputPtrType</code> will depend on the name <code>PRIM</code>. For the second line, we can more accurately say that <code>PRIM::</code> is a nested-name-specifier.</p>\n<p><strong>EDIT</strong></p>\n<blockquote>\n<p id=\"so_37080796_37080868_2\"><a href=\"http://eel.is/c++draft/temp.res#3\" rel=\"nofollow\"><strong>$14.6:1</strong></a> When a qualified-id is intended to refer to a type that is not a\n  member of the current instantiation (<a href=\"http://eel.is/c++draft/temp.dep.type\" rel=\"nofollow\">[temp.dep.type]</a>) and its\n  nested-name-specifier refers to a dependent type, it shall be prefixed\n  by the keyword typename, forming a typename-specifier. If the\n  qualified-id in a typename-specifier does not denote a type, the\n  program is ill-formed.</p>\n<blockquote id=\"so_37080796_37080868_3\">\n<pre><code>typename-specifier:\n  typename nested-name-specifier identifier\n  typename nested-name-specifier templateopt simple-template-id\n</code></pre>\n</blockquote>\n</blockquote>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2016-05-06T21:05:46.740", "Score": "3", "CreationDate": "2016-05-06T20:25:31.883", "ParentId": "37080796", "CommentCount": "0", "OwnerUserId": "1621391", "LastEditDate": "2016-05-06T21:05:46.740"}, "37080863": {"Id": "37080863", "PostTypeId": "2", "Body": "<p>You have to move <code>const</code> to the right:</p>\n<pre><code>template&lt;typename PRIM&gt;\ntypename PRIM::OutputPtrType const GetData(unsigned long index = 0) const;\n                             ^^^^^\n</code></pre>\n<p>Or to the left:</p>\n<pre><code>template&lt;typename PRIM&gt;\nconst typename PRIM::OutputPtrType GetData(unsigned long index = 0) const;\n^^^^^\n</code></pre>\n<p>In this context after the <code>typename</code> keyword the compiler expects a qualified name.</p>\n", "LastActivityDate": "2016-05-06T20:25:02.507", "CommentCount": "4", "CreationDate": "2016-05-06T20:25:02.507", "ParentId": "37080796", "Score": "2", "OwnerUserId": "2352671"}});