post_cb({"bq_ids": {"n4140": {"so_27054485_27054786_2": {"length": 35, "quality": 0.8974358974358975, "section_id": 5}, "so_27054485_27054786_1": {"length": 11, "quality": 1.0, "section_id": 2}, "so_27054485_27054786_0": {"length": 29, "quality": 0.90625, "section_id": 606}, "so_27054485_27054485_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 606}}, "n3337": {"so_27054485_27054786_2": {"length": 34, "quality": 0.8717948717948718, "section_id": 2}, "so_27054485_27054786_1": {"length": 11, "quality": 1.0, "section_id": 2}, "so_27054485_27054786_0": {"length": 29, "quality": 0.90625, "section_id": 596}, "so_27054485_27054485_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 596}}, "n4659": {"so_27054485_27054786_2": {"length": 35, "quality": 0.8974358974358975, "section_id": 5}, "so_27054485_27054786_1": {"length": 11, "quality": 1.0, "section_id": 2}, "so_27054485_27054786_0": {"length": 29, "quality": 0.90625, "section_id": 632}, "so_27054485_27054485_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 632}}}, "27054786": {"Id": "27054786", "PostTypeId": "2", "Body": "<p>The rest of the quote you omitted might be illuminating:</p>\n<blockquote>\n<p id=\"so_27054485_27054786_0\">\u00a713.3.3.1/1 An implicit conversion sequence is a sequence of\n  conversions used to convert an argument in a function call to the type\n  of the corresponding parameter of the function being called. The\n  sequence of conversions is an implicit conversion as defined in Clause\n  4, <strong>which means it is governed by the rules for initialization of an\n  object or reference by a single expression (8.5, 8.5.3).</strong></p>\n</blockquote>\n<p>Clause 4 does indeed talk about this.</p>\n<blockquote>\n<p id=\"so_27054485_27054786_1\">3 An expression <code>e</code> can be <em>implicitly converted</em> to a type <code>T</code> if and\n  only if the declaration <code>T t=e</code>; is well-formed, for some invented\n  temporary variable <code>t</code> (8.5).</p>\n<p id=\"so_27054485_27054786_2\">6 The effect of any implicit conversion is the same as performing the\n  corresponding declaration and initialization and then using the\n  temporary variable as the result of the conversion. The result is an\n  lvalue if <code>T</code> is an lvalue reference type or an rvalue reference to\n  function type (8.3.2), an xvalue if <code>T</code> is an rvalue reference to\n  object type, and a prvalue otherwise. The expression <code>e</code> is used as a\n  glvalue if and only if the initialization uses it as a glvalue.</p>\n</blockquote>\n<p>The \"full set of such conversions\" (listed in Clause 4) refers to standard conversions. Remember that it says standard conversion sequences can be empty. Then \u00a713.3.3.1.2 describes user-defined conversion sequences. It consists of:</p>\n<ul>\n<li>A standard conversion sequence</li>\n<li>A user-defined conversion</li>\n<li>Another standard conversion sequence</li>\n</ul>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-11-21T05:37:06.257", "Score": "0", "CreationDate": "2014-11-21T05:37:06.257", "ParentId": "27054485", "CommentCount": "4"}, "27054485": {"ViewCount": "234", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">N3797</a> \u00a713.3.3.1 [over.best.ics] says:</p>\n<blockquote>\n<p id=\"so_27054485_27054485_0\">The sequence of conversions is an implicit conversion as defined in\n  Clause 4 [...]</p>\n</blockquote>\n<p>However, clause 4 defines the following list of the conversions:</p>\n<ul>\n<li>Lvalue-to-rvalue conversion</li>\n<li>Array-to-pointer conversion</li>\n<li>Function-to-pointer conversion</li>\n<li>Qualification conversions</li>\n<li>Integral promotions</li>\n<li>Floating point promotion</li>\n<li>Integral conversions</li>\n<li>Floating point conversions</li>\n<li>Floating-integral conversions </li>\n<li>Pointer conversions</li>\n<li>Pointer to member conversions</li>\n<li>Boolean conversions</li>\n<li>Integer conversion rank</li>\n</ul>\n<p>Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A\n{\n    operator int()\n    {\n        return 42;\n    }\n};\n\nA a;\n\nint b = a; //User-defined conversion sequence applied\n\nint main() { }\n</code></pre>\n<p>As long as user-defined conversion doesn't belong to a set of standard conversions, there is no any standard conversion being applied in the example. So what is the sense of the quote I provided?</p>\n", "AcceptedAnswerId": "27054786", "Title": "Implicit conversion sequence", "CreationDate": "2014-11-21T05:07:12.797", "Id": "27054485", "CommentCount": "0", "LastEditDate": "2014-11-21T05:14:20.363", "PostTypeId": "1", "LastEditorDisplayName": "user3920237", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-11-21T05:37:06.257", "Score": "2", "Tags": "<c++><implicit-conversion>", "AnswerCount": "1"}});