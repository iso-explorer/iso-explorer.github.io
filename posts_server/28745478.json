post_cb({"bq_ids": {"n4140": {"so_28745478_28747623_0": {"length": 5, "quality": 1.0, "section_id": 6331}, "so_28745478_28747623_1": {"length": 15, "quality": 1.0, "section_id": 6331}, "so_28745478_28747623_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6333}}, "n3337": {"so_28745478_28747623_0": {"length": 5, "quality": 1.0, "section_id": 6088}, "so_28745478_28747623_1": {"length": 15, "quality": 1.0, "section_id": 6088}, "so_28745478_28747623_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6090}}, "n4659": {"so_28745478_28747623_0": {"length": 5, "quality": 1.0, "section_id": 7841}, "so_28745478_28747623_1": {"length": 15, "quality": 1.0, "section_id": 7841}, "so_28745478_28747623_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 7843}}}, "28747623": {"Id": "28747623", "PostTypeId": "2", "Body": "<p>The C++ standard says the following in section 17.6.5.2 [res.on.headers]:</p>\n<blockquote>\n<p id=\"so_28745478_28747623_0\">A C++ header may include other C++ headers.</p>\n</blockquote>\n<p>For your question, this means a compiler can just act as if you included other C++ headers. In your example, the compiler is allowed to include the <code>&lt;numeric&gt;</code> header if you include <code>&lt;algorithm&gt;</code>, or vice versa.</p>\n<p>But that's not the whole story. The standard also says:</p>\n<blockquote>\n<p id=\"so_28745478_28747623_1\">A C++ header shown in its synopsis as including other C++ headers\n  shall provide the declarations and definitions that appear in the\n  synopses of those other headers.</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_28745478_28747623_2\">The C standard headers [...] shall include only their corresponding\n  C++ standard header [...]</p>\n</blockquote>\n<p><em>(Note that I am quoting from the last free C++11 draft. The final version of the ISO standard is not free. See <a href=\"https://isocpp.org/std/the-standard\" rel=\"nofollow\">https://isocpp.org/std/the-standard</a>.)</em></p>\n<p>The <code>&lt;utility&gt;</code> header is an example of a C++ header which is guaranteed to include another. Its synopsis <em>explitly</em> includes <code>&lt;initializer_list&gt;</code>. Which means a conforming compiler <strong>must</strong> accept the following:</p>\n<pre><code>#include &lt;utility&gt;\n// #include &lt;initializer_list&gt; // not needed\n\nint main()\n{\n    std::initializer_list&lt;int&gt; x = {};\n}\n</code></pre>\n<p>For the C headers, in contrast, this means that the following <strong>must not</strong> compile:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    std::cout &lt;&lt; \"\\n\"; // must not compile\n}\n</code></pre>\n<p>What the standard says is surely confirmed by your implementation's documentation. For example, the <a href=\"https://msdn.microsoft.com/en-us/library/xb3bx4w8.aspx\" rel=\"nofollow\">documentation for Visual C++ 2013</a> says:</p>\n<blockquote>\n<p id=\"so_28745478_28747623_3\">A C++ library header includes any other C++ library headers it needs\n  to define needed types. (Always include explicitly any C++ library\n  headers needed in a translation unit, however, lest you guess wrong\n  about its actual dependencies.) A Standard C header never includes\n  another standard header.</p>\n</blockquote>\n<p>The advice given here is a good one; do not depend on automatic inclusion. Explicitly include everything you need.</p>\n", "LastActivityDate": "2015-02-26T16:27:27.313", "Score": "0", "CreationDate": "2015-02-26T16:27:27.313", "ParentId": "28745478", "CommentCount": "0", "OwnerUserId": "3313064"}, "28745478": {"ViewCount": "273", "Body": "<p>I think some headers need to be included to compile with gcc(4.9),</p>\n<pre><code>#include &lt;algorithm&gt; // for std::transform\n#include &lt;numeric&gt;   // for std::adjacent_difference\n</code></pre>\n<p>However, I found it's not necessary include them at all, I can still call\nfor example, the following functions</p>\n<pre><code>std::adjacent_difference (V1.begin(), V1.end(), V2.begin());\nstd::transform(V2.begin(), V2.end(), V3.begin(), V4.begin(), std::divides&lt;double&gt;());\n</code></pre>\n<p>Maybe I have misunderstood the mechanism of including header files...Any hint?</p>\n", "AcceptedAnswerId": "28745598", "Title": "Why it seems not necessary to include some STL headers", "CreationDate": "2015-02-26T14:50:16.817", "Id": "28745478", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-02-26T16:27:27.313", "Score": "0", "OwnerUserId": "2523394", "Tags": "<c++><stl>", "AnswerCount": "2"}, "28745598": {"Id": "28745598", "PostTypeId": "2", "Body": "<p>It is quite typical for a header to include other headers. The headers icluded by header x will be icluded in any file that includes x. That should be trivial to understand once you grasp what <em>including</em> a file in another means. In this case, one of the standard headers happened to be included in another.</p>\n<p>Files included by headers can change between versions. If you don't include a required header, your program may break under another (version of) standard library even though it may appear to work in the current implementation. Of course, this applies to other libraries as well.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2015-02-26T15:27:11.190", "Score": "4", "CreationDate": "2015-02-26T14:55:59.027", "ParentId": "28745478", "CommentCount": "3", "LastEditDate": "2015-02-26T15:27:11.190", "OwnerUserId": "2079303"}});