post_cb({"833905": {"Id": "833905", "PostTypeId": "2", "Body": "<p>The evaluation order is not specified by the standart. It depends only on your compiler.</p>\n", "LastActivityDate": "2009-05-07T10:33:29.867", "CommentCount": "1", "CreationDate": "2009-05-07T10:33:29.867", "ParentId": "833882", "Score": "2", "OwnerUserId": "93244"}, "833882": {"ViewCount": "1573", "Body": "<p>It's well-known that the order of evaluation of a function's arguments in unspecified and can differ between different compilers.</p>\n<p>What doesn't seem so clear is whether function calls can be interleaved, in the following sense:</p>\n<pre><code>f(g(h()), i(j()))\n</code></pre>\n<p>Let's assume the compiler chooses to evaluate f's first parameter first. Is the compiler free to call <code>j</code> between calling <code>h</code> and <code>g</code>? I believe so, but I don't know where to find confirmation in the Standard.</p>\n", "AcceptedAnswerId": "833929", "Title": "Nested function calls order of evaluation", "CreationDate": "2009-05-07T10:27:20.397", "Id": "833882", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2009-05-07T10:55:42.827", "Score": "7", "OwnerUserId": "11828", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_833882_833929_0": {"length": 9, "quality": 0.5625, "section_id": 5995}}, "n3337": {"so_833882_833929_0": {"length": 9, "quality": 0.5625, "section_id": 5763}}, "n4659": {"so_833882_833929_0": {"length": 9, "quality": 0.5625, "section_id": 7492}}}, "833929": {"Id": "833929", "PostTypeId": "2", "Body": "<p>The evaluation order is unspecified - see section 5.2.2/8 of the Standard:</p>\n<blockquote>\n<p id=\"so_833882_833929_0\">The order of evaluation of arguments\n  is unspecified. All side effects of\n  argument expression evaluations take\n  effect before the function is entered.</p>\n</blockquote>\n", "LastEditorDisplayName": "anon", "OwnerDisplayName": "anon", "LastActivityDate": "2009-05-07T10:55:01.190", "Score": "13", "CreationDate": "2009-05-07T10:39:58.650", "ParentId": "833882", "CommentCount": "6", "LastEditDate": "2009-05-07T10:55:01.190"}, "833912": {"Id": "833912", "PostTypeId": "2", "Body": "<p>I don't know what the standard says, but I think that if it matters to you, then you should probably re-arrange the code so that you know what's going to happen in which order (temp variables are your friends). Even if you figure out what the standard says, AND if we assume that your compiler implements that correctly, you're still leaving a maintenance time bomb, because your successors WON'T know everything you do.</p>\n", "LastActivityDate": "2009-05-07T10:35:07.353", "CommentCount": "1", "CreationDate": "2009-05-07T10:35:07.353", "ParentId": "833882", "Score": "3", "OwnerUserId": "5801"}, "834008": {"Id": "834008", "PostTypeId": "2", "Body": "<p>If the functions you're using in the same expression are somehow related (one affects the results of the other), so different order of calls give different results, then refrain of using nested functions in expressions.</p>\n<p>I do it as good practice, exactly because, as the other said, the calling order is undefined (you could have even interlaced execution, if the optimizer thought it will be more optimal).</p>\n", "LastActivityDate": "2009-05-07T10:55:42.827", "CommentCount": "0", "CreationDate": "2009-05-07T10:55:42.827", "ParentId": "833882", "Score": "0", "OwnerUserId": "83153"}});