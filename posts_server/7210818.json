post_cb({"bq_ids": {"n4140": {"so_7210818_7210880_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5965}}, "n3337": {"so_7210818_7210880_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5734}}, "n4659": {"so_7210818_7210880_0": {"length": 18, "quality": 0.782608695652174, "section_id": 7456}}}, "7210818": {"ViewCount": "703", "Body": "<p>I'm playing around with C++11 right now and found the following problem with using a lambda as callback to sqlite. When capturing a vector variable inside the lambda, I get an error saying that the signatures don't match. Without using that variable in the lambda (<code>[]</code> instead of <code>[&amp;ret]</code>, and not using <code>ret</code> inside), it works fine.</p>\n<pre><code>vector&lt;SomeClass&gt; ret;\nchar *err = nullptr;\nint res = sqlite3_exec(db,\n                       \"some sql query, doesn't matter\",\n                       [&amp;ret](void *unused, int argc, char **argv, char **columnName) -&gt; int\n                       {\n                           ret.push_back(SomeClass());\n                           return 0;\n                       },\n                       nullptr,\n                       &amp;err);\n</code></pre>\n<p>This is the error I get:</p>\n<pre><code>cannot convert 'TestClass::testMethod()::&lt;lambda(void*, int, char**, char**)&gt;' to 'int (*)(void*, int, char**, char**)' for argument '3' to 'int sqlite3_exec(sqlite3*, const char*, int (*)(void*, int, char**, char**), void*, char**)'\n</code></pre>\n<p>GCC version is \"gcc (XvidVideo.RU - GCC 4.6.1 i686-pc-mingw32) 4.6.1 20110625 (prerelease)\" on Windows.</p>\n<p>Why does this make a difference?</p>\n", "AcceptedAnswerId": "7210880", "Title": "Signature difference between lambda with/without captured variable?", "CreationDate": "2011-08-26T21:38:38.643", "Id": "7210818", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-07-21T10:24:33.587", "Score": "6", "OwnerUserId": "245706", "Tags": "<lambda><c++11>", "AnswerCount": "2"}, "7210880": {"Id": "7210880", "PostTypeId": "2", "Body": "<p>Only captureless lambdas can be converted to pointers to function, and, based on the compiler diagnostic, your <code>sqlite3_exec</code> expects such a pointer, <code>int (*)(void*, int, char**, char**)</code>.</p>\n<p>To quote \u00a75.1.2[expr.prim.lambda]/6</p>\n<blockquote>\n<p id=\"so_7210818_7210880_0\">The closure type for a lambda-expression with no lambda-capture has a public non-virtual non-explicit const conversion function to pointer to function having the same parameter and return types as the closure type\u2019s function call operator.</p>\n</blockquote>\n", "LastActivityDate": "2011-08-26T21:46:47.750", "Score": "6", "CreationDate": "2011-08-26T21:46:47.750", "ParentId": "7210818", "CommentCount": "3", "OwnerUserId": "273767"}, "38501653": {"Id": "38501653", "PostTypeId": "2", "Body": "<p>what about using the 1st argument for callback? </p>\n<pre><code>vector&lt;SomeClass&gt; ret;\nchar *err = nullptr;\nint res = sqlite3_exec(db,\n                       \"some sql query, doesn't matter\",\n                       [](void *ctx, int argc, char **argv, char **columnName) -&gt; int\n                       {\n                           static_cast&lt;vector&lt;SomeClass&gt;*&gt;(ctx)-&gt;push_back(SomeClass());\n                           return 0;\n                       },\n                       &amp;ret,\n                       &amp;err);\n</code></pre>\n", "LastActivityDate": "2016-07-21T10:24:33.587", "Score": "1", "CreationDate": "2016-07-21T10:24:33.587", "ParentId": "7210818", "CommentCount": "0", "OwnerUserId": "448839"}});