post_cb({"16598817": {"ParentId": "16598727", "CommentCount": "7", "Body": "<p>In your particular code, the null checks are not needed.</p>\n<p>In general, it's implementation specific whether <code>delete (T*)0;</code> will call the deallocation function for type <code>T</code>.  If your implementation does pass null pointers to the deallocation function, and either your type has overridden the deallocation function by providing member <code>operator delete</code>, or you're provided a replacement global <code>::operator delete</code>, and that custom deallocation function doesn't handle null pointer values well, you could have trouble.</p>\n<p><strong>The Standard does NOT require that a custom <code>operator delete</code> do nothing when passed a null pointer.</strong>  It shouldn't <em>fail</em>, but it might write nasty log messages or tell your boss that someone isn't following the coding standard, for example.</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "16598817", "Score": "3", "CreationDate": "2013-05-16T22:54:03.043", "LastActivityDate": "2013-05-16T22:54:03.043"}, "16598736": {"ParentId": "16598727", "PostTypeId": "2", "CommentCount": "7", "Body": "<blockquote>\n<p id=\"so_16598727_16598736_0\">Is it necessary to use IF statement when releasing memory?</p>\n</blockquote>\n<p>No, it is not (as long as you haven't overridden the global <code>operator delete</code>). This is perfectly fine and will do nothing:</p>\n<pre><code>int* p = nullptr;\ndelete p;\n</code></pre>\n<p>Per paragraph 3.7.4/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16598727_16598736_1\">[...] The value of the\n  first argument supplied to a deallocation function may be a null pointer value; <strong>if so, and if the deallocation\n  function is one supplied in the standard library, the call has no effect</strong>. [...]</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/16598727/is-it-necessary-to-use-if-statement-when-releasing-memory/16598736#comment23859100_16598727\">As suggested by chris in the comments</a>, however, consider using smart pointers rather than performing manual memory management through raw pointers, <code>new</code>, and <code>delete</code> (or their array counterpart).</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:49:16.810", "Id": "16598736", "Score": "9", "CreationDate": "2013-05-16T22:46:46.813", "LastActivityDate": "2013-05-16T23:06:33.653"}, "16598727": {"CommentCount": "2", "ViewCount": "344", "PostTypeId": "1", "ClosedDate": "2013-05-16T23:13:32.090", "LastEditorUserId": "2168305", "CreationDate": "2013-05-16T22:45:41.740", "LastActivityDate": "2013-05-17T01:40:12.433", "Title": "Is it necessary to use IF statement when releasing memory?", "AcceptedAnswerId": "16598817", "LastEditDate": "2013-05-17T01:40:12.433", "Id": "16598727", "Score": "5", "Body": "<p>I am trying to understand memory part in C++. I am trying to release memory after I generate the output by using the code below. </p>\n<h2>Question:</h2>\n<p>Is it necessary to release memory by using if-statement?</p>\n<h2>Code:</h2>\n<pre><code>int main(){\n    char *pc;\n    int *pi;\n\n    pc = new char('a');\n    pi = new int(8);\n\n    cout &lt;&lt; *pc &lt;&lt; endl;\n    cout &lt;&lt; *pi &lt;&lt; endl;\n\n    //What's the purpose for doing if(pc) and if (pi) below?\n\n    if(pc){\n        delete pc;\n    }\n    if(pi){\n        delete pi;\n    }\n\nreturn 0;\n}\n</code></pre>\n<p>Could I be able to do in this way?\n    int main(){\n        char *pc;\n        int *pi;</p>\n<pre><code>    pc = new char('a');\n    pi = new int(8);\n\n    cout &lt;&lt; *pc &lt;&lt; endl;\n    cout &lt;&lt; *pi &lt;&lt; endl;\n\n\n    delete pc;\n    delete pi;\n\nreturn 0;\n}\n</code></pre>\n", "Tags": "<c++><pointers>", "OwnerUserId": "2168305", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_16598727_16598736_1": {"section_id": 7182, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_16598727_16598736_1": {"section_id": 6926, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_16598727_16598736_0": {"section_id": 1282, "quality": 0.6666666666666666, "length": 4}, "so_16598727_16598736_1": {"section_id": 8690, "quality": 0.9444444444444444, "length": 17}}}, "16598759": {"ParentId": "16598727", "CommentCount": "7", "Body": "<p>No it's not but it's considered a good practice to do so. In real life scenario your code changes frequently due to business requirements, bugs, etc so it's always best to use this kind of defensive programming strategy.</p>\n<p>The last thing you want is having a hard-to-detect error due to freeing already freed pointer because your colleague changed the upper portion of the code</p>\n", "OwnerUserId": "179630", "PostTypeId": "2", "Id": "16598759", "Score": "-1", "CreationDate": "2013-05-16T22:49:28.773", "LastActivityDate": "2013-05-16T22:49:28.773"}});