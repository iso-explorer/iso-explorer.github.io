post_cb({"36161478": {"ParentId": "36161188", "CommentCount": "0", "Body": "<p><a href=\"http://eel.is/c++draft/dcl.fct.def.default#2\">[dcl.fct.def.default]/2-3</a>:</p>\n<blockquote>\n<p id=\"so_36161188_36161478_0\">2 An explicitly-defaulted function that is not defined as deleted may\n  be declared <code>constexpr</code> only if it would have been implicitly declared\n  as <code>constexpr</code>. If a function is explicitly defaulted on its first\n  declaration,</p>\n<ul>\n<li>it is implicitly considered to be <code>constexpr</code> if the implicit declaration would be, and,</li>\n<li>it has the same exception specification as if it had been implicitly declared ([except.spec]).</li>\n</ul>\n<p id=\"so_36161188_36161478_1\">3 If a function that is explicitly defaulted is declared with an\n  <em>exception-specification</em> that is not compatible ([except.spec]) with\n  the exception specification of the implicit declaration, then</p>\n<ul>\n<li><p id=\"so_36161188_36161478_2\">if the function is explicitly defaulted on its first declaration, it is defined as deleted;</p></li>\n<li><p id=\"so_36161188_36161478_3\">otherwise, the program is ill-formed.</p></li>\n</ul>\n</blockquote>\n<p>In other words, <code>foo() = default;</code>, which is necessarily the first declaration of <code>foo</code>'s default constructor, will be \"<code>constexpr</code> if possible\" and \"<code>noexcept</code> if possible\". Explicitly writing <code>constexpr</code> and <code>noexcept</code> is still useful; it means \"yell at me if it can't be <code>constexpr</code>/<code>noexcept</code>\".</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "36161478", "Score": "12", "CreationDate": "2016-03-22T17:38:11.870", "LastActivityDate": "2016-03-22T17:38:11.870"}, "bq_ids": {"n4140": {"so_36161188_36161478_1": {"section_id": 3272, "quality": 0.6666666666666666, "length": 8}, "so_36161188_36161478_2": {"section_id": 3272, "quality": 1.0, "length": 8}, "so_36161188_36161478_0": {"section_id": 3271, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_36161188_36161478_2": {"section_id": 3145, "quality": 1.0, "length": 8}, "so_36161188_36161478_0": {"section_id": 3143, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_36161188_36161478_1": {"section_id": 4030, "quality": 0.75, "length": 9}, "so_36161188_36161478_0": {"section_id": 4029, "quality": 1.0, "length": 19}, "so_36161188_36161478_2": {"section_id": 4030, "quality": 1.0, "length": 8}}}, "36161188": {"CommentCount": "0", "ViewCount": "187", "LastActivityDate": "2016-03-22T17:38:11.870", "Body": "<p>So, my question is simple:</p>\n<p>Is there any point in specifying a defaulted class constructor as <code>noexcept</code> or <code>constexpr</code> (or any other thing you could thing of)? </p>\n<pre><code>struct foo\n{\n   foo() = default;\n   // vs\n   constexpr foo() noexcept = default;\n\n   // same thing would apply for copy/move ctors and assignment operators\n};\n</code></pre>\n<p>Would the two behave the same way? </p>\n<p>Does it depend on whether the class is POD? \nFor example with the above example both would behave the same way, while if for example I had a private member <code>std::vector&lt;int&gt; v = { 1, 2, 3, 4 };</code> which uses in-class assignment, <code>foo() = default;</code> would by default not be <code>noexcept</code> and not <code>constexpr</code>.</p>\n<p>By writing <code>foo() = default;</code> does the compiler just pick the best version: <code>noexcept</code> if possible and <code>constexpr</code> if possible, etc?</p>\n<p>I hope the question is clear!</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "36161478", "FavoriteCount": "1", "Title": "Is a defaulted constructor/assignment bothered by noexcept or constexpr?", "Id": "36161188", "Score": "10", "CreationDate": "2016-03-22T17:24:33.810", "Tags": "<c++><c++11><c++14>", "OwnerUserId": "5212827", "AnswerCount": "1"}});