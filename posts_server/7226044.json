post_cb({"bq_ids": {"n4140": {"so_7226044_7226081_0": {"length": 18, "quality": 0.75, "section_id": 7146}}, "n3337": {"so_7226044_7226081_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}}, "n4659": {"so_7226044_7226081_0": {"length": 18, "quality": 0.75, "section_id": 8647}}}, "7226051": {"Id": "7226051", "PostTypeId": "2", "Body": "<p><code>void main</code> is not standard. </p>\n<p>You must return an int.</p>\n<p><code>int main()</code> is better</p>\n<p>see this article for more explanation : <a href=\"http://www.parashift.com/c++-faq-lite/newbie.html#faq-29.3\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/newbie.html#faq-29.3</a></p>\n", "LastActivityDate": "2011-08-29T04:26:44.730", "CommentCount": "0", "CreationDate": "2011-08-29T04:26:44.730", "ParentId": "7226044", "Score": "1", "OwnerUserId": "103916"}, "7226044": {"ViewCount": "465", "Body": "<p>hey everyone ive written the following code </p>\n<p>except i get an error when i compile it in xcode any assistance will be utmost greatful </p>\n<pre><code>#include &lt;iostream.h&gt;\n\nclass node\n{\npublic:\nint value;           //value stored in the node \nnode *next;          //pointer to next node \nnode *prev;          //pointer to previous node \n};\n\nclass dlist\n{\npublic:\nnode *front;       //pointer to front of list   \nnode *back;        //pointer to back of list  \n\ndlist()\n{\nfront=NULL;\nback=NULL;\n}\n\nvoid insertFront(int value);             \nvoid insertBack(int value);\nvoid removeFront();\nvoid removeBack();\nvoid insertBefore(int value,node *nodeB);\nvoid insertAfter(int value,node *nodeA);\nvoid removeBefore(node *nodeB);\nvoid removeAfter(node *nodeA);\nvoid removeNode(node *newNode);\nvoid printDListFront();\nvoid printDListBack();\n};\n\n//insert a node before nodeB\nvoid dlist::insertBefore(int value,node *nodeB)    \n{\nnode *newNode;\nnewNode=new node();\nnewNode-&gt;prev=nodeB-&gt;prev;\nnewNode-&gt;next =nodeB;\nnewNode-&gt;value =value; \nif(nodeB-&gt;prev==NULL)\n{\nthis-&gt;front=newNode; \n}\nnodeB-&gt;prev=newNode;\n\n}\n\n//insert a node before the front node \nvoid dlist::insertFront (int value)\n{\nnode *newNode;\nif(this-&gt;front==NULL)\n{\nnewNode=new node();\nthis-&gt;front=newNode;\nthis-&gt;back =newNode;\nnewNode-&gt;prev=NULL;\nnewNode-&gt;next=NULL;\nnewNode-&gt;value=value;\n\n}\nelse\n{\ninsertBefore(value,this-&gt;front );\n}\n}\n\n//insert a node after  nodeB\nvoid dlist::insertAfter(int value,node *nodeB)\n{\nnode *newNode;\nnewNode=new node();\nnewNode-&gt;next= nodeB-&gt;next ;\nnewNode-&gt;prev  =nodeB;\nnewNode-&gt;value =value;\n\nif(nodeB-&gt;next==NULL)\n{\ncout&lt;&lt;\"\\n \"&lt;&lt; endl;\nthis-&gt;back =newNode; \n}\nnodeB-&gt;next=newNode;\ncout&lt;&lt;\"2\"&lt;&lt;endl;\n}\n//insert a node after the last node \nvoid dlist::insertBack (int value)\n{          \nif(this-&gt;back==NULL)\n{\ncout&lt;&lt;\"insert at back\";\ninsertFront(value);\n}\nelse\n{\ncout&lt;&lt;\"insert at back\";\ninsertAfter(value,this-&gt;back  );\n}\n}\n\n//remove the front node \nvoid dlist::removeFront ()\n{\nremoveNode(this-&gt;front);\n}\n\n//remove a back node \nvoid dlist::removeBack  ()\n{\nremoveNode(this-&gt;back);\n\n}\n\n//remove before a node \nvoid dlist::removeBefore(node *nodeB)\n{\n\nif(nodeB-&gt;prev==this-&gt;front)\n{\nthis-&gt;front=nodeB;\nthis-&gt;front-&gt;prev=NULL;\n}\nelse\n{\nremoveNode(nodeB-&gt;prev);\n}\n}\n\n//remove after a node \nvoid dlist::removeAfter(node *nodeA)\n{\nif(nodeA-&gt;next==this-&gt;back)\n{\nthis-&gt;back=nodeA;\nthis-&gt;back-&gt;next=NULL;\n}\nelse\n{\nremoveNode(nodeA-&gt;next);\n}\n}\n\n//remove a perticular node \nvoid dlist::removeNode(node *nodeToRemove)\n{\nif(nodeToRemove==this-&gt;front)\n{\nthis-&gt;front=this-&gt;front-&gt;next;\nthis-&gt;front-&gt;prev=NULL;\n}\nelse if (nodeToRemove==this-&gt;back)\n{\nthis-&gt;back=this-&gt;back-&gt;prev;\nthis-&gt;back-&gt;next=NULL ;\n}\nelse\n{\nnodeToRemove-&gt;prev-&gt;next=nodeToRemove-&gt;next;\nnodeToRemove-&gt;next-&gt;prev=nodeToRemove-&gt;prev;\n}\n}\n\n//Print the list from front \nvoid dlist::printDListFront()\n{\nnode* curr2;\ncurr2= this-&gt;front;\ncout&lt;&lt;\"\\n-----\\n\";\ncout&lt;&lt;\"Queue\\n\";\ncout&lt;&lt;\"-----\\n\";\n//cout&lt;&lt;\"size:\"&lt;&lt;getQueueSize()&lt;&lt;endl;\nwhile(curr2!=NULL)\n{\ncout&lt;&lt;\" |\"&lt;&lt;curr2-&gt;value&lt;&lt;\"|\";\ncurr2=curr2-&gt;next;\n}\ncout&lt;&lt;endl;\n}// print the Double Linked List from front\n\n\n// print the Double Linked List from backwards\nvoid dlist::printDListBack()\n{\nnode* curr2;\ncurr2= this-&gt;back;\ncout&lt;&lt;\"\\n-----\\n\";\ncout&lt;&lt;\"Queue\\n\";\ncout&lt;&lt;\"-----\\n\";\n//cout&lt;&lt;\"size:\"&lt;&lt;getQueueSize()&lt;&lt;endl;\nwhile(curr2!=NULL)\n{\ncout&lt;&lt;\" |\"&lt;&lt;curr2-&gt;value&lt;&lt;\"|\";\ncurr2=curr2-&gt;prev;\n}\ncout&lt;&lt;endl;\n}// print the Double Linked List from back\n\nvoid main()\n{\ndlist *st ;\nst= new dlist();\nst-&gt;insertBack(8); \nst-&gt;printDListFront ();\nst-&gt;insertBack(5); \nst-&gt;printDListFront ();\nst-&gt;insertBack(6); \nst-&gt;printDListFront ();\nst-&gt;insertFront(1) ;\nst-&gt;printDListFront ();\nst-&gt;insertFront(3) ;\nst-&gt;printDListFront ();\nst-&gt;insertBack(7); \nst-&gt;printDListFront ();\nst-&gt;removeFront();\nst-&gt;printDListFront ();\nst-&gt;removeBack();\nst-&gt;printDListFront ();\n}\n</code></pre>\n<p>The Error i get is MAIN MUST RETURN \"int\"</p>\n", "Title": "C++ XCODE need help Beginner Using", "CreationDate": "2011-08-29T04:25:20.097", "LastActivityDate": "2011-08-29T04:32:06.740", "CommentCount": "0", "LastEditDate": "2011-08-29T04:30:32.403", "PostTypeId": "1", "LastEditorUserId": "103916", "Id": "7226044", "Score": "-2", "OwnerUserId": "917046", "Tags": "<c++><compiler-errors>", "AnswerCount": "2"}, "7226081": {"Id": "7226081", "PostTypeId": "2", "Body": "<p>From ISO/IEC 14882:2003(E) - 3.6.1</p>\n<blockquote>\n<p id=\"so_7226044_7226081_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of main:</p>\n</blockquote>\n<pre><code>int main() { /* ... */ } and\n\nint main(int argc, char* argv[]) { /* ... */ }\n</code></pre>\n<hr>\n<p>Also there is no need to include <code>.h</code> for a standard header file.</p>\n<pre><code>#include &lt;iostream&gt; // is sufficient\n</code></pre>\n</hr>", "LastActivityDate": "2011-08-29T04:32:06.740", "CommentCount": "0", "CreationDate": "2011-08-29T04:32:06.740", "ParentId": "7226044", "Score": "3", "OwnerUserId": "528724"}});