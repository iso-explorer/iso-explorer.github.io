post_cb({"19090722": {"Id": "19090722", "PostTypeId": "2", "Body": "<p>A function is virtual since its topmost base declares it as virtual and derived member function is virtual not matter it's re-declared implicitly or not.</p>\n<p>\u00a7 10.3.2 Virtual functions</p>\n<blockquote>\n<p id=\"so_19090502_19090722_0\">If a virtual member function vf is declared in a class Base and in a class Derived, derived directly or indirectly from Base, a member function vf with the same name, parameter-type-list (8.3.5), cv-qualification, and refqualifier (or absence of same) as Base::vf is declared, <strong>then Derived::vf is also virtual (whether or not it is so declared).</strong></p>\n</blockquote>\n", "LastActivityDate": "2013-09-30T09:26:09.133", "CommentCount": "0", "CreationDate": "2013-09-30T09:26:09.133", "ParentId": "19090502", "Score": "3", "OwnerUserId": "951757"}, "19090502": {"ViewCount": "345", "Body": "<p>If I derive B from A and C from B like so:</p>\n<pre><code>A\n|\nB\n|\nC\n</code></pre>\n<p>Most likely I will have one or more virtual functions in A. Now, accidently I forgot to put the keyword <code>virtual</code> in B's function declaration. But to my surprise it works as if virtual was set also in B. This is the code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass A \n{\npublic:\n    virtual void foo(){cout &lt;&lt; \"A\\n\";};\n};\n\nclass B : public A\n{\npublic:\n    void foo(){cout &lt;&lt; \"B\\n\";} // a \"virtual doesn't change the behaviour...\n};\n\nclass C : public B\n{\npublic:\n    void foo(){cout &lt;&lt; \"C\\n\";}\n};\n\nint main()\n{\n    C c;\n    c.foo();\n\n    A *pa = new C;\n    pa-&gt;foo();\n\n    B *pb = new C;\n    pb-&gt;foo();\n\n    return 0;\n}\n</code></pre>\n<p>If you omit also the <code>virtual</code> in <code>A</code>, the output is</p>\n<pre><code>C\nA\nB\n</code></pre>\n<p>Otherwise it is </p>\n<pre><code>C\nC\nC\n</code></pre>\n<p>even without the <code>virtual</code> in <code>B</code>!</p>\n<p>So: Is the keyword pinherited in some way? Or do I understand something wrong here?</p>\n", "Title": "Is the keyword \"virtual\" passed on to intermediate base-classes?", "CreationDate": "2013-09-30T09:16:46.893", "LastActivityDate": "2013-09-30T09:26:09.133", "CommentCount": "2", "PostTypeId": "1", "Id": "19090502", "Score": "2", "OwnerUserId": "1175824", "Tags": "<c++><inheritance><virtual-functions>", "AnswerCount": "4"}, "19090536": {"Id": "19090536", "PostTypeId": "2", "Body": "<p>If a member is declared <code>virtual</code> in a class, it is <code>virtual</code> in its derived classes. Marking the methods <code>virtual</code> in the derived classes is not necessary, but might serve for documentation purposes. In C++11, the use of <code>override</code> would make this redundant.</p>\n", "LastActivityDate": "2013-09-30T09:18:31.087", "CommentCount": "0", "CreationDate": "2013-09-30T09:18:31.087", "ParentId": "19090502", "Score": "3", "OwnerUserId": "661519"}, "bq_ids": {"n4140": {"so_19090502_19090722_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7003}}, "n3337": {"so_19090502_19090722_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6749}}, "n4659": {"so_19090502_19090722_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 8500}}}, "19090533": {"Id": "19090533", "PostTypeId": "2", "Body": "<p>If the method signature in a derived class is identical to the signature in a base class then the keyword virtual will be inherited automatically.</p>\n", "LastActivityDate": "2013-09-30T09:18:26.500", "CommentCount": "0", "CreationDate": "2013-09-30T09:18:26.500", "ParentId": "19090502", "Score": "1", "OwnerUserId": "882003"}, "19090528": {"Id": "19090528", "PostTypeId": "2", "Body": "<p>If a method is <code>virtual</code> in a base class, then it is <code>virtual</code> in its subclasses, without them having to declare it as such.</p>\n", "LastActivityDate": "2013-09-30T09:18:06.750", "CommentCount": "0", "CreationDate": "2013-09-30T09:18:06.750", "ParentId": "19090502", "Score": "4", "OwnerUserId": "166749"}});