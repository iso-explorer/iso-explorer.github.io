post_cb({"20830442": {"Id": "20830442", "PostTypeId": "2", "Body": "<p>Taken literally, it means there are no wrong answers. <code>cobj.c</code> could turn out to be any <code>int</code> value and that wouldn't constitute a bug in the compiler or the runtime. Realistically, though, I think there are two possibilities; either <code>&amp;cobj</code> and <code>this</code> are the same, in which case everything works how you'd expect, or they're different, and you're accessing potentially garbage data in <code>cobj</code>.</p>\n", "LastActivityDate": "2013-12-29T21:49:33.480", "CommentCount": "0", "CreationDate": "2013-12-29T21:49:33.480", "ParentId": "20829244", "Score": "0", "OwnerUserId": "152948"}, "20829400": {"Id": "20829400", "PostTypeId": "2", "Body": "<p>The English term is used more or less verbatim: \"unspecified\" means that the precise semantics are not given by the standard, but the program does not become undefined or ill-formed.</p>\n", "LastActivityDate": "2013-12-29T19:50:03.833", "CommentCount": "0", "CreationDate": "2013-12-29T19:50:03.833", "ParentId": "20829244", "Score": "1", "OwnerUserId": "560648"}, "bq_ids": {"n4140": {"so_20829244_20830550_1": {"length": 8, "quality": 0.8, "section_id": 5768}, "so_20829244_20829244_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 5768}, "so_20829244_20830550_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 5768}, "so_20829244_20829244_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 377}}, "n3337": {"so_20829244_20830550_1": {"length": 8, "quality": 0.8, "section_id": 5541}, "so_20829244_20829244_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 5541}, "so_20829244_20830550_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 5541}, "so_20829244_20829244_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 368}}, "n4659": {"so_20829244_20830550_1": {"length": 8, "quality": 0.8, "section_id": 7225}, "so_20829244_20829244_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 391}, "so_20829244_20830550_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 7225}, "so_20829244_20829244_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 7225}}}, "20829293": {"Id": "20829293", "PostTypeId": "2", "Body": "<p>Your interpretation is correct. The behaviour is not specified by the standard. You get the result you expect with this compiler, but another compiler may give different results. You shouldn't rely on this behaviour if you want to port your code to another compiler, or possibly another version of the compiler you're using.</p>\n", "OwnerDisplayName": "user1864610", "LastActivityDate": "2013-12-29T19:36:03.440", "Score": "1", "CreationDate": "2013-12-29T19:36:03.440", "ParentId": "20829244", "CommentCount": "3"}, "20830550": {"Id": "20830550", "PostTypeId": "2", "Body": "<p>The key, I would say, is how <em>unspecified behavior</em> and <em>implementation-defined behavior</em> differ:</p>\n<blockquote>\n<p id=\"so_20829244_20830550_0\"><em>1.3.10</em><br>\n<strong>implementation-de\ufb01ned behavior</strong><br>\n  behavior, for a well-formed program construct and correct data, that depends on the implementation and that each implementation documents.</br></br></p>\n<p id=\"so_20829244_20830550_1\"><em>1.3.25</em><br>\n<strong>unspecified behavior</strong><br>\n  behavior, for a well-formed program construct and correct data, that depends on the implementation</br></br></p>\n</blockquote>\n<p>An <strong>unspecified value</strong> means that not only does the standard not require a specific value, but the implementation doesn't even have to document the (expected) value (in which case, the value could change not just from implementation to implementation, but from version to version or even from execution to execution). This is different from an <strong>implementation-defined value</strong>. With an implementation-defined value, you know what you're going to get, but it varies from implementation to implementation. With an unspecified value, you don't know what you're going to get, as it's not necessarily documented in the implementation, even from execution to execution.</p>\n", "LastActivityDate": "2013-12-29T21:59:12.750", "CommentCount": "0", "CreationDate": "2013-12-29T21:59:12.750", "ParentId": "20829244", "Score": "0", "OwnerUserId": "1287251"}, "20829244": {"ViewCount": "358", "Body": "<p>What is the precise meaning of the term unspecified value in 12.1 p14:</p>\n<blockquote>\n<p id=\"so_20829244_20829244_0\">During the construction of a const object, if the value of the object\n  or any of its subobjects is accessed through a glvalue that is not\n  obtained, directly or indirectly, from the constructor\u2019s this pointer,\n  the value of the object or subobject thus obtained is unspecified. [\n  Example:</p>\n</blockquote>\n<pre><code>struct C;\nvoid no_opt(C*);\n\nstruct C {\n    int c;\n    C() : c(0) { no_opt(this); }\n};\n\nconst C cobj;\n\nvoid no_opt(C* cptr) {\n    int i = cobj.c * 100; // value of cobj.c is unspecified\n    cptr-&gt;c = 1;\n    cout &lt;&lt; cobj.c * 100 // value of cobj.c is unspecified\n         &lt;&lt; \u2019\\n\u2019;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_20829244_20829244_1\">\u2014end example ]</p>\n</blockquote>\n<p>I could find in 1.3.25 the definition of unspecified behavior:</p>\n<blockquote>\n<p id=\"so_20829244_20829244_2\"><strong>unspecified behavior</strong><br>\n  behavior, for a well-formed program construct and correct data, that depends on the implementation</br></p>\n</blockquote>\n<ul>\n<li><p>I run this snippet in VS2010 and I got correct results for the two expressions <code>cobj.c</code> above: <code>0</code> for the first and <code>1</code> for the last one. What is unspecified here?</p></li>\n<li><p>Does the definition for unspecified behavior apply to an unspecified value, i.e., does it mean that in a another compiler I could get different results? </p></li>\n</ul>\n", "AcceptedAnswerId": "20829293", "Title": "What does the Standard mean by \"unspecified value\" in 12.1 p14?", "CreationDate": "2013-12-29T19:31:40.790", "Id": "20829244", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-12-29T21:59:12.750", "Score": "2", "OwnerUserId": "2548699", "Tags": "<c++><c++11><constructor><language-lawyer>", "AnswerCount": "4"}});