post_cb({"17013946": {"ParentId": "17013534", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I'm not sure but for me it seems that with templates in VS you can use only types with names. For some reason VS compiler do not recognize that enum is just simple int even if it doesn't have name. That's why <code>test4()</code> compile without any error and <code>test2()</code> not.</p>\n<p><strong>Edit:</strong></p>\n<p>I dig a little deaper and found <a href=\"https://stackoverflow.com/a/5720418/1387612\">this</a> answer. So it's not a compiler error. In my opinion is a feature, because it also check if your code folow standard. \nIn fact GCC (vesrion 4.3.4, 4.4.5),  won't compile this code anyway</p>\n<pre><code>test.cpp: In function 'void test2()':\ntest.cpp:34: error: no matching function for call to 'bar(A::&lt;anonymous enum&gt;)'\ntest.cpp:35: error: no matching function for call to 'bar(A::&lt;anonymous enum&gt;)'\n</code></pre>\n<p>but GCC 4.7.3 has no error (with `-Wall -Wextra --pedantic) it inform only about unused parameters, porbably C++0x is less strict about unnamed types in templates</p>\n<p><strong>Edit2:</strong></p>\n<p>I found on <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/hh567368.aspx\" rel=\"nofollow noreferrer\">Microsoft Page</a> that VS support <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm\" rel=\"nofollow noreferrer\">Local and unnamed types as template arguments</a> so your code should work. So finally it's a VS bug!</p>\n", "OwnerUserId": "1387612", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:05:25.573", "Id": "17013946", "Score": "1", "CreationDate": "2013-06-09T20:40:04.340", "LastActivityDate": "2013-06-09T21:26:20.393"}, "17013534": {"CommentCount": "2", "ViewCount": "139", "CreationDate": "2013-06-09T19:51:10.903", "LastActivityDate": "2013-06-09T21:26:20.393", "Title": "Enum promotion in template. Why does it work sometimes and not others?", "AcceptedAnswerId": "17014155", "PostTypeId": "1", "Id": "17013534", "Score": "4", "Body": "<p>After struggling with this for a while, I see <em>what</em> is happening below, but I'm still unclear on the <em>why</em>.  When I compile the code, I get the indicated error message (only).  Note that one line above it is exactly the same type conversion, and that works fine.  Also, once I name the enums (struct B), everything works fine, and if templates aren't involved (test1 and test3), everything works fine.</p>\n<p>Is this a compiler bug (I'm using VS 2010)?  Or can someone point to the part of the spec that spells this out?</p>\n<pre><code>struct A {\n    enum {\n        VALUE1\n    };\n\n    enum {\n        VALUE2\n    };\n};\n\nstruct B {\n    enum Enum1 {\n        VALUE1\n    };\n\n    enum Enum2 {\n        VALUE2\n    };\n};\n\nvoid foo(int x) {\n}\n\ntemplate &lt;typename T&gt;\nvoid bar(T x) {\n}\n\nvoid test1() {\n    foo(A::VALUE1);\n    foo(A::VALUE2);\n}\n\nvoid test2() {\n    bar(A::VALUE1);\n    bar(A::VALUE2); // error C2664: 'bar' : cannot convert parameter 1 from '' to ''\n                    // Conversion to enumeration type requires an explicit cast (static_cast, C-style cast or function-style cast)\n}\n\nvoid test3() {\n    foo(B::VALUE1);\n    foo(B::VALUE2);\n}\n\nvoid test4() {\n    bar(B::VALUE1);\n    bar(B::VALUE2);\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "2469001", "AnswerCount": "2"}, "17014155": {"ParentId": "17013534", "CommentCount": "0", "Body": "<p>The definition of <code>test2</code> is ill-formed according to the 2003 Standard, but okay in the 2011 Standard.  But I can't imagine why the compiler would accept one statement but not the other.</p>\n<p>C++03 14.3.1/2, emphasis mine:</p>\n<blockquote>\n<p id=\"so_17013534_17014155_0\">A local type, a type with no linkage, <strong>an unnamed type</strong> or a type compounded from any of these types shall not be used as a <em>template-argument</em> for a template <em>type-parameter</em>.</p>\n</blockquote>\n<p>C++11 deleted that paragraph entirely, and replaced it with an example that includes implicitly using an unnamed <code>struct</code> as a template type argument.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "17014155", "Score": "2", "CreationDate": "2013-06-09T21:03:24.450", "LastActivityDate": "2013-06-09T21:03:24.450"}, "bq_ids": {"n4140": {"so_17013534_17014155_0": {"section_id": 7141, "quality": 0.6666666666666666, "length": 8}}, "n3337": {"so_17013534_17014155_0": {"section_id": 6885, "quality": 0.6666666666666666, "length": 8}}, "n4659": {"so_17013534_17014155_0": {"section_id": 8642, "quality": 0.6666666666666666, "length": 8}}}});