post_cb({"16594519": {"CommentCount": "7", "ViewCount": "850", "CreationDate": "2013-05-16T18:10:26.273", "LastActivityDate": "2013-05-16T20:49:12.443", "Title": "Should this code cause a warning", "AcceptedAnswerId": "16595032", "PostTypeId": "1", "Id": "16594519", "Score": "4", "Body": "<p>I came across code similar to that below which is legal, albeit not very clever.  Two stack variables in the same function in scope at the same time with the same name is legal but it can cause problems.  (Read: I just wasted half an hour debugging this).  At warning level 4 on VS2010 (the highest level), I would have hoped it would have caught this kind of thing.  Am I missing something, or is it time to hit to whole code base with lint for a once over?  Would a static analysis tool such as lint even pick up name clashes like this?</p>\n<pre><code>   char *x = strchr(Buffer,' ');\n   if (x)\n   {\n     *x = 0;\n     x++;\n     char *x = strchr(x,' ') \n     if (x)\n        *x = 0;\n   }\n</code></pre>\n", "Tags": "<c++><warnings><static-analysis>", "OwnerUserId": "22564", "AnswerCount": "2"}, "16594619": {"ParentId": "16594519", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><strong>Edit:</strong> I didn't notice this when I wrote the original answer (below). The code you've posted is illegal, and causes undefined behavior. The offending line is this one:</p>\n<pre><code>char *x = strchr(x,' ');\n</code></pre>\n<p>Here the <code>x</code> within the <code>strchr</code> call <strong>does not</strong> refer to the <code>x</code> defined in the enclosing scope, but to the <code>x</code> defined previously on the same line. Hence that line reads from an uninitialized variable, which results in undefined behavior. From the C++ standard, </p>\n<blockquote>\n<p id=\"so_16594519_16594619_0\">\u00a73.3.2/1 <em>[basic.scope.pdecl]</em><br/>\n  The <em>point of declaration</em> for a name is immediately after its complete declarator (Clause 8) and before its <em>initializer</em> (if any), except as noted below. [ Example:</p>\n<pre><code>   int x = 12;\n   { int x = x; }\n</code></pre>\n<p id=\"so_16594519_16594619_1\">Here the second x is initialized with its own (indeterminate) value. \u2014end example ]</p>\n</blockquote>\n<p>GCC does complain if the corresponding line in the example below is changed to</p>\n<pre><code>int x = 21 + x; // generates \"warning: x is used uninitialized in this function\"\n</code></pre>\n<p>And duplicating your <code>strchr</code> example on VS2012 generates this warning (at <code>/W1</code> and above):</p>\n<pre><code>warning C4700: uninitialized local variable 'x' used\n</code></pre>\n<hr>\n<p>Original answer follows (not entirely accurate):</p>\n<p>There's nothing illegal about the code. You've introduced a new scope by adding braces, and you're allowed to define variables within the new scope even if those variable names have been previously defined in the enclosing scope.</p>\n<p>All references to the variable after the new definition will refer to the local variable instead of the one in the enclosing scope, until the lifetime of the local variable ends. The following code produces no warnings on GCC even when compiled with <code>-pedantic -Wall -Wextra</code></p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n  int x = 42;\n  {\n      std::cout &lt;&lt; x &lt;&lt; '\\n';\n      int x = 21;\n      std::cout &lt;&lt; x &lt;&lt; '\\n';\n  }\n  std::cout &lt;&lt; x &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>42\n21\n42\n</code></pre>\n<p>I don't know whether lint or another static analysis tool will pick out such things either. It is legal, but not advisable.</p>\n</hr>", "OwnerUserId": "241631", "LastEditorUserId": "241631", "LastEditDate": "2013-05-16T20:49:12.443", "Id": "16594619", "Score": "2", "CreationDate": "2013-05-16T18:17:24.610", "LastActivityDate": "2013-05-16T20:49:12.443"}, "16595032": {"ParentId": "16594519", "CommentCount": "4", "Body": "<p><a href=\"http://www.gimpel.com\" rel=\"nofollow\">PC-Lint</a> will detect this. The following code:</p>\n<pre><code>main (int argc, char *argv []) \n{\n    char *x = 0;\n    if (x)\n    {\n        char *x = 0;\n    }\n}\n</code></pre>\n<p>Gives a warning:</p>\n<pre><code>main.cpp  6  Warning 578: Declaration of symbol 'x' hides symbol 'x' (line 3)\n</code></pre>\n", "OwnerUserId": "18882", "PostTypeId": "2", "Id": "16595032", "Score": "2", "CreationDate": "2013-05-16T18:41:48.793", "LastActivityDate": "2013-05-16T18:41:48.793"}, "bq_ids": {"n4140": {"so_16594519_16594619_1": {"section_id": 7049, "quality": 0.7777777777777778, "length": 7}, "so_16594519_16594619_0": {"section_id": 7049, "quality": 0.7368421052631579, "length": 14}}, "n3337": {"so_16594519_16594619_1": {"section_id": 6794, "quality": 0.7777777777777778, "length": 7}, "so_16594519_16594619_0": {"section_id": 6794, "quality": 0.7368421052631579, "length": 14}}, "n4659": {"so_16594519_16594619_1": {"section_id": 8546, "quality": 0.7777777777777778, "length": 7}, "so_16594519_16594619_0": {"section_id": 8546, "quality": 0.7368421052631579, "length": 14}}}});