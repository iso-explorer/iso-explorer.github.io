post_cb({"14034835": {"Id": "14034835", "PostTypeId": "2", "Body": "<p>You're totally fine because string literals have static storage duration. That is, the string will be around in memory for the duration of the program. However, it would not be okay if you were to have declared your <code>c</code> and <code>d</code> as arrays like so:</p>\n<pre><code>const char c[] = \"a\";\nconst char d[] = \"b\";\n</code></pre>\n<p>This is because when an array is initialised with a string literal, the characters from the literal are copied into the array. That array has automatic storage duration, so the contents will be destroyed at the end of the function <code>x</code>. If you still did <code>global.insert(c)</code>, you would be pushing in a pointer to the first element of the <code>c</code> array, but that array won't exist for much longer.</p>\n<p>Here's some standard quotes. First, \u00a72.14.5/8:</p>\n<blockquote>\n<p id=\"so_14034827_14034835_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of <em>n</em> <code>const char</code>\u201d, where <em>n</em> is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p>And now the definition of static storage duration (\u00a73.7.1/1):</p>\n<blockquote>\n<p id=\"so_14034827_14034835_1\">All variables which do not have dynamic storage duration, do not have thread storage duration, and are not local have <em>static storage duration</em>. The storage for these entities shall last for the duration of the program (3.6.2, 3.6.3).</p>\n</blockquote>\n", "LastEditorUserId": "150634", "LastActivityDate": "2012-12-26T00:12:55.027", "Score": "8", "CreationDate": "2012-12-25T23:59:54.403", "ParentId": "14034827", "CommentCount": "9", "LastEditDate": "2012-12-26T00:12:55.027", "OwnerUserId": "150634"}, "bq_ids": {"n4140": {"so_14034827_14034835_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 7164}, "so_14034827_14034835_0": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_14034827_14034835_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 6908}, "so_14034827_14034835_0": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_14034827_14034835_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 8672}, "so_14034827_14034835_0": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "14034827": {"ViewCount": "698", "Body": "<p>With the following:</p>\n<pre><code>#include &lt;set&gt;\n\nstd::set&lt;const char *&gt; global = std::set&lt;const char *&gt;();\nvoid x() {\n    const char *c = \"a\";\n    const char *d = \"b\";\n\n    global.insert(c);\n    global.insert(d);\n}\n\nint main() {\n    x();\n    for (std::set&lt;const char *&gt;::const_iterator iter=global.begin(), end=global.end(); iter!=end; ++iter) {\n        printf(\"%s\\n\", *iter);\n    }\n\n    return 0;\n}\n</code></pre>\n<p>In the end, as expected, I receive <code>a</code> and <code>b</code> printed.</p>\n<p>Yet, is there any guarantee that, for example, if that set was part of a <code>bozo</code> object, that as the set they'd last until the end of <code>bozo</code>'s lifetime? Or would I have to <code>strdup</code> the strings to be sure?</p>\n", "AcceptedAnswerId": "14034835", "Title": "char* scope inside C++ containers", "CreationDate": "2012-12-25T23:57:42.923", "Id": "14034827", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-12-26T00:12:55.027", "Score": "4", "OwnerUserId": "768779", "Tags": "<c++><containers><cstring><strdup>", "AnswerCount": "1"}});