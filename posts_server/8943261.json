post_cb({"8943261": {"CommentCount": "0", "ViewCount": "6907", "CreationDate": "2012-01-20T14:53:35.440", "LastActivityDate": "2012-01-20T15:24:11.503", "Title": "std::unordered_map initialization", "AcceptedAnswerId": "8943287", "PostTypeId": "1", "Id": "8943261", "Score": "6", "Body": "<p>When I access an element in <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/operator_at\" rel=\"noreferrer\">std::unordered_map using operator []</a> for the first time, it is automatically created. What (if any) are gurantees about its initialization? (It is guaranteed to be value initialized, or only to be constructed)?</p>\n<p>Example:</p>\n<pre><code>std::unordered_map&lt;void *, size_t&gt; size;\nchar *test = new char[10];\nsize[test] += 10;\n</code></pre>\n<p>Is size[test] guaranteed to be 10 at the end of this sequence?</p>\n", "Tags": "<c++><std><unordered-map>", "OwnerUserId": "16673", "AnswerCount": "2"}, "8943287": {"ParentId": "8943261", "PostTypeId": "2", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_8943261_8943287_0\">Is size[test] guaranteed to be 10 at the end of this sequence?</p>\n</blockquote>\n<p>Yes.\nIn the last line of your code, <code>size[test]</code> value-initializes the element to <code>T()</code>, or in this case <code>size_t()</code>:</p>\n<blockquote>\n<p id=\"so_8943261_8943287_1\">C++11 23.4.4.3 map element access [map.access]</p>\n<p id=\"so_8943261_8943287_2\"><code>T&amp; operator[](const key_type&amp; x)</code>;</p>\n<p id=\"so_8943261_8943287_3\">1 Effects: If there is no key equivalent to x in the map, inserts value_type(x, <strong>T()</strong>) into the map.</p>\n</blockquote>\n<p>As to <code>T()</code>, the exact language is a somewhat involved, so I'll try to quote the relevant bits:</p>\n<blockquote>\n<p id=\"so_8943261_8943287_4\">C++11 8.5.16 The semantics of initializers are as follows.</p>\n<p id=\"so_8943261_8943287_5\">\u2014 <strong>If the initializer is (), the object is value-initialized.</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_8943261_8943287_6\">8.5.7 To <strong>value-initialize</strong> an object of type T means:</p>\n<p id=\"so_8943261_8943287_7\">\u2014 if T is a (possibly cv-qualified) class type ...</p>\n<p id=\"so_8943261_8943287_8\">\u2014 if T is a (possibly cv-qualified) non-union class type ...</p>\n<p id=\"so_8943261_8943287_9\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_8943261_8943287_10\">\u2014 <strong>otherwise, the object is zero-initialized.</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_8943261_8943287_11\">8.5.5 To <strong>zero-initialize</strong> an object or reference of type T means:</p>\n<p id=\"so_8943261_8943287_12\">\u2014 if T is a scalar type (3.9), <strong>the object is set to the value 0 (zero)</strong>, taken as an integral constant expression, converted to T;</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2012-01-20T15:24:11.503", "Id": "8943287", "Score": "16", "CreationDate": "2012-01-20T14:55:10.573", "LastActivityDate": "2012-01-20T15:24:11.503"}, "bq_ids": {"n4140": {"so_8943261_8943287_6": {"section_id": 3287, "quality": 0.8, "length": 4}, "so_8943261_8943287_11": {"section_id": 3285, "quality": 0.8333333333333334, "length": 5}, "so_8943261_8943287_7": {"section_id": 9, "quality": 1.0, "length": 4}, "so_8943261_8943287_12": {"section_id": 6143, "quality": 0.5454545454545454, "length": 6}, "so_8943261_8943287_3": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_8943261_8943287_9": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_8943261_8943287_8": {"section_id": 3285, "quality": 1.0, "length": 5}}, "n3337": {"so_8943261_8943287_6": {"section_id": 3157, "quality": 0.8, "length": 4}, "so_8943261_8943287_11": {"section_id": 3155, "quality": 0.8333333333333334, "length": 5}, "so_8943261_8943287_7": {"section_id": 382, "quality": 1.0, "length": 4}, "so_8943261_8943287_12": {"section_id": 3155, "quality": 1.0, "length": 11}, "so_8943261_8943287_3": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_8943261_8943287_9": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_8943261_8943287_8": {"section_id": 3155, "quality": 1.0, "length": 5}}, "n4659": {"so_8943261_8943287_11": {"section_id": 653, "quality": 0.6666666666666666, "length": 4}, "so_8943261_8943287_7": {"section_id": 408, "quality": 1.0, "length": 4}, "so_8943261_8943287_3": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_8943261_8943287_9": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_8943261_8943287_8": {"section_id": 4047, "quality": 1.0, "length": 5}}}, "8943410": {"ParentId": "8943261", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>What's the difference? Value-initialization for class-type objects entails default construction, so the answer is \"both\". For a map <code>&lt;K, V&gt;</code>, the new object will be initialized with <code>V()</code>.</p>\n<p>All standard containers initialize new elements with value- or direct-initialization (the latter possibly through a copy construction). It is not possible for new standard container elements to be in an \"uninitialized\" state (i.e. there is no mechanism that <em>default</em>-initializes elements).</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2012-01-20T15:16:24.443", "Id": "8943410", "Score": "0", "CreationDate": "2012-01-20T15:03:25.033", "LastActivityDate": "2012-01-20T15:16:24.443"}});