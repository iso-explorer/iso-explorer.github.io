post_cb({"20847637": {"CommentCount": "4", "CreationDate": "2013-12-30T21:10:19.020", "PostTypeId": "1", "AcceptedAnswerId": "20847776", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-30T21:27:09.967", "LastEditDate": "2017-05-23T12:21:46.537", "ViewCount": "1979", "FavoriteCount": "3", "Title": "Clang (OS X) requires \"template\" keyword in a particular nested declaration, while VS forbids it", "Id": "20847637", "Score": "7", "Body": "<p>I am writing a cross-platform application in two compilers (Clang on Xcode v5.0.2, and Visual Studio 2012 Update 4) and I have run into a scenario in which the two compilers disagree about the required syntax for the use of the <code>template</code> keyword in a nested declaration.</p>\n<p>Here is the code (boiled down to an easily reproducible test case):</p>\n<pre><code>template&lt;typename T&gt;\nstruct Base\n{\n    template&lt;typename U&gt;\n    struct InnerBase\n    {};\n};\n\ntemplate&lt;typename T, typename U&gt;\nstruct Derived : public Base&lt;T&gt;\n{\n    // the \"template\" keyword is REQUIRED in Clang/OSX\n    struct InnerDerived : public Base&lt;T&gt;::template InnerBase&lt;U&gt;\n    {};\n\n    // the \"template\" keyword is FORBIDDEN in Visual Studio 2012\n    struct InnerDerived : public Base&lt;T&gt;::InnerBase&lt;U&gt;\n    {};\n};\n\nint main()\n{\n    Derived&lt;int, int&gt;::InnerDerived foo;\n}\n</code></pre>\n<p>As noted, the two compilers disagree about the use of the \"template\" keyword.</p>\n<p>For Clang, when the <code>template</code> keyword is <strong>not</strong> included, the error is:</p>\n<blockquote>\n<p id=\"so_20847637_20847637_0\">Use 'template' keyword to treat 'InnerBase' as a dependent template\n  name</p>\n</blockquote>\n<p>For Visual Studio, when the <code>template</code> keyword <strong>is</strong> included, the error is:</p>\n<blockquote>\n<p id=\"so_20847637_20847637_1\">'Base::InnerBase' : use of class template requires template\n  argument list</p>\n</blockquote>\n<p>I have looked at various other StackOverflow questions regarding the rules for use of the <code>template</code> keyword (for example, <a href=\"https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords/613132#613132\">Where and why do I have to put the \"template\" and \"typename\" keywords?</a>).  However, looking at this, and other similar questions, does not give me confidence in claiming that one compiler is correctly implementing C++11 and that the other is not.</p>\n<p>(Note that Clang's error makes sense to me, while the VS error doesn't make much sense to me because it seems that I <em>am</em> including the template argument list.)</p>\n<p>Which compiler is correct in this case?  Should the <code>template</code> keyword be included, or not, in the sample code above (for C++11 compliance)?</p>\n<p>(Possibly I have not set the compiler settings correctly to use C++11 in one or the other case - in which case, my question still stands: which version of the code above is correct C++11 code?)</p>\n", "Tags": "<c++><templates><visual-studio-2012><c++11><clang>", "OwnerUserId": "368896", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20847637_20847776_1": {"section_id": 73, "quality": 0.8409090909090909, "length": 37}, "so_20847637_20847776_0": {"section_id": 72, "quality": 0.9696969696969697, "length": 32}, "so_20847637_20847637_1": {"section_id": 102, "quality": 0.625, "length": 5}}, "n3337": {"so_20847637_20847776_1": {"section_id": 68, "quality": 0.8409090909090909, "length": 37}, "so_20847637_20847776_0": {"section_id": 67, "quality": 0.9696969696969697, "length": 32}, "so_20847637_20847637_1": {"section_id": 97, "quality": 0.625, "length": 5}}, "n4659": {"so_20847637_20847776_1": {"section_id": 75, "quality": 0.8409090909090909, "length": 37}, "so_20847637_20847637_1": {"section_id": 106, "quality": 0.625, "length": 5}}}, "20847744": {"ParentId": "20847637", "CommentCount": "0", "Body": "<p>Clang is correct, <code>Base&lt;T&gt;</code> is dependent on a template parameter. This is yet another symptom of Visual C++ not implementing two-phase name lookup for templates.</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "20847744", "Score": "5", "CreationDate": "2013-12-30T21:17:39.670", "LastActivityDate": "2013-12-30T21:17:39.670"}, "20847776": {"ParentId": "20847637", "LastEditDate": "2017-05-23T11:51:18.177", "CommentCount": "3", "CreationDate": "2013-12-30T21:20:26.857", "OwnerUserId": "1120273", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "20847776", "Score": "7", "Body": "<p>It seems the relevant clause is 14.2 (temp.names) paragraph 4:</p>\n<blockquote>\n<p id=\"so_20847637_20847776_0\">When the name of a member template specialization appears after <code>.</code> or <code>-&gt;</code>in a postfix-expression or after a nested-name-specifier in a qualified-id, and the object expression of the postfix-expression is type-dependent or the nested-name-specifier in the qualified-id refers to a dependent type, but the name is not a member of the current instantiation (14.6.2.1), the member template name must be prefixed by the keyword <code>template</code>.</p>\n</blockquote>\n<p>I think that says that <code>template</code> is required. Following up with <a href=\"https://stackoverflow.com/users/420683/dyp\">DyP</a>'s comment, it seems certainly wrong to reject the keyword even if it isn't required (paragraph 5 of the same clause):</p>\n<blockquote>\n<p id=\"so_20847637_20847776_1\">A name prefixed by the keyword <code>template</code> shall be a template-id or the name shall refer to a class template. [Note: The keyword <code>template</code> may not be applied to non-template members of class templates. \u2014end note] [Note: As is the case with the <code>typename</code> prefix, the <code>template</code> prefix is allowed in cases where it is not strictly necessary; i.e., when the nested-name-specifier or the expression on the left of the <code>-&gt;</code> or <code>.</code> is not dependent on a template-parameter, or the use does not appear in the scope of a template.\u2014end note].</p>\n</blockquote>\n", "LastActivityDate": "2013-12-30T21:27:09.967"}});