post_cb({"41723401": {"CommentCount": "4", "AcceptedAnswerId": "41724629", "PostTypeId": "1", "LastEditorUserId": "2684539", "CreationDate": "2017-01-18T15:36:43.517", "LastActivityDate": "2017-01-18T16:45:10.577", "LastEditDate": "2017-01-18T15:41:38.143", "ViewCount": "88", "FavoriteCount": "1", "Title": "clang can remove function call when order of designated initializers does not correspond to fields declaration", "Id": "41723401", "Score": "3", "Body": "<p>this code:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Acc {\n    int a;\n};\nstruct Buu {\n    int b;\n};\n\nstruct Foo {\n    const Acc&amp; acc;\n    Buu&amp; buu;\n};\n\nvoid printInfo( const Foo&amp; ) {\n    std::cout &lt;&lt; \"hi!\" &lt;&lt; std::endl;\n}\n\nvoid call( Buu&amp; buu ) {\n    Acc acc = { 1 };\n    Foo foo = {\n        .acc = acc,\n        .buu = buu,\n    };\n    std::cout &lt;&lt; \"before\" &lt;&lt; std::endl;\n    printInfo( foo );\n    std::cout &lt;&lt; \"after\" &lt;&lt; std::endl;\n}\nvoid noCall( Buu&amp; buu ) {\n    Acc acc = { 1 };\n    Foo foo = {\n        .buu = buu,\n        .acc = acc,\n    };\n    std::cout &lt;&lt; \"before\" &lt;&lt; std::endl;\n    printInfo( foo );\n    std::cout &lt;&lt; \"after\" &lt;&lt; std::endl;\n}\n\nint main() {\n    Buu buu = { 2 };\n    call( buu );\n    noCall( buu );\n    return 0;\n}\n</code></pre>\n<p>when compliled by clang (I tried 3.7.0, 3.7.1) will out:</p>\n<pre><code>before\nhi!\nafter\nbefore\nafter\n</code></pre>\n<p>The second call of <code>printInfo</code> was removed... Difference between <code>call</code> and <code>noCall</code> only in order of designated initializers.</p>\n<p>With <code>-pedantic</code> option it will produce warnings that designated initializers is the feature of C99 but not C++ but still create code without the second call of <code>printInfo</code>.</p>\n<p>Is it known bug?</p>\n", "Tags": "<c++><clang++><designated-initializer>", "OwnerUserId": "7436383", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41723401_41724629_1": {"section_id": 5776, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_41723401_41724629_1": {"section_id": 5549, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_41723401_41724629_1": {"section_id": 7233, "quality": 0.9705882352941176, "length": 33}}}, "41724629": {"ParentId": "41723401", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think that is at least unfair if not a bug, because the warning is only at pedandic level when Clang simply removes all references to <code>foo</code> in function <code>nocall</code>. We can confirm it by looking at assembly code in debug mode (<code>c++ -S -g file.cpp</code>) to see exactly how the compiler interprets each and every line.</p>\n<p>When we look at the .s genererated file, we can see that in call, lines 20 <code>Foo foo = {...</code> and 25 <code>printInfo(foo)</code> are generated:</p>\n<pre><code>    .loc    1 20 0                  # ess.cpp:20:0\n    movq    %rcx, -64(%rbp)\n    movq    -40(%rbp), %rcx\n.Ltmp45:\n    movq    %rcx, -56(%rbp)\n    .loc    1 24 0                  # ess.cpp:24:0\n    movq    %rax, %rdi\n    callq   _ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    leaq    -64(%rbp), %rdi\n    leaq    _ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_, %rcx\n    movq    %rax, -24(%rbp)\n    movq    %rcx, -32(%rbp)\n    movq    -24(%rbp), %rax\n    .loc    5 322 0                 # /usr/include/c++/v1/ostream:322:0\n.Ltmp46:\n    movq    %rdi, -72(%rbp)         # 8-byte Spill\n    movq    %rax, %rdi\n    callq   *-32(%rbp)\n.Ltmp47:\n    .loc    1 25 0                  # ess.cpp:25:0\n    movq    -72(%rbp), %rdi         # 8-byte Reload\n    movq    %rax, -80(%rbp)         # 8-byte Spill\n    callq   _Z9printInfoRK3Foo\n    leaq    _ZNSt3__14coutE, %rdi\n    leaq    .L.str2, %rsi\n</code></pre>\n<p>But for nocall, the corresponding lines (30 and 35) are not:</p>\n<pre><code>    .loc    1 29 0 prologue_end     # ess.cpp:29:0\n.Ltmp57:\n    movl    .L_ZZ6noCallR3BuuE3acc, %ecx\n    movl    %ecx, -48(%rbp)\n    .loc    1 34 0                  # ess.cpp:34:0\n    movq    %rax, %rdi\n    callq   _ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    leaq    _ZNSt3__14coutE, %rdi\n    leaq    .L.str2, %rsi\n    leaq    _ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_, %rdx\n    movq    %rax, -24(%rbp)\n    movq    %rdx, -32(%rbp)\n    movq    -24(%rbp), %rax\n    .loc    5 322 0                 # /usr/include/c++/v1/ostream:322:0\n.Ltmp58:\n    movq    %rdi, -72(%rbp)         # 8-byte Spill\n    movq    %rax, %rdi\n    movq    %rsi, -80(%rbp)         # 8-byte Spill\n    callq   *-32(%rbp)\n.Ltmp59:\n    .loc    1 36 0                  # ess.cpp:36:0\n    movq    -72(%rbp), %rdi         # 8-byte Reload\n    movq    -80(%rbp), %rsi         # 8-byte Reload\n    movq    %rax, -88(%rbp)         # 8-byte Spill\n    callq   _ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    leaq    _ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_, %rdx\n    movq    %rax, -8(%rbp)\n    movq    %rdx, -16(%rbp)\n    movq    -8(%rbp), %rdi\n    .loc    5 322 0                 # /usr/include/c++/v1/ostream:322:0\n.Ltmp60:\n    callq   *-16(%rbp)\n.Ltmp61:\n    .loc    1 37 0                  # ess.cpp:37:0\n</code></pre>\n<p>Where the numbered lines in the cpp file are:   </p>\n<pre><code>18  void call( Buu&amp; buu ) {\n19      Acc acc = { 1 };\n20      Foo foo = {\n21          .acc = acc,\n22          .buu = buu,\n23      };\n24      std::cout &lt;&lt; \"before\" &lt;&lt; std::endl;\n25      printInfo( foo );\n26      std::cout &lt;&lt; \"after\" &lt;&lt; std::endl;\n27  }\n28  void noCall( Buu&amp; buu ) {\n29      Acc acc = { 1 };\n30      Foo foo = {\n31              .buu = buu,\n32              .acc = acc\n33      };\n34      std::cout &lt;&lt; \"before\" &lt;&lt; std::endl;\n35      printInfo( foo );\n36      std::cout &lt;&lt; \"after\" &lt;&lt; std::endl;\n37  }\n</code></pre>\n<p>My understanding is that clang pretends to process the C99 syntax in C++ mode when it does not.</p>\n<hr>\n<p>IMHO, this is a bug that could be reported to clang, because at least a diagnostic should be issued per 1.4 Implementation compliance [intro.compliance]</p>\n<blockquote>\n<p id=\"so_41723401_41724629_0\">1 <strong>The set of diagnosable rules consists of all syntactic and semantic rules in this International Standard</strong> except\n  for those rules containing an explicit notation that \u201cno diagnostic is required\u201d or which are described as\n  resulting in \u201cundefined behavior.\u201d\n  <br/>2 Although this International Standard states only requirements on C++ implementations, those requirements\n  are often easier to understand if they are phrased as requirements on programs, parts of programs, or\n  execution of programs. Such requirements have the following meaning:</p>\n<ul>\n<li>If a program contains no violations of the rules in this International Standard, a conforming implementation\n  shall, within its resource limits, accept and correctly execute2 that program.</li>\n<li>If a program contains <strong>a violation of any diagnosable rule</strong> or an occurrence of a construct described in\n  this Standard as \u201cconditionally-supported\u201d when the implementation does not support that construct,\n  <strong>a conforming implementation shall issue at least one diagnostic message</strong>.</li>\n</ul>\n<p id=\"so_41723401_41724629_1\">...<br/>8 A conforming implementation may have extensions (including additional library functions), provided they do\n  not alter the behavior of any well-formed program. <strong>Implementations are required to diagnose programs that\n  use such extensions that are ill-formed</strong> according to this International Standard. Having done so, however,\n  they can compile and execute such programs.</p>\n</blockquote>\n</hr>", "OwnerUserId": "3545273", "LastEditorUserId": "3545273", "LastEditDate": "2017-01-18T16:45:10.577", "Id": "41724629", "Score": "3", "CreationDate": "2017-01-18T16:31:55.267", "LastActivityDate": "2017-01-18T16:45:10.577"}});