post_cb({"26283076": {"CommentCount": "11", "AcceptedAnswerId": "26283564", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-10-09T16:08:06.790", "LastActivityDate": "2014-10-09T17:41:35.977", "LastEditDate": "2017-05-23T12:27:21.507", "ViewCount": "339", "FavoriteCount": "1", "Title": "return const reference of subclass", "Id": "26283076", "Score": "6", "Body": "<h1>What I know</h1>\n<p>I know that returning a const reference of a temporary object is ok! (like this example:)</p>\n<pre><code>class A {\npublic:\n  virtual const A&amp; clone () { return (A()); }\n  virtual std::string name() const { return (\"A\"); }\n};\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/11560339/returning-temporary-object-and-binding-to-const-reference\">Returning temporary object and binding to const reference</a></p>\n<h1>But!</h1>\n<p>If I would want to do that, It is still correct:</p>\n<pre><code>class B : public A {\npublic:\n  virtual const A&amp; clone () { return (B()); }\n  virtual std::string name() const { return (\"B\"); }\n};\n</code></pre>\n<p>I would think yes, but in execution time, the returned object is still considered as a A object (like in this example:)</p>\n<p>main.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nint main() {\n  B bb;\n  A* aa = &amp;bb;\n\n  std::cout &lt;&lt; aa-&gt;clone().name() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>output</p>\n<pre><code>valgrind ./a.out\n==14106== Use of uninitialised value of size 8\n==14106==    at 0x401BF9: main (main.cpp:8)\n==14106==  Uninitialised value was created by a stack allocation\n==14106==    at 0x401BF2: main (main.cpp:8)\nB\n</code></pre>\n<p>It's a B.. yay.. but this warning is quite horrifing....</p>\n<h1>Edit</h1>\n<p>Thanks to you i know see my error... but i would want to know some other things about it...</p>\n<p>When this is executed, what exactly in the stack is happening?</p>\n", "Tags": "<c++><inheritance><const-reference>", "OwnerUserId": "3975382", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26283076_26283564_0": {"section_id": 382, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_26283076_26283564_0": {"section_id": 373, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_26283076_26283564_0": {"section_id": 397, "quality": 0.9285714285714286, "length": 13}}}, "26283564": {"ParentId": "26283076", "CommentCount": "2", "CreationDate": "2014-10-09T16:33:21.147", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "26283564", "Score": "12", "Body": "<p>Binding a reference to a temporary extends the lifetime of the temporary...except when it doesn't. \u00a712.2 [class.temporary]/p5, emphasis added:</p>\n<blockquote>\n<p id=\"so_26283076_26283564_0\">The temporary to which the reference is bound or the temporary that is\n  the complete object of a subobject to which the reference is bound\n  persists for the lifetime of the reference except:</p>\n<ul>\n<li>A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> (12.6.2) persists until the constructor exits.</li>\n<li>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the <em>full-expression</em>\n  containing the call.</li>\n<li><strong>The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is\n  destroyed at the end of the <em>full-expression</em> in the return statement.</strong></li>\n<li>A temporary bound to a reference in a <em>new-initializer</em> (5.3.4) persists until the completion of the full-expression containing the\n  <em>new-initializer</em>.</li>\n</ul>\n</blockquote>\n<p>The case in the question you linked (<code>std::string foo(); const std::string &amp; s = foo();</code>) is OK; the lifetime of the temporary returned by <code>foo()</code> is extended until <code>s</code>'s lifetime ends. In your code, the temporary is bound to the returned value, and per the third bullet point above, its lifetime is not extended, and your function returns a dangling reference.</p>\n<p>Usually speaking, <code>clone()</code> functions should return a pointer to a heap-allocated copy.</p>\n", "LastActivityDate": "2014-10-09T16:33:21.147"}});