post_cb({"26692478": {"ParentId": "26692378", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Yes, that is standard. [func.wrap.func.inv] specifies that the <code>operator()(ArgTypes&amp;&amp;... args)</code> <br>of <code>std::function</code> calls</br></p>\n<blockquote>\n<p id=\"so_26692378_26692478_0\"><em>INVOKE</em> <code>(f, std::forward&lt;ArgTypes&gt;(args)..., R)</code> (20.8.2), where <code>f</code> is the target object (20.8.1) of <code>*this</code>.</p>\n</blockquote>\n<p><sub>(Where <code>R</code> is the specified return type.)</sub></p>\n<p>[func.require] defines <em><code>INVOKE</code></em>:</p>\n<blockquote>\n<p id=\"so_26692378_26692478_1\">Define <em><code>INVOKE</code></em> <code>(f, t1, t2, ..., tN)</code> as follows:</p>\n<ul>\n<li><p id=\"so_26692378_26692478_2\"><code>(t1.*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is an object of type <code>T</code> or a reference to an\n  object of type <code>T</code> or a reference to an object of a type derived from\n  <code>T</code>;</p></li>\n<li><p id=\"so_26692378_26692478_3\"><code>((*t1).*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is not one of the types described in\n  the previous item;</p></li>\n<li>[\u2026]</li>\n</ul>\n</blockquote>\n<p>Note that the trailing <code>R</code> in the call is used for the conversion to <code>R</code> (the return type of the <code>function</code>):</p>\n<blockquote>\n<p id=\"so_26692378_26692478_4\">Define <em><code>INVOKE</code></em> <code>(f, t1, t2, ..., tN, R)</code> as <em><code>INVOKE</code></em> <code>(f, t1, t2, ..., tN)</code> implicitly converted to <code>R</code>.</p>\n</blockquote>\n<p>The first and only argument you give is the pointer to the <code>Foo</code>-object. The call to <code>method</code>  thus results in the call <code>(void)((*t1).*f)()</code> which is, when written with your given values, equivalent to<br> <code>((*(&amp;myFoo)).&amp;Foo::bar)()</code>, which is equivalent to <code>myFoo.bar()</code>.</br></p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-01T21:10:00.460", "Id": "26692478", "Score": "9", "CreationDate": "2014-11-01T19:47:05.820", "LastActivityDate": "2014-11-01T21:10:00.460"}, "26692378": {"CommentCount": "8", "ViewCount": "640", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2014-11-01T19:36:33.907", "LastActivityDate": "2015-12-14T18:31:56.993", "Title": "Passing object pointer as first argument for a member function: is it standard?", "AcceptedAnswerId": "26692478", "LastEditDate": "2015-12-14T18:31:56.993", "Id": "26692378", "Score": "14", "Body": "<p>The following program compiles with both gcc and clang, but is this actually standard C++11 or do both compilers choose to support it for convenience?</p>\n<pre><code>struct Foo {\n    int i;\n\n    void bar() { std::cout &lt;&lt; i &lt;&lt; std::endl; }\n};\n\nint main() {\n    std::function&lt;void(Foo*)&gt; method = &amp;Foo::bar;\n\n    Foo myFoo{4};\n    method(&amp;myFoo); // prints 4\n}\n</code></pre>\n<p>This is certainly convenient, but I don't understand how/why it works. </p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2069064", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26692378_26692478_0": {"section_id": 4680, "quality": 0.5714285714285714, "length": 4}, "so_26692378_26692478_3": {"section_id": 4560, "quality": 1.0, "length": 11}, "so_26692378_26692478_2": {"section_id": 4560, "quality": 1.0, "length": 15}}, "n3337": {"so_26692378_26692478_0": {"section_id": 4489, "quality": 0.5714285714285714, "length": 4}, "so_26692378_26692478_3": {"section_id": 4390, "quality": 1.0, "length": 11}, "so_26692378_26692478_2": {"section_id": 4390, "quality": 1.0, "length": 15}}, "n4659": {"so_26692378_26692478_0": {"section_id": 6051, "quality": 0.5714285714285714, "length": 4}, "so_26692378_26692478_3": {"section_id": 5932, "quality": 0.6363636363636364, "length": 7}, "so_26692378_26692478_2": {"section_id": 7709, "quality": 0.6, "length": 9}}}});