post_cb({"21828008": {"AcceptedAnswerId": "21828814", "Body": "<p>In the following code which one is more efficient calling resize or erase ?</p>\n<pre><code>vector&lt;int&gt; a(5000);\n//....\nvector&lt;int&gt;::iterator it = remove(a.begin(),a.end(),8)\n\na.resize( std::distance(a.begin(),it));\n//or \na.erase(it,a.end());\n</code></pre>\n<p>I think it depends on number of duplicate elements right ?</p>\n", "CreationDate": "2014-02-17T11:35:45.130", "Score": "0", "CommentCount": "3", "OwnerUserId": "2586447", "Title": "which one is faster using erase or resize in a vector?", "LastActivityDate": "2014-02-17T12:19:00.533", "PostTypeId": "1", "Tags": "<c++><optimization><vector><resize><erase>", "AnswerCount": "3", "FavoriteCount": "0", "Id": "21828008", "ViewCount": "800"}, "21828814": {"PostTypeId": "2", "ParentId": "21828008", "Body": "<blockquote>\n<p id=\"so_21828008_21828814_0\">\"I think it depends on number of duplicate elements right ?\"</p>\n</blockquote>\n<p>Nope.  There's no destructor for <code>int</code> so 1 duplicate or 1000 makes no difference.  All either function needs to do is set an internal record of the new end of the in-use elements.  Consequently, the performance of <code>remove()</code> is the costly thing here, not the <code>resize</code>/<code>erase</code>.  (And even if there was a destructor, they'd loop over the same number of elements calling it, taking almost exactly the same time).</p>\n<p>You can almost always trust any seasoned Standard Library implementation not to do something stupid and take far longer than necessary, so given the insight that the behaviours are equivalent - per jrok's answer - there's no reason to investigate further unless your profiler's telling you to.</p>\n<ul>\n<li>that they do that and not update some \"size\" member is not mandated by the Standard, but every implementation I've actually looked at stores an \"end\" pointer, which makes sense as it supports <code>iter != v.end()</code> where iterators are implemented as pointers without slower begin+size arithmetic calculations for <code>end()</code>, nor equally ugly special casing so incrementing an end-1 iterator produces some sentinel state.</li>\n</ul>\n", "CreationDate": "2014-02-17T12:13:22.650", "Score": "1", "LastEditDate": "2014-02-17T12:19:00.533", "CommentCount": "0", "Id": "21828814", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastActivityDate": "2014-02-17T12:19:00.533"}, "21828157": {"PostTypeId": "2", "ParentId": "21828008", "Body": "<p>The number of duplicates being equal, they'd have equivalent complexity. When shrinking the vector, <code>resize</code> is defined in terms of <code>erase</code>:</p>\n<p><strong>n3337, 23.3.6.3</strong> says:</p>\n<blockquote>\n<p id=\"so_21828008_21828157_0\"><code>void resize(size_type sz);</code></p>\n<p id=\"so_21828008_21828157_1\">9 Effects: <strong>If <code>sz &lt;= size()</code>, equivalent to <code>erase(begin() + sz, end())</code>;</strong>. [...]</p>\n</blockquote>\n", "CreationDate": "2014-02-17T11:42:05.743", "Score": "3", "CommentCount": "0", "Id": "21828157", "OwnerUserId": "947836", "LastActivityDate": "2014-02-17T11:42:05.743"}, "21828648": {"PostTypeId": "2", "ParentId": "21828008", "Body": "<p>What does the profiler say?  This can clearly vary from one\nimplementation to another (although only by a constant \nfactor\u2014the complexity is required to be the same).</p>\n<p>For that matter: has the profiler shown you are loosing too much\ntime here?  The idiomatic way of writing this is:</p>\n<pre><code>a.erase( std::remove( a.begin(), a.end(), 8 ), a.end() );\n</code></pre>\n<p>Unless the profiler clearly says that this is a bottleneck, you\nshould write it in the idiomatic way, so that C++ programmers\nrecognize immediately what is happening, and don't waste time\nrecognizing that you're doing the same thing, and wondering why\nyou didn't do it in the idiomatic way.</p>\n", "CreationDate": "2014-02-17T12:05:32.923", "Score": "1", "CommentCount": "0", "Id": "21828648", "OwnerUserId": "649665", "LastActivityDate": "2014-02-17T12:05:32.923"}, "bq_ids": {"n3337": {"so_21828008_21828157_1": {"quality": 0.8, "length": 4, "section_id": 801}}}});