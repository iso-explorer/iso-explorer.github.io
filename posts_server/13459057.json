post_cb({"13501765": {"Id": "13501765", "PostTypeId": "2", "Body": "<p>Let's abstract away from <code>std::vector</code>. And call it <code>T</code>. </p>\n<pre><code>T t{a, b, c};\nT t = { a, b, c };\nT t({a, b, c});\n</code></pre>\n<p>The first two forms are list initialization (and the <em>only</em> difference between them is that if <code>T</code> is a class, for the second <code>explicit</code> constructors are forbidden to be called. If one is called, the program becomes ill-formed). The last form is just ordinary direct initialization as we know it from C++03:</p>\n<pre><code>T t(arg);\n</code></pre>\n<p>That there appears a <code>{a, b, c}</code> as <em>arg</em> means that the argument for the constructor call is a brace initializer list. This third form does not have the special handling that list initialization has. <code>T</code> <em>must</em> be a class type there, even if the braced init list has only 1 argument. I'm glad that <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1214\" rel=\"nofollow\">we put clear rules</a> before releasing C++11 in this case. </p>\n<hr>\n<p>As in terms of what constructors are called for the third, let's assume</p>\n<pre><code>struct T {\n  T(int);\n  T(std::initializer_list&lt;int&gt;);\n};\n\nT t({1});\n</code></pre>\n<p>Since a direct initialization is just a call to the overloaded constructors, we can transform this to</p>\n<pre><code>void ctor(int); \nvoid ctor(std::initializer_list&lt;int&gt;);\nvoid ctor(T const&amp;);\nvoid ctor(T &amp;&amp;);\n</code></pre>\n<p>We can use both trailing functions, but we would need a user defined conversion if we picked these functions. To initialize the <code>T ref</code> parameter, list initialization will be used because this is not a direct initialization with parens (so the parameter initialization is equivalent to <code>T ref t = { 1 }</code>). The first two functions are exact matches. However, the Standard says that in such a case, when one function converts to <code>std::initializer_list&lt;T&gt;</code> and the other does not, then the former function wins. Therefor in this scenario, the second <code>ctor</code> would be used. <em>Note that in this scenario, we will not do two-phase overload resolution with first only initializer list ctors - only list initialization will do that</em>. </p>\n<hr>\n<p>For the first two, we will use list-initialization, and it will do context dependent things. If <code>T</code> is an array, it will initialize an array. Take this example for a class</p>\n<pre><code>struct T {\n  T(long);\n  T(std::initializer_list&lt;int&gt;);\n};\n\nT t = { 1L };\n</code></pre>\n<p>In this case, we do <em>two-phase overload resolution</em>. We first only consider initializer list constructors and see if one matches, as argument we take the whole braced init list. The second ctor matches, so we pick it. We will ignore the first constructor. If we have no initializer list ctor or if none matches, we take all ctors and the elements of the initializer list</p>\n<pre><code>struct T {\n  T(long);\n\n  template&lt;typename A = std::initializer_list&lt;int&gt;&gt;\n  T(A);\n};\n\nT t = { 1L };\n</code></pre>\n<p>In this case we pick the first constructor, because <code>1L</code> cannot be converted to <code>std::initializer_list&lt;int&gt;</code>.</p>\n</hr></hr>", "LastEditorUserId": "34509", "LastActivityDate": "2012-11-21T20:48:51.790", "Score": "2", "CreationDate": "2012-11-21T20:41:41.047", "ParentId": "13459057", "CommentCount": "2", "OwnerUserId": "34509", "LastEditDate": "2012-11-21T20:48:51.790"}, "13460468": {"Id": "13460468", "PostTypeId": "2", "Body": "<p>Traditionally (C++98/03), initialization like <code>T x(T());</code> invoked direct initialization, and initialization like <code>T x = T();</code> invoked copy initialization. When you used copy initialization, the copy ctor was required to be present available, even though it might not (i.e., usually wasn't) used.</p>\n<p>Initializer lists kind of change that. Looking at \u00a78.5/14 and \u00a78.5/15 shows that the terms <em>direct-initialization</em> and <em>copy-initialization</em> still apply -- but looking at \u00a78.5/16, we find that for a braced init list, this is a distinction without a difference, at least for your first and third examples:</p>\n<blockquote>\n<p id=\"so_13459057_13460468_0\">\u2014 If the initializer is a (non-parenthesized) braced-init-list, the object or reference is list-initialized (8.5.4).</p>\n</blockquote>\n<p>As such, the actual initialization for your first and third examples is done identically, and neither requires a copy ctor (or move ctor). In both cases, we're dealing with the fourth bullet in \u00a78.5.4/3:</p>\n<blockquote>\n<p id=\"so_13459057_13460468_1\">\u2014 Otherwise, if T is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution (13.3, 13.3.1.7). If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed.</p>\n</blockquote>\n<p>... so both use <code>std::vector</code>'s ctor that takes an <code>std::initializer_list&lt;T&gt;</code> as its argument.</p>\n<p>As noted in the quote above, however, that only deals with a \"(non-parenthesized) braced-init-list\". For your second example with a parenthesized braced-init-list, we get to the first sub-bullet of the sixth bullet (geeze -- really need to talk to somebody about adding numbers for those) of \u00a78.5/16:</p>\n<blockquote>\n<p id=\"so_13459057_13460468_2\">\u2014 If the initialization is direct-initialization, or if it is copy-initialization where the cv-unqualified version of the source type is the same class as, or a derived class of, the class of the destination, constructors are considered. The applicable constructors are enumerated (13.3.1.3), and the best one is chosen through overload resolution (13.3). The constructor so selected is called to initialize the object, with the initializer expression or expression-list as its argument(s). If no constructor applies, or the overload resolution is ambiguous, the initialization is ill-formed.</p>\n</blockquote>\n<p>Since this uses the syntax for direct initialization, and the expression inside the parentheses is a braced-initializer-list, and <code>std::vector</code> has a ctor that takes an initializer list, that's the overload that's selected.</p>\n<p>Bottom line: although the routes through the standard to get there are different, all three end up using <code>std::vector</code>'s constructor overload for <code>std::initializer_list&lt;T&gt;</code>. From any practical viewpoint, there's no difference between the three. All three will invoke <code>vector::vector(std::initializer_list&lt;T&gt;</code>, with no copies or other conversions happening (not even ones that are likely to be elided and really happen only in theory).</p>\n<p>I believe with slightly different values, however, there is (or at least may be) one minor difference. The prohibition against narrowing conversions is in \u00a78.5.4/3, so your second example (which doesn't go through \u00a78.5.4/3, so to speak) should probably allow narrowing conversions, where the other two clearly do not. Even if I were an inveterate gambler, however, I wouldn't bet a thing on a compiler actually recognizing this distinction and allowing the narrowing conversion in the one case but not the others (I find it a little surprising, and rather doubt that it's intended to be allowed).</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2012-11-19T19:26:06.737", "Score": "2", "CreationDate": "2012-11-19T19:10:45.690", "ParentId": "13459057", "CommentCount": "0", "OwnerUserId": "179910", "LastEditDate": "2012-11-19T19:26:06.737"}, "13459057": {"ViewCount": "1438", "Body": "<p>What are the differences between the following three initializations with <code>std::initializer_list</code>s?</p>\n<pre><code>std::vector&lt;int&gt; a{ 2, 3, 5, 7};\nstd::vector&lt;int&gt; b( { 2, 3, 5, 7} );\nstd::vector&lt;int&gt; c = { 2, 3, 5, 7};\n</code></pre>\n<p>In the above example, <code>std::vector</code> is just a placeholder, but I am interested in a general answer.</p>\n", "AcceptedAnswerId": "13501765", "Title": "std::initializer_list variations", "CreationDate": "2012-11-19T17:31:41.547", "Id": "13459057", "CommentCount": "3", "LastEditDate": "2017-10-06T18:10:31.947", "PostTypeId": "1", "LastEditorUserId": "63550", "LastActivityDate": "2017-10-06T18:10:31.947", "Score": "5", "OwnerUserId": "252000", "Tags": "<c++><syntax><c++11><initialization><initializer-list>", "AnswerCount": "4"}, "13460437": {"Id": "13460437", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13459057_13460437_0\">In the above example, std::vector is just a placeholder, I am interested in a general answer.</p>\n</blockquote>\n<p>How \"general\" of an answer do you want? Because what that means <em>really</em> depends on what the type you're initializing is and what constructors they have.</p>\n<p>For example:</p>\n<pre><code>T a{ 2, 3, 5, 7};\nT b( { 2, 3, 5, 7} );\n</code></pre>\n<p>These <em>may</em> be two different things. Or they may not. It depends on what constructors <code>T</code> has. If <code>T</code> has a constructor that takes a single <code>initializer_list&lt;int&gt;</code> (or some other <code>initializer_list&lt;U&gt;</code>, where <code>U</code> is an integral type), then both of these will call that constructor.</p>\n<p>However, if it doesn't have that, then these two will do different things. The first, will attempt to call a constructor that takes 4 arguments that can be generated by integer literals. The second will attempt to call a constructor that takes <em>one argument</em>, which it will try to initialize with <code>{2, 3, 5, 7}</code>. This means that it will go through each one-argument constructor, figure out what the type for that argument is, and attempt to construct it with <code>R{2, 3, 5, 7}</code> If none of those work, then it will attempt to pass it as an <code>initializer_list&lt;int&gt;</code>. And if that doesn't work, then it fails.</p>\n<p><code>initializer_list</code> constructors always have priority.</p>\n<p>Note that the <code>initializer_list</code> constructors are only in play because <code>{2, 3, 5, 7}</code> is a braced-init-list where every element has the same type. If you had <code>{2, 3, 5.3, 7.9}</code>, then it wouldn't check <code>initializer_list</code> constructors.</p>\n<pre><code>T c = { 2, 3, 5, 7};\n</code></pre>\n<p>This will behave like <code>a</code>, save for what kinds of conversions it will do. Since this is copy-list-initialization, it will attempt to call an initializer_list constructor. If no such constructor is available, it will attempt to call a 4-argument constructor, but it will only allow <em>implicit conversions</em> of its for arguments into the type parameters.</p>\n<p>That's the only difference. It doesn't require copy/move constructors or anything (the specification only mentions copy-list-initialization in 3 places. None of them forbid it when copy/move construction is unavailable). It is almost exactly equivalent to <code>a</code> except for the kind of conversion it allows on its arguments.</p>\n<p>This is why it's commonly called \"uniform initialization\": because it works almost the same way everywhere.</p>\n", "LastEditorUserId": "734069", "LastActivityDate": "2012-11-19T19:16:49.387", "Score": "2", "CreationDate": "2012-11-19T19:08:51.513", "ParentId": "13459057", "CommentCount": "1", "OwnerUserId": "734069", "LastEditDate": "2012-11-19T19:16:49.387"}, "bq_ids": {"n4140": {"so_13459057_13460468_2": {"length": 41, "quality": 0.9111111111111111, "section_id": 3296}, "so_13459057_13460468_1": {"length": 21, "quality": 0.875, "section_id": 3325}, "so_13459057_13460468_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3296}}, "n3337": {"so_13459057_13460468_2": {"length": 41, "quality": 0.9111111111111111, "section_id": 3166}, "so_13459057_13460468_1": {"length": 21, "quality": 0.875, "section_id": 3195}, "so_13459057_13460468_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3166}}, "n4659": {"so_13459057_13460468_2": {"length": 41, "quality": 0.9111111111111111, "section_id": 4058}, "so_13459057_13460468_1": {"length": 21, "quality": 0.875, "section_id": 4091}, "so_13459057_13460468_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 4058}}}, "13459359": {"Id": "13459359", "PostTypeId": "2", "Body": "<p>I played a bit on gcc 4.7.2 with a custom class taking <code>std::initializer_list</code> in a constructor. I tried all those scenarios and more. It seems there is really no difference in observable results on that compiler for those 3 statements.</p>\n<p><strong>EDIT:</strong> This is exact code I used for testing:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;initializer_list&gt;\n\nclass A {\npublic:\n  A()                    { std::cout &lt;&lt; \"A::ctr\\n\"; }\n  A(const A&amp;)            { std::cout &lt;&lt; \"A::ctr_copy\\n\"; }\n  A(A&amp;&amp;)                 { std::cout &lt;&lt; \"A::ctr_move\\n\"; }\n  A &amp;operator=(const A&amp;) { std::cout &lt;&lt; \"A::=_copy\\n\"; return *this; }\n  A &amp;operator=(A&amp;&amp;)      { std::cout &lt;&lt; \"A::=_move\\n\"; return *this; }\n  ~A()                   { std::cout &lt;&lt; \"A::dstr\\n\"; }\n};\n\nclass B {\n  B(const B&amp;)            { std::cout &lt;&lt; \"B::ctr_copy\\n\"; }\n  B(B&amp;&amp;)                 { std::cout &lt;&lt; \"B::ctr_move\\n\"; }\n  B &amp;operator=(const B&amp;) { std::cout &lt;&lt; \"B::=copy\\n\"; return *this; }\n  B &amp;operator=(B&amp;&amp;)      { std::cout &lt;&lt; \"B::=move\\n\"; return *this; }\npublic:\n  B(std::initializer_list&lt;A&gt; init) { std::cout &lt;&lt; \"B::ctr_ user\\n\"; }\n  ~B()                             { std::cout &lt;&lt; \"B::dstr\\n\"; }\n};\n\nint main()\n{\n  B a1{ {}, {}, {} };\n  B a2({ {}, {}, {} });\n  B a3 = { {}, {}, {} };\n  // B a4 = B{ {}, {}, {} }; // does not compile on gcc 4.7.2, gcc 4.8 and clang (top version)\n  std::cout &lt;&lt; \"--------------------\\n\";\n}\n</code></pre>\n<p><code>a1</code>, <code>a2</code> and <code>a3</code> compiles fine on gcc 4.7.2, gcc 4.8 and the latest clang. I also do not see any observable results between the number of operations done on list members for all 3 cases. The last case (not from question) does not compile if I make <code>B</code> copy/move constructor private/deleted.</p>\n", "LastEditorUserId": "1749706", "LastActivityDate": "2012-11-19T18:54:48.763", "Score": "1", "CreationDate": "2012-11-19T17:51:48.417", "ParentId": "13459057", "CommentCount": "11", "OwnerUserId": "1749706", "LastEditDate": "2012-11-19T18:54:48.763"}});