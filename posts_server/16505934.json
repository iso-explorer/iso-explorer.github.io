post_cb({"bq_ids": {"n4140": {"so_16505934_16505946_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 6057}, "so_16505934_16505946_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}}, "n3337": {"so_16505934_16505946_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}, "so_16505934_16505946_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 5825}}, "n4659": {"so_16505934_16505946_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}, "so_16505934_16505946_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 7555}}}, "16505946": {"Id": "16505946", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16505934_16505946_0\">Is it some kind of undefined behavior with const_cast ?</p>\n</blockquote>\n<p><strong>Yes</strong>, your program contains undefined behavior.</p>\n<p>This means that you cannot have any expectation on its output. The reason is given by paragraph 7.1.6.1/4 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16505934_16505946_1\">Except that any class member declared <code>mutable</code> (7.1.1) can be modified, any attempt to modify a <code>const</code>\n  object during its lifetime (3.8) results in undefined behavior</p>\n</blockquote>\n<p>Paragraph 5.2.11/7 on <code>const_cast</code> contains a further warning:</p>\n<blockquote>\n<p id=\"so_16505934_16505946_2\">[ <em>Note</em>: Depending on the type of the object, a write operation through the pointer, lvalue or pointer\n  to data member resulting from a <code>const_cast</code> that casts away a <code>const</code>-qualifier may produce undefined\n  behavior (7.1.6.1). \u2014<em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2013-05-12T09:28:03.223", "CommentCount": "1", "CreationDate": "2013-05-12T09:28:03.223", "ParentId": "16505934", "Score": "9", "OwnerUserId": "1932150"}, "16505934": {"ViewCount": "65", "Body": "<p>For below snippet,</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid fun(const int *p)\n{\n    int *q = const_cast&lt;int *&gt;(p);\n    *q = *q * 10;\n    cout&lt;&lt;\"q: \"&lt;&lt;q&lt;&lt;\"\\t Value: \"&lt;&lt;*q&lt;&lt;endl;\n}\n\nint main()\n{\n    const int a = 10;\n    const int *z = &amp;a;\n    fun(z);\n    cout&lt;&lt;\"z: \"&lt;&lt;z&lt;&lt;\"\\t\"&lt;&lt;\"Address of a: \"&lt;&lt;&amp;a&lt;&lt;endl;\n    cout&lt;&lt;\"value at z: \"&lt;&lt;*z&lt;&lt;\"\\t\\t value in a: \"&lt;&lt;a&lt;&lt;endl;\n}\n</code></pre>\n<p>the output produced is</p>\n<pre><code>q: 0x7fff65910fcc    Value: 100\nz: 0x7fff65910fcc   Address of a: 0x7fff65910fcc\nvalue at z: 100      value in a: 10\n</code></pre>\n<p>Why the value of a is not modified even though i tried to modify it in fun()?</p>\n<p>How come the address of a and the pointer z are same but the values are different? </p>\n<p>Is it some kind of undefined behavior with const_cast ?</p>\n", "AcceptedAnswerId": "16505946", "Title": "Why const_cast is not modifying the value in caller function?", "CreationDate": "2013-05-12T09:26:30.470", "Id": "16505934", "CommentCount": "1", "LastEditDate": "2013-05-12T09:29:30.387", "PostTypeId": "1", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-12T09:29:30.387", "Score": "2", "OwnerUserId": "426051", "Tags": "<c++><linux><const>", "AnswerCount": "1"}});