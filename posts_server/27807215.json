post_cb({"bq_ids": {"n4140": {"so_27807215_27807289_2": {"length": 27, "quality": 0.9, "section_id": 3260}, "so_27807215_27807289_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 3260}, "so_27807215_27807281_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 3259}, "so_27807215_27807289_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3259}}, "n3337": {"so_27807215_27807289_2": {"length": 27, "quality": 0.9, "section_id": 3132}, "so_27807215_27807289_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 3132}, "so_27807215_27807281_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 3131}, "so_27807215_27807289_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3131}}, "n4659": {"so_27807215_27807289_2": {"length": 24, "quality": 0.8, "section_id": 4018}, "so_27807215_27807289_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 4018}, "so_27807215_27807281_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4017}, "so_27807215_27807289_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 4017}}}, "27807215": {"ViewCount": "97", "Body": "<p>Can I use <code>this</code> in a function declaration (part of a class) to specify a default argument?</p>\n<p>Example:</p>\n<pre><code>class Object {\n\n    Object::Object(){\n        this-&gt;color = rand(); //let's pretend that rand() will generate a random integer and that fillBg can draw a color given an integer.\n    }\n\n    Object::fillBg(int color = this-&gt;color){\n        //do stuff\n    }\n\n}\n</code></pre>\n<p>...so when an object is made of this <code>Object</code> class, a random color will be painted as the background of the object (unless you pass another color).</p>\n", "AcceptedAnswerId": "27807281", "Title": "Use \"this\" in a function declaration (as a default parameter)", "CreationDate": "2015-01-06T21:09:19.950", "Id": "27807215", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2015-01-06T21:34:01.377", "Score": "1", "OwnerUserId": "940158", "Tags": "<c++>", "AnswerCount": "3"}, "27807289": {"Id": "27807289", "PostTypeId": "2", "Body": "<p>No, this is not allowed. [dcl.fct.default]/p8</p>\n<blockquote>\n<p id=\"so_27807215_27807289_0\">The keyword this shall not be used in a default argument of a member function. [ Example:</p>\n<pre><code> class A {\n     void f(A* p = this) { } // error\n };\n</code></pre>\n<p id=\"so_27807215_27807289_1\">\u2014 end example ]</p>\n</blockquote>\n<p>Anyway, it doesn't matter because of what [dcl.fct.default]/p9 says:</p>\n<blockquote>\n<p id=\"so_27807215_27807289_2\">Similarly, a non-static member shall not be used in a default argument, even if it is not\n  evaluated, unless it appears as the <em>id-expression</em> of a class member access expression (5.2.5) or unless it is used to form a pointer to member (5.3.1). [ Example: the declaration of <code>X::mem1()</code> in the following example is ill-formed because no object is supplied for the non-static member <code>X::a</code> used as an initializer.</p>\n<pre><code>int b;\nclass X {\n    int a;\n    int mem1(int i = a); // error: non-static member a\n    // used as default argument\n    int mem2(int i = b); // OK; use X::b\n    static int b;\n};\n</code></pre>\n<p id=\"so_27807215_27807289_3\">The declaration of <code>X::mem2()</code> is meaningful, however, since no object is needed to access the static member <code>X::b</code>.</p>\n</blockquote>\n", "LastEditorUserId": "701092", "LastActivityDate": "2015-01-06T21:34:01.377", "Score": "2", "CreationDate": "2015-01-06T21:14:47.717", "ParentId": "27807215", "CommentCount": "0", "LastEditDate": "2015-01-06T21:34:01.377", "OwnerUserId": "701092"}, "27807281": {"Id": "27807281", "PostTypeId": "2", "Body": "<p>No, you can't. The standard prohibits it explicitly:</p>\n<blockquote>\n<p id=\"so_27807215_27807281_0\">The keyword <code>this</code> shall not be used in a default argument of a member function.</p>\n</blockquote>\n<p>(C++11, [dcl.fct.default]/7)</p>\n<p>I believe this rule makes sense because initialization of default arguments takes place in the context of the caller, not the callee. (And in the caller's context there may be no such thing as <code>this</code>, or it might be a different object, which could cause confusion.)</p>\n<p>One possible solution is just to overload.</p>\n<pre><code>Object::fillBg(int color) {\n    // ...\n}\n\nObject::fillBg() {\n    fillBg(this-&gt;color);\n}\n</code></pre>\n", "LastActivityDate": "2015-01-06T21:14:15.647", "CommentCount": "2", "CreationDate": "2015-01-06T21:14:15.647", "ParentId": "27807215", "Score": "7", "OwnerUserId": "481267"}, "27807250": {"Id": "27807250", "PostTypeId": "2", "Body": "<p>I assume there is a variable color in the class too, else everything makes no sense.  </p>\n<p>The answer is no, this is not possible. But you can use  </p>\n<pre><code>Object::fillBg()\n{\n    fillBg(this-&gt;color);\n}\nObject::fillBg(int color)\n{\n    //use color\n}\n</code></pre>\n", "LastEditorUserId": "1756405", "LastActivityDate": "2015-01-06T21:13:33.530", "Score": "6", "CreationDate": "2015-01-06T21:12:03.437", "ParentId": "27807215", "CommentCount": "1", "LastEditDate": "2015-01-06T21:13:33.530", "OwnerUserId": "3134621"}});