post_cb({"bq_ids": {"n4140": {"so_16969535_16970198_1": {"length": 28, "quality": 1.0, "section_id": 7064}, "so_16969535_16970198_0": {"length": 22, "quality": 0.88, "section_id": 7061}}, "n3337": {"so_16969535_16970198_1": {"length": 28, "quality": 1.0, "section_id": 6808}, "so_16969535_16970198_0": {"length": 22, "quality": 0.88, "section_id": 6805}}, "n4659": {"so_16969535_16970198_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 8561}, "so_16969535_16970198_0": {"length": 22, "quality": 0.88, "section_id": 8558}}}, "16969535": {"ViewCount": "682", "Body": "<p>Here is a snippet of my code showing a declaration of a vector in a try-catch block:</p>\n<pre><code>try {\nvector&lt;opClass&gt; op;\n}\ncatch (bad_alloc xa) {\n    cout &lt;&lt; \"\\nAllocation failure!\\n\";\n    return 1;\n};\n//...\n//...\nop.push_back(&lt;input some stuff&gt;) //error c2065: op undeclared identifier\n</code></pre>\n<p>Strangely when I put my vector declaration outside of the try-catch block, the error goes away.  Is this something to do with how vectors are defined in the STL?  I thought it would have been good practice to put this declaration in a try-catch block as vectors are dynamic arrays?</p>\n", "AcceptedAnswerId": "16969639", "Title": "c++ vector doesn't declare in try-catch", "CreationDate": "2013-06-06T18:30:43.050", "Id": "16969535", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-06-06T19:12:55.930", "Score": "-2", "OwnerUserId": "2460807", "Tags": "<c++><vector><try-catch><undeclared-identifier>", "AnswerCount": "2"}, "16970198": {"Id": "16970198", "PostTypeId": "2", "Body": "<h3>Scope in a block</h3>\n<p>A set of curly-brackets <code>{</code> and <code>}</code> is called <code>Compound statement or block</code> (N3242 C++11).</p>\n<p>The standard (\u00a73.3.3/1) tells you:</p>\n<blockquote>\n<p id=\"so_16969535_16970198_0\">A name declared in a block (6.3) is local to that block; it has block scope. Its potential scope begins at its point of declaration (3.3.2) and ends at the end of its block. A variable declared at block scope is a local variable.</p>\n</blockquote>\n<p>This means: <strong>Anything declared within a set of curly brackets cannot be accessed outside.</strong></p>\n<p>Your variable <code>op</code> is simply not declared after your try-block (which is the case due to the brackets). \nThis is not specific to <code>std::vector</code> but applies to all kinds of variables.</p>\n<p>Note also \u00a73.3.3/4:</p>\n<blockquote>\n<p id=\"so_16969535_16970198_1\">Names declared in the for-init-statement, the for-range-declaration, and in the condition of if, while, for, and switch statements are local to the if, while, for, or switch statement (including the controlled statement), and shall not be redeclared in a subsequent condition of that statement nor in the outermost block (or, for the if statement, any of the outermost blocks) of the controlled statement; see 6.4.</p>\n</blockquote>\n<h3>std::vector</h3>\n<p>The std::vector is most likely to be implemented with proper try and catch blocks handling the rollback of memory allocation and object construction.</p>\n<p>You do not need try/catch stuff when declaring a vector.\nThe vector itself will, nevertheless, not allocate any memory when declared the way you have shown.</p>\n<pre><code>vector&lt;opClass&gt; op;\n</code></pre>\n<p>This is an empty vector. There is only space on the stack for this vector and no heap allocation will take place since no memory is required.</p>\n", "LastEditorUserId": "951423", "LastActivityDate": "2013-06-06T19:12:55.930", "Score": "4", "CreationDate": "2013-06-06T19:06:10.353", "ParentId": "16969535", "CommentCount": "0", "OwnerUserId": "951423", "LastEditDate": "2013-06-06T19:12:55.930"}, "16969639": {"Id": "16969639", "PostTypeId": "2", "Body": "<p>A <code>try</code> block defines a scope. Anything declared inside a scope cannot be used outside that scope. This has nothing to do with <code>vector</code>, it applies to objects of any type.  The solution is not to move the declaration outside of the <code>try</code> block, it is to move everything else <em>into</em> the <code>try</code> block.</p>\n<pre><code>try {\n    vector&lt;opClass&gt; op;\n    //...\n    //...\n    op.push_back(&lt;input some stuff&gt;)\n}\ncatch (bad_alloc xa) {\n    cout &lt;&lt; \"\\nAllocation failure!\\n\";\n    return 1;\n}\n</code></pre>\n", "LastEditorUserId": "440119", "LastActivityDate": "2013-06-06T18:44:51.223", "Score": "5", "CreationDate": "2013-06-06T18:37:42.063", "ParentId": "16969535", "CommentCount": "0", "OwnerUserId": "440119", "LastEditDate": "2013-06-06T18:44:51.223"}});