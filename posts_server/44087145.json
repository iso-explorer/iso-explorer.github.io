post_cb({"44087295": {"Id": "44087295", "PostTypeId": "2", "Body": "<p>Forward declaration is a type of declaration where you specify an Identifier for a Variable, Constant, Type or a Function without giving it's implementation. it actually tells the compiler about an entity with some meta data like name, size etc.</p>\n<p>On the other hand, by prototype declaration for a Function means the declaration of a Function with a name and type signature without specifying the function body. So it's only for the function concept, not for variables, constants or types. And so forward declaration can be regarded as a superset of prototype declaration. </p>\n<p>For the above example, according to definitions, it's both forward declaration and prototype declaration. Hopefully I am not wrong.</p>\n", "LastActivityDate": "2017-05-20T14:51:10.437", "Score": "0", "CreationDate": "2017-05-20T14:51:10.437", "ParentId": "44087145", "CommentCount": "0", "OwnerUserId": "3680299"}, "44087254": {"Id": "44087254", "PostTypeId": "2", "Body": "<p>A forward declaration is a declaration of an identifier (denoting an entity such as a type, a variable, a constant, or a function) for which the programmer has not yet given a complete definition.</p>\n<p>On the other hand a prototype refers to a function not an identifier.</p>\n<p>Hope the following clear things out for you!</p>\n<pre><code>int getnum(); // Function prototype. You have not yet implemented the body of getnum() function, thus its a forward delcaration. \nclass RandomClass; // Forward declaration of RandomClass. You have not yet implemented this class but you need it for the rest of your code.\n\nclass xx{\n    RandomClass *foo; // Our need of having a member like that, made us make a forward declaration of the class RandomClass, above class xx\n    void BarFunction(); // Function Prototype!\n};\n\nint getnum(){ //This is the simply the body of your prototype above. Has nothing to do with the classes\n    return 1+3;\n}\n\nvoid BarFUnction(){\n     cout &lt;&lt; \"foo-bar\\n\" ;\n}\n</code></pre>\n", "LastActivityDate": "2017-05-20T14:47:41.937", "Score": "0", "CreationDate": "2017-05-20T14:47:41.937", "ParentId": "44087145", "CommentCount": "0", "OwnerUserId": "5879036"}, "bq_ids": {"n4140": {"so_44087145_44087209_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3240}}, "n3337": {"so_44087145_44087209_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3113}}, "n4659": {"so_44087145_44087209_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3996}}}, "44087207": {"Id": "44087207", "PostTypeId": "2", "Body": "<p>Neither the term \"forward declaration\" nor \"prototype declaration\" are defined in the C++ standard, so very strictly speaking, it's neither. It is simply a <em>declaration.</em> If you want to be more specific, you could call it a <em>non-defining declaration,</em> or \"a declaration which is not a definition.\"</p>\n<p>When the words \"forward declaration\" are used in the standard, they are used to refer to declarations which declare, but do not define, the thing (function or class) they declare. Following this usage, <code>int getnum()</code> is therefore a forward declaration.</p>\n<p>\"Prototype declaration\" of a function is used even less in the standard<sup>(1)</sup>, and mostly when talking about [in]compatibility with C. However, when used, it refers to the exact same concept as a forward declaration of that function. Going by this, you could also call <code>int getnum();</code> a prototype declaration.</p>\n<p>To summarise, the terms \"forward declaration\" and \"prototype declaration\" have no formal definition, but from the way they are normally used and understood, <code>int getnum();</code> can be described as either.</p>\n<hr>\n<p><sup>(1)</sup> However, a similar term \"function prototype scope\" <em>is</em> defined in the standard (C++17 N4659 [basic.scope.proto] 6.3.4/1). It establishes the scope of function parameter names in a non-defining function declaration, and it's the closest enclosing function declarator.</p>\n</hr>", "LastEditorUserId": "1782465", "LastActivityDate": "2017-09-18T19:24:34.990", "Score": "6", "CreationDate": "2017-05-20T14:43:52.363", "ParentId": "44087145", "CommentCount": "5", "LastEditDate": "2017-09-18T19:24:34.990", "OwnerUserId": "1782465"}, "44087209": {"Id": "44087209", "PostTypeId": "2", "Body": "<p>C++ only allows full prototype declarations of functions, unlike C in which something like <code>int getnum();</code> could be a forward declaration of something like <code>int getnum(int);</code></p>\n<blockquote>\n<p id=\"so_44087145_44087209_0\">C.1.7 Clause 8: declarators [diff.decl]</p>\n<p id=\"so_44087145_44087209_1\">8.3.5\n  Change: In C ++ , a function declared with an empty parameter list takes no arguments. In C, an empty\n  parameter list means that the number and type of the function arguments are unknown.</p>\n<p id=\"so_44087145_44087209_2\"><strong>Example</strong>:</p>\n<pre><code>int f(); // means int f(void) in C ++, int f( unknown ) in C\n</code></pre>\n<p id=\"so_44087145_44087209_3\"><strong>Rationale</strong>: This is to avoid erroneous function calls (i.e., function calls with the wrong number or type of\n  arguments).</p>\n<p id=\"so_44087145_44087209_4\"><strong>Effect on original feature</strong>: Change to semantics of well-defined feature. This feature was marked as\n  \u201cobsolescent\u201d in C.</p>\n<p id=\"so_44087145_44087209_5\"><strong>Difficulty of converting</strong>: Syntactic transformation. The function declarations using C incomplete declaration style must be completed to become full prototype declarations. A program may need to be updated further if different calls to the same (non-prototype) function have different numbers of arguments or if the\n  type of corresponding arguments differed.</p>\n</blockquote>\n", "LastEditorUserId": "7860670", "LastActivityDate": "2017-05-20T14:49:08.127", "Score": "1", "CreationDate": "2017-05-20T14:44:01.420", "ParentId": "44087145", "CommentCount": "0", "LastEditDate": "2017-05-20T14:49:08.127", "OwnerUserId": "7860670"}, "44087145": {"ViewCount": "111", "Body": "<p>So I have this code:</p>\n<pre><code>class xx\n{\n    int getnum(); //Is this a forward declaration or a prototype declaration and why?\n};\n\nint xx::getnum()\n{\n    return 1+3;\n}\n</code></pre>\n<p>So the question has already been commented in the code but:</p>\n<p>Is <code>int getnum();</code> a forward declaration or a prototype declaration and why?</p>\n", "Title": "Difference between prototype declaration and forward declaration?", "CreationDate": "2017-05-20T14:37:39.460", "LastActivityDate": "2017-09-18T19:24:34.990", "CommentCount": "0", "LastEditDate": "2017-05-20T14:44:18.820", "PostTypeId": "1", "OwnerDisplayName": "user7982333", "LastEditorUserId": "1782465", "Id": "44087145", "Score": "3", "Tags": "<c++>", "AnswerCount": "4"}});