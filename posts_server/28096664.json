post_cb({"28096664": {"CommentCount": "0", "ViewCount": "172", "CreationDate": "2015-01-22T19:02:34.423", "LastActivityDate": "2015-01-22T19:21:04.817", "Title": "Field name same as field type using unnamed namespace", "PostTypeId": "1", "Id": "28096664", "Score": "4", "Body": "<p>Consider this sample of code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace /* unnamed namespace */\n{\n    struct Foo\n    {\n        int a;\n        int b;\n    };\n}\n\nstruct Boo\n{\n    Foo Foo; /* field name same as field type */\n    int c;\n    void print();\n};\n\nvoid Boo::print()\n{\n    std::cout&lt;&lt;\"c = \"&lt;&lt;c&lt;&lt;std::endl;\n    std::cout&lt;&lt;\"Foo \"&lt;&lt;Foo.a&lt;&lt;\" \"&lt;&lt;Foo.b&lt;&lt;std::endl;\n}\n\nint main()\n{\n    Boo boo;\n    boo.c=30;\n    boo.Foo.a=-21;\n    boo.Foo.b=98;\n    boo.print();\n    return 0;\n}\n</code></pre>\n<p>Clang can compile it without errors.</p>\n<p>Debian clang version 3.5.0-9 (tags/RELEASE_350/final) (based on LLVM 3.5.0)</p>\n<p>Microsoft cl.exe compile it without errors. (I don't remember version. I use VS 2012)</p>\n<p>And GCC: gcc version 4.9.2 (Debian 4.9.2-10):</p>\n<pre><code>main.cpp:14:6: error: declaration of \u2018{anonymous}::Foo Boo::Foo [-fpermissive]\n  Foo Foo; /* field name same as field type */\n      ^\nmain.cpp:5:9: error: changes meaning of \u2018Foo\u2019 from \u2018struct {anonymous}::Foo\u2019[-fpermissive]\n  struct Foo\n         ^\n</code></pre>\n<p>What is good behavior of compiler? Why GCC can't compile it, but clang and cl.exe does? What C++ standard says?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3965277", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28096664_28096988_2": {"section_id": 7070, "quality": 1.0, "length": 15}, "so_28096664_28096988_0": {"section_id": 7070, "quality": 0.875, "length": 7}}, "n3337": {"so_28096664_28096988_2": {"section_id": 6814, "quality": 1.0, "length": 15}, "so_28096664_28096988_0": {"section_id": 6814, "quality": 0.875, "length": 7}}, "n4659": {"so_28096664_28096988_2": {"section_id": 8568, "quality": 1.0, "length": 15}}}, "28096988": {"ParentId": "28096664", "CommentCount": "4", "Body": "<p>Both are correct. Per \u00a73.3.7/1</p>\n<blockquote>\n<p id=\"so_28096664_28096988_0\">The following rules describe the scope of names declared in classes.  </p>\n<ol>\n<li><p id=\"so_28096664_28096988_1\">[..]</p></li>\n<li><p id=\"so_28096664_28096988_2\">A name <code>N</code> used in a class <code>S</code> shall refer to the same declaration in its context and when re-evaluated in the completed scope of <code>S</code>. No diagnostic is required for a violation of this rule.</p></li>\n</ol>\n</blockquote>\n<p>Neither are obligated to give an error, gcc chose to and clang apparently chose not to. It's conforming either way.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28096988", "Score": "4", "CreationDate": "2015-01-22T19:21:04.817", "LastActivityDate": "2015-01-22T19:21:04.817"}});