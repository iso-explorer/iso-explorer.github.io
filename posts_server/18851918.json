post_cb({"18852136": {"Id": "18852136", "PostTypeId": "2", "Body": "<p>The variadic parameter pack must occur at the end of the function signature, not in the middle.</p>\n<p>For better understanding read this: \n<a href=\"https://stackoverflow.com/questions/14768951/variadic-function-template-with-pack-expansion-not-in-last-parameter\">Variadic function template with pack expansion not in last parameter</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-09-17T14:13:23.943", "Score": "4", "CreationDate": "2013-09-17T14:06:25.333", "ParentId": "18851918", "CommentCount": "1", "OwnerUserId": "2630794", "LastEditDate": "2017-05-23T12:29:50.150"}, "18852262": {"Id": "18852262", "PostTypeId": "2", "Body": "<p>Your functions can never be called, that's a context where template parameters cannot be deduced:</p>\n<p>n3337, 14.8.2.1/1 [temp.deduct.call]</p>\n<blockquote>\n<p id=\"so_18851918_18852262_0\">Template argument deduction is done by comparing each function template parameter type (call it P) with\n  the type of the corresponding argument of the call (call it A) as described below.<br>\n  [...]<br>\n  For a function parameter pack that occurs at the end of the parameter-declaration-list,\n  the type A of each remaining argument of the call is compared with the type P of the declarator-id of the\n  function parameter pack. Each comparison deduces template arguments for subsequent positions in the\n  template parameter packs expanded by the function parameter pack. <strong>For a function parameter pack that\n  does not occur at the end of the parameter-declaration-list, the type of the parameter pack is a non-deduced\n  context.</strong><br>\n  [...]  </br></br></br></p>\n</blockquote>\n<p>Move the argument pack to the end of function's parameter list.</p>\n<p>You could get away with specifying the template parameters explicitly, but I assume that's not what you want. E.g:</p>\n<pre><code>q.filter&lt;int, int, int&gt;(\"oi\", 1, 2, \"oi\", i);\n</code></pre>\n", "LastEditorUserId": "947836", "LastActivityDate": "2013-09-17T14:23:06.000", "Score": "3", "CreationDate": "2013-09-17T14:11:42.527", "ParentId": "18851918", "CommentCount": "1", "OwnerUserId": "947836", "LastEditDate": "2013-09-17T14:23:06.000"}, "18851918": {"ViewCount": "1361", "Body": "<p>I've a little problem in my code.\nI try to create a function with variadic parameter, but when I compile it, it fail, and i really don't see why.\nSo if anyone could help me ... </p>\n<p>here is my function:</p>\n<p>QuerySet.hpp:</p>\n<pre><code>template &lt;typename T&gt;\nclass QuerySet\n{\n   template&lt;typename U,typename ... Args&gt;\n   QuerySet&amp; filter(const std::string&amp; colum,Args ... args,const std::string&amp; operation, const U&amp; value);\n   //...\n}\n\ntemplate&lt;typename T&gt;\ntemplate&lt;typename U,typename ... Args&gt;\nQuerySet&lt;T&gt;&amp; QuerySet&lt;T&gt;::filter(const std::string&amp; colum,Args ... args,const std::string&amp; operation, const U&amp; value)\n{\n     //some job\n     return *this;\n}\n</code></pre>\n<p>main.cpp\n       QuerySet queryset;\n       queryset.filter(Perso::_master,Perso::_lvl,\"gt\",4); //line 135</p>\n<p>Note:\n  Perso::_master and Perso::_lvl are some static const std::string;</p>\n<p>Error:</p>\n<pre><code>g++ -g -std=c++0x -I\"/my_path/cpp-ORM\" -lmysqlcppconn   -o main.o -c main.cpp;\nmain.cpp: In function \u2018int main(int, char**)\u2019:\nmain.cpp:135:46: erreur: no matching function for call to \u2018orm::QuerySet&lt;Perso&gt;::filter(const string&amp;, const string&amp;, const string&amp;, int)\u2019\nmain.cpp:135:46: note: candidate is:\n/my_path/QuerySet.hpp:18:23: note: template&lt;class U, class ... Args&gt; orm::QuerySet&lt;T&gt;&amp; orm::QuerySet::filter(const string&amp;, Args ..., const string&amp;, const U&amp;) [with U = U, Args = {Args ...}, T = Perso, std::string = std::basic_string&lt;char&gt;]\n</code></pre>\n<p>Informations :\nI use gcc version 4.6.4 (Ubuntu/Linaro 4.6.4-1ubuntu1~12.04), but I try with gcc4.8, and I've a error to.</p>\n", "AcceptedAnswerId": "18852262", "Title": "variadic template parameter argument", "CreationDate": "2013-09-17T13:56:39.513", "Id": "18851918", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2013-09-17T14:23:06.000", "Score": "0", "OwnerUserId": "1930466", "Tags": "<c++><templates><variadic-templates>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18851918_18852262_0": {"length": 55, "quality": 0.873015873015873, "section_id": 302}}, "n3337": {"so_18851918_18852262_0": {"length": 61, "quality": 0.9682539682539683, "section_id": 293}}, "n4659": {"so_18851918_18852262_0": {"length": 52, "quality": 0.8253968253968254, "section_id": 309}}}});