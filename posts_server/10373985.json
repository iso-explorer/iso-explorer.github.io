post_cb({"10374104": {"ParentId": "10373985", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-04-29T17:09:31.200", "Score": "20", "LastEditorUserId": "12711", "LastEditDate": "2012-04-29T17:23:45.703", "Id": "10374104", "OwnerUserId": "12711", "Body": "<p><code>push_back()</code> and <code>push_front()</code> are defined in terms of <code>insert()</code>.  Similarly, <code>pop_back()</code> and <code>pop_front()</code> are defined in terms of <code>erase()</code>.</p>\n<p>Here's what the C++03 standard says about iterator invalidation for <code>insert()</code> (23.2.1.3/1):</p>\n<blockquote>\n<p id=\"so_10373985_10374104_0\">An insert in the middle of the deque invalidates all the iterators and\n  references to elements of the deque.  An insert at either end of the\n  deque invalidates all the iterators to the deque, but has no effect on\n  the validity of references to elements of the deque.</p>\n</blockquote>\n<p>So <code>push_front()</code> and <code>push_back()</code> <em>will</em> invalidate iterators, but references to the elements themselves remain valid.</p>\n<p>For <code>erase()</code> at either end (23.2.1.3/4):</p>\n<blockquote>\n<p id=\"so_10373985_10374104_1\">An erase in the middle of the deque invalidates all the iterators and\n  references to elements of the deque.  An erase at either end of the\n  deque invalidates only the iterators and the references to the erased\n  elements.</p>\n</blockquote>\n<p>So <code>pop_front()</code> and <code>pop-back()</code> only invalidate iterators/references to the element at the end in question.</p>\n<p>And this is said says this about <code>swap()</code> for any standard container (23.1/10 \"Container requirements\"):</p>\n<blockquote>\n<p id=\"so_10373985_10374104_2\">no swap() function invalidates any references, pointers, or iterators\n  referring to the elements of the containers being swapped.</p>\n</blockquote>\n<p>C++11 adds the following clarifications regarding how the <code>end()</code> iterator on a <code>deque</code> behaves for these operations. Basically, an iterator to <code>end()</code> should be treated as invalid after a <code>swap()</code> or after erasing the last element in the <code>deque</code>:</p>\n<blockquote>\n<p id=\"so_10373985_10374104_3\">An erase operation that erases the last element of a deque invalidates only <strong>the past-the-end iterator</strong> and all iterators and references to the erased elements.</p>\n<p id=\"so_10373985_10374104_4\">Every iterator referring to an element in one container before the swap shall refer to the same element in the other container after the swap. It is unspecified whether an iterator with value a.end() before the swap will have value b.end() after the swap.</p>\n</blockquote>\n<p>I think it would be a good idea to code as if these rules apply even if you're not yet using a C++11 compiler.</p>\n", "LastActivityDate": "2012-04-29T17:23:45.703"}, "10373985": {"CommentCount": "2", "AcceptedAnswerId": "10374104", "PostTypeId": "1", "LastEditorUserId": "211160", "CreationDate": "2012-04-29T16:54:16.667", "LastActivityDate": "2012-04-29T17:23:45.703", "LastEditDate": "2012-04-29T16:55:08.623", "ViewCount": "4309", "FavoriteCount": "10", "Title": "C++ deque: when iterators are invalidated", "Id": "10373985", "Score": "13", "Body": "<p>Please correct me if I am wrong. Thank you!</p>\n<p><code>insert</code> and <code>erase</code> will relocate elements, but elements before the position where insertion/erasure takes place don't relocate and hence their iterators remain valid.</p>\n<p><code>push_back</code> and <code>pop_back</code> don't invalidate any iterators.</p>\n<p><code>push_front</code> and <code>pop_front</code> invalidate all iterators.</p>\n<p><code>swap</code> won't relocate elements, but somehow I think it should invalidate iterators.</p>\n", "Tags": "<c++><stl><iterator><deque>", "OwnerUserId": "638231", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_10373985_10374104_2": {"section_id": 712, "quality": 1.0, "length": 11}, "so_10373985_10374104_1": {"section_id": 817, "quality": 0.8333333333333334, "length": 15}, "so_10373985_10374104_4": {"section_id": 710, "quality": 1.0, "length": 28}, "so_10373985_10374104_0": {"section_id": 817, "quality": 0.9130434782608695, "length": 21}, "so_10373985_10374104_3": {"section_id": 820, "quality": 1.0, "length": 14}}, "n3337": {"so_10373985_10374104_0": {"section_id": 806, "quality": 0.9130434782608695, "length": 21}, "so_10373985_10374104_1": {"section_id": 806, "quality": 0.8333333333333334, "length": 15}, "so_10373985_10374104_4": {"section_id": 699, "quality": 1.0, "length": 28}, "so_10373985_10374104_2": {"section_id": 701, "quality": 1.0, "length": 11}, "so_10373985_10374104_3": {"section_id": 809, "quality": 1.0, "length": 14}}, "n4659": {"so_10373985_10374104_2": {"section_id": 741, "quality": 1.0, "length": 11}, "so_10373985_10374104_1": {"section_id": 876, "quality": 0.8333333333333334, "length": 15}, "so_10373985_10374104_4": {"section_id": 739, "quality": 1.0, "length": 28}, "so_10373985_10374104_0": {"section_id": 876, "quality": 0.9130434782608695, "length": 21}, "so_10373985_10374104_3": {"section_id": 879, "quality": 1.0, "length": 14}}}});