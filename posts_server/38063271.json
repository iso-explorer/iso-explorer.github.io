post_cb({"38063271": {"CommentCount": "5", "ViewCount": "122", "CreationDate": "2016-06-27T21:08:56.103", "LastActivityDate": "2016-06-27T22:55:23.247", "Title": "Is it allowed to typedef a class template type argument into the same name?", "AcceptedAnswerId": "38063957", "PostTypeId": "1", "Id": "38063271", "Score": "4", "Body": "<p>This seems to compile and even work as expected in MSVC. But is it legal C++ code and is it guaranteed to do what is expected here (that is, export the template type to the struct's users under the same name)?</p>\n<pre><code>template &lt;typename EnumType&gt;\nstruct Enum\n{\n   // There are two hard problems in CS: cache invalidation and naming things.\n   typedef EnumType EnumType;\n};\n</code></pre>\n", "Tags": "<c++><templates><typedef>", "OwnerUserId": "634821", "AnswerCount": "1"}, "38063957": {"ParentId": "38063271", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think the type definition is not allowed.</p>\n<p>14.6.1 Locally declared names (N4296)</p>\n<blockquote>\n<p id=\"so_38063271_38063957_0\">6  A template-parameter shall not be redeclared within its scope\n  (including nested scopes).A template-parameter shall not have the same name as\n  the template name. [ Example:</p>\n<pre> \ntemplate&lt;class T, int i&gt; class Y { \n   int T;  // error: template-parameter redeclared \n   void f() { \n       char T; // error: template-parameter redeclared \n   }\n}; \n\ntemplate&lt;class X&gt; class X;  // error: template-parameter redeclared\n</pre>\n<p id=\"so_38063271_38063957_1\">\u2014 end example ]</p>\n</blockquote>\n<p>The <code>typedef EnumType EnumType</code> is a redefinition of the template-parameter as typedef-name.</p>\n", "OwnerUserId": "2249683", "LastEditorUserId": "1152524", "LastEditDate": "2016-06-27T22:55:23.247", "Id": "38063957", "Score": "2", "CreationDate": "2016-06-27T22:06:02.120", "LastActivityDate": "2016-06-27T22:55:23.247"}, "bq_ids": {"n4140": {"so_38063271_38063957_0": {"section_id": 184, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_38063271_38063957_0": {"section_id": 178, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_38063271_38063957_0": {"section_id": 189, "quality": 0.8666666666666667, "length": 13}}}});