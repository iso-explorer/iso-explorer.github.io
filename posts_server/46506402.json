post_cb({"46506402": {"CommentCount": "5", "ViewCount": "67", "PostTypeId": "1", "LastEditorUserId": "2962979", "CreationDate": "2017-09-30T19:38:33.860", "LastActivityDate": "2017-09-30T20:43:53.080", "Title": "Perfect forwarding of return values, undefined behaviour?", "FavoriteCount": "0", "LastEditDate": "2017-09-30T20:26:44.263", "Id": "46506402", "Score": "1", "Body": "<p>I have a set of functions where I employ template specialisation to perform transforms on certain values. However, for many types I want to pass the values through unchanged.</p>\n<p>To pass a value unchanged I have something like the following function as the default:</p>\n<pre><code>template&lt; typename arg &gt;\narg&amp;&amp; convert( arg&amp;&amp; x )\n{\n    return std::forward&lt;arg&gt;( x );\n}\n</code></pre>\n<p>This seems great but according to the answer <a href=\"https://stackoverflow.com/questions/12948078/forwarding-of-return-values-is-stdforward-is-needed\">here</a> it runs the risk of leaving a dangling reference in a statement like:</p>\n<pre><code>int&amp;&amp; x = convert( 5 );\n</code></pre>\n<p>If I only use this inline in function arguments, is this risk avoided?</p>\n<p>For example, do I run into undefined behaviour if I do something like...</p>\n<pre><code>void foo( int&amp;&amp; x )\n{\n    // Do something with x...\n}\n\nfoo( convert( 5 ) );\n</code></pre>\n", "Tags": "<c++><c++11><return><rvalue-reference><perfect-forwarding>", "OwnerUserId": "2962979", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46506402_46506881_1": {"section_id": 382, "quality": 1.0, "length": 13}}, "n3337": {"so_46506402_46506881_1": {"section_id": 373, "quality": 1.0, "length": 13}}, "n4659": {"so_46506402_46506881_1": {"section_id": 397, "quality": 1.0, "length": 13}}}, "46506881": {"ParentId": "46506402", "CommentCount": "0", "CreationDate": "2017-09-30T20:43:53.080", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "46506881", "Score": "3", "Body": "<blockquote>\n<p id=\"so_46506402_46506881_0\">For example, do I run into undefined behaviour if I do something like...</p>\n</blockquote>\n<p>No. The rule, from <a href=\"http://eel.is/c++draft/class.temporary#6.9\" rel=\"nofollow noreferrer\">[class.temporary]</a>, emphasis mine, is:</p>\n<blockquote>\n<p id=\"so_46506402_46506881_1\">A temporary object bound to a reference parameter in a function call persists until the <strong>completion of the <em>full-expression</em> containing the call</strong>.</p>\n</blockquote>\n<p>Our temporary (<code>5</code>) is bound to a reference parameter in a function call (to <code>arg&amp;&amp;</code> in <code>convert()</code>), so it persists until the end of the full-expression (which is the all of <code>foo(convert(5))</code> ). So this is fine, as long as you don't let a reference to <code>x</code> escape <code>foo()</code>.</p>\n", "LastActivityDate": "2017-09-30T20:43:53.080"}});