post_cb({"bq_ids": {"n4140": {"so_12520471_12520690_0": {"length": 34, "quality": 1.0, "section_id": 5561}}, "n3337": {"so_12520471_12520690_0": {"length": 34, "quality": 1.0, "section_id": 5343}}, "n4659": {"so_12520471_12520690_0": {"length": 34, "quality": 1.0, "section_id": 7008}}}, "12520624": {"Id": "12520624", "PostTypeId": "2", "Body": "<p>I think to best answer your question you should think about how iterators work and why everything is passed in as [first, last) and not something else.</p>\n<p>There are two core rules about iterators that you need to keep in mind. You can always increment one (that is to say, first++) and two iterators that point to the same element will always be equal. Knowing this you can loop over ANY range of iterators with the logic:</p>\n<pre><code>for(; first != last; first++)\n{\n}\n</code></pre>\n<p>So, if first and last are equal, nothing will happen. So if you call list.erase(it, it) nothing will be erased.</p>\n<p>To put it in a more general form. Any range in STL where first == last is effectively empty.</p>\n", "LastActivityDate": "2012-09-20T20:42:40.440", "CommentCount": "5", "CreationDate": "2012-09-20T20:42:40.440", "ParentId": "12520471", "Score": "2", "OwnerUserId": "194835"}, "12520471": {"ViewCount": "281", "Body": "<p>I mean in situation when the iterators point on same element. </p>\n<p>On <a href=\"http://www.cplusplus.com/reference/stl/list/erase/\" rel=\"nofollow\">http://www.cplusplus.com/reference/stl/list/erase/</a> say \"Removes from the list container either a single element (position) or a range of elements ([first,last)).\" and \n\"first, last\nIterators specifying a range within the list container to be removed: [first,last). i.e., the range includes all the elements between first and last, including the element pointed by first but not the one pointed by last.\"</p>\n<p>I totally don't know if I do everything wrong but for every part of my code I don't find needed information anywhere and when I want to test it by myself, I end in a situation, when I don't know what happened and after asking here and arguing for long hours I find something like \"undefined behavior\". So can someone help me faster, what is it now?</p>\n<p>And I want to be better programmer and find out better source than cplusplus.com and cppreference.com, because they both suck, is there something better? I am getting crazier every day with this C++ (but I still think it's much better for speedy huge programs than Java or C), please help. </p>\n", "AcceptedAnswerId": "12520690", "Title": "Does C++ list.erase(it, it) erase something? Where to find good references?", "CreationDate": "2012-09-20T20:31:01.147", "Id": "12520471", "CommentCount": "9", "PostTypeId": "1", "LastActivityDate": "2012-09-20T20:46:53.417", "Score": "0", "OwnerUserId": "1423254", "Tags": "<c++><list><website><erase>", "AnswerCount": "2"}, "12520690": {"Id": "12520690", "PostTypeId": "2", "Body": "<p>The Standard's own definition of ranges (24.2.1p7, emphasis mine):</p>\n<blockquote>\n<p id=\"so_12520471_12520690_0\">Most of the library\u2019s algorithmic templates that operate on data structures have interfaces that use ranges. A <em>range</em> is a pair of iterators that designate the beginning and end of the computation. <strong>A range <code>[i,i)</code> is an empty range</strong>; in general, a range <code>[i,j)</code> refers to the elements in the data structure starting with the element pointed to by <code>i</code> and up to but not including the element pointed to by <code>j</code>.</p>\n</blockquote>\n<p>So assuming <code>it</code> is a valid iterator in or past-the-end of <code>lst</code>, the call <code>lst.erase(it,it)</code> erases an empty set of elements from <code>lst</code>.  That is, it does nothing.</p>\n", "LastActivityDate": "2012-09-20T20:46:53.417", "CommentCount": "2", "CreationDate": "2012-09-20T20:46:53.417", "ParentId": "12520471", "Score": "9", "OwnerUserId": "459640"}});