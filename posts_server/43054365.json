post_cb({"bq_ids": {"n4140": {"so_43054365_43054439_0": {"length": 10, "quality": 1.0, "section_id": 5455}}, "n3337": {"so_43054365_43054439_0": {"length": 6, "quality": 0.6, "section_id": 3191}}, "n4659": {"so_43054365_43054439_0": {"length": 10, "quality": 1.0, "section_id": 6881}}}, "43054439": {"Id": "43054439", "PostTypeId": "2", "Body": "<p>Vexing parses again. If something can be a declaration, it is a declaration.</p>\n<p><code>int(foo);</code> is <code>int (foo);</code> is <code>int foo;</code>. Then the <code>foo</code> in <code>(void)(foo);</code> refers to the <code>int</code>.</p>\n<hr>\n<p>The first snippet runs into <a href=\"https://timsong-cpp.github.io/cppwp/dcl.spec.auto#10\" rel=\"nofollow noreferrer\">[dcl.spec.auto]/10</a>:</p>\n<blockquote>\n<p id=\"so_43054365_43054439_0\">If the type of an entity with an undeduced placeholder type is needed\n  to determine the type of an expression, the program is ill-formed.</p>\n</blockquote>\n<p>The type of <code>foo</code> is needed to determine the type of the expression <code>foo</code> within the lambda body, but at that point you haven't deduced <code>foo</code>'s type yet, so the program is ill-formed.</p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2017-03-27T19:13:48.907", "Score": "5", "CreationDate": "2017-03-27T19:02:13.833", "ParentId": "43054365", "CommentCount": "3", "OwnerUserId": "2756719", "LastEditDate": "2017-03-27T19:13:48.907"}, "43054365": {"ViewCount": "104", "Body": "<p>This question is related to this <a href=\"https://stackoverflow.com/questions/43052499/lambda-capture-during-initialization-should-be-an-error\">one</a>.</p>\n<p>Why doesn't this compile:</p>\n<pre><code>int main() {\n    auto foo = [&amp;]() -&gt; int {foo; return {};}();\n    (void)(foo);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a111f38dd58e6b06\" rel=\"nofollow noreferrer\">LIVE on Coliru</a></p>\n<p>Error:</p>\n<pre><code>main.cpp: In lambda function:\nmain.cpp:3:30: error: use of 'foo' before deduction of 'auto'\n     auto foo = [&amp;]() -&gt; int {foo; return {};}();\n                              ^~~\n</code></pre>\n<p>But casting foo to the resulting type allows compilation:</p>\n<pre><code>int main() {\n    auto foo = [&amp;]() -&gt; int {int(foo); (void)(foo);return {};}();\n    (void)(foo);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/49f0ae597d720930\" rel=\"nofollow noreferrer\">LIVE on Coliru</a></p>\n", "Title": "Can't use captured variable before deduction of auto", "CreationDate": "2017-03-27T18:57:54.753", "LastActivityDate": "2017-03-27T19:13:48.907", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:02:03.757", "LastEditorUserId": "-1", "Id": "43054365", "Score": "1", "OwnerUserId": "5405086", "Tags": "<c++><lambda><c++14>", "AnswerCount": "1"}});