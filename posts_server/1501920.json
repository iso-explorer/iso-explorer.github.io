post_cb({"1501941": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>C++ doesn't do any kind of \"constructor matching\". If you do not explicitly call the base class constructor, the default one is called (well, technically, the base class subobject is \"value initialized\", but for classes with constructors this is the same thing).</p>\n", "OwnerUserId": "111335", "PostTypeId": "2", "Id": "1501941", "Score": "2", "CreationDate": "2009-10-01T04:49:43.970", "LastActivityDate": "2009-10-01T04:49:43.970"}, "1501970": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>If you want to read actual rule you should refer to C++ Standard 12.8/8:</p>\n<blockquote>\n<p id=\"so_1501920_1501970_0\">The implicitly-defined copy constructor for class X performs a memberwise copy of its subobjects.  The\n  order of copying is the same as the order of initialization of bases and members in a user-defined construc-\n  tor (see 12.6.2).  Each subobject is copied in the manner appropriate to its type:</p>\n<ul>\n<li>if the subobject is of class type, the copy constructor for the class is used;</li>\n<li>if the subobject is an array, each element is copied, in the manner appropriate to the element type;</li>\n<li>if the subobject is of scalar type, the built-in assignment operator is used.</li>\n</ul>\n</blockquote>\n<p>When you define copy constructor explicitly you should call copy c-tor of base class explicitly.</p>\n", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "1501970", "Score": "13", "CreationDate": "2009-10-01T05:02:09.593", "LastActivityDate": "2009-10-01T05:02:09.593"}, "1501957": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>you should read <a href=\"http://www.linuxtopia.org/online_books/programming_books/thinking_in_c++/Chapter14_023.html\" rel=\"nofollow noreferrer\">this</a>: it explain how inheritance &amp; special members like constructors are working. </p>\n", "OwnerUserId": "180100", "PostTypeId": "2", "Id": "1501957", "Score": "1", "CreationDate": "2009-10-01T04:55:04.193", "LastActivityDate": "2009-10-01T04:55:04.193"}, "1501920": {"CommentCount": "2", "AcceptedAnswerId": "1501970", "PostTypeId": "1", "LastEditorUserId": "71131", "CreationDate": "2009-10-01T04:44:08.147", "LastActivityDate": "2009-10-01T05:25:48.000", "LastEditDate": "2009-10-01T04:46:13.650", "ViewCount": "5919", "FavoriteCount": "4", "Title": "Base Copy constructor not called", "Id": "1501920", "Score": "5", "Body": "<pre><code>class Base\n{\n      public:\n      int i;\n\n      Base()\n      {\n          cout&lt;&lt;\"Base Constructor\"&lt;&lt;endl;\n      }\n\n      Base (Base&amp; b)\n      {\n          cout&lt;&lt;\"Base Copy Constructor\"&lt;&lt;endl; \n          i = b.i; \n      }\n\n\n      ~Base()\n      {\n          cout&lt;&lt;\"Base Destructor\"&lt;&lt;endl;\n      }\n\n      void val()\n      {\n             cout&lt;&lt;\"i: \"&lt;&lt; i&lt;&lt;endl;\n      }      \n};\n\nclass Derived: public Base\n{\n      public:\n      int i;\n\n      Derived()\n      {\n          Base::i = 5;     \n          cout&lt;&lt;\"Derived Constructor\"&lt;&lt;endl;\n      }\n\n      /*Derived (Derived&amp; d)\n      {\n          cout&lt;&lt;\"Derived copy Constructor\"&lt;&lt;endl;\n          i = d.i; \n      }*/\n\n      ~Derived()\n      {\n          cout&lt;&lt;\"Derived Destructor\"&lt;&lt;endl;\n      }      \n\n      void val()\n      {\n             cout&lt;&lt;\"i: \"&lt;&lt; i&lt;&lt;endl;\n             Base::val();\n      }\n};\n</code></pre>\n<p>If i do \nDerived d1;\nDerived d2 = d1;\nThe copy constructor of base is called and default copy constructor of derived is called.</p>\n<p>But if i remove the comments from derived's copy constructor the base copy constructor is not called. Is there any specific reason for this?\nThanks in advance.</p>\n", "Tags": "<c++><inheritance>", "OwnerUserId": "182257", "AnswerCount": "6"}, "1501933": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>I think you have to explicitly call the base copy constructor:</p>\n<pre><code>  Derived (Derived&amp; d) : Base(d)\n  {\n      cout&lt;&lt;\"Derived copy Constructor\"&lt;&lt;endl;\n      i = d.i; \n  }\n</code></pre>\n", "OwnerUserId": "175308", "PostTypeId": "2", "Id": "1501933", "Score": "16", "CreationDate": "2009-10-01T04:48:07.700", "LastActivityDate": "2009-10-01T04:48:07.700"}, "1502041": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>Thank you very much. I got it. It means that the call to the base class copy constructor is automagivccally done in the derived's default copy constructor. Whereas in the second case since i am writing the derived's copy constructor i must make an explicit call to the base's copy constructor. Thanks again</p>\n", "OwnerUserId": "182257", "PostTypeId": "2", "Id": "1502041", "Score": "0", "CreationDate": "2009-10-01T05:25:48.000", "LastActivityDate": "2009-10-01T05:25:48.000"}, "bq_ids": {"n4140": {"so_1501920_1501970_0": {"section_id": 464, "quality": 0.6333333333333333, "length": 19}}, "n3337": {"so_1501920_1501970_0": {"section_id": 455, "quality": 0.6333333333333333, "length": 19}}, "n4659": {"so_1501920_1501970_0": {"section_id": 487, "quality": 0.6333333333333333, "length": 19}}}, "1501938": {"ParentId": "1501920", "CommentCount": "0", "Body": "<p>In your <code>Derived</code> copy constructor, you need to add the following:</p>\n<pre><code>Derived (const Derived &amp;d) : Base(d) { }\n</code></pre>\n", "OwnerUserId": "151429", "PostTypeId": "2", "Id": "1501938", "Score": "4", "CreationDate": "2009-10-01T04:48:56.000", "LastActivityDate": "2009-10-01T04:48:56.000"}});