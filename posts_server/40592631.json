post_cb({"40593046": {"ParentId": "40592631", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40592631_40593046_0\">How this commitment (to be unchanged) is achieved by means of\n  compiler, operating system (processes, threads), hardware (CPU, RAM)\n  related, etc - i.e. \"how whole system 'marks' this cell(s) to treat in\n  such a special way\".</p>\n</blockquote>\n<p><code>const</code> enforces a read-only contract, and breaching that contract will always be caught at compile-time - for a <strong>correct</strong> (standard conforming code) code; and with the exception of <code>const_cast</code>.</p>\n<p>The compiler typically knows its target architecture very well. And using <code>const</code> correctly may help it structure the code generated in special ways to improve <em>safety</em> and <em>perhaps speed</em>. Note: that <code>const</code> will never degrade speed unless your Compiler is broken.</p>\n<p><code>const</code> objects can be kept in read-only memory, or special memory that can be marked as read-only (which enforces a form of hardware safety, an attempt to write after marking the memory as read-only will trigger an Access Violation Exception.</p>\n<blockquote>\n<p id=\"so_40592631_40593046_1\">Does using \"const\" in a (C/C++) code degrade a performance, for\n  extremely efficient applications, and does it depend on compiler (if\n  yes - please specify on which it does)?</p>\n</blockquote>\n<p>No, it doesn't. If it does, that compiler is buggy.</p>\n", "OwnerUserId": "1621391", "PostTypeId": "2", "Id": "40593046", "Score": "1", "CreationDate": "2016-11-14T16:07:26.450", "LastActivityDate": "2016-11-14T16:07:26.450"}, "40592631": {"CommentCount": "2", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "1870760", "CreationDate": "2016-11-14T15:46:00.513", "LastActivityDate": "2016-11-14T16:07:26.450", "Title": "How const variable and const pointer in C++ are treated by compiler and operating system", "LastEditDate": "2016-11-14T15:53:09.067", "Id": "40592631", "Score": "1", "Body": "<p>I understand the abstract functionality of these tricks with \"const\" are for security issues to not let a programmer unintentionally change things, or to not mess things intentionally, or by accident between different programmers of same project (correct me if I am wrong).</p>\n<p>What unclear is: </p>\n<ol>\n<li>How this commitment (to be unchanged) is achieved by means of compiler, operating system (processes, threads), hardware (CPU, RAM) related, etc - i.e. \"how whole system 'marks' this cell(s) to treat in such a special way\".</li>\n<li>Does using \"const\" in a (C/C++) code degrade a performance, for extremely efficient applications, and does it depend on compiler (if yes - please specify on which it does)?</li>\n</ol>\n", "Tags": "<c++><pointers><const>", "OwnerUserId": "3956711", "AnswerCount": "5"}, "40592672": {"ParentId": "40592631", "CommentCount": "2", "Body": "<p>You are mistaken in thinking this is for security reasons: in fact the <code>const</code> keyword is not enforced by anything except the compiler. Even the compiler though can be ordered to ignore the <code>const</code> keyword by means of a <code>const</code>-cast.</p>\n<p>As such there are no performance considerations associated with <code>const</code> at runtime (there may be at compile time as the compiler may use it to optimize code differently).</p>\n", "OwnerUserId": "6255513", "PostTypeId": "2", "Id": "40592672", "Score": "2", "CreationDate": "2016-11-14T15:47:58.717", "LastActivityDate": "2016-11-14T15:47:58.717"}, "40592715": {"ParentId": "40592631", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>To answer both of your questions at once:\n<code>const</code> will never degrade performance, if anything it will increase performance. This is because the compiler is allowed to make certain assumptions when variables are declared <code>const</code>. They can't be changed, so the compiler can use this to optimize your code by either refactoring parts of the consts or adding the values of these consts to a read-only data segment, allowing faster lookup. </p>\n<p><code>const_cast</code>ing this <code>const</code> away (lying to the compiler) while the data is stored in a read-only segment and trying to overwrite it will result in undefined behaviour which is why the compiler can rely on the programmer not doing this and can therefore increase speed.</p>\n<p>The compiler is the only one responsible for optimizing this part, not any of the \"<em>operating system (processes, threads), hardware (CPU, RAM)</em>\".</p>\n", "OwnerUserId": "1870760", "LastEditorUserId": "1870760", "LastEditDate": "2016-11-14T15:57:13.180", "Id": "40592715", "Score": "7", "CreationDate": "2016-11-14T15:50:14.980", "LastActivityDate": "2016-11-14T15:57:13.180"}, "40592902": {"ParentId": "40592631", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40592631_40592902_0\">I understand the abstract functionality of these tricks with \"const\" are for security issues</p>\n</blockquote>\n<p>Well, <code>const</code>ness isn't a trick, and it's not a security issue in the sense that phrase is normally used</p>\n<blockquote>\n<p id=\"so_40592631_40592902_1\">... not let a programmer unintentionally change things ...</p>\n</blockquote>\n<p>Yes, <code>const</code> tells the compiler - and other developers including your future self - that you don't <em>intend</em> to mutate something</p>\n<blockquote>\n<p id=\"so_40592631_40592902_2\">... or to not mess things intentionally ...</p>\n</blockquote>\n<p>No, because you can simply use <code>const_cast</code> to get around it (where the underlying object is genuinely mutable). You just can't do it <em>accidentally</em>.</p>\n<blockquote>\n<p id=\"so_40592631_40592902_3\">... How this commitment (to be unchanged) is achieved by means of compiler ...</p>\n</blockquote>\n<p>That's it. That's everything. The compiler refuses to compile code which mutates <code>const</code> objects. If code that mutates <code>const</code> objects doesn't compile, nothing needs to be done at runtime, and nothing is.</p>\n<p>There are <em>other</em> protections, depending on your OS and hardware platform, against writing to regions of memory your process shouldn't be able to change: see for example the UNIX world's SEGV, which is typically enforced by your memory address-mapping hardware and OS working together.</p>\n<p>These runtime concepts aren't directly expressed in the language, although they do affect how the language can be implemented on a given platform.</p>\n<blockquote>\n<p id=\"so_40592631_40592902_4\">... Does using \"const\" in a (C/C++) code degrade a performance ...</p>\n</blockquote>\n<p>No, <code>const</code> is normally used to express more clearly how your code is intended to behave, and this extra information sometimes allows the compiler to make <em>more</em> optimizations. I can't think of an obvious reason why it would make anything slower, unless it forces otherwise-avoidable copies.</p>\n", "OwnerUserId": "212858", "PostTypeId": "2", "Id": "40592902", "Score": "4", "CreationDate": "2016-11-14T16:00:13.730", "LastActivityDate": "2016-11-14T16:00:13.730"}, "bq_ids": {"n4140": {"so_40592631_40592751_0": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_40592631_40592751_0": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_40592631_40592751_0": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}}}, "40592751": {"ParentId": "40592631", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This <a href=\"http://www.gotw.ca/gotw/081.htm\" rel=\"nofollow noreferrer\">article</a> by Herb Sutter answers most of your questions.</p>\n<p>When a variable is <code>const</code>, the compiler assumes that the variable has not been changed in this scope, and uses that information to optimize the code.</p>\n<p>Any attempt to modify it will result in undefined behavior:</p>\n<blockquote>\n<p id=\"so_40592631_40592751_0\">Except that any class member declared mutable (7.1.1) can be modified,\n  any attempt to modify a const object during its lifetime (3.8) results\n  in undefined behavior.</p>\n</blockquote>\n", "OwnerUserId": "7065028", "LastEditorUserId": "7065028", "LastEditDate": "2016-11-14T16:02:04.333", "Id": "40592751", "Score": "2", "CreationDate": "2016-11-14T15:52:36.260", "LastActivityDate": "2016-11-14T16:02:04.333"}});