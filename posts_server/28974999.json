post_cb({"28975292": {"Id": "28975292", "PostTypeId": "2", "Body": "<p>Searching for an exception handler is done from the inside out, searching one level less deep whenever nothing is found to handle the exception.</p>\n<blockquote>\n<p id=\"so_28974999_28975292_0\"><strong>15.3 Handling an exception [except.handle]</strong></p>\n<p id=\"so_28974999_28975292_1\">4 The handlers for a try block are tried in order of appearance. [...]</p>\n<p id=\"so_28974999_28975292_2\">[...]</p>\n<p id=\"so_28974999_28975292_3\">6 If no match is found among the handlers for a try block, the search for a matching handler continues in a dynamically surrounding try block of the same thread.</p>\n<p id=\"so_28974999_28975292_4\"><strong>15.4 Exception specifications [except.spec]</strong></p>\n<p id=\"so_28974999_28975292_5\">9 Whenever an exception is thrown and the search for a handler (15.3) encounters the outermost block of a function with an <em>exception-specification</em> that does not allow the exception, then,</p>\n<p id=\"so_28974999_28975292_6\">[... <code>std::unexpected()</code> or <code>std::terminate()</code> is called. ]</p>\n</blockquote>\n<p>The only time <code>noexcept(true)</code> has a visible effect is if an exception is thrown from inside the function, and no matching handler is present. No special effect is specified for an an exception with a matching handler, so that must run the same as in a <code>noexcept(false)</code> function.</p>\n", "LastActivityDate": "2015-03-10T22:28:26.497", "Score": "6", "CreationDate": "2015-03-10T22:28:26.497", "ParentId": "28974999", "CommentCount": "0", "OwnerUserId": "743382"}, "28974999": {"ViewCount": "531", "Body": "<p>Let's say that I have a function marked as <code>noexcept</code> but there's a line of code inside that can throw. That line of code will be in a try block and the exception will be caught. Does that cause anything?</p>\n<pre><code>void MyFunc() noexcept\n{\n    try {\n        throw std::exception(\"...\");\n    } catch (const std::exception &amp; e) {\n        // I'll deal with it here...\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "28975065", "Title": "Can a function marked as noexcept have exceptions inside?", "CreationDate": "2015-03-10T22:07:20.483", "Id": "28974999", "CommentCount": "0", "LastEditDate": "2015-03-10T22:09:42.303", "PostTypeId": "1", "LastEditorUserId": "2642204", "LastActivityDate": "2015-03-10T22:28:26.497", "Score": "2", "OwnerUserId": "1695767", "Tags": "<c++><exception><c++11><noexcept>", "AnswerCount": "2"}, "28975065": {"Id": "28975065", "PostTypeId": "2", "Body": "<p>Yes, this is perfectly legal, as long as the exception doesn't leak out of the function.</p>\n<blockquote>\n<p id=\"so_28974999_28975065_0\">An implementation shall not reject an expression merely because when executed it throws or might throw\n  an exception that the containing function does not allow.</p>\n</blockquote>\n<p>[except.spec/11 in C++11]</p>\n", "LastActivityDate": "2015-03-10T22:11:43.077", "Score": "3", "CreationDate": "2015-03-10T22:11:43.077", "ParentId": "28974999", "CommentCount": "1", "OwnerUserId": "481267"}, "bq_ids": {"n4140": {"so_28974999_28975292_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3349}, "so_28974999_28975292_5": {"length": 14, "quality": 0.9333333333333333, "section_id": 3371}, "so_28974999_28975292_3": {"length": 16, "quality": 1.0, "section_id": 3351}, "so_28974999_28975065_0": {"length": 15, "quality": 1.0, "section_id": 3373}}, "n3337": {"so_28974999_28975292_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3219}, "so_28974999_28975292_5": {"length": 14, "quality": 0.9333333333333333, "section_id": 3241}, "so_28974999_28975292_3": {"length": 16, "quality": 1.0, "section_id": 3221}, "so_28974999_28975065_0": {"length": 15, "quality": 1.0, "section_id": 3243}}, "n4659": {"so_28974999_28975292_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 4116}, "so_28974999_28975292_5": {"length": 10, "quality": 0.6666666666666666, "section_id": 4133}, "so_28974999_28975292_3": {"length": 16, "quality": 1.0, "section_id": 4118}, "so_28974999_28975065_0": {"length": 12, "quality": 0.8, "section_id": 4133}}}});