post_cb({"33626088": {"CommentCount": "4", "ViewCount": "756", "PostTypeId": "1", "LastEditorUserId": "5397699", "CreationDate": "2015-11-10T08:54:31.380", "LastActivityDate": "2015-11-10T10:34:56.583", "Title": "Clang complains \"cannot override a deleted function\" while no function is deleted", "LastEditDate": "2015-11-10T10:34:56.583", "Id": "33626088", "Score": "6", "Body": "<p>In the following simple code fragment:</p>\n<pre><code>#include &lt;cstddef&gt;\n\nstruct B\n{\n  virtual ~B() = default;\n  static void operator delete(void *, int);\n  static void * operator new(size_t, int);\n};\n\nstruct C : B\n{\n  virtual ~C() = default;\n};\n</code></pre>\n<p>clang 3.7 complains that \"non-deleted function '~C' cannot override a deleted function\":\n<a href=\"http://goo.gl/Ax6oth\">http://goo.gl/Ax6oth</a></p>\n<p>Neither Visual Studio nor GCC report an error in this code. Is it a clang defect or what?</p>\n", "Tags": "<c++11><language-lawyer><clang++><method-overriding><virtual-destructor>", "OwnerUserId": "5545734", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33626088_33627157_4": {"section_id": 401, "quality": 1.0, "length": 5}, "so_33626088_33627157_6": {"section_id": 401, "quality": 1.0, "length": 13}}, "n3337": {"so_33626088_33627157_4": {"section_id": 392, "quality": 1.0, "length": 5}, "so_33626088_33627157_6": {"section_id": 392, "quality": 1.0, "length": 13}}, "n4659": {"so_33626088_33627157_4": {"section_id": 418, "quality": 1.0, "length": 5}, "so_33626088_33627157_6": {"section_id": 418, "quality": 1.0, "length": 13}}}, "33627157": {"ParentId": "33626088", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-11-10T09:52:12.057", "Score": "8", "LastEditorUserId": "5397699", "LastEditDate": "2015-11-10T10:00:41.037", "Id": "33627157", "OwnerUserId": "5397699", "Body": "<blockquote id=\"so_33626088_33627157_0\">\n<pre><code>static void operator delete(void *, int);\n</code></pre>\n</blockquote>\n<p>No, it's</p>\n<pre><code> static void operator delete(void *, std::size_t);\n</code></pre>\n<p>and that type difference causes an ambiguity that gets relevant: </p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/destructor\">cppreference.com has</a></p>\n<blockquote>\n<p id=\"so_33626088_33627157_1\">The implicitly-declared or defaulted destructor for class T is\n  undefined (until C++11)defined as deleted (since C++11) if any of the\n  following is true: </p>\n<p id=\"so_33626088_33627157_2\">[...]</p>\n<p id=\"so_33626088_33627157_3\">The implicitly-declared destructor is virtual (because the base class\n  has a virtual destructor) and the lookup for the deallocation\n  function (operator delete() results in a call to ambiguous, deleted,\n  or inaccessible function.</p>\n</blockquote>\n<p>And in the standard (draft n4140) \u00a712.4 that is</p>\n<blockquote>\n<p id=\"so_33626088_33627157_4\">5 A defaulted destructor for a class X is defined as deleted if: </p>\n<p id=\"so_33626088_33627157_5\">[...]</p>\n<p id=\"so_33626088_33627157_6\">(5.3) or, for a virtual destructor, lookup of the non-array\n  deallocation function results in an ambiguity or in a function that is\n  deleted or inaccessible from the defaulted destructor.</p>\n</blockquote>\n", "LastActivityDate": "2015-11-10T10:00:41.037"}});