post_cb({"9651803": {"Id": "9651803", "PostTypeId": "2", "Body": "<p><strong>No, the trigraph is not reverted in your example.</strong></p>\n<p><code>[lex.phases]p1</code> identifies three phases of translation relevant to your question:</p>\n<blockquote>\n<p id=\"so_6855149_9651803_0\">1. Trigraph sequences are replaced by corresponding single-character internal representations.<br>\n  3. The source file is decomposed into preprocessing tokens.<br>\n  4. Macro invocations are expanded.</br></br></p>\n</blockquote>\n<p>Phase 1 is defined by <code>[lex.trigraph]p1</code>. At this stage, your code is translated to <code>const char *trigraph = RAW(\"(#)\")</code>.</p>\n<p>Phase 3 is defined by <code>[lex.pptoken]</code>. This is the stage where trigraphs are reverted in raw string literals. Paragraph 3 says:</p>\n<blockquote>\n<p id=\"so_6855149_9651803_1\">If the next character begins a sequence of characters that could be the pre\ufb01x and initial double quote of a raw string literal, such as R\", the next preprocessing token shall be a raw string literal. Between the initial and \ufb01nal double quote characters of the raw string, any transformations performed in phases 1 and 2 (trigraphs, universal-character-names, and line splicing) are reverted.</p>\n</blockquote>\n<p>That is not the case in your example, therefore the trigraph is not reverted. Your code is transformed into the <em>preprocessing-token</em> sequence <code>const</code> <code>char</code> <code>*</code> <code>trigraph</code> <code>=</code> <code>RAW</code> <code>(</code> <code>\"(#)\"</code> <code>)</code></p>\n<p>Finally, in phase 4, the <code>RAW</code> macro is expanded and the token-paste occurs, resulting in the following sequence of <em>preprocessing-tokens</em>: <code>const</code> <code>char</code> <code>*</code> <code>trigraph</code> <code>=</code> <code>R\"(#)\"</code>. The <em>r-char-sequence</em> of the string literal comprises a <code>#</code>. Phase 3 has already occurred, and there is no other point at which reversion of trigraphs occurs.</p>\n", "LastActivityDate": "2012-03-11T02:03:18.397", "CommentCount": "0", "CreationDate": "2012-03-11T02:03:18.397", "ParentId": "6855149", "Score": "6", "OwnerUserId": "1041090"}, "6855149": {"ViewCount": "498", "Body": "<p>It's pretty common to use macros and token concatenation to switch between wide and narrow strings at compile time.</p>\n<pre><code>#define _T(x) L##x\nconst wchar_t *wide1 = _T(\"hello\");\nconst wchar_t *wide2 = L\"hello\";\n</code></pre>\n<p>And in C++11 it should be valid to concoct a similar thing with raw strings:</p>\n<pre><code>#define RAW(x) R##x\nconst char *raw1 = RAW(\"(Hello)\");\nconst char *raw2 = R\"(Hello)\";\n</code></pre>\n<p>Since macro expansion and token concatenation happens before escape sequence substitution, this should prevent escape sequences being replaced in the quoted string.</p>\n<p>But how does this apply to trigraphs? Are raw strings formed through concatenation with normal strings still subject to having their trigraph substitutions reverted?</p>\n<pre><code>const char *trigraph = RAW(\"(??=)\");      // Is this \"#\" or \"??=\"?\n</code></pre>\n", "AcceptedAnswerId": "9651803", "Title": "Are trigraph substitutions reverted when a raw string is created through concatenation?", "CreationDate": "2011-07-28T06:59:09.683", "Id": "6855149", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-03-11T02:07:32.783", "LastEditorUserId": "500104", "LastActivityDate": "2012-03-11T02:07:32.783", "Score": "9", "OwnerUserId": "866883", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_6855149_9651803_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 5322}, "so_6855149_9651803_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5313}}, "n3337": {"so_6855149_9651803_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5110}, "so_6855149_9651803_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 5119}}, "n4659": {"so_6855149_9651803_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 6737}, "so_6855149_9651803_1": {"length": 33, "quality": 0.9166666666666666, "section_id": 6743}}}, "6855602": {"Id": "6855602", "PostTypeId": "2", "Body": "<p>Trigraph substitution happens before macro processing.</p>\n<p>UPD Please disregard this. I haven't realized that c++0x reverts trigraphs in raw string literals.</p>\n<p>UPD2 2.5.3 describes the process of forming raw-string-literal preprocessing tokens. Trigraph reversal is a part of this process. There are no raw-string-literals which are not preprocessing tokens. So the answer to your question seems to be yes.</p>\n", "LastEditorUserId": "775806", "LastActivityDate": "2011-07-28T09:08:56.900", "Score": "0", "CreationDate": "2011-07-28T07:46:29.997", "ParentId": "6855149", "CommentCount": "1", "OwnerUserId": "775806", "LastEditDate": "2011-07-28T09:08:56.900"}});