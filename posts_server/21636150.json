post_cb({"bq_ids": {"n4140": {"so_21636150_21637519_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6996}, "so_21636150_21637519_0": {"length": 35, "quality": 0.8974358974358975, "section_id": 6989}}, "n3337": {"so_21636150_21637519_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6742}, "so_21636150_21637519_0": {"length": 35, "quality": 0.8974358974358975, "section_id": 6735}}, "n4659": {"so_21636150_21637519_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 8494}, "so_21636150_21637519_0": {"length": 35, "quality": 0.8974358974358975, "section_id": 8487}}}, "21636150": {"ViewCount": "77", "Body": "<p>I found something I consider strange behaviour in C++: a typecast operator in a private base class is confusing the compiler when trying to resolve an implicit cast:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Base\n{\n#ifdef ENABLE\n    operator bool () const { return true; }\n#endif\n};\nstruct Derived : private Base\n{\n    operator int () const { return 7; }\n};\nint main()\n{\n    Derived o;\n    std::cout &lt;&lt; o &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n<p>Without <code>-DENABLE</code>, the code compiles just fine, and outputs <code>7</code>. With <code>-DENABLE</code>, the code no longer compiles, complaining about an ambiguous overload. I tried <code>gcc-4.6.5</code>, <code>gcc-4.8.1</code>, and <code>clang-3.3</code>. What's confusing is that I clearly cannot ask for <code>(bool)o</code>, because <code>Base</code> is a <em>private</em> base.</p>\n<p>Is this expected behaviour?</p>\n", "AcceptedAnswerId": "21637519", "Title": "typecast operator in private base", "CreationDate": "2014-02-07T19:26:19.153", "Id": "21636150", "CommentCount": "3", "LastEditDate": "2014-02-07T21:03:25.543", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2014-02-07T21:03:25.543", "Score": "1", "OwnerUserId": "717706", "Tags": "<c++><implicit-conversion><overload-resolution><private-inheritance><member-access>", "AnswerCount": "1"}, "21637519": {"Id": "21637519", "PostTypeId": "2", "Body": "<p>Access control always comes last. Quote from the Standard:</p>\n<p><strong>10.2 Member name lookup [class.member.lookup]</strong></p>\n<blockquote>\n<p id=\"so_21636150_21637519_0\">1 Member name lookup determines the meaning of a name (id-expression)\n  in a class scope (3.3.7). Name lookup can result in an ambiguity, in\n  which case the program is ill-formed. For an id-expression, name\n  lookup begins in the class scope of this; for a qualified-id, name\n  lookup begins in the scope of the nestedname- specifier. <strong>Name lookup\n  takes place before access control</strong> (3.4, Clause 11).</p>\n<p id=\"so_21636150_21637519_1\">8 If the name of an overloaded function is unambiguously found,\n  <strong>overloading resolution (13.3) also takes place before access control.</strong>\n  Ambiguities can often be resolved by qualifying a name with its class\n  name.</p>\n</blockquote>\n<p>The reason both operators are considered is that a) the base clas conversion is not hidden by the derived one (which it would if both had been converting to the same type), b) both <code>bool</code> and <code>int</code> can be written to stdout, c) neither is a better match than the other so overload resolution yields an ambiguity. This yields a hard error even before access control comes into play.</p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-02-07T21:02:03.927", "Score": "2", "CreationDate": "2014-02-07T20:51:29.240", "ParentId": "21636150", "CommentCount": "0", "OwnerUserId": "819272", "LastEditDate": "2014-02-07T21:02:03.927"}});