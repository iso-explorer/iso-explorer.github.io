post_cb({"bq_ids": {"n4140": {"so_44907098_44911395_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 6839}}, "n3337": {"so_44907098_44911395_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 6589}}, "n4659": {"so_44907098_44911395_0": {"length": 7, "quality": 1.0, "section_id": 8331}, "so_44907098_44911395_1": {"length": 24, "quality": 0.9230769230769231, "section_id": 8342}}}, "44911395": {"Id": "44911395", "PostTypeId": "2", "Body": "<p>By the standard, the default behavior of both <code>operator new[]</code> is ([new.delete.array]/4):</p>\n<blockquote>\n<p id=\"so_44907098_44911395_0\">Returns <code>operator new(size)</code>, or <code>operator new(size, alignment)</code>, respectively.</p>\n</blockquote>\n<p>Something similar goes for <code>operator delete[]</code> ([new.delete.array]/15):</p>\n<blockquote>\n<p id=\"so_44907098_44911395_1\">The functions that have a <code>size</code> parameter forward their other parameters to the corresponding function without a <code>size</code> parameter. The functions that do not have a <code>size</code> parameter forward their parameters to the corresponding <code>operator delete</code> (single-object) function.</p>\n</blockquote>\n<p>The default versions of these functions simply call the non-array forms. Therefore, Visual Studio and GCC 6.3 are correct: overloading just the non-array versions should be enough to overload the allocators.</p>\n", "LastActivityDate": "2017-07-04T17:22:48.537", "Score": "2", "CreationDate": "2017-07-04T17:22:48.537", "ParentId": "44907098", "CommentCount": "0", "OwnerUserId": "734069"}, "44907098": {"ViewCount": "416", "Body": "<p><code>new</code> and <code>delete</code> operator overloading might or might not work when compiled using different compilers and different c++ standards. Is that the normal behavior?</p>\n<p>I used the following code to test the compilers.\n</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid * operator new(size_t size)\n{\n    std::cout &lt;&lt; \"1\\n\";\n    return malloc(size);\n}\n\nvoid operator delete(void *ptr) noexcept\n{\n    std::cout &lt;&lt; \"2\\n\";\n    free(ptr);\n}\n\nint main(void)\n{\n    int *n1 = new int;\n    delete n1;\n\n    int *n2 = new int[10];\n    delete[] n2;\n\n    return 0;\n}\n</code></pre>\n<p>Here are the results I got from several compilers I have tested the code on.</p>\n<p>mingw-w64 official build - x86_64-7.1.0-release-posix-seh-rt_v5-rev0.7z</p>\n<pre><code>c++11\n1\n2\n\nc++14\n1\n</code></pre>\n<p>clang x86_64 - v4.0.0 manually built without patches using the compiler above</p>\n<pre><code>c++11 and c++14\n1\n2\n</code></pre>\n<p>msvc - platform toolset v141 &amp; sdk v10.0.15063.0</p>\n<pre><code>/std:c++14 and /std:c++latest\n1\n2\n1\n2\n</code></pre>\n<p>All tests are performed on Windows 7. I can't test compilers on GNU/Linux OS because I don't have any VMs set up.</p>\n", "Title": "c++ new and delete overloading", "CreationDate": "2017-07-04T13:15:58.937", "LastActivityDate": "2017-08-17T12:33:26.207", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-08-17T12:33:26.207", "LastEditorUserId": "225647", "Id": "44907098", "Score": "10", "OwnerUserId": "8253852", "Tags": "<c++><visual-c++><c++14>", "AnswerCount": "1"}});