post_cb({"10373912": {"Id": "10373912", "PostTypeId": "2", "Body": "<p>Reverse iterators 'correspond' to a <code>base</code> iterator with an offset of one element because  of how <code>rbegin()</code> and <code>rend()</code> have to be represented using base iterators that are valid (<code>end()</code> and <code>begin()</code> respectively).  For example, <code>rend()</code> cannot be represented by an interator that 'points' before the container's <code>begin()</code> iterator, although that's what it logically represents.  So <code>rend()</code>'s 'base iterator' is <code>begin()</code>. Therefore, <code>rbegin()</code>'s base iterator becomes <code>end()</code>.\nA reverse iterator automatically adjusts for that offset when it is dereferenced (using the <code>*</code> or <code>-&gt;</code> operators).</p>\n<p>An old <a href=\"http://www.drdobbs.com/cpp/184401406\" rel=\"nofollow noreferrer\">article by Scott Meyers</a> explains the relationship in detail along with a nice picture:</p>\n<blockquote>\n<p id=\"so_10373764_10373912_0\"><strong>Guideline 3: Understand How to Use a reverse_iterator\u2019s Base iterator</strong></p>\n<p id=\"so_10373764_10373912_1\">Invoking the base member function on a reverse_iterator yields the\n  \u201ccorresponding\u201d iterator, but it\u2019s not really clear what that means.\n  As an example, take a look at this code, which puts the numbers 1-5 in\n  a vector, sets a reverse_iterator to point to the 3, and sets an\n  iterator to the reverse_iterator\u2019s base:</p>\n<pre><code>vector&lt;int&gt; v;\n\n// put 1-5 in the vector\nfor (int i = 1; i &lt;= 5; ++i) {\n  v.push_back(i);\n}\n\n// make ri point to the 3\nvector&lt;int&gt;::reverse_iterator ri =\n  find(v.rbegin(), v.rend(), 3);\n\n// make i the same as ri's base\nvector&lt;int&gt;::iterator i(ri.base());\n</code></pre>\n<p id=\"so_10373764_10373912_2\">After executing this code, things can be thought of as looking like\n  this:</p>\n<p id=\"so_10373764_10373912_3\"><img alt=\"alt text\" src=\"https://twimgs.com/ddj/cuj/images/cuj0106smeyers/diagram2.gif\"/></p>\n<p id=\"so_10373764_10373912_4\">This picture is nice, displaying the characteristic offset of a\n  reverse_iterator and its corresponding base iterator that mimics the\n  offset of rbegin() and rend() with respect to begin() and end(), but\n  it doesn\u2019t tell you everything you need to know. In particular, it\n  doesn\u2019t explain how to use i to perform operations you\u2019d like to\n  perform on ri.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-29T16:51:22.940", "Score": "5", "CreationDate": "2012-04-29T16:44:31.743", "ParentId": "10373764", "CommentCount": "0", "OwnerUserId": "12711", "LastEditDate": "2017-02-08T14:35:31.183"}, "10373903": {"Id": "10373903", "PostTypeId": "2", "Body": "<p>The first paragraph of 24.5.1 Reverse iterators says:</p>\n<blockquote>\n<p id=\"so_10373764_10373903_0\">Class template reverse_iterator is an iterator adaptor that iterates from the end of the sequence defined by its underlying iterator to the beginning of that sequence. The fundamental relation between a reverse iterator and its corresponding iterator i is established by the identity:<br>\n<code>&amp;*(reverse_iterator(i)) == &amp;*(i - 1)</code>.</br></p>\n</blockquote>\n<p>The value returned by <code>rend()</code> cannot point before <code>begin()</code>, because that is not valid. So it was decided that <code>rend()</code> should contain the value of <code>begin()</code> and all other reverse iterators be shifted one position further. The <code>operator*</code> compensates for this and accesses the correct element anyway.</p>\n", "LastActivityDate": "2012-04-29T16:43:45.317", "CommentCount": "0", "CreationDate": "2012-04-29T16:43:45.317", "ParentId": "10373764", "Score": "2", "OwnerUserId": "597607"}, "bq_ids": {"n4140": {"so_10373764_10373903_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5600}}, "n3337": {"so_10373764_10373903_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5383}}, "n4659": {"so_10373764_10373903_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 7044}}}, "10373972": {"Id": "10373972", "PostTypeId": "2", "Body": "<p>Reverse iterator looks always \"one before\" then the forward, since its range is shifted by one:</p>\n<p>Forward iterator goes from begin() (the first element) to end() (past the last: [begin-end) is opened at the end side)</p>\n<p>Reverse iterator goes from <code>rbegin() { return reverse_iterator(end()); }</code> to <code>rend() { return reverse_iterator(begin()); }</code> by definition, but also has to walk the open range [rbegin-rend) having rbegin to be the last (not \"past the last\") and rend to be \"before the first\" (not \"the first\") hence a 1 difference to be accommodated.</p>\n", "LastActivityDate": "2012-04-29T16:52:07.000", "CommentCount": "0", "CreationDate": "2012-04-29T16:52:07.000", "ParentId": "10373764", "Score": "1", "OwnerUserId": "924727"}, "10373764": {"ViewCount": "486", "Body": "<p>I have the following code:</p>\n<pre><code>int main()\n{\n    vector&lt;int&gt; v;\n\n    for(int i = 0; i &lt; 10; ++i)\n        v.push_back(i);\n\n    auto it = v.begin() + 3;\n\n    cout &lt;&lt; \"Iterator: \" &lt;&lt; *it &lt;&lt; endl;\n\n    vector&lt;int&gt;::reverse_iterator revIt(it);\n\n    cout &lt;&lt; \"Reverse iterator: \" &lt;&lt; *revIt &lt;&lt; endl;\n\n}\n</code></pre>\n<p>After running this code I get the following output:</p>\n<pre><code>Iterator: 3\nReverse iterator: 2\n</code></pre>\n<p>Could someone explain why the 2 values differ ?</p>\n", "AcceptedAnswerId": "10373912", "Title": "Iterator value differs from reverse iterator value after conversion", "CreationDate": "2012-04-29T16:24:45.420", "Id": "10373764", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2012-04-29T16:52:07.000", "Score": "1", "OwnerUserId": "340554", "Tags": "<c++><stl><iterator>", "AnswerCount": "4"}, "10373791": {"Id": "10373791", "PostTypeId": "2", "Body": "<p>Looks like the <a href=\"http://www.cplusplus.com/reference/std/iterator/reverse_iterator/\">documentation</a> says they do that to handle past-the-end elements, i.e. if you reverse an iterator that is past the end, the new reverse iterator points to the last element.</p>\n", "LastActivityDate": "2012-04-29T16:28:17.350", "CommentCount": "0", "CreationDate": "2012-04-29T16:28:17.350", "ParentId": "10373764", "Score": "4", "OwnerUserId": "203982"}});