post_cb({"24635016": {"ParentId": "24631444", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In quoted draft in 18.10/9:</p>\n<blockquote>\n<p id=\"so_24631444_24635016_0\">The common subset of the C and C++ languages consists of all declarations, definitions, and expressions that may appear in a well formed C++ program and also in a conforming C program. A POF (\u201cplain old function\u201d) is a function that uses only features from this common\n  subset, and that does not directly or indirectly use any function that\n  is not a POF, except that it may use functions defined in Clause 29\n  that are not member functions. All signal handlers shall have C\n  linkage. A POF that could be used as a signal handler in a conforming\n  C program does not produce undefined behavior when used as a signal\n  handler in a C++ program. The behavior of any other function used as a signal handler in a C++ program is implementation-defined.<sup>228</sup></p>\n</blockquote>\n<p>Permitted in signal handlers are functions that are both valid in C++ and C. Additionally you can use atomic non-member functions (Clause 29). Implementations may allow other functions to work, but note that:</p>\n<blockquote>\n<p id=\"so_24631444_24635016_1\">228) In particular, a signal handler using exception handling is very\n  likely to have problems. Also, invoking std::exit may cause\n  destruction of objects, including those of the standard library\n  implementation, which, in general, yields undefined behavior in a\n  signal handler (see 1.9).</p>\n</blockquote>\n<p>According to rule quoted by you, in most cases, leaving some thread running after <code>main</code> is finished and all static variables are destroyed will cause UB. It is only allowed if the function is signal-safe and doesn't use standard library.</p>\n", "OwnerUserId": "1126943", "LastEditorUserId": "1126943", "LastEditDate": "2014-07-08T15:19:59.267", "Id": "24635016", "Score": "0", "CreationDate": "2014-07-08T14:52:06.467", "LastActivityDate": "2014-07-08T15:19:59.267"}, "24631444": {"CommentCount": "4", "ViewCount": "87", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2014-07-08T12:05:58.747", "LastActivityDate": "2014-07-08T15:43:47.703", "LastEditDate": "2014-07-08T15:43:47.703", "AcceptedAnswerId": "24635016", "OwnerDisplayName": "user2953119", "Title": "Object or function not permitted within signal handlers", "Id": "24631444", "Score": "1", "Body": "<p>I'm looking for a definition of <em>\"object or function not permitted within signal handler\"</em>. It's used in sec. 3.6.3/4 of N3797:</p>\n<blockquote>\n<p id=\"so_24631444_24631444_0\">If there is a use of a standard library <strong>object or function not</strong>\n<strong>permitted within signal handlers</strong> (18.10) that does not happen before\n  (1.10) completion of destruction of objects with static storage\n  duration and execution of std::atexit registered functions (18.5), the\n  program has undefined behavior.</p>\n</blockquote>\n<p>In general I would like to find an example for this UB rule.</p>\n", "Tags": "<c++><signals><std>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24631444_24635016_1": {"section_id": 6973, "quality": 0.9655172413793104, "length": 28}, "so_24631444_24631444_0": {"section_id": 7159, "quality": 0.8888888888888888, "length": 24}, "so_24631444_24635016_0": {"section_id": 6973, "quality": 0.7580645161290323, "length": 47}}, "n3337": {"so_24631444_24635016_1": {"section_id": 6719, "quality": 0.9655172413793104, "length": 28}, "so_24631444_24631444_0": {"section_id": 6903, "quality": 0.8888888888888888, "length": 24}, "so_24631444_24635016_0": {"section_id": 6719, "quality": 0.9516129032258065, "length": 59}}, "n4659": {"so_24631444_24631444_0": {"section_id": 8666, "quality": 0.8888888888888888, "length": 24}}}});