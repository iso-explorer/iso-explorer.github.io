post_cb({"5151926": {"Id": "5151926", "PostTypeId": "2", "Body": "<p>Your first mistake is expecting anything useful from <code>std::type_info::name()</code>. From the standard:</p>\n<ul>\n<li>\u00a718.5.1/1: \"<em>The names, encoding rule, and collating sequence for types are all <strong>unspecified</strong> and may differ between programs.</em>\"</li>\n<li>\u00a718.5.1/7: \"<em><code>const char* name() const;</code> Returns: an <strong>implementation-defined</strong> NTBS.</em>\"</li>\n</ul>\n<p>If you want a portable solution for meaningful (through not necessarily consistent) type names, I recommend using <a href=\"http://www.boost.org/libs/type_index/\" rel=\"nofollow\">Boost.TypeIndex</a>'s <a href=\"http://www.boost.org/doc/libs/release/doc/html/boost_typeindex/examples.html#boost_typeindex.examples.exact_type_matching_storing_type\" rel=\"nofollow\"><code>boost::typeindex::type_id_with_cvr&lt;&gt;().pretty_name()</code></a> (<a href=\"http://www.boost.org/doc/libs/release/doc/html/boost/typeindex/type_id_with_cvr.html\" rel=\"nofollow\">reference</a>).</p>\n", "LastEditorUserId": "636019", "LastActivityDate": "2015-01-14T20:36:18.583", "Score": "6", "CreationDate": "2011-03-01T08:15:52.607", "ParentId": "5151875", "CommentCount": "0", "OwnerUserId": "636019", "LastEditDate": "2015-01-14T20:36:18.583"}, "5151914": {"Id": "5151914", "PostTypeId": "2", "Body": "<p>The C++ spec does not guarantee that <code>type_info::name</code> actually hands back the name of the type as it appears in the C++ source code; in fact, the spec, \u00a718.5.1/7, only guarantees that the function hand back \"an implementation-defined NTBS.\"</p>\n<p>Consequently, there's no reason to assume that using <code>typeid</code> to get the name of a type will actually hand back the name of the type as you'd expect it to.</p>\n<p>The reason you're seeing the type of <code>int</code> and not <code>int&amp;</code> is that the definition of <code>typeid</code> says that it ignores references.  To quote the spec, \u00a75.2.8/4:</p>\n<blockquote>\n<p id=\"so_5151875_5151914_0\">When typeid is applied to a type-id, the result refers to a type_info object representing the type of the type-id. <strong>If the type of the type-id is a reference type, the result of the typeid expression refers to a type_info object representing the referenced type.</strong></p>\n</blockquote>\n<p>(My emphasis)</p>\n<p>This means that <code>typeid(int&amp;)</code> and <code>typeid(int)</code> are completely identical to one another, hence the output being <code>int</code> and not <code>int&amp;</code> or something related to it.</p>\n", "LastEditorUserId": "501557", "LastActivityDate": "2011-03-01T08:26:52.253", "Score": "4", "CreationDate": "2011-03-01T08:14:27.420", "ParentId": "5151875", "CommentCount": "0", "OwnerUserId": "501557", "LastEditDate": "2011-03-01T08:26:52.253"}, "bq_ids": {"n4140": {"so_5151875_5151971_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 6023}, "so_5151875_5151914_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6023}}, "n3337": {"so_5151875_5151971_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 5791}, "so_5151875_5151914_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5791}}, "n4659": {"so_5151875_5151971_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 7522}, "so_5151875_5151914_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 7522}}}, "5151971": {"Id": "5151971", "PostTypeId": "2", "Body": "<p>This is how typeid is supposed to work. When you apply <code>typeid</code> to a <em>type-id</em> of a reference type, the <code>type_info</code> object refers to the referenced type.</p>\n<p>ISO/IEC 14882:2003, 5.2.8 / 4 [expr.typeid]:</p>\n<blockquote>\n<p id=\"so_5151875_5151971_0\">When <code>typeid</code> is applied to a <em>type-id</em>, the result refers to a <code>type_info</code> object representing the type of the <em>type-id</em>. If the type of the <em>type-id</em> is a reference type, the result of the <code>typeid</code> expression refers to a <code>type_info</code> object representing the referenced type. If the type of the <em>type-id</em> is a class type or a reference to a class type, the class shall be completely-defined. Types shall not be defined in the <em>type-id</em>.</p>\n</blockquote>\n", "LastActivityDate": "2011-03-01T08:23:05.250", "CommentCount": "0", "CreationDate": "2011-03-01T08:23:05.250", "ParentId": "5151875", "Score": "8", "OwnerUserId": "19563"}, "5151875": {"ViewCount": "1551", "Body": "<pre><code>cout &lt;&lt; typeid(int&amp;).name();  \n</code></pre>\n<p>This, in my opinion, should return <code>int&amp;</code> as a type, not an <code>int</code>, but on GCC 4.5.1 and on VS2010 SP1 beta it returns <code>int</code>. Why is this?</p>\n", "AcceptedAnswerId": "5151971", "Title": "typeid doesn't return correct type", "CreationDate": "2011-03-01T08:09:04.163", "Id": "5151875", "CommentCount": "1", "LastEditDate": "2011-03-01T08:19:04.783", "PostTypeId": "1", "LastEditorUserId": "501557", "LastActivityDate": "2015-01-14T20:36:18.583", "Score": "5", "OwnerUserId": "207177", "Tags": "<c++><typeid>", "AnswerCount": "3"}});