post_cb({"43993162": {"CommentCount": "5", "ViewCount": "1888", "PostTypeId": "1", "LastEditorUserId": "966376", "CreationDate": "2017-05-16T05:28:31.470", "LastActivityDate": "2017-05-16T13:17:50.057", "Title": "All versions of GCC struggle with a template that has the default type in a definition", "FavoriteCount": "2", "LastEditDate": "2017-05-16T13:17:50.057", "Id": "43993162", "Score": "40", "Body": "<p>I wasted countless hours to pinpoint an issue with <strong>gcc</strong>. I wanted to test our code base with another compiler to look for more warnings that <a href=\"http://en.wikipedia.org/wiki/Clang\" rel=\"noreferrer\">Clang</a> might have missed. I was shocked that practically half of the project stopped to compile due to failure of template argument deduction. Here I've tried to dumb my case down to the simplest piece of code.</p>\n<pre><code>#include &lt;type_traits&gt;\n\nstruct Foo\n{ };\n\n// This is a template function declaration, where second template argument declared without a default\ntemplate &lt;typename T, typename&gt;\nvoid foo(const Foo &amp; foo, T t);\n\n// This is a template function definition; second template argument now has a default declared\ntemplate &lt;typename T, typename = typename std::enable_if&lt;1&gt;::type&gt;\nvoid foo(const Foo &amp; foo, T t)\n{\n}\n\nint main(int argc, char ** argv)\n{\n    foo(Foo{}, 1);\n    return 0;\n}\n</code></pre>\n<p>Ignore a <code>1</code> in the <code>std::enable_if&lt;1&gt;</code>. Obviously it's a constant value just to not complicate things when it does not matter.</p>\n<p>This piece of code compiles<a href=\"https://godbolt.org/g/noux3R\" rel=\"noreferrer\">[1]</a> with <strong>clang</strong> (3.4 through 4.0), <strong>icc</strong> (16, 17), <strong>Visual C++</strong> (19.00.23506). Basically, I couldn't find any other c++11 compiler that, except <strong>gcc</strong> (4.8 through 7.1), does not compile this piece of code.</p>\n<p>The question is, who's right and who's wrong here? Does <strong>gcc</strong> behave according to the standard?</p>\n<p>Obviously this is not a critical issue. I can easily move <code>std::enable_if</code> to the declaration. The only victim would be aesthetics. But it is nice to be able to hide an ugly 100 characters long <code>std::enable_if</code> piece of code, that is not immediately relevant for the user of the library function, in the implementation.</p>\n<hr>\n<p>Live example on <a href=\"https://godbolt.org/g/5X0l1B\" rel=\"noreferrer\">godbolt.org</a>.</p>\n</hr>", "Tags": "<c++><c++11><templates><gcc>", "OwnerUserId": "966376", "AnswerCount": "1"}, "43994530": {"ParentId": "43993162", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2017-05-16T07:02:42.560", "Score": "34", "LastEditorUserId": "63550", "LastEditDate": "2017-05-16T11:10:02.593", "Id": "43994530", "OwnerUserId": "966376", "Body": "<p>What the standard says (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"noreferrer\">[1]</a> page 350):</p>\n<blockquote>\n<p id=\"so_43993162_43994530_0\">The set of default template-arguments available for use with a\n  template declaration or definition is obtained by merging the default\n  arguments from the definition (if in scope) and all declarations in\n  scope in the same way default function arguments are (8.3.6). [\n  Example:</p>\n<pre><code>template&lt;class T1, class T2 = int&gt; class A;\ntemplate&lt;class T1 = int, class T2&gt; class A;\nis equivalent to\ntemplate&lt;class T1 = int, class T2 = int&gt; class A;\n</code></pre>\n<p id=\"so_43993162_43994530_1\">\u2014 end example ]</p>\n</blockquote>\n<p>So GCC is wrong here. It ignores default template arguments in declarations.</p>\n<p>Not all declarations, only function template declarations. Class template declarations are okay:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T, typename&gt;\nstruct Foo;\n\ntemplate &lt;typename T, typename = typename std::enable_if&lt;1&gt;::type&gt;\nstruct Foo\n{\n    T t;\n};\n\nint main()\n{\n    Foo&lt;int&gt; foo;\n    return 0;\n}\n</code></pre>\n<hr>\n<p>Live example on <a href=\"https://godbolt.org/g/aPXJqZ\" rel=\"noreferrer\">godbolt.org</a></p>\n<hr>\n<p>Probably it is due to the nature of how non-default arguments are deduced. In the function template they are deducted from function arguments. In the class template we have to specify them explicitly.</p>\n<p>Anyway, I have created a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80771\" rel=\"noreferrer\">bug report</a>.</p>\n</hr></hr>", "LastActivityDate": "2017-05-16T11:10:02.593"}, "bq_ids": {"n4140": {"so_43993162_43994530_0": {"section_id": 63, "quality": 0.88, "length": 22}}, "n3337": {"so_43993162_43994530_0": {"section_id": 58, "quality": 0.88, "length": 22}}, "n4659": {"so_43993162_43994530_0": {"section_id": 65, "quality": 0.64, "length": 16}}}});