post_cb({"36841729": {"ParentId": "36839648", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is a difference when any of <code>x</code>, <code>y</code> and <code>z</code> is a specialization of <code>std::reference_wrapper</code>.</p>\n<pre><code>#include &lt;tuple&gt;\n#include &lt;functional&gt;\n\nvoid f(std::reference_wrapper&lt;int&gt; x, int y, int z)\n{\n    std::tie(x,y,z); // type is std::tuple&lt;std::reference_wrapper&lt;int&gt;&amp;, int&amp;, int&amp;&gt;\n    std::make_tuple(std::ref(x),std::ref(y),std::ref(z)); // type is std::tuple&lt;int&amp;, int&amp;, int&amp;&gt;\n}\n</code></pre>\n", "OwnerUserId": "4672588", "LastEditorUserId": "4672588", "LastEditDate": "2016-04-25T13:37:49.197", "Id": "36841729", "Score": "14", "CreationDate": "2016-04-25T13:17:38.437", "LastActivityDate": "2016-04-25T13:37:49.197"}, "36840371": {"ParentId": "36839648", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is almost<sup>\u2020</sup> no functional difference between the two expressions. <code>tie()</code> is just shorter whereas <code>make_tuple()</code> is more generic. </p>\n<hr/>\n<p>According to [tuple.creation], <a href=\"http://eel.is/c++draft/tuple.creation#2\" rel=\"nofollow noreferrer\"><code>make_tuple</code></a> does:</p>\n<blockquote>\n<pre><code>template&lt;class... Types&gt;\nconstexpr tuple&lt;VTypes...&gt; make_tuple(Types&amp;&amp;... t);\n</code></pre>\n<p id=\"so_36839648_36840371_0\">Let <code>Ui</code> be <code>decay_t&lt;Ti&gt;</code> for each <code>Ti</code> in Types. Then each <code>Vi</code> in <code>VTypes</code> is <code>X&amp;</code> if <code>Ui</code> equals <code>reference_wrapper&lt;X&gt;</code>, otherwise <code>Vi</code> is <code>Ui</code>.</p>\n</blockquote>\n<p>Hence <code>std::make_tuple( std::ref(x), std::ref(y), std::ref(z) )</code> yields<sup>\u2020</sup> a <code>std::tuple&lt;X&amp;, Y&amp;, Z&amp;&gt;</code>. </p>\n<p>On the other hand, <a href=\"http://eel.is/c++draft/tuple.creation#7\" rel=\"nofollow noreferrer\"><code>tie</code></a> does:</p>\n<blockquote>\n<pre><code>template&lt;class... Types&gt;\nconstexpr tuple&lt;Types&amp;...&gt; tie(Types&amp;... t) noexcept;\n</code></pre>\n<p id=\"so_36839648_36840371_1\"><em>Returns:</em> <code>tuple&lt;Types&amp;...&gt;(t...)</code>. When an argument in <code>t</code> is <code>ignore</code>, assigning any value to the corresponding tuple element has no effect.</p>\n</blockquote>\n<p>Hence, <code>std::tie(x, y, z)</code> also yields a <code>std::tuple&lt;X&amp;, Y&amp;, Z&amp;&gt;</code>.</p>\n<hr/>\n<p><sup>\u2020</sup>Except in one <a href=\"https://stackoverflow.com/a/36841729/2069064\">edge case</a>.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:18:06.583", "Id": "36840371", "Score": "15", "CreationDate": "2016-04-25T12:18:47.377", "LastActivityDate": "2016-04-25T20:33:03.380"}, "36839648": {"CommentCount": "0", "CreationDate": "2016-04-25T11:46:46.457", "PostTypeId": "1", "AcceptedAnswerId": "36840371", "LastEditorUserId": "-1", "LastActivityDate": "2016-04-25T20:33:03.380", "LastEditDate": "2017-05-23T12:09:59.730", "ViewCount": "1322", "FavoriteCount": "2", "Title": "What is the difference between std::tie and std::make_tuple with std::ref arguments?", "Id": "36839648", "Score": "16", "Body": "<p>Is there any semantic difference between writing the expression</p>\n<pre><code>std::tie( x, y, z )\n</code></pre>\n<p>and the following expression?</p>\n<pre><code>std::make_tuple( std::ref(x), std::ref(y), std::ref(z) )\n</code></pre>\n<p>If so, what are the differences?</p>\n<p>By the way, this question is not asking the same as <a href=\"https://stackoverflow.com/questions/19800303/what-is-the-difference-between-assigning-to-stdtie-and-tuple-of-references\">What is the difference between assigning to <code>std::tie</code> and tuple of references?</a> because the tuple of references is not created via <code>std::ref</code>, but by explicitly specifying the type. </p>\n", "Tags": "<c++><c++11><reference><tuples>", "OwnerUserId": "1335865", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_36839648_36840371_0": {"section_id": 4066, "quality": 0.9, "length": 9}, "so_36839648_36840371_1": {"section_id": 4071, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_36839648_36840371_0": {"section_id": 3916, "quality": 0.9, "length": 9}, "so_36839648_36840371_1": {"section_id": 3921, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_36839648_36840371_1": {"section_id": 4975, "quality": 0.8181818181818182, "length": 9}}}});