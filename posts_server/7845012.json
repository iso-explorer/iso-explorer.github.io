post_cb({"7845027": {"PostTypeId": "2", "ParentId": "7845012", "Body": "<p>Because they're in the same place. The first element in <code>struct A</code> is a <code>struct B</code>, so they're actually in the same memory location (anything else in <code>struct A</code> would then be put after <code>b</code>).</p>\n<p>Similarly, <code>x</code> is the first bit of data in <code>struct B</code>, so it's in the same position as the <code>struct B</code>.</p>\n<p>It's very important to note that this won't always be true. Things like virtual functions will cause stuff to move. It is true in this case because they're plain classes/structs.</p>\n", "CreationDate": "2011-10-21T04:37:07.927", "Score": "4", "CommentCount": "1", "Id": "7845027", "OwnerUserId": "799621", "LastActivityDate": "2011-10-21T04:37:07.927"}, "7845012": {"LastEditDate": "2011-10-21T05:44:01.387", "Body": "<p>In the following cases, each member has a different name or entity so why are their addresses the same? </p>\n<pre><code>struct B { int x; };\nstruct A { B b; };\n\nint main()\n{\n    A obj;\n    cout &lt;&lt; &amp;obj.b.x &lt;&lt; endl;\n    cout &lt;&lt; &amp;obj.b &lt;&lt; endl;\n    cout &lt;&lt; &amp;obj &lt;&lt; endl;\n}\n</code></pre>\n", "CreationDate": "2011-10-21T04:33:00.233", "Score": "4", "AcceptedAnswerId": "7845026", "CommentCount": "2", "OwnerUserId": "974191", "Title": "Why do class members have the same address as their object?", "LastActivityDate": "2011-10-21T05:44:01.387", "PostTypeId": "1", "Tags": "<c++>", "AnswerCount": "3", "FavoriteCount": "1", "Id": "7845012", "ViewCount": "838", "LastEditorUserId": "673730"}, "7845036": {"PostTypeId": "2", "ParentId": "7845012", "Body": "<p>If you stand on the border of your country with a cup of coffee in your hand then your coordinates, the coordinates of the border and the coordinates of coffee cup will all have same value on a GPS device.</p>\n<p>First child's first element happens to be at the starting address of the object. Names are for your own convenience computers work with memory addresses. You can name them whatever you want but memory layout depends on order and hierarchy of data members.</p>\n", "CreationDate": "2011-10-21T04:39:11.860", "Score": "3", "CommentCount": "1", "Id": "7845036", "OwnerUserId": "36464", "LastActivityDate": "2011-10-21T04:39:11.860"}, "7845026": {"PostTypeId": "2", "ParentId": "7845012", "Body": "<p>Because a pointer to a struct always points to it's first member (as the struct is laid out sequentially). </p>\n<p><a href=\"https://stackoverflow.com/questions/7312555/in-c-does-a-pointer-to-a-structure-always-point-to-its-first-member\">In C, does a pointer to a structure always point to its first member?</a></p>\n<blockquote>\n<p id=\"so_7845012_7845026_0\">(C1x \u00a76.7.2.1.13: \"A pointer to a structure object, suitably\n  converted, points to its initial member ... and vice versa. There may\n  be unnamed padding within as structure object, but not at its\n  beginning.\")</p>\n</blockquote>\n<p><strong>NOTE:</strong> mange points out, rightfully so, that if you start adding virtual functions to your struct, C++ implements this by tacking the vtable at the start of your struct... which makes my statement (which is true for C) incorrect when you talk about everything you could possibly do with 'structs' in C++. </p>\n", "CreationDate": "2011-10-21T04:36:53.810", "Score": "8", "LastEditDate": "2017-05-23T12:14:28.513", "CommentCount": "6", "Id": "7845026", "OwnerUserId": "355583", "LastEditorUserId": "-1", "LastActivityDate": "2011-10-21T05:00:29.437"}, "bq_ids": {"n3337": {"so_7845012_7845026_0": {"quality": 0.782608695652174, "length": 18, "section_id": 5650}}}});