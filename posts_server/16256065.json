post_cb({"bq_ids": {"n4140": {"so_16256065_16256081_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 6057}, "so_16256065_16256081_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 5433}}, "n3337": {"so_16256065_16256081_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 5825}, "so_16256065_16256081_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 5228}}, "n4659": {"so_16256065_16256081_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 7555}, "so_16256065_16256081_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 6861}}}, "16256081": {"Id": "16256081", "PostTypeId": "2", "Body": "<p>No, it is not possible, at least in C++. You need either <code>mutable</code> or non <code>const</code> function.<br>\nAlso there is <code>const_cast</code> don't use it to modify things. In case if you modify <code>const_cast</code>ed <code>const</code> value you get Undefined Behaviour.</br></p>\n<h1>5.2.11 Const cast</h1>\n<blockquote>\n<p id=\"so_16256065_16256081_0\">7 [ Note: Depending on the type of the object, a write operation through the pointer, lvalue or pointer\n  to data member resulting from a const_cast that casts away a const-qualifier73 <strong>may produce undefined\n  behavior</strong> (7.1.6.1). \u2014end note ]</p>\n</blockquote>\n<h1>7.1.6.1 The cv-qualifiers</h1>\n<blockquote>\n<p id=\"so_16256065_16256081_1\">4 Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const\n  object during its lifetime (3.8) results in undefined behavior.<br>\n  ....<br>\n  5 For another example  </br></br></p>\n</blockquote>\n<pre><code>struct X {\nmutable int i;\nint j;\n};\nstruct Y {\nX x;\nY();\n};\nconst Y y;\ny.x.i++; // well-formed: mutable member can be modified\ny.x.j++; // ill-formed: const-qualified member modified\nY* p = const_cast&lt;Y*&gt;(&amp;y); // cast away const-ness of y\np-&gt;x.i = 99; // well-formed: mutable member can be modified\np-&gt;x.j = 99; // undefined: modifies a const member\n\u2014end example ]\n</code></pre>\n", "LastEditorUserId": "2254782", "LastActivityDate": "2013-04-27T21:41:05.817", "Score": "3", "CreationDate": "2013-04-27T19:32:37.920", "ParentId": "16256065", "CommentCount": "10", "OwnerUserId": "2254782", "LastEditDate": "2013-04-27T21:41:05.817"}, "16256125": {"Id": "16256125", "PostTypeId": "2", "Body": "<p>It is technically possible to bypass the <code>const</code> in this case, by for example:</p>\n<pre><code>void mutable_bar() const {\n    int&amp; p_blah = const_cast&lt;int&amp;&gt;(blah);\n\n    p_blah = 5; // no compiler error\n}\n</code></pre>\n<p>Or some similar construct. But you are really jumping through hoops to do something that you shouldn't be able to do. And as a comment on another post says, this is \"undefined behavior\", which means that in some cases it may not even work (or do what you expect it to do). </p>\n", "LastEditorUserId": "1968182", "LastActivityDate": "2013-04-27T19:55:30.913", "Score": "1", "CreationDate": "2013-04-27T19:36:54.783", "ParentId": "16256065", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2013-04-27T19:55:30.913"}, "16256092": {"Id": "16256092", "PostTypeId": "2", "Body": "<p>You could use a <code>const_cast</code> to make the member not-const in selected cases. This, along with an according comment, might even be a relatively clean solution. At least it's explicit that you break the const in a restricted scope, instead of making it world-wide mutable.</p>\n", "LastActivityDate": "2013-04-27T19:34:09.930", "CommentCount": "5", "CreationDate": "2013-04-27T19:34:09.930", "ParentId": "16256065", "Score": "0", "OwnerUserId": "1968182"}, "16256065": {"ViewCount": "140", "Body": "<p>Is it possible to have a member variable only be considered mutable for a given function/code block?</p>\n<p>e.g.</p>\n<pre><code>class Foo() {\n  int blah;\n  void bar() const {\n    blah = 5; // compiler error\n  }\n  void mutable_bar() const {\n    blah = 5; // no compiler error\n  }\n}\n</code></pre>\n<p>note: in this case I do NOT want to get rid of the const at mutable_bar since logical const will be preserved.</p>\n<p>Same question, but different perspective: Can I somehow apply the mutable keyword to a method instead of a variable?</p>\n", "AcceptedAnswerId": "16256081", "Title": "Temporary mutability of a member variable", "CreationDate": "2013-04-27T19:30:22.527", "Id": "16256065", "CommentCount": "11", "PostTypeId": "1", "LastActivityDate": "2013-04-27T21:41:05.817", "Score": "0", "OwnerUserId": "618964", "Tags": "<c++><mutable>", "AnswerCount": "3"}});