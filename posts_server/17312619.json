post_cb({"bq_ids": {"n4140": {"so_17312619_17312804_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 752}, "so_17312619_17312804_1": {"length": 15, "quality": 0.9375, "section_id": 750}, "so_17312619_17312804_6": {"length": 4, "quality": 1.0, "section_id": 1014}, "so_17312619_17312804_2": {"length": 12, "quality": 0.8, "section_id": 751}, "so_17312619_17312804_7": {"length": 7, "quality": 0.875, "section_id": 1016}}, "n3337": {"so_17312619_17312804_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 740}, "so_17312619_17312804_7": {"length": 7, "quality": 0.875, "section_id": 1001}, "so_17312619_17312804_6": {"length": 4, "quality": 1.0, "section_id": 999}, "so_17312619_17312804_2": {"length": 12, "quality": 0.8, "section_id": 739}, "so_17312619_17312804_1": {"length": 15, "quality": 0.9375, "section_id": 738}}, "n4659": {"so_17312619_17312804_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 812}, "so_17312619_17312804_1": {"length": 15, "quality": 0.9375, "section_id": 810}, "so_17312619_17312804_6": {"length": 4, "quality": 1.0, "section_id": 1071}, "so_17312619_17312804_2": {"length": 12, "quality": 0.8, "section_id": 811}, "so_17312619_17312804_7": {"length": 7, "quality": 0.875, "section_id": 1073}}}, "17312619": {"ViewCount": "1971", "Body": "<p>I would like to handle exceptional circumstances when using std::map (C++) methods, as well as when using things like boost::unordered_map methods.  However, looking at method documentation (e.g.: insert) doesn't provide a list of exceptions that I can catch.</p>\n", "AcceptedAnswerId": "17312804", "Title": "How do I find out which exceptions std::map methods can throw?", "CreationDate": "2013-06-26T06:04:03.023", "Id": "17312619", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-06-26T11:18:09.950", "Score": "4", "OwnerUserId": "2005885", "Tags": "<c++><map>", "AnswerCount": "2"}, "17318595": {"Id": "17318595", "PostTypeId": "2", "Body": "<p>Jorge, </p>\n<p>Standard containers can only throw an <code>out-of-range</code> exception on access, they <strong>do not throw exceptions</strong> on other operations. However, the contained items can throw in an inner operation (constructor, assignation, comparison) when this operation is overloaded. That's why @tony-d link gives the best answer : this documents the behavior of the container when some underlying element raise during manipulations (insert/clear/swap).</p>\n<p>The only exception left that can be raised are memory access violations and out-of-memory errors, which you should handle globally (and very carefully) at every high level, if at all.</p>\n", "LastActivityDate": "2013-06-26T11:18:09.950", "Score": "2", "CreationDate": "2013-06-26T11:18:09.950", "ParentId": "17312619", "CommentCount": "0", "OwnerUserId": "2518863"}, "17312804": {"Id": "17312804", "PostTypeId": "2", "Body": "<p>Look at <em>good</em> documentation: if you're not sure then - ultimately - the Standard, but e.g. <a href=\"http://www.cplusplus.com/reference/map/map/insert/\" rel=\"nofollow\">http://www.cplusplus.com/reference/map/map/insert/</a> may be more convenient and has exception safety heading/text near the bottom.  You're not likely to find better documentation for boost than that kept online at the boost site.</p>\n<p>If a good reference doesn't document exceptions, it's because that function's code isn't explicitly written to throw any - though that doesn't mean there can't be exceptions thrown as the arguments to a function are prepared, as a side effect of memory allocation or some reasonable operation on objects e.g. copy construction or operators, or during the construction of a result.  All that's common sense though.</p>\n<p>The Standard's explicit requirements re <code>std::map</code>...</p>\n<blockquote>\n<p id=\"so_17312619_17312804_0\">23.2.4.1 Exception safety guarantees [associative.reqmts.except]</p>\n<p id=\"so_17312619_17312804_1\">1 For associative containers, no clear() function throws an exception. erase(k) does not throw an exception\n  unless that exception is thrown by the container\u2019s Compare object (if any).</p>\n<p id=\"so_17312619_17312804_2\">2 For associative containers, if an exception is thrown by any operation from within an insert() function\n  inserting a single element, the insert() function has no effect.</p>\n<p id=\"so_17312619_17312804_3\">3 For associative containers, no swap function throws an exception unless that exception is thrown by the\n  swap of the container\u2019s Compare object (if any).</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_17312619_17312804_4\">23.4.4.3 map element access [map.access]</p>\n<p id=\"so_17312619_17312804_5\">T&amp; at(const key_type&amp; x);</p>\n<p id=\"so_17312619_17312804_6\">const T&amp; at(const key_type&amp; x) const;</p>\n<p id=\"so_17312619_17312804_7\">10 Throws: An exception object of type out_of_range if no such element is present.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "410767", "LastActivityDate": "2013-06-26T06:49:23.943", "Score": "4", "CreationDate": "2013-06-26T06:15:03.973", "ParentId": "17312619", "CommentCount": "3", "LastEditDate": "2013-06-26T06:49:23.943", "OwnerUserId": "410767"}});