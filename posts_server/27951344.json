post_cb({"27951549": {"ParentId": "27951344", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The problem is that <code>NULL</code> is a macro with value 0. Template argument deduction deduced the type of <code>NULL</code> as <code>int</code> (as you can see from the end of the warning). Yet <code>NULL</code> is by convention used for pointer arguments, not integral arguments. So the compiler warns you that you're passing a <code>NULL</code> argument to an <code>int</code> parameter. To make things worse, this is technically wrong as that non-const integer 0 argument is no longer guaranteed to be convertable to a null pointer.</p>\n<p>The correct solution is <code>nullptr</code>. This is, as the name already hints, a pointer instead of an integer.</p>\n", "OwnerUserId": "15416", "LastEditorUserId": "15416", "LastEditDate": "2015-01-14T20:23:14.627", "Id": "27951549", "Score": "1", "CreationDate": "2015-01-14T20:09:53.407", "LastActivityDate": "2015-01-14T20:23:14.627"}, "27951801": {"ParentId": "27951344", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The trouble is that <code>NULL</code> is a bit ambiguous.<br>\nWhile it is semantically a pointer, it can (and in your implementation is) of integral type.</br></p>\n<blockquote>\n<h3>18.2 Types <code>[support.types]</code></h3>\n<p id=\"so_27951344_27951801_0\">3 The macro <code>NULL</code> is an implementation-defined C++ <em>null pointer constant</em> in this International Standard (4.10).</p>\n</blockquote>\n<blockquote>\n<h3>4.10 Pointer conversions <code>[conv.ptr]</code></h3>\n<p id=\"so_27951344_27951801_1\">1 A <em>null pointer constant</em> is an integer literal (2.14.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.<br>\n  [...]</br></p>\n</blockquote>\n<p>So your implementation decided to make it plain <code>0</code> for backwards-compatibility, but to flag it for extra diagnostics.</p>\n<p>Which is actually a laudable decision for promoting portable code.<br>\nThough it's a shame noone could hop into a time-machine and just make <code>NULL</code> identical to <code>nullptr</code> in the standard, so the ambiguity does not exist.</br></p>\n<p>To resolve the error, use <code>nullptr</code> instead of <code>NULL</code> or, more involved and not so nice, a pointer of the proper type.</p>\n", "OwnerUserId": "3204551", "LastEditorUserId": "3204551", "LastEditDate": "2015-01-14T21:45:00.600", "Id": "27951801", "Score": "1", "CreationDate": "2015-01-14T20:25:45.497", "LastActivityDate": "2015-01-14T21:45:00.600"}, "bq_ids": {"n4140": {"so_27951344_27951801_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27951344_27951801_0": {"section_id": 2515, "quality": 0.7, "length": 7}}, "n3337": {"so_27951344_27951801_1": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}, "so_27951344_27951801_0": {"section_id": 6460, "quality": 0.7, "length": 7}}, "n4659": {"so_27951344_27951801_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27951344_27951801_0": {"section_id": 3249, "quality": 0.6, "length": 6}}}, "27951344": {"CommentCount": "16", "ViewCount": "3944", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2015-01-14T19:57:51.727", "LastActivityDate": "2015-01-14T21:45:00.600", "Title": "warning: passing NULL to non-pointer argument of \u2018std::thread::thread", "AcceptedAnswerId": "27951801", "LastEditDate": "2015-01-14T21:04:16.857", "Id": "27951344", "Score": "2", "Body": "<p>The function I want to run:</p>\n<pre><code>struct foo;\nvoid bar(const foo* p = 0);\n</code></pre>\n<p>How I call the function:</p>\n<pre><code>auto thread = std::thread(&amp;bar, NULL);\n</code></pre>\n<p>The warning:</p>\n<blockquote>\n<p id=\"so_27951344_27951344_0\">foobar.h:223:9: warning: passing NULL to non-pointer argument 2 of \u2018std::thread::thread(_Callable&amp;&amp;, _Args&amp;&amp; ...) [with _Callable = void (*)(const foo*), _Args = {int}]\u2019 [-Wconversion-null]</p>\n</blockquote>\n<p>What am I missing here?</p>\n<p>When I call the function with non-<code>NULL</code> argument, the warning goes away.</p>\n", "Tags": "<c++><templates><c++11><perfect-forwarding><nullptr>", "OwnerUserId": "2411320", "AnswerCount": "2"}});