post_cb({"11311732": {"ViewCount": "129", "Body": "<p>When do class members get their default values in c++11? Is the following code legitimate?</p>\n<pre><code>class C {\n    void* buffer;\n    uint16_t&amp; crc = *reinterpret_cast &lt;uint16_t*&gt; (buffer);\npublic:\n    explicit C (void* p) : buffer (p) {}\n};\n</code></pre>\n<p>I expect, that the default value of crc is just syntax sugar, so that crc is initialized after buffer has been. Am I correct?</p>\n", "AcceptedAnswerId": "11312376", "Title": "In-class default values initialization order", "CreationDate": "2012-07-03T13:15:19.383", "Id": "11311732", "CommentCount": "0", "LastEditDate": "2012-07-03T17:51:35.490", "PostTypeId": "1", "LastEditorUserId": "636019", "LastActivityDate": "2012-07-03T17:51:35.490", "Score": "-1", "OwnerUserId": "1266605", "Tags": "<c++><constructor><c++11><initialization>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11311732_11312376_2": {"length": 15, "quality": 1.0, "section_id": 438}, "so_11311732_11312376_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_11311732_11312376_3": {"length": 5, "quality": 1.0, "section_id": 438}, "so_11311732_11312356_0": {"length": 15, "quality": 1.0, "section_id": 438}}, "n3337": {"so_11311732_11312376_2": {"length": 15, "quality": 1.0, "section_id": 429}, "so_11311732_11312376_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_11311732_11312376_3": {"length": 5, "quality": 1.0, "section_id": 429}, "so_11311732_11312356_0": {"length": 15, "quality": 1.0, "section_id": 429}}, "n4659": {"so_11311732_11312376_2": {"length": 15, "quality": 1.0, "section_id": 458}, "so_11311732_11312376_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_11311732_11312376_3": {"length": 5, "quality": 1.0, "section_id": 458}, "so_11311732_11312356_0": {"length": 15, "quality": 1.0, "section_id": 458}}}, "11312356": {"Id": "11312356", "PostTypeId": "2", "Body": "<p>The order is specified in C++11 \u00a712.6.2[class.base.init]/10. It depends only on the order you declare the data members. Since <code>buffer</code> appears before <code>crc</code> it is fine.</p>\n<blockquote>\n<p id=\"so_11311732_11312356_0\">Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the <em>mem-initializers</em>).</p>\n</blockquote>\n", "LastActivityDate": "2012-07-03T13:47:20.523", "CommentCount": "0", "CreationDate": "2012-07-03T13:47:20.523", "ParentId": "11311732", "Score": "0", "OwnerUserId": "224671"}, "11312376": {"Id": "11312376", "PostTypeId": "2", "Body": "<p>The order of initialization of non-static data members is specified in paragraph 10 of 12.6.2 Initializing bases and members [class.base.init]\n(emphasis mine):</p>\n<blockquote>\n<p id=\"so_11311732_11312376_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_11311732_11312376_1\">[... things regarding bases]</p>\n<p id=\"so_11311732_11312376_2\"><strong>\u2014 Then, non-static data members are initialized in the order they were declared in the class definition\n  (again regardless of the order of the mem-initializers).</strong></p>\n<p id=\"so_11311732_11312376_3\">\u2014 Finally, the compound-statement of the constructor body is executed.</p>\n</blockquote>\n<p>As you can see, whether the members are initialized with a so called <em>mem-initializer</em> (i.e. inside a constructor, before its body) or a <em>brace-or-equal-initializer</em> (i.e. in the class definition) or with nothing at all has no bearing on initialization order.</p>\n", "LastActivityDate": "2012-07-03T13:48:37.557", "CommentCount": "1", "CreationDate": "2012-07-03T13:48:37.557", "ParentId": "11311732", "Score": "3", "OwnerUserId": "726300"}});