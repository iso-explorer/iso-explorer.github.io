post_cb({"28291138": {"ParentId": "28291101", "CommentCount": "2", "CreationDate": "2015-02-03T03:59:10.867", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28291138", "Score": "4", "Body": "<p>The relevant part of the standard is in [class.temporary] (<code>\u00a712.2/5</code>in N4140):</p>\n<blockquote>\n<p id=\"so_28291101_28291138_0\">A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of\n  the full-expression containing the call.</p>\n</blockquote>\n<p>So the temporary <code>value_type()</code> will be bound to <code>val</code> and will persist for the duration of the constructor. </p>\n", "LastActivityDate": "2015-02-03T03:59:10.867"}, "28291101": {"CommentCount": "1", "ViewCount": "157", "CreationDate": "2015-02-03T03:54:39.283", "LastActivityDate": "2015-02-03T03:59:10.867", "Title": "Bind temporary rvalue to reference lvalue in std::vector constructors", "AcceptedAnswerId": "28291138", "PostTypeId": "1", "Id": "28291101", "Score": "2", "Body": "<p>Until now, I thought that we cannot pass a temporary rvalue to a lvalue reference. But just recently, I took a closer look on the fill constructor of std::vector:</p>\n<pre><code>explicit vector (size_type n, const value_type&amp; val = value_type(),\n                 const allocator_type&amp; alloc = allocator_type());\n</code></pre>\n<p><code>const value_type&amp; val</code> is a reference lvalue and <code>= value_type()</code> is a anonymous rvalue, in my understanding. Why is it possible? Isn't the temporary rvalue immediately destroyed, so that the reference has nothing to point to?</p>\n", "Tags": "<c++><vector><pass-by-reference><lvalue><rvalue>", "OwnerUserId": "1494080", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28291101_28291138_0": {"section_id": 382, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_28291101_28291138_0": {"section_id": 373, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_28291101_28291138_0": {"section_id": 397, "quality": 0.9230769230769231, "length": 12}}}});