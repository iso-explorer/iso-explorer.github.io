post_cb({"31900112": {"ViewCount": "9164", "Body": "<p>I installed Visual Studio <strong>2015</strong> and found that some of my code (that hadn't any problems in VS <strong>2013</strong>) now has got some errors indicated by green squiggles (which are supposed to be a <em>new productivity feature</em>). Yet the code still compiles successfully.</p>\n<p>Here's a quick example:</p>\n<pre><code>namespace\n{\n    void test1(); // what once was OK in VS 2013,\n    void test2(); // is now marked with squiggles in VS 2015\n}\n\nnamespace named\n{\n    void test3(); // OK, no problem\n}\n\nvoid        test1() { /*...*/ }\nvoid      ::test2() { /*...*/ }\nvoid named::test3() { /*...*/ }\n\nint main() { /*...*/ }\n</code></pre>\n<p>Theese are the squiggles in question</p>\n<p><a href=\"https://i.stack.imgur.com/sytZY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/sytZY.png\"/></a></p>\n<p>Moving the mouse over them tells me that </p>\n<blockquote>\n<p id=\"so_31900112_31900112_0\">Function definition for 'test1' not found</p>\n<p id=\"so_31900112_31900112_1\">Function definition for 'test2' not found</p>\n</blockquote>\n<hr>\n<p>Somehow it turns out that only functions declared inside unnamed namespace trigger the squiggles.</p>\n<p>How is it supposed to be resolved?</p>\n</hr>", "AcceptedAnswerId": "31900313", "Title": "Function definition not found for a function declared inside unnamed namespace - how to resolve? (Visual Studio 2015)", "CreationDate": "2015-08-09T01:26:24.657", "Id": "31900112", "CommentCount": "6", "LastEditDate": "2015-08-10T19:06:32.957", "PostTypeId": "1", "LastEditorUserId": "4815980", "LastActivityDate": "2015-08-10T19:18:53.820", "Score": "2", "OwnerUserId": "4815980", "Tags": "<c++><visual-studio-2015>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31900112_31900313_1": {"length": 19, "quality": 0.95, "section_id": 5482}, "so_31900112_31900313_0": {"length": 4, "quality": 1.0, "section_id": 5482}}, "n3337": {"so_31900112_31900313_1": {"length": 19, "quality": 0.95, "section_id": 5268}, "so_31900112_31900313_0": {"length": 4, "quality": 1.0, "section_id": 5268}}, "n4659": {"so_31900112_31900313_1": {"length": 19, "quality": 0.95, "section_id": 6917}, "so_31900112_31900313_0": {"length": 4, "quality": 1.0, "section_id": 6917}}}, "31900313": {"Id": "31900313", "PostTypeId": "2", "Body": "<p>This compiles OK, with the light bulb you mentioned:</p>\n<pre><code>namespace\n{\n    void func();\n}\n\nvoid ::func() //Will not compile if 'void func()'\n{}\n\nint main()\n{\n    func();\n}\n</code></pre>\n<p>But IntelliSense also outputs (in both cases):</p>\n<pre><code>Error (active) more than one instance of overloaded function \"func\"\nmatches the argument list: \n\nfunction \"func()\"\nfunction \"&lt;unnamed&gt;::func()\"\n</code></pre>\n<p>Is this really what you want to do though? As n4527 at \u00a7 7.3.1.1 states:</p>\n<blockquote>\n<p id=\"so_31900112_31900313_0\">An <em>unnamed-namespace-definition</em> behaves as if it were replaced by</p>\n<pre><code>inline(opt) namespace unique { /* empty body */ } \nusing namespace unique; \nnamespace unique { namespace-body }\n</code></pre>\n<p id=\"so_31900112_31900313_1\">where inline appears if and only if it appears in the\n  <em>unnamed-namespace-definition</em> and all occurrences of unique in a translation unit are replaced by the same identifier, and this\n  identifier differs from all other identifiers in the translation unit.</p>\n</blockquote>\n<p>Which makes it clear why there are ambiguities going on. Just define your methods <em>within</em> your unnamed namespace, as they're different from anything else outside it.</p>\n<p>For the record, GCC 5.2.0 and clang 3.6.0 won't agree to compile the code that MSVC compiled.</p>\n", "LastEditorDisplayName": "user932887", "OwnerDisplayName": "user932887", "LastActivityDate": "2015-08-10T19:18:53.820", "Score": "1", "CreationDate": "2015-08-09T02:22:15.213", "ParentId": "31900112", "CommentCount": "6", "LastEditDate": "2015-08-10T19:18:53.820"}, "31926842": {"Id": "31926842", "PostTypeId": "2", "Body": "<p>The green squiggles don't tell you that there's an error, they tell you that there's an opportunity for the new refactoring tools to do something. (Red squiggles indicate an error.) In this case, they're informing you that there is no definition matching the declaration of <code>test2</code>, so the IDE is offering to generate one.</p>\n<p>This happens to point out an error that was always there in the code, although Visual Studio might be behaving in a non-conforming manner.</p>\n<p>So what happens? The problem is that the declarations in the unnamed namespace do not declare the same functions that you later define in the global namespace. The refactoring tools recognize this and offer to generate a definition for the declared functions.</p>\n<p>However, the whole thing still compiles, due to the Microsoft compiler accepting two strictly illegal pieces of code. First, using the namespace prefix on the first declaration of a function is not allowed. The code in <code>main</code> then presumably calls the functions. As Alex M showed in his answer, GCC won't accept this either, since the call is ambiguous. The Microsoft compiler appears to accept it, either treating the definition as a definition matching the declaration in the unnamed namespace (remember, the tools of the IDE, IntelliSense and the refactory, used the more compliant EDG front-end, not the parser the actual compiler uses, which means that the refactory can say that the declaration has no definition, while the compiler treats the definition as matching the declaration), or just preferring the global version to the namespaced version.</p>\n<p>It's easy to distinguish the two cases, by the way. Rearrange the code so that <code>main</code> comes before the function definitions. This will resolve the ambiguity in GCC, because only the namespaced function is declared (and not defined, so you should get a linker error). It will also lead to a linker error in the Microsoft compiler, if it just prefers the global version, but will still compile if it treats the declaration and definition as matching.</p>\n<p>The solution to all this is very simple: when defining functions declared in the unnamed namespace, just reopen the namespace instead of trying to define the functions outside.</p>\n", "LastActivityDate": "2015-08-10T18:42:33.720", "CommentCount": "0", "CreationDate": "2015-08-10T18:42:33.720", "ParentId": "31900112", "Score": "3", "OwnerUserId": "8922"}});