post_cb({"bq_ids": {"n4140": {"so_15894917_15895137_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 3919}, "so_15894917_15895137_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 3919}}, "n3337": {"so_15894917_15895137_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 3779}, "so_15894917_15895137_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 3779}}, "n4659": {"so_15894917_15895137_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 4805}, "so_15894917_15895137_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 4805}}}, "15919242": {"Id": "15919242", "PostTypeId": "2", "Body": "<p><strong>SOLUTION:</strong></p>\n<blockquote>\n<p id=\"so_15894917_15919242_0\">I figured out the problem, it was not easy. To learn from my error, I\n  will share the code, caused the failure.</p>\n<p id=\"so_15894917_15919242_1\">In the constructor I use an <code>sscanf</code> function call in improper way:</p>\n<pre><code>const char* sBuffer;\n// some stuff here that fills the sBuffer up\nsscanf(sBuffer, \"%X %X %X %X\", &amp;tags_[0], &amp;tags_[1], &amp;tags_[2], &amp;tags_[3]);\n</code></pre>\n<p id=\"so_15894917_15919242_2\">The array was defined in the singleton class as:</p>\n<pre><code>private:\n    char tags_[4];\n</code></pre>\n<p id=\"so_15894917_15919242_3\">Beware: the format codes awating specific type of variables to be able\n  to write the data in. For example: in my case the <code>tags_</code> array should\n  be an array of integers instead of array of chars. Since the singleton class \n  should store the <code>tags_</code>, after indexing the 2nd, 3rd and 4th element,\n  the <code>sscanf</code> function will write into an undefined place of memory,\n  something will be overwritten about the static class's data, which\n  caused multiple instancing of it, however: this can be avoided by\n  mutexing, but in that case the mutex object will be overwritten.\n  More infos about required types for (s)scanf can be found <a href=\"http://www.cplusplus.com/reference/cstdio/scanf/\" rel=\"nofollow\">here</a> and <a href=\"http://www.cplusplus.com/reference/cstdio/sscanf/\" rel=\"nofollow\">here</a>.</p>\n</blockquote>\n<p><strong>CONCLUSION:</strong></p>\n<blockquote>\n<p id=\"so_15894917_15919242_4\">Be smart and aware of using C-functions/low-level calls. Pay a lot of\n  attention on input parameters, not only their value, but their type\n  too. If you support other type as expected, the behaviour of your program will be\n  undefined, but you won't get compiler error: it is very hard to find out\n  that issue later on.</p>\n</blockquote>\n", "LastEditorUserId": "2218825", "LastActivityDate": "2013-04-15T09:05:44.260", "Score": "0", "CreationDate": "2013-04-10T07:10:42.550", "ParentId": "15894917", "CommentCount": "0", "OwnerUserId": "2218825", "LastEditDate": "2013-04-15T09:05:44.260"}, "15895137": {"Id": "15895137", "PostTypeId": "2", "Body": "<p>While this doesn't answer your particular question, it's still a solution to your overall problem: you don't need the mutex <em>at all.</em> The C++11 standard [stmt.dcl]\u00a74 specifies (when talking about <code>static</code> variables local to functions):</p>\n<blockquote>\n<p id=\"so_15894917_15895137_0\">If control enters the declaration concurrently while the variable is\n  being initialized, the concurrent execution shall wait for completion\n  of the initialization.<sup>88</sup> If control re-enters the declaration\n  recursively while the variable is being initialized, the behavior is\n  undefined.</p>\n</blockquote>\n<p>Where note 88 is:</p>\n<blockquote>\n<p id=\"so_15894917_15895137_1\">Note 88: The implementation must not introduce any deadlock around\n  execution of the initializer.</p>\n</blockquote>\n<p>In other words, the compiler introduces synchronisation for you; no need to do that manually.</p>\n", "LastActivityDate": "2013-04-09T06:49:18.350", "CommentCount": "6", "CreationDate": "2013-04-09T06:49:18.350", "ParentId": "15894917", "Score": "6", "OwnerUserId": "1782465"}, "15894917": {"ViewCount": "794", "Body": "<p>I am actually facing a huge problem: I have a singleton class. My program is a multi-threaded MFC, so the singleton's constructor can be called from different threads. I surrounded the singleton instance-getter function with a mutex to avoid deadlocks and multiple constructions. The call of the below meant function fails directly at the first time.</p>\n<p>The function looks like (LOG_MSG macro logs the given string into my log file):</p>\n<pre><code>MyClass&amp; MyClass::singleton ()\n{\n    LOG_MSG(\"MyClass::singleton -&gt; jump in\");\n\n    static CMutex oInitMutex;\n    try\n    {\n        CSingleLock oSingleLock((CSyncObject *) &amp;oInitMutex, TRUE);\n        LOG_MSG(\"!!! SINGLETON LOCK OKAY !!!\");\n        static MyClass oMyClassInstance;\n        LOG_MSG(\"!!! SINGLETON CONSTRUCTION OKAY !!!\");\n        return oMyClassInstance;\n    }\n    catch(...)\n    {\n        CString excMsg(\"Unexpected exception by creating MyClass singleton instance!\");\n        LOG_MSG(excMsg);\n        throw excMsg;\n    }\n}\n</code></pre>\n<p>I've figured out, that the construction of the singleton object will NOT fail (since we get the \"!!! SINGLETON CONSTRUCTION OKAY !!!\" message).</p>\n<p>Log output says:</p>\n<pre><code>09.04.2013 ;07:14:51:832;\"MyClass::singleton -&gt; jump in\"\n09.04.2013 ;07:14:51:841;\"!!! SINGLETON LOCK OKAY !!!\"\n... (constructor logs =&gt; NOTHING unexpected in it!!! everything runs fine, as they must!!!)\n09.04.2013 ;07:14:52:125;\"!!! SINGLETON CONSTRUCTION OKAY !!!\"\n09.04.2013 ;07:14:52:170;\"Unexpected exception by creating MyClass singleton instance!\"\n</code></pre>\n<p>What does it means? When would a <em>return</em> statement throw exception(s)??? Please help me resolve this matter...</p>\n", "AcceptedAnswerId": "15919242", "Title": "Singleton constructor fails c++ - what can be?", "CreationDate": "2013-04-09T06:37:29.703", "Id": "15894917", "CommentCount": "10", "PostTypeId": "1", "LastActivityDate": "2013-04-15T09:05:44.260", "Score": "1", "OwnerUserId": "2218825", "Tags": "<c++><exception><mfc><singleton><mutex>", "AnswerCount": "2"}});