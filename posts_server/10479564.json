post_cb({"bq_ids": {"n4140": {"so_10479564_10479674_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 5962}}, "n3337": {"so_10479564_10479674_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 5731}}, "n4659": {"so_10479564_10479674_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 7451}}}, "10479674": {"Id": "10479674", "PostTypeId": "2", "Body": "<p>From C++11 standard, 5.1.2.2 (shortened by me)</p>\n<blockquote>\n<p id=\"so_10479564_10479674_0\">The type of the <em>lambda-expression</em> (which is also the type of the closure object) is a unique, unnamed non-union class type - called the <em>closure type</em> - whose properties are described below. [More text follows]</p>\n</blockquote>\n<p>So, what others said, <code>QString</code> and the type of the lambda are incompatible.</p>\n", "LastActivityDate": "2012-05-07T09:28:11.617", "CommentCount": "0", "CreationDate": "2012-05-07T09:28:11.617", "ParentId": "10479564", "Score": "0", "OwnerUserId": "947836"}, "10479564": {"ViewCount": "1331", "Body": "<p>I've faced with problem while compiling lambda-function:</p>\n<pre><code>... (int level = 3) ...\nQString str = [level] {QString s;for(int i=0;i++&lt;level;s.append(\" \"));return s;};\n</code></pre>\n<p>Content of the error:</p>\n<pre><code>error: conversion from 'GainStatistic::getWidgetAndProps(QObject*, int)::&lt;lambda()&gt;' to non-scalar type 'QString' requested\n</code></pre>\n<p>I've tried this variant:</p>\n<pre><code>... (int level = 3) ...\nQString str ([level] {QString s;for(int i=0;i++&lt;level;s.append(\" \"));return s;});\n\nerror: no matching function for call to 'QString::QString(GainStatistic::getWidgetAndProps(QObject*, int)::&lt;lambda()&gt;)'\n</code></pre>\n<p>But lambda-expression in a function is simply value of some type? Is that right? Thus, <code>QString(lambda-that-returns-QString)</code> must call the <code>QString::QString(const QString&amp; ref)</code> constructor and this must work:</p>\n<pre><code>... (int level = 3) ...\nQString str([level] {const QString&amp; ref = \"123\";return ref;}); //leads to the same error\n</code></pre>\n<p>Another variant:</p>\n<pre><code>QString str = [level]-&gt;QString {QString s;for(int i=0;i++&lt;level;s.append(\" \"));return s;};\n\nerror: expected token ';' got 'str'\n</code></pre>\n<p>MinGW 4.6.1</p>\n", "AcceptedAnswerId": "10479585", "Title": "Lambda in C++0x: error: conversion from to non-scalar type requested", "CreationDate": "2012-05-07T09:19:47.360", "Id": "10479564", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-05-07T19:14:44.580", "LastEditorUserId": "29995", "LastActivityDate": "2012-05-07T19:14:44.580", "Score": "2", "OwnerUserId": "1064607", "Tags": "<c++><qt><lambda>", "AnswerCount": "3"}, "10479585": {"Id": "10479585", "PostTypeId": "2", "Body": "<p>You try to assign a lambda to a <code>QString</code>. What do you expect to happen? A lambda taking no arguments is a nullary function. You need to call it to get its return value. </p>\n<p>e.g.</p>\n<pre><code>int x = [] { return 23; }();\n                         ^^\n                        call\n</code></pre>\n<p>Also, thanks for showing me the syntax for a no-argument lambda. I didn't know this was possible. I'm also a little unsure if it is really legal.</p>\n<p><strong>Edit:</strong> It is legal. 5.1.2 </p>\n<pre><code>lambda-expression:\n    lambda-introducer lambda-declarator{opt} compound-statement\n\nlambda-declarator:\n    (parameter-declaration-clause) mutable{opt}\n</code></pre>\n", "LastEditorUserId": "105672", "LastActivityDate": "2012-05-07T09:33:46.450", "Score": "11", "CreationDate": "2012-05-07T09:21:32.307", "ParentId": "10479564", "CommentCount": "4", "OwnerUserId": "105672", "LastEditDate": "2012-05-07T09:33:46.450"}, "10479624": {"Id": "10479624", "PostTypeId": "2", "Body": "<p>Lambda's are anonymous functions with the basic structure <code>[capture](arguments){code}</code>. You don't pass an argument to your lambda. I think you want </p>\n<pre><code>QString str = [](int x){QString s;for(int i=0;i++&lt;x;s.append(\" \"));return s;} (level);\n//            ^^ lambda starts here                         argument to lambda ^^   \n</code></pre>\n", "LastActivityDate": "2012-05-07T09:24:38.077", "CommentCount": "0", "CreationDate": "2012-05-07T09:24:38.077", "ParentId": "10479564", "Score": "1", "OwnerUserId": "15416"}});