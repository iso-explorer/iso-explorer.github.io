post_cb({"bq_ids": {"n4140": {"so_16568920_16568969_0": {"length": 26, "quality": 1.0, "section_id": 7149}}, "n3337": {"so_16568920_16568969_0": {"length": 26, "quality": 1.0, "section_id": 6893}}, "n4659": {"so_16568920_16568969_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 8650}}}, "16568920": {"ViewCount": "617", "Body": "<p>I read this <a href=\"http://www.stroustrup.com/Programming/Solutions/Ch4/e4-5.cpp\" rel=\"nofollow\">code</a> (by Bjarne Stroustrup). I am confused... The <code>main</code> function body is not in the <code>{}</code>, and function doesn't return value (as <code>int</code>). And it works... Why?</p>\n<pre><code>#include \"std_lib_facilities.h\" \n\nint main()\ntry\n{\n    cout&lt;&lt; \"please enter two floating-point values separated by an operator\\n The operator can be + - * or / : \";\n    double val1 = 0;\n    double val2 = 0;\n    char op = 0;\n    while (cin&gt;&gt;val1&gt;&gt;op&gt;&gt;val2) {   // read number operation number\n        string oper;\n        double result;\n        switch (op) {\n        case '+':\n            oper = \"sum of \";\n            result = val1+val2; \n            break;\n        case '-':\n            oper = \"difference between \";\n            result = val1-val2; \n            break;\n        case '*':\n            oper = \"product of \";\n            result = val1*val2; \n            break;\n        case '/':\n            oper = \"ratio of\";\n            if (val2==0) error(\"trying to divide by zero\");\n            result = val1/val2; \n            break;\n        //case '%':\n        //  oper = \"remainder of \";\n        //  result = val1%val2; \n        //  break;\n        default:\n                error(\"bad operator\");\n        }\n        cout &lt;&lt; oper &lt;&lt; val1 &lt;&lt; \" and \" &lt;&lt; val2 &lt;&lt; \" is \" &lt;&lt; result &lt;&lt; '\\n';\n        cout &lt;&lt; \"Try again: \";\n    }\n}\ncatch (runtime_error e) {   // this code is to produce error messages; it will be described in Chapter 5\n    cout &lt;&lt; e.what() &lt;&lt; '\\n';\n    keep_window_open(\"~\");  // For some Windows(tm) setups\n}\ncatch (...) {   // this code is to produce error messages; it will be described in Chapter 5\n    cout &lt;&lt; \"exiting\\n\";\n    keep_window_open(\"~\");  // For some Windows(tm) setups\n}\n</code></pre>\n", "AcceptedAnswerId": "16568969", "Title": "Curly brackets and the returned value in the main method", "CreationDate": "2013-05-15T15:17:47.337", "LastActivityDate": "2013-05-15T15:23:14.727", "CommentCount": "0", "LastEditDate": "2013-05-15T15:23:14.727", "PostTypeId": "1", "Tags": "<c++>", "Id": "16568920", "AnswerCount": "1", "Score": "4", "OwnerUserId": "1306132", "ClosedDate": "2013-05-15T15:21:45.977", "LastEditorUserId": "13800"}, "16568969": {"Id": "16568969", "PostTypeId": "2", "Body": "<p>That code is using a <a href=\"https://stackoverflow.com/questions/5612486/when-is-a-function-try-block-useful\">Function Try Block</a>, which is a special syntax allowing to embed the whole body of a function in a try/catch block (mostly useful for class constructors, in order to catch exceptions thrown by the constructors of base or member sub-objects).</p>\n<p>Moreover, <code>main()</code> is the only value-returning function which is not required to return a value explicitly. When no return value is specified, <code>0</code> is assumed.</p>\n<p>Per paragraph 3.6.1/5 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16568920_16568969_0\">A return statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic\n  storage duration) and calling <code>std::exit</code> with the return value as the argument. If control reaches the end\n  of <code>main</code> without encountering a return statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-15T15:20:00.627", "Score": "6", "CreationDate": "2013-05-15T15:20:00.627", "ParentId": "16568920", "CommentCount": "9", "OwnerUserId": "1932150", "LastEditDate": "2017-05-23T12:29:22.727"}});