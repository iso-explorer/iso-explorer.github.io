post_cb({"13515524": {"Id": "13515524", "PostTypeId": "2", "Body": "<p>You'll find that, in the standard:</p>\n<h3>5 Expressions [expr]</h3>\n<blockquote>\n<p id=\"so_13515434_13515524_0\">58) The precedence of operators is not directly specified, but it can be derived from the syntax. (note)</p>\n</blockquote>\n<p>This means precedence tables are inferred, not specified. As long as they behave the same, you can say that both are right. So, even if a precedence table places them as having the same precedence, or places the ternary above the assignment operator, in practice the same thing happens, because of the syntax.</p>\n<p>Note that <strong>associativity</strong> plays a bigger role here (this is also derived from the syntax).</p>\n<p>Even if you assume that they have the same precedence:</p>\n<pre><code>a = b ? c : d;\n</code></pre>\n<p>will be treated as <code>a = (b ? c : d)</code> because they are both <strong>right-to-left associative</strong>.</p>\n", "LastEditorUserId": "219162", "LastActivityDate": "2017-02-14T17:40:59.377", "Score": "7", "CreationDate": "2012-11-22T15:09:43.613", "ParentId": "13515434", "CommentCount": "5", "LastEditDate": "2017-02-14T17:40:59.377", "OwnerUserId": "673730"}, "13519968": {"Id": "13519968", "PostTypeId": "2", "Body": "<p>The answer for C++ is that <code>?:</code> and <code>=</code> have the same precedence. Yes, almost every C++ operator precedence table out there is wrong.</p>\n<p>In C it doesn't matter whether <code>?:</code> is higher than <code>=</code> or not, because in C the <code>?:</code> operator is not allowed to evaluate to an l-value, which is what it would have to do if precedence were to influence the behavior (given that they are already RTL associative). See the discussion under Luchian Crigore's answer for example.</p>\n<p>Perhaps this error is so widespread because early C++ operator precedence tables may have been copied and extended from C tables. And perhaps the error has persisted because the only counterexample - expressions of the form <code>a?b:c=d</code> - are rarely used. Perhaps.</p>\n", "LastEditorUserId": "827280", "LastActivityDate": "2013-08-28T12:35:07.287", "Score": "6", "CreationDate": "2012-11-22T21:05:37.393", "ParentId": "13515434", "CommentCount": "0", "LastEditDate": "2013-08-28T12:35:07.287", "OwnerUserId": "827280"}, "13515434": {"ViewCount": "1837", "Body": "<p>Almost all C/C++ operator precedence tables I have consulted list the ternary conditional operator as having higher precedence than the assignment operators. There are a few tables, however, such as the one on <a href=\"http://en.wikipedia.org/wiki/Operators_in_C_and_C++#Operator_precedence\">wikipedia</a>, and the one at <a href=\"http://cpp.operator-precedence.com/\">operator-precedence.com</a>, that place them on the same precedence level. Which is it, higher or same?</p>\n", "AcceptedAnswerId": "13519968", "Title": "Does the C/C++ ternary operator actually have the same precedence as assignment operators?", "CreationDate": "2012-11-22T15:04:12.543", "Id": "13515434", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-02-14T17:40:59.377", "Score": "7", "OwnerUserId": "827280", "Tags": "<c++><c><ternary-operator><operator-precedence>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_13515434_13515524_0": {"length": 8, "quality": 0.8, "section_id": 5934}}, "n3337": {"so_13515434_13515524_0": {"length": 8, "quality": 0.8, "section_id": 5706}}, "n4659": {"so_13515434_13515524_0": {"length": 8, "quality": 0.8, "section_id": 7418}}}, "13515505": {"Id": "13515505", "PostTypeId": "2", "Body": "<p>In the C++ grammar,</p>\n<pre>\nassignment-expression:\n    conditional-expression\n    logical-or-expression assignment-operator initializer-clause\n    throw-expression\n\nconditional-expression:\n    logical-or-expression\n    logical-or-expression ? expression : assignment-expression\n\ninitializer-clause:\n    assignment-expression\n    braced-init-list\n</pre>\n<p>could be combined to</p>\n<pre>\nassignment-expression:\n    logical-or-expression\n    logical-or-expression ? expression : assignment-expression\n    logical-or-expression assignment-operator assignment-expression\n    logical-or-expression assignment-operator initializer-clause\n    throw-expression\n</pre>\n<p>If only looking at <code>=</code> and <code>?:</code>, and if ignoring the inner expression between <code>?</code> and <code>:</code>, this clearly gives <code>?:</code> and <code>=</code> the exact same precedence.</p>\n<p>This is different from the C grammar, in which neither <code>?:</code>'s left nor its right operand can have an assignment operator as its topmost operator.</p>\n<pre>\nassignment-expression:\n    conditional-expression\n    unary-expression assignment-operator assignment-expression\n\nconditional-expression:\n    logical-OR-expression\n    logical-OR-expression ? expression : conditional-expression\n</pre>\n<p>So for C, it makes sense to give them different precedence levels.</p>\n<p>That said, precedence levels are only an approximation of what the standard actually says, there will be cases for any precedence levels you choose that show the levels to be misleading or just plain wrong. Depending on your interpretation, the inner expression of <code>?:</code> may be one of them, it is for me.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2012-11-23T08:29:45.140", "Score": "12", "CreationDate": "2012-11-22T15:08:45.703", "ParentId": "13515434", "CommentCount": "10", "LastEditDate": "2012-11-23T08:29:45.140", "OwnerUserId": "743382"}});