post_cb({"44618474": {"ParentId": "44618373", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_44618373_44618474_0\">Can I define a type to use as the underlying type of an enumeration?</p>\n</blockquote>\n<p>You can only use integral types to define <code>enum</code>s, not any old type.</p>\n<p>For example, you can use</p>\n<pre><code>enum E : char {\n    A, B, C\n};\n</code></pre>\n<p>to indicate the value of <code>E</code> will be of type <code>char</code>. But you can't use</p>\n<pre><code>enum E : S {\n    A, B, C\n};\n</code></pre>\n<p>From the <a href=\"https://timsong-cpp.github.io/cppwp/n3337/basic.fundamental#7\" rel=\"nofollow noreferrer\">C++11 Standard, 3.9.1/7</a>:</p>\n<blockquote>\n<p id=\"so_44618373_44618474_1\">Types <code>bool</code>, <code>char</code>, <code>char16_t</code>, <code>char32_t</code>, <code>wchar_t</code>, and the signed and unsigned integer types are collectively called integral types. A synonym for integral type is integer type.</p>\n</blockquote>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2017-06-18T19:21:13.123", "Id": "44618474", "Score": "2", "CreationDate": "2017-06-18T18:59:51.630", "LastActivityDate": "2017-06-18T19:21:13.123"}, "44618431": {"ParentId": "44618373", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_44618373_44618431_0\"><strong>std::is_integral</strong> \n  checks whether T is an integral type. Provides the member constant value which is equal to true, if T is the type <code>bool</code>, <code>char</code>, <code>char16_t</code>, <code>char32_t</code>, <code>wchar_t</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>, or any implementation-defined extended integer types, including any signed, unsigned, and cv-qualified variants. Otherwise, value is equal to false. </p>\n</blockquote>\n<p>This is an excerpt from <a href=\"http://en.cppreference.com/w/cpp/types/is_integral\" rel=\"nofollow noreferrer\">here</a>.\nThis means that an <code>enum</code> must be using one of the following types:</p>\n<p><code>bool</code>, <code>char</code>, <code>char16_t</code>, <code>char32_t</code>, <code>wchar_t</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>.</p>\n", "OwnerUserId": "6499716", "PostTypeId": "2", "Id": "44618431", "Score": "2", "CreationDate": "2017-06-18T18:55:26.040", "LastActivityDate": "2017-06-18T18:55:26.040"}, "bq_ids": {"n4140": {"so_44618373_44618474_1": {"section_id": 7216, "quality": 0.9473684210526315, "length": 18}, "so_44618373_44618474_0": {"section_id": 24, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_44618373_44618474_1": {"section_id": 6960, "quality": 0.9473684210526315, "length": 18}, "so_44618373_44618474_0": {"section_id": 21, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_44618373_44618474_1": {"section_id": 8725, "quality": 1.0, "length": 19}, "so_44618373_44618474_0": {"section_id": 24, "quality": 0.5714285714285714, "length": 4}}}, "44618373": {"CommentCount": "0", "ViewCount": "209", "CreationDate": "2017-06-18T18:49:10.760", "LastActivityDate": "2017-06-18T19:21:13.123", "Title": "Custom enum underlying type", "AcceptedAnswerId": "44618474", "PostTypeId": "1", "Id": "44618373", "Score": "5", "Body": "<p>Can I define a type to use as the underlying type of an enumeration? Something like this:</p>\n<pre><code>struct S {\n    S(int i) : value(i) {}\n    operator int() { return value; }\n\n    int value;\n};\n\nenum E : S {\n    A, B, C\n};\n</code></pre>\n<p>The error message tells me that S must be an integral type. I have tried to specialize <code>std::is_integral</code> like the following, but it seems that in this context, \"integral type\" really means one of the fundamental types.</p>\n<pre><code>namespace std {\n    template&lt;&gt;\n    struct is_integral&lt;S&gt; : public true_type {};\n}\n</code></pre>\n<p>So, using any version of C++, is there a way to make a custom type pass off as an integral type?</p>\n", "Tags": "<c++><enums>", "OwnerUserId": "3854570", "AnswerCount": "2"}});