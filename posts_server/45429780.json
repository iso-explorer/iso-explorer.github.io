post_cb({"45429780": {"CommentCount": "3", "ViewCount": "122", "PostTypeId": "1", "LastEditorUserId": "3305546", "CreationDate": "2017-08-01T05:45:09.613", "LastActivityDate": "2017-08-01T06:30:54.280", "Title": "Is right shifting undefined behavior for negative number in cpp and in java?", "AcceptedAnswerId": "45429850", "LastEditDate": "2017-08-01T05:49:41.370", "Id": "45429780", "Score": "-8", "Body": "<p>To optimize my cpp code, I'm trying to use Right Shifting in some case. Here is an example:<br/></p>\n<pre><code>int main()\n{\n    int i = (1 - 2) &gt;&gt; 31;  // sizeof(int) == 4\n    ...\n    ...\n}\n</code></pre>\n<p>I've printed the  <code>i</code> and I got <code>-1</code>. It means that it will use <code>1</code> instead of <code>0</code> to fill in the empty position if the number is negative. In other words, <code>-1 &gt;&gt; 31</code> works as below:<br/></p>\n<pre><code>1111...1    &lt;--- the result of (1 - 2), which is -1\n1111...1    &lt;--- -1 &gt;&gt; 31, 1 is used to fill in the empty position\n</code></pre>\n<p>I just want to know if this behavior is clearly defined or not?<br/></p>\n<p>If it is UB in cpp, how about in Java?</p>\n", "Tags": "<java><c++><undefined-behavior><c++1z>", "OwnerUserId": "3305546", "AnswerCount": "3"}, "45430473": {"ParentId": "45429780", "CommentCount": "1", "Body": "<p>By default it is signed int. The range is -32767 to 32767, bit wise range -111111111111111 to +111111111111111 the very first bit on the left acts as negative or positive indicator. And all the arithmetic operation will be done in 2's complement method. In general negative int are represents in two complements method i.e take you example how -1 is represent. </p>\n<pre><code>4 Bytes = 32 bits\n0000 0000 0000 0000 0000 0000 0000 0000\nhow represent 1\n0000 0000 0000 0000 0000 0000 0000 0001\nThen we invert the digits. 0 becomes 1, 1 becomes 0.\n1111 1111 1111 1111 1111 1111 1111 1110\nThen we add 1.\n1111 1111 1111 1111 1111 1111 1111 1111\nThis is how -1 is represented\n</code></pre>\n<p>The right-shift of a negative number is defined to shift in 1s to the highest bit positions, then on a 2s complement representation it will behave as an arithmetic shift - the result of right-shifting by N will be the same as dividing by 2N, rounding toward negative infinity. So shifting of -1 is -1\nnow take an other number \nFor example, \nif you have the 8-bit 2s complement binary number let represent -3</p>\n<pre><code>    0000 0011\n    Then we invert the digits.\n    1111 1100\n    Then we add 1. \n    1111 1101\n</code></pre>\n<p>11111101 representing -3 in decimal, and you perform an arithmetic right shift by 1 to give 11111110 representing -2 in decimal, this is the same as dividing -3 by 2^1, giving -1.5 which rounds towards negative infinity resulting in -2.  </p>\n", "OwnerUserId": "8376192", "PostTypeId": "2", "Id": "45430473", "Score": "1", "CreationDate": "2017-08-01T06:30:54.280", "LastActivityDate": "2017-08-01T06:30:54.280"}, "45429850": {"ParentId": "45429780", "CommentCount": "4", "Body": "<p><strong>Yes</strong>. It is implementation-defined.</p>\n<p>According to  <strong>C++03 5.8/3</strong> which defines right-shifting:</p>\n<blockquote>\n<p id=\"so_45429780_45429850_0\">The value of <strong>E1 &gt;&gt; E2 is E1 right-shifted E2 bit positions</strong>. If E1 has\n  an unsigned type or if E1 has a signed type and a nonnegative value,\n  the value of the result is the integral part of the quotient of E1\n  divided by the quantity 2 raised to the power E2. <strong>If E1 has a signed\n  type and a negative value, the resulting value is\n  implementation-defined.</strong></p>\n</blockquote>\n<p>For more information, see this <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/VOID+INT34-CPP.+Do+not+shift+a+negative+number+of+bits+or+more+bits+than+exist+in+the+operand\" rel=\"nofollow noreferrer\">link</a>.</p>\n", "OwnerUserId": "6935629", "PostTypeId": "2", "Id": "45429850", "Score": "1", "CreationDate": "2017-08-01T05:50:24.237", "LastActivityDate": "2017-08-01T05:50:24.237"}, "bq_ids": {"n4140": {"so_45429780_45429894_3": {"section_id": 3291, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429894_4": {"section_id": 3291, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429850_0": {"section_id": 6148, "quality": 0.7777777777777778, "length": 21}, "so_45429780_45429894_1": {"section_id": 6148, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_45429780_45429894_3": {"section_id": 5913, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429894_4": {"section_id": 5913, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429850_0": {"section_id": 5911, "quality": 0.7777777777777778, "length": 21}, "so_45429780_45429894_1": {"section_id": 5911, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_45429780_45429894_3": {"section_id": 4053, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429894_4": {"section_id": 4053, "quality": 0.5555555555555556, "length": 5}, "so_45429780_45429850_0": {"section_id": 7644, "quality": 0.7777777777777778, "length": 21}, "so_45429780_45429894_1": {"section_id": 7644, "quality": 0.5714285714285714, "length": 4}}}, "45429894": {"ParentId": "45429780", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In <strong>Java</strong>, behavior of <code>&gt;&gt;</code> is <strong>well-defined</strong> for negative numbers (see below).</p>\n<p>In <strong>C++</strong>, behavior of <code>&gt;&gt;</code> is <strong>undefined</strong> for negative numbers (see <a href=\"https://stackoverflow.com/a/45429850/5221149\">answer by rsp</a>).</p>\n<hr>\n<p>Quoting Java Language Specification, <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.19\" rel=\"nofollow noreferrer\">\u00a715.19. Shift Operators</a>:</p>\n<blockquote>\n<p id=\"so_45429780_45429894_0\">The value of <em>n <strong>&gt;&gt;</strong> s</em> is <em>n</em> right-shifted <em>s</em> bit positions <strong>with sign-extension</strong>. The resulting value is <em>floor(n / 2<sup>s</sup>)</em>. For non-negative values of <em>n</em>, this is equivalent to truncating integer division, as computed by the integer division operator /, by two to the power <em>s</em>.</p>\n<p id=\"so_45429780_45429894_1\">The value of <em>n <strong>&gt;&gt;&gt;</strong> s</em> is <em>n</em> right-shifted <em>s</em> bit positions <strong>with zero-extension</strong>, where:</p>\n<ul>\n<li><p id=\"so_45429780_45429894_2\">If <em>n</em> is positive, then the result is the same as that of <em>n &gt;&gt; s</em>.</p></li>\n<li><p id=\"so_45429780_45429894_3\">If <em>n</em> is negative and the type of the left-hand operand is <code>int</code>, then the result is equal to that of the expression <em>(n &gt;&gt; s) + (2 &lt;&lt; ~s)</em>.</p></li>\n<li><p id=\"so_45429780_45429894_4\">If <em>n</em> is negative and the type of the left-hand operand is <code>long</code>, then the result is equal to that of the expression <em>(n &gt;&gt; s) + (2L &lt;&lt; ~s)</em>.</p></li>\n</ul>\n</blockquote>\n</hr>", "OwnerUserId": "5221149", "LastEditorUserId": "5221149", "LastEditDate": "2017-08-01T06:06:08.980", "Id": "45429894", "Score": "0", "CreationDate": "2017-08-01T05:53:18.893", "LastActivityDate": "2017-08-01T06:06:08.980"}});