post_cb({"39140477": {"ParentId": "39109710", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>(Word of caution: I'm not very familiar with the new concepts yet, but the following analysis seems to be correct). First you need to start with the functional-cast expression <code>Z(1);</code>. Note that this <em>prvalue</em> expression is said to initialize some <em>result object</em> using <em>direct-initialization</em>. <em>Which</em> this object is, is left unspecified and decided later, <em>not</em> by this functional-cast expression!</p>\n<p>Now, about result objects of prvalues</p>\n<blockquote>\n<p id=\"so_39109710_39140477_0\">The result object of a prvalue is the object initialized by the prvalue; ... [... For a discarded prvalue, a temporary object is materialized; see Clause [expr]. ... ]</p>\n</blockquote>\n<p>Let's first make an example for the case <code>Z(1);</code> which should help understand the concept. This is an expression statement, which is a <em>discarded value</em> expression. For such expressions, a rule says</p>\n<blockquote>\n<p id=\"so_39109710_39140477_1\">... If the expression is a prvalue ..., the temporary materialization conversion ([conv.rval]) is applied.</p>\n</blockquote>\n<p>And whenever this \"temporary materialization\" conversion is applied, a temporary <em>object</em> is created and initialized <em>from that prvalue</em>. </p>\n<blockquote>\n<p id=\"so_39109710_39140477_2\">This conversion initializes a temporary object ([class.temporary]) of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object</p>\n</blockquote>\n<p>Wow, all this is needed for a simple statement like <code>Z(1);</code>. Now about your case, <code>Z a3 = Z(1);</code>. For this, the <em>result object</em> is more directly specified by 8.6p17</p>\n<blockquote>\n<p id=\"so_39109710_39140477_3\">If the initializer expression is a prvalue and the cv-unqualified version of the source type is the same class as the class of the destination, the initializer expression is used to initialize the destination object.</p>\n</blockquote>\n<p>Viola, there we have an expression whose semantics is \"direct-initialize a yet unknown object X by 1\", and then another rule supplies this object \"X\". In particular, the pre-C++17 model that each class-prvalue epxression directly creates objects is outdated. This in particular means that there is no copy constructor or move constructor involved, but your code is <em>exactly equivalent</em> to <code>Z a3(1)</code>, as far as I can see.</p>\n", "OwnerUserId": "34509", "LastEditorUserId": "34509", "LastEditDate": "2016-08-25T08:52:15.347", "Id": "39140477", "Score": "2", "CreationDate": "2016-08-25T08:39:07.577", "LastActivityDate": "2016-08-25T08:52:15.347"}, "39109761": {"ParentId": "39109710", "PostTypeId": "2", "CommentCount": "20", "Body": "<p><code>Z(1)</code> will direct-initialize a prvalue. The prvalue will then be used to initialize an object. By the <a href=\"https://stackoverflow.com/a/38043447/734069\">rules of guaranteed elision</a>, there is no temporary-followed-by-copy. The prvalue initializes the object directly. Therefore, <code>Z a3 = Z(1);</code> is <em>exactly equivalent</em> to <code>Z a3(1);</code>.</p>\n<p>In pre-C++17, this would perform direct initialization of a prvalue temporary, followed by a (almost certainly elided) copy of the temporary into the object <code>a3</code>. Whether the copy is elided or not, the initialization of the prvalue is via direct initialization. The initialization of <code>a3</code> is by copy-initialization, but this is through the <em>copy constructor</em>, which is not <code>explicit</code>.</p>\n", "OwnerUserId": "734069", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:33:45.213", "Id": "39109761", "Score": "8", "CreationDate": "2016-08-23T20:01:48.640", "LastActivityDate": "2016-08-23T20:24:38.090"}, "39109943": {"ParentId": "39109710", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>It's talking about <code>Z(1)</code>. [dcl.init]/16:</p>\n<blockquote>\n<p id=\"so_39109710_39109943_0\">The initialization that occurs in [...] functional notation type\n  conversions (5.2.3) [...] is called <em>direct-initialization</em>.</p>\n</blockquote>\n<p>The prvalue is then used to copy-initialize <code>z</code>, which is just fine, guaranteed elision or not - <code>Z</code>'s copy/move constructors aren't <code>explicit</code> anyway, so the initialization is fine even without the guaranteed elision in C++17.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2016-08-25T10:36:56.003", "Id": "39109943", "Score": "4", "CreationDate": "2016-08-23T20:14:05.733", "LastActivityDate": "2016-08-25T10:36:56.003"}, "bq_ids": {"n4140": {"so_39109710_39140477_1": {"section_id": 6169, "quality": 0.7142857142857143, "length": 5}, "so_39109710_39109943_0": {"section_id": 3295, "quality": 0.8, "length": 8}, "so_39109710_39140477_3": {"section_id": 3296, "quality": 0.875, "length": 14}}, "n3337": {"so_39109710_39140477_1": {"section_id": 3166, "quality": 0.5714285714285714, "length": 4}, "so_39109710_39109943_0": {"section_id": 3165, "quality": 0.8, "length": 8}, "so_39109710_39140477_3": {"section_id": 3166, "quality": 0.875, "length": 14}}, "n4659": {"so_39109710_39140477_1": {"section_id": 4087, "quality": 0.8571428571428571, "length": 6}, "so_39109710_39140477_0": {"section_id": 8742, "quality": 0.8125, "length": 13}, "so_39109710_39140477_3": {"section_id": 4058, "quality": 1.0, "length": 16}, "so_39109710_39109943_0": {"section_id": 4057, "quality": 0.7, "length": 7}, "so_39109710_39140477_2": {"section_id": 15, "quality": 0.9, "length": 18}}}, "39109710": {"CommentCount": "12", "AcceptedAnswerId": "39109761", "CreationDate": "2016-08-23T19:58:58.050", "LastActivityDate": "2016-08-25T10:36:56.003", "PostTypeId": "1", "ViewCount": "234", "FavoriteCount": "0", "Title": "How is the initialization below well-formed?", "Id": "39109710", "Score": "5", "Body": "<p>The example in <a href=\"http://eel.is/c++draft/class.conv.ctor#2\">[class.conv.ctor]/2</a> contains the following initialization:</p>\n<pre><code>Z a3 = Z(1);    // OK: direct initialization syntax used\n</code></pre>\n<p>How is this considered a direct-initialization syntax?</p>\n", "Tags": "<c++><initialization><language-lawyer><c++1z>", "OwnerUserId": "2548699", "AnswerCount": "3"}});