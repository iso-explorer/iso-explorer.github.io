post_cb({"37074561": {"CommentCount": "17", "ViewCount": "59", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-05-06T14:09:21.827", "LastActivityDate": "2016-05-06T17:46:53.093", "Title": "Template SFINAE Within conditional_t", "LastEditDate": "2017-05-23T11:52:43.660", "Id": "37074561", "Score": "1", "Body": "<p>I have simplified the <a href=\"https://stackoverflow.com/a/87846/2642059\">solution here</a> to help me determine if a class has a member function:</p>\n<pre><code>template&lt;typename T&gt;\nstruct HasTest{\n    template&lt;typename R, typename S = decltype(declval&lt;R&gt;().test())&gt; static true_type Test(R*);\n    template&lt;typename R&gt; static false_type Test(...);\n    using def = decltype(Test&lt;T&gt;(0));\n};\n</code></pre>\n<p>I need to use <code>HasTest&lt;T&gt;::def::value</code> in the condition of a <a href=\"http://en.cppreference.com/w/cpp/types/conditional\" rel=\"nofollow noreferrer\"><code>conditional_t</code></a>. The problem is I have to do this with quite a number of functions, and since I need to declare a struct per function I was hoping to find a way to do the <a href=\"https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error\" rel=\"nofollow noreferrer\">Substitution Fail Is Not An Error(SFINAE)</a> within the condition. Something like:</p>\n<pre><code>conditional_t&lt;struct { template&lt;typename R, typename S = decltype(declval&lt;R&gt;().test())&gt; static true_type Test(R*); template&lt;typename R&gt; static false_type Test(...); using def = decltype(Test&lt;T&gt;(0)); }::def, true_type, false_type&gt;\n</code></pre>\n<p>That example clearly doesn't compile but hopefully it makes what I'm trying to do clear.</p>\n<p>Right now I have to set up a struct for each method I plan to test for in <code>namespace details</code> and then use them in my <code>conditional_t</code>. This introduces pollution and separates the inner workings of the SFINAE from the <code>conditional_t</code>s it's used in.</p>\n<p>Does C++14/17 provide me an alternative way to do this, or is there a way for me to declare and use an anonymous <code>struct</code> in the <code>conditional_t</code> condition?</p>\n<p>I've created a simple test <a href=\"http://ideone.com/G2U4B1\" rel=\"nofollow noreferrer\">here</a> that you're welcome to try things out on.</p>\n", "Tags": "<c++><conditional><metaprogramming><sfinae><anonymous-class>", "OwnerUserId": "2642059", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37074561_37075933_0": {"section_id": 55, "quality": 1.0, "length": 9}}, "n3337": {"so_37074561_37075933_0": {"section_id": 50, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_37074561_37075933_0": {"section_id": 57, "quality": 1.0, "length": 9}}}, "37075933": {"ParentId": "37074561", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-05-06T15:17:22.560", "Score": "0", "LastEditorUserId": "2352671", "LastEditDate": "2016-05-06T17:46:53.093", "Id": "37075933", "OwnerUserId": "2352671", "Body": "<p>According to the draft standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\" rel=\"nofollow\">N4582</a> <em>\u00a714.1/p2 Template parameters [temp.param]</em> <strong>(Emphasis Mine)</strong>:</p>\n<blockquote>\n<p id=\"so_37074561_37075933_0\">A storage class shall not be specified in a template-parameter\n  declaration. <strong>Types shall not be defined in a template-parameter\n  declaration.</strong></p>\n</blockquote>\n<p>Consequently, you can't have something like:</p>\n<pre><code>conditional_t&lt;bool, struct Foo {...}&gt;\n</code></pre>\n<p>And frankly I don't find a good reason to allow such constructs in C++, even more if they are unnamed classes (e.g., think of the mangling issues).</p>\n", "LastActivityDate": "2016-05-06T17:46:53.093"}});