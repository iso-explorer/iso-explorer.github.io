post_cb({"16621661": {"ParentId": "16619048", "CommentCount": "0", "Body": "<p>The error that g++ 4.8.0 gives is basically:</p>\n<blockquote>\n<p id=\"so_16619048_16621661_0\">decltype evaluates to <code>phx::actor&lt;proto::expression&gt;&amp;</code>, which is not a class or enumeration type</p>\n</blockquote>\n<p>In order to use <code>::</code> you need to have an unqualified type so you must remove the reference:</p>\n<pre><code>#include &lt;type_traits&gt;\ntypedef std::remove_reference&lt;decltype(proto::child_c&lt;0&gt;(f))&gt;::type::proto_tag td;\n</code></pre>\n<p>I believe you could also use:</p>\n<pre><code>typedef proto::result_of::child_c&lt;decltype(f),0&gt;::type::proto_tag td;\n</code></pre>\n<p>Using <code>proto::tag_of</code> you don't need to worry about the possible reference since it is removed when it's necessary:</p>\n<pre><code>template&lt;typename Expr&gt;\nstruct tag_of\n{\n    typedef typename Expr::proto_tag type;\n};\n\ntemplate&lt;typename Expr&gt;\nstruct tag_of&lt;Expr &amp;&gt;\n{\n    typedef typename Expr::proto_tag type;\n};\n</code></pre>\n", "OwnerUserId": "2396235", "PostTypeId": "2", "Id": "16621661", "Score": "3", "CreationDate": "2013-05-18T07:07:08.837", "LastActivityDate": "2013-05-18T07:07:08.837"}, "16619048": {"CommentCount": "0", "ViewCount": "221", "CreationDate": "2013-05-17T23:02:39.447", "LastActivityDate": "2013-05-18T07:07:08.837", "Title": "Obtaining the tag type of a Boost Proto child expression", "AcceptedAnswerId": "16621661", "PostTypeId": "1", "Id": "16619048", "Score": "1", "Body": "<p>Of a Boost Proto expression, when should I not expect a <code>proto_tag</code> member? I can enquire regarding the tag type of a placeholder, say, using either of the following methods:</p>\n<pre><code>typedef proto::tag_of&lt;decltype(_1)&gt;::type ta;\ntypedef decltype(_1)::proto_tag           tb;\n</code></pre>\n<p>But if I ask about the tag type of an expression's <em>child</em>, it appears that the <code>proto_tag</code> member is absent; and the third line of the following code gives an error: </p>\n<pre><code>auto f = _1 + _2;\ntypedef proto::tag_of&lt;decltype(proto::child_c&lt;0&gt;(f))&gt;::type tc;\ntypedef decltype(proto::child_c&lt;0&gt;(f))::proto_tag           td; // error\n</code></pre>\n<p>Clang and GCC's errors report that the type in question: <em>is not a class, namespace, or scoped enumeration</em>. I use Clang 3.2, GCC 4.7.2, and Boost 1.53.</p>\n", "Tags": "<c++><boost><typetraits><boost-proto>", "OwnerUserId": "2023370", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16619048_16621661_0": {"section_id": 4701, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_16619048_16621661_0": {"section_id": 4510, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_16619048_16621661_0": {"section_id": 6097, "quality": 0.6666666666666666, "length": 4}}}});