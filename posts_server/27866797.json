post_cb({"bq_ids": {"n4140": {"so_27866797_27866956_0": {"section_id": 3260, "quality": 0.9, "length": 27}}, "n3337": {"so_27866797_27866956_0": {"section_id": 3132, "quality": 0.9, "length": 27}}, "n4659": {"so_27866797_27866956_0": {"section_id": 4018, "quality": 0.8, "length": 24}}}, "27866961": {"ParentId": "27866797", "CommentCount": "1", "Body": "<p>The problem is in the definition for the method: </p>\n<pre><code>void add(int key,node*curr=root);\n</code></pre>\n<p><code>root</code> isn't defined in the context you're using it. If you mean the member variable <code>node* root</code>, there is no way to default to member variables in the member functions, but you could set NULL(0) as the default and check it in the definition.</p>\n<pre><code>void bst::add ( int key,node*curr=NULL)\n{\n     if(curr==NULL) {\n         curr= this-&gt;root;\n     }\n}\n</code></pre>\n", "OwnerUserId": "1701194", "PostTypeId": "2", "Id": "27866961", "Score": "4", "CreationDate": "2015-01-09T18:31:55.107", "LastActivityDate": "2015-01-09T18:31:55.107"}, "27866938": {"ParentId": "27866797", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Use like this:\n<code>\nconst node* root = NULL;\nvoid add(int key,node*curr=root);\n</code></p>\n<p>You can check the actual running example here:\n<a href=\"http://ideone.com/tJ1r29\" rel=\"nofollow\">http://ideone.com/tJ1r29</a></p>\n", "OwnerUserId": "1646996", "LastEditorUserId": "1646996", "LastEditDate": "2015-01-09T18:38:02.020", "Id": "27866938", "Score": "0", "CreationDate": "2015-01-09T18:30:26.067", "LastActivityDate": "2015-01-09T18:38:02.020"}, "27867113": {"ParentId": "27866797", "CommentCount": "0", "Body": "<p>There are two ways.</p>\n<p>Either use a \"magic\" default:</p>\n<pre><code>void add(int key, node* curr = NULL)\n{\n    if (curr == NULL)\n        curr = root;\n    // ...\n}\n</code></pre>\n<p>or ditch the default altogether and use an overload:</p>\n<pre><code>void add(int key, node* curr)\n{\n    // ...\n}\n\nvoid add(int key)\n{\n    add(key, root);\n}\n</code></pre>\n<p>My personal preference is the latter, but you shouldn't really expose the node type in the tree's interface at all, as that would let users of the tree ruin its balancing.</p>\n", "OwnerUserId": "404970", "PostTypeId": "2", "Id": "27867113", "Score": "2", "CreationDate": "2015-01-09T18:40:58.487", "LastActivityDate": "2015-01-09T18:40:58.487"}, "27866956": {"ParentId": "27866797", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>According to the C++ Standard (8.3.6 Default arguments)</p>\n<blockquote id=\"so_27866797_27866956_0\">\n<ol start=\"9\">\n<li>...Similarly, <strong>a non-static member shall not be used in a default argument</strong>, even if it is not evaluated, unless it appears as the\n  id-expression of a class member access expression (5.2.5) or unless it\n  is used to form a pointer to member (5.3.1). [ Example: the\n  declaration of X::mem1() in the following example is ill-formed\n  because no object is supplied for the non-static member X::a used as\n  an initializer.</li>\n</ol>\n</blockquote>\n<pre><code>int b;\nclass X {\nint a;\nint mem1(int i = a); // error: non-static member a\n// used as default argument\nint mem2(int i = b); // OK; use X::b\nstatic int b;\n};\n</code></pre>\n<p>You could overload function <code>add</code>. For example</p>\n<pre><code>void add( int key );\n\nvoid add( int key, node *curr );\n</code></pre>\n<p>The first function would use <code>root</code> by default. It could simply call the second function passing as the second argument the node root.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-01-09T18:37:58.357", "Id": "27866956", "Score": "3", "CreationDate": "2015-01-09T18:31:33.197", "LastActivityDate": "2015-01-09T18:37:58.357"}, "27866797": {"CommentCount": "3", "ViewCount": "732", "PostTypeId": "1", "LastEditorUserId": "1163462", "CreationDate": "2015-01-09T18:22:34.337", "LastActivityDate": "2015-01-09T18:40:58.487", "Title": "c++ default parameters class members", "AcceptedAnswerId": "27866956", "LastEditDate": "2015-01-09T18:40:02.000", "Id": "27866797", "Score": "2", "Body": "<pre><code>class bst\n{\nprivate:\n\ntypedef struct nod\n{\n  int data;\n  nod* left;\n  nod* right;\n  nod(int key):data(key),left(NULL),right(NULL){}\n}node;\n node* root;\n\npublic:\n\nvoid create();\nvoid add(int key,node*curr=root);\nvoid c2ll();\nvoid print(){}\n</code></pre>\n<p>The code doesn't compile...\nI get the below errors.</p>\n<pre><code>ain.cpp: In function \u2018int main()\u2019:\nmain.cpp:7:12: error: call to \u2018void bst::add(int, bst::node*)\u2019 uses the default argument for parameter 2, which is not yet defined\n   bt.add(50);\n            ^\nIn file included from bst.cpp:1:0:\nbst.h:14:8: error: invalid use of non-static data member \u2018bst::root\u2019\n  node* root;\n        ^\nbst.h:19:28: error: from this location\n void add(int key,node*curr=root);\n                            ^\nbst.h:14:8: error: invalid use of non-static data member \u2018bst::root\u2019\n  node* root;\n        ^\nbst.cpp:10:34: error: from this location\n void bst::add(int key,node* curr=root)\n</code></pre>\n<p>Any suggestions would be welcome...I am trying to avoid writing a wrapper method and instead use the default functionality provided by c++</p>\n", "Tags": "<c++><class><parameters><default><members>", "OwnerUserId": "1163462", "AnswerCount": "4"}});