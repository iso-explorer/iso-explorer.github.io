post_cb({"5099769": {"CommentCount": "0", "AcceptedAnswerId": "5101759", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-02-24T02:39:45.453", "LastActivityDate": "2014-02-10T15:05:27.457", "LastEditDate": "2017-05-23T11:52:50.163", "ViewCount": "744", "FavoriteCount": "1", "Title": "Regarding lvalue-to-rvalue conversion, when is it required?", "Id": "5099769", "Score": "6", "Body": "<p>I've been reading quite many on the Internet and it seems that many people mentioned the following rules (but i couldn't find it in the standard),</p>\n<p>The addition operator + (and all other binary operators) requires both operands to be rvalue, and the result is rvalue.\nAnd so on..</p>\n<p>I checked the C++ standard, and it clearly states that (clause 3.10/2),</p>\n<blockquote>\n<p id=\"so_5099769_5099769_0\">Whenever a glvalue appears in a\n  context where a prvalue is expected,\n  the glvalue is converted to a prvalue</p>\n</blockquote>\n<p>(clause 5/9),</p>\n<blockquote>\n<p id=\"so_5099769_5099769_1\">Whenever a glvalue expression appears\n  as an operand of an operator that\n  expects a prvalue for that operand,\n  the lvalue-to-rvalue (4.1),\n  array-to-pointer (4.2), or\n  function-to-pointer (4.3) standard\n  conversions are applied to convert the\n  expression to a prvalue.</p>\n</blockquote>\n<p>It uses a term the operand \"expects\" a prvalue. However, when I look into addition operator, multiplication operator etc, it only mentions that, the result is a prvalue, but it doesn't say anything on what the operands are \"expected\" to be.</p>\n<p>Whether does the binary operator really expects the operands to be prvalue makes a difference in the following case,</p>\n<pre><code>int b = 2;\nint a = b + 1;\n</code></pre>\n<p>If b is expected to be a prvalue, there will be a lvalue-to-rvalue conversion here, and then it will perform prvalue + prvalue and return a prvalue, and the result prvalue is assigned to an lvalue a.</p>\n<p>However, if b is not required to be a prvalue, it would be lvalue + prvalue and the result is a prvalue.</p>\n<p>I really want to know where does the standard explicitly or implicitly mentions that the \nrules for different operators? I check all the operators section and only a few operators that the standards explicitly mentions whether the operands and results shall be lvalue or rvalue. For most operators, the standard only mentions the result but not the operand requirement.</p>\n<p>Thanks.</p>\n<hr>\n<p>Btw, I found in Standard 5.19 regarding constant expression may very very \"implicitly\" imply that the binary operator require lvalue-to-rvalue conversion on operands. For more details, please refer to my previous question,</p>\n<p><a href=\"https://stackoverflow.com/questions/4999241/mixing-use-of-constexpr-and-const\">mixing use of constexpr and const?</a></p>\n<blockquote>\n<p id=\"so_5099769_5099769_2\">A conditional-expression is a constant\n  expression unless it involves one of\n  the following as a potentially\n  evaluated subexpression (3.2).</p>\n<p id=\"so_5099769_5099769_3\">... </p>\n<p id=\"so_5099769_5099769_4\">\u2014 an lvalue-to-rvalue conversion (4.1)\n  unless it is applied to </p>\n<p id=\"so_5099769_5099769_5\">\u2014\u2014\u2014\u2014 a glvalue of\n  integral or enumeration type that\n  refers to a non-volatile const object\n  with a preceding initialization,\n  initialized with a constant expression</p>\n</blockquote>\n<p>Thanks for reading.</p>\n</hr>", "Tags": "<c++><rvalue><lvalue><lvalue-to-rvalue>", "OwnerUserId": "534498", "AnswerCount": "2"}, "21680645": {"ParentId": "5099769", "CommentCount": "0", "Body": "<p>(First of all, sorry for my English. Corrections are absolutely wellcome)</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_5099769_21680645_0\">\u00a75.7-3 The result of the binary + operator is the sum of the operands. [...]</p>\n</blockquote>\n<p>Let's suppose we have the expression <code>e1 + e2</code>, and the <code>+</code> operator selected is the built-in one, the expression is well-formed, <code>e1</code> and <code>e2</code> are arithmetic types or a casting to arithmetic type is available, and everything is OK, fine and perfect!</p>\n<p>So, rule \u00a75.7-3 applies. In other hand, each operand is an expressions:</p>\n<blockquote>\n<p id=\"so_5099769_21680645_1\">\u00a75-1 [<em>Note</em>: [...] An expression is a sequence of operators and operands that specifies a computation. An expression can result in a value and can cause side effects. \u2014 <em>end note</em>]</p>\n</blockquote>\n<p>It says an expression <strong>can</strong> result in a value because of <code>void</code> expressions, like the <code>delete</code> expression or a <code>void</code>function, but since we have said <code>e1 + e2</code> is a perfectly-defined expression!, we can omit the verb \"can\", and so we can afirm that: <strong>an expression results in a value</strong>.</p>\n<p>Last point: for arithmetical and logical built-in operators, I understand, although it isn't specified by the standard, only the value of its operands matter, irrespective of the value category of them.</p>\n<p>I think that with being expressions is enough for implementing the built-in operator <code>+</code> (and other arithmetical operators), since only the value matters, and the value can be reached through the expression. For this reason, the Standard doesn't define them clearly.</p>\n<p>All the same, this type of things are very bad structured. For example, I've found no place specifing, when an operator receive an object as operand and not a direct value (doubt that I'm currently trying to solve), if the operator should take directly its value for computing the operator, if the value is the result of evaluating the object, and so on. It's obvious that only values matters, but, what exactly says the Standard for these things is a sort of mystery.</p>\n", "OwnerUserId": "1794803", "PostTypeId": "2", "Id": "21680645", "Score": "1", "CreationDate": "2014-02-10T15:05:27.457", "LastActivityDate": "2014-02-10T15:05:27.457"}, "bq_ids": {"n4140": {"so_5099769_5099769_2": {"section_id": 6185, "quality": 0.6666666666666666, "length": 6}, "so_5099769_5099769_0": {"section_id": 7231, "quality": 1.0, "length": 10}, "so_5099769_21680645_1": {"section_id": 5934, "quality": 0.8235294117647058, "length": 14}, "so_5099769_5099769_5": {"section_id": 6185, "quality": 1.0, "length": 13}, "so_5099769_5099769_1": {"section_id": 5942, "quality": 1.0, "length": 17}, "so_5099769_21680645_0": {"section_id": 6140, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_5099769_5099769_2": {"section_id": 5946, "quality": 1.0, "length": 9}, "so_5099769_5099769_0": {"section_id": 6975, "quality": 1.0, "length": 10}, "so_5099769_21680645_1": {"section_id": 5706, "quality": 0.8235294117647058, "length": 14}, "so_5099769_5099769_5": {"section_id": 5946, "quality": 1.0, "length": 13}, "so_5099769_5099769_1": {"section_id": 5713, "quality": 1.0, "length": 17}, "so_5099769_21680645_0": {"section_id": 5904, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_5099769_5099769_0": {"section_id": 8743, "quality": 1.0, "length": 10}, "so_5099769_5099769_1": {"section_id": 7426, "quality": 1.0, "length": 17}, "so_5099769_21680645_1": {"section_id": 7418, "quality": 0.8235294117647058, "length": 14}, "so_5099769_21680645_0": {"section_id": 7637, "quality": 0.7142857142857143, "length": 5}, "so_5099769_5099769_5": {"section_id": 7687, "quality": 1.0, "length": 13}}}, "5101759": {"ParentId": "5099769", "CommentCount": "1", "Body": "<p>So, this is generally one of those inferred and ill-specified parts of the standard; However, in 3.10</p>\n<blockquote>\n<blockquote>\n<p id=\"so_5099769_5101759_1\">[ Note: some built-in operators expect lvalue operands. [ Example: built-in assignment operators all expect their left-hand operands to be lvalues. \u2014 end example ] Other built-in operators yield rvalues, and some expect them. [ Example: the unary and binary + operators expect rvalue arguments and yield rvalue results. \u2014 end example ] The discussion of each built-in operator in clause 5 indicates whether it expects lvalue operands and whether it yields an lvalue. \u2014 end note ]</p>\n</blockquote>\n</blockquote>\n<p>Notice the poorly specified language \"in clause 5 indicates whether it expects lvalue operands and whether it yields an lvalue\".</p>\n<p>Examination of Chapter 5 indicates that every case where an expression needs or returns an lvalue is enumerated, however very few cases dealing specifically with rvalues are enumerated, I think it's then assumed that the rest is assumed to be rvalues.</p>\n<p>I also suspect it's poorly specified because from the perspective of the standard, it's not particularly important if the conversion is done implicitly or explicitly by the operator, regardless, the behavior should be the consistent and well-behaved.</p>\n", "OwnerUserId": "118960", "PostTypeId": "2", "Id": "5101759", "Score": "4", "CreationDate": "2011-02-24T07:45:37.053", "LastActivityDate": "2011-02-24T07:45:37.053"}});