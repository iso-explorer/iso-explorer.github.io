post_cb({"46383191": {"ParentId": "46379738", "CommentCount": "2", "Body": "<p>I believe it would be also in msvc (at least vs 2015) if you were to declare the f itself as constexpr Foo f;</p>\n", "OwnerUserId": "1826073", "PostTypeId": "2", "Id": "46383191", "Score": "0", "CreationDate": "2017-09-23T18:54:04.190", "LastActivityDate": "2017-09-23T18:54:04.190"}, "46379738": {"CommentCount": "1", "ViewCount": "125", "LastActivityDate": "2017-09-23T18:54:04.190", "Body": "<p>Look at this code:</p>\n<pre><code>struct Foo {\n        void *ptr;\n\n        constexpr Foo() : ptr(nullptr) { }\n};\n\nFoo f;\n</code></pre>\n<p>Is it guaranteed that <code>f</code> will be statically initialized?</p>\n<p>Clang uses static initialization here, but MSVC <a href=\"https://godbolt.org/g/SS4y8x\" rel=\"nofollow noreferrer\">doesn't</a>.</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "46382753", "FavoriteCount": "1", "Title": "Is static initialization guaranteed here?", "Id": "46379738", "Score": "4", "CreationDate": "2017-09-23T12:47:05.113", "Tags": "<c++>", "OwnerUserId": "8157187", "AnswerCount": "3"}, "46382591": {"ParentId": "46379738", "LastEditDate": "2017-09-23T18:12:58.347", "CommentCount": "2", "CreationDate": "2017-09-23T17:49:11.657", "OwnerUserId": "2706707", "LastEditorUserId": "2706707", "PostTypeId": "2", "Id": "46382591", "Score": "0", "Body": "<p>Standard-wise, yes. Reality-wise, no. </p>\n<p>You are at the mercy of compiler venders when it comes to static initialization compliance.</p>\n<p>[edit] Clang is a special compiler \u2014 from the beginning its creators have been interested in full standards compliance.</p>\n", "LastActivityDate": "2017-09-23T18:12:58.347"}, "bq_ids": {"n4140": {"so_46379738_46382753_3": {"section_id": 7151, "quality": 0.8, "length": 4}, "so_46379738_46382753_2": {"section_id": 7151, "quality": 1.0, "length": 13}, "so_46379738_46382753_0": {"section_id": 7151, "quality": 0.84375, "length": 27}, "so_46379738_46382753_4": {"section_id": 7151, "quality": 0.9, "length": 18}}, "n3337": {"so_46379738_46382753_2": {"section_id": 6895, "quality": 0.8461538461538461, "length": 11}, "so_46379738_46382753_4": {"section_id": 6895, "quality": 0.9, "length": 18}}, "n4659": {"so_46379738_46382753_2": {"section_id": 8652, "quality": 0.6153846153846154, "length": 8}, "so_46379738_46382753_0": {"section_id": 8652, "quality": 0.78125, "length": 25}, "so_46379738_46382753_4": {"section_id": 8652, "quality": 0.7, "length": 14}}}, "46382753": {"ParentId": "46379738", "CommentCount": "0", "Body": "<p>Yes, the Standard says <code>f</code> will be constant initialized:</p>\n<p>[basic.start.init]/2:</p>\n<blockquote>\n<p id=\"so_46379738_46382753_0\">A <em>constant initializer</em> for an object <code>o</code> is an expression that is a constant expression, except that it may also invoke <code>constexpr</code> constructors for <code>o</code> and its subobjects even if those objects are of non-literal class types [<em>Note:</em> such a class may have a non-trivial destructor --<em>end note</em>]. <em>Constant initialization</em> is performed:</p>\n<ul>\n<li><p id=\"so_46379738_46382753_1\">... [a case for references]</p></li>\n<li><p id=\"so_46379738_46382753_2\">if an object with static or thread storage duration is initialized by a constructor call, and if the initialization full-expression is a constant initializer for the object;</p></li>\n<li><p id=\"so_46379738_46382753_3\">... [a case for objects initialized without a constructor call]</p></li>\n</ul>\n<p id=\"so_46379738_46382753_4\">Together, zero-initialization and constant initialization are called <em>static initialization</em>; all other initialization is <em>dynamic initialization</em>. Static initialization shall be performed before any dynamic initialization takes place.</p>\n</blockquote>\n<p>The initialization full-expression is simply the call of <code>Foo</code>'s default constructor, which is a constant expression.</p>\n<p>MSVC is wrong to emit code to initialize <code>f</code>.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "46382753", "Score": "3", "CreationDate": "2017-09-23T18:08:15.903", "LastActivityDate": "2017-09-23T18:08:15.903"}});