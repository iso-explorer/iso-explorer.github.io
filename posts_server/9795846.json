post_cb({"9795912": {"ParentId": "9795846", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_9795846_9795912_0\">When people say it is inaccessible outside of the scope, it just means that you cannot alter the value (it will error) outside of it's identifying scope?</p>\n</blockquote>\n<p>No, that's not what scope means. When you use a name \"outside of the scope\" of something it means that that name won't resolve to the entity named inside the scope in question. The name might resolve to a different object or it might be an invalid name depending on the context.</p>\n<p>So long as the object's lifetime has begun and hasn't ended the object could be altered by an expression outside of the scope of its variable by various means such as it's address being passed to another function where it is stored and subsequently this stored address is used to alter the object.</p>\n<p>In your code example <code>= 1</code> is an initializer, not an assignment. It is used when the variable is initialized which, as the object is declared <code>static</code>, happens only the first time execution passes through the declaration statement.</p>\n", "OwnerUserId": "19563", "PostTypeId": "2", "Id": "9795912", "Score": "0", "CreationDate": "2012-03-20T22:22:14.807", "LastActivityDate": "2012-03-20T22:22:14.807"}, "bq_ids": {"n4140": {"so_9795846_9796133_0": {"section_id": 3919, "quality": 0.9629629629629629, "length": 26}, "so_9795846_9796133_1": {"section_id": 7165, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_9795846_9796133_0": {"section_id": 3779, "quality": 0.9629629629629629, "length": 26}, "so_9795846_9796133_1": {"section_id": 6909, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_9795846_9796133_1": {"section_id": 8673, "quality": 0.9523809523809523, "length": 20}, "so_9795846_9796133_0": {"section_id": 8653, "quality": 0.5555555555555556, "length": 15}}}, "9795866": {"ParentId": "9795846", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The object comes to life once and so it is initialized once. Initialization is not assignment. (IINA? \u3044\u3044\u3001\u306a\uff01)</p>\n", "OwnerUserId": "1250772", "LastEditorUserId": "1250772", "LastEditDate": "2012-03-20T22:53:03.387", "Id": "9795866", "Score": "2", "CreationDate": "2012-03-20T22:17:02.673", "LastActivityDate": "2012-03-20T22:53:03.387"}, "9795846": {"CommentCount": "9", "ViewCount": "599", "PostTypeId": "1", "LastEditorUserId": "2686013", "CreationDate": "2012-03-20T22:14:37.727", "LastActivityDate": "2015-05-20T00:28:17.403", "Title": "'static' keyword in C++", "AcceptedAnswerId": "9795866", "LastEditDate": "2015-05-20T00:28:17.403", "Id": "9795846", "Score": "5", "Body": "<p>I realize that it retains the value after going out of scope (but becomes inaccessible), but I have a few questions.</p>\n<ol>\n<li><p>When people say it is inaccessible outside of the scope, it just means that you cannot alter the value (it will error) outside of its identifying scope?</p></li>\n<li><p>I was thinking about this code:</p>\n<pre><code>#include \"iostream\"\n\nvoid staticExample();\n\nint main()\n{\n    staticExample();\n\n    return 0;\n}\n\nvoid staticExample()\n{\n    for (int i = 1; i &lt;= 10; ++i)\n    {\n        static int number = 1;\n        std::cout &lt;&lt; number &lt;&lt; \"\\n\";\n\n        ++number;\n    }\n}\n</code></pre></li>\n</ol>\n<p>and I thought to myself, that in every iteration of the loop, I am setting the 'number' variable to 1. As I first expected though, it printed 1, 2, 3.. 10. Does the compiler recognize that the line setting it to 1 was a declaration and ignores its \"change\"?</p>\n", "Tags": "<c++><static>", "OwnerUserId": "1276964", "AnswerCount": "5"}, "9795879": {"ParentId": "9795846", "CommentCount": "1", "Body": "<ol>\n<li><p>It just means that code like this will result in a compiler error message:</p>\n<pre><code>{\n    static int x;\n    x = 5;\n}\nx = 6;  // Compiler error here!  We're outside the scope that x was declared in.\n</code></pre>\n<p>But that doesn't mean you can't access it.  For example:</p>\n<pre><code>int *p = NULL;\n{\n    static int x;\n    x = 5;\n    p = &amp;x;\n}\n*p = 6;  // This is fine\n</code></pre></li>\n<li><p>A static variable is only initialised once; the first time it's reached.</p></li>\n</ol>\n", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "9795879", "Score": "0", "CreationDate": "2012-03-20T22:18:38.277", "LastActivityDate": "2012-03-20T22:18:38.277"}, "9796133": {"ParentId": "9795846", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>A <code>static</code> variable (this also is valid for <code>static</code> <code>class</code> members) gets initialized only once - <em>globally</em>. Even the first run through the scope that declares the initialization will <em>usually</em> ignore the initialization, though there may be some compiler out there that does it differently - so it's compiler-dependent.</p>\n<p>The reason: the initialization usually happens <em>before</em> your <code>main()</code> function gets called and often will even be reflected in the executable/binary itself in that static data gets written there pre-initialized at link-time. This means that <code>static</code> data most of the time will be valid even before the first piece of code (the parts of the C runtime that will call your <code>main()</code>) gets to run.</p>\n<p>Other than pointer/reference aliasing there would not be a way to access such a variable outside its immediate scope (the surrounding braces <code>{}</code>), though.</p>\n<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf3.7.1\" rel=\"nofollow\">here</a>:</p>\n<p><strong>6.7 Declaration statement</strong></p>\n<blockquote>\n<p id=\"so_9795846_9796133_0\">An implementation is permitted to perform early initialization of\n  other block-scope variables with static or thread storage duration\n  under the same conditions that an implementation is permitted to\n  statically initialize a variable with static or thread storage\n  duration in namespace scope (3.6.2).</p>\n</blockquote>\n<p>Most implementations I have encountered during reverse-engineering appear to make use of this, in particular because the following also applies:</p>\n<p><strong>3.7.1 Static storage duration</strong></p>\n<blockquote>\n<p id=\"so_9795846_9796133_1\">If a variable with static storage duration has initialization or a\n  destructor with side effects, it shall not be eliminated even if it\n  appears to be unused, except that a class object or its copy/move may\n  be eliminated as specified in 12.8.</p>\n</blockquote>\n<p>... which means it makes sense to have <code>static</code> behave similar to the way it did in C - i.e. initialize its contents up-front if the initialization was defined at compile-time.</p>\n<p>Many compilers will otherwise initialize with zero or some magic number (for example in debug builds) when the variable was declared but not initialized at declaration-time.</p>\n", "OwnerUserId": "476371", "LastEditorUserId": "476371", "LastEditDate": "2012-03-20T23:11:10.603", "Id": "9796133", "Score": "1", "CreationDate": "2012-03-20T22:42:53.253", "LastActivityDate": "2012-03-20T23:11:10.603"}, "9795976": {"ParentId": "9795846", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Call staticExample twice and see what happens to your output. This will help you understand 'static storage' as it applies to local variables. </p>\n<pre><code>#include &lt;iostream&gt; \n\nvoid staticExample()\n{\n    static int number = 1;\n\n    for (int i = 1; i &lt;= 10; ++i)\n    {\n        std::cout &lt;&lt; number &lt;&lt; \"\\n\";\n        ++number;\n    }\n}\n\nint main()\n{\n    staticExample();  // begins counting at 1\n    staticExample();  // begins counting at 10\n\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<p>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</p>\n<p>I read a quote once that I liked, \"You have stack storage and you have heap storage, but you also have another type of storage. It's called static and it's neither on the stack or in the heap.\" Not verbatim, but something similar to that.</p>\n", "OwnerUserId": "1200129", "LastEditorUserId": "1200129", "LastEditDate": "2012-03-20T22:35:57.383", "Id": "9795976", "Score": "3", "CreationDate": "2012-03-20T22:28:15.427", "LastActivityDate": "2012-03-20T22:35:57.383"}});