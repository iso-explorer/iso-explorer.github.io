post_cb({"36411320": {"ParentId": "36411023", "CommentCount": "0", "Body": "<p>When you <code>#include</code> something you're basically copying and pasting that file into where you <code>#include</code>d. It's not actually an error to have multiple of the same class definition, as long they are not multiple of the same class definition being included into the same compilation unit (cpp). If you do that, it breaks the one definition rule.</p>\n<p>In your setup, the functions in the version of Camera in oldcamera.h are calling the functions written for camera.h (since those functions are the only which were compiled, since you said oldcamera.cpp wasn't in the project). However, those functions rely on the data layout of the class Camera being a certain way. Since <code>oldcamera.h</code>'s <code>Camera</code> and new <code>camera.h</code>'s <code>Camera</code> have a different data layout (which you didn't demonstrate, but I'm assuming), shit hits the fan.</p>\n", "OwnerUserId": "369872", "PostTypeId": "2", "Id": "36411320", "Score": "1", "CreationDate": "2016-04-04T19:32:43.733", "LastActivityDate": "2016-04-04T19:32:43.733"}, "36411023": {"CommentCount": "12", "ViewCount": "41", "PostTypeId": "1", "LastEditorUserId": "22564", "CreationDate": "2016-04-04T19:15:28.020", "LastActivityDate": "2016-04-04T19:40:48.177", "Title": "Including different versions of the same class", "AcceptedAnswerId": "36411320", "LastEditDate": "2016-04-04T19:38:07.333", "Id": "36411023", "Score": "1", "Body": "<p>I lost most of this afternoon tracking down a bug which basically came down to including two different versions of the same header file declaring the same class in Visual Studio 2015.  Greatly simplified, it appears as follows;</p>\n<p><strong>oldcamera.h</strong></p>\n<pre><code>#pragma once\n\nclass camera\n{\npublic:\n camera();\n int a;\n double x,y,z;\n};\n</code></pre>\n<p><strong>camera.h</strong></p>\n<pre><code>#pragma once\n\nclass camera\n{\npublic:\n camera();\n double x,y,z;\n};\n</code></pre>\n<p><strong>camera.cpp</strong></p>\n<pre><code>#include camera.h\n\ncamera::camera()\n{\n  x = y = 0;\n  z = 1;\n};\n</code></pre>\n<p><strong>mytransclass.h</strong></p>\n<pre><code>#pragma once\n\n#include \"oldcamera.h\"\n\nclass trans\n{\npublic:\n   camera m_camera;\n};\n</code></pre>\n<p><strong>func.cpp</strong></p>\n<pre><code>#include \"mytransclass.h\"\n\nvoid MyFunc(trans *ptrans)\n{\n  ptrans-&gt;x = 1.0;\n  ptrans-&gt;y = 2.0;\n  ptrans-&gt;z = 3.0;\n}\n</code></pre>\n<p>The project includes camera.cpp and func.cpp, and when single stepping through MyFunc, the debugger showed the assignments weren't actually doing anything.  Question is whether this should compile and link without warning, and if it is legal (which knowing the convoluted heritage of c++ is likely), why does the assignment fail?  If it is legal, is there any way to flag it as an error? Compiler is Visual C++ 2015.</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "22564", "AnswerCount": "2"}, "36411363": {"ParentId": "36411023", "CommentCount": "0", "Body": "<p>Your program violates <a href=\"http://en.cppreference.com/w/cpp/language/definition\" rel=\"nofollow\">One Definition Rule</a>, which in particular says ([basic.def.odr]/6):</p>\n<blockquote>\n<p id=\"so_36411023_36411363_0\">There can be more than one definition of a class type (Clause 9), ... in a program provided that each definition\n  appears in a different translation unit, and provided the definitions satisfy the following requirements. Given\n  such an entity named <code>D</code> defined in more than one translation unit, then<br>\n  (6.1) \u2014 each definition of <code>D</code> shall consist of the same sequence of tokens<br>\n  ...<br>\n  If the definitions of <code>D</code> do not satisfy these requirements, then the behavior is undefined.</br></br></br></p>\n</blockquote>\n", "OwnerUserId": "3959454", "PostTypeId": "2", "Id": "36411363", "Score": "1", "CreationDate": "2016-04-04T19:34:58.733", "LastActivityDate": "2016-04-04T19:34:58.733"}, "bq_ids": {"n4140": {"so_36411023_36411363_0": {"section_id": 7043, "quality": 1.0, "length": 44}}, "n3337": {"so_36411023_36411363_0": {"section_id": 6788, "quality": 1.0, "length": 44}}, "n4659": {"so_36411023_36411363_0": {"section_id": 8540, "quality": 1.0, "length": 44}}}});