post_cb({"6380666": {"CommentCount": "0", "ViewCount": "589", "CreationDate": "2011-06-17T02:03:58.407", "LastActivityDate": "2011-06-17T02:23:06.947", "Title": "need help changing single character in char*", "AcceptedAnswerId": "6380704", "PostTypeId": "1", "Id": "6380666", "Score": "3", "Body": "<p>I'm getting back into c++ and have the hang of pointers and whatnot, however, I was hoping I could get some help understanding why this code segment gives a bus error.</p>\n<pre><code>char * str1 = \"Hello World\";\n*str1 = '5';\n</code></pre>\n<p>ERROR: Bus error :(</p>\n<p>And more generally, I am wondering how to change the value of a single character in a cstring. Because my understanding is that *str = '5' should change the value that str points to from 'H' to '5'. So if I were to print out str it would read: \"5ello World\".</p>\n<p>In an attempt to understand I wrote this code snippet too, which works as expected;</p>\n<pre><code>char test2[] = \"Hello World\";\nchar *testpa2 = &amp;test2[0];\n*testpa2 = '5';\n</code></pre>\n<p>This gives the desired output. So then what is the difference between testpa2 and str1? Don't they both point to the start of a series of null-terminated characters? </p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "802538", "AnswerCount": "3"}, "6380755": {"ParentId": "6380666", "CommentCount": "0", "CreationDate": "2011-06-17T02:23:06.947", "OwnerUserId": "722973", "PostTypeId": "2", "Id": "6380755", "Score": "3", "Body": "<p>In the first example you try to modify a string literal, this results in undefined behavior.</p>\n<p>As per the language standard in <strong>2.13.4.2</strong></p>\n<blockquote>\n<p id=\"so_6380666_6380755_0\">Whether  all  string  literals  are \n  distinct  (that  is,  are  stored  in \n  nonoverlapping objects) is \n  implementation-defined.  <em>The effect of\n  attempting to modify a string literal\n  is undefined</em>.</p>\n</blockquote>\n<p>In your second example you used string-literal initialization, defined in <strong>8.5.2.1</strong></p>\n<blockquote>\n<p id=\"so_6380666_6380755_1\">A char array (whether plain char,\n  signed char, or unsigned char) can be\n  initialized by a string- literal\n  (optionally enclosed in braces); a\n  wchar_t array can be initialized by a\n  wide string-literal (option- ally \n  enclosed  in  braces);  successive \n  characters  of  the  string-literal \n  initialize  the  members  of  the \n  array.</p>\n</blockquote>\n", "LastActivityDate": "2011-06-17T02:23:06.947"}, "6380701": {"ParentId": "6380666", "CommentCount": "0", "CreationDate": "2011-06-17T02:09:48.750", "OwnerUserId": "13", "PostTypeId": "2", "Id": "6380701", "Score": "4", "Body": "<p>Not so simple. :-)</p>\n<p>The first one creates a <em>pointer</em> to the given string literal, which is allowed to be placed in read-only memory.</p>\n<p>The second one creates an <em>array</em> (on the stack, usually, and thus read-write) that is initialised to the contents of the given string literal.</p>\n", "LastActivityDate": "2011-06-17T02:09:48.750"}, "bq_ids": {"n4140": {"so_6380666_6380755_0": {"section_id": 5361, "quality": 0.875, "length": 14}}, "n3337": {"so_6380666_6380755_1": {"section_id": 3184, "quality": 0.59375, "length": 19}, "so_6380666_6380755_0": {"section_id": 5157, "quality": 0.875, "length": 14}}, "n4659": {"so_6380666_6380755_0": {"section_id": 6789, "quality": 0.875, "length": 14}}}, "6380704": {"ParentId": "6380666", "CommentCount": "1", "CreationDate": "2011-06-17T02:10:06.583", "OwnerUserId": "4323", "PostTypeId": "2", "Id": "6380704", "Score": "5", "Body": "<p>When you say <code>char *str = \"Hello World\";</code> you are making a pointer to a literal string which is not changeable.  It should be required to assign the literal to a <code>const char*</code> instead, but for historical reasons this is not the case (oops).</p>\n<p>When you say <code>char str[] = \"Hello World;\"</code> you are making an array which is initialized to (and sized by) a string known at compile time.  This is OK to modify.</p>\n", "LastActivityDate": "2011-06-17T02:10:06.583"}});