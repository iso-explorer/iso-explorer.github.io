post_cb({"38044012": {"Id": "38044012", "PostTypeId": "2", "Body": "<p>The following statement:</p>\n<pre><code>return c * (t /= d) * t * t + b;\n</code></pre>\n<p>invokes <em>undefined behaviour</em> in C (and I believe in C++ too). This is because <code>t</code> is evaluated twice (counting the <code>(t /= d)</code> subexpression) despite of an unsequenced side effect (produced by the compound assignment operator), that is affecting object represented by <code>t</code> variable.</p>\n<p>The moment when you encounter UB is the one you should stop thinking about \"proper\" value of the expression. There is none, because anything is possible, including turning off your PC.</p>\n<p>The recent versions of <code>gcc</code> and <code>clang</code> with <code>-Wall</code> may tell you that expression is suspected of invoking UB. Here, the warnings are:</p>\n<blockquote>\n<p id=\"so_38043932_38044012_0\">warning: operation on 't' may be undefined [-Wsequence-point]</p>\n<p id=\"so_38043932_38044012_1\">warning: unsequenced modification and access to 't' [-Wunsequenced]</p>\n</blockquote>\n", "LastEditorUserId": "586873", "LastActivityDate": "2016-06-27T12:27:15.793", "Score": "3", "CreationDate": "2016-06-26T23:08:39.500", "ParentId": "38043932", "CommentCount": "8", "OwnerUserId": "586873", "LastEditDate": "2016-06-27T12:27:15.793"}, "38043932": {"ViewCount": "180", "Body": "<p>Will this code always result in the same result?</p>\n<pre><code>return c * (t /= d) * t * t + b;\n</code></pre>\n<p>So I expect:</p>\n<pre><code>return ((c * (t / d) ^ 3) + b);\n</code></pre>\n<p>But I am not sure if the compiler can also interpret it as:</p>\n<pre><code>return ((c * t * t * (t / d)) + b)\n</code></pre>\n<p>I have searched in the C standard but could not find an answer,\nI know that <code>x = x++</code> is undefined but here I am not sure because of the <code>()</code> around the <code>t /= d</code> which I think force the compiler to first calculate that statement.</p>\n", "AcceptedAnswerId": "38043989", "Title": "Is the order of execution always the same in C/C++", "CreationDate": "2016-06-26T22:54:16.163", "Id": "38043932", "CommentCount": "12", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-06-27T11:05:08.067", "LastEditorUserId": "149392", "LastActivityDate": "2016-06-27T12:27:15.793", "Score": "4", "OwnerUserId": "1131134", "Tags": "<c++><c>", "AnswerCount": "3"}, "38043989": {"Id": "38043989", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38043932_38043989_0\">I have searched in the C standard but could not find an answer</p>\n</blockquote>\n<p>The thing you're searching for is the <a href=\"http://c-faq.com/expr/seqpoints.html\" rel=\"nofollow\"><em>sequence point</em></a>.</p>\n<p>Your expression</p>\n<pre><code>c * (t /= d) * t * t + b\n</code></pre>\n<p>doesn't contain any sequence points, so the sub-expressions may be evaluated in any relative order.</p>\n<hr>\n<p><strong>NOTE</strong> that this applies to C, since you mentioned that in the question. You've also tagged the related-but-very different language C++, which has different rules. Luckily, in this case, they give exactly the same result.</p>\n<p>The relevant text from the 2014-11-19 working draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">PDF:N4296</a> is</p>\n<blockquote>\n<p id=\"so_38043932_38043989_1\">1.9 Program Execution [intro.execution]</p>\n<p id=\"so_38043932_38043989_2\">...</p>\n<p id=\"so_38043932_38043989_3\">14 Every value computation and side effect associated with a full-expression is sequenced before every value\n  computation and side effect associated with the next full-expression to be evaluated.</p>\n<p id=\"so_38043932_38043989_4\">15 <strong>Except where noted, evaluations of operands of individual operators and of subexpressions of individual\n  expressions are unsequenced</strong>. [ Note: In an expression that is evaluated more than once during the execution\n  of a program, unsequenced and indeterminately sequenced evaluations of its subexpressions need not be\n  performed consistently in different evaluations. \u2014 end note ] The value computations of the operands of an\n  operator are sequenced before the value computation of the result of the operator. If a side effect on a scalar\n  object is unsequenced relative to either another side effect on the same scalar object or a value computation\n  using the value of the same scalar object, and they are not potentially concurrent (1.10), <strong>the behavior is\n  undefined</strong>. [ Note: The next section imposes similar, but more complex restrictions on potentially concurrent\n  computations. \u2014 end note ]</p>\n</blockquote>\n<p>So the logic in C++ is that unless things are explicitly sequenced (eg, by a <code>;</code> separating two full expressions), then they can happen in any order.</p>\n<p>As the (second) highlighted section mentions, when two un-sequenced sub-expressions modify the same object (or one modifies and one reads), the behaviour is undefined.</p>\n</hr>", "LastEditorUserId": "212858", "LastActivityDate": "2016-06-27T11:47:04.293", "Score": "6", "CreationDate": "2016-06-26T23:02:59.260", "ParentId": "38043932", "CommentCount": "5", "OwnerUserId": "212858", "LastEditDate": "2016-06-27T11:47:04.293"}, "bq_ids": {"n4140": {"so_38043932_38043989_4": {"length": 75, "quality": 0.8928571428571429, "section_id": 5811}, "so_38043932_38043989_3": {"length": 18, "quality": 1.0, "section_id": 5810}}, "n3337": {"so_38043932_38043989_4": {"length": 60, "quality": 0.7142857142857143, "section_id": 5584}, "so_38043932_38043989_3": {"length": 18, "quality": 1.0, "section_id": 5583}}, "n4659": {"so_38043932_38043989_4": {"length": 69, "quality": 0.8214285714285714, "section_id": 7272}, "so_38043932_38043989_3": {"length": 18, "quality": 1.0, "section_id": 7271}}}, "38044086": {"Id": "38044086", "PostTypeId": "2", "Body": "<p>The above expression, with parenthesis making the order of operations explicit, is as follows:</p>\n<pre><code>return ((((c * (t /= d)) * t) * t) + b);\n</code></pre>\n<p>The problem here, however, is that there is no <a href=\"https://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a> in this expression.  So any of the subexpressions can be evaluated <strong>in any order</strong>.  </p>\n<p>For example, the compiler may choose to evaluate the value of <code>t</code> once, then use the original value each place it appears.  Conversely, it may first evaluate <code>t /= d</code> which modifies <code>t</code>, then use this modified value anyplace else it appears.</p>\n<p>In short, because you are both reading and writing a variable in a single expression without a sequence point, you invoke <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>.</p>\n", "LastActivityDate": "2016-06-26T23:23:59.013", "CommentCount": "7", "CreationDate": "2016-06-26T23:23:59.013", "ParentId": "38043932", "Score": "3", "OwnerUserId": "1687119"}});