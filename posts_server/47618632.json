post_cb({"bq_ids": {"n4140": {"so_47618632_47618739_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5493}}, "n3337": {"so_47618632_47618739_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5279}}, "n4659": {"so_47618632_47618739_0": {"length": 9, "quality": 1.0, "section_id": 6927}, "so_47618632_47618739_1": {"length": 22, "quality": 1.0, "section_id": 6942}}}, "47618739": {"Id": "47618739", "PostTypeId": "2", "Body": "<p>Two reasons:</p>\n<ol>\n<li><p>Using declarations alone do not suppresses the implicit declaration of a special class member. In this case the default c'tor (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/namespace.udecl#4\" rel=\"nofollow noreferrer\">[namespace.udecl]/4</a>):</p>\n<blockquote>\n<p id=\"so_47618632_47618739_0\">the using-declaration does not by itself suppress the implicit\n  declaration of the derived class member</p>\n</blockquote>\n<p>So a public default c'tor for <code>MP3</code> is synthesized by the compiler, and invoked in your example.</p></li>\n<li><p>The c'tors introduced by a using declaration basically have the same accessibility they had in the base class (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/namespace.udecl#19\" rel=\"nofollow noreferrer\">[namespace.udecl]/19</a>):</p>\n<blockquote>\n<p id=\"so_47618632_47618739_1\">A using-declarator that names a constructor\n  does not create a synonym; instead, the additional constructors are\n  accessible if they would be accessible when used to construct an\n  object of the corresponding base class, and the accessibility of the\n  using-declaration is ignored.</p>\n</blockquote>\n<p>So the c'tor taking a string is not accessible in <code>main</code> since it's protected in <code>MP3</code> as well.  </p></li>\n</ol>\n<p>If you want to have a public c'tor in <code>MP3</code> that accepts a <code>std::string</code> you have to define it in full, and forward to the base class c'tor explicitly:</p>\n<pre><code>public:\n  MP3(std::string s) : Audioformat(s) {}\n</code></pre>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-12-03T15:57:09.957", "Score": "4", "CreationDate": "2017-12-03T13:13:32.363", "ParentId": "47618632", "CommentCount": "3", "OwnerUserId": "817643", "LastEditDate": "2017-12-03T15:57:09.957"}, "47618632": {"ViewCount": "39", "Body": "<p>I have an abstract pseudo base class for some audio formats with 2 ctors - one works for the derived class  but the other one gives me an error which i can\u00b4t solve.\nIt says that i can\u00b4t access the protected member declared in MP3, but why can it reach one ctor but not the other? </p>\n<pre><code>class Audioformat\n{\nprotected:\n    string song=\"\";\n    Audioformat(string s) :song(s) {};//This ctor gives me the error\n    Audioformat() { song = \"unknown\";}\npublic:\n    virtual void play()=0;\n    virtual void info() = 0;\n    virtual ~Audioformat() = 0 {};\n};\nclass MP3 : public Audioformat\n{\npublic:\n    using Audioformat::Audioformat;\n    void play() { cout &lt;&lt; \"pseudo-play\" &lt;&lt; endl; }\n    void info() { cout &lt;&lt; song &lt;&lt; endl; }\n    ~MP3() { cout &lt;&lt; \"MP3\" &lt;&lt; endl; delete this; }\n};\n</code></pre>\n<p>Here\u00b4s my main :</p>\n<pre><code>int main()\n{\n\n    MP3 song1{};//WORKS\n    MP3 song2{ \"random trash song\" };//ERROR    MP3::MP3(std::string) is inaccessible\n    play(song1);\n    info(song1);\n    getchar();\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "47618739", "Title": "use protected ctor from virtual base class in derived class", "CreationDate": "2017-12-03T13:01:12.147", "Id": "47618632", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2017-12-03T15:57:09.957", "Score": "2", "OwnerUserId": "8867959", "Tags": "<c++><virtual><derived>", "AnswerCount": "1"}});