post_cb({"bq_ids": {"n4140": {"so_46691126_46691217_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 1920}, "so_46691126_46691217_1": {"length": 9, "quality": 0.9, "section_id": 1920}, "so_46691126_46691217_0": {"length": 46, "quality": 0.8846153846153846, "section_id": 1920}}, "n3337": {"so_46691126_46691217_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 1909}, "so_46691126_46691217_1": {"length": 9, "quality": 0.9, "section_id": 1909}, "so_46691126_46691217_0": {"length": 46, "quality": 0.8846153846153846, "section_id": 1909}}, "n4659": {"so_46691126_46691217_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 2191}, "so_46691126_46691217_1": {"length": 9, "quality": 0.9, "section_id": 2191}, "so_46691126_46691217_0": {"length": 34, "quality": 0.6538461538461539, "section_id": 2191}}}, "46691217": {"Id": "46691217", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_46691126_46691217_0\"><strong>[iostream.objects.overview]/2</strong> The objects are constructed and the associations are established at some time prior to or during the first time an object of class <code>ios_base::Init</code> is constructed, and in any case before the body of main begins execution.<sup>294</sup> The objects are not destroyed during program execution.<sup>295</sup> The results of including <code>&lt;iostream&gt;</code> in a translation unit shall be as if <code>&lt;iostream&gt;</code> defined an instance of <code>ios_base::Init</code> with static storage duration. Similarly, the entire program shall behave as if there were at least one instance of <code>ios_base::Init</code> with static storage duration.</p>\n<p id=\"so_46691126_46691217_1\"><sup>294</sup> If it is possible for them to do so, implementations are encouraged to initialize the objects earlier than required.</p>\n<p id=\"so_46691126_46691217_2\"><sup>295</sup> Constructors and destructors for static objects can access these objects to read input from <code>stdin</code> or write output to <code>stdout</code> or <code>stderr</code>.</p>\n</blockquote>\n<p>See also: <a href=\"https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Nifty_Counter\" rel=\"noreferrer\">Nifty counter</a></p>\n", "LastActivityDate": "2017-10-11T14:44:51.017", "CommentCount": "0", "CreationDate": "2017-10-11T14:44:51.017", "ParentId": "46691126", "Score": "7", "OwnerUserId": "1670129"}, "46691126": {"ViewCount": "61", "Body": "<p>In C++ <code>cin</code> and <code>cout</code> are often used to read/write something to the standard I/O. They are both used as operands to the operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>. In other words they are <strong>objects</strong> that we use whenever we want said functionality. </p>\n<p>Since <code>cin</code> and <code>cout</code> are <strong>objects</strong>, when during the lifecycle of a program are they created/initialized, so that we can use them wherever the <code>&lt;iostream&gt;</code> library is imported?</p>\n", "AcceptedAnswerId": "46691217", "Title": "What is the lifecycle of cin and cout objects? C++", "CreationDate": "2017-10-11T14:40:35.613", "Id": "46691126", "CommentCount": "3", "LastEditDate": "2017-10-11T14:42:42.120", "PostTypeId": "1", "LastEditorUserId": "5394999", "LastActivityDate": "2017-10-11T14:44:51.017", "Score": "2", "OwnerUserId": "5394999", "Tags": "<c++><stream>", "AnswerCount": "1"}});