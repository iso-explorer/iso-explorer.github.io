post_cb({"45835855": {"ParentId": "45835809", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45835809_45835855_0\">Is it depend on order of declaration of variables?</p>\n</blockquote>\n<p>Absolutely! The order in which initializers appear on the initialization list is disregarded by the standard; only the order of declaration matter. This is done so that \"reverse order of initialization\" be meaningful in the destructor, even though potentially there may be multiple constructors with initializer lists arranged in different order.</p>\n<p>Here is the relevant portion of the C++ standard (12.6.2.10):</p>\n<blockquote>\n<p id=\"so_45835809_45835855_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).</li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</li>\n<li>Finally, the compound-statement of the constructor body is executed.</li>\n</ul>\n<p id=\"so_45835809_45835855_2\">[ Note: The declaration order is mandated to ensure that base and member subobjects are destroyed in the reverse order of initialization. \u2014 end note ]</p>\n</blockquote>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2017-08-23T09:35:52.160", "Id": "45835855", "Score": "2", "CreationDate": "2017-08-23T09:30:12.660", "LastActivityDate": "2017-08-23T09:35:52.160"}, "45835853": {"ParentId": "45835809", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45835809_45835853_0\">Is it depend on order of declaration of variables?</p>\n</blockquote>\n<p>Yes, the data members are always initialized in the order of their declarations, which has nothing to do with the order of the member initializer lists.</p>\n<p>That means for your 2nd code snippet, <code>j</code> is always initialized before <code>i</code>; but when it's initialized by member initializer <code>i</code> is still not initialized.</p>\n<p>The complete <a href=\"http://en.cppreference.com/w/cpp/language/initializer_list#Initialization_order\" rel=\"nofollow noreferrer\">initialization order</a> for the object is:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_45835809_45835853_1\">The order of member initializers in the list is irrelevant: the actual\n  order of initialization is as follows:</p>\n<p id=\"so_45835809_45835853_2\">1) If the constructor is for the most-derived class, virtual base\n  classes are initialized in the order in which they appear in\n  depth-first left-to-right traversal of the base class declarations\n  (left-to-right refers to the appearance in base-specifier lists)</p>\n<p id=\"so_45835809_45835853_3\">2) Then, direct base classes are initialized in left-to-right order as\n  they appear in this class's base-specifier list</p>\n<p id=\"so_45835809_45835853_4\">3) Then, <strong>non-static data members are initialized in order of\n  declaration in the class definition</strong>.</p>\n<p id=\"so_45835809_45835853_5\">4) Finally, the body of the constructor is executed</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2017-08-23T10:24:54.853", "Id": "45835853", "Score": "2", "CreationDate": "2017-08-23T09:30:09.377", "LastActivityDate": "2017-08-23T10:24:54.853"}, "45835809": {"CommentCount": "1", "AcceptedAnswerId": "45835853", "PostTypeId": "1", "ClosedDate": "2017-08-23T09:30:05.747", "LastEditorUserId": "6935629", "CreationDate": "2017-08-23T09:27:47.613", "LastActivityDate": "2017-08-27T07:37:58.037", "LastEditDate": "2017-08-24T06:13:38.553", "ViewCount": "101", "FavoriteCount": "1", "Title": "Order of member initializers", "Id": "45835809", "Score": "5", "Body": "<p>Following code gives correct output, If I declare variables <code>i</code> and <code>j</code>, Like <code>int i, j;</code></p>\n<pre><code>class A \n{\n  int i, j;\n\npublic:\n    A(int val) : i(val), j(i + 1)\n    {\n        cout&lt;&lt;i&lt;&lt;endl&lt;&lt;j&lt;&lt;endl;\n    }\n};\n</code></pre>\n<p>But If I declare variable <code>i</code> and <code>j</code>, like <code>int j, i;</code>. then <code>j</code> print <strong>garbage value</strong>.</p>\n<pre><code>class A \n{\n  int j, i;\n\npublic:\n    A(int val) : i(val), j(i + 1)\n    {\n        cout&lt;&lt;i&lt;&lt;endl&lt;&lt;j&lt;&lt;endl;\n    }\n};\n</code></pre>\n<p>So, <strong>Is it depend on order of declaration of variables?</strong></p>\n", "Tags": "<c++><class><member-initialization>", "OwnerUserId": "6935629", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_45835809_45835855_2": {"section_id": 438, "quality": 0.7333333333333333, "length": 11}, "so_45835809_45835853_3": {"section_id": 438, "quality": 0.6666666666666666, "length": 8}, "so_45835809_45835853_4": {"section_id": 438, "quality": 0.8888888888888888, "length": 8}, "so_45835809_45835855_1": {"section_id": 438, "quality": 1.0, "length": 6}, "so_45835809_45835853_2": {"section_id": 438, "quality": 0.7142857142857143, "length": 15}}, "n3337": {"so_45835809_45835855_2": {"section_id": 429, "quality": 0.7333333333333333, "length": 11}, "so_45835809_45835853_3": {"section_id": 429, "quality": 0.6666666666666666, "length": 8}, "so_45835809_45835853_4": {"section_id": 429, "quality": 0.8888888888888888, "length": 8}, "so_45835809_45835855_1": {"section_id": 429, "quality": 1.0, "length": 6}, "so_45835809_45835853_2": {"section_id": 429, "quality": 0.7142857142857143, "length": 15}}, "n4659": {"so_45835809_45835855_2": {"section_id": 458, "quality": 0.7333333333333333, "length": 11}, "so_45835809_45835853_3": {"section_id": 458, "quality": 0.6666666666666666, "length": 8}, "so_45835809_45835853_4": {"section_id": 458, "quality": 0.8888888888888888, "length": 8}, "so_45835809_45835855_1": {"section_id": 458, "quality": 1.0, "length": 6}, "so_45835809_45835853_2": {"section_id": 458, "quality": 0.7142857142857143, "length": 15}}}, "45835821": {"ParentId": "45835809", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45835809_45835821_0\">Is it depend on order of declaration of variables?</p>\n</blockquote>\n<p>Yes, the order in which <em>data members</em> (i.e.: <code>i</code> and <code>j</code> in your class <code>A</code>) are <em>initialized</em>, corresponds to the order in which they are <em>declared</em> and not the order as they appear in the <em>constructor's member initializer list</em>.</p>\n<p>Your constructor's member initializer list in class <code>A</code></p>\n<pre><code>A(int val) : i(val), j(i + 1)\n</code></pre>\n<p>says nothing about the order in which these data members are initialized.</p>\n<p>The data member <code>j</code> will still be initialized before <code>i</code> if <code>j</code> is declared before <code>i</code> (i.e.: <code>int j, i</code>). In that case <code>j</code> is being initialized to <code>i + 1</code>, but <code>i</code> is uninitialized at this moment, which may result in <code>j</code> containing garbage.</p>\n<hr>\n<p>In GCC you can get a warning being displayed in these cases by providing the <code>-Wreorder</code> option, which is already enabled by passing the <code>-Wall</code> option.</p>\n</hr>", "OwnerUserId": "8012646", "LastEditorUserId": "8012646", "LastEditDate": "2017-08-27T07:37:58.037", "Id": "45835821", "Score": "1", "CreationDate": "2017-08-23T09:28:42.563", "LastActivityDate": "2017-08-27T07:37:58.037"}});