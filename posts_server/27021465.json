post_cb({"27021465": {"CommentCount": "9", "AcceptedAnswerId": "27021971", "PostTypeId": "1", "ClosedDate": "2014-11-19T20:08:02.440", "LastEditorUserId": "1708801", "CreationDate": "2014-11-19T16:07:00.967", "LastActivityDate": "2014-11-22T18:38:47.703", "LastEditDate": "2014-11-19T20:03:42.117", "ViewCount": "483", "FavoriteCount": "2", "Title": "Why does `++a++` not compile in C++ but `(++a)++` does?", "Id": "27021465", "Score": "6", "Body": "<p>What the title says. For C++, <code>(++a)++</code> does compile. Strangely enough, though, <code>++(a++)</code> does not:</p>\n<pre><code>int main() {\n    int a = 0;\n    ++a++; // does not compile\n    (++a)++; // does compile\n    ++(a++); // does not compile\n}\n</code></pre>\n<p>But in Java, it does not for all three:</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        int a = 0;\n        ++a++; // does not compile\n        (++a)++; // does not compile\n        ++(a++); // does not compile\n    }\n}\n</code></pre>\n<p>Is there any reason why C++ compiles this but not in Java?</p>\n", "Tags": "<java><c++><lvalue><rvalue>", "OwnerUserId": "3232207", "AnswerCount": "1"}, "27021971": {"ParentId": "27021465", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>None of the examples work in Java because both postfix and prefix increment operations return <em>values</em> not <em>variables</em> we can see this by going to the <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/index.html\" rel=\"nofollow\">JLS</a> section on <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.14.2\" rel=\"nofollow\">Postfix Increment Operator ++</a> for an example and it says:</p>\n<blockquote>\n<p id=\"so_27021465_27021971_0\">The result of the postfix increment expression is not a variable, but a value. </p>\n</blockquote>\n<p>The JLS section for <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.15.1\" rel=\"nofollow\">Prefix Increment Operator ++</a> says the same thing.</p>\n<p>This would be like trying to increment a literal value (<em><a href=\"http://rextester.com/SCDT67524\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>2++ ;\n++3 ;\n</code></pre>\n<p>which gives the following error:</p>\n<pre><code>required: variable\nfound:    value\n</code></pre>\n<p>Which is the same error we receive for your examples.</p>\n<p>In C++ prefix increment returns an lvalue but postfix increment returns an prvalue and both prefix and postfix increment in C++ require an lvalue. So your first and third C++ example:</p>\n<pre><code>++a++;\n++(a++)\n</code></pre>\n<p>fails because you are attempting to apply prefix increment to a prvalue. While the second C++ example:</p>\n<pre><code>(++a)++;\n</code></pre>\n<p>is okay because prefix increment returns an lvalue.</p>\n<p>For reference the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++ standard</a> in section <code>5.2</code> <em>Postfix expressions</em> says:</p>\n<blockquote>\n<p id=\"so_27021465_27021971_1\">The value of a postfix ++ expression is the value of its operand [...] The operand shall be a modifiable lvalue </p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_27021465_27021971_2\">The result is a prvalue</p>\n</blockquote>\n<p>and section <code>5.3</code> <em>Unary expressions</em> says:</p>\n<blockquote>\n<p id=\"so_27021465_27021971_3\">The operand of prefix ++ is modified [...] The\n  operand shall be a modifiable lvalue</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_27021465_27021971_4\">The result is the updated operand; it is an lvalue</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-11-22T18:38:47.703", "Id": "27021971", "Score": "11", "CreationDate": "2014-11-19T16:30:30.443", "LastActivityDate": "2014-11-22T18:38:47.703"}, "bq_ids": {"n4140": {"so_27021465_27021971_4": {"section_id": 6074, "quality": 0.8, "length": 4}, "so_27021465_27021971_1": {"section_id": 6009, "quality": 0.8181818181818182, "length": 9}, "so_27021465_27021971_3": {"section_id": 6074, "quality": 0.75, "length": 6}}, "n3337": {"so_27021465_27021971_4": {"section_id": 5842, "quality": 0.8, "length": 4}, "so_27021465_27021971_1": {"section_id": 5777, "quality": 0.8181818181818182, "length": 9}, "so_27021465_27021971_3": {"section_id": 5842, "quality": 0.75, "length": 6}}, "n4659": {"so_27021465_27021971_4": {"section_id": 7570, "quality": 0.8, "length": 4}, "so_27021465_27021971_1": {"section_id": 7508, "quality": 0.8181818181818182, "length": 9}, "so_27021465_27021971_3": {"section_id": 7570, "quality": 0.75, "length": 6}}}});