post_cb({"14309664": {"ParentId": "14309633", "CommentCount": "6", "Body": "<p>The default argument will be destroyed at the end of the complete expression that contains the function call.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "14309664", "Score": "9", "CreationDate": "2013-01-13T23:53:12.037", "LastActivityDate": "2013-01-13T23:53:12.037"}, "14309633": {"CommentCount": "7", "AcceptedAnswerId": "14309664", "PostTypeId": "1", "LastEditorUserId": "427762", "CreationDate": "2013-01-13T23:50:23.713", "LastActivityDate": "2013-01-14T01:08:08.047", "LastEditDate": "2013-01-13T23:56:05.510", "ViewCount": "186", "FavoriteCount": "1", "Title": "when are default argument object destroyed?", "Id": "14309633", "Score": "6", "Body": "<pre><code>void foo(const Object &amp; o = Object()) {\n      return;\n}\n</code></pre>\n<p>In the function above, when is ~Object supposed to be called ? when the function exit or when at the end of the block surrounding the call site ?</p>\n", "Tags": "<c++><destructor>", "OwnerUserId": "427762", "AnswerCount": "3"}, "14309880": {"ParentId": "14309633", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>To elaborate a bit on what <em>David</em> said, the standard says in section <strong>12.2 [class.temporary]</strong>:</p>\n<blockquote>\n<p id=\"so_14309633_14309880_0\">There are two contexts in which temporaries are destroyed at a\n  different point than the end of the full-expression. [...] The second\n  context is when a reference is bound to a temporary. The temporary to\n  which the reference is bound or the temporary that is the complete\n  object of a subobject to which the reference is bound persists for the\n  lifetime of the reference except:</p>\n<ul>\n<li>...</li>\n<li>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression\n  containing the call.</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>So they are neither destroyed when the function exits nor when the block containing the call ends, but at the end of the complete statement that contains the function call (simply said, at the first semicolon after the function call, in the calling context).</p>\n<p><strong>EDIT:</strong> So say we got:</p>\n<pre><code>int foo(const Object &amp; o = Object());\n\nsome_stuff();    \nstd::cout &lt;&lt; (foo() + 7);\nother_stuff();\n</code></pre>\n<p>This sould be roughly equivalent to the following (mind the conceptual scope block):</p>\n<pre><code>some_stuff(); \n{\n    Object o;             // create temprorary\n    int i = foo(o);       // and use it\n    int j = i + 7;        // do other things\n    std::cout &lt;&lt; j;       // while o still alive\n}                         // finally destroy o\nother_stuff();\n</code></pre>\n<p><strong>EDIT:</strong> As pointed out by <em>Michael</em> in his comment, this <em>\"statement/semicolon\"</em>-analogy I gave is rather a simplification of the term <em>\"full-expression\"</em> and there are cases where it is a bit different, like his example:</p>\n<pre><code>if(foo()) bar();\n</code></pre>\n<p>Which would destroy the temporary before <code>bar</code> is called and thus be different from the expression statement:</p>\n<pre><code>foo() ? bar() : 0;\n</code></pre>\n<p>But nevertheless, the <em>\"semicolon\"</em>-analogy is often a good fit, even if a full-expression is not neccessarily the same as a statement (which can consist of multiple full-expressions).</p>\n", "OwnerUserId": "743214", "LastEditorUserId": "743214", "LastEditDate": "2013-01-14T01:08:08.047", "Id": "14309880", "Score": "6", "CreationDate": "2013-01-14T00:25:42.817", "LastActivityDate": "2013-01-14T01:08:08.047"}, "bq_ids": {"n4140": {"so_14309633_14309880_0": {"section_id": 382, "quality": 0.6129032258064516, "length": 19}}, "n3337": {"so_14309633_14309880_0": {"section_id": 373, "quality": 0.6129032258064516, "length": 19}}, "n4659": {"so_14309633_14309880_0": {"section_id": 397, "quality": 0.5806451612903226, "length": 18}}}, "14309698": {"ParentId": "14309633", "CommentCount": "0", "Body": "<p>I don't think this code should compile. You can't bind a reference to a temporary unless it's <code>const</code>. And if it was <code>const</code> the temporary should be kept alive until the end of the function expression. Just the same as a local variable defined within it.</p>\n", "OwnerUserId": "1594090", "PostTypeId": "2", "Id": "14309698", "Score": "0", "CreationDate": "2013-01-13T23:57:33.687", "LastActivityDate": "2013-01-13T23:57:33.687"}});