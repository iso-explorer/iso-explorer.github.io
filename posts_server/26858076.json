post_cb({"26858409": {"ParentId": "26858076", "CommentCount": "0", "Body": "<p>A non-template function is a better match than a function template.</p>\n<p>Reference (C++ Draft Standard N3337):</p>\n<blockquote>\n<p id=\"so_26858076_26858409_0\"><strong>13.3.3 Best viable function</strong></p>\n<p id=\"so_26858076_26858409_1\">...</p>\n<p id=\"so_26858076_26858409_2\">Given these definitions, a viable function F1 is defined to be a better function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n<p id=\"so_26858076_26858409_3\">...</p>\n<p id=\"so_26858076_26858409_4\">\u2014 F1 is a non-template function and F2 is a function template specialization, or, if not that,</p>\n<p id=\"so_26858076_26858409_5\">\u2014 F1 and F2 are function template specializations, and the function template for F1 is more specialized\n  than the template for F2 according to the partial ordering rules described in 14.5.6.2.</p>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "26858409", "Score": "1", "CreationDate": "2014-11-11T05:48:48.993", "LastActivityDate": "2014-11-11T05:48:48.993"}, "26858349": {"ParentId": "26858076", "CommentCount": "2", "Body": "<p>Its obvious behavior, actual param matching with formal. As template is concerned the compiler doesn't know what type is T, also call to template function has different syntax.</p>\n", "OwnerUserId": "2951452", "PostTypeId": "2", "Id": "26858349", "Score": "0", "CreationDate": "2014-11-11T05:42:57.627", "LastActivityDate": "2014-11-11T05:42:57.627"}, "bq_ids": {"n4140": {"so_26858076_26858409_5": {"section_id": 603, "quality": 0.9333333333333333, "length": 14}, "so_26858076_26858409_2": {"section_id": 603, "quality": 0.85, "length": 17}, "so_26858076_26858409_4": {"section_id": 111, "quality": 1.0, "length": 5}}, "n3337": {"so_26858076_26858409_5": {"section_id": 593, "quality": 0.9333333333333333, "length": 14}, "so_26858076_26858409_2": {"section_id": 593, "quality": 0.85, "length": 17}, "so_26858076_26858409_4": {"section_id": 106, "quality": 1.0, "length": 5}}, "n4659": {"so_26858076_26858409_5": {"section_id": 629, "quality": 0.9333333333333333, "length": 14}, "so_26858076_26858409_2": {"section_id": 629, "quality": 0.85, "length": 17}, "so_26858076_26858409_4": {"section_id": 115, "quality": 1.0, "length": 5}}}, "26858076": {"CommentCount": "0", "ViewCount": "38", "CreationDate": "2014-11-11T05:22:03.347", "LastActivityDate": "2014-11-11T05:48:48.993", "Title": "what happens when overloaded method has template class as parameter", "AcceptedAnswerId": "26858409", "PostTypeId": "1", "Id": "26858076", "Score": "0", "Body": "<p>C++ allows us to write generic functions using Templates. And it also has the feature of function overloading.\n<p>I have written the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\ntemplate &lt;typename T&gt;\nvoid test(T a)\n{\n    cout&lt;&lt;\"using template\";    \n}\nvoid test(int a)\n{\n    cout&lt;&lt;\"using int\";\n}\nint main()\n{\n\n   test(10);\n   return 0;\n}\n</code></pre>\n<p>it's out put is:</p>\n<pre><code>using int\n</code></pre>\n<p>I want to know that on what basis that particular method is getting selected?</p>\n</p>", "Tags": "<c++><templates><method-overloading>", "OwnerUserId": "4079422", "AnswerCount": "2"}});