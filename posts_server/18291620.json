post_cb({"18292045": {"ParentId": "18291620", "CommentCount": "0", "Body": "<p>The answer for xorguy is pretty good.</p>\n<p>I would just add some quote from the standard :</p>\n<blockquote>\n<p id=\"so_18291620_18292045_0\"><strong>25.4 Sorting and related operations [alg.sorting]</strong></p>\n<p id=\"so_18291620_18292045_1\">For algorithms other than those described in 25.4.3 to work correctly, <strong>comp has to induce a <em>strict weak ordering</em> on the values.</strong></p>\n<p id=\"so_18291620_18292045_2\">The term <em>strict</em> refers to the requirement of an irreflexive relation (!comp(x, x) for all x), and the term <em>weak</em> to requirements that are not as strong as those for a total ordering, but stronger than those for a partial ordering.</p>\n</blockquote>\n<p>So xorguy explains it very well : You <code>comp</code> function says that <code>a &lt; b</code> when <code>a == b</code> which doesn't follow the <strong>strict weak ordering</strong> rule...</p>\n", "OwnerUserId": "1394283", "PostTypeId": "2", "Id": "18292045", "Score": "8", "CreationDate": "2013-08-17T18:29:32.350", "LastActivityDate": "2013-08-17T18:29:32.350"}, "18291620": {"CommentCount": "11", "ViewCount": "5775", "LastActivityDate": "2013-08-17T23:16:12.633", "Body": "<p>The following program is compiled with VC++ 2012.</p>\n<pre><code>#include &lt;algorithm&gt;\n\nstruct A\n{\n    A()\n        : a()\n    {}\n\n    bool operator &lt;(const A&amp; other) const\n    {\n        return a &lt;= other.a;\n    }\n\n    int a;\n};\n\nint main()\n{\n    A coll[8];\n    std::sort(&amp;coll[0], &amp;coll[8]); // Crash!!!\n}\n</code></pre>\n<p>If I change <code>return a &lt;= other.a;</code> to <code>return a &lt; other.a;</code> then the program runs as expected with no exception.</p>\n<p>Why?</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "18291727", "FavoriteCount": "2", "Title": "Why will std::sort crash if the comparison function is not as operator <?", "Id": "18291620", "Score": "12", "CreationDate": "2013-08-17T17:41:41.297", "Tags": "<c++><algorithm><exception><standards>", "OwnerUserId": "508343", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18291620_18292045_1": {"section_id": 1395, "quality": 0.8666666666666667, "length": 13}, "so_18291620_18292045_2": {"section_id": 1396, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_18291620_18292045_1": {"section_id": 1389, "quality": 0.8666666666666667, "length": 13}, "so_18291620_18292045_2": {"section_id": 1390, "quality": 0.8636363636363636, "length": 19}}, "n4659": {"so_18291620_18292045_1": {"section_id": 1513, "quality": 0.7333333333333333, "length": 11}, "so_18291620_18292045_2": {"section_id": 1514, "quality": 0.8636363636363636, "length": 19}}}, "18291727": {"ParentId": "18291620", "LastEditDate": "2017-05-23T11:53:19.437", "CommentCount": "4", "CreationDate": "2013-08-17T17:53:55.600", "OwnerUserId": "2632282", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "18291727", "Score": "18", "Body": "<p><code>std::sort</code> requires a sorter which satisfies the <strong>strict weak ordering</strong> rule, which is explained \n<a href=\"https://stackoverflow.com/a/981299/2632282\">here</a></p>\n<p>So, your comparer says that <code>a &lt; b</code>when <code>a == b</code> which doesn't follow the <strong>strict weak ordering</strong> rule, it is possible that the algorithm will crash because it'll enter in an infinite loop.</p>\n", "LastActivityDate": "2013-08-17T23:16:12.633"}});