post_cb({"bq_ids": {"n4140": {"so_32665221_32665395_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 382}, "so_32665221_32665221_0": {"length": 40, "quality": 0.8, "section_id": 382}}, "n3337": {"so_32665221_32665395_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 373}, "so_32665221_32665221_0": {"length": 40, "quality": 0.8, "section_id": 373}}, "n4659": {"so_32665221_32665395_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 397}, "so_32665221_32665221_0": {"length": 29, "quality": 0.58, "section_id": 397}}}, "32665221": {"ViewCount": "122", "Body": "<p>Here is the quote from standard :</p>\n<blockquote>\n<p id=\"so_32665221_32665221_0\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or the temporary that is the\n  complete object to a subobject of which the temporary is bound\n  persists for the lifetime of the reference except as specified below.\n  A temporary bound to a reference member in a constructor\u2019s\n  ctor-initializer (\u00a712.6.2 [class.base.init]) persists until the\n  constructor exits. A temporary bound to a reference parameter in a\n  function call (\u00a75.2.2 [expr.call]) persists until the completion of\n  the full expression containing the call.</p>\n</blockquote>\n<p>Please look at the code :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct foo{const char* bar ; foo(): bar(\"This is foo\"){} };\n\nfoo returnByValue(){ return foo(); }\nconst foo&amp; returnByConstRef() { return returnByValue();  }\n\nint main() {\nstd::cout&lt;&lt; returnByConstRef().bar  &lt;&lt;std::endl; // is life of temp is extended in while this expression?\nreturn 0;\n}\n</code></pre>\n<p>is the above program valid? or <strong>temp object in the following statement dies before return statement leaves the function?</strong></p>\n<pre><code>return returnByValue();\n</code></pre>\n<p>if so making the statement</p>\n<pre><code>const char*&amp; jinjja = returnByConstRef().bar;\n</code></pre>\n<p>is invalid? </p>\n", "Title": "Is there a sequence point between return and expression in return statement?", "CreationDate": "2015-09-19T06:51:32.617", "LastActivityDate": "2015-09-23T10:55:09.193", "CommentCount": "2", "LastEditDate": "2015-09-23T10:55:09.193", "PostTypeId": "1", "LastEditorUserId": "341065", "Id": "32665221", "Score": "0", "OwnerUserId": "4882052", "Tags": "<c++>", "AnswerCount": "1"}, "32665395": {"Id": "32665395", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_32665221_32665395_0\">The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not\n  extended; the temporary is destroyed at the end of the full-expression in the return statement.</p>\n</blockquote>\n<p>This should answer your question.</p>\n<p>It may help to know that when a function returns, the order of events is as follows:</p>\n<ol>\n<li>The return value (if any) is initialized by the expression in the <code>return</code> statement (if any). This initialization, which includes the evaluation of the expression, constitutes a <em>full-expression</em>.</li>\n<li>Temporaries created in the <code>return</code> statement are destroyed (in reverse order of initialization). (This doesn't include the temporary introduced to hold the return value, in the case that the function's return type is not a reference.)</li>\n<li>Automatic local variables  are destroyed (in reverse order of initialization).</li>\n<li>Control returns to the caller. The <em>full-expression</em> containing the call completes evaluation.</li>\n<li>If the function's declared return type is not a reference, the function call expression's value is a temporary. Said temporary, if not bound to a reference, is destroyed along with all the other temporaries created in the <em>full-expression</em> containing the call (in reverse order of initialization).</li>\n</ol>\n", "LastEditorUserId": "481267", "LastActivityDate": "2015-09-21T17:24:02.867", "Score": "2", "CreationDate": "2015-09-19T07:11:31.227", "ParentId": "32665221", "CommentCount": "3", "OwnerUserId": "481267", "LastEditDate": "2015-09-21T17:24:02.867"}});