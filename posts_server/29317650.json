post_cb({"29318289": {"ParentId": "29317650", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You have encountered a special rule of <em>using-declarations</em>. C++14 [namespace.udecl]/15:</p>\n<blockquote>\n<p id=\"so_29317650_29318289_0\">When a <em>using-declaration</em> brings names from a base class into a\n  derived class scope, member functions and member function templates in\n  the derived class override and/or hide member functions and member\n  function templates with the same name, <em>parameter-type-list</em>,\n  <em>cv-qualification</em>, and <em>ref-qualifier</em> (if any) in a base class (rather than conflicting). [...]\n  [ <em>Example:</em></p>\n<pre><code>struct B {\n    virtual void f(int);\n    virtual void f(char);\n    void g(int);\n    void h(int);\n};\n\nstruct D : B {\n    using B::f;\n    void f(int);    // OK: D::f(int) overrides B::f(int);\n\n    using B::g;\n    void g(char);   // OK\n\n    using B::h;\n    void h(int);    // OK: D::h(int) hides B::h(int)\n};\n\nvoid k(D* p)\n{\n    p-&gt;f(1);        // calls D::f(int)\n    p-&gt;f(\u2019a\u2019);      // calls B::f(char)\n    p-&gt;g(1);        // calls B::g(int)\n    p-&gt;g(\u2019a\u2019);      // calls D::g(char)\n}\n</code></pre>\n<p id=\"so_29317650_29318289_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2015-03-28T14:35:23.337", "Id": "29318289", "Score": "3", "CreationDate": "2015-03-28T14:29:22.817", "LastActivityDate": "2015-03-28T14:35:23.337"}, "29317650": {"CommentCount": "1", "ViewCount": "131", "PostTypeId": "1", "LastEditorUserId": "3563572", "CreationDate": "2015-03-28T13:21:47.060", "LastActivityDate": "2015-03-30T11:47:58.747", "Title": "Undo name hiding by \"using\" keyword. Does not work in grandchild class", "LastEditDate": "2015-03-30T11:47:58.747", "Id": "29317650", "Score": "3", "Body": "<p>For example in below program I undo name hiding by \"using\" keyword. If I have base and one derived class \"im getting expected ambiguous call error\". But if I have two derived class(child and grand child) now child and grand child having same overloaded function here also I undo name hiding by \"using\" keyword. But It is getting compiled and got output. My question is why im not getting error as \"ambiguous call to overloaded function\".</p>\n<pre><code>class baseNameHiding\n{\nprotected:\nint nameHidingexample(int t)\n{\n    cout&lt;&lt;\"im baseeeeeeeeeeee\"&lt;&lt;endl;\n    return 0;\n}\n};\nclass derivedNameHiding:public baseNameHiding\n{   \npublic:\n    float nameHidingexample(float s)\n    {\n        cout&lt;&lt;\"im derived\"&lt;&lt;endl;\n        return 0;\n    }\n    using baseNameHiding::nameHidingexample;\n\n};\nclass grandDerivedNameHiding:public derivedNameHiding\n{\npublic:\n    float nameHidingexample(float f)\n    {\n        cout&lt;&lt;\"im grand derived\"&lt;&lt;endl;\n        return 0;\n    }\n    using baseNameHiding::nameHidingexample;\n    using derivedNameHiding::nameHidingexample;\n\n};\nint main()\n{\n    char a;float f = 0.0;\n    derivedNameHiding derived;\n    derived.nameHidingexample(0);\n    grandDerivedNameHiding grandchild;\n    grandchild.nameHidingexample(f);\n    cin&gt;&gt;a;\n} \n\n\n//output\nim baseeeeeeeeeeee\nim grand derived\n</code></pre>\n", "Tags": "<c++><name-hiding>", "OwnerUserId": "3563572", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29317650_29318289_0": {"section_id": 5504, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_29317650_29318289_0": {"section_id": 5290, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_29317650_29318289_0": {"section_id": 6938, "quality": 0.8888888888888888, "length": 32}}}});