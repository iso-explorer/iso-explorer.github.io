post_cb({"bq_ids": {"n4140": {"so_34941638_34941719_0": {"length": 19, "quality": 1.0, "section_id": 169}}, "n3337": {"so_34941638_34941719_0": {"length": 19, "quality": 1.0, "section_id": 163}}, "n4659": {"so_34941638_34941719_0": {"length": 19, "quality": 1.0, "section_id": 174}}}, "34941712": {"Id": "34941712", "PostTypeId": "2", "Body": "<p>Compiler does not know, whenever <code>iterator</code> is a type or a static member. You have to add <code>typename</code> before the function return type in order to help compiler to disambiguate:</p>\n<pre><code>typename std::vector&lt;ObjectType*&gt;::iterator begin();\n</code></pre>\n<p>Also, new g++ (at least, since 5.3.0) produces more readable error message:</p>\n<blockquote>\n<p id=\"so_34941638_34941712_0\">main.cpp:11:5: error: need <code>typename</code> before\n  <code>std::vector&lt;ObjectType*&gt;::iterator</code> because\n  <code>std::vector&lt;ObjectType*&gt;</code> is a dependent scope\n       <code>std::vector&lt;ObjectType*&gt;::iterator begin()</code></p>\n</blockquote>\n", "LastActivityDate": "2016-01-22T07:58:32.437", "CommentCount": "0", "CreationDate": "2016-01-22T07:58:32.437", "ParentId": "34941638", "Score": "1", "OwnerUserId": "1532460"}, "34941638": {"ViewCount": "114", "Body": "<p>I have a template class which contains a vector of pointers of a type given as a template parameter. I want to be able to use range-based iteration to iterate over a <em>limited portion</em> of the vector. My class contains the following functions:</p>\n<pre><code>template&lt; typename ObjectType &gt;\nclass ObjectList\n{\n\n    ...\n\npublic:\n\n    //! Begin iteration over a list of objects\n    std::vector&lt;ObjectType*&gt;::iterator begin();\n\n    //! Iterator to one past the end of the list of objects\n    std::vector&lt;ObjectType*&gt;::iterator end();\n\nprivate:\n\n    std::vector&lt;ObjectType*&gt; object_ptrs;\n};\n</code></pre>\n<p>This fails to compile with the description <code>Error C2061 syntax error: identifier 'iterator'</code>. I can't think of any reason why <code>std::vector&lt;ObjectType&gt;::iterator</code> should ever not be found, unless <code>ObjectType</code> itself cannot be found, but the rest of the class instantiates successfully if I remove the lines which reference <code>iterator</code>.</p>\n<p>Anyone have an idea what is going on? I'm sure it's possible I'm missing something obvious. Thanks in advance!</p>\n", "AcceptedAnswerId": "34941719", "Title": "C++11 Using Iterators for Vectors of Template Parameter Types", "CreationDate": "2016-01-22T07:53:34.817", "Id": "34941638", "CommentCount": "5", "PostTypeId": "1", "ClosedDate": "2016-01-22T08:00:43.593", "LastActivityDate": "2016-01-22T08:04:23.757", "Score": "4", "OwnerUserId": "1432965", "Tags": "<c++><templates><c++11><vector>", "AnswerCount": "3"}, "34941710": {"Id": "34941710", "PostTypeId": "2", "Body": "<p>You need to tell the compiler that iterator is a type, as it depends on a template parameter:</p>\n<pre><code>template&lt; typename ObjectType &gt;\nclass ObjectList\n{\npublic:\n\n    //! Begin iteration over a list of objects\n    typename std::vector&lt;ObjectType*&gt;::iterator begin();\n\n    //! Iterator to one past the end of the list of objects\n    typename std::vector&lt;ObjectType*&gt;::iterator end();\n\nprivate:\n\n    std::vector&lt;ObjectType*&gt; object_ptrs;\n};\n</code></pre>\n", "LastActivityDate": "2016-01-22T07:58:23.583", "CommentCount": "0", "CreationDate": "2016-01-22T07:58:23.583", "ParentId": "34941638", "Score": "1", "OwnerUserId": "193789"}, "34941719": {"Id": "34941719", "PostTypeId": "2", "Body": "<p>You should use <code>typename</code> here, because <code>std::vector&lt;ObjectType*&gt;</code> is a dependent type name which depends on the template parameter <code>ObjectType</code>.</p>\n<pre><code>typename std::vector&lt;ObjectType*&gt;::iterator begin();\ntypename std::vector&lt;ObjectType*&gt;::iterator end();\n</code></pre>\n<p>$14.6/2 Name resolution [temp.res]</p>\n<blockquote>\n<p id=\"so_34941638_34941719_0\">A name used in a template declaration or definition and that is\n  dependent on a template-parameter is assumed not to name a type unless\n  the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-01-22T08:04:23.757", "Score": "1", "CreationDate": "2016-01-22T07:58:55.337", "ParentId": "34941638", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-01-22T08:04:23.757"}});