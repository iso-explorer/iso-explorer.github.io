post_cb({"bq_ids": {"n4140": {"so_14676574_14702711_0": {"length": 19, "quality": 1.0, "section_id": 7216}}, "n3337": {"so_14676574_14702711_0": {"length": 19, "quality": 1.0, "section_id": 6960}}, "n4659": {"so_14676574_14702711_0": {"length": 19, "quality": 1.0, "section_id": 8725}}}, "14702711": {"Id": "14702711", "PostTypeId": "2", "Body": "<p>There is no type <code>T</code> that has different results for <code>std::is_integral&lt;T&gt;::value</code> and <code>std::numeric_limits&lt;T&gt;::is_integer</code>. To quote the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"noreferrer\">draft Standard</a>:</p>\n<p><strong>3.9.1 Fundamental types [basic.fundamental]</strong></p>\n<blockquote>\n<p id=\"so_14676574_14702711_0\">7 Types bool, char, char16_t, char32_t, wchar_t, and the signed and\n  unsigned integer types are collectively called integral types. A\n  synonym for integral type is integer type.[...]</p>\n</blockquote>\n<p><strong>18.3.2.4 numeric_limits members [numeric.limits.members]</strong></p>\n<pre><code>static constexpr bool is_integer;\n</code></pre>\n<blockquote>\n<p id=\"so_14676574_14702711_1\">17 True if the type is integer.</p>\n</blockquote>\n<p><strong>20.9.4.1 Primary type categories [meta.unary.cat]</strong> (table 47)</p>\n<pre><code>template &lt;class T&gt; struct is_integral;\n</code></pre>\n<blockquote>\n<p id=\"so_14676574_14702711_2\">T is an integral type (3.9.1)</p>\n</blockquote>\n", "LastEditorUserId": "636019", "LastActivityDate": "2013-02-07T21:10:07.953", "Score": "9", "CreationDate": "2013-02-05T08:05:55.973", "ParentId": "14676574", "CommentCount": "0", "OwnerUserId": "819272", "LastEditDate": "2013-02-07T21:10:07.953"}, "46699369": {"Id": "46699369", "PostTypeId": "2", "Body": "<p>The difference is that <code>std::is_integral&lt;T&gt;</code> will only recognize decimal integers including <code>bool</code> <code>char</code> <code>char16_t</code> <code>char32_t</code> <code>wchar_t</code> <code>short</code> <code>int</code> <code>long</code> <code>long long</code>. While <code>std::numeric_limits&lt;T&gt;::is_integer</code> will recognize all of those aswell as <code>float</code> <code>double</code>. Look at these two pages for more information: <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_integer\" rel=\"nofollow noreferrer\">is_integer</a>, <a href=\"http://en.cppreference.com/w/cpp/types/is_integral\" rel=\"nofollow noreferrer\">is_integral</a></p>\n", "LastActivityDate": "2017-10-12T00:06:45.840", "CommentCount": "0", "CreationDate": "2017-10-12T00:06:45.840", "ParentId": "14676574", "Score": "1", "OwnerUserId": "5206626"}, "14676574": {"ViewCount": "3157", "Body": "<p>C++11 provides two type trait template classes: <code>std::is_integer</code> and <code>std::is_integral</code>. However, I cannot tell the differences between them.</p>\n<p>What type, say T, can make <code>std::is_integer&lt;T&gt;::value</code> true and make <code>std::is_integral&lt;T&gt;::value</code> false?</p>\n", "AcceptedAnswerId": "14676672", "Title": "Differences between std::is_integer and std::is_integral?", "CreationDate": "2013-02-03T19:52:49.290", "Id": "14676574", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-02-07T21:11:53.770", "LastEditorUserId": "636019", "LastActivityDate": "2017-10-12T00:06:45.840", "Score": "15", "OwnerUserId": "508343", "Tags": "<c++><c++11><language-lawyer><typetraits>", "AnswerCount": "3"}, "14676672": {"Id": "14676672", "PostTypeId": "2", "Body": "<p><code>std::is_integer&lt;T&gt;</code> does not exist.</p>\n<p>That being said, <code>std::numeric_limits&lt;T&gt;::is_integer</code> does exist.</p>\n<p>I'm not aware of any significant difference between <code>std::numeric_limits&lt;T&gt;::is_integer</code> and <code>std::is_integral&lt;T&gt;</code>.  The latter was designed much later and became standard in C++11, whereas the former was introduced in C++98.</p>\n", "LastActivityDate": "2013-02-03T20:01:09.817", "CommentCount": "1", "CreationDate": "2013-02-03T20:01:09.817", "ParentId": "14676574", "Score": "18", "OwnerUserId": "576911"}});