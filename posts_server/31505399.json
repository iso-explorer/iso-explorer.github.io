post_cb({"bq_ids": {"n4140": {"so_31505399_31506285_1": {"length": 8, "quality": 1.0, "section_id": 411}}, "n3337": {"so_31505399_31506285_1": {"length": 8, "quality": 1.0, "section_id": 402}}, "n4659": {"so_31505399_31506285_1": {"length": 8, "quality": 1.0, "section_id": 429}}}, "31506285": {"Id": "31506285", "PostTypeId": "2", "Body": "<p>Because you are calling the destructor manually on objects. It is very rare to need to do this (see <a href=\"https://stackoverflow.com/questions/16720201/calling-destructor-explicitly\">calling destructor explicitly</a>). When you call your destructor manually, it still gets called again when the object falls out of scope. Take for example:</p>\n<pre><code>BulbasaurMoveList::BulbasaurMoveList()\n{\n    MoveList y = MoveList();\n    vector&lt;Move&gt; z = y.getList();\n    potentialMoves.push_back(z[0]);\n    potentialMoves.push_back(z[9]);\n    potentialMoves.push_back(z[10]);\n    potentialMoves.push_back(z[14]);\n    y.~MoveList();\n}\n</code></pre>\n<p><code>y</code> gets destroyed twice, and this <a href=\"https://stackoverflow.com/questions/3291507/does-explicitly-calling-destructor-result-in-undefined-behavior-here\"><strong>results in undefined behaviour</strong></a>:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_31505399_31506285_2\">Invoking the destructor on an object whose lifetime has ended results in undefined behavior per C++03 \u00a712.4/6:</p>\n</blockquote>\n<p id=\"so_31505399_31506285_1\">the behavior is undefined if the destructor is invoked for an object whose lifetime has ended</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-19T21:49:18.213", "Score": "0", "CreationDate": "2015-07-19T21:49:18.213", "ParentId": "31505399", "CommentCount": "1", "OwnerUserId": "4143855", "LastEditDate": "2017-05-23T12:14:04.283"}, "31505399": {"ViewCount": "46", "Body": "<p>When I launch my game, it seems to crash when I call the constructor. All it says is \"a.exe has stopped working\" and then I have to close the program. I've tried tracing the problem back through all my linked classes and headers but I can't see anything wrong. Maybe one of you can help me. Here are the involved classes:</p>\n<pre><code>#ifndef POKEMON_H_\n#define POKEMON_H_\n\n#include \"MoveList.cpp\"\n#include \"Elements.cpp\"\n\n    class Pokemon\n    {\n    protected:\n        std::string name;\n        double HP;\n        vector&lt;Move&gt; potentialMoves;\n        vector&lt;Move&gt; moves;\n        int attack;\n        int defense;\n        int speed;\n        int special;\n        Elements element;\n        std::string type; \n        char status; // (N)ormal, (B)urnt, (F)rozen, E - Paralyzed, (P)oisoned, (S)leep, (C)onfused\n        // int ability;\n        int ID;\n        int level;\n        double experience;\n        bool isInAir;\n        bool isInGround;\n    public:\n        Pokemon(double HP, int attack, int defense, int speed, int special, int elementNumber, std::string type, int ID, std::string name);\n        ~Pokemon();\n        virtual void setName(string x);\n        virtual string getName();\n        virtual void setHP(double x);\n        virtual double getHP();\n        virtual void setPotentialMoves(vector&lt;Move&gt; x);\n        virtual vector&lt;Move&gt; getPotentialMoves();\n        virtual Move&amp; getPotentialMove(int x);\n        virtual void setAttack(int x);\n        virtual int getAttack();\n        virtual void setDefense(int x);\n        virtual int getDefense();\n        virtual void setSpeed(int x);\n        virtual int getSpeed();\n        virtual void setSpecial(int x);\n        virtual int getSpecial();\n        virtual Elements&amp; getElement();\n        virtual string getType();\n        virtual void setStatus(char x);\n        virtual char getStatus();\n        virtual int getID();\n        virtual void setLevel(int x);\n        virtual int getLevel();\n        virtual void setExperience(double x);\n        virtual double getExperience();\n        virtual void setAir(bool x);\n        virtual bool getAir();\n        virtual void setGround(bool x);\n        virtual bool getGround();\n        virtual void setMove(const Move&amp; move, int x);\n        virtual Move&amp; getMove(int x);\n        virtual void attackMove(int moveNumber, Pokemon&amp; opponent);\n    };\n\n        class Bulbasaur: public Pokemon\n        {\n        public:\n            Bulbasaur(double HP, int attack, int defense, int speed, int special, string name);\n            ~Bulbasaur();\n        };\n\n        class Ivysaur: public Pokemon\n        {\n        public:\n            Ivysaur(double HP, int attack, int defense, int speed, int special, string name);\n            ~Ivysaur();\n        };\n\n        class Venosaur: public Pokemon\n        {\n        public:\n            Venosaur(double HP, int attack, int defense, int speed, int special, string name);\n            ~Venosaur();\n        };\n\n        #endif\n\n#include \"Pokemon.h\"\n#include &lt;cstdlib&gt;\n\nusing namespace std;\n\nPokemon::Pokemon(double HP, int attack, int defense, int speed, int special, int elementNumber, string type, int ID, string name): HP(HP), attack(attack),\n                defense(defense), speed(speed), special(special), type(type), ID(ID), name(name), element(element)\n                {\n                    ElementsList tempList = ElementsList();\n                    moves.push_back(Move());\n                    moves.push_back(Move());\n                    moves.push_back(Move());\n                    moves.push_back(Move());\n                    status = 'N';\n                    level = 1;\n                    experience = 0.0;\n                    isInAir = false;\n                    isInGround = false;\n                    element = tempList.getElement(elementNumber);\n                    tempList.~ElementsList();\n                }\n\nPokemon::~Pokemon() {}\n\nvoid Pokemon::setName(string x)\n{\n    this-&gt;name = x;\n}\n\nstring Pokemon::getName()\n{\n    return this-&gt;name;\n}\n\nvoid Pokemon::setHP(double x)\n{\n    this-&gt;HP = x;\n}\n\ndouble Pokemon::getHP()\n{\n    return this-&gt;HP;\n}\n\nvoid Pokemon::setPotentialMoves(vector&lt;Move&gt; x)\n{\n    for(int i = 0; i &lt; x.size(); i++)\n    {\n        potentialMoves.push_back(x[i]);\n    }\n}\n\nvector&lt;Move&gt; Pokemon::getPotentialMoves()\n{\n    return this-&gt;potentialMoves;\n}\n\nMove&amp; Pokemon::getPotentialMove(int x)\n{\n    return this-&gt;potentialMoves[x];\n}\n\nvoid Pokemon::setAttack(int x)\n{\n    this-&gt;attack = x;\n}\n\nint Pokemon::getAttack()\n{\n    return this-&gt;attack;\n}\n\nvoid Pokemon::setDefense(int x)\n{\n    this-&gt;defense = x;\n}\n\nint Pokemon::getDefense()\n{\n    return this-&gt;defense;\n}\n\nvoid Pokemon::setSpeed(int x)\n{\n    this-&gt;speed = x;\n}\n\nint Pokemon::getSpeed()\n{\n    return this-&gt;speed;\n}\n\nvoid Pokemon::setSpecial(int x)\n{\n    this-&gt;special = x;\n}\n\nint Pokemon::getSpecial()\n{\n    return this-&gt;special;\n}\n\nElements&amp; Pokemon::getElement()\n{\n    return this-&gt;element;\n}\n\nstring Pokemon::getType()\n{\n    return this-&gt;type;\n}\n\nvoid Pokemon::setStatus(char x)\n{\n    this-&gt;status = x;\n}\n\nchar Pokemon::getStatus()\n{\n    return this-&gt;status;\n}\n\nint Pokemon::getID()\n{\n    return this-&gt;ID;\n}\n\nvoid Pokemon::setLevel(int x)\n{\n    this-&gt;level = x;\n}\n\nint Pokemon::getLevel()\n{\n    return this-&gt;level;\n}\n\nvoid Pokemon::setExperience(double x)\n{\n    this-&gt;experience = x;\n}\n\ndouble Pokemon::getExperience()\n{\n    return this-&gt;experience;\n}\n\nvoid Pokemon::setAir(bool x)\n{\n    this-&gt;isInAir = x;\n}\n\nbool Pokemon::getAir()\n{\n    return this-&gt;isInAir;\n}\n\nvoid Pokemon::setGround(bool x)\n{\n    this-&gt;isInGround = x;\n}\n\nbool Pokemon::getGround()\n{\n    return this-&gt;isInGround;\n}\n\nvoid Pokemon::setMove(const Move&amp; move, int x)\n{\n    this-&gt;moves[x] = move;\n}\n\nMove&amp; Pokemon::getMove(int x)\n{\n    return this-&gt;moves[x];\n}\n\nvoid Pokemon::attackMove(int moveNumber, Pokemon&amp; opponent)\n{\n    Move currentMove = this-&gt;getMove(moveNumber);\n    double damageDealt = opponent.getHP() - currentMove.getHPdiff();\n    int attackDifference = opponent.getAttack() - currentMove.getattackDiff();\n    int defenseDifference = opponent.getDefense() - currentMove.getdefenseDiff();\n    int speedDifference = opponent.getSpeed() - currentMove.getspeedDiff();\n    int specialDifference = opponent.getSpecial() - currentMove.getspecialDiff();\n    char statusDifference = currentMove.getstatusDiff();\n    bool isInAirDifference = currentMove.getisInAirDiff();\n    bool isInGroundDifference = currentMove.getisInGroundDiff();\n    opponent.setHP(damageDealt);\n    opponent.setAttack(attackDifference);\n    opponent.setDefense(defenseDifference);\n    opponent.setSpeed(speedDifference);\n    opponent.setSpecial(specialDifference);\n    opponent.setStatus(statusDifference);\n    this-&gt;setAir(isInAirDifference);\n    this-&gt;setGround(isInGroundDifference);\n}\n\nBulbasaur::Bulbasaur(double HP, int attack, int defense, int speed, int special, string name):\n            Pokemon(HP, attack, defense, speed, special, 4, \"Seed\", 1, name)\n            {\n                BulbasaurMoveList temp = BulbasaurMoveList();\n                this-&gt;setPotentialMoves(temp.getPotentialMoves());\n                temp.~BulbasaurMoveList();\n                vector&lt;Move&gt; temp2;\n                for(int i = 0; i &lt; this-&gt;getPotentialMoves().size(); i++)\n                {\n                    temp2.push_back(this-&gt;getPotentialMove(i));\n                }\n                vector&lt;int&gt; usedNums;\n                srand(0);\n                int i = 0;\n                while(i &lt; 4)\n                {\n                    int r = rand() % 4;\n                    if(i == 0)\n                    {\n                        usedNums.push_back(r);\n                    } else\n                    {\n                        for(int j = 0; j &lt; usedNums.size(); j++)\n                        {\n                            if(usedNums[j] == r)\n                            {\n                                continue;\n                            }\n                        }\n                        usedNums.push_back(r);\n                    } \n                    this-&gt;setMove(temp2[r], i);\n                    i++;\n                }\n            }\n</code></pre>\n<p>And here is MoveList.cpp:</p>\n<pre><code>#include \"MoveList.h\"\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nMove::Move(string name, string type, int PP, double HPdiff, int attackDiff, int defenseDiff, int speedDiff, int specialDiff,\n        char statusDiff, bool isInAirDiff, bool isInGroundDiff): name(name), type(type), PP(PP), HPdiff(HPdiff), attackDiff(attackDiff),\n    defenseDiff(defenseDiff), speedDiff(speedDiff), specialDiff(specialDiff), statusDiff(statusDiff), isInAirDiff(isInAirDiff),\n    isInGroundDiff(isInGroundDiff) {}\n\nMove::Move(): name(), type(), PP(), HPdiff(), attackDiff(), defenseDiff(), speedDiff(), specialDiff(), statusDiff(), isInAirDiff(),\n            isInGroundDiff() {}\n\nstring Move::getName()\n{\n    return this-&gt;name;\n}\n\nstring Move::getType()\n{\n    return this-&gt;type;\n}\n\nint Move::getPP()\n{\n    return this-&gt;PP;\n}\n\ndouble Move::getHPdiff()\n{\n    return this-&gt;HPdiff;\n}\n\nint Move::getattackDiff()\n{\n    return this-&gt;attackDiff;\n}\n\nint Move::getdefenseDiff()\n{\n    return this-&gt;defenseDiff;\n}\n\nint Move::getspeedDiff()\n{\n    return this-&gt;speedDiff;\n}\n\nint Move::getspecialDiff()\n{\n    return this-&gt;specialDiff;\n}\n\nchar Move::getstatusDiff()\n{\n    return this-&gt;statusDiff;\n}\n\nbool Move::getisInAirDiff()\n{\n    return this-&gt;isInAirDiff;\n}\n\nbool Move::getisInGroundDiff()\n{\n    return this-&gt;isInGroundDiff;\n}\n\nMoveList::MoveList()\n{\n    masterList.push_back(Move(\"Pound\", \"NORMAL\", 35, 8.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Karate Chop\", \"FIGHTING\", 25, 10.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Double Slap\", \"NORMAL\", 15, 3.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Comet Punch\", \"NORMAL\", 15, 3.6, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Mega Punch\", \"NORMAL\", 20, 16.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Pay Day\", \"NORMAL\", 20, 8.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Fire Punch\", \"FIRE\", 15, 15.0, 0, 0, 0, 0, 'B', false, false));\n    masterList.push_back(Move(\"Ice Punch\", \"ICE\", 15, 15.0, 0, 0, 0, 0, 'F', false, false));\n    masterList.push_back(Move(\"Thunder Punch\", \"ELECTRIC\", 15, 15.0, 0, 0, 0, 0, 'E', false, false));\n    masterList.push_back(Move(\"Scratch\", \"NORMAL\", 35, 8.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Vice Grip\", \"NORMAL\", 30, 11.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Guillotine\", \"NORMAL\", 5, 100.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Razor Wind\", \"NORMAL\", 10, 20.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Swords Dance\", \"NORMAL\", 20, 0.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Cut\", \"NORMAL\", 30, 10.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Gust\", \"FLYING\", 35, 8.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Wing Attack\", \"FLYING\", 35, 12.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Whirlwind\", \"NORMAL\", 20, 0.0, 0, 0, 0, 0, 'N', false, false));\n    masterList.push_back(Move(\"Fly\", \"NORMAL\", 15, 18.0, 0, 0, 0, 0, 'N', true, false));\n    masterList.push_back(Move(\"Bind\", \"NORMAL\", 20, 3.0, 0, 0, 0, 0, 'N', false, false));\n}\n\nMoveList::~MoveList() {}\n\nvector&lt;Move&gt; MoveList::getList()\n{\n    return this-&gt;masterList;\n}\n\nBulbasaurMoveList::BulbasaurMoveList()\n{\n    MoveList y = MoveList();\n    vector&lt;Move&gt; z = y.getList();\n    potentialMoves.push_back(z[0]);\n    potentialMoves.push_back(z[9]);\n    potentialMoves.push_back(z[10]);\n    potentialMoves.push_back(z[14]);\n    y.~MoveList();\n}\n\nBulbasaurMoveList::~BulbasaurMoveList() {}\n\nvector&lt;Move&gt; BulbasaurMoveList::getPotentialMoves()\n{\n    return potentialMoves;\n}\n\nIvysaurMoveList::IvysaurMoveList()\n{\n    MoveList y = MoveList();\n    vector&lt;Move&gt; z = y.getList();\n    potentialMoves.push_back(z[0]);\n    potentialMoves.push_back(z[9]);\n    potentialMoves.push_back(z[10]);\n    potentialMoves.push_back(z[14]);\n    y.~MoveList();\n}\n\nIvysaurMoveList::~IvysaurMoveList() {}\n\nvector&lt;Move&gt; IvysaurMoveList::getPotentialMoves()\n{\n    return potentialMoves;\n}\n\nVenosaurMoveList::VenosaurMoveList()\n{\n    MoveList y = MoveList();\n    vector&lt;Move&gt; z = y.getList();\n    potentialMoves.push_back(z[0]);\n    potentialMoves.push_back(z[9]);\n    potentialMoves.push_back(z[10]);\n    potentialMoves.push_back(z[14]);\n    y.~MoveList();\n}\n\nVenosaurMoveList::~VenosaurMoveList() {}\n\nvector&lt;Move&gt; VenosaurMoveList::getPotentialMoves()\n{\n    return potentialMoves;\n}\n</code></pre>\n<p>Elements.cpp:</p>\n<pre><code>#include \"Elements.h\"\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nElements::Elements(string name): name(name) {}\n\nElements::Elements() {}\n\nElementsList::ElementsList()\n{\n    masterList.push_back(Elements(\"NORMAL\"));\n    masterList.push_back(Elements(\"FIRE\"));\n    masterList.push_back(Elements(\"WATER\"));\n    masterList.push_back(Elements(\"ELECTRIC\"));\n    masterList.push_back(Elements(\"GRASS\"));\n    masterList.push_back(Elements(\"ICE\"));\n    masterList.push_back(Elements(\"FIGHTING\"));\n    masterList.push_back(Elements(\"POISON\"));\n    masterList.push_back(Elements(\"GROUND\"));\n    masterList.push_back(Elements(\"FLYING\"));\n    masterList.push_back(Elements(\"PSYCHIC\"));\n    masterList.push_back(Elements(\"BUG\"));\n    masterList.push_back(Elements(\"ROCK\"));\n    masterList.push_back(Elements(\"GHOST\"));\n    masterList.push_back(Elements(\"DRAGON\"));\n}\n\nElementsList::~ElementsList() {}\n\nElements ElementsList::getElement(int x)\n{\n    return masterList[x];\n}\n</code></pre>\n<p>And then the main function:</p>\n<pre><code>#include \"Pokemon.cpp\"\n#include &lt;iostream&gt;\n#include &lt;limits&gt;\n#include &lt;cstdlib&gt;\n\nusing namespace std;\n\nint main()\n{\n    cout &lt;&lt; \"Battle Test 1: Bulbasaur vs. Ivysaur Same Level\" &lt;&lt; endl;\n    cout &lt;&lt; \"test\" &lt;&lt; endl;\n    try\n    {\n        Bulbasaur test1 = Bulbasaur(300.0, 20, 30, 10, 5, \"Chris\");\n    } catch(exception&amp; e)\n    {\n        cout &lt;&lt; e.what() &lt;&lt; endl;\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "31506285", "Title": "Program Crashes Upon Launch", "CreationDate": "2015-07-19T20:04:15.293", "Id": "31505399", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-07-19T21:49:18.213", "Score": "0", "OwnerUserId": "4959155", "Tags": "<c++><unity3d><crash>", "AnswerCount": "1"}});