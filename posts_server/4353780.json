post_cb({"4353780": {"CommentCount": "0", "AcceptedAnswerId": "4353788", "PostTypeId": "1", "LastEditorUserId": "44390", "CreationDate": "2010-12-04T13:42:32.070", "LastActivityDate": "2012-06-20T20:40:03.553", "LastEditDate": "2012-06-20T20:40:03.553", "ViewCount": "4167", "FavoriteCount": "1", "Title": "Why floating point value such as 3.14 are considered as double by default in MSVC?", "Id": "4353780", "Score": "8", "Body": "<p>Why do I need to put 3.14f instead of 3.14 to disable all those warnings ?\nIs there a coherent reason reason for this ?</p>\n", "Tags": "<c++><visual-c++><floating-point><double>", "OwnerUserId": "414063", "AnswerCount": "5"}, "4353923": {"ParentId": "4353780", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C and C++ prefer double to float in a couple of ways. As you noticed, fractional literals are double unless explicitly made floats. Also, floats can't be passed in varargs, they're always promoted to double (in the same way char and short are promoted to int in varargs).</p>\n<p>It's probably better to think of <code>float</code> as being a contracted <code>double</code>, rather than <code>double</code> being an extended <code>float</code>. That is, <code>double</code> is the preferred floating point type, and <code>float</code> is used whenever a smaller version of <code>double</code> is required for some particular case. That's the closest I know to a coherent reason, and then the rule makes sense, even if you happen to be in the case where you need a smaller version.</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2010-12-04T17:18:52.390", "Id": "4353923", "Score": "4", "CreationDate": "2010-12-04T14:17:21.713", "LastActivityDate": "2010-12-04T17:18:52.390"}, "4353796": {"ParentId": "4353780", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>This is probably a standard in C world. Double is preferred since it's more precise and you probably won't see any performance differences. Read <a href=\"https://stackoverflow.com/questions/1074474/should-i-use-double-or-float\">this post</a>.</p>\n", "OwnerUserId": "489261", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:51:39.170", "Id": "4353796", "Score": "0", "CreationDate": "2010-12-04T13:46:02.233", "LastActivityDate": "2010-12-04T13:46:02.233"}, "4354742": {"ParentId": "4353780", "CommentCount": "1", "Body": "<p>Because <code>double</code> can approximate 3.14 much better than <code>float</code>, maybe? Here are the exact values:</p>\n<p>3.140000000000000124344978758017532527446746826171875 (<code>double</code>)</p>\n<p>3.1400001049041748046875 (<code>float</code>)</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "4354742", "Score": "0", "CreationDate": "2010-12-04T17:16:17.477", "LastActivityDate": "2010-12-04T17:16:17.477"}, "4353788": {"ParentId": "4353780", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>That's what the C++ (and C) standard decided. Floating point literals are of type double, and if you need them to be floats, you suffix them with a <code>f</code>. There doesn't appear to be any specifically stated reason as to why, but I'd guess it's a) For compatibility with C, and b) A trade-off between precision and storage.</p>\n<blockquote>\n<p id=\"so_4353780_4353788_0\"><strong>2.13.3 Floating literals</strong> The type\n  of a \ufb02oating literal is double unless\n  explicitly specified by a suffix. The\n      suffixes f and F specify float, the suffixes l and L specify long double.\n  If the scaled value is not in the\n  range of\n      representable values for its type, the program is ill-formed.</p>\n</blockquote>\n", "OwnerUserId": "126769", "LastEditorUserId": "168986", "LastEditDate": "2010-12-04T14:14:25.753", "Id": "4353788", "Score": "17", "CreationDate": "2010-12-04T13:44:33.643", "LastActivityDate": "2010-12-04T14:14:25.753"}, "4353953": {"ParentId": "4353780", "CommentCount": "1", "Body": "<p>This is not peculiar to MSVC, it is required by the language standard.</p>\n<p>I would suggest that it made sense <em>not</em> to reduce precision unless explicitly requested, so the default is double.  </p>\n<p>The 6 significant digits of precision that a single-precision float provides is seldom sufficient for general use and certainly on a modern desktop processor would be used as a hand coded optimisation where the writer has determined that it is sufficient and necessary; so it makes sense that an explicit visible marker is required to specify a single-precision literal.</p>\n", "OwnerUserId": "168986", "PostTypeId": "2", "Id": "4353953", "Score": "1", "CreationDate": "2010-12-04T14:25:23.160", "LastActivityDate": "2010-12-04T14:25:23.160"}, "bq_ids": {"n4140": {"so_4353780_4353788_0": {"section_id": 5348, "quality": 0.8148148148148148, "length": 22}}, "n3337": {"so_4353780_4353788_0": {"section_id": 5145, "quality": 0.7777777777777778, "length": 21}}, "n4659": {"so_4353780_4353788_0": {"section_id": 6773, "quality": 0.8148148148148148, "length": 22}}}});