post_cb({"30182400": {"ParentId": "30182097", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I'm assuming the example in the textbook also provides a binary <code>operator-</code> because without that the code would fail to compile even if <code>{0, 0}</code> was implicitly converted to a <code>complex</code> on the offending line.</p>\n<pre><code>return{ 0, 0 } - z;\n</code></pre>\n<p>The reason this line won't compile is because a <em>braced-init-list</em> (<code>{0, 0}</code>) is not an expression, and as such does not have a type. So it cannot be used as one of the operands to binary <code>operator-</code>.</p>\n<p>The reason <code>return {-z.real(), -z.imag()};</code> works is because it's explicitly allowed by the standard.</p>\n<p><em>\u00a76.6.3/2 [stmt.return]</em></p>\n<blockquote>\n<p id=\"so_30182097_30182400_0\"><strong>The <em>expression</em> or <em>braced-init-list</em> of a return statement is called its operand</strong>. ... A return statement with any other operand shall be used only in a function whose return type is not <em>cv</em> <code>void</code>; <strong>the return statement initializes the object or reference to be returned by copy-initialization</strong> (8.5) <strong>from the operand</strong>.</p>\n</blockquote>\n<p>The <em>copy-initialization</em> in this case is <em>copy-list-initialization</em> (<em>\u00a78.5.4 [dcl.init.list]</em>) and it'll consider the <code>complex(double r, double i)</code> constructor because it is not <code>explicit</code>.</p>\n<hr>\n<p>The return type of <code>operator-=</code> is also strange, it modifies the <code>complex</code> instance, but then returns a copy. A typical implementation would be</p>\n<pre><code>complex&amp; operator-=(complex const&amp; z) {\n...\n}\n</code></pre>\n</hr>", "OwnerUserId": "241631", "LastEditorUserId": "241631", "LastEditDate": "2015-05-12T05:53:06.723", "Id": "30182400", "Score": "5", "CreationDate": "2015-05-12T05:21:03.353", "LastActivityDate": "2015-05-12T05:53:06.723"}, "30182097": {"CommentCount": "4", "ViewCount": "62", "PostTypeId": "1", "LastEditorUserId": "414939", "CreationDate": "2015-05-12T04:56:48.480", "LastActivityDate": "2015-05-12T05:53:06.723", "Title": "Implicit conversion with more than one parameter, and operator overloading", "AcceptedAnswerId": "30182400", "LastEditDate": "2015-05-12T05:29:24.553", "Id": "30182097", "Score": "1", "Body": "<p>I am currently reading \"The C++ Programming Language\" book. Below is the relevant code</p>\n<pre><code>class complex {\npublic:\n  complex(double r, double i): re{r}, im{i} {}\n  complex(double r): complex{r,0} {}\n  complex(): complex{0,0} {}\n\n  complex&amp; operator-=(complex z) {\n    this-&gt;re -= z.re;\n    this-&gt;im -= z.im;\n    return *this;\n  } \nprivate:\n  double re,im;\n};\n\ninline complex operator-(complex a, complex b) {\n  return a -= b;\n}\n\ninline complex operator-(complex z) {\n  return{ 0, 0 } - z;\n}\n</code></pre>\n<p>The unary <code>operator-</code> gives an error - </p>\n<blockquote>\n<p id=\"so_30182097_30182097_0\">syntax error : missing ';' before '-'</p>\n</blockquote>\n<p>However, both of the following variants are considered correct by the compiler</p>\n<pre><code>inline complex operator-(complex z) {\n  return 0 - z;\n}\n</code></pre>\n<p>and </p>\n<pre><code>inline complex operator-(complex z) {\n  return {-z.real(), -z.imag()};\n}\n</code></pre>\n<p>I think that implicit conversion in happening in both these cases.\nThen why is </p>\n<pre><code>inline complex operator-(complex z) {\n  return {0,0} - z;\n}\n</code></pre>\n<p>flagged as an error?</p>\n<p>EDIT - Fixing return type of operator-= function call, and adding operator-(), as it it relevant to the question.</p>\n", "Tags": "<c++><c++11><implicit-conversion>", "OwnerUserId": "414939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30182097_30182400_0": {"section_id": 3913, "quality": 0.52, "length": 13}}, "n3337": {"so_30182097_30182400_0": {"section_id": 3773, "quality": 0.52, "length": 13}}, "n4659": {"so_30182097_30182400_0": {"section_id": 4799, "quality": 0.76, "length": 19}}}});