post_cb({"37526522": {"ParentId": "37526366", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2016-05-30T13:09:38.443", "Score": "0", "LastEditorUserId": "2352671", "LastEditDate": "2016-05-30T13:32:01.083", "Id": "37526522", "OwnerUserId": "2352671", "Body": "<p>It is not necessary to define a <code>constexpr</code> before it is used. However, the result of calling it before its definition is not <code>constexpr</code>. Consequently, the compiler rightfully complains because you're trying to initialize a <code>constexpr</code> variable with a non-constant expression.</p>\n<p><em>\u00a75.20/p2 Constant expressions [expr.const]</em> (<strong>Emphasis Mine</strong>) :</p>\n<blockquote>\n<p id=\"so_37526366_37526522_0\">A conditional-expression e is a core constant expression unless the\n  evaluation of e, following the rules of the abstract machine (1.9),\n  would evaluate one of the following expressions:</p>\n<p id=\"so_37526366_37526522_1\">...</p>\n<p id=\"so_37526366_37526522_2\">(2.3) \u2014 <strong>an invocation of an undefined constexpr function</strong> or an\n  undefined constexpr constructor;</p>\n</blockquote>\n", "LastActivityDate": "2016-05-30T13:32:01.083"}, "37586600": {"ParentId": "37526366", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-06-02T08:33:16.020", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:28:58.260", "Id": "37586600", "OwnerUserId": "3233393", "Body": "<p>As linked by T.C. in <a href=\"https://stackoverflow.com/questions/37526366/nested-constexpr-function-calls-before-definition-in-a-constant-expression-con?noredirect=1#comment62549766_37526366\">his comment</a>, this is subject to a <a href=\"http://wg21.link/CWG2166\" rel=\"nofollow noreferrer\">defect report</a>.</p>\n<blockquote>\n<p id=\"so_37526366_37586600_0\">According to 5.20 [expr.const] bullet 2.3, an expression is a constant\n  expression unless (among other reasons) it would evaluate</p>\n<ul>\n<li>an invocation of an undefined <code>constexpr</code> function or an undefined <code>constexpr</code> constructor;</li>\n</ul>\n<p id=\"so_37526366_37586600_1\">This does not address the question of the point at which a <code>constexpr</code>\n  function must be defined. The intent, in order to allow\n  mutually-recursive <code>constexpr</code> functions, was that the function must be\n  defined prior to the outermost evaluation that eventually results in\n  the invocation, but this is not clearly stated.</p>\n</blockquote>\n<p>This makes it clear that the example is well-formed and should indeed work as expected as long as <code>f</code> is defined before the call to <code>g</code>.</p>\n", "LastActivityDate": "2016-06-02T08:33:16.020"}, "37526366": {"CommentCount": "4", "ViewCount": "306", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-05-30T13:01:45.803", "LastActivityDate": "2016-06-02T08:33:16.020", "Title": "Nested `constexpr` function calls before definition in a constant-expression context", "AcceptedAnswerId": "37586600", "LastEditDate": "2017-05-23T12:18:33.227", "Id": "37526366", "Score": "4", "Body": "<p>From what I gather from <a href=\"https://stackoverflow.com/a/29435060/3233393\">this answer</a>, a <code>constexpr</code> function's result is not a constant-expression if the function has not been declared yet. What surprises me is the following code snippet :</p>\n<pre><code>constexpr int f();\n\nconstexpr int g() {\n    return f();\n}\n\nconstexpr int f() {\n    return 42;\n}\n\nint main() {\n    constexpr int i = g();\n    return i;\n}\n</code></pre>\n<p>This compiles without trouble and works. Moving <code>f</code>'s definition past main triggers <code>error: 'constexpr int f()' used before its definition</code>, as I would expect.</p>\n<p>I presume that it works because <code>f</code> has been defined before the call to <code>g</code>, thus both calls are constant expressions.</p>\n<p>Why are <code>f()</code> and <code>g()</code> apparently constant-expressions, even though <code>f</code> isn't defined when it is called by <code>g</code>? How is this described by the Standard?</p>\n<p>I have tested this on Coliru's GCC 6.1.0 and Clang 3.8.0.</p>\n", "Tags": "<c++><language-lawyer><constexpr><function-declaration><function-definition>", "OwnerUserId": "3233393", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37526366_37526522_0": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}, "so_37526366_37526522_2": {"section_id": 6185, "quality": 1.0, "length": 7}}, "n3337": {"so_37526366_37526522_2": {"section_id": 5946, "quality": 1.0, "length": 7}}, "n4659": {"so_37526366_37526522_0": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}, "so_37526366_37526522_2": {"section_id": 7687, "quality": 1.0, "length": 7}}}});