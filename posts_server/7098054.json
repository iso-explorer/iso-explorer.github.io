post_cb({"7098125": {"Id": "7098125", "PostTypeId": "2", "Body": "<p>No difference.</p>\n<p>Once <code>foo</code> is <em>virtual</em>, its <em>virtual</em> forever in the class-hierarchy, no matter how far you go from the base in the class-hierarchy.</p>\n<p>But I prefer to write <code>virtual</code> even in overrridden functions, because it adds <strong>readability</strong> to the code, which matters a lot.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-08-17T19:17:02.030", "Score": "1", "CreationDate": "2011-08-17T19:09:18.820", "ParentId": "7098054", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2011-08-17T19:17:02.030"}, "7098092": {"Id": "7098092", "PostTypeId": "2", "Body": "<p>No difference - it's a virtual override either way.</p>\n<p>It's a matter of style and has been definitively discussed <a href=\"https://stackoverflow.com/questions/1370976/c-style-prefixing-virtual-keyword-to-overridden-methods\">here</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-17T19:06:31.610", "Score": "2", "CreationDate": "2011-08-17T19:06:31.610", "ParentId": "7098054", "CommentCount": "0", "OwnerUserId": "314291", "LastEditDate": "2017-05-23T09:59:01.867"}, "bq_ids": {"n4140": {"so_7098054_7098101_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 7003}}, "n3337": {"so_7098054_7098101_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 6749}}, "n4659": {"so_7098054_7098101_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 8500}}}, "7098101": {"Id": "7098101", "PostTypeId": "2", "Body": "<p>It makes no difference. <code>foo</code> is virtual in all classes that derive from b (and their descendants).</p>\n<p>From C++03 standard, \u00a710.3.2:</p>\n<blockquote>\n<p id=\"so_7098054_7098101_0\">If a virtual member function vf is declared in a class Base and in a class Derived, derived directly or indirectly from Base, a member function vf with the same name and same parameter list as Base::vf is declared, then Derived::vf is also virtual (<strong>whether or not it is so declared</strong>) and it overrides Base::vf. </p>\n</blockquote>\n", "LastActivityDate": "2011-08-17T19:07:26.853", "CommentCount": "0", "CreationDate": "2011-08-17T19:07:26.853", "ParentId": "7098054", "Score": "5", "OwnerUserId": "635608"}, "7098054": {"ViewCount": "399", "Body": "<p>Does the virtual qualifier to a virtual function of base class, in the derived class makes any difference ?</p>\n<pre><code>class b\n{\n   public:\n   virtual void foo(){}\n};\n\nclass d : public b\n{\n  public:\n  void foo(){ .... }\n};\n</code></pre>\n<p>or</p>\n<pre><code>class d : public b\n{\n  public:\n  virtual void foo(){ .... }\n}; \n</code></pre>\n<p>Is there any difference in these two declarations, apart from that it makes child of d make aware of virtuality of foo() ?</p>\n", "Title": "virtual qualifier in derived class", "CreationDate": "2011-08-17T19:03:14.863", "LastActivityDate": "2011-08-17T19:17:02.030", "CommentCount": "2", "LastEditDate": "2011-08-17T19:06:38.273", "PostTypeId": "1", "LastEditorUserId": "635608", "Id": "7098054", "Score": "4", "OwnerUserId": "897863", "Tags": "<c++>", "AnswerCount": "4"}, "7098096": {"Id": "7098096", "PostTypeId": "2", "Body": "<p>It's better style to include the virtual keyword.  But it's not required.</p>\n", "OwnerDisplayName": "user630465", "LastActivityDate": "2011-08-17T19:06:54.643", "Score": "1", "CreationDate": "2011-08-17T19:06:54.643", "ParentId": "7098054", "CommentCount": "0"}});