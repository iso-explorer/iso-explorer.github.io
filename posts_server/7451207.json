post_cb({"7452397": {"LastActivityDate": "2017-10-05T21:24:11.273", "CommentCount": "4", "Body": "<p>As others have said, if the result is a different sign than both operands, two's complement signed overflow occurred.</p>\n<p>The converse is also true. Two's complement signed overflow cannot occur unless the operands are the same sign (negative or non-negative) and the result is the opposite.</p>\n<p>Still, personally, I prefer a more straightforward approach:</p>\n<pre><code>int_type a = 12356, b = 98765432;\nif ( b &gt; 0 &amp;&amp; a &gt; std::numeric_limits&lt; int_type &gt;::max() - b )\n    throw std::range_error( \"adding a and b would cause overflow\" );\n\nif ( b &lt; 0 &amp;&amp; a &lt; std::numeric_limits&lt; int_type &gt;::min() - b )\n    throw std::range_error( \"adding a and b would cause underflow\" );\n\nint_type c = a + b;\n</code></pre>\n<p>This will catch both signed and unsigned overflow/underflow, and it is much easier to see what is happening.</p>\n<p>Moreover, integral signed overflow in C++ is not guaranteed to wrap around, since two's complement arithmetic is not required. Signed integer overflow can even crash, although it is unlikely. So in terms of the language, it's best to stop overflow <em>before</em> it occurs. C++03 \u00a75/5:</p>\n<blockquote>\n<p id=\"so_7451207_7452397_0\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined, unless such an expression is a constant expression (5.19), in which case the program is ill-formed. [Note: most existing implementations of C++ ignore integer overflows. \u2026]</p>\n</blockquote>\n<p>See also the <a href=\"http://www.boost.org/doc/libs/1_47_0/libs/numeric/conversion/doc/html/index.html\" rel=\"nofollow noreferrer\">Boost Numeric Conversion</a> library, although I'm not sure it can do anything for this problem that <code>std::numeric_limits</code> can't.</p>\n", "CreationDate": "2011-09-17T04:19:23.117", "LastEditDate": "2017-10-05T21:24:11.273", "ParentId": "7451207", "Id": "7452397", "LastEditorUserId": "153285", "PostTypeId": "2", "Score": "6", "OwnerUserId": "153285"}, "bq_ids": {"n4140": {"so_7451207_7452397_0": {"length": 19, "quality": 0.7037037037037037, "section_id": 5937}}, "n3337": {"so_7451207_7452397_0": {"length": 19, "quality": 0.7037037037037037, "section_id": 5709}}}, "7451207": {"CreationDate": "2011-09-16T23:03:35.090", "ViewCount": "5835", "FavoriteCount": "2", "ClosedDate": "2017-10-06T18:45:08.240", "Score": "4", "Title": "How to catch integer overflow in C++?", "LastEditorUserId": "153285", "CommentCount": "3", "Body": "<p>I have a <code>sum()</code> function.\nI need to catch all overflow.</p>\n<p>I searched website but didn't find a good way to do so.</p>\n<p>So...any thoughts?</p>\n", "Tags": "<c++><math><overflow>", "Id": "7451207", "LastEditDate": "2011-09-17T06:08:38.560", "LastActivityDate": "2017-10-05T21:24:11.273", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "947301"}, "7451698": {"LastActivityDate": "2011-09-17T00:59:39.173", "CommentCount": "3", "Body": "<p>In order for an overflow to occur, both operands must be the same sign. If the sum of the operands is a different sign than the operands, then an overflow occurred.</p>\n<pre><code>bool overflow( int a, int b )\n{\n    bool op_same_sign = ( a &lt; 0 ) == ( b &lt; 0 );\n    bool sum_diff_sign = ( a &lt; 0 ) != ( a + b &lt; 0 );\n    return op_same_sign &amp;&amp; sum_diff_sign;\n}\n</code></pre>\n<p>More concisely... </p>\n<pre><code>bool overflow( int a, int b )\n{\n    return ( ( a &lt; 0 ) == ( b &lt; 0 ) &amp;&amp; ( a + b &lt; 0 ) != ( a &lt; 0 ) );\n}\n</code></pre>\n", "CreationDate": "2011-09-17T00:46:07.413", "LastEditDate": "2011-09-17T00:59:39.173", "ParentId": "7451207", "Id": "7451698", "LastEditorUserId": "527574", "PostTypeId": "2", "Score": "-1", "OwnerUserId": "434245"}, "7452177": {"LastActivityDate": "2013-03-25T09:39:38.067", "CommentCount": "3", "Body": "<p>__asm jno notoverflow;</p>\n<p>__asm jo overflow.</p>\n<p>Using asm is more convenient here.</p>\n<pre><code>    int main()\n    {\n        int x = 2147483647;\n        x++;\n        __asm jo overflowed;\n        printf(\"Not Overflow\\n\");\n        if(0)\n        {\n            overflowed:\n            printf(\"Overflowed!\\n\");\n        }\n        return 0;\n    }\n</code></pre>\n<p>Result: Overflowed</p>\n", "CreationDate": "2011-09-17T03:03:48.813", "LastEditDate": "2013-03-25T09:39:38.067", "ParentId": "7451207", "Id": "7452177", "LastEditorUserId": "932172", "PostTypeId": "2", "Score": "0", "OwnerUserId": "932172"}});