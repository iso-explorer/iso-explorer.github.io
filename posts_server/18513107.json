post_cb({"18513277": {"ParentId": "18513107", "CommentCount": "0", "Body": "<p>what if you declare 'Value' as constexpr too? Actually you can probalby never be sure if something is evaluated at compilation time, however in this case there is no reason why it could not be evaluated.</p>\n", "OwnerUserId": "1749713", "PostTypeId": "2", "Id": "18513277", "Score": "3", "CreationDate": "2013-08-29T14:09:36.267", "LastActivityDate": "2013-08-29T14:09:36.267"}, "18513252": {"ParentId": "18513107", "CommentCount": "1", "Body": "<p>Considering that I have not used C++ in over half a decade now, the chances of the suggestion being way of the mark are quite high, but what about using inline for the function. </p>\n<p>If the function returns a certain predefined value, available at the compile time, then the compiler should be able to make use of that value. </p>\n", "OwnerUserId": "1163622", "PostTypeId": "2", "Id": "18513252", "Score": "1", "CreationDate": "2013-08-29T14:08:33.850", "LastActivityDate": "2013-08-29T14:08:33.850"}, "18513148": {"ParentId": "18513107", "CommentCount": "7", "Body": "<p>You can't ensure the compiler does this. You generally need to enable optimization, including some level of function inlining. What these options are depend on your compiler and its version.</p>\n<p>You can check the generated assembly to see if it contains a call to <code>GetOffset</code> or just uses a constant determined by the compiler.</p>\n", "OwnerUserId": "256138", "PostTypeId": "2", "Id": "18513148", "Score": "3", "CreationDate": "2013-08-29T14:04:19.477", "LastActivityDate": "2013-08-29T14:04:19.477"}, "18513279": {"ParentId": "18513107", "CommentCount": "6", "Body": "<p>Why don't you use <code>constexpr</code> for Value too? I think it will ask the compiler to evaluate it,</p>\n<pre><code>constexpr int Value = 123 * 2 + GetOffset();   \n</code></pre>\n<p>if the function GetOffset() is simple and meet the requirements of <code>constexpr</code>.</p>\n<p>The requirements are</p>\n<ol>\n<li><p>the function must have a non-void return type. </p></li>\n<li><p>the function body cannot declare variables or define new types.</p></li>\n<li><p>the body may contain only declarations, null statements and a single return\nstatement.</p></li>\n</ol>\n<p>Since <code>Getoffset()</code> returns <code>int</code>, it meets the first one.</p>\n", "OwnerUserId": "1153165", "PostTypeId": "2", "Id": "18513279", "Score": "3", "CreationDate": "2013-08-29T14:09:39.090", "LastActivityDate": "2013-08-29T14:09:39.090"}, "18522300": {"ParentId": "18513107", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you want to confirm that the initializer is a constant expression than you can use the <code>constexpr</code> specifier:</p>\n<pre><code>constexpr int Value = 123 * 2 + GetOffset();\n</code></pre>\n<p>It will fail to compile if it isn't a constant expression.</p>\n<p>It is theoretically unspecified whether a constexpr variable <code>Value</code> is actually calculated during translation - but in practice you can be sure it is.</p>\n", "OwnerUserId": "1131467", "LastEditorUserId": "1131467", "LastEditDate": "2013-08-29T23:35:20.263", "Id": "18522300", "Score": "0", "CreationDate": "2013-08-29T23:01:57.840", "LastActivityDate": "2013-08-29T23:35:20.263"}, "18528361": {"ParentId": "18513107", "CommentCount": "0", "Body": "<p>Just assert it: <code>static_assert(Value == 123 * 2 + GetOffset(), \"constexpr\");</code>\nDoesn't get any simpler than that.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "18528361", "Score": "0", "CreationDate": "2013-08-30T08:31:43.247", "LastActivityDate": "2013-08-30T08:31:43.247"}, "18513825": {"ParentId": "18513107", "CommentCount": "1", "Body": "<p>Create a separate source file with the expression. Evaluate <code>printf(\"#define MyExpression %d.\\n\", expression);</code>. When building your project, compile this source file for the native system and execute it. Include the resulting output as a header in your regular sources.</p>\n", "OwnerUserId": "298225", "PostTypeId": "2", "Id": "18513825", "Score": "1", "CreationDate": "2013-08-29T14:32:55.590", "LastActivityDate": "2013-08-29T14:32:55.590"}, "18513301": {"ParentId": "18513107", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>You can't be absolutely sure; the compiler is only required to generate code with the specified behaviour, and calculating it at compile- or run-time would not change the behaviour.</p>\n<p>However, the compiler is required to be <em>able</em> to evaluate this at compile time, since it can be used where only compile-time constants are allowed such as array sizes and template arguments; so there's no reason why a sane compiler shouldn't perform that obvious optimisation. If the compiler doesn't (at least with optimisations enabled), throw it away and find a better one.</p>\n<p>You can check the assembly produced by the compiler to see whether it calculates the value; but this in itself doesn't guarantee that future builds will do the same.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2013-08-29T14:18:02.703", "Id": "18513301", "Score": "2", "CreationDate": "2013-08-29T14:10:29.140", "LastActivityDate": "2013-08-29T14:18:02.703"}, "18513107": {"CommentCount": "0", "ViewCount": "370", "PostTypeId": "1", "LastEditorUserId": "1065190", "CreationDate": "2013-08-29T14:02:29.627", "LastActivityDate": "2013-08-30T08:31:43.247", "Title": "How can I know if C++ compiler evaluates the expression at compile time?", "AcceptedAnswerId": "18513968", "LastEditDate": "2013-08-29T14:54:10.377", "Id": "18513107", "Score": "3", "Body": "<p>I have a code like this</p>\n<pre><code>const int Value = 123 * 2 + GetOffset();\n</code></pre>\n<p><code>GetOffset</code> is a <code>constexpr</code> function returning <code>int</code>.</p>\n<p>How can I make sure this expression is indeed evaluated at compile time?</p>\n", "Tags": "<c++><optimization><c++11>", "OwnerUserId": "2729562", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_18513107_18513968_0": {"section_id": 4727, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_18513107_18513968_0": {"section_id": 4534, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_18513107_18513968_0": {"section_id": 6139, "quality": 0.9523809523809523, "length": 20}}}, "18513968": {"ParentId": "18513107", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>One possibility is to use <code>std::ratio</code>.  From section 20.10.1 of the C++11 standard:</p>\n<blockquote>\n<p id=\"so_18513107_18513968_0\">This subclause describes the ratio library. It provides a class template ratio which exactly represents any finite rational number with a numerator and denominator representable by compile-time constants of type intmax_t.</p>\n</blockquote>\n<p>So according to the standard, this would only be valid for a compile-time constant:</p>\n<pre><code>const int value = std::ratio&lt;123 * 2 + GetOffset()&gt;::num;\n</code></pre>\n<p>So this would guarantee that the expression is evaluated at compile time.  However, it doesn't also guarantee that the expression is not evaluated at run time.</p>\n", "OwnerUserId": "951890", "LastEditorUserId": "951890", "LastEditDate": "2013-08-29T14:48:09.883", "Id": "18513968", "Score": "2", "CreationDate": "2013-08-29T14:38:53.780", "LastActivityDate": "2013-08-29T14:48:09.883"}});