post_cb({"42062141": {"ParentId": "42062080", "LastEditDate": "2017-02-06T10:27:56.630", "CommentCount": "1", "CreationDate": "2017-02-06T07:10:12.290", "OwnerUserId": "14860", "LastEditorUserId": "14860", "PostTypeId": "2", "Id": "42062141", "Score": "6", "Body": "<p>In terms of <code>string::find_last_of()</code>, specifying <code>pos</code> means that the search only includes characters <em>at or before</em> that position, ignoring any possible occurrences after it. If it cannot be found given those limitations, <code>npos</code> is returned.</p>\n<p>Full details can be found in the standard, for example <code>C++11 21.4.7.5</code>:</p>\n<hr>\n<blockquote>\n<p id=\"so_42062080_42062141_0\"><strong>21.4.7.5 <code>basic_string::find_last_of</code> [string::find.last.of]</strong></p>\n<p id=\"so_42062080_42062141_1\"><code>size_type find_last_of(</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0<code>const basic_string&amp; str,</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0<code>size_type pos = npos</code><br>\n<code>) const noexcept;</code></br></br></br></p>\n<p id=\"so_42062080_42062141_2\"><em>Effects:</em> Determines the highest position <code>xpos</code>, if possible, such that both of the following conditions obtain:</p>\n<ul>\n<li><code>xpos &lt;= pos</code> and <code>xpos &lt; size()</code>;<br/></li>\n<li><code>traits::eq(at(xpos), str.at(I))</code> for some element <code>I</code> of the string controlled by <code>str</code>.</li>\n</ul>\n<p id=\"so_42062080_42062141_3\"><em>Returns:</em> <code>xpos</code> if the function can determine such a value for <code>xpos</code>. Otherwise, returns <code>npos</code>.</p>\n<p id=\"so_42062080_42062141_4\"><em>Remarks:</em> Uses <code>traits::eq()</code>.</p>\n<hr>\n<p id=\"so_42062080_42062141_5\"><code>size_type find_last_of(</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0<code>charT c,</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0<code>size_type pos = npos</code><br>\n<code>) const noexcept;</code></br></br></br></p>\n<p id=\"so_42062080_42062141_6\"><em>Returns:</em> <code>find_last_of(basic_string&lt;charT,traits,Allocator&gt;(1,c),pos)</code>.</p>\n</hr></blockquote>\n<hr>\n<p>It's that <code>xpos &lt;= pos</code> in the first bullet point that's causing the problem here. Unless your string actually <em>starts</em> with <code>=</code>, your particular expression is going to get <code>npos</code> as a result. <em>That's</em> the large number you're seeing as it's an unsigned variant of the value <code>-1</code>.</p>\n<p>The correct form of <code>find_last_of()</code> if you want to find the last character is:</p>\n<pre><code>size_t index = str.find_last_of('=');\n</code></pre>\n<p>Since <code>pos</code> defaults to <code>npos</code>, meaning that it considers the <em>entire</em> string.</p>\n</hr></hr>", "LastActivityDate": "2017-02-06T10:27:56.630"}, "42062142": {"ParentId": "42062080", "CommentCount": "0", "Body": "<p>Second argument is wrong, try:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\nint main() \n{\n    std::string str = \"page id = 0 file = \\\"simsun.png\\\" chars count = 97\";\n    size_t index = str.find_last_of('=');\n    std::cout &lt;&lt; index &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "314290", "PostTypeId": "2", "Id": "42062142", "Score": "0", "CreationDate": "2017-02-06T07:10:29.147", "LastActivityDate": "2017-02-06T07:10:29.147"}, "42062359": {"ParentId": "42062080", "CommentCount": "2", "Body": "<p>use <strong>rfind()</strong> for the last occurrence and <strong>find_last_of()</strong> to find the character in string from the end</p>\n<p><strong><em>To be specific you are asking for the last occurrence so use rfind() instead of find_last_of()</em></strong></p>\n<pre><code>std::string str (\"page id=0 file=\\\"simsun.png\\\" chars count=97\");\nstd::string key (\"=\");\nstd::size_t found = str.rfind(key);\n</code></pre>\n", "OwnerUserId": "5268808", "PostTypeId": "2", "Id": "42062359", "Score": "0", "CreationDate": "2017-02-06T07:25:29.427", "LastActivityDate": "2017-02-06T07:25:29.427"}, "42062080": {"CommentCount": "0", "ViewCount": "290", "CreationDate": "2017-02-06T07:06:13.703", "LastActivityDate": "2017-02-06T10:27:56.630", "Title": "c++ string::find_last_of returns arbitrary large number", "PostTypeId": "1", "Id": "42062080", "Score": "-2", "Body": "<p>Trying to get the index of the last '=' in a string with find last returns a garbage number.</p>\n<pre><code>size_t index = str.find_last_of('=', 0);\n</code></pre>\n<p>Here is the string, there is definently an '=' in it..</p>\n<pre><code>\"page id=0 file=\"simsun.png\" chars count=97\"\n</code></pre>\n<p>How do i find the index of the last '=' ?</p>\n", "Tags": "<c++><string>", "OwnerUserId": "5938073", "AnswerCount": "4"}, "42062143": {"ParentId": "42062080", "CommentCount": "0", "Body": "<p>I doubt it's \"arbitrary\", rather it's most likely <code>npos</code> that is returned.</p>\n<p>And it's easy to see why if you read e.g. <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/find_last_of\" rel=\"nofollow noreferrer\">this <code>find_last_of</code> reference</a>, where it says that the <code>pos</code> argument is</p>\n<blockquote>\n<p id=\"so_42062080_42062143_0\">position at which the search is to finish </p>\n</blockquote>\n<p>So when you pass <code>0</code> as the position, you tell <code>find_last_of</code> to stop searching at the first character instead of the last.</p>\n<p>The simple solution is to not pass the (optional) position argument at all:</p>\n<pre><code>str.find_last_of('=')\n</code></pre>\n<p>And of course to have a check for <code>npos</code> being returned.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "42062143", "Score": "4", "CreationDate": "2017-02-06T07:10:34.320", "LastActivityDate": "2017-02-06T07:10:34.320"}, "bq_ids": {"n4140": {"so_42062080_42062141_1": {"section_id": 1813, "quality": 0.7, "length": 7}, "so_42062080_42062141_3": {"section_id": 1766, "quality": 0.9090909090909091, "length": 10}, "so_42062080_42062141_5": {"section_id": 1775, "quality": 0.75, "length": 6}, "so_42062080_42062141_2": {"section_id": 1772, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_42062080_42062141_1": {"section_id": 1565, "quality": 0.6, "length": 6}, "so_42062080_42062141_3": {"section_id": 1760, "quality": 0.9090909090909091, "length": 10}, "so_42062080_42062141_5": {"section_id": 1762, "quality": 0.75, "length": 6}, "so_42062080_42062141_2": {"section_id": 1766, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_42062080_42062141_1": {"section_id": 1943, "quality": 0.8, "length": 8}, "so_42062080_42062141_3": {"section_id": 1936, "quality": 0.9090909090909091, "length": 10}, "so_42062080_42062141_5": {"section_id": 1943, "quality": 0.75, "length": 6}, "so_42062080_42062141_2": {"section_id": 1942, "quality": 0.8181818181818182, "length": 9}}}});