post_cb({"13390426": {"ParentId": "13390376", "CommentCount": "1", "Body": "<p>If the compiler feels it needs the address of the <code>static</code> member variable, e.g., when binding the variable to a reference at some point, it will create a corresponding undefined symbol and you will have to define the member:</p>\n<pre><code>int const foo::TEST;\n</code></pre>\n<p>(in one translation unit). If the compiler only ever accesses a the value you can get away with not defining the object. Unless you need the type to be an <code>int</code>, you can use an <code>enum</code> instead and avoid the need for defining the member:</p>\n<pre><code>enum { TEST = 33 };\n</code></pre>\n<p>The term in the standard to look for is <em>odr-used</em> if I recall correctly.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "13390426", "Score": "3", "CreationDate": "2012-11-15T01:47:50.637", "LastActivityDate": "2012-11-15T01:47:50.637"}, "13390376": {"CommentCount": "1", "ViewCount": "2092", "PostTypeId": "1", "ClosedDate": "2012-11-15T08:47:20.620", "LastEditorUserId": "-1", "CreationDate": "2012-11-15T01:42:23.297", "LastActivityDate": "2012-11-15T01:47:50.637", "Title": "Linker gives error \"undefined symbol\" for integral static const members used in certain contexts", "AcceptedAnswerId": "13390426", "LastEditDate": "2017-05-23T11:56:11.943", "Id": "13390376", "Score": "0", "Body": "<blockquote>\n<p id=\"so_13390376_13390376_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3025997/c-defining-static-const-integer-members-in-class-definition\">C++ - defining static const integer members in class definition</a> </br></p>\n</blockquote>\n<p>Note: There are several extant questions re similar issues, but I have reviewed many of them and cannot find an answer that explains this behavior:</p>\n<p>Say I have code such as the following (in a <strong>header</strong> file)</p>\n<pre><code>class Foo {\n    static const int TEST = 33;\n\n    public:\n    void willItWork(void) {\n        printf(\"%d\", std::max(TEST, 75));  // embedded platform, no streams\n    }\n};\n\nint main(void) {\n    Foo tester;\n    tester.willItWork();\n}\n</code></pre>\n<p>This will compile, but it will not link. I get the linker error</p>\n<blockquote>\n<p id=\"so_13390376_13390376_1\">Error: L6218E: Undefined symbol Foo::TEST (referred from foo.o).</p>\n</blockquote>\n<p>It only seems like passing the value to outside functions causes problems. Using <code>TEST</code> in ordinary expressions or functions within the class works fine. If I instead write <code>willItWork()</code> as</p>\n<pre><code>void willItWork(void) {\n    int diff = TEST - 23;\n    printf(\"%d\", diff);\n}\n</code></pre>\n<p>there is no error.</p>\n<p>I found another question that referenced the C++ standard regarding this (Section 9.4.2):</p>\n<blockquote>\n<p id=\"so_13390376_13390376_2\">If a static data member is of const integral or const enumeration type, its declaration in the class definition can specify a const-initializer which shall be an integral constant expression.</p>\n</blockquote>\n<p>Since what I have done seems to be \"within the rules,\" can anyone think of any possible explanation for this odd behavior?</p>\n<p>I tried similar code on ideone and had no issue (however, I can not mimic the exact structure, i.e. with header files, there). Does this mean the linker I am using doesn't quite conform to the standard here?</p>\n<p>Any insight is greatly appreciated. I can always provide more information, too.</p>\n", "Tags": "<c++><linker><initialization><standards><static-members>", "OwnerUserId": "1024485", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13390376_13390376_2": {"section_id": 5908, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_13390376_13390376_2": {"section_id": 5680, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_13390376_13390376_2": {"section_id": 7390, "quality": 0.7777777777777778, "length": 14}}}, "13390408": {"ParentId": "13390376", "CommentCount": "5", "Body": "<p><code>std::max</code> takes its arguments by reference, not by value. Binding a reference to your static const requires an actual object, not just the value.</p>\n", "OwnerUserId": "8747", "PostTypeId": "2", "Id": "13390408", "Score": "3", "CreationDate": "2012-11-15T01:46:05.323", "LastActivityDate": "2012-11-15T01:46:05.323"}});