post_cb({"bq_ids": {"n4140": {"so_29180947_29181049_6": {"length": 11, "quality": 0.8461538461538461, "section_id": 6032}, "so_29180947_29181049_5": {"length": 13, "quality": 0.9285714285714286, "section_id": 6031}, "so_29180947_29181049_4": {"length": 8, "quality": 1.0, "section_id": 6126}}, "n3337": {"so_29180947_29181049_6": {"length": 11, "quality": 0.8461538461538461, "section_id": 5800}, "so_29180947_29181049_4": {"length": 8, "quality": 1.0, "section_id": 5890}, "so_29180947_29181049_5": {"length": 13, "quality": 0.9285714285714286, "section_id": 5799}}, "n4659": {"so_29180947_29181049_6": {"length": 10, "quality": 0.7692307692307693, "section_id": 7531}, "so_29180947_29181049_4": {"length": 8, "quality": 1.0, "section_id": 7623}, "so_29180947_29181049_5": {"length": 13, "quality": 0.9285714285714286, "section_id": 7530}}}, "29180947": {"ViewCount": "67", "Body": "<p>Why does the following code give the following error?</p>\n<p>Why does the type need to be complete in order to be casted to <code>void</code>?</p>\n<pre><code>struct Incomplete;\nclass Class\n{\n    virtual void foo(Incomplete &amp;incomplete)\n    {\n        (void) incomplete;\n        throw std::logic_error(\"not implemented\");\n    }\n};\n</code></pre>\n<p>Error:</p>\n<pre><code>error C2027: use of undefined type 'Incomplete'  \n    see declaration of 'Incomplete'\n</code></pre>\n", "AcceptedAnswerId": "29181143", "Title": "Why can't an incomplete type be casted to void?", "CreationDate": "2015-03-21T09:00:58.093", "Id": "29180947", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2015-03-21T09:27:54.270", "Score": "3", "OwnerUserId": "541686", "Tags": "<c++><void><incomplete-type>", "AnswerCount": "2"}, "29181049": {"Id": "29181049", "PostTypeId": "2", "Body": "<p>I don't see anything prohibiting this, quoting N4140:</p>\n<blockquote>\n<p id=\"so_29180947_29181049_0\">\u00a75.4/4 The conversions performed by</p>\n<p id=\"so_29180947_29181049_1\">[...]</p>\n<p id=\"so_29180947_29181049_2\">\u2014 a <code>static_cast</code> (5.2.9),</p>\n<p id=\"so_29180947_29181049_3\">[...]</p>\n<p id=\"so_29180947_29181049_4\">can be performed using the cast notation of explicit type conversion.</p>\n<p id=\"so_29180947_29181049_5\">\u00a75.2.9/5 Otherwise, the <code>static_cast</code> shall perform one of the\n  conversions listed below. No other conversion shall be performed\n  explicitly using a <code>static_cast</code>.</p>\n<p id=\"so_29180947_29181049_6\">\u00a75.2.9/6 Any expression can be explicitly converted to type cv void,\n  in which case it becomes a discarded-value expression (Clause 5).\n  [...]</p>\n</blockquote>\n<p>It's most likely a bug as tested on <a href=\"http://rextester.com/runcode\" rel=\"nofollow\">Rextester</a>, an online VS2013 compiler, but compiles in <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow\">rise4fun</a>, Microsoft's online compiler which is bleeding edge.</p>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2015-03-21T09:15:06.860", "Score": "3", "CreationDate": "2015-03-21T09:15:06.860", "ParentId": "29180947", "CommentCount": "0"}, "29181143": {"Id": "29181143", "PostTypeId": "2", "Body": "<p>It's a change between C and C++, where Microsoft previously implemented the C rules. As noted in remyabel's answer, that has since been fixed.</p>\n<p>In C, a cast to <code>void</code>, or simply using an expression as a statement by itself (as in <code>incomplete;</code>), still involves the lvalue-to-rvalue conversion. C calls it slightly differently, but it's the same conversion.</p>\n<p>In C++, a cast to <code>void</code>, or simply using an expression as a statement by itself doesn't involve the lvalue-to-rvalue conversion. This is needed because C++ makes assignment operators return lvalues, so if the lvalue-to-rvalue conversion were applied, then</p>\n<pre><code>volatile int i;\ni = 1;\n</code></pre>\n<p>would not merely store, it would also immediately load afterwards.</p>\n<p>The lvalue-to-rvalue conversion requires a complete type, even if the value is then discarded, since otherwise, it's impossible to know how many bytes should be read.</p>\n", "LastActivityDate": "2015-03-21T09:27:54.270", "CommentCount": "0", "CreationDate": "2015-03-21T09:27:54.270", "ParentId": "29180947", "Score": "4", "OwnerUserId": "743382"}});