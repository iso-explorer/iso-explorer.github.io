post_cb({"33984222": {"ParentId": "33984217", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's undefined behavior. The C++ standard doesn't define what happens if you do that.</p>\n<p>From the C++14 standard draft N4296, \u00a71.3.24:</p>\n<blockquote>\n<p id=\"so_33984217_33984222_0\"><strong>Permissible unde\ufb01ned behavior</strong> ranges from ignoring the situation\n  completely with unpredictable results, to behaving during translation\n  or\n  program execution in a documented manner characteristic of the environment(with or without the issuance of\n  a diagnostic message), to terminating a translation or execution (with\n  the issuance of a diagnostic message).</p>\n</blockquote>\n<hr>\n<p>You may go one level beneath the standard, i.e., the operating system, which, besides other stuff, takes care of memory management.<br>\nThe buffer <code>name</code> is allocated on the stack, next to <a href=\"https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell\"><em>stack frames</em></a>, <em>automatic variables</em>, and <em>thread-local variables</em>.<br>\nWhen calling <code>cin.get(name, 30)</code>, data may be written over the array's boundaries, effectively overwriting the data I enumerated. It may even happen that the call attempts to write over <em>stack</em> boundaries, which would almost certainly be caught by the OS.</br></br></p>\n</hr>", "OwnerUserId": "3494013", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:23:37.330", "Id": "33984222", "Score": "1", "CreationDate": "2015-11-29T15:05:17.153", "LastActivityDate": "2015-11-29T15:23:37.620"}, "33984233": {"ParentId": "33984217", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Simply put, because it is C++. The design of the language reflects the hardware of its early days, in which a few bytes of memory were precious (which is still quite useful in some specialized environments, such as embedded hardware). To give you maximum control over the memory management, you as the programmer have a lot to say about where and when memory gets allocated (and deallocated!), which means you also have to do some of the related bookkeeping by yourself.</p>\n<p>In this case, if you reserve 10 characters of memory and then tell another function it can write 30 bytes instead, it will trust that the variable you pass in has been properly prepared. It does mean you are writing in memory that is not allocated to you which may (read: will, at the moment you least expect it) have nasty side effects such as subtly changing variable values or just plain crashing your program.</p>\n<p>The reason functions like <code>cin.get</code> accept the buffer size, is that you need to tell them how much  memory that can use -- and that should never be more than you allocated. If you want to avoid this, you can use classes like <code>std::string</code> which try to take this low-level stuff off your hands.</p>\n", "OwnerUserId": "2920343", "LastEditorUserId": "2920343", "LastEditDate": "2015-11-29T15:12:29.110", "Id": "33984233", "Score": "2", "CreationDate": "2015-11-29T15:06:34.737", "LastActivityDate": "2015-11-29T15:12:29.110"}, "33984217": {"CommentCount": "3", "ViewCount": "128", "PostTypeId": "1", "LastEditorUserId": "3494013", "CreationDate": "2015-11-29T15:04:20.203", "LastActivityDate": "2015-11-29T15:23:37.620", "Title": "cin.get(name,30) resize char name [10]?", "AcceptedAnswerId": "33984233", "LastEditDate": "2015-11-29T15:04:42.263", "Id": "33984217", "Score": "-1", "Body": "<p>i wrote this code but i don't understand why char [ ] allows me to store more than 10 characters if your size is still 10 ?.\nIs normally what function cin.get() enable this?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\nchar name[10];\n\ncout&lt;&lt;\"enter name: \";\n\ncin.get(name,30);\n\ncout&lt;&lt;\"char[]: \"&lt;&lt;name&lt;&lt;endl;\n\ncout&lt;&lt;\"size: \"&lt;&lt;sizeof name;\n\nreturn 0;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "5617910", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33984217_33984222_0": {"section_id": 5768, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_33984217_33984222_0": {"section_id": 5541, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_33984217_33984222_0": {"section_id": 7225, "quality": 0.9230769230769231, "length": 24}}}});