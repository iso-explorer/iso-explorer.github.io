post_cb({"5365768": {"ParentId": "5365689", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You can't do that exactly, see <a href=\"https://stackoverflow.com/questions/5365689/c-overload-static-function-with-non-static-function/5365714#5365714\">In silico's answer</a>.</p>\n<p>But you can make <code>Foo::print()</code> and <code>Foo foo; print(foo);</code> do different things.  (Define <code>void print(Foo&amp; foo)</code> in the same namespace as <code>class Foo</code>, it will be found by ADL).</p>\n<p>In any case, this is not a good idea.  You have two functions very similar in name which do completely different things, which violates good design principles.</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:18:19.107", "Id": "5365768", "Score": "1", "CreationDate": "2011-03-19T23:49:56.293", "LastActivityDate": "2011-03-19T23:49:56.293"}, "5365734": {"ParentId": "5365689", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The answer is no, because you can't overload based on a return type.</p>\n<p>You can certainly have static methods in a class, but you can't have:</p>\n<pre><code>static void foo();\nvoid foo();\n</code></pre>\n<p>Because they have the same method signature.</p>\n<p><strong>EDIT:</strong> I saw your comment saying why you wanted to do this, and that you wanted to access member variables. You'd need to do this:</p>\n<pre><code>static void print(Foo f);\nvoid print();\n....\nstatic void Foo::print(Foo f)\n{\n    int a = f.a;\n    // do something with a\n}\n</code></pre>\n<p>(Or create getters and setters in Foo, etc, but that's the general idea)</p>\n", "OwnerUserId": "302916", "LastEditorUserId": "302916", "LastEditDate": "2011-03-20T00:00:36.727", "Id": "5365734", "Score": "1", "CreationDate": "2011-03-19T23:43:53.600", "LastActivityDate": "2011-03-20T00:00:36.727"}, "5365718": {"ParentId": "5365689", "CommentCount": "5", "Body": "<p>It is definitely not allowed. I don't see any clean way of achieving this. What is exactly the problem that you want to solve this way?</p>\n", "OwnerUserId": "369310", "PostTypeId": "2", "Id": "5365718", "Score": "2", "CreationDate": "2011-03-19T23:41:09.097", "LastActivityDate": "2011-03-19T23:41:09.097"}, "5365714": {"ParentId": "5365689", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>No, it is directly prohibited by the standard:</p>\n<blockquote>\n<p id=\"so_5365689_5365714_0\"><strong>ISO 14882:2003 C++ Standard 13.1/2 \u2013 Overloadable declarations</strong></p>\n<p id=\"so_5365689_5365714_1\">Certain function declarations cannot\n  be overloaded:</p>\n<ul>\n<li>Function declarations that differ only in the return type cannot be overloaded.</li>\n<li>Member function declarations with the same name and the same parameter types cannot be overloaded\n  if any of them is a <code>static</code> member function declaration (9.4). </li>\n</ul>\n<p id=\"so_5365689_5365714_2\">...</p>\n<p id=\"so_5365689_5365714_3\"><em>[Example:</em></p>\n</blockquote>\n<pre><code>class X {\n    static void f();\n    void f();                // ill-formed\n    void f() const;          // ill-formed\n    void f() const volatile; // ill-formed\n    void g();\n    void g() const;          // OK: no static g\n    void g() const volatile; // OK: no static g\n};\n</code></pre>\n<blockquote>\n<p id=\"so_5365689_5365714_4\"><em>\u2014end example]</em></p>\n<p id=\"so_5365689_5365714_5\">...</p>\n</blockquote>\n<p>Besides, it would be ambiguous anyway since it's possible to call static functions on instances:</p>\n<blockquote>\n<p id=\"so_5365689_5365714_6\"><strong>ISO 14882:2003 C++ Standard 9.4/2 \u2013 Static members</strong></p>\n<p id=\"so_5365689_5365714_7\">A static member <code>s</code> of class <code>X</code> may be\n  referred to using the <em>qualified-id</em>\n  expression <code>X::s</code>; it is not necessary\n  to use the class member access syntax\n  (5.2.5) to refer to a <code>static member</code>. A\n  <code>static</code> member may be referred to using\n  the class member access syntax, in\n  which case the <code>object-expression</code> is\n  evaluated. <em>[Example:</em></p>\n</blockquote>\n<pre><code>class process {\npublic:\n        static void reschedule();\n}\nprocess&amp; g();\nvoid f()\n{\n        process::reschedule(); // OK: no object necessary\n        g().reschedule();      // g() is called\n}\n</code></pre>\n<blockquote>\n<p id=\"so_5365689_5365714_8\"><em>\u2014end example]</em></p>\n<p id=\"so_5365689_5365714_9\">...</p>\n</blockquote>\n<p>So there would be ambiguity with what you have:</p>\n<pre><code>class Foo\n{\npublic:\n    string bla;\n    Foo() { bla = \"nonstatic\"; }\n    void print() { cout &lt;&lt; bla &lt;&lt; endl; }\n    static void print() { cout &lt;&lt; \"static\" &lt;&lt; endl; }\n};\n\nint main()\n{\n    Foo f;\n    // Call the static or non-static member function?\n    // C++ standard 9.4/2 says that static member\n    // functions are callable via this syntax. But\n    // since there's also a non-static function named\n    // \"print()\", it is ambiguous.\n    f.print();\n}\n</code></pre>\n<hr>\n<p>To address your question about whether you can check what instance a member function is being called on, there is the <code>this</code> keyword. The <code>this</code> keyword points to the object for which function was invoked. However, the <code>this</code> keyword will always point to an object i.e. it will never be <code>NULL</code>. Therefore it's not possible to check if a function is being called statically or not \u00e0 la PHP.</p>\n<blockquote>\n<p id=\"so_5365689_5365714_10\"><strong>ISO 14882:2003 C++ Standard 9.3.2/1 \u2013 The this pointer</strong></p>\n<p id=\"so_5365689_5365714_11\">In the body of a nonstatic (9.3)\n  member function, the keyword <code>this</code> is a\n  non-lvalue expression whose value is\n  the address of the object for which\n  the function is called.</p>\n</blockquote>\n</hr>", "OwnerUserId": "308661", "LastEditorUserId": "308661", "LastEditDate": "2011-03-20T00:16:32.430", "Id": "5365714", "Score": "44", "CreationDate": "2011-03-19T23:40:43.570", "LastActivityDate": "2011-03-20T00:16:32.430"}, "5365689": {"CommentCount": "2", "AcceptedAnswerId": "5365714", "PostTypeId": "1", "LastEditorUserId": "627517", "CreationDate": "2011-03-19T23:36:06.683", "LastActivityDate": "2011-03-20T00:16:32.430", "LastEditDate": "2011-03-19T23:47:43.567", "ViewCount": "16377", "FavoriteCount": "4", "Title": "C++ Overload Static Function with Non-Static Function", "Id": "5365689", "Score": "22", "Body": "<p>I would like to print two different things depending on whether a function is called statically with <code>Foo::print()</code> or from an instance of <code>Foo foo; foo.print();</code></p>\n<p>EDIT: Here is a class definition that definitely does not work, as answered by a few people already.</p>\n<pre><code>class Foo {\n    string bla;\n    Foo() { bla = \"nonstatic\"; }\n\n    void print() { cout &lt;&lt; bla &lt;&lt; endl; }\n    static void print() { cout &lt;&lt; \"static\" &lt;&lt; endl; }\n};\n</code></pre>\n<p>However, is there a good way of achieving this effect? Basically, I would like to do:</p>\n<pre><code>if(this is a static call)\n    do one thing\nelse\n    do another thing\n</code></pre>\n<p>Phrased in another way, I know PHP can check if the <code>*this</code> variable is defined or not to determine whether the function is called statically. Does C++ have the same capability?</p>\n", "Tags": "<c++><static><overloading><method-overloading><non-static>", "OwnerUserId": "627517", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_5365689_5365714_11": {"section_id": 5895, "quality": 0.9230769230769231, "length": 12}, "so_5365689_5365714_7": {"section_id": 5900, "quality": 0.9032258064516129, "length": 28}, "so_5365689_5365714_1": {"section_id": 557, "quality": 1.0, "length": 5}}, "n3337": {"so_5365689_5365714_11": {"section_id": 5666, "quality": 0.9230769230769231, "length": 12}, "so_5365689_5365714_7": {"section_id": 5672, "quality": 0.9032258064516129, "length": 28}, "so_5365689_5365714_1": {"section_id": 548, "quality": 1.0, "length": 5}}, "n4659": {"so_5365689_5365714_11": {"section_id": 7378, "quality": 0.9230769230769231, "length": 12}, "so_5365689_5365714_7": {"section_id": 7382, "quality": 0.9032258064516129, "length": 28}, "so_5365689_5365714_1": {"section_id": 580, "quality": 1.0, "length": 5}}}});