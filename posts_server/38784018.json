post_cb({"38784701": {"ParentId": "38784018", "CommentCount": "0", "Body": "<p><code>myString.resize(l)</code> will not change the string's capacity, except when <code>l</code> is large then the string's size. Just call <code>myString.capacity()</code> and see for yourself.</p>\n", "OwnerUserId": "6677995", "PostTypeId": "2", "Id": "38784701", "Score": "0", "CreationDate": "2016-08-05T08:31:22.067", "LastActivityDate": "2016-08-05T08:31:22.067"}, "38784151": {"ParentId": "38784018", "CommentCount": "0", "Body": "<p>Yes, string class has a member function\n<a href=\"http://www.cplusplus.com/reference/string/string/resize/\" rel=\"nofollow\">String resize member funtion..</a></p>\n", "OwnerUserId": "6626185", "PostTypeId": "2", "Id": "38784151", "Score": "0", "CreationDate": "2016-08-05T08:01:34.900", "LastActivityDate": "2016-08-05T08:01:34.900"}, "38785417": {"ParentId": "38784018", "LastEditDate": "2016-08-05T09:17:14.547", "CommentCount": "7", "CreationDate": "2016-08-05T09:06:33.703", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "PostTypeId": "2", "Id": "38785417", "Score": "3", "Body": "<p>The capacity is not requested to be copied to be same when <code>std::string</code> being copied.</p>\n<p><a href=\"http://eel.is/c++draft/string.cons#2\" rel=\"nofollow\">$21.3.1.2/2 basic_string constructors and assignment operators\n[string.cons]</a>:</p>\n<blockquote id=\"so_38784018_38785417_0\">\n<pre><code>Table 49 \u2014 basic_string(const basic_string&amp;) effects\nElement   Value\ndata()    points at the first element of an allocated copy of the array whose first element is pointed at by str.data()\nsize()    str.size()\ncapacity()    a value at least as large as size()\n</code></pre>\n</blockquote>\n<p>The only guarantee is the capacity of the string will be at least as large as its size after copying.</p>\n<p>It means you have to do this by yourself:</p>\n<pre><code>for (int i = myVec.size(); i--;) {\n    myVec[i].reserve(myVec[i].size() + MAX_BUFFER);\n    clone.push_back(myVec[i]);\n    clone.back().reserve(myVec[i].capacity());\n}\n</code></pre>\n", "LastActivityDate": "2016-08-05T09:17:14.547"}, "38784018": {"CommentCount": "5", "ViewCount": "73", "PostTypeId": "1", "LastEditorUserId": "5945178", "CreationDate": "2016-08-05T07:54:27.370", "LastActivityDate": "2016-08-05T11:46:16.593", "Title": "C++ How to preserve string capacity when copying", "AcceptedAnswerId": "38785417", "LastEditDate": "2016-08-05T11:46:16.593", "Id": "38784018", "Score": "0", "Body": "<p><strong>EDIT</strong> (original post in edit history)</p>\n<p>I'm able to reproduce my problem with this example:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n#define MAX_BUFFER 30\n\nint main(int argc, char **argv) {\n\n    vector&lt;string&gt; myVec = { \"hey\",\"asd\",\"haha\" };\n    vector&lt;string&gt; clone;\n\n    for (int i = myVec.size(); i--;) {\n        myVec[i].reserve(myVec[i].size() + MAX_BUFFER);\n        clone.push_back(myVec[i]);\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Add a breakpoint before <em>return 0;</em> . Now, inspect strings that are in myVec and clone. <strong>Their capacity is not the same!</strong></p>\n", "Tags": "<c++><string><insert><resize><capacity>", "OwnerUserId": "5945178", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_38784018_38785417_0": {"section_id": 1569, "quality": 0.88, "length": 22}}, "n3337": {"so_38784018_38785417_0": {"section_id": 1565, "quality": 0.88, "length": 22}}, "n4659": {"so_38784018_38785417_0": {"section_id": 1718, "quality": 0.88, "length": 22}}}});