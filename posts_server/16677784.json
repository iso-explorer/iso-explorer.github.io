post_cb({"16678008": {"ParentId": "16677784", "CommentCount": "4", "Body": "<p>No, it's not safe, because <code>std::exception</code> doesn't have a constructor taking a char* in the standard. You are using an MS extension. To make it portable and safe, use <code>std::runtime_error</code> instead, to which you can pass a <code>std::string</code> in the ctor.</p>\n", "OwnerUserId": "1968182", "PostTypeId": "2", "Id": "16678008", "Score": "2", "CreationDate": "2013-05-21T19:30:51.903", "LastActivityDate": "2013-05-21T19:30:51.903"}, "16677784": {"CommentCount": "0", "AcceptedAnswerId": "16678210", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-05-21T19:16:46.933", "LastActivityDate": "2013-05-21T20:02:35.460", "LastEditDate": "2013-05-21T19:20:13.690", "ViewCount": "607", "FavoriteCount": "0", "Title": "std::exception using message from local object", "Id": "16677784", "Score": "6", "Body": "<p>Is the following code safely throwing an exception with custom message?</p>\n<pre><code>#include &lt;exception&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main() {\n  try {\n    std::ostringstream msg;\n    msg &lt;&lt; \"give me \" &lt;&lt; 5;\n    throw std::exception(msg.str().c_str());\n  } catch (std::exception&amp; e) {\n    std::cout &lt;&lt; \"exception: \" &lt;&lt; e.what();\n  }\n}\n</code></pre>\n<p>With VC++-2008 this gives:</p>\n<pre><code>exception: give me 5\n</code></pre>\n<p>But now I wonder why the message \"give me 5\" from the local object <code>msg</code> is still available in the catch-block? By the time the message is printed both the stream- and the temporary string-object should have been deleted? Btw: This way of generating a message for an exception seems also to work accross several functions and also if new memory is allocated in the catch-block before printing the exception.</p>\n<p>Or is it necessary to define a custom exception class with a std::string member in order to safely keep the message until printing it.</p>\n", "Tags": "<c++><visual-c++><exception>", "OwnerUserId": "1725562", "AnswerCount": "3"}, "16678210": {"ParentId": "16677784", "CommentCount": "4", "Body": "<p>It's perfectly safe. The constructor that takes a C string as a single parameter makes a copy of the string. The constructor that takes a C string and a length parameter allow you to specify no memory be allocated and stores a pointer to the string (the length parameter is ignored).</p>\n<p>Note that these two constructors are extensions to the <code>std::exception</code> class and are not standard. Also be aware that the constructor that takes a C string as a single parameter is not marked as explicit.</p>\n", "OwnerUserId": "845568", "PostTypeId": "2", "Id": "16678210", "Score": "4", "CreationDate": "2013-05-21T19:44:37.030", "LastActivityDate": "2013-05-21T19:44:37.030"}, "bq_ids": {"n4140": {"so_16677784_16678377_1": {"section_id": 3337, "quality": 0.9142857142857143, "length": 32}, "so_16677784_16678377_0": {"section_id": 3336, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_16677784_16678377_1": {"section_id": 3207, "quality": 0.9142857142857143, "length": 32}, "so_16677784_16678377_0": {"section_id": 371, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_16677784_16678377_1": {"section_id": 4104, "quality": 0.7714285714285715, "length": 27}, "so_16677784_16678377_0": {"section_id": 4103, "quality": 0.8888888888888888, "length": 8}}}, "16678377": {"ParentId": "16677784", "PostTypeId": "2", "CommentCount": "2", "Body": "<h2>It's OK.</h2>\n<p>Per \u00a715.1/3:</p>\n<blockquote>\n<p id=\"so_16677784_16678377_0\">Throwing an exception copy-initializes (8.5, 12.8) a temporary object,\n  called the exception object.</p>\n</blockquote>\n<p>and \u00a715.1/4:</p>\n<blockquote>\n<p id=\"so_16677784_16678377_1\">The memory for the exception object is allocated in an unspecified\n  way, except as noted in 3.7.4.1. If a handler exits by rethrowing,\n  control is passed to another handler for the same exception. The\n  exception object is destroyed after either the last remaining active\n  handler for the exception exits by any means other than rethrowing...</p>\n</blockquote>\n<p>so after <code>throw expression</code>:</p>\n<p>the <em>expression</em> will be copied (new object will be created by copy constructor) and you shouldn't worry about the local object.</p>\n<p>\u00a0</p>\n<p>About the <code>msg</code> and <code>const char*</code> which you're worrying... here is Microsoft's implementation:</p>\n<pre><code>exception::exception(const char * const &amp; _What)\n: _Mywhat(NULL), _Mydofree(false)\n{\n   _Copy_str(_What);\n //^^^^^^^^^^^^^^^^^\n}\n\nvoid exception::_Copy_str(const char * _What)\n{\n   if (_What != NULL)\n   {\n      const size_t _Buf_size = strlen(_What) + 1;\n      _Mywhat = static_cast&lt;char *&gt;(malloc(_Buf_size));\n       if (_Mywhat != NULL)\n       {\n         _CRT_SECURE_STRCPY(const_cast&lt;char *&gt;(_Mywhat), _Buf_size, _What);\n       //^^^^^^^^^^^^^^^^^^\n         _Mydofree = true;\n       }\n   }\n }\n</code></pre>\n<p>It copies the <code>_What</code> not just storing the pointer.</p>\n", "OwnerUserId": "952747", "LastEditorUserId": "952747", "LastEditDate": "2013-05-21T20:02:35.460", "Id": "16678377", "Score": "3", "CreationDate": "2013-05-21T19:54:24.910", "LastActivityDate": "2013-05-21T20:02:35.460"}});