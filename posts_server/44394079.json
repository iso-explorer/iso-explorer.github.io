post_cb({"44394203": {"ParentId": "44394079", "CommentCount": "0", "Body": "<p>If <code>bar</code> is a non-static data member of your class <code>Foo</code>, then the <code>bar</code>-content of a <code>foo</code>-object will be part of the <code>foo</code>-object; it will reside where <code>foo</code> resides (on the stack, on the heap, ...) and it will be created and destroyed once <code>foo</code> gets created or destroyed.</p>\n<p>If <code>bar</code> is a static data member, then it will exist once in your complete program and will \"live\" until the program finishes.</p>\n", "OwnerUserId": "2630032", "PostTypeId": "2", "Id": "44394203", "Score": "0", "CreationDate": "2017-06-06T15:34:02.593", "LastActivityDate": "2017-06-06T15:34:02.593"}, "44394079": {"CommentCount": "1", "ViewCount": "43", "PostTypeId": "1", "LastEditorUserId": "1147455", "CreationDate": "2017-06-06T15:28:07.060", "LastActivityDate": "2017-06-06T16:19:10.840", "Title": "c++ create object with an array as member", "AcceptedAnswerId": "44394212", "LastEditDate": "2017-06-06T16:19:10.840", "Id": "44394079", "Score": "0", "Body": "<p>i'm new to c++ (coming from java) and i'm actually struggeling with the \nfollowing:\nLet foo be a class</p>\n<pre><code>int bar[10] = {};\n\nFoo::Foo()\n{\n    bar[1] = 42;\n\n}\n</code></pre>\n<p>and doSmth() a method in the main class:</p>\n<pre><code>Foo doSmth(){\nFoo f;\nf.bar[0] = 10;\nreturn f;\n}\n</code></pre>\n<p>the main will be something like:</p>\n<pre><code>int main(int argc, char *argv[])\n{\nFoo f = doSmth();\n\ncout &lt;&lt; f.bar[1] &lt;&lt; endl;\ncout &lt;&lt; f.bar[0] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>\n<p>Is this the right way to return the <code>foo</code>-object in <code>doSmth()</code>?\nI want to create the object on stack, but I'm worried about the <code>array (bar)</code> from the foo object, when will it be deleted from stack?</p>\n", "Tags": "<c++><arrays><object>", "OwnerUserId": "8120564", "AnswerCount": "3"}, "44394682": {"ParentId": "44394079", "PostTypeId": "2", "CommentCount": "2", "Body": "<h1>Is this the right way to return the <code>foo</code> object in <code>doSmth()</code>?</h1>\n<p>Yes, objects created locally must be returned by value. Typically the compiler will create the object in place and the copy will be optimized out. You can read more about returning local objects here: <a href=\"https://isocpp.org/wiki/faq/ctors#return-local-var-by-value-optimization\" rel=\"nofollow noreferrer\">https://isocpp.org/wiki/faq/ctors#return-local-var-by-value-optimization</a></p>\n<h1>I want to create the object on stack, but I'm worried about <code>bar</code> from the <code>foo</code> object, when will it be deleted from stack?</h1>\n<p>As mentioned above, because of return value optimization the compiler will typically not even create this object within <code>doSmith</code>'s stack frame. Furthermore, even if it was created in <code>doSmith</code>'s stack frame, the behavior of the default copy constructor and the default assignment operator is such that:</p>\n<blockquote>\n<p id=\"so_44394079_44394682_0\">If the subobject is an array, each element is assigned, in the manner appropriate to the element type</p>\n</blockquote>\n<p>See 15.8.1[class.copy.ctor]14.1 and 15.8.2[class.copy.assign]12.2</p>\n", "OwnerUserId": "2642059", "LastEditorUserId": "2642059", "LastEditDate": "2017-06-06T16:01:28.933", "Id": "44394682", "Score": "0", "CreationDate": "2017-06-06T15:54:30.270", "LastActivityDate": "2017-06-06T16:01:28.933"}, "44394212": {"ParentId": "44394079", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_44394079_44394212_0\">Is this the right way to return the foo object in doSmth()?</p>\n</blockquote>\n<p>It sure is.</p>\n<blockquote>\n<p id=\"so_44394079_44394212_1\">I want to create the object on stack</p>\n</blockquote>\n<p>You have.</p>\n<blockquote>\n<p id=\"so_44394079_44394212_2\">but i'm worried about the array (bar) from the foo object</p>\n</blockquote>\n<p><code>bar</code> is not \"from <code>foo</code>\". <code>bar</code> is a global static object.</p>\n<blockquote id=\"so_44394079_44394212_3\">\n<pre><code>f.bar[1]\n</code></pre>\n</blockquote>\n<p>This is ill formed, since <code>bar</code> is not a member of <code>Foo</code>. To declare a member, it has to be inside the definition of the class:</p>\n<pre><code>struct Foo {\n    int bar[10] = {};\n};\n</code></pre>\n<blockquote>\n<p id=\"so_44394079_44394212_4\">when will it be deleted from stack?</p>\n</blockquote>\n<p>If <code>bar</code> has static storage, such as in your code, then it is destroyed at the end of the program. If it is a (non static) member, then it is destroyed when its complete object is destroyed i.e. the instance of <code>Foo</code> that contains it.</p>\n", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2017-06-06T15:40:01.300", "Id": "44394212", "Score": "2", "CreationDate": "2017-06-06T15:34:28.323", "LastActivityDate": "2017-06-06T15:40:01.300"}, "bq_ids": {"n4140": {"so_44394079_44394682_0": {"section_id": 477, "quality": 1.0, "length": 9}}, "n3337": {"so_44394079_44394682_0": {"section_id": 468, "quality": 1.0, "length": 9}}, "n4659": {"so_44394079_44394682_0": {"section_id": 500, "quality": 1.0, "length": 9}}}});