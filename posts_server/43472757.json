post_cb({"43472757": {"CommentCount": "3", "AcceptedAnswerId": "43472970", "LastEditDate": "2017-04-19T04:43:44.087", "LastEditorUserId": "264325", "CreationDate": "2017-04-18T12:53:17.820", "LastActivityDate": "2017-04-19T06:12:43.717", "PostTypeId": "1", "ViewCount": "464", "Title": "Exception behavior C++14 vs C++98", "Id": "43472757", "OwnerUserId": "6354590", "Body": "<p>I have written following program</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n\nclass Myclass\n{\n    public:\n    ~Myclass() \n    {\n        //throw std::runtime_error(\"second (in destructor)\");\n        throw 1;\n    }\n};\n\nvoid fun()\n{\n    Myclass obj;\n}\nint main()\n{   \n    try\n    {\n        fun();      \n    }\n    catch (const std::exception&amp; e)\n    {\n       std::cout &lt;&lt; e.what();\n    }\n    catch(...)\n    {\n       std::cout &lt;&lt; \" ... default Catch\" &lt;&lt; std::endl; \n    }\n    std::cout &lt;&lt; \"Normal\" &lt;&lt; std::endl;\n    return 0;\n}  \n</code></pre>\n<p>When I run above program in <code>C++98</code> mode (cpp.sh) it prints</p>\n<pre><code> ... default Catch\nNormal\n</code></pre>\n<p>When I run it with <code>C++14</code> mode, it does not print anything.  <strong>Why is there a change in this behavior?</strong> </p>\n<p>I do understand that whenever any exception occurred and any <code>destructor</code> (within stack unwinding process) throws any exception, it terminates the application. But here only one time exception is thrown from <code>try</code> block that is from <code>destructor</code>.</p>\n", "Tags": "<c++><exception><c++14><c++98>", "Score": "6", "AnswerCount": "2"}, "43472970": {"ParentId": "43472757", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Since C++11, a destructor without an explicitly spelled out exception specification has the same exception specification as the default-generated one would have. In your case, the default-generated destructor would be <code>noexcept</code> (most default-generated destructors are), so your destructor is considered <code>noexcept</code> as well. Throwing from a <code>noexcept</code> function automatically calls <code>std::terminate</code>.</p>\n<p>If you want the exception to be catchable, declare the destructor as throwing:</p>\n<pre><code>~Myclass() noexcept(false)\n{\n    //throw std::runtime_error(\"second (in destructor)\");\n    throw 1;\n}\n</code></pre>\n<p>But before you do that, <em>reconsider.</em> It's a <a href=\"https://stackoverflow.com/questions/130117/throwing-exceptions-out-of-a-destructor\"><strong>bad idea</strong> to have throwing destructors</a>.</p>\n", "OwnerUserId": "1782465", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:55.110", "Id": "43472970", "Score": "14", "CreationDate": "2017-04-18T13:02:00.543", "LastActivityDate": "2017-04-19T06:12:43.717"}, "bq_ids": {"n4659": {"so_43472757_43473261_1": {"section_id": 4136, "quality": 0.875, "length": 14}, "so_43472757_43473261_0": {"section_id": 416, "quality": 0.7058823529411765, "length": 12}}}, "43473261": {"ParentId": "43472757", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Throwing exceptions from destructors is always a bad idea since if there's already an exception in flight (e.g. destructor called during stack unwinding) <code>std::terminate</code> will be called.</p>\n<p>That said, C++11 added an implicit <code>noexcept(true)</code> to destructors (except cases listed below) and that means, again, <code>std::terminate</code> if throwing from a <code>noexcept(true)</code> destructor.</p>\n<p>\u00a712.4/3</p>\n<blockquote>\n<p id=\"so_43472757_43473261_0\">[class.dtor]\n  [ Note: A declaration of a destructor that does not have a noexcept-specifier has the same exception\n  specification as if had been implicitly declared (15.4). \u2014 end note ]</p>\n</blockquote>\n<p>and \u00a715.4/14</p>\n<blockquote>\n<p id=\"so_43472757_43473261_1\">[except.spec]\n  The exception specification for an implicitly-declared destructor, or a destructor without a noexcept-specifier,\n  is potentially-throwing if and only if any of the destructors for any of its potentially constructed subojects is\n  potentially throwing.</p>\n</blockquote>\n<p>I strongly recommend restructuring your code in order <strong>not</strong> to throw in destructors.</p>\n", "OwnerUserId": "1938163", "LastEditorUserId": "1938163", "LastEditDate": "2017-04-18T13:22:24.507", "Id": "43473261", "Score": "4", "CreationDate": "2017-04-18T13:13:32.463", "LastActivityDate": "2017-04-18T13:22:24.507"}});