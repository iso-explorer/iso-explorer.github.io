post_cb({"bq_ids": {"n4140": {"so_2138110_2138181_0": {"length": 67, "quality": 0.9305555555555556, "section_id": 5404}}, "n3337": {"so_2138110_2138181_0": {"length": 67, "quality": 0.9305555555555556, "section_id": 5199}}, "n4659": {"so_2138110_2138181_0": {"length": 60, "quality": 0.8333333333333334, "section_id": 6853}}}, "2138110": {"ViewCount": "1505", "Body": "<p>If a header file contains a function definition it can be inlined by the compiler. If the function is exported, the function's name and implementation must also be made available to clients during linkage. How does a compiler achieve this? Does it both inline the function and provide an implementation for external callers?</p>\n<p>Consider Foo.h:</p>\n<pre><code>class Foo\n{\n    int bar() { return 1; }\n};\n</code></pre>\n<p>Foo::bar may be inlined or not in library foo.so. If another piece of code includes Foo.h does it always create its own copy of Foo::bar, whether inlined or not?</p>\n", "AcceptedAnswerId": "2138181", "Title": "How does a compiler deal with inlined exported functions?", "CreationDate": "2010-01-26T07:57:34.133", "Id": "2138110", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2010-01-27T07:31:07.437", "LastEditorUserId": "19863", "LastActivityDate": "2010-01-27T07:31:07.437", "Score": "4", "OwnerUserId": "19863", "Tags": "<c++><compiler-construction><export><inline>", "AnswerCount": "4"}, "2138181": {"Id": "2138181", "PostTypeId": "2", "Body": "<p>Header files are just copy-pasted into the source file \u2014 that's all <code>#include</code> does. A function is only <code>inline</code> if declared using that keyword or if defined inside the class definition, and <code>inline</code> is only a hint; it doesn't force the compiler to produce different code or prohibit you from doing anything you could otherwise do.</p>\n<p>You can still take the address of an <code>inline</code> function, or equivalently, as you mention, export it. For those uses, the compiler simply treats it as non-<code>inline</code> and uses a <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow noreferrer\">One Definition Rule</a> (the rule which says the user can't apply two definitions to the same function, class, etc) to \"ensure\" the function is defined once and only one copy is exported. Normally you are only allowed to have one definition among all sources; an inline function must have one definition which is repeated exactly in each source it is used.</p>\n<p>Here is what the standard has to say about <code>inline extern</code> functions (7.1.2/4):</p>\n<blockquote>\n<p id=\"so_2138110_2138181_0\">An inline function shall be defined in\n  every translation unit in which it is\n  used and shall have exactly the same\n  definition in every case (3.2). [Note:\n  a call to the inline function may be\n  encountered before its defi- nition\n  appears in the translation unit. ] If\n  a function with external linkage is\n  declared inline in one transla- tion\n  unit, it shall be declared inline in\n  all translation units in which it\n  appears; no diagnostic is required. An\n  inline function with external linkage\n  shall have the same address in all\n  translation units. A static local\n  variable in an extern inline function\n  always refers to the same object. A\n  string literal in an extern inline\n  function is the same object in\n  different translation units.</p>\n</blockquote>\n", "LastEditorUserId": "153285", "LastActivityDate": "2010-01-26T17:16:14.270", "Score": "2", "CreationDate": "2010-01-26T08:20:42.990", "ParentId": "2138110", "CommentCount": "4", "OwnerUserId": "153285", "LastEditDate": "2010-01-26T17:16:14.270"}, "2138125": {"Id": "2138125", "PostTypeId": "2", "Body": "<p>It usually means that it ends up creating a separate inlined method for every obj file that uses it at link time. It can also fail or refuse to inline many things, so this can cause a problem because you can wind up with bloated objs without getting the performance benefitting of inlining. The same thing can happen with virtual method inlining so it can be worth forcing inining and setting warning for inline failure (about the only useful warning message compilers give).</p>\n", "LastActivityDate": "2010-01-26T08:02:57.920", "CommentCount": "3", "CreationDate": "2010-01-26T08:02:57.920", "ParentId": "2138110", "Score": "1", "OwnerUserId": "204739"}, "2138173": {"Id": "2138173", "PostTypeId": "2", "Body": "<p>By export, I'm guessing you mean something such as getting a pointer to the function and later calling the function through the pointer.</p>\n<p>Yes, in that case, the compiler will generate a regular function so that it can be invoked from a pointer.</p>\n<p>One way to do this is with a link-once section.  The idea is that in translation unit gets the code in a special type of section that has a name based on the function name.  During linking, the linker will only keep one instance of identically named link-once sections.</p>\n", "LastEditorUserId": "29809", "LastActivityDate": "2010-01-26T08:32:17.563", "Score": "0", "CreationDate": "2010-01-26T08:19:00.760", "ParentId": "2138110", "CommentCount": "0", "OwnerUserId": "29809", "LastEditDate": "2010-01-26T08:32:17.563"}, "2138164": {"Id": "2138164", "PostTypeId": "2", "Body": "<p>inlined functions do not exist in the compiled binary: that is because they are taken and placed directly at the call site (so called IN-LINE). Each usage of the inlined function results in the complete code to be pulled in at that place.</p>\n<p>So inlined functions cannot be exported because they do not exist. But you can still use them if you have a definition in one header. And yes, you MUST provide a definition for an inlined function, otherwise you cannot use it.</p>\n<p>If you managed to export an inlined function then it is sure that it is not inline anymore: inline is not a strict semantic element. Depending on the compiler and compiler settings, one compiler might choose to inline, another not, sometimes provide a warning, sometimes even an error (which personnally I would prefer being the default behaviour, because it shows up the places where unintended things occur)</p>\n", "LastActivityDate": "2010-01-26T08:16:48.357", "CommentCount": "7", "CreationDate": "2010-01-26T08:16:48.357", "ParentId": "2138110", "Score": "-1", "OwnerUserId": "170443"}});