post_cb({"bq_ids": {"n4140": {"so_47656576_47658367_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 5776}}, "n3337": {"so_47656576_47658367_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 5549}}, "n4659": {"so_47656576_47658367_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 7233}}}, "47656576": {"ViewCount": "400", "Body": "<p>I read that C++11 has introduced the concept of attributes for example <code>[[noreturn]]</code> which is to indicate that the function doesn not return to the caller. </p>\n<pre><code>[[noreturn]] void fun() \n{\n    throw std::string(\"Error!!!\");\n}\n\nvoid func()\n{\n    fun();\n}\n\nvoid aTempFunc()\n{\n    try\n    {\n        func();\n    }\n    catch (std::string &amp;e)\n    {\n        std::cout &lt;&lt; e &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>By looking at the example the reader can understand that the function throws an exception and call will not be returned to the <code>func</code> function.\nI am bit confused to understand what are C++ attributes and why it is required? How a programmer can really make use of these attributes?</p>\n<p>Can someone explain in detail. Please correct me if my understanding about the attributes is wrong.\nThanks.</p>\n", "AcceptedAnswerId": "47658367", "Title": "Attributes in C++. Are they really required for programmers?", "CreationDate": "2017-12-05T14:56:52.740", "LastActivityDate": "2017-12-06T15:42:24.330", "CommentCount": "8", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-12-05T15:02:00.383", "LastEditorUserId": "3747770", "Id": "47656576", "Score": "7", "OwnerUserId": "3747770", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "47658367": {"Id": "47658367", "PostTypeId": "2", "Body": "<p>Most of the attributes are compiler hint, ABI specification or requirement relative to the target object format (visibility, section, etc.).</p>\n<p>So most attributes do not change the <em>observable behavior</em> of your program: if you remove all the attributes of your source code, and if it compiles, you can reasonably expect to have a resulting program behaving as the one compiled with the attributes.</p>\n<p>But there are also attributes that can noticeably affect the behavior or compilability of your program, for example the <code>align</code> attribute, even if they do not change drastically the semantic of your code.</p>\n<p>Implementation can provide their own attributes, and these attributes can have any consequence as long as the <em>observable behaviors</em> of the program follow the c++ language, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4700.pdf\" rel=\"nofollow noreferrer\">C++ standard</a>[intro.compliance]:</p>\n<blockquote>\n<p id=\"so_47656576_47658367_0\">A conforming implementation may have extensions (including additional library functions), provided they\n  do not alter the behavior of any well-formed program. Implementations are required to diagnose programs\n  that use such extensions that are ill-formed according to this document. Having done so, however, they can\n  compile and execute such programs.</p>\n</blockquote>\n", "LastEditorUserId": "5632316", "LastActivityDate": "2017-12-06T15:42:24.330", "Score": "4", "CreationDate": "2017-12-05T16:31:37.417", "ParentId": "47656576", "CommentCount": "2", "OwnerUserId": "5632316", "LastEditDate": "2017-12-06T15:42:24.330"}, "47656859": {"Id": "47656859", "PostTypeId": "2", "Body": "<p>attributes are put by the programmer, for the compiler benefit. Basically, they give the compiler more information and allow for more optimization.</p>\n<p>For example the <code>noreturn</code> attribute allow the compiler to reclaim stack memory before calling the function (because you will not need the stack frames again) or at least consider the code following the call as dead code. </p>\n", "LastActivityDate": "2017-12-05T15:11:29.853", "Score": "3", "CreationDate": "2017-12-05T15:11:29.853", "ParentId": "47656576", "CommentCount": "0", "OwnerUserId": "686184"}});