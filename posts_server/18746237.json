post_cb({"bq_ids": {"n4140": {"so_18746237_18860724_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3266}, "so_18746237_18860724_0": {"length": 13, "quality": 0.8125, "section_id": 3242}}, "n3337": {"so_18746237_18860724_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3138}, "so_18746237_18860724_0": {"length": 13, "quality": 0.8125, "section_id": 3115}}, "n4659": {"so_18746237_18860724_0": {"length": 11, "quality": 0.6875, "section_id": 4000}}}, "18746237": {"ViewCount": "447", "Body": "<p>This compiles fine in clang 3.3:</p>\n<pre><code>template &lt;typename T&gt;\nstruct M;\n\ntemplate &lt;typename R, typename C, typename... A&gt;\nstruct M &lt;R (C::*)(A...)&gt; { };\n\ntemplate &lt;typename R, typename C, typename... A&gt;\nstruct M &lt;R (C::*)(A...) &amp;&gt; { };\n</code></pre>\n<p>but fails in gcc 4.8.1:</p>\n<pre><code>[...] error: redefinition of \u2018struct M &lt;R (C::*)(A ...)&gt;\u2019\n struct M &lt;R (C::*)(A...) &amp;&gt; { };\n        ^\n[...] error: previous definition of \u2018struct M &lt;R (C::*)(A ...)&gt;\u2019\n struct M &lt;R (C::*)(A...)&gt; { };\n        ^\n</code></pre>\n<p>When used in different contexts, this results in all sorts of unexpected compiler behaviour like crashing or internal compiler errors.</p>\n<p>I understand ref-qualified member functions are referred to as \"rvalue references for *this\" (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm\">N2439</a>) in the standard, and are <a href=\"http://gcc.gnu.org/projects/cxx0x.html\">supported by gcc 4.8.1</a>.</p>\n<p>The problem here is to use them as template arguments, where gcc does not appear to discriminate between a ref-qualified and an ordinary member function type.</p>\n<p>clang's implementation of the std library seems to detect whether this feature is supported by</p>\n<pre><code>__has_feature(cxx_reference_qualified_functions)\n</code></pre>\n<p>So, is this use of ref-qualified functions standard, or a language extension?</p>\n", "AcceptedAnswerId": "18860724", "Title": "ref-qualified member functions as template arguments?", "CreationDate": "2013-09-11T16:11:38.043", "Id": "18746237", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-09-11T16:43:30.617", "LastEditorUserId": "2644390", "LastActivityDate": "2013-09-17T22:08:52.143", "Score": "9", "OwnerUserId": "2644390", "Tags": "<c++><templates><c++11><member-functions><ref-qualifier>", "AnswerCount": "1"}, "18860724": {"Id": "18860724", "PostTypeId": "2", "Body": "<p>According to 8.3.5 [dcl.fct] paragraph 6 (I added some highlightening to the quoted text):</p>\n<blockquote>\n<p id=\"so_18746237_18860724_0\">The return type, the parameter-type-list, <strong>the ref-qualifier</strong>, and the cv-qualifier-seq, but not the default arguments (8.3.6) or the exception specification (15.4), <strong>are part of the function type</strong>.</p>\n</blockquote>\n<p>That is, the ref-qualifier is certainly part of the type. Further according to 8.4.1 [dcl.fct.def.general] paragraph 5 you can create pointer-to-members including the ref-qualifiers:</p>\n<blockquote>\n<p id=\"so_18746237_18860724_1\">A cv-qualifier-seq or <strong>a ref-qualifier</strong> (or both) <strong>can be part of</strong> a non-static member function declaration, non-static member function definition, or <strong>pointer to member function only</strong> (8.3.5); see 9.3.2.</p>\n</blockquote>\n<p>There is no specific restriction that pointer to member functions with ref-qualifier cannot be used as non-type template arguments. That is, I think the partial specialization you tried to use should work. However, support for ref-qualifiers is a fairly new feature in both clang and gcc, i.e., probably not all corner cases have been ironed out. I tried the snipped above with fairly recent snapshots of both gcc (20130811) and clang (trunk 190769) and both compiled the code OK. Of course, this snippet doesn't really do anything and I didn't try to abuse this feature. I would guess you just triggered a few compiler bugs and I'm sure that both projects would appreciate error reports against their latest snapshots.</p>\n", "LastActivityDate": "2013-09-17T22:08:52.143", "Score": "3", "CreationDate": "2013-09-17T22:08:52.143", "ParentId": "18746237", "CommentCount": "2", "OwnerUserId": "1120273"}});