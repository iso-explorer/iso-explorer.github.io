post_cb({"12190126": {"ParentId": "12190051", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>When you delegate the member initialization to another constructor, there is an assumption that the other constructor initializes the object <em>completely</em>, including all members (i.e. including the <code>lines</code> member in your example). You can't therefore initialize any of the members again.</p>\n<p>The relevant quote from the Standard is (emphasis mine):</p>\n<blockquote>\n<p id=\"so_12190051_12190126_0\">(\u00a712.6.2/6) A mem-initializer-list can delegate to another constructor of the constructor\u2019s class using any class-or-decltype that denotes the constructor\u2019s class itself. If a mem-initializer-id designates the constructor\u2019s class, <strong>it shall be the only mem-initializer</strong>; the constructor is a delegating constructor, and the constructor selected by the  is the target constructor. [...]</p>\n</blockquote>\n<p>You can work-around this by defining the version of the constructor that takes arguments <em>first</em>:</p>\n<pre><code>Tokenizer::Tokenizer(std::stringstream *lines)\n  : lines(lines)\n{\n}\n</code></pre>\n<p>and then define the default constructor using delegation:</p>\n<pre><code>Tokenizer::Tokenizer()\n  : Tokenizer(nullptr)\n{\n}\n</code></pre>\n<p>As a general rule, you should fully specify that version of the constructor that takes the largest number of arguments, and then delegate from the other versions (using the desired default values as arguments in the delegation).</p>\n", "OwnerUserId": "777186", "LastEditorUserId": "777186", "LastEditDate": "2012-08-30T05:34:23.190", "Id": "12190126", "Score": "71", "CreationDate": "2012-08-30T04:55:13.910", "LastActivityDate": "2012-08-30T05:34:23.190"}, "12190051": {"CommentCount": "0", "AcceptedAnswerId": "12190126", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-08-30T04:46:02.870", "LastActivityDate": "2014-03-26T20:43:08.877", "LastEditDate": "2017-05-23T10:31:30.387", "ViewCount": "15640", "FavoriteCount": "5", "Title": "Member initialization while using delegated constructor", "Id": "12190051", "Score": "55", "Body": "<p>I've started trying out the C++11 standard and i found <a href=\"https://stackoverflow.com/questions/308276/c-call-constructor-from-constructor\" title=\"this\">this</a> question which describes how to call your ctor from another ctor in the same class to avoid having a init method or the like. Now i'm trying the same thing with code that looks like this:</p>\n<p>hpp:</p>\n<pre><code>class Tokenizer\n{\npublic:\n  Tokenizer();\n  Tokenizer(std::stringstream *lines);\n  virtual ~Tokenizer() {};\nprivate:\n  std::stringstream *lines;\n};\n</code></pre>\n<p>cpp:</p>\n<pre><code>Tokenizer::Tokenizer()\n  : expected('=')\n{\n}\n\nTokenizer::Tokenizer(std::stringstream *lines)\n  : Tokenizer(),\n    lines(lines)\n{\n}\n</code></pre>\n<p>But this is giving me the error: \n<code>In constructor \u2018config::Tokenizer::Tokenizer(std::stringstream*)\u2019:\n/path/Tokenizer.cpp:14:20: error: mem-initializer for \u2018config::Tokenizer::lines\u2019 follows constructor delegation</code> I've tried moving the Tokenizer() part first and last in the list but that didn't help.</p>\n<p>What's the reason behind this and how should i fix it? I've tried moving the <code>lines(lines)</code> to the body with <code>this-&gt;lines = lines;</code> instead and it works fine. But i would really like to be able to use the initializer list.</p>\n<p>Thanks in advance!</p>\n", "Tags": "<c++><gcc><c++11><ctor-initializer>", "OwnerUserId": "1055398", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12190051_12190126_0": {"section_id": 433, "quality": 0.8461538461538461, "length": 22}}, "n3337": {"so_12190051_12190126_0": {"section_id": 425, "quality": 0.8461538461538461, "length": 22}}, "n4659": {"so_12190051_12190126_0": {"section_id": 451, "quality": 0.9230769230769231, "length": 24}}}});