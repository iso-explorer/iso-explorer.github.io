post_cb({"bq_ids": {"n4140": {"so_16730716_16731034_0": {"length": 10, "quality": 1.0, "section_id": 3471}}, "n3337": {"so_16730716_16731034_0": {"length": 10, "quality": 1.0, "section_id": 3340}}, "n4659": {"so_16730716_16731034_0": {"length": 10, "quality": 1.0, "section_id": 4234}}}, "16730716": {"ViewCount": "1257", "Body": "<p>A rather basic question but I am a little bit lost here. I am working on a library, which works with complex numbers. So far I used my implementation under Mac OS 10.8 and Ubuntu 10.04 (by using llvm-gcc on Man and gcc under Ubuntu).\nYesterday I tried it on another machine with the icpc (icc/2013.3) and the complex number crunch part failed. </p>\n<p>I nailed the problem down by using this simple example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;complex&gt;\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n    std::complex&lt;double&gt; tmpcmplxnumber(26.0,0.0);\n    cout &lt;&lt; \"Number: \" &lt;&lt; tmpcmplxnumber &lt;&lt; endl;\n    std::complex&lt;double&gt; newcmplxnumber = 1.0 - tmpcmplxnumber;\n    cout &lt;&lt; \"New Number: \" &lt;&lt; newcmplxnumber &lt;&lt; endl;\n\n    cout &lt;&lt; \"Sqrt of New Number: \" &lt;&lt; sqrt(newcmplxnumber) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>gcc output (both machines) :</p>\n<pre><code>Number: (26,0)\nNew Number: (-25,-0)\nSqrt of New Number: (0,-5)\n</code></pre>\n<p>icpc output:</p>\n<pre><code>Number: (26,0)\nNew Number: (-25,0)\nSqrt of New Number: (0,5)\n</code></pre>\n<p>If I am informed correctly gcc implements the ISO standard, so the result should be correct (with all the signed-zero stuff ... etc) So is the icpc implementation \"wrong\" or is there a flag for that specific issue ?</p>\n<p><em>update</em>\nI know that both results are valid from a mathematical point of view, however I need the gcc result also when using the icpc.</p>\n", "Title": "Square root of complex numbers - g++ vs icpc", "CreationDate": "2013-05-24T08:31:37.387", "LastActivityDate": "2015-06-09T13:04:12.807", "CommentCount": "2", "LastEditDate": "2015-06-09T13:04:12.807", "PostTypeId": "1", "LastEditorUserId": "2411320", "Id": "16730716", "Score": "1", "OwnerUserId": "846034", "Tags": "<c++><standards><complex-numbers><icc>", "AnswerCount": "1"}, "16731034": {"Id": "16731034", "PostTypeId": "2", "Body": "<p><code>sqrt</code> is normally the non-negative square root, which is the one denoted by the \"square root\" sign in mathematics.</p>\n<p>According to the (draft) Standard (26.4.8, <em>complex transcendentals</em>),</p>\n<blockquote>\n<p id=\"so_16730716_16731034_0\">If the argument is a negative real number, the value returned lies on\n  the positive imaginary axis.</p>\n</blockquote>\n<p>so it looks like gcc is at fault here.</p>\n", "LastEditorUserId": "404970", "LastActivityDate": "2013-05-24T09:10:26.330", "Score": "1", "CreationDate": "2013-05-24T08:51:02.187", "ParentId": "16730716", "CommentCount": "2", "LastEditDate": "2013-05-24T09:10:26.330", "OwnerUserId": "404970"}});