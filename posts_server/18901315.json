post_cb({"bq_ids": {"n4140": {"so_18901315_18902462_2": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_18901315_18902462_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5850}, "so_18901315_18902462_5": {"length": 17, "quality": 0.6538461538461539, "section_id": 435}, "so_18901315_18902462_3": {"length": 17, "quality": 1.0, "section_id": 3304}, "so_18901315_18902462_6": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_18901315_18902462_4": {"length": 16, "quality": 0.8888888888888888, "section_id": 370}, "so_18901315_18902462_8": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_18901315_18902462_0": {"length": 6, "quality": 1.0, "section_id": 3298}}, "n3337": {"so_18901315_18902462_1": {"length": 6, "quality": 0.5454545454545454, "section_id": 359}, "so_18901315_18902462_5": {"length": 25, "quality": 0.9615384615384616, "section_id": 427}, "so_18901315_18902462_2": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_18901315_18902462_8": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_18901315_18902462_4": {"length": 16, "quality": 0.8888888888888888, "section_id": 360}, "so_18901315_18902462_6": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_18901315_18902462_0": {"length": 6, "quality": 1.0, "section_id": 3168}, "so_18901315_18902462_3": {"length": 17, "quality": 1.0, "section_id": 3174}}, "n4659": {"so_18901315_18902462_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 7329}, "so_18901315_18902462_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 4070}, "so_18901315_18902462_2": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_18901315_18902462_4": {"length": 16, "quality": 0.8888888888888888, "section_id": 384}, "so_18901315_18902462_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4063}, "so_18901315_18902462_5": {"length": 17, "quality": 0.6538461538461539, "section_id": 454}}}, "18901315": {"ViewCount": "434", "Body": "<p>On GCC 4.6.1, when I declare an instance of my own type that has a defaulted constructor, and if I instantiate an object of that type and initialize it with braces ( like Foo my_foo{}; ), the POD members in that class will only zero-initialize if there is no other constructor declared. If there is no other constructor except the defaulted one, they will zero-init like expected.</p>\n<p>But, on GCC 4.7.3, the zero-initialize happens either way, which is the behavior I expected.</p>\n<p>What's the difference here? Is this a compiler bug? Both of these GCC versions support defaulted constructors of the C++11 standard.</p>\n<p>There's no real need to stick with old GCC versions, but I'd like to understand what's going on here.</p>\n<p>note: I'm defaulting the main ctor, op=. and copy ctor simply to keep the type usable with variadic functions (clang demands this to classify the class as POD, although gcc let's me get away with using the type with variadic functions even with user-defined main ctor. bonus points if you can tell me why.)</p>\n<p>Here is an example program to illustrate, including some output at the bottom (from binaries compiled with both GCC versions):</p>\n<pre><code>#include &lt;cstdio&gt;\n\n// pod and pod_wctor are identical except that pod_wctor defines another ctor\n\nstruct pod {\n    pod( void ) = default;\n    pod( const pod&amp; other ) = default;\n    pod&amp; operator=( const pod&amp; other ) = default;\n\n    int x,y,z;\n};\n\nstruct pod_wctor {\n    pod_wctor( void ) = default;\n    pod_wctor( const int setx, const int sety, const int setz ) : x(setx), y(sety), z(setz) { }\n    pod_wctor( const pod_wctor&amp; other ) = default;\n    pod_wctor&amp; operator=( const pod_wctor&amp; other ) = default;\n\n    int x,y,z;\n};\n\nint main ( void ) {\n\n    printf(\"the following shuold be uninitialized:\\n\");\n\n    pod pee;\n    printf( \"    %i,%i,%i\\n\", pee.x, pee.y, pee.z);\n\n    pod_wctor podtor;\n    printf( \"    %i,%i,%i\\n\", podtor.x, podtor.y, podtor.z);\n\n    printf(\"the following shuold be initialized to 0,0,0:\\n\");\n\n    pod peenit{};\n    printf( \"    %i,%i,%i\\n\", peenit.x, peenit.y, peenit.z );\n\n    pod_wctor podtornit{};\n    printf( \"    %i,%i,%i\\n\", podtornit.x, podtornit.y, podtornit.z );\n\n    return 0;\n\n}\n\n// compiled with: g++ m.cpp -std=gnu++0x\n// g++ (Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1 (i386)\n/****************** output *******************\nthe following shuold be uninitialized:\n    10381592,134513249,134520820\n    134513969,134513504,0\nthe following shuold be initialized to 0,0,0:\n    0,0,0\n    7367877,134513945,8724468\n*********************************************/\n\n// compiled with: g++ m.cpp -std=gnu++0x\n// gcc version 4.7.3 (Ubuntu/Linaro 4.7.3-2ubuntu4) (i386)\n/****************** output *******************\nthe following shuold be uninitialized:\n    -1218358300,-1217268232,134520832\n    134514450,1,-1079827548\nthe following shuold be initialized to 0,0,0:\n    0,0,0\n    0,0,0\n*********************************************/\n</code></pre>\n", "AcceptedAnswerId": "18902462", "Title": "defaulted ctor differences between gcc 4.6 and 4.7", "CreationDate": "2013-09-19T17:30:18.750", "Id": "18901315", "CommentCount": "2", "LastEditDate": "2013-09-19T17:45:08.583", "PostTypeId": "1", "LastEditorUserId": "683041", "LastActivityDate": "2013-09-19T19:00:06.920", "Score": "6", "OwnerUserId": "683041", "Tags": "<c++><gcc><c++11><default-constructor><brace-initialization>", "AnswerCount": "1"}, "18902462": {"Id": "18902462", "PostTypeId": "2", "Body": "<p>By adding the constructor <code>pod_wctor( const int setx, const int sety, const int setz ) : x(setx), y(sety), z(setz) { }</code> to your class, it loses its status as an aggregate: [dcl.init.aggregate]/1</p>\n<blockquote>\n<p id=\"so_18901315_18902462_0\">An aggregate is an array or a class (Clause 9) with no user-provided constructors</p>\n</blockquote>\n<p>It still is a POD, because a <em>trivial class</em> only needs to have no non-trivial <strong>default</strong> ctors: [class]/6</p>\n<blockquote>\n<p id=\"so_18901315_18902462_1\">A <em>trivial class</em> is a class that has a default constructor (12.1), has no non-trivial default constructors,\n  and is trivially copyable.</p>\n</blockquote>\n<hr>\n<p>The interesting point here is that for an aggregate, the list-initialization <code>pod peenit{};</code> performs aggregate-initialization:</p>\n<blockquote>\n<p id=\"so_18901315_18902462_2\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<ul>\n<li>If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1). [...]</li>\n<li>Otherwise, if the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is value-initialized.</li>\n</ul>\n</blockquote>\n<p>(Note: this is the revised order. AFAIK, in the Standard itself, the order of those two points is reversed, which must be a defect, as every aggregate has a default ctor -- the implicitly declared&amp;defined one.)</p>\n<p>Aggregate-initialization leads to value-initialization of the <code>int</code> members: [dcl.init.aggr]/7</p>\n<blockquote>\n<p id=\"so_18901315_18902462_3\">If there are fewer <em>initializer-clauses</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from an empty initializer list</p>\n</blockquote>\n<p>and [dcl.init.list]/3 \"Otherwise, if the initializer list has no elements, the object is value-initialized\"</p>\n<hr>\n<p>However, for the non-aggregate <code>pod_wctor</code>, the list-initialization <code>pod_wctor podtornit{}</code> directly performs value-initialization, which calls the default ctor. [class.ctor]/6 specifies:</p>\n<blockquote>\n<p id=\"so_18901315_18902462_4\">The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no <em>ctor-initializer</em> (12.6.2) and an empty <em>compound-statement</em>.</p>\n</blockquote>\n<p>and in [class.base.init]/8, we find:</p>\n<blockquote>\n<p id=\"so_18901315_18902462_5\">In a non-delegating constructor, if a given non-static data member or base class is not designated by a <em>mem-initializer-id</em> (including the case where there is no <em>mem-initializer-list</em> because the constructor has no <em>ctor-initializer</em>) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<ul>\n<li>[...]</li>\n<li>otherwise, the entity is default-initialized (8.5).</li>\n</ul>\n</blockquote>\n<p>The default ctor <em>itself</em> does not guarantee zeroing of the members because it only does default-initialization of the members.</p>\n<hr>\n<p>The difference between default- and value-initialization: [dcl.init]</p>\n<blockquote>\n<p id=\"so_18901315_18902462_6\">[7] To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly <em>cv</em>-qualified) class type, the default constructor for <code>T</code> is called [...]</li>\n<li>[...]</li>\n<li>otherwise, no initialization is performed.</li>\n</ul>\n<p id=\"so_18901315_18902462_7\">[...]</p>\n<p id=\"so_18901315_18902462_8\">[8] To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly <em>cv</em>-qualified) class type with either no default constructor or a default constructor that is user-provided or deleted, then the object is default-initialized;</li>\n<li>if <code>T</code> is a (possibly <em>cv</em>-qualified) non-union class type without a user-provided or deleted default constructor, then the object is zero-initialized and, if <code>T</code> has a non-trivial default constructor, default-initialized;</li>\n<li>[...]</li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p>(I admit this confused me, and I had to revise my answer.)</p>\n<p><code>pod_wctor</code> has a default-constructor that is <em>not</em> user-provided. Therefore, for the list-initialization <code>pod_wctor podtornit{}</code>, the second bullet of <em>value-initialization</em> applies. The object <code>podtornit</code> itself is <em>zero-initialized</em>, which leads to a zero-initialization of its members. Only <em>then</em> will it be default-initialized, and the default ctor will be called. The latter does nothing, but the former guarantees the members will be zeroed.</p>\n</hr></hr></hr>", "LastEditorUserId": "420683", "LastActivityDate": "2013-09-19T19:00:06.920", "Score": "2", "CreationDate": "2013-09-19T18:36:10.510", "ParentId": "18901315", "CommentCount": "4", "OwnerUserId": "420683", "LastEditDate": "2013-09-19T19:00:06.920"}});