post_cb({"12145035": {"CommentCount": "4", "AcceptedAnswerId": "12145992", "PostTypeId": "1", "LastEditorUserId": "151292", "CreationDate": "2012-08-27T15:35:43.503", "LastActivityDate": "2012-08-27T18:16:59.413", "LastEditDate": "2012-08-27T18:16:59.413", "ViewCount": "1967", "FavoriteCount": "1", "Title": "std::function bound to member function", "Id": "12145035", "Score": "6", "Body": "<p>The following code doesn't compile in VS2012</p>\n<pre><code>class Zot\n{\npublic:\n    int A() { return 123; }\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    std::function&lt;int (Zot*)&gt; fn = &amp;Zot::A;\n    return 0;\n}\n</code></pre>\n<p>However, changing the assignment to</p>\n<pre><code>    std::function&lt;int (Zot*)&gt; fn = std::bind(&amp;Zot::A, std::placeholders::_1);\n</code></pre>\n<p>Does work.</p>\n<p>There are a lot of online examples that show the original syntax.  Did something change in the C++11 spec to disallow this syntax?</p>\n<p>Is there a valid shorter form for the assignment?</p>\n<p><strong>Edit</strong>: the compiler error (slightly edited for reabability) is:</p>\n<pre><code>1&gt;vc\\include\\functional(515): error C2664: 'std::_Func_class&lt;_Ret,_V0_t&gt;::_Set' : cannot convert parameter 1 from '_Myimpl *' to 'std::_Func_base&lt;_Rx,_V0_t&gt; *'\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *\n1&gt;          ]\n1&gt;          and\n1&gt;          [\n1&gt;              _Rx=int,\n1&gt;              _V0_t=Zot *\n1&gt;          ]\n1&gt;          Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast\n1&gt;          vc\\include\\functional(515) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Do_alloc&lt;_Myimpl,_Fret(__thiscall Zot::* const &amp;)(void),_Alloc&gt;(_Fty,_Alloc)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int,\n1&gt;              _Alloc=std::allocator&lt;std::_Func_class&lt;int,Zot *&gt;&gt;,\n1&gt;              _Fty=int (__thiscall Zot::* const &amp;)(void)\n1&gt;          ]\n1&gt;          vc\\include\\functional(515) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Do_alloc&lt;_Myimpl,_Fret(__thiscall Zot::* const &amp;)(void),_Alloc&gt;(_Fty,_Alloc)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int,\n1&gt;              _Alloc=std::allocator&lt;std::_Func_class&lt;int,Zot *&gt;&gt;,\n1&gt;              _Fty=int (__thiscall Zot::* const &amp;)(void)\n1&gt;          ]\n1&gt;          vc\\include\\functional(515) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Reset_alloc&lt;_Fret,Zot,std::allocator&lt;_Ty&gt;&gt;(_Fret (__thiscall Zot::* const )(void),_Alloc)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int,\n1&gt;              _Ty=std::_Func_class&lt;int,Zot *&gt;,\n1&gt;              _Alloc=std::allocator&lt;std::_Func_class&lt;int,Zot *&gt;&gt;\n1&gt;          ]\n1&gt;          vc\\include\\functional(515) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Reset_alloc&lt;_Fret,Zot,std::allocator&lt;_Ty&gt;&gt;(_Fret (__thiscall Zot::* const )(void),_Alloc)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int,\n1&gt;              _Ty=std::_Func_class&lt;int,Zot *&gt;,\n1&gt;              _Alloc=std::allocator&lt;std::_Func_class&lt;int,Zot *&gt;&gt;\n1&gt;          ]\n1&gt;          vc\\include\\functional(675) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Reset&lt;int,Zot&gt;(_Fret (__thiscall Zot::* const )(void))' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int\n1&gt;          ]\n1&gt;          vc\\include\\functional(675) : see reference to function template instantiation 'void std::_Func_class&lt;_Ret,_V0_t&gt;::_Reset&lt;int,Zot&gt;(_Fret (__thiscall Zot::* const )(void))' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Ret=int,\n1&gt;              _V0_t=Zot *,\n1&gt;              _Fret=int\n1&gt;          ]\n1&gt;          c:\\..\\cxx11.cpp(17) : see reference to function template instantiation 'std::function&lt;_Fty&gt;::function&lt;int(__thiscall Zot::* )(void)&gt;(_Fx &amp;&amp;)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Fty=int (Zot *),\n1&gt;              _Fx=int (__thiscall Zot::* )(void)\n1&gt;          ]\n1&gt;          c:\\...\\cxx11.cpp(17) : see reference to function template instantiation 'std::function&lt;_Fty&gt;::function&lt;int(__thiscall Zot::* )(void)&gt;(_Fx &amp;&amp;)' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Fty=int (Zot *),\n1&gt;              _Fx=int (__thiscall Zot::* )(void)\n1&gt;          ]\n</code></pre>\n", "Tags": "<c++><visual-c++><c++11><visual-c++-2012>", "OwnerUserId": "3631", "AnswerCount": "2"}, "12145352": {"ParentId": "12145035", "CommentCount": "1", "Body": "<p>The following syntax works and is shorter at least:</p>\n<pre><code>std::function&lt;int (Zot*)&gt; fn = std::mem_fn(&amp;Zot::A);\n</code></pre>\n", "OwnerUserId": "3631", "PostTypeId": "2", "Id": "12145352", "Score": "5", "CreationDate": "2012-08-27T15:57:50.920", "LastActivityDate": "2012-08-27T15:57:50.920"}, "bq_ids": {"n4140": {"so_12145035_12145992_0": {"section_id": 4660, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_12145035_12145992_0": {"section_id": 4470, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_12145035_12145992_0": {"section_id": 6020, "quality": 0.7142857142857143, "length": 5}}}, "12145992": {"ParentId": "12145035", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, it should work (<a href=\"http://liveworkspace.org/code/758afb2deac915c4f09ee308b44c45cc\" rel=\"nofollow\">demo</a>). One of the requirements on the functor argument for any of the appropriate constructor (e.g. <code>template&lt;class F&gt; function(F f);</code>) of <code>std::function&lt;R(ArgsTypes...)&gt;</code> is:</p>\n<blockquote>\n<p id=\"so_12145035_12145992_0\">f shall be <em>Callable</em> (20.8.11.2) for argument types <code>ArgTypes</code> and return type <code>R</code>.</p>\n</blockquote>\n<p>(20.8.11.2.1 functionconstruct/copy/destroy [func.wrap.func.con])</p>\n<p>In turn, \"<em>Callable</em> for argument types <code>ArgTypes</code> and return type <code>R</code>\" is a Standard quasi-concept (for lack of concepts) defined in terms of the pseudo-expression <code>INVOKE(f, declval&lt;ArgTypes&gt;()..., R)</code>. This pseudo-expression unifies regular functors, which are invoked with the usual call syntax (e.g. <code>f(a, b, c)</code>), with pointers to members which have their own quirks (e.g. <code>p-&gt;*a</code> or <code>(r.*a)(b, c)</code>). <em>INVOKE</em> is defined in 20.8.2 Requirements [func.require].</p>\n<p>Furthermore, the effects of using the call operator of <code>std::function</code> include <code>INVOKE(f, std::forward&lt;ArgTypes&gt;(args)..., R)</code> (20.8.11.2.4 function invocation [func.wrap.func.inv]), meaning that the 'right' thing is done for pointers to members.</p>\n<p>There are in fact a lot of other things that are also defined in terms of <em>Callable</em>/<i>INVOKE</i> in the Standard, like <code>std::bind</code>, <code>std::thread</code>, <code>std::reference_wrapper</code> and <code>std::result_of</code>*.</p>\n<p>*: in particular this means that something like</p>\n<pre><code>template&lt;typename Functor&gt;\ntypename std::result_of&lt;Functor()&gt;::type apply(Functor functor)\n{ return std::forward&lt;Functor&gt;(functor)(); }\n</code></pre>\n<p>is problematic at least for that reason.</p>\n", "OwnerUserId": "726300", "LastEditorUserId": "726300", "LastEditDate": "2012-08-27T16:44:32.843", "Id": "12145992", "Score": "3", "CreationDate": "2012-08-27T16:38:43.343", "LastActivityDate": "2012-08-27T16:44:32.843"}});