post_cb({"bq_ids": {"n4140": {"so_23022349_23022366_0": {"length": 19, "quality": 0.95, "section_id": 520}}, "n3337": {"so_23022349_23022366_0": {"length": 19, "quality": 0.95, "section_id": 511}}, "n4659": {"so_23022349_23022366_0": {"length": 19, "quality": 0.95, "section_id": 541}}}, "23022349": {"ViewCount": "93", "Body": "<p>While researching solutions to the windows <code>min</code>/<code>max</code> macro problem, I found an answer that I really like but I do not understand why it works.  Is there something within the C++ specification that says that macro substitution doesn't occur within parens?  If so where is that?  Is this just a side effect of something else or is the language designed to work that way?  If I use extra parens the <code>max</code> macro doesn't cause a problem:</p>\n<pre><code>(std::numeric_limits&lt;int&gt;::max)()\n</code></pre>\n<p>I'm working in a large scale MFC project, and there are some windows libraries that use those macros so I'd prefer not to use the <code>#undef</code> trick.  </p>\n<p>My other question is this.  Does <code>#undef max</code> within a .cpp file only affect the file that it is used within, or would it undefine <code>max</code> for other compilation units?  </p>\n", "AcceptedAnswerId": "23022366", "Title": "Why do parens prevent macro substitution?", "CreationDate": "2014-04-11T20:51:05.843", "Id": "23022349", "CommentCount": "3", "LastEditDate": "2014-04-11T21:00:37.763", "PostTypeId": "1", "LastEditorUserId": "962089", "LastActivityDate": "2014-04-11T21:00:37.763", "Score": "2", "OwnerUserId": "2993440", "Tags": "<c++><stl>", "AnswerCount": "1"}, "23022366": {"Id": "23022366", "PostTypeId": "2", "Body": "<p>Function-like macros only expand when the next thing after is an opening parenthesis. When surrounding the name with parentheses, the next thing after the name is a closing parenthesis, so no expansion occurs.</p>\n<p>From C++11 \u00a7 16.3 [cpp.replace]/10:</p>\n<blockquote>\n<p id=\"so_23022349_23022366_0\">Each subsequent instance of the function-like macro name followed by a <strong>(</strong> as the next preprocessing token introduces the sequence of preprocessing tokens that is replaced by the replacement list in the de\ufb01nition (an invocation of the macro).</p>\n</blockquote>\n<p>To answer the other question, preprocessing happens before normal compilation and linking, so doing an <code>#undef</code> in an implementation file will only affect that file. In a header, it affects every file that includes that header.</p>\n", "LastEditorUserId": "962089", "LastActivityDate": "2014-04-11T20:58:19.613", "Score": "8", "CreationDate": "2014-04-11T20:52:40.110", "ParentId": "23022349", "CommentCount": "0", "OwnerUserId": "962089", "LastEditDate": "2014-04-11T20:58:19.613"}});