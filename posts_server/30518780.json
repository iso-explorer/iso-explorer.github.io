post_cb({"bq_ids": {"n4140": {"so_30518780_30518890_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 3280}}, "n3337": {"so_30518780_30518890_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 3151}}, "n4659": {"so_30518780_30518890_0": {"length": 31, "quality": 0.8378378378378378, "section_id": 4042}}}, "30518823": {"Id": "30518823", "PostTypeId": "2", "Body": "<p><code>operator=</code> is used for assignment, not initialisation. To provoke that, you'll have to assign to an already existing object.</p>\n<pre><code>Table t = {blah, blah};   // initialisation\nt = {wibble, wobble};     // assignment\n</code></pre>\n", "LastActivityDate": "2015-05-28T23:38:53.560", "CommentCount": "0", "CreationDate": "2015-05-28T23:38:53.560", "ParentId": "30518780", "Score": "4", "OwnerUserId": "204847"}, "30518780": {"ViewCount": "77", "Body": "<p>I have T class and Table that uses T for construction parameter. </p>\n<pre><code>struct T {\n    string name;\n    long value;\n};\n\nclass Table {\n\npublic:\n    T a, b, c;\n\n    Table(T a, T b, T c) {\n        cout &lt;&lt; \"From constructor: \" &lt;&lt; a.name &lt;&lt; endl;\n        this-&gt;a = a; this-&gt;b = b; this-&gt;c = c;\n    }\n    Table&amp; operator=(const Table&amp; a) {\n        cout &lt;&lt; \"In op=: \" &lt;&lt; a.a.name &lt;&lt; endl;\n        return *this;\n    }\n};\n</code></pre>\n<p>I also have an example function trying to invoke constructor and = operator.</p>\n<pre><code>int main(int argc, char *argv[]) {   \n    Table phone_numbers {\n        { \"Donald Duck\", 2015551234 },\n        { \"Mike Doonesbury\", 9794566089 }, \n        { \"Kell Dewclaw\", 1123581321 }\n        };\n    Table phone_numbers2 = {\n        { \"Donald Dog\", 2015551234 },\n        { \"Mike Doonesbury\", 9794566089 }, \n        { \"Kell Dewclaw\", 1123581321 }\n        };\n\n}\n</code></pre>\n<p>However both of them invokes only the constructor. </p>\n<pre><code>From constructor: Donald Duck\nFrom constructor: Donald Dog\n</code></pre>\n<p>What might be wrong? How to invoke = operator in this case? </p>\n", "AcceptedAnswerId": "30518823", "Title": "C++11 Uniform initialization for constructor and operator=", "CreationDate": "2015-05-28T23:34:11.133", "Id": "30518780", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-05-28T23:46:47.653", "Score": "1", "OwnerUserId": "260127", "Tags": "<c++><c++11><initialization>", "AnswerCount": "2"}, "30518890": {"Id": "30518890", "PostTypeId": "2", "Body": "<p><strong>8.5 Initalizers [dcl.init]</strong></p>\n<blockquote>\n<p id=\"so_30518780_30518890_0\">A declarator can specify an initial value for the identifier being\n  declared. The identifier designates a variable being initialized. The\n  process of initialization described in the remainder of 8.5 applies\n  also to initializations specified by other syntactic contexts, such\n  as the initialization of function parameters with argument expressions\n  (5.2.2) or the initialization of return values (6.6.3).  </p>\n<pre><code>initializer:\n    brace-or-equal-initializer\n    ( expression-list )\n\nbrace-or-equal-initializer:\n    = initializer-clause\n    braced-init-list\n\ninitializer-clause:\n    assignment-expression\n    braced-init-list\n\ninitializer-list:\n    initializer-clause ... opt\n    initializer-list , initializer-clause ... opt\n\nbraced-init-list:\n    { initializer-list , opt }\n    {}  \n</code></pre>\n</blockquote>\n<p>The way you have constructed <code>phone_numbers2</code> is using the second initialization syntax.  </p>\n", "LastActivityDate": "2015-05-28T23:46:47.653", "CommentCount": "0", "CreationDate": "2015-05-28T23:46:47.653", "ParentId": "30518780", "Score": "0", "OwnerUserId": "908939"}});