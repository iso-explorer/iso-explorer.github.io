post_cb({"27484483": {"CommentCount": "4", "AcceptedAnswerId": "27484734", "PostTypeId": "1", "LastEditorUserId": "2642059", "CreationDate": "2014-12-15T12:48:11.810", "LastActivityDate": "2016-06-13T11:37:05.703", "LastEditDate": "2016-06-13T11:37:05.703", "ViewCount": "673", "FavoriteCount": "1", "Title": "Default Initialization Versus Zero Initialization", "Id": "27484483", "Score": "1", "Body": "<p>I cannot understand the behavior of gcc 4.8.1 or Visual Studio 2015 with respect to default initialization versus value initialization.</p>\n<p>It doesn't help that I'm trying to understand the differences between these myself and possibly running into compiler bugs?</p>\n<p>My question is: <strong>Can someone explain this behavior? And ideally tell me what should be happening.</strong></p>\n<p>I have two classes:</p>\n<pre><code>class Foo{\n    int _bar;\npublic:\n    void printBar(){ cout &lt;&lt; _bar &lt;&lt; endl; }\n};\n\nclass bar{\n    int ent;\npublic:\n    int getEnt(){return ent;}\n};\n</code></pre>\n<p>I'm using the following code to test:</p>\n<pre><code>int main()\n{\n    Foo foo;\n\n    foo.printBar();\n    Foo().printBar();\n\n    bar b;\n\n    cout &lt;&lt; b.getEnt() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>On gcc and Visual Studio I get:</p>\n<blockquote>\n<p id=\"so_27484483_27484483_0\">134514795<br>\n  0<br>\n  0<br/></br></br></p>\n</blockquote>\n<p>Now if I change the test code to:</p>\n<pre><code>int main()\n{\n    Foo foo;\n\n    foo.printBar();\n\n    bar b;\n\n    cout &lt;&lt; b.getEnt() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>gcc gives me:</p>\n<blockquote>\n<p id=\"so_27484483_27484483_1\">0<br>\n  0</br></p>\n</blockquote>\n<p>And Visual Studio gives me:</p>\n<blockquote>\n<p id=\"so_27484483_27484483_2\">50790236<br>\n  51005888</br></p>\n</blockquote>\n", "Tags": "<c++><initialization><default><zero>", "OwnerUserId": "2642059", "AnswerCount": "4"}, "27484693": {"ParentId": "27484483", "LastEditDate": "2014-12-15T13:59:38.990", "CommentCount": "0", "CreationDate": "2014-12-15T13:00:54.327", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "PostTypeId": "2", "Id": "27484693", "Score": "1", "Body": "<p>The logic is quite simple:</p>\n<ol>\n<li>Default I initialization of a class just default initializes all members.</li>\n<li>Default initialization of built-in types leaves member uninitialized.</li>\n<li>Accessing an uninitialized object yields <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>.</li>\n<li>Undefined behavior can do anything it wants.</li>\n<li>Both compilers provide \"correct\" results. Note that causing <a href=\"http://dictionary.reference.com/browse/nasal+demons\" rel=\"nofollow\">nasal demons</a> to be emitted would also be correct.</li>\n</ol>\n", "LastActivityDate": "2014-12-15T13:59:38.990"}, "27484598": {"ParentId": "27484483", "LastEditDate": "2014-12-15T13:09:38.937", "CommentCount": "3", "CreationDate": "2014-12-15T12:55:18.137", "OwnerUserId": "1498580", "LastEditorUserId": "1498580", "PostTypeId": "2", "Id": "27484598", "Score": "2", "Body": "<p>n3376 quotes</p>\n<p>8.5/11</p>\n<blockquote>\n<p id=\"so_27484483_27484598_0\"><strong>If no initializer is specified for an object, the object is\n  default-initialized;</strong> if no initialization is performed, an object with\n  automatic or dynamic storage duration has indeterminate value. [ Note:\n  Objects with static or thread storage duration are zero-initialized,\n  see 3.6.2. \u2014 end note ]</p>\n</blockquote>\n<p>8.5/6</p>\n<blockquote>\n<p id=\"so_27484483_27484598_1\">To default-initialize an object of type T means: if T is a (possibly\n  cv-qualified) class type (Clause 9), the default constructor for T is\n  called (and the initialization is ill-formed if T has no accessible\n  default constructor);</p>\n</blockquote>\n<p>8.5/10</p>\n<blockquote>\n<p id=\"so_27484483_27484598_2\">An object whose initializer is an empty set of parentheses, i.e., (),\n  shall be value-initialized.</p>\n</blockquote>\n<p>8.5/7</p>\n<blockquote>\n<p id=\"so_27484483_27484598_3\">To value-initialize an object of type T means:</p>\n<p id=\"so_27484483_27484598_4\">...</p>\n<p id=\"so_27484483_27484598_5\">otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>8.5/5</p>\n<blockquote>\n<p id=\"so_27484483_27484598_6\">To zero-initialize an object or reference of type T means: if T is a\n  (possibly cv-qualified) non-union class type, each non-static data\n  member and each base-class subobject is zero-initialized and padding\n  is initialized to zero bits;</p>\n</blockquote>\n<p>So, in your case, there are nor static storage duration variables, nor thread-local variables, so objects <code>foo</code> and <code>b</code> will be default-initialized, that means, that constructor will be called. Default-constructor (not user-defined) will not initialize members and in members will be arbitrary garbage and this arbitrary garbage may be 0 (thanks to Jarod42 for point this in comment).\nAnd <code>Foo().printBar();</code> should print 0, since object is zero-initialized.</p>\n", "LastActivityDate": "2014-12-15T13:09:38.937"}, "27484734": {"ParentId": "27484483", "LastEditDate": "2014-12-15T13:07:54.837", "CommentCount": "0", "CreationDate": "2014-12-15T13:02:47.900", "OwnerUserId": "204847", "LastEditorUserId": "204847", "PostTypeId": "2", "Id": "27484734", "Score": "4", "Body": "<p>Default initialisation, of classes like this without user-defined constructors, does nothing, leaving each trivial member with an indeterminate value.</p>\n<p>Value initialisation will zero-initialise each member.</p>\n<p>In the first case, you're printing:</p>\n<ul>\n<li>the indeterminate value of a default-initialised <code>Foo foo;</code></li>\n<li>the zero value of a value-initialised <code>Foo()</code></li>\n<li>the indeterminate value of a default-initialised <code>bar b;</code></li>\n</ul>\n<p>The third one happens to be zero; perhaps because it reuses the storage of the temporary value-initialised <code>Foo</code>.</p>\n<p>In the second case, you're printing the indeterminate values of two default-initialised objects. Coincidentally, they have zero values in one case but not the other.</p>\n<p>Both programs have undefined behaviour, since they use uninitialised values.</p>\n", "LastActivityDate": "2014-12-15T13:07:54.837"}, "bq_ids": {"n4140": {"so_27484483_27484598_1": {"section_id": 3286, "quality": 0.9411764705882353, "length": 16}, "so_27484483_27484598_2": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_27484483_27484598_6": {"section_id": 3285, "quality": 1.0, "length": 22}, "so_27484483_27484598_0": {"section_id": 3291, "quality": 0.76, "length": 19}, "so_27484483_27484598_3": {"section_id": 3287, "quality": 1.0, "length": 4}}, "n3337": {"so_27484483_27484598_1": {"section_id": 3156, "quality": 1.0, "length": 17}, "so_27484483_27484598_2": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_27484483_27484598_6": {"section_id": 3155, "quality": 1.0, "length": 22}, "so_27484483_27484598_0": {"section_id": 3161, "quality": 0.84, "length": 21}, "so_27484483_27484598_3": {"section_id": 3157, "quality": 1.0, "length": 4}}, "n4659": {"so_27484483_27484598_1": {"section_id": 4049, "quality": 0.7058823529411765, "length": 12}, "so_27484483_27484598_0": {"section_id": 4053, "quality": 0.76, "length": 19}, "so_27484483_27484598_2": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_27484483_27484598_6": {"section_id": 4047, "quality": 0.9090909090909091, "length": 20}}}, "27484732": {"ParentId": "27484483", "LastEditDate": "2014-12-15T14:05:11.033", "CommentCount": "2", "CreationDate": "2014-12-15T13:02:43.903", "OwnerUserId": "3959454", "LastEditorUserId": "3959454", "PostTypeId": "2", "Id": "27484732", "Score": "1", "Body": "<pre><code>Foo foo;\n</code></pre>\n<p>This <em>default-initializes</em> <code>foo</code>, and since <code>Foo</code>'s default constructor is trivial, it effectively doesn't initialize it at all, so <code>foo._bar</code> can hold any value (including 0).</p>\n<pre><code>Foo()\n</code></pre>\n<p>This <em>value-initializes</em> the temporary object, which in case of trivial default constructor means zero-initialization, so <code>Foo()._bar</code> is equal to 0.</p>\n", "LastActivityDate": "2014-12-15T14:05:11.033"}});