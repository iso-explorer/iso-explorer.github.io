post_cb({"28673797": {"ParentId": "28673545", "CommentCount": "0", "Body": "<p>Throughout [class.base.init], \"constructor\" refers to the same \"constructor\" introduced in paragraph 1:</p>\n<blockquote>\n<p id=\"so_28673545_28673797_0\">In the definition of a constructor for a class, initializers for\n  direct and virtual base subobjects and non-static data members can be\n  specified by a <em>ctor-initializer</em>, which has the form [...]</p>\n</blockquote>\n<p>Paragraph 2 saying that in the definition of <em>a</em> constructor, the <em>mem-initializer-id</em> (there can be multiple <em>mem-initializer-id</em>s in a <em>mem-initializer-list</em>) can refer to one of three things:</p>\n<ul>\n<li>the constructor's class, i.e. a delegating constructor (paragraph 6)</li>\n<li>a non-static data member, i.e. <code>S() : n{5}</code></li>\n<li>a direct or virtual base of that class, i.e. <code>S() : Base(5)</code> (paragraph 3)</li>\n</ul>\n", "Id": "28673797", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "Score": "2", "CreationDate": "2015-02-23T12:26:11.823", "LastActivityDate": "2015-02-23T12:26:11.823"}, "28673746": {"ParentId": "28673545", "CommentCount": "1", "Body": "<p>Yes. It says that it's valid to have the same class as the mem-initializer-id, which would make the current constructor a delegating constructor. This is explained further in 12.6.2/6:</p>\n<blockquote>\n<p id=\"so_28673545_28673746_0\">If a mem-initializer-id designates the constructor\u2019s class,\n  it shall be the only mem-initializer; the constructor is a delegating constructor, and the constructor selected\n  by the mem-initializer is the target constructor.</p>\n</blockquote>\n", "OwnerUserId": "189205", "PostTypeId": "2", "Id": "28673746", "Score": "4", "CreationDate": "2015-02-23T12:22:58.550", "LastActivityDate": "2015-02-23T12:22:58.550"}, "28673545": {"CommentCount": "0", "ViewCount": "75", "CreationDate": "2015-02-23T12:11:57.640", "LastActivityDate": "2015-02-23T12:26:11.823", "Title": "Interpretation of the words \"constructor's class\" in \u00a712.6.2/2 in the C++11 Standard", "AcceptedAnswerId": "28673746", "PostTypeId": "1", "Id": "28673545", "Score": "1", "Body": "<p>As a sanity check, could someone confirm if the words <strong>constructor's class</strong> in this statement of \u00a712.6.2/2 refer to a delegating constructor?</p>\n<p>12.6.2/2 statement:</p>\n<blockquote>\n<p id=\"so_28673545_28673545_0\">Unless the mem-initializer-id names the constructor\u2019s class, a\n  non-static data member of the constructor\u2019s class, or a direct or\n  virtual base of that class, the mem-initializer is ill-formed.</p>\n</blockquote>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "411165", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_28673545_28673758_3": {"section_id": 433, "quality": 1.0, "length": 13}, "so_28673545_28673797_0": {"section_id": 428, "quality": 1.0, "length": 15}, "so_28673545_28673746_0": {"section_id": 433, "quality": 0.6923076923076923, "length": 9}, "so_28673545_28673758_1": {"section_id": 429, "quality": 0.8125, "length": 13}, "so_28673545_28673545_0": {"section_id": 429, "quality": 0.9375, "length": 15}, "so_28673545_28673758_2": {"section_id": 433, "quality": 0.8, "length": 12}}, "n3337": {"so_28673545_28673758_3": {"section_id": 425, "quality": 1.0, "length": 13}, "so_28673545_28673797_0": {"section_id": 420, "quality": 1.0, "length": 15}, "so_28673545_28673746_0": {"section_id": 425, "quality": 0.6923076923076923, "length": 9}, "so_28673545_28673758_1": {"section_id": 421, "quality": 0.8125, "length": 13}, "so_28673545_28673545_0": {"section_id": 421, "quality": 0.9375, "length": 15}, "so_28673545_28673758_2": {"section_id": 425, "quality": 0.8, "length": 12}}, "n4659": {"so_28673545_28673758_2": {"section_id": 451, "quality": 0.8, "length": 12}, "so_28673545_28673797_0": {"section_id": 446, "quality": 1.0, "length": 15}, "so_28673545_28673746_0": {"section_id": 451, "quality": 0.9230769230769231, "length": 12}, "so_28673545_28673758_1": {"section_id": 447, "quality": 0.8125, "length": 13}, "so_28673545_28673545_0": {"section_id": 447, "quality": 0.9375, "length": 15}, "so_28673545_28673758_3": {"section_id": 451, "quality": 1.0, "length": 13}}}, "28673758": {"ParentId": "28673545", "CommentCount": "1", "Body": "<p>They do. From the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf\" rel=\"nofollow\">delegating constructors proposal</a>:</p>\n<blockquote>\n<p id=\"so_28673545_28673758_0\">Change \u00a712.6.2(2) as follows:</p>\n<p id=\"so_28673545_28673758_1\">(...) Unless the <em>mem-initializer-id</em> names a non-static data member of the constructor's class, <strong>the constructor's class,</strong> or  a a direct or virtual base of that class, the <em>mem-initializer</em> is ill-formed. (...)</p>\n</blockquote>\n<p>The newly inserted text is underlined instead of bold in the proposal, but I can't do that in markdown. It goes on further:</p>\n<blockquote>\n<p id=\"so_28673545_28673758_2\"><em>A mem-initializer-list</em> can delegate to another constructor (the <em>target constructor</em>) of the constructor's class using any name that denotes the constructor's class itself. (...)</p>\n</blockquote>\n<p>This wording is found, with minor changes, in the final standard as 12.6.2 (6):</p>\n<blockquote>\n<p id=\"so_28673545_28673758_3\"><em>A mem-initializer-list</em> can delegate to another constructor of the constructor's class using any <em>class-or-decltype</em> that denotes the constructor's class itself. (...)</p>\n</blockquote>\n<p>So yes, all of this comes from the delegating constructors proposal and refers specifically to constructor delegation.</p>\n", "OwnerUserId": "4301306", "PostTypeId": "2", "Id": "28673758", "Score": "3", "CreationDate": "2015-02-23T12:23:37.893", "LastActivityDate": "2015-02-23T12:23:37.893"}});