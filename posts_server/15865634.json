post_cb({"15865634": {"CommentCount": "4", "ViewCount": "1640", "PostTypeId": "1", "LastEditorUserId": "866732", "CreationDate": "2013-04-07T17:44:30.993", "LastActivityDate": "2013-06-18T05:58:47.827", "Title": "inline function and class and header file", "LastEditDate": "2013-06-18T05:58:47.827", "Id": "15865634", "Score": "3", "Body": "<ol>\n<li>Will any function defined in the header file automatically be inline?</li>\n<li>If I declare a function in a class and give the definition outside using keyword inline, will this function be inline? If it is, why this does not against the law that inline function should be given the body at declaration?</li>\n</ol>\n", "Tags": "<c++><class><inline><one-definition-rule>", "OwnerUserId": "2225976", "AnswerCount": "3"}, "15865729": {"ParentId": "15865634", "PostTypeId": "2", "CommentCount": "9", "CreationDate": "2013-04-07T17:52:09.230", "Score": "4", "LastEditorUserId": "1762344", "LastEditDate": "2013-04-07T18:43:53.740", "Id": "15865729", "OwnerUserId": "1762344", "Body": "<blockquote>\n<p id=\"so_15865634_15865729_0\">is it that any function defined in the header file will automatically be inline?</p>\n</blockquote>\n<p>No, you should make any function defined outside of class body inline by hands. Otherwise, most likely you would get <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">ODR</a> violation (if include header in several translation units).</p>\n<p>ISO C++11</p>\n<blockquote>\n<p id=\"so_15865634_15865729_1\">3.2 One definition rule</p>\n<p id=\"so_15865634_15865729_2\">1: No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n<p id=\"so_15865634_15865729_3\">[...]</p>\n<p id=\"so_15865634_15865729_4\">4: <strong>Every program shall contain exactly one definition of every non-inline function</strong> or variable that is odr-used in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and 12.8). An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_15865634_15865729_5\">if I declare a function in a class and give the definition outside using keyword inline, will this function be inline? If it is, why this does not against the law that inline function should be given the body at declaration?</p>\n</blockquote>\n<p>There are several ways to do member function inline:</p>\n<p>First, according to 7.1.2/3:</p>\n<blockquote>\n<p id=\"so_15865634_15865729_6\"><strong>A function defined within a class definition is an inline function</strong>. The inline specifier shall not appear on a block scope function declaration.90 If the inline specifier is used in a friend declaration, that declaration shall be a definition or the function shall have previously been declared inline.</p>\n</blockquote>\n<pre><code>struct First\n{\n    void first(){}\n};\n</code></pre>\n<p>Second, Third and Fourth, according to 9.3/3:</p>\n<blockquote>\n<p id=\"so_15865634_15865729_7\">An <strong>inline</strong> member function (whether static or non-static) may also be defined outside of its class definition <strong>provided either its declaration in the class definition or its definition outside of the class definition declares the function as inline</strong>. [ Note: Member functions of a class in namespace scope have external linkage. Member functions of a local class (9.8) have no linkage. See 3.5. \u2014end note ]</p>\n</blockquote>\n<pre><code>struct STF\n{\n    void second();\n    inline void third();\n    inline void fourth();\n};\n\ninline void STF::second(){}\nvoid STF::third(){}\ninline void STF::fourth(){}\n</code></pre>\n</hr>", "LastActivityDate": "2013-04-07T18:43:53.740"}, "15865749": {"ParentId": "15865634", "CommentCount": "0", "CreationDate": "2013-04-07T17:53:41.017", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "15865749", "Score": "5", "Body": "<p>Any function defined inside a class definition is inline. Any function marked <code>inline</code> is also inline.</p>\n<pre><code>class C {\n    int f() { return 3; } // inline\n    int g();\n    int h();\n}\n\n\ninline int C::g() { return 4; } // inline\nint C::h() { return 5; } // not inline\n</code></pre>\n<p>If all this code is in a header and that header is used in more than one translation unit you'll get a complaint that <code>C::h</code> has more than one definition. <code>C::f</code> and <code>C::g</code> are okay because they're inline.  That's the primary role of <code>inline</code> these days: to permit defining the same function in multiple places (provided the definitions are \"the same\").</p>\n", "LastActivityDate": "2013-04-07T17:53:41.017"}, "bq_ids": {"n4140": {"so_15865634_15865729_4": {"section_id": 7041, "quality": 0.8888888888888888, "length": 32}, "so_15865634_15865729_2": {"section_id": 7038, "quality": 1.0, "length": 14}, "so_15865634_15865729_6": {"section_id": 5403, "quality": 0.9259259259259259, "length": 25}, "so_15865634_15865729_7": {"section_id": 5882, "quality": 0.9333333333333333, "length": 42}}, "n3337": {"so_15865634_15865729_4": {"section_id": 6786, "quality": 0.8888888888888888, "length": 32}, "so_15865634_15865729_2": {"section_id": 6784, "quality": 1.0, "length": 14}, "so_15865634_15865729_6": {"section_id": 5198, "quality": 0.9259259259259259, "length": 25}, "so_15865634_15865729_7": {"section_id": 5653, "quality": 0.9333333333333333, "length": 42}}, "n4659": {"so_15865634_15865729_4": {"section_id": 8538, "quality": 0.8888888888888888, "length": 32}, "so_15865634_15865729_6": {"section_id": 6852, "quality": 0.6666666666666666, "length": 18}, "so_15865634_15865729_2": {"section_id": 8535, "quality": 1.0, "length": 14}, "so_15865634_15865729_7": {"section_id": 7365, "quality": 0.9111111111111111, "length": 41}}}, "15865653": {"ParentId": "15865634", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-04-07T17:45:59.880", "Score": "1", "LastEditorUserId": "839436", "LastEditDate": "2013-04-07T18:02:58.080", "Id": "15865653", "OwnerUserId": "839436", "Body": "<p><code>inline</code> is a \"hint\", insofar as the compiler doesn't have to honor it.  It can make things inline that you don't mark inline and doesn't have to inline things that you mark as inline.</p>\n<p>By that, I mean you shouldn't rely on it.  Many recommend that you don't even use it as it is misleading.  Most modern compilers completely ignore it.</p>\n<p>The only practical use is to allow you to put static implementations into a header.  Whether or not that is a good thing to do is arguable.</p>\n", "LastActivityDate": "2013-04-07T18:02:58.080"}});