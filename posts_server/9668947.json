post_cb({"9669116": {"ParentId": "9668947", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_9668947_9669116_0\">apparently _(Upercase Letter) is reserved in the global namespace.</p>\n</blockquote>\n<p>No. It is reserved <strong>everywhere</strong>. Read 17.4.3.2.1 again:</p>\n<blockquote>\n<p id=\"so_9668947_9669116_1\">Each name that contains a double underscore (_ _) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</p>\n</blockquote>\n<p>This doesn\u2019t mention \u201cglobal namespace\u201d at all (the global namespace is only relevant in the subsequent rule).</p>\n", "OwnerUserId": "1968", "PostTypeId": "2", "Id": "9669116", "Score": "1", "CreationDate": "2012-03-12T14:38:08.870", "LastActivityDate": "2012-03-12T14:38:08.870"}, "9669127": {"ParentId": "9668947", "CommentCount": "4", "Body": "<p><code>_Int</code> clearly violates the first rule: \u201cEach name that contains a\ndouble underscore (_ _) or begins with an underscore followed by an\nuppercase letter (2.11) is reserved to the implementation for any \nuse.\u201d  \u201cany use\u201d means exactly what it says: it could\nbe a predefined macro, or trigger some special behavior in the compiler,\nor anything else the compiler author wants.  It doesn't matter where you\nuse the name, if you use it, it's undefined behavior (unless the\ncompiler documentation states otherwise).</p>\n<p>More generally, historically at least, compilers have been rather lax,\nand a number of system headers have traditionally included macros with\nnames starting with a single underscore followed by a lower case letter.\nIt's probably best avoiding those as well.  (Historically, even, there\nhave been names without an underscore as well.  I know I've had problems\nwith the name <code>linux</code> becoming <code>1</code>.  No underscores in sight, but...\nThere's not much you can do about this, however, except change the name\nwhen the conflict occurs.)</p>\n<p>Even more generally, underscores don't show up that well in some fonts,\nand it's best avoiding them at either end of a symbol.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "9669127", "Score": "6", "CreationDate": "2012-03-12T14:38:35.830", "LastActivityDate": "2012-03-12T14:38:35.830"}, "9669103": {"ParentId": "9668947", "CommentCount": "2", "Body": "<p>The rules you quoted from the standard state that an identifier starting with an underscore followed by an uppercase letter is reserved for <em>any use</em>, not just in the global namespace. So naming a member variable <code>_Ints</code> is not allowed.</p>\n<p>Identifiers starting with an underscore which is not followed by an underscore or uppercase letter are reserved in the global namespace. So you are allowed to name a member variable <code>_ints</code> for example, but you can't have a global variable named <code>_ints</code> which is in the global namespace.</p>\n", "OwnerUserId": "189205", "PostTypeId": "2", "Id": "9669103", "Score": "2", "CreationDate": "2012-03-12T14:37:20.073", "LastActivityDate": "2012-03-12T14:37:20.073"}, "bq_ids": {"n4140": {"so_9668947_9668947_0": {"section_id": 6307, "quality": 1.0, "length": 8}, "so_9668947_9669116_1": {"section_id": 6307, "quality": 0.9285714285714286, "length": 13}, "so_9668947_9668947_2": {"section_id": 7113, "quality": 0.8148148148148148, "length": 22}}, "n3337": {"so_9668947_9668947_0": {"section_id": 6064, "quality": 1.0, "length": 8}, "so_9668947_9669116_1": {"section_id": 6064, "quality": 0.9285714285714286, "length": 13}, "so_9668947_9668947_2": {"section_id": 6857, "quality": 0.8148148148148148, "length": 22}}, "n4659": {"so_9668947_9668947_0": {"section_id": 7844, "quality": 0.625, "length": 5}, "so_9668947_9669116_1": {"section_id": 6756, "quality": 0.8571428571428571, "length": 12}, "so_9668947_9668947_2": {"section_id": 8614, "quality": 0.8148148148148148, "length": 22}}}, "9668947": {"CommentCount": "0", "CreationDate": "2012-03-12T14:27:20.710", "PostTypeId": "1", "AcceptedAnswerId": "9669127", "LastEditorUserId": "4850040", "LastActivityDate": "2017-06-22T08:45:30.860", "LastEditDate": "2017-06-22T08:45:30.860", "ViewCount": "786", "FavoriteCount": "0", "Title": "Reserved names in the global namespace", "Id": "9668947", "Score": "5", "Body": "<p>Arising from my answer to <a href=\"/q/9660032/\">Dynamic array of objects in C++</a> and as a follow up to <a href=\"/q/228783/\">What are the rules about using an underscore in a C++ identifier?</a>:\napparently, names beginning with <code>_</code> followed by an uppercase letter are reserved in the global namespace. </p>\n<blockquote>\n<h3>17.4.3.2.1 Global names [<code>lib.global.names</code>]</h3>\n<p id=\"so_9668947_9668947_0\">Certain sets of names and function signatures are always reserved to the implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (<code>__</code>) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>\n</ul>\n<p id=\"so_9668947_9668947_1\"><sup>165)</sup> Such names are also reserved in namespace <code>::std</code> (17.4.3.1).</p>\n</blockquote>\n<p>In my answer to the first question I had a class that looked like this </p>\n<pre><code>class A\n{\n private:\n   vector&lt;int&gt; _Ints;\n}\n</code></pre>\n<p>In the comments I was told the <code>_Ints</code> identifier invokes undefined behavior, since it is a reserved name. However, according to the recent draft of the standard, name look-up of a member variable occurs using the following rule:</p>\n<blockquote>\n<h3>3.4.3.1 Class members [<code>class.qual</code>]</h3>\n<p id=\"so_9668947_9668947_2\">If the <em>nested-name-speci\ufb01er</em> of a <em>quali\ufb01ed-id</em> nominates a class, the name specified after the <em>nested-namespeci\ufb01er</em> is looked up in the scope of the class (10.2), except for the cases listed below. The name shall\n  represent one or more members of that class or of one of its base classes</p>\n</blockquote>\n<p>To me, that means that no member variable can ever be part of the global namespace, as its scope is the class.</p>\n<h3>And now, the question:</h3>\n<p>Is my understanding correct that member variables will never violate the implementation reserved names rule since they are not in the global namespace?  If I am not correct, could someone explain my misunderstanding of the look-up rule?</p>\n", "Tags": "<c++><name-resolution>", "OwnerUserId": "149458", "AnswerCount": "3"}});