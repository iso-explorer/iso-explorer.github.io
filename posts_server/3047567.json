post_cb({"3047567": {"CommentCount": "2", "ViewCount": "215", "CreationDate": "2010-06-15T17:38:49.737", "LastActivityDate": "2010-06-15T18:19:58.093", "Title": "Object allocation in C++", "AcceptedAnswerId": "3047593", "PostTypeId": "1", "Id": "3047567", "Score": "5", "Body": "<pre><code>char *myfunc() {\n    char *temp = \"string\";\n    return temp;\n}\n</code></pre>\n<p>In this piece of code, where does the allocation of the object pointed to by <code>temp</code> happen and what would be its scope?</p>\n<p>Is this function a valid way to return a char* pointer?</p>\n", "Tags": "<c++><string><pointers><scope>", "OwnerUserId": "182959", "AnswerCount": "3"}, "3047586": {"ParentId": "3047567", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This piece of code works (and is correct) because the object \"string\" is static data, which is \"allocated\" (so to say) during compilation - the linker places it in a special section of the executable.</p>\n<p>But standards-compliant C++ should say <code>const char*</code> instead of <code>char*</code> when referring to static data.</p>\n", "OwnerUserId": "72896", "LastEditorUserId": "13531", "LastEditDate": "2010-06-15T17:45:36.347", "Id": "3047586", "Score": "6", "CreationDate": "2010-06-15T17:41:42.550", "LastActivityDate": "2010-06-15T17:45:36.347"}, "3047593": {"ParentId": "3047567", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><strong>Is the code correct?</strong></p>\n<p>Yes your code is (almost) fine, because <code>\"string\"</code> is a string literal and located in static storage.</p>\n<p>Note: A pointer is just a variable which stores a memory address. This line simply stores the address of the string literal \"string\" inside a variable called <code>temp</code>.</p>\n<pre><code>char *temp = \"string\";\n</code></pre>\n<p>The C++ standard guarantees that the string literal will stay in memory for the duration of the program as defined below.   Which means you are free to use that memory address in any scope anywhere during the whole life of your program.</p>\n<hr>\n<p><strong>Why?</strong></p>\n<p>The C++03 standard (current) has this to say:</p>\n<blockquote>\n<p id=\"so_3047567_3047593_0\">An ordinary string literal has type\n  \u201carray of n const char\u201d and static\n  storage duration (3.7),</p>\n</blockquote>\n<p>And section 3.7.1 - 1:</p>\n<blockquote>\n<p id=\"so_3047567_3047593_1\">All objects which neither have dynamic\n  storage duration nor are local have\n  static storage duration. The storage\n  for these objects shall last for the\n  duration of the program.</p>\n</blockquote>\n<hr>\n<p><strong>Warning:</strong></p>\n<p>In your code you are returning a <code>char*</code>, you should really be returning a <code>const char *</code>.  It is undefined behavior if you try to modify a string literal, and your function return value shouldn't pretend to allow it.   </p>\n<p>On a related side note to the warning.  If you have in your code in 2 different places a string called <code>\"string\"</code> then whether or not they are distinct strings is implementation defined. </p>\n</hr></hr>", "OwnerUserId": "3153", "LastEditorUserId": "3153", "LastEditDate": "2010-06-15T18:19:58.093", "Id": "3047593", "Score": "13", "CreationDate": "2010-06-15T17:42:48.603", "LastActivityDate": "2010-06-15T18:19:58.093"}, "3047618": {"ParentId": "3047567", "CommentCount": "1", "Body": "<p>As has been mentioned it's allocated at compilation time; it's a literal.</p>\n<p>But in c++ it's <em>not</em> as valid as it could be because the pointer doesn't point to <code>const char</code>. In general, it's something you should consider doing in a very different way. </p>\n", "OwnerUserId": "12716", "PostTypeId": "2", "Id": "3047618", "Score": "3", "CreationDate": "2010-06-15T17:45:27.270", "LastActivityDate": "2010-06-15T17:45:27.270"}, "bq_ids": {"n4140": {"so_3047567_3047593_0": {"section_id": 5356, "quality": 0.9, "length": 9}, "so_3047567_3047593_1": {"section_id": 7164, "quality": 0.6666666666666666, "length": 12}}, "n3337": {"so_3047567_3047593_0": {"section_id": 5153, "quality": 0.9, "length": 9}, "so_3047567_3047593_1": {"section_id": 6908, "quality": 0.6666666666666666, "length": 12}}, "n4659": {"so_3047567_3047593_0": {"section_id": 6781, "quality": 0.9, "length": 9}, "so_3047567_3047593_1": {"section_id": 8672, "quality": 0.6666666666666666, "length": 12}}}});