post_cb({"bq_ids": {"n4140": {"so_2837469_2837506_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 5313}, "so_2837469_2837506_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5313}, "so_2837469_2837499_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5313}}, "n3337": {"so_2837469_2837506_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 5110}, "so_2837469_2837506_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5110}, "so_2837469_2837499_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5110}}, "n4659": {"so_2837469_2837506_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 6737}, "so_2837469_2837506_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 6737}, "so_2837469_2837499_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6737}}}, "2837506": {"Id": "2837506", "PostTypeId": "2", "Body": "<p>Yes, it will be handled as you describe, because it is in stage 5 that,</p>\n<blockquote>\n<p id=\"so_2837469_2837506_0\">Each source character set member and escape sequence in character constants and\n  string literals is converted to the corresponding member of the execution character\n  set (C99 \u00a75.1.1.2/1)</p>\n</blockquote>\n<p>The language in C++03 is effectively the same:</p>\n<blockquote>\n<p id=\"so_2837469_2837506_1\">Each source character set member, escape sequence, or universal-character-name in character literals and string literals is converted to a member of the execution character set (C++03 \u00a72.1/5)</p>\n</blockquote>\n<p>So, escape sequences (like <code>\\0</code>) are converted into members of the execution character set in stage five, before string literals are concatenated in stage six.</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2010-05-14T20:56:08.390", "Score": "6", "CreationDate": "2010-05-14T20:46:24.370", "ParentId": "2837469", "CommentCount": "3", "OwnerUserId": "151292", "LastEditDate": "2010-05-14T20:56:08.390"}, "2837488": {"Id": "2837488", "PostTypeId": "2", "Body": "<p>Because of the agreement between the C++ and C standards. Most, if not all, C++ implementations use a C preprocessor, so yes, C++ uses the C preprocessor.</p>\n", "LastEditorUserId": "448715", "LastActivityDate": "2012-07-13T20:37:46.107", "Score": "0", "CreationDate": "2010-05-14T20:43:23.480", "ParentId": "2837469", "CommentCount": "1", "OwnerUserId": "334526", "LastEditDate": "2012-07-13T20:37:46.107"}, "2837469": {"ViewCount": "4941", "Body": "<p>I found <a href=\"https://stackoverflow.com/questions/1476892/poster-with-the-8-phases-of-translation-in-the-c-language\">this</a> regarding how the <strong>C</strong> preprocessor should handle string literal concatenation (phase 6). However, I can not find anything regarding how this is handled in C++ (does C++ use the <strong>C</strong> preprocessor?).</p>\n<p>The reason I ask is that I have the following:</p>\n<pre><code>const char * Foo::encoding = \"\\0\" \"1234567890\\0abcdefg\";\n</code></pre>\n<p>where <code>encoding</code> is a static member of class <code>Foo</code>. Without the availability of concatenation I wouldnt be able to write that sequence of characters like that.</p>\n<pre><code>const char * Foo::encoding = \"\\01234567890\\0abcdefg\";\n</code></pre>\n<p>Is something entirely different due to the way <code>\\012</code> is interpreted.</p>\n<p>I dont have access to multiple platforms and I'm curious how confident I should be that the above is always handled correctly - i.e. I will always get <code>{ 0, '1', '2', '3', ... }</code></p>\n", "AcceptedAnswerId": "2837499", "Title": "C++ Preprocessor string literal concatenation", "CreationDate": "2010-05-14T20:39:47.603", "Id": "2837469", "CommentCount": "5", "LastEditDate": "2017-05-23T12:07:59.730", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-02-24T17:32:12.520", "Score": "4", "OwnerUserId": "128138", "Tags": "<c++><concatenation><c-preprocessor>", "AnswerCount": "3"}, "2837499": {"Id": "2837499", "PostTypeId": "2", "Body": "<p>The language (C as well as C++) has no \"preprocessor\". \"Preprocessor\", as a separate functional unit, is an implementation detail. The way the source file(s) is handled if defined by so called <em>phases of translation</em>. One of the phases in C, as well as in C++ involves concatenating string literals.</p>\n<p>In C++ language standard it is described in 2.1. For C++ (C++03) it is phase 6</p>\n<blockquote>\n<p id=\"so_2837469_2837499_0\">6 Adjacent ordinary string literal\n  tokens are concatenated. Adjacent wide\n  string literal tokens are\n  concatenated.</p>\n</blockquote>\n", "LastEditorUserId": "140719", "LastActivityDate": "2010-05-17T21:07:11.033", "Score": "9", "CreationDate": "2010-05-14T20:45:07.747", "ParentId": "2837469", "CommentCount": "5", "OwnerUserId": "187690", "LastEditDate": "2010-05-17T21:07:11.033"}});