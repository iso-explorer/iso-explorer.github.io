post_cb({"28953540": {"CommentCount": "0", "ViewCount": "275", "PostTypeId": "1", "LastEditorUserId": "241631", "CreationDate": "2015-03-09T23:21:34.150", "LastActivityDate": "2015-03-09T23:54:57.973", "Title": "What is the defined behavior of std::string::erase() with a pos of string::npos?", "LastEditDate": "2015-03-09T23:54:57.973", "Id": "28953540", "Score": "1", "Body": "<p>What does the C++11 standard specify for the behavior of the <code>string&amp; erase (size_t pos = 0, size_t len = npos);</code> member function when the <code>pos</code> argument is passed as <code>string::npos</code>?  I would think it should erase nothing, but perhaps it throws an <code>out_of_range</code> exception instead?  What is the defined behavior for the standard?</p>\n", "Tags": "<c++><c++11><stdstring><outofrangeexception>", "OwnerUserId": "115751", "AnswerCount": "2"}, "28953567": {"ParentId": "28953540", "CommentCount": "0", "Body": "<p>It throws <code>std::out_of_range</code>. See <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/erase\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/string/basic_string/erase</a>.</p>\n<p>The general principle is that values of<code>pos</code> between 0 and <code>size()</code> (i.e. one past the end) are fine, but anything beyond that indicates caller error.</p>\n", "OwnerUserId": "212870", "PostTypeId": "2", "Id": "28953567", "Score": "1", "CreationDate": "2015-03-09T23:24:24.437", "LastActivityDate": "2015-03-09T23:24:24.437"}, "28953566": {"ParentId": "28953540", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It throws <code>std::out_of_range</code>, as specifically stated in the standard:</p>\n<blockquote>\n<p id=\"so_28953540_28953566_0\"><strong>21.4.6.5 basic_string::erase</strong> [<strong>string::erase</strong>]</p>\n<p id=\"so_28953540_28953566_1\"><strong>basic_string&amp; erase(size_type pos = 0, size_type n = npos);</strong></p>\n<p id=\"so_28953540_28953566_2\"><em>Requires</em>: <code>pos &lt;= size()</code></p>\n<p id=\"so_28953540_28953566_3\"><em>Throws</em>: <code>out_of_range</code> if <code>pos &gt; size()</code>.</p>\n<p id=\"so_28953540_28953566_4\"><em>Effects</em>: Determines the effective length <code>xlen</code> of the string to be removed as the<br>\n  smaller of <code>n</code> and <code>size() - pos</code>. The function then replaces the string\n  controlled by <code>*this</code> with a string of length <code>size() - xlen</code> whose first\n  <code>pos</code> elements are a copy of the initial elements of the original string\n  controlled by <code>*this</code>, and whose remaining elements are a copy of the\n  elements of the original string controlled by <code>*this</code> beginning at\n  position <code>pos + xlen</code>. </br></p>\n<p id=\"so_28953540_28953566_5\"><em>Returns</em>: <code>*this</code>.</p>\n</blockquote>\n", "OwnerUserId": "3093378", "LastEditorUserId": "3093378", "LastEditDate": "2015-03-09T23:38:16.460", "Id": "28953566", "Score": "3", "CreationDate": "2015-03-09T23:24:22.813", "LastActivityDate": "2015-03-09T23:38:16.460"}, "bq_ids": {"n4140": {"so_28953540_28953566_4": {"section_id": 1729, "quality": 0.8809523809523809, "length": 37}, "so_28953540_28953566_1": {"section_id": 1569, "quality": 0.8, "length": 4}}, "n3337": {"so_28953540_28953566_4": {"section_id": 1723, "quality": 0.8809523809523809, "length": 37}, "so_28953540_28953566_1": {"section_id": 1565, "quality": 0.8, "length": 4}}, "n4659": {"so_28953540_28953566_4": {"section_id": 1892, "quality": 0.8809523809523809, "length": 37}, "so_28953540_28953566_1": {"section_id": 1790, "quality": 0.8, "length": 4}}}});