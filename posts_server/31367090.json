post_cb({"31367209": {"ParentId": "31367090", "Score": "3", "CreationDate": "2015-07-12T11:19:12.990", "Id": "31367209", "OwnerUserId": "596781", "LastActivityDate": "2015-07-12T11:19:12.990", "Body": "<p>Yes.</p>\n<p>From [stmt.return]/3:</p>\n<blockquote>\n<p id=\"so_31367090_31367209_0\">The copy-initialization of the returned entity is sequenced before the destruction of temporaries at the end\n  of the full-expression established by the operand of the return statement, which, in turn, is sequenced before\n  the destruction of local variables (6.6) of the block enclosing the return statement.</p>\n</blockquote>\n", "PostTypeId": "2", "CommentCount": "0"}, "31367090": {"Tags": "<c++><semantics>", "ViewCount": "42", "AnswerCount": "1", "CreationDate": "2015-07-12T11:07:13.600", "Title": "In the absence of copy elision, is the copy/move constructor guaranteed to be called before the destructor?", "CommentCount": "0", "AcceptedAnswerId": "31367209", "Score": "0", "OwnerUserId": "2718864", "Id": "31367090", "LastActivityDate": "2015-07-12T11:19:12.990", "Body": "<p>Pretty much what the title says. Consider this example:</p>\n<pre><code>MyClass func()\n{\n    MyClass myInstance;\n    return myInstance;\n}\n\nint main()\n{\n    auto myInstance = func();\n}\n</code></pre>\n<p>In the absence of copy elision, is the copy or move constructor of <code>MyClass</code> guaranteed to be called before the destructor as the call to <code>func()</code> returns <code>myInstance</code>? I imagine a class like <code>std::shared_ptr</code> would make use of such a property when returned by value.</p>\n<p>Also, are there any pitfalls to relying on this behaviour?</p>\n", "PostTypeId": "1"}, "bq_ids": {"n4659": {"so_31367090_31367209_0": {"length": 21, "section_id": 4800, "quality": 0.875}}}});