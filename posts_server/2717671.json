post_cb({"2717671": {"ViewCount": "12958", "Body": "<p>For the C++ code fragment below:</p>\n<pre><code>class Foo {\n    int a[]; // no error\n};\n\nint a[];     // error: storage size of 'a' isn't known\n\nvoid bar() {\n    int a[]; // error: storage size of 'a' isn't known\n}\n</code></pre>\n<p>why isn't the member variable causing an error too? and what is the meaning of this member variable?</p>\n<p>I'm using gcc version 3.4.5 (mingw-vista special) through CodeBlocks 8.02.</p>\n<p>On Visual Studio Express 2008 - Microsoft(R) C/C++ Optimizing Compiler 15.00.30729.01 for 80x86, I got the following messages:</p>\n<pre><code>class Foo {\n    int a[]; // warning C4200: nonstandard extension used : zero-sized array in struct/union - Cannot generate copy-ctor or copy-assignment operator when UDT contains a zero-sized array\n};\n\nint a[];\n\nvoid bar() {\n    int a[]; // error C2133: 'a' : unknown size\n}\n</code></pre>\n<p>Now, this needs some explaination too.</p>\n", "AcceptedAnswerId": "2717762", "Title": "static arrays defined with unspecified size, empty brackets?", "CreationDate": "2010-04-26T23:28:50.423", "Id": "2717671", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-02-27T08:34:54.093", "LastEditorUserId": "321731", "LastActivityDate": "2014-02-27T08:34:54.093", "Score": "7", "OwnerUserId": "209874", "Tags": "<c++><class><compiler-construction><static-array>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_2717671_2717726_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3228}}, "n3337": {"so_2717671_2717726_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3101}}, "n4659": {"so_2717671_2717726_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3985}}}, "2717762": {"Id": "2717762", "PostTypeId": "2", "Body": "<p>C99 supports something called a 'flexible' array member that is allowed to be the last member of a struct.  When you dynamically allocate such a struct you can increase the amount requested from <code>malloc()</code> to provide for memory for the array.</p>\n<p>Some compilers add this as an extension to C90 and/or C++.</p>\n<p>So you can have code like the following:</p>\n<pre><code>struct foo_t {\n    int x;\n    char buf[];\n};\n\n\nvoid use_foo(size_t bufSize)\n{\n    struct foo_t* p = malloc( sizeof( struct foo_t) + bufSize);\n\n    int i;\n\n    for (i = 0; i &lt; bufSize; ++i) {\n        p-&gt;buf[i] = i;\n    }\n}\n</code></pre>\n<p>You can't define a struct with a flexible array member directly (as a local or a global/static variable) as the compiler won't know how much memory to allocate for it.</p>\n<p>I'm honestly not sure how you'd easily use such a thing with C++'s <code>new</code> operator - I think you'd have to allocate the memory for the object using <code>malloc()</code> and use placement <code>new</code>.  Maybe some class/struct specific overload of <code>operator new</code> could be used...</p>\n", "LastActivityDate": "2010-04-26T23:46:30.623", "CommentCount": "0", "CreationDate": "2010-04-26T23:46:30.623", "ParentId": "2717671", "Score": "6", "OwnerUserId": "12711"}, "2717851": {"Id": "2717851", "PostTypeId": "2", "Body": "<p>C++ language allows omitting array size only in <em>non-defining declarations</em> </p>\n<pre><code>extern int a[]; // non-defining declaration - OK in C++\n\nint a[]; // definition - ERROR in C++\n\nint a[5]; // definition - OK, size specified explicitly\nint a[] = { 1, 2, 3 }; // definition - OK, size specified implicitly\n</code></pre>\n<p>Non-static class member decarations are always required to specify the array size</p>\n<pre><code>struct S {\n  int a[]; // ERROR in C++\n};\n</code></pre>\n<p>while static class member <em>decarations</em> can omit the size</p>\n<pre><code>struct S {\n  static int a[]; // OK in C++\n};\n</code></pre>\n<p>(the <em>definition</em> of the same member will, of course, have to specify the size).</p>\n<p>Any deviations from this behavior can only be explaind by extended non-standard behavior of your compiler. Maybe you should specify some additional compiler settings to make it behave in more pedantic fashion.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2010-04-27T00:12:41.617", "Score": "11", "CreationDate": "2010-04-27T00:04:34.257", "ParentId": "2717671", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2010-04-27T00:12:41.617"}, "2717726": {"Id": "2717726", "PostTypeId": "2", "Body": "<pre><code>class Foo {\n    int a[]; // OK in C, invalid in C++. Does not work with inheritance.\n}; // Idea is that structure is \"extended\" indefinitely by an array.\n   // May work on your compiler as an extra feature.\n\nint a[];     // error in C and C++: storage size of 'a' isn't known\n\nvoid bar() {\n    int a[]; // error in C and C++: storage size of 'a' isn't known\n}\n\nextern int a[]; // OK: storage size may be declared later.\n\nint a[5]; // declaration of size before use.\n</code></pre>\n<p>An array type with unspecified size is incomplete. 8.3.4/1:</p>\n<blockquote>\n<p id=\"so_2717671_2717726_0\">If the constant expression is omitted, the type of the identifier of D is \u201cderived-declarator-type-list array of unknown bound of T\u201d, an incomplete object type.</p>\n</blockquote>\n<p>It must be completed in order to participate in a definition, ie the definition of <code>a</code> must contain a size specification or initialization with an array of specified size.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2010-04-27T02:57:54.957", "Score": "2", "CreationDate": "2010-04-26T23:40:22.883", "ParentId": "2717671", "CommentCount": "4", "OwnerUserId": "153285", "LastEditDate": "2010-04-27T02:57:54.957"}, "2717833": {"Id": "2717833", "PostTypeId": "2", "Body": "<p>We've used this to denote a variable length record of some sort.  Something like a header file that has information on how many structures to follow, followed by the data itself.  It's a variable length array and I've found it is not supported well between compilers.  Some want array[]; and some want array[0]; (old style).</p>\n", "LastActivityDate": "2010-04-27T00:01:50.097", "CommentCount": "0", "CreationDate": "2010-04-27T00:01:50.097", "ParentId": "2717671", "Score": "0", "OwnerUserId": "527574"}});