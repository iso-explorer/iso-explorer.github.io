post_cb({"40537750": {"CommentCount": "2", "ViewCount": "114", "PostTypeId": "1", "ClosedDate": "2016-11-12T15:47:20.920", "LastEditorUserId": "3853934", "CreationDate": "2016-11-10T22:00:10.310", "LastActivityDate": "2016-11-12T15:53:22.530", "Title": "Why does this kind of recursion work in C++?", "LastEditDate": "2016-11-12T15:53:22.530", "Id": "40537750", "Score": "2", "Body": "<p>I made a recursive C++ program that looks like this:</p>\n<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nbool recursive(int num)\n{\n    if (num == 6)\n    {\n        return false;\n    }\n\n    else if (num &gt; 6)\n    {\n        return true;\n    }\n\n    else\n    {\n        if (recursive(num + 1))\n        {\n            return true;\n        }\n\n        else\n        {\n            return false;\n        }\n    }\n}\n\n\nint main()\n{\n    if (recursive(0))\n    {\n        cout &lt;&lt; \"Not found!\" &lt;&lt; endl;\n    }\n\n    else\n    {\n        cout &lt;&lt; \"Found...\" &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>It works and I assumed that this was (roughly) the best way to do it.</p>\n<p>My friend made a simpler recursive program that looks like this:</p>\n<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nbool recursive(int num)\n{\n    if (num == 6)\n    {\n        return false;\n    }\n\n    else if (num &gt; 6)\n    {\n        return true;\n    }\n\n    else\n    {\n        recursive(num + 1);\n    }\n}\n\n\nint main()\n{\n    if (recursive(0))\n    {\n        cout &lt;&lt; \"Not found!\" &lt;&lt; endl;\n    }\n\n    else\n    {\n        cout &lt;&lt; \"Found...\" &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>His works just like mine does, but I don't understand why it works. To me, it looks like nothing gets returned in his else block, so I don't understand how the boolean value gets returned to the original function call.</p>\n<p>Out of curiosity, I made a similar program in JavaScript:</p>\n<pre><code>function recursive(index)\n{\n    if (index == 6)\n    {\n        return true;\n    }\n\n    else if (index &gt; 6)\n    {\n        return false;\n    }\n\n    else\n    {\n        recursive(index + 1);\n    }\n}\n\nif (recursive(0))\n{\n    console.log(\"found\");\n}\n\nelse\n{\n    console.log(\"not found\");\n}\n</code></pre>\n<p>But the JavaScript program doesn't work, which makes me think that this is specific to C++.</p>\n<p>Why does my friend's program work? Is it completely valid, or is it undefined behavior?</p>\n", "Tags": "<c++><recursion><return><undefined-behavior>", "OwnerUserId": "1741346", "AnswerCount": "4"}, "40538005": {"ParentId": "40537750", "CommentCount": "0", "Body": "<p>Sure, it works! Well, not really.</p>\n<p>Every compiler on Earth (maybe not) will warn you:</p>\n<blockquote>\n<p id=\"so_40537750_40538005_0\">clang: <code>control may reach end of non-void function</code></p>\n<p id=\"so_40537750_40538005_1\">gcc: <code>control reaches end of non-void function</code></p>\n<p id=\"so_40537750_40538005_2\">MVSC: <code>not all control paths return a value</code></p>\n</blockquote>\n<p>It <em>does</em> work because your friend was lucky enough not to have this program explode, implode or create a black hole in your bedroom. Undefined Behavior is what it is: You can't tell how your program will behave.</p>\n<p>This is what the standard has to say about it:</p>\n<blockquote>\n<p id=\"so_40537750_40538005_3\">Flowing off the end of a constructor, a destructor, or a function with a cv void return type is equivalent to a return with no operand. Otherwise, <strong>flowing off the end of a function</strong> other than main (3.6.1)\n  <strong>results in undefined behavior</strong>.</p>\n</blockquote>\n", "OwnerUserId": "6261331", "PostTypeId": "2", "Id": "40538005", "Score": "1", "CreationDate": "2016-11-10T22:17:44.607", "LastActivityDate": "2016-11-10T22:17:44.607"}, "40537811": {"ParentId": "40537750", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Why does it work? Answer: it doesn't.</p>\n<pre><code>else\n{\n    recursive(num + 1);\n}\n</code></pre>\n<p>Your friend's program is missing a <code>return</code> statement.</p>\n<pre><code>else\n{\n    return recursive(num + 1);\n}\n</code></pre>\n<p>Not returning a value from a non-<code>void</code> function leads to undefined behavior.</p>\n<p>In this case, it so happens that on the computer you tested on the return value from the recursive call was automatically \"returned\" to the caller -- perhaps because it happened to be in the right register. This is pure happenstance. You can't rely on it. On a different machine, or different compiler, or even a different invocation, the program could just as well return something else, or crash, or do anything else you can imagine.</p>\n", "OwnerUserId": "68587", "LastEditorUserId": "68587", "LastEditDate": "2016-11-10T22:09:48.600", "Id": "40537811", "Score": "6", "CreationDate": "2016-11-10T22:03:40.437", "LastActivityDate": "2016-11-10T22:09:48.600"}, "40537806": {"ParentId": "40537750", "CommentCount": "0", "Body": "<p>This is undefined behavior. Since the function is declared to return boolean, it will always return something, but not necessarily the right value.</p>\n<p>If you compile with <code>-Wall</code> flag, compilers like GCC will give you a warning for this kind of code.</p>\n", "OwnerUserId": "2308211", "PostTypeId": "2", "Id": "40537806", "Score": "2", "CreationDate": "2016-11-10T22:03:24.603", "LastActivityDate": "2016-11-10T22:03:24.603"}, "40537936": {"ParentId": "40537750", "CommentCount": "0", "Body": "<p>Ending a function without a return statement is undefined behavior in C++. The best I can do is <em>speculate</em> as to what's happening, and my best guess is that the call to <code>recursive(index + 1)</code>, being the last thing on the stack before the function returns, is getting picked up as the return value. So in a (non-standard, non-portable, very poorly advised for general use) sense, the code has implicitly inserted the return statement.</p>\n", "OwnerUserId": "5241642", "PostTypeId": "2", "Id": "40537936", "Score": "2", "CreationDate": "2016-11-10T22:12:44.450", "LastActivityDate": "2016-11-10T22:12:44.450"}, "bq_ids": {"n4140": {"so_40537750_40538005_1": {"section_id": 3360, "quality": 0.6666666666666666, "length": 4}, "so_40537750_40538005_2": {"section_id": 5316, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_40537750_40538005_1": {"section_id": 3230, "quality": 0.6666666666666666, "length": 4}, "so_40537750_40538005_2": {"section_id": 5113, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_40537750_40538005_1": {"section_id": 4126, "quality": 0.6666666666666666, "length": 4}, "so_40537750_40538005_2": {"section_id": 6740, "quality": 0.6666666666666666, "length": 4}, "so_40537750_40538005_3": {"section_id": 4799, "quality": 0.9166666666666666, "length": 22}}}});