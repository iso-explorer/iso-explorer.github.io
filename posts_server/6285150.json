post_cb({"bq_ids": {"n4140": {"so_6285150_6285205_0": {"length": 4, "quality": 0.8, "section_id": 1680}}, "n3337": {"so_6285150_6285205_0": {"length": 4, "quality": 0.8, "section_id": 1677}}, "n4659": {"so_6285150_6285205_0": {"length": 4, "quality": 0.8, "section_id": 1840}}}, "6285150": {"ViewCount": "850", "Body": "<p>The following two lines do the same thing in Visual Studio 2005:</p>\n<pre><code>myString.insert(myString.size(),1,myNewChar);\n</code></pre>\n<p>and</p>\n<pre><code>myString.append(1,myNewChar);\n</code></pre>\n<p>Is the first one supposed to throw an out_of_range exception or is this the correct behavior?</p>\n", "AcceptedAnswerId": "6285205", "Title": "string::insert at end of string", "CreationDate": "2011-06-08T20:56:20.147", "Id": "6285150", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-06-08T21:05:06.733", "Score": "3", "OwnerUserId": "637801", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}, "6285205": {"Id": "6285205", "PostTypeId": "2", "Body": "<p>This is correct behavior -- the index you pass is the index of the position <em>behind</em> the point of insertion of the new characters, not before. In fact, the C++03 standard specifically says (\u00a721.3.5.4/2):</p>\n<blockquote>\n<p id=\"so_6285150_6285205_0\">Requires <code>pos1 &lt;= size()</code> and <code>pos2 &lt;= str.size()</code></p>\n</blockquote>\n<p>(where <code>pos1</code> is the index you're passing and <code>pos2 == npos</code> in the overload you call) -- note that it's <code>&lt;=</code> rather than <code>&lt;</code>.</p>\n", "LastEditorUserId": "636019", "LastActivityDate": "2011-06-08T21:05:06.733", "Score": "5", "CreationDate": "2011-06-08T21:00:03.537", "ParentId": "6285150", "CommentCount": "1", "OwnerUserId": "636019", "LastEditDate": "2011-06-08T21:05:06.733"}});