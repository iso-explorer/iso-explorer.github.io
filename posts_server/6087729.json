post_cb({"6087785": {"ParentId": "6087729", "CommentCount": "4", "Body": "<p>See the spec, in the compatibility appendix C.1.6:</p>\n<blockquote>\n<p id=\"so_6087729_6087785_0\">7.1.6 [see also 3.5]</p>\n<p id=\"so_6087729_6087785_1\"><strong>Change:</strong> const objects must be initialized in C++ but can be left uninitialized in C</p>\n<p id=\"so_6087729_6087785_2\"><strong>Rationale:</strong> A const object cannot be assigned to so it must be initialized to hold a useful value.</p>\n<p id=\"so_6087729_6087785_3\"><strong>Effect on original feature:</strong> Deletion of semantically well-defined feature.</p>\n<p id=\"so_6087729_6087785_4\"><strong>Difficulty of converting:</strong> Semantic transformation.</p>\n<p id=\"so_6087729_6087785_5\"><strong>How widely used:</strong> Seldom.</p>\n</blockquote>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "6087785", "Score": "14", "CreationDate": "2011-05-22T11:59:19.657", "LastActivityDate": "2011-05-22T11:59:19.657"}, "6089479": {"ParentId": "6087729", "CommentCount": "3", "Body": "<p>Note that there is a legitimate use of an uninitialized, const-qualified object of automatic storage duration: its address can be taken and used as a unique key for labeling recursion levels in a recursive function. This is somewhat obscure, but worth noting. C makes this use efficient, while C++ requires you waste time and code size on initializing it. (In theory the compiler could perhaps determine that the value is never used and optimize out the initialization, but since you're passing around a pointer, that would be rather difficult to prove.)</p>\n", "OwnerUserId": "379897", "PostTypeId": "2", "Id": "6089479", "Score": "11", "CreationDate": "2011-05-22T17:12:55.677", "LastActivityDate": "2011-05-22T17:12:55.677"}, "6087768": {"ParentId": "6087729", "CommentCount": "1", "Body": "<p>The <code>const</code> keyword was introduced to C in C89 in 1989, but had been with C++ since its creation in 1983.  So it was \"backported\" from C++ to C.</p>\n<p>Initialization semantics are generally different in C and C++.  Although most of the time they \"just do the thing you expect\", there are cases where the differences become quite important.  C++ really isn't a superset of C after all.</p>\n<p>For example, in C++ you can't:</p>\n<pre><code>goto x;\nint i = 3;\nx:\nputs(\"Hello, world\");\n</code></pre>\n<p>But that is perfectly legal in C.</p>\n", "OwnerUserId": "82294", "PostTypeId": "2", "Id": "6087768", "Score": "3", "CreationDate": "2011-05-22T11:57:06.943", "LastActivityDate": "2011-05-22T11:57:06.943"}, "6088828": {"ParentId": "6087729", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The ISO standard says (in 8.5 [dcl.init] <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/decl.html\" rel=\"nofollow\">paragraph 9</a>):</p>\n<blockquote>\n<p id=\"so_6087729_6088828_0\">If no initializer is specified for an object, and the object is of\n  (possibly cv-qualified) non-POD class type (or array thereof), the\n  object shall be default-initialized; if the object is of\n  const-qualified type, the underlying class type shall have a\n  user-declared default constructor.</p>\n</blockquote>\n<p>if you try the same example after modifying to this:</p>\n<pre><code>int main()\n{\n   /*Unless explicitly declared extern, a const object does not have\n external linkage and must be initialized*/\n   extern const int x; \n   return 0;\n}\n</code></pre>\n<p>it will get compiled. So this self explains the need of enforcing this error to c++, declaring const vars without initializing and extern linkage is of no use, so coder must have added it by mistake.</p>\n", "OwnerUserId": "660314", "LastEditorUserId": "584518", "LastEditDate": "2015-06-23T13:14:38.633", "Id": "6088828", "Score": "3", "CreationDate": "2011-05-22T15:16:20.963", "LastActivityDate": "2015-06-23T13:14:38.633"}, "bq_ids": {"n4140": {"so_6087729_6088828_0": {"section_id": 593, "quality": 0.5217391304347826, "length": 12}}, "n3337": {"so_6087729_6088828_0": {"section_id": 3156, "quality": 0.5217391304347826, "length": 12}}, "n4659": {"so_6087729_6088828_0": {"section_id": 616, "quality": 0.5217391304347826, "length": 12}}}, "6087729": {"CommentCount": "0", "AcceptedAnswerId": "6087785", "CreationDate": "2011-05-22T11:49:14.703", "LastActivityDate": "2015-06-23T13:14:38.633", "PostTypeId": "1", "ViewCount": "4549", "FavoriteCount": "2", "Title": "const in C vs const in C++", "Id": "6087729", "Score": "12", "Body": "<p>The given code compiles in C but fails in C++.</p>\n<pre><code>int main()\n{\n   const int x; /* uninitialized const compiles in C but fails in C++*/\n}\n</code></pre>\n<p>What is the rationale and the reason behind the change from C to C++? </p>\n", "Tags": "<c++><c><const>", "OwnerUserId": "764743", "AnswerCount": "4"}});