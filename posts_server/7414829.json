post_cb({"7415898": {"Id": "7415898", "PostTypeId": "2", "Body": "<p>It <em>could</em> do anything; that's what \"implementation defined\" means.</p>\n<p>The purpose of the attribute specification is so that compiler makers will stop cluttering the language up with special syntax and keywords. To give them a single grammar for specifying these things. It is a way to associate a compiler-defined string with a particular object or definition.</p>\n<p>Right now, pretty much nobody supports the new attribute syntax. So while it <em>could</em> do anything, it doesn't do <em>anything</em> at present.</p>\n", "LastActivityDate": "2011-09-14T11:55:09.677", "CommentCount": "6", "CreationDate": "2011-09-14T11:55:09.677", "ParentId": "7414829", "Score": "3", "OwnerUserId": "734069"}, "7416898": {"Id": "7416898", "PostTypeId": "2", "Body": "<blockquote>\n<pre><code>[[ vendor::attrib ]]\n</code></pre>\n<p id=\"so_7414829_7416898_0\">may be complained about by a standard conforming compiler?</p>\n</blockquote>\n<p>Yes, especially this one <em>should</em> be complained about a standard conforming compiler that doesn't support the conditionally supported behavior (a diagnostic message is required).</p>\n<p>However, I'm not sure about the others. The standard contains also this:</p>\n<blockquote>\n<p id=\"so_7414829_7416898_1\">...  If an attribute-speci\ufb01er-seq  that appertains to some entity or\n  statement contains an attribute that is not allowed to apply to that\n  entity or statement, the program is ill-formed. ...</p>\n</blockquote>\n<p>I believe it could be read permissively, that only those attributes that surely are in violation of the rule make the program ill-formed (ie. the ones that the compiler doesn't know don't), however, I'm not quite sure. Anyway, using implementation-defined behavior does not make the program ill-formed.</p>\n<p>Currently, <a href=\"http://ideone.com/fQdme\" rel=\"nofollow\">gcc accepts unknown attributes with a warning</a>, so I believe it will work like that with the new syntax, too.</p>\n", "LastActivityDate": "2011-09-14T13:14:56.220", "CommentCount": "1", "CreationDate": "2011-09-14T13:14:56.220", "ParentId": "7414829", "Score": "1", "OwnerUserId": "51831"}, "7414829": {"ViewCount": "395", "Body": "<p>In N3291 <em>\"7.6.1.(3/5) Attribute Syntax and semantics [decl.attr.grammar]\"</em> concerning how <strong>attributes</strong> are written in source code I read</p>\n<blockquote>\n<p id=\"so_7414829_7414829_0\">The use of an <em>attribute-scoped-token</em> is conditionally-supported, with\n   implementation-defined behavior.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_7414829_7414829_1\">For an <em>attribute-token</em> not specified in this International Standard, the behavior is implementation-defined.</p>\n</blockquote>\n<p>Does this mean, that attribute specifications like</p>\n<pre><code>[[ dllexport ]]\n[[ hiding ]]\n[[ unused ]]\n[[ vendor::attrib ]]\n</code></pre>\n<p>may be complained about by a <em>standard conforming compiler</em>? So, it <strong>could report an error</strong> and stop compilation?</p>\n<p>I would have hoped that a compiler <strong>should ignore</strong> attributes that it does not know how to handle them. Ok, that might be dangerous, because typos in attributes may be overlooked, for example <code>[[ noretrun ]]</code> or <code>[[ carrys_dependencie ]]</code> :-)</p>\n<p>But especially namespaces would help here, right? When I compile <code>[[ gcc::mips ]]</code> on an <em>Microsoft compiler</em> that one should be able to ignore that and not reject it, right?</p>\n", "AcceptedAnswerId": "7415898", "Title": "May a compiler report errors on unknown attributes? Even with scope?", "CreationDate": "2011-09-14T10:30:43.727", "Id": "7414829", "CommentCount": "1", "LastEditDate": "2011-09-14T15:24:36.707", "PostTypeId": "1", "LastEditorUserId": "46642", "LastActivityDate": "2011-09-14T15:24:36.707", "Score": "4", "OwnerUserId": "472245", "Tags": "<c++><attributes><c++11>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_7414829_7414829_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5530}, "so_7414829_7414829_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5528}, "so_7414829_7416898_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5529}}, "n3337": {"so_7414829_7414829_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5316}, "so_7414829_7414829_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5314}, "so_7414829_7416898_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5315}}, "n4659": {"so_7414829_7414829_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6966}, "so_7414829_7416898_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 6965}}}});