post_cb({"32977187": {"ParentId": "32976919", "LastEditDate": "2017-05-23T11:45:06.937", "CommentCount": "7", "CreationDate": "2015-10-06T18:36:09.490", "OwnerUserId": "420683", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "32977187", "Score": "5", "Body": "<p>The specification of the <code>basic_string</code> class template in the (former) C++11 International Standard [basic.string]p5 contains the following two constructors (among others):</p>\n<blockquote id=\"so_32976919_32977187_0\">\n<pre><code>basic_string(const basic_string&amp; str);\n// ...\nbasic_string(const basic_string&amp; str, size_type pos, size_type n = npos,\n             const Allocator&amp; a = Allocator());\n</code></pre>\n</blockquote>\n<p>The first one clearly is a copy constructor, the second one is no copy constructor. Note that there is <strong>no</strong> constructor in the spec where <code>pos</code> has a default argument.</p>\n<p>The situation is essentially the same in C++03, C++14 and C++1z. In C++98, those two constructors have indeed been a single one:</p>\n<pre><code> basic_string(const basic_string&amp; str, size_type pos = 0, size_type n = npos,\n //                                                 ~~~~\n              const Allocator&amp; a = Allocator());\n</code></pre>\n<p>But this has been changed to the current version with two separate constructors due to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-issues.html#42\" rel=\"nofollow noreferrer\">LWG 42</a>.</p>\n<hr>\n<p><strike>\nAs far as I know, an implementation of the C++ Standard Library is allowed to merge those two constructors into a single one, which then becomes a <em>copy constructor</em>:</strike></p>\n<pre><code> basic_string(const basic_string&amp; str, size_type pos = 0, size_type n = npos,\n //                                                 ~~~~\n              const Allocator&amp; a = Allocator());\n</code></pre>\n<p></p></hr>\n<p>This has different behaviour. As explained in LWG 42 (see <a href=\"https://stackoverflow.com/users/1708801/shafik-yaghmour\">Shafik Yaghmour's</a> <a href=\"https://stackoverflow.com/a/32977431/\">answer</a>), the actual copy ctor of <code>basic_string</code> acquires a copy of <code>str</code>'s allocator, whereas the \"substring\" constructor by default uses a value-initialized new object.</p>\n<p><sub>Thanks to <a href=\"https://stackoverflow.com/users/8922/sebastian-redl\">Sebastian Redl</a> for pointing that out.</sub></p>\n", "LastActivityDate": "2015-10-06T21:41:15.120"}, "32976919": {"CommentCount": "18", "AcceptedAnswerId": "32977187", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-10-06T18:20:13.330", "LastActivityDate": "2015-10-07T03:28:30.113", "LastEditDate": "2017-05-23T11:59:34.240", "ViewCount": "160", "FavoriteCount": "1", "Title": "Does basic_string class really have copy constructor that takes more than one parameter or is it just constructor?", "Id": "32976919", "Score": "1", "Body": "<p>I was reading <a href=\"https://stackoverflow.com/questions/3648797/why-would-a-copy-constructor-have-more-than-one-parameter\">Why would a copy constructor have more than one parameter?</a>.</p>\n<p>The accepted answer says that:</p>\n<p>The old <code>std::basic_string</code> does have one too:</p>\n<pre><code>basic_string(const basic_string&amp; s, \n         size_type pos = 0, size_type n = npos)\n</code></pre>\n<p>But <a href=\"http://www.cplusplus.com/reference/string/basic_string/basic_string/\" rel=\"nofollow noreferrer\">http://www.cplusplus.com/reference/string/basic_string/basic_string/</a> says that:</p>\n<pre><code>basic_string (const basic_string&amp; str, size_type pos, size_type len = npos,\n              const allocator_type&amp; alloc = allocator_type());\n</code></pre>\n<p>The above isn't a copy constructor but substring constructor that copies the portion of <code>str</code> that begins at the character position <code>pos</code> and spans <code>len</code> characters.</p>\n<p>C++ standard section says that:</p>\n<blockquote>\n<p id=\"so_32976919_32976919_0\">A non-template constructor for class X is a copy constructor if its\n  first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile\n  X&amp;, and either there are no other parameters or else all other\n  parameters have default arguments</p>\n</blockquote>\n<p>So, Is the accepted answer from that link is incorrect? Is this really basic_string class constructor for sub-string? I've checked prototype  for this in C++98, C++11 &amp; C++14 specification on the link &amp; all shows the same.  </p>\n", "Tags": "<c++><string><parameters><copy-constructor><stdstring>", "OwnerUserId": "3777958", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32976919_32977187_0": {"section_id": 1569, "quality": 0.9230769230769231, "length": 12}, "so_32976919_32976919_0": {"section_id": 451, "quality": 1.0, "length": 24}}, "n3337": {"so_32976919_32977187_0": {"section_id": 1565, "quality": 0.8461538461538461, "length": 11}, "so_32976919_32976919_0": {"section_id": 442, "quality": 1.0, "length": 24}}, "n4659": {"so_32976919_32977187_0": {"section_id": 1722, "quality": 0.8461538461538461, "length": 11}, "so_32976919_32976919_0": {"section_id": 474, "quality": 1.0, "length": 24}}}, "32977431": {"ParentId": "32976919", "LastEditDate": "2017-05-23T11:45:06.937", "CommentCount": "0", "CreationDate": "2015-10-06T18:48:31.597", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "32977431", "Score": "3", "Body": "<p>So the <em>\"old\"</em>, going back to 1998 specification is very similar to one from the <a href=\"https://stackoverflow.com/a/3648916/1708801\">original SO answer the OP points to</a> and has changed at least once to what we have today.</p>\n<p>The 1998 specification can be found referenced in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-issues.html#42\" rel=\"nofollow noreferrer\">LWG issue 42: String ctors specify wrong default allocator</a>:</p>\n<blockquote>\n<p id=\"so_32976919_32977431_0\">The basic_string&lt;&gt; copy constructor:</p>\n<pre><code>basic_string(const basic_string&amp; str, size_type pos = 0,\n             size_type n = npos, const Allocator&amp; a = Allocator()); \n</code></pre>\n<p id=\"so_32976919_32977431_1\">specifies an Allocator argument default value that is\n  counter-intuitive. The natural choice for a the allocator to copy from\n  is str.get_allocator(). Though this cannot be expressed in\n  default-argument notation, overloading suffices.</p>\n</blockquote>\n<p>and proposes these possible fixes:</p>\n<blockquote>\n<p id=\"so_32976919_32977431_2\">B. In 21.3 [lib.basic.string], and also in 21.3.1 [lib.string.cons],\n  replace the declaration of the copy constructor as follows:</p>\n<pre><code>basic_string(const basic_string&amp; str, size_type pos = 0,\n             size_type n = npos);\n</code></pre>\n<p id=\"so_32976919_32977431_3\">C. In 21.3 [lib.basic.string], replace the declaration of the copy\n  constructor as follows:</p>\n<pre><code>basic_string(const basic_string&amp; str);\nbasic_string(const basic_string&amp; str, size_type pos, size_type n = npos,\n             const Allocator&amp; a = Allocator());\n</code></pre>\n<p id=\"so_32976919_32977431_4\">In 21.3.1 [lib.string.cons], replace the copy constructor declaration as above. Add to paragraph 5, Effects:</p>\n<p id=\"so_32976919_32977431_5\">In the first form, the Allocator value used is copied from str.get_allocator().</p>\n</blockquote>\n<p>The first fix matches the <a href=\"https://stackoverflow.com/a/3648916/1708801\">original SO answer the OP points to</a> and the second matches what we have today.</p>\n<p>This LWG issue is from 1998 which is probably why none of the public drafts available today have any evidence of this. The earliest public draft available <code>N1804</code> is from 2005. What changes took place between 1998 and 2005 are not  clear.</p>\n", "LastActivityDate": "2015-10-07T03:28:30.113"}});