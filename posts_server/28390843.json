post_cb({"29552025": {"ParentId": "28390843", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>All the standard gives you is what you've already seen. You would need to know something about how a given standard library implements <code>random_device</code> in order to answer this question. For example, in Visual Studio 2013 Update 4, <code>random_device</code> forwards to <a href=\"https://msdn.microsoft.com/en-us/library/sxtz2fa8.aspx\" rel=\"nofollow\"><code>rand_s</code></a> which forwards to <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa387694.aspx\" rel=\"nofollow\"><code>RtlGenRandom</code></a>, which may actually be (always?) a cryptographically secure pseudorandom number generator depending on your Windows version and the hardware available.</p>\n<p>If you don't trust the platform to provide a good source of entropy, then you should use your own cryptographically secure PRNG, such as one based on AES. That said, platform vendors have strong incentives for their random numbers to actually be random, and embedding the PRNG into your app means that the PRNG can't be updated as easily in the event it is found to be insecure. Only you can decide on that tradeoff for yourself :)</p>\n", "OwnerUserId": "82320", "LastEditorUserId": "82320", "LastEditDate": "2015-04-15T22:22:48.853", "Id": "29552025", "Score": "6", "CreationDate": "2015-04-10T01:47:42.343", "LastActivityDate": "2015-04-15T22:22:48.853"}, "28390843": {"CommentCount": "9", "AcceptedAnswerId": "29575664", "PostTypeId": "1", "LastEditorUserId": "3093378", "CreationDate": "2015-02-08T05:16:18.883", "LastActivityDate": "2015-04-15T22:22:48.853", "LastEditDate": "2015-02-09T05:14:13.017", "ViewCount": "1417", "FavoriteCount": "3", "Title": "how to find the \"true\" entropy of std::random_device?", "Id": "28390843", "Score": "25", "Body": "<p>I want to check whether my implementation of <code>std::random_device</code>\nhas non-zero entropy (i.e. is non-deterministic), using <code>std::random_device::entropy()</code> function. However, according\nto <a href=\"http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy\">cppreference.com</a></p>\n<blockquote>\n<p id=\"so_28390843_28390843_0\">\"This function is not fully implemented in some standard libraries. \n  For example, gcc and clang always return zero even though  the device\n  is non-deterministic. In comparison, Visual C++ always  returns 32,\n  and boost.random returns 10.\"</p>\n</blockquote>\n<p>Is there any way of finding the real entropy? In particular, do modern\ncomputers (MacBook Pro/iMac etc) have a non-deterministic source or randomness, like e.g. using heat dissipation monitors?</p>\n", "Tags": "<c++><c++11><random>", "OwnerUserId": "3093378", "AnswerCount": "4"}, "29552054": {"ParentId": "28390843", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Entropy is just one measure of RNG quality (and true, exact entropy is impossible to measure). For a practical and reasonably-accurate measurement of your <code>std::random_device</code>'s random number quality, consider using a standard <em>randomness test suite</em> such as <a href=\"http://en.wikipedia.org/wiki/TestU01\" rel=\"nofollow\">TestU01</a>, <a href=\"http://en.wikipedia.org/wiki/Diehard_tests\" rel=\"nofollow\">diehard</a>, or its successor <a href=\"http://www.phy.duke.edu/~rgb/General/dieharder.php\" rel=\"nofollow\">dieharder</a>. These run a battery of statistical tests designed to stress your RNG, ensuring it produces statistically random data.</p>\n<p>Note that statistical randomness by itself does not certify that the RNG is suitable for cryptographic applications.</p>\n<hr>\n<p>Many modern computers have easily-accessible sources of hardware randomness, namely the analog-to-digital converters found in the audio input, camera, and various sensors. These exhibit low-level thermal or electrical noise which can be exploited to produce high-quality random data. However, no OS that I know of actually uses these sensors to supply their system random-number sources (such as <code>/dev/[u]random</code>), since the bitrate of such physical random number sources tends to be very low.</p>\n<p>Instead, OS-provided random number sources tend to be seeded by hardware counters and events, such as page faults, device driver events, and other sources of unpredictability. In theory, these events might be fully predictable given the precise hardware state (since they aren't based on e.g. quantum or thermal noise), but in practice they are sufficiently unpredictable that they produce good random data.</p>\n</hr>", "OwnerUserId": "1204143", "LastEditorUserId": "1204143", "LastEditDate": "2015-04-10T02:00:05.193", "Id": "29552054", "Score": "3", "CreationDate": "2015-04-10T01:50:46.643", "LastActivityDate": "2015-04-10T02:00:05.193"}, "29552128": {"ParentId": "28390843", "CommentCount": "1", "Body": "<p>Entropy as a scientific term is misused when describing random numbers. Complexity might be a better term.  Entropy in physics is defined as the logarithm of the number of available quantum states (not useful in RNG), and entropy in information theory is defined by the Shannon entropy, but that is geared towards the other extreme - how to put as much information into a noisy bit stream, not how to minimize the information.</p>\n<p>For example, the digits of Pi look random, but the actual entropy of the digits is zero once you know that they derive from Pi. Increasing \"Entropy\" in RNG is basically a question of making the source of the numbers as obscure as possible.</p>\n", "OwnerUserId": "364818", "PostTypeId": "2", "Id": "29552128", "Score": "1", "CreationDate": "2015-04-10T02:02:29.660", "LastActivityDate": "2015-04-10T02:02:29.660"}, "29575664": {"ParentId": "28390843", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I recommend you the lecture of this article. </p>\n<p><a href=\"http://www.2uo.de/myths-about-urandom/\">Myths about /dev/urandom</a></p>\n<p>\u00a7 26.5.6 </p>\n<blockquote>\n<p id=\"so_28390843_29575664_0\">A random_device uniform random number generator produces non-deterministic random numbers. </p>\n<p id=\"so_28390843_29575664_1\">If implementation limitations prevent generating non-deterministic random numbers, the implementation may employ a random number engine.</p>\n</blockquote>\n<p>So basically it will try to use the internal system \"true\" random number generator, in linux /dev/{u}random o windows RltGenRandom. </p>\n<p>A different point is you don't trust those sources of randomness because they depend on internal noise or are close implementations.</p>\n<p>Additionally is how do you meassure the quality of entropy, as you know that is one of the biggest problem trying to find good rng generators.</p>\n<p>One estimation could be extremely good and other estimation could report not so good entropy.</p>\n<h2><a href=\"http://en.wikipedia.org/wiki/Entropy_estimation\">Entropy Estimation</a></h2>\n<blockquote>\n<p id=\"so_28390843_29575664_2\">In various science/engineering applications, such as independent\n  component analysis, image analysis, genetic analysis, speech\n  recognition, manifold learning, and time delay estimation it is useful\n  to estimate the differential entropy of a system or process, given\n  some observations.</p>\n</blockquote>\n<p>As it sais, you must rely on final observations, and those can be wrong.</p>\n<p>I you think the internal rng is not good enough, you can always try to buy hardware devices for that purpose. This <a href=\"http://en.wikipedia.org/wiki/Comparison_of_hardware_random_number_generators\">list on wikipedia</a> has a list of vendors, you can check on the internet reviews about them.</p>\n<h2>Performance</h2>\n<p>One point you must consider is the performance within your application using real random number generators. One common technique is to use as seed in a mersenne twister a number obtained using /dev/random. </p>\n<p>If the user can't access your system physically, you will need to balance reliability with availability, a system with security holes is as bad as one doesn't work, at the end you must have your important data encrypted.</p>\n<p>Edit 1: As suggestion I have moved the article at the top of my comment, is a good read. Thanks for the hint :-).</p>\n", "OwnerUserId": "1774414", "LastEditorUserId": "1774414", "LastEditDate": "2015-04-11T08:55:57.383", "Id": "29575664", "Score": "10", "CreationDate": "2015-04-11T08:12:42.397", "LastActivityDate": "2015-04-11T08:55:57.383"}, "bq_ids": {"n4140": {"so_28390843_29575664_1": {"section_id": 3583, "quality": 1.0, "length": 13}, "so_28390843_29575664_0": {"section_id": 3582, "quality": 1.0, "length": 9}}, "n3337": {"so_28390843_29575664_1": {"section_id": 3448, "quality": 1.0, "length": 13}, "so_28390843_29575664_0": {"section_id": 3447, "quality": 1.0, "length": 9}}, "n4659": {"so_28390843_29575664_1": {"section_id": 4348, "quality": 1.0, "length": 13}, "so_28390843_29575664_0": {"section_id": 4347, "quality": 0.8888888888888888, "length": 8}}}});