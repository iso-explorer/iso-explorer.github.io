post_cb({"23773620": {"ParentId": "23773504", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The \"alternate valid program\" is referring to a situation in which each ordering of the elements in the class yields a valid interpretation of the program, but the meaning <strong>changes</strong> depending on the ordering.</p>\n<p>In your case, changing the order of <code>a</code> and <code>b</code> is allowed, <em>but</em> since their relative order can't affect the meaning of the program, the behavior is defined.</p>\n<p>For this to happen, you must use a name in the class that has already been defined with some other meaning outside the class. For example:</p>\n<pre><code>typedef void *T;\n\nstruct whatever {\n    T a;\n    typedef long T;\n};\n</code></pre>\n<p>Here, the relative order of the declaration of <code>a</code> and the typedef of <code>T</code> affects the meaning of the code. As it's written right now, <code>a</code> has type <code>void *</code>, because the global <code>typedef void *T;</code> is in scope when the <code>T a;</code> is parsed.</p>\n<p>If, however, we rearranged the two so as:</p>\n<pre><code>typedef void *T;\n\nstruct whatever {\n    typedef long T;\n    T a;\n};\n</code></pre>\n<p>...the <code>T a;</code> is equivalent to <code>long a;</code>. The meaning of the program is different due to the relative ordering of the two declarations, so the behavior is undefined.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2014-05-21T03:58:35.387", "Id": "23773620", "Score": "17", "CreationDate": "2014-05-21T03:48:42.263", "LastActivityDate": "2014-05-21T03:58:35.387"}, "23773504": {"CommentCount": "1", "ViewCount": "496", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorDisplayName": "user2953119", "CreationDate": "2014-05-21T03:35:49.147", "LastActivityDate": "2014-05-21T13:46:41.610", "LastEditDate": "2014-05-21T13:46:41.610", "AcceptedAnswerId": "23773620", "FavoriteCount": "6", "Title": "Rule of reordering member declaration in class", "Id": "23773504", "Score": "15", "Body": "<p>I'm reading the c++14 N3797 and I've encountered with 3.3.7/1:</p>\n<blockquote>\n<p id=\"so_23773504_23773504_0\">If reordering member declarations in a class yields an alternate valid\n  program under (1) and (2), the program is ill-formed, no diagnostic is\n  required.</p>\n</blockquote>\n<p>There are (1) and (2):</p>\n<blockquote>\n<p id=\"so_23773504_23773504_1\">1) The potential scope of a name declared in a class consists not only\n  of the declarative region following the name\u2019s point of declaration,\n  but also of all function bodies, default arguments,\n  exception-specifications, and brace-or-equal-initializers of\n  non-static data members in that class (including such things in nested\n  classes).</p>\n<p id=\"so_23773504_23773504_2\">2) A name N used in a class S shall refer to the same declaration in\n  its context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>That is if we write the following:</p>\n<pre><code>class A\n{\n    int a;\n    int b;\n}\n</code></pre>\n<p>then the program is ill-formed. Reorering member declaration yields an alternate valid program:</p>\n<pre><code>class A\n{\n    int b;\n    int a;\n}\n</code></pre>\n<p>Might I don't understand this rule correctly?</p>\n", "Tags": "<c++><class>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23773504_23773504_1": {"section_id": 7070, "quality": 0.967741935483871, "length": 30}, "so_23773504_23773504_0": {"section_id": 7070, "quality": 1.0, "length": 11}, "so_23773504_23773504_2": {"section_id": 7070, "quality": 1.0, "length": 15}}, "n3337": {"so_23773504_23773504_1": {"section_id": 6814, "quality": 0.8709677419354839, "length": 27}, "so_23773504_23773504_0": {"section_id": 6814, "quality": 1.0, "length": 11}, "so_23773504_23773504_2": {"section_id": 6814, "quality": 1.0, "length": 15}}, "n4659": {"so_23773504_23773504_1": {"section_id": 8567, "quality": 0.9354838709677419, "length": 29}, "so_23773504_23773504_2": {"section_id": 8568, "quality": 1.0, "length": 15}}}});