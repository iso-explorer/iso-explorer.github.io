post_cb({"25786276": {"CommentCount": "6", "ViewCount": "56", "PostTypeId": "1", "LastEditorUserId": "4030672", "CreationDate": "2014-09-11T11:29:20.183", "LastActivityDate": "2014-09-11T12:24:26.470", "Title": "two dimensional array overload", "LastEditDate": "2014-09-11T11:36:28.143", "Id": "25786276", "Score": "0", "Body": "<p>I have implemented a structure for containing configuration data using the stl::map back end. I have implemented the [] operator as:</p>\n<pre><code>string&amp; config:operator[] ( const string theKey )\n{\n    ParamMapIter iter;\n\n    iter = _configMap.find ( theKey );\n\n    if ( iter == _configMap.end() )\n    {\n        _configMap[theKey] = \"\";     // Create a new blank key/value when missing key\n    }\n\n    return _configMap[theKey];\n}\n</code></pre>\n<p>so I can do things like</p>\n<pre><code>Conf[\"key\"] = \"value\";\n</code></pre>\n<p>Now I'd like to make this semi-two dimensional to match old style Windows config files with separate sections. e.g. so I can write </p>\n<pre><code>Conf[\"section\"] [\"key\"] = \"value\";\n</code></pre>\n<p>Any suggestions on how to implement this efficiently?</p>\n<p>I guess the real question is how to implement the double subscript. The underlying implementation would take care of the actual detail - though suggestions on that also appreciated.</p>\n", "Tags": "<c++><map><stl>", "OwnerUserId": "4030672", "AnswerCount": "2"}, "25786691": {"ParentId": "25786276", "CommentCount": "0", "Body": "<p><strong>std::map</strong> gives you the \"create if not existing\" functionality in <strong>operator[]</strong></p>\n<p>See <a href=\"http://www.cplusplus.com/reference/map/map/operator[]/\" rel=\"nofollow\">std::map::operator[]</a></p>\n<blockquote>\n<p id=\"so_25786276_25786691_0\"><strong>If k does not match the key of any element</strong> in the container, <strong>the function inserts a new element</strong> with that key and returns a reference to its mapped value. Notice that this always increases the container size by one, even if no mapped value is assigned to the element (the element is constructed <strong>using its default constructor</strong>).</p>\n</blockquote>\n<p>Or C++ standard [<strong>23.4.4.3 map element access</strong>]</p>\n<blockquote>\n<p id=\"so_25786276_25786691_1\"><strong>T&amp; operator[](const key_type&amp; x);</strong></p>\n<blockquote>\n<p id=\"so_25786276_25786691_11\">1 Effects: If there is no key equivalent to x in the map, inserts\n    value_type(x, T()) into the map.</p>\n<p id=\"so_25786276_25786691_12\">2 Requires: key_type shall be CopyInsertable and mapped_type shall be\n    DefaultInsertable into\n    *this.</p>\n<p id=\"so_25786276_25786691_13\">3 Returns: A reference to the mapped_type corresponding to x in *this.</p>\n<p id=\"so_25786276_25786691_14\">4 Complexity: logarithmic.</p>\n</blockquote>\n<p id=\"so_25786276_25786691_6\"><strong>T&amp; operator[](key_type&amp;&amp; x);</strong></p>\n<blockquote>\n<p id=\"so_25786276_25786691_15\">5 Effects: If there is no key equivalent to x in the map, inserts\n    value_type(std::move(x), T()) into\n    the map.</p>\n<p id=\"so_25786276_25786691_16\">6 Requires: mapped_type shall be DefaultInsertable into *this.</p>\n<p id=\"so_25786276_25786691_17\">7 Returns: A reference to the mapped_type corresponding to x in *this.</p>\n<p id=\"so_25786276_25786691_18\">8 Complexity: logarithmic.</p>\n</blockquote>\n</blockquote>\n<p>So if you was adding only the operator[] functionality you can simply do</p>\n<pre><code>typedef std::map&lt;std::string, std::map&lt;std::string, std::string&gt;&gt; config;\n// or in C++11 style\n// using config = std::map&lt;std::string, std::map&lt;std::string, std::string&gt;&gt;;\n\nconfig Conf; \nstd::map&lt;std::string, std::string&gt;&amp; section = Conf[\"Section\"];\n// or again in C++11\n// auto &amp;section = Conf[\"Section\"];\nsection[\"key\"] = \"value\";\n</code></pre>\n", "OwnerUserId": "4029982", "PostTypeId": "2", "Id": "25786691", "Score": "1", "CreationDate": "2014-09-11T11:49:13.757", "LastActivityDate": "2014-09-11T11:49:13.757"}, "bq_ids": {"n4140": {"so_25786276_25786691_15": {"section_id": 1011, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_7": {"section_id": 1011, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_3": {"section_id": 1008, "quality": 0.8333333333333334, "length": 5}, "so_25786276_25786691_11": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_12": {"section_id": 1008, "quality": 0.8333333333333334, "length": 5}, "so_25786276_25786691_2": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_25786276_25786691_11": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_15": {"section_id": 996, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_2": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_25786276_25786691_7": {"section_id": 996, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_25786276_25786691_11": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_25786276_25786691_15": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_25786276_25786691_2": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_25786276_25786691_7": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}}}, "25787230": {"ParentId": "25786276", "CommentCount": "0", "Body": "<p>Does it have to match both <code>Conf[\"key1\"][\"key2\"] = \"bar\";</code> and <code>Conf[\"key1\"] = \"foo\";</code>?</p>\n<p>Then you will have to define a Section that is just like your current Config, except as below.</p>\n<p>Change the Config [] to return a &amp;Section.</p>\n<p>Make an overload operator= taking a Key (ie. a std::string) this makes it possible to implement <code>Conf[\"key1\"] = \"foo\";</code> in the operator=</p>\n<pre><code>_sectionMap[\"\"] = value;\n</code></pre>\n<p>and adding operator std::string to return <code>_sectionMap[\"\"]</code> </p>\n<p>This makes the Section key \"\" the same as the value <code>Config[key1]</code>.</p>\n", "OwnerUserId": "4013258", "PostTypeId": "2", "Id": "25787230", "Score": "1", "CreationDate": "2014-09-11T12:15:51.967", "LastActivityDate": "2014-09-11T12:15:51.967"}});