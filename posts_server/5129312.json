post_cb({"5129337": {"ParentId": "5129312", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes (object in the standard are simply a region of storage -- 1.8/1)</p>\n<blockquote>\n<p id=\"so_5129312_5129337_0\">An <em>object</em> is a region of storage. [Note: A function is not an object, regardless of whether or not it occupies storage in the way that objects do. ]  An object is created by a <em>definition</em>, by a <em>new-expression</em>_ or by the implementation when needed.</p>\n</blockquote>\n<p>And for variable (3/4)</p>\n<blockquote>\n<p id=\"so_5129312_5129337_1\">A <em>name</em> is a use of an identifier that denotes an entity or <em>label</em>.  A <em>variable</em> is introduced by the declaration of an object. The variable's name denotes the object.</p>\n</blockquote>\n<p>For the curious, the definition is inherited from C (with modifications needed for C++).  The C 90 Standard states:</p>\n<blockquote>\n<p id=\"so_5129312_5129337_2\"><strong>object</strong>: A region of data storage in the execution environment, the contents of which can\n  represent values.</p>\n</blockquote>\n", "OwnerUserId": "136208", "LastEditorUserId": "136208", "LastEditDate": "2011-02-26T20:10:25.700", "Id": "5129337", "Score": "10", "CreationDate": "2011-02-26T19:52:16.800", "LastActivityDate": "2011-02-26T20:10:25.700"}, "5129312": {"CommentCount": "2", "ViewCount": "155", "PostTypeId": "1", "LastEditorUserId": "434460", "CreationDate": "2011-02-26T19:47:49.193", "LastActivityDate": "2011-02-26T20:10:25.700", "Title": "Are simple type variables objects in C++?", "AcceptedAnswerId": "5129337", "LastEditDate": "2011-02-26T20:00:05.387", "Id": "5129312", "Score": "2", "Body": "<p>Are simple type variables objects in C++?</p>\n<pre><code>int x = 0;\n</code></pre>\n<p>Obviously, that depends on the definition of the object. So would <code>x</code> be object in this case? It may not be defined by the standard in any way, but please do claim so if you are sure that this is either object or it is not.</p>\n", "Tags": "<c++><object><simpletype>", "OwnerUserId": "434460", "AnswerCount": "3"}, "5129407": {"ParentId": "5129312", "CommentCount": "0", "Body": "<p>From 1.8.1</p>\n<blockquote>\n<p id=\"so_5129312_5129407_0\">-1- The constructs in a C++ program create, destroy, refer to, access, and manipulate objects. An object is a region of storage. [Note: A function is not an object, regardless of whether or not it occupies storage in the way that objects do. ] An object is created by a definition (basic.def), by a new-expression (expr.new) or by the implementation (class.temporary) when needed. The properties of an object are determined when the object is created. An object can have a name (clause basic). An object has a storage duration (basic.stc) which influences its lifetime (basic.life). An object has a type (basic.types). The term object type refers to the type with which the object is created. </p>\n</blockquote>\n<p>It's also implicit in this statement from 3.9.1:</p>\n<blockquote>\n<p id=\"so_5129312_5129407_1\">Types describe objects (intro.object), references (dcl.ref), or functions (dcl.fct).</p>\n</blockquote>\n<p>Obviously, for \"objects\" to group everything that's typed other than references or functions, it must include <code>int</code> et al.</p>\n<p>It's worth noting that basic types like <code>int</code> are not objects in the \"Object Oriented\" sense, but that's pretty obvious from the fact that they're the same as in C which is not an Object Oriented language.</p>\n", "OwnerUserId": "410767", "PostTypeId": "2", "Id": "5129407", "Score": "2", "CreationDate": "2011-02-26T20:03:40.780", "LastActivityDate": "2011-02-26T20:03:40.780"}, "bq_ids": {"n4140": {"so_5129312_5129346_0": {"section_id": 5385, "quality": 0.8571428571428571, "length": 30}, "so_5129312_5129407_0": {"section_id": 5790, "quality": 0.7096774193548387, "length": 44}, "so_5129312_5129337_0": {"section_id": 5790, "quality": 0.8421052631578947, "length": 16}, "so_5129312_5129407_1": {"section_id": 7199, "quality": 0.625, "length": 5}}, "n3337": {"so_5129312_5129346_0": {"section_id": 5179, "quality": 0.8571428571428571, "length": 30}, "so_5129312_5129407_0": {"section_id": 5563, "quality": 0.7096774193548387, "length": 44}, "so_5129312_5129337_0": {"section_id": 5563, "quality": 0.8421052631578947, "length": 16}, "so_5129312_5129407_1": {"section_id": 6943, "quality": 0.625, "length": 5}}, "n4659": {"so_5129312_5129346_0": {"section_id": 6810, "quality": 0.8571428571428571, "length": 30}, "so_5129312_5129407_0": {"section_id": 7247, "quality": 0.5967741935483871, "length": 37}, "so_5129312_5129337_0": {"section_id": 7247, "quality": 0.7368421052631579, "length": 14}, "so_5129312_5129407_1": {"section_id": 8708, "quality": 0.625, "length": 5}}}, "5129346": {"ParentId": "5129312", "CommentCount": "0", "Body": "<p>Yes, it is. According to \u00a77/5: </p>\n<blockquote>\n<p id=\"so_5129312_5129346_0\">If the decl-specifier-seq contains the typedef specifier, the declaration is called a typedef declaration and the name of each init-declarator is declared to be a typedef-name, synonymous with its associated type (7.1.3). If the decl-specifier-seq contains no typedef specifier, the declaration is called a function declaration if the type associated with the name is a function type (8.3.5) and an object declaration otherwise.</p>\n</blockquote>\n<p>So, what you have there is an object declaration (that also happens to be an object definition).</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "5129346", "Score": "0", "CreationDate": "2011-02-26T19:54:07.767", "LastActivityDate": "2011-02-26T19:54:07.767"}});