post_cb({"bq_ids": {"n4140": {"so_17317083_17317140_0": {"section_id": 7003, "quality": 0.9375, "length": 30}}, "n3337": {"so_17317083_17317140_0": {"section_id": 6749, "quality": 0.9375, "length": 30}}, "n4659": {"so_17317083_17317140_0": {"section_id": 8500, "quality": 0.9375, "length": 30}}}, "17317083": {"CommentCount": "4", "AcceptedAnswerId": "17317140", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2013-06-26T10:02:03.130", "LastActivityDate": "2017-01-23T17:18:27.963", "LastEditDate": "2017-01-23T17:18:27.963", "ViewCount": "263", "FavoriteCount": "1", "Title": "Can a virtual function be overridden by a non-virtual function?", "Id": "17317083", "Score": "6", "Body": "<p>In this code:</p>\n<pre><code>class Base {\npublic:\n    virtual void method() = 0;\n};\n\nclass Derived1 : public Base{\npublic:\n    virtual void method() override { }\n};\n\nclass Derived2 : public Base{\npublic:\n    void method() override { }\n};\n</code></pre>\n<p>Is there any difference between <code>Derived1</code> and <code>Derived2</code>?</p>\n", "Tags": "<c++><c++11><override><virtual-functions>", "OwnerUserId": "102441", "AnswerCount": "2"}, "17317131": {"ParentId": "17317083", "CommentCount": "0", "Body": "<p>They are identical. </p>\n<p><code>virtual</code> is optional when actually overriding a function. It is mandatory only when marking a function in the base class.</p>\n", "OwnerUserId": "1520364", "PostTypeId": "2", "Id": "17317131", "Score": "4", "CreationDate": "2013-06-26T10:04:13.243", "LastActivityDate": "2013-06-26T10:04:13.243"}, "17317140": {"ParentId": "17317083", "CommentCount": "5", "Body": "<p>From section <em>10.3 Virtual functions</em> of the c++11 standard (draft n3337) point 2:</p>\n<blockquote>\n<p id=\"so_17317083_17317140_0\">If a virtual member function vf is declared in a class Base and in a class Derived, derived directly or indirectly\n  from Base, a member function vf with the same name, parameter-type-list (8.3.5), cv-qualification, and refqualifier\n  (or absence of same) as Base::vf is declared, <strong>then Derived::vf is also virtual (whether or not it is\n  so declared)</strong> and it overrides Base::vf.</p>\n</blockquote>\n<p>So <code>Derived2::method</code> is also <code>virtual</code>, even though it is not explicitly declared as such.</p>\n", "OwnerUserId": "1033896", "PostTypeId": "2", "Id": "17317140", "Score": "16", "CreationDate": "2013-06-26T10:04:33.970", "LastActivityDate": "2013-06-26T10:04:33.970"}});