post_cb({"38887869": {"ParentId": "38886035", "CommentCount": "0", "Body": "<p>You cannot initialize a member of base class in the constructor initializer list.</p>\n<p>In Standardese, <code>T::value(std::move(arg.value))</code> in <code>type2(T&amp;&amp; arg) : T::value(std::move(arg.value)) {}</code> is called a <em>mem-initializer</em>, and <code>T::value</code> is called a <em>mem-initializer-id</em>. According to <a href=\"http://eel.is/c++draft/class.base.init#2\" rel=\"nofollow\">[class.base.init]p2</a>, </p>\n<blockquote>\n<p id=\"so_38886035_38887869_0\">Unless the <em>mem-initializer-id</em> names the constructor's class, a non-static data member of the constructor's class, or a direct or virtual base of that class, the <em>mem-initializer</em> is ill-formed.</p>\n</blockquote>\n<p>You can call the constructor of the base class, and let it initialize the member. In this specific case, you only need to change <code>T::value(std::move(arg.value))</code> to <code>T(std::move(arg.value))</code>. <a href=\"http://melpon.org/wandbox/permlink/qUklNvLAe2bPqEi2\" rel=\"nofollow\">Demo</a>.</p>\n", "OwnerUserId": "4672588", "PostTypeId": "2", "Id": "38887869", "Score": "1", "CreationDate": "2016-08-11T05:26:30.287", "LastActivityDate": "2016-08-11T05:26:30.287"}, "38886035": {"CommentCount": "0", "ViewCount": "93", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2016-08-11T01:44:24.670", "LastActivityDate": "2016-08-11T05:26:30.287", "Title": "C++ Member variable initialization in templated inherited class", "AcceptedAnswerId": "38887869", "LastEditDate": "2016-08-11T03:23:18.010", "Id": "38886035", "Score": "0", "Body": "<p>I am trying to figure out whats wrong with this piece of code. Basically <code>type2</code> inherits from <code>type1&lt;T&gt;, type1&lt;T2&gt;</code> and I want to initialize the <code>value</code> member from one of the base classes.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;utility&gt;\n\ntemplate &lt;typename T&gt;\nstruct type1 {\n    using base_type = T;\n\n    template &lt;typename... Args&gt; type1(Args&amp;&amp;... args) : value(std::forward&lt;Args&gt;(args)...) {}\n\n    T value;\n};\n\ntemplate &lt;typename... Ts&gt;\nstruct type2 : public Ts... {\n    template &lt;typename T&gt;\n    type2(T&amp;&amp; arg) : T::value(std::move(arg.value)) {}\n};\n\nint main()\n{\n    type2&lt;type1&lt;int&gt;, type1&lt;double&gt;&gt; x(type1&lt;int&gt;(10));\n    return 0;\n}\n</code></pre>\n<p>But I get the following error from clang:</p>\n<pre><code>    Error(s):\n\nsource_file.cpp:15:25: error: typename specifier refers to non-type member 'value' in 'type1&lt;int&gt;'\n    type2(T&amp;&amp; arg) : T::value(std::move(arg.value)) {}\n                        ^~~~~\nsource_file.cpp:20:38: note: in instantiation of function template specialization 'type2&lt;type1&lt;int&gt;, type1&lt;double&gt; &gt;::type2&lt;type1&lt;int&gt; &gt;' requested here\n    type2&lt;type1&lt;int&gt;, type1&lt;double&gt;&gt; x(type1&lt;int&gt;(10));\n                                     ^\nsource_file.cpp:9:7: note: referenced member 'value' is declared here\n    T value;\n      ^\n1 error generated.\n</code></pre>\n<p>Why is clang saying <code>typename specifier refers to non-type member 'value' in 'type1&lt;int&gt;'</code>? Gcc wants to treat (probably clang too) <code>value</code> as a type:</p>\n<pre><code>Error(s):\n\nsource_file.cpp: In instantiation of \u2018type2&lt;Ts&gt;::type2(T&amp;&amp;) [with T = type1&lt;int&gt;; Ts = {type1&lt;int&gt;, type1&lt;double&gt;}]\u2019:\nsource_file.cpp:20:54:   required from here\nsource_file.cpp:15:51: error: no type named \u2018value\u2019 in \u2018struct type1&lt;int&gt;\u2019\n     type2(T&amp;&amp; arg) : T::value(std::move(arg.value)) {}\n                                                   ^\n</code></pre>\n", "Tags": "<c++><compiler-errors><c++14><variadic-templates><template-meta-programming>", "OwnerUserId": "448706", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38886035_38887869_0": {"section_id": 429, "quality": 0.9375, "length": 15}}, "n3337": {"so_38886035_38887869_0": {"section_id": 421, "quality": 0.9375, "length": 15}}, "n4659": {"so_38886035_38887869_0": {"section_id": 447, "quality": 0.9375, "length": 15}}}});