post_cb({"29253567": {"ParentId": "29253100", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_29253100_29253567_0\">However, I am never using a pointer to <em>write</em> data [...]</p>\n</blockquote>\n<p>The language in the standard is more general than this; <strong>[basic.life]</strong>/7 has:</p>\n<blockquote>\n<p id=\"so_29253100_29253567_1\">[...] a pointer that\n  pointed to the original object, a reference that referred to the original object, or the name of the original\n  object [...]</p>\n</blockquote>\n<p>In your <code>operator=</code> you're using an lvalue of type <code>T</code> to write to <code>data</code>, and in <code>operator U</code> you're using a pointer of type <code>U</code> to read it; where <code>U</code> and <code>T</code> are unrelated and not character types this is UB.</p>\n<p>Just use <code>memcpy</code>. It's guaranteed to work, and it's efficient (<em>try it</em>)!</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "29253567", "Score": "1", "CreationDate": "2015-03-25T10:50:12.240", "LastActivityDate": "2015-03-25T10:50:12.240"}, "29253100": {"CommentCount": "1", "ViewCount": "102", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-03-25T10:28:15.280", "LastActivityDate": "2015-03-25T10:50:12.240", "Title": "Using pointer conversions to store/cast values: Am I breaking the strict aliasing rule?", "AcceptedAnswerId": "29253236", "LastEditDate": "2017-05-23T12:02:35.343", "Id": "29253100", "Score": "3", "Body": "<p>The question relates to <a href=\"https://stackoverflow.com/a/29213705/2436175\">this post</a>.</p>\n<p>Some authoritative users stated that the following code breaks <a href=\"https://stackoverflow.com/q/98650/2436175\">strict aliasing rules</a>.</p>\n<pre><code>#include &lt;boost/static_assert.hpp&gt;\n\ntemplate &lt;typename T&gt;\nstruct MyType {\n\n    private:\n    T data;\n\n    public:\n    template &lt;typename U&gt;\n    operator U () {\n        BOOST_STATIC_ASSERT_MSG(sizeof(U) == sizeof(T),\"Trying to convert to data type of different size\");\n        return *((U*) &amp;data);\n    }\n\n    template &lt;typename U&gt;\n    NeonVectorType&lt;T&gt;&amp; operator =(const U&amp; in) {\n        BOOST_STATIC_ASSERT_MSG(sizeof(U) == sizeof(T),\"Trying to copy from data type of different size\");\n        data = *((T*) &amp;in);\n        return *this;\n    }\n}\n</code></pre>\n<p>However, I am never using a pointer to <em>write</em> data, and I am never sharing a pointer to it, so I cannot see how value contained in a variable can change without the compiler realizing that this is happening. My impression is that maybe I am breaking some rules, but not the strict aliasing ones...</p>\n<p>Note: I don't know how much this matters, but my compiler (gcc 4.9) does not issue warnings.</p>\n", "Tags": "<c++><pointers><c++98><strict-aliasing>", "OwnerUserId": "2436175", "AnswerCount": "2"}, "29253236": {"ParentId": "29253100", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>*((U*) &amp;data)</code> will violate strict aliasing if this is a <code>reinterpret_cast</code> and the type <code>U</code> is not permitted to alias the type <code>T</code>. The permitted types appear in <a href=\"https://stackoverflow.com/a/7005988/1505939\">this list</a>.</p>\n<p>The rule refers to <a href=\"https://stackoverflow.com/questions/29001319/in-c-what-does-access-mean-in-the-strict-aliasing-rule\">both reading and writing</a>.</p>\n<p><a href=\"http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html\" rel=\"nofollow noreferrer\">Here</a> is a good article that explains some of the rationale behind the rules.</p>\n<p>As noted on the main strict aliasing thread, you can use <code>memcpy</code> as work around , for example:</p>\n<pre><code>U u;\nmemcpy( &amp;u, &amp;data, sizeof u );\nreturn u;\n</code></pre>\n<p>and in the other function</p>\n<pre><code>memcpy( &amp;data, &amp;in, sizeof data );\n</code></pre>\n<p>Note that raw byte copies of class types are subject to some restrictions (I think the classes have to be POD, and you'd better be sure they have the same layout). </p>\n", "OwnerUserId": "1505939", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:17:42.737", "Id": "29253236", "Score": "2", "CreationDate": "2015-03-25T10:34:21.960", "LastActivityDate": "2015-03-25T10:39:31.383"}, "bq_ids": {"n4140": {"so_29253100_29253567_1": {"section_id": 7195, "quality": 1.0, "length": 11}}, "n3337": {"so_29253100_29253567_1": {"section_id": 6939, "quality": 1.0, "length": 11}}, "n4659": {"so_29253100_29253567_1": {"section_id": 8704, "quality": 1.0, "length": 11}}}});