post_cb({"12351531": {"Id": "12351531", "PostTypeId": "2", "Body": "<p>The standard is somewhat ambiguous. The code you quote as being equivalent to a <code>while</code> loop implies that there is an inner scope where declarations inside the loop could hide declarations in the condition; however the standard also says (quoting C++11, since I don't have C++03 handy):</p>\n<blockquote>\n<p id=\"so_12351460_12351531_0\">6.4/2 The rules for conditions apply both to selection-statements and to the <code>for</code> and <code>while</code> statements</p>\n<p id=\"so_12351460_12351531_1\">6.4/3 If the name is re-declared in the outermost block of a substatement controlled by the condition, the declaration that re-declares the name is ill-formed.</p>\n<p id=\"so_12351460_12351531_2\">6.5.3/1 names declared in the for-init-statement are in the same declarative-region as those declared in the condition</p>\n</blockquote>\n<p>which between them imply that the names can't be redeclared.</p>\n<p>Older (pre-1998) versions of the language put declarations in the for-init-statement into the declarative region outside the loop. This meant that your code would be valid, but this wouldn't:</p>\n<pre><code>for (int i = ...; ...; ...) {...}\nfor (int i = ...; ...; ...) {...}  // error: redeclaration of i\n</code></pre>\n", "LastEditorUserId": "204847", "LastActivityDate": "2012-09-10T15:51:51.733", "Score": "7", "CreationDate": "2012-09-10T12:17:50.550", "ParentId": "12351460", "CommentCount": "5", "OwnerUserId": "204847", "LastEditDate": "2012-09-10T15:51:51.733"}, "12351901": {"Id": "12351901", "PostTypeId": "2", "Body": "<p>The current version of the standard is clear on this:</p>\n<blockquote>\n<h3>6.5 Iteration statements [stmt.iter]</h3>\n<p id=\"so_12351460_12351901_0\">2 - The substatement in an <em>iteration-statement</em> [e.g., a <code>for</code> loop] implicitly de\ufb01nes a block scope (3.3) which is entered and exited each time through the loop.</p>\n</blockquote>\n<p>C has a similar rule:</p>\n<blockquote>\n<h3>6.8.5 Iteration statements</h3>\n  \n  Semantics\n  \n  <p id=\"so_12351460_12351901_1\">5 - An iteration statement is a block whose scope is a strict subset of the scope of its\n  enclosing block. The loop body is also a block whose scope is a strict subset of the scope\n  of the iteration statement.</p>\n</blockquote>\n", "LastActivityDate": "2012-09-10T12:38:52.130", "CommentCount": "0", "CreationDate": "2012-09-10T12:38:52.130", "ParentId": "12351460", "Score": "0", "OwnerUserId": "567292"}, "34539306": {"Id": "34539306", "PostTypeId": "2", "Body": "<p>I'm a bit late to the party here, but I think this is disallowed most clearly by this passage in the C++11 standard:</p>\n<blockquote>\n<h3>3.3.3 Block scope [basic.scope.local]</h3>\n<p id=\"so_12351460_34539306_0\">4 - <strong>Names declared in the for-init-statement, the for-range-declaration</strong>, and in the condition of if, while, for,\n  and switch statements are local to the if, while, for, or switch statement (including the controlled\n  statement), and <strong>shall not be redeclared in a subsequent condition of that statement nor in the outermost\n  block (or, for the if statement, any of the outermost blocks) of the controlled statement</strong>; see 6.4.</p>\n</blockquote>\n", "LastActivityDate": "2015-12-31T00:19:29.480", "CommentCount": "0", "CreationDate": "2015-12-31T00:19:29.480", "ParentId": "12351460", "Score": "0", "OwnerUserId": "2669619"}, "12355614": {"Id": "12355614", "PostTypeId": "2", "Body": "<p>Some, generally older compiler makes variables declared in for loops visible outside the scope of the loop.</p>\n<p>To make all the compilers behave using the newer ( and better ) way declare a macro like this:</p>\n<pre><code>// In older compilers, variables declared in a for loop statement\n// are in the scope of the code level right outside the for loop.\n// Newer compilers very sensibly limit the scope to inside the\n// loop only. For compilers which don't do this, we can spoof it\n// with this macro:\n#ifdef FOR_LOOP_VARS_NEED_LOCAL_SCOPE\n   #define for if(0); else for\n#endif\n</code></pre>\n<p>Then for each compiler that has the older behavior define FOR_LOOP_VARS_NEED_LOCAL_SCOPE. For example here is how you would do it for MSVC &lt; 8:</p>\n<pre><code>#ifdef _MSC_VER\n   #if _MSC_VER &lt; 1400   //  earlier than MSVC8\n      #define FOR_LOOP_VARS_NEED_LOCAL_SCOPE\n   #endif\n#endif\n</code></pre>\n", "LastActivityDate": "2012-09-10T16:17:36.810", "CommentCount": "0", "CreationDate": "2012-09-10T16:17:36.810", "ParentId": "12351460", "Score": "0", "OwnerUserId": "1412808"}, "12351766": {"Id": "12351766", "PostTypeId": "2", "Body": "<p>I think the code is correct. IMO, the issue is with the braces. Note that the for statement is defined as:</p>\n<blockquote>\n<p id=\"so_12351460_12351766_0\">for ( for-init-statement; condition; expression ) statement</p>\n</blockquote>\n<p>The loop body does not have braces, they are added when using a compound statement. But a compound statement adds its own declarative region, so the inner declaration should not have a conflict with the <code>for-init-statement</code>.</p>\n<p>The following code compiles ok with clang and G++ (note the double braces):</p>\n<pre><code>for (int *it = a1, *end = a1+1; it != end; ++it) {{\n    //...\n    bool *jt = a2, *end = a2+1;\n    //...\n}}\n</code></pre>\n<p>My guess is that the clang compiler tries to optimize as if the loop were defined as:</p>\n<blockquote>\n<p id=\"so_12351460_12351766_1\">for ( for-init-statement; condition; expression ) <strong>{</strong> statement-seq <strong>}</strong></p>\n</blockquote>\n<p>With the suble change in meaning: both declarative regions are fused together.</p>\n<p>On second though, even it no braces are used at all:</p>\n<pre><code>for (int x=0; ;)\n    char x;\n</code></pre>\n<p>It should compile correctly. From C++ draft 6.5, par. 2:</p>\n<blockquote>\n<p id=\"so_12351460_12351766_2\">The substatement in an iteration-statement implicitly defines a block scope.</p>\n</blockquote>\n<p>So the <code>char x;</code> by itself defines (implicitly) a block scope, and no conflicting declarations should happen.</p>\n", "LastEditorUserId": "865874", "LastActivityDate": "2012-09-10T12:34:56.650", "Score": "3", "CreationDate": "2012-09-10T12:29:39.757", "ParentId": "12351460", "CommentCount": "1", "OwnerUserId": "865874", "LastEditDate": "2012-09-10T12:34:56.650"}, "bq_ids": {"n4140": {"so_12351460_12351531_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 3884}, "so_12351460_34539306_0": {"length": 28, "quality": 1.0, "section_id": 7064}, "so_12351460_12351766_0": {"length": 4, "quality": 1.0, "section_id": 3895}, "so_12351460_12351531_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 3903}, "so_12351460_12351531_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 3883}, "so_12351460_12351901_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 3896}, "so_12351460_12351766_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3896}}, "n3337": {"so_12351460_12351766_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3756}, "so_12351460_34539306_0": {"length": 28, "quality": 1.0, "section_id": 6808}, "so_12351460_12351766_0": {"length": 4, "quality": 1.0, "section_id": 3755}, "so_12351460_12351531_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 3744}, "so_12351460_12351531_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 3743}, "so_12351460_12351901_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 3756}, "so_12351460_12351531_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3763}}, "n4659": {"so_12351460_12351766_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 4783}, "so_12351460_34539306_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 8561}, "so_12351460_12351531_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 4763}, "so_12351460_12351531_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 4762}, "so_12351460_12351901_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 4783}, "so_12351460_12351531_2": {"length": 6, "quality": 0.6666666666666666, "section_id": 4774}}}, "12351460": {"ViewCount": "2281", "Body": "<p>When trying to compile the following (simplified) code for multiple platforms, I found that it was failing on some, namely IBM's xlC_r.  Further investigation has found that it also fails on comeau and clang.  It compiles successfully with g++ and Solaris's CC.</p>\n<p>Here is the code:</p>\n<pre><code>int main()\n{\n    int a1[1];\n    bool a2[1];\n\n    for (int *it = a1, *end = a1+1; it != end; ++it) {\n        //...\n        bool *jt = a2, *end = a2+1;\n        //...\n    }\n}\n</code></pre>\n<p>xlC_r error:</p>\n<pre><code>\"main.cpp\", line 8.25: 1540-0400 (S) \"end\" has a conflicting declaration.\n\"main.cpp\", line 6.25: 1540-0425 (I) \"end\" is defined on line 6 of \"main.cpp\".\n</code></pre>\n<p>clang error:</p>\n<pre><code>main.cpp:8:25: error: redefinition of 'end' with a different type\n        bool *jt = a2, *end = a2+1;\n                        ^\nmain.cpp:6:25: note: previous definition is here\n    for (int *it = a1, *end = a1+1; it != end; ++it) {\n                        ^\n</code></pre>\n<p>comeau error:</p>\n<pre><code>\"ComeauTest.c\", line 8: error: \"end\", declared in for-loop initialization, may not\n          be redeclared in this scope\n          bool *jt = a2, *end = a2+1;\n                          ^\n</code></pre>\n<p>The question is why is this an error?</p>\n<p>Looking through the 2003 standard, it says the following (6.5.3):</p>\n<pre><code>The for statement\n    for ( for-init-statement; condition; expression ) statement\nis equivalent to\n    {\n        for-init-statement;\n        while ( condition ) {\n            statement;\n            expression;\n        }\n    }\nexcept that names declared in the for-init-statement are in the same\ndeclarative-region as those declared in condition\n</code></pre>\n<p>Here there are no names declared in condition.</p>\n<p>Further, it says (6.5.1):</p>\n<pre><code>When the condition of a while statement is a declaration, the scope\nof the variable that is declared extends from its point of declaration\n(3.3.1) to the end of the while statement. A while statement of the form\n    while (T t = x) statement\nis equivalent to\n    label:\n    {\n        T t = x;\n        if (t) {\n            statement;\n            goto label;\n        }\n    }\n</code></pre>\n<p>Again, I'm not sure this is relevant, as there is no declaration in the condition.  So given the equivalent re-write from 6.5.3, my code should be the same as:</p>\n<pre><code>int main()\n{\n    int a1[1];\n    bool a2[1];\n\n    {\n        int *it = a1, *end = a1+1;\n        while (it != end) {\n            //...\n            bool *jt = a2, *end = a2+1;\n            //...\n            ++it;\n        }\n    }\n}\n</code></pre>\n<p>Which obviously would allow end to be re-declared.</p>\n", "AcceptedAnswerId": "12351531", "Title": "Redeclaration of a variable in a for-loop in C++", "CreationDate": "2012-09-10T12:13:07.287", "Id": "12351460", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-12-31T00:19:29.480", "Score": "13", "OwnerUserId": "1660050", "Tags": "<c++><for-loop><declaration>", "AnswerCount": "5"}});