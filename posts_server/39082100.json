post_cb({"39082267": {"ParentId": "39082100", "CommentCount": "0", "Body": "<p>It isn't complete in the header file. </p>\n<p><code>~Holder();</code> is declaring an external function.</p>\n<p>declaring <code>~Holder() = default;</code> is equivalent to declaring <code>~Holder() {}</code>, which is to say that it's providing a definition of the declared destructor. It cannot do this because the inner <code>Impl</code> class has only been declared at this point, not defined.</p>\n", "OwnerUserId": "2015579", "PostTypeId": "2", "Id": "39082267", "Score": "0", "CreationDate": "2016-08-22T14:34:43.807", "LastActivityDate": "2016-08-22T14:34:43.807"}, "39082100": {"CommentCount": "1", "ViewCount": "74", "PostTypeId": "1", "LastEditorUserId": "5183619", "CreationDate": "2016-08-22T14:26:45.910", "LastActivityDate": "2016-08-22T15:05:21.507", "Title": "destructing an object with Incomplete type", "AcceptedAnswerId": "39082260", "LastEditDate": "2016-08-22T15:05:21.507", "Id": "39082100", "Score": "1", "Body": "<p>I have read other stackoverflow questions on the subject, yet I am really confused with the incomplete type and this C++ specification paragraph \u00a75.3.5/5 :</p>\n<blockquote>\n<p id=\"so_39082100_39082100_0\">If the object being deleted has incomplete class type at the point of\n  deletion and the complete class has a non-trivial destructor or a\n  deallocation function, the behavior is undefined.</p>\n</blockquote>\n<p>Given an example, .h :</p>\n<pre><code>template&lt;class T&gt; class my_scoped_ptr\n{\nprivate:\n    T *t;\npublic:\n    my_scoped_ptr(T * _t) : t(_t) {}\n    ~my_scoped_ptr()  {\n        typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];\n        (void) sizeof(type_must_be_complete);\n        delete t;\n    }\n};\n\nclass Holder\n{\npublic:\n    Holder();\n    ~Holder();\nprivate:\n    class Impl;\n    my_scoped_ptr&lt;Impl&gt; _mptr;\n};\n</code></pre>\n<p>.cpp</p>\n<pre><code>class Holder::Impl {};\nHolder::Holder() : _mptr(new Impl) {}\nHolder::~Holder() {}\n</code></pre>\n<p>How does the non-inline destructor of class Holder suddenly make Impl complete?\nWhy is the default destructor not sufficient to make the class complete? Why shared_ptr works perfectly well without the need of the destructor?</p>\n", "Tags": "<c++>", "OwnerUserId": "2743286", "AnswerCount": "2"}, "39082260": {"ParentId": "39082100", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It's all about the point of instantiation of <code>my_scoped_ptr&lt;Impl&gt;::~my_scoped_ptr</code>. </p>\n<p>When you don't provide a user-defined destructor, the default one is defined as soon as the definition of class <code>Holder</code> is processed - basically, it's equivalent to defining the destructor in-class:</p>\n<pre><code>class Holder {\n  // ... \n  ~Holder() {}\n};\n</code></pre>\n<p>This destructor needs to destroy <code>_mptr</code> member, so <code>~my_scoped_ptr</code> is also instantiated at this point, while <code>Impl</code> is still incomplete.</p>\n<p>When you explicitly declare the destructor in the header, and define in .cpp file, the instantiation of <code>~my_scoped_ptr</code> happens at the point of that definition - and by that time, <code>Impl</code> is complete.</p>\n<p><code>std::shared_ptr</code> works around this by capturing the deleter at run-time, in its constructor, at the point where it's handed the raw pointer for the first time, and storing it in the control block. You can even assign <code>std::shared_ptr&lt;Derived&gt;</code> to <code>std::shared_ptr&lt;Base&gt;</code>, and the latter will eventually call the correct destructor, even if non-virtual. <code>std::shared_ptr</code> can pull this trick off because it needs to allocate extra storage (for the reference count, among other things) anyway, so it's already somewhat heavyweight. <code>std::unique_ptr</code> on the other hand exhibits the same issue as your <code>my_scoped_ptr</code>, for all the same reasons.</p>\n", "OwnerUserId": "1670129", "LastEditorUserId": "1670129", "LastEditDate": "2016-08-22T14:39:51.890", "Id": "39082260", "Score": "4", "CreationDate": "2016-08-22T14:34:35.113", "LastActivityDate": "2016-08-22T14:39:51.890"}, "bq_ids": {"n4140": {"so_39082100_39082100_0": {"section_id": 6109, "quality": 1.0, "length": 16}}, "n3337": {"so_39082100_39082100_0": {"section_id": 5875, "quality": 1.0, "length": 16}}, "n4659": {"so_39082100_39082100_0": {"section_id": 7606, "quality": 1.0, "length": 16}}}});