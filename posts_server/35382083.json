post_cb({"35382083": {"CommentCount": "3", "ViewCount": "189", "CreationDate": "2016-02-13T16:07:36.357", "LastActivityDate": "2016-02-13T17:17:45.763", "Title": "C++, assignment of non-pointer type to a member pointer of template class", "AcceptedAnswerId": "35382425", "PostTypeId": "1", "Id": "35382083", "Score": "3", "Body": "<p>While looking for a example of binary tree implementation, I've noticed something strange in the code provided <a href=\"https://gist.github.com/mgechev/5911348\" rel=\"nofollow\">here</a>. In <em>Node</em> structure's constructor a non-pointer type variable is assigned to a pointer type.</p>\n<p>It compiles just fine (I'm using GCC 5.3.0). And what made me really confused is that compilation depends on other constructor's parameter, <em>val</em>.</p>\n<p>It have no effect in class methods, only in constructors:</p>\n<pre><code>template &lt;typename T&gt;\nclass Test {\n    Test* testPtr;\n\n    void testMethod(T t, Test&lt;T&gt; notAPointer) { // OK\n        this-&gt;testPtr = notAPointer;\n    }\n\n    void testMethod(Test&lt;T&gt; notAPointer) {      // OK\n        this-&gt;testPtr = notAPointer;\n    }\n\n    Test(T t, Test&lt;T&gt; notAPointer) {            // OK\n        this-&gt;testPtr = notAPointer;\n    }\n\n    Test(Test&lt;T&gt; notAPointer) {                 // compilation error\n        this-&gt;testPtr = notAPointer;\n    }\n};\n</code></pre>\n<p>The compilation error I'm getting is:</p>\n<blockquote>\n<p id=\"so_35382083_35382083_0\">invalid constructor; you probably meant \u2018Test (const Test&amp;)\u2019</p>\n</blockquote>\n<p>Why is that happening? Where in the standard is this behaviour described?</p>\n", "Tags": "<c++><templates><pointers><constructor><member>", "OwnerUserId": "5922757", "AnswerCount": "2"}, "35382425": {"ParentId": "35382083", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your last constructor is a <a href=\"http://en.cppreference.com/w/cpp/language/copy_constructor\" rel=\"nofollow\">copy constructor</a>. It's forbidden to have a copy constructor that passes its parameter by value, as otherwise you'd end up with infinite recursion.</p>\n<p>The error you're getting is similar to</p>\n<pre><code>struct Foo\n{\n    Foo(Foo);\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d5dcf23138f7898d\" rel=\"nofollow\"><kbd>Live on Coliru</kbd></a></p>\n<p>More precisely, according to the standard:</p>\n<p><strong>12.8/2 Copying and moving class objects [class.copy]</strong></p>\n<blockquote>\n<p id=\"so_35382083_35382425_0\">A non-template constructor for class <code>X</code> is a copy constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments (8.3.6). [ Example: <code>X::X(const X&amp;)</code> and <code>X::X(X&amp;,int=1)</code> are copy constructors.</p>\n</blockquote>\n<p>The others constructors/member functions seem ok because they are not instantiated, and the code is syntactically correct (in theory, <code>Test&lt;T&gt;</code> may have a conversion operator to <code>T*</code> for some specialization, and the compiler cannot check that before instantiation). However the copy constructor has to have a definite form, which is being enforced by the compiler.</p>\n", "OwnerUserId": "3093378", "LastEditorUserId": "3093378", "LastEditDate": "2016-02-13T17:17:45.763", "Id": "35382425", "Score": "3", "CreationDate": "2016-02-13T16:37:49.187", "LastActivityDate": "2016-02-13T17:17:45.763"}, "35382838": {"ParentId": "35382083", "CommentCount": "0", "Body": "<p>All of your examples are invalid. You will get a compiler error when you try to <strong>instantiate</strong> any method:</p>\n<pre><code>template &lt;typename T&gt;\nstruct Test {\n    Test* testPtr;\n\n    void testMethod(Test&lt;T&gt; notAPointer) {\n        this-&gt;testPtr = notAPointer;\n    }\n};\n\nint main() {\n    Test&lt;int&gt; t1, t2;\n    t1.testMethod(t2); // This line will cause the error.\n\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_35382083_35382838_0\">prog.cpp: In instantiation of 'void Test::testMethod(Test) [with\n  T = int]': prog.cpp:16:18:   required from here prog.cpp:9:23: error:\n  cannot convert 'Test' to 'Test*' in assignment\n           this-&gt;testPtr = notAPointer;\n                         ^</p>\n</blockquote>\n", "OwnerUserId": "2805305", "PostTypeId": "2", "Id": "35382838", "Score": "1", "CreationDate": "2016-02-13T17:15:08.340", "LastActivityDate": "2016-02-13T17:15:08.340"}, "bq_ids": {"n4140": {"so_35382083_35382425_0": {"section_id": 451, "quality": 0.9, "length": 27}}, "n3337": {"so_35382083_35382425_0": {"section_id": 442, "quality": 0.9, "length": 27}}, "n4659": {"so_35382083_35382425_0": {"section_id": 474, "quality": 0.9, "length": 27}}}});