post_cb({"38721301": {"CommentCount": "0", "ViewCount": "83", "PostTypeId": "1", "LastEditorUserId": "3198895", "CreationDate": "2016-08-02T13:06:50.857", "LastActivityDate": "2016-08-23T13:00:16.953", "Title": "c++ string literal concatenation by juxtaposition", "AcceptedAnswerId": "38721411", "LastEditDate": "2016-08-23T13:00:16.953", "Id": "38721301", "Score": "0", "Body": "<p>The code</p>\n<pre><code>std::string str = \"Hello \" \"world\";\nstd::cout &lt;&lt; str &lt;&lt; std::endl;\n</code></pre>\n<p>compiles and prints <code>Hello world</code>. Similarly,  </p>\n<pre><code>char chr[] = \"abc\" \"def\" \"ghi\";\nstd::cout &lt;&lt; chr &lt;&lt; std::endl;\n</code></pre>\n<p>prints <code>abcdefghi</code>. How and why does this work?</p>\n", "Tags": "<c++><parsing>", "OwnerUserId": "3198895", "AnswerCount": "2"}, "38721349": {"ParentId": "38721301", "CommentCount": "0", "Body": "<p>String literals that are separated by whitespace only are automatically concatenated <a href=\"http://en.cppreference.com/w/c/language/string_literal\" rel=\"nofollow\">see cppreference</a></p>\n", "OwnerUserId": "1912315", "PostTypeId": "2", "Id": "38721349", "Score": "3", "CreationDate": "2016-08-02T13:09:14.570", "LastActivityDate": "2016-08-02T13:09:14.570"}, "bq_ids": {"n4140": {"so_38721301_38721411_0": {"section_id": 5313, "quality": 1.0, "length": 5}}, "n3337": {"so_38721301_38721411_0": {"section_id": 5110, "quality": 1.0, "length": 5}}, "n4659": {"so_38721301_38721411_0": {"section_id": 6737, "quality": 1.0, "length": 5}}}, "38721411": {"ParentId": "38721301", "CommentCount": "0", "Body": "<p>This is behavior covered by [lex.phases]/6</p>\n<blockquote>\n<p id=\"so_38721301_38721411_0\">Adjacent string literal tokens are concatenated.</p>\n</blockquote>\n<p>So before the compiler actually starts to compile the code all string literals that are only separated why white space are concatenated together.</p>\n<pre><code>\"hello \" \"world\";\n\"hello \"                  \"world\";\n\"hello \" \n\"world\";\n</code></pre>\n<p>All produce <code>\"hello world\";</code></p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "38721411", "Score": "5", "CreationDate": "2016-08-02T13:11:49.653", "LastActivityDate": "2016-08-02T13:11:49.653"}});