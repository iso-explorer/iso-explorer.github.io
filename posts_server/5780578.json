post_cb({"5780578": {"CommentCount": "0", "AcceptedAnswerId": "5780629", "CreationDate": "2011-04-25T16:37:07.403", "LastActivityDate": "2011-04-25T16:47:55.663", "PostTypeId": "1", "ViewCount": "4875", "FavoriteCount": "2", "Title": "C++ -- type of the division?", "Id": "5780578", "Score": "8", "Body": "<p>I want to make sure that my understanding of the return type of C++ division,</p>\n<pre><code>int / int =&gt; return is int?\n\nfloat / float =&gt; return is which type? float?\n\ndouble /double =&gt; return is double?\n\nint / double =&gt; return is double?\n\nint / float =&gt; return is float?\n</code></pre>\n<p>Please correct me if I am wrong.</p>\n<p>Thank you</p>\n", "Tags": "<c++>", "OwnerUserId": "391104", "AnswerCount": "6"}, "5780609": {"ParentId": "5780578", "CommentCount": "0", "Body": "<p>You are correct in all cases. The rules for operations involving at least one floating point type are that if either type is a <code>long double</code>, the result is <code>long double</code>; otherwise, if either type is <code>double</code> the result is <code>double</code> otherwise the result has type <code>float</code>.</p>\n<p>Arithmetic operations between two <code>int</code>s produce an <code>int</code> result.</p>\n<p>The rules between other types are slightly more complex and can be implementation dependent; for almost all operations integer promotions mean that the operands are promoted to at least an <code>int</code> sized types producing at least an <code>int</code> sized result.</p>\n", "OwnerUserId": "19563", "PostTypeId": "2", "Id": "5780609", "Score": "1", "CreationDate": "2011-04-25T16:40:26.250", "LastActivityDate": "2011-04-25T16:40:26.250"}, "5780615": {"ParentId": "5780578", "CommentCount": "0", "Body": "<p>The result will be typed (if rule exists) for the assignment.  If you have <code>int x = dY + iZ;</code> Then promotion will cause the addition result to be double, but it will be converted to an int when its assigned to x.  Google \"variable promotion in c++\" for more details.</p>\n", "OwnerUserId": "194725", "PostTypeId": "2", "Id": "5780615", "Score": "0", "CreationDate": "2011-04-25T16:41:13.417", "LastActivityDate": "2011-04-25T16:41:13.417"}, "5780617": {"ParentId": "5780578", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><code>operator/</code> for basic data types (just like most, if not all, operators for basic types) returns the strongest type of its two operands.</p>\n<p>The answer to all of your questions is thus yes.</p>\n<hr>\n<p>In general, floating point types are stronger than integer ones and unsigned are stronger than signed...</p>\n<p>Defining &gt; as \"stronger than\", we can say that:</p>\n<p>long double &gt; double &gt; float &gt; unsigned long &gt; long &gt; unsigned int &gt; int &gt; unsigned short &gt; short &gt; unsigned char &gt; char</p>\n</hr>", "OwnerUserId": "300805", "LastEditorUserId": "300805", "LastEditDate": "2011-04-25T16:47:55.663", "Id": "5780617", "Score": "4", "CreationDate": "2011-04-25T16:41:22.413", "LastActivityDate": "2011-04-25T16:47:55.663"}, "5780628": {"ParentId": "5780578", "CommentCount": "0", "Body": "<p>Roughly speaking, in C++, in any scenario, both operands are converted to the \"largest\" type of the two operands' types before the operation is executed.  See MSDN <a href=\"http://msdn.microsoft.com/en-us/library/09ka8bxx%28v=vs.80%29.aspx\" rel=\"nofollow\">Standard Arithmetic Conversions</a>.</p>\n", "OwnerUserId": "214146", "PostTypeId": "2", "Id": "5780628", "Score": "0", "CreationDate": "2011-04-25T16:42:22.570", "LastActivityDate": "2011-04-25T16:42:22.570"}, "5780629": {"ParentId": "5780578", "CommentCount": "0", "Body": "<p>All of those are correct. Here's what the C++03 standard says (\u00a75/9):</p>\n<blockquote>\n<p id=\"so_5780578_5780629_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a common type, which is also the type of the result. This pattern is called the <em>usual arithmetic conversions</em>, which are defined as follows:</p>\n<ul>\n<li>If either operand is of type <code>long double</code>, the other shall be converted to <code>long double</code>.</li>\n<li>Otherwise, if either operand is <code>double</code>, the other shall be converted to <code>double</code>.</li>\n<li>Otherwise, if either operand is <code>float</code>, the other shall be converted to <code>float</code>.</li>\n<li>Otherwise, the integral promotions (4.5) shall be performed on both operands.</li>\n<li>Then, if either operand is <code>unsigned long</code> the other shall be converted to <code>unsigned long</code>.</li>\n<li>Otherwise, if one operand is a <code>long int</code> and the other <code>unsigned int</code>, then if a <code>long int</code> can represent all the values of an <code>unsigned int</code>, the <code>unsigned int</code> shall be converted to a <code>long int</code>; otherwise both operands shall be converted to <code>unsigned long int</code>.</li>\n<li>Otherwise, if either operand is <code>long</code>, the other shall be converted to <code>long</code>.</li>\n<li>Otherwise, if either operand is <code>unsigned</code>, the other shall be converted to <code>unsigned</code>.</li>\n</ul>\n<p id=\"so_5780578_5780629_1\">[<em>Note:</em> otherwise, the only remaining case is that both operands are <code>int</code>]</p>\n</blockquote>\n", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "5780629", "Score": "8", "CreationDate": "2011-04-25T16:42:25.543", "LastActivityDate": "2011-04-25T16:42:25.543"}, "5780610": {"ParentId": "5780578", "CommentCount": "2", "Body": "<p>Considering only three types (<code>float</code>, <code>double</code> and <code>int</code>):</p>\n<ul>\n<li>If any of the operand is <code>double</code>, then the result will be <code>double</code>.</li>\n<li>Else if any of the operand is <code>float</code>, then the result will be <code>float</code>.</li>\n<li>Else the result will be <code>int</code> .</li>\n</ul>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "5780610", "Score": "1", "CreationDate": "2011-04-25T16:40:28.767", "LastActivityDate": "2011-04-25T16:40:28.767"}, "bq_ids": {"n4140": {"so_5780578_5780629_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}}, "n3337": {"so_5780578_5780629_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}}, "n4659": {"so_5780578_5780629_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}}}});