post_cb({"bq_ids": {"n4140": {"so_20805336_20806026_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 1165}}, "n3337": {"so_20805336_20806026_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 1163}}}, "20806109": {"LastActivityDate": "2013-12-27T20:00:51.237", "CommentCount": "0", "Body": "<p>Per Igor's answer, <code>std::atomic&lt;std::shared_ptr&lt;T&gt;&gt;</code> does not have defined behavior. You need to use <a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr/atomic\" rel=\"nofollow\">the non-member <code>shared_ptr</code> atomic function overloads</a> as detailed in C++11 \u00a720.7.2.5 <code>shared_ptr</code> atomic access [util.smartptr.shared.atomic].</p>\n<pre><code>std::shared_ptr &lt; int &gt; a;\n\nstd::shared_ptr &lt; int &gt; b;\nstd::shared_ptr &lt; int &gt; c = std::make_shared &lt; int &gt; (10);\n\nwhile(std::atomic_compare_exchange_weak(&amp;a, &amp;b, c))\n  ;\n\nassert(std::atomic_load(&amp;a) == c);  \nassert(std::atomic_load(&amp;a).use_count() == 2);\n</code></pre>\n<p>It seems odd to me that the standard does not mandate a partial specialization of <code>template &lt;typename T&gt; struct std::atomic&lt;shared_ptr&lt;T&gt;&gt;</code> to be implemented with these functions.</p>\n<p>I see no mention of the non-member atomic overloads in <a href=\"http://msdn.microsoft.com/en-us/library/k11k2x83.aspx\" rel=\"nofollow\">Microsoft's documentation of the <code>&lt;memory&gt;</code> header</a>, so they may not be implemented in VS2013.</p>\n", "CreationDate": "2013-12-27T18:48:08.657", "LastEditDate": "2013-12-27T20:00:51.237", "ParentId": "20805336", "Id": "20806109", "LastEditorUserId": "923854", "PostTypeId": "2", "Score": "4", "OwnerUserId": "923854"}, "20805336": {"CreationDate": "2013-12-27T17:48:17.603", "ViewCount": "377", "FavoriteCount": "0", "Id": "20805336", "AcceptedAnswerId": "20806026", "Score": "3", "Title": "is compare_exchange_weak for std::shared_ptr broken in msvs 2013?", "LastEditorUserId": "636019", "CommentCount": "3", "Body": "<p>Look at the sample, please</p>\n<pre><code>std::atomic &lt; std::shared_ptr &lt; int &gt; &gt; a;\n\nstd::shared_ptr &lt; int &gt; b;\nstd::shared_ptr &lt; int &gt; c = std::make_shared &lt; int &gt; (10);\n\nwhile(a.compare_exchange_weak(b, c));\n\nassert(a.load() == c);  \nassert(a.load().use_count() == 2); // &lt;- assertion is failed.\n</code></pre>\n<p>What do you think? Is it compiler error?</p>\n<p>Build with msvs 2013 in win32 mode</p>\n", "Tags": "<c++><visual-c++><c++11><visual-studio-2013><atomic>", "LastEditDate": "2013-12-28T08:24:03.750", "LastActivityDate": "2013-12-28T08:24:03.750", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1240657"}, "20806026": {"CommentCount": "0", "Body": "<p>Your program exhibits undefined behavior.</p>\n<blockquote>\n<p id=\"so_20805336_20806026_0\"><strong>29.5/1</strong> There is a generic class template <code>atomic&lt;T&gt;</code>. The type of the template argument <code>T</code> shall be trivially copyable (3.9).</p>\n</blockquote>\n<p><code>shared_ptr&lt;int&gt;</code> is not trivially copyable.</p>\n", "CreationDate": "2013-12-27T18:41:29.450", "ParentId": "20805336", "Id": "20806026", "LastActivityDate": "2013-12-27T18:41:29.450", "PostTypeId": "2", "Score": "7", "OwnerUserId": "1670129"}});