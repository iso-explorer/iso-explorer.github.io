post_cb({"6756197": {"Id": "6756197", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_6756059_6756197_0\">double underlines in identifiers are reserved for the compiler</p>\n</blockquote>\n<p>First, it's <em>underscore</em> I guess. Second such identifiers are reserved. That doesn't hold one back to not use it. You can use it (<strong>until there is no naming conflict</strong>).</p>\n<blockquote>\n<p id=\"so_6756059_6756197_1\">Is this acceptable behavior in C++, covered by the standard?</p>\n</blockquote>\n<p>Yes. It's acceptable. However, there is difference between acceptable and good code. If you are following a proper coding guidelines then your code will be good as well as acceptable. IMHO, you should refer to some good coding standards on internet; it will help you a lot.</p>\n", "LastEditorUserId": "514235", "LastActivityDate": "2011-07-20T02:30:28.583", "Score": "-11", "CreationDate": "2011-07-20T02:00:08.480", "ParentId": "6756059", "CommentCount": "8", "OwnerUserId": "514235", "LastEditDate": "2011-07-20T02:30:28.583"}, "6756078": {"Id": "6756078", "PostTypeId": "2", "Body": "<p>The method call would be OK but why compare HELLO_THERE to some value abc? If you were testing to see if a method was there I would wrap it in #ifdef ... #endif instead because if hello_<em>out</em>_there is not defined for some reason that would be a compile error.</p>\n", "LastActivityDate": "2011-07-20T01:38:55.610", "CommentCount": "0", "CreationDate": "2011-07-20T01:38:55.610", "ParentId": "6756059", "Score": "0", "OwnerUserId": "392046"}, "6756059": {"ViewCount": "1204", "Body": "<p>I understand that in C++ double underscores in identifiers are reserved for the compiler. I have some C code which has characteristics similar to this in the corresponding header files:</p>\n<pre><code>extern \"C\" {\n    #define HELLO__THERE 1\n    int hello__out__there( int );\n}\n</code></pre>\n<p>I will be using this header in a C++ project, and plan to be doing things in C++ like:</p>\n<pre><code>if (HELLO__THERE == abc) \n    hello__out__there(foo);\n</code></pre>\n<p>Is this acceptable behavior in C++, covered by the standard?</p>\n", "AcceptedAnswerId": "6756197", "Title": "C++ using C code using double underscores in defines and identifiers", "CreationDate": "2011-07-20T01:35:42.797", "Id": "6756059", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-06-22T12:03:16.340", "LastEditorUserId": "4370109", "LastActivityDate": "2016-06-22T12:03:16.340", "Score": "1", "OwnerUserId": "809811", "Tags": "<c++><c-preprocessor><reserved-words>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_6756059_6756290_0": {"length": 12, "quality": 0.8, "section_id": 6307}}, "n3337": {"so_6756059_6756290_0": {"length": 12, "quality": 0.8, "section_id": 6064}}, "n4659": {"so_6756059_6756290_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 6756}}}, "6756201": {"Id": "6756201", "PostTypeId": "2", "Body": "<p>You should be fine, unless by some fluke chance that one of the defines has clashes with your compiler's one. If that is the case, it'll likely be a warning or error (depending on your compiler's configuration) that there'll be a duplicate symbol.</p>\n<p>Hope it helps. Cheers!</p>\n", "LastActivityDate": "2011-07-20T02:00:29.423", "CommentCount": "0", "CreationDate": "2011-07-20T02:00:29.423", "ParentId": "6756059", "Score": "2", "OwnerUserId": "722565"}, "6756290": {"Id": "6756290", "PostTypeId": "2", "Body": "<p>In the C++03 standard <code>17.4.3.1.2  Global names</code>, that use of underscores is defined as reserved:</p>\n<blockquote>\n<p id=\"so_6756059_6756290_0\">Each name that <strong>contains</strong> a double underscore (_ _) or begins with an underscore followed by an upper-\n  case letter (2.11) is reserved to the implementation for any use.</p>\n</blockquote>\n<p>Being reserved means that it <em>might</em> be used in any conforming implementation and therefore it is not advisable to use it.</p>\n", "LastActivityDate": "2011-07-20T02:18:15.087", "CommentCount": "0", "CreationDate": "2011-07-20T02:18:15.087", "ParentId": "6756059", "Score": "12", "OwnerUserId": "722973"}});