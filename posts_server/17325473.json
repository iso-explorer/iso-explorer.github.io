post_cb({"17325557": {"Id": "17325557", "PostTypeId": "2", "Body": "<p>What you have is <a href=\"https://stackoverflow.com/questions/8329826/can-standard-container-templates-be-instantiated-with-incomplete-types\">not standards compliant</a> (thanks to @jonathanwakely for confirming that). So it is <em>undefined behaviour</em>, even if it compiles on some popular platforms.</p>\n<p>The <a href=\"http://www.boost.org/doc/libs/1_48_0/doc/html/container/containers_of_incomplete_types.html\" rel=\"nofollow noreferrer\">boost container library</a> has some standard library-like containers that do support this, so you could in principle modify your struct to use one of these:</p>\n<pre><code>#include &lt;boost/container/vector.hpp&gt;\nstruct tnode\n{\n    int data;\n    boost::container::vector&lt;tnode&gt; children;\n    GLfloat x; //x coordinate of node \n    GLfloat y; //y coordinate of node\n};\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-26T16:45:58.787", "Score": "3", "CreationDate": "2013-06-26T16:27:56.640", "ParentId": "17325473", "CommentCount": "8", "OwnerUserId": "661519", "LastEditDate": "2017-05-23T10:25:31.620"}, "bq_ids": {"n4140": {"so_17325473_17325730_0": {"length": 15, "quality": 1.0, "section_id": 6324}}, "n3337": {"so_17325473_17325730_0": {"length": 15, "quality": 1.0, "section_id": 6081}}, "n4659": {"so_17325473_17325730_0": {"length": 15, "quality": 1.0, "section_id": 7834}}}, "17325473": {"ViewCount": "179", "Body": "<p>I am trying to create a struct that includes a vector with type being that same struct. However, when I build, errors that indicate I am missing a ';' before '&gt;' appear. I am not sure if the compiler is even recognizing that the vector as a thing :/ and I have already included  in my code. Here is what I have so far:</p>\n<pre><code>#include &lt;vector&gt;\n\ntypedef struct tnode\n{\n    int data;\n    vector&lt;tnode&gt; children;\n    GLfloat x; //x coordinate of node \n    GLfloat y; //y coordinate of node\n} tnode;\n</code></pre>\n<p>Any help would be greatly appreciated!!</p>\n", "AcceptedAnswerId": "17325730", "Title": "How do I declare a vector of a struct within that same struct?", "CreationDate": "2013-06-26T16:23:06.730", "Id": "17325473", "CommentCount": "1", "LastEditDate": "2013-06-26T16:23:59.273", "PostTypeId": "1", "LastEditorUserId": "701092", "LastActivityDate": "2013-06-26T18:05:48.333", "Score": "4", "OwnerUserId": "2502366", "Tags": "<c++><vector><struct>", "AnswerCount": "2"}, "17325730": {"Id": "17325730", "PostTypeId": "2", "Body": "<p>Your code is invoking undefined behavior because standard containers such as <code>vector</code> cannot contain incomplete types, and <code>tnode</code> is an incomplete type within the struct definition. According to the C++11 standard, 17.6.4.8p2:</p>\n<blockquote>\n<p id=\"so_17325473_17325730_0\">the effects are undefined in the following cases: [...] if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>The <a href=\"http://www.boost.org/doc/libs/1_53_0/doc/html/container/containers_of_incomplete_types.html\" rel=\"nofollow\">Boost.Container library</a> provides alternative containers (including <code>vector</code>) which can contain incomplete types. Recursive data types such as the one you want are given as a use case of this.</p>\n<p>The following would work with Boost.Container:</p>\n<pre><code>#include &lt;boost/container/vector.hpp&gt;\nstruct tnode\n{\n    int data;\n\n    //tnode is an incomplete type here, but that's allowed with Boost.Container\n    boost::container::vector&lt;tnode&gt; children;\n\n    GLfloat x; //x coordinate of node \n    GLfloat y; //y coordinate of node\n};\n</code></pre>\n", "LastEditorUserId": "189205", "LastActivityDate": "2013-06-26T17:13:51.357", "Score": "6", "CreationDate": "2013-06-26T16:36:08.393", "ParentId": "17325473", "CommentCount": "6", "OwnerUserId": "189205", "LastEditDate": "2013-06-26T17:13:51.357"}});