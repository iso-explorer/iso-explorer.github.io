post_cb({"16257059": {"ParentId": "16256899", "CommentCount": "3", "CreationDate": "2013-04-27T21:31:52.020", "OwnerUserId": "1180785", "PostTypeId": "2", "Id": "16257059", "Score": "0", "Body": "<p>There are several options for you.</p>\n<p>Option 1: Pass a dictionary-like object:</p>\n<pre><code>struct myParameters {\n    int a,b,c;\n    myParameters( ) : a(3), b(4), c(5) {}\n}\nvoid myFunction( const myParameters &amp;p ) {\n    int a = p.a;\n    int b = p.b;\n    int c = p.c;\n    // stuff\n}\n\nmyParameters t;\nt.a = 3;\nt.c = 7;\nmyFunction( myParameters );\n</code></pre>\n<p>Option 2: Use otherwise nonsensical values to denote defaults:</p>\n<pre><code>#define DEFAULT -1;\nvoid myFunction( int a = DEFAULT, int b = DEFAULT, int c = DEFAULT ) {\n    if( a == DEFAULT ) { a = 3; }\n    if( b == DEFAULT ) { b = 4; }\n    if( c == DEFAULT ) { c = 5; }\n    // stuff\n}\n</code></pre>\n<p>(but of course you can't pass <code>-1</code> as an actual value; you could use <code>INT_MAX</code> or something else too)</p>\n<p>Option 3: Use overloading and an enum (could get messy):</p>\n<pre><code>enum NoVal {\nDEFAULT\n};\nvoid myFunction( int a = 3, int b = 4, int c = 5 ) {\n    // stuff\n}\nvoid myFunction( int a = 3, NoVal, int c = 5 ) {\n    return myFunction( a, 4, c );\n}\nvoid myFunction( NoVal, int b = 4, int c = 5 ) {\n    return myFunction( 3, b, c );\n}\nvoid myFunction( NoVal, NoVal, int c = 5 ) {\n    return myFunction( 3, 4, c );\n}\n\nmyFunction( 10, DEFAULT, 2 );\n</code></pre>\n<p>Option 4: Adjust your function so that the parameters are in a more logical order.</p>\n", "LastActivityDate": "2013-04-27T21:31:52.020"}, "16257066": {"ParentId": "16256899", "CommentCount": "5", "CreationDate": "2013-04-27T21:32:51.057", "OwnerUserId": "1784267", "PostTypeId": "2", "Id": "16257066", "Score": "0", "Body": "<p>You can simply do something like that</p>\n<pre><code>#define DEF 0\nvoid func(int *a, int *b, int *c) {\n  if (a) *a = 5;\n  if (b) *b = 2;\n  if (c) *c = 3;\n}\n</code></pre>\n<p>And call it that way:</p>\n<pre><code>int x = 9;\nint y = 10;\nfunc(&amp;x, DEF, &amp;y);\n</code></pre>\n", "LastActivityDate": "2013-04-27T21:32:51.057"}, "16257056": {"ParentId": "16256899", "CommentCount": "0", "CreationDate": "2013-04-27T21:31:40.583", "OwnerUserId": "906773", "PostTypeId": "2", "Id": "16257056", "Score": "0", "Body": "<p>As a suggestion: <a href=\"http://www.boost.org/doc/libs/1_53_0/libs/parameter/doc/html/index.html#parameter-enabled-functions\" rel=\"nofollow\">Boost Parameter</a></p>\n<pre><code>#include &lt;boost/parameter/name.hpp&gt;\n#include &lt;boost/parameter/preprocessor.hpp&gt;\n\nBOOST_PARAMETER_NAME(a)    \nBOOST_PARAMETER_NAME(b)\nBOOST_PARAMETER_NAME(c)\n\nBOOST_PARAMETER_FUNCTION((void),\n                         func,\n                         tag,\n                         (optional            \n                          (a, *, 5)\n                          (b, *, 2)\n                          (c, *, 3)))\n{\n}\nint main()\n{\n    func(_a = 5, _c = 3);\n}\n</code></pre>\n", "LastActivityDate": "2013-04-27T21:31:40.583"}, "16256996": {"ParentId": "16256899", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2013-04-27T21:23:28.790", "Score": "2", "LastEditorUserId": "1227469", "LastEditDate": "2013-04-27T21:39:35.907", "Id": "16256996", "OwnerUserId": "1227469", "Body": "<p>C++ does not support the following kind of syntax:</p>\n<pre><code>func(1, , 2);\n</code></pre>\n<p>This means that only the right-most parameters that you omit can take default values.</p>\n<p>If you want to be able to have default parameters in arbitrary combinations, you could consider using <a href=\"http://www.boost.org/doc/libs/1_53_0/libs/optional/doc/html/index.html\" rel=\"nofollow\"><code>boost::optional</code></a>:</p>\n<pre><code>#include &lt;boost/optional.hpp&gt;\n#include &lt;iostream&gt;\n\ntypedef boost::optional&lt;int&gt; OptionalInt;\ntypedef boost::optional&lt;int&gt; Default;\n\nvoid func(OptionalInt a, OptionalInt b, OptionalInt c)\n{\n   if (!a) a = 5;\n   if (!b) b = 2;\n   if (!c) c = 3;\n   std::cout &lt;&lt; *a &lt;&lt; std::endl;\n   std::cout &lt;&lt; *b &lt;&lt; std::endl;\n   std::cout &lt;&lt; *c &lt;&lt; std::endl;\n}\n\nint main()\n{\n   func(1, Default(), 1);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>1\n2\n1\n</code></pre>\n", "LastActivityDate": "2013-04-27T21:39:35.907"}, "16256919": {"ParentId": "16256899", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2013-04-27T21:13:24.157", "Score": "1", "LastEditorUserId": "1760345", "LastEditDate": "2013-04-27T21:53:53.213", "Id": "16256919", "OwnerUserId": "1760345", "Body": "<p>According to the C++ 11 standard (N3485): 8.3.6 [dcl.fct.default]</p>\n<blockquote>\n<p id=\"so_16256899_16256919_0\">For non-template functions, default arguments can be added in later declarations of a function in the same scope.\n  Examples from the standards:</p>\n<p id=\"so_16256899_16256919_1\">void f(int, int)</p>\n<p id=\"so_16256899_16256919_2\">void f(int, int = 7); //OK</p>\n</blockquote>\n<p>So the rule is that you have to specify default arguments from the right to the left of the parameter list. You cannot only specify default value to <code>a</code> without specifying the <code>b</code> and <code>c</code> before that:</p>\n<pre><code>void func(int a = 10, int b, int c); //ERROR\n</code></pre>\n<p>However,you may try the following:</p>\n<pre><code>void func(int a,int b, int c=3); //set default for c at first\nvoid func(int a,int b = 5, int c);  //at later declarations, set for b\nvoid func(int a =10, int b, int c);//at even later declarations, set for a\n</code></pre>\n<p>With the above, you can call the function as follows:</p>\n<pre><code>func(20); //call use default value of b and c\nfunc(15,20); //call use default value of c\nfunc(10,20,30); //do not use default value\nfunc(); // use default values for a, b and c\n</code></pre>\n<p>So you can use default values of <code>b</code> and <code>c</code> at the same time as you like, or use <code>c</code> only, but you cannot call <code>func</code> by using default value of <code>b</code> only since it is the middle of the parameter list, similarly, you cannot call <code>func</code> using default value of <code>a</code> only. This way, you only add declarations and do not have redundant code. However, you can not really call them such that they can use default values in arbitrary way.</p>\n<p>You can find a live example here <a href=\"http://ideone.com/IC9eiY#view_edit_box\" rel=\"nofollow\">default arguments example</a></p>\n", "LastActivityDate": "2013-04-27T21:53:53.213"}, "bq_ids": {"n4140": {"so_16256899_16256919_0": {"section_id": 3255, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_16256899_16256919_0": {"section_id": 3127, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_16256899_16256919_0": {"section_id": 4013, "quality": 0.7857142857142857, "length": 11}}}, "16256899": {"CommentCount": "10", "ViewCount": "105", "CreationDate": "2013-04-27T21:11:27.367", "LastActivityDate": "2013-04-27T21:53:53.213", "Title": "using particular default parameters for a func", "AcceptedAnswerId": "16256996", "PostTypeId": "1", "Id": "16256899", "Score": "3", "Body": "<p>If I am having the following function defination. On calling I wish pass values just for a and c and use the default value for b how will I call this function</p>\n<pre><code>void func(int a=5,int b=2, int c=3)\n{\n..........\n.........\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "2321710", "AnswerCount": "5"}});