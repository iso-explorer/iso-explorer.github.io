post_cb({"43432270": {"ParentId": "43432185", "CommentCount": "0", "Body": "<p>8.5/15-16:</p>\n<blockquote>\n<p id=\"so_43432185_43432270_0\">The initialization that occurs in the <code>=</code> form of a <em>brace-or-equal-initializer</em> or <em>condition</em>, as well as ..., is called <em>copy-initialization</em>.</p>\n<p id=\"so_43432185_43432270_1\">The initialization that occurs in the forms</p>\n</blockquote>\n<pre><code>T x(a);\nT x{a};\n</code></pre>\n<blockquote>\n<p id=\"so_43432185_43432270_2\">as well as ... is called <em>direct-initialization</em>.</p>\n</blockquote>\n<p>So <code>R r1 = s;</code> is copy-initialization, and <code>R r2(s);</code> is direct-initialization.  On to paragraph 17:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_43432185_43432270_3\">If the destination type is a (possibly cv-qualified) class type:</p>\n<ul>\n<li><p id=\"so_43432185_43432270_4\">If the initialization is direct-initialization, or if it is copy-initialization where the cv-unqualified version of the source type is the same class as, or a derived class of, the class of the destination, constructors are considered.  The applicable constructors are enumerated (13.3.1.3) and the best one is chosen through overload resolution (13.3).</p></li>\n<li><p id=\"so_43432185_43432270_5\">Otherwise (i.e., for the remaining copy-initialization cases), user-defined conversion sequences that can convert from the source type to the destination type or (when a conversion function is used) to a derived class thereof are enumerated as described in 13.3.1.4, and the best one is chosen through overload resolution (13.3).</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>So direct-initialization looks at all the constructors of <code>R</code> and ends up being ambiguous, while copy-initialization explicitly tries to convert the expression to <code>R</code> directly and succeeds.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "43432270", "Score": "2", "CreationDate": "2017-04-15T23:33:58.757", "LastActivityDate": "2017-04-15T23:33:58.757"}, "43432185": {"CommentCount": "4", "ViewCount": "54", "CreationDate": "2017-04-15T23:19:17.180", "LastActivityDate": "2017-04-15T23:33:58.757", "Title": "What are the rules for template conversion operator type deduction in initializations?", "AcceptedAnswerId": "43432270", "PostTypeId": "1", "Id": "43432185", "Score": "3", "Body": "<p>Consider this code:</p>\n<pre><code>struct S\n{\n    template &lt;typename T&gt;\n    operator T() const\n    { return {}; }\n};\n\nstruct R\n{\n    R() = default;\n    R(const R&amp;) = default;\n    R(R&amp;&amp;) = default;\n    R(bool) {}\n};\n</code></pre>\n<p>Where on the <a href=\"http://eel.is/c++draft/temp.deduct.conv\" rel=\"nofollow noreferrer\">standard</a> are the rules defined for the following behaviors?</p>\n<pre><code>S s;\nR r1 = s; // (1) passes: T = R\nR r2(s);  // (2) ambiguity: T = R or bool?\n</code></pre>\n<p>Why doesn't (1) cause an ambiguity issue (given that <code>R</code> could be initialized by <code>bool</code> as well)? I've recently written an answer for a similar question, but I'm curious to why (1) doesn't behave like (2) in this context, and I don't know where it is described on the standard either.</p>\n", "Tags": "<c++><templates><language-lawyer><conversion-operator>", "OwnerUserId": "3646096", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43432185_43432270_4": {"section_id": 3296, "quality": 0.8888888888888888, "length": 24}, "so_43432185_43432270_5": {"section_id": 3296, "quality": 0.9310344827586207, "length": 27}, "so_43432185_43432270_0": {"section_id": 3294, "quality": 0.5555555555555556, "length": 5}, "so_43432185_43432270_3": {"section_id": 3296, "quality": 1.0, "length": 6}}, "n3337": {"so_43432185_43432270_4": {"section_id": 3166, "quality": 0.8888888888888888, "length": 24}, "so_43432185_43432270_5": {"section_id": 3166, "quality": 0.9310344827586207, "length": 27}, "so_43432185_43432270_0": {"section_id": 3164, "quality": 0.5555555555555556, "length": 5}, "so_43432185_43432270_3": {"section_id": 3166, "quality": 1.0, "length": 6}}, "n4659": {"so_43432185_43432270_4": {"section_id": 4058, "quality": 0.8888888888888888, "length": 24}, "so_43432185_43432270_3": {"section_id": 4058, "quality": 1.0, "length": 6}, "so_43432185_43432270_5": {"section_id": 4058, "quality": 0.9310344827586207, "length": 27}, "so_43432185_43432270_0": {"section_id": 4056, "quality": 0.7777777777777778, "length": 7}}}});