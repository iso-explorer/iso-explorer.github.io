post_cb({"bq_ids": {"n4140": {"so_39591067_39591067_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 3487}}, "n3337": {"so_39591067_39591067_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 3352}}, "n4659": {"so_39591067_39591067_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 4250}}}, "39592308": {"Id": "39592308", "PostTypeId": "2", "Body": "<p>Looks like boost was compiled with pre-C++11 <code>std::basic_string</code>, whereas your code is compiled with C++11 <code>std::basic_string</code>. </p>\n<p>Try re-compiling your code with <code>-D_GLIBCXX_USE_CXX11_ABI=0</code> compiler command line option. See <a href=\"http://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/\" rel=\"noreferrer\">GCC5 and the C++11 ABI</a> for more details:</p>\n<blockquote>\n<p id=\"so_39591067_39592308_0\">In most cases, it will be obvious when this flag is needed because of errors from the linker complaining about unresolved symbols involving <code>__cxx11</code>.</p>\n</blockquote>\n", "LastActivityDate": "2016-09-20T10:58:48.260", "CommentCount": "0", "CreationDate": "2016-09-20T10:58:48.260", "ParentId": "39591067", "Score": "6", "OwnerUserId": "412080"}, "39591067": {"ViewCount": "928", "Body": "<p>I have this file</p>\n<pre><code>#include &lt;boost/program_options.hpp&gt;\nnamespace po = boost::program_options;\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main(int ac, char* av[])\n{\n    try {\n\n    po::options_description desc(\"Allowed options\");\n        desc.add_options()\n            (\"help\", \"produce help message\")\n        ;\n\n    }\n    catch(exception&amp; e) {\n        cerr &lt;&lt; \"error: \" &lt;&lt; e.what() &lt;&lt; \"\\n\";\n        return 1;\n    }\n    catch(...) {\n        cerr &lt;&lt; \"Exception of unknown type!\\n\";\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Now I am trying to compile like this: </p>\n<blockquote>\n<p id=\"so_39591067_39591067_0\">g++ -I /usr/include/boost/ -I /usr/include/boost/program_options\n  main.cpp -L /usr/lib/x86_64-linux-gnu/ -lboost_program_options</p>\n</blockquote>\n<p>and I am receiving this</p>\n<blockquote>\n<p id=\"so_39591067_39591067_1\">undefined reference to\n  `boost::program_options::options_description::options_description(std::__cxx11::basic_string, std::allocator &gt; const&amp;, unsigned int,\n  unsigned int)'</p>\n</blockquote>\n<p>I don't know why it is failing, the library is there and the header file too. What goes wrong? I am using boost 1.55.0</p>\n<pre><code>administrator@administrator-VirtualBox:~/l/b$ sudo updatedb\nadministrator@administrator-VirtualBox:~/l/b$ locate libboost_program_options\n/usr/lib/x86_64-linux-gnu/libboost_program_options.a\n/usr/lib/x86_64-linux-gnu/libboost_program_options.so\n/usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.55.0\n</code></pre>\n", "AcceptedAnswerId": "39592308", "Title": "undefined reference to boost::program_options in xubuntu", "CreationDate": "2016-09-20T09:57:40.990", "Id": "39591067", "CommentCount": "3", "LastEditDate": "2016-09-20T10:51:42.990", "PostTypeId": "1", "LastEditorUserId": "270661", "LastActivityDate": "2016-09-20T10:58:48.260", "Score": "2", "OwnerUserId": "270661", "Tags": "<c++><c++11><boost>", "AnswerCount": "1"}});