post_cb({"41966731": {"CommentCount": "6", "AcceptedAnswerId": "41967148", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-01-31T20:17:18.837", "LastActivityDate": "2017-01-31T21:12:35.283", "LastEditDate": "2017-05-23T12:24:25.080", "ViewCount": "882", "FavoriteCount": "3", "Title": "Does my Return Type Need to be Defined?", "Id": "41966731", "Score": "13", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/language/class#Forward_declaration\" rel=\"nofollow noreferrer\">Forward declaration</a> lets us postpone defining an actual type till the implementation file. This is allowed in the header for pointers or references to a forward declared type.</p>\n<p><a href=\"https://stackoverflow.com/questions/41964745/is-there-a-necessity-for-private-static-methods?noredirect=1#comment71111120_41964745\">I have been told</a> that:</p>\n<blockquote>\n<p id=\"so_41966731_41966731_0\">Returning by value does not require the type definition. A forward declaration is sufficient</p>\n</blockquote>\n<p>Can someone confirm or deny this with an actual quote from the standard? I was under the impression that this was not legal.</p>\n", "Tags": "<c++><return-value><language-lawyer><return-type><forward-declaration>", "OwnerUserId": "2642059", "AnswerCount": "1"}, "41967148": {"ParentId": "41966731", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2017-01-31T20:44:30.600", "Score": "25", "LastEditorUserId": "2079303", "LastEditDate": "2017-01-31T21:12:35.283", "Id": "41967148", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_41966731_41967148_0\">Returning by value does not require the type definition. A forward declaration is sufficient</p>\n</blockquote>\n<p>Declaring a function that returns by value does not require the type definition. A well-formed demo:</p>\n<pre><code>struct S;\nS foo();\nstruct S {};\nint main() {\n    foo();\n}\nS foo() {}\n</code></pre>\n<p>Defining or calling a function that returns by value does require the type definition. Standard draft <a href=\"http://eel.is/c++draft/basic.def.odr#5\" rel=\"noreferrer\">[basic.def.odr]</a>: </p>\n<blockquote>\n<p id=\"so_41966731_41967148_1\">5 Exactly one definition of a class is required in a translation unit if the class is used in a way that requires the class type to be complete. [\u2009Example: ... [snip] ... [\u2009Note: The rules for declarations and expressions describe in which contexts complete class types are required. <strong>A class type T must be complete if</strong>:</p>\n<ul>\n<li>[snip]</li>\n<li>5.9 a function with a return type or argument type of type T is defined ([basic.def]) or called ([expr.call]), or </li>\n<li>[snip]</li>\n</ul>\n</blockquote>\n<p>The declaration of a function with incomplete return type is implicitly allowed by virtue of not being forbidden by any of the rules in the list.</p>\n<p>The rule is re-worded later in the standard, and it is relaxed by an exception <a href=\"http://eel.is/c++draft/dcl.fct#11\" rel=\"noreferrer\">[dcl.fct]</a> (thanks to @cpplearner for pointing this rule out):</p>\n<blockquote>\n<p id=\"so_41966731_41967148_2\">11 Types shall not be defined in return or parameter types. The type of a parameter or the return type for a function definition shall not be an incomplete (possibly cv-qualified) class type in the context of the function definition unless the function is deleted ([dcl.fct.def.delete]).</p>\n</blockquote>\n<hr>\n<p>An ill-formed demo:</p>\n<pre><code>struct S;\nS foo(){} // oops\nstruct S {};\n</code></pre>\n<p>Another ill-formed demo:</p>\n<pre><code>struct S;\nS foo();\nint main() {\n    foo(); // oops\n}\nstruct S {};\nS foo() {}\n</code></pre>\n</hr>", "LastActivityDate": "2017-01-31T21:12:35.283"}, "bq_ids": {"n4140": {"so_41966731_41967148_1": {"section_id": 7042, "quality": 0.8666666666666667, "length": 26}, "so_41966731_41967148_2": {"section_id": 3245, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_41966731_41967148_1": {"section_id": 6787, "quality": 0.8666666666666667, "length": 26}, "so_41966731_41967148_2": {"section_id": 3118, "quality": 0.6521739130434783, "length": 15}}, "n4659": {"so_41966731_41967148_1": {"section_id": 8539, "quality": 0.8666666666666667, "length": 26}, "so_41966731_41967148_2": {"section_id": 4003, "quality": 0.9130434782608695, "length": 21}}}});