post_cb({"31626326": {"ParentId": "31625914", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-25T12:13:01.677", "Score": "2", "LastEditorUserId": "3647361", "LastEditDate": "2015-07-25T12:21:07.180", "Id": "31626326", "OwnerUserId": "3647361", "Body": "<p>\u00a71.3.22 defines the signature of a function template:</p>\n<blockquote>\n<p id=\"so_31625914_31626326_0\"><strong>signature</strong> <br> <code>&lt;</code>class member function template<code>&gt;</code> name, parameter type list (8.3.5), class of which the function is a member,\n  cv-qualifiers (if any), ref-qualifier (if any), return type, and\n  template parameter list</br></p>\n</blockquote>\n<p>The template parameter list does not include the default arguments given. For <code>A::foo</code>, the template parameters are not equivalent (a term precisely defined in \u00a714.5.6.1). In <code>B::foo</code>, they are. You're simply declaring the same function template with different default arguments - and thereby violate both \u00a79.2/1 and \u00a714.1/12. </p>\n<p>This is a common problem when overloading function templates solely by a condition for <code>enable_if</code>. In particular for constructors, where you can't place the <code>enable_if</code> part in the return value. </p>\n", "LastActivityDate": "2015-07-25T12:21:07.180"}, "31626013": {"ParentId": "31625914", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-07-25T11:30:58.090", "Score": "3", "LastEditorUserId": "2684539", "LastEditDate": "2015-07-25T11:34:50.470", "Id": "31626013", "OwnerUserId": "2684539", "Body": "<p>In <code>class B</code>, both <code>foo</code> have same signature (even if they are different default value):</p>\n<pre><code>template &lt;typename U, typename Dummy&gt;\nvoid foo();\n</code></pre>\n<p>So the error for class B.</p>\n<p>In class A, the type are literally different (even if they both ends to <code>void</code>)</p>\n", "LastActivityDate": "2015-07-25T11:34:50.470"}, "31625914": {"CommentCount": "1", "ViewCount": "84", "PostTypeId": "1", "LastEditorUserId": "293195", "CreationDate": "2015-07-25T11:18:30.547", "LastActivityDate": "2015-07-25T12:21:07.180", "Title": "SFINAE for class member function (one compiles the other not)", "FavoriteCount": "1", "LastEditDate": "2015-07-25T12:08:41.977", "Id": "31625914", "Score": "1", "Body": "<p>Why is <code>class A</code> compiling and <code>class B</code> not compiling, where the compiler complains about having two declarations, are not both relying on SFINAE? \nBoth should actually use template type deduction when using <code>foo</code>?</p>\n<p>So the question really is, whats the subtle different in these two version \nand why is <code>class A</code> successfully using sfinae...?</p>\n<ul>\n<li>Class A uses a <strong>value-defaulted</strong> (zero) <em>annonymous</em> (not necessary) <strong>non-type</strong>\ntemplate parameter </li>\n<li>Class B uses a <strong>type-defaulted</strong> (with enable_if) <em>annonymous</em> <strong>type</strong> template parameter</li>\n</ul>\n<p>The code:</p>\n<pre><code>template&lt;typename T&gt;\nstruct A\n{\n\n    template&lt;typename U, \n             typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value&gt;::type * = nullptr\n            &gt;\n    void foo() {}\n\n    template&lt;typename U, \n             typename std::enable_if&lt;std::is_floating_point&lt;U&gt;::value&gt;::type * = nullptr\n            &gt;\n    void foo() {}\n};\n\ntemplate&lt;typename T&gt;\nstruct B\n{\n\n    template&lt;typename U, \n             typename = typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value&gt;::type\n            &gt;\n    void foo() {}\n\n    template&lt;typename U, \n             typename = typename std::enable_if&lt;std::is_floating_point&lt;U&gt;::value&gt;::type\n            &gt;\n    void foo() {}\n};\n</code></pre>\n<p>Live code at: <a href=\"http://coliru.stacked-crooked.com/a/40ec5efc7ba2a47c\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/40ec5efc7ba2a47c</a></p>\n", "Tags": "<c++><templates><c++11><sfinae>", "OwnerUserId": "293195", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31625914_31626326_0": {"section_id": 5768, "quality": 0.9, "length": 18}}, "n3337": {"so_31625914_31626326_0": {"section_id": 5541, "quality": 0.9, "length": 18}}, "n4659": {"so_31625914_31626326_0": {"section_id": 7225, "quality": 0.9, "length": 18}}}});