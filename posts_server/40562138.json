post_cb({"40562444": {"PostTypeId": "2", "ParentId": "40562138", "Body": "<p>I guess that what is your would code,</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n    int x =9;\n\n    /* add &amp; before x */\n    int *pts = &amp;x;\n\n    printf(\"%d\",*pts);\n    return  0;\n}\n</code></pre>\n", "CreationDate": "2016-11-12T11:34:27.720", "Score": "1", "CommentCount": "0", "Id": "40562444", "OwnerUserId": "4831337", "LastActivityDate": "2016-11-12T11:34:27.720"}, "40562138": {"LastEditDate": "2016-11-12T11:08:07.060", "Body": "<p>I created a simple program to understand the behavior of pointers. I tried this program to understand the behavior of pointers, but it produces a segmentation fault.</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n    int x =9;\n\n    /* what is meaning of this line when &amp; operator is not used*/\n    int *pts = x;\n\n    printf(\"%d\",*pts);\n    return  0;\n}\n</code></pre>\n<p>Why does the segmentation fault occur? I tried to know behavior of the program.</p>\n", "CreationDate": "2016-11-12T10:59:46.270", "Score": "-3", "CommentCount": "4", "OwnerUserId": "7149467", "Title": "What is reason behind segmentation fault in this program?", "LastActivityDate": "2016-11-12T11:34:27.720", "PostTypeId": "1", "Tags": "<c++><c>", "AnswerCount": "4", "FavoriteCount": "1", "Id": "40562138", "ViewCount": "65", "LastEditorUserId": "52724"}, "bq_ids": {"n3337": {"so_40562138_40562323_2": {"quality": 0.5333333333333333, "length": 16, "section_id": 36}}}, "40562207": {"PostTypeId": "2", "ParentId": "40562138", "Body": "<p>You set the address of the pointer pts to an invalid address (as stated by Keine Lust). When the system tries to dereference the pointer (access the value of the destination), it fails and yields a segmentation fault. The operator <code>&amp;</code> returns the address of a variable which can be used by a pointer.</p>\n", "CreationDate": "2016-11-12T11:07:27.947", "Score": "0", "CommentCount": "0", "Id": "40562207", "OwnerUserId": "4771032", "LastActivityDate": "2016-11-12T11:07:27.947"}, "40562323": {"PostTypeId": "2", "ParentId": "40562138", "Body": "<p>The C11 standard says that (6.3.2.3 Pointers):</p>\n<blockquote>\n<p id=\"so_40562138_40562323_0\">An integer may be converted to any pointer type. Except as previously specified, the result is implementation-defined, <strong>might not be correctly aligned, might not point to an entity of the referenced type, and might be a trap representation</strong>.</p>\n</blockquote>\n<p>Emphasis is mine; it explains why you get a segmentation fault. You convert an arbitrary value to a pointer, and the result doesn't point at an object; dereferencing it causes undefined behaviour.</p>\n<p>A footnote attached to  this paragraph explains:</p>\n<blockquote>\n<p id=\"so_40562138_40562323_1\">The mapping functions for converting a pointer to an integer or an integer to a pointer are intended to be consistent with the addressing structure of the execution environment.</p>\n</blockquote>\n<p>The \"except as previously noted\" refers to:</p>\n<blockquote>\n<p id=\"so_40562138_40562323_2\">An integer constant expression with the value 0, or such an expression cast to type void *, is called a null pointer constant. 66) If a null pointer constant is converted to a pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal to a pointer to any object or function.</p>\n</blockquote>\n", "CreationDate": "2016-11-12T11:21:22.660", "Score": "2", "CommentCount": "0", "Id": "40562323", "OwnerUserId": "388661", "LastActivityDate": "2016-11-12T11:21:22.660"}, "40562228": {"PostTypeId": "2", "ParentId": "40562138", "Body": "<blockquote>\n<p id=\"so_40562138_40562228_0\">/* what is meaning of this line when &amp; operator is not used*/</p>\n<p id=\"so_40562138_40562228_1\">int *pts = x;</p>\n</blockquote>\n<p>It means that you initialize the pointer with the value of <code>x</code> (which is 9 in your program).</p>\n<blockquote>\n<p id=\"so_40562138_40562228_2\">Why does the segmentation fault occur? </p>\n</blockquote>\n<p>Because <code>9</code> isn't a legal pointer value that can be dereferenced. So <code>*pts</code> causes the segmentation fault.</p>\n", "CreationDate": "2016-11-12T11:10:00.043", "Score": "2", "CommentCount": "0", "Id": "40562228", "OwnerUserId": "4386427", "LastActivityDate": "2016-11-12T11:10:00.043"}});