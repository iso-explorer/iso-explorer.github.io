post_cb({"44880718": {"ParentId": "44880658", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The left operand of the assignment operator should be an lvalue.<br>\nThe expression <code>++a</code> is an lvalue while <code>a++</code> is not and therefore it can't be the left operand of the assignment operator.  </br></p>\n<p>n3797-\u00a7 5.3.3(p1):</p>\n<blockquote>\n<p id=\"so_44880658_44880718_0\">[...] The result is the updated operand; it is an lvalue [...]</p>\n</blockquote>\n", "OwnerUserId": "2455888", "LastEditorUserId": "2455888", "LastEditDate": "2017-07-03T10:57:51.630", "Id": "44880718", "Score": "0", "CreationDate": "2017-07-03T08:15:47.183", "LastActivityDate": "2017-07-03T10:57:51.630"}, "44881036": {"ParentId": "44880658", "CommentCount": "0", "Body": "<pre><code>int main(){\n int a = 10;\n ++a = 20; // works\n printf(\"a = %d\", a);\n getchar();\n return 0;\n}\n</code></pre>\n<p>This is a c Language.\nExplaining Line by line\n<strong>int main()</strong> THIS line define an entry function called main which is expected to return a type integer(int)\nint a = 10 declares a variable integer whose value is 10;\n++a = 20; AT this point your code is incrementing the value of a by 1 before any operation is performed on a.\nThis means that, the value of a is incremented by 1 bfore a is assign the value of 20;....\nthe statement ++a = 20 is incorect in the sense that, a is 10 initially, and you increment it to 11 . Is like saying 11 = 20; this may not throw an error because the code line is not useful.\nprintf() is a c-method to print file to screen, passing a string \"a = %d\" tells the compiler to print a to a decimal number(%d).\ngetchar() is use to terminate the running program and return 0 is to forcefully tell the operating system that the code run successfully and return integer value 0.</p>\n<pre><code>int main(){\n    int a = 10;\n    a++ = 20; // error \n    printf(\"a = %d\", a);\n    getchar();\n    return 0;\n }\n</code></pre>\n<p>This didn't at a++ = 20 because , right value increment perform the operation before it increment unlike ++a who increment before performing operation.\nSo this isn't possible and it never works because a is already 10, and you are saying the value ++ and assign 20, you can't assign a value to it, it should be the one calculating its own value. So the compiler will want to interprete is as variable a++ = 20, and ++ can not be a vaiable name. That's why it never work.</p>\n<p>What is the essence of incrementation and decrementation in c....its useful for creating conditional statement e.g for loop, while statement etc. for example:</p>\n<pre><code>for(int i = 0; i &lt; 4; i++)\n{\nprintf('THis is c-language');\n}\n</code></pre>\n<p>or </p>\n<pre><code>int i = 0;\nwhile(i &lt; 4){\nprintf('THis is c-Language');\ni++;\n}\n</code></pre>\n<p>so therefore, following the programming rules and regulations, you are not allow to assign value to either a++ or ++a\nthey are for the compilers to manipulate, so never assign value to them.\nThank you.</p>\n", "OwnerUserId": "7575288", "PostTypeId": "2", "Id": "44881036", "Score": "1", "CreationDate": "2017-07-03T08:34:59.957", "LastActivityDate": "2017-07-03T08:34:59.957"}, "44880658": {"CommentCount": "6", "ViewCount": "84", "PostTypeId": "1", "LastEditorUserId": "3716664", "CreationDate": "2017-07-03T08:12:30.640", "LastActivityDate": "2017-07-03T10:57:51.630", "Title": "Not able to understand the working of Pre-increment/ Pre-decrement in C++", "FavoriteCount": "0", "LastEditDate": "2017-07-03T08:15:05.987", "Id": "44880658", "Score": "1", "Body": "<p>Can someone please explain what is happening in the following code? (Taken from GeeksForGeeks)</p>\n<pre><code>int main(){\n int a = 10;\n ++a = 20; // works\n printf(\"a = %d\", a);\n getchar();\n return 0;\n}\n</code></pre>\n<p>What exactly is happening when the statement ++a = 20 is executed? Also, please clarify why this code fails in execution?</p>\n<pre><code>int main(){\n    int a = 10;\n    a++ = 20; // error \n    printf(\"a = %d\", a);\n    getchar();\n    return 0;\n }\n</code></pre>\n<p>Code Taken From: <a href=\"http://www.geeksforgeeks.org/g-fact-40/\" rel=\"nofollow noreferrer\">http://www.geeksforgeeks.org/g-fact-40/</a> </p>\n", "Tags": "<c++><operators><pre-increment>", "OwnerUserId": "7306060", "AnswerCount": "4"}, "44880729": {"ParentId": "44880658", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When you do</p>\n<pre><code>++a = 20;\n</code></pre>\n<p>it's roughly equivalent to</p>\n<pre><code>a = a + 1;\na = 20;\n</code></pre>\n<p>But when you do</p>\n<pre><code>a++ = 20;\n</code></pre>\n<p>it's <em>roughly</em> equivalent to</p>\n<pre><code>int temp = a;\na = a + 1;\ntemp = 20;\n</code></pre>\n<p><em>But</em> the variable <code>temp</code> doesn't really exist. The result of <code>a++</code> is something called an <em>rvalue</em> and those can't be assigned to. Rvalues are supposed to be on the <em>right hand side</em> of an assignment, not left hand side. (That's basically what the <code>l</code> and <code>r</code> in <code>lvalue</code> and <code>rvalue</code> comes from.)</p>\n<p>See e.g. <a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow noreferrer\">this values category reference</a> for more information about lvalues and rvalues.</p>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2017-07-03T08:23:56.060", "Id": "44880729", "Score": "8", "CreationDate": "2017-07-03T08:16:19.173", "LastActivityDate": "2017-07-03T08:23:56.060"}, "44880743": {"ParentId": "44880658", "CommentCount": "0", "Body": "<p>This is the difference between r and l values. If you would have compiled the 2nd code snippet with gcc you would have seen this:</p>\n<blockquote>\n<p id=\"so_44880658_44880743_0\">lvalue required as left operand of assignment</p>\n</blockquote>\n<p>meaning, that <code>a++</code> is rvalue and not a lvalue as it should be if you want to assign something to it</p>\n", "OwnerUserId": "3512538", "PostTypeId": "2", "Id": "44880743", "Score": "1", "CreationDate": "2017-07-03T08:17:03.793", "LastActivityDate": "2017-07-03T08:17:03.793"}, "bq_ids": {"n4140": {"so_44880658_44880718_0": {"section_id": 6074, "quality": 0.8, "length": 4}, "so_44880658_44880743_0": {"section_id": 6173, "quality": 0.8, "length": 4}}, "n3337": {"so_44880658_44880718_0": {"section_id": 5842, "quality": 0.8, "length": 4}, "so_44880658_44880743_0": {"section_id": 5934, "quality": 0.8, "length": 4}}, "n4659": {"so_44880658_44880718_0": {"section_id": 7570, "quality": 0.8, "length": 4}, "so_44880658_44880743_0": {"section_id": 7675, "quality": 0.8, "length": 4}}}});