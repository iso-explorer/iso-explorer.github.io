post_cb({"bq_ids": {"n4140": {"so_13661328_13661361_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 5336}, "so_13661328_13661328_2": {"length": 7, "quality": 1.0, "section_id": 3879}}, "n3337": {"so_13661328_13661361_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 5133}, "so_13661328_13661328_2": {"length": 7, "quality": 1.0, "section_id": 3739}}, "n4659": {"so_13661328_13661361_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6757}, "so_13661328_13661328_2": {"length": 7, "quality": 1.0, "section_id": 4768}}}, "13661328": {"ViewCount": "138", "Body": "<p>I was creating a function in Visual Studio 2012 to check if an item was the default and went to call it <code>default()</code>. However, I noticed that when I finished and waited a couple of seconds, the name was no longer bolded and no Intellisense errors were shown. Intrigued, I tried it out:</p>\n<pre><code>void default(){}\n\nint main() {\n    default();\n}\n</code></pre>\n<p>This code works on Visual Studio 2012 with both the regular compiler and the November 2012 CTP one, but does not compile on GCC 4.7.2 or on <a href=\"http://llvm.org/demo\" rel=\"nofollow\">http://llvm.org/demo</a>. I realize that <code>default</code> is used for both switches and for <code>= default</code> on some class members. VS2012 does not support the latter, but it obviously supports the former, and it does indeed complain if I change the function name to <code>delete</code>, <code>nullptr</code>, or <code>switch</code>, or <code>case</code>.</p>\n<p>On GCC, I get this:</p>\n<blockquote>\n<p id=\"so_13661328_13661328_0\">error: expected unqualified-id before 'default'<br>\n  In function 'int main()':<br>\n  error: case label not within a switch statement<br>\n  error: expected ':' before '(' token<br>\n  error: expected primary-expression before ')' token</br></br></br></br></p>\n</blockquote>\n<p>Clang gives me this:</p>\n<blockquote>\n<p id=\"so_13661328_13661328_1\">error: expected unqualified-id<br>\n  void default(){}<br>\n  ........^</br></br></p>\n</blockquote>\n<p>I'm obviously changing the name of it now, but is VS wrong in accepting this, or did it perhaps change specifically with the <code>= default</code> and <code>= delete</code> addition to the language? If VS doesn't support that, and that's the cause of the program being wrong, I could see why it accepts it.</p>\n<p>I found this in the spec (C++11 \u00a7 6.1/2): </p>\n<blockquote>\n<p id=\"so_13661328_13661328_2\">Case labels and default labels shall occur only in switch statements.</p>\n</blockquote>\n<p>Since it is not being used as a label, with the colon following it, I guess it could be argued that it's allowed, but then why would <code>case</code> compile? I'm guessing there's something more specific to function names, but I couldn't find it.</p>\n<p>Are you allowed to name a function <code>default()</code>, and does the rule differ between C++03, and C++11?</p>\n", "AcceptedAnswerId": "13661361", "Title": "Can a function be named default?", "CreationDate": "2012-12-01T16:32:29.203", "Id": "13661328", "CommentCount": "0", "LastEditDate": "2014-08-22T03:03:30.847", "PostTypeId": "1", "LastEditorUserId": "15168", "LastActivityDate": "2014-08-22T03:03:30.847", "Score": "2", "OwnerUserId": "962089", "Tags": "<c++><visual-studio-2012><c++11><keyword>", "AnswerCount": "2"}, "13661361": {"Id": "13661361", "PostTypeId": "2", "Body": "<p>The <code>default</code> identifier is reserved for use as a keyword:</p>\n<blockquote>\n<p id=\"so_13661328_13661361_0\">The identifiers shown in Table 4 are reserved for use as keywords (that is, they are unconditionally treated as keywords in phase 7) except in an <em>attribute-token</em></p>\n</blockquote>\n<p>Table 4<sup>\u2020</sup> contains, among all other keywords, <code>default</code>.  VC++ is wrong to accept an identifier of <code>default</code> outside of an <em>attribute-token</em>, and a function name is not an <em>attribute-token</em>..</p>\n<p><sup>\u2020</sup> It's Table 4 in C++11, but Table 3 in C++98 and 03. Nonetheless, they all contain <code>default</code>.</p>\n", "LastActivityDate": "2012-12-01T16:36:13.330", "CommentCount": "8", "CreationDate": "2012-12-01T16:36:13.330", "ParentId": "13661328", "Score": "3", "OwnerUserId": "150634"}, "13661341": {"Id": "13661341", "PostTypeId": "2", "Body": "<p>It's not allowed. You can't use any C++ keywords in the declaration of functions or variables. No exceptions. This rule is the same in all C++ standards.</p>\n", "LastActivityDate": "2012-12-01T16:33:28.800", "CommentCount": "0", "CreationDate": "2012-12-01T16:33:28.800", "ParentId": "13661328", "Score": "2", "OwnerUserId": "862396"}});