post_cb({"bq_ids": {"n4140": {"so_28662784_28662784_4": {"length": 7, "quality": 0.6363636363636364, "section_id": 6185}, "so_28662784_28662784_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 87}, "so_28662784_28728098_3": {"length": 45, "quality": 0.9574468085106383, "section_id": 87}, "so_28662784_28662784_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 95}, "so_28662784_28728098_5": {"length": 20, "quality": 0.8695652173913043, "section_id": 5938}, "so_28662784_28728098_1": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_28662784_28662784_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 5946}, "so_28662784_28662784_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 82}, "so_28662784_28728098_3": {"length": 39, "quality": 0.8297872340425532, "section_id": 82}, "so_28662784_28662784_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 90}, "so_28662784_28728098_5": {"length": 20, "quality": 0.8695652173913043, "section_id": 5710}, "so_28662784_28728098_1": {"length": 5, "quality": 1.0, "section_id": 82}}, "n4659": {"so_28662784_28662784_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 99}, "so_28662784_28728098_5": {"length": 20, "quality": 0.8695652173913043, "section_id": 7422}}}, "28662784": {"ViewCount": "711", "Body": "<p>The example below attempts to use a variable of reference type as an argument for a non-type template parameter (itself of reference type). Clang, GCC and VC++ all reject it. But why? I can't seem to find anything in the standard that makes it illegal.</p>\n<pre><code>int obj = 42;\nint&amp; ref = obj;\n\ntemplate &lt;int&amp; param&gt; class X {};\n\nint main()\n{\n    X&lt;obj&gt; x1;  // OK\n    X&lt;ref&gt; x2;  // error\n}\n</code></pre>\n<p><a href=\"http://rextester.com/ENIQS47115\">Live example</a></p>\n<hr>\n<p>CLang says:</p>\n<blockquote>\n<p id=\"so_28662784_28662784_0\">source_file.cpp:9:7: error: non-type template argument of reference type 'int &amp;' is not an object</p>\n</blockquote>\n<p>Others complain in similar ways.</p>\n<hr>\n<p>From the standard (all quotes from C++11; C++14 doesn't appear to have significant changes in relevant parts):</p>\n<blockquote>\n<p id=\"so_28662784_28662784_1\"><strong>14.3.2/1</strong> A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<p id=\"so_28662784_28662784_2\">...</p>\n<ul>\n<li>a constant expression (5.19) that designates the address of an object with static storage duration and external or internal linkage ... expressed (ignoring parentheses) as <code>&amp;</code> <em>id-expression</em>, except that the <code>&amp;</code> ... shall be omitted if the corresponding <em>template-parameter</em> is a reference</li>\n</ul>\n<p id=\"so_28662784_28662784_3\">...</p>\n</blockquote>\n<p>Now what's a constant expression:</p>\n<blockquote>\n<p id=\"so_28662784_28662784_4\"><strong>5.19/2</strong> A <em>conditional-expression</em> is a <em>core constant expression</em> unless it involves one of the following as a potentially evaluated subexpression (3.2)...</p>\n<p id=\"so_28662784_28662784_5\">...</p>\n<ul>\n<li>an <em>id-expression</em> that refers to a variable or data member of reference type unless the reference has a preceding initialization, initialized with a constant expression</li>\n</ul>\n<p id=\"so_28662784_28662784_6\">...</p>\n</blockquote>\n<hr>\n<p>As far as I can tell, <code>ref</code> in <code>X&lt;ref&gt;</code> is an <em>id-expression</em> that refers to a variable of reference type. This variable has a preceding initialization, initialized with the expression <code>obj</code>. I believe <code>obj</code> is a constant expression, and anyway if it isn't, then <code>X&lt;obj&gt;</code> shouldn't compile either.</p>\n<ul>\n<li>So what am I missing?</li>\n<li>Which clause in the standard renders <code>X&lt;ref&gt;</code> invalid, while <code>X&lt;obj&gt;</code> is valid?</li>\n</ul>\n</hr></hr></hr>", "AcceptedAnswerId": "28728098", "Title": "Reference as a non-type template argument", "CreationDate": "2015-02-22T20:22:16.400", "Id": "28662784", "CommentCount": "4", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2015-02-25T19:55:36.853", "LastEditorUserId": "1090079", "LastActivityDate": "2015-02-25T22:33:15.173", "Score": "13", "OwnerUserId": "1670129", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "28728098": {"Id": "28728098", "PostTypeId": "2", "Body": "<h3>Introduction</h3>\n<p>It is correct saying that the name of a <em>reference</em> is an <em>id-expression</em>, though; the <em>id-expression</em> doesn't refer to whatever the reference is referencing, but the reference itself.</p>\n<pre><code> int    a = 0;\n int&amp; ref = a; // \"ref\" is an id-expression, referring to `ref` - not `a`\n</code></pre>\n<hr>\n<h3>The Standard (<a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\" rel=\"nofollow\">N4140</a>)</h3>\n<p>You are quoting the relevant sections of the standard in your post, but you left out the most important part (emphasize mine):</p>\n<blockquote>\n<p id=\"so_28662784_28728098_0\">14.3.2p1 <strong>Template non-type arguments</strong> [temp.arg.nontype]</p>\n<p id=\"so_28662784_28728098_1\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of: </p>\n<ul>\n<li><p id=\"so_28662784_28728098_2\"><sub>...</sub></p></li>\n<li><p id=\"so_28662784_28728098_3\">a constant expression (5.19) that designates the address of a complete object with static sturage duration and external or internal linkage or a function with external or internal linkage, including function templates and function\n  <em>template-ids</em> but excluding non-static class members, expressed (ignoring parentheses) as <code>&amp;</code> <em>id-expression</em>, <strong>where <em>id-expression</em> is the name of an object or function</strong>, except that the <code>&amp;</code> may be omitted if the name refers to a function or array and shall be omitted if the corresponding <em>template-parameter</em> is a reference; <sub>...</sub></p></li>\n</ul>\n</blockquote>\n<p><br/></p>\n<p><sup><strong>Note:</strong> In earlier drafts <em>\"where id-expression is the name of an object or function\"</em> isn't present; it was addressed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1570\" rel=\"nofollow\">DR 1570</a> - which undoubtedly makes the intent more clear.</sup></p>\n<hr>\n<h3>A variable of <em>reference type</em> is not an <em>object</em>?</h3>\n<p>You are absolutely correct; the reference itself has reference type, and can merely act as an object when part of an expression.</p>\n<blockquote>\n<p id=\"so_28662784_28728098_4\">5p5 <strong>Expressions</strong> [expr]</p>\n<p id=\"so_28662784_28728098_5\">If an expression initially has the type \"reference to <code>T</code>\" (8.3.2, 8.5.3), the type is adjusted to <code>T</code> prior to any further analysis. The expression designates the object or function denoted by the reference, and the expression is an lvalue or an xvalue, depending on the expression.</p>\n</blockquote>\n<hr>\n<h3>Elaboration</h3>\n<p>It is very important to note that the <em>constant expression</em> (<em>\"that designates the address of a complete object...\"</em>) must be one of <code>&amp;id-expression</code>, or <code>id-expression</code>.</p>\n<p>Even though a <em>constant-expression</em>, that isn't just an <em>id-expression</em>, might refer to an object with static storage duration, we cannot use it to <em>\"initialize\"</em> a <em>template-parameter</em> of <em>reference-</em> or <em>pointer type</em>.</p>\n<p><sub><strong>Example Snippet</strong></sub></p>\n<pre><code>template&lt;int&amp;&gt;\nstruct A { };\n\nint            a = 0;\nconstexpr int&amp; b = (0, a); // ok, constant-expression\nA&lt;(0, a)&gt;      c = {};     // ill-formed, `(0, a)` is not an id-expression\n</code></pre>\n<p><sup><strong>Note</strong>: This is also a reason behind the fact that we cannot use <em>string-literals</em> as <em>template-arguments</em>; they are not <em>id-expressions</em>.</sup></p>\n</hr></hr></hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2015-02-25T22:33:15.173", "Score": "7", "CreationDate": "2015-02-25T19:39:55.687", "ParentId": "28662784", "CommentCount": "6", "OwnerUserId": "1090079", "LastEditDate": "2015-02-25T22:33:15.173"}});