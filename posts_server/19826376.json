post_cb({"bq_ids": {"n4140": {"so_19826376_19826645_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 735}, "so_19826376_19826645_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 723}}, "n3337": {"so_19826376_19826645_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 724}, "so_19826376_19826645_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 712}}, "n4659": {"so_19826376_19826645_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 764}, "so_19826376_19826645_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 754}}}, "19826619": {"Id": "19826619", "PostTypeId": "2", "Body": "<p>The error is not the fault of emplace_back. To put an object in a vector it must be movable or copyable. If you actually run the code with copy constructor implemented you will notice it is never called. This is an entry on cppreference.com<br>\n<img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/e09d8.png\"/></br></p>\n<p>What I would do to fix this is implement the move constructor, that makes it compile and I can't see any really drawback to having a move constructor. And as with the cctor the move constructor will not be called in your current code.</p>\n", "LastEditorUserId": "2167655", "LastActivityDate": "2013-11-07T02:12:56.280", "Score": "7", "CreationDate": "2013-11-07T02:00:08.003", "ParentId": "19826376", "CommentCount": "3", "OwnerUserId": "2167655", "LastEditDate": "2013-11-07T02:12:56.280"}, "19826376": {"ViewCount": "7455", "Body": "<p>I have a class whose copy constructors are explicitly deleted (because A uses pointers internally and I don't want to fall into shallow copy pitfalls):</p>\n<pre><code>class A {\n  public:\n    A(const A&amp;) = delete;\n    A&amp; operator=(const A&amp;) = delete;\n\n    A(const B&amp; b, const C&amp; c);\n}\n</code></pre>\n<p>Now I have a vector of type <code>vector&lt;A&gt; aVector;</code> and I want to insert elements into it - so I use <code>emplace_back</code>:</p>\n<pre><code>aVector.emplace_back(b, c);\n</code></pre>\n<p>However, this fails to compile using gcc and I get the error - </p>\n<pre><code>third-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/stl_construct.h: In instantiation of 'void std::_Construct(_T1*, _Args&amp;&amp; ...)\nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/stl_uninitialized.h:77:3:   required from 'static _ForwardIterator std::__uninitialized_copy&lt;_TrivialValueTypes&gt;::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator)  \nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/stl_uninitialized.h:119:41:   required from '_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) \nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/stl_uninitialized.h:260:63:   required from '_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator&lt;_Tp&gt;&amp;) \nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/stl_uninitialized.h:283:67:   required from '_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&amp;)\nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/vector.tcc:410:6:   required from 'void std::vector&lt;_Tp, _Alloc&gt;::_M_emplace_back_aux(_Args&amp;&amp; ...) \nthird-party/gcc-4.7.1-glibc-2.14.1/libgcc/libgcc-4.7.1/afc21dc/include/c++/4.7.1/bits/vector.tcc:102:4:   required from 'void std::vector&lt;_Tp, _Alloc&gt;::emplace_back(_Args&amp;&amp; ...)\n</code></pre>\n<p>What is the reason for this error and how can it be fixed without removing the deletion of the copy constructors? Do I need a move constructor - does it need to be explicitly defined?</p>\n", "Title": "Insert into vector having objects without copy constructor", "CreationDate": "2013-11-07T01:35:28.780", "LastActivityDate": "2017-07-14T02:46:40.067", "CommentCount": "3", "FavoriteCount": "5", "PostTypeId": "1", "Id": "19826376", "Score": "9", "OwnerUserId": "914229", "Tags": "<c++><c++11><vector><emplace>", "AnswerCount": "3"}, "45093663": {"Id": "45093663", "PostTypeId": "2", "Body": "<p>I ran into this problem with an external library's class. I was getting, </p>\n<p><code>\"Error C2280 ClassName::ClassName(const ClassName &amp;)': attempting to reference a deleted function\"</code></p>\n<p>I'm guessing that the class I was using had <em>deleted</em> its copy constructor. I couldn't add it to any <code>std</code> containers I knew of for my custom derived-class objects, which wrapped their object with some helpers of mine to help with initialization/error checks.</p>\n<p>I worked around this blocker with (<strong><em>risky</em></strong>) pointers.</p>\n<p>Basically, I transitioned to this:</p>\n<pre><code>std::vector&lt;ClassName*&gt; names;\nClassName name(\"arg\");\nClassName name_ptr = &amp;name;\nnames.push_back(name_ptr);\n</code></pre>\n<p>from this, originally:</p>\n<pre><code>std::vector&lt;ClassName&gt; names;\nClassName name(\"arg\");\nnames.push_back(name);\n</code></pre>\n<p>Interesting to say, this was the first time coding with C++ that I've actually <em>needed</em> to use pointers for non-pointer-specific usage requirements due to no known alternative. That makes me worry that I may missed something fundamental within my own code.</p>\n<p>Maybe there's a better way to do this, but it's not on this question's list of answers yet...</p>\n<h3>edit for Caveat:</h3>\n<p>I should have mentioned this before, thanks <a href=\"https://stackoverflow.com/users/459640/aschepler\">aschepler</a>;\nif you do this and the container you're using outlives the object, <em><strong>\"bang, you're dead.\"</strong></em></p>\n", "LastEditorUserId": "3543437", "LastActivityDate": "2017-07-14T02:46:40.067", "Score": "0", "CreationDate": "2017-07-14T02:27:06.903", "ParentId": "19826376", "CommentCount": "4", "OwnerUserId": "3543437", "LastEditDate": "2017-07-14T02:46:40.067"}, "19826645": {"Id": "19826645", "PostTypeId": "2", "Body": "<p>You should add move constructor - because <code>std::vector::emplace_back</code> may do relocation which requires copy/move constructor. Or just use <code>std::deque</code>.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/57e8591577390aaf\" rel=\"nofollow noreferrer\"><strong>LIVE DEMO</strong></a></p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;deque&gt;\nusing namespace std;\n\nstruct NoCopyNoMove\n{\n    NoCopyNoMove(const NoCopyNoMove&amp;) = delete;\n    NoCopyNoMove&amp; operator=(const NoCopyNoMove&amp;) = delete;\n    NoCopyNoMove(NoCopyNoMove&amp;&amp;) = delete;\n    NoCopyNoMove&amp; operator=(NoCopyNoMove&amp;&amp;) = delete;\n\n    NoCopyNoMove(int){};\n};\n\nstruct OnlyMove\n{\n    OnlyMove(const OnlyMove&amp;) = delete;\n    OnlyMove&amp; operator=(const OnlyMove&amp;) = delete;\n    OnlyMove(OnlyMove&amp;&amp;) noexcept {}\n    OnlyMove&amp; operator=(OnlyMove&amp;&amp;) noexcept {}\n\n    OnlyMove(int){};\n};\n\nint main()\n{\n    deque&lt;NoCopyNoMove&gt; x;\n    x.emplace_back(1);\n\n    vector&lt;OnlyMove&gt; y;\n    y.emplace_back(1);\n}\n</code></pre>\n<hr>\n<blockquote>\n<p id=\"so_19826376_19826645_0\">\u00a7 23.2.3 Table 101 \u2014 Optional sequence container operations</p>\n<p id=\"so_19826376_19826645_1\"><code>a.emplace_back(args)</code> [...]</p>\n<p id=\"so_19826376_19826645_2\"><em>Requires</em>: <code>T</code> shall be <code>EmplaceConstructible</code> into <code>X</code> from args. For <code>vector</code>, <code>T</code> shall also be <a href=\"https://stackoverflow.com/a/14916142/1762344\"><code>MoveInsertable</code></a> into <code>X</code>.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-11-07T02:17:52.133", "Score": "17", "CreationDate": "2013-11-07T02:02:35.837", "ParentId": "19826376", "CommentCount": "3", "OwnerUserId": "1762344", "LastEditDate": "2017-05-23T12:26:00.650"}});