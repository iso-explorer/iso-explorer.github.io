post_cb({"34246443": {"CommentCount": "0", "AcceptedAnswerId": "34246498", "CreationDate": "2015-12-13T00:01:53.267", "LastActivityDate": "2015-12-13T00:09:37.987", "PostTypeId": "1", "ViewCount": "328", "FavoriteCount": "3", "Title": "strange typename usage c++11", "Id": "34246443", "Score": "8", "Body": "<p>I have the following code</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\ntemplate&lt;class T&gt; struct Tpl;\ntemplate&lt;&gt;        struct Tpl&lt;int&gt;    { void print() { cout &lt;&lt; \"int\"    &lt;&lt; endl; } };\ntemplate&lt;&gt;        struct Tpl&lt;string&gt; { void print() { cout &lt;&lt; \"string\" &lt;&lt; endl; } };\n\nint main() {\n  typename Tpl&lt;int&gt;::Tpl{}.print();\n  typename Tpl&lt;int&gt;::Tpl&lt;string&gt;{}.print();\n  typename Tpl&lt;int&gt;::Tpl&lt;int&gt;{}.print();\n  typename Tpl&lt;int&gt;::Tpl::Tpl{}.print();\n  typename Tpl&lt;string&gt;::Tpl&lt;int&gt;{}.print();\n  typename Tpl&lt;int&gt;::Tpl::Tpl&lt;int&gt;{}.print();\n  typename Tpl&lt;string&gt;::Tpl::Tpl&lt;int&gt;::Tpl{}.print();\n  typename Tpl&lt;int&gt;::Tpl&lt;string&gt;::Tpl&lt;int&gt;::Tpl&lt;string&gt;::Tpl&lt;int&gt;::Tpl&lt;string&gt;{}.print();\n}\n</code></pre>\n<p>that gives the following output</p>\n<pre><code>int\nstring\nint\nint\nint\nint\nint\nstring\n</code></pre>\n<p>My question is how <code>typename</code> works in these cases, specially in the last one where you can switch between different template arguments. I would like to know if this behavior is standard or if it's some weirdness on the compiler.</p>\n<p>This is the info of the compiler:</p>\n<pre><code>&gt; g++ -v\nUsing built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04)\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2469099", "AnswerCount": "1"}, "34246498": {"ParentId": "34246443", "CommentCount": "6", "Body": "<p>This is because of [temp.local]/1:</p>\n<blockquote>\n<p id=\"so_34246443_34246498_0\">Like normal (non-template) classes, class templates have an injected-class-name (Clause 9). The injected-class-name can be used as a <em>template-name</em> or a <em>type-name</em>.</p>\n</blockquote>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "34246498", "Score": "9", "CreationDate": "2015-12-13T00:09:37.987", "LastActivityDate": "2015-12-13T00:09:37.987"}, "bq_ids": {"n4140": {"so_34246443_34246498_0": {"section_id": 179, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_34246443_34246498_0": {"section_id": 173, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_34246443_34246498_0": {"section_id": 184, "quality": 0.9285714285714286, "length": 13}}}});