post_cb({"47974898": {"ViewCount": "440", "Body": "<p>A really strange and unexpected behaviour of clang 5 was detected when switching to c++17 and replacing custom <code>std::optional</code> solution with the standard one. For some reason, <code>emplace()</code> was being disabled due to faulty evaluation of a <code>std::is_constructible</code> trait of the parameter class.</p>\n<p>Some specific preconditions must be satisfied before it reproduces:</p>\n<pre><code>#include &lt;optional&gt;\n\n/// Precondition #1: T must be a nested struct\nstruct Foo\n{\n    struct Victim\n    {\n        /// Precondition #2: T must have an aggregate-initializer\n        /// for one of its members\n        std::size_t value{0};\n    };\n\n    /// Precondition #3: std::optional&lt;T&gt; must be instantiated in this scope\n    std::optional&lt;Victim&gt; victim;\n\n    bool foo()\n    {\n        std::optional&lt;Victim&gt; foo;\n\n        // An error\n        foo.emplace(); \n        /// Assertion is failed\n        static_assert(std::is_constructible&lt;Victim&gt;::value);\n    }\n};\n</code></pre>\n<hr>\n<p>Live example on <a href=\"https://godbolt.org/g/HG4WYG\" rel=\"nofollow noreferrer\">godbolt.org</a></p>\n<hr>\n<p>Change any of the preconditions and it compiles as expected. Is there some unknown inconsistency in the standard that makes clang reject this code while being compliant?</p>\n<p>As a side note: <strong>GCC 7.1</strong> and <strong>GCC 7.2</strong> have no problem with the above code.</p>\n<hr>\n<p>Bug report at: <a href=\"https://bugs.llvm.org/show_bug.cgi?id=35756\" rel=\"nofollow noreferrer\">bugs.llvm.org</a></p>\n</hr></hr></hr>", "AcceptedAnswerId": "47976196", "Title": "clang 5: std::optional instantiation screws std::is_constructible trait of the parameter type", "CreationDate": "2017-12-26T06:48:24.190", "LastActivityDate": "2017-12-27T07:28:06.027", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-12-27T07:28:06.027", "LastEditorUserId": "966376", "Id": "47974898", "Score": "16", "OwnerUserId": "966376", "Tags": "<c++><language-lawyer><c++17><stdoptional>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47974898_47976197_0": {"length": 15, "quality": 0.9375, "section_id": 4710}, "so_47974898_47976197_2": {"length": 28, "quality": 1.0, "section_id": 124}, "so_47974898_47976197_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 4710}, "so_47974898_47976196_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 4710}, "so_47974898_47976197_3": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_47974898_47976196_0": {"length": 8, "quality": 1.0, "section_id": 5862}}, "n3337": {"so_47974898_47976197_0": {"length": 15, "quality": 0.9375, "section_id": 4518}, "so_47974898_47976197_2": {"length": 28, "quality": 1.0, "section_id": 118}, "so_47974898_47976197_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 4518}, "so_47974898_47976196_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 4518}, "so_47974898_47976197_3": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_47974898_47976196_0": {"length": 8, "quality": 1.0, "section_id": 5632}}, "n4659": {"so_47974898_47976197_0": {"length": 15, "quality": 0.9375, "section_id": 6107}, "so_47974898_47976197_2": {"length": 28, "quality": 1.0, "section_id": 128}, "so_47974898_47976197_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 6107}, "so_47974898_47976196_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 6107}, "so_47974898_47976197_3": {"length": 7, "quality": 1.0, "section_id": 4052}, "so_47974898_47976196_0": {"length": 8, "quality": 1.0, "section_id": 7345}}}, "47976197": {"Id": "47976197", "PostTypeId": "2", "Body": "<p>Alright, dug up the relevant quotes. The crux of the matter is how <code>std::is_constructible</code> should handle <code>Victim</code>. The most conclusive authority is C++17 (n4659). First <a href=\"https://timsong-cpp.github.io/cppwp/n4659/meta.unary.prop#8\" rel=\"nofollow noreferrer\">[meta.unary.prop/8]</a>:</p>\n<blockquote>\n<p id=\"so_47974898_47976197_0\">The predicate condition for a template specialization\n  <code>is_\u00adconstructible&lt;T, Args...&gt;</code> shall be satisfied if and only if the\n  following variable definition would be well-formed for some invented\n  variable t:</p>\n<pre><code>T t(declval&lt;Args&gt;()...);\n</code></pre>\n<p id=\"so_47974898_47976197_1\">[\u2009Note: <strong>These tokens are never interpreted as a function declaration</strong>.\n  \u2009\u2014\u2009end note\u2009] Access checking is performed as if in a context\n  unrelated to T and any of the Args. Only the validity of the immediate\n  context of the variable initialization is considered.</p>\n</blockquote>\n<p>The note I highlighted is not normative (on account of being a note), but it coincides with <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.variadic#7\" rel=\"nofollow noreferrer\">[temp.variadic]/7</a>:</p>\n<blockquote>\n<p id=\"so_47974898_47976197_2\">... When N is zero, the instantiation of the expansion produces an\n  empty list. Such an instantiation does not alter the syntactic\n  interpretation of the enclosing construct, even in cases where\n  omitting the list entirely would otherwise be ill-formed or would\n  result in an ambiguity in the grammar.</p>\n</blockquote>\n<p>So for the purposes of <code>is_\u00adconstructible</code>, this <code>T t();</code> indeed makes <code>t</code> a variable declaration. This initialization is value initialization because <a href=\"https://timsong-cpp.github.io/cppwp/n4659/dcl.init#11\" rel=\"nofollow noreferrer\">[dcl.init/11]</a> says as much:</p>\n<blockquote>\n<p id=\"so_47974898_47976197_3\">An object whose initializer is an empty set of parentheses, i.e., (),\n  shall be value-initialized.</p>\n</blockquote>\n<p>That means that the trait ends up checking if <code>Victim</code> can be value-initialized. Which it may. It's an aggregate, but an implicitly defaulted default c'tor is still defined by the compiler (to support value initialization, obviously).</p>\n<p>Long story short. Clang has a bug, you should report it.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-12-26T09:28:23.837", "Score": "3", "CreationDate": "2017-12-26T09:05:58.970", "ParentId": "47974898", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-12-26T09:28:23.837"}, "47976196": {"Id": "47976196", "PostTypeId": "2", "Body": "<p>This looks like a compiler bug. From <a href=\"https://timsong-cpp.github.io/cppwp/class#mem-6\" rel=\"noreferrer\">[class]</a></p>\n<blockquote>\n<p id=\"so_47974898_47976196_0\">A class is considered a completely-defined object type (or complete type) at the closing <code>}</code> of the class-specifier.</p>\n</blockquote>\n<p>Which means <code>Victim</code> is complete at <code>std::optional&lt;Victim&gt;</code>, making it no different than any other type in this context.</p>\n<p>From <a href=\"https://timsong-cpp.github.io/cppwp/meta#unary.prop-8\" rel=\"noreferrer\">[meta]</a></p>\n<blockquote>\n<p id=\"so_47974898_47976196_1\">The predicate condition for a template specialization <code>is_\u00adconstructible&lt;T, Args...&gt;</code> shall be satisfied if and only if the following variable definition would be well-formed for some invented variable <code>t</code>:\n  <code>T t(declval&lt;Args&gt;()...);</code></p>\n</blockquote>\n<p>Which is direct-initializing <code>t</code> with arguments of type <code>Args...</code>, or if <code>sizeof...(Args) == 0</code>, it's value-initializing <code>t</code>.</p>\n<p>In this case, <a href=\"https://timsong-cpp.github.io/cppwp/dcl.init#8\" rel=\"noreferrer\">value-initializing <code>t</code> is  to default-initialize</a> <code>t</code>, which is valid hence <code>std::is_constructible_v&lt;Victim&gt;</code> should be true.</p>\n<p>With all that said, compilers seems to be <a href=\"https://godbolt.org/g/DEkDhT\" rel=\"noreferrer\">struggling <em>a lot</em></a> compiling this.</p>\n", "LastActivityDate": "2017-12-26T09:05:55.213", "CommentCount": "5", "CreationDate": "2017-12-26T09:05:55.213", "ParentId": "47974898", "Score": "7", "OwnerUserId": "4832499"}});