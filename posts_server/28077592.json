post_cb({"28077711": {"ParentId": "28077592", "CommentCount": "2", "Body": "<p>You might mean [namespace.std]/1:</p>\n<blockquote>\n<p id=\"so_28077592_28077711_0\">A program may add a template specialization for any standard library\n  template to namespace <code>std</code> <strong>only if the declaration depends on a\n  user-defined type and the specialization meets the standard library\n  requirements for the original template and is not explicitly\n  prohibited<sup>181</sup>.</strong> <hr/></p>\n<p id=\"so_28077592_28077711_1\"><sup>181)</sup> Any library code that instantiates other library templates must be prepared to work adequately with any user-supplied\n  specialization that meets the minimum requirements of the Standard.</p>\n</blockquote>\n<p>If partial specializations of function templates are ever introduced, this quote would also implicitly cover them (as it doesn't restrict itself on explicit specialization).</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "28077711", "Score": "4", "CreationDate": "2015-01-21T22:04:05.023", "LastActivityDate": "2015-01-21T22:04:05.023"}, "bq_ids": {"n4140": {"so_28077592_28077711_0": {"section_id": 6299, "quality": 0.95, "length": 19}, "so_28077592_28077711_1": {"section_id": 6299, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_28077592_28077711_0": {"section_id": 6056, "quality": 0.95, "length": 19}, "so_28077592_28077711_1": {"section_id": 6056, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_28077592_28077711_0": {"section_id": 7808, "quality": 0.95, "length": 19}, "so_28077592_28077711_1": {"section_id": 7808, "quality": 0.8333333333333334, "length": 15}}}, "28077592": {"CommentCount": "1", "ViewCount": "378", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-01-21T21:55:33.073", "LastActivityDate": "2016-03-18T11:32:54.580", "Title": "extending namespace std via partial template specialization", "AcceptedAnswerId": "28077711", "LastEditDate": "2016-03-18T11:32:54.580", "Id": "28077592", "Score": "2", "Body": "<p>As far as I know, we are allowed (with some exceptions that I won't mention here) to \"extend\" <code>namespace std</code> by totally specializing a <code>std</code> template function such as <code>std::swap</code>, i.e.</p>\n<pre><code>namespace std\n{\n    template&lt;&gt;\n    void swap&lt;Foo&gt;(Foo&amp; lhs, Foo&amp; rhs){...}\n}\n</code></pre>\n<p>is perfectly valid. </p>\n<p>Since C++11, we can now partially specialize functions. I believe that we can then play the same game and extend <code>std</code> via partial specialization, like</p>\n<pre><code>namespace std\n{\n    template&lt;typename T&gt;\n    void swap&lt;Foo&lt;T&gt;&gt;(Foo&lt;T&gt;&amp; lhs, Foo&lt;T&gt;&amp; rhs){...}\n}\n</code></pre>\n<p>however I am not sure about this and couldn't find the proper explaining section in the standard. Is the code immediately above correct or does it lead to UB?</p>\n<p>PS: As @Columbo mentioned in the answer, we cannot partially specialize function templates, not even in C++11/14. For some reason I thought one can do that, I believed it was at least a proposal. </p>\n", "Tags": "<c++><templates><c++11><language-lawyer><explicit-specialization>", "OwnerUserId": "3093378", "AnswerCount": "1"}});