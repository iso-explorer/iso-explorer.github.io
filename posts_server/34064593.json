post_cb({"34064593": {"CommentCount": "0", "ViewCount": "48", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-12-03T11:17:54.063", "LastActivityDate": "2015-12-03T11:48:59.217", "Title": "What operator to overload when class is passed as argument to printf()", "AcceptedAnswerId": "34064763", "LastEditDate": "2017-05-23T11:44:38.997", "Id": "34064593", "Score": "1", "Body": "<p>I have an int which I have encapsulated as a 'property' using the template solution here:</p>\n<p><a href=\"https://stackoverflow.com/a/4225302/3717478\">https://stackoverflow.com/a/4225302/3717478</a></p>\n<pre><code>template&lt;typename T&gt;\nclass Property\n{\nprotected:\n    T&amp; _value;\n\npublic:\n    Property(T&amp; value) : _value(value)\n    {\n    }   // eo ctor\n\n    Property&lt;T&gt;&amp; operator = (const T&amp; val)\n    {\n        _value = val;\n        return *this;\n    };  // eo operator =\n\n    operator const T&amp;() const\n    {\n        return _value;\n    };  // eo operator ()\n\n    T&amp; operator() ()\n    {\n        return _value;\n    }\n    T const&amp; operator() () const\n    {\n        return _value;\n    }\n};\n</code></pre>\n<p>However if the property identifier is passed as an argument to a function expecting a variable number of arguments, such as printf(), the class pointer value is passed instead of the int value.</p>\n<p>Is there an operator that I can overload so that the int value is passed instead?</p>\n", "Tags": "<c++>", "OwnerUserId": "3717478", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_34064593_34064763_0": {"section_id": 5994, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_34064593_34064763_0": {"section_id": 5762, "quality": 0.8571428571428571, "length": 18}}, "n4659": {"so_34064593_34064763_0": {"section_id": 7496, "quality": 0.8571428571428571, "length": 18}}}, "34064655": {"ParentId": "34064593", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>No. The compiler does not know, technically, which type is required. (Note that some compilers offer warnings because they know the syntax of the format string and can check the arguments, but that is, as far as I know, not compulsory and does not define the actual argument types.) So there is no way for the compiler to know which type it would need to look for, when searching for a cast operator.</p>\n<p>You need to explicitly cast. In your case you could:</p>\n<pre><code>int a;\nProperty&lt;int&gt; prop(a);\na = 10;\nprintf(\"%d\\n\", static_cast&lt;int&gt;(prop));\n</code></pre>\n", "OwnerUserId": "1248008", "LastEditorUserId": "1248008", "LastEditDate": "2015-12-03T11:36:10.427", "Id": "34064655", "Score": "2", "CreationDate": "2015-12-03T11:20:51.973", "LastActivityDate": "2015-12-03T11:36:10.427"}, "34064675": {"ParentId": "34064593", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can use <code>static_cast</code> operator with objects of the class.</p>\n<p>For example</p>\n<pre><code>int value = 10;\nProperty&lt;int&gt; p( value );\n\nprintf( \"%d\\n\", static_cast&lt;int&gt;( p ) );\n</code></pre>\n<p>In this case the conversion operator</p>\n<pre><code>operator const T&amp;() const\n{\n    return _value;\n};  // eo operator ()\n</code></pre>\n<p>will be called.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-12-03T11:35:03.747", "Id": "34064675", "Score": "2", "CreationDate": "2015-12-03T11:21:24.840", "LastActivityDate": "2015-12-03T11:35:03.747"}, "34064763": {"ParentId": "34064593", "CommentCount": "0", "Body": "<p>You have to perform the conversion yourself before passing an object of your class to <code>printf</code>. Passing objects of most user-defined types to a varargs function has implementation defined behaviour:</p>\n<p>[expr.call]/7:</p>\n<blockquote>\n<p id=\"so_34064593_34064763_0\">Passing a potentially-evaluated argument of class type (Clause 9) having a non-\n  trivial copy constructor, a non-trivial move constructor, or a non-trivial destructor, with no corresponding\n  parameter, is conditionally-supported with implementation-defined semantics</p>\n</blockquote>\n", "OwnerUserId": "2491746", "PostTypeId": "2", "Id": "34064763", "Score": "2", "CreationDate": "2015-12-03T11:24:31.563", "LastActivityDate": "2015-12-03T11:24:31.563"}});