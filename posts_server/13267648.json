post_cb({"13267648": {"CommentCount": "6", "AcceptedAnswerId": "13267797", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2012-11-07T10:21:13.660", "LastActivityDate": "2014-03-17T06:42:36.413", "LastEditDate": "2012-11-07T10:24:07.953", "ViewCount": "1207", "FavoriteCount": "1", "Title": "How portable is code with #pragma optimize?", "Id": "13267648", "Score": "5", "Body": "<p>How portable is code that uses <a href=\"http://msdn.microsoft.com/en-us/library/chh3fb0k.aspx\" rel=\"noreferrer\"><code>#pragma optimize</code></a>? Do most compilers support it and how complete is the support for this <code>#pragma</code>?</p>\n", "Tags": "<c++><c><compiler-construction><portability><pragma>", "OwnerUserId": "57428", "AnswerCount": "5"}, "13267821": {"ParentId": "13267648", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><code>#pragma</code> is not portable, full stop. There was a version of gcc that used to start of a game whenever it came across that </p>\n<p>Of the compilers we use at work, two definitely don't support <code>#pragma optimise</code>, and I can't answer for the others.</p>\n<p>And even if they did, as the command line switches for optimisation are different, the chances are that the options for the pragma would be different.</p>\n", "OwnerUserId": "1182921", "LastEditorUserId": "76722", "LastEditDate": "2012-11-07T10:33:11.943", "Id": "13267821", "Score": "1", "CreationDate": "2012-11-07T10:31:12.587", "LastActivityDate": "2012-11-07T10:33:11.943"}, "13268030": {"ParentId": "13267648", "CommentCount": "0", "Body": "<p>The <code>#pragma</code> keyword is portable in the sense that it should always compile despite on the compiler. However, the pragmas are compiler-specific so it's probable that when changing compiler it will complain with some warnings. Some pragmas are wide used, such as these from OpenMP. In order to make the code the most portable possible, you might surround your pragmas with <code>#ifdef</code>/<code>#endif</code> that depend on the compiler you're using. For example:</p>\n<pre><code>#ifdef __ICC\n   #pragma optimize\n#endif\n</code></pre>\n<p>Compilers usually define some macros such as <code>__ICC</code> that make the code know which compiler is being used. </p>\n", "OwnerUserId": "801530", "PostTypeId": "2", "Id": "13268030", "Score": "3", "CreationDate": "2012-11-07T10:43:51.183", "LastActivityDate": "2012-11-07T10:43:51.183"}, "13267797": {"ParentId": "13267648", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><code>#pragma</code> is the <em>sanctioned and portable</em> way for compilers to add <em>non-sanctioned and non-portable</em> language extensions <sup>*</sup>.</p>\n<p>Basically, you never know for sure, and at least one major C++ compiler (g++) does not support this pragma as is.</p>\n<hr>\n<p><sup>*</sup>:</p>\n<p>From the C++ standard (N3242): </p>\n<blockquote>\n<h2>16.6 Pragma directive <em>[cpp.pragma]</em></h2>\n<p id=\"so_13267648_13267797_0\">A preprocessing directive of the form</p>\n<p id=\"so_13267648_13267797_1\"><code># pragma</code> <em>pp-tokens<sub>opt</sub> new-line</em></p>\n<p id=\"so_13267648_13267797_2\">causes the implementation to behave in an implementation-defined manner. The behavior might cause translation to fail or cause the translator or the resulting program to behave in a non-conforming manner. Any pragma that is not recognized by the implementation is ignored.</p>\n</blockquote>\n<p>From the C standard (Committee Draft \u2014 April 12, 2011):</p>\n<blockquote>\n<h2>6.10.6 Pragma directive</h2>\n<h3>Semantics</h3>\n<p id=\"so_13267648_13267797_3\">A preprocessing directive of the form</p>\n<p id=\"so_13267648_13267797_4\"><code># pragma</code> <em>pp-tokens<sub>opt</sub> new-line</em></p>\n<p id=\"so_13267648_13267797_5\">where the preprocessing token <code>STDC</code> does not immediately follow <code>pragma</code> in the\n  directive (prior to any macro replacement)<sup>174)</sup> causes the implementation to behave in an\n  implementation-defined manner. The behavior might cause translation to fail or cause the\n  translator or the resulting program to behave in a non-conforming manner. Any such\n  <code>pragma</code> that is not recognized by the implementation is ignored.</p>\n</blockquote>\n<p>And here's an example:</p>\n<pre><code>int main () {\n    #pragma omp parallel for\n    for (int i=0; i&lt;16; ++i) {}\n}\n</code></pre>\n<p>A big part of the C and C++ OpenMP API is implemented as <code>#pragma</code>s.</p>\n</hr>", "OwnerUserId": "76722", "LastEditorUserId": "76722", "LastEditDate": "2014-03-17T06:42:36.413", "Id": "13267797", "Score": "11", "CreationDate": "2012-11-07T10:29:08.303", "LastActivityDate": "2014-03-17T06:42:36.413"}, "13267773": {"ParentId": "13267648", "CommentCount": "1", "Body": "<p>Often this is not a good idea to rely on compiler flags, since each compiler has its own behaviour.</p>\n<p>This flag should not be used as it is a compiling level spec you inject into your code.</p>\n<p>Normally and theoretically this flag should be ignored by compilers if not used.</p>\n", "OwnerUserId": "1579667", "PostTypeId": "2", "Id": "13267773", "Score": "6", "CreationDate": "2012-11-07T10:28:01.337", "LastActivityDate": "2012-11-07T10:28:01.337"}, "bq_ids": {"n4140": {"so_13267648_13267797_2": {"section_id": 548, "quality": 0.8636363636363636, "length": 19}, "so_13267648_13267797_5": {"section_id": 548, "quality": 0.6, "length": 21}}, "n3337": {"so_13267648_13267797_2": {"section_id": 539, "quality": 0.8636363636363636, "length": 19}, "so_13267648_13267797_5": {"section_id": 539, "quality": 0.6, "length": 21}}, "n4659": {"so_13267648_13267797_2": {"section_id": 569, "quality": 0.8636363636363636, "length": 19}, "so_13267648_13267797_5": {"section_id": 569, "quality": 0.6, "length": 21}}}, "13267839": {"ParentId": "13267648", "CommentCount": "3", "Body": "<p><strong>Any use of <code>#pragma</code> is compiler specific.</strong></p>\n<p><a href=\"http://en.wikipedia.org/wiki/C_preprocessor#Compiler-specific_preprocessor_features\" rel=\"nofollow\">For example</a> :\nGNU, Intel and IBM :</p>\n<pre><code>#warning \"Do not use ABC, which is deprecated. Use XYZ instead.\"\n</code></pre>\n<p>Microsoft :</p>\n<pre><code>#pragma message(\"Do not use ABC, which is deprecated. Use XYZ instead.\")\n</code></pre>\n<p>Regarding your specific question about the <code>#pragma optimize</code>, it is supported by <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Function-Specific-Option-Pragmas.html\" rel=\"nofollow\">gcc</a> and <a href=\"http://msdn.microsoft.com/en-us/library/chh3fb0k.aspx\" rel=\"nofollow\">microsoft</a>, but it doesn't mean it will be in the future.</p>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "13267839", "Score": "1", "CreationDate": "2012-11-07T10:32:35.180", "LastActivityDate": "2012-11-07T10:32:35.180"}});