post_cb({"bq_ids": {"n4140": {"so_13127455_13127916_0": {"length": 11, "quality": 1.0, "section_id": 6325}, "so_13127455_13127916_2": {"length": 8, "quality": 0.7272727272727273, "section_id": 6276}}, "n3337": {"so_13127455_13127916_0": {"length": 11, "quality": 1.0, "section_id": 6082}, "so_13127455_13127916_2": {"length": 8, "quality": 0.7272727272727273, "section_id": 6036}}, "n4659": {"so_13127455_13127916_0": {"length": 11, "quality": 1.0, "section_id": 7835}, "so_13127455_13127916_2": {"length": 11, "quality": 1.0, "section_id": 7783}}}, "13127504": {"Id": "13127504", "PostTypeId": "2", "Body": "<p>Nothing will happen. A smart assignment operator might return immediately if <code>&amp;other == this</code>. Otherwise it will assign its internals to themselves, doing nothing.</p>\n", "LastEditorUserId": "713961", "LastActivityDate": "2012-10-29T18:33:43.143", "Score": "0", "CreationDate": "2012-10-29T18:26:02.430", "ParentId": "13127455", "CommentCount": "3", "OwnerUserId": "713961", "LastEditDate": "2012-10-29T18:33:43.143"}, "13127916": {"Id": "13127916", "PostTypeId": "2", "Body": "<p>17.6.4.9 Function arguments [res.on.arguments]</p>\n<blockquote>\n<p id=\"so_13127455_13127916_0\">1 Each of the following applies to all arguments to functions defined\n  in the C++ standard library, unless explicitly stated otherwise.</p>\n<p id=\"so_13127455_13127916_1\">...</p>\n<ul>\n<li>If a function argument binds to an rvalue reference parameter, the implementation may assume that this parameter is a unique reference to\n  this argument. [ Note: If the parameter is a generic parameter of the\n  form T&amp;&amp; and an lvalue of type A is bound, the argument binds to an\n  lvalue reference (14.8.2.1) and thus is not covered by the previous\n  sentence. \u2014 end note ] [ Note: If a program casts an lvalue to an\n  xvalue while passing that lvalue to a library function (e.g. by\n  calling the function with the argument move(x)), the program is\n  effectively asking that function to treat that lvalue as a temporary.\n  The implementation is free to optimize away aliasing checks which\n  might be needed if the argument was anlvalue. \u2014endnote]</li>\n</ul>\n</blockquote>\n<p>So, the implementation of <code>std::vector&lt;T, A&gt;::operator=(vector&amp;&amp; other)</code> is allowed to assume that <code>other</code> is a prvalue.  And if <code>other</code> is a prvalue, self-move-assignment is not possible.</p>\n<p>What is likely to happen:</p>\n<p><code>v</code> will be left in a resource-less state (0 capacity).  If <code>v</code> already has 0 capacity, then this will be a no-op.</p>\n<p><strong>Update</strong></p>\n<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4618.pdf\" rel=\"nofollow noreferrer\">latest working draft, N4618</a> has been modified to clearly state that in the <code>MoveAssignable</code> requirements the expression:</p>\n<pre><code>t = rv\n</code></pre>\n<p>(where <code>rv</code> is an rvalue), <code>t</code> need only be the equivalent value of <code>rv</code> prior to the assignment if <code>t</code> and <code>rv</code> do not reference the same object.  And regardless, <code>rv</code>'s state is unspecified after the assignment.  There is an additional note for further clarification:</p>\n<blockquote>\n<p id=\"so_13127455_13127916_2\"><code>rv</code> must still meet the requirements of the library component that is using it, whether or not <code>t</code> and <code>rv</code> refer to the same object.</p>\n</blockquote>\n", "LastEditorUserId": "576911", "LastActivityDate": "2017-02-12T19:24:45.297", "Score": "31", "CreationDate": "2012-10-29T18:55:59.147", "ParentId": "13127455", "CommentCount": "5", "OwnerUserId": "576911", "LastEditDate": "2017-02-12T19:24:45.297"}, "13127455": {"ViewCount": "2205", "Body": "<p>What does the C++11 standard say about self move assignment in relation to the standard library? To be more concrete, what, if anything, is guaranteed about what <code>selfAssign</code> does?</p>\n<pre><code>template&lt;class T&gt;\nstd::vector&lt;T&gt; selfAssign(std::vector&lt;T&gt; v) {\n  v = std::move(v);\n  return v;\n}\n</code></pre>\n", "AcceptedAnswerId": "13127916", "Title": "What does the standard library guarantee about self move assignment?", "CreationDate": "2012-10-29T18:23:22.203", "Id": "13127455", "CommentCount": "4", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2014-07-07T07:28:06.750", "LastEditorUserId": "2756719", "LastActivityDate": "2017-02-12T19:24:45.297", "Score": "31", "OwnerUserId": "822360", "Tags": "<c++><stl><c++11><move-semantics>", "AnswerCount": "2"}});