post_cb({"bq_ids": {"n4140": {"so_19066974_19067212_2": {"length": 30, "quality": 0.9375, "section_id": 6955}, "so_19066974_19067212_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 3328}, "so_19066974_19067212_0": {"length": 18, "quality": 1.0, "section_id": 3327}}, "n3337": {"so_19066974_19067212_2": {"length": 30, "quality": 0.9375, "section_id": 6702}, "so_19066974_19067212_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 3197}}, "n4659": {"so_19066974_19067212_2": {"length": 30, "quality": 0.9375, "section_id": 8452}, "so_19066974_19067212_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 4093}, "so_19066974_19067212_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 4094}}}, "19067212": {"Id": "19067212", "PostTypeId": "2", "Body": "<p><code>std::initializer_list&lt;T&gt;</code> should only be used as a temporary object or function parameter, since it refers to a temporary array.</p>\n<p>8.5.4/5-6:</p>\n<blockquote>\n<p id=\"so_19066974_19067212_0\">An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation allocated a temporary array of <em>N</em> elements of type <code>const E</code>, where <em>N</em> is the number of elements in the initializer list. ...</p>\n<p id=\"so_19066974_19067212_1\">The array has the same lifetime as any other temporary object (12.2), except that initializing an <code>initializer_list</code> object from the array extends the lifetime of the array exactly like binding a reference to a temporary.</p>\n</blockquote>\n<p>18.9/2:</p>\n<blockquote>\n<p id=\"so_19066974_19067212_2\">An object of type <code>initializer_list&lt;E&gt;</code> provides access to an array of objects of type <code>const E</code>.  [Note: A pair of pointers or a pointer plus a length would be obvious representations for <code>initializer_list</code>.  <code>initializer_list</code> is used to implement initializer lists as specified in 8.5.4.  Copying an initializer list does not copy the underlying elements.]</p>\n</blockquote>\n<p>So returning an <code>initializer_list</code> object is just as bad as:</p>\n<pre><code>struct int_ref {\n    int&amp; ref;\n    explicit constexpr int_ref(int&amp; r) : ref(r) {}\n};\n\nint_ref func() {\n    int n = 5;\n    return int_ref(n);\n}\n</code></pre>\n", "LastActivityDate": "2013-09-28T12:57:16.403", "CommentCount": "0", "CreationDate": "2013-09-28T12:57:16.403", "ParentId": "19066974", "Score": "7", "OwnerUserId": "459640"}, "19066974": {"ViewCount": "167", "Body": "<p>I am trying to use a function template <code>foo</code> to convert arguments to a <code>initializer_list</code>. However, the <code>initializer_list</code> it converted has strange values which are not the same as the input arguments.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\ntemplate&lt;class T&gt;\nvoid func(std::initializer_list&lt;T&gt; a_args)\n{\n    if (a_args.begin() != a_args.end())\n    {\n        auto last = prev(a_args.end());\n        copy(a_args.begin(), last, ostream_iterator&lt;int&gt;(cout, \",\"));\n        cout &lt;&lt; *last;\n    }\n    cout &lt;&lt; endl;\n}\n\ntemplate&lt;class T, class ...Args&gt;\nstruct first_of\n{\n    typedef T type;\n};\n\ntemplate&lt;class ...Args&gt;\ninitializer_list&lt;typename first_of&lt;Args...&gt;::type&gt; foo(Args&amp;&amp;... args)\n{\n    return { forward&lt;Args&gt;(args)... };\n}\n\nint main()\n{\n    func({1,2,3});\n    auto x = foo(1,2,3);\n    func(x); //this should be the same as func({1,2,3}) but not.\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/b48381daeb329646\" rel=\"nofollow\">LIVE CODE</a></p>\n<p>The ouput is as follows:</p>\n<pre><code>1,2,3\n-326483696,32767,0\n</code></pre>\n<p>What is wrong here?</p>\n", "AcceptedAnswerId": "19067212", "Title": "Using initializer_list in template function", "CreationDate": "2013-09-28T12:30:05.733", "Id": "19066974", "CommentCount": "2", "LastEditDate": "2013-09-28T12:33:23.307", "PostTypeId": "1", "LastEditorUserId": "985296", "LastActivityDate": "2013-09-28T12:57:16.403", "Score": "4", "OwnerUserId": "1444658", "Tags": "<c++><templates><c++11>", "AnswerCount": "1"}});