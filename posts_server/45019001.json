post_cb({"45019358": {"Id": "45019358", "PostTypeId": "2", "Body": "<p>The following program contains the error</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace _1{\n    int f(){\n        std::cout &lt;&lt; \"_1::f\\n\";\n    }\n}\n\nnamespace _2{\n/*\n*If a function declaration in namespace scope or block scope has the \n*same name and the same parameter types as a function introduced by\n* a using-declaration\n*/\n    using _1::f;\n// This is not the same function as introduced by the using directive\n    int f(){\n        std::cout &lt;&lt; \"_2::f\\n\";\n    }\n}\n\nint main(){\n    _2::f();\n}\n</code></pre>\n<p>The diagnostic is </p>\n<pre><code>main.cpp: In function \u2018int _2::f()\u2019:\nmain.cpp:13:11: error: \u2018int _2::f()\u2019 conflicts with a previous declaration\n     int f(){\n</code></pre>\n<p>As a contrast, the following program is correct. The _1 namespace is introduced via a using directive. </p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace _1{\n    int f(){\n        std::cout &lt;&lt; \"_1::f\\n\";\n    }\n}\n\nnamespace _2{\n    using namespace _1;\n\n    int f(){\n        std::cout &lt;&lt; \"_2::f\\n\";\n    }\n}\n\nint main(){\n    _2::f();\n}\n</code></pre>\n<p>With the expected  output </p>\n<pre><code>_2::f\n</code></pre>\n<p>As for the same situation in block scope you have </p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace _1{\n    int f(){\n        std::cout &lt;&lt; \"_1::f\\n\";\n    }\n}\n\nnamespace _2{\n\n    int g(){\n// As before but in block scope.\n        using _1::f;\n\n        int f();\n        f();\n    }\n    int f(){\n        std::cout &lt;&lt; \"_2::f\\n\";        \n    }\n\n}\n\nint main(){\n    _2::f();\n}\n</code></pre>\n<p>The diagnostic is identical</p>\n<pre><code>main.cpp: In function \u2018int _2::g()\u2019:\nmain.cpp:15:15: error: \u2018int _2::f()\u2019 conflicts with a previous declaration\n         int f();\n               ^\n</code></pre>\n<p>The parallel construct of the successful sample above would be </p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace _1{\n    int f(){\n        std::cout &lt;&lt; \"_1::f\\n\";\n    }\n}\n\nnamespace _2{\n\n    int g(){\n        using namespace _1;\n\n        int f();\n        f();\n    }\n    int f(){\n        std::cout &lt;&lt; \"_2::f\\n\";        \n    }\n\n}\n\nint main(){\n    _2::g();\n}\n</code></pre>\n<p>With the output </p>\n<pre><code>_2::f\n</code></pre>\n", "LastEditorUserId": "451600", "LastActivityDate": "2017-07-10T18:51:30.557", "Score": "3", "CreationDate": "2017-07-10T18:33:13.693", "ParentId": "45019001", "CommentCount": "3", "OwnerUserId": "451600", "LastEditDate": "2017-07-10T18:51:30.557"}, "bq_ids": {"n4140": {"so_45019001_45019001_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5503}}, "n3337": {"so_45019001_45019001_0": {"length": 19, "quality": 1.0, "section_id": 5289}}, "n4659": {"so_45019001_45019001_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 6937}}}, "45019001": {"ViewCount": "135", "Body": "<p>I'm studying the C++03 Standard and am now reading <code>[7.3.3]/11</code>, but I'm having trouble understanding the following passage:</p>\n<blockquote>\n<p id=\"so_45019001_45019001_0\">If a function declaration in namespace scope or block scope has the same name and the same parameter\n  types as a function introduced by a using-declaration, and the declarations do not declare the same function,\n  the program is ill-formed.</p>\n</blockquote>\n<p>I haven't found any examples of this situation anywhere and I don't understand the meaning of this passage.</p>\n", "Title": "What is the meaning of the sentence referring to functions introduced by a using declaration?", "CreationDate": "2017-07-10T18:11:00.563", "LastActivityDate": "2017-07-10T18:51:30.557", "CommentCount": "3", "LastEditDate": "2017-07-10T18:24:33.343", "PostTypeId": "1", "LastEditorUserId": "3980929", "Id": "45019001", "Score": "4", "OwnerUserId": "8212126", "Tags": "<c++><c++03>", "AnswerCount": "2"}, "45019105": {"Id": "45019105", "PostTypeId": "2", "Body": "<p>What it means is that:</p>\n<pre><code>namespace namespace_1\n{\n    void foo(int number);\n}\nusing namespace_1::foo;\nvoid foo(int roll_no);\n</code></pre>\n<p>This means the program is ill-formed.\nI believe it means to say that the function would be confusing to read. As at one point, the function definition would be using the passed int as an integer(general) but in the other case, we'd be using it as a roll_no.</p>\n<p>This would also cause ambiguity in overloaded function matching.</p>\n<p>The source you are citing gives an example just below the lines you have cited:</p>\n<pre><code>namespace B {\n  void f(int);\n  void f(double);\n}\nnamespace C {\n  void f(int);\n  void f(double);\n  void f(char);\n}\nvoid h() {\n  using B::f;       // B::f(int) and B::f(double)\n  using C::f;       // C::f(int), C::f(double), and C::f(char)\n  f('h');           // calls C::f(char)\n  f(1);             // error: ambiguous: B::f(int) or C::f(int)?\n  void f(int);      // error: f(int) conflicts with C::f(int) and B::f(int)\n}\n</code></pre>\n", "LastEditorUserId": "7800641", "LastActivityDate": "2017-07-10T18:44:46.740", "Score": "5", "CreationDate": "2017-07-10T18:17:49.787", "ParentId": "45019001", "CommentCount": "3", "OwnerUserId": "7800641", "LastEditDate": "2017-07-10T18:44:46.740"}});