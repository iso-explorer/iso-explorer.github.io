post_cb({"5330672": {"ViewCount": "560", "Body": "<p>I do a lot of Win32 programming in C++ and many Win32 structures have a 'size' (often called <code>cbSize</code> or <code>length</code>) member as the first element which needs to be set before the relevant API call can be made.  For example:</p>\n<pre><code>WINDOWPLACEMENT wp;\nwp.length = sizeof(WINDOWPLACEMENT);\nGetWindowPlacement(hWnd, &amp;wp);\n</code></pre>\n<p>Now, I think it is good practice to initialize structure members to zero which I can do with:</p>\n<pre><code>WINDOWPLACEMENT wp = { };\n</code></pre>\n<p>or</p>\n<pre><code>WINDOWPLACEMENT wp = { 0 };\n</code></pre>\n<p>However, what happens to the other members of the struct if I initialize the first member like this:</p>\n<pre><code>WINDOWPLACEMENT wp = { sizeof(WINDOWPLACEMENT) };\n</code></pre>\n<p>Are they automatically initialized to zero?  Or does it depend on which compiler I'm using and whether it's a debug build or not?</p>\n", "AcceptedAnswerId": "5330707", "Title": "Initializing the first element in a struct", "CreationDate": "2011-03-16T19:26:25.197", "Id": "5330672", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-03-16T19:30:29.817", "Score": "6", "OwnerUserId": "9236", "Tags": "<c++>", "AnswerCount": "3"}, "5330707": {"Id": "5330707", "PostTypeId": "2", "Body": "<p>Yes, they're automatically initialized to zero.</p>\n<p>8.5.1/7:</p>\n<blockquote>\n<p id=\"so_5330672_5330707_0\">If there are fewer initializers in the\n  list than there are members in the\n  aggregate, then each member not\n  explicitly initialized shall be\n  value-initialized (8.5). [Example:</p>\n</blockquote>\n<pre><code>struct S { int a; char* b; int c; };\nS ss = { 1, \"asdf\" };\n</code></pre>\n<blockquote>\n<p id=\"so_5330672_5330707_1\">initializes ss.a with 1, ss.b with\n  \"asdf\", and ss.c with the value of an\n  expression of the form int(), that is,\n  0. ]</p>\n</blockquote>\n", "LastActivityDate": "2011-03-16T19:29:15.780", "CommentCount": "1", "CreationDate": "2011-03-16T19:29:15.780", "ParentId": "5330672", "Score": "11", "OwnerUserId": "616700"}, "5330721": {"Id": "5330721", "PostTypeId": "2", "Body": "<p>If you are sure the size is the first element, this will be ok. Any members that don't get a value in the initializer will be zeroed.</p>\n", "LastActivityDate": "2011-03-16T19:30:29.817", "CommentCount": "0", "CreationDate": "2011-03-16T19:30:29.817", "ParentId": "5330672", "Score": "1", "OwnerUserId": "597607"}, "bq_ids": {"n4140": {"so_5330672_5330710_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3304}, "so_5330672_5330710_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 3304}, "so_5330672_5330707_1": {"length": 9, "quality": 1.0, "section_id": 3304}, "so_5330672_5330707_0": {"length": 12, "quality": 0.8, "section_id": 3304}}, "n3337": {"so_5330672_5330710_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3174}, "so_5330672_5330710_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 3174}, "so_5330672_5330707_1": {"length": 9, "quality": 1.0, "section_id": 3174}, "so_5330672_5330707_0": {"length": 12, "quality": 0.8, "section_id": 3174}}, "n4659": {"so_5330672_5330710_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 4070}, "so_5330672_5330710_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 4070}, "so_5330672_5330707_1": {"length": 9, "quality": 1.0, "section_id": 4070}, "so_5330672_5330707_0": {"length": 10, "quality": 0.6666666666666666, "section_id": 4070}}}, "5330710": {"Id": "5330710", "PostTypeId": "2", "Body": "<p>This:</p>\n<pre><code>WINDOWPLACEMENT wp = { X };\n</code></pre>\n<p>Will initialize all remaining members to 0 (assuming POD).</p>\n<p>See: 8.5.1 Aggregates [dcl.init.aggr] Paragraph: 7:</p>\n<blockquote>\n<p id=\"so_5330672_5330710_0\">7 If there are fewer initializer-clauses in the list than there are members in the aggregate, then each member not explicitly initialized shall be value-initialized (8.5).</p>\n<p id=\"so_5330672_5330710_1\">[ Example:</p>\n</blockquote>\n<pre><code>   struct S { int a; char* b; int c; };\n   S ss = { 1, \"asdf\" };\n</code></pre>\n<blockquote>\n<p id=\"so_5330672_5330710_2\">initializes ss.a with 1, ss.b with \"asdf\", and ss.c with the value of an expression of the form int(), that\n  is, 0. \u2014end example ]</p>\n</blockquote>\n", "LastActivityDate": "2011-03-16T19:29:45.080", "CommentCount": "1", "CreationDate": "2011-03-16T19:29:45.080", "ParentId": "5330672", "Score": "0", "OwnerUserId": "14065"}});