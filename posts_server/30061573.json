post_cb({"30061924": {"ParentId": "30061573", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>When declaring the array you specify its size, that's why in your case 1 is correct, if you want an array of size 1.</p>\n<p>When accessing array elements you need to use a 0-based index. So to access the first element of an array you would use 0.</p>\n<p>Your code would then look like this</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arrows[1] = {23};\n\n    for(arrows[0]; arrows[0] &lt; 300; arrows[0]++)\n    {\n        std::cout &lt;&lt; arrows[0];\n    }\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "2422224", "LastEditorUserId": "2422224", "LastEditDate": "2015-05-05T20:05:12.360", "Id": "30061924", "Score": "3", "CreationDate": "2015-05-05T19:45:01.493", "LastActivityDate": "2015-05-05T20:05:12.360"}, "30061949": {"ParentId": "30061573", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I think the interactive compiler is broken.  It even fails on:</p>\n<pre><code>for(;;) {\n}\n</code></pre>\n<p>EDIT: I was wrong ... you can't just put code in there, adding a <code>main</code> function worked.</p>\n<pre><code>#include &lt;iostream&gt;    \nint main( int argc, const char* argv[] )\n{\n    int arrows[1] = {23};\n    for(arrows[1]; arrows[1] &lt; 300; arrows[1]++)\n    {\n        std::cout &lt;&lt; arrows[1];\n    }\n}\n</code></pre>\n", "OwnerUserId": "925549", "LastEditorUserId": "925549", "LastEditDate": "2015-05-05T19:52:25.000", "Id": "30061949", "Score": "2", "CreationDate": "2015-05-05T19:47:05.797", "LastActivityDate": "2015-05-05T19:52:25.000"}, "30062077": {"ParentId": "30061573", "CommentCount": "1", "Body": "<p>I believe learning with this online compiler is not the right way...</p>\n<p>This code works under a \"normal\" dev environment.</p>\n<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\n\n\nint main()\n{\n    int arrows[1] = { 23 }; // initialize array of size one and assign it value 23\n    // sizeof(arrows)/sizeof(*arrows) calculates the length of an array\n    // iterate through all elements of the array and display their values..\n    for (int i = 0; i &lt; sizeof(arrows) / sizeof(*arrows); i++)\n    {\n        cout &lt;&lt; arrows[i];\n    }\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "4096653", "PostTypeId": "2", "Id": "30062077", "Score": "0", "CreationDate": "2015-05-05T19:55:00.073", "LastActivityDate": "2015-05-05T19:55:00.073"}, "bq_ids": {"n4659": {"so_30061573_30061573_1": {"section_id": 180, "quality": 0.8, "length": 4}, "so_30061573_30061573_2": {"section_id": 180, "quality": 0.8, "length": 4}}}, "30061573": {"CommentCount": "8", "AcceptedAnswerId": "30061949", "LastEditDate": "2015-05-05T20:08:54.447", "LastEditorUserId": "477420", "CreationDate": "2015-05-05T19:25:43.280", "LastActivityDate": "2015-05-05T20:08:54.447", "PostTypeId": "1", "ViewCount": "93", "Title": "Array in for-loop is not working for some reason", "Id": "30061573", "OwnerUserId": "4496931", "Body": "<p>I don't see why this won't compile when the syntax is correct:</p>\n<pre><code>int arrows[1] = {23};\n    for(arrows[1]; arrows[1] &lt; 300; arrows[1]++)\n    {\n      cout &lt;&lt; arrows[1];\n    }\n</code></pre>\n<p>Errors:</p>\n<blockquote>\n<p id=\"so_30061573_30061573_0\">error: expected unqualified-id before 'for' !!</p>\n<p id=\"so_30061573_30061573_1\">error: 'arrows' does not\n  name a type !!</p>\n<p id=\"so_30061573_30061573_2\">error: 'arrows' does not name a type</p>\n</blockquote>\n<p>I am using <a href=\"http://gcc.godbolt.org/\" rel=\"nofollow\">this online compiler</a> (x86 GCC 4.9.2).</p>\n", "Tags": "<c++><arrays><for-loop><compiler-errors>", "Score": "-2", "AnswerCount": "3"}});