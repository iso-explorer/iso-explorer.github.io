post_cb({"47584093": {"ParentId": "47583864", "LastEditDate": "2017-12-01T20:29:40.813", "CommentCount": "3", "CreationDate": "2017-11-30T23:04:24.400", "OwnerUserId": "6040181", "LastEditorUserId": "6040181", "PostTypeId": "2", "Id": "47584093", "Score": "18", "Body": "<p>The standard [<strong>[basic.start.main]</strong>] specifies the following constraints on the <code>main</code> function:</p>\n<blockquote>\n<p id=\"so_47583864_47584093_0\">An implementation shall allow both:</p>\n<p id=\"so_47583864_47584093_1\">\u2014 a function of () returning int and</p>\n<p id=\"so_47583864_47584093_2\">\u2014 a function of (int, pointer to pointer to char) returning int</p>\n</blockquote>\n<p>Moreover:</p>\n<blockquote>\n<p id=\"so_47583864_47584093_3\">A program that defines main as deleted or that declares main to be inline, static, or constexpr is ill-formed.</p>\n</blockquote>\n<p>In practice, there is no specification about <code>noexcept</code> qualifier for <code>main</code>. On the other hands, <a href=\"http://en.cppreference.com/w/cpp/language/noexcept_spec\" rel=\"nofollow noreferrer\"><code>noexcept</code></a> is allowed as a specifier for whatever function. That would imply <code>main noexcept</code> is <em>not</em> <em>ill-formed</em>.</p>\n<hr>\n<h2>What's difference w/o <code>noexcept</code> main?</h2>\n<p>Since the standard is not very explicit about <code>noexcept</code> for <code>main</code> function as we've seen, we can try to deduct some behaviour and check the implementations.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/language/noexcept_spec\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_47583864_47584093_4\">Whenever an exception is thrown and the search for a handler encounters the outermost block of a non-throwing function, the function std::terminate is called.</p>\n</blockquote>\n<p>While the general rule for exceptions, from <a href=\"http://en.cppreference.com/w/cpp/language/throw\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_47583864_47584093_5\">If an exception is thrown and not caught, including exceptions that escape the initial function of std::thread, the main function, and the constructor or destructor of any static or thread-local objects, then std::terminate is called. It is implementation-defined whether any stack unwinding takes place for uncaught exceptions.</p>\n</blockquote>\n<p>This implies that <code>throw</code> from <code>main</code> function <em>always</em> generates a <code>std::terminate</code> invocation. Regardless of <code>noexcept</code> specification of the <code>main</code>.</p>\n<h3>Implementation side:</h3>\n<p>Indeed, the following codes:</p>\n<pre><code>int main(int argc, char* argvp[]) {\n  throw 1;\n  return 0;\n}\n</code></pre>\n<p>and </p>\n<pre><code>int main(int argc, char* argvp[]) noexcept {\n  throw 1;\n  return 0;\n}\n</code></pre>\n<p>will produce the same output assembly. For example in <a href=\"https://godbolt.org/g/AauTP2\" rel=\"nofollow noreferrer\">GCC</a>:</p>\n<pre><code>main:\n        movl    $4, %edi\n        subq    $8, %rsp\n        call    __cxa_allocate_exception\n        xorl    %edx, %edx\n        movl    $1, (%rax)\n        movl    typeinfo for int, %esi\n        movq    %rax, %rdi\n        call    __cxa_throw\n</code></pre>\n<p>That means it will be resolved into an invocation of <code>std::terminate</code> because the stack frame is empty at \"main level\" regardless of <code>noexcept</code> specification.</p>\n</hr>", "LastActivityDate": "2017-12-01T20:29:40.813"}, "47583864": {"CommentCount": "9", "ViewCount": "376", "CreationDate": "2017-11-30T22:44:41.793", "LastActivityDate": "2017-12-02T02:36:27.697", "Title": "Can the \"main\" function be declared with the \"noexcept\" specifier?", "FavoriteCount": "4", "PostTypeId": "1", "Id": "47583864", "Score": "21", "Body": "<p>Is the following code valid in C++?</p>\n<pre><code>int main() noexcept\n{\n}\n</code></pre>\n<p>Both <em>clang++ 3.8.0</em> and <em>g++ 7.2.0</em> <a href=\"http://coliru.stacked-crooked.com/a/358ca47b06c9f32b\" rel=\"noreferrer\">compile it fine</a> (with <code>-std=c++14 -O0 -Wall -Wextra -Werror -pedantic-errors</code> compilation flags).</p>\n<p>Is it allowed to use complex conditions (e.g. including <code>noexcept</code> operator) in the <code>noexcept</code> specification of the <code>main</code> function?</p>\n<p>And what about C++17? As I know <code>noexcept</code> specifier becomes the part of the function type in this revision of the standard.</p>\n", "Tags": "<c++><c++11><main><c++1z><noexcept>", "OwnerUserId": "3043539", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47583864_47584093_4": {"section_id": 3371, "quality": 0.9230769230769231, "length": 12}, "so_47583864_47584093_2": {"section_id": 7146, "quality": 1.0, "length": 7}, "so_47583864_47584093_3": {"section_id": 7147, "quality": 1.0, "length": 9}}, "n3337": {"so_47583864_47584093_4": {"section_id": 3241, "quality": 0.9230769230769231, "length": 12}, "so_47583864_47584093_2": {"section_id": 3073, "quality": 0.8571428571428571, "length": 6}, "so_47583864_47584093_3": {"section_id": 6891, "quality": 1.0, "length": 9}}, "n4659": {"so_47583864_47584093_4": {"section_id": 4133, "quality": 0.9230769230769231, "length": 12}, "so_47583864_47584093_2": {"section_id": 8647, "quality": 1.0, "length": 7}, "so_47583864_47584093_3": {"section_id": 8648, "quality": 1.0, "length": 9}}}, "47599662": {"ParentId": "47583864", "LastEditDate": "2017-12-02T02:36:27.697", "CommentCount": "1", "CreationDate": "2017-12-01T18:46:20.557", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "PostTypeId": "2", "Id": "47599662", "Score": "5", "Body": "<p>The type of <code>main</code> in  <code>int main() noexcept;</code> is \"function of <code>()</code> returning <code>int</code>\" in C++14 and \"<code>noexcept</code> function of <code>()</code> returning <code>int</code>\" in C++17.</p>\n<p>The former is explicitly required to be supported by [basic.start.main]. The latter isn't.</p>\n<p>This looks like a defect in C++17.</p>\n", "LastActivityDate": "2017-12-02T02:36:27.697"}});