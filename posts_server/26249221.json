post_cb({"26249221": {"CommentCount": "0", "ViewCount": "71", "OwnerDisplayName": "user2953119", "CreationDate": "2014-10-08T04:28:11.140", "LastActivityDate": "2014-10-08T04:59:09.513", "PostTypeId": "1", "AcceptedAnswerId": "26249313", "Title": "Unsigned narrow character type number representation", "Id": "26249221", "Score": "1", "Body": "<p><code>N3797::3.9.1/1  [basic.fundamental]</code> says</p>\n<blockquote>\n<p id=\"so_26249221_26249221_0\">For <em>unsigned</em> narrow character types, all possible bit patterns of the\n  value representation represent numbers.</p>\n</blockquote>\n<p>That's a bit unclear for me. We have the following ranges for narrow character types:</p>\n<pre><code>unsigned char := 0 -- 255\nsigned char : = -128 -- 127\n</code></pre>\n<p>For both <code>unsgined char</code> and <code>signed char</code> objects we have <code>one-to-one</code> mapping from the set of bits in these object representation to the integral value they could represent. The Standard says <code>N3797::3.9.1/1  [basic.fundamental]</code></p>\n<blockquote>\n<p id=\"so_26249221_26249221_1\">These requirements do not hold for other types.</p>\n</blockquote>\n<p>Why the requirement I cited doesn't hold say for <code>signed char</code> type?</p>\n", "Tags": "<c++><memory>", "AnswerCount": "2"}, "26249369": {"ParentId": "26249221", "CommentCount": "0", "CreationDate": "2014-10-08T04:47:52.620", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "26249369", "Score": "1", "Body": "<p>A few machines have what are called \"trap representations\". This means (for example) that an <code>int</code> can contain an extra bit (or more than one) to signify whether it has been initialized or not.</p>\n<p>If you try to read an <code>int</code> with that bit saying it hasn't been initialized, it can trigger some sort of trap/exception/fault that (for example) immediately shuts down your program with some sort of error message. Any time you <em>write</em> a value to the <code>int</code>, that trap representation is cleared, so reading from it can/will work.</p>\n<p>So basically, when your program starts, it initializes <em>all</em> your <code>int</code>s to such trap representations. If you try to read from an uninitialized variable, the hardware will catch it immediately and give you an error message.</p>\n<p>The standard mandates that for <code>unsigned char</code>, no such trap representation is possible--all the bits of an <code>unsigned char</code> must be \"visible\"--they must form part of the value. That means none of them can be hidden; <em>no</em> pattern of bits you put into an <code>unsigned char</code> can form a trap representation (or anything similar). Any bits you put into <code>unsigned char</code> must simply form some value.</p>\n<p>Any other type, however, <em>can</em> have trap representations. If, for example, you take some (more or less) arbitrarily chosen 8 bits out of some other type, and read them as an <code>unsigned char</code>, they'll always form a value you can read, write to a file, etc. If, however, you attempt to read them as <em>any</em> other type (<code>signed char</code>, <code>unsigned int</code>, etc.) it's allowable for it to form a trap representation, and attempting to do <em>anything</em> with it can give undefined behavior.</p>\n", "LastActivityDate": "2014-10-08T04:47:52.620"}, "bq_ids": {"n4140": {"so_26249221_26249221_1": {"section_id": 7210, "quality": 0.8, "length": 4}, "so_26249221_26249221_0": {"section_id": 7210, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_26249221_26249221_1": {"section_id": 6954, "quality": 0.8, "length": 4}, "so_26249221_26249221_0": {"section_id": 6954, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_26249221_26249221_1": {"section_id": 8719, "quality": 0.8, "length": 4}, "so_26249221_26249221_0": {"section_id": 8719, "quality": 0.6923076923076923, "length": 9}}}, "26249313": {"ParentId": "26249221", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-10-08T04:41:17.400", "Score": "3", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:57:08.810", "Id": "26249313", "OwnerUserId": "204847", "Body": "<p>Signed types can use one of three representations: two's complement, one's complement, or sign-magnitude. The last two each have one bit pattern (the negation of zero) which doesn't represent a number.</p>\n<p>Two's complement is <a href=\"https://stackoverflow.com/questions/12276957\">more or less</a> universal for integer types these days; but the language still allows for the others.</p>\n", "LastActivityDate": "2014-10-08T04:59:09.513"}});