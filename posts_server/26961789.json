post_cb({"bq_ids": {"n4140": {"so_26961789_26961867_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 3574}}, "n3337": {"so_26961789_26961867_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 3439}}, "n4659": {"so_26961789_26961867_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 4339}}}, "26961867": {"Id": "26961867", "PostTypeId": "2", "Body": "<p>There are two differences that I know of:</p>\n<ol>\n<li>Using <code>mt199937</code> will be faster but less cryptographically secure. </li>\n<li><p><code>std::random_device</code> will always be random, but if you initialize your <code>mt19937</code> with a constant seed it will always give you the same random numbers:</p>\n<p><code>std::mt19937 mt(2014);</code></p></li>\n</ol>\n<p>Will give the same sequence of random bits every time. This can be useful if you want to test a specific behavior over and over again. The standard requires this in 26.5.5/4:</p>\n<blockquote>\n<p id=\"so_26961789_26961867_0\"><em>Required behavior</em>: The 10000th consecutive invocation of a default-constructed object of type <code>mt19937</code> shall produce the value 4123659995.</p>\n</blockquote>\n<p>There is no such equivalent consistency with <code>std::random_device</code>.</p>\n", "LastActivityDate": "2014-11-16T20:45:40.010", "CommentCount": "9", "CreationDate": "2014-11-16T20:45:40.010", "ParentId": "26961789", "Score": "1", "OwnerUserId": "2069064"}, "26961789": {"ViewCount": "758", "Body": "<p>In C++11 one can generate numbers with the use of <code>std::random_device</code> with or without a pseudo random number generator like mt19937.</p>\n<p>What will be the difference using this in this exemplar code:</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    std::random_device rd;\n    std::mt19937 mt(rd());\n    std::uniform_real_distribution&lt;double&gt; dist(1, 10);\n\n    for (int i=0; i&lt;16; ++i)\n        std::cout &lt;&lt; dist(rd) &lt;&lt; \"\\t\" &lt;&lt; dist(mt) &lt;&lt; \"\\n\";\n}\n</code></pre>\n", "AcceptedAnswerId": "26961833", "Title": "What is the difference between using std::random_device with pRNG e.g. std::mt19937 and without?", "CreationDate": "2014-11-16T20:37:41.250", "Id": "26961789", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-11-16T20:47:56.873", "Score": "4", "OwnerUserId": "675100", "Tags": "<c++><c++11><random><prng>", "AnswerCount": "2"}, "26961833": {"Id": "26961833", "PostTypeId": "2", "Body": "<p><code>std::random_device</code> is supposed to get you a seed for engines like <code>mt19937</code>. The quality of successive numbers produced is completely undefined and may easily be insufficient for practical purposes (such as cryptography), so relying on that is out of question. </p>\n<p>Apart from that, <code>mt19937</code> will give you the same sequence when given the same seed. A <code>random_device</code>s values can be only influenced by the string given to its constructor... which implies implementation-defined behavior.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-16T20:47:56.873", "Score": "4", "CreationDate": "2014-11-16T20:42:45.643", "ParentId": "26961789", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-11-16T20:47:56.873"}});