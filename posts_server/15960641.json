post_cb({"15960745": {"ParentId": "15960641", "PostTypeId": "2", "CommentCount": "0", "Body": "<h1>C++ ISO</h1>\n<p>7.1.2/3:</p>\n<blockquote>\n<p id=\"so_15960641_15960745_0\"><strong>A function defined within a class definition is an inline function</strong>. The inline specifier shall not appear on a block scope function declaration. If the inline specifier is used in a friend declaration, that declaration shall be a definition or the function shall have previously been declared inline.</p>\n</blockquote>\n<p>3.2/4:</p>\n<blockquote>\n<p id=\"so_15960641_15960745_1\"><strong>Every program shall contain exactly one definition of every non-inline function</strong> or variable that is odr-used in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and 12.8). <strong>An inline function shall be defined in every translation unit in which it is odr-used</strong>.</p>\n</blockquote>\n<p>3.2/6:</p>\n<blockquote>\n<p id=\"so_15960641_15960745_2\"><strong>There can be more than one definition of</strong> a class type, enumeration type, <strong>inline function with external linkage (7.1.2)</strong>, class template, non-static function template, static data member of a class template, member function of a class template, or template specialization for which some template parameters are not specified in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements [...]</p>\n</blockquote>\n", "OwnerUserId": "1762344", "LastEditorUserId": "1762344", "LastEditDate": "2013-04-11T23:48:16.283", "Id": "15960745", "Score": "5", "CreationDate": "2013-04-11T23:41:49.317", "LastActivityDate": "2013-04-11T23:48:16.283"}, "15960641": {"CommentCount": "3", "AcceptedAnswerId": "15960745", "PostTypeId": "1", "LastEditorUserId": "1795027", "CreationDate": "2013-04-11T23:29:08.490", "LastActivityDate": "2013-04-12T09:14:22.910", "LastEditDate": "2013-04-12T09:14:22.910", "ViewCount": "488", "FavoriteCount": "0", "Title": "Why does the OpenCL cl.hpp (header-only) wrapper not break the One Definition Rule?", "Id": "15960641", "Score": "1", "Body": "<p>OpenCL provides a header-only C++ wrapper for cl.h, called cl.hpp. It is shipped with some implementations but can also be gotten from khronos.org, since it only uses the OpenCL library.</p>\n<p>It contains a lot of templates and inline stuff but also stuff like this:</p>\n<pre><code>namespace cl\n{\n class Buffer : public Memory\n {\n  Buffer (...stuff...)\n  {\n   // Constructor implementation\n  }\n\n  // ...\n  // Other Constructors and such\n  // ...\n\n  Buffer&amp; operator= (const Buffer&amp; rhs)\n  {\n   // implementation\n  }\n\n  // ...\n\n  Buffer createSubBuffer (...)\n  {\n   // implementation\n  }\n }\n}\n</code></pre>\n<p>Now here is my question: Shouldn't those implementations, which are in the classes definition but neither inline nor templated, be in violation of the One Definition Rule? What did I miss here?</p>\n", "Tags": "<c++><opencl><gpgpu>", "OwnerUserId": "1669328", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15960641_15960745_1": {"section_id": 7041, "quality": 0.8888888888888888, "length": 32}, "so_15960641_15960745_0": {"section_id": 5403, "quality": 0.9629629629629629, "length": 26}, "so_15960641_15960745_2": {"section_id": 7043, "quality": 0.9787234042553191, "length": 46}}, "n3337": {"so_15960641_15960745_1": {"section_id": 6786, "quality": 0.8888888888888888, "length": 32}, "so_15960641_15960745_0": {"section_id": 5198, "quality": 0.9629629629629629, "length": 26}, "so_15960641_15960745_2": {"section_id": 6788, "quality": 0.9787234042553191, "length": 46}}, "n4659": {"so_15960641_15960745_1": {"section_id": 8538, "quality": 0.8888888888888888, "length": 32}, "so_15960641_15960745_0": {"section_id": 6852, "quality": 0.6666666666666666, "length": 18}, "so_15960641_15960745_2": {"section_id": 8540, "quality": 0.9787234042553191, "length": 46}}}});