post_cb({"13521546": {"CommentCount": "8", "ViewCount": "215", "PostTypeId": "1", "LastEditorUserId": "51831", "CreationDate": "2012-11-22T23:57:48.830", "LastActivityDate": "2012-11-25T00:07:26.130", "Title": "Possible gcc bug while befriending template specialization", "FavoriteCount": "2", "LastEditDate": "2012-11-24T02:51:45.483", "Id": "13521546", "Score": "5", "Body": "<p>While answering to a different question on SO, I came across a somewhat suspicious compiler error with gcc. The offending snippet is</p>\n<pre><code>template &lt;class T&gt; class A;\ntemplate &lt;class T, class U&gt;\nvoid operator*(A&lt;T&gt;, A&lt;U&gt;);\n\ntemplate &lt;class T&gt;\nclass A {\n    friend void ::operator*(A&lt;T&gt;, A&lt;T&gt;);\n...\n</code></pre>\n<p>whose last line gives the famous warning</p>\n<blockquote>\n<p id=\"so_13521546_13521546_0\">friend declaration '<code>void operator*(A&lt;T&gt;, A&lt;T&gt;)</code>' declares a\n  non-template function</p>\n</blockquote>\n<p>leading to hard errors later. The full code can be found <a href=\"http://ideone.com/IIFnd0\" rel=\"nofollow\">here</a>.</p>\n<p>Now, the problem is I don't think the behavior is appropriate. The standard in [temp.friend]/1 says:</p>\n<blockquote>\n<p id=\"so_13521546_13521546_1\">For a friend function declaration that is not a template declaration:</p>\n<p id=\"so_13521546_13521546_2\">\u2014 if the name of the friend is a qualified or unqualified template-id, the friend declaration refers to a specialization of a function template, otherwise</p>\n<p id=\"so_13521546_13521546_3\">\u2014 if the name of the friend is a qualified-id and a matching nontemplate function is found in the specified\n  class or namespace, the friend declaration refers to that function, otherwise,</p>\n<p id=\"so_13521546_13521546_4\">\u2014 if the name of the friend <strong>is a qualified-id and a matching specialization of a template function is found</strong>\n  in the specified class or namespace, the friend declaration refers to that function specialization, otherwise,</p>\n</blockquote>\n<p><sub>this is C++03; C++11 contains similar clause</sub></p>\n<hr>\n<p>A specialization of a template is defined by [temp.spec]/4:</p>\n<blockquote>\n<p id=\"so_13521546_13521546_5\">... A specialization is a class, function, or class member that is either\n  instantiated or explicitly specialized (14.7.3).</p>\n</blockquote>\n<p>and [temp.fct.spec]/1:</p>\n<blockquote>\n<p id=\"so_13521546_13521546_6\">A function instantiated from a function template is called a function template specialization; so is an\n  explicit specialization of a function template. Template arguments <em>can</em> either be explicitly specified ...</p>\n</blockquote>\n<p>[temp.arg.explicit]/2 says this about specifying a template argument list for a function specification:</p>\n<blockquote>\n<p id=\"so_13521546_13521546_7\">A template argument list may be specified when referring to a specialization of a function template</p>\n<p id=\"so_13521546_13521546_8\">...</p>\n<p id=\"so_13521546_13521546_9\">\u2014 in a friend declaration.</p>\n<p id=\"so_13521546_13521546_10\">Trailing template arguments that can be deduced (14.8.2) may be omitted from the list of explicit template-arguments. If all of the template arguments can be deduced, they may all be omitted; in this case, <strong>the\n  empty template argument list &lt;&gt; itself may also be omitted</strong>.</p>\n</blockquote>\n<p>So, by [temp.fct.spec]/1, <code>::operator*&lt;T,T&gt;(A&lt;T&gt;, A&lt;T&gt;)</code> is a function template specialization; and since the template parameters can be deduced, it can be referred to as <code>::operator*(A&lt;T&gt;, A&lt;T&gt;)</code>. So I conclude the qualified-id in the friend declaration denotes a function template specialization.</p>\n<hr>\n<p>I think that the emphasized condition is fulfilled; therefore, the friend declaration should befriend the class with the operator template (implicit) specialization. However, gcc thinks otherwise and goes on to the fourth bullet which, only concerns friends designated by unqualified-ids, <em>even though the friend is actually named by a qualified-id</em>.</p>\n<p>Is my interpretation correct or is gcc right in this case?</p>\n</hr></hr>", "Tags": "<c++><class><templates>", "OwnerUserId": "51831", "AnswerCount": "1"}, "13537141": {"ParentId": "13521546", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I believe gcc is correct. </p>\n<p>First the current wording:</p>\n<blockquote>\n<p id=\"so_13521546_13537141_0\">if the name of the friend is a qualified-id and a matching function\n  template is found in the specified class or namespace, the friend\n  declaration <strong>refers to the deduced specialization of that function\n  template</strong> (14.8.2.6), otherwise</p>\n</blockquote>\n<p>From [14.8.2.6 Deducing template arguments from a function declaration]:</p>\n<blockquote>\n<p id=\"so_13521546_13537141_1\">1 <strong>In a declaration whose declarator-id refers to a specialization of a\n  function template, template argument deduction is performed to\n  identify the specialization to which the declaration refers.</strong>\n  Specifically, this is done for explicit instantiations (14.7.2),\n  explicit specializations (14.7.3), and <strong>certain friend declarations</strong>\n  (14.5.4). This is also done to determine whether a deallocation\n  function template specialization matches a placement operator new\n  (3.7.4.2, 5.3.4). In all these cases, P is the type of the function\n  template being considered as a potential match and A is either the\n  function type from the declaration or the type of the deallocation\n  function that would match the placement operator new as described in\n  5.3.4. The deduction is done as described in 14.8.2.5. </p>\n<p id=\"so_13521546_13537141_2\">2 If, for the set of function templates so considered, there is either no match or\n  more than one match after partial ordering has been considered\n  (14.5.6.2), deduction fails and, in the declaration cases, the program\n  is ill-formed.</p>\n</blockquote>\n<p>In your case, template argument deduction is <strong>not</strong> performed because the declarator-id does not refer to a specialization. I think the important part is <code>whose declarator-id refers to a specialization</code> as the condition for this to happen. Simply put, you need the <code>&lt;&gt;</code> for the first sentence in <code>14.8.2.6p1</code> to happen (if I am reading this correctly).</p>\n<p><strong>UPDATE</strong>\nLet's break down what a declarator-id is for this situation:</p>\n<pre><code>qualified-id:\nnested-name-specifier templateopt unqualified-id\n:: identifier\n:: operator-function-id\n:: literal-operator-id\n:: template-id\n</code></pre>\n<p>As seen from the above grammar, <code>void ::operator*(A&lt;T&gt;, A&lt;T&gt;)</code> is a <code>:: operator-function-id</code> and <strong>not a</strong> <code>:: template-id</code>. What this means is the syntax can never declare a template function (as mentioned in the error message). For it to be a template-id you have to use <code>operator-function-id &lt; template-argument-listopt&gt;</code> syntax.</p>\n", "OwnerUserId": "906773", "LastEditorUserId": "906773", "LastEditDate": "2012-11-25T00:07:26.130", "Id": "13537141", "Score": "0", "CreationDate": "2012-11-24T00:16:04.737", "LastActivityDate": "2012-11-25T00:07:26.130"}, "bq_ids": {"n4140": {"so_13521546_13521546_10": {"section_id": 286, "quality": 0.9655172413793104, "length": 28}, "so_13521546_13521546_2": {"section_id": 126, "quality": 1.0, "length": 12}, "so_13521546_13521546_5": {"section_id": 230, "quality": 0.9, "length": 9}, "so_13521546_13521546_7": {"section_id": 285, "quality": 1.0, "length": 10}, "so_13521546_13521546_0": {"section_id": 126, "quality": 0.7142857142857143, "length": 5}, "so_13521546_13537141_1": {"section_id": 353, "quality": 0.8695652173913043, "length": 60}, "so_13521546_13521546_1": {"section_id": 126, "quality": 0.8333333333333334, "length": 5}, "so_13521546_13537141_0": {"section_id": 126, "quality": 0.9473684210526315, "length": 18}, "so_13521546_13537141_2": {"section_id": 354, "quality": 0.95, "length": 19}, "so_13521546_13521546_4": {"section_id": 126, "quality": 0.8823529411764706, "length": 15}, "so_13521546_13521546_6": {"section_id": 282, "quality": 0.9444444444444444, "length": 17}, "so_13521546_13521546_3": {"section_id": 126, "quality": 1.0, "length": 15}}, "n3337": {"so_13521546_13521546_2": {"section_id": 120, "quality": 1.0, "length": 12}, "so_13521546_13521546_5": {"section_id": 223, "quality": 0.9, "length": 9}, "so_13521546_13521546_10": {"section_id": 277, "quality": 0.9655172413793104, "length": 28}, "so_13521546_13521546_0": {"section_id": 120, "quality": 0.5714285714285714, "length": 4}, "so_13521546_13537141_1": {"section_id": 343, "quality": 0.8695652173913043, "length": 60}, "so_13521546_13521546_1": {"section_id": 120, "quality": 0.8333333333333334, "length": 5}, "so_13521546_13521546_7": {"section_id": 276, "quality": 1.0, "length": 10}, "so_13521546_13537141_0": {"section_id": 120, "quality": 0.9473684210526315, "length": 18}, "so_13521546_13537141_2": {"section_id": 344, "quality": 0.95, "length": 19}, "so_13521546_13521546_4": {"section_id": 120, "quality": 0.8823529411764706, "length": 15}, "so_13521546_13521546_6": {"section_id": 273, "quality": 0.9444444444444444, "length": 17}, "so_13521546_13521546_3": {"section_id": 120, "quality": 1.0, "length": 15}}, "n4659": {"so_13521546_13521546_2": {"section_id": 131, "quality": 1.0, "length": 12}, "so_13521546_13521546_5": {"section_id": 238, "quality": 0.9, "length": 9}, "so_13521546_13521546_10": {"section_id": 293, "quality": 0.9655172413793104, "length": 28}, "so_13521546_13521546_0": {"section_id": 131, "quality": 0.7142857142857143, "length": 5}, "so_13521546_13537141_1": {"section_id": 363, "quality": 0.8695652173913043, "length": 60}, "so_13521546_13521546_1": {"section_id": 131, "quality": 0.8333333333333334, "length": 5}, "so_13521546_13521546_7": {"section_id": 292, "quality": 1.0, "length": 10}, "so_13521546_13537141_0": {"section_id": 131, "quality": 0.9473684210526315, "length": 18}, "so_13521546_13537141_2": {"section_id": 364, "quality": 0.95, "length": 19}, "so_13521546_13521546_4": {"section_id": 131, "quality": 0.8823529411764706, "length": 15}, "so_13521546_13521546_6": {"section_id": 289, "quality": 0.9444444444444444, "length": 17}, "so_13521546_13521546_3": {"section_id": 131, "quality": 1.0, "length": 15}}}});