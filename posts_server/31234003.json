post_cb({"bq_ids": {"n4140": {"so_31234003_31234238_0": {"length": 21, "quality": 1.0, "section_id": 6669}, "so_31234003_31234003_0": {"length": 15, "quality": 1.0, "section_id": 6670}, "so_31234003_31234270_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6664}}, "n3337": {"so_31234003_31234238_0": {"length": 21, "quality": 1.0, "section_id": 6424}, "so_31234003_31234003_0": {"length": 15, "quality": 1.0, "section_id": 6425}, "so_31234003_31234270_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6419}}, "n4659": {"so_31234003_31234238_0": {"length": 21, "quality": 1.0, "section_id": 8144}, "so_31234003_31234003_0": {"length": 15, "quality": 1.0, "section_id": 8145}, "so_31234003_31234270_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 8139}}}, "31234003": {"ViewCount": "261", "Body": "<p>From [class.access]/7 we have the following sentence:</p>\n<blockquote>\n<p id=\"so_31234003_31234003_0\">Similarly, the use of <code>A::B</code> as a <em>base-specifier</em> is well-formed\n  because <code>D</code> is derived from <code>A</code>, so checking of <em>base-specifier</em>s must\n  be deferred until the entire <em>base-specifier-list</em> has been seen.</p>\n</blockquote>\n<pre><code>class A {\nprotected:\n    struct B { };\n};\nstruct D: A::B, A { };\n</code></pre>\n<p>See <a href=\"http://coliru.stacked-crooked.com/a/dd8f7c7c4ac1b4d3\">live example</a> with clang. As a matter of fact, clang also complains about this snippet, where no deferment is necessary.</p>\n<pre><code>class A {\nprotected:\n    struct B { };\n};\nstruct D: A, A::B { };\n</code></pre>\n<p>Why does this code not compile?</p>\n<p>PS: gcc and VS21013 don't compile the codes either.</p>\n", "AcceptedAnswerId": "31234270", "Title": "Maybe my understanding of [class.access]/7 isn't correct, but", "CreationDate": "2015-07-05T19:09:08.327", "Id": "31234003", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-07-05T19:15:17.643", "LastEditorUserId": "16287", "LastActivityDate": "2015-07-05T19:50:20.030", "Score": "10", "OwnerUserId": "1042389", "Tags": "<c++><language-lawyer><c++14><protected><derived-class>", "AnswerCount": "2"}, "31234238": {"Id": "31234238", "PostTypeId": "2", "Body": "<p>I believe this to be a bug with clang. Ideone doesn't accept the code either: <a href=\"http://ideone.com/uiFl9L\" rel=\"nofollow\">http://ideone.com/uiFl9L</a>:</p>\n<pre><code>class A {\nprotected:\nstruct B { };\n};\nstruct D: A::B, A { };\n</code></pre>\n<p>I checked with gcc-5.1.0, gcc-4.9 and clang-3.7(rc2). The standard explicitly states this as well-formed (see question) thus the compilers are at fault.</p>\n<p>The example clearifies [class.access]/6:</p>\n<blockquote>\n<p id=\"so_31234003_31234238_0\"><strong>All access controls in Clause 11 affect the ability to access a class member name from the declaration of a\n  particular entity,</strong> including parts of the declaration preceding the name of the entity being declared ...</p>\n</blockquote>\n<p>This means, according to [class.access]/2 that a class has access to all base-classes, even before they are declared.</p>\n", "LastEditorUserId": "3102935", "LastActivityDate": "2015-07-05T19:50:20.030", "Score": "3", "CreationDate": "2015-07-05T19:36:21.957", "ParentId": "31234003", "CommentCount": "3", "LastEditDate": "2015-07-05T19:50:20.030", "OwnerUserId": "3102935"}, "31234270": {"Id": "31234270", "PostTypeId": "2", "Body": "<p>This is simply a compiler bug. The normative text of the standard supports the example. The fact that multiple compilers have the same bug means this is part of the standard is tricky to get right.</p>\n<p>There are open bugs about this <a href=\"https://gcc.gnu.org/PR58054\" rel=\"noreferrer\">for GCC</a>\nand <a href=\"https://llvm.org/bugs/show_bug.cgi?id=19140\" rel=\"noreferrer\">for clang</a>. Note that a few related cases are actually subtle differences between C++03 and C++11, but as far as I can tell, not this one.</p>\n<p>[class.access]/1.2 merely states</p>\n<blockquote>\n<p id=\"so_31234003_31234270_0\"><code>protected</code>; that is, its name can be used only by members and friends of the class in which it is declared, by classes derived from that class, and by their friends (see 11.4).</p>\n</blockquote>\n<p>and 11.4 does not expand on this. You are using the name <code>B</code> in a class <code>D</code> derived from that class <code>A</code>. That's fine.</p>\n", "LastActivityDate": "2015-07-05T19:40:15.080", "Score": "8", "CreationDate": "2015-07-05T19:40:15.080", "ParentId": "31234003", "CommentCount": "0", "OwnerUserId": "743382"}});