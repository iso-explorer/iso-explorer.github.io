post_cb({"bq_ids": {"n4140": {"so_19395232_19395316_0": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_19395232_19395316_0": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_19395232_19395316_0": {"length": 6, "quality": 1.0, "section_id": 458}}}, "19395316": {"Id": "19395316", "PostTypeId": "2", "Body": "<p>The order of items in the member initialization list does <em>not</em> control the order in which the members are initialized. The base class is initialized first, then the members of the derived class are initialized in their order of definition<sup>1</sup>.</p>\n<p>Since the base class is initialized first, the <code>Base(a+b)</code> executes <em>before</em> the call to <code>inc</code>, so it sees the values of <code>a</code> and <code>b</code> before they've been incremented.</p>\n<hr>\n<ol>\n<li>c++11, \u00a712.6.2/10:</li>\n</ol>\n<blockquote>\n<p id=\"so_19395232_19395316_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.<br/></li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).<br/></li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).<br/></li>\n<li>Finally, the compound-statement of the constructor body is executed.</li>\n</ul>\n</blockquote>\n</hr>", "LastEditorUserId": "179910", "LastActivityDate": "2013-10-16T04:42:36.670", "Score": "7", "CreationDate": "2013-10-16T04:34:42.727", "ParentId": "19395232", "CommentCount": "0", "OwnerUserId": "179910", "LastEditDate": "2013-10-16T04:42:36.670"}, "19395232": {"ViewCount": "61", "Body": "<p>I have the following code, which takes advantage of the comma operator in the initialization list.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Base\n{\n    protected:\n        int b;\n    public:\n        Base(int a):b(a){}\n};\n\nclass A:public Base\n{\n    private:\n        const int i;\n        const int j;\n        void inc(int &amp; a, int &amp; b) {a++; b++;}\n    public:\n        A(int a, int b):i((inc(a,b),a)),j(b),Base(a+b){}\n        void print(){cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\" \"&lt;&lt;b&lt;&lt;endl;}\n};\n\nint main()\n{\n    A a(6,7);\n    a.print();\n    return 0;\n}\n</code></pre>\n<p>I am expecting the results to be:</p>\n<pre><code>7, 8, 15\n</code></pre>\n<p>but it turned out to be:</p>\n<pre><code>7, 8, 13\n</code></pre>\n<p>It seems that \"a\" and \"b\" was not incremented when used to construct the base class. Not sure why...</p>\n", "AcceptedAnswerId": "19395316", "Title": "comma operator failed to update the input parameter for the base class construction", "CreationDate": "2013-10-16T04:25:32.503", "Id": "19395232", "CommentCount": "1", "LastEditDate": "2013-10-16T04:30:35.093", "PostTypeId": "1", "LastEditorUserId": "1040752", "LastActivityDate": "2013-10-16T04:42:36.670", "Score": "1", "OwnerUserId": "1040752", "Tags": "<c++>", "AnswerCount": "1"}});