post_cb({"45211257": {"Tags": "<c++><expression><c++14><side-effects>", "ViewCount": "75", "LastEditDate": "2017-07-22T09:37:22.137", "CreationDate": "2017-07-20T09:51:38.593", "LastEditorUserId": "7038446", "Title": "Is there a sequenced-before relationship between the evaluation of the lhs of the member access operator and the side-effects of its arguments?", "CommentCount": "0", "AcceptedAnswerId": "45211502", "Score": "4", "OwnerUserId": "7038446", "ClosedDate": "2017-07-21T17:10:50.607", "Id": "45211257", "LastActivityDate": "2017-07-22T09:37:22.137", "Body": "<p>I have read <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow noreferrer\">Order of evalution</a> from cppreference, but I couldn't find any rule which concerns this situation. Is this means that there is no sequenced-before relationship or did I miss something? Thanks.</p>\n<p>The following code snippet gives an exemple.</p>\n<pre><code>#include &lt;memory&gt;\n\nstruct Foo {\n  void func(std::unique_ptr&lt;Foo&gt;) {}\n};\n\nint main() {\n  auto ptr = std::make_unique&lt;Foo&gt;();\n  ptr-&gt;func(std::move(ptr)); // Is this valid?\n  return 0;\n}\n</code></pre>\n", "PostTypeId": "1", "AnswerCount": "1"}, "45211502": {"ParentId": "45211257", "Score": "6", "CreationDate": "2017-07-20T10:01:52.867", "LastActivityDate": "2017-07-21T16:48:35.797", "LastEditDate": "2017-07-21T16:48:35.797", "OwnerUserId": "4832499", "LastEditorUserId": "4832499", "Body": "<p>Prior C++1z <strong>NO</strong>, don't write that.</p>\n<p>Post C++1z yes, from <a href=\"http://eel.is/c++draft/expr.post#expr.call-5\" rel=\"nofollow noreferrer\">[expr.call]</a></p>\n<blockquote>\n<p id=\"so_45211257_45211502_0\">The postfix-expression is sequenced before each expression in the expression-list and any default argument.</p>\n</blockquote>\n<p>Postfix expression here is the function call, hence the order of execution would be similar to</p>\n<pre><code>auto ptr_ = ptr.operator-&gt;();\nauto func_ = &amp;decltype(ptr)::element_type::func;\nptr_-&gt;*func_(std::move(ptr));\n</code></pre>\n<p>Which is of course correct.</p>\n", "Id": "45211502", "PostTypeId": "2", "CommentCount": "2"}, "bq_ids": {"n4659": {"so_45211257_45211502_0": {"length": 8, "section_id": 7492, "quality": 0.8888888888888888}}}});