post_cb({"bq_ids": {"n4140": {"so_47353796_47354427_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 1242}, "so_47353796_47354427_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7042}}, "n3337": {"so_47353796_47354427_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5724}, "so_47353796_47354427_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 1240}}, "n4659": {"so_47353796_47354427_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7340}, "so_47353796_47354427_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 823}}}, "47353796": {"ViewCount": "40", "Body": "<p>Some example code in Stroustrup's \"C++ Programming Language\" fails to compile using GCC 6.4.1 std=C11.</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;functional&gt;\n\n// From Stroustrup C++11 4th Edition section 40.7\n// error: non-static data member declared \u2018auto\u2019\nclass Rand_int {\npublic:    // public: Added to text from original\n    Rand_int(int lo, int hi) : p{lo,hi} { }\n    int operator()() const { return r(); }\nprivate:\n    std::uniform_int_distribution&lt;&gt;::param_type p;\n    auto r = std::bind(std::uniform_int_distribution&lt;&gt;{p},std::default_random_engine{});\n};\n</code></pre>\n<p>The compiler fails with \"error: non-static data member declared \u2018auto\u2019\". Hence it sees this definition as that of a data member and not a member function. The return from bind is supposed to allow declaration auto. </p>\n<p>This quote from Stroustrup follows immediately after the code above \"I store the parameters using the distribution\u2019s standard param_type alias (\u00a740.7.3) so that I can use\nauto to avoid having to name the result of the bind() .\"</p>\n<p><code>default_random_engine</code> is a <code>typedef</code> of a stdlib template function. How to fix?</p>\n", "Title": "auto f = bind(dist<>,gen) fails in C++ member declaration. Not recognized as a function", "CreationDate": "2017-11-17T15:12:50.240", "LastActivityDate": "2017-11-17T19:57:51.817", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-11-17T19:57:51.817", "LastEditorUserId": "8958249", "Id": "47353796", "Score": "1", "OwnerUserId": "8958249", "Tags": "<c++><std>", "AnswerCount": "1"}, "47354427": {"Id": "47354427", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47353796_47354427_0\">Hence it sees this definition as that of a data member and not a member function.</p>\n</blockquote>\n<p>You have couple issues with this approach:</p>\n<ul>\n<li><code>std::bind()</code> returns a \"function object\" aka functor, not function</li>\n</ul>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/utility/functional/bind\" rel=\"nofollow noreferrer\">std::bind</a> documentation:</p>\n<blockquote>\n<p id=\"so_47353796_47354427_1\">A function object of unspecified type T, for which std::is_bind_expression::value == true</p>\n</blockquote>\n<ul>\n<li>even if you put a function on the right side of assignment it would not make it a function</li>\n</ul>\n<p>For example:</p>\n<pre><code> void foobar();\n auto r = foobar;\n</code></pre>\n<p>this would make <code>r</code> a pointer to function <code>foobar()</code> with type <code>void (*)();</code> not a function. It is not possible to declare a method or standalone function this way. The fact, that later in code you can call it like a function with <code>r();</code> does not make that a function.</p>\n", "LastActivityDate": "2017-11-17T15:48:51.013", "Score": "1", "CreationDate": "2017-11-17T15:48:51.013", "ParentId": "47353796", "CommentCount": "0", "OwnerUserId": "432358"}});