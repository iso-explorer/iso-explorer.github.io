post_cb({"35627300": {"ParentId": "35626950", "CommentCount": "0", "Body": "<p>The first operand to the conditional operator is <em>contextually converted</em> to <code>bool</code> (<code>[expr.cond]/1</code>). This is defined as follows (quote from N3337):</p>\n<blockquote>\n<p id=\"so_35626950_35627300_0\"><code>[conv]/3:</code> An expression <code>e</code> appearing in such a context is said to be <em>contextually converted to <code>bool</code></em> and is well-formed if and only if the declaration <code>bool t(e);</code> is well-formed, for some\n  invented temporary variable <code>t</code>. </p>\n</blockquote>\n<p>So contextual conversion uses direct-initialization rules, which allow for <code>explicit</code> user-defined conversions.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "35627300", "Score": "3", "CreationDate": "2016-02-25T12:27:37.913", "LastActivityDate": "2016-02-25T12:27:37.913"}, "35626950": {"CommentCount": "0", "ViewCount": "60", "PostTypeId": "1", "LastEditorUserId": "82570", "CreationDate": "2016-02-25T12:12:02.407", "LastActivityDate": "2017-04-19T13:32:37.450", "Title": "User defined explicit conversion in conditionals in C++11", "AcceptedAnswerId": "35627300", "LastEditDate": "2017-04-19T13:32:37.450", "Id": "35626950", "Score": "2", "Body": "<p>I define a user-defined conversion operator to <code>bool</code> and use it in a conditional:</p>\n<pre><code>struct T {\n  explicit operator bool() { return true; }\n};\n\nint main() {\n   T t;\n   return t ? 0 : 1;\n}\n</code></pre>\n<p>To my surprise this compiles (on gcc) despite the <code>explicit</code>.  Is this allowed by the C++11 standard? I searched the standard but couldn't find it.</p>\n", "Tags": "<c++11><type-conversion>", "OwnerUserId": "82570", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35626950_35627300_0": {"section_id": 3, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_35626950_35627300_0": {"section_id": 2, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_35626950_35627300_0": {"section_id": 3, "quality": 0.8823529411764706, "length": 15}}}});