post_cb({"15325722": {"ParentId": "15325441", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_15325441_15325722_0\">Will this be a non-interference in a multi-threaded environment?</p>\n</blockquote>\n<p>In your question's text, <code>dq</code> (like all the other variables in your function) is a <em>local</em> object:</p>\n<pre><code>std::deque&lt;T&gt; dq;\n</code></pre>\n<p>If this is really the case, then the question has an easy answer: <strong>\"Yes\"</strong>. It is thread-safe because there is no contention: each thread works on a local object, and since there is no sharing, there can't be any data race.</p>\n<hr>\n<p>Now assuming that your code intended to show the use of a <em>shared</em> data structure, and that <code>dq</code> is actually a global object or something somehow accessible by several threads simultaneously (this is what the <code>dq-&gt;size()</code> function call seems to suggest), then the answer is <strong>\"It depends\"</strong>.</p>\n<p><strong>If all of your threads are concurrently executing only the function you are showing, and <code>dq</code> is a reference or pointer to <code>const</code></strong>, so that your function doesn't contain any call to any non-<code>const</code> member functions, then the answer is <strong>\"Yes, <em>but</em></strong> you don't really need <em>any</em> critical section at all in this case\". Paragraph 17. 6.5.9/3 of the C++11 Standard specifies:</p>\n<blockquote>\n<p id=\"so_15325441_15325722_1\">A C++ standard library function shall not directly or indirectly modify objects (1.10) accessible by threads\n  other than the current thread unless the objects are accessed directly or indirectly via the function\u2019s non-<code>const</code>\n  arguments, including <code>this</code>.</p>\n</blockquote>\n<p>The reference to Paragraph 1.10 (and in particular to 1.10/21), which defines what a data races is, makes the meaning of the above Paragraph clearer:</p>\n<blockquote>\n<p id=\"so_15325441_15325722_2\">The execution of a program contains a data race if it contains two <strong>conflicting actions</strong> in different threads,\n  at least one of which is not atomic, and neither happens before the other. Any such data race results in\n  undefined behavior. [...]</p>\n</blockquote>\n<p>Finally, Paragraph 1.10/4 specifies when two actions are conflicting:</p>\n<blockquote>\n<p id=\"so_15325441_15325722_3\">Two expression evaluations conflict if one of them modifies a memory location (1.7) and the other one\n  accesses or modifies the same memory location.</p>\n</blockquote>\n<p>What follows from all this is that <strong><code>const</code> member functions are necessarily thread-safe</strong>. You may be interested in watching <a href=\"http://channel9.msdn.com/posts/C-and-Beyond-2012-Herb-Sutter-You-dont-know-blank-and-blank\" rel=\"nofollow\">this presentation by Herb Sutter</a> about it.</p>\n<p>Since <code>deque&lt;T&gt;::size()</code> is a <code>const</code> member function, and <code>at()</code> is a <code>const</code> member function (because you are calling it from a reference or pointer to <code>const</code>) which returns a reference to <code>const</code>, there is no need to synchronize access from multiple threads. </p>\n<hr>\n<p><strong>If your <code>dq</code> is <em>not</em> a reference or pointer to <code>const</code></strong>, then the answer is \"<strong>No</strong>\", because <code>at()</code> is a non-<code>const</code> member function. Moreover, since <code>v</code> is a non-const reference to an element, your \"operation on <code>v</code>\" could be non-<code>const</code>, therefore introducing a data-race on the <em>elements</em> of <code>dq</code> rather than on <code>dq</code> itself.</p>\n<p>Similarly, <strong>if your threads are concurrently accessing and modifying <code>dq</code> through other functions</strong>, then the answer is again <strong>\"No\"</strong>, because you are not protecting all the accesses to the shared object. Read operations conflict with write operations (see above), and you are only protecting <em>some</em> of them. In this case, your critical section should span the entire <code>while</code> cycle.</p>\n</hr></hr>", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-03-10T18:33:21.587", "Id": "15325722", "Score": "4", "CreationDate": "2013-03-10T18:10:13.150", "LastActivityDate": "2013-03-10T18:33:21.587"}, "bq_ids": {"n4140": {"so_15325441_15325722_3": {"section_id": 5817, "quality": 0.9375, "length": 15}, "so_15325441_15325722_2": {"section_id": 5834, "quality": 0.8, "length": 20}, "so_15325441_15325722_1": {"section_id": 6348, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_15325441_15325722_3": {"section_id": 5588, "quality": 0.9375, "length": 15}, "so_15325441_15325722_2": {"section_id": 5605, "quality": 0.88, "length": 22}, "so_15325441_15325722_1": {"section_id": 6105, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_15325441_15325722_3": {"section_id": 7278, "quality": 0.875, "length": 14}, "so_15325441_15325722_2": {"section_id": 7296, "quality": 0.8, "length": 20}, "so_15325441_15325722_1": {"section_id": 7857, "quality": 0.9545454545454546, "length": 21}}}, "15325441": {"CommentCount": "5", "ViewCount": "90", "PostTypeId": "1", "LastEditorUserId": "1687302", "CreationDate": "2013-03-10T17:48:52.383", "LastActivityDate": "2013-03-10T19:29:06.580", "Title": "Will this be a non-interference in a multi-threaded environment?", "LastEditDate": "2013-03-10T19:29:06.580", "Id": "15325441", "Score": "-1", "Body": "<pre><code>std::deque&lt;T&gt; dq;\nThread_function(pointer to queue as argument)     // created 8 threads\n{\n     vertext_found = true;\n     **v is initialized to NULL\n     while ( i &lt; dq-&gt;size())\n     {\n          EnterCriticalSection(&amp;h);\n          if( i &lt; dq.size() ) {\n              v = dq.at(i);      // accessing element of queue without popping\n              i++;\n              vertext_found = true;\n          }\n          LeaveCriticalSection(&amp;h);\n          if (vertext_found &amp;&amp; (i &lt; dq.size()) &amp;&amp; v != NULL)\n          {\n              **operation on 'v'\n              vertext_found = false;\n          }\n     }\n}\n</code></pre>\n<p>Will this be a data race condition especially when processing \"<strong>while ( i &lt; dq-&gt;size())</strong>\" outside the Critical Section? Is my approach correct? Otherwise plz suggest me.</p>\n", "Tags": "<c++><multithreading><thread-safety><deque><thread-synchronization>", "OwnerUserId": "1687302", "AnswerCount": "1"}});