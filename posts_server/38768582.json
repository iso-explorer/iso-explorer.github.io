post_cb({"38768716": {"Id": "38768716", "PostTypeId": "2", "Body": "<p>Using <code>void main</code> is not standard, although there is some history regarding why some compilers allow it.</p>\n<p>The following is from a 2008 post on <a href=\"http://www.programmingforums.org/post156027.html\" rel=\"nofollow\">programingforums.org</a>:</p>\n<blockquote>\n<p id=\"so_38768582_38768716_0\">In 1971, Denis Ritchie (who was working alongside Ken Thomson\n  developing Unix) produced a \"new B\" by add support for the character\n  type, and modified the early B compilers to output machine code. In\n  1972, \"new B\" was renamed to C. A preprocessor was added in 1973 or so\n  and another programmer in the team produced the \"portable I/O\n  package\", which was later renamed to the C \"standard I/O routines\".\n  Hence the first version of C was born: it supported only char,\n  integer, and pointer types. There was no void keyword.</p>\n<p id=\"so_38768582_38768716_1\">Denis Ritchie and Brian Kernighan worked together to enhance C. Later\n  versions of C introduced more of the standard library, such as\n  malloc() - which originally returned pointer to char, as there was no\n  void pointer. Hence it was always necessary in early versions of C to\n  cast the return from malloc(). Support for floating point was also\n  added. This became what is known as Kernighan and Ritchie (K&amp;R) C.</p>\n<p id=\"so_38768582_38768716_2\">In the early 1980s, a decision was made to ratify C as a standard,\n  leading to the development of the first ANSI Standard in 1989 (then\n  ratified as an ISO standard in 1990). In the committee process leading\n  to the standard, a number of changes were made: in particular the void\n  keyword was introduced, the form of function prototypes was changed.</p>\n<p id=\"so_38768582_38768716_3\">During the standardisation process, several commercial compilers were\n  developed. <strong>Some of these supported void main() as a work-around for\n  compiler diagnostics about falling off the end of main().</strong> They lobbied\n  unsuccessfully for this to be supported by the C standard, but that\n  was not accepted as other vendors considered it added no significant\n  or useful new functionality. <strong>Later, in the early 1990s, when \"standard\n  compliance\" became a marketing tool, they unleashed lawyers on the\n  standard and found the wording loop-hole that - they then claimed -\n  allows void main() to be considered as standard.</strong></p>\n<p id=\"so_38768582_38768716_4\">During the C standardisation process, Bjarne Stroustrup started work\n  on the development of C++, and published the ARM (Annotated Reference\n  Manual) with Margaret Ellis in 1990. Since that happened in parallel\n  with the minor flurry associated with void main(), that feature was\n  never part of C++. The ARM was the basis for development of the C++\n  standard, which was finally ratified by ANSI in 1998 and ISO in 1999.</p>\n<p id=\"so_38768582_38768716_5\">During development of the 1999 C standard, there was some discussion\n  about void main(), but it never gained traction - the push in favour\n  was political, and overall consensus was apparently that it offered\n  little technical benefit. <strong>Hence the 1999 C standard explicitly\n  disallows it.</strong></p>\n</blockquote>\n", "LastActivityDate": "2016-08-04T13:28:19.147", "CommentCount": "0", "CreationDate": "2016-08-04T13:28:19.147", "ParentId": "38768582", "Score": "3", "OwnerUserId": "1687119"}, "bq_ids": {"n4140": {"so_38768582_38768612_0": {"length": 18, "quality": 0.75, "section_id": 7146}, "so_38768582_38768612_3": {"length": 26, "quality": 1.0, "section_id": 7149}}, "n3337": {"so_38768582_38768612_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}, "so_38768582_38768612_3": {"length": 26, "quality": 1.0, "section_id": 6893}}, "n4659": {"so_38768582_38768612_0": {"length": 18, "quality": 0.75, "section_id": 8647}, "so_38768582_38768612_3": {"length": 21, "quality": 0.8076923076923077, "section_id": 8650}}}, "38768582": {"ViewCount": "124", "Body": "<p>I find about <code>int main</code> definition, but not of <code>void main</code> in introduction of c++ programming language. I tried reading all the articles written in introduction of c++ programming language.</p>\n", "Title": "How is `void main` invalid, when it compiles just fine?", "CreationDate": "2016-08-04T13:22:41.780", "LastActivityDate": "2016-08-05T14:26:29.857", "CommentCount": "8", "LastEditDate": "2016-08-05T14:26:29.857", "PostTypeId": "1", "LastEditorUserId": "3233393", "Id": "38768582", "Score": "1", "OwnerUserId": "6445166", "Tags": "<c++><c><main>", "AnswerCount": "2"}, "38768612": {"Id": "38768612", "PostTypeId": "2", "Body": "<p><code>void main</code> has never been valid in either C or C++.</p>\n<i>C++11 \u00a73.6.1/2:</i>\n<blockquote>\n<p id=\"so_38768582_38768612_0\"><strong>\u201d</strong> An implementation shall not predefine the <code>main</code> function. This function shall not be overloaded. It shall have a return type of type <code>int</code>, but otherwise its type is implementation-defined.  All implementations shall allow both of the following definitions of <code>main</code>:  </p>\n<pre><code>int main() { /* ... */ }\n</code></pre>\n<p id=\"so_38768582_38768612_1\">and</p>\n<pre><code>int main(int argc, char* argv[]) { /* ... */ }\n</code></pre>\n<p id=\"so_38768582_38768612_2\">\u2026</p>\n</blockquote>\n<i>C++11 \u00a73.6.1/5:</i>\n<blockquote>\n<p id=\"so_38768582_38768612_3\"><strong>\u201d</strong> A <code>return</code> statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic storage duration) and calling <code>std::exit</code> with the return value as the argument. If control reaches the end of <code>main</code> without encountering a <code>return</code> statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>The value 0 is one value that indicates process success. The value <code>EXIT_SUCCESS</code> from <code>&lt;stdlib.h&gt;</code> may be 0 or some other value. The value <code>EXIT_FAILURE</code> indicates process failure.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-08-04T13:36:27.567", "Score": "6", "CreationDate": "2016-08-04T13:23:52.270", "ParentId": "38768582", "CommentCount": "22", "OwnerUserId": "464581", "LastEditDate": "2016-08-04T13:36:27.567"}});