post_cb({"31129919": {"CommentCount": "5", "AcceptedAnswerId": "31130300", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-06-30T05:01:19.010", "LastActivityDate": "2015-06-30T05:40:35.817", "LastEditDate": "2017-05-23T10:27:52.333", "ViewCount": "1057", "FavoriteCount": "1", "Title": "global declarations/initializations using static, const, constexpr", "Id": "31129919", "Score": "2", "Body": "<p>In C++ or C++11, for the following declarations//initializations, </p>\n<pre><code>// global scope\nconst int a = 1; // line 1\nstatic const int b = 2; // line 2\nconstexpr int c = 3;  // line 3\nstatic constexpr int d = 4; // line 4\nconstexpr int e = a + b + c*d; // line 5\nstatic constexpr int f = a - b - c*d; // line 6\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/3709207/c-semantics-of-static-const-vs-const\">This question</a> says at file scope there is no difference between line 1 and 2 in C++.\nHow about line 3 and 4? </p>\n<p>Are there differences between line 4 and 5?</p>\n<p>Are there differences between line 5 and 6?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2345484", "AnswerCount": "2"}, "31130300": {"ParentId": "31129919", "CommentCount": "0", "Body": "<p>No, there should not be any difference (aside from their values of course) because constexpr and const implies internal linkage: </p>\n<blockquote>\n<p id=\"so_31129919_31130300_0\"><code>[C++11: 3.5/3]:</code> <strong>A name having namespace scope</strong> (3.3.6) <strong>has internal linkage if it is the name of</strong></p>\n<ul>\n<li>a variable, function or function template that is explicitly declared <code>static</code>; or,</li>\n<li><strong>a variable that is explicitly declared</strong> <code>const</code> or <strong><code>constexpr</code></strong> and <strong>neither explicitly declared <code>extern</code> nor previously declared to have external linkage</strong>; or</li>\n<li>a data member of an anonymous union.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "802362", "PostTypeId": "2", "Id": "31130300", "Score": "4", "CreationDate": "2015-06-30T05:33:24.223", "LastActivityDate": "2015-06-30T05:33:24.223"}, "bq_ids": {"n4140": {"so_31129919_31130300_0": {"section_id": 7136, "quality": 0.7, "length": 7}}, "n3337": {"so_31129919_31130300_0": {"section_id": 6880, "quality": 0.7, "length": 7}}, "n4659": {"so_31129919_31130300_0": {"section_id": 8637, "quality": 0.7, "length": 7}}}, "31130392": {"ParentId": "31129919", "CommentCount": "0", "Body": "<p><code>static</code> variables exist for the lifetime of the program <code>static</code> is useful for functions like this:</p>\n<pre><code>void func (int i) {\n    int var = i;\n}\n</code></pre>\n<p>when a function is finish executing its code its objects destroys automatically \nto prevent this you can use <code>static</code></p>\n<pre><code>void func (int i) {\n   static int var = i;\n}\n</code></pre>\n<p>this mean that when a function finish executing its code the object defined as static will remain until the program ends</p>\n<p><code>const</code> applies for variables, and prevents them from being modified in your code.\n and <code>constexpr</code> are used for constant expressions this two is read-only it means that once you initialize a value it cannot be modified</p>\n<p>the difference of this two is:</p>\n<pre><code>static constexpr int d = 4; // line 4\nconstexpr int e = a + b + c*d; \n</code></pre>\n<p>in <code>static constexpr int d = 4</code> is we define a variable named d that is a static constant expression integer and have a value of 4 and cannot be modified and remain until the program ends</p>\n<p>and in <code>constexpr int e = a + b + c*d;</code> is we define a variable name e that is \nconstant expression integer that have a value depends on what the result in those operations and cannot be modified</p>\n", "OwnerUserId": "4622036", "PostTypeId": "2", "Id": "31130392", "Score": "0", "CreationDate": "2015-06-30T05:40:35.817", "LastActivityDate": "2015-06-30T05:40:35.817"}});