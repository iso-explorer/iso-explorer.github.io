post_cb({"33057705": {"ParentId": "33057562", "CommentCount": "7", "Body": "<p>By declaring a move assignment, you've lost your implicit move constructor.<br>\nSee the full chart below.  </br></p>\n<p><a href=\"https://i.stack.imgur.com/v5Bt8.jpg\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/v5Bt8.jpg\"/></a></p>\n", "OwnerUserId": "908939", "PostTypeId": "2", "Id": "33057705", "Score": "5", "CreationDate": "2015-10-10T18:50:06.073", "LastActivityDate": "2015-10-10T18:50:06.073"}, "33057639": {"ParentId": "33057562", "CommentCount": "0", "Body": "<p>The move constructor is simply not generated in this case - it has nothing to do with <code>noexcept</code>.</p>\n<p>From cppreference:</p>\n<blockquote>\n<p id=\"so_33057562_33057639_0\">If no user-defined move constructors are provided for a class type (struct, class, or union), and all of the following is true:</p>\n<ul>\n<li>there are no user-declared copy constructors</li>\n<li>there are no user-declared copy assignment operators</li>\n<li><strong>there are no user-declared move assignment operators</strong></li>\n<li>there are no user-declared destructors\n  (until C++14) </li>\n</ul>\n<p id=\"so_33057562_33057639_1\">the implicitly-declared move constructor is not defined as deleted due to conditions detailed in the next section\n  then the compiler will declare a move constructor as a non-explicit inline public member of its class with the signature T::T(T&amp;&amp;).</p>\n</blockquote>\n", "OwnerUserId": "3589890", "PostTypeId": "2", "Id": "33057639", "Score": "2", "CreationDate": "2015-10-10T18:43:21.250", "LastActivityDate": "2015-10-10T18:43:21.250"}, "33057631": {"ParentId": "33057562", "CommentCount": "0", "Body": "<p>By defining the move operator, you've suppressed the implicit move constructor. That's why <code>std::is_nothrow_move_constructible</code> fails. Provide it to get the desired output:</p>\n<pre><code>struct S {\n  S(S&amp;&amp;) noexcept {}\n  S&amp; operator= (S&amp;&amp;) noexcept { return *this; }\n};\n</code></pre>\n", "OwnerUserId": "5431696", "PostTypeId": "2", "Id": "33057631", "Score": "1", "CreationDate": "2015-10-10T18:43:03.207", "LastActivityDate": "2015-10-10T18:43:03.207"}, "33057562": {"CommentCount": "0", "ViewCount": "173", "CreationDate": "2015-10-10T18:33:13.803", "LastActivityDate": "2015-10-10T19:03:34.727", "PostTypeId": "1", "AcceptedAnswerId": "33057646", "FavoriteCount": "1", "Title": "How could the exception specifier on move assignment operator affect that of move constructor?", "Id": "33057562", "Score": "3", "Body": "<p>I've being testing with GCC 5.2 and clang 3.6, both in C++14 mode, and they give the same output.</p>\n<p>For the following code</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstruct S {\n  // S&amp; operator= (S&amp;&amp;) noexcept { return *this; }\n};\n\n\nint main() {\n  std::cout &lt;&lt; std::is_nothrow_move_constructible&lt;S&gt;::value\n            &lt;&lt; std::is_nothrow_move_assignable&lt;S&gt;::value;  \n}\n</code></pre>\n<p>the result <code>11</code> is obtained. But if uncomment the move assignment operator, the output becomes <code>01</code>. How could an explicit <code>noexcept</code> specification on the move assignment operator possibly affect that of the move constructor?</p>\n", "Tags": "<c++><exception><language-lawyer><c++14><noexcept>", "OwnerUserId": "1348273", "AnswerCount": "5"}, "33057644": {"ParentId": "33057562", "CommentCount": "0", "Body": "<p>12.8/9:</p>\n<blockquote>\n<p id=\"so_33057562_33057644_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li><p id=\"so_33057562_33057644_1\"><code>X</code> does not have a user-declared copy constructor,</p></li>\n<li><p id=\"so_33057562_33057644_2\"><code>X</code> does not have a user-declared copy assignment operator,</p></li>\n<li><p id=\"so_33057562_33057644_3\"><code>X</code> does not have a user-declared move assignment operator, and</p></li>\n<li><p id=\"so_33057562_33057644_4\"><code>X</code> does not have a user-declared destructor.</p></li>\n</ul>\n</blockquote>\n<p>By declaring a move assignment operator, you prevent the class from having any move constructor at all.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "33057644", "Score": "2", "CreationDate": "2015-10-10T18:44:01.460", "LastActivityDate": "2015-10-10T18:44:01.460"}, "bq_ids": {"n4140": {"so_33057562_33057644_1": {"section_id": 458, "quality": 1.0, "length": 5}, "so_33057562_33057644_0": {"section_id": 458, "quality": 1.0, "length": 12}, "so_33057562_33057644_2": {"section_id": 458, "quality": 1.0, "length": 6}, "so_33057562_33057644_4": {"section_id": 458, "quality": 1.0, "length": 4}, "so_33057562_33057644_3": {"section_id": 458, "quality": 1.0, "length": 6}, "so_33057562_33057646_0": {"section_id": 458, "quality": 0.9230769230769231, "length": 36}, "so_33057562_33057646_1": {"section_id": 3376, "quality": 0.9411764705882353, "length": 48}}, "n3337": {"so_33057562_33057644_1": {"section_id": 449, "quality": 1.0, "length": 5}, "so_33057562_33057644_0": {"section_id": 449, "quality": 1.0, "length": 12}, "so_33057562_33057644_2": {"section_id": 449, "quality": 1.0, "length": 6}, "so_33057562_33057644_4": {"section_id": 449, "quality": 1.0, "length": 4}, "so_33057562_33057644_3": {"section_id": 449, "quality": 1.0, "length": 6}, "so_33057562_33057646_0": {"section_id": 449, "quality": 1.0, "length": 39}, "so_33057562_33057646_1": {"section_id": 3246, "quality": 1.0, "length": 51}}, "n4659": {"so_33057562_33057644_0": {"section_id": 481, "quality": 1.0, "length": 12}, "so_33057562_33057644_2": {"section_id": 481, "quality": 1.0, "length": 6}, "so_33057562_33057644_4": {"section_id": 481, "quality": 1.0, "length": 4}, "so_33057562_33057644_3": {"section_id": 481, "quality": 1.0, "length": 6}, "so_33057562_33057646_0": {"section_id": 481, "quality": 0.9230769230769231, "length": 36}, "so_33057562_33057644_1": {"section_id": 481, "quality": 1.0, "length": 5}}}, "33057646": {"ParentId": "33057562", "LastEditDate": "2015-10-10T19:03:34.727", "CommentCount": "0", "CreationDate": "2015-10-10T18:44:04.447", "OwnerUserId": "2296458", "LastEditorUserId": "2296458", "PostTypeId": "2", "Id": "33057646", "Score": "7", "Body": "<p>By defining the move assignment operator, you disabled the move constructor due to the <a href=\"https://stackoverflow.com/questions/4782757/rule-of-three-becomes-rule-of-five-with-c11\">rule of 5</a>. The class isn't <code>is_nothrow_move_constructible</code> because it isn't move constructable at all, that constructor is no longer available unless you define it.</p>\n<p><strong>\u00a712.8 Copying and moving class objects</strong></p>\n<blockquote>\n<p id=\"so_33057562_33057646_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if<br>\n  \u2014 <code>X</code> does not have a user-declared copy constructor,<br>\n  \u2014 <code>X</code> does not have a user-declared copy assignment operator,<br>\n  \u2014 <strong><code>X</code> does not have a user-declared move assignment operator,</strong><br>\n  \u2014 <code>X</code> does not have a user-declared destructor, and<br>\n  \u2014 the move constructor would not be implicitly defined as deleted.</br></br></br></br></br></p>\n</blockquote>\n<p>In the case where you had no user-defined move constructor, both were implicitly defined and followed the below specification.</p>\n<p><strong>\u00a715.4 Exception specifications</strong></p>\n<blockquote>\n<p id=\"so_33057562_33057646_1\">An implicitly declared special member function shall have an exception-specification. If <code>f</code> is an implicitly declared default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator, its implicit exception-specification specifies the type-id <code>T</code> if and only if <code>T</code> is allowed by the exception-specification of a function directly invoked by <code>f</code>\u2019s implicit definition; <code>f</code> shall allow all exceptions if any function it directly invokes allows all exceptions, and <strong><code>f</code> shall allow no exceptions if every function it directly invokes allows no exceptions</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2015-10-10T19:03:34.727"}});