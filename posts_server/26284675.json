post_cb({"26284822": {"ParentId": "26284675", "CommentCount": "0", "Body": "<p>Because the value <code>200</code> doesn't fit in a <code>char</code>, at least on\nmost machines.  If the range of a <code>char</code> is <code>[-128,127]</code>\n(usually the case), when you convert <code>200</code> to a <code>char</code>, you get\nan implementation defined value (which could even be a signal,\nbut most likely -56).</p>\n<p>Of course, -56 isn't a legal value in any encoding I know of,\nbut most of the output devices will treat it as if it were an\n<code>unsigned char</code>, with the value of 200.  There are places where\nyou have to pay attention, however; the functions in <code>&lt;cctype&gt;</code>,\nfor example, expecct their arguments to be in the range\n<code>[0, UCHAR_MAX]</code>, and will result in undefined behavior if you\npass them -56. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "26284822", "Score": "0", "CreationDate": "2014-10-09T17:47:55.163", "LastActivityDate": "2014-10-09T17:47:55.163"}, "26284739": {"ParentId": "26284675", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>char</code> can be signed or unsigned, the implementation must document which (yours is signed).<br>\nThe size is also implementation-defined (ID) (Yours is 8 bit, really common).</br></p>\n<p>Also, conversions are defined to be value-preserving where possible.</p>\n<p>So:</p>\n<pre><code>200 (int)\n-56 (char) ID as not in range for char and char is signed\n-56 (int) value-preserving widening conversion\n</code></pre>\n<p>Is your conversion sequence.</p>\n<blockquote>\n<h3>6.3.1.3 Signed and unsigned integers</h3>\n<p id=\"so_26284675_26284739_0\">1 When a value with integer type is converted to another integer type other than <code>_Bool</code>, if\n  the value can be represented by the new type, it is unchanged.<br>\n  2 Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or\n  subtracting one more than the maximum value that can be represented in the new type\n  until the value is in the range of the new type.60)<br>\n  3 Otherwise, the new type is signed and the value cannot be represented in it; either the\n  result is implementation-defined or an implementation-defined signal is raised.</br></br></p>\n</blockquote>\n", "OwnerUserId": "3204551", "LastEditorUserId": "3204551", "LastEditDate": "2014-10-09T17:48:29.183", "Id": "26284739", "Score": "0", "CreationDate": "2014-10-09T17:42:58.907", "LastActivityDate": "2014-10-09T17:48:29.183"}, "26285137": {"ParentId": "26284675", "CommentCount": "0", "Body": "<p>If you want to get the same value you have to use <code>unsigned char</code>. For example</p>\n<pre><code>unsigned char h = a;\n</code></pre>\n<p>According to the C++ Standard (4.7 Integral conversions)</p>\n<blockquote>\n<p id=\"so_26284675_26285137_0\">3 If the destination type is signed, the value is unchanged if it can\n  be represented in the destination type (and bit-field width);\n  otherwise, the value is implementation-defined.</p>\n</blockquote>\n<p>It seems that by default your compiler considers type <code>char</code> as behaving as type <code>signed char</code> Value 200 can not be represented in signed char beacuse the maximum value for type signed char is <code>127</code> so the bit combination that corresponds to 200 is interpretated as signed number <code>-56</code>. When it is assigned back to an object of type int then this value that is -56 is assigned to. </p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "26285137", "Score": "0", "CreationDate": "2014-10-09T18:05:42.660", "LastActivityDate": "2014-10-09T18:05:42.660"}, "26284675": {"CommentCount": "2", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "12860", "CreationDate": "2014-10-09T17:39:18.297", "LastActivityDate": "2014-10-09T18:05:42.660", "Title": "Conversion from char to int", "AcceptedAnswerId": "26284732", "LastEditDate": "2014-10-09T17:43:03.757", "Id": "26284675", "Score": "0", "Body": "<p>I'm studying the C++ language by three weeks and I have a problem with the conversion from char to int.If I write this program : </p>\n<pre><code>int main()\n{\n  int a = 200; \n  char h = a; \n  int b = h;\n  cout &lt;&lt; h &lt;&lt; \"\\n\"; \n  cout &lt;&lt; b &lt;&lt; \"\\n\"; \n\n  keep_window_open();\n  return 0;\n}\n</code></pre>\n<p>If i convert the value of a to char the value of h becomes a character present on the ASCII table, but if i convert the h value back to int I don't get back the value 200, why ?.</p>\n", "Tags": "<c++><char><type-conversion>", "OwnerUserId": "3697275", "AnswerCount": "4"}, "26284732": {"ParentId": "26284675", "CommentCount": "3", "Body": "<p>On systems that have 8 bit chars (ie, most of them), 200 is out of range because char is signed and you only have 7 bits to store the value in.</p>\n", "OwnerUserId": "29068", "PostTypeId": "2", "Id": "26284732", "Score": "1", "CreationDate": "2014-10-09T17:42:37.070", "LastActivityDate": "2014-10-09T17:42:37.070"}, "bq_ids": {"n4140": {"so_26284675_26285137_0": {"section_id": 32, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_26284675_26285137_0": {"section_id": 29, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_26284675_26285137_0": {"section_id": 32, "quality": 0.7857142857142857, "length": 11}}}});