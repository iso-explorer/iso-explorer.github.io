post_cb({"25209904": {"ParentId": "25209838", "CommentCount": "0", "Body": "<p>\u00a77.1.6.1 [dcl.type.cv]/p4:</p>\n<blockquote>\n<p id=\"so_25209838_25209904_0\">Except that any class member declared <code>mutable</code> (7.1.1) can be modified,\n  any attempt to modify a <code>const</code> object during its lifetime (3.8) results\n  in undefined behavior.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "25209904", "Score": "6", "CreationDate": "2014-08-08T18:22:54.387", "LastActivityDate": "2014-08-08T18:22:54.387"}, "25209936": {"ParentId": "25209838", "CommentCount": "0", "Body": "<p>Attempting to write on a const value is undefined behavior, for example to allow the compiler to allocate <code>const</code> values into read only memory (usually in code segment) or inline their value into expressions at compile time, which is what happens in your case.</p>\n", "OwnerUserId": "686184", "PostTypeId": "2", "Id": "25209936", "Score": "1", "CreationDate": "2014-08-08T18:24:27.220", "LastActivityDate": "2014-08-08T18:24:27.220"}, "25209838": {"CommentCount": "0", "AcceptedAnswerId": "25209850", "ClosedDate": "2014-08-09T02:00:56.527", "CreationDate": "2014-08-08T18:18:03.230", "LastActivityDate": "2014-08-08T18:24:27.220", "PostTypeId": "1", "ViewCount": "226", "FavoriteCount": "2", "Title": "Is this undefined behavior with const_cast?", "Id": "25209838", "Score": "4", "Body": "<p>What is happening here?</p>\n<pre><code>const int a = 0;\nconst int *pa = &amp;a;\n\nint *p = const_cast&lt;int*&gt;(pa);\n*p = 1;  // undefined behavior ??\ncout &lt;&lt; a &lt;&lt; *p;  // ??\n</code></pre>\n<p>My compiler outputs 0 and 1, but address of 'a' and value of 'p' is the same, so I'm confused how is this possible.</p>\n", "Tags": "<c++><const-cast>", "OwnerUserId": "1659758", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_25209838_25209904_0": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_25209838_25209904_0": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_25209838_25209904_0": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}}}, "25209850": {"ParentId": "25209838", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Quote from <a href=\"http://en.cppreference.com/w/cpp/language/const_cast\" rel=\"noreferrer\">cppreference</a>:</p>\n<blockquote>\n<p id=\"so_25209838_25209850_0\">Even though const_cast may remove constness or volatility from any pointer or reference, using the resulting pointer or reference to write to an object that was declared const or to access an object that was declared volatile invokes undefined behavior.</p>\n</blockquote>\n<p>So yes, modifying constant variables is undefined behavior. The output you see is caused by the fact that you tell the compiler that the value of <code>a</code> will never change, so it can just put a literal 0 instead of the variable <code>a</code> in the <code>cout</code> line.</p>\n", "OwnerUserId": "3002139", "LastEditorUserId": "3002139", "LastEditDate": "2014-08-08T18:24:08.147", "Id": "25209850", "Score": "11", "CreationDate": "2014-08-08T18:19:04.967", "LastActivityDate": "2014-08-08T18:24:08.147"}});