post_cb({"7920727": {"ParentId": "7920531", "CommentCount": "4", "Body": "<p>For your latest edit: <code>not Account in the directory</code></p>\n<p>try this:</p>\n<pre><code>#include \"Account.h\"  //quotes, and .h\n\n\nAccount:: Account(string n)  //this must be outside of main, it's its own function\n: name(n), balance(0) //I put these on three seperate lines but\n{}                    //that's a personal choice\n\nint main(){  //this is what the code should do when it starts\n    Account person1(\"George\"); //create a Account called person1 with the name George\n    cout &lt;&lt; person1.get_name(); //c-output person1's name.\n    return 0 ; //return success (success=0)\n}\n</code></pre>\n", "OwnerUserId": "845092", "PostTypeId": "2", "Id": "7920727", "Score": "1", "CreationDate": "2011-10-27T18:42:10.237", "LastActivityDate": "2011-10-27T18:42:10.237"}, "7920531": {"CommentCount": "4", "ViewCount": "195", "PostTypeId": "1", "LastEditorUserId": "521180", "CreationDate": "2011-10-27T18:26:29.730", "LastActivityDate": "2011-10-28T15:00:06.720", "Title": "How do you create an instance of a class in C++", "AcceptedAnswerId": "7920563", "LastEditDate": "2011-10-27T19:38:22.603", "Id": "7920531", "Score": "0", "Body": "<p>I'm a C++ beginner. I have a class and when I try to compile it says it's missing 'main'.</p>\n<p>What do I need to do to create an instance of this class and access its methods?</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Account\n{\n      string name;\n      double balance;\n\n  public:\n      Account(string n);\n      Account(string n, double initial_balance);\n\n      string get_name() const;\n      double get_balance() const;\n\n      void deposit(double amount);\n\n      void widthdraw(double amount);\n\n};\n</code></pre>\n<p><strong>edit:</strong></p>\n<p>Where do I put the main method?</p>\n<p>I have tried putting it in a different file like the following</p>\n<pre><code>    #include &lt;Account&gt;\n    int main(){\n    Account:: Account(string n) : name(n), balance(0){}\n    return 0 ;\n    }\n</code></pre>\n<p>but this gives an error saying there is not Account in the directory. I'm guessing this is because it's not compiled</p>\n<p><strong>edit:</strong></p>\n<p>Both files are in the same directory</p>\n<p><strong>account_main.cc</strong></p>\n<pre><code>    #include&lt;string&gt;\n    #include &lt;iostream&gt;\n    #include \"Account.cc\"\n\n    Account:: Account(string n) : name(n), balance(0){} \n    int main()\n    {\n        Account account(\"Account Name\"); // A variable called \"account\"\n        account.deposit(100.00); // Calls the deposit() function on account\n\n        return 0 ;\n    }\n</code></pre>\n<p><strong>Account.cc</strong></p>\n<pre><code>#include&lt;string&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Account\n{\n      string name;\n      double balance;\n\n  public:\n      Account(string n);\n      Account(string n, double initial_balance);\n\n      string get_name() const;\n      double get_balance() const;\n\n      void deposit(double amount);\n\n      void widthdraw(double amount);\n\n};\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "521180", "AnswerCount": "3"}, "7920563": {"ParentId": "7920531", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>All C++ programs require what's called an <strong>entry point</strong>. The <code>main()</code> function is always the entry point for standard C++ programs. You need to provide a <code>main()</code>, function otherwise the linker will complain. You can write a <code>main()</code> function in one of two ways:</p>\n<pre><code>int main()\n{\n    return 0;\n}\n</code></pre>\n<p>Or, if you are expecting command-line arguments:</p>\n<pre><code>int main(int argc, char ** argv)\n{\n    return 0;\n}\n</code></pre>\n<p>Note that <code>void main()</code> is <strong>not valid in C++</strong>. Also note that a <code>return</code> statement isn't strictly necessary for <code>main()</code> functions, but you should explicitly write one anyway, for the sake of consistency.</p>\n<blockquote>\n<p id=\"so_7920531_7920563_0\"><strong>C++ Standard 3.6.1 Main function [basic.start.main]</strong></p>\n<p id=\"so_7920531_7920563_1\"><em>5.</em> A return statement in main has the effect of leaving the main function (destroying any objects with automatic storage duration) and\n  calling exit with the return value as the argument. If control reaches\n  the end of main without encountering a return statement, the effect is\n  that of executing</p>\n<pre><code>    return 0;\n</code></pre>\n</blockquote>\n<hr>\n<p>To answer your question about your latest edit:</p>\n<pre><code>#include &lt;Account&gt;\n\nint main(){ \n    Account:: Account(string n) : name(n), balance(0){} \n    return 0 ; \n} \n</code></pre>\n<p>The form of <code>main()</code> is correct, but this is not how you provide class member definitions. The constructor needs to be outside the main function.</p>\n<pre><code>#include &lt;Account&gt;\n\n// Outside of main()\nAccount::Account(string n) : name(n), balance(0)\n{\n} \n\nint main()\n{ \n     return 0 ; \n} \n</code></pre>\n<p>To create an instance of <code>Account</code>, you declare a variable and pass all the required constructor arguments like this:</p>\n<pre><code>int main()\n{\n    Account account(\"Account Name\"); // A variable called \"account\"\n    account.deposit(100.00); // Calls the deposit() function on account\n                             // Make sure you provide a function\n                             // definition for Account::deposit().\n    return 0;\n}\n</code></pre>\n<p>Also, check the exact file path of where <code>class Account</code> is. If the <code>Account</code> class is in a file called <code>Account.h</code> and is in the same folder as the file containing the <code>main()</code> function, then you need to use <code>#include \"Account.h\"</code> instead of <code>#include &lt;Account&gt;</code> in that file. For example:</p>\n<pre><code>#include \"Account.h\" // Note .h and quotes\n\nAccount::Account(string n) : name(n), balance(0)\n{\n} \n\nint main()\n{\n    // ...\n    return 0;\n}\n</code></pre>\n<hr>\n<p>This is actually a rather fundamental aspect of the C++ programming language. Surely you have a book that covers this? In fact, <code>main()</code> functions and <code>#include</code> statements are usually the first thing that you learn when programming in C++. I highly recommend that you pick up <a href=\"https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\">a good C++ book</a> and read through them and do the exercises.</p>\n</hr></hr>", "OwnerUserId": "308661", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:11:31.357", "Id": "7920563", "Score": "6", "CreationDate": "2011-10-27T18:29:05.920", "LastActivityDate": "2011-10-27T18:52:06.470"}, "bq_ids": {"n4140": {"so_7920531_7920563_1": {"section_id": 7149, "quality": 0.9615384615384616, "length": 25}}, "n3337": {"so_7920531_7920563_1": {"section_id": 6893, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_7920531_7920563_1": {"section_id": 8650, "quality": 0.7692307692307693, "length": 20}}}, "7931016": {"ParentId": "7920531", "CommentCount": "0", "Body": "<p>as has been pointed out, you need a decent book. To answer your questions you should know the following:\nClasses are usually defined in .h file and implemented in .cpp or .cc file. You should have three files: Account.h, Account.cc and main.cc. You only compile the .cc files and the .h files are included in the parts of code where you need to know something about the class (i.e. when you are actually doing something with the class). If you are using g++ (linux, unix or mingw I think) you can compile the program using the following command: g++ main.cc Account.cc -o program_name</p>\n<p>main.cc:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#include \"Account.h\"\nint main() {\n  Account a(\"first account\");\n\n  cout &lt;&lt; a.get_balance() &lt;&lt; endl;\n  a.deposit(100.0);\n  cout &lt;&lt; a.get_balance() &lt;&lt; endl;\n\n  return 0;\n}\n</code></pre>\n<p>Your Account.h file should look like this:</p>\n<pre><code>#include&lt;string&gt;\n//#include &lt;iostream&gt; -- not needed here\n\n// using namespace std; -- don't use 'using' in header files\n\nclass Account\n{\n  std::string name;\n  double balance;\n\npublic:\n    Account(std::string n);\n    Account(std::string n, double initial_balance);\n\n    std::string get_name() const;\n    double get_balance() const;\n\n    void deposit(double amount);\n\n    void widthdraw(double amount);\n\n};\n</code></pre>\n<p>And finally your Account.cc file should implement the class.</p>\n<pre><code>#include \"Account.h\"\n\nusing namespace std;\n\nAccount::Account(string n) : name(n), balance(0.0) {}\n\nAccount::Account(string n, double initial_balance) :\nname(n), balance(initial_balance) {}\n\nstring Account::get_name() const {\n  return name;\n}\n\ndouble Account::get_balance() const {\n  return balance;\n}\n\nvoid Account::deposit(double amount) {\n  balance += amount;\n}\n\nvoid Account::widthdraw(double amount) {\n  balance -= amount; // generously allow overdraft...\n}\n</code></pre>\n<p>Hope that helps. </p>\n<p>Roman</p>\n", "OwnerUserId": "1013568", "PostTypeId": "2", "Id": "7931016", "Score": "1", "CreationDate": "2011-10-28T15:00:06.720", "LastActivityDate": "2011-10-28T15:00:06.720"}});