post_cb({"28205387": {"CommentCount": "2", "ViewCount": "720", "PostTypeId": "1", "ClosedDate": "2015-01-29T02:31:35.597", "LastEditorUserId": "1107100", "CreationDate": "2015-01-29T01:08:02.037", "LastActivityDate": "2015-01-29T02:10:30.683", "Title": "Is it safe to reuse a std container after std::move?", "AcceptedAnswerId": "28205411", "LastEditDate": "2015-01-29T02:10:30.683", "Id": "28205387", "Score": "1", "Body": "<p>If I have a <code>std::list</code>, for example, and I use <code>std::move()</code> to move its information into a <code>std::map</code>, is it safe to reuse the list by populating it with more data so that I can add more entries to the map? I vaguely remember being told by another programmer that <code>std::move()</code> puts things in an unknown state so you shouldn't reuse them after, but I would just like to confirm since I can't seem to find any information on this just by searching around.</p>\n<p>If it's not safe, then would calling <code>clear()</code> on the list after moving it make it OK to reuse?</p>\n<p>Here's an example of what I'm doing:</p>\n<pre><code>// Create the initial list, give it some data, then move it into the map.\ntypedef std::list&lt;std::pair&lt;string, uint16&gt;&gt; TListType;\nTListType data;\ndata.push_back(std::make_pair(\"some string\", 0));\ndata.push_back(std::make_pair(\"some other string\", 0));\n\nstd::map&lt;uint32, TListType&gt; mappedData;\nmappedData.insert(std::make_pair(0, std::move(data)));\n\n// Insert more data into the list, then move into the map as a new entry.\ndata.push_back(std::make_pair(\"new strings\", 9));\nmappedData.insert(std::make_pair(1, std::move(data)));\n</code></pre>\n<p>The reason I have to do all this ugly mess is because I can't use initializer lists and I don't have Boost, so I'm a bit limited in how to initialize complicated data structures.</p>\n", "Tags": "<c++><c++11><std><move-semantics>", "OwnerUserId": "1107100", "AnswerCount": "1"}, "28205411": {"ParentId": "28205387", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-01-29T01:11:37.323", "Score": "4", "LastEditorUserId": "1120273", "LastEditDate": "2015-01-29T01:18:55.670", "Id": "28205411", "OwnerUserId": "1120273", "Body": "<p>After moving from the standard C++ library classes, they are in an unspecified state but otherwise entirely usable. The relevant section is 17.6.5.15 [lib.types.movedfrom]:</p>\n<blockquote>\n<p id=\"so_28205387_28205411_0\">Objects of types defined in the C++ standard library may be moved from (12.8). Move operations may be explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be\n  placed in a valid but unspecified state.</p>\n</blockquote>\n<p>None of the containers specifies otherwise (as far as I know).</p>\n<p>From the sounds of it, you are actually moving the elements, though. However, for these apply rather similar restrictions based on the definition of what <code>MoveConstructible</code> and <code>MoveAssignable</code> means (from section 17.6.3.1 [utility.arg.requirements]; <code>rv</code> is the argument to either move constructino or move assignment):</p>\n<blockquote>\n<p id=\"so_28205387_28205411_1\"><code>rv</code>\u2019s state is unspecified [ Note:<code>rv</code> must still meet the requirements of the library component that is using it. The operations listed in those requirements must work as specified whether <code>rv</code> has been moved from or not. \u2014end note ]</p>\n</blockquote>\n", "LastActivityDate": "2015-01-29T01:18:55.670"}, "bq_ids": {"n4140": {"so_28205387_28205411_0": {"section_id": 6365, "quality": 0.92, "length": 23}, "so_28205387_28205411_1": {"section_id": 6276, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_28205387_28205411_0": {"section_id": 6122, "quality": 0.92, "length": 23}, "so_28205387_28205411_1": {"section_id": 6036, "quality": 0.8333333333333334, "length": 20}}, "n4659": {"so_28205387_28205411_0": {"section_id": 7876, "quality": 0.92, "length": 23}, "so_28205387_28205411_1": {"section_id": 7783, "quality": 0.8333333333333334, "length": 20}}}});