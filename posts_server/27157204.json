post_cb({"bq_ids": {"n4140": {"so_27157204_27157694_0": {"section_id": 5991, "quality": 0.882051282051282, "length": 172}}, "n3337": {"so_27157204_27157694_0": {"section_id": 5759, "quality": 0.882051282051282, "length": 172}}, "n4659": {"so_27157204_27157694_0": {"section_id": 7491, "quality": 0.5948717948717949, "length": 116}}}, "27157811": {"ParentId": "27157204", "CommentCount": "0", "Body": "<p>Although the standard does definitely claim that the lifetime of a parameter ends when the function in which it is defined returns, as answered by Anton Savin, this is not what implementations do, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1880\">and the standard will likely be changed to allow what implementations do</a>:</p>\n<blockquote>\n<p id=\"so_27157204_27157811_0\">WG decided to make it unspecified whether parameter objects are destroyed immediately following the call or at the end of the full-expression to which the call belongs.</p>\n</blockquote>\n<p>This means the lifetime of a function parameter would become unspecified. It might end as soon as the function returns, or it might end later.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "27157811", "Score": "7", "CreationDate": "2014-11-26T19:55:38.930", "LastActivityDate": "2014-11-26T19:55:38.930"}, "27157204": {"CommentCount": "5", "AcceptedAnswerId": "27157694", "PostTypeId": "1", "ClosedDate": "2014-11-27T03:21:39.663", "LastEditorUserId": "1484212", "CreationDate": "2014-11-26T19:18:51.330", "LastActivityDate": "2014-11-26T21:20:04.767", "LastEditDate": "2014-11-26T21:20:04.767", "ViewCount": "186", "FavoriteCount": "1", "Title": "What's the life-time of a function parameter (citation needed)?", "Id": "27157204", "Score": "3", "Body": "<p>Is the life-time of a function parameter equal of an unnamed temporary passed as an 'rvalue' reference (which is equal of the expression called the function)? My 'gcc' compiler shows that it is. But I want to see an actual standard document that states it too (possible the newest 'C++11' or 'C++14').</p>\n", "Tags": "<c++><c++11><standards><c++14>", "OwnerUserId": "4031604", "AnswerCount": "2"}, "27157694": {"ParentId": "27157204", "CommentCount": "0", "Body": "<p><code>5.2.2 [expr.call]/4</code>, seems to be the same in C++11 and C++14:</p>\n<blockquote>\n<p id=\"so_27157204_27157694_0\">When a function is called, each parameter (8.3.5) shall be initialized (8.5, 12.8, 12.1) with its corresponding\n  argument. [ Note: Such initializations are indeterminately sequenced with respect to each other (1.9) \u2014\n  end note ] If the function is a non-static member function, the this parameter of the function (9.3.2) shall\n  be initialized with a pointer to the object of the call, converted as if by an explicit type conversion (5.4).\n  [ Note: There is no access or ambiguity checking on this conversion; the access checking and disambiguation\n  are done as part of the (possibly implicit) class member access operator. See 10.2, 11.2, and 5.2.5. \u2014\n  end note ] When a function is called, the parameters that have object type shall have completely-defined\n  object type. [ Note: this still allows a parameter to be a pointer or reference to an incomplete class type.\n  However, it prevents a passed-by-value parameter to have an incomplete class type. \u2014end note ] During\n  the initialization of a parameter, an implementation may avoid the construction of extra temporaries by\n  combining the conversions on the associated argument and/or the construction of temporaries with the\n  initialization of the parameter (see 12.2). <strong>The lifetime of a parameter ends when the function in which it\n  is defined returns.</strong> The initialization and destruction of each parameter occurs within the context of the\n  calling function. [ Example: the access of the constructor, conversion functions or destructor is checked at\n  the point of call in the calling function. If a constructor or destructor for a function parameter throws an\n  exception, the search for a handler starts in the scope of the calling function; in particular, if the function\n  called has a function-try-block (Clause 15) with a handler that could handle the exception, this handler is\n  not considered. \u2014end example ] The value of a function call is the value returned by the called function\n  except in a virtual function call if the return type of the final overrider is different from the return type of\n  the statically chosen function, the value returned from the final overrider is converted to the return type of\n  the statically chosen function.</p>\n</blockquote>\n<p>Is this what you are asking for?</p>\n", "OwnerUserId": "3959454", "PostTypeId": "2", "Id": "27157694", "Score": "3", "CreationDate": "2014-11-26T19:48:28.023", "LastActivityDate": "2014-11-26T19:48:28.023"}});