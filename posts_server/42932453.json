post_cb({"bq_ids": {"n4140": {"so_42932453_42932453_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 250}, "so_42932453_42933060_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5404}}, "n3337": {"so_42932453_42932453_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 241}, "so_42932453_42933060_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5199}}, "n4659": {"so_42932453_42932453_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 257}, "so_42932453_42932876_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 8540}, "so_42932453_42933060_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6853}}}, "42932876": {"Id": "42932876", "PostTypeId": "2", "Body": "<p>It's not legal. From <a href=\"http://en.cppreference.com/w/cpp/language/inline\" rel=\"nofollow noreferrer\">cppreference.com</a>:</p>\n<blockquote>\n<p id=\"so_42932453_42932876_0\">2) The definition of an inline function or variable (since C++17) must\n  be present in the translation unit where it is accessed (not\n  necessarily before the point of access).</p>\n</blockquote>\n", "LastActivityDate": "2017-03-21T16:25:31.163", "CommentCount": "0", "CreationDate": "2017-03-21T16:25:31.163", "ParentId": "42932453", "Score": "4", "OwnerUserId": "2329287"}, "42932827": {"Id": "42932827", "PostTypeId": "2", "Body": "<p>Whether or not it's legal I'm not sure how useful it is. Inline functions must be defined in the same translation units where they're used. That is, the second file should give a linker error because you only defined it in the impl file. </p>\n", "LastActivityDate": "2017-03-21T16:23:06.687", "CommentCount": "0", "CreationDate": "2017-03-21T16:23:06.687", "ParentId": "42932453", "Score": "1", "OwnerUserId": "7744704"}, "42933060": {"Id": "42933060", "PostTypeId": "2", "Body": "<p><code>[dcl.inline]</code></p>\n<blockquote>\n<p id=\"so_42932453_42933060_0\">An inline function or variable shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case ([basic.def.odr]).</p>\n</blockquote>\n<p>If your compiler does LTO (or <a href=\"https://msdn.microsoft.com/en-us/library/0zza0de8.aspx\" rel=\"nofollow noreferrer\">GL</a>) you might get away with it, otherwise unless you're redefining the same inline function in every TU (or just using it in a single one), this is not legal.</p>\n", "LastActivityDate": "2017-03-21T16:33:03.323", "CommentCount": "0", "CreationDate": "2017-03-21T16:33:03.323", "ParentId": "42932453", "Score": "1", "OwnerUserId": "1938163"}, "42932453": {"ViewCount": "77", "Body": "<p>in header file:</p>\n<pre><code>inline void func(void); // declare only, with `inline`\n</code></pre>\n<p>in impl source file:</p>\n<pre><code>void func(void) { balabala(); }\n</code></pre>\n<p>in other source file:</p>\n<pre><code>func(); // call the func\n</code></pre>\n<p>Question: Is it legal to declare inline function, even if it's not actually inlined in header file?</p>\n<blockquote>\n<p id=\"so_42932453_42932453_0\">PS:</p>\n<p id=\"so_42932453_42932453_1\">Why need this: I have some macro generated functions, may or may not be declare in header only, so I wish the macro can be used without explicitly specify inline or not</p>\n<p id=\"so_42932453_42932453_2\">And, I know the function can be wrapped by a wrapper class as static member function in header</p>\n<p id=\"so_42932453_42932453_3\">the tricky inline solution was tested under MSVC and clang without compile error, simply want to know whether it's legal in C++ standard</p>\n</blockquote>\n", "AcceptedAnswerId": "42932876", "Title": "is it legal to declare inline but not actually inline a function in C++", "CreationDate": "2017-03-21T16:08:40.383", "Id": "42932453", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-03-21T16:33:03.323", "Score": "1", "OwnerUserId": "5840430", "Tags": "<c++><inline>", "AnswerCount": "3"}});