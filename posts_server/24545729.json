post_cb({"24545860": {"ParentId": "24545729", "CommentCount": "1", "Body": "<p>According to the C++11 standard, you are explicitly not allowed to do so for functions. The relevant passage is under \u00a7 9.2/8:</p>\n<blockquote>\n<p id=\"so_24545729_24545860_0\">A <em>virt-specifier-seq</em> shall contain at most one of each <em>virt-specifier</em>. A <em>virt-specifier-seq</em> shall appear only in the declaration of a virtual member function (10.3).</p>\n</blockquote>\n<p>A <em>virt-specifier</em> includes <code>final</code> and <code>override</code>.</p>\n<p>My guess is that they thought that these specifiers didn't make sense to be used in non-virtual functions since non-virtual functions are <code>final</code> by default and they are the \"final overrider\" as the standard states in other sections.</p>\n<blockquote>\n<p id=\"so_24545729_24545860_1\">It looks like this means I have to declare all methods as virtual now to be able to do that. Is that a good idea or are there reasons against it?</p>\n</blockquote>\n<p>I recommend against it -- as having virtual functions has different effects on the code which you may not want. For example, the class will now have to keep a vtable and lose its POD status. Overall it seems like a bad move if you just want to use the <code>final</code> keyword.</p>\n", "OwnerUserId": "1381108", "PostTypeId": "2", "Id": "24545860", "Score": "5", "CreationDate": "2014-07-03T05:49:45.260", "LastActivityDate": "2014-07-03T05:49:45.260"}, "24545729": {"CommentCount": "6", "AcceptedAnswerId": "24545860", "PostTypeId": "1", "LastEditorUserId": "274473", "CreationDate": "2014-07-03T05:38:54.130", "LastActivityDate": "2014-07-03T05:51:13.550", "LastEditDate": "2014-07-03T05:51:13.550", "ViewCount": "793", "FavoriteCount": "1", "Title": "Why is it not possible to define a non-virtual method as final in C++11?", "Id": "24545729", "Score": "9", "Body": "<p>Today I was pretty happy when I learned that C++11 now finally knowns the <code>final</code> keyword. With it you can easily define a whole class as <em>final</em> and even single virtual methods. But I wonder why this is not possible for non-virtual methods? Let's take this example:</p>\n<pre><code>class A {\npublic:\n    void m1() { cout &lt;&lt; \"A::m1\" &lt;&lt; endl; };            \n    virtual void m2() { cout &lt;&lt; \"A::m2\" &lt;&lt; endl; };      \n};\n\nclass B : public A {\npublic:\n    void m1() { cout &lt;&lt; \"B::m1\" &lt;&lt; endl; };\n    virtual void m2() { cout &lt;&lt; \"B::m2\" &lt;&lt; endl; };\n};\n</code></pre>\n<p>Here I can easily prevent <code>B</code> from overriding the virtual <code>m2</code> by declaring <code>A::m2</code> as final. I would like to do the same with <code>A::m1</code> so <code>B</code> can't hide <code>A:m1</code> with it's own implementation of the method. but the compiler doesn't accept the <code>final</code> keyword without <code>virtual</code>. And I wonder if there is a reason why C++11 doesn't allow this and if I misunderstood something completely. In my opinion it makes perfectly sense to define a non-virtual method as final because I didn't declare it as virtual because I don't want others to override/hide it anyway (Which I can now enforce with <code>final</code> but unfortunately only for virtual methods...)</p>\n<p>I like class designs where everything except abstract methods are final. It looks like this means I have to declare all methods as <code>virtual</code> now to be able to do that. Is that a good idea or are there reasons against it? For older C++ versions I often read that is a bad idea to declare all methods as virtual. Or maybe there is a better way to prevent hiding non-virtual methods?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "274473", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24545729_24545860_0": {"section_id": 5868, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_24545729_24545860_0": {"section_id": 5639, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_24545729_24545860_0": {"section_id": 7351, "quality": 0.9230769230769231, "length": 12}}}});