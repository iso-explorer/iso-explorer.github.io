post_cb({"bq_ids": {"n4140": {"so_48195471_48195656_0": {"length": 41, "quality": 0.7192982456140351, "section_id": 5417}}, "n3337": {"so_48195471_48195656_0": {"length": 39, "quality": 0.6842105263157895, "section_id": 5212}}, "n4659": {"so_48195471_48195656_0": {"length": 49, "quality": 0.8596491228070176, "section_id": 6839}}}, "48195471": {"ViewCount": "57", "Body": "<p>Easy question, is this legal?</p>\n<pre><code>template&lt;class T&gt;\nstruct foo {\n\nusing type = std::conditional&lt;IF_CONDITION&lt;T&gt;::value, constexpr int, int&gt;::type;\n\n};\n</code></pre>\n<p>Compiler error: \"error: \"constexpr\" is not valid here\"\nHaven't been able to find any documentation on this. Because its a compile time condition it seems like this should be able to do in theory at least.</p>\n", "AcceptedAnswerId": "48195656", "Title": "Using constexpr in a type dependent context", "CreationDate": "2018-01-10T20:22:41.403", "Id": "48195471", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-01-10T20:36:52.970", "Score": "1", "OwnerUserId": "8137872", "Tags": "<c++><templates><metaprogramming>", "AnswerCount": "1"}, "48195656": {"Id": "48195656", "PostTypeId": "2", "Body": "<p>From the standard:</p>\n<blockquote>\n<p id=\"so_48195471_48195656_0\">The constexpr specifier shall be applied only to the definition of a\n  variable or variable template or the\n      declaration of a function or function template. A function or static data member declared with the constexpr\n      specifier is implicitly an inline function or variable (10.1.6). If any declaration of a function or function\n      template has a constexpr specifier, then all its declarations shall contain the constexpr specifier. [ Note:\n      An explicit specialization can differ from the template declaration with respect to the constexpr specifier.\n      \u2014 end note ] [ Note: Function parameters cannot be declared constexpr. \u2014 end note ]</p>\n</blockquote>\n<p>So constexpr is not supposed to be within the template parameter.</p>\n<p>In your case you could create the type specialization alias with:</p>\n<pre><code>template&lt;typename T&gt;\nusing MyVec0 = Vector&lt;T,0&gt;;\n</code></pre>\n", "LastActivityDate": "2018-01-10T20:36:52.970", "CommentCount": "0", "CreationDate": "2018-01-10T20:36:52.970", "ParentId": "48195471", "Score": "1", "OwnerUserId": "1201701"}});