post_cb({"bq_ids": {"n4140": {"so_28513114_28513114_2": {"length": 17, "quality": 1.0, "section_id": 48}, "so_28513114_28513114_1": {"length": 5, "quality": 1.0, "section_id": 48}, "so_28513114_28513114_3": {"length": 6, "quality": 1.0, "section_id": 48}}, "n3337": {"so_28513114_28513114_2": {"length": 17, "quality": 1.0, "section_id": 43}, "so_28513114_28513114_1": {"length": 4, "quality": 0.8, "section_id": 43}, "so_28513114_28513114_3": {"length": 6, "quality": 1.0, "section_id": 43}}, "n4659": {"so_28513114_28513114_2": {"length": 17, "quality": 1.0, "section_id": 49}, "so_28513114_28513114_1": {"length": 5, "quality": 1.0, "section_id": 49}, "so_28513114_28513114_3": {"length": 6, "quality": 1.0, "section_id": 49}}}, "28513114": {"ViewCount": "102", "Body": "<p><code>14/1 [temp]</code> provides:</p>\n<blockquote>\n<p id=\"so_28513114_28513114_0\">The declaration in a template-declaration shall</p>\n<p id=\"so_28513114_28513114_1\">(1.1) \u2014 declare or define a function, a class, or a variable, or</p>\n<p id=\"so_28513114_28513114_2\">(1.2) \u2014 define a member function, a member class, a member\n  enumeration, or a static data member of a class template or of a class\n  nested within a class template, or</p>\n<p id=\"so_28513114_28513114_3\">(1.3) \u2014 define a member template of a class or class template, or</p>\n<p id=\"so_28513114_28513114_4\">(1.4) \u2014 be an alias-declaration.</p>\n</blockquote>\n<p>The second bullet is unclear because it looks as we cannot declare and not define a member of class template. But actually we can do that:</p>\n<pre><code>template &lt;class U&gt;\nstruct A\n{\n    template&lt;class T&gt;\n    void foo();\n};\n\nint main(){}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/42a17c809f9bebd5\"><strong>CLANG</strong></a></p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/96a582edc655961b\"><strong>G++</strong></a></p>\n<p>And that compiles fine by both clang and gcc. Could oyu explain what that means?</p>\n", "AcceptedAnswerId": "28514786", "Title": "Unclear wording about declaration in template-declaration", "CreationDate": "2015-02-14T06:25:48.190", "LastActivityDate": "2015-02-14T13:33:55.767", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "28513114", "Score": "6", "Tags": "<c++><templates>", "AnswerCount": "1"}, "28514786": {"Id": "28514786", "PostTypeId": "2", "Body": "<pre><code>template &lt;class U&gt;\nstruct A\n{\n    template&lt;class T&gt;\n    void foo();\n};\n</code></pre>\n<p>As you can see, the <em>declaration</em> is <code>void foo();</code> which is a valid function declaration. Thus the first bullet point applies:</p>\n<blockquote>\n<p id=\"so_28513114_28514786_0\">The <em>declaration</em> in a <em>template-declaration</em> shall  </p>\n<ul>\n<li>declare or define a function, a class, or a variable, or</li>\n<li>define a member function, a member class, a member enumeration, or a static data member of a class template or of a class nested within a\n  class template, or</li>\n</ul>\n</blockquote>\n<p>Member functions are mentioned in the second bullet solely to underline that</p>\n<pre><code>template&lt;class T&gt;\nvoid A&lt;T&gt;::foo() {}\n</code></pre>\n<p>is valid; The <em>declaration</em> in this <em>template-declaration</em> (<code>void A&lt;T&gt;::foo() {}</code>) is a member function definition. The \"or\" is not exclusive because the above <em>declaration</em> is still a function definition.  </p>\n<p>It now becomes clear that this can only concern definitions, since</p>\n<pre><code>template&lt;class T&gt;\nvoid A&lt;T&gt;::foo();\n</code></pre>\n<p>isn't valid anyway.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-02-14T13:33:55.767", "Score": "3", "CreationDate": "2015-02-14T10:44:58.780", "ParentId": "28513114", "CommentCount": "1", "OwnerUserId": "3647361", "LastEditDate": "2015-02-14T13:33:55.767"}});