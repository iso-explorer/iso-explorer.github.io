post_cb({"bq_ids": {"n4140": {"so_26309910_26310017_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 5769}, "so_26309910_26309910_1": {"length": 27, "quality": 0.7941176470588235, "section_id": 6186}, "so_26309910_26309910_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 91}, "so_26309910_26310017_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 91}}, "n3337": {"so_26309910_26310017_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 5542}, "so_26309910_26309910_1": {"length": 33, "quality": 0.9705882352941176, "section_id": 5947}, "so_26309910_26309910_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 86}, "so_26309910_26310017_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 86}}, "n4659": {"so_26309910_26310017_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 7226}, "so_26309910_26309910_1": {"length": 25, "quality": 0.7352941176470589, "section_id": 7689}}}, "26309910": {"ViewCount": "124", "Body": "<p>This is almost assuredly a duplicate of <a href=\"https://stackoverflow.com/questions/17559165/is-gcc-wrong-not-diagnose-narrowing-conversions-in-non-type-template-arguments\">Is gcc wrong not diagnose narrowing conversions in non-type template arguments?</a> but it does not provide a satisfactory answer. The answer doesn't address whether or not GCC is wrong in not providing a diagnostic, only giving a warning flag that's somewhat a substitute.</p>\n<p>The relevant sections of the standard:</p>\n<p>\u00a7 14.3.2/5</p>\n<blockquote>\n<p id=\"so_26309910_26309910_0\">For a non-type template-parameter of integral or enumeration type,\n  conversions permitted in a con- verted constant expression (5.19) are\n  applied.</p>\n</blockquote>\n<p>\u00a7 5.19/3</p>\n<blockquote>\n<p id=\"so_26309910_26309910_1\">A converted constant expression of type T is a literal constant\n  expression, implicitly converted to type T, where the implicit\n  conversion (if any) is permitted in a literal constant expression and\n  the implicit conversion sequence contains only user-defined\n  conversions, lvalue-to-rvalue conversions (4.1), integral promotions\n  (4.5), and integral conversions (4.7) other than narrowing conversions\n  (8.5.4)</p>\n</blockquote>\n<p>The standard addresses situations in which narrowing conversions will make a program ill-formed, but there is a glaring omission here, so compilers disagree (GCC provides no diagnostic, Clang makes this an error, MSVC also provides no diagnostic.) Is there language in the standard that says for this situation, a diagnostic is required (i.e. it's ill-formed)? </p>\n<pre><code>#include &lt;array&gt;\n\nint main()\n{\n    std::array&lt;int, -1&gt; a;\n}\n</code></pre>\n", "AcceptedAnswerId": "26310017", "Title": "Are narrowing conversions in non-type template parameters required to be diagnosed?", "CreationDate": "2014-10-11T00:41:57.933", "Id": "26309910", "CommentCount": "4", "LastEditDate": "2014-10-11T01:10:17.147", "PostTypeId": "1", "OwnerDisplayName": "user3920237", "LastEditorUserId": "2684539", "LastActivityDate": "2014-10-11T01:10:17.147", "Score": "1", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "26310017": {"Id": "26310017", "PostTypeId": "2", "Body": "<p>As of n3337, the wording had already been changed to make it clear that the result is ill-formed. (\u00a714.3.2/5): </p>\n<blockquote>\n<p id=\"so_26309910_26310017_0\">The following conversions are performed on each expression used as a non-type template-argument. If a non-type template-argument cannot be converted to the type of the corresponding template-parameter then the program is ill-formed.</p>\n</blockquote>\n<p>Since it specifies that the program is ill-formed, and doesn't give specific permission to the contrary, a diagnostic is required for violating this (per \u00a71.4/1):</p>\n<blockquote>\n<p id=\"so_26309910_26310017_1\">The set of diagnosable rules consists of all syntactic and semantic rules in this International Standard except for those rules containing an explicit notation that \u201cno diagnostic is required\u201d or which are described as resulting in \u201cundefined behavior.\u201d</p>\n</blockquote>\n<p>FWIW, note that they've also separated the definition of the permissible conversions from those for converted constant expressions--the possible conversions are now listed directly in \u00a714.3.2/5.</p>\n", "LastActivityDate": "2014-10-11T01:04:40.610", "CommentCount": "0", "CreationDate": "2014-10-11T01:04:40.610", "ParentId": "26309910", "Score": "3", "OwnerUserId": "179910"}});