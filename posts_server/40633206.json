post_cb({"bq_ids": {"n4140": {"so_40633206_40633475_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_40633206_40633475_1": {"length": 29, "quality": 1.0, "section_id": 438}, "so_40633206_40633475_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_40633206_40633475_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_40633206_40633475_4": {"length": 5, "quality": 1.0, "section_id": 438}, "so_40633206_40633475_5": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}}, "n3337": {"so_40633206_40633475_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_40633206_40633475_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_40633206_40633475_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_40633206_40633475_1": {"length": 29, "quality": 1.0, "section_id": 429}, "so_40633206_40633475_4": {"length": 5, "quality": 1.0, "section_id": 429}, "so_40633206_40633475_5": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}}, "n4659": {"so_40633206_40633475_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_40633206_40633475_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_40633206_40633475_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_40633206_40633475_1": {"length": 29, "quality": 1.0, "section_id": 458}, "so_40633206_40633475_4": {"length": 5, "quality": 1.0, "section_id": 458}, "so_40633206_40633475_5": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}}}, "40633553": {"Id": "40633553", "PostTypeId": "2", "Body": "<p>Non-static data members are initialized in the order they were declared.</p>\n<p>By compiling the following code you can test this if you have warnings enabled:</p>\n<pre><code>// Example program\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Test {\n\nprivate:\n    int a;\n\npublic:\n    int b;\n\n    Test() : a(0), b(0) {}\n\n};\n\nclass TestPrivatePriority {\n\npublic:\n    int b;\n\n    TestPrivatePriority() : a(0), b(0) {}\n\nprivate:\n    int a;\n\n};\n\nclass TestPublicPriority {\n\nprivate:\n    int a;\n\npublic:\n    int b;\n\n    TestPublicPriority() : b(0), a(0) {}\n\n};\n\nint main()\n{\n  Test t;\n  TestPrivatePriority t1;\n  TestPublicPriority t2;\n\n  return 0;\n}\n</code></pre>\n<p>This will produce the following self-explanatory warnings:</p>\n<pre><code>In constructor 'TestPrivatePriority::TestPrivatePriority()':\n25:9: warning: 'TestPrivatePriority::a' will be initialized after [-Wreorder]\n20:9: warning:   'int TestPrivatePriority::b' [-Wreorder]\n22:5: warning:   when initialized here [-Wreorder]\n In constructor 'TestPublicPriority::TestPublicPriority()':\n35:9: warning: 'TestPublicPriority::b' will be initialized after [-Wreorder]\n32:9: warning:   'int TestPublicPriority::a' [-Wreorder]\n37:5: warning:   when initialized here [-Wreorder]\n</code></pre>\n", "LastActivityDate": "2016-11-16T13:35:55.403", "Score": "1", "CreationDate": "2016-11-16T13:35:55.403", "ParentId": "40633206", "CommentCount": "0", "OwnerUserId": "6616224"}, "40633475": {"Id": "40633475", "PostTypeId": "2", "Body": "<p>The rules for class initialization are spelled out in [class.base.init]/11</p>\n<blockquote>\n<p id=\"so_40633206_40633475_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li><p id=\"so_40633206_40633475_1\">First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</p></li>\n<li><p id=\"so_40633206_40633475_2\">Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).</p></li>\n<li><p id=\"so_40633206_40633475_3\"><strong>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</strong></p></li>\n</ul>\n<p id=\"so_40633206_40633475_4\">8 Finally, the compound-statement of the constructor body is executed.</p>\n<p id=\"so_40633206_40633475_5\">[ Note: The declaration order is mandated to ensure that base and member subobjects are destroyed in the reverse order of initialization. \u2014end note ]</p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>So when we look at bullet 3 it specifically states that the member are constructed in the order the appear in the definition.  This means that regardless of <code>private</code>, <code>public</code>, or how they are listed in the class member initialization list they will be constructed in the order they are declared.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-11-16T14:01:10.540", "Score": "3", "CreationDate": "2016-11-16T13:32:22.113", "ParentId": "40633206", "CommentCount": "0", "LastEditDate": "2016-11-16T14:01:10.540", "OwnerUserId": "4342498"}, "40633206": {"ViewCount": "208", "Body": "<p>I know that in a <code>class</code> the members are initialized in the order they are listed. Does that apply across grouping of variables into <code>public</code> and <code>private</code> etc? My confusion is that I could not figure out if there is preference such as <code>private</code> members get initialized in the order they have been listed before <code>public</code> members irrespective of where the private variables listed with respect to the public in a class declaration (I know such bias exist towards the base class members)</p>\n", "AcceptedAnswerId": "40633475", "Title": "c++ class member initialization sequence", "CreationDate": "2016-11-16T13:19:17.893", "Id": "40633206", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-11-16T14:01:10.540", "Score": "2", "OwnerUserId": "6386155", "Tags": "<c++><class><initialization><private><public>", "AnswerCount": "2"}});