post_cb({"7624652": {"CommentCount": "1", "AcceptedAnswerId": "7624668", "PostTypeId": "1", "LastEditorUserId": "15168", "CreationDate": "2011-10-02T04:41:39.953", "LastActivityDate": "2011-10-02T08:30:26.820", "LastEditDate": "2011-10-02T04:57:55.990", "ViewCount": "1583", "FavoriteCount": "4", "Title": "How to make an intelligent decision about which standard exception to throw?", "Id": "7624652", "Score": "12", "Body": "<p>We know that the exception class has two derived classes: <strong>logic_error</strong> and <strong>runtime_error</strong>.</p>\n<p><strong>logic_error</strong> has four derived classes: <strong>domain_error</strong>, <strong>invalid_argument</strong>, <strong>length_error</strong> and <strong>out_of_range</strong>.</p>\n<p><strong>runtime_error</strong> has three derived classes: <strong>range_error</strong>, <strong>overflow_error</strong> and <strong>underflow_error</strong>.</p>\n<p>While some of them are self-explanatory, like <strong>overflow_error</strong> and <strong>underflow_error</strong>, some are not that clear, especially <strong>range_error</strong>, both MSDN and cplusplus just say \"to report a range error\", which is close to saying nothing, how it is different <strong>out_of_range</strong> and <strong>domain_error</strong>???</p>\n<p>Another question is when I throw an exception, which one should I choose? For example, In <strong>reverse_string(char* s)</strong>, which exception to throw when s is NULL? In <strong>float calc_ellipse_area(float a, float b)</strong>, which to throw when a or b is &lt;=0? Which to throw when a == b (strictly speaking, circle is not an ellipse!)?</p>\n<p>Finally, practically speaking, does it really matter if I throw an exception which is not correctly categorized?</p>\n", "Tags": "<c++><exception-handling><error-handling>", "OwnerUserId": "955191", "AnswerCount": "4"}, "7624720": {"ParentId": "7624652", "CommentCount": "0", "Body": "<p>The difference between out_of_range and range_error is found in the description of their parent classes:</p>\n<blockquote>\n<p id=\"so_7624652_7624720_0\">logic_error: This class defines the type of objects thrown as exceptions to report\n  errors in the internal logical of the program. These are theoretically\n  preventable.</p>\n<p id=\"so_7624652_7624720_1\">runtime_error: This class defines the type of objects thrown as exceptions to report\n  errors that can only be determined during runtime.</p>\n</blockquote>\n<p>Domain error is for mathematical functions specifically. So your calc_ellipse_area could quite sensibly throw a domain error on negative value (and return 0 if one or both arguments are 0). I don't see any reason to complain if the ellipse happens to also be a circle, any more than a rectangle area function should fail on a square.</p>\n<p>Passing null pointers to functions that shouldn't receive NULL I would handle by invalid argument exceptions.</p>\n<p>C++ lets you throw whatever you like. What's really helpful to those who might use your code is that you name what you throw after the method signature, and that these names are reasonably descriptive. By default, a function could throw anything - to promise that a function won't throw, you have to use an empty throw() in the signature.</p>\n", "OwnerUserId": "965934", "PostTypeId": "2", "Id": "7624720", "Score": "3", "CreationDate": "2011-10-02T05:05:01.113", "LastActivityDate": "2011-10-02T05:05:01.113"}, "7624668": {"ParentId": "7624652", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_7624652_7624668_0\">For example, In reverse_string(char* s), which exception to throw when s is NULL?   </p>\n<p id=\"so_7624652_7624668_1\">In float calc_ellipse_area(float a, float b), which to throw when a or b is &lt;=0? Which to throw when a == b (strictly speaking, circle is not an ellipse!)?</p>\n</blockquote>\n<p>For both of these, use <code>std::invalid_argument</code>. </p>\n<p>Or you can define your own exception called <code>null_argument</code> deriving from <code>std::logic_error</code> (or from <code>std::invalid_argument</code>), and use it for <code>NULL</code> argument.</p>\n<p>The point is that if none of the standard exception class applies to your situation, or you want <em>more</em> specific exception, then define one deriving from existing classes.</p>\n<p>For example, if you want to throw exception when you encounter an invalid index, then either you can use <code>std::out_of_range</code> or define more specific class called <code>index_out_of_range</code> deriving from <code>std::out_of_range</code>.</p>\n<blockquote>\n<p id=\"so_7624652_7624668_2\">does it really matter if I throw an exception which is not correctly categorized?</p>\n</blockquote>\n<p>Yes, it does matter. For example, it increases readability of your code. If you throw <code>std::logic_error</code> when an invalid index is encountered, then well, it doesn't add much to the readability, but instead of that if you throw <code>std::out_of_range</code>, then it greatly increases the readability. And if you throw <code>index_out_of_range</code>, it increases even more, as it's more specific.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-10-02T04:59:18.843", "Id": "7624668", "Score": "4", "CreationDate": "2011-10-02T04:45:57.467", "LastActivityDate": "2011-10-02T04:59:18.843"}, "7624705": {"ParentId": "7624652", "CommentCount": "0", "Body": "<p>From the standard:</p>\n<blockquote id=\"so_7624652_7624705_0\">\n<ul>\n<li>The Standard C++ library provides classes to be used to report certain errors (17.6.5.12) in C++ programs.  In the error model reflected in these classes, errors are divided into two broad categories:  logic errors and runtime errors.</li>\n<li>The distinguishing characteristic of logic errors is that they are due to errors in the internal logic of the program. In theory, they are preventable.</li>\n<li>By contrast, runtime errors are due to events beyond the scope of the program.  They  cannot be easily predicted in advance.</li>\n</ul>\n</blockquote>\n<p>However, all the exception types derived from <code>runtime_error</code> are misclassified -- all of them are easily preventable.</p>\n<p>For actual runtime errors, the C++ standard library is rather inconsistent, it sometimes uses return values or internal state (e.g. <code>iostream::bad()</code>.  And when it does use exceptions, they don't derive from <code>runtime_error</code>.  For example, <code>std::bad_alloc</code> is a direct subclass of <code>std::exception</code>.</p>\n<p>In conclusion, you shouldn't ever use <code>std::runtime_error</code> or any of its predefined subclasses.</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "7624705", "Score": "2", "CreationDate": "2011-10-02T04:59:53.693", "LastActivityDate": "2011-10-02T04:59:53.693"}, "bq_ids": {"n4140": {"so_7624652_7624720_0": {"section_id": 2556, "quality": 0.6, "length": 9}, "so_7624652_7624720_1": {"section_id": 1940, "quality": 0.5714285714285714, "length": 8}}, "n3337": {"so_7624652_7624720_0": {"section_id": 2521, "quality": 0.6, "length": 9}, "so_7624652_7624720_1": {"section_id": 1929, "quality": 0.5714285714285714, "length": 8}}, "n4659": {"so_7624652_7624720_0": {"section_id": 3292, "quality": 0.6, "length": 9}, "so_7624652_7624720_1": {"section_id": 2211, "quality": 0.5714285714285714, "length": 8}}}, "7625334": {"ParentId": "7624652", "CommentCount": "0", "Body": "<p>A logic error is the (theoretically) result of a programmer error.\nA runtime error is something that could not easily have been prevented by the programmer.</p>\n<p>When you write a function, it is useful to document its preconditions and/or assumptions.  If those preconditions are broken, it is a logic error.  </p>\n<p>A runtime error is usually due to something external: a file operation failed, a printer is offline, a DLL could not be loaded.</p>\n<p>If a path parameter is malformed, that is a logic error.  If it is a valid path string, but does not exist, or you don't have permission to access it, that is a runtime error.</p>\n<p>Sometimes it becomes arbitrary.  Bad user input is probably a runtime error, but failure to validate user input is more of a logic error.  It may not be obvious which is the case in a particular situation.</p>\n<p>If something starts in 01 Feb 2011, a finish date of \"01 Jan 2011\" is an invalid argument, while \"31 Feb 2011\" is out of range.  A finish date of \"fish and chips\" is a domain error.  Length errors are often about buffer size, but that might also include too much or too little input data or something like that.</p>\n<p>A range error is similar to an out of range error, except for the context (runtime, not logic).  e.g. Number of printers available = 0.  Overflow and underflow are more or less self-explanatory.</p>\n<p>In the end, use them in a way that you and your colleagues find meaningful -- or possibly don't use them at all.  Some people just use std::exception for everything.</p>\n<p>It is only really important if you are going to handle different exceptions differently.  If you are just going to display (or log) a message and carry on, it doesn't matter what exception(s) you use. </p>\n", "OwnerUserId": "111432", "PostTypeId": "2", "Id": "7625334", "Score": "6", "CreationDate": "2011-10-02T08:30:26.820", "LastActivityDate": "2011-10-02T08:30:26.820"}});