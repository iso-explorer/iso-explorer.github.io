post_cb({"23927003": {"CommentCount": "4", "ViewCount": "245", "CreationDate": "2014-05-29T06:22:15.183", "LastActivityDate": "2014-05-29T06:31:45.193", "Title": "Why overloaded ' operator < ' should be const for class?", "AcceptedAnswerId": "23927045", "PostTypeId": "1", "Id": "23927003", "Score": "2", "Body": "<p>Can anybody explain this behavior in context of STL <code>sort</code> algorithm?\nIf <code>operator &lt;</code> is not defined <code>const</code> it gives error, </p>\n<p><code>error: passing \u2018const B\u2019 as \u2018this\u2019 argument of \u2018bool B::operator&lt;(const B&amp;)\u2019 discards qualifiers [-fpermissive]\n    while (__pivot &lt; *__last)</code></p>\n<p>Is <code>sort</code> algo lhs <code>const</code> object or <code>sort</code> is <code>const</code> method?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class B\n{\n public:\n    ...\n    bool operator &lt; (const B&amp; b) const       // why const required here?\n    {\n        return (m_i &lt; b.m_i);\n    } \n    ...\n\n private:\n    int m_i;\n    int m_j;\n};\n\nint main()\n{\n  vector&lt;B&gt; Bvec2 {B(5), B(3), B(30), B(20), B(8)};\n  std::sort(Bvec2.begin(), Bvec2.end());\n  ...\n}\n</code></pre>\n", "Tags": "<c++><stl><operator-overloading>", "OwnerUserId": "2235661", "AnswerCount": "2"}, "23927135": {"ParentId": "23927003", "CommentCount": "0", "CreationDate": "2014-05-29T06:31:38.477", "OwnerUserId": "485561", "PostTypeId": "2", "Id": "23927135", "Score": "3", "Body": "<p>The standard is a little unclear on this, but <code>[alg.sorting]</code> gives two hints as to why this failure to compile might be standard-conforming behaviour. The first is <code>[alg.sorting]/2</code>:</p>\n<blockquote>\n<p id=\"so_23927003_23927135_0\">... It is assumed that <code>comp</code> will not apply any non-constant function through the dereferenced iterator.</p>\n</blockquote>\n<p>Next, we are told that when no comparator is supplied <code>[alg.sorting]/3</code>:</p>\n<blockquote>\n<p id=\"so_23927003_23927135_1\">... <code>comp(*i, *j) != false</code> defaults to <code>*i &lt; *j != false</code></p>\n</blockquote>\n<p>since in your case, <code>comp</code> defaults to <code>*i &lt; *j != false</code>, and this applies a non-const function to the dereferenced iterators. This invalidates the assumption given in <code>[alg.sorting]/2</code>, and so your code has undefined behavior. It is legal for code with undefined behavior to not compile.</p>\n", "LastActivityDate": "2014-05-29T06:31:38.477"}, "23927045": {"ParentId": "23927003", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-05-29T06:25:34.903", "Score": "5", "LastEditorUserId": "13422", "LastEditDate": "2014-05-29T06:31:45.193", "Id": "23927045", "OwnerUserId": "13422", "Body": "<p>Marking the function as const promises that it will not change the object. So it can be used on const objects.</p>\n<p>The STL almost certainly takes the arguments as const, because that is the smart thing to do.</p>\n<p>It shouldn't hurt you to define <code>operator&lt;</code> as const because I cannot imagine having a less-than operator that changes the object. That would just be silly.</p>\n<p>If you want to know exactly where here is some code copied out of libstdc++ bits/stl_algo.h on a Fedora 20 machine:</p>\n<pre><code>  /// This is a helper function...\n  template&lt;typename _RandomAccessIterator, typename _Tp, typename _Compare&gt;\n    _RandomAccessIterator\n    __unguarded_partition(_RandomAccessIterator __first,\n                          _RandomAccessIterator __last,\n                          const _Tp&amp; __pivot, _Compare __comp)\n</code></pre>\n<p><code>const _Tp&amp; __pivot</code>, right there.</p>\n", "LastActivityDate": "2014-05-29T06:31:45.193"}, "bq_ids": {"n4140": {"so_23927003_23927135_0": {"section_id": 1394, "quality": 1.0, "length": 9}, "so_23927003_23927135_1": {"section_id": 1395, "quality": 1.0, "length": 4}}, "n3337": {"so_23927003_23927135_0": {"section_id": 1388, "quality": 1.0, "length": 9}, "so_23927003_23927135_1": {"section_id": 1389, "quality": 1.0, "length": 4}}, "n4659": {"so_23927003_23927135_0": {"section_id": 1512, "quality": 1.0, "length": 9}, "so_23927003_23927135_1": {"section_id": 1513, "quality": 1.0, "length": 4}}}});