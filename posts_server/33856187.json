post_cb({"bq_ids": {"n4140": {"so_33856187_33856325_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 6307}, "so_33856187_33856325_3": {"length": 10, "quality": 1.0, "section_id": 6307}, "so_33856187_33856325_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5335}, "so_33856187_33856407_0": {"length": 36, "quality": 0.9, "section_id": 7044}, "so_33856187_33856325_1": {"length": 8, "quality": 1.0, "section_id": 6307}, "so_33856187_33856407_2": {"length": 8, "quality": 0.8, "section_id": 6307}, "so_33856187_33856407_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 5335}}, "n3337": {"so_33856187_33856325_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 6064}, "so_33856187_33856325_3": {"length": 10, "quality": 1.0, "section_id": 6064}, "so_33856187_33856325_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5132}, "so_33856187_33856407_0": {"length": 36, "quality": 0.9, "section_id": 6789}, "so_33856187_33856325_1": {"length": 8, "quality": 1.0, "section_id": 6064}, "so_33856187_33856407_2": {"length": 8, "quality": 0.8, "section_id": 6064}, "so_33856187_33856407_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 5132}}, "n4659": {"so_33856187_33856325_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 6756}, "so_33856187_33856325_3": {"length": 9, "quality": 0.9, "section_id": 6756}, "so_33856187_33856325_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6756}, "so_33856187_33856407_0": {"length": 36, "quality": 0.9, "section_id": 8541}, "so_33856187_33856325_1": {"length": 5, "quality": 0.625, "section_id": 7844}, "so_33856187_33856407_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 6756}}}, "33856253": {"Id": "33856253", "PostTypeId": "2", "Body": "<p>It is technically allowed to do this. There are names that are reserved in the global namespace, but inside a function, your variable name won't be visible outside the function anyway, so not a problem.</p>\n<p>It is a terrible idea to use this.</p>\n<p>And beware that there CAN BE problems with this approach. For example:</p>\n<pre><code>#define NULL 0\n\nint main()\n{\n     int NULL = 42;\n     printf(\"%d\", NULL);\n}\n</code></pre>\n<p>is not allowed, since <code>NULL</code> is a macro, and not a scoped identifier.</p>\n<p>Edit: I would add that <code>printf</code> is not a \"built in function\". It is a \"C standard library function\". A bultin function is something like <code>__builtin_sin</code>, which the compiler \"knows about\" so that it can be optimised. Note that builtin functions typically use \"reserved names\", to avoid colliding with existing library and user-defined names at all times.</p>\n", "LastEditorUserId": "1919155", "LastActivityDate": "2015-11-22T16:01:52.327", "Score": "3", "CreationDate": "2015-11-22T15:06:04.763", "ParentId": "33856187", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2015-11-22T16:01:52.327"}, "33856407": {"Id": "33856407", "PostTypeId": "2", "Body": "<p>It's well-formed because neither <code>std::printf</code> nor <code>::printf</code> (which <em>may</em> also have been declared by <code>&lt;cstdio&gt;</code>!) are declared in the same scope as your integer, which therefore takes automatic precedence for the duration of the block.</p>\n<blockquote>\n<p id=\"so_33856187_33856407_0\"><code>[C++14: 3.3.1/1]:</code> <em>[..]</em> To determine the scope of a declaration, it is sometimes convenient to refer to the potential scope of a declaration. The scope of a declaration is the same as its potential scope unless the potential scope contains another declaration of the same name. In that case, the potential scope of the declaration in the inner (contained) declarative region is excluded from the scope of the declaration in the outer (containing) declarative region.</p>\n</blockquote>\n<p>For example, <a href=\"http://coliru.stacked-crooked.com/a/cdc45d66cb312ecf\" rel=\"nofollow\">you generally wouldn't be able to do this at namespace scope</a>.</p>\n<p>It's well-defined because the names of entities in the standard library are not inherently reserved names:</p>\n<blockquote>\n<p id=\"so_33856187_33856407_1\"><code>[C++14: 2.11/3]:</code> In addition, some identifiers are reserved for use by C++ implementations and standard libraries (17.6.4.3.2) and shall not be used otherwise; no diagnostic is required.</p>\n<p id=\"so_33856187_33856407_2\"><code>[C++14: 17.6.4.3.2/1]:</code> Certain sets of names and function signatures are always reserved to the implementation:</p>\n<ul>\n<li>Each name that contains a double underscore <code>_ _</code> or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-11-22T15:26:35.433", "Score": "4", "CreationDate": "2015-11-22T15:20:15.343", "ParentId": "33856187", "CommentCount": "1", "OwnerUserId": "560648", "LastEditDate": "2015-11-22T15:26:35.433"}, "33856187": {"ViewCount": "293", "Body": "<p>Consider following program:</p>\n<pre><code>#include &lt;cstdio&gt;\nint main()\n{\n    int printf=9;\n    std::printf(\"%d\",printf);\n}\n</code></pre>\n<p>Is it fine to use built in function name as an identifier in variable declaration? Is this well defined program? I mean is behaviour of above program well defined? I am curious to know whether the C++ standard allows to use standard function names as identifiers of variables </p>\n", "AcceptedAnswerId": "33856407", "Title": "is it valid to use standard library function name as identifier in C++?", "CreationDate": "2015-11-22T15:00:09.910", "Id": "33856187", "CommentCount": "2", "LastEditDate": "2015-11-23T11:40:49.690", "PostTypeId": "1", "LastEditorUserId": "3777958", "LastActivityDate": "2015-11-23T11:40:49.690", "Score": "1", "OwnerUserId": "3777958", "Tags": "<c++><identifier><reserved-words><variable-names>", "AnswerCount": "5"}, "33856325": {"Id": "33856325", "PostTypeId": "2", "Body": "<p>Relative to the identifiers in the standard libraries then the C++ Standard states only the following restruction for identifiers </p>\n<blockquote>\n<p id=\"so_33856187_33856325_0\">3 In addition, some identifiers are reserved for use by C++\n  implementations and <strong>standard libraries (17.6.4.3.2)</strong> and shall not be\n  used otherwise; no diagnostic is required.</p>\n</blockquote>\n<p>And (17.6.4.3.2 Global names)</p>\n<blockquote>\n<p id=\"so_33856187_33856325_1\">1 Certain sets of names and function signatures are always reserved to\n  the implementation:</p>\n<p id=\"so_33856187_33856325_2\">\u2014 Each name that contains a double underscore _ _ or begins with an\n  underscore followed by an uppercase letter (2.12) is reserved to the\n  implementation for any use.</p>\n<p id=\"so_33856187_33856325_3\">\u2014 Each name that begins with an underscore is reserved to the\n  implementation for use as a name in the global namespace.</p>\n</blockquote>\n<p>So you may use identifiers that coincide with standard function names.</p>\n<p>On the other hand this can confuse readers of the code and lead to ambiguity.\nTake into account that the Standard allows compilers to place standard C function names in the global namespace.</p>\n", "LastActivityDate": "2015-11-22T15:12:27.617", "CommentCount": "0", "CreationDate": "2015-11-22T15:12:27.617", "ParentId": "33856187", "Score": "0", "OwnerUserId": "2877241"}, "33856575": {"Id": "33856575", "PostTypeId": "2", "Body": "<p>It is OK to do so. Because the variable <code>int printf</code> you defined do not belong to the namespace <code>std</code> as <code>printf</code>, which is defined in <code>cstdio</code>. So there is actually no conflict in names of your program. </p>\n<p>However, if you declare</p>\n<pre><code>using namespace std;\n</code></pre>\n<p>before your program, and no <code>std::</code> used later in your program, then it'll cause problems if you're not careful. Generally, when there is name conflicts, compiler will use the name defined in smallest scope. So if you have program like: </p>\n<pre><code>#include&lt;cstdio&gt;\nusing namespace std;\n\nint main()\n{\n    int printf = 42;\n    printf(\"%d\", printf);\n}\n</code></pre>\n<p>The compiler will return</p>\n<pre><code>error: \u2018printf\u2019 cannot be used as a function\n</code></pre>\n<p>This is because in this program, <code>printf</code> is defined as a <code>int</code> in function scope, and as a function <code>int printf( const char* format, ... )</code> in global scope. Since function scope is smaller than global scope, in function <code>int main()</code>, <code>printf</code> is intepreted as <code>int</code> rather than function. <code>int</code> is not callable, hence the error message.</p>\n", "LastActivityDate": "2015-11-22T15:34:22.313", "CommentCount": "3", "CreationDate": "2015-11-22T15:34:22.313", "ParentId": "33856187", "Score": "0", "OwnerUserId": "1790715"}, "33856279": {"Id": "33856279", "PostTypeId": "2", "Body": "<p>Yes, this is well defined behavior. You are creating an int named printf, and there is nothing currently named printf in your scope. There is something named printf in the standard scope and possibly in the global scope, but the int printf defined in local scope automatically takes precedence. </p>\n", "LastEditorUserId": "5170640", "LastActivityDate": "2015-11-22T15:46:49.517", "Score": "4", "CreationDate": "2015-11-22T15:08:06.503", "ParentId": "33856187", "CommentCount": "11", "OwnerUserId": "5170640", "LastEditDate": "2015-11-22T15:46:49.517"}});