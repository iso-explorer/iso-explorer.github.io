post_cb({"bq_ids": {"n4140": {"so_22021295_22021934_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7151}}, "n3337": {"so_22021295_22021934_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6895}}, "n4659": {"so_22021295_22021934_0": {"length": 9, "quality": 0.6, "section_id": 4051}}}, "22021477": {"Id": "22021477", "PostTypeId": "2", "Body": "<p>They will be initialized in the order of <strong>definition</strong> in given translation unit and before any other objects or variables.</p>\n", "LastActivityDate": "2014-02-25T17:17:56.600", "CommentCount": "5", "CreationDate": "2014-02-25T17:17:56.600", "ParentId": "22021295", "Score": "3", "OwnerUserId": "842424"}, "22021934": {"Id": "22021934", "PostTypeId": "2", "Body": "<p>Yes. Objects with static storage duration are always zero-initialized prior to anything else:</p>\n<blockquote>\n<p id=\"so_22021295_22021934_0\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other initialization takes place.</p>\n</blockquote>\n<p>[3.6.2\u00a72]</p>\n<p>Therefore any constant or dynamic initialization may assume that all other objects with static storage duration are at least zero-initialized.</p>\n<p>Note that this does <em>not</em> give any guarantees for anything other than zero-initialization!</p>\n", "LastActivityDate": "2014-02-25T17:40:00.717", "CommentCount": "2", "CreationDate": "2014-02-25T17:40:00.717", "ParentId": "22021295", "Score": "0", "OwnerUserId": "65678"}, "22021295": {"ViewCount": "72", "Body": "<p>Is this safe to assume that <code>A</code> is initialized to 1 when initializing B and C here?</p>\n<pre><code>struct Test {\n  static const int A = 1;\n  static const int B = A + 1;\n  static const int C = B + 1;\n};\n\nint main() {\n  printf(\"%i %i %i\\n\", Test::A, Test::B, Test::C);  ==&gt; 1 2 3\n}\n</code></pre>\n<p>what about for non-integral static members</p>\n<pre><code>struct Test2 {\n  constexpr static const Test A = Test();\n  constexpr static const Test B = A;\n  constexpr static const Test C = B;\n};\n</code></pre>\n<p><code>clang</code> <code>-Wall</code> issues no warnings.</p>\n", "AcceptedAnswerId": "22021477", "Title": "Initialization of static const member variables based on each other", "CreationDate": "2014-02-25T17:09:50.333", "Id": "22021295", "CommentCount": "0", "LastEditDate": "2014-02-25T17:42:02.343", "PostTypeId": "1", "LastEditorUserId": "1149981", "LastActivityDate": "2014-02-25T17:42:02.343", "Score": "1", "OwnerUserId": "1149981", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "22021876": {"Id": "22021876", "PostTypeId": "2", "Body": "<p>Maybe.  In this case, the initialization of <code>A</code> is static, so\n<code>A</code> can be used as an integral constant expression.  Which then\npropagates to <code>B</code>.  When you declare the members, they will be\ninitialized statically, to what the compiler has evaluated (i.e.\n<code>0</code> and <code>1</code>), before the program even starts.</p>\n<p>If they aren't initialized statically (which is only legal in\nC++11), for any reason whatever, then they will be initialized\nin the order the definitions appear in the source file, if they\nare defined in the same source file.  If they are not defined in\nthe same source file, then the order they are initialized is\nunspecified. </p>\n<p>Concerning your second example: if they are really <code>constexpr</code>,\nthere are still only constant expressions involved, so\neverything will be decided at compile time, and the members will\nbe statically initialized.</p>\n", "LastActivityDate": "2014-02-25T17:36:55.553", "CommentCount": "0", "CreationDate": "2014-02-25T17:36:55.553", "ParentId": "22021295", "Score": "2", "OwnerUserId": "649665"}});