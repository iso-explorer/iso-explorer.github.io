post_cb({"2647468": {"ParentId": "2647320", "CommentCount": "2", "Body": "<p>Typically, you cannot allocate more bits than the underlying type has.  If <code>long long</code> is 64 bits, then your bitfield is probably limited to :64.</p>\n", "OwnerUserId": "1386054", "PostTypeId": "2", "Id": "2647468", "Score": "1", "CreationDate": "2010-04-15T17:14:34.277", "LastActivityDate": "2010-04-15T17:14:34.277"}, "2648520": {"ParentId": "2647320", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>C99 \u00a76.7.2.1, paragraph 3:</p>\n<blockquote>\n<p id=\"so_2647320_2648520_0\">The expression that specifies the\n  width of a bit-field shall be an\n  integer constant expression that has\n  nonnegative value that <strong>shall not\n  exceed the number of bits in an object\n  of the type that is specified if the\n  colon and expression are omitted</strong>. If\n  the value is zero, the declaration\n  shall have no declarator.</p>\n</blockquote>\n<p>C++0xa \u00a79.6, paragraph 1:</p>\n<blockquote>\n<p id=\"so_2647320_2648520_1\">... The constant-expression shall be an\n  integral constant expression with a\n  value greater than or equal to zero.\n  The value of the integral constant\n  expression may be larger than the\n  number of bits in the object\n  representation (3.9) of the\n  bit-field\u2019s type; <strong>in such cases the\n  extra bits are used as padding bits\n  and do not participate in the value\n  representation (3.9) of the bit-field</strong>.</p>\n</blockquote>\n<p>So in C you can't do that at all, and in C++ it won't do what you want it to.</p>\n", "OwnerUserId": "142434", "LastEditorUserId": "142434", "LastEditDate": "2010-04-15T20:37:30.503", "Id": "2648520", "Score": "18", "CreationDate": "2010-04-15T19:52:13.777", "LastActivityDate": "2010-04-15T20:37:30.503"}, "2647320": {"CommentCount": "2", "AcceptedAnswerId": "2648520", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2010-04-15T16:53:53.150", "LastActivityDate": "2015-12-26T19:06:49.170", "LastEditDate": "2015-12-26T19:06:49.170", "ViewCount": "4236", "FavoriteCount": "4", "Title": "struct bitfield max size (C99, C++)", "Id": "2647320", "Score": "12", "Body": "<p>What is maximal bit width for bit struct field?</p>\n<pre><code>struct i { long long i:127;}\n</code></pre>\n<p>Can I define a bit field inside struct, with size of bitfield up to 128 bit, or 256 bit, or larger? There are some extra-wide vector types, like sse2 (128-bit), avx1/avx2 (256-bit), avx-512 (512-bit for next Xeon Phis) registers; and also extensions like <a href=\"https://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html\" rel=\"nofollow noreferrer\">__int128</a> in gcc.</p>\n", "Tags": "<c++><c><struct><c99><bit-fields>", "OwnerUserId": "196561", "AnswerCount": "4"}, "2647488": {"ParentId": "2647320", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Since the values of bit-fields are assigned to integers, I'd assume that the largest bit-field value you can use is that of the size of intmax_t.  </p>\n<p>Edit: </p>\n<p>From the C99 Spec:</p>\n<p>6.7.2.1 Bullet 9:</p>\n<blockquote>\n<p id=\"so_2647320_2647488_0\">A bit-field is interpreted as a signed\n  or unsigned integer type consisting of\n  the specified number of bits. If\n  the value 0 or 1 is stored into a\n  nonzero-width bit-field of type\n  _Bool, the value of the bit-field shall compare equal to the value\n  stored.</p>\n</blockquote>\n<p>6.7.2.1 Bullet 10:</p>\n<blockquote>\n<p id=\"so_2647320_2647488_1\">An implementation may allocate any\n  addressable storage unit large enough\n  to hold a bit- field. If enough space\n  remains, a bit-field that immediately\n  follows another bit-field in a\n  structure shall be packed into\n  adjacent bits of the same unit. If\n  insufficient space remains, whether a\n  bit-field that does not fit is put into\n  the next unit or overlaps adjacent\n  units is implementation-defined. The\n  order of allocation of bit-fields\n  within a unit (high-order to low-order\n  or low-order to high-order) is\n  implementation-defined. The alignment\n  of the addressable storage unit is\n  unspecified.</p>\n</blockquote>\n", "OwnerUserId": "314820", "LastEditorUserId": "314820", "LastEditDate": "2010-04-15T17:57:21.180", "Id": "2647488", "Score": "1", "CreationDate": "2010-04-15T17:16:28.213", "LastActivityDate": "2010-04-15T17:57:21.180"}, "bq_ids": {"n4140": {"so_2647320_2648520_1": {"section_id": 5921, "quality": 0.9411764705882353, "length": 32}, "so_2647320_2647442_0": {"section_id": 5921, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_2647320_2648520_1": {"section_id": 5693, "quality": 0.9411764705882353, "length": 32}, "so_2647320_2647442_0": {"section_id": 5693, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_2647320_2648520_1": {"section_id": 7395, "quality": 0.9411764705882353, "length": 32}, "so_2647320_2647442_0": {"section_id": 7395, "quality": 0.9090909090909091, "length": 20}}}, "2647442": {"ParentId": "2647320", "CommentCount": "3", "Body": "<p>The C++ Standard sets no limits on the size of a bit-field, other than that it must be greater or equal to zero - section 9.6/1. It also says:</p>\n<blockquote>\n<p id=\"so_2647320_2647442_0\">Bit-fields are packed into some\n  addressable allocation unit. [Note:\n  bit-fields straddle allocation units\n  on some machines and not on others.\n  Bit-fields are assigned right-to-left\n  on some machines, left-to-right on\n  others. ]</p>\n</blockquote>\n<p>Which I suppose could be taken to indicate some sort of maximum size.</p>\n<p>This does not mean that your specific compiler implementation supports arbitrarily sized bit-fields, of course.</p>\n", "Id": "2647442", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "3", "CreationDate": "2010-04-15T17:12:01.003", "LastActivityDate": "2010-04-15T17:12:01.003"}});