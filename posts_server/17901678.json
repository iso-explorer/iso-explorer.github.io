post_cb({"17901750": {"Id": "17901750", "PostTypeId": "2", "Body": "<p>You're a victim of <code>remove_if</code> implementation, Josuttis's The C++ Standard Library describes this in detail.</p>\n<p>The summary is:</p>\n<p>The 3rd and 6th Element is removed for without lambda version because <code>remove_if</code> copies the predicate internally during processing.</p>\n<p>It uses <code>find_if</code> internally to find the element that should be removed.\nLater the algorithm uses a copy of the predicate to process the remaining elements, if any, using <code>remove_if_copy</code></p>\n<p>In case of lambda, as you're passing argument by reference, lambda object internally used by\n<code>remove_if</code> share same state</p>\n<p>This is the approximate implementation of remove_if</p>\n<pre><code>template&lt;typename FwdItr, typename Pred&gt;\nFwdItr std::remove_if(FwdItr b, FwdItr e, Pred f)\n{\n    s = find_if(b,e,f);\n    if(s==e)\n        return b;\n    else\n     {\n        FwdItr temp = b;\n        return remove_copy_if(++temp, e, b, f);\n     }\n}\n</code></pre>\n", "LastEditorUserId": "1870232", "LastActivityDate": "2013-07-28T05:49:39.150", "Score": "3", "CreationDate": "2013-07-27T19:38:02.790", "ParentId": "17901678", "CommentCount": "3", "OwnerUserId": "1870232", "LastEditDate": "2013-07-28T05:49:39.150"}, "bq_ids": {"n4140": {"so_17901678_17903794_5": {"length": 21, "quality": 0.9130434782608695, "section_id": 1341}, "so_17901678_17903794_0": {"length": 5, "quality": 0.625, "section_id": 1336}, "so_17901678_17903794_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 1337}, "so_17901678_17903794_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1268}}, "n3337": {"so_17901678_17903794_5": {"length": 21, "quality": 0.9130434782608695, "section_id": 1335}, "so_17901678_17903794_0": {"length": 5, "quality": 0.625, "section_id": 1330}, "so_17901678_17903794_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1266}, "so_17901678_17903794_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 1331}}, "n4659": {"so_17901678_17903794_5": {"length": 20, "quality": 0.8695652173913043, "section_id": 1471}, "so_17901678_17903794_0": {"length": 5, "quality": 0.625, "section_id": 1466}, "so_17901678_17903794_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1388}, "so_17901678_17903794_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 1467}}}, "17903794": {"Id": "17903794", "PostTypeId": "2", "Body": "<p>The standard definition doesn't say that this function will use the predicate in a specific order, what it says is:</p>\n<blockquote>\n<p id=\"so_17901678_17903794_0\">1 Requires: The type of *first shall satisfy the MoveAssignable\n  requirements (Table 22).</p>\n<p id=\"so_17901678_17903794_1\">2 Effects: Eliminates all the elements referred to by iterator i in\n  the range [first,last) for which the following corresponding\n  conditions hold: *i == value, pred(*i) != false.</p>\n<p id=\"so_17901678_17903794_2\">3 Returns: The end of the resulting range.</p>\n<p id=\"so_17901678_17903794_3\">4 Remarks: Stable (17.6.5.7).</p>\n<p id=\"so_17901678_17903794_4\">5 Complexity: Exactly last - first applications of the corresponding\n  predicate.</p>\n<p id=\"so_17901678_17903794_5\">6 Note: each element in the range [ret,last), where ret is the\n  returned value, has a valid but unspecified state, because the\n  algorithms can eliminate elements by moving from elements that were\n  originally in that range.</p>\n</blockquote>\n<p>Therefore you should not assume that the predicate will be used in the same order that elements of the vector are.</p>\n<p>Finally, you could simply write</p>\n<pre><code>..\ns.erase(s.begin()+2);\n..\n</code></pre>\n<p>to erase the third element of the vector.</p>\n<p>best regards</p>\n", "LastActivityDate": "2013-07-28T00:23:07.433", "CommentCount": "0", "CreationDate": "2013-07-28T00:23:07.433", "ParentId": "17901678", "Score": "2", "OwnerUserId": "2368240"}, "17901678": {"ViewCount": "168", "Body": "<p>Erase from vector giving different results with lambda function and function object.</p>\n<p>I'm trying to delete 3rd element from a vector of strings. \nWith function object 3rd and 6th element is getting deleted but with lambda version the code gives expected result.</p>\n<p>I tried following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;iterator&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n\nvector&lt;string&gt; s;\n\ncopy(istream_iterator&lt;string&gt;(cin),\n    istream_iterator&lt;string&gt;(),\n    back_inserter(s));\n\n    cout&lt;&lt;\"S contains :\"&lt;&lt;endl;\n    for(auto x:s)\n        cout&lt;&lt;x&lt;&lt;\" \";\n    cout&lt;&lt;endl;\n\n#ifndef USE_LAMBDA    \n\nstruct Word_No{\nint word_ith;\nint word_count;\n\nWord_No(int x)  :word_ith(x),word_count(0){}\n\nbool operator () (string){\nreturn ++word_count == word_ith;\n}\n};\n//3rd Element remove\n    s.erase(remove_if(s.begin(),s.end(),Word_No(3)),s.end());\n#else\n    int count =0;\n    s.erase(remove_if(s.begin(),\n                      s.end(),\n                      [&amp;count](string){\n                         return ++count ==3; //3rd Element Remove\n                            }),\n                      s.end());\n#endif\n\n    cout&lt;&lt;\"Now S contains :\"&lt;&lt;endl;\n    for(auto x:s)\n        cout&lt;&lt;x&lt;&lt;\" \";\n}\n</code></pre>\n<p><strong>Results:</strong></p>\n<blockquote>\n<p id=\"so_17901678_17901678_0\">g++ -o test test.cpp -std=gnu++0x</p>\n<p id=\"so_17901678_17901678_1\">Input: King Queen Jack Ace Rook\n  Knight Pawn Bishop</p>\n<p id=\"so_17901678_17901678_2\">Output: </p>\n<p id=\"so_17901678_17901678_3\">S contains : King Queen Jack Ace Rook Knight Pawn Bishop </p>\n<p id=\"so_17901678_17901678_4\">Now S contains : King Queen Ace Rook Pawn Bishop <strong>//Wrong Result 3 and 6th element deleted.</strong></p>\n<p id=\"so_17901678_17901678_5\">g++ -o test test.cpp -std=gnu++0x -DUSE_LAMBDA</p>\n<p id=\"so_17901678_17901678_6\">Input: King Queen Jack Ace Rook Knight Pawn Bishop</p>\n<p id=\"so_17901678_17901678_7\">S contains : King Queen Jack Ace Rook Knight Pawn Bishop </p>\n<p id=\"so_17901678_17901678_8\">Now S contains : King Queen Ace Rook Knight Pawn Bishop  <strong><em>// Correct Result</em></strong></p>\n</blockquote>\n<p>Could anyone please explain these two behaviors ?</p>\n", "AcceptedAnswerId": "17901750", "Title": "Vector erase giving unexpected result", "CreationDate": "2013-07-27T19:31:36.033", "Id": "17901678", "CommentCount": "0", "LastEditDate": "2013-07-27T20:14:59.510", "PostTypeId": "1", "LastEditorDisplayName": "user1446258", "OwnerDisplayName": "user1446258", "LastActivityDate": "2013-07-28T05:49:39.150", "Score": "3", "Tags": "<algorithm><c++11><stl>", "AnswerCount": "2"}});