post_cb({"bq_ids": {"n4140": {"so_43479839_43480231_3": {"length": 18, "quality": 1.0, "section_id": 5810}, "so_43479839_43480231_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 434}, "so_43479839_43480231_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_43479839_43480189_1": {"length": 9, "quality": 0.9, "section_id": 440}}, "n3337": {"so_43479839_43480231_3": {"length": 18, "quality": 1.0, "section_id": 5583}, "so_43479839_43480231_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 426}, "so_43479839_43480231_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_43479839_43480189_1": {"length": 9, "quality": 0.9, "section_id": 431}}, "n4659": {"so_43479839_43480231_3": {"length": 18, "quality": 1.0, "section_id": 7271}, "so_43479839_43480231_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 452}, "so_43479839_43480231_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_43479839_43480189_1": {"length": 9, "quality": 0.9, "section_id": 460}}}, "43480231": {"Id": "43480231", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_43479839_43480231_0\">So I am wondering if it is guaranteed that <code>t.a == 0</code> and <code>t.b == 1</code>?</p>\n</blockquote>\n<p>This will always be true so long as <code>a</code> comes before <code>b</code> in the class declaration and nothing else calls <code>f()</code> between the initialization of <code>a</code> and <code>b</code>.  Class members are initialized in the order they are declared in the class.  [class.base.init]/11:</p>\n<blockquote>\n<p id=\"so_43479839_43480231_1\">In a non-delegating constructor, initialization proceeds in the following order: [...]</p>\n<ul>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</li>\n</ul>\n</blockquote>\n<p>So since <code>a</code> comes before <code>b</code> then when the constructor initializes <code>a</code> it will call <code>f()</code> the first time and then it will call it a second time when it initializes <code>b</code>.</p>\n<p>We also know there is a sequence point between member initializer because [class.base.init]/7:</p>\n<blockquote>\n<p id=\"so_43479839_43480231_2\">[...]The initialization performed by each mem-initializer constitutes a full-expression. Any expression in a mem-initializer is evaluated as part of the full-expression that performs the initialization.</p>\n</blockquote>\n<p>tells us each initializer is a full expression and each full expression is sequenced: [intro.execution]/14 </p>\n<blockquote>\n<p id=\"so_43479839_43480231_3\">Every value computation and side effect associated with a full-expression is sequenced before every value computation and side effect associated with the next full-expression to be evaluated.</p>\n</blockquote>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2017-04-18T19:24:34.227", "Score": "30", "CreationDate": "2017-04-18T19:01:42.597", "ParentId": "43479839", "CommentCount": "2", "OwnerUserId": "4342498", "LastEditDate": "2017-04-18T19:24:34.227"}, "43479839": {"ViewCount": "1063", "Body": "<p>Consider:</p>\n<pre><code>int f () {\n    static int i = 0;\n    return i++;\n}\n\nstruct Test {\n    int a, b;\n    Test () : a(f()), b(f()) {}\n};\n\nTest t;\n</code></pre>\n<p>I know that <code>a</code> is initialized before <code>b</code> due to the order of their declaration in the <code>struct</code>.</p>\n<p>I also know that the two calls to <code>f</code> in <code>g(f(), f())</code> are unsequenced.</p>\n<p>So I am wondering if it is guaranteed that <code>t.a == 0</code> and <code>t.b == 1</code>?</p>\n", "AcceptedAnswerId": "43480231", "Title": "Are functions calls in a constructor's initializer-list sequenced?", "CreationDate": "2017-04-18T18:39:45.043", "Id": "43479839", "CommentCount": "9", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-15T13:08:22.597", "LastEditorUserId": "4342498", "LastActivityDate": "2017-05-15T13:08:22.597", "Score": "33", "OwnerUserId": "3492895", "Tags": "<c++><language-lawyer><undefined-behavior><order-of-evaluation><initialization-order>", "AnswerCount": "2"}, "43480189": {"Id": "43480189", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_43479839_43480189_0\">I know that a is initialized before b due to the order of their declaration in the struct.</p>\n</blockquote>\n<p>That's true.</p>\n<p>My interpretation of that constraint is that <code>a</code> cannot be initialized before <code>b</code> unless the evaluation of the initializer expression is complete before <code>b</code> is initialized.</p>\n<p>I don't see anything in the standard that speaks of sequencing the evaluation of the expressions used to initialize non-static members. However, I see the following example in the C++11 Standard (12.6.2/12):</p>\n<blockquote>\n<p id=\"so_43479839_43480189_1\">Names in the expression-list or braced-init-list of a mem-initializer are evaluated in the scope of the constructor for which the mem-initializer is specified. [ <em>Example:</em></p>\n<pre><code>class X {\n  int a;\n  int b;\n  int i;\n  int j;\n  public:\n  const int&amp; r;\n  X(int i): r(a), b(i), i(i), j(this-&gt;i) { }\n};\n</code></pre>\n</blockquote>\n<p>That won't be valid unless the evaluation of <code>this-&gt;i</code> is sequenced after <code>i</code> is initialized.</p>\n", "LastActivityDate": "2017-04-18T18:59:26.590", "CommentCount": "0", "CreationDate": "2017-04-18T18:59:26.590", "ParentId": "43479839", "Score": "6", "OwnerUserId": "434551"}});