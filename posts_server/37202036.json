post_cb({"37202376": {"ParentId": "37202036", "CommentCount": "0", "Body": "<p>These are the operator= overloads for the string class :-</p>\n<pre><code>basic_string&amp; operator=(const basic_string&amp; str);\nbasic_string&amp; operator=(basic_string&amp;&amp; str) noexcept(allocator_traits&lt;Allocator&gt;::propagate_on_container_move_assignment::value ||     allocator_traits&lt;Allocator&gt;::is_always_equal::value);\nbasic_string&amp; operator=(const charT* s);\nbasic_string&amp; operator=(charT c);\nbasic_string&amp; operator=(initializer_list&lt;charT&gt;);\n</code></pre>\n<p>Hope that makes sense why that compiled fine. </p>\n<p>Now coming onto your question as to why there is no output. I have tweaked the code a little :-</p>\n<pre><code>#include &lt;iostream&gt;\nint main() {\n    std::string foo;\n    foo = -1; // why is the compiler not complaining about this?\n    char ch = 65;\n    std::cout &lt;&lt; \"1\" &lt;&lt; std::endl;\n    std::cout &lt;&lt; foo &lt;&lt; std::endl;\n    std::cout &lt;&lt; ch &lt;&lt; std::endl;\n    //change ch to -1 ... ascii\n    ch = -1;\n    std::cout &lt;&lt; ch &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"2\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Can you guess what the output is ? Yup think in terms of ascii :-</p>\n<pre><code>1\n\u00a0\nA\n\u00a0\n2\n</code></pre>\n<p>That's exactly the reason why you don't have the output for -1.</p>\n<p>Compiler - MinGW - std=c++14 -- not sure why IDEONE messes up the complete output stream in your case.</p>\n", "OwnerUserId": "637413", "PostTypeId": "2", "Id": "37202376", "Score": "1", "CreationDate": "2016-05-13T06:09:22.810", "LastActivityDate": "2016-05-13T06:09:22.810"}, "37202036": {"CommentCount": "8", "ViewCount": "824", "PostTypeId": "1", "LastEditorUserId": "3233393", "CreationDate": "2016-05-13T05:43:31.383", "LastActivityDate": "2016-05-13T09:39:51.903", "Title": "Assigning a number to std::string is now allowed?", "AcceptedAnswerId": "37202108", "LastEditDate": "2016-05-13T07:46:51.827", "Id": "37202036", "Score": "13", "Body": "<p>Consider the following code snippet:</p>\n<pre><code>#include &lt;iostream&gt;\nint main() {\n    std::string foo;\n    foo = -1; // why is the compiler not complaining about this?\n    std::cout &lt;&lt; \"1\" &lt;&lt; std::endl;\n    std::cout &lt;&lt; foo &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"2\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Actual output (both ideone.com C++14 mode and GCC 4.8.4):</p>\n<pre>&lt;no output&gt;</pre>\n<p>Questions:</p>\n<ol>\n<li>Why did the code snippet compile at all?</li>\n<li>Commenting out <code>foo = -1</code>, I get the correct stdout (<code>1</code> and <code>2</code>). What has the compiler compiled with <code>foo = -1;</code> that causes the subsequent <code>cout</code>s to fail?</li>\n</ol>\n", "Tags": "<c++><gcc>", "OwnerUserId": "383306", "AnswerCount": "3"}, "37202108": {"ParentId": "37202036", "PostTypeId": "2", "CommentCount": "8", "Body": "<pre><code>foo = -1;\n</code></pre>\n<p>resolves to <code>std::string::operator=(char)</code> since <code>-1</code> is an <code>int</code> and <code>int</code> can, in theory, be converted to a <code>char</code>.</p>\n<p>It's not clear to me what the standard says when the <code>int</code> does not represent a valid <code>char</code>. It looks like in your implementation, the program crashes.</p>\n<p><strong>Update</strong></p>\n<p>From the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_37202036_37202108_0\"><strong>3.9.1 Fundamental types</strong></p>\n<p id=\"so_37202036_37202108_1\">1 Objects declared as characters (<code>char</code>) shall be large enough to store any member of the implementation\u2019s basic character set. If a character from this set is stored in a character object, the integral value of that character\n  object is equal to the value of the single character literal form of that character. <strong>It is implementation-defined whether a char object can hold negative values.</strong></p>\n</blockquote>\n<p>It appears that you'll have to consult your compiler's documentation to understand whether it allows <code>char</code> object to hold negative values and, if it does, how does it treat such objects.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2016-05-13T06:06:31.880", "Id": "37202108", "Score": "11", "CreationDate": "2016-05-13T05:49:50.287", "LastActivityDate": "2016-05-13T06:06:31.880"}, "bq_ids": {"n4140": {"so_37202036_37202108_1": {"section_id": 7210, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_37202036_37202108_1": {"section_id": 6954, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_37202036_37202108_1": {"section_id": 8719, "quality": 0.9722222222222222, "length": 35}}}, "37202163": {"ParentId": "37202036", "PostTypeId": "2", "CommentCount": "11", "Body": "<p><code>char</code> is an integral type in C++. <code>std::string</code> defines an assignment operator:</p>\n<pre><code>std::string&amp; operator=(char);\n</code></pre>\n<p>Since <code>int</code> converts to <code>char</code> freely in this context, no diagnostic is given. (It's funny how best intentions pave the road to Hell, innit?)</p>\n<p><s>Since <code>(char)-1</code> is probably not a valid member if the execution character set on your platform, the stream enters an error state and will stay there, outputting nothing, until the error bit is cleared.</s></p>\n<p>EDIT this is a bug of ideone. If the output stream contains an \"illegal\" character, the entire stream is not shown, even the parts produced and flushed before the bad character. Use another online compiler to check.</p>\n", "OwnerUserId": "775806", "LastEditorUserId": "775806", "LastEditDate": "2016-05-13T09:39:51.903", "Id": "37202163", "Score": "5", "CreationDate": "2016-05-13T05:54:23.913", "LastActivityDate": "2016-05-13T09:39:51.903"}});