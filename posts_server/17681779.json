post_cb({"bq_ids": {"n4140": {"so_17681779_17681779_20": {"length": 4, "quality": 0.5714285714285714, "section_id": 763}}, "n3337": {"so_17681779_17681779_20": {"length": 4, "quality": 0.5714285714285714, "section_id": 750}}, "n4659": {"so_17681779_17681779_20": {"length": 5, "quality": 0.7142857142857143, "section_id": 7797}}}, "17681779": {"ViewCount": "7740", "Body": "<p>I am working with a large C++ code that has been developed over a few years.  I have added to the code and have been successfully running it on Mac OX 10.7.5.  However, it is very slow and I now want to run it on a cluster (g++ (SUSE Linux) 4.3.4 [gcc-4_3-branch revision 152973]).  I am not very experienced as far as C++ and I'm a complete newbie as far as dealing with compilation / linking.</p>\n<p>I am unable to get past a linking error related to a \"jpeg\" library and would be very grateful for any help.  I have the library code installed in a directory where my code resides, but my understanding is that it is also available from the compiler.  </p>\n<p>There is a lot of error output, so I won't post it all.  Here is the first part:</p>\n<blockquote>\n<p id=\"so_17681779_17681779_0\">/data/place/number/account/program/libraries/libfile_intel.a(Grid.o):\n  In function <code>program::Grid&lt;double&gt;::SaveToJPG(char const*,\n  int, bool, bool) const':\n  Grid.cpp:(.text._ZNK3program20GridIdE9SaveToJPGEPKcibb[program::Grid&lt;double&gt;::SaveToJPG(char\n  const*, int, bool, bool) const]+0x499): undefined reference to\n  </code>jpeg_std_error(jpeg_error_mgr*)'\n  Grid.cpp:(.text._ZNK3program20GridIdE9SaveToJPGEPKcibb[program::Grid::SaveToJPG(char\n  const*, int, bool, bool) const]+0x4b5): undefined reference to\n  `jpeg_CreateCompress(jpeg_compress_struct*, int, unsigned long)'</p>\n</blockquote>\n<p>What I have tried:</p>\n<ul>\n<li>When  I did a search in Google on this problem, I discovered from an old forum post that the jpeg library compiles in C.  This apparently causes the C++ compiler to mess up names.  I'm not clear on what this means, but I followed advice to add:</li>\n</ul>\n<blockquote>\n<p id=\"so_17681779_17681779_1\">extern \"C\" {<br>\n      #include \"jpeglib.h\" \n  }</br></p>\n</blockquote>\n<p>in all of the files in my jpeg directory that contain \"#include \"jpeglib.h.\" I wrote, \"jpeglib.h\" because, as I mentioned, I have a directory containing the jpeg code. However, I did also try  to use the jpeg code provided by default and I got a message saying it is not available on the cluster compiler.</p>\n<ul>\n<li><p>In my makefile, I have checked all of my includes and paths.  These do not seem to be the problem.  Also, I have similar paths and includes for other libraries in other directories, and they're fine.</p></li>\n<li><p>I also added: -lstdc++ to my list of compiler options (from advice on another old forum post).  It had zero effect.</p></li>\n</ul>\n<p>One weird observation I have made is that when I do \"make\" of the entire code (several  libraries within various directories), the jpeg library does not make unless I specifically go into its directory and do \"make\" there.  As I said, the code is way too big to post this to demonstrate that I have no path errors.  I am pretty sure I don't, but this behavior seems very odd.</p>\n<p>If anyone is still with me after this long post, I would be very grateful for any tips.  Thanks.</p>\n<p>Edit:\nIn my makefile, here is what i have for compiling/linking:</p>\n<blockquote>\n<p id=\"so_17681779_17681779_2\">CC = g++</p>\n<p id=\"so_17681779_17681779_3\">OPTIONS = -O3 -fpermissive -w -DSAMG_UNIX_LINUX -DSAMG_LCASE_USCORE\n  -DNDEBUG -DCSP_WITH_SAMG_SOLVER</p>\n</blockquote>\n<p>Edit 2: result of Svens's advice</p>\n<p>I did: </p>\n<blockquote>\n<p id=\"so_17681779_17681779_4\">find /usr /opt -iname libjpeg*so* </p>\n</blockquote>\n<p>And got:</p>\n<blockquote>\n<p id=\"so_17681779_17681779_5\">/usr/lib/libjpeg.so.62</p>\n<p id=\"so_17681779_17681779_6\">/usr/lib/libjpeg.so.62.0.0 </p>\n<p id=\"so_17681779_17681779_7\">/usr/lib64/libjpeg.so.62</p>\n<p id=\"so_17681779_17681779_8\">/usr/lib64/libjpeg.so.62.0.0 </p>\n<p id=\"so_17681779_17681779_9\">/usr/lib64/libjpeg.so find:</p>\n<p id=\"so_17681779_17681779_10\"><code>/usr/lib64/mozilla': Permission denied find:\n  </code>/usr/lpp/mmfs/gui/runtime': Permission denied\n  me@login1:/data/place/number/account/program/support_libraries/jpeg&gt;\n  cd ../../libraries/\n  me@login1:/data/place/number/account/program/libraries&gt; find $HOME\n  -iname libjpeg*so*</p>\n</blockquote>\n<p>If my understanding is correct, the library exists and has been found in the \"libraries\" directory, which is where I expect.  My main makefile that links all the libraries has an include path to the directory where the jpeg library resides.  The other libraries in that directory are found.  What is the \"permission denied\" doing?</p>\n<p>Edit 3: result of Sven's advice to change the makefile options:</p>\n<p>Here's what I changed:</p>\n<ul>\n<li>First added \"-lgems3k -L/usr/lib -ljpeg\" to my LIBS (the libraries). This leads to the errors below.</li>\n<li>Then added (leads to same error as original): \nOPTIONS = -O3 -fpermissive -w -DSAMG_UNIX_LINUX -DSAMG_LCASE_USCORE -DNDEBUG -DCSP_WITH_SAMG_SOLVER -/usr/lib/libjpeg.so.62</li>\n</ul>\n<blockquote>\n<p id=\"so_17681779_17681779_11\">-L/usr/lib -ljpeg /usr/lib64/gcc/x86_64-suse-linux/4.3/../../../../x86_64-suse-linux/bin/ld:</p>\n<p id=\"so_17681779_17681779_12\">skipping incompatible /usr/lib/libm.so when searching for -lm</p>\n<p id=\"so_17681779_17681779_13\">/usr/lib64/gcc/x86_64-suse-linux/4.3/../../../../x86_64-suse-linux/bin/ld:</p>\n<p id=\"so_17681779_17681779_14\">skipping incompatible /usr/lib/libm.a when searching for -lm</p>\n<p id=\"so_17681779_17681779_15\">/usr/lib64/gcc/x86_64-suse-linux/4.3/../../../../x86_64-suse-linux/bin/ld:</p>\n<p id=\"so_17681779_17681779_16\">skipping incompatible /usr/lib/libc.so when searching for -lc</p>\n<p id=\"so_17681779_17681779_17\">/usr/lib64/gcc/x86_64-suse-linux/4.3/../../../../x86_64-suse-linux/bin/ld:</p>\n<p id=\"so_17681779_17681779_18\">skipping incompatible /usr/lib/libc.a when searching for -lc</p>\n<p id=\"so_17681779_17681779_19\">/data/place/number/account/program/libraries/lib1_intel.a(Grid.o): In</p>\n<p id=\"so_17681779_17681779_20\">function `program::Grid::SaveToJPG(char const*, int, bool,\n  bool) const':</p>\n<p id=\"so_17681779_17681779_21\">Grid.cpp:(.text._ZNK3program20GridIdE9SaveToJPGEPKcibb[program::Grid::SaveToJPG(char\n  const*, int, bool, bool) const]+0x499): undefined reference to\n  `jpeg_std_error(jpeg_error_mgr*)'</p>\n</blockquote>\n<p>and so on...</p>\n", "AcceptedAnswerId": "17683801", "Title": "Linking errors on Linux gcc 4.3.4: \"undefined reference\" related to \"jpeg\" library (e.g., undefined reference to `jpeg_std_error(jpeg_error_mgr*)')", "CreationDate": "2013-07-16T16:14:46.980", "Id": "17681779", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-07-16T18:58:52.923", "LastEditorUserId": "519422", "LastActivityDate": "2013-07-17T14:06:58.383", "Score": "1", "OwnerUserId": "519422", "Tags": "<c++><linux><osx><linker><cluster-computing>", "AnswerCount": "1"}, "17683801": {"Id": "17683801", "PostTypeId": "2", "Body": "<p>Following up on the comments: are you sure you installed libjpeg? Run</p>\n<pre><code>find $HOME -iname libjpeg\\*so\\*\n</code></pre>\n<p>to find the libjpeg you need to link to. This command will most likely yield several results.</p>\n<p>You can simply take the first line of this output and append it to your compilation command, but leave out the \"-ljpeg\" suggested above.</p>\n<p>If it does not give any output at all, you don't have libjpeg installed in your home. So either</p>\n<ul>\n<li><p>install libjpeg</p></li>\n<li><p>disable the part of the code that needs it if you don't need it either</p></li>\n<li><p>extend your search,</p></li>\n</ul>\n<p>like </p>\n<pre><code>find /usr /opt -iname libjpeg\\*so\\*\n</code></pre>\n<p>... and try with one of the libjpeg installations on the system.</p>\n<p><strong>EDIT</strong> (after libjpeg was found on the system):</p>\n<p>Try appending</p>\n<pre><code>/usr/lib/libjpeg.so.62\n</code></pre>\n<p>to the compile command (the <strong>OPTIONS</strong> variable in your Makefile). If that doesn't work, try </p>\n<pre><code>-L/usr/lib -ljpeg\n</code></pre>\n<p>(Edit by Mats:)</p>\n<p>Also make sure EVERY place where <code>#include \"jpeglib.h\"</code> is covered by <code>extern \"C\" { ... }</code>. It may make sense to replace these with a c++ wrapper include, which does the addition of <code>extern \"C\" { ... }</code> in one place, and then just include \"wrapped_jpeglib.h\" in the relevant places. </p>\n<p>(End Edit by Mats)</p>\n", "LastEditorUserId": "1919155", "LastActivityDate": "2013-07-17T14:06:58.383", "Score": "4", "CreationDate": "2013-07-16T18:01:24.430", "ParentId": "17681779", "CommentCount": "10", "LastEditDate": "2013-07-17T14:06:58.383", "OwnerUserId": "2584016"}});