post_cb({"bq_ids": {"n4140": {"so_31661791_31661888_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 6045}}, "n3337": {"so_31661791_31661888_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 5813}}, "n4659": {"so_31661791_31661888_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 7544}}}, "31661888": {"Id": "31661888", "PostTypeId": "2", "Body": "<p>Yes, it's undefined behavior. From [expr.reinterpret.cast]:</p>\n<blockquote>\n<p id=\"so_31661791_31661888_0\">A function pointer can be explicitly converted to a function pointer of a different type. The effect of calling\n  a function through a pointer to a function type (8.3.5) that is not the same as the type used in the definition of the function is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2015-07-27T19:44:35.887", "CommentCount": "2", "CreationDate": "2015-07-27T19:44:35.887", "ParentId": "31661791", "Score": "1", "OwnerUserId": "2069064"}, "31661791": {"ViewCount": "75", "Body": "<p>take a look at the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\n\nvoid Func1(int x)\n{\n    std::cout &lt;&lt; \"I'm function 1: \" &lt;&lt; x &lt;&lt; std::endl;\n}\n\nvoid Func2(int x, const char* str)\n{\n    std::cout &lt;&lt; \"I'm function 2: (this is arg1: \" &lt;&lt; x &lt;&lt; \" - args2: \" &lt;&lt; str &lt;&lt; \")\" &lt;&lt; std::endl;\n}\n\nuintptr_t GetProcAddress(const char* _str)\n{\n    if (strcmp(_str, \"func1\") == 0)\n    {\n        return reinterpret_cast&lt;uintptr_t&gt;(Func1);\n    }\n    else\n    {\n        return reinterpret_cast&lt;uintptr_t&gt;(Func2);\n    }\n}\n\nint main()\n{\n    typedef void(*PROCADDR)(int, const char*);\n    PROCADDR ext_addr = nullptr;\n    ext_addr = (PROCADDR)GetProcAddress((const char*)\"func1\");\n\n    //call the function\n    ext_addr(10, \"arg\");\n\n\n    std::cin.get();\n    return 0;\n} \n</code></pre>\n<p>We are basically calling Func1 with 2 arguments and can switch to call Func2 with the same args and everything works as intended. </p>\n<p>Of course the address of both the arguments are always pushed on to the stack even though the second one is never used by the function itself.</p>\n<p>Now I understand that the above code should never be used in production-code but my main question is, can the above code cause UB or is the code always expected to act like that?</p>\n<p>Best regards\nxx</p>\n", "AcceptedAnswerId": "31661888", "Title": "C++ - Can the following code cause undefined behavior?", "CreationDate": "2015-07-27T19:37:50.587", "LastActivityDate": "2015-07-27T19:44:35.887", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user5106417", "ClosedDate": "2015-07-27T19:51:29.113", "Id": "31661791", "Score": "2", "Tags": "<c++><undefined-behavior>", "AnswerCount": "1"}});