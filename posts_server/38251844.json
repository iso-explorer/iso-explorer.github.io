post_cb({"38252101": {"ParentId": "38251844", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-07-07T17:49:47.563", "Score": "1", "LastEditorUserId": "1413395", "LastEditDate": "2016-07-07T17:57:57.053", "Id": "38252101", "OwnerUserId": "1413395", "Body": "<blockquote>\n<p id=\"so_38251844_38252101_0\">So my question is: <strong>Is <code>int[2]</code> a \"TrivialType\"</strong>?</p>\n</blockquote>\n<p>Yes, it is.</p>\n<p>You can easily check this, all the necessary tools are right at hand from <a href=\"http://en.cppreference.com/w/cpp/header/type_traits\" rel=\"nofollow\"><code>&lt;type_traits&gt;</code></a>:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    int a[2];\n\n    std::cout &lt;&lt; \"a is \" &lt;&lt; (std::is_trivial&lt;decltype(a)&gt;()?\"\":\"non \") &lt;&lt; \"trivial\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>outputs</p>\n<pre><code>a is trivial\n</code></pre>\n<p>See the <a href=\"http://coliru.stacked-crooked.com/a/44fc2bc7359c8308\" rel=\"nofollow\"><kbd>Live Demo</kbd></a></p>\n", "LastActivityDate": "2016-07-07T17:57:57.053"}, "38251844": {"CommentCount": "6", "ViewCount": "23", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-07-07T17:35:12.870", "LastActivityDate": "2016-07-07T17:57:57.053", "Title": "Using Sub-Vectors With qsort", "AcceptedAnswerId": "38252103", "LastEditDate": "2017-05-23T10:28:55.373", "Id": "38251844", "Score": "1", "Body": "<p>I wrote an answer <a href=\"https://stackoverflow.com/a/38249167/2642059\">here</a> to use <a href=\"http://en.cppreference.com/w/cpp/algorithm/qsort\" rel=\"nofollow noreferrer\"><code>qsort</code></a> to sort an array-of-arrays. I could not use <a href=\"http://en.cppreference.com/w/cpp/algorithm/sort\" rel=\"nofollow noreferrer\"><code>sort</code></a> on account of it's use of the assignment operator in <code>swap</code> operations.</p>\n<p>I believe that the stipulation on my answer working is:</p>\n<blockquote>\n<p id=\"so_38251844_38251844_0\">The type of the elements of the array must be a <a href=\"http://en.cppreference.com/w/cpp/concept/TrivialType\" rel=\"nofollow noreferrer\">TrivialType</a>, otherwise the behavior is undefined</p>\n</blockquote>\n<p>So my question is: <strong>Is <code>int[2]</code> a \"TrivialType\"?</strong></p>\n<hr>\n<p>The actual code in answer that prompted this question is:</p>\n<pre><code>int array[5][2] = { {20, 11}, {10, 20}, {39, 14}, {29, 15}, {22, 23} };\nstatic const auto SIZE = size(*array);\n\nqsort(array, size(array), sizeof(*array), [](const auto lhs, const auto rhs) {\n    const auto first = reinterpret_cast&lt;const int*&gt;(lhs);\n    const auto last = next(first, SIZE);\n    const auto its = mismatch(first, last, reinterpret_cast&lt;const int*&gt;(rhs));\n\n    if (its.first == last) {\n        return 0;\n    } else if (*its.first &lt; *its.second) {\n        return -1;\n    } else {\n        return 1;\n    }});\n</code></pre>\n</hr>", "Tags": "<c++><arrays><void-pointers><qsort><strict-aliasing>", "OwnerUserId": "2642059", "AnswerCount": "3"}, "38252065": {"ParentId": "38251844", "CommentCount": "0", "CreationDate": "2016-07-07T17:47:59.137", "OwnerUserId": "440119", "PostTypeId": "2", "Id": "38252065", "Score": "1", "Body": "<p>Yes, <code>int[2]</code> is a trivial type. From basic.types/9</p>\n<blockquote>\n<p id=\"so_38251844_38252065_0\">... Scalar types, trivial class types (Clause [class]), <strong>arrays of such\n  types</strong> and cv-qualified versions of these types\n  ([basic.type.qualifier]) are collectively called trivial types. ...</p>\n</blockquote>\n<p>And int is a scalar type.</p>\n", "LastActivityDate": "2016-07-07T17:47:59.137"}, "bq_ids": {"n4140": {"so_38251844_38252103_1": {"section_id": 7207, "quality": 0.8823529411764706, "length": 15}, "so_38251844_38251844_0": {"section_id": 6142, "quality": 0.6666666666666666, "length": 6}, "so_38251844_38252065_0": {"section_id": 7207, "quality": 0.8888888888888888, "length": 16}, "so_38251844_38252103_0": {"section_id": 7207, "quality": 0.85, "length": 17}}, "n3337": {"so_38251844_38252103_1": {"section_id": 6951, "quality": 0.8823529411764706, "length": 15}, "so_38251844_38251844_0": {"section_id": 5906, "quality": 0.6666666666666666, "length": 6}, "so_38251844_38252065_0": {"section_id": 6951, "quality": 0.8888888888888888, "length": 16}, "so_38251844_38252103_0": {"section_id": 6951, "quality": 0.8, "length": 16}}, "n4659": {"so_38251844_38252103_1": {"section_id": 8716, "quality": 0.8823529411764706, "length": 15}, "so_38251844_38251844_0": {"section_id": 7639, "quality": 0.6666666666666666, "length": 6}, "so_38251844_38252065_0": {"section_id": 8716, "quality": 0.8888888888888888, "length": 16}, "so_38251844_38252103_0": {"section_id": 8716, "quality": 0.85, "length": 17}}}, "38252103": {"ParentId": "38251844", "CommentCount": "0", "CreationDate": "2016-07-07T17:49:48.593", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "38252103", "Score": "1", "Body": "<p>A <code>int</code> is a Arithmetic type per [basic.fundamental] and a Arithmetic type is also called a scalar type per [basic.types]/9</p>\n<blockquote>\n<p id=\"so_38251844_38252103_0\">Arithmetic types (3.9.1), enumeration types, pointer types, pointer to member types (3.9.2), std::nullptr_-t, and cv-qualified versions of these types (3.9.3) are collectively called <em>scalar types</em>.</p>\n</blockquote>\n<p>and then we have</p>\n<blockquote>\n<p id=\"so_38251844_38252103_1\">Scalar types, trivial class types (Clause 9), <strong>arrays of such types</strong> and cv-qualified versions of these types (3.9.3) are collectively\n  called <em>trivial types</em></p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>So an scalar type and an array of a scalar are both <em>trivial types</em>.</p>\n<p><sup>All quotes from draft N3797</sup></p>\n", "LastActivityDate": "2016-07-07T17:49:48.593"}});