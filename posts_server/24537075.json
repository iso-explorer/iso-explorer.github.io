post_cb({"24537466": {"ParentId": "24537075", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>A virtual base class of an abstract class does not need to be initialized in the <em>mem-initializer-list</em> of a constructor of that abstract base class.</p>\n<p>This is discussed in 12.6.2p8:</p>\n<blockquote>\n<p id=\"so_24537075_24537466_0\">[...]  and the entity is not a virtual base class of an abstract class [...] <br/>\n  [ <em>Note:</em> An abstract class (10.4) is never a most derived class, thus its constructors never initialize virtual base classes, therefore the corresponding mem-initializers may be omitted. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>So clang is correct, and gcc is incorrect.  This would be different were <code>derivedAB</code> not abstract.</p>\n<hr>\n<p>This is a new allowance in C++11, since <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#257\">DR 257</a>; g++ is correct for C++03.  There is a gcc bug at <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=19249\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=19249</a>; perhaps it could do with poking.</p>\n</hr>", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2014-07-02T17:38:42.327", "Id": "24537466", "Score": "11", "CreationDate": "2014-07-02T17:31:32.920", "LastActivityDate": "2014-07-02T17:38:42.327"}, "24537075": {"CommentCount": "5", "AcceptedAnswerId": "24537466", "CreationDate": "2014-07-02T17:08:38.310", "LastActivityDate": "2014-07-02T17:38:42.327", "PostTypeId": "1", "ViewCount": "279", "FavoriteCount": "1", "Title": "Clang compilation works while gcc doesn't for diamond inheritance", "Id": "24537075", "Score": "10", "Body": "<p>I'm not sure if I'm missing something here but it seems that the following code (a similar one can be found into another answer I can no longer find, the question here is different by the way) is compiling <a href=\"http://coliru.stacked-crooked.com/a/484b070de0b30987\" rel=\"noreferrer\">just fine for clang</a> and <a href=\"http://coliru.stacked-crooked.com/a/0bc8cf213265bf29\" rel=\"noreferrer\">not compiling for gcc</a></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass base {\npublic:\n base(int i) {};\n\nprivate:\n base(){};\n};\n\nclass derivedA: virtual public base {\npublic:\n derivedA(int i) : base(i) {};\n\nprotected:\n  derivedA() : base(0) {};\n};\n\nclass derivedB: virtual public base {\npublic:\n derivedB(int i) : base(i) {};\n\nprotected:\n  derivedB() : base(0) {};\n};\n\nclass derivedAB : public derivedA, public derivedB {\npublic:\n derivedAB(int i) {};\n virtual ~derivedAB() = 0;\n};\n\nderivedAB::~derivedAB() {};\n\nclass lastDerived : public derivedAB {\npublic:\n    lastDerived() : base(1), derivedAB(0) {};\n};\n\nint main(){\n        lastDerived obj;\n}\n</code></pre>\n<p>gcc is reporting</p>\n<pre><code>main.cpp: In constructor 'derivedAB::derivedAB(int)':\nmain.cpp:9:2: error: 'base::base()' is private\n  base(){};\n</code></pre>\n<p>Which one is the correct behavior? I'd say gcc's one but I'm not sure why.</p>\n", "Tags": "<c++><inheritance><gcc><c++11><clang>", "OwnerUserId": "1938163", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24537075_24537466_0": {"section_id": 435, "quality": 0.7586206896551724, "length": 22}}, "n3337": {"so_24537075_24537466_0": {"section_id": 427, "quality": 0.8620689655172413, "length": 25}}, "n4659": {"so_24537075_24537466_0": {"section_id": 454, "quality": 0.7586206896551724, "length": 22}}}});