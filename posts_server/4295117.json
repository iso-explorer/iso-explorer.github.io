post_cb({"4297948": {"ParentId": "4295117", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The code you wrote is perfectly valid. There's nothing wrong with it (aside from the fact that <code>Derived::a</code> is private). It is well-formed and the behavior is defined (so far). As the quoted portion of the standard says, it is perfectly legal to upcast member pointers using an explicit <code>static_cast</code>, which is exactly what you are doing. 5.2.9/9 never says that the pointed member has to be present in the base class.</p>\n<p>Also, as you correctly quoted from the standard, the presence of the actual member in the object is required <em>later</em> at the moment of <em>dereference</em> of the pointer, not at the moment of initialization. This, of course, depends on the dynamic type of the object used at the left-hand side of member-access operator (<code>-&gt;*</code> or <code>.*</code>). The type is only known at run-time and thus cannot be checked by the compiler. </p>\n<p>This requirement is included as a mere note into 5.2.9/9, but it is reiterated in a more formal form in 5.5/4</p>\n<blockquote>\n<p id=\"so_4295117_4297948_0\">4 If the dynamic type of the object\n  does not contain the member to which\n  the pointer refers, the behavior is\n  undefined.</p>\n</blockquote>\n<p>So, for example, in the context of your example the following lines of code are well-formed</p>\n<pre><code>Base b;\nb.*pa; // 1\n\nDerived d;\nd.*pa; // 2\n\nBase *pb = &amp;d;\npb-&gt;*pa; // 3\n</code></pre>\n<p>However, the first dereference produces undefined behavior (since object <code>b</code> does not contain the member), while both the second one and the third one are perfectly legal.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2010-11-28T19:06:18.420", "Id": "4297948", "Score": "10", "CreationDate": "2010-11-28T17:12:48.287", "LastActivityDate": "2010-11-28T19:06:18.420"}, "4295117": {"CommentCount": "2", "AcceptedAnswerId": "4297948", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-11-28T03:06:32.510", "LastActivityDate": "2010-11-28T19:06:18.420", "LastEditDate": "2017-05-23T11:54:00.770", "ViewCount": "1745", "FavoriteCount": "3", "Title": "Pointer to member conversion", "Id": "4295117", "Score": "13", "Body": "<p>I just found the following paragraphs in c++03 standard draft relevant to pointer to member conversion.</p>\n<p><strong>4.11/2 Pointer to member conversions</strong></p>\n<blockquote>\n<p id=\"so_4295117_4295117_0\">An rvalue of type \u201cpointer to member of B of type cv T,\u201d where B is a class type, can be converted to an rvalue of type \u201cpointer to member of D of type cv T,\u201d where D is a derived class (clause 10) of B. If B is an inaccessible (clause 11), ambiguous (10.2) or virtual (10.1) base class of D, a program that necessitates this conversion is ill-formed. The result of the conversion refers to the same member as the pointer to member before the conversion took place, but it refers to the base class member as if it were a member of the\n  derived class. The result refers to the member in D\u2019s instance of B. Since the result has type \u201cpointer to member of D of type cv T,\u201d it can be dereferenced with a D object. The result is the same as if the pointer to member of B were dereferenced with the B sub-object of D. The null member pointer value is converted to the null member pointer value of the destination type.52)</p>\n</blockquote>\n<p><strong>5.2.9/9 static_cast</strong></p>\n<blockquote>\n<p id=\"so_4295117_4295117_1\">An rvalue of type \u201cpointer to member of D of type cv1 T\u201d can be converted to an rvalue of type \u201cpointer to member of B of type cv2 T\u201d, where B is a base class (clause 10) of D, if a valid standard conversion from \u201cpointer to member of B of type T\u201d to \u201cpointer to member of D of type T\u201d exists (4.11), and cv2 is the same cv-qualification as, or greater cv-qualification than, cv1.63) The null member pointer value (4.11) is converted to the null member pointer value of the destination type. If class B contains the original member, or is a base or derived class of the class containing the original member, the resulting pointer to member points to the original member. Otherwise, the result of the cast is undefined. [Note: although class B need\n  not contain the original member, the dynamic type of the object on which the pointer to member is dereferenced must contain the original member; see 5.5. ]</p>\n</blockquote>\n<p>So here's my question. As 5.2.9/9 says, a pointer to member of D can be converted to a pointer to member of B, if there's a valid conversion described in 4.11/2 exists. Do this mean that if there's a member 'm' of D which is not inherited from B, the pointer to member 'm' cannot be casted to the type of pointer to member of B?</p>\n<pre><code>class Base { };\nclass Derived : public Base \n{\n    int a;\n};\ntypedef int Base::* BaseMemPtr;\nBaseMemPtr pa = static_cast&lt;BaseMemPtr&gt;(&amp;Derived::a); // invalid, as per 5.2.9/9 ?\n</code></pre>\n<p>In the note of 5.2.9/9, it also says that although class B need not contain the original member, the dynamic type of the object on which the pointer to member is dereferenced must contain the original member.</p>\n<p>I get confused with the wording of the paragraph. Is the code above valid ?</p>\n<p>I searched the site, and there's a similar question, <a href=\"https://stackoverflow.com/questions/60000/c-inheritance-and-member-function-pointers\">c++ inheritance and member function pointers</a>, whose answer only covered the case that conversion from pointer to member of base class to pointer to member of derived class.</p>\n", "Tags": "<c++><standards>", "OwnerUserId": "381646", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_4295117_4295117_1": {"section_id": 6038, "quality": 0.8390804597701149, "length": 73}, "so_4295117_4297948_0": {"section_id": 6131, "quality": 0.8, "length": 8}, "so_4295117_4295117_0": {"section_id": 43, "quality": 0.8235294117647058, "length": 70}}, "n3337": {"so_4295117_4295117_1": {"section_id": 5806, "quality": 0.8735632183908046, "length": 76}, "so_4295117_4297948_0": {"section_id": 5895, "quality": 0.8, "length": 8}, "so_4295117_4295117_0": {"section_id": 40, "quality": 0.8705882352941177, "length": 74}}, "n4659": {"so_4295117_4295117_1": {"section_id": 7537, "quality": 0.7701149425287356, "length": 67}, "so_4295117_4297948_0": {"section_id": 7628, "quality": 0.8, "length": 8}, "so_4295117_4295117_0": {"section_id": 43, "quality": 0.8235294117647058, "length": 70}}}});