post_cb({"2861859": {"ParentId": "2861839", "CommentCount": "0", "Body": "<p>No.  The C++03 standard says:</p>\n<blockquote>\n<p id=\"so_2861839_2861859_0\">[Note: because the explicit template argument list follows the function template name, and\n  because conversion member function templates and constructor member function templates are called without using a function name, there is no way to provide an explicit template argument list for these function templates.]  (\u00a714.5.2/5)</p>\n</blockquote>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "2861859", "Score": "31", "CreationDate": "2010-05-18T23:22:21.920", "LastActivityDate": "2010-05-18T23:22:21.920"}, "16944262": {"ParentId": "2861839", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is another solution for transfering type information to templated constructors which can't take a value of this type as an argument:</p>\n<pre><code>template&lt;class T&gt;\nstruct id\n{};\n\nstruct A {\n  template&lt;class T&gt;\n  A(id&lt;T&gt;);\n};\n\nA a=id&lt;int&gt;();\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p>Please note: <code>A a(id&lt;int&gt;());</code> will not work, because of most vexing parse. It would be interpreted as an function declaration. See <a href=\"https://stackoverflow.com/questions/3695411/function-vs-variable-declaration-in-c\">this question</a> for further explanation.</p>\n", "OwnerUserId": "1918154", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:31:59.197", "Id": "16944262", "Score": "8", "CreationDate": "2013-06-05T15:45:16.677", "LastActivityDate": "2013-06-07T08:13:55.017"}, "2861846": {"ParentId": "2861839", "CommentCount": "5", "Body": "<p>no, you cannot instantiate that class using that constructor. BUT:</p>\n<pre><code>\n\nstruct A\n{\n  template &lt; typename T &gt;\n  A(T const&amp;);\n};\n\n</code></pre>\n<p>Now you can.</p>\n", "OwnerUserId": "301883", "PostTypeId": "2", "Id": "2861846", "Score": "3", "CreationDate": "2010-05-18T23:19:21.567", "LastActivityDate": "2010-05-18T23:19:21.567"}, "bq_ids": {"n4140": {"so_2861839_2861859_0": {"section_id": 114, "quality": 0.9090909090909091, "length": 30}}, "n3337": {"so_2861839_2861859_0": {"section_id": 109, "quality": 0.9090909090909091, "length": 30}}, "n4659": {"so_2861839_2861859_0": {"section_id": 118, "quality": 0.9090909090909091, "length": 30}}}, "2861839": {"CommentCount": "2", "AcceptedAnswerId": "2861859", "CreationDate": "2010-05-18T23:18:07.727", "LastActivityDate": "2013-06-07T08:13:55.017", "PostTypeId": "1", "ViewCount": "7680", "FavoriteCount": "4", "Title": "Can the template parameters of a constructor be explicitly specified?", "Id": "2861839", "Score": "26", "Body": "<p>A constructor of a class can be a template function. At the point where such a constructor is called, the compiler usually looks at the arguments given to the constructor and determines the used template parameters from them. Is there also some syntax to specify the template parameters explicitly?</p>\n<p>A contrived example:</p>\n<pre><code>struct A {\n   template&lt;typename T&gt;\n   A() {}\n};\n</code></pre>\n<p>Is there a way to instantiate this class? What is the syntax to explicitly specify the constructor's template parameters?</p>\n<p>My use case would be a problem were the compiler doesn't seem to find the correct templated constructor. Explicitly specifying the template parameters would probably generate more useful error messages or even resolve the problem.</p>\n", "Tags": "<c++><templates><syntax><constructor>", "OwnerUserId": "56338", "AnswerCount": "3"}});