post_cb({"27200301": {"Id": "27200301", "PostTypeId": "2", "Body": "<p>It's not because of the heap allocation, but because of the <em>parenthesis</em> you use when allocating. If you do e.g.</p>\n<pre><code>A* a = new A;\n</code></pre>\n<p>it would also fail.</p>\n<p>The reason it works when you add the parenthesis is because then your structure is value initialized, and for a POD-type like <code>A</code> value-initialization value-initializes each member, and the default value-initialization for <code>int</code> is zero.</p>\n<p>That means it would probably work creating the variable on the stack as well, if you just add the value-initialization parenthesis:</p>\n<pre><code>A a = A(); // watch out for the http://en.wikipedia.org/wiki/Most_vexing_parse\n</code></pre>\n<p>Though that brings other potential problems, better use uniform initialization if you can (requies C++11):</p>\n<pre><code>A a{};\n</code></pre>\n", "LastEditorUserId": "14065", "LastActivityDate": "2014-11-30T02:00:22.177", "Score": "10", "CreationDate": "2014-11-29T08:15:58.940", "ParentId": "27200284", "CommentCount": "4", "OwnerUserId": "440558", "LastEditDate": "2014-11-30T02:00:22.177"}, "27200678": {"Id": "27200678", "PostTypeId": "2", "Body": "<p>This is ill-formed as of C++14. \u00a712.1 [class.ctor] says that</p>\n<blockquote>\n<p id=\"so_27200284_27200678_0\">4 A defaulted default constructor for class X is defined as deleted\n  if:</p>\n<ul>\n<li>[...]</li>\n<li>any non-variant non-static data member of const-qualified type (or array thereof) with no <em>brace-or-equal-initializer</em> does not have a\n  user-provided default constructor,</li>\n<li>[...]</li>\n</ul>\n<p id=\"so_27200284_27200678_1\">A default constructor is trivial if it is not user-provided and if:</p>\n<ul>\n<li>its class has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>no non-static data member of its class has a <em>brace-or-equal-initializer</em>, and</li>\n<li>all the direct base classes of its class have trivial default constructors, and</li>\n<li>for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default\n  constructor.</li>\n</ul>\n</blockquote>\n<p>\u00a78.5 [dcl.init] says in turn that</p>\n<blockquote>\n<p id=\"so_27200284_27200678_2\">7 To default-initialize an object of type T means:</p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9), the default constructor (12.1) for T is called (and the initialization is\n  ill-formed if T has no default constructor or overload resolution\n  (13.3) results in an ambiguity or in a function that is deleted or\n  inaccessible from the context of the initialization);</li>\n<li>[...]</li>\n</ul>\n<p id=\"so_27200284_27200678_3\">8 To value-initialize an object of type T means:</p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a default constructor that is\n  user-provided or deleted, then the object is default-initialized;</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>The empty pair of parentheses results in value-initialization. The default constructor for <code>A</code> is defined as deleted per [class.ctor]/p4. Thus, by [dcl.init]/p8, value-initialization means default-initialization, and by p7 the initialization is ill-formed because the constructor is deleted.</p>\n<p>The C++11 version actually allowed value-initialization in this context; it says for value-initialization that, among other things, </p>\n<blockquote>\n<p id=\"so_27200284_27200678_4\">if T is a (possibly cv-qualified) non-union class type without a\n  user-provided constructor, then the object is zero-initialized and, if\n  T\u2019s implicitly-declared default constructor is non-trivial, that\n  constructor is called.</p>\n</blockquote>\n<p>Since by the definition above the default constructor is trivial (even though it is deleted), it is not actually called. This was considered a defect in the standard and the relevant wording was changed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1301\">CWG issue 1301</a>.</p>\n<p>Compiler vendors usually do implement defect resolutions, so this could be considered a bug in GCC 4.8 that's been fixed in 4.9.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-11-29T09:22:55.153", "Score": "6", "CreationDate": "2014-11-29T09:14:06.443", "ParentId": "27200284", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2014-11-29T09:22:55.153"}, "bq_ids": {"n4140": {"so_27200284_27200678_3": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_27200284_27200678_2": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_27200284_27200678_0": {"length": 6, "quality": 1.0, "section_id": 369}, "so_27200284_27200678_1": {"length": 4, "quality": 1.0, "section_id": 369}, "so_27200284_27200678_4": {"length": 12, "quality": 0.75, "section_id": 3287}}, "n3337": {"so_27200284_27200678_3": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_27200284_27200678_2": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_27200284_27200678_0": {"length": 6, "quality": 1.0, "section_id": 359}, "so_27200284_27200678_1": {"length": 4, "quality": 1.0, "section_id": 359}, "so_27200284_27200678_4": {"length": 16, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_27200284_27200678_0": {"length": 6, "quality": 1.0, "section_id": 382}, "so_27200284_27200678_4": {"length": 11, "quality": 0.6875, "section_id": 4049}}}, "27200284": {"ViewCount": "666", "Body": "<p>If I try to compile <a href=\"http://ideone.com/79wLGv\">this code</a></p>\n<pre><code>struct A {\n    const int j;\n};\nA a;\n</code></pre>\n<p>I'll get an expected error:</p>\n<blockquote>\n<p id=\"so_27200284_27200284_0\">error: uninitialized const member in \u2018struct A\u2019</p>\n</blockquote>\n<p>but, if I try to compile <a href=\"http://ideone.com/uKwdaO\">this one</a>:</p>\n<pre><code>struct A {\n    const int j;\n};\nA * a = new A();\n</code></pre>\n<p>I'll get a successful build.</p>\n<p>The question is: why does <code>new</code> allocation allows creating a variable with const member without explicit constructor and stack allocation - doesn't ?</p>\n", "AcceptedAnswerId": "27200301", "Title": "Const member stack vs heap", "CreationDate": "2014-11-29T08:13:01.393", "Id": "27200284", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-11-30T02:00:22.177", "Score": "13", "OwnerUserId": "667266", "Tags": "<c++><constructor>", "AnswerCount": "2"}});