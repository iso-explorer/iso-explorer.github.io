post_cb({"bq_ids": {"n4140": {"so_18028342_18028417_0": {"length": 4, "quality": 1.0, "section_id": 5520}}, "n3337": {"so_18028342_18028417_0": {"length": 4, "quality": 1.0, "section_id": 5306}}, "n4659": {"so_18028342_18028417_0": {"length": 4, "quality": 1.0, "section_id": 6955}}}, "18028342": {"ViewCount": "131", "Body": "<p>I am trying to run C style code in C++ and my compiler is giving the following error:</p>\n<blockquote>\n<p id=\"so_18028342_18028342_0\">Line 5: error: expected unqualified-id before string constant</p>\n</blockquote>\n<p>Second: my goal is to understand the error at \"line d\".</p>\n<pre><code>using namespace std;\ntypedef int (*pfun)(int);        // line a\nint main()\n{\n    extern \"C\" void foo(pfun);   // line b\n    extern \"C\" int g(int);       // line c \n    foo( g );                    // line d, Error\n\n    return 0;\n}\n</code></pre>\n", "Title": "linking the \"C\" style code in c++", "CreationDate": "2013-08-03T01:28:00.940", "LastActivityDate": "2013-08-03T02:01:45.340", "CommentCount": "1", "LastEditDate": "2013-08-03T01:30:49.907", "PostTypeId": "1", "LastEditorUserId": "498705", "Id": "18028342", "Score": "-1", "OwnerUserId": "1120878", "Tags": "<c++><extern>", "AnswerCount": "2"}, "18028399": {"Id": "18028399", "PostTypeId": "2", "Body": "<p>You need to move your extern \"C\" lines to global scope.</p>\n<pre><code>    #include &lt;cstdlib&gt;\n\n    using namespace std;\n\n    typedef int (*pfun)(int);        // line a\n\n    extern \"C\" void foo(pfun);       // line b\n    extern \"C\" int g(int);           // line c\n\n    int main(void)\n    {\n        foo( g );                    // line d, Error\n\n        return 0;\n    }        \n</code></pre>\n", "LastActivityDate": "2013-08-03T01:36:38.773", "CommentCount": "0", "CreationDate": "2013-08-03T01:36:38.773", "ParentId": "18028342", "Score": "5", "OwnerUserId": "2200999"}, "18028417": {"Id": "18028417", "PostTypeId": "2", "Body": "<p>The error is not on line d, but with your use of a <em>linkage specification</em> (the <code>extern \"C\"</code>)</p>\n<p>Under section <strong>7.5.4</strong>:</p>\n<blockquote>\n<p id=\"so_18028342_18028417_0\">A linkage-specification shall occur only in namespace scope</p>\n</blockquote>\n<p>This means you can move your functions out into the global namespace which is quite common for C functions:</p>\n<pre><code>typedef int (*pfun)(int);    // line a\nextern \"C\" void foo(pfun);   // line b\nextern \"C\" int g(int);       // line c \n\nint main()\n{\n    foo(g);                  // line d\n    return 0;\n}\n</code></pre>\n<p>Or inside of a named namespace:</p>\n<pre><code>namespace c_funcs\n{\n    typedef int (*pfun)(int);    // line a\n    extern \"C\" void foo(pfun);   // line b\n    extern \"C\" int g(int);       // line c \n}\n\nint main()\n{\n    c_funcs::foo(c_funcs::g);    // line d\n    return 0;\n}\n</code></pre>\n<p>... but not in <em>function scope</em>, like your code is doing.</p>\n<p>Linkage specifications nest, so you could even do something weird like this to give <code>foo</code> and <code>g</code> \"C\" linkage:</p>\n<pre><code>typedef int (*pfun)(int); // line a\n\nextern \"C\" int main()\n{\n    void foo(pfun);       // line b\n    int g(int);           // line c \n\n    foo(g);               // line d\n\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "209199", "LastActivityDate": "2013-08-03T02:01:45.340", "Score": "3", "CreationDate": "2013-08-03T01:41:38.323", "ParentId": "18028342", "CommentCount": "2", "OwnerUserId": "209199", "LastEditDate": "2013-08-03T02:01:45.340"}});