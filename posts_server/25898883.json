post_cb({"bq_ids": {"n4140": {"so_25898883_25899023_0": {"length": 38, "quality": 0.95, "section_id": 3314}}, "n3337": {"so_25898883_25899023_0": {"length": 34, "quality": 0.85, "section_id": 3184}}, "n4659": {"so_25898883_25899023_0": {"length": 38, "quality": 0.95, "section_id": 4080}}}, "27470171": {"Id": "27470171", "PostTypeId": "2", "Body": "<p>Here's a way of achieving this</p>\n<pre><code>// GOAL\nstd::array&lt;char, sizeof(\"Hello\")&gt; myarray = {\"Hello\"};\n</code></pre>\n<p>ie. <strong>initializing std::array with a string literal</strong> (yes, it used a macro)</p>\n<pre><code>// SOLUTION\n#define STD_CHAR_ARRAY_INIT(arrayname, string_literal) /*std::array*/&lt;char, sizeof(string_literal)&gt; arrayname = {string_literal}\nstd::array STD_CHAR_ARRAY_INIT(myarray, \"Hello\");\n</code></pre>\n<p>Here's some test code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nusing std::cout;\nusing std::ostream;\n\ntemplate&lt;typename T, size_t N&gt;\nstd::ostream&amp; std::operator&lt;&lt;(std::ostream&amp; os, array&lt;T, N&gt; arr)\n{\n  {\n    size_t cnt = 0;\n    char strchar[2] = \"x\";\n    for (const T&amp; c : arr) {\n      strchar[0] = c;\n      os &lt;&lt; \"arr[\" &lt;&lt; cnt &lt;&lt; \"] = '\" &lt;&lt; (c == '\\0' ? \"\\\\0\" :  strchar /*string(1, c)*/  ) &lt;&lt; \"'\\n\"\n         &lt;&lt; '.' &lt;&lt; c &lt;&lt; '.' &lt;&lt; '\\n';\n      ++cnt;\n    }\n  }\n  return os;\n}\n\n\n#define STD_CHAR_ARRAY_INIT(arrayname, string_literal) /*std::array*/&lt;char, sizeof(string_literal)&gt; arrayname = {string_literal}\n\nint main()\n{\n  std::array STD_CHAR_ARRAY_INIT(myarray, \"Hello\");\n  cout &lt;&lt; myarray &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>\n", "LastActivityDate": "2014-12-14T14:12:43.960", "CommentCount": "0", "CreationDate": "2014-12-14T14:12:43.960", "ParentId": "25898883", "Score": "0", "OwnerUserId": "4359530"}, "25898883": {"ViewCount": "2596", "Body": "<p>I'm not sure how the following code works. I thought you had to do <code>{'h', 'e' ...etc...}</code> but it seems to work fine. On the other hand if you do <code>std::array&lt;const char*</code> it only adds one element to the array. Are there special rules for string literal initialization?</p>\n<pre><code>std::array&lt;char, strlen(\"hello world!\") + 1&gt; s = {\"hello world!\"};\nfor (size_t i = 0; i &lt; s.size(); ++i)\n{\n    std::cout &lt;&lt; s[i];\n}\n</code></pre>\n", "AcceptedAnswerId": "25899023", "Title": "How does std::array initializer work for char's?", "CreationDate": "2014-09-17T19:33:35.213", "Id": "25898883", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-12-14T14:12:43.960", "Score": "6", "OwnerUserId": "4051846", "Tags": "<c++><c++11><stdarray>", "AnswerCount": "2"}, "25899023": {"Id": "25899023", "PostTypeId": "2", "Body": "<p>Class <code>std::array</code> is an aggregate. In this statement:</p>\n<pre><code>std::array&lt;char, strlen(\"hello world!\") + 1&gt; s = {\"hello world!\"};\n</code></pre>\n<p>list initialization is used. As the first and only element of this instantiation of the class <code>std::array</code> is a character array it may be initialized with string literals.</p>\n<p>It would be more correctly to use <code>sizeof</code> operator instead of function <code>strlen</code>:</p>\n<pre><code>std::array&lt;char, sizeof( \"hello world!\" )&gt; s = {\"hello world!\"};\n</code></pre>\n<p>Also you could write</p>\n<pre><code>std::array&lt;char, sizeof( \"hello world!\" )&gt; s = { { \"hello world!\" } };\n</code></pre>\n<p>because the character array in turn is an aggregate.</p>\n<p>According to the C++ Standard</p>\n<p>8.5.2 Character arrays [dcl.init.string]</p>\n<blockquote>\n<p id=\"so_25898883_25899023_0\">1 An array of narrow character type (3.9.1), char16_t array, char32_t\n  array, or wchar_t array can be initialized by a narrow string literal,\n  char16_t string literal, char32_t string literal, or wide string\n  literal, respectively, or by an appropriately-typed string literal\n  enclosed in braces (2.14.5). Successive characters of the value of the\n  string literal initialize the elements of the array.</p>\n<p id=\"so_25898883_25899023_1\">[ Example:\n  char msg[] = \"Syntax error on line %s\\n\";</p>\n</blockquote>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-09-17T19:47:48.343", "Score": "4", "CreationDate": "2014-09-17T19:43:04.773", "ParentId": "25898883", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2014-09-17T19:47:48.343"}});