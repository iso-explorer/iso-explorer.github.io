post_cb({"1155142": {"CommentCount": "2", "CreationDate": "2009-07-20T18:32:18.563", "PostTypeId": "1", "AcceptedAnswerId": "1155148", "LastEditorUserId": "5640", "LastActivityDate": "2015-02-23T01:06:00.410", "AnswerCount": "4", "LastEditDate": "2009-07-21T19:21:46.087", "ViewCount": "15503", "FavoriteCount": "6", "Title": "Why do I get an error in \"forming reference to reference type\" map?", "Id": "1155142", "Score": "13", "Body": "<p>What is the alternative if I need to use a reference, and the data I am passing I cannot change the type of, hence I cannot really store a pointer to it?</p>\n<h3>Code:</h3>\n<pre><code>    #include &lt;map&gt;     \n    #include&lt;iostream&gt;\n    #include&lt;string&gt;     \n\n    using namespace std;\n\n    int main()\n    {\n       string test;\n       pair&lt;string, string&gt; p=pair&lt;string, string&gt;(\"Foo\",\"Bar\");\n       map&lt;pair&lt;string, string&gt;, string&amp;&gt; m;\n       m[make_pair(\"aa\",\"bb\")]=test;\n\n       return 0;\n}\n</code></pre>\n<h3>Error:</h3>\n<blockquote>\n<p id=\"so_1155142_1155142_0\">$ g++ MapPair.cpp\n  /usr/include/c++/3.2.3/bits/stl_map.h:\n  In instantiation of\n  <code>std::map&lt;std::pair&lt;std::string,\n  std::string&gt;, std::string&amp;,\n  std::less&lt;std::pair&lt;std::string,\n  std::string&gt; &gt;,\n  std::allocator&lt;std::pair&lt;const\n  std::pair&lt;std::string, std::string&gt;,\n  std::string&amp;&gt; &gt; &gt;': MapPair.cpp:15:<br>\n  instantiated from here\n  /usr/include/c++/3.2.3/bits/stl_map.h:221:\n  forming reference to reference type\n  </br></code>std::string&amp;' MapPair.cpp: In\n  function <code>int main()': MapPair.cpp:16:\n  no match for\n  </code>std::map,     std::string&amp;,\n  std::less &gt;,<br>\n  std::allocator,<br>\n  std::string&amp;&gt; &gt; &gt;&amp; [std::pair]' operator\n  /usr/include/c++/3.2.3/bits/stl_pair.h:\n  At global scope:\n  /usr/include/c++/3.2.3/bits/stl_pair.h:\n  In instantiation of <code>std::pair&lt;const\n  std::pair&lt;std::string, std::string&gt;,\n  std::string&amp;&gt;':\n  /usr/include/c++/3.2.3/bits/stl_tree.h:122:\n  instantiated from\n  </code>std::_Rb_tree_node\n</br></br></p></blockquote>\n<p>What am I doing wrong to cause this errror?</p>\n", "Tags": "<c++><stl>", "OwnerDisplayName": "Sasha"}, "1155152": {"ParentId": "1155142", "CommentCount": "0", "Body": "<p>You cannot use references as the val, due to how the template is built. You could also use pointer instead.</p>\n", "OwnerUserId": "130152", "PostTypeId": "2", "Id": "1155152", "Score": "2", "CreationDate": "2009-07-20T18:34:39.357", "LastActivityDate": "2009-07-20T18:34:39.357"}, "1159789": {"ParentId": "1155142", "CommentCount": "1", "Body": "<p>You can use boost::reference_wrapper to store references in STL containers. Here is your example modified (not tested, and definitely not very well written, just illustrates a point)</p>\n<pre><code>#include &lt;map&gt;     \n#include&lt;iostream&gt;\n#include&lt;string&gt;   \n#include &lt;boost/ref.hpp&gt;\n\n\n\nint main()\n{\n   typedef std::pair&lt; std::string, std::string&gt; PairType;\n   typedef std::map&lt; PairType, boost::reference_wrapper&lt;std::string&gt; &gt; MapType;\n   std::string test = \"Hello there!!\";\n   MapType m;\n   PairType pp =  std::make_pair(\"aa\",\"bb\");\n   m.insert(std::make_pair(pp , boost::ref(test) ) );\n\n   MapType::iterator it (m.find( pp ) );\n   if(it != m.end())\n   {\n       std::cout &lt;&lt; it-&gt;second.get() &lt;&lt; std::endl;\n   }\n\n   //change test\n   test = \"I am different now\";\n   std::cout &lt;&lt; it-&gt;second.get() &lt;&lt; std::endl;\n\n   return 0;\n}\n</code></pre>\n", "OwnerUserId": "115387", "PostTypeId": "2", "Id": "1159789", "Score": "8", "CreationDate": "2009-07-21T15:06:33.480", "LastActivityDate": "2009-07-21T15:06:33.480"}, "1155148": {"ParentId": "1155142", "LastEditDate": "2015-02-23T01:06:00.410", "CommentCount": "0", "CreationDate": "2009-07-20T18:33:36.363", "OwnerUserId": "87234", "LastEditorUserId": "423170", "PostTypeId": "2", "Id": "1155148", "Score": "26", "Body": "<p>You cannot store references. References are just <a href=\"https://isocpp.org/wiki/faq/references\" rel=\"noreferrer\">aliases to another variable</a>.</p>\n<p>The map needs a copy of the string to store:</p>\n<pre><code>map&lt;pair&lt;string, string&gt;, string&gt; m;\n</code></pre>\n<p>The reason you are getting that particular error is because somewhere in map, it's going to do an operation on the <code>mapped_type</code> which in your case is <code>string&amp;</code>. One of those operations (like in <code>operator[]</code>, for example) will return a reference to the <code>mapped_type</code>:</p>\n<pre><code>mapped_type&amp; operator[](const key_type&amp;)\n</code></pre>\n<p>Which, with your <code>mapped_type</code>, would be:</p>\n<pre><code>string&amp;&amp; operator[](const key_type&amp; _Keyval)\n</code></pre>\n<p>And you cannot have a reference to a reference:</p>\n<blockquote>\n<p id=\"so_1155142_1155148_0\">Standard 8.3.4:</p>\n<p id=\"so_1155142_1155148_1\">There shall be no references to references, no arrays of references, and no pointers to references. </p>\n</blockquote>\n<hr>\n<p>On a side note, I would recommend you use <code>typedef</code>'s so your code is easier to read:</p>\n<pre><code>int main()\n{\n    typedef pair&lt;string, string&gt; StringPair;\n    typedef map&lt;StringPair, string&gt; StringPairMap;\n\n    string test;\n\n    StringPair p(\"Foo\",\"Bar\");\n    StringPairMap m;\n    m[make_pair(\"aa\",\"bb\")] = test;\n\n   return 0;\n</code></pre>\n<p>}</p>\n</hr>", "LastActivityDate": "2015-02-23T01:06:00.410"}, "bq_ids": {"n4140": {"so_1155142_1155148_1": {"section_id": 3222, "quality": 1.0, "length": 7}}, "n3337": {"so_1155142_1155148_1": {"section_id": 3096, "quality": 1.0, "length": 7}}, "n4659": {"so_1155142_1155148_1": {"section_id": 3979, "quality": 1.0, "length": 7}}}, "17627254": {"ParentId": "1155142", "CommentCount": "0", "Body": "<p>The previous answers here are outdated. Today we have <code>std::reference_wrapper</code> as part of the C++11 standard:</p>\n<pre><code>#include &lt;map&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string test;\n    pair&lt;string, string&gt; p = pair&lt;string, string&gt;(\"Foo\", \"Bar\");\n    map&lt;pair&lt;string, string&gt;, reference_wrapper&lt;string&gt;&gt; m;\n    m[make_pair(\"aa\", \"bb\")] = test;\n\n    return 0;\n}\n</code></pre>\n<p>A std::reference_wrapper will convert implicitly to a reference to its internal type, but this doesn't work in some contexts, in which case you call <code>.get()</code> for access.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper\">http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper</a></p>\n", "OwnerUserId": "1048668", "PostTypeId": "2", "Id": "17627254", "Score": "13", "CreationDate": "2013-07-13T05:25:25.410", "LastActivityDate": "2013-07-13T05:25:25.410"}});