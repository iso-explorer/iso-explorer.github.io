post_cb({"32416426": {"ParentId": "32416410", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The <a href=\"https://en.wikipedia.org/wiki/Semantics_%28computer_science%29\" rel=\"nofollow\">semantics</a> of the \u00a0<code>return</code> statement in C is to give control back to the caller with (if given) some returned value (result of the called function). You might read about <a href=\"https://en.wikipedia.org/wiki/Call_stack\" rel=\"nofollow\">call stacks</a> and <a href=\"https://en.wikipedia.org/wiki/Continuation\" rel=\"nofollow\">continuations</a> to get a broader picture.</p>\n<p>The \u00a76.8.6.4 of draft <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow\">n1570</a> of the <a href=\"https://en.wikipedia.org/wiki/C11_%28C_standard_revision%29\" rel=\"nofollow\">C11</a> standard specifies:</p>\n<blockquote>\n<p id=\"so_32416410_32416426_0\">A return statement terminates execution of the current function and returns control to\n  its caller. A function may have any number of return statements.</p>\n<p id=\"so_32416410_32416426_1\">If a return statement with an expression is executed, the value of the expression is\n  returned to the caller as the value of the function call expression. If the expression has a\n  type different from the return type of the function in which it appears, the value is\n  converted as if by assignment to an object having the return type of the function.</p>\n</blockquote>\n<p>In C++ things are different, since destructors (of all constructed local values in scope) are called. But no explicit statements after the <code>return</code>  gets executed.</p>\n<p>The <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">n3797</a> draft of <a href=\"https://en.wikipedia.org/wiki/C%2B%2B14\" rel=\"nofollow\">C++14</a> standard says in \u00a76.6.3 notably:</p>\n<blockquote>\n<p id=\"so_32416410_32416426_2\">A function returns to its caller by the return statement.</p>\n<p id=\"so_32416410_32416426_3\">A return statement with neither an expression nor a braced-init-list can be used only in functions that do not\n  return a value, that is, a function with the return type cv void, a constructor (12.1), or a destructor (12.4).\n  A return statement with an expression of non-void type can be used only in functions returning a value; the\n  value of the expression is returned to the caller of the function. The value of the expression is implicitly\n  converted to the return type of the function in which it appears. A return statement can involve the\n  construction and copy or move of a temporary object (\u00a712.2).</p>\n</blockquote>\n<p>....etc.... (the destructor thing is explained elsewhere)</p>\n<hr>\n<p>C and C++ are different languages. You need to read relevant books or <a href=\"http://www.cprogramming.com/\" rel=\"nofollow\">websites</a> on C programming and/or on <a href=\"http://stroustrup.com/programming.html\" rel=\"nofollow\">C++ programming</a>. </p>\n<p>Don't expect to be taught all the subtilities of <code>return</code> in a forum. Read books, then ask some <em>precise questions</em> with a <em>code sample</em>. Don't forget to test your code on your computer, e.g. by compiling it with all warnings and debug info (e.g. <code>gcc -Wall -Wextra -g</code> for C code, and <code>g++ -Wall -Wextra -g</code> for C++ code, if compiling with \u00a0<a href=\"http://gcc.gnu.org/\" rel=\"nofollow\">GCC</a>...). Then <em>use the debugger</em> (e.g. <code>gdb</code>) to run your program step by step. Be afraid of <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>.</p>\n<p>An <a href=\"https://en.wikipedia.org/wiki/Optimizing_compiler\" rel=\"nofollow\">optimizing compiler</a> won't always compile a <code>return</code> source statement into a <code>RET</code> <a href=\"https://en.wikipedia.org/wiki/Machine_code\" rel=\"nofollow\">machine instruction</a>. It could inline the function call, or compile the <code>return</code>-s as jumps to a <a href=\"https://en.wikipedia.org/wiki/Function_prologue\" rel=\"nofollow\">function epilogue</a>.</p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Application_binary_interface\" rel=\"nofollow\">ABI</a> and <a href=\"https://en.wikipedia.org/wiki/Calling_convention\" rel=\"nofollow\">calling conventions</a> dictate how a value gets returned. On <a href=\"http://www.x86-64.org/documentation_folder/abi.pdf\" rel=\"nofollow\">Linux/x86-64</a> it is often passed thru the <code>%rax</code> register (often, when your return a <code>struct</code> of two scalars, it gets returned thru two registers).</p>\n<p>You could ask your compiler (e.g. with <code>g++ -O -Wall -fverbose-asm -S</code>) to produce assembler code, and look into it with an editor or pager.</p>\n<p>C is a difficult language, and C++ is even more difficult. If you are learning programming, you might learn <a href=\"http://schemers.org/\" rel=\"nofollow\">Scheme</a> with <a href=\"https://mitpress.mit.edu/sicp/\" rel=\"nofollow\">SICP</a>. It has only expressions, and don't need any <code>return</code> <em>statement</em> (because it has no statement!) to return a value from a function.</p>\n</hr>", "OwnerUserId": "841108", "LastEditorUserId": "841108", "LastEditDate": "2015-09-05T19:10:10.970", "Id": "32416426", "Score": "3", "CreationDate": "2015-09-05T18:32:26.950", "LastActivityDate": "2015-09-05T19:10:10.970"}, "bq_ids": {"n4140": {"so_32416410_32416426_2": {"section_id": 3912, "quality": 1.0, "length": 6}, "so_32416410_32416426_1": {"section_id": 3913, "quality": 0.5185185185185185, "length": 14}, "so_32416410_32416426_3": {"section_id": 3913, "quality": 0.9215686274509803, "length": 47}}, "n3337": {"so_32416410_32416426_2": {"section_id": 3772, "quality": 1.0, "length": 6}, "so_32416410_32416426_1": {"section_id": 3773, "quality": 0.5185185185185185, "length": 14}, "so_32416410_32416426_3": {"section_id": 3773, "quality": 0.9215686274509803, "length": 47}}, "n4659": {"so_32416410_32416426_2": {"section_id": 4798, "quality": 1.0, "length": 6}}}, "32416410": {"CommentCount": "6", "ViewCount": "315", "PostTypeId": "1", "ClosedDate": "2015-09-05T19:56:57.153", "LastEditorUserId": "4766623", "LastActivityDate": "2015-09-05T19:57:19.253", "Body": "<p>It's ok to say that the statements are executed before the return statements.\nIn 8085 assembler, the <code>RET</code> statement returns the program counter to the next instruction after the function call in the main program.</p>\n<p>Why does this happen? What if I would like to change the values of the instance variables after returning the value to the function.</p>\n<p>Is this a drawback?</p>\n", "LastEditDate": "2015-09-05T19:57:19.253", "AcceptedAnswerId": "32416426", "Title": "Why execution stops after return statement in c++?", "Id": "32416410", "Score": "-5", "CreationDate": "2015-09-05T18:30:27.253", "Tags": "<c++>", "OwnerUserId": "4529996", "AnswerCount": "1"}});