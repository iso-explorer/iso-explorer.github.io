post_cb({"3858365": {"Id": "3858365", "PostTypeId": "2", "Body": "<p>If they have different names (as in your example), there's no ambiguity.  If they have the same name (so it's an attempt at an overload), the compiler will complain.</p>\n<p>Though it turns out you can redefine the default arguments to a function in a different scope (this is news to me...) - but in the same scope, you can't redefine default arguments <em>even to the same value</em>. from 8.3.6/4 \"Default arguments\":</p>\n<blockquote>\n<p id=\"so_3858344_3858365_0\">For non-template functions, default\n  arguments can be added in later\n  declarations of a function in the same\n  scope. Declarations in different\n  scopes have completely distinct sets\n  of default arguments. That is,\n  declarations in inner scopes do not\n  acquire default arguments from\n  declarations in outer scopes, and vice\n  versa. In a given function\n  declaration, all parameters subsequent\n  to a parameter with a default argument\n  shall have default arguments supplied\n  in this or previous declarations. A\n  default argument shall not be\n  redefined by a later declaration (not\n  even to the same value).</p>\n</blockquote>\n", "LastEditorUserId": "12711", "LastActivityDate": "2010-10-04T19:24:12.227", "Score": "1", "CreationDate": "2010-10-04T19:15:47.020", "ParentId": "3858344", "CommentCount": "0", "LastEditDate": "2010-10-04T19:24:12.227", "OwnerUserId": "12711"}, "3858401": {"Id": "3858401", "PostTypeId": "2", "Body": "<p>The following is fine</p>\n<pre><code>void function(int a = 0, float b = 3.1);\nvoid function(int a, float b =1.1, int c = 0);\n</code></pre>\n<p>And the following is fine too</p>\n<pre><code>function(); // calls first function\n</code></pre>\n<p>But the following is ambiguous</p>\n<pre><code>function(1); // second and first match equally well\n</code></pre>\n<p>For overload resolution (the process that tells what function to call), parameters that have not passed explicit arguments and that make use of default arguments are ignored. So the compiler really sees two functions both having one int parameter for the above call and can't decide. </p>\n<p>The following is ill-formed though</p>\n<pre><code>void function(int a = 0, float b = 3.1);\nvoid function(int a, float b =1.1);\n</code></pre>\n<p>While for the code in your question you declare <em>two</em> functions (because both declarations have different number of parameters), in this example you only declare <em>one</em> function. But the second declaration of it repeats a default argument for a parameter (and even with a different value, but that doesn't matter anymore). This is not allowed. Note that the following is fine</p>\n<pre><code>void function(int a, float b = 3.1);\nvoid function(int a = 0, float b);\n</code></pre>\n<p>The set of default arguments for declarations that appear in the same scope for the same function are merged, and only for those that appear in the same scope. So the following is valid</p>\n<pre><code>void function(int a = 0, float b = 3.1);\nvoid function1() {\n  void function(int a, float b = 1.1); \n  function(0);\n}\n</code></pre>\n<p>This calls the function with <code>1.1</code> passed for <code>b</code>. </p>\n", "LastActivityDate": "2010-10-04T19:21:58.397", "CommentCount": "1", "CreationDate": "2010-10-04T19:21:58.397", "ParentId": "3858344", "Score": "8", "OwnerUserId": "34509"}, "3858344": {"ViewCount": "2067", "Body": "<p>What does the C++ compiler do when coming ambiguous default parameters? For example, let's say there was a function such as:</p>\n<pre><code>void function(int a = 0, float b = 3.1);\nvoid function(int a, float b =1.1, int c = 0);\n</code></pre>\n<p>Is the above considered ambiguous? If not, what does the compiler do (how is the function matched exactly) when calling something like <code>function1(10)</code> ?</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "3858401", "Title": "What does the C++ compiler do when coming ambiguous default parameters?", "CreationDate": "2010-10-04T19:12:24.743", "Id": "3858344", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-06-03T02:11:03.293", "LastEditorUserId": "90527", "LastActivityDate": "2012-06-03T02:11:03.293", "Score": "5", "OwnerUserId": "466152", "Tags": "<c++><compiler-construction><default-value><function-overloading>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_3858344_3858365_0": {"length": 50, "quality": 0.8928571428571429, "section_id": 3255}}, "n3337": {"so_3858344_3858365_0": {"length": 50, "quality": 0.8928571428571429, "section_id": 3127}}, "n4659": {"so_3858344_3858365_0": {"length": 50, "quality": 0.8928571428571429, "section_id": 4013}}}, "3858375": {"Id": "3858375", "PostTypeId": "2", "Body": "<p>Ambiguous? You have two completely independent different functions: <code>function1</code> and <code>function2</code>. Even the number of parameters in each function is different. There's no ambiguity here whatsoever. When you ask the compiler to call <code>function1(10)</code> it calls <code>function1(10, 3.1)</code>. <code>function2</code> doesn't even come into the picture.</p>\n<p>If it were the same function, then the issue of ambiguity would not arise simply because it is illegal in C++ to specify a default argument for the same parameter more than once (within the same translation unit). Even of you specify <em>the same</em> default argument value the second time, the program is ill-formed</p>\n<pre><code>void foo(int a = 5);\nvoid foo(int a = 5); // &lt;- ERROR\n</code></pre>\n<p>What one can do though is to specify a different set of default arguments for the same function in <em>different translation units</em>. But that does not create any ambiguity because the compiler can see only one translation unit. The compiler simply will never know of any potential \"ambiguity\" is that case.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2010-10-04T19:23:13.410", "Score": "0", "CreationDate": "2010-10-04T19:17:24.467", "ParentId": "3858344", "CommentCount": "1", "LastEditDate": "2010-10-04T19:23:13.410", "OwnerUserId": "187690"}, "3858395": {"Id": "3858395", "PostTypeId": "2", "Body": "<p>Furthermore, the answer to any question starting with, \"What does the C++ compiler do...,\" is always going to be, \"Depends on which compiler you're talking about.\"</p>\n", "LastActivityDate": "2010-10-04T19:20:56.290", "CommentCount": "2", "CreationDate": "2010-10-04T19:20:56.290", "ParentId": "3858344", "Score": "-1", "OwnerUserId": "301883"}});