post_cb({"19756393": {"ParentId": "19756374", "LastEditDate": "2013-11-03T18:41:45.103", "CommentCount": "0", "CreationDate": "2013-11-03T18:26:53.940", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "PostTypeId": "2", "Id": "19756393", "Score": "3", "Body": "<p>Accessing arrays in <em>C++</em> using negative indices is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>, the valid index for:</p>\n<pre><code>int a[5];\n</code></pre>\n<p>will be <code>0 to 4</code>.</p>\n<p>If we look at the draft C++ standard section <code>8.3.4</code> <em>Arrays</em> in paragraph <em>1</em> says:</p>\n<blockquote>\n<p id=\"so_19756374_19756393_0\">[...] If the value of the constant expression is N, the array has N elements numbered 0 to N-1, [...]</p>\n</blockquote>\n", "LastActivityDate": "2013-11-03T18:41:45.103"}, "19756374": {"CommentCount": "1", "ViewCount": "79", "CreationDate": "2013-11-03T18:25:08.733", "LastActivityDate": "2013-11-03T18:41:45.103", "Title": "for loop prints i instead of array value", "AcceptedAnswerId": "19756393", "PostTypeId": "1", "Id": "19756374", "Score": "0", "Body": "<p>why does this...</p>\n<pre><code>int a[5];\na[-2] = 1;\na[-1] = 2;\na[0] = 3;\na[1] = 4;\na[2] = 5;\n\ncout &lt;&lt; a[-2] &lt;&lt; endl &lt;&lt;endl;\n\nfor(int i=-2 ; i&lt;=2 ; i++)\n{\n    cout &lt;&lt; a[i] &lt;&lt; endl;\n}\n</code></pre>\n<p>...output this?</p>\n<pre><code>1\n\n-2\n2\n3\n4\n5\n</code></pre>\n<p>i created another project file in codeblocks, compiled, and got this</p>\n<pre><code>1\n\n1\n-1\n3\n4\n5\n</code></pre>\n<p>i tried to find posts with similar problems, but i couldnt find any.\nthis just doesnt make sense to me</p>\n", "Tags": "<c++><arrays><for-loop><codeblocks>", "OwnerUserId": "2867010", "AnswerCount": "2"}, "19756391": {"ParentId": "19756374", "CommentCount": "0", "Body": "<p>Your code exhibits undefined behavior: <code>-2</code> is not a valid index into <code>int[5]</code> array. Valid indexes into such array are 0 through 4.</p>\n<p>In this particular case, it just so happens, by accident, that <code>i</code> is located in memory at exactly the offset <code>2 * sizeof(int)</code> below the first element of <code>a</code>, so <code>a[-2]</code> happens to be an alias for <code>i</code>.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "19756391", "Score": "2", "CreationDate": "2013-11-03T18:26:39.573", "LastActivityDate": "2013-11-03T18:26:39.573"}, "bq_ids": {"n4140": {"so_19756374_19756393_0": {"section_id": 3228, "quality": 1.0, "length": 6}}, "n3337": {"so_19756374_19756393_0": {"section_id": 3101, "quality": 1.0, "length": 6}}, "n4659": {"so_19756374_19756393_0": {"section_id": 3985, "quality": 1.0, "length": 6}}}});