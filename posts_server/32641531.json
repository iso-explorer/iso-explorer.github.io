post_cb({"bq_ids": {"n4140": {"so_32641531_32642696_3": {"length": 7, "quality": 0.875, "section_id": 5917}, "so_32641531_32642696_1": {"length": 6, "quality": 1.0, "section_id": 5430}}, "n3337": {"so_32641531_32642696_3": {"length": 8, "quality": 1.0, "section_id": 5689}, "so_32641531_32642696_1": {"length": 6, "quality": 1.0, "section_id": 5225}}, "n4659": {"so_32641531_32642696_3": {"length": 6, "quality": 0.75, "section_id": 7410}, "so_32641531_32642696_1": {"length": 6, "quality": 1.0, "section_id": 6858}}}, "32642696": {"Id": "32642696", "PostTypeId": "2", "Body": "<p>As far as I can tell this seems like a gcc extension to allow const anonymous unions. This works fine with later versions of gcc, for <a href=\"http://melpon.org/wandbox/permlink/txU0XozmZUpIWVZi\" rel=\"nofollow\">example with gcc 5.2</a>. It would seem the only way to get it working for older versions would be to use the <a href=\"https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html\" rel=\"nofollow\">-fpermissive</a> flag, which downgrades warnings on non-conformant code but that may not be desirable.</p>\n<p>On the other hand if we try this code with clang it provides the following warning if we use the <code>-pedantic</code> flag (<em><a href=\"http://melpon.org/wandbox/permlink/txU0XozmZUpIWVZi\" rel=\"nofollow\">see it live</a></em>):</p>\n<blockquote>\n<p id=\"so_32641531_32642696_0\">warning: anonymous union cannot be 'const' [-Wpedantic]</p>\n</blockquote>\n<p>and we can find a gcc bug report: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67006\" rel=\"nofollow\">type-specifier const in declaration of anonymous union</a> which claims this is ill-formed due to <code>7.1.6.1</code> <em>[dcl.type.cv]</em>  which says:</p>\n<blockquote>\n<p id=\"so_32641531_32642696_1\">If a cv-qualifier appears in a decl-specifier-seq, the\n  init-declarator-list of the declaration shall not be empty.</p>\n</blockquote>\n<p>and as far as I can tell this is correct. We are forced to have an empty <em>init-declarator-list</em> by the definition of an anonymous union from section <code>9.5</code> <em>[class.union]</em>:</p>\n<blockquote>\n<p id=\"so_32641531_32642696_2\">A union of the form</p>\n<pre><code>union { member-specification } ;\n</code></pre>\n<p id=\"so_32641531_32642696_3\">is called an anonymous union; it defines an unnamed object of unnamed\n  type.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-09-18T12:06:50.373", "Score": "1", "CreationDate": "2015-09-18T02:00:51.923", "ParentId": "32641531", "CommentCount": "1", "OwnerUserId": "1708801", "LastEditDate": "2015-09-18T12:06:50.373"}, "32641531": {"ViewCount": "225", "Body": "<p>When compiling the following:</p>\n<pre><code>const static union {\n    float cMaskF;\n    int cMask = -1;\n};\n</code></pre>\n<p><code>x86_64-w64-mingw32-gcc-5.2.0</code> succeeds, while both <code>i686-pc-cygwin-gcc-4.9.2</code> and <code>4.9.3</code> give the following error:</p>\n<blockquote>\n<p id=\"so_32641531_32641531_0\">uninitialized const 'Uphil::Math::{anonymous}::' [-fpermissive]</p>\n</blockquote>\n<p>However, the following also produces errors, understandably...</p>\n<pre><code>const static union {\n    float cMaskF = 1.0f;\n    int cMask = -1;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_32641531_32641531_1\">multiple fields in union 'Uphil::Math::{anonymous}::' initialized</p>\n<p id=\"so_32641531_32641531_2\">initializations for multiple members of 'Uphil::Math::{anonymous}::'</p>\n</blockquote>\n<p>So is there a way to get const static anonymous unions to compile consistently?  Is this a bug in the older version that was fixed, or is it \"non-standard\" code that I shouldn't expect to be portable?  This seems like a useful construct, regardless.</p>\n<p>This is all compiled under C++11.  v5.2.0 succeeds without warning even with <code>-pedantic</code>.</p>\n", "AcceptedAnswerId": "32642696", "Title": "Static const anonymous union gives \"uninitialized const\" error using GCC 4.9.3", "CreationDate": "2015-09-17T23:26:40.963", "Id": "32641531", "CommentCount": "3", "LastEditDate": "2015-09-18T02:42:20.560", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-09-18T12:06:50.373", "Score": "3", "OwnerUserId": "610966", "Tags": "<c++><gcc><compilation><compiler-errors><unions>", "AnswerCount": "1"}});