post_cb({"21823024": {"ParentId": "21822438", "CommentCount": "2", "Body": "<p>Looks like this bug: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=54521\" rel=\"nofollow\">g++ fails to call explicit constructors in the second step of copy initialization</a></p>\n<blockquote>\n<p id=\"so_21822438_21823024_0\">g++ fails to compile the following code</p>\n<pre><code>struct X\n{\n    X(int) {}\n    explicit X(X const &amp;) {}\n};\n\nint main()\n{\n    X x = 1; // error: no matching function for call to 'X::X(X)'\n}\n</code></pre>\n<p id=\"so_21822438_21823024_1\">The second step of a copy initialization (see 8.5/16/6/2) is a\n  direct-initialization where explicit constructors shall be considered\n  as candidate functions.</p>\n</blockquote>\n", "Id": "21823024", "PostTypeId": "2", "OwnerDisplayName": "user1508519", "Score": "3", "CreationDate": "2014-02-17T07:23:18.663", "LastActivityDate": "2014-02-17T07:23:18.663"}, "21822438": {"CommentCount": "0", "AcceptedAnswerId": "21823024", "PostTypeId": "1", "LastEditorUserId": "1782465", "CreationDate": "2014-02-17T06:43:43.870", "LastActivityDate": "2014-02-17T09:06:14.047", "LastEditDate": "2014-02-17T07:48:44.950", "ViewCount": "209", "FavoriteCount": "4", "Title": "In copy-initialization, is the call to the copy constructor explicit or implicit?", "Id": "21822438", "Score": "8", "Body": "<pre><code>class AAA {\npublic:\n    explicit AAA(const AAA&amp;) {}\n    AAA(int) {}\n};\n\n\nint main() {\n    AAA a = 1;\n    return 0;\n}\n</code></pre>\n<p>In the above code, as I understand, though elided in most cases, the copy constructor is still semantically required to be called.  My question is, is the call explicit or implicit?  For a long time I have the conclusion in my mind that the call to <code>AAA::AAA(int)</code> is implicit but the call to the copy constructor is not.  Today I accidentally got g++ to compile the above code and it reported error.  (VC12 compiles OK.)</p>\n<p>In section 8.5 of the standard:</p>\n<blockquote>\n<p id=\"so_21822438_21822438_0\">If the destination type is a (possibly cv-qualified) class type:</p>\n<ul>\n<li><p id=\"so_21822438_21822438_1\">If the initialization is direct-initialization, or if it is copy-initialization where the cv-unqualified version of the source\n  type is the same class as, or a derived class of, the class of the\n  destination, constructors are considered. The applicable constructors\n  are enumerated (13.3.1.3), and the best one is chosen through overload\n  resolution (13.3). The constructor so selected is called to initialize\n  the object, with the initializer expression or expression-list as its\n  argument(s). If no constructor applies, or the overload resolution is\n  ambiguous, the initialization is ill-formed.</p></li>\n<li><p id=\"so_21822438_21822438_2\">Otherwise (i.e., for the remaining copy-initialization cases), user-defined conversion sequences that can convert from the source\n  type to the destination type or (when a conversion function is used)\n  to a derived class thereof are enumerated as described in 13.3.1.4,\n  and the best one is chosen through overload resolution (13.3). If the\n  conversion cannot be done or is ambiguous, the initialization is\n  ill-formed. The function selected is called with the initializer\n  expression as its argument; if the function is a constructor, the call\n  initializes a temporary of the cv-unqualified version of the\n  destination type. The temporary is a prvalue. The result of the call\n  (which is the temporary for the constructor case) is then used to\n  <strong>direct-initialize</strong>, according to the rules above, the object that is\n  the destination of the copy-initialization. In certain cases, an\n  implementation is permitted to eliminate the copying inherent in this\n  direct-initialization by constructing the intermediate result directly\n  into the object being initialized; see 12.2, 12.8.</p></li>\n</ul>\n</blockquote>\n<p>The bolded <code>direct-initialize</code> in the above quotes means the call to copy constructor is explicit, right?  Is g++ wrong or my interpretation of the standard wrong?</p>\n", "Tags": "<c++><g++><language-lawyer>", "OwnerUserId": "3237645", "AnswerCount": "2"}, "21824766": {"ParentId": "21822438", "CommentCount": "0", "Body": "<p>Looks like copy constructor is never called . Only constructor is called . The following code may call copy constructor </p>\n<pre><code>AAA a = 1;\nAAA ab = a;\n</code></pre>\n<p>Not sure why G++ is compiling it .</p>\n", "OwnerUserId": "944028", "PostTypeId": "2", "Id": "21824766", "Score": "1", "CreationDate": "2014-02-17T09:06:14.047", "LastActivityDate": "2014-02-17T09:06:14.047"}, "bq_ids": {"n4140": {"so_21822438_21822438_0": {"section_id": 3296, "quality": 1.0, "length": 6}, "so_21822438_21822438_2": {"section_id": 3296, "quality": 0.9204545454545454, "length": 81}, "so_21822438_21822438_1": {"section_id": 3296, "quality": 0.9111111111111111, "length": 41}}, "n3337": {"so_21822438_21822438_0": {"section_id": 3166, "quality": 1.0, "length": 6}, "so_21822438_21822438_2": {"section_id": 3166, "quality": 0.9204545454545454, "length": 81}, "so_21822438_21822438_1": {"section_id": 3166, "quality": 0.9111111111111111, "length": 41}}, "n4659": {"so_21822438_21822438_0": {"section_id": 4058, "quality": 1.0, "length": 6}, "so_21822438_21822438_2": {"section_id": 4058, "quality": 0.6818181818181818, "length": 60}, "so_21822438_21822438_1": {"section_id": 4058, "quality": 0.9111111111111111, "length": 41}}}});