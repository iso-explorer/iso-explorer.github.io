post_cb({"7372986": {"Id": "7372986", "PostTypeId": "2", "Body": "<p>The vector never goes out of scope for the exit.</p>\n<p>Just remove the <code>exit()</code> from main and replace it with a <code>return 0;</code></p>\n", "LastActivityDate": "2011-09-10T16:20:24.017", "CommentCount": "0", "CreationDate": "2011-09-10T16:20:24.017", "ParentId": "7372937", "Score": "7", "OwnerUserId": "668501"}, "7372984": {"Id": "7372984", "PostTypeId": "2", "Body": "<p>I don't believe that you have a memory leak. When valgrind says the memory is still reachable it's not telling you that it leaked but that it wasn't free'ed before the program exited. In this case the vector desctructor didn't get called before exit. Try returning from main rather than calling exit().</p>\n", "LastActivityDate": "2011-09-10T16:20:03.343", "CommentCount": "0", "CreationDate": "2011-09-10T16:20:03.343", "ParentId": "7372937", "Score": "2", "OwnerUserId": "320608"}, "bq_ids": {"n4140": {"so_7372937_7372968_0": {"length": 17, "quality": 0.5666666666666667, "section_id": 7148}}, "n3337": {"so_7372937_7372968_0": {"length": 17, "quality": 0.5666666666666667, "section_id": 6892}}, "n4659": {"so_7372937_7372968_0": {"length": 17, "quality": 0.5666666666666667, "section_id": 8649}}}, "7372968": {"Id": "7372968", "PostTypeId": "2", "Body": "<p><code>exit()</code> will not call the destructors of the current scope thus there may be a leak:</p>\n<blockquote>\n<p id=\"so_7372937_7372968_0\">(\u00a73.6.1/4) Calling the function <code>void exit(int);</code> declared in <code>&lt;cstdlib&gt;</code> (18.3) terminates the program without leaving the current block and hence without destroying any objects with automatic storage duration (12.4). If exit is called to end a program during the destruction of an object with static storage duration, the program has undefined behavior.</p>\n</blockquote>\n<p>Use this instead:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main(int argc, char *argv[]) {\n    std::vector&lt;double&gt; v;\n\n    for (int i=0; i&lt;9; i++) {\n        v.push_back(i);\n    }\n\n    std::cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2011-09-10T16:17:42.163", "CommentCount": "3", "CreationDate": "2011-09-10T16:17:42.163", "ParentId": "7372937", "Score": "18", "OwnerUserId": "565635"}, "7372976": {"Id": "7372976", "PostTypeId": "2", "Body": "<p>Did you try putting all the code except <code>exit</code> in a separate <code>{}</code> block?</p>\n", "LastActivityDate": "2011-09-10T16:18:59.630", "CommentCount": "0", "CreationDate": "2011-09-10T16:18:59.630", "ParentId": "7372937", "Score": "1", "OwnerUserId": "276994"}, "8883029": {"Id": "8883029", "PostTypeId": "2", "Body": "<p>You did not have to call the exit function it will immediate exit from the program did not call the OS clean up calls.</p>\n<p>Always use the return() not exit().</p>\n", "LastActivityDate": "2012-01-16T16:28:05.310", "CommentCount": "0", "CreationDate": "2012-01-16T16:28:05.310", "ParentId": "7372937", "Score": "0", "OwnerUserId": "1152105"}, "7372937": {"ViewCount": "1543", "Body": "<p>I was debugging my program and I've noticed that even though I've marked almost all of\nit as comment and all I did was to push double values into a vector, I have a memory leak. I read the api in c++ reference, but couldn't find anything. Here's the code: </p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include \"RegMatrix.h\"\n#include \"Matrix.h\"\n\nusing namespace std;\n\nint main(void)\n{\n    vector&lt;double&gt; v;\n    for (int i=0; i&lt;9; i++)\n    {\n        v.push_back(i);\n    }\n    cout &lt;&lt; endl;\n\n    exit(EXIT_SUCCESS);\n}\n</code></pre>\n<p>And valgrind's report:</p>\n<pre><code>==9299== HEAP SUMMARY:\n==9299==     in use at exit: 128 bytes in 1 blocks\n==9299==   total heap usage: 5 allocs, 4 frees, 248 bytes allocated\n==9299== \n==9299== 128 bytes in 1 blocks are still reachable in loss record 1 of 1\n==9299==    at 0x402569A: operator new(unsigned int) (vg_replace_malloc.c:255)\n==9299==    by 0x804937D: __gnu_cxx::new_allocator&lt;double&gt;::allocate(unsigned int, void     const*) (in /home/yotamoo/workspace/ex3/main)\n==9299==    by 0x804922F: std::_Vector_base&lt;double, std::allocator&lt;double&gt;     &gt;::_M_allocate(unsigned int) (in /home/yotamoo/workspace/ex3/main)\n==9299==    by 0x8048E6C: std::vector&lt;double, std::allocator&lt;double&gt;     &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;double*, std::vector&lt;double,     std::allocator&lt;double&gt; &gt; &gt;, double const&amp;) (in /home/yotamoo/workspace/ex3/main)\n==9299==    by 0x8048CA2: std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back(double     const&amp;) (in /home/yotamoo/workspace/ex3/main)\n==9299==    by 0x8048B10: main (in /home/yotamoo/workspace/ex3/main)\n==9299== \n==9299== LEAK SUMMARY:\n==9299==    definitely lost: 0 bytes in 0 blocks\n==9299==    indirectly lost: 0 bytes in 0 blocks\n==9299==      possibly lost: 0 bytes in 0 blocks\n==9299==    still reachable: 128 bytes in 1 blocks\n==9299==         suppressed: 0 bytes in 0 blocks\n</code></pre>\n<p>This is weird. Any ideas? thanks</p>\n", "Title": "unclear memory leak with vector, c++, when calling exit", "CreationDate": "2011-09-10T16:12:28.543", "LastActivityDate": "2012-01-16T16:28:05.310", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-09-10T16:28:03.757", "LastEditorUserId": "272207", "Id": "7372937", "Score": "7", "OwnerUserId": "651216", "Tags": "<c++><memory><memory-leaks><valgrind>", "AnswerCount": "5"}});