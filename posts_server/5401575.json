post_cb({"5401575": {"CommentCount": "0", "ViewCount": "151", "CreationDate": "2011-03-23T06:26:08.807", "LastActivityDate": "2011-03-23T07:44:57.287", "Title": "check this is correct or not", "AcceptedAnswerId": "5401792", "PostTypeId": "1", "Id": "5401575", "Score": "0", "Body": "<p>form ISO Standard Draft</p>\n<p>n3234 says:</p>\n<pre><code>Two names are the same if\n\u2014 they are identi\ufb01er s composed of the same character sequence, or\n</code></pre>\n<p>According to this meaning..Check whether this is correct or not</p>\n<pre><code>class ABC{};\nclass abc{};\nint ABC(){}\nint abc(){}\nint main(){\n           int abc;\n           char ABC;\n         }\n</code></pre>\n<p>is this program is correct according to the above statement?</p>\n<p>is this program is APT to this statement?(what that statement meaning represents)</p>\n<p>Finally ..explain any other thing ..is i left? </p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "526255", "AnswerCount": "2"}, "5401792": {"ParentId": "5401575", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From ISO/IEC 14882:2003(E) 9.1.2 -</p>\n<blockquote>\n<p id=\"so_5401575_5401792_0\">A class definition introduces the class name into the scope where it is defined and hides any class, object, function, or other declaration of that name in an enclosing scope (3.3). If a class name is declared in a scope where an object, function, or enumerator of the same name is also declared, then when both declara- tions are in scope, the class can be referred to only using an elaborated-type-specifier (3.4.4). </p>\n</blockquote>\n<p>[Example:</p>\n<pre><code>struct stat { \n   // ...\n};\n\nstat gstat;    // use plain stat to \n               // define variable\n\nint stat(struct stat*);   // redeclare stat as function\n\nvoid f() {\n    struct stat* ps; stat(ps);   // struct prefix needed \n                                 // to name struct stat \n                                 // ...\n}\n</code></pre>\n<p>\u2014end example]</p>\n<p><strong>3.3.7 Name hiding</strong></p>\n<blockquote>\n<p id=\"so_5401575_5401792_1\">2        A class name (9.1) or enumeration name (7.2) can be hidden by the name of an object, function, or enumer- ator declared in the same scope. If a class or enumeration name and an object, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the object, function, or enumerator name is visible.</p>\n</blockquote>\n<hr>\n<p>With the quotes from the standards, all these statements are correct.</p>\n<pre><code>class ABC{};\nclass abc{};   // abc and ABC are two different character sequences for the \n               // class entity. And similar is the case for next two function\n               // entities.\n\nint ABC(){} \nint abc(){}\n\nint main(){      \n    int abc;   // abc and ABC are two different character sequences.\n    char ABC;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_5401575_5401792_2\">Finally ..explain any other thing ..is i left?</p>\n</blockquote>\n<p>Both the functions <code>ABC(), abc()</code> are supposed to return <code>int</code>, which they are not doing though :)</p>\n</hr>", "OwnerUserId": "528724", "LastEditorUserId": "528724", "LastEditDate": "2011-03-23T07:44:57.287", "Id": "5401792", "Score": "3", "CreationDate": "2011-03-23T06:54:27.517", "LastActivityDate": "2011-03-23T07:44:57.287"}, "bq_ids": {"n4140": {"so_5401575_5401792_0": {"section_id": 5857, "quality": 0.8333333333333334, "length": 35}, "so_5401575_5401792_1": {"section_id": 7079, "quality": 0.8611111111111112, "length": 31}}, "n3337": {"so_5401575_5401792_0": {"section_id": 5627, "quality": 0.8333333333333334, "length": 35}, "so_5401575_5401792_1": {"section_id": 6823, "quality": 0.8611111111111112, "length": 31}}, "n4659": {"so_5401575_5401792_0": {"section_id": 7336, "quality": 0.8333333333333334, "length": 35}, "so_5401575_5401792_1": {"section_id": 8580, "quality": 0.8611111111111112, "length": 31}}}, "5401749": {"ParentId": "5401575", "CommentCount": "1", "Body": "<p>C++ acknowledges upper and lower cases, so yes the above does conform.</p>\n<p>There is a difference between ABC and abc-they are completely different identifiers.\nHowever, using this distinction to make unique identifiers in the real world is discouraged because it practically guarantees you will mix them up at some point.</p>\n<p>Note that,</p>\n<pre><code>int abc();\nint abc();\n</code></pre>\n<p>is illegal, but</p>\n<pre><code>int abc();\nint ABC();\n</code></pre>\n<p>is not.</p>\n", "OwnerUserId": "450153", "PostTypeId": "2", "Id": "5401749", "Score": "2", "CreationDate": "2011-03-23T06:48:30.893", "LastActivityDate": "2011-03-23T06:48:30.893"}});