post_cb({"bq_ids": {"n4140": {"so_29109654_29109746_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 3285}, "so_29109654_29109746_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 3286}, "so_29109654_29109746_2": {"length": 12, "quality": 0.75, "section_id": 3291}, "so_29109654_29109746_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 7151}}, "n3337": {"so_29109654_29109746_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 3155}, "so_29109654_29109746_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 3156}, "so_29109654_29109746_2": {"length": 14, "quality": 0.875, "section_id": 3161}, "so_29109654_29109746_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 6895}}, "n4659": {"so_29109654_29109746_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 653}, "so_29109654_29109746_2": {"length": 12, "quality": 0.75, "section_id": 4053}, "so_29109654_29109746_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 4051}}}, "29109654": {"ViewCount": "132", "Body": "<p>I have the following </p>\n<pre><code>char mem_pool[1024*1024*64]; \n\nint main() {\n    // ... \n}\n</code></pre>\n<p>I'm trying to get a <strong>thorough understanding</strong> how will <code>mem_pool</code> be initialized. After a lot of search my conclusions are : </p>\n<ul>\n<li>it's a static initialization (not as in <code>static</code> the keyword, but as in \"run before the program does - during static initialization phase\")</li>\n<li>it will run in 2 phases : zero initialization and default initialization (the second phase won't do anytning)</li>\n<li>it's an array of PODs so the default initialization for every element should apply, but due to the previous 2 points we won't have an array of indeterminable values (as we would with a <code>char ar[N]</code> in a function scope) but an array of zeroes. </li>\n</ul>\n<p>Could someone help me dissambiguate what's guaranteed by the language and correct me if I'm wrong ? </p>\n<p>I also thought of doing any of the following</p>\n<pre><code>char mem_pool[1024*1024*64] {}; \nchar mem_pool[1024*1024*64] = \"\"; \n</code></pre>\n<p>I suspect it's a better/recommended practice, but for now I need to understand my initial question. </p>\n", "AcceptedAnswerId": "29109746", "Title": "How will this variable be initialized?", "CreationDate": "2015-03-17T21:04:53.273", "Id": "29109654", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-03-17T21:30:02.163", "LastEditorUserId": "4224575", "LastActivityDate": "2015-03-17T21:35:51.563", "Score": "6", "OwnerUserId": "4224575", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}, "29109746": {"Id": "29109746", "PostTypeId": "2", "Body": "<p><strong>Your understanding is correct.</strong></p>\n<p>The array's elements will all be zero-initialised, because the array has static storage duration:</p>\n<blockquote>\n<p id=\"so_29109654_29109746_0\"><code>[C++11: 3.6.2/2]:</code> <strong>Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be <em>zero-initialized</em> (8.5) before any other initialization takes place.</strong> <em>[..]</em></p>\n<p id=\"so_29109654_29109746_1\"><code>[C++11: 8.5/5]:</code> To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<ul>\n<li><strong>if <code>T</code> is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to <code>T</code></strong>;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is <em>zero-initialized</em> and padding is initialized to zero bits;</li>\n<li><strong>if <code>T</code> is an array type, each element is <em>zero-initialized</em>;</strong></li>\n<li>if T is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>If it did not have static storage duration, the elements would all have indeterminate values:</p>\n<blockquote>\n<p id=\"so_29109654_29109746_2\"><code>[C++11: 8.5/11]:</code> <strong>If no initializer is specified for an object, the object is <em>default-initialized</em></strong>; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value. <em>[..]</em></p>\n<p id=\"so_29109654_29109746_3\"><code>[C++11: 8.5/6]:</code> To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9), the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li><strong>if <code>T</code> is an array type, each element is <em>default-initialized</em>;</strong></li>\n<li><strong>otherwise, no initialization is performed</strong>.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-03-17T21:35:51.563", "Score": "5", "CreationDate": "2015-03-17T21:09:39.027", "ParentId": "29109654", "CommentCount": "6", "LastEditDate": "2015-03-17T21:35:51.563", "OwnerUserId": "560648"}});