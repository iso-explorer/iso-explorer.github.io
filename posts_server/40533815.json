post_cb({"bq_ids": {"n4140": {"so_40533815_40534093_2": {"length": 5, "quality": 1.0, "section_id": 3296}, "so_40533815_40534093_1": {"length": 21, "quality": 1.0, "section_id": 5997}, "so_40533815_40534093_3": {"length": 19, "quality": 0.95, "section_id": 5998}, "so_40533815_40534093_4": {"length": 4, "quality": 1.0, "section_id": 5998}}, "n3337": {"so_40533815_40534093_2": {"length": 5, "quality": 1.0, "section_id": 3166}, "so_40533815_40534093_3": {"length": 19, "quality": 0.95, "section_id": 5766}, "so_40533815_40534093_1": {"length": 21, "quality": 1.0, "section_id": 5765}, "so_40533815_40534093_4": {"length": 4, "quality": 1.0, "section_id": 5766}}, "n4659": {"so_40533815_40534093_2": {"length": 5, "quality": 1.0, "section_id": 4058}, "so_40533815_40534093_1": {"length": 21, "quality": 1.0, "section_id": 7498}}}, "40533815": {"ViewCount": "425", "Body": "<p>As this <a href=\"https://stackoverflow.com/a/553869/3222702\">answer</a> suggests, I know that it's allowed to use incomplete types as a return value in function's declaration. So I wrote the following code:</p>\n<p><strong>Obj.h</strong></p>\n<pre><code>class Obj {\n    int x;\n};\n</code></pre>\n<p><strong>f.h</strong></p>\n<pre><code>class Obj;\nObj f();\n</code></pre>\n<p><strong>f.cpp</strong></p>\n<pre><code>#include \"Obj.h\"\n\nObj f() {\n    return Obj();\n}\n</code></pre>\n<p><strong>main.cpp</strong></p>\n<pre><code>#include \"f.h\"\nint main() {\n    f();\n    return 0;\n};\n</code></pre>\n<p>Compiling this code with the following compiler:</p>\n<p><code>g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4)</code> </p>\n<p>using the following compilation command:</p>\n<pre><code>g++ *.cpp\n</code></pre>\n<p>gives the following error:</p>\n<pre><code>main.cpp: In function 'int main()':\nmain.cpp:4:7: error: invalid use of incomplete type 'class Obj'\n     f();\n       ^\nf.h:1:7: error: forward declaration of 'class Obj'\n class Obj;\n       ^\n</code></pre>\n<p>So the compiler is not allowing using incomplete type as a return value in a function's declaration. What's the explanation?</p>\n", "Title": "Forward declaration of returned type of function", "CreationDate": "2016-11-10T17:38:28.257", "LastActivityDate": "2016-11-10T18:07:28.907", "CommentCount": "2", "LastEditDate": "2017-05-23T11:53:34.987", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "40533815", "Score": "1", "OwnerUserId": "3222702", "Tags": "<c++><forward-declaration>", "AnswerCount": "3"}, "40534015": {"Id": "40534015", "PostTypeId": "2", "Body": "<p>The issue here is that <code>main.cpp</code> has no idea what <code>Obj</code> is so when it goes to compile <code>main.cpp</code> it can't call <code>f</code> since the return type is incomplete.  What you need to do is introduce the definition of <code>Obj</code> to <code>main.cpp</code>.  You can do this with a <code>#include \"obj.h\"</code> in <code>main.cpp</code>.</p>\n<p><a href=\"http://melpon.org/wandbox/permlink/4XX9Xv4tlDrWvGtk\" rel=\"nofollow noreferrer\">Live example</a></p>\n", "LastActivityDate": "2016-11-10T17:50:14.347", "CommentCount": "2", "CreationDate": "2016-11-10T17:50:14.347", "ParentId": "40533815", "Score": "2", "OwnerUserId": "4342498"}, "40534093": {"Id": "40534093", "PostTypeId": "2", "Body": "<p>As you stated it yourself \"it's allowed to use incomplete types as a return value in function's declaration\". That's exactly what the compiler allowed you to do. You successfully used an incomplete return type in non-defining function <em>declaration</em> - your declaration of <code>f</code> in <code>f.h</code> compiles without any problems.</p>\n<p>But that's all you are allowed to do. And this does not in any way change the fact that: </p>\n<ol>\n<li>At the point of function <em>definition</em> the return type shall be complete </li>\n<li>At the point of function <em>call</em> the return type shall be complete.</li>\n</ol>\n<p>In your code, inside <code>main()</code> you attempt to call a function declared with incomplete return type. Hence the error.</p>\n<blockquote>\n<p id=\"so_40533815_40534093_0\"><strong>5.2.2 Function call [expr.call]</strong></p>\n<p id=\"so_40533815_40534093_1\"><strong>10</strong> A function call is an lvalue if the result type is an lvalue\n  reference type or an rvalue reference to function type, an xvalue if\n  the result type is an rvalue reference to object type, <strong>and a prvalue\n  otherwise.</strong> </p>\n<p id=\"so_40533815_40534093_2\"><strong>11</strong> If a function call is a prvalue of object type: </p>\n<p id=\"so_40533815_40534093_3\">\u2014 if the\n  function call is either \u2014 the operand of a decltype-specifier or \u2014 the\n  right operand of a comma operator that is the operand of a\n  decltype-specifier, a temporary object is not introduced for the\n  prvalue. The type of the prvalue may be incomplete. [...] </p>\n<p id=\"so_40533815_40534093_4\"><strong>\u2014 otherwise, the type of the prvalue shall be\n  complete.</strong></p>\n</blockquote>\n<p>In other words, what you are allowed is to introduce an early forward declaration of your function with incomplete return type. But by the time you get to <em>defining</em> that function or <em>calling</em> it, you should have that return type completed.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2016-11-10T18:07:28.907", "Score": "4", "CreationDate": "2016-11-10T17:54:15.690", "ParentId": "40533815", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2016-11-10T18:07:28.907"}, "40533903": {"Id": "40533903", "PostTypeId": "2", "Body": "<p>As you've seen, not all incomplete types are allowed. In fact, the rule is that a function can return a <strong>pointer or reference</strong> to an incomplete type. And the reason for that is that at the point of the call, the compiler has to be able to generate code to deal with the returned object. When there's no information about the content of the object, the compiler can't generate code. For example, suppose <code>Obj</code> has a non-trivial destructor; if the compiler doesn't know that, it can't generate code to destroy the object. When the return type is a pointer or a reference, the compiler has all the information it needs: pointers and references don't, in general, depend on the details of the target object.</p>\n", "LastActivityDate": "2016-11-10T17:44:09.717", "CommentCount": "0", "CreationDate": "2016-11-10T17:44:09.717", "ParentId": "40533815", "Score": "1", "OwnerUserId": "1593860"}});