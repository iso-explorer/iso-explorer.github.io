post_cb({"bq_ids": {"n4140": {"so_27864276_27864309_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6331}, "so_27864276_27864309_2": {"length": 6, "quality": 0.75, "section_id": 6333}, "so_27864276_27864309_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 6332}}, "n3337": {"so_27864276_27864309_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6088}, "so_27864276_27864309_2": {"length": 6, "quality": 0.75, "section_id": 6090}, "so_27864276_27864309_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 6089}}, "n4659": {"so_27864276_27864309_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 7841}, "so_27864276_27864309_2": {"length": 6, "quality": 0.75, "section_id": 7843}, "so_27864276_27864309_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 7842}}}, "27864276": {"ViewCount": "304", "Body": "<p>I'm collaborating with a friend using MSVC and I'm using clang.  One thing I've noticed is that clang seems to be automatically including some standard headers, while MSVC is not.  For example, I just used the functions assert() and round() from assert.h and math.h respectively.</p>\n<p>The code complied fine for me without explicitly including the headers -- is there a switch to turn this behavior off?  It's driving me up a wall.  I want there to be an error unless I explicitly include the header.</p>\n", "Title": "How to prevent clang from automatically including header files?", "CreationDate": "2015-01-09T15:49:39.760", "LastActivityDate": "2015-01-09T16:30:23.527", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user755921", "Id": "27864276", "Score": "2", "Tags": "<c++><visual-c++><clang>", "AnswerCount": "2"}, "27864309": {"Id": "27864309", "PostTypeId": "2", "Body": "<p>The Standard allows standard header files to include each other, or forward declare items normally found in other files... most likely what is happening is that these definitions are being provided (directly or indirectly) by one of the headers you <em>are</em> including.</p>\n<p>This behavior is Standard-conformant, so unfortunately writing portable code is going to require testing using multiple compilers.</p>\n<blockquote>\n<p id=\"so_27864276_27864309_0\">A C++ header may include other C++ headers.  A C++ header shall provide the declarations and de\ufb01nitions that appear in its synopsis.  A C++ header shown in its synopsis as including other C++ headers shall provide the declarations and de\ufb01nitions that appear in the synopses of those other headers.</p>\n<p id=\"so_27864276_27864309_1\">Certain types and macros are defined in more than one header.  Every such entity shall be de\ufb01ned such that any header that defines it may be included after any other header that also defines it (3.2).</p>\n<p id=\"so_27864276_27864309_2\">The  C  standard  headers  (D.5)  shall  include  only  their  corresponding  C++ standard  header,  as  described in 17.6.1.2.</p>\n</blockquote>\n<p>In addition to headers included by other headers, there's also the fact that the C++ headers may or may not introduce global names, while the C headers may or may not introduce names inside namespace <code>std</code>.  I've seen a lot of people recommending \"This is C++, you should be using <code>&lt;cxyz&gt;</code> instead of <code>xyz.h</code>\".  This advice is <em>misleading</em>; the two headers do not provide the same definitions, so inclusions of the C++ header cannot simply replace inclusion of the C header.  Whether all the code should be rewritten to use the C++ qualified names instead is debatable... but is a prerequisite for changing the includes.</p>\n<hr>\n<p>One thing that may help you is to list the headers actually used using <code>gcc -M</code>.  Then you can decide whether any of the indirectly included headers should be listed in your code.</p>\n</hr>", "LastEditorUserId": "103167", "LastActivityDate": "2015-01-09T16:30:23.527", "Score": "4", "CreationDate": "2015-01-09T15:51:33.600", "ParentId": "27864276", "CommentCount": "0", "OwnerUserId": "103167", "LastEditDate": "2015-01-09T16:30:23.527"}, "27864406": {"Id": "27864406", "PostTypeId": "2", "Body": "<p>Standard headers can include each other. The headers you want to not include might be included by another header you use. </p>\n<p>In this case you may want to manually #define the header guards of the headers you don't want before including anything, but that's a little dirty.</p>\n", "LastEditorUserId": "1401962", "LastActivityDate": "2015-01-09T16:03:26.520", "Score": "0", "CreationDate": "2015-01-09T15:58:09.203", "ParentId": "27864276", "CommentCount": "3", "OwnerUserId": "1401962", "LastEditDate": "2015-01-09T16:03:26.520"}});