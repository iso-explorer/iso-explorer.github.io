post_cb({"10261785": {"Id": "10261785", "PostTypeId": "2", "Body": "<p>Accessing the element that <code>rend</code> points to is <strong>undefined behavior</strong>. It very well might give you the first item in the container or crash your application or whatever you can imagine. This element is just a placeholder that is used to signal the end of the container when you are iterating (same applies to the <code>end</code> of the various Standard Library containers).</p>\n", "LastEditorUserId": "140367", "LastActivityDate": "2012-04-21T19:07:33.383", "Score": "2", "CreationDate": "2012-04-21T18:30:27.130", "ParentId": "10261705", "CommentCount": "0", "OwnerUserId": "140367", "LastEditDate": "2012-04-21T19:07:33.383"}, "10261807": {"Id": "10261807", "PostTypeId": "2", "Body": "<p>I'm not sure how you are checking where <code>rend</code> is pointing to, but I ran this example disproving your claim. </p>\n<pre><code>int main() {\n\n    map&lt;float,int&gt; m;\n    m.insert(pair&lt;float,int&gt;(.1,0));\n    m.insert(pair&lt;float,int&gt;(.4,5));\n    map&lt;float,int&gt;::reverse_iterator rend=m.rend();\n    map&lt;float,int&gt;::iterator begin=m.begin();\n\n    for ( rend=m.rbegin() ; rend != m.rend(); rend++ )\n    cout &lt;&lt; rend-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; rend-&gt;second &lt;&lt; endl;\n}\n</code></pre>\n<p>The output:</p>\n<pre><code>0.4 =&gt; 5\n0.1 =&gt; 0\n</code></pre>\n<p>If <code>rend</code> was pointing to the first element, 0.1 =&gt; 0 would not be printed. </p>\n<p>This is my example. You have to show what your code where you actually arrived at the conclusion that rend points to the first element. </p>\n", "LastEditorUserId": "138228", "LastActivityDate": "2012-04-21T19:00:25.260", "Score": "2", "CreationDate": "2012-04-21T18:34:47.020", "ParentId": "10261705", "CommentCount": "4", "OwnerUserId": "138228", "LastEditDate": "2012-04-21T19:00:25.260"}, "10261705": {"ViewCount": "468", "Body": "<p>I'm trying to reverse iterate through a std::map, following this code: <a href=\"http://www.cplusplus.com/reference/stl/map/rend/\" rel=\"nofollow\">http://www.cplusplus.com/reference/stl/map/rend/</a>\nIt says:</p>\n<blockquote>\n<p id=\"so_10261705_10261705_0\">rend() returns a reverse iterator referring to the element right before the first element in the map container, which is considered its reverse end.</p>\n<p id=\"so_10261705_10261705_1\">Notice that rend does not refer to the same element as begin, but to the element right before it.</p>\n</blockquote>\n<pre><code>map&lt;float,int&gt; m;\nm.insert(pair&lt;float,int&gt;(.1,0));\nm.insert(pair&lt;float,int&gt;(.4,5));\nmap&lt;float,int&gt;::reverse_iterator rend=m.rend();\nmap&lt;float,int&gt;::iterator begin=m.begin();\n</code></pre>\n<p>When I run this, both rend and begin point to the first element of m, (.1,0), when obviously it shouldn't, given the Notice above.  I feel like there's some very obvious mistake I'm making, but I can't figure out what it could be.</p>\n<p>(C++,MSVC2010)</p>\n", "Title": "std::map::rend() returning first element of array, not element before", "CreationDate": "2012-04-21T18:20:26.340", "LastActivityDate": "2012-04-21T19:47:40.543", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "10261705", "Score": "3", "OwnerUserId": "190164", "Tags": "<c++><stl><stdmap>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_10261705_10262413_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5600}, "so_10261705_10261705_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 744}, "so_10261705_10261705_0": {"length": 8, "quality": 0.5333333333333333, "section_id": 744}}, "n3337": {"so_10261705_10262413_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5383}, "so_10261705_10261705_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 733}, "so_10261705_10261705_0": {"length": 8, "quality": 0.5333333333333333, "section_id": 733}}, "n4659": {"so_10261705_10262413_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 7044}, "so_10261705_10261705_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 802}, "so_10261705_10261705_0": {"length": 8, "quality": 0.5333333333333333, "section_id": 802}}}, "10262413": {"Id": "10262413", "PostTypeId": "2", "Body": "<p>I believe the point you are missing is that if you inspect the values using a debugger, the values returned by <code>rend()</code> and <code>begin()</code> <em>will</em> contain the same value. However, the <code>operator*</code> members of the iterator types will still give you access to different objects.</p>\n<p>Technical details: The value returned by <code>rend()</code> cannot point before <code>begin()</code>, because that is not valid. So it was decided that <code>rend()</code> should contain the value of <code>begin()</code> and all other reverse iterators be shifted one position further. The <code>operator*</code> compensates for this and accesses the correct element anyway.</p>\n<p>First paragraph of 24.5.1 Reverse iterators says:</p>\n<blockquote>\n<p id=\"so_10261705_10262413_0\">Class template reverse_iterator is an iterator adaptor that iterates from the end of the sequence defined by its underlying iterator to the beginning of that sequence. The fundamental relation between a reverse iterator and its corresponding iterator i is established by the identity:<br>\n<code>&amp;*(reverse_iterator(i)) == &amp;*(i - 1)</code>.</br></p>\n</blockquote>\n", "LastActivityDate": "2012-04-21T19:47:40.543", "CommentCount": "0", "CreationDate": "2012-04-21T19:47:40.543", "ParentId": "10261705", "Score": "3", "OwnerUserId": "597607"}});