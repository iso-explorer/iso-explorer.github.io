post_cb({"bq_ids": {"n4140": {"so_15267676_15267760_1": {"length": 13, "quality": 0.8125, "section_id": 382}}, "n3337": {"so_15267676_15267760_1": {"length": 13, "quality": 0.8125, "section_id": 373}}, "n4659": {"so_15267676_15267760_1": {"length": 13, "quality": 0.8125, "section_id": 397}}}, "15268749": {"Id": "15268749", "PostTypeId": "2", "Body": "<p><a href=\"https://stackoverflow.com/users/560648/lightness-races-in-orbit\">Lightness Races in Orbit</a> is right. And I think this example would be more concise.</p>\n<pre><code>#include &lt;iostream&gt;  //cout\n#include &lt;string&gt;\n\nint main ()\n{\n    using namespace std;\n    int a = 123;\n    int b = 123;\n//  int       &amp; a_b = a + b; // error!\n    int const &amp; a_b = a + b;\n    cout&lt;&lt;\"hello world!\"&lt;&lt;endl;\n    cout&lt;&lt;a_b&lt;&lt;endl;\n}\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-07T10:30:37.763", "Score": "3", "CreationDate": "2013-03-07T10:30:37.763", "ParentId": "15267676", "CommentCount": "1", "OwnerUserId": "1887273", "LastEditDate": "2017-05-23T12:33:20.057"}, "15267756": {"Id": "15267756", "PostTypeId": "2", "Body": "<p>A temporary bound to a const reference increases the lifetime of the temporary till the lifetime of the constant reference.</p>\n<p><strong>Good Read:</strong> </p>\n<p><em><strong><a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\">GotW #88: A Candidate For the \u201cMost Important const\u201d</a></strong></em></p>\n<hr>\n<p>Yes it is specified in the C++ standard from the time references were introduced.<br>\nSo if you are wondering if this is C++11 feature, no it is not. It already existed in C++03.           </br></p>\n</hr>", "LastActivityDate": "2013-03-07T09:42:31.853", "CommentCount": "0", "CreationDate": "2013-03-07T09:42:31.853", "ParentId": "15267676", "Score": "6", "OwnerUserId": "452307"}, "15267760": {"Id": "15267760", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15267676_15267760_0\">How come this is possible?</p>\n</blockquote>\n<p>Because the standard says so, because it's deemed useful. rvalue references and <code>const</code> lvalue references extend the lifetime of temporaries:</p>\n<blockquote>\n<p id=\"so_15267676_15267760_1\"><code>[C++11: 12.2/5]:</code> <em>[..]</em> The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists\n  for the lifetime of the reference, except <em>[..]</em></p>\n</blockquote>\n<p>and exhaustive wording in <code>[C++11: 8.5.3/5]</code> requires that we shall not bind temporaries to non-<code>const</code> lvalue references.</p>\n<hr>\n<blockquote>\n<p id=\"so_15267676_15267760_2\">Is it specified in the C++ standard?\n  Which version?</p>\n</blockquote>\n<p>Yes. All of them.</p>\n</hr>", "LastEditorUserId": "560648", "LastActivityDate": "2013-03-07T09:52:42.967", "Score": "9", "CreationDate": "2013-03-07T09:42:34.287", "ParentId": "15267676", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2013-03-07T09:52:42.967"}, "15267676": {"ViewCount": "1108", "Body": "<p>After reading <a href=\"https://stackoverflow.com/questions/11164982/stdostringstream-isnt-returning-a-valid-string/11165022#11165022\">this answer</a> from <a href=\"https://stackoverflow.com/users/636019\">ildjarn</a>, I wrote the following example, and it looks like an unnamed temporary object has the same life time as its reference!</p>\n<ul>\n<li>How come this is possible? </li>\n<li>Is it specified in the C++ standard? </li>\n<li>Which version?</li>\n</ul>\n<p><strong>Source code:</strong></p>\n<pre><code>#include &lt;iostream&gt;  //cout\n#include &lt;sstream&gt;   //ostringstream \n\nint main ()\n{\n        std::ostringstream oss;\n        oss &lt;&lt; 1234;\n\n        std::string const&amp; str = oss.str();\n        char        const* ptr = str.c_str();\n\n        // Change the stream content\n        oss &lt;&lt; \"_more_stuff_\";\n        oss.str(\"\"); //reset\n        oss &lt;&lt; \"Beginning\";\n        std::cout &lt;&lt; oss.str() &lt;&lt;'\\n';\n\n        // Fill the call stack\n        // ... create many local variables, call functions...\n\n        // Change again the stream content\n        oss &lt;&lt; \"Again\";\n        oss.str(\"\"); //reset\n        oss &lt;&lt; \"Next should be '1234': \";\n        std::cout &lt;&lt; oss.str() &lt;&lt;'\\n';\n\n        // Check if the ptr is still unchanged\n        std::cout &lt;&lt; ptr &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong>Execution:</strong></p>\n<pre><code>&gt; g++ --version\ng++ (GCC) 4.1.2 20080704 (Red Hat 4.1.2-54)\nCopyright (C) 2006 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n&gt; g++ main.cpp -O3\n&gt; ./a.out\nBeginning\nNext should be '1234':\n1234\n</code></pre>\n", "AcceptedAnswerId": "15267760", "Title": "Reference to an unnamed temporary object (life time)", "CreationDate": "2013-03-07T09:39:25.650", "Id": "15267676", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:16:36.567", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-07T10:30:37.763", "Score": "3", "OwnerUserId": "938111", "Tags": "<c++><reference><temporary><object-lifetime>", "AnswerCount": "3"}});