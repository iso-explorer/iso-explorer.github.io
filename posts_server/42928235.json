post_cb({"bq_ids": {"n4140": {"so_42928235_42928291_2": {"length": 42, "quality": 0.875, "section_id": 3291}, "so_42928235_42928291_3": {"length": 9, "quality": 0.75, "section_id": 3291}, "so_42928235_42928291_4": {"length": 5, "quality": 1.0, "section_id": 3291}}, "n4659": {"so_42928235_42928291_2": {"length": 42, "quality": 0.875, "section_id": 4053}, "so_42928235_42928291_3": {"length": 10, "quality": 0.8333333333333334, "section_id": 4053}, "so_42928235_42928291_4": {"length": 5, "quality": 1.0, "section_id": 4053}}}, "42928291": {"Id": "42928291", "PostTypeId": "2", "LastEditDate": "2017-03-21T13:56:51.727", "CommentCount": "5", "LastEditorUserId": "2079303", "LastActivityDate": "2017-03-21T13:56:51.727", "CreationDate": "2017-03-21T13:16:42.387", "ParentId": "42928235", "Score": "1", "Body": "<blockquote>\n<p id=\"so_42928235_42928291_0\">Why are the values initialized this way?</p>\n</blockquote>\n<p>Default initialized variables of fundamental types and automatic storage duration have an indeterminate value.</p>\n<blockquote>\n<p id=\"so_42928235_42928291_1\">Why is there no random initialization or initialization to zero?</p>\n</blockquote>\n<p>Because the standard doesn't say so, and the compiler implementer chose to not do so. Both randomization and zero initialization are potentially slower than not doing either, so the choice seems logical.</p>\n<p>What the standard does say is that reading an indeterminate value has undefined behaviour (except in few select situations, see the standard quote).</p>\n<p>current standard draft:</p>\n<blockquote>\n<p id=\"so_42928235_42928291_2\">[dcl.init] (12) If no initializer is specified for an object, the object is default-initialized. When storage for an object with automatic or dynamic storage duration is obtained, the object has an indeterminate value, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced ([expr.ass]). [\u2009Note: Objects with static or thread storage duration are zero-initialized, see [basic.start.static]. \u2009\u2014\u2009end note\u2009] If an indeterminate value is produced by an evaluation, the behavior is undefined except in the following cases:</p>\n<ul>\n<li><p id=\"so_42928235_42928291_3\">(12.1) If an indeterminate value of unsigned narrow character type or std\u200b::\u200bbyte type ([cstddef.syn]) is produced by the evaluation of:</p>\n<ul>\n<li>(12.1.1) the second or third operand of a conditional expression,</li>\n<li>(12.1.2) the right operand of a comma expression,</li>\n<li>(12.1.3) the operand of a cast or conversion ([conv.integral], [expr.type.conv], [expr.static.cast], [expr.cast]) to an unsigned narrow character type or std\u200b::\u200bbyte type ([cstddef.syn]), or</li>\n<li>(12.1.4) a discarded-value expression, </li>\n</ul>\n<p id=\"so_42928235_42928291_4\">then the result of the operation is an indeterminate value.</p></li>\n<li>(12.2) If an indeterminate value of unsigned narrow character type or std\u200b::\u200bbyte type is produced by the evaluation of the right operand of a simple assignment operator whose first operand is an lvalue of unsigned narrow character type or std\u200b::\u200bbyte type, an indeterminate value replaces the value of the object referred to by the left operand.</li>\n<li>(12.3) If an indeterminate value of unsigned narrow character type is produced by the evaluation of the initialization expression when initializing an object of unsigned narrow character type, that object is initialized to an indeterminate value.</li>\n<li>(12.4) If an indeterminate value of unsigned narrow character type or std\u200b::\u200bbyte type is produced by the evaluation of the initialization expression when initializing an object of std\u200b::\u200bbyte type, that object is initialized to an indeterminate value. </li>\n</ul>\n</blockquote>\n", "OwnerUserId": "2079303"}, "42928282": {"Id": "42928282", "PostTypeId": "2", "Body": "<p>Your program has Undefined Behaviour, which means the outputs you're getting are completely random (as is the fact that you're getting outputs at all).</p>\n<p>In C++, local variables of non-class types are not initialised automatically. Reading the value of an uninitialised variable is undefined.</p>\n", "Score": "2", "LastActivityDate": "2017-03-21T13:16:18.530", "CreationDate": "2017-03-21T13:16:18.530", "ParentId": "42928235", "CommentCount": "2", "OwnerUserId": "1782465"}, "42928235": {"ViewCount": "303", "Body": "<p>I have the following C++ code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;stdio.h&gt;\n\n\nint main (int argc , char ** argv) \n{\n    int i1;\n    int i2;\n    double d1;\n    double d2;\n    printf(\"i1: %d, i2: %d, d1: %f, d2: %f \\n\", i1, i2, d1, d2);\n}\n</code></pre>\n<p>The output is</p>\n<blockquote>\n<p id=\"so_42928235_42928235_0\">i1: 4195872, i2: 0, d1: 0.000000, d2: 0.000000</p>\n</blockquote>\n<p>Everytime I run the programme I'm getting the same output. Now let's say I'm using the following code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;stdio.h&gt;\n\n\nint main (int argc , char ** argv) \n{\n    int i1;\n    int i2;\n    double d1;\n    double d2;\n    cout &lt;&lt; \"i1: \" &lt;&lt; i1;\n    cout &lt;&lt; \" i2: \" &lt;&lt; i2;\n    cout &lt;&lt; \" d1: \" &lt;&lt; d1;\n    cout &lt;&lt; \" d2: \" &lt;&lt; d2;\n}\n</code></pre>\n<p>Now I'm getting the following output:</p>\n<blockquote>\n<p id=\"so_42928235_42928235_1\">i1: 4196144 i2: 0 d1: 6.95294e-310 d2: 0</p>\n</blockquote>\n<p>The value for d1 changes slightly when I rerun the programme, the other values stay the same.</p>\n<p>Why are the values initialized this way? Why is there no random initialization or initialization to zero?</p>\n", "AcceptedAnswerId": "42928291", "Title": "Initialization of int and double variables", "CreationDate": "2017-03-21T13:14:11.023", "LastActivityDate": "2017-03-21T13:56:51.727", "CommentCount": "1", "PostTypeId": "1", "Tags": "<c++><initialization>", "Id": "42928235", "Score": "0", "OwnerUserId": "1684118", "ClosedDate": "2017-03-21T13:17:20.330", "AnswerCount": "3"}, "42928280": {"Id": "42928280", "PostTypeId": "2", "LastEditDate": "2017-03-21T13:25:21.363", "CommentCount": "2", "LastEditorUserId": "6935629", "LastActivityDate": "2017-03-21T13:25:21.363", "CreationDate": "2017-03-21T13:16:12.900", "ParentId": "42928235", "Score": "1", "Body": "<p>It's <strong>undefined behavior</strong> because uninitialized variables hold the garbage value.</p>\n<blockquote>\n<p id=\"so_42928235_42928280_0\">If you don\u2019t initialize an variable that\u2019s defined inside a function,\n  the variable value remain undefined.That means the element takes on\n  whatever value previously resided at that location in memory.</p>\n</blockquote>\n<p>Refer <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow noreferrer\">cppreference</a>.</p>\n", "OwnerUserId": "6935629"}});