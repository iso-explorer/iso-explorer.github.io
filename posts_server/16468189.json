post_cb({"16468189": {"CommentCount": "2", "ViewCount": "797", "PostTypeId": "1", "LastEditorUserId": "1000282", "CreationDate": "2013-05-09T18:06:47.430", "LastActivityDate": "2013-05-10T16:13:23.770", "Title": "libc++ std::istringstream doesn't thrown exceptions. Bug?", "LastEditDate": "2013-05-10T16:13:23.770", "Id": "16468189", "Score": "6", "Body": "<p>After configuring a <code>std::istringstream</code> to throw exceptions when <code>failbit</code> is set I get no exceptions happening with libc++ (this is under linux with libc++ compiled with support from libcxxrt). I suppose this is a bug in libc++ or libcxxrt:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\ntemplate&lt;typename T&gt; std::istream &amp;getvalue(std::istream &amp;is, T &amp;value, const T &amp;default_value = T())\n{\n    std::stringstream ss;\n    std::string s;\n    std::getline(is, s, ',');\n    ss &lt;&lt; s;\n    if((ss &gt;&gt; value).fail())\n        value = default_value;\n    return is;\n}\n\nint main()\n{\n    std::string s = \"123,456,789\";\n    std::istringstream is(s);\n    unsigned n;\n\n    try\n    {\n        is.exceptions(std::ios::failbit | std::ios::eofbit);\n\n        getvalue(is, n);\n        std::cout &lt;&lt; n &lt;&lt; std::endl;\n\n        getvalue(is, n);\n        std::cout &lt;&lt; n &lt;&lt; std::endl;\n\n        // Disable EOF exception on last bit\n        is.exceptions(std::ios::failbit);\n\n        getvalue(is, n);\n        std::cout &lt;&lt; n &lt;&lt; std::endl;\n\n        // Force Fail reading after EOF\n        getvalue(is, n);\n        std::cout &lt;&lt; n &lt;&lt; std::endl;\n    }\n    catch(std::ios::failure &amp;fail)\n    {\n        std::cout &lt;&lt; \"Fail\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>output for libstdc++:</p>\n<pre><code>123\n456\n789\nFail\n</code></pre>\n<p>libc++/libcxxrt output:</p>\n<pre><code>123\n456\n789\n0\n</code></pre>\n<h3>EDIT</h3>\n<p>Also tested on OS X.</p>\n<p>Bug submitted: <a href=\"http://llvm.org/bugs/show_bug.cgi?id=15949\" rel=\"nofollow\">http://llvm.org/bugs/show_bug.cgi?id=15949</a></p>\n", "Tags": "<c++><language-lawyer><libc++>", "OwnerUserId": "1000282", "AnswerCount": "1"}, "16473878": {"ParentId": "16468189", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>libc++ is responding to 27.7.2.1 [istream]/p4 which describes the <code>basic_istream</code> parse <code>operator&gt;&gt;</code> for <code>unsigned</code>:</p>\n<blockquote>\n<p id=\"so_16468189_16473878_0\">If one of these called functions throws an exception, then unless\n  explicitly noted otherwise, the input function sets badbit in error\n  state. If badbit is on in exceptions(), the input function rethrows\n  the exception without completing its actions, otherwise it does not\n  throw anything and proceeds as if the called function had returned a\n  failure indication.</p>\n</blockquote>\n<p>If:</p>\n<pre><code>is.exceptions(std::ios::failbit | std::ios::badbit);\n</code></pre>\n<p>then the desired behavior is obtained.</p>\n<pre><code>123\n456\n789\nFail\n</code></pre>\n<p><strong>Update</strong></p>\n<p>chico rightly pointed out in the comments below that he expected <code>getline(is, s, ',')</code> to throw, not the <code>unsigned</code> extractor.</p>\n<p>Looking at 21.4.8.9 [string.io]/p7 which describes this <code>getline</code>:</p>\n<blockquote>\n<p id=\"so_16468189_16473878_1\">Effects: Behaves as an unformatted input function (27.7.2.3), except\n  that it does not affect the value returned by subsequent calls to\n  basic_istream&lt;&gt;::gcount(). After constructing a sentry object, if the\n  sentry converts to true, calls str.erase() and then extracts\n  characters from is and appends them to str as if by calling\n  str.append(1, c) until any of the following occurs:  ...</p>\n</blockquote>\n<p>So the question becomes:</p>\n<blockquote>\n<p id=\"so_16468189_16473878_2\">How does an unformatted input function behave?</p>\n</blockquote>\n<p>27.7.2.3 [istream.unformatted]/p1 says:</p>\n<blockquote>\n<p id=\"so_16468189_16473878_3\">Each unformatted input function begins execution by constructing an\n  object of class sentry with the default argument noskipws (second)\n  argument true. If the sentry object returns true, when converted to a\n  value of type bool, the function endeavors to obtain the requested\n  input. Otherwise, if the sentry constructor exits by throwing an\n  exception or if the sentry object returns false, when converted to a\n  value of type bool, the function returns without attempting to obtain\n  any input. In either case the number of extracted characters is set to\n  0; unformatted input functions taking a character array of non-zero\n  size as an argument shall also store a null character (using charT())\n  in the first location of the array. <strong>If an exception is thrown during\n  input then ios::badbit is turned on<sup>315</sup> in *this\u2019s error state.\n  (Exceptions thrown from basic_ios&lt;&gt;::clear() are not caught or\n  rethrown.) If (exceptions()&amp;badbit) != 0 then the exception is\n  rethrown.</strong> It also counts the number of characters extracted. If no\n  exception has been thrown it ends by storing the count in a member\n  object and returning the value specified. In any event the sentry\n  object is destroyed before leaving the unformatted input function.</p>\n<p id=\"so_16468189_16473878_4\">315) This is done without causing an ios::failure to be thrown.</p>\n</blockquote>\n<p>(emphasis added by me for readability purposes)</p>\n<p>So this again appears to indicate that if an exception is desired from this parse operation, <code>badbit</code> has to be set in <code>exceptions</code>.</p>\n", "OwnerUserId": "576911", "LastEditorUserId": "576911", "LastEditDate": "2013-05-10T02:07:29.797", "Id": "16473878", "Score": "4", "CreationDate": "2013-05-10T01:40:19.710", "LastActivityDate": "2013-05-10T02:07:29.797"}, "bq_ids": {"n4140": {"so_16468189_16473878_1": {"section_id": 1861, "quality": 0.9411764705882353, "length": 32}, "so_16468189_16473878_2": {"section_id": 2209, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_4": {"section_id": 2188, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_3": {"section_id": 2208, "quality": 0.9831932773109243, "length": 117}, "so_16468189_16473878_0": {"section_id": 2172, "quality": 1.0, "length": 35}}, "n3337": {"so_16468189_16473878_1": {"section_id": 1855, "quality": 0.9411764705882353, "length": 32}, "so_16468189_16473878_2": {"section_id": 2197, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_4": {"section_id": 2176, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_3": {"section_id": 2196, "quality": 0.9831932773109243, "length": 117}, "so_16468189_16473878_0": {"section_id": 2160, "quality": 1.0, "length": 35}}, "n4659": {"so_16468189_16473878_1": {"section_id": 2033, "quality": 0.9411764705882353, "length": 32}, "so_16468189_16473878_2": {"section_id": 2482, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_4": {"section_id": 2461, "quality": 0.6666666666666666, "length": 4}, "so_16468189_16473878_3": {"section_id": 2481, "quality": 0.9831932773109243, "length": 117}, "so_16468189_16473878_0": {"section_id": 2445, "quality": 1.0, "length": 35}}}});