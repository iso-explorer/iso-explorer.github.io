post_cb({"1429594": {"Id": "1429594", "PostTypeId": "2", "Body": "<p>In a word: no.  You can't prevent an overload of <code>foo</code> being defined with a different signature somewhere else and you also can't prevent virtual functions from being overriden. </p>\n<p>In the C++ world you have to give some degree of trust to people writing code that winds up in your program.</p>\n", "LastActivityDate": "2009-09-15T21:01:04.637", "CommentCount": "7", "CreationDate": "2009-09-15T21:01:04.637", "ParentId": "1429547", "Score": "10", "OwnerUserId": "19563"}, "bq_ids": {"n4140": {"so_1429547_1429617_0": {"length": 5, "quality": 1.0, "section_id": 557}, "so_1429547_1429617_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 558}}, "n3337": {"so_1429547_1429617_0": {"length": 5, "quality": 1.0, "section_id": 548}, "so_1429547_1429617_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 549}}, "n4659": {"so_1429547_1429617_0": {"length": 5, "quality": 1.0, "section_id": 580}, "so_1429547_1429617_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 581}}}, "1429588": {"Id": "1429588", "PostTypeId": "2", "Body": "<p>You cannot.      </p>\n", "LastActivityDate": "2009-09-15T20:59:14.237", "CommentCount": "0", "CreationDate": "2009-09-15T20:59:14.237", "ParentId": "1429547", "Score": "3", "OwnerUserId": "140719"}, "1429617": {"Id": "1429617", "PostTypeId": "2", "Body": "<p>Section 13.1.1 through 13.1.3 of the standard describe the kinds of functions that can <em>not</em> be overloaded:</p>\n<blockquote>\n<p id=\"so_1429547_1429617_0\">Certain function declarations cannot be overloaded:</p>\n<ul>\n<li>Function declarations that differ only in the return type cannot be overloaded.</li>\n<li>Member function declarations with the same name and the same parameter types cannot be overloaded if any of them is a static member function declaration (9.4).</li>\n</ul>\n<p id=\"so_1429547_1429617_1\">Note: as specified in 8.3.5, function declarations that have equivalent parameter declarations declare the same function and therefore cannot be overloaded:</p>\n<ul>\n<li>Parameter declarations that differ only in the use of equivalent typedef \u201ctypes\u201d are equivalent. A typedef is not a separate type, but only a synonym for another type (7.1.3).</li>\n<li>Parameter declarations that differ only in a pointer * versus an array [] are equivalent. That is, the array declaration is adjusted to become a pointer declaration (8.3.5). Only the second and subsequent array dimensions are significant in parameter types (8.3.4).</li>\n<li>Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent. That is, the function type is adjusted to become a pointer to function type (8.3.5).</li>\n<li>Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent. That is, the const and volatile type-specifiers for each parameter type are ignored when determining which function is being declared, defined, or called.</li>\n<li>Two parameter declarations that differ only in their default arguments are equivalent.</li>\n</ul>\n</blockquote>\n<p>Otherwise, the function <em>can</em> be overloaded, and <strong>there is no way to prevent that.</strong></p>\n", "LastActivityDate": "2009-09-15T21:04:43.277", "CommentCount": "0", "CreationDate": "2009-09-15T21:04:43.277", "ParentId": "1429547", "Score": "5", "OwnerUserId": "33345"}, "1429870": {"Id": "1429870", "PostTypeId": "2", "Body": "<p>Do what UncleBens said, <em>and</em> include in the class a constant which is an encrypted checksum of the text in the class, and a function to test it for validity. That way, nobody can change the class. Just a thought (maybe not a very good one).</p>\n<p>As I think about it, that's pretty dumb because the class would need its own text. However, as an alternative, it could read its compiled binary code, and have a checksum for that. I'm getting out on a limb here.</p>\n", "LastEditorUserId": "23771", "LastActivityDate": "2009-09-15T22:16:54.007", "Score": "-1", "CreationDate": "2009-09-15T22:05:59.593", "ParentId": "1429547", "CommentCount": "2", "OwnerUserId": "23771", "LastEditDate": "2009-09-15T22:16:54.007"}, "1429622": {"Id": "1429622", "PostTypeId": "2", "Body": "<p>The only reasonable way would be to give the function C linkage:</p>\n<pre><code>extern \"C\" void foo(int , int);\n</code></pre>\n<p>This works because with C linkage, names aren't mangled, so you can't do any overloading (which relies on encoding the types of arguments into the symbol name).</p>\n<p>Obviously this won't extend to member functions.</p>\n", "LastActivityDate": "2009-09-15T21:05:08.190", "CommentCount": "4", "CreationDate": "2009-09-15T21:05:08.190", "ParentId": "1429547", "Score": "-2", "OwnerUserId": "5963"}, "1429547": {"ViewCount": "2525", "Body": "<p>Is it possible to prevent overloading of user defined functions in C++? Suppose I have a function as:</p>\n<pre><code>void foo(int , int);\n</code></pre>\n<p>Can I prevent foo from being overloaded, and if so how? If I can, can this be extended to prevent overriding of the methods through inheritance?</p>\n", "Title": "How to prevent Overloading?", "CreationDate": "2009-09-15T20:50:48.203", "LastActivityDate": "2009-09-16T08:17:19.523", "CommentCount": "5", "LastEditDate": "2009-09-16T08:17:19.523", "PostTypeId": "1", "OwnerDisplayName": "Rahul", "LastEditorUserId": "140719", "Id": "1429547", "Score": "3", "Tags": "<c++>", "AnswerCount": "6"}, "1429777": {"Id": "1429777", "PostTypeId": "2", "Body": "<p>Make it a static function in a class and tell people not to modify that class?</p>\n", "LastActivityDate": "2009-09-15T21:41:12.003", "CommentCount": "0", "CreationDate": "2009-09-15T21:41:12.003", "ParentId": "1429547", "Score": "2", "OwnerUserId": "155693"}});