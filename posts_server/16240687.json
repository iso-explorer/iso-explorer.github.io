post_cb({"16240790": {"ParentId": "16240687", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><strong>Yes</strong>, the behavior is compliant. </p>\n<p>Per paragraph 6.5.4/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16240687_16240790_0\">For a range-based <code>for</code> statement of the form</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p id=\"so_16240687_16240790_1\">let <em>range-init</em> be equivalent to the expression surrounded by parentheses</p>\n<pre><code>( expression )\n</code></pre>\n<p id=\"so_16240687_16240790_2\">and for a range-based <code>for</code> statement of the form</p>\n<pre><code>for ( for-range-declaration : braced-init-list ) statement\n</code></pre>\n<p id=\"so_16240687_16240790_3\">let <em>range-init</em> be equivalent to the <em>braced-init-list</em>. <strong>In each case, a range-based for statement is equivalent to</strong></p>\n<pre><code>{\n    auto &amp;&amp; __range = range-init;\n    for ( auto __begin = begin-expr,\n        __end = end-expr;\n        __begin != __end;\n        ++__begin ) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}\n</code></pre>\n</blockquote>\n<p>In your case, the returned shared pointer is dereferenced, and the object it points to is bound to the <code>__range</code> reference. However, the shared pointer itself is not copied, nor is it bound to a reference that would prolong its lifetime. Therefore, it goes out of scope. Being the last shared pointer referencing the pointed object, the object gets destroyed too.</p>\n<p>Things would have been different if you had returned your <code>Test</code> object by value, rather than returning a shared pointer:</p>\n<pre><code>Test func() {\n  return Test();\n}\n\nint main() {\n  for (const auto &amp;obj: func()) {\n    std::cout &lt;&lt; obj &lt;&lt; '\\n';\n\n  }\n}\n</code></pre>\n<p>This way, the <code>Test</code> temporary returned by <code>func()</code> is bound to the  <code>__range</code> reference, and its lifetime is prolonged to match the lifetime of the reference. </p>\n<p>Here is a <a href=\"http://ideone.com/JjvQZT\"><strong>live example</strong></a>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-04-26T16:19:03.847", "Id": "16240790", "Score": "13", "CreationDate": "2013-04-26T16:10:48.837", "LastActivityDate": "2013-04-26T16:19:03.847"}, "bq_ids": {"n4140": {"so_16240687_16240790_1": {"section_id": 3906, "quality": 0.8333333333333334, "length": 5}, "so_16240687_16240790_3": {"section_id": 3906, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_16240687_16240790_1": {"section_id": 3766, "quality": 0.8333333333333334, "length": 5}, "so_16240687_16240790_3": {"section_id": 3766, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_16240687_16240790_1": {"section_id": 4792, "quality": 0.6666666666666666, "length": 4}}}, "16240687": {"CommentCount": "0", "AcceptedAnswerId": "16240790", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-04-26T16:03:52.317", "LastActivityDate": "2013-04-26T16:19:03.847", "LastEditDate": "2013-04-26T16:11:09.573", "ViewCount": "936", "FavoriteCount": "2", "Title": "std::shared_ptr not working with range for", "Id": "16240687", "Score": "6", "Body": "<p>I'm trying to iterate over a temporary object in a range for loop. It looks like the object gets desctucted before the loop begins executing. Is this a standard compliant behaviour? I'm using gcc 4.8.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;memory&gt;\n\nstruct Test: std::vector&lt;int&gt; {\n  Test(): std::vector&lt;int&gt;{1,2,3} {\n    std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; '\\n';\n  }\n\n  ~Test() {\n    std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; '\\n';\n  }\n};\n\nstd::shared_ptr&lt;Test&gt; func() {\n  return std::shared_ptr&lt;Test&gt;(new Test);\n}\n\nint main() {\n  for (const auto &amp;obj: *func()) {\n    std::cout &lt;&lt; obj &lt;&lt; '\\n';\n\n  }\n}\n</code></pre>\n<p>The result is as follows:</p>\n<pre><code>Test::Test()\nTest::~Test()\n21770300\n0\n33\n0\n0\n0\n3\n</code></pre>\n", "Tags": "<c++><for-loop><c++11><shared-ptr>", "OwnerUserId": "70514", "AnswerCount": "1"}});