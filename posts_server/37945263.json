post_cb({"37949721": {"ParentId": "37945263", "CommentCount": "0", "Body": "<p>See C++14 standard, 26.8.5: C library [c.math]</p>\n<blockquote>\n<p id=\"so_37945263_37949721_0\"><em>[...]</em> [ Note: The random number generation (26.5) facilities in this standard are often preferable to rand, because rand\u2019s underlying algorithm is unspecified. Use of rand therefore continues\n  to be nonportable, with unpredictable and oft-questionable quality and performance. \u2014 end note ]</p>\n</blockquote>\n<p>So standard states clearly that using rand is not portable. The header <a href=\"http://www.cplusplus.com/reference/random/\" rel=\"nofollow\"></a> provides right away a series of different templates for random number generators, for each the algorithm being dictated and thus being portable. It's then up to you to chose... All but the <code>std::default_random_engine</code>, which is left for the implementation to select again (26.5.5, [10]:</p>\n<blockquote>\n<p id=\"so_37945263_37949721_1\">Remark: The choice of engine type named by this typedef is implementation-defined. <em>[...]</em></p>\n</blockquote>\n", "OwnerUserId": "1312382", "PostTypeId": "2", "Id": "37949721", "Score": "0", "CreationDate": "2016-06-21T16:22:26.307", "LastActivityDate": "2016-06-21T16:22:26.307"}, "37945263": {"CommentCount": "5", "ViewCount": "158", "PostTypeId": "1", "LastEditorUserId": "880584", "CreationDate": "2016-06-21T13:03:46.613", "LastActivityDate": "2016-06-21T19:06:05.010", "Title": "Generate reproducible large number sequences - with pseudo random generator?", "LastEditDate": "2016-06-21T19:06:05.010", "Id": "37945263", "Score": "0", "Body": "<p>I'm using and reusing large number sequences which I (re)generate with <code>rand()</code>. To get different sequences I use <code>srand()</code> with different but known seeds.</p>\n<p>How portable is this approach? Will this working over different platforms with different versions of the libc and compilers and CPUs?</p>\n<p>Are there safer alternatives to this approach?</p>\n<p>Just to clarify: this is <strong>not</strong> for cryptographic usage.</p>\n", "Tags": "<c++><c><random><numbers>", "OwnerUserId": "880584", "AnswerCount": "3"}, "37945506": {"ParentId": "37945263", "CommentCount": "0", "Body": "<p>You are guaranteed to get the same sequence of numbers for a particular seed on a particular implementation.  You are not guaranteed to get the same sequence for a particular seed across different implementations.</p>\n<p>If all you care about is that the sequence is repeatable, you're good.  If you care that the sequence is the same across implementations, you're not.</p>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "37945506", "Score": "4", "CreationDate": "2016-06-21T13:14:35.807", "LastActivityDate": "2016-06-21T13:14:35.807"}, "37945656": {"ParentId": "37945263", "CommentCount": "0", "Body": "<p>This approach is flawed in multiple ways.</p>\n<ul>\n<li><p>It makes your application inherently single threaded.</p></li>\n<li><p>C standard doesn't specifying an algorithm for <code>rand</code>, so it can vary between platforms and compilers.</p></li>\n<li><p>Any external (say, GUI) code can by accident call <code>rand</code>, invalidating your sequence. In C++, it gets even worse. <a href=\"http://www.cplusplus.com/reference/cstdlib/rand\" rel=\"nofollow\">Read <strong>Compatibility</strong> section</a>.</p></li>\n<li><p>Standard <code>rand</code> function is often considered not very good altogether.</p></li>\n</ul>\n<p>For C++, consider using stuff from <code>&lt;random&gt;</code> header, especially some variant of <a href=\"http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine\" rel=\"nofollow\">Mersenne Twister</a>.</p>\n<p>For C, you should probably look for some libraries implementing MT or other good PRNG.</p>\n<p><em>If you want to implement it yourself, <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Random.html\" rel=\"nofollow\">Java Random</a> is both good enough for most cases and easy to implement.</em></p>\n", "OwnerUserId": "2512323", "PostTypeId": "2", "Id": "37945656", "Score": "3", "CreationDate": "2016-06-21T13:20:37.363", "LastActivityDate": "2016-06-21T13:20:37.363"}, "bq_ids": {"n4140": {"so_37945263_37949721_0": {"section_id": 3870, "quality": 0.8076923076923077, "length": 21}, "so_37945263_37949721_1": {"section_id": 3581, "quality": 0.75, "length": 6}}, "n3337": {"so_37945263_37949721_1": {"section_id": 3446, "quality": 0.75, "length": 6}}, "n4659": {"so_37945263_37949721_0": {"section_id": 4495, "quality": 0.8076923076923077, "length": 21}, "so_37945263_37949721_1": {"section_id": 4346, "quality": 0.625, "length": 5}}}});