post_cb({"9674136": {"CommentCount": "0", "ViewCount": "165", "CreationDate": "2012-03-12T20:15:44.453", "LastActivityDate": "2012-03-12T20:19:21.487", "Title": "Inconsistency in definition of STL upper_bound?", "AcceptedAnswerId": "9674190", "PostTypeId": "1", "Id": "9674136", "Score": "0", "Body": "<p>The <a href=\"http://www.sgi.com/tech/stl/upper_bound.html\" rel=\"nofollow\" title=\"Documentation for upper_bound\">documentation for upper_bound</a> states:</p>\n<blockquote>\n<p id=\"so_9674136_9674136_0\">...it attempts to find the element value in an ordered range [first, last)... upper_bound returns the furthermost iterator i in [first, last) such that, for every iterator j in [first, i), value &lt; *j is false. </p>\n</blockquote>\n<p>However, if we have a <code>vector&lt;int&gt; v</code> that contains the numbers 1, 2, and 3, calling <code>upper_bound(v.begin(), v.end(), 5)</code> will return <code>v.end()</code>. But based on the definition, <code>v.end()</code> is not in the range <code>[v.begin, v.end())</code>. There is no such iterator that fits the requirements in the definition. Is the definition just lazy in not explicitly stating what happens in this case?</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "528533", "AnswerCount": "1"}, "9674190": {"ParentId": "9674136", "CommentCount": "4", "Body": "<p>SGI documentation is not relevant \u2013 the <em>C++ standard</em> is what you should be reading. Quoting C++11 \u00a725.4.3.2:</p>\n<blockquote>\n<p id=\"so_9674136_9674190_0\"><em>Returns:</em> The furthermost iterator <code>i</code> in the range <code>[first,last]</code> such that for any iterator <code>j</code> in the range <code>[first,i)</code> the following corresponding conditions hold: <code>!(value &lt; *j)</code> or <code>comp(value, *j) == false</code>.</p>\n</blockquote>\n", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "9674190", "Score": "11", "CreationDate": "2012-03-12T20:19:21.487", "LastActivityDate": "2012-03-12T20:19:21.487"}, "bq_ids": {"n4140": {"so_9674136_9674190_0": {"section_id": 1426, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_9674136_9674190_0": {"section_id": 1420, "quality": 0.7647058823529411, "length": 13}}, "n4659": {"so_9674136_9674190_0": {"section_id": 1546, "quality": 0.7647058823529411, "length": 13}}}});