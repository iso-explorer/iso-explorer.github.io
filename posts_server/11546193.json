post_cb({"11546328": {"Id": "11546328", "PostTypeId": "2", "Body": "<p>It is not limited to run-time behavior. Per ISO/IEC 14882, first edition, 1998-09-01, 1.3.12, in a note (so non-normative): \u201cpermissible undefined behavior ranges from... to behaving during translation or programming execution in a documented manner characteristic of the environment\u201d. In other words, the standard says the implementation may do anything the operating system (or other environment) permits, provided it is documented.</p>\n", "LastActivityDate": "2012-07-18T16:44:00.337", "CommentCount": "1", "CreationDate": "2012-07-18T16:44:00.337", "ParentId": "11546193", "Score": "2", "OwnerUserId": "298225"}, "11546378": {"Id": "11546378", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11546193_11546378_0\">\"<strong>You're all ignoring the actual definition and focusing on the note, The standard imposes <em>no requirements</em>.</strong>\" - @<a href=\"https://stackoverflow.com/users/46642/r-martinho-fernandes\">R.MartinhoFernandes</a></p>\n</blockquote>\n<p><sup>The message above was written by the given user in <em><a href=\"http://chat.stackoverflow.com/rooms/10/loungec\">Lounge&lt;C++&gt;</a></em> and makes a very valid argument; the standard doesn't impose <em>any requirements</em> when it comes to code that invokes <em>undefined behavior</em>.</sup></p>\n<hr>\n<h3>! ! !</h3>\n<p><em>undefined-behavior</em> stretches even to the far corner of parsing the input data (ie. code) by the compiler, as verified with the below quotations from both the <em>C++11</em> and <em>C99</em> standards.</p>\n<p><strong>To answer your question with one sentence</strong>;</p>\n<ul>\n<li><em>undefined behavior</em> is not limited to runtime execution, and it's permissible to crash during compilation <em>\"in a documented manner characteristic of the environment\"</em><sup> 1</sup></li>\n</ul>\n<hr>\n<p><sup><b><em>\"in a documented manner characteristic of the environment\"</em> is a kind of odd statement, you could pretty much write a compiler documenting that it might crash upon any given code (that's invalid) to grant it the possibility to crash whenever it wants to.</b></sup></p>\n<p><sup><sup>1.</sup> quote from the C++11/C99 standards</sup></p>\n<hr>\n<h3><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></h3>\n<blockquote>\n<h3>1.3.24 [defns.undefined]</h3>\n<p id=\"so_11546193_11546378_1\"><em>Undefined behavior</em>; behavior for which this International Standard\n  imposes no requirements</p>\n<p id=\"so_11546193_11546378_2\">[ <em>Note</em>:</p>\n<blockquote>\n<p id=\"so_11546193_11546378_7\">Undefined behavior may be expected\n    when this International Standard omits any explicit definition of\n    behavior or when a program uses an erroneous construct or erroneous\n    data.</p>\n<p id=\"so_11546193_11546378_8\">Permissible undefined behavior ranges from <strong>ignoring the situation completely with unpredictable results</strong>, to <strong>behaving during translation</strong>\n    or <strong>program execution</strong> in a documented manner characteristic of the\n    environment (with or without the issuance of a diagnostic message), to\n    <b>terminating a translation or execution</b> (with the issuance of a\n    diagnostic message).</p>\n<p id=\"so_11546193_11546378_9\">Many erroneous program constructs do not engender undefined behavior;\n    they are required to be diagnosed.</p>\n</blockquote>\n<p id=\"so_11546193_11546378_6\">\u2014 <em>end note</em> ]</p>\n</blockquote>\n<hr>\n<h3><a class=\"post-tag\" href=\"/questions/tagged/c99\" rel=\"tag\" title=\"show questions tagged 'c99'\">c99</a></h3>\n<blockquote>\n<h3>3.4.3 - <b>Undefined Behavior</b></h3>\n<ol>\n<li><p id=\"so_11546193_11546378_10\">behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this &gt;International Standard imposes no requirements</p></li>\n<li><p id=\"so_11546193_11546378_11\">NOTE Possible unde\ufb01ned behavior ranges from <strong>ignoring the situation completely with unpredictable results</strong>, to <strong>behaving during translation\n  or program execution</strong> in a documented manner characteristic of the\n  environment (<strong>with or without the issuance of a diagnostic message</strong>), <strong>to\n  terminating a translation or execution</strong> (with the issuance of a\n  diagnostic message).</p></li>\n</ol>\n</blockquote>\n</hr></hr></hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2012-07-18T17:29:43.323", "Score": "12", "CreationDate": "2012-07-18T16:47:06.290", "ParentId": "11546193", "CommentCount": "2", "OwnerUserId": "1090079", "LastEditDate": "2017-05-23T10:27:29.453"}, "39964670": {"Id": "39964670", "PostTypeId": "2", "Body": "<p>At least some forms of Undefined Behavior may cause the act of compilation itself to behave in ways outside the jurisdiction of the Standard.  For example, the authors of the Standard did not want to preclude the use of something like</p>\n<pre><code>#include `someProg arg`\n</code></pre>\n<p>or</p>\n<pre><code>#pragma exec-include \"someProg arg\"\n</code></pre>\n<p>as a means of running <code>someProg</code> with the given arguments and treat the output of such program as though it would be part of the source text.  Since the the behavior of a programs invoked by such syntax would be outside the jurisdiction of the Standard, such constructs are--from the point of view of the Standard--simply regarded as invoking UB at compile time.</p>\n", "LastActivityDate": "2016-10-10T18:36:34.333", "CommentCount": "0", "CreationDate": "2016-10-10T18:36:34.333", "ParentId": "11546193", "Score": "0", "OwnerUserId": "363751"}, "11546193": {"ViewCount": "474", "Body": "<p>We've all heard the warnings that if you invoke <strong>undefined behaviour</strong> in C or C++, <em>anything at all</em> can happen.</p>\n<p>Is this limited to <em>any runtime behaviour at all</em>, or does this also include any compile-time behaviour? In particular, is a compiler, upon encountering a construct that invokes undefined behaviour, allowed to reject the code (in the absence of other requirements in the standard to do so), or even to crash?</p>\n", "AcceptedAnswerId": "11546378", "Title": "Does \"undefined behaviour\" extend to compile-time?", "CreationDate": "2012-07-18T16:36:54.490", "Id": "11546193", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-10-10T18:36:34.333", "Score": "9", "OwnerUserId": "141719", "Tags": "<c++><c><runtime><undefined-behavior><compile-time>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_11546193_11546378_9": {"length": 9, "quality": 1.0, "section_id": 5768}, "so_11546193_11546340_0": {"length": 4, "quality": 0.8, "section_id": 5768}, "so_11546193_11546378_11": {"length": 24, "quality": 0.8888888888888888, "section_id": 5768}, "so_11546193_11546378_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 5768}, "so_11546193_11546378_7": {"length": 16, "quality": 0.9411764705882353, "section_id": 5768}, "so_11546193_11546378_5": {"length": 9, "quality": 1.0, "section_id": 5768}, "so_11546193_11546340_2": {"length": 7, "quality": 1.0, "section_id": 5768}, "so_11546193_11546378_4": {"length": 26, "quality": 1.0, "section_id": 5768}, "so_11546193_11546340_1": {"length": 51, "quality": 0.9272727272727272, "section_id": 5768}, "so_11546193_11546378_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 5768}, "so_11546193_11546378_8": {"length": 26, "quality": 1.0, "section_id": 5768}}, "n3337": {"so_11546193_11546340_0": {"length": 4, "quality": 0.8, "section_id": 5541}, "so_11546193_11546378_9": {"length": 9, "quality": 1.0, "section_id": 5541}, "so_11546193_11546378_4": {"length": 26, "quality": 1.0, "section_id": 5541}, "so_11546193_11546378_8": {"length": 26, "quality": 1.0, "section_id": 5541}, "so_11546193_11546378_7": {"length": 16, "quality": 0.9411764705882353, "section_id": 5541}, "so_11546193_11546378_5": {"length": 9, "quality": 1.0, "section_id": 5541}, "so_11546193_11546378_11": {"length": 24, "quality": 0.8888888888888888, "section_id": 5541}, "so_11546193_11546340_2": {"length": 7, "quality": 1.0, "section_id": 5541}, "so_11546193_11546340_1": {"length": 51, "quality": 0.9272727272727272, "section_id": 5541}, "so_11546193_11546378_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 5541}, "so_11546193_11546378_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 5541}}, "n4659": {"so_11546193_11546340_0": {"length": 4, "quality": 0.8, "section_id": 7225}, "so_11546193_11546378_9": {"length": 9, "quality": 1.0, "section_id": 7225}, "so_11546193_11546378_4": {"length": 26, "quality": 1.0, "section_id": 7225}, "so_11546193_11546378_8": {"length": 26, "quality": 1.0, "section_id": 7225}, "so_11546193_11546378_7": {"length": 16, "quality": 0.9411764705882353, "section_id": 7225}, "so_11546193_11546378_5": {"length": 9, "quality": 1.0, "section_id": 7225}, "so_11546193_11546378_11": {"length": 24, "quality": 0.8888888888888888, "section_id": 7225}, "so_11546193_11546340_2": {"length": 7, "quality": 1.0, "section_id": 7225}, "so_11546193_11546340_1": {"length": 51, "quality": 0.9272727272727272, "section_id": 7225}, "so_11546193_11546378_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 7225}, "so_11546193_11546378_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 7225}}}, "11546277": {"Id": "11546277", "PostTypeId": "2", "Body": "<p>If the behavior is undefined, the compiler could accept it, reject it, issue a warning, and according to the standard, even crash, hang or install a virus on your computer.</p>\n<p>In practice, that does not mean if you are writing a compiler you should do those things on purpose, but you could, for example, use an algorithm which works on defined cases and crashes or hangs on undefined ones, if the performance advantage justifies it.</p>\n<p>Still, a reputable compiler would avoid that, or at least have it very well documented.</p>\n", "LastEditorUserId": "733760", "LastActivityDate": "2016-10-10T17:38:16.390", "Score": "10", "CreationDate": "2012-07-18T16:41:06.727", "ParentId": "11546193", "CommentCount": "8", "OwnerUserId": "733760", "LastEditDate": "2016-10-10T17:38:16.390"}, "11546340": {"Id": "11546340", "PostTypeId": "2", "Body": "<p>I always love Standard quotes, so if that's what you're looking for, the standard defines undefined behaviour as</p>\n<blockquote>\n<p id=\"so_11546193_11546340_0\">behavior for which this International Standard imposes no requirements</p>\n<p id=\"so_11546193_11546340_1\">[Note: Undefined behavior may be expected when this International Standard omits any explicit definition of behavior for when a program uses an erroneous construct or erroneous data. Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving <strong>during translation or program execution</strong> in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message). Many erroneous program constructs do not engender undefined behavior; they are required to be diagnosed.\n  \u2014end note ]</p>\n</blockquote>\n<p>And \"translation\" is basically going from source to the end product (assembly or whatever). So we can mix those two possibilities and get</p>\n<blockquote>\n<p id=\"so_11546193_11546340_2\">ignoring the situation completely with unpredictable results during translation</p>\n</blockquote>\n<p>So yes, the compiler is free to exhibit undefined behaviour during compilation as well as at runtime.</p>\n", "LastActivityDate": "2012-07-18T16:45:00.520", "CommentCount": "2", "CreationDate": "2012-07-18T16:45:00.520", "ParentId": "11546193", "Score": "1", "OwnerUserId": "726361"}});