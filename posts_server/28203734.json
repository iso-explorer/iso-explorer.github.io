post_cb({"bq_ids": {"n4140": {"so_28203734_28203734_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 49}}, "n3337": {"so_28203734_28203734_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 44}}, "n4659": {"so_28203734_28203734_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 50}}}, "28959123": {"Id": "28959123", "PostTypeId": "2", "Body": "<p>In your quote from the grammar, you have omitted the production for <em>qualified-id</em> which expands to a sequence of <em>unqualified-id</em>s, and <strong>last component</strong> refers to the last of those <em>unqualified-id</em>s.</p>\n<p>The Standard is telling you that\na function template declaration cannot end in a <em>template-id</em>\nin contrast to a partial specialisation of a class template \n</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename T&gt; class A {};\ntemplate&lt;typename T&gt; class A&lt;std::vector&lt;T&gt; &gt; {}; // ends with simple-template-id\n</code></pre>\n<p>even though some components of a function template's <em>qualified-id</em> could be <em>template-id</em>s, as in</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename&gt;\nstruct A {\n    void f();\n};\ntemplate&lt;typename T&gt;\nvoid A&lt;T&gt;::f() {} // cannot end with template-id\n</code></pre>\n", "LastEditorUserId": "4618482", "LastActivityDate": "2015-03-10T08:43:14.873", "Score": "2", "CreationDate": "2015-03-10T08:32:25.833", "ParentId": "28203734", "CommentCount": "1", "OwnerUserId": "4618482", "LastEditDate": "2015-03-10T08:43:14.873"}, "28203734": {"ViewCount": "91", "Body": "<p>\u00a714/2 (emphasis mine)</p>\n<blockquote>\n<p id=\"so_28203734_28203734_0\">A <em>template-declaration</em> can appear only as a namespace scope or class\n  scope declaration. In a function template declaration, the <strong>last\n  component</strong> of the <em>declarator-id</em> shall not be a <em>template-id</em>. [ Note:\n  That last component may be an <em>identifier</em>, an <em>operator-function-id</em>,\n  a <em>conversion-function-id</em>, or a <em>literal-operator-id</em>. In a class\n  template declaration, if the class name is a <em>simple-template-id</em>, the\n  declaration declares a class template partial specialization (14.5.5).\n  \u2014end note ]</p>\n</blockquote>\n<p>Note that <em>declarator-id</em> is defined in the grammar (N4140) as shown below:</p>\n<p><em>declarator-id</em>:<br>\n\u00a0\u00a0\u00a0\u00a0...<sub><em>opt</em></sub>\u00a0\u00a0\u00a0<em>id-expression</em> </br></p>\n<p><em>id-expression</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>unqualified-id</em><br>\n\u00a0\u00a0\u00a0\u00a0<em>qualified-id</em> </br></br></p>\n<p><em>unqualified-id</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>identifier</em><br>\n\u00a0\u00a0\u00a0\u00a0<em>operator-function-id</em><br>\n\u00a0\u00a0\u00a0\u00a0<em>conversion-function-id</em><br>\n\u00a0\u00a0\u00a0\u00a0<em>literal-operator-id</em><br>\n\u00a0\u00a0\u00a0\u00a0~ <em>class-name</em><br>\n\u00a0\u00a0\u00a0\u00a0~ <em>decltype-specifier</em><br>\n\u00a0\u00a0\u00a0\u00a0<em>template-id</em> </br></br></br></br></br></br></br></p>\n<p>Given that, in a function template declaration, a <em>declarator-id</em> is an identifier, an <em>operator-function-id</em>, a <em>conversion-function-id</em>, or a <em>literal-operator-id</em>, what does it mean the expression \"last component\" above?  </p>\n", "Title": "What is the meaning of the words \"last component\" in \u00a714/2?", "CreationDate": "2015-01-28T22:33:26.190", "LastActivityDate": "2015-07-25T20:09:07.837", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-25T20:09:07.837", "LastEditorUserId": "3204551", "Id": "28203734", "Score": "2", "OwnerUserId": "1042389", "Tags": "<c++><templates><c++11><language-lawyer><c++14>", "AnswerCount": "1"}});