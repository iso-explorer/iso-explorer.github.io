post_cb({"8380104": {"Id": "8380104", "PostTypeId": "2", "Body": "<p>It's not valid, in the general case. <code>Foo()</code> is a temporary which will be dead as soon as <code>bar</code> returns. MSVC will incorrectly accept it, as an extension.</p>\n", "LastActivityDate": "2011-12-05T01:30:05.030", "CommentCount": "1", "CreationDate": "2011-12-05T01:30:05.030", "ParentId": "8380049", "Score": "2", "OwnerUserId": "298661"}, "8380049": {"ViewCount": "231", "Body": "<p>If I have a <code>class Foo</code> and a method with the prototype <code>void bar(Foo* foo)</code>. Is it okay to do: <code>bar(&amp;Foo());</code>?</p>\n<p>I know it compiles and works, but since I'm relatively new to C++, I was wondering whether the instance created will be correctly destructed after usage, or if I have to worry about anything else when doing that.</p>\n", "AcceptedAnswerId": "8380094", "Title": "C++: Passing pointer to a class while constructing it", "CreationDate": "2011-12-05T01:22:58.473", "Id": "8380049", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2011-12-05T02:24:39.287", "Score": "2", "OwnerUserId": "1056003", "Tags": "<c++><pointers><constructor>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_8380049_8380094_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6066}}, "n3337": {"so_8380049_8380094_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5834}}, "n4659": {"so_8380049_8380094_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 7562}}}, "8380369": {"Id": "8380369", "PostTypeId": "2", "Body": "<p>If you are using native C++, then you can disable the language extensions in MSVC2010.</p>\n<p>Project-&gt;Properties-&gt;C/C++-&gt;Language-&gt;Disable Language Extensions.</p>\n<pre><code>struct Foo\n{\n};\n\nvoid bar(Foo* foo)\n{\n}\n\n\nint main()\n{\n    bar(&amp;Foo());\n}\n</code></pre>\n<p><strong>Output:</strong> </p>\n<p>1&gt;------ Build started: Project: Test, Configuration: Release Win32 ------\n1&gt;  Test.cpp\n1&gt;Test.cpp(16): error C2102: '&amp;' requires l-value\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</p>\n", "LastActivityDate": "2011-12-05T02:24:39.287", "CommentCount": "0", "CreationDate": "2011-12-05T02:24:39.287", "ParentId": "8380049", "Score": "1", "OwnerUserId": "124797"}, "8380094": {"Id": "8380094", "PostTypeId": "2", "Body": "<p>That's not even valid C++. Some compilers may be silly and accept it, but they shouldn't do it. You cannot take the address of a temporary.</p>\n<p>This restriction is given in section \u00a75.3.1 of the C++ standard:</p>\n<blockquote>\n<p id=\"so_8380049_8380094_0\">The result of the unary <code>&amp;</code> operator is a pointer to its\n  operand. The operand shall be an lvalue or a <em>qualified-id</em>.</p>\n</blockquote>\n<p>Temporaries are prvalues, so they cannot have their address taken.</p>\n<p>Now, assuming your compiler accepts this, the pointer will be valid while the function call runs, <em>but only</em> while it runs. Once it returns the temporary is destroyed, so any pointers to it that still exist (like, if the function stored it) are invalid.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2011-12-05T01:50:40.973", "Score": "5", "CreationDate": "2011-12-05T01:28:08.993", "ParentId": "8380049", "CommentCount": "12", "OwnerUserId": "46642", "LastEditDate": "2011-12-05T01:50:40.973"}, "8380181": {"Id": "8380181", "PostTypeId": "2", "Body": "<p>Ok.. I can see only one reason for this.. If you had to decide between using a pointer or a local, then this would be an (ugly) approach. \nIf you want a local, then your call would work.. If however you planned on using a passed in one, then that too would work.. </p>\n<p>A more logical approach would be to have a function override with no parameters.</p>\n<pre><code>void bar(){ Foo f;  bar(&amp;f);} \nvoid bar(Foo * ifoo){...}\n</code></pre>\n<p>Personally I'd never do what you did.. but here's why it should compile and why it shouldn't.</p>\n", "LastActivityDate": "2011-12-05T01:43:55.310", "Score": "0", "CreationDate": "2011-12-05T01:43:55.310", "ParentId": "8380049", "CommentCount": "6", "OwnerUserId": "31325", "CommunityOwnedDate": "2011-12-05T05:44:34.810"}, "8380108": {"Id": "8380108", "PostTypeId": "2", "Body": "<p>Are you sure the code will compile? With gcc you'll get <code>error: taking address of temporary</code>.</p>\n<p>The reason why you <em>shouldn't</em> (and with some compilers <em>can't</em>) take the address of a temporary is because it'll go out of scope (therefore being destroyed/deconstructed) and the address passed to <code>bar</code> won't be that of a real <code>Foo</code> object that you have permission to access.</p>\n", "LastActivityDate": "2011-12-05T01:30:20.303", "CommentCount": "4", "CreationDate": "2011-12-05T01:30:20.303", "ParentId": "8380049", "Score": "1", "OwnerUserId": "998299"}});