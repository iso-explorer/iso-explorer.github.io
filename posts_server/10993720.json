post_cb({"10997184": {"ParentId": "10993720", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_10993720_10997184_0\">Which compiler is right then according to C++ standard?</p>\n</blockquote>\n<p>Both are correct. This is an ill-formed program. Emphasis mine:</p>\n<blockquote>\n<p id=\"so_10993720_10997184_1\">N3290 14.6\u00b69<br>\n  If a type used in a non-dependent name is incomplete at the point at which a template is defined but is complete at the point at which an instantiation is done, and if the completeness of that type affects whether or not the program is well-formed or affects the semantics of the program, <strong>the program is ill-formed; no diagnostic is required</strong>.</br></p>\n</blockquote>\n<p>That clang++ and other compilers do issue a diagnostic here is a nice-to-have added feature, but a diagnosis is not mandatory. That clause \"the program is ill-formed; no diagnostic is required\" gives a compiler developer free reign to do just about anything in such circumstances and still be compliant.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "10997184", "Score": "11", "CreationDate": "2012-06-12T12:59:11.663", "LastActivityDate": "2012-06-12T12:59:11.663"}, "10993720": {"CommentCount": "2", "CreationDate": "2012-06-12T09:19:37.050", "PostTypeId": "1", "AcceptedAnswerId": "10997184", "LastEditorUserId": "738811", "LastActivityDate": "2012-06-12T12:59:11.663", "LastEditDate": "2012-06-12T09:28:44.027", "ViewCount": "1771", "FavoriteCount": "3", "Title": "Forward declaration of class used in template function is not compiled by clang++", "Id": "10993720", "Score": "12", "Body": "<p>There is this code:</p>\n<pre><code>class A;\n\ntemplate &lt;class T&gt;\nvoid fun() {\n   A a;\n}\n\nclass A { \npublic: \n   A() {  } \n};\n\nint main() { \n   fun&lt;int&gt;(); \n   return 0;\n}\n</code></pre>\n<p>g++ 4.5 and g++ 4.7 compiles this without error. But clang++ 3.2 (trunk) gives this error:</p>\n<pre><code>main.cpp:5:6: error: variable has incomplete type 'A'\n   A a;\n     ^\nmain.cpp:1:7: note: forward declaration of 'A'\nclass A;\n      ^\n</code></pre>\n<p>Which compiler is right then according to C++ standard?</p>\n", "Tags": "<c++><templates><g++><forward-declaration><clang++>", "OwnerUserId": "738811", "AnswerCount": "4"}, "10995035": {"ParentId": "10993720", "CommentCount": "1", "Body": "<p>Comeau's compiler does not like it either:</p>\n<pre><code>\"ComeauTest.c\", line 5: error: incomplete type is not allowed\n     A a;\n       ^\n</code></pre>\n<p>However my attempts at finding chapter and verse in the C++ standard were fruitless. It seems hidden in between the lines and interactions of \"point of instantiation\", \"name resolution\". Paragraphs 14.6/8 and 14.6/9 of the 2003 standard seem relevant.</p>\n", "OwnerUserId": "341065", "PostTypeId": "2", "Id": "10995035", "Score": "0", "CreationDate": "2012-06-12T10:42:40.867", "LastActivityDate": "2012-06-12T10:42:40.867"}, "10995476": {"ParentId": "10993720", "CommentCount": "1", "Body": "<p><code>clang++</code> is using the correct behavior, this is described in section <code>4.6/9</code> of the standard (<em>n1905</em>). </p>\n<hr>\n<blockquote>\n<p id=\"so_10993720_10995476_0\"><strong><code>Templates  14.6/9  Name resolution</code></strong></p>\n<p id=\"so_10993720_10995476_1\">If a name does not depend on a template-parameter (as defined in\n  <em>14.6.2</em>), a declaration (or set of declarations) for that name shall be in scope at the point where the name appears in the template\n  definition; the name is bound to the declaration (or declarations)\n  found at that point and this binding is not affected by declarations\n  that are visible at the point of instantiation.</p>\n</blockquote>\n<hr>\n<p>To put things in simpler terms; if the name is <strong>not</strong> dependent on a template-parameter it should be in scope where the definition is found; therefore you'll need to define <code>A</code> before your definition of <code>template&lt;typename T&gt; void fun ()</code>.</p>\n</hr></hr>", "OwnerUserId": "1090079", "PostTypeId": "2", "Id": "10995476", "Score": "1", "CreationDate": "2012-06-12T11:11:20.250", "LastActivityDate": "2012-06-12T11:11:20.250"}, "10993955": {"ParentId": "10993720", "CommentCount": "1", "Body": "<p>Clang is correct, as far as I know. At your function fun, you do not know the size of A, and since your allocating an A, you need to know it's size. In my opinion, gcc is way to forgiving here.</p>\n", "OwnerUserId": "1008428", "PostTypeId": "2", "Id": "10993955", "Score": "5", "CreationDate": "2012-06-12T09:33:45.557", "LastActivityDate": "2012-06-12T09:33:45.557"}, "bq_ids": {"n4140": {"so_10993720_10997184_1": {"section_id": 175, "quality": 0.9166666666666666, "length": 22}, "so_10993720_10995476_1": {"section_id": 177, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_10993720_10997184_1": {"section_id": 169, "quality": 0.9166666666666666, "length": 22}, "so_10993720_10995476_1": {"section_id": 171, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_10993720_10997184_1": {"section_id": 180, "quality": 0.5416666666666666, "length": 13}, "so_10993720_10995476_1": {"section_id": 182, "quality": 0.9655172413793104, "length": 28}}}});