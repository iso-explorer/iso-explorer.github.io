post_cb({"bq_ids": {"n4140": {"so_24161253_24161758_0": {"length": 22, "quality": 1.0, "section_id": 391}, "so_24161253_24161758_1": {"length": 37, "quality": 0.8809523809523809, "section_id": 391}}, "n3337": {"so_24161253_24161758_0": {"length": 22, "quality": 1.0, "section_id": 382}, "so_24161253_24161758_1": {"length": 37, "quality": 0.8809523809523809, "section_id": 382}}, "n4659": {"so_24161253_24161758_0": {"length": 22, "quality": 1.0, "section_id": 408}, "so_24161253_24161758_1": {"length": 37, "quality": 0.8809523809523809, "section_id": 408}}}, "24161758": {"Id": "24161758", "PostTypeId": "2", "Body": "<p>It is a conversion function which will never be called implicitly. The Standard actually goes into some depth about this. 12.3.2/1:</p>\n<blockquote>\n<p id=\"so_24161253_24161758_0\">A conversion function is never used to convert a (possibly cv-qualified) object to the (possibly cv-qualified) same object type (or a reference to it), to a (possibly cv-qualified) base class of that type (or a reference to it), or to (possibly cv-qualified) void.</p>\n</blockquote>\n<p>And in a footnote,</p>\n<blockquote>\n<p id=\"so_24161253_24161758_1\">These conversions are considered as standard conversions for the purposes of overload resolution (13.3.3.1, 13.3.3.1.4) and therefore initialization (8.5) and explicit casts (5.2.9). A conversion to void does not invoke any conversion function (5.2.9). Even though never directly called to perform a conversion, <strong>such conversion functions can be declared and can potentially be reached through a call to a virtual conversion function in a base class.</strong></p>\n</blockquote>\n<p>Also, conversion functions are still normal functions and can be called explicitly by name.</p>\n<p>The note about virtual functions applies to code like this:</p>\n<pre><code>class B;\n\nstruct A {\n    virtual operator B() const = 0;\n};\n\nstruct B : A\n{\n    public:\n        operator B() const{ return B(); } // virtual override\n\n    private:\n        int m_i;\n};\n\nA const &amp; q = B(); // q has dynamic type B, static type A\nB r = q; // Convert A to B using B::operator B()\n</code></pre>\n<p>Pedantic note: \"conversion operator\" is poor terminology. These are known as <em>conversion functions</em> and they are not considered to be a case of operator overloading, despite the <code>operator</code> keyword.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2014-06-12T00:49:24.020", "Score": "13", "CreationDate": "2014-06-11T11:27:19.143", "ParentId": "24161253", "CommentCount": "9", "OwnerUserId": "153285", "LastEditDate": "2014-06-12T00:49:24.020"}, "24161292": {"Id": "24161292", "PostTypeId": "2", "Body": "<p>It's a conversion operator. It allows you to cast an object of type <code>B</code> into an object of type <code>B</code>.</p>\n", "LastEditorUserId": "1872046", "LastActivityDate": "2014-06-11T11:13:46.773", "Score": "1", "CreationDate": "2014-06-11T11:03:00.610", "ParentId": "24161253", "CommentCount": "4", "OwnerUserId": "1872046", "LastEditDate": "2014-06-11T11:13:46.773"}, "24161253": {"ViewCount": "621", "Body": "<pre><code>class B\n{\n    public:\n        operator B() const{ }    // What is this and what is the purpose?\n\n    private:\n        int m_i;\n};\n</code></pre>\n<p>So the question is, is that a conversion operator or constructor operator and what is the use of it? Where to use it?</p>\n", "AcceptedAnswerId": "24161758", "Title": "Is this a constructor operator or conversion operator?", "CreationDate": "2014-06-11T11:01:24.397", "Id": "24161253", "CommentCount": "16", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-06-12T00:49:24.020", "Score": "13", "OwnerUserId": "2235661", "Tags": "<c++>", "AnswerCount": "2"}});