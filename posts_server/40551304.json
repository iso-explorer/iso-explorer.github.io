post_cb({"40551660": {"ParentId": "40551304", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_40551304_40551660_0\">Is this an expected behaviour or is this a bug/feature in g++?</p>\n</blockquote>\n<p>It's a QoI issue, as are all warnings like this. gcc 7 <em>does</em> issue a warning for <code>bar()</code>, so while it's not a bug to not issue a warning it's more of a missed feature in gcc 6.2. </p>\n<blockquote>\n<p id=\"so_40551304_40551660_1\">Will C++17's <code>[[ nodiscard ]]</code> behave the same?</p>\n</blockquote>\n<p>This is also implementation defined. There is a non-normative note in the standard in [dcl.attr.nodiscard]:</p>\n<blockquote>\n<p id=\"so_40551304_40551660_2\">Appearance of a\n  nodiscard call as a potentially-evaluated discarded-value expression (Clause 5) is discouraged unless explicitly\n  cast to void. <strong>Implementations are encouraged to issue a warning in such cases.</strong> This is typically because\n  discarding the return value of a nodiscard call has surprising consequences.</p>\n</blockquote>\n<p>Implementations are not <em>required</em> to issue a warning in this case. But they will likely try to do so. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "40551660", "Score": "2", "CreationDate": "2016-11-11T15:56:34.587", "LastActivityDate": "2016-11-11T15:56:34.587"}, "40551304": {"CommentCount": "1", "AcceptedAnswerId": "40551660", "LastEditDate": "2016-11-11T16:16:14.353", "LastEditorUserId": "2508253", "CreationDate": "2016-11-11T15:38:51.513", "LastActivityDate": "2016-11-11T16:16:14.353", "PostTypeId": "1", "ViewCount": "117", "Title": "gnu::warn_unused_result attribute ignored if return class has destructor", "Id": "40551304", "OwnerUserId": "2508253", "Body": "<p>I want to warn a user if he/she does not save a return value of some function, but it does not work if the function returns a class which has a non-default destructor.</p>\n<p>Assume the following code:</p>\n<pre><code>struct A {};\nstruct B { ~B() {} };\n\n[[ gnu::warn_unused_result ]]\nA foo() { return A{}; }\n\n[[ gnu::warn_unused_result ]]\nB bar() { return B{}; }\n\nint main()\n{\n    foo(); // warning\n    bar(); // no warning\n    return 0;\n}\n</code></pre>\n<p>When compiled with g++ 6.2.1, only <code>foo()</code> generates a warning:</p>\n<pre><code>$ g++ -Wall -Wextra ./test.cpp \n./test.cpp: In function \u2018int main()\u2019:\n./test.cpp:13:9: warning: ignoring return value of \u2018A foo()\u2019, declared with attribute warn_unused_result [-Wunused-result]\n     foo();\n         ^\n</code></pre>\n<p>I understand that a call to a destructor of <code>B</code> might be considered a \"usage of a result\", but the questions are:</p>\n<ul>\n<li>Is this an expected behaviour or is this a bug/feature in g++?</li>\n<li>Is there a way to force a compiler to issue a warning in this case?</li>\n<li>Will C++17's <code>[[ nodiscard ]]</code> behave the same?</li>\n</ul>\n", "Tags": "<c++><g++><language-lawyer>", "Score": "3", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_40551304_40551660_2": {"section_id": 6993, "quality": 0.9629629629629629, "length": 26}}}});