post_cb({"27519691": {"ParentId": "27519315", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-12-17T06:39:23.363", "Score": "0", "LastEditorUserId": "14860", "LastEditDate": "2014-12-18T06:07:23.367", "Id": "27519691", "OwnerUserId": "14860", "Body": "<p>I'm not sure how much support the latest <code>xlC 14.1</code> (or whatever version you're using) has for <code>std::to_string()</code>.</p>\n<p>If the support is incomplete, C has a hideous double macro method <sup>(a)</sup> of turning <code>__LINE__</code> into a C-string so that you can just use <code>std::string</code>, the same as you have for the <code>__FILE__</code> and <code>message</code> items, and it appears the C++ pre-processor has stayed faithful to its hideous roots :-)</p>\n<p>The code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#define STR1(x) # x\n#define STR2(x) STR1(x)\nint main(void) {\n    char x[] = __FILE__;\n    char y[] = STR2(__LINE__);\n    printf(\"file = %s, line = %s\\n\",x,y);\n    return 0;\n}\n</code></pre>\n<p>outputs:</p>\n<pre><code>file = qq.c, line = 6\n</code></pre>\n<p>showing that the <code>__LINE__</code> has been successfully morphed into a C-string value.</p>\n<p>You should be able to use a similar method in your macro:</p>\n<pre><code>#define STR1(x) # x\n#define STR2(x) STR1(x)\n#define LOG_MSG(message) CLogManager::LogMessage( \\\n    CLogManager::CurrentDateTime() + \" - \" + \\\n    std::string(__FILE__) + \"[\" + \\\n    std::string(STR2(__LINE__)) + \"] : \" + \\\n    std::string(message) + \"\\n\")\n\nint main() {\n    LOG_MSG (\"My hovercraft is full of eels\");\n    return 0;\n}\n</code></pre>\n<p>Pre-processing that with <code>g++ -E qq.cpp</code> gives you:</p>\n<pre><code>  CLogManager::LogMessage( CLogManager::CurrentDateTime() + \" - \" + std::string(\"qq.cpp\") + \"[\" + std::string(\"10\") + \"] : \" + std::string(\"My hovercraft is full of eels\") + \"\\n\");\n</code></pre>\n<p>(showing relevant line only) which seems to match what you want.</p>\n<p>As a side note however, since you seem to be okay adding C-strings like <code>\"[\"</code> <em>without</em> needing to construct strings explicitly, I'm not sure that you <em>need</em> the <code>std::string()</code> calls at all for those. You still need the C macro hack to turn the integer into a C-string but, once that's been done, you should just be able to use that as-is.</p>\n<p>Changing the final macro to:</p>\n<pre><code>#define LOG_MSG(message) CLogManager::LogMessage( \\\n    CLogManager::CurrentDateTime() + \" - \" + \\\n    __FILE__ + \"[\" + \\\n    STR2(__LINE__) + \"] : \" + \\\n    message + \"\\n\")\n</code></pre>\n<p>will give you:</p>\n<pre><code>CLogManager::LogMessage( CLogManager::CurrentDateTime() + \" - \" + \"qq.cpp\" + \"[\" + \"10\" + \"] : \" + \"My hovercraft is full of eels\" + \"\\n\");\n</code></pre>\n<p>Whether that's a good <em>idea,</em> I'll leave to the wider community but it at least gets around your immediate problem. I'd probably place the whole lot inside an <code>#if/#else/#endif</code> so that C++11 compilers that know about <code>std::to_string()</code> can use the more accepted approach.</p>\n<hr>\n<p><sup>(a)</sup> If you're interested in <em>why</em> this works, I'll explain below.</p>\n<p>The <code>#</code> and <code>##</code> macro operators actually take precedence over the recursive nature of macro replacement, as per <code>C11 6.10.3.4 /1</code>:</p>\n<blockquote>\n<p id=\"so_27519315_27519691_0\">After all parameters in the replacement list have been substituted and # and ##\n  processing has taken place, all placemarker preprocessing tokens are removed. The\n  resulting preprocessing token sequence is then rescanned, along with all subsequent\n  preprocessing tokens of the source file, for more macro names to replace.</p>\n</blockquote>\n<p>That means that the code:</p>\n<pre><code>#define STR(x) # x\nSTR(__LINE__)\n</code></pre>\n<p>will actually result in <code>\"__LINE__\"</code> because the <code>#</code> happens first and, once that's happened, the <code>__LINE__</code> within the string literal is not subject to further replacement. By doing the two-step process:</p>\n<pre><code>#define STR1(x) # x\n#define STR2(x) STR1(x)\nSTR2(__LINE__)\n</code></pre>\n<p>the first level of replacement turns <code>STR2(__LINE__)</code> into <code>STR1(3)</code> because <code>__LINE__</code> on its own is subject to expansion.</p>\n<p>Then the second level turns <code>STR1(3)</code>, via <code># 3</code>, into <code>\"3\"</code>.</p>\n<p>Perhaps the following may help:</p>\n<pre><code>#define STR1(x) # x\n#define STR2a(x) STRn(x)\n#define STR2b(x) STR1(x)\n\nSTR1(__LINE__)\nSTR2a(__LINE__)\nSTR2b(__LINE__)\n</code></pre>\n<p>The output of that, annotated, is:</p>\n<pre><code>\"__LINE__\"  - stringise, no further processing of __LINE__ inside literal.\nSTRn(6)     - shows first stage of replacement, line number replacement.\n\"7\"         - shows full process.\n</code></pre>\n</hr>", "LastActivityDate": "2014-12-18T06:07:23.367"}, "bq_ids": {"n4140": {"so_27519315_27519691_0": {"section_id": 530, "quality": 0.9411764705882353, "length": 32}}, "n3337": {"so_27519315_27519691_0": {"section_id": 521, "quality": 0.9411764705882353, "length": 32}}, "n4659": {"so_27519315_27519691_0": {"section_id": 551, "quality": 0.9411764705882353, "length": 32}}}, "27519315": {"CommentCount": "4", "ViewCount": "329", "PostTypeId": "1", "LastEditorUserId": "1013719", "CreationDate": "2014-12-17T06:07:45.480", "LastActivityDate": "2014-12-18T06:07:23.367", "Title": "std::to_string is not declared compile error in aix", "AcceptedAnswerId": "27519691", "LastEditDate": "2014-12-17T06:09:13.897", "Id": "27519315", "Score": "0", "Body": "<p>I am compiling my code in AIX env.. it givs me error \"std::to_string\" is not declared \nsuccessfully compiled same code in Windows.</p>\n<pre><code>define LOG_MSG(message) CLogManager::LogMessage(CLogManager::CurrentDateTime() + \" - \" + std::string(__FILE__) + \"[\" + std::to_string(static_cast&lt;_ULonglong&gt;(__LINE__)) + \"] : \" + std::string(message) + \"\\n\")\n</code></pre>\n<p>This is the macro and i am using this as </p>\n<pre><code>LOG_MSG(\" ** BEGIN StorePasswordFromFile()\");\n</code></pre>\n<p>This macro is for logging purpose </p>\n", "Tags": "<c++><linux><c++11><aix>", "OwnerUserId": "2991556", "AnswerCount": "1"}});