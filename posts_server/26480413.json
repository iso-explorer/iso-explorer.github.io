post_cb({"bq_ids": {"n4140": {"so_26480413_26481317_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5999}, "so_26480413_26481317_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 6123}}, "n3337": {"so_26480413_26481317_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5767}, "so_26480413_26481317_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 5887}}, "n4659": {"so_26480413_26481317_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 7620}}}, "26480413": {"ViewCount": "147", "Body": "<p>I can copy from a non-primitive type variable by copy constructor and pass it through rvalue reference function argument. </p>\n<p>But how can do this with primitive type variables?</p>\n<p>for example:</p>\n<pre><code>#include &lt;cassert&gt;\n#include &lt;iostream&gt;\nstruct MyClass\n{\n   int m = 0;\n};\nMyClass&amp; f(MyClass&amp; x)\n{\n   x.m++;\n   return x;\n}\ninline MyClass f(MyClass&amp;&amp; x)\n{\n   return f(x);\n}\nint&amp; f(int&amp; x)\n{\n   x++;\n   return x;\n}\ninline int f(int&amp;&amp; x)\n{\n   return f(x);\n}\nint main()\n{\n   MyClass x1;\n   auto y1 = f(MyClass(x1)); // Calls f(MyClass&amp;&amp;)\n   // Result: x1.m = 0, y1.m = 1\n\n   int x2 = 0;\n   auto y2 = f(int(x2)); // Calls f(int&amp;)\n   // Result: x2 = 1, y2 = 1\n\n   std::cout &lt;&lt; x1.m &lt;&lt; x2; // Result in VS2013: '01' But '00' in gcc and clang!\n   assert(x1.m == x2); // FAILED in VS2013!!!\n   return 0;\n}\n</code></pre>\n<p>The result in Visual Studio 2013 is '01' with assertion failed.</p>\n<p><a href=\"http://rextester.com/CAPY87169\" rel=\"nofollow\">http://rextester.com/CAPY87169</a></p>\n", "AcceptedAnswerId": "26481317", "Title": "How to copy from primitive type variables when passing through rvalue reference function arguments", "CreationDate": "2014-10-21T06:39:24.793", "Id": "26480413", "CommentCount": "2", "LastEditDate": "2014-10-23T05:10:23.943", "PostTypeId": "1", "LastEditorUserId": "1505939", "LastActivityDate": "2014-10-23T05:10:23.943", "Score": "1", "OwnerUserId": "1132686", "Tags": "<c++><visual-studio-2013><rvalue-reference><primitive-types><lvalue>", "AnswerCount": "1"}, "26481317": {"Id": "26481317", "PostTypeId": "2", "Body": "<p>Your code is correct and this seems to be a bug in VS2013.</p>\n<p>Simpler MCVE:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid f(int&amp; x)  { std::cout &lt;&lt; \"f(lv)\\n\"; }\nvoid f(int&amp;&amp; x) { std::cout &lt;&lt; \"f(rv)\\n\"; }\n\nint main()\n{\n   int x2 = 0;\n   f( int(x2) );\n   f( (int)x2 );\n}\n</code></pre>\n<p>Output should be:</p>\n<pre><code>f(rv)\nf(rv)\n</code></pre>\n<p><a href=\"http://rextester.com/CLIAX67021\" rel=\"nofollow\">MSVC online tester</a></p>\n<p>Note that further testing shows that the bug is really that <code>(int)x2</code> is treated as an lvalue by MSVC; it's not a bug with MSVC's extension to allow rvalues to bind to lvalue references (since the rvalue reference is a better match anyway).</p>\n<p>You may be able to fix this by using the <code>/Za</code> switch.</p>\n<hr>\n<p>The expression <code>int(x2)</code> is covered by C++14 [expr.type.conv]/2 (C++11 has the same numbering):</p>\n<blockquote>\n<p id=\"so_26480413_26481317_0\">A <em>simple-type-specifier (7.1.6.2)</em> or <em>typename-specifier (14.6)</em> followed by a parenthesized <em>expression-list</em> constructs a value of the specified type given the expression list. If the expression list is a single expression, the type conversion expression is equivalent (in definedness, and if defined in meaning) to the corresponding cast expression (5.4). </p>\n</blockquote>\n<p>The corresponding cast expression is:</p>\n<blockquote>\n<p id=\"so_26480413_26481317_1\">The result of the expression (T) cast-expression is of type T. The result is an lvalue if T is an lvalue reference type or an rvalue reference to function type and an xvalue if T is an rvalue reference to object type; <strong>otherwise the result is a prvalue</strong>.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "1505939", "LastActivityDate": "2014-10-23T02:51:59.203", "Score": "3", "CreationDate": "2014-10-21T07:40:31.717", "ParentId": "26480413", "CommentCount": "1", "OwnerUserId": "1505939", "LastEditDate": "2014-10-23T02:51:59.203"}});