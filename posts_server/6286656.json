post_cb({"bq_ids": {"n4140": {"so_6286656_6286739_0": {"length": 72, "quality": 0.9, "section_id": 438}}, "n3337": {"so_6286656_6286739_0": {"length": 72, "quality": 0.9, "section_id": 429}}, "n4659": {"so_6286656_6286739_0": {"length": 72, "quality": 0.9, "section_id": 458}}}, "6286739": {"Id": "6286739", "PostTypeId": "2", "Body": "<p>No, initialization order is defined by the declaration order in the class itself.</p>\n<p>From the C++ standard <code>12.6.2 [class.base.init] p5</code>:</p>\n<blockquote>\n<p id=\"so_6286656_6286739_0\">Initialization shall proceed in the following order:<br>\n  \u2014 First, and only for the constructor of the most derived class as described below, virtual base classes shall be initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base class names in the derived class base-specifier-list.<br>\n  \u2014 Then, direct base classes shall be initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).<br>\n<strong>\u2014 Then, nonstatic data members shall be initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</strong><br>\n  \u2014 Finally, the body of the constructor is executed.<br>\n  [Note: the declaration order is mandated to ensure that base and member subobjects are destroyed in the reverse order of initialization. ]</br></br></br></br></br></p>\n</blockquote>\n", "LastEditorUserId": "500104", "LastActivityDate": "2011-06-09T00:24:57.740", "Score": "11", "CreationDate": "2011-06-09T00:14:08.447", "ParentId": "6286656", "CommentCount": "0", "OwnerUserId": "500104", "LastEditDate": "2011-06-09T00:24:57.740"}, "6286656": {"ViewCount": "1187", "Body": "<p>Is this behavior well-defined?</p>\n<pre><code>class Foo\n{\n    int A, B;\n\n    public:\n\n    Foo(int Bar): B(Bar), A(B + 123)\n    {\n    }\n};\n\nint main()\n{\n    Foo MyFoo(0);\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "6286720", "Title": "Dependencies in Initialization Lists", "CreationDate": "2011-06-08T23:59:08.343", "Id": "6286656", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-06-19T08:28:53.980", "LastEditorUserId": "2932052", "LastActivityDate": "2014-06-19T08:28:53.980", "Score": "16", "OwnerUserId": "497934", "Tags": "<c++><initialization><undefined-behavior><standards-compliance><ctor-initializer>", "AnswerCount": "3"}, "6286720": {"Id": "6286720", "PostTypeId": "2", "Body": "<p>No, it's undefined. <code>A</code> will be initialized first (it's first in the class definition), and it uses uninitialized <code>B</code>.</p>\n<p>Class members are initialized in the order they appear in the class definition, irrespective of their order in the initialization list. Indeed, it is bad practice to mismatch the member definition order with the initialization list order.</p>\n<p>If your instance of <code>Foo</code> happened to have static duration, like in <code>Foo f(0); int main(){}</code>, the behavior is well-defined. Objects with static duration are zero-initialized before any other initialization takes place; in that case, <code>A</code> and <code>B</code> will be 0 when the constructor is run. After that, though, the behavior is the same: first <code>A</code> then <code>B</code>, giving <code>A</code> a value of 123 and <code>B</code> a value of <code>Bar</code> (still ugly).</p>\n", "LastEditorUserId": "87234", "LastActivityDate": "2011-06-09T00:23:49.160", "Score": "16", "CreationDate": "2011-06-09T00:11:08.700", "ParentId": "6286656", "CommentCount": "4", "OwnerUserId": "87234", "LastEditDate": "2011-06-09T00:23:49.160"}, "6286737": {"Id": "6286737", "PostTypeId": "2", "Body": "<p>Initialization is done in the order of appearance in the declaration, not the order you write it in the constructor. </p>\n<p>Look at this question, it's somewhat similar:\n<a href=\"https://stackoverflow.com/questions/1589950/initializer-list-argument-evaluation-order\">Initializer list *argument* evaluation order</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-06-09T00:13:54.573", "Score": "2", "CreationDate": "2011-06-09T00:13:54.573", "ParentId": "6286656", "CommentCount": "0", "OwnerUserId": "618400", "LastEditDate": "2017-05-23T12:07:16.513"}});