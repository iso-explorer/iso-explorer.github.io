post_cb({"25200887": {"Id": "25200887", "PostTypeId": "2", "Body": "<p>if I recall correctly </p>\n<blockquote>\n<p id=\"so_25200678_25200887_0\">Specialization must be declared before the first use that would cause implicit instantiation, in every translation unit where such use occurs.</p>\n</blockquote>\n<p>(taken from <a href=\"http://en.cppreference.com/w/cpp/language/template_specialization\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/template_specialization</a>) so it seems GCC is much more permissive than clang...</p>\n", "LastActivityDate": "2014-08-08T10:03:57.083", "CommentCount": "0", "CreationDate": "2014-08-08T10:03:57.083", "ParentId": "25200678", "Score": "1", "OwnerUserId": "186193"}, "25201322": {"Id": "25201322", "PostTypeId": "2", "Body": "<p>The program is wrong. C++11 14.7.3/6 says:</p>\n<blockquote>\n<p id=\"so_25200678_25201322_0\">If a template [...] is explicitly specialized then that specialization shall be declared before the first use of that specialization that would cause an implicit instantiation\n  to take place</p>\n</blockquote>\n<p>Your code uses it in <code>main</code>, causing an implicit instantiation there, then declares the  specialisation later, as the error message describes.</p>\n", "LastActivityDate": "2014-08-08T10:24:38.963", "CommentCount": "0", "CreationDate": "2014-08-08T10:24:38.963", "ParentId": "25200678", "Score": "3", "OwnerUserId": "204847"}, "25200678": {"ViewCount": "588", "Body": "<p>Such code can be compiled by GCC, but clang 3.5 fails.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nclass C{\npublic:\n  const static int x;\n};\n\nint main(){\n  cout &lt;&lt; C&lt;int&gt;::x;\n}\n\ntemplate&lt;&gt;\nconst int C&lt;int&gt;::x = 4;\n</code></pre>\n<p>Clang returns message: </p>\n<pre><code>hello.cpp:15:19: error: explicit specialization of 'x' after instantiation\nconst int C&lt;int&gt;::x = 4;\n                  ^\nhello.cpp:11:19: note: implicit instantiation first required here\n  cout &lt;&lt; C&lt;int&gt;::x;\n                  ^\n</code></pre>\n<p>Is the error in code, or in clang compiler? Does it fulfill the standard, or GCC is more permissive and compiles non-standard code?</p>\n", "AcceptedAnswerId": "25201322", "Title": "Static member initialization after instantiation in clang", "CreationDate": "2014-08-08T09:53:20.647", "Id": "25200678", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-08-08T10:24:38.963", "Score": "5", "OwnerUserId": "1067435", "Tags": "<c++><gcc><clang>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_25200678_25200887_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 268}, "so_25200678_25201322_0": {"length": 16, "quality": 1.0, "section_id": 268}}, "n3337": {"so_25200678_25200887_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 259}, "so_25200678_25201322_0": {"length": 16, "quality": 1.0, "section_id": 259}}, "n4659": {"so_25200678_25200887_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 275}, "so_25200678_25201322_0": {"length": 16, "quality": 1.0, "section_id": 275}}}, "25201127": {"Id": "25201127", "PostTypeId": "2", "Body": "<pre><code>int main(){\n  cout &lt;&lt; C&lt;int&gt;::x;       // 1\n}\n\ntemplate&lt;&gt;\nconst int C&lt;int&gt;::x = 4;   // 2\n</code></pre>\n<p>When compiler compiles 1, it tries to specialize <code>C&lt;int&gt;</code> from <code>template &lt;typename T&gt; class C</code>. Since your template specializing is not read by compiler yet, compiler specializes <code>C&lt;int&gt;</code> implicitly. So, <code>C&lt;int&gt;::x</code> is also specialized by compiler.</p>\n<p>And compiling 2, the <code>C&lt;int&gt;::x</code> is <em>already</em> specialized by compiler. You're trying specialize it twice, so it fails.</p>\n<p>There's <a href=\"http://ideone.com/5dg633\" rel=\"nofollow\">live example</a> which is correct. Code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nclass C{\npublic:\n  const static int x;\n};\n\ntemplate&lt;&gt;\nconst int C&lt;int&gt;::x = 4;\n\nint main(){\n  cout &lt;&lt; C&lt;int&gt;::x;\n}\n</code></pre>\n", "LastActivityDate": "2014-08-08T10:14:36.587", "CommentCount": "0", "CreationDate": "2014-08-08T10:14:36.587", "ParentId": "25200678", "Score": "1", "OwnerUserId": "2729109"}, "25200964": {"Id": "25200964", "PostTypeId": "2", "Body": "<p>Standard tells that you need to declare specialization before using it.</p>\n<p>So the standard behavior would be to have your declare your template intialization before the main function. </p>\n<p>Some compilers allow more freedom in some cases, and it seems that in this scenario gcc allows a non-standard declaration.</p>\n", "LastActivityDate": "2014-08-08T10:06:59.650", "CommentCount": "0", "CreationDate": "2014-08-08T10:06:59.650", "ParentId": "25200678", "Score": "0", "OwnerUserId": "746569"}});