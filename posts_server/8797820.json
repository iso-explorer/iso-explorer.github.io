post_cb({"bq_ids": {"n4140": {"so_8797820_8798409_2": {"length": 24, "quality": 1.0, "section_id": 456}}, "n3337": {"so_8797820_8798409_2": {"length": 24, "quality": 1.0, "section_id": 447}}, "n4659": {"so_8797820_8798409_2": {"length": 24, "quality": 1.0, "section_id": 479}}}, "8797820": {"ViewCount": "1264", "Body": "<p>Looking here on StackOverflow I found out that on Clang++ when using C++11 standard, if you have defined a move constructor to your class, the implicit constructor generation is disabled, i.e. copy constructor is \"explicted deleted\".</p>\n<p>Is there any way to disable this behavior?</p>\n<p>Also, is this behavior standardized? Because I don't have the same behavior in GCC.</p>\n", "AcceptedAnswerId": "8798409", "Title": "Disable \"deletion of copy constructor when move constructor is avaliable\" on Clang", "CreationDate": "2012-01-10T02:23:24.167", "Id": "8797820", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-01-10T15:31:17.030", "LastEditorUserId": "636019", "LastActivityDate": "2012-01-10T15:31:17.030", "Score": "0", "OwnerUserId": "809384", "Tags": "<c++><c++11><clang><clang++>", "AnswerCount": "1"}, "8798409": {"Id": "8798409", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8797820_8798409_0\">Is there any way to disable this behavior?</p>\n</blockquote>\n<p>No.  But you can always:</p>\n<pre><code>A(const A&amp;) = default;\n</code></pre>\n<p>Though I'm unsure if clang currently fully implements defaulted copy constructors.</p>\n<blockquote>\n<p id=\"so_8797820_8798409_1\">Also, is this behavior standardized?</p>\n</blockquote>\n<p>Yes.  [class.copy]/p7:</p>\n<blockquote>\n<p id=\"so_8797820_8798409_2\">If the class definition does not explicitly declare a copy\n  constructor, one is declared implicitly. If the class definition\n  declares a move constructor or move assignment operator, the\n  implicitly declared copy constructor is defined as deleted; ...</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_8797820_8798409_3\">Because I don't have the same behavior in GCC.</p>\n</blockquote>\n<p>Which version?  I would've guessed that the latest gcc version had the same behavior as clang.  But I do not have it available to experiment with.</p>\n", "LastActivityDate": "2012-01-10T04:04:57.200", "CommentCount": "2", "CreationDate": "2012-01-10T04:04:57.200", "ParentId": "8797820", "Score": "8", "OwnerUserId": "576911"}});