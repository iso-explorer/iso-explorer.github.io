post_cb({"5369794": {"ParentId": "5369770", "CommentCount": "1", "Body": "<p>Section 6.5.8.6 of the C standard says:</p>\n<blockquote>\n<p id=\"so_5369770_5369794_0\">Each of the operators &lt; (less than), &gt;\n  (greater than), &lt;= (less than or equal\n  to), and &gt;= (greater than or equal to)\n  shall yield 1 if the specified\n  relation is true and 0 if it is\n  false.) The result has type int.</p>\n</blockquote>\n", "Id": "5369794", "PostTypeId": "2", "OwnerDisplayName": "user97370", "Score": "16", "CreationDate": "2011-03-20T16:34:32.060", "LastActivityDate": "2011-03-20T16:34:32.060"}, "5369770": {"CommentCount": "6", "AcceptedAnswerId": "5369783", "PostTypeId": "1", "LastEditorUserId": "638231", "CreationDate": "2011-03-20T16:30:41.953", "LastActivityDate": "2013-04-12T08:57:16.403", "LastEditDate": "2011-03-20T19:14:48.707", "ViewCount": "79195", "FavoriteCount": "18", "Title": "bool to int conversion", "Id": "5369770", "Score": "79", "Body": "<p>How portable is this conversion. Can I be sure that both assertions pass?</p>\n<pre><code>int x = 4&lt;5;\nassert(x==1);\n\nx = 4&gt;5;\nassert(x==0);\n</code></pre>\n<p>Don't ask why. I know that it is ugly. Thank you.</p>\n", "Tags": "<c++><c><c99>", "OwnerUserId": "638231", "AnswerCount": "4"}, "5370024": {"ParentId": "5369770", "CommentCount": "2", "Body": "<p>There seems to be no problem since the int to bool cast is done implicitly. This works in Microsoft Visual C++, GCC and Intel C++ compiler. No problem in either C or C++.</p>\n", "OwnerUserId": "200820", "PostTypeId": "2", "Id": "5370024", "Score": "2", "CreationDate": "2011-03-20T17:08:52.943", "LastActivityDate": "2011-03-20T17:08:52.943"}, "5369783": {"ParentId": "5369770", "PostTypeId": "2", "CommentCount": "5", "Body": "<pre><code>int x = 4&lt;5;\n</code></pre>\n<p>Completely portable. Standard conformant. <code>bool</code> to <code>int</code> conversion is implicit!</p>\n<p>\u00a74.7/4 from the C++ Standard says (Integral <em>Conversion</em>)</p>\n<blockquote>\n<p id=\"so_5369770_5369783_0\">If the source type is bool, the value <strong><code>false</code> is converted to zero</strong> and\n  the value <strong><code>true</code> is converted to one</strong>.</p>\n</blockquote>\n<hr>\n<p>As for C, as far as I know there is no <code>bool</code> in C. (before 1999) So <code>bool</code> to <code>int</code> conversion is relevant in C++ only. In C, <code>4&lt;5</code> evaluates to <code>int</code> value, in this case the value is <code>1</code>,  <code>4&gt;5</code>  would evaluate to <code>0</code>.</p>\n<p>EDIT: Jens in the comment said, C99 has <code>_Bool</code> type. <code>bool</code> is a macro defined in <code>stdbool.h</code> header file. <code>true</code> and <code>false</code> are also macro defined in <code>stdbool.h</code>.</p>\n<p>\u00a77.16 from C99 says,</p>\n<blockquote>\n<p id=\"so_5369770_5369783_1\">The macro <strong><code>bool</code></strong> expands to _Bool.</p>\n<p id=\"so_5369770_5369783_2\">[..] <strong><code>true</code></strong> which expands to the integer constant <strong><code>1</code></strong>, <strong><code>false</code></strong>\n  which expands to the integer constant <strong><code>0</code></strong>,[..]</p>\n</blockquote>\n</hr>", "OwnerUserId": "415784", "LastEditorUserId": "1219006", "LastEditDate": "2013-04-12T08:57:16.403", "Id": "5369783", "Score": "136", "CreationDate": "2011-03-20T16:32:35.447", "LastActivityDate": "2013-04-12T08:57:16.403"}, "bq_ids": {"n4140": {"so_5369770_5369794_0": {"section_id": 6149, "quality": 0.6666666666666666, "length": 14}, "so_5369770_5369783_0": {"section_id": 33, "quality": 1.0, "length": 11}}, "n3337": {"so_5369770_5369794_0": {"section_id": 5912, "quality": 0.6666666666666666, "length": 14}, "so_5369770_5369783_0": {"section_id": 30, "quality": 1.0, "length": 11}}, "n4659": {"so_5369770_5369794_0": {"section_id": 7646, "quality": 0.6190476190476191, "length": 13}, "so_5369770_5369783_0": {"section_id": 33, "quality": 1.0, "length": 11}}}, "5369851": {"ParentId": "5369770", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>You tagged your question [C] and [C++] at the same time. The results will be consistent between the languages, but the structure of the the answer is different for each of these languages.</p>\n<p>In C language your examples has no relation to <code>bool</code> whatsoever (that applies to C99 as well). In C language relational operators do not produce <code>bool</code> results. Both <code>4 &gt; 5</code> and <code>4 &lt; 5</code> are expressions that produce results of type <code>int</code> with values <code>0</code> or <code>1</code>. So, there's no \"bool to int conversion\" of any kind taking place in your examples in C. </p>\n<p>In C++ relational operators do indeed produce <code>bool</code> results. <code>bool</code> values are convertible to <code>int</code> type, with <code>true</code> converting to <code>1</code> and <code>false</code> converting to <code>0</code>. This is guaranteed by the language.</p>\n<p>P.S. C language also has a dedicated boolean type <code>_Bool</code> (macro-aliased as <code>bool</code>), and its integral conversion rules are essentially the same as in C++. But nevertheless this is not relevant to your specific examples in C. Once again, relational operators in C always produce <code>int</code> (not <code>bool</code>) results regardless of the version of the language specification.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2011-03-20T18:08:17.547", "Id": "5369851", "Score": "35", "CreationDate": "2011-03-20T16:41:48.370", "LastActivityDate": "2011-03-20T18:08:17.547"}});