post_cb({"17807124": {"ViewCount": "4879", "Body": "<p>I have been trying to compile a project (which is fine using gcc/g++) with clang and compilation stuck on a template invocation.\n I've tried to create the simplest similar piece of code exhibiting the same error message. Here it is:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;utility&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint A( double in )\n{\n  return 1;\n}\n\nint A( int in )\n{\n  return 1;\n}\n\n\ntemplate&lt;class M, class T&gt;\nM test(T input, M (fun) (T) )\n{\n  return fun( input );\n}\n\n\n\nint main( int argc, const char *argv[] )\n{\n  cout &lt;&lt; test( (int) 1, A ) &lt;&lt; test( (double) 1.2, A ) &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>The error from clang (appears twice of course):</p>\n<pre><code>error: no matching function for call to 'test'\ncandidate template ignored: couldn't infer template argument 'M'\n</code></pre>\n<p>Gcc doesn't complain.\nPlease note M is the return type and is always \"int\".</p>\n<p>Does someone know which is right and why?</p>\n<p>Thanks</p>\n", "AcceptedAnswerId": "17808857", "Title": "Clang \" couldn't infer template argument \" whereas gcc / g++ can. Which is right?", "CreationDate": "2013-07-23T10:05:14.533", "Id": "17807124", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-07-30T00:41:47.787", "Score": "19", "OwnerUserId": "2609989", "Tags": "<c++><templates><gcc><clang>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17807124_17808857_0": {"length": 15, "quality": 1.0, "section_id": 339}, "so_17807124_17936554_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 336}}, "n3337": {"so_17807124_17808857_0": {"length": 15, "quality": 1.0, "section_id": 329}, "so_17807124_17936554_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 326}}, "n4659": {"so_17807124_17808857_0": {"length": 15, "quality": 1.0, "section_id": 348}, "so_17807124_17936554_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 345}}}, "17936554": {"Id": "17936554", "PostTypeId": "2", "Body": "<p>g++ is wrong. From C++11 [temp.deduct.type]p5:</p>\n<blockquote>\n<p id=\"so_17807124_17936554_0\">The non-deduced contexts are: [...]\n  - A function parameter for which argument deduction cannot be done because the associated function argument is [...] a set of overloaded functions, and [...] more than one function matches the function parameter type</p>\n</blockquote>\n<p>This determination is made without regard to template parameters that might have been deduced elsewhere, so the fact that <code>T</code> must deduce as <code>int</code> is not relevant here. This makes the entire parameter <code>M (fun)(T)</code> a non-deduced context. Therefore <code>M</code> cannot be deduced, just as Clang claims.</p>\n<p>g++ appears to incorrectly be using the '<code>T</code> = <code>int</code>' deduction from the first function parameter when determining whether the second parameter is a non-deduced context. Reversing the order of the function parameters causes g++ to reject the code too:</p>\n<pre><code>int A(double);\nint A(int);\ntemplate&lt;class M, class T&gt;\nM test(M (fun) (T), T input) {\n  return fun( input );\n}\nint main( int argc, const char *argv[]) {\n  test(A, 1);\n  test(A, 1.2); \n}\n</code></pre>\n", "LastActivityDate": "2013-07-30T00:41:47.787", "CommentCount": "2", "CreationDate": "2013-07-30T00:41:47.787", "ParentId": "17807124", "Score": "8", "OwnerUserId": "1041090"}, "17808857": {"Id": "17808857", "PostTypeId": "2", "Body": "<p>My previous answer (now deleted) was wrong. Clang is wrong.</p>\n<p>The compiler should be able to deduce the type <code>M</code> because the function argument is <code>M(fun)(T)</code>. Note that there is no <code>M</code> in the function pointer argument list, so this corresponds to the <code>T()</code> (C++11) / <code>T(*)()</code> (C++93) in 14.8.2.5:</p>\n<blockquote>\n<p id=\"so_17807124_17808857_0\">where <code>(T)</code> represents a <em>parameter-type-list</em> where at least one parameter type contains a <code>T</code>, and <strong><code>()</code> represents a <em>parameter-type-list</em> where no parameter type contains a <code>T</code>.</strong></p>\n</blockquote>\n", "LastActivityDate": "2013-07-23T11:25:32.003", "CommentCount": "7", "CreationDate": "2013-07-23T11:25:32.003", "ParentId": "17807124", "Score": "2", "OwnerUserId": "774499"}});