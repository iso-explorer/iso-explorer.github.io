post_cb({"4796856": {"Id": "4796856", "PostTypeId": "2", "Body": "<p>If you do not choose an inheritance, C++ defaults to <code>private</code> inheritance in the same way class members default to <code>private</code> access for classes.</p>\n", "LastActivityDate": "2011-01-25T17:32:59.770", "CommentCount": "0", "CreationDate": "2011-01-25T17:32:59.770", "ParentId": "4796789", "Score": "1", "OwnerUserId": "570081"}, "4796789": {"ViewCount": "16445", "Body": "<p>If I have for example two classes <code>A</code> and <code>B</code>, such that class <code>B</code> inherits <code>A</code> as follows:</p>\n<p><code>class B: public A</code></p>\n<p>In this case, I'm doing <code>public</code> inheritance.</p>\n<p>If I write the previous code as follows:</p>\n<p><code>class B: A</code></p>\n<p>What type of inheritance will I be doing here (i.e; public)? In other words, what is the default access specifier?</p>\n<p>Just a side question here. Do I call the previous line of codes <code>statements</code>? Especially that I remember I read in the <em>C++ Without Fear: A Beginner's Guide That Makes You Feel Smart</em> book that <code>statements</code> are that that end with <code>;</code>. What do you think about that?</p>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "4797014", "Title": "Default inheritance access specifier", "CreationDate": "2011-01-25T17:27:18.663", "Id": "4796789", "CommentCount": "8", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2011-01-25T19:30:00.197", "LastEditorUserId": "588855", "LastActivityDate": "2017-11-15T13:49:56.540", "Score": "26", "OwnerUserId": "588855", "Tags": "<c++><inheritance>", "AnswerCount": "9"}, "4797290": {"Id": "4797290", "PostTypeId": "2", "Body": "<p>the default access specifier is an important differentiator between classes and structs. It is public by default for structs and private by default for classes.</p>\n", "LastActivityDate": "2011-01-25T18:17:44.300", "CommentCount": "0", "CreationDate": "2011-01-25T18:17:44.300", "ParentId": "4796789", "Score": "0", "OwnerUserId": "248643"}, "4796853": {"Id": "4796853", "PostTypeId": "2", "Body": "<p>If you use <code>class</code> to define your class, the default access specifier will be <code>private</code>. (I think it's wrong, too.) If you use <code>struct</code>, however, it will be <code>public</code>. </p>\n<p>And class definitions are declarations, I think. A statement is what translates into actual code (unless optimized away, anyway).<br>\nHowever, a mildly exotic feature of C and C++ is that expressions are statements. That's why <code>3+4;</code> is a syntactically legal statement in C++ (although many compilers will warn about it having no effect). While it is obviously nonsense in this case, in general expressions are evaluated for their side effects. (An obvious example is discarding a function's return value. You call the function not to obtain a result, but for its side effects.) </br></p>\n", "LastEditorUserId": "140719", "LastActivityDate": "2011-01-25T17:43:47.137", "Score": "2", "CreationDate": "2011-01-25T17:32:56.830", "ParentId": "4796789", "CommentCount": "0", "OwnerUserId": "140719", "LastEditDate": "2011-01-25T17:43:47.137"}, "42330977": {"Id": "42330977", "PostTypeId": "2", "Body": "<p>The default type of the inheritance is <strong>private</strong> in C++.</p>\n<pre><code>class B:A\n{};\n</code></pre>\n<p>is equivalent to </p>\n<pre><code>class B: private A\n{};\n</code></pre>\n", "LastActivityDate": "2017-02-19T18:14:59.153", "CommentCount": "1", "CreationDate": "2017-02-19T18:14:59.153", "ParentId": "4796789", "Score": "0", "OwnerUserId": "2456048"}, "4797014": {"Id": "4797014", "PostTypeId": "2", "Body": "<p>Just a small addition to all the existing answers: the default type of the inheritance depends on the inheriting type (B), not on the one that is being inherited (A). For example:</p>\n<pre><code>class A {};\nstruct B: /* public */ A {};\n\nstruct A {};\nclass B: /* private */ A {};\n</code></pre>\n", "LastActivityDate": "2011-01-25T17:50:32.217", "CommentCount": "1", "CreationDate": "2011-01-25T17:50:32.217", "ParentId": "4796789", "Score": "50", "OwnerUserId": "509868"}, "bq_ids": {"n4140": {"so_4796789_47309154_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6679}, "so_4796789_47309154_0": {"length": 19, "quality": 0.95, "section_id": 6679}}, "n3337": {"so_4796789_47309154_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6434}, "so_4796789_47309154_0": {"length": 19, "quality": 0.95, "section_id": 6434}}, "n4659": {"so_4796789_47309154_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 8154}, "so_4796789_47309154_0": {"length": 19, "quality": 0.95, "section_id": 8154}}}, "39902345": {"Id": "39902345", "PostTypeId": "2", "Body": "<p>AS other casting problem you have</p>\n<pre><code>class A { virtual void test() = 0; };\nclass B : virtual public A { virtual void testb() {} };\nclass C : virtual public A { virtual void testc() {} };\nclass D : public B, public C {\n virtual void test() override {}\n}\n\nvoid main() {\n   D d;\n   void* v = &amp;d;\n   A* a = &amp;d;\n\n   ((D*)A)-&gt;test(); //OK\n   ((D*)v)-&gt;test(); //undefined behavior (that call testb() in vtable logic at 1st inheritance position)\n   dynamic_cast&lt;D*&gt;(v)-&gt;test(); //compile error cast from void* not permitted\n\n   //resolution\n   void* x = a;\n   ((D*)x)-&gt;test(); //OK but as you can see, you must to store a* in x*\n\n}\n</code></pre>\n", "LastActivityDate": "2016-10-06T17:36:00.117", "CommentCount": "0", "CreationDate": "2016-10-06T17:36:00.117", "ParentId": "4796789", "Score": "0", "OwnerUserId": "6933496"}, "47309154": {"Id": "47309154", "PostTypeId": "2", "Body": "<p>The \"type\" of inheritance depends on how the class is defined. There are default access specifiers applied to inheritance. From the C++ standard:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.access.base#2\" rel=\"nofollow noreferrer\">[class.access.base]/2</a></p>\n<blockquote>\n<p id=\"so_4796789_47309154_0\">In the absence of an access-specifier for a base class, public is\n  assumed when the derived class is defined with the class-key <code>struct</code>\n  and private is assumed when the class is defined with the class-key\n  <code>class</code>. [\u2009Example:</p>\n<pre><code>class B { /* ... */ };\nclass D1 : private B { /* ... */ };\nclass D2 : public B { /* ... */ };\nclass D3 : B { /* ... */ };             // B private by default\nstruct D4 : public B { /* ... */ };\nstruct D5 : private B { /* ... */ };\nstruct D6 : B { /* ... */ };            // B public by default\nclass D7 : protected B { /* ... */ };\nstruct D8 : protected B { /* ... */ };\n</code></pre>\n<p id=\"so_4796789_47309154_1\">Here B is a public base of D2, D4, and D6, a private base of D1, D3,\n  and D5, and a protected base of D7 and D8. \u2009\u2014\u2009end example\u2009]</p>\n</blockquote>\n", "LastActivityDate": "2017-11-15T13:49:56.540", "CommentCount": "0", "CreationDate": "2017-11-15T13:49:56.540", "ParentId": "4796789", "Score": "0", "OwnerUserId": "817643"}, "4796849": {"Id": "4796849", "PostTypeId": "2", "Body": "<p>It's private for class and public for struct.</p>\n<p>Side answer: No, these are <em>definitions</em> of the class according to the standard.</p>\n", "LastActivityDate": "2011-01-25T17:32:17.330", "CommentCount": "0", "CreationDate": "2011-01-25T17:32:17.330", "ParentId": "4796789", "Score": "9", "OwnerUserId": "277176"}, "41480371": {"Id": "41480371", "PostTypeId": "2", "Body": "<p>When you inherit a class from another class, then default access specifier is private. </p>\n<pre><code>#include &lt;stdio.h&gt;\n\nclass Base {\npublic:\nint x;\n};\n\nclass Derived : Base { }; // is equilalent to class Derived : private Base       {}\n\nint main()\n{\n Derived d;\n d.x = 20; // compiler error becuase inheritance is private\n getchar();\n return 0;\n}\n</code></pre>\n<p>When you inherit a structure from another class, then default access specifier is public.</p>\n<pre><code>#include &lt; stdio.h &gt;\n  class Base {\n    public:\n      int x;\n  };\n\nstruct Derived: Base {}; // is equilalent to struct Derived : public Base {}\n\nint main() {\n  Derived d;\n  d.x = 20; // works fine becuase inheritance is public\n  getchar();\n  return 0;\n}\n</code></pre>\n", "LastActivityDate": "2017-01-05T08:32:05.497", "CommentCount": "0", "CreationDate": "2017-01-05T08:32:05.497", "ParentId": "4796789", "Score": "0", "OwnerUserId": "6452815"}});