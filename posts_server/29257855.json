post_cb({"29258019": {"ParentId": "29257855", "CommentCount": "0", "Body": "<p>If you want portable code that handles divide by zero by throwing an exception, then you could write a class that wraps a suitable numeric type and checks before divide and mod operations, and use it instead of the inbuilt numeric types....  The C++ library does not provide such a type.  In reality, it's not particularly useful - you can just check in your code in the specific places that might do a division or mod operation with 0.</p>\n", "OwnerUserId": "410767", "PostTypeId": "2", "Id": "29258019", "Score": "0", "CreationDate": "2015-03-25T14:07:49.903", "LastActivityDate": "2015-03-25T14:07:49.903"}, "29258013": {"ParentId": "29257855", "CommentCount": "0", "Body": "<p>If you need to make sure an exception is thrown when you try to divide by zero, you'll have to make your own wrapper that does it:</p>\n<pre><code>long double Divide(long double numerator, long double denominator)\n{\n  if (denominator == 0)\n  {\n    throw std::range_error(\"Division by zero!\");\n  }\n  return numerator / denominator;\n}\n</code></pre>\n", "OwnerUserId": "102", "PostTypeId": "2", "Id": "29258013", "Score": "0", "CreationDate": "2015-03-25T14:07:29.080", "LastActivityDate": "2015-03-25T14:07:29.080"}, "29257855": {"CommentCount": "3", "ViewCount": "125", "PostTypeId": "1", "ClosedDate": "2015-03-25T14:08:50.400", "LastEditorUserId": "2253386", "CreationDate": "2015-03-25T14:00:57.423", "LastActivityDate": "2015-03-25T14:18:52.557", "Title": "Why is the division by zero not caught in a generic catch()", "LastEditDate": "2015-03-25T14:18:52.557", "Id": "29257855", "Score": "1", "Body": "<p>I have the following code which should throw a division by zero exception while running. It seems that the exception is not be caught at all. I am using catch(...) to catch any exception from the try block. Is catch(...) a good approach to catch any exceptions from the try block??</p>\n<pre><code>try\n{\n    printf(\"Try Block\");\n    for (int i = 0; i &lt; 10; i++)\n    {\n        printf(\"%d\\n\", 1 / i);\n    }       \n}\n\ncatch (...)\n{\n    printf(\"Division by zero\");\n}\n</code></pre>\n", "Tags": "<c++><exception><exception-handling>", "OwnerUserId": "2253386", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_29257855_29257928_0": {"section_id": 5937, "quality": 1.0, "length": 13}}, "n3337": {"so_29257855_29257928_0": {"section_id": 5709, "quality": 1.0, "length": 13}}, "n4659": {"so_29257855_29257928_0": {"section_id": 7421, "quality": 1.0, "length": 13}}}, "29257928": {"ParentId": "29257855", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can't rely on the behaviour of division by zero; it's undefined:</p>\n<p><strong>N4296 \u00a75/4:</strong></p>\n<blockquote>\n<p id=\"so_29257855_29257928_0\">If during the evaluation of an expression, the result is not\n  mathematically defined or not in the range of representable values for\n  its type, the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-03-25T14:09:15.563", "Id": "29257928", "Score": "2", "CreationDate": "2015-03-25T14:04:00.923", "LastActivityDate": "2015-03-25T14:09:15.563"}});