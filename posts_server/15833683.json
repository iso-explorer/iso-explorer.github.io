post_cb({"bq_ids": {"n4140": {"so_15833683_15833683_4": {"length": 8, "quality": 1.0, "section_id": 7246}, "so_15833683_15833683_3": {"length": 8, "quality": 1.0, "section_id": 7246}, "so_15833683_15833683_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 7240}, "so_15833683_15833683_5": {"length": 8, "quality": 1.0, "section_id": 7246}, "so_15833683_15833683_1": {"length": 23, "quality": 1.0, "section_id": 7244}, "so_15833683_15833683_2": {"length": 6, "quality": 1.0, "section_id": 7246}}, "n3337": {"so_15833683_15833683_4": {"length": 8, "quality": 1.0, "section_id": 6990}, "so_15833683_15833683_3": {"length": 8, "quality": 1.0, "section_id": 6990}, "so_15833683_15833683_2": {"length": 6, "quality": 1.0, "section_id": 6990}, "so_15833683_15833683_1": {"length": 23, "quality": 1.0, "section_id": 6988}, "so_15833683_15833683_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 6984}, "so_15833683_15833683_5": {"length": 8, "quality": 1.0, "section_id": 6990}}, "n4659": {"so_15833683_15833683_4": {"length": 8, "quality": 1.0, "section_id": 8755}, "so_15833683_15833683_3": {"length": 8, "quality": 1.0, "section_id": 8755}, "so_15833683_15833683_2": {"length": 6, "quality": 1.0, "section_id": 8755}, "so_15833683_15833683_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 8753}, "so_15833683_15833683_0": {"length": 27, "quality": 0.9, "section_id": 8749}, "so_15833683_15833683_5": {"length": 8, "quality": 1.0, "section_id": 8755}}}, "15834388": {"Id": "15834388", "PostTypeId": "2", "Body": "<p>The \"strict\" merely refers to the fact that larger alignment values are more restrictive in terms of the possible addresses.</p>\n<p>There are only half as many valid addresses for alignment 8 as there are for alignment 4, so a type with alignment 8 is more restricted regarding where it can be placed.</p>\n", "LastActivityDate": "2013-04-05T12:47:24.013", "Score": "8", "CreationDate": "2013-04-05T12:47:24.013", "ParentId": "15833683", "CommentCount": "1", "OwnerUserId": "46642"}, "15833683": {"ViewCount": "533", "Body": "<p>I'm reading N3485 C++ Standard Draft and in the section on alignment, it states the following:</p>\n<p><strong>3.11 Alignment [basic.align]</strong></p>\n<blockquote>\n<p id=\"so_15833683_15833683_0\">1 ... \n  An alignment is an implementation-defined integer value representing\n  the number of bytes between successive addresses at which a given object can be allocated. An object type imposes an alignment requirement on every object of that type; <strong>stricter alignment can be requested using the alignment specifier</strong> (7.6.2).</p>\n</blockquote>\n<p>Here it states what alignment is, and I get that.  It means that if you have 32 bit (4byte) system, it will read in 4 byte size chunks at a time, so you should place things in memory at 4 byte offset addresses. A lot of this is handled by a good compiler, however C++ lets you have your say in it too.</p>\n<p>The alignment-specifier it speaks of is <code>alignas</code>.</p>\n<p>You can pass an integer to <code>alignas</code> to specify your alignment requirement or a type like <code>alignas(double)</code></p>\n<p>Now, you have weak or strict alignment, which is stated to be the following:</p>\n<blockquote>\n<p id=\"so_15833683_15833683_1\">5 Alignments have an order from <em>weaker to stronger or stricter</em>\n  alignments. <strong>Stricter alignments have larger alignment values.</strong> An\n  address that satisfies an alignment requirement also satisfies any\n  weaker valid alignment requirement.</p>\n<p id=\"so_15833683_15833683_2\">7 Comparing alignments is meaningful and provides the obvious results:</p>\n<p id=\"so_15833683_15833683_3\">\u2014 Two alignments are equal when their numeric values are equal. </p>\n<p id=\"so_15833683_15833683_4\">\u2014 Two alignments are different when their numeric values are not equal. </p>\n<p id=\"so_15833683_15833683_5\">\u2014 <em>When an alignment is larger than another it represents a stricter alignment.</em></p>\n</blockquote>\n<p>So here it states that a stricter alignment is a larger alignment.  Does that just mean that <code>alignas(8)</code> is more strict than <code>alignas(4)</code>?  On a 32 bit (4 byte) system, the 8 version would mean that <code>int</code> type would require two reads instead of one, and one with just padding.  Is the strict referring to the fact that it imposes potential overhead on the CPU, when alignment is \"misused\", as in this silly example?</p>\n<p>I realize that not all alignments are valid on a given system, and that extended alignments have to be valid in order to produce correct behavior.  </p>\n<p>To me alignment is about letting the CPU access memory data in word size chunks, which is the most optimal way for a CPU to fetch and write data to and from memory.</p>\n<p>This strict alignment, as I understand it, could potentially ruin that. Am I wrong? What is strict alignment vs weak alignment?  </p>\n", "AcceptedAnswerId": "15834388", "Title": "C++ alignment - strict and weak", "CreationDate": "2013-04-05T12:13:27.727", "Id": "15833683", "CommentCount": "0", "LastEditDate": "2013-04-16T23:59:40.897", "PostTypeId": "1", "LastEditorUserId": "636019", "LastActivityDate": "2013-04-16T23:59:40.897", "Score": "11", "OwnerUserId": "174614", "Tags": "<c++><c++11><alignment><strict>", "AnswerCount": "1"}});