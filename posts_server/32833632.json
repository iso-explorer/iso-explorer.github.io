post_cb({"32833633": {"ParentId": "32833632", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Using the example code in the question (modified so it compiles with g++), it looks like <a href=\"http://www.cplusplus.com/reference/fstream/ifstream/close/\" rel=\"nofollow\"><code>ifstream::close</code></a> <strong>does not</strong> reset <code>failbit</code>. I don't know about <code>badbit</code>, however (<a href=\"http://www.cplusplus.com/reference/ios/ios/fail/\" rel=\"nofollow\"><code>ios::fail</code></a> returns true if either is set).</p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n   ofstream writer(\"foo.txt\");\n\n   writer &lt;&lt; \"These are not integers.\";\n\n   writer.close();\n\n   ifstream myInputStream(\"foo.txt\");\n\n   int i;\n   myInputStream &gt;&gt; i;//This should set the failbit.\n\n   myInputStream.close();//Will this reset it?\n\n   if (myInputStream.fail())\n   {\n      cout &lt;&lt; \"Aw, nuts. It failed.\" &lt;&lt; endl;\n      return false;\n   }\n   else\n   {\n      cout &lt;&lt; \"No nuts here. Only chocolate chips.\" &lt;&lt; endl;\n      return true;\n   }\n}\n</code></pre>\n<p><strong>Output:</strong> Aw, nuts. It failed.</p>\n<p><code>myInputStream.fail()</code> is returning false.</p>\n", "OwnerUserId": "539997", "LastEditorUserId": "539997", "LastEditDate": "2015-09-29T00:21:02.470", "Id": "32833633", "Score": "1", "CreationDate": "2015-09-29T00:03:47.500", "LastActivityDate": "2015-09-29T00:21:02.470"}, "32833712": {"ParentId": "32833632", "CommentCount": "5", "Body": "<p><code>close()</code> should not clear any of the state flags, although it might set <code>failbit</code> depending on the return value of the underlying buffer.</p>\n<p>[fstream.members] (also [ifstream.members] and [ofstream.members])</p>\n<blockquote>\n<p id=\"so_32833632_32833712_0\"><code>void close();</code></p>\n<p id=\"so_32833632_32833712_1\">Effects: Calls <code>rdbuf()-&gt;close()</code> and, if that function returns returns a null pointer, calls <code>setstate(failbit)</code> (27.5.5.4) (which may throw <code>ios_base::failure</code>).</p>\n</blockquote>\n<p>The flags <em>are</em> cleared by <code>open()</code> however, assuming the filebuf opens correctly</p>\n<blockquote>\n<p id=\"so_32833632_32833712_2\"><code>void open(const char* s, ios_base::openmode mode =\n  ios_base::in|ios_base::out);</code></p>\n<p id=\"so_32833632_32833712_3\">Effects: Calls <code>rdbuf()-&gt;open(s,mode)</code>.\n  If that function does not return a null pointer calls <code>clear()</code>,\n  otherwise calls <code>setstate(failbit)</code>, (which may throw <code>ios_base::failure</code>)\n  (27.5.5.4).</p>\n</blockquote>\n", "OwnerUserId": "657267", "PostTypeId": "2", "Id": "32833712", "Score": "3", "CreationDate": "2015-09-29T00:13:58.227", "LastActivityDate": "2015-09-29T00:13:58.227"}, "32833632": {"CommentCount": "5", "ViewCount": "442", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-09-29T00:03:47.500", "LastActivityDate": "2015-09-29T00:21:02.470", "Title": "Does ifstream::close reset failbit and/or badbit?", "AcceptedAnswerId": "32833712", "LastEditDate": "2017-05-23T11:58:23.543", "Id": "32833632", "Score": "0", "Body": "<p>Does calling <a href=\"http://www.cplusplus.com/reference/fstream/ifstream/close/\" rel=\"nofollow noreferrer\"><code>ifstream::close</code></a> reset the stream's <code>failbit</code> and/or <code>badbit</code>, similar to calling <a href=\"http://www.cplusplus.com/reference/ios/ios/clear/\" rel=\"nofollow noreferrer\"><code>clear</code></a>? This is not a duplicate of <a href=\"https://stackoverflow.com/questions/11085151/c-ifstream-failbit-and-badbit\">this question</a>- I need to know whether the flags are <em>reset</em>, not just when they're <em>set</em>.</p>\n<p>For example, I'm using something like the following <code>if-else</code> in my current project:</p>\n<pre><code>ifstream myInputStream(\"foo.txt\");\n\n//Let's pretend this compiles all the time, even though it\n//might not because the operator is ambiguous.\nmyInputStream &lt;&lt; \"Outputting to an input stream causes problems.\"\n\nif (myInputStream.fail())\n{\n   cout &lt;&lt; \"Aw, nuts. It failed.\" &lt;&lt; endl;\n   myInputStream.close();\n   return false;\n}\nelse\n{\n   cout &lt;&lt; \"No nuts here. Only chocolate chips.\" &lt;&lt; endl;\n   myInputStream.close();\n   return true;\n}\n</code></pre>\n<p>Do I have to have the call to <code>myInputStream.close</code> after the call to <code>myInputStream.fail</code>, in each branch, to get an accurate check? Or will this work:</p>\n<pre><code>ifstream myInputStream(\"foo.txt\");\n\nmyInputStream &lt;&lt; \"Outputting to an input stream causes problems.\";    \n\nmyInputStream.close();\n\nif (myInputStream.fail())\n{\n   cout &lt;&lt; \"Aw, nuts. It failed.\" &lt;&lt; endl;\n   return false;\n}\nelse\n{\n   cout &lt;&lt; \"No nuts here. Only chocolate chips.\" &lt;&lt; endl;\n   return true;\n}\n</code></pre>\n<p>I know that <a href=\"http://www.cplusplus.com/reference/fstream/ifstream/close/\" rel=\"nofollow noreferrer\"><code>ifstream::close</code></a> can itself <strong>set</strong> <code>failbit</code> or <code>badbit</code> if closing fails, which is one reason I want to call it before checking for failure- I need to return false regardless of what caused it. It also looks less cluttered if the closure is only done once.</p>\n<h2><strong>tl;dr;</strong></h2>\n<p>Does <a href=\"http://www.cplusplus.com/reference/fstream/ifstream/close/\" rel=\"nofollow noreferrer\"><code>ifstream::close</code></a> <strong>reset</strong> <code>failbit</code> or <code>badbit</code> if something else has already set it, making my second code sample return true?</p>\n", "Tags": "<c++><error-handling><fstream>", "OwnerUserId": "539997", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32833632_32833712_3": {"section_id": 2494, "quality": 0.8823529411764706, "length": 15}, "so_32833632_32833712_2": {"section_id": 2493, "quality": 1.0, "length": 6}, "so_32833632_32833712_1": {"section_id": 2468, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_32833632_32833712_3": {"section_id": 2479, "quality": 0.8823529411764706, "length": 15}, "so_32833632_32833712_2": {"section_id": 2478, "quality": 1.0, "length": 6}, "so_32833632_32833712_1": {"section_id": 2453, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_32833632_32833712_3": {"section_id": 2742, "quality": 0.8235294117647058, "length": 14}, "so_32833632_32833712_2": {"section_id": 2741, "quality": 0.8333333333333334, "length": 5}, "so_32833632_32833712_1": {"section_id": 2744, "quality": 0.7857142857142857, "length": 11}}}});