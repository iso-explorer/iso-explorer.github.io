post_cb({"19863548": {"ParentId": "19861596", "CommentCount": "3", "Body": "<p>This seems to be a bit confusing, as I agree the paragraph you quoted seems to disallow partial specializations inside class definitions. However, there's [temp.class.spec.mfunc]/2:</p>\n<blockquote>\n<p id=\"so_19861596_19863548_0\">If a member template of a class template is partially specialized, the\n  member template partial specializations are member templates of the\n  enclosing class template; [...] [<em>Example:</em></p>\n<pre><code>template&lt;class T&gt; struct A {\n    template&lt;class T2&gt; struct B {}; // #1\n    template&lt;class T2&gt; struct B&lt;T2*&gt; {}; // #2\n};\n\ntemplate&lt;&gt; template&lt;class T2&gt; struct A&lt;short&gt;::B {}; // #3\n\nA&lt;char&gt;::B&lt;int*&gt; abcip; // uses #2\nA&lt;short&gt;::B&lt;int*&gt; absip; // uses #3\nA&lt;char&gt;::B&lt;int&gt; abci; // uses #1\n</code></pre>\n<p id=\"so_19861596_19863548_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>IMHO this isn't very explicit; it doesn't <em>allow</em> partial specialization inside the class definition but rather (to me, seems to) specifies how member template specializations are treated.</p>\n<hr>\n<p>Also see the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#708\" rel=\"nofollow\">Core Language Issue 708</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3566.html#41\" rel=\"nofollow\">EWG Issue 41</a>.</p>\n</hr>", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "19863548", "Score": "0", "CreationDate": "2013-11-08T16:09:18.250", "LastActivityDate": "2013-11-08T16:09:18.250"}, "19861596": {"CommentCount": "0", "ViewCount": "400", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-11-08T14:36:16.943", "LastActivityDate": "2013-11-08T16:09:18.250", "Title": "Where to declare partial specializations of class member templates?", "LastEditDate": "2017-05-23T11:50:06.803", "Id": "19861596", "Score": "2", "Body": "<p>Here on stackoverflow I've found several comments (see for example the comment by <a href=\"https://stackoverflow.com/users/947836/jrok\">jrok</a> on <a href=\"https://stackoverflow.com/questions/18904587/class-template-specialization-in-class-scope\">this</a> question) stating that partial specializations of class member templates are allowed at non-namespace scope (in contrast to explicit specializations) like in the example below:</p>\n<pre><code>class A {\n    template &lt;class T, class U&gt;\n    class B {};\n    template &lt;class U&gt;\n    class B&lt;void, U&gt; {};\n};\n</code></pre>\n<p>Also, this example compiles just fine with both gcc and clang. However in the c++03 standard text I can only find 14.5.4 [temp.class.spec] \u00a76 (or 14.5.5 \u00a75 in c++11) about this issue:</p>\n<blockquote>\n<p id=\"so_19861596_19861596_0\">A class template partial specialization may be declared or redeclared in any namespace scope in which its definition may be defined (14.5.1 and 14.5.2).</p>\n</blockquote>\n<p>Along with the following example:</p>\n<pre><code>template&lt;class T&gt; struct A {\n    class C {\n        template&lt;class T2&gt; struct B { };\n    };\n};\n\n// partial specialization of A&lt;T&gt;::C::B&lt;T2&gt;\ntemplate&lt;class T&gt; template&lt;class T2&gt;\nstruct A&lt;T&gt;::C::B&lt;T2*&gt; { };\n</code></pre>\n<p>So, how about class template partial specializations at non-namespace scope? Are they allowed by the standard? And where can I find the relevant text?</p>\n<p>Specifically, is my example valid (and would it still be valid if the enclosing class would be a template)? If not, are current compilers wrong to compile my example as stated above?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "725863", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19861596_19861596_0": {"section_id": 139, "quality": 0.8666666666666667, "length": 13}, "so_19861596_19863548_0": {"section_id": 150, "quality": 0.9375, "length": 15}}, "n3337": {"so_19861596_19861596_0": {"section_id": 133, "quality": 0.8666666666666667, "length": 13}, "so_19861596_19863548_0": {"section_id": 144, "quality": 0.9375, "length": 15}}, "n4659": {"so_19861596_19861596_0": {"section_id": 143, "quality": 0.6, "length": 9}, "so_19861596_19863548_0": {"section_id": 154, "quality": 0.9375, "length": 15}}}});