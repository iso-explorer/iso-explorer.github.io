post_cb({"6186978": {"CommentCount": "2", "Body": "<pre><code>struct LambdaExample{\n  // deleted operations = not allowed\n  LambdaExample() = delete;\n  LambdaExample&amp; operator=(LambdaExample const&amp;) = delete;\n\n  // generated by the compiler:\n  LambdaExample(LambdaExample const&amp; other);\n  LambdaExample(LambdaExample&amp;&amp; other);\n\n  // anything else a lambda needs\n};\n</code></pre>\n<p>For your second question, if you mean that you can look into the implementation, then nope, not possible. It's created on-the-fly by the compiler. If you mean to get the type of the lambda, sure:</p>\n<pre><code>auto l = [](){};\ntypedef decltype(l) closure_type;\n</code></pre>\n", "CreationDate": "2011-05-31T11:38:18.973", "ParentId": "6186877", "Id": "6186978", "LastActivityDate": "2011-05-31T11:38:18.973", "PostTypeId": "2", "Score": "4", "OwnerUserId": "500104"}, "6186958": {"LastActivityDate": "2011-05-31T12:12:36.367", "CommentCount": "4", "Body": "<p>The closure type associated with a lambda-expression has a deleted (8.4.3) default constructor</p>\n<pre><code>int main() {\n    auto closure = [](){};\n    typedef decltype(closure) ClosureType;\n\n    ClosureType closure2;   // &lt;-- not allowed\n\n    return 0;\n}\n</code></pre>\n<p>and a deleted copy assignment operator. It has an implicitly-declared copy constructor (12.8) and may have an implicitly declared move constructor (12.8).</p>\n<pre><code>#include &lt;utility&gt;\n\nint main() {\n    auto closure = [](){};\n    typedef decltype(closure) ClosureType;\n\n    ClosureType closure2 = closure;   // &lt;-- copy constructor\n    ClosureType closure3 = std::move(closure);  // &lt;-- move constructor\n    closure2 = closure3;              // &lt;-- copy assignment (not allowed)\n\n    return 0;\n}\n</code></pre>\n", "CreationDate": "2011-05-31T11:36:45.197", "LastEditDate": "2011-05-31T12:12:36.367", "ParentId": "6186877", "Id": "6186958", "LastEditorUserId": "224671", "PostTypeId": "2", "Score": "30", "OwnerUserId": "224671"}, "6186877": {"FavoriteCount": "2", "ViewCount": "2354", "Id": "6186877", "AcceptedAnswerId": "6186958", "Score": "17", "Title": "Lambda Expressions", "LastEditorUserId": "500104", "CommentCount": "0", "Body": "<p>A point from ISO draft n3290 section 5.1.2 paragraph, point 19:</p>\n<blockquote>\n<p id=\"so_6186877_6186877_0\">The closure type associated with a\n  lambda-expression has a deleted\n  (8.4.3)  default constructor and a\n  deleted copy assignment operator. It\n  has an  implicitly-declared copy\n  constructor (12.8) and may have an\n  implicitly declared move constructor\n  (12.8). [ Note: The copy/move\n  constructor is implicitly defined in\n  the same way as any other implicitly\n  declared copy/move constructor would\n  be implicitly defined. \u2014end note ]</p>\n</blockquote>\n<p>Can any one please ....tell some example for this point to understand?</p>\n<p>Is there any chance/way to check the Closure object(type)?</p>\n", "Tags": "<c++><c++11><lambda>", "CreationDate": "2011-05-31T11:28:41.617", "LastEditDate": "2013-02-25T02:46:02.443", "LastActivityDate": "2013-02-25T02:46:02.443", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "751747"}, "bq_ids": {"n4140": {"so_6186877_6186877_0": {"length": 32, "quality": 0.7619047619047619, "section_id": 5979}}, "n3337": {"so_6186877_6186877_0": {"length": 32, "quality": 0.7619047619047619, "section_id": 5747}}}});