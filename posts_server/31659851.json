post_cb({"bq_ids": {"n4140": {"so_31659851_31660281_1": {"length": 13, "quality": 1.0, "section_id": 5927}, "so_31659851_31660281_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 191}}, "n3337": {"so_31659851_31660281_1": {"length": 13, "quality": 1.0, "section_id": 5699}, "so_31659851_31660281_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 185}}, "n4659": {"so_31659851_31660281_1": {"length": 13, "quality": 1.0, "section_id": 7401}, "so_31659851_31660281_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 196}}}, "31659851": {"ViewCount": "268", "Body": "<p>I have a question about forward declaration in C++</p>\n<pre><code>class Outer::Inner; // not valid. error\nclass Outer {\n    Inner * inn; // not valid, needs forward declaration.\n    class Inner {\n    }\n}\n</code></pre>\n<p>But when implemented like this:</p>\n<pre><code>// class Outer::Inner; // not valid. error\nclass Outer {\n    class Inner; // forward-\"like\" declaration within class\n    Inner * inn;\n    class Inner {\n    }\n}\n</code></pre>\n<p>Compiles ok. But I have never seen implementations like this before (because of my small experience in C++), so I'm interested in knowing if this won't cause some kind of error or unpredictable behaviour in the future.</p>\n", "AcceptedAnswerId": "31660281", "Title": "Forward declaration within class in C++", "CreationDate": "2015-07-27T17:47:33.037", "Id": "31659851", "CommentCount": "6", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-07-27T20:02:12.707", "LastEditorUserId": "4834", "LastActivityDate": "2015-07-27T20:02:12.707", "Score": "3", "OwnerUserId": "2035621", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "31660281": {"Id": "31660281", "PostTypeId": "2", "Body": "<p>It's valid. The standard says:</p>\n<blockquote>\n<p id=\"so_31659851_31660281_0\"><strong>9.7 Nested class declarations</strong> <code>[class.nest]</code></p>\n<p id=\"so_31659851_31660281_1\">If class <code>X</code> is defined in a namespace scope, a nested class <code>Y</code> may be\n  declared in class <code>X</code> and later defined in the definition of class <code>X</code>\n  (...).</p>\n</blockquote>\n<p>The following example is given, too:</p>\n<blockquote id=\"so_31659851_31660281_2\">\n<pre><code>class E {\n  class I1; // forward declaration of nested class\n  class I2;\n  class I1 { }; // definition of nested class\n  };\nclass E::I2 { };\n</code></pre>\n</blockquote>\n<p>Source: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++11 draft n3242</a></p>\n<p><code>E</code> and <code>I1</code> correspond to <code>Outer</code> and <code>Inner</code> in your question.</p>\n", "LastActivityDate": "2015-07-27T18:11:16.727", "CommentCount": "0", "CreationDate": "2015-07-27T18:11:16.727", "ParentId": "31659851", "Score": "2", "OwnerUserId": "3313064"}});