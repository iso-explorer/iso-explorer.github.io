post_cb({"25242515": {"ParentId": "25240985", "CommentCount": "0", "Body": "<p>Given the inconsistent behaviour with respect to <code>base::fun()</code> and <code>base::fun(int)</code> it has to be a compiler's bug.</p>\n<p>As for the correct output, your expectation is correct! From the standard, section 10.3.2:</p>\n<blockquote>\n<p id=\"so_25240985_25242515_0\">If a virtual member function <code>vf</code> is declared in a class <code>Base</code> and in a\n  class <code>Derived</code>, derived directly or indirectly from <code>Base</code>, a member\n  function <code>vf</code> with the same name and same parameter list as <code>Base::vf</code> is\n  declared, then <code>Derived::vf</code> is also virtual (whether or not it is\n  so declared) and it overrides <code>Base::vf</code>.</p>\n</blockquote>\n<p>There is no mention of access specification in there.</p>\n<p><strong>Note:</strong> You should really add a virtual destructor to your base class, otherwise expect problems if you add members to the derived classes.</p>\n", "OwnerUserId": "7136", "PostTypeId": "2", "Id": "25242515", "Score": "0", "CreationDate": "2014-08-11T11:45:09.343", "LastActivityDate": "2014-08-11T11:45:09.343"}, "25240985": {"CommentCount": "8", "ViewCount": "109", "PostTypeId": "1", "LastEditorUserId": "129570", "CreationDate": "2014-08-11T10:19:46.053", "LastActivityDate": "2014-08-11T12:53:57.660", "Title": "Can we overload a method which is overridden in child class", "LastEditDate": "2014-08-11T10:37:48.990", "Id": "25240985", "Score": "0", "Body": "<p>I wrote the following C++ program in visual studio 2012.</p>\n<p>and it gave the output as follows</p>\n<pre><code>in base::fun\nin child::fun\nin child::fun(int)\nin child::fun(int)\nin child2::fun\n</code></pre>\n<p>while i was expecting following</p>\n<pre><code>in base::fun\nin child::fun\nin child::fun(int)\nin child2::fun(int)\nin child2::fun\n</code></pre>\n<p>Code:</p>\n<pre><code>#include&lt;iostream&gt;\n    using namespace std;\n    class base\n    {\n    public:\n        virtual void fun()\n        {\n            cout&lt;&lt;\"in base::fun\\n\";\n        }\n    };\n    class child:public base\n    {\n    public:\n        void fun()\n        {\n            cout&lt;&lt;\"in child::fun\\n\";\n        }\n        virtual void fun(int i)\n        {\n            cout&lt;&lt;\"in child::fun(int)\\n\";\n        }\n    };\n    class child2:public child\n    {\n        void fun()\n        {\n            cout&lt;&lt;\"in child2::fun\\n\";\n        }\n        void fun(int i)\n        {\n            cout&lt;&lt;\"in child2::fun(int)\\n\";\n        }\n    };\n    int main()\n    {\n        base *ptr;\n        ptr = new base();\n        ptr-&gt;fun();\n        delete ptr;\n        ptr = new child();\n        ptr-&gt;fun();\n        child Cobj;\n        Cobj.fun(10);\n        child *Cptr;\n        Cptr = new child2();\n        Cptr-&gt;fun(10);\n        Cptr-&gt;fun();\n        int str;\n        cin&gt;&gt;str;\n\n    }\n</code></pre>\n<p>Now all i have done is just tried to overload the overridden method in child class.</p>\n<p>My doubt is why can't I overload the fun method in child class????</p>\n", "Tags": "<c++><visual-studio-2012>", "OwnerUserId": "2503826", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25240985_25242515_0": {"section_id": 7003, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_25240985_25242515_0": {"section_id": 6749, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_25240985_25242515_0": {"section_id": 8500, "quality": 0.896551724137931, "length": 26}}}, "25242306": {"ParentId": "25240985", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>EDIT:\nOkay, I'll say it a bit different.</p>\n<pre><code>class base\n{\npublic:\n    virtual void fun ( )\n    {\n        std::cout &lt;&lt; \"base::fun()\";\n    }\n};\n\nclass child\n{\nprivate:\n    void fun ( )\n    {\n        std::cout &lt;&lt; \"child::fun()\";\n    }\n};\n\nchild* ch = new child();\nch-&gt;fun();\n</code></pre>\n<p>if you have such code you'll get compiler error \"Child::fun() is inaccessible\"\nBut if you change last two lines with:</p>\n<pre><code>base* ch = new child();\nch-&gt;fun();\n</code></pre>\n<p>Compiler will resolve your fun as public base function and function hiding won't appear.</p>\n<p>Sorry, you <strong>can</strong> override public functions to be private, but never should do it.\n<a href=\"http://www.parashift.com/c++-faq-lite/hiding-inherited-public.html\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/hiding-inherited-public.html</a></p>\n<p>I was wrong: \"Your base and child classes have <code>public void fun(int)</code>, whereas your child2 has it private(because it is not preceded by any identifier: public, private, protected). So <code>private child2::fun()</code> is <strong>different</strong> from <code>public child2::fun</code>, which is not overriden in your class.\"</p>\n", "OwnerUserId": "3169872", "LastEditorUserId": "3169872", "LastEditDate": "2014-08-11T12:53:57.660", "Id": "25242306", "Score": "-1", "CreationDate": "2014-08-11T11:33:29.600", "LastActivityDate": "2014-08-11T12:53:57.660"}});