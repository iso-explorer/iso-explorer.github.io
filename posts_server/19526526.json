post_cb({"19526526": {"CommentCount": "0", "AcceptedAnswerId": "19526908", "PostTypeId": "1", "LastEditorUserId": "860566", "CreationDate": "2013-10-22T19:23:31.880", "LastActivityDate": "2013-10-22T20:42:57.873", "LastEditDate": "2013-10-22T20:42:57.873", "ViewCount": "269", "FavoriteCount": "1", "Title": "Is const int[2] trivially copyable?", "Id": "19526526", "Score": "2", "Body": "<p>I have a templated member function which looks somewhat like the following:</p>\n<pre><code>template &lt;typename T&gt;\nint SendData( const T&amp; tDataBuffer ) const\n{\n    static_assert( std::is_trivially_copyable&lt;T&gt;::value, \"The object type must be trivially copyable\" );\n\n    // Send the data bitwise\n    ...\n}\n</code></pre>\n<p>I then call this function in a manner like the following:</p>\n<pre><code>const int iArray[2] = {1, 2};\nint iResult = pSocket-&gt;SendData( iArray );\n</code></pre>\n<p>When I compile this with Visual Studio 2012, I get no error message and the functionality of the program is how I would expect (i.e. the data is sent bitwise), however, when compiling with the newest version of the compiler, Visual Studio 2013, the static assert fails, the compiler issuing me the statement:</p>\n<pre><code>1&gt;c:\\...\\sockets.h(298): error C2338: The object type must be trivially copyable\n1&gt;          c:\\...\\test.cpp(974) : see reference to function template instantiation 'int CBaseSocket::SendData&lt;const int[2]&gt;(T (&amp;)) const' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              T=const int [2]\n1&gt;          ]\n</code></pre>\n<p>So which version of the compiler is standards-conformant, should <code>const int[2]</code> be trivially copyable or not?</p>\n<hr>\n<p>Edit: This is a bug with Visual Studio 2013; here is the <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/806233/std-is-trivially-copyable-const-int-n-and-std-is-trivially-copyable-int-n-incorrect\" rel=\"nofollow\">Microsoft Connect report</a></p>\n</hr>", "Tags": "<c++><visual-studio-2012><c++11><visual-studio-2013><static-assert>", "OwnerUserId": "860566", "AnswerCount": "2"}, "19526987": {"ParentId": "19526526", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes.</p>\n<blockquote>\n<p id=\"so_19526526_19526987_0\">Scalar types and arrays of TriviallyCopiable objects are\n  TriviallyCopiable as well. <a href=\"http://en.cppreference.com/w/cpp/concept/TriviallyCopyable\" rel=\"nofollow\">[1]</a></p>\n</blockquote>\n<p>Also gcc <a href=\"http://coliru.stacked-crooked.com/a/d9e8c8897f11980d\" rel=\"nofollow\">reports it</a> as <em>trivially copiable</em>. It seems a bug in VS2013.</p>\n", "OwnerUserId": "952747", "LastEditorUserId": "952747", "LastEditDate": "2013-10-22T20:02:10.667", "Id": "19526987", "Score": "0", "CreationDate": "2013-10-22T19:49:02.630", "LastActivityDate": "2013-10-22T20:02:10.667"}, "19526908": {"ParentId": "19526526", "CommentCount": "2", "Body": "<p><code>3.9[basic.types]/9</code> says</p>\n<blockquote>\n<p id=\"so_19526526_19526908_0\">Scalar types, trivially copyable class types (Clause 9), arrays of such types, and cv-qualified versions of these types (3.9.3) are collectively called trivially copyable types</p>\n</blockquote>\n<p>Your case is array of cv-qualified version of a scalar type.</p>\n", "OwnerUserId": "273767", "PostTypeId": "2", "Id": "19526908", "Score": "1", "CreationDate": "2013-10-22T19:44:21.180", "LastActivityDate": "2013-10-22T19:44:21.180"}, "bq_ids": {"n4140": {"so_19526526_19526908_0": {"section_id": 7207, "quality": 0.8421052631578947, "length": 16}}, "n3337": {"so_19526526_19526908_0": {"section_id": 6951, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_19526526_19526908_0": {"section_id": 8716, "quality": 0.8947368421052632, "length": 17}}}});