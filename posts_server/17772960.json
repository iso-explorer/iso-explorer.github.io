post_cb({"17773200": {"ParentId": "17772960", "CommentCount": "0", "Body": "<p>This is specifically addressed in section 14.6.2p3 of the C++03 and C++11 standards:</p>\n<blockquote>\n<p id=\"so_17772960_17773200_0\">In the definition of a class template or a member of a class template, if a base class of the class template depends on a template parameter, the base class scope is not examined during unqualified name lookup either at the point of definition of the class template or member or during an instantiation of the class template or member.</p>\n</blockquote>\n", "OwnerUserId": "951890", "PostTypeId": "2", "Id": "17773200", "Score": "3", "CreationDate": "2013-07-21T14:08:51.907", "LastActivityDate": "2013-07-21T14:08:51.907"}, "17772960": {"CommentCount": "11", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "2110463", "CreationDate": "2013-07-21T13:45:08.200", "LastActivityDate": "2013-07-21T14:08:51.907", "Title": "c++ template inheritance scheme", "AcceptedAnswerId": "17773200", "LastEditDate": "2013-07-21T14:07:55.957", "Id": "17772960", "Score": "2", "Body": "<p>I wonder if the way I code this is correct. Can I create a template claas that inherits from a template class ? If I can, is the following code correct :</p>\n<pre><code>template&lt;typename Type&gt;\nclass A{\n    public:\n        A(){};\n        method_A(){//do whatever}\n    protected:\n        int a;\n}\n</code></pre>\n<p>the second class is :</p>\n<pre><code>template&lt;typename Type&gt;\nclass B:public&lt;Type&gt; A {\n    public:\n        B(){};\n        method_B(){this-&gt;a=0; this-&gt;method_A();}\n    protected:\n        int b;\n}\n</code></pre>\n<p>and my last class is :</p>\n<pre><code>class C:public&lt;double&gt; B{\n    public:\n        C(){};\n        method_C(){ b = 0; method_B();}\n    protected:\n        int c;\n}\n</code></pre>\n<p>Why are the <code>this-&gt;</code> mandatory in the class B but not in the class C ? And in general, should I always add <code>this-&gt;</code> to reference arguments or methods that belong to the same class ?</p>\n", "Tags": "<c++><class><templates><inheritance>", "OwnerUserId": "2110463", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17772960_17773200_0": {"section_id": 190, "quality": 0.8125, "length": 26}}, "n3337": {"so_17772960_17773200_0": {"section_id": 184, "quality": 0.8125, "length": 26}}, "n4659": {"so_17772960_17773200_0": {"section_id": 195, "quality": 0.6875, "length": 22}}}});