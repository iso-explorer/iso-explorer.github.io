post_cb({"6437202": {"Id": "6437202", "PostTypeId": "2", "Body": "<p>As Mat pointed out, it depends on whether you need to access your elements in sorted order.  Also, map has <em>guaranteed</em>, <em>worst-case</em> logarithmic access time (in the number of elements), whereas unordered map has <em>average</em> constant access time.</p>\n", "LastActivityDate": "2011-06-22T08:46:56.010", "CommentCount": "0", "CreationDate": "2011-06-22T08:46:56.010", "ParentId": "6437089", "Score": "1", "OwnerUserId": "2583"}, "6441763": {"Id": "6441763", "PostTypeId": "2", "Body": "<p>If the comparison between unordered containers is needed, the complexity\nmight be an issue.<br>\nIt seems to be difficult to implement <code>operator==</code>/<code>operator!=</code> between\nunordered containers efficiently.<br>\nN3290 \u00a723.2.5/11 says</br></br></p>\n<blockquote>\n<p id=\"so_6437089_6441763_0\">the complexity of operator== ... is\n  proportional to ... N^2 in the worst\n  case, where N is a.size().</p>\n</blockquote>\n<p>while other containers have linear complexity.</p>\n", "LastActivityDate": "2011-06-22T14:40:12.167", "CommentCount": "0", "CreationDate": "2011-06-22T14:40:12.167", "ParentId": "6437089", "Score": "1", "OwnerUserId": "547710"}, "6437922": {"Id": "6437922", "PostTypeId": "2", "Body": "<p>The main reason for using <code>map</code> instead of <code>unordered_map</code> is that <code>map</code> is in standard and for sure you have it. Some companies have policy not to use definitions from <code>tr1</code>.<br>\nBut you ask when order is important - it is needed for operations like <code>lower_bound</code>, <code>upper_bound</code>, <code>set_union</code>, <code>set_intersection</code> etc.</br></p>\n", "LastActivityDate": "2011-06-22T09:47:59.013", "CommentCount": "0", "CreationDate": "2011-06-22T09:47:59.013", "ParentId": "6437089", "Score": "1", "OwnerUserId": "113662"}, "bq_ids": {"n4140": {"so_6437089_6441763_0": {"length": 7, "quality": 1.0, "section_id": 764}}, "n3337": {"so_6437089_6441763_0": {"length": 7, "quality": 1.0, "section_id": 751}}, "n4659": {"so_6437089_6441763_0": {"length": 7, "quality": 1.0, "section_id": 824}}}, "6437154": {"Id": "6437154", "PostTypeId": "2", "Body": "<p>Unordered_map use more memory than map. If there is a constraint in memory then its recommended to use map. So the operations become slower when using unordered_map</p>\n<p><strong>EDIT</strong></p>\n<p>Quoting from the wiki article</p>\n<pre><code>It is similar to the map class in the C++ standard library but has different \nconstraints. As its name implies, unlike the map class, the elements of an \nunordered_map are not ordered. This is due to the use of hashing to store objects.\nunordered_map can still be iterated through like a regular map.\n</code></pre>\n", "LastActivityDate": "2011-06-22T08:42:56.200", "CommentCount": "0", "CreationDate": "2011-06-22T08:42:56.200", "ParentId": "6437089", "Score": "-1", "OwnerUserId": "791287"}, "6437148": {"Id": "6437148", "PostTypeId": "2", "Body": "<p>You use an ordered map when you need to be able to iterate over the keys in an ordered fashion.</p>\n", "LastActivityDate": "2011-06-22T08:42:22.113", "CommentCount": "2", "CreationDate": "2011-06-22T08:42:22.113", "ParentId": "6437089", "Score": "5", "OwnerUserId": "635608"}, "6437089": {"ViewCount": "81", "Body": "<p>I am wondering in which uses cases, we can be interested by having an ordered associative container.</p>\n<p>In other terms, why use <code>std::map</code> and no <code>std::unorderd_map</code></p>\n", "AcceptedAnswerId": "6437148", "Title": "what is the uses cases in which order in key value associative container is useful", "CreationDate": "2011-06-22T08:37:17.853", "Id": "6437089", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-06-22T08:41:27.950", "LastEditorUserId": "469935", "LastActivityDate": "2011-06-22T14:40:12.167", "Score": "2", "OwnerUserId": "619570", "Tags": "<c++>", "AnswerCount": "5"}});