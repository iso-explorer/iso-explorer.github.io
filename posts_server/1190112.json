post_cb({"24145199": {"ParentId": "1190112", "CommentCount": "2", "Body": "<p>This is going to change in C++14.  [forward.iterators] 24.2.5p2 of N3936 says</p>\n<blockquote>\n<p id=\"so_1190112_24145199_0\">However, value-initialized iterators may be compared and shall compare\n  equal to other value-initialized iterators of the same type.</p>\n</blockquote>\n", "OwnerUserId": "197411", "PostTypeId": "2", "Id": "24145199", "Score": "6", "CreationDate": "2014-06-10T15:39:46.843", "LastActivityDate": "2014-06-10T15:39:46.843"}, "1190112": {"CommentCount": "1", "AcceptedAnswerId": "1190275", "PostTypeId": "1", "LastEditorDisplayName": "anon", "CreationDate": "2009-07-27T19:24:42.743", "LastActivityDate": "2014-06-10T15:39:46.843", "LastEditDate": "2009-07-27T19:30:01.390", "ViewCount": "1824", "FavoriteCount": "3", "Title": "Comparing default-constructed iterators with operator==", "Id": "1190112", "Score": "11", "Body": "<p>Does the C++ Standard say I should be able to compare two default-constructed STL iterators for equality?  Are default-constructed iterators equality-comparable?</p>\n<p>I want the following, using std::list for example:</p>\n<pre><code>void foo(const std::list&lt;int&gt;::iterator iter) {\n    if (iter == std::list&lt;int&gt;::iterator()) {\n        // Something\n    }\n}\n\nstd::list&lt;int&gt;::iterator i;\nfoo(i);\n</code></pre>\n<p>What I want here is something like a NULL value for iterators, but I'm not sure if it's legal.  In the STL implementation included with Visual Studio 2008, they include assertions in std::list's operator==() that preclude this usage.  (They check that each iterator is \"owned\" by the same container and default-constructed iterators have no container.)  This would hint that it's not legal, or perhaps that they're being over-zealous.</p>\n", "Tags": "<c++><visual-studio-2008><stl><iterator>", "OwnerUserId": "23624", "AnswerCount": "4"}, "1190275": {"ParentId": "1190112", "CommentCount": "1", "Body": "<p>OK, I'll take a stab. The C++ Standard, Section 24.1/5:</p>\n<blockquote>\n<p id=\"so_1190112_1190275_0\">Iterators can also have singular\n  values that are not associated with\n  any container. [Example: After the\n  declaration of an uninitialized\n  pointer x (as with int* x;), x must\n  always be assumed to have a singular\n  value of a pointer.  ] Results of most\n  expressions are undefined for singular\n  values; the only excep- tion is an\n  assignment of a non-singular value to\n  an iterator that holds a singular\n  value.</p>\n</blockquote>\n<p>So, no, they can't be compared.</p>\n", "Id": "1190275", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "15", "CreationDate": "2009-07-27T19:53:12.293", "LastActivityDate": "2009-07-27T19:53:12.293"}, "1190135": {"ParentId": "1190112", "CommentCount": "7", "Body": "<p>I believe you should pass a <strong>range</strong> to the function.</p>\n<pre><code>void fun(std::list&lt;int&gt;::iterator beg, std::list&lt;int&gt;::iterator end)\n{\n    while(beg != end)\n    {\n        // do what you want here.\n        beg++;\n    }\n}\n</code></pre>\n", "OwnerUserId": "127893", "PostTypeId": "2", "Id": "1190135", "Score": "1", "CreationDate": "2009-07-27T19:29:27.430", "LastActivityDate": "2009-07-27T19:29:27.430"}, "1190278": {"ParentId": "1190112", "CommentCount": "0", "Body": "<p>Specification says that the postcondition of default constructor is that iterator is <a href=\"http://www.sgi.com/tech/stl/trivial.html\" rel=\"nofollow noreferrer\">singular</a>. The comparison for equality are undefined, so it may be different in some implementation.</p>\n", "OwnerUserId": "142039", "PostTypeId": "2", "Id": "1190278", "Score": "1", "CreationDate": "2009-07-27T19:53:27.943", "LastActivityDate": "2009-07-27T19:53:27.943"}, "bq_ids": {"n4140": {"so_1190112_1190275_0": {"section_id": 5559, "quality": 0.8888888888888888, "length": 32}, "so_1190112_24145199_0": {"section_id": 5574, "quality": 1.0, "length": 12}}, "n3337": {"so_1190112_1190275_0": {"section_id": 5341, "quality": 0.8888888888888888, "length": 32}}, "n4659": {"so_1190112_1190275_0": {"section_id": 7006, "quality": 0.8888888888888888, "length": 32}, "so_1190112_24145199_0": {"section_id": 7021, "quality": 1.0, "length": 12}}}});