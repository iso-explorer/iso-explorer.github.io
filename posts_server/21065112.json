post_cb({"21065112": {"CommentCount": "0", "ViewCount": "135", "CreationDate": "2014-01-11T16:55:17.137", "LastActivityDate": "2014-01-11T18:14:55.613", "Title": "class using global extern const variable which is defined with internal linkage", "AcceptedAnswerId": "21066022", "PostTypeId": "1", "Id": "21065112", "Score": "1", "Body": "<p>I have this situation:</p>\n<pre><code>// Test.h\nextern const int param;\nclass Test\n{\nprivate:\n    int i;\npublic:\n    int foo();\n};\n</code></pre>\n<p>and</p>\n<pre><code>// Test.cpp\n#include \"Test.h\"\nint Test::foo() { return param*10; }\n</code></pre>\n<p>and</p>\n<pre><code>// core.h\n#include \"Test.h\"\nconst int param = 1; // should have internal linkage later in core.cpp\nint do_stuff ();\n</code></pre>\n<p>and</p>\n<pre><code>// core.cpp\n#include \"core.h\"\nint do_stuff () { Test obj; return obj.foo(); }\nint main() { return do_stuff(); }\n</code></pre>\n<p>However there is no linker error. How does the linker see for Test.cpp the <code>const int param</code> which is through core.h defined in core.cpp having internal linkage (default for const definitions)?</p>\n<p>When I rewrite core.h like this (change two lines):</p>\n<pre><code>// core.h\nconst int param = 1;\n#include \"Test.h\"\nint do_stuff ();\n</code></pre>\n<p>there comes a linker error for missing <code>param</code>. And then, when I change it like this:</p>\n<pre><code>// core.h\nextern const int param = 1;\n#include \"Test.h\"\nint do_stuff ();\n</code></pre>\n<p>all works again.</p>\n<p>I thought, that maybe in original situation there is an automatic inlining of class Test inside core.cpp, so that Test.cpp is as not existent and the whole code is in core.cpp, so that all works. But why should it then be dependent of changing the two lines in core.h?</p>\n", "Tags": "<c++><static><global-variables><const><extern>", "OwnerUserId": "2947694", "AnswerCount": "1"}, "21066022": {"ParentId": "21065112", "CommentCount": "1", "CreationDate": "2014-01-11T18:14:55.613", "OwnerUserId": "419450", "PostTypeId": "2", "Id": "21066022", "Score": "0", "Body": "<p>Your assumption about internal linkage for const definitions is not always true. See the standart section <code>3.5 Program linkage</code>, p. 3 (I'm quoting N3690):</p>\n<blockquote>\n<p id=\"so_21065112_21066022_0\">A name having namespace scope (3.3.6) has internal linkage if it is the name of</p>\n<blockquote>\n<ul>\n<li><p id=\"so_21065112_21066022_4\">a variable, function or function template that is explicitly declared static; or,</p></li>\n<li><p id=\"so_21065112_21066022_5\">a non-volatile variable that is explicitly declared const or constexpr and neither explicitly declared extern nor <strong>previously declared to have external linkage</strong>; or</p></li>\n<li><p id=\"so_21065112_21066022_6\">a data member of an anonymous union.</p></li>\n</ul>\n</blockquote>\n</blockquote>\n<p>So for the first case <code>param</code> has external linkage and everything is okay.</p>\n<p>For the second case, there is an internal-linked <code>param</code> in core.cpp, but there is another declared-only <code>param</code> having external linkage but no definition.</p>\n<p>In the third case, there is one <code>param</code> again.</p>\n", "LastActivityDate": "2014-01-11T18:14:55.613"}, "bq_ids": {"n4140": {"so_21065112_21066022_3": {"section_id": 369, "quality": 1.0, "length": 4}, "so_21065112_21066022_0": {"section_id": 7136, "quality": 0.875, "length": 7}, "so_21065112_21066022_2": {"section_id": 7136, "quality": 1.0, "length": 16}, "so_21065112_21066022_6": {"section_id": 369, "quality": 1.0, "length": 4}, "so_21065112_21066022_4": {"section_id": 7136, "quality": 1.0, "length": 7}, "so_21065112_21066022_1": {"section_id": 7136, "quality": 1.0, "length": 7}, "so_21065112_21066022_5": {"section_id": 7136, "quality": 1.0, "length": 16}}, "n3337": {"so_21065112_21066022_3": {"section_id": 359, "quality": 1.0, "length": 4}, "so_21065112_21066022_0": {"section_id": 6880, "quality": 0.875, "length": 7}, "so_21065112_21066022_2": {"section_id": 6880, "quality": 0.9375, "length": 15}, "so_21065112_21066022_6": {"section_id": 359, "quality": 1.0, "length": 4}, "so_21065112_21066022_4": {"section_id": 6880, "quality": 1.0, "length": 7}, "so_21065112_21066022_1": {"section_id": 6880, "quality": 1.0, "length": 7}, "so_21065112_21066022_5": {"section_id": 6880, "quality": 0.9375, "length": 15}}, "n4659": {"so_21065112_21066022_3": {"section_id": 382, "quality": 1.0, "length": 4}, "so_21065112_21066022_0": {"section_id": 8637, "quality": 0.875, "length": 7}, "so_21065112_21066022_2": {"section_id": 8637, "quality": 0.8125, "length": 13}, "so_21065112_21066022_6": {"section_id": 382, "quality": 1.0, "length": 4}, "so_21065112_21066022_4": {"section_id": 8637, "quality": 1.0, "length": 7}, "so_21065112_21066022_1": {"section_id": 8637, "quality": 1.0, "length": 7}, "so_21065112_21066022_5": {"section_id": 8637, "quality": 0.8125, "length": 13}}}});