post_cb({"29162620": {"CommentCount": "8", "AcceptedAnswerId": "29168643", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-03-20T08:50:40.293", "LastActivityDate": "2015-03-22T17:35:58.567", "LastEditDate": "2015-03-21T00:09:31.050", "ViewCount": "316", "FavoriteCount": "1", "Title": "const reference to temporary reference", "Id": "29162620", "Score": "7", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct CL\n{\n    CL()\n    {\n        cout&lt;&lt;\"CL()\"&lt;&lt;endl;\n    }\n    CL(const CL&amp;)\n    {\n        cout&lt;&lt;\"CL(const CL&amp;)\"&lt;&lt;endl;\n    }\n    ~CL()\n    {\n        cout&lt;&lt;\"~CL()\"&lt;&lt;endl;\n    }\n};\n\nCL cl;\n\nCL fnc()\n{\n    return cl;\n}\n\nint main() {\n    cout&lt;&lt;\"start\"&lt;&lt;endl;\n    const CL&amp; ref=static_cast&lt;const CL&amp;&gt;(fnc());\n    //...Is \"ref\" valid here??\n    cout&lt;&lt;\"end\"&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p>What's lifetime of temporary object returned by fnc()? Is it lifetime of \"ref\" or of temporary reference static_cast(fnc()), which destroyed at end of statement?</p>\n<p>Output of gcc (lifetime of fnc() is lifetime of \"ref\"):</p>\n<pre><code>CL()  //global object \"cl\"\nstart\nCL(const CL&amp;)\nend\n~CL()\n~CL() //global object \"cl\"\n</code></pre>\n<p>Output of VS2013 (lifetime of fnc() is lifetime of temporary reference):</p>\n<pre><code>CL()  //global object \"cl\"\nstart\nCL(const CL&amp;)\n~CL()\nend\n~CL() //global object \"cl\"\n</code></pre>\n<p>What's correct by Standard?</p>\n", "Tags": "<c++><reference><language-lawyer><temporary-objects>", "OwnerUserId": "3514538", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29162620_29168643_4": {"section_id": 381, "quality": 1.0, "length": 10}, "so_29162620_29168643_2": {"section_id": 382, "quality": 0.5384615384615384, "length": 7}, "so_29162620_29168643_5": {"section_id": 382, "quality": 0.9, "length": 18}, "so_29162620_29168643_10": {"section_id": 6030, "quality": 0.868421052631579, "length": 33}, "so_29162620_29168643_8": {"section_id": 382, "quality": 0.9, "length": 18}, "so_29162620_29168643_7": {"section_id": 381, "quality": 1.0, "length": 10}}, "n3337": {"so_29162620_29168643_4": {"section_id": 372, "quality": 1.0, "length": 10}, "so_29162620_29168643_2": {"section_id": 373, "quality": 0.5384615384615384, "length": 7}, "so_29162620_29168643_5": {"section_id": 373, "quality": 0.9, "length": 18}, "so_29162620_29168643_10": {"section_id": 5798, "quality": 0.8947368421052632, "length": 34}, "so_29162620_29168643_8": {"section_id": 373, "quality": 0.9, "length": 18}, "so_29162620_29168643_7": {"section_id": 372, "quality": 1.0, "length": 10}}, "n4659": {"so_29162620_29168643_4": {"section_id": 396, "quality": 0.9, "length": 9}, "so_29162620_29168643_5": {"section_id": 397, "quality": 0.85, "length": 17}, "so_29162620_29168643_8": {"section_id": 397, "quality": 0.85, "length": 17}, "so_29162620_29168643_7": {"section_id": 396, "quality": 0.9, "length": 9}, "so_29162620_29168643_2": {"section_id": 397, "quality": 0.5384615384615384, "length": 7}}}, "29168643": {"ParentId": "29162620", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-03-20T14:15:49.247", "Score": "5", "LastEditorUserId": "1708801", "LastEditDate": "2015-03-22T17:35:58.567", "Id": "29168643", "OwnerUserId": "1708801", "Body": "<p>I believe Visual Studio is correct here, this is covered in <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1376\" rel=\"nofollow\">defect report #1376</a> which says:</p>\n<blockquote>\n<p id=\"so_29162620_29168643_0\">In a declaration like</p>\n<pre><code>T&amp;&amp; r = static_cast&lt;T&amp;&amp;&gt;(T());\n</code></pre>\n<p id=\"so_29162620_29168643_1\">it is not clear what the lifetime of the T temporary should be.\n  According to 5.2.9 [expr.static.cast] paragraph 4, the static_cast is\n  equivalent to a declaration of an invented temporary variable t. The\n  lifetime of the temporary is extended to that of t, but it is not\n  clear what that lifetime should be, nor if the subsequent binding of t\n  to r would affect the lifetime of the original temporary. (See also\n  issue 1568.)</p>\n</blockquote>\n<p>and the discussion includes this conclusion:</p>\n<blockquote>\n<p id=\"so_29162620_29168643_2\">The reference is bound to the xvalue result of the static_cast, so the lifetime of the temporary is not extended and this example results in a dangling reference.</p>\n</blockquote>\n<p>and <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_closed.html#1568\" rel=\"nofollow\">defect report 1568</a> covers this case more specifically:</p>\n<blockquote>\n<p id=\"so_29162620_29168643_3\">According to 12.2 [class.temporary] paragraphs 4-5,</p>\n<blockquote>\n<p id=\"so_29162620_29168643_7\">There are two contexts in which temporaries are destroyed at a different point than the end of the full-expression...</p>\n<p id=\"so_29162620_29168643_8\">The second context is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is\n    the complete object of a subobject to which the reference is bound\n    persists for the lifetime of the reference...</p>\n</blockquote>\n<p id=\"so_29162620_29168643_6\">It is not clear whether this applies to an example like the following:</p>\n<pre><code>struct S { };\nconst S&amp; r = (const S&amp;)S();\n</code></pre>\n</blockquote>\n<p>and the response was:</p>\n<blockquote>\n<p id=\"so_29162620_29168643_9\">This issue is a duplicate of issue 1376.</p>\n</blockquote>\n<p>so in this case:</p>\n<pre><code>const CL&amp; ref=static_cast&lt;const CL&amp;&gt;(fnc());\n</code></pre>\n<p>the reference is bound to the result of the <code>static_cast</code> and not to <code>CL</code> and therefore <code>CL</code> is a dangling reference.</p>\n<p>For reference the relevant text from the draft C++11 standard section <code>5.2.9</code> <em>[expr.static.cast]</em>:</p>\n<blockquote>\n<p id=\"so_29162620_29168643_10\">Otherwise, an expression e can be explicitly converted to a type T using a static_cast of the form static_-\n  cast(e) if the declaration T t(e); is well-formed, for some invented temporary variable t (8.5). The\n  effect of such an explicit conversion is the same as performing the declaration and initialization and then\n  using the temporary variable as the result of the conversion. The expression e is used as a glvalue if and\n  only if the initialization uses it as a glvalue.</p>\n</blockquote>\n", "LastActivityDate": "2015-03-22T17:35:58.567"}});