post_cb({"32247436": {"CommentCount": "1", "ViewCount": "122", "PostTypeId": "1", "LastEditorUserId": "3415258", "CreationDate": "2015-08-27T10:52:45.693", "LastActivityDate": "2015-08-29T11:22:28.663", "Title": "Are elements added to a std::map automatically initialised?", "AcceptedAnswerId": "32247530", "LastEditDate": "2015-08-27T11:01:35.120", "Id": "32247436", "Score": "11", "Body": "<p>Suppose I have a map</p>\n<p><code>std::map&lt;int, double&gt; foo;</code></p>\n<p>Is the behaviour on my writing <code>foo[2] += 3.0;</code> defined? That is, are any implicitly added map elements automatically initialised (hopefully to <code>0.0</code>) in my case?</p>\n<p>If not, am I introducing a truck-load of undefined behaviour? If so, could I do something funky with an allocator to enforce initialisation to <code>0.0</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "3415258", "AnswerCount": "3"}, "32247587": {"ParentId": "32247436", "CommentCount": "0", "CreationDate": "2015-08-27T10:59:32.313", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "32247587", "Score": "0", "Body": "<blockquote>\n<p id=\"so_32247436_32247587_0\"><code>N3337 [map.access]/1</code> <em>Effects:</em> If there is no key equivalent to <code>x</code> in the map, inserts <code>value_type(x,T())</code> into the map.</p>\n</blockquote>\n<p><code>T()</code> is <em>value-initialization</em>, which is the case of built-in types causes zero-initialization. As such, <code>foo[2]</code> will insert a zero-initialized <code>double</code> into your map, so your code is well-defined. </p>\n", "LastActivityDate": "2015-08-27T10:59:32.313"}, "32247530": {"ParentId": "32247436", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2015-08-27T10:56:59.723", "Score": "5", "LastEditorUserId": "3309790", "LastEditDate": "2015-08-27T11:05:07.863", "Id": "32247530", "OwnerUserId": "3309790", "Body": "<p>Yes, it will be <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-initialized</a> (as <code>0.0</code> in your case). According to <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">cppreference</a>:</p>\n<blockquote>\n<p id=\"so_32247436_32247530_0\">Returns a reference to the value that is mapped to a key equivalent to\n  key, performing an insertion if such key does not already exist.</p>\n<p id=\"so_32247436_32247530_1\">If an insertion is performed, the mapped value is value-initialized\n  (default-constructed for class types, zero-initialized otherwise) and\n  a reference to it is returned.</p>\n</blockquote>\n", "LastActivityDate": "2015-08-27T11:05:07.863"}, "32247520": {"ParentId": "32247436", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2015-08-27T10:56:39.810", "Score": "-1", "LastEditorUserId": "493122", "LastEditDate": "2015-08-29T11:22:28.663", "Id": "32247520", "OwnerUserId": "493122", "Body": "<p>Yes, they are automatically value initialized when using <code>operator[]</code> on a non existing key. Specifically in the standard it's described at \u00a723.4.4.3/1 (when talking about <code>operator[]</code>):</p>\n<blockquote>\n<p id=\"so_32247436_32247520_0\">Effects: If there is no key equivalent to x in the map, inserts <code>value_type(x, T())</code> into the map.</p>\n</blockquote>\n<p>For most numeric types, including <code>double</code>, the expression <code>T()</code> yields a value-initialized element of that type, therefore yielding <code>0.0</code> in your case.</p>\n", "LastActivityDate": "2015-08-29T11:22:28.663"}, "bq_ids": {"n4140": {"so_32247436_32247530_0": {"section_id": 763, "quality": 0.5714285714285714, "length": 8}, "so_32247436_32247520_0": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_32247436_32247587_0": {"section_id": 1007, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_32247436_32247530_0": {"section_id": 750, "quality": 0.5714285714285714, "length": 8}, "so_32247436_32247520_0": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_32247436_32247587_0": {"section_id": 992, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_32247436_32247530_0": {"section_id": 823, "quality": 0.5714285714285714, "length": 8}, "so_32247436_32247520_0": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}}}});