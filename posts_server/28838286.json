post_cb({"bq_ids": {"n4140": {"so_28838286_28838379_1": {"length": 39, "quality": 0.975, "section_id": 3323}}, "n3337": {"so_28838286_28838379_1": {"length": 39, "quality": 0.975, "section_id": 3193}}, "n4659": {"so_28838286_28838379_1": {"length": 36, "quality": 0.9, "section_id": 4089}}}, "28838379": {"Id": "28838379", "PostTypeId": "2", "Body": "<p>From the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28838286_28838379_0\"><strong>8.5.4 List-initialization [dcl.init.list]</strong></p>\n<p id=\"so_28838286_28838379_1\">1 <em>List-initialization</em> is initialization of an object or reference from a <em>braced-init-list</em>. Such an initializer is called an initializer list, and the comma-separated <em>initializer-clauses</em> of the list are called the <em>elements</em> of the initializer list. An initializer list may be empty. <em>List-initialization</em> can occur in <em>direct-initialization</em> or <em>copy-initialization</em> contexts; <em>list-initialization</em> in a <em>direct-initialization</em> context is called <em>direct-list-initialization</em> and <em>list-initialization</em> in a <em>copy-initialization</em> context is called <em>copy-list-initialization</em>. [ Note: <em>List-initialization</em> can be used</p>\n<ul>\n<li>as the initializer in a variable definition (8.5)</li>\n<li>as the initializer in a new expression (5.3.4)</li>\n<li>in a return statement (6.6.3)</li>\n<li>as a function argument (5.2.2)</li>\n<li>as a subscript (5.2.1)</li>\n<li><strong>as an argument to a constructor invocation (8.5, 5.2.3)</strong></li>\n<li><em>[..]</em></li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-03-03T17:46:00.787", "Score": "8", "CreationDate": "2015-03-03T17:43:10.440", "ParentId": "28838286", "CommentCount": "7", "OwnerUserId": "434551", "LastEditDate": "2015-03-03T17:46:00.787"}, "28838286": {"ViewCount": "201", "Body": "<p>I came across the following code</p>\n<pre><code>#include &lt;iterator&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n\n    std::string inputfilename, outputfilename;\n\n    std::cin  &gt;&gt; outputfilename;\n\n    std::ofstream outputfile{ outputfilename };\n\n    outputfile &lt;&lt; \"I exist Yo!\";\n\n    return 0;\n}\n</code></pre>\n<p>My first reaction was that it should not compile. I had never seen the <code>outputfile{ outputfilename };</code> syntax. Can someone please tell me what feature of the C++ language defines the behavior of <code>{...}</code> in this line of code?</p>\n<p>P.S. The code works and does what you would expect.</p>\n", "AcceptedAnswerId": "28838379", "Title": "Understand meaning of {...} when creating objects", "CreationDate": "2015-03-03T17:38:21.570", "Id": "28838286", "CommentCount": "11", "LastEditDate": "2015-03-03T17:55:37.193", "PostTypeId": "1", "LastEditorUserId": "592323", "LastActivityDate": "2015-03-03T17:55:37.193", "Score": "4", "OwnerUserId": "3670482", "Tags": "<c++><c++11>", "AnswerCount": "1"}});