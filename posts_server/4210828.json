post_cb({"bq_ids": {"n4140": {"so_4210828_4211151_0": {"length": 7, "quality": 0.875, "section_id": 5485}}, "n3337": {"so_4210828_4211151_0": {"length": 7, "quality": 0.875, "section_id": 5271}}, "n4659": {"so_4210828_4211151_0": {"length": 5, "quality": 0.625, "section_id": 4018}}}, "4211151": {"Id": "4211151", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4210828_4211151_0\">$7.3.1/2 - \"Every name first declared\n  in a namespace is a member of that\n  namespace.\"</p>\n</blockquote>\n<p>This means that the name 'test2' is part of the anonymous namespace and should be defined in that namespace if it is used.</p>\n<p>It is not an issue with the anonymous namespace alone but for that matter any namespace.</p>\n", "LastActivityDate": "2010-11-18T02:33:18.630", "CommentCount": "1", "CreationDate": "2010-11-18T02:33:18.630", "ParentId": "4210828", "Score": "4", "OwnerUserId": "418110"}, "4210861": {"Id": "4210861", "PostTypeId": "2", "Body": "<p>What...</p>\n<pre><code>namespace { \n    extern MyString test2; \n} \n</code></pre>\n<p>...does is say test2 should exist in an anonymous namespace, but it doesn't - it's in the global namespace.  You've lied to your compiler, therefore it generates an object that won't link.  You need the extern declaration to be made from the same namespace scope as the variable.</p>\n<p>BUT, there should be a StringConstants.h, which main.cpp should include, such that the compilation unit knows about the strings without any further statements.</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2010-11-18T02:16:21.493", "Score": "5", "CreationDate": "2010-11-18T01:34:42.633", "ParentId": "4210828", "CommentCount": "8", "LastEditDate": "2010-11-18T02:16:21.493", "OwnerUserId": "410767"}, "4210828": {"ViewCount": "5797", "Body": "<p>I can't seem to reference an externally-defined variable from within a namespace using <code>extern</code>.  It works from the global scope, but as soon as a namespace is thrown in there,  it fails to link.  </p>\n<p>My constants file looks like:</p>\n<p><code>StringConstants.cpp</code></p>\n<pre><code>#include \"MyString.h\"\n\nMyString test1(\"string1\");\n\nMyString test2(\"string2\");\n</code></pre>\n<p>The main program looks like this:</p>\n<p><code>main.cpp</code></p>\n<pre><code>#include &lt;stdio.h&gt;\n#include \"MyString.h\"\n\nextern MyString test1;\n\nnamespace {\n    extern MyString test2;\n}\n\nint main(void) {\n    printf(\"%s\\n\", test1.Str());\n    printf(\"%s\\n\", test2.Str());\n}\n</code></pre>\n<p>I get similar errors in both GCC and Visual Studio:</p>\n<pre><code>gcc    main.o StringConstants.o   -o main\nmain.o:main.cpp:(.text+0x49): undefined reference to `(anonymous namespace)::test2'\ncollect2: ld returned 1 exit status\n\n1&gt;Linking...\n1&gt;main.obj : error LNK2001: unresolved external symbol \"class MyString `anonymous namespace'::test2\" (?test2@?A0x0df4aa01@@3VMyString@@A)\n1&gt;C:\\p4\\namespace_repro\\namespace_repro2\\Debug\\namespace_repro2.exe : fatal error LNK1120: 1 unresolved externals\n</code></pre>\n<p>I tried qualifying the reference to test2 (<code>extern MyString ::test2</code>), but it just thinks that test2 is a static member of MyString.  A named namespace doesn't behave differently than an anonymous one.  For various reasons, we don't want to remove namespaces or put the externs outside of the namespaces.</p>\n<p>Here's the other files, for completeness:</p>\n<p><code>MyString.h</code></p>\n<pre><code>class MyString {\npublic:\n   MyString(const char* str): mStr(str) {};\n   const char* Str() const { return mStr; }\nprivate:\n   const char* mStr; \n};\n</code></pre>\n<p><code>Makefile</code></p>\n<pre><code>CC=gcc \nCFLAGS=-Wall\n\nmain: StringConstants.o main.o\n</code></pre>\n<p>The goals for this system are that the constants all be defined in one file, and that they be resolved at link time rather than being in a header.  It seemed like the above code would work, but since it's rejected by two different linkers it seems my understanding of C++ is not good enough.  Advice on how to get this to work, other than putting the externs outside of the namespaces?</p>\n", "AcceptedAnswerId": "4211151", "Title": "C++: Linking extern variables from within a namespace", "CreationDate": "2010-11-18T01:27:31.883", "Id": "4210828", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-11-18T02:33:18.630", "Score": "4", "OwnerUserId": "511506", "Tags": "<c++><namespaces><linker><constants><extern>", "AnswerCount": "2"}});