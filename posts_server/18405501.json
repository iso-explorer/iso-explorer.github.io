post_cb({"bq_ids": {"n4140": {"so_18405501_18405796_1": {"length": 7, "quality": 0.875, "section_id": 0}, "so_18405501_18405796_0": {"length": 12, "quality": 0.8, "section_id": 390}, "so_18405501_18405796_2": {"length": 7, "quality": 1.0, "section_id": 2}}, "n3337": {"so_18405501_18405796_1": {"length": 7, "quality": 0.875, "section_id": 0}, "so_18405501_18405796_0": {"length": 12, "quality": 0.8, "section_id": 381}, "so_18405501_18405796_2": {"length": 7, "quality": 1.0, "section_id": 2}}, "n4659": {"so_18405501_18405796_1": {"length": 7, "quality": 0.875, "section_id": 0}, "so_18405501_18405501_0": {"length": 6, "quality": 0.6, "section_id": 616}, "so_18405501_18405796_0": {"length": 12, "quality": 0.8, "section_id": 407}, "so_18405501_18405796_2": {"length": 7, "quality": 1.0, "section_id": 2}}}, "18405725": {"Id": "18405725", "PostTypeId": "2", "Body": "<p>Yes, a copy constructor  is what it is -- a copy constructor.  Which isn't a conversion constructor that <em>converts</em> from one type to a different type.</p>\n", "LastEditorUserId": "1312406", "LastActivityDate": "2013-08-23T14:56:42.803", "Score": "0", "CreationDate": "2013-08-23T14:46:54.727", "ParentId": "18405501", "CommentCount": "4", "OwnerUserId": "1312406", "LastEditDate": "2013-08-23T14:56:42.803"}, "18405796": {"Id": "18405796", "PostTypeId": "2", "Body": "<p>Quoting the Standard:</p>\n<p>[class.conv.ctor]/3</p>\n<blockquote>\n<p id=\"so_18405501_18405796_0\"><strong>A non-explicit copy-constructor (12.8) is a converting constructor</strong>. An implicitly-declared copy constructor is not an explicit constructor; it may be called for implicit type conversions.</p>\n</blockquote>\n<p>So yes, a copy-ctor is a converting ctor.</p>\n<p>Also note [conv]/1 which specifies and points out in a remark:</p>\n<blockquote>\n<p id=\"so_18405501_18405796_1\">Note: a standard conversion sequence can be empty, i.e., it can consist of no conversions.</p>\n</blockquote>\n<p>and in /3:</p>\n<blockquote>\n<p id=\"so_18405501_18405796_2\">An expression <code>e</code> can be implicitly converted to a type <code>T</code> if and only if the declaration <code>T t=e;</code> is well-formed</p>\n</blockquote>\n<p>So the set of implicit conversions contain the empty conversions.</p>\n", "LastActivityDate": "2013-08-23T14:49:26.873", "CommentCount": "1", "CreationDate": "2013-08-23T14:49:26.873", "ParentId": "18405501", "Score": "10", "OwnerUserId": "420683"}, "18405501": {"ViewCount": "273", "Body": "<p>Since I have doubts about this question (for C++03) I am posting it here.I just read about conversion constructors and it states that </p>\n<blockquote>\n<p id=\"so_18405501_18405501_0\">\"To be a converting constructor, constructor must have single\n  argument and be declared without keyword explicit.\"</p>\n</blockquote>\n<p>Now my question is whether the copy constructor can be called a conversion constructor provided it is not explicitly declared ? Does it qualify to be one ?\nI believe it cant be called a conversion constructor because it only accepts the same type parameter ths resulting in no conversion. For Instance </p>\n<pre><code>foo a;\nfoo b;\na = 100; //a Conversion constructor would be called (i.e) foo(int a){...}\na = b ;  //Since both objects are same type and have been initialized the assignment operator will be called (if there is an overloaded version otherwise the default will be called)\n</code></pre>\n<p>Is my understanding correct ?</p>\n", "Title": "Confused between a copy constructor and a converting constructor", "CreationDate": "2013-08-23T14:35:35.237", "LastActivityDate": "2013-08-23T14:56:42.803", "CommentCount": "12", "PostTypeId": "1", "Id": "18405501", "Score": "5", "OwnerUserId": "1305891", "Tags": "<c++><constructor>", "AnswerCount": "2"}});