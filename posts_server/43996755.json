post_cb({"bq_ids": {"n4140": {"so_43996755_43997199_1": {"length": 13, "quality": 0.5909090909090909, "section_id": 87}}, "n3337": {"so_43996755_43997199_1": {"length": 16, "quality": 0.7272727272727273, "section_id": 82}}, "n4659": {"so_43996755_43997199_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 90}}}, "43997199": {"Id": "43997199", "PostTypeId": "2", "Body": "<p>The problem is that <code>radtest</code> is <code>const</code> (implied by <code>constexpr</code>) so you cannot have <code>double&amp;</code> parameter of <code>sine</code> bind to it.</p>\n<p>If you try and make it <code>double radtest</code> (not constexpr) or if you try and make all template parameters <code>const double&amp;</code> then you get into another problem: you cannot bind a temporary to a reference non-type template parameter. This is explicitly disallowed by the standard:</p>\n<blockquote>\n<p id=\"so_43996755_43997199_0\">\u00a7 14.3.2 Template non-type arguments</p>\n<p id=\"so_43996755_43997199_1\">A <em>template-argument</em> for a non-type <em>template-parameter</em> shall be\n  a converted constant expression (5.20) of the type of the\n  template-parameter. For a non-type <em>template-parameter</em> of reference\n  or pointer type, the value of the constant expression shall not refer\n  to (or for a pointer type, shall not be the address of):</p>\n<ul>\n<li>...</li>\n<li>(1.2) a temporary object (12.2),</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>I personally don't see a way out of this mess. This (using references as template non-type parameters) is really pushing the boundaries of what the C++ template system can do.</p>\n<p>What I can recommend is to just create a <code>constexpr</code> sin function.</p>\n", "LastEditorUserId": "2805305", "LastActivityDate": "2017-05-16T11:06:56.730", "Score": "0", "CreationDate": "2017-05-16T09:15:29.487", "ParentId": "43996755", "CommentCount": "1", "OwnerUserId": "2805305", "LastEditDate": "2017-05-16T11:06:56.730"}, "43996755": {"ViewCount": "60", "Body": "<p>I'm trying to implement a sine function using template metaprogramming. However I get the error 'radtest' is not a valid template argument for  double &amp; because of conflicts in cv-qualification. Here is the code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;double&amp;, int, int&gt; struct \nSeries;\n\ntemplate &lt;double&amp; rad&gt; struct Sine\n{\n    enum\n    {\n        maxterms=10 \n    };      \n\n    static inline double sin()\n    {\n        return (rad) * \n  Series&lt;(rad), 0, maxterms&gt;::val(); \n    }\n};\n\ntemplate &lt;double&amp; rad, int i, int \nmaxterms&gt; struct Series\n{\n   enum \n   {\n         cont = i+1 != maxterms, \n         nxt1 = (i+1)*cont,\n         nxtmax = maxterms*cont      \n   };\n\n   // uses recursive definition of \n   // Sine\n   // sin(x)=x*term(0)\n   // term(n)=1-\n   // x*x/(2*n+2)/(2*n+3)*term(n+1)\n   static inline double val()\n   {\n       return 1 - (rad)*\n(rad)/(2.0*i+2.0)/(2.0*i+3.0)\n      * Series&lt;rad * cont, nxt1, \nnxtmax&gt;::val(); \n\n   }\n};\n\n#define SineT(rad) Sine&lt;rad&gt;::sin()\nconstexpr double radtest=0.707;\n\nint main() \n{\n    cout &lt;&lt; \"Sine of \" &lt;&lt; radtest \n&lt;&lt; \" is: \" &lt;&lt; SineT(radtest);\n    return 0;\n}\n</code></pre>\n<p>What could be the problem? Thanks in advance.</p>\n", "AcceptedAnswerId": "43997199", "Title": "Template metaprogramming, conflicts in cv-qualification error", "CreationDate": "2017-05-16T08:54:52.437", "Id": "43996755", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-05-16T11:06:56.730", "Score": "0", "OwnerUserId": "7902260", "Tags": "<c++><template-meta-programming>", "AnswerCount": "1"}});