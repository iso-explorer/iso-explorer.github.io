post_cb({"20105329": {"CommentCount": "1", "AcceptedAnswerId": "20105367", "CreationDate": "2013-11-20T19:37:56.193", "LastActivityDate": "2013-11-20T19:45:11.473", "PostTypeId": "1", "ViewCount": "264", "FavoriteCount": "2", "Title": "Definition of object in C++", "Id": "20105329", "Score": "3", "Body": "<p>Could someone point me to the (official) definition of object in C++? In the current specification, the word \"object\" is used a few thousand of times, but I can't seem to find a section or reference that explains what an object is.</p>\n<p>The background to this somehow basic question is <a href=\"http://chat.stackoverflow.com/rooms/41277/discussion-between-goto-0-and-daniel-frey\">a discussion I recently had with another user</a>, who was surprised to my question of whether a pointer to a variable of a scoped enum type could be considered an object pointer.\nAccording to what he says, in C++ each variable is an object, hence also the variable <code>i</code> in <code>int i = 42;</code>.\nAnyway, I could find other sources stating that an object in C++ is an instance of a class (and this is surely what I was taught at school many years ago), which contradicts in my understanding the assumption above that any variable is an object. Or is there an explanation to this apparent contradiction?</p>\n", "Tags": "<c++><object><definition>", "OwnerUserId": "1083663", "AnswerCount": "1"}, "20105367": {"ParentId": "20105329", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-11-20T19:39:47.347", "Score": "8", "LastEditorUserId": "103167", "LastEditDate": "2013-11-20T19:45:11.473", "Id": "20105367", "OwnerUserId": "103167", "Body": "<p>References aren't objects.  Instances of pretty much any other type are.</p>\n<p>Here's the definition, found in section 1.8:</p>\n<blockquote>\n<p id=\"so_20105329_20105367_0\">The constructs in a C ++ program create, destroy, refer to, access, and manipulate objects. <strong>An object is a region of storage.</strong> [ Note: A function is not an object, regardless of whether or not it occupies storage in the way that objects do. \u2014 end note ] An object is created by a definition (3.1), by a new-expression (5.3.4) or by the implementation (12.2) when needed. The properties of an object are determined when the object is created. An object can have a name (Clause 3). An object has a storage duration (3.7) which influences its lifetime (3.8). An object has a type (3.9). The term object type refers to the type with which the object is created. Some objects are polymorphic (10.3); the implementation generates information associated with each such object that makes it possible to determine that object's type during program execution. For other objects, the interpretation of the values found therein is determined by the type of the expressions (Clause 5) used to access them.</p>\n</blockquote>\n<p>More useful is the definition of <em>object type</em> in 3.9p8:</p>\n<blockquote>\n<p id=\"so_20105329_20105367_1\">An object type is a (possibly cv-quali\ufb01ed) type that is not a function type, not a reference type, and not a void type.</p>\n</blockquote>\n<p>Functions have function type but they aren't instances, and there never are instances of <code>void</code>.</p>\n<p>To deal with your particular debate, you need the definition of <em>object pointer</em>, from 3.9.2p3:</p>\n<blockquote>\n<p id=\"so_20105329_20105367_2\">The type of a pointer to <code>void</code> or a pointer to an object type is called an object pointer type.</p>\n</blockquote>\n<p>As it turns out, the definition of <em>object</em> never mattered, only the definition of <em>object type</em>.  A pointer to a scoped enum is certainly an object pointer (and it is itself also an object).</p>\n<p>You'll find that the Standard uses the phrase <em>class object</em> when it means to restrict to instances of class, struct, or union type.</p>\n", "LastActivityDate": "2013-11-20T19:45:11.473"}, "bq_ids": {"n4140": {"so_20105329_20105367_2": {"section_id": 7223, "quality": 0.9090909090909091, "length": 10}, "so_20105329_20105367_0": {"section_id": 5790, "quality": 0.8, "length": 72}, "so_20105329_20105367_1": {"section_id": 763, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_20105329_20105367_2": {"section_id": 6967, "quality": 0.9090909090909091, "length": 10}, "so_20105329_20105367_0": {"section_id": 5563, "quality": 0.8, "length": 72}, "so_20105329_20105367_1": {"section_id": 750, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_20105329_20105367_2": {"section_id": 8732, "quality": 0.8181818181818182, "length": 9}, "so_20105329_20105367_0": {"section_id": 7247, "quality": 0.7111111111111111, "length": 64}, "so_20105329_20105367_1": {"section_id": 307, "quality": 0.7272727272727273, "length": 8}}}});