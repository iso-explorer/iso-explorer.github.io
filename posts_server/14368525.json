post_cb({"14368589": {"Id": "14368589", "PostTypeId": "2", "Body": "<p>\u00a713.5.8/3 says:</p>\n<blockquote>\n<p id=\"so_14368525_14368589_0\">The declaration of a literal operator shall have a\n  parameter-declaration-clause equivalent to one of the following:</p>\n<pre><code>const char*\nunsigned long long int\nlong double\nchar\nwchar_t\nchar16_t\nchar32_t\nconst char*, std::size_t\nconst wchar_t*, std::size_t\nconst char16_t*, std::size_t\nconst char32_t*, std::size_t\n</code></pre>\n</blockquote>\n<p>So it looks like you can't have a parameter of <code>initializer_list</code> type.</p>\n<p>I can only think of the obvious as an alternative; if you don't mind typing a little more you can do something like</p>\n<pre><code>std::vector&lt;int&gt; v(std::initializer_list&lt;int&gt; l) {\n    return { l };\n}\n\nint someval = 1;\nif(v({1,2,3,4}).contains(someval))\n</code></pre>\n<p>Alternatively you could get wacky and write an operator overload for <code>initializer_list</code> (haven't tested though):</p>\n<pre><code>bool operator&lt;=(std::intializer_list&lt;int&gt; l, int value) {\n    return std::find(std::begin(l), std::end(l), value) != std::end(l);\n}\n</code></pre>\n<p>And</p>\n<pre><code>if ({1, 2, 3, 4} &lt;= 3)\n</code></pre>\n<p>should work...</p>\n<p><strong>Actually nevermind, it doesn't.</strong> You'll have to go with a normal function.</p>\n", "LastEditorUserId": "726361", "LastActivityDate": "2013-01-16T22:43:26.160", "Score": "4", "CreationDate": "2013-01-16T21:55:47.003", "ParentId": "14368525", "CommentCount": "13", "OwnerUserId": "726361", "LastEditDate": "2013-01-16T22:43:26.160"}, "bq_ids": {"n4140": {"so_14368525_14368589_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 669}}, "n3337": {"so_14368525_14368589_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 659}}, "n4659": {"so_14368525_14368589_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 697}}}, "14368711": {"Id": "14368711", "PostTypeId": "2", "Body": "<p>How about this:</p>\n<pre><code>#include &lt;initializer_list&gt;\n\ntemplate &lt;typename T&gt;\nbool contains(std::initializer_list&lt;T&gt; const &amp; il, T const &amp; x)\n{\n    for (auto const &amp; z : il) { if (z == x) return true; }\n    return false;\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code>bool b = contains({1, 2, 3}, 5);  // false\n</code></pre>\n", "LastActivityDate": "2013-01-16T22:03:49.963", "CommentCount": "2", "CreationDate": "2013-01-16T22:03:49.963", "ParentId": "14368525", "Score": "7", "OwnerUserId": "596781"}, "14371437": {"Id": "14371437", "PostTypeId": "2", "Body": "<blockquote>\n<blockquote>\n<p id=\"so_14368525_14371437_2\">you'd expect syntax to be</p>\n<pre><code>if value in (value1, value2 ...) \n</code></pre>\n<p id=\"so_14368525_14371437_3\">or something similar.</p>\n</blockquote>\n</blockquote>\n<p>If you're willing to add <em>one extra character</em>, try this syntax:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;array&gt;\n\ntemplate &lt;typename T0, typename T1, std::size_t N&gt;\nbool operator *(const T0&amp; lhs, const std::array&lt;T1, N&gt;&amp; rhs) {\n  return std::find(begin(rhs), end(rhs), lhs) != end(rhs);\n}\n\ntemplate&lt;class T0, class...T&gt; std::array&lt;T0, 1+sizeof...(T)&gt; in(T0 arg0, T...args) {\n  return {{arg0, args...}};\n}\n\nint main () {\n  if( 2 *in(1,2,3) ) { std::cout &lt;&lt; \"Hello\\n\"; }\n  if( 4 *in(5,6,7,8) ) { std::cout &lt;&lt; \"Goodbye\\n\"; }\n}\n</code></pre>\n", "LastActivityDate": "2013-01-17T02:48:37.723", "CommentCount": "5", "CreationDate": "2013-01-17T02:48:37.723", "ParentId": "14368525", "Score": "6", "OwnerUserId": "8747"}, "14368525": {"ViewCount": "1408", "Body": "<p>I don't know if it's possible but I want to do stuff like </p>\n<pre><code>int someval = 1;\nif({1,2,3,4}_v.contains(someval ))\n</code></pre>\n<p>but when I try to define literal as:</p>\n<pre><code>std::vector&lt;int&gt; operator\"\" _v ( std::initializer_list&lt;int&gt; t )\n{\n    return std::vector&lt;int&gt; (t);\n}\n</code></pre>\n<p>to accept initializer list of ints I get </p>\n<pre><code> error: 'std::vector&lt;int&gt; operator\"\" _v(std::initializer_list&lt;int&gt; t)' has invalid argument list\n</code></pre>\n<p>Is there a way to do this? What I really want is to finally be rid of stuff like</p>\n<pre><code>if(value == 1 || value ==2 || value == 3 ...\n</code></pre>\n<p>Having to write stuff like this is really annoying, because you'd expect syntax to be</p>\n<pre><code>if value in (value1, value2 ...) \n</code></pre>\n<p>or something similar.</p>\n", "AcceptedAnswerId": "14371437", "Title": "Initializer list in user-defined literal parameter", "CreationDate": "2013-01-16T21:50:37.887", "Id": "14368525", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-01-16T22:02:06.503", "LastEditorUserId": "1143162", "LastActivityDate": "2013-01-17T02:48:37.723", "Score": "7", "OwnerUserId": "1143162", "Tags": "<c++><c++11>", "AnswerCount": "3"}});