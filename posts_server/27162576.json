post_cb({"27162576": {"CommentCount": "1", "ViewCount": "63", "PostTypeId": "1", "LastEditorUserId": "1452670", "CreationDate": "2014-11-27T03:24:27.217", "LastActivityDate": "2014-11-29T03:22:30.210", "Title": "Portability of iterating over an array using a pointer", "AcceptedAnswerId": "27162630", "LastEditDate": "2014-11-27T04:46:03.107", "Id": "27162576", "Score": "-2", "Body": "<p>Will the following assertion always be true regardless of the platform, and do you have a reference for this guarantee?</p>\n<pre><code>const unsigned SIZE = 10;\nFoo array[SIZE];\nFoo* ptr = array;\nfor (int i = 0; i &lt; SIZE; ++i) {\n    assert(&amp;array[i] == (ptr + i));\n}\n</code></pre>\n<p>Edit:\nTo clarify the question, a for loop can be used to iterate over the elements of an array in the following ways:</p>\n<pre><code>for (int i = 0; i &lt; array_size; ++i) {\n   DoSomethingWith(array[i]);\n}\n\n\nFoo* end = array + array_size;\nfor (Foo* ptr = array; ptr &lt; end; ++ptr) {\n   DoSomethingWith(*ptr);\n}\n</code></pre>\n<p>My understanding is that not all architectures use the same order when addressing memory, so I was curious about the portability of the pointer method. If you were to search this website for the use of \"iterate array with pointer\" or mistakenly include endian in the search, nothing relevant appears.</p>\n", "Tags": "<c++><c><arrays><pointers>", "OwnerUserId": "1452670", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27162576_27162630_0": {"section_id": 5986, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_27162576_27162630_0": {"section_id": 5754, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_27162576_27162630_0": {"section_id": 7486, "quality": 0.8333333333333334, "length": 5}}}, "27162630": {"ParentId": "27162576", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>C++ standard, section \u00a7 5.2.2 [expr.sub] :</p>\n<blockquote>\n<p id=\"so_27162576_27162630_0\">The expression E1[E2] is identical (by definition) to *((E1)+(E2))</p>\n</blockquote>\n<p>So <code>array[i]</code> is identical to <code>*(array + i)</code></p>\n<p>Since <code>ptr == array</code> it is also <code>*(ptr + i)</code></p>\n<p>So, <code>&amp;array[i]</code> is <code>&amp;(*(ptr + i))</code>, which is <code>(ptr + i)</code></p>\n<hr>\n<p><strong>Note:</strong></p>\n<p>This is assuming that you did not override <code>Foo::operator &amp;</code> : if so, the result of <code>&amp;(*(ptr + i))</code> might not be <code>(ptr + i)</code>.</p>\n</hr>", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-11-29T03:22:30.210", "Id": "27162630", "Score": "3", "CreationDate": "2014-11-27T03:30:50.503", "LastActivityDate": "2014-11-29T03:22:30.210"}});