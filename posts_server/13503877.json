post_cb({"13504228": {"ParentId": "13503877", "CommentCount": "2", "Body": "<p>No, because <code>Ts...</code> is a pack-expansion.</p>\n<p><code>\u00a714.5.3 [temp.variadic]</code></p>\n<blockquote>\n<p id=\"so_13503877_13504228_0\">p4 A <em>pack expansion</em> consists of a <em>pattern</em> and an ellipsis, the instantiation of which produces zero or more instantiations of the pattern in a list (described below). The form of the pattern depends on the context in which the expansion occurs. Pack expansions can occur in the following contexts:</p>\n<ul>\n<li>[...]</li>\n<li>In a template parameter pack that is a pack expansion (14.1):\n  <ul>\n<li>if the template parameter pack is a <em>parameter-declaration</em>; the pattern is the <em>parameter-declaration</em> without the ellipsis;</li>\n<li>[...]</li>\n</ul></li>\n</ul>\n<p id=\"so_13503877_13504228_1\">p6 The instantiation of a pack expansion [...] produces a list <em>E<sub>1</sub>, E<sub>2</sub>, ..., E<sub>N</sub></em>, where <em><code>N</code></em> is the number of elements in the pack expansion parameters. [...]</p>\n</blockquote>\n<p>So both your examples would be ill-formed, since <code>DEF</code> will take exactly <code>&lt;int, bool&gt;</code>.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "13504228", "Score": "2", "CreationDate": "2012-11-22T00:28:12.317", "LastActivityDate": "2012-11-22T00:28:12.317"}, "bq_ids": {"n4140": {"so_13503877_13504228_0": {"section_id": 121, "quality": 0.8888888888888888, "length": 24}, "so_13503877_13504228_1": {"section_id": 124, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_13503877_13504228_0": {"section_id": 116, "quality": 0.8888888888888888, "length": 24}, "so_13503877_13504228_1": {"section_id": 118, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_13503877_13504228_0": {"section_id": 125, "quality": 0.8888888888888888, "length": 24}, "so_13503877_13504228_1": {"section_id": 128, "quality": 0.9166666666666666, "length": 11}}}, "13503877": {"CommentCount": "0", "ViewCount": "199", "PostTypeId": "1", "LastEditorUserId": "500104", "CreationDate": "2012-11-21T23:44:09.317", "LastActivityDate": "2012-11-22T00:29:03.083", "Title": "Is a heterogeneous variadic non-type template argument count flexible?", "AcceptedAnswerId": "13504228", "LastEditDate": "2012-11-22T00:29:03.083", "Id": "13503877", "Score": "0", "Body": "<p>The following defines a variadic non-type nested class template, <code>DEF</code>. The non-type template parameters may be heterogeneous according to the type arguments provided for <code>Ts</code>.</p>\n<pre><code>template &lt;typename ...Ts&gt;\nstruct ABC {\n  template &lt;Ts ...Xs&gt;\n  struct DEF {};\n};\n</code></pre>\n<p>A <code>DEF</code> object can be declared as follows:</p>\n<pre><code>ABC&lt;int,bool&gt;::DEF&lt;17,true&gt; x;\n</code></pre>\n<p>My question is, can the number of non-type template arguments provided to <code>DEF</code> be less than the number of type template arguments provided to <code>ABC</code>? For example, are either of these declarations valid:</p>\n<pre><code>ABC&lt;int,bool&gt;::DEF&lt;17&gt; y;\nABC&lt;int,bool&gt;::DEF&lt;  &gt; z;\n</code></pre>\n", "Tags": "<c++><templates><c++11><variadic-templates>", "OwnerUserId": "2023370", "AnswerCount": "1"}});