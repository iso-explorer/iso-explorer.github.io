post_cb({"bq_ids": {"n4140": {"so_28763052_28763052_5": {"section_id": 5522, "quality": 0.8333333333333334, "length": 20}, "so_28763052_28763052_3": {"section_id": 7041, "quality": 1.0, "length": 12}}, "n3337": {"so_28763052_28763052_5": {"section_id": 5308, "quality": 0.8333333333333334, "length": 20}, "so_28763052_28763052_3": {"section_id": 6786, "quality": 1.0, "length": 12}}, "n4659": {"so_28763052_28763052_5": {"section_id": 6957, "quality": 0.8333333333333334, "length": 20}, "so_28763052_28763052_3": {"section_id": 8538, "quality": 1.0, "length": 12}}}, "28763052": {"CommentCount": "2", "ViewCount": "62", "ClosedDate": "2015-02-27T11:58:29.780", "CreationDate": "2015-02-27T10:39:14.610", "LastActivityDate": "2015-02-27T10:39:14.610", "Title": "Does C++ allow unused variables to have multiple definitions?", "PostTypeId": "1", "Id": "28763052", "Score": "4", "Body": "<p>Given one source file</p>\n<pre><code>int a = 1;\n</code></pre>\n<p>and another source file</p>\n<pre><code>int a = 1;\nint main() { }\n</code></pre>\n<p>implementations commonly reject this, and that makes sense to me, even though <code>a</code> is unused.</p>\n<p>However, I'm unable to find where the standard says this is an error.</p>\n<p>In C, this is covered by (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28763052_28763052_0\"><strong>6.9 External definitions</strong></p>\n<p id=\"so_28763052_28763052_1\">5 An <em>external definition</em> is an external declaration that is also a definition of a function (other than an inline definition) or an object. If an identifier declared with external linkage is used in an expression (other than as part of the operand of a <code>sizeof</code> operator whose result is an integer constant), somewhere in the entire program there shall be exactly one external definition for the identifier; <strong>otherwise, there shall be no more than one.</strong></p>\n</blockquote>\n<p>As this appears outside of a constraint, in C, the behaviour is simply undefined. Implementations are allowed to reject it, or they are allowed to silently accept it without so much as a warning, in which case no guarantees are made about the behaviour. I'm pretty sure the intent is the same for C++.</p>\n<p>I'm able to find the equivalent of \"somewhere in the entire program there shall be exactly one external definition for the identifier\" in the C++ standard in [basic.def.odr]:</p>\n<blockquote>\n<p id=\"so_28763052_28763052_2\"><strong>3.2 One definition rule [basic.def.odr]</strong></p>\n<p id=\"so_28763052_28763052_3\">4 Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required. [...]</p>\n</blockquote>\n<p>However, I'm not able to find wording that covers objects or functions that are not odr-used. Does the standard specify anywhere that this is an error? If so, where?</p>\n<p>[basic.def.odr] also contains restrictions on certain types of entities that can normally have multiple definitions in p6, stating effectively that all definitions must be identical. But that only covers \"a class type (Clause 9), enumeration type (7.2), inline function with external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for which some template parameters are not specified (14.7, 14.5.5)\", not global variables, and besides, the definitions do match.</p>\n<p>I suspected that [dcl.link] might address this, but it doesn't, the closest it comes is in a note about entities with C linkage that just refers back to [basic.def.odr]:</p>\n<blockquote>\n<p id=\"so_28763052_28763052_4\"><strong>7.5 Linkage specifications [dcl.link]</strong></p>\n<p id=\"so_28763052_28763052_5\">6 [...] [ <em>Note:</em> Only one definition for an entity with a given name with C language linkage may appear in the program (see 3.2); this implies that such an entity must not be defined in more than one namespace scope. -- <em>end note</em> ] [...]</p>\n</blockquote>\n<p>I'm almost certain I'm simply overlooking something, since it seems obvious that this is an error.</p>\n", "Tags": "<c++><language-lawyer><one-definition-rule>", "OwnerUserId": "743382", "AnswerCount": "0"}});