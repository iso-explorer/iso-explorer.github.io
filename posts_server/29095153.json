post_cb({"bq_ids": {"n4140": {"so_29095153_29095435_0": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}}, "n3337": {"so_29095153_29095435_0": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}}, "n4659": {"so_29095153_29095435_0": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}}}, "29095153": {"CommentCount": "0", "ViewCount": "146", "CreationDate": "2015-03-17T09:11:49.733", "LastActivityDate": "2015-03-17T09:38:05.993", "Title": "Initializing object of derived class using initializer-list", "AcceptedAnswerId": "29095460", "PostTypeId": "1", "Id": "29095153", "Score": "1", "Body": "<p>I got a <code>struct B</code> that is derived from a <code>struct A</code>.</p>\n<pre><code>struct A{\n  int a;  \n};\n\nstruct B : public A{\n    int b;\n};\n</code></pre>\n<p>Is there a straight way to initialize an object of type <code>B</code> without providing a constructor, let's say using initializer-list?</p>\n<p><em>Some more insight</em>:</p>\n<p>I got two <code>struct</code>s that I use to pass data between threads; the second one holds the same data as the first one, with the addition of some <em>synchronization variable</em>. I could make the first <code>struct</code> a data member of the second one, or just duplicate the declaration of data members in the second <code>struct</code>, to easily use the initializer-list; but I think that <em>in this particular application</em> it would be logically more correct that the second <code>struct</code> extends the first one.</p>\n", "Tags": "<c++><c++11><initialization><initializer-list>", "OwnerUserId": "2508150", "AnswerCount": "2"}, "29095460": {"ParentId": "29095153", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There isn't an extremely concise solution, but there <em>is</em> a solution at least:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;utility&gt;\n\nstruct B : A\n{\n    int b;\n\n    template &lt;typename ...Args,\n              typename = typename std::enable_if&lt;\n                             std::is_constructible&lt;A, Args&amp;&amp;...&gt;::value&gt;\n    B(int x, Args &amp;&amp;... args)\n    : b(x), A(std::forward&lt;Args&gt;(args)...)\n    { }\n};\n</code></pre>\n<p>This solution isn't exactly short, but it is general. The new constructor for <code>B</code> exists only in those specializations which make sense, thanks to the enable-if SFINAE, so <code>B</code> is precisely as constructible as it can be.</p>\n<p>There is one more danger here that I didn't address, namely how <code>explicit</code> the new constructor should be. Ideally it should be as explicit as the matching <code>A</code> constructor, but that's a bit hard to detect programatically (as done in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4064\" rel=\"nofollow\">N4064</a> for pairs and tuples).</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2015-03-17T09:32:50.363", "Id": "29095460", "Score": "3", "CreationDate": "2015-03-17T09:26:29.260", "LastActivityDate": "2015-03-17T09:32:50.363"}, "29095435": {"ParentId": "29095153", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can't use aggregate initialization for <code>B</code>, because it's not an aggregate, as per [dcl.init.aggr]/1:</p>\n<blockquote>\n<p id=\"so_29095153_29095435_0\">An <em>aggregate</em> is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or\n  protected non-static data members (Clause 11), <strong>no base classes</strong> (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>Update: Kerrek SB provided a good solution using template constructor, but if you like, you can add quite straightforward non-template constructor for <code>B</code>:</p>\n<pre><code>struct B : public A{\n    int b;\n    B(const A&amp; a_, int b_) : A(a_), b(b_) {}\n};\n</code></pre>\n<p>And use it with one extra pair of braces:</p>\n<pre><code>B b {{3}, 5};\n</code></pre>\n", "OwnerUserId": "3959454", "LastEditorUserId": "3959454", "LastEditDate": "2015-03-17T09:38:05.993", "Id": "29095435", "Score": "0", "CreationDate": "2015-03-17T09:25:36.767", "LastActivityDate": "2015-03-17T09:38:05.993"}});