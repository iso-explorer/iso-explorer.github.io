post_cb({"bq_ids": {"n4140": {"so_35757109_35757258_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 7153}}, "n3337": {"so_35757109_35757258_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 6897}}, "n4659": {"so_35757109_35757258_0": {"length": 22, "quality": 0.6285714285714286, "section_id": 8657}}}, "35757109": {"ViewCount": "219", "Body": "<p>I know that there are only realy basic guarantees about when a static variable is initialised. The most important thing (for me) that is not guaranteed is the order of initialisation of variables in different compilation units, which raised the following question.</p>\n<p>I have always written my singleton classes like this:</p>\n<pre><code>class A {\n    ...\n    public:\n       static std::shared_ptr&lt;A&gt; getInstance();\n    private:\n       static std::shared_ptr&lt;A&gt; _instance;\n}\n== A.cpp ==\nstd::shared_ptr&lt;A&gt; A::getInstance() {\n    if(!_instance)\n       _instance = std::make_shared&lt;A&gt;();\n    return _instance;\n}\n</code></pre>\n<p>However as far as I understand this does not guarantee that instance is already initialized (and therefore calling operator bool is valid) if I call this function in the constructor of any other static Object (which might in some rare case happen before main starts execution).</p>\n<p>My new idea is the following:</p>\n<pre><code> class A {\n    ...\n    public:\n       static std::shared_ptr&lt;A&gt; getInstance();\n}\n== A.cpp ==\nA&amp; A::getInstance() {\n    static std::shared_ptr&lt;A&gt; _instance = std::make_shared&lt;A&gt;();\n    return _instance;\n}\n</code></pre>\n<p>Which in my opinion is not just cleaner but also better code, because now I have a guaranteed order of initialisation. </p>\n<p>Are my assumptions correct ?</p>\n", "AcceptedAnswerId": "35757258", "Title": "getInstance - Class vs Method static", "CreationDate": "2016-03-02T20:08:43.050", "Id": "35757109", "CommentCount": "7", "LastEditDate": "2016-03-03T12:55:53.163", "PostTypeId": "1", "LastEditorUserId": "3029308", "LastActivityDate": "2016-03-03T12:55:53.163", "Score": "0", "OwnerUserId": "3029308", "Tags": "<c++><static><initialization><singleton>", "AnswerCount": "1"}, "35757258": {"Id": "35757258", "PostTypeId": "2", "Body": "<p>Actually <code>_instance</code> is guaranteed to be initialized before the first call to <code>getInstance()</code> (provided that they are defined in the same translation unit)</p>\n<p>From the Standard <strong><em>3.6.2-4 Initialization of non-local variables</em></strong>:</p>\n<blockquote>\n<p id=\"so_35757109_35757258_0\">It is implementation-defined whether the dynamic initialization of a non-local variable with static storage\n  duration is done before the first statement of main. If the initialization is deferred to some point in time\n  after the first statement of main, it shall occur before the first odr-use (3.2) of any function or variable\n  defined in the same translation unit as the variable to be initialized.35</p>\n</blockquote>\n", "LastActivityDate": "2016-03-02T20:18:14.973", "CommentCount": "0", "CreationDate": "2016-03-02T20:18:14.973", "ParentId": "35757109", "Score": "0", "OwnerUserId": "1707560"}});