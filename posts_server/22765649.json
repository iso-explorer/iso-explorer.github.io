post_cb({"22765765": {"ParentId": "22765649", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The reference itself isn't <code>const</code>, just the object it refers to; so (arguably) this rule doesn't give the reference internal linkage.</p>\n<p>It doesn't make sense for a reference to be declared <code>const</code>. The C++11 standard clarifies the wording:</p>\n<blockquote>\n<p id=\"so_22765649_22765765_0\">a variable that is explicitly declared <code>const</code> or <code>constexpr</code> and neither explicitly declared <code>extern</code> nor previously declared to have external linkage</p>\n</blockquote>\n<p>with no mention of the nonsensical concept of references declared <code>const</code>.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-03-31T16:05:21.713", "Id": "22765765", "Score": "2", "CreationDate": "2014-03-31T15:30:42.803", "LastActivityDate": "2014-03-31T16:05:21.713"}, "22765649": {"CommentCount": "0", "AcceptedAnswerId": "22765765", "CreationDate": "2014-03-31T15:25:33.467", "LastActivityDate": "2014-04-02T11:05:26.943", "PostTypeId": "1", "ViewCount": "173", "FavoriteCount": "1", "Title": "Does const reference have external linkage in C++?", "Id": "22765649", "Score": "5", "Body": "<p>According to clause 3 of section 3.5 of C++ 1998 standard, a const reference has internal linkage.</p>\n<blockquote>\n<p id=\"so_22765649_22765649_0\">A name having namespace scope (3.3.5) has internal linkage if it is the name of</p>\n<ul>\n<li><p id=\"so_22765649_22765649_1\">an object, reference, function or function template that is explicitly declared static or,</p></li>\n<li><p id=\"so_22765649_22765649_2\">an object or reference that is explicitly declared const and neither explicitly declared extern nor previously declared to have external linkage; or</p></li>\n<li>a data member of an anonymous union.</li>\n</ul>\n</blockquote>\n<p>But why multiple definition conflict is generated when compiling the following code?</p>\n<pre><code>// a.cpp\nconst int&amp; a = 1;\n\nint main()\n{\n    return 0;\n}\n\n// b.cpp\nconst int&amp; a = 1;\n</code></pre>\n<p>And then compile the code.</p>\n<pre><code>$ g++ a.cpp b.cpp\n/tmp/ccb5Qi0M.o:(.bss+0x0): multiple definition of `a'\n/tmp/ccD9vrzP.o:(.bss+0x0): first defined here\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>If the const reference is changed to const, as follows</p>\n<pre><code>// a.cpp\nconst int a = 1;\n\nint main()\n{\n    return 0;\n}\n\n// b.cpp\nconst int a = 1;\n</code></pre>\n<p>It is OK to compile.</p>\n", "Tags": "<c++><compiler-construction><linker>", "OwnerUserId": "471846", "AnswerCount": "2"}, "22809443": {"ParentId": "22765649", "CommentCount": "0", "Body": "<p>I think @Mike is correct, here is no new thing, just a little tip.</p>\n<p>There is reference and the object that referenced to, the object can be constant then comes internal linkage, but the reference itself can never be constant since it has no CV concept(reference was initialized during declaration, then never shift to some object else, I remember GCC complains if you give a constant reference, mean for int const&amp; r = o; although VS was not complaining, that just makes no sense), since the reference is neither constant nor static, then the declaration crosses source files.</p>\n", "OwnerUserId": "1356874", "PostTypeId": "2", "Id": "22809443", "Score": "0", "CreationDate": "2014-04-02T11:05:26.943", "LastActivityDate": "2014-04-02T11:05:26.943"}, "bq_ids": {"n4140": {"so_22765649_22765649_1": {"section_id": 5768, "quality": 0.875, "length": 7}, "so_22765649_22765765_0": {"section_id": 7136, "quality": 1.0, "length": 15}, "so_22765649_22765649_2": {"section_id": 7136, "quality": 0.8666666666666667, "length": 13}, "so_22765649_22765649_0": {"section_id": 7136, "quality": 0.875, "length": 7}}, "n3337": {"so_22765649_22765649_1": {"section_id": 5541, "quality": 0.875, "length": 7}, "so_22765649_22765765_0": {"section_id": 6880, "quality": 1.0, "length": 15}, "so_22765649_22765649_2": {"section_id": 6880, "quality": 0.8666666666666667, "length": 13}, "so_22765649_22765649_0": {"section_id": 6880, "quality": 0.875, "length": 7}}, "n4659": {"so_22765649_22765649_1": {"section_id": 7225, "quality": 0.875, "length": 7}, "so_22765649_22765765_0": {"section_id": 8637, "quality": 0.8666666666666667, "length": 13}, "so_22765649_22765649_2": {"section_id": 8637, "quality": 0.8, "length": 12}, "so_22765649_22765649_0": {"section_id": 8637, "quality": 0.875, "length": 7}}}});