post_cb({"48089239": {"Id": "48089239", "PostTypeId": "2", "Body": "<p>All the <code>cname</code> library headers that bring in functionality from the C standard library must introduce those symbols in namespace <code>std</code>. They also <em>may</em>, but definitely not <em>must</em> introduce them into the global namesapce. <a href=\"https://timsong-cpp.github.io/cppwp/n4659/headers#4\" rel=\"noreferrer\">[headers]/4</a>:</p>\n<blockquote>\n<p id=\"so_48089039_48089239_0\">Except as noted in Clauses [library] through [thread] and Annex\n  [depr], the contents of each header cname is the same as that of the\n  corresponding header name.h as specified in the C standard library. In\n  the C++ standard library, however, the declarations (except for names\n  which are defined as macros in C) are within namespace scope of the\n  namespace std. It is unspecified whether these names (including any\n  overloads added in Clauses [language.support] through [thread] and\n  Annex [depr]) are first declared within the global namespace scope and\n  are then injected into namespace std by explicit using-declarations.</p>\n</blockquote>\n<p>So different compilers, and even different compiler versions, mean different implementation details.</p>\n", "LastActivityDate": "2018-01-04T05:33:14.527", "Score": "7", "CreationDate": "2018-01-04T05:33:14.527", "ParentId": "48089039", "CommentCount": "5", "OwnerUserId": "817643"}, "bq_ids": {"n4140": {"so_48089039_48089239_0": {"length": 41, "quality": 0.7454545454545455, "section_id": 6259}}, "n3337": {"so_48089039_48089239_0": {"length": 41, "quality": 0.7454545454545455, "section_id": 6019}}, "n4659": {"so_48089039_48089239_0": {"length": 47, "quality": 0.8545454545454545, "section_id": 7763}}}, "48089039": {"ViewCount": "101", "Body": "<p>Consider following program:</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n\nint main()\n{\n    int d = (int)(abs(0.6) + 0.5);\n    printf(\"%d\", d);\n    return 0;\n}\n</code></pre>\n<p><code>g++</code> 7.2.0 Output 0 ( See live demo <a href=\"https://wandbox.org/permlink/H6jEzHS3eV0f8V4m\" rel=\"nofollow noreferrer\">here</a> )</p>\n<p><code>g++</code> 6.3.0 ( See live demo <a href=\"https://wandbox.org/permlink/DrctV9KhyHTFiZda\" rel=\"nofollow noreferrer\">here</a> )</p>\n<pre><code>prog.cc: In function 'int main()':\nprog.cc:6:26: error: 'abs' was not declared in this scope\n     int d = (int)(abs(0.6) + 0.5);\n                          ^\nprog.cc:6:26: note: suggested alternative:\nIn file included from prog.cc:2:0:\n/opt/wandbox/gcc-6.3.0/include/c++/6.3.0/cmath:103:5: note:   'std::abs'\n     abs(_Tp __x)\n     ^~~\n</code></pre>\n<p><code>clang++</code> 5.0.0 Output 1 ( See live demo <a href=\"https://wandbox.org/permlink/33f0UBvov4KpYUsM\" rel=\"nofollow noreferrer\">here</a> )</p>\n<p><code>clang++</code> 3.6.0 ( See live demo <a href=\"https://wandbox.org/permlink/BSAZhuY5n9HdJEFm\" rel=\"nofollow noreferrer\">here</a> )</p>\n<pre><code>prog.cc:6:19: error: use of undeclared identifier 'abs'; did you mean 'fabs'?\n    int d = (int)(abs(0.6) + 0.5);\n                  ^~~\n                  fabs\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:181:14: note: 'fabs' declared here\n__MATHCALLX (fabs,, (_Mdouble_ __x), (__const__));\n             ^\n/usr/include/math.h:71:26: note: expanded from macro '__MATHCALLX'\n  __MATHDECLX (_Mdouble_,function,suffix, args, attrib)\n                         ^\n/usr/include/math.h:73:22: note: expanded from macro '__MATHDECLX'\n  __MATHDECL_1(type, function,suffix, args) __attribute__ (attrib); \\\n                     ^\n/usr/include/math.h:76:31: note: expanded from macro '__MATHDECL_1'\n  extern type __MATH_PRECNAME(function,suffix) args __THROW\n                              ^\n/usr/include/math.h:79:42: note: expanded from macro '__MATH_PRECNAME'\n#define __MATH_PRECNAME(name,r) __CONCAT(name,r)\n                                         ^\n/usr/include/x86_64-linux-gnu/sys/cdefs.h:88:23: note: expanded from macro '__CONCAT'\n#define __CONCAT(x,y)   x ## y\n                        ^\n1 error generated.\n</code></pre>\n<p>Microsoft VC++ 19.00.23506 Output 1 ( See live demo <a href=\"http://rextester.com/DSVV79869\" rel=\"nofollow noreferrer\">here</a> )</p>\n<p>What exactly is happening here in this program ? Why it gives different output when compiled on different C++ compilers ? Why program exhibits different behavior even on different version of same compiler ? Is this compiler issue or standard library (<code>libstdc++</code> &amp; <code>libc++</code>) issue ? What C++ standard says about this ?</p>\n<p><strong>P.S:</strong> I know that I need to write <code>std::abs</code> instead of <code>abs</code>. But this is not my question.</p>\n", "AcceptedAnswerId": "48089239", "Title": "Unusual behavior of standard library function abs() on different C++ compilers", "CreationDate": "2018-01-04T05:11:31.980", "Id": "48089039", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2018-01-04T05:33:14.527", "Score": "1", "OwnerUserId": "3777958", "Tags": "<c++><language-lawyer><libstdc++><c++-standard-library><libc++>", "AnswerCount": "1"}});