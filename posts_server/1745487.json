post_cb({"1745540": {"Id": "1745540", "PostTypeId": "2", "Body": "<p>The concept of an \"instance\" isn't something that's really intrinsic to C++ -- basically you have \"things which have a constructor and things which don't\".</p>\n<p>So, all types have a size, e.g. an int is commonly 4 bytes, a struct with a couple of ints is going to be 8 and so on.  Now, slap a constructor on that struct, and it starts looking (and behaving) like a class.  More specifically:</p>\n<pre><code>int foo; // &lt;-- 4 bytes, no constructor\n\nstruct Foo\n{\n  int foo;\n  int bar;\n}; // &lt;-- 8 bytes, no constructor\n\nstruct Foo\n{\n  Foo() : foo(0), bar(0) {}\n  int foo;\n  int bar;\n}; // &lt;-- 8 bytes, with constructor\n</code></pre>\n<p>Now, you any of these types can live on the <em>stack</em> or on the <em>heap</em>.  When you create something on the <em>stack</em>, like the \"int foo;\" above, goes away after its scope goes away (e.g. at the end of the function call).  If you create something with \"new\" it goes on the <em>heap</em> and gets its own place to live in memory until you call <em>delete</em> on it.  In both cases the constructor, if there, will be called during instantiation.</p>\n", "LastActivityDate": "2009-11-16T23:23:57.687", "CommentCount": "0", "CreationDate": "2009-11-16T23:23:57.687", "ParentId": "1745487", "Score": "2", "OwnerUserId": "211626"}, "1745487": {"ViewCount": "258", "Body": "<p>What types in C++ can be instantiated?</p>\n<p>I know that the following each directly create a single instance of <code>Foo</code>:</p>\n<pre><code>Foo bar;\nFoo *bizz = new Foo();\n</code></pre>\n<p>However, what about with built-in types?  Does the following create two instances of <code>int</code>, or is instance the wrong word to use and memory is just being allocated?</p>\n<pre><code>int bar2;\nint *bizz2 = new int;\n</code></pre>\n<p>What about pointers?  Did the above example create an <code>int *</code> instance, or just allocate memory for an <code>int *</code>?</p>\n<p>Would using literals like <code>42</code> or <code>3.14</code> create an instance as well?</p>\n<p>I've seen the argument that if you cannot subclass a type, it is not a class, and if it is not a class, it cannot be instantiated.  Is this true?</p>\n", "AcceptedAnswerId": "1745667", "Title": "What can be instantiated?", "CreationDate": "2009-11-16T23:15:02.547", "Id": "1745487", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2009-11-16T23:21:14.280", "LastEditorUserId": "39992", "LastActivityDate": "2009-11-17T00:19:30.030", "Score": "5", "OwnerUserId": "39992", "Tags": "<c++><oop>", "AnswerCount": "5"}, "1745667": {"Id": "1745667", "PostTypeId": "2", "Body": "<p>So long as we're talking about C++, the only authoritative source is the ISO standard. That doesn't ever use the word \"instantiation\" for anything but class and function templates.</p>\n<p>It does, however, use the word \"instance\". For example:</p>\n<blockquote>\n<p id=\"so_1745487_1745667_0\">An instance of each object with automatic storage duration (3.7.2) is associated with each entry into its block.</p>\n</blockquote>\n<p>Note that in C++ parlance, an <code>int</code> lvalue is also an \"object\":</p>\n<blockquote>\n<p id=\"so_1745487_1745667_1\">The constructs in a C++ program create, destroy, refer to, access, and manipulate objects. An object is a region of storage.</p>\n</blockquote>\n<p>Since <code>new</code> clearly creates regions of storage, anything thus created is an object, and, following the precedent of the specification, can be called an instance.</p>\n", "LastEditorUserId": "39992", "LastActivityDate": "2009-11-16T23:54:36.537", "Score": "4", "CreationDate": "2009-11-16T23:53:16.400", "ParentId": "1745487", "CommentCount": "3", "OwnerUserId": "111335", "LastEditDate": "2009-11-16T23:54:36.537"}, "1745633": {"Id": "1745633", "PostTypeId": "2", "Body": "<p>As far as I can tell, you're really just asking about terminology here.  The only real distinction made by the C++ standard is POD types and non-POD types, where non-POD types have features like user-defined constructors, member functions, private variables, etc., and POD types don't.  Basic types like <code>int</code> and <code>float</code> are of course PODs, as are arrays of PODs and C-structs of PODs.</p>\n<p>Apart from (and overlapping with) C++, the concept of an \"instance\" in Object-Oriented Programming usually refers to allocating space for an object in memory, and then initializing it with a constructor.  Whether this is done on the stack or the heap, or any other location in memory for that matter, is largely irrelevant.</p>\n<p>However, the C++ standard seems to consider all data types \"objects.\"  For example, in 3.9 it says:</p>\n<blockquote>\n<p id=\"so_1745487_1745633_0\">\"The object representation of type T\n  is the sequence of N unsigned char\n  objects taken up by the object of type\n  T, where N equals sizeof(T)...\"</p>\n</blockquote>\n<p>So basically, the only distinction made by the C++ standard itself is POD versus non-POD.</p>\n", "LastEditorUserId": "168288", "LastActivityDate": "2009-11-16T23:58:32.383", "Score": "3", "CreationDate": "2009-11-16T23:46:50.467", "ParentId": "1745487", "CommentCount": "5", "OwnerUserId": "168288", "LastEditDate": "2009-11-16T23:58:32.383"}, "1745543": {"Id": "1745543", "PostTypeId": "2", "Body": "<p>It is unusual to do \"new int\", but it's allowed.  You can even pass 0 or 1 arguments to the constructor.  I'm not sure if \"new int()\" means it's 0-initialized (I'd guess yes) as distinct from \"new int\".</p>\n<p>When you define a value on the stack, it's not usually called \"allocating memory\" (although it is getting memory on the stack in theory, it's possible that the value lives only in CPU registers).</p>\n<p>Literals don't necessarily get an address in program memory; CPU instructions may encode data directly (e.g. put 42 into register B).  Probably arbitrary floating point constants have an address.</p>\n", "LastActivityDate": "2009-11-16T23:24:20.687", "CommentCount": "3", "CreationDate": "2009-11-16T23:24:20.687", "ParentId": "1745487", "Score": "1", "OwnerUserId": "123862"}, "bq_ids": {"n4140": {"so_1745487_1745667_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 5803}, "so_1745487_1745633_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7202}, "so_1745487_1745667_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 5790}}, "n3337": {"so_1745487_1745667_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 5576}, "so_1745487_1745633_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6946}, "so_1745487_1745667_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 5563}}, "n4659": {"so_1745487_1745667_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 7261}, "so_1745487_1745633_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 8711}, "so_1745487_1745667_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 7247}}}, "1745538": {"Id": "1745538", "PostTypeId": "2", "Body": "<p>in C++ an 'instance' and 'instantiate' is only associated with Classes</p>\n<p>note however that these are also english words that can have conversational meaning.\n'pointer' is certainly a class of things in the english usage and a pointer is certainly an instance of that class</p>\n<p>but in c++ speak 'pointer' is not a Class and a pointer is not an Instance of a Class</p>\n<p>see also - how many angels on pinheads</p>\n", "LastActivityDate": "2009-11-16T23:23:41.277", "CommentCount": "2", "CreationDate": "2009-11-16T23:23:41.277", "ParentId": "1745487", "Score": "2", "OwnerUserId": "173397"}});