post_cb({"31370318": {"ParentId": "31370305", "CommentCount": "0", "Body": "<p>You just have it backwards:</p>\n<pre><code>using inputIterator = std::vector&lt;fix_point&gt;::iterator;\n</code></pre>\n<p>The alias syntax sort of mirrors the variable declaration syntax: the name you're introducing goes on the left side of the <code>=</code>. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "31370318", "Score": "14", "CreationDate": "2015-07-12T17:02:31.423", "LastActivityDate": "2015-07-12T17:02:31.423"}, "31370450": {"ParentId": "31370305", "CommentCount": "2", "Body": "<p>typedef is a specifier that may be mixed with other specifiers. Thus the following typedef declarations are equivalent.</p>\n<pre><code>typedef std::vector&lt;int&gt;::iterator inputIterator;\nstd::vector&lt;int&gt;::iterator typedef inputIterator;\n</code></pre>\n<p>Opposite to the typedef declaration the alias declaration has strict order of specifiers. According to the C++ Standard (7.1.3 The typedef specifier)</p>\n<blockquote>\n<p id=\"so_31370305_31370450_0\">A typedef-name can also be introduced by an alias-declaration. The\n  identifier following the using keyword becomes a typedef-name and the\n  optional attribute-specifier-seq following the identifier appertains\n  to that typedef-name. It has the same semantics as if it were\n  introduced by the typedef specifier. In particular, it does not define\n  a new type and it shall not appear in the type-id.</p>\n</blockquote>\n<p>Thus you have to write</p>\n<pre><code>using inputIterator = std::vector&lt;int&gt;::iterator ;\n</code></pre>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "31370450", "Score": "9", "CreationDate": "2015-07-12T17:16:38.677", "LastActivityDate": "2015-07-12T17:16:38.677"}, "bq_ids": {"n4140": {"so_31370305_31370450_0": {"section_id": 5408, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_31370305_31370450_0": {"section_id": 5203, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_31370305_31370450_0": {"section_id": 6830, "quality": 0.9032258064516129, "length": 28}}}, "31370305": {"CommentCount": "0", "AcceptedAnswerId": "31370318", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-07-12T17:01:02.333", "LastActivityDate": "2015-07-12T17:16:38.677", "LastEditDate": "2015-07-12T17:05:01.997", "ViewCount": "567", "FavoriteCount": "1", "Title": "using vs. typedef for std::vector::iterator", "Id": "31370305", "Score": "4", "Body": "<p>I am having a problem when using  the new C++11 <code>using</code> keyword. As far as I understand, it's an alias for <code>typedef</code>. But I cannot get it to compile. I want to define an alias for an iterator of a <code>std::vector</code>. If I use this everything works perfectly.</p>\n<pre><code>typedef std::vector&lt;fix_point&gt;::iterator inputIterator;\n</code></pre>\n<p>But if I try:</p>\n<pre><code>using std::vector&lt;fix_point&gt;::iterator = inputIterator;\n</code></pre>\n<p>The code doesn't compile with:</p>\n<pre><code>Error: 'std::vector&lt;fix_point&gt;' is not a namespace\nusing std::vector&lt;fix_point&gt;::iterator = inputIterator;\n                            ^\n</code></pre>\n<p>Why doesn't this compile? </p>\n", "Tags": "<c++><c++11><using><stdvector>", "OwnerUserId": "2020804", "AnswerCount": "2"}});