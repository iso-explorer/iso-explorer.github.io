post_cb({"bq_ids": {"n4140": {"so_34614869_34615030_1": {"length": 10, "quality": 1.0, "section_id": 7071}, "so_34614869_34615030_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 7071}, "so_34614869_34615030_0": {"length": 4, "quality": 0.8, "section_id": 7071}, "so_34614869_34615030_4": {"length": 12, "quality": 1.0, "section_id": 7071}, "so_34614869_34615030_3": {"length": 11, "quality": 0.9166666666666666, "section_id": 7071}}, "n3337": {"so_34614869_34615030_1": {"length": 10, "quality": 1.0, "section_id": 6815}, "so_34614869_34615030_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 6815}, "so_34614869_34615030_0": {"length": 4, "quality": 0.8, "section_id": 6815}, "so_34614869_34615030_4": {"length": 12, "quality": 1.0, "section_id": 6815}, "so_34614869_34615030_3": {"length": 11, "quality": 0.9166666666666666, "section_id": 6815}}, "n4659": {"so_34614869_34615030_1": {"length": 10, "quality": 1.0, "section_id": 8572}, "so_34614869_34615030_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 8572}, "so_34614869_34615030_0": {"length": 4, "quality": 0.8, "section_id": 8572}, "so_34614869_34615030_4": {"length": 12, "quality": 1.0, "section_id": 8572}, "so_34614869_34615030_3": {"length": 11, "quality": 0.9166666666666666, "section_id": 8572}}}, "34614942": {"Id": "34614942", "PostTypeId": "2", "Body": "<p>The <code>A::x</code>, in your case, still refers to your regular member variable; it just explicitly specifies <em>which</em> <code>x</code> you mean.  Consider a class that derives from two other classes which have a member of the same name (not that that's very good coding style):</p>\n<pre><code>struct A { int x; };\nstruct B { int x; };\nstruct C : A, B\n{\n  int foo() const\n  {\n    // return x;  // ambiguous: which x do you mean?\n    return A::x;  // unambiguous\n  }\n};\n</code></pre>\n", "LastActivityDate": "2016-01-05T15:10:48.233", "CommentCount": "0", "CreationDate": "2016-01-05T15:10:48.233", "ParentId": "34614869", "Score": "0", "OwnerUserId": "3233921"}, "34615030": {"Id": "34615030", "PostTypeId": "2", "Body": "<p>According to the C++ Standard (3.3.7 Class scope)</p>\n<blockquote>\n<p id=\"so_34614869_34615030_0\">2 The name of a class member shall only be used as follows:</p>\n<p id=\"so_34614869_34615030_1\">\u2014 in the scope of its class (as described above) or a class derived\n  (Clause 10) from its class,</p>\n<p id=\"so_34614869_34615030_2\">\u2014 after the . operator applied to an expression of the type of its\n  class (5.2.5) or a class derived from its class,</p>\n<p id=\"so_34614869_34615030_3\">\u2014 after the -&gt; operator applied to a pointer to an object of its class\n  (5.2.5) or a class derived from its class,</p>\n<p id=\"so_34614869_34615030_4\">\u2014 after the :: scope resolution operator (5.1) applied to the name of\n  its class or a class derived from its class.</p>\n</blockquote>\n<p>For example data members of methods of a derived class can hide data members and/or methods of its base class. To access data members and nethods of the base class you can use the scope resolution operator.</p>\n<pre><code>struct Base\n{\n    virtual ~Base() {};\n    virtual void Hello() const { std::cout &lt;&lt; \"Base\" &lt;&lt; std::endl; }\n};\n\n\nstruct Derived : Base\n{\n    virtual void Hello() const \n    { \n        Base::Hello();\n        std::cout &lt;&lt; \"and Derived\" &lt;&lt; std::endl; \n    }\n};\n\nDerived d;\n\nd.Hello();\n</code></pre>\n", "LastActivityDate": "2016-01-05T15:15:27.117", "CommentCount": "0", "CreationDate": "2016-01-05T15:15:27.117", "ParentId": "34614869", "Score": "2", "OwnerUserId": "2877241"}, "34614869": {"ViewCount": "491", "Body": "<p>It's a fact that you can explicitly access member variables (inside a member function, and not particularly a constructor) using this syntax : <code>this-&gt;member_name</code> (i.e. to distinguish with a function argument with the same name).</p>\n<p>Besides this, I thought that the syntax <code>ClassName::static_member</code> was reserved to access static members outside of a class.</p>\n<p>Then I was surprised when I realized that the following <code>set_2()</code> method was working as one could expect:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    int x;\n    // The two following methods seem to act similarly:\n    void set_1(int x) { this-&gt;x = x; }\n    void set_2(int x) { A::x = x; }\n};\n\nint main ()\n{\n    A a;\n\n    a.set_1(13);\n    std::cout &lt;&lt; a.x &lt;&lt; std::endl;\n\n    a.set_2(17);\n    std::cout &lt;&lt; a.x &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>Is is a good and valid practice to use the scope operator (<code>A::x</code>) in this case? I would personnally prefer it, instead of using the <code>this-&gt;x</code> syntax.</p>\n", "AcceptedAnswerId": "34614967", "Title": "Using scope operator to access non-static member variables", "CreationDate": "2016-01-05T15:07:05.210", "Id": "34614869", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-01-05T15:15:27.117", "Score": "0", "OwnerUserId": "3271687", "Tags": "<c++><scope>", "AnswerCount": "3"}, "34614967": {"Id": "34614967", "PostTypeId": "2", "Body": "<p>Using <code>A::x</code> in this case is valid, but I think <code>this-&gt;x</code> is more idiomatic and less error-prone (the reader of the code can immediately see that <code>x</code> is a member of the class, without thinking what <code>A</code> is).</p>\n", "LastActivityDate": "2016-01-05T15:12:10.947", "CommentCount": "0", "CreationDate": "2016-01-05T15:12:10.947", "ParentId": "34614869", "Score": "2", "OwnerUserId": "459565"}});