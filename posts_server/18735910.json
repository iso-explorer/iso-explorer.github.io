post_cb({"18735945": {"ParentId": "18735910", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/resize\" rel=\"nofollow\"><code>vector.resize()</code></a> </p>\n<blockquote>\n<p id=\"so_18735910_18735945_0\">Resizes the container so that it contains n elements.</p>\n</blockquote>\n<p>You're resizing it to <code>n</code> (10). So now it has ten 0's in it. Then you add ten <em>more</em> numbers (0 to 9) to the end of the list (via <a href=\"http://en.cppreference.com/w/cpp/container/vector/push_back\" rel=\"nofollow\"><code>push_back()</code></a>).  Finally, you print out only the first <code>n</code> (10) which are still all zero.</p>\n<p>Your program is doing exactly what you're telling it to do.</p>\n", "Score": "4", "LastEditorDisplayName": "user283145", "LastEditDate": "2013-09-11T12:24:34.390", "Id": "18735945", "OwnerUserId": "119527", "CreationDate": "2013-09-11T08:13:59.287", "LastActivityDate": "2013-09-11T12:24:34.390"}, "18736015": {"ParentId": "18735910", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-09-11T08:17:00.477", "Score": "5", "LastEditorUserId": "2380830", "LastEditDate": "2013-09-11T08:36:11.870", "Id": "18736015", "OwnerUserId": "2380830", "Body": "<p><code>v.push_back(i)</code> increases the size of the vector <code>v</code> by 1 with <code>i</code> being the value of the last element in that vector. That is why the 10 zeros are retained at the start (i.e. front) of the vector.</p>\n<p>You should write <code>v[i] = i</code> instead.</p>\n<p>Whatever you do, don't drop the line <code>v.resize(n);</code> and retain your <code>push_back</code> as it's suboptimal to piecewise resize a vector - due to memory reallocation. (Although a good <code>stl</code> will have optimisations for such programming it's good practice not to rely on that).</p>\n", "LastActivityDate": "2013-09-11T08:36:11.870"}, "18735910": {"CommentCount": "2", "ViewCount": "128", "CreationDate": "2013-09-11T08:12:20.183", "LastActivityDate": "2013-09-11T12:24:34.390", "Title": "Unexpected results when calling resize() on an STL vector in C++", "AcceptedAnswerId": "18736015", "PostTypeId": "1", "Id": "18735910", "Score": "1", "Body": "<p>In the following code, if I call v.resize(n), the program will print out <strong>0 0 0 0 0 0 0 0 0 0</strong>, which is not what I wanted to see. However, if I comment the line containing v.resize(n) out, it will print out <strong>0 1 2 3 4 5 6 7 8 9</strong>, which is what I wanted to see. Why is this the case? What's wrong with my logic here?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main( int argc , char ** argv )\n{\n    int n = 10;\n    vector&lt;int&gt; v;\n    v.resize(n);\n\n    for( int i=0 ; i&lt;n ; i++ )\n    {\n        v.push_back(i);\n    }\n\n    for( int i=0 ; i&lt;n ; i++ )\n    {\n        cout &lt;&lt; v[i] &lt;&lt; \" \";\n    }\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><vector><stl><containers>", "OwnerUserId": "651473", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_18735910_18735953_0": {"section_id": 969, "quality": 0.9565217391304348, "length": 44}}, "n3337": {"so_18735910_18735953_0": {"section_id": 958, "quality": 0.9565217391304348, "length": 44}}, "n4659": {"so_18735910_18735953_0": {"section_id": 1031, "quality": 0.9565217391304348, "length": 44}}}, "18735953": {"ParentId": "18735910", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-09-11T08:14:18.893", "Score": "7", "LastEditorUserId": "2725031", "LastEditDate": "2013-09-11T08:21:56.460", "Id": "18735953", "OwnerUserId": "2725031", "Body": "<p><code>resize</code> ensures the vector contains exactly <code>n</code> elements, while <code>push_back</code> appends items to the <code>vector</code>, so the nubmers are added after zeros that occupy the vector after resizing. You can see it if you print all the numbers in the vector (<code>&lt; v.size()</code>) instead of just first <code>n</code>. </p>\n<p>Method that behaves as you seem to have expected is <code>reserve()</code>:</p>\n<blockquote>\n<p id=\"so_18735910_18735953_0\"><em>Effects:</em> A directive that informs a vector of a planned change in size, so that it can manage the storage allocation accordingly. After <code>reserve()</code>, <code>capacity()</code> is greater or equal to the argument of reserve if reallocation happens; and equal to the previous value of\n  <code>capacity()</code> otherwise. Reallocation happens at this point if and only if the current capacity is less than the argument of <code>reserve()</code>. If an exception is thrown other than by the move constructor of a non-CopyInsertable type, there are no effects. (<code>\u00a723.3.6.3/2</code>)</p>\n</blockquote>\n", "LastActivityDate": "2013-09-11T08:21:56.460"}});