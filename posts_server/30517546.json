post_cb({"30517574": {"Id": "30517574", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30517546_30517574_0\">It's meant to reduce code bloat when including constants in multiple files</p>\n</blockquote>\n<p>I would suggest not to focus on this kind of optimizations unless it becomes really necessary, and rather choose the simplest design: define those constants directly in the header file and include that header file from all translation units (\".cpp files\") that need to access those constants. Since those objects are <code>const</code>, they will have internal linkage and the linker won't be screaming at you due to violations of the One Definition Rule.</p>\n<blockquote>\n<p id=\"so_30517546_30517574_1\">I tried removing the extern keywords in globals.cpp thinking that it wasn't needed, but my program won't run without them</p>\n</blockquote>\n<p>That's because namespace-scope <code>const</code> objects with static storage duration (like your <code>pi</code> variable) have <em>internal linkage</em> unless you explicitly define them as <code>extern</code>.</p>\n<blockquote>\n<p id=\"so_30517546_30517574_2\">I thought extern was only used for forward declarations?</p>\n</blockquote>\n<p><code>extern</code> is used to declare a variable that is defined in another translation unit (\".cpp file\"). If the object is <code>const</code>, the translation unit that defines it needs to explicitly mark it as <code>extern</code> in order for it to have external linkage and be visible from other translation units (this wouldn't be necessary if the object were not <code>const</code>).</p>\n<blockquote>\n<p id=\"so_30517546_30517574_3\">Has it something to do with the namespace they are defined in?</p>\n</blockquote>\n<p>No, this is the rule for all namespace-level <code>const</code> objects with static storage duration, and it is specified in paragraph [basic.link]/3 of the C++ Standard:</p>\n<blockquote>\n<p id=\"so_30517546_30517574_4\">A name having namespace scope (3.3.6) has internal linkage if it is the name of </p>\n<p id=\"so_30517546_30517574_5\">(3.1) [...] \u2014 a variable, function or function template that is explicitly\n  declared static; or,</p>\n<p id=\"so_30517546_30517574_6\">(3.2) \u2014 <strong>a variable of non-volatile const-qualified type that is neither explicitly declared extern nor previously declared to have external linkage</strong>; or</p>\n<p id=\"so_30517546_30517574_7\">(3.3) \u2014 a data member of an anonymous union.</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2015-05-28T22:02:59.533", "Score": "6", "CreationDate": "2015-05-28T21:41:49.163", "ParentId": "30517546", "CommentCount": "5", "LastEditDate": "2015-05-28T22:02:59.533", "OwnerUserId": "1932150"}, "30517546": {"ViewCount": "2642", "Body": "<p>I'm running a simple program similar to what I found <a href=\"http://www.learncpp.com/cpp-tutorial/42-global-variables/\" rel=\"nofollow\">here</a>. It's meant to reduce code bloat when including constants in multiple files. It does this by using const global variables within a namespace with their respective <code>extern</code> forward declarations.</p>\n<p><strong>globals.h</strong></p>\n<pre><code>#ifndef GLOBALS_H_\n#define GLOBALS_H_\n\nnamespace Constants\n{\n    // forward declarations only\n    extern const double pi;\n    extern const double avogadro;\n    extern const double my_gravity;\n}\n\n#endif\n</code></pre>\n<p><strong>globals.cpp</strong></p>\n<pre><code>namespace Constants\n{\n    // actual global variables\n    extern const double pi(3.14159);\n    extern const double avogadro(6.0221413e23);\n    extern const double my_gravity(9.2); // m/s^2 -- gravity is light on this planet\n}\n</code></pre>\n<p><strong>source.cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;limits&gt;\n\n#include \"globals.h\"\n\nint main()\n{\n    double value_of_pi = Constants::pi;\n\n    std::cout &lt;&lt; value_of_pi;\n\n    std::cin.clear();\n    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\\n');\n    std::cin.get();\n\n    return 0;\n}\n</code></pre>\n<p>I assume that Constants::pi gets the value pi contained in the globals.cpp Constants namespace, and is able to do so because it has access to the namespace itself from the included globals.h. What I don't understand is why the <strong><em>const global definitions/initializations</em></strong> in globals.cpp need the <code>extern</code> keyword? I tried removing the <code>extern</code> keywords in globals.cpp thinking that it wasn't needed, but my program won't run without them. I thought <code>extern</code> was only used for forward declarations? Why are they needed for the <strong><em>const global definitions/initializations</em></strong>? Has it something to do with the namespace they are defined in?</p>\n", "AcceptedAnswerId": "30517574", "Title": "How does extern work in namespaces?", "CreationDate": "2015-05-28T21:39:48.807", "Id": "30517546", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-05-28T22:02:59.533", "Score": "4", "OwnerUserId": "4750730", "Tags": "<c++><namespaces><global-variables><const><extern>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30517546_30517574_5": {"length": 7, "quality": 1.0, "section_id": 7136}, "so_30517546_30517574_6": {"length": 12, "quality": 0.8571428571428571, "section_id": 7136}, "so_30517546_30517574_4": {"length": 7, "quality": 0.875, "section_id": 7136}, "so_30517546_30517574_7": {"length": 4, "quality": 1.0, "section_id": 369}}, "n3337": {"so_30517546_30517574_5": {"length": 7, "quality": 1.0, "section_id": 6880}, "so_30517546_30517574_6": {"length": 11, "quality": 0.7857142857142857, "section_id": 6880}, "so_30517546_30517574_4": {"length": 7, "quality": 0.875, "section_id": 6880}, "so_30517546_30517574_7": {"length": 4, "quality": 1.0, "section_id": 359}}, "n4659": {"so_30517546_30517574_5": {"length": 7, "quality": 1.0, "section_id": 8637}, "so_30517546_30517574_6": {"length": 14, "quality": 1.0, "section_id": 8637}, "so_30517546_30517574_4": {"length": 7, "quality": 0.875, "section_id": 8637}, "so_30517546_30517574_7": {"length": 4, "quality": 1.0, "section_id": 382}}}});