post_cb({"bq_ids": {"n4140": {"so_9087364_9087411_0": {"length": 9, "quality": 0.9, "section_id": 7014}, "so_9087364_9087411_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7014}}, "n3337": {"so_9087364_9087411_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 6760}, "so_9087364_9087411_0": {"length": 9, "quality": 0.9, "section_id": 6760}}, "n4659": {"so_9087364_9087411_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 8511}, "so_9087364_9087411_0": {"length": 9, "quality": 0.9, "section_id": 8511}}}, "9087428": {"Id": "9087428", "PostTypeId": "2", "Body": "<p>f() is ambiguous so the compiler does not know which f() to call. Use dynamic_cast as your already suggested.</p>\n", "LastActivityDate": "2012-01-31T21:46:19.503", "CommentCount": "0", "CreationDate": "2012-01-31T21:46:19.503", "ParentId": "9087364", "Score": "0", "OwnerUserId": "800454"}, "9087965": {"Id": "9087965", "PostTypeId": "2", "Body": "<p>You probably need to virtual-quantify f() in subclasses as well.</p>\n<pre><code>struct A {virtual void f();};\nstruct B1: virtual A {virtual void f();};\nstruct B2: virtual A {virtual void f();};\nstruct C: B1, B2 {};\n\nvoid g() {\n A *o = new C;\n o-&gt;f();\n}\n</code></pre>\n", "LastActivityDate": "2012-01-31T22:27:17.530", "CommentCount": "1", "CreationDate": "2012-01-31T22:27:17.530", "ParentId": "9087364", "Score": "0", "OwnerUserId": "1066452"}, "9087364": {"ViewCount": "313", "Body": "<p>There's the compile error \" ' A ' is an ambiguous base of ' C ' \" existing on the test <code>diamond multiple inheritance</code> below,</p>\n<pre><code>struct A { void f();};\nstruct B1: A {};\nstruct B2: A {};\nstruct C: B1, B2 {};\n\nvoid g() {A *o = new C;}\n</code></pre>\n<p>It's solved by <code>virtual inheritance</code> below,</p>\n<pre><code>struct B1: virtual A {};\nstruct B2: virtual A {};\n</code></pre>\n<p>Now there's the compile error \" no unique final overridder for ' virtual void A::f() ' in ' C ' \" existing on another test <code>diamond multiple polymorphism</code> below,</p>\n<pre><code>struct A {virtual void f();};\nstruct B1: virtual A {void f();};\nstruct B2: virtual A {void f();};\nstruct C: B1, B2 {};\n\nvoid g() {\n A *o = new C;\n o-&gt;f();\n}\n</code></pre>\n<p>And it can't be solved even by <code>dynamic_cast</code> below,</p>\n<pre><code>dynamic_cast&lt;B1 *&gt;(o)-&gt;f();\n</code></pre>\n<p><strong>@NOTE</strong></p>\n<p><code>dynamic_cast&lt;T *&gt;(obj_ptr)</code> is actually used to perform <code>typesafe downcast</code>, i.e. when the run-time type Tobj of the object that the obj_ptr points to is a subtype of T, it returns obj_ptr itself; otherwise the NULL pointer. It is mistaken being thought of upcasting the subtype Tobj to the supertype T, otherwise performing upcast at run-time directly contradicts the principle of polymorphism.</p>\n<p>IMHO, <code>virtual inheritance</code> is succinct enough to solve the first-half problem at compile-time. In contrast, can you present anything to solve the second-half problem at run-time?</p>\n<p><strong>@EDIT</strong></p>\n<p>Thanks for your pointing out <code>dynamic_cast</code> doesn't do the job. Corrected.</p>\n<p>To sovle the 2nd-half problem, it seems to have no choice but implement the overrider on the final subclass of the diamond hierarchy below,</p>\n<pre><code>struct C: B1, B2 {\n void f() {B1::f();} //Hardcode to your choice of overrider\n};\n</code></pre>\n", "Title": "Multiple polymorphism in C++", "CreationDate": "2012-01-31T21:41:39.873", "LastActivityDate": "2012-02-01T10:54:49.130", "CommentCount": "2", "LastEditDate": "2012-02-01T10:54:49.130", "PostTypeId": "1", "LastEditorUserId": "363663", "Id": "9087364", "Score": "2", "OwnerUserId": "363663", "Tags": "<c++><polymorphism><multiple-inheritance>", "AnswerCount": "4"}, "9087472": {"Id": "9087472", "PostTypeId": "2", "Body": "<p>Well, you still don't have a unique override for <code>f()</code>: this needs to be defined in <code>C</code> using e.g.:</p>\n<pre><code>struct C: B1, B2 { void f() { this-&gt;B1::f(); } };\n</code></pre>\n<p>You can explicitly qualify a function to enforce using this function without dynamic dispatch (this is the only way to call an abstract function when the object is complete constructed and not yet being destroyed).</p>\n", "LastActivityDate": "2012-01-31T21:50:42.997", "CommentCount": "2", "CreationDate": "2012-01-31T21:50:42.997", "ParentId": "9087364", "Score": "2", "OwnerUserId": "1120273"}, "9087411": {"Id": "9087411", "PostTypeId": "2", "Body": "<p>Your second example is ill-formed, even without the call. A compiler that accepts it is non-standard conforming. This is quite well illustrated in the C++ standard ( C++11/10.3.13 ):</p>\n<blockquote>\n<p id=\"so_9087364_9087411_0\">The following example shows a function that does not have a unique\n  final overrider: </p>\n</blockquote>\n<pre><code>struct A { \n  virtual void f(); \n}; \n\nstruct VB1 : virtual A { // note virtual derivation \n  void f(); \n}; \n\nstruct VB2 : virtual A {\n  void f(); \n}; \n\nstruct Error : VB1, VB2 { // ill-formed }; \n\nstruct Okay : VB1, VB2 { \n  void f(); \n}; \n</code></pre>\n<blockquote>\n<p id=\"so_9087364_9087411_1\">Both VB1::f and VB2::f override A::f but there\n  is no overrider of both of them in class Error. This example is\n  therefore ill-formed. Class Okay is well formed, however, because\n  Okay::f is a final overrider.</p>\n</blockquote>\n<p>As you see there is also a solution presented. In the overriden function you can decide which parent function you want to call, or even call both, by using <code>::</code>.</p>\n<pre><code>struct Okay : VB1, VB2 { \n  void f() { \n    VB1::f(); \n    VB2::f(); \n  }\n}; \n</code></pre>\n", "LastEditorUserId": "233522", "LastActivityDate": "2012-01-31T21:56:07.753", "Score": "2", "CreationDate": "2012-01-31T21:45:16.860", "ParentId": "9087364", "CommentCount": "2", "LastEditDate": "2012-01-31T21:56:07.753", "OwnerUserId": "233522"}});