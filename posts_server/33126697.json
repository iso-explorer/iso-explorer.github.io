post_cb({"bq_ids": {"n4140": {"so_33126697_33127163_0": {"length": 26, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_33126697_33127163_0": {"length": 26, "quality": 1.0, "section_id": 6895}}}, "33127163": {"PostTypeId": "2", "Body": "<p>It seems that this happens because of the initialization order. The standard says (\u00a73.6.2/2) that (regarding variables with static storage duration or thread storage duration)</p>\n<blockquote>\n<p id=\"so_33126697_33127163_0\">Variables with ordered initialization defined within a single translation unit shall be initialized in the order\n  of their definitions in the translation unit. &lt;...&gt; Otherwise, the initialization of a variable is indeterminately sequenced with respect to the initialization\n  of a variable defined in a different translation unit. </p>\n</blockquote>\n<p>Both <code>FILE_NAME</code> and the global instance of <code>MyClass</code> have static storage duration, and if they happen to be in different translation units, their order of initialization is undefined. So I would guess in your case the global variable of <code>MyClass</code> type got initialized before <code>FILE_NAME</code>.</p>\n", "LastActivityDate": "2015-10-14T13:48:27.167", "Id": "33127163", "CommentCount": "0", "CreationDate": "2015-10-14T13:48:27.167", "ParentId": "33126697", "Score": "4", "OwnerUserId": "1490355"}, "33126697": {"ViewCount": "61", "Body": "<p>In Myclass.cpp:</p>\n<pre><code>const std::string FILE_NAME = \"C:\\\\MyFileName.txt\";\n\nMyClass::MyClass() \n{\n    ifstream fileToOpen;\n    fileToOpen.open(FILE_NAME);   //FILE_NAME shows \"\" in debug\n}\n\nMyClass::OpenFile()\n{\n    ifstream fileToOpen;\n    fileToOpen.open(FILE_NAME);   //when called from another location, this resolves to proper file name.\n}\n</code></pre>\n<p>I'm trying to open a file in the constructor. When I call the open function on that file name, the constant variable resolves to <code>\"\"</code>, but if the function is called elsewhere, it works perfectly fine.  I have tried this in the .h file with the same results. Can anyone explain why?</p>\n", "AcceptedAnswerId": "33127163", "Title": "const string value contents not recognized in constructor", "CreationDate": "2015-10-14T13:28:42.770", "Id": "33126697", "CommentCount": "13", "LastEditDate": "2015-10-14T13:37:44.253", "PostTypeId": "1", "LastEditorUserId": "840736", "LastActivityDate": "2015-10-14T15:20:34.343", "ClosedDate": "2015-10-15T01:16:24.537", "Score": "-3", "OwnerUserId": "840736", "Tags": "<c++><file><constructor><io><constants>", "AnswerCount": "2"}, "33127401": {"PostTypeId": "2", "Body": "<p>One way to solve the problem is to use a function that returns the file name instead of using a variable.</p>\n<pre><code>static std::string getFileName()\n{\n   return \"C:\\\\MyFileName.txt\";\n}\n\nMyClass::MyClass() \n{\n    ifstream fileToOpen;\n    fileToOpen.open(getFileName());\n}\n</code></pre>\n", "LastActivityDate": "2015-10-14T15:20:34.343", "LastEditorUserId": "434551", "Id": "33127401", "CommentCount": "0", "CreationDate": "2015-10-14T13:59:01.567", "ParentId": "33126697", "Score": "0", "OwnerUserId": "434551", "LastEditDate": "2015-10-14T15:20:34.343"}});