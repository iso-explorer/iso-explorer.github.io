post_cb({"7598152": {"ViewCount": "123", "Body": "<p>There is such code:</p>\n<pre><code>#include &lt;iostream&gt;\nint main(){\n  const int a = 2;\n  int* ptr = (int*)&amp;a;\n  *ptr = 3;\n  std::cout &lt;&lt; &amp;a &lt;&lt; \" \" &lt;&lt; ptr &lt;&lt; \" \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; *ptr &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>0xbf88d51c 0xbf88d51c 2 3\n</code></pre>\n<p>Why these two values differ? What does it here happen?</p>\n", "AcceptedAnswerId": "7598179", "Title": "Changing value of constant object with pointer", "CreationDate": "2011-09-29T13:37:17.890", "Id": "7598152", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-09-29T14:13:03.890", "Score": "1", "OwnerUserId": "738811", "Tags": "<c++>", "AnswerCount": "4"}, "7598639": {"Id": "7598639", "PostTypeId": "2", "Body": "<p>That's because compiler replaces <code>... \" \" &lt;&lt; a &lt;&lt; \" \" ...</code> with <code>... \" \" &lt;&lt; 2 &lt;&lt; \" \" ...</code>.</p>\n<p>It does so to avoid reading <code>a</code>'s value from memory when it's already know, constant and can be added right to assembler instruction.</p>\n", "LastActivityDate": "2011-09-29T14:13:03.890", "CommentCount": "1", "CreationDate": "2011-09-29T14:13:03.890", "ParentId": "7598152", "Score": "1", "OwnerUserId": "966376"}, "bq_ids": {"n4140": {"so_7598152_7598179_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}}, "n3337": {"so_7598152_7598179_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}}, "n4659": {"so_7598152_7598179_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}}}, "7598179": {"Id": "7598179", "PostTypeId": "2", "Body": "<pre><code>int* ptr = (int*)&amp;a;\n</code></pre>\n<p>This is dangerous (this itself doesn't invoke UB, though). But this,</p>\n<pre><code>*ptr = 3;\n</code></pre>\n<p>This invokes undefined behavior (UB), because you're attempting to modify the <code>const</code> object pointing to by <code>ptr</code>. UB means anything could happen. Note that <code>a</code> is truly a const object.</p>\n<p>\u00a77.1.5.1/4 (C++03) says,</p>\n<blockquote>\n<p id=\"so_7598152_7598179_0\">Except that any class member declared mutable (7.1.1) can be modified, <strong>any attempt to modify a const object during its lifetime (3.8) results in undefined behavior.</strong></p>\n</blockquote>\n<pre><code> [Example:\n\n [...]\n\nconst int* ciq = new const int (3); // initialized as required\nint* iq = const_cast&lt;int*&gt;(ciq);    // cast required\n*iq = 4;                            // undefined: modifies a const object\n</code></pre>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-09-29T13:53:23.497", "Score": "6", "CreationDate": "2011-09-29T13:39:12.073", "ParentId": "7598152", "CommentCount": "8", "OwnerUserId": "415784", "LastEditDate": "2011-09-29T13:53:23.497"}, "7598183": {"Id": "7598183", "PostTypeId": "2", "Body": "<p>Don't do things like this. It's undefined behavior. </p>\n<p>If you lie to the compiler, it will get its revenge (c)</p>\n", "LastActivityDate": "2011-09-29T13:39:25.160", "CommentCount": "0", "CreationDate": "2011-09-29T13:39:25.160", "ParentId": "7598152", "Score": "3", "OwnerUserId": "852604"}, "7598315": {"Id": "7598315", "PostTypeId": "2", "Body": "<p>I have a hypothesis that I have not tested:</p>\n<p>Compiler set aside an address for a (0xbf88d51c), and fills it with 2.  int *ptr gets set to that address, and *ptr = 3 put 3 at that address.  So *ptr now points to a 3.  But when it comes across the value a, compiler hard codes the \"2\", as though you'd said <code>#define a 2</code>.</p>\n<p>One way to verify is to pull up the resulting assembly code. </p>\n<p>By the way, I know it's undefined behavior, but so what?  The OP asking WHY it happens. </p>\n", "LastActivityDate": "2011-09-29T13:48:32.300", "CommentCount": "4", "CreationDate": "2011-09-29T13:48:32.300", "ParentId": "7598152", "Score": "1", "OwnerUserId": "105401"}});