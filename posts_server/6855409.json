post_cb({"6855409": {"CommentCount": "0", "ViewCount": "302", "PostTypeId": "1", "LastEditorUserId": "597607", "CreationDate": "2011-07-28T07:26:38.660", "LastActivityDate": "2011-07-28T08:59:51.547", "Title": "Argument dependant Name Lookup in C++ : point from n3290 Draft", "AcceptedAnswerId": "6855471", "LastEditDate": "2011-07-28T07:34:53.470", "Id": "6855409", "Score": "1", "Body": "<p>A point from ISO C++ DRAFT n3290 :Argument dependant Name Lookup : section 3.4.2, para 2, </p>\n<blockquote>\n<p id=\"so_6855409_6855409_0\">For each argument type T in the function call, there is a set of zero or more \n   associated namespaces and a set of zero or more associated classes to be \n   considered. The sets of namespaces and classes is determined entirely by the \n   types of the function arguments (and the namespace of any template template \n   argument).Typedef names and using-declaration s used to specify the types do \n   not contribute to this set. The sets of namespaces and classes are determined\n   in the following way:  </p>\n<p id=\"so_6855409_6855409_1\">\u2014 <strong>If T is a fundamental type, its associated sets of namespace and classes are\n     both empty.</strong> </p>\n<p id=\"so_6855409_6855409_2\">\u2014 If T is a class type (including unions), its associated classes are: the class\n     itself; the class of which it is a member, if any; and its direct and indirect\n     base classes. Its associated namespaces are the namespaces of which its \n     associated classes are members. </p>\n<p id=\"so_6855409_6855409_3\">Furthermore, <strong>if T is a class template \n     specialization, its associated namespaces and classes also include: the \n     namespaces and classes associated with the types of the template arguments \n    provided for template type parameters (excluding template template parameters);\n    the namespaces of which any template template arguments are members; and the \n    classes of which any member templates used as template template arguments are<br>\n    members.</br></strong> </p>\n<p id=\"so_6855409_6855409_4\">[ <strong>Note:</strong> Non-type template arguments do not contribute to the set of a\n     associated  namespaces. \u2014 end note ]  </p>\n</blockquote>\n<p>Can any one please expalin this in terms of an example ...please </p>\n<p>here in the above statement \"sets of namespaces and classes are both empty\" ..how this is possible ?</p>\n<p>And in the 2nd point he said the as further more ... please can any one explain this ? </p>\n", "Tags": "<c++><namespaces><c++11><name-lookup>", "OwnerUserId": "751747", "AnswerCount": "1"}, "6855471": {"ParentId": "6855409", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The fundamental types, like <code>int</code> and <code>char</code>, are not defined in any namespace or class. That's why their list of associations will be empty.</p>\n<p>If the function parameters are types created from a template, not only the namespace of this template is considered, but also the namespaces of its template parameters. For example if you have a <code>std::vector&lt;foo::bar&gt;</code> as a parameter, the set of namespaces will include both <code>std</code> and <code>foo</code>.</p>\n", "OwnerUserId": "597607", "LastEditorUserId": "597607", "LastEditDate": "2011-07-28T08:59:51.547", "Id": "6855471", "Score": "6", "CreationDate": "2011-07-28T07:33:12.737", "LastActivityDate": "2011-07-28T08:59:51.547"}, "bq_ids": {"n4140": {"so_6855409_6855409_3": {"section_id": 7104, "quality": 1.0, "length": 36}, "so_6855409_6855409_2": {"section_id": 7104, "quality": 1.0, "length": 24}, "so_6855409_6855409_4": {"section_id": 7104, "quality": 0.7, "length": 7}, "so_6855409_6855409_0": {"section_id": 7104, "quality": 0.8837209302325582, "length": 38}, "so_6855409_6855409_1": {"section_id": 7104, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_6855409_6855409_3": {"section_id": 6848, "quality": 1.0, "length": 36}, "so_6855409_6855409_2": {"section_id": 6848, "quality": 1.0, "length": 24}, "so_6855409_6855409_4": {"section_id": 6848, "quality": 0.7, "length": 7}, "so_6855409_6855409_0": {"section_id": 6848, "quality": 0.8837209302325582, "length": 38}, "so_6855409_6855409_1": {"section_id": 6848, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_6855409_6855409_3": {"section_id": 8605, "quality": 1.0, "length": 36}, "so_6855409_6855409_1": {"section_id": 8605, "quality": 0.8888888888888888, "length": 8}, "so_6855409_6855409_4": {"section_id": 8605, "quality": 0.7, "length": 7}, "so_6855409_6855409_0": {"section_id": 8605, "quality": 0.7906976744186046, "length": 34}, "so_6855409_6855409_2": {"section_id": 8605, "quality": 1.0, "length": 24}}}});