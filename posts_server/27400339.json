post_cb({"bq_ids": {"n4140": {"so_27400339_27401103_0": {"length": 23, "quality": 1.0, "section_id": 305}}, "n3337": {"so_27400339_27401103_0": {"length": 23, "quality": 1.0, "section_id": 296}}, "n4659": {"so_27400339_27401103_0": {"length": 23, "quality": 1.0, "section_id": 312}}}, "27401103": {"Id": "27401103", "PostTypeId": "2", "Body": "<p>It works if the <code>command</code> parameter is taken by reference.</p>\n<p><a href=\"http://ideone.com/RGev9Y\" rel=\"nofollow\">LIVE DEMO</a></p>\n<p>This is because of \u00a714.8.2.1(4):</p>\n<blockquote>\n<p id=\"so_27400339_27401103_0\">In general, the deduction process attempts to find template argument values that will make the deduced <code>A</code> identical to <code>A</code> (after the type <code>A</code> is transformed as described above). However, there are three cases that allow a difference:</p>\n<ul>\n<li>...</li>\n<li>...</li>\n<li>If <code>P</code> is a class and <code>P</code> has the form <em>simple-template-id</em>, then the transformed <code>A</code> can be a derived class of the deduced <code>A</code>. Likewise, if <code>P</code> is a pointer to a class of the form <em>simple-template-id</em>, the transformed <code>A</code> can be a pointer to a derived class pointed to by the deduced <code>A</code>.</li>\n</ul>\n</blockquote>\n<p>But then you would need to deal with the object's lifetime management, so Mike is correct that you'll be wanting a smart pointer instead.</p>\n", "LastActivityDate": "2014-12-10T12:32:31.983", "CommentCount": "0", "CreationDate": "2014-12-10T12:32:31.983", "ParentId": "27400339", "Score": "2", "OwnerUserId": "1639256"}, "27400631": {"Id": "27400631", "PostTypeId": "2", "Body": "<p>You're trying to pass a derived-class object to a function that takes the <code>Command</code> base class by value. That will try to <em>slice</em> the object, copying the base sub-object and discarding everything that makes it a <code>LauncherCommand</code> and a <code>LauncherCommandChangeSimulation</code>. Even if that worked, it would not be what you want; and in this case it won't work, since the base class is abstract and so can't be instantiated as a complete object.</p>\n<p>You'll need some kind of indirection in order to store polymorphic objects in the menu. It looks like you'll need a further, non-template, base class, and <code>AddLeaf</code> will need to take and store a (preferably smart) pointer to that.</p>\n", "LastActivityDate": "2014-12-10T12:08:29.503", "CommentCount": "1", "CreationDate": "2014-12-10T12:08:29.503", "ParentId": "27400339", "Score": "3", "OwnerUserId": "204847"}, "27400339": {"ViewCount": "38", "Body": "<p>i got the error from code below. What is wrong? Everything seems to be in place. </p>\n<blockquote>\n<p id=\"so_27400339_27400339_0\">error C2784: 'void Menu::AddLeaf(Command,const int)' : could not\n  deduce template argument for 'Command' from\n  'LauncherCommandChangeSimulation'</p>\n</blockquote>\n<p><strong>Command.h</strong></p>\n<pre><code>template &lt;class Receiver&gt;\nclass Command\n{\n    virtual void Execute() = 0;\n    ...\n};\n</code></pre>\n<p><strong>LauncherCommand.h</strong></p>\n<pre><code>#include \"Menu/Command.h\"\n#include \"Internal/Launcher.h\"\nclass LauncherCommand : public Command&lt;Launcher&gt;\n{ ... };\n\nclass LauncherCommandChangeSimulation : public LauncherCommand\n{ ... };\n</code></pre>\n<p><strong>Menu.h</strong></p>\n<pre><code>template &lt;class T&gt;\nclass Command;\n\nclass Menu\n{\npublic:\n    template &lt;class T&gt;\n    void AddLeaf(Command&lt;T&gt; command, const int parentId);\n};\n</code></pre>\n<p><strong>Game.cpp</strong></p>\n<pre><code>#include \"Internal/Launcher.h\"\n#include \"Menu/Menu.h\"\n#include \"Menu/LauncherCommand.h\"\n\nLauncherCommandChangeSimulation command(...);\n\nmenu.AddLeaf(command, ...); // Error here\n</code></pre>\n<hr>\n<p>If i change call to AddLeaf on</p>\n<pre><code>menu.AddLeaf&lt;Launcher&gt;(command, simsNodeId);\n</code></pre>\n<p>then i get next error</p>\n<blockquote>\n<p id=\"so_27400339_27400339_1\">error C2770: invalid explicit template argument(s) for 'void\n  Menu::AddLeaf(Command,const int)'</p>\n</blockquote>\n</hr>", "AcceptedAnswerId": "27400631", "Title": "Deducing argument for a function that uses recurring template", "CreationDate": "2014-12-10T11:52:59.790", "Id": "27400339", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-12-10T12:32:31.983", "Score": "1", "OwnerUserId": "312896", "Tags": "<c++><templates>", "AnswerCount": "2"}});