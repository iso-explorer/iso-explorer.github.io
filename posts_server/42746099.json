post_cb({"42746285": {"ParentId": "42746099", "CommentCount": "0", "Body": "<p>Your quote doesn't mean the declaration <code>constexpr variant&lt;int, string&gt; v;</code> is valid. To quote N4140 (roughly C++14 rather than C++1z, but the concept hasn't changed):</p>\n<blockquote>\n<p id=\"so_42746099_42746285_0\"><strong>7.1.5 The constexpr specifier [dcl.constexpr]</strong></p>\n<p id=\"so_42746099_42746285_1\">9 A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. Such an object shall have literal type and shall be initialized. If it is initialized by a constructor call, that call shall be a constant expression (5.19). [...]</p>\n</blockquote>\n<p>The declaration is not valid simply by the constructor call being a constant expression, the type needs to be a literal type as well. One of the requirements of literal types is that they have trivial destructors.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "42746285", "Score": "4", "CreationDate": "2017-03-12T10:29:10.817", "LastActivityDate": "2017-03-12T10:29:10.817"}, "bq_ids": {"n4140": {"so_42746099_42746285_1": {"section_id": 5425, "quality": 0.95, "length": 19}, "so_42746099_42746099_0": {"section_id": 4759, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_42746099_42746285_1": {"section_id": 5220, "quality": 0.95, "length": 19}}, "n4659": {"so_42746099_42746285_1": {"section_id": 6847, "quality": 0.75, "length": 15}, "so_42746099_42746099_0": {"section_id": 5184, "quality": 0.6923076923076923, "length": 9}}}, "42746099": {"CommentCount": "0", "ViewCount": "162", "CreationDate": "2017-03-12T10:08:02.367", "LastActivityDate": "2017-03-12T10:29:10.817", "Title": "Can variant<int, string> be constexpr?", "AcceptedAnswerId": "42746285", "PostTypeId": "1", "Id": "42746099", "Score": "1", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/utility/variant/variant\" rel=\"nofollow noreferrer\">cppreference documentation for variant::variant()</a>:</p>\n<blockquote>\n<p id=\"so_42746099_42746099_0\">This constructor is constexpr if and only if the value initialization of the alternative type T_0 would satisfy the requirements for a constexpr function. </p>\n</blockquote>\n<p>The above says nothing about other types in the variant, so should the declaration <code>constexpr variant&lt;int, string&gt; v;</code> be valid if the variant must have a nontrivial destructor?</p>\n", "Tags": "<c++><c++1z><variant>", "OwnerUserId": "4208360", "AnswerCount": "1"}});