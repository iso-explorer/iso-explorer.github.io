post_cb({"25925285": {"ParentId": "25925164", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The typedef itself isn't the problem. It's perfectly legal to write <code>struct foo; typedef std::pair&lt;foo, foo&gt; bar;</code>. The problem is with</p>\n<pre><code>noexcept(std::declval&lt;type&amp;&gt;() = std::declval&lt;type&gt;());\n</code></pre>\n<p>This requires the compiler to perform overload resolution for <code>operator=</code>. As part of overload resolution it must look for possible conversions from <code>B&amp;&amp;</code> to <code>std::pair&lt;A, A&gt;&amp;&amp;</code>, and that requires instantiating <code>std::pair&lt;A,A&gt;</code> (\u00a714.7.1 [temp.inst]/p6):</p>\n<blockquote>\n<p id=\"so_25925164_25925285_0\">A class template specialization is implicitly instantiated if the\n  class type is used in a context that requires a completely-defined\n  object type or if the completeness of the class type might affect the\n  semantics of the program. [ <em>Note</em>: In particular, if the semantics of\n  an expression depend on the member or base class lists of a class\n  template specialization, the class template specialization is\n  implicitly generated. For instance, deleting a pointer to class type\n  depends on whether or not the class declares a destructor, and\n  conversion between pointer to class types depends on the inheritance\n  relationship between the two classes involved. \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>...and, by \u00a717.6.4.8 [res.on.functions]/p2, this instantiation causes undefined behavior.</p>\n<p>Although the compiler is not required to instantiate <code>std::pair&lt;A, A&gt;</code> in this context since the move assignment operator is an exact match (\u00a714.7.1 [temp.inst]/p7):</p>\n<blockquote>\n<p id=\"so_25925164_25925285_1\">If the overload resolution process can determine the correct function\n  to call without instantiating a class template definition, it is\n  unspecified whether that instantiation actually takes place.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-09-19T02:45:55.970", "Id": "25925285", "Score": "6", "CreationDate": "2014-09-19T02:09:43.727", "LastActivityDate": "2014-09-19T02:45:55.970"}, "25925164": {"CommentCount": "6", "AcceptedAnswerId": "25925285", "PostTypeId": "1", "LastEditorUserId": "1535111", "CreationDate": "2014-09-19T01:53:58.717", "LastActivityDate": "2014-09-19T02:45:55.970", "LastEditDate": "2014-09-19T02:08:28.693", "ViewCount": "460", "FavoriteCount": "1", "Title": "std::pair complains about incomplete type", "Id": "25925164", "Score": "3", "Body": "<p>How to compile the following code?</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;utility&gt;\n\nstruct A;\n\ntemplate&lt;typename T&gt;\nstruct B{\n    T* p;\n\n    B&amp; operator=(B&amp;&amp;);\n    B&amp; operator=(T&amp;&amp;);\n};\n\nint main(){\n    //typedef B&lt;A&gt; type;// fine\n    typedef B&lt;std::pair&lt;A, A&gt;&gt; type;// error\n\n    noexcept(std::declval&lt;type&amp;&gt;() = std::declval&lt;type&gt;());\n\n    return 0;\n}\n</code></pre>\n<p>PS: Type B simulates the boost::recursive_wrapper which fails to compile for the same reason.</p>\n", "Tags": "<c++><c++11><boost>", "OwnerUserId": "1535111", "AnswerCount": "2"}, "25925215": {"ParentId": "25925164", "CommentCount": "2", "Body": "<p>You have to actually put in the entire declaration of A before your use it in another declaration. A forward reference won't be enough.</p>\n", "OwnerUserId": "2098932", "PostTypeId": "2", "Id": "25925215", "Score": "2", "CreationDate": "2014-09-19T02:00:43.123", "LastActivityDate": "2014-09-19T02:00:43.123"}, "bq_ids": {"n4140": {"so_25925164_25925285_0": {"section_id": 238, "quality": 0.9333333333333333, "length": 56}, "so_25925164_25925285_1": {"section_id": 239, "quality": 1.0, "length": 18}}, "n3337": {"so_25925164_25925285_0": {"section_id": 230, "quality": 0.9333333333333333, "length": 56}, "so_25925164_25925285_1": {"section_id": 231, "quality": 1.0, "length": 18}}, "n4659": {"so_25925164_25925285_0": {"section_id": 242, "quality": 0.8333333333333334, "length": 50}, "so_25925164_25925285_1": {"section_id": 248, "quality": 0.7222222222222222, "length": 13}}}});