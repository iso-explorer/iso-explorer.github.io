post_cb({"bq_ids": {"n4140": {"so_27094506_27094672_1": {"length": 16, "quality": 1.0, "section_id": 3241}}, "n3337": {"so_27094506_27094672_1": {"length": 16, "quality": 1.0, "section_id": 3114}}, "n4659": {"so_27094506_27094672_1": {"length": 12, "quality": 0.75, "section_id": 3997}}}, "27094506": {"ViewCount": "125", "Body": "<p>As you know ISO C++ standard forbids returning arrays in functions as far as I think because arrays doesn't have copy-constructors and assignment operators defined by the compiler. They can only be 'constructed' with const initializer-list and that's all. So if returning arrays was possible you would only be able to return const initializer-lists without a way for storing them. But the situation is different when arrays are declared as formal parameters - they always converts to pointers. How this happens that when the return value of a function is with type array, it stays this way and the compiler generates error message but when the type of a formal parameters is array, it stays quiet and casts it implicitly to a pointer. Where in the standart this is written and why - I mean is there any logical reason for it?</p>\n<p>Some examples to illustrate this:</p>\n<pre><code>int func()[5];\n</code></pre>\n<p>The above function declaration will generate the following compiler error (I'm using a gnu compiler):</p>\n<blockquote>\n<p id=\"so_27094506_27094506_0\">error: 'func' declared as function returning an array|</p>\n</blockquote>\n<p>However if I declare the above function to take one formal parameter of type array like this:</p>\n<pre><code>void func(int arg[5]);\n</code></pre>\n<p>It will compile fine, it will compile the same way as I have written this (and not only that - it will also transfer it into it):</p>\n<pre><code>void func(int *arg);\n</code></pre>\n<p>EDIT: Removed all my 'angry' opinions and stated the question (Is there any logical reason for this behavior?).</p>\n", "Title": "Why array formal parameters are always converted implicitly to pointers instead of being forbidden?", "CreationDate": "2014-11-23T21:26:09.890", "LastActivityDate": "2014-11-23T23:47:51.550", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-11-23T23:47:51.550", "Tags": "<c++><arrays><language-lawyer>", "Id": "27094506", "LastEditorUserId": "4031604", "Score": "0", "OwnerUserId": "4031604", "ClosedDate": "2014-11-23T22:06:58.603", "AnswerCount": "1"}, "27094672": {"Id": "27094672", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27094506_27094672_0\">Where in the standart this is written</p>\n</blockquote>\n<p>In 8.3.5/5:</p>\n<blockquote>\n<p id=\"so_27094506_27094672_1\">After determining the type of each parameter, any parameter of type \u201carray of T\u201d or \u201cfunction returning T\u201d is adjusted to be \u201cpointer to T\u201d or \u201cpointer to function returning T,\u201d respectively.</p>\n</blockquote>\n", "LastActivityDate": "2014-11-23T21:40:28.573", "Score": "2", "CreationDate": "2014-11-23T21:40:28.573", "ParentId": "27094506", "CommentCount": "0", "OwnerUserId": "775806", "CommunityOwnedDate": "2014-11-23T21:40:28.573"}});