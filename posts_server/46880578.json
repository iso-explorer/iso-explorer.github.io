post_cb({"46880578": {"CommentCount": "5", "ViewCount": "41", "CreationDate": "2017-10-23T00:49:54.887", "LastActivityDate": "2017-10-23T01:07:44.900", "Title": "Scope of variables declared inside `if constexpr` blocks", "FavoriteCount": "1", "PostTypeId": "1", "Id": "46880578", "Score": "-2", "Body": "<p>Is that ill-formed or is just the compiler (g++-7 in my case) is just still buggy? because it says that <code>n</code> is not defined.</p>\n<pre><code>template&lt;class T&gt;\nauto tup(T const&amp; t)\n{\n    if constexpr(hana::length(t)() % 2)\n        auto n = hana::append(t, nullptr);\n    else\n        auto const&amp; n = t;\n\n    return n;\n}\n\nint main()\n{\n   std::cout &lt;&lt; hana::length(tup(std::tuple(3, \"h\", 'c'))) &lt;&lt; '\\n';\n}\n</code></pre>\n<p><code>n</code> will be always defined, no matter for which branch will the compiler go.</p>\n", "Tags": "<c++><scope><c++1z><constexpr>", "OwnerUserId": "1794803", "AnswerCount": "2"}, "46880674": {"ParentId": "46880578", "CommentCount": "0", "Body": "<p><code>constexpr</code> change nothing in this case.</p>\n<p>It's exactly like in this example</p>\n<pre><code>int foo (int a)\n {\n   if ( a == 0 )\n    {\n      int r = 0;\n    }\n   else\n    {\n      int r = 0;\n    }\n\n   return r;\n }\n</code></pre>\n<p><code>r</code> is defined in both cases. And with the same value.</p>\n<p>But the scope of <code>r</code> is limited to the <code>if</code> and don't reach the <code>return</code>.</p>\n<p>If you can solve the problem returning immediatly; I mean</p>\n<pre><code>template&lt;class T&gt;\nauto tup(T const&amp; t)\n{\n    if constexpr(hana::length(t)() % 2)\n        return hana::append(t, nullptr);\n    else\n        return t;\n}\n</code></pre>\n", "OwnerUserId": "6022656", "PostTypeId": "2", "Id": "46880674", "Score": "2", "CreationDate": "2017-10-23T01:07:44.900", "LastActivityDate": "2017-10-23T01:07:44.900"}, "46880634": {"ParentId": "46880578", "CommentCount": "0", "Body": "<p>Your program is ill-formed because each <code>n</code> is restricted to the scope of the single statement declaring it.</p>\n<p>C++17 draft N4659 [stmt.select]/1 says:</p>\n<blockquote>\n<p id=\"so_46880578_46880634_0\">The substatement in a <em>selection-statement</em> (each substatement, in the <code>else</code> form of the <code>if</code> statement) implicitly defines a block scope ([basic.scope]). If the substatement in a selection-statement is a single statement and not a <em>compound-statement</em>, it is as if it was rewritten to be a compound statement containing the original substatement. [ <em>Example:</em></p>\n</blockquote>\n<pre><code>if (x)\n  int i;\n</code></pre>\n<blockquote>\n<p id=\"so_46880578_46880634_1\">can be equivalently rewritten as</p>\n</blockquote>\n<pre><code>if (x) {\n  int i;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_46880578_46880634_2\">Thus after the <code>if</code> statement, <code>i</code> is no longer in scope. - <em>end example</em> ]</p>\n</blockquote>\n<p>This rule applies to all <code>for</code>, <code>while</code>, <code>switch</code>, and <code>if</code> statements - whether or not the <code>constexpr</code> keyword is used with <code>if</code>.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "46880634", "Score": "5", "CreationDate": "2017-10-23T01:00:01.227", "LastActivityDate": "2017-10-23T01:00:01.227"}, "bq_ids": {"n4140": {"so_46880578_46880634_0": {"section_id": 3882, "quality": 0.8076923076923077, "length": 21}, "so_46880578_46880634_2": {"section_id": 3882, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_46880578_46880634_0": {"section_id": 3742, "quality": 0.8076923076923077, "length": 21}, "so_46880578_46880634_2": {"section_id": 3742, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_46880578_46880634_0": {"section_id": 4771, "quality": 0.8076923076923077, "length": 21}, "so_46880578_46880634_2": {"section_id": 4771, "quality": 0.7142857142857143, "length": 5}}}});