post_cb({"bq_ids": {"n4140": {"so_14505971_14505971_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 671}, "so_14505971_14506014_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5371}}, "n3337": {"so_14505971_14505971_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 661}, "so_14505971_14506014_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5167}}, "n4659": {"so_14505971_14505971_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 699}, "so_14505971_14506014_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 6796}}}, "14505971": {"ViewCount": "1963", "Body": "<p>I've tried the following code in GCC 4.8:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;typename T, T... vs&gt;\nstruct integral_list {\n    typedef T elem_type;\n};\ntemplate &lt;typename T, T... vs&gt; \nstruct gen_array {\n    static const T data[sizeof...(vs)];\n};\ntemplate &lt;typename T, T... vs&gt; \nconst T gen_array&lt;T, vs...&gt;::data[sizeof...(vs)] = { vs... };\n\ntemplate &lt;char... cs&gt;\nconstexpr auto operator \"\" _lit() -&gt; integral_list&lt;char, cs...&gt; {\n    return declval&lt;integral_list&lt;char, cs...&gt;&gt;();\n}\n\nint main() {\n    int (&amp; data)[4] = gen_array&lt;char, decltype(\"abcd\"_lit)&gt;::data;\n    for (int i = 0; i &lt; 4; ++i)\n        cout &lt;&lt; data[i] &lt;&lt; endl;\n}\n</code></pre>\n<p>and got</p>\n<blockquote>\n<p id=\"so_14505971_14505971_0\">tester.cpp:21:48: error: unable to find string literal operator\n  'operator\"\" _lit' with 'const char [5]', 'unsigned int' arguments</p>\n</blockquote>\n<p>while C++11 Standard says</p>\n<blockquote>\n<p id=\"so_14505971_14505971_1\">13.5.8.5: The declaration of a literal operator template shall have an empty parameter-declaration-clause and its template-parameter-list shall have a single template-parameter that is a non-type template parameter pack (14.5.3) with element type char.</p>\n</blockquote>\n<p>So either I didn't figure out the line of standard or GCC goes weird.\nCould you help me solving this dilemma?\nIf not, is there any other way to implement a conversion of string literal to variadic template's argument list?</p>\n", "AcceptedAnswerId": "14506014", "Title": "Literal operator templates don't work in GCC 4.8", "CreationDate": "2013-01-24T16:22:30.937", "Id": "14505971", "CommentCount": "0", "LastEditDate": "2013-01-24T16:27:59.410", "PostTypeId": "1", "LastEditorUserId": "1872046", "LastActivityDate": "2013-06-26T14:33:00.010", "Score": "2", "OwnerUserId": "1872046", "Tags": "<c++><arrays><templates><metaprogramming><literals>", "AnswerCount": "2"}, "14506014": {"Id": "14506014", "PostTypeId": "2", "Body": "<p>You cannot use literal operator templates with string literals, only with numeric literals.</p>\n<p>\u00a7 2.14.8 para 5:</p>\n<blockquote>\n<p id=\"so_14505971_14506014_0\">If L is a user-defined-string-literal, let str be the literal without its ud-suffix and let len be the number of code units in str (i.e., its length excluding the terminating null character). The literal L is treated as a call of the form</p>\n</blockquote>\n<pre><code>operator \"\" X (str , len)\n</code></pre>\n<p>Nonetheless, it is possible to do some compile-time computations with the argument string. Trivial example, possibly useful as a model:</p>\n<pre><code>#include &lt;iostream&gt;\n\nconstexpr unsigned long operator\"\" _mylong(const char* s, size_t l) {\n  return l == 0 ? 0UL : (s[l - 1] - '0') + 10 * operator\"\" _mylong(s, l - 1);\n}\n\nint main() {\n  std::cout &lt;&lt; \"1492888888888888\"_mylong &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1566221", "LastActivityDate": "2013-01-24T17:14:44.623", "Score": "3", "CreationDate": "2013-01-24T16:24:51.510", "ParentId": "14505971", "CommentCount": "1", "OwnerUserId": "1566221", "LastEditDate": "2013-01-24T17:14:44.623"}, "17323031": {"Id": "17323031", "PostTypeId": "2", "Body": "<p>In gcc 4.9 it is available (you will probably need compile it form SVN)</p>\n<p><a href=\"http://gcc.gnu.org/ml/gcc-patches/2013-04/msg00998.html\" rel=\"nofollow\">http://gcc.gnu.org/ml/gcc-patches/2013-04/msg00998.html</a></p>\n", "LastActivityDate": "2013-06-26T14:33:00.010", "CommentCount": "1", "CreationDate": "2013-06-26T14:33:00.010", "ParentId": "14505971", "Score": "2", "OwnerUserId": "1938348"}});