post_cb({"bq_ids": {"n4140": {"so_699301_699323_0": {"length": 8, "quality": 1.0, "section_id": 5343}, "so_699301_699323_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 5343}}, "n3337": {"so_699301_699323_0": {"length": 8, "quality": 1.0, "section_id": 5140}, "so_699301_699323_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 5140}}, "n4659": {"so_699301_699323_0": {"length": 8, "quality": 1.0, "section_id": 6764}, "so_699301_699323_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 6765}}}, "699326": {"Body": "<p>Yes, it is standard, but implementation-defined.</p>\n<p>In practical experience, it represents the 32-bit integer you get by concatenating bytes 'A', 'B', 'C' and 'D'.</p>\n", "CreationDate": "2009-03-30T22:39:21.343", "ParentId": "699301", "CommentCount": "3", "LastEditDate": "2009-03-30T22:49:26.563", "PostTypeId": "2", "LastEditorDisplayName": "Juliano", "LastActivityDate": "2009-03-30T22:49:26.563", "LastEditorUserId": "55078", "Id": "699326", "OwnerDisplayName": "Juliano", "Score": "1", "OwnerUserId": "55078"}, "699419": {"Id": "699419", "PostTypeId": "2", "Body": "<p>If anyone is interested the specific example given is the ID of a data storage format.<br>\nIt's very useful to be able to get a human readable value of a constant eg 'XVID' rather than just 1234.\nIt's worth thinking about when you are making up arbitrary integer keys.</br></p>\n", "OwnerDisplayName": "mgb", "LastActivityDate": "2009-03-30T23:07:54.567", "Score": "0", "CreationDate": "2009-03-30T23:07:54.567", "ParentId": "699301", "CommentCount": "1", "OwnerUserId": "10897"}, "699301": {"ViewCount": "903", "Body": "<p>I have seen and used C++ code like the following:</p>\n<pre><code>int myFourcc = 'ABCD';\n</code></pre>\n<p>It works in recent versions of GCC, not sure how recent.\nIs this feature in the standard?\nWhat is it called?</p>\n<p>I have had trouble searching the web for it...</p>\n<p>EDIT:</p>\n<p>I found this info as well, for future observers:</p>\n<p>from <a href=\"http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\" rel=\"nofollow noreferrer\" title=\"gcc documentation\">gcc documentation</a></p>\n<blockquote>\n<p id=\"so_699301_699301_0\">The compiler values a multi-character character constant a character at a time, shifting the previous value left by the number of bits per target character, and then or-ing in the bit-pattern of the new character truncated to the width of a target character. The final bit-pattern is given type int, and is therefore signed, regardless of whether single characters are signed or not (a slight change from versions 3.1 and earlier of GCC). If there are more characters in the constant than would fit in the target int the compiler issues a warning, and the excess leading characters are ignored.</p>\n<p id=\"so_699301_699301_1\">For example, 'ab' for a target with an 8-bit char would be interpreted as <code>(int) ((unsigned char) 'a' * 256 + (unsigned char) 'b')', and '\\234a' as</code>(int) ((unsigned char) '\\234' * 256 + (unsigned char) 'a')'. </p>\n</blockquote>\n", "AcceptedAnswerId": "699324", "Title": "Is int x = 'fooo' a compiler extension?", "CreationDate": "2009-03-30T22:33:16.350", "Id": "699301", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2009-03-30T22:55:49.277", "LastEditorDisplayName": "j w", "OwnerDisplayName": "j w", "LastEditorUserId": "84859", "LastActivityDate": "2009-03-30T23:07:54.567", "Score": "4", "OwnerUserId": "84859", "Tags": "<c++><c><gcc>", "AnswerCount": "5"}, "699323": {"Id": "699323", "PostTypeId": "2", "Body": "<p>C++ standard draft says:</p>\n<blockquote>\n<p id=\"so_699301_699323_0\">A  character  literal  is  one  or  more characters enclosed in single\n    quotes, as in 'x'</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_699301_699323_1\">An ordinary character literal that contains more than one c-char is a multicharacter literal.  A  multichar-\n    acter literal has type int and <strong>implementation-defined value</strong>.</p>\n</blockquote>\n", "OwnerDisplayName": "abababa22", "LastActivityDate": "2009-03-30T22:38:46.433", "Score": "5", "CreationDate": "2009-03-30T22:38:29.273", "ParentId": "699301", "CommentCount": "0", "OwnerUserId": "1640962"}, "699357": {"Id": "699357", "PostTypeId": "2", "Body": "<p>See section 6.4.4.4, paragraph 10 of the C99 standard:</p>\n<blockquote>\n<p id=\"so_699301_699357_0\">An integer character constant has type <code>int</code>. The value of an integer character constant\n  containing a single character that maps to a single-byte execution character is the\n  numerical value of the representation of the mapped character interpreted as an integer.\n  The value of an integer character constant containing more than one character (e.g.,\n  <code>'ab'</code>), or containing a character or escape sequence that does not map to a single-byte\n  execution character, is implementation-defined. If an integer character constant contains\n  a single character or escape sequence, its value is the one that results when an object with\n  type <code>char</code> whose value is that of the single character or escape sequence is converted to\n  type <code>int</code>.</p>\n</blockquote>\n<p>Recall that <em>implementation-defined</em> means that the implementation (in this case, the C compiler) can do whatever it wants, but it <strong>must be documented</strong>.</p>\n<p>Most compilers will convert it to an integral constant corresponding to the concatenation of the octets corresponding to the individual characters, but the endianness could be either little- or big-endian, depending on the endianness of the target architecture.</p>\n<p>Therefore, portable code should not use multi-character constants and should instead use plain integral constants.  Instead of <code>'abcd'</code>, which could be of either endianness, use either 0x61626364 or 0x64636261, which have known endiannesses (big and little respectively).</p>\n", "OwnerDisplayName": "Adam Rosenfield", "LastActivityDate": "2009-03-30T22:47:20.373", "Score": "7", "CreationDate": "2009-03-30T22:47:20.373", "ParentId": "699301", "CommentCount": "0", "OwnerUserId": "9530"}, "699324": {"Id": "699324", "PostTypeId": "2", "Body": "<p>\"Note that according to the C standard there is no limit on the length of a character constant, but the value of a character constant that contains more than one character is implementation-defined. Recent versions of GCC provide support multi-byte character constants, and instead of an error the warnings <em>multiple-character character constant</em> or <em>warning: character constant too long for its type</em> are generated in this case.\"</p>\n", "OwnerDisplayName": "chaos", "LastActivityDate": "2009-03-30T22:38:40.927", "Score": "6", "CreationDate": "2009-03-30T22:38:40.927", "ParentId": "699301", "CommentCount": "3", "OwnerUserId": "47529"}});