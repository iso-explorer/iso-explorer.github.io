post_cb({"bq_ids": {"n4140": {"so_7469468_7469610_0": {"section_id": 369, "quality": 1.0, "length": 10}, "so_7469468_7469468_0": {"section_id": 369, "quality": 1.0, "length": 14}}, "n3337": {"so_7469468_7469610_0": {"section_id": 359, "quality": 1.0, "length": 10}, "so_7469468_7469468_0": {"section_id": 359, "quality": 1.0, "length": 14}}, "n4659": {"so_7469468_7469610_0": {"section_id": 381, "quality": 1.0, "length": 10}, "so_7469468_7469468_0": {"section_id": 483, "quality": 0.8571428571428571, "length": 12}}}, "7469468": {"CommentCount": "0", "ViewCount": "686", "PostTypeId": "1", "LastEditorUserId": "214671", "CreationDate": "2011-09-19T10:26:35.243", "LastActivityDate": "2011-09-19T10:49:36.193", "Title": "defaulted default constructor ? in n3290 draft", "AcceptedAnswerId": "7469608", "LastEditDate": "2011-09-19T10:35:08.437", "Id": "7469468", "Score": "1", "Body": "<p>A point from n3290 draft \u00a712.1 (Constructors) \u00b65:</p>\n<blockquote>\n<p id=\"so_7469468_7469468_0\">An implicitly-declared default constructor is an <code>inline public</code> member of \n  its class. A <strong>defaulted default constructor</strong> for class <code>X</code> is defined as deleted\n  if:</p>\n<ul>\n<li><code>X</code> is a union-like class that has a variant member with a non-trivial \n  default constructor,</li>\n<li>any non-static data member with no brace-or-equal-initializer is of \n  reference type,</li>\n<li>any non-variant non-static data member of const-qualified type (or array \n  thereof) with no brace-or-equal-initializer does not have a user-provided \n  default constructor,</li>\n<li><code>X</code> is a union and all of its variant members are of const-qualified type\n  (or array thereof),</li>\n<li><code>X</code> is a non-union class and all members of any anonymous union member are of\n  const-qualified type (or array thereof),</li>\n<li>any direct or virtual base class, or non-static data member with no \n  brace-or-equal-initializer, has class type <code>M</code> (or array thereof) and either \n  <code>M</code> has no default constructor or overload resolution (13.3) as applied\n  to <code>M</code>\u2019s default constructor results in an ambiguity or in a function that is \n  deleted or inaccessible from the defaulted default constructor, or</li>\n<li>any direct or virtual base class or non-static data member has a type with a<br>\n  destructor that is deleted or inaccessible from the defaulted default constructor</br></li>\n</ul>\n</blockquote>\n<p>Please explain the <strong>defaulted default constructor</strong> with some example program.</p>\n", "Tags": "<c++><constructor><c++11><default-constructor>", "OwnerUserId": "751747", "AnswerCount": "2"}, "7469608": {"ParentId": "7469468", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think <strong><a href=\"http://en.wikipedia.org/wiki/C++11#Explicitly-defaulted_and_deleted_special_member_functions\" rel=\"nofollow\">this</a></strong> excerpt from Wikipedia explains this:  </p>\n<p><strong>Explicitly-defaulted and deleted special member functions</strong></p>\n<blockquote>\n<p id=\"so_7469468_7469608_0\">In C++03, the compiler provides, for classes that do not provide for themselves, a default constructor, a copy constructor, a copy assignment operator (operator=), and a destructor. The programmer can override these defaults by defining custom versions. C++ also defines several global operators (such as operator= and operator new) that work on all classes, which the programmer can override.</p>\n<p id=\"so_7469468_7469608_1\">However, there is very little control over the creation of these defaults. Making a class inherently non-copyable, for example, requires declaring a private copy constructor and copy assignment operator and not defining them. Attempting to use these functions is a violation of the one definition rule. While a diagnostic message is not required,[5] this typically results in a linker error.[citation needed]</p>\n<p id=\"so_7469468_7469608_2\">In the case of the default constructor, the compiler will not generate a default constructor if a class is defined with any constructors. This is useful in many cases, but it is also useful to be able to have both specialized constructors and the compiler-generated default.</p>\n<p id=\"so_7469468_7469608_3\">C++11 will allow the explicit defaulting and deleting of these special member functions. For example, the following type explicitly declares that it is using the default constructor:</p>\n</blockquote>\n<p>Code Example:</p>\n<pre><code>struct SomeType \n{\n    SomeType() = default; //The default constructor is explicitly stated.\n    SomeType(OtherType value);\n};\n</code></pre>\n<hr>\n<p>Since you seem to be a Standerdese fan(Almost all of your Questions seek explanations on Standard Quotes) this paper here about how standards committe arrive to defining default and deleted functions should be a good read for you:</p>\n<p><strong><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2210.html#explicit\" rel=\"nofollow\">Defaulted and Deleted Functions</a></strong> </p>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-09-19T10:49:36.193", "Id": "7469608", "Score": "2", "CreationDate": "2011-09-19T10:38:07.797", "LastActivityDate": "2011-09-19T10:49:36.193"}, "7469610": {"ParentId": "7469468", "CommentCount": "0", "Body": "<p>One of the special member functions is \"defaulted\" if it is declared with the <code>= default;</code> syntax. The line right before the first line you quoted states:</p>\n<blockquote>\n<p id=\"so_7469468_7469610_0\">If there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared as defaulted (8.4).</p>\n</blockquote>\n<p>Therefore, a \"defaulted\" default constructor is a default constructor (constructor that can be called with no arguments) that is declared with <code>= default</code>. This can be explicitly defined using the <code>= default</code> syntax, or implicitly defined, per the above line.</p>\n", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "7469610", "Score": "0", "CreationDate": "2011-09-19T10:38:33.293", "LastActivityDate": "2011-09-19T10:38:33.293"}});