post_cb({"28408982": {"ParentId": "28408911", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The first version (the one with _pod suffix) still works but gives no error because for the z value, the default value of int is chosen (the 0). Idem for the const int reference.</p>\n<p>In the second version, you cannot define a const reference without giving it a value. The compiler gives you an error because later you cannot assign any value to it.</p>\n<p>In addition, the compiler you're using plays an important role here, maybe it's a bug, just because you are declaring a class member before an int member.</p>\n", "OwnerUserId": "2369389", "LastEditorUserId": "2369389", "LastEditDate": "2015-02-09T11:50:12.627", "Id": "28408982", "Score": "-1", "CreationDate": "2015-02-09T11:44:02.550", "LastActivityDate": "2015-02-09T11:50:12.627"}, "28409778": {"ParentId": "28408911", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>It will be clear that</p>\n<blockquote id=\"so_28408911_28409778_0\">\n<pre><code>struct text_descriptor td[3] = {\n     {0, {465,223}, 123},\n     {1, {465,262}, 123},\n};\n</code></pre>\n</blockquote>\n<p>is list-initialisation, and that the initialiser list is not empty.</p>\n<p>C++11 says ([dcl.init.list]p3):</p>\n<blockquote>\n<p id=\"so_28408911_28409778_1\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<ul>\n<li>If the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is value-initialized.</li>\n<li>Otherwise, if <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>[dcl.init.aggr]p1:</p>\n<blockquote>\n<p id=\"so_28408911_28409778_2\">An <em>aggregate</em> is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p><code>td</code> is an array, so it is an aggregate, so aggregate initialisation is performed.</p>\n<p>[dcl.init.aggr]p7:</p>\n<blockquote>\n<p id=\"so_28408911_28409778_3\">If there are fewer <em>initializer-clauses</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from an empty initializer list (8.5.4).</p>\n</blockquote>\n<p>This is the case here, so <code>td[2]</code> is initialised from an empty initialiser list, which ([dcl.init.list]p3 again) means it is value-initialised.</p>\n<p>Value-initialisation, in turn, means ([dcl.init]p7):</p>\n<blockquote>\n<p id=\"so_28408911_28409778_4\">To value-initialize an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), ...</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>'s implicitly-declared default constructor is non-trivial, that constructor is\n  called.</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>Your class <code>text_descriptor</code> is a class with no user-provided constructor, so <code>td[2]</code> is first zero-initialised, and then its constructor is called.</p>\n<p>Zero-initialisation means ([dcl.init]p5):</p>\n<blockquote>\n<p id=\"so_28408911_28409778_5\">To <em>zero-initialize</em> an object or reference of type T means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type (3.9), ...</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) union type, ...</li>\n<li>if <code>T</code> is an array type, ...</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>This is well-defined regardless of <code>text_descriptor</code>'s default constructor: it just zero-initialises the non-reference members and sub-members.</p>\n<p>Then the default constructor is called, if it is non-trivial. Here's how the default constructor is defined ([special]p5):</p>\n<blockquote>\n<p id=\"so_28408911_28409778_6\">A <em>default constructor</em> for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared\n  as defaulted (8.4). An implicitly-declared default constructor is an inline public member of its class. A defaulted default constructor for class <code>X</code> is defined as deleted if:</p>\n<ul>\n<li>...</li>\n<li>any non-static data member with no brace-or-equal-initializer is of reference type,</li>\n<li>...</li>\n</ul>\n<p id=\"so_28408911_28409778_7\">A default constructor is trivial if it is not user-provided and if:</p>\n<ul>\n<li>its class has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>no non-static data member of its class has a brace-or-equal-initializer, and</li>\n<li>all the direct base classes of its class have trivial default constructors, and</li>\n<li>for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default constructor.</li>\n</ul>\n<p id=\"so_28408911_28409778_8\">Otherwise, the default constructor is non-trivial.</p>\n</blockquote>\n<p>So, the implicitly defined constructor is deleted, as expected, <em>but</em> it is also trivial, if <code>pos</code> is a POD type (!). Because the constructor is trivial, it is not called. Because the constructor is not called, the fact that it is deleted is not a problem.</p>\n<p>This is a gaping hole in C++11, which has since been fixed. It happened to have been fixed to deal with <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1507\">inaccessible trivial default constructors</a>, but the fixed wording also covers deleted trivial default constructors. N4140 (roughly C++14) says in [dcl.init.aggr]p7 (emphasis mine):</p>\n<blockquote id=\"so_28408911_28409778_9\">\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type without a user-provided or deleted default constructor, then the object is zero-initialized <strong>and the semantic constraints for default-initialization are checked</strong>, and if\n  <code>T</code> has a non-trivial default constructor, the object is default-initialized;</li>\n</ul>\n</blockquote>\n<p>As T.C. pointed out in the comments, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1301\">another DR</a> also changed so that <code>td[2]</code> is still initialised from an empty initialiser list, but that empty initialiser list now implies aggregate initialisation. That, in turn, implies each of <code>td[2]</code>'s members is initialised from an empty initialiser list as well ([dcl.init.aggr]p7 again), so would seem to initialise the reference member from <code>{}</code>.</p>\n<p>[dcl.init.aggr]p9 then says (as remyabel had pointed out in a now-deleted answer):</p>\n<blockquote>\n<p id=\"so_28408911_28409778_10\">If an incomplete or empty <em>initializer-list</em> leaves a member of reference type uninitialized, the program is ill-formed.</p>\n</blockquote>\n<p>It is unclear to me that this applies to references initialised from the implicit <code>{}</code>, but compilers do interpret it as such, and there's not much else that could be meant by it.</p>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2015-02-09T13:21:18.877", "Id": "28409778", "Score": "23", "CreationDate": "2015-02-09T12:26:02.350", "LastActivityDate": "2015-02-09T13:21:18.877"}, "bq_ids": {"n4140": {"so_28408911_28409778_4": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_28408911_28409778_5": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_28408911_28409778_9": {"section_id": 3287, "quality": 1.0, "length": 20}, "so_28408911_28409778_6": {"section_id": 369, "quality": 0.96875, "length": 31}, "so_28408911_28409778_3": {"section_id": 3304, "quality": 0.9444444444444444, "length": 17}, "so_28408911_28409778_8": {"section_id": 369, "quality": 1.0, "length": 4}, "so_28408911_28409778_2": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}, "so_28408911_28409778_10": {"section_id": 3306, "quality": 1.0, "length": 9}, "so_28408911_28409778_1": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_28408911_28409778_7": {"section_id": 369, "quality": 1.0, "length": 4}}, "n3337": {"so_28408911_28409778_4": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_28408911_28409778_5": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_28408911_28409778_3": {"section_id": 3174, "quality": 0.9444444444444444, "length": 17}, "so_28408911_28409778_6": {"section_id": 359, "quality": 0.96875, "length": 31}, "so_28408911_28409778_8": {"section_id": 359, "quality": 1.0, "length": 4}, "so_28408911_28409778_2": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}, "so_28408911_28409778_10": {"section_id": 3176, "quality": 1.0, "length": 9}, "so_28408911_28409778_1": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_28408911_28409778_7": {"section_id": 359, "quality": 1.0, "length": 4}}, "n4659": {"so_28408911_28409778_5": {"section_id": 653, "quality": 0.8, "length": 4}, "so_28408911_28409778_9": {"section_id": 4049, "quality": 1.0, "length": 20}, "so_28408911_28409778_3": {"section_id": 4070, "quality": 0.8333333333333334, "length": 15}, "so_28408911_28409778_1": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_28408911_28409778_2": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}, "so_28408911_28409778_6": {"section_id": 381, "quality": 0.71875, "length": 23}}}, "28408911": {"CommentCount": "9", "CreationDate": "2015-02-09T11:40:06.040", "PostTypeId": "1", "AcceptedAnswerId": "28409778", "LastEditorUserId": "935512", "LastActivityDate": "2015-02-09T13:21:18.877", "LastEditDate": "2015-02-09T12:46:57.400", "ViewCount": "1438", "FavoriteCount": "2", "Title": "C++11 strange brace initialization behavior", "Id": "28408911", "Score": "22", "Body": "<p>I don't understand how C++11 brace initialization rules work here.\nHaving this code:</p>\n<pre><code>struct Position_pod {\n    int x,y,z;\n};\n\nclass Position {\npublic:\n    Position(int x=0, int y=0, int z=0):x(x),y(y),z(z){}\n    int x,y,z;\n};\n\nstruct text_descriptor {\n    int             id;\n    Position_pod    pos;\n    const int       &amp;constNum;\n};\n\nstruct text_descriptor td[3] = {\n     {0, {465,223}, 123},\n     {1, {465,262}, 123},\n};\n\nint main() \n{\n    return 0;\n}\n</code></pre>\n<p>Note, that the array is declared to have 3 elements, but only 2 initializers are provided.</p>\n<p>However it compiles without error, which sounds strange, as the last array element's reference member will be uninitialized. Indeed, it has NULL value:</p>\n<pre><code>(gdb) p td[2].constNum \n$2 = (const int &amp;) @0x0: &lt;error reading variable&gt;\n</code></pre>\n<p>And now the \"magic\": I changed Position_pod to Position</p>\n<pre><code>struct text_descriptor {\n    int             id;\n    Position_pod    pos;\n    const int       &amp;constNum;\n};\n</code></pre>\n<p>becomes this:</p>\n<pre><code>struct text_descriptor {\n    int             id;\n    Position        pos;\n    const int       &amp;constNum;\n};\n</code></pre>\n<p>and now it gives the expected error:</p>\n<pre><code>error: uninitialized const member \u2018text_descriptor::constNum'\n</code></pre>\n<p>My question: Why it compiles in the first case, when it should give an error (as in the second case).\nThe difference is, that Position_pod uses C - style brace initialization and Position uses C++11 - style initialization, which call Position's constructor. But how does this affect the possibility to leave a reference member uninitialized?</p>\n<p>(Update)\nCompiler: \ngcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "935512", "AnswerCount": "2"}});