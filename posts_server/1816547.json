post_cb({"bq_ids": {"n4140": {"so_1816547_1816578_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 3293}}, "n3337": {"so_1816547_1816578_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 3163}}}, "1816578": {"Id": "1816578", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_1816547_1816578_0\"><code>T x(value)</code> is usually the better choice because it will directly initialize x with value, whereas <code>T x = value</code> might create a temporary depending on the type of value.</p>\n</blockquote>\n<p>You're almost right, the better choice is the clearest syntax.  Here's how the two differ:</p>\n<blockquote>\n<p id=\"so_1816547_1816578_1\">The form of initialization (using parentheses or =) is generally insignificant, but does matter when the entity being initialized has a class type... [8.5/11]</p>\n</blockquote>\n<pre><code>struct A {\n  A(int) {}\n};\nstruct B {\n  explicit B(int) {}\n};\n\nint main() {\n  { A obj (42); } // succeeds\n  { A obj = 42; } // succeeds\n\n  { B obj (42); } // succeeds\n  { B obj = 42; } // fails\n}\n</code></pre>\n<p>An implicit conversion is required, so things like <code>vector&lt;int&gt; v = 3;</code> fail, but that <em>looks wrong</em> anyway, right?  Any copy is likely <a href=\"http://www.google.com/search?q=copy+constructor+elision\" rel=\"nofollow noreferrer\">elided</a>.  I can't remember finding this to be a bottleneck in anything I've written, and I stopped worrying about it long ago: just use the clearest syntax.</p>\n<hr>\n<blockquote>\n<p id=\"so_1816547_1816578_2\">In the special case where value is of type T though, my guess is that the expression <code>T x = value</code> will always result in exactly one copy constructor call. Am I correct?</p>\n</blockquote>\n<p>No, you're not guaranteed that the copy ctor will always be called, but it must be accessible.  For example, in your specific case above with <code>value</code> being a function's return value, the standard explicitly allows those copies to be elided.</p>\n</hr>", "LastEditorDisplayName": "Roger Pate", "OwnerDisplayName": "Roger Pate", "LastActivityDate": "2009-11-29T20:45:03.560", "CommentCount": "5", "CreationDate": "2009-11-29T19:57:54.623", "ParentId": "1816547", "Score": "5", "LastEditDate": "2009-11-29T20:45:03.560"}, "1816618": {"PostTypeId": "2", "Body": "<p>From the standard, copy-initialization for class types where the cv-unqualified type of the source type is the same as, or a derived class of the destination, has exactly the same behaviour as direct-initialization. The description of these two cases introduce a single paragraph describing the required behaviour which is that only constructors for the destination type are considered and the constructor chosen is used to initialize the destination with the initializer expression as argument.</p>\n<p>No extra temporary is allowed in these cases.</p>\n<p>Neither form of initialization prevent the optimizations described in 12.8 [class.copy] from occuring. Though a non-normative example, the example in 12.8/15 uses the copy-initialization form of initializer to demonstrate the elimination of two copies resulting from a function returning a local variable by value to an object initializer. This means that if <code>value</code> in your example is a temporary of type <code>T</code> then it - and the copy operation to <code>x</code> - may be eliminated.</p>\n", "LastActivityDate": "2009-11-29T22:11:00.833", "LastEditorUserId": "19563", "Id": "1816618", "CommentCount": "0", "CreationDate": "2009-11-29T20:10:49.553", "ParentId": "1816547", "Score": "1", "OwnerUserId": "19563", "LastEditDate": "2009-11-29T22:11:00.833"}, "1816547": {"ViewCount": "196", "Body": "<p>T x(value) is usually the better choice because it will directly initialize x with value, whereas T x = value might create a temporary depending on the type of value.\nIn the special case where value is of type T though, my guess is that the expression T x = value will <strong>always</strong> result in exactly one copy constructor call. Am I correct?</p>\n<p>I've asked this question because I'm starting to think that the first syntax is too ugly and harder to understand, especially when value is the result of a function call.\ne.g:   </p>\n<ul>\n<li><code>const std::string path(attributes.data(pathAttrib));</code></li>\n<li><code>const std::string path = attributes.data(pathAttrib);</code></li>\n</ul>\n", "AcceptedAnswerId": "1816618", "Title": "Initialization: T x(value) vs. T x = value when value is of type T", "CreationDate": "2009-11-29T19:48:06.663", "Id": "1816547", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2009-11-29T22:11:00.833", "Score": "2", "OwnerUserId": "62343", "Tags": "<c++><initialization>", "AnswerCount": "2"}});