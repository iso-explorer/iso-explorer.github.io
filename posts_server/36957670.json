post_cb({"bq_ids": {"n4140": {"so_36957670_36957670_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3612}}, "n3337": {"so_36957670_36957670_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3474}}, "n4659": {"so_36957670_36957670_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 4376}}}, "36957670": {"ViewCount": "72", "Body": "<p>I'm working on a test suite for my package, and as part of the tests I would like to run my algorithm on a block of data. However, it occured to me that instead of hardcoding a particular block of data, I could use an algorithm to generate it. I'm wondering if the C++11 <code>&lt;random&gt;</code> facilities would be appropriate for this purpose.</p>\n<p>From what I understand, the C++11 random number engines are required to implement specific algorithms. Therefore, given the same seed they should produce the same sequence of random integers in the range defined by the algorithm parameters.</p>\n<p>However, as far as distributions are concerned, the standard specifies that:</p>\n<blockquote>\n<p id=\"so_36957670_36957670_0\">The algorithms for producing each of the specified distributions are implementation-defined.</p>\n</blockquote>\n<p>(26.5.8.1 Random number distribution class templates / In general)</p>\n<p>Which \u2014 unless I'm mistaken \u2014 means that the output of a distribution is pretty much undefined. And from what I've tested, the distributions in GNU libstdc++ and LLVM project's libc++ produce different results given the same random engines.</p>\n<p>The question would therefore be: what would be the most correct way of producing pseudo-random data that would be completely repeatable across different platforms?</p>\n", "Title": "Can C++11 PRNG be used to produce repeatable results?", "CreationDate": "2016-04-30T16:59:31.967", "LastActivityDate": "2016-05-02T10:38:50.687", "CommentCount": "2", "LastEditDate": "2016-04-30T17:08:05.557", "PostTypeId": "1", "LastEditorUserId": "596781", "Id": "36957670", "Score": "0", "OwnerUserId": "165333", "Tags": "<c++><c++11><random>", "AnswerCount": "2"}, "36980457": {"Id": "36980457", "PostTypeId": "2", "Body": "<p>Please see this answer: <a href=\"https://stackoverflow.com/a/34962942/1151329\">https://stackoverflow.com/a/34962942/1151329</a></p>\n<p>I had exactly this problem and writing my own distributions worked perfectly. I got the same sequences across linux, OSx, windows, x86 and ARM.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-05-02T10:38:50.687", "Score": "0", "CreationDate": "2016-05-02T10:38:50.687", "ParentId": "36957670", "CommentCount": "0", "OwnerUserId": "1151329", "LastEditDate": "2017-05-23T12:31:44.597"}, "36957836": {"Id": "36957836", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_36957670_36957836_0\">what would be the most correct way of producing pseudo-random data that would be completely repeatable across different platforms?</p>\n</blockquote>\n<p>That would be obvious: write your own <em>distribution</em>. As you yourself pointed out, the <em>engines</em> are cross-platform since they implement a specific algorithm. It's the distributions that are implementation-defined.</p>\n<p>So write the distributions yourself.</p>\n", "LastEditorUserId": "734069", "LastActivityDate": "2016-04-30T17:29:26.910", "Score": "2", "CreationDate": "2016-04-30T17:13:52.317", "ParentId": "36957670", "CommentCount": "0", "OwnerUserId": "734069", "LastEditDate": "2016-04-30T17:29:26.910"}});