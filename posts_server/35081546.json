post_cb({"35660272": {"ParentId": "35081546", "CommentCount": "0", "CreationDate": "2016-02-26T19:40:43.677", "OwnerUserId": "909565", "PostTypeId": "2", "Id": "35660272", "Score": "0", "Body": "<p>The following C++ code requires that <code>alignment</code> is a power of 2.  Memory allocated wit <code>malloc_aligned</code> must be released with <code>free_aligned</code>:</p>\n<pre><code>void *\nmalloc_aligned(std::size_t alignment, std::size_t size)\n{\n    alignment = std::max(alignment, alignof(void *));\n    size     += alignment;\n\n    void *ptr  = std::malloc(size);\n    void *ptr2 = (void *)(((uintptr_t)ptr + alignment) &amp; ~(alignment-1));\n    void **vp  = (void**) ptr2 - 1;\n    *vp        = ptr;\n    return ptr2;\n}\n\nvoid\nfree_aligned(void *ptr)\n{\n    std::free(*((void**)ptr-1));\n}\n</code></pre>\n", "LastActivityDate": "2016-02-26T19:40:43.677"}, "35082217": {"ParentId": "35081546", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-01-29T10:29:45.667", "Score": "0", "LastEditorUserId": "2079303", "LastEditDate": "2016-01-29T10:47:17.220", "Id": "35082217", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_35081546_35082217_0\">std::align does not accept any power of 2 for alignement. I will be fixed in C++17, but it is useless right now</p>\n</blockquote>\n<p>Let's see what the standard (draft) says.</p>\n<blockquote>\n<p id=\"so_35081546_35082217_1\"><strong>[ptr.align]</strong></p>\n<p id=\"so_35081546_35082217_2\">2 Requires:</p>\n<p id=\"so_35081546_35082217_3\">(2.1) \u2014 alignment shall be a fundamental alignment value or an extended alignment value supported by the implementation in this context.</p>\n</blockquote>\n<p>So, any fundamental alignment value is allowed, and possibly others if allowed by the implementation. Let's see what a fundamental alignment is.</p>\n<blockquote>\n<p id=\"so_35081546_35082217_4\"><strong>[basic.align]</strong></p>\n<p id=\"so_35081546_35082217_5\">2 A <strong>fundamental alignment</strong> is represented by an alignment less than or equal to the greatest alignment supported by the implementation in all contexts, which is equal to alignof(std::max_align_t)...</p>\n</blockquote>\n<p>Ok. Then there is a limitation to all alignments.</p>\n<blockquote>\n<p id=\"so_35081546_35082217_6\">4 Alignments are represented as values of the type std::size_t. Valid alignments include only those values returned by an alignof expression for the fundamental types plus an additional implementation-defined set of values, which may be empty. <strong>Every alignment value</strong> shall be a non-negative integral <strong>power of two</strong>.</p>\n</blockquote>\n<p>So, not only are power of 2 alignments allowed, but in fact <em>only</em> powers of 2 alignments are allowed. The difference with C++17 is that until then, only alignments less than or equal to <code>alignof(std::max_align_t)</code> (i.e. fundamental alignments) are allowed. Support for bigger alignment depends on implementation.</p>\n<p>TL;DR Your premise is wrong. But whether <code>std::align</code> works, is still implementation defined until C++17.</p>\n", "LastActivityDate": "2016-01-29T10:47:17.220"}, "35081546": {"CommentCount": "1", "ViewCount": "551", "PostTypeId": "1", "LastEditorUserId": "70477", "CreationDate": "2016-01-29T09:56:47.583", "LastActivityDate": "2016-02-26T19:40:43.677", "Title": "Align a pointer", "LastEditDate": "2016-01-29T10:32:35.827", "Id": "35081546", "Score": "4", "Body": "<p>I want to align a pointer p so that <code>p = a (modulo b)</code>. Most of the time, a = 0 and b = 32 or 64 for SIMD alignement, but I might also want a = 64 and b = 128 when I want to fine tune my algorithm for cache associativity.</p>\n<ul>\n<li><code>std::align</code> does not accept any power of 2 for alignement. It will be fixed in C++17, but it is useless right now</li>\n<li><code>__mm_malloc/__free</code> is not as portable as I want</li>\n</ul>\n<p>My best solution so far is to cast the pointer to a <code>std::uintptr_t</code> and use modulo operations on integers to move the pointer. Unfortunately, it is not portable as casting a pointer to <code>std::uintptr_t</code> is not \"allowed\". But it works on all platforms I have tried so far.</p>\n<p>On what kind of platform would such a code break?</p>\n", "Tags": "<c++><memory-alignment>", "OwnerUserId": "3763545", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_35081546_35082217_5": {"section_id": 7241, "quality": 0.9333333333333333, "length": 14}, "so_35081546_35082217_3": {"section_id": 4210, "quality": 1.0, "length": 10}, "so_35081546_35082217_6": {"section_id": 7243, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_35081546_35082217_5": {"section_id": 6985, "quality": 0.9333333333333333, "length": 14}, "so_35081546_35082217_3": {"section_id": 4051, "quality": 1.0, "length": 10}, "so_35081546_35082217_6": {"section_id": 6987, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_35081546_35082217_5": {"section_id": 8750, "quality": 0.9333333333333333, "length": 14}, "so_35081546_35082217_6": {"section_id": 8752, "quality": 0.9655172413793104, "length": 28}, "so_35081546_35082217_3": {"section_id": 6969, "quality": 0.6, "length": 6}}}, "35081967": {"ParentId": "35081546", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-01-29T10:18:17.597", "Score": "2", "LastEditorUserId": "5855493", "LastEditDate": "2016-01-29T10:27:47.357", "Id": "35081967", "OwnerUserId": "5855493", "Body": "<p>Might be you look for something like this:</p>\n<pre><code>inline size_t AlignHi(size_t size, size_t align)\n{\n    return (size + align - 1) &amp; ~(align - 1);\n}\n\ninline void * Allocate(size_t size, size_t align)\n{\n#if defined(_MSC_VER) \n    return _aligned_malloc(size, align);\n#elif defined(__GNUC__)\n    align = AlignHi(align, sizeof(void*));\n    size = AlignHi(size, align);\n    void * ptr;\n    int result = ::posix_memalign(&amp;ptr, align, size);\n    return result ? NULL : ptr;\n#else\n    return malloc(size);\n#endif\n}\n\ninline void Free(void * p)\n{\n#if defined(_MSC_VER) \n    _aligned_free(p);\n#else\n    free(p);\n#endif\n}\n</code></pre>\n", "LastActivityDate": "2016-01-29T10:27:47.357"}});