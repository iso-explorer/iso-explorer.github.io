post_cb({"bq_ids": {"n4140": {"so_46961749_46967394_4": {"length": 12, "quality": 0.9230769230769231, "section_id": 6185}, "so_46961749_46967394_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 6185}, "so_46961749_46967394_6": {"length": 14, "quality": 0.5833333333333334, "section_id": 6187}, "so_46961749_46967394_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 6185}, "so_46961749_46967394_2": {"length": 14, "quality": 0.875, "section_id": 6185}}, "n3337": {"so_46961749_46967394_4": {"length": 11, "quality": 0.8461538461538461, "section_id": 5946}, "so_46961749_46967394_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 5946}, "so_46961749_46967394_5": {"length": 9, "quality": 0.6923076923076923, "section_id": 5946}, "so_46961749_46967394_2": {"length": 13, "quality": 0.8125, "section_id": 5946}}, "n4659": {"so_46961749_46967394_4": {"length": 12, "quality": 0.9230769230769231, "section_id": 7687}, "so_46961749_46967394_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 7687}, "so_46961749_46967394_6": {"length": 24, "quality": 1.0, "section_id": 7690}, "so_46961749_46967394_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 7687}, "so_46961749_46967394_2": {"length": 15, "quality": 0.9375, "section_id": 7687}}}, "46961749": {"ViewCount": "75", "Body": "<p>I have this code:</p>\n<pre><code>const float foo = 5.0F;\n\nstatic_assert(foo &gt; 0.0F, \"foo must be greater than 0.\");\n</code></pre>\n<p>But in <a class=\"post-tag\" href=\"/questions/tagged/visual-studio-2010\" rel=\"tag\" title=\"show questions tagged 'visual-studio-2010'\">visual-studio-2010</a> I get the error:</p>\n<blockquote>\n<p id=\"so_46961749_46961749_0\">error C2057: expected constant expression</p>\n</blockquote>\n<p>I'm actually doing this correctly and <a class=\"post-tag\" href=\"/questions/tagged/visual-studio-2010\" rel=\"tag\" title=\"show questions tagged 'visual-studio-2010'\">visual-studio-2010</a> just hasn't properly implemented <code>static_assert</code>, right? In <a class=\"post-tag\" href=\"/questions/tagged/visual-studio-2017\" rel=\"tag\" title=\"show questions tagged 'visual-studio-2017'\">visual-studio-2017</a> it works as intended.</p>\n<hr>\n<p>There has been some commentary of the differences between <code>const</code> and <code>constexpr</code>. I understand this difference, however many compilers support this use of <code>static_assert</code> so I'll ask again, is this legal code or not? I'm not as concerned about which compiler supports it, I'm concerned about whether it's defined under the C++ standard.</p>\n</hr>", "Title": "static_assert of const Variable", "CreationDate": "2017-10-26T18:49:42.960", "LastActivityDate": "2017-10-27T05:07:31.923", "CommentCount": "5", "LastEditDate": "2017-10-27T03:09:22.397", "PostTypeId": "1", "LastEditorUserId": "2642059", "Id": "46961749", "Score": "2", "OwnerUserId": "2642059", "Tags": "<c++><visual-studio-2010><global-variables><const><static-assert>", "AnswerCount": "1"}, "46967394": {"Id": "46967394", "PostTypeId": "2", "Body": "<p><code>foo &gt; 0.0F</code> is not a <a href=\"http://eel.is/c++draft/expr.const#2\" rel=\"nofollow noreferrer\">core constant expression</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>An expression e is a core constant expression unless the evaluation of e, following the rules of the abstract machine, would evaluate one\n  of the following expressions:</li>\n</ol>\n<p id=\"so_46961749_46967394_0\">...</p>\n<p id=\"so_46961749_46967394_1\">(2.7) an lvalue-to-rvalue conversion unless it is applied to</p>\n<p id=\"so_46961749_46967394_2\">(2.7.1) a non-volatile glvalue of integral or enumeration type that\n  refers to a complete non-volatile const object with a preceding\n  initialization, initialized with a constant expression, or</p>\n<p id=\"so_46961749_46967394_3\">(2.7.2) a non-volatile glvalue that refers to a subobject of a string\n  literal, or</p>\n<p id=\"so_46961749_46967394_4\">(2.7.3) a non-volatile glvalue that refers to a non-volatile object\n  defined with constexpr, or that refers to a non-mutable subobject of\n  such an object, or</p>\n<p id=\"so_46961749_46967394_5\">(2.7.4) a non-volatile glvalue of literal type that refers to a\n  non-volatile object whose lifetime began within the evaluation of e;</p>\n</blockquote>\n<p><code>foo</code> is of floating-point type, for <code>foo &gt; 0.0F</code> an lvalue-to-rvalue conversion on <code>foo</code> is required, which doesn't match the above conditions, then <code>foo &gt; 0.0F</code> is not considered as <a href=\"http://eel.is/c++draft/expr.const#6\" rel=\"nofollow noreferrer\">constant expression</a>:</p>\n<blockquote>\n<p id=\"so_46961749_46967394_6\">A constant expression is either a glvalue core constant expression that refers to an entity that is a permitted result of a constant expression (as defined below), or a prvalue core constant expression whose value satisfies the following constraints</p>\n</blockquote>\n<p>On the other hand, if declare <code>foo</code> as integral type the code would be fine. <a href=\"https://wandbox.org/permlink/rqBb9gDlgCQasJQW\" rel=\"nofollow noreferrer\">LIVE</a> (Using<code>constexpr</code> instead of <code>const</code> works too. <a href=\"https://wandbox.org/permlink/dXUMoPfhEOYC3IdZ\" rel=\"nofollow noreferrer\">LIVE</a>)</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2017-10-27T05:07:31.923", "Score": "2", "CreationDate": "2017-10-27T04:12:00.287", "ParentId": "46961749", "CommentCount": "3", "LastEditDate": "2017-10-27T05:07:31.923", "OwnerUserId": "3309790"}});