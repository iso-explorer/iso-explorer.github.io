post_cb({"bq_ids": {"n4140": {"so_15314778_15314839_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 5943}}, "n3337": {"so_15314778_15314839_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 5714}}, "n4659": {"so_15314778_15314839_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 7428}}}, "15314839": {"Id": "15314839", "PostTypeId": "2", "Body": "<p>What you're seeing are just the effects of the <a href=\"http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/Stephan-T-Lavavej-Core-C-7-of-n\" rel=\"noreferrer\">Usual Arithmetic Conversions</a>.</p>\n<p>The standard says the following:</p>\n<p><code>\u00a75 [expr] p7</code>:</p>\n<blockquote>\n<p id=\"so_15314778_15314839_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a common type, which is also the type of the result. This pattern is called the usual arithmetic conversions, which are defined as follows:</p>\n<ul>\n<li>[...]</li>\n<li>Otherwise, the integral promotions (4.5) shall be performed on both operands. Then the following rules shall be applied to the promoted operands:\n  \n  <ul>\n<li>[...]</li>\n<li>Otherwise, both operands shall be converted to the unsigned integer type corresponding to the type of the operand with signed integer type.</li>\n</ul></li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2013-03-09T19:18:46.843", "CommentCount": "1", "CreationDate": "2013-03-09T19:18:46.843", "ParentId": "15314778", "Score": "11", "OwnerUserId": "500104"}, "15314778": {"ViewCount": "379", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nusing namespace std;\n\nint main()\n{\n    int s = 2;\n    unsigned int u = 3;\n\n    auto k = s + u;\n\n    if (typeid(k) == typeid(s))\n        cout &lt;&lt; \"signed\" &lt;&lt; endl;\n    else if (typeid(k) == typeid(u))\n        cout &lt;&lt; \"unsigned\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"error\" &lt;&lt; endl;\n}\n</code></pre>\n<p>The output of this program by GCC is:</p>\n<pre><code>unsigned\n</code></pre>\n<p>I'm pretty sure this is either undefined or implementation-defined behaviour - but I can't seem to connect the dots with the standard.</p>\n<p>Can you tell me where in the standard it says this?</p>\n", "AcceptedAnswerId": "15314839", "Title": "C++11 type of (signed + unsigned)?", "CreationDate": "2013-03-09T19:12:41.373", "Id": "15314778", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-03-09T19:19:12.130", "LastEditorUserId": "500104", "LastActivityDate": "2013-03-09T19:19:12.130", "Score": "3", "OwnerUserId": "1131467", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}});