post_cb({"35708014": {"ViewCount": "1751", "Body": "<p>I am used to declaring variadic functions like this:</p>\n<pre><code>int f(int n, ...);\n</code></pre>\n<p>When reading <em>The C++ Programming Language</em> I found that the declarations in the book omit the comma:</p>\n<pre><code>int f(int n...); // the comma has been omitted\n</code></pre>\n<p>It seems like this syntax is C++ specific as I get this error when I try to compile it using a C compiler:</p>\n<blockquote>\n<p id=\"so_35708014_35708014_0\"><code>test.c:1:12: error: expected \u2018;\u2019, \u2018,\u2019 or \u2018)\u2019 before \u2018...\u2019 token\n       int f(int n...);</code></p>\n</blockquote>\n<p>Is there any difference between writing <code>int f(int n, ...)</code> and <code>int f(int n...</code>)? </p>\n<p>Why was this syntax added C++?</p>\n", "AcceptedAnswerId": "35708258", "Title": "Comma omitted in variadic function declaration in C++", "CreationDate": "2016-02-29T19:32:29.983", "Id": "35708014", "CommentCount": "6", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2016-03-01T14:24:27.150", "LastEditorUserId": "719662", "LastActivityDate": "2016-03-03T14:38:38.763", "Score": "42", "OwnerUserId": "3787875", "Tags": "<c++><function><declaration><variadic-functions>", "AnswerCount": "4"}, "35708178": {"Id": "35708178", "PostTypeId": "2", "Body": "<p>With <code>int f(int n, ...);</code> and <code>int f(int n...);</code>, as you can <a href=\"http://en.cppreference.com/w/cpp/language/variadic_arguments\">see</a>, both <code>, ...</code> and <code>...</code> has the same meaning. Comma is optional.</p>\n<p>But this <code>int printz(...);</code> is valid in <code>C++</code> while <code>int printz(,...);</code> is not (at least one named parameter must appear before the ellipsis parameter). That's why you can have just <code>(...)</code>, even though the arguments passed to such function are not accessible.</p>\n", "LastActivityDate": "2016-02-29T19:40:57.240", "CommentCount": "0", "CreationDate": "2016-02-29T19:40:57.240", "ParentId": "35708014", "Score": "15", "OwnerUserId": "3658660"}, "35708482": {"Id": "35708482", "PostTypeId": "2", "Body": "<p>Currently, both of these declarations have the same meaning:</p>\n<pre><code>int f(int n, ...);\nint f(int n ...);\n</code></pre>\n<p>This leads to an issue where the following two declarations are both legal, yet have wildly different meanings:</p>\n<blockquote id=\"so_35708014_35708482_0\">\n<pre><code>template &lt;class... T&gt; void f(T...); // function template with parameter pack\ntemplate &lt;class T&gt; void f(T...);    // variadic function\n</code></pre>\n</blockquote>\n<p>Once C++11 introduced variadic templates, it is much more likely that the second declaration is a programmer error rather than lazily omitting the comma. As a result, there was a proposal to remove the latter from the language (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0281r0.html\" rel=\"nofollow noreferrer\">P0281</a>), but it was apparently <a href=\"https://stackoverflow.com/questions/35708014/comma-omitted-in-variadic-function-declaration-in-c/35708482?noredirect=1#comment59221433_35708482\">rejected</a>. </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-03-03T14:38:38.763", "Score": "29", "CreationDate": "2016-02-29T19:58:47.573", "ParentId": "35708014", "CommentCount": "3", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T11:53:04.877"}, "35708258": {"Id": "35708258", "PostTypeId": "2", "Body": "<p>According to \u00a7 8.3.5.4 of the C++ standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\">current draft</a>):</p>\n<blockquote>\n<p id=\"so_35708014_35708258_0\">Where syntactically correct and where \u201c...\u201d is not part of\n  an abstract-declarator, \u201c, ...\u201d is synonymous with \u201c...\u201d.</p>\n</blockquote>\n<p>In short, in C++ <code>...</code> (ellipsis) is an operator in its own right and so can be used without the comma, but use of the comma is retained for backwards compatibility.</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2016-03-03T12:56:54.397", "Score": "36", "CreationDate": "2016-02-29T19:45:39.433", "ParentId": "35708014", "CommentCount": "15", "OwnerUserId": "257645", "LastEditDate": "2016-03-03T12:56:54.397"}, "bq_ids": {"n4140": {"so_35708014_35708482_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 4706}, "so_35708014_35708258_0": {"length": 7, "quality": 1.0, "section_id": 3240}}, "n3337": {"so_35708014_35708482_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 4515}, "so_35708014_35708258_0": {"length": 7, "quality": 1.0, "section_id": 3113}}, "n4659": {"so_35708014_35708482_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 307}, "so_35708014_35708258_0": {"length": 7, "quality": 1.0, "section_id": 3996}}}, "35724888": {"Id": "35724888", "PostTypeId": "2", "Body": "<p>As I recall from the time, C++ indeed defined variadic function signatues as you note. Later, the rapidly evolving C language (on the journey from K&amp;R to ANSI) introduced <em>prototypes</em> or <em>new-style function declarations</em> that also declared parameters inside parens after the function name. But, with two notable differences: the comma before the ellipses, and the need for the abomination of <code>(void)</code> to indicate an empty parameter list (to preserve backward compatibility of the empty parens as an <em>old style</em> declaration).</p>\n<p>Looking through my archives, I find <em>The C++ Programming Language</em> original edition \"reprinted with corrections July 1987\" shows:</p>\n<p>\u00a0\u00a0\u00a0\u00a0<i>argument-declaration-list:<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arg-declaration-list<sub>opt</sub></br></i> <code>...</code><i><sub>opt</sub><br><br>\n\u00a0\u00a0\u00a0\u00a0arg-declaration-list:<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arg-declaration-list</br></br></br></i> <code>,</code><i> argument-declaration <br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argument-declaration\n</br></i></p>\n<p>There is <strong>no form</strong> to accept the now-optional comma.  Note that the arg-declaration-list is a comma-<strong>separated</strong> and this doesn't hang out to provide a comma after the list and before the next (different) thing.</p>\n<p>This is the most natural way to write this. If you <em>want</em> a comma, you need explicitly <code>, ...</code> in the first production, as two distinct (possibly whitespace separated) tokens.</p>\n<p>As C's efforts to proper standardization progressed, C++ compilers started accepting the C versions as well to allow easy use of the C standard header files.</p>\n<p>Why did the C designers add the comma when it implies a less sensible grammatical role of the ellipses as a fake parameter placeholder? I never found out.</p>\n", "LastEditorUserId": "658087", "LastActivityDate": "2016-03-02T15:24:44.740", "Score": "6", "CreationDate": "2016-03-01T13:57:45.650", "ParentId": "35708014", "CommentCount": "2", "OwnerUserId": "658087", "LastEditDate": "2016-03-02T15:24:44.740"}});