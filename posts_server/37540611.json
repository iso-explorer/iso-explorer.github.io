post_cb({"bq_ids": {"n4140": {"so_37540611_37544789_0": {"length": 6, "quality": 0.6, "section_id": 2287}}, "n3337": {"so_37540611_37544789_0": {"length": 6, "quality": 0.6, "section_id": 2275}}, "n4659": {"so_37540611_37544789_0": {"length": 6, "quality": 0.6, "section_id": 2560}}}, "37544789": {"Id": "37544789", "PostTypeId": "2", "Body": "<p><strong>As mentioned in the comments, this answer is relevant for C++14 only</strong>.</p>\n<p>Despite the good answer from @keenyt, it's worth to say that <code>std::make_unique&lt;T&gt;</code> can throw, even though the constructors of <code>std::unique_ptr</code> are <code>noexcept</code>.<br>\nActually, whether the above mentioned statement throws or not mostly depends on the constructors of the type <code>T</code> involved.</br></p>\n<p>As an example from <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique\" rel=\"nofollow\">cppreference.com</a> for <code>std::make_unique</code>:</p>\n<blockquote>\n<p id=\"so_37540611_37544789_0\">May throw std::bad_alloc or any exception thrown by the constructor of T. If an exception is thrown, this function has no effect.</p>\n</blockquote>\n<p>So, a refinement of the answer would be: no, you don't need a <code>try/catch</code> block, unless you are using <code>std::make_unique</code> and the constructors of your type <code>T</code> can throw.</p>\n", "LastEditorUserId": "4987285", "LastActivityDate": "2016-05-31T13:35:21.440", "Score": "1", "CreationDate": "2016-05-31T11:42:14.397", "ParentId": "37540611", "CommentCount": "3", "LastEditDate": "2016-05-31T13:35:21.440", "OwnerUserId": "4987285"}, "37540788": {"Id": "37540788", "PostTypeId": "2", "Body": "<ol>\n<li>All of <code>std::unique_ptr</code>'s <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr/unique_ptr#Exceptions\">constructors</a>* are <code>noexcept</code> </li>\n<li><code>malloc</code> won't throw any exception on failure... it will just return <code>nullptr</code>.</li>\n<li>I believe your deleter's constructors won't throw anything either.</li>\n</ol>\n<p>So you don't need to catch anything, since nothing will be thrown.</p>\n<hr>\n<p>*: See C++11 \u00a720.7.1.2.1 <code>unique_ptr</code> constructors [unique.ptr.single.ctor]</p>\n</hr>", "LastActivityDate": "2016-05-31T08:38:25.160", "Score": "6", "CreationDate": "2016-05-31T08:38:25.160", "ParentId": "37540611", "CommentCount": "0", "OwnerUserId": "224671"}, "37540611": {"ViewCount": "468", "Body": "<p>Do I need to wrap <code>std::unique_ptr</code> usage with <code>try/catch</code> in code which should be exception safe?<br>\n<code>std::unique_ptr</code> will hold a raw memory block created by <code>::malloc</code> (with my custom deleter to call <code>::free</code>).</br></p>\n", "AcceptedAnswerId": "37540788", "Title": "std::unique_ptr and exception safety", "CreationDate": "2016-05-31T08:29:05.333", "Id": "37540611", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-05-31T13:35:21.440", "Score": "1", "OwnerUserId": "658346", "Tags": "<c++><c++11><stl>", "AnswerCount": "2"}});