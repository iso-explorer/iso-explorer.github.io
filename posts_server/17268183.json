post_cb({"17268195": {"Id": "17268195", "PostTypeId": "2", "Body": "<p>You need to add a virtual destructor to the Base class.</p>\n<pre><code>class Base {\npublic:\n    virtual void ShowMessage () {\n        std::cout &lt;&lt; \"Base class message\\n\";\n    }\n\n    virtual ~Base() {}\n};\n</code></pre>\n<p>In your case, the Derived::myvalue will not be released properly.</p>\n", "LastEditorUserId": "2385104", "LastActivityDate": "2013-06-24T05:02:55.543", "Score": "7", "CreationDate": "2013-06-24T04:47:44.613", "ParentId": "17268183", "CommentCount": "7", "OwnerUserId": "2385104", "LastEditDate": "2013-06-24T05:02:55.543"}, "bq_ids": {"n4140": {"so_17268183_17268264_0": {"length": 41, "quality": 1.0, "section_id": 6107}}, "n3337": {"so_17268183_17268264_0": {"length": 41, "quality": 1.0, "section_id": 5873}}, "n4659": {"so_17268183_17268264_0": {"length": 41, "quality": 1.0, "section_id": 7604}}}, "17268198": {"Id": "17268198", "PostTypeId": "2", "Body": "<p>A virtual destructor.  When this code executes...</p>\n<pre><code>delete obj;\n</code></pre>\n<p>...it won't know there's a <code>std::string</code> to destruct/deallocate unless the destructor is invoked polymorphically (i.e. via virtual dispatch).  That's because without virtual dispatch, the Base class destructor runs, and it doesn't have that <code>std::string</code> data member to worry about, so doesn't include the code related to it.</p>\n<p>The guideline's simple: whenever you are deleting objects using a pointer to a base class, you should ensure the base has a virtual destructor.</p>\n<p>Anything else has the problems above, and is technically undefined behaviour.  While it's not a good idea to attempt to \"reason\" about undefined behaviour because you can't be sure whatever happens won't be worse than expected (if not now, then on some furture compiler/compiler-version, or with different compilation switches or surrounding code, another CPU etc), memory leaks are an obvious likely consequence in this case: the std::string constructor can be expected to have dynamically <code>new</code>-ed a character array, and the instructor would have deleted it if run.  Still, there can be other problems - if data members of the derived class are say shared pointers then the pointed-to objects may not be destructed/deallocated properly, if there are file handles, shared memory handles, threads, locks etc. held the consequences of failing to invoke the destructors could be severe: data may not be flushed out to intended destinations, the application may run out of resources after repeated leaks, or it could hang later when some other code tries to acquire a lock it's still holding....</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2013-06-24T05:06:17.777", "Score": "4", "CreationDate": "2013-06-24T04:48:09.727", "ParentId": "17268183", "CommentCount": "3", "OwnerUserId": "410767", "LastEditDate": "2013-06-24T05:06:17.777"}, "17268264": {"Id": "17268264", "PostTypeId": "2", "Body": "<p>You must make destructor virtual, since deleting polymorphic type without virtual destructor  leads to undefined behavior:</p>\n<p>Per 5.3.5.3:</p>\n<blockquote>\n<p id=\"so_17268183_17268264_0\">In the first alternative (delete object), if the static type of the\n  object to be deleted is different from its dynamic type, the static\n  type shall be a base class of the dynamic type of the object to be\n  deleted and <strong>the static type shall have a virtual destructor or the\n  behavior is undefined</strong>. In the second alternative (delete array) if the\n  dynamic type of the object to be deleted differs from its static type,\n  the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2013-06-24T04:56:42.327", "CommentCount": "0", "CreationDate": "2013-06-24T04:56:42.327", "ParentId": "17268183", "Score": "1", "OwnerUserId": "1532460"}, "17268183": {"ViewCount": "737", "Body": "<p>I was recently asked a basic C++ question that I didn't actually know the answer to and I never found out what the answer was. Here is the question:</p>\n<p>When this program is run it can cause an error. What change would you make to the Base class to fix it?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base {\npublic:\n    virtual void ShowMessage () {\n        std::cout &lt;&lt; \"Base class message\\n\";\n    }\n\n    // Something should be added here!\n};\n\nclass Derived : public Base {\npublic:\n    explicit Derived (const std::string &amp; value)\n        : myValue(value)\n    {\n    }\n\n    virtual void ShowMessage () {\n        std::cout &lt;&lt; \"Derived class message \" &lt;&lt; myValue &lt;&lt; \"\\n\";\n    }\n\nprivate:\n    std::string myValue;\n};\n\nint main () {\n    Base * obj = new Derived(\"Test message\");\n    obj-&gt;ShowMessage();\n    delete obj;\n}\n</code></pre>\n<p>It compiles and runs just fine on my machine. Anyone know what they were looking for?</p>\n", "Title": "C++ Inheritance quiz", "CreationDate": "2013-06-24T04:46:32.617", "LastActivityDate": "2013-06-24T05:06:17.777", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Id": "17268183", "Score": "3", "OwnerUserId": "2227713", "Tags": "<c++><inheritance>", "AnswerCount": "3"}});