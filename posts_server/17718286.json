post_cb({"bq_ids": {"n4140": {"so_17718286_17718330_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 5317}}, "n3337": {"so_17718286_17718330_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 5114}}}, "17718330": {"PostTypeId": "2", "Body": "<p>It's called <a href=\"http://en.wikipedia.org/wiki/Digraphs_and_trigraphs#C\">Trigraph</a>:</p>\n<p>C11(ISO/IEC 9899:201x) \u00a75.2.1.1 <em>Trigraph sequences</em></p>\n<blockquote>\n<p id=\"so_17718286_17718330_0\">Before any other processing takes place, each occurrence of one of the following\n  sequences of three characters (called trigraph sequences17)) is replaced with the\n  corresponding single character.</p>\n</blockquote>\n<pre><code>??=    #\n??(    [\n??/    \\\n??)    ]\n??'    ^\n??&lt;    {\n??!    |\n??&gt;    }\n??-    ~\n</code></pre>\n<p>It's also in C++11(ISO/IEC 14882:2011) \u00a7 2.3 <em>Trigraph sequences</em></p>\n<p>So after trigraph replacement, the line <code>return p??!??!k?p?*p:sizeof(*k):0;</code> turns into</p>\n<pre><code>return p || k ? p ? *p : sizeof(*k) : 0\n</code></pre>\n<p>Since the ternary operator has a rather low precedence, it's actually:</p>\n<pre><code>return (p || k) ? (p ? (*p) : sizeof(*k)) : 0;\n</code></pre>\n", "LastActivityDate": "2013-07-18T08:40:35.817", "LastEditorUserId": "1009479", "Id": "17718330", "CommentCount": "0", "CreationDate": "2013-07-18T08:26:03.793", "ParentId": "17718286", "Score": "37", "OwnerUserId": "1009479", "LastEditDate": "2013-07-18T08:40:35.817"}, "17718364": {"PostTypeId": "2", "Body": "<p>That line of code is equivalent to:</p>\n<pre><code>return p || k? p? *p : sizeof(*k) : 0;\n</code></pre>\n<p>Or more clearly:</p>\n<pre><code>return (p || k)? (p? (*p) : sizeof(*k)) : 0;\n</code></pre>\n", "LastActivityDate": "2013-07-18T08:33:15.940", "LastEditorUserId": "1520907", "Id": "17718364", "CommentCount": "0", "CreationDate": "2013-07-18T08:28:09.590", "ParentId": "17718286", "Score": "6", "OwnerUserId": "1520907", "LastEditDate": "2013-07-18T08:33:15.940"}, "17718286": {"ViewCount": "1996", "Body": "<p>I am refactoring some <strong>very</strong> old legacy code which is full of bugs and very questionable practices, at least for modern standards. Now I ran across one line which I simply cannot decipher: </p>\n<p><code>p</code> and <code>k</code> are of type <code>int *</code></p>\n<pre><code>return p??!??!k?p?*p:sizeof(*k):0;\n</code></pre>\n<p>When I saw it I could not believe my eyes - I know the <code>?</code> operator, but its syntax is <code>bool ? trueresult : falseresult</code> and a <code>??</code> operator does neither make sense (lazy evaluation does really not apply here), not could I find a reference of that mysterious operator anywhere.</p>\n<p>It would be really cool if someone shed some light on this matter.</p>\n", "AcceptedAnswerId": "17718330", "Title": "Cryptic line \"??!??!\" in legacy code", "CreationDate": "2013-07-18T08:24:10.587", "Id": "17718286", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-07-18T08:46:14.300", "LastEditorUserId": "1009479", "LastActivityDate": "2013-07-18T08:46:14.300", "Tags": "<c++><c><operators>", "Score": "21", "OwnerUserId": "2573221", "ClosedDate": "2013-07-18T08:48:58.057", "AnswerCount": "2"}});