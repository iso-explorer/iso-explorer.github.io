post_cb({"bq_ids": {"n4140": {"so_29130530_29130566_3": {"length": 5, "quality": 0.5555555555555556, "section_id": 7050}, "so_29130530_29130566_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 7049}, "so_29130530_29130566_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_29130530_29130566_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 7050}}, "n3337": {"so_29130530_29130566_3": {"length": 5, "quality": 0.5555555555555556, "section_id": 6795}, "so_29130530_29130566_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 6794}, "so_29130530_29130566_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_29130530_29130566_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 6795}}, "n4659": {"so_29130530_29130566_3": {"length": 5, "quality": 0.5555555555555556, "section_id": 8547}, "so_29130530_29130566_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 8546}, "so_29130530_29130566_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_29130530_29130566_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 8547}}}, "29130530": {"ViewCount": "120", "Body": "<p>I have a C code snippet as follows:</p>\n<pre><code>const int x = 5;\nvoid main()\n{\n    int x[x];\n    int y = sizeof(x) / sizeof(int);\n    printf(\"%d\",y);\n}\n</code></pre>\n<p>The code snippet would be compiled and run correctly. But I don't understand how to differentiate x 'variable' and x 'const'.</p>\n", "AcceptedAnswerId": "29130566", "Title": "Variable and constant with same name", "CreationDate": "2015-03-18T18:58:42.510", "Id": "29130530", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-03-18T19:25:27.170", "LastEditorUserId": "1708801", "LastActivityDate": "2015-03-20T18:26:18.327", "Score": "2", "OwnerUserId": "2589553", "Tags": "<c++><c>", "AnswerCount": "1"}, "29130566": {"Id": "29130566", "PostTypeId": "2", "Body": "<p>For C++ this is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>3.3.2</code> <em>Point of declaration</em>:</p>\n<blockquote>\n<p id=\"so_29130530_29130566_0\">The point of declaration for a name is immediately after its complete\n  declarator (Clause 8) and before its initializer (if any), except as\n  noted below. [ Example:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_29130530_29130566_1\">Here the second x is initialized with its own (indeterminate) value.\n  \u2014end example ]</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_29130530_29130566_2\">[ Note: a name from an outer scope remains visible up to the point of\n  declaration of the name that hides it.[ Example:</p>\n<pre><code>const int i = 2;\n{ int i[i]; }\n</code></pre>\n<p id=\"so_29130530_29130566_3\">declares a block-scope array of two integers. \u2014end example ] \u2014end note\n  ]</p>\n</blockquote>\n<p>So in your case:</p>\n<pre><code>int x[x];\n</code></pre>\n<p>The <em>const int</em> <code>x</code> is visible until the closing <code>]</code>. To refer to <em>const int</em> <code>x</code> after that point you can use a <a href=\"http://en.cppreference.com/w/cpp/language/identifiers\" rel=\"nofollow\">qualified identifer</a>:</p>\n<pre><code>::x\n</code></pre>\n<p>Of course this begs the question, why not just use different names and not have to deal with these edge cases?</p>\n<p><b>C</b></p>\n<p>The equivalent quotes form the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">draft C99 standard</a> would be from section <code>6.2.1</code> <em>Scopes of identifiers</em> (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_29130530_29130566_4\">Structure, union, and enumeration tags have scope that begins just\n  after the appearance of the tag in a type specifier that declares the\n  tag. Each enumeration constant has scope that begins just after the\n  appearance of its defining enumerator in an enumerator list. <strong>Any\n  other identifier has scope that begins just after the completion of\n  its declarator.</strong></p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_29130530_29130566_5\">[...] Within the inner scope, the identifier designates the entity\n  declared in the inner scope; the entity declared in the outer scope is\n  hidden (and not visible) within the inner scope.</p>\n</blockquote>\n<p>there is no way to make the <code>x</code> in the outer scope visible in C.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-03-20T18:26:18.327", "Score": "9", "CreationDate": "2015-03-18T19:00:58.857", "ParentId": "29130530", "CommentCount": "2", "OwnerUserId": "1708801", "LastEditDate": "2015-03-20T18:26:18.327"}});