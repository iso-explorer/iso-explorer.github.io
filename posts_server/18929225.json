post_cb({"18929278": {"Id": "18929278", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18929225_18929278_0\">Is this valid? </p>\n</blockquote>\n<p>Yes, it is valid as per standard \u00a7 5.2.9.7</p>\n<blockquote>\n<p id=\"so_18929225_18929278_1\">A prvalue of type \u201cpointer to cv1 void\u201d can be converted to a prvalue of type \u201cpointer to cv2 T,\u201d where T is an object type and cv2 is the same cv-qualification as, or greater cv-qualification than, cv1. The null pointer value is converted to the null pointer value of the destination type. <strong>A value of type pointer to object converted to \u201cpointer to cv void\u201d and back, possibly with different cv-qualification, shall have its original value.</strong> [ Example:</p>\n</blockquote>\n<pre><code>T* p1 = new T;\nconst T* p2 = static_cast&lt;const T*&gt;(static_cast&lt;void*&gt;(p1));\nbool b = p1 == p2; // b will have the value true.\n</code></pre>\n", "LastActivityDate": "2013-09-21T05:30:38.260", "CommentCount": "0", "CreationDate": "2013-09-21T05:30:38.260", "ParentId": "18929225", "Score": "1", "OwnerUserId": "951757"}, "18929285": {"Id": "18929285", "PostTypeId": "2", "Body": "<p>This is perfectly valid. Here is what standard has to say about it: </p>\n<blockquote>\n<p id=\"so_18929225_18929285_0\">\u00a74.10 Pointer conversions</p>\n<blockquote>\n<p id=\"so_18929225_18929285_2\">2 An rvalue of type \"pointer to <em>cv</em> <code>T</code>,\" where <code>T</code> is an object \n        type, can be converted to an rvalue of type \"pointer to <em>cv</em>\n<code>void</code>.\" The result of converting a \"pointer to <em>cv</em> <code>T</code>\" to a \"pointer \n        to <em>cv</em> <code>void</code>\" points to the start of the storage location where the \n        object of type <code>T</code> resides, as if the object is a most derived \n        object (1.8) of type <code>T</code> (that is, not a base class subobject). </p>\n</blockquote>\n</blockquote>\n<p>which means you can convert your pointer to class to a void pointer. And ...</p>\n<blockquote>\n<p id=\"so_18929225_18929285_3\">\u00a75.2.9 Static cast </p>\n<blockquote>\n<p id=\"so_18929225_18929285_5\">10 An rvalue of type \"pointer to <em>cv</em> <code>void</code>\" can be explicitly \n        converted to a pointer to object type. A value of type pointer \n        to object converted to \"pointer to <em>cv</em> <code>void</code>\" and back to the \n        original pointer type will have its original value.</p>\n</blockquote>\n</blockquote>\n<p>which means you can use <code>static_cast</code> to convert a void pointer back to an original class pointer.</p>\n<p>Hope it helps. Good Luck!</p>\n", "OwnerDisplayName": "user405725", "LastEditorUserId": "420683", "LastActivityDate": "2013-09-21T09:56:41.680", "Score": "8", "CreationDate": "2013-09-21T05:31:57.620", "ParentId": "18929225", "CommentCount": "2", "LastEditDate": "2013-09-21T09:56:41.680"}, "bq_ids": {"n4140": {"so_18929225_18929285_5": {"length": 20, "quality": 0.7692307692307693, "section_id": 6039}, "so_18929225_18929285_4": {"length": 20, "quality": 0.7692307692307693, "section_id": 6039}, "so_18929225_18929278_1": {"length": 45, "quality": 0.9574468085106383, "section_id": 6039}}, "n3337": {"so_18929225_18929285_5": {"length": 20, "quality": 0.7692307692307693, "section_id": 5807}, "so_18929225_18929285_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 37}, "so_18929225_18929278_1": {"length": 45, "quality": 0.9574468085106383, "section_id": 5807}, "so_18929225_18929285_1": {"length": 31, "quality": 0.9117647058823529, "section_id": 37}, "so_18929225_18929285_4": {"length": 20, "quality": 0.7692307692307693, "section_id": 5807}}, "n4659": {"so_18929225_18929285_5": {"length": 18, "quality": 0.6923076923076923, "section_id": 7548}, "so_18929225_18929278_1": {"length": 30, "quality": 0.6382978723404256, "section_id": 7536}, "so_18929225_18929285_4": {"length": 18, "quality": 0.6923076923076923, "section_id": 7548}}}, "18930441": {"Id": "18930441", "PostTypeId": "2", "Body": "<pre><code>    CFoo* foo = new CFoo;\n    void* dt = (void*)foo;\n</code></pre>\n", "LastActivityDate": "2013-09-21T08:15:36.673", "CommentCount": "0", "CreationDate": "2013-09-21T08:15:36.673", "ParentId": "18929225", "Score": "1", "OwnerUserId": "2735643"}, "18929225": {"ViewCount": "16723", "Body": "<p>How can I able to cast a class pointer to a generic pointer like void*? Like is this code valid?,</p>\n<pre><code>class CFoo\n{\n   int a;\npublic:\n   CFoo():a(1){}\n   ~CFoo(){}\n   getNum(){return a;}\n};\n\nvoid tfunc(void* data)\n{\n    CFoo* foo = static_cast&lt;CFoo*&gt;(data);\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; foo-&gt;getNum();\n    delete foo;\n}\n\nint main()\n{\n   CFoo* foo = new CFoo;\n   void* dt = static_cast&lt;void*&gt;(foo);\n   tfunc(dt); // or tfunc(static_cast&lt;void*&gt;(food));\n\n   return 0;\n}\n</code></pre>\n", "Title": "Casting Class Pointer to Void Pointer", "CreationDate": "2013-09-21T05:22:43.570", "LastActivityDate": "2014-09-11T13:00:02.367", "CommentCount": "6", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2013-09-21T05:40:11.800", "LastEditorUserId": "130278", "Id": "18929225", "Score": "7", "OwnerUserId": "130278", "Tags": "<c++><casting>", "AnswerCount": "4"}, "25788142": {"Id": "25788142", "PostTypeId": "2", "Body": "<p>In C++ you don't need the static cast to get <strong>to</strong> <code>void*</code>:</p>\n<pre><code>int main()\n{\n    CFoo* foo = new CFoo;\n    void* dt = foo;\n    tfunc(dt); // or tfunc(foo);\n\n    return 0;\n}\n</code></pre>\n<p>NB: your implementation of <code>tfunc()</code> is quite correct in that it <strong>does</strong> need the cast.</p>\n", "LastActivityDate": "2014-09-11T13:00:02.367", "CommentCount": "0", "CreationDate": "2014-09-11T13:00:02.367", "ParentId": "18929225", "Score": "4", "OwnerUserId": "4834"}});