post_cb({"25941993": {"ParentId": "25941894", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++14 it changed,  as covered by the <a href=\"https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf\" rel=\"nofollow\">draft C++14 standard</a> section 7.1.5 The constexpr specifier</p>\n<blockquote>\n<p id=\"so_25941894_25941993_0\">its function-body shall be = delete, = default, or a compound-statement that does not contain</p>\n<p id=\"so_25941894_25941993_1\">\u2014 an asm-definition,</p>\n<p id=\"so_25941894_25941993_2\">\u2014 a goto statement,</p>\n<p id=\"so_25941894_25941993_3\">\u2014 a try-block, or</p>\n<p id=\"so_25941894_25941993_4\">\u2014 a definition of a variable of non-literal type or of static or thread storage duration or for which\n  no initialization is performed</p>\n</blockquote>\n<p>and a constructor must follow the additional restrictons:</p>\n<blockquote>\n<p id=\"so_25941894_25941993_5\">\u2014 either its function-body shall be = default, or the compound-statement of its function-body shall satisfy\n  the constraints for a function-body of a constexpr function;</p>\n<p id=\"so_25941894_25941993_6\">\u2014 every non-variant non-static data member and base class sub-object shall be initialized (12.6.2);</p>\n<p id=\"so_25941894_25941993_7\">\u2014 if the class is a union having variant members (9.5), exactly one of them shall be initialized;</p>\n<p id=\"so_25941894_25941993_8\">\u2014 if the class is a union-like class, but is not a union, for each of its anonymous union members having\n  variant members, exactly one of them shall be initialized;</p>\n<p id=\"so_25941894_25941993_9\">\u2014 for a non-delegating constructor, every constructor selected to initialize non-static data members and\n  base class sub-objects shall be a constexpr constructor;</p>\n<p id=\"so_25941894_25941993_10\">\u2014 for a delegating constructor, the target constructor shall be a constexpr constructor.</p>\n</blockquote>\n<p>and it does not prevent a <em>return statement</em> nor a <code>static_assert</code>.</p>\n<p>in C++11 it included the restrictions:</p>\n<blockquote>\n<p id=\"so_25941894_25941993_11\">\u2014 the compound-statement of its function-body shall contain only</p>\n<p id=\"so_25941894_25941993_12\">\u2014 null statements,</p>\n<p id=\"so_25941894_25941993_13\">\u2014 static_assert-declarations</p>\n<p id=\"so_25941894_25941993_14\">\u2014 typedef declarations and alias-declarations that do not define classes or enumerations,</p>\n<p id=\"so_25941894_25941993_15\">\u2014 using-declarations,</p>\n<p id=\"so_25941894_25941993_16\">\u2014 and using-directives</p>\n</blockquote>\n<p>which does not allow a return statement.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-09-19T20:47:42.683", "Id": "25941993", "Score": "1", "CreationDate": "2014-09-19T20:33:28.077", "LastActivityDate": "2014-09-19T20:47:42.683"}, "25941957": {"ParentId": "25941894", "CommentCount": "3", "Body": "<p>GCC currently <a href=\"https://gcc.gnu.org/projects/cxx1y.html\">doesn't support</a> C++14's version of <code>constexpr</code>, so even with <code>-std=c++14</code> you still get C++11's <code>constexpr</code>.</p>\n<p>The C++11 restriction on the body of <code>constexpr</code> constructors is (\u00a77.1.5 [dcl.constexpr]/p4):</p>\n<blockquote>\n<p id=\"so_25941894_25941957_0\">the <em>compound-statement</em> of its <em>function-body</em> shall contain only</p>\n<ul>\n<li>null statements,</li>\n<li><em>static_assert-declarations</em></li>\n<li><code>typedef</code> declarations and <em>alias-declarations</em> that do not define classes or enumerations,</li>\n<li><em>using-declarations</em>,</li>\n<li>and <em>using-directives</em>;</li>\n</ul>\n</blockquote>\n<p>(There are lots of other restrictions as well; I limited the quote to the one relevant to the question.)</p>\n<p><code>return</code> statements are not allowed in <code>constexpr</code> constructors in C++11, while <code>static_assert</code>s are. </p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "25941957", "Score": "5", "CreationDate": "2014-09-19T20:31:11.867", "LastActivityDate": "2014-09-19T20:31:11.867"}, "25941894": {"CommentCount": "0", "AcceptedAnswerId": "25941957", "CreationDate": "2014-09-19T20:26:15.767", "LastActivityDate": "2014-09-19T20:47:42.683", "PostTypeId": "1", "ViewCount": "1721", "FavoriteCount": "1", "Title": "Is the return statement allowed on constexpr constructors?", "Id": "25941894", "Score": "6", "Body": "<p>As explained in <a href=\"http://en.cppreference.com/w/cpp/language/constexpr\" rel=\"noreferrer\">this page</a>, the compound statement of the body of a <code>constexpr</code> constructor, if it is not deleted nor defaulted, must satisfy the constraints for the body of a <code>constexpr</code> function, that is, it may contain any statements except:</p>\n<ul>\n<li>an <code>asm</code> declaration</li>\n<li>a <code>goto</code> statement</li>\n<li>a <code>try</code>-block</li>\n<li>a definition of a variable of non-literal type or of static or thread storage duration or for which no initialization is performed</li>\n</ul>\n<p>It seems that the standard does not restrict the number of <code>return</code> statements that may appear, whereas, in C++11, only one was allowed.</p>\n<p>Now, consider the following code:</p>\n<pre><code>class Thing\n{\n    public:\n        // Shouldn't this constructor be fine under both C++11 and C++14?\n        constexpr Thing ( )\n        {\n            return;\n        }\n};\n\nint main ( )\n{\n    Thing a_nice_thing;\n}\n</code></pre>\n<p>Clang (3.5 with <em>-std=c++14</em>) compiles it fine, but GCC (4.9.1 with <em>-std=c++14</em>) does not, complaining:</p>\n<blockquote>\n<p id=\"so_25941894_25941894_0\">constexpr constructor does not have empty body</p>\n</blockquote>\n<p>However, if it is changed:</p>\n<pre><code>class Thing\n{\n    public:\n        // This constructor is fine under both C++11 and C++14\n        constexpr Thing ( )\n        {\n            static_assert( __cplusplus &gt; 1 , \"static_assert isn't the right mechanism to test this, since it wasn't available at earlier versions of the language\" );\n        }\n};\n\nint main ( )\n{\n    Thing a_nice_thing;\n}\n</code></pre>\n<p>Then it compiles fine under both compilers.</p>\n<p>Since GCC complains about the constructor's body not being empty, shouldn't it also complain in the later case? Is this behavior a bug in GCC? Is the return statement allowed on constexpr constructors?</p>\n<p><sub>Note: whether a single <code>return</code> statement is really worth is not the scope of this question, although interesting and perhaps worth another one. I put single <code>return</code> statements on constructors whose body is empty, for style reasons.</sub></p>\n", "Tags": "<c++><gcc><constructor><c++14><constexpr>", "OwnerUserId": "2207421", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25941894_25941993_5": {"section_id": 5420, "quality": 1.0, "length": 12}, "so_25941894_25941993_10": {"section_id": 5420, "quality": 1.0, "length": 6}, "so_25941894_25941993_4": {"section_id": 5419, "quality": 1.0, "length": 10}, "so_25941894_25941993_8": {"section_id": 5420, "quality": 1.0, "length": 17}, "so_25941894_25941993_0": {"section_id": 5419, "quality": 1.0, "length": 7}, "so_25941894_25941993_7": {"section_id": 5420, "quality": 1.0, "length": 9}, "so_25941894_25941993_6": {"section_id": 5420, "quality": 0.9, "length": 9}, "so_25941894_25941993_9": {"section_id": 5420, "quality": 1.0, "length": 14}}, "n3337": {"so_25941894_25941993_5": {"section_id": 5215, "quality": 0.5833333333333334, "length": 7}, "so_25941894_25941993_10": {"section_id": 360, "quality": 0.6666666666666666, "length": 4}, "so_25941894_25941993_14": {"section_id": 5214, "quality": 1.0, "length": 6}, "so_25941894_25941993_4": {"section_id": 6895, "quality": 0.6, "length": 6}, "so_25941894_25941993_11": {"section_id": 5215, "quality": 1.0, "length": 4}, "so_25941894_25941993_0": {"section_id": 5214, "quality": 0.7142857142857143, "length": 5}, "so_25941894_25941957_0": {"section_id": 5215, "quality": 1.0, "length": 4}, "so_25941894_25941993_6": {"section_id": 5215, "quality": 0.8, "length": 8}, "so_25941894_25941993_9": {"section_id": 5215, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_25941894_25941993_5": {"section_id": 6842, "quality": 0.9166666666666666, "length": 11}, "so_25941894_25941993_10": {"section_id": 6842, "quality": 1.0, "length": 6}, "so_25941894_25941993_8": {"section_id": 6842, "quality": 1.0, "length": 17}, "so_25941894_25941993_0": {"section_id": 6841, "quality": 1.0, "length": 7}, "so_25941894_25941993_9": {"section_id": 6842, "quality": 1.0, "length": 14}, "so_25941894_25941993_7": {"section_id": 6842, "quality": 1.0, "length": 9}, "so_25941894_25941993_4": {"section_id": 6841, "quality": 1.0, "length": 10}, "so_25941894_25941993_6": {"section_id": 6842, "quality": 0.9, "length": 9}}}});