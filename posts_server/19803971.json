post_cb({"19803971": {"CommentCount": "0", "AcceptedAnswerId": "19804020", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-11-06T04:12:42.033", "LastActivityDate": "2013-11-06T06:15:49.280", "LastEditDate": "2017-05-23T11:57:31.730", "ViewCount": "87", "FavoriteCount": "1", "Title": "What's the reason for protected member accessibility additional check in C++?", "Id": "19803971", "Score": "3", "Body": "<p>I just run to this issue, and know from the C++ standard define it as following (emphasize mine) </p>\n<blockquote>\n<p id=\"so_19803971_19803971_0\">An additional access check beyond those described earlier in Clause 11\n  is applied when a non-static data member or non-static member function\n  is a protected member of its naming class (11.2)115 As described\n  earlier, access to a protected member is granted because the reference\n  occurs in a friend or member of some class C. If the access is to form\n  a pointer to member (5.3.1), the nested-name-specifier shall denote C\n  or a class derived from C. All other accesses involve a (possibly\n  implicit) object expression (5.2.5). <strong>In this case, the class of the\n  object expression shall be C or a class derived from C.</strong></p>\n</blockquote>\n<p>Code snippet:</p>\n<pre><code>class Base\n{\nprotected: \n    int i;\n};\n\nclass Derived : public Base\n{\npublic:\n    // I cannot define it as void memfunc(Derived* obj) because of signature requirement.\n    void memfunc(Base* obj) \n    {\n       obj-&gt;i = 0;  // ERROR, cannot access private member via Base*\n       Derived* dobj = (Derived*)(obj);\n       dobj-&gt;i = 0; // OK\n    }\n};\n</code></pre>\n<p>So what's the reason for this check? Why C++ standard bother to limit access protected member via base class pointer?</p>\n<p>Not Duplicate to: <a href=\"https://stackoverflow.com/questions/3247671/accessing-protected-members-in-a-derived-class\">Accessing protected members in a derived class</a>, I want to ask for the reason to prohibit it in standard.</p>\n", "Tags": "<c++>", "OwnerUserId": "2428052", "AnswerCount": "1"}, "19804020": {"ParentId": "19803971", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Just because you derive from a <code>Base</code> doesn't mean you should be allowed to access protected member of any other class deriving from <code>Base</code>. Imagine a class <code>Derived2</code> provided by a library which inherits from <code>Base</code>. This way you'll be able to get a base object of <code>Derived2</code> and do whatever you want with it in the code of <code>Derived</code>. </p>\n<p>So basically the standard ensures that you only modify protected members that you inherited and not mess with the integrity of unrelated siblings classes.</p>\n", "OwnerUserId": "359779", "LastEditorUserId": "359779", "LastEditDate": "2013-11-06T06:15:49.280", "Id": "19804020", "Score": "5", "CreationDate": "2013-11-06T04:17:32.850", "LastActivityDate": "2013-11-06T06:15:49.280"}, "bq_ids": {"n4140": {"so_19803971_19803971_0": {"section_id": 6695, "quality": 0.9491525423728814, "length": 56}}, "n3337": {"so_19803971_19803971_0": {"section_id": 6450, "quality": 0.9491525423728814, "length": 56}}, "n4659": {"so_19803971_19803971_0": {"section_id": 8170, "quality": 0.9491525423728814, "length": 56}}}});