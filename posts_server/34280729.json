post_cb({"34280729": {"CommentCount": "2", "ViewCount": "1256", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-12-15T03:38:58.563", "LastActivityDate": "2017-10-20T05:41:31.957", "Title": "Throw in constexpr function", "AcceptedAnswerId": "34280783", "LastEditDate": "2015-12-16T18:50:47.970", "Id": "34280729", "Score": "13", "Body": "<p>The following piece of code compiles under clang++ 3.7.0 but is denied by g++ 5.3.1.  Both have <code>-std=c++14</code> option.  Which compiler is correct?  Anyone knows where in the standard talks about this?  Thanks.</p>\n<pre><code>#include &lt;stdexcept&gt;\nusing namespace std;\n\nconstexpr int f(int n) {\n  if (n &lt;= 0) throw runtime_error(\"\");\n  return 1;\n}\n\nint main() {\n  char k[f(1)];\n}\n</code></pre>\n<p>Output</p>\n<pre><code>[hidden] g++ -std=c++14 c.cpp \nc.cpp: In function \u2018constexpr int f(int)\u2019:\nc.cpp:7:1: error: expression \u2018&lt;throw-expression&gt;\u2019 is not a constant-expression\n }\n ^\n[hidden] clang++ -std=c++14 c.cpp \n[hidden] \n[hidden] g++ -v\nUsing built-in specs.\nCOLLECT_GCC=/usr/bin/g++\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/5.3.1/lto-wrapper\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --enable-bootstrap --enable-languages=c,c++,objc,obj-c++,fortran,ada,go,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --disable-libgcj --with-isl --enable-libmpx --enable-gnu-indirect-function --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 5.3.1 20151207 (Red Hat 5.3.1-2) (GCC) \n[hidden] \n[hidden] clang++ -v\nclang version 3.7.0 (http://llvm.org/git/clang.git 2ddd3734f32e39e793550b282d44fd71736f8d21)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nFound candidate GCC installation: /usr/lib/gcc/x86_64-redhat-linux/3.4.6\nFound candidate GCC installation: /usr/lib/gcc/x86_64-redhat-linux/5.3.1\nSelected GCC installation: /usr/lib/gcc/x86_64-redhat-linux/5.3.1\nCandidate multilib: .;@m64\nCandidate multilib: 32;@m32\nSelected multilib: .;@m64\n</code></pre>\n", "Tags": "<c++><gcc><c++14><constexpr>", "OwnerUserId": "875044", "AnswerCount": "2"}, "35349979": {"ParentId": "34280729", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As shown by <a href=\"https://stackoverflow.com/a/34280783/2805305\">Shafik Yaghmour</a> it's a gcc bug, which will hopefully be fixed in v6.</p>\n<p>Until then, you can revert to the <code>c++11</code> constexpr style:</p>\n<pre><code>constexpr auto foo(int n) -&gt; int\n{\n  return n &lt;= 0 ? throw runtime_error(\"\") : 1;\n}\n</code></pre>\n<p>However there is a <strong>better workaround</strong>, still retaining all of the <code>c++14</code> constexpr extensions:</p>\n<pre><code>// or maybe name it\n// throw_if_zero_or_less\nconstexpr auto foo_check_throw(int n) -&gt; void\n{  \n  n &lt;= 0 ? throw std::runtime_error(\"\") : 0;\n}\n\nconstexpr auto foo(int n) -&gt; int\n{\n  foo_check_throw(n);\n\n  // C++14 extensions for constexpr work:\n  if (n % 2)\n    return 1;\n  return 2;\n}\n</code></pre>\n", "OwnerUserId": "2805305", "LastEditorUserId": "309308", "LastEditDate": "2017-10-20T05:41:31.957", "Id": "35349979", "Score": "2", "CreationDate": "2016-02-11T21:04:20.337", "LastActivityDate": "2017-10-20T05:41:31.957"}, "34280783": {"ParentId": "34280729", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>clang is correct, note the <a href=\"http://melpon.org/wandbox/permlink/1dQPRSMtl8TQHdi0\" rel=\"nofollow\">HEAD  revision of gcc accepts</a> also accepts this code. This is a well-formed constexpr function, as long as there is value for the argument(s) that allows the function to be evaluated as a core constant expression. In your case <code>1</code> is such a value.</p>\n<p>This is covered in the draft C++14 standard section <code>7.1.5</code> The constexpr specifier [dcl.constexpr] which tells us what is allowed in a constexpr function:</p>\n<blockquote>\n<p id=\"so_34280729_34280783_0\">The definition of a constexpr function shall satisfy the following constraints:</p>\n<ul>\n<li><p id=\"so_34280729_34280783_1\">it shall not be virtual (10.3);</p></li>\n<li><p id=\"so_34280729_34280783_2\">its return type shall be a literal type;</p></li>\n<li><p id=\"so_34280729_34280783_3\">each of its parameter types shall be a literal type;</p></li>\n<li><p id=\"so_34280729_34280783_4\">its function-body shall be = delete, = default, or a compound-statement that does not contain</p>\n<ul>\n<li><p id=\"so_34280729_34280783_5\">an asm-definition,</p></li>\n<li><p id=\"so_34280729_34280783_6\">a goto statement,</p></li>\n<li><p id=\"so_34280729_34280783_7\">a try-block, or</p></li>\n<li><p id=\"so_34280729_34280783_8\">a definition of a variable of non-literal type or of static or thread storage duration or for which\n  no initialization is performed.</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>no restriction on <code>throw</code> and it also says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_34280729_34280783_9\">For a non-template, non-defaulted constexpr function or a non-template, non-defaulted, non-inheriting\n  constexpr constructor, <strong>if no argument values exist such that an invocation of the function or constructor\n  could be an evaluated subexpression of a core constant expression (5.19), the program is ill-formed</strong>; no\n  diagnostic required. </p>\n</blockquote>\n<p>and below this paragraph we have the following example, similar to yours:</p>\n<pre><code>constexpr int f(bool b)\n  { return b ? throw 0 : 0; } // OK\nconstexpr int f() { return f(true); } // ill-formed, no diagnostic required\n</code></pre>\n<p><code>throw</code> is <strong>not allowed</strong> in a core constant expression, which is covered in section <code>5.19</code> <em>[expr.const]</em> paragraph <code>2</code> which says:</p>\n<blockquote>\n<p id=\"so_34280729_34280783_10\">A conditional-expression e is a core constant expression unless the evaluation of e, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions</p>\n</blockquote>\n<p>and includes the following bullet:</p>\n<blockquote id=\"so_34280729_34280783_11\">\n<ul>\n<li>a throw-expression (15.1).</li>\n</ul>\n</blockquote>\n<p>and so <code>f</code> would not be usable in a core constant expression when <code>n &lt;= 0</code>.</p>\n<p><b>Update</b></p>\n<p>As  TemplateRex points out, there are two gcc bugs reports for this:</p>\n<ul>\n<li><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67371\" rel=\"nofollow\">Never executed \"throw\" in constexpr function fails to compile</a></li>\n<li><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66026\" rel=\"nofollow\">C++14] throw-expression is not a valid constant-expression</a></li>\n</ul>\n<p>TemplateRex also notes the fixes are not applied to to <code>5.3.0</code> and are only in trunk. No, work arounds are provided.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-12-18T17:57:05.373", "Id": "34280783", "Score": "13", "CreationDate": "2015-12-15T03:44:43.660", "LastActivityDate": "2015-12-18T17:57:05.373"}, "bq_ids": {"n4140": {"so_34280729_34280783_4": {"section_id": 5419, "quality": 1.0, "length": 7}, "so_34280729_34280783_3": {"section_id": 5419, "quality": 1.0, "length": 6}, "so_34280729_34280783_0": {"section_id": 5419, "quality": 0.8571428571428571, "length": 6}, "so_34280729_34280783_9": {"section_id": 5421, "quality": 0.9259259259259259, "length": 25}, "so_34280729_34280783_8": {"section_id": 5419, "quality": 1.0, "length": 10}, "so_34280729_34280783_2": {"section_id": 5419, "quality": 1.0, "length": 5}, "so_34280729_34280783_10": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_34280729_34280783_4": {"section_id": 5214, "quality": 0.7142857142857143, "length": 5}, "so_34280729_34280783_3": {"section_id": 5214, "quality": 1.0, "length": 6}, "so_34280729_34280783_9": {"section_id": 5216, "quality": 0.5925925925925926, "length": 16}, "so_34280729_34280783_8": {"section_id": 6895, "quality": 0.6, "length": 6}, "so_34280729_34280783_2": {"section_id": 5214, "quality": 1.0, "length": 5}, "so_34280729_34280783_0": {"section_id": 5214, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_34280729_34280783_4": {"section_id": 6841, "quality": 1.0, "length": 7}, "so_34280729_34280783_3": {"section_id": 6841, "quality": 1.0, "length": 6}, "so_34280729_34280783_9": {"section_id": 6843, "quality": 0.7407407407407407, "length": 20}, "so_34280729_34280783_2": {"section_id": 6841, "quality": 1.0, "length": 5}, "so_34280729_34280783_0": {"section_id": 6841, "quality": 0.7142857142857143, "length": 5}, "so_34280729_34280783_10": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}, "so_34280729_34280783_8": {"section_id": 6841, "quality": 1.0, "length": 10}}}});