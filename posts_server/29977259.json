post_cb({"29977259": {"CommentCount": "3", "ViewCount": "87", "CreationDate": "2015-04-30T20:31:13.907", "LastActivityDate": "2015-04-30T21:14:12.870", "Title": "c++ reference to non existing map value: segmentation fault", "PostTypeId": "1", "Id": "29977259", "Score": "-2", "Body": "<p>Suppose I have</p>\n<pre><code>std::map&lt;int, std::vector&lt;double&gt;&gt; a;\n</code></pre>\n<p>is this legal?</p>\n<pre><code>std::vector&lt;double&gt;&amp; b = a[n];\n</code></pre>\n<p>where <code>n</code> is a non-existing key.\nI would say yes, in some simplified version works but in the actual program I get a segmentation fault.</p>\n", "Tags": "<c++><reference><stdmap>", "OwnerUserId": "2269611", "AnswerCount": "2"}, "29977327": {"ParentId": "29977259", "CommentCount": "2", "Body": "<p>Yes, it is legal.</p>\n<p>When you use the <code>operator[]</code> function on a map, an item is inserted if it is not there.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/map/operator_at</a></p>\n<blockquote>\n<p id=\"so_29977259_29977327_0\">Returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist.</p>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "29977327", "Score": "2", "CreationDate": "2015-04-30T20:35:44.163", "LastActivityDate": "2015-04-30T20:35:44.163"}, "bq_ids": {"n4140": {"so_29977259_29977450_0": {"section_id": 1007, "quality": 0.5333333333333333, "length": 8}, "so_29977259_29977327_0": {"section_id": 763, "quality": 0.5714285714285714, "length": 8}}, "n3337": {"so_29977259_29977450_0": {"section_id": 992, "quality": 0.5333333333333333, "length": 8}, "so_29977259_29977327_0": {"section_id": 750, "quality": 0.5714285714285714, "length": 8}}, "n4659": {"so_29977259_29977327_0": {"section_id": 823, "quality": 0.5714285714285714, "length": 8}}}, "29977450": {"ParentId": "29977259", "LastEditDate": "2015-04-30T21:14:12.870", "CommentCount": "0", "CreationDate": "2015-04-30T20:44:10.303", "OwnerUserId": "3202093", "LastEditorUserId": "1938163", "PostTypeId": "2", "Id": "29977450", "Score": "1", "Body": "<p><code>map::operator[]</code> will perform a lookup of the key, and return the associated value if found.</p>\n<p>If not found, the key will be inserted with a default-initialized value.</p>\n<p>So what you wrote should be perfectly legal.</p>\n<p>see 23.4.4.3 :</p>\n<blockquote>\n<p id=\"so_29977259_29977450_0\"><strong>map element access</strong> [map.access]<br>\n<code>T&amp; operator[](const key_type&amp; x);</code> <br>\n  1) Effects: If there is no key equivalent to x in the map, inserts value_type(x, T()) into the map</br></br></p>\n</blockquote>\n", "LastActivityDate": "2015-04-30T21:14:12.870"}});