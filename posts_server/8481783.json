post_cb({"8482142": {"ParentId": "8481783", "CommentCount": "1", "Body": "<p>Since a crash is a symptom of invoking undefined behaviour, and since invoking undefined behaviour can lead to anything, including a crash, I don't think you want to really crash your program, but just have it drop into a debugger. The most portable way to do so is probably <code>abort()</code>. </p>\n<p>While <code>raise(SIGABRT)</code> has the same effect, it is certainly more to write. Both ways however can be intercepted by installing a signal handler for <code>SIGABRT</code>. So depending on your situation, you might want/need to raise another signal. <code>SIGFPE</code>, <code>SIGILL</code>, <code>SIGINT</code>, <code>SIGTERM</code> or <code>SIGSEGV</code> might be the way to go, but they all can be intercepted.</p>\n<p>When you can be unportable, your choices might be even broader, like using <code>SIGBUS</code> on linux.</p>\n", "OwnerUserId": "833362", "PostTypeId": "2", "Id": "8482142", "Score": "11", "CreationDate": "2011-12-12T22:57:18.377", "LastActivityDate": "2011-12-12T22:57:18.377"}, "35275280": {"ParentId": "8481783", "LastEditDate": "2016-02-09T22:07:46.150", "CommentCount": "0", "CreationDate": "2016-02-08T17:08:17.083", "OwnerUserId": "5764457", "LastEditorUserId": "4108376", "PostTypeId": "2", "Id": "35275280", "Score": "-2", "Body": "<pre><code>char*freeThis;\nfree(freeThis);\n</code></pre>\n<p>Freeing an uninitialized pointer is undefined behavior. On many platforms/compilers, <code>freeThis</code> will have a random value (whatever was at that memory location before). Freeing it will ask the system to free the memory at that address, which will usually cause a segmentation fault and make the program crash.</p>\n", "LastActivityDate": "2016-02-09T22:07:46.150"}, "8484476": {"ParentId": "8481783", "LastEditDate": "2011-12-13T05:30:14.637", "CommentCount": "20", "CreationDate": "2011-12-13T04:49:51.463", "OwnerUserId": "836352", "LastEditorUserId": "836352", "PostTypeId": "2", "Id": "8484476", "Score": "4", "Body": "<pre><code>int i = 1 / 0;\n</code></pre>\n<p>Your compiler will probably warn you about this, but it compiles just fine under GCC 4.4.3\nThis will <em>probably</em> cause a SIGFPE (floating-point exception), which perhaps is not as likely in a real application as SIGSEGV (memory segmentation violation) as the other answers cause, but it's still a crash. In my opinion, this is much more readable.</p>\n<p>Another way, if we're going to cheat and use <code>signal.h</code>, is:</p>\n<pre><code>#include &lt;signal.h&gt;\nint main() {\n    raise(SIGKILL);\n}\n</code></pre>\n<p>This is guaranteed to kill the subprocess, to contrast with SIGSEGV.</p>\n", "LastActivityDate": "2011-12-13T05:30:14.637"}, "8492353": {"ParentId": "8481783", "LastEditDate": "2011-12-17T09:19:55.680", "CommentCount": "0", "CreationDate": "2011-12-13T16:11:42.707", "OwnerUserId": "1043773", "LastEditorUserId": "485076", "PostTypeId": "2", "Id": "8492353", "Score": "4", "Body": "<p>This is a more guaranteed version of abort presented in above answers.It takes care of the situation when sigabrt is blocked.You can infact use any signal instead of abort that has the default action of crashing the program.  </p>\n<pre class=\"lang-c prettyprint-override\"><code>#include&lt;stdio.h&gt;\n#include&lt;signal.h&gt;\n#include&lt;unistd.h&gt; \n#include&lt;stdlib.h&gt;\nint main()\n{\n    sigset_t act;\n    sigemptyset(&amp;act);\n    sigfillset(&amp;act);\n    sigprocmask(SIG_UNBLOCK,&amp;act,NULL);\n    abort();\n}\n</code></pre>\n", "LastActivityDate": "2011-12-17T09:19:55.680"}, "41476489": {"ParentId": "8481783", "LastEditDate": "2017-09-12T01:05:25.290", "CommentCount": "0", "CreationDate": "2017-01-05T02:34:54.633", "OwnerUserId": "3052438", "LastEditorUserId": "3052438", "PostTypeId": "2", "Id": "41476489", "Score": "1", "Body": "<p>Writing to a read-only memory will cause segmentation fault unless your system don't support read-only memory blocks.</p>\n<pre><code>int main() {\n    (int&amp;)main = 0;\n}\n</code></pre>\n<p>I have tested it with MingGW 5.3.0 on Windows 7 and GCC on Linux Mint. I suppose that other compilers and systems will give a similar effect.</p>\n", "LastActivityDate": "2017-09-12T01:05:25.290"}, "8503208": {"ParentId": "8481783", "CommentCount": "7", "Body": "<p>very short, it crashes!</p>\n<pre><code>int\nmain() {\n  main();\n}\n</code></pre>\n", "OwnerUserId": "683727", "PostTypeId": "2", "Id": "8503208", "Score": "0", "CreationDate": "2011-12-14T10:49:31.703", "LastActivityDate": "2011-12-14T10:49:31.703"}, "8540608": {"ParentId": "8481783", "CommentCount": "0", "Body": "<pre><code> throw 42;\n</code></pre>\n<p>Just the answer... :)</p>\n", "OwnerUserId": "72312", "PostTypeId": "2", "Id": "8540608", "Score": "32", "CreationDate": "2011-12-16T21:53:11.687", "LastActivityDate": "2011-12-16T21:53:11.687"}, "25885203": {"ParentId": "8481783", "CommentCount": "3", "Body": "<pre><code>int main()\n{\n    int *p=3;\n    int s;\n    while(1) {\n        s=*p;\n        p++;\n    }\n}\n</code></pre>\n", "OwnerUserId": "4049407", "PostTypeId": "2", "Id": "25885203", "Score": "0", "CreationDate": "2014-09-17T07:57:38.473", "LastActivityDate": "2014-09-17T07:57:38.473"}, "9321937": {"ParentId": "8481783", "CommentCount": "2", "Body": "<p>This one is missing:</p>\n<pre><code>int main = 42;\n</code></pre>\n", "OwnerUserId": "371793", "PostTypeId": "2", "Id": "9321937", "Score": "3", "CreationDate": "2012-02-17T02:04:15.520", "LastActivityDate": "2012-02-17T02:04:15.520"}, "8481838": {"ParentId": "8481783", "CommentCount": "6", "Body": "<p>Try:</p>\n<pre><code>raise(SIGSEGV);  // simulates a standard crash when access invalid memory\n                 // ie anything that can go wrong with pointers.\n</code></pre>\n<p>Found in: </p>\n<pre><code>#include &lt;signal.h&gt;\n</code></pre>\n", "OwnerUserId": "14065", "PostTypeId": "2", "Id": "8481838", "Score": "96", "CreationDate": "2011-12-12T22:30:34.420", "LastActivityDate": "2011-12-12T22:30:34.420"}, "12877290": {"ParentId": "8481783", "CommentCount": "0", "Body": "<pre><code>int main(int argc, char *argv[])\n{\n    char *buf=NULL;buf[0]=0;\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "1680957", "PostTypeId": "2", "Id": "12877290", "Score": "2", "CreationDate": "2012-10-13T21:46:23.723", "LastActivityDate": "2012-10-13T21:46:23.723"}, "8494112": {"ParentId": "8481783", "CommentCount": "6", "Body": "<p>One that has not been mentioned yet:</p>\n<pre><code>((void(*)())0)();\n</code></pre>\n<p>This will treat the null pointer as a function pointer and then call it.  Just like most methods, this is not guaranteed to crash the program, but the chances of the OS allowing this to go unchecked and of the program ever returning are negligible.</p>\n", "OwnerUserId": "559931", "PostTypeId": "2", "Id": "8494112", "Score": "0", "CreationDate": "2011-12-13T18:16:29.593", "LastActivityDate": "2011-12-13T18:16:29.593"}, "12614867": {"ParentId": "8481783", "CommentCount": "0", "Body": "<p>This crashes on my Linux system, because string literals are stored in read only memory:</p>\n<pre><code>0[\"\"]--;\n</code></pre>\n<p>By the way, g++ refuses to compile this. Compilers are getting smarter and smarter :)</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "12614867", "Score": "4", "CreationDate": "2012-09-27T05:50:46.280", "LastActivityDate": "2012-09-27T05:50:46.280"}, "8481826": {"ParentId": "8481783", "CommentCount": "8", "Body": "<pre><code>*( ( char* ) NULL ) = 0;\n</code></pre>\n<p>This will produce a segmentation fault.</p>\n", "OwnerUserId": "137419", "PostTypeId": "2", "Id": "8481826", "Score": "4", "CreationDate": "2011-12-12T22:29:44.143", "LastActivityDate": "2011-12-12T22:29:44.143"}, "8500265": {"ParentId": "8481783", "LastEditDate": "2015-10-11T15:26:40.320", "CommentCount": "0", "CreationDate": "2011-12-14T06:21:48.330", "OwnerUserId": "190041", "LastEditorUserId": "190041", "PostTypeId": "2", "Id": "8500265", "Score": "6", "Body": "<p>C++ is can be crashed deterministically by having 2 exceptions in parallel! The standard says never throw any exception from a destructor OR never use any function in a destructor which may throw exception.</p>\n<p>we have to make a function so lets leave the destructor etc etc.</p>\n<p>An example from <strong><em>ISO/IEC 14882 \u00a715.1-7</em></strong>. Should be a crash as per C++ standard. <a href=\"http://ideone.com/9UOOFa\" rel=\"nofollow\">Ideone example can be found here</a>.</p>\n<pre><code>class MyClass{\n    public:\n    ~MyClass() throw(int) { throw 0;}\n};\n\nint main() {\n  try {\n    MyClass myobj; // its destructor will cause an exception\n\n    // This is another exception along with exception due to destructor of myobj and will cause app to terminate\n     throw 1;      // It could be some function call which can result in exception.\n  }\n  catch(...)\n  {\n    std::cout&lt;&lt;\"Exception catched\"&lt;&lt;endl;\n  }\n  return 0;\n}\n</code></pre>\n<p><strong><em>ISO/IEC 14882 \u00a715.1/9</em></strong> mentions throw without try block resulting in implicit call to abort:</p>\n<blockquote>\n<p id=\"so_8481783_8500265_0\">If no exception is presently being handled, executing a\n  throw-expression with no operand calls std::terminate()</p>\n</blockquote>\n<p>Others include : \nthrow from destructor: <strong><em>ISO/IEC 14882 \u00a715.2/3</em></strong></p>\n", "LastActivityDate": "2015-10-11T15:26:40.320"}, "8496102": {"ParentId": "8481783", "LastEditDate": "2011-12-13T21:23:05.107", "CommentCount": "5", "CreationDate": "2011-12-13T21:00:02.140", "OwnerUserId": "485076", "LastEditorUserId": "485076", "PostTypeId": "2", "Id": "8496102", "Score": "6", "Body": "<p>What about stack overflow by a dead loop recursive method call?</p>\n<pre><code>#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid main()\n{\n    StackOverflow(0);\n}\n\nvoid StackOverflow(int depth)\n{\n    char blockdata[10000];\n    printf(\"Overflow: %d\\n\", depth);\n    StackOverflow(depth+1);\n}\n</code></pre>\n<p>See <a href=\"http://support.microsoft.com/kb/315937\">Original example on Microsoft KB</a></p>\n", "LastActivityDate": "2011-12-13T21:23:05.107"}, "8481783": {"CommentCount": "5", "CreationDate": "2011-12-12T22:26:23.303", "PostTypeId": "1", "AcceptedAnswerId": "8481794", "LastEditorUserId": "313758", "LastActivityDate": "2017-09-12T01:05:25.290", "LastEditDate": "2011-12-13T03:50:47.630", "ViewCount": "42634", "FavoriteCount": "40", "Title": "What is the easiest way to make a C++ program crash?", "Id": "8481783", "Score": "281", "Body": "<p>I'm trying to make a Python program that interfaces with a different crashy process (that's out of my hands). Unfortunately the program I'm interfacing with doesn't even crash reliably! So I want to make a quick C++ program that crashes on purpose but I don't actually know the best and shortest way to do that, does anyone know what to put between my:</p>\n<pre><code>int main() {\n    crashyCodeGoesHere();\n}\n</code></pre>\n<p>to make my C++ program crash reliably</p>\n", "Tags": "<c++><crash>", "OwnerUserId": "783848", "AnswerCount": "29"}, "35374026": {"ParentId": "8481783", "CommentCount": "0", "Body": "<p>A stylish way of doing this is a pure virtual function call:</p>\n<pre><code>class Base;\n\nvoid func(Base*);\n\nclass Base\n{\npublic:\n   virtual void f() = 0;\n   Base() \n   {\n       func(this);\n   }\n};\n\nclass Derived : Base\n{\n   virtual void f()\n   {\n   }\n};\n\nvoid func(Base* p)\n{\n   p-&gt;f();\n}\n\n\nint main()\n{\n    Derived  d;\n}\n</code></pre>\n<p>Compiled with gcc, this prints:</p>\n<blockquote>\n<p id=\"so_8481783_35374026_0\">pure virtual method called</p>\n<p id=\"so_8481783_35374026_1\">terminate called without an active exception</p>\n<p id=\"so_8481783_35374026_2\">Aborted (core dumped)</p>\n</blockquote>\n", "OwnerUserId": "325117", "PostTypeId": "2", "Id": "35374026", "Score": "0", "CreationDate": "2016-02-12T23:34:44.233", "LastActivityDate": "2016-02-12T23:34:44.233"}, "8486213": {"ParentId": "8481783", "CommentCount": "0", "Body": "<p>The only flash I had is <strong>abort() function</strong>:</p>\n<p>It aborts the process with an abnormal program termination.It generates the <strong>SIGABRT signal</strong>, which by default causes the program to terminate returning an unsuccessful termination error code to the host environment.The program is terminated <strong>without executing destructors</strong> for objects of automatic or static storage duration, and <strong>without calling</strong> any <strong>atexit</strong>( which is called by exit() before the program terminates)function. It never returns to its caller.</p>\n", "OwnerUserId": "902432", "PostTypeId": "2", "Id": "8486213", "Score": "8", "CreationDate": "2011-12-13T08:27:48.897", "LastActivityDate": "2011-12-13T08:27:48.897"}, "8540671": {"ParentId": "8481783", "LastEditDate": "2011-12-17T09:20:40.563", "CommentCount": "1", "CreationDate": "2011-12-16T22:00:02.347", "OwnerUserId": "452107", "LastEditorUserId": "485076", "PostTypeId": "2", "Id": "8540671", "Score": "2", "Body": "<pre><code>int* p=0;\n*p=0;\n</code></pre>\n<p>This should crash too. On Windows it crashes with AccessViolation and it should do the same on all OS-es I guess.</p>\n", "LastActivityDate": "2011-12-17T09:20:40.563"}, "12622832": {"ParentId": "8481783", "CommentCount": "0", "Body": "<pre><code>void main()\n{\n\n  int *aNumber = (int*) malloc(sizeof(int));\n  int j = 10;\n  for(int i = 2; i &lt;= j; ++i)\n  {\n      aNumber = (int*) realloc(aNumber, sizeof(int) * i);\n      j += 10;\n  }\n\n}\n</code></pre>\n<p>Hope this crashes. Cheers.</p>\n", "OwnerUserId": "1466507", "PostTypeId": "2", "Id": "12622832", "Score": "0", "CreationDate": "2012-09-27T13:42:23.060", "LastActivityDate": "2012-09-27T13:42:23.060"}, "bq_ids": {"n4140": {"so_8481783_8500265_0": {"section_id": 3342, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_8481783_8500265_0": {"section_id": 3212, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_8481783_8481804_0": {"section_id": 3309, "quality": 0.6666666666666666, "length": 4}, "so_8481783_8500265_0": {"section_id": 7674, "quality": 0.7777777777777778, "length": 7}}}, "8481804": {"ParentId": "8481783", "LastEditDate": "2011-12-13T10:18:16.740", "CommentCount": "8", "CreationDate": "2011-12-12T22:28:01.143", "OwnerUserId": "650233", "LastEditorUserId": "277176", "PostTypeId": "2", "Id": "8481804", "Score": "14", "Body": "<p><code>assert(false);</code> is pretty good too.</p>\n<p>According to ISO/IEC 9899:1999 it is guaranteed to crash when NDEBUG is not defined:</p>\n<blockquote>\n<p id=\"so_8481783_8481804_0\">If NDEBUG is defined [...] the assert macro is defined simply as</p>\n<pre><code>#define assert(ignore) ((void)0)\n</code></pre>\n<p id=\"so_8481783_8481804_1\">The assert macro is redefined according to the current state of NDEBUG each time that  is included.</p>\n<p id=\"so_8481783_8481804_2\">[...]</p>\n<p id=\"so_8481783_8481804_3\">The assert macro puts diagnostic tests into programs; [...] if expression (which shall have a scalar type) is false [...]. It\n  then calls the abort function.</p>\n</blockquote>\n", "LastActivityDate": "2011-12-13T10:18:16.740"}, "8481794": {"ParentId": "8481783", "CommentCount": "5", "Body": "<p>The <code>abort()</code> function is probably your best bet. It's part of the C standard library, and is defined as \"causing abnormal program termination\" (e.g, a fatal error or crash).</p>\n", "OwnerUserId": "149341", "PostTypeId": "2", "Id": "8481794", "Score": "227", "CreationDate": "2011-12-12T22:27:22.150", "LastActivityDate": "2011-12-12T22:27:22.150"}, "8481821": {"ParentId": "8481783", "LastEditDate": "2011-12-13T03:57:03.587", "CommentCount": "18", "CreationDate": "2011-12-12T22:29:26.007", "OwnerUserId": "10431", "LastEditorUserId": "365102", "PostTypeId": "2", "Id": "8481821", "Score": "62", "Body": "<pre><code>*((unsigned int*)0) = 0xDEAD;\n</code></pre>\n", "LastActivityDate": "2011-12-13T03:57:03.587"}, "12612760": {"ParentId": "8481783", "CommentCount": "1", "Body": "<p>Or another way since we're on the band wagon.</p>\n<p>A lovely piece of infinite recursion. Guaranteed to blow your stack.</p>\n<pre><code>int main(int argv, char* argc)\n{\n   return main(argv, argc)\n}\n</code></pre>\n<p>Prints out:</p>\n<blockquote>\n<p id=\"so_8481783_12612760_0\">Segmentation fault (core dumped)</p>\n</blockquote>\n", "OwnerUserId": "134702", "PostTypeId": "2", "Id": "12612760", "Score": "1", "CreationDate": "2012-09-27T01:20:45.377", "LastActivityDate": "2012-09-27T01:20:45.377"}, "39920519": {"ParentId": "8481783", "CommentCount": "0", "Body": "<p>This is the snippet provided by Google in Breakpad.</p>\n<pre><code>  volatile int* a = reinterpret_cast&lt;volatile int*&gt;(NULL);\n  *a = 1;\n</code></pre>\n", "OwnerUserId": "523135", "PostTypeId": "2", "Id": "39920519", "Score": "0", "CreationDate": "2016-10-07T15:10:23.713", "LastActivityDate": "2016-10-07T15:10:23.713"}, "8487254": {"ParentId": "8481783", "LastEditDate": "2011-12-13T10:06:21.447", "CommentCount": "6", "CreationDate": "2011-12-13T10:00:51.540", "OwnerUserId": "111461", "LastEditorUserId": "111461", "PostTypeId": "2", "Id": "8487254", "Score": "45", "Body": "<p>Well, are we on <em>stack</em><strong>overflow</strong>, or not?</p>\n<pre><code>for (long long int i = 0; ++i; (&amp;i)[i] = i);\n</code></pre>\n<p>(Not guaranteed to crash by any standards, but neither are any of the suggested answers including the accepted one since <code>SIGABRT</code> could have been caught anyway. In practice, this will crash everywhere.)</p>\n", "LastActivityDate": "2011-12-13T10:06:21.447"}, "8493870": {"ParentId": "8481783", "CommentCount": "2", "Body": "<p>The answer is platform specific and depends on your goals. But here's the Mozilla Javascript crash function, which I think illustrates a lot of the challenges to making this work:</p>\n<pre><code>static JS_NEVER_INLINE void\nCrashInJS()\n{\n    /*\n     * We write 123 here so that the machine code for this function is\n     * unique. Otherwise the linker, trying to be smart, might use the\n     * same code for CrashInJS and for some other function. That\n     * messes up the signature in minidumps.\n     */\n\n#if defined(WIN32)\n    /*\n     * We used to call DebugBreak() on Windows, but amazingly, it causes\n     * the MSVS 2010 debugger not to be able to recover a call stack.\n     */\n    *((int *) NULL) = 123;\n    exit(3);\n#elif defined(__APPLE__)\n    /*\n     * On Mac OS X, Breakpad ignores signals. Only real Mach exceptions are\n     * trapped.\n     */\n    *((int *) NULL) = 123;  /* To continue from here in GDB: \"return\" then \"continue\". */\n    raise(SIGABRT);  /* In case above statement gets nixed by the optimizer. */\n#else\n    raise(SIGABRT);  /* To continue from here in GDB: \"signal 0\". */\n#endif\n}\n</code></pre>\n", "OwnerUserId": "104021", "PostTypeId": "2", "Id": "8493870", "Score": "8", "CreationDate": "2011-12-13T17:58:38.900", "LastActivityDate": "2011-12-13T17:58:38.900"}, "8500362": {"ParentId": "8481783", "LastEditDate": "2016-08-14T23:02:28.410", "CommentCount": "12", "CreationDate": "2011-12-14T06:33:12.707", "OwnerUserId": "672689", "LastEditorUserId": "4143855", "PostTypeId": "2", "Id": "8500362", "Score": "68", "Body": "<p>Dividing by zero will crash the application:</p>\n<pre><code>int main()\n{\n    int i = 1 / 0;\n}\n</code></pre>\n", "LastActivityDate": "2016-08-14T23:02:28.410"}, "28651898": {"ParentId": "8481783", "CommentCount": "0", "Body": "<p>Although this question already has an accepted answer...</p>\n<pre><code>void main(){\n    throw 1;\n}\n</code></pre>\n<p>Or... <code>void main(){throw 1;}</code></p>\n", "OwnerUserId": "1459669", "PostTypeId": "2", "Id": "28651898", "Score": "2", "CreationDate": "2015-02-21T22:05:43.297", "LastActivityDate": "2015-02-21T22:05:43.297"}});