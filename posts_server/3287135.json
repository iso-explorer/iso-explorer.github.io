post_cb({"bq_ids": {"n4140": {"so_3287135_3287200_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 5361}}, "n3337": {"so_3287135_3287200_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 5157}}, "n4659": {"so_3287135_3287200_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 6789}}}, "3287135": {"ViewCount": "1944", "Body": "<p>Below code crash in VS 2010 when you compile with following flag and if you add /GF- or remove the opimization flag they don't crash. The crash occur at assembly code which translate 'if( path[i] == '/' )'. I like to understand the optimization that compiler does here and lead to crash. Looking forward for some pointers.</p>\n<p>-Karthik</p>\n<p><code>cl.exe /MD /O2 test.c</code></p>\n<p><code>//</code> Test.c</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#include  &lt;string.h&gt;\n\nvoid testpath(char* path, int bufsiz)  \n{  \n\n    int i;  \n\n    printf(\"%p\\n\", path);  \n    for( i=0; i &lt; strlen(path); i++ ) {  \n      if( path[i] == '/' ) {  \n         path[i] = '\\\\';  \n     }  \n  }  \n}\n\nint main()  \n{  \n\n    const char* path = \"testexport.prj\";  \n    char *path1 = \"testexport.prj\";  \n    printf(\"%p\\n\", path);  \n    printf(\"%p\\n\", path1);  \n    testpath(path, 1024);  \n}  \n</code></pre>\n", "Title": "VS2010 C code - String pooling", "CreationDate": "2010-07-20T05:01:01.227", "LastActivityDate": "2016-03-03T14:07:23.160", "CommentCount": "1", "LastEditDate": "2016-03-03T14:07:23.160", "PostTypeId": "1", "LastEditorUserId": "2331592", "Id": "3287135", "Score": "1", "OwnerUserId": "190591", "Tags": "<c++><c><visual-studio><visual-studio-2010><winapi>", "AnswerCount": "2"}, "3287171": {"Id": "3287171", "PostTypeId": "2", "Body": "<p>You try to modify a string literal, that's undefined behavior.</p>\n<pre><code> const char* path = \"testexport.prj\";\n testpath(path, 1024);\n // then later:\n void testpath(char* path, int bufsiz)\n {\n     int i;  \n     for( i=0; i`&lt;`strlen(path); i++ ) {  \n     if( path[i] == '/' ) {  \n         path[i] = '\\\\';// &lt;&lt;&lt;&lt;&lt;&lt; UB here\n     }  \n }  \n</code></pre>\n<p>string literals are usually stored in read-only memory, so on your implementation an attempt to modify a string literal results in access violation that crashes your program.</p>\n", "LastActivityDate": "2010-07-20T05:10:24.690", "Score": "4", "CreationDate": "2010-07-20T05:10:24.690", "ParentId": "3287135", "CommentCount": "3", "OwnerUserId": "57428"}, "3287200": {"Id": "3287200", "PostTypeId": "2", "Body": "<p>Trying to modify the contents of a <code>string literal</code> invokes Undefined Behaviour.</p>\n<p>From ISO C99 (<code>Section 6.4.5/6</code>)</p>\n<blockquote>\n<p id=\"so_3287135_3287200_0\">It  is  unspeci\ufb01ed  whether  these  arrays  are  distinct  provided  their  elements  have  the appropriate  values.  <strong>If  the  program  attempts  to  modify  such  an  array,  the  behavior  is unde\ufb01ned</strong></p>\n</blockquote>\n<p>From ISO C++-98 (<code>Section 2.13.4/2</code>)</p>\n<blockquote>\n<p id=\"so_3287135_3287200_1\">Whether all string literals are distinct(that is, are stored in non overlapping objects) is implementation defined. <strong>The effect of attempting to modify a string literal is undefined.</strong></p>\n</blockquote>\n<p>On most implementations (including MSVC) this results to crash of your application.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-07-20T08:07:03.860", "Score": "6", "CreationDate": "2010-07-20T05:15:56.963", "ParentId": "3287135", "CommentCount": "3", "LastEditDate": "2010-07-20T08:07:03.860", "OwnerUserId": "165520"}});