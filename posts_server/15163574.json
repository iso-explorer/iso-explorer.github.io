post_cb({"15163772": {"Id": "15163772", "PostTypeId": "2", "Body": "<p>Sort of, but only because <code>int</code> is a special case. For example, suppose you write in <code>Object.cpp</code>:</p>\n<pre><code>Object o = {};\nint Object::number = 5;\n</code></pre>\n<p>Then the object <code>o</code> has static storage duration, just like <code>Object::number</code> does. It is nominally created before <code>number</code> and will be destroyed afterwards, but since they're both POD this destruction actually has no effect.</p>\n<p>If <code>number</code> and <code>o</code> had non-trivial destructors, though, then <code>number</code> would be destroyed before <code>o</code>. The fact that <code>number</code> is a static member of the class of <code>o</code> doesn't give it any special treatment as far as order of destruction is concerned.</p>\n<p>If <code>o</code> is off in another source file, then order of construction is unspecified, and order of destruction is reverse order of construction (again, that's if they had non-trivial destructors -- <code>int</code> is a special case since it doesn't).</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2013-03-01T17:54:00.527", "Score": "4", "CreationDate": "2013-03-01T17:44:52.660", "ParentId": "15163574", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2013-03-01T17:54:00.527"}, "15163909": {"Id": "15163909", "PostTypeId": "2", "Body": "<p>Yes, for two reasons:</p>\n<ul>\n<li>It has static storage duration, so its storage lasts for the lifetime of the program</li>\n<li>It has a type with no constructor, initialised with a constant expression.</li>\n</ul>\n<p>Together, this means that it is initialised during the <em>static initialisation</em> phase, before any user-defined code (including constructors of static objects) is run. Therefore, it is guaranteed to exist, and be initialised, before any code can access it.</p>\n<p>If it had a constructor, or a non-constant initialiser, then it would be initialised during <em>dynamic initialisation</em> along with all other such objects. In that case, it would be possible for another static object's constructor or initialiser to access the object before it is initialised. That problem is sometimes referred to as the \"static initialisation order fiasco\".</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2013-03-01T18:09:19.317", "Score": "3", "CreationDate": "2013-03-01T17:53:33.943", "ParentId": "15163574", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2013-03-01T18:09:19.317"}, "15163634": {"Id": "15163634", "PostTypeId": "2", "Body": "<p>Yes, it has 'static storage duration', which means that it exists \"all the time\" [if it's got a non-standard constructor, the constructor is called before \"main\" starts - which should be enough for most intents and purposes]</p>\n", "LastActivityDate": "2013-03-01T17:38:04.443", "CommentCount": "2", "CreationDate": "2013-03-01T17:38:04.443", "ParentId": "15163574", "Score": "5", "OwnerUserId": "1919155"}, "15163893": {"Id": "15163893", "PostTypeId": "2", "Body": "<p>Consider this g++ program:</p>\n<pre><code>#include &lt;iostream&gt;\n#define X() (std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; \"\\n\")\n\nstruct M {\n M() { X(); }\n ~M() { X(); }\n};  \n\nstruct C {\n C() { X(); }\n ~C() { X(); }\n static M m;\n};\nC c;\nM C::m;\nint main () { X(); }\n</code></pre>\n<p>In this program, <code>c</code> must be initialized before <code>C::m</code>, and must be destoryed after <code>C::m</code>. If you compile this program and consider its output, you'll see something like:</p>\n<pre><code>C::C()\nM::M()\nint main()\nM::~M()\nC::~C()\n</code></pre>\n<p>So, no, in general, \"the [lifetime] of [a member]\" <strong>is not</strong> \"guaranteed to outlast the [lifetime] of any instance of Object that is created?\"</p>\n", "LastActivityDate": "2013-03-01T17:52:51.260", "CommentCount": "2", "CreationDate": "2013-03-01T17:52:51.260", "ParentId": "15163574", "Score": "2", "OwnerUserId": "8747"}, "15163758": {"Id": "15163758", "PostTypeId": "2", "Body": "<p>It's guaranteed by the standard that objects with <em>static storage duration</em> exist during the entire duration of the program.</p>\n<p>C++03, <strong>3.7.1 Static storage duration \u00a71</strong>:</p>\n<blockquote>\n<p id=\"so_15163574_15163758_0\">All objects which neither have dynamic storage duration nor are local have static storage duration. The storage for these objects shall last for the duration of the program</p>\n</blockquote>\n<p>and in your example <strong>\u00a74</strong> is also relevant:</p>\n<blockquote>\n<p id=\"so_15163574_15163758_1\">The keyword <code>static</code> applied to a class data member in a class definition gives the data member static storage duration.</p>\n</blockquote>\n", "LastEditorUserId": "1168156", "LastActivityDate": "2013-03-01T17:51:57.747", "Score": "1", "CreationDate": "2013-03-01T17:44:18.073", "ParentId": "15163574", "CommentCount": "1", "OwnerUserId": "1168156", "LastEditDate": "2013-03-01T17:51:57.747"}, "bq_ids": {"n4140": {"so_15163574_15163758_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 7167}, "so_15163574_15163758_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 7164}}, "n3337": {"so_15163574_15163758_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6911}, "so_15163574_15163758_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 6908}}, "n4659": {"so_15163574_15163758_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 8675}, "so_15163574_15163758_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 8672}}}, "15163574": {"ViewCount": "124", "Body": "<p>If I have a class:</p>\n<p><strong>Object.h</strong></p>\n<pre><code>class Object\n{\npublic:\n    static int number;\n};\n</code></pre>\n<p><strong>Object.cpp</strong> </p>\n<pre><code>int Object::number = 5;\n</code></pre>\n<p>Is the scope of <code>Object::number</code> guaranteed to outlast the scope of any instance of <code>Object</code> that is created? even if it's declared globally in another source file?</p>\n", "AcceptedAnswerId": "15163893", "Title": "Scope of the static class data member", "CreationDate": "2013-03-01T17:35:10.410", "Id": "15163574", "CommentCount": "5", "LastEditDate": "2013-03-01T17:51:30.587", "PostTypeId": "1", "LastEditorUserId": "1168156", "LastActivityDate": "2013-03-01T18:09:19.317", "Score": "1", "OwnerUserId": "402041", "Tags": "<c++><class><static><global-variables>", "AnswerCount": "5"}});