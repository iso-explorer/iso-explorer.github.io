post_cb({"37866837": {"ParentId": "37866375", "CommentCount": "10", "CreationDate": "2016-06-16T18:31:17.477", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "37866837", "Score": "2", "Body": "<p>As stated by Barry, your code is not legal C++. However, even if you took away the <code>constexpr</code> part, it would <em>still</em> not be legal C++. Your code violates strict aliasing rules and therefore represents undefined behavior.</p>\n<p>Indeed, there is no way in C++ to detect the endian-ness of an object without invoking undefined behavior. Casting it to a <code>char*</code> doesn't work, because the standard doesn't require big or little endian order. So while you could read the data through a byte, you would not be able to legally infer anything from that value.</p>\n<p>And type punning through a <code>union</code> fails because you're not allowed to type pun through a <code>union</code> in C++ at all. And even if you did... again, C++ does not restrict implementations to big or little endian order.</p>\n<p>So as far as C++ as a standard is concerned, there is no way to detect this, whether at compile-time or runtime.</p>\n", "LastActivityDate": "2016-06-16T18:31:17.477"}, "37866503": {"ParentId": "37866375", "LastEditDate": "2016-06-16T18:22:00.240", "CommentCount": "5", "CreationDate": "2016-06-16T18:12:59.863", "Score": "9", "LastEditorUserId": "2069064", "PostTypeId": "2", "Id": "37866503", "OwnerUserId": "2069064", "Body": "<p>None. In fact, the program is ill-formed. From [expr.const]:</p>\n<blockquote>\n<p id=\"so_37866375_37866503_0\">A conditional-expression e is a core constant expression unless the evaluation of e, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions:<br>\n   \u2014 [...]<br>\n   \u2014 a <code>reinterpret_cast</code>.<br>\n   \u2014 [...]  </br></br></br></p>\n</blockquote>\n<p>And, from [dcl.constexpr]:</p>\n<blockquote>\n<p id=\"so_37866375_37866503_1\">For a <code>constexpr</code> function or <code>constexpr</code> constructor that is neither defaulted nor a template, if no argument\n  values exist such that an invocation of the function or constructor could be an evaluated subexpression of\n  a core constant expression (5.20), or, for a constructor, a constant initializer for some object (3.6.2), the\n  program is ill-formed; no diagnostic required.</p>\n</blockquote>\n<hr/>\n<p>The way to do this is just to hope that your compiler is nice enough to provide macros for the endianness of your machine. For instance, on gcc, I could use <a href=\"https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html\" rel=\"noreferrer\"><code>__BYTE_ORDER__</code></a>:</p>\n<pre><code>constexpr bool IsBigEndian() {\n#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n    return false;\n#else\n    return true;\n#endif\n}\n</code></pre>\n", "LastActivityDate": "2016-06-16T18:22:00.240"}, "37866375": {"CommentCount": "5", "ViewCount": "319", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2016-06-16T18:04:47.300", "LastActivityDate": "2016-06-18T05:55:05.293", "LastEditDate": "2016-06-18T05:55:05.293", "AcceptedAnswerId": "37866503", "FavoriteCount": "2", "Title": "Endianness in constexpr", "Id": "37866375", "Score": "12", "Body": "<p>I want to create a constexpr function that returns the endianness of the system, like so:</p>\n<pre><code>constexpr bool IsBigEndian()\n{\n    constexpr int32_t one = 1;\n    return (reinterpret_cast&lt;const int8_t&amp;&gt;(one) == 0);\n}\n</code></pre>\n<p>Now, since the function will get executed at compile time rather than on the actual target machine, what guarantee does the C++ spec give to make sure that the correct result is returned?</p>\n", "Tags": "<c++><language-lawyer><endianness><constant-expression>", "OwnerUserId": "2534689", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37866375_37866503_1": {"section_id": 5421, "quality": 0.625, "length": 20}, "so_37866375_37866503_0": {"section_id": 6185, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_37866375_37866503_1": {"section_id": 6843, "quality": 0.90625, "length": 29}, "so_37866375_37866503_0": {"section_id": 7687, "quality": 0.8, "length": 12}}}});