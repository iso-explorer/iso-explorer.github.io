post_cb({"bq_ids": {"n4140": {"so_4369219_4369219_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5808}}, "n3337": {"so_4369219_4369219_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5581}}, "n4659": {"so_4369219_4369219_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 7269}}}, "4369219": {"ViewCount": "206", "Body": "<p>Can compiler reorder variable setting and <code>throw()</code> op in C++? Or, does standard C++ 14882-1998 allows or prohibit compiler of this transform?</p>\n<p>For code:</p>\n<pre><code>bool funct()\n{\n    bool succeeded = false;\n    bool res_throw = false;\n\n        try {\n            throw(\"it\");\n            succeeded = true;\n        }\n        catch(...) {\n            res_throw = true;\n        }\n\n        cout &lt;&lt; \"Result of throw: \" &lt;&lt; res_throw &lt;&lt; endl;\n        cout &lt;&lt; \"succeeded: \" &lt;&lt; succeeded &lt;&lt; endl;\n\n    return succeeded;\n}\n</code></pre>\n<p>Can the output be a</p>\n<pre><code>Result of throw: true\nsucceeded: true\n</code></pre>\n<p>The Standard says: \"[intro.execution]#7\": </p>\n<blockquote>\n<p id=\"so_4369219_4369219_0\">modifying an object .. are all side\n  effects, which are changes in the\n  state of the execution environment</p>\n<p id=\"so_4369219_4369219_1\">At certain specified points in the execution sequence called sequence points, all side effects of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place</p>\n</blockquote>\n<p>Is <code>throw</code> statement a sequence point?</p>\n", "AcceptedAnswerId": "4369287", "Title": "Sequence points in C++ and exceptions", "CreationDate": "2010-12-06T17:36:42.763", "Id": "4369219", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-12-06T17:54:48.663", "LastEditorUserId": "196561", "LastActivityDate": "2010-12-06T17:54:48.663", "Score": "3", "OwnerUserId": "196561", "Tags": "<c++><standards-compliance><sequence-points>", "AnswerCount": "2"}, "4369287": {"Id": "4369287", "PostTypeId": "2", "Body": "<p>Yes, there is a sequence point associated with the <code>throw</code> statement, because there is a sequence point at the end of <em>every</em> statement.</p>\n<p>So <code>succeeded</code> must remain <code>false</code> in your example.</p>\n<p>I don't have the C++98 Standard, but in the C++03 Standard:</p>\n<blockquote>\n<p id=\"so_4369219_4369287_0\">1.9p16: There is a sequence point at the completion of each full-expression.</p>\n</blockquote>\n<p>A statement is the simplest kind of \"full-expression\", but the Standard is worded to include other expressions that are not technically part of any statement.</p>\n", "LastActivityDate": "2010-12-06T17:44:15.987", "CommentCount": "5", "CreationDate": "2010-12-06T17:44:15.987", "ParentId": "4369219", "Score": "4", "OwnerUserId": "459640"}, "4369258": {"Id": "4369258", "PostTypeId": "2", "Body": "<p>The semicolon is a sequence point.  The throw happens before <code>succeeded</code> is set to <code>true</code></p>\n<p>EDIT:  To clarify:  <code>succeeded</code> will not be set to <code>true</code></p>\n", "LastActivityDate": "2010-12-06T17:41:15.507", "CommentCount": "5", "CreationDate": "2010-12-06T17:41:15.507", "ParentId": "4369219", "Score": "4", "OwnerUserId": "241536"}});