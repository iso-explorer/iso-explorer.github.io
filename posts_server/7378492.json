post_cb({"7378492": {"CommentCount": "9", "AcceptedAnswerId": "7379123", "PostTypeId": "1", "ClosedDate": "2011-09-12T02:16:30.867", "LastEditorUserId": "-1", "CreationDate": "2011-09-11T13:29:10.167", "LastActivityDate": "2011-09-11T19:26:52.070", "LastEditDate": "2017-05-23T12:14:53.867", "ViewCount": "3013", "FavoriteCount": "3", "Title": "c++ array initialization", "Id": "7378492", "Score": "16", "Body": "<blockquote>\n<p id=\"so_7378492_7378492_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/201101/how-to-initialize-an-array-in-c\">How to initialize an array in C</a><br>\n<a href=\"https://stackoverflow.com/questions/4114794/array-initialization-is-referencing-a-previous-element-ok\">array initialization, is referencing a previous element ok?</a> </br></br></p>\n</blockquote>\n<p>I wonder if its safe to do such initialization in c/c++ standard:</p>\n<pre><code>int a = 5;\nint tab[] = { a , tab[0] + 1 , tab[1] };\n</code></pre>\n<p>It successfully compiles and executes with gcc 4.5 and clang 2.9, but will it always be true?</p>\n<hr>\n<p>Printing this table gives <code>5 6 6</code>. Its initialized in global scope.</p>\n<hr>\n<p>Generally its interesting in both, c and c++, but i want to use it in c++:)</p>\n</hr></hr>", "Tags": "<c++><arrays><initialization>", "OwnerUserId": "197686", "AnswerCount": "5"}, "7379684": {"ParentId": "7378492", "CommentCount": "6", "Body": "<p>so, now I've run a couple of tests regarding your problem.</p>\n<p>All compilations have been performed with your example code above, using the following scheme:</p>\n<pre><code>$(GCC) -o a.out test.c -Wall -Wextra -pedantic -std=$(STD)\n</code></pre>\n<p>This yielded the following results:</p>\n<p>for <code>GCC = gcc</code>, the standards <code>-std=c89; -std=iso9899:1990; -std=iso9899:199409; -std=gnu89</code> resulted in a warning showing up: <code>initializer element is not computable at load time</code> and undefined behaviour at runtime, meaning that the second and third value of the array were random garbage.</p>\n<p>the standards <code>-std=c99; std=iso9899:1999; -std=gnu99</code> did not produce this warning, but also showed undefined behaviour at runtime.</p>\n<p>for <code>GCC = g++</code>, the standards <code>-std=c++98; -std=gnu++98; -std=c++0x</code> produced no warning, and the code worked as you'd expected it to, resulting in an array containing the values <code>{5, 6, 6}</code>.</p>\n<p>However, as most of the people advised, it might be unwise to use this, since your code might behave differently on other compilers, or maybe even other versions of the same compiler, which is generally a bad thing :)</p>\n<p>hope that helped.</p>\n", "OwnerUserId": "885605", "PostTypeId": "2", "Id": "7379684", "Score": "4", "CreationDate": "2011-09-11T16:39:59.487", "LastActivityDate": "2011-09-11T16:39:59.487"}, "7378920": {"ParentId": "7378492", "CommentCount": "1", "Body": "<p>Yes - It will probably work as you expect it to be.<br>\nNo - (you didn't ask but) Don't use it, it make no logic and it's a bad practice.</br></p>\n", "OwnerUserId": "672689", "PostTypeId": "2", "Id": "7378920", "Score": "0", "CreationDate": "2011-09-11T14:38:15.950", "LastActivityDate": "2011-09-11T14:38:15.950"}, "7378547": {"ParentId": "7378492", "PostTypeId": "2", "CommentCount": "13", "Body": "<p><sub>C++03/C++11 answer</sub></p>\n<hr>\n<p>No, it won't.</p>\n<p>On the right-hand side of the <code>=</code>, <code>tab</code> exists<sup>1</sup> but \u2014 if it has automatic storage duration \u2014 it has not yet been initialised so your use of <code>tab[0]</code> and <code>tab[1]</code> is using an uninitialised variable.</p>\n<p>If <code>tab</code> is at namespace scope (and thus has static storage duration and has been zero-initialized), then this is \"safe\" but your use of <code>tab[0]</code> there is not going to give you <code>5</code>.</p>\n<p>It's difficult to provide standard references for this, other than to say that there is nothing in <code>8.5 \"Initializers\"</code> that explicitly makes this possible, and rules elsewhere fill in the rest.</p>\n<hr>\n<blockquote>\n<p id=\"so_7378492_7378547_0\"><sup>1</sup> <code>[n3290: 3.3.2/1]:</code> The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its initializer (if any) [..]</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2011-09-11T13:47:36.093", "Id": "7378547", "Score": "7", "CreationDate": "2011-09-11T13:35:37.317", "LastActivityDate": "2011-09-11T13:47:36.093"}, "7379123": {"ParentId": "7378492", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In the C99 standard, it seems that the order of initialization of the members is guaranteed:</p>\n<blockquote>\n<p id=\"so_7378492_7379123_0\">\u00a76.7.8/17: Each brace-enclosed initializer list has an associated current object. <strong>When no designations are present, subobjects of the current object are initialized in order according to the type of the current object: array elements in increasing subscript order</strong>, structure members in declaration order, and the first named member of a union. In contrast, a designation causes the following initializer to begin initialization of the subobject described by the designator. Initialization then continues forward in order, beginning with the next subobject after that described by the designator.</p>\n</blockquote>\n<p>But as @Tomalak mentions in the comment, that does not provide a full guarantee for the operation, as the compiler would first evaluate all of the arguments and then apply the results in the previous order. That is, the previous quote does not impose an order between the initialization of <code>tab[0]</code> and the evaluation of the expression <code>tab[0]+1</code> that is used to initialize <code>tab[1]</code> (it only imposes an ordering between the initialization of <code>tab[0]</code> and <code>tab[1]</code>)</p>\n<p>As of the C++ standard, neither in the current standard nor the FDIS of the upcoming C++0x standard seem to have an specific clause defining the order in which the initialization is performed. The only mention of ordering comes from</p>\n<blockquote>\n<p id=\"so_7378492_7379123_1\">\u00a78.5.1/2 When an aggregate is initialized the initializer can contain an initializer-clause consisting of a brace-enclosed, comma-separated list of initializer-clauses for the members of the aggregate, <strong>written</strong> in increasing subscript or member order.</p>\n</blockquote>\n<p>But that only relates to the order by which the entries in the initializer are <em>written</em>, not how it is actually evaluated.</p>\n", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2011-09-11T19:26:52.070", "Id": "7379123", "Score": "4", "CreationDate": "2011-09-11T15:10:03.030", "LastActivityDate": "2011-09-11T19:26:52.070"}, "7378545": {"ParentId": "7378492", "PostTypeId": "2", "CommentCount": "4", "Body": "<pre><code>int a =5;\nint tab[] = { a , tab[0] + 1 , tab[1] };\n</code></pre>\n<p>If these variables are declared at namespace scope, then they're okay, as at namespace scope variables are zero-initialized (because of <em>static</em> initialization - read <a href=\"https://stackoverflow.com/questions/5945897/what-is-dynamic-intialization-of-object-in-c\">this</a> for detail).</p>\n<p>But if they're declared at function scope, then second line invokes undefined behaviour, since the local variables are not <em>statically</em> initialized, that means, <code>tab[0]</code> and <code>tab[1]</code> are uninitialized, which you use to initialize the array. Reading uninitialized variables invokes undefined behavior.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:08:03.383", "Id": "7378545", "Score": "5", "CreationDate": "2011-09-11T13:35:28.127", "LastActivityDate": "2011-09-11T14:32:50.850"}, "bq_ids": {"n4140": {"so_7378492_7378547_0": {"section_id": 7049, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_7378492_7378547_0": {"section_id": 6794, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_7378492_7378547_0": {"section_id": 8546, "quality": 0.7333333333333333, "length": 11}}}});