post_cb({"bq_ids": {"n4140": {"so_6407814_6408104_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 1866}}, "n3337": {"so_6407814_6408104_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 1860}}, "n4659": {"so_6407814_6408104_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 2038}}}, "6407814": {"ViewCount": "1177", "Body": "<p>I've asked in one of <a href=\"https://stackoverflow.com/questions/6404079/alternative-to-boostlexical-cast\">my posts</a> a question about alternative to <code>boost::lexical_cast</code> and amongst many replies I've got one suggestion <code>stoi</code> as a viable alternative.<br>\nI've decided to test it and to my surprise as a second argument to this function (argument describing size) is a pointer to <code>size_t</code> type, not actual <code>size_t</code> type. Is there any logical explanation for that and in what way it is better to have a pointer to actual object than object itself (just in this particular case when size is concerned and I wouldn't instinctively assign size with pointer)? </br></p>\n<p>Link to stoi doc: <a href=\"http://msdn.microsoft.com/en-us/library/ee404860.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/library/ee404860.aspx</a></p>\n", "AcceptedAnswerId": "6408104", "Title": "stoi - issue with design", "CreationDate": "2011-06-20T07:01:16.797", "Id": "6407814", "CommentCount": "1", "LastEditDate": "2017-05-23T12:13:19.150", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2011-06-20T07:37:01.670", "Score": "1", "OwnerUserId": "333390", "Tags": "<c++>", "AnswerCount": "2"}, "6407844": {"Id": "6407844", "PostTypeId": "2", "Body": "<p>I thought the size_t* parameter was a pointer to a variable into which stoi places a position within the string after the end of the converted number.  i.e. it's an 'out' parameter, hence being a pointer.</p>\n<p>For example: <a href=\"http://msdn.microsoft.com/en-us/library/ee404860.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ee404860.aspx</a></p>\n<p>Perhaps you should point to the specific docs which are confusing.</p>\n", "LastActivityDate": "2011-06-20T07:04:54.737", "CommentCount": "5", "CreationDate": "2011-06-20T07:04:54.737", "ParentId": "6407814", "Score": "2", "OwnerUserId": "987"}, "6408104": {"Id": "6408104", "PostTypeId": "2", "Body": "<p>That is a way of having <em>optional</em> arguments. Basically, if you are interested in knowing which is the first character that was not converted into the number. If you are not really interested in that result, you can pass nullptr.</p>\n<blockquote>\n<p id=\"so_6407814_6408104_0\">\u00a721.5 [string.conversions]/1 [...] If the function does not throw an exception and idx != 0, the function stores in *idx the index of the first unconverted element of str.</p>\n</blockquote>\n<p>This is meant to be used as:</p>\n<pre><code>int main() {\n   std::string two{\"2 and more contents\"};\n   // I don't care, just want a number:\n   int i = std::stoi( two, 0, 10 );            // base = 0\n\n   std::size_t first_not_converted;\n   int i = std::stoi( two, &amp;first_not_converted, 10 );\n\n   std::cout &lt;&lt; \"Unconverted string is: \" &lt;&lt; two.substr( first_not_converted ) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>By using a pointer you can make the argument really optional, if it was an out parameter, but required a reference would be used, but that would require user code to create the variable <em>always</em> regardless of whether they are interested in the value or not, so it would not be really optional.</p>\n", "LastActivityDate": "2011-06-20T07:37:01.670", "CommentCount": "3", "CreationDate": "2011-06-20T07:37:01.670", "ParentId": "6407814", "Score": "4", "OwnerUserId": "36565"}});