post_cb({"bq_ids": {"n4140": {"so_1635130_1635140_0": {"length": 13, "quality": 1.0, "section_id": 5343}, "so_1635130_1635140_3": {"length": 14, "quality": 0.875, "section_id": 5343}, "so_1635130_1635140_1": {"length": 11, "quality": 1.0, "section_id": 5343}, "so_1635130_1635140_2": {"length": 17, "quality": 1.0, "section_id": 5343}}, "n3337": {"so_1635130_1635140_0": {"length": 13, "quality": 1.0, "section_id": 5140}, "so_1635130_1635140_3": {"length": 14, "quality": 0.875, "section_id": 5140}, "so_1635130_1635140_1": {"length": 11, "quality": 1.0, "section_id": 5140}, "so_1635130_1635140_2": {"length": 17, "quality": 1.0, "section_id": 5140}}, "n4659": {"so_1635130_1635140_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6764}, "so_1635130_1635140_3": {"length": 14, "quality": 0.875, "section_id": 6765}, "so_1635130_1635140_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 6765}, "so_1635130_1635140_2": {"length": 17, "quality": 1.0, "section_id": 6765}}}, "1635140": {"Id": "1635140", "PostTypeId": "2", "Body": "<p>Your comparison string are incorrect. They should be of the form <code>\"hist\"</code>, not <code>'hist'</code>.</p>\n<p>In C++, <code>'hist'</code> is simply a character literal (as stated in section <em>2.14.3</em> of the C++0x draft (n2914) standard), my emphasis on the last paragraph:</p>\n<blockquote>\n<p id=\"so_1635130_1635140_0\">A character literal is one or more characters enclosed in single quotes, as in \u2019x\u2019, optionally preceded by one of the letters u, U, or L, as in u\u2019y\u2019, U\u2019z\u2019, or L\u2019x\u2019, respectively.</p>\n<p id=\"so_1635130_1635140_1\">A character literal that does not begin with u, U, or L is an ordinary character literal, also referred to as a narrow-character literal.</p>\n<p id=\"so_1635130_1635140_2\">An ordinary character literal that contains a single c-char has type char, with value equal to the numerical value of the encoding of the c-char in the execution character set.</p>\n<p id=\"so_1635130_1635140_3\"><em>An ordinary character literal that contains more than one c-char is a multicharacter literal. A multicharacter literal has type int and implementation-defined value.</em></p>\n</blockquote>\n<p>As to there being a better way, it depends on what you mean by better :-)</p>\n<p>One possibility is to set up a functon table which is basically an array of structs, each containing a word and a function pointer.</p>\n<p>Then you simply extract the word from your string and do a lookup in that array, calling the function if you find a match. The following C program shows how to use function tables. As to whether that's a <em>better</em> solution, I'll leave it up to you (it's a moderately advanced technique) - you may be better off sticking with what you understand.</p>\n<pre><code>#include &lt;stdio.h&gt;\n\ntypedef struct {         // This type has the word and function pointer\n    char *word;          // to call for that word. Major limitation is\n    void (*fn)(void);    // that all functions must have the same\n} tCmd;                  // signature.\n\n// These are the utility functions and the function table itself.\n\nvoid hello (void) { printf (\"Hi there\\n\"); }\nvoid goodbye (void) { printf (\"Bye for now\\n\"); }\n\ntCmd cmd[] = {{\"hello\",&amp;hello},{\"goodbye\",&amp;goodbye}};\n\n// Demo program, showing how it's done.\n\nint main (int argc, char *argv[]) {\n    int i, j;\n\n    // Process each argument.\n\n    for (i = 1; i &lt; argc; i++) {\n        //Check against each word in function table.\n\n        for (j = 0; j &lt; sizeof(cmd)/sizeof(*cmd); j++) {\n            // If found, execute function and break from inner loop.\n\n            if (strcmp (argv[i],cmd[j].word) == 0) {\n                (cmd[j].fn)();\n                break;\n            }\n        }\n\n        // Check to make sure we broke out of loop, otherwise not a avlid word.\n\n        if (j == sizeof(cmd)/sizeof(*cmd)) {\n            printf (\"Bad word: '%s'\\n\", argv[i]);\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n<p>When run with:</p>\n<pre><code>pax&gt; ./qq.exe hello goodbye hello hello goodbye hello bork\n</code></pre>\n<p>you get the output:</p>\n<pre><code>Hi there\nBye for now\nHi there\nHi there\nBye for now\nHi there\nBad word: 'bork'\n</code></pre>\n", "LastEditorUserId": "14860", "LastActivityDate": "2010-01-05T12:48:20.837", "Score": "8", "CreationDate": "2009-10-28T04:06:33.163", "ParentId": "1635130", "CommentCount": "4", "LastEditDate": "2010-01-05T12:48:20.837", "OwnerUserId": "14860"}, "1635130": {"ViewCount": "2944", "Body": "<p>I'm using strcmp to compare character arrays in c++, but I get the following error for every occurrence of strcmp: error: invalid conversion from 'int' to 'const char*' followed by: error: initializing argument 2 of 'int strcmp(const char*, const char*)' </p>\n<p>I've include string, string.h, and stdio.h and here is my code, thanks to all who reply.</p>\n<p>Also, is there a better way to check the buffer other than a bunch of if statements?</p>\n<p><pre><code>\nint main(int argc, char* argv[])\n{\n    unsigned count = 0;\n    bool terminate = false;\n    char buffer[128];</code></pre></p>\n<pre><code>do {\n    // Print prompt and get input\n    count++;\n    print_prompt(count);\n    cin.getline(buffer, 128);\n\n    // check if input was greater than 128, then check for built-in commands\n    // and finally execute command\n    if (cin.fail()) {\n        cerr &lt;&lt; \"Error: Commands must be no more than 128 characters!\" &lt;&lt; endl;\n    }\n    else if ( strcmp(buffer, 'hist') == 0 ) {\n        print_Hist();\n    }\n    else if ( strcmp(buffer, 'curPid') == 0 ) {\n        // get curPid\n    }\n    else if ( strncmp(buffer, 'cd ', 3) == 0 ) {\n        // change directory\n    }\n    else if ( strcmp(buffer, 'quit') == 0 ) {\n        terminate = true;\n    }\n    else {\n        //run external command\n    }\n\n} while(!terminate);\n\nreturn 0;\n</code></pre>\n<p>}\n</p>\n", "AcceptedAnswerId": "1635140", "Title": "error when I call strcmp Invalid conversion from 'int' to 'const char*'", "CreationDate": "2009-10-28T04:02:09.303", "Id": "1635130", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-01-05T12:48:20.837", "Score": "2", "OwnerUserId": "191474", "Tags": "<c++><strcmp>", "AnswerCount": "1"}});