post_cb({"17754750": {"ParentId": "17754324", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>There's a header file in the Standard library named <code>time.h</code>.  It's likely that either</p>\n<ul>\n<li>You're including the system header file when you wanted your own, or</li>\n<li>System header files are pulling in yours when they wanted the standard one</li>\n</ul>\n<p>or both.  Find a different name for your header.</p>\n<p>In addition, the identifier <code>time</code> in the global namespace is used by a function in the Standard library (hence the error <code>function \"time\" is not a type name</code>).  So put yours inside a namespace or change the class name.</p>\n<p>Specifically, your errors are caused by ignoring this rule, found in 17.6.4.3.3:</p>\n<blockquote>\n<p id=\"so_17754324_17754750_0\">Each name from the Standard C library declared with external linkage is reserved to the implementation for use as a name with extern \"C\" linkage, both in namespace <code>std</code> and in the global namespace.</p>\n<p id=\"so_17754324_17754750_1\">Each function signature from the Standard C library declared with external linkage is reserved to the implementation for use as a function signature with both <code>extern \"C\"</code> and <code>extern \"C++\"</code> linkage, or as a name of namespace scope in the global namespace.</p>\n</blockquote>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2013-07-19T20:22:45.593", "Id": "17754750", "Score": "1", "CreationDate": "2013-07-19T20:16:38.767", "LastActivityDate": "2013-07-19T20:22:45.593"}, "17754324": {"CommentCount": "1", "ViewCount": "163", "PostTypeId": "1", "LastEditorUserId": "103167", "CreationDate": "2013-07-19T19:47:53.207", "LastActivityDate": "2013-07-19T20:59:38.933", "Title": "Visual C++ not know function return value which is a user defined class", "AcceptedAnswerId": "17754750", "LastEditDate": "2013-07-19T20:59:38.933", "Id": "17754324", "Score": "0", "Body": "<p>I have,</p>\n<p>time.h:</p>\n<pre><code>#pragma once\n#ifndef TIME_H\n#define TIME_H\nclass time\n{\nprivate:\n    int hour;\n    int minute;\n    int second;\npublic:\n    enum pmORam {am,pm};\n    time(void);\n    time(int,int,int);\n    void printtime(void);\n    time subtime(time &amp;);\n    const time &amp;operator=(const time &amp;);\n    void setTime(int,int,int);\n    ~time(void);\n};\n#endif\n</code></pre>\n<p>time.cpp:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"stdafx.h\"\n#include \"time.h\"\n\n\n\nusing namespace std;\n\n\ntime::time(void)\n{\n    hour=0;\n    minute=0;\n    second=0;\n}\ntime::time(int hr,int min,int sec)\n{\n    setTime(hr,min,sec);\n}\n\nvoid time::printtime(void)\n{\n    enum pmORam p;\n\n    if(hour&lt;=12 &amp;&amp; hour&gt;=0)\n        cout&lt;&lt;setfill('0')&lt;&lt;setw(2)&lt;&lt;hour&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;minute&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;second&lt;&lt;p.am&lt;&lt;endl;\n    else \n        if(hour&gt;12 &amp;&amp; hour&lt;=23)\n        {\n            hour=hour%12;\n            cout&lt;&lt;setfill('0')&lt;&lt;setw(2)&lt;&lt;hour&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;minute&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;second&lt;&lt;p.pm&lt;&lt;endl;\n        }\n}\nconst time &amp;time::operator=(const time &amp;t)\n{\n    hour=t.hour;\n    minute=t.minute;\n    second=t.second;\n    return *this;\n}\ntime time::subtime(time &amp;m)\n{\n    if(hour&gt;m.hour)\n    {\n        if(m.second&gt;second)\n        {\n            minute=minute-1;\n            second=(second+60)-m.second;\n        }\n        second=second-m.second;\n        if(m.minute&gt;minute)\n        {\n            hour=hour-1;\n            minute=(minute+60)-m.minute;\n        }\n        minute=minute-m.minute;\n        hour=hour-m.hour;\n    }\n    if(second&gt;m.second)\n    {\n        m. minute=m.minute-1;\n        m.second=(m.second+60)-second;\n    }\n    m.second=m.second-second;\n    if(minute&gt;m.minute)\n    {\n        m.hour=m.hour-1;\n        m.minute=(m.minute+60)-minute;\n    }\n    m.hour=hour-m.hour;\n    return *this;\n}\nvoid time::setTime(int hr,int min,int sec)\n{\n    hour=(hr&gt;=0 &amp;&amp; hr&lt;=23)? hr: 0;\n    minute=(min&gt;=0 &amp;&amp; min&lt;60)? min:0;\n    second=(sec&gt;=0 &amp;&amp; sec&lt;60)? sec:0;\n}\ntime::~time(void)\n{\n}\n</code></pre>\n<p>But in time.cpp i get to this Errors:</p>\n<pre><code> IntelliSense: declaration is incompatible with \"time time::subtime(time &amp;)\"\n IntelliSense: declaration is incompatible with \"const time &amp;time::operator=(const time &amp;)\"\n'time::time(const time &amp;)' : cannot convert parameter 1 from 'time *const ' to 'const time &amp;' \n'int time::subtime(time &amp;)' : overloaded function differs only by return type from 'time time::subtime(time &amp;)'\n'int &amp;time::operator =(const time &amp;)' : overloaded function differs only by return type from 'const time &amp;time::operator =(const time &amp;)'\nfunction \"time\" is not a type name\n</code></pre>\n<p>What is Problem?</p>\n<p><strong>Edit: New code to fix naming conflict</strong></p>\n<p>time.cpp:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include \"stdafx.h\"\n#include \"time.h\"\n\n\n\nusing namespace std;\n\n\ntimea::timea(void)\n{\n    hour=0;\n    minute=0;\n    second=0;\n}\ntimea::timea(int hr,int min,int sec)\n{\n    setTime(hr,min,sec);\n}\n\nvoid timea::printtime(void)\n{\n    enum timea::pmORam p;\n\n    if(hour&lt;=12 &amp;&amp; hour&gt;=0)\n        cout&lt;&lt;setfill('0')&lt;&lt;setw(2)&lt;&lt;hour&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;minute&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;second&lt;&lt;p.am&lt;&lt;endl;\n    else \n        if(hour&gt;12 &amp;&amp; hour&lt;=23)\n        {\n            hour=hour%12;\n            cout&lt;&lt;setfill('0')&lt;&lt;setw(2)&lt;&lt;hour&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;minute&lt;&lt;\":\"&lt;&lt;setw(2)&lt;&lt;second&lt;&lt;p.pm&lt;&lt;endl;\n        }\n}\nconst timea &amp;timea::operator=(const timea &amp;t)\n{\n    hour=t.hour;\n    minute=t.minute;\n    second=t.second;\n    return *this;\n}\ntimea timea::subtime(timea &amp;m)\n{\n    if(hour&gt;m.hour)\n    {\n        if(m.second&gt;second)\n        {\n            minute=minute-1;\n            second=(second+60)-m.second;\n        }\n        second=second-m.second;\n        if(m.minute&gt;minute)\n        {\n            hour=hour-1;\n            minute=(minute+60)-m.minute;\n        }\n        minute=minute-m.minute;\n        hour=hour-m.hour;\n    }\n    if(second&gt;m.second)\n    {\n        m. minute=m.minute-1;\n        m.second=(m.second+60)-second;\n    }\n    m.second=m.second-second;\n    if(minute&gt;m.minute)\n    {\n        m.hour=m.hour-1;\n        m.minute=(m.minute+60)-minute;\n    }\n    m.hour=hour-m.hour;\n    return *this;\n}\nvoid timea::setTime(int hr,int min,int sec)\n{\n    hour=(hr&gt;=0 &amp;&amp; hr&lt;=23)? hr: 0;\n    minute=(min&gt;=0 &amp;&amp; min&lt;60)? min:0;\n    second=(sec&gt;=0 &amp;&amp; sec&lt;60)? sec:0;\n}\ntimea::~timea(void)\n{\n}\n</code></pre>\n", "Tags": "<class><visual-c++>", "OwnerUserId": "1719207", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17754324_17754750_1": {"section_id": 6311, "quality": 0.9545454545454546, "length": 21}, "so_17754324_17754750_0": {"section_id": 6310, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_17754324_17754750_1": {"section_id": 6068, "quality": 0.9545454545454546, "length": 21}, "so_17754324_17754750_0": {"section_id": 6067, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_17754324_17754750_1": {"section_id": 7821, "quality": 0.9545454545454546, "length": 21}, "so_17754324_17754750_0": {"section_id": 7820, "quality": 0.9444444444444444, "length": 17}}}});