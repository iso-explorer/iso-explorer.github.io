post_cb({"bq_ids": {"n4140": {"so_39037239_39037606_1": {"length": 16, "quality": 0.64, "section_id": 718}}, "n3337": {"so_39037239_39037606_1": {"length": 17, "quality": 0.68, "section_id": 707}}, "n4659": {"so_39037239_39037606_1": {"length": 16, "quality": 0.64, "section_id": 749}}}, "39037875": {"Id": "39037875", "PostTypeId": "2", "Body": "<p>In addition to Sergey and Anton answers, let me point out that vector is known to be not thread-safe as described in the Data Races section in <a href=\"http://www.cplusplus.com/reference/vector/vector-bool\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector-bool</a> .</p>\n<p>Your alternatives are (as others suggested) either go to vector of other types or protect the statement</p>\n<pre><code>bv[j] = tv[j].test();\n</code></pre>\n<p>with <code>#pragma omp critical</code>.</p>\n", "LastActivityDate": "2016-08-19T11:25:46.167", "CommentCount": "0", "CreationDate": "2016-08-19T11:25:46.167", "ParentId": "39037239", "Score": "1", "OwnerUserId": "1747493"}, "39037239": {"ViewCount": "206", "Body": "<p>Why does the following code not work (as excpected) for std::vector of bool ?\nSome elements are randomly false in the bool-vector.\nFor the int vector all works fine (tested with many more than just 3 loops).</p>\n<p>I am on ubuntu 14.04 64bit with g++ 4.8.4.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n\nclass TestBool\n{\npublic:\n    TestBool() {}\n    bool test() {return true;}\n    int testInt() {return 10;}\n};\nvoid testBVec(vector&lt;bool&gt; &amp;bv, size_t loop)\n{\n    cout &lt;&lt; \"boolvec loop \" &lt;&lt; loop &lt;&lt; endl;\n    for(size_t i = 0; i &lt; bv.size(); i++) {\n        if( ! bv[i])\n            cout &lt;&lt; \"wholy shit with bool at index \" &lt;&lt; i &lt;&lt; endl;\n    }\n}\nvoid testIntVec(vector&lt;int&gt; &amp;iv, size_t loop)\n{\n    cout &lt;&lt; \"intVec loop \" &lt;&lt; loop &lt;&lt; endl;\n    for(size_t i = 0; i &lt; iv.size(); i++) {\n        if( iv[i] != 10)\n            cout &lt;&lt; \"wholy shit with int at index \" &lt;&lt; i &lt;&lt; endl;\n    }\n}\n\n\nint main()\n{\n    vector&lt;TestBool&gt; tv(10);\n    size_t loops = 3;\n\n    for(size_t i = 0; i &lt; loops; i++ ) {\n        vector&lt;bool&gt; bv(10);\n        vector&lt;int&gt; iv(10);\n\n        #pragma omp parallel for\n        for(int j = 0; j &lt; 10; ++j) {\n            bv[j] = tv[j].test();\n            iv[j] = tv[j].testInt();\n        }\n        testBVec(bv, i+1);\n        testIntVec(iv, i+1);\n    }\n\n    return 0;\n}\n</code></pre>\n", "Title": "C++ OpenMP and std::vector<bool>", "CreationDate": "2016-08-19T10:53:44.163", "LastActivityDate": "2016-08-19T11:30:47.583", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "39037239", "Score": "3", "OwnerUserId": "6734408", "Tags": "<c++><openmp><stdvector>", "AnswerCount": "3"}, "39037606": {"Id": "39037606", "PostTypeId": "2", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/vector_bool\" rel=\"nofollow\"><code>vector&lt;bool&gt;</code></a> is the explicit template specialization which packs boolean values into bits of some integer variables. To make the bits writable by semantically-correct subscript, <code>vector&lt;bool&gt;::operator[]</code> returns some <a href=\"http://www.cplusplus.com/reference/vector/vector-bool/reference/\" rel=\"nofollow\">proxy object</a> which is convertible to <code>bool</code> and has assignment operator for bool. The proxy objects for different indices may reference the same underlying memory, so simultaneous access to different bits is not guaranteed to be thread-safe.</p>\n<p>For a competent proof that it's not a compiler bug, see'Data races' section of <a href=\"http://www.cplusplus.com/reference/vector/vector-bool/\" rel=\"nofollow\">this</a> page:</p>\n<blockquote>\n<p id=\"so_39037239_39037606_0\">Simultaneous access to different elements is not guaranteed to be thread-safe (as storage bytes may be shared by multiple bits).</p>\n</blockquote>\n<p>or Section 23.2.2 of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">the C++ Standard</a>:</p>\n<blockquote id=\"so_39037239_39037606_1\">\n<ol start=\"2\">\n<li>&lt;...&gt; implementations are required to avoid data races when the contents of the contained object in different elements in the same sequence, excepting <code>vector&lt;bool&gt;</code>, are modified concurrently.</li>\n<li>&lt;...&gt; As an exception to the general rule, for a <code>vector&lt;bool&gt; y</code>, <code>y[0] = true</code> may race with <code>y[1] = true</code>. </li>\n</ol>\n</blockquote>\n<p>As @Anton advised, use a type other than <code>bool</code>.</p>\n", "LastEditorUserId": "1690777", "LastActivityDate": "2016-08-19T11:30:47.583", "Score": "6", "CreationDate": "2016-08-19T11:11:09.523", "ParentId": "39037239", "CommentCount": "0", "OwnerUserId": "1690777", "LastEditDate": "2016-08-19T11:30:47.583"}, "39037346": {"Id": "39037346", "PostTypeId": "2", "Body": "<p>Most probably it's because <code>vector&lt;bool&gt;</code> transformed to array of bits by compiler. Just use <code>vector&lt;int&gt;</code> or <code>vector&lt;char&gt;</code> storing 0s and 1s into it, if you don't need bit array.</p>\n", "LastActivityDate": "2016-08-19T10:58:17.660", "CommentCount": "1", "CreationDate": "2016-08-19T10:58:17.660", "ParentId": "39037239", "Score": "5", "OwnerUserId": "4117097"}});