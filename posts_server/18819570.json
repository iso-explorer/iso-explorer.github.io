post_cb({"18819589": {"Id": "18819589", "PostTypeId": "2", "Body": "<p>you are getting this error because the postfix operator returns a value and not a reference. But for clarity you should probably not do <code>i=j++++;</code> it might be more clear to say <code>i = j += 2;</code> or separate the lines into <code>i = j+2; j+=2;</code> or <code>j+=2; i = j;</code>.</p>\n", "LastEditorUserId": "1373124", "LastActivityDate": "2013-09-16T02:27:47.963", "Score": "1", "CreationDate": "2013-09-16T02:22:21.647", "ParentId": "18819570", "CommentCount": "3", "OwnerUserId": "1373124", "LastEditDate": "2013-09-16T02:27:47.963"}, "18819570": {"ViewCount": "628", "Body": "<p>In C++,</p>\n<pre><code>i = ++++j;\n</code></pre>\n<p>works fine in the code but when I use,</p>\n<pre><code>i = j++++;\n</code></pre>\n<p>I receive the following error:</p>\n<pre><code>Operand for operator \"++\" must be an lvalue.\n</code></pre>\n<p>Why am I getting this error? </p>\n", "Title": "Error : Operand for operator \"++\" must be an lvalue", "CreationDate": "2013-09-16T02:20:08.477", "LastActivityDate": "2013-09-16T15:49:18.900", "CommentCount": "5", "LastEditDate": "2013-09-16T04:00:27.617", "PostTypeId": "1", "LastEditorUserId": "1708801", "Id": "18819570", "Score": "0", "OwnerUserId": "2782405", "Tags": "<c++>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18819570_18819629_2": {"length": 33, "quality": 1.0, "section_id": 5811}, "so_18819570_18819629_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 6009}}, "n3337": {"so_18819570_18819629_2": {"length": 33, "quality": 1.0, "section_id": 5584}, "so_18819570_18819629_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 5777}}, "n4659": {"so_18819570_18819629_2": {"length": 27, "quality": 0.8181818181818182, "section_id": 7272}, "so_18819570_18819629_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 7508}}}, "18819629": {"Id": "18819629", "PostTypeId": "2", "Body": "<p>Post-increment requires that the operand should be a <em>modifiable lvalue</em> but the result of post-increment is a <a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow\">prvalue</a>(<em>\"pure\" rvalue</em>) which is not modifiable, this diagram shows what is going on:</p>\n<pre><code>i = (j++)++ ;\n     ^  ^\n     |  |\n     |  Result is a prvalue, not a valid operand for subsequent post-increment\n     Modifiable lvalue\n</code></pre>\n<p><a href=\"http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c/\" rel=\"nofollow\">Understanding lvalues and rvalues in C and C++</a> is a good place to start if you need to understand the difference between <em>lvalues</em> and <em>rvalues</em>.\nFrom the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>5.2.6</code> <em>Increment and decrement [expr.post.incr]</em> paragraph <em>1</em> says(<em>emphasis is mine in this an subsequent quotes</em>):</p>\n<blockquote>\n<p id=\"so_18819570_18819629_0\">The value of a postfix ++ expression is the value of its operand. [ Note: the value obtained is a copy of the original value \u2014end note ] The <strong>operand shall be a modifiable lvalue</strong>. [..] <strong>The result is a prvalue.</strong></p>\n</blockquote>\n<p><b>Update</b></p>\n<p>I reworked my language on undefined behavior since there is a difference here with respect to <em>C++03</em> and <em>C++11</em>.</p>\n<p>Although the first expression shown:</p>\n<pre><code>i = ++++j ;\n</code></pre>\n<p>does not generate an error but if this is <em>C++03</em> and <code>j</code> is a fundamental type this is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> since modifying it's value more than once within a <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a> is undefined. The relevant section in an <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\" rel=\"nofollow\">older draft standard</a> would be section <code>5</code> <em>Expressions</em> paragraph <em>4</em> which says:</p>\n<blockquote>\n<p id=\"so_18819570_18819629_1\">[...]<strong>Between the previous and next sequence point a scalar object shall have its stored value modified at most once</strong> by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored. The requirements of this paragraph shall be met for each allowable ordering of the subexpressions of a full expression; <strong>otherwise the behavior is undefined.</strong></p>\n</blockquote>\n<p>and it gives some examples, one of which is as follows:</p>\n<pre><code>i = ++i + 1; // the behavior is undefined\n</code></pre>\n<p>In <em>C++11</em> the language changes to the side-effect on the same scalar object is unsequenced relative to the another side effect on the same object then the behavior is undefined. So this is actually well defined in <em>C++11</em>, in section <code>1.9</code> <em>Program execution</em> paragraph <em>15</em> says:</p>\n<blockquote>\n<p id=\"so_18819570_18819629_2\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced. [...] <strong>If a side effect on a scalar object is unsequenced relative to either another side effect on the same scalar object or a value computation using the value of the same scalar object, the behavior is undefined.</strong></p>\n</blockquote>\n<p>Using post- and pre- increment in this way does not lead to readable(<em>maintainable</em>) code in both cases using <code>j +=2</code> either before or after the assignment statement would have sufficed </p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2013-09-16T15:49:18.900", "Score": "7", "CreationDate": "2013-09-16T02:28:34.650", "ParentId": "18819570", "CommentCount": "6", "OwnerUserId": "1708801", "LastEditDate": "2013-09-16T15:49:18.900"}});