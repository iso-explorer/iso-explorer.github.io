post_cb({"bq_ids": {"n4140": {"so_31035255_31035481_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 739}}, "n3337": {"so_31035255_31035481_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 728}}, "n4659": {"so_31035255_31035481_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 797}}}, "31035255": {"ViewCount": "269", "Body": "<p>Say I have </p>\n<pre><code>std::set&lt;classtype&gt; set;\nclass classtype {\n    bool operator==(const classtype&amp; ct) {\n        //..\n    } \n};\n//..\nstd::set&lt;classtype&gt;::iterator it = set.find(element);\n</code></pre>\n<p>Find does use the == operator from the class correct? </p>\n<p>Also my reference says it has log(n) worst case runtime where n is the number of elements in the set. How is this realized internally? I understand that the key is that the elements in the set have a order (so insertion takes long to create that order), for integer sets it is clear what order means but for random classes not so much.</p>\n", "AcceptedAnswerId": "31035481", "Title": "Does std::set<classtype>.find(element) use the == operator from the class to compare the elements?", "CreationDate": "2015-06-24T19:23:58.157", "Id": "31035255", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2015-06-24T20:08:37.020", "Score": "0", "OwnerUserId": "800474", "Tags": "<c++><time-complexity><stdset>", "AnswerCount": "1"}, "31035481": {"Id": "31035481", "PostTypeId": "2", "Body": "<p>From the C++ Standard (23.2.4 Associative containers)</p>\n<blockquote>\n<p id=\"so_31035255_31035481_0\">3 The phrase \u201cequivalence of keys\u201d means the equivalence relation\n  imposed by the comparison and <strong>not the operator== on keys</strong>. That is,\n  two keys k1 and k2 are considered to be equivalent if for the\n  comparison object comp, comp(k1, k2) == false &amp;&amp; comp(k2, k1) ==\n  false. For any two keys k1 and k2 in the same container, calling\n  comp(k1, k2) shall always return the same value.</p>\n</blockquote>\n<p>Member function <code>find</code> seeks a key according to the comparison object <code>comp</code></p>\n<p>If you did not specify explicitly the comparison object then the class uses by default standard functional object <code>std::less</code> that uses <code>operator &lt;</code> within its operator function. So your class has to have the operator &lt; defined.</p>\n<p>If you want to use <code>operator ==</code> for comparison values in the set then you can use standard algorithm <code>std::find</code> instead of the method <code>find</code>.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-06-24T20:08:37.020", "Score": "3", "CreationDate": "2015-06-24T19:36:07.593", "ParentId": "31035255", "CommentCount": "6", "OwnerUserId": "2877241", "LastEditDate": "2015-06-24T20:08:37.020"}});