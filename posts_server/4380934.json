post_cb({"4380934": {"ViewCount": "814", "Body": "<p>Let's say I have this code:</p>\n<pre><code>std::vector&lt;Object*&gt; objects;\nstd::vector&lt;Object*&gt;::iterator iter;\nfor (iter = objects.begin(); iter != objects.end(); iter++) {\n    if (condition)\n        objects.push_back(new Object());\n}\n</code></pre>\n<p>However, when push_back occurs, <code>iter</code> becomes undereferenceable. Without resetting <code>iter</code>, how do I keep it dereferenceable? If I have to reset it, is there an easy way to do it so iter goes back to where it was before?</p>\n", "Title": "How to keep an iterator dereferenceable when its vector is added to?", "CreationDate": "2010-12-07T19:50:08.597", "LastActivityDate": "2010-12-07T21:19:40.160", "CommentCount": "1", "PostTypeId": "1", "Id": "4380934", "Score": "1", "OwnerUserId": "534160", "Tags": "<c++><vector><iterator><push-back>", "AnswerCount": "6"}, "4381020": {"Id": "4381020", "PostTypeId": "2", "Body": "<p>The iterator only becomes invalidated if the vector has to reallocate more memory.</p>\n<p>To prevent the reallocation of memory pre-allocate all the memory you need with reserve() (assuming you know this size when you allocate the vector).</p>\n<p>The easier solution keep an indirect reference to the member (an index in the array).</p>\n", "LastActivityDate": "2010-12-07T20:02:25.597", "Score": "0", "CreationDate": "2010-12-07T20:02:25.597", "ParentId": "4380934", "CommentCount": "0", "OwnerUserId": "14065"}, "4380958": {"Id": "4380958", "PostTypeId": "2", "Body": "<p>You will have to result to an old fashioned for loop with numerical indices. Either that, or reserve() the vector before the loop runs to guarantee it won't resize.</p>\n<p>Also, raw pointers? Srsly.</p>\n", "LastActivityDate": "2010-12-07T19:52:35.153", "Score": "0", "CreationDate": "2010-12-07T19:52:35.153", "ParentId": "4380934", "CommentCount": "0", "OwnerUserId": "298661"}, "4381174": {"Id": "4381174", "PostTypeId": "2", "Body": "<p>If you absolutely must use iterators for this:</p>\n<pre><code>std::vector&lt;Object*&gt; objects;\nstd::vector&lt;Object*&gt; newObjects;\nstd::vector&lt;Object*&gt;::iterator iter;\nfor (iter = objects.begin(); iter != objects.end(); ++iter)\n{\n    if (condition)\n    {\n        newObjects.push_back(new Object());\n    }\n}\n\nstd::copy(newObjects.begin(), newObjects.end(), back_inserter&lt;vector&lt;Object*&gt; &gt;(objects));\n</code></pre>\n", "LastActivityDate": "2010-12-07T20:20:46.243", "Score": "1", "CreationDate": "2010-12-07T20:20:46.243", "ParentId": "4380934", "CommentCount": "0", "OwnerUserId": "529761"}, "bq_ids": {"n4140": {"so_4380934_4381276_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 713}}, "n3337": {"so_4380934_4381276_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 702}}, "n4659": {"so_4380934_4381276_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 742}}}, "4381706": {"Id": "4381706", "PostTypeId": "2", "Body": "<p>As most of the other answers already say, you're probably better accessing the vector by index in this case.</p>\n<p>However, for completeness: <code>std::list</code> iterators don't have this \"problem\". So using <code>list</code> instead of <code>vector</code> is a possible solution.</p>\n", "LastActivityDate": "2010-12-07T21:19:40.160", "Score": "0", "CreationDate": "2010-12-07T21:19:40.160", "ParentId": "4380934", "CommentCount": "0", "OwnerUserId": "59781"}, "4381276": {"Id": "4381276", "PostTypeId": "2", "Body": "<p>\u00a723.1/11:</p>\n<blockquote>\n<p id=\"so_4380934_4381276_0\">Unless otherwise specified (either\n  explicitly or by defining a function\n  in terms of other functions), invoking\n  a container member function or passing\n  a container as an argument to a\n  library function shall not invalidate\n  iterators to, or change the values of,\n  objects within that container.</p>\n</blockquote>\n<p>However, it is not explicitly specified, that std::vector::push_back invalidates any iterators.</p>\n", "LastActivityDate": "2010-12-07T20:31:42.053", "Score": "0", "CreationDate": "2010-12-07T20:31:42.053", "ParentId": "4380934", "CommentCount": "2", "OwnerUserId": "534124"}, "4380957": {"Id": "4380957", "PostTypeId": "2", "Body": "<p>I would recommend that you simply access it by index. This completely eliminates the issue.</p>\n", "LastActivityDate": "2010-12-07T19:52:24.567", "Score": "5", "CreationDate": "2010-12-07T19:52:24.567", "ParentId": "4380934", "CommentCount": "0", "OwnerUserId": "2101267"}});