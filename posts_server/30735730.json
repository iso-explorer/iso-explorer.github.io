post_cb({"30735730": {"CommentCount": "1", "ViewCount": "113", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2015-06-09T14:58:12.640", "LastActivityDate": "2015-07-25T20:10:46.470", "Title": "MSVC 12 std::initializer_list bug when copying std::string", "AcceptedAnswerId": "30737281", "LastEditDate": "2015-07-25T20:10:46.470", "Id": "30735730", "Score": "1", "Body": "<p>I'm trying to create a C++ program with MSVC 12 (Visual Studio 2013, Update 4) which uses a <code>std::initializer_list</code> of structs which have <code>std::string</code> members. I seem to have run into a bug in MSVC. Here's a minimal example which exhibits the problem:</p>\n<pre><code>#include &lt;cassert&gt;\n#include &lt;initializer_list&gt;\n#include &lt;string&gt;\n\nnamespace\n{\n    struct TestStructure\n    {\n        std::string m_string;\n        int m_integer;\n\n        TestStructure(const std::string&amp; string, int integer)\n            : m_string(string), m_integer(integer)\n        {\n        }\n\n        TestStructure(const TestStructure&amp;) = default;\n        ~TestStructure() = default;\n        TestStructure&amp; operator=(const TestStructure&amp;) = default;\n    };\n}\n\nint main(int, char **)\n{\n    TestStructure structure(\"foobar\", 12345);\n    std::initializer_list&lt;TestStructure&gt; structures({structure});\n\n    assert(structure.m_integer == 12345);\n    assert(structure.m_string == \"foobar\");\n    assert(structures.size() == 1);\n    assert(structures.begin()-&gt;m_integer == 12345);\n    assert(structures.begin()-&gt;m_string == \"foobar\"); // abort()'s here.\n\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>I would expect that this program would compile and execute without any problems. However, when I run it the last assertion seems to fail. Looking in the Visual Studio debugger, it would seem that <code>structures.begin()-&gt;m_string == \"\"</code>.</p>\n<p>Is my program somehow not well-formed, or is this actually a bug in MSVC? Is there some workaround for this problem (other than just not using initializer lists)?</p>\n", "Tags": "<c++><c++11><visual-studio-2013><language-lawyer><msvc12>", "OwnerUserId": "1858369", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30735730_30737281_0": {"section_id": 3328, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_30735730_30737281_0": {"section_id": 4094, "quality": 0.9047619047619048, "length": 19}}}, "30737281": {"ParentId": "30735730", "LastEditDate": "2015-06-09T16:50:21.617", "CommentCount": "0", "CreationDate": "2015-06-09T16:03:59.127", "Score": "4", "LastEditorUserId": "567292", "PostTypeId": "2", "Id": "30737281", "OwnerUserId": "567292", "Body": "<p>The problem is that you're using both parentheses and braces:</p>\n<pre><code>std::initializer_list&lt;TestStructure&gt; structures({structure});\n                                               ^^         ^^\n</code></pre>\n<p>This will construct a temporary <code>std::initializer_list&lt;TestStructure&gt;</code> and copy it to <code>structures</code>; the normal lifetime-extension will not be performed, so <code>structures</code> will be pointing to destructed storage:</p>\n<p><strong>[dcl.init.list]</strong>:</p>\n<blockquote>\n<p id=\"so_30735730_30737281_0\">6 - The array has the same lifetime as any other temporary object (12.2), except that initializing an <code>initializer_list</code> object from the array extends the lifetime of the array exactly like binding a reference to a temporary [...]</p>\n</blockquote>\n<p>Note that clang agrees with MSVC on this; gcc performs lifetime extension on the backing array, but it is erroneous to do so (Bug filed: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66476\" rel=\"nofollow\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66476</a>).</p>\n<p>If you want copy-initialization (with lifetime extension), use an equals sign:</p>\n<pre><code>std::initializer_list&lt;TestStructure&gt; structures = {structure};\n</code></pre>\n<p>Otherwise, use direct-list-initialization (using braces directly):</p>\n<pre><code>std::initializer_list&lt;TestStructure&gt; structures{structure};\n</code></pre>\n", "LastActivityDate": "2015-06-09T16:50:21.617"}});