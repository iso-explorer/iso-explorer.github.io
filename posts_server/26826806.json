post_cb({"bq_ids": {"n4140": {"so_26826806_26826859_0": {"length": 34, "quality": 0.85, "section_id": 2717}}, "n3337": {"so_26826806_26826859_0": {"length": 34, "quality": 0.85, "section_id": 2678}}, "n4659": {"so_26826806_26826859_0": {"length": 34, "quality": 0.85, "section_id": 3457}}}, "26826859": {"Id": "26826859", "PostTypeId": "2", "Body": "<p>This is documented in <code>std::thread</code>'s <a href=\"http://en.cppreference.com/w/cpp/thread/thread/~thread\" rel=\"noreferrer\">destructor</a>: if a thread is destroyed while it is joinable, <code>std::terminate</code> is called.</p>\n<p>Quote from the C++11 standard  draft n3290 (\u00a730.3.1.3 <em>thread destructor</em>):</p>\n<blockquote>\n<p id=\"so_26826806_26826859_0\">If <code>joinable()</code> then <code>terminate()</code>, otherwise no effects. [ Note: Either implicitly detaching or joining a joinable() thread in its destructor could result in difficult to debug correctness (for detach) or performance (for join) bugs encountered only when an exception is raised. Thus the programmer must ensure that the destructor is never executed while the thread is still joinable. \u2014 end note ]</p>\n</blockquote>\n<p>You must either join the thread, or detach it. Joining seems like the right option in your case.</p>\n", "LastActivityDate": "2014-11-09T09:34:08.683", "CommentCount": "0", "CreationDate": "2014-11-09T09:34:08.683", "ParentId": "26826806", "Score": "5", "OwnerUserId": "635608"}, "26826806": {"ViewCount": "1959", "Body": "<p>I am getting abort exception in simple VC++ program when main method completes.</p>\n<p>Here is my sample test program.</p>\n<pre><code>#include \"stdafx.h\"\n#include &lt;thread&gt;\n#include &lt;Windows.h&gt;\n\nclass ThreadTest\n{\npublic:\n    ThreadTest()\n    {\n    }\n\n    ~ThreadTest()\n    {\n\n    }\n\n    void ThreadProc()\n    {\n\n    }\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    ThreadTest test;\n    std::thread t = std::thread(&amp;ThreadTest::ThreadProc, std::ref(test));\n\n    Sleep(5000);\n\n    return 0;\n}\n</code></pre>\n<p>I have experience in nativate pthread_create functions but it seems that something is missing. When I put Sleep(15000); in ThreadProc method same issue happens without any changes.</p>\n", "AcceptedAnswerId": "26826859", "Title": "std::thread get abort exception in destructor in vc++", "CreationDate": "2014-11-09T09:27:01.550", "Id": "26826806", "CommentCount": "0", "LastEditDate": "2014-11-09T09:33:48.833", "PostTypeId": "1", "LastEditorUserId": "2087253", "LastActivityDate": "2014-11-09T09:34:08.683", "Score": "2", "OwnerUserId": "2087253", "Tags": "<c++><multithreading><visual-c++>", "AnswerCount": "1"}});