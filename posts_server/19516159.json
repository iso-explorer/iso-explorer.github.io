post_cb({"19516701": {"ParentId": "19516159", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>SFINAE only applies to things directly within the function signature. The compilation error you get happens within the instantiation of <code>base&lt;T, K&gt;</code>, which is two steps removed from the function signature.</p>\n<p>That said, why do you do this the hard way?</p>\n<pre><code>template &lt;typename T, typename U&gt;\nstruct is_same { static const bool value = false; };\n\ntemplate &lt;typename T&gt;\nstruct is_same&lt;T, T&gt; { static const bool value = true; };\n\ntemplate &lt;typename T, typename U&gt;\nstruct is_different { static const bool value = !is_same&lt;T, U&gt;::value; };\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p>So, to answer your question in the comment, let me explain a bit more about SFINAE. The standard specifies SFINAE in 17.8.2p8:</p>\n<blockquote>\n<p id=\"so_19516159_19516701_0\">If a substitution results in an invalid type or rexpression, type deduction fails. An invalid type or rexpression is one that would be ill-formed if written using the substituted arguments. Only invalid types and expressions in the immediate context of the function type and its template parameter types can result in a deduction failure. [<em>Note:</em> The evaluation of the substituted types and expressions can result in side effects such as the instantiation of the class template specializations and/or function template specializations, the generation of implicitly-defined functions, et. Such side effects are not in the \"immediate context\" and can result in the program being ill-formed. - <em>end note</em>]</p>\n</blockquote>\n<p>The thing that's problematic here is the \"immediate context\". You are doing two things here that remove your error from the immediate context.</p>\n<ul>\n<li>The error occurs during evaluation of the default argument expression of <code>checker</code>. Although this evaluation is triggered by the occurrence of <code>checker&lt;T,K&gt;</code> in the argument list of <code>test</code>, which gets instantiated for overload resolution, it isn't the immediate context. You can try this out by changing the definition of <code>base</code> to <code>template &lt;typename T, typename U&gt; struct base {};</code>. This makes the error in the instantiation of <code>base</code> go away, replacing it with an error in the context of the default argument expression (\"does not have a member called <code>value</code>\"). But SFINAE will still not trigger; you'll still get a hard error.</li>\n<li><p>The error occurs in the instantiation of the definition of <code>base</code>. This is yet another step removed from overload resolution. For the same reason, putting a member into <code>base</code> with type <code>T::foobar</code> doesn't work for finding out whether <code>T</code> contains a type <code>foobar</code>: the definition of <code>base</code> is not a SFINAE context anymore. You can see that this alone is an error by removing <code>checker</code> from the picture, e.g. doing this:</p>\n<p>template  struct base: public id, public id {\n    typedef void type;\n};\ntemplate  struct is_different {\n  struct true_ { char c[1]; };  // I don't like sizeof(reference type),\n  struct false_ { char c[2]; }; // makes me nervous.\n  template \n  static true_ test(typename base::type*);\n  template \n  static false_ test(...);</p>\n<p>static const bool value = sizeof(test(0)) == sizeof(true_);\n};</p></li>\n</ul>\n<p>Now the <code>base</code> instantiation doesn't hide behind a template default argument expression, but is right there in the signature, but you'll still get an error.</p>\n", "OwnerUserId": "8922", "LastEditorUserId": "8922", "LastEditDate": "2013-10-22T15:02:08.550", "Id": "19516701", "Score": "1", "CreationDate": "2013-10-22T11:33:11.847", "LastActivityDate": "2013-10-22T15:02:08.550"}, "19516159": {"CommentCount": "1", "ViewCount": "425", "PostTypeId": "1", "LastEditorUserId": "678093", "CreationDate": "2013-10-22T11:07:20.170", "LastActivityDate": "2015-10-15T07:30:07.873", "Title": "Why I can't use inheritance's error as SFINAE?", "AcceptedAnswerId": "19516701", "LastEditDate": "2015-10-15T07:30:07.873", "Id": "19516159", "Score": "1", "Body": "<p>I have this code, but it does not compile:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n#include &lt;cassert&gt;\n\n\ntemplate&lt; class &gt; struct id{};\ntemplate&lt; class U, class V&gt; struct base: public id&lt;U&gt;, public id&lt;V&gt;\n{\n    static const bool value = true;\n};\n\ntemplate&lt; class U, class V&gt;\nstruct is_different\n{\n\n  typedef char (&amp;true_)[1];\n  typedef char (&amp;false_)[2];\n\n  template&lt; class T, class K, bool  = base&lt;T,K&gt;::value &gt;\n  struct checker;\n\n\n\n  template&lt; class T, class K&gt;\n  static true_  test( checker&lt;T,K&gt;* );\n\n  template&lt; class , class &gt;\n  static false_  test(...);\n\n\n  static const bool value = sizeof( test&lt;U,V&gt;(0) ) == sizeof(true_);\n\n};\n\n\nint main (void) \n{\n    bool b1 = is_different&lt;int,float&gt;::value;\n    bool b2 = is_different&lt;int,int&gt;::value; // &lt;--- error\n\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; b1 &lt;&lt; '\\n'\n                                &lt;&lt; b2  &lt;&lt; '\\n';\n    return 0;       \n}\n</code></pre>\n<p>error:</p>\n<pre><code>main.cpp: In instantiation of \u2018struct base&lt;int, int&gt;\u2019:\nmain.cpp:25:17:   required by substitution of \u2018template&lt;class T, class K&gt; static char (&amp; is_different&lt;U, V&gt;::test(is_different&lt;U, V&gt;::checker&lt;T, K&gt;*))[1] [with T = T; K = K; U = int; V = int] [with T = int; K = int]\u2019\nmain.cpp:31:41:   required from \u2018const bool is_different&lt;int, int&gt;::value\u2019\nmain.cpp:39:38:   required from here\nmain.cpp:7:36: error: duplicate base type \u2018id&lt;int&gt;\u2019 invalid\n template&lt; class U, class V&gt; struct base: public id&lt;U&gt;, public id&lt;V&gt;\n</code></pre>\n<p>Why I can't use duplicate inheritance's failure as SFINAE?</p>\n", "Tags": "<c++><multiple-inheritance><sfinae>", "OwnerUserId": "2614655", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19516159_19516701_0": {"section_id": 300, "quality": 0.8955223880597015, "length": 60}}, "n3337": {"so_19516159_19516701_0": {"section_id": 291, "quality": 0.8955223880597015, "length": 60}}, "n4659": {"so_19516159_19516701_0": {"section_id": 307, "quality": 0.835820895522388, "length": 56}}}});