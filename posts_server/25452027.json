post_cb({"25452027": {"CommentCount": "6", "ViewCount": "294", "CreationDate": "2014-08-22T16:54:11.493", "LastActivityDate": "2014-08-22T17:04:56.103", "Title": "Space(s) before/after the scope resolution operator", "AcceptedAnswerId": "25452099", "PostTypeId": "1", "Id": "25452027", "Score": "-2", "Body": "<p>What rule in the C++ language allows spaces to appear before of after the scope resolution operator <code>::</code> ?</p>\n<p>i.e. the following <a href=\"http://coliru.stacked-crooked.com/a/665b7d48e6f238d6\" rel=\"nofollow\">compiles without a warning</a> :</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main ()\n{\n    std::    string s = \"Hello\";\n    std::    cout &lt;&lt; s &lt;&lt; std     ::endl;\n}\n</code></pre>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "3510483", "AnswerCount": "3"}, "25452161": {"ParentId": "25452027", "CommentCount": "0", "CreationDate": "2014-08-22T17:03:30.143", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "25452161", "Score": "3", "Body": "<p>It will be enough to cite two quotes from the C++ Standard</p>\n<blockquote>\n<p id=\"so_25452027_25452161_0\">2.7 Tokens [lex.token] 1 There are five kinds of tokens: identifiers, keywords, literals,18 operators, and other separators. Blanks,\n  horizontal and vertical tabs, newlines, formfeeds, and comments\n  (collectively, \u201cwhite space\u201d), as described below, are ignored except\n  as they serve to separate tokens.</p>\n<p id=\"so_25452027_25452161_1\">2.13 Operators and punctuators  1 The lexical representation of C++ programs includes a number of preprocessing tokens which are used in\n  the syntax of the preprocessor or are converted into tokens for\n  operators and punctuators</p>\n<p id=\"so_25452027_25452161_2\">preprocessing-op-or-punc: one of</p>\n</blockquote>\n<pre><code>::\n</code></pre>\n<blockquote>\n<p id=\"so_25452027_25452161_3\"><strong>Each preprocessing-op-or-punc is converted to a single token</strong> in\n  translation phase 7::</p>\n</blockquote>\n", "LastActivityDate": "2014-08-22T17:03:30.143"}, "25452099": {"ParentId": "25452027", "CommentCount": "1", "CreationDate": "2014-08-22T16:58:39.653", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "25452099", "Score": "6", "Body": "<p>In general, you can put as much space as you like between tokens. In some cases, space is necessary (e.g. to separate identifiers); in others, it's optional (e.g. between identifiers and operators).</p>\n<p>This is described in C++11 2.7:</p>\n<blockquote>\n<p id=\"so_25452027_25452099_0\">Blanks,\n  horizontal and vertical tabs, newlines, formfeeds, and comments (collectively, \u201cwhite space\u201d), as described\n  below, are ignored except as they serve to separate tokens. [ <em>Note:</em> Some white space is required to separate otherwise adjacent identifiers, keywords, numeric literals, and alternative tokens containing alphabetic\n  characters. \u2014 <em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2014-08-22T16:58:39.653"}, "bq_ids": {"n4140": {"so_25452027_25452099_0": {"section_id": 5327, "quality": 0.918918918918919, "length": 34}, "so_25452027_25452161_3": {"section_id": 5338, "quality": 1.0, "length": 7}, "so_25452027_25452161_0": {"section_id": 5327, "quality": 0.9, "length": 27}, "so_25452027_25452161_1": {"section_id": 5338, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_25452027_25452099_0": {"section_id": 5124, "quality": 0.918918918918919, "length": 34}, "so_25452027_25452161_3": {"section_id": 5135, "quality": 1.0, "length": 7}, "so_25452027_25452161_0": {"section_id": 5124, "quality": 0.9, "length": 27}, "so_25452027_25452161_1": {"section_id": 5135, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_25452027_25452099_0": {"section_id": 6748, "quality": 0.918918918918919, "length": 34}, "so_25452027_25452161_3": {"section_id": 6759, "quality": 1.0, "length": 7}, "so_25452027_25452161_0": {"section_id": 6748, "quality": 0.9, "length": 27}, "so_25452027_25452161_1": {"section_id": 6759, "quality": 0.7777777777777778, "length": 14}}}, "25452156": {"ParentId": "25452027", "CommentCount": "0", "CreationDate": "2014-08-22T17:03:06.747", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "25452156", "Score": "4", "Body": "<p>Syntax rules for the scope resolution operator are as follows:</p>\n<pre><code>:: &lt;identifier&gt;\n&lt;class-name&gt; :: &lt;identifier&gt;\n&lt;namespace&gt; :: &lt;identifier&gt;\n&lt;enum class&gt; :: &lt;identifier&gt;\n&lt;enum struct&gt; :: &lt;identifier&gt;\n</code></pre>\n<p>In all five cases you can see that the <code>::</code> operator is used in the same way that other unary and binary operators of C++ are used, which means that the general rules apply to it as well. Namely, you are allowed to have as many whitespace characters between these tokens as you consider necessary.</p>\n", "LastActivityDate": "2014-08-22T17:03:06.747"}});