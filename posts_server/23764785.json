post_cb({"bq_ids": {"n4140": {"so_23764785_23764853_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 1567}, "so_23764785_23764853_1": {"length": 6, "quality": 1.0, "section_id": 712}}, "n3337": {"so_23764785_23764853_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 1562}, "so_23764785_23764853_1": {"length": 6, "quality": 1.0, "section_id": 701}}, "n4659": {"so_23764785_23764853_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 1716}, "so_23764785_23764853_1": {"length": 6, "quality": 1.0, "section_id": 741}}}, "23764853": {"Id": "23764853", "PostTypeId": "2", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/container/vector/pop_back\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/pop_back</a></p>\n<blockquote>\n<p id=\"so_23764785_23764853_0\">No iterators or references except for <code>back()</code> and <code>end()</code> are invalidated.</p>\n</blockquote>\n<p>Therefore it may not reallocate. There is no <code>C++11</code> tag on that page, which implies this is also true in 03. I will dig up the section references and edit them in for completeness.</p>\n<p><strong>Edit:</strong> Even better: From <code>C++03</code>: [lib.container.requirements] (23.1), paragraph 10:</p>\n<blockquote>\n<p id=\"so_23764785_23764853_1\">no <code>erase()</code>, <code>pop_back()</code> or <code>pop_front()</code> function throws an exception.</p>\n</blockquote>\n<p>Same wording at 23.2.1/10 in N3337 (~<code>C++11</code>).</p>\n", "LastEditorUserId": "1171191", "LastActivityDate": "2014-05-20T16:22:44.817", "Score": "7", "CreationDate": "2014-05-20T16:03:38.250", "ParentId": "23764785", "CommentCount": "5", "OwnerUserId": "1171191", "LastEditDate": "2014-05-20T16:22:44.817"}, "23778143": {"Id": "23778143", "PostTypeId": "2", "Body": "<p>The comments are not really addressing it. Clearly, if std::vector is prohibited to use anything except std::allocator, and if std::allocator is prohibited to be extended with additional methods, then resizing with same base address is impossible, which makes it impossible to decrease capacity because iterators would be invalidated.</p>\n<p>Closest info I could find about reallocation was a stackoverflow comment on <a href=\"https://stackoverflow.com/questions/3105001/why-is-there-no-reallocation-functionality-in-c-allocators\">Why is there no reallocation functionality in C++ allocators?</a> saying</p>\n<p>\"There is nothing stopping std::vector from doing that in some cases (e.g., it knows its using the standard allocator). The standard library is allowed to use knowledge of the underlying system. \u2013  KeithB Jun 23 '10 at 21:39\" (no references mentioned, though)</p>\n<p>There have been submitted ideas for adding realloc to std::allocator, but they have both been rejected:</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1953.html\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1953.html</a></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2045.html\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2045.html</a></p>\n<p>The papers don't explicitly state that std::allocator is prohibited to extend std::allocator, though - they only state that it doesn't need to. They also don't explicitly state that std::vector is prohibited to use API calls to the underlying system... So no real info there either.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-21T08:41:09.327", "Score": "1", "CreationDate": "2014-05-21T08:41:09.327", "ParentId": "23764785", "CommentCount": "0", "OwnerUserId": "2838737", "LastEditDate": "2017-05-23T10:28:21.260"}, "23764785": {"ViewCount": "838", "Body": "<p>According to the C++ standard, is <code>std::vector&lt;T&gt;::pop_back()</code> ever allowed to reduce the capacity of the vector?</p>\n<p>I am asking because I would like to have a guarantee, that the following code will <strong>not</strong> throw an <em>out of memory</em> exception:</p>\n<pre><code>my_vec.pop_back();\nif (...)\n    my_vec.push_back(...);\n</code></pre>\n<p>Assume that <code>my_vec</code> is an <code>std::vector&lt;int&gt;</code>.</p>\n<p>I guess there are three possibilities:</p>\n<ol>\n<li><p>Yes, this can happen according to both C++03 and C++11.</p></li>\n<li><p>No, C++11 prohibits this (but C++03 does not).</p></li>\n<li><p>No, both C++03 and C++11 prohibits this.</p></li>\n</ol>\n<p>Yes, my question is related to <a href=\"https://stackoverflow.com/questions/1536753/does-stdvector-pop-back-change-vectors-capacity\">Does std::vector.pop_back() change vector's capacity?</a>, but my question is specifically about what the standard guarantees.</p>\n<p>Note also that the accepted answer in <a href=\"https://stackoverflow.com/questions/1536753/does-stdvector-pop-back-change-vectors-capacity\">Does std::vector.pop_back() change vector's capacity?</a> is mostly about how to reduce the capacity of a vector, not about when it is guaranteed <strong>not</strong> to happen, and offers no evidence for its claim about pop_back().</p>\n", "Title": "Can pop_back() ever reduce the capacity of a vector? (C++)", "CreationDate": "2014-05-20T16:00:19.997", "LastActivityDate": "2014-05-21T08:41:09.327", "CommentCount": "7", "LastEditDate": "2017-05-23T12:31:21.340", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "23764785", "Score": "4", "OwnerUserId": "1698548", "Tags": "<c++><c++11><vector><capacity>", "AnswerCount": "3"}, "23764856": {"Id": "23764856", "PostTypeId": "2", "Body": "<p>No. The only way to shrink a vector's capacity is the swap trick, as shown <a href=\"https://stackoverflow.com/questions/1536753/does-stdvector-pop-back-change-vectors-capacity\">here</a>. And also the <code>C++11</code> way I mention bellow.</p>\n<p>Also, as the <a href=\"http://www.cplusplus.com/reference/vector/vector/pop_back/\" rel=\"nofollow noreferrer\">ref</a> says:</p>\n<blockquote>\n<p id=\"so_23764785_23764856_0\">Removes the last element in the vector,<br>\n      effectively reducing the container size by one.</br></p>\n</blockquote>\n<p>In other words, it changes the <strong>size</strong> of the vector and <strong>not</strong> its <strong>capacity</strong>.</p>\n<p>Take a look at the <em>iterator validity</em>:</p>\n<blockquote>\n<p id=\"so_23764785_23764856_1\">The end iterator and any iterator, pointer and reference<br>\n      referring to the removed element are invalidated.<br>\n      Iterators, pointers and references referring to other<br>\n      elements that have not been removed are guaranteed to keep<br>\n      referring to the same elements they were referring to before the call.</br></br></br></br></p>\n</blockquote>\n<p>In <code>C++11</code> you could use <code>std::vector&lt;&gt;::shrink_to_fit()</code> in order to change the capacity (for more see the 1st link). (tnx Psyduck). Interesting comments below the answer, but this question is not about the above method, so if interested, read the comments.</p>\n<p>Notice that even this method is not guaranteed to reduce the <code>capacity</code>, as the <a href=\"http://www.cplusplus.com/reference/vector/vector/shrink_to_fit/\" rel=\"nofollow noreferrer\">ref</a> says:</p>\n<blockquote>\n<p id=\"so_23764785_23764856_2\">Requests the container to reduce its capacity to fit its size.</p>\n<p id=\"so_23764785_23764856_3\">The request is non-binding, and the container implementation is free to optimize otherwise &gt;and leave the vector with a capacity greater than its size.</p>\n<p id=\"so_23764785_23764856_4\">This may cause a reallocation, but has no effect on the vector size and cannot alter its &gt;elements.</p>\n</blockquote>\n<p>It would be too strange that this function is not guaranteed to reduce <code>capacity</code> and <code>pop_back</code> does, while the ref of the second does <strong>not</strong> mentions anything relevant.</p>\n<p>The way I see it, since the ref does not mention <code>capacity</code>, this means that it's not needed to, which means, that <code>capacity</code> remains the same.</p>\n<p>An interesting example is this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n  const int N = 1000000;\n\n  std::vector&lt;int&gt; v1;\n  v1.reserve(N);\n  for (int i = 0; i &lt; N; ++i) {\n    v1.push_back(i);\n  }\n\n  std::cout &lt;&lt; v1.capacity() &lt;&lt; \" and size = \" &lt;&lt; v1.size() &lt;&lt; std::endl;\n\n  for (int i = 0; i &lt; N - 2; ++i) {\n    v1.pop_back();\n  }\n\n  std::cout &lt;&lt; v1.capacity() &lt;&lt; \" and size = \" &lt;&lt; v1.size() &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>1000000 and size = 1000000\n1000000 and size = 2\n</code></pre>\n<p>where <code>capacity</code> is clearly not reduced.</p>\n<p>[EDIT]</p>\n<p>Another relevant <a href=\"https://stackoverflow.com/questions/1111078/reduce-the-capacity-of-an-stl-vector\">question</a>, which could also be flagged as a duplicate has some good answers. Here are some interesting ones:</p>\n<p>1)</p>\n<blockquote>\n<p id=\"so_23764785_23764856_5\">Go look at Scott Meyers Effective STL item 17. (some ref that the OP looks)\n  Basically you can't directly reduce the storage size of a std::vector. The \"trick\" is to &gt; create a new container of the right size, copy the data and swap that with the current container.</p>\n</blockquote>\n<p>2)</p>\n<blockquote>\n<p id=\"so_23764785_23764856_6\">No, you cannot reduce the capacity of a vector without copying.</p>\n</blockquote>\n<p>3)</p>\n<blockquote>\n<p id=\"so_23764785_23764856_7\">I'm not saying that GCC couldn't have some method for doing what you want without a copy, &gt; but it would be tricky to implement (I think) because vectors need to use an Allocator object to allocate and deallocate memory, and the interface for an Allocator doesn't include a reallocate() method. I don't think it would be impossible to do, but it might be tricky.</p>\n</blockquote>\n<p>I suggest reading the link for more.</p>\n<p>[EDIT.2]</p>\n<p>This <a href=\"https://stackoverflow.com/questions/7829018/can-we-rely-on-the-reduce-capacity-trick\">question</a> also supports that:</p>\n<p>Q: Can <code>pop_back()</code> ever reduce the <code>capacity</code>?</p>\n<p>A: <strong>NO</strong>.</p>\n<p>When you can't rely on the appropriate methods for reducing capacity (in terms of what you read in the standard), you can't expect <code>pop_back()</code> to do something like that.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-20T17:48:47.913", "Score": "4", "CreationDate": "2014-05-20T16:03:44.990", "ParentId": "23764785", "CommentCount": "15", "OwnerUserId": "2411320", "LastEditDate": "2017-05-23T12:23:17.147"}});