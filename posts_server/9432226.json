post_cb({"9432252": {"Id": "9432252", "PostTypeId": "2", "Body": "<p>In C++ case labels are <em>constant</em> expressions, not expressions in general. You need a chain of if-then-else statements to do what you are trying to do.</p>\n<p>Alternatively, you can enumerate the values in the switch. This runs marginally faster (though it does not matter in cases like yours), but it is considerably less readable:</p>\n<pre><code>switch(score) {\n    case 0: cout &lt;&lt; \"f\"; break;\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10: cout &lt;&lt; \"e\"; break;\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25: cout &lt;&lt; \"c\"; break;\n    // ...and so on, you get the idea...\n\n}\n</code></pre>\n", "LastEditorUserId": "335858", "LastActivityDate": "2014-06-10T09:09:20.100", "Score": "25", "CreationDate": "2012-02-24T14:21:18.500", "ParentId": "9432226", "CommentCount": "4", "OwnerUserId": "335858", "LastEditDate": "2014-06-10T09:09:20.100"}, "9432237": {"Id": "9432237", "PostTypeId": "2", "Body": "<p>You can fix this problem by using a series of <code>if</code>/<code>else if</code> statements. Switch/case cannot be used like this in C++.</p>\n", "LastActivityDate": "2012-02-24T14:20:21.117", "CommentCount": "0", "CreationDate": "2012-02-24T14:20:21.117", "ParentId": "9432226", "Score": "14", "OwnerUserId": "749284"}, "35097025": {"Id": "35097025", "PostTypeId": "2", "Body": "<p>I know this is an old questiion, but since <code>switch</code> statements are in fact wrappers around labels, I find <code>goto</code> may be of (good) use here. </p>\n<pre><code>    int value = 40;\n    if (value &lt; 10) {\n        std::cout &lt;&lt; \"value &lt; 10\" &lt;&lt; std::endl;\n        goto end;\n    }\n    if (value &lt; 50) {\n        std::cout &lt;&lt; \"value &lt; 50\" &lt;&lt; std::endl;\n        goto end;\n    }\n    if (value &gt; 30) {\n        std::cout &lt;&lt; \"value &gt; 30\" &lt;&lt; std::endl;\n        goto end;\n    }\nend:\n    // resume\n</code></pre>\n<p>This way, you can omit all the <code>else</code>s and keep it compact.\nYou ought to be careful when using <code>goto</code> though (in general).</p>\n", "LastActivityDate": "2016-01-30T01:40:58.743", "CommentCount": "1", "CreationDate": "2016-01-30T01:40:58.743", "ParentId": "9432226", "Score": "0", "OwnerUserId": "2599618"}, "29577115": {"Id": "29577115", "PostTypeId": "2", "Body": "<p>I had the same problem with a score based problem and while the \" if/elseif \"statements were good to use, for intervals i found that the best option (for me at least because i like how it looks and it's easier for me as a beginner to see my mistakes) is \" 1 ... 10 \". but don't forget to use a space between the number and the dots or the program will think that your interval is a number and u will get an error \"2 many decimal dots...\". Hope it helps.</p>\n<pre><code>int score;\n\nint main()\n{\n    cout&lt;&lt;\"Enter score\"&lt;&lt;endl;\n    cin&gt;&gt;score;\n\n  switch(score){\n    case 100:\n        cout&lt;&lt;\"Your score is Perfect\"&lt;&lt;endl;\n    break;\n    case 90 ... 99:\n        cout&lt;&lt;\"You got A\"&lt;&lt;endl;\n    break;\n    case 80 ... 89:\n        cout&lt;&lt;\"You got B\"&lt;&lt;endl;\n        break;\n    case 70 ... 79:\n        cout&lt;&lt;\"You got C\"&lt;&lt;endl;\n        break;\n    case 60 ... 69:\n        cout&lt;&lt;\"You got D\"&lt;&lt;endl;\n        break;\n    case 50 ... 59:\n        cout&lt;&lt;\"You got E\"&lt;&lt;endl;\n        break;\n    case 0 ... 49:\n        cout&lt;&lt;\"You got F\"&lt;&lt;endl;}\n\n  }\n</code></pre>\n", "LastEditorUserId": "4776796", "LastActivityDate": "2015-04-11T11:59:11.953", "Score": "2", "CreationDate": "2015-04-11T11:01:09.697", "ParentId": "9432226", "CommentCount": "4", "OwnerUserId": "4776796", "LastEditDate": "2015-04-11T11:59:11.953"}, "bq_ids": {"n4140": {"so_9432226_10751009_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 3890}, "so_9432226_10751009_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3890}}, "n3337": {"so_9432226_10751009_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 3101}, "so_9432226_10751009_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3750}}, "n4659": {"so_9432226_10751009_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 4776}, "so_9432226_10751009_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4776}}}, "9432261": {"Id": "9432261", "PostTypeId": "2", "Body": "<p>That's simply not how switch works. It only takes single values. You'll have to use if-elseif blocks</p>\n", "LastActivityDate": "2012-02-24T14:21:35.443", "CommentCount": "5", "CreationDate": "2012-02-24T14:21:35.443", "ParentId": "9432226", "Score": "2", "OwnerUserId": "86515"}, "35460297": {"Id": "35460297", "PostTypeId": "2", "Body": "<p>It can be done using a <code>std::map</code> with <code>switch</code>:</p>\n<pre><code>enum Interval {\n   One,\n   Two,\n   Three,\n   NotFound };\n\n// [0,10[ is One, [10,30[ is Two, [30,55[ is Three\nstd::map&lt;int,Interval&gt; imap { \n    { { 0, One }, \n      { 10, Two },\n      { 30, Three },\n      { 55, NotFound } };\nInterval ivalue = NotFound;\nauto f = imap.lower_bound( value );\nif( f != imap.end() ) ivalue = f-&gt;second;\nswitch( ivalue ) {\n    case One : ...\n    case Two : ...\n    case Three : ...\n    default: ...\n}\n</code></pre>\n", "LastActivityDate": "2016-02-17T15:04:14.000", "CommentCount": "1", "CreationDate": "2016-02-17T15:04:14.000", "ParentId": "9432226", "Score": "8", "OwnerUserId": "432358"}, "9432267": {"Id": "9432267", "PostTypeId": "2", "Body": "<p>In C++ a switch statement can only match constant integer values:</p>\n<pre><code>switch (i)\n{\n    case 1:\n    //... stuff\n    break;\n    case 2:\n    //... stuff\n    break;\n    default:\n    //... stuff\n}\n</code></pre>\n", "LastEditorUserId": "1171191", "LastActivityDate": "2014-11-27T10:14:09.247", "Score": "5", "CreationDate": "2012-02-24T14:21:52.760", "ParentId": "9432226", "CommentCount": "7", "OwnerUserId": "1171191", "LastEditDate": "2014-11-27T10:14:09.247"}, "12629156": {"Id": "12629156", "PostTypeId": "2", "Body": "<p>There's a <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Case-Ranges.html\">GCC extension</a> that does exactly what you want.</p>\n", "LastActivityDate": "2012-09-27T19:59:42.240", "CommentCount": "0", "CreationDate": "2012-09-27T19:59:42.240", "ParentId": "9432226", "Score": "5", "OwnerUserId": "309483"}, "42331563": {"Id": "42331563", "PostTypeId": "2", "Body": "<p><strong><code>std::map::lower_bound</code> + C++11 lambdas</strong></p>\n<p><a href=\"https://stackoverflow.com/a/35460297/895245\">https://stackoverflow.com/a/35460297/895245</a> mentioned <code>lower_bound</code>, but we can also get rid of the <code>enum</code> there with lambdas (or inheritance if you don't have it).</p>\n<pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n    for (auto i = -1; i &lt; 8; ++i) {\n        std::cout &lt;&lt; i &lt;&lt; std::endl;\n        auto m = std::map&lt;int,std::function&lt;void()&gt;&gt; {\n            {0, [](){ std::cout &lt;&lt; \"too small\" &lt;&lt; std::endl;}},\n            {2, [](){ std::cout &lt;&lt; \"[0,2)\" &lt;&lt; std::endl;}},\n            {5, [](){ std::cout &lt;&lt; \"[2,5)\" &lt;&lt; std::endl;}},\n            {7, [](){ std::cout &lt;&lt; \"[5,7)\" &lt;&lt; std::endl;}},\n        };\n        auto it = m.upper_bound(i);\n        if (it == m.end()) {\n            std::cout &lt;&lt; \"too large\" &lt;&lt; std::endl;\n        } else {\n            it-&gt;second();\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>-1\ntoo small\n\n0\n[0,2)\n\n1\n[0,2)\n\n2\n[2,5)\n\n3\n[2,5)\n\n4\n[2,5)\n\n5\n[5,7)\n\n6\n[5,7)\n\n7\ntoo large\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2017-02-19T20:32:08.640", "Score": "2", "CreationDate": "2017-02-19T19:06:55.910", "ParentId": "9432226", "CommentCount": "0", "OwnerUserId": "895245", "LastEditDate": "2017-05-23T10:30:51.207"}, "9432226": {"ViewCount": "96599", "Body": "<p>When I try to compile I get this error:</p>\n<pre>\n1&gt;------ Build started: Project: snake, Configuration: Debug Win32 ------\n1&gt;  exercise.cpp\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(13): error C2059: syntax error : '&gt;='\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(16): error C2059: syntax error : '&gt;='\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(19): error C2059: syntax error : '&gt;='\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(22): error C2059: syntax error : '&gt;='\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(25): error C2059: syntax error : '&gt;'\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(28): error C2059: syntax error : '=='\n1&gt;c:\\users\\robin\\documents\\visual studio 2010\\projects\\snake\\snake\\exercise.cpp(34): warning C4065: switch statement contains 'default' but no 'case' labels\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n</pre>\n<p>Code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int score;\n\n    //Vraag de score\n    cout &lt;&lt; \"Score:\";\n    cin &gt;&gt; score;\n\n    //Switch\n    switch(score){\n        case &gt;= 100:\n            cout &lt;&lt; \"a\";\n            break;\n        case &gt;= 50:\n            cout &lt;&lt; \"b\";\n            break;\n        case &gt;= 25:\n            cout &lt;&lt; \"c\";\n            break;\n        case &gt;= 10:\n            cout &lt;&lt; \"d\";\n            break;\n        case &gt; 0:\n            cout &lt;&lt; \"e\";\n            break;\n        case == 0:\n            cout &lt;&lt; \"f\";\n            break;\n        default:\n            cout &lt;&lt; \"BAD VALUE\";\n            break;\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>How can I fix this problem? It's a console application, Win32 and my IDE is Windows Enterprise C++ 2010.</p>\n<p>I'm learning from <em>Beginning C++ Through Game Programming</em>.</p>\n", "AcceptedAnswerId": "9432252", "Title": "How do I select a range of values in a switch statement?", "CreationDate": "2012-02-24T14:19:05.090", "Id": "9432226", "CommentCount": "1", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-02-24T14:40:51.517", "LastEditorUserId": "33732", "LastActivityDate": "2017-03-27T21:25:40.517", "Score": "15", "OwnerUserId": "1116134", "Tags": "<c++><switch-statement>", "AnswerCount": "17"}, "28423937": {"Id": "28423937", "PostTypeId": "2", "Body": "<p>This is what worked for me. dividing the mark by 10 and then setting case 10 and 9 to display an \"A\"(this will display a \"A\" for any value between 90-100. Then case 8 to display \"B\", then case 7 will display a \"C\" for the values from 70-79 and so on.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nmain ()\n{\n    int mark;\n    cout &lt;&lt; \"enter your mark: \";\n    cin &gt;&gt; mark;\n    switch (mark/10)\n    {\n        case 10: case 9: cout &lt;&lt; \"A\"; break;\n        case 8: cout &lt;&lt; \"B\"; break;\n        case 7: cout &lt;&lt; \"C\"; break;\n        case 6: cout &lt;&lt; \"D\"; break;\n        case 5: cout &lt;&lt; \"PASS\"; break;\n        default: cout &lt;&lt; \"FAIL\"; break;\n    }\n}\n</code></pre>\n", "LastActivityDate": "2015-02-10T04:08:05.483", "CommentCount": "0", "CreationDate": "2015-02-10T04:08:05.483", "ParentId": "9432226", "Score": "1", "OwnerUserId": "4548872"}, "43056758": {"Id": "43056758", "PostTypeId": "2", "Body": "<p>Here's a way which I hope is expressive and simple to follow.</p>\n<p>You may be surprised by how far gcc/clang etc can optimise the code it generates. I would expect it to be at least as efficient as a switch/case.</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;class Value&gt;\nstruct switcher\n{\n    constexpr switcher(Value const&amp; value) : value_(value) {}\n    constexpr switcher(Value const&amp; value, bool enabled) : value_(value), enabled(enabled) {}\n\n    template&lt;class From, class To, class F&gt;\n    constexpr auto in_range(From&amp;&amp; from, To&amp;&amp; to, F&amp;&amp; f)\n    {\n        if (enabled and (from &lt;= value_ and value_ &lt;= to))\n        {\n            f();\n            return switcher(value_, false);\n        }\n        else {\n            return *this;\n        }\n    };\n\n    template&lt;class F&gt;\n    constexpr auto otherwise(F&amp;&amp; f)\n    {\n        if (enabled)\n            f();\n    }\n\n    Value const&amp; value_;\n    const bool enabled = true;\n};\n\ntemplate&lt;class Value&gt;\nconstexpr auto decision(Value const&amp; value)\n{\n    return switcher&lt;Value&gt;(value);\n}\n\nvoid test(int x)\n{\n    decision(x)\n            .in_range(0, 10, [&amp;] { std::cout &lt;&lt; x &lt;&lt; \" maps to option A\\n\"; })\n            .in_range(11, 20, [&amp;] { std::cout &lt;&lt; x &lt;&lt; \" maps to option B\\n\"; })\n            .otherwise([&amp;] { std::cout &lt;&lt; x &lt;&lt; \" is not covered\\n\"; });\n}\n\nint main(int argc, char **argv) {\n\n    test(5);\n    test(14);\n    test(22);\n}\n</code></pre>\n", "LastActivityDate": "2017-03-27T21:25:40.517", "CommentCount": "0", "CreationDate": "2017-03-27T21:25:40.517", "ParentId": "9432226", "Score": "0", "OwnerUserId": "2015579"}, "10751009": {"Id": "10751009", "PostTypeId": "2", "Body": "<p>The standard does not allow for this:</p>\n<blockquote>\n<h3>6.4.2 The switch statement [stmt.switch]</h3>\n<p id=\"so_9432226_10751009_0\">[...] Any statement within the switch statement can be labeled with one or more case labels as follows:</p>\n<p id=\"so_9432226_10751009_1\"><code>case constant-expression :</code></p>\n<p id=\"so_9432226_10751009_2\">where the constant-expression shall be an integral constant expression (5.19).</p>\n</blockquote>\n<p>In other words, you can only use case-values that expand into a single, integral, \"hard\" compile time constant (e.g. <code>case 5+6:</code>, <code>enum {X = 3}; ... case X*X:</code>).</p>\n<p>The way around this is to use <code>if</code>-statements. E.g., to replace</p>\n<pre><code>switch (x)\ncase 0..100:\n</code></pre>\n<p>you'd instead</p>\n<pre><code>if (x&gt;=0 &amp;&amp; x&lt;=100)\n</code></pre>\n<p>.</p>\n", "LastActivityDate": "2012-05-25T08:25:20.400", "CommentCount": "0", "CreationDate": "2012-05-25T08:25:20.400", "ParentId": "9432226", "Score": "3", "OwnerUserId": "76722"}, "35821147": {"Id": "35821147", "PostTypeId": "2", "Body": "<p>Something like this?</p>\n<pre><code>case 'A'..'Z' where a not in ['I','L','O']:\n</code></pre>\n<p>Unfortunately no compiler I know of implements that particular extension, though GCC has can do ranges as other answers pointed out. For portability you can cut and paste this DWTFYW licensed snippet. If you're using a custom enum you might resort to code generation to make something similar.</p>\n<pre><code>#define CASE_NUMBER \\\n case'0':case'1':case'2':case'3':case'4':\\\n case'5':case'6':case'7':case'8':case'9'\n#define CASE_ALPHA_LOWER \\\n case'a':case'b':case'c':case'd':\\\n case'e':case'f':case'g':case'h':\\\n case'i':case'j':case'k':case'l':\\\n case'm':case'n':case'o':case'p':\\\n case'q':case'r':case's':case't':\\\n case'u':case'v':case'w':case'x':\\\n case'y':case'z'\n#define CASE_ALPHA_UPPER \\\n case'A':case'B':case'C':case'D':\\\n case'E':case'F':case'G':case'H':\\\n case'I':case'J':case'K':case'L':\\\n case'M':case'N':case'O':case'P':\\\n case'Q':case'R':case'S':case'T':\\\n case'U':case'V':case'W':case'X':\\\n case'Y':case'Z'\n#define CASE_ALPHA CASE_ALPHA_UPPER:CASE_ALPHA_LOWER\n#define CASE_ALPHANUM CASE_ALPHA:CASE_NUMBER\n</code></pre>\n<p>If you access to GHCI such as the online version at <a href=\"https://ghc.io/\" rel=\"nofollow\">https://ghc.io/</a> you might just generate what you need and paste that into a header e.g.</p>\n<pre><code>foldl (++) \"\" [\"case\" ++ show x ++ \":\" | x &lt;- ['A'..'Z'], not $ x `elem` ['I','L','O']]\n</code></pre>\n", "LastEditorUserId": "100089", "LastActivityDate": "2016-03-05T23:50:47.897", "Score": "0", "CreationDate": "2016-03-05T23:22:23.103", "ParentId": "9432226", "CommentCount": "0", "OwnerUserId": "100089", "LastEditDate": "2016-03-05T23:50:47.897"}, "9432477": {"Id": "9432477", "PostTypeId": "2", "Body": "<p>Switch case statements are a substitute for long if statements that compare a variable to several \"integral\" values (\"integral\" values are simply values that can be expressed as an integer, such as the value of a char). The condition of a switch statement is a value. The case says that if it has the value of whatever is after that case then do whatever follows the colon. The break is used to break out of the case statements.</p>\n<p>Therefore, you cannot use such conditional statements in case.</p>\n<p><a href=\"http://cplusplus.com/doc/tutorial/control/#switch\" rel=\"nofollow\">The selective structure: switch</a></p>\n", "LastActivityDate": "2012-02-24T14:37:08.567", "CommentCount": "0", "CreationDate": "2012-02-24T14:37:08.567", "ParentId": "9432226", "Score": "1", "OwnerUserId": "732347"}, "32760446": {"Id": "32760446", "PostTypeId": "2", "Body": "<p>You can do the following:</p>\n<pre><code>//summarize the range to one value\nIf score &lt; 0\n    score = -1\n\nswitch(score){\ncase 1:\n    //...\n    break;\ncase 2:\n    //...\n    break;\ncase -1:    //complete neg. range\n    //...\n    break;\n//...\n</code></pre>\n<p>}</p>\n", "LastActivityDate": "2015-09-24T11:42:45.823", "CommentCount": "0", "CreationDate": "2015-09-24T11:42:45.823", "ParentId": "9432226", "Score": "1", "OwnerUserId": "5371883"}, "23924591": {"Id": "23924591", "PostTypeId": "2", "Body": "<p>Some compilers support <em>case ranges</em> like <code>case x ... y</code> as an <strong>extension</strong> to the C++ language.</p>\n<p>Example: </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int score;\n\n    //Vraag de score\n    cout &lt;&lt; \"Score:\";\n    cin &gt;&gt; score;\n\n    //Switch\n    switch(score){\n       case 0:\n            cout &lt;&lt; \"a\";\n            break;\n       case 0 ... 9:\n            cout &lt;&lt; \"b\";\n            break;\n       case 11 ... 24:\n            cout &lt;&lt; \"c\";\n            break;\n       case 25 ... 49:\n            cout &lt;&lt; \"d\";\n            break;\n       case 50 ... 100:\n            cout &lt;&lt; \"e\";\n            break;         \n        default:\n            cout &lt;&lt; \"BAD VALUE\";\n            break;\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html\" rel=\"noreferrer\">GCC 4.9</a>, Clang 3.5.1 and Intel C/C++ Compiler 13.0.1 seem to support it (tried on <a href=\"http://gcc.godbolt.org/\" rel=\"noreferrer\">http://gcc.godbolt.org/</a>). On the other hand, Visual C++ 19 doesn't (tried on <a href=\"http://webcompiler.cloudapp.net/\" rel=\"noreferrer\">http://webcompiler.cloudapp.net/</a>).</p>\n", "LastEditorUserId": "2300278", "LastActivityDate": "2015-05-20T15:54:52.027", "Score": "41", "CreationDate": "2014-05-29T01:59:18.060", "ParentId": "9432226", "CommentCount": "3", "OwnerUserId": "3685825", "LastEditDate": "2015-05-20T15:54:52.027"}, "24133078": {"Id": "24133078", "PostTypeId": "2", "Body": "<p>A potentially useful insight is that <code>switch</code> accepts an expression, so you can fold multiple input values down to one switch case.  It's a big ugly, but for consideration:</p>\n<pre><code>switch (score / 10)\n{\n  case 10:\n    cout &lt;&lt; \"a\";\n    break;\n\n  case 9: case 8: case 7: case 6: case 5:\n    cout &lt;&lt; \"b\";\n    break;\n\n  case 4: case 3:\n    cout &lt;&lt; \"c\";\n    break;\n\n  case 2:\n    if (score &gt;= 25)\n    {\n        cout &lt;&lt; \"c\";\n        break;\n    }\n    // else fall through...\n  case 1:\n    cout &lt;&lt; \"d\";\n    break;\n\n  case 0:\n    cout &lt;&lt; (score &gt; 0 ? \"e\" : \"f\");\n    break;\n\n  default:\n    cout &lt;&lt; \"BAD VALUE\";\n    break;\n}\n</code></pre>\n<p>Of course, you could have divided by 5 and had <code>case 4:</code> (for 20-24) vs <code>case 5:</code> (25-29) rather than an <code>if</code> inside <code>case 2:</code>, but <code>/10</code> is arguably more intuitive.</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2014-06-10T04:59:30.273", "Score": "0", "CreationDate": "2014-06-10T04:51:01.443", "ParentId": "9432226", "CommentCount": "0", "OwnerUserId": "410767", "LastEditDate": "2014-06-10T04:59:30.273"}});