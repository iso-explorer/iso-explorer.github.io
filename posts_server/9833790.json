post_cb({"9833850": {"ParentId": "9833790", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>From <a href=\"https://stackoverflow.com/questions/1969620/c-float-to-bool-conversion\">here</a></p>\n<p>A float will be converted to false if its exactly 0.0f,<br>\nIt will be also true if its not exacly 0.0f!<br>\nInifinity will also be converted to true.  </br></br></p>\n", "OwnerUserId": "909233", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:31:45.600", "Id": "9833850", "Score": "7", "CreationDate": "2012-03-23T03:34:09.783", "LastActivityDate": "2012-03-23T03:34:09.783"}, "9833790": {"CommentCount": "1", "AcceptedAnswerId": "9833830", "CreationDate": "2012-03-23T03:26:09.290", "LastActivityDate": "2012-03-24T19:24:47.637", "PostTypeId": "1", "ViewCount": "2873", "FavoriteCount": "2", "Title": "What happens when you logical not a float?", "Id": "9833790", "Score": "22", "Body": "<p>I assume this just returns an int. Is there anything else going on I should be aware of? C/C++ differences?</p>\n<pre><code>float a = 2.5;\n!a; // What does this return? Int? Float?\n</code></pre>\n", "Tags": "<c++><c><floating-point><logic><logical-operators>", "OwnerUserId": "150020", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_9833790_9833830_1": {"section_id": 44, "quality": 1.0, "length": 39}, "so_9833790_9833830_0": {"section_id": 6072, "quality": 0.9, "length": 18}}, "n3337": {"so_9833790_9833830_1": {"section_id": 41, "quality": 1.0, "length": 39}, "so_9833790_9833830_0": {"section_id": 5840, "quality": 0.9, "length": 18}}, "n4659": {"so_9833790_9833830_1": {"section_id": 45, "quality": 1.0, "length": 39}, "so_9833790_9833830_0": {"section_id": 7568, "quality": 0.9, "length": 18}}}, "9833830": {"ParentId": "9833790", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Regarding C++, quoting C++11 \u00a75.3.1/9:</p>\n<blockquote>\n<p id=\"so_9833790_9833830_0\">The operand of the logical negation operator <code>!</code> is contextually converted to <code>bool</code>; its value is <code>true</code> if the converted operand is <code>false</code> and <code>false</code> otherwise. The type of the result is <code>bool</code>.</p>\n</blockquote>\n<p>So what's <em>really</em> relevant here is the behavior of <code>static_cast&lt;bool&gt;(some_float)</code> \u2013 quoting \u00a74.12/1:</p>\n<blockquote>\n<p id=\"so_9833790_9833830_1\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a prvalue of type <code>bool</code>. A zero value, null pointer value, or null member pointer value is converted to <code>false</code>; any other value is converted to <code>true</code>. A prvalue of type <code>std::nullptr_t</code> can be converted to a prvalue of type <code>bool</code>; the resulting value is <code>false</code>.</p>\n</blockquote>\n<p>Putting those together, <code>2.5f</code> is a non-zero value and will consequently evaluate to <code>true</code>, which when negated will evaluate to <code>false</code>. I.e., <code>!a</code> == <code>false</code>.</p>\n<hr>\n<p>Regarding C, quoting C99 \u00a76.5.3.3/5:</p>\n<blockquote>\n<p id=\"so_9833790_9833830_2\">The result of the logical negation operator <code>!</code> is <code>0</code> if the value of its operand compares unequal to <code>0</code>, <code>1</code> if the value of its operand compares equal to <code>0</code>. The result has type <code>int</code>. The expression <code>!E</code> is equivalent to <code>(0==E)</code>.</p>\n</blockquote>\n<p>I.e. the net result is the same as with C++, excepting the type.</p>\n</hr>", "OwnerUserId": "636019", "LastEditorUserId": "636019", "LastEditDate": "2012-03-24T19:24:47.637", "Id": "9833830", "Score": "36", "CreationDate": "2012-03-23T03:32:06.303", "LastActivityDate": "2012-03-24T19:24:47.637"}, "9833847": {"ParentId": "9833790", "CommentCount": "4", "Body": "<p>See for yourself:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   float a = 2.5;\n\n   if ( !a )\n       std::cout &lt;&lt; !a &lt;&lt; \"\\n\";\n\n   else\n       std::cout &lt;&lt; !a &lt;&lt; \"\\n\";\n}\n</code></pre>\n", "OwnerUserId": "1200129", "PostTypeId": "2", "Id": "9833847", "Score": "0", "CreationDate": "2012-03-23T03:33:52.450", "LastActivityDate": "2012-03-23T03:33:52.450"}});