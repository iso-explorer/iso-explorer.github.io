post_cb({"12712833": {"LastActivityDate": "2012-10-03T16:50:30.537", "CommentCount": "0", "CreationDate": "2012-10-03T16:30:31.073", "Body": "<p>In the first phase of translation (\u00a72.2/1 of <em>ISO/IEC 14882:2011(E)</em>), sequences of characters known as <em>trigraph sequences</em> are replaced with single characters.</p>\n<blockquote>\n<p id=\"so_12712832_12712833_0\">Trigraph sequences (2.4) are replaced by corresponding single-character internal representations.</p>\n</blockquote>\n<p>One of the trigraphs maps <code>??/</code> to <code>\\</code>. After the first phase, the code is equivalent to:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, const char* argv[])\n{\n  std::string s = \"finished\\not finished??\";\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>As a result of the preprocessing phases, <code>\"finished\\not finished??\"</code> is parsed as a <em>string literal</em> containing the escape-sequence <code>\\n</code> which represents the new line character. The outputted string is therefore: <code>finished&lt;NL&gt;ot finished??</code>.</p>\n<p>To avoid this, you need to escape one of the question marks as <code>\\?</code>. This gives you:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, const char* argv[])\n{\n  std::string s = \"finished?\\?/not finished??\";\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>This avoids the <code>??/</code> being picked up as a trigraph.</p>\n", "PostTypeId": "2", "LastEditDate": "2012-10-03T16:50:30.537", "ParentId": "12712832", "Id": "12712833", "LastEditorUserId": "150634", "Score": "4", "OwnerUserId": "150634"}, "bq_ids": {"n4140": {"so_12712832_12712833_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5313}}, "n3337": {"so_12712832_12712833_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5110}}}, "12712832": {"CreationDate": "2012-10-03T16:30:31.073", "ViewCount": "203", "Id": "12712832", "Score": "1", "Title": "Simple string output not as expected (new line appearing)", "LastEditorUserId": "168868", "CommentCount": "1", "Body": "<p>I have code equivalent to the following to print out a short string:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, const char* argv[])\n{\n  std::string s = \"finished??/not finished??\";\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>But the output is appearing across two lines and losing some characters:</p>\n<pre><code>finished  \not finished??\n</code></pre>\n<p>But <code>/n</code> isn't the new line character! What's happening?</p>\n", "Tags": "<c++><trigraphs>", "LastEditDate": "2012-10-04T18:09:09.793", "LastActivityDate": "2012-10-04T18:09:09.793", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "150634"}, "12713106": {"CommentCount": "0", "CreationDate": "2012-10-03T16:48:15.203", "Body": "<p>In gcc 4.1.2 I get this warning:</p>\n<p>cd /devserv-home/rspikol/\ng++ -g -o tz tz.C\ntz.C:6:28: warning: trigraph ??/ ignored, use -trigraphs to enable</p>\n<p>Compilation finished at Wed Oct  3 12:43:16</p>\n<p>So, by default, this version of gcc is not C++ standard compliant.</p>\n<p>@sftrabbit: In my copy of the C++ standard, the paragraph is 2.3/1</p>\n", "PostTypeId": "2", "ParentId": "12712832", "Id": "12713106", "LastActivityDate": "2012-10-03T16:48:15.203", "Score": "0", "OwnerUserId": "1649548"}});