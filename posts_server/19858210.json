post_cb({"bq_ids": {"n4140": {"so_19858210_47382585_0": {"length": 16, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_19858210_47382585_0": {"length": 16, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_19858210_47382585_0": {"length": 16, "quality": 1.0, "section_id": 6853}}}, "19858724": {"Id": "19858724", "PostTypeId": "2", "Body": "<p>Yes. In fact, it's probably preferable. Source: <a href=\"http://www.parashift.com/c++-faq/inline-nonmember-fns.html\" rel=\"nofollow\">http://www.parashift.com/c++-faq/inline-nonmember-fns.html</a></p>\n<p>Rule of thumb: Declaration tells you how to call a function and use its return value. Definition says what happens when you call it. You can change a function to inline and back without modifying <em>how</em> you call it, so it makes sense that it's part of the definition. (Of course, what makes sense and what is true don't always match, so this is only a rule.)</p>\n", "LastEditorUserId": "2963903", "LastActivityDate": "2013-11-08T23:09:18.757", "Score": "4", "CreationDate": "2013-11-08T12:05:54.457", "ParentId": "19858210", "CommentCount": "1", "OwnerUserId": "2963903", "LastEditDate": "2013-11-08T23:09:18.757"}, "19858210": {"ViewCount": "203", "Body": "<p>Is the following legal in C and/or C++?</p>\n<pre><code>void fn();\n\ninline void fn()\n{\n  /*Do something here*/\n}\n</code></pre>\n<p>What concerns me is that the first declaration looks like it implies that the function will be defined non-inline, but the following definition turns it into an inline after all.</p>\n<p>If there's a difference between C and C++ in this case, it would be nice to know that difference, too.</p>\n", "AcceptedAnswerId": "19858724", "Title": "Is declaring the function and then defining it inline legal in C/C++?", "CreationDate": "2013-11-08T11:38:11.647", "Id": "19858210", "CommentCount": "3", "LastEditDate": "2013-11-08T11:49:18.883", "PostTypeId": "1", "LastEditorUserId": "882478", "LastActivityDate": "2017-11-19T22:21:22.873", "Score": "7", "OwnerUserId": "882478", "Tags": "<c++><c><inline>", "AnswerCount": "3"}, "47382585": {"Id": "47382585", "PostTypeId": "2", "Body": "<h1>In ISO C++ (non-member function)</h1>\n<p>It is OK only if the code actually appears in the header file as shown. It would be undefined behaviour (no diagnostic required) if the header file contains a non-inline declaration, but the <code>inline</code> definition does not appear in all translation units; even if the function is not called. </p>\n<p>Reference: C++14 [dcl.fct.spec]/4 (note that a definition is also a declaration):</p>\n<blockquote>\n<p id=\"so_19858210_47382585_0\">If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears;\n  no diagnostic is required.</p>\n</blockquote>\n<h1>In ISO C++ (member function)</h1>\n<p>If the code appears inside a class definition, it is OK and the <code>inline</code> keyword is redundant, since function definitions that appear inside a class definition are implicitly <code>inline</code>.  </p>\n<p>If the class definition contained <code>void fn();</code> and then there was an out-of-line definition <code>inline void Class::fn() {</code> , the behaviour is the same as for the non-member case.</p>\n<h1>In ISO C</h1>\n<p>C11 6.7.4/7:</p>\n<blockquote>\n<p id=\"so_19858210_47382585_1\">If <strong>all</strong> of the file scope declarations for a function in a translation unit include the <code>inline</code> function specifier without <code>extern</code>, then the definition in that translation unit is an <em>inline definition</em>.</p>\n</blockquote>\n<p>The existence of a non-inline declaration means that the later definition is not an <em>inline definition</em>, despite the fact that it has the <code>inline</code> keyword. So the definition is actually an external definition (i.e. same linkage properties as if it had not been marked <code>inline</code>).</p>\n<p>Therefore, if this code appears in a header file included by two translation units it is undefined behaviour due to multiple external definitions; but if the prototype is in a header and the definition is in one translation unit which includes that header, it is OK.</p>\n<p>Note: GNU C <code>inline</code> differs to ISO C <code>inline</code>. I am unsure of the defined behaviour of this code in GNU C.</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2017-11-19T22:21:22.873", "Score": "1", "CreationDate": "2017-11-19T22:15:58.233", "ParentId": "19858210", "CommentCount": "0", "OwnerUserId": "1505939", "LastEditDate": "2017-11-19T22:21:22.873"}, "19858641": {"Id": "19858641", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19858210_19858641_0\">An inline function is one for which the compiler copies the code from the function definition directly into the code of the calling function rather than creating a separate set of instructions in memory. Instead of transferring control to and from the function code segment, a modified copy of the function body may be substituted directly for the function call. In this way, the performance overhead of a function call is avoided.</p>\n<p id=\"so_19858210_19858641_1\"><strong>C</strong> Any function, with the exception of main, can be declared or defined as inline with the inline function specifier. Static local variables are not allowed to be defined within the body of an inline function.</p>\n<p id=\"so_19858210_19858641_2\"><strong>C++</strong> functions implemented inside of a class declaration are automatically defined inline. Regular C++ functions and member functions declared outside of a class declaration, with the exception of main, can be declared or defined as inline with the inline function specifier. Static locals and string literals defined within the body of an inline function are treated as the same object across translation units.</p>\n</blockquote>\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr243.htm\" rel=\"nofollow noreferrer\">The inline function specifier</a></p>\n<p><strong>Conclusion</strong> </p>\n<p><em>C++</em> </p>\n<p>Classes: Both your functions have the same prototype essentially. However since the first function will be embedded in a class, it is in a different scope than the defined inline function. Thus it will be fine.</p>\n<p>Non Classes: If you do not embed the non inline function in a class it will be treated as a redefinition error and will give a compile error. Because it expects overloading but the prototypes are the same.</p>\n<p><em>C</em> </p>\n<p>The same hold for C as the C++ variant for non Classes. Thus if you define it like you did in your question in a .c file the compiler will throw you a redefinition error. Like:</p>\n<pre><code>redefinition of 'fn \n</code></pre>\n<p>and/or a note:</p>\n<pre><code>previous definition of 'fn' was here\n</code></pre>\n", "LastEditorUserId": "2963903", "LastActivityDate": "2016-12-25T00:08:33.563", "Score": "-1", "CreationDate": "2013-11-08T12:00:49.267", "ParentId": "19858210", "CommentCount": "2", "OwnerUserId": "2506915", "LastEditDate": "2016-12-25T00:08:33.563"}});