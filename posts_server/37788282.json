post_cb({"37788282": {"CommentCount": "6", "ViewCount": "384", "PostTypeId": "1", "LastEditorUserId": "675100", "CreationDate": "2016-06-13T11:11:50.723", "LastActivityDate": "2016-06-14T08:38:25.563", "Title": "Why exceptions from unique_ptr destructor terminates the program?", "AcceptedAnswerId": "37788488", "LastEditDate": "2016-06-13T13:01:38.137", "Id": "37788282", "Score": "7", "Body": "<p>Take a look at this code which causes program to terminate without catching the exception.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;memory&gt;\n#include &lt;stdexcept&gt;\nusing namespace std;\n\nstruct test {\n  ~test() noexcept(false) {\n    throw runtime_error(\"-my-cool-exception-\");\n  }\n};\n\nint main()\n{\n  try {\n    auto ptr = unique_ptr&lt;test&gt;(new test());\n    //test t; // this is ok, without unique_ptr&lt;test&gt; it works fine.\n  }\n  catch(exception&amp; e) {\n    cout &lt;&lt; \"this is not called, the program is aborted\";\n    cout &lt;&lt; e.what() &lt;&lt; endl;\n  }\n  return 0;\n}\n</code></pre>\n<p>This question is different from stack overflow question: <a href=\"https://stackoverflow.com/questions/130117/throwing-exceptions-out-of-a-destructor\">throwing exceptions out of destructor</a>.</p>\n<p>The difference is that only when I use <code>unique_ptr&lt;test&gt;</code> the exception is not caught. </p>\n<p>You can see the live code, edit and compile here <a href=\"http://cpp.sh/9sk5m\">http://cpp.sh/9sk5m</a></p>\n", "Tags": "<c++><c++11><unique-ptr>", "OwnerUserId": "1575632", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37788282_37788488_0": {"section_id": 4318, "quality": 0.7, "length": 14}, "so_37788282_37788488_2": {"section_id": 3345, "quality": 0.5526315789473685, "length": 21}, "so_37788282_37788488_1": {"section_id": 6324, "quality": 0.9, "length": 18}}, "n3337": {"so_37788282_37788488_0": {"section_id": 4159, "quality": 0.7, "length": 14}, "so_37788282_37788488_1": {"section_id": 6081, "quality": 0.9, "length": 18}}, "n4659": {"so_37788282_37788488_0": {"section_id": 5575, "quality": 0.7, "length": 14}, "so_37788282_37788488_1": {"section_id": 7834, "quality": 0.9, "length": 18}}}, "37788488": {"ParentId": "37788282", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>That's required by the standard. As per <a href=\"http://eel.is/c++draft/unique.ptr.single.dtor#1\" rel=\"nofollow\">unique.ptr.single.dtor, 20.10.1.2.2.1</a>:</p>\n<blockquote>\n<p id=\"so_37788282_37788488_0\">Requires: The expression get_deleter()(get()) shall be well formed, shall have well-defined behavior, and <strong>shall not throw exceptions</strong>. [ Note: The use of default_delete requires T to be a complete type.  \u2014 end note ]</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>So really, it doesn't matter whether you destructor itself has <code>noexcept(false)</code> or not. It's forbidden to throw in this case \u2013 final word.</p>\n<p>This is the case in general the case <code>std::</code> \u2013 except when specified otherwise. As per <a href=\"http://eel.is/c++draft/res.on.functions#2\" rel=\"nofollow\">res.on.functions, 17.6.4.8.2.4</a>:</p>\n<blockquote>\n<p id=\"so_37788282_37788488_1\">In particular, the effects are undefined in the following cases:\n  [...]\n  if any replacement function or handler function or <strong>destructor operation exits via an exception, unless specifically allowed in the applicable Required behavior: paragraph</strong>.</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>Note: In general, you <em>can</em> have throwing destructors with <code>noexcept(false)</code>. However, this is very dangerous, as <strong><code>std::terminate</code> will be called if the stack was unwinding due to a thrown exception</strong>.\nAs per <a href=\"http://eel.is/c++draft/except.ctor#1\" rel=\"nofollow\">except.ctor, 15.2.1</a>:</p>\n<blockquote>\n<p id=\"so_37788282_37788488_2\">As control passes from the point where an exception is thrown to a handler, destructors are invoked by a process, specified in this section, called stack unwinding. <strong>If a destructor directly invoked by stack unwinding exits with an exception</strong>, std::terminate is called ([except.terminate]). [ Note: Consequently, destructors should generally catch exceptions and not let them propagate out of the destructor.  \u2014 end note ]</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/474429f04fcd0dee\" rel=\"nofollow\">See it live on Coliru</a>.</p>\n", "OwnerUserId": "1737909", "LastEditorUserId": "1737909", "LastEditDate": "2016-06-14T08:38:25.563", "Id": "37788488", "Score": "11", "CreationDate": "2016-06-13T11:21:29.600", "LastActivityDate": "2016-06-14T08:38:25.563"}});