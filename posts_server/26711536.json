post_cb({"bq_ids": {"n4140": {"so_26711536_26711765_1": {"length": 14, "quality": 0.875, "section_id": 7029}}, "n3337": {"so_26711536_26711765_1": {"length": 14, "quality": 0.875, "section_id": 6775}}, "n4659": {"so_26711536_26711765_1": {"length": 14, "quality": 0.875, "section_id": 8526}}}, "26711536": {"ViewCount": "70", "Body": "<pre><code>vector&lt;string&gt; vec(10, string(10, 'a'));\n</code></pre>\n<p>My question is about the <code>string(10, 'a')</code>:</p>\n<ul>\n<li>Does it returns an anonymous variable? </li>\n<li>When the initialization statement over, the variable would be cleared? </li>\n<li>It would be copied to the vector? </li>\n<li>Have any differences from c++11 (at this point)?</li>\n</ul>\n", "AcceptedAnswerId": "26711765", "Title": "Initializing a std::vector from a count and an element value with copies?", "CreationDate": "2014-11-03T09:46:30.457", "Id": "26711536", "CommentCount": "19", "PostTypeId": "1", "LastActivityDate": "2014-11-03T10:02:54.327", "Score": "0", "OwnerUserId": "1155235", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "26711765": {"Id": "26711765", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_26711536_26711765_0\">Does it returns an anonymous variable?</p>\n</blockquote>\n<p>No. It returns a <strong>temporary object,</strong> which is not a variable by-definition (\u00a73.1/6 [basic]):</p>\n<blockquote>\n<p id=\"so_26711536_26711765_1\">A <em>variable</em> is introduced by the declaration of a reference other than\n  a non-static data member or of an object. The variable\u2019s name denotes\n  the reference or object.</p>\n</blockquote>\n<p><sub>Source: C++11 working draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a></sub></p>\n<blockquote>\n<p id=\"so_26711536_26711765_2\">When the initialization statement over, the variable would be cleared?</p>\n</blockquote>\n<p>No, it wouldn't. It has no name and at that point it's already destroyed anyway.</p>\n<blockquote>\n<p id=\"so_26711536_26711765_3\">It would be copied to the vector?</p>\n</blockquote>\n<p>Yes, the temporary object would be copied into the vector, and then destroyed. This happens in principle; in practice, the compiler is allowed to optimize away the creation, copying and destruction of the temporary object as long as doing so doesn't affect observable behavior.</p>\n<blockquote>\n<p id=\"so_26711536_26711765_4\">Have any differences from c++11 (at this point)?</p>\n</blockquote>\n<p>I can't tell for sure, but I can't recall any specific difference between C++98, C++03 and C++11 in this matter.</p>\n", "LastEditorDisplayName": "user3920237", "LastActivityDate": "2014-11-03T10:02:54.327", "Score": "2", "CreationDate": "2014-11-03T10:00:04.273", "ParentId": "26711536", "CommentCount": "7", "OwnerUserId": "3477950", "LastEditDate": "2014-11-03T10:02:54.327"}});