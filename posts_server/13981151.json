post_cb({"13981164": {"ParentId": "13981151", "CommentCount": "0", "Body": "<p>Yes, you can subtract an <code>int</code> from a <code>long long int</code>. You won't need any explicit casts since the <code>int</code> will be widened automatically.</p>\n", "OwnerUserId": "367273", "PostTypeId": "2", "Id": "13981164", "Score": "1", "CreationDate": "2012-12-20T21:56:20.193", "LastActivityDate": "2012-12-20T21:56:20.193"}, "13981165": {"ParentId": "13981151", "CommentCount": "0", "Body": "<ol>\n<li><p>Yes; the result is a <code>long long</code> (until you cast it to something else; in fact, it is a <code>long long</code> but you might convert the result to a different type).</p></li>\n<li><p>N/A.</p></li>\n</ol>\n", "OwnerUserId": "15168", "PostTypeId": "2", "Id": "13981165", "Score": "1", "CreationDate": "2012-12-20T21:56:21.893", "LastActivityDate": "2012-12-20T21:56:21.893"}, "13981151": {"CommentCount": "5", "ViewCount": "1008", "PostTypeId": "1", "LastEditorUserId": "15168", "CreationDate": "2012-12-20T21:55:12.797", "LastActivityDate": "2012-12-20T22:04:00.687", "Title": "Subtracting an int from a long long int", "AcceptedAnswerId": "13981171", "LastEditDate": "2012-12-20T21:59:33.923", "Id": "13981151", "Score": "0", "Body": "<ol>\n<li><p>Can I subtract an <code>int</code> variable from a <code>long long int</code> variable?</p></li>\n<li><p>In case I can't: I need to store a bigger number than a number that can stored in a <code>int</code>, and I don't want to use a <code>double</code> or <code>float</code> because I need integers, what can I do? I don't want to use all <code>long long int</code>. Is there a way to cast the <code>int</code> into a <code>long long int</code> so that I can make the subtraction?</p></li>\n</ol>\n", "Tags": "<c++><casting><integer><long-integer>", "OwnerUserId": "1889622", "AnswerCount": "3"}, "13981171": {"ParentId": "13981151", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes you can. The <code>int</code> will be converted by the <em>usual arithmetic conversions</em> to a <code>long long int</code> for the sake of the subtraction, so that both operands have the same integer conversion rank, and the result will also be a <code>long long int</code>.</p>\n<p>This is covered by \u00a75/9:</p>\n<blockquote>\n<p id=\"so_13981151_13981171_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a common type, which is also the type of the result. This pattern is called the <em>usual arithmetic conversions</em>, which are defined as follows:  </p>\n<p id=\"so_13981151_13981171_1\">[...]<br>\n  if both operands have signed integer types or both have unsigned integer types, the\n  operand with the type of lesser integer conversion rank shall be converted to the type of the operand with greater rank.<br>\n  [...]</br></br></p>\n</blockquote>\n<p>The rank of <code>long long int</code> is greater than the rank of <code>int</code>.</p>\n", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2012-12-20T22:04:00.687", "Id": "13981171", "Score": "4", "CreationDate": "2012-12-20T21:56:48.393", "LastActivityDate": "2012-12-20T22:04:00.687"}, "bq_ids": {"n4140": {"so_13981151_13981171_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_13981151_13981171_1": {"section_id": 5943, "quality": 1.0, "length": 22}}, "n3337": {"so_13981151_13981171_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_13981151_13981171_1": {"section_id": 5714, "quality": 1.0, "length": 22}}, "n4659": {"so_13981151_13981171_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}, "so_13981151_13981171_1": {"section_id": 7428, "quality": 1.0, "length": 22}}}});