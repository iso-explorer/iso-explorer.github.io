post_cb({"17129763": {"ParentId": "17129728", "CommentCount": "0", "Body": "<p>You are getting a compiler error because your <code>dynamic_cast</code> is not on pointer or reference.<br>\nChange it to:</br></p>\n<pre><code>dynamic_cast&lt;AA&amp;&gt;(a).aa();\n</code></pre>\n<p>... and you get the proper exception thrown.  </p>\n<p>On side note: Smart compilers like g++ would warn as well:<br>\n<em>warning: <code>dynamic_cast</code> on an object (here <code>a</code>) can never succeed</em>.</br></p>\n<p>So it's better to limit such code for toying around. In production quality code, the <code>dynamic_cast</code> should be performed only on pointer/reference.</p>\n", "OwnerUserId": "514235", "PostTypeId": "2", "Id": "17129763", "Score": "3", "CreationDate": "2013-06-16T02:56:07.290", "LastActivityDate": "2013-06-16T02:56:07.290"}, "17129771": {"ParentId": "17129728", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Your problem is not with <em>exception handling</em>, but with your <em>dynamic cast</em>:</p>\n<pre><code>'AA' is not a reference or pointer\n</code></pre>\n<p><code>dynamic_cast</code> safely converts <em>pointers</em> and <em>references</em> to <code>class</code>es and not <em>instances</em>.</p>\n<p>So you could do:</p>\n<pre><code>dynamic_cast&lt;AA&amp;&gt;(a).aa();\n</code></pre>\n<p>...which will <em>always</em> fail and throw a <a href=\"http://en.cppreference.com/w/cpp/types/bad_cast\" rel=\"nofollow noreferrer\"><strong><code>std::bad_cast</code></strong></a> exception.</p>\n<p>You should catch the most-specific type of <code>exception</code> that you are expecting and since <a href=\"https://stackoverflow.com/a/2023045/78845\">the recommended way to <code>catch</code> is by reference</a>, you should prefer:</p>\n<pre><code>catch (std::bad_cast const&amp; ex)\n</code></pre>\n<p><strong>Further reading:</strong> <a href=\"http://en.cppreference.com/w/cpp/language/dynamic_cast\" rel=\"nofollow noreferrer\">dynamic_cast conversion</a> on <a href=\"http://en.cppreference.com/\" rel=\"nofollow noreferrer\">cppreference.com</a>.</p>\n", "OwnerUserId": "78845", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:31:33.987", "Id": "17129771", "Score": "5", "CreationDate": "2013-06-16T02:57:16.650", "LastActivityDate": "2013-06-16T03:11:39.300"}, "17129728": {"CommentCount": "4", "ViewCount": "12532", "PostTypeId": "1", "LastEditorUserId": "514235", "CreationDate": "2013-06-16T02:48:24.193", "LastActivityDate": "2016-08-16T18:50:57.737", "Title": "error: cannot dynamic_cast ... (target is not pointer or reference)", "FavoriteCount": "0", "LastEditDate": "2013-06-16T03:05:13.337", "Id": "17129728", "Score": "7", "Body": "<p>I'm learning exception handling in C++ and run into a problem. Here's the code:</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;exception&gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\n    virtual void f(void){}\n};\n\nclass AA:public A\n{\npublic:\n    void aa(void){};\n\n};\n\nint main(void)\n{\n\n    A a;\n    try\n    {\n        dynamic_cast&lt;AA&gt;(a).aa();\n    }\n    catch(exception ex)\n    {\n        cout&lt;&lt;\"[\"&lt;&lt;ex.what()&lt;&lt;\"]\"&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>So I thought the try catch will allow the function to execute and show me the content of the exception, but my compiler does not compile it. I'm using codeblock with GNU GCC. Please help me and show me what I need to do to get the code run as I intended. thanks a lot.</p>\n", "Tags": "<c++><exception><try-catch><dynamic-cast>", "OwnerUserId": "2159377", "AnswerCount": "4"}, "17129766": {"ParentId": "17129728", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><code>dynamic_cast</code> can only cast to a pointer value or reference, which is exactly what the error is telling you.</p>\n<p>From $5.2.7/1 of the C++ Standard.</p>\n<blockquote>\n<p id=\"so_17129728_17129766_0\">The result of the expression dynamic_cast&lt; T &gt;(v) is the result of converting the expression v to type T. T shall be a pointer or reference to a complete class type, or \u201cpointer to cv void.\u201d</p>\n</blockquote>\n<p>In order for <code>dynamic_cast</code> to throw an exception when the object cannot be converted you need to cast to a reference. Change it to the following:</p>\n<pre><code>dynamic_cast&lt;AA&amp;&gt;(a).aa();\n//           ^^^ cast to reference.\n</code></pre>\n<p>As <a href=\"https://stackoverflow.com/a/17129771/845568\">Johnsyweb</a> pointed out <code>dynamic_cast</code> will always throw <a href=\"http://en.cppreference.com/w/cpp/types/bad_cast\" rel=\"nofollow noreferrer\"><code>std::bad_cast</code></a> when the conversion fails. Although <code>std::bad_cast</code> is derived from <code>std::exception</code> it is always a good idea to use the exception which best fits the expected fail condition. This prevents inadvertently interpreting other errors as an unsuccessful cast.</p>\n<p>To apply this to your example it might look like the code below.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt; // std::bad_cast\n\nclass A\n{\npublic:\n    virtual void f(void){}\n};\n\nclass AA:public A\n{\npublic:\n    void aa(void){};\n};\n\nint main(void)\n{\n    A a;\n\n    try\n    {\n        dynamic_cast&lt;AA&amp;&gt;(a).aa();\n    }\n    catch(const std::bad_cast&amp; ex)\n    {\n        std::cout &lt;&lt; \"[\"&lt;&lt;ex.what()&lt;&lt;\"]\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>[Note, doing things like <code>using namespace std;</code> is strongly discouraged as it can cause conflicts with identifiers in the global namespace. I have removed it in the example above.]</p>\n", "OwnerUserId": "845568", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:04.807", "Id": "17129766", "Score": "17", "CreationDate": "2013-06-16T02:56:23.227", "LastActivityDate": "2013-06-16T03:48:10.067"}, "bq_ids": {"n4140": {"so_17129728_17129766_0": {"section_id": 6011, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_17129728_17129766_0": {"section_id": 5779, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_17129728_17129766_0": {"section_id": 7510, "quality": 0.8666666666666667, "length": 13}}}, "38982418": {"ParentId": "17129728", "CommentCount": "0", "Body": "<p>I just dealt with the same error, but in my case I was going from a pointer to a pointer, so the other answers here did not apply. My error message was slightly different, however: <code>error: cannot dynamic_cast 'f()' (of type 'class B*') to type 'class A*' (target is not pointer or reference to complete type)</code>.</p>\n<p>The root cause in my case was much more simple and mundane.</p>\n<p>Notice the addition of <em>to complete type</em> at the end. This caused me to remember that I did not include the header file for my class which I was using. It was not an unknown symbol because <code>A*</code> was forward declared with <code>class A;</code> in the header file, causing it to exist but not be complete, hence the error.</p>\n<p>The solution in my case was to include the header file for the class I was casting to.</p>\n<p>This is not the question asker's problem above, but as can be seen by my case can generate the same type of error.</p>\n", "OwnerUserId": "6327519", "PostTypeId": "2", "Id": "38982418", "Score": "0", "CreationDate": "2016-08-16T18:50:57.737", "LastActivityDate": "2016-08-16T18:50:57.737"}});