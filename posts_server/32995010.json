post_cb({"32995126": {"ParentId": "32995010", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><code>\"log.txt\"</code> isn't a <code>std:string</code> is actually an array of chars containing <code>{'l','o','g','.','t','x','t','\\0'}</code>, its type is <code>const char[N]</code> which decays to <code>const char*</code> hence the call to <code>Save(i, \"log.txt\");</code> works.</p>\n<p>The call works but the compiler prints a warning stating that converting from <code>const char*</code> to <code>char*</code> has been deprecated in C++03 and invalid in C++11.</p>\n", "OwnerUserId": "2283078", "LastEditorUserId": "2283078", "LastEditDate": "2015-10-07T14:58:06.607", "Id": "32995126", "Score": "5", "CreationDate": "2015-10-07T14:35:49.017", "LastActivityDate": "2015-10-07T14:58:06.607"}, "32997739": {"ParentId": "32995010", "CommentCount": "0", "Body": "<p>In C++ it is perfectly fine to initialize a character pointer with string literal.\nAfter initialization we can use that character pointer like an array as in:</p>\n<pre><code>{\n  char *s=\"abc\";\n  cout&lt;&lt;s[0];\n  cout&lt;&lt;s[1];\n}\n</code></pre>\n", "OwnerUserId": "3297764", "PostTypeId": "2", "Id": "32997739", "Score": "0", "CreationDate": "2015-10-07T16:34:48.753", "LastActivityDate": "2015-10-07T16:34:48.753"}, "32995212": {"ParentId": "32995010", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The string literal <code>\"log.txt\"</code> has type <code>char const[N]</code>, as per \u00a72.13.5/8:</p>\n<blockquote>\n<p id=\"so_32995010_32995212_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p>which <em>decays</em> to a pointer when passed as argument, as per \u00a74.2/1:</p>\n<blockquote>\n<p id=\"so_32995010_32995212_1\">An lvalue or rvalue of type \u201carray of N T\u201d or \u201carray of unknown bound of T\u201d can be converted to a prvalue of type \u201cpointer to T\u201d. The result is a pointer to the first element of the array.</p>\n</blockquote>\n<p>The reason <code>char const*</code> can be assigned to <code>char*</code> <a href=\"https://stackoverflow.com/a/15970792/493122\">is mostly there for backward compatibility reasons</a> and it <a href=\"http://coliru.stacked-crooked.com/a/f3a52f054f369bb5\" rel=\"nofollow noreferrer\">has been deprecated in C++11</a>.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:23:34.943", "Id": "32995212", "Score": "8", "CreationDate": "2015-10-07T14:39:43.677", "LastActivityDate": "2015-10-07T14:54:27.517"}, "bq_ids": {"n4140": {"so_32995010_32995212_0": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_32995010_32995212_1": {"section_id": 11, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_32995010_32995212_0": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_32995010_32995212_1": {"section_id": 8, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_32995010_32995212_0": {"section_id": 6781, "quality": 1.0, "length": 26}, "so_32995010_32995212_1": {"section_id": 12, "quality": 0.9444444444444444, "length": 17}}}, "32995010": {"CommentCount": "3", "ViewCount": "95", "CreationDate": "2015-10-07T14:30:34.827", "LastActivityDate": "2015-10-07T16:34:48.753", "Title": "Why is it possible to pass a string as a char pointer", "PostTypeId": "1", "Id": "32995010", "Score": "2", "Body": "<p>I have a part of code, I don't understand how it works.</p>\n<p>I have <code>int Save(int _key, char *file);</code>\nAnd this method <code>Save</code> accepts string as a char pointer <code>Save(i, \"log.txt\");</code></p>\n<p>So what happens at the end is inside the <code>Save</code> method I use <code>fopen(file, \"a+\")</code> and it works perfectly fine.</p>\n<p>However I don't understand how it accepts <code>\"log.txt\"</code> for <code>char *file</code>.</p>\n", "Tags": "<c++><string><pointers>", "OwnerUserId": "3002135", "AnswerCount": "3"}});