post_cb({"40814807": {"Id": "40814807", "PostTypeId": "2", "Body": "<p>It loops infinitely as no initialization, conditional and increment values are passed in the parameters of the loop. A typical for loop takes parameters as follows: (&lt;initialization&gt;;&lt;conditional&gt;;&lt;increment&gt;)</p>\n", "LastActivityDate": "2016-11-26T04:07:38.657", "Score": "0", "CreationDate": "2016-11-26T04:07:38.657", "ParentId": "40814778", "CommentCount": "0", "OwnerUserId": "6426767"}, "bq_ids": {"n4140": {"so_40814778_40814797_5": {"length": 13, "quality": 0.9285714285714286, "section_id": 3904}}, "n3337": {"so_40814778_40814797_5": {"length": 12, "quality": 0.8571428571428571, "section_id": 3764}}, "n4659": {"so_40814778_40814797_5": {"length": 14, "quality": 1.0, "section_id": 4790}}}, "40814846": {"Id": "40814846", "PostTypeId": "2", "Body": "<p>That for loop essentially says the following three things (each separated by the semicolons in your for loop \"header?\"):</p>\n<ol>\n<li>Don't initialize anything.</li>\n<li>Don't break from the loop.</li>\n<li>Perform no afterthoughts for each loop iteration.</li>\n</ol>\n<p><a href=\"https://en.wikipedia.org/wiki/For_loop#Use_as_infinite_loops\" rel=\"nofollow noreferrer\">Wikipedia</a>'s <code>for</code> loop page actually has a section about this.</p>\n", "LastActivityDate": "2016-11-26T04:13:33.747", "Score": "0", "CreationDate": "2016-11-26T04:13:33.747", "ParentId": "40814778", "CommentCount": "0", "OwnerUserId": "749468"}, "40814797": {"Id": "40814797", "PostTypeId": "2", "Body": "<p>According tho the language specification, empty condition in <code>for</code> iteration statament is equivalent to <code>true</code> condition. </p>\n<blockquote>\n<p id=\"so_40814778_40814797_0\"><strong>6.5.3 The for statement</strong></p>\n<p id=\"so_40814778_40814797_1\"><strong>1</strong> The for statement</p>\n<p id=\"so_40814778_40814797_2\"><em>for ( for-init-statement condition<sub>opt</sub>; expression<sub>opt</sub>) statement</em></p>\n<p id=\"so_40814778_40814797_3\">is equivalent to</p>\n<pre><code>{\n  for-init-statement\n  while ( condition ) {\n    statement\n    expression ;\n  }\n}\n</code></pre>\n<p id=\"so_40814778_40814797_4\">...</p>\n<p id=\"so_40814778_40814797_5\"><strong>2</strong> Either or both of the condition and the expression can be omitted. A missing condition makes the implied <code>while</code> clause equivalent to <code>while(true)</code>.</p>\n</blockquote>\n<p>So, the loop loops forever. That's all there is to it.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2016-11-26T04:10:40.213", "Score": "9", "CreationDate": "2016-11-26T04:05:33.860", "ParentId": "40814778", "CommentCount": "0", "LastEditDate": "2016-11-26T04:10:40.213", "OwnerUserId": "187690"}, "40814852": {"Id": "40814852", "PostTypeId": "2", "Body": "<p>As many have pointed out, it is equivalent to <code>while (1)</code>.</p>\n<p>When is it useful? Wherever you need an infinite loop such as:</p>\n<ol>\n<li>A game loop - would be kinda useful to have the game, loop indefinitely until the user decides to quit the game.</li>\n<li>OS scheduler - The scheduler needs to loop indefinitely, scheduling processes according to some algorithm until the OS stops</li>\n<li>An intepreter - If you have ever programmed in python, you may have come across the interpreter which lets you type some command and then executes it. This is also implemented using a similar infinite loop</li>\n</ol>\n<p>In all those examples, the common factor that leads to using an infinite loop is that the terminating condition is not known or the terminating condition is complex (game loops for example)</p>\n", "LastEditorUserId": "2089675", "LastActivityDate": "2016-11-26T04:28:50.870", "Score": "0", "CreationDate": "2016-11-26T04:14:28.560", "ParentId": "40814778", "CommentCount": "0", "LastEditDate": "2016-11-26T04:28:50.870", "OwnerUserId": "2089675"}, "40814812": {"Id": "40814812", "PostTypeId": "2", "Body": "<p>This post explains it quite well in my opinion. See the answer by spex:\n<a href=\"https://stackoverflow.com/questions/13366290/why-can-the-condition-of-a-for-loop-be-left-empty\">Why can the condition of a for-loop be left empty?</a></p>\n<p>With the structure of the for loop being <code>for(clause; expression-2; expression-3){}</code>, when <code>expression-2</code> is left out it is replaced with a nonzero constant. This is the part of the loop that determines whether it should keep looping or not. As a nonzero constant evaluates to true, it becomes an infinite loop.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-11-26T04:08:32.440", "Score": "0", "CreationDate": "2016-11-26T04:08:32.440", "ParentId": "40814778", "CommentCount": "0", "LastEditDate": "2017-05-23T11:46:11.760", "OwnerUserId": "5057537"}, "40814778": {"ViewCount": "82", "Body": "<p>My friend showed me this and I have no idea how it works and what it's called. Can someone explain to me how it loops the way it does? For example:</p>\n<pre><code>for(;;){\n    cout &lt;&lt; \"loop\" &lt;&lt; endl;\n}\n</code></pre>\n<p>It will just keep looping the string forever. This kind of loop can be used for anything. How does this work?</p>\n", "AcceptedAnswerId": "40814797", "Title": "What is for(;;) loop in C++?", "CreationDate": "2016-11-26T04:01:07.093", "LastActivityDate": "2016-11-26T04:28:50.870", "CommentCount": "3", "LastEditDate": "2016-11-26T04:09:43.237", "PostTypeId": "1", "Tags": "<c++><loops>", "Id": "40814778", "AnswerCount": "5", "Score": "0", "OwnerUserId": "5916001", "ClosedDate": "2016-11-26T04:18:06.627", "LastEditorUserId": "2089675"}});