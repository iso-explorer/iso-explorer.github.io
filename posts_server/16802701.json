post_cb({"bq_ids": {"n4140": {"so_16802701_16802727_0": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_16802701_16802727_0": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_16802701_16802727_0": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}}}, "16802717": {"ParentId": "16802701", "CommentCount": "0", "Body": "<p>The program has undefined behaviour as it is attempting to modify a string literal:</p>\n<pre><code>char * test1 = \"123a45\";\n</code></pre>\n<p>Change to:</p>\n<pre><code>char test1[] = \"123a45\"; // 'test1' is a copy of the string literal.\nchar * new_end = std::remove_if(test1, test1 + sizeof(test1), is_bad);\n</code></pre>\n<p>See <a href=\"http://ideone.com/yzeo4k\">http://ideone.com/yzeo4k</a>.</p>\n", "OwnerUserId": "1033896", "PostTypeId": "2", "Id": "16802717", "Score": "5", "CreationDate": "2013-05-28T22:45:07.803", "LastActivityDate": "2013-05-28T22:45:07.803"}, "16802701": {"CommentCount": "0", "ViewCount": "193", "CreationDate": "2013-05-28T22:43:39.687", "LastActivityDate": "2013-05-28T22:52:58.440", "Title": "Using remove_if with C null-terminated string", "PostTypeId": "1", "Id": "16802701", "Score": "1", "Body": "<p>I have a situation where I want to efficiently remove a character from a NULL-terminated char *.  I can assume the incoming string is large (i.e. it wouldn't be efficient to copy); but I can also assume that I don't need to de-allocate the unused memory.</p>\n<p>I thought I could use <code>std::remove_if</code> for this task (replacing the character at the returned iterator with a NULL-terminator), and set up the following test program to make sure I got the syntax correct:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nbool is_bad (const char &amp;c) {\n  return c == 'a';\n}\n\nint main (int argc, char *argv[]) {\n  char * test1 = \"123a45\";\n  int len = 6;\n  std::cout &lt;&lt; test1 &lt;&lt; std::endl;\n  char * new_end = std::remove_if(&amp;test1[0], &amp;test1[len], is_bad);\n  *new_end = '\\0';\n  std::cout &lt;&lt; test1 &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>\n<p>This program compiles, however, I'm getting a <code>Segmentation Fault</code> somewhere in <code>remove_if</code> - here's the output from <code>gdb</code>:</p>\n<pre><code>Program received signal SIGSEGV, Segmentation fault.\n0x0000000000400914 in std::remove_copy_if&lt;char*, char*, bool (*)(char const&amp;)&gt; (__first=0x400c2c \"45\", __last=0x400c2e \"\", __result=0x400c2b \"a45\", \n    __pred=0x4007d8 &lt;is_bad(char const&amp;)&gt;) at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h:1218\n1218                *__result = *__first;\n</code></pre>\n<p>This is with <code>gcc 4.1.2</code> on RedHat 4.1.2-52.</p>\n<p>My understanding was that raw pointers can be used as <code>ForwardIterators</code>, but perhaps not?  Any suggestions?</p>\n", "Tags": "<c++><pointers><remove-if>", "OwnerUserId": "1258206", "AnswerCount": "2"}, "16802727": {"ParentId": "16802701", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Your program has undefined behavior, since you are trying to modify an array of <code>const</code> characters (string literals are arrays of <code>const</code> characters). Per paragraph 7.1.6.1/4 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16802701_16802727_0\">Except that any class member declared <code>mutable</code> (7.1.1) can be modified, any attempt to modify a <code>const</code>\n  object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote>\n<p>Notice, that since C++11 the conversion from a string literal to a <code>char*</code> is illegal, and in C++03 is deprecated (GCC 4.7.2 gives me a warning for that).</p>\n<p>To fix your program with a minimal change, declare <code>test1</code> as an array of characters and initialize it from the string literal:</p>\n<pre><code>char test1[] = \"123a45\";\n</code></pre>\n<p>Here is a <a href=\"http://ideone.com/UddKCM\" rel=\"nofollow\"><strong>live example</strong></a>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-05-28T22:52:58.440", "Id": "16802727", "Score": "4", "CreationDate": "2013-05-28T22:45:57.467", "LastActivityDate": "2013-05-28T22:52:58.440"}});