post_cb({"bq_ids": {"n4140": {"so_28752247_28768636_0": {"length": 11, "quality": 1.0, "section_id": 7047}, "so_28752247_28768636_1": {"length": 10, "quality": 1.0, "section_id": 7047}, "so_28752247_28768636_2": {"length": 22, "quality": 1.0, "section_id": 3241}, "so_28752247_28752372_0": {"length": 15, "quality": 1.0, "section_id": 7033}}, "n3337": {"so_28752247_28768636_0": {"length": 11, "quality": 1.0, "section_id": 6792}, "so_28752247_28768636_1": {"length": 10, "quality": 1.0, "section_id": 6792}, "so_28752247_28768636_2": {"length": 22, "quality": 1.0, "section_id": 3114}, "so_28752247_28752372_0": {"length": 15, "quality": 1.0, "section_id": 6779}}, "n4659": {"so_28752247_28768636_0": {"length": 11, "quality": 1.0, "section_id": 8544}, "so_28752247_28768636_1": {"length": 10, "quality": 1.0, "section_id": 8544}, "so_28752247_28768636_2": {"length": 22, "quality": 1.0, "section_id": 3997}, "so_28752247_28752372_0": {"length": 15, "quality": 1.0, "section_id": 8530}}}, "28752247": {"ViewCount": "59", "Body": "<p>The following bit of code, in which a function definition predeeds its declaration, compiles in VS .NET 2008 and Cygwin gcc 4.8.2. Is it legal?</p>\n<pre><code>namespace N\n{\n    int init()      // Definition appears first\n    {\n        return 42;\n    }       \n}\n\nnamespace N\n{\n    int init();     // followed by declaration\n    const int x = init();\n}\n\nint main()\n{\n}\n</code></pre>\n<p><strong>Edit</strong></p>\n<p>I suppose this isn't too different from the following with also compiles</p>\n<pre><code>void foo()\n{\n}\n\nvoid foo();\n\nint main()\n{\n}\n</code></pre>\n", "AcceptedAnswerId": "28752372", "Title": "Function definition precedes declaration in namespace", "CreationDate": "2015-02-26T20:35:25.307", "Id": "28752247", "CommentCount": "12", "LastEditDate": "2017-05-01T01:22:43.657", "PostTypeId": "1", "LastEditorUserId": "1033581", "LastActivityDate": "2017-05-01T01:22:43.657", "Score": "2", "OwnerUserId": "181783", "Tags": "<c++><namespaces><forward-declaration>", "AnswerCount": "2"}, "28768636": {"Id": "28768636", "PostTypeId": "2", "Body": "<p>It looks like this is covered by 3.3.1/4:</p>\n<blockquote>\n<p id=\"so_28752247_28768636_0\">Given a set of declarations in a single declarative region, each of\n  which specifies the same unqualified name,</p>\n<p id=\"so_28752247_28768636_1\">\u2014 they shall all refer to\n  the same entity, or all refer to functions and function templates; or</p>\n</blockquote>\n<p>Then 8.3.5/5:</p>\n<blockquote>\n<p id=\"so_28752247_28768636_2\">A single name can be used for several different functions in a single\n  scope; this is function overloading (Clause 13). All declarations for\n  a function shall agree exactly in both the return type and the\n  parameter type- list.</p>\n</blockquote>\n<p>This seems to clearly show that you can declare the same function twice, by having the declarations <code>...agree exactly in both the return type and the parameter type- list.</code></p>\n", "LastActivityDate": "2015-02-27T15:29:57.223", "CommentCount": "0", "CreationDate": "2015-02-27T15:29:57.223", "ParentId": "28752247", "Score": "1", "OwnerUserId": "251738"}, "28752372": {"Id": "28752372", "PostTypeId": "2", "Body": "<p>[basic.def]/1:</p>\n<blockquote>\n<p id=\"so_28752247_28752372_0\">A declaration (Clause 7) may introduce one or more names into a\n  translation unit <strong>or redeclare names introduced by previous\n  declarations.</strong></p>\n</blockquote>\n<p>It is fine to (re)declare a name at any time given that the declaration is consistent with respect to earlier ones. In this case, it is consistent, as the type of <code>init</code> in both declarations is <code>int()</code>. So yes, the code is well-formed.</p>\n", "LastActivityDate": "2015-02-26T20:42:43.043", "CommentCount": "0", "CreationDate": "2015-02-26T20:42:43.043", "ParentId": "28752247", "Score": "5", "OwnerUserId": "3647361"}});