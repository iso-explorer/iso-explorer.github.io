post_cb({"bq_ids": {"n4140": {"so_13809359_13810428_0": {"length": 45, "quality": 0.9, "section_id": 300}}, "n3337": {"so_13809359_13810428_0": {"length": 45, "quality": 0.9, "section_id": 291}}, "n4659": {"so_13809359_13810428_0": {"length": 41, "quality": 0.82, "section_id": 307}}}, "13809359": {"ViewCount": "1019", "Body": "<p>Code first.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A final {};\nstruct B {};\n\nint main()\n{ \n    cout &lt;&lt; is_final&lt;A&gt;::value &lt;&lt; endl; // Output true\n    cout &lt;&lt; is_final&lt;B&gt;::value &lt;&lt; endl; // Output false\n\n    return 0; \n}\n</code></pre>\n<p><strong>How to implement the class is_final?</strong></p>\n", "AcceptedAnswerId": "13810428", "Title": "How to detect if a class is final in C++11?", "CreationDate": "2012-12-10T21:12:58.793", "Id": "13809359", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2012-12-10T22:33:44.353", "Score": "17", "OwnerUserId": "508343", "Tags": "<c++><c++11><final><typetraits>", "AnswerCount": "3"}, "13810428": {"Id": "13810428", "PostTypeId": "2", "Body": "<p>Type traits are usually implemented using the SFINAE idiom, which places a potentially ill-formed expression inside a function template declaration. Substituting the typename in question into the declaration results in an error, but the error is suppressed in that context, so the declaration is either used or not. But a fallback overload backs up the potentially missing declaration. Another bit of code accesses the function to detect whether the sensitive overload or only the backup was instantiated.</p>\n<p>This won't work for <code>final</code> because it can only cause failure during template instantiation of a class. There's no way to overload classes, and no way to tentatively define a class that will fail but not halt compilation in case it's derived from final.</p>\n<p>Standard quote, C++11 \u00a714.8.2/8:</p>\n<blockquote>\n<p id=\"so_13809359_13810428_0\">Only invalid types and expressions in the immediate context of the function type and its template parameter types can result in a deduction failure. [ Note: The evaluation of the substituted types and expressions can result in side effects such as the instantiation of class template specializations and/or function template specializations, the generation of implicitly-defined functions, etc. Such side effects are not in the \u201cimmediate context\u201d and can result in the program being ill-formed. \u2014 end note ]</p>\n</blockquote>\n", "LastActivityDate": "2012-12-10T22:32:47.733", "CommentCount": "0", "CreationDate": "2012-12-10T22:32:47.733", "ParentId": "13809359", "Score": "8", "OwnerUserId": "153285"}, "13810324": {"Id": "13810324", "PostTypeId": "2", "Body": "<p>As the implementer of GCC's <code>__is_final</code> intrinisic (for <a href=\"http://gcc.gnu.org/PR51365\" rel=\"noreferrer\">PR 51365</a>) I'm pretty sure it can't be done in a library, it needs compiler support.</p>\n<p>You can do some very clever things with C++11's SFINAE for expressions feature but to detect whether a class is final you'd need to derive from it, and instantiate the derived type, in a template argument deduction context, but deriving from a class is done in a declaration not an expression. </p>\n<p>Also, you should think about whether you only want to know if the <code>final</code> pseudo-keyword was used, or if a class is un-derivable for other reasons, such as having only private constructors.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2012-12-10T22:33:44.353", "Score": "23", "CreationDate": "2012-12-10T22:23:28.310", "ParentId": "13809359", "CommentCount": "4", "OwnerUserId": "981959", "LastEditDate": "2012-12-10T22:33:44.353"}, "13810124": {"Id": "13810124", "PostTypeId": "2", "Body": "<p>Not sure if this is what you want but you could do something like this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {};\nstruct Bar {};\n\ntemplate&lt;typename T&gt;\nstruct is_final {\n    static const bool value = false;\n};\ntemplate&lt;&gt;\nstruct is_final&lt;Bar&gt; {\n    static const bool value = true;\n};\n\n\nint main(void) {\n    std::cout &lt;&lt; is_final&lt;Foo&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; is_final&lt;Bar&gt;::value &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastActivityDate": "2012-12-10T22:09:00.297", "CommentCount": "3", "CreationDate": "2012-12-10T22:09:00.297", "ParentId": "13809359", "Score": "0", "OwnerUserId": "1029144"}});