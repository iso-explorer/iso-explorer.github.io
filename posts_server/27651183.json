post_cb({"bq_ids": {"n4140": {"so_27651183_27651369_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 7050}, "so_27651183_27651369_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 7050}}, "n3337": {"so_27651183_27651369_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 6795}, "so_27651183_27651369_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6795}}, "n4659": {"so_27651183_27651369_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 8547}, "so_27651183_27651369_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 8547}}}, "27651865": {"Id": "27651865", "PostTypeId": "2", "Body": "<p>First of all I think you mean this:</p>\n<pre><code>namespace myNamespace {\n     using boost::whatever; // NOT boost::whatever();\n}\n</code></pre>\n<p>Remember that C++ namespaces are mainly to avoid naming clashes not a design mechanism, which means when you are using a method of other namespaces in another one, you just call the original one and there is no copy in new namespace scope. So, when you call <code>myNamespace::whatever()</code>, compiler would choose <code>boost::whatever()</code> not <code>myNamespace::boost::whatever()</code> because there is no <code>boost</code> namespace declared inside <code>myNamespace</code>.</p>\n<p>For more details on namespaces you could see:\n<a href=\"http://en.cppreference.com/w/cpp/language/namespace\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/namespace</a></p>\n", "LastEditorUserId": "1967498", "LastActivityDate": "2014-12-26T00:49:21.820", "Score": "2", "CreationDate": "2014-12-26T00:42:34.217", "ParentId": "27651183", "CommentCount": "0", "OwnerUserId": "1967498", "LastEditDate": "2014-12-26T00:49:21.820"}, "27651234": {"Id": "27651234", "PostTypeId": "2", "Body": "<p>Assuming you want to call a function using some qualification, you may end up using a local namespace rather than a global namespace:</p>\n<pre><code>#include &lt;iostream&gt;\nnamespace A { void f() { std::cout &lt;&lt; \"::A::f()\\n\"; } }\nnamespace B {\n    namespace A { void f() { std::cout &lt;&lt; \"::B::A::f()\\n\"; } }\n    void g() { A::f(); }\n    void h() { ::A::f(); }\n}\n\nint main() {\n    B::g();\n    B::h();\n}\n</code></pre>\n<p>If you want to make sure you are picking up a specific namespace you'll need to use absolute qualification as in <code>::A::f()</code>.</p>\n", "LastActivityDate": "2014-12-25T22:30:18.547", "CommentCount": "0", "CreationDate": "2014-12-25T22:30:18.547", "ParentId": "27651183", "Score": "1", "OwnerUserId": "1120273"}, "27651183": {"ViewCount": "89", "Body": "<p>In C++, if I have</p>\n<pre><code>namespace myNamespace {\n    boost::whatever();\n}\n</code></pre>\n<p>will the compiler look for whatever() in the boost namespace or in myNamespace::boost?  </p>\n", "Title": "Namespace qualified names INSIDE a user namespace", "CreationDate": "2014-12-25T22:21:31.843", "LastActivityDate": "2014-12-26T00:49:21.820", "CommentCount": "1", "PostTypeId": "1", "Id": "27651183", "Score": "1", "OwnerUserId": "4394486", "Tags": "<c++>", "AnswerCount": "3"}, "27651369": {"Id": "27651369", "PostTypeId": "2", "Body": "\n<p>The question is not about whether it will look for <code>boost::whatever</code>, but where it will find <code>boost</code> <em>itself</em>.</p>\n<p>If you have a nested namespace definition with the name <code>boost</code>, it will <em>hide</em> the global <code>boost</code> namespace at its point of declaration. The global <code>boost</code> namespace will be visible up until the point where <code>myNamespace::boost</code> is declared (\u00a73.3.2/2).</p>\n<blockquote>\n<p id=\"so_27651183_27651369_0\">[ Note: a name from an outer scope remains visible up to the point of declaration of the name that hides it. [ Example:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>const int i = 2;\n{ int i[i]; }\n</code></pre>\n<p id=\"so_27651183_27651369_1\">declares a block-scope array of two integers. \u2014 end example ] \u2014 end note ]</p>\n</blockquote>\n<p>So if you're calling <code>boost::whatever()</code> before the nested name <code>myNamespace::boost</code> is created, it will look for the global <code>boost</code> namespace. You can qualify the name with <code>::boost</code> if you always want it to find <code>boost</code> in the global namespace.</p>\n", "LastActivityDate": "2014-12-25T22:55:55.217", "CommentCount": "0", "CreationDate": "2014-12-25T22:55:55.217", "ParentId": "27651183", "Score": "2", "OwnerUserId": "701092"}});