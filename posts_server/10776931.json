post_cb({"bq_ids": {"n4140": {"so_10776931_10777144_0": {"length": 43, "quality": 0.9555555555555556, "section_id": 1394}}, "n3337": {"so_10776931_10777144_0": {"length": 43, "quality": 0.9555555555555556, "section_id": 1388}}, "n4659": {"so_10776931_10777144_0": {"length": 43, "quality": 0.9555555555555556, "section_id": 1512}}}, "10776950": {"Id": "10776950", "PostTypeId": "2", "Body": "<p>You should make it const since it leaves the two parameters the same.</p>\n", "LastActivityDate": "2012-05-27T20:18:23.417", "CommentCount": "3", "CreationDate": "2012-05-27T20:18:23.417", "ParentId": "10776931", "Score": "0", "OwnerUserId": "1092951"}, "10777144": {"Id": "10777144", "PostTypeId": "2", "Body": "<p>I don't believe there is a requirement in the standard that says the parameters to the function must be const, so I believe your implementation is in error for rejecting it.  However, there is a requirement that the function not modify the arguments:</p>\n<p>From the standard -- 25.4/2</p>\n<blockquote>\n<p id=\"so_10776931_10777144_0\">Compare is a function object type (20.8). The return value of the\n  function call operation applied to an object of type Compare, when\n  contextually converted to bool (4), yields true if the first argument\n  of the call is less than the second, and false otherwise. Compare comp\n  is used throughout for algorithms assuming an ordering relation. It is\n  assumed that comp will not apply any non-constant function through the\n  dereferenced iterator.</p>\n</blockquote>\n<p>And the signature of <code>std::sort</code> from 25.4.1.1</p>\n<pre><code>template&lt;class RandomAccessIterator, class Compare&gt;\nvoid sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp)\n</code></pre>\n<p>So since your function is not allowed to modify its arguments, it really should be taking them in as const, but the standard does not require that.  So while your implementation may be in error, I believe it is a forgivable error, as it manages to call attention to the fact that either your function is in violation of the standard by modifying its arguments, or it is not const-correct.</p>\n", "LastEditorUserId": "440119", "LastActivityDate": "2012-05-27T20:56:53.267", "Score": "2", "CreationDate": "2012-05-27T20:44:57.720", "ParentId": "10776931", "CommentCount": "0", "OwnerUserId": "440119", "LastEditDate": "2012-05-27T20:56:53.267"}, "10776931": {"ViewCount": "1541", "Body": "<p>If I define my <code>compare</code> function like this:</p>\n<pre><code>bool compare(Student&amp; a, Student&amp; b)\n{\n    return a.n &lt; b.n;\n}\n</code></pre>\n<p>g++ will complain:</p>\n<pre><code>g++ -Wall main.cpp -o main\nIn file included from /usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/algorithm:63:0,\n                 from main.cpp:1:\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h: In function \u2018_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, const _Tp&amp;, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator&lt;Student*, std::vector&lt;Student&gt; &gt;, _Tp = Student, _Compare = bool (*)(Student&amp;, Student&amp;)]\u2019:\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h:2261:78:   instantiated from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator&lt;Student*, std::vector&lt;Student&gt; &gt;, _Compare = bool (*)(Student&amp;, Student&amp;)]\u2019\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h:2302:62:   instantiated from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator&lt;Student*, std::vector&lt;Student&gt; &gt;, _Size = long int, _Compare = bool (*)(Student&amp;, Student&amp;)]\u2019\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h:5250:4:   instantiated from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator&lt;Student*, std::vector&lt;Student&gt; &gt;, _Compare = bool (*)(Student&amp;, Student&amp;)]\u2019\nmain.cpp:38:51:   instantiated from here\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h:2229:4: error: invalid initialization of reference of type \u2018Student&amp;\u2019 from expression of type \u2018const Student\u2019\n/usr/lib/gcc/x86_64-pc-linux-gnu/4.5.3/include/g++-v4/bits/stl_algo.h:2232:4: error: invalid initialization of reference of type \u2018Student&amp;\u2019 from expression of type \u2018const Student\u2019\n\nCompilation exited abnormally with code 1 at Mon May 28 08:05:35\n</code></pre>\n<p>But if I define the compare with <code>const</code> type, it will compile and works fine.</p>\n<p>And here is all the code:</p>\n<pre><code>class Student {\npublic:\n    Student(string);\n    string n;\n\n};\n\nbool compare(Student&amp; a, Student&amp; b)\n{\n    return a.n &lt; b.n;\n}\n\nStudent::Student(string name) { n = name; }\n\nint main()\n{\n    Student A = Student(\"A\");\n    Student B = Student(\"B\");\n\n    vector&lt;Student&gt; students;\n    students.push_back(B);\n    students.push_back(A);\n\n    sort(students.begin(), students.end(), compare);\n\n    cout &lt;&lt; \"After sort\" &lt;&lt; endl;\n    for(vector&lt;Student&gt;::iterator i = students.begin(); i != students.end(); ++i) {\n        cout &lt;&lt; \"Student: \" &lt;&lt; i-&gt;n &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "10777038", "Title": "Why I can't define compare without constant", "CreationDate": "2012-05-27T20:15:35.867", "Id": "10776931", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2012-05-27T20:56:53.267", "Score": "4", "OwnerUserId": "301218", "Tags": "<c++><compiler-construction><g++>", "AnswerCount": "3"}, "10777038": {"Id": "10777038", "PostTypeId": "2", "Body": "<p>In this implementation, <code>std::sort</code> uses</p>\n<pre><code> const _Tp&amp; std::__median(const _Tp&amp;, const _Tp&amp;, const _Tp&amp;, _Compare);\n</code></pre>\n<p>In your case, <code>_Tp</code> is student, and <code>_Compare</code> is <code>compare</code>.</p>\n<p>So you basically have</p>\n<pre><code>const Student&amp; std::__median(const Student&amp;, const Student&amp;, const Student&amp;, \n                                                   bool (*)(Student&amp;, Student&amp;) )\n</code></pre>\n<p>or similar. Obviously, the callback can't be applied to the parameters are they are converted to <code>const</code>, so the failure.</p>\n<p>Make the parameters to your <code>compare</code> method <code>const</code>.</p>\n", "LastActivityDate": "2012-05-27T20:29:25.857", "CommentCount": "9", "CreationDate": "2012-05-27T20:29:25.857", "ParentId": "10776931", "Score": "6", "OwnerUserId": "673730"}});