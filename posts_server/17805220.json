post_cb({"17805970": {"Id": "17805970", "PostTypeId": "2", "Body": "<p>What do you expect to get though? There is nothing random in your code. a, c, m are all constant, you won't get different result util changing mfml_win_drandX0.</p>\n", "LastActivityDate": "2013-07-23T09:11:00.880", "CommentCount": "2", "CreationDate": "2013-07-23T09:11:00.880", "ParentId": "17805220", "Score": "0", "OwnerUserId": "1607051"}, "bq_ids": {"n4140": {"so_17805220_17806165_1": {"length": 13, "quality": 1.0, "section_id": 5937}}, "n3337": {"so_17805220_17806165_1": {"length": 13, "quality": 1.0, "section_id": 5709}}, "n4659": {"so_17805220_17806165_1": {"length": 13, "quality": 1.0, "section_id": 7421}}}, "17805220": {"ViewCount": "1162", "Body": "<p>I am in need of writing UNIX/LINUX srand48 and drand48 functions in C. I am stuck with setting and using a seed value. I have two functions:</p>\n<pre><code>#include &lt;math.h&gt;\n\nlong int mfml_win_drandX0;  //actual value used for generation\n\nvoid srand48(long int seedval) \n{\n    mfml_win_drandX0=seedval;  //setting seed into mfml_win_drandX0\n}\n\ndouble drand48(void)\n{\n    static const double a=0x273673163155, \n                        c=0x13,\n                m=281474976710656;\n/*EDIT: error was here*/\n    mfml_win_drandX0=fmod(a*mfml_win_drandX0+c,m);;  //computing the next value\n    return mfml_win_drandX0/m; \n}\n</code></pre>\n<p>But when using:</p>\n<pre><code>srand48(2) ;\n\nfor (int i=0;i&lt;10;i++)\n    std::cout&lt;&lt;drand48()&lt;&lt;std::endl;\n</code></pre>\n<p>I get the same number everytime (mfml_win_drandX0) does not change. How to solve this issue? </p>\n", "AcceptedAnswerId": "17806165", "Title": "How to set seed value in equivalent of srand48 function?", "CreationDate": "2013-07-23T08:35:56.897", "Id": "17805220", "CommentCount": "1", "LastEditDate": "2013-07-23T09:47:13.847", "PostTypeId": "1", "LastEditorUserId": "1414786", "LastActivityDate": "2013-07-23T09:47:13.847", "Score": "0", "OwnerUserId": "1414786", "Tags": "<c++><c><random>", "AnswerCount": "2"}, "17806165": {"Id": "17806165", "PostTypeId": "2", "Body": "<p>You cannot guarantee that <code>mfml_win_drandX0</code> will be in a range that representable by a <code>long int</code>, even if you choose long long for its type. AFAIK this is Undefined Behavior:</p>\n<blockquote>\n<p id=\"so_17805220_17806165_0\"><strong>C++11 \u00a75/4</strong>:   </p>\n<p id=\"so_17805220_17806165_1\">\u201cIf during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined.\u201d  </p>\n</blockquote>\n<p>And I guess you should avoid defining m in this way because when you enter a literal that has an integral type, it is defined as an int. Using</p>\n<pre><code>m = 281474976710656LL;\n</code></pre>\n<p>is better, however this does not solve your main problem. Also, take care with</p>\n<pre><code>mfml_win_drandX0 = a * mfml_win_drandX0 + c;\n</code></pre>\n<p>Where you do a conversion from <code>const double</code> to <code>long</code>.</p>\n", "LastEditorUserId": "1673391", "LastActivityDate": "2013-07-23T09:42:21.260", "Score": "3", "CreationDate": "2013-07-23T09:19:39.137", "ParentId": "17805220", "CommentCount": "3", "OwnerUserId": "1837006", "LastEditDate": "2013-07-23T09:42:21.260"}});