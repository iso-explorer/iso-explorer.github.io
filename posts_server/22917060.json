post_cb({"22917060": {"ViewCount": "303", "Body": "<p>If I reach the limits of the used integer (currently on my implementation <code>long long</code>) I either lose the first or the last digits, depending on what is first done (multiplication or division). Looking into my implementation multiplication is done first, so I'm losing the first digits. My question is, is it defined somewhere (best in the draft) what is done first?</p>\n<h2>edit:</h2>\n<p>the implementation is like (shorted version):</p>\n<pre><code>count * num / den;\n</code></pre>\n<p>boost's implementation is the same.</p>\n", "AcceptedAnswerId": "22917247", "Title": "Is std::ratio calculation order in std::chrono::duration defined?", "CreationDate": "2014-04-07T15:43:41.240", "Id": "22917060", "CommentCount": "4", "LastEditDate": "2014-04-07T16:12:36.877", "PostTypeId": "1", "LastEditorUserId": "1277769", "LastActivityDate": "2014-04-07T16:12:36.877", "Score": "1", "OwnerUserId": "1810087", "Tags": "<c++><c++11><ratio><chrono>", "AnswerCount": "1"}, "22917247": {"Id": "22917247", "PostTypeId": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\"><strong>N3797</strong></a> has this to say on <code>std::ratio</code>:</p>\n<p><strong>N3797 [20.11.4] [ratio.arithmetic]</strong></p>\n<blockquote>\n<p id=\"so_22917060_22917247_0\">2  If it is not possible to represent U or V with intmax_t, the program is ill-formed. Otherwise, an implementation should yield correct values of U and V. If it is not possible to represent X or Y with intmax_t, the\n  program is ill-formed unless the implementation yields correct values of U and V.</p>\n</blockquote>\n<p>It then gives the following:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>// The following cases may cause the program to be ill-formed under some implementations\nstatic_assert(ratio_add&lt;ratio&lt;1,INT_MAX&gt;, ratio&lt;1,INT_MAX&gt;&gt;::num == 2,\n\"1/MAX+1/MAX == 2/MAX\");\nstatic_assert(ratio_add&lt;ratio&lt;1,INT_MAX&gt;, ratio&lt;1,INT_MAX&gt;&gt;::den == INT_MAX,\n\"1/MAX+1/MAX == 2/MAX\");\nstatic_assert(ratio_multiply&lt;ratio&lt;1,INT_MAX&gt;, ratio&lt;INT_MAX,2&gt;&gt;::num == 1,\n\"1/MAX * MAX/2 == 1/2\");\nstatic_assert(ratio_multiply&lt;ratio&lt;1,INT_MAX&gt;, ratio&lt;INT_MAX,2&gt;&gt;::den == 2,\n\"1/MAX * MAX/2 == 1/2\");\n</code></pre>\n<p>This seems to me to suggest that if your program would overflow either the denominator or the numerator in intermediate calculations, the program is ill-formed.</p>\n", "LastEditorUserId": "1277769", "LastActivityDate": "2014-04-07T16:10:54.743", "Score": "4", "CreationDate": "2014-04-07T15:53:29.940", "ParentId": "22917060", "CommentCount": "1", "LastEditDate": "2014-04-07T16:10:54.743", "OwnerUserId": "1277769"}, "bq_ids": {"n4140": {"so_22917060_22917247_0": {"length": 17, "quality": 1.0, "section_id": 4732}}, "n3337": {"so_22917060_22917247_0": {"length": 17, "quality": 1.0, "section_id": 4539}}, "n4659": {"so_22917060_22917247_0": {"length": 17, "quality": 1.0, "section_id": 6144}}}});