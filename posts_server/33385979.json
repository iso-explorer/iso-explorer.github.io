post_cb({"33385979": {"CommentCount": "2", "ViewCount": "83", "PostTypeId": "1", "LastEditorUserId": "678093", "CreationDate": "2015-10-28T08:19:19.223", "LastActivityDate": "2015-10-28T08:42:23.817", "Title": "Why does initialization of my object with variadic template arguments require the definition of move constructor?", "LastEditDate": "2015-10-28T08:42:23.817", "Id": "33385979", "Score": "4", "Body": "<p>I want to create a local object of some <code>typename</code> <code>Type</code> in a template function:</p>\n<pre><code>template &lt;typename Type, typename... Args&gt;\nvoid create_local(Args... args)\n{\n    Type val(args...);\n}\n</code></pre>\n<p>Now, when I call this function with no arguments (where <code>Type</code> is a class with a non-copyable member):</p>\n<pre><code>struct T {\n    std::mutex m;\n};\n\nint main()\n{\n    T t;               // OK: No use of move constructor\n    create_local&lt;T&gt;(); // Error: Requires deleted move constructor!!!\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ed2eb680fe5e3212\" rel=\"nofollow\">(coliru link)</a></p>\n<p>g++ (from 4.7.3 to 5.2) fails to compile and requires the definition of the move constructor of T? clang 3.7 compiles successfully.</p>\n<p>Additionally, if I (1) remove <code>std::mutex</code> member from T, (2) declare default constructor for T, and (3) declare a deleted copy-constructor for T:</p>\n<pre><code>struct T {\n    T() = default;\n    T(const T&amp;) = delete;\n};\n\nint main()\n{\n    T t;               // OK: No use of move constructor\n    create_local&lt;T&gt;(); // OK: No use of move constructor\n}\n</code></pre>\n<p>all versions of g++ and clang compiles successfully. Why does g++ not compile for any type <code>Type</code> with non-copyable members?</p>\n", "Tags": "<templates><c++11><g++><clang><variadic-templates>", "OwnerUserId": "92318", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33385979_33386355_1": {"section_id": 123, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_33385979_33386355_1": {"section_id": 117, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_33385979_33386355_1": {"section_id": 127, "quality": 0.5714285714285714, "length": 4}}}, "33386355": {"ParentId": "33385979", "CommentCount": "0", "Body": "<p>According to Andrey Zholos's comment in <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58089\" rel=\"nofollow\">this</a> bug report:</p>\n<blockquote>\n<p id=\"so_33385979_33386355_0\">I also stumbled onto this bug, and bug 59141 is a duplicate.</p>\n<p id=\"so_33385979_33386355_1\">It appears the empty parameter pack is expanded as t({}) rather than t().</p>\n<p id=\"so_33385979_33386355_2\">There is a similar example in 14.5.3p6 that indicates obj should be value-initialized (not copy-constructed), and clang accepts this code.</p>\n</blockquote>\n", "OwnerUserId": "92318", "PostTypeId": "2", "Id": "33386355", "Score": "1", "CreationDate": "2015-10-28T08:42:16.913", "LastActivityDate": "2015-10-28T08:42:16.913"}});