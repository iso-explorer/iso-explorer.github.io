post_cb({"23957179": {"PostTypeId": "2", "ParentId": "23956875", "Body": "<p>This is a remnant from C. In C the empty parameter list does not mean a function that takes no arguments, but rather a function with unspecified number of arguments. In C++ <code>foo(void)</code> is deprecated, and <code>foo()</code> is preferred, as it specifically means a function that takes no parameters. The same goes with your destructor as well. Although, the two lines of code are equivalent you should prefer the <code>~ResourceManager()</code> version.</p>\n", "CreationDate": "2014-05-30T14:38:29.430", "Score": "6", "CommentCount": "2", "Id": "23957179", "OwnerUserId": "2352671", "LastActivityDate": "2014-05-30T14:38:29.430"}, "23956896": {"PostTypeId": "2", "ParentId": "23956875", "Body": "<p>There's no difference between these two lines of code. <code>()</code> is the same as <code>(void)</code>. From a style perspective, <code>()</code> is what I've always seen for functions with no argument.</p>\n", "CreationDate": "2014-05-30T14:23:15.777", "Score": "2", "CommentCount": "0", "Id": "23956896", "OwnerUserId": "290072", "LastActivityDate": "2014-05-30T14:23:15.777"}, "23956926": {"PostTypeId": "2", "ParentId": "23956875", "Body": "<p>Both lines are equivalent. Some developers like to explicit <code>(void)</code> in signature of parameterless functions to say to anyone reading it \"It does not take any parameters\"</p>\n", "CreationDate": "2014-05-30T14:24:39.393", "Score": "2", "LastEditDate": "2014-05-30T14:37:28.647", "CommentCount": "0", "Id": "23956926", "OwnerUserId": "3510483", "LastEditorUserId": "2596375", "LastActivityDate": "2014-05-30T14:37:28.647"}, "23956875": {"LastEditDate": "2014-05-31T14:15:16.080", "Body": "<p>Looking at some old code of mine, I see that out of clumsiness I defined a destructor like so :</p>\n<pre><code>~ResourceManager(void);\n</code></pre>\n<p>This not only compiles, but works as expected. I changed it of course to </p>\n<pre><code>~ResourceManager();\n</code></pre>\n<p>but was I too quick to refactor? Is the first version correct and good C++ style? </p>\n<h2>EDIT</h2>\n<p>Since the question was closed and won't get any chance for proper disambiguation, I should put the related quote from the standard <strong>that answers this question, when destructors are put in perspective</strong></p>\n<p><strong>12.4</strong> Destructors</p>\n<blockquote id=\"so_23956875_23956875_0\">\n<ol>\n<li>A special declarator syntax using an optional function-specifier (7.1.2) followed by \u02dc followed by the destructor\u2019s class name followed by <strong>an empty parameter list</strong> is used to declare the destructor in a class definition. In such a declaration, the \u02dc followed by the destructor\u2019s class name can be enclosed in optional parentheses; such parentheses are ignored. A typedef-name shall not be used as the class-name following the \u223c in the declarator for a destructor declaration.</li>\n</ol>\n</blockquote>\n<p>So <strong>the standard mandates an empty parameter list</strong>. Maybe backwards compatibility with C  practices for <strong>free functions</strong> (where <code>f(void)</code> is the way to declare an empty parameter list) took destructors along with them in implementations, but it <strong>certainly doesn't seem to be valid C++</strong>.</p>\n", "CreationDate": "2014-05-30T14:22:26.833", "Score": "5", "CommentCount": "5", "OwnerUserId": "2567683", "ClosedDate": "2014-05-30T14:43:09.617", "Title": "Can I have a ~destructor(void)?", "LastActivityDate": "2014-05-31T14:15:16.080", "PostTypeId": "1", "Tags": "<c++><standards>", "AnswerCount": "3", "FavoriteCount": "1", "Id": "23956875", "ViewCount": "770", "LastEditorUserId": "13295"}, "bq_ids": {"n3337": {"so_23956875_23956875_0": {"quality": 0.9743589743589743, "length": 38, "section_id": 388}}}});