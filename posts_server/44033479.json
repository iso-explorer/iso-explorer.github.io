post_cb({"bq_ids": {"n4140": {"so_44033479_44033560_0": {"length": 6, "quality": 1.0, "section_id": 705}, "so_44033479_44033526_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1712}}, "n3337": {"so_44033479_44033560_0": {"length": 6, "quality": 1.0, "section_id": 695}, "so_44033479_44033526_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1708}}, "n4659": {"so_44033479_44033560_0": {"length": 6, "quality": 1.0, "section_id": 734}, "so_44033479_44033526_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1874}}}, "44033526": {"Id": "44033526", "PostTypeId": "2", "Body": "<p>Yes it will work correctly. The overload of <code>std::max_element</code> that will be invoked in this case is</p>\n<pre><code>template&lt; class ForwardIt &gt; \nForwardIt max_element(ForwardIt first, ForwardIt last);\n</code></pre>\n<p>The only requirements on the iterators are</p>\n<blockquote>\n<p id=\"so_44033479_44033526_0\"><code>first</code>, <code>last</code>    -   forward iterators defining the range to examine</p>\n</blockquote>\n<p>So there is no requirement about random access iterators, only forward iterators.</p>\n", "LastActivityDate": "2017-05-17T19:43:24.833", "CommentCount": "1", "CreationDate": "2017-05-17T19:43:24.833", "ParentId": "44033479", "Score": "6", "OwnerUserId": "2296458"}, "44033479": {"ViewCount": "248", "Body": "<p>Can I code like <code>std::max_element(std::begin(my_deque), std::end(my_deque))</code>?</p>\n<p>I am asking because I know deque is not guaranteed to store continuously, so I want to know if it will behave correctly when using functions involving iterator like <code>std::max_element</code>?</p>\n<p>Thank you very much! </p>\n", "AcceptedAnswerId": "44033560", "Title": "Can I use std::max_element() on std::deque in c++11?", "CreationDate": "2017-05-17T19:40:18.473", "Id": "44033479", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2017-05-17T19:45:42.343", "Score": "5", "OwnerUserId": "5025141", "Tags": "<c++><c++11><std><deque>", "AnswerCount": "2"}, "44033560": {"Id": "44033560", "PostTypeId": "2", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/algorithm/max_element\" rel=\"noreferrer\"><code>std::max_element</code></a> has a signature in the form of</p>\n<pre><code>template&lt;class ForwardIterator&gt;\nForwardIterator max_element(ForwardIterator first, ForwardIterator last);\n</code></pre>\n<p>From the template type name we know that it requires a forward iterator.  Per [container.requirements.general]-Table 96 we know that <code>std::deque</code> uses  </p>\n<blockquote>\n<p id=\"so_44033479_44033560_0\">any iterator category that meets the forward iterator requirements</p>\n</blockquote>\n<p>So since it uses a forward iterator or better it will always be okay.</p>\n", "LastActivityDate": "2017-05-17T19:45:42.343", "CommentCount": "0", "CreationDate": "2017-05-17T19:45:42.343", "ParentId": "44033479", "Score": "7", "OwnerUserId": "4342498"}});