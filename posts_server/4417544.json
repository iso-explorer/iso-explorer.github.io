post_cb({"bq_ids": {"n4140": {"so_4417544_4417604_1": {"length": 28, "quality": 0.875, "section_id": 438}, "so_4417544_4417604_4": {"length": 27, "quality": 0.9310344827586207, "section_id": 438}, "so_4417544_4417604_3": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_4417544_4417604_1": {"length": 28, "quality": 0.875, "section_id": 429}, "so_4417544_4417604_4": {"length": 27, "quality": 0.9310344827586207, "section_id": 429}, "so_4417544_4417604_3": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_4417544_4417604_1": {"length": 28, "quality": 0.875, "section_id": 458}, "so_4417544_4417604_4": {"length": 27, "quality": 0.9310344827586207, "section_id": 458}, "so_4417544_4417604_3": {"length": 6, "quality": 1.0, "section_id": 458}}}, "4417544": {"ViewCount": "108", "Body": "<p>While I learn how to implement a final class in C++, I find such a statement:</p>\n<p><a href=\"http://www.parashift.com/c++-faq-lite/strange-inheritance.html#faq-23.11\" rel=\"nofollow\">\"the most derived class's ctor needs to directly call the virtual base class's ctor.\"</a></p>\n<p>However, I can't find the original of the statement in the C++ standard. (N3126)</p>\n<p>Who can tell me the exact page number?</p>\n<p>Thanks in advance.</p>\n", "AcceptedAnswerId": "4417604", "Title": "Where is the original of the statement \"the most derived class's ctor needs to directly call the virtual base class's ctor\"?", "CreationDate": "2010-12-11T16:03:17.823", "Id": "4417544", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-12-11T16:15:34.747", "Score": "0", "OwnerUserId": "508343", "Tags": "<c++><virtual-inheritance>", "AnswerCount": "2"}, "4417604": {"Id": "4417604", "PostTypeId": "2", "Body": "<p>In C++03, it's \u00a7 12.6.2 5</p>\n<blockquote>\n<p id=\"so_4417544_4417604_0\">Initialization shall proceed in the following order:</p>\n<p id=\"so_4417544_4417604_1\">\u2014 First, and only for the constructor of the most derived class as described below, virtual base classes shall be initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base class names in the derived class base-specifier-list.</p>\n<p id=\"so_4417544_4417604_2\">...</p>\n</blockquote>\n<p>In the current draft for C++0x (N3126), it's \u00a7 12.6.2 10, which is page 270:</p>\n<blockquote>\n<p id=\"so_4417544_4417604_3\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_4417544_4417604_4\">\u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-\ufb01rst left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-speci\ufb01er-list</p>\n<p id=\"so_4417544_4417604_5\">...</p>\n</blockquote>\n", "LastActivityDate": "2010-12-11T16:15:34.747", "CommentCount": "1", "CreationDate": "2010-12-11T16:15:34.747", "ParentId": "4417544", "Score": "1", "OwnerUserId": "90527"}, "4417586": {"Id": "4417586", "PostTypeId": "2", "Body": "<p>N3126 is <strong><em>not</em></strong> the C++ standard.</p>\n<p>It's a draft for the upcoming C++ standard.</p>\n<p>But anyway, the info about initialization is in the section about initialization for derived classes.</p>\n", "LastActivityDate": "2010-12-11T16:11:42.590", "CommentCount": "2", "CreationDate": "2010-12-11T16:11:42.590", "ParentId": "4417544", "Score": "0", "OwnerUserId": "464581"}});