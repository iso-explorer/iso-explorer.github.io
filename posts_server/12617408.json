post_cb({"12617408": {"ViewCount": "15823", "Body": "<blockquote>\n<p id=\"so_12617408_12617408_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/8488841/value-returning-1-inf000\">Value returning 1.#INF000</a> </br></p>\n</blockquote>\n<p>I always thought division by 0 would result in a compiled program crashing</p>\n<p>However I discovered today (using VC++ 2010 Express) that division by 0 gives something called 1.#INF000 and it is supposed to be positive infinity</p>\n<p>When it was passed to a function, it got passed as -1.#IND000</p>\n<p>What is this all about?</p>\n<p>Searching 1.#INF000 and -1.#IND000 on google do not provide any clear explanations either</p>\n<p>Is it just something specific to VC++ ?</p>\n", "AcceptedAnswerId": "12617540", "Title": " A few things about division by zero in C", "CreationDate": "2012-09-27T08:44:09.587", "Id": "12617408", "CommentCount": "8", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:48:19.090", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-27T14:40:55.753", "ClosedDate": "2012-09-28T05:44:43.927", "Score": "18", "OwnerUserId": "1693203", "Tags": "<c++><c><visual-c++>", "AnswerCount": "4"}, "12623987": {"Id": "12623987", "PostTypeId": "2", "Body": "<p>you can use the following code sniplet in C.\nit throws the exception. it works on linux donno about windows though</p>\n<pre><code>#include &lt;fenv.h&gt;\n\n#include &lt;TRandom.h&gt;\nstatic void __attribute__ ((constructor)) trapfpe(void)\n{\n    /* Enable some exceptions. At startup all exceptions are masked. */\n    feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);\n}\n</code></pre>\n", "LastActivityDate": "2012-09-27T14:40:55.753", "CommentCount": "0", "CreationDate": "2012-09-27T14:40:55.753", "ParentId": "12617408", "Score": "0", "OwnerUserId": "1703586"}, "12617540": {"Id": "12617540", "PostTypeId": "2", "Body": "<p>Floating point division by zero behaves differently than integer division by zero.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Division_by_zero#In_computer_arithmetic\">The IEEE floating point standard</a> differentiates between +inf and -inf, while integers cannot store infinity. Integer division by zero results in undefined behaviour. Floating point division by zero is defined by the floating point standard and results in +inf or -inf.</p>\n<p><strong>Edit:</strong></p>\n<p>As pointed out by Luchian, C++ implementations are not required to follow the IEEE Floating point standard. If the implementation you use doesn't follow the IEEE Floating point standard the result of floating point division by zero is undefined.</p>\n", "LastEditorUserId": "646887", "LastActivityDate": "2012-09-27T10:06:58.393", "Score": "24", "CreationDate": "2012-09-27T08:52:20.703", "ParentId": "12617408", "CommentCount": "12", "OwnerUserId": "646887", "LastEditDate": "2012-09-27T10:06:58.393"}, "bq_ids": {"n4140": {"so_12617408_12617974_0": {"length": 4, "quality": 0.8, "section_id": 6106}}, "n3337": {"so_12617408_12617974_0": {"length": 4, "quality": 0.8, "section_id": 5872}}, "n4659": {"so_12617408_12617974_0": {"length": 4, "quality": 0.8, "section_id": 7603}}}, "12617974": {"Id": "12617974", "PostTypeId": "2", "Body": "<p>Quoting the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"noreferrer\">latest draft</a> of the ISO C++ standard, section 5.6 ([expr.mul]):</p>\n<blockquote>\n<p id=\"so_12617408_12617974_0\">If the second operand of / or % is zero the behavior is undefined.</p>\n</blockquote>\n<p>This applies to both integer and floating-point division.</p>\n<p>A particular C++ implementation may conform to the <a href=\"http://en.wikipedia.org/wiki/IEEE_floating-point\" rel=\"noreferrer\">IEEE floating-point standard</a>, which has more specific requirements for division by zero, which which case the behavior may be well defined <em>for that implementation</em>. That's probably why floating-point division by zero yields Infinity in your implementation. But the C++ standard doesn't require IEEE floating-point behavior.</p>\n", "LastActivityDate": "2012-09-27T09:16:00.037", "CommentCount": "2", "CreationDate": "2012-09-27T09:16:00.037", "ParentId": "12617408", "Score": "9", "OwnerUserId": "827263"}, "12617439": {"Id": "12617439", "PostTypeId": "2", "Body": "<p>Edit: The question is about C++ and the result in C++ is undefined, as <strong>clearly stated by the standard</strong>, not the IEEE or whatever other entity that doesn't, in fact, regulate the C++ language. The standard does. C++ implementations <em>might</em> follow IEEE rules, but in this case it's clear the behavior is undefined.</p>\n<blockquote>\n<p id=\"so_12617408_12617439_0\">I always thought division by 0 would result in a compiled program crashing</p>\n</blockquote>\n<p>Nope, it results in undefined behavior. Anything can happen, a crash is not guaranteed.</p>\n<p>According to the C++ Standard:</p>\n<h3>5.6 Multiplicative operators</h3>\n<blockquote>\n<p id=\"so_12617408_12617439_1\">4) The binary / operator yields the quotient, and the binary %\n  operator yields the remainder from the division of the first\n      expression by the second. <strong>If the second operand of / or % is zero the behavior is undefined</strong>; otherwise (a/b)*b + a%b\n      is equal to a. If both operands are nonnegative then the remainder is nonnegative; if not, the sign of the remainder is\n      implementation-defined79). (emphasis mine)</p>\n</blockquote>\n", "LastEditorUserId": "673730", "LastActivityDate": "2012-09-27T09:18:21.953", "Score": "12", "CreationDate": "2012-09-27T08:46:13.753", "ParentId": "12617408", "CommentCount": "5", "OwnerUserId": "673730", "LastEditDate": "2012-09-27T09:18:21.953"}});