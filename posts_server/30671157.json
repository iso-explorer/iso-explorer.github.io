post_cb({"30671157": {"CommentCount": "0", "ViewCount": "405", "CreationDate": "2015-06-05T16:13:07.317", "LastActivityDate": "2015-06-05T17:15:10.553", "Title": "Initializing <random> classes in constructor causes segfault", "AcceptedAnswerId": "30671218", "PostTypeId": "1", "Id": "30671157", "Score": "2", "Body": "<p>In the code below, <code>RandomCharSource</code> is supposed to simply return a random character upon request. Its constructor is initializing an <code>mt19937</code>, <code>uniform_int_distribution&lt;int&gt;</code> and a <code>random_device</code>. However, when I instantiate my object, I get a segfault.</p>\n<p>When I create these random classes manually in the <code>bar()</code> function below, it works fine.</p>\n<p>What am I doing wrong? Is there an initialization order issue here? I'm using GCC 4.7.3.</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\n\nclass RandomCharSource\n{\npublic:\n    explicit RandomCharSource() : _re{_rd()}, _dist{0, 255} {};\n    inline char get_next_char() { return _dist(_re); };\nprivate:\n    std::mt19937 _re;\n    std::uniform_int_distribution&lt;int&gt; _dist;\n    std::random_device _rd;\n};\n\nvoid foo()\n{\n    RandomCharSource s;\n    std::cout &lt;&lt; s.get_next_char() &lt;&lt; std::endl;\n}\n\nvoid bar()\n{\n    std::random_device _rd;\n    std::mt19937 _re{_rd()};\n    std::uniform_int_distribution&lt;int&gt; _dist{0,255};\n    std::cout &lt;&lt; (char)_dist(_re) &lt;&lt; std::endl;\n}\n\nint main()\n{\n    bar(); // Works OK\n    foo(); // Segfault\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><random>", "OwnerUserId": "425871", "AnswerCount": "1"}, "30671218": {"ParentId": "30671157", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-06-05T16:16:48.700", "Score": "6", "LastEditorUserId": "2296458", "LastEditDate": "2015-06-05T17:15:10.553", "Id": "30671218", "OwnerUserId": "2296458", "Body": "<p>It is because of your initialization order</p>\n<pre><code>class RandomCharSource\n{\npublic:\n    explicit RandomCharSource() : _re{_rd()}, _dist{0, 255} {};\n    inline char get_next_char() { return _dist(_re); };\nprivate:\n    std::mt19937 _re;\n    std::uniform_int_distribution&lt;int&gt; _dist;\n    std::random_device _rd;\n};\n</code></pre>\n<p>You need to have <code>_rd</code> before <code>_re</code>. The members are initialized in the order they are declared in the class. So when you try to initialize <code>_re</code> using <code>_rd</code>, <code>_rd</code> hasn't yet been initialized.</p>\n<p>From the standard <code>\u00a712.6.2.13</code> (emphasis mine)</p>\n<blockquote>\n<p id=\"so_30671157_30671218_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_30671157_30671218_1\">13.1 \u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.<br>\n  13.2 \u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).<br>\n  13.3 \u2014 Then, <strong>non-static data members are initialized in the order they were declared in the class definition</strong> (again regardless of the order of the mem-initializers).<br>\n  13.4 \u2014 Finally, the compound-statement of the constructor body is executed.<br>\n  [Note: The declaration order is mandated to ensure that base and member subobjects are destroyed in the\n  reverse order of initialization. \u2014end note]</br></br></br></br></p>\n</blockquote>\n", "LastActivityDate": "2015-06-05T17:15:10.553"}, "bq_ids": {"n4140": {"so_30671157_30671218_1": {"section_id": 438, "quality": 0.9012345679012346, "length": 73}, "so_30671157_30671218_0": {"section_id": 438, "quality": 1.0, "length": 6}}, "n3337": {"so_30671157_30671218_1": {"section_id": 429, "quality": 0.9012345679012346, "length": 73}, "so_30671157_30671218_0": {"section_id": 429, "quality": 1.0, "length": 6}}, "n4659": {"so_30671157_30671218_0": {"section_id": 458, "quality": 1.0, "length": 6}, "so_30671157_30671218_1": {"section_id": 458, "quality": 0.9012345679012346, "length": 73}}}});