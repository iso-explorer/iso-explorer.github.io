post_cb({"42119940": {"Id": "42119940", "PostTypeId": "2", "Body": "<p>Shortening this to a simple</p>\n<pre><code>unsigned char x(x);\n</code></pre>\n<p>and testing this online on <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow noreferrer\">http://webcompiler.cloudapp.net/</a> shows that current versions of Microsoft's compiler still reject it.</p>\n<p>This is a compiler bug. Quoting the standard (N4140, roughly C++14, but the rule is the same in earlier standards):</p>\n<blockquote>\n<p id=\"so_42119710_42119940_0\"><strong>3.3.2 Point of declaration [basic.scope.pdecl]</strong></p>\n<p id=\"so_42119710_42119940_1\">1 The <em>point of declaration</em> for a name is immediately after its complete declarator (Clause 8) and before its <em>initializer</em> (if any), except as noted below. [<em>Example:</em></p>\n<pre><code>unsigned char x = 12;\n{ unsigned char x = x; }\n</code></pre>\n<p id=\"so_42119710_42119940_2\">Here the second <code>x</code> is initialized with its own (indeterminate) value. -- <em>end example</em> ]</p>\n</blockquote>\n<p>Both <code>= x;</code> and <code>(x);</code> are grammatically an <em>initializer</em>, and there is no exception anywhere that says that in the <code>(x);</code> syntax, the variable <code>x</code> would somehow not yet be in scope.</p>\n<p>Visual Studio's compiler does accept it with the <code>= x;</code> syntax.</p>\n<p>But as it only affects code where a variable is used in its own initialisation, a better re-working of the code would simply avoid the problem entirely.</p>\n", "LastActivityDate": "2017-02-08T17:36:04.843", "Score": "4", "CreationDate": "2017-02-08T17:36:04.843", "ParentId": "42119710", "CommentCount": "8", "OwnerUserId": "743382"}, "bq_ids": {"n4140": {"so_42119710_42119940_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_42119710_42119940_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 7049}}, "n3337": {"so_42119710_42119940_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_42119710_42119940_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6794}}, "n4659": {"so_42119710_42119940_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_42119710_42119940_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 8546}}}, "42119710": {"ViewCount": "60", "Body": "<p>Based on <a href=\"https://stackoverflow.com/a/19596632/3657206\">this answer</a>, I came up with <a href=\"https://godbolt.org/g/6DrQUN\" rel=\"nofollow noreferrer\">this code</a> for a constant tree structure in C++:</p>\n<pre><code>#include &lt;tuple&gt;\nstruct T\n{\n    T(const char* n, const T&amp; n1, const T&amp; n2, const T&amp; n3, const T&amp; n4):\n        name(n), nodes(n1, n2, n3, n4) {}\n\n    const char* name;\n    std::tuple&lt;const T&amp;, const T&amp;, const T&amp;, const T&amp;&gt; nodes;\n};\n\nT n(0, n, n, n, n);\n</code></pre>\n<p>GCC (both 4.5.3 and recent versions), ICC (17), and CLang (3.5 and recent versions) all compile this code (CLang 3.5 issues a <code>-Wuninitialized</code> warning for it, but that's OK as <code>n</code> is a placeholder whose value is irrelevant).</p>\n<p>Yet, MSVC 11 (VS2012) pukes a C2065 error on the definition of <code>n</code>:</p>\n<blockquote>\n<p id=\"so_42119710_42119710_0\">test6.cpp(12) : error C2065: 'n' : undeclared identifier</p>\n</blockquote>\n<p>What gives?  Is MSVC rejecting valid code? Am I off in UB-land with demons flying out of my nose?  If this is not valid, can someone please tell me what in the Standard makes it invalid and/or why GCC, Clang, and ICC all accept it?</p>\n", "AcceptedAnswerId": "42119940", "Title": "VS2012 doesn't compile this code, but G++, clang, and ICC all accept it without a diagnostic", "CreationDate": "2017-02-08T17:23:10.223", "Id": "42119710", "CommentCount": "9", "LastEditDate": "2017-05-23T11:53:27.663", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-02-08T17:36:04.843", "Score": "1", "OwnerUserId": "3657206", "Tags": "<c++><visual-studio-2012>", "AnswerCount": "1"}});