post_cb({"37177454": {"CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_37177423_37177454_0\">if a Static variable is used inside a static function is the variable only initialised once ?</p>\n</blockquote>\n<p>The answer is \"yes\".<br>\nIt is also \"yes\" for <code>static</code> variables of regular, i.e. non-<code>static</code>, member functions.<br>\nIt is also \"yes\" for <code>static</code> variables of non-member functions.  </br></br></p>\n", "CreationDate": "2016-05-12T04:44:08.097", "ParentId": "37177423", "Id": "37177454", "LastActivityDate": "2016-05-12T04:44:08.097", "PostTypeId": "2", "Score": "3", "OwnerUserId": "434551"}, "37179977": {"CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_37177423_37179977_0\">In General I would like to ask where a Member Static function's local variables are stored ?</p>\n</blockquote>\n<p>Depends. A static constant plain old datatype may be stored in a read-only data segment. A static variable with constant initializer may be stored in the data segment, and a static variable that requires dynamic initialization may be stored in the BSS segment.</p>\n<blockquote>\n<p id=\"so_37177423_37179977_1\">if a Static variable is used inside a static function is the variable only initialised once ?</p>\n</blockquote>\n<p>Yes. In this case, SomeMap will be initialized the first time control passes through its declaration. </p>\n<blockquote>\n<p id=\"so_37177423_37179977_2\">The zero-initialization (8.5) of all local objects with static storage duration (3.7.1) is performed before any\n  other initialization takes place. A local object of POD type (3.9) with static storage duration initialized with\n  constant-expressions is initialized before its block is first entered. An implementation is permitted to perform\n  early initialization of other local objects with static storage duration under the same conditions that an\n  implementation is permitted to statically initialize an object with static storage duration in namespace scope\n  (3.6.2). Otherwise such an object is initialized the first time control passes through its declaration; such an\n  object is considered initialized upon the completion of its initialization. If the initialization exits by throwing\n  an exception, the initialization is not complete, so it will be tried again the next time control enters the\n  declaration.</p>\n</blockquote>\n<p><em>Section 6.7, paragraph 4 of ISO/IEC 14882:2003(E)</em> (sorry, I don't have a more recent copy of the standard handy)</p>\n<blockquote>\n<p id=\"so_37177423_37179977_3\">From the above code, is there an advantage of declaring SomeMap as static ?( I expect it to be only initialized once )</p>\n</blockquote>\n<p>Yes there is an advantage to declaring it static -- it will only be initialized once and only initialized if it is used. If Test::GetSomeMap is never call, SomeMap is never initialized.</p>\n<p>As @Blacktempel states above, however, Test::GetSomeMap should return by reference to remove any doubts about the creation of extra copies SomeMap. </p>\n<p>You should also note that you are incurring the cost of the creation of three strings (CONST1, CONST2, and CONST3), each of which may allocate heap memory to store the a copy of their constant-expression character string initializers (\"const1\", \"const2\", \"const3\"). Furthermore, if you call Test::GetSomeMap, you are also incurring the cost of initializing the SomeMap vector which may also allocate heap memory to store the copies of the strings.</p>\n<p>If you are concerned about memory usage and initialization overhead and you truly want a static constant array of strings, just declare one, like so:</p>\n<pre><code>   static const char* const * GetSomeMap(void) {\n    static const char* const SomeMap[] = {\"const1\", \"const2\", \"const3\"};\n    return SomeMap;\n}\n</code></pre>\n<p>SomeMap will consume a minimum of memory with no initialization overhead (and be completely unchangeable).</p>\n", "CreationDate": "2016-05-12T07:23:30.320", "ParentId": "37177423", "Id": "37179977", "LastActivityDate": "2016-05-12T07:23:30.320", "PostTypeId": "2", "Score": "0", "OwnerUserId": "1466877"}, "37177676": {"LastActivityDate": "2016-05-12T05:13:48.120", "CommentCount": "0", "Body": "<p>If a variable is static ,it is stored in heap.\nIf a variable is a member of static function, it is stored in static local variable.\nAnd, they are only  initialised once.</p>\n", "CreationDate": "2016-05-12T05:03:45.127", "LastEditDate": "2016-05-12T05:13:48.120", "ParentId": "37177423", "Id": "37177676", "LastEditorUserId": "5663884", "PostTypeId": "2", "Score": "0", "OwnerUserId": "5663884"}, "bq_ids": {"n4140": {"so_37177423_37179977_2": {"length": 70, "quality": 0.8045977011494253, "section_id": 3919}}, "n3337": {"so_37177423_37179977_2": {"length": 70, "quality": 0.8045977011494253, "section_id": 3779}}}, "37177423": {"CreationDate": "2016-05-12T04:40:58.943", "ViewCount": "77", "Score": "0", "Id": "37177423", "Title": "C++ static varibale inside a member static function", "CommentCount": "4", "Body": "<p>In General I would like to ask where a Member Static function's local variables are stored ? if a Static variable is used inside a static function is the variable only initialised once ?</p>\n<p>Please refer to the code below </p>\n<pre><code>std::string const CONST1 = \"const1\";\nstd::string const CONST2 = \"const2\";\nstd::string const CONST3 = \"const3\";\n\nclass Test\n{\n  public:\n    static const std::vector&lt;std::string&gt; GetSomeMap();\n}\n\nconst std::vector&lt;std::string&gt; Test::GetSomeMap()\n{\n  static std::vector&lt;std::string&gt; SomeMap = boost::assign::list_of(CONST1)(CONST2)(CONST3);\n\n return SomeMap;\n\n}\n</code></pre>\n<p>From the above code, is there an advantage of declaring SomeMap as static ?( I expect it to be only initialized once )</p>\n", "Tags": "<c++><boost><static>", "LastActivityDate": "2016-05-12T07:23:30.320", "PostTypeId": "1", "AnswerCount": "4", "OwnerUserId": "5552940"}, "37177463": {"LastActivityDate": "2016-05-12T04:45:08.530", "CommentCount": "0", "Body": "<p>Static variables inside functions (regardless of the type of function) are <a href=\"https://stackoverflow.com/questions/93039/where-are-static-variables-stored-in-c-c\">stored in the \"DATA\" segment</a>, just like <a href=\"https://stackoverflow.com/questions/14588767/where-in-memory-are-my-variables-stored-in-c\">global variables</a>.  So you could say that in this way, function static variables are similar to global ones, just that they are only accessible by name within a limited scope (the function body).</p>\n", "CreationDate": "2016-05-12T04:45:08.530", "LastEditDate": "2017-05-23T12:16:06.397", "ParentId": "37177423", "Id": "37177463", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "0", "OwnerUserId": "4323"}});