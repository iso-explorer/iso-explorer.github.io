post_cb({"18401594": {"ParentId": "18401345", "CommentCount": "0", "Body": "<p><code>toString()</code> creates a <code>QString</code> object that is deleted immediately, so the data that is contained in it will be freed. I do recommend you to store the data in a <code>QString</code> until you use that <code>char* bin</code>.</p>\n", "OwnerUserId": "1621935", "PostTypeId": "2", "Id": "18401594", "Score": "0", "CreationDate": "2013-08-23T11:22:50.940", "LastActivityDate": "2013-08-23T11:22:50.940"}, "18401484": {"ParentId": "18401345", "CommentCount": "1", "Body": "<p>Can you please  try something like</p>\n<pre><code>std::string sbin(configuration[\"bin\"].toString().toLatin1().data());\nstd::string sTemp(configuration[\"temp\"].toString().toLatin1().data());\n</code></pre>\n", "OwnerUserId": "571156", "PostTypeId": "2", "Id": "18401484", "Score": "0", "CreationDate": "2013-08-23T11:15:00.913", "LastActivityDate": "2013-08-23T11:15:00.913"}, "18401808": {"ParentId": "18401345", "CommentCount": "0", "Body": "<p>Your solution could be shorter, like this:</p>\n<pre><code>char* bin = strdup(configuration[\"bin\"].toString().toLatin1().data().c_str());\nchar* temp = strdup(configuration[\"temp\"].toString().toLatin1().data().c_str());\n</code></pre>\n<p><code>strdup()</code> does virtually all you do.</p>\n", "OwnerUserId": "1961634", "PostTypeId": "2", "Id": "18401808", "Score": "0", "CreationDate": "2013-08-23T11:32:33.023", "LastActivityDate": "2013-08-23T11:32:33.023"}, "18401345": {"CommentCount": "6", "ViewCount": "150", "PostTypeId": "1", "LastEditorUserId": "2121744", "CreationDate": "2013-08-23T11:07:11.600", "LastActivityDate": "2013-08-23T11:32:33.023", "Title": "Why my char* is changing without reason?", "AcceptedAnswerId": "18401479", "LastEditDate": "2013-08-23T11:29:09.693", "Id": "18401345", "Score": "1", "Body": "<p>Details:</p>\n<p>Im using this github project to convert a Json to an object.</p>\n<p><a href=\"https://github.com/ereilin/qt-json\" rel=\"nofollow\">https://github.com/ereilin/qt-json</a></p>\n<p>With this json:</p>\n<pre><code>{\n    \"bin\": \"/home/pablo/milaoserver/compile/Devices01.olk\",\n    \"temp\":\"/home/pablo/milaoserver/temporal/\",\n    \"port\": \"1234\",\n    \"name\": \"lekta\",\n\n}\n</code></pre>\n<p>with this two lines I create two char pointers:</p>\n<pre><code> char* bin = configuration[\"bin\"].toString().toLatin1().data();\n char* temp = configuration[\"temp\"].toString().toLatin1().data();\n</code></pre>\n<p>Debugging the app I have the proper strings. </p>\n<p>However when I use them, concretely the \"bin\" char changes to</p>\n<pre><code>`hom \n</code></pre>\n<p>Any Idea?</p>\n<p>SOLUTION IN COMMENTS:</p>\n<p>The problem was the \"persistence\" of the data.</p>\n<p>I found the solution with:</p>\n<pre><code>std::string binAux(configuration[\"bin\"].toString().toLatin1().data());\nstd::string tempAux(configuration[\"temp\"].toString().toLatin1().data());\n\nchar* bin = new char[binAux.size()+1] ;\nstrcpy(bin, binAux.c_str());\n\nchar* temp = new char[tempAux.size()+1] ;\nstrcpy(temp, tempAux.c_str());\n</code></pre>\n", "Tags": "<c++><json><qt>", "OwnerUserId": "2121744", "AnswerCount": "4"}, "18401479": {"ParentId": "18401345", "LastEditDate": "2013-08-23T11:31:24.797", "CommentCount": "2", "CreationDate": "2013-08-23T11:14:45.350", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "PostTypeId": "2", "Id": "18401479", "Score": "3", "Body": "<p>Your error here is because of temporary object.</p>\n<p><code>toString()</code> create a temporary object no longer available after the semicolon.</p>\n<p>The standard state :</p>\n<blockquote>\n<p id=\"so_18401345_18401479_0\">12.2 Temporary objects [class.temporary]</p>\n<p id=\"so_18401345_18401479_1\">3/ [...] <strong>Temporary objects are destroyed as the last step in evaluating the full-expression</strong> (1.9) that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception. The value computations and side effects of destroying a temporary object are associated only with the full-expression, not with any specific subexpression.</p>\n</blockquote>\n<p>That is, when you want to access it you have <em>Undefined Behavior</em>.</p>\n<p>This should solve your problem :</p>\n<pre><code>QString str = configuration[\"bin\"].toString().toLatin1();\nQByteArray ba = str1.toLatin1();\nchar *bin = ba.data();\n</code></pre>\n<p>But what do you want to use <code>char*</code> ? You are in C++, use <code>std::string</code> or <code>Qstring</code> instead :</p>\n<pre><code>#include &lt;string&gt;\n\nstd::string bin(configuration[\"bin\"].toString().toLatin1().data());\n</code></pre>\n", "LastActivityDate": "2013-08-23T11:31:24.797"}, "bq_ids": {"n4140": {"so_18401345_18401479_1": {"section_id": 380, "quality": 0.9393939393939394, "length": 31}}, "n3337": {"so_18401345_18401479_1": {"section_id": 371, "quality": 0.9393939393939394, "length": 31}}, "n4659": {"so_18401345_18401479_1": {"section_id": 395, "quality": 0.9393939393939394, "length": 31}}}});