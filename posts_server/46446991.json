post_cb({"bq_ids": {"n4140": {"so_46446991_46446991_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 5862}}, "n3337": {"so_46446991_46446991_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 5632}}, "n4659": {"so_46446991_46446991_0": {"length": 36, "quality": 1.0, "section_id": 7345}}}, "46821162": {"Id": "46821162", "PostTypeId": "2", "Body": "<p>This rule forbids problematic things like:</p>\n<pre><code>struct A {\n    static constexpr std::size_t N = sizeof(A);\n    char buffer[N+2];\n};\n</code></pre>\n", "LastActivityDate": "2017-10-19T00:23:09.717", "Score": "1", "CreationDate": "2017-10-19T00:23:09.717", "ParentId": "46446991", "CommentCount": "0", "OwnerUserId": "459640"}, "46446991": {"ViewCount": "78", "Body": "<p>In the c++ standard it is specified that within the class <em>member-specification</em> (class body), the class can be considered <em>completely-defined</em>, but not for static data member initializer [class.mem]:</p>\n<blockquote>\n<p id=\"so_46446991_46446991_0\">A class is considered a completely-defined object type (6.9) (or complete type) at the closing } of the\n  <em>class-specifier</em>. Within the class <em>member-specification</em>, the class is regarded as complete within function\n  bodies, default arguments, <em>noexcept-specifiers</em>, and default member initializers (including such things in\n  nested classes). Otherwise it is regarded as incomplete within its own class <em>member-specification</em>.</p>\n</blockquote>\n<p>EDIT: This is a citation from N4687, wording has changed but I do not believe the meaning changed.</p>\n<p>I was expecting such code to compile:</p>\n<pre><code>struct enum_like\n{\n  static constexpr enum_like enum_member{};\n};\n</code></pre>\n<p>Why such a definition disallowed by the C++ standard?</p>\n<hr>\n<p>I believe compilers could proceed this way:</p>\n<ol>\n<li><p>read member declaration, not definition until class definition closing brace. (Now the compiler has a completely defined class)</p></li>\n<li><p>Analyse static data-member initializer (This way compilers have the constant definition of constexpr members)</p></li>\n<li><p>Analyse other member definitions.</p></li>\n</ol>\n<p>And then resolve recursions for static member intializer as is specified in [decl.init] for non static members!</p>\n</hr>", "Title": "Why are classes not considered completely defined within static data member initializer?", "CreationDate": "2017-09-27T11:42:16.407", "LastActivityDate": "2017-10-19T00:23:09.717", "CommentCount": "7", "LastEditDate": "2017-10-19T00:14:15.943", "PostTypeId": "1", "LastEditorUserId": "963864", "Id": "46446991", "Score": "3", "OwnerUserId": "5632316", "Tags": "<c++><class><initialization><definition>", "AnswerCount": "1"}});