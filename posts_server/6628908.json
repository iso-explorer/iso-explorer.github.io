post_cb({"6628933": {"Id": "6628933", "PostTypeId": "2", "Body": "<p>It's not the compiler's job to debug your code.  </p>\n<p><a href=\"http://www.gimpel.com/html/pcl.htm\" rel=\"nofollow\">lint</a> or similar static checker might find this.  Try running <a href=\"http://msdn.microsoft.com/en-us/library/d3bbz7tz.aspx\" rel=\"nofollow\">Code Analysis</a> if you have one of the premium VS versions that includes it.  Make sure you build with <a href=\"http://msdn.microsoft.com/en-us/library/thxezb7y%28v=VS.100%29.aspx\" rel=\"nofollow\">/W4</a> and fix all warning errors.</p>\n", "LastActivityDate": "2011-07-08T18:41:51.707", "CommentCount": "0", "CreationDate": "2011-07-08T18:41:51.707", "ParentId": "6628908", "Score": "4", "OwnerUserId": "210102"}, "6628980": {"Id": "6628980", "PostTypeId": "2", "Body": "<p>You're returning a pointer to a <code>char</code> at the end. Are you sure the memory that the pointer is referring to is still active when the code leaves the function* (what is the lifetime of <code>model-&gt;GetName()</code>'s return)</p>\n<p>*EDIT: \"loop\" is wrong.</p>\n", "LastEditorUserId": "804773", "LastActivityDate": "2011-07-08T19:07:00.053", "Score": "0", "CreationDate": "2011-07-08T18:45:20.283", "ParentId": "6628908", "CommentCount": "3", "OwnerUserId": "804773", "LastEditDate": "2011-07-08T19:07:00.053"}, "6629019": {"Id": "6629019", "PostTypeId": "2", "Body": "<p>You're not returning a reference to a local variable, as you're returning by value, so the local variable \u2014 the pointer \u2014 is copied.</p>\n<p>Don't confuse the pointer with its pointee.</p>\n<p>If anything, you'd be returning a <em>dangling pointer</em> (though in practice the string literal buffer is likely to be in static memory somewhere). Dangling pointers don't tend to be diagnosed at compile-time.</p>\n<p><em>If</em> <code>model-&gt;GetName()</code> returns a dynamically-allocated buffer, making the pointer no longer point to the string literal, then your code is fine.</p>\n<p>TRWTF is that you didn't write <code>char const* szEmployeeName = \"\"</code>. Leaving out the <code>const</code> has been deprecated for over a decade, and is illegal in C++0x. It's a concern that so many people are still doing this.</p>\n<p><strong>It's even worse that there are still people using <code>char*</code> for strings, instead of <code>std::string</code>.</strong></p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-07-08T19:00:28.570", "Score": "2", "CreationDate": "2011-07-08T18:48:20.143", "ParentId": "6628908", "CommentCount": "7", "OwnerUserId": "560648", "LastEditDate": "2011-07-08T19:00:28.570"}, "6629348": {"Id": "6629348", "PostTypeId": "2", "Body": "<p>This code isn't necessarily \"wrong\" in all cases. If the thing pointed to by the pointer returned from <code>GetName</code> is still alive, and the pointer returned from <code>GetEmployeeName</code> is not written to then the code appears to be well-formed. The compiler can't reasonably be expected to do a full analysis of all your code to tell you if there's an actual problem with your pointer manipulation.</p>\n<p>You should be using <code>std::string</code> as @Tomalak Geret'kal noted in his answer. That then resolves all these lifetime issues.</p>\n<p>There's a certain point at which you should be able to say \"Why am I writing code this way???\" and the compiler isn't going to go to extra-ordinary lengths to warn you about every possible undefined behavior in your program (it's undefined for a reason).</p>\n", "LastActivityDate": "2011-07-08T19:18:34.843", "CommentCount": "0", "CreationDate": "2011-07-08T19:18:34.843", "ParentId": "6628908", "Score": "0", "OwnerUserId": "251738"}, "6628908": {"ViewCount": "186", "Body": "<p>As far as I know the following code is bad. But, Visual Studio 2010 doesn't give me any warning.</p>\n<pre><code>char* CEmployee::GetEmployeeName()\n{\n  char* szEmployeeName = \"\";\n  CEmployeeModel* model = GetSwitchMod();\n  if (model != NULL)\n  {\n    szEmployeeName = model-&gt;GetName();\n  }\n\n  return szEmployeeName; \n}  \n</code></pre>\n", "Title": "Compiler ignores code returning a local char* from a function", "CreationDate": "2011-07-08T18:40:03.170", "LastActivityDate": "2011-07-09T10:19:01.093", "CommentCount": "12", "LastEditDate": "2011-07-08T18:46:16.437", "PostTypeId": "1", "LastEditorUserId": "210102", "Id": "6628908", "Score": "0", "OwnerUserId": "460199", "Tags": "<c++>", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_6628908_6629002_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 5361}, "so_6628908_6629002_3": {"length": 12, "quality": 0.6666666666666666, "section_id": 7164}, "so_6628908_6629002_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 5358}}, "n3337": {"so_6628908_6629002_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 5157}, "so_6628908_6629002_3": {"length": 12, "quality": 0.6666666666666666, "section_id": 6908}, "so_6628908_6629002_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 5154}}, "n4659": {"so_6628908_6629002_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 6789}, "so_6628908_6629002_3": {"length": 12, "quality": 0.6666666666666666, "section_id": 8672}, "so_6628908_6629002_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 6783}}}, "6629455": {"Id": "6629455", "PostTypeId": "2", "Body": "<p>This code is fine.  There's nothing going on here that could possibly cause the target of <code>szEmployeeName</code> to be freed.</p>\n<p>If <code>model</code> is <code>NULL</code>, then you return a pointer to <code>\"\"</code>.  Using a non-const pointer certainly is questionable, but the string literal <code>\"\"</code> survives for the lifetime of your program, it's not an error to return it.</p>\n<p>If <code>model</code> is non-null, you return the pointer returned by <code>model-&gt;GetName()</code>.  Since <code>CEmployee::GetEmployeeName()</code> doesn't free any memory, the pointer is just as valid when returned as it was when you got it from <code>model-&gt;GetName()</code>.  Specifically, either the pointer is valid, or it is a dangling pointer, indicating a bug in <code>CEmployeeModel-&gt;GetName()</code>.</p>\n<p>There are no circumstances where <code>CEmployeeModel::GetName()</code> is correct but <code>CEmployee::GetEmployeeName</code> returns a bad pointer.</p>\n", "LastActivityDate": "2011-07-08T19:28:50.600", "CommentCount": "0", "CreationDate": "2011-07-08T19:28:50.600", "ParentId": "6628908", "Score": "0", "OwnerUserId": "103167"}, "6629002": {"Id": "6629002", "PostTypeId": "2", "Body": "<p>Returning <code>szEmployeeName</code> here is actually not an error - the string is allocated statically in read-only memory (the <code>.rodata</code> section in ELF executables). Quoting the (C++03) Standard:</p>\n<blockquote>\n<p id=\"so_6628908_6629002_0\"><strong>2.13.4.1</strong></p>\n<p id=\"so_6628908_6629002_1\">An ordinary string literal has type\n  \u201carray of n const char\u201d and <strong>static\n  storage duration (3.7)</strong>, where n is the\n  size of the string as defined below,\n  and is initialized with the given\n  characters.</p>\n<p id=\"so_6628908_6629002_2\"><strong>3.7.1</strong></p>\n<p id=\"so_6628908_6629002_3\">All objects which neither have dynamic\n  storage duration nor are local have\n  static storage duration. <strong>The storage\n  for these objects shall last for the\n  duration of the program</strong></p>\n</blockquote>\n<p>On the other hand, trying to modify this string results in undefined behaviour - in this particular case, you'll most likely get a crash at runtime. <code>szEmployeeName</code> should be really declared as <code>const char*</code> (and there are historical reasons why the standard allows initializing a plain <code>char *</code> with a string literal). Again, quoting the Standard:</p>\n<blockquote>\n<p id=\"so_6628908_6629002_4\"><strong>2.13.14.2</strong></p>\n<p id=\"so_6628908_6629002_5\">The effect of attempting to modify a\n  string literal is undefined.</p>\n</blockquote>\n", "LastEditorUserId": "242169", "LastActivityDate": "2011-07-09T10:19:01.093", "Score": "2", "CreationDate": "2011-07-08T18:47:10.420", "ParentId": "6628908", "CommentCount": "7", "OwnerUserId": "242169", "LastEditDate": "2011-07-09T10:19:01.093"}});