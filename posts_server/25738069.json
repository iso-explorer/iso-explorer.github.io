post_cb({"25738124": {"ParentId": "25738069", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_25738069_25738124_0\">A function parameter for which the associated argument is an\n  initializer list (8.5.4) but the parameter does not have\n  <code>std::initializer_list</code> or reference to possibly cv-qualified\n  <code>std::initializer_list</code> type</p>\n</blockquote>\n<p>is a non-deduced context (\u00a714.8.2.5 [temp.deduct.type]/p5), so the compiler can't deduce <code>Container</code>. A <em>braced-init-list</em> by itself has no type.</p>\n<p>One possibility is to provide a default template argument to cover this case:</p>\n<pre><code>template&lt;class T, class Container = std::initializer_list&lt;T&gt;&gt;\nbool isElementOf(const T&amp; element, const Container &amp; cont)\n{\n  return privIsElementOf( element, std::begin(cont), std::end(cont) );\n}\n</code></pre>\n<p>Note that you shouldn't use a <code>initializer_list</code> default argument unless you are sure that the code won't be affected by its copying semantics - the lifetime of the underlying array isn't affected by any copying of the <code>initializer_list</code> object.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-09-09T15:50:24.423", "Id": "25738124", "Score": "6", "CreationDate": "2014-09-09T06:40:47.730", "LastActivityDate": "2014-09-09T15:50:24.423"}, "25738069": {"CommentCount": "0", "ViewCount": "440", "PostTypeId": "1", "LastEditorUserId": "2756719", "CreationDate": "2014-09-09T06:37:35.670", "LastActivityDate": "2014-09-09T15:50:24.423", "Title": "Initializer list as container does not work", "AcceptedAnswerId": "25738124", "LastEditDate": "2014-09-09T06:42:13.303", "Id": "25738069", "Score": "5", "Body": "<p>Consider following example:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iterator&gt;\n#include &lt;vector&gt;\n\ntemplate&lt;class InputIterator, class T&gt;\nbool privIsElementOf(const T&amp; element, InputIterator first, InputIterator last)\n{\n  return ( std::find(first, last, element) != last );\n}\n\ntemplate&lt;class Container, class T&gt;\nbool isElementOf(const T&amp; element, const Container &amp; cont)\n{\n  return privIsElementOf( element, std::begin(cont), std::end(cont) );\n}\n\ntemplate&lt;class T&gt;\nbool isElementOf(const T&amp; element, const std::initializer_list&lt;T&gt; iList)\n{\n  return privIsElementOf( element, std::begin(iList), std::end(iList));\n}\n\n\nint main()\n{\n  std::vector&lt;int&gt; myVec { 1 , 3 , 5};\n\n  bool isElement  = isElementOf(3, myVec);\n  bool isElement2 = isElementOf(3, {1 , 3, 5 });\n\n  return 0;\n}\n</code></pre>\n<p>It compiles well with the second isElementOf template with the initializer_list. Nevertheless the content more or less the same as the first template. It uses std::begin and std::end.</p>\n<p>When I remove the second template, it shows following compile error:</p>\n<pre>\n\n    initList.cpp: In function \u2018int main()\u2019:\n    initList.cpp:31:47: error: no matching function for call to \u2018isElementOf(int, )\u2019\n       bool isElement2 = isElementOf(3, {1 , 3, 5 });\n                                                   ^\n    initList.cpp:31:47: note: candidate is:\n    initList.cpp:12:6: note: template bool isElementOf(const T&amp;, const Container&amp;)\n     bool isElementOf(const T&amp; element, const Container &amp; cont)\n          ^\n    initList.cpp:12:6: note:   template argument deduction/substitution failed:\n    initList.cpp:31:47: note:   couldn't deduce template parameter \u2018Container\u2019\n       bool isElement2 = isElementOf(3, {1 , 3, 5 });\n                                                   ^\n\n</pre>\n<p>Can anyone explain me the problem? The template is just asking for a class that provides compatibility with std::begin and std::end. Why is the template for container not working for initialiser list? Is there a way to solve the problem with only one template?</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/57690105ea512ff4\">Live example</a></p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "3293086", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25738069_25738124_0": {"section_id": 336, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_25738069_25738124_0": {"section_id": 326, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_25738069_25738124_0": {"section_id": 345, "quality": 0.6470588235294118, "length": 11}}}});