post_cb({"25624367": {"ParentId": "25624303", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>MSVC is correct.</p>\n<p>gcc 4.9.0 says:</p>\n<blockquote>\n<p id=\"so_25624303_25624367_0\">warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second: [enabled by default]</p>\n</blockquote>\n<p>clang 3.4.1 agrees that the two functions are ambiguous.</p>\n<p>Although <code>B* =&gt; B*</code> and <code>B* =&gt; B const*</code> both have <em>Exact Match</em> rank, the former is still a better conversion sequence per over.ics.rank/3; this is (per example) to ensure that:</p>\n<pre><code>int f(const int *);\nint f(int *);\nint i;\nint j = f(&amp;i); // calls f(int*)\n</code></pre>\n<p>From over.ics.rank/3:</p>\n<blockquote>\n<p id=\"so_25624303_25624367_1\">Standard conversion sequence S1 is a better conversion sequence than standard conversion sequence S2 if [...]<br/>\n  \u2014 S1 and S2 differ only in their qualification conversion and yield similar types T1 and T2 (4.4), respectively, and the cv-qualification signature of type T1 is a proper subset of the cv-qualification signature of type T2. [...]</p>\n</blockquote>\n<p>And, of course, <code>unsigned int =&gt; unsigned int</code> is better than <code>unsigned int =&gt; signed int</code>. So of the two overloads, one has a better implicit conversion sequence on the first argument, and the other has a better implicit conversion sequence on the second argument. So they cannot be distinguished per over.match.best/1.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2014-09-02T13:30:44.353", "Id": "25624367", "Score": "7", "CreationDate": "2014-09-02T13:17:00.417", "LastActivityDate": "2014-09-02T13:30:44.353"}, "25624303": {"CommentCount": "2", "ViewCount": "186", "CreationDate": "2014-09-02T13:13:39.517", "LastActivityDate": "2014-09-02T13:30:44.353", "Title": "Unexpectedly ambiguous overload resolution in VC++ 2012", "AcceptedAnswerId": "25624367", "PostTypeId": "1", "Id": "25624303", "Score": "5", "Body": "<p>Visual C++ 2012. Code. I think it should compile; the compiler respectfully disagrees. I've narrowed my repro down to:</p>\n<pre><code>struct  B { };\n\nvoid foo(B* b, signed int si) { } // Overload 1\nvoid foo(B const* b, unsigned int ui) { } // Overload 2\n\nint main()\n{\n    B b;\n    unsigned int ui;\n    foo(&amp;b, ui);\n}\n</code></pre>\n<p>So we've got two candidates for overload resolution. For the first overload, the first argument exactly matches, and the second argument requires an integral conversion (unsigned to signed). For the second overload, the second argument exactly matches, and the first argument requires a cv-adjustment (because <code>&amp;b</code> is a pointer to non-const). </p>\n<p>Now, it seems that this should be entirely unambiguous. For Overload 1, the first argument is an \"Exact Match\" as defined by the standard's section on overload resolution, but the second is a \"Conversion\". For Overload 2, both arguments are \"Exact Matches\" (qualification conversion being at the same rank as identity). Therefore (my apparently imperfect reasoning goes), Overload 2 should be chosen, with no ambiguity. And yet:</p>\n<pre><code>a.cpp(12): error C2666: 'foo' : 2 overloads have similar conversions\n    a.cpp(6): could be 'void foo(const B *,unsigned int)'\n    a.cpp(5): or       'void foo(B *,int)'\n    while trying to match the argument list '(B *, unsigned int)'\n    note: qualification adjustment (const/volatile) may be causing the ambiguity\n</code></pre>\n<p>GCC seems fine with the code, both in default dialect and in C++11 (thanks, IDEOne!). So I'm kiiiiind of inclined to chalk this up to a bug in MSVC, but (a) you know what they say about people who think their bugs are compiler bugs, and (b) this seems like it would be a pretty obvious bug, the sort that would have sent up red flags during their conformance testing.</p>\n<p>Is this a noncompliant MSVC, or a noncompliant GCC? (Or both?) Is my reasoning regarding the overload resolution sound?</p>\n", "Tags": "<c++><visual-c++><overloading><overload-resolution><compiler-bug>", "OwnerUserId": "787480", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25624303_25624367_1": {"section_id": 639, "quality": 0.96, "length": 24}}, "n3337": {"so_25624303_25624367_1": {"section_id": 629, "quality": 0.96, "length": 24}}, "n4659": {"so_25624303_25624367_1": {"section_id": 667, "quality": 0.96, "length": 24}}}});