post_cb({"39206454": {"ParentId": "39205308", "CommentCount": "0", "Body": "<p>The C Standard (ISO/IEC 9899:2011) has this statement in 7.6 paragraph 2:</p>\n<blockquote>\n<p id=\"so_39205308_39206454_0\">The floating-point environment has thread storage duration. The initial state for a thread\u2019s floating-point environment is the current state of the floating-point environment of the thread that creates it at the time of creation.</p>\n</blockquote>\n<p>The C++ Standard (ISO/IEC 14882:2014) has this statement in 26.3.1 [cfenv.syn] paragraph 3:</p>\n<blockquote>\n<p id=\"so_39205308_39206454_1\">The floating-point environment has thread storage duration (3.7.2). The initial state for a thread\u2019s floatingpoint environment is the state of the floating-point environment of the thread that constructs the corresponding\n  std::thread object (30.3.1) at the time it constructed the object.</p>\n</blockquote>\n<p>That is, both C and C++ specify that the floating point environment is inherited from the creating thread. This floating point environment is the language level representation of any <em>control world</em>. Note, however, that there is no mandate that a floating point environment is supported. This hinted at, e.g., by C's footnote 12 (in 5.1.2.3; the highlighting is mine):</p>\n<blockquote>\n<p id=\"so_39205308_39206454_2\">The IEC 60559 standard for binary floating-point arithmetic requires certain user-accessible status flags and control modes. Floating-point operations implicitly set the status flags; modes affect result\n  values of floating-point operations. <strong>Implementations that support such floating-point state</strong> are required to regard changes to it as side effects \u2014 see annex F for details.</p>\n</blockquote>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "39206454", "Score": "8", "CreationDate": "2016-08-29T12:32:43.603", "LastActivityDate": "2016-08-29T12:32:43.603"}, "bq_ids": {"n4140": {"so_39205308_39206454_1": {"section_id": 3397, "quality": 0.84, "length": 21}, "so_39205308_39206454_0": {"section_id": 3397, "quality": 0.8, "length": 16}}, "n3337": {"so_39205308_39206454_1": {"section_id": 3266, "quality": 0.84, "length": 21}, "so_39205308_39206454_0": {"section_id": 3266, "quality": 0.8, "length": 16}}, "n4659": {"so_39205308_39206454_1": {"section_id": 4154, "quality": 0.8, "length": 20}, "so_39205308_39206454_0": {"section_id": 4154, "quality": 0.8, "length": 16}}}, "39205308": {"CommentCount": "3", "ViewCount": "156", "CreationDate": "2016-08-29T11:33:38.050", "LastActivityDate": "2016-08-29T12:32:43.603", "Title": "How is the initial value of x87 floating point control word defined?", "AcceptedAnswerId": "39206454", "PostTypeId": "1", "Id": "39205308", "Score": "7", "Body": "<p>Value of x87 floating point control word can be checked with <code>_control87</code>. When a new thread starts, on my platform it seems to inherit value of floating point control word from the parent thread.</p>\n<p>Is this undefined behavior, or am I guaranteed that if I start a new thread, and the thread library has no bugs, the control word has the same value it had in the parent thread?</p>\n<p>In which standard is this behavior defined, and how? If it is not defined in any standard, is it defined in the processor manual, or the operating system documentation?</p>\n<p>I am using C++ language, developing on 64-bit Windows 7, compiling for 32-bit Windows target, and executing the code with an x86-compatible processor. I need an answer specifically for this platform, but if the behavior is the same for all languages and processors, then a generic answer would be better.</p>\n", "Tags": "<c++><c><floating-point><x87>", "OwnerUserId": "5489178", "AnswerCount": "1"}});