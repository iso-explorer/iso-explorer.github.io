post_cb({"8101868": {"CommentCount": "2", "ViewCount": "204", "CreationDate": "2011-11-12T01:38:04.343", "LastActivityDate": "2011-11-12T01:45:02.560", "Title": "Templated function with two type parameters fails compile when used with an error-checking macro", "AcceptedAnswerId": "8101893", "PostTypeId": "1", "Id": "8101868", "Score": "0", "Body": "<p>Because someone in our group hates exceptions (let's not discuss that here), we tend to use error-checking macros in our C++ projects. I have encountered an odd compilation failure when using a templated function with two type parameters. There are a few errors (below), but I think the root cause is a warning:</p>\n<pre><code>warning C4002: too many actual parameters for macro 'BOOL_CHECK_BOOL_RETURN'\n</code></pre>\n<p>Probably best explained in code:</p>\n<pre><code>#include \"stdafx.h\"\n\n\ntemplate&lt;class A, class B&gt;\nbool DoubleTemplated(B &amp; value)\n{\n    return true;\n}\n\ntemplate&lt;class A&gt;\nbool SingleTemplated(A &amp; value)\n{\n    return true;\n}\n\nbool NotTemplated(bool &amp; value)\n{\n    return true;\n}\n\n#define BOOL_CHECK_BOOL_RETURN(expr) \\\n    do \\\n    { \\\n        bool __b = (expr); \\\n        if (!__b) \\\n        { \\\n            return false; \\\n        } \\\n    } while (false) \\\n\nbool call()\n{\n    bool thing = true;\n\n//  BOOL_CHECK_BOOL_RETURN(DoubleTemplated&lt;int, bool&gt;(thing));\n//  Above line doesn't compile.\n\n    BOOL_CHECK_BOOL_RETURN((DoubleTemplated&lt;int, bool&gt;(thing)));\n//  Above line compiles just fine.\n\n    bool temp = DoubleTemplated&lt;int, bool&gt;(thing);\n//  Above line compiles just fine.\n\n\n    BOOL_CHECK_BOOL_RETURN(SingleTemplated&lt;bool&gt;(thing));\n    BOOL_CHECK_BOOL_RETURN(NotTemplated(thing));\n\n    return true;\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    call();\n    return 0;\n}\n</code></pre>\n<p>Here are the errors, when the offending line is not commented out:</p>\n<pre><code>1&gt;------ Build started: Project: test, Configuration: Debug Win32 ------\n1&gt;Compiling...\n1&gt;test.cpp\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(38) : warning C4002: too many actual parameters for macro 'BOOL_CHECK_BOOL_RETURN'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(38) : error C2143: syntax error : missing ',' before ')'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(38) : error C2143: syntax error : missing ';' before '{'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(41) : error C2143: syntax error : missing ';' before '{'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(48) : error C2143: syntax error : missing ';' before '{'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(49) : error C2143: syntax error : missing ';' before '{'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(52) : error C2143: syntax error : missing ';' before '}'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(54) : error C2065: 'argv' : undeclared identifier\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(54) : error C2059: syntax error : ']'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(55) : error C2143: syntax error : missing ';' before '{'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(58) : error C2143: syntax error : missing ';' before '}'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(60) : error C2143: syntax error : missing ';' before '}'\n1&gt;c:\\junk\\temp\\test\\test\\test.cpp(60) : fatal error C1004: unexpected end-of-file found\n1&gt;Build log was saved at \"file://c:\\junk\\temp\\test\\test\\Debug\\BuildLog.htm\"\n1&gt;test - 12 error(s), 1 warning(s)\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n</code></pre>\n<p>Any ideas? Thanks!</p>\n", "Tags": "<c++><templates><macros>", "OwnerUserId": "678687", "AnswerCount": "3"}, "8101893": {"ParentId": "8101868", "CommentCount": "0", "Body": "<p>Macros are unaware of the language, and work only with lexical tokens. A comma separates arguemnts for a macro, thus the following code attemps to 'invoke' the macro with two arguments:</p>\n<pre><code>BOOL_CHECK_BOOL_RETURN(DoubleTemplated&lt;int, bool&gt;(thing));\n</code></pre>\n<p><code>DoubleTemplated&lt;int</code> and <code>bool&gt;(thing)</code>. That's the warning you are seeing, and cause of the other errors as well. The following is the correct way to protect against <code>,</code> in template arguments list:</p>\n<pre><code>BOOL_CHECK_BOOL_RETURN((DoubleTemplated&lt;int, bool&gt;(thing)));\n</code></pre>\n", "OwnerUserId": "927034", "PostTypeId": "2", "Id": "8101893", "Score": "1", "CreationDate": "2011-11-12T01:42:42.670", "LastActivityDate": "2011-11-12T01:42:42.670"}, "8101894": {"ParentId": "8101868", "CommentCount": "0", "Body": "<p>The preprocessor has <em>no understanding of C++</em>! It simply performs lexical substitutions.</p>\n<p>When you declare a multi-argument macro, the arguments are separated by a comma. Since you have a comma in your macro invocation, you're calling the macro with multiple parameters, despite it being declared to only take one argument.</p>\n<p>Parentheses are understood by the PP as forming a token group, so everything inside a set of parentheses is one big token.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "8101894", "Score": "2", "CreationDate": "2011-11-12T01:42:58.313", "LastActivityDate": "2011-11-12T01:42:58.313"}, "bq_ids": {"n4140": {"so_8101868_8101886_0": {"section_id": 521, "quality": 0.9375, "length": 30}}, "n3337": {"so_8101868_8101886_0": {"section_id": 512, "quality": 0.9375, "length": 30}}, "n4659": {"so_8101868_8101886_0": {"section_id": 542, "quality": 0.9375, "length": 30}}}, "8101886": {"ParentId": "8101868", "CommentCount": "0", "Body": "<p>In the line that doesn't compile, that comma is interpreted by the preprocessor as a delimiter of the macro arguments.</p>\n<p>In the C99 standard (I haven't got the C++ standard to hand, but it will be very similar), we see the following in section 6.10.3:</p>\n<blockquote>\n<p id=\"so_8101868_8101886_0\">The sequence of preprocessing tokens bounded by the outside-most\n  matching parentheses forms the list of arguments for the function-like\n  macro. The individual arguments within the list are separated by comma\n  preprocessing tokens, but comma preprocessing tokens between matching\n  inner parentheses do not separate arguments.</p>\n</blockquote>\n<p>So that's why your second macro instantiation works.</p>\n", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "8101886", "Score": "1", "CreationDate": "2011-11-12T01:41:33.467", "LastActivityDate": "2011-11-12T01:41:33.467"}});