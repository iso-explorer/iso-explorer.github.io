post_cb({"27007971": {"ParentId": "27007831", "CommentCount": "0", "Body": "<p>As pointed out by 0x499602D2, <code>operator=</code> doesn't need to be a friend function. I'm blaming tiredness for managing to completely overlook that objects have access to private &amp; protected members of objects of the same class...</p>\n", "OwnerUserId": "889038", "PostTypeId": "2", "Id": "27007971", "Score": "0", "CreationDate": "2014-11-19T02:35:12.543", "LastActivityDate": "2014-11-19T02:35:12.543"}, "27007915": {"ParentId": "27007831", "CommentCount": "0", "Body": "<p>Your error is using <code>friend</code>, which changes the function from a member-function to an <code>inline</code>-defined <code>friend</code>-function.</p>\n<p><code>operator=</code> can only be defined as a non-static member-function, and needs two arguments, the implicit <code>this</code> and the explicit right-hand-side.</p>\n", "OwnerUserId": "3204551", "PostTypeId": "2", "Id": "27007915", "Score": "3", "CreationDate": "2014-11-19T02:29:40.643", "LastActivityDate": "2014-11-19T02:29:40.643"}, "27007831": {"CommentCount": "6", "ViewCount": "76", "CreationDate": "2014-11-19T02:20:26.207", "LastActivityDate": "2014-11-19T02:54:29.280", "Title": "Overloading friend operator method in template class", "PostTypeId": "1", "Id": "27007831", "Score": "0", "Body": "<p>I'm trying to overload the assignment ('=') operator of a template class, but I need the <code>operator=</code> method to be a friend function.</p>\n<p>I though this would be simple, but I'm doing something wrong because the code below causes a compilation error:</p>\n<blockquote>\n<p id=\"so_27007831_27007831_0\">error C2801: 'operator =' must be a non-static member</p>\n</blockquote>\n<pre><code>template &lt;typename T&gt;\nclass IDataStream\n{\npublic:\n    friend void operator=(const IDataStream&amp; dataStream)\n    {\n        // set some private members, e.g.\n        // this-&gt;{...} = dataStream.{...};\n    };\n}\n</code></pre>\n<p>Can someone show me the error of my ways- I've become pretty stuck on this :(\nThanks.</p>\n", "Tags": "<c++><templates><operator-overloading><friend-function>", "OwnerUserId": "889038", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_27007831_27008033_0": {"section_id": 5880, "quality": 0.8529411764705882, "length": 29}, "so_27007831_27008033_3": {"section_id": 6664, "quality": 1.0, "length": 8}, "so_27007831_27008033_4": {"section_id": 6664, "quality": 1.0, "length": 8}, "so_27007831_27007831_0": {"section_id": 577, "quality": 0.6666666666666666, "length": 4}, "so_27007831_27008033_1": {"section_id": 660, "quality": 0.9, "length": 9}}, "n3337": {"so_27007831_27008033_0": {"section_id": 5651, "quality": 0.8529411764705882, "length": 29}, "so_27007831_27008033_3": {"section_id": 6419, "quality": 1.0, "length": 8}, "so_27007831_27008033_4": {"section_id": 6419, "quality": 1.0, "length": 8}, "so_27007831_27007831_0": {"section_id": 567, "quality": 0.6666666666666666, "length": 4}, "so_27007831_27008033_1": {"section_id": 650, "quality": 0.9, "length": 9}}, "n4659": {"so_27007831_27008033_3": {"section_id": 8139, "quality": 1.0, "length": 8}, "so_27007831_27008033_1": {"section_id": 688, "quality": 0.9, "length": 9}, "so_27007831_27007831_0": {"section_id": 600, "quality": 0.6666666666666666, "length": 4}, "so_27007831_27008033_4": {"section_id": 8139, "quality": 1.0, "length": 8}}}, "27008033": {"CommentCount": "0", "CreationDate": "2014-11-19T02:42:02.023", "LastEditorUserId": "-1", "LastActivityDate": "2014-11-19T02:54:29.280", "ParentId": "27007831", "LastEditDate": "2017-05-23T12:06:33.583", "LastEditorDisplayName": "user3920237", "PostTypeId": "2", "Id": "27008033", "Score": "1", "Body": "<p>Let's take a look at the C++ standard.</p>\n<blockquote>\n<p id=\"so_27007831_27008033_0\">\u00a7 9.3/1 Functions declared in the definition of a class, <strong>excluding\n  those declared with a friend specifier</strong> (11.3), are called member\n  functions of that class. A member function may be declared static in\n  which case it is a static member function of its class (9.4);\n  otherwise it is a non-static member function of its class (9.3.1,\n  9.3.2).</p>\n<p id=\"so_27007831_27008033_1\">\u00a7 13.5.3/1 An assignment operator shall be implemented by a non-static\n  member function with exactly one parameter. <em>[..]</em></p>\n</blockquote>\n<p>So you cannot make <code>operator=</code> a friend. </p>\n<p>In \u00a7 11 [class.access]:</p>\n<blockquote>\n<p id=\"so_27007831_27008033_2\">1 A member of a class can be</p>\n<blockquote>\n<p id=\"so_27007831_27008033_4\">\u2014 private; that is, its name can be used only by members and friends\n    of the class in which it is declared.</p>\n</blockquote>\n</blockquote>\n<p>Since a member function is a <em>member</em> of the class, it doesn't require the friend specifier to access private data members.</p>\n<p>If you want to learn the proper way to overload an operator, please see <a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b-faq\" rel=\"tag\" title=\"show questions tagged 'c++-faq'\">c++-faq</a>'s <a href=\"https://stackoverflow.com/q/4421706/3920237\">Operator overloading</a>, although the meat of overloading <code>operator=</code> is covered in <a href=\"https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom\">What is the copy-and-swap idiom?</a>.</p>\n", "OwnerDisplayName": "user3920237"}});