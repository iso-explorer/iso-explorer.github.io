post_cb({"10022400": {"ParentId": "10022355", "CommentCount": "1", "Body": "<p>From C++11 <code>[basic.link]</code>, paragraph 5:</p>\n<blockquote>\n<p id=\"so_10022355_10022400_0\">In addition, a member function, static data member, a named class or enumeration of class scope, or an unnamed class or enumeration defined in a class-scope typedef declaration such that the class or enumeration has the typedef name for linkage purposes (7.1.3), has external linkage if the name of the class has external linkage.</p>\n</blockquote>\n<p>Because your class has external linkage, so does your static data member.</p>\n", "OwnerUserId": "14860", "PostTypeId": "2", "Id": "10022400", "Score": "3", "CreationDate": "2012-04-05T03:45:36.463", "LastActivityDate": "2012-04-05T03:45:36.463"}, "10022428": {"ParentId": "10022355", "CommentCount": "0", "Body": "<p>Its static to the compilation unit.  You are compiling in two steps - first impl1.cpp and then impl2.cpp - and in each unit the compiler instantiates the static data member.  When the linker then tries to link the two associated object files together, it sees two different definitions for the same symbol , and so you get a multiple definition error.</p>\n", "OwnerUserId": "1299922", "PostTypeId": "2", "Id": "10022428", "Score": "0", "CreationDate": "2012-04-05T03:49:56.337", "LastActivityDate": "2012-04-05T03:49:56.337"}, "10022355": {"CommentCount": "0", "ViewCount": "208", "PostTypeId": "1", "LastEditorUserId": "14860", "CreationDate": "2012-04-05T03:38:22.277", "LastActivityDate": "2015-04-01T07:18:03.497", "Title": "Internal linkage for const in C++, yet I get duplicate symbols", "AcceptedAnswerId": "10022400", "LastEditDate": "2015-04-01T07:18:03.497", "Id": "10022355", "Score": "1", "Body": "<p>Could someone please advise?</p>\n<p>If <code>const</code> in C++ defaults to internal linkage, why do I get multiple definition errors in the code below?</p>\n<p>First, the file <code>dem.h</code>:</p>\n<pre><code>#ifndef _DEM_H_\n    #define _DEM_H_\n    class Dem {\n        public:\n            static const int i;\n    };\n\n    const int Dem::i = 10;\n#endif\n</code></pre>\n<p>Them <code>imp1.cpp</code>:</p>\n<pre><code>#include \"dem.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\nextern int foo();\n\nint main() {\n        cout &lt;&lt; foo() &lt;&lt; endl;\n}\n</code></pre>\n<p>and <code>imp2.cpp</code>:</p>\n<pre><code>#include \"dem.h\"\n\nint foo() {\n    return Dem::i ;\n}\n</code></pre>\n<p>I compile with the following command and results:</p>\n<pre><code>$ g++ imp1.cpp imp2.cpp\n/tmp/ccmGt0OY.o:imp2.cpp:(.rdata+0x0): multiple definition of `Dem::i'\n/tmp/cc5sN7dz.o:imp1.cpp:(.rdata+0x0): first defined here\ncollect2: ld returned 1 exit status\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1187045", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_10022355_10022400_0": {"section_id": 7138, "quality": 0.96875, "length": 31}}, "n3337": {"so_10022355_10022400_0": {"section_id": 6882, "quality": 0.96875, "length": 31}}, "n4659": {"so_10022355_10022400_0": {"section_id": 8639, "quality": 0.875, "length": 28}}}});