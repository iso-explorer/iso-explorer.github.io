post_cb({"29710879": {"ParentId": "29710801", "LastEditDate": "2015-04-17T23:33:53.863", "CommentCount": "2", "CreationDate": "2015-04-17T23:09:30.193", "OwnerUserId": "3246555", "LastEditorUserId": "3246555", "PostTypeId": "2", "Id": "29710879", "Score": "12", "Body": "<p>It is likely that <code>length()</code> returns <code>unsigned int</code>, so another argument, <code>signed int</code>, gets converted to unsigned too, and then comparison takes place. </p>\n<p>It is a part of so called <em>usual arithmetic conversions</em>. See the standard:</p>\n<blockquote>\n<p id=\"so_29710801_29710879_0\"><strong>Expressions [expr]</strong></p>\n<p id=\"so_29710801_29710879_1\">....</p>\n<p id=\"so_29710801_29710879_2\">Otherwise, if the operand that has unsigned integer type has rank greater than or equal to the\n  rank of the type of the other operand, the operand with signed integer type shall be converted to\n  the type of the operand with unsigned integer type.</p>\n</blockquote>\n", "LastActivityDate": "2015-04-17T23:33:53.863"}, "29710985": {"ParentId": "29710801", "CommentCount": "2", "Body": "<p>The reason is this comparison:</p>\n<pre><code>if (start &gt; clip.length()) {\n</code></pre>\n<p>You are comparing a signed and an unsigned here. I suggest changing both operands to have the same type, e.g.:</p>\n<pre><code>if (start &gt; static_cast&lt;int&gt;(clip.length())) {\n</code></pre>\n<p>Additional, the original code produces a nice compiler warning when warnings are turned on (and they <strong>should</strong> be turned on to avoid such issues):</p>\n<pre><code>test.cpp:8:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n</code></pre>\n<p>With g++, try using <code>-Wall</code> and maybe even <code>-Wextra</code>.</p>\n", "OwnerUserId": "3042070", "PostTypeId": "2", "Id": "29710985", "Score": "4", "CreationDate": "2015-04-17T23:20:33.243", "LastActivityDate": "2015-04-17T23:20:33.243"}, "bq_ids": {"n4140": {"so_29710801_29710879_2": {"section_id": 5943, "quality": 1.0, "length": 23}}, "n3337": {"so_29710801_29710879_2": {"section_id": 5714, "quality": 1.0, "length": 23}}, "n4659": {"so_29710801_29710879_2": {"section_id": 7428, "quality": 1.0, "length": 23}}}, "29710801": {"CommentCount": "3", "ViewCount": "91", "CreationDate": "2015-04-17T23:03:05.687", "LastActivityDate": "2015-04-17T23:33:53.863", "Title": "IF comparison test by value failure ( C++ )", "AcceptedAnswerId": "29710985", "PostTypeId": "1", "Id": "29710801", "Score": "4", "Body": "<p>My current project would be too lengthy to post here, however, this is the single line that produces a really strange behavior, at least as I see it . I use the <code>clip</code> object to store relatively short strings ( maximum size in use in 35 ), however the condition fails when dealing with negative values in <code>start</code> .</p>\n<p>I tried adding <code>(const int)</code> in front of  <code>clip.length()</code>, but the output wouldn't change :</p>\n<p>Any ideas what does this mean  ? I'm using G++ on Ubuntu 14.04 .</p>\n<pre><code> void Cut ( const int start, const int stop )\n { if (start &gt; clip.length() ) cout &lt;&lt; \"start: \" &lt;&lt; start &lt;&lt; \" &gt; \" &lt;&lt; clip.length() &lt;&lt; endl;\n\n  ...\n }\n</code></pre>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/Okf2k.jpg\"/></p>\n", "Tags": "<c++><object>", "OwnerUserId": "4224549", "AnswerCount": "2"}});