post_cb({"bq_ids": {"n4140": {"so_5401062_5401062_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 3913}, "so_5401062_5401062_1": {"length": 8, "quality": 0.8, "section_id": 6182}, "so_5401062_5424199_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7182}, "so_5401062_5401062_3": {"length": 5, "quality": 0.5555555555555556, "section_id": 3360}}, "n3337": {"so_5401062_5401062_1": {"length": 8, "quality": 0.8, "section_id": 5943}, "so_5401062_5401062_3": {"length": 5, "quality": 0.5555555555555556, "section_id": 3230}, "so_5401062_5424199_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 6926}, "so_5401062_5401062_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 3773}}, "n4659": {"so_5401062_5401062_1": {"length": 8, "quality": 0.8, "section_id": 7684}, "so_5401062_5424199_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 3923}, "so_5401062_5401062_2": {"length": 8, "quality": 0.6666666666666666, "section_id": 4799}}}, "5401081": {"Id": "5401081", "PostTypeId": "2", "Body": "<p>It's undefined behavior.</p>\n<p>The evaluation of the left expression results in flowing off the end of a value-returning function with no return. Just because the value is discarded doesn't mean the evaluation never happened.</p>\n", "LastActivityDate": "2011-03-23T05:05:53.903", "CommentCount": "0", "CreationDate": "2011-03-23T05:05:53.903", "ParentId": "5401062", "Score": "3", "OwnerUserId": "87234"}, "5401062": {"ViewCount": "1067", "Body": "<p>I came across this code snippet <sup>1</sup> </p>\n<pre><code>int return_printChar1()\n{\n    // code\n    // oops! no return statement\n}\nint return_printChar2()\n{\n    // code\n    return printf(\"Return\");\n}\nint main()\n{  \n   int i;\n   // some more code\n   i = return_printChar2();\n   if((return_printChar1(),i))\n   {\n      printf (\"Gotcha\");\n   }\n}\n</code></pre>\n<p><sub>1: This is not a real life example.</sub></p>\n<p>My question is \"<strong>Is the behaviour of the code snippet well defined in C and C++?</strong>\"</p>\n<p>My take: </p>\n<p>In C the behaviour is well defined because <code>6.5.17</code> says</p>\n<blockquote>\n<p id=\"so_5401062_5401062_0\">The  left  operand  of  a  comma  operator  is  evaluated  as  a  <strong>void  expression</strong>;  there  is  a sequence point after its evaluation</p>\n</blockquote>\n<p>In C++03 the behaviour is well defined because <code>5.18</code> says</p>\n<blockquote>\n<p id=\"so_5401062_5401062_1\">A pair of expressions separated by a comma is evaluated left-to-right and the value of the left expression is <strong>discarded</strong>.</p>\n</blockquote>\n<p>However C++03 (in section <code>6.6.3</code>) also says that</p>\n<blockquote>\n<p id=\"so_5401062_5401062_2\">Flowing off the end of a function is equivalent to a returnwith no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>Similarly in C </p>\n<blockquote>\n<p id=\"so_5401062_5401062_3\">If control reaches end (<code>}</code>) of non-void function (except <code>main()</code>) the behaviour is undefined.</p>\n</blockquote>\n<p>So taking all these points into consideration I can't judge the actual behaviour. What do you people think?</p>\n<p><sub>P.S: If you think the question is useless and you have got better things to do, help yourself: D. </sub></p>\n", "AcceptedAnswerId": "5424199", "Title": "Comma operator and void expression", "CreationDate": "2011-03-23T05:01:01.717", "Id": "5401062", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-01-28T01:40:55.800", "LastEditorUserId": "4639281", "LastActivityDate": "2016-01-28T01:40:55.800", "Score": "8", "OwnerUserId": "165520", "Tags": "<c++><c><undefined-behavior><comma-operator>", "AnswerCount": "3"}, "5424199": {"Id": "5424199", "PostTypeId": "2", "Body": "<p>The C spec I have (C99 TC3) says</p>\n<blockquote>\n<p id=\"so_5401062_5424199_0\">If the } that terminates a function is reached, and the value of the function call is used by the caller, the behavior is unde\ufb01ned.</p>\n</blockquote>\n<p>The value of an expression that's said to be \"evaluated as a void expression\" is discarded. So in the C case, there is no undefined behavior. It may have been different in old C (some details are, if I remember correctly). </p>\n<p>The situation for C++ is slightly different than for C, because C++ supports class objects with constructor and destructors as return values and having them operate on uninitialized memory can't be guaranteed to work well. Perhaps this contributed to the different rules for C++. </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2011-03-25T03:42:53.397", "Score": "6", "CreationDate": "2011-03-24T19:04:51.707", "ParentId": "5401062", "CommentCount": "4", "OwnerUserId": "34509", "LastEditDate": "2011-03-25T03:42:53.397"}, "5401095": {"Id": "5401095", "PostTypeId": "2", "Body": "<p>It's clearly undefined.  C99 \u00a76.3.2.2 says, \"(A void expression is evaluated for its side effects.)\"  So the function is evaluated and does flow off the end.  There's no get out of jail free card.</p>\n", "LastActivityDate": "2011-03-23T05:08:17.080", "CommentCount": "1", "CreationDate": "2011-03-23T05:08:17.080", "ParentId": "5401062", "Score": "1", "OwnerUserId": "47773"}});