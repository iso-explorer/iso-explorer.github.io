post_cb({"14172448": {"ParentId": "14172314", "CommentCount": "0", "Body": "<p>It'is ilegal in C, but OK in C++, they are different</p>\n<p>May write as follows instead:</p>\n<pre><code>static int* array = NULL;\nif (array == NULL)\n    array = malloc(sizeof(int));\n</code></pre>\n", "OwnerUserId": "1488666", "PostTypeId": "2", "Id": "14172448", "Score": "1", "CreationDate": "2013-01-05T13:58:17.940", "LastActivityDate": "2013-01-05T13:58:17.940"}, "14172314": {"CommentCount": "1", "AcceptedAnswerId": "14172442", "PostTypeId": "1", "ClosedDate": "2013-01-05T19:00:50.447", "LastEditorUserId": "-1", "CreationDate": "2013-01-05T13:40:43.930", "LastActivityDate": "2013-01-05T13:58:17.940", "LastEditDate": "2017-05-23T12:04:33.113", "ViewCount": "920", "FavoriteCount": "1", "Title": "allocate memory to static variable only once", "Id": "14172314", "Score": "4", "Body": "<blockquote>\n<p id=\"so_14172314_14172314_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/13785250/definition-of-global-variables-using-a-non-constant-initializer\">Definition of global variables using a non constant initializer</a> </br></p>\n</blockquote>\n<p>I have this code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n\nint foo (int num, int i)\n{\n    static int* array = malloc(sizeof(int));  // ERROR HERE!!!\n    printf(\"%d\", array[i]);\n    return 0;\n}\n\n\n\nint main(int argc, char *argv[])\n{\n    int i;\n    for (i = 0; i &lt; 2; i++) {\n    foo(i, i);\n    }\n\n    return 0;\n}\n</code></pre>\n<p>I save the code as a c source file, I can't work? the <code>error prompt</code>:</p>\n<pre><code>gcc -O2 -Wall test.c -lm -o test\ntest.c:4:1: error: initializer element is not constant\n\nCompilation exited abnormally with code 1 at Sat Jan 05 21:33:56\n</code></pre>\n<p>However, I save it as a C++ source file, It works OK. Why? is there anybody can explain it to me?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "930125", "AnswerCount": "4"}, "14172353": {"ParentId": "14172314", "CommentCount": "0", "Body": "<p>C(unlike C++) does not allow initialization of static duration variables with non constant values.</p>\n<pre><code>static int* array = malloc(sizeof(int));  // ERROR HERE!!!\n</code></pre>\n<p><strong>C99 Standard: Section 6.7.8:</strong> </p>\n<blockquote>\n<p id=\"so_14172314_14172353_0\">All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.</p>\n</blockquote>\n", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "14172353", "Score": "1", "CreationDate": "2013-01-05T13:46:33.373", "LastActivityDate": "2013-01-05T13:46:33.373"}, "14172442": {"ParentId": "14172314", "CommentCount": "0", "Body": "<p>C and C++ standards treat initialization of objects with <code>static</code> storage duration differently. C++ allows both static initialization (i.e. initialization with a constant) and dynamic initialization (i.e. initialization with non-constant expression), while C allows only static initialization - i.e. with constant expressions.</p>\n<p>The relevant portion of the C++ standard is 6.7.4:</p>\n<blockquote>\n<p id=\"so_14172314_14172442_0\">The zero-initialization (8.5) of all local objects with static storage duration (3.7.1) is performed before any other initialization takes place. A local object of POD type (3.9) with static storage duration initialized with constant-expressions is initialized before its block is \ufb01rst entered. [...] <strong>Otherwise such an object is initialized the \ufb01rst time control passes through its declaration; such an object is considered initialized upon the completion of its initialization.</strong> (emphasis added)</p>\n</blockquote>\n<p>C++ need additional \"bookkeeping\" in order to run the dynamic portion of your initializer (i.e. the call of <code>malloc</code>) only once. There is no similar \"dynamic\" provision in the C standard:</p>\n<blockquote>\n<p id=\"so_14172314_14172442_1\">All objects with static storage duration shall be initialized (set to their initial values) before program startup.\n  All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.</p>\n</blockquote>\n<p>In the absence of concurrency, you can rewrite the code for use with C like this:</p>\n<pre><code>int foo (int num, int i) {\n    static int* array = NULL;\n    if (!array) array = malloc(sizeof(int)); // No error\n    printf(\"%d\", array[i]);\n    return 0;\n}\n</code></pre>\n<p>Now your code is responsible for the \"bookkeeping\": it checks <code>array</code> for <code>NULL</code> before performing the allocation.</p>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "14172442", "Score": "2", "CreationDate": "2013-01-05T13:57:39.373", "LastActivityDate": "2013-01-05T13:57:39.373"}, "14172342": {"ParentId": "14172314", "CommentCount": "0", "Body": "<p>You cannot initialize <code>static</code> objects with non-constant initializers in C.</p>\n<pre><code>static int* array = malloc(sizeof(int));\n\n                    ^ must be a constant\n</code></pre>\n<p>From the C Standard:</p>\n<blockquote>\n<p id=\"so_14172314_14172342_0\">(C99, 6.7.8p4) \"All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.\"</p>\n</blockquote>\n", "OwnerUserId": "1119701", "PostTypeId": "2", "Id": "14172342", "Score": "3", "CreationDate": "2013-01-05T13:44:44.360", "LastActivityDate": "2013-01-05T13:44:44.360"}, "bq_ids": {"n4140": {"so_14172314_14172442_0": {"section_id": 3919, "quality": 0.66, "length": 33}}, "n3337": {"so_14172314_14172342_0": {"section_id": 5947, "quality": 0.5384615384615384, "length": 7}, "so_14172314_14172353_0": {"section_id": 5947, "quality": 0.6363636363636364, "length": 7}, "so_14172314_14172442_0": {"section_id": 3779, "quality": 0.66, "length": 33}}, "n4659": {"so_14172314_14172353_0": {"section_id": 6789, "quality": 0.5454545454545454, "length": 6}}}});