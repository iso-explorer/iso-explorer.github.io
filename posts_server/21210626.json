post_cb({"21210704": {"ParentId": "21210626", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>6.6.3/2</p>\n<blockquote>\n<p id=\"so_21210626_21210704_0\">A return statement with a <em>braced-init-list</em> initializes the object or reference to be returned from the function by copy-list-initialization (8.5.4) from the specified initializer\n  list. [ <em>Example:</em></p>\n<pre><code>    std::pair&lt;std::string,int&gt; f(const char* p, int x) {\n      return {p,x};\n    }\n</code></pre>\n<p id=\"so_21210626_21210704_1\"><em>\u2014 end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "775806", "LastEditorUserId": "420683", "LastEditDate": "2014-01-18T22:30:51.883", "Id": "21210704", "Score": "10", "CreationDate": "2014-01-18T22:28:31.237", "LastActivityDate": "2014-01-18T22:30:51.883"}, "21210693": {"ParentId": "21210626", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This is described in paragraph #3 of section 8.5.4 List-initialization of the C++ Standard</p>\n<blockquote>\n<p id=\"so_21210626_21210693_0\">\u2014 Otherwise, if T is a class type, constructors are considered. The\n  applicable constructors are enumerated and the best one is chosen\n  through overload resolution (13.3, 13.3.1.7). If a narrowing\n  conversion (see below) is required to convert any of the arguments,\n  the program is ill-formed.</p>\n</blockquote>\n<p>End below there is an example</p>\n<pre><code>struct S {\n// no initializer-list constructors\nS(int, double, double); // #1\nS(); // #2\n// ...\n};\nS s1 = { 1, 2, 3.0 }; // OK: invoke #1\nS s2 { 1.0, 2, 3 }; // error: narrowing\nS s3 { }; // OK: invoke #2\n</code></pre>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-01-18T22:32:29.400", "Id": "21210693", "Score": "2", "CreationDate": "2014-01-18T22:27:15.247", "LastActivityDate": "2014-01-18T22:32:29.400"}, "21210626": {"CommentCount": "3", "ViewCount": "110", "CreationDate": "2014-01-18T22:21:20.187", "LastActivityDate": "2014-01-18T22:32:29.400", "Title": "What clause in the C++11 Standard does allow me to eliminate the `A` in the `return` statement in the `A::operator-()` below?", "AcceptedAnswerId": "21210693", "PostTypeId": "1", "Id": "21210626", "Score": "1", "Body": "<p>What clause in the C++11 Standard does allow me to eliminate the <code>A</code> in the <code>return</code> statement in the <code>A::operator-()</code> below? In other words, if I replace the expression <code>return A{-a.i, -a.j};</code> by <code>return {-a.i, -a.j};</code> the code compiles and executes correctly. I'd like to know how does that work, using the Standard, if possible?</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    int i;\n    int j;\n    A(int n, int m) : i(n), j(m) {}\n};\n\n\nA operator-(A a) { return A{-a.i, -a.j}; }\n\nint main()\n{\n    A a(1, 2);\n    A b = -a;\n    std::cout &lt;&lt; b.i &lt;&lt; \"  \" &lt;&lt; b.j &lt;&lt; '\\n';\n}\n</code></pre>\n", "Tags": "<c++><c++11><constructor>", "OwnerUserId": "2337207", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_21210626_21210693_0": {"section_id": 3325, "quality": 0.875, "length": 21}, "so_21210626_21210704_0": {"section_id": 3913, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_21210626_21210693_0": {"section_id": 3195, "quality": 0.875, "length": 21}, "so_21210626_21210704_0": {"section_id": 3773, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_21210626_21210693_0": {"section_id": 4091, "quality": 0.875, "length": 21}}}});