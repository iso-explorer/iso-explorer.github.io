post_cb({"25755113": {"ParentId": "25754796", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Invoking virtual members in the constructor and/or destructor is generally ok.</p>\n<p>It's a different game in the ctor initializer though, before all bases are initialized:</p>\n<blockquote>\n<h3>12.6.2 Initializing bases and members <code>[class.base.init]</code></h3>\n<p id=\"so_25754796_25755113_0\">[...]<br>\n  14 Member functions (including virtual member functions, 10.3) can be called for an object under construction.\n  Similarly, an object under construction can be the operand of the <code>typeid</code> operator (5.2.8) or of a <code>dynamic_cast</code> (5.2.7). However, if these operations are performed in a <strong>ctor-initializer</strong> (or in a function called directly or indirectly from a ctor-initializer) <strong>before all the mem-initializers for base classes have completed, the result of the operation is undefined.</strong></br></p>\n</blockquote>\n", "OwnerUserId": "3204551", "LastEditorUserId": "3204551", "LastEditDate": "2014-09-10T15:48:32.777", "Id": "25755113", "Score": "4", "CreationDate": "2014-09-09T23:33:10.857", "LastActivityDate": "2014-09-10T15:48:32.777"}, "25754796": {"CommentCount": "5", "ViewCount": "192", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2014-09-09T22:56:53.090", "LastActivityDate": "2014-09-11T14:37:15.803", "Title": "May I call a virtual function to initialize a base-class sub-object?", "AcceptedAnswerId": "25755113", "LastEditDate": "2014-09-11T14:37:15.803", "Id": "25754796", "Score": "1", "Body": "<p>I know that virtual functions should not be called either directly or indirectly in a constructor, but this code runs fine.<br>\nIs what I have here safe?</br></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nstruct A {\n    A (const std::string&amp; name) {std::cout &lt;&lt; name &lt;&lt; std::endl;}\n    virtual std::string tag() const = 0;\n};\n\nstruct B: A {\n    B() : A (tag()) {}\n    virtual std::string tag() const override {return \"B\";}\n};\n\nint main() {\n    B b; // Output gives \"B\\n\"\n}\n</code></pre>\n<p>If not, would the following (based on a comment) be a correct workaround?</p>\n<pre><code>// Replacement for class B:\n\nstruct B: A {\n    B() : A (name()) {}\n    virtual std::string tag() const override {return name();}\nprivate:\n    static std::string name() {return \"B\";}  // use static function\n};\n</code></pre>\n", "Tags": "<c++><constructor><virtual><ctor-initializer>", "OwnerUserId": "3089350", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25754796_25755113_0": {"section_id": 441, "quality": 0.9285714285714286, "length": 39}}, "n3337": {"so_25754796_25755113_0": {"section_id": 432, "quality": 0.9285714285714286, "length": 39}}, "n4659": {"so_25754796_25755113_0": {"section_id": 461, "quality": 0.8809523809523809, "length": 37}}}});