post_cb({"bq_ids": {"n4140": {"so_28241533_28241618_0": {"length": 14, "quality": 1.0, "section_id": 5939}}, "n4659": {"so_28241533_28241618_0": {"length": 14, "quality": 1.0, "section_id": 7423}}}, "28241533": {"ViewCount": "215", "LastEditDate": "2015-01-30T18:03:31.730", "AcceptedAnswerId": "28241618", "Title": "BOOST_TYPEOF returns int instead of const int", "CreationDate": "2015-01-30T17:36:19.453", "LastActivityDate": "2015-01-30T18:03:31.730", "CommentCount": "0", "Body": "<p>Can you please explain why this prints <code>1</code>? Should not <code>BOOST_TYPEOF</code> return <code>const int</code>. How one can check if function returns <code>const</code> without using c++11 features?</p>\n<pre><code>#include &lt;iostream&gt;\n\n#include &lt;boost/typeof/typeof.hpp&gt;\n#include &lt;boost/type_traits/is_same.hpp&gt;\n\nconst int f_const_int() {return 1;}\n\nint main()\n{\n    typedef BOOST_TYPEOF(f_const_int()) type;\n    std::cout &lt;&lt; (boost::is_same&lt;type, int&gt;::value) &lt;&lt; std::endl;\n}\n</code></pre>\n", "PostTypeId": "1", "LastEditorUserId": "1356110", "Id": "28241533", "Score": "4", "OwnerUserId": "1356110", "Tags": "<c++><boost><const><typeof>", "AnswerCount": "1"}, "28241618": {"Id": "28241618", "PostTypeId": "2", "LastEditDate": "2015-01-30T17:53:33.327", "CommentCount": "5", "LastEditorUserId": "3647361", "LastActivityDate": "2015-01-30T17:53:33.327", "CreationDate": "2015-01-30T17:40:26.597", "ParentId": "28241533", "Score": "4", "Body": "<p>If a prvalue expression has type <em>cv</em> <code>int</code>, that cv-qualifier is ignored. [expr]/6:</p>\n<blockquote>\n<p id=\"so_28241533_28241618_0\">If a prvalue initially has the type \u201c<em>cv</em> <code>T</code>,\u201d where <code>T</code> is a\n  cv-unqualified non-class, non-array type, the type of the expression\n  is adjusted to <code>T</code> prior to any further analysis.</p>\n</blockquote>\n<p>The macro does thus never receive the information that the return type was <code>const</code>.<br>\nPossible workaround:</br></p>\n<pre><code>#include &lt;boost/type_traits/function_traits.hpp&gt;\n\n// [\u2026]\ntypedef boost::function_traits&lt;BOOST_TYPEOF(f_const_int)&gt;::result_type type;\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/b8e67f506759733c\" rel=\"nofollow\"><strong>Demo</strong></a>.</p>\n", "OwnerUserId": "3647361"}});