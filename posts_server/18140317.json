post_cb({"bq_ids": {"n4140": {"so_18140317_18140390_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 7188}}, "n3337": {"so_18140317_18140390_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6932}}}, "18140317": {"ViewCount": "105", "Body": "<p>I would like the class A to hinerit from the class B without A having is own instanciation of B</p>\n<p>The idea would be to create an B object on the heap (using B new) and give the pointer to A.\nA would afterwards use this object to solve inherance.</p>\n<p>exemple of what i would like to do</p>\n<pre><code>B* b = new B();\nb-&gt;myBmethode();\n{\n  A(b);\n  A.myBmethode();\n} // A destroyed\nb-&gt;myBmethode();\ndelete b;\n</code></pre>\n", "Title": "C++ - Inherit from reference", "CreationDate": "2013-08-09T05:06:14.973", "LastActivityDate": "2013-08-09T05:31:44.957", "CommentCount": "5", "LastEditDate": "2013-08-09T05:31:44.957", "PostTypeId": "1", "LastEditorUserId": "1503898", "Id": "18140317", "Score": "-2", "OwnerUserId": "1503898", "Tags": "<c++><inheritance><reference>", "AnswerCount": "2"}, "18140390": {"PostTypeId": "2", "Body": "<p>No, it is impossible (if I understood your question correctly). </p>\n<p>3.7.5</p>\n<blockquote>\n<p id=\"so_18140317_18140390_0\">The storage duration of member subobjects, base class subobjects and\n  array elements is that of their complete object</p>\n</blockquote>\n", "LastActivityDate": "2013-08-09T05:13:26.380", "Id": "18140390", "CommentCount": "5", "CreationDate": "2013-08-09T05:13:26.380", "ParentId": "18140317", "Score": "1", "OwnerUserId": "906773"}, "18140386": {"PostTypeId": "2", "Body": "<p>If B was created outside of A, B won't be deleted automatically after A get deleted,unless u do it explicitly, </p>\n<p>Create an interface IA, let both A and B implement that interface. For B, just delegate all the real implementation to B. </p>\n<p>The lifecycle of B depend on your design. When would u like it to be destroyed? You can also make B singleton if it make sense.</p>\n<pre><code>class IA {\n  virtual doA() = 0;\n}\n\nclass A: public IA {\n   virtual doA();\n}\n\nclass B: public IA {    \nB(A&amp;a);    \nvirtual doA(){\n   a.doA();\n}\nprivate:\n   A&amp;a;\n}\n\n//init\nA* a = A::getInstance();\nB *b = new(*a) ;\nb-&gt;doA();\n</code></pre>\n", "LastActivityDate": "2013-08-09T05:20:39.817", "LastEditorUserId": "115722", "Id": "18140386", "CommentCount": "0", "CreationDate": "2013-08-09T05:13:19.620", "ParentId": "18140317", "Score": "0", "OwnerUserId": "115722", "LastEditDate": "2013-08-09T05:20:39.817"}});