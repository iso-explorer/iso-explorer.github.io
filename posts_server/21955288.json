post_cb({"21955288": {"CommentCount": "4", "AcceptedAnswerId": "21955322", "PostTypeId": "1", "LastEditorUserId": "694576", "CreationDate": "2014-02-22T13:57:51.910", "LastActivityDate": "2015-09-06T16:39:55.117", "LastEditDate": "2015-09-06T16:39:55.117", "ViewCount": "279", "FavoriteCount": "1", "Title": "Overload resolution on extern \"C\" and \"C++\" version of qsort()/bsearch()", "Id": "21955288", "Score": "6", "Body": "<p>In C++, there are two versions of <code>qsort()</code> provided by the standard library:</p>\n<pre><code>extern \"C\" void qsort(void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*));\nextern \"C++\" void qsort(void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*));\n</code></pre>\n<p><code>bsearch()</code> is about the same.</p>\n<p>My question is, how does overload resolution work when calling <code>qsort()</code>?  Does it automatically link to the appropriate function based on the linkage type (\"C\" or \"C++\") of the function pointer passed as the last argument?  Or the caller needs to specify explicitly with some sort of extra syntax?</p>\n<p>(Let's just put away the temptation to call <code>std::sort</code> for a second...)</p>\n", "Tags": "<c++><qsort><bsearch>", "OwnerUserId": "3237645", "AnswerCount": "1"}, "21955322": {"ParentId": "21955288", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-02-22T14:01:19.007", "Score": "3", "LastEditorUserId": "743382", "LastEditDate": "2014-02-22T14:44:07.910", "Id": "21955322", "OwnerUserId": "743382", "Body": "<p>The <code>int (*compar)(const void*, const void*)</code> parameter has different types for the two different overloads. For the first overload, it's an <code>extern \"C\"</code> function pointer parameter. For the second overload, it's an <code>extern \"C++\"</code> function pointer parameter. Any function pointer you pass to <code>qsort</code> will already have some sort of linkage, and that is what gets used to determine which overload to call.</p>\n<p>To quote the standard:</p>\n<blockquote>\n<p id=\"so_21955288_21955322_0\"><strong>7.5 Linkage specifications [dcl.link]</strong></p>\n<p id=\"so_21955288_21955322_1\">All function types, function names with external linkage, and variable names with external linkage have a <em>language linkage</em>.  [...] The default language linkage of all function types, function names, and variable names is C++ language linkage. Two function types with different language linkages are distinct types even if they are otherwise identical.</p>\n</blockquote>\n<p>In fact, I don't think the standard actually means to require that the two <code>qsort</code> overloads really do have different linkage. Unlike in C, user-provided declarations of standard library functions are not allowed; the relevant difference between them is the type of <code>compar</code>. They could have been declared as</p>\n<pre><code>extern \"C\" typedef int (*__compar_fnp_c)(const void *, const void *);\nextern \"C++\" typedef int (*__compar_fnp_cxx)(const void *, const void *);\nvoid qsort(void* base, size_t nmemb, size_t size, __compar_fnp_c compar);\nvoid qsort(void* base, size_t nmemb, size_t size, __compar_fnp_cxx compar);\n</code></pre>\n<p>where it should be more obvious that <code>__compar_fnp_c</code> and <code>__compar_fnp_cxx</code> are different types. That said, the as-if rule doesn't allow this implementation, since it would break code that takes a pointer or reference to <code>qsort</code>.</p>\n<p>Note that GCC, as well as some other compilers, don't implement this correctly, and don't treat linkage as part of the function pointer's type. On such implementations, only one version of <code>qsort</code> will have been made available, to prevent a conflict during overload resolution.</p>\n", "LastActivityDate": "2014-02-22T14:44:07.910"}, "bq_ids": {"n4140": {"so_21955288_21955322_1": {"section_id": 5517, "quality": 0.9743589743589743, "length": 38}}, "n3337": {"so_21955288_21955322_1": {"section_id": 5303, "quality": 0.9743589743589743, "length": 38}}, "n4659": {"so_21955288_21955322_1": {"section_id": 6952, "quality": 0.9743589743589743, "length": 38}}}});