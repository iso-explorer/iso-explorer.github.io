post_cb({"20443262": {"CommentCount": "2", "ViewCount": "163", "CreationDate": "2013-12-07T15:48:51.240", "LastActivityDate": "2013-12-07T16:14:57.030", "Title": "\"A reference may be bound only to an object\", why is \"const int &ref = 3;\" valid?", "AcceptedAnswerId": "20443362", "PostTypeId": "1", "Id": "20443262", "Score": "1", "Body": "<p>I am just starting learning c++. I found an advice on Internet: \"Learn with a good book, it is better than videos on youtube.\" So as I am motivated and I have time I learn with c++ Primer 5th Ed.</p>\n<p>In this book, they say:\nNote: \"A reference is not an object. Instead, a reference is just another name for an already existing object.\"</p>\n<p>and:\n\"a reference may be bound only to an object, not to a literal or to the result of a more general expression\"</p>\n<p>I understand:</p>\n<pre><code>int i = 3;\nint &amp;ri = i;  // is valid: ri is a new name for i\nint &amp;ri2 = 2;  // is not valid: 2 is not an object\n</code></pre>\n<p>Then I don't understand why:</p>\n<pre><code>const int &amp;ri3 = 2;  // is valid\n</code></pre>\n<p>They write: \"It can be easier to understand complicated pointer or reference declarations if\nyou read them from right to left.\"</p>\n<p>Ok, it is not very complicated. I understand: \nI declare a variable named ri3,\nit is a reference (a reference when &amp; is after the type, an address when &amp; is in an expression)\nto an object of type int\nand it is a constant.</p>\n<p>I think it has already been explained many times but when I search on forums I find complicated (to me) answers to complicated problems, and I still don't understand. </p>\n<p>Thank you for your help.</p>\n", "Tags": "<c++><reference><initialization><const>", "OwnerUserId": "3019338", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20443262_20443362_4": {"section_id": 5947, "quality": 0.7777777777777778, "length": 7}, "so_20443262_20443362_5": {"section_id": 7230, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_20443262_20443362_4": {"section_id": 5717, "quality": 0.7777777777777778, "length": 7}, "so_20443262_20443362_5": {"section_id": 6974, "quality": 0.6666666666666666, "length": 8}}, "n4659": {"so_20443262_20443362_4": {"section_id": 7433, "quality": 0.7777777777777778, "length": 7}}}, "20443362": {"CommentCount": "1", "CreationDate": "2013-12-07T15:58:34.177", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-07T16:14:57.030", "ParentId": "20443262", "PostTypeId": "2", "LastEditorDisplayName": "user1508519", "LastEditDate": "2017-05-23T11:57:32.837", "Id": "20443362", "Score": "3", "Body": "<p><a href=\"https://stackoverflow.com/a/7701261/1508519\">https://stackoverflow.com/a/7701261/1508519</a></p>\n<blockquote>\n<p id=\"so_20443262_20443362_0\">You cannot bind a literal to a reference to non-const (because\n  modifying the value of a literal is not an operation that makes\n  sense). You can however bind a literal to a reference to const.</p>\n</blockquote>\n<p><a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow noreferrer\">http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/</a></p>\n<blockquote>\n<p id=\"so_20443262_20443362_1\">The \"const\" is important. The first line is an error and the code\n  won\u2019t compile portably with this reference to non-const, because f()\n  returns a temporary object (i.e., rvalue) and only lvalues can be\n  bound to references to non-const.</p>\n</blockquote>\n<p>For illustrative purposes see this <a href=\"https://stackoverflow.com/a/661281/1508519\">answer</a>.</p>\n<blockquote>\n<p id=\"so_20443262_20443362_2\">A non-const reference cannot point to a literal.</p>\n</blockquote>\n<p>The following code will produce an error.</p>\n<blockquote>\n<p id=\"so_20443262_20443362_3\">error: invalid initialization of non-const reference of type\n  'double&amp;' from an rvalue of type 'double'</p>\n</blockquote>\n<pre><code>#include &lt;iostream&gt;\n\ndouble foo(double &amp; x) {\n    x = 1;\n}\n\nint main () {\n    foo(5.0);\n    return 0;\n}\n</code></pre>\n<p>Here's <a href=\"https://stackoverflow.com/questions/20443262/a-reference-may-be-bound-only-to-an-object-why-is-const-int-ref-3-valid/20443362#comment30541163_20443362\">Lightness</a>' comment.</p>\n<blockquote>\n<p id=\"so_20443262_20443362_4\">[C++11: 5.1.1/1]: [..] A string literal is an lvalue; all other\n  literals are prvalues.</p>\n</blockquote>\n<p>And <a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow noreferrer\">cppreference</a> (scroll down to <code>rvalue (until C++11) / prvalue (since C++11)</code>):</p>\n<blockquote>\n<p id=\"so_20443262_20443362_5\">A prvalue (\"pure\" rvalue) is an expression that identifies a temporary\n  object (or a subobject thereof) or is a value not associated with any\n  object.</p>\n<p id=\"so_20443262_20443362_6\">The following expressions are prvalues:</p>\n<pre><code>Literal (except string literal), such as 42 or true or nullptr.\n</code></pre>\n</blockquote>\n", "OwnerDisplayName": "user1508519"}, "20443298": {"ParentId": "20443262", "CommentCount": "3", "CreationDate": "2013-12-07T15:52:06.163", "OwnerUserId": "1353223", "PostTypeId": "2", "Id": "20443298", "Score": "1", "Body": "<p>It is valid because number literals are actually constants. So the compiler can accept such reference only if it is <code>const</code>.</p>\n", "LastActivityDate": "2013-12-07T15:52:06.163"}});