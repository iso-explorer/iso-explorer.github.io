post_cb({"28030481": {"ParentId": "28029722", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In general, the standard tries to ensure that the meaning of a type in\na given scope is the same.  </p>\n<p>If we pretend that the typedef is allowed then consider the types of <code>val1</code>, <code>val2</code>, and <code>val3</code> in the following?</p>\n<pre><code>template &lt;typename T&gt;\nstruct Der: public Base\n{\n    void f1() {\n      T val1;      // What is the type of 'val1'?\n    }\n\n    T val2;        // What is the type of 'val2'?\n\n    typedef int T;\n\n    T val3;        // What is the type of 'val3'?\n};\n</code></pre>\n<p>The only variable to have the template parameter type T would be\n'val2'.</p>\n<p>This is because the standard requires that all members of the class be \"in scope\" for <code>f1</code>.  This is why member functions can refer to member variables defined later in the class body.</p>\n<p>The same problem can be demonstrated with typedefs too:</p>\n<pre><code>typedef int T;\n\nstruct S\n{\n  T x;\n  typedef float T;\n  T y;\n};\n</code></pre>\n<p>Again, if this was legal then the <code>T</code> used for the declaration of <code>x</code> would refer to <code>::T</code> and the <code>T</code> used for <code>y</code> would refer to typedef <code>S::T</code>.</p>\n<p>This is covered by the standard under ISO 3.3.7/1:</p>\n<blockquote>\n<p id=\"so_28029722_28030481_0\">The following rules describe the scope of names declared in classes.</p>\n<p id=\"so_28029722_28030481_1\">...</p>\n<p id=\"so_28029722_28030481_2\">2) A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n", "OwnerUserId": "11698", "LastEditorUserId": "11698", "LastEditDate": "2015-01-19T17:44:50.490", "Id": "28030481", "Score": "2", "CreationDate": "2015-01-19T17:37:43.297", "LastActivityDate": "2015-01-19T17:44:50.490"}, "28029821": {"ParentId": "28029722", "CommentCount": "6", "Body": "<p>The first example is incorrect according to [temp.local]/6:</p>\n<blockquote>\n<p id=\"so_28029722_28029821_0\">A <em>template-parameter</em> shall not be redeclared within its scope (including nested scopes).</p>\n</blockquote>\n<p>However, in</p>\n<pre><code>template &lt;typename T&gt;\nstruct Der: public Base\n{\n    T val;\n};\n</code></pre>\n<p><code>T</code> is hidden by the name inherited from <code>Base</code> - as specified <em>by your quote</em>.</p>\n<blockquote>\n<p id=\"so_28029722_28029821_1\">[..] <strong>if</strong> the name of the base class or <strong>the name of a member of\n  the base class is the same as the name of a <em>template-parameter</em>, the\n  base class name or member name hides the <em>template-parameter</em> name\n  (3.3.7)</strong>.</p>\n</blockquote>\n<p>That is, the member <code>val</code> is of type <code>int</code>. <a href=\"http://coliru.stacked-crooked.com/a/c5c6ab317d38065c\"><strong>Demo</strong></a>.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "28029821", "Score": "15", "CreationDate": "2015-01-19T16:57:35.270", "LastActivityDate": "2015-01-19T16:57:35.270"}, "28029722": {"CommentCount": "0", "ViewCount": "859", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-01-19T16:51:41.670", "LastActivityDate": "2016-03-18T11:33:10.640", "Title": "typedef and template parameter with same name", "AcceptedAnswerId": "28029821", "LastEditDate": "2016-03-18T11:33:10.640", "Id": "28029722", "Score": "11", "Body": "<p>Why is that case incorrect (it's logical)</p>\n<pre><code>template &lt;typename T&gt;\nstruct Der: public Base\n{\n    typedef int T;\n    T val;\n};\n</code></pre>\n<p>, but that case is correct?</p>\n<pre><code>struct Base\n{\n    typedef int T;\n};\n\ntemplate &lt;typename T&gt;\nstruct Der: public Base\n{\n    T val;\n};\n</code></pre>\n<p>The Standard 14.6.1/7 says:</p>\n<blockquote>\n<p id=\"so_28029722_28029722_0\">In the definition of a class template or in the definition of a member of such a template that appears outside of the template definition, for each base class which does not depend on a template-parameter (14.6.2), if the name of the base class or the name of a member of the base class is the same as the name of a template-parameter, the base class name or member name hides the template-parameter name (3.3.7).</p>\n</blockquote>\n<p>Why is it not ambiguous in here?</p>\n", "Tags": "<c++><templates><language-lawyer><typedef><ambiguous>", "OwnerUserId": "3514538", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_28029722_28029821_1": {"section_id": 187, "quality": 0.9473684210526315, "length": 18}, "so_28029722_28029821_0": {"section_id": 184, "quality": 1.0, "length": 8}, "so_28029722_28029722_0": {"section_id": 187, "quality": 0.9459459459459459, "length": 35}, "so_28029722_28030481_0": {"section_id": 7070, "quality": 0.875, "length": 7}, "so_28029722_28030481_2": {"section_id": 7070, "quality": 1.0, "length": 15}}, "n3337": {"so_28029722_28029821_1": {"section_id": 181, "quality": 0.9473684210526315, "length": 18}, "so_28029722_28029821_0": {"section_id": 178, "quality": 1.0, "length": 8}, "so_28029722_28030481_2": {"section_id": 6814, "quality": 1.0, "length": 15}, "so_28029722_28030481_0": {"section_id": 6814, "quality": 0.875, "length": 7}, "so_28029722_28029722_0": {"section_id": 181, "quality": 0.9459459459459459, "length": 35}}, "n4659": {"so_28029722_28029821_1": {"section_id": 192, "quality": 0.9473684210526315, "length": 18}, "so_28029722_28029821_0": {"section_id": 189, "quality": 1.0, "length": 8}, "so_28029722_28029722_0": {"section_id": 192, "quality": 0.8648648648648649, "length": 32}, "so_28029722_28030481_2": {"section_id": 8568, "quality": 1.0, "length": 15}}}, "28029831": {"ParentId": "28029722", "CommentCount": "6", "Body": "<p>Because the second is unambigous: </p>\n<p>You might not care or know that there was the <code>typedev int T</code> in the superclass, but you've just introduced <code>T</code> as template parameter, which makes it clear that you're referring to it when using <code>T</code> in <code>Der</code>.</p>\n", "OwnerUserId": "4433386", "PostTypeId": "2", "Id": "28029831", "Score": "1", "CreationDate": "2015-01-19T16:57:58.817", "LastActivityDate": "2015-01-19T16:57:58.817"}});