post_cb({"7732021": {"Id": "7732021", "PostTypeId": "2", "Body": "<p>It depends on what you mean by \"acceptable\".</p>\n<p>There are two senses in which slashes are acceptable and backslashes are not.</p>\n<p>If you're writing C99, C++03, or C1x, backslashes are undefined, while slashes are legal, so in this sense, backslashes are not acceptable.</p>\n<p>But this is irrelevant for most people. If you're writing C++1x, where backslashes are conditionally-supported, and the platform you're coding for supports them, they're acceptable. And if you're writing an \"extended dialect\" of C99/C++03/C1x that defines backslashes, same deal. And, more importantly, this notion of \"acceptable\" is pretty meaningless in most cases anyway. None of the C/C++ standards define what slashes mean (or what backslashes mean when they're conditionally-supported). Header names are mapped to source files in an implementation-defined manner, period. If you've got a hierarchy of files, and you're asking whether to use backslashes or slashes to refer to them portably in #include directives, the answer is: neither is portable. If you want to write truly portable code, you can't use hierarchies of header files\u2014in fact, arguably, your best bet is to write everything in a single source file, and not #include anything except standard headers.</p>\n<p>However, in the real world, people often want \"portable-enough\", not \"strictly portable\". The POSIX standard mandates what slashes mean, and even beyond POSIX, most modern platforms\u2014including Win32 (and Win64), the cross-compilers for embedded and mobile platforms like Symbian, etc.\u2014treat slashes the POSIX way, at least as far as C/C++ #include directives. Any platform that doesn't, probably won't have any way for you to get your source tree onto it, process your makefile/etc., and so on, so #include directives will be the least of your worries. If that's what you care about, then slashes are acceptable, but backslashes are not.</p>\n", "LastActivityDate": "2011-10-11T20:21:57.667", "CommentCount": "0", "CreationDate": "2011-10-11T20:21:57.667", "ParentId": "5790161", "Score": "4", "OwnerUserId": "908494"}, "5790161": {"ViewCount": "11591", "Body": "<p>There are two path separators in common use: the Unix forward-slash and the DOS backslash. <sub><sup>Rest in peace, Classic Mac colon.</sup></sub> If used in an #include directive, are they equal under the rules of the C++11, C++03, and C99 standards?</p>\n", "AcceptedAnswerId": "5790259", "Title": "Is the backslash acceptable in C and C++ #include directives?", "CreationDate": "2011-04-26T12:17:27.313", "Id": "5790161", "CommentCount": "1", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2016-03-09T11:59:07.830", "LastEditorUserId": "4370109", "LastActivityDate": "2016-03-09T11:59:07.830", "Score": "31", "OwnerUserId": "153285", "Tags": "<c++><c><include><c-preprocessor><header-files>", "AnswerCount": "6"}, "5790202": {"Id": "5790202", "PostTypeId": "2", "Body": "<p>Forward slash is the correct way; the pre-compiler will do whatever it takes on each platform to get to the correct file.</p>\n", "LastActivityDate": "2011-04-26T12:21:06.437", "CommentCount": "6", "CreationDate": "2011-04-26T12:21:06.437", "ParentId": "5790161", "Score": "7", "OwnerUserId": "299924"}, "5790284": {"Id": "5790284", "PostTypeId": "2", "Body": "<p>Blackslash is undefined behavior and even with a slash you have to be careful. The C99 standard states:</p>\n<blockquote>\n<p id=\"so_5790161_5790284_0\">If the characters ', \\, \", //, or /*\n  occur in the sequence between the &lt;\n  and &gt; delimiters, the behavior is\n  undefined. Similarly, if the\n  characters ', \\, //, or /* occur in\n  the sequence between the \" delimiters,\n  the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2011-04-26T12:27:35.740", "CommentCount": "2", "CreationDate": "2011-04-26T12:27:35.740", "ParentId": "5790161", "Score": "5", "OwnerUserId": "366377"}, "5790245": {"Id": "5790245", "PostTypeId": "2", "Body": "<p>The standard says for #include that it:</p>\n<blockquote>\n<p id=\"so_5790161_5790245_0\">searches   a   sequence   of  implementation-defined   places   for \n  a   header   identified   uniquely  by   the   specified sequence between\n  the delimiters, and causes the replacement of that directive by the\n  entire contents  of the header.   How the places are specified or the header\n  identified is implementation-defined.</p>\n</blockquote>\n<p>Note the last sentence.</p>\n", "LastActivityDate": "2011-04-26T12:24:19.030", "CommentCount": "1", "CreationDate": "2011-04-26T12:24:19.030", "ParentId": "5790161", "Score": "0", "OwnerUserId": "2100815"}, "bq_ids": {"n4140": {"so_5790161_5790245_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 504}, "so_5790161_5790259_5": {"length": 19, "quality": 0.9047619047619048, "section_id": 5330}, "so_5790161_5790259_4": {"length": 13, "quality": 0.8125, "section_id": 5330}, "so_5790161_5790259_2": {"length": 8, "quality": 0.5714285714285714, "section_id": 5330}}, "n3337": {"so_5790161_5790259_4": {"length": 15, "quality": 0.9375, "section_id": 5127}, "so_5790161_5790259_5": {"length": 19, "quality": 0.9047619047619048, "section_id": 5127}, "so_5790161_5790245_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 495}, "so_5790161_5790259_2": {"length": 8, "quality": 0.5714285714285714, "section_id": 5127}}, "n4659": {"so_5790161_5790259_4": {"length": 12, "quality": 0.75, "section_id": 6751}, "so_5790161_5790259_5": {"length": 19, "quality": 0.9047619047619048, "section_id": 6751}, "so_5790161_5790245_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 525}, "so_5790161_5790259_2": {"length": 8, "quality": 0.5714285714285714, "section_id": 6751}}}, "5790259": {"Id": "5790259", "PostTypeId": "2", "Body": "<p>C99 says (\u00a76.4.7/3):</p>\n<blockquote>\n<p id=\"so_5790161_5790259_0\">If the characters ', \\, \", //, or /* occur in the sequence between the &lt; and &gt; delimiters, the behavior is undefined. Similarly, if the characters ', \\, //, or /* occur in the sequence between the \" delimiters, the behavior is undefined.</p>\n<p id=\"so_5790161_5790259_1\">(footnote:    Thus, sequences of characters that resemble escape sequences cause undefined behavior.)</p>\n</blockquote>\n<p>C++03 says (\u00a72.8/2):</p>\n<blockquote>\n<p id=\"so_5790161_5790259_2\">If either of the characters \u2019 or \\, or either of the character sequences /* or // appears in a q-char- sequence or a h-char-sequence, or the character \" appears in a h-char-sequence, the behavior is undefined.</p>\n<p id=\"so_5790161_5790259_3\">(footnote: Thus, sequences of characters that resemble escape sequences cause undefined behavior.)</p>\n</blockquote>\n<p>C++11 says (\u00a72.9/2):</p>\n<blockquote>\n<p id=\"so_5790161_5790259_4\">The appearance of either of the characters \u2019 or \\ or of either of the character sequences /* or // in a q-char-sequence or an h-char-sequence is conditionally supported with implementation-defined semantics, as is the appearance of the character \" in an h-char-sequence.</p>\n<p id=\"so_5790161_5790259_5\">(footnote: Thus, a sequence of characters that resembles an escape sequence might result in an error, be interpreted as the character corresponding to the escape sequence, or have a completely different meaning, depending on the implementation.)</p>\n</blockquote>\n<p>Therefore, although any compiler might choose to support a backslash in a <code>#include</code> path, it is unlikely that any compiler vendor won't support forward slash, and backslashes are likely to trip some implementations up by virtue of forming escape codes. (Edit: apparently MSVC previously required backslash. Perhaps others on DOS-derived platforms were similar. Hmmm\u2026 what can I say.)</p>\n<p>C++11 <em>seems</em> to loosen the rules, but \"conditionally supported\" is not meaningfully better than \"causes undefined behavior.\" The change does more to reflect the existence of certain popular compilers than to describe a portable standard.</p>\n<p>Of course, nothing in any of these standards says that there is such a thing as paths. There <em>are</em> filesystems out there with no paths at all! However, many libraries assume pathnames, including POSIX and Boost, so it is reasonable to want a portable way to refer to files within subdirectories.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2011-04-26T12:40:06.097", "Score": "41", "CreationDate": "2011-04-26T12:25:35.240", "ParentId": "5790161", "CommentCount": "6", "OwnerUserId": "153285", "LastEditDate": "2011-04-26T12:40:06.097"}, "5790251": {"Id": "5790251", "PostTypeId": "2", "Body": "<p>Always use forward slashes - they work on more platforms. Backslash technically causes undefined behaviour in C++03 (2.8/2 in the standard).</p>\n", "LastEditorUserId": "212870", "LastActivityDate": "2011-10-11T20:44:45.287", "Score": "0", "CreationDate": "2011-04-26T12:24:44.633", "ParentId": "5790161", "CommentCount": "1", "OwnerUserId": "212870", "LastEditDate": "2011-10-11T20:44:45.287"}});