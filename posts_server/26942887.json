post_cb({"26949603": {"ParentId": "26942887", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The rationale for that bullet is covered in <a href=\"http://www.open-std.org/jtc1/sc22/WG21/docs/papers/2014/n3834.html#1191\" rel=\"nofollow\">defect report 1191: Deleted subobject destructors and implicitly-defined constructors</a> which says:</p>\n<blockquote>\n<p id=\"so_26942887_26949603_0\">Consider the following example:</p>\n<pre><code>struct A {\n   A();\n   ~A() = delete;\n};\n\nstruct B: A { };\nB* b = new B;\n</code></pre>\n<p id=\"so_26942887_26949603_1\">Under the current rules, B() is not deleted, but is ill-formed because\n  it calls the deleted ~A::A() if it exits via an exception after the\n  completion of the construction of A. A deleted subobject destructor\n  should be added to the list of reasons for implicit deletion in 12.1\n  [class.ctor] and 12.8 [class.copy].</p>\n</blockquote>\n<p>and the proposed resolution was to add the bullet you note above and the same wording to the following section <code>12.1</code> [class.ctor] paragraph 5:</p>\n<blockquote>\n<p id=\"so_26942887_26949603_2\">any direct or virtual base class or non-static data member has a type with a destructor that is deleted or inaccessible from the defaulted default constructor.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-11-15T19:39:26.867", "Id": "26949603", "Score": "0", "CreationDate": "2014-11-15T19:07:08.857", "LastActivityDate": "2014-11-15T19:39:26.867"}, "26942887": {"CommentCount": "11", "ViewCount": "276", "OwnerDisplayName": "user2953119", "CreationDate": "2014-11-15T05:28:20.490", "LastActivityDate": "2014-11-15T19:39:26.867", "PostTypeId": "1", "AcceptedAnswerId": "26949603", "Title": "What is the point of deleted destructor?", "Id": "26942887", "Score": "4", "Body": "<p>I come across the rule (section <code>N3797::12.8/11 [class.copy]</code>)</p>\n<blockquote>\n<p id=\"so_26942887_26942887_0\">An implicitly-declared copy/move constructor is an inline public\n  member of its class. A defaulted copy/ move constructor for a class X\n  is defined as deleted (8.4.3) if X has:</p>\n<p id=\"so_26942887_26942887_1\">[...]</p>\n<p id=\"so_26942887_26942887_2\">\u2014 any direct or virtual base class or non-static data member of a type\n  with a destructor that <em>is</em> deleted or inaccessible from the defaulted\n  constructor, or</p>\n<p id=\"so_26942887_26942887_3\">[...]</p>\n</blockquote>\n<p>But I can't get the point of deleted destructor appearing in a virtual or direct base class at all. Consider the following simple example:</p>\n<pre><code>struct A\n{\n    ~A() = delete;\n    A(){ }\n};\n\nstruct B : A\n{\n    B(){ }; //error: use of deleted function 'A::~A()'\n};\n\nB b; \n\nint main() { }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/435b3c3df8fce16e\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>It's perfectly unclear to me. I defined 0-argument constructor explcitly and it doesn't use base class destructor. But compiler thinks otherwise. It won't work even if we define <code>B</code>'s destructor explicitly:</p>\n<pre><code>struct A\n{\n    ~A() = delete;\n    A(){ }\n};\n\nstruct B : A\n{\n    B(){ };\n    ~B(){ };\n};\n\n//B b;\n\nint main() {\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/065d960785b5b8dd\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>Couldn't you clarify that thing?</p>\n", "Tags": "<c++><constructor><destructor>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26942887_26942887_2": {"section_id": 369, "quality": 0.7692307692307693, "length": 10}, "so_26942887_26949603_2": {"section_id": 369, "quality": 0.7857142857142857, "length": 11}, "so_26942887_26942887_0": {"section_id": 460, "quality": 0.875, "length": 14}}, "n3337": {"so_26942887_26942887_2": {"section_id": 359, "quality": 1.0, "length": 13}, "so_26942887_26949603_2": {"section_id": 359, "quality": 1.0, "length": 14}, "so_26942887_26942887_0": {"section_id": 451, "quality": 0.875, "length": 14}}, "n4659": {"so_26942887_26942887_2": {"section_id": 382, "quality": 0.7692307692307693, "length": 10}, "so_26942887_26949603_2": {"section_id": 382, "quality": 0.7857142857142857, "length": 11}, "so_26942887_26942887_0": {"section_id": 483, "quality": 0.875, "length": 14}}}});