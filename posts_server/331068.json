post_cb({"331068": {"AcceptedAnswerId": "331145", "Body": "<p>I have been using anonymous namespaces to store local data and functions and wanted to know when the data is initialized?  Is it when the application starts in the same way as static data or is it compiler dependent?  For example:</p>\n<pre><code>// foo.cpp\n#include \"foo.h\"\n\nnamespace {\n\nconst int SOME_VALUE = 42;\n\n}\n\nvoid foo::SomeFunc(int n)\n{\n    if (n == SOME_VALUE)\n    {\n        ...\n    }\n}\n</code></pre>\n<p>The question arises out of making some code thread-safe.  In the above example I need to be certain that <code>SOME_VALUE</code> is initialized before SomeFunc is called for the first time.</p>\n", "CreationDate": "2008-12-01T14:48:07.607", "Score": "4", "CommentCount": "0", "OwnerUserId": "9236", "Title": "When is anonymous namespace data initialized?", "LastActivityDate": "2008-12-01T15:19:53.613", "PostTypeId": "1", "Tags": "<c++><namespaces>", "AnswerCount": "4", "OwnerDisplayName": "Rob", "Id": "331068", "ViewCount": "3321"}, "331079": {"PostTypeId": "2", "ParentId": "331068", "Body": "<p>For the right answer to your actual question see Mathieu's answer.</p>\n<p>However, note that the anonymous namespace doesn't affect the beginning and end of the lifetimes of global and / or static objects.  In other words, you're just as vulnerable to <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12\" rel=\"nofollow noreferrer\">static initialization order</a> problems as by using plain old globals.<br/></p>\n<p>The link also has some tips on avoiding the issue, using \"construction on first use\", in the next topic.</p>\n", "CreationDate": "2008-12-01T14:52:05.167", "Score": "0", "Id": "331079", "CommentCount": "0", "OwnerDisplayName": "MadKeithV", "OwnerUserId": "33987", "LastActivityDate": "2008-12-01T14:52:05.167"}, "331145": {"PostTypeId": "2", "ParentId": "331068", "Body": "<p>C++ Standard, <strong>3.6.2/1</strong> :</p>\n<blockquote>\n<p id=\"so_331068_331145_0\">Zero-initialization and\n  initialization with a constant\n  expression are collectively called\n  static initialization; all other\n  initialization is dynamic\n  initialization. Objects of POD types\n  (3.9) with static storage duration\n  initialized with constant expressions\n  (5.19) shall be initialized before any\n  dynamic initialization takes place.\n  Objects with static storage duration\n  defined in namespace scope in the same\n  translation unit and dynamically\n  initialized shall be initialized in\n  the order in which their definition\n  appears in the translation unit.</p>\n</blockquote>\n<p>This effectively means, even when another translation unit calls your SomeFunc function from outside, your SOME_VALUE constant will always be correctly initialized, because it's initialized with a <em>constant expression</em>. </p>\n<p>The only way for your function being called early (before main) is while initializing an object with dynamic initialiation. But by that time, according to the standard quote, the initialization of your POD variable is already done.</p>\n", "CreationDate": "2008-12-01T15:19:53.613", "Score": "6", "Id": "331145", "CommentCount": "0", "OwnerDisplayName": "litb", "OwnerUserId": "34509", "LastActivityDate": "2008-12-01T15:19:53.613"}, "bq_ids": {"n3337": {"so_331068_331145_0": {"quality": 0.5416666666666666, "length": 26, "section_id": 6895}}}, "331081": {"PostTypeId": "2", "ParentId": "331068", "Body": "<p>Namespaces have nothing to do with the time of initialization. All that a namespace does is change names that belong to it.</p>\n", "CreationDate": "2008-12-01T14:52:14.277", "Score": "1", "Id": "331081", "CommentCount": "0", "OwnerDisplayName": "Nemanja Trifunovic", "OwnerUserId": "8899", "LastActivityDate": "2008-12-01T14:52:14.277"}, "331078": {"PostTypeId": "2", "ParentId": "331068", "Body": "<p>In this particular case (a global variable that is const) the variable is \"initialized\" at compile time.</p>\n<p>SOME_VALUE is always equal to 42.</p>\n<p>In fact, most (all?) compiler will actually compile this as if it was hardcoded :</p>\n<pre><code>void foo::SomeFunc(int n)\n{\n    if (n == 42)\n    {\n        ...\n    }\n}\n</code></pre>\n", "CreationDate": "2008-12-01T14:51:55.823", "Score": "2", "Id": "331078", "CommentCount": "0", "OwnerDisplayName": "Mathieu Pag&#233;", "OwnerUserId": "5861", "LastActivityDate": "2008-12-01T14:51:55.823"}});