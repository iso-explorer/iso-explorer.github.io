post_cb({"2727863": {"Id": "2727863", "PostTypeId": "2", "Body": "<p>Dereferencing a NULL pointer is undefined behaviour.  You should check if a value is NULL before dereferencing it.</p>\n", "LastActivityDate": "2010-04-28T08:33:17.343", "CommentCount": "0", "CreationDate": "2010-04-28T08:33:17.343", "ParentId": "2727834", "Score": "1", "OwnerUserId": "131140"}, "2727834": {"ViewCount": "19952", "Body": "<p>I'm wondering about what the C++ standard says about code like this:</p>\n<pre><code>int* ptr = NULL;\nint&amp; ref = *ptr;\nint* ptr2 = &amp;ref;\n</code></pre>\n<p>In practice the result is that <code>ptr2</code> is NULL but I'm wondering, is this just an implementation detail or is this well defined in the standard?<br>\nUnder different circumstances a dereferencing of a NULL pointer should result in a crash but here I'm dereferencing it to get a reference which is implemented by the compiler as a pointer so there's really no actual dereferencing of NULL. </br></p>\n", "AcceptedAnswerId": "2727872", "Title": "C++ standard: dereferencing NULL pointer to get a reference?", "CreationDate": "2010-04-28T08:28:59.410", "Id": "2727834", "CommentCount": "2", "FavoriteCount": "8", "PostTypeId": "1", "LastActivityDate": "2010-04-28T12:20:27.633", "Score": "29", "OwnerUserId": "9611", "Tags": "<c++><pointers><reference><null>", "AnswerCount": "5"}, "2727872": {"Id": "2727872", "PostTypeId": "2", "Body": "<p>Dereferencing a NULL pointer is undefined behavior. </p>\n<p>In fact the standard calls this exact situation out in a note (8.3.2/4  \"References\"):</p>\n<blockquote>\n<p id=\"so_2727834_2727872_0\">Note: in particular, a null reference cannot exist in a well-defined program, because the only\n  way to create such a reference would be to bind it to the \u201cobject\u201d obtained by dereferencing a null pointer, which causes undefined behavior.</p>\n</blockquote>\n<hr>\n<p>As an aside: The one time I'm aware of that a NULL pointer can be \"dereferenced\" in a well-defined way is as the operand to the <code>sizeof</code> operator, because the operand to <code>sizeof</code> isn't actually evaluated (so the dereference never actually occurs).</p>\n</hr>", "LastEditorUserId": "12711", "LastActivityDate": "2010-04-28T08:50:06.223", "Score": "43", "CreationDate": "2010-04-28T08:34:29.193", "ParentId": "2727834", "CommentCount": "6", "OwnerUserId": "12711", "LastEditDate": "2010-04-28T08:50:06.223"}, "2728049": {"Id": "2728049", "PostTypeId": "2", "Body": "<p>For completeness, this: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#232\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#232</a> talks specifically about this issue.</p>\n", "LastActivityDate": "2010-04-28T09:03:34.413", "CommentCount": "4", "CreationDate": "2010-04-28T09:03:34.413", "ParentId": "2727834", "Score": "1", "OwnerUserId": "9611"}, "bq_ids": {"n4140": {"so_2727834_2727883_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 5800}, "so_2727834_2727872_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3222}}, "n3337": {"so_2727834_2727883_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 5573}, "so_2727834_2727872_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3096}}, "n4659": {"so_2727834_2727883_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 7259}, "so_2727834_2727872_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3979}}}, "2729313": {"Id": "2729313", "PostTypeId": "2", "Body": "<pre><code>int&amp; ref = *ptr;\n</code></pre>\n<p>The above statement doesn't actually dereference anything. So there's no problem until you use the <code>ref</code> (which is invalid).</p>\n", "LastActivityDate": "2010-04-28T12:20:27.633", "CommentCount": "5", "CreationDate": "2010-04-28T12:20:27.633", "ParentId": "2727834", "Score": "-2", "OwnerUserId": "1560850"}, "2727883": {"Id": "2727883", "PostTypeId": "2", "Body": "<p>Dereferencing a NULL pointer is explicitly undefined behaviour in the C++ standard, so what you see is implementation specific.</p>\n<p>Copying from 1.9.4 in the C++0x draft standard (similar to previous standards in this respect):</p>\n<blockquote>\n<p id=\"so_2727834_2727883_0\">Certain other operations are described\n  in this International Standard as\n  undefined (for example, the effect of\n  dereferencing the null pointer).\n  [<em>Note</em>: this International Standard\n  imposes no requirements on the\n  behavior of programs that contain\n  undefined behavior. - <em>end note</em>]</p>\n</blockquote>\n", "LastEditorUserId": "25824", "LastActivityDate": "2010-04-28T09:55:59.887", "Score": "2", "CreationDate": "2010-04-28T08:35:32.060", "ParentId": "2727834", "CommentCount": "4", "OwnerUserId": "25824", "LastEditDate": "2010-04-28T09:55:59.887"}});