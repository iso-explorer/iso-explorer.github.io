post_cb({"33534067": {"ParentId": "33533944", "CommentCount": "2", "CreationDate": "2015-11-04T23:29:22.607", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "33534067", "Score": "3", "Body": "<p>You are not allowed to define the function as both <code>inline</code> and non-<code>inline</code>.</p>\n<blockquote>\n<p id=\"so_33533944_33534067_0\">If a function with external linkage is\n  declared inline in one translation unit, it shall be declared inline in all translation units in which it appears;\n  no diagnostic is required.</p>\n</blockquote>\n<p>([dcl.fct.spec]/4)</p>\n", "LastActivityDate": "2015-11-04T23:29:22.607"}, "33533944": {"CommentCount": "2", "ViewCount": "91", "PostTypeId": "1", "LastEditorUserId": "894233", "CreationDate": "2015-11-04T23:18:34.417", "LastActivityDate": "2015-11-04T23:29:22.607", "Title": "C++ inline function and external function with the same name give an unexpected result", "LastEditDate": "2015-11-04T23:25:49.443", "Id": "33533944", "Score": "0", "Body": "<p>Following code do not violate One Definition Rule, yet it is giving an unexpected result:</p>\n<p><strong>Test.hpp</strong></p>\n<pre><code>class Test\n{\n    public:\n        int test();\n};\n</code></pre>\n<p><strong>Test1.cpp</strong></p>\n<pre><code>#include \"Test.hpp\"\n\nint Test::test()\n{\n    return 1;\n}\n\nint test1() // expected to return 1\n{\n    Test a = Test();\n    return a.test();\n}\n</code></pre>\n<p><strong>Test2.cpp</strong></p>\n<pre><code>#include \"Test.hpp\"\n\ninline int Test::test() // doesn't violate ODR\n{\n    return 99;\n}\n\nint test2() // expected to return 99\n{\n    Test a = Test();\n    return a.test();\n}\n</code></pre>\n<p><strong>main.cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;\n\nint test1();\nint test2();\n\nint main()\n{\n    std::cout &lt;&lt; test1() &lt;&lt; std::endl;\n    std::cout &lt;&lt; test2() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I am expecting it to print \"1 99\", but it always prints \"1 1\".</p>\n<p>Regarding two definitions of Test::test, since one of them is an inline definition, it does not violate One Definition Rule as well.</p>\n<p>So this program is valid, but it is not printing out expected result...</p>\n<p>Is there anything wrong with this program? Or am I misunderstanding something about ODR rule? (a reference to C++ standard would be helpful).</p>\n", "Tags": "<c++><one-definition-rule>", "OwnerUserId": "894233", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33533944_33534067_0": {"section_id": 5404, "quality": 1.0, "length": 16}}, "n3337": {"so_33533944_33534067_0": {"section_id": 5199, "quality": 1.0, "length": 16}}, "n4659": {"so_33533944_33534067_0": {"section_id": 6853, "quality": 1.0, "length": 16}}}});