post_cb({"bq_ids": {"n4140": {"so_22074295_22076708_0": {"length": 23, "quality": 0.7419354838709677, "section_id": 1872}}, "n3337": {"so_22074295_22076708_0": {"length": 23, "quality": 0.7419354838709677, "section_id": 1866}}, "n4659": {"so_22074295_22076708_0": {"length": 23, "quality": 0.7419354838709677, "section_id": 2044}}}, "22074295": {"ViewCount": "312", "Body": "<p>Im using VS 2012 and I encountered really irritating behaviour(sometimes my float is NaN):</p>\n<pre><code>auto dbgHelp = std::to_string(myFloat);\n</code></pre>\n<p><code>dbgHelp</code> ends up containing <strong>5008</strong> charachters ( you cant invent this stuff up)\nmost of them 0, \nit ends up with :\n0.#INF00</p>\n<p>So is this a bug or standard allows idiotic return values like this ? </p>\n<p>fix is trivial, for me to manualy do the proper thig with ternary operator and <code>isnan()</code>\nbut I wonder if standard is specific regarding this... </p>\n", "AcceptedAnswerId": "22076708", "Title": "what can to_string() return in NaN cases", "CreationDate": "2014-02-27T16:21:09.737", "Id": "22074295", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-02-27T16:22:59.897", "LastEditorUserId": "2589776", "LastActivityDate": "2014-02-27T18:04:43.963", "Score": "3", "OwnerUserId": "700825", "Tags": "<c++><visual-c++><c++11>", "AnswerCount": "1"}, "22076708": {"Id": "22076708", "PostTypeId": "2", "Body": "<p>The <code>std::to_string</code> overloads are specified in [string.conversions]/7:</p>\n<blockquote>\n<pre><code>string to_string(int val);\nstring to_string(unsigned val);\nstring to_string(long val);\nstring to_string(unsigned long val);\nstring to_string(long long val);\nstring to_string(unsigned long long val);\nstring to_string(float val);\nstring to_string(double val);\nstring to_string(long double val);\n</code></pre>\n<p id=\"so_22074295_22076708_0\"><sup>7</sup> <em>Returns:</em> Each function returns a <code>string</code> object holding the character representation of the value of its argument that would be generated by calling <code>sprintf(buf, fmt, val)</code> with a format specifier of <code>\"%d\"</code>, <code>\"%u\"</code>, <code>\"%ld\"</code>, <code>\"%lu\"</code>, <code>\"%lld\"</code>, <code>\"%llu\"</code>, <code>\"%f\"</code>, <code>\"%f\"</code>, or <code>\"%Lf\"</code>, respectively, where <code>buf</code> designates an internal character buffer of sufficient size.</p>\n</blockquote>\n<p><code>sprintf</code> is detailed in C99 (N1256 actually) 7.19.6.6/2:</p>\n<blockquote>\n<p id=\"so_22074295_22076708_1\">The <code>sprintf</code> function is equivalent to <code>fprintf</code>, except that the output is written into\n  an array (specified by the argument <code>s</code>) rather than to a stream. A null character is written\n  at the end of the characters written; it is not counted as part of the returned value. If\n  copying takes place between objects that overlap, the behavior is undefined.</p>\n</blockquote>\n<p>Jumping over to 7.19.6.1 for <code>fprintf</code>, the format flags are described in paragraph 8. Specifically, for the <code>f</code> format:</p>\n<blockquote>\n<p id=\"so_22074295_22076708_2\">A <code>double</code> argument representing a floating-point number is converted to\n  decimal notation in the style <em>[\u2212]ddd.ddd</em>, where the number of digits after\n  the decimal-point character is equal to the precision specification. If the\n  precision is missing, it is taken as 6; if the precision is zero and the # flag is\n  not specified, no decimal-point character appears. If a decimal-point\n  character appears, at least one digit appears before it. The value is rounded to\n  the appropriate number of digits.</p>\n<p id=\"so_22074295_22076708_3\">A <code>double</code> argument representing an infinity is converted in one of the styles\n  <code>[-]inf</code> or <code>[-]infinity</code> \u2014 which style is implementation-defined. A\n  double argument representing a NaN is converted in one of the styles\n  <code>[-]nan</code> or <code>[-]nan(</code><em>n-char-sequence</em><code>)</code> \u2014 which style, and the meaning of\n  any <em>n-char-sequence</em>, is implementation-defined. The <code>F</code> conversion specifier\n  produces <code>INF</code>, <code>INFINITY</code>, or <code>NAN</code> instead of <code>inf</code>, <code>infinity</code>, or <code>nan</code>,\n  respectively.</p>\n</blockquote>\n<p>Putting it all together, when <code>float foo</code> is positive infinity, <code>std::to_string(foo)</code> should return <code>std::string(\"inf\")</code>.</p>\n", "LastActivityDate": "2014-02-27T18:04:43.963", "CommentCount": "0", "CreationDate": "2014-02-27T18:04:43.963", "ParentId": "22074295", "Score": "5", "OwnerUserId": "923854"}});