post_cb({"bq_ids": {"n4140": {"so_47930181_47931035_0": {"length": 13, "quality": 0.8125, "section_id": 7151}, "so_47930181_47931143_0": {"length": 6, "quality": 0.6, "section_id": 7196}, "so_47930181_47931143_1": {"length": 42, "quality": 0.8936170212765957, "section_id": 3291}, "so_47930181_47931035_1": {"length": 5, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_47930181_47931035_0": {"length": 13, "quality": 0.8125, "section_id": 6895}, "so_47930181_47931143_0": {"length": 6, "quality": 0.6, "section_id": 6940}, "so_47930181_47931035_1": {"length": 5, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_47930181_47931035_0": {"length": 9, "quality": 0.5625, "section_id": 4051}, "so_47930181_47931143_0": {"length": 6, "quality": 0.6, "section_id": 4799}, "so_47930181_47931143_1": {"length": 42, "quality": 0.8936170212765957, "section_id": 4053}, "so_47930181_47931035_1": {"length": 4, "quality": 0.8, "section_id": 653}}}, "47930181": {"ViewCount": "160", "Body": "<p>To use an uninitialized object of built-in type with automatic storage duration is <em>undefined behaviour</em>. Of course I recommend strongly always  to initalize member variables of built-in type inside a class type. Despite that, I assume that a member of built-in type without an initalizer is <em>always</em> initalized to zero, if the corresponding object of class type has <em>static storage duration</em> (i.e. global object). My assumption is, that the complete memory of an object of class type with <em>static storage duration</em> is <em>zeroed out</em>.</p>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Foo {\npublic:\n        int bar;\n};\n\nFoo a;\n\nint main() {\n        Foo b;\n        cout &lt;&lt; \"a.bar \" &lt;&lt; a.bar &lt;&lt; \"\\n\";\n        cout &lt;&lt; \"b.bar \" &lt;&lt; b.bar &lt;&lt; \"\\n\";\n        return 0;\n}\n</code></pre>\n<p>Compile:  </p>\n<pre><code>$ g++ -o init init.cpp -Wall -pedantic # gcc 7.2.1\ninit.cpp: In function \u2018int main()\u2019:\ninit.cpp:14:31: warning: \u2018b.Foo::bar\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n  cout &lt;&lt; \"b.bar \" &lt;&lt; b.bar &lt;&lt; \"\\n\";\n                               ^~~~\n</code></pre>\n<p><em>GCC</em> complains only about the member, of class type object with automatic-storage duration <em>b.bar</em> not <em>a.bar</em>. So I am right?  </p>\n<p><strong>Please feel free to modify the title of this question.</strong></p>\n<p>Thank you</p>\n", "AcceptedAnswerId": "47931035", "Title": "Is a member variable of built-in type inside a global object zero initalised?", "CreationDate": "2017-12-21T17:45:58.110", "LastActivityDate": "2017-12-21T20:38:04.100", "CommentCount": "9", "LastEditDate": "2017-12-21T20:38:04.100", "PostTypeId": "1", "LastEditorUserId": "1054324", "Id": "47930181", "Score": "5", "OwnerUserId": "1054324", "Tags": "<c++>", "AnswerCount": "2"}, "47931143": {"Id": "47931143", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47930181_47931143_0\">Not to initalize an object of built-in type with automatic storage duration is undefined behaviour. </p>\n</blockquote>\n<p>No, that's not correct. See <a href=\"http://eel.is/c++draft/dcl.init#:indeterminate_value\" rel=\"nofollow noreferrer\">[dcl.init]/12</a>:</p>\n<blockquote>\n<p id=\"so_47930181_47931143_1\">If no initializer is specified for an object, the object is default-initialized. When storage for an object with automatic or dynamic storage duration is obtained, the object has an indeterminate value, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced ([expr.ass]). [\u2009Note: Objects with static or thread storage duration are zero-initialized, see [basic.start.static]. \u2014\u2009end note] If an indeterminate value is produced by an evaluation, the behavior is undefined except in the following cases:</p>\n</blockquote>\n<p><code>Foo b;</code> is defined behavior, <code>cout &lt;&lt; \"b.bar \" &lt;&lt; b.bar &lt;&lt; \"\\n\";</code> (before <code>b.bar</code> has a set value) is undefined behavior.</p>\n<blockquote>\n<p id=\"so_47930181_47931143_2\">GCC complains only about the member, of class type object with automatic-storage duration b.bar not a.bar. </p>\n</blockquote>\n<p>GCC's family of warnings related to uninitialized variables are provided for convenience and often contains false positives. It is not possible in the general case to have accurate warnings for every scenario (it's as hard as solving the halting problem). It's simply letting you know that you're trying to use a value that you did not explicitly initialize, i.e has indeterminate value, which is probably not what you wanted.</p>\n", "OwnerDisplayName": "user6998534", "LastActivityDate": "2017-12-21T18:57:56.140", "Score": "1", "CreationDate": "2017-12-21T18:57:56.140", "ParentId": "47930181", "CommentCount": "1"}, "47931035": {"Id": "47931035", "PostTypeId": "2", "Body": "<p>As said in the comment, it is <em>zero initialized</em>, <a href=\"https://timsong-cpp.github.io/cppwp/n4140/basic.start.init#2\" rel=\"nofollow noreferrer\">[basic.start.init]/3</a>:</p>\n<blockquote>\n<p id=\"so_47930181_47931035_0\">Variables with <em>static storage duration</em> ([basic.stc.static]) or <em>thread storage duration</em> ([basic.stc.thread]) shall be <em>zero-initialized</em> ([dcl.init]) before any other initialization takes place.[...]</p>\n</blockquote>\n<p>And zero initializing an object, zero initializes all its non-static data members and padding bits, <a href=\"https://timsong-cpp.github.io/cppwp/n4140/dcl.init#6.2\" rel=\"nofollow noreferrer\">[dlc.init]/6.2</a>:</p>\n<blockquote>\n<p id=\"so_47930181_47931035_1\">To <em>zero-initialize</em> an object or reference of type T means:[...]</p>\n<ul>\n<li>if T is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is <em>zero-initialized</em> and padding is initialized to zero bits;[...]</li>\n</ul>\n</blockquote>\n<p>So, as you said the complete object memory is zeroed out (bits belonging to its value representation and its padding-bits).</p>\n", "LastEditorUserId": "5632316", "LastActivityDate": "2017-12-21T18:55:57.063", "Score": "1", "CreationDate": "2017-12-21T18:49:57.263", "ParentId": "47930181", "CommentCount": "1", "OwnerUserId": "5632316", "LastEditDate": "2017-12-21T18:55:57.063"}});