post_cb({"bq_ids": {"n4140": {"so_17515790_17515861_0": {"length": 35, "quality": 0.8536585365853658, "section_id": 7145}}, "n3337": {"so_17515790_17515861_0": {"length": 35, "quality": 0.8536585365853658, "section_id": 6889}}, "n4659": {"so_17515790_17515861_0": {"length": 33, "quality": 0.8048780487804879, "section_id": 8646}}}, "17515861": {"Id": "17515861", "PostTypeId": "2", "Body": "<p>C++ draft from 2012-11-02.   3.6.1:</p>\n<blockquote>\n<p id=\"so_17515790_17515861_0\">A program shall contain a global function called main, which is the designated start of the program. It\n  is implementation-defined whether a program in a freestanding environment is required to define a main\n  function. [ Note: In a freestanding environment, start-up and termination is implementation-defined; start-\n  up contains the execution of constructors for objects of namespace scope with static storage duration;\n  termination contains the execution of destructors for objects with static storage duration. \u2014 end note ]</p>\n</blockquote>\n", "LastActivityDate": "2013-07-07T20:06:03.603", "CommentCount": "3", "CreationDate": "2013-07-07T20:06:03.603", "ParentId": "17515790", "Score": "7", "OwnerUserId": "1012759"}, "17515790": {"ViewCount": "978", "Body": "<p>There was an entry in the <a href=\"http://www.ioccc.org/1994/smr.hint\" rel=\"nofollow noreferrer\">1994 Obfuscated C contest</a> that qualified as the smallest quine.  It was just an empty file.</p>\n<p>Is there something in the C++ spec that allows for compiling empty files?  If not, what is the bare minimum for a \"valid program?\"  I vaguely remember reading somewhere that there was a special case where an empty file is given a default implementation in the C++ spec, but I cannot find the reference. </p>\n<p>I tried this, though I don't know that it is necessarily convincing.</p>\n<pre><code>$ rm main_empty.cpp\nrm: cannot remove `main_empty.cpp': No such file or directory\n$ touch main_empty.cpp\n$ g++ -o empty main_empty.cpp\n/usr/lib/gcc/.../x86_64-linux-gnu/crt1.o: In function `_start':\n(.text+0x20): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>With a little coddling, you can get around the missing main.</p>\n<pre><code>$ g++ -Wl,--defsym=_start=_exit -Wl,--undefined=_exit \\\n    -nostartfiles -static -o empty main_empty.cpp\n</code></pre>\n<p>UPDATE:</p>\n<p>It was noted that the <code>main_empty.cpp</code> was redundant.  If you remove it from the command it compiles the same.</p>\n<p>I added some static junk to the <code>main_empty.cpp</code> to see if it manifested in different behavior and it did not.  It did change the executable size however.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    Foo() {\n        std::cout &lt;&lt; \"hi\" &lt;&lt; std::endl;\n    }\n} foo;\n</code></pre>\n<p>If you add a <code>main</code> to the file, and compile as normal it will output as you'd expect with typical static loading.</p>\n", "AcceptedAnswerId": "17515861", "Title": "Does compiling an empty file follow the C++ standard?", "CreationDate": "2013-07-07T19:59:12.010", "Id": "17515790", "CommentCount": "3", "LastEditDate": "2013-07-07T20:19:54.250", "PostTypeId": "1", "LastEditorUserId": "839436", "LastActivityDate": "2013-07-07T20:19:54.250", "Score": "7", "OwnerUserId": "839436", "Tags": "<c++>", "AnswerCount": "1"}});