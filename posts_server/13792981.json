post_cb({"bq_ids": {"n4140": {"so_13792981_13793032_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 6111}}, "n3337": {"so_13792981_13793032_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 5877}}, "n4659": {"so_13792981_13793032_0": {"length": 25, "quality": 0.7352941176470589, "section_id": 7608}}}, "13792981": {"ViewCount": "178", "Body": "<p>I came across this fringe question that I would normally dismiss with \"<a href=\"http://yosefk.com/c++fqa/exceptions.html#fqa-17.3\" rel=\"nofollow\">don't do that</a>\", but I couldn't find a satisfactory answer in the standard and would appreciate if someone could point out the reasoning:</p>\n<p>Suppose a I have a class that throws an exception in the destructor:</p>\n<pre><code>struct Foo { ~Foo() { throw std::runtime_error(\"Catch this!\"); } };\n</code></pre>\n<p>What happens to the dynamically allocated memory if I delete a dynamically allocated instance of this class?</p>\n<pre><code>auto p = new Foo;\n\ntry { delete p; }\ncatch (std::exception const &amp;) { }\n</code></pre>\n<p>Is the deallocation function called or not? And why? Could I make this code correct by adding <code>operator delete(p);</code> into the <code>catch</code> block?</p>\n<p>I ran a small test with GCC which seems to <em>not</em> deallocate the memory automatically. (Contrast this with exceptions in the <em>constructor</em>, in which case the deallocation function is guaranteed to be called (if it exists).)</p>\n", "AcceptedAnswerId": "13793032", "Title": "Exception in destructor of dynamic object", "CreationDate": "2012-12-09T23:27:06.987", "Id": "13792981", "CommentCount": "10", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-12-10T00:06:58.073", "LastEditorUserId": "49942", "LastActivityDate": "2012-12-10T00:06:58.073", "Score": "3", "OwnerUserId": "596781", "Tags": "<c++><exception><destructor><language-lawyer><dynamic-allocation>", "AnswerCount": "1"}, "13793032": {"Id": "13793032", "PostTypeId": "2", "Body": "<p>The Standard says (5.3.5p7):</p>\n<blockquote>\n<p id=\"so_13792981_13793032_0\">If the value of the operand of the <em>delete-expression</em> is not a null pointer value, the <em>delete-expression</em> will call a deallocation function. Otherwise, it is unspecified whether the deallocation function will be called. [ Note: The deallocation function is called regardless of whether the destructor for the object or some element of the array throws an exception.  \u2014 end note ]</p>\n</blockquote>\n<p>The note answers your question.</p>\n", "LastActivityDate": "2012-12-09T23:32:58.390", "CommentCount": "3", "CreationDate": "2012-12-09T23:32:58.390", "ParentId": "13792981", "Score": "6", "OwnerUserId": "103167"}});