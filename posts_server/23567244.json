post_cb({"bq_ids": {"n4140": {"so_23567244_23567485_1": {"length": 15, "quality": 1.0, "section_id": 5555}, "so_23567244_23567485_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5565}}, "n3337": {"so_23567244_23567485_1": {"length": 15, "quality": 1.0, "section_id": 5337}, "so_23567244_23567485_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5347}}, "n4659": {"so_23567244_23567485_1": {"length": 9, "quality": 0.6, "section_id": 7000}, "so_23567244_23567485_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 7012}}}, "23567485": {"Id": "23567485", "PostTypeId": "2", "Body": "<p>24.2.1 [iterator.requirements.general]/11</p>\n<blockquote>\n<p id=\"so_23567244_23567485_0\">In the following sections, a and b denote values of type X or const X,\n  difference_type and reference refer to the types\n  iterator_traits::difference_type and \n  iterator_traits::reference, respectively</p>\n</blockquote>\n<p><code>reference</code> is not <code>allocator_traits&lt;T&gt;::reference</code>, but <code>iterator_traits&lt;T&gt;::reference</code>.</p>\n<p>Now, in the standard <code>std::ostream_iterator&lt;T&gt;</code> is defined as:</p>\n<pre><code>class ostream_iterator:\n                   public iterator&lt;output_iterator_tag, void, void, void, void&gt; {\n</code></pre>\n<p>The last argument to the <code>std::iterator</code> template is the <em>reference type</em>, which means that <code>iterator_traits&lt;T&gt;::reference</code> is required to be <code>void</code> for <code>std::ostream_iterator&lt;T&gt;</code>.</p>\n<p>At the same time, 24.2.1/1 requires:</p>\n<blockquote>\n<p id=\"so_23567244_23567485_1\">[...] All output iterators support the expression *i = o where o is a value of some type that is in the set of types that are writable to the particular iterator type of i. [...]</p>\n</blockquote>\n<p>This might be the part that you are missing that guarantees that the assignment works. I imagine that the <code>reference</code> being <code>void</code> somehow represents that you cannot <em>read</em> out of this, but I guess it could be improved.</p>\n", "LastEditorUserId": "36565", "LastActivityDate": "2014-05-09T14:50:59.253", "Score": "2", "CreationDate": "2014-05-09T14:43:15.583", "ParentId": "23567244", "CommentCount": "7", "OwnerUserId": "36565", "LastEditDate": "2014-05-09T14:50:59.253"}, "23567244": {"ViewCount": "126", "Body": "<p>I am implementing some type-traits/concept classes to check that a type passed to a generic function satisfies the compile-time requirements for iterator types (as defined in the standard, starting from 24.2.2).</p>\n<p>The problem is that a basic iterator requirement (Table 106) is that the type of <code>*r</code> (where <code>r</code> is a reference to an iterator of type <code>T</code>) is <code>std::iterator_traits&lt;T&gt;::reference</code>. However, if we consider an output iterator such as <code>std::ostream_iterator</code>,</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/iterator/ostream_iterator\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/iterator/ostream_iterator</a></p>\n<p>we can see how in this case the <code>reference</code> type is <code>void</code>, whereas the <code>operator*()</code> of the iterator type returns <code>std::ostream_iterator &amp;</code>.</p>\n<p>Clearly, I am misunderstanding something here, but I can't see what? Does it have anything to do with the fact that output iterators can be dereferenced only on the left side of an assignment?</p>\n<p>EDIT: I would like to clarify that my question is about the inconsistency between the reference type and the type resulting from calling <code>operator*()</code> on <code>std::ostream_iterator</code> (and a bunch of other output iterators in the standard library).</p>\n", "Title": "Apparent inconsistency in iterator requirements", "CreationDate": "2014-05-09T14:33:35.863", "LastActivityDate": "2014-05-09T15:07:21.727", "CommentCount": "0", "LastEditDate": "2014-05-09T15:07:21.727", "PostTypeId": "1", "LastEditorUserId": "453925", "Id": "23567244", "Score": "5", "OwnerUserId": "453925", "Tags": "<c++><c++11><iterator>", "AnswerCount": "1"}});