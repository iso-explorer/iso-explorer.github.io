post_cb({"31362252": {"CommentCount": "7", "ViewCount": "202", "CreationDate": "2015-07-11T21:59:53.380", "LastActivityDate": "2015-07-11T22:50:19.277", "Title": "C++ what is the value category of *this?", "AcceptedAnswerId": "31362290", "PostTypeId": "1", "Id": "31362252", "Score": "3", "Body": "<p>Section 9.3.2.1 of the C++ standard states:</p>\n<blockquote>\n<p id=\"so_31362252_31362252_0\">In the body of a non-static (9.3) member function, the keyword this is\n  a prvalue expression whose value is the address of the object for\n  which the function is called. The type of this in a member function of\n  a class X is X*. If the member function is declared const, the type of\n  this is const X*, if the member function is declared volatile, the\n  type of this is volatile X*, and if the member function is declared\n  const volatile, the type of this is const volatile X*.</p>\n</blockquote>\n<p>So if <code>this</code> is a prvalue, what is the value category of <code>*this</code>? The following suggests that even when the object is an rvalue, <code>*this</code> is always an lvalue. Is this correct? Please refer to the standard, if possible.</p>\n<pre><code>struct F;\nstruct test\n{\n    void operator()(F &amp;&amp;) { std::cout &lt;&lt; \"rvalue operator()\" &lt;&lt; std::endl; }\n    void operator()(F const &amp;&amp;) { std::cout &lt;&lt; \"const rvalue operator()\" &lt;&lt; std::endl; }\n    void operator()(F &amp;) { std::cout &lt;&lt; \"lvalue operator()\" &lt;&lt; std::endl; }\n    void operator()(F const &amp;) { std::cout &lt;&lt; \"const lvalue operator()\" &lt;&lt; std::endl; }\n};\n\nstruct F\n{\n    void operator ()()\n    {\n        struct test t;\n        t(*this);\n    }\n};\n\nint main()\n{\n    struct F f;\n    f();\n    std::move(f)();\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>lvalue operator()\nlvalue operator()\n</code></pre>\n", "Tags": "<c++><c++11><rvalue><this-pointer>", "OwnerUserId": "540815", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31362252_31362252_0": {"section_id": 5895, "quality": 0.9736842105263158, "length": 37}, "so_31362252_31362290_2": {"section_id": 7230, "quality": 0.95, "length": 19}, "so_31362252_31362290_0": {"section_id": 7230, "quality": 0.9473684210526315, "length": 36}, "so_31362252_31362290_1": {"section_id": 6064, "quality": 0.9, "length": 18}}, "n3337": {"so_31362252_31362252_0": {"section_id": 5666, "quality": 0.9736842105263158, "length": 37}, "so_31362252_31362290_2": {"section_id": 6974, "quality": 0.95, "length": 19}, "so_31362252_31362290_0": {"section_id": 6974, "quality": 0.9473684210526315, "length": 36}, "so_31362252_31362290_1": {"section_id": 5832, "quality": 0.9, "length": 18}}, "n4659": {"so_31362252_31362252_0": {"section_id": 7378, "quality": 0.9736842105263158, "length": 37}, "so_31362252_31362290_1": {"section_id": 7560, "quality": 0.9, "length": 18}}}, "31362290": {"ParentId": "31362252", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From [basic.lval]:</p>\n<blockquote>\n<p id=\"so_31362252_31362290_0\">An lvalue (so called, historically, because lvalues could appear on the left-hand side of an assignment\n  expression) designates a function or an object. <em>[ Example:</em> If <code>E</code> is an expression of pointer type, then\n  <code>*E</code> is an lvalue expression referring to the object or function to which <code>E</code> points. As another example,\n  the result of calling a function whose return type is an lvalue reference is an lvalue. <em>\u2014end example ]</em></p>\n</blockquote>\n<p>And from [expr.unary.op]:</p>\n<blockquote>\n<p id=\"so_31362252_31362290_1\">The unary <code>*</code> operator performs <em>indirection</em>: the expression to which it is applied shall be a pointer to an\n  object type, or a pointer to a function type and the result is an <strong>lvalue</strong> referring to the object or function\n  to which the expression points.</p>\n</blockquote>\n<p>Dereferencing a pointer is an lvalue. So <code>*this</code> is an lvalue.</p>\n<p>Alternatively, anything that isn't an lvalue is an rvalue. An rvalue is:</p>\n<blockquote>\n<p id=\"so_31362252_31362290_2\">An rvalue (so called, historically, because rvalues could appear on the right-hand side of an assignment\n  expression) is an xvalue, a temporary object (12.2) or subobject thereof, or a value that is not associated\n  with an object.</p>\n</blockquote>\n<p>And <code>*this</code> is definitely none of those things.  </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-07-11T22:50:19.277", "Id": "31362290", "Score": "3", "CreationDate": "2015-07-11T22:05:15.090", "LastActivityDate": "2015-07-11T22:50:19.277"}});