post_cb({"29381406": {"ParentId": "29381223", "CommentCount": "0", "Body": "<p>There is absolutely no difference. The <code>else</code> clause does not produce any executable code. At the machine instruction level there are only conditional and unconditional branches to given addresses. Sort of <code>goto</code> in C.</p>\n<p>So both your functions will be executed like this:</p>\n<pre><code>    if (a &gt; b) goto label_1;\n    return_register = b;\n    goto label_2;\nlabel_1:\n    return_register = a;\nlabel_2:\n    return return_register;\n</code></pre>\n", "OwnerUserId": "4718787", "PostTypeId": "2", "Id": "29381406", "Score": "0", "CreationDate": "2015-04-01T01:32:12.363", "LastActivityDate": "2015-04-01T01:32:12.363"}, "29381539": {"ParentId": "29381223", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The way I see it, you've asked whether one or the other is efficient <strong>in the realms of C or C++</strong>. <a href=\"http://www.iso-9899.info/n1570.html#5.1.2.3p4\" rel=\"nofollow\">The C standard</a> says:</p>\n<blockquote>\n<p id=\"so_29381223_29381539_0\">In the abstract machine, all expressions are evaluated as specified by the semantics. An\n  actual implementation need not evaluate part of an expression if it can deduce that its\n  value is not used and that no needed side effects are produced (including any caused by\n  calling a function or accessing a volatile object).</p>\n</blockquote>\n<p>The C++ standard has something similar.</p>\n<p>Since we're missing crucial details regarding the actual implementation (like whether one piece of code is non-optimal and the other is optimal) and the standards don't specify what is <em>efficient</em>, there is no clear answer to your question... at least, not <strong>in the realms of C or C++</strong>. You'd have to tag whatever your compiler is, rather than [c] and [c++].</p>\n<p>Other factors that might affect the <em>efficiency</em> of the program are... well... the program! It's well known that as code and data grow, so to does the risks of cache misses. You probably shouldn't be testing this code on its own for that very reason: There's nothing meaningful that can come of it, because the figures will change the moment you change something.</p>\n<p>For this reason we often refrain from <em>premature optimisation</em> by focusing on <strong>solving the realistic problem</strong> with <strong>easy to read and easy to write code</strong> primarily. Once you have the solution to your realistic problem (and the permission or request of your boss to optimise it), use your <em>profiler</em> to determine what the most significant bottlenecks are, and try to optimise those.</p>\n<p>If you try to optimise anywhere else, particularly by introducing extra code or data to reduce code or data elsewhere, then you might be pushing a more significant optimisation further out of your reach.</p>\n<p>Once you've optimised the most significant bottleneck you can, use your profiler again to ensure that the optimisation was successful, and to determine other areas that could be optimised.</p>\n<p>This may very well save your job, one day...</p>\n", "OwnerUserId": "1989425", "LastEditorUserId": "1989425", "LastEditDate": "2015-04-01T02:31:46.977", "Id": "29381539", "Score": "0", "CreationDate": "2015-04-01T01:49:33.113", "LastActivityDate": "2015-04-01T02:31:46.977"}, "29381223": {"CommentCount": "11", "ViewCount": "72", "PostTypeId": "1", "ClosedDate": "2016-03-24T19:19:14.530", "LastEditorUserId": "4653108", "CreationDate": "2015-04-01T01:09:52.477", "LastActivityDate": "2015-04-01T02:31:46.977", "Title": "Which one of the two ways of number comparison is more efficient", "LastEditDate": "2015-04-01T01:32:42.480", "Id": "29381223", "Score": "-5", "Body": "<p>In a function for number comparison, we can use if clauses, one is use if else, the other is directly use return. Since if it does not return the big one, the other is definitely the bigger one.</p>\n<p>Now the question is: Which is more efficient? I tested with a timing function, which fails to differentiate.</p>\n<p>Method A:</p>\n<pre><code>int getmax(int a,int b){\n  if (a&gt;b)return a;\n  else return b;\n}\n</code></pre>\n<p>Method B:</p>\n<pre><code>int getmax(int a,int b){\n  if (a&gt;b)return a;\n  return b;\n}\n</code></pre>\n<p>Sorry for making some of you unhappy. I have this question is because that I want to know that what the else clause contribute to the timing. Will the else clause cost more time? Although I run it for 100000000 times in a for loop, it appears to be a random efficiency.</p>\n", "Tags": "<c++><c>", "OwnerUserId": "4653108", "AnswerCount": "4"}, "29381287": {"ParentId": "29381223", "CommentCount": "0", "Body": "<p>I would highly recommend using the second option, because it is essentially doing the same thing, but without any extra code. You can look at it this way:</p>\n<p>The function escapes at the <code>return</code> statement, and may return a value that was specified. With that being said, escaping the function after the <code>if</code> statement is already a good idea, and there is nothing wrong with that. The <code>return</code> statement after the <code>if</code> will exit the function, without consideration for any code after that. This means that the <code>else</code> is unnecessary, and is just extra work for the compiler, and just isn't necessary. </p>\n", "OwnerUserId": "3858391", "PostTypeId": "2", "Id": "29381287", "Score": "0", "CreationDate": "2015-04-01T01:17:53.813", "LastActivityDate": "2015-04-01T01:17:53.813"}, "29381285": {"ParentId": "29381223", "CommentCount": "2", "Body": "<p>I see no point if such comparisons, but if you are <strong>really</strong> curious, let's compare assembly generated by VC11:</p>\n<pre><code>int getmax_1(int a,int b)\n{\n    if (a&gt;b)\n        return a;\n    else\n        return b;\n}\n\nint getmax_2(int a,int b)\n{\n    if (a&gt;b)\n        return a;\n\n    return b;\n}\n</code></pre>\n<p><strong>getmax_1</strong></p>\n<pre><code>    if (a&gt;b)\n002017BE  mov         eax,dword ptr [a]  \n002017C1  cmp         eax,dword ptr [b]  \n002017C4  jle         getmax_1+2Dh (02017CDh)  \n    return a;\n002017C6  mov         eax,dword ptr [a]  \n002017C9  jmp         getmax_1+30h (02017D0h)  \n    else\n002017CB  jmp         getmax_1+30h (02017D0h)  \n    return b;\n002017CD  mov         eax,dword ptr [b]\n</code></pre>\n<p><strong>getmax_2</strong></p>\n<pre><code>    if (a&gt;b)\n002017FE  mov         eax,dword ptr [a]  \n00201801  cmp         eax,dword ptr [b]  \n00201804  jle         getmax_2+2Bh (020180Bh)  \n    return a;\n00201806  mov         eax,dword ptr [a]  \n00201809  jmp         getmax_2+2Eh (020180Eh)  \n    return b;\n0020180B  mov         eax,dword ptr [b]  \n</code></pre>\n<p>This is, however, a Debug build. In release build, these two calls will be definitely inlined and additional call in second function probably eliminated.</p>\n<p>So... no difference, really.</p>\n", "OwnerUserId": "2812864", "PostTypeId": "2", "Id": "29381285", "Score": "2", "CreationDate": "2015-04-01T01:17:35.857", "LastActivityDate": "2015-04-01T01:17:35.857"}, "bq_ids": {"n4140": {"so_29381223_29381539_0": {"section_id": 5797, "quality": 0.5357142857142857, "length": 15}}, "n3337": {"so_29381223_29381539_0": {"section_id": 5570, "quality": 0.5357142857142857, "length": 15}}, "n4659": {"so_29381223_29381539_0": {"section_id": 7256, "quality": 0.5357142857142857, "length": 15}}}});