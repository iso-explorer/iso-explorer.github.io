post_cb({"bq_ids": {"n4140": {"so_12580628_12580789_1": {"length": 30, "quality": 0.967741935483871, "section_id": 3735}, "so_12580628_12580789_0": {"length": 31, "quality": 1.0, "section_id": 955}}, "n3337": {"so_12580628_12580789_1": {"length": 30, "quality": 0.967741935483871, "section_id": 3597}, "so_12580628_12580789_0": {"length": 31, "quality": 1.0, "section_id": 943}}, "n4659": {"so_12580628_12580789_1": {"length": 30, "quality": 0.967741935483871, "section_id": 4502}, "so_12580628_12580789_0": {"length": 26, "quality": 0.8387096774193549, "section_id": 1016}}}, "12580789": {"Id": "12580789", "PostTypeId": "2", "Body": "<p>Separation of concern? A <code>vector</code> and a <code>valarray</code> solve different problems. Quoting from the standard, a <code>vector</code> is a (<code>\u00a723.3.6.1 [vector.overview] p1</code>)</p>\n<blockquote>\n<p id=\"so_12580628_12580789_0\">... sequence container that supports random access iterators. In addition, it supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve efficiency.</p>\n</blockquote>\n<p>while a <code>valarray</code> is a (<code>\u00a726.6.2.1 [template.valarray.overview] p1</code>)</p>\n<blockquote>\n<p id=\"so_12580628_12580789_1\">... one-dimensional smart array, with elements numbered sequentially from zero. <strong>It is a representation of the mathematical concept of an ordered set of values.</strong> The illusion of higher dimensionality may be produced by the familiar idiom of computed indices, together with the powerful subsetting capabilities provided by the generalized subscript operators.</p>\n</blockquote>\n<p>As you can see, they serve different purposes. A <code>vector</code> is a generalized <em>dynamic array</em>, while a <code>valarray</code> represents a set of values. It's also not resizeable and only assignable.</p>\n", "LastEditorUserId": "78845", "LastActivityDate": "2013-02-25T21:53:38.840", "Score": "10", "CreationDate": "2012-09-25T10:11:26.847", "ParentId": "12580628", "CommentCount": "1", "OwnerUserId": "500104", "LastEditDate": "2013-02-25T21:53:38.840"}, "12580628": {"ViewCount": "3661", "Body": "<p>Yes, this <a href=\"https://stackoverflow.com/questions/1602451/c-valarray-vs-vector\">has been asked before</a>, and the answer has been:</p>\n<blockquote>\n<p id=\"so_12580628_12580628_0\"><code>valarray</code>s (value arrays) are intended to bring some of the speed of Fortran to C++. You wouldn't make a <code>valarray</code> of pointers so the compiler can make assumptions about the code and optimise it better. (The main reason that Fortran is so fast is that there is no pointer type so there can be no pointer aliasing.)</p>\n</blockquote>\n<p>or:</p>\n<blockquote>\n<p id=\"so_12580628_12580628_1\"><code>valarray</code> is also supposed to eliminate any possibility of aliasing [...]</p>\n</blockquote>\n<p>But these answers make no sense to me.  </p>\n<p><code>valarray</code> and <code>vector</code> are <em>class templates</em>, and as such, they don't even <em>exist</em> until instantiated.<br>\nAnd of course, a <code>vector&lt;int&gt;</code> doesn't cause aliasing issues any more than <code>valarray&lt;int&gt;</code> does.</br></p>\n<p>Given this, what was the purpose of <code>valarray</code>, and why did they not simply put the same functionality into <code>vector</code> instead?</p>\n", "AcceptedAnswerId": "12580789", "Title": "valarray vs. vector: Why was valarray introduced?", "CreationDate": "2012-09-25T10:01:11.243", "Id": "12580628", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:16:45.943", "LastEditorUserId": "-1", "LastActivityDate": "2013-02-25T21:53:38.840", "Score": "6", "OwnerUserId": "541686", "Tags": "<c++><valarray>", "AnswerCount": "2"}, "12580717": {"Id": "12580717", "PostTypeId": "2", "Body": "<ul>\n<li><p>valarray has the slice mechanism</p></li>\n<li><p>valarray is expected to be implemented using expression template for its numerical operators</p></li>\n</ul>\n", "LastActivityDate": "2012-09-25T10:07:12.137", "CommentCount": "0", "CreationDate": "2012-09-25T10:07:12.137", "ParentId": "12580628", "Score": "5", "OwnerUserId": "136208"}});