post_cb({"28487646": {"ParentId": "28475630", "CommentCount": "0", "Body": "<p>From the standard [class.temporary]:</p>\n<blockquote>\n<p id=\"so_28475630_28487646_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the full-expression. The first context is when a default constructor is called to initialize an element of an array.</p>\n<p id=\"so_28475630_28487646_1\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound persists\n  for the lifetime of the reference except:<br>\n  \u2014 A temporary object bound to a reference parameter in a function call (5.2.2) persists until the completion\n  of the full-expression containing the call.<br>\n  \u2014 The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not\n  extended; the temporary is destroyed at the end of the full-expression in the return statement.<br>\n  \u2014 A temporary bound to a reference in a <em>new-initializer</em> (5.3.4) persists until the completion of the\n  full-expression containing the new-initializer.</br></br></br></p>\n</blockquote>\n<p>The line <code>auto&amp;&amp; x = f();</code> falls into that second context, and none of the exceptions apply. Thus, the temporary persists for the lifetime of the reference. So there's nothing wrong with that code. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28487646", "Score": "2", "CreationDate": "2015-02-12T20:59:19.847", "LastActivityDate": "2015-02-12T20:59:19.847"}, "bq_ids": {"n4140": {"so_28475630_28487646_0": {"section_id": 381, "quality": 0.95, "length": 19}, "so_28475630_28487646_1": {"section_id": 382, "quality": 0.8888888888888888, "length": 56}}, "n3337": {"so_28475630_28487646_0": {"section_id": 372, "quality": 0.95, "length": 19}, "so_28475630_28487646_1": {"section_id": 373, "quality": 0.8888888888888888, "length": 56}}, "n4659": {"so_28475630_28487646_0": {"section_id": 396, "quality": 0.9, "length": 18}, "so_28475630_28487646_1": {"section_id": 397, "quality": 0.8888888888888888, "length": 56}}}, "28475630": {"CommentCount": "2", "ViewCount": "72", "CreationDate": "2015-02-12T10:55:17.727", "LastActivityDate": "2015-02-12T20:59:19.847", "Title": "auto && outside range-for", "AcceptedAnswerId": "28487646", "PostTypeId": "1", "Id": "28475630", "Score": "1", "Body": "<p>Am I right in assuming that writing</p>\n<pre><code>auto &amp;&amp; x = ...;\n</code></pre>\n<p>almost never makes sense outside the <code>for (...)</code> part of a range for, since if the right-hand side indeed is an rvalue, it will normally stop to exist at the semicolon and then <code>x</code> refers to something that has been destroyed.</p>\n<p>In other words:</p>\n<pre><code>Widget f () { ... }\n...\nauto &amp;&amp; x = f();\n// do something with x\n</code></pre>\n<p>is wrong?</p>\n", "Tags": "<c++11><auto><rvalue-reference>", "OwnerUserId": "1419315", "AnswerCount": "1"}});