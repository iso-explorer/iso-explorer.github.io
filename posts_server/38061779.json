post_cb({"38065158": {"ParentId": "38061779", "CommentCount": "1", "CreationDate": "2016-06-28T00:17:34.017", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "38065158", "Score": "8", "Body": "<p>This is a compiler bug in g++.</p>\n<p>In C++14 (N4140) section [dcl.init.list], the definition of list initialization is (edited for conciseness):</p>\n<blockquote>\n<p id=\"so_38061779_38065158_0\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<ul>\n<li>If <code>T</code> is an aggregate, aggregate initialization is performed</li>\n<li>Otherwise, if the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is value-initialized.</li>\n<li>Otherwise, if <code>T</code> is a specialization of std::initializer_list, [...]</li>\n<li>Otherwise, if <code>T</code> is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution. If a narrowing conversion is required to convert any of the arguments, the program is ill-formed.</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>The first 3 points don't apply: <code>B</code> is not an aggregate (aggregate cannot have base classes), the initializer list does have elements, <code>B</code> is not a specialization of <code>std::initializer_list</code>.</p>\n<p>The fourth point does apply because overload resolution matches <code>B{p_value1, p_value2}</code> to the constructor <code>B(int, int)</code> according to [over.match.list]/1.2:</p>\n<blockquote>\n<p id=\"so_38061779_38065158_1\">If no viable initializer-list constructor is found, overload resolution is performed again, where the candidate functions are all the constructors of the class <code>T</code> and the argument list consists of the elements of the initializer list.</p>\n</blockquote>\n<p>It follows from the last quote that <code>B(whatever)</code> and <code>B{whatever}</code> should behave identically.</p>\n", "LastActivityDate": "2016-06-28T00:17:34.017"}, "38061779": {"CommentCount": "9", "AcceptedAnswerId": "38065158", "CreationDate": "2016-06-27T19:29:20.420", "LastActivityDate": "2016-06-28T00:17:34.017", "PostTypeId": "1", "ViewCount": "245", "FavoriteCount": "3", "Title": "Why does uniform initialization in C++11 behave weirdly with virtual base classes?", "Id": "38061779", "Score": "15", "Body": "<p>Right now, I am learning the features of Inheritance in C++ and wanted to test out the recently learnt concept of Virtual Base classes.\nI tried the following simple code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\nprivate:\n    int m_value;\n    string m_caller;\npublic:\n    A(int p_value, string p_caller) : m_value{p_value}, m_caller{p_caller}\n    {\n        cout&lt;&lt;\"Instantiating A via \"&lt;&lt;m_caller&lt;&lt;endl;\n    }\n};\n\nclass B : virtual public A\n{\nprivate:\n    int m_value;\npublic:\n    B(int p_value1,int p_value2) : A{p_value1,\"B\"}, m_value{p_value2}\n    {\n        cout&lt;&lt;\"Instantiating B.\"&lt;&lt;endl;\n    }\n};\n\nclass C : public B\n{\npublic:\n    C(int p_value1,int p_value2) : A{p_value1,\"C\"}, B(p_value1, p_value2)\n    {\n        cout&lt;&lt;\"Instantiating C.\"&lt;&lt;endl;\n    }\n};\n\nint main()\n{\n    C c1(1,2);\n    return 0;\n}\n</code></pre>\n<p>Please note the <code>B(p_value1, p_value2)</code> in the constructor of class C. This gave me the desired output:</p>\n<pre><code>Instantiating A via C\nInstantiating B.\nInstantiating C.\n</code></pre>\n<p>But, the moment I changed it to <code>B{p_value1, p_value2}</code>, I got the following output:</p>\n<pre><code>Instantiating A via C\nInstantiating A via B\nInstantiating B.\nInstantiating C.\n</code></pre>\n<p>I tried looking for the answer, but all the answers I got quoted some C++ standards. Being a beginner in OOPs, I am looking for a simpler explanation for this behaviour.\nThanks a lot!</p>\n<p>P.S. I am using C::B in Windows with compiler g++ 4.8.1.</p>\n", "Tags": "<c++><c++11><inheritance><multiple-inheritance><virtual-inheritance>", "OwnerUserId": "4833097", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38061779_38065158_1": {"section_id": 599, "quality": 1.0, "length": 20}, "so_38061779_38065158_0": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_38061779_38065158_1": {"section_id": 589, "quality": 1.0, "length": 20}, "so_38061779_38065158_0": {"section_id": 3195, "quality": 1.0, "length": 6}}, "n4659": {"so_38061779_38065158_1": {"section_id": 622, "quality": 1.0, "length": 20}, "so_38061779_38065158_0": {"section_id": 4091, "quality": 1.0, "length": 6}}}});