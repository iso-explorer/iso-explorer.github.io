post_cb({"45982485": {"ViewCount": "298", "Body": "<p>Just a general question about programming: When you define a value in C (or any language I suppose), How does the compiler known how to treat the value? For example:</p>\n<pre><code>#define CountCycle  100000\n</code></pre>\n<p>I would assume <code>CountCycle</code> is a \"long integer\" data type, but that's just an assumption. I suppose it could also be a <code>float</code>, a <code>double</code>  (not an <code>int</code> as it maxes out at ~32k), etc.</p>\n<p>How does the compiler choose the data type for a <code>#define</code> value? I have no application for the answer to this question; I'm just curious.</p>\n", "AcceptedAnswerId": "45982567", "Title": "When you define a value in C how does the compiler select the data type", "CreationDate": "2017-08-31T13:20:27.193", "Id": "45982485", "CommentCount": "10", "LastEditDate": "2017-08-31T13:22:34.993", "PostTypeId": "1", "LastEditorUserId": "478288", "LastActivityDate": "2017-09-06T14:09:30.097", "Score": "4", "OwnerUserId": "6484248", "Tags": "<c++><c><types>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_45982485_45983300_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5341}}, "n3337": {"so_45982485_45983300_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5138}}, "n4659": {"so_45982485_45983300_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6762}}}, "45986746": {"Id": "45986746", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45982485_45986746_0\">The compiler does no such thing. The preprocessor substitues 100000 for CountCycle.</p>\n</blockquote>\n<p>It's true, but you have to care about some compiler options that truncates the value defined. For example, if you are working with an embedded plataform that can't do floating point calc at run time, the compiler maybe implicit converts your float definition for an integer definition. \nAnyway, you can do flating point math in compiler time. Why? Because many paramethers can increase the final result precision by do this calculation, and you can use the final result truncated in run time.</p>\n<p>So, the correct way to use it is to take care in where you use: in the middle of a fixed point math; as floating data; or something else. A good way to prevent erros is explicit casting any numer, by do something like:</p>\n<p><div class=\"snippet\" data-babel=\"false\" data-console=\"true\" data-hide=\"false\" data-lang=\"js\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>#define MY_FLOAT_DATA   (float)4.55\r\n#define MY_INTEGER_DATA (int)4</code></pre>\n</div>\n</div>\n</p>\n", "LastEditorUserId": "4554403", "LastActivityDate": "2017-08-31T17:06:55.263", "Score": "-1", "CreationDate": "2017-08-31T17:01:28.013", "ParentId": "45982485", "CommentCount": "1", "OwnerUserId": "4554403", "LastEditDate": "2017-08-31T17:06:55.263"}, "45983300": {"Id": "45983300", "PostTypeId": "2", "Body": "<p><code>CountCycle</code> does not have a type. It can be substituted for the integer constant <code>100000</code> by the preprocessor everywhere in the program where this name is encountered.</p>\n<p>It is the integer constant <code>100000</code> that has a type.</p>\n<p>If an integer decimal constant does not have a suffix then (The C Standard, 6.4.4.1 Integer constants)</p>\n<blockquote>\n<p id=\"so_45982485_45983300_0\">5 The type of an integer constant is the first of the corresponding\n  list in which its value can be represented.</p>\n</blockquote>\n<pre><code>int\nlong int\nlong long int\n</code></pre>\n<p>If you want that the constant had the type <code>long int</code> you could specify a suffix. For example</p>\n<pre><code>#define CountCycle  100000l\n</code></pre>\n<p>if the value of the constant is in the domain of the type <code>long int</code> then the constant will have the type. Otherwise it will have type <code>long long int</code>.</p>\n<p>If you want to specify a floating constant you should use one of its representations. For example</p>\n<pre><code>#define CountCycle  100000.0\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-08-31T14:56:04.210", "Score": "0", "CreationDate": "2017-08-31T13:58:30.160", "ParentId": "45982485", "CommentCount": "4", "OwnerUserId": "2877241", "LastEditDate": "2017-08-31T14:56:04.210"}, "45983783": {"Id": "45983783", "PostTypeId": "2", "Body": "<p>There are four stages for a C program to become an executable:</p>\n<ol>\n<li>Pre-processing</li>\n<li>Compilation</li>\n<li>Assembly</li>\n<li>Linking</li>\n</ol>\n<p>The \"Pre-processing\" is the first stage.</p>\n<p>\"#define\" is a preprocessor which process before compilation.\nYou create macros with the #define directive. #define is followed by the name of the macro and then the token sequence it should be an abbreviation for, which is variously referred to as the macro's body, expansion or replacement list.</p>\n<p>For example-</p>\n<p>If you specify the following in your program</p>\n<p>#define BUFFER_SIZE 1000</p>\n<p>The preprocessor will replace the macro name BUFFER_SIZE with macro expansion 1000 in your source code file before handing it over to the compiler.</p>\n", "LastActivityDate": "2017-08-31T14:20:31.940", "CommentCount": "0", "CreationDate": "2017-08-31T14:20:31.940", "ParentId": "45982485", "Score": "-1", "OwnerUserId": "8542346"}, "45982567": {"Id": "45982567", "PostTypeId": "2", "Body": "<p>The <em>compiler</em> does no such thing. The <em>preprocessor</em> substitues <code>100000</code> for <code>CountCycle</code>.</p>\n<p>Once that substitution has been completed, the compiler can take over. <code>100000</code> has the type <code>int</code> if it can fit in that range, a <code>long</code> if it can't.</p>\n<p>See a <a href=\"http://en.cppreference.com/w/cpp/language/integer_literal\" rel=\"nofollow noreferrer\">C++ Reference</a> and a <a href=\"http://en.cppreference.com/w/c/language/integer_constant\" rel=\"nofollow noreferrer\">C Reference</a>.</p>\n", "LastEditorUserId": "2173516", "LastActivityDate": "2017-09-06T14:09:30.097", "Score": "12", "CreationDate": "2017-08-31T13:24:07.693", "ParentId": "45982485", "CommentCount": "11", "OwnerUserId": "2380830", "LastEditDate": "2017-09-06T14:09:30.097"}});