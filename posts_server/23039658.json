post_cb({"23039770": {"Id": "23039770", "PostTypeId": "2", "Body": "<p>Yes, there are others with the same restriction. For example, the subscripting operator (\u00a713.5.5/1):</p>\n<blockquote>\n<p id=\"so_23039658_23039770_0\">operator[] shall be a non-static member function with exactly one parameter.</p>\n</blockquote>\n<p>Likewise <code>-&gt;</code>. Most others (e.g., <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>) can be either a non-static member function <em>or</em> a non-member function. For a binary operator, a member function must take one parameter and a non-member function must take two parameters.</p>\n<p>The specific rules are in section 13 of the C++ standard.</p>\n", "LastActivityDate": "2014-04-13T06:12:34.273", "CommentCount": "0", "CreationDate": "2014-04-13T06:12:34.273", "ParentId": "23039658", "Score": "2", "OwnerUserId": "179910"}, "23039884": {"Id": "23039884", "PostTypeId": "2", "Body": "<p>According to the C++ standard \u00a713.5/6:</p>\n<blockquote>\n<p id=\"so_23039658_23039884_0\"><strong>An operator function shall either be a non-static member function or be a non-member function</strong> and have at least one parameter whose type is a class, a reference to a class, an enumeration, or a reference to an enumeration. It is not possible to change the precedence, grouping, or number of operands of operators. The meaning of the operators =, (unary) &amp;, and , (comma), predefined for each type, can be changed for specific class and enumeration types by defining operator functions that implement these operators. Operator functions are inherited in the same manner as other base class functions.</p>\n</blockquote>\n<p>Particularly, the following operators can only be declared as non-static member functions:</p>\n<ol>\n<li><p><strong>Assignment <code>=</code></strong> (\u00a713.5.3)</p>\n<blockquote>\n<p id=\"so_23039658_23039884_1\">An assignment operator shall be implemented by a non-static member function with exactly one parameter.\n  Because a copy assignment operator operator= is implicitly declared for a class if not declared by the\n  user (12.8), a base class assignment operator is always hidden by the copy assignment operator of the\n  derived class.</p>\n</blockquote></li>\n<li><p><strong>Function call <code>()</code></strong> (\u00a713.5.4)</p>\n<blockquote>\n<p id=\"so_23039658_23039884_2\">operator() shall be a non-static member function with an arbitrary number of parameters.</p>\n</blockquote></li>\n<li><p><strong>Subscripting <code>[]</code></strong> (\u00a713.5.5)</p>\n<blockquote>\n<p id=\"so_23039658_23039884_3\">operator[] shall be a non-static member function with exactly one parameter. </p>\n</blockquote></li>\n<li><p><strong>Class member access <code>-&gt;</code></strong> (\u00a713.5.6)</p>\n<blockquote>\n<p id=\"so_23039658_23039884_4\">operator-&gt; shall be a non-static member function taking no parameters.</p>\n</blockquote></li>\n</ol>\n", "LastEditorUserId": "2589776", "LastActivityDate": "2014-04-13T07:27:59.907", "Score": "1", "CreationDate": "2014-04-13T06:25:51.607", "ParentId": "23039658", "CommentCount": "0", "OwnerUserId": "2589776", "LastEditDate": "2014-04-13T07:27:59.907"}, "23039658": {"ViewCount": "104", "Body": "<p>I was asked the following question <code>Which operators can only be declared as non-static member functions?</code> </p>\n<p>I think that <code>=</code> and <code>()</code> can only be declared as non-static member functions, are there any other operator which follows the same rule? Is there any specific reason about that?</p>\n", "AcceptedAnswerId": "23039884", "Title": "Which operators can only be declared as non-static member functions?", "CreationDate": "2014-04-13T05:56:39.317", "Id": "23039658", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-04-13T07:27:59.907", "Score": "2", "OwnerUserId": "2277094", "Tags": "<c++><operators>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_23039658_23039884_1": {"length": 30, "quality": 0.967741935483871, "section_id": 660}, "so_23039658_23039884_0": {"length": 53, "quality": 0.9636363636363636, "section_id": 653}, "so_23039658_23039884_3": {"length": 7, "quality": 1.0, "section_id": 466}, "so_23039658_23039770_0": {"length": 7, "quality": 1.0, "section_id": 466}, "so_23039658_23039884_2": {"length": 7, "quality": 1.0, "section_id": 662}, "so_23039658_23039884_4": {"length": 6, "quality": 1.0, "section_id": 664}}, "n3337": {"so_23039658_23039884_0": {"length": 54, "quality": 0.9818181818181818, "section_id": 643}, "so_23039658_23039884_1": {"length": 30, "quality": 0.967741935483871, "section_id": 650}, "so_23039658_23039884_3": {"length": 7, "quality": 1.0, "section_id": 457}, "so_23039658_23039770_0": {"length": 7, "quality": 1.0, "section_id": 457}, "so_23039658_23039884_2": {"length": 7, "quality": 1.0, "section_id": 652}, "so_23039658_23039884_4": {"length": 6, "quality": 1.0, "section_id": 654}}, "n4659": {"so_23039658_23039884_0": {"length": 53, "quality": 0.9636363636363636, "section_id": 681}, "so_23039658_23039884_1": {"length": 30, "quality": 0.967741935483871, "section_id": 688}, "so_23039658_23039884_3": {"length": 7, "quality": 1.0, "section_id": 489}, "so_23039658_23039770_0": {"length": 7, "quality": 1.0, "section_id": 489}, "so_23039658_23039884_2": {"length": 7, "quality": 1.0, "section_id": 690}, "so_23039658_23039884_4": {"length": 6, "quality": 1.0, "section_id": 692}}}, "23039766": {"Id": "23039766", "PostTypeId": "2", "Body": "<p>[], +, - are all operators which require an object to be instantiated to make sense. Hence, they cannot be static member functions.</p>\n", "LastActivityDate": "2014-04-13T06:11:38.217", "CommentCount": "1", "CreationDate": "2014-04-13T06:11:38.217", "ParentId": "23039658", "Score": "0", "OwnerUserId": "3425224"}});