post_cb({"14694345": {"ParentId": "14684746", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Adding an extra set of braces works for me.</p>\n<pre><code> static boost::array&lt; Foo, 2 &gt; foo =\n {{\n    { \"111\", \"222\" },\n    { \"333\", \"444\" },\n }};\n</code></pre>\n<p>More as I figure out why. I think the key here is \"brace elision\" (thanks to jesyspa for pointing me there)</p>\n<p>This also works:</p>\n<pre><code> static boost::array&lt; Foo, 2 &gt; foo =\n {\n    \"111\", \"222\",\n    \"333\", \"444\",\n };\n</code></pre>\n", "OwnerUserId": "992490", "LastEditorUserId": "992490", "LastEditDate": "2013-02-04T22:02:24.440", "Id": "14694345", "Score": "1", "CreationDate": "2013-02-04T19:47:26.257", "LastActivityDate": "2013-02-04T22:02:24.440"}, "bq_ids": {"n4140": {"so_14684746_14696521_0": {"section_id": 3308, "quality": 1.0, "length": 48}}, "n3337": {"so_14684746_14696521_0": {"section_id": 3178, "quality": 0.9791666666666666, "length": 47}}, "n4659": {"so_14684746_14696521_0": {"section_id": 4074, "quality": 0.8958333333333334, "length": 43}}}, "14696521": {"ParentId": "14684746", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is caused by the way brace elision works.  From N3485, 8.5.1.11:</p>\n<blockquote>\n<p id=\"so_14684746_14696521_0\">Braces can be elided in an <em>initializer-list</em> as follows.  If the <em>initializer-list</em> begins with a left brace, then the succeeding comma-separated list of <em>initializer-clauses</em> initializes the members of a subaggregate; it is erroneous for there to be more <em>initializer-clauses</em> than members.  If, however, the <em>initializer-list</em> for a subaggregate does not begin with a left brace, then only enough <em>initializer-clauses</em> from the list are taken to initialize the members of the subaggregate; any remaining <em>initializer-clauses</em> are left to initialize the next member of the aggregate of which the current subaggregate is a member.</p>\n</blockquote>\n<p>In other words, if the next thing is an initializer-list, we can assume no brace elision has occurred.   The braces are inserted at the innermost level, and so while we would like the following</p>\n<pre><code>{{\"a\", \"b\"}, {\"c\", \"d\"}}  -&gt; {{{\"a\", \"b\"}, {\"c\", \"d\"}}}\n</code></pre>\n<p>we instead get</p>\n<pre><code>{{\"a\", \"b\"}, {\"c\", \"d\"}} -&gt; {{{\"a\", \"b\"}}, {\"c\", \"d\"}}\n</code></pre>\n<p>Now as to why we can elide even more braces and write <code>{\"a\", \"b\", \"c\", \"d\"}</code>: once we hit the <code>\"a\"</code>, we know that brace elision has happened, as we expect the array member to be initialised with an initializer-list.  We thus start consuming as many initializer-clauses as necessary to initialize the member array.  Again, we hit the <code>\"a\"</code> instead of an initializer-list, and so we start consuming as many initializer-clauses as necessary to initialize the first <code>Foo</code>.  We repeat this for the second <code>Foo</code>, consume all clauses, and end up with</p>\n<pre><code>{\"a\", \"b\", \"c\", \"d\"} -&gt; {{{\"a\", \"b\"}, {\"c\", \"d\"}}}\n</code></pre>\n<p>as desired.</p>\n", "OwnerUserId": "559931", "LastEditorUserId": "559931", "LastEditDate": "2013-02-04T22:13:24.547", "Id": "14696521", "Score": "3", "CreationDate": "2013-02-04T22:04:40.050", "LastActivityDate": "2013-02-04T22:13:24.547"}, "14684746": {"CommentCount": "0", "ViewCount": "606", "PostTypeId": "1", "LastEditorUserId": "559931", "CreationDate": "2013-02-04T10:25:27.167", "LastActivityDate": "2013-02-04T22:48:52.910", "Title": "HowTo init boost::array with custom structure?", "AcceptedAnswerId": "14696521", "LastEditDate": "2013-02-04T22:48:52.910", "Id": "14684746", "Score": "0", "Body": "<p>I'm looking for a nice solution is how to initialize a static <code>boost::array</code> with a custom user structure and data. My example, what I'm expecting from <code>boost::array</code>, below:</p>\n<pre><code> struct Foo\n {\n      std::string a;\n      std::string b;\n };\n static boost::array&lt; Foo, 2 &gt; foo =\n {\n      { \"111\", \"222\" },\n      { \"333\", \"444\" },\n };\n</code></pre>\n<p>But this code didn't work, </p>\n<pre><code>error C2078: too many initializers\n</code></pre>\n<p>What I'm missing?</p>\n<p>Thnks!</p>\n", "Tags": "<c++><boost><c++11><struct><aggregate-initialization>", "OwnerUserId": "299909", "AnswerCount": "2"}});