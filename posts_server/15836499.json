post_cb({"bq_ids": {"n4140": {"so_15836499_15836511_4": {"length": 34, "quality": 0.8095238095238095, "section_id": 39}, "so_15836499_15836511_6": {"length": 6, "quality": 0.5454545454545454, "section_id": 2515}}, "n3337": {"so_15836499_15836511_4": {"length": 40, "quality": 0.9523809523809523, "section_id": 36}, "so_15836499_15836511_6": {"length": 6, "quality": 0.5454545454545454, "section_id": 6460}}, "n4659": {"so_15836499_15836511_4": {"length": 34, "quality": 0.8095238095238095, "section_id": 39}, "so_15836499_15836511_6": {"length": 6, "quality": 0.5454545454545454, "section_id": 3249}}}, "15836554": {"Id": "15836554", "PostTypeId": "2", "Body": "<pre><code>explicit auto_ptr(T* p = 0) : ptr(p) {}\n</code></pre>\n<p>This is a constructor for <code>auto_ptr</code> that takes an <code>T* p</code>, if the user does not provide a pointer, <code>= 0</code> will be used. The constructor sets the member <code>ptr</code> to the argument <code>: ptr(p)</code> and does nothing else <code>{}</code>. This constructor cannot be used in implicit constructions <code>explicit</code>.</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2013-04-05T14:42:03.343", "Score": "3", "CreationDate": "2013-04-05T14:30:47.630", "ParentId": "15836499", "CommentCount": "3", "OwnerUserId": "36565", "LastEditDate": "2013-04-05T14:42:03.343"}, "15836511": {"Id": "15836511", "PostTypeId": "2", "Body": "<p>Yes, <code>= 0</code> is the default value. For a pointer argument, it is the same as <code>= NULL</code>.</p>\n<p>To quote <a href=\"http://www.stroustrup.com/bs_faq2.html#null\">Stroustrup</a>:</p>\n<blockquote>\n<p id=\"so_15836499_15836511_0\"><strong>Should I use <code>NULL</code> or <code>0</code>?</strong></p>\n<p id=\"so_15836499_15836511_1\">In C++, the definition of <code>NULL</code> is <code>0</code>, so there is only an aesthetic difference. I prefer to avoid macros, so I use <code>0</code>. Another problem with <code>NULL</code> is that people sometimes mistakenly believe that it is different from <code>0</code> and/or not an integer. In pre-standard code, <code>NULL</code> was/is sometimes defined to something unsuitable and therefore had/has to be avoided. That's less common these days.</p>\n<p id=\"so_15836499_15836511_2\">If you have to name the null pointer, call it <code>nullptr</code>; that's what it's called in C++11. Then, <code>nullptr</code> will be a keyword.</p>\n</blockquote>\n<p>The formal definition of a null pointer constant is as follows (emphasis mine):</p>\n<blockquote>\n<p id=\"so_15836499_15836511_3\">4.10 Pointer conversions [conv.ptr]</p>\n<p id=\"so_15836499_15836511_4\">1 <strong>A null pointer constant is an integral constant expression (5.19) prvalue of integer type that evaluates to zero</strong>\n  or a prvalue of type std::nullptr_t. A null pointer constant can be converted to a pointer type; the result\n  is the null pointer value of that type and is distinguishable from every other value of pointer to object or\n  pointer to function type. Such a conversion is called a null pointer conversion.</p>\n</blockquote>\n<p><code>NULL</code> is defined to be one such constant:</p>\n<blockquote>\n<p id=\"so_15836499_15836511_5\">18.2 Types [support.types]</p>\n<p id=\"so_15836499_15836511_6\">3 The macro <code>NULL</code> is an implementation-de\ufb01ned C++ null pointer constant in this International Standard (4.10). <sup>192</sup></p>\n<p id=\"so_15836499_15836511_7\"><sup>192) Possible de\ufb01nitions include <code>0</code> and <code>0L</code>, but not <code>(void*)0</code>.</sup></p>\n</blockquote>\n", "LastEditorUserId": "367273", "LastActivityDate": "2013-04-05T14:44:56.097", "Score": "10", "CreationDate": "2013-04-05T14:29:11.040", "ParentId": "15836499", "CommentCount": "4", "OwnerUserId": "367273", "LastEditDate": "2013-04-05T14:44:56.097"}, "15836499": {"ViewCount": "864", "Body": "<p>I try to understand this code (it is taken from <a href=\"http://ootips.org/yonat/4dev/smart-pointers.html\" rel=\"nofollow\">here</a>):</p>\n<pre><code>template &lt;class T&gt; class auto_ptr\n{\n    T* ptr;\npublic:\n    explicit auto_ptr(T* p = 0) : ptr(p) {}\n    ~auto_ptr()                 {delete ptr;}\n    T&amp; operator*()              {return *ptr;}\n    T* operator-&gt;()             {return ptr;}\n    // ...\n};\n</code></pre>\n<p>I have problem with understanding this line of the code: <code>explicit auto_ptr(T* p = 0) : ptr(p) {}</code>.</p>\n<p>As far as I understand, with this line we try to define a constructor that has one argument of <code>pointer-to-object-of-T-class</code> type. Then we have <code>= 0</code>. What is that? Is it a default value? But how <code>0</code> can be a default value of a pointer (pointer should have addresses as a values, not integer).</p>\n", "AcceptedAnswerId": "15836511", "Title": "What do default values of pointers in constructors mean?", "CreationDate": "2013-04-05T14:28:25.313", "Id": "15836499", "CommentCount": "0", "LastEditDate": "2013-04-05T14:40:54.623", "PostTypeId": "1", "LastEditorUserId": "245549", "LastActivityDate": "2013-04-18T13:20:03.080", "Score": "5", "OwnerUserId": "245549", "Tags": "<c++><pointers><constructor><default-value>", "AnswerCount": "2"}});