post_cb({"bq_ids": {"n4140": {"so_11283361_11283393_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 6077}}, "n3337": {"so_11283361_11283393_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 5845}}, "n4659": {"so_11283361_11283393_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 7573}}}, "11283361": {"ViewCount": "234", "Body": "<p>I read a question earlier that was closed due to being an exact duplicate of this</p>\n<p><a href=\"https://stackoverflow.com/questions/1328223/sizeof-array-passed-as-parameter\">When a function has a specific-size array parameter, why is it replaced with a pointer?</a></p>\n<p>and </p>\n<p><a href=\"https://stackoverflow.com/questions/492384/how-to-find-the-sizeofa-pointer-pointing-to-an-array\">How to find the 'sizeof' (a pointer pointing to an array)?</a></p>\n<p>but after reading this I am still confused by how sizeof() works. I understand that passing an array as an argument to a function such as</p>\n<pre><code>  void foo(int a[5])\n</code></pre>\n<p>will result in the array argument decaying to a pointer. What I did not find in the above 2 question links was a clear answer as to why it is that the <code>sizeof()</code> function itself is exempt from (or at least seemingly exempt from) this pointer decay behaviour. If sizeof() behaved like any other function then</p>\n<pre><code>   int a[5] = {1,2,3,4,5};\n   cout &lt;&lt; sizeof(a) &lt;&lt; endl;\n</code></pre>\n<p>then the above should output <code>4</code> instead of <code>20</code>. Have I missed something obvious as this seems to be a contradiction of the decay to pointer behaviour??? Sorry for bringing this up again but I really am having a hard time of understanding why this happens despite having happily used the function for years without really thinking about it.</p>\n", "AcceptedAnswerId": "11283393", "Title": "Why does decay to pointer for array argument appear not to apply to sizeof()?", "CreationDate": "2012-07-01T15:42:39.620", "Id": "11283361", "CommentCount": "2", "LastEditDate": "2017-05-23T11:48:53.383", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-07-01T15:55:32.337", "Score": "7", "OwnerUserId": "1342730", "Tags": "<c++><c><pointers>", "AnswerCount": "2"}, "11283393": {"Id": "11283393", "PostTypeId": "2", "Body": "<p>Because the standard says so (emphasis mine):</p>\n<blockquote>\n<p id=\"so_11283361_11283393_0\">(C99, 6.3.2.1p3) \"<strong>Except when it is the operand of the sizeof operator</strong> or the unary &amp; operator, or is a string literal used to initialize an array, an expression that has type \"array of type\" is converted to an expression with type \"pointer to type\" that     points to the initial element of the array object and is not an lvalue.\"</p>\n</blockquote>\n<p>Note that for C++, the standard explicitly says the size is the size of the array:</p>\n<blockquote>\n<p id=\"so_11283361_11283393_1\">(C++11, 5.3.3p2 sizeof) \"[...] When applied to an array, the result is the total number of bytes in the array. This implies that the size of an array of n\n  elements is n times the size of an element.\"</p>\n</blockquote>\n", "LastEditorUserId": "1119701", "LastActivityDate": "2012-07-01T15:55:32.337", "Score": "15", "CreationDate": "2012-07-01T15:46:52.907", "ParentId": "11283361", "CommentCount": "2", "OwnerUserId": "1119701", "LastEditDate": "2012-07-01T15:55:32.337"}, "11283368": {"Id": "11283368", "PostTypeId": "2", "Body": "<p><code>sizeof</code> is an operator, not a function. It's a specific one at that, too. The parentheses aren't even necessary if it's an expression:</p>\n<pre><code>int a;\nsizeof (int); //needed because `int` is a type\nsizeof a; //optional because `a` is an expression\nsizeof (a); //^ also works \n</code></pre>\n<p>As you can see, it's on this chart of <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"noreferrer\">precedence</a> as well. It's also one of the non-overloadable operators.</p>\n", "LastEditorUserId": "962089", "LastActivityDate": "2012-07-01T15:49:30.853", "Score": "6", "CreationDate": "2012-07-01T15:43:49.420", "ParentId": "11283361", "CommentCount": "0", "OwnerUserId": "962089", "LastEditDate": "2012-07-01T15:49:30.853"}});