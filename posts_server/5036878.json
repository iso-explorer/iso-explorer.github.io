post_cb({"5036878": {"CommentCount": "2", "AcceptedAnswerId": "5036970", "CreationDate": "2011-02-18T01:52:20.840", "LastActivityDate": "2011-02-18T02:10:21.470", "PostTypeId": "1", "ViewCount": "5516", "FavoriteCount": "2", "Title": "Why does ofstream require a flush?", "Id": "5036878", "Score": "6", "Body": "<p>If I run the following code, no file is created at all:</p>\n<pre><code>std::ofstream outputFile(strOutputLocation.c_str(), std::ios::binary);\noutputFile.write((const char*)lpResLock, dwSizeRes);\noutputFile.close();\n</code></pre>\n<p>However, if I add a flush() before the close, it works:</p>\n<pre><code>std::ofstream outputFile(strOutputLocation.c_str(), std::ios::binary);\noutputFile.write((const char*)lpResLock, dwSizeRes);\noutputFile.flush();\noutputFile.close();\n</code></pre>\n<p>Does the standard library actually require this, or is it a bug in the Visual C++ CRT?</p>\n", "Tags": "<c++><file><stream><standard-library>", "OwnerUserId": "284758", "AnswerCount": "2"}, "5036924": {"ParentId": "5036878", "CommentCount": "0", "Body": "<p>Are you checking the file before you exit from the program? OS will buffer all IO, so may not see any data(unless you flush) in the file before you exit.</p>\n", "OwnerUserId": "171755", "PostTypeId": "2", "Id": "5036924", "Score": "0", "CreationDate": "2011-02-18T02:01:41.620", "LastActivityDate": "2011-02-18T02:01:41.620"}, "bq_ids": {"n4140": {"so_5036878_5036970_1": {"section_id": 2430, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_5036878_5036970_1": {"section_id": 2415, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_5036878_5036970_1": {"section_id": 2706, "quality": 0.7857142857142857, "length": 11}}}, "5036970": {"ParentId": "5036878", "CommentCount": "0", "Body": "<p>It's a bug. Reading \u00a727.8.1.10/4, abridged:</p>\n<blockquote>\n<p id=\"so_5036878_5036970_0\"><code>void close();</code><br>\n  Effects: Calls <code>rdbuf()-&gt;close()</code>...</br></p>\n</blockquote>\n<p>What does <code>rdbuf()-&gt;close()</code> do? According to \u00a727.8.1.3/6, abridged, emphasis mine:</p>\n<blockquote>\n<p id=\"so_5036878_5036970_1\"><code>basic_filebuf&lt;charT,traits&gt;* close();</code><br>\n  If <code>is_open() == false</code>, returns a null pointer. <strong>If a put area exists, calls <code>overflow(EOF)</code> to flush characters.</strong> ...</br></p>\n</blockquote>\n<p>That is, it's suppose to flush. (Indeed, the call to <code>flush()</code> ultimately does the same thing.)</p>\n<hr>\n<p>Note the call to <code>close()</code> itself isn't needed, as the destructor of <code>basic_ofstream</code> will call <code>close()</code>.</p>\n</hr>", "OwnerUserId": "87234", "PostTypeId": "2", "Id": "5036970", "Score": "8", "CreationDate": "2011-02-18T02:10:21.470", "LastActivityDate": "2011-02-18T02:10:21.470"}});