post_cb({"42546274": {"ParentId": "42546159", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The C Standard explicitly describes this behavior of <code>for</code> loops:</p>\n<blockquote>\n<p id=\"so_42546159_42546274_0\"><a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.8.5.3\" rel=\"nofollow noreferrer\">C11 Draft Standard \u00a76.8.5.3 2\n  </a> </p>\n<p id=\"so_42546159_42546274_1\">Both clause-1 and expression-3 can be omitted. An omitted expression-2\n  is replaced by a nonzero constant.</p>\n</blockquote>\n<p>Similarly, for C++:</p>\n<blockquote>\n<p id=\"so_42546159_42546274_2\"><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4618.pdf#section.6.5\" rel=\"nofollow noreferrer\">C++14 Draft Standard \u00a76.5.3\n  2</a></p>\n<p id=\"so_42546159_42546274_3\">Either or both of the <em>condition</em> and the <em>expression</em> can be omitted.\n  A missing <em>condition</em> makes the implied <strong>while</strong> clause equivalent to\n  <strong>while(true)</strong>.</p>\n</blockquote>\n", "OwnerUserId": "6879826", "LastEditorUserId": "6879826", "LastEditDate": "2017-03-02T14:22:25.003", "Id": "42546274", "Score": "11", "CreationDate": "2017-03-02T03:26:00.827", "LastActivityDate": "2017-03-02T14:22:25.003"}, "42546159": {"CommentCount": "9", "ViewCount": "348", "PostTypeId": "1", "ClosedDate": "2017-03-02T07:44:25.690", "LastEditorUserId": "2313629", "CreationDate": "2017-03-02T03:13:34.740", "LastActivityDate": "2017-03-02T14:22:25.003", "Title": "Why is for(;;); an infinite loop?", "AcceptedAnswerId": "42546274", "LastEditDate": "2017-03-02T03:47:13.207", "Id": "42546159", "Score": "6", "Body": "<p>I've written infinite loops like this numerous times over the years in both C and C++, but today is the first time I really thought about it -- why is it an infinite loop when the condition clause is empty? One would expect you'd have to write something like <code>for(;true;);</code> to get a valid infinite loop?</p>\n<p><code>while();</code> doesn't compile nor does <code>while(;);</code></p>\n<p>Anyways, I like the <code>for(;;);</code> syntax and use it often, but is it a special case to treat an empty condition block as true or are there other cases in C or C++ where an empty condition expression is interpreted as true?</p>\n", "Tags": "<c++><c><for-loop>", "OwnerUserId": "2313629", "AnswerCount": "2"}, "42546271": {"ParentId": "42546159", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The behaviors are defined by the language (C++). For the <a href=\"http://en.cppreference.com/w/cpp/language/for\" rel=\"nofollow noreferrer\">for loop</a>, the condition part is optional:</p>\n<blockquote>\n<p id=\"so_42546159_42546271_0\">Syntax</p>\n<p id=\"so_42546159_42546271_1\">formal syntax:        </p>\n<pre><code>attr(optional) for ( init-statement condition(optional) ; iteration_expression(optional) ) statement\n</code></pre>\n</blockquote>\n<p>and (emphasis mine)</p>\n<blockquote>\n<p id=\"so_42546159_42546271_2\">The above syntax produces code equivalent to:</p>\n<pre><code>{\n    init_statement \n    while ( condition ) { \n        statement \n        iteration_expression ; \n    }\n}\n</code></pre>\n<p id=\"so_42546159_42546271_3\">Except that</p>\n<p id=\"so_42546159_42546271_4\"><strong>3) Empty condition is equivalent to <code>while(true)</code></strong></p>\n</blockquote>\n<p>For <a href=\"http://en.cppreference.com/w/cpp/language/while\" rel=\"nofollow noreferrer\">while loop</a>, the condition part is necessary, it can't be ommitted.</p>\n<blockquote>\n<p id=\"so_42546159_42546271_5\">Syntax</p>\n<pre><code>attr(optional) while ( condition ) statement\n</code></pre>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2017-03-02T03:35:27.120", "Id": "42546271", "Score": "3", "CreationDate": "2017-03-02T03:25:55.523", "LastActivityDate": "2017-03-02T03:35:27.120"}, "bq_ids": {"n4140": {"so_42546159_42546274_3": {"section_id": 3904, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_42546159_42546274_3": {"section_id": 3764, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_42546159_42546274_3": {"section_id": 4790, "quality": 1.0, "length": 14}}}});