post_cb({"bq_ids": {"n4140": {"so_26304949_26306505_0": {"length": 40, "quality": 0.9302325581395349, "section_id": 595}}, "n3337": {"so_26304949_26306505_0": {"length": 40, "quality": 0.9302325581395349, "section_id": 585}}, "n4659": {"so_26304949_26306505_0": {"length": 40, "quality": 0.9302325581395349, "section_id": 618}}}, "26305010": {"Id": "26305010", "PostTypeId": "2", "Body": "<p>You should add the language standard and compiler you compile with.</p>\n<p>Until C++11, <code>std::basic_ios</code> had <code>operator void*</code>, since C++11 it has <code>explicit operator bool</code> instead.</p>\n<p>The second one is explicit, meaning an implicit conversion like in your example cannot use it.</p>\n<p>libstdc++ from the GNU project still unconditionally contains the pre-C++ conversion (Version 4.9.1):</p>\n<pre><code>operator void*() const\n{ return this-&gt;fail() ? 0 : const_cast&lt;basic_ios*&gt;(this); }\n</code></pre>\n<p>The bug <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56193\" rel=\"nofollow\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56193</a> is RESOLVED-FIXED since 2014-09-24, so the next release should be corrected.</p>\n", "LastEditorUserId": "3204551", "LastActivityDate": "2014-10-10T17:59:09.277", "Score": "7", "CreationDate": "2014-10-10T17:35:33.643", "ParentId": "26304949", "CommentCount": "9", "OwnerUserId": "3204551", "LastEditDate": "2014-10-10T17:59:09.277"}, "26304949": {"ViewCount": "62", "Body": "<p>Why with <a href=\"http://coliru.stacked-crooked.com/a/3f5e934eba8cd7b6\" rel=\"nofollow\">libstdc++</a> this works but with <a href=\"http://coliru.stacked-crooked.com/a/c7829236b9500ad6\" rel=\"nofollow\">libc++</a> it fails? On gcc it also works:</p>\n<pre><code>bool b = std::cin;\n</code></pre>\n", "AcceptedAnswerId": "26305010", "Title": "Converting a stream to bool doesn't work on another compiler", "CreationDate": "2014-10-10T17:30:38.527", "Id": "26304949", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-10-10T19:15:28.900", "Score": "3", "OwnerUserId": "2030677", "Tags": "<c++>", "AnswerCount": "2"}, "26306505": {"Id": "26306505", "PostTypeId": "2", "Body": "<p>According to the C++ Standard (13.3.1.5 Initialization by conversion function, p.#1)</p>\n<blockquote>\n<p id=\"so_26304949_26306505_0\">The conversion functions of S and its base classes are considered.\n  Those non-explicit conversion functions that are not hidden within S\n  and yield type T or a type that can be converted to type T via a\n  standard conversion sequence (13.3.3.1.1) are candidate functions. For\n  direct-initialization, those explicit conversion functions that are\n  not hidden within S and yield type T or a type that can be converted\n  to type T with a qualification conversion (4.4) are also candidate\n  functions.</p>\n</blockquote>\n<p>Class <code>std::basic_ios</code> has explicit conversion function <code>operator bool</code>. As\nthis declaration</p>\n<pre><code>bool b = std::cin;\n</code></pre>\n<p>does not use the direct initialization (there is the copy initialization) then it seems it is a bug of the compiler, that is the declaration shall not be compiled.</p>\n", "LastActivityDate": "2014-10-10T19:15:28.900", "CommentCount": "0", "CreationDate": "2014-10-10T19:15:28.900", "ParentId": "26304949", "Score": "0", "OwnerUserId": "2877241"}});