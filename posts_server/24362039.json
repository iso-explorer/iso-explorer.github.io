post_cb({"bq_ids": {"n4140": {"so_24362039_24362106_0": {"length": 22, "quality": 0.8148148148148148, "section_id": 63}}, "n3337": {"so_24362039_24362106_0": {"length": 22, "quality": 0.8148148148148148, "section_id": 58}}, "n4659": {"so_24362039_24362106_0": {"length": 16, "quality": 0.5925925925925926, "section_id": 65}}}, "24362106": {"Id": "24362106", "PostTypeId": "2", "Body": "<p>The default argument is specified in a prior forward declaration:</p>\n<pre><code>// [memory:24]\n_STD_BEGIN\n #if _HAS_CPP0X\ntemplate&lt;class _Ty&gt;\n    struct default_delete;\n\ntemplate&lt;class _Ty,\n    class _Dx = default_delete&lt;_Ty&gt; &gt;\n    class unique_ptr;\n #endif /* _HAS_CPP0X */\n\n // [...]\n // [memory:1276]\n// TEMPLATE CLASS unique_ptr SCALAR\ntemplate&lt;class _Ty,\n    class _Dx&gt;  // = default_delete&lt;_Ty&gt;\n    class unique_ptr\n        : private _Unique_ptr_base&lt;_Ty, _Dx,\n            is_empty&lt;_Dx&gt;::value\n                || is_same&lt;default_delete&lt;_Ty&gt;, _Dx&gt;::value&gt;\n    {   // non-copyable pointer to an object\n</code></pre>\n<p>This is valid just as it is valid to declare a default argument for a function before its definition, e.g.</p>\n<pre><code>void foo(int x = 5);\nvoid foo(int x) { /* ... */ }\n</code></pre>\n<blockquote>\n<p id=\"so_24362039_24362106_0\"><code>[C++11: 14.1/10]:</code> The set of default <em>template-arguments</em> available for use with a template declaration or definition is obtained by merging the default arguments from the definition (if in scope) and all declarations in scope in the same way default function arguments are (8.3.6). <em>[ Example:</em></p>\n<pre><code> template&lt;class T1, class T2 = int&gt; class A;\n template&lt;class T1 = int, class T2&gt; class A;\n</code></pre>\n<p id=\"so_24362039_24362106_1\">is equivalent to</p>\n<pre><code> template&lt;class T1 = int, class T2 = int&gt; class A;\n</code></pre>\n<p id=\"so_24362039_24362106_2\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-06-23T09:10:41.483", "Score": "4", "CreationDate": "2014-06-23T09:05:17.003", "ParentId": "24362039", "CommentCount": "1", "OwnerUserId": "560648", "LastEditDate": "2014-06-23T09:10:41.483"}, "24362039": {"ViewCount": "137", "Body": "<p>In the VC++ 2013's C++ header file <code>memory</code>, I find the class <code>unique_ptr</code> is defined as follows:</p>\n<pre><code>template&lt;class _Ty, class _Dx&gt; // = default_delete&lt;_Ty&gt;\nclass unique_ptr\n{\n    ...\n};\n</code></pre>\n<p>What makes me confused is: the template parameter doesn't have a default type, which is required by the C++11 standard. (see <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr\" rel=\"nofollow\">here</a>)</p>\n<p>However, I can compile the following code without any warning or error:</p>\n<pre><code>#include &lt;memory&gt;\n\nusing namespace std;\n\nint main()\n{\n    unique_ptr&lt;int&gt;(new int); // Should be OK! ???\n    // rather than unique_ptr&lt;int, default_delete&lt;int&gt;&gt;(new int);\n}\n</code></pre>\n<p>Why?</p>\n", "AcceptedAnswerId": "24362106", "Title": "Why does VC++ allow an instance of a template class without full template parameters?", "CreationDate": "2014-06-23T09:02:00.833", "Id": "24362039", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-06-23T09:10:41.483", "Score": "1", "OwnerUserId": "508343", "Tags": "<c++><templates><visual-c++><c++11><unique-ptr>", "AnswerCount": "2"}, "24362157": {"Id": "24362157", "PostTypeId": "2", "Body": "<p>I have access to VS 2012, and here is what I see:</p>\n<pre><code>#if _HAS_CPP0X\ntemplate&lt;class _Ty&gt;\n    struct default_delete;\n\ntemplate&lt;class _Ty,\n    class _Dx = default_delete&lt;_Ty&gt; &gt;\n    class unique_ptr;\n#endif /* _HAS_CPP0X */\n</code></pre>\n<p>So the declaration has default template parameter. As a general rule in C++, if default parameter is specified in forward declaration, definition doesn't need to repeat the default parameter. I remember compiler emits error if you have default parameter value specified both in declaration and definition.</p>\n", "LastActivityDate": "2014-06-23T09:07:55.923", "CommentCount": "0", "CreationDate": "2014-06-23T09:07:55.923", "ParentId": "24362039", "Score": "2", "OwnerUserId": "451875"}});