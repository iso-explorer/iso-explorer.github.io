post_cb({"7505121": {"ParentId": "7504921", "CommentCount": "0", "Body": "<p>This is explained by section 24.1 of the standard, \"Iterator Requirements\":</p>\n<blockquote>\n<p id=\"so_7504921_7505121_0\">An iterator <code>j</code> is called <em>reachable</em> from an iterator <code>i</code> if and only if there is a finite sequence of applications of the expression <code>++i</code> that makes <code>i == j</code>. If <code>j</code> is reachable from <code>i</code>, they refer to the same container.</p>\n<p id=\"so_7504921_7505121_1\">\u2026</p>\n<p id=\"so_7504921_7505121_2\">Range <code>[i, j)</code> is valid if and only if <code>j</code> is reachable from <code>i</code>. The result of the application of functions in the library to invalid ranges is undefined.</p>\n</blockquote>\n<p>So <code>v.begin() + 3</code> is reachable from <code>v.begin()</code>, but not the reverse. So <code>[v.begin()+3, v.begin())</code> is not a valid range, and your call to <code>for_each</code> is undefined.</p>\n", "OwnerUserId": "25653", "PostTypeId": "2", "Id": "7505121", "Score": "2", "CreationDate": "2011-09-21T18:56:05.190", "LastActivityDate": "2011-09-21T18:56:05.190"}, "7505091": {"ParentId": "7504921", "CommentCount": "1", "Body": "<p>The standard defines complexity constraints for the functions taking ranges. In the specific case of <code>for_each</code> (25.2.4 in the C++ standard):</p>\n<blockquote>\n<p id=\"so_7504921_7505091_0\"><em>Complexity</em>: Applies <code>f</code> exactly <code>last - first</code> times</p>\n</blockquote>\n<p>So it's effectively a no-op in your example.</p>\n", "OwnerUserId": "6210", "PostTypeId": "2", "Id": "7505091", "Score": "1", "CreationDate": "2011-09-21T18:54:07.797", "LastActivityDate": "2011-09-21T18:54:07.797"}, "7505034": {"ParentId": "7504921", "CommentCount": "4", "Body": "<p>The standard explicitly requires the <code>last</code> iterator to be <em>reachable</em> from the <code>first</code> iterator. That means that by incrementing <code>first</code> one should be able to eventually hit <code>last</code>.</p>\n<blockquote>\n<p id=\"so_7504921_7505034_0\"><strong>24.1 Iterator requirements</strong></p>\n<p id=\"so_7504921_7505034_1\">...</p>\n<p id=\"so_7504921_7505034_2\"><strong>6</strong> An iterator <code>j</code> is called reachable from an iterator <code>i</code> if and only if\n  there is a finite sequence of applications of the expression <code>++i</code> that\n  makes <code>i == j</code>. If <code>j</code> is reachable from <code>i</code>, they refer to the same\n  container. </p>\n<p id=\"so_7504921_7505034_3\"><strong>7</strong> Most of the library\u2019s algorithmic templates that operate\n  on data structures have interfaces that use ranges. A range is a pair\n  of iterators that designate the beginning and end of the computation.\n  A range <code>[i, i)</code> is an empty range; in general, a range <code>[i, j)</code> refers to\n  the elements in the data structure starting with the one pointed to by\n  <code>i</code> and up to but not including the one pointed to by <code>j</code>. Range <code>[i, j)</code> is\n  valid if and only if <code>j</code> is reachable from <code>i</code>. The result of the\n  application of functions in the library to invalid ranges is\n  undefined.</p>\n</blockquote>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "7505034", "Score": "21", "CreationDate": "2011-09-21T18:49:20.387", "LastActivityDate": "2011-09-21T18:49:20.387"}, "7504921": {"CommentCount": "7", "ViewCount": "403", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2011-09-21T18:40:55.763", "LastActivityDate": "2011-09-21T19:24:24.680", "Title": "Is it defined to provide an inverted range to C++ standard algorithms?", "AcceptedAnswerId": "7505034", "LastEditDate": "2011-09-21T19:12:16.747", "Id": "7504921", "Score": "10", "Body": "<p>Consider standard algorithms like, say, <code>std::for_each</code>.</p>\n<pre><code>template&lt;class InputIterator, class Function&gt;\nFunction for_each(InputIterator first, InputIterator last, Function f);\n</code></pre>\n<p>As far as I can tell, there is actually no requirement placed on the <em>relative</em> states of the two <code>InputIterator</code> arguments.</p>\n<p>Does that mean that the following is technically valid? Or is it undefined? What can I realistically expect it to <em>do</em>?</p>\n<pre><code>std::vector&lt;int&gt; v{0,1,2,3,4};\nstd::for_each(\n   v.begin()+3,  // range [3,0)\n   v.begin(),\n   [](int){}\n);\n</code></pre>\n<p><a href=\"http://weegen.home.xs4all.nl/eelis/geordi/\" rel=\"nofollow\">geordi</a> tells me:</p>\n<blockquote>\n<p id=\"so_7504921_7504921_0\">error: function requires a valid iterator range [__first, __last). [+ 13 discarded lines]</p>\n</blockquote>\n<p>but I can't tell how compliant this debug diagnostic is.</p>\n<hr>\n<p>I came up with this question when trying to <em>pedantically</em> determine how explicit is defined the behaviour of the following:</p>\n<pre><code>std::vector&lt;int&gt; v; // &lt;-- empty\nstd::for_each(      // &lt;-- total no-op? stated or just left to implication?\n   v.begin(),\n   v.end(),\n   [](int){}\n);\n</code></pre>\n</hr>", "Tags": "<c++><c++11><std>", "OwnerUserId": "560648", "AnswerCount": "5"}, "7505043": {"ParentId": "7504921", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_7504921_7505043_0\">Does that mean that the following is technically valid? Or is it\n  undefined? What can I realistically expect it to do?</p>\n</blockquote>\n<p>No it is not. Your code would exhibit undefined behavior when <code>for_each</code> increments the iterator and that iterator would be pointing to <code>end</code> and there is nothing to dereference(Well, it is enough to get undefined behavior at this point, so there is no point talking about <em>past end</em>)!</p>\n", "OwnerUserId": "127893", "PostTypeId": "2", "Id": "7505043", "Score": "2", "CreationDate": "2011-09-21T18:50:14.880", "LastActivityDate": "2011-09-21T18:50:14.880"}, "bq_ids": {"n4140": {"so_7504921_7505121_0": {"section_id": 5560, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505034_2": {"section_id": 5560, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505070_0": {"section_id": 1253, "quality": 0.7692307692307693, "length": 10}, "so_7504921_7505121_2": {"section_id": 5561, "quality": 0.8181818181818182, "length": 9}, "so_7504921_7505091_0": {"section_id": 1255, "quality": 0.8333333333333334, "length": 5}, "so_7504921_7505070_1": {"section_id": 5561, "quality": 0.8888888888888888, "length": 40}, "so_7504921_7505034_3": {"section_id": 5561, "quality": 0.9111111111111111, "length": 41}}, "n3337": {"so_7504921_7505121_0": {"section_id": 5342, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505034_2": {"section_id": 5342, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505070_0": {"section_id": 1251, "quality": 0.7692307692307693, "length": 10}, "so_7504921_7505121_2": {"section_id": 5343, "quality": 0.8181818181818182, "length": 9}, "so_7504921_7505091_0": {"section_id": 1253, "quality": 0.8333333333333334, "length": 5}, "so_7504921_7505070_1": {"section_id": 5343, "quality": 0.8888888888888888, "length": 40}, "so_7504921_7505034_3": {"section_id": 5343, "quality": 0.9111111111111111, "length": 41}}, "n4659": {"so_7504921_7505070_1": {"section_id": 7008, "quality": 0.8888888888888888, "length": 40}, "so_7504921_7505034_2": {"section_id": 7007, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505070_0": {"section_id": 1358, "quality": 0.7692307692307693, "length": 10}, "so_7504921_7505121_2": {"section_id": 7008, "quality": 0.8181818181818182, "length": 9}, "so_7504921_7505034_3": {"section_id": 7008, "quality": 0.9111111111111111, "length": 41}, "so_7504921_7505121_0": {"section_id": 7007, "quality": 0.8666666666666667, "length": 13}, "so_7504921_7505091_0": {"section_id": 1360, "quality": 0.8333333333333334, "length": 5}}}, "7505070": {"ParentId": "7504921", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><strong>The result is Undefined.</strong></p>\n<hr>\n<p><strong>C++03 Standard: 25.1.1 For each</strong> and<br>\n<strong>C++11 Standard: 25.2.4 For each</strong>\nstates:  </br></p>\n<pre><code>template&lt;class InputIterator, class Function&gt;\nFunction for_each(InputIterator first, InputIterator last, Function f);\n</code></pre>\n<blockquote>\n<p id=\"so_7504921_7505070_0\">1 Effects: <strong>Applies f to the result of dereferencing every iterator in the range [first, last)</strong>, starting\n  from first and proceeding to last - 1</p>\n</blockquote>\n<p>While another section defines the valid range <code>[first,last)</code> as:</p>\n<p><strong>C++03 Standard:  24.1 Iterator requirements</strong> and<br>\n<strong>C++11 Standard:  24.2.1 Iterator requirements</strong></br></p>\n<p><strong>Para 7</strong> for both:</p>\n<blockquote>\n<p id=\"so_7504921_7505070_1\">Most of the library\u2019s algorithmic templates that operate on data structures have interfaces that use ranges.A range is a pair of iterators that designate the beginning and end of the computation.  A range [i, i) is an empty range; in general, a range [i, j) refers to the elements in the data structure starting with the one pointed to by i and up to but not including the one pointed to by j. <strong>Range [i, j) is valid if and only if j is reachable from i.  The result of the application of functions in the library to invalid ranges is undefined.</strong></p>\n</blockquote>\n<hr>\n<p>Having remembered of reading this somewhere, just browsed through:  </p>\n<p><em>C++ Standard Library - A Tutorial and Reference - By Nicolai Josutils</em> </p>\n<p>This finds a mention in:  </p>\n<blockquote>\n<p id=\"so_7504921_7505070_2\"><strong>5.4.1  Ranges</strong><br>\n  The caller must ensure that the first and second arguments define a <em>valid</em> range. This is the case if the end of the range is <em>reachable</em> from the beginning by iterating through the elements. <strong>This means, it is up to the programmer to ensure that both iterators belong to the same container and that the beginning is not behind the end. If this is not the case, the behavior is undefined and endless loops or forbidden memory access may result</strong>. </br></p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-09-21T19:24:24.680", "Id": "7505070", "Score": "6", "CreationDate": "2011-09-21T18:52:07.733", "LastActivityDate": "2011-09-21T19:24:24.680"}});