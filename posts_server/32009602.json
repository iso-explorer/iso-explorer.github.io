post_cb({"bq_ids": {"n4140": {"so_32009602_32010338_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5419}, "so_32009602_32010338_1": {"length": 34, "quality": 0.7555555555555555, "section_id": 5422}}, "n3337": {"so_32009602_32010338_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5214}, "so_32009602_32010338_1": {"length": 42, "quality": 0.9333333333333333, "section_id": 5217}}, "n4659": {"so_32009602_32010338_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6841}, "so_32009602_32010338_1": {"length": 34, "quality": 0.7555555555555555, "section_id": 6844}}}, "32009602": {"ViewCount": "115", "Body": "<p>In the following piece of C++11 code, the function <code>get</code> is <code>constexpr</code>\nbut it tries to construct an instance via the non-<code>constexpr</code> constructor.</p>\n<pre><code>template &lt;typename T&gt;\nstruct S\n{\n    S() {}\n    static constexpr S get() { return S(); }\n};\n\nint main()\n{\n    // S&lt;int&gt; s1;\n    // auto s2 = s1.get();\n}\n</code></pre>\n<p>While this code compiles with GCC, it fails with the compiler we use at\nwork with the message</p>\n<blockquote>\n<p id=\"so_32009602_32009602_0\">constexpr function return is non-constant.</p>\n</blockquote>\n<p>We started a discussion whether the compiler is allowed to issue an error in \nthis case. I think that the compiler has to accept the code. Otherwise I do\nnot see how <code>std::time_point</code> could work in C++11 because its constructor is \n<code>constexpr</code> only since C++14.</p>\n<p>So is this a quality-of-implementation thing or does the standard say \nsomething about uninstantiated templates w.r.t <code>constexpr</code>?\nFurther, would it change anything if the code in the comments were \nactivated (i.e. invoking a <code>constexpr</code> function on a non-<code>constexpr</code> \nobject)?</p>\n", "AcceptedAnswerId": "32010338", "Title": "Compiler error in uninstantiated template when a constexpr function calls a non-constexpr one", "CreationDate": "2015-08-14T12:01:06.210", "Id": "32009602", "CommentCount": "4", "LastEditDate": "2015-08-14T23:43:21.527", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-08-15T13:20:15.733", "Score": "1", "OwnerUserId": "1450656", "Tags": "<templates><c++11><constexpr>", "AnswerCount": "1"}, "32010338": {"Id": "32010338", "PostTypeId": "2", "Body": "<p>This line is fine:</p>\n<pre><code>S&lt;int&gt; s1;\n</code></pre>\n<p>but the following definition of <code>get</code> is ill-formed:</p>\n<pre><code>static constexpr S get() { return S(); }\n</code></pre>\n<p>since it does not return a literal type since <code>S</code> does not have a constexpr constructor.</p>\n<p>From the draft C++11 standard section <code>7.1.5</code> The constexpr specifier [dcl.constexpr]:</p>\n<blockquote>\n<p id=\"so_32009602_32010338_0\">The definition of a constexpr function shall satisfy the following constraints:</p>\n<ul>\n<li>its return type shall be a literal type;</li>\n</ul>\n</blockquote>\n<p>and later on the section it says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_32009602_32010338_1\">If the instantiated template specialization of a constexpr function\n  template or member function of a class template would fail to satisfy\n  the requirements for a constexpr function or constexpr constructor,\n  that specialization is not a constexpr function or constexpr\n  constructor. [ Note: If the function is a member function it will\n  still be const as described below. \u2014end note ] <strong>If no specialization\n  of the template would yield a constexpr function or constexpr\n  constructor, the program is ill-formed; no diagnostic required.</strong></p>\n</blockquote>\n<p>Note in the non-template case both gcc and clang generate an error since the return type is not a literal <a href=\"http://melpon.org/wandbox/permlink/apuSJ58BWJbqGbQ1\" rel=\"nofollow\">see it live</a>.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-08-15T13:20:15.733", "Score": "2", "CreationDate": "2015-08-14T12:38:33.970", "ParentId": "32009602", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2015-08-15T13:20:15.733"}});