post_cb({"29362582": {"CommentCount": "7", "CreationDate": "2015-03-31T07:05:00.197", "PostTypeId": "1", "AcceptedAnswerId": "29363199", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-20T10:59:08.600", "LastEditDate": "2016-03-20T10:48:39.097", "ViewCount": "373", "FavoriteCount": "2", "Title": "Template parameter name hiding", "Id": "29362582", "Score": "14", "Body": "<p>I got recently bitten by (simplified)</p>\n<pre><code>struct Base {\n    typedef char T;\n};\n\ntemplate&lt;typename T&gt;\nstruct Foo : Base {\n    T x[50];  // This is Base::T, not the template parameter\n};\n</code></pre>\n<p>In other words a class member name hides a template parameter (even if coming from a base class, thus not being totally evident in the local context).</p>\n<p>Making some experiment I found however that:</p>\n<pre><code>struct Base {\n    typedef char T;\n};\n\ntemplate&lt;typename T, typename B&gt;\nstruct Foo : B {\n    T x[50];  // This T is the template parameter,\n              // even passing Base as B\n};\n</code></pre>\n<h2>What is the rationale (if any) behind this apparently absurd rule?</h2>\n<p>The only way out I can think to is to give ugly template parameter names and also means that it's impossible to write safely a template without using reserved names (as class used in the template could clash parameter names... note that a lot of C++ code uses uglyfied names for private members).</p>\n<p>PS: I didn't dig in the standard about the issue but both g++ and clang++ agree on this behavior so I don't think it's a bug.</p>\n<p>PPS: In the real code the template parameter being hidden was named <code>tid</code>, and was an integer and not a type. <code>-Wall</code> was not enough to notifiy about the hiding and I discovered it after a couple of hours of debugging with valgrind.</p>\n", "Tags": "<c++><templates><language-lawyer><name-lookup><name-hiding>", "OwnerUserId": "320726", "AnswerCount": "1"}, "29363199": {"ParentId": "29362582", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This rule (specified in <a href=\"http://eel.is/c++draft/temp.local#9\" rel=\"nofollow\">[temp.local]/9</a>) is subject of an open core language issue created over 11 years ago - <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#459\" rel=\"nofollow\">core issue #459</a>. The CWG discussed this thoroughly. About the intent, Mike Miller mentions that</p>\n<blockquote>\n<p id=\"so_29362582_29363199_0\">The rationale for the current specification is really very simple:</p>\n<ul>\n<li><p id=\"so_29362582_29363199_1\">\u201cUnless redeclared in the derived class, members of a base class are also considered to be members of the derived class.\u201d (10\n  [class.derived] paragraph 2)</p></li>\n<li><p id=\"so_29362582_29363199_2\">In class scope, members hide nonmembers.</p></li>\n</ul>\n<p id=\"so_29362582_29363199_3\">That's it. Because template parameters are not members, they are\n  hidden by member names (whether inherited or not). I don't find that\n  \u201cbizarre,\u201d or even particularly surprising.</p>\n</blockquote>\n<p>Rationale:</p>\n<blockquote>\n<p id=\"so_29362582_29363199_4\">We have some sympathy for a change, but the current rules fall straightforwardly out of the lookup rules, so they're not \u201cwrong.\u201d Making private members invisible also would solve this problem. We'd be willing to look at a paper proposing that.[..]<br><strong>The CWG decided not to consider a change to the existing rules at this time without a paper exploring the issue in more detail.</strong></br></p>\n</blockquote>\n<p>Unfortunately no such paper has been written yet, and so the rule persists until today.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-03-20T10:59:08.600", "Id": "29363199", "Score": "7", "CreationDate": "2015-03-31T07:40:48.997", "LastActivityDate": "2016-03-20T10:59:08.600"}, "bq_ids": {"n4140": {"so_29362582_29363199_1": {"section_id": 6975, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_29362582_29363199_1": {"section_id": 6721, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_29362582_29363199_1": {"section_id": 8474, "quality": 0.7692307692307693, "length": 10}}}});