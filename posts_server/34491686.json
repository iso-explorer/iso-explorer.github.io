post_cb({"34491686": {"CommentCount": "4", "ViewCount": "515", "CreationDate": "2015-12-28T10:22:47.463", "LastActivityDate": "2015-12-28T11:00:19.907", "Title": "Calling assignment operator on an array", "AcceptedAnswerId": "34491733", "PostTypeId": "1", "Id": "34491686", "Score": "1", "Body": "<p>I wonder how this code could work:    </p>\n<pre><code>struct my_array\n{\n    int r[1000];\n};\n\nint main()\n{\n    my_array foo, bar;\n    foo = bar;\n}\n</code></pre>\n<p>Because the <code>foo = bar</code> call will invoke the constructor-provided <code>operator=</code> for the class, which will lazily apply it on every members. But arrays don't have an implementation for <code>operator=</code>, proof is, this code fails to compile:</p>\n<pre><code>int main()\n{\n    int a[1000], b[1000];\n    a = b;\n}\n</code></pre>\n<p>So how come my first code compiles?</p>\n", "Tags": "<c++><arrays><assignment-operator>", "OwnerUserId": "748175", "AnswerCount": "1"}, "34491733": {"ParentId": "34491686", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_34491686_34491733_0\">So how come my first code compiles?</p>\n</blockquote>\n<p>The language specification says it has to work, and the compiler implements that behaviour.</p>\n<p>The default assignment semantics are specified in clause 28 of <strong>\u00a7 12.8 [class.copy]</strong>. Specifically, the object's data members are assigned one by one. In the case of an array, this the array's elements are assigned one by one.</p>\n<blockquote>\n<p id=\"so_34491686_34491733_1\">The implicitly-defined copy/move assignment operator for a\n  non-union class X <strong><em>performs memberwise copy- /move assignment</em></strong> of its\n  subobjects. ...</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_34491686_34491733_2\">\u2014 if the subobject is an array, <strong><em>each element is assigned</em></strong>, in the manner appropriate to the element type;</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<hr>\n<p>Note that in your particular example, the first code sample invokes <em>undefined behaviour</em> because the elements of <code>bar</code> are uninitialized at the moment you read from them here:</p>\n<pre><code>foo = bar; // UB: bar.r uninitialized\n</code></pre>\n<p>You can fix that by suitable initializing <code>bar</code>:</p>\n<pre><code>my_array foo;\nmy_array bar{};\n</code></pre>\n</hr>", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2015-12-28T11:00:19.907", "Id": "34491733", "Score": "6", "CreationDate": "2015-12-28T10:25:10.520", "LastActivityDate": "2015-12-28T11:00:19.907"}, "bq_ids": {"n4140": {"so_34491686_34491733_1": {"section_id": 477, "quality": 0.7857142857142857, "length": 11}, "so_34491686_34491733_2": {"section_id": 477, "quality": 1.0, "length": 9}}, "n3337": {"so_34491686_34491733_1": {"section_id": 468, "quality": 0.7857142857142857, "length": 11}, "so_34491686_34491733_2": {"section_id": 468, "quality": 1.0, "length": 9}}, "n4659": {"so_34491686_34491733_1": {"section_id": 500, "quality": 0.7857142857142857, "length": 11}, "so_34491686_34491733_2": {"section_id": 500, "quality": 1.0, "length": 9}}}});