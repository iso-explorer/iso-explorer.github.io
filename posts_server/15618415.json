post_cb({"15618415": {"ViewCount": "6024", "Body": "<p>In code snippet 1 below, mKnownSRList is defined as follows:</p>\n<pre><code>std::vector&lt;EndPointAddr*&gt; mKnownSRList;\n</code></pre>\n<p>I am getting a compilation error shown in code snippet 2. Can you tell me what's wrong with this code please? The content of the getTipcAddress() and compareTo functions are shown in code snippet 3 and 4 below.</p>\n<p><strong>CODE SNIPPET 1 (Compilation error is marked)</strong></p>\n<pre><code>void \nServiceRegistrarAPI::removeKnownSR(EndPointAddr &amp; srEndPointAddr)\n{\n   auto last = \n   std::remove_if(mKnownSRList.begin(),\n                  mKnownSRList.end(),\n                 [srEndPointAddr]( EndPointAddr* o )\n                 { \n                    //LINE 355 is the following\n            EndPointTipcAddr myTipcAddress = srEndPointAddr.getTipcAddress();\n                EndPointTipcAddr otherTipcAddress = o-&gt;getTipcAddress();\n\n            return (myTipcAddress.compareTo(otherTipcAddress));\n         });\n\n    if(*last != nullptr)\n    {\n     delete *last;\n    }\n\n    mKnownSRList.erase(last, mKnownSRList.end());    \n}\n</code></pre>\n<p><strong>SNIPPET 2 (Compilation Error)</strong></p>\n<pre><code>  ServiceRegistrarAPI.cpp:355:72: error: passing \u2018const EndPointAddr\u2019 as \u2018this\u2019   argument of \u2018EndPointTipcAddr&amp; EndPointAddr::getTipcAddress()\u2019 discards qualifiers [-  fpermissive]\n</code></pre>\n<p><strong>CODE SNIPPET 3 (getTipcAddress function)</strong> </p>\n<pre><code>EndPointTipcAddr &amp; getTipcAddress() { return mTipcAddress; }\n</code></pre>\n<p><strong>CODE NIPPET 4 (compareTo function)</strong></p>\n<pre><code>  bool\n\n  EndPointTipcAddr::compareTo(EndPointTipcAddr &amp;rhs) \n  {     \n      if( (mType == rhs.getType()) &amp;&amp; (mInstanceNo == rhs.getInstanceNo()) )\n      {\n        return true;\n      } \n\n      return false;\n  }\n</code></pre>\n", "AcceptedAnswerId": "15618630", "Title": "const XX discards qualifiers [- fpermissive]", "CreationDate": "2013-03-25T15:16:17.823", "Id": "15618415", "CommentCount": "1", "LastEditDate": "2013-03-25T15:18:24.193", "PostTypeId": "1", "LastEditorUserId": "661519", "LastActivityDate": "2013-03-25T18:58:07.590", "Score": "4", "OwnerUserId": "960662", "Tags": "<c++><c++11>", "AnswerCount": "4"}, "15622599": {"Id": "15622599", "PostTypeId": "2", "Body": "<p>See S5.1.2.5:</p>\n<blockquote>\n<p id=\"so_15618415_15622599_0\">The closure type for a lambda-expression has a public inline function\n  call operator (13.5.4) whose parameters and return type are described\n  by the lambda-expression\u2019s parameter-declaration-clause and\n  trailingreturn- type respectively. This function call operator is\n  declared const (9.3.1) if and only if the lambdaexpression\u2019s\n  parameter-declaration-clause is not followed by mutable. It is neither\n  virtual nor declared volatile. Default arguments (8.3.6) shall not be\n  specified in the parameter-declaration-clause of a lambdadeclarator.\n  Any exception-specification specified on a lambda-expression applies\n  to the corresponding function call operator. An\n  attribute-specifier-seq in a lambda-declarator appertains to the type\n  of the corresponding function call operator. [ Note: Names referenced\n  in the lambda-declarator are looked up in the context in which the\n  lambda-expression appears. \u2014end note ]</p>\n</blockquote>\n<p>Basically, the implication is the operator() of the functor that is generated is <code>const</code> by default, and you've captured by value, and this captured variable is a member of the generated functor.</p>\n<p>So, you've two options:</p>\n<ol>\n<li>Capture by reference, instead of by value.</li>\n<li><p>Change your lambda to the following (note the <code>mutable</code> following the parameter declaration clause):</p>\n<p><code>[srEndPointAddr](EndPointAddr* o) mutable { ... }</code></p></li>\n</ol>\n", "LastActivityDate": "2013-03-25T18:58:07.590", "CommentCount": "1", "CreationDate": "2013-03-25T18:58:07.590", "ParentId": "15618415", "Score": "5", "OwnerUserId": "311314"}, "15618549": {"Id": "15618549", "PostTypeId": "2", "Body": "<p><em>It's an answer to how solve the problem, not why it makes error (thanks juanchopanza)</em></p>\n<p>I guess you have some problem with const-qualifiers.</p>\n<p>Add a <code>const</code>-qualified overload for <code>getTipcAddress</code>:</p>\n<pre><code>EndPointTipcAddr &amp; getTipcAddress() const { return mTipcAddress; }\n                                    ~~~~~\n</code></pre>\n<p>and, add  a <code>const</code> at end of <code>compareTo</code>:</p>\n<pre><code>bool EndPointTipcAddr::compareTo(EndPointTipcAddr &amp;rhs) const\n                                                        ~~~~~\n</code></pre>\n", "LastEditorUserId": "952747", "LastActivityDate": "2013-03-25T15:29:24.037", "Score": "0", "CreationDate": "2013-03-25T15:23:41.480", "ParentId": "15618415", "CommentCount": "1", "OwnerUserId": "952747", "LastEditDate": "2013-03-25T15:29:24.037"}, "bq_ids": {"n4140": {"so_15618415_15622599_0": {"length": 53, "quality": 0.7681159420289855, "section_id": 5964}}, "n3337": {"so_15618415_15622599_0": {"length": 58, "quality": 0.8405797101449275, "section_id": 5733}}, "n4659": {"so_15618415_15622599_0": {"length": 37, "quality": 0.5362318840579711, "section_id": 7454}}}, "15618506": {"Id": "15618506", "PostTypeId": "2", "Body": "<p>In short you get this error because you invoke a non-const method on a const instance in this case: <code>srEndPointAddr</code> is const but you invoke the non-const method <code>getTipcAddress</code> on it. The solution for you would be to declare this method const as it seems a simple getter and probably will not modify the object.</p>\n", "LastActivityDate": "2013-03-25T15:21:32.963", "CommentCount": "2", "CreationDate": "2013-03-25T15:21:32.963", "ParentId": "15618415", "Score": "0", "OwnerUserId": "812912"}, "15618630": {"Id": "15618630", "PostTypeId": "2", "Body": "<p>The predicate function (third argument of <code>std::remove_if</code>) is not allowed to modify the object. All methods called on the iterator must be <code>const</code>. See <a href=\"http://www.cplusplus.com/reference/algorithm/remove_if/\" rel=\"nofollow\">this documentation</a>:</p>\n<blockquote>\n<p id=\"so_15618415_15618630_0\">The function shall not modify its argument.</p>\n</blockquote>\n<p>You can set <code>getTipcAddress</code> to be <code>const</code> if you are returning a copy of a value or a <code>const</code> pointer.</p>\n", "OwnerDisplayName": "user2208032", "LastActivityDate": "2013-03-25T15:27:37.763", "Score": "3", "CreationDate": "2013-03-25T15:27:37.763", "ParentId": "15618415", "CommentCount": "0"}});