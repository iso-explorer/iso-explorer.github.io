post_cb({"33124884": {"ParentId": "33123520", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_33123520_33124884_0\">Is the C-style cast bar* b = (bar*)(f) defined?</p>\n</blockquote>\n<p>C-Style casts will always work, that's why they are the worst among all the casts. For non-polymorphic classes, you may want to use <code>static_cast</code>. </p>\n<p>However, in your case you are going towards <strong>undefined behavior</strong>.</p>\n<pre><code>bar* b = (bar*)(f);  // = static_cast&lt;bar*&gt;(f)\n</code></pre>\n<p>The type of <code>f</code> is <code>class FOO</code> (i.e. as in question <code>FOO* f = new FOO()</code>), not <code>class bar</code>. Hence you should not assign such pointers. Even if you assign, you must not use them as of they are of <code>class bar</code>.</p>\n<p><sub> P.S. IMO, safest to unsafe casts: <code>dynamic_cast</code>, <code>const_cast</code>, <code>static_cast</code>, <code>reinterpret_cast</code>, C-style cast. </sub></p>\n", "OwnerUserId": "514235", "PostTypeId": "2", "Id": "33124884", "Score": "3", "CreationDate": "2015-10-14T12:07:44.340", "LastActivityDate": "2015-10-14T12:07:44.340"}, "33127426": {"ParentId": "33123520", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I agree with the <a href=\"https://stackoverflow.com/a/33124884/509868\">answer</a> by iammilind - your casting is the same as <code>static_cast</code>, and it's not defined.</p>\n<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">Standard</a> (the linked document is actually a draft, but it doesn't matter for most purposes) says \"the result of the cast is undefined\" in section 5.2.9, which describes <code>static_cast</code>.</p>\n<p>However, since your <code>struct bar</code> has no data members, it's a <em>standard-layout</em> class, and it's <em>layout-compatible</em> with <code>struct FOO</code>. So you can cast your pointer to <code>void*</code> and then to <code>foo*</code>:</p>\n<pre><code>bar* b = (bar*)(void*)f\n</code></pre>\n<p>This is better represented in c++ by <code>reinterpret_cast</code>:</p>\n<pre><code>bar* b = reinterpret_cast&lt;bar*&gt;(f)\n</code></pre>\n<p>This is described in section 5.2.10:</p>\n<blockquote>\n<p id=\"so_33123520_33127426_0\">An object pointer can be explicitly converted to an object pointer of a different type ... the result is <code>static_cast&lt;cv T2*&gt;(static_cast&lt;cv void*&gt;(v))</code> if both T1 and T2 are standard-layout types ...</p>\n</blockquote>\n", "OwnerUserId": "509868", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:44:46.360", "Id": "33127426", "Score": "1", "CreationDate": "2015-10-14T13:59:58.057", "LastActivityDate": "2015-10-14T14:17:39.707"}, "33123520": {"CommentCount": "8", "AcceptedAnswerId": "33127426", "PostTypeId": "1", "LastEditorUserId": "3415258", "CreationDate": "2015-10-14T10:57:22.043", "LastActivityDate": "2015-10-14T14:17:39.707", "LastEditDate": "2015-10-14T14:12:22.827", "ViewCount": "83", "FavoriteCount": "0", "Title": "C-style cast on a non-polymorphic type", "Id": "33123520", "Score": "2", "Body": "<p>Suppose I have a base <code>struct</code> <code>FOO</code> which is essentially a C-style <code>struct</code>:</p>\n<pre><code>struct FOO\n{\n    double bar1;\n    int bar2;\n};\n</code></pre>\n<p>And a C++ style <code>struct</code> (which has member functions, no member data, but no v-table):</p>\n<pre><code>struct bar : public FOO\n{\n    double getBar1() const;\n    int getBar2() const;\n};\n</code></pre>\n<p>I then have a pointer <code>FOO* f</code>, which is <em>actually</em> a <code>FOO</code>: it was created using <code>FOO* f = new FOO()</code>;  Is the C-style cast <code>bar* b = (bar*)(f)</code> defined?</p>\n<p><strong>Apologies: <code>bar</code> does not contain any data members</strong></p>\n", "Tags": "<c++><language-lawyer><downcasting><type-punning>", "OwnerUserId": "3415258", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33123520_33127426_0": {"section_id": 6046, "quality": 0.75, "length": 12}}, "n3337": {"so_33123520_33127426_0": {"section_id": 5814, "quality": 0.875, "length": 14}}, "n4659": {"so_33123520_33127426_0": {"section_id": 7545, "quality": 0.6875, "length": 11}}}});