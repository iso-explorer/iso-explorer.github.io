post_cb({"13139474": {"ParentId": "13138605", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-10-30T12:56:28.627", "Score": "3", "LastEditorUserId": "476681", "LastEditDate": "2012-10-30T13:18:35.240", "Id": "13139474", "OwnerUserId": "476681", "Body": "<p>You are breaking the the <code>[basic.scope.pdecl]/6</code>, which says :</p>\n<blockquote>\n<p id=\"so_13138605_13139474_0\">The point of declaration of a class first declared in an elaborated-type-specifier is as follows:<br>\n  \u2014 for a declaration of the form<br>\n<code>class-key attribute-specifier-seqopt identifier ;</code> </br></br></p>\n<p id=\"so_13138605_13139474_1\">the identifier is declared to be a class-name in the scope that contains the declaration, otherwise<br>\n  \u2014 for an elaborated-type-specifier of the form<br>\n<code>class-key identifier</code> </br></br></p>\n<p id=\"so_13138605_13139474_2\">if the elaborated-type-specifier is used in the decl-specifier-seq or parameter-declaration-clause of a\n  function defined in namespace scope, the identifier is declared as a class-name in the namespace that\n  contains the declaration; otherwise, except as a friend declaration, the identifier is declared in the\n  smallest namespace or block scope that contains the declaration. [ Note: These rules also apply within\n  templates. \u2014 end note ] [ Note: Other forms of elaborated-type-specifier do not declare a new name,\n  and therefore must refer to an existing type-name. See 3.4.4 and 7.1.6.3. \u2014 end note ]</p>\n</blockquote>\n<ol>\n<li>you are not creating a variable of an anonymous type</li>\n<li>you are not create a type</li>\n</ol>\n<p>There is another example (in <code>[basic.def]/2</code>) from the standard that proves your example is not standard compliant :</p>\n<pre><code>struct S { int a; int b; };       // defines S, S::a, and S::b\nstruct X {                        // defines X\n  int x;                          // defines non-static data member x\n  static int y;                   // declares static data member y\n  X(): x(0) { }                   // defines a constructor of X\n};\nint X::y = 1;                     // defines X::y\nenum { up, down };                // defines up and down\nnamespace N { int d; }            // defines N and N::d\nnamespace N1 = N;                 // defines N1\nX anX;                            // defines anX\n</code></pre>\n<p>Your example doesn't define anything (except an anonymous struct, who's fields can not be accessed).</p>\n<p>Note an exception about the enum, because this case introduces two values to use.</p>\n", "LastActivityDate": "2012-10-30T13:18:35.240"}, "13139363": {"ParentId": "13138605", "CommentCount": "1", "CreationDate": "2012-10-30T12:50:49.347", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "13139363", "Score": "50", "Body": "<p>Clause 9 of the standard allows <code>class {public: int i;}</code> (note the lack of a final semicolon) because this <em>decl-specifier-seq</em> for an unnamed class might be used in some other construct such as a typedef or a variable declaration. The problem with <code>class {public: int i;};</code> (note that the final semicolon is now present) is that this class specification now becomes a declaration. This is an illegal declaration per clause 7, paragraph 3 of the standard:</p>\n<blockquote>\n<p id=\"so_13138605_13139363_0\">In such cases, and except for the declaration of an unnamed bit-field (9.6), the <em>decl-specifier-seq</em> shall introduce one or more names into the program, or shall redeclare a name introduced by a previous declaration.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-30T12:50:49.347"}, "13138878": {"ParentId": "13138605", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2012-10-30T12:22:42.173", "Score": "26", "LastEditorUserId": "1093223", "LastEditDate": "2012-10-31T12:40:32.180", "Id": "13138878", "OwnerUserId": "924727", "Body": "<p>The point is that by declaring <code>class{ int i; };</code> you are assembling a bunch of symbol (<code>int i</code>, in this case) you will not be able to use anywhere else in whatever code.</p>\n<p>For this code to make sense you should at least do one of the following:</p>\n<pre><code>class Myclass { int i; }; //I can furthermore instantiate variables of Myclass\nclass { int i; } myvar; //This in fact creates a myvar object\ntypedef class { int i; } MyType; //I can funthermore instantiate variables of MyType\n</code></pre>\n<p>By saying just <code>class{ int i; };</code> you are saying to the compiler:</p>\n<ul>\n<li>keep an <code>int</code> and name it <code>i</code>,</li>\n<li>wrap it into a <code>class</code> I'll never call and...</li>\n<li>forget it! (<code>};</code>)</li>\n</ul>\n<p>If you remove that declaration from your program, nothing will change.</p>\n", "LastActivityDate": "2012-10-31T12:40:32.180"}, "13138605": {"CommentCount": "2", "AcceptedAnswerId": "13139363", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-10-30T12:05:07.910", "LastActivityDate": "2012-10-31T12:40:32.180", "LastEditDate": "2017-05-23T10:28:21.600", "ViewCount": "2262", "FavoriteCount": "8", "Title": "Why class { int i; }; is not fully standard-conformant?", "Id": "13138605", "Score": "43", "Body": "<p>This is a follow-up question. </p>\n<p>In the <a href=\"https://stackoverflow.com/questions/13134845/class-with-no-name/13134925#comment17869000_13134925\">previous question</a>, @JohannesSchaub-litb said that the following code is <strong>not</strong> fully standard-conformant:</p>\n<pre><code>class { int i; };  //unnamed-class definition. \u00a7 9/1 allows this!\n</code></pre>\n<p>and then he added,</p>\n<blockquote>\n<p id=\"so_13138605_13138605_0\">while it is grammatically valid, it breaks the rule that such a class must declare at least one name into its enclosing scope.</p>\n</blockquote>\n<p>I couldn't really understand this. What name is he talking about? </p>\n<p>Could anyone elaborate on this further (preferably quoting the Standard)?</p>\n", "Tags": "<c++><class><definition><identifier><standards-compliance>", "OwnerUserId": "415784", "AnswerCount": "5"}, "13139393": {"ParentId": "13138605", "CommentCount": "0", "CreationDate": "2012-10-30T12:52:28.500", "OwnerUserId": "19563", "PostTypeId": "2", "Id": "13139393", "Score": "11", "Body": "<p><code>class { int i; };</code> is not a valid declaration because it is a <em>simple-declaration</em> without an <em>init-declarator-list</em> but it doesn't introduce (or re-declare) a class name.</p>\n<p>ISO/IEC 14882:2011 7 [dcl.dcl] / 3:</p>\n<blockquote>\n<p id=\"so_13138605_13139393_0\">In a <em>simple-declaration</em>, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (Clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaboratedtype-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>. In these cases and whenever a <em>class-specifier</em> or <em>enum-specifier</em> is present in the <em>decl-specifier-seq</em>, the identifiers in these specifiers are among the names being declared by the declaration (as <em>class-names</em>, <em>enum-names</em>, or <em>enumerators</em>, depending on the syntax). <strong>In such cases, and except for the declaration of an unnamed bit-field (9.6), the <em>decl-specifier-seq</em> shall introduce one or more names into the program, or shall redeclare a name introduced by a previous declaration.</strong></p>\n</blockquote>\n", "LastActivityDate": "2012-10-30T12:52:28.500"}, "bq_ids": {"n4140": {"so_13138605_13139474_1": {"section_id": 7055, "quality": 1.0, "length": 11}, "so_13138605_13139474_2": {"section_id": 7055, "quality": 0.8235294117647058, "length": 42}, "so_13138605_13139363_0": {"section_id": 5381, "quality": 0.7647058823529411, "length": 13}, "so_13138605_13139474_0": {"section_id": 7055, "quality": 0.8461538461538461, "length": 11}, "so_13138605_13139393_0": {"section_id": 5381, "quality": 0.9245283018867925, "length": 49}}, "n3337": {"so_13138605_13139474_1": {"section_id": 6799, "quality": 1.0, "length": 11}, "so_13138605_13139474_2": {"section_id": 6799, "quality": 0.8235294117647058, "length": 42}, "so_13138605_13139393_0": {"section_id": 5175, "quality": 1.0, "length": 53}, "so_13138605_13139363_0": {"section_id": 5175, "quality": 1.0, "length": 17}, "so_13138605_13139474_0": {"section_id": 6799, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_13138605_13139474_1": {"section_id": 8552, "quality": 1.0, "length": 11}, "so_13138605_13139474_2": {"section_id": 8552, "quality": 0.8235294117647058, "length": 42}, "so_13138605_13139363_0": {"section_id": 6805, "quality": 0.7647058823529411, "length": 13}, "so_13138605_13139474_0": {"section_id": 8552, "quality": 0.8461538461538461, "length": 11}, "so_13138605_13139393_0": {"section_id": 6805, "quality": 0.9245283018867925, "length": 49}}}, "13138997": {"ParentId": "13138605", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-10-30T12:28:35.963", "Score": "10", "LastEditorUserId": "166749", "LastEditDate": "2012-10-30T13:28:33.643", "Id": "13138997", "OwnerUserId": "166749", "Body": "<p>The error message from GCC explains it quite succinctly:</p>\n<pre><code>$ cat &gt; a.cc\nclass { int i; };\n$ g++ -Wall -std=c++98 a.cc\na.cc:1: error: abstract declarator \u2018&lt;anonymous class&gt;\u2019 used as declaration\n</code></pre>\n<p><code>class { int i; }</code> is an <em>abstract-declarator</em> (Standard, \u00a78) but not a valid <em>declaration</em> (\u00a77). That's the rule that @JohannesSchaub-litb referenced: for a valid declaration, you need something to be declared, e.g. a class name or variable name.</p>\n", "LastActivityDate": "2012-10-30T13:28:33.643"}});