post_cb({"23516994": {"ParentId": "23516402", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>If I understand this correctly, You can get the behaviour that you are looking for with a better design.</p>\n<p>The dereference operator actually doesn't really works just as an operator that retrieves a values for you from a pointer, if offers a slightly more complex behaviour.</p>\n<p>The business logic of the <code>-&gt;</code> operator is clearly <a href=\"https://stackoverflow.com/a/10460730/2485710\">illustrated here</a>, it is also being expanded <a href=\"https://stackoverflow.com/a/2470586/2485710\">here</a>, <a href=\"https://stackoverflow.com/a/8539449/2485710\">here</a> and you can find a birds eye view about pointer related operators <a href=\"https://stackoverflow.com/a/8782794/2485710\">here</a> .</p>\n<p>As you can easily guess, If you have <code>T-&gt;t</code> you can use the drill down behaviour at your advantage, assuming that you have properly designed and defined <code>T</code> and its own <code>-&gt;</code> operator.</p>\n<p>This is a solution that can easily bring some polymorphic behaviour to your application.</p>\n", "OwnerUserId": "2485710", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:06:40.590", "Id": "23516994", "Score": "0", "CreationDate": "2014-05-07T11:48:25.907", "LastActivityDate": "2014-05-07T11:48:25.907"}, "23516675": {"ParentId": "23516402", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Here is a not too technical explanation.</p>\n<p><code>-&gt;</code> is shorthand for the <code>*</code> and the <code>.</code> in <code>(*someptr).memberfunc()</code>. Therefore this can be expressed as <code>someptr-&gt;memberfunc()</code>.</p>\n<p>Two <code>-&gt;</code> would be, in your example, the same as <code>(*(*arr.begin()).).c_str()</code>. Notice the extra dot. This doesn't make sense and it doesn't compile, since . is a binary operator, and * is a unary operator. Therefore, you would have an \"extra\" dot. You really want two <code>*</code>'s and only one <code>.</code>.  Use one <code>-&gt;</code> and one <code>*</code> as you have done.</p>\n<p><code>-&gt;</code> means \"dereference and get a member.\"  You want to dereference twice, and get a member once, so double <code>-&gt;</code> is not what you want.</p>\n", "OwnerUserId": "2073275", "LastEditorUserId": "2073275", "LastEditDate": "2014-05-07T11:42:11.420", "Id": "23516675", "Score": "1", "CreationDate": "2014-05-07T11:33:48.297", "LastActivityDate": "2014-05-07T11:42:11.420"}, "23516402": {"CommentCount": "16", "ViewCount": "241", "PostTypeId": "1", "LastEditorUserId": "754093", "CreationDate": "2014-05-07T11:20:42.330", "LastActivityDate": "2014-05-07T14:00:46.143", "Title": "Is there any good reason C++ doesn't permit doubling the -> operator?", "FavoriteCount": "1", "LastEditDate": "2014-05-07T14:00:46.143", "Id": "23516402", "Score": "0", "Body": "<p>In C++, you can double up the indirection operator:</p>\n<pre><code>vector&lt;unique_ptr&lt;string&gt;&gt; arr{make_unique&lt;string&gt;(\"Test\")};\ncout &lt;&lt; **arr.begin() &lt;&lt; endl;\n</code></pre>\n<p>But you can't double up the dereference operator:</p>\n<pre><code>cout &lt;&lt; arr.begin()-&gt;-&gt;c_str() &lt;&lt; endl;\n</code></pre>\n<p>Instead, you have to settle with this (IMO) less-legible alternative:</p>\n<pre><code>cout &lt;&lt; (*arr.begin())-&gt;c_str() &lt;&lt; endl;\n</code></pre>\n<p><code>operator-&gt;</code> is a unary operator that returns a pointer type, so it seems natural to be able to chain them. Is there any good reason for this limitation? Is there some parsing difficulty I'm not seeing?</p>\n<p><strong>Edit</strong></p>\n<p>In 5.2.5/3, The C++ standard specifies:</p>\n<blockquote>\n<p id=\"so_23516402_23516402_0\">If E1 has the type \u201cpointer to class X,\u201d then the expression E1-&gt;E2 is\n  converted to the equivalent form (*(E1)).E2</p>\n</blockquote>\n<p>I just wish it was specified as:</p>\n<blockquote>\n<p id=\"so_23516402_23516402_1\">If E1 has the type \u201cpointer to class X,\u201d then the expression E1-&gt; is\n  converted to the equivalent form (*(E1)).</p>\n</blockquote>\n<p>It actually seems contrary for this definition to include E1 and E2, since an overloaded <code>operator-&gt;</code> isn't a binary operator.</p>\n", "Tags": "<c++>", "OwnerUserId": "754093", "AnswerCount": "3"}, "23516576": {"ParentId": "23516402", "CommentCount": "6", "Body": "<p>Note that:</p>\n<pre><code>(*a).b\na-&gt;b\n</code></pre>\n<p>are the same thing</p>\n<p>so</p>\n<pre><code>a-&gt;-&gt;b\n(*a)-&gt;b\n(*(*a)).b\n</code></pre>\n<p>So would be okay as an operator, but that isn't in the spirit of <code>-&gt;</code> the spirit is to access things that are pointed to in structures. I'd rather type <code>a-&gt;b</code> than <code>(*a).b</code></p>\n<p>So while no technical reason <code>(*a)-&gt;b</code> tells you \"<code>a</code> is a pointer to a pointer of a structure with <code>b</code>\" and <code>a-&gt;b-&gt;c</code> is <strong><em>totally</em></strong> different to <code>a-&gt;-&gt;b</code> even though they look similar.  </p>\n", "OwnerUserId": "2112028", "PostTypeId": "2", "Id": "23516576", "Score": "0", "CreationDate": "2014-05-07T11:29:23.940", "LastActivityDate": "2014-05-07T11:29:23.940"}, "bq_ids": {"n4140": {"so_23516402_23516402_0": {"section_id": 6005, "quality": 0.9, "length": 9}, "so_23516402_23516402_1": {"section_id": 6005, "quality": 0.875, "length": 7}}, "n3337": {"so_23516402_23516402_0": {"section_id": 5773, "quality": 0.9, "length": 9}, "so_23516402_23516402_1": {"section_id": 5773, "quality": 0.875, "length": 7}}, "n4659": {"so_23516402_23516402_0": {"section_id": 7504, "quality": 0.9, "length": 9}, "so_23516402_23516402_1": {"section_id": 7504, "quality": 0.875, "length": 7}}}});