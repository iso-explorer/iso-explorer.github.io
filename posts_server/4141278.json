post_cb({"bq_ids": {"n4140": {"so_4141278_4142094_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 382}}, "n3337": {"so_4141278_4142094_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 373}}, "n4659": {"so_4141278_4142094_0": {"length": 14, "quality": 0.6086956521739131, "section_id": 397}}}, "4141278": {"ViewCount": "1427", "Body": "<p>Assuming I have:</p>\n<ul>\n<li>class A which is non-copyable</li>\n<li>class B which has as a member, const A&amp; a (and takes an A in its constructer and sets it in its initialization list)</li>\n<li>a function <code>A GenerateA();</code></li>\n</ul>\n<p>Does this mean that it should be valid to do:\nB(GenerateA())\n?</p>\n<p>i.e, does the const ref mean that no copy of the A that generateA() returns is done? And does that mean that the scope of the returned temporary is extended for as long as B exists?</p>\n<p>EDIT: Addon question from the comments:\nIs it acceptable to return a A&amp; from GenerateA() to a local A, if the lvalue is a const A&amp;?</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "4142094", "Title": "C++ const lvalue references", "CreationDate": "2010-11-10T04:41:49.863", "Id": "4141278", "CommentCount": "2", "LastEditDate": "2010-11-10T04:59:12.887", "PostTypeId": "1", "LastEditorUserId": "502756", "LastActivityDate": "2010-11-10T07:24:01.800", "Score": "8", "OwnerUserId": "502756", "Tags": "<c++><reference><const><noncopyable>", "AnswerCount": "4"}, "4141350": {"Id": "4141350", "PostTypeId": "2", "Body": "<p>If <code>A</code> is non-copyable, then the function <code>A GenerateA()</code> is invalid since returning by value requires creating a copy.</p>\n<p>If the function returns a reference instead (i.e. <code>A &amp;GenerateA()</code>) and the reference is to a locally created <code>A</code> object, it becomes invalid as soon as the function exits. C++ doesn't have any form of garbage collection, so there is no way to \"extend\" the lifetime of an object as long as it is in use.</p>\n", "LastEditorUserId": "381345", "LastActivityDate": "2010-11-10T04:59:48.903", "Score": "4", "CreationDate": "2010-11-10T04:54:20.470", "ParentId": "4141278", "CommentCount": "6", "OwnerUserId": "381345", "LastEditDate": "2010-11-10T04:59:48.903"}, "4142094": {"Id": "4142094", "PostTypeId": "2", "Body": "<p>As it has already been stated by others, <code>A GenerateA()</code> cannot compile if <code>A</code> is not copyable.</p>\n<p>Regarding the const ref : no, the lifetime of the temporary will not be extended to the lifetime of B. The standard [12.2.5] states :</p>\n<blockquote>\n<p id=\"so_4141278_4142094_0\">A temporary bound to a reference member in a constructor's ctor-initializer (12.6.2) persists until the constructor exits. [...] A temporary bound to the returned value in a function return statement (6.6.3) persists until the function exits.</p>\n</blockquote>\n<p>So yes, extension of the lifetime of a temporary exists in some contexts (and is sometime truly useful : <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">see this article</a>), but not in the one you presented.</p>\n<p>Regarding your last question, it's not legal to return a reference to a local variable from <code>GenerateA()</code> (and binding the result to a const reference won't be of any help).</p>\n", "LastActivityDate": "2010-11-10T07:24:01.800", "CommentCount": "1", "CreationDate": "2010-11-10T07:24:01.800", "ParentId": "4141278", "Score": "3", "OwnerUserId": "451980"}, "4141334": {"Id": "4141334", "PostTypeId": "2", "Body": "<p>Yes and No.</p>\n<p>Yes, the const reference will bind to the temporary variable.  No, const references which are class members do not extend lifetime the way const references with automatic duration do.</p>\n", "LastActivityDate": "2010-11-10T04:51:21.283", "CommentCount": "3", "CreationDate": "2010-11-10T04:51:21.283", "ParentId": "4141278", "Score": "0", "OwnerUserId": "103167"}, "4141394": {"Id": "4141394", "PostTypeId": "2", "Body": "<p>Here's an <strong>example</strong>:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint&amp; GenX(bool reset)\n{\n    static int* x = new int;\n    *x = 100;\n    if (reset)\n    {\n        delete x;\n        x = new int;\n        *x = 200;\n    }\n    return *x;\n}\n\nclass YStore\n{\npublic:\n    YStore(int&amp; x);\n    int&amp; getX() { return my_x; }\nprivate:\n    int&amp; my_x;\n};\n\nYStore::YStore(int&amp; x)\n : my_x(x)\n{\n}\n\nint main()\n{\n    YStore Y(GenX(false));\n    cout &lt;&lt; \"X: \" &lt;&lt; Y.getX() &lt;&lt; endl;\n    GenX(true); // side-effect in Y\n    cout &lt;&lt; \"X: \" &lt;&lt; Y.getX() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>X: 100\nX: 200\n</code></pre>\n", "LastActivityDate": "2010-11-10T05:03:27.183", "CommentCount": "8", "CreationDate": "2010-11-10T05:03:27.183", "ParentId": "4141278", "Score": "0", "OwnerUserId": "43012"}});