post_cb({"24924603": {"CommentCount": "6", "ViewCount": "296", "CreationDate": "2014-07-24T03:23:35.693", "LastActivityDate": "2014-07-24T03:30:11.127", "Title": "C++ call templated constructor for template class", "AcceptedAnswerId": "24924660", "PostTypeId": "1", "Id": "24924603", "Score": "1", "Body": "<p>I have a template class, with variadic argument list:</p>\n<pre><code>template&lt;class ...Args&gt;\nstruct Data{\n};\n</code></pre>\n<p>Now I want to have constructor with variadic \"universal reference\" argument list, so I make my constructor templated:</p>\n<pre><code>template&lt;class ...Args&gt;\nstruct Data{\n\n    template&lt;class ...CtrArgs&gt;\n    Data(CtrArgs&amp;&amp; ... args){\n        // do something\n    }\n\n};\n</code></pre>\n<p>And now I want to make an instance of <code>Data</code>:</p>\n<pre><code>Data&lt;int, MyClass, bool&gt; dat(1, MyClass(), false);\n     ^^^^^^^^^^^^^^^^^^\n     Is this Args? Or CtrArgs?\n</code></pre>\n<p>The question is, does this <code>&lt;int, MyClass, bool&gt;</code> goes to Args, or to CtrArgs?</p>\n<p>P.S. Maybe this is easy to check. But I ask this because I have very strange behavior in more complex case.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1559666", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24924603_24924660_0": {"section_id": 114, "quality": 0.8571428571428571, "length": 30}}, "n3337": {"so_24924603_24924660_0": {"section_id": 109, "quality": 0.8571428571428571, "length": 30}}, "n4659": {"so_24924603_24924660_0": {"section_id": 118, "quality": 0.8571428571428571, "length": 30}}}, "24924660": {"ParentId": "24924603", "CommentCount": "2", "Body": "<p><code>Data&lt;int, MyClass, bool&gt;</code> is the type obtained by instantiating the class template <code>Data</code> with the template arguments <code>int</code>, <code>MyClass</code>, <code>bool</code>. So in your example, the template arguments go to <code>Args</code>.</p>\n<p>There is no way to explicitly specify template arguments for a constructor. The C++ standard even says so unequivocally (\u00a714.8.1/7):</p>\n<blockquote>\n<p id=\"so_24924603_24924660_0\">[ <em>Note:</em> Because the explicit template argument list follows the function template name, and because con-\n  version member function templates and constructor member function templates are called without using a\n  function name, there is no way to provide an explicit template argument list for these function templates.\n  \u2014 <em>end note</em> ]</p>\n</blockquote>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "24924660", "Score": "1", "CreationDate": "2014-07-24T03:30:11.127", "LastActivityDate": "2014-07-24T03:30:11.127"}});