post_cb({"15212261": {"CommentCount": "2", "AcceptedAnswerId": "15212447", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-03-04T22:21:28.600", "LastActivityDate": "2013-03-04T23:08:44.743", "LastEditDate": "2017-05-23T11:47:11.080", "ViewCount": "10041", "FavoriteCount": "4", "Title": "Default initialization of POD types in C++", "Id": "15212261", "Score": "10", "Body": "<p>I know some <a href=\"https://stackoverflow.com/questions/146452/what-are-pod-types-in-c\">POD</a> variables are initialized by default, but others are not. (POD types include <code>int</code>, <code>float</code>, pointers, unions, arrays of POD types, structs of POD types, etc.)</p>\n<p><strong>How does scope and storage class affect default initialization of POD types?</strong></p>\n<p>Specifically, which of the following will be initialized implicitly:</p>\n<ul>\n<li>Local variables with automatic storage</li>\n<li>Static local variables</li>\n<li>Static global variables</li>\n<li>External variables</li>\n<li>Variables allocated with <code>new</code></li>\n<li>POD members of a class (without explicit initialization in a constructor)</li>\n</ul>\n<p>I know there are existing questions relating to some of these situations, but none comprehensive (they only address specific situations).</p>\n", "Tags": "<c++><initialization><pod>", "OwnerUserId": "1428922", "AnswerCount": "2"}, "15212351": {"ParentId": "15212261", "CommentCount": "2", "Body": "<p>If we're only talking about PODs then only <strong>local and global statics</strong> and <strong>external variables</strong> because they have to be defined somewhere.</p>\n<p><strong>PODs allocated with <code>new</code></strong> are also initialized <strong>sometimes</strong> - if you make the initialization explicit:</p>\n<pre><code>int* x = new int();\n</code></pre>\n<p>will create an <code>int</code> initialized to <code>0</code> with <code>x</code> pointing to it, whereas</p>\n<pre><code>int* x = new int;\n</code></pre>\n<p>will have <code>x</code> point to an uninitialized <code>int</code>. </p>\n<p><strong>Sometimes - POD class members</strong> - they can be initialized explicitly (without being in a constructor):</p>\n<pre><code>struct X\n{\n   int x;\n};\n\nX x;        //x.x is not initialized\nX y = X();  //y.x is 0\n</code></pre>\n", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "15212351", "Score": "7", "CreationDate": "2013-03-04T22:27:31.540", "LastActivityDate": "2013-03-04T22:27:31.540"}, "15212447": {"ParentId": "15212261", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Local variables with automatic storage duration are not being initialized automatically. Since using uninitialized variables produces <strong>undefined behavior</strong>, it is a good practice to explicitly initialize your variables even when it's redundant.</p>\n<p>About POD types that are being zero-initialized, C++03 standard <strong>3.6.2 Initialization of non-local objects</strong> states:</p>\n<blockquote>\n<p id=\"so_15212261_15212447_0\"><strong>\u00a71</strong> Objects with <strong>static storage duration</strong> (3.7.1) shall be <strong>zero-initialized</strong> (8.5) before any other initialization takes place. Zero-initialization and initialization with a constant expression are collectively called static initialization; all other initialization is dynamic initialization. Objects of POD types (3.9) with static storage duration initialized with constant expressions (5.19) shall be initialized before any dynamic initialization takes place.</p>\n</blockquote>\n<p>So it's guaranteed by standard that POD types with <em>static storage duration</em> (whatever their scope is) will be zero-initialized.</p>\n<blockquote>\n<p id=\"so_15212261_15212447_1\"><em>POD members of a class (without explicit initialization in a constructor)</em></p>\n</blockquote>\n<p>This situation is described in <strong>12.6.2 Initializing bases and members</strong>, that states (selected parts):</p>\n<blockquote>\n<p id=\"so_15212261_15212447_2\">If a given <em>nonstatic</em> data member or base class is not named by a mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no ctor-initializer), then:  </p>\n<p id=\"so_15212261_15212447_3\">\u2014 If the entity is a <strong>nonstatic data member</strong>..., and the entity class <strong>is a non-POD</strong> class, the entity is <strong>default-initialized</strong> (8.5)...</p>\n<p id=\"so_15212261_15212447_4\">\u2014 <strong>Otherwise, the entity is not initialized</strong>...</p>\n<p id=\"so_15212261_15212447_5\">After the call to a constructor for class X has completed, if a member of X is neither specified in the constructor\u2019s mem-initializers, nor default-initialized, nor value-initialized, nor given a value during execution of the body of the constructor, <strong>the member has indeterminate value.</strong></p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class C\n{\npublic:\n    C(int x, int z) : x(x), z(z) { }\n    int x, y, z;\n};\n\nint main(void)\n{\n    C* c = new C(1,3);\n    std::cout &lt;&lt; c-&gt;y; // value of y is undetermined !!!\n}\n</code></pre>\n", "OwnerUserId": "1168156", "LastEditorUserId": "1168156", "LastEditDate": "2013-03-04T23:08:44.743", "Id": "15212447", "Score": "12", "CreationDate": "2013-03-04T22:33:09.333", "LastActivityDate": "2013-03-04T23:08:44.743"}, "bq_ids": {"n4140": {"so_15212261_15212447_5": {"section_id": 435, "quality": 0.7083333333333334, "length": 17}, "so_15212261_15212447_3": {"section_id": 435, "quality": 0.8, "length": 8}, "so_15212261_15212447_0": {"section_id": 7151, "quality": 0.625, "length": 25}, "so_15212261_15212447_2": {"section_id": 435, "quality": 0.6470588235294118, "length": 11}}, "n3337": {"so_15212261_15212447_5": {"section_id": 427, "quality": 0.7083333333333334, "length": 17}, "so_15212261_15212447_3": {"section_id": 427, "quality": 0.7, "length": 7}, "so_15212261_15212447_0": {"section_id": 6895, "quality": 0.625, "length": 25}, "so_15212261_15212447_2": {"section_id": 427, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_15212261_15212447_5": {"section_id": 454, "quality": 0.7083333333333334, "length": 17}, "so_15212261_15212447_1": {"section_id": 7709, "quality": 0.6666666666666666, "length": 4}, "so_15212261_15212447_3": {"section_id": 454, "quality": 0.8, "length": 8}, "so_15212261_15212447_2": {"section_id": 454, "quality": 0.6470588235294118, "length": 11}}}});