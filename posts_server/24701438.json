post_cb({"bq_ids": {"n4140": {"so_24701438_24701438_0": {"length": 9, "quality": 1.0, "section_id": 7150}, "so_24701438_24701746_0": {"length": 13, "quality": 1.0, "section_id": 7169}}, "n3337": {"so_24701438_24701438_0": {"length": 9, "quality": 1.0, "section_id": 6894}, "so_24701438_24701746_0": {"length": 13, "quality": 1.0, "section_id": 6913}}, "n4659": {"so_24701438_24701438_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 8651}, "so_24701438_24701746_0": {"length": 13, "quality": 1.0, "section_id": 8677}}}, "24701746": {"Id": "24701746", "PostTypeId": "2", "Body": "<p>N3337, 3.7.2.2  </p>\n<blockquote>\n<p id=\"so_24701438_24701746_0\">A variable with thread storage duration shall be initialized before\n  its first odr-use (3.2) and, if constructed, shall be destroyed on\n  thread exit.</p>\n</blockquote>\n<p>3.2.2 is too long to copy it here, but essentially, it can\u00b4t be \"odr-used\" if it doesn\u00b4t appear in the executed code. So it is not (necessarily) initialized with something.</p>\n", "LastEditorUserId": "3134621", "LastActivityDate": "2014-07-11T20:13:24.243", "Score": "2", "CreationDate": "2014-07-11T15:51:36.323", "ParentId": "24701438", "CommentCount": "0", "OwnerUserId": "3134621", "LastEditDate": "2014-07-11T20:13:24.243"}, "24701438": {"ViewCount": "255", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing std::cout;\nusing std::thread;\n\nthread_local int a;\n\nvoid foo()\n{\n    a = a + 1;\n    cout  &lt;&lt; a &lt;&lt; \"\\n\";\n}\n\nvoid bar()\n{\n    cout &lt;&lt; a &lt;&lt; \"\\n\";\n}\n\nvoid baz()\n{\n    cout &lt;&lt; \"Something\\n\";\n}\n\nint main()\n{\n    thread first(foo);\n    thread second(bar);\n    thread third(baz);\n    second.join();\n    first.join();\n    third.join();\n    cout &lt;&lt; a;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/772d50f08f5897de\" rel=\"nofollow\">Demo</a></p>\n<p>Since <code>a</code> has thread storage duration, we have at least three different objects, denoted by a and used in <code>first</code>, <code>second</code> and <code>main</code> threads. We don't use <code>a</code> inside <code>third</code>. Is there zero-initialized <code>a</code> which can be used in third? I ask this question because I can't find anything about this in the Standard: </p>\n<blockquote>\n<p id=\"so_24701438_24701438_0\">Non-local variables with thread storage duration are initialized as a\n  consequence of thread execution.</p>\n</blockquote>\n<p>Is it implementation defined?</p>\n", "Title": "Thread local global scope variable", "CreationDate": "2014-07-11T15:34:11.073", "LastActivityDate": "2014-07-11T20:13:24.243", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-11T15:43:28.020", "LastEditorDisplayName": "user2953119", "OwnerDisplayName": "user2953119", "Id": "24701438", "Score": "1", "Tags": "<c++><multithreading><storage-duration>", "AnswerCount": "1"}});