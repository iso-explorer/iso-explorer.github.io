post_cb({"bq_ids": {"n4140": {"so_742607_742617_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 7141}}, "n3337": {"so_742607_742617_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 6885}}, "n4659": {"so_742607_742617_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 8642}}}, "742617": {"Id": "742617", "PostTypeId": "2", "Body": "<p>It's explicitly forbidden by the C++98/03 standard. </p>\n<p>C++11 remove that restriction.</p>\n<p>To be more complete : </p>\n<blockquote>\n<p id=\"so_742607_742617_0\">The restrictions on types that are\n  used as template parameters <strong>are listed</strong>\n<strong>in article 14.3.1 of the C++03</strong> (and\n  C++98) standard:</p>\n<p id=\"so_742607_742617_1\">A local type, a type with no linkage,\n  an unnamed type or a type compounded\n  from any of these types shall not be\n  used as a template-argument for a\n  template type-parameter.</p>\n</blockquote>\n<pre><code>template &lt;class T&gt; class Y { /* ... */  }; \nvoid func() {   \n      struct S { /* ... */ }; //local class   \n      Y&lt; S &gt; y1; // error: local type used as template-argument  \n      Y&lt; S* &gt; y2; // error: pointer to local type used as template-argument }\n</code></pre>\n<p>Source and more details : <a href=\"http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=420\" rel=\"noreferrer\">http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=420</a></p>\n<p>To sum up, the restriction was a mistake that would have been fixed sooner if the standard was evolving faster...</p>\n<p>That said today most last versions of common compilers does allow it, along with providing lambda expressions.</p>\n", "LastEditorUserId": "2368", "LastActivityDate": "2015-02-02T12:52:35.640", "Score": "50", "CreationDate": "2009-04-12T23:15:14.007", "ParentId": "742607", "CommentCount": "9", "OwnerUserId": "2368", "LastEditDate": "2015-02-02T12:52:35.640"}, "742607": {"ViewCount": "5192", "Body": "<p>I have always wondered why you cannot use locally defined classes as predicates to STL algorithms. </p>\n<p>In the question: <a href=\"https://stackoverflow.com/questions/256557/approaching-stl-algorithms-lambda-local-classes-and-other-approaches\">Approaching STL algorithms, lambda, local classes and other approaches</a>, BubbaT mentions says that '<em>Since the C++ standard forbids local types to be used as arguments</em>'</p>\n<p>Example code:</p>\n<pre><code>int main() {\n   int array[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n   std::vector&lt;int&gt; v( array, array+10 );\n\n   struct even : public std::unary_function&lt;int,bool&gt;\n   {\n      bool operator()( int x ) { return !( x % 2 ); }\n   };\n   std::remove_if( v.begin(), v.end(), even() ); // error\n}\n</code></pre>\n<p>Does anyone know where in the standard is the restriction? What is the rationale for disallowing local types?</p>\n<hr>\n<p><strong>EDIT</strong>: Since C++11, it is legal to use a local type as a template argument.</p>\n</hr>", "AcceptedAnswerId": "742617", "Title": "Using local classes with STL algorithms", "CreationDate": "2009-04-12T23:11:18.397", "Id": "742607", "CommentCount": "0", "FavoriteCount": "12", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:46:53.447", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-02T12:52:35.640", "Score": "48", "OwnerUserId": "36565", "Tags": "<c++><stl><stl-algorithm>", "AnswerCount": "2"}, "747050": {"Id": "747050", "PostTypeId": "2", "Body": "<p>The restriction will be removed in '0x, but I don't think you'll be using them very much.  And that's because C++-0x is going to have lambdas! :)</p>\n<pre><code>int main() {\n   int array[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n   std::vector&lt;int&gt; v( array, array+10 );\n\n   std::remove_if( v.begin()\n                 , v.end()\n                 , [] (int x) -&gt; bool { return !(x%2); })\n}\n</code></pre>\n<p>My syntax in the above may be not be perfect, but the general idea is there.</p>\n", "LastActivityDate": "2009-04-14T10:46:46.020", "CommentCount": "3", "CreationDate": "2009-04-14T10:46:46.020", "ParentId": "742607", "Score": "5", "OwnerUserId": "11698"}});