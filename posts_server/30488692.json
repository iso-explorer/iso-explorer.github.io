post_cb({"bq_ids": {"n4140": {"so_30488692_30488841_0": {"length": 4, "quality": 0.8, "section_id": 382}, "so_30488692_30488692_0": {"length": 18, "quality": 0.6923076923076923, "section_id": 7148}}, "n3337": {"so_30488692_30488841_0": {"length": 4, "quality": 0.8, "section_id": 373}, "so_30488692_30488692_0": {"length": 18, "quality": 0.6923076923076923, "section_id": 6892}}, "n4659": {"so_30488692_30488841_0": {"length": 4, "quality": 0.8, "section_id": 502}, "so_30488692_30488692_0": {"length": 18, "quality": 0.6923076923076923, "section_id": 8649}}}, "30488692": {"ViewCount": "74", "Body": "<p>C++ standard section 3.6.1 says that</p>\n<blockquote>\n<p id=\"so_30488692_30488692_0\">Calling the function <code>std::exit(int)</code> declared in <code>&lt;cstdlib&gt;</code> terminates\n  the program without leaving the current block and hence without\n  destroying any objects with automatic storage duration  If std::exit\n  is called to end a program during the destruction of an object with\n  static storage duration, the program has undefined behavior.</p>\n</blockquote>\n<p>So, consider following simple program</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\nclass test\n{\n    public:\n        test()\n        {\n            std::cout&lt;&lt;\"constructor\\n\";\n        }\n        ~test()\n        {\n            std::cout&lt;&lt;\"destructor\\n\";\n        }\n};\nint main()\n{\n    test t;\n    exit(0);\n}\n</code></pre>\n<p>The output of the above program should be obviously</p>\n<blockquote>\n<p id=\"so_30488692_30488692_1\"><em>constructor</em></p>\n</blockquote>\n<p>So, my question is:</p>\n<ol>\n<li><p>when the automatic object t will be destroyed?</p></li>\n<li><p>Will it be safely destroyed by compiler?</p></li>\n<li><p>Why it is undefined behavior?</p></li>\n</ol>\n<p>Now, consider slightly modified version of above program.</p>\n<pre><code>    #include &lt;iostream&gt;\n    #include &lt;cstdlib&gt;\n    class test\n    {\n        public:\n            test()\n            {\n                std::cout&lt;&lt;\"constructor\\n\";\n            }\n            ~test()\n            {\n                std::cout&lt;&lt;\"destructor\\n\";\n            }\n    };\n    int main()\n    {\n        static test t;\n        exit(0);\n    }\n</code></pre>\n<p>Now, I got following output:</p>\n<blockquote>\n<p id=\"so_30488692_30488692_2\">constructor</p>\n<p id=\"so_30488692_30488692_3\">destructor</p>\n</blockquote>\n<p>So, is it possible to see only constructor call as an output on some C++ implementations due to undefined behavior?</p>\n<p>Please correct me If I understood incorrectly something.</p>\n", "AcceptedAnswerId": "30488841", "Title": "destruction of static storage duration objects & undefined behavior", "CreationDate": "2015-05-27T16:53:22.847", "Id": "30488692", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-05-27T17:16:35.757", "LastEditorUserId": "3777958", "LastActivityDate": "2015-05-27T17:16:35.757", "Score": "1", "OwnerUserId": "3777958", "Tags": "<c++><destructor><undefined-behavior>", "AnswerCount": "1"}, "30488841": {"Id": "30488841", "PostTypeId": "2", "Body": "<blockquote id=\"so_30488692_30488841_0\">\n<ol>\n<li>when the automatic object t will be destroyed?</li>\n</ol>\n</blockquote>\n<p>Never. The quote you cited reads \"... <strong>without</strong> destroying any objects with automatic storage duration ...\"</p>\n<blockquote id=\"so_30488692_30488841_1\">\n<ol start=\"2\">\n<li>Will it be safely destroyed by compiler?</li>\n</ol>\n</blockquote>\n<p>No. The compiler's job is to produce the code for the machine to run, once you're at runtime the compiler isn't doing anything anymore.</p>\n<blockquote id=\"so_30488692_30488841_2\">\n<ol start=\"3\">\n<li>Why it is undefined behavior?</li>\n</ol>\n</blockquote>\n<p>In your example, it's not undefined behavior - you're not calling <code>std::exit()</code> \"during the destruction of an object with static or thread storage duration.\" However, if you were, it would be sufficient to answer \"it's undefined behavior because the standard explicitly states it as such.\"</p>\n", "LastActivityDate": "2015-05-27T17:01:21.120", "CommentCount": "2", "CreationDate": "2015-05-27T17:01:21.120", "ParentId": "30488692", "Score": "2", "OwnerUserId": "2069064"}});