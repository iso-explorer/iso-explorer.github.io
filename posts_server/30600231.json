post_cb({"bq_ids": {"n4140": {"so_30600231_30600273_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 382}}, "n3337": {"so_30600231_30600273_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 373}}}, "30600231": {"ViewCount": "87", "Body": "<p>Just by curiosity, is it possible to declare a reference to an inner class in\nan outer class : </p>\n<pre><code>class A{\n    private:\n        class B{\n            public:\n                B(double val):val_(val){}\n            private:\n                double val_;\n        };\n\n    public:\n        A(double val):b(B(val)){} /*problem*/\n\n    private:\n        B&amp; b;\n};\n\nint main(){\n    A a(1.0);\n}\n</code></pre>\n<p>It feels logic that it is impossible because I don't see how one can assign a\nreference to a temporary variable. But I'd like to be sure. (I would like to\nuse a ref rather than a pointer to guarantee the presence of a <code>B</code> in <code>A</code>.)</p>\n<h1>Edit</h1>\n<p>As I had the question why I'd like to do that, here is my goal. Let's imagine\nthat the <code>class B</code> contains a lot of data and require a lot of memory. I don't\nwant to have many copy of B otherwise I will run out of memory. Now I have two\nclass <code>C</code> and <code>D</code> that both inherit of <code>A</code>. I want them to be related to the\nsame instance of <code>B</code>. I could do that with a pointer, but as said before I want\nto make sure that at least a <code>B</code> exists somewhere, so I though that by using a\nref I would be able to guarentee that. I also would like <code>B</code> to be an inner\nclass so that I don't pollute my code. Thanks to your help, I now use a rvalue\nreference and my code looks like this :</p>\n<pre><code>class A{\n    class B{\n        public:\n            B(double val):val_(val){}\n        private:\n            double val_;\n    };\n\n    public:\n    A(double val):b(B(val)){}\n    A(A const&amp; a):b(a.b){}/*new problem*/\n\n    protected:\n    B&amp;&amp; b;\n};\n\nclass C: public A{\n    public:\n        C(A const&amp; a):A(a){}\n};\n\nclass D: public A{\n    public:\n        D(A const&amp; a):A(a){}\n};\n\nint main(){\n    A a(1.0);\n    C c(a);\n    D d(a);\n}\n</code></pre>\n<p>but it doesn't compile.</p>\n", "AcceptedAnswerId": "30601105", "Title": "c++ reference to an inner class inside an outer class", "CreationDate": "2015-06-02T15:23:41.320", "Id": "30600231", "CommentCount": "11", "LastEditDate": "2015-06-02T16:00:21.503", "PostTypeId": "1", "LastEditorUserId": "2110463", "LastActivityDate": "2015-06-02T16:05:53.253", "Score": "0", "OwnerUserId": "2110463", "Tags": "<c++><reference><inner-classes>", "AnswerCount": "2"}, "30601105": {"PostTypeId": "2", "Body": "<p>If you want an object to be shared between copied member, use a std::shared_ptr.\nIt's the only standard way to guarantee your B object will persistently exist for all the A objects that use it.</p>\n", "LastActivityDate": "2015-06-02T16:05:53.253", "Id": "30601105", "CommentCount": "2", "CreationDate": "2015-06-02T16:05:53.253", "ParentId": "30600231", "Score": "2", "OwnerUserId": "2356414"}, "30600273": {"PostTypeId": "2", "Body": "<p><strong>No.</strong></p>\n<p>It'll <em>compile</em> if you use an rvalue reference:</p>\n<pre><code>class A\n{\n   struct B {};\n   B&amp;&amp; b;\n\npublic:\n   A() : b(B()) {}\n};\n\nint main()\n{\n    A a;\n}\n</code></pre>\n<p>\u2026but, annoyingly, <strong>this is a dangling reference</strong> by a special rule that prohibits the member <code>b</code> from extending the lifetime of that temporary <code>B()</code> as it otherwise might:</p>\n<blockquote>\n<p id=\"so_30600231_30600273_0\"><code>[C++11: 12.2/5]:</code> <em>[..]</em> A temporary bound to a reference member in a constructor\u2019s ctor-initializer (12.6.2) persists until the constructor exits. <em>[..]</em> </p>\n</blockquote>\n<p>Now, if <code>B</code> were <code>public</code>, and if the <code>B</code> object were passed in from somewhere else, then you'd have achieved your goal:</p>\n<pre><code>struct A\n{\n   struct B {};\n   B&amp; b;\n\n   A(B&amp; b) : b(b) {}\n};\n\nint main()\n{\n    A::B b;\n    A a(b);\n}\n</code></pre>\n<h3>(<a href=\"http://coliru.stacked-crooked.com/a/51a90ec6853cbffc\" rel=\"nofollow\">live demo</a>)</h3>\n<p>But, failing that, I don't see what else you can do to achieve this.</p>\n<p>It would seem to be of limited utility, though; just have an actual <code>B</code> member!</p>\n", "LastActivityDate": "2015-06-02T16:02:36.270", "LastEditorUserId": "560648", "Id": "30600273", "CommentCount": "8", "CreationDate": "2015-06-02T15:25:43.227", "ParentId": "30600231", "Score": "3", "OwnerUserId": "560648", "LastEditDate": "2015-06-02T16:02:36.270"}});