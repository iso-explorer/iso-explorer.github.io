post_cb({"bq_ids": {"n4140": {"so_33620783_33621132_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3326}}, "n3337": {"so_33620783_33621132_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3196}}, "n4659": {"so_33620783_33621132_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4092}}}, "33621132": {"Id": "33621132", "PostTypeId": "2", "Body": "<pre><code>int unpack[] { (append_to_vector(v1, vr), 1)... };\n//        ^^ |                          |   ||| |    array of ints\n//           ^                          |    |  ^    array initializer\n//                                      ^    |       comma operator\n//                                          ^^^      pack expansion\n</code></pre>\n<p>This is creating an array of <code>int</code>s containing as many elements as the size of the parameter pack <code>vr</code>. Each element in the array is <code>1</code>, which is what the <a href=\"http://en.cppreference.com/w/cpp/language/operator_other#Built-in_comma_operator\" rel=\"nofollow noreferrer\">comma operator</a> returns after evaluating both arguments. The final ellipsis indicates <a href=\"http://en.cppreference.com/w/cpp/language/parameter_pack#Pack_expansion\" rel=\"nofollow noreferrer\">pack expansion</a> of the parameter pack <code>vr</code> is being done.</p>\n<p>So if you were to call your function as <code>concat_version3(v1, v2, v3)</code> where all arguments are <code>vector</code>s, then the above expression would result in</p>\n<pre><code>int unpack[]{ (append_to_vector(v1, v2), 1), (append_to_vector(v1, v3), 1) };\n</code></pre>\n<p>The nice thing about evaluating expressions within a <em>braced-init-list</em> is that the order of evaluation is fixed and happens left to right.</p>\n<p><em>\u00a78.5.4/4 [dcl.init.list]</em></p>\n<blockquote>\n<p id=\"so_33620783_33621132_0\">Within the <em>initializer-list</em> of a <em>braced-init-list</em>, the <em>initializer-clauses</em>, including any that result from pack expansions (14.5.3), are <strong>evaluated in the order in which they appear</strong>.</p>\n</blockquote>\n<p>So you're guaranteed that <code>v2</code> gets appended to <code>v1</code> before <code>v3</code>, which is what you want.</p>\n<hr>\n<pre><code>(void(unpack));\n</code></pre>\n<p>This is just a way to avoid unused variable warnings from the compiler.</p>\n<hr>\n<p>Now, I would write your <code>unpack</code> initialization a bit differently.</p>\n<pre><code>int unpack[] { 1, (append_to_vector(v1, vr), 1)... };\n//             ^^\n</code></pre>\n<p>In the original, if you called the function as <code>concat_version3(v1)</code>, i.e. with an empty parameter pack, the code wouldn't compile because you'd be attempting to create a zero sized array, adding the extra element fixes that problem.</p>\n<p>Furthermore, if you were using the above expression in more generic code where you didn't know what the return type of <code>append_to_vector</code> was, then you'd also need to guard against the possibility of it returning a type that overloads the comma operator. In that case you'd write</p>\n<pre><code>int unpack[] { 1, (append_to_vector(v1, vr), void(), 1)... };\n</code></pre>\n<p>By adding the <code>void()</code> expression in between you ensure that no overloaded comma operator is selected, and the built-in one is always called.</p>\n<hr>\n<p>Finally, if you have a compiler that understands <a href=\"http://en.cppreference.com/w/cpp/language/fold\" rel=\"nofollow noreferrer\">fold expressions</a>, you can do away with the whole array trick and simply write</p>\n<pre><code>template&lt;typename T, typename... A&gt;\nstd::vector&lt;T&gt; concat_version3(std::vector&lt;T&gt; v1, const A&amp;... vr)\n{\n    (void)(((append_to_vector(v1, vr), void()), ...));\n    return v1;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/5d84fc317eda9925\" rel=\"nofollow noreferrer\">Live demo</a></p>\n<p>Note: the extra parentheses after the <code>void</code> cast are required due to a <a href=\"https://stackoverflow.com/a/31972828/241631\">clang bug</a>.</p>\n</hr></hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-11-26T19:16:37.717", "Score": "4", "CreationDate": "2015-11-10T01:01:16.273", "ParentId": "33620783", "CommentCount": "5", "OwnerUserId": "241631", "LastEditDate": "2017-05-23T11:51:59.523"}, "33620783": {"ViewCount": "199", "Body": "<p>I came across this post <a href=\"https://stackoverflow.com/questions/23439221/variadic-template-function-to-concatenate-stdvector-containers\">variadic template function to concatenate std::vector containers</a> suggesting the use of the following syntax:</p>\n<pre><code>template&lt;typename T&gt;\nvoid append_to_vector(std::vector&lt;T&gt;&amp; v1, const std::vector&lt;T&gt;&amp; v2) {\n  std::cout &lt;&lt; v2[0] &lt;&lt; std::endl;\n  for (auto&amp; e : v2) v1.push_back(e);\n}\n\n\ntemplate&lt;typename T, typename... A&gt;\nstd::vector&lt;T&gt; concat_version3(std::vector&lt;T&gt; v1, const A&amp;... vr) {\n    int unpack[] { (append_to_vector(v1, vr), 1)... };\n    (void(unpack));\n    return v1;\n}\n</code></pre>\n<p>I started playing around with it to understand how it worked, since I haven't seen this:</p>\n<pre><code>int unpack[] { (append_to_vector(v1, vr), 0)... };\n(void(unpack));\n</code></pre>\n<p>Seems like this is some kind of dynamically generated initialization list that also has side effects? I'm also puzzled by the fact that the <code>0</code> above doesn't matter. I substituted, -1 and 5, and each of these values worked just fine too.</p>\n<p>So can someone tell me the name of this technique/syntax and what exactly is happening in the two lines above? I'd really appreciate any pointers and apologize if I missed the relevant SO posts. </p>\n", "AcceptedAnswerId": "33621132", "Title": "int a[] { (functioncall(a1, a2), 0)...}; (void(a)); What does this syntax do/mean?", "CreationDate": "2015-11-10T00:17:13.153", "Id": "33620783", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:10.500", "LastEditorUserId": "-1", "LastActivityDate": "2015-11-26T19:16:37.717", "Score": "2", "OwnerUserId": "4678042", "Tags": "<c++><templates><c++11><variadic-templates><list-initialization>", "AnswerCount": "1"}});