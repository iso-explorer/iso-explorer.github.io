post_cb({"bq_ids": {"n4140": {"so_15575054_15575107_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5341}}, "n3337": {"so_15575054_15575107_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5138}}, "n4659": {"so_15575054_15575107_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6762}}}, "15575107": {"Id": "15575107", "PostTypeId": "2", "Body": "<p><code>0LL</code> is an integer literal. It's suffix is <code>LL</code> which determines the possible set of types that it might have. For a decimal constant, the type will be <code>long long int</code>. For an octal or hexadecimal constant, the type will be <code>long long int</code> or <code>unsigned long long int</code> if necessary. In the case of <code>0LL</code>, the literal is of type <code>long long int</code>.</p>\n<blockquote>\n<p id=\"so_15575054_15575107_0\">The type of an integer literal is the first of the corresponding list in Table 6 in which its value can be represented.</p>\n<p id=\"so_15575054_15575107_1\">Table 6 - Types of integer constants</p>\n<pre class=\"lang-none prettyprint-override\"><code>Suffix     Decimal constants    Octal or hexadecimal constant\n...\nll or LL   long long int        long long int\n                                unsigned long long int\n...\n</code></pre>\n</blockquote>\n", "LastActivityDate": "2013-03-22T16:18:35.137", "CommentCount": "3", "CreationDate": "2013-03-22T16:18:35.137", "ParentId": "15575054", "Score": "1", "OwnerUserId": "150634"}, "15575054": {"ViewCount": "8688", "Body": "<p>Is <code>LL</code> defined anywhere in the standard (hard term to come by)?</p>\n<p><a href=\"http://ideone.com/ch3INx\" rel=\"nofollow\">ideone</a> accepts the code</p>\n<pre><code>int main()\n{\n    std::cout &lt;&lt; sizeof(0LL) &lt;&lt; std::endl;\n    std::cout &lt;&lt; sizeof(0);\n}\n</code></pre>\n<p>and prints</p>\n<pre><code>8\n4\n</code></pre>\n<p>But what does it mean?</p>\n", "AcceptedAnswerId": "15575105", "Title": "What does LL mean?", "CreationDate": "2013-03-22T16:15:57.227", "LastActivityDate": "2013-03-22T16:23:41.567", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "Tags": "<c++>", "Id": "15575054", "Score": "1", "OwnerUserId": "673730", "ClosedDate": "2013-03-22T16:27:05.307", "AnswerCount": "3"}, "15575073": {"Id": "15575073", "PostTypeId": "2", "Body": "<p><code>LL</code> is the suffix for long-long, which is 64-bit on most (all?) C/C++ implementations.  So <code>0LL</code> is a 64-bit literal with the value of 0.</p>\n<p>This is similar to <code>L</code> being the suffix for a long literal, which on most 32- and 64-bit C/C++ implementations is the same size as a non-long <code>int</code>.  (On 16-bit implementations, the size of <code>int</code> is usually 16 bits, and so the <code>L</code> suffix would indicate a 32-bit integer literal in contrast to the default of 16 bits.)</p>\n", "LastActivityDate": "2013-03-22T16:16:53.027", "CommentCount": "0", "CreationDate": "2013-03-22T16:16:53.027", "ParentId": "15575054", "Score": "2", "OwnerUserId": "501250"}, "15575105": {"Id": "15575105", "PostTypeId": "2", "Body": "<p>It is specified in Paragraph 2.14.2 of the C++11 Standard:</p>\n<h1>2.14.2 Integer literals</h1>\n<blockquote>\n<p id=\"so_15575054_15575105_0\">[...]</p>\n<p id=\"so_15575054_15575105_1\"><em>long-long-suffix</em>: one of</p>\n<pre><code>ll LL\n</code></pre>\n</blockquote>\n<p>Paragraph 2.14.2/2, and in particular Table 6, goes on specifying the meaning of the suffix for decimal, octal, and hexadecimal constants, and the types they are given. </p>\n<p>Since <code>0</code> is an octal literal, the type of <code>0LL</code> is <code>long long int</code>:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nint main()\n{\n    // Won't fire\n    static_assert(std::is_same&lt;decltype(0LL), long long int&gt;::value, \"Ouch!\");\n}\n</code></pre>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-22T16:23:41.567", "Score": "3", "CreationDate": "2013-03-22T16:18:25.227", "ParentId": "15575054", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-03-22T16:23:41.567"}});