post_cb({"12943768": {"Id": "12943768", "PostTypeId": "2", "Body": "<p>This code is ill-formed, no diagnostic required. Like the diagnostic says, if a declaration uses a name and the name has a different meaning than it would have when looked up at the end of the class definition, the programm is illformed, no diagnostic required.</p>\n", "LastActivityDate": "2012-10-17T21:34:44.167", "CommentCount": "1", "CreationDate": "2012-10-17T21:34:44.167", "ParentId": "12943607", "Score": "6", "OwnerUserId": "34509"}, "bq_ids": {"n4140": {"so_12943607_12943770_0": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_12943607_12943770_0": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_12943607_12943770_0": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "12943607": {"ViewCount": "1609", "Body": "<p>Trying to compile the following code on different compilers gives me two different results:</p>\n<pre><code>struct S{};\nstruct T{S S;};\nint main(){}\n</code></pre>\n<p>As you can see, inside <code>T</code>, I have an object named the same as the previously defined class <code>S</code>.</p>\n<hr>\n<p>On GCC 4.7.2, <a href=\"http://liveworkspace.org/code/6cd3eb7604aac15c7fc5c9005e3c561b\">I get the following error</a> pertaining to the <code>S S;</code> declaration inside <code>T</code>:</p>\n<blockquote>\n<p id=\"so_12943607_12943607_0\">error: declaration of 'S T::S' [-fpermissive]<br>\n   error: changes meaning of 'S' from 'struct S' [-fpermissive]</br></p>\n</blockquote>\n<p>However, moving it outside of the class (or into <code>main</code>) <a href=\"http://liveworkspace.org/code/7782c16e75dceb383e6af7361c0551cc\">works fine</a>:</p>\n<pre><code>struct S{};\nS S;\nint main(){}\n</code></pre>\n<p>What exactly does it mean by the error it's giving me?</p>\n<hr>\n<p>In Visual Studio 2012, the whole thing compiles and runs without any errors. Pasting it into <a href=\"http://llvm.org/demo/\">this Clang 3.0 compiler</a> gives me no errors as well.</p>\n<p>Which is right? Can I actually do this or not?</p>\n</hr></hr>", "AcceptedAnswerId": "12943770", "Title": "Can a member of a class be named the same name as its type (another class)?", "CreationDate": "2012-10-17T21:22:24.807", "Id": "12943607", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2012-10-17T22:38:19.333", "Score": "8", "OwnerUserId": "962089", "Tags": "<c++><g++><implementation><clang><visual-c++-2012>", "AnswerCount": "3"}, "12943770": {"Id": "12943770", "PostTypeId": "2", "Body": "<p>gcc is correct, from [3.3.7 Class Scope]</p>\n<blockquote>\n<p id=\"so_12943607_12943770_0\">A name N used in a class S shall refer to the same declaration in its\n  context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>However, note that <code>no diagnostic is required</code>, so all compilers are conforming.</p>\n<p>The reason is because of how class scope works. When you write <code>S S;</code> <code>S</code> is visible within the <strong>entire</strong> class and changes the meaning when you use <code>S</code>.</p>\n<pre><code>struct S{};\nstruct T{\n    void foo()\n    { \n        S myS; // Not possible anymore because S refers to local S\n    }\n    S S;\n};\n</code></pre>\n", "LastEditorUserId": "906773", "LastActivityDate": "2012-10-17T21:49:56.280", "Score": "14", "CreationDate": "2012-10-17T21:34:58.690", "ParentId": "12943607", "CommentCount": "2", "OwnerUserId": "906773", "LastEditDate": "2012-10-17T21:49:56.280"}, "12944488": {"Id": "12944488", "PostTypeId": "2", "Body": "<p>@JesseGood provide a complete answer, but if you really want to do this without any error, you can use type's full name and it will work as follow:</p>\n<pre><code>struct S {};\nstruct T { ::S S; };\nint main() {return 0;}\n</code></pre>\n<p>No there is no error, since <code>S</code> in your class is <code>T::S</code> and its type is <code>::S</code>!</p>\n", "LastActivityDate": "2012-10-17T22:38:19.333", "CommentCount": "0", "CreationDate": "2012-10-17T22:38:19.333", "ParentId": "12943607", "Score": "6", "OwnerUserId": "1425813"}});