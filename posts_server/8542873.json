post_cb({"20435077": {"LastActivityDate": "2017-11-06T09:22:43.673", "LastEditorUserId": "2702193", "ParentId": "8542873", "LastEditDate": "2017-11-06T09:22:43.673", "Id": "20435077", "Score": "7", "Body": "<p>Whatever you get from right side ( of \"=\" ) is never a reference. More specifically the result of an expression is never a reference. In this light, note the difference between results in the example.</p>\n<pre><code>#include &lt;typeinfo&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt; typename T &gt;\nstruct A\n{\n    static void foo(){ std::cout&lt;&lt; \"value\" &lt;&lt; std::endl; }\n};\n\ntemplate&lt; typename T &gt;\nstruct A&lt; T&amp;&gt;\n{\n    static void foo(){ std::cout&lt;&lt; \"reference\" &lt;&lt; std::endl; }\n};\n\nfloat&amp; bar()\n{\n    static float t=5.5;\n    return t;\n}\n\nint main()\n{\n   auto a3 = bar();\n\n   A&lt;decltype(bar())&gt;::foo(); // reference\n   A&lt;decltype(a3)&gt;::foo();    // value\n}\n</code></pre>\n", "CommentCount": "1", "PostTypeId": "2", "OwnerUserId": "1135237", "CreationDate": "2013-12-06T22:57:51.947"}, "8544417": {"LastActivityDate": "2011-12-17T11:30:59.363", "ParentId": "8542873", "Id": "8544417", "Score": "12", "Body": "<p><code>\u00a77.1.6.4 [dcl.spec.auto] p6</code></p>\n<blockquote>\n<p id=\"so_8542873_8544417_0\">Once the type of a <em>declarator-id</em> has been determined according to 8.3, the type of the declared variable using the <em>declarator-id</em> is determined from the type of its initializer using the rules for template argument deduction.</p>\n</blockquote>\n<p>This means nothing else than that <code>auto</code> models template argument deduction during a function call.</p>\n<pre><code>template&lt;class T&gt;\nvoid f(T){} // #1, will also be by-value\n\ntemplate&lt;class T&gt;\nvoid g(T&amp;){} // #2, will always be by-reference\n</code></pre>\n<p>Note that #1 will always copy the passed argument, no matter if you pass a reference or anything else. (Unless you specifically specify the template argument like <code>f&lt;int&amp;&gt;(intref);</code>.)</p>\n", "CommentCount": "2", "PostTypeId": "2", "OwnerUserId": "500104", "CreationDate": "2011-12-17T11:30:59.363"}, "8542873": {"ViewCount": "20605", "AcceptedAnswerId": "8543161", "Tags": "<c++><c++11>", "AnswerCount": "3", "OwnerUserId": "23643", "Body": "<p>When I use C++11 <code>auto</code>, what are the rules of type deduction with regards to whether it will resolve to a value or a reference?</p>\n<p>E.g, sometimes it is clear:</p>\n<pre><code>auto i = v.begin(); // Copy, begin() returns an iterator by value\n</code></pre>\n<p>These are less clear:</p>\n<pre><code>const std::shared_ptr&lt;Foo&gt;&amp; get_foo();\nauto p = get_foo(); // Copy or reference?\n\nstatic std::shared_ptr&lt;Foo&gt; s_foo;\nauto sp = s_foo; // Copy or reference?\n\nstd::vector&lt;std::shared_ptr&lt;Foo&gt;&gt; c;\nfor (auto foo: c) { // Copy for every loop iteration?\n</code></pre>\n", "CommentCount": "0", "PostTypeId": "1", "CreationDate": "2011-12-17T05:46:20.657", "FavoriteCount": "13", "LastActivityDate": "2017-11-06T09:22:43.673", "Id": "8542873", "LastEditorUserId": "23643", "Title": "C++11 \"auto\" semantics", "Score": "51", "LastEditDate": "2011-12-17T05:55:14.640"}, "8543161": {"LastActivityDate": "2016-09-26T15:04:35.143", "LastEditorUserId": "214671", "ParentId": "8542873", "LastEditDate": "2016-09-26T15:04:35.143", "Id": "8543161", "Score": "57", "Body": "<p>The rule is simple : it is how you declare it.</p>\n<pre><code>int i = 5;\nauto a1 = i;    // value\nauto &amp; a2 = i;  // reference\n</code></pre>\n<p>Next example proves it :</p>\n<pre><code>#include &lt;typeinfo&gt;\n#include &lt;iostream&gt;    \n\ntemplate&lt; typename T &gt;\nstruct A\n{\n    static void foo(){ std::cout&lt;&lt; \"value\" &lt;&lt; std::endl; }\n};\ntemplate&lt; typename T &gt;\nstruct A&lt; T&amp;&gt;\n{\n    static void foo(){ std::cout&lt;&lt; \"reference\" &lt;&lt; std::endl; }\n};\n\nfloat&amp; bar()\n{\n    static float t=5.5;\n    return t;\n}\n\nint main()\n{\n    int i = 5;\n    int &amp;r = i;\n\n    auto a1 = i;\n    auto a2 = r;\n    auto a3 = bar();\n\n    A&lt;decltype(i)&gt;::foo();       // value\n    A&lt;decltype(r)&gt;::foo();       // reference\n    A&lt;decltype(a1)&gt;::foo();      // value\n    A&lt;decltype(a2)&gt;::foo();      // value\n    A&lt;decltype(bar())&gt;::foo();   // reference\n    A&lt;decltype(a3)&gt;::foo();      // value\n}\n</code></pre>\n<p>The output:</p>\n<pre><code>value\nreference\nvalue\nvalue\nreference\nvalue\n</code></pre>\n", "CommentCount": "1", "PostTypeId": "2", "OwnerUserId": "476681", "CreationDate": "2011-12-17T06:44:27.850"}, "bq_ids": {"n3337": {"so_8542873_8544417_0": {"section_id": 5245, "quality": 0.9, "length": 18}}}});