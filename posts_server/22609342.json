post_cb({"22609342": {"CommentCount": "8", "ViewCount": "172", "CreationDate": "2014-03-24T12:26:40.270", "LastActivityDate": "2014-03-24T12:39:42.363", "Title": "C++ Standard doesn't say anything about operator!=() and operator==() for enum classes", "AcceptedAnswerId": "22609514", "PostTypeId": "1", "Id": "22609342", "Score": "0", "Body": "<p><strong>Section 7.2 Enumeration declarations</strong> doesn't say anything about the <code>operator!=()</code> and the <code>operator==()</code> for a scoped enumeration. But the code below compiles.</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum class Month{jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov , dec};\n\nint main()\n{\n    Month a = Month::feb;\n    Month b = Month::jul;\n    Month c = a;\n\n    if( a != b ) std::cout &lt;&lt; \"a |= b\" &lt;&lt; '\\n';\n    if( a == c ) std::cout &lt;&lt; \"a == c\" &lt;&lt; '\\n';\n}\n</code></pre>\n", "Tags": "<c++><c++11><enums><operator-overloading><language-lawyer>", "OwnerUserId": "2548699", "AnswerCount": "3"}, "22609514": {"ParentId": "22609342", "CommentCount": "3", "Body": "<p>The built-in operators are specified in 5.10:</p>\n<blockquote>\n<p id=\"so_22609342_22609514_0\">The == (equal to) and the != (not equal to) operators have the same semantic restrictions, conversions, and result type as the relational operators except for their lower precedence and truth-value result.</p>\n</blockquote>\n<p>This defers the specification to that of the relational operators in 5.9; for enumerations that's specified by 5.9/5:</p>\n<blockquote>\n<p id=\"so_22609342_22609514_1\">If both operands (after conversions) are of arithmetic <strong>or enumeration</strong> type, each of the operators shall yield true if the specified relationship is true and false if it is false.</p>\n</blockquote>\n<p>So, as one might expect, the comparison operators are applicable to enumerations, comparing the numeric values.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "22609514", "Score": "6", "CreationDate": "2014-03-24T12:34:01.093", "LastActivityDate": "2014-03-24T12:34:01.093"}, "22609528": {"ParentId": "22609342", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>From the C++ Standard</p>\n<blockquote>\n<p id=\"so_22609342_22609528_0\">5.10 Equality operators [expr.eq] 1 The == (equal to) and the != (not equal to) operators group left-to-right. The operands shall have\n  arithmetic, <strong>enumeration</strong>, pointer, or pointer to member type, or\n  type std::nullptr_t. The operators == and != both yield true or false,\n  i.e., a result of type bool. In each case below, the operands shall\n  have the same type after the specified conversions have been applied.</p>\n</blockquote>\n<p>As you see enumerations independing of whether they are scoped or unscoped can be used in equality operators</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-03-24T12:39:42.363", "Id": "22609528", "Score": "2", "CreationDate": "2014-03-24T12:34:16.867", "LastActivityDate": "2014-03-24T12:39:42.363"}, "22609453": {"ParentId": "22609342", "CommentCount": "2", "Body": "<p>The WHOLE POINT of enums is an equality (and not) test. <code>int</code>s have an order, 1&lt;2, but <code>EMPTY</code> <code>WHITE</code> and <code>BLACK</code> (if you haev an Othello board say, it just so happens I was working on one 2 hours ago) is <code>WHITE</code>&gt;<code>BLACK</code>, what about <code>WHITE%EMPTY</code>, no, but the WHOLE POINT is so I can say </p>\n<pre><code>switch(board.get_square(x,y)) {\n    case Piece::WHITE:\n        magic();\n        break;\n    case Piece::BLACK:\n        whatever();\n        break;\n    default:\n }\n</code></pre>\n<p>For an <code>enum class Piece;</code> of course.</p>\n<p>case is like an equality comparison I am saying:</p>\n<pre><code>if(board.get_square(x,y) == Piece::WHITE) {\n</code></pre>\n<p>or something.</p>\n", "OwnerUserId": "2112028", "PostTypeId": "2", "Id": "22609453", "Score": "1", "CreationDate": "2014-03-24T12:31:13.000", "LastActivityDate": "2014-03-24T12:31:13.000"}, "bq_ids": {"n4140": {"so_22609342_22609528_0": {"section_id": 6154, "quality": 0.8372093023255814, "length": 36}, "so_22609342_22609514_1": {"section_id": 6153, "quality": 1.0, "length": 16}}, "n3337": {"so_22609342_22609514_0": {"section_id": 5917, "quality": 0.9473684210526315, "length": 18}, "so_22609342_22609514_1": {"section_id": 5916, "quality": 1.0, "length": 16}}, "n4659": {"so_22609342_22609528_0": {"section_id": 7651, "quality": 0.8372093023255814, "length": 36}, "so_22609342_22609514_1": {"section_id": 7650, "quality": 1.0, "length": 16}}}});