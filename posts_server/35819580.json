post_cb({"35819610": {"ParentId": "35819580", "CommentCount": "0", "Body": "<p>C++ doesn't standardize the order in which function arguments are calculated, that's why results differ from compiler to compiler. See C++ Standard, section 5.2.2/8:</p>\n<blockquote>\n<p id=\"so_35819580_35819610_0\">The order of evaluation of arguments is unspecified.</p>\n</blockquote>\n", "OwnerUserId": "5740031", "PostTypeId": "2", "Id": "35819610", "Score": "0", "CreationDate": "2016-03-05T20:37:18.903", "LastActivityDate": "2016-03-05T20:37:18.903"}, "35819580": {"CommentCount": "2", "ViewCount": "45", "PostTypeId": "1", "ClosedDate": "2016-03-05T20:43:09.220", "LastEditorUserId": "3723423", "CreationDate": "2016-03-05T20:35:04.063", "LastActivityDate": "2016-03-05T21:26:58.543", "Title": "pre increment and post increment result discrepancy in MSdos and DevC++ compiler", "LastEditDate": "2016-03-05T21:26:58.543", "Id": "35819580", "Score": "1", "Body": "<p>I am unable to understand the below issues while pre-incrementing and post-incrementing a variable inside printf:-</p>\n<p>code used in turbocpp compiler:-</p>\n<pre><code>#include&lt;stdio.h&gt;\nmain()\n{\nint i=0;\nclrscr();\nprintf(\"%d %d %d\",i,i++,++i);\ngetch();\nreturn(0);\n}\n</code></pre>\n<p>the output in MSdos Compiler is :- 2 1 1</p>\n<p>but for the same program in DevC++ 5.11 the output is:- 2 1 2</p>\n<p>1) My understanding is printf prints by taking left variable first and then moves to right.(i have verified it using 3 different variables.) So, according to that shouldn't the output be 0 0 2?</p>\n<p>2) I tried with DevC++ to check the output of the same program but it gave a different result. Now I am really confused as what should be the output.</p>\n<p>3) Also if I vary:-  printf (\"%d %d %d\", i,++i,i++); the output is 2 2 0.</p>\n<p>I am not getting what is going on here. Somebody Please help me to understand better...  </p>\n", "Tags": "<c++><c><side-effects>", "OwnerUserId": "6023314", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_35819580_35819610_0": {"section_id": 3260, "quality": 0.8, "length": 4}, "so_35819580_35819612_0": {"section_id": 5811, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_35819580_35819610_0": {"section_id": 3132, "quality": 0.8, "length": 4}, "so_35819580_35819612_0": {"section_id": 5584, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_35819580_35819612_0": {"section_id": 7272, "quality": 0.6956521739130435, "length": 16}}}, "35819612": {"ParentId": "35819580", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Having two side effects on the same variable will give you an undetermined result,  as each compiler is free to choose the order in which it evaluates the arguments. </p>\n<blockquote>\n<p id=\"so_35819580_35819612_0\"><strong>1.9/15:</strong> If a side effect on a scalar object is unsequenced relative to either another side effect on the same scalar object or a\n  value computation using the value of the same scalar object, the\n  behavior is undefined.</p>\n</blockquote>\n<p>So it could for example be:  </p>\n<ul>\n<li>0,0,1  if evaluated left to right</li>\n<li>2,1,1  if evaluated right to left</li>\n<li>2,1,2  if pre-increment is done on i and stored in i, then i is loaded as second argument and post incremented, then i is taken ans third argument (the compiler assuming that preincrement was already done), and then i is taken as first argument.  </li>\n</ul>\n<p>But other combinations could also be plausible.  And undefined behaviour means really undefined, so perhaps one day this could even crash (if one say a compiler would automatically generate parallel code and 2 cores access to the same variable in the same time) </p>\n", "OwnerUserId": "3723423", "LastEditorUserId": "3723423", "LastEditDate": "2016-03-05T21:04:01.050", "Id": "35819612", "Score": "1", "CreationDate": "2016-03-05T20:37:33.950", "LastActivityDate": "2016-03-05T21:04:01.050"}});