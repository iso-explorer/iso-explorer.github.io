post_cb({"bq_ids": {"n4140": {"so_31796511_31796615_1": {"length": 56, "quality": 0.8888888888888888, "section_id": 382}, "so_31796511_31796615_0": {"length": 19, "quality": 0.95, "section_id": 381}}, "n3337": {"so_31796511_31796615_1": {"length": 56, "quality": 0.8888888888888888, "section_id": 373}, "so_31796511_31796615_0": {"length": 19, "quality": 0.95, "section_id": 372}}, "n4659": {"so_31796511_31796615_1": {"length": 56, "quality": 0.8888888888888888, "section_id": 397}, "so_31796511_31796615_0": {"length": 18, "quality": 0.9, "section_id": 396}}}, "31796619": {"Id": "31796619", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31796511_31796619_0\">My understanding and experimenting shows that the following is not\n  undefined behavior:</p>\n</blockquote>\n<p>Well, your understanding and experimenting is wrong. Tip for the wise- don't experiment with undefined behaviour. For example, your experiment could randomly happen to indicate that it's well-defined behaviour, which is one of the possible outcomes of undefined behaviour.</p>\n<p>Using the return value of <code>get_mhurg()</code> is undefined behaviour. You are accessing the temporary <code>hurg()</code> outside the scope in which it was created.</p>\n<p>The <code>id</code> situation just goes to show that lifetime extension is fucking dumb.</p>\n<p>Specifically, lifetime extension only applies to <em>values</em> directly. It never applies to references of any kind. You must initialize the reference with a value. <code>id</code> does not return a value, so no lifetime extension is applied.</p>\n", "LastActivityDate": "2015-08-03T20:56:34.120", "Score": "4", "CreationDate": "2015-08-03T20:56:34.120", "ParentId": "31796511", "CommentCount": "0", "OwnerUserId": "298661"}, "31796615": {"Id": "31796615", "PostTypeId": "2", "Body": "<p>From [class.temporary]:</p>\n<blockquote>\n<p id=\"so_31796511_31796615_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression.\n  The first context is when a default constructor is called to initialize an element of an array [...]</p>\n<p id=\"so_31796511_31796615_1\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a sub-object to which the reference is bound persists\n  for the lifetime of the reference except:<br>\n  (5.1) \u2014 A temporary object bound to a reference parameter in a function call (5.2.2) persists until the completion\n  of the <em>full-expression</em> containing the call.<br>\n  (5.2) \u2014 The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) <strong>is not\n  extended</strong>; the temporary is destroyed at the end of the <em>full-expression</em> in the return statement.<br>\n  (5.3) \u2014 A temporary bound to a reference in a <em>new-initializer</em> (5.3.4) persists until the completion of the\n  <em>full-expression</em> containing the <em>new-initializer</em>.</br></br></br></p>\n</blockquote>\n<p>So two things. First, <code>get_mhurg</code> is undefined behavior. The lifetime of the temporary you're returning is <strong>not</strong> extended. Second, the temporary passed into <code>id</code> lasts until the end of the full-expression containing the function call, <em>but no further</em>. As with <code>get_mhurg</code>, the temporary is not through-extended. So that would also be undefined behavior. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-08-03T21:01:45.923", "Score": "6", "CreationDate": "2015-08-03T20:56:21.893", "ParentId": "31796511", "CommentCount": "0", "LastEditDate": "2015-08-03T21:01:45.923", "OwnerUserId": "2069064"}, "31796511": {"ViewCount": "124", "Body": "<p>Given:</p>\n<pre><code>struct hurg { ... };\n\nhurg get_hurg() { return hurg(); }\nhurg&amp;&amp; get_mhurg() { return hurg(); }\n</code></pre>\n<p>My understanding <a href=\"https://ideone.com/xcJpqF\" rel=\"nofollow noreferrer\">and experimenting</a> shows that the following is <em>not</em> undefined behavior (EDIT: thanks to the answers, it turns out I was wrong and the <code>get_mhurg()</code> examples <em>are</em> undefined behavior):</p>\n<pre><code>{\n    const hurg&amp; a = get_hurg(); \n    hurg&amp;&amp; b = get_hurg();\n    const hurg&amp; c = get_mhurg(); \n    hurg&amp;&amp; d = get_mhurg();\n    // do stuff with a, b, c, d\n}\n// a, b, c, d are now destructed\n</code></pre>\n<p>That is, the lifetime of the temporary <code>hurg</code> object returned by <code>get_hurg()</code> and <code>get_mhurg()</code> is extended until the end of the scope. </p>\n<p>However, in the case of (function from <a href=\"https://stackoverflow.com/questions/31272705/how-can-i-create-a-macro-which-uses-a-value-multiple-times-without-copying-it#comment50539841_31272705\">here</a>):</p>\n<pre><code>template &lt;typename T&gt;\nauto id(T&amp;&amp; x) -&gt; decltype(auto) { return decltype(x)(x); }    \n</code></pre>\n<p>Using it like:</p>\n<pre><code>{\n    const hurg&amp; x = id(hurg()); \n    // the hurg() 'x' refers to is already destructed\n\n    hurg&amp;&amp; y = id(hurg());\n    // the hurg() 'y' refers to is already destructed\n\n    // undefined behavior: use 'x' and 'y'\n}\n</code></pre>\n<p>In this case, the lifetime of the <code>hurg</code> is <em>not</em> extended. </p>\n<p>What determines when the lifetime of temporaries is extended in general? And, in particular, when is it safe to bind the result of a function to a const lvalue ref or an rvalue ref?</p>\n<p>And more specifically, what precisely is happening in the <code>id</code> case?</p>\n", "AcceptedAnswerId": "31796615", "Title": "What determines when the lifetimes of temporaries get extended into const references or rvalue references?", "CreationDate": "2015-08-03T20:50:08.470", "Id": "31796511", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:51:49.357", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-03T21:01:45.923", "Score": "3", "OwnerUserId": "15055", "Tags": "<c++><c++11><reference><rvalue-reference><lifetime>", "AnswerCount": "2"}});