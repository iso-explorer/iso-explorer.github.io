post_cb({"9057160": {"ParentId": "9057119", "CommentCount": "0", "CreationDate": "2012-01-29T21:58:25.510", "OwnerUserId": "501557", "PostTypeId": "2", "Id": "9057160", "Score": "6", "Body": "<p>The wording of the spec does not require that <code>pos</code> be less than the length of the string.  If <code>pos</code> is greater than the length of the string, then the first part of condition (1) cannot be satisfied, because if <code>pos &lt;= xpos</code>, then <code>xpos + str.size() &lt;= size()</code> can never be true.  As a result, by clause (2), the function will return <code>npos</code>.  Consequently, if the index is out of range, the behavior of the function is still perfectly well-defined.</p>\n<p>Hope this helps!</p>\n", "LastActivityDate": "2012-01-29T21:58:25.510"}, "9057119": {"CommentCount": "2", "ViewCount": "287", "PostTypeId": "1", "LastEditorUserId": "501557", "CreationDate": "2012-01-29T21:52:05.467", "LastActivityDate": "2013-10-23T01:02:27.310", "Title": "Does std::string find require that pos be less than the string size?", "AcceptedAnswerId": "9057160", "LastEditDate": "2013-10-23T01:02:27.310", "Id": "9057119", "Score": "2", "Body": "<p>Just reading 21.3.6.1 basic_string::find - and there is no mention that the pos argument be within bounds of the string itself. </p>\n<blockquote>\n<p id=\"so_9057119_9057119_0\">21.3.6.1 basic_string::find</p>\n<p id=\"so_9057119_9057119_1\">size_type find(const basic_string&amp; str,\n  size_type pos = 0) const;</p>\n<p id=\"so_9057119_9057119_2\">1 Effects: Determines the lowest position xpos, if possible, such that\n  both of the following conditions obtain:</p>\n<p id=\"so_9057119_9057119_3\">\u2014 pos &lt;= xpos and xpos + str.size() &lt;= size();</p>\n<p id=\"so_9057119_9057119_4\">\u2014 at(xpos+I) == str.at(I) for all elements I of the string controlled\n  by str.</p>\n<p id=\"so_9057119_9057119_5\">2 Returns: xpos if the function can determine such a value for xpos.\n  Otherwise, returns npos.</p>\n</blockquote>\n<p>I am reading this correctly?</p>\n", "Tags": "<c++><string><stl><stdstring>", "OwnerUserId": "990524", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9057119_9057119_4": {"section_id": 1765, "quality": 0.8571428571428571, "length": 6}, "so_9057119_9057119_5": {"section_id": 1766, "quality": 0.9090909090909091, "length": 10}, "so_9057119_9057119_2": {"section_id": 1765, "quality": 0.9090909090909091, "length": 10}, "so_9057119_9057119_1": {"section_id": 1569, "quality": 0.7142857142857143, "length": 5}, "so_9057119_9057119_3": {"section_id": 1765, "quality": 1.0, "length": 5}}, "n3337": {"so_9057119_9057119_4": {"section_id": 1759, "quality": 0.8571428571428571, "length": 6}, "so_9057119_9057119_5": {"section_id": 1760, "quality": 0.9090909090909091, "length": 10}, "so_9057119_9057119_2": {"section_id": 1759, "quality": 0.9090909090909091, "length": 10}, "so_9057119_9057119_1": {"section_id": 1565, "quality": 0.7142857142857143, "length": 5}, "so_9057119_9057119_3": {"section_id": 1759, "quality": 1.0, "length": 5}}, "n4659": {"so_9057119_9057119_4": {"section_id": 2124, "quality": 0.7142857142857143, "length": 5}, "so_9057119_9057119_5": {"section_id": 1936, "quality": 0.9090909090909091, "length": 10}, "so_9057119_9057119_2": {"section_id": 1935, "quality": 0.8181818181818182, "length": 9}, "so_9057119_9057119_1": {"section_id": 1936, "quality": 1.0, "length": 7}, "so_9057119_9057119_3": {"section_id": 2124, "quality": 1.0, "length": 5}}}});