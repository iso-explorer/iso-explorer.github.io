post_cb({"bq_ids": {"n4140": {"so_47952024_47952024_0": {"length": 4, "quality": 1.0, "section_id": 3880}, "so_47952024_47952024_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 7040}, "so_47952024_47952024_1": {"length": 4, "quality": 0.8, "section_id": 3880}, "so_47952024_47952024_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 7039}}, "n3337": {"so_47952024_47952024_0": {"length": 4, "quality": 1.0, "section_id": 3740}, "so_47952024_47952024_2": {"length": 7, "quality": 1.0, "section_id": 6785}, "so_47952024_47952024_1": {"length": 4, "quality": 0.8, "section_id": 3740}}, "n4659": {"so_47952024_47952024_0": {"length": 4, "quality": 1.0, "section_id": 4769}, "so_47952024_47952024_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 8536}, "so_47952024_47952024_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 8537}, "so_47952024_47952024_1": {"length": 4, "quality": 0.8, "section_id": 4769}}}, "47952024": {"ViewCount": "417", "Body": "<p>Consider this example from <a href=\"http://en.cppreference.com/w/cpp/language/definition\" rel=\"noreferrer\">cppreference</a>:</p>\n<pre><code>struct S { static const int x = 1; };\nvoid f() { &amp;S::x; } // discarded-value expression does not odr-use S::x\n</code></pre>\n<p>I agree that <code>&amp;S::x</code> is a <em>discarded-value expression</em>, since the standard says (9.2, paragraph 1 [stmt.expr] from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4700.pdf\" rel=\"noreferrer\">n4700</a>)</p>\n<blockquote>\n<p id=\"so_47952024_47952024_0\">Expression statements have the form</p>\n<pre><code>expression-statement:\n    expression_opt ;\n</code></pre>\n<p id=\"so_47952024_47952024_1\">The expression is a discarded-value expression (Clause 8)...</p>\n</blockquote>\n<p>However, is that enough for <code>S::x</code> to not be <em>odr-used</em>? 6.2, paragraph 3 [basic.def.odr] states</p>\n<blockquote>\n<p id=\"so_47952024_47952024_2\">A variable <code>x</code> whose name appears as a potentially-evaluated expression <code>ex</code> is <em>odr-used</em> by <code>ex</code> unless</p>\n<ul>\n<li>...</li>\n<li>if <code>x</code> is an object, <strong><code>ex</code> is an element of the set of potential results of an expression <code>e</code></strong>, where either\n  \n  <ul>\n<li>the lvalue-to-rvalue conversion (7.1) is applied to <code>e</code>, or</li>\n<li><strong><code>e</code> is a discarded-value expression (Clause 8)</strong>.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>The problem is that the discarded-value expression <code>&amp;S::x</code> has no potential results (which means that <code>S::x</code> is not a potential result of <code>&amp;S::x</code>), as you can see from 6.2, paragraph 2 [basic.def.odr]:</p>\n<blockquote>\n<p id=\"so_47952024_47952024_3\">... The set of potential results of an expression <code>e</code> is defined as follows:</p>\n<ul>\n<li>If <code>e</code> is an id-expression (8.1.4), the set contains only <code>e</code>.</li>\n<li>If <code>e</code> is a subscripting operation (8.2.1) with an array operand, the set contains the potential results of that operand.</li>\n<li>...</li>\n<li><strong>Otherwise, the set is empty.</strong></li>\n</ul>\n</blockquote>\n<p>Then, how can you explain that <code>S::x</code> is not odr-used?</p>\n", "Title": "Why is S::x not odr-used?", "CreationDate": "2017-12-23T11:18:40.137", "LastActivityDate": "2018-02-07T16:00:03.697", "CommentCount": "2", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2017-12-23T15:55:03.517", "LastEditorUserId": "5645940", "Id": "47952024", "Score": "16", "OwnerUserId": "5645940", "Tags": "<c++><language-lawyer><c++17>", "AnswerCount": "0"}});