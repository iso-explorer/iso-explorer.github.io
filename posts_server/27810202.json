post_cb({"27810202": {"CommentCount": "0", "ViewCount": "120", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-01-07T01:43:47.807", "LastActivityDate": "2016-03-18T11:22:23.750", "Title": "nontype template parameter produced with decltype for function", "AcceptedAnswerId": "27810260", "LastEditDate": "2016-03-18T11:22:23.750", "Id": "27810202", "Score": "3", "Body": "<p>I want to replace writing function signature with decltype, and found out it does not compile with most compilers. Is it a new feature or maybe unspecified behaviour?</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T, T nontype&gt;\nstruct CL {\n    void call() { nontype(123); }\n};\n\nvoid f(int n) {\n    std::cout &lt;&lt; n &lt;&lt; std::endl;\n}\nCL&lt;void(*)(int), f&gt; cl7;\n\nusing df = decltype(f);\nCL&lt;df, f&gt; cl8; // &lt;&lt; error\n\nint main() {\n    cl8.call();\n}\n</code></pre>\n<p>so (not really sure about compiler versions):</p>\n<p>clang - 3.4\n<a href=\"http://rextester.com/UOIV91915\" rel=\"nofollow\">http://rextester.com/UOIV91915</a></p>\n<p>compiles, runs, produces output</p>\n<p>g++ 4.9+\n<a href=\"http://coliru.stacked-crooked.com/a/dbec1e202c48fd81\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/dbec1e202c48fd81</a></p>\n<pre><code>main.cpp:14:9: error: 'void(int)' is not a valid type for a template non-type parameter\n CL&lt;df, f&gt; cl8; // &lt;&lt; error\n         ^\nmain.cpp:14:14: error: invalid type in declaration before ';' token\n CL&lt;df, f&gt; cl8; // &lt;&lt; error\n              ^\nmain.cpp: In function 'int main()':\nmain.cpp:17:6: error: request for member 'call' in 'cl8', which is of non-class type 'int'\n  cl8.call();\n</code></pre>\n<p>Visual Studio 2013 - update 4</p>\n<pre><code>fatal error C1001: An internal error has occurred in the compiler.\n</code></pre>\n", "Tags": "<c++><templates><language-lawyer><decltype>", "OwnerUserId": "471160", "AnswerCount": "1"}, "27810260": {"ParentId": "27810202", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Non-type template parameters cannot have function type. They can have pointer to function type, and there is a paragraph in the standard that somehow implies that your code is correct - [temp.param]/8:</p>\n<blockquote>\n<p id=\"so_27810202_27810260_0\">A non-type template-parameter of type \u201carray of <code>T</code>\u201d or \u201cfunction\n  returning <code>T</code>\u201d is adjusted to be of type \u201cpointer to <code>T</code>\u201d or \u201cpointer to\n  function returning <code>T</code>\u201d, respectively.</p>\n</blockquote>\n<p>However, it is not clear whether this is done after template argument substitution or before it, which is covered <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1444\" rel=\"nofollow\"><strong>in this defect report</strong></a>. An easy fix is to simply write</p>\n<pre><code>using df = decltype(&amp;f);\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1355f01c100b14d7\" rel=\"nofollow\"><strong>Demo</strong></a>.</p>\n<hr>\n<h3>Why does <code>using df = decltype((f));</code> work?</h3>\n<p>[dcl.type.simple]/4:</p>\n<blockquote>\n<p id=\"so_27810202_27810260_1\">For an expression <code>e</code>, the type denoted by <code>decltype(e)</code> is defined as\n  follows:</p>\n<ul>\n<li>if <code>e</code> is an <strong>unparenthesized <em>id-expression</em></strong> or an unparenthesized class member access (5.2.5), <code>decltype(e)</code> is the type of the entity\n  named by <code>e</code>. If there is no such entity, or if e names a set of\n  overloaded functions, the program is ill-formed;</li>\n<li>otherwise, if <code>e</code> is an xvalue, <code>decltype(e)</code> is <code>T&amp;&amp;</code>, where <code>T</code> is the type of <code>e</code>;</li>\n<li>otherwise, <strong>if <code>e</code> is an lvalue, <code>decltype(e)</code> is <code>T&amp;</code>, where <code>T</code> is the type of <code>e</code>;</strong></li>\n<li>otherwise, <code>decltype(e)</code> is the type of <code>e</code>.</li>\n</ul>\n</blockquote>\n<p><code>(f)</code> is parenthesized and an lvalue, thus <code>decltype((f))</code> is an lvalue reference to <code>f</code>'s function type - <code>void(&amp;)(int)</code>. Template parameters can have reference to function type, thus it works. However, as this fact is quite counterintuitive (and not so well known), <code>decltype(&amp;f)</code> should be less irritative in your code.</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-01-07T02:03:46.813", "Id": "27810260", "Score": "5", "CreationDate": "2015-01-07T01:51:00.523", "LastActivityDate": "2015-01-07T02:03:46.813"}, "bq_ids": {"n4140": {"so_27810202_27810260_0": {"section_id": 61, "quality": 1.0, "length": 13}, "so_27810202_27810260_1": {"section_id": 5440, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_27810202_27810260_0": {"section_id": 56, "quality": 1.0, "length": 13}, "so_27810202_27810260_1": {"section_id": 5235, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_27810202_27810260_0": {"section_id": 63, "quality": 0.6153846153846154, "length": 8}, "so_27810202_27810260_1": {"section_id": 6867, "quality": 0.8571428571428571, "length": 6}}}});