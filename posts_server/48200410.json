post_cb({"48200410": {"ViewCount": "87", "Body": "<p>I'm going through the BSON source code, and came across something I've never seen before.</p>\n<p><a href=\"https://github.com/mongodb/mongo-c-driver/blob/master/src/libbson/src/bson/bson-macros.h#L22\" rel=\"nofollow noreferrer\">Line 22 in bson-macros.h</a>:</p>\n<pre><code>#if !defined(BSON_INSIDE) &amp;&amp; !defined(BSON_COMPILATION)\n#error \"Only &lt;bson.h&gt; can be included directly.\"\n#endif\n</code></pre>\n<p>What is the <code>defined(XXXX)</code> macro above? I can guess what it does, but I can't seem to find any documentation about it. Is it specific to some compilers? It gives me a W4 warning on Microsoft Visual C++ (that I'm trying to resolve in my project).</p>\n", "AcceptedAnswerId": "48200432", "Title": "defined(XXXX) macro in C/C++?", "CreationDate": "2018-01-11T05:38:39.600", "LastActivityDate": "2018-01-11T06:11:58.713", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-01-11T06:11:58.713", "LastEditorUserId": "885287", "Id": "48200410", "Score": "-2", "OwnerUserId": "885287", "Tags": "<c++><c><operators><defined>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_48200410_48200432_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 497}, "so_48200410_48200432_0": {"length": 21, "quality": 0.875, "section_id": 497}}, "n3337": {"so_48200410_48200432_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 488}, "so_48200410_48200432_0": {"length": 21, "quality": 0.875, "section_id": 488}}, "n4659": {"so_48200410_48200432_2": {"length": 15, "quality": 0.8333333333333334, "section_id": 513}, "so_48200410_48200432_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 512}}}, "48200432": {"Id": "48200432", "PostTypeId": "2", "Body": "<p>From <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.10.1p1\" rel=\"nofollow noreferrer\">6.10.1</a></p>\n<blockquote>\n<p id=\"so_48200410_48200432_0\">The expression that controls conditional inclusion shall be an integer\n  constant expression except that: identifiers (including those\n  lexically identical to keywords) are interpreted as described\n  below;166) and it may contain unary operator expressions of the form</p>\n<pre><code>  defined identifier\n</code></pre>\n<p id=\"so_48200410_48200432_1\">or</p>\n<pre><code>  defined ( identifier )\n</code></pre>\n<p id=\"so_48200410_48200432_2\"><em>which evaluate to 1 if the identifier is currently defined as a macro\n  name</em> (that is, if it is predefined or if it has been the subject of a\n  <code>#define</code> preprocessing directive without an intervening <code>#undef</code> directive with the same subject identifier), 0 if it is not.</p>\n</blockquote>\n<p>It is not <code>macro</code> - it is an operator. </p>\n", "LastActivityDate": "2018-01-11T05:41:18.783", "Score": "4", "CreationDate": "2018-01-11T05:41:18.783", "ParentId": "48200410", "CommentCount": "3", "OwnerUserId": "3796113"}});