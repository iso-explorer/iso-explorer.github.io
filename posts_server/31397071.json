post_cb({"31397071": {"CommentCount": "2", "ViewCount": "54", "CreationDate": "2015-07-14T03:23:07.327", "LastActivityDate": "2015-07-14T03:43:24.877", "Title": "c++ Defining static class function", "AcceptedAnswerId": "31397245", "PostTypeId": "1", "Id": "31397071", "Score": "1", "Body": "<p>I have this c++ code:</p>\n<pre><code>static class UEnum* EViewModeIndex_StaticEnum()\n{\n    static class UEnum* Singleton = NULL;\n    if (!Singleton)\n    {\n        ...\n    }\nreturn Singleton;\n}\n</code></pre>\n<p>This code is part of a game engine which compiles and runs correctly. However, I do not understand the meaning of \"class\" in the first and third line.</p>\n", "Tags": "<c++><function><class>", "OwnerUserId": "5113377", "AnswerCount": "2"}, "31397124": {"ParentId": "31397071", "CommentCount": "0", "Body": "<p>It's a <code>static</code> function. <code>class</code> is with <code>UEnum</code>. The return type of this static function is <code>class UEnum*</code>. But usually, we don't write class here. So it's equvalient to <code>static UEnum* EViewModeIndex_StaticEnum()</code></p>\n", "OwnerUserId": "700650", "PostTypeId": "2", "Id": "31397124", "Score": "3", "CreationDate": "2015-07-14T03:29:15.163", "LastActivityDate": "2015-07-14T03:29:15.163"}, "bq_ids": {"n4140": {"so_31397071_31397245_2": {"section_id": 5857, "quality": 0.9523809523809523, "length": 40}}, "n3337": {"so_31397071_31397245_2": {"section_id": 5627, "quality": 0.9523809523809523, "length": 40}}, "n4659": {"so_31397071_31397245_2": {"section_id": 7336, "quality": 0.9523809523809523, "length": 40}}}, "31397245": {"ParentId": "31397071", "CommentCount": "1", "Body": "<p>When you have a <code>class A</code>, you can use <code>class A</code> to declare a variable, a return type, or an argument type. That is the same as using just <code>A</code> for the same purpose. Under those circumstances, use of <code>class</code> is redundant but legal.</p>\n<pre><code>class A\n{\n   // ...\n};\n\nvoid foo()\n{\n   // Create an instance of A using the simple syntax.\n   A f1;\n\n   // Create an instance of A using the redundant class keyword\n   // Use of class is redundant but legal.\n   class A f2;\n}\n</code></pre>\n<p>However, in some cases, it is necessary to use the <code>class/struct</code> keyword to disambiguate a function of the same name from a <code>class/struct</code> name.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_31397071_31397245_0\"><strong>9.1 Class names</strong></p>\n<p id=\"so_31397071_31397245_1\">...</p>\n<p id=\"so_31397071_31397245_2\">A class declaration introduces the class name into the scope where it is declared and hides any class, variable, function, or other declaration of that name in an enclosing scope (3.3). If a class name is declared in a scope where a variable, function, or enumerator of the same name is also declared, then when both declarations are in scope, the class can be referred to only using an elaborated-type-specifier (3.4.4). [ <em>Example:</em></p>\n<pre><code>struct stat {\n     // ...\n  };\n\n stat gstat;   // use plain stat to\n               // define variable\n\n int stat(struct stat*);   // redeclare stat as function\n void f() {\n   struct stat* ps;        // struct prefix needed\n                           // to name struct stat\n   stat(ps);               // call stat()\n}\n</code></pre>\n<p id=\"so_31397071_31397245_3\"><em>\u2014 end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "31397245", "Score": "3", "CreationDate": "2015-07-14T03:43:24.877", "LastActivityDate": "2015-07-14T03:43:24.877"}});