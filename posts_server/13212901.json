post_cb({"13212921": {"Id": "13212921", "PostTypeId": "2", "Body": "<p><code>return</code>, <code>return 0</code> and <code>return NULL</code> are <em>not</em> the same.</p>\n<p><code>return</code> is only valid with functions returning <code>void</code>, e.g.:</p>\n<pre><code>void func(...);\n</code></pre>\n<p><code>return 0</code> is for functions returning some <code>int</code> type, e.g.:</p>\n<pre><code>unsigned long func(...);\n</code></pre>\n<p>although it works with floating point types as well:</p>\n<pre><code>double func(...) { ... return 0; }\n</code></pre>\n<p><code>return NULL</code> is for functions returning some <code>pointer</code> type, e.g.:</p>\n<pre><code>Something *func(...);\n</code></pre>\n", "LastEditorUserId": "1741542", "LastActivityDate": "2012-11-03T20:29:58.553", "Score": "0", "CreationDate": "2012-11-03T19:56:25.870", "ParentId": "13212901", "CommentCount": "0", "OwnerUserId": "1741542", "LastEditDate": "2012-11-03T20:29:58.553"}, "13212916": {"Id": "13212916", "PostTypeId": "2", "Body": "<p><code>return</code> with no expression works only if your function is declared <code>void</code>, in a constructor, or in a destructor. If you try to return nothing from a function that returns an <code>int</code>, a <code>double</code>, etc., your program will not compile:</p>\n<blockquote>\n<p id=\"so_13212901_13212916_0\">error: return-statement with no value, in function returning \u2018int\u2019</p>\n</blockquote>\n<p>According to \u00a76.6.3/2 of C++11:</p>\n<blockquote>\n<p id=\"so_13212901_13212916_1\">A return statement with neither an expression nor a braced-init-list can be used only in functions that do not return a value, that is, a function with the return type void, a constructor (12.1), or a destructor (12.4).</p>\n</blockquote>\n<p>(thanks sftrabbit for the excellent comment).</p>\n", "LastActivityDate": "2012-11-03T19:55:54.070", "CommentCount": "4", "CreationDate": "2012-11-03T19:55:54.070", "ParentId": "13212901", "Score": "6", "OwnerUserId": "335858"}, "13212912": {"Id": "13212912", "PostTypeId": "2", "Body": "<p>It works like a void function, where the return will simply exit the function and return nothing at all. This has been <a href=\"https://stackoverflow.com/questions/9583721/c-return-without-value\">asked before</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-03T19:55:33.937", "Score": "0", "CreationDate": "2012-11-03T19:55:33.937", "ParentId": "13212901", "CommentCount": "0", "OwnerUserId": "1776131", "LastEditDate": "2017-05-23T12:25:54.580"}, "bq_ids": {"n4140": {"so_13212901_13212916_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3913}, "so_13212901_13212950_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 7008}}, "n3337": {"so_13212901_13212916_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3773}, "so_13212901_13212950_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6754}}, "n4659": {"so_13212901_13212950_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 8505}}}, "13212901": {"ViewCount": "15998", "Body": "<p>my question is <code>return;</code> the same as <code>return NULL;</code> in C++? </p>\n<p>I understand that in C++, <code>return NULL;</code> is the same as <code>return 0;</code> in the context of pointers. Obviously for integers, this is not the case as NULL cannot be added, subtracted, etc. And that it is encouraged by some to use 0 instead of NULL for pointers because it is more convenient for portability. I'm curious if this is another instance where an equivalence occurs.</p>\n<p>I suspect that they are equivalent because <code>return;</code> is saying return 'nothing' and NULL is 'nothing.' However, if someone can either confirm or deny this (with explanation, of course), I would be very grateful! </p>\n", "AcceptedAnswerId": "13212950", "Title": "In C++, is \"return;\" the same thing as \"return NULL;\"?", "CreationDate": "2012-11-03T19:53:36.043", "Id": "13212901", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-11-04T00:30:25.233", "Score": "6", "OwnerUserId": "1608786", "Tags": "<c++><null><return>", "AnswerCount": "5"}, "13212939": {"Id": "13212939", "PostTypeId": "2", "Body": "<p>There is a difference in the resulting machine code:</p>\n<p><code>return</code> will just put the instruction pointer back to where the caller came from.</p>\n<p><code>return 0</code> or <code>return NULL</code> will put <code>0</code> on the stack, and <strong>then</strong> put the instruction pointer back to where the caller came from. (In C, <code>NULL</code> is usually mapped to <code>0</code>, although that can (may?) differ in different implementations. In C++, <code>NULL</code> is not supposed to be used).</p>\n", "LastActivityDate": "2012-11-03T19:58:19.520", "CommentCount": "0", "CreationDate": "2012-11-03T19:58:19.520", "ParentId": "13212901", "Score": "0", "OwnerUserId": "1145666"}, "13212950": {"Id": "13212950", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13212901_13212950_0\">is <code>return;</code> the same as <code>return NULL;</code> in C++?</p>\n</blockquote>\n<p>No.</p>\n<p><code>return</code> is used to \"break\" out from a function that has no return value, i.e. a return type of <code>void</code>.</p>\n<p><code>return NULL</code> returns the value <code>NULL</code>, and the return type of the function it's found in must be compatible with <code>NULL</code>.</p>\n<hr>\n<blockquote>\n<p id=\"so_13212901_13212950_1\">I understand that in C++, <code>return NULL;</code> is the same as <code>return 0;</code> in the context of pointers.</p>\n</blockquote>\n<p>Sort of. <code>NULL</code> may not be equivalent to <code>0</code>, but it will at least convert to something that is.</p>\n<hr>\n<blockquote>\n<p id=\"so_13212901_13212950_2\">Obviously for integers, this is not the case as NULL cannot be added, subtracted, etc.</p>\n</blockquote>\n<p>You can perform addition and subtraction to pointers just fine. However, <code>NULL</code> must have integral type (4.10/1 and 18.1/4 in C++03) anyway so it's moot. <code>NULL</code> may very well be a macro that expands to <code>0</code> or <code>0UL</code>.</p>\n<p>Some modern compilers will at least warn you if it was actually <code>NULL</code> you wrote, though.</p>\n<hr>\n<blockquote>\n<p id=\"so_13212901_13212950_3\">And that it is encouraged by some to use 0 instead of NULL for pointers because it is more convenient for portability. I'm curious if this is another instance where an equivalence occurs.</p>\n</blockquote>\n<p>No. And I disagree with this advice. Though I can see where it's coming from, since <code>NULL</code>'s exact definition varies across implementations, using <code>NULL</code> will make it <em>much</em> easier to replace with <code>nullptr</code> when you switch to C++11, and if nothing else is self-documenting.</p>\n</hr></hr></hr>", "LastEditorUserId": "560648", "LastActivityDate": "2012-11-04T00:30:25.233", "Score": "11", "CreationDate": "2012-11-03T19:59:38.053", "ParentId": "13212901", "CommentCount": "7", "OwnerUserId": "560648", "LastEditDate": "2012-11-04T00:30:25.233"}});