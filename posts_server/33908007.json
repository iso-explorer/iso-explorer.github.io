post_cb({"33908126": {"ParentId": "33908007", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-11-25T03:41:29.767", "Score": "0", "LastEditorUserId": "5597738", "LastEditDate": "2015-11-25T03:46:46.560", "Id": "33908126", "OwnerUserId": "5597738", "Body": "<p>If this is all your code is doing, it does not appear that it should crash when run.  I suppose it also depends on your definition of 'crash'.  If you mean the program stops running, then it crashes - the entire purpose of <code>assert()</code> is to stop running when the assertion fails.  If you mean you get a segfault or something else, then it should not crash.  I created a simple program to try and duplicate your issue:</p>\n<pre><code>#include &lt;assert.h&gt;\n\nint main() {\n    int a = 5;\n    assert(a != 5);\n    return 0;\n}\n</code></pre>\n<p>I compiled with:\n    g++ assert.cpp</p>\n<p>...and ran the resulting program, which showed:</p>\n<blockquote>\n<p id=\"so_33908007_33908126_0\">Assertion failed: (a != 5), function main, file assert.cpp, line 5.</p>\n<p id=\"so_33908007_33908126_1\">Abort trap: 6</p>\n</blockquote>\n<p>So it may be another problem with your program or it may be something related to your development environment.</p>\n", "LastActivityDate": "2015-11-25T03:46:46.560"}, "33908071": {"ParentId": "33908007", "CommentCount": "5", "Body": "<p>It is right.</p>\n<p>Because if the argument expression in assert function is false, a message is written to the standard error device and abort is called, terminating the program execution.</p>\n<p><a href=\"http://www.cplusplus.com/reference/cassert/assert/\" rel=\"nofollow\">enter link description here</a></p>\n", "OwnerUserId": "5582108", "PostTypeId": "2", "Id": "33908071", "Score": "0", "CreationDate": "2015-11-25T03:35:03.383", "LastActivityDate": "2015-11-25T03:35:03.383"}, "33908050": {"ParentId": "33908007", "CommentCount": "2", "Body": "<p>If whatever you are asserting is not true then you will crash.  If you had said a=4 or assert(a==5) then you'd be fine.  Mind you this is only a debug function.</p>\n", "OwnerUserId": "2780640", "PostTypeId": "2", "Id": "33908050", "Score": "1", "CreationDate": "2015-11-25T03:32:38.410", "LastActivityDate": "2015-11-25T03:32:38.410"}, "33908007": {"CommentCount": "4", "ViewCount": "1056", "ClosedDate": "2016-06-19T13:46:49.930", "CreationDate": "2015-11-25T03:28:32.417", "LastActivityDate": "2016-06-19T06:59:52.767", "Title": "Function assert() crash in C++", "PostTypeId": "1", "Id": "33908007", "Score": "-4", "Body": "<p>i just read some posts tell about assert. Inside ,i see paragraph code : </p>\n<pre><code>int a = 5;\nassert(a!=5); // crashing\n</code></pre>\n<p>But i don't understand why it crash :) Can anyone explain to me.\nThank you very much !</p>\n", "Tags": "<c++><assert>", "OwnerUserId": "5531912", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_33908007_33908091_3": {"section_id": 2572, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_33908007_33908091_3": {"section_id": 2537, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_33908007_33908091_3": {"section_id": 3308, "quality": 0.7142857142857143, "length": 5}}}, "33908091": {"ParentId": "33908007", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-11-25T03:37:25.570", "Score": "2", "LastEditorUserId": "14860", "LastEditDate": "2015-11-25T08:56:59.527", "Id": "33908091", "OwnerUserId": "14860", "Body": "<p>It crashes because that's exactly what it's <em>intended</em> to do. You should read the <code>assert</code> line as:</p>\n<blockquote>\n<p id=\"so_33908007_33908091_0\">Assert that <code>a</code> doesn't equal five.</p>\n</blockquote>\n<p>In other words, if it <em>does</em> equal five, your assertion has failed and an error is raised.</p>\n<p>For example, from the C11 standard<sup>(a)</sup>, <code>7.2.1.1 The assert macro /2</code> (my emphasis):</p>\n<blockquote>\n<p id=\"so_33908007_33908091_1\">The <code>assert</code> macro puts diagnostic tests into programs; it expands to a void expression. When it is executed, if expression (which shall have a scalar type) is false (that is, compares equal to 0), the <code>assert</code> macro writes information about the particular call that failed (including the text of the argument, the name of the source file, the source line number, and the name of the enclosing function - the latter are respectively the values of the preprocessing macros <code>__FILE__</code> and <code>__LINE__</code> and of the identifier <code>__func__</code>) on the standard error stream in an implementation-defined format.</p>\n<p id=\"so_33908007_33908091_2\"><strong><em>It then calls the <code>abort</code> function.</em></strong></p>\n</blockquote>\n<p>I'm not actually a big fan of assertions myself in most cases, for the following reasons.</p>\n<p>First, assertions tend to only be enabled for debug code because it's the <code>NDEBUG</code> preprocessor macro that controls it and this is often set differently between debug and release code. Hence, assertions tend to be limited in usefulness only during development.</p>\n<p>Secondly, even if it <em>does</em> assert in release code, the effects of the assertion are not something your users should be seeing. It would be preferable to fail gracefully rather than exit the program.</p>\n<p>They <em>are</em> somewhat useful during the development process but, any failed assertion during development should be an instant blocker to releasing the code into production until you've put in some more decent error handling for it.</p>\n<p>That's because the assertion either won't be tested in release code (and results will likely be catastrophic) or you'll have assertions on in the release code (and your program will summarily abort. That's going to result in some fairly frank discussions with your customers :-)</p>\n<hr>\n<p><sup>(a)</sup> Yes, I <em>know</em> this is a C++ question but C++ mostly defers to C with the heritage headers such as <code>cassert</code>. From C++14 <code>19.3 Assertions /2</code>:</p>\n<blockquote>\n<p id=\"so_33908007_33908091_3\">The contents are the same as the Standard C library header <code>&lt;assert.h&gt;</code>.</p>\n</blockquote>\n<p>I'm also aware that C++14 references C99 rather than C11 but the assertion stuff hasn't changed for a long while.</p>\n</hr>", "LastActivityDate": "2015-11-25T08:56:59.527"}});