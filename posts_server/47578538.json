post_cb({"47579547": {"ParentId": "47578538", "CommentCount": "0", "Body": "<p>According to <a href=\"http://eel.is/c++draft/intro.memory\" rel=\"nofollow noreferrer\">c++draft</a> :</p>\n<blockquote>\n<p id=\"so_47578538_47579547_0\">3 <strong>A\u00a0memory location\u00a0is either an object of scalar type or a maximal\n  sequence of adjacent bit-fields all having nonzero\n  width.</strong>[\u2009Note:\u00a0Various features of the language, such as references and\n  virtual functions, might involve additional memory locations that are\n  not accessible to programs but are managed by the implementation.\u2014\u2009end\n  note\u2009]Two or more threads of execution ([intro.multithread]) can\n  access separate memory locations without interfering with each other.</p>\n</blockquote>\n", "OwnerUserId": "6935629", "PostTypeId": "2", "Id": "47579547", "Score": "0", "CreationDate": "2017-11-30T17:44:01.913", "LastActivityDate": "2017-11-30T17:44:01.913"}, "47578650": {"ParentId": "47578538", "CommentCount": "7", "Body": "<p>Obviously, to consume less memory working with bitwise operations. That may be significant for embedded programming, for example.</p>\n<p>You can also use <code>std::vector&lt;bool&gt;</code> which can (and usually does) have bitfield implementation.</p>\n", "OwnerUserId": "4117097", "PostTypeId": "2", "Id": "47578650", "Score": "1", "CreationDate": "2017-11-30T16:56:16.650", "LastActivityDate": "2017-11-30T16:56:16.650"}, "47578852": {"ParentId": "47578538", "PostTypeId": "2", "CommentCount": "1", "Body": "<pre><code>Multiple adjacent bit fields are usually packed together (although this behavior is implementation-defined)\n</code></pre>\n<p>If you want compiler to not add padding or perform structure alignment during multiple bit field allocation you can compile them in a single variable.</p>\n<pre><code>struct x\n{\n  unsigned char b1 : 4;  // compiler will add padding after this. adding to the structure size.\n  unsigned char b2 : 3; // compiler will add padding here too!  sizeof(x) is 2.\n}\n\n\nstruct y\n{\n    unsigned char b1 : 4, : 3;   // padding will be added only once.  sizeof(y) is 1\n}\n</code></pre>\n<p>Or if you want to allocate bigger bit field in a single variable</p>\n<pre><code>struct x\n{\n    unsigned char b1 :9;   //warning: width of 'x::b1' exceeds its type\n};\n\n\nstruct y\n{\n    unsigned char b1 :6, :3;   //no warning\n};\n</code></pre>\n", "OwnerUserId": "2427022", "LastEditorUserId": "2427022", "LastEditDate": "2017-11-30T17:30:16.850", "Id": "47578852", "Score": "0", "CreationDate": "2017-11-30T17:04:59.587", "LastActivityDate": "2017-11-30T17:30:16.850"}, "bq_ids": {"n4140": {"so_47578538_47579547_0": {"section_id": 5787, "quality": 0.8936170212765957, "length": 42}}, "n3337": {"so_47578538_47579547_0": {"section_id": 5560, "quality": 0.8936170212765957, "length": 42}}, "n4659": {"so_47578538_47579547_0": {"section_id": 7244, "quality": 0.8936170212765957, "length": 42}}}, "47578538": {"CommentCount": "6", "ViewCount": "61", "PostTypeId": "1", "LastEditorUserId": "6935629", "CreationDate": "2017-11-30T16:49:51.893", "LastActivityDate": "2017-11-30T17:50:56.830", "Title": "Multiple adjacent bit fields in C++", "FavoriteCount": "1", "LastEditDate": "2017-11-30T17:50:56.830", "Id": "47578538", "Score": "1", "Body": "<p>I saw multiple adjacent bit fields while bbrowsing <a href=\"http://en.cppreference.com/w/cpp/language/bit_field\" rel=\"nofollow noreferrer\">cppreference</a>.</p>\n<pre><code>unsigned char b1 : 3, : 2, b2 : 6, b3 : 2;\n</code></pre>\n<p>So,</p>\n<ul>\n<li><p>What is the purpose of it?</p></li>\n<li><p>When and where should I use it?</p></li>\n</ul>\n", "Tags": "<c++><structure><bit-fields>", "OwnerUserId": "6935629", "AnswerCount": "3"}});