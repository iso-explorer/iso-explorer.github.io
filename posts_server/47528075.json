post_cb({"47528556": {"ParentId": "47528075", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>ISO C++: 11.1 Access Specifiers</p>\n<blockquote>\n<p id=\"so_47528075_47528556_0\">5 [Note: In a derived class, the lookup of a base class name will \ufb01nd the injected-class-name instead of the name of the base class in the scope in which it was declared. The injected-class-name might be less accessible than the name of the base class in the scope in which it was declared. \u2014end note] </p>\n</blockquote>\n<p>And the example from the standard:</p>\n<pre><code>class A { };\nclass B : private A { };\nclass C : public B {\n    A* p; // error: injected-class-name A is inaccessible\n   ::A* q; // OK \n};\n</code></pre>\n<hr>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"noreferrer\">N3797 Working Draft, Standard for Programming Language C++</a></p>\n</hr>", "OwnerUserId": "8918119", "LastEditorUserId": "8918119", "LastEditDate": "2017-11-28T10:05:55.550", "Id": "47528556", "Score": "13", "CreationDate": "2017-11-28T09:55:38.680", "LastActivityDate": "2017-11-28T10:05:55.550"}, "47528075": {"CommentCount": "2", "AcceptedAnswerId": "47528147", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2017-11-28T09:30:42.753", "LastActivityDate": "2017-11-28T14:10:04.960", "LastEditDate": "2017-11-28T14:10:04.960", "ViewCount": "1181", "FavoriteCount": "3", "Title": "No use of base object allowed in private inheritance", "Id": "47528075", "Score": "16", "Body": "<p>I am using <em>private</em> inheritance, and I am surprised to see that in the derived class use of any <em>base</em> object is not allowed.</p>\n<pre><code>class A;\nclass B : private A;\nclass C : public B;\n\nC::method_1()\n{\n    A* a; // Temporary \"A\" object for local computation\n}\n</code></pre>\n<p><strong>This has nothing to do with inheritance.</strong> I don't want to access any <code>this-&gt;base method</code>!</p>\n<p>This configuration provide a C2247 error in Visual Studio (\" 'A' not accessible, because 'B' use 'private' to inherit from 'A' \").</p>\n", "Tags": "<c++><oop><inheritance>", "OwnerUserId": "9019090", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47528075_47528556_0": {"section_id": 6677, "quality": 0.8387096774193549, "length": 26}, "so_47528075_47528147_1": {"section_id": 6677, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_47528075_47528556_0": {"section_id": 6432, "quality": 0.8387096774193549, "length": 26}, "so_47528075_47528147_1": {"section_id": 6432, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_47528075_47528556_0": {"section_id": 8152, "quality": 0.8387096774193549, "length": 26}, "so_47528075_47528147_1": {"section_id": 8152, "quality": 0.9642857142857143, "length": 27}}}, "47528147": {"ParentId": "47528075", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Change this:</p>\n<pre><code>A* a;\n</code></pre>\n<p>to this:</p>\n<pre><code>::A* a;\n</code></pre>\n<p>since <code>C</code> inherits from <code>B</code>, and <code>B</code> from <code>A</code>, thus you need the scope resolution operator to do the trick.</p>\n<p>Instead of starting at the local scope which includes the class parents, <code>::A</code> starts looking at the global scope because of the <code>::</code>. </p>\n<p>From the <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4567.pdf\" rel=\"noreferrer\">Standard</a>:</p>\n<blockquote>\n<p id=\"so_47528075_47528147_0\"><strong>11.1.5 Acess Specifiers</strong></p>\n<p id=\"so_47528075_47528147_1\">In a derived class, the lookup of a base class name will find the\n  injected-class-name instead of the name of the base class in the scope\n  in which it was declared. The injected-class-name might be less\n  accessible than the name of the base class in the scope in which it\n  was declared.</p>\n</blockquote>\n", "OwnerUserId": "2411320", "LastEditorUserId": "2411320", "LastEditDate": "2017-11-28T10:25:01.833", "Id": "47528147", "Score": "22", "CreationDate": "2017-11-28T09:35:31.073", "LastActivityDate": "2017-11-28T10:25:01.833"}});