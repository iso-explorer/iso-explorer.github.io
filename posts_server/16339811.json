post_cb({"16339811": {"CommentCount": "1", "ViewCount": "75", "CreationDate": "2013-05-02T13:51:20.750", "LastActivityDate": "2013-05-02T14:16:31.883", "Title": "2 statements creating objects with regular new expression, any difference?", "AcceptedAnswerId": "16340318", "PostTypeId": "1", "Id": "16339811", "Score": "1", "Body": "<p>Consider the following class with a user-defined default ctor.</p>\n<pre><code>class TestClass {\npublic:\n    TestClass()\n    :data_(999) {\n    }\n    double getData() const {\n        return data_;\n    }\n\nprivate:\n    double data_;\n};\n</code></pre>\n<p>Then we create objects:</p>\n<pre><code>TestClass *p2 = new TestClass();\nTestClass *p1 = new TestClass;\n</code></pre>\n<p>Any difference for using the 2 statements above in any condition?</p>\n<p>Thank you,</p>\n", "Tags": "<c++><creation>", "OwnerUserId": "2343045", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16339811_16340318_3": {"section_id": 3286, "quality": 1.0, "length": 20}, "so_16339811_16340318_4": {"section_id": 3287, "quality": 0.7560975609756098, "length": 31}, "so_16339811_16340318_0": {"section_id": 6098, "quality": 1.0, "length": 23}, "so_16339811_16340318_2": {"section_id": 3285, "quality": 0.9807692307692307, "length": 51}}, "n3337": {"so_16339811_16340318_3": {"section_id": 3156, "quality": 1.0, "length": 20}, "so_16339811_16340318_4": {"section_id": 3157, "quality": 0.975609756097561, "length": 40}, "so_16339811_16340318_0": {"section_id": 5864, "quality": 1.0, "length": 23}, "so_16339811_16340318_2": {"section_id": 3155, "quality": 1.0, "length": 52}}, "n4659": {"so_16339811_16340318_3": {"section_id": 4048, "quality": 0.8, "length": 16}, "so_16339811_16340318_4": {"section_id": 4049, "quality": 0.7317073170731707, "length": 30}, "so_16339811_16340318_0": {"section_id": 7595, "quality": 1.0, "length": 23}, "so_16339811_16340318_2": {"section_id": 4047, "quality": 0.9423076923076923, "length": 49}}}, "16340318": {"ParentId": "16339811", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-05-02T14:10:37.040", "Score": "0", "LastEditorUserId": "1838266", "LastEditDate": "2013-05-02T14:16:31.883", "Id": "16340318", "OwnerUserId": "1838266", "Body": "<p>Short answer: No difference. </p>\n<p>Longer answer: \u00a75.3.4,15 states that</p>\n<blockquote>\n<p id=\"so_16339811_16340318_0\">A <em>new-expression</em> that creates an object of type <code>T</code> initializes that object as follows:<br>\n  \u2014 If the new-initializer is omitted, the object is <strong>default-initialized</strong> (\u00a78.5); if no initialization is performed, the object has indeterminate value.<br>\n  \u2014 Otherwise, the new-initializer is interpreted according to the initialization rules of \u00a78.5 for direct-initialization.</br></br></p>\n</blockquote>\n<p>And \u00a78.5,16 says </p>\n<blockquote>\n<p id=\"so_16339811_16340318_1\">If the initializer is (), the object is <strong>value-initialized</strong>.</p>\n</blockquote>\n<p>Now what is value-initialization and default-initialization, is defined by \u00a78.5,5-7:</p>\n<blockquote>\n<p id=\"so_16339811_16340318_2\">To <em>zero-initialize</em> an object or reference of type T means:<br>\n  \u2014 <strong>if T is a scalar type (3.9), the object is set to the value 0 (zero), [...]</strong><br>\n  \u2014 if T is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;<br>\n  \u2014 if T is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zeroinitialized and padding is initialized to zero bits;<br>\n  \u2014 if T is an array type, each element is zero-initialized;<br>\n  \u2014 if T is a reference type, no initialization is performed.  </br></br></br></br></br></p>\n<p id=\"so_16339811_16340318_3\">To <em>default-initialize</em> an object of type T means:<br>\n  \u2014 <strong>if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called [...]</strong><br>\n  \u2014 if T is an array type, each element is default-initialized;<br>\n  \u2014 <strong>otherwise, no initialization is performed.</strong>\n  [...]  </br></br></br></p>\n<p id=\"so_16339811_16340318_4\">To <em>value-initialize</em> an object of type T means:<br>\n  \u2014 <strong>if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for T is called [...]</strong><br>\n  \u2014 if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.<br>\n  \u2014 if T is an array type, then each element is value-initialized;<br>\n  \u2014 <strong>otherwise, the object is zero-initialized.</strong></br></br></br></br></p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>Together, since your class has a user provided default constructor, value initialization and default initialization is the same, so both new expressions give the same behavior, namely the default constructor is called. </p>\n<p>It is a different thing with e.g. ints:</p>\n<pre><code>int *p2 = new int(); // value-initialized, i.e. zero-initialized, *p2 is 0\nint *p1 = new int;   // default-initialized, i.e. no initialization. *p1 is some garbage. Or whatever.\n</code></pre>\n", "LastActivityDate": "2013-05-02T14:16:31.883"}});