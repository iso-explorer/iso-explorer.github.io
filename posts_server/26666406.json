post_cb({"26666439": {"ParentId": "26666406", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>Yes, the compiler is generating a default, trivial <code>Foo&amp; operator=(const Foo&amp;)</code>. There only four cases in which the implicit copy assignment operator will NOT be generated:</p>\n<ul>\n<li>you explicitly told it not to (e.g. <code>Foo&amp; operator=(const Foo&amp;) = delete</code>)</li>\n<li>you declared one yourself taking a <code>Foo</code> (or <code>Foo&amp;</code> or <code>const Foo&amp;</code>)</li>\n<li>your class has a non-trivially-assignable member (e.g. a <code>unique_ptr&lt;T&gt;</code>)</li>\n<li>your class has a defined move assignment operator or constructor (thanks Brian)</li>\n</ul>\n<p><strong>Update</strong> Here's some relevant parts from the standard. </p>\n<p>12.8.18:</p>\n<blockquote>\n<p id=\"so_26666406_26666439_0\">If the class definition does not explicitly declare a copy assignment operator, one is declared implicitly. If\n  the class definition declares a move constructor or move assignment operator, the implicitly declared copy\n  assignment operator is defined as deleted; otherwise, it is defined as defaulted</p>\n</blockquote>\n<p>Ok, but you <em>did</em> declare a copy assignment operator, right? Or did you? What exactly <em>is</em> a copy assignment operator:</p>\n<p>12.8.17:</p>\n<blockquote>\n<p id=\"so_26666406_26666439_1\">A user-declared copy assignment operator <code>X::operator=</code> is a non-static non-template member function of\n  class <code>X</code> with exactly one parameter of type <code>X</code>, <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>.\n  121 [ Note:\n  An overloaded assignment operator must be declared to have only one parameter; see 13.5.3. \u2014 end note ]\n  [ Note: More than one form of copy assignment operator may be declared for a class. \u2014 end note ] [ Note:\n  If a class <code>X</code> only has a copy assignment operator with a parameter of type <code>X&amp;</code>, an expression of type <code>const X</code>\n  cannot be assigned to an object of type <code>X</code></p>\n</blockquote>\n<p>So no. The function you declared as <code>Foo::operator=(int)</code>, while being an assignment operator, is not a <em>copy</em> assignment operator. Hence it doesn't satisfy the condition in the previous paragraph for not implicitly declaring one. </p>\n<p>All the other conditions are defined in 12.8.23:</p>\n<blockquote>\n<p id=\"so_26666406_26666439_2\">A defaulted copy/move assignment operator for class X is defined as deleted if X has:</p>\n</blockquote>\n<ul>\n<li>a variant member with a non-trivial corresponding assignment operator and X is a union-like class, or</li>\n<li>a non-static data member of const non-class type (or array thereof), or</li>\n<li>a non-static data member of reference type, or</li>\n<li>a non-static data member of class type M (or array thereof) that cannot be copied/moved because\noverload resolution (13.3), as applied to M\u2019s corresponding assignment operator, results in an ambiguity\nor a function that is deleted or inaccessible from the defaulted assignment operator, or</li>\n<li>a direct or virtual base class B that cannot be copied/moved because overload resolution (13.3), as\napplied to B\u2019s corresponding assignment operator, results in an ambiguity or a function that is deleted\nor inaccessible from the defaulted assignment operator, or </li>\n<li>for the move assignment operator, a non-static data member or direct base class with a type that does\nnot have a move assignment operator and is not trivially copyable, or any direct or indirect virtual\nbase class.</li>\n</ul>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2014-10-31T02:50:33.440", "Id": "26666439", "Score": "1", "CreationDate": "2014-10-31T02:01:39.470", "LastActivityDate": "2014-10-31T02:50:33.440"}, "26666406": {"CommentCount": "0", "ViewCount": "92", "CreationDate": "2014-10-31T01:56:55.510", "LastActivityDate": "2014-10-31T02:50:33.440", "Title": "Overloading operator=", "AcceptedAnswerId": "26666439", "PostTypeId": "1", "Id": "26666406", "Score": "1", "Body": "<p>This may be a trivial question, however I didn't find a satisfactory answer and cannot really figure out what's going on. </p>\n<p>Suppose you have the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Foo\n{\npublic:\n    void operator=(int)\n    {\n        std::cout &lt;&lt; \"calling Foo::operator=(int)\" &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    Foo a, b;\n    a = 10; // it works, of course, no questions here\n    a = b; // why does this work?\n}\n</code></pre>\n<p>Since I overloaded <code>operator=</code> in <code>Foo</code>, I would expect the line <code>a = b</code> inside <code>main()</code> to spit a compiler error (that is, <code>a.operator=(b)</code> should not compile, as there is no implicit conversion from <code>b</code> to <code>int</code>, the latter being the input type of <code>Foo::operator=(int)</code>). Why does the assignment <code>a = b</code> silently works, and what exactly is going on? Is the compiler generating a \"default\" <code>operator=(const Foo&amp;)</code> even in the case when I overloaded it?</p>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "3093378", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26666406_26666439_0": {"section_id": 467, "quality": 0.9655172413793104, "length": 28}, "so_26666406_26666439_2": {"section_id": 472, "quality": 1.0, "length": 7}, "so_26666406_26666439_1": {"section_id": 466, "quality": 0.8305084745762712, "length": 49}}, "n3337": {"so_26666406_26666439_0": {"section_id": 458, "quality": 0.9655172413793104, "length": 28}, "so_26666406_26666439_2": {"section_id": 463, "quality": 1.0, "length": 7}, "so_26666406_26666439_1": {"section_id": 457, "quality": 0.8305084745762712, "length": 49}}, "n4659": {"so_26666406_26666439_0": {"section_id": 490, "quality": 0.9655172413793104, "length": 28}, "so_26666406_26666439_2": {"section_id": 495, "quality": 1.0, "length": 7}, "so_26666406_26666439_1": {"section_id": 489, "quality": 0.8305084745762712, "length": 49}}}});