post_cb({"4484912": {"ParentId": "4484900", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/Sort_%28C%2B%2B%29\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Sort_(C%2B%2B)</a></p>\n<blockquote>\n<p id=\"so_4484900_4484912_0\">The specific sorting algorithm is not mandated and may vary across implementations. The GNU Standard C++ library, for example, uses a hybrid sorting algorithm: introsort is performed first, to a maximum depth given by 2\u00d7log2 n, where n is the number of elements, followed by an insertion sort on the result.[1] Whatever the implementation, the complexity should be O(n log n) comparisons on the average. [2]</p>\n</blockquote>\n", "OwnerUserId": "66229", "LastEditorUserId": "402169", "LastEditDate": "2014-06-29T23:42:05.160", "Id": "4484912", "Score": "4", "CreationDate": "2010-12-19T20:23:03.477", "LastActivityDate": "2014-06-29T23:42:05.160"}, "4484913": {"ParentId": "4484900", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><code>std::sort</code> must have average case linearithmic (n log n) time complexity.  Any algorithm may be used so long as that time complexity requirement is met.  There is no worst case time complexity requirement.</p>\n<p>If you want a guaranteed worst case time complexity function, use <code>std::stable_sort</code>, which has quasilinear worst case time complexity (n log^2 n).</p>\n", "OwnerUserId": "151292", "LastEditorUserId": "151292", "LastEditDate": "2010-12-19T20:42:03.903", "Id": "4484913", "Score": "22", "CreationDate": "2010-12-19T20:23:21.590", "LastActivityDate": "2010-12-19T20:42:03.903"}, "24481485": {"ParentId": "4484900", "CommentCount": "1", "Body": "<h2>The standard guarantees</h2>\n<p>From the C++11/14 standard, <code>std::sort</code> is guaranteed to have:</p>\n<blockquote>\n<p id=\"so_4484900_24481485_0\"><strong>\u00a725.4.1.1/3</strong></p>\n<p id=\"so_4484900_24481485_1\">Complexity: <code>O(N log(N))</code> (where <code>N == last - first</code>) comparisons.</p>\n</blockquote>\n<p>The other, stable, standard sorting algorithm (namely <code>std::stable_sort</code>) is guaranteed to have:</p>\n<blockquote>\n<p id=\"so_4484900_24481485_2\"><strong>25.4.1.2/3</strong></p>\n<p id=\"so_4484900_24481485_3\">Complexity: It does at most <code>N log2(N)</code> (where <code>N == last - first</code>) comparisons; if enough extra memory is available, it is <code>N log(N)</code>.</p>\n</blockquote>\n<p>For <code>std::forward_list::stable</code>, instead:</p>\n<blockquote>\n<p id=\"so_4484900_24481485_4\"><strong>23.3.4.6/26</strong></p>\n<p id=\"so_4484900_24481485_5\">Complexity: Approximately <code>N log(N)</code> comparisons, where <code>N</code> is <code>distance(begin(), end())</code>.</p>\n</blockquote>\n<p>The same goes for <code>std::list</code>:</p>\n<blockquote>\n<p id=\"so_4484900_24481485_6\"><strong>23.3.5.5/31</strong></p>\n<p id=\"so_4484900_24481485_7\">Complexity: Approximately <code>N log(N)</code> comparisons, where <code>N == size()</code>.</p>\n</blockquote>\n<h2>Sorting algorithm</h2>\n<p>The C++ standard does not specify which sorting algorithm to apply in any of the above cases. This would be oftentimes and unnecessary implementation restriction.</p>\n<p>If you need to know you might have luck looking in a specific compiler specification. For example for GNU GCC you would start <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-html-USERS-4.4/a01027.html\" rel=\"nofollow\">here</a>.</p>\n", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "24481485", "Score": "1", "CreationDate": "2014-06-30T00:23:33.943", "LastActivityDate": "2014-06-30T00:23:33.943"}, "4484916": {"ParentId": "4484900", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If you mean <code>std::sort()</code>:</p>\n<p>This is from C++03 standard, section 25.3. The performance guarantee:</p>\n<pre><code>template&lt;class RandomAccessIterator&gt;\nvoid sort(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate&lt;class RandomAccessIterator, class Compare&gt; void sort(RandomAccessIterator first, RandomAccessIterator last,\n    Compare comp);\n</code></pre>\n<blockquote>\n<p id=\"so_4484900_4484916_0\">1 Effects: Sorts the elements in the range [first, last).</p>\n<p id=\"so_4484900_4484916_1\">2 Complexity: Approximately N log N (where N == last - first) comparisons on the average.</p>\n</blockquote>\n", "OwnerUserId": "297696", "LastEditorUserId": "297696", "LastEditDate": "2010-12-19T20:32:30.863", "Id": "4484916", "Score": "1", "CreationDate": "2010-12-19T20:23:43.027", "LastActivityDate": "2010-12-19T20:32:30.863"}, "4484915": {"ParentId": "4484900", "CommentCount": "3", "Body": "<p>The complexity is <code>O(n log n)</code>. Some common implementations use introsort as far as I know:</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Introsort\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Introsort</a></p>\n", "OwnerUserId": "499449", "PostTypeId": "2", "Id": "4484915", "Score": "4", "CreationDate": "2010-12-19T20:23:30.880", "LastActivityDate": "2010-12-19T20:23:30.880"}, "4484900": {"CommentCount": "0", "ViewCount": "22468", "PostTypeId": "1", "LastEditorUserId": "5042431", "CreationDate": "2010-12-19T20:20:44.410", "LastActivityDate": "2016-03-25T23:23:17.893", "Title": "What is the time complexity of std::sort() in the C++ standard library?", "FavoriteCount": "7", "LastEditDate": "2016-03-25T23:23:17.893", "Id": "4484900", "Score": "27", "Body": "<p>What is the complexity of std::sort() in the C++ Standard Library? Which sort is applied? Is there any rule of applying any particular sorting algorithm there?</p>\n", "Tags": "<c++><stl><time-complexity>", "OwnerUserId": "547939", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_4484900_24481485_1": {"section_id": 1402, "quality": 0.6666666666666666, "length": 4}, "so_4484900_24481485_5": {"section_id": 898, "quality": 0.7142857142857143, "length": 5}, "so_4484900_24481485_3": {"section_id": 1405, "quality": 0.7692307692307693, "length": 10}, "so_4484900_24481485_7": {"section_id": 953, "quality": 0.6666666666666666, "length": 4}, "so_4484900_4484916_0": {"section_id": 1286, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_4484900_24481485_1": {"section_id": 1396, "quality": 0.6666666666666666, "length": 4}, "so_4484900_24481485_5": {"section_id": 884, "quality": 0.7142857142857143, "length": 5}, "so_4484900_24481485_3": {"section_id": 1399, "quality": 0.7692307692307693, "length": 10}, "so_4484900_24481485_7": {"section_id": 941, "quality": 0.6666666666666666, "length": 4}, "so_4484900_4484916_0": {"section_id": 1281, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_4484900_24481485_1": {"section_id": 1523, "quality": 0.6666666666666666, "length": 4}, "so_4484900_4484916_0": {"section_id": 1409, "quality": 0.6666666666666666, "length": 4}, "so_4484900_24481485_7": {"section_id": 1014, "quality": 0.6666666666666666, "length": 4}, "so_4484900_24481485_3": {"section_id": 1523, "quality": 0.6153846153846154, "length": 8}, "so_4484900_24481485_5": {"section_id": 958, "quality": 0.7142857142857143, "length": 5}}}});