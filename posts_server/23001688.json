post_cb({"bq_ids": {"n4140": {"so_23001688_23001740_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 7087}}, "n3337": {"so_23001688_23001740_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6831}}, "n4659": {"so_23001688_23001740_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 8588}}}, "23001688": {"ViewCount": "229", "Body": "<p>The template version is used by the compiler to calculate <code>t = max(a, b)</code> and <code>max(t, c)</code>. Any quote from the Standard supporting this is welcome.</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\ninline T const&amp; max (T const&amp; a, T const&amp; b)\n{\n    std::cout &lt;&lt; \"template\" &lt;&lt; '\\n';\n    return a &lt; b ? b : a;\n}\n\ntemplate &lt;typename T&gt;\ninline T const&amp; max (T const&amp; a, T const&amp; b, T const&amp; c)\n{\n    return max (max(a,b), c);\n}\n\ninline int const&amp; max (int const&amp; a, int const&amp; b)\n{\n    std::cout &lt;&lt; \"non-template\" &lt;&lt; '\\n';\n    return a &lt;b ? b : a;\n}\n\nint main()\n{\n    std::cout &lt;&lt; max(3, 5, 7) &lt;&lt; '\\n';   \n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/c685ef390a78ff1f\">The code prints</a></p>\n<pre><code>template\ntemplate\n7\n</code></pre>\n", "Title": "Why the template version is chosen below by the compiler?", "CreationDate": "2014-04-11T00:54:19.463", "LastActivityDate": "2014-04-11T01:25:47.890", "CommentCount": "3", "LastEditDate": "2014-04-11T00:58:37.917", "PostTypeId": "1", "LastEditorUserId": "1774667", "Id": "23001688", "Score": "6", "OwnerUserId": "2337207", "Tags": "<c++><templates><c++11>", "AnswerCount": "1"}, "23001740": {"Id": "23001740", "PostTypeId": "2", "Body": "<p>The definition of your non-template version of <code>max()</code> is not visible at the call-site, it's defined afterwards. Either move that function above the 3-argument <code>max()</code> or add a prototype above the call-site.</p>\n<pre><code>int const&amp; max (int const&amp; a, int const&amp; b);\n</code></pre>\n<p>Now the non-template version is chosen in both cases.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/3ab1417a50ecb065\">Live example</a></p>\n<hr>\n<p>As for why this is the case, I believe <em>\u00a73.4.1/1 [basic.lookup.unqual]</em> holds the answer.</p>\n<blockquote>\n<p id=\"so_23001688_23001740_0\">In all the cases listed in 3.4.1, the scopes are searched for a declaration in the order listed in each of the respective categories; name lookup ends as soon as a declaration is found for the name. If no declaration is found, the program is ill-formed.</p>\n</blockquote>\n<p>Note that argument-dependent name lookup does not apply in your case since the arguments to <code>max</code> are <code>int</code>, and not a user defined type. Only unqualified name lookup applies, hence, as quoted above, the lookup stops when the first match (the function template version of <code>max()</code>) is found.</p>\n<p>The last sentence in the quoted section also explains why if you comment out the function template version of <code>max()</code> your code will not compile.</p>\n</hr>", "LastEditorUserId": "241631", "LastActivityDate": "2014-04-11T01:25:47.890", "Score": "8", "CreationDate": "2014-04-11T01:00:03.603", "ParentId": "23001688", "CommentCount": "2", "OwnerUserId": "241631", "LastEditDate": "2014-04-11T01:25:47.890"}});