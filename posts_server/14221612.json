post_cb({"bq_ids": {"n4140": {"so_14221612_14221894_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 7217}}, "n3337": {"so_14221612_14221894_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 6961}}, "n4659": {"so_14221612_14221894_0": {"length": 63, "quality": 0.9, "section_id": 8726}}}, "14221804": {"Id": "14221804", "PostTypeId": "2", "Body": "<p>A <code>long &lt;type&gt;</code> data type <strong>may</strong> hold larger values then a <code>&lt;type&gt;</code> data type, depending on the compiler.</p>\n", "LastActivityDate": "2013-01-08T18:38:13.503", "CommentCount": "0", "CreationDate": "2013-01-08T18:38:13.503", "ParentId": "14221612", "Score": "4", "OwnerUserId": "694576"}, "14221612": {"ViewCount": "38156", "Body": "<blockquote>\n<p id=\"so_14221612_14221612_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3454576/long-double-vs-double\">long double vs double</a> </br></p>\n</blockquote>\n<p>I am new to programming and I am unable to understand the difference between between long double and double in C and C++. I tried to Google it but was unable to understand it and got confused. Can anyone please help.?</p>\n", "AcceptedAnswerId": "14221894", "Title": "Difference between long double and double in C and C++", "CreationDate": "2013-01-08T18:26:10.783", "Id": "14221612", "CommentCount": "6", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:31:12.803", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-22T16:11:36.523", "ClosedDate": "2013-01-08T18:43:51.633", "Score": "10", "OwnerUserId": "1543957", "Tags": "<c++><c>", "AnswerCount": "3"}, "14221785": {"Id": "14221785", "PostTypeId": "2", "Body": "<p>It depends on your compiler but the following code can show you the number of bytes that each type requires:</p>\n<pre><code>int main() { \n    printf(\"%d\\n\", sizeof(double)); // some compilers print 8\n    printf(\"%d\\n\", sizeof(long double)); // some compilers print 16\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1497596", "LastActivityDate": "2015-04-22T16:11:36.523", "Score": "9", "CreationDate": "2013-01-08T18:37:05.067", "ParentId": "14221612", "CommentCount": "0", "OwnerUserId": "1952879", "LastEditDate": "2015-04-22T16:11:36.523"}, "14221894": {"Id": "14221894", "PostTypeId": "2", "Body": "<p>To quote the C++ standard, \u00a73.9.1 \u00b68:</p>\n<blockquote>\n<p id=\"so_14221612_14221894_0\">There are three floating point types: float, double, and long double. The type double provides at least as much precision as float, and the type long double provides at least as much precision as double. The set of values of the type float is a subset of the set of values of the type double; the set of values of the type double is a subset of the set of values of the type long double. The value representation of floating-point types is implementation-defined. Integral and floating types are collectively called arithmetic types. Specializations of the standard template std::numeric_limits (18.3) shall specify the maximum and minimum values of each arithmetic type for an implementation.</p>\n</blockquote>\n<p>That is to say that <code>double</code> takes at least as much memory for its representation as <code>float</code> and <code>long double</code> at least as much as <code>double</code>. That extra memory is used for more precise representation of a number.</p>\n<p>On x86 systems, <code>float</code> is typically 4 bytes long and can store numbers as large as about 3\u00d710\u00b3\u2078 and about as small as 1.4\u00d710\u207b\u2074\u2075. It is an IEEE 754 <a href=\"https://en.wikipedia.org/wiki/Single_precision\">single-precision number</a> that stores about 7 decimal digits of a fractional number.</p>\n<p>Also on x86 systems, <code>double</code> is 8 bytes long and can store numbers in the IEEE 754 <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\">double-precision format</a>, which has a much larger range and stores numbers with more precision, about 15 decimal digits. On some other platforms, <code>double</code> may not be 8 bytes long and may indeed be the same as a single-precision <code>float</code>.</p>\n<p>The standard only requires that <code>long double</code> is at least as precise as <code>double</code>, so some compilers will simply treat <code>long double</code> as if it is the same as <code>double</code>. But, on most x86 chips, the 10-byte <a href=\"https://en.wikipedia.org/wiki/Extended_precision#x86_Extended_Precision_Format\">extended precision format</a> 80-bit number is available through the CPU's floating-point unit, which provides even more precision than 64-bit <code>double</code>, with about 21 decimal digits of precision.</p>\n<p>Some compilers instead support a 16-byte (128-bit) IEEE 754 <a href=\"https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format\">quadruple precision number format</a> with yet more precise representations and a larger range.</p>\n", "LastEditorUserId": "33345", "LastActivityDate": "2013-01-08T18:49:52.753", "Score": "17", "CreationDate": "2013-01-08T18:43:56.043", "ParentId": "14221612", "CommentCount": "0", "OwnerUserId": "33345", "LastEditDate": "2013-01-08T18:49:52.753"}});