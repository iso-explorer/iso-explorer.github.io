post_cb({"11863938": {"ParentId": "11863435", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-08-08T11:53:33.570", "Score": "0", "LastEditorUserId": "567292", "LastEditDate": "2012-08-08T11:59:53.820", "Id": "11863938", "OwnerUserId": "567292", "Body": "<p>You haven't written a copy assignment operator <code>Stock::operator=(const Stock &amp;)</code> or move assignment operator <code>Stock::operator=(Stock &amp;&amp;)</code>, so your assignment <code>stock1 = Stock(\"Nifty Foods\", 10, 50.0);</code> will invoke an implicitly defined copy/move assignment operator:</p>\n<blockquote>\n<p id=\"so_11863435_11863938_0\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></p>\n<h3>12.8 Copying and moving class objects [class.copy]</h3>\n<p id=\"so_11863435_11863938_1\">18 - If the class de\ufb01nition does not explicitly declare a copy assignment operator, one is declared implicitly. If\n  the class de\ufb01nition declares a move constructor or move assignment operator, the implicitly declared copy\n  assignment operator is de\ufb01ned as deleted; otherwise, it is de\ufb01ned as defaulted (8.4).<br/>\n  28 - The implicitly-de\ufb01ned copy/move assignment operator for a non-union class X performs memberwise copy-\n  /move assignment of its subobjects.</p>\n</blockquote>\n<p>Because your class has a user-defined destructor, the move assignment operator will not be implicitly defined (12.8:20), so the implicitly defined copy assignment operator will be called:</p>\n<blockquote>\n<p id=\"so_11863435_11863938_2\">20 - If the de\ufb01nition of a class X does not explicitly declare a move assignment operator, one will be implicitly\n  declared as defaulted if and only if [...]</p>\n<blockquote id=\"so_11863435_11863938_3\">\n<ul>\n<li>X does not have a user-declared destructor</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>Thus the <code>Stock(\"Nifty Foods\", 10, 50.0)</code> will be memberwise copied into <code>stock1</code> and then destructed; so the message displayed will be <code>\"Bye, Nifty Foods!\"</code>.</p>\n<p>Here's a SSCCE:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nstruct S {\n    std::string s;\n    S(const std::string &amp;s): s(s) { std::cout &lt;&lt; \"S(\" &lt;&lt; s &lt;&lt; \")\\n\"; }\n    ~S() { std::cout &lt;&lt; \"~S(\" &lt;&lt; s &lt;&lt; \")\\n\"; }\n};\nint main() {\n    S a(\"a\");\n    a = S(\"b\");\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>S(a)\nS(b)\n~S(b)\n~S(b)\n</code></pre>\n", "LastActivityDate": "2012-08-08T11:59:53.820"}, "11863746": {"ParentId": "11863435", "PostTypeId": "2", "CommentCount": "13", "CreationDate": "2012-08-08T11:41:55.893", "Score": "1", "LastEditorUserId": "254252", "LastEditDate": "2012-08-08T11:54:25.757", "Id": "11863746", "OwnerUserId": "254252", "Body": "<p>You don't have a assignment operator defined, so if you are using a C++11 compiler, it probably uses the move assignment operator, which swaps the objects and then deletes the new contents of the temp object, which used to be in <code>stock1</code>.</p>\n<p>At least, that is the observed behavior. ecatmur is correct, however, that your class should not have received an implicit move assignment operator. That might of course be a compiler bug.</p>\n", "LastActivityDate": "2012-08-08T11:54:25.757"}, "11863865": {"ParentId": "11863435", "CommentCount": "4", "CreationDate": "2012-08-08T11:49:06.573", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "11863865", "Score": "-1", "Body": "<p>I don't see anything immediately wrong with your code, but you should probably implement a copy-constructor and assignment operator anyway, just to be sure that copying is performed correctly.</p>\n<p>something like this:</p>\n<pre><code>class Stock\n{\n    // ...\n\npublic:\n    // ...\n\n    Stock(const Stock &amp;other)\n        : company(other.company), shares(other.shares),\n          share_val(other.share_val), total_val(other.total_val)\n        { }\n\n    Stock &amp;operator=(const Stock &amp;other)\n        {\n            company   = other.company;\n            shares    = other.shares;\n            share_val = other.share_val;\n            total_val = other.total_val;\n\n            return *this;\n        }\n\n    // ...\n};\n</code></pre>\n<p>For more information about copy-constructors, see e.g. <a href=\"http://en.wikipedia.org/wiki/Copy_constructor\" rel=\"nofollow\">this Wikipedia article</a>. For the assignment operator, see e.g. <a href=\"http://en.wikipedia.org/wiki/Assignment_operator_in_C%2B%2B\" rel=\"nofollow\">this article</a>.</p>\n", "LastActivityDate": "2012-08-08T11:49:06.573"}, "bq_ids": {"n4140": {"so_11863435_11863938_2": {"section_id": 469, "quality": 0.9230769230769231, "length": 12}, "so_11863435_11863938_3": {"section_id": 458, "quality": 1.0, "length": 4}, "so_11863435_11863938_1": {"section_id": 467, "quality": 0.6744186046511628, "length": 29}}, "n3337": {"so_11863435_11863938_2": {"section_id": 460, "quality": 0.9230769230769231, "length": 12}, "so_11863435_11863938_3": {"section_id": 449, "quality": 1.0, "length": 4}, "so_11863435_11863938_1": {"section_id": 458, "quality": 0.6744186046511628, "length": 29}}, "n4659": {"so_11863435_11863938_2": {"section_id": 492, "quality": 0.9230769230769231, "length": 12}, "so_11863435_11863938_1": {"section_id": 490, "quality": 0.6744186046511628, "length": 29}, "so_11863435_11863938_3": {"section_id": 481, "quality": 1.0, "length": 4}}}, "11863435": {"CommentCount": "13", "ViewCount": "166", "PostTypeId": "1", "LastEditorUserId": "1576342", "CreationDate": "2012-08-08T11:21:49.873", "LastActivityDate": "2012-08-08T12:26:24.403", "Title": "Compiler behavior regarding class objects I don't understand", "AcceptedAnswerId": "11863746", "LastEditDate": "2012-08-08T12:26:24.403", "Id": "11863435", "Score": "1", "Body": "<p>I'm a noob and still learning the c++ language. The thing is, doing an exercise from a book, I've come across a compiler behavior I don't understand.   </p>\n<p>The header file.     </p>\n<pre><code>// stock10.h -- Stock class declaration with constructors, destructor added\n\n#ifndef STOCK10_H_\n#define STOCK10_H_\n\n#include &lt;string&gt;\n\nclass Stock\n{\nprivate:\n    std::string company;\n    long shares;\n    double share_val;\n    double total_val;\n    void set_tot() { total_val = shares * share_val; }\npublic:\n    // two constructors\n    Stock(); // default constructor\n    Stock(const std::string &amp; co, long n = 0, double pr = 0.0);\n    ~Stock(); // noisy destructor\n    void buy(long num, double price);\n    void sell(long num, double price);\n    void update(double price);\n    void show();\n};\n\n#endif\n</code></pre>\n<p>The class implementation.   </p>\n<pre><code>// stock10.cpp -- Stock class with constructors, destructor added\n\n#include &lt;iostream&gt;\n#include \"stock10.h\"\n\n// constructors (verbose versions)\nStock::Stock() // default constructor\n{\n    std::cout &lt;&lt; \"Default constructor called\\n\";\n    company = \"no name\";\n    shares = 0;\n    share_val = 0.0;\n    total_val = 0.0;\n}\n\nStock::Stock(const std::string &amp; co, long n, double pr)\n{\n    std::cout &lt;&lt; \"Constructor using \" &lt;&lt; co &lt;&lt; \" called\\n\";\n    company = co;\n    if (n &lt; 0)\n    {\n        std::cout &lt;&lt; \"Number of shares can\u2019t be negative; \"\n                  &lt;&lt; company &lt;&lt; \" shares set to 0.\\n\";\n        shares = 0;\n    }\n    else\n        shares = n;\n    share_val = pr;\n    set_tot();\n}\n\n// class destructor\nStock::~Stock() // verbose class destructor\n{\n    std::cout &lt;&lt; \"Bye, \" &lt;&lt; company &lt;&lt; \"!\\n\";\n}\n\n// other methods\nvoid Stock::buy(long num, double price)\n{\n    if (num &lt; 0)\n    {\n        std::cout &lt;&lt; \"Number of shares purchased can\u2019t be negative. \"\n                  &lt;&lt; \"Transaction is aborted.\\n\";\n    }\n    else\n    {\n        shares += num;\n        share_val = price;\n        set_tot();\n    }\n}\n\nvoid Stock::sell(long num, double price)\n{\n    using std::cout;\n    if (num &lt; 0)\n    {\n        cout &lt;&lt; \"Number of shares sold can\u2019t be negative. \"\n             &lt;&lt; \"Transaction is aborted.\\n\";\n    }\n    else if (num &gt; shares)\n    {\n        cout &lt;&lt; \"You can\u2019t sell more than you have! \"\n             &lt;&lt; \"Transaction is aborted.\\n\";\n    }\n    else\n    {\n        shares -= num;\n        share_val = price;\n        set_tot();\n    }\n}\n\nvoid Stock::update(double price)\n{\n    share_val = price;\n    set_tot();\n}\n\nvoid Stock::show()\n{\n    using std::cout;\n    using std::ios_base;\n    // set format to #.###\n    ios_base::fmtflags orig =\n        cout.setf(ios_base::fixed, ios_base::floatfield);\n    std::streamsize prec = cout.precision(3);\n    cout &lt;&lt; \"Company: \" &lt;&lt; company\n         &lt;&lt; \" Shares: \" &lt;&lt; shares &lt;&lt; '\\n';\n    cout &lt;&lt; \" Share Price: $\" &lt;&lt; share_val;\n    // set format to #.##\n    cout.precision(2);\n    cout &lt;&lt; \" Total Worth: $\" &lt;&lt; total_val &lt;&lt; '\\n';\n    // restore original format\n    cout.setf(orig, ios_base::floatfield);\n    cout.precision(prec);\n}\n</code></pre>\n<p>The main file.  </p>\n<pre><code>// usestok1.cpp -- using the Stock class\n// compile with stock10.cpp\n\n#include &lt;iostream&gt;\n#include \"stock10.h\"\n\nint main()\n{\n    {\n        using std::cout;\n        cout &lt;&lt; \"Using (non default) constructors to create new objects\\n\";\n        Stock stock1(\"NanoSmart\", 12, 20.0); // syntax 1\n        stock1.show();\n        Stock stock2 = Stock (\"Boffo Objects\", 2, 2.0); // syntax 2\n        stock2.show();\n\n        cout &lt;&lt; \"Assigning stock1 to stock2:\\n\";\n        stock2 = stock1;\n        cout &lt;&lt; \"Listing stock1 and stock2:\\n\";\n        stock1.show();\n        stock2.show();\n\n        cout &lt;&lt; \"Using a constructor to reset an object\\n\";\n        stock1 = Stock(\"Nifty Foods\", 10, 50.0); // temp object\n        cout &lt;&lt; \"Revised stock1:\\n\";\n        stock1.show();\n        cout &lt;&lt; \"Done\\n\";\n    }\n    std::cin.get();\n    return 0;\n}\n</code></pre>\n<p>As you may have guessed, Stock is the class and I've created non-default constructor and destructor to display messages to see when they \"act\".</p>\n<p>Here's the output from program execution:</p>\n<blockquote>\n<p id=\"so_11863435_11863435_0\">Using (non default) constructors to create new objects<br>\n  Constructor using NanoSmart called<br>\n  Company: NanoSmart Shares: 12<br>\n   Share Price: $20.000 Total Worth: $240.00<br>\n  Constructor using Boffo Objects called<br>\n  Company: Boffo Objects Shares: 2<br>\n   Share Price: $2.000 Total Worth: $4.00<br>\n  Assigning stock1 to stock2:<br>\n  Listing stock1 and stock2:<br>\n  Company NanoSmart Shares: 12<br>\n   Share Price: $20.000 Total Worth: $240.00<br>\n  Company NanoSmart Shares: 12<br>\n   Share Price: $20.000 Total Worth: $240.00<br>\n  Using a constructor to reset an object<br>\n  Constructor using Nifty Foods called<br>\n<strong>Bye, NanoSmart!</strong> // <em>Why? Shouldn't it be Bye, Nifty Foods?</em><br>\n  Revised stock1:<br>\n  Company: Nifty Foods Shares: 10<br>\n   Share Price: $50.000 Total Worth: $500.00<br>\n  Done<br>\n  Bye, NanoSmart!<br>\n  Bye, Nifty Foods!     </br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>In this specific line:   </p>\n<pre><code>stock1 = Stock(\"Nifty Foods\", 10, 50.0); // temp object\n</code></pre>\n<p>Shouldn't the compiler:<br>\n1. Create a temporary object with the constructor<br>\n2. Assign that object to the stock1 object<br>\n3. Destroy the temporary object</br></br></br></p>\n<p>Shouldn't the message say Nifty Foods instead of NanoSmart?</p>\n<p>I don't get it. Any help?</p>\n", "Tags": "<c++><class><compiler-construction><constructor><destructor>", "OwnerUserId": "1576342", "AnswerCount": "3"}});