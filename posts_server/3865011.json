post_cb({"3865011": {"CommentCount": "3", "ViewCount": "3894", "OwnerDisplayName": "user408141", "CreationDate": "2010-10-05T15:10:52.077", "LastActivityDate": "2010-10-05T15:42:11.430", "PostTypeId": "1", "AcceptedAnswerId": "3865098", "Title": "Constructor for a no-named struct", "Id": "3865011", "Score": "7", "Body": "<p>I have a class something like that:</p>\n<pre><code>template &lt;class T&gt;\nclass bag\n{\npublic:\n\nprivate:\n typedef struct{void* prev; struct{T item; unsigned int count;} body; void* next;}* node; \n typedef struct{\n  node operator-&gt;() { return current; }\n  operator(){;} // &lt;- i can not do that, right?\n\n private:\n  node current;\n } iterator;\n//...\n};\n</code></pre>\n<p>So, how to write a constructor for the bag::iterator?</p>\n", "Tags": "<c++>", "AnswerCount": "2"}, "3865098": {"ParentId": "3865011", "CommentCount": "0", "Body": "<p>Make some nice name for it :-)</p>\n<pre><code>typedef struct NoName1 {void* prev; NoName1(){}; struct NoName2{T item; unsigned int count; NoName2() {}} body; void* next;}* node;\n</code></pre>\n<p>EDIT: LOL sorry, wrote it for the wrong one, but the principle is the same :-)</p>\n", "OwnerUserId": "211659", "PostTypeId": "2", "Id": "3865098", "Score": "6", "CreationDate": "2010-10-05T15:19:53.693", "LastActivityDate": "2010-10-05T15:19:53.693"}, "3865259": {"ParentId": "3865011", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is no way to write a constructor for <code>bag::iterator</code> because iterator is a typedef name, which are prohibited from being used as constructor names:</p>\n<p><code>14882:2003 12.1/3</code></p>\n<blockquote>\n<p id=\"so_3865011_3865259_0\">a <em>typedef-name</em> that names a class shall not be used as the <em>identifier</em> in the declarator for a constructor declaration.</p>\n</blockquote>\n<p>There is even an example in the standard, although in a different paragraph, <code>7.1.3/5</code>:</p>\n<pre><code>typedef struct {\n    S();         //error: requires a return type because S is\n                 // an ordinary member function, not a constructor\n} S;\n</code></pre>\n<p>You will have to give that struct a name, if you want a user-defined constructor. The <code>typedef struct { } name;</code> style of programming is usually discouraged by C++ style guides anyway, in favor of <code>struct name { };</code>.</p>\n", "OwnerUserId": "273767", "LastEditorUserId": "273767", "LastEditDate": "2010-10-05T15:42:11.430", "Id": "3865259", "Score": "5", "CreationDate": "2010-10-05T15:36:26.510", "LastActivityDate": "2010-10-05T15:42:11.430"}, "bq_ids": {"n4140": {"so_3865011_3865259_0": {"section_id": 5414, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_3865011_3865259_0": {"section_id": 5209, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_3865011_3865259_0": {"section_id": 6836, "quality": 0.7142857142857143, "length": 5}}}});