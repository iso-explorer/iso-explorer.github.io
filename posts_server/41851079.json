post_cb({"41851079": {"ViewCount": "202", "Body": "<p>I know that a <code>const</code> object can't call a non-<code>const</code> member function. It says so in the C++14 Standard (ISO/IEC 14882:2014) Section 9.3.2, Paragraph 3:</p>\n<blockquote>\n<p id=\"so_41851079_41851079_0\">A <em>cv-qualified</em> member function can be called on an object-expression (5.2.5) only if the object-expression is as cv-qualified or less-cv-qualified than the member function.</p>\n</blockquote>\n<p>Does this constraint make sense if the member function does not modify anything? Or if the member function modifies a mutable variable? For example: </p>\n<pre><code>class My_Class {\n    public:\n        mutable int value;\n        void function( int x ) const { value = x; } //     Correct\n      //void function( int x )       { value = x; } // Not Correct\n        My_Class() : value(0) {}\n};\n\nint main(){\n\n    const My_Class obj;\n    obj.function( 1 );\n\n    return 0;\n}\n</code></pre>\n<p>In this specific case, if the function is <code>const</code>, the program is correct and the function can modify a variable of the <code>const</code> object. If the function is not <code>const</code>, the program is not correct. So in the end, I need to write <code>const</code> to be able to modify something, which should be the opposite purpose of <code>const</code>.</p>\n<p>Does anyone know why this rule is designed this way?</p>\n", "AcceptedAnswerId": "41851347", "Title": "Const Object, Const Member Function and Mutable Variable in C++", "CreationDate": "2017-01-25T11:58:42.790", "Id": "41851079", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-01-25T12:59:05.343", "Score": "1", "OwnerUserId": "6892577", "Tags": "<c++><function><const><mutable><member-functions>", "AnswerCount": "3"}, "41851415": {"Id": "41851415", "PostTypeId": "2", "Body": "<p>The <a href=\"http://en.cppreference.com/w/cpp/language/cv\" rel=\"nofollow noreferrer\"><code>mutable</code></a> keyword,</p>\n<blockquote>\n<p id=\"so_41851079_41851415_0\">Applies to non-static class members of non-reference non-const type and specifies that the member does not affect the externally visible state of the class (as often used for mutexes, memo caches, lazy evaluation, and access instrumentation). mutable members of const class instances are modifiable</p>\n</blockquote>\n<p>You're questioning the validity of a C++ keyword. I feel the examples in this definition, provide positive proof that such a keyword is needed, and that <code>mutable</code> as imagined by the designers of the language is a boon to us.</p>\n", "LastActivityDate": "2017-01-25T12:15:27.623", "Score": "1", "CreationDate": "2017-01-25T12:15:27.623", "ParentId": "41851079", "CommentCount": "0", "OwnerUserId": "2642059"}, "bq_ids": {"n4140": {"so_41851079_41851079_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 5897}}, "n3337": {"so_41851079_41851079_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 5669}}, "n4659": {"so_41851079_41851079_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 7380}}}, "41851347": {"Id": "41851347", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_41851079_41851347_0\">Does [Section 9.3.2, Paragraph 3 of] make sense if the member function does not modify anything? Or if the member function modifies a mutable variable?</p>\n</blockquote>\n<p>Yes, it does. The caller of the function cannot in general know whether the function modifies any non mutable member. It knows whether the function is const or not, so the compiler can only make a decision based on that.</p>\n<p>A non const function <strong>could</strong> modify the non mutable state, so you obviously may not call it on a const object. Whether the non const function does modify the state is irrelevant since it is an implementation detail that is not available when deciding if the call is allowed. In other words, constness is part of the interface of the function, while the implementation of the function is not part of the interface. The interface of the function is fully specified by its declaration.</p>\n<p>An example:</p>\n<pre><code>struct C {\n    mutable int a;\n            int b;\n    void do_something();\n};\n\nconst C c;\nc.do_something();\n</code></pre>\n<p>Does it make sense to allow the call <code>do_something</code>? Does the fact that <code>do_something</code> might not modify <code>b</code> affect that? How could we assume that <code>do_something</code> does not modify <code>b</code>?</p>\n<p>The answers are: It wouldn't make sense. It does not have an effect. There is no way we could make such assumption.</p>\n<p>Writing a non const member function that doesn't modify any non mutable state - at least potentially or allow such modification indirectly by returning a non const reference / pointer to <code>this</code> - makes little sense, although the standard does permit doing so.</p>\n<blockquote>\n<p id=\"so_41851079_41851347_1\">So in the end, I need to write const to be able to modify something, which should be the opposite purpose of const.</p>\n</blockquote>\n<p>That might seem oxymoronic, but that is because it  is an oversimplification. You need to write const to be able to modify <strong>the mutable state of a const object</strong>. The const that you write declares that you do not modify any non mutable state, and that declaration gives the permission to call it on const objects.</p>\n<p>Your commented-out non-const function is still correct to use with non-const objects.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2017-01-25T12:59:05.343", "Score": "2", "CreationDate": "2017-01-25T12:11:11.733", "ParentId": "41851079", "CommentCount": "4", "LastEditDate": "2017-01-25T12:59:05.343", "OwnerUserId": "2079303"}, "41851380": {"Id": "41851380", "PostTypeId": "2", "Body": "<p>There is a fundamental misunderstanding in your question:</p>\n<pre><code>class My_Class {\n    public:\n        mutable int value;\n        void function( int x )       { value = x; } // Absolutely fine\n        My_Class() : value(0) {}\n};\n</code></pre>\n<p><code>mutable</code> does not mean \"can only be modified in a <code>const</code> member function\".  It means \"can be modified <em>even</em> in a  <code>const</code> member function\".</p>\n", "LastActivityDate": "2017-01-25T12:13:17.893", "Score": "2", "CreationDate": "2017-01-25T12:13:17.893", "ParentId": "41851079", "CommentCount": "3", "OwnerUserId": "771073"}});