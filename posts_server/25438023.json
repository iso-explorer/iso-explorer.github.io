post_cb({"bq_ids": {"n4140": {"so_25438023_25438102_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 3291}, "so_25438023_25438102_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 3286}, "so_25438023_25438102_8": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_25438023_25438102_4": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_25438023_25438102_6": {"length": 5, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_25438023_25438102_2": {"length": 14, "quality": 1.0, "section_id": 3161}, "so_25438023_25438102_5": {"length": 13, "quality": 1.0, "section_id": 3156}, "so_25438023_25438102_8": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_25438023_25438102_4": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_25438023_25438102_6": {"length": 5, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_25438023_25438102_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 4053}, "so_25438023_25438102_5": {"length": 9, "quality": 0.6923076923076923, "section_id": 4049}, "so_25438023_25438102_8": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_25438023_25438102_6": {"length": 5, "quality": 1.0, "section_id": 4048}}}, "25438102": {"Id": "25438102", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25438023_25438102_0\">It shows \"strange large numbers or only 0\".</p>\n</blockquote>\n<p>Here's what the standard has to say about uninitialized values.</p>\n<blockquote>\n<p id=\"so_25438023_25438102_1\">\u00a7 8.5/11 </p>\n<p id=\"so_25438023_25438102_2\">If no initializer is specified for an object, the object is\n  default-initialized; if no initialization is performed, an object with\n  automatic or dynamic storage duration has <b>indeterminate value.</b></p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_25438023_25438102_3\">\u00a7 8.5/6 </p>\n<p id=\"so_25438023_25438102_4\">To default-initialize an object of type T means: </p>\n<p id=\"so_25438023_25438102_5\">\u2014 if T is a\n  (possibly cv-qualified) class type (Clause 9), the default constructor\n  for T is called (and the initialization is ill-formed if T has no\n  accessible default constructor);</p>\n<p id=\"so_25438023_25438102_6\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_25438023_25438102_7\">\u2014 otherwise, <b>no initialization is performed.</b></p>\n<p id=\"so_25438023_25438102_8\">If a program calls for the default initialization of an object of a\n  const-qualified type T, T shall be a class type with a user-provided\n  default constructor.</p>\n</blockquote>\n<p>This indeterminate value could be as you said, strange large numbers or only zero.</p>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-08-22T00:53:09.227", "Score": "1", "CreationDate": "2014-08-22T00:53:09.227", "ParentId": "25438023", "CommentCount": "0"}, "25438023": {"ViewCount": "783", "Body": "<p>I'm learning how to use structures.\nI'm struggling to get it to work, actually the program is very large, but particularly in this part I need your help.\nIt doesn't count the total number of females or males, It shows \"strange large numbers or only 0\".\nSo if you can tell me what I'm doing wrong I'd really appreciate it.</p>\n<p>Thanks.</p>\n<pre><code>    #include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct person\n{\n\n   int sex;\n   int males; \n   int females;   \n};\n\ntypedef struct person P;\n\nint main()\n{\n\nint size=0;\ncout&lt;&lt;\"How many employees do you want to insert? \"&lt;&lt;endl;\ncin&gt;&gt;size;\nP employee[size];\nfor(int i=0;i&lt;size;i++)\n{\n\n\n    cout&lt;&lt;\"\\t1.Male\\t2.Female\"&lt;&lt;endl;\n    cin&gt;&gt;employee[i].sex;\n    if (employee[i].sex==1)\n{\n    employee[i].males++;\n}\nelse\n{\n    employee[i].females++;\n}\ncout&lt;&lt;\"\\n\\n* * * * * *\\n\\n\";\n}\n\n\n\nfor(int i=0;i&lt;size;i++)\n{\n\ncout&lt;&lt;\"Male employees: = \"&lt;&lt;employee[i].males&lt;&lt;endl;\ncout&lt;&lt;\"Female employees: \"&lt;&lt;employee[i].females&lt;&lt;endl;\n}\n\n\nsystem (\"pause\");\nreturn 0;}\n</code></pre>\n", "Title": "c++ - How can I use a structure to calculate the total number of males and females introduced?", "CreationDate": "2014-08-22T00:39:51.520", "LastActivityDate": "2014-08-22T00:53:09.227", "CommentCount": "3", "PostTypeId": "1", "Id": "25438023", "Score": "0", "OwnerUserId": "3966204", "Tags": "<c++><arrays><structure>", "AnswerCount": "2"}, "25438083": {"Id": "25438083", "PostTypeId": "2", "Body": "<p>The issue you are having is because you didn't initiate the values to 0 for your employee[] array. When you declared the array employee[], your OS automatically give each of the .sex, .male, .female a location of memory inside the computer, which was previously filled with other random integers. Whenever you declare an array like the on you did, you should create a loop that initializes all the variables to zero, such as:</p>\n<pre><code>for (int i = 0; i&lt;size; i++)\n{\n  employee[i].sex = 0;\n  employee[i].male = 0;\n  employee[i].female = 0;\n}\n</code></pre>\n<p>You should do that right after declaring your employee array. That should solve your problem.</p>\n<p>Edit: Another issue your having is that you are not outputting the right information. Your final code just outputs employee[i].male and female for every case of 'i', so the values obtained would always be 1 and 0. If you want to see how many are female or male for instance, you should declare a separate integer value, initiate it to zero, and create an if conditional that will increase the male or female integer value by 1 every time an employee is male or female respectively</p>\n", "LastActivityDate": "2014-08-22T00:49:18.597", "CommentCount": "5", "CreationDate": "2014-08-22T00:49:18.597", "ParentId": "25438023", "Score": "1", "OwnerUserId": "3960962"}});