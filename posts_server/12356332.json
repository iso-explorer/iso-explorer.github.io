post_cb({"bq_ids": {"n4140": {"so_12356332_12356332_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 480}}, "n3337": {"so_12356332_12356332_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 471}}, "n4659": {"so_12356332_12356332_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 502}}}, "12356332": {"ViewCount": "424", "Body": "<p>I have a question about throw-expressions and copy constructors.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Foo\n{\npublic:\n   Foo() { std::cout &lt;&lt; \"Foo::Foo() \\n\"; }\n   Foo(const Foo&amp;) { std::cout &lt;&lt; \"Foo::Foo(const Foo&amp;) \\n\"; }\n   ~Foo() { std::cout &lt;&lt; \"Foo::~Foo() \\n\"; }  \n};\n\nint main()\n{\n   try\n   {\n      throw Foo(); \n   }\n   catch (...)\n   {\n      std::cerr &lt;&lt; \"Error \\n\"; \n   }     \n}\n</code></pre>\n<p>In C++98 / C++03, does this code print:</p>\n<pre><code>Foo::Foo()\nError\nFoo::Foo(const Foo&amp;)\nFoo::~Foo()\n</code></pre>\n<p>and in C++11 one of the following:</p>\n<pre><code>Foo::Foo()\nError\nFoo::Foo(const Foo&amp;)\nFoo::~Foo()\n</code></pre>\n<p>or </p>\n<pre><code>Foo::Foo()    \nError\nFoo::~Foo()\n</code></pre>\n<p>I saw this only in C++11:</p>\n<blockquote>\n<p id=\"so_12356332_12356332_0\">12.8 Copying and moving class objects [class.copy]</p>\n<p id=\"so_12356332_12356332_1\">31 ... \u2014 in a throw-expression, when the operand is the name of a\n  non-volatile automatic object (other than a function or catch-clause\n  parameter) whose scope does not extend beyond the end of the innermost\n  enclosing try-block (if there is one), the copy/move operation from\n  the operand to the exception object (15.1) can be omitted by\n  constructing the automatic object directly into the exception object</p>\n</blockquote>\n", "Title": "copy constructor and throw-expression", "CreationDate": "2012-09-10T17:05:34.140", "LastActivityDate": "2012-09-10T18:20:47.827", "CommentCount": "3", "LastEditDate": "2012-09-10T17:08:48.707", "PostTypeId": "1", "LastEditorUserId": "845092", "Id": "12356332", "Score": "1", "OwnerUserId": "1608835", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "12356454": {"Id": "12356454", "PostTypeId": "2", "Body": "<p>The copying (or moving in C++11) of an exception object is not defined, but it must be copyable (or movable in C++11) and the implementation may copy (or move) it as many times as they like for funsies.</p>\n", "LastActivityDate": "2012-09-10T17:14:32.350", "CommentCount": "1", "CreationDate": "2012-09-10T17:14:32.350", "ParentId": "12356332", "Score": "2", "OwnerUserId": "298661"}, "12357338": {"Id": "12357338", "PostTypeId": "2", "Body": "<p>I would expect to see:</p>\n<pre><code>Foo::Foo()             // construction\nFoo::Foo(const Foo&amp;)   // copy to special throw location\nError                  // catch and print error\nFoo::~Foo()            // at the end of the catch block the exception object is destroyed.\n\nor\n\nFoo::Foo()             // As above but compiler has optimized the copy out.\nError\nFoo::~Foo()\n</code></pre>\n<p>This is because:</p>\n<pre><code>throw Foo();   // Creates a local temporary object.\n               // The throw then copies (moves) the local temporary to an implementation \n               // specific location to preserve it while the stack is unwound.\n</code></pre>\n<p>But note: The compiler is allowed to elide copy of objects (even if they have side affects). So in this situation the compiler can optimize the code to construct it explicitly in the implementation specific location.</p>\n<p>Also worth noting:</p>\n<pre><code>catch (Foo e)         // Copies the exception object from the implementation specific location\n                      // to e so it can be used in the try block. Note this may also result in\n                      // object slicing if you don;t catch the exact type.\n\n catch (Foo const&amp; e) // No copy required as you are using a reference\n                      // Thus no chance of slicing.\n</code></pre>\n", "LastActivityDate": "2012-09-10T18:20:47.827", "CommentCount": "0", "CreationDate": "2012-09-10T18:20:47.827", "ParentId": "12356332", "Score": "2", "OwnerUserId": "14065"}});