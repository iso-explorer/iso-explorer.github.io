post_cb({"12553835": {"Id": "12553835", "PostTypeId": "2", "Body": "<p>Initialization of a variable at the run time from the keyboard is known as Dynamic Initialization.</p>\n<p>Program code:-</p>\n<pre><code> int a=cube(n);\n</code></pre>\n<p>In the above program code , <code>a</code> is a global variable to which a number <code>n</code> is dynamically assigned through a function <code>cube</code>, where <code>cube()</code> performs the cube of a number.</p>\n<p>This is an example of Dynamic Initialization.</p>\n", "LastEditorUserId": "597607", "LastActivityDate": "2012-09-23T18:19:00.483", "CommentCount": "0", "CreationDate": "2012-09-23T16:02:43.843", "ParentId": "5945897", "Score": "0", "OwnerUserId": "1692553", "LastEditDate": "2012-09-23T18:19:00.483"}, "5945936": {"Id": "5945936", "PostTypeId": "2", "Body": "<p>Dynamic initialization is that in which initialization value isn't known at compile-time. It's computed at runtime to initialize the variable.</p>\n<p>Example,</p>\n<pre><code>int factorial(int n)\n{\n     if ( n &lt; 0 )       return -1; //indicates input error\n     else if ( n == 0 ) return 1;\n     else               return n * factorial(n-1);\n}\n\nint const a = 10 ; //static initialization \n             //10 is known at compile time. Its 10!\n\nint const b = factorial(8); //dynamic initialization \n                      //factorial(8) isn't known at compile time,\n                      //rather it's computed at runtime.\n</code></pre>\n<p>That is, static-initialization <em>usually</em> involves constant-expression (which is known at compile-time), while dynamic-initialization involves non-constant expression.</p>\n<pre><code>static int c;//this is also static initialization (with zero)!\n</code></pre>\n<p>\u00a73.6.2/1 from the C++ Standard (2003) says,</p>\n<blockquote>\n<p id=\"so_5945897_5945936_0\">Objects with static storage duration\n  (3.7.1) shall be zero-initialized\n  (8.5) before any other initialization\n  takes place. Zero-initialization and\n  initialization with a <em>constant\n  expression</em> are collectively called\n  <strong>static initialization</strong>; all other\n  initialization is <strong>dynamic\n  initialization</strong>.</p>\n</blockquote>\n<p>So there are two kind of initializations:</p>\n<ul>\n<li>Static initialization : Its either zero-initialization or initialization with a constant expression</li>\n<li>Any other initialization is dynamic initialization.</li>\n</ul>\n<p>Also note that the same variable can be dynamically-initialized after it has been statically-initialized.  For example, see this code:</p>\n<pre><code>int d = factorial(8);\nint main()\n{\n}\n</code></pre>\n<p>Since <code>d</code> is a global variable, it has static storage. That means, according to <code>\u00a73.6.2.1</code> it's initialized to 0 at the static-initialization phase which occurs <em>before any other initialization takes place</em>. Then later, at runtime, it's dynamically-initialized with the value returned from the function <code>factorial()</code>. </p>\n<p>That means, global objects can be initialized twice: once by static initialization (which is zero-initialization) and later, at runtime, they can be dynamically-initialized.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2016-03-22T05:05:26.947", "CommentCount": "18", "CreationDate": "2011-05-10T06:11:57.240", "ParentId": "5945897", "Score": "43", "OwnerUserId": "415784", "LastEditDate": "2016-03-22T05:05:26.947"}, "12540833": {"Id": "12540833", "PostTypeId": "2", "Body": "<p>Dynamic initialization means the first value assigned to the variable after memory allocation is not known at compile time, it is evaluated only at run time.\nfor example</p>\n<pre><code>#include &lt;iostream.h&gt;\n\nusing namespace std;\n\nint sample()\n{\n    int x;\n    cin &gt;&gt; x;\n    return x;\n}\n\nconst int t = sample(); //dynamic initialization\n\nint p = sample();       //dynamic initialization\n\nvoid main()\n\n{\n\n    cout &lt;&lt; t;\n\n    cout &lt;&lt; p;\n\n} \n</code></pre>\n<p>As we know that a constant can get value only once i.e. at the time of initialization.\nthis example shows that even a global variable which is static storage if dynamically initialize by return value of a function, the first value assigned to the variable is the value returned by function, which replaces the initial default value 0 of the variable which is assigned at the time of memory allocation.</p>\n", "LastEditorUserId": "1690346", "LastActivityDate": "2012-09-22T05:44:29.653", "CommentCount": "0", "CreationDate": "2012-09-22T04:54:29.507", "ParentId": "5945897", "Score": "6", "OwnerUserId": "1690346", "LastEditDate": "2012-09-22T05:44:29.653"}, "bq_ids": {"n4140": {"so_5945897_5945936_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 7151}}, "n3337": {"so_5945897_5945936_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 6895}}}, "5945897": {"ViewCount": "41100", "Body": "<p><strong>What is dynamic initialization of objects in c++?</strong></p>\n<p>Please explain with an simple example...</p>\n", "AcceptedAnswerId": "5945936", "Title": "What is dynamic initialization of object in c++?", "CreationDate": "2011-05-10T06:07:54.437", "Id": "5945897", "CommentCount": "2", "FavoriteCount": "13", "PostTypeId": "1", "LastEditDate": "2015-10-22T07:03:06.240", "LastEditorUserId": "2660176", "LastActivityDate": "2016-03-22T05:05:26.947", "Score": "33", "OwnerUserId": "744606", "Tags": "<c++><object><dynamic><initialization>", "AnswerCount": "4"}, "17473939": {"PostTypeId": "2", "Body": "<p>The dynamic initialization means that the initial values may be provided during run time. Even class objects can be initialized dynamically. I.e. with the values provided at run time.        :-)) </p>\n", "LastActivityDate": "2013-07-04T15:31:22.153", "Id": "17473939", "CommentCount": "0", "CreationDate": "2013-07-04T15:31:22.153", "ParentId": "5945897", "Score": "0", "OwnerUserId": "2551051"}});