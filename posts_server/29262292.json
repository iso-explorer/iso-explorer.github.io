post_cb({"bq_ids": {"n4140": {"so_29262292_29262751_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6324}, "so_29262292_29262751_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 6296}, "so_29262292_29262751_0": {"length": 23, "quality": 0.92, "section_id": 6323}}, "n3337": {"so_29262292_29262751_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6081}, "so_29262292_29262751_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 6053}, "so_29262292_29262751_0": {"length": 23, "quality": 0.92, "section_id": 6080}}, "n4659": {"so_29262292_29262751_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 7834}, "so_29262292_29262751_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 7804}, "so_29262292_29262751_0": {"length": 23, "quality": 0.92, "section_id": 7833}}}, "29262486": {"Id": "29262486", "PostTypeId": "2", "Body": "<p><strong>Actually, you can't.</strong></p>\n<p>Just because your program compiles (which is down to facts of the underlying implementation) does not mean it is valid.</p>\n<p><a href=\"https://stackoverflow.com/a/553869/560648\">There <em>are</em> times other than declaring a <code>T*</code> or a <code>T&amp;</code> at which you may use a forward declaration</a>; it's just that <a href=\"https://stackoverflow.com/q/18672135/560648\">this is not one of them</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-25T17:36:16.640", "Score": "5", "CreationDate": "2015-03-25T17:28:51.550", "ParentId": "29262292", "CommentCount": "2", "LastEditDate": "2017-05-23T12:06:19.423", "OwnerUserId": "560648"}, "29262292": {"ViewCount": "90", "Body": "<p>I thought that you could only create a reference or pointer member to a forward-declared class. However, I was surprised to discover this works:</p>\n<pre><code>#include &lt;vector&gt;\n\nstruct Donkey;\n\nstruct Cage\n{\n    std::vector&lt;Donkey&gt; donkeys;\n};\n\nstruct Donkey\n{\n};\n\nint main()\n{\n    Cage c;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/EP0zKR\" rel=\"nofollow\">http://ideone.com/EP0zKR</a></p>\n<p>How come <code>std::vector</code> can be defined with a forward-declared class? Is this standard?</p>\n", "AcceptedAnswerId": "29262486", "Title": "How come I can use a forward-declared class in a std::vector?", "CreationDate": "2015-03-25T17:19:32.253", "Id": "29262292", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2015-03-25T17:41:13.217", "Score": "2", "OwnerUserId": "2068573", "Tags": "<c++>", "AnswerCount": "2"}, "29262751": {"Id": "29262751", "PostTypeId": "2", "Body": "<p>It's undefined behavior. </p>\n<blockquote>\n<p id=\"so_29262292_29262751_0\">[C++14/\u00a717.6.4.8] 1 In certain cases (replacement functions, handler\n  functions, operations on types used to instantiate standard library\n  template components), the C++ standard library depends on components\n  supplied by a C++ program. If these components do not meet their\n  requirements, the Standard places no requirements on the\n  implementation. </p>\n<p id=\"so_29262292_29262751_1\">[C++14/\u00a717.6.4.8] 2 In particular, the effects are undefined in the\n  following cases: [...]</p>\n<ul>\n<li>if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for\n  that component.</li>\n</ul>\n</blockquote>\n<p>Furthermore, an incomplete type doesn't meet the allocator requirements:</p>\n<blockquote>\n<p id=\"so_29262292_29262751_2\">[C++14/\u00a717.6.3.5] 9 An allocator may constrain the types on which it\n  can be instantiated and the arguments for which its construct member\n  may be called. If a type cannot be used with a particular allocator,\n  the allocator class or the call to construct may fail to instantiate.</p>\n</blockquote>\n<p>Because your class has a definition by the time the vector is instantiated, it's fine. Be on the lookout for this proposal which will change allocator requirements, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4056.html\" rel=\"nofollow\">N4056 Minimal incomplete type support for standard containers</a></p>\n", "LastActivityDate": "2015-03-25T17:41:13.217", "Score": "0", "CreationDate": "2015-03-25T17:41:13.217", "ParentId": "29262292", "CommentCount": "2", "OwnerUserId": "4713343"}});