post_cb({"bq_ids": {"n4140": {"so_34256960_34256995_0": {"length": 49, "quality": 0.9074074074074074, "section_id": 3919}}, "n3337": {"so_34256960_34256995_0": {"length": 49, "quality": 0.9074074074074074, "section_id": 3779}}, "n4659": {"so_34256960_34256995_0": {"length": 52, "quality": 0.9629629629629629, "section_id": 4805}}}, "34256960": {"ViewCount": "62", "Body": "<p>Given C++ Primer's description of local static objects:</p>\n<blockquote>\n<p id=\"so_34256960_34256960_0\">It can be useful to have a local variable whose lifetime continues across calls to the function. We obtain such objects by defining a local variable as static. <strong>Each local static object is initialized before the first time execution passes through the object\u2019s definition</strong>. Local statics are not destroyed when a function ends; they are destroyed when the program terminates.</p>\n</blockquote>\n<p>I was surprised to find that the following code compiled fine with sensible output:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid test(int x){\n\n    static int y = x;\n    cout &lt;&lt; y;\n\n}\n\nint main(){\n\n    test(2);\n    test(5);\n    test(6);\n\n}\n</code></pre>\n<p>By such a description it would seem that initializing using a function argument would be impossible or not make much sense, how could it initialize <code>y</code> before execution passes through the function, how would it know what <code>x</code> is yet? Is this an oversimplification by C++ Primer or might my program be in a compiler-undetectable error?</p>\n<p>For those wondering why I might be trying to initialise a static variable with an argument, I was trying to create a function that used <code>default_random_engine</code> to return a random integer in the provided range every time it was called (and so required <code>static</code> so the objects weren't destroyed) as part of another exercise for C++ Primer:</p>\n<pre><code>unsigned randomUns(unsigned minV, unsigned maxV, default_random_engine::result_type seed = 0){\n\n    static default_random_engine e(seed);\n    static uniform_int_distribution&lt;unsigned&gt; u(minV, maxV);\n\n    return u(e);\n}\n</code></pre>\n", "AcceptedAnswerId": "34256995", "Title": "Initialising a local static with an argument", "CreationDate": "2015-12-13T22:05:46.513", "Id": "34256960", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-12-13T22:10:45.653", "Score": "1", "OwnerUserId": "4338785", "Tags": "<c++><c++11><static><local>", "AnswerCount": "1"}, "34256995": {"Id": "34256995", "PostTypeId": "2", "Body": "<p>The word \"before\" is poorly chosen by your source. The C++ standard describes the initialization of block-scope variables with static storage duration like this [stmt.dcl]/4:</p>\n<blockquote>\n<p id=\"so_34256960_34256995_0\">Dynamic initialization of a block-scope variable with static storage duration (3.7.1) or thread storage duration (3.7.2) is performed <strong>the first time control passes through its declaration</strong>; such a variable is considered\n  initialized upon the completion of its initialization. If the initialization exits by throwing an exception, the initialization is not complete, so it will be tried again the next time control enters the declaration. If control\n  enters the declaration concurrently while the variable is being initialized, the concurrent execution shall wait for completion of the initialization.</p>\n</blockquote>\n<p>So your variable <code>y</code> is initialize the first time you call <code>test</code>.</p>\n", "LastActivityDate": "2015-12-13T22:10:45.653", "CommentCount": "0", "CreationDate": "2015-12-13T22:10:45.653", "ParentId": "34256960", "Score": "7", "OwnerUserId": "596781"}});