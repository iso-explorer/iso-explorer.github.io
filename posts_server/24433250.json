post_cb({"24433518": {"ParentId": "24433250", "CommentCount": "8", "Body": "<p>It's not undefined. The reasoning is this:</p>\n<ol>\n<li><p><code>operator new</code> returns <code>void*</code>, so it is guaranteed to return modifiable (non-const) memory: [support.dynamic]</p>\n<blockquote id=\"so_24433250_24433518_0\">\n<pre><code>void* operator new(std::size_t size);\n</code></pre>\n</blockquote></li>\n<li><p><code>const_cast</code> which casts away constness is valid if the object referred to is not const: [expr.const.cast]\u00a77, referring to [dcl.type.cv], particularly \u00a73+4</p>\n<blockquote>\n<p id=\"so_24433250_24433518_1\">3 A pointer or reference to a cv-qualified type need not actually point or refer to a cv-qualified object, but it\n  is treated as if it does; a const-qualified access path cannot be used to modify an object even if the object\n  referenced is a non-const object and can be modified through some other access path.</p>\n<p id=\"so_24433250_24433518_2\">4 Except that any class member declared <code>mutable</code> (7.1.1) can be modified, any attempt to modify a const\n  object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote></li>\n<li><p><code>const_cast</code> does not modify the value of the operand: [expr.const.cast]\u00a73:</p>\n<blockquote>\n<p id=\"so_24433250_24433518_3\">... The result of a pointer\n  <code>const_cast</code> refers to the original object.</p>\n</blockquote></li>\n</ol>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "24433518", "Score": "4", "CreationDate": "2014-06-26T14:43:28.920", "LastActivityDate": "2014-06-26T14:43:28.920"}, "24433250": {"CommentCount": "3", "ViewCount": "171", "PostTypeId": "1", "LastEditorUserId": "1782465", "CreationDate": "2014-06-26T14:31:31.713", "LastActivityDate": "2014-06-26T14:43:28.920", "Title": "Global allocation functions and const void*", "LastEditDate": "2014-06-26T14:38:08.450", "Id": "24433250", "Score": "4", "Body": "<p>Does the code below constitutes \"undefined behavior\" according to C++11 (due to the use of const_cast, see the quote below)?</p>\n<pre><code>const void* p = operator new(123);\noperator delete(const_cast&lt;void*&gt;(p));\n</code></pre>\n<p>A relevant quote from C++11 standard (3.7.4.2.3):</p>\n<blockquote>\n<p id=\"so_24433250_24433250_0\">The value of the \ufb01rst argument supplied to a deallocation function may be a null pointer value; if so, and if the deallocation function is one supplied in the standard library, the call has no e\ufb00ect. Otherwise, the behavior is unde\ufb01ned if the value supplied to <code>operator delete(void*)</code> in the standard library is not one of the values returned by a previous invocation of either <code>operator new(std::size_t)</code> or <code>operator new(std::size_t, const std::nothrow_t&amp;)</code> in the standard library</p>\n</blockquote>\n<p>If the answer is no, please provide the quotes from C++11 standard that confirm that.</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "1997715", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24433250_24433250_0": {"section_id": 7182, "quality": 0.8974358974358975, "length": 35}, "so_24433250_24433518_1": {"section_id": 5432, "quality": 1.0, "length": 31}, "so_24433250_24433518_2": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}, "so_24433250_24433518_3": {"section_id": 6053, "quality": 0.8571428571428571, "length": 6}, "so_24433250_24433518_0": {"section_id": 6815, "quality": 1.0, "length": 4}}, "n3337": {"so_24433250_24433250_0": {"section_id": 6926, "quality": 0.8974358974358975, "length": 35}, "so_24433250_24433518_1": {"section_id": 5227, "quality": 1.0, "length": 31}, "so_24433250_24433518_2": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}, "so_24433250_24433518_3": {"section_id": 5821, "quality": 0.8571428571428571, "length": 6}, "so_24433250_24433518_0": {"section_id": 6570, "quality": 1.0, "length": 4}}, "n4659": {"so_24433250_24433518_1": {"section_id": 6860, "quality": 1.0, "length": 31}, "so_24433250_24433518_2": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}, "so_24433250_24433518_3": {"section_id": 7553, "quality": 0.7142857142857143, "length": 5}, "so_24433250_24433518_0": {"section_id": 8307, "quality": 1.0, "length": 4}}}});