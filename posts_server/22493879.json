post_cb({"bq_ids": {"n4140": {"so_22493879_22494119_10": {"length": 5, "quality": 1.0, "section_id": 22}, "so_22493879_22494119_9": {"length": 8, "quality": 1.0, "section_id": 5438}, "so_22493879_22494119_5": {"length": 8, "quality": 1.0, "section_id": 5438}, "so_22493879_22494119_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 5438}, "so_22493879_22494119_6": {"length": 5, "quality": 1.0, "section_id": 1168}, "so_22493879_22494020_4": {"length": 8, "quality": 1.0, "section_id": 5438}, "so_22493879_22494020_1": {"length": 8, "quality": 1.0, "section_id": 5438}, "so_22493879_22494020_2": {"length": 4, "quality": 1.0, "section_id": 5438}, "so_22493879_22493995_0": {"length": 29, "quality": 0.6590909090909091, "section_id": 7211}}, "n3337": {"so_22493879_22494119_10": {"length": 5, "quality": 1.0, "section_id": 19}, "so_22493879_22494119_9": {"length": 8, "quality": 1.0, "section_id": 5233}, "so_22493879_22494119_5": {"length": 8, "quality": 1.0, "section_id": 5233}, "so_22493879_22494119_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 5233}, "so_22493879_22494119_6": {"length": 5, "quality": 1.0, "section_id": 1166}, "so_22493879_22494020_4": {"length": 8, "quality": 1.0, "section_id": 5233}, "so_22493879_22494020_1": {"length": 8, "quality": 1.0, "section_id": 5233}, "so_22493879_22494020_2": {"length": 4, "quality": 1.0, "section_id": 5233}, "so_22493879_22493995_0": {"length": 29, "quality": 0.6590909090909091, "section_id": 6955}}, "n4659": {"so_22493879_22494119_10": {"length": 5, "quality": 1.0, "section_id": 22}, "so_22493879_22494119_9": {"length": 8, "quality": 1.0, "section_id": 6865}, "so_22493879_22494119_5": {"length": 8, "quality": 1.0, "section_id": 6865}, "so_22493879_22494119_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 6865}, "so_22493879_22494119_6": {"length": 5, "quality": 1.0, "section_id": 1286}, "so_22493879_22494020_4": {"length": 8, "quality": 1.0, "section_id": 6865}, "so_22493879_22494020_1": {"length": 8, "quality": 1.0, "section_id": 6865}, "so_22493879_22494020_2": {"length": 4, "quality": 1.0, "section_id": 6865}, "so_22493879_22493995_0": {"length": 27, "quality": 0.6136363636363636, "section_id": 8720}}}, "22493995": {"Id": "22493995", "PostTypeId": "2", "Body": "<p>Regarding your question:  <em>Is i[t] proper standards-compliant C and C++ to use signed, unsigned, long and short without int in each and every situation?</em></p>\n<p>Because there is also such a thing as <code>unsigned char</code>, the answer is <strong><em>No, not in every situation</em></strong>.  i.e.  if you need an <code>unsigned char</code>, you need to specify <em>char</em>.  The idea of the <em>note</em> you refer to is to say that <em>if</em> the explicit type is not used, then <em>by default</em> the type will be <code>int</code>.  </p>\n<p><em><strong>For a more exact answer</strong></em></p> you can read section 6.2.5 of the c11 standard.  Paragraphs 4 &amp; 6 are reproduced here for their relevance, but the other sections will also shed light on other parts of your question:  \n<p><em><strong>4</strong></em></p>\n<blockquote>\n<p id=\"so_22493879_22493995_0\"><em>There are five standard signed integer types, designated as signed char, short int, int, long int, and long long int. (These and other\n  types may be designated in several additional ways, as described in\n  6.7.2.) There may also be implementation-defined extended signed integer types.38) The standard and extended signed integer types are\n  collectively called signed integer types.39)</em> </p>\n</blockquote>\n<p><em><strong>6</strong></em></p>\n<p><em>For each of the signed integer types, there is a corresponding (but different) unsigned integer type (designated with the keyword unsigned) that uses the same amount of storage (including sign information) and has the same alignment requirements. The type Bool and the unsigned integer types that correspond to the standard signed integer types are the standard unsigned integer types. The unsigned integer types that correspond to the extended signed integer types are the extended unsigned integer types. The standard and extended unsigned integer types are collectively called unsigned integer types.40)</em> </p>\n<p><em><strong>An online</strong></em></p> C++ reference can be found <strong><em><a href=\"http://en.cppreference.com/w/cpp/language/types\" rel=\"nofollow\">HERE</a></em></strong><br>\nSpecifically look at the properties table.</br>\n", "LastEditorUserId": "645128", "LastActivityDate": "2014-03-19T01:18:19.547", "Score": "2", "CreationDate": "2014-03-19T00:38:38.947", "ParentId": "22493879", "CommentCount": "6", "OwnerUserId": "645128", "LastEditDate": "2014-03-19T01:18:19.547"}, "22493879": {"ViewCount": "415", "Body": "<p>In N3797 7.1.1/3 there is the following note:</p>\n<p><code>Note: Since signed, unsigned, long, and short by default imply int, a type-name appearing after one of those specifiers is treated as the name being (re)declared.</code></p>\n<p>But this is only a note. Is there somewhere in the standard that makes a normative statement to the same effect?</p>\n<p>Is is proper standards-compliant C and C++ to use <strong>signed</strong>, <strong>unsigned</strong>, <strong>long</strong> and <strong>short</strong> without <strong>int</strong> in each and every situation? </p>\n<p>Or, to put it in code, are the following standards-compliant and if so where does it say so?</p>\n<pre><code>signed a;\nunsigned b;\nshort c;\nlong d;\nsigned f(signed p, unsigned q, short r, long s);\nunsigned* f(signed* p, unsigned* q, short* r, long* s);\n</code></pre>\n<p>[I hesitate to ask whether it's recommended or preferred, for fear of getting opinion-based answers.]</p>\n", "AcceptedAnswerId": "22494020", "Title": "Are signed, unsigned, long and short all valid types in all versions of C and C++?", "CreationDate": "2014-03-19T00:28:34.297", "Id": "22493879", "CommentCount": "1", "LastEditDate": "2014-03-19T00:47:04.013", "PostTypeId": "1", "LastEditorUserId": "1105562", "LastActivityDate": "2014-03-19T02:20:08.507", "Score": "3", "OwnerUserId": "1105562", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "3"}, "22494119": {"Id": "22494119", "PostTypeId": "2", "Body": "<p>With the exception of <code>char</code> (<code>signed char</code> and <code>char</code> are different types), yes, to answer if it's always true, we can go back to the oldest standard: C89 and C++98.</p>\n<blockquote>\n<h3><a href=\"http://port70.net/~nsz/c/c89/c89-draft.html#3.5.2\" rel=\"nofollow noreferrer\">C89 \u00a73.5.2 Type specifiers</a></h3>\n<p id=\"so_22493879_22494119_0\">Each list of type specifiers shall be one of the following sets; the type specifiers may occur in any order, possibly intermixed with the other declaration specifiers.</p>\n<ul>\n<li><p id=\"so_22493879_22494119_1\"><code>void</code></p></li>\n<li><p id=\"so_22493879_22494119_2\"><code>char</code></p></li>\n<li><p id=\"so_22493879_22494119_3\"><code>signed char</code></p></li>\n<li><p id=\"so_22493879_22494119_4\"><code>unsigned char</code></p></li>\n<li><p id=\"so_22493879_22494119_5\"><code>short</code> , <code>signed short</code> , <code>short int</code> , or <code>signed short int</code></p></li>\n<li><p id=\"so_22493879_22494119_6\"><code>unsigned short</code> , or <code>unsigned short int</code></p></li>\n<li><p id=\"so_22493879_22494119_7\"><code>int</code> , <code>signed</code> , <code>signed int</code> , or no type specifiers</p></li>\n<li><p id=\"so_22493879_22494119_8\"><code>unsigned</code> , or <code>unsigned int</code></p></li>\n<li><p id=\"so_22493879_22494119_9\"><code>long</code> , <code>signed long</code> , <code>long int</code> , or <code>signed long int</code></p></li>\n<li><p id=\"so_22493879_22494119_10\"><code>unsigned long</code> , or <code>unsigned long int</code></p></li>\n<li><p id=\"so_22493879_22494119_11\"><code>float</code></p></li>\n<li><p id=\"so_22493879_22494119_12\"><code>double</code></p></li>\n<li><p id=\"so_22493879_22494119_13\"><code>long double</code></p></li>\n<li><p id=\"so_22493879_22494119_14\"><code>struc</code>t-or-<code>union</code> specifier</p></li>\n<li><p id=\"so_22493879_22494119_15\"><code>enum</code>-specifier</p></li>\n<li><p id=\"so_22493879_22494119_16\"><code>typedef</code>-name</p></li>\n</ul>\n<p id=\"so_22493879_22494119_17\">Semantics</p>\n<p id=\"so_22493879_22494119_18\">Specifiers for structures, unions, and enumerations are discussed in 3.5.2.1 through 3.5.2.3 Declarations of typedef names are discussed in 3.5.6 The characteristics of the other types are discussed in 3.1.2.5</p>\n<p id=\"so_22493879_22494119_19\"><strong>Each of the above comma-separated lists designates the same type, except that for bit-field declarations, signed int (or signed ) may differ from int (or no type specifiers).</strong></p>\n</blockquote>\n<p>Similarly in C++98 \u00a77.1.5.2 Simple type specifiers:</p>\n<p><img alt=\"C++98 type specifiers\" src=\"https://i.stack.imgur.com/1ofBD.png\"/></p>\n", "LastEditorUserId": "1009479", "LastActivityDate": "2014-03-19T01:02:42.937", "Score": "2", "CreationDate": "2014-03-19T00:52:33.540", "ParentId": "22493879", "CommentCount": "0", "OwnerUserId": "1009479", "LastEditDate": "2014-03-19T01:02:42.937"}, "22494020": {"Id": "22494020", "PostTypeId": "2", "Body": "<p>As far I know it has always been that way but we can at least go back to the earliest publicly available draft standards. For C++ would be <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\" rel=\"nofollow\">1804</a> and in section <code>7.1.5.2</code> <em>Simple type specifiers</em> <code>Table 7</code> <em>simple-type-specifiers and the types they specify</em> includes the following entries:</p>\n<pre><code>unsigned   \u201cunsigned int\u201d\nsigned     \u201cint\u201d\nlong       \u201clong int\u201d\nshort      \u201cshort int\u201d\n</code></pre>\n<p>for C we can go back to <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">C99</a> which in section <code>6.7.2</code> <em>Type specifiers</em> says:</p>\n<blockquote>\n<p id=\"so_22493879_22494020_0\">[...]Each list of\n  type specifiers shall be one of the following sets (delimited by commas, when there is\n  more than one set on a line); [...]</p>\n</blockquote>\n<p>and includes the following bullets:</p>\n<blockquote>\n<p id=\"so_22493879_22494020_1\">\u2014 short, signed short, short int, or signed short int</p>\n<p id=\"so_22493879_22494020_2\">\u2014 int, signed, or signed int</p>\n<p id=\"so_22493879_22494020_3\">\u2014 unsigned, or unsigned int</p>\n<p id=\"so_22493879_22494020_4\">\u2014 long, signed long, long int, or signed long int</p>\n</blockquote>\n<p>So these all all standards compliant type specifiers and both quotes come from the normative section of the respective draft standards.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-03-19T02:20:08.507", "Score": "3", "CreationDate": "2014-03-19T00:41:31.743", "ParentId": "22493879", "CommentCount": "2", "OwnerUserId": "1708801", "LastEditDate": "2014-03-19T02:20:08.507"}});