post_cb({"25898584": {"ParentId": "25898127", "CommentCount": "0", "Body": "<p>I think you're right. There's nothing really to add from the standard other than what's already in your question.</p>\n<p>This is a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=7221\" rel=\"nofollow\">long-standing bug</a> in GCC. clang agrees with your interpretation and accepts your program.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "25898584", "Score": "2", "CreationDate": "2014-09-17T19:15:43.137", "LastActivityDate": "2014-09-17T19:15:43.137"}, "25898127": {"CommentCount": "2", "ViewCount": "84", "PostTypeId": "1", "LastEditorUserId": "149392", "CreationDate": "2014-09-17T18:47:35.413", "LastActivityDate": "2014-09-17T19:48:24.593", "Title": "Link failure when typedef declaration defines unnamed class", "AcceptedAnswerId": "25898584", "LastEditDate": "2014-09-17T19:48:24.593", "Id": "25898127", "Score": "1", "Body": "<p>Section <code>7.1.3[9]</code> of the C++11 standard states: </p>\n<blockquote>\n<p id=\"so_25898127_25898127_0\">If the typedef declaration defines an unnamed class (or enum), the first typedef-name declared by the declaration to be that class type (or enum type) is used to denote the class type (or enum type) for linkage purposes only (3.5). </p>\n</blockquote>\n<p><strong>[ Example:</strong></p>\n<pre><code>typedef struct { } *ps, S; // S is the class name for linkage purposes\n</code></pre>\n<p><strong>\u2014end example ]</strong></p>\n<p>This means that in the example below, <code>Foo</code> should be used as the name of the unnamed class and used for linkage purposes in the example below:</p>\n<pre><code>//foo1.cpp\ntypedef class\n{\n        public: int f();\n} Foo;\n\nint Foo::f()\n{\n        return 5;\n}\n</code></pre>\n<p>Since <code>Foo::f()</code> is defined in <code>foo1.cpp</code>, the compiler should not complain. </p>\n<pre><code>//foo2.cpp\ntypedef class\n{\n    public: int f();\n} Foo;\n\nFoo foo;\n\nint main()\n{\n    return foo.f();\n}\n</code></pre>\n<p>However, I get a link error with <code>GCC 4.8</code>. Am I missing something?</p>\n<pre><code>$g++ foo1.cpp foo2.cpp\n/tmp/ccMwHawT.o: In function `main':\n713Y51.cpp:(.text+0x24): undefined reference to `Foo::f()'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n", "Tags": "<c++><gcc><g++><language-lawyer>", "OwnerUserId": "2089697", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25898127_25898127_0": {"section_id": 5415, "quality": 1.0, "length": 21}}, "n3337": {"so_25898127_25898127_0": {"section_id": 5210, "quality": 1.0, "length": 21}}, "n4659": {"so_25898127_25898127_0": {"section_id": 6837, "quality": 1.0, "length": 21}}}});