post_cb({"8735527": {"AcceptedAnswerId": "8735552", "Body": "<blockquote>\n<p id=\"so_8735527_8735527_0\">12.1/1. Constructors do not have names. A special declarator syntax using an optional sequence of function-specifiers (7.1.2) followed by\n  the constructor\u2019s class name followed by a parameter list is used to\n  declare or define the constructor. In such a declaration, optional\n  parentheses around the constructor class name are ignored.</p>\n</blockquote>\n<p>Reading that text, I wonder what are the parenthesis around constructor names in the following example which are ignored?</p>\n<pre><code>class MyClass\n{\n    MyClass();\n};\n\nMyClass::MyClass() {\n}\n</code></pre>\n", "CreationDate": "2012-01-04T23:20:05.550", "Score": "4", "CommentCount": "0", "OwnerUserId": "1086635", "Title": "Parenthesis around constructor syntax", "LastActivityDate": "2012-01-04T23:24:28.057", "PostTypeId": "1", "Tags": "<c++><constructor>", "AnswerCount": "1", "FavoriteCount": "1", "Id": "8735527", "ViewCount": "218"}, "8735552": {"PostTypeId": "2", "ParentId": "8735527", "Body": "<p>There are no optional parentheses in your code snippet.  The following example has <em>optional parentheses around the constructor class name</em>, and these parentheses are ignored:</p>\n<pre><code>class MyClass\n{\n    (MyClass)();\n};\n\nMyClass::MyClass() { }\n</code></pre>\n", "CreationDate": "2012-01-04T23:23:01.057", "Score": "6", "CommentCount": "7", "Id": "8735552", "OwnerUserId": "151292", "LastActivityDate": "2012-01-04T23:23:01.057"}, "bq_ids": {"n3337": {"so_8735527_8735527_0": {"quality": 0.6774193548387096, "length": 21, "section_id": 355}}}});