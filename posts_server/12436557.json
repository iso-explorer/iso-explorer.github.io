post_cb({"12436695": {"Id": "12436695", "PostTypeId": "2", "Body": "<p>In N3337 I can see:-</p>\n<blockquote>\n<p id=\"so_12436557_12436695_0\"><strong>13.3.2 Viable functions</strong><br/>\n  A candidate function having fewer than m parameters is viable only if\n  it has an ellipsis in its parameter list (8.3.5). For the purposes of\n  overload resolution, <strong>any argument for which there is no corresponding\n  parameter is considered</strong> to <strong>\u201cmatch the ellipsis\u201d</strong> (13.3.3.1.3) .</p>\n</blockquote>\n", "LastActivityDate": "2012-09-15T10:43:39.917", "CommentCount": "0", "CreationDate": "2012-09-15T10:43:39.917", "ParentId": "12436557", "Score": "2", "OwnerUserId": "1655481"}, "bq_ids": {"n4140": {"so_12436557_12436695_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 601}}, "n3337": {"so_12436557_12436695_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 591}}, "n4659": {"so_12436557_12436695_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 627}}}, "12436628": {"Id": "12436628", "PostTypeId": "2", "Body": "<pre><code>void foo(int)\n</code></pre>\n<p>will accept one argument of type <code>int</code>.</p>\n<pre><code>void foo(...)\n</code></pre>\n<p>accepts any number of arguments, of any type. It will be selected when the call doesn't  have a single <code>int</code> argument. Not very useful, in general.</p>\n<p>Also note that it is undefined behavior to pass objects of class type to <code>...</code>.</p>\n", "LastActivityDate": "2012-09-15T10:34:34.230", "CommentCount": "2", "CreationDate": "2012-09-15T10:34:34.230", "ParentId": "12436557", "Score": "2", "OwnerUserId": "597607"}, "12436557": {"ViewCount": "947", "Body": "<p>Can i actually use a function overloading like this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid foo(...)\n{\n   std::cout &lt;&lt; \"::foo(...) \\n\";\n}\n\nvoid foo(int)\n{\n   std::cout &lt;&lt; \"::foo(int) \\n\";\n}\n\nint main()\n{\n   foo(0);\n   foo('A');\n   foo(\"str\");\n   foo(0, 1);\n}\n</code></pre>\n<p>What standard says about it? And in what kind of situations i'll get ::foo(...)?</p>\n", "Title": "Function overloading with ellipsis", "CreationDate": "2012-09-15T10:24:27.563", "LastActivityDate": "2012-09-15T10:56:10.397", "CommentCount": "1", "PostTypeId": "1", "Id": "12436557", "Score": "5", "OwnerUserId": "1608835", "Tags": "<c++>", "AnswerCount": "4"}, "12436585": {"Id": "12436585", "PostTypeId": "2", "Body": "<p>When you declare a function in the following way : </p>\n<pre><code>  void foo (...) \n</code></pre>\n<p>this mean foo accepts any number of arguments.</p>\n<p>So this function will be called when this is the must suitable one.</p>\n<p>In your case whenever you won't write :</p>\n<pre><code>foo(//Some single int).\n</code></pre>\n<p>In your specific main, this will happen :</p>\n<pre><code>foo(0)     //Calls foo(int).\nfoo('A)    //Calls foo (int). as you can convert a char to an int.\nfoo(\"str\") //Calls foo(...) . as you can not convert a string to an int.\nfoo(1,2)   //Calls foo(...) . as this is the only possible function \n             cause the second foo function only takes one int.\n</code></pre>\n", "LastEditorUserId": "1531979", "LastActivityDate": "2012-09-15T10:41:10.790", "Score": "0", "CreationDate": "2012-09-15T10:28:37.780", "ParentId": "12436557", "CommentCount": "0", "OwnerUserId": "1531979", "LastEditDate": "2012-09-15T10:41:10.790"}, "12436611": {"Id": "12436611", "PostTypeId": "2", "Body": "<p><code>void foo(...)</code> will take variable arguments. And it will be called when there the no or type of argument does not match the provided argument list of other function with the same function name.</p>\n<pre><code>foo(0);             //This will call void foo(int) function\nfoo('A');           //This will call void foo(int) function\nfoo(\"str\");         //This will call void foo(...) function\nfoo(0, 1);          //This will call void foo(...) function\n</code></pre>\n<p><strong>NOTE:</strong></p>\n<p>Although the ellipsis works fine with function overloading, it is not highly recommend pursuing variadic functions. At least not until you have significantly more experience in C++ to understand the pitfalls. I would suggest its use only with the try catch block where there are situations when the error cannot be predicted.</p>\n", "LastEditorUserId": "1362735", "LastActivityDate": "2012-09-15T10:56:10.397", "Score": "0", "CreationDate": "2012-09-15T10:32:24.480", "ParentId": "12436557", "CommentCount": "0", "OwnerUserId": "1362735", "LastEditDate": "2012-09-15T10:56:10.397"}});