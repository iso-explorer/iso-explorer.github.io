post_cb({"8478338": {"ViewCount": "708", "Body": "<p>The code below fails to compile with g++ version 4.5.0 using the <code>-std=c++0x</code> switch. I get the following error message:</p>\n<pre><code>error: no match for 'operator+' in 'std::pow [with _Tp = float, _Up = int, typename __gnu_cxx::__promote_2&lt;_Tp, _Up&gt;::__type = double](((const std::complex&lt;float&gt;&amp;)((const std::complex&lt;float&gt;*)(&amp; x))), ((const int&amp;)((const int*)(&amp;2)))) + y'\n</code></pre>\n<p>I believe this relates to the <em>Assignable</em> requirement mentioned <a href=\"https://stackoverflow.com/questions/6090306/unexpected-compilation-problem-with-g-std-c0x\">here</a>. Should I define my own copy assignment operator for complex? If so, how?</p>\n<pre><code>#include &lt;complex&gt;\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  complex&lt;float&gt; x,y;\n  x = pow(x,2);      // ok\n  x = x        + y;  // ok\n  x = pow(x,2) + y;  // error\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "8478591", "Title": "C++11 copy assignment for std::complex in g++ 4.5 - no match for 'operator+'", "CreationDate": "2011-12-12T17:33:04.443", "Id": "8478338", "CommentCount": "5", "LastEditDate": "2017-05-23T12:20:12.120", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2011-12-12T17:52:39.393", "Score": "6", "OwnerUserId": "2023370", "Tags": "<c++><operator-overloading><c++11><complextype>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_8478338_8478591_2": {"length": 14, "quality": 1.0, "section_id": 3476}, "so_8478338_8478591_1": {"length": 15, "quality": 1.0, "section_id": 3476}, "so_8478338_8478591_0": {"length": 14, "quality": 1.0, "section_id": 3476}, "so_8478338_8478591_3": {"length": 12, "quality": 1.0, "section_id": 3476}}, "n3337": {"so_8478338_8478591_2": {"length": 14, "quality": 1.0, "section_id": 3345}, "so_8478338_8478591_1": {"length": 15, "quality": 1.0, "section_id": 3345}, "so_8478338_8478591_0": {"length": 14, "quality": 1.0, "section_id": 3345}, "so_8478338_8478591_3": {"length": 12, "quality": 1.0, "section_id": 3345}}, "n4659": {"so_8478338_8478591_2": {"length": 14, "quality": 1.0, "section_id": 4240}, "so_8478338_8478591_1": {"length": 15, "quality": 1.0, "section_id": 4240}, "so_8478338_8478591_0": {"length": 14, "quality": 1.0, "section_id": 4240}, "so_8478338_8478591_3": {"length": 12, "quality": 1.0, "section_id": 4240}}}, "8478591": {"Id": "8478591", "PostTypeId": "2", "Body": "<p>[cmplx.over]/p3 specifies additional overloads for <code>pow</code> when <code>complex</code> is involved:</p>\n<blockquote>\n<p id=\"so_8478338_8478591_0\">Function template pow shall have additional overloads sufficient to\n  ensure, for a call with at least one argument of type <code>complex&lt;T&gt;</code>:</p>\n<ol>\n<li><p id=\"so_8478338_8478591_1\">If either argument has type <code>complex&lt;long double&gt;</code> or type <code>long double</code>, then both arguments are effectively cast to <code>complex&lt;long\n  double&gt;</code>.</p></li>\n<li><p id=\"so_8478338_8478591_2\">Otherwise, if either argument has type <code>complex&lt;double&gt;</code>, <code>double</code>, or an integer type, then both arguments are effectively cast to\n  <code>complex&lt;double&gt;</code>.</p></li>\n<li><p id=\"so_8478338_8478591_3\">Otherwise, if either argument has type <code>complex&lt;float&gt;</code> or <code>float</code>, then both arguments are effectively cast to <code>complex&lt;float&gt;</code>.</p></li>\n</ol>\n</blockquote>\n<p>The 2 is being promoted to a double, and <code>pow(complex&lt;float&gt;, double)</code> returns a <code>complex&lt;double&gt;</code>.</p>\n", "LastActivityDate": "2011-12-12T17:52:39.393", "CommentCount": "3", "CreationDate": "2011-12-12T17:52:39.393", "ParentId": "8478338", "Score": "11", "OwnerUserId": "576911"}});