post_cb({"bq_ids": {"n4140": {"so_47569422_47570802_1": {"length": 7, "quality": 0.7, "section_id": 7153}, "so_47569422_47576570_0": {"length": 18, "quality": 0.5806451612903226, "section_id": 7153}, "so_47569422_47569422_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 7153}}, "n3337": {"so_47569422_47570802_1": {"length": 7, "quality": 0.7, "section_id": 6897}, "so_47569422_47576570_0": {"length": 18, "quality": 0.5806451612903226, "section_id": 6897}, "so_47569422_47569422_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 6897}}, "n4659": {"so_47569422_47570802_1": {"length": 8, "quality": 0.8, "section_id": 8658}, "so_47569422_47576570_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 8658}, "so_47569422_47576570_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 8656}}}, "47569422": {"ViewCount": "75", "Body": "<p>If I have following <code>A.h</code> file (header only):</p>\n<pre><code>#pragma once\n\nstruct A{\n  static inline struct Initializer{\n     Initializer(){\n        std::cout &lt;&lt; \"init A\" &lt;&lt; std::endl;\n     }\n  } initializer;\n};\n</code></pre>\n<p>Is it enough to <code>#include \"A.h\"</code> (from another header, which will be included by main.cpp) so <code>Initializer::Initializer()</code> be called before <code>main()</code>?</p>\n<p>I read that standard requires to initialize static variables with dynamic initialization only before its use.</p>\n<blockquote>\n<p id=\"so_47569422_47569422_0\">It is implementation-defined whether or not the dynamic initialization\n  (8.5, 9.4, 12.1, 12.6.1) of an object of namespace scope is done\n  before the first statement of main. If the initialization is deferred\n  to some point in time after the first statement of main, it shall\n  occur before the first use of any function or object defined in the\n  same translation unit as the object to be initialized.</p>\n</blockquote>\n<p>Does <code>#include</code> considered as \"use\"?</p>\n", "Title": "Do static inline variables need to be intialized before main?", "CreationDate": "2017-11-30T08:59:40.307", "LastActivityDate": "2017-11-30T15:08:11.140", "CommentCount": "3", "LastEditDate": "2017-11-30T09:25:30.350", "PostTypeId": "1", "LastEditorUserId": "5470596", "Id": "47569422", "Score": "3", "OwnerUserId": "1559666", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "47576570": {"Id": "47576570", "PostTypeId": "2", "Body": "<p>The latest working draft has more explicit wording in <a href=\"http://eel.is/c++draft/basic#start.dynamic-5\" rel=\"nofollow noreferrer\">[basic.start.dynamic]/5</a>:</p>\n<blockquote>\n<p id=\"so_47569422_47576570_0\">It is implementation-defined whether the dynamic initialization of a non-local inline variable with static storage duration is sequenced before the first statement of main or is deferred. If it is deferred, <strong>it strongly happens before any non-initialization odr-use of that variable</strong>. It is implementation-defined in which threads and at which points in the program such deferred dynamic initialization occurs.</p>\n</blockquote>\n<p>Where:</p>\n<blockquote>\n<p id=\"so_47569422_47576570_1\">A non-initialization odr-use is an odr-use ([basic.def.odr]) not caused directly or indirectly by the initialization of a non-local static or thread storage duration variable.</p>\n</blockquote>\n<hr/>\n<p>Thus, to answer your question:</p>\n<blockquote>\n<p id=\"so_47569422_47576570_2\">Is it enough to #include \"A.h\" (from another header, which will be included by main.cpp) so <code>Initializer::Initializer()</code> be called before main()?</p>\n</blockquote>\n<p>No. <code>#include</code> is not enough. You must actually <a href=\"http://en.cppreference.com/w/cpp/language/definition\" rel=\"nofollow noreferrer\">odr-use</a> it. </p>\n", "LastActivityDate": "2017-11-30T15:08:11.140", "CommentCount": "0", "CreationDate": "2017-11-30T15:08:11.140", "ParentId": "47569422", "Score": "1", "OwnerUserId": "2069064"}, "47570802": {"Id": "47570802", "PostTypeId": "2", "Body": "<p>As i read the site provided by tower120 in the comments of your question i found this:</p>\n<blockquote>\n<p id=\"so_47569422_47570802_0\">All non-local variables with static storage duration are initialized as part of program startup, before the execution of the main function begins (unless deferred, see below).</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/initialization\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/initialization</a></p>\n<p>If your static variable's initialisation would be deferred, the same site says</p>\n<blockquote>\n<p id=\"so_47569422_47570802_1\">If the initialization of an inline variable is deferred, it happens before the first odr-use of that specific variable.</p>\n</blockquote>\n<p>\"odr-uses\" are cases in which the address of a variable or function is accessed(via pointer or reference). So if you want <code>A::Initializer::Initializer()</code> to be called before <code>main()</code> you have to assign it's address(pointer of reference) to an non-deferred static variable which would cause <code>A::Initializer</code>'s first ord-use and <code>A::Initializer::Initializer()</code>'s call to happen before <code>main()</code></p>\n<p><code>#include</code> also isn't considered as \"use\" but as \"insert\". The Include directive copies the whole content of the file on it's position.</p>\n<p>Here is a simple example:</p>\n<p>A.h</p>\n<pre><code>public class A {\n    public:\n        A() {};\n    private:\n        int var;\n}\n</code></pre>\n<p>main.cpp</p>\n<pre><code>#include \"A.h\"\nint main()\n{\n    //Some Code\n}\n</code></pre>\n<p>will become this</p>\n<pre><code>public class A {\n    public:\n        A() {};\n    private:\n        int var;\n}\nint main()\n{\n    //Some Code\n}\n</code></pre>\n<p>That's why you need include guards or <code>#pragma once</code> to prevent two files including the same header code to define a class or variable twice.</p>\n", "LastEditorUserId": "8874817", "LastActivityDate": "2017-11-30T11:18:26.947", "Score": "0", "CreationDate": "2017-11-30T10:09:31.987", "ParentId": "47569422", "CommentCount": "4", "OwnerUserId": "8874817", "LastEditDate": "2017-11-30T11:18:26.947"}});