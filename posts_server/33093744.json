post_cb({"bq_ids": {"n4140": {"so_33093744_33093821_0": {"length": 31, "quality": 0.96875, "section_id": 7003}}, "n3337": {"so_33093744_33093821_0": {"length": 31, "quality": 0.96875, "section_id": 6749}}, "n4659": {"so_33093744_33093821_0": {"length": 31, "quality": 0.96875, "section_id": 8500}}}, "33093814": {"Id": "33093814", "PostTypeId": "2", "Body": "<p>Once virtual always virtual. </p>\n<p>Since <code>foo</code> is virtual in <code>A</code> it will be virtual in all classes derived from <code>A</code> - whether or not they get the <code>virtual</code> keyword.</p>\n", "LastActivityDate": "2015-10-13T03:51:29.407", "CommentCount": "0", "CreationDate": "2015-10-13T03:51:29.407", "ParentId": "33093744", "Score": "2", "OwnerUserId": "221955"}, "33093744": {"ViewCount": "57", "Body": "<p>I'm experimneting with inheritance in C++.</p>\n<pre><code>struct A {\n    virtual void foo(){ std::cout &lt;&lt; \"foo()\" &lt;&lt; std::endl; }\n    void bar(){ std::cout &lt;&lt; \"bar()\" &lt;&lt; std::endl; }\n};\n\nstruct B : A{\n    void foo(){ std::cout &lt;&lt; \"derived foo()\" &lt;&lt; std::endl; }\n    void bar(){ std::cout &lt;&lt; \"derived bar()\" &lt;&lt; std::endl; }\n};\n\nstruct C : B {\n    void foo(){ std::cout &lt;&lt; \"derived derived foo()\" &lt;&lt; std::endl; }\n    void bar(){ std::cout &lt;&lt; \"derived derived bar()\" &lt;&lt; std::endl; }\n};\n\nint main()\n{\n\n    B* b = new C();\n    b-&gt;foo();  //derived derived foo()\n    b-&gt;bar();  //derived bar()\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/93196976b9004a42\" rel=\"nofollow\">LIVE DEMO</a></p>\n<p>Since, the function <code>foo</code> declared as non-virtual in the <code>struct B</code> I expected that <code>B</code>'s function would be called. But <code>foo</code> which one from <code>C</code> was. Why? I change the \"virtual status\" of the function in <code>B</code>. Why is it still virtual?</p>\n", "AcceptedAnswerId": "33093821", "Title": "Why is it allowed to overide non-virtual function?", "CreationDate": "2015-10-13T03:43:45.100", "Id": "33093744", "CommentCount": "2", "LastEditDate": "2015-10-13T03:47:57.407", "PostTypeId": "1", "LastEditorUserId": "4671213", "LastActivityDate": "2015-10-13T09:48:11.677", "Score": "1", "OwnerUserId": "4671213", "Tags": "<c++><function><virtual>", "AnswerCount": "3"}, "33093845": {"Id": "33093845", "PostTypeId": "2", "Body": "<p>Above mention answers are valid, but can we use <code>override</code> keyword, because</p>\n<pre><code>The override special identifier means that the compiler will check the\nbase class(es) to see if there is a virtual function with this exact\nsignature. And if there is not, the compiler will indicate an error.\n</code></pre>\n<p>so something like this is <code>struct B</code>:</p>\n<pre><code>void bar() override\n</code></pre>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2015-10-13T09:48:11.677", "Score": "1", "CreationDate": "2015-10-13T03:55:46.937", "ParentId": "33093744", "CommentCount": "0", "OwnerUserId": "3483291", "LastEditDate": "2015-10-13T09:48:11.677"}, "33093821": {"Id": "33093821", "PostTypeId": "2", "Body": "<p><code>foo()</code> is declared as virtual function in the base class <code>A</code>, so <code>foo()</code> in all the derived class will be virtual too.</p>\n<p>From the standard, 10.3$2 Virtual functions [class.virtual] (bold by me)</p>\n<blockquote>\n<p id=\"so_33093744_33093821_0\">If a virtual member function vf is declared in a class Base and in a\n  class Derived, derived directly or indirectly from Base, a member\n  function vf with the same name, parameter-type-list (8.3.5),\n  cv-qualification, and ref-qualifier (or absence of same) as Base::vf\n  is declared, then Derived::vf is also virtual (<strong>whether or not it is so</strong>\n<strong>declared</strong>) and it overrides Base::vf.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-10-13T06:34:55.160", "Score": "5", "CreationDate": "2015-10-13T03:52:51.720", "ParentId": "33093744", "CommentCount": "1", "OwnerUserId": "3309790", "LastEditDate": "2015-10-13T06:34:55.160"}});