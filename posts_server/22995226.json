post_cb({"bq_ids": {"n4140": {"so_22995226_22995621_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 5921}}, "n3337": {"so_22995226_22995621_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 5693}}, "n4659": {"so_22995226_22995621_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 7395}}}, "22995621": {"Id": "22995621", "PostTypeId": "2", "Body": "<p>It depends.</p>\n<p>The ISO/IEC 14882:1998 C++ standard (9.6 Bit-fields [class.bit]) says:</p>\n<blockquote>\n<p id=\"so_22995226_22995621_0\">Allocation of bit-fields within a class object is implementation-defined.\n  Alignment of bit-fields is implementation-defined.\n  Bit-fields are packed into some addressable allocation unit.\n  [Note: bit-fields straddle allocation units on some machines and not on others. Bit-fields are assigned right-to-left on some machines, left-to-right on others. ]</p>\n</blockquote>\n<p>So\u2026</p>\n<ol>\n<li>It's implementation defined.</li>\n<li>It's not an illegal declaration.</li>\n<li>There's no portable way to force the type to be as small as possible and you don't need to declare every bit field as <code>uint64_t</code> if it fits in a <code>uint8_t</code>.</li>\n</ol>\n", "LastActivityDate": "2014-04-10T18:01:34.630", "CommentCount": "0", "CreationDate": "2014-04-10T18:01:34.630", "ParentId": "22995226", "Score": "2", "OwnerUserId": "2866898"}, "22995335": {"Id": "22995335", "PostTypeId": "2", "Body": "<p>How the bit fields are layed out is implementation defined;\nthere's no guarantee that you'll get either of these.  But\na change in type does not require that the compiler go to some\nnew boundary.  (On the other hand, using things like <code>uint16_t</code>\nas a bit field type is a bit silly.  The only reason to use\n<code>uint16_t</code> is that for some reason, you need exactly 16\nbits\u2014a rarity in itself\u2014and if you're using bit\nfields, you'll obviously not get 16 bits.) </p>\n", "LastActivityDate": "2014-04-10T17:46:44.377", "CommentCount": "3", "CreationDate": "2014-04-10T17:46:44.377", "ParentId": "22995226", "Score": "1", "OwnerUserId": "649665"}, "22995226": {"ViewCount": "79", "Body": "<p>I'm trying to get a definitive answer to this question.\nConsider the following:</p>\n<pre><code>struct MyStruct {\n    uint16_t a : 4;\n    uint8_t b : 4;\n}\n</code></pre>\n<p>Is this correct?</p>\n<pre><code>+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n| 15 | 14 | 13 | 12 | 11 | 10 |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |\n+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n|                                       |         b         |         a         |\n+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n</code></pre>\n<p>Or is this correct?</p>\n<pre><code>+----+----+----+----+----+----+----+----+-----+----+----+----+----+----+----+----+----+\n|    | 22 | 21 | 20 | 19 | 18 | 17 | 16 | ... |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |\n+----+----+----+----+----+----+----+----+-----+----+----+----+----+----+----+----+----+\n|                   |         b         | ... |                   |         a         |\n+----+----+----+----+----+----+----+----+-----+----+----+----+----+----+----+----+----+\n</code></pre>\n<p>I guess my question is three folds.<br>\n1. Does changing the type in the declaration sequence move the \"cursor\" to the next type boundary?<br>\n2. Is this an illegal declaration?<br>\n3. What do I do if I want the type to be the smallest size to represent its content? Assume I have a block of 64 bits that I want to split into bit fields. Do I need to declare every bit field as <code>uint64_t myVar : 4</code> even if <code>myVar</code> fits into a <code>uint8_t</code>?</br></br></br></p>\n", "AcceptedAnswerId": "22995335", "Title": "Do bit field types need to be the same?", "CreationDate": "2014-04-10T17:41:23.760", "Id": "22995226", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-04-10T18:01:34.630", "Score": "3", "OwnerUserId": "701069", "Tags": "<c++><objective-c><c>", "AnswerCount": "2"}});