post_cb({"13674413": {"ParentId": "13674368", "CommentCount": "0", "Body": "<p>You are trying to define S (the typedef) which clashes with \"S\" (the struct name).</p>\n", "OwnerUserId": "1045800", "PostTypeId": "2", "Id": "13674413", "Score": "0", "CreationDate": "2012-12-02T22:06:23.257", "LastActivityDate": "2012-12-02T22:06:23.257"}, "13674512": {"ParentId": "13674368", "LastEditDate": "2012-12-02T22:49:10.603", "CommentCount": "2", "CreationDate": "2012-12-02T22:16:09.837", "OwnerUserId": "187690", "LastEditorUserId": "187690", "PostTypeId": "2", "Id": "13674512", "Score": "5", "Body": "<p>C++ does allow you to typedef an existing class name, but only in a very restricted way. Once you declared your <code>struct S</code> you can do</p>\n<pre><code>typedef struct S S;\n</code></pre>\n<p>but you cannot do </p>\n<pre><code>typedef struct S *S; // ERROR\n</code></pre>\n<p>or</p>\n<pre><code>typedef int S; // ERROR\n</code></pre>\n<p>In the first case the fact that you are redefining <code>S</code> as a <em>pointer</em> is what breaks it.</p>\n<p>The language specification says in 7.1.3/2</p>\n<blockquote>\n<p id=\"so_13674368_13674512_0\">In a given non-class scope, a typedef specifier can be used to\n  redefine the name of any type declared in that scope to refer to the\n  type to which it already refers.</p>\n</blockquote>\n<p>\"Already refers\" is the key part. In simple words, you can redefine a class name to stand for <em>the same</em> class type, but not for a <em>pointer</em> to the class type or anything else.</p>\n<hr>\n<p>The aforementioned part of C++ standard is also what allows you to write repetitive typedefs like</p>\n<pre><code>typedef int T;\ntypedef int T;\ntypedef int T;\n</code></pre>\n<p>which would be illegal in C.</p>\n</hr>", "LastActivityDate": "2012-12-02T22:49:10.603"}, "13674448": {"ParentId": "13674368", "CommentCount": "0", "Body": "<p>This would be okay in C because struct names do not clash with type names - the struct name would be <code>struct S</code> and the type name would be just <code>S</code>. However, in C++ all names are considered to come from the same pool of names, so the two names in your example will clash.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "13674448", "Score": "1", "CreationDate": "2012-12-02T22:09:27.570", "LastActivityDate": "2012-12-02T22:09:27.570"}, "bq_ids": {"n4140": {"so_13674368_13674512_0": {"section_id": 5409, "quality": 1.0, "length": 15}}, "n3337": {"so_13674368_13674512_0": {"section_id": 5204, "quality": 1.0, "length": 15}}, "n4659": {"so_13674368_13674512_0": {"section_id": 6831, "quality": 1.0, "length": 15}}}, "13674368": {"CommentCount": "1", "ViewCount": "6393", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-12-02T22:01:48.270", "LastActivityDate": "2012-12-02T22:49:10.603", "Title": "Why am I getting redefinition; different basic types?", "AcceptedAnswerId": "13674512", "LastEditDate": "2017-05-23T12:14:13.203", "Id": "13674368", "Score": "2", "Body": "<p>Why am I getting an error when I try this in Visual C++?</p>\n<pre><code>struct S { };\ntypedef S *S;\n</code></pre>\n<p>Doesn't C++ <a href=\"https://stackoverflow.com/a/612476/541686\">let you <code>typedef</code> a name that was previously only declared as a <code>class</code> or <code>struct</code></a>?<br>\nOr am I misunderstanding what's going on?</br></p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "541686", "AnswerCount": "3"}});