post_cb({"33396622": {"ParentId": "33396435", "LastEditDate": "2015-10-28T16:40:27.303", "CommentCount": "0", "CreationDate": "2015-10-28T16:36:45.443", "OwnerUserId": "597607", "LastEditorUserId": "597607", "PostTypeId": "2", "Id": "33396622", "Score": "3", "Body": "<p>The standard (here N4527) says in <strong>3.2 One definition rule</strong>/6</p>\n<blockquote>\n<p id=\"so_33396435_33396622_0\">There can be more than one definition of a class type (Clause 9), enumeration type (7.2), inline function with\n  external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member\n  of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for\n  which some template parameters are not specified (14.7, 14.5.5) in a program provided that each definition\n  appears in a different translation unit, and provided the definitions satisfy the following requirements. Given\n  such an entity named D defined in more than one translation unit, then\n  (6.1)</p>\n<p id=\"so_33396435_33396622_1\">\u2014 each definition of D shall consist of the same sequence of tokens; and</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_33396435_33396622_2\">If the definitions of D satisfy all these requirements,\n  then the behavior is as if there were a single definition of D. If the definitions of D do not satisfy these\n  requirements, then the behavior is undefined.</p>\n</blockquote>\n<p>So replacing \"yes\" with \"no\" is an ODR-violation, causing undefined behavior.</p>\n<p>For the result of getting \"yes\" I can guess that the compiler picks one function at random, as they <em>have to</em> be identical.</p>\n<p>On the other hand, if you made the function <code>static</code>, you would have different local functions in each translation unit.</p>\n", "LastActivityDate": "2015-10-28T16:40:27.303"}, "33396435": {"CommentCount": "4", "CreationDate": "2015-10-28T16:27:39.977", "PostTypeId": "1", "AcceptedAnswerId": "33396622", "LastEditorUserId": "536086", "LastActivityDate": "2015-10-28T17:08:39.360", "LastEditDate": "2015-10-28T17:08:39.360", "ViewCount": "82", "FavoriteCount": "0", "Title": "Compiling same header with different compilation flag in different compilation units", "Id": "33396435", "Score": "2", "Body": "<p>I've encountered a strange problem that kind of breaks what I understand about a compilation unit's encapsulation. </p>\n<p>In a nutshell I have a common inlined function that I get from a header.<br>\nI include that into 2 different .cpp files, with a different <code>#define</code> macros.<br>\nBut I end up getting the same implementation in bot compilation units.</br></br></p>\n<p>Common.h:</p>\n<pre><code>#include &lt;iostream&gt;\n\ninline void printA()\n{\n#ifdef YES\n    std::cout &lt;&lt; \" yes\" &lt;&lt; std::endl;\n#else\n    std::cout &lt;&lt; \" no\" &lt;&lt; std::endl;\n#endif\n}\n</code></pre>\n<p>File1.h:</p>\n<pre><code>void print1();\n</code></pre>\n<p>File1.cpp:</p>\n<pre><code>#define YES\n#include \"Common.h\"\n#include \"File1.h\"\n\nvoid print1()\n{\n    printA();\n}\n</code></pre>\n<p>File2.h:</p>\n<pre><code>void print2();\n</code></pre>\n<p>File2.cpp</p>\n<pre><code>#include \"Common.h\"\n#include \"File2.h\"\nvoid print2()\n{\n    printA();\n}\n</code></pre>\n<p>main.cpp:</p>\n<pre><code>#include \"File1.h\"\n#include \"File2.h\"\n\nint main(int argc, char* argv[])\n{\n\n    print1();\n    print2();\n\n    return 0;\n}\n</code></pre>\n<p>The output to this example is:</p>\n<pre><code>yes\nyes\n</code></pre>\n<p>I would expect it to be:</p>\n<pre><code>yes\nno\n</code></pre>\n<p>So, why is the same implementation taken in both compilation units ?<br>\nThe common function is even inlined.... </br></p>\n<p>How can I get my \"expected\" result?</p>\n<p>And, why is the \"yes\" implementation chosen ? Just a matter of compilation order?</p>\n<p>BTW, I get the same results on GCC 4.8 and VS2012</p>\n", "Tags": "<c++><compilation><inline><conditional-compilation>", "OwnerUserId": "536086", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33396435_33396622_2": {"section_id": 7043, "quality": 1.0, "length": 16}, "so_33396435_33396622_1": {"section_id": 7043, "quality": 1.0, "length": 6}, "so_33396435_33396622_0": {"section_id": 7043, "quality": 0.9076923076923077, "length": 59}}, "n3337": {"so_33396435_33396622_2": {"section_id": 6788, "quality": 0.9375, "length": 15}, "so_33396435_33396622_1": {"section_id": 6788, "quality": 1.0, "length": 6}, "so_33396435_33396622_0": {"section_id": 6788, "quality": 0.9076923076923077, "length": 59}}, "n4659": {"so_33396435_33396622_2": {"section_id": 8540, "quality": 1.0, "length": 16}, "so_33396435_33396622_1": {"section_id": 8540, "quality": 1.0, "length": 6}, "so_33396435_33396622_0": {"section_id": 8540, "quality": 0.9076923076923077, "length": 59}}}});