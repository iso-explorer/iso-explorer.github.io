post_cb({"27851066": {"ParentId": "27851016", "CommentCount": "0", "Body": "<p>The main reason is simple: in C++, a function has a type, but it doesn't have a size.  Remember that the  size of something, in C++, is the number of bytes you have to add to a pointer to get to the next element in a table.  Since you can't put functions in a table, they have no size.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "27851066", "Score": "6", "CreationDate": "2015-01-08T22:56:16.327", "LastActivityDate": "2015-01-08T22:56:16.327"}, "27851016": {"CommentCount": "7", "ViewCount": "105", "CreationDate": "2015-01-08T22:52:46.823", "LastActivityDate": "2015-01-08T23:31:28.100", "Title": "Why typeid on function is ok while sizeof is not", "PostTypeId": "1", "Id": "27851016", "Score": "1", "Body": "<p>Was fooling around in C++ when discovered this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n#include &lt;boost/core/demangle.hpp&gt;\n\nint main(int argc, char *argv[]) {\n    using namespace std;\n    using boost::core::demangle;\n\n    cout \n        &lt;&lt; demangle(typeid(void()).name()) &lt;&lt; endl // ok so far\n        &lt;&lt; sizeof(void()) &lt;&lt; endl; // error here: invalid application of 'sizeof' to a function type\n}\n</code></pre>\n<p>I cannot understand why I can get type_info of function type, but not the size of it.<br>\nSome context on how C++ sees functions might be helpful.</br></p>\n", "Tags": "<c++><function><syntax><sizeof><typeid>", "OwnerUserId": "2551720", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27851016_27851448_1": {"section_id": 6078, "quality": 0.7692307692307693, "length": 10}, "so_27851016_27851448_0": {"section_id": 6076, "quality": 0.873015873015873, "length": 55}}, "n3337": {"so_27851016_27851448_1": {"section_id": 5846, "quality": 0.7692307692307693, "length": 10}, "so_27851016_27851448_0": {"section_id": 5844, "quality": 0.8888888888888888, "length": 56}}, "n4659": {"so_27851016_27851448_1": {"section_id": 7574, "quality": 0.7692307692307693, "length": 10}, "so_27851016_27851448_0": {"section_id": 7572, "quality": 0.6666666666666666, "length": 42}}}, "27851448": {"ParentId": "27851016", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_27851016_27851448_0\"><code>[C++11: 5.3.3/1]:</code> The <code>sizeof</code> operator yields the number of bytes in the object representation of its operand. The operand is either an expression, which is an unevaluated operand (Clause 5), or a parenthesized <em>type-id</em>. <strong>The <code>sizeof</code> operator shall not be applied to an expression that has function or incomplete type</strong>, to an enumeration type whose underlying type is not fixed before all its enumerators have been declared, to the parenthesized name of such types, or to an lvalue that designates a bit-field. <code>sizeof(char)</code>, <code>sizeof(signed char)</code> and <code>sizeof(unsigned char)</code> are <code>1</code>. The result of <code>sizeof</code> applied to any other fundamental type (3.9.1) is implementation-defined. <em>[..]</em></p>\n</blockquote>\n<p>It simply doesn't make sense; <code>sizeof</code> measures the space taken up in memory by a piece of data: a variable or a constant, with a value that you can read. But a function is not a piece of data, and it has no size.</p>\n<p>The amount of memory taken by the program code itself, although the program <em>is</em> loaded into memory at runtime, is never considered by any language features within the program.</p>\n<p>The fact that a function has a type is not relevant! The above quote also means that <code>sizeof(void)</code> is invalid.</p>\n<p>Note, though:</p>\n<blockquote>\n<p id=\"so_27851016_27851448_1\"><code>[C++11: 5.3.3/3]:</code> The <code>sizeof</code> operator can be applied to a pointer to a function, but shall not be applied directly to a function.</p>\n</blockquote>\n<p>\u2026which is relevant, I guess, though not particularly interesting.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "27851448", "Score": "0", "CreationDate": "2015-01-08T23:31:28.100", "LastActivityDate": "2015-01-08T23:31:28.100"}});