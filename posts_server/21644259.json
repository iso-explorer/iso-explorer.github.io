post_cb({"21644333": {"ParentId": "21644259", "CommentCount": "0", "Body": "<p>You can just overload the constructor instead:</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo {\npublic:\n  template&lt;typename... Ts&gt;\n  Foo(Ts&amp;... args) {\n    // ...\n  }\n\n  // template&lt;&gt;  &lt;- REMOVE THIS\n  Foo(int i) {\n    // ...\n  }\n};\n</code></pre>\n<p>Overload resolution will prefer the non-template overload so doing <code>Foo&lt;MyType&gt; f(1234);</code> would choose <code>Foo&lt;MyType&gt;::Foo(int);</code>.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/cee2f8a160a34621\" rel=\"nofollow\"><strong>LIVE EXAMPLE</strong></a> (I've modified the variadic to be <code>const</code> for it to accept temporaries for the sake of the example).</p>\n<p>Note that the position of the type modifier in your variadic function is wrong. It should be with the type, on the left side of <code>...</code>:</p>\n<pre><code>Foo(Ts&amp;...  args)\n</code></pre>\n", "OwnerUserId": "1619294", "PostTypeId": "2", "Id": "21644333", "Score": "2", "CreationDate": "2014-02-08T09:32:44.950", "LastActivityDate": "2014-02-08T09:32:44.950"}, "21644341": {"ParentId": "21644259", "CommentCount": "0", "Body": "<p>member function and by extension constructors are not specialize-able without specializing the outer template completely.</p>\n<p>Just write the ctor with an int not template will works here.</p>\n<blockquote>\n<p id=\"so_21644259_21644341_0\">14.7.3p18: \"In an explicit specialization declaration for a member of a class template or a member template that appears in namespace scope,\n  the member template and some of its enclosing class templates may\n  remain unspecialized, except that the declaration shall not explicitly\n  specialize a class member template if its enclosing class templates\n  are not explicitly specialized as well.\"</p>\n</blockquote>\n", "OwnerUserId": "2694444", "PostTypeId": "2", "Id": "21644341", "Score": "1", "CreationDate": "2014-02-08T09:33:03.777", "LastActivityDate": "2014-02-08T09:33:03.777"}, "bq_ids": {"n4140": {"so_21644259_21644259_0": {"section_id": 267, "quality": 0.5714285714285714, "length": 4}, "so_21644259_21644341_0": {"section_id": 278, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_21644259_21644259_0": {"section_id": 258, "quality": 0.5714285714285714, "length": 4}, "so_21644259_21644341_0": {"section_id": 269, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_21644259_21644259_0": {"section_id": 180, "quality": 0.5714285714285714, "length": 4}, "so_21644259_21644341_0": {"section_id": 285, "quality": 0.9722222222222222, "length": 35}}}, "21644259": {"CommentCount": "1", "ViewCount": "2403", "CreationDate": "2014-02-08T09:23:17.023", "LastActivityDate": "2014-02-08T09:47:22.750", "Title": "Variadic template constructor speciliazation in template class", "AcceptedAnswerId": "21644333", "PostTypeId": "1", "Id": "21644259", "Score": "2", "Body": "<p>I want to be able to specialize the ctor of a class the following way:</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo {\npublic:\n  template&lt;typename... Ts&gt;\n  Foo(Ts... &amp; args) {\n    // ...\n  }\n\n  template&lt;&gt;\n  Foo(int i) {\n    // ...\n  }\n};\n</code></pre>\n<p>I get the following error:</p>\n<blockquote>\n<p id=\"so_21644259_21644259_0\">error: explicit specialization in non-namespace scope \u2018class Foo\u2019</p>\n</blockquote>\n<p>If I try to move the specialization outside the class, like this:</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo {\npublic:\n  template&lt;typename... Ts&gt;\n  Foo(Ts &amp;... args) {\n    // ...\n  }\n};\n\ntemplate&lt;typename T&gt;\ntemplate&lt;int&gt;\nFoo&lt;T&gt;::Foo(int i) {\n    // ...\n}\n</code></pre>\n<p>I get the following errors:</p>\n<blockquote>\n<p id=\"so_21644259_21644259_1\">error: prototype for \u2018Foo::Foo(int)\u2019 does not match any in class\n  \u2018Foo\u2019</p>\n<p id=\"so_21644259_21644259_2\">error: candidate is: template template\n  Foo::Foo(Ts&amp; ...)</p>\n</blockquote>\n<p>How do I do this correctly?</p>\n", "Tags": "<c++><templates><c++11><constructor><variadic-templates>", "OwnerUserId": "3286767", "AnswerCount": "2"}});