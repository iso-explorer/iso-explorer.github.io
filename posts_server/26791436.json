post_cb({"26791436": {"CommentCount": "7", "ViewCount": "285", "PostTypeId": "1", "LastEditorUserId": "187690", "CreationDate": "2014-11-06T23:33:10.583", "LastActivityDate": "2014-11-07T09:32:27.570", "Title": "Legacy standard C library headers and overloaded C++ functions", "AcceptedAnswerId": "26791720", "LastEditDate": "2014-11-06T23:45:44.373", "Id": "26791436", "Score": "5", "Body": "<p>C++ language standard says in <strong>D.5</strong></p>\n<blockquote>\n<p id=\"so_26791436_26791436_0\"><strong>2</strong> Every C header, each of which has a name of the form <code>name.h</code>, behaves\n  as if each name placed in the standard library namespace by the\n  corresponding <code>cname</code> header is placed within the global namespace\n  scope. It is unspecified whether these names are first declared or\n  defined within namespace scope (3.3.6) of the namespace <code>std</code> and are\n  then injected into the global namespace scope by explicit\n  using-declarations (7.3.3). </p>\n<p id=\"so_26791436_26791436_1\"><strong>3</strong> [ Example: The header <code>&lt;cstdlib&gt;</code>\n  assuredly provides its declarations and definitions within the\n  namespace <code>std</code>. It may also provide these names within the global\n  namespace. The header <code>&lt;stdlib.h&gt;</code> assuredly provides the same\n  declarations and definitions within the global namespace, much as in\n  the C Standard. It may also provide these names within the namespace\n  <code>std</code>. \u2014end example ]</p>\n</blockquote>\n<p>This seems to state rather explicitly (\"... each name ...\", \"...the same declarations...\") that the old-style <code>&lt;name.h&gt;</code> headers must provide the same set of declarations as the new-style <code>&lt;cname&gt;</code> headers, but in global namespace. No exception is made for C++-specific overloaded versions of various C functions, for one example.</p>\n<p>That appears to mean that <code>&lt;math.h&gt;</code> must provide three versions of <code>sin</code> function: <code>sin(float)</code>, <code>sin(double)</code> and <code>sin(long double)</code> in global namespace. This, in turn, means that the following C++ code should fail overload resolution </p>\n<pre><code>#include &lt;math.h&gt;\n\nint main() {\n  sin(1);\n}\n</code></pre>\n<p>It does fail under MSVC++ compiler, but it compiles successfully under GCC and Clang. So, does GCC just ignore the standard requirement with regard to deprecated old-style headers? Or do I somehow misinterpret the wording in the standard?</p>\n", "Tags": "<c++><legacy><standard-library>", "OwnerUserId": "187690", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26791436_26791436_1": {"section_id": 4908, "quality": 0.8536585365853658, "length": 35}, "so_26791436_26791436_0": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}}, "n3337": {"so_26791436_26791436_1": {"section_id": 4703, "quality": 0.8536585365853658, "length": 35}, "so_26791436_26791436_0": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_26791436_26791436_1": {"section_id": 6317, "quality": 0.8536585365853658, "length": 35}, "so_26791436_26791436_0": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}}}, "26791720": {"ParentId": "26791436", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>Thanks to @hvd's comments I have seen the light, it turns out MSVC is correct and GCC should be complaining about the ambiguity as well.</p>\n<p>The only differences between including <code>&lt;cmath&gt;</code> vs <code>&lt;math.h&gt;</code> are where the names are originally scoped, which is in <code>namespace std</code> for the former, and the global namespace for the latter (implementations are free to provide the names in the other namespace as well, but this isn't mandated), and the fact that including the <code>.h</code> variants of C headers is deprecated.</p>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2014-11-07T09:32:27.570", "Id": "26791720", "Score": "2", "CreationDate": "2014-11-06T23:58:22.030", "LastActivityDate": "2014-11-07T09:32:27.570"}});