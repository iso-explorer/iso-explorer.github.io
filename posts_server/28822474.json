post_cb({"bq_ids": {"n4140": {"so_28822474_28822474_1": {"section_id": 744, "quality": 1.0, "length": 8}, "so_28822474_28822474_0": {"section_id": 730, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_28822474_28822474_1": {"section_id": 733, "quality": 1.0, "length": 8}, "so_28822474_28822474_0": {"section_id": 719, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_28822474_28822474_0": {"section_id": 760, "quality": 0.9090909090909091, "length": 10}, "so_28822474_28822474_1": {"section_id": 802, "quality": 1.0, "length": 8}}}, "28822602": {"ParentId": "28822474", "CommentCount": "2", "Body": "<p>This creates a copy of the element:</p>\n<pre><code>auto pr = *r.first;\n</code></pre>\n<p>Try something like this:</p>\n<pre><code>auto pr = r.first;\npr-&gt;second = st35;\n</code></pre>\n<p>Or use a reference</p>\n<pre><code>auto &amp;pr = *r.first;\n</code></pre>\n", "OwnerUserId": "2362671", "PostTypeId": "2", "Id": "28822602", "Score": "2", "CreationDate": "2015-03-03T01:34:29.023", "LastActivityDate": "2015-03-03T01:34:29.023"}, "28822474": {"CommentCount": "1", "ViewCount": "144", "CreationDate": "2015-03-03T01:19:55.010", "LastActivityDate": "2015-03-03T01:36:06.530", "Title": "Can I assign a value to the element pointed at by the iterator returned by map::emplace?", "AcceptedAnswerId": "28822602", "PostTypeId": "1", "Id": "28822474", "Score": "1", "Body": "<p><code>map::emplace</code> returns a <code>pair&lt;iterator,bool&gt;</code>.</p>\n<p>The C++ standard at 23.2.3 Sequence containers paragraph 11 (I think that's the numbering scheme, anyway, near the top of page 755 of the Nov 2014 draft) says about emplace:</p>\n<blockquote>\n<p id=\"so_28822474_28822474_0\">The iterator returned from <code>a.emplace(p. args)</code> points to the new\n  element constructed from <code>args</code> into <code>a</code>.</p>\n</blockquote>\n<p>Then in Table 102 on associative containers on page 760 it says about <code>a_uniq.emplace(args)</code> that</p>\n<blockquote>\n<p id=\"so_28822474_28822474_1\">the iterator component of the pair points to the element with key\n  equivalent to the key of <code>t</code>.</p>\n</blockquote>\n<p>So I took \"points to the element\" to mean that it, you know, points to the element in the map, and that you can overwrite the value in the map by assignment.  (And the key as well, which would probably break the map.)  Because if they didn't want you to do that the first element of the return value pair would be a <code>const_iterator</code>, not an <code>iterator</code>, right?</p>\n<p>But not so.  The following code (also see it at <a href=\"http://ideone.com/hZKlDg\" rel=\"nofollow\">ideone</a>) shows that whatever it is you're assigning to isn't the value in the map:</p>\n<pre class=\"lang-cc prettyprint-override\"><code>#include &lt;map&gt;\n#include &lt;stdio.h&gt;\n\n\nstruct st\n{\n    int a;\n    int b;\n\n    st(int aa = 0, int bb = 0) : a(aa), b(bb) { }\n};\n\nvoid verify(std::string msg, std::map&lt;int,st&gt;&amp; m, int key, int a, int b)\n{\n    const st st = m[key];\n    if (st.a == a &amp;&amp; st.b == b)\n    {\n        printf(\"ok  %s: a == %d, b == %d\\n\", msg.c_str(), st.a, st.b);\n    }\n    else\n    {\n        printf(\"*** %s: a == %d (not %d), b == %d (not %d)\\n\", msg.c_str(), st.a, a, st.b, b);\n    }\n}\n\nint main(void)\n{\n    std::map&lt;int,st&gt; a_map;\n\n    st st11(1,1);\n    st st35(3,5);\n\n    a_map[9] = st11;\n    verify(\"m9 {1,1}\", a_map, 9, 1, 1);\n\n    auto r = a_map.emplace(9, st35);\n\n    printf(\"emplace {3,5} at 9: %s\\n\", r.second ? \"inserted\" : \"existing\");\n    verify(\"m9 {1,1}\", a_map, 9, 1, 1);\n\n    auto pr = *r.first;\n    pr.second = st35;\n\n    verify(\"m9 {3,5}\", a_map, 9, 3, 5);\n\n    return 0;\n}\n</code></pre>\n<p>Which outputs the following for VC++ 2012 and gcc-4.9.2:</p>\n<pre><code>ok  m9 {1,1}: a == 1, b == 1\nemplace {3,5} at 9: existing\nok  m9 {1,1}: a == 1, b == 1\n*** m9 {3,5}: a == 1 (not 3), b == 1 (not 5)\n</code></pre>\n<p>So obviously the iterator isn't pointing to the element in the actual map structure.</p>\n<p>What did I misinterpret here, in the standard (or the example code, or whatever)?</p>\n", "Tags": "<c++11>", "OwnerUserId": "751579", "AnswerCount": "1"}});