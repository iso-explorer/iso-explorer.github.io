post_cb({"12100873": {"Id": "12100873", "PostTypeId": "2", "Body": "<p>Is it possible?  Yes.  Is it good style?  Absolutely not.</p>\n<p>The preprocessor is not aware of C/C++ keywords, it only knows about preprocessor tokens and just does strict text replacement.</p>\n<p>Your example is resulting in an error because you're <code>#undef</code>ing it.  Once you undefine it, it reverts to its previous behavior.</p>\n<p>The only valid use I know of for doing something like this is to <a href=\"https://stackoverflow.com/questions/984878/what-is-the-possible-use-for-define-for-if-false-else-for\">work around a bug in an old compiler</a>, and that compiler is no longer relevant these days.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-23T22:26:52.070", "Score": "2", "CreationDate": "2012-08-23T22:26:52.070", "ParentId": "12100789", "CommentCount": "1", "OwnerUserId": "9530", "LastEditDate": "2017-05-23T11:59:23.733"}, "12100789": {"ViewCount": "2543", "Body": "<p>Is it possible to redefine a c++ keyword using #define?</p>\n<pre><code>#ifdef int\n#undef int \n#define int 2\n#endif\nint main(){\n    //Do something with int\n}\n</code></pre>\n<p>I can't see the output in this case but i want to understand what happens internally. The reason I don't have #define is that I found that it is possible to #define a reserved keyword if you don't use a standard header file. I also tried to do run the following code.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#ifdef int\n#undef int \n#endif\nint main(){\n    cout&lt;&lt;int;\n}\n</code></pre>\n<p>But te above throws the error at cout line.</p>\n", "AcceptedAnswerId": "12100873", "Title": "Redefine(#define) reserved c++ key word", "CreationDate": "2012-08-23T22:19:02.977", "Id": "12100789", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-12-16T15:29:14.590", "Score": "0", "OwnerUserId": "1139077", "Tags": "<c++>", "AnswerCount": "4"}, "12100931": {"Id": "12100931", "PostTypeId": "2", "Body": "<p>Technically it works but it probably won't do you much good. If you want to use the standard C++ library you are not allowed define any of the keywords or any of a set of other names according to 17.6.4.3.1 [macro.names] paragraph 2:</p>\n<blockquote>\n<p id=\"so_12100789_12100931_0\">A translation unit shall not #define or #undef names lexically identical to keywords, to the identifiers listed in Table 3, or to the attribute-tokens described in 7.6.</p>\n</blockquote>\n", "LastActivityDate": "2012-08-23T22:33:03.813", "CommentCount": "0", "CreationDate": "2012-08-23T22:33:03.813", "ParentId": "12100789", "Score": "1", "OwnerUserId": "1120273"}, "12100892": {"Id": "12100892", "PostTypeId": "2", "Body": "<p>You <em>can</em>, but you shouldn't.</p>\n<p>In your examples, <code>int</code> doesn't get redefined, since it's wrapped in <code>#ifdef int</code>. That means \"only do this if there's already a preprocessor macro called <code>int</code>\", and there isn't.</p>\n<p>If you just wrote <code>#define int 2</code>, then all occurrences of <code>int</code> would be replaced by <code>2</code>; but then your code wouldn't compile since <code>2 main() {cout&lt;&lt;2;}</code> is nonsense.</p>\n<p><code>#undef</code> will not remove a keyword from the language; it only removes preprocessor macros previously defined using <code>#define</code>.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2012-08-23T22:33:28.883", "Score": "0", "CreationDate": "2012-08-23T22:28:27.683", "ParentId": "12100789", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2012-08-23T22:33:28.883"}, "bq_ids": {"n4140": {"so_12100789_12100931_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 6306}}, "n3337": {"so_12100789_12100931_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 6063}}, "n4659": {"so_12100789_12100931_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 7817}}}, "34315919": {"Id": "34315919", "PostTypeId": "2", "Body": "<p>If you're don't use the standard libraries you're allowed to do so. In fact the preprocessor shouldn't distinguish between reserved and non-reserved words.</p>\n<p>However that's probably not why you run into problems. First of all your examples don't do what you probably think. The fault is that <code>int</code> is normally not a preprocessor defined macro. The <code>#ifdef int</code> directive will therefore skip the following lines up to the terminating <code>#endif</code>. </p>\n<p>What this means is that your second example expands to:</p>\n<pre><code>// stuff from iostream and possibly other headers \n\nint main(){\n    cout&lt;&lt;int;\n}\n</code></pre>\n<p>the fault is that <code>cout&lt;&lt;int;</code> simply isn't allowed.</p>\n", "LastActivityDate": "2015-12-16T15:29:14.590", "CommentCount": "0", "CreationDate": "2015-12-16T15:29:14.590", "ParentId": "12100789", "Score": "0", "OwnerUserId": "4498329"}});