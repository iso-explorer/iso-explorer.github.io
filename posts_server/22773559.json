post_cb({"22773644": {"ParentId": "22773559", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The C++11 Standard actually gives the equivalent traditional loop code, which is a pretty rare approach for Standardese.  You'll find it in section 6.5.4:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/Xl97M.png\"/></p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/2gOKm.png\"/></p>\n<p>In the expansion, it's clear that the <code>end()</code> value from before the loop starts is saved and checked later.  Unfortunately, that iterator is invalidated by the first <code>insert()</code> call.  The rule on iterator invalidation:</p>\n<blockquote>\n<p id=\"so_22773559_22773644_0\">If no reallocation happens, all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n<p>Clearly <code>end()</code> is not \"before the insertion point\".</p>\n<p>Since the behavior of <code>insert(p, rv)</code> is \"Inserts a copy of <code>rv</code> before <code>p</code>.\", the insertion point is expressly <em>before</em> the iterator <code>p</code> (which is <code>v.begin()</code> here).  So the loop iterator <code>__begin</code> is also not \"before the insertion point\" on the first pass.</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2014-03-31T22:56:19.790", "Id": "22773644", "Score": "6", "CreationDate": "2014-03-31T22:45:45.937", "LastActivityDate": "2014-03-31T22:56:19.790"}, "22773559": {"CommentCount": "4", "AcceptedAnswerId": "22773644", "CreationDate": "2014-03-31T22:39:23.033", "LastActivityDate": "2014-03-31T22:56:19.790", "PostTypeId": "1", "ViewCount": "186", "FavoriteCount": "2", "Title": "how C++ ranged based loops work internally", "Id": "22773559", "Score": "1", "Body": "<p>I am trying to understand how C++ 11's for(type&amp; x : ) (&amp; stl's for_each) works internally and hoping someone can enlighten me. So the following code:</p>\n<pre><code>vector&lt;int&gt; v;\nint z=0;\nfor (int i = 0; i &lt; 5; ++i)\n    v.push_back(z++);\nfor (int&amp; i : v)\n{\n    printf(\" %i\", i);\n    v.insert(v.begin(), z++);\n}\n</code></pre>\n<p>prints 0 0 1 2 3.\nI would understand 0 0 0 0 0 or 0 1 2 3 4, but that output, I can't quite understand how? What does for(x:y) compile to?? Don't think this will matter much, but I am using clang 3.4.</p>\n<p>Thanks!</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1181950", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22773559_22773644_0": {"section_id": 986, "quality": 1.0, "length": 10}}, "n3337": {"so_22773559_22773644_0": {"section_id": 971, "quality": 1.0, "length": 10}}, "n4659": {"so_22773559_22773644_0": {"section_id": 1049, "quality": 1.0, "length": 10}}}});