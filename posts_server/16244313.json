post_cb({"16244313": {"CreationDate": "2013-04-26T20:00:19.097", "ViewCount": "1379", "Id": "16244313", "AcceptedAnswerId": "16244397", "Score": "7", "Title": "Does adding `noexcept(false)` benefit the code in any way?", "LastEditorUserId": "87234", "CommentCount": "0", "Body": "<p>Recently in my code I have been explicitly writing <code>noexcept(false)</code> on functions that I know do throw exceptions, mainly for people reading the code. However, I am wondering if this affects the behavior of my code or the way the compiler interprets it. Does it make any difference?</p>\n<p>Note: I am aware that destructors are implicitly noexcept and that you have to specify <code>noexcept(false)</code> to change that, I am wondering about other functions.</p>\n", "Tags": "<c++><c++11><noexcept>", "LastEditDate": "2013-04-26T20:14:11.730", "LastActivityDate": "2013-04-26T21:03:49.417", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1959975"}, "16245197": {"CommentCount": "3", "Body": "<p>In his book <a href=\"http://rads.stackoverflow.com/amzn/click/020170434X\" rel=\"nofollow\">More Exceptional C++</a>, <a href=\"http://www.gotw.ca/\" rel=\"nofollow\">Herb Sutter</a> has the following snippet (pp. 130):</p>\n<blockquote>\n<p id=\"so_16244313_16245197_0\">The right answer to the Example 19-1 is much simpler:</p>\n<pre><code>// Example 19-4: The right solution\n//\nT::~T() /* throw() */\n{\n // ... code that won't throw ...\n}\n</code></pre>\n<p id=\"so_16244313_16245197_1\">Example 19-4 demonstrates how to make a design decision instead of waffling. </p>\n<p id=\"so_16244313_16245197_2\">Note that the <code>throw()</code> throws-nothing exception specification\n  is only a comment. <strong>That's the style I've chosen to follow, in part\n  because it turns out that exception specifications confer a lot less\n  benefit than they're worth</strong>. Whether or not you decide to actually write the specification is a matter of taste.</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>So, I feel I must point out that one of the leading experts in C++ exception-safe code seems to be against the whole concept of adding exception specifications for the compiler to use (but still leaving it in the code for the programmers to understand).</p>\n<p>Just thought it may be interesting info...</p>\n", "CreationDate": "2013-04-26T21:03:49.417", "ParentId": "16244313", "Id": "16245197", "LastActivityDate": "2013-04-26T21:03:49.417", "PostTypeId": "2", "Score": "-1", "OwnerUserId": "104427"}, "bq_ids": {"n4140": {"so_16244313_16244397_0": {"length": 12, "quality": 1.0, "section_id": 3374}}, "n3337": {"so_16244313_16244397_0": {"length": 12, "quality": 1.0, "section_id": 3244}}}, "16244397": {"CommentCount": "9", "Body": "<p>Having no exception-specifier and explicitly stating <code>noexcept(false)</code> are equivalent, see \u00a715.4/12:</p>\n<blockquote>\n<p id=\"so_16244313_16244397_0\">A function with no exception-specification or with an exception-specification of the form <code>noexcept(constant-expression)</code> where the constant-expression yields <code>false</code> allows all exceptions. </p>\n</blockquote>\n<p>So the compiler should not distinguish between them when considering exceptions.</p>\n<hr>\n<p>More importantly, there's no need for you to be tacking on <code>noexcept(false)</code> to your functions. As a C++ developer, you should assume every function throws by default (which is why the standard takes this stance), so you're adding no new information by writing it out; it's a waste of time for everyone.</p>\n<p>Rather, do mark the special case where a function <em>definitely</em> does not throw with <code>noexcept</code>, and do mark the cases where a function <em>may</em> throw depending on some condition with <code>noexcept(condition)</code>.</p>\n<p>If your function is purposefully the source of some exception <code>E</code>, write that in your documentation.</p>\n</hr>", "CreationDate": "2013-04-26T20:07:16.547", "ParentId": "16244313", "Id": "16244397", "LastActivityDate": "2013-04-26T20:07:16.547", "PostTypeId": "2", "Score": "10", "OwnerUserId": "87234"}});