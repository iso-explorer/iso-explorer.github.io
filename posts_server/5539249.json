post_cb({"5543264": {"ParentId": "5539249", "CommentCount": "10", "Body": "<p>David already identified the issue, namely a conflict between:</p>\n<ul>\n<li><a href=\"http://www.cplusplus.com/reference/clibrary/cctype/tolower/\" rel=\"noreferrer\"><code>&lt;cctype&gt;</code></a>'s <code>int tolower(int c)</code></li>\n<li><a href=\"http://www.cplusplus.com/reference/std/locale/tolower/\" rel=\"noreferrer\"><code>&lt;locale&gt;</code></a>'s <code>template &lt;typename charT&gt; charT tolower(charT c, locale const&amp; loc)</code></li>\n</ul>\n<p>Using the first is much easier, but is undefined behavior (unfortunately) as soon as you deal with anything else than lower-ascii (0-127) in signed chars. <em>By the way, I do recommend defining <code>char</code> as unsigned.</em></p>\n<p>The template version would be nice, but you would have to use <code>bind</code> to provide the second parameter, and it's bound to be ugly...</p>\n<p>So, may I introduce the <a href=\"http://www.boost.org/doc/libs/1_46_1/doc/html/string_algo.html\" rel=\"noreferrer\">Boost String Algorith</a>m library ?</p>\n<p>And more importantly: <a href=\"http://www.boost.org/doc/libs/1_46_1/doc/html/boost/algorithm/to_lower.html\" rel=\"noreferrer\"><code>boost::to_lower</code></a> :)</p>\n<pre><code>boost::to_lower(s);\n</code></pre>\n<p>Expressiveness is desirable.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "5543264", "Score": "6", "CreationDate": "2011-04-04T19:22:11.763", "LastActivityDate": "2011-04-04T19:22:11.763"}, "37438120": {"ParentId": "5539249", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Let's look at a list of options starting with the worst and moving to the best. We'll list them here and discuss them below:</p>\n<ol>\n<li><code>transform(cbegin(s), cend(s), begin(s), ::tolower)</code></li>\n<li><code>transform(cbegin(s), cend(s), begin(s), static_cast&lt;int(*)(int)&gt;(tolower))</code></li>\n<li><code>transform(cbegin(s), cend(s), begin(s), [](const unsigned char i){ return tolower(i); })</code></li>\n</ol>\n<hr>\n<p>The code in your question, <code>transform(s.begin(), s.end(), s.begin(), tolower)</code> will produce an error like:</p>\n<blockquote>\n<p id=\"so_5539249_37438120_0\">No matching function for call to <code>transform(std::basic_string&lt;char&gt;::iterator, std::basic_string&lt;char&gt;::iterator, std::basic_string&lt;char&gt;::iterator, &lt;unresolved overloaded function type&gt;)</code></p>\n</blockquote>\n<p>The reason that you were getting an \"unresolved overloaded function type\" is there are 2 <code>tolower</code>s in the <code>std</code> namespace:</p>\n<ol>\n<li>The <code>locale</code> library defines <a href=\"http://en.cppreference.com/w/cpp/locale/tolower\" rel=\"nofollow noreferrer\"><code>template &lt;typename T&gt; T tolower(T, const locale&amp;)</code></a></li>\n<li>The <code>cctype</code> library defines <a href=\"http://en.cppreference.com/w/cpp/string/byte/tolower\" rel=\"nofollow noreferrer\"><code>int tolower(int)</code></a></li>\n</ol>\n<p><strong>1</strong> is the <a href=\"https://stackoverflow.com/a/5539423/2642059\">solution offered by davka</a>. It addresses your error by leveraging the fact that <code>locale</code>'s <code>tolower</code> is not defined in the global namespace. </p>\n<p>Depending upon your situation <code>locale</code>'s <code>tolower</code> may merit consideration. You can find a comparison of the <code>tolower</code>s here: <a href=\"https://stackoverflow.com/q/37482246/2642059\">Which tolower in C++?</a></p>\n<hr>\n<p>Unfortunately <strong>1</strong> depends upon <code>cctype</code>'s <code>tolower</code> being defined in the global namespace. Let's look at why that may not be the case:</p>\n<p>You are rightly using <code>#include &lt;cctype&gt;</code>, as doing <code>#include &lt;ctype.h&gt;</code> has been deprecated in C++: <a href=\"http://en.cppreference.com/w/cpp/header\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/header</a></p>\n<p>But the C++ standard states in D.3[depr.c.headers]2 of the declarations in the headers:</p>\n<blockquote>\n<p id=\"so_5539249_37438120_1\">It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace <code>std</code> and are then injected into the global namespace scope by explicit using-declarations (7.3.3)</p>\n</blockquote>\n<p>So the only way that we can guarantee our code is implementation independent is to use a <code>tolower</code> from <code>namespace std</code>. <strong>2</strong> is the <a href=\"https://stackoverflow.com/a/5539302/2642059\">solution offered by David Rodr\u00edguez - dribeas</a>. It leverages the fact that <a href=\"http://en.cppreference.com/w/cpp/language/static_cast#Notes\" rel=\"nofollow noreferrer\"><code>static_cast</code></a> can: </p>\n<blockquote>\n<p id=\"so_5539249_37438120_2\">Be used to disambiguate function overloads by performing a function-to-pointer conversion to specific type</p>\n</blockquote>\n<p>Before we move on, let me comment that if you find <code>int (*)(int)</code> to be a bit confusing you can read more on function pointer syntax <a href=\"http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_functions\" rel=\"nofollow noreferrer\">here</a>.</p>\n<hr>\n<p>Sadly there is <a href=\"http://en.cppreference.com/w/cpp/string/byte/tolower#Parameters\" rel=\"nofollow noreferrer\">one other issue</a> with <code>tolower</code>'s input argument, if it:</p>\n<blockquote>\n<p id=\"so_5539249_37438120_3\">Is not representable as unsigned char and does not equal EOF, the behavior is undefined</p>\n</blockquote>\n<p>You are using a <code>string</code> which uses elements of type: <code>char</code>. The standard states of <code>char</code> specifically 7.1.6.2[dcl.type.simple]3:</p>\n<blockquote>\n<p id=\"so_5539249_37438120_4\">It is implementation-defined whether objects of <code>char</code> type are represented as signed or unsigned quantities. The <code>signed</code> specifier forces <code>char</code> objects to be signed</p>\n</blockquote>\n<p>So if the implementation defined a <code>char</code> to mean a <code>signed char</code> then both <strong>1</strong> and <strong>2</strong> would result in Undefined Behavior for all characters corresponding to negative numbers. (If an ASCII character encoding is being used the characters corresponding to negative numbers are <a href=\"https://en.wikipedia.org/wiki/Extended_ASCII\" rel=\"nofollow noreferrer\">Extended ASCII</a>.)</p>\n<p>The Undefined Behavior can be avoided by converting the input to an <code>unsigned char</code> before passing it to <code>tolower</code>. <strong>3</strong> accomplishes that using a lambda that accepts an <code>unsigned char</code> by value, then passes it to <code>tolower</code> implicitly converting to <code>int</code>.</p>\n<p><strong>To guarantee Defined Behavior on all compliant implementations, independent of character encoding, you'll need to use</strong> 3 <strong>or something similar.</strong></p>\n</hr></hr></hr>", "OwnerUserId": "2642059", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:34:24.333", "Id": "37438120", "Score": "7", "CreationDate": "2016-05-25T13:06:15.997", "LastActivityDate": "2016-09-21T11:15:12.423"}, "5539423": {"ParentId": "5539249", "CommentCount": "2", "Body": "<p>try using <code>::tolower</code>. This fixed the problem for me</p>\n", "OwnerUserId": "219335", "PostTypeId": "2", "Id": "5539423", "Score": "27", "CreationDate": "2011-04-04T13:48:07.760", "LastActivityDate": "2011-04-04T13:48:07.760"}, "5539302": {"ParentId": "5539249", "CommentCount": "15", "Body": "<p>The problem most probably relates with multiple overloads of <code>tolower</code> and the compiler is unable to select one for you. You can try qualifying it to select an specific version of it, or you might need to provide a function pointer cast to disambiguate. The <code>tolower</code> function can be present (multiple different overloads) in the <code>&lt;locale&gt;</code> header, as well as in <code>&lt;cctype&gt;</code>.</p>\n<p>Try:</p>\n<pre><code>int (*tl)(int) = tolower; // Select that particular overload\ntransform(s.begin(),s.end(),s.begin(),tl );\n</code></pre>\n<p>That can be done in a single line with a cast, but it is probably harder to read:</p>\n<pre><code>transform(s.begin(),s.end(),s.begin(),(int (*)(int))tolower );\n</code></pre>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "5539302", "Score": "22", "CreationDate": "2011-04-04T13:38:07.253", "LastActivityDate": "2011-04-04T13:38:07.253"}, "5539249": {"CommentCount": "2", "AcceptedAnswerId": "5539423", "PostTypeId": "1", "LastEditorUserId": "2642059", "CreationDate": "2011-04-04T13:33:10.717", "LastActivityDate": "2016-09-21T11:15:12.423", "LastEditDate": "2016-06-03T12:46:53.073", "ViewCount": "17225", "FavoriteCount": "11", "Title": "Why can't \"transform(s.begin(),s.end(),s.begin(),tolower)\" be complied successfully?", "Id": "5539249", "Score": "23", "Body": "<p>Given the code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cctype&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nint main()\n{\n     string s(\"ABCDEFGHIJKL\");\n     transform(s.begin(),s.end(),s.begin(),tolower);\n     cout&lt;&lt;s&lt;&lt;endl;\n}\n</code></pre>\n<p>I get the error:</p>\n<blockquote>\n<p id=\"so_5539249_5539249_0\">No matching function for call to <code>transform(__gnu_cxx::__normal_iterator&lt;char*,   std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, &lt;unresolved overloaded function type&gt;)</code></p>\n</blockquote>\n<p>What does <strong>\"unresolved overloaded function type\"</strong> mean?</p>\n<p>If I replace the <code>tolower</code> with a function I wrote, it no longer errors.</p>\n", "Tags": "<c++><compiler-errors><lowercase><toupper><tolower>", "OwnerUserId": "446305", "AnswerCount": "5"}, "5539450": {"ParentId": "5539249", "CommentCount": "1", "Body": "<p>Browsing my <code>&lt;ctype&gt;</code> header from gcc 4.2.1, I see this:</p>\n<pre><code>// -*- C++ -*- forwarding header.\n\n// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n// Free Software Foundation, Inc.\n</code></pre>\n<p>...</p>\n<pre><code>#ifndef _GLIBCXX_CCTYPE\n#define _GLIBCXX_CCTYPE 1\n\n#pragma GCC system_header\n\n#include &lt;bits/c++config.h&gt;\n#include &lt;ctype.h&gt;\n\n// Get rid of those macros defined in &lt;ctype.h&gt; in lieu of real functions.\n#undef isalnum\n#undef isalpha\n</code></pre>\n<p>...</p>\n<pre><code>#undef tolower\n#undef toupper\n\n_GLIBCXX_BEGIN_NAMESPACE(std)\n\n  using ::isalnum;\n  using ::isalpha;\n</code></pre>\n<p>...</p>\n<pre><code>  using ::tolower;\n  using ::toupper;\n\n_GLIBCXX_END_NAMESPACE\n\n#endif\n</code></pre>\n<p>So it looks like <code>tolower</code> exists in both the <code>std</code> (from <code>&lt;cctype&gt;</code>) and root (from <code>&lt;ctype.h&gt;</code>) namespaces. I'm not sure what the <code>#pragma</code> does.</p>\n", "OwnerUserId": "2624511", "PostTypeId": "2", "Id": "5539450", "Score": "4", "CreationDate": "2011-04-04T13:49:55.163", "LastActivityDate": "2011-04-04T13:49:55.163"}, "bq_ids": {"n4140": {"so_5539249_37438120_1": {"section_id": 4907, "quality": 0.9047619047619048, "length": 19}, "so_5539249_37438120_4": {"section_id": 5439, "quality": 0.9375, "length": 15}}, "n3337": {"so_5539249_37438120_1": {"section_id": 4702, "quality": 0.9047619047619048, "length": 19}, "so_5539249_37438120_4": {"section_id": 5234, "quality": 0.9375, "length": 15}}, "n4659": {"so_5539249_37438120_1": {"section_id": 6316, "quality": 0.9047619047619048, "length": 19}, "so_5539249_37438120_4": {"section_id": 6866, "quality": 0.875, "length": 14}}}});