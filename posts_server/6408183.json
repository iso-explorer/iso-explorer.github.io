post_cb({"6408206": {"Id": "6408206", "PostTypeId": "2", "Body": "<p>The standard says that <code>main</code> cannot be overloaded. It isn't mangled, and you cannot have two functions with the same unmangled name. This will cause a linking failure, I guess, but a compiler could want to add explicit checks in order to give clearer error messages.</p>\n<p><code>int main(int argc, char **argv)</code> and <code>int main()</code> should be the preferred signatures for it, but compilers are free to accept a <code>main</code> with different parameters.</p>\n", "LastActivityDate": "2011-06-20T07:49:53.807", "Score": "7", "CreationDate": "2011-06-20T07:49:53.807", "ParentId": "6408183", "CommentCount": "5", "OwnerUserId": "300805"}, "6408326": {"Id": "6408326", "PostTypeId": "2", "Body": "<p>Windows and Unix have:</p>\n<pre><code>int main(int argc, char **argv, char **envp)\n</code></pre>\n<p>and Win32 apps have:</p>\n<pre><code>int WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow);\n</code></pre>\n<p>and MacOS has:</p>\n<pre><code>int main(int argc, char **argv, char **envp, char **apple)\n</code></pre>\n<p>Don't forget that <code>main</code> is not usually the first thing the OS calls when executing a program. The <code>main</code> function is the function that is called by the run time environment. The address of the first instruction to execute is usually declared in some meta data, usually at the start if the executable file.</p>\n<p>None of the above contradicts the C/C++ standard as far as I can tell, as long as there is only one, which makes sense since the OS wouldn't know which to call if there were more than one. Checking there is only one is not done in the compiler, it is done in the linker.</p>\n", "LastActivityDate": "2011-06-20T08:02:29.750", "Score": "20", "CreationDate": "2011-06-20T08:02:29.750", "ParentId": "6408183", "CommentCount": "8", "OwnerUserId": "1898"}, "6408183": {"ViewCount": "6792", "Body": "<p>2 valid versions of <code>main()</code> exist in <code>C++</code>:</p>\n<pre><code>int main()  // version 1\nint main(int argc, char **argv)  // version 2\n</code></pre>\n<p>But both overloads cannot coexist at the same time. Why not? (Potential use case: while running the program from the terminal, if no arguments are passed the first version is called, otherwise the second version is.)</p>\n<p>Does the compiler perform a special check to allow just one version per binary? </p>\n", "AcceptedAnswerId": "6408230", "Title": "Is main() overloaded in C++?", "CreationDate": "2011-06-20T07:46:39.803", "Id": "6408183", "CommentCount": "7", "FavoriteCount": "13", "PostTypeId": "1", "LastEditDate": "2015-11-24T02:21:07.767", "LastEditorUserId": "4077294", "LastActivityDate": "2015-11-24T02:21:07.767", "Score": "66", "OwnerUserId": "514235", "Tags": "<c++><overloading><main>", "AnswerCount": "6"}, "6408230": {"Id": "6408230", "PostTypeId": "2", "Body": "<p>\u00a73.6.1/2 (C++03) says </p>\n<blockquote>\n<p id=\"so_6408183_6408230_0\">An implementation shall not predefine\n  the <code>main</code> function. <strong>This function shall\n  not be overloaded.</strong> It shall have a\n  return type of type int, but otherwise\n  its type is implementation-defined.\n  All implementations shall allow both\n  of the following definitions of main:</p>\n</blockquote>\n<pre><code>   int main() { /* ... */ }\n   int main(int argc, char* argv[]) { /* ... */ }\n</code></pre>\n<p>You can use either of them. Both are standard compliant.</p>\n<p>Also, since <code>char *argv[]</code> is equivalent to <code>char **argv</code>, replacing <code>char *argv[]</code> with <code>char **argv</code> doesn't make any difference.</p>\n<hr>\n<blockquote>\n<p id=\"so_6408183_6408230_1\">But both the versions cannot co-exist at the same time ! (use case can be like: while running the binary from command prompt, if you pass no argument then 1st version should be called else the 2nd version).</p>\n</blockquote>\n<p>No. Both versions cannot co-exist at the same time. One program can have exactly one <code>main</code> function. Which one, depends on your choice. If you want to process command-line argument, then you've to choose the second version, or else first version is enough. Also note that if you use second version, and don't pass any command line argument, then there is no harm in it. It will not cause any error. You just have to interpret <code>argc</code> and <code>argv</code> accordingly, and based on their value, you've to write the logic and the flow of your program.</p>\n</hr>", "LastEditorUserId": "415784", "LastActivityDate": "2011-07-28T23:52:48.523", "Score": "63", "CreationDate": "2011-06-20T07:51:36.493", "ParentId": "6408183", "CommentCount": "7", "LastEditDate": "2011-07-28T23:52:48.523", "OwnerUserId": "415784"}, "bq_ids": {"n4140": {"so_6408183_6408272_1": {"length": 11, "quality": 0.6875, "section_id": 7146}, "so_6408183_6408272_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7146}, "so_6408183_6408230_0": {"length": 18, "quality": 0.75, "section_id": 7146}}, "n3337": {"so_6408183_6408272_1": {"length": 15, "quality": 0.9375, "section_id": 6890}, "so_6408183_6408272_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6890}, "so_6408183_6408230_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}}, "n4659": {"so_6408183_6408272_1": {"length": 11, "quality": 0.6875, "section_id": 8647}, "so_6408183_6408272_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 8647}, "so_6408183_6408230_0": {"length": 18, "quality": 0.75, "section_id": 8647}}}, "6410255": {"Id": "6410255", "PostTypeId": "2", "Body": "<p>It is not possible to overload main() in C++ because. the compiler shown the following error:</p>\n<pre><code>error C2731: 'main' : function cannot be overloaded \n</code></pre>\n", "LastEditorUserId": "481154", "LastActivityDate": "2011-07-28T14:16:38.117", "Score": "0", "CreationDate": "2011-06-20T11:08:24.703", "ParentId": "6408183", "CommentCount": "0", "LastEditDate": "2011-07-28T14:16:38.117", "OwnerUserId": "806493"}, "6408272": {"Id": "6408272", "PostTypeId": "2", "Body": "<p><strong>Section 3.6.1.2</strong> of both C++ Standard 1998 and 2003 editions states: </p>\n<blockquote>\n<p id=\"so_6408183_6408272_0\">An implementation shall not predefine the main function. <strong>This function shall not be overloaded</strong>. It shall have a return type of type int, but otherwise its type is implementation-defined.</p>\n</blockquote>\n<p>Further,</p>\n<p>The ISO C++ Standard (ISO/IEC 14882:1998) specifically requires main to return int. It has an explicit \"shall\" constraint upon well-formed programs. </p>\n<p><strong>Section \u00a7 3.6.1 \u00b6 2:</strong> </p>\n<blockquote>\n<p id=\"so_6408183_6408272_1\">It shall have a return type of int, but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of main:</p>\n</blockquote>\n<pre><code>int main() { /* \u2026 */ }\n</code></pre>\n<p>and </p>\n<pre><code>int main(int argc, char* argv[]) { /* \u2026 */ }\n</code></pre>\n<p>So both versions of <code>main</code> are allowed by the standard and which one to use is left as an implementation preference of the programmer.</p>\n", "LastEditorUserId": "452307", "LastActivityDate": "2011-09-16T09:10:52.153", "Score": "13", "CreationDate": "2011-06-20T07:56:27.423", "ParentId": "6408183", "CommentCount": "2", "LastEditDate": "2011-09-16T09:10:52.153", "OwnerUserId": "452307"}, "6408433": {"Id": "6408433", "PostTypeId": "2", "Body": "<p>Main was defined back in the C days. It's setup more along the rules of printf. Consider <code>main</code> as a varadic function:</p>\n<pre><code>int main(...)\n</code></pre>\n<p>The standard says that no arguments and two pointer arguments are okay. However, if the implementation wants to provide more arguments, the implementation is free to do so.</p>\n<p>The reason you can't have two <code>main</code>s is the same reason you can't define a <code>printf</code> like function twice in a C program. Sure, <code>printf</code> supports differing arguments and changes it's behavior depending on which arguments are there, but it's not overloading in the C++ sense of the term.</p>\n", "LastActivityDate": "2011-06-20T08:13:12.543", "Score": "9", "CreationDate": "2011-06-20T08:13:12.543", "ParentId": "6408183", "CommentCount": "1", "OwnerUserId": "82320"}});