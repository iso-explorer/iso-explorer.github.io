post_cb({"bq_ids": {"n4140": {"so_26574926_26574988_0": {"length": 17, "quality": 1.0, "section_id": 166}}, "n3337": {"so_26574926_26574988_0": {"length": 17, "quality": 1.0, "section_id": 160}}, "n4659": {"so_26574926_26574988_0": {"length": 17, "quality": 1.0, "section_id": 170}}}, "26574926": {"ViewCount": "64", "Body": "<p>I am trying to use template type aliasing, but when I use it in a function my idea fails, as in example below:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntemplate &lt;typename T&gt;\nusing vec_T = std::vector&lt;T&gt;;\n\ntemplate &lt;typename T&gt;\nT sum_vector(vec_T vec) // T sum_vector(std::vector&lt;T&gt; vec)\n{\n  T sum = 0;\n  typename vec_T::iterator it; // typename std::vector&lt;T&gt;::iterator it;\n    for (it = vec.begin(); it != vec.end(); ++it)\n      {\n         sum += *it;\n      }\n   return sum;\n}\n</code></pre>\n<p>Compiling the above code fails with the following error:</p>\n<blockquote>\n<p id=\"so_26574926_26574926_0\">error: template declaration of \u2018T sum_vector\u2019  T sum_vector(vec_T vec)</p>\n<p id=\"so_26574926_26574926_1\">error: missing template arguments before \u2018vec\u2019  T sum_vector(vec_T\n  vec)</p>\n</blockquote>\n<p>If I used commented lines instead the code works fine. I really don't understand what I missing here, my understanding was that after <code>using X = Y</code>, compiler would just place <code>Y</code> where I have <code>X</code>, so where is the error coming from? How should I go about fixing this?</p>\n", "AcceptedAnswerId": "26574988", "Title": "Template Alias failing when I try to use it in a function", "CreationDate": "2014-10-26T16:00:46.800", "Id": "26574926", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-10-26T16:08:27.673", "Score": "0", "OwnerUserId": "1078084", "Tags": "<c++><templates><c++11>", "AnswerCount": "2"}, "26574988": {"Id": "26574988", "PostTypeId": "2", "Body": "<p>The difference between <code>using X = Y</code> and <code>using vec_T = std::vector&lt;T&gt;;</code> is that the former is a type alias and the latter is an alias template (or template alias, whatever.) The first form is essentially a typedef. The second form doesn't automatically substitute <code>T</code>. You need to <em>specialize</em> it. What you put between the angle brackets <code>&lt;&gt;</code> is substituted for <code>T</code> in the alias template. <code>vec_T&lt;int&gt;</code> becomes <code>std::vector&lt;int&gt;</code>.</p>\n<p>\u00a7 14.6/2</p>\n<blockquote>\n<p id=\"so_26574926_26574988_0\">When a <em>template-id</em> refers to the specialization of an alias\n  template, it is equivalent to the associated type obtained by\n  substitution of its <em>template-arguments</em> for the <em>template-parameters</em>\n  in the <em>type-id</em> of the alias template.</p>\n<pre><code>template&lt;class T&gt; struct Alloc { /\u2217 ... \u2217/ };\ntemplate&lt;class T&gt; using Vec = vector&lt;T, Alloc&lt;T&gt;&gt;;\nVec&lt;int&gt; v;\n // same as vector&lt;int, Alloc&lt;int&gt;&gt; v;\n</code></pre>\n</blockquote>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-10-26T16:07:03.670", "Score": "3", "CreationDate": "2014-10-26T16:07:03.670", "ParentId": "26574926", "CommentCount": "1"}, "26574942": {"Id": "26574942", "PostTypeId": "2", "Body": "<p>You have to use</p>\n<pre><code>template &lt;typename T&gt;\nT sum_vector(vec_T&lt;T&gt; vec)\n</code></pre>\n<p>and in your case, you may take argument by const reference:</p>\n<pre><code>template &lt;typename T&gt;\nT sum_vector(const vec_T&lt;T&gt;&amp; vec)\n</code></pre>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2014-10-26T16:08:27.673", "Score": "3", "CreationDate": "2014-10-26T16:02:35.663", "ParentId": "26574926", "CommentCount": "0", "OwnerUserId": "2684539", "LastEditDate": "2014-10-26T16:08:27.673"}});