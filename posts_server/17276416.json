post_cb({"17276416": {"CommentCount": "9", "AcceptedAnswerId": "17276482", "ClosedDate": "2013-06-24T14:24:14.907", "CreationDate": "2013-06-24T13:14:08.633", "LastActivityDate": "2013-06-24T13:21:55.977", "PostTypeId": "1", "ViewCount": "153", "Title": "POD members not 0-initialized", "Id": "17276416", "Score": "-2", "Body": "<p>The code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass cMapRender\n{\npublic:\nunsigned int m_rightMargin;\nunsigned int m_bottomMargin;\nunsigned int m_x;\nunsigned int test;\nunsigned int m_y;\nunsigned int m_width;\nunsigned int m_height;\n};\n\nint main(int argc, char **argv)\n{\ncMapRender mapRender;\n\nstd::cout &lt;&lt; mapRender.m_x &lt;&lt; std::endl; //gives random values (like 45321231)\nstd::cout &lt;&lt; mapRender.m_height &lt;&lt; std::endl;\nstd::cout &lt;&lt; mapRender.m_width &lt;&lt; std::endl;\n\nreturn 0;\n}\n</code></pre>\n<p>How is this possible that when I run it through debugger (or just cout some values), some members are 0 and some are random value? I think that pod members should be 0-initialized.</p>\n<p>I use g++ 4.7 on linux. When I ran it on ideone.com, on gcc 4.7 I got this bug too. However, on ideone.com gcc 4.3 every member was 0-initialized!</p>\n<p>What's going on here, why members aren't always 0-initialized?\nI read that C standard says that pod should be always 0 initialized.</p>\n", "Tags": "<c++><class><gcc><g++><initialization>", "OwnerUserId": "1873947", "AnswerCount": "3"}, "17276556": {"ParentId": "17276416", "CommentCount": "0", "Body": "<p>The C++ language is designed for \"speed\". By having the language standard define \"unless you specifically write code for it, POD's are not initialize\", the compiler doesn't have to generated code to set the POD's to some specific value. This in turn means that the code runs faster, because quite often, you'd then immediately set it to something else. </p>\n<p>You can have a constructor, or you can use an initializer object to set it to zero, if you need that. Ideally, you'd have a constructor that takes the initial values, so the values aren't first set to zero, then to something else - since it doesn't look like most of your values would make sense to have as zero anyway.</p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "17276556", "Score": "1", "CreationDate": "2013-06-24T13:21:48.413", "LastActivityDate": "2013-06-24T13:21:48.413"}, "17276482": {"ParentId": "17276416", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It depends:</p>\n<h2>Standardese</h2>\n<blockquote>\n<p id=\"so_17276416_17276482_0\"><strong>8.5. Initializers [dcl.init]</strong> / <em>11</em>. </p>\n<p id=\"so_17276416_17276482_1\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, an\n  object with automatic or dynamic storage duration has indeterminate value. [ <em>Note:</em> Objects with static or\n  thread storage duration are zero-initialized, see 3.6.2. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>and (ordering reversed for readability):</p>\n<blockquote>\n<p id=\"so_17276416_17276482_2\"><strong>8.5. Initializers [dcl.init]</strong> / <em>6</em>.</p>\n<p id=\"so_17276416_17276482_3\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_17276416_17276482_4\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_17276416_17276482_5\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_17276416_17276482_6\">\u2014 <strong>otherwise, no initialization is performed.</strong> <em>[emphasis mine]</em></p>\n<p id=\"so_17276416_17276482_7\">If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class type\n  with a user-provided default constructor.</p>\n</blockquote>\n<p>They are <em>default initialized</em>. For builtin types like <code>int</code> or <code>double</code>, their value depends on where the struct is declared <em>(as a rule of thumb (but just as that): <strong>Assume they are always garbage unless initialized</strong>)</em>.</p>\n<p>In global scope or/and with <code>static</code> storage, they are all zeroes (incl. when the struct is a member of a struct which is at global scope).</p>\n<p>At function-local scope, they are full of garbage.</p>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    int x;\n    int y;\n};\n\nFoo foo;\n\nint main () {\n    Foo bar;\n\n    std::cout &lt;&lt; foo.x &lt;&lt; \":\" &lt;&lt; foo.y &lt;&lt; '\\n';\n    std::cout &lt;&lt; bar.x &lt;&lt; \":\" &lt;&lt; bar.y &lt;&lt; '\\n';\n}\n</code></pre>\n<p>This on the first run gives me </p>\n<pre><code>0:0\n-1077978680:12574708\n</code></pre>\n<p>On the second run, without recompilation, this gives me:</p>\n<pre><code>0:0\n-1075556168:12574708\n</code></pre>\n<p>A POD-struct can be initialized all zeroes using e.g. <code>memset</code> or just ...</p>\n<pre><code>Foo foo = {0}; // C and C++03\nFoo foo{0}; // C++11\n</code></pre>\n<h2>Finally</h2>\n<p>You commented that your code depends on zero-initialization for those members. This is where you want a constructor:</p>\n<pre><code>class cMapRender\n{\npublic:\n    unsigned int m_rightMargin;\n    unsigned int m_bottomMargin;\n    unsigned int m_x;\n    unsigned int test;\n    unsigned int m_y;\n    unsigned int m_width;\n    unsigned int m_height;\n\n    cMapRender() :\n       m_rightMargin(0),\n       m_bottomMargin(0),\n       /* and so forth */\n    {}\n};\n</code></pre>\n<p>Apart from the design problems of your class (better group together some variables into a <code>Rectangle</code>-type), this would solve your issue.</p>\n<hr>\n<p><sub>(note: this answer was copied and modified from another answer by me (<a href=\"https://stackoverflow.com/questions/17106389/initializing-member-variables-of-a-struct-in-c/17106428#17106428\">Initializing member variables of a struct in c++</a>))</sub></p>\n</hr>", "OwnerUserId": "76722", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:21:01.793", "Id": "17276482", "Score": "2", "CreationDate": "2013-06-24T13:18:00.910", "LastActivityDate": "2013-06-24T13:18:00.910"}, "17276456": {"ParentId": "17276416", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The language rules say your data members are uninitialized. You can value-initialize them like this:</p>\n<pre><code>cMapRender mapRender{}; // C++11\n</code></pre>\n<p>or</p>\n<pre><code>cMapRender mapRender1 = {};           // C++03 and C++11\ncMapRender mapRender2 = cMapRender(); // C++03 and C++11\n</code></pre>\n<p>This will value initialize the data members, which means <code>0</code> initializing in this case.</p>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2013-06-24T13:21:55.977", "Id": "17276456", "Score": "1", "CreationDate": "2013-06-24T13:16:33.440", "LastActivityDate": "2013-06-24T13:21:55.977"}, "bq_ids": {"n4140": {"so_17276416_17276482_5": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_17276416_17276482_3": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_17276416_17276482_4": {"section_id": 3286, "quality": 0.9230769230769231, "length": 12}, "so_17276416_17276482_7": {"section_id": 3286, "quality": 1.0, "length": 11}, "so_17276416_17276482_1": {"section_id": 3291, "quality": 0.76, "length": 19}}, "n3337": {"so_17276416_17276482_5": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_17276416_17276482_3": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_17276416_17276482_4": {"section_id": 3156, "quality": 1.0, "length": 13}, "so_17276416_17276482_7": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_17276416_17276482_1": {"section_id": 3161, "quality": 0.84, "length": 21}}, "n4659": {"so_17276416_17276482_5": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_17276416_17276482_4": {"section_id": 4049, "quality": 0.6923076923076923, "length": 9}, "so_17276416_17276482_7": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}, "so_17276416_17276482_1": {"section_id": 4053, "quality": 0.76, "length": 19}}}});