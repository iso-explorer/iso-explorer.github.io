post_cb({"12432482": {"ParentId": "11155643", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-09-14T21:54:40.750", "Score": "4", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:27:15.933", "Id": "12432482", "OwnerUserId": "1424877", "Body": "<p>I emailed Stephan and asked what he was talking about. Here's his answer (edited for formatting). It didn't sound like he was planning to post the answer here; if he does, I'll delete this copy.</p>\n<p><strong>Everything from here down is Stephan speaking.</strong></p>\n<p>I was referring to this:</p>\n<pre><code>#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    vector&lt;vector&lt;int&gt;&gt; v(11, 22);\n}\n</code></pre>\n<p>It compiles with VC10 SP1 (following C++03), but not with VC11 RTM (following C++11): <em>[snip error message dump]</em></p>\n<p><strong>C++03 23.1.1 [lib.sequence.reqmts]/9</strong> said:</p>\n<blockquote>\n<p id=\"so_11155643_12432482_0\">For every sequence defined in this clause and in clause 21:<br>\n  \u2014 the constructor<br>\n<code>template &lt;class InputIterator&gt; X(InputIterator f, InputIterator l, const Allocator&amp; a = Allocator())</code><br> shall have the same effect\n  as:<br>\n<code>X(static_cast&lt;typename X::size_type&gt;(f), static_cast&lt;typename X::value_type&gt;(l), a)</code><br>\n  if <code>InputIterator</code> is an integral type.</br></br></br></br></br></p>\n</blockquote>\n<p>This transformed <code>vector&lt;vector&lt;int&gt;&gt; v(11, 22)</code> to <code>vector&lt;vector&lt;int&gt;&gt; v(static_cast&lt;size_t&gt;(11), static_cast&lt;vector&lt;int&gt;&gt;(22))</code>, which is valid.  (<code>static_cast</code> is capable of invoking explicit constructors, like <code>vector</code>'s size constructor.)</p>\n<p><strong>C++11 23.2.3 [sequence.reqmts]/14</strong> says:</p>\n<blockquote>\n<p id=\"so_11155643_12432482_1\">For every sequence container defined in this Clause and in Clause 21:<br>\n  \u2014 If the constructor<br>\n<code>template &lt;class InputIterator&gt; X(InputIterator first, InputIterator last, const allocator_type&amp; alloc = allocator_type())</code><br>\n  is called with a type <code>InputIterator</code> that does not qualify as an input iterator, then the constructor shall not participate in overload resolution.</br></br></br></p>\n</blockquote>\n<p>This removes the (InIt, InIt) ctor from overload resolution.  That leaves <code>(size_type n, const T&amp; value)</code>, where <code>T</code> is <code>vector&lt;int&gt;</code>.  However, that would try to implicitly convert <code>22</code> to a temporary <code>vector&lt;int&gt;</code> (in order to bind it to <code>const T&amp;</code>).  The explicitness of <code>vector</code>'s size constructor forbids that.</p>\n<p>Reading <a href=\"https://stackoverflow.com/questions/5759232/stdvector-default-construction-c11-and-breaking-changes?lq=1\">the other SO question</a>, this is a different issue.</p>\n<p>STL</p>\n", "LastActivityDate": "2012-09-14T21:54:40.750"}, "11155643": {"CommentCount": "7", "AcceptedAnswerId": "12432482", "PostTypeId": "1", "LastEditorUserId": "1131435", "CreationDate": "2012-06-22T11:51:55.293", "LastActivityDate": "2013-04-15T03:24:28.937", "LastEditDate": "2013-04-15T03:24:28.937", "ViewCount": "492", "FavoriteCount": "1", "Title": "What is 2D vector construction breaking change in C++11?", "Id": "11155643", "Score": "3", "Body": "<p>while reading answer to <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/691756/std-make-pair-error-in-vc11\" rel=\"nofollow\">one question on MS Connect site</a> I noticed the following part of the reply:</p>\n<blockquote>\n<p id=\"so_11155643_11155643_0\">This is one of a few breaking changes in the Standard Library that I'm\n  aware of (the other major ones are immutable sets, and <strong>2D vector\n  construction</strong>).</p>\n</blockquote>\n<p>Answer can be considered legit with high probability since it is from MS employee that works on implementing STL. </p>\n<p>So does anybody knows what exactly he refers to?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "700825", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_11155643_12432482_1": {"section_id": 733, "quality": 0.6129032258064516, "length": 19}}, "n3337": {"so_11155643_12432482_1": {"section_id": 722, "quality": 0.6129032258064516, "length": 19}}, "n4659": {"so_11155643_12432482_1": {"section_id": 763, "quality": 0.6129032258064516, "length": 19}}}});