post_cb({"36480125": {"ParentId": "36479812", "CommentCount": "0", "Body": "<p>This is a gcc bug. From [expr.prim.lambda]:</p>\n<blockquote>\n<p id=\"so_36479812_36480125_0\">The <em>lambda-expression</em>\u2019s <em>compound-statement</em> yields the <em>function-body</em> (8.4) of the function call operator, but for purposes of name lookup (3.4), determining the type and value of this (9.3.2) and transforming <em>id-expressions</em>\n  referring to non-static class members into class member access expressions using <code>(*this)</code> (9.3.1), the <em>compound-statement</em> is considered in the context of the <em>lambda-expression</em>. <em>[ Example:</em></p>\n<pre><code>struct S1 {\n    int x, y;\n    int operator()(int);\n    void f() {\n        [=]()-&gt;int {\n            return operator()(this-&gt;x + y); // equivalent to S1::operator()(this-&gt;x + (*this).y)\n                                            // this has type S1*\n        };\n    }\n};\n</code></pre>\n<p id=\"so_36479812_36480125_1\"><em>\u2014end example ]</em></p>\n</blockquote>\n<p>In this case, <code>get()</code> should be equivalent to <code>test::get()</code>, and <code>this</code> is captured, so this is well-formed. clang compiles the code as-is. gcc compiles the code if you change <code>i</code> to be passed as an <code>int</code> instead of as <code>const auto&amp;</code>, which is irrelevant to how <code>get()</code> is looked up. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "36480125", "Score": "9", "CreationDate": "2016-04-07T15:03:39.020", "LastActivityDate": "2016-04-07T15:03:39.020"}, "36479812": {"CommentCount": "4", "ViewCount": "138", "CreationDate": "2016-04-07T14:52:04.643", "LastActivityDate": "2016-04-07T15:03:39.020", "Title": "Why is 'this' necessary despite capturing everything", "AcceptedAnswerId": "36480125", "PostTypeId": "1", "Id": "36479812", "Score": "7", "Body": "<p>Can anyone explain to me why I have to explicitly write \"this-&gt;\" in the second lambda even tho I captured everything ?</p>\n<p>The error message for completeness:</p>\n<blockquote>\n<p id=\"so_36479812_36479812_0\">cannot call member function 'result_t test::get()' without object</p>\n</blockquote>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing result_t = std::function&lt;void()&gt;;\n\nstruct test\n{\n    bool noMore = false;\n\n    result_t get()\n    {\n        return [this]\n        {\n            std::vector&lt;int&gt; vec;\n            vec.push_back(1);\n            vec.push_back(2);\n            vec.push_back(3);\n\n            if(not noMore)\n            {\n                noMore = true;\n\n                std::for_each(vec.begin(), vec.end(),\n                    [&amp;](const auto&amp; i)\n                    {\n                        auto value1 = this-&gt;get(); // compiles\n                        auto value2 = get(); // error\n                    });\n            }\n        };\n    }\n};\n\nint main() {\n    test t;\n    t.get()();\n}\n</code></pre>\n<p><a href=\"https://godbolt.org/g/GA0EUv\"><strong>Godbolt</strong></a></p>\n", "Tags": "<c++><c++14>", "OwnerUserId": "1233963", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36479812_36479812_0": {"section_id": 557, "quality": 0.5714285714285714, "length": 4}, "so_36479812_36480125_0": {"section_id": 5966, "quality": 0.8787878787878788, "length": 29}}, "n3337": {"so_36479812_36479812_0": {"section_id": 548, "quality": 0.5714285714285714, "length": 4}, "so_36479812_36480125_0": {"section_id": 5735, "quality": 0.8787878787878788, "length": 29}}, "n4659": {"so_36479812_36479812_0": {"section_id": 580, "quality": 0.5714285714285714, "length": 4}, "so_36479812_36480125_0": {"section_id": 7460, "quality": 0.8787878787878788, "length": 29}}}});