post_cb({"45023674": {"CommentCount": "1", "AcceptedAnswerId": "45023729", "CreationDate": "2017-07-11T00:48:27.157", "LastActivityDate": "2017-07-11T01:05:59.600", "PostTypeId": "1", "ViewCount": "90", "FavoriteCount": "0", "Title": "Operator less than between a non-null raw pointer and nullptr", "Id": "45023674", "Score": "3", "Body": "<p>Are the operations <code>nullptr &lt; ptr</code> and <code>ptr &lt; nullptr</code> well defined for a non-null raw pointer <code>ptr != nullptr</code>? Quotes from the C++ standard are welcome.</p>\n", "Tags": "<c++><c++11><standards><comparison-operators><nullptr>", "OwnerUserId": "882932", "AnswerCount": "1"}, "45023729": {"ParentId": "45023674", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Such a comparison is well-formed, but its result is unspecified.</p>\n<blockquote>\n<p id=\"so_45023674_45023729_0\"><strong>[expr.rel]/3</strong> Comparing pointers to objects is defined as follows:</p>\n<p id=\"so_45023674_45023729_1\">\u2014 If two pointers point to different elements of the same array, or to subobjects thereof, the pointer to the element with the higher subscript compares greater.</p>\n<p id=\"so_45023674_45023729_2\">\u2014 If one pointer points to an element of an array, or to a subobject thereof, and another pointer points one past the last element of the array, the latter pointer compares greater.</p>\n<p id=\"so_45023674_45023729_3\">\u2014 If two pointers point to different non-static data members of the same object, or to subobjects of such members, recursively, the pointer to the later declared member compares greater provided the two members have the same access control (Clause 11) and provided their class is not a union.</p>\n<p id=\"so_45023674_45023729_4\"><strong>[expr.rel]/4</strong> If two operands <code>p</code> and <code>q</code> compare equal (5.10), <code>p&lt;=q</code> and <code>p&gt;=q</code> both yield <code>true</code> and <code>p&lt;q</code> and <code>p&gt;q</code> both yield <code>false</code>. Otherwise, if a pointer <code>p</code> compares greater than a pointer <code>q</code>, <code>p&gt;=q</code>, <code>p&gt;q</code>, <code>q&lt;=p</code>, and <code>q&lt;p</code> all yield <code>true</code> and <code>p&lt;=q</code>, <code>p&lt;q</code>, <code>q&gt;=p</code>, and <code>q&gt;p</code> all yield <code>false</code>. Otherwise, the result of each of the operators is unspecified.</p>\n</blockquote>\n<p>A null pointer doesn't fall into any of the three clauses of <strong>[expr.rel]/3</strong>, and so it compares neither greater nor less than a non-null pointer. This case then falls into the \"otherwise\" clause of <strong>[expr.rel]/4</strong>.</p>\n", "OwnerUserId": "1670129", "LastEditorUserId": "1670129", "LastEditDate": "2017-07-11T01:05:59.600", "Id": "45023729", "Score": "4", "CreationDate": "2017-07-11T00:55:35.507", "LastActivityDate": "2017-07-11T01:05:59.600"}, "bq_ids": {"n4140": {"so_45023674_45023729_1": {"section_id": 6151, "quality": 1.0, "length": 15}, "so_45023674_45023729_4": {"section_id": 6152, "quality": 0.9310344827586207, "length": 27}, "so_45023674_45023729_2": {"section_id": 6151, "quality": 1.0, "length": 19}, "so_45023674_45023729_3": {"section_id": 6151, "quality": 1.0, "length": 31}, "so_45023674_45023729_0": {"section_id": 6151, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_45023674_45023729_1": {"section_id": 5913, "quality": 0.8, "length": 12}, "so_45023674_45023729_2": {"section_id": 5906, "quality": 0.5789473684210527, "length": 11}, "so_45023674_45023729_3": {"section_id": 5913, "quality": 1.0, "length": 31}}, "n4659": {"so_45023674_45023729_3": {"section_id": 7648, "quality": 1.0, "length": 31}, "so_45023674_45023729_4": {"section_id": 7649, "quality": 0.9310344827586207, "length": 27}, "so_45023674_45023729_2": {"section_id": 7638, "quality": 0.5263157894736842, "length": 10}, "so_45023674_45023729_1": {"section_id": 7648, "quality": 1.0, "length": 15}, "so_45023674_45023729_0": {"section_id": 7648, "quality": 0.8333333333333334, "length": 5}}}});