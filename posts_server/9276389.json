post_cb({"9276740": {"ParentId": "9276389", "CommentCount": "4", "CreationDate": "2012-02-14T12:18:50.800", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "9276740", "Score": "7", "Body": "<p>Unfortunately, you can't specialise a template that's a member of a class template, without specialising the outer template:</p>\n<blockquote>\n<p id=\"so_9276389_9276740_0\">C++11 14.7.3/16: In an explicit specialization declaration for a member of a class template or a member template that appears in namespace scope, the member template and some of its enclosing class templates may remain unspecialized, <strong>except that the declaration shall not explicitly specialize a class member template if its enclosing class templates are not explicitly specialized as well</strong>.</p>\n</blockquote>\n<p>I think your best option is to add the extra parameter to <code>MyClass</code>, and then partially specialise that.</p>\n", "LastActivityDate": "2012-02-14T12:18:50.800"}, "9276641": {"ParentId": "9276389", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2012-02-14T12:11:25.230", "Score": "0", "LastEditorUserId": "823048", "LastEditDate": "2012-02-14T12:55:51.670", "Id": "9276641", "OwnerUserId": "823048", "Body": "<p>That is sad but true: <strong>you cannot explicitly specialize a class template unless its enclosing class templates are also explicitly specialized</strong>. For more information you may read</p>\n<ul>\n<li>this comp.lang.c++.moderated thread <a href=\"https://groups.google.com/group/comp.lang.c++.moderated/browse_frm/thread/d3cf73585cd4548a?hl=sv&amp;lr&amp;rnum=2&amp;prev=/groups?q=Enclosing%2bdo_foo&amp;hl=sv&amp;btnG=Google-s%25C3%25B6kning&amp;pli=1\" rel=\"nofollow\">Class Template Specializations</a></li>\n<li>or this article: <a href=\"http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.jsp?topic=/com.ibm.vacpp6m.doc/language/ref/clrc16explicit_spec_members.htm\" rel=\"nofollow\">Explicit Specialization of Members of Class Templates</a></li>\n</ul>\n<p>Below I've specialized MyClass first and everything got done.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T1, typename T2&gt; class MyClass\n{\npublic:\n  template&lt;int num&gt; static int DoSomething();\n};\n\ntemplate&lt;typename T1, typename T2&gt; template&lt;int num&gt; int MyClass&lt;T1, T2&gt;::DoSomething()\n{\n  cout &lt;&lt; \"This is the common method\" &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(T1) &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(T2) &lt;&lt; endl;\n  return num;\n}\n\ntemplate&lt;&gt; template&lt;&gt; int MyClass&lt;char, int&gt;::DoSomething&lt;0&gt;()\n{\n  cout &lt;&lt; \"This is ZERO!!!\" &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(char) &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(int) &lt;&lt; endl;\n  return 0;\n}\n\nint main() {\n  MyClass&lt;char, int&gt; m;\n  m.DoSomething&lt;2&gt;();\n  m.DoSomething&lt;0&gt;();\n  return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>This is the common method\nsizeof(T1) = 1\nsizeof(T2) = 4\nThis is ZERO!!!\nsizeof(T1) = 1\nsizeof(T2) = 4\n</code></pre>\n<hr>\n<p>EUREKA! This works well on MSVCPP 10.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T1, typename T2&gt; class MyClass\n{\npublic:\n  template&lt;int num&gt; static int DoSomething();\n  template&lt;&gt; static int DoSomething&lt;0&gt;() {\n    cout &lt;&lt; \"This is ZERO!!!\" &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(T1) &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(T2) &lt;&lt; endl;\n    return 0;\n  }\n};\n\ntemplate&lt;typename T1, typename T2&gt; template&lt;int num&gt; int MyClass&lt;T1, T2&gt;::DoSomething()\n{\n  cout &lt;&lt; \"This is the common method\" &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(T1) &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(T2) &lt;&lt; endl;\n  return num;\n}\n\nint main() {\n  MyClass&lt;char, int&gt; m;\n  m.DoSomething&lt;2&gt;();\n  m.DoSomething&lt;0&gt;();\n  return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>This is the common method\nsizeof(T1) = 1\nsizeof(T2) = 4\nThis is ZERO!!!\nsizeof(T1) = 1\nsizeof(T2) = 4\n</code></pre>\n<p>BTW, do not <code>return num;</code> from specialization. It doesn't ever know what <code>num</code> is.</p>\n</hr>", "LastActivityDate": "2012-02-14T12:55:51.670"}, "9276389": {"CommentCount": "0", "AcceptedAnswerId": "9276740", "CreationDate": "2012-02-14T11:54:32.317", "LastActivityDate": "2012-02-14T12:55:51.670", "PostTypeId": "1", "ViewCount": "2624", "FavoriteCount": "4", "Title": "Template method of template class specialization", "Id": "9276389", "Score": "10", "Body": "<p>Here is my code:</p>\n<pre><code>template&lt;typename T1, typename T2&gt; class MyClass\n{\npublic:\n    template&lt;int num&gt; static int DoSomething();\n};\n\ntemplate&lt;typename T1, typename T2&gt; template&lt;int num&gt; int MyClass&lt;T1, T2&gt;::DoSomething()\n{\n    cout &lt;&lt; \"This is the common method\" &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(T1) &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(T2) &lt;&lt; endl;\n    return num;\n}\n</code></pre>\n<p>It works well. But when I try to add this</p>\n<pre><code>template&lt;typename T1, typename T2&gt; template&lt;&gt; int MyClass&lt;T1, T2&gt;::DoSomething&lt;0&gt;()\n{\n    cout &lt;&lt; \"This is ZERO!!!\" &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T1) = \" &lt;&lt; sizeof(T1) &lt;&lt; endl;\n    cout &lt;&lt; \"sizeof(T2) = \" &lt;&lt; sizeof(T2) &lt;&lt; endl;\n    return num;\n}\n</code></pre>\n<p>I get compiller errors:\ninvalid explicit specialization before \u00ab&gt;\u00bb token\ntemplate-id \u00abDoSomething&lt;0&gt;\u00bb for \u00abint MyClass::DoSomething()\u00bb does not match any template declaration</p>\n<p>I use g++ 4.6.1\nWhat should I do?</p>\n", "Tags": "<c++><linux><templates><g++>", "OwnerUserId": "1173593", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_9276389_9276740_0": {"section_id": 278, "quality": 0.9459459459459459, "length": 35}}, "n3337": {"so_9276389_9276740_0": {"section_id": 269, "quality": 0.9459459459459459, "length": 35}}, "n4659": {"so_9276389_9276740_0": {"section_id": 285, "quality": 0.9459459459459459, "length": 35}}}});