post_cb({"37979930": {"Id": "37979930", "PostTypeId": "2", "Body": "<p>To include a predefined library header file , <code>#include&lt;filename&gt;</code> is used whereas to include user defined header file, <code>#include \"filename\"</code> is relevant.</p>\n", "LastActivityDate": "2016-06-22T23:37:23.903", "CommentCount": "1", "CreationDate": "2016-06-22T23:37:23.903", "ParentId": "21593", "Score": "-2", "OwnerUserId": "5122664"}, "21593": {"ViewCount": "359820", "Body": "<p>In the C and C++ programming languages, what is the difference between using angle brackets and using quotes in an <code>include</code> statement, as follows?</p>\n<ol>\n<li><code>#include &lt;filename&gt;</code> </li>\n<li><code>#include \"filename\"</code></li>\n</ol>\n", "Title": "What is the difference between #include <filename> and #include \"filename\"?", "CreationDate": "2008-08-22T01:40:06.993", "LastActivityDate": "2017-12-01T12:05:27.360", "CommentCount": "2", "FavoriteCount": "380", "PostTypeId": "1", "LastEditDate": "2016-03-25T11:04:00.810", "LastEditorUserId": "1307905", "Id": "21593", "Score": "1565", "OwnerUserId": "2399", "Tags": "<c++><c><include><header-files><c-preprocessor>", "AnswerCount": "26"}, "41807677": {"Id": "41807677", "PostTypeId": "2", "Body": "<pre><code>#include &lt;abc.h&gt;\n</code></pre>\n<p>is used to include standard library files. So the compiler will check in the locations where standard library headers are residing.</p>\n<pre><code>#include \"xyz.h\"\n</code></pre>\n<p>will tell the compiler to include user-defined header files. So the compiler will check for these header files in the current folder or <code>-I</code> defined folders.</p>\n", "LastEditorUserId": "63550", "LastActivityDate": "2017-11-21T21:53:33.640", "Score": "3", "CreationDate": "2017-01-23T13:36:23.907", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "7109320", "LastEditDate": "2017-11-21T21:53:33.640"}, "17203761": {"Id": "17203761", "PostTypeId": "2", "Body": "<p>The order of search header files is different. &lt;XXX.h&gt; prefer to search the standard headers first while \"XXX.h\" searches the workspace's header files first.</p>\n", "LastEditorUserId": "63550", "LastActivityDate": "2016-01-01T20:35:01.917", "Score": "-1", "CreationDate": "2013-06-20T01:05:50.610", "ParentId": "21593", "CommentCount": "3", "OwnerUserId": "1294322", "LastEditDate": "2016-01-01T20:35:01.917"}, "bq_ids": {"n4140": {"so_21593_77092_8": {"length": 6, "quality": 0.75, "section_id": 5313}, "so_21593_41538_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 504}, "so_21593_77092_7": {"length": 6, "quality": 0.75, "section_id": 5313}, "so_21593_77092_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 505}, "so_21593_41538_5": {"length": 24, "quality": 0.9230769230769231, "section_id": 505}, "so_21593_77092_6": {"length": 54, "quality": 0.9152542372881356, "section_id": 506}, "so_21593_77092_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 504}, "so_21593_32064944_4": {"length": 7, "quality": 1.0, "section_id": 505}, "so_21593_32064944_6": {"length": 54, "quality": 0.9152542372881356, "section_id": 506}, "so_21593_41538_7": {"length": 7, "quality": 1.0, "section_id": 505}, "so_21593_32064944_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 504}, "so_21593_32064944_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 505}, "so_21593_32064944_7": {"length": 6, "quality": 0.75, "section_id": 5313}, "so_21593_32064944_8": {"length": 6, "quality": 0.75, "section_id": 5313}, "so_21593_77092_4": {"length": 7, "quality": 1.0, "section_id": 505}}, "n3337": {"so_21593_77092_8": {"length": 6, "quality": 0.75, "section_id": 5110}, "so_21593_41538_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 495}, "so_21593_77092_7": {"length": 6, "quality": 0.75, "section_id": 5110}, "so_21593_77092_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 496}, "so_21593_41538_5": {"length": 24, "quality": 0.9230769230769231, "section_id": 496}, "so_21593_77092_6": {"length": 55, "quality": 0.9322033898305084, "section_id": 497}, "so_21593_77092_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 495}, "so_21593_32064944_4": {"length": 7, "quality": 1.0, "section_id": 496}, "so_21593_32064944_6": {"length": 55, "quality": 0.9322033898305084, "section_id": 497}, "so_21593_41538_7": {"length": 7, "quality": 1.0, "section_id": 496}, "so_21593_32064944_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 495}, "so_21593_32064944_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 496}, "so_21593_32064944_7": {"length": 6, "quality": 0.75, "section_id": 5110}, "so_21593_32064944_8": {"length": 6, "quality": 0.75, "section_id": 5110}, "so_21593_77092_4": {"length": 7, "quality": 1.0, "section_id": 496}}, "n4659": {"so_21593_77092_8": {"length": 6, "quality": 0.75, "section_id": 6737}, "so_21593_41538_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 525}, "so_21593_77092_7": {"length": 6, "quality": 0.75, "section_id": 6737}, "so_21593_77092_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 526}, "so_21593_41538_5": {"length": 24, "quality": 0.9230769230769231, "section_id": 526}, "so_21593_77092_6": {"length": 54, "quality": 0.9152542372881356, "section_id": 527}, "so_21593_77092_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 525}, "so_21593_32064944_4": {"length": 7, "quality": 1.0, "section_id": 526}, "so_21593_32064944_6": {"length": 54, "quality": 0.9152542372881356, "section_id": 527}, "so_21593_41538_7": {"length": 7, "quality": 1.0, "section_id": 526}, "so_21593_32064944_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 525}, "so_21593_32064944_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 526}, "so_21593_32064944_7": {"length": 6, "quality": 0.75, "section_id": 6737}, "so_21593_32064944_8": {"length": 6, "quality": 0.75, "section_id": 6737}, "so_21593_77092_4": {"length": 7, "quality": 1.0, "section_id": 526}}}, "26372302": {"Id": "26372302", "PostTypeId": "2", "Body": "<p>Thanks for the great answers, esp. Adam Stelmaszczyk and piCookie, and aib.  </p>\n<p>Like many programmers, I have used the informal convention of using the <code>\"myApp.hpp\"</code> form for application specific files, and the <code>&lt;libHeader.hpp&gt;</code> form for library and compiler system files, i.e. files specified in <code>/I</code> and the <code>INCLUDE</code> environment variable, for years thinking that was the standard.</p>\n<p>However, the C standard states that the search order is implementation specific, which can make portability complicated.  To make matters worse, we use jam, which automagically figures out where the include files are.  You can use relative or absolute paths for your include files. i.e.</p>\n<pre><code>#include \"../../MyProgDir/SourceDir1/someFile.hpp\"\n</code></pre>\n<p>Older versions of MSVS required double backslashes (\\\\), but now that's not required. I don't know when it changed. Just use forward slashes for compatibility with 'nix (Windows will accept that).</p>\n<p>If you are <em>really</em> worried about it, use <code>\"./myHeader.h\"</code> for an include file in the same directory as the source code (my current, very large project has some duplicate include file names scattered about--really a configuration management problem).</p>\n<p>Here's the <a href=\"http://msdn.microsoft.com/en-us/library/36k2cdd4.aspx\" rel=\"noreferrer\">MSDN explanation</a> copied here for your convenience).</p>\n<blockquote>\n<p id=\"so_21593_26372302_0\"><strong>Quoted form</strong></p>\n<p id=\"so_21593_26372302_1\">The preprocessor searches for include files in this order:</p>\n<ol>\n<li>In the same directory as the file that contains the #include statement.  </li>\n<li>In the directories of the currently opened include files, in the reverse order in which<br>\n    they were opened. The search begins in the directory of the parent include file and<br>\n    continues upward through the directories of any grandparent include files.  </br></br></li>\n<li>Along the path that's specified by each <code>/I</code> compiler option.  </li>\n<li>Along the paths that are specified by the <code>INCLUDE</code> environment variable.  </li>\n</ol>\n<p id=\"so_21593_26372302_2\"><strong>Angle-bracket form</strong></p>\n<p id=\"so_21593_26372302_3\">The preprocessor searches for include files in this order:</p>\n<ol>\n<li>Along the path that's specified by each <code>/I</code> compiler option.  </li>\n<li>When compiling occurs on the command line, along the paths that are specified by the <code>INCLUDE</code> environment variable.</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "15168", "LastActivityDate": "2016-11-10T04:08:06.307", "Score": "11", "CreationDate": "2014-10-14T23:51:24.550", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "4079867", "LastEditDate": "2016-11-10T04:08:06.307"}, "47593037": {"Id": "47593037", "PostTypeId": "2", "Body": "<p>For #include \"filename\" the preprocessor searches in the same directory as the file containing the directive. This method is normally used to include programmer-defined header files.</p>\n<p>For #include  the preprocessor searches in an implementation dependent manner, normally in search directories pre-designated by the compiler/IDE. This method is normally used to include standard library header files.</p>\n", "LastActivityDate": "2017-12-01T12:05:27.360", "CommentCount": "0", "CreationDate": "2017-12-01T12:05:27.360", "ParentId": "21593", "Score": "0", "OwnerUserId": "2516242"}, "25535615": {"Id": "25535615", "PostTypeId": "2", "Body": "<p>The <code>#include &lt;filename&gt;</code> is used when a system file is being referred to. That is a header file that can be found at system default locations like <code>/usr/include</code> or <code>/usr/local/include</code>. For your own files that needs to be included in another program you have to use the <code>#include \"filename\"</code> syntax.</p>\n", "LastActivityDate": "2014-08-27T19:36:49.697", "CommentCount": "0", "CreationDate": "2014-08-27T19:36:49.697", "ParentId": "21593", "Score": "3", "OwnerUserId": "1216268"}, "7889340": {"Id": "7889340", "PostTypeId": "2", "Body": "<p>At least for GCC version &lt;= 3.0, the angle-bracket form does not generate a dependency between the included file and the including one.</p>\n<p>So if you want to generate dependency rules (using the GCC -M option for exemple), you must use the quoted form for the files that should be included in the dependency tree.</p>\n<p>(See <a href=\"http://gcc.gnu.org/onlinedocs/cpp/Invocation.html\" rel=\"noreferrer\">http://gcc.gnu.org/onlinedocs/cpp/Invocation.html</a> )</p>\n", "LastActivityDate": "2011-10-25T12:35:25.993", "CommentCount": "0", "CreationDate": "2011-10-25T12:35:25.993", "ParentId": "21593", "Score": "11", "OwnerUserId": "1012712"}, "50266": {"Body": "<p>The sequence of characters between &lt; and &gt; uniquely refer to a header, which isn't necessarily a file. Implementations are pretty much free to use the character sequence as they wish. (Mostly, however, just treat it as a file name and do a search in the <em>include path</em>, as the other posts state.)</p>\n<p>If the <code>#include \"file\"</code> form is used, the implementation first looks for a file of the given name, if supported. If not (supported), or if the search fails, the implementation behaves as though the other (<code>#include &lt;file&gt;</code>) form was used.</p>\n<p>Also, a third form exists and is used when the <code>#include</code> directive doesn't match either of the forms above. In this form, some basic preprocessing (such as macro expansion) is done on the \"operands\" of the <code>#include</code> directive, and the result is expected to match one of the two other forms.</p>\n", "CreationDate": "2008-09-08T17:43:19.657", "ParentId": "21593", "CommentCount": "10", "LastEditDate": "2013-04-22T16:06:58.577", "PostTypeId": "2", "OwnerDisplayName": "aib", "LastEditorUserId": "784877", "LastActivityDate": "2013-04-22T16:06:58.577", "Id": "50266", "Score": "185", "OwnerUserId": "1088"}, "4932605": {"Id": "4932605", "PostTypeId": "2", "Body": "<p>It does:</p>\n<pre><code>\"mypath/myfile\" is short for ./mypath/myfile\n</code></pre>\n<p>with <code>.</code> being either the directory of the file where the <code>#include</code> is contained in, and/or the current working directory of the compiler, and/or the <code>default_include_paths</code></p>\n<p>and</p>\n<pre><code>&lt;mypath/myfile&gt; is short for &lt;defaultincludepaths&gt;/mypath/myfile\n</code></pre>\n<p>If <code>./</code> is in <code>&lt;default_include_paths&gt;</code>, then it doesn't make a difference.</p>\n<p>If <code>mypath/myfile</code> is in another include directory, the behavior is undefined.</p>\n", "LastEditorUserId": "155077", "LastActivityDate": "2016-09-06T09:04:29.870", "Score": "34", "CreationDate": "2011-02-08T11:45:44.437", "ParentId": "21593", "CommentCount": "4", "OwnerUserId": "155077", "LastEditDate": "2016-09-06T09:04:29.870"}, "29418258": {"Id": "29418258", "PostTypeId": "2", "Body": "<code>#include &lt;filename&gt;</code>\n<p>is used when you want to use the header file of the C/C++ system or compiler libraries. These libraries can be stdio.h, string.h, math.h, etc.</p>\n<code>#include \"path-to-file/filename\"</code>\n<p>is used when you want to use your own custom header file which is in your project folder or somewhere else.</p>\n<p>For more information about preprocessors and header. Read <em><a href=\"http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm\" rel=\"noreferrer\">C - Preprocessors</a></em>.</p>\n", "LastEditorUserId": "2189932", "LastActivityDate": "2016-08-23T10:38:29.017", "Score": "1", "CreationDate": "2015-04-02T16:50:05.967", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "2189932", "LastEditDate": "2016-08-23T10:38:29.017"}, "13910243": {"Id": "13910243", "PostTypeId": "2", "Body": "<p><strong>#include&lt;&gt; is for predefined header files</strong></p>\n<p>If the header file is predefined then you would simply write the header file name in angular brackets, and it would look like this (assuming we have a predefined header file name iostream):</p>\n<p><strong>#include</strong> &lt;<strong>iostream&gt;</strong></p>\n<p><strong>#include \" \" is for header files the programmer defines</strong></p>\n<p>If you (the programmer) wrote your own header file then you would write the header file name in quotes. So, suppose you wrote a header file called myfile.h, then this is an example of how you would use the include directive to include that file:</p>\n<p><strong>#include \"myfile.h</strong>\"</p>\n", "LastEditorUserId": "296974", "LastActivityDate": "2014-03-18T10:16:35.927", "Score": "7", "CreationDate": "2012-12-17T07:54:13.033", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "1085742", "LastEditDate": "2014-03-18T10:16:35.927"}, "4932607": {"Id": "4932607", "PostTypeId": "2", "Body": "<p>For <code>#include \"\"</code> a compiler normally searches the folder of the file which contains that include and then the other folders. For <code>#include &lt;&gt;</code> the compiler does not search the current file's folder.</p>\n", "LastEditorUserId": "412080", "LastActivityDate": "2015-07-25T15:29:19.627", "Score": "9", "CreationDate": "2011-02-08T11:45:59.243", "ParentId": "21593", "CommentCount": "4", "OwnerUserId": "412080", "LastEditDate": "2015-07-25T15:29:19.627"}, "38537": {"Id": "38537", "PostTypeId": "2", "Body": "<p>I believe that headers included in double-quotes will be looked for the in same system paths as angle-bracketed includes if they are not found in the current directory.</p>\n", "OwnerDisplayName": "mellis", "LastActivityDate": "2008-09-01T22:19:04.470", "Score": "-1", "CreationDate": "2008-09-01T22:19:04.470", "ParentId": "21593", "CommentCount": "1", "OwnerUserId": "4127"}, "21594": {"Id": "21594", "PostTypeId": "2", "Body": "<p>The difference is in the location where the preprocessor searches for the included file. </p>\n<p>For <code>#include \"filename\"</code> the preprocessor searches in the same directory as the file containing the directive, and then like for <code>#include &lt;filename&gt;</code>. This method is normally used to include programmer-defined header files. </p>\n<p>For <code>#include &lt;filename&gt;</code> the preprocessor searches in an implementation dependent manner, normally in search directories pre-designated by the compiler/IDE. This method is normally used to include standard library header files.</p>\n", "LastEditorUserId": "3204551", "LastActivityDate": "2017-05-14T10:48:23.273", "Score": "849", "CreationDate": "2008-08-22T01:40:27.897", "ParentId": "21593", "CommentCount": "8", "OwnerUserId": "2399", "LastEditDate": "2017-05-14T10:48:23.273"}, "41646905": {"Id": "41646905", "PostTypeId": "2", "Body": "<p><a href=\"https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\" rel=\"nofollow noreferrer\">GCC documentation says</a> the following about the difference between the two:</p>\n<blockquote>\n<p id=\"so_21593_41646905_0\">Both user and system header files are included using the preprocessing     directive <strong><code>\u2018#include\u2019</code></strong>. It has two variants:</p>\n<blockquote>\n<p id=\"so_21593_41646905_7\"><strong><code>#include &lt;file&gt;</code></strong></p>\n<p id=\"so_21593_41646905_8\">This variant is used for system header files. It searches for a file named file in a standard list of system directories. You can prepend directories to this list with the <code>-I</code> option (see <a href=\"https://gcc.gnu.org/onlinedocs/cpp/Invocation.html#Invocation\" rel=\"nofollow noreferrer\">Invocation</a>).</p>\n<p id=\"so_21593_41646905_9\"><strong><code>#include \"file\"</code></strong></p>\n<p id=\"so_21593_41646905_10\">This variant is used for header files of your own program. It searches for a file named file first in the directory containing the current file, then in the quote directories and then the same directories used for <code>&lt;file&gt;</code>. You can prepend directories to the list of quote directories with the <code>-iquote</code> option.\n    The argument of <code>\u2018#include\u2019</code>, whether delimited with quote marks or angle brackets, behaves like a string constant in that comments are not recognized, and macro names are not expanded. Thus, <code>#include &lt;x/*y&gt;</code> specifies inclusion of a system header file named <code>x/*y</code>.</p>\n<p id=\"so_21593_41646905_11\">However, if backslashes occur within file, they are considered ordinary text characters, not escape characters. None of the character escape sequences appropriate to string constants in C are processed. Thus,<code>#include \"x\\n\\\\y\"</code>specifies a filename containing three backslashes. (Some systems interpret \u2018\\\u2019 as a pathname separator. All of these also interpret <code>\u2018/\u2019</code> the same way. It is most portable to use only <code>\u2018/\u2019</code>.)</p>\n<p id=\"so_21593_41646905_12\">It is an error if there is anything (other than comments) on the line after the file name.</p>\n</blockquote>\n</blockquote>\n", "LastEditorUserId": "63550", "LastActivityDate": "2017-11-21T21:51:16.237", "Score": "20", "CreationDate": "2017-01-14T04:52:16.157", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "5473170", "LastEditDate": "2017-11-21T21:51:16.237"}, "37361343": {"Id": "37361343", "PostTypeId": "2", "Body": "<p><code>#include &lt;filename&gt;</code></p>\n<p>will find the corresponding file from the C++ library.\nit means if you have a file called hello.h in the C++ library folder, <code>#include &lt;hello.h&gt;</code> will load it.</p>\n<p>But,</p>\n<p><code>#include \"filename\"</code></p>\n<p>will find the file in the same directory where your source file is.</p>\n<p>In addition,</p>\n<p><code>#include \"path_to_file/filename\"</code></p>\n<p>will find the file in the directory which you typed in <code>path_to_file</code>.</p>\n", "OwnerDisplayName": "user5058091", "LastEditorUserId": "5144991", "LastActivityDate": "2016-05-21T10:14:37.130", "Score": "-1", "CreationDate": "2016-05-21T09:51:04.783", "ParentId": "21593", "CommentCount": "1", "LastEditDate": "2016-05-21T10:14:37.130"}, "32064944": {"Id": "32064944", "PostTypeId": "2", "Body": "<p>By the standard - yes, they are different:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_21593_32064944_0\">A preprocessing directive of the form</p>\n<pre><code>#include &lt;h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_21593_32064944_1\">searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p></li>\n<li><p id=\"so_21593_32064944_2\">A preprocessing directive of the form</p>\n<pre><code>#include \"q-char-sequence\" new-line\n</code></pre>\n<p id=\"so_21593_32064944_3\">causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the <code>\"</code> delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>\n<pre><code>#include &lt;h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_21593_32064944_4\">with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original\n  directive.</p></li>\n<li><p id=\"so_21593_32064944_5\">A preprocessing directive of the form</p>\n<pre><code>#include pp-tokens new-line\n</code></pre>\n<p id=\"so_21593_32064944_6\">(that does not match one of the two previous forms) is permitted. The preprocessing tokens after <code>include</code> in the directive are processed just as in normal text. (Each identifier currently defined as a macro name is replaced by its replacement list of preprocessing tokens.) The directive resulting after all replacements shall match one of the two previous forms. The method by which a sequence of preprocessing tokens between a <code>&lt;</code> and a <code>&gt;</code> preprocessing token pair or a pair of <code>\"</code> characters is combined into a single header name preprocessing token is implementation-defined.</p></li>\n</ul>\n<h3>Definitions:</h3>\n<ul>\n<li><p id=\"so_21593_32064944_7\">h-char: any member of the source character set except the new-line character and <code>&gt;</code></p></li>\n<li><p id=\"so_21593_32064944_8\">q-char: any member of the source character set except the new-line character and <code>\"</code></p></li>\n</ul>\n</blockquote>\n<p>Note that the standard does not tell any relation between the implementation-defined manners. The first form searches in one implementation-defined way, and the other in a (possibly other) implementation-defined way. The standard also specifies that certain include files shall be present (for example, <code>&lt;stdio.h&gt;</code>).</p>\n<p>Formally you'd have to read the manual for your compiler, however normally (by tradition) the <code>#include \"...\"</code> form searches the directory of the file in which the <code>#include</code> was found first, and then the directories that the <code>#include &lt;...&gt;</code> form searches (the include path, eg system headers).</p>\n", "LastEditorUserId": "4498329", "LastActivityDate": "2016-07-28T07:25:35.053", "Score": "15", "CreationDate": "2015-08-18T06:21:43.373", "ParentId": "21593", "CommentCount": "3", "OwnerUserId": "4498329", "LastEditDate": "2016-07-28T07:25:35.053"}, "11576616": {"Id": "11576616", "PostTypeId": "2", "Body": "<p>Some good answers here make references to the C standard but forgot the POSIX standard, especially the specific behavior of the <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html\">c99 (e.g. C compiler)</a> command.</p>\n<p>According to <a href=\"https://www2.opengroup.org/ogsys/catalog/C138\">The Open Group Base Specifications Issue 7</a>,</p>\n<blockquote>\n<p id=\"so_21593_11576616_0\"><strong>-I</strong> <em>directory</em></p>\n<p id=\"so_21593_11576616_1\">Change the algorithm for searching for headers whose names are not absolute pathnames to look in the directory named by the <em>directory</em> pathname before looking in the usual places. Thus, headers whose names are enclosed in double-quotes ( \"\" ) shall be searched for first in the directory of the file with the <strong>#include</strong> line, then in directories named in <strong>-I</strong> options, and last in the usual places. For headers whose names are enclosed in angle brackets ( \"&lt;&gt;\" ), the header shall be searched for only in directories named in <strong>-I</strong> options and then in the usual places. Directories named in <strong>-I</strong> options shall be searched in the order specified. Implementations shall support at least ten instances of this option in a single <em>c99</em> command invocation.</p>\n</blockquote>\n<p>So, in a POSIX compliant environment, with a POSIX compliant C compiler, <code>#include \"file.h\"</code> is likely going to search for <code>./file.h</code> first, where <code>.</code> is the directory where is the file with the <code>#include</code> statement, while <code>#include &lt;file.h&gt;</code>, is likely going to search for <code>/usr/include/file.h</code> first, where <code>/usr/include</code> is your system defined <em>usual places</em> for headers (it's seems not defined by POSIX).</p>\n", "LastEditorUserId": "1566221", "LastActivityDate": "2015-03-12T05:29:33.923", "Score": "81", "CreationDate": "2012-07-20T09:29:31.503", "ParentId": "21593", "CommentCount": "2", "OwnerUserId": "611560", "LastEditDate": "2015-03-12T05:29:33.923"}, "4932754": {"Id": "4932754", "PostTypeId": "2", "Body": "<p>An #include with angle brackets will search an \"implementation-dependent list of places\" (which is a very complicated way of saying \"system headers\") for the file to be included.</p>\n<p>An #include with quotes will just search for a file (and, \"in an implementation-dependent manner\", bleh). Which means, in normal English, it will try to apply the path/filename that you toss at it and will not prepend a system path or tamper with it otherwise.</p>\n<p>Also, if #include \"\" fails, it is re-read as #include &lt;&gt; by the standard.</p>\n<p>The <a href=\"http://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\" rel=\"noreferrer\">gcc documentation</a> has a (compiler specific) description which although being specific to gcc and not the standard, is a lot easier to understand than the attorney-style talk of the ISO standards.</p>\n", "LastActivityDate": "2011-02-08T12:02:32.363", "CommentCount": "4", "CreationDate": "2011-02-08T12:02:32.363", "ParentId": "21593", "Score": "7", "OwnerUserId": "572743"}, "7589297": {"Id": "7589297", "PostTypeId": "2", "Body": "<pre><code>#include \"filename\" // User defined header\n#include &lt;filename&gt; // Standard library header.\n</code></pre>\n<p>Example:</p>\n<p>The filename here is <code>Seller.h</code>:</p>\n<pre><code>#ifndef SELLER_H     // Header guard\n#define SELLER_H     // Header guard\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nclass Seller\n{\n    private:\n        char name[31];\n        double sales_total;\n\n    public:\n        Seller();\n        Seller(char[], double);\n        char*getName();\n\n#endif\n</code></pre>\n<p>In the class implementation (for example, <code>Seller.cpp</code>, and in other files that will use the file <code>Seller.h</code>), the header defined by the user should now be included, as follows:</p>\n<pre><code>#include \"Seller.h\"\n</code></pre>\n", "LastEditorUserId": "63550", "LastActivityDate": "2017-11-21T21:47:44.737", "Score": "7", "CreationDate": "2011-09-28T20:37:38.270", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "969921", "LastEditDate": "2017-11-21T21:47:44.737"}, "41538": {"Body": "<p>The <code>&lt;file&gt;</code> include tells the preprocessor to search in <code>-I</code> directories and in predefined directories <strong>first</strong>, then in the .c file's directory. The <code>\"file\"</code> include tells the preprocessor to search the source file's directory <strong>first</strong>, and then revert to <code>-I</code> and predefined. All destinations are searched anyway, only the order of search is different.</p>\n<p>The 2011 standard mostly discusses the include files in \"16.2 Source file inclusion\".</p>\n<blockquote>\n<p id=\"so_21593_41538_0\">2 A preprocessing directive of the form</p>\n<p id=\"so_21593_41538_1\"><code># include &lt;h-char-sequence&gt; new-line</code></p>\n<p id=\"so_21593_41538_2\">searches a sequence of implementation-defined places for a header identified uniquely by the\n  specified sequence between the &lt; and &gt; delimiters, and causes the\n  replacement of that directive by the entire contents of the header.\n  How the places are specified or the header identified is\n  implementation-defined.</p>\n<p id=\"so_21593_41538_3\">3 A preprocessing directive of the form</p>\n<p id=\"so_21593_41538_4\"><code># include \"q-char-sequence\" new-line</code></p>\n<p id=\"so_21593_41538_5\">causes the replacement of that directive by the entire contents of the source file identified by the\n  specified sequence between the \" delimiters. The named source file is\n  searched for in an implementation-defined manner. If this search is\n  not supported, or if the search fails, the directive is reprocessed as\n  if it read</p>\n<p id=\"so_21593_41538_6\"><code># include &lt;h-char-sequence&gt; new-line</code></p>\n<p id=\"so_21593_41538_7\">with the identical contained sequence (including &gt; characters, if any) from the original directive.</p>\n</blockquote>\n<p>Note that <code>\"xxx\"</code> form degrades to <code>&lt;xxx&gt;</code> form if the file is not found. The rest is implementation-defined.</p>\n", "CreationDate": "2008-09-03T12:17:00.173", "ParentId": "21593", "CommentCount": "5", "LastEditDate": "2014-12-28T18:25:27.993", "PostTypeId": "2", "OwnerDisplayName": "Arkadiy", "LastEditorUserId": "3458", "LastActivityDate": "2014-12-28T18:25:27.993", "Id": "41538", "Score": "17", "OwnerUserId": "3458"}, "22011884": {"Id": "22011884", "PostTypeId": "2", "Body": "<p>Many of the answers here focus on the paths the compiler will search in order to find the file. While this is what most compilers do, a conforming compiler is allowed to be preprogrammed with the effects of the standard headers, and to treat, say, <code>#include &lt;list&gt;</code> as a switch, and it need not exist as a file at all.</p>\n<p>This is not purely hypothetical. There is at least one compiler that work that way. Using <code>#include &lt;xxx&gt;</code> only with standard headers is recommended.</p>\n", "LastEditorUserId": "3202093", "LastActivityDate": "2017-05-30T10:19:46.617", "Score": "6", "CreationDate": "2014-02-25T10:49:06.020", "ParentId": "21593", "CommentCount": "2", "OwnerUserId": "3202093", "LastEditDate": "2017-05-30T10:19:46.617"}, "41517849": {"Id": "41517849", "PostTypeId": "2", "Body": "<pre><code>  #include &lt;filename&gt;   (1)     \n  #include \"filename\"   (2)\n</code></pre>\n<p><code>#include</code> includes source file, identified by filename, into the current source file at the line immediately after the directive.</p>\n<blockquote>\n<p id=\"so_21593_41517849_0\">The first version of the directive searches only standard include\n  directories. The standard C++ library, as well as standard C library,\n  is implicitly included in standard include directories. The standard\n  include directories can be controlled by the user through compiler\n  options.</p>\n<p id=\"so_21593_41517849_1\">The second version first searches the directory where the current file\n  resides and, only if the file is not found, searches the standard\n  include directories.</p>\n</blockquote>\n<p>In the case the file is not found, the program is ill-formed.</p>\n", "LastActivityDate": "2017-01-07T04:39:50.680", "CommentCount": "0", "CreationDate": "2017-01-07T04:39:50.680", "ParentId": "21593", "Score": "0", "OwnerUserId": "1340661"}, "16921556": {"Id": "16921556", "PostTypeId": "2", "Body": "<p>The simple general rule is to use angled brackets to include header files that come with the compiler. Use double quotes to include any other header files. Most compilers do it this way.</p>\n<p><em><a href=\"http://www.learncpp.com/cpp-tutorial/19-header-files/\" rel=\"nofollow\">1.9 \u2014 Header files</a></em> explains in more detail about pre-processor directives. If you are a novice programmer, that page should help you understand all that. I learned it from here, and I have been following it at work.</p>\n", "LastEditorUserId": "63550", "LastActivityDate": "2016-01-01T20:33:49.230", "Score": "2", "CreationDate": "2013-06-04T15:19:17.940", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "2262959", "LastEditDate": "2016-01-01T20:33:49.230"}, "35452132": {"Id": "35452132", "PostTypeId": "2", "Body": "<p>In C++, include a file in two ways:</p>\n<p>The first one is #include  which tells the preprocessor to look for the file in the predefined default location.\nThis location is often an INCLUDE environment variable that denotes the path to include files.</p>\n<p>And the second type is #include \"filename\" which tells the preprocessor to look for the file in the current directory first, then look for it in the predefined locations user have set up.</p>\n", "LastEditorUserId": "63550", "LastActivityDate": "2016-07-10T00:44:00.517", "Score": "4", "CreationDate": "2016-02-17T09:07:12.910", "ParentId": "21593", "CommentCount": "0", "OwnerUserId": "5938959", "LastEditDate": "2016-07-10T00:44:00.517"}, "77092": {"Body": "<p>The only way to know is to read your implementation's documentation.</p>\n<p>In <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182\" rel=\"noreferrer\">the C standard</a>, section 6.10.2, paragraphs 2 to 4 state:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_21593_77092_0\">A preprocessing directive of the form</p>\n<pre><code>#include &lt;h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_21593_77092_1\">searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p></li>\n<li><p id=\"so_21593_77092_2\">A preprocessing directive of the form</p>\n<pre><code>#include \"q-char-sequence\" new-line\n</code></pre>\n<p id=\"so_21593_77092_3\">causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the <code>\"</code> delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>\n<pre><code>#include &lt;h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_21593_77092_4\">with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original\n  directive.</p></li>\n<li><p id=\"so_21593_77092_5\">A preprocessing directive of the form</p>\n<pre><code>#include pp-tokens new-line\n</code></pre>\n<p id=\"so_21593_77092_6\">(that does not match one of the two previous forms) is permitted. The preprocessing tokens after <code>include</code> in the directive are processed just as in normal text. (Each identifier currently defined as a macro name is replaced by its replacement list of preprocessing tokens.) The directive resulting after all replacements shall match one of the two previous forms. The method by which a sequence of preprocessing tokens between a <code>&lt;</code> and a <code>&gt;</code> preprocessing token pair or a pair of <code>\"</code> characters is combined into a single header name preprocessing token is implementation-defined.</p></li>\n</ul>\n<h3>Definitions:</h3>\n<ul>\n<li><p id=\"so_21593_77092_7\">h-char: any member of the source character set except the new-line character and <code>&gt;</code></p></li>\n<li><p id=\"so_21593_77092_8\">q-char: any member of the source character set except the new-line character and <code>\"</code></p></li>\n</ul>\n</blockquote>\n", "CreationDate": "2008-09-16T21:06:23.613", "ParentId": "21593", "CommentCount": "15", "LastEditDate": "2016-08-22T09:22:31.107", "PostTypeId": "2", "OwnerDisplayName": "piCookie", "LastEditorUserId": "2436175", "LastActivityDate": "2016-08-22T09:22:31.107", "Id": "77092", "Score": "539", "OwnerUserId": "8763"}});