post_cb({"13521268": {"ParentId": "13521030", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Using the \"correct\" type doesn't make things better: Except for the <code>virtual</code> functions all functions in the standard C++ library can have additional arguments as long as these are defaulted. Since the functions can also be declared with additional overloads (again with the exception of the <code>virtual</code> function), you can end up trying to assign an overload set a variable. Thus, the code isn't portable and there is no way to make it portable by using some sort of cast or some signature instead of <code>auto</code>.</p>\n<p>The relevant quote is 17.6.5.5 [member.functions] paragraph 1:</p>\n<blockquote>\n<p id=\"so_13521030_13521268_0\">An implementation may declare additional non-virtual member function signatures within a class:<br/>\n  --- by adding arguments with default values to a member function signature;<br/>\n  \u2014 by replacing a member function signature with default values by two or more member function signatures with equivalent behavior; and<br/>\n  \u2014 by adding a member function signature for a member function name.</p>\n</blockquote>\n<p>I don't see a similar permission for non-member functions, though. Not sure where the permission to mess with these is hiding but I'm relatively sure that there are some weasel words for these as well. Looking further, it seems non-member functions are more constrained according to 17.6.5.4 [global.functions] paragraph 3:</p>\n<blockquote>\n<p id=\"so_13521030_13521268_1\">An implementation shall not declare a global or non-member function signature with additional default arguments.</p>\n</blockquote>\n<p>This would imply that you <em>can</em> take the address of the non-member functions, at least, when specifying the desired signature.</p>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2012-11-22T23:29:27.063", "Id": "13521268", "Score": "7", "CreationDate": "2012-11-22T23:21:52.500", "LastActivityDate": "2012-11-22T23:29:27.063"}, "bq_ids": {"n4140": {"so_13521030_13521268_0": {"section_id": 6341, "quality": 1.0, "length": 37}, "so_13521030_13521268_1": {"section_id": 6338, "quality": 1.0, "length": 9}}, "n3337": {"so_13521030_13521268_0": {"section_id": 6098, "quality": 1.0, "length": 37}, "so_13521030_13521268_1": {"section_id": 6095, "quality": 1.0, "length": 9}}, "n4659": {"so_13521030_13521268_1": {"section_id": 7848, "quality": 0.8888888888888888, "length": 8}, "so_13521030_13521268_0": {"section_id": 7851, "quality": 0.5135135135135135, "length": 19}}}, "13521030": {"CommentCount": "4", "AcceptedAnswerId": "13521268", "PostTypeId": "1", "LastEditorUserId": "514235", "CreationDate": "2012-11-22T22:56:16.697", "LastActivityDate": "2015-07-09T09:22:32.167", "LastEditDate": "2015-07-09T09:22:32.167", "ViewCount": "179", "FavoriteCount": "3", "Title": "What are the rules for function pointers and member function pointers to Standard functions?", "Id": "13521030", "Score": "7", "Body": "<p>What are the existing rules for taking function pointers or member function pointers to Standard functions? For example, something like</p>\n<pre><code>auto p = &amp;std::string::size;\n</code></pre>\n<p>Is this legal? Would it be more or less legal if I explicitly requested the correct type, so it would function even if there was an additional implementation-added overload of <code>std::string::size</code>?</p>\n", "Tags": "<c++><rules><standard-library><member-function-pointers><member-functions>", "OwnerUserId": "298661", "AnswerCount": "1"}});