post_cb({"28747791": {"ParentId": "28747481", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Given that [res.on.headers] is found in the C++14 standard under</p>\n<blockquote>\n<h1>17 Library Introduction</h1>\n<h2>17.6 Library-wide requirements</h2>\n<h3>17.6.5 Conforming implementations</h3>\n<p id=\"so_28747481_28747791_0\"><strong>17.6.5.2 Headers</strong></p>\n</blockquote>\n<p>it seems safe to say that \"C++ headers\" in this paragraph means C++ standard library headers. The term is to be understood as opposed to C headers (i.e., those cargo-culted from the C standard library), which are less free in this regard. [res.on.headers] says about them:</p>\n<blockquote>\n<p id=\"so_28747481_28747791_1\">The C standard headers (D.5) shall include only their corresponding C++ standard header, as described in 17.6.1.2.</p>\n</blockquote>\n<p>Since a C++ standard library header <strong>may</strong> include other C++ standard library headers, the contents of any other standard library header may become known after including another, but unless it is stated that a header <strong>must</strong> include another header, this is not reliable. Whether one header <strong>must</strong> include another is defined on a header-by-header basis. For example, for <code>&lt;iostream&gt;</code> it says in [iostream.objects.overview] (27.4.1):</p>\n<blockquote id=\"so_28747481_28747791_2\">\n<h3>Header <code>&lt;iostream&gt;</code> synopsis</h3>\n<pre><code>#include &lt;ios&gt;\n#include &lt;streambuf&gt;\n#include &lt;istream&gt;\n#include &lt;ostream&gt;\n\n(...)\n</code></pre>\n</blockquote>\n<p>And in [template.bitset] (20.7)</p>\n<blockquote id=\"so_28747481_28747791_3\">\n<h3>Header <code>&lt;bitset&gt;</code> synopsis</h3>\n<pre><code>#include &lt;string&gt;\n#include &lt;iosfwd&gt;        // for istream, ostream\n\n(...)\n</code></pre>\n</blockquote>\n", "OwnerUserId": "4301306", "LastEditorUserId": "4301306", "LastEditDate": "2015-02-26T16:42:23.753", "Id": "28747791", "Score": "4", "CreationDate": "2015-02-26T16:35:30.303", "LastActivityDate": "2015-02-26T16:42:23.753"}, "28747481": {"CommentCount": "3", "ViewCount": "162", "OwnerDisplayName": "user3920237", "CreationDate": "2015-02-26T16:20:50.983", "LastActivityDate": "2015-02-26T16:42:23.753", "PostTypeId": "1", "FavoriteCount": "1", "Title": "Is it unspecified whether a standard library header includes arbitrary headers?", "Id": "28747481", "Score": "8", "Body": "<p>There is a claim in <a href=\"https://stackoverflow.com/questions/26614983/which-headers-in-the-c-standard-library-are-guaranteed-to-include-another-head\">Which headers in the C++ standard library are guaranteed to include another header?</a>:</p>\n<blockquote>\n<p id=\"so_28747481_28747481_0\">The C++ standard library headers may include each other in unspecified\n  ways, so programmers generally shouldn't depend on one header\n  including another. [...]</p>\n</blockquote>\n<p>In practice this tends to be the case. For example, <code>&lt;iostream&gt;</code> may include <code>&lt;string&gt;</code>, in other cases you need to include <code>&lt;string&gt;</code> explicitly. However, I can't seem to find where in N4140 this is the case. I've looked in:</p>\n<ul>\n<li>\u00a72.9 [lex.header]</li>\n<li>\u00a717.6.1.2 [headers]</li>\n<li>\u00a717.6.2.2 [using.headers]</li>\n<li>\u00a717.6.4.4 [alt.headers]</li>\n<li>\u00a717.6.5.2 [res.on.headers]</li>\n</ul>\n<p>The closest I can find is from [using.headers]:</p>\n<blockquote>\n<p id=\"so_28747481_28747481_1\">2 A translation unit may include library headers in any order (Clause\n  2). Each may be included more than once, with no effect different from\n  being included exactly once, except that the effect of including\n  either <code>&lt;cassert&gt;</code> or <code>&lt;assert.h&gt;</code> depends each time on the lexically\n  current definition of <strong>NDEBUG</strong>.<sup>178</sup></p>\n</blockquote>\n<p>But this seems to apply to C++ programs, not the standard library:</p>\n<blockquote>\n<p id=\"so_28747481_28747481_2\">[using.overview]/1 This section describes how a C++ program gains access\n  to the facilities of the C++ standard library. [...]</p>\n</blockquote>\n<p>As well as [res.on.headers]:</p>\n<blockquote>\n<p id=\"so_28747481_28747481_3\">1 A C++ header may include other C++ headers. A C++ header shall\n  provide the declarations and definitions that appear in its synopsis.\n  A C++ header shown in its synopsis as including other C++ headers\n  shall provide the declarations and definitions that appear in the\n  synopses of those other headers.</p>\n</blockquote>\n<p>I think the key is the first sentence, but it doesn't explicitly say that it's <em>unspecified behavior</em>. Does it state anywhere that this is unspecified behavior or is it simply implied?</p>\n", "Tags": "<c++><header-files><language-lawyer><unspecified-behavior>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28747481_28747481_3": {"section_id": 6331, "quality": 1.0, "length": 27}, "so_28747481_28747481_2": {"section_id": 6267, "quality": 0.7777777777777778, "length": 7}, "so_28747481_28747791_1": {"section_id": 6333, "quality": 0.75, "length": 6}, "so_28747481_28747481_1": {"section_id": 6269, "quality": 0.9696969696969697, "length": 32}}, "n3337": {"so_28747481_28747481_3": {"section_id": 6088, "quality": 1.0, "length": 27}, "so_28747481_28747481_2": {"section_id": 6027, "quality": 0.7777777777777778, "length": 7}, "so_28747481_28747791_1": {"section_id": 6090, "quality": 0.75, "length": 6}, "so_28747481_28747481_1": {"section_id": 6029, "quality": 0.9696969696969697, "length": 32}}, "n4659": {"so_28747481_28747481_3": {"section_id": 7841, "quality": 1.0, "length": 27}, "so_28747481_28747481_2": {"section_id": 7773, "quality": 0.7777777777777778, "length": 7}, "so_28747481_28747481_1": {"section_id": 7775, "quality": 0.9696969696969697, "length": 32}, "so_28747481_28747791_1": {"section_id": 7843, "quality": 0.75, "length": 6}}}});