post_cb({"28457832": {"ViewCount": "73", "Body": "<p>I have to following piece of code and I wanted to know what the standard says about it. Is it undefined behaviour, defined but unspecified behaviour or well-defined behaviour?</p>\n<pre><code>using namespace std;\n\nstruct Foo {\n    mutable int obj;\n    Foo(Foo&amp;&amp;) = default;\n    Foo(int arg) : obj(arg) {}\n    void f() const { obj *= 2; }\n};\n\nint main()\n{\n    Foo&amp;&amp; a = Foo(5); // Binds temporary, lifetime ends with program\n    const Foo&amp; b = a; // Binds a, lifetime ends with program\n    Foo c(std::move(a)); // Moves from a\n    // a now in defined, but unspecified state\n    b.f(); // ??\n    cout &lt;&lt; b.obj &lt;&lt; endl; // May output 10\n    return 0;\n} // End of lifetime of temporary\n</code></pre>\n<p>Are the annotations and my understanding and interpretation of the standard correct?</p>\n", "AcceptedAnswerId": "28458512", "Title": "Combination of Rvalue binding and moving", "CreationDate": "2015-02-11T15:16:12.807", "Id": "28457832", "CommentCount": "3", "LastEditDate": "2015-02-11T15:28:18.097", "PostTypeId": "1", "LastEditorUserId": "3102935", "LastActivityDate": "2015-02-11T15:54:20.167", "Score": "2", "OwnerUserId": "3102935", "Tags": "<c++><c++11><reference>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28457832_28458512_0": {"length": 7, "quality": 1.0, "section_id": 464}, "so_28457832_28458512_1": {"length": 11, "quality": 1.0, "section_id": 3296}}, "n3337": {"so_28457832_28458512_1": {"length": 11, "quality": 1.0, "section_id": 3166}, "so_28457832_28458512_0": {"length": 7, "quality": 1.0, "section_id": 455}}, "n4659": {"so_28457832_28458512_1": {"length": 11, "quality": 1.0, "section_id": 4058}, "so_28457832_28458512_0": {"length": 7, "quality": 1.0, "section_id": 487}}}, "28458512": {"Id": "28458512", "PostTypeId": "2", "Body": "<p><code>move</code>ing from a value (rvalue ref construction, not calling <code>std::move</code>, naturally) semantically means that the value should be in a valid (specifically, valid for destruction) but unspecified state.</p>\n<p>However, <code>move</code> in C++ does not do magic.  This is just what you <em>should</em> do, not what the language forces you to do.</p>\n<p><code>move</code>ing a primitive \"scalar\" type instance does nothing different than copying it.</p>\n<p><code>move</code>ing class types does a member-wise (and parent-wise) <code>move</code> of each component from the source to the destination.</p>\n<p>The <code>=default</code> just means \"use the move constructor of my elements\", which is an <code>int</code>, and the move constructor of <code>int</code> does ... a copy (well, the move constructor of <code>int</code> doesn't exist, but if it did it would do a copy).</p>\n<p>The semantic meaning of <code>move</code>, that you must leave the source in a valid (and most importantly destroyable) state, is required to interact with <code>std</code> containers and algorithms in reasonable ways, and is how <code>std</code> types behave.</p>\n<hr>\n<p>All that is well and good, but where is the standard backing?</p>\n<p>What happens when you <code>move</code> using <code>=default</code> a class in this case ends up with this clause:</p>\n<h1>[class.copy]/15.3</h1>\n<blockquote>\n<p id=\"so_28457832_28458512_0\">otherwise, the base or member is direct-initialized with the corresponding base or member of x</p>\n</blockquote>\n<p>And for direct-initialization, the clause that tells you how to direct-initialize an <code>int</code> from an <code>int&amp;&amp;</code> is:</p>\n<h1>[dcl.init]/17.8</h1>\n<blockquote>\n<p id=\"so_28457832_28458512_1\">Otherwise, the initial value of the object being initialized is the (possibly converted) value of the ini-tializer expression.</p>\n</blockquote>\n<p>The value of the second expression <code>int a = 7; std::move(a);</code> is 7.  The value of <code>a</code> is not changed, because the standard does not permit it.</p>\n<p>Moving isn't magic.</p>\n<p>(Quotes from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">n4296</a>, the current draft standard.)</p>\n</hr>", "LastEditorUserId": "1774667", "LastActivityDate": "2015-02-11T15:54:20.167", "Score": "5", "CreationDate": "2015-02-11T15:47:06.363", "ParentId": "28457832", "CommentCount": "0", "OwnerUserId": "1774667", "LastEditDate": "2015-02-11T15:54:20.167"}});