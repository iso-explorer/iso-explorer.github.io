post_cb({"9085993": {"PostTypeId": "2", "Body": "<p>Actually, C++ signal handlers are not permitted to use any facilities not present in both C and C++ (except that in C++11 they may use atomics), and are required to use C linkage. Quoting <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++11 draft n3242</a> section 18.10\u00a0\"Other runtime support\" [support.runtime] (paragraph 8),</p>\n<blockquote>\n<p id=\"so_343219_9085993_0\">The common subset of the C and C++ languages consists of all declarations,\n  definitions, and expressions that may appear in a well formed C++ program \n  and also in a conforming C program. A POF (\u201cplain old function\u201d) is a\n  function that uses only features from this common subset, and that does not\n  directly or indirectly use any function that is not a POF, except that it\n  may use functions defined in Clause 29 that are not member functions. All\n  signal handlers shall have C linkage. A POF that could be used as a signal\n  handler in a conforming C program does not produce undefined behavior when\n  used as a signal handler in a C++ program. The behavior of any other function\n  used as a signal handler in a C++ program is implementation-defined.</p>\n</blockquote>\n<p>(Clause 29 being the one on atomics.)</p>\n", "LastActivityDate": "2012-01-31T19:55:23.260", "Id": "9085993", "CommentCount": "0", "CreationDate": "2012-01-31T19:55:23.260", "ParentId": "343219", "Score": "1", "OwnerUserId": "294313"}, "343219": {"ViewCount": "16098", "Body": "<p>I am doing something like this:</p>\n<pre><code>#include &lt;signal.h&gt;\n\nclass myClass {\n\n    public: \n\n    void myFunction () \n    {\n    signal(SIGIO,myHandler);\n    }\n\n    void myHandler (int signum)\n    {\n    /**\n    * Handling code\n    */\n    }\n\n    }\n</code></pre>\n<p>I am working on Ubuntu, using gcc. </p>\n<p>But it won't compile. It is complaining with:</p>\n<blockquote>\n<p id=\"so_343219_343219_0\">error: the argument with type <code>void (MyClass::)(int)</code> doesn't agree with <code>void (*) (int)</code></p>\n</blockquote>\n<p>Any clues? Or maybe it is just that I cannot use a signal inside classes? Are signals only allowed in C? </p>\n<p>The error message is an approximate translation because my compiler is not in English.</p>\n", "AcceptedAnswerId": "344495", "Title": "Is it possible to use signal inside a C++ class?", "CreationDate": "2008-12-05T08:42:56.440", "Id": "343219", "CommentCount": "3", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2015-08-12T15:53:45.227", "OwnerDisplayName": "pabloh84", "LastEditorUserId": "66519", "LastActivityDate": "2016-02-06T10:15:38.953", "Score": "26", "OwnerUserId": "366094", "Tags": "<c++><signal-handling>", "AnswerCount": "5"}, "32757577": {"PostTypeId": "2", "Body": "<pre><code>#include &lt;signal.h&gt;\n\nclass myClass {\n\n private:\n  static myClass* me;\n\n public:\n  myClass(){ me=this; }\n\n  void myFunction (){\n    signal(SIGIO,myClass::myHandler);\n  }\n\n  void my_method(){ }\n\n  static void myHandler (int signum){\n    me-&gt;my_method();\n }\n}\n</code></pre>\n", "LastActivityDate": "2015-09-24T09:13:12.343", "Id": "32757577", "CommentCount": "1", "CreationDate": "2015-09-24T09:13:12.343", "ParentId": "343219", "Score": "1", "OwnerUserId": "4264914"}, "bq_ids": {"n4140": {"so_343219_9085993_0": {"length": 47, "quality": 0.7580645161290323, "section_id": 6973}}, "n3337": {"so_343219_9085993_0": {"length": 59, "quality": 0.9516129032258065, "section_id": 6719}}}, "343253": {"PostTypeId": "2", "Body": "<p>To pass a pointer to a method, it must be a static method and you must specify the class name.</p>\n<p>Try this:</p>\n<pre><code>class myClass {\n  void myFunction () \n  {\n    signal(SIGIO, myClass::myHandler);\n  }\n\n  static void myHandler (int signum)\n  {\n     // blabla\n  }\n};\n</code></pre>\n<p>And you should also read the link supplied by Baget, the <a href=\"http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.2\" rel=\"noreferrer\">paragraph 33.2 in the C++ FAQ</a>.</p>\n", "OwnerDisplayName": "J&#248;rn Jensen", "LastActivityDate": "2008-12-05T09:01:32.470", "Id": "343253", "CommentCount": "1", "CreationDate": "2008-12-05T09:01:32.470", "ParentId": "343219", "Score": "9", "OwnerUserId": "34585"}, "343226": {"Body": "<p>Read this following section (33.2):</p>\n<p><a href=\"https://isocpp.org/wiki/faq/pointers-to-members#memfnptr-vs-fnptr\" rel=\"nofollow noreferrer\">C++ FAQ - pointers-to-members</a></p>\n", "CreationDate": "2008-12-05T08:45:53.110", "ParentId": "343219", "CommentCount": "2", "LastEditDate": "2016-02-06T10:15:38.953", "PostTypeId": "2", "OwnerDisplayName": "Baget", "LastEditorUserId": "34369", "LastActivityDate": "2016-02-06T10:15:38.953", "Id": "343226", "Score": "1", "OwnerUserId": "34369"}, "344495": {"Body": "<p>The second parameter of signal should be a pointer to a function accepting an int and returning void. What you're passing to signal is a pointer to a <em>member</em> function accepting an int and returning void (its type being <code>void (myClass::*)(int)</code>). I can see three possibilities to overcome this issue:</p>\n<p>1 - Your method <code>myHandler</code> can be static: this is great, make it static</p>\n<pre><code>class myClass \n{\n  public:\n    void myFunction () \n    {\n        signal(SIGIO, myClass::myHandler);\n    }\n\n    static void myHandler (int signum)\n    {\n        // handling code\n    }\n};\n</code></pre>\n<p>2 - Your method shouldn't be static: if you're planning to use signal with only one instance, you can create a private static object, and write a static method that simply call the method on this object. Something along the lines of</p>\n<pre><code>class myClass \n{\n  public:\n    void myFunction () \n    {\n        signal(SIGIO, myClass::static_myHandler);\n    }\n\n    void myHandler (int signum)\n    {\n        // handling code\n    }\n\n    static void static_myHandler(int signum)\n    {\n        instance.myHandler(signum);\n    }\n\n  private:\n    static myClass instance;\n};\n</code></pre>\n<p>3 - However, if you're planning on using the signal with multiple instances, things will get more complicated. Perhaps a solution would be to store each instance you want to manipulate in a static vector, and invoking the method on each of these :</p>\n<pre><code>class myClass\n{\n  public:\n    void myFunction () // registers a handler\n    {\n        instances.push_back(this);\n    }\n\n    void myHandler (int signum)\n    {\n        // handling code\n    }\n\n    static void callHandlers (int signum) // calls the handlers\n    {\n        std::for_each(instances.begin(), \n                      instances.end(), \n                      std::bind2nd(std::mem_fun(&amp;myClass::myHandler), signum));\n    }\n  private:\n    static std::vector&lt;myClass *&gt; instances;\n};\n</code></pre>\n<p>and somewhere, do a single call to</p>\n<pre><code>signal(SIGIO, myClass::callHandlers);\n</code></pre>\n<p>But I think that if you end up using the last solution, you should probably think about changing your handling design :-)!</p>\n", "CreationDate": "2008-12-05T16:56:20.950", "ParentId": "343219", "CommentCount": "4", "LastEditDate": "2008-12-06T21:22:40.210", "PostTypeId": "2", "LastEditorDisplayName": "Luc Touraille", "LastActivityDate": "2008-12-06T21:22:40.210", "LastEditorUserId": "20984", "Id": "344495", "OwnerDisplayName": "Luc Touraille", "Score": "36", "OwnerUserId": "20984"}});