post_cb({"22957321": {"ParentId": "22957224", "CommentCount": "0", "Body": "<p>When you call</p>\n<pre><code>Add(5.5,6.6);\n</code></pre>\n<p>it gets mapped to function signature </p>\n<pre><code>int Add(int x, int y);\n</code></pre>\n<p>so, 5.5 -&gt; 5 and 6.8 -&gt; 6 conversion takes place\nand you get the answer as 11 (5 + 6).</p>\n", "OwnerUserId": "2032021", "PostTypeId": "2", "Id": "22957321", "Score": "0", "CreationDate": "2014-04-09T08:50:21.397", "LastActivityDate": "2014-04-09T08:50:21.397"}, "22959473": {"ParentId": "22957224", "CommentCount": "0", "Body": "<p>The solution comes down to the number of arguments:</p>\n<p>For doubles you have</p>\n<pre><code>double Add(double x, double y, double z){\n    return (x+y);\n}\n</code></pre>\n<p>this function requires only/exactly 3 variables before it will be utilised, so when you specify only 2 arguments, there is only one choice available:</p>\n<pre><code>int Add(int x, int y){\n    return (x+y);\n}\n</code></pre>\n<p>Should you want to make it multi-purpose you would have to change it to </p>\n<pre><code>double Add(double x, double y, double z = 0.0){\n    return (x+y+z);\n}\n</code></pre>\n<p>This will allow you to add 2 or 3 doubles together as needed, as 2 double added is the same as 2 doubles added to 0.0.</p>\n<p>The argument for z (<code>double z = 0.0</code>) is simply a default value declaration: most compilers work on the basis that, working right to left on the parameter list you can omit parameters which have defaults, therefore I could do the following:</p>\n<pre><code>double Add(double x= 0.0, double y=0.0, double z = 0.0)\n</code></pre>\n<p>and each of the following would be valid calls:</p>\n<pre><code>Add();\nAdd(1.0);\nAdd(1.1,2.2);\nAdd(1.1,2.2,3.3);\nAdd(1);\nAdd(1,2);\nAdd(1,2,3);\n</code></pre>\n<p>And the values which we do not specify will be in place by utilising the default values we defined earlier (0.0).</p>\n<p>Example usage of modified function</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ndouble Add(double x, double y, double z = 0.0){\n    return (x+y+z);\n}\nint main() {\n    cout &lt;&lt; Add(1.1,2.1,3.1) &lt;&lt; endl;\n    cout &lt;&lt; Add(2,3) &lt;&lt; endl;\n    cout &lt;&lt; Add(1.0, 2.12345) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Hope this helps, but let me know if you need more information or detail :)</p>\n", "OwnerUserId": "1903417", "PostTypeId": "2", "Id": "22959473", "Score": "0", "CreationDate": "2014-04-09T10:16:04.327", "LastActivityDate": "2014-04-09T10:16:04.327"}, "22957256": {"ParentId": "22957224", "CommentCount": "0", "Body": "<p>Because C++ defines an implicit conversion from <code>double</code> to <code>int</code>, which gets applied in the second call.</p>\n<p>See <code>C++11[conv.fpint]\u00a71</code>:</p>\n<blockquote>\n<p id=\"so_22957224_22957256_0\">A prvalue of a floating point type can be converted to a prvalue of an integer type. The conversion truncates; that is, the fractional part is discarded. The behavior is undefined if the truncated value cannot be represented in the destination type.</p>\n</blockquote>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "22957256", "Score": "1", "CreationDate": "2014-04-09T08:47:45.060", "LastActivityDate": "2014-04-09T08:47:45.060"}, "22957224": {"CommentCount": "4", "ViewCount": "61", "CreationDate": "2014-04-09T08:45:56.317", "LastActivityDate": "2014-04-28T07:15:44.573", "Title": "Working of program in Function Overloading", "AcceptedAnswerId": "22957314", "PostTypeId": "1", "Id": "22957224", "Score": "0", "Body": "<p>I want to ask why this program does not generate a compile time error?</p>\n<pre><code>int Add(int x, int y){\n    return (x+y);\n}\n\ndouble Add(double x, double y, double z){\n    return (x+y);\n}\n\nint main()\n{\n    cout&lt;&lt;Add(5,6);\n    cout&lt;&lt;Add(5.5,6.6);\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "2575545", "AnswerCount": "5"}, "23334762": {"ParentId": "22957224", "CommentCount": "0", "Body": "<p>Guys this will generate a compile error <strong>'Add' : no overloaded function takes 2 arguments</strong> You need three arguments for the ADD functions- both for int and double- to be utilized.</p>\n<p>While I appreciate your answers on this, you must understand that function overload in C++ done like this requires exact number of parameters to be specified in the calling.</p>\n<p>Visual Studio won't allow u to compile the above source code. Pass three arguments to the calling of functions in main function.</p>\n<p>.\n.\n.\n    cout &lt;&lt; Add(5,6,7) &lt;&lt; endl;\n    cout &lt;&lt; Add(5.5,6.6,2) &lt;&lt; endl;\n.\n.\n.</p>\n", "OwnerUserId": "3580296", "PostTypeId": "2", "Id": "23334762", "Score": "0", "CreationDate": "2014-04-28T07:15:44.573", "LastActivityDate": "2014-04-28T07:15:44.573"}, "bq_ids": {"n4140": {"so_22957224_22957256_0": {"section_id": 37, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_22957224_22957256_0": {"section_id": 34, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_22957224_22957256_0": {"section_id": 37, "quality": 0.8333333333333334, "length": 20}}}, "22957314": {"ParentId": "22957224", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>Add(5,6);</code> calls <code>int Add(int x, int y)</code>. That is clear enough.</p>\n<p>Now <code>Add(5.5,6.6)</code> looks for a proper matching function. It finds one with two arguments and one with three. Now it checks if it can use the function with two arguments. And indeed it can convert <code>double</code> to <code>int</code>. So it again uses <code>int Add(int x, int y)</code>.</p>\n<p>If you would provide an <code>double Add(double x, double y)</code>, it would find two functions with two arguments and checks which one \"matches best\". This would then be <code>double Add(double x, double y)</code>.</p>\n", "OwnerUserId": "316448", "LastEditorUserId": "316448", "LastEditDate": "2014-04-09T08:55:29.860", "Id": "22957314", "Score": "4", "CreationDate": "2014-04-09T08:50:07.483", "LastActivityDate": "2014-04-09T08:55:29.860"}});