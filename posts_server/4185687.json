post_cb({"bq_ids": {"n4140": {"so_4185687_4185709_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 7136}, "so_4185687_4185709_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7136}}, "n3337": {"so_4185687_4185709_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 6880}, "so_4185687_4185709_0": {"length": 9, "quality": 1.0, "section_id": 5191}}, "n4659": {"so_4185687_4185709_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 8637}, "so_4185687_4185709_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 8640}}}, "4185687": {"ViewCount": "177", "Body": "<p>Several lines of code are worth a thousand words:</p>\n<p>I have three simple files: header.h, main.cpp, other.cpp</p>\n<pre><code>// header.h\n\n  #pragma once\n\ninline const int&amp; GetConst()\n{\n    static int n = 0;\n    return n;\n}\n\nconst int&amp; r = GetConst();\n\n// main.cpp\n\n  #include \"header.h\"\n\nint main()\n{\n    return 0;\n}\n\n// other.cpp\n\n  #include \"header.h\"\n</code></pre>\n<p>When compiling the simplest project, the VC++ 2010 complains as follows:</p>\n<pre><code>ClCompile:\n  other.cpp\n  main.cpp\n  Generating Code...\n  other.obj : error LNK2005: \"int const &amp; const r\" (?r@@3ABHB) already defined in main.obj\nD:\\Test\\Debug\\bug.exe : fatal error LNK1169: one or more multiply defined symbols found\n\nBuild FAILED.\n\nTime Elapsed 00:00:00.29\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n</code></pre>\n<p>I am sure this is a bug of VC++ 2010, because of the following two references:</p>\n<p>1, The C++ standard says: (at page 140 of n3126)</p>\n<p>\"Objects declared const and not explicitly declared extern have internal linkage.\"</p>\n<p>2, The MSDN says: (at: <a href=\"http://msdn.microsoft.com/en-us/library/357syhfh(VS.80).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/357syhfh(VS.80).aspx</a>)</p>\n<p>\"In C, constant values default to external linkage, so they can appear only in source files. In C++, constant values default to internal linkage, which allows them to appear in header files.</p>\n<p>The const keyword can also be used in pointer declarations.\"</p>\n", "AcceptedAnswerId": "4185709", "Title": "Another BUG of VC++ 2010? About declaring a constant REFERENCE in a header", "CreationDate": "2010-11-15T15:09:11.850", "Id": "4185687", "CommentCount": "3", "LastEditDate": "2010-11-15T15:57:04.503", "PostTypeId": "1", "LastEditorUserId": "59379", "LastActivityDate": "2010-11-15T15:57:04.503", "Score": "0", "OwnerUserId": "508343", "Tags": "<c++><visual-c++><reference><const><linkage>", "AnswerCount": "1"}, "4185709": {"Id": "4185709", "PostTypeId": "2", "Body": "<p>The paragraph you cite from the C++ Standard reads (C++03 7.1.1/6):</p>\n<blockquote>\n<p id=\"so_4185687_4185709_0\">Objects declared <code>const</code> and not explicitly declared <code>extern</code> have internal linkage.</p>\n</blockquote>\n<p>You have not declared an object.  You have declared a reference.  A reference is not an object.  That said, 3.5/3 says:</p>\n<blockquote>\n<p id=\"so_4185687_4185709_1\">A name having namespace scope has internal linkage if it is the name of an object or reference that is explicitly declared const and neither explicitly declared <code>extern</code> nor previously declared to have external linkage</p>\n</blockquote>\n<p>However, 8.3.2/1 says:</p>\n<blockquote>\n<p id=\"so_4185687_4185709_2\">Cv-qualified references are ill-formed</p>\n</blockquote>\n<p>So, while a const-qualified reference would have internal linkage, it's not possible to const-qualify a reference.  </p>\n<p>The reference in your sample program is not const-qualified, it's a reference to a const-qualified <code>int</code>.</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2010-11-15T15:29:50.323", "Score": "10", "CreationDate": "2010-11-15T15:11:34.670", "ParentId": "4185687", "CommentCount": "2", "OwnerUserId": "151292", "LastEditDate": "2010-11-15T15:29:50.323"}});