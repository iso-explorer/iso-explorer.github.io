post_cb({"32104249": {"ParentId": "32103998", "CommentCount": "3", "Body": "<p>The reason you cannot overload <code>::</code> is the standard forbids it.  Section 13.5.3 has</p>\n<blockquote>\n<p id=\"so_32103998_32104249_0\">The following operators cannot be overloaded:</p>\n<p id=\"so_32103998_32104249_1\"><code>.</code> <code>.*</code> <code>::</code> <code>?:</code></p>\n</blockquote>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "32104249", "Score": "7", "CreationDate": "2015-08-19T19:39:55.373", "LastActivityDate": "2015-08-19T19:39:55.373"}, "32103998": {"CommentCount": "11", "AcceptedAnswerId": "32104966", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-08-19T19:25:12.320", "LastActivityDate": "2015-08-19T20:36:50.367", "LastEditDate": "2017-05-23T10:29:33.823", "ViewCount": "156", "FavoriteCount": "0", "Title": "Why I cannot overload the :: operator?", "Id": "32103998", "Score": "2", "Body": "<p>I was reading the book C++ Primer by Stanley B. Lippman and in the section of Variables and Basic Types I saw the scope operator <code>::</code>. </p>\n<p>I had already read a little about the operator overload and I think it could be very useful in special cases, but when I searched in the internet I found out that I simply cannot overload the <code>::</code> operator. </p>\n<p>In <a href=\"https://stackoverflow.com/questions/520035/why-cant-you-overload-the-operator-in-c\">this post</a> I found that the <code>.</code> operator can be overload. However, this can lead to questions about whether an operation is meant for the object overloading <code>.</code> or an object referred to by <code>.</code>. </p>\n<p>Thus, I think that maybe there is a way to overload the <code>::</code>.</p>\n<p><em>But if it can't, can anyone explain me why?</em> </p>\n<p><strong><em>An example of my idea for the :: operator:</em></strong></p>\n<pre><code>#include &lt;iostream&gt;\n\n/*\n *For example:\n *I wanna increase 1 unit every time \n *I call the global variable r doing ::r\n *insede of the main function\n */\n\nint r = 42; \n\nint main()\n{\n    int r = 0;\n    std::cout &lt;&lt; ::r &lt;&lt; \" \" &lt;&lt; r &lt;&lt; std::endl; //It would print 43 0 after the operator overload\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><operator-overloading>", "OwnerUserId": "4882392", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32103998_32104249_0": {"section_id": 650, "quality": 0.8, "length": 4}}, "n3337": {"so_32103998_32104249_0": {"section_id": 640, "quality": 0.8, "length": 4}}, "n4659": {"so_32103998_32104249_0": {"section_id": 678, "quality": 0.8, "length": 4}}}, "32104966": {"ParentId": "32103998", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You cannot overload it. </p>\n<p><em>The scope \"operator\" unlike all the operators does nothing at run time, it affects the name lookup at compile time and you cannot change it since its job it is only to tell the compiler where to find names.</em> </p>\n<p>That's why you can't overload it.</p>\n<p><strong><em>For example:</em></strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nstd::string s = \"Blah\";\n\nint main()\n{\n    std::string s = \"World\";\n    ::s = \"Hello \";\n\n    std::cout &lt;&lt; ::s &lt;&lt; s &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/aed0403edb1e8b44\">See on Coliru</a></p>\n", "OwnerUserId": "583833", "LastEditorUserId": "4882392", "LastEditDate": "2015-08-19T20:27:38.463", "Id": "32104966", "Score": "8", "CreationDate": "2015-08-19T20:22:30.843", "LastActivityDate": "2015-08-19T20:27:38.463"}});