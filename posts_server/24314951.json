post_cb({"24315013": {"Id": "24315013", "PostTypeId": "2", "Body": "<p>The standard says:</p>\n<blockquote>\n<p id=\"so_24314951_24315013_0\">6.4.2    The switch statement      <code>[stmt.switch]</code></p>\n<ol>\n<li><p id=\"so_24314951_24315013_1\">The switch statement causes control to be transferred to one of several statements depending on the value of a condition.</p></li>\n<li><p id=\"so_24314951_24315013_2\">The condition shall be of integral type, enumeration type, or class type.  If of class type, the condition is contextually implicitly converted (Clause 4) to an integral or enumeration type.  <strong>Integral promotions are performed.</strong>   Any  statement  within  the  switch  statement  can  be  labeled  with  one  or  more  case  labels  as\n  follows:</p>\n<p id=\"so_24314951_24315013_3\"><code>case</code> <em><code>constant-expression</code></em> <code>:</code></p></li>\n</ol>\n<blockquote>\n<blockquote>\n<blockquote>\n<p id=\"so_24314951_24315013_7\">where the <em>constant-expression</em> shall be a converted constant expression (5.19) <strong>of the promoted type of the switch condition</strong>.  No two of the case constants in the same switch shall have the same value after conversion to the promoted type of the switch condition.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>The data type is <code>int</code>, because all smaller integral types promote to <code>int</code>.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2014-06-19T19:49:08.893", "Score": "2", "CreationDate": "2014-06-19T19:42:34.163", "ParentId": "24314951", "CommentCount": "0", "OwnerUserId": "103167", "LastEditDate": "2014-06-19T19:49:08.893"}, "24314951": {"ViewCount": "60", "Body": "<p>Lets say we have :</p>\n<pre><code>unsigned char test;\ntest=0xff;\n\nswitch (test)\n  {\n  case -1:\n    cout&lt;&lt;\"hit 1\";\n    break;\n  case 255:\n    cout&lt;&lt;\"hit 2\";\n    break;    \n  }\n</code></pre>\n<p>Why it gives out \"hit 2\" while -1 could be represent as 0xff in memory for a unsigned char.\nIs there a type for the constant (here -1 and 255) in a \"case\" in the switch-case?\nAs far as i know, without the variable types, we cannot compare two variables.</p>\n", "AcceptedAnswerId": "24315013", "Title": "Is there a variable type for the constant in a \"case\" in the switch-case?", "CreationDate": "2014-06-19T19:38:49.883", "Id": "24314951", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2014-06-20T02:11:06.920", "LastActivityDate": "2014-06-19T19:49:08.893", "Score": "-1", "OwnerUserId": "1814794", "Tags": "<c++><switch-statement>", "AnswerCount": "2"}, "24315010": {"Id": "24315010", "PostTypeId": "2", "Body": "<p>Because <code>unsigned char</code> goes from 0-255 you have overflow.</p>\n", "LastActivityDate": "2014-06-19T19:42:28.063", "CommentCount": "0", "CreationDate": "2014-06-19T19:42:28.063", "ParentId": "24314951", "Score": "0", "OwnerUserId": "2352671"}, "bq_ids": {"n4140": {"so_24314951_24315013_2": {"length": 29, "quality": 0.8787878787878788, "section_id": 3890}, "so_24314951_24315013_5": {"length": 18, "quality": 0.75, "section_id": 3890}, "so_24314951_24315013_6": {"length": 18, "quality": 0.75, "section_id": 3890}, "so_24314951_24315013_4": {"length": 18, "quality": 0.75, "section_id": 3890}, "so_24314951_24315013_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 3889}, "so_24314951_24315013_7": {"length": 18, "quality": 0.75, "section_id": 3890}}, "n3337": {"so_24314951_24315013_2": {"length": 25, "quality": 0.7575757575757576, "section_id": 3750}, "so_24314951_24315013_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 3750}, "so_24314951_24315013_6": {"length": 23, "quality": 0.9583333333333334, "section_id": 3750}, "so_24314951_24315013_7": {"length": 23, "quality": 0.9583333333333334, "section_id": 3750}, "so_24314951_24315013_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 3749}, "so_24314951_24315013_5": {"length": 23, "quality": 0.9583333333333334, "section_id": 3750}}, "n4659": {"so_24314951_24315013_2": {"length": 29, "quality": 0.8787878787878788, "section_id": 4776}, "so_24314951_24315013_4": {"length": 18, "quality": 0.75, "section_id": 4776}, "so_24314951_24315013_6": {"length": 18, "quality": 0.75, "section_id": 4776}, "so_24314951_24315013_7": {"length": 18, "quality": 0.75, "section_id": 4776}, "so_24314951_24315013_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 4775}, "so_24314951_24315013_5": {"length": 18, "quality": 0.75, "section_id": 4776}}}});