post_cb({"bq_ids": {"n4140": {"so_11393566_11393777_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1607}, "so_11393566_11393777_1": {"length": 15, "quality": 1.0, "section_id": 1607}, "so_11393566_11393777_2": {"length": 20, "quality": 1.0, "section_id": 1607}}, "n3337": {"so_11393566_11393777_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1603}, "so_11393566_11393777_1": {"length": 15, "quality": 1.0, "section_id": 1603}, "so_11393566_11393777_2": {"length": 20, "quality": 1.0, "section_id": 1603}}, "n4659": {"so_11393566_11393777_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1758}, "so_11393566_11393777_1": {"length": 15, "quality": 1.0, "section_id": 1758}, "so_11393566_11393777_2": {"length": 20, "quality": 1.0, "section_id": 1758}}}, "11393777": {"Id": "11393777", "PostTypeId": "2", "Body": "<p>No, there are no guarantees. An implementation <em>could</em> reallocate the string to a new buffer, to reduce its <code>capacity()</code>.</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_11393566_11393777_0\"><em>Effects</em>: Alters the length of the string designated by <code>*this</code> as follows:</p>\n<p id=\"so_11393566_11393777_1\">\u2014 If <code>n &lt;= size()</code>, the function replaces the string designated by <code>*this</code> with a string of length n whose elements are a copy of the initial elements of the original string designated by <code>*this</code>.</p>\n<p id=\"so_11393566_11393777_2\">\u2014 If <code>n &gt; size()</code>, the function replaces the string designated by <code>*this</code> with a string of length n whose first <code>size()</code> elements are a copy of the original string designated by <code>*this</code>, and whose remaining elements are all initialized to c.</p>\n</blockquote>\n", "LastActivityDate": "2012-07-09T11:01:53.820", "CommentCount": "4", "CreationDate": "2012-07-09T11:01:53.820", "ParentId": "11393566", "Score": "4", "OwnerUserId": "597607"}, "11393566": {"ViewCount": "356", "Body": "<p>As the title says: </p>\n<blockquote>\n<p id=\"so_11393566_11393566_0\">Does the standard guarantee, that std::string::resize will not do anything, if the new size is the same as the old one?</p>\n</blockquote>\n<p><sub>Of course, I can test it, but it could be UB, so testing will not work here.</sub><br>\n<sub>In cppreference.com and cplusplus.com, the doc says nothing about this case</sub></br></p>\n<p>Example:</p>\n<pre><code>std::string s( \"asd\" );\n// s.size() is 3\ns.resize( 3 );    // will this affect **somehow** the string?\n</code></pre>\n", "AcceptedAnswerId": "11393777", "Title": "Does the standard guarantee, that std::string::resize will not do anything, if the new size is the same as the old one?", "CreationDate": "2012-07-09T10:49:29.543", "Id": "11393566", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-07-09T11:03:52.673", "Score": "1", "OwnerUserId": "435800", "Tags": "<c++><string><resize>", "AnswerCount": "2"}, "11393800": {"Id": "11393800", "PostTypeId": "2", "Body": "<p>ISO/IEC 14882:2011(E) \u00a7 21.4.4:</p>\n<p><code>void resize(size_type n, charT c);</code></p>\n<p><em>Requires:</em> n &lt;= max_size()</p>\n<p><em>Throws:</em> length_error if n &gt; max_size().</p>\n<p><em>Effects:</em> Alters the length of the string designated by *this as follows:</p>\n<ul>\n<li>If n &lt;= size(), the function replaces the string designated by *this with a string of length n\nwhose elements are a copy of the initial elements of the original string designated by *this.</li>\n<li>If n &gt; size(), the function replaces the string designated by *this with a string of length n\nwhose first size() elements are a copy of the original string designated by *this, and whose\nremaining elements are all initialized to c.</li>\n</ul>\n", "LastActivityDate": "2012-07-09T11:03:52.673", "CommentCount": "0", "CreationDate": "2012-07-09T11:03:52.673", "ParentId": "11393566", "Score": "1", "OwnerUserId": "1490355"}});