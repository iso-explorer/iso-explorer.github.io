post_cb({"25903968": {"ViewCount": "348", "Body": "<p>I am trying to initialize all pointers in vector to NULL.\nBased on thread:\n<a href=\"https://stackoverflow.com/questions/10960508/initialize-vector-of-pointers-automatically\">initialize vector of pointers (automatically)</a>\nand \n<a href=\"https://stackoverflow.com/questions/9090680/how-to-initialize-a-vector-of-pointers\">How to initialize a vector of pointers</a></p>\n<p>I could just use the vector constructor to achieve what I want. My question is : is the initialization NULL pointer is a standard behaviour? Or the pointers in vector might not be NULL on some compiler?\nIf initialize to NULL is standard, could anyone tell me in which chapter and section can I find the related info from c++ standard?</p>\n<p>Thanks,</p>\n<p>Rong</p>\n", "AcceptedAnswerId": "25904184", "Title": "Initialize pointers in a vector", "CreationDate": "2014-09-18T04:00:56.880", "Id": "25903968", "CommentCount": "0", "LastEditDate": "2017-05-23T12:30:01.097", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-18T04:28:49.773", "Score": "0", "OwnerUserId": "2185248", "Tags": "<c++><pointers><vector><initialization>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25903968_25904184_0": {"length": 5, "quality": 1.0, "section_id": 958}, "so_25903968_25904184_10": {"length": 15, "quality": 0.9375, "section_id": 3285}, "so_25903968_25904184_6": {"length": 10, "quality": 0.9090909090909091, "section_id": 4231}, "so_25903968_25904184_9": {"length": 7, "quality": 1.0, "section_id": 3287}, "so_25903968_25904184_5": {"length": 7, "quality": 1.0, "section_id": 715}, "so_25903968_25904184_4": {"length": 4, "quality": 0.8, "section_id": 715}, "so_25903968_25904184_3": {"length": 6, "quality": 1.0, "section_id": 715}, "so_25903968_25904184_11": {"length": 12, "quality": 0.9230769230769231, "section_id": 3285}, "so_25903968_25904184_8": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_25903968_25904184_1": {"length": 7, "quality": 0.875, "section_id": 959}}, "n3337": {"so_25903968_25904184_0": {"length": 4, "quality": 0.8, "section_id": 949}, "so_25903968_25904184_10": {"length": 11, "quality": 0.6875, "section_id": 3155}, "so_25903968_25904184_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 704}, "so_25903968_25904184_9": {"length": 7, "quality": 1.0, "section_id": 3157}, "so_25903968_25904184_11": {"length": 10, "quality": 0.7692307692307693, "section_id": 3155}, "so_25903968_25904184_8": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_25903968_25904184_6": {"length": 10, "quality": 0.9090909090909091, "section_id": 4072}, "so_25903968_25904184_1": {"length": 5, "quality": 0.625, "section_id": 945}}, "n4659": {"so_25903968_25904184_0": {"length": 5, "quality": 1.0, "section_id": 1020}, "so_25903968_25904184_10": {"length": 14, "quality": 0.875, "section_id": 4047}, "so_25903968_25904184_3": {"length": 6, "quality": 1.0, "section_id": 745}, "so_25903968_25904184_6": {"length": 9, "quality": 0.8181818181818182, "section_id": 5492}, "so_25903968_25904184_5": {"length": 7, "quality": 1.0, "section_id": 745}, "so_25903968_25904184_9": {"length": 6, "quality": 0.8571428571428571, "section_id": 4049}, "so_25903968_25904184_4": {"length": 4, "quality": 0.8, "section_id": 745}, "so_25903968_25904184_11": {"length": 12, "quality": 0.9230769230769231, "section_id": 4047}, "so_25903968_25904184_8": {"length": 7, "quality": 1.0, "section_id": 4052}, "so_25903968_25904184_1": {"length": 7, "quality": 0.875, "section_id": 1021}}}, "25904184": {"Id": "25904184", "PostTypeId": "2", "Body": "<p>I assume you mean something like this:</p>\n<pre><code>std::vector&lt;MyClass*&gt; v(10);\n</code></pre>\n<p>Yes, the vector is initialized with null pointers.  Quoting the standard by chapter and verse is somewhat involved\u2026</p>\n<p>C++14 \u00a723.3.6.2 \u201c`vector constructors, copy, and assignment\u201d:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_0\"><code>explicit vector(size_type n, const Allocator&amp; = Allocator());</code></p>\n<p id=\"so_25903968_25904184_1\"><em>Effects:</em> Constructs a <code>vector</code> with <code>n</code> default-inserted elements using the specified allocator.</p>\n<p id=\"so_25903968_25904184_2\"><em>Requires:</em> <code>T</code> shall be <code>DefaultInsertable</code> into <code>*this</code>.</p>\n</blockquote>\n<p>\u00a723.2.1 \u201cGeneral container requirements\u201d \u00b613:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_3\">\u2014 <code>T</code> is <em><code>DefaultInsertable</code></em> into <code>X</code> means that the following expression is well-formed: </p>\n<pre><code>allocator_traits&lt;A&gt;::construct(m, p)\n</code></pre>\n<p id=\"so_25903968_25904184_4\">\u2014 An element of <code>X</code> is <em>default-inserted</em> if it is initialized by evaluation of the expression</p>\n<pre><code>allocator_traits&lt;A&gt;::construct(m, p)\n</code></pre>\n<p id=\"so_25903968_25904184_5\">where <code>p</code> is the address of the uninitialized storage for the element allocated within <code>X</code>.</p>\n</blockquote>\n<p>\u00a720.7.8.2 \u201cAllocator traits member functions\u201d \u00b65:</p>\n<blockquote>\n<pre><code>template &lt;class T, class... Args&gt;\n  static void construct(Alloc&amp; a, T* p, Args&amp;&amp;... args);\n</code></pre>\n<p id=\"so_25903968_25904184_6\"><em>Effects:</em> calls <code>a.construct(p, std::forward&lt;Args&gt;(args)...)</code> if that call is well-formed; otherwise, invokes <code>::new (static_cast&lt;void*&gt;(p)) T(std::forward&lt;Args&gt;(args)...)</code>.</p>\n</blockquote>\n<p>\u00a720.7.9.1 \u201c[Default] <code>allocator</code> members\u201d \u00b612:</p>\n<blockquote>\n<pre><code>template &lt;class U, class... Args&gt;\n  void construct(U* p, Args&amp;&amp;... args);\n</code></pre>\n<p id=\"so_25903968_25904184_7\"><em>Effects:</em> <code>::new((void *)p) U(std::forward&lt;Args&gt;(args)...)</code></p>\n</blockquote>\n<p>Referring back to \u00a723.2.1 \u00b613, see that <code>args</code> is empty.  Therefore\u2026</p>\n<p>\u00a78.5 \u201cInitializers\u201d:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_8\">An object whose initializer is an empty set of parentheses, i.e., <code>()</code>, shall be value-initialized.</p>\n</blockquote>\n<p>Same section:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_9\">To <em>value-initialize</em> an object of type <code>T</code> means: \u2026 otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>Same section:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_10\">To <em>zero-initialize</em> an object or reference of type <code>T</code> means: \u2026 if <code>T</code> is a scalar type (3.9), the object is initialized to the value obtained by converting the integer literal <code>0</code> (zero) to <code>T</code>;<sup>106</sup></p>\n</blockquote>\n<p>Footnote 106:</p>\n<blockquote>\n<p id=\"so_25903968_25904184_11\">As specified in 4.10, converting an integer literal whose value is <code>0</code> to a pointer type results in a null pointer value.</p>\n</blockquote>\n", "LastActivityDate": "2014-09-18T04:28:49.773", "CommentCount": "1", "CreationDate": "2014-09-18T04:28:49.773", "ParentId": "25903968", "Score": "5", "OwnerUserId": "77567"}});