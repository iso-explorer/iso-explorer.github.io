post_cb({"9932242": {"ViewCount": "194", "Body": "<p>Are C strings (as opposed to <code>std::string</code>) guaranteed to be implemented as arrays? For example, say, I have</p>\n<p><code>char const * str = \"abc\";</code></p>\n<p>What it boils down to is whether or not <code>str + 4</code> a legal pointer value (without dereferencing that is). I'm asking this because I dont know if C strings are a special case due to the null character terminating it.</p>\n", "AcceptedAnswerId": "9932371", "Title": "Are C strings guaranteed to be arrays?", "CreationDate": "2012-03-29T19:36:22.963", "Id": "9932242", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-03-29T21:21:20.380", "LastEditorUserId": "239916", "LastActivityDate": "2012-03-29T21:21:20.380", "Score": "4", "OwnerUserId": "239916", "Tags": "<c++><c><string>", "AnswerCount": "4"}, "9932322": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_9932242_9932322_0\">Are C strings guaranteed to be implemented as arrays?</p>\n</blockquote>\n<p>With a wide definition of <em>array</em>, yes, they are a contiguous sequence of chars with a terminating null character.</p>\n<blockquote>\n<p id=\"so_9932242_9932322_1\">What it boils down to is whether or not str + 4 a legal pointer value</p>\n</blockquote>\n<p>The literal (<code>\"abc\"</code>) is an array stored somewhere in the process memory. The type is is <code>const char[4]</code> (in C++, I am not sure if in C it is <code>char[4]</code>). Then <code>str</code> is a pointer to the first element of the string literal, and the expression <code>str+3</code> is correct, can be dereferenced and the pointed character will be 0. The expression <code>str+4</code> is a pointer beyond the end of the array and cannot be dereferenced.</p>\n", "LastActivityDate": "2012-03-29T19:41:03.343", "Id": "9932322", "CommentCount": "2", "CreationDate": "2012-03-29T19:41:03.343", "ParentId": "9932242", "Score": "2", "OwnerUserId": "36565"}, "bq_ids": {"n4140": {"so_9932242_9932371_7": {"length": 17, "quality": 0.7727272727272727, "section_id": 6141}}, "n3337": {"so_9932242_9932371_7": {"length": 17, "quality": 0.7727272727272727, "section_id": 5905}}}, "9932286": {"PostTypeId": "2", "Body": "<p>They are guaranteed to be a contiguous sequence of <code>char</code>s. If that's your definition of an array, then yes.</p>\n<p>In your example you will have 4 chars, one for each character and one for the null terminator. <code>str+4</code> will be out of range.</p>\n", "LastActivityDate": "2012-03-29T19:38:23.760", "Id": "9932286", "CommentCount": "2", "CreationDate": "2012-03-29T19:38:23.760", "ParentId": "9932242", "Score": "3", "OwnerUserId": "5987"}, "9932371": {"PostTypeId": "2", "Body": "<p><strong>First part of the question</strong></p>\n<blockquote>\n<p id=\"so_9932242_9932371_0\"><em>Are C strings guaranteed to be implemented as arrays?</em></p>\n<p id=\"so_9932242_9932371_1\"><em>For example, say, I have:</em> <code>char const * str = \"abc\"</code></p>\n</blockquote>\n<p>Yes, a string object is of an array type. A character string is a data format and a (character) string object is of a type <code>array</code> of <code>char</code>.</p>\n<p>In your example <code>str</code> points to the string literal <code>\"abc\"</code>. Character string literals have the type <code>char[N+1]</code> where <code>N</code> is the length of the string (i.e., the number of characters excluding the terminating null character). </p>\n<p>Some references from Standard and K&amp;R 2nd edition: </p>\n<p>C defines a string literal as:</p>\n<blockquote>\n<p id=\"so_9932242_9932371_2\">(C99, 6.4.5p2) \"A character string literal is a sequence of zero or more multibyte characters enclosed in double-quotes, as in \"xyz\".\"</p>\n</blockquote>\n<p>and says (emphasis mine): </p>\n<blockquote>\n<p id=\"so_9932242_9932371_3\">C99, 6.4.5p5) \"For character string literals, the <strong>array</strong> elements have type char, and are initialized with the individual bytes of the multibyte character sequence;\"</p>\n</blockquote>\n<p>K&amp;R 2nd edition says:</p>\n<blockquote>\n<p id=\"so_9932242_9932371_4\">\"Technically, a string constant is an <strong>array</strong> of characters\"</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_9932242_9932371_5\">\"when a string constant like <code>\"hello\\n\"</code> appears in a C program, it is stored as an <strong>array</strong> of characters containing the characters in the string and terminated with a <code>'\\0'</code> to mark the end.\"</p>\n</blockquote>\n<p><strong>Second part of the question</strong></p>\n<blockquote>\n<p id=\"so_9932242_9932371_6\"><em>What it boils down to is whether or not str + 4 a legal pointer value (without dereferencing that is).</em></p>\n</blockquote>\n<p>Yes, it is a valid pointer. In your case <code>str + 4</code> is a pointer one past the last element of the array.</p>\n<p>A valid pointer is a pointer that is either a null pointer or a pointer to a valid object. For an element of an array object, a pointer one past the last element of the array object is also a valid pointer.</p>\n<p>Note that for the purpose of the last rule (\"the one past element\"), for pointers to objects that are not elements of an array, C treats the object as an array of one element.</p>\n<blockquote>\n<p id=\"so_9932242_9932371_7\">(C99, 6.5.6p7) \"For the purposes of these operators, a pointer to an object that is not an element of an array behaves the same as a pointer to the first element of an array of length one with the type of the object as its element type.\"</p>\n</blockquote>\n", "LastActivityDate": "2012-03-29T20:29:55.990", "LastEditorUserId": "1119701", "Id": "9932371", "CommentCount": "6", "CreationDate": "2012-03-29T19:44:57.807", "ParentId": "9932242", "Score": "5", "OwnerUserId": "1119701", "LastEditDate": "2012-03-29T20:29:55.990"}, "9932293": {"PostTypeId": "2", "Body": "<p>The short answer is: yes, they are, <strike>but str+4 isn't necessarily a legal pointer as 1 char may not be equal to 1 byte.</strike></p>\n", "LastActivityDate": "2012-03-29T19:38:44.813", "Id": "9932293", "CommentCount": "6", "CreationDate": "2012-03-29T19:38:44.813", "ParentId": "9932242", "Score": "0", "OwnerUserId": "419407"}});