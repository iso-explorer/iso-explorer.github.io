post_cb({"15311469": {"CommentCount": "1", "AcceptedAnswerId": "15311812", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2013-03-09T13:52:38.250", "LastActivityDate": "2013-03-11T17:58:16.400", "LastEditDate": "2013-03-11T17:58:16.400", "ViewCount": "1037", "FavoriteCount": "1", "Title": "Throwing an exception from std::call_once", "Id": "15311469", "Score": "6", "Body": "<p>The C++ Standard states the following about the execution of <code>std::call_once</code> with functions that throw exceptions (\u00a730.4.4.2/2):</p>\n<blockquote>\n<p id=\"so_15311469_15311469_0\">2/ Effects: An execution of call_once that does not call its func is a passive execution. An execution of call_once that calls its func is an active execution. An active execution shall call INVOKE (DECAY_- COPY ( std::forward(func)), DECAY_COPY (std::forward(args))...). <strong>If such a call to func throws an exception the execution is exceptional, otherwise it is returning. An exceptional execution shall propagate the exception to the caller of call_once.</strong> Among all executions of call_once for any given once_flag: at most one shall be a returning execution; if there is a returning execution, it shall be the last active execution; and there are passive executions only if there is a returning execution. [ Note: passive executions allow other threads to reliably observe the results produced by the earlier returning execution. \u2014 end note ]</p>\n</blockquote>\n<p>I'm using Visual Studio 2012 and running the following code:</p>\n<pre><code>void f(){\n    throw std::exception( \"Catch me!\" );\n}\n\nint main( int argc, char* argv[] ){\n    once_flag flag;\n    try{\n        call_once( flag, f );\n    } catch( const std::exception&amp; e ){\n        cout &lt;&lt; e.what() &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>My result is: the code in the catch block runs and prints the message, but when the program exists I get a call to <code>abort()</code> and the following message printed to cout: </p>\n<blockquote>\n<p id=\"so_15311469_15311469_1\">...\\mutex.c(38) mutex destroyed while busy</p>\n</blockquote>\n<p>Is this supposed to happen?</p>\n", "Tags": "<c++><exception><c++11><mutex><std>", "OwnerUserId": "1878885", "AnswerCount": "1"}, "15311812": {"ParentId": "15311469", "PostTypeId": "2", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_15311469_15311812_0\">Is this supposed to happen?</p>\n</blockquote>\n<p>No, not really. This is a <strong>bug</strong>. </p>\n<p>However, notice the fact that VC11 is not alone on this:</p>\n<ul>\n<li>Intel ICC 13.0.1 calls <code>std::terminate()</code> as if your exception was not handled (see <a href=\"http://liveworkspace.org/code/4sAas7%2440\" rel=\"nofollow\">live example</a>);</li>\n<li>GCC 4.8.0 beta probably does something similar, but it does not show any output, it just swallows the exception and silently terminates the program (see <a href=\"http://liveworkspace.org/code/4sAas7%2439\" rel=\"nofollow\">live example</a>). [<strong>UPDATE: This bug does not seem to be reproducible in other enviroments and is likely to be an issue with the configuration on liveworkspace.org only</strong>]</li>\n</ul>\n<p>GCC 4.7.2 and Clang 3.2, on the other hand, behave correctly.</p>\n<p>By the way, it is worth noticing that the C++ Standard (Paragraph 18.8.1) specifies that <code>std::exception</code> <a href=\"http://en.cppreference.com/w/cpp/error/exception/exception\" rel=\"nofollow\">only has a default constructor and a copy constructor</a>. The constructor you are using is most likely a non-portable MS extension.</p>\n<p>You may consider using <code>std::logic_error</code> instead, which derives from <code>std::exception</code> and supports a constructor accepting a string.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-03-10T19:03:50.000", "Id": "15311812", "Score": "7", "CreationDate": "2013-03-09T14:30:54.317", "LastActivityDate": "2013-03-10T19:03:50.000"}, "bq_ids": {"n4140": {"so_15311469_15311469_0": {"section_id": 2973, "quality": 0.8181818181818182, "length": 63}}, "n3337": {"so_15311469_15311469_0": {"section_id": 2842, "quality": 0.8181818181818182, "length": 63}}, "n4659": {"so_15311469_15311469_0": {"section_id": 3732, "quality": 0.8051948051948052, "length": 62}}}});