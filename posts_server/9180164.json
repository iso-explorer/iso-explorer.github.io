post_cb({"9180164": {"ViewCount": "1898", "Body": "<p>I recently started to add the new <code>noexcept</code> specification to move constructors/assignments wherever possible. Now I started to wonder what the exception specification of implicit generated member functions looks like. Since having <code>noexcept</code> move functions allows the use of more efficient code paths(e.g. when resizing a <code>vector</code>) I would hope that those are declared as noexcept whenever possible. I had problems understanding what the standard has to say about that and therefore tried the following code in g++4.6 (with <code>-std=c++0x</code>) to get some grip on it:</p>\n<pre><code>struct foobar{};\nint main()\n{\n    foobar a, b;\n    std::cout&lt;&lt;std::boolalpha\n             &lt;&lt;noexcept(foobar())&lt;&lt;\", \"&lt;&lt;noexcept(foobar(a))&lt;&lt;\", \"\n             &lt;&lt;noexcept(a = b)   &lt;&lt;\", \"&lt;&lt;noexcept(a = std::move(b))&lt;&lt;\", \"\n             &lt;&lt;noexcept(foobar(std::move(a)))&lt;&lt;std::endl;\n}\n</code></pre>\n<p>This gave me an output of <code>True, True, True, False, False</code>, meaning that default and copy constructor/assignment where <code>noexcept</code>, while move operation where not. </p>\n<p>Now for my question:</p>\n<p><strong>Under what circumstances are implicit generated (or defaulted) member functions declared as <code>noexcept</code>? Furthermore is the obseved behaviour for <code>foobar</code> correct or simply a compiler bug in gcc4.6?</strong></p>\n", "AcceptedAnswerId": "9180224", "Title": "Implicit generated members and noexcept", "CreationDate": "2012-02-07T16:41:15.723", "Id": "9180164", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-02-07T16:53:51.760", "LastEditorUserId": "201270", "LastActivityDate": "2012-02-07T16:58:10.943", "Score": "19", "OwnerUserId": "201270", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9180164_9180224_0": {"length": 49, "quality": 0.9423076923076923, "section_id": 3376}}, "n3337": {"so_9180164_9180224_0": {"length": 52, "quality": 1.0, "section_id": 3246}}}, "9180224": {"PostTypeId": "2", "Body": "<p>Library bug \u2014 it shows <code>true, true, true, true, true</code> in gcc 4.7.</p>\n<p>And the bug is <em>not</em> that the generated move constructors aren't noexcept, but that <code>std::move</code> is not marked as <code>noexcept</code>, as we can see with the additional tests:</p>\n<pre><code>std::cout &lt;&lt; noexcept(a = static_cast&lt;foobar&amp;&amp;&gt;(b)) &lt;&lt; \", \"  // true\n          &lt;&lt; noexcept(foobar(static_cast&lt;foobar&amp;&amp;&gt;(b))) &lt;&lt; \", \" // true\n          &lt;&lt; noexcept(std::move(b)) &lt;&lt; std::endl;   // false\n</code></pre>\n<p>Most of the library functions in gcc 4.6 was not noexcept-correct, and this has been addressed in <a href=\"http://gcc.gnu.org/gcc-4.7/changes.html#cxx\" rel=\"noreferrer\">gcc 4.7</a>,</p>\n<hr>\n<p>As for when the implcitely generated member functions are noexcept, this is documented in \u00a715.4/14. Basically, it is <code>noexcept</code> if all functions it will need to call are all <code>noexcept</code>.</p>\n<blockquote>\n<p id=\"so_9180164_9180224_0\">An implicitly declared special member function (Clause 12) shall have an <em>exception-specification</em>. If <code>f</code> is\n   an implicitly declared default constructor, copy constructor, move constructor, destructor, copy assignment\n  operator, or move assignment operator, its implicit <em>exception-specification</em> specifies the <em>type-id</em> <code>T</code> if and only\n     if <code>T</code> is allowed by the <em>exception-specification</em> of a function directly invoked by <code>f</code>\u2019s implicit definition; <code>f</code> shall\n          allow all exceptions if any function it directly invokes allows all exceptions, <strong>and <code>f</code> shall allow no exceptions\n         if every function it directly invokes allows no exceptions.</strong></p>\n</blockquote>\n</hr>", "LastActivityDate": "2012-02-07T16:58:10.943", "LastEditorUserId": "224671", "Id": "9180224", "CommentCount": "3", "CreationDate": "2012-02-07T16:45:06.903", "ParentId": "9180164", "Score": "19", "OwnerUserId": "224671", "LastEditDate": "2012-02-07T16:58:10.943"}});