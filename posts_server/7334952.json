post_cb({"7334952": {"CommentCount": "6", "AcceptedAnswerId": "7334968", "PostTypeId": "1", "LastEditorUserId": "3889449", "CreationDate": "2011-09-07T13:47:24.250", "LastActivityDate": "2015-04-20T20:59:22.637", "LastEditDate": "2015-04-20T20:59:22.637", "ViewCount": "6765", "FavoriteCount": "37", "Title": "Will using goto leak variables?", "Id": "7334952", "Score": "84", "Body": "<p>Is it true that <code>goto</code> jumps across bits of code without calling destructors and things?</p>\n<p>e.g.</p>\n<pre><code>void f() {\n   int x = 0;\n   goto lol;\n}\n\nint main() {\n   f();\nlol:\n   return 0;\n}\n</code></pre>\n<p>Won't <code>x</code> be leaked?</p>\n", "Tags": "<c++><goto>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_7334952_7334968_4": {"section_id": 3909, "quality": 0.85, "length": 17}, "so_7334952_7334968_1": {"section_id": 3878, "quality": 0.5714285714285714, "length": 4}, "so_7334952_7334968_3": {"section_id": 3918, "quality": 0.9302325581395349, "length": 40}, "so_7334952_7334968_2": {"section_id": 3909, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_7334952_7334968_4": {"section_id": 3769, "quality": 0.85, "length": 17}, "so_7334952_7334968_1": {"section_id": 3738, "quality": 0.5714285714285714, "length": 4}, "so_7334952_7334968_3": {"section_id": 3778, "quality": 0.9302325581395349, "length": 40}, "so_7334952_7334968_2": {"section_id": 3769, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_7334952_7334968_4": {"section_id": 4795, "quality": 0.85, "length": 17}, "so_7334952_7334968_1": {"section_id": 4767, "quality": 0.5714285714285714, "length": 4}, "so_7334952_7334968_3": {"section_id": 4804, "quality": 0.9534883720930233, "length": 41}, "so_7334952_7334968_2": {"section_id": 4795, "quality": 0.9230769230769231, "length": 24}}}, "7334968": {"ParentId": "7334952", "PostTypeId": "2", "CommentCount": "16", "Body": "<p><sub><strong>Warning:</strong> This answer pertains to C++ <em>only</em>; the rules are quite different in C.</sub></p>\n<hr>\n<blockquote>\n<p id=\"so_7334952_7334968_0\">Won't <code>x</code> be leaked?</p>\n</blockquote>\n<p><strong>No, absolutely not.</strong></p>\n<p>It is a myth that <code>goto</code> is some low-level construct that allows you to override C++'s built-in scoping mechanisms. (If anything, it's <code>longjmp</code> that may be prone to this.)</p>\n<p>Consider the following mechanics that prevent you from doing \"bad things\" with labels (which includes <code>case</code> labels).</p>\n<hr>\n<h2>1. Label scope</h2>\n<p>You can't jump across functions:</p>\n<pre><code>void f() {\n   int x = 0;\n   goto lol;\n}\n\nint main() {\n   f();\nlol:\n   return 0;\n}\n\n// error: label 'lol' used but not defined\n</code></pre>\n<blockquote>\n<p id=\"so_7334952_7334968_1\"><code>[n3290: 6.1/1]:</code> [..] The scope of a label is the function in which\n  it appears. [..]</p>\n</blockquote>\n<hr>\n<h2>2. Object initialisation</h2>\n<p>You <a href=\"http://www.ideone.com/XgGSk\">can't jump across object initialisation</a>:</p>\n<pre><code>int main() {\n   goto lol;\n   int x = 0;\nlol:\n   return 0;\n}\n\n// error: jump to label \u2018lol\u2019\n// error:   from here\n// error:   crosses initialization of \u2018int x\u2019\n</code></pre>\n<p>If you jump <em>back</em> across object initialisation, then <a href=\"http://codepad.org/iH6V3M03\">the object's previous \"instance\" is destroyed</a>:</p>\n<pre><code>struct T {\n   T() { cout &lt;&lt; \"*T\"; }\n  ~T() { cout &lt;&lt; \"~T\"; }\n};\n\nint main() {\n   int x = 0;\n\n  lol:\n   T t;\n   if (x++ &lt; 5)\n     goto lol;\n}\n\n// Output: *T~T*T~T*T~T*T~T*T~T*T~T\n</code></pre>\n<blockquote>\n<p id=\"so_7334952_7334968_2\"><code>[n3290: 6.6/2]:</code> [..] Transfer out of a loop, out of a block, or back\n  past an initialized variable with automatic storage duration involves\n  the destruction of objects with automatic storage duration that are in\n  scope at the point transferred from but not at the point transferred\n  to. [..]</p>\n</blockquote>\n<p>You <a href=\"http://www.ideone.com/27Qur\">can't jump into the scope of an object</a>, even if it's not explicitly initialised: </p>\n<pre><code>int main() {\n   goto lol;\n   {\n      std::string x;\nlol:\n      x = \"\";\n   }\n}\n\n// error: jump to label \u2018lol\u2019\n// error:   from here\n// error:   crosses initialization of \u2018std::string x\u2019\n</code></pre>\n<p>... except for <a href=\"http://codepad.org/lnrnejbk\">certain kinds of object</a>, which the language can handle regardless because they do not require \"complex\" construction:</p>\n<pre><code>int main() {\n   goto lol;\n   {\n      int x;\nlol:\n      x = 0;\n   }\n}\n\n// OK\n</code></pre>\n<blockquote>\n<p id=\"so_7334952_7334968_3\"><code>[n3290: 6.7/3]:</code> It is possible to transfer into a block, but not in\n  a way that bypasses declarations with initialization. A program that\n  jumps from a point where a variable with automatic storage duration\n  is not in scope to a point where it is in scope is ill-formed unless\n  the variable has scalar type, class type with a trivial default\n  constructor and a trivial destructor, a cv-qualified version of one of\n  these types, or an array of one of the preceding types and is declared\n  without an initializer. [..]</p>\n</blockquote>\n<hr>\n<h2>3. Jumping abides by scope of other objects</h2>\n<p>Likewise, objects with automatic storage duration <a href=\"http://codepad.org/HY1JD0Z9\">are <em>not</em> \"leaked\" when you <code>goto</code> out of their scope</a>:</p>\n<pre><code>struct T {\n   T() { cout &lt;&lt; \"*T\"; }\n  ~T() { cout &lt;&lt; \"~T\"; }\n};\n\nint main() {\n   {\n      T t;\n      goto lol;\n   }\n\nlol:\n   return 0;\n}\n\n// *T~T\n</code></pre>\n<blockquote>\n<p id=\"so_7334952_7334968_4\"><code>[n3290: 6.6/2]:</code> On exit from a scope (however accomplished), objects\n  with automatic storage duration (3.7.3) that have been constructed in\n  that scope are destroyed in the reverse order of their construction.\n  [..]</p>\n</blockquote>\n<hr>\n<h2>Conclusion</h2>\n<p>The above mechanisms ensure that <code>goto</code> doesn't let you break the language.</p>\n<p>Of course, this doesn't automatically mean that you \"should\" use <code>goto</code> for any given problem, but it <em>does</em> mean that it is not nearly as \"evil\" as the common myth leads people to believe.</p>\n</hr></hr></hr></hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2011-09-11T01:01:05.033", "Id": "7334968", "Score": "193", "CreationDate": "2011-09-07T13:48:26.967", "LastActivityDate": "2011-09-11T01:01:05.033"}});