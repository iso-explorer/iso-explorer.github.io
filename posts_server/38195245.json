post_cb({"38195245": {"CommentCount": "8", "ViewCount": "89", "CreationDate": "2016-07-05T04:35:47.867", "LastActivityDate": "2016-07-05T05:48:10.610", "Title": "Can we add CV-qualifiers to the arguments of main?", "AcceptedAnswerId": "38195440", "PostTypeId": "1", "Id": "38195245", "Score": "3", "Body": "<p>As far as I know, in C or C++, the signature of <code>main</code> should either be <code>int main(void)</code> (<code>void</code> is optional in C++) or <code>int main(int, char**)</code>. However, the following code compiles with no warnings (<code>-Wall -Wextra -Wpedantic</code>) in gcc/g++/clang/clang++ </p>\n<pre><code>int main(int, const char * const * const argv){}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/b98ac599e5d50c4a\" rel=\"nofollow\"><kbd>Live on Coliru</kbd></a></p>\n<p>Is the code above legal? In other words, can we add CV-qualifiers to the arguments of <code>main</code>, or is this just an extension of the compiler that requires no diagnostic?</p>\n", "Tags": "<c++><c><gcc><clang><language-lawyer>", "OwnerUserId": "3093378", "AnswerCount": "2"}, "38195440": {"ParentId": "38195245", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The <code>C++11</code> Standard allows the implementation to accept any signature it likes it only mandates the two presented in question. It must also have a return type of <code>int</code>.</p>\n<blockquote>\n<p id=\"so_38195245_38195440_0\"><strong>3.6.1 Main Function</strong> [basic.start.main]</p>\n<p id=\"so_38195245_38195440_1\"><strong>2</strong> An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall\n  allow both of the following definitions of main:</p>\n<pre><code>int main() { /* ...\n*/ }\n</code></pre>\n<p id=\"so_38195245_38195440_2\">and</p>\n<pre><code>int main(int argc, char* argv[]) { /* ...\n*/ }\n</code></pre>\n</blockquote>\n<p>So to address the main question:</p>\n<blockquote>\n<p id=\"so_38195245_38195440_3\"><strong>Can we add CV-qualifiers to the arguments of main?</strong></p>\n</blockquote>\n<p>We can <em>if the implementation supports it</em> but if we do then the code is less likely to be portable.</p>\n<p>The code will only be fully portable if it adds (at most) <em>cv qualifiers</em> to the parameter variable itself, not its pointed-to types:</p>\n<pre><code>// still portable, same signature as int main(int, char**)\nint main(int, char** const argv); \n\n// not portable\nint main(int, char* const* argv); \n\n// not portable\nint main(int, const char** argv); \n</code></pre>\n", "OwnerUserId": "3807729", "LastEditorUserId": "3807729", "LastEditDate": "2016-07-05T05:29:18.003", "Id": "38195440", "Score": "4", "CreationDate": "2016-07-05T04:57:46.120", "LastActivityDate": "2016-07-05T05:29:18.003"}, "bq_ids": {"n4140": {"so_38195245_38195440_1": {"section_id": 7146, "quality": 0.75, "length": 18}, "so_38195245_38195986_5": {"section_id": 5891, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_38195245_38195440_1": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}, "so_38195245_38195986_5": {"section_id": 5662, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_38195245_38195440_1": {"section_id": 8647, "quality": 0.75, "length": 18}, "so_38195245_38195986_5": {"section_id": 7374, "quality": 0.6666666666666666, "length": 4}}}, "38195986": {"ParentId": "38195245", "CommentCount": "1", "Body": "<p>Remember that C and C++ are two distinct languages. The answer happens to be pretty much the same for both, but it's worth covering what the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow\">C standard</a> says as well -- especially given the language-lawyer tag.  The link is to the N1570 draft of C11.</p>\n<p>Section 5.1.2.2.1 covers the definition of <code>main</code> for hosted implementations:</p>\n<blockquote>\n<p id=\"so_38195245_38195986_0\">The function called at program startup is named <strong><code>main</code></strong>. The\n  implementation declares no prototype for this function. It shall be\n  defined with a return type of <strong><code>int</code></strong> and with no parameters:</p>\n<p id=\"so_38195245_38195986_1\"><strong><code>int main(void) { /* ... */ }</code></strong></p>\n<p id=\"so_38195245_38195986_2\">or with two parameters (referred to here as <strong><code>argc</code></strong> and <strong><code>argv</code></strong>,\n  though any names may be used, as they are local to the function in\n  which they are declared):</p>\n<p id=\"so_38195245_38195986_3\"><strong><code>int main(int argc, char *argv[]) { /* ... */ }</code></strong></p>\n<p id=\"so_38195245_38195986_4\">or equivalent; or in some other implementation-defined manner.</p>\n</blockquote>\n<p>A definition with added <code>const</code> or <code>volatile</code> qualifiers is not equivalent to the forms shown, so an implementation is not obliged to accept it. But since that section is not a <em>constraint</em>, an implementation is not required to complain about it either.  And in particular, if an implementation documents that it accepts <code>const</code> and/or <code>volatile</code> qualifiers, then they're perfectly valid <em>for that implementation</em>.</p>\n<p>(In practice, most compilers probably won't complain.)</p>\n<p>Note that this applies only to <em>hosted implementations</em>.  For a <em>freestanding implementation</em> (typically for an embedded target with no OS):</p>\n<blockquote>\n<p id=\"so_38195245_38195986_5\">... the name and type of the function called at program\n  startup are implementation-defined.</p>\n</blockquote>\n<p>(5.1.2.1 paragraph 1) which means that there are <em>no</em> portable definitions of the main function for freestanding implementations (it needn't even be called <code>main</code>).</p>\n", "OwnerUserId": "827263", "PostTypeId": "2", "Id": "38195986", "Score": "3", "CreationDate": "2016-07-05T05:48:10.610", "LastActivityDate": "2016-07-05T05:48:10.610"}});