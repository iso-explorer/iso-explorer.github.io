post_cb({"46168810": {"Id": "46168810", "PostTypeId": "2", "Body": "<p>You pollute your own <code>detail</code> namesapce, but not the <code>Lib</code> or global namespaces. So assuming a responsible adult is using your library, they won't have unintentional name collisions:</p>\n<pre><code>#include &lt;vector&gt;\n\nnamespace Lib {\n  namespace detail {\n    using namespace std;\n  }\n}\n\nusing namespace Lib;\n\nint main() {\n    vector&lt;int&gt; v; // This is an error, vector not declared in this scope\n}\n</code></pre>\n", "LastActivityDate": "2017-09-12T05:50:10.440", "Score": "5", "CreationDate": "2017-09-12T05:50:10.440", "ParentId": "46168188", "CommentCount": "3", "OwnerUserId": "817643"}, "46168188": {"ViewCount": "68", "Body": "<p>Consider this library header:</p>\n<pre><code>#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n#include&lt;iostream&gt;\n\nnamespace Lib {\n  namespace detail {\n    using namespace std;\n\n    template&lt;class T&gt;\n    void sort_impl(istream &amp;in,ostream &amp;out) {\n      vector&lt;T&gt; v;\n      {\n        int n;\n        in &gt;&gt; n;\n        v.resize(n);\n      }\n      for(auto &amp;i : v) cin &gt;&gt; i;\n\n      sort(v.begin(),v.end());\n      for(auto i : v) out &lt;&lt; i &lt;&lt; endl;\n    }\n  }\n\n  inline void sort_std() {\n    detail::sort_impl&lt;int&gt;(std::cin,std::cout);\n  }\n}\n</code></pre>\n<p>Does the <code>detail</code> namespace successfully isolate the clients of the library (and the rest of library's implementation) from the <em>using-directive</em> in this example?  I'm not interested in the discussion at <a href=\"https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\">Why is \"using namespace std\" considered bad practice?</a>, even though some of the arguments apply even to \"well contained\" <em>using-directives</em>.</p>\n<p>Note that there are two existing questions concerning the same situation but with <em>using-declarations</em>:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/21880363/using-directive-in-header-files-in-private-namespace\">Using directive in header files in private namespace</a> (despite its title)</li>\n<li><a href=\"https://stackoverflow.com/questions/38251541/elegant-way-to-prevent-namespace-poisoning-in-c\">Elegant way to prevent namespace poisoning in C++</a> (whose one answer is really an answer to the \"bad practice\" question above)</li>\n</ul>\n<p>This could be combined with either of them, but the editing would be severe.</p>\n", "AcceptedAnswerId": "46168810", "Title": "Is a using-directive in a detail namespace problematic?", "CreationDate": "2017-09-12T04:56:10.427", "Id": "46168188", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-09-12T05:50:10.440", "Score": "4", "OwnerUserId": "8586227", "Tags": "<c++><namespaces><using-directives>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46168188_46168323_0": {"length": 34, "quality": 0.918918918918919, "section_id": 5510}}, "n3337": {"so_46168188_46168323_0": {"length": 34, "quality": 0.918918918918919, "section_id": 5296}}, "n4659": {"so_46168188_46168323_0": {"length": 34, "quality": 0.918918918918919, "section_id": 6945}}}, "46168323": {"Id": "46168323", "PostTypeId": "2", "Body": "<p><strong>No</strong>, the <code>detail</code> namespace will not isolate clients from the nested <code>using</code> directive.  <a href=\"http://eel.is/c++draft/namespace.udir#2\" rel=\"nofollow noreferrer\">[namespace.udir]</a> is quite explicit about that</p>\n<blockquote>\n<p id=\"so_46168188_46168323_0\">A <a href=\"http://eel.is/c++draft/namespace.udir#nt:using-directive\" rel=\"nofollow noreferrer\"><em>using-directive</em></a> specifies that the names in the nominated namespace can be used in the scope in which the <a href=\"http://eel.is/c++draft/namespace.udir#nt:using-directive\" rel=\"nofollow noreferrer\"><em>using-directive</em></a> appears after the <a href=\"http://eel.is/c++draft/namespace.udir#nt:using-directive\" rel=\"nofollow noreferrer\"><em>using-directive</em></a>. During <a href=\"http://eel.is/c++draft/basic.lookup.unqual\" rel=\"nofollow noreferrer\">unqualified name lookup</a>, the names appear as if they were declared in the nearest enclosing namespace which contains both the <a href=\"http://eel.is/c++draft/namespace.udir#nt:using-directive\" rel=\"nofollow noreferrer\"><em>using-directive</em></a> and the nominated namespace. [\u2009<em>Note:</em> In this context, \u201ccontains\u201d means \u201ccontains directly or indirectly\u201d. \u2014\u2009<em>end note</em>\u2009]</p>\n</blockquote>\n<p>A little example</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace foo {\n    namespace detail {\n        using namespace std;\n    }\n}\n\nint main()\n{\n    foo::detail::cout &lt;&lt; \"Hello World!\\n\";\n\n    // nothing is stopping me from doing that\n    using namespace foo::detail;\n    cout &lt;&lt; \"Hello World!\\n\";\n}\n</code></pre>\n<p>STL gives a nice explanation of how name lookup works in his video <a href=\"https://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/Stephan-T-Lavavej-Core-C-1-of-n\" rel=\"nofollow noreferrer\">Core C++, 1 of n</a>.</p>\n", "LastEditorUserId": "1944004", "LastActivityDate": "2017-09-12T05:15:19.833", "Score": "3", "CreationDate": "2017-09-12T05:08:23.473", "ParentId": "46168188", "CommentCount": "5", "LastEditDate": "2017-09-12T05:15:19.833", "OwnerUserId": "1944004"}});