post_cb({"4203479": {"CommentCount": "0", "ViewCount": "2706", "CreationDate": "2010-11-17T10:30:57.360", "LastActivityDate": "2010-11-17T11:22:50.900", "Title": "dynamic_cast confusion", "AcceptedAnswerId": "4203641", "PostTypeId": "1", "Id": "4203479", "Score": "10", "Body": "<p>I give up on this...</p>\n<blockquote>\n<p id=\"so_4203479_4203479_0\">$5.2.7/2- \"If T is a pointer type, v\n  shall be an rvalue of a pointer to\n  complete class type, and the result is\n  an rvalue of type T. If T is a\n  reference type, v shall be an lvalue\n  of a complete class type, and the\n  result is an lvalue of the type\n  referred to by T.\"</p>\n</blockquote>\n<p>In accordance with the above, the following code should be well-formed. </p>\n<pre><code>struct A{};\nstruct B : A{};\n\nint main(){\n   B b;\n   A a, &amp;ar1 = b;\n\n   B&amp; rb1 = dynamic_cast&lt;B&amp;&gt;(ar1);  // Does not $5.2.7/2 apply here?\n   B&amp; rb2 = dynamic_cast&lt;B&amp;&gt;(a);    // and also here?\n}\n</code></pre>\n<p>But it is not. All compilers complain about the operand to dynamic_cast not being polymorphic in accordance with </p>\n<blockquote>\n<p id=\"so_4203479_4203479_1\">$5.2.7/6- Otherwise, v shall be a\n  pointer to or an lvalue of a\n  polymorphic type (10.3).</p>\n</blockquote>\n<p>So my question is what does $5.2.7/2 mean? Why does $5.2.7/6 kick in here?</p>\n", "Tags": "<c++><dynamic-cast>", "OwnerUserId": "418110", "AnswerCount": "3"}, "4203535": {"ParentId": "4203479", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Well, all requirements in 5.2.7 should be observed <em>together</em>. You can't just stop after 5.2.7/2 and start writing code that supposedly satisfies everything \"up to 5.2.7/2\". The entire 5.2.7 defines the specification of <code>dynamic_cast</code>.</p>\n<p>The polymorphic requirement is singled out because it is <em>conditional</em>. When you use <code>dynamic_cast</code> for upcasts, the polymorphic requirement does not apply (in fact, <code>dynamic_cast</code> is equivalent to <code>static_cast</code> in upcasts). The polymorphic requirement only applies when you use <code>dynamic_cast</code> for downcasts or crosscasts.</p>\n<p>The specification of <code>dynamic_cast</code> is organized sequentially, meaning that it takes care of simpler cases first, and then proceeds to more complicated applications. You are supposed to read it step by step, until it covers your specific situation. Everything you read along that path applies cumulatively, And \"otherwise\" means: \"if we haven't covered your case yet, then continue reading\".</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2010-11-17T11:05:08.587", "Id": "4203535", "Score": "9", "CreationDate": "2010-11-17T10:39:27.733", "LastActivityDate": "2010-11-17T11:05:08.587"}, "4203619": {"ParentId": "4203479", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In order to do a <strong>downcast</strong> as in your example, Struct A needs to be polymorphic, and have RTTI.  Here's an adjusted version that works, to a point:</p>\n<pre><code>struct A{virtual void f(){}};\nstruct B : A{};\n\nint main(){\n   B b;\n   A a, &amp;ar1 = b;\n\n   B&amp; rb1 = dynamic_cast&lt;B&amp;&gt;(ar1);  // Does not $5.2.7/2 apply here?\n   //B&amp; rb2 = dynamic_cast&lt;B&amp;&gt;(a);    // and also here?\n}\n</code></pre>\n<p>By adding a virtual making it polymorphic, RTTI is enabled for the class, allowing downcasts.</p>\n<p>Note that your second example cannot work - since you are casting a pod (<code>a</code>) to a reference to a pod - which is not allowed.</p>\n<hr>\n<p>Update:</p>\n<p>Your code is not allowed under 5.2.7.5 and is neither allowed under 5.2.7.6.  My adjustment makes it work under 5.2.7.6</p>\n</hr>", "OwnerUserId": "121332", "LastEditorUserId": "121332", "LastEditDate": "2010-11-17T11:10:10.287", "Id": "4203619", "Score": "4", "CreationDate": "2010-11-17T10:52:08.497", "LastActivityDate": "2010-11-17T11:10:10.287"}, "4203641": {"ParentId": "4203479", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>\"Otherwise\" in this case means, \"unless the conditions in 5.2.7/5 apply\".</p>\n<p>You can tell this because /2 places a requirement on the program regarding the operand of the the <code>dynamic_cast</code> (note the \"shall\" language of \"v shall be an lvalue\" vs. the \"is\" language of \"the result is an lvalue\"). In common with other places in the standard, expressing a requirement doesn't necessarily mean that it's the <em>only</em> requirement. Other clauses can state extra requirements. In this case, /6 states an extra requirement that only applies in certain cases, depending on T and the static type of v.</p>\n<p>/3, /4, /5 are telling you about the <em>value</em> of the result, and they're entirely consistent with the requirement in /2. None of them starts with \"Otherwise\". So to me it's fairly obvious that they do not form an \"else if\" chain starting at /2.</p>\n<p>Some brackets or something might make this clearer (i.e. that the \"otherwise\" in /6 applies to the \"if\" in /5, and not to the \"if\" in /2, /3, or /4). But that's just not the house style.</p>\n<p>Aside from anything else, the \"otherwise\" in /5 logically cannot meaningfully apply to the conditions in /2. /1 says that T must be \"pointer or reference to complete class type, or <em>cv</em> <code>void*</code> \". /2 covers two cases - pointer types, and reference types. That's everything. There is no \"otherwise\" to /2 (unless it were to say \"otherwise, a conforming compiler must issue a diagnostic\", but that's implicit)</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2010-11-17T11:22:50.900", "Id": "4203641", "Score": "3", "CreationDate": "2010-11-17T10:54:47.583", "LastActivityDate": "2010-11-17T11:22:50.900"}, "bq_ids": {"n4140": {"so_4203479_4203479_1": {"section_id": 6016, "quality": 0.5714285714285714, "length": 4}, "so_4203479_4203479_0": {"section_id": 6012, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_4203479_4203479_1": {"section_id": 5784, "quality": 0.7142857142857143, "length": 5}, "so_4203479_4203479_0": {"section_id": 5780, "quality": 0.8571428571428571, "length": 18}}, "n4659": {"so_4203479_4203479_1": {"section_id": 7515, "quality": 0.5714285714285714, "length": 4}, "so_4203479_4203479_0": {"section_id": 7511, "quality": 0.8571428571428571, "length": 18}}}});