post_cb({"bq_ids": {"n4140": {"so_25804188_25804347_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3304}, "so_25804188_25804347_1": {"length": 6, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_25804188_25804347_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 3174}, "so_25804188_25804347_1": {"length": 6, "quality": 1.0, "section_id": 3195}}, "n4659": {"so_25804188_25804347_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 4070}, "so_25804188_25804347_1": {"length": 6, "quality": 1.0, "section_id": 4091}}}, "25804347": {"Id": "25804347", "PostTypeId": "2", "Body": "<p>As written, this is aggregate initialization. The applicable rule is (\u00a78.5.1 [dcl.init.aggr]/p7):</p>\n<blockquote>\n<p id=\"so_25804188_25804347_0\">If there are fewer <em>initializer-clauses</em> in the list than there are\n  members in the aggregate, then each member not explicitly initialized\n  shall be initialized from its <em>brace-or-equal-initializer</em> or, if\n  there is no <em>brace-or-equal-initializer</em>, from an empty initializer\n  list (8.5.4).</p>\n</blockquote>\n<p>The relevant parts of \u00a78.5.4 [dcl.init.list]/p3 is:</p>\n<blockquote>\n<p id=\"so_25804188_25804347_1\">List-initialization of an object or reference of type <code>T</code> is defined\n  as follows:</p>\n<ul>\n<li>If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</li>\n<li>Otherwise, if the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is\n  value-initialized.</li>\n<li>[irrelevant items omitted]</li>\n<li>Otherwise, if the initializer list has no elements, the object is value-initialized.</li>\n</ul>\n</blockquote>\n<p>In short, sub-aggregates are recursively aggregate-initialized from an empty initializer list. Everything else is value-initialized. So the end result is everything being value-initialized, with everything being a POD, value-initialization means zero-initialization.</p>\n<hr>\n<p>If <code>T</code> is POD but not an aggregate, then aggregate initialization doesn't apply, so you hit the second bullet point in \u00a78.5.4 [dcl.init.list]/p3, which results in value-initialization of the entire object instead. POD classes must have a trivial (and so not-user-provided) default constructor, so value-initialization for them means zero-initialization as well.</p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2014-09-12T09:03:14.797", "Score": "4", "CreationDate": "2014-09-12T08:53:29.120", "ParentId": "25804188", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2014-09-12T09:03:14.797"}, "25804188": {"ViewCount": "240", "Body": "<pre><code>struct Foo\n{\n    char name[10];\n    int  i;\n    double d;\n};\n</code></pre>\n<p>I know that I can zero-initialize all the members of such POD type with:</p>\n<pre><code>Foo foo = {0};\n</code></pre>\n<p>Can I further simplify this to:</p>\n<pre><code>Foo foo = {};\n</code></pre>\n<p>Like native arrays? (<code>int arr[10] = {};</code>)</p>\n<hr>\n<p>I'm not asking when initializing with <code>{0}</code>, will the members except the first are zero-initialized. I know the answer to that question is yes. I'm asking if the first <code>0</code> can be  omitted syntactically.</p>\n<p>Most of the tutorials I found on this subject suggest using <code>{0}</code>, none using <code>{}</code>, e.g, <a href=\"http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=171\" rel=\"nofollow\">this guide</a>, and it's explained as <em>This works because aggregate initialization rules are recursive;</em>, which gives more confusion than explanation.</p>\n</hr>", "AcceptedAnswerId": "25804347", "Title": "Zero-initialization of POD types", "CreationDate": "2014-09-12T08:44:52.277", "Id": "25804188", "CommentCount": "1", "LastEditDate": "2014-09-12T23:53:57.390", "PostTypeId": "1", "LastEditorUserId": "1009479", "LastActivityDate": "2014-09-13T00:12:20.227", "Score": "3", "OwnerUserId": "1009479", "Tags": "<c++><initialization>", "AnswerCount": "1"}});