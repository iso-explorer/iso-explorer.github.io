post_cb({"17516311": {"CommentCount": "0", "CreationDate": "2013-07-07T20:57:26.427", "PostTypeId": "1", "AcceptedAnswerId": "17516457", "LastEditorUserId": "-1", "LastActivityDate": "2013-07-07T21:14:33.043", "LastEditDate": "2017-05-23T11:53:13.660", "ViewCount": "289", "FavoriteCount": "1", "Title": "Difference between `iterators` and `references to elements`", "Id": "17516311", "Score": "3", "Body": "<p>I followed the following post that illustrates the scenario how iterator behaves after some non-const operations. </p>\n<p><a href=\"https://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">Iterator invalidation rules</a></p>\n<p>I have problems to understand the difference between <code>reference</code> and <code>iterator</code>. Here is one of the rule listed as an example for clarification:</p>\n<blockquote>\n<p id=\"so_17516311_17516311_0\">deque: all iterators and references are\n  invalidated, unless the inserted member is at an end (front or back)\n  of the deque (in which case all iterators are invalidated, but\n  references to elements are unaffected) [23.2.1.3/1]</p>\n</blockquote>\n<p>Here is the sample code that is based on the reference.</p>\n<pre><code>std::deque&lt;int&gt; mydeque;\nmydeque.push_back(1);\nmydeque.push_back(2);\nmydeque.push_back(3);\n\nconst int&amp; int3 = mydeque.back();                     // reference to 3\n      int&amp; int3 = mydeque.back();\nstd::deque&lt;int&gt;::iterator itBack = mydeque.crbegin(); // pointing to 3\n\nmydeque.push_back(4);\n</code></pre>\n<p><strong>Question</strong>&gt; If my vague understanding is correct, then the following statement is true:</p>\n<pre><code>After the calling of the line of `mydeque.push_back(4)`\n`int3` is still valid because it is a reference to element.\n`itBack` is invalidated because it is an iterator.\n</code></pre>\n<p>Thank you</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "391104", "AnswerCount": "1"}, "17516457": {"ParentId": "17516311", "CommentCount": "0", "Body": "<p>Yes, that sounds correct.  The reason the iterator gets invalidated but the reference does not is that the iterator needs to be able to do <code>++</code> and <code>--</code> correctly, but pushing something onto a deque might cause it to rearrange its structures for tracking that.  But, deque guarantees it won't move the elements themselves, even if it has to restructure the container around them.</p>\n<p>This suggests that the implementation of deque has an additional level of indirection built into its iterators that it hides from you.  But, that's pretty much the entire the point of iterators, and why they're distinct from references.</p>\n", "OwnerUserId": "2354107", "PostTypeId": "2", "Id": "17516457", "Score": "1", "CreationDate": "2013-07-07T21:14:33.043", "LastActivityDate": "2013-07-07T21:14:33.043"}, "bq_ids": {"n4140": {"so_17516311_17516311_0": {"section_id": 817, "quality": 0.55, "length": 11}}, "n3337": {"so_17516311_17516311_0": {"section_id": 806, "quality": 0.55, "length": 11}}, "n4659": {"so_17516311_17516311_0": {"section_id": 876, "quality": 0.55, "length": 11}}}});