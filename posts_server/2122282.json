post_cb({"2122282": {"CommentCount": "4", "AcceptedAnswerId": "2122404", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-01-23T05:42:11.880", "LastActivityDate": "2012-05-17T23:07:53.703", "LastEditDate": "2017-05-23T10:30:04.887", "ViewCount": "2504", "FavoriteCount": "1", "Title": "Are function-local typedefs visible inside C++0x lambdas?", "Id": "2122282", "Score": "11", "Body": "<p>I've run into a strange problem. The following simplified code reproduces the problem in MSVC 2010:</p>\n<pre><code>template &lt;typename T&gt;\nstruct dummy\n{\n    static T foo(void) { return T(); }\n};\n\nint main(void)\n{\n    typedef dummy&lt;bool&gt; dummy_type;\n    auto x = []{ bool b = dummy_type::foo(); };\n    // auto x = []{ bool b = dummy&lt;bool&gt;::foo(); }; // works\n}\n</code></pre>\n<p>The <code>typedef</code> I created locally in the function doesn't seem to be visible in the lambda. If I replace the <code>typedef</code> with the actual type, it works as expected.</p>\n<p>Here are some other test cases:</p>\n<pre><code>// crashes the compiler, credit to Tarydon\nint main(void)\n{\n    struct dummy {};\n\n    auto x = []{ dummy d; };\n}\n\n// works as expected\nint main(void)\n{\n    typedef int integer;\n\n    auto x = []{ integer i = 0; };\n}\n</code></pre>\n<p>I don't have g++ available to test it, right now. Is this some strange rule in C++0x, or just a bug in the compiler?</p>\n<p>From the results above, I'm leaning towards bug. Though the crash is definitely a bug.</p>\n<hr>\n<p>For now, I have filed two <a href=\"https://stackoverflow.com/questions/2122282/are-function-local-typedefs-visible-inside-c0x-lambdas/2122432#2122432\">bug reports</a>.</p>\n<p>All code snippets above should compile. The error has to do with using the scope resolution on locally defined scopes. (Spotted by <a href=\"https://stackoverflow.com/users/149467/dvide\">dvide</a>.)</p>\n<p>And the crash bug has to do with... who knows. :)</p>\n<hr>\n<h3>Update</h3>\n<p>According to the <a href=\"https://stackoverflow.com/questions/2122282/are-function-local-typedefs-visible-inside-c0x-lambdas/2122432#2122432\">bug reports</a>, they have both been fixed for the next release of Visual Studio 2010. (Though this doesn't seem to be the case; VS11 perhaps.)</p>\n</hr></hr>", "Tags": "<c++><lambda><c++11><compiler-bug>", "OwnerUserId": "87234", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_2122282_2122404_0": {"section_id": 5966, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_2122282_2122404_0": {"section_id": 5735, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_2122282_2122404_0": {"section_id": 7460, "quality": 0.9333333333333333, "length": 14}}}, "2122432": {"ParentId": "2122282", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>I have filed two bug reports.</p>\n<ul>\n<li>The crash bug by <a href=\"https://stackoverflow.com/questions/2122282/are-function-local-typedefs-visible-inside-c0x-lambdas/2122324#2122324\">Tarydon</a>. (<a href=\"https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=526671\" rel=\"nofollow noreferrer\">Report</a>)</li>\n<li>The lambda scope resolution bug. (<a href=\"https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=526672\" rel=\"nofollow noreferrer\">Report</a>)</li>\n</ul>\n<p>We'll see how it goes. :)</p>\n<hr>\n<h3>Update</h3>\n<p>Both bugs have been marked as fixed:</p>\n<blockquote>\n<p id=\"so_2122282_2122432_0\">We appreciate your feedback. This bug has been seen by us before and we have fixed it in next release. Thank you for using the product.</p>\n<p id=\"so_2122282_2122432_1\">Thanks,<br>\n  Ulzii Luvsanbat<br>\n  Windows C++ Team </br></br></p>\n</blockquote>\n<p>So there we go.</p>\n</hr>", "OwnerUserId": "87234", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:54.400", "Id": "2122432", "Score": "2", "CreationDate": "2010-01-23T06:52:12.843", "LastActivityDate": "2010-04-03T02:07:55.523"}, "2884406": {"ParentId": "2122282", "CommentCount": "0", "Body": "<p>Function-local enums cannot be detected by lambdas either.</p>\n<pre><code>int main()\n{   \n    enum E {A, B, C};   \n    auto x = [](){ int a = A; }; \n    //auto y = [](){ E a = A; }; // this will crash the compiler\n}\n</code></pre>\n<p>error C3493: 'A' cannot be implicitly captured because no default capture mode has been specified</p>\n<p>Following is a workround, problematic-maybe though.</p>\n<pre><code>int main()\n{   \n    enum E {A, B, C};   \n    auto x = [=](){ int a = A; };\n    // typedef E F; \n    // auto y = [=](){ F a = A; }; // this compiles ok\n}\n</code></pre>\n", "OwnerUserId": "326210", "PostTypeId": "2", "Id": "2884406", "Score": "3", "CreationDate": "2010-05-21T18:01:53.513", "LastActivityDate": "2010-05-21T18:01:53.513"}, "2122404": {"ParentId": "2122282", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From n3000, 5.1.2/6,</p>\n<blockquote>\n<p id=\"so_2122282_2122404_0\">The lambda-expression\u2019s\n  compound-statement yields the\n  function-body (8.4) of the function\n  call operator, but for purposes of\n  name lookup (3.4), \u2026 the\n  compound-statement is considered in\n  the context of the lambda-expression.</p>\n</blockquote>\n<p>Not surprisingly, the local type should be visible.</p>\n", "OwnerUserId": "153285", "LastEditorUserId": "153285", "LastEditDate": "2010-01-23T06:52:22.727", "Id": "2122404", "Score": "9", "CreationDate": "2010-01-23T06:40:16.360", "LastActivityDate": "2010-01-23T06:52:22.727"}, "2122324": {"ParentId": "2122282", "CommentCount": "2", "Body": "<p>This is not really an answer to your question, but just exploring the problem further. I was wondering if the compiler has issues dealing with <em>types</em> declared in an enclosing scope, so tried this out:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename Func&gt;\nvoid do_test(Func pFunc) {\n}\n\ntemplate &lt;typename T&gt;\nvoid test_trait(void) {\n   class Something { public: int foo; };\n\n   do_test ([] (T pX) {\n      Something A; A.foo = 12;\n   });\n}\n\nint main(void) {\n    test_trait&lt;int&gt; ();\n}\n</code></pre>\n<p>Here, I'm just trying to create a local type in the enclosing scope and use it from within the lambda function. Not only does this not compile (with Visual Studio 2010, Beta 2) but it actually crashes the compiler with a C1001 internal error. </p>\n", "OwnerUserId": "165620", "PostTypeId": "2", "Id": "2122324", "Score": "2", "CreationDate": "2010-01-23T06:05:44.170", "LastActivityDate": "2010-01-23T06:05:44.170"}});