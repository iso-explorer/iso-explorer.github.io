post_cb({"42611583": {"ParentId": "42610429", "CommentCount": "0", "Body": "<p>The code is well-formed. The rule from [expr.prim.lambda] is:</p>\n<blockquote>\n<p id=\"so_42610429_42611583_0\">If a <em>lambda-expression</em> or an instantiation of the function call operator template of a generic lambda odr-uses (3.2) <code>this</code> or a variable with\n  automatic storage duration from its reaching scope, that entity shall be captured by the <em>lambda-expression</em>.</p>\n</blockquote>\n<p>Any variable that is odr-used must be captured. Is <code>x</code> odr-used in the lambda-expression? No, it is not. The rule from [basic.def.odr] is:</p>\n<blockquote>\n<p id=\"so_42610429_42611583_1\">A variable <code>x</code> whose name appears as a potentially-evaluated expression <code>ex</code> is odr-used by <code>ex</code> unless applying the lvalue-to-rvalue conversion (4.1) to <code>x</code> yields a constant expression (5.20) that does not invoke any non-trivial\n  functions and, if <code>x</code> is an object, <code>ex</code> is an element of the set of potential results of an expression <code>e</code>, where either the lvalue-to-rvalue conversion (4.1) is applied to <code>e</code>, or <code>e</code> is a discarded-value expression (Clause 5).</p>\n</blockquote>\n<p><code>x</code> is only used in a context where we apply the lvalue-to-rvalue conversion and end up with a constant expression, so it is not odr-used, so we do not need to capture it. The program is fine. This is the same idea as why this example from the standard is well-formed:</p>\n<blockquote id=\"so_42610429_42611583_2\">\n<pre><code>void f(int, const int (&amp;)[2] = {}) { }   // #1\nvoid f(const int&amp;, const int (&amp;)[1]) { } // #2\n\nvoid test() {\n    const int x = 17;\n    auto g = [](auto a) {\n        f(x); // OK: calls #1, does not capture x\n    };\n    // ...\n}\n</code></pre>\n</blockquote>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "42611583", "Score": "8", "CreationDate": "2017-03-05T17:26:37.650", "LastActivityDate": "2017-03-05T17:26:37.650"}, "42610472": {"ParentId": "42610429", "CommentCount": "9", "Body": "<p>Even though <code>x</code> is a <code>constexpr</code>, it is no different from any other object, otherwise, and follows the same rules with regards to scoping. There are no exceptions to scoping rules for <code>constexpr</code>s, and a lambda must be coded to explicitly capture it.</p>\n", "OwnerUserId": "3943312", "PostTypeId": "2", "Id": "42610472", "Score": "0", "CreationDate": "2017-03-05T15:53:24.100", "LastActivityDate": "2017-03-05T15:53:24.100"}, "bq_ids": {"n4140": {"so_42610429_42611583_1": {"section_id": 7040, "quality": 0.9375, "length": 30}, "so_42610429_42611583_0": {"section_id": 5972, "quality": 1.0, "length": 19}}, "n3337": {"so_42610429_42611583_0": {"section_id": 5740, "quality": 0.6842105263157895, "length": 13}}, "n4659": {"so_42610429_42611583_1": {"section_id": 8537, "quality": 0.9375, "length": 30}, "so_42610429_42611583_0": {"section_id": 7471, "quality": 1.0, "length": 19}}}, "42610429": {"CommentCount": "5", "AcceptedAnswerId": "42611583", "CreationDate": "2017-03-05T15:49:30.817", "LastActivityDate": "2017-03-05T17:26:37.650", "PostTypeId": "1", "ViewCount": "277", "FavoriteCount": "1", "Title": "Must constexpr expressions be captured by a lambda in C++?", "Id": "42610429", "Score": "9", "Body": "<p>Here is a piece of code that won't compile in MSVC 2015 (ignore the uninitialized value access):</p>\n<pre><code>#include &lt;array&gt;\nint main() {\n    constexpr int x = 5;\n    auto func = []() {\n        std::array&lt;int, x&gt; arr;\n        return arr[0];\n    };\n    func();\n}\n</code></pre>\n<p>It complains that:</p>\n<pre><code>'x' cannot be implicitly captured because no default capture mode has been specified\n</code></pre>\n<p>But <code>x</code> is a <code>constexpr</code>!  <code>x</code> is known at compile time to be <code>5</code>.  Why does MSVC kick up a fuss about this?  (Is it <em>yet</em> another MSVC bug?)  GCC will happily compile it.</p>\n", "Tags": "<c++><visual-c++><lambda><c++14><constexpr>", "OwnerUserId": "1021959", "AnswerCount": "2"}});