post_cb({"46697160": {"ParentId": "46696675", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>placement new of array may require more place than <code>N * sizeof(Object)</code></p>\n<p>(??? as compiler has to be able to call correctly the destructor with <code>delete[]</code> ???).</p>\n<blockquote>\n<p id=\"so_46696675_46697160_0\">5.3.4 [expr.new]:</p>\n<p id=\"so_46696675_46697160_1\"><code>new(2,f) T[5]</code> results in a call of <code>operator new[](sizeof(T)*5+y,2,f)</code>.</p>\n<p id=\"so_46696675_46697160_2\">Here, <code>x</code> and <code>y</code> are non-negative unspecified values representing array allocation overhead; the result of the new-expression will be offset by this amount from the value returned by <code>operator new[]</code>. This overhead may be applied in all array new-expressions, including those referencing the library function <code>operator new[](std::size_t, void*)</code> and other placement allocation functions. The amount of overhead may vary from one invocation of new to another. \u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "2684539", "LastEditorUserId": "2684539", "LastEditDate": "2017-10-11T20:58:56.537", "Id": "46697160", "Score": "4", "CreationDate": "2017-10-11T20:40:29.960", "LastActivityDate": "2017-10-11T20:58:56.537"}, "46696675": {"CommentCount": "9", "AcceptedAnswerId": "46697160", "PostTypeId": "1", "LastEditorUserId": "1460794", "CreationDate": "2017-10-11T20:07:10.413", "LastActivityDate": "2017-10-11T20:58:56.537", "LastEditDate": "2017-10-11T20:31:27.500", "ViewCount": "75", "FavoriteCount": "1", "Title": "Placement new is writing more bytes than array size", "Id": "46696675", "Score": "3", "Body": "<p>In the following program I expected 10 bytes to be overwritten with placement new and then for the destructor to be called for each byte:</p>\n<pre><code>#include &lt;memory&gt;\n\nstruct MyChar {\n    MyChar(char c = 'n') :c{c}{}\n    ~MyChar(){ c = 'd'; }\n    char c;\n};\n\nint main()\n{\n    {\n        MyChar first[10]{0,1,2,3,4,5,6,7,8,9};\n        new (first)MyChar[10]{10,11,12,13,14,15,16,17,18,19};\n    }\n    return 0;\n}\n</code></pre>\n<p>But the compiler (*) warns that 18 will be written:</p>\n<blockquote>\n<p id=\"so_46696675_46696675_0\">warning C6386: Buffer overrun while writing to 'first':  the writable\n  size is '10' bytes, but '18' bytes might be written.</p>\n</blockquote>\n<p>At first the bytes are written as expected:\n<a href=\"https://i.stack.imgur.com/TSR09.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/TSR09.png\"/></a></p>\n<p>But the compiler wasn't bluffing. At the placement new statement it does write 18 bytes:\n<a href=\"https://i.stack.imgur.com/iSy9Y.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/iSy9Y.png\"/></a></p>\n<p>Which results in an error:</p>\n<blockquote>\n<p id=\"so_46696675_46696675_1\">Run-Time Check Failure #2 - Stack around the variable 'first' was\n  corrupted.</p>\n</blockquote>\n<p>Why doesn't it stick to 10 bytes? <code>sizeof(MyChar)==1</code> and <code>alignof(MyChar)==1</code>.</p>\n<hr>\n<p>(*) Microsoft Visual Studio Community 2017 Preview (2). Also (but without warning during compilation) I get the same memory overwritten and runtime error on Microsoft Visual Studio Community 2017 (Version 15.2 (26430.15) Release).</p>\n</hr>", "Tags": "<c++>", "OwnerUserId": "1460794", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46696675_46697160_2": {"section_id": 6095, "quality": 0.9148936170212766, "length": 43}, "so_46696675_46697160_1": {"section_id": 6095, "quality": 1.0, "length": 5}}, "n3337": {"so_46696675_46697160_2": {"section_id": 5861, "quality": 0.9148936170212766, "length": 43}, "so_46696675_46697160_1": {"section_id": 5861, "quality": 1.0, "length": 5}}, "n4659": {"so_46696675_46697160_2": {"section_id": 7592, "quality": 0.8936170212765957, "length": 42}}}});