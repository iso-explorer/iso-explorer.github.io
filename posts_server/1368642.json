post_cb({"bq_ids": {"n4140": {"so_1368642_1368738_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7067}, "so_1368642_1368738_1": {"length": 19, "quality": 1.0, "section_id": 7068}}, "n3337": {"so_1368642_1368738_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6811}, "so_1368642_1368738_1": {"length": 19, "quality": 1.0, "section_id": 6812}}, "n4659": {"so_1368642_1368738_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 8564}, "so_1368642_1368738_1": {"length": 19, "quality": 1.0, "section_id": 8565}}}, "1368642": {"ViewCount": "5058", "Body": "<p>I can forward declare a function in a namespace by doing this:</p>\n<pre><code>void myNamespace::doThing();\n</code></pre>\n<p>which is equivalent to:</p>\n<pre><code>namespace myNamespace\n{\n  void doThing();\n}\n</code></pre>\n<p>To forward declare a class in a namespace:</p>\n<pre><code>namespace myNamespace\n{\n  class myClass;\n}\n</code></pre>\n<p>Is there a shorter way to do this?  I was thinking something along the lines of:</p>\n<pre><code>class myNamespace::myClass;\n</code></pre>\n", "AcceptedAnswerId": "1368873", "Title": "Is there a shorter way to forward declare a class in a namespace?", "CreationDate": "2009-09-02T16:08:42.747", "Id": "1368642", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2009-09-02T16:47:42.667", "Score": "18", "OwnerUserId": "15852", "Tags": "<c++><namespaces><forward-declaration>", "AnswerCount": "3"}, "1368738": {"Id": "1368738", "PostTypeId": "2", "Body": "<p>I've wanted to do the same thing before - it's not allowed.  A namespace member must be declared in a <code>namespace-body</code>.  They can only be \"referred to\" using the scope resolution operator.</p>\n<p>See 3.3.5 \"Namespace scope\" in the standard.</p>\n<blockquote>\n<p id=\"so_1368642_1368738_0\">Entities declared in a namespace-body are said to be members of the namespace, and names introduced by these declarations into the declarative region of the namespace are said to be member names of the namespace.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_1368642_1368738_1\">A namespace member can also be referred to after the :: scope resolution operator (5.1) applied to the name of its namespace or the name of a namespace which nominates the member\u2019s namespace in a using-directive;</p>\n</blockquote>\n", "LastActivityDate": "2009-09-02T16:23:18.177", "CommentCount": "0", "CreationDate": "2009-09-02T16:23:18.177", "ParentId": "1368642", "Score": "10", "OwnerUserId": "12711"}, "1368873": {"Id": "1368873", "PostTypeId": "2", "Body": "<p>No, however with a little reformatting</p>\n<pre><code>namespace myNamespace { class myClass; }\n</code></pre>\n<p>isn't much worse than</p>\n<pre><code>class myNamespace::myClass;\n</code></pre>\n", "LastActivityDate": "2009-09-02T16:47:42.667", "CommentCount": "0", "CreationDate": "2009-09-02T16:47:42.667", "ParentId": "1368642", "Score": "26", "OwnerUserId": "5427"}, "1368691": {"Id": "1368691", "PostTypeId": "2", "Body": "<p>I don't think so.</p>\n", "LastActivityDate": "2009-09-02T16:15:28.317", "CommentCount": "0", "CreationDate": "2009-09-02T16:15:28.317", "ParentId": "1368642", "Score": "2", "OwnerUserId": "118854"}});