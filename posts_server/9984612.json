post_cb({"9984742": {"ParentId": "9984612", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's valid in conforming C++03/C++11 compilers, for some definition of \"valid.\"</p>\n<p>C++03 ISO/IEC 14882:2003 \u00a714.2.5:</p>\n<blockquote>\n<p id=\"so_9984612_9984742_0\">[ <em>Note:</em> just as is the case with the <code>typename</code> prefix, the <code>template</code> prefix is allowed in cases where it is not strictly necessary; i.e., when the expression on the left of the <code>-&gt;</code> or <code>.</code>, or the <em>nested-name-specifier</em> is not dependent on a <em>template-parameter</em>. ]</p>\n</blockquote>\n<p>C++11 ISO/IEC 14882:2011 \u00a714.2.5:</p>\n<blockquote>\n<p id=\"so_9984612_9984742_1\">[ <em>Note:</em> As is the case with the <code>typename</code> prefix, the <code>template</code> prefix is allowed in cases where it is not strictly necessary; i.e., when the <em>nested-name-specifier</em> or the expression on the left of the <code>-&gt;</code> or <code>.</code> is not dependent on a <em>template-parameter</em>, or the use does not appear in the scope of a template. \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>Note that you can't use <code>template</code> when the member in question isn't actually a template\u2014you aren't allow to lie with it. Also note that for <code>typename</code>, the type has to be a <em>qualified</em> type (e.g. <code>X::Y</code>, not just <code>X</code>). C++11 also changed it so that you don't have to be in the scope of a template, whereas C++03 required you to be in a template. Also note that compilers are likely to differ on whether they actually let you <em>do</em> this. Under Clang, for instance, this warns under the flag <code>-Wc++11-extensions</code>.</p>\n<hr>\n<p>Here are some examples, assuming the following definition:</p>\n<pre><code>struct X {\n    typedef int Y;\n    template &lt;typename T&gt; static void foo();\n    static void bar();\n    template &lt;typename T&gt; static void baz(T);\n};\n</code></pre>\n<p>Invalid in both C++03 and C++11:</p>\n<pre><code>template &lt;typename T&gt;\nvoid foo() {\n    typename int z = 0; // int is not a qualified name.\n    X::template bar();  // X::bar is not a template.\n    X::template baz(z); // no template argument list.\n}\n</code></pre>\n<p>Invalid in C++03, valid in C++11 (but produces a warning on my copy of Clang):</p>\n<pre><code>void bar() {\n    typename X::Y z = 0;    // not in the body of a template, so\n    X::template foo&lt;int&gt;(); // no possibility of dependent names.\n}\n</code></pre>\n<p>Valid in both C++03 and C++11:</p>\n<pre><code>template &lt;typename T&gt;\nvoid baz() {\n    typename X::Y z = 0;    // not a dependent name, so 'typename'\n    X::template foo&lt;int&gt;(); // isn't strictly necessary.\n}\n</code></pre>\n</hr>", "OwnerUserId": "5696", "LastEditorUserId": "5696", "LastEditDate": "2012-04-03T07:43:41.470", "Id": "9984742", "Score": "11", "CreationDate": "2012-04-02T22:31:00.730", "LastActivityDate": "2012-04-03T07:43:41.470"}, "9984612": {"CommentCount": "3", "AcceptedAnswerId": "9984742", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-04-02T22:18:00.887", "LastActivityDate": "2012-04-03T07:43:41.470", "LastEditDate": "2017-05-23T12:04:30.470", "ViewCount": "328", "FavoriteCount": "1", "Title": "Using \"template\" and \"typename\" disambiguators when they are not needed", "Id": "9984612", "Score": "7", "Body": "<p><a href=\"https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords\">This question</a> covers when and why the <code>typename</code> and <code>template</code> disambiguators are needed in C++ template code.</p>\n<p>Is it valid to use these disambiguators in cases where they are not needed in C++03? How about in C++11? </p>\n", "Tags": "<c++><templates><c++11><typename>", "OwnerUserId": "141719", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9984612_9984742_1": {"section_id": 73, "quality": 0.875, "length": 21}, "so_9984612_9984742_0": {"section_id": 73, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_9984612_9984742_1": {"section_id": 68, "quality": 0.875, "length": 21}, "so_9984612_9984742_0": {"section_id": 68, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_9984612_9984742_1": {"section_id": 75, "quality": 0.875, "length": 21}, "so_9984612_9984742_0": {"section_id": 75, "quality": 0.8333333333333334, "length": 15}}}});