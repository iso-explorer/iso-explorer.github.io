post_cb({"5388135": {"ParentId": "5388097", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>clang shouldn't allow this, <code>inline</code> can only be used in the declaration of functions, from ISO/IEC 14882:2003 7.1.2 [dcl.fct.spec] / 1 :</p>\n<blockquote>\n<p id=\"so_5388097_5388135_0\"><em>Function-specifiers</em> can be used only in function declarations.</p>\n</blockquote>\n<p><code>inline</code> is one of three <em>function-specifiers</em>, <code>virtual</code> and <code>explicit</code> being the others.</p>\n<p>As @MatthieuM notes, in the next version of C++ (C++0x), the <code>inline</code> keyword will also be allowed in namespace definitions (with different semantics to <code>inline</code> as a <em>function-specifier</em>).</p>\n", "OwnerUserId": "19563", "LastEditorUserId": "19563", "LastEditDate": "2011-03-22T08:58:21.377", "Id": "5388135", "Score": "12", "CreationDate": "2011-03-22T07:40:18.477", "LastActivityDate": "2011-03-22T08:58:21.377"}, "5423373": {"ParentId": "5388097", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I got an answer from Clang mailing list. It was a bug: \n<a href=\"http://llvm.org/bugs/show_bug.cgi?id=3941\" rel=\"nofollow noreferrer\">http://llvm.org/bugs/show_bug.cgi?id=3941</a></p>\n<p>However it looks already been fixed in recent build.\nThanks anyway :)</p>\n<p>Here's the conversation:\n<a href=\"http://lists.cs.uiuc.edu/pipermail/cfe-dev/2011-March/014207.html\" rel=\"nofollow noreferrer\">http://lists.cs.uiuc.edu/pipermail/cfe-dev/2011-March/014207.html</a></p>\n", "OwnerUserId": "246776", "LastEditorUserId": "246776", "LastEditDate": "2016-05-12T16:17:07.013", "Id": "5423373", "Score": "7", "CreationDate": "2011-03-24T17:55:02.233", "LastActivityDate": "2016-05-12T16:17:07.013"}, "bq_ids": {"n4140": {"so_5388097_5388135_0": {"section_id": 5401, "quality": 1.0, "length": 4}}, "n3337": {"so_5388097_5388135_0": {"section_id": 5196, "quality": 1.0, "length": 4}}, "n4659": {"so_5388097_5388135_0": {"section_id": 6826, "quality": 1.0, "length": 4}}}, "5388097": {"CommentCount": "6", "AcceptedAnswerId": "5423373", "PostTypeId": "1", "LastEditorUserId": "246776", "CreationDate": "2011-03-22T07:35:05.823", "LastActivityDate": "2016-05-12T16:17:07.013", "LastEditDate": "2014-08-04T11:16:28.350", "ViewCount": "13798", "FavoriteCount": "9", "Title": "What's the c++ inline class?", "Id": "5388097", "Score": "30", "Body": "<p>I accidentally found that the Clang compiler allows :</p>\n<pre><code>inline class AAA\n{\n};\n</code></pre>\n<p>in C++.\nWhat's this?</p>\n<hr>\n<p>PS. I reported this to Clang mailing list <code>cfe-dev@cs.uiuc.edu</code>, and now waiting for reply. I'll update this question by I'm informed.</p>\n</hr>", "Tags": "<c++><class><inline><clang>", "OwnerUserId": "246776", "AnswerCount": "3"}, "5388577": {"ParentId": "5388097", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>It's allowed in case you wish to declare a function that returns an object of that class directly after the class's declaration, for example : </p>\n<pre><code>#include &lt;iostream&gt;\n\ninline class AAA \n{\npublic:\n    AAA()\n    {\n        // Nothing\n    }\n\n    AAA(const AAA&amp; _Param)\n    {\n        std::cout &lt;&lt; \"Calling Copy Constructor of AAA\\n\";\n    }\n}A()\n {\n     AAA a;\n     return a;\n };\n\nint main()\n{\n    A();\n    return 0;\n}\n</code></pre>\n<p>Also you should notice the compiler errors (or warnings) that appear in other illegal cases, such as declaring a variable instead of <code>A()</code>, also notice that the compiler tells you that he ignores this <code>inline</code> if you didn't declare any function.</p>\n<p>Hope that's helpful.</p>\n<p><strong>Edit : For The comment of Eonil</strong></p>\n<p>If you are talking about your code above in the question, then it's the same case as I see, the compiler will give you a warning : <code>'inline ' : ignored on left of 'AAA' when no variable is declared</code></p>\n<p>However, if you use the code in my answer but replace <code>A()</code> with a variable, <code>B</code> for example, it will generate a compiler error : <code>'B' : 'inline' not permitted on data declarations</code></p>\n<p>So we find that the compiler made no mistake with accepting such declarations, how about trying to write <code>inline double;</code> on its own? it will generate a warning : <code>'inline ' : ignored on left of 'double' when no variable is declared</code></p>\n<p>Now how about this declaration : </p>\n<pre><code>double inline d()\n{\n}\n</code></pre>\n<p>It gives no warnings or errors, it's exactly the same as : </p>\n<pre><code>inline double d()\n{\n}\n</code></pre>\n<p>since <strong><em>the precedence of <code>inline</code> is not important at all.</em></strong></p>\n<p>The Frist code (in the whole answer) is similar to writing : </p>\n<pre><code>class AAA\n{\n    // Code\n};\n\ninline class AAA A()\n{\n    // Code\n}\n</code></pre>\n<p>which is legal.</p>\n<p>And, in other way, it can be written as : </p>\n<pre><code>class AAA\n{\n    // Code\n};\n\nclass AAA inline A()\n{\n    // Code\n}\n</code></pre>\n<p>You would be reliefed if you see the first code (in the whole answer) written like : </p>\n<pre><code>#include &lt;iostream&gt;\n\nclass AAA \n{\n    // Code\n} inline A()\n {\n    // Code\n };\n</code></pre>\n<p>But they are the same, since there is no importance for the precedence of <code>inline</code>.</p>\n<p>Hope it's clear and convincing.</p>\n", "OwnerUserId": "368167", "LastEditorUserId": "368167", "LastEditDate": "2011-03-23T11:16:20.360", "Id": "5388577", "Score": "32", "CreationDate": "2011-03-22T08:35:04.417", "LastActivityDate": "2011-03-23T11:16:20.360"}});