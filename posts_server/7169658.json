post_cb({"bq_ids": {"n4140": {"so_7169658_7169675_0": {"length": 25, "quality": 0.78125, "section_id": 3274}}, "n3337": {"so_7169658_7169675_0": {"length": 27, "quality": 0.84375, "section_id": 3145}}, "n4659": {"so_7169658_7169675_0": {"length": 25, "quality": 0.78125, "section_id": 4032}}}, "7169675": {"Id": "7169675", "PostTypeId": "2", "Body": "<p>Yes, it is a POD according to the <a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special/7189821#7189821\">new rules</a>.</p>\n<p>If you look up paragraph \u00a78.4.2/4 of the new standard, you can see that if a constructor is defaulted on the first declaration, it is not user-provided:</p>\n<blockquote>\n<p id=\"so_7169658_7169675_0\">Explicitly-defaulted functions and implicitly-declared functions are\n  collectively called <em>defaulted</em> functions, and the implementation shall\n  provide implicit definitions for them (\u00a712.1 \u00a712.4, \u00a712.8), which might\n  mean defining them as deleted. A special member function is\n  <em>user-provided</em> if it is user-declared and not explicitly defaulted or\n  deleted on its first declaration. (...)</p>\n</blockquote>\n<p>You can use the <code>std::is_pod</code> type trait to have the compiler <a href=\"http://ideone.com/vCN9q\" rel=\"nofollow noreferrer\">test this</a> for you with <code>static_assert</code>.</p>\n<pre><code>static_assert(std::is_pod&lt;B&gt;::value, \"B should be a POD\");\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-26T16:33:06.553", "Score": "14", "CreationDate": "2011-08-24T02:04:26.323", "ParentId": "7169658", "CommentCount": "5", "OwnerUserId": "46642", "LastEditDate": "2017-05-23T12:23:17.783"}, "7169658": {"ViewCount": "4758", "Body": "<p>Is this struct a POD in C++11?</p>\n<pre><code>struct B\n{\n  int a;\n  B(int aa) : a(aa) {}\n  B() = default;\n};\n</code></pre>\n<p>Note that this question is explicit about <strong>C++11</strong>. I know that this class is not a POD in C++98 nor C++03.</p>\n<p>For an explanation of POD in C++11, see <a href=\"https://stackoverflow.com/questions/6496545/trivial-vs-standard-layout-vs-pod/6496703#6496703\">trivial vs. standard layout vs. POD</a></p>\n<p>(Inspired by this question: <a href=\"https://stackoverflow.com/questions/7169131/is-there-a-compile-time-func-macro-to-determine-if-a-c0x-struct-is-pod\">Is there a compile-time func/macro to determine if a C++0x struct is POD?</a> )</p>\n", "AcceptedAnswerId": "7169675", "Title": "Is this struct POD in C++11?", "CreationDate": "2011-08-24T02:01:44.583", "Id": "7169658", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:31:08.413", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-26T16:33:06.553", "Score": "10", "OwnerUserId": "396551", "Tags": "<c++><pod><c++11>", "AnswerCount": "1"}});