post_cb({"34240214": {"ParentId": "34240136", "CommentCount": "1", "Body": "<p>Well, your default constructor is not <code>constexpr</code>. Therefore, you cannot create a default constructed <code>constexpr</code> object.</p>\n", "OwnerUserId": "1335865", "PostTypeId": "2", "Id": "34240214", "Score": "1", "CreationDate": "2015-12-12T13:12:26.383", "LastActivityDate": "2015-12-12T13:12:26.383"}, "34240136": {"CommentCount": "0", "AcceptedAnswerId": "34240330", "CreationDate": "2015-12-12T13:02:44.737", "LastActivityDate": "2015-12-12T13:25:17.803", "PostTypeId": "1", "ViewCount": "87", "FavoriteCount": "1", "Title": "Trying to understand [expr.const] in C++14", "Id": "34240136", "Score": "0", "Body": "<p>Where in the C++14 Standard, does it prohibit the <strong>declaration</strong> of object <code>a</code> below?</p>\n<pre><code>class A{ int i = 1; public: A():i{1}{} };\n\nint main()\n{\n    constexpr A a{};\n}\n</code></pre>\n<p>See <a href=\"http://coliru.stacked-crooked.com/a/a5f97eb7378bfc56\" rel=\"nofollow\">live example</a></p>\n<p>Note that I highlighted the word <strong>declaration</strong>, because I don't think bullet points (2.7.2) or (2.7.3), in \u00a75.19[expr.const]p2 is an answer for the question. </p>\n", "Tags": "<c++><language-lawyer><c++14><constexpr>", "OwnerUserId": "411165", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34240136_34240330_1": {"section_id": 6185, "quality": 0.9333333333333333, "length": 14}, "so_34240136_34240330_0": {"section_id": 5425, "quality": 0.95, "length": 19}}, "n3337": {"so_34240136_34240330_1": {"section_id": 5946, "quality": 0.7333333333333333, "length": 11}, "so_34240136_34240330_0": {"section_id": 5220, "quality": 0.95, "length": 19}}, "n4659": {"so_34240136_34240330_1": {"section_id": 7687, "quality": 0.9333333333333333, "length": 14}, "so_34240136_34240330_0": {"section_id": 6847, "quality": 0.75, "length": 15}}}, "34240330": {"ParentId": "34240136", "CommentCount": "0", "Body": "<p>[dcl.constexpr]p9:</p>\n<blockquote>\n<p id=\"so_34240136_34240330_0\">A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. Such an object <strong><em>shall have literal type</em></strong> and shall be initialized. If it is initialized by a constructor call, <strong><em>that call shall be a constant expression</em></strong> (5.19). [...]</p>\n</blockquote>\n<p>The error you're getting now is because your type is not a literal type. Your type is not a literal type because it does have a custom constructor, but doesn't have any <code>constexpr</code> constructor. The wording in the error message is rather clear about the exact requirements.</p>\n<p>If you add a <code>constexpr</code> constructor (but not the default constructor), the error message changes:</p>\n<pre><code>class A{ int i = 1; public: A():i{1}{} constexpr A(int){} };\n\nint main()\n{\n    constexpr A a{};\n}\n</code></pre>\n<p>Now the error message becomes</p>\n<pre>\nerror: call to non-constexpr function \u2018A::A()\u2019\n     constexpr A a{};\n</pre>\n<p>This is the second part I bolded: it's not the initialiser that has to be a constant expression. You're right, your initialiser isn't an expression at all. It's the constructor call that must be a constant expression, and although it isn't expressed explicitly in the source code, it is an expression nonetheless. This is covered in [expr.const] rather clearly:</p>\n<blockquote id=\"so_34240136_34240330_1\">\n<ul>\n<li>an invocation of a function other than a <code>constexpr</code> constructor for a literal class, a <code>constexpr</code> function, or an implicit invocation of a trivial destructor (12.4) [...]</li>\n</ul>\n</blockquote>\n<p>to which you already refer in your question.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "34240330", "Score": "3", "CreationDate": "2015-12-12T13:25:17.803", "LastActivityDate": "2015-12-12T13:25:17.803"}});