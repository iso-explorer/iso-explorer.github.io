post_cb({"5834520": {"ViewCount": "310", "Body": "<pre><code>static void increment(long long *n){\n  (*n)++;\n}\n\nstruct test{\n  void (*work_fn)(long long *);\n};\n\nstruct test t1;\n\nt1.work_fn = increment;\n</code></pre>\n<p>How do I actually call the function now? t1.work_fn(&amp;n) ?</p>\n", "AcceptedAnswerId": "5834568", "Title": "C function pointers", "CreationDate": "2011-04-29T16:12:29.280", "LastActivityDate": "2011-04-29T16:33:12.713", "CommentCount": "4", "LastEditDate": "2011-04-29T16:33:12.713", "PostTypeId": "1", "LastEditorUserId": "509233", "Id": "5834520", "Score": "1", "OwnerUserId": "694870", "Tags": "<c++><c><pointers>", "AnswerCount": "3"}, "5834601": {"PostTypeId": "2", "Body": "<p>You can call it as <code>t1.work_fn(&amp;n)</code> or as <code>(*t1.work_fn)(&amp;n)</code>, whichever you prefer.</p>\n<p>Symmetrically, when assigning the pointer you can do either <code>t1.work_fn = increment</code> or <code>t1.work_fn = &amp;increment</code>. Again, it is a matter of personal coding style.</p>\n<p>One can probably argue that for the sake of consistency one should stick to either \"minimalistic\" style</p>\n<pre><code>t1.work_fn = increment;\nt1.work_fn(&amp;n);\n</code></pre>\n<p>or to a \"maximalistic\" style</p>\n<pre><code>t1.work_fn = &amp;increment;\n(*t1.work_fn)(&amp;n);\n</code></pre>\n<p>but not a mix of the two, so that we can have well-defined holy wars between two distinctive camps instead of four. </p>\n<p>P.S. Of course, the \"minimalistic\" style is the only proper one. And one must crack eggs on the pointy end.</p>\n", "LastActivityDate": "2011-04-29T16:29:10.657", "LastEditorUserId": "187690", "Id": "5834601", "CreationDate": "2011-04-29T16:20:26.530", "ParentId": "5834520", "Score": "3", "OwnerUserId": "187690", "CommentCount": "0", "LastEditDate": "2011-04-29T16:29:10.657"}, "5834561": {"PostTypeId": "2", "Body": "<p>Yes, that's how to call it. Function names and variables containing function pointers are essentially the same thing.</p>\n", "LastActivityDate": "2011-04-29T16:16:32.377", "Id": "5834561", "CommentCount": "5", "CreationDate": "2011-04-29T16:16:32.377", "ParentId": "5834520", "Score": "0", "OwnerUserId": "391531"}, "bq_ids": {"n4140": {"so_5834520_5834568_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 6064}}, "n3337": {"so_5834520_5834568_1": {"length": 10, "quality": 0.5263157894736842, "section_id": 3206}, "so_5834520_5834568_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 5832}}}, "5834568": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_5834520_5834568_0\">How do I actually call the function now? <code>t1.work_fn(&amp;n)</code> ?</p>\n</blockquote>\n<p>That'll work just fine.  </p>\n<p>Function pointers don't need to be explicitly dereferenced. This is because even when calling a function normally (using the actual name of the function), you're really calling it through the pointer to the function.  C99 6.5.22 \"Function calls\" says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_5834520_5834568_1\">The expression that denotes the called function (footnote 77) <strong>shall have type pointer to function</strong> returning void or returning an object type other than an array type</p>\n</blockquote>\n<p>Footnote 77:</p>\n<blockquote>\n<p id=\"so_5834520_5834568_2\">Most often, this is the result of converting an identifier that is a function designator.</p>\n</blockquote>\n<p>Note that you still <em>can</em> dereference the function pointer (or a normal function name - though I think you'd cause much confusion doing so) to call a function because C99 6.5.3.2/4 \"Address and indirection operators\" says:</p>\n<blockquote>\n<p id=\"so_5834520_5834568_3\">The unary * operator denotes indirection. If the operand points to a function, the result is a function designator</p>\n</blockquote>\n<p>So all of these will end up doing the same thing (though the compiler might not be able to optimize the calls-through <code>t1.work_fn</code> as well):</p>\n<pre><code>t1.work_fn(&amp;n);\n(*t1.work_fn)(&amp;n);\n\nincrement(&amp;n);\n(*increment)(&amp;n);\n</code></pre>\n", "LastActivityDate": "2011-04-29T16:27:37.410", "LastEditorUserId": "12711", "Id": "5834568", "CreationDate": "2011-04-29T16:17:08.967", "ParentId": "5834520", "Score": "3", "OwnerUserId": "12711", "CommentCount": "2", "LastEditDate": "2011-04-29T16:27:37.410"}});