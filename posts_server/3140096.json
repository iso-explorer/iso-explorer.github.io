post_cb({"3140096": {"CommentCount": "0", "ViewCount": "1887", "CreationDate": "2010-06-29T11:16:01.727", "LastActivityDate": "2010-06-29T11:54:35.083", "Title": "Is the padding between class members of the same type always the same?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "3140096", "Score": "2", "Body": "<p>The following class contains some members of the same type:</p>\n<pre><code>template &lt;typename T&gt;\nclass MyClass\n{\n    T m0;\n    T m1;\n    T m2;\n    T m3;\n    T m4;\n    //...\n};\n</code></pre>\n<p>The members are all declared without an intervening access-specifier and thus are allocated that later members have higher addresses (ISO/IEC 14882: 9.2.12). The same paragraph says:</p>\n<blockquote>\n<p id=\"so_3140096_3140096_0\">Implementation alignment requirements\n  might cause two adjacent members not\n  to be allocated immediately after each\n  other; so might requirements for space for managing virtual functions (10.3) and virtual base classes (10.1).</p>\n</blockquote>\n<p>Now let's assume that MyClass has no virtual functions and no virtual base classes. Is the following always true?</p>\n<pre><code>//inside a member function of MyClass\n\n(char*)&amp;m0 == (char*)&amp;m0 + ((char*)&amp;m1-(char*)&amp;m0) * 0\n(char*)&amp;m1 == (char*)&amp;m0 + ((char*)&amp;m1-(char*)&amp;m0) * 1\n(char*)&amp;m2 == (char*)&amp;m0 + ((char*)&amp;m1-(char*)&amp;m0) * 2\n(char*)&amp;m3 == (char*)&amp;m0 + ((char*)&amp;m1-(char*)&amp;m0) * 3\n(char*)&amp;m4 == (char*)&amp;m0 + ((char*)&amp;m1-(char*)&amp;m0) * 4\n</code></pre>\n<p>Or is the compiler allowed to use arbitrary more padding than required (for whatever reasons...) ? For example: If sizeof(T)==4 and alignof(T)==8 the compiler will use 4 padding-bytes between the members. Would it be valid to use 12 padding-bytes only between m2 and m3?</p>\n<p>What is the case when MyClass has virtual functions or virtual base classes? Is the compiler really allowed to insert information related to MyClass (like a vtable-ptr) between arbitrary data members? Or is the sentence from the standard above more related to virtual functions and virtual base classes of T? Because if it's valid to store information related to T outside T it could also have the following meaning:</p>\n<pre><code>template &lt;typename T&gt;\nclass MyClass\n{\n    T m0;\n    //space to manage virtual functions and base classes of m0\n    //padding\n    T m1;\n    //space to manage virtual functions and base classes of m1\n    //padding\n    T m2;\n    //space to manage virtual functions and base classes of m2\n    //...\n};\n</code></pre>\n<p>What again might give a regular pattern.</p>\n", "Tags": "<c++><class><struct><padding>", "OwnerUserId": "287715", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_3140096_3140096_0": {"section_id": 5873, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_3140096_3140096_0": {"section_id": 5644, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_3140096_3140096_0": {"section_id": 7356, "quality": 0.9166666666666666, "length": 22}}}, "3140357": {"ParentId": "3140096", "CommentCount": "5", "Body": "<p>No. There's no rule mandating it, therefore compilers may insert padding anywhere. \"Alignment requirements might ...\" is merely an example, and not a restriction on possible causes.</p>\n<p>It would be a different matter if you had a <code>T m[5]</code> member, in which case <code>&amp;(this-&gt;m[1]) - &amp;(this-&gt;m[0]) == 1</code>.</p>\n<p>For the same reason, \"Is the compiler really allowed to insert information related to MyClass (like a vtable-ptr) between arbitrary data members?\" must be answered positively, because there is no rule that forbids it. It couldn't insert it in the middle of a subobject (whether that's a <code>T</code> or a <code>T[5]</code>), but between subobjects is fine.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "3140357", "Score": "2", "CreationDate": "2010-06-29T11:54:35.083", "LastActivityDate": "2010-06-29T11:54:35.083"}});