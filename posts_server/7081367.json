post_cb({"7081367": {"CommentCount": "0", "ViewCount": "1583", "CreationDate": "2011-08-16T16:14:02.473", "LastActivityDate": "2011-08-16T16:45:14.057", "Title": "Printing universal characters", "AcceptedAnswerId": "7081484", "PostTypeId": "1", "Id": "7081367", "Score": "3", "Body": "<p>Can anyone explain why universal character literals (eg \"\\u00b1\") are being encoded into char strings as UTF-8? Why does the following print the plus/minus symbol?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nint main()\n{\n  std::cout &lt;&lt; \"\\u00b1\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>Is this related to my current locale?</p>\n", "Tags": "<c++>", "OwnerUserId": "320608", "AnswerCount": "4"}, "7081402": {"ParentId": "7081367", "CommentCount": "0", "Body": "<p><code>\\u00b1</code> is the <code>\u00b1</code> symbol as that is the correct unicode representation regardless of locale.</p>\n<p>Your code at <a href=\"http://ideone.com/6suGj\" rel=\"nofollow\">ideone, see here</a>.</p>\n", "Id": "7081402", "PostTypeId": "2", "OwnerDisplayName": "user195488", "Score": "1", "CreationDate": "2011-08-16T16:16:31.060", "LastActivityDate": "2011-08-16T16:16:31.060"}, "7081415": {"ParentId": "7081367", "CommentCount": "4", "Body": "<p>C++ Character Sets</p>\n<p>With the standardization of C++, it's useful to review some of the mechanisms included in the language for dealing with character sets. This might seem like a very simple issue, but there are some complexities to contend with.</p>\n<p>The first idea to consider is the notion of a \"basic source character set\" in C++. This is defined to be:</p>\n<pre><code>    all ASCII printing characters 041 - 0177, save for @ $ ` DEL\n\n    space\n\n    horizontal tab\n\n    vertical tab\n\n    form feed\n\n    newline\n</code></pre>\n<p>or 96 characters in all. These are the characters used to compose a C++ source program.</p>\n<p>Some national character sets, such as the European ISO-646 one, use some of these character positions for other letters. The ASCII characters so affected are:</p>\n<pre><code>    [ ] { } | \\\n</code></pre>\n<p>To get around this problem, C++ defines trigraph sequences that can be used to represent these characters:</p>\n<pre><code>    [       ??(\n\n    ]       ??)\n\n    {       ??&lt;\n\n    }       ??&gt;\n\n    |       ??!\n\n    \\       ??/\n\n    #       ??=\n\n    ^       ??'\n\n    ~       ??-\n</code></pre>\n<p>Trigraph sequences are mapped to the corresponding basic source character early in the compilation process.</p>\n<p>C++ also has the notion of \"alternative tokens\", that can be used to replace tokens with others. The list of tokens and their alternatives is this:</p>\n<pre><code>    {       &lt;%\n\n    }       %&gt;\n\n    [       &lt;:\n\n    ]       :&gt;\n\n    #       %:\n\n    ##      %:%:\n\n    &amp;&amp;      and\n\n    |       bitor\n\n    ||      or\n\n    ^       xor\n\n    ~       compl\n\n    &amp;       bitand\n\n    &amp;=      and_eq\n\n    |=      or_eq\n\n    ^=      xor_eq\n\n    !       not\n\n    !=      not_eq\n</code></pre>\n<p>Another idea is the \"basic execution character set\". This includes all of the basic source character set, plus control characters for alert, backspace, carriage return, and null. The \"execution character set\" is the basic execution character set plus additional implementation-defined characters. The idea is that a source character set is used to define a C++ program itself, while an execution character set is used when a C++ application is executing.</p>\n<p>Given this notion, it's possible to manipulate additional characters in a running program, for example characters from Cyrillic or Greek. Character constants can be expressed using any of:</p>\n<pre><code>    \\137            octal\n\n    \\xabcd          hexadecimal\n\n    \\u12345678      universal character name (ISO/IEC 10646)\n\n    \\u1234          -&gt; \\u00001234\n</code></pre>\n<p>This notation uses the source character set to define execution set characters. Universal character names can be used in identifiers (if letters) and in character literals:</p>\n<pre><code>    '\\u1234'\n\n    L'\\u2345'\n</code></pre>\n<p>The above features may not yet exist in your local C++ compiler. They are important to consider when developing internationalized applications. </p>\n", "OwnerUserId": "2095507", "PostTypeId": "2", "Id": "7081415", "Score": "0", "CreationDate": "2011-08-16T16:17:30.923", "LastActivityDate": "2011-08-16T16:17:30.923"}, "bq_ids": {"n4140": {"so_7081367_7081484_3": {"section_id": 5315, "quality": 0.7446808510638298, "length": 35}, "so_7081367_7081484_2": {"section_id": 5316, "quality": 0.9, "length": 9}, "so_7081367_7081484_1": {"section_id": 5347, "quality": 0.92, "length": 46}}, "n3337": {"so_7081367_7081484_3": {"section_id": 5112, "quality": 0.7446808510638298, "length": 35}, "so_7081367_7081484_1": {"section_id": 5144, "quality": 0.92, "length": 46}, "so_7081367_7081484_2": {"section_id": 5113, "quality": 0.9, "length": 9}}, "n4659": {"so_7081367_7081484_3": {"section_id": 6739, "quality": 0.7446808510638298, "length": 35}, "so_7081367_7081484_2": {"section_id": 6740, "quality": 0.8, "length": 8}, "so_7081367_7081484_1": {"section_id": 6772, "quality": 0.92, "length": 46}}}, "7081484": {"ParentId": "7081367", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_7081367_7081484_0\">2.13.2. [...]</p>\n<p id=\"so_7081367_7081484_1\">5/ A universal-character-name is translated to the encoding, in\n  the execution character set, of the character named. If there is no\n  such encoding, the universal-character-name is translated to an\n  implementation defined encoding. [<em>Note</em>: in translation phase 1, a\n  universal-character-name is introduced whenever an actual extended\n  character is encountered in the source text. Therefore, all extended\n  characters are described in terms of universal-character-names.\n  However, the actual compiler implementation may use its own native\n  character set, so long as the same results are obtained. ]</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_7081367_7081484_2\">2.2. [...] The values of the members of the execution character sets\n  are implementation-defined, and any additional members are\n  locale-specific.</p>\n</blockquote>\n<p>In short, the answer to your question is in your compiler documentation. However:</p>\n<blockquote>\n<p id=\"so_7081367_7081484_3\">2.2. 2/ The character designated by the universal-character-name\n  \\UNNNNNNNN is that character whose character short name in ISO/IEC\n  10646 is NNNNNNNN; the character designated by the\n  universal-character-name \\uNNNN is that character whose character\n  short name in ISO/IEC 10646 is 0000NNNN. If the hexadecimal value for\n  a universal character name is less than 0x20 or in the range 0x7F-0x9F\n  (inclusive), or if the universal character name designates a character\n  in the basic source character set, then the program is illformed.</p>\n</blockquote>\n<p>so you are guaranteed that the character you name is translated into an implementation defined encoding, possibly locale specific.</p>\n", "OwnerUserId": "373025", "LastEditorUserId": "373025", "LastEditDate": "2011-08-16T16:34:24.873", "Id": "7081484", "Score": "4", "CreationDate": "2011-08-16T16:23:24.870", "LastActivityDate": "2011-08-16T16:34:24.873"}, "7081767": {"ParentId": "7081367", "CommentCount": "1", "Body": "<p>String literals e.g. <code>\"abcdef\"</code> are simple byte arrays (of type <code>const char[]</code>). Compiler encodes non-ASCII characters in them into something that is implementation-defined. Rumors say Visual C++ uses current Windows' ANSI codepage, and GCC uses UTF-8, so you're probably on GCC :)</p>\n<p>So, <code>\\uABCD</code> is interpreted by compiler at compile time and converted into the corresponding  value in that encoding. I.e. it can put one or more bytes into the byte array:</p>\n<pre><code>sizeof(\"\\uFE58z\") == 3 // visual C++ 2010\nsizeof(\"\\uFE58z\") == 5 // gcc 4.4 mingw\n</code></pre>\n<p>And yet, how <code>cout</code> will print the byte array, depends on locale settings. You can change stream's locale via <code>std::ios_base::imbue()</code> call.</p>\n", "OwnerUserId": "544621", "PostTypeId": "2", "Id": "7081767", "Score": "1", "CreationDate": "2011-08-16T16:45:14.057", "LastActivityDate": "2011-08-16T16:45:14.057"}});