post_cb({"bq_ids": {"n4140": {"so_27317838_27317838_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 568}, "so_27317838_27317838_1": {"length": 6, "quality": 1.0, "section_id": 5905}}, "n3337": {"so_27317838_27317838_1": {"length": 6, "quality": 1.0, "section_id": 5677}, "so_27317838_27317838_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 559}}, "n4659": {"so_27317838_27317838_1": {"length": 6, "quality": 1.0, "section_id": 7387}, "so_27317838_27317838_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 591}}}, "27318100": {"Id": "27318100", "PostTypeId": "2", "Body": "<p>It's used to make overload resolution easier to understand.</p>\n<pre><code>struct S {\n  void f(int);\n  static void f(double);\n};\n\nint main() {\n  S::f(1);\n}\n</code></pre>\n<p>Here, <code>s::f(1);</code> is simply a hard error, because <code>f(int)</code> is a better match than <code>f(double)</code>, even though the <code>f(int)</code> overload causes a hard error further on.</p>\n<p>If the rules were any other way, consider what would happen for this:</p>\n<pre><code>template &lt;typename T&gt;\nstruct U : S {\n  void u() {\n    S::f(1);\n  }\n};\n\ntemplate &lt;typename T&gt;\nstruct V : U&lt;T&gt; {\n  void v() {\n    S::f(1);\n  }\n};\n</code></pre>\n<p>Here, <code>U::u</code> is clearly valid and calls the member function. <code>V&lt;T&gt;</code>, however, has a type-dependent base class, so is not known at template definition time to derive from <code>S</code>. Having <code>S::f</code> resolve to the <code>f(double)</code> overload here would be highly confusing.</p>\n", "LastActivityDate": "2014-12-05T14:29:34.090", "CommentCount": "0", "CreationDate": "2014-12-05T14:29:34.090", "ParentId": "27317838", "Score": "3", "OwnerUserId": "743382"}, "27318093": {"Id": "27318093", "PostTypeId": "2", "Body": "<p>Below is description from standard which implies that implicit object parameter is used for overloading purpose.</p>\n<p>Before overload resolution begins, the functions selected by name lookup and template argument deduction are combined to form the set of candidate functions (the exact criteria depend on the context in which overload resolution takes place).</p>\n<p>If any candidate function is a member function (static or non-static), but not a constructor, it is treated as if it has an extra parameter (implicit object parameter) which represents the object for which they are called and appears before the first of the actual parameters.</p>\n<p>Similarly, the object on which a member function is being called, is prepended to the argument list as the implied object argument</p>\n<p>For member functions of class X, the type of the implicit object parameter is affected by cv-qualifications and ref-qualifications of the member function.</p>\n<p>For the static member functions, the implicit object parameter is considered to match any object: <strong>its type is not examined and no conversion sequence is attempted for it</strong>. </p>\n", "LastEditorUserId": "4047092", "LastActivityDate": "2014-12-05T14:35:40.080", "Score": "0", "CreationDate": "2014-12-05T14:29:26.963", "ParentId": "27317838", "CommentCount": "0", "OwnerUserId": "4047092", "LastEditDate": "2014-12-05T14:35:40.080"}, "27317838": {"ViewCount": "327", "Body": "<p>In \u00a713.3.1/4 (N3337) you'll find the following:</p>\n<blockquote>\n<p id=\"so_27317838_27317838_0\">For static member functions, the implicit object parameter is\n  considered to match any object (since if the function is selected, the\n  object is discarded).</p>\n</blockquote>\n<p>\u00a79.4.1/2 has this assertion:</p>\n<blockquote>\n<p id=\"so_27317838_27317838_1\">A static member function does not have a this pointer.</p>\n</blockquote>\n<p>Then, what is the purpose of the implicit object parameter for a static member function?</p>\n", "Title": "Why do static member functions need to have an implicit object parameter according to \u00a713.3.1/4?", "CreationDate": "2014-12-05T14:15:38.023", "LastActivityDate": "2014-12-05T14:35:40.080", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "Id": "27317838", "Score": "6", "OwnerUserId": "3694387", "Tags": "<c++><c++11><overloading><language-lawyer>", "AnswerCount": "2"}});