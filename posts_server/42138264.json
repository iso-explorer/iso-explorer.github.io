post_cb({"bq_ids": {"n4140": {"so_42138264_42138264_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5313}}, "n3337": {"so_42138264_42138264_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5110}}, "n4659": {"so_42138264_42138264_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6737}}}, "42138311": {"Id": "42138311", "PostTypeId": "2", "Body": "<p>No, when the definition says \"new-line character\" it means an <em>actual</em> new-line, not the special two-character sequence (backslash and <code>n</code>) that can be interpreted by the compiler as a new-line in special circumstances (inside constant string or character literals).</p>\n", "LastActivityDate": "2017-02-09T13:42:39.200", "CommentCount": "6", "CreationDate": "2017-02-09T13:42:39.200", "ParentId": "42138264", "Score": "5", "OwnerUserId": "440558"}, "42147794": {"Id": "42147794", "PostTypeId": "2", "Body": "<p>The C++ Standard does say that the new-line characters are introduced for end-of-line indicators in <a href=\"http://eel.is/c++draft/lex.phases#1.1\" rel=\"nofollow noreferrer\">translation phase 1</a>, the source file is decomposed into preprocessing tokens (A <em>character-literal</em> is a preprocessing token) and sequences of white-space characters (including comments) in <a href=\"http://eel.is/c++draft/lex.phases#1.3\" rel=\"nofollow noreferrer\">translation phase 3</a>, and each escape sequence (<code>\\n</code> is a escape sequence) is converted to the corresponding member of the execution character set in <a href=\"http://eel.is/c++draft/lex.phases#1.5\" rel=\"nofollow noreferrer\">translation phase 5</a>.</p>\n<p>So it is clearly defined that when forming a <em>character-literal</em>, the character sequence <code>\\n</code> is not turned into a new-line character, and the end-of-line indicator (which, as well as all the details of translation phase 1, is implementation-defined, but it is generally agreed that the end-of-line indicator is LF on Unix and Unix-like systems, CR+LF on Windows) has already been turned into the new-line character.</p>\n", "LastActivityDate": "2017-02-09T22:07:24.480", "CommentCount": "1", "CreationDate": "2017-02-09T22:07:24.480", "ParentId": "42138264", "Score": "1", "OwnerUserId": "4672588"}, "42138264": {"ViewCount": "94", "Body": "<p><a href=\"http://eel.is/c++draft/lex.literal#lex.ccon\" rel=\"nofollow noreferrer\">[lex.ccon]</a> contains the following definition for <em>c-char</em>:</p>\n<blockquote>\n<p id=\"so_42138264_42138264_0\"><em>c-char</em>:<br>\n    \u00a0\u00a0\u00a0\u00a0any member of the source character\n  set<br>\n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except the\n  single-quote <code>\u2019</code>, backslash <code>\\</code>, or new-line character<br>\n  \u00a0\u00a0\u00a0\u00a0<em>escape-sequence</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>universal-character-name</em></br></br></br></br></p>\n</blockquote>\n<p>Given that the <a href=\"https://stackoverflow.com/q/18379848/1042389\">new-line character in <code>C</code> is the escape-sequence <code>\\n</code></a>, isn't there a contradiction in the definition above?</p>\n<p>PS: note that the C++ Standard doesn't really define what is a new-line character.</p>\n", "AcceptedAnswerId": "42147794", "Title": "Possible contradiction in the definition of c-char in [lex.ccon]", "CreationDate": "2017-02-09T13:40:06.037", "Id": "42138264", "CommentCount": "1", "LastEditDate": "2017-05-23T12:17:04.057", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-02-12T08:22:31.900", "Score": "3", "OwnerUserId": "4463557", "Tags": "<c++><newline><language-lawyer>", "AnswerCount": "2"}});