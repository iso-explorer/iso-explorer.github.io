post_cb({"17358071": {"ParentId": "17357898", "CommentCount": "0", "Body": "<p>Default promotions will happen before the function is called, in the calling context.</p>\n<p>If you're really asking about the circumstances under which default promotions are carried out, that's covered in the excerpt, though it's such a tiny piece that it's easy to miss: \"When there is no parameter for a given argument...\". In other words, it's essentially identical to the situation in C, with the exception that a C-style function declaration that doesn't specify parameter types simply doesn't exist in C++. Therefore, the only time you can have an argument without a parameter specifying its type is when a function has an explicit ellipsis, such as <code>printf</code>: <code>int printf(char const *format, ...);</code>.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "17358071", "Score": "1", "CreationDate": "2013-06-28T05:53:29.397", "LastActivityDate": "2013-06-28T05:53:29.397"}, "17357898": {"CommentCount": "0", "ViewCount": "647", "PostTypeId": "1", "LastEditorUserId": "2336707", "CreationDate": "2013-06-28T05:38:29.250", "LastActivityDate": "2013-06-28T06:06:13.833", "Title": "When will default argument promotions happen?", "AcceptedAnswerId": "17358071", "LastEditDate": "2013-06-28T05:44:23.023", "Id": "17357898", "Score": "1", "Body": "<p>In C language, compiler perform <strong>default argument promotion</strong> when the function called does not have a prototype.</p>\n<p>But how about C++? When will default argument promotions happen?</p>\n<p>In C++11 standard 5.2.2/7:  </p>\n<blockquote>\n<p id=\"so_17357898_17357898_0\">When there is no parameter for a given argument, the argument is\n  passed in such a way that the receiving function can obtain the value\n  of the argument by invoking va_arg (18.10). [ Note: This paragraph\n  does not apply to arguments passed to a function parameter pack.\n  Function parameter packs are expanded during template instantiation\n  (14.5.3), thus each such argument has a corresponding parameter when a\n  function template specialization is actually called. \u2014end note ] The\n  lvalue-to-rvalue (4.1), array-to-pointer (4.2), and\n  function-to-pointer (4.3) standard conversions are performed on the\n  argument expression. An argument that has (possibly cv-qualified) type\n  std::nullptr_t is converted to type void* (4.10). After these\n  conversions, if the argument does not have arithmetic, enumeration,\n  pointer, pointer to member, or class type, the program is ill-formed.\n  Passing a potentially-evaluated argument of class type (Clause 9)\n  having a nontrivial copy constructor, a non-trivial move constructor,\n  or a non-trivial destructor, with no corresponding parameter, is\n  conditionally-supported with implementation-defined semantics. If the\n  argument has integral or enumeration type that is subject to the\n  integral promotions (4.5), or a floating point type that is subject to\n  the floating point promotion (4.6), the value of the argument is\n  converted to the promoted type before the call. These promotions are\n  referred to as the default argument promotions.</p>\n</blockquote>\n<p>This paragraph still does not specify when will a default argument promotion happen. This paragraph may talk too much without a clear logic. I strove to outline the logic but failed. I am not familiar with the <strong>invoking va_arg</strong>.</p>\n<p>Hope you help me.</p>\n", "Tags": "<c++><function-calls><promotions>", "OwnerUserId": "2336707", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17357898_17357898_0": {"section_id": 5994, "quality": 0.9133858267716536, "length": 116}}, "n3337": {"so_17357898_17357898_0": {"section_id": 5762, "quality": 0.9133858267716536, "length": 116}}, "n4659": {"so_17357898_17357898_0": {"section_id": 7496, "quality": 0.8503937007874016, "length": 108}}}, "17358106": {"ParentId": "17357898", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the very paragraph you quote in your question: <strong>\"the value of the argument is converted to the promoted type before the call\"</strong>.</p>\n<p>You say of C \"default argument promotion when the function called does not have a prototype\" - but remember that scenario doesn't exist in C++ - you can not call a function for which no declaration or definition has been seen.</p>\n<p>The mention of \"invoking va_arg\" means that some of the argument promotions are applied when calling a function that will then access the values using the <code>va_arg</code> functions (see <a href=\"http://linux.die.net/man/3/va_arg\" rel=\"nofollow\">http://linux.die.net/man/3/va_arg</a>).  Think of it like this: one function call might pass the value <code>int(3)</code>, another <code>int(7777)</code>, yet another <code>char(7)</code> - how should the called function know what to expect?  It will probably promote all values for that parameter to some largest-supported-integral type such as an <code>int</code> or <code>long</code>, then when <code>va_arg</code> is used within the function it will convert from <code>int</code> or <code>long</code> to whatever integral type the <code>va_arg</code> call specifies.  This does mean, for example, that <code>int(7777)</code> value might be passed where only a <code>char</code> is expected and the value may be truncated to 8 bits without warning, but that's generally better than having the program crash because the number of bytes of data passed didn't match the number consumed, or some other weird side effect.</p>\n", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastEditDate": "2013-06-28T06:06:13.833", "Id": "17358106", "Score": "1", "CreationDate": "2013-06-28T05:56:06.113", "LastActivityDate": "2013-06-28T06:06:13.833"}});