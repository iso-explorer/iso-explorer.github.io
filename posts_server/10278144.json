post_cb({"10278144": {"CommentCount": "4", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "806299", "CreationDate": "2012-04-23T09:43:11.880", "LastActivityDate": "2012-04-23T10:12:52.507", "Title": "Why does compiler not throw compilation error?", "AcceptedAnswerId": "10278594", "LastEditDate": "2012-04-23T10:03:59.077", "Id": "10278144", "Score": "1", "Body": "<p>Why does compiler allow this?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nvoid func(T t)\n{\n    cout&lt;&lt;\"The value is :\"&lt;&lt;t&lt;&lt;\"\\n\";\n}\n\ntemplate&lt;&gt;\nvoid func&lt;int&gt;(int d)    //Template Specialization\n{\n    cout&lt;&lt;\"Template function\\n\";\n}\n\nvoid func(int d)        //Non-template function with same name &amp; signature\n{\n    cout&lt;&lt;\"Non-template function\\n\";\n}\n\nint main()\n{\n    func(4);\n    func(4.67);\n    func(\"TENE\");\n}\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "806299", "AnswerCount": "2"}, "10278259": {"ParentId": "10278144", "CommentCount": "1", "Body": "<p>Because this code is perfectly legal. See <a href=\"http://www.gotw.ca/publications/mill17.htm\" rel=\"nofollow\">this article</a> for resolution rules.</p>\n", "OwnerUserId": "113662", "PostTypeId": "2", "Id": "10278259", "Score": "3", "CreationDate": "2012-04-23T09:51:39.580", "LastActivityDate": "2012-04-23T09:51:39.580"}, "bq_ids": {"n4140": {"so_10278144_10278594_3": {"section_id": 603, "quality": 0.9333333333333333, "length": 14}, "so_10278144_10278594_1": {"section_id": 603, "quality": 0.75, "length": 6}, "so_10278144_10278594_2": {"section_id": 111, "quality": 1.0, "length": 5}, "so_10278144_10278594_0": {"section_id": 603, "quality": 0.85, "length": 17}}, "n3337": {"so_10278144_10278594_3": {"section_id": 593, "quality": 0.9333333333333333, "length": 14}, "so_10278144_10278594_1": {"section_id": 593, "quality": 0.75, "length": 6}, "so_10278144_10278594_2": {"section_id": 106, "quality": 1.0, "length": 5}, "so_10278144_10278594_0": {"section_id": 593, "quality": 0.85, "length": 17}}, "n4659": {"so_10278144_10278594_3": {"section_id": 629, "quality": 0.9333333333333333, "length": 14}, "so_10278144_10278594_1": {"section_id": 629, "quality": 0.75, "length": 6}, "so_10278144_10278594_2": {"section_id": 115, "quality": 1.0, "length": 5}, "so_10278144_10278594_0": {"section_id": 629, "quality": 0.85, "length": 17}}}, "10278594": {"ParentId": "10278144", "CommentCount": "0", "Body": "<p>The answer to the question lies in section 13.3.3</p>\n<blockquote>\n<p id=\"so_10278144_10278594_0\">Given these definitions, a viable function F1 is defined to be a <em>better</em> function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n<p id=\"so_10278144_10278594_1\">\u2014 for some argument j, ICSj(F1) is a better conversion sequence than ICSj(F2), or, if not that,</p>\n<p id=\"so_10278144_10278594_2\">\u2014 F1 is a non-template function and F2 is a function template specialization, or, if not that,</p>\n<p id=\"so_10278144_10278594_3\">\u2014 F1 and F2 are function template specializations, and the function template for F1 is more specialized than the template for F2 according to the partial ordering rules described in 14.5.5.2, or, if not that, ...</p>\n</blockquote>\n<p>So amongst the three choices (non-templated <code>func</code>, specialization of <code>func&lt;int&gt;</code>, and the generic template <code>func&lt;typename T&gt;</code>, the non-template version of <code>func</code> is the best. Since there is a perfect match here, there is no reason for the compiler to even look to the templated versions of the function.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "10278594", "Score": "3", "CreationDate": "2012-04-23T10:12:52.507", "LastActivityDate": "2012-04-23T10:12:52.507"}});