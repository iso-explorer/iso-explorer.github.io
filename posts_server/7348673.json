post_cb({"7348673": {"CommentCount": "7", "ViewCount": "432", "PostTypeId": "1", "LastEditorUserId": "312896", "CreationDate": "2011-09-08T13:17:46.817", "LastActivityDate": "2011-09-08T17:21:38.387", "Title": "std::move realisation", "AcceptedAnswerId": "7352048", "LastEditDate": "2011-09-08T13:55:44.083", "Id": "7348673", "Score": "0", "Body": "<p>I got next snippet from <a href=\"http://blogs.msdn.com/b/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx\" rel=\"nofollow\">microsoft</a></p>\n<pre><code>template &lt;typename T&gt; struct RemoveReference {\n     typedef T type;\n};\n\ntemplate &lt;typename T&gt; struct RemoveReference&lt;T&amp;&gt; {\n     typedef T type;\n};\n\ntemplate &lt;typename T&gt; struct RemoveReference&lt;T&amp;&amp;&gt; {\n     typedef T type;\n};\n\ntemplate &lt;typename T&gt; typename RemoveReference&lt;T&gt;::type&amp;&amp; Move(T&amp;&amp; t) {\n    return t;\n}\n</code></pre>\n<p>...</p>\n<pre><code>remote_integer x = frumple(5);\nremote_integer&amp;&amp; x1 = Move(x);\n</code></pre>\n<p>and i get an error \"error C2440: 'return' : cannot convert from 'remote_integer' to 'remote_integer &amp;&amp;'\"</p>\n<p>something changed in compilers? With std::move all goes right.</p>\n", "Tags": "<c++><std><c++11><move-constructor>", "OwnerUserId": "312896", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_7348673_7352048_0": {"section_id": 5940, "quality": 1.0, "length": 21}}, "n3337": {"so_7348673_7352048_0": {"section_id": 5711, "quality": 1.0, "length": 21}}, "n4659": {"so_7348673_7352048_0": {"section_id": 7424, "quality": 1.0, "length": 21}}}, "7352048": {"ParentId": "7348673", "CommentCount": "0", "Body": "<p>The reason your <code>Move</code> doesn't work, is because <code>t</code> is always <strong>lvalue</strong> (even when <code>T&amp;&amp;</code> resolves to, say, <code>int&amp;&amp;</code>). Even though it might seem weird, named rvalue references are indeed lvalues.</p>\n<p>When returning from your <code>Move</code>, you attempt to implicitly bind lvalue to rvalue reference, which is forbidden by standard (\u00a78.5.3). As noted in the comments, you have to cast <code>t</code> explicitly to rvalue reference.</p>\n<p>Relevant parts of standard are \u00a75/4 and \u00a75/5, but I'm going to quote note \u00a75/6, which sums this nicely:</p>\n<blockquote>\n<p id=\"so_7348673_7352048_0\">In general, the effect of this rule is that named rvalue references\n  are treated as lvalues and unnamed rvalue references to objects are\n  treated as xvalues; rvalue references to functions are treated as\n  lvalues whether named or not.</p>\n</blockquote>\n<p>Correct implementation is indeed:</p>\n<pre><code>template &lt;typename T&gt;\ntypename std::remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; t)\n{\n  return static_cast&lt;typename std::remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);\n}\n</code></pre>\n<hr>\n<p>As far as I remember, this code used to be valid in earlier drafts. But since the rules have changed, you have to provide explicit cast now (same applies to std::forward).</p>\n</hr>", "OwnerUserId": "700253", "PostTypeId": "2", "Id": "7352048", "Score": "3", "CreationDate": "2011-09-08T17:21:38.387", "LastActivityDate": "2011-09-08T17:21:38.387"}});