post_cb({"22071134": {"ParentId": "22071087", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-02-27T14:15:09.610", "Score": "11", "LastEditorUserId": "1708801", "LastEditDate": "2014-02-27T14:44:10.473", "Id": "22071134", "OwnerUserId": "1708801", "Body": "<p>No this is not valid, it is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> <code>5.3.5</code> <em>Delete</em> says (<em>emphasis mine going forward</em>):</p>\n<blockquote>\n<p id=\"so_22071087_22071134_0\">The operand <strong>shall be of pointer to object type or of class type</strong>. If of class type, the operand is contextually implicitly converted (Clause 4) to a pointer to object type. The delete-expression\u2019s result has type void.<sup>78</sup></p>\n</blockquote>\n<p>and footnote 78 says:</p>\n<blockquote>\n<p id=\"so_22071087_22071134_1\">This <strong>implies that an object cannot be deleted using a pointer of type void*</strong> because void is not an object type.</p>\n</blockquote>\n<p>On the other hand <a href=\"http://en.cppreference.com/w/cpp/memory/c/free\" rel=\"nofollow\">free</a> does allow you to use a <em>void</em>* but the allocation had to have been via <code>malloc</code>, <code>calloc</code> or <code>realloc</code>.</p>\n", "LastActivityDate": "2014-02-27T14:44:10.473"}, "22071087": {"CommentCount": "1", "ViewCount": "430", "PostTypeId": "1", "ClosedDate": "2014-02-27T14:26:29.010", "LastEditorUserId": "4370109", "CreationDate": "2014-02-27T14:12:52.470", "LastActivityDate": "2015-08-29T16:31:47.757", "Title": "Free the memory using delete[] operator on void pointer", "LastEditDate": "2015-08-29T16:31:47.757", "Id": "22071087", "Score": "2", "Body": "<p>Can we free the array of primitive data types by using delete[] operator on void*.\nEx.</p>\n<pre><code>char* charPtr = new char[100]\nvoid* voidPtr = (void*)charPtr;\ndelete[] voidPtr;\n</code></pre>\n<p>Or it can be freed by using delete operator like</p>\n<pre><code>delete voidPtr\n</code></pre>\n<p>I do not expect it to call the destructor. I only expect it to free the memory whichever is allocated by new operator.</p>\n", "Tags": "<c++><delete-operator>", "OwnerUserId": "2201731", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22071087_22071134_1": {"section_id": 6105, "quality": 0.9230769230769231, "length": 12}, "so_22071087_22071134_0": {"section_id": 6105, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_22071087_22071134_1": {"section_id": 5871, "quality": 0.9230769230769231, "length": 12}, "so_22071087_22071134_0": {"section_id": 5890, "quality": 0.5454545454545454, "length": 12}}, "n4659": {"so_22071087_22071134_1": {"section_id": 7602, "quality": 0.9230769230769231, "length": 12}, "so_22071087_22071134_0": {"section_id": 7602, "quality": 0.8636363636363636, "length": 19}}}});