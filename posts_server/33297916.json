post_cb({"bq_ids": {"n4140": {"so_33297916_33298199_0": {"length": 10, "quality": 1.0, "section_id": 3325}, "so_33297916_33298199_2": {"length": 17, "quality": 0.7083333333333334, "section_id": 3298}, "so_33297916_33298199_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3298}}, "n3337": {"so_33297916_33298199_0": {"length": 10, "quality": 1.0, "section_id": 3195}, "so_33297916_33298199_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 3168}, "so_33297916_33298199_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3168}}, "n4659": {"so_33297916_33298199_0": {"length": 10, "quality": 1.0, "section_id": 4091}, "so_33297916_33298199_1": {"length": 12, "quality": 0.631578947368421, "section_id": 4063}}}, "33298344": {"Id": "33298344", "PostTypeId": "2", "Body": "<p>The code you posted is absolutely correct.</p>\n<p>However the behaviour you have is a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62165\" rel=\"nofollow\">not yet closed bug</a> of G++ version 4.9.1. Actually, it may be a duplicate and closed in some other bug report, because the problem is fixed since <code>g++</code> <strong>5.1.0</strong> or maybe even earlier version. To find actual bug you may use <a href=\"https://gcc.gnu.org/bugzilla/buglist.cgi?quicksearch=aggregate\" rel=\"nofollow\">bugzilla's search</a>.</p>\n", "LastActivityDate": "2015-10-23T08:50:35.417", "CommentCount": "0", "CreationDate": "2015-10-23T08:50:35.417", "ParentId": "33297916", "Score": "3", "OwnerUserId": "1750757"}, "33298199": {"Id": "33298199", "PostTypeId": "2", "Body": "<p>The code is valid. </p>\n<ol>\n<li>(8.5.4/3):</li>\n</ol>\n<blockquote>\n<p id=\"so_33297916_33298199_0\">List-initialization of an object or reference of type\n  T\n  is defined as follows:\n  \u2014\n   If\n  T\n  is an aggregate, aggregate initialization is performed</p>\n</blockquote>\n<ol start=\"2\">\n<li>An aggregate in c++14 is defined as (8.5.1/1):</li>\n</ol>\n<blockquote>\n<p id=\"so_33297916_33298199_1\">An\n  aggregate\n  is an array or a class (Clause\n   9\n  ) with no user-provided constructors (\n  12.1\n  ), no private or\n  protected non-static data members (Clause\n   11\n  ), no base classes (Clause\n   10\n  ), and no virtual functions (\n  10.3\n  ).</p>\n</blockquote>\n<p>Note that in c++11 this definition looked different (emphasis mine):</p>\n<blockquote>\n<p id=\"so_33297916_33298199_2\">An\n  aggregate\n  is an array or a class (Clause\n   9\n  ) with no user-provided constructors (\n  12.1\n  ), <strong>no\n  brace-or-equal-\n  initializer\n  s for non-static data members (\n  9.2\n  )</strong>, no private or protected non-static data members (Clause\n   11\n  ),\n  no base classes (Clause\n   10\n  ), and no virtual functions (\n  10.3\n  ).</p>\n</blockquote>\n<p>Since this part is removed in c++14, your struct is definitely an aggregate and thus aggregate initialization should be performed.</p>\n<p>This is <a href=\"https://gcc.gnu.org/gcc-5/changes.html\" rel=\"nofollow\">fixed</a> in gcc5 (search the changes list for \"aggregates with non-static data member initializers\"). I wouldn't call it a \"bug\" though, it's rather the gcc team only implemented that change in gcc 5.1.0.</p>\n", "LastEditorUserId": "1490355", "LastActivityDate": "2015-10-23T08:50:01.137", "Score": "3", "CreationDate": "2015-10-23T08:42:51.597", "ParentId": "33297916", "CommentCount": "0", "OwnerUserId": "1490355", "LastEditDate": "2015-10-23T08:50:01.137"}, "33297916": {"ViewCount": "221", "Body": "<p>Is this code valid with C++14</p>\n<pre><code>using namespace std;\nstruct Point\n{\n  int x = 0;\n  int y = 0;\n};\nPoint p2 {1, 1};\n</code></pre>\n<p>It compiles fine with clang++ 7.0, it doesn't work with G++ 4.9 in both cases I pass --std=c++1y to the compiler.</p>\n<p>In G++ it works when I remove the default values from the struct definition.</p>\n<pre><code>g++ test_constexpr_ctor.cc --std=c++1y -o test\ntest_constexpr_ctor.cc:7:15: error: no matching function for call to \u2018Point::Point(&lt;brace-enclosed initializer list&gt;)\u2019\nPoint p2 {1, 1};\n            ^\ntest_constexpr_ctor.cc:7:15: note: candidates are:\ntest_constexpr_ctor.cc:1:8: note: constexpr Point::Point()\nstruct Point\n        ^\ntest_constexpr_ctor.cc:1:8: note:   candidate expects 0 arguments, 2 provided\ntest_constexpr_ctor.cc:1:8: note: constexpr Point::Point(const Point&amp;)\ntest_constexpr_ctor.cc:1:8: note:   candidate expects 1 argument, 2 provided\ntest_constexpr_ctor.cc:1:8: note: constexpr Point::Point(Point&amp;&amp;)\ntest_constexpr_ctor.cc:1:8: note:   candidate expects 1 argument, 2 provided\n</code></pre>\n", "AcceptedAnswerId": "33298199", "Title": "C++ initializer list and default values", "CreationDate": "2015-10-23T08:27:26.220", "Id": "33297916", "CommentCount": "5", "LastEditDate": "2015-10-23T08:37:47.897", "PostTypeId": "1", "LastEditorUserId": "1750757", "LastActivityDate": "2015-10-23T08:50:35.417", "Score": "6", "OwnerUserId": "491807", "Tags": "<c++><g++><c++14>", "AnswerCount": "2"}});