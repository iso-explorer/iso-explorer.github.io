post_cb({"bq_ids": {"n4140": {"so_45816776_45817013_0": {"length": 51, "quality": 0.8793103448275862, "section_id": 6067}, "so_45816776_45816776_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 336}}, "n3337": {"so_45816776_45817013_0": {"length": 51, "quality": 0.8793103448275862, "section_id": 5835}, "so_45816776_45816776_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 326}}, "n4659": {"so_45816776_45817013_0": {"length": 51, "quality": 0.8793103448275862, "section_id": 7563}}}, "45816776": {"ViewCount": "386", "Body": "<p>Trying to create a map of int to member function pointer and initialize it inside a constructor initializer.\nLike this:</p>\n<pre><code>class X\n{\n    using STATEFUNC = void(X::*)(int);\npublic:\n    X() : m{ { 1, &amp;setState1 } } {}\n\n    void setState1(int x) { cout &lt;&lt; \"state1\" &lt;&lt; endl; }\n\n    void setState2(int x) { cout &lt;&lt; \"state2\" &lt;&lt; endl; }\n\n\n    std::map&lt;int, STATEFUNC&gt; m;\n};\n</code></pre>\n<p>I would say this is correct, but Visual studio 2017 says:</p>\n<blockquote>\n<p id=\"so_45816776_45816776_0\">Error C2664   'std::map,std::allocator&gt;&gt;::map(std::initializer_list&gt;)':\n  cannot convert argument 1 from 'initializer list' to\n  'std::initializer_list&gt;'</p>\n<p id=\"so_45816776_45816776_1\">Error C2276   '&amp;': illegal operation on bound member function\n  expression</p>\n</blockquote>\n<p>When you remove the address of operator from the member function the first error message stays the same but the second changes to:</p>\n<blockquote>\n<p id=\"so_45816776_45816776_2\">Error C3867   'X::setState1': non-standard syntax; use '&amp;' to create a\n  pointer to member</p>\n</blockquote>\n<p>How do you initialize a map of int to member function pointer inside a constructor initializer list?</p>\n", "AcceptedAnswerId": "45816908", "Title": "using map's initializer list inside constructor initializer", "CreationDate": "2017-08-22T11:46:53.730", "Id": "45816776", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-08-22T11:57:19.833", "LastEditorUserId": "4342498", "LastActivityDate": "2017-08-22T12:13:19.330", "Score": "9", "OwnerUserId": "1866300", "Tags": "<c++><c++11><initializer-list><member-function-pointers>", "AnswerCount": "2"}, "45816908": {"Id": "45816908", "PostTypeId": "2", "Body": "<p>Try with</p>\n<pre><code>X() : m{ { 1, &amp;X::setState1 } } {}\n</code></pre>\n<p>Using only <code>&amp;setState1</code> I get, from g++, the following message error</p>\n<blockquote>\n<p id=\"so_45816776_45816908_0\">error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say \u2018&amp;X::setState1\u2019 [-fpermissive]</p>\n</blockquote>\n<p>From clang++ the error is simply</p>\n<blockquote>\n<p id=\"so_45816776_45816908_1\">error: must explicitly qualify name of member function when taking its address</p>\n</blockquote>\n<p><strong>-- EDIT --</strong></p>\n<p>My answer explain how to solve the problem.</p>\n<p>To understand why <code>&amp;X::setState1</code> works and <code>&amp;setState1</code> doesn't, please see the StoryTeller's answer (+1)</p>\n", "LastEditorUserId": "6022656", "LastActivityDate": "2017-08-22T12:13:19.330", "Score": "9", "CreationDate": "2017-08-22T11:53:23.057", "ParentId": "45816776", "CommentCount": "0", "OwnerUserId": "6022656", "LastEditDate": "2017-08-22T12:13:19.330"}, "45817013": {"Id": "45817013", "PostTypeId": "2", "Body": "<p>The <a href=\"https://stackoverflow.com/questions/45816776/using-maps-initializer-list-inside-constructor-initializer/45816908#45816908\">answer</a> by <a href=\"https://stackoverflow.com/users/6022656/max66\">max66</a> is the fix. As for why it's the fix: the reason is that your code does not create a pointer to a member. To quote n4659 (last C++17 draft, but previous standard revisions say the same):</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.unary#op-4\" rel=\"noreferrer\">[expr.unary.op/4]</a></p>\n<blockquote>\n<p id=\"so_45816776_45817013_0\"><strong>A pointer to member is only formed when an explicit &amp; is used and its\n  operand is a qualified-id not enclosed in parentheses.</strong> [\u2009Note: That\n  is, the expression &amp;(qualified-id), where the qualified-id is enclosed\n  in parentheses, does not form an expression of type \u201cpointer to\n  member\u201d. Neither does qualified-id, because there is no implicit\n  conversion from a qualified-id for a non-static member function to the\n  type \u201cpointer to member function\u201d as there is from an lvalue of\n  function type to the type \u201cpointer to function\u201d ([conv.func]). <strong>Nor is\n  &amp;unqualified-id a pointer to member, even within the scope of the\n  unqualified-id's class.</strong> \u2009\u2014\u2009end note\u2009]</p>\n</blockquote>\n<p><code>X::setState1</code> is a qualified id, but <code>setState1</code> is not.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2017-08-22T12:01:21.117", "Score": "14", "CreationDate": "2017-08-22T11:57:45.447", "ParentId": "45816776", "CommentCount": "2", "OwnerUserId": "817643", "LastEditDate": "2017-08-22T12:01:21.117"}});