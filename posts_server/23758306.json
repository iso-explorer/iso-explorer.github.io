post_cb({"23759076": {"CommentCount": "1", "Body": "<p>One example of the case is common error which you can get on object constructing.\nCode variant 1 and 2 illustrate it.\nCode variant 1:</p>\n<pre><code>class C\n{\n  C() : a1(0), a2(a1)\n  {\n  }\n\n  int a1;\n  int a2;\n};\n</code></pre>\n<p>Code variant 2:</p>\n<pre><code>class C\n{\n  C() : a1(0), a2(a1)\n  {\n  }\n\n  int a2;\n  int a1;\n};\n</code></pre>\n<p>Note that in variant 2 a1 and a2 members declaration order was cahnged. Good compilers will provide warning on code variant 2 : \"members initialization is not as in declaration order\".\nThe problem is that in code variant 2 program behaviour is undefined. Some compilers will generate code where a2 will be initialized with 0 (for example Visual Studio compiler as far as I can guess), some will generate code where a2 value will be undefined while in code variant 1 any compiler will provide correct code.\nSo it's the example you needed.</p>\n", "CreationDate": "2014-05-20T11:52:20.213", "ParentId": "23758306", "Id": "23759076", "LastActivityDate": "2014-05-20T11:52:20.213", "PostTypeId": "2", "Score": "0", "OwnerUserId": "1862998"}, "23758306": {"CreationDate": "2014-05-20T11:16:06.183", "ViewCount": "61", "Id": "23758306", "Score": "0", "Title": "Reordering member declaration", "LastEditorUserId": "492336", "CommentCount": "1", "Body": "<p>There is the quote from 3.3.7/1 in the C++ standard:</p>\n<blockquote>\n<p id=\"so_23758306_23758306_0\">If reordering member declarations in a class yields an alternate valid\n  program under (1) and (2), the program is ill-formed, no diagnostic is\n  required.</p>\n</blockquote>\n<p>What does it mean? Can you get an example of such <em>reordering</em> declrartion?</p>\n", "Tags": "<c++><class>", "OwnerDisplayName": "user2889159", "LastEditDate": "2014-05-20T12:32:15.413", "LastActivityDate": "2014-05-20T12:32:15.413", "PostTypeId": "1", "AnswerCount": "2"}, "23759136": {"LastActivityDate": "2014-05-20T12:08:41.750", "CommentCount": "2", "Body": "<p>Consider this program:</p>\n<pre><code>double foo;\nclass Bar {\n    std::vector&lt;decltype(foo)&gt; v;\n    int foo;\n};\n</code></pre>\n<p><em>Reordering</em> <code>Bar::v</code> and <code>Bar::foo</code> like this:</p>\n<pre><code>double foo;\nclass Bar {\n    int foo;\n    std::vector&lt;decltype(foo)&gt; v;\n};\n</code></pre>\n<p>Would yield an alternative program which is otherwise valid, thus the program violates the quoted rule.</p>\n<p>(A version of) gcc chooses to isssue an error in the first case, but compiles with the second variant (\"no diagnostic is required\").</p>\n<p><code>std::vector&lt;decltype(::foo)&gt; v;</code> and <code>std::vector&lt;decltype(Bar::foo)&gt; v;</code> are valid alternatives (the latter is only possible if <code>Bar::foo</code> is declared first).</p>\n", "CreationDate": "2014-05-20T11:54:28.397", "LastEditDate": "2014-05-20T12:08:41.750", "ParentId": "23758306", "Id": "23759136", "LastEditorUserId": "2079303", "PostTypeId": "2", "Score": "3", "OwnerUserId": "2079303"}, "bq_ids": {"n4140": {"so_23758306_23758306_0": {"length": 11, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_23758306_23758306_0": {"length": 11, "quality": 1.0, "section_id": 6814}}}});