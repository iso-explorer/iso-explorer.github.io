post_cb({"bq_ids": {"n4140": {"so_29112567_29112711_0": {"length": 20, "quality": 1.0, "section_id": 86}}, "n3337": {"so_29112567_29112711_0": {"length": 20, "quality": 1.0, "section_id": 81}}}, "29112567": {"CreationDate": "2015-03-18T01:13:01.740", "LastActivityDate": "2015-03-18T01:30:50.560", "Id": "29112567", "AcceptedAnswerId": "29112711", "ViewCount": "78", "Score": "10", "Title": "Can a nonstatic member of a template specialize to data or function?", "CommentCount": "5", "Body": "<p>GCC, Clang, ICC, and MSVC all reject this code, but I don't find any violated rule in the latest working draft of the  C++ standard.</p>\n<p>Is the rule already in the standard, or is it in a defect report?</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate&lt; typename t &gt;\nstruct s {\n    std::conditional_t&lt; std::is_integral&lt; t &gt;::value, t, void() &gt; mem;\n};\n\ns&lt; int &gt; a;\ns&lt; void * &gt; b;\n</code></pre>\n", "Tags": "<c++><templates><language-lawyer>", "FavoriteCount": "2", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "153285"}, "29112711": {"CommentCount": "2", "Body": "<p>The code is invalid due to 14.3.1/3:</p>\n<blockquote>\n<p id=\"so_29112567_29112711_0\">If a declaration acquires a function type through a type dependent on a template-parameter and this causes a\n  declaration that does not use the syntactic form of a function declarator to have function type, the program\n  is ill-formed.</p>\n</blockquote>\n<p>The type of the declaration here is dependent on the template parameter <code>t</code>, and therefore cannot be a function type.</p>\n", "CreationDate": "2015-03-18T01:30:50.560", "ParentId": "29112567", "Id": "29112711", "LastActivityDate": "2015-03-18T01:30:50.560", "PostTypeId": "2", "Score": "8", "OwnerUserId": "189205"}});