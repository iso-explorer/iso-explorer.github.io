post_cb({"25363190": {"Id": "25363190", "PostTypeId": "2", "Body": "<p>You first define the default arguments to be <code>void</code> and <code>_ATL_AutomationType&lt;TComItem&gt;::type</code>, so when exactly one argument X is given, you want <code>InOutComArray&lt;X&gt;</code> to be an <code>InOutComArray&lt;X, void, _ATL_AutomationType&lt;void&gt;::type&gt;</code>.</p>\n<p>Your partial specialization contradicts this: <code>InOutComArray&lt;X&gt;</code> shall be a <code>InOutComArray&lt;X, X, _ATL_AutomationType&lt;X&gt;::type&gt;</code>. </p>\n<p>Depending on what you thik will be more likely second argument, (i.e. <code>void</code> or the same as the first argument), you could make the second argument defaulted to the first one in the first place:</p>\n<pre><code>template&lt;class TNativeItem, class TComItem = TNativeItem,\n     VARTYPE _vartype = _ATL_AutomationType&lt;TComItem&gt;::type&gt;\n</code></pre>\n<p>That way the behavior of the partial specialization is covered, except for the additional constructor. This can be achieved by using default arguments for the constructor:</p>\n<pre><code>template&lt;class TNativeItem, class TComItem = TNativeItem,\n     VARTYPE _vartype = _ATL_AutomationType&lt;TComItem&gt;::type&gt;\nclass InOutComArray\n{\npublic:\nInOutComArray(\n    TNativeItem* items, size_t length,\n    std::function&lt;TComItem(const TNativeItem&amp;)&gt; convertToCom = NoConverter&lt;TNativeItem&gt;(),\n    std::function&lt;TNativeItem(const TComItem&amp;)&gt; convertFromCom = NoConverter&lt;TNativeItem&gt;());\n};\n</code></pre>\n", "LastEditorUserId": "1838266", "LastActivityDate": "2014-08-18T14:21:04.493", "Score": "3", "CreationDate": "2014-08-18T12:21:12.003", "ParentId": "25362727", "CommentCount": "5", "LastEditDate": "2014-08-18T14:21:04.493", "OwnerUserId": "1838266"}, "bq_ids": {"n4140": {"so_25362727_25362875_0": {"length": 9, "quality": 0.9, "section_id": 142}, "so_25362727_25362727_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 135}}, "n3337": {"so_25362727_25362875_0": {"length": 9, "quality": 0.9, "section_id": 136}, "so_25362727_25362727_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 129}}, "n4659": {"so_25362727_25362875_0": {"length": 9, "quality": 0.9, "section_id": 146}, "so_25362727_25362727_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 139}}}, "25362875": {"Id": "25362875", "PostTypeId": "2", "Body": "<p>According to the standard <em>\u00a714.5.5/8 Class template partial specializations [temp.class.spec]:</em></p>\n<blockquote>\n<p id=\"so_25362727_25362875_0\"><em>The template parameter list of a specialization shall not contain default template argument values.</em></p>\n</blockquote>\n<p>Thus, the compiler rightfully complains because in your partial specialization you give default template argument value for <code>VARTYPE _vartype = _ATL_AutomationType&lt;TItem&gt;::type</code>.</p>\n", "LastActivityDate": "2014-08-18T12:04:27.820", "Score": "1", "CreationDate": "2014-08-18T12:04:27.820", "ParentId": "25362727", "CommentCount": "1", "OwnerUserId": "2352671"}, "25362947": {"Id": "25362947", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25362727_25362947_0\">Is there any way around that?</p>\n</blockquote>\n<p>Yes, remove the default template argument from the partial specialization. You don't need it.</p>\n<p>Per the primary template:</p>\n<pre><code>template&lt;class TNativeItem, class TComItem = void,\n         VARTYPE _vartype = _ATL_AutomationType&lt;TComItem&gt;::type&gt;\nclass InOutComArray\n</code></pre>\n<p>These types are equivalent:</p>\n<pre><code>InOutComArray&lt;LONG&gt;\nInOutComArray&lt;LONG, void, _ATL_AutomationType&lt;TComItem&gt;::type&gt;\n</code></pre>\n<p>And whenever <code>InOutComArray</code> is instantiated with <code>TComItem = void</code>, you will get the partial specialization:</p>\n<pre><code>template&lt;class TItem, VARTYPE _vartype&gt;\nclass InOutComArray&lt;TItem, void, _vartype&gt;\n</code></pre>\n", "LastActivityDate": "2014-08-18T12:08:10.893", "Score": "1", "CreationDate": "2014-08-18T12:08:10.893", "ParentId": "25362727", "CommentCount": "2", "OwnerUserId": "1639256"}, "25362727": {"ViewCount": "248", "Body": "<p>I am trying to build a specialization for a template class with a compile time constant.</p>\n<p>The template class looks like this:</p>\n<pre><code>template&lt;class TNativeItem, class TComItem = void,\n         VARTYPE _vartype = _ATL_AutomationType&lt;TComItem&gt;::type&gt;\nclass InOutComArray\n{\nprivate:\n    CComSafeArray&lt;TComItem, _vartype&gt; _safeArray;\n    // ...\npublic:\n    InOutComArray(\n        TNativeItem* items, size_t length,\n        std::function&lt;TComItem(const TNativeItem&amp;)&gt; convertToCom,\n        std::function&lt;TNativeItem(const TComItem&amp;)&gt; convertFromCom)\n        : _safeArray(length)\n    {\n        // ...\n    }\n\n    // ...\n};\n</code></pre>\n<p>Usage would be for example:</p>\n<pre><code>InOutComArray&lt;BOOL, VARIANT_BOOL, VT_BOOL&gt;(\n    items, length, BOOLToVARIANT_BOOL, VARIANT_BOOLToBOOL));\n</code></pre>\n<p>However, there also exist types that don't require conversion and I wanted to provide a short hand version for this:</p>\n<pre><code>InOutComArray&lt;LONG&gt;(items, length);\n</code></pre>\n<p>I tried to implement it like this:</p>\n<pre><code>template&lt;class TItem, VARTYPE _vartype = _ATL_AutomationType&lt;TItem&gt;::type&gt;\nclass InOutComArray&lt;TItem, void, _vartype&gt;\n    : public InOutComArray&lt;TItem, TItem, _vartype&gt;\n{\npublic:\n    InOutComArray(TItem* items, size_t length)\n        : InOutComArray&lt;TItem, TItem, _vartype&gt;(\n              items, length, NoConverter&lt;TItem&gt;, NoConverter&lt;TItem&gt;)\n    {\n\n    }\n};\n</code></pre>\n<p>However, I get the following error:</p>\n<blockquote>\n<p id=\"so_25362727_25362727_0\">'_vartype' : default template arguments not allowed on a partial specialization</p>\n</blockquote>\n<p>Is there any way around that?</p>\n", "AcceptedAnswerId": "25363190", "Title": "Template specialization with compile time constant", "CreationDate": "2014-08-18T11:55:14.587", "Id": "25362727", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-08-18T14:21:04.493", "Score": "1", "OwnerUserId": "572644", "Tags": "<c++><templates><atl>", "AnswerCount": "3"}});