post_cb({"bq_ids": {"n4140": {"so_17104209_17104608_2": {"length": 7, "quality": 1.0, "section_id": 6098}, "so_17104209_17104573_1": {"length": 23, "quality": 1.0, "section_id": 6098}, "so_17104209_17104608_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 4439}, "so_17104209_17104608_5": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_17104209_17104608_3": {"length": 9, "quality": 1.0, "section_id": 6098}, "so_17104209_17104573_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3296}, "so_17104209_17104608_4": {"length": 7, "quality": 1.0, "section_id": 6098}, "so_17104209_17104573_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4439}}, "n3337": {"so_17104209_17104608_2": {"length": 7, "quality": 1.0, "section_id": 5864}, "so_17104209_17104573_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4276}, "so_17104209_17104608_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 4276}, "so_17104209_17104608_5": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_17104209_17104608_3": {"length": 9, "quality": 1.0, "section_id": 5864}, "so_17104209_17104573_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3166}, "so_17104209_17104608_4": {"length": 7, "quality": 1.0, "section_id": 5864}, "so_17104209_17104573_1": {"length": 23, "quality": 1.0, "section_id": 5864}}, "n4659": {"so_17104209_17104608_2": {"length": 7, "quality": 1.0, "section_id": 7595}, "so_17104209_17104573_0": {"length": 12, "quality": 0.8, "section_id": 5704}, "so_17104209_17104608_1": {"length": 12, "quality": 0.8, "section_id": 5704}, "so_17104209_17104608_5": {"length": 7, "quality": 1.0, "section_id": 4052}, "so_17104209_17104608_3": {"length": 9, "quality": 1.0, "section_id": 7595}, "so_17104209_17104573_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 4058}, "so_17104209_17104608_4": {"length": 7, "quality": 1.0, "section_id": 7595}, "so_17104209_17104573_1": {"length": 23, "quality": 1.0, "section_id": 7595}}}, "17104564": {"Id": "17104564", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17104209_17104564_0\">Does <code>std::make_shared&lt;POD&gt;()</code> value initialize my POD?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_17104209_17104564_1\">If yes, is this a guaranteed by the standard?</p>\n</blockquote>\n<p>C++11 20.7.2.2.6/2 specifies that it \"constructs an object in that memory\nvia the placement new expression <code>::new (pv) T(std::forward&lt;Args&gt;(args)...)</code>\". With no arguments, that will be <code>::new (pv) T()</code>, which value-initialises the object.</p>\n", "LastActivityDate": "2013-06-14T08:46:23.343", "CommentCount": "0", "CreationDate": "2013-06-14T08:46:23.343", "ParentId": "17104209", "Score": "8", "OwnerUserId": "204847"}, "17104209": {"ViewCount": "772", "Body": "<p>Does <code>std::make_shared&lt;POD&gt;()</code> value initialize my POD? </p>\n<p>If yes, is this a guaranteed by the standard?</p>\n<p>If no (as I suspect), is there a way to do this? I guess <code>std::make_shared&lt;POD&gt;(POD())</code> would do but is that what I should be doing?</p>\n", "AcceptedAnswerId": "17104573", "Title": "Does `std::make_shared<POD>()` value initialize my POD?", "CreationDate": "2013-06-14T08:27:05.720", "Id": "17104209", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-06-14T08:36:36.727", "LastEditorUserId": "1364752", "LastActivityDate": "2013-06-14T08:48:44.340", "Score": "9", "OwnerUserId": "1171013", "Tags": "<c++><c++11><shared-ptr>", "AnswerCount": "3"}, "17104573": {"Id": "17104573", "PostTypeId": "2", "Body": "<p>Yes, it's value intialized, and this is guaranteed by the standard:</p>\n<p><strong>\u00a720.7.2.2.6,2:</strong> (about <code>make_shared</code>)</p>\n<blockquote>\n<p id=\"so_17104209_17104573_0\">Effects: Allocates memory suitable for an object of type <code>T</code> and constructs an object in that memory via the placement new expression <code>::new (pv) T(std::forward&lt;Args&gt;(args)...)</code>.</p>\n</blockquote>\n<p>And <strong>\u00a75.3.4,15:</strong> </p>\n<blockquote>\n<p id=\"so_17104209_17104573_1\">A new-expression that creates an object of type T initializes that object as follows:<br>\n  \u2014 If the new-initializer is omitted, the object is default-initialized (8.5); if no initialization is performed, the object has indeterminate value.<br>\n  \u2014 <strong>Otherwise, the new-initializer is interpreted according to the initialization rules of 8.5 for directinitialization.</strong></br></br></p>\n</blockquote>\n<p>So it's direct-initialized as in <code>new POD()</code>.</p>\n<p><strong>\u00a78.5,16:</strong></p>\n<blockquote>\n<p id=\"so_17104209_17104573_2\">The semantics of initializers are as follows. [...]<br>\n  \u2014 If the initializer is (), <strong>the object is value-initialized.</strong></br></p>\n</blockquote>\n", "LastActivityDate": "2013-06-14T08:46:57.550", "CommentCount": "0", "CreationDate": "2013-06-14T08:46:57.550", "ParentId": "17104209", "Score": "15", "OwnerUserId": "1838266"}, "17104608": {"Id": "17104608", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17104209_17104608_0\">Does <code>std::make_shared&lt;POD&gt;()</code> value initialize my POD?</p>\n</blockquote>\n<p><strong>Yes</strong>, it does. Paragraph 20.7.2.2.6/2 about <code>std::make_shared&lt;&gt;()</code> says that:</p>\n<blockquote>\n<p id=\"so_17104209_17104608_1\">2 <em>Effects</em>: Allocates memory suitable for an object of type <code>T</code> and constructs an object in that memory\n  via the placement <code>new</code> expression <code>::new (pv) T(std::forward&lt;Args&gt;(args)...)</code>.</p>\n</blockquote>\n<p>In case no arguments are passed, this means your data structure is constructed this way:</p>\n<pre><code>::new(pv) T()\n</code></pre>\n<p>This is guaranteed to yield direct-initialization because of paragraph 5.3.4/15:</p>\n<blockquote>\n<p id=\"so_17104209_17104608_2\">A new-expression that creates an object of type <code>T</code> initializes that object as follows:</p>\n<p id=\"so_17104209_17104608_3\">\u2014 If the <em>new-initializer</em> is omitted, the object is default-initialized (8.5); if no initialization is performed,\n  the object has indeterminate value.</p>\n<p id=\"so_17104209_17104608_4\">\u2014 <strong>Otherwise, the <em>new-initializer</em> is interpreted according to the initialization rules of 8.5 for direct-initialization.</strong></p>\n</blockquote>\n<p>In your case, the <em>new-initializer</em> is present and it is <code>()</code>. And direct-initialization with an empty set of parentheses is specified to yield <em>value-initialization</em> in paragraph 8.5/11:</p>\n<blockquote>\n<p id=\"so_17104209_17104608_5\">An object whose initializer is an empty set of parentheses, i.e., <code>()</code>, shall be <strong>value-initialized</strong>. [...]</p>\n</blockquote>\n", "LastActivityDate": "2013-06-14T08:48:44.340", "CommentCount": "0", "CreationDate": "2013-06-14T08:48:44.340", "ParentId": "17104209", "Score": "8", "OwnerUserId": "1932150"}});