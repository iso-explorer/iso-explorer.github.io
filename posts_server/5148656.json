post_cb({"5148656": {"ViewCount": "956", "Body": "<p>I saw the code snippet as follows:</p>\n<pre><code>class UPNumber {\npublic:\n  UPNumber();\n  UPNumber(int initValue);\n  ...\n\n  // pseudo-destructor (a const member function, because\n  // even const objects may be destroyed)\n  void destroy() const { delete this; } // why this line is correct???\n\n  ...\n\nprivate:\n  ~UPNumber();\n};\n</code></pre>\n<p>First, I am sure that above class definition is correct.\nHere is my question, why we can define the function 'destroy' as above?\nThe reason being asking is that why we can modify 'this' in a const-member function?</p>\n", "AcceptedAnswerId": "5148693", "Title": "How can we call \"delete this; \" in a const-member function?", "CreationDate": "2011-02-28T23:08:21.297", "Id": "5148656", "CommentCount": "0", "LastEditDate": "2015-07-20T20:22:27.687", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-20T20:22:27.687", "Score": "4", "OwnerUserId": "391104", "Tags": "<c++><delete-operator><const-correctness>", "AnswerCount": "4"}, "5148693": {"Id": "5148693", "PostTypeId": "2", "Body": "<p>The <code>const</code> qualifier applied to a method have the effect of making the <code>this</code> passed to it a <code>const</code> pointer; in particular, in your case it will be a <code>const UPNumber *</code>.</p>\n<p>Still, this is not a problem for <code>delete</code>: actually you can use <code>delete</code> on a <code>const</code> pointer without having to cast anything, as specified at \u00a75.3.5 \u00b62:</p>\n<blockquote>\n<p id=\"so_5148656_5148693_0\">[Note: a pointer to a const type can be the operand of a delete-expression; it is not necessary to cast away the constness (5.2.11) of the pointer expression before it is used as the operand of the delete-expression. ]</p>\n</blockquote>\n<p>Notice that, before the standard was completed, there have been many discussion about whether this was or wasn't a good idea, so some pre-standard compilers will issue an error when trying to <code>delete</code> <code>const</code> pointers.</p>\n<p>The idea behind allowing this behavior is that otherwise you would have no way to <code>delete</code> <code>const</code> objects without using a <code>const_cast</code>; see <a href=\"https://stackoverflow.com/questions/755196/deleting-a-const-pointer\">this question</a> for more info.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-02-28T23:12:22.527", "Score": "4", "CreationDate": "2011-02-28T23:12:22.527", "ParentId": "5148656", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2017-05-23T11:44:00.343"}, "27801064": {"Id": "27801064", "PostTypeId": "2", "Body": "<p>As it is <strong>technically possible and defined</strong> to call <code>delete this</code> <a href=\"http://www.parashift.com/c++-faq-lite/delete-this.html\" rel=\"nofollow noreferrer\">provided that you are careful</a>, the constness of the \"suicide\" method is <strong>technically pointless</strong>, since the object must not be touched after the call. </p>\n<p>That's why it is <strong>semantically incorrect</strong> to have a <code>const</code> method calling <code>delete this</code>.</p>\n<p>An interesting point brought <a href=\"https://stackoverflow.com/questions/5148656/c-how-can-we-call-delete-this-in-a-const-member-function/27801064#comment5779757_5148782\">Steve Jessep's comment</a>. Running the destructor doesn't keep an object unchanged, so applying the concept of <em>const</em>ness is questionable.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-09T12:48:29.873", "Score": "0", "CreationDate": "2015-01-06T14:46:00.817", "ParentId": "5148656", "CommentCount": "0", "OwnerUserId": "2932052", "LastEditDate": "2017-05-23T12:29:48.783"}, "bq_ids": {"n4140": {"so_5148656_5148693_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6106}}, "n3337": {"so_5148656_5148693_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5872}}, "n4659": {"so_5148656_5148693_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7603}}}, "5148668": {"Id": "5148668", "PostTypeId": "2", "Body": "<p>That works for the same reason that this work:</p>\n<pre><code>const int* upn = new int();\ndelete upn;\n</code></pre>\n<p>You can <code>delete</code> a pointer to a const-qualified object.  The const-qualification on the member function just means that <code>this</code> has a type <code>const UPNumber*</code>.</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2011-02-28T23:37:58.303", "Score": "10", "CreationDate": "2011-02-28T23:09:48.037", "ParentId": "5148656", "CommentCount": "6", "OwnerUserId": "151292", "LastEditDate": "2011-02-28T23:37:58.303"}, "5148782": {"Id": "5148782", "PostTypeId": "2", "Body": "<p>Where did you get the idea that we are modifying <code>this</code>? In fact, <code>this</code> is not an lvalue. It It cannot ever be modified, regardless of whether the member function is <code>const</code> or not.</p>\n<p>Applying <em>delete-expression</em> to a pointer (any pointer, not just <code>this</code>) is not in any way considered a modification of that pointer. Moreover, the argument of delete-expression is treated as rvalue, meaning that it cannot possibly be modified by <code>delete</code>.</p>\n<p>So, there are no problems with that application of <code>delete</code> in your code.</p>\n", "LastActivityDate": "2011-02-28T23:22:41.860", "CommentCount": "2", "CreationDate": "2011-02-28T23:22:41.860", "ParentId": "5148656", "Score": "2", "OwnerUserId": "187690"}});