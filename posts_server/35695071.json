post_cb({"35695147": {"Id": "35695147", "PostTypeId": "2", "Body": "<p>The following;</p>\n<pre><code>enum class E : CL&lt;E&gt;::UndType;\n</code></pre>\n<p>Is not accepted as a valid declaration in some current implementations (tested clang++, g++ and MSVC). They do not accept the, as yet incomplete type <code>E</code>, in the <em>enum-base</em> <code>CL&lt;E&gt;::UndType</code>. The error given in the tested implementations is that <code>E</code> is <em>undeclared</em> at that point. They seem to place the point of declaration at the end of the <em>enum-base</em>, they consider it declared once it is complete.</p>\n<p>When reading the specifications;</p>\n<p><strong>\u00a714.3.1/2 Template type arguments</strong></p>\n<blockquote>\n<p id=\"so_35695071_35695147_0\">[ Note: A template type argument may be an incomplete type (3.9). \u2014 end note ]</p>\n</blockquote>\n<p>And </p>\n<p><strong>\u00a77.2/6 Enumeration declarations</strong></p>\n<blockquote>\n<p id=\"so_35695071_35695147_1\">An enumeration whose underlying type is fixed is an incomplete type from its point of declaration (3.3.2) to immediately after its enum-base (if any), at which point it becomes a complete type.</p>\n</blockquote>\n<p>Does hint at it being compilable; as is the case with CRTP implementations.</p>\n<p>I'm note sure if this (i.e. the failure to compile <code>enum class E : CL&lt;E&gt;::UndType;</code>) is the intention or if it was considered as a use case. From the specification, the opaque enum declaration is given some \"special\" treatment w.r.t. its base type and the requirement that it must be an integral type.</p>\n<p>Presumably, the code <em>should be compilable</em> given the resolution to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1482\" rel=\"nofollow\">CWG#1482</a>.</p>\n<hr>\n<p>As for current workarounds...</p>\n<p>This;</p>\n<pre><code>enum class E; // default underlying type is int\n</code></pre>\n<p>Is the minimum declaration.</p>\n<p>The opaque declaration could be either;</p>\n<pre><code>enum class E : int; // int base\n</code></pre>\n<p>The following would be a full definition (including enumerators);</p>\n<pre><code>enum class E : int {/*...*/};\n</code></pre>\n<p>Or to use the class template, another type (possibly <code>void</code>) could be used.</p>\n<pre><code>enum class E : CL&lt;void&gt;::UndType;\n</code></pre>\n</hr>", "LastEditorUserId": "3747990", "LastActivityDate": "2016-02-29T13:44:44.153", "Score": "13", "CreationDate": "2016-02-29T08:44:59.320", "ParentId": "35695071", "CommentCount": "5", "LastEditDate": "2016-02-29T13:44:44.153", "OwnerUserId": "3747990"}, "bq_ids": {"n4140": {"so_35695071_35695071_0": {"length": 15, "quality": 0.9375, "section_id": 7051}, "so_35695071_35695147_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 85}, "so_35695071_35695147_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5465}}, "n3337": {"so_35695071_35695071_0": {"length": 15, "quality": 0.9375, "section_id": 6796}, "so_35695071_35695147_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 80}}, "n4659": {"so_35695071_35695071_0": {"length": 15, "quality": 0.9375, "section_id": 8548}, "so_35695071_35695147_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 88}, "so_35695071_35695147_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 6899}}}, "35695071": {"ViewCount": "499", "Body": "<p>What is the point of declaration of enumeration types? Is it immediately after the name of an enumeration? I saw Standard C++ 14 (n4296) \u00a73.3.2/3:</p>\n<blockquote>\n<p id=\"so_35695071_35695071_0\">The point of declaration for an enumeration is immediately after the\n  identifier (if any) in either its enum-specifier (7.2) or its first\n  opaque-enum-declaration (7.2), whichever comes first</p>\n</blockquote>\n<p>But when I try to reproduce it;</p>\n<pre><code>template &lt;class T&gt;\nstruct CL\n{\n    using UndType = int;\n};\n\nenum class E: CL&lt;E&gt;::UndType;  //error: E is undefined\n</code></pre>\n<p>I have got an error on all the compilers, although <em>enum-base</em> for enumeration <code>E</code> is placed after the identifier and must be visible.</p>\n", "AcceptedAnswerId": "35695147", "Title": "Point of declaration for an enumeration", "CreationDate": "2016-02-29T08:40:48.173", "Id": "35695071", "CommentCount": "15", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-02-29T09:04:12.647", "LastEditorUserId": "3747990", "LastActivityDate": "2016-02-29T13:44:44.153", "Score": "18", "OwnerUserId": "3514538", "Tags": "<c++><c++11><enums><declaration><c++14>", "AnswerCount": "1"}});