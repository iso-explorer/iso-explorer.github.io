post_cb({"17640116": {"ParentId": "17639663", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your program violates <a href=\"https://stackoverflow.com/questions/4192170/what-exactly-is-one-definition-rule-in-c\">One definition rule</a> and has undefined behaviour. From <code>n3337 3.2/5</code>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_17639663_17640116_0\"><strong>There can be more than one de\ufb01nition of a class type</strong> (Clause 9), enumeration type (7.2), inline function with\n  external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member\n  of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for\n  which some template parameters are not speci\ufb01ed (14.7, 14.5.5) in a program <strong>provided that each de\ufb01nition\n  appears in a different translation unit</strong>, and provided the definitions satisfy the following requirements. Given\n  such an entity named D de\ufb01ned in more than one translation unit, then</p>\n<p id=\"so_17639663_17640116_1\">\u2014 <strong>each de\ufb01nition of D shall consist of the same sequence of tokens;</strong> and  </p>\n<p id=\"so_17639663_17640116_2\">\u2014 <strong>in each de\ufb01nition of D, corresponding names, looked up according\n  to 3.4, shall refer to an entity de\ufb01ned within the de\ufb01nition of D, or\n  shall refer to the same entity, after overload resolution</strong> (13.3) and\n  after matching of partial template specialization (14.8.3), except\n  that a name can refer to a const object with internal or no linkage if\n  the object has the same literal type in all de\ufb01nitions of D, and the\n  object is initialized with a constant expression (5.19), and the value\n  (but not the address) of the object is used, and the object has the\n  same value in all de\ufb01nitions of D; and  </p>\n<p id=\"so_17639663_17640116_3\">[<em>... omitted stuff that's not directly related to the example ...</em>]</p>\n<p id=\"so_17639663_17640116_4\">If the de\ufb01nitions of D satisfy all these requirements,\n  then the program shall behave as if there were a single de\ufb01nition of D. If the de\ufb01nitions of D do not satisfy\n  these requirements, then <strong>the behavior is unde\ufb01ned</strong>.</p>\n</blockquote>\n<p>You can't get a compiler error because it only \"sees\" one translation unit at a time. The linker and it's error messages are out of the scope of C++ standard, so I believe there can't be a <em>de iure</em> answer why it doesn't diagnose. I guess it just takes the first <code>C</code> symbol that encounters and discards the rest.</p>\n", "OwnerUserId": "947836", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:08.413", "Id": "17640116", "Score": "1", "CreationDate": "2013-07-14T14:09:28.413", "LastActivityDate": "2013-07-14T14:09:28.413"}, "17639663": {"CommentCount": "4", "ViewCount": "307", "CreationDate": "2013-07-14T13:07:48.913", "LastActivityDate": "2013-07-14T14:09:28.413", "Title": "No compiler/linker error for same name classes declared in different source files", "AcceptedAnswerId": "17640116", "PostTypeId": "1", "Id": "17639663", "Score": "2", "Body": "<p>I have 2 files as below, which declare a same name <code>class C</code>:</p>\n<pre><code>// C1.cpp\nclass C { \npublic: void foo (int, float);\n};\n\nint main () {\n  C c;\n  c.foo(1, 2.3);\n}\n\nvoid C::foo (int, float) {}\n\n// C2.cpp\nclass C { \npublic:\n  int i;  // &lt;--- extra variable\n  void foo (int, float);  // &lt;--- non static\n};\n\nvoid foo () {\n  C c;\n  c.foo(0, 0.0);\n  c.i = 0;\n}\n</code></pre>\n<p>It compiles fine with <code>g++ C1.cpp C2.cpp</code>!</p>\n<ol>\n<li>Why is there no compiler/linker error when only the names are same\n<em>but the bodies are not</em>?</li>\n<li>Why the single definition of <code>C::foo(..)</code> serves for both the\n<code>static</code> and non-static versions?</li>\n<li>Or if this is just another <em>undefined behavior</em> case from compiler,\ncan we prevent it?</li>\n</ol>\n", "Tags": "<c++><compiler-errors><language-lawyer><ambiguity><multiple-definition-error>", "OwnerUserId": "514235", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17639663_17640116_4": {"section_id": 7043, "quality": 0.6875, "length": 11}, "so_17639663_17640116_1": {"section_id": 7043, "quality": 0.8333333333333334, "length": 5}, "so_17639663_17640116_2": {"section_id": 7043, "quality": 0.7884615384615384, "length": 41}, "so_17639663_17640116_0": {"section_id": 7043, "quality": 0.8461538461538461, "length": 55}}, "n3337": {"so_17639663_17640116_4": {"section_id": 6788, "quality": 0.75, "length": 12}, "so_17639663_17640116_1": {"section_id": 6788, "quality": 0.8333333333333334, "length": 5}, "so_17639663_17640116_2": {"section_id": 6788, "quality": 0.8461538461538461, "length": 44}, "so_17639663_17640116_0": {"section_id": 6788, "quality": 0.8461538461538461, "length": 55}}, "n4659": {"so_17639663_17640116_1": {"section_id": 8540, "quality": 0.8333333333333334, "length": 5}, "so_17639663_17640116_4": {"section_id": 8540, "quality": 0.6875, "length": 11}, "so_17639663_17640116_2": {"section_id": 8540, "quality": 0.7307692307692307, "length": 38}, "so_17639663_17640116_0": {"section_id": 8540, "quality": 0.8461538461538461, "length": 55}}}});