post_cb({"17176239": {"ParentId": "17176221", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_17176221_17176239_0\">Is this implementation specific and/or undefined behavior?</p>\n</blockquote>\n<p>Yes, <strong>signed</strong> integer overflow is undefined behavior. Per paragraph 5/4 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_17176221_17176239_1\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of\n  representable values for its type, the behavior is undefined. [...]</p>\n</blockquote>\n<p>Notice, that the same does not apply to <em>unsigned</em> arithmetic. As specified in paragraph 3.9.1/4 and footnote 46:</p>\n<blockquote>\n<p id=\"so_17176221_17176239_2\">Unsigned integers, declared unsigned, shall obey the laws of arithmetic modulo <code>2^n</code> where <code>n</code> is the number\n  of bits in the value representation of that particular size of integer. [...] </p>\n<p id=\"so_17176221_17176239_3\">This implies that unsigned arithmetic does not overflow because a result that cannot be represented by the resulting\n  unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the\n  resulting unsigned integer type.</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-06-18T18:50:54.947", "Id": "17176239", "Score": "5", "CreationDate": "2013-06-18T18:29:22.340", "LastActivityDate": "2013-06-18T18:50:54.947"}, "17176221": {"CommentCount": "5", "AcceptedAnswerId": "17176239", "CreationDate": "2013-06-18T18:28:19.997", "LastActivityDate": "2013-06-18T18:50:54.947", "PostTypeId": "1", "ViewCount": "981", "FavoriteCount": "2", "Title": "Is INT_MIN/-1 defined behavior in C++?", "Id": "17176221", "Score": "2", "Body": "<p>I have the following code for <code>INT_MIN/-1</code>. I would expect for this to have came out to be INT_MAX+1 (or 0 with rollover). However, the actual result I get is INT_MIN. This is my test code:</p>\n<pre><code>#define __STDC_LIMIT_MACROS\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;limits.h&gt;\nusing namespace std;\nint main()\n{\n  int min=INT_MIN;\n  int res=min/-1;\n  printf(\"result: %i\\n\", res);\n  printf(\"max: %i min: %i\\n\", INT_MAX, INT_MIN);\n  return 0;\n}\n</code></pre>\n<p>Is this implementation specific and/or undefined behavior?</p>\n", "Tags": "<c++><math><integer-overflow><integer-division>", "OwnerUserId": "69742", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17176221_17176239_2": {"section_id": 7213, "quality": 0.875, "length": 14}, "so_17176221_17176239_1": {"section_id": 5937, "quality": 1.0, "length": 13}, "so_17176221_17176239_3": {"section_id": 7213, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_17176221_17176239_2": {"section_id": 6957, "quality": 1.0, "length": 16}, "so_17176221_17176239_1": {"section_id": 5709, "quality": 1.0, "length": 13}, "so_17176221_17176239_3": {"section_id": 6957, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_17176221_17176239_2": {"section_id": 8722, "quality": 0.875, "length": 14}, "so_17176221_17176239_1": {"section_id": 7421, "quality": 1.0, "length": 13}, "so_17176221_17176239_3": {"section_id": 8722, "quality": 0.9642857142857143, "length": 27}}}, "17176301": {"ParentId": "17176221", "CommentCount": "0", "Body": "<p>This is signed integer overflow and thus undefined behavior, this <code>Cert</code> document on how to <a href=\"https://www.securecoding.cert.org/confluence/display/seccode/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow?showComments=false\" rel=\"nofollow\"> Ensure that operations on signed integers do not result in overflow</a> is great and as far as I can tell covers all the instances. This is the <code>if</code> statement from the <code>Division</code> section that covers your question:</p>\n<pre><code>if ( (sl2 == 0) || ( (sl1 == LONG_MIN) &amp;&amp; (sl2 == -1) ) ) {\n  /* Handle error condition */\n}\nelse {\n  result = sl1 / sl2;\n}\n</code></pre>\n", "OwnerUserId": "1708801", "PostTypeId": "2", "Id": "17176301", "Score": "2", "CreationDate": "2013-06-18T18:33:07.303", "LastActivityDate": "2013-06-18T18:33:07.303"}});