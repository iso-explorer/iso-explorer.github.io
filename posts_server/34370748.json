post_cb({"34370748": {"ViewCount": "69", "Body": "<p>Here is the <code>Binary Search</code> code in Python:          </p>\n<pre><code>def binarySearch(arr,key,low,high):\n    if high &lt; low:\n        return -1\n    mid = (low+high) &gt;&gt; 1\n    if arr[mid] &lt; key:\n        binarySearch(arr,key,mid+1,high)\n    elif arr[mid] &gt; key:\n        binarySearch(arr,key,low,mid-1)\n    else:\n        return mid\narr = [1,2,3,4,5,6]\nlength = len(arr)\nresult = binarySearch(arr,6,0,length-1)\nprint('result:',result) \n</code></pre>\n<p>Output:</p>\n<pre><code>result:None\n</code></pre>\n<p>But I expected:     </p>\n<pre><code>result:5\n</code></pre>\n<p>Then\uff0cI write the similar code in C++\uff1a</p>\n<pre><code>int binarySearch(int arr[],int key,int low,int high)\n{\n    if(high &lt; low)\n        return -1;\n    int mid = (low+high) &gt;&gt; 1;\n    if(arr[mid] &lt; key)\n        binarySearch(arr,key,mid+1,high);\n    else if(arr[mid] &gt; key)\n        binarySearch(arr,key,low,mid-1);\n    else\n        return mid;\n}\nint main()\n{\n    int arr[] = {1,2,3,4,5,6};\n    int len = sizeof(arr) / sizeof(arr[0]);\n\n    int result = binarySearch(arr,6,0,len-1);\n    cout&lt;&lt;\"result:\"&lt;&lt;result&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>result:5\n</code></pre>\n<p>It works perfect.<br>\nCan anyone explain the reason for this strange behavior?<br>\n<strong>P.S.</strong> I know I should use            </br></br></p>\n<pre><code>return binarySearch(...)\n</code></pre>\n<p>in Python,but I want to know why the C++ code can works perfect.</p>\n", "AcceptedAnswerId": "34371136", "Title": "Recursive function:What is the difference between C++ and Python?", "CreationDate": "2015-12-19T12:29:18.197", "Id": "34370748", "CommentCount": "6", "LastEditDate": "2015-12-19T12:42:50.090", "PostTypeId": "1", "LastEditorUserId": "4857099", "LastActivityDate": "2015-12-19T13:07:37.037", "Score": "-7", "OwnerUserId": "4857099", "Tags": "<python><c++><recursion>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34370748_34371136_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 3360}}, "n3337": {"so_34370748_34371136_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 3230}}, "n4659": {"so_34370748_34371136_0": {"length": 52, "quality": 0.6842105263157895, "section_id": 4799}, "so_34370748_34371136_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 4799}}}, "34371136": {"Id": "34371136", "PostTypeId": "2", "Body": "<p>The C++ code <strong>doesn't</strong> work perfectly. It's <strong>undefined behavior</strong> and everything can happen. That includes working, just suddenly stopping to work tomorrow, or on Christmas eve and delete all your files...</p>\n<p>C++ standard draft n4527 (<code>6.6.3/2 [stmt.return]</code>):</p>\n<blockquote>\n<p id=\"so_34370748_34371136_0\">The expression or braced-init-list of a return statement is called its operand. A return statement with no operand shall be used only in a function whose return type is cv void, a constructor (12.1), or a destructor (12.4). A return statement with an operand of type void shall be used only in a function whose return type is cv void. A return statement with any other operand shall be used only in a function whose return type is not cv void; the return statement initializes the object or reference to be returned by copy-initialization (8.5) from the operand. [ Note: A return statement can involve the construction and copy or move of a temporary object (12.2). A copy or move operation associated with a return statement may be\n  elided or considered as an rvalue for the purpose of overload resolution in selecting a constructor (12.8). \u2014 end note ] [ Example:</p>\n</blockquote>\n<pre><code>std::pair&lt;std::string,int&gt; f(const char* p, int x) {\n    return {p,x};\n}\n</code></pre>\n<blockquote>\n<p id=\"so_34370748_34371136_1\">\u2014 end example ] <strong>Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</strong></p>\n</blockquote>\n<p>It clearly specifies the undefined behavior at the end.</p>\n<p>That it seems to work in your case is just a random accident, don't count on it. Such code should be fixed.</p>\n<p>So in the end it all boils down to python returning <code>none</code> if you don't explicitly return something and C++ giving undefined behavior if you tell it that you want to return some type but don't actually do.</p>\n", "LastActivityDate": "2015-12-19T13:07:37.037", "CommentCount": "1", "CreationDate": "2015-12-19T13:07:37.037", "ParentId": "34370748", "Score": "2", "OwnerUserId": "1942027"}, "34370994": {"Id": "34370994", "PostTypeId": "2", "Body": "<p>You should add a return statement in the seconf <code>if</code> and <code>elifs</code>. THis code works</p>\n<pre><code>def binarySearch(arr,key,low,high):\n    if high &lt; low:\n        return -1\n    mid = (low+high) &gt;&gt; 1\n    if arr[mid] &lt; key:\n        return binarySearch(arr,key,mid+1,high)\n    elif arr[mid] &gt; key:\n        return binarySearch(arr,key,low,mid-1)\n    else:\n        return mid\narr = [1,2,3,4,5,6]\nlength = len(arr)\nresult = binarySearch(arr,6,0,length-1)\nprint result # 5\n</code></pre>\n", "LastActivityDate": "2015-12-19T12:54:54.890", "CommentCount": "1", "CreationDate": "2015-12-19T12:54:54.890", "ParentId": "34370748", "Score": "0", "OwnerUserId": "4041176"}});