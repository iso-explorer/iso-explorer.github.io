post_cb({"bq_ids": {"n4140": {"so_20550459_20550459_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5881}, "so_20550459_20550523_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 3255}}, "n3337": {"so_20550459_20550459_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5652}, "so_20550459_20550523_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 3127}}, "n4659": {"so_20550459_20550459_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 7364}, "so_20550459_20550523_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 4013}}}, "20550459": {"ViewCount": "470", "Body": "<p>As far as I know, every non-static member function defined inside a class is implicitly inlined. \nNow I am wondering if the same is valid for static member functions, considering that I can define the function multiple times in different translation units.</p>\n<p>As an example: </p>\n<pre><code>class Foo {\n\npublic:\n\n    static void static_f(void) { std::cout &lt;&lt; static_data &lt;&lt; std::endl; } //Is it inline?\n    static void static_f2(void); //I guess it isn't\n\nprivate:\n\n    static int static_data;\n    int non_static_data;\n};\n</code></pre>\n<p>PS: In this document (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf</a>) I found this lines:</p>\n<blockquote>\n<p id=\"so_20550459_20550459_0\">9.4.1 Static member functions [class.static.mfct] 1 [ Note: The rules described in 9.3 apply to static member functions. \u2014 end note ]</p>\n</blockquote>\n<p>and previously in Section 9.3:</p>\n<blockquote>\n<p id=\"so_20550459_20550459_1\">A member function may be defined (8.4) in its class definition, in\n  which case it is an inline member function (7.1.2) [...]</p>\n</blockquote>\n", "AcceptedAnswerId": "20550523", "Title": "Is a static member function defined inside a class implicitly inlined?", "CreationDate": "2013-12-12T17:42:14.200", "LastActivityDate": "2013-12-12T18:03:41.497", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "OwnerDisplayName": "user2952086", "Id": "20550459", "Score": "6", "Tags": "<c++><function><static><inline>", "AnswerCount": "1"}, "20550523": {"Id": "20550523", "PostTypeId": "2", "Body": "<p><strong>Yes.</strong></p>\n<p>I would quote the standard, but you already did.</p>\n<blockquote>\n<p id=\"so_20550459_20550523_0\">considering that I can define the function multiple times in different translation units.</p>\n</blockquote>\n<p>Only if you guarantee that the contents will be the same, making this a non-issue.</p>\n<p>Be sure not to conflate \"declaration\" and \"definition\" \u2014 only when you provide the function body right there inside the class definition does any of this apply. That also makes your worry a non-issue.</p>\n<pre><code>// \"Is it inline?\"      YES.\nstatic void static_f(void) { std::cout &lt;&lt; static_data &lt;&lt; std::endl; }\n\n// \"I guess it isn't\"   Nope.\nstatic void static_f2(void);\n</code></pre>\n<p>Finally, be aware that these functions will be implicitly marked <code>inline</code>, but this is not the same thing as actually being <em>inlined</em>.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2013-12-12T18:03:41.497", "Score": "9", "CreationDate": "2013-12-12T17:45:11.817", "ParentId": "20550459", "CommentCount": "1", "OwnerUserId": "560648", "LastEditDate": "2013-12-12T18:03:41.497"}});