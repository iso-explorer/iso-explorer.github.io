post_cb({"27609839": {"CommentCount": "8", "ViewCount": "2483", "CreationDate": "2014-12-22T20:20:11.903", "LastActivityDate": "2014-12-22T21:17:55.780", "Title": "About C++ vector::push_back() exceptions. Ellipsis catch useful?", "PostTypeId": "1", "Id": "27609839", "Score": "1", "Body": "<p>I often write code like this :</p>\n<pre><code>try\n{\n    vec.push_back(0);\n}\ncatch(const std::bad_alloc &amp;)\n{\n    ec=1;\n}\ncatch(...)\n{\n    ec=2;\n}\n</code></pre>\n<p>Is the ellipsis catch useful? Can you provide some links where I can find everything I need to know about exceptions thrown by cin, vector, ifstream, etc? All C++ things...\nSomething like <em>The Open Group Base Specifications Issue 7</em> (<a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/\" rel=\"nofollow\">http://pubs.opengroup.org/onlinepubs/9699919799/</a>) where you can find functions names, parameters, return values, flags, errno codes, etc.</p>\n", "Tags": "<c++><try-catch>", "OwnerUserId": "3670049", "AnswerCount": "2"}, "27610011": {"ParentId": "27609839", "CommentCount": "0", "Body": "<p>If an ellipsis catch is really useful is arguable IMHO. You should at least catch a <code>std::exception</code> for matching the broader case</p>\n<pre><code>try {\n    vec.push_back(0);\n}\ncatch(const std::bad_alloc &amp;) {\n    ec=1;\n}\ncatch(const std::exception &amp;) {\n    ec=2;\n    // You can inspect what() for a particular reason, or even try to dynamic_cast&lt;&gt;\n    // to find out which specific exception was thrown.\n}\ncatch(...) {\n    // You have no more type info here, this should be done for last resort (in the\n    // outermost scope) only.\n    ec=3;\n}\n</code></pre>\n<p>I left comments about the advantages/disadvantages</p>\n", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "27610011", "Score": "2", "CreationDate": "2014-12-22T20:33:15.487", "LastActivityDate": "2014-12-22T20:33:15.487"}, "bq_ids": {"n4140": {"so_27609839_27610567_0": {"section_id": 6362, "quality": 0.7272727272727273, "length": 8}, "so_27609839_27610567_1": {"section_id": 6362, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_27609839_27610567_0": {"section_id": 6119, "quality": 0.7272727272727273, "length": 8}, "so_27609839_27610567_1": {"section_id": 6119, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_27609839_27610567_0": {"section_id": 7872, "quality": 0.5454545454545454, "length": 6}}}, "27610567": {"ParentId": "27609839", "CommentCount": "0", "Body": "<p>I haven't seen any restrictions on what exceptions can be thrown but there is footnote 192 which contains this statement:</p>\n<blockquote>\n<p id=\"so_27609839_27610567_0\">... Library implementations should report errors by throwing exceptions of or derived from the standard exception classes(18.6.2.1 ,18.8, 19.2).</p>\n</blockquote>\n<p>This a footnote on 17.6.5.12 [res.on.exception.handling] paragraph 4 which also contains this sentence:</p>\n<blockquote>\n<p id=\"so_27609839_27610567_1\">... Any other functions defined in the C++ standard library that do not have an exception-specification may throw implementation defined exceptions unless otherwise specified.</p>\n</blockquote>\n<p>It seems, any decent implementation would throw only exceptions derived [indirectly] from <code>std::exception</code>. That is, I would catch <code>std::exception const&amp;</code> and probably report the <code>what()</code> string povided by this exception in some form (e.g., log it to a suitable destination).</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "27610567", "Score": "1", "CreationDate": "2014-12-22T21:17:55.780", "LastActivityDate": "2014-12-22T21:17:55.780"}});