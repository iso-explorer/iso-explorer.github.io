post_cb({"bq_ids": {"n4140": {"so_21662586_21662586_0": {"length": 14, "quality": 0.875, "section_id": 7026}}, "n3337": {"so_21662586_21662586_0": {"length": 14, "quality": 0.875, "section_id": 6772}}, "n4659": {"so_21662586_21662586_0": {"length": 14, "quality": 0.875, "section_id": 8523}}}, "21662586": {"ViewCount": "64", "Body": "<p>First of all, sorry for my English.</p>\n<p>According to the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_21662586_21662586_0\">\u00a7[basic].3: An entity is a value, object, reference, function, enumerator, type, class member, template, template specialization, namespace, parameter pack, or this.</p>\n</blockquote>\n<p>Isn't it each value and object? For example, <code>nullptr</code> identifies a \"value\" of type <code>nullptr_t</code>, but, since <code>nullptr_t</code> is a scalar type, it is also an object type, and <code>nullptr</code> is thus an object.</p>\n<p>With <code>this</code> I've the same controversy: when <code>this</code> is used in correct situations (in non-static member functions or data member initializers) is a pointer prvalue and thus of scalar/object type, and in consequence an object.</p>\n<p>Isn't it?</p>\n", "Title": "Objects and values in C++", "CreationDate": "2014-02-09T17:44:25.567", "Id": "21662586", "CommentCount": "6", "LastEditDate": "2014-02-09T18:30:43.157", "PostTypeId": "1", "LastEditorUserId": "168868", "LastActivityDate": "2014-02-10T03:04:56.167", "Tags": "<object><c++11><entity>", "Score": "0", "OwnerUserId": "1794803", "ClosedDate": "2014-03-08T03:31:47.713", "AnswerCount": "1"}, "21668433": {"Id": "21668433", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21662586_21668433_0\"><strong>1.8/1</strong> ...An object is a region of storage...</p>\n</blockquote>\n<p><code>nullptr</code> is to <code>nullptr_t</code> what <code>1</code> is to <code>int</code> - it names a value of the type, but it doesn't occupy storage and is therefore not an object.</p>\n<p>Neither is <code>this</code>. What makes <code>this</code> different from <code>nullptr_t</code> or <code>true</code> is that you can't, taken in isolation, tell which type it's a value of. So in order to describe its behavior in an expression, one needs to consider the context in which said expression appears. This requires some additional gymnastics in the standard text; for this reason, <code>this</code> is specifically called out in a few places.</p>\n", "LastActivityDate": "2014-02-10T03:04:56.167", "Score": "1", "CreationDate": "2014-02-10T03:04:56.167", "ParentId": "21662586", "CommentCount": "1", "OwnerUserId": "1670129"}});