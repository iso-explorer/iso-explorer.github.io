post_cb({"35398060": {"Id": "35398060", "PostTypeId": "2", "Body": "<p>AFAIK it does break the ODR, since inline is not so much a rule as it is a guideline. The compiler is allowed to not inline functions despite them being declared so.</p>\n<p>On the other hand compilers are also allowed to inline functions that are not declared inline, and are likely to do so for small functions in internal calls (it can do so at link-time in some cases), so just don't worry about it.</p>\n<p>Alternatively declare the inline version in a separate namespace and use inline namespaces to resolve it at compile-time (or using or whatever)(<a href=\"http://en.cppreference.com/w/cpp/language/namespace#Inline_namespaces\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/namespace#Inline_namespaces</a>)</p>\n", "LastEditorUserId": "5727550", "LastActivityDate": "2016-02-14T21:24:39.470", "Score": "0", "CreationDate": "2016-02-14T21:13:41.980", "ParentId": "35398013", "CommentCount": "0", "OwnerUserId": "5727550", "LastEditDate": "2016-02-14T21:24:39.470"}, "35398134": {"Id": "35398134", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35398013_35398134_0\">The question is does it break the ODR or is it considered bad practice?</p>\n</blockquote>\n<p>It doesn't break the ODR, but it breaks the rules in [dcl.fct.spec]:</p>\n<blockquote>\n<p id=\"so_35398013_35398134_1\">If a function with external linkage is\n  declared inline in one translation unit, it shall be declared inline in all translation units in which it appears;\n  no diagnostic is required.</p>\n</blockquote>\n<p>Instead you should have a public version of the function, which is not declared inline, and have an internal version which you use inside your library:</p>\n<pre><code>// MyLibInlined.h\ninline void foo_impl() { }\n</code></pre>\n<p>Then inside the library define <code>foo</code> as a call to the internal one:</p>\n<pre><code>// MyLib.cpp\n#include \"MyLibInlined.h\"\nvoid foo() { foo_impl(); }\n</code></pre>\n<p>Alternatively, if all the calls to <code>foo()</code> are in a single file you don't need to worry at all, just define it as a non-inline function, and let the compiler inline it in the file where the definition is visible:</p>\n<pre><code>// MyLib.h\nvoid foo();\n\n// MyLib.cpp\nvoid foo() { code here }\n// use foo ...\n</code></pre>\n<p>The <code>inline</code> keyword doesn't mean the function will be inlined, it means the definition is provided inline in headers. The compiler doesn't need that keyword to be able to inline it within the file where it's defined, because it can see the definition. You only need the <code>inline</code> keyword to allow the definition to appear in multiple translation units without causing a multiple definition error.</p>\n", "LastActivityDate": "2016-02-14T21:21:03.583", "CommentCount": "2", "CreationDate": "2016-02-14T21:21:03.583", "ParentId": "35398013", "Score": "4", "OwnerUserId": "981959"}, "bq_ids": {"n4140": {"so_35398013_35398101_0": {"length": 33, "quality": 1.0, "section_id": 7043}, "so_35398013_35398134_1": {"length": 16, "quality": 1.0, "section_id": 5404}, "so_35398013_35398101_2": {"length": 6, "quality": 1.0, "section_id": 7043}}, "n3337": {"so_35398013_35398101_0": {"length": 33, "quality": 1.0, "section_id": 6788}, "so_35398013_35398101_2": {"length": 6, "quality": 1.0, "section_id": 6788}, "so_35398013_35398134_1": {"length": 16, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_35398013_35398101_0": {"length": 33, "quality": 1.0, "section_id": 8540}, "so_35398013_35398101_2": {"length": 6, "quality": 1.0, "section_id": 8540}, "so_35398013_35398134_1": {"length": 16, "quality": 1.0, "section_id": 6853}}}, "35398013": {"ViewCount": "69", "Body": "<p>Let's say that I have a library which contains a public definition of function <code>void foo();</code>. The library calls this function internally. To get the best performance I want internal calls to be inlined. I also want to prevent external code from seeing the definition so that later I can change the implementation without breaking the ABI. Here is a piece of code:</p>\n<p>MyLib.h:</p>\n<pre><code>void foo();\n</code></pre>\n<p>MyLibInlined.h:</p>\n<pre><code>inline void foo() { code here }\n</code></pre>\n<p>MyLib.cpp</p>\n<pre><code>#define inline\n#include \"MyLibInlined.h\"\n</code></pre>\n<p>The question is does it break the ODR or is it considered bad practice?</p>\n<p><strong>EDIT:</strong>\nWhat if <code>foo</code> was a member function?</p>\n", "Title": "c++ emitting inline functions", "CreationDate": "2016-02-14T21:09:00.460", "LastActivityDate": "2016-02-14T22:21:44.737", "CommentCount": "5", "LastEditDate": "2016-02-14T22:21:44.737", "PostTypeId": "1", "LastEditorUserId": "417501", "Id": "35398013", "Score": "2", "OwnerUserId": "2213297", "Tags": "<c++>", "AnswerCount": "4"}, "35398453": {"Id": "35398453", "PostTypeId": "2", "Body": "<p>This might be a cleaner variation on what you're doing:</p>\n<pre><code>// foo_pub.h -- public interface\n#define foo()   foo_pub()\nvoid foo_pub();\n\n// foo_private.h -- internal used by library\n#define foo()   foo_inline()\ninline foo_inline() { ... }\n\n// foo_pub.c -- definition for public function\nvoid\nfoo_pub()\n{\n    foo_inline()\n}\n</code></pre>\n", "LastActivityDate": "2016-02-14T21:52:04.430", "CommentCount": "0", "CreationDate": "2016-02-14T21:52:04.430", "ParentId": "35398013", "Score": "0", "OwnerUserId": "5382650"}, "35398101": {"Id": "35398101", "PostTypeId": "2", "Body": "<p>It seems to be illegal based on this (C++14 3.2/6)</p>\n<blockquote>\n<p id=\"so_35398013_35398101_0\">There can be more than one definition of a [...] inline function with\n  external linkage [...] in a program provided that each definition\n  appears in a different translation unit, and provided the definitions satisfy the following requirements. Given\n  such an entity named D defined in more than one translation unit, then</p>\n<p id=\"so_35398013_35398101_1\">[...]</p>\n<p id=\"so_35398013_35398101_2\">\u2014 each definition of D shall consist of the same sequence of tokens</p>\n</blockquote>\n<p>Section 3.2 is the section on the one definition rule.</p>\n", "LastEditorUserId": "951890", "LastActivityDate": "2016-02-14T21:25:14.240", "Score": "0", "CreationDate": "2016-02-14T21:18:06.317", "ParentId": "35398013", "CommentCount": "0", "OwnerUserId": "951890", "LastEditDate": "2016-02-14T21:25:14.240"}});