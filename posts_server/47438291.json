post_cb({"bq_ids": {"n4140": {"so_47438291_47438449_1": {"length": 9, "quality": 1.0, "section_id": 969}, "so_47438291_47438333_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 712}}, "n3337": {"so_47438291_47438449_1": {"length": 9, "quality": 1.0, "section_id": 958}, "so_47438291_47438333_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 701}}, "n4659": {"so_47438291_47438449_1": {"length": 9, "quality": 1.0, "section_id": 873}, "so_47438291_47438333_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5058}}}, "47438449": {"Id": "47438449", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47438291_47438449_0\">is the original data still valid and accessible in the <code>std::vector</code> object?</p>\n</blockquote>\n<p>Yes, <code>std::vector::resize</code> has strong exception guarantee (except for the case mentioned as follows). <a href=\"http://eel.is/c++draft/vector.capacity#15\" rel=\"nofollow noreferrer\">\u00a726.3.11.3/15 vector capacity [vector.capacity]</a>:</p>\n<blockquote>\n<p id=\"so_47438291_47438449_1\">If an exception is thrown other than by the move constructor of a non-CopyInsertable T there are no effects.</p>\n</blockquote>\n<p>The guarantee has nothing to do with what kind of allocator is specified; so it's always true.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2017-11-22T15:37:08.727", "Score": "3", "CreationDate": "2017-11-22T15:31:25.077", "ParentId": "47438291", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2017-11-22T15:37:08.727"}, "47438291": {"ViewCount": "64", "Body": "<p>After <code>std::vector::resize()</code> throws a <code>std::bad_alloc</code> exception, is the original data still valid and accessible in the <code>std::vector</code> object?</p>\n<p>Does the answer hold for other allocators, e.g. if <code>boost::interprocess::allocator</code> is used as the allocator, and <code>boost::interprocess::bad_alloc</code> is thrown?</p>\n", "AcceptedAnswerId": "47438333", "Title": "Does vector resize throwing bad_alloc invalidate the original data?", "CreationDate": "2017-11-22T15:23:10.067", "Id": "47438291", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-11-22T15:37:08.727", "Score": "2", "OwnerUserId": "249810", "Tags": "<c++><vector><stl><containers><boost-interprocess>", "AnswerCount": "2"}, "47438333": {"Id": "47438333", "PostTypeId": "2", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/resize\" rel=\"noreferrer\"><code>std::vector::resize</code></a> is exception safe.</p>\n<blockquote>\n<p id=\"so_47438291_47438333_0\">If an exception is thrown, this function has no effect (strong exception guarantee).</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/resize#Exceptions\" rel=\"noreferrer\">Link to the exception specification.</a> The specification doesn't mention any particular requirement on the allocator and must hold regardless of the allocator you provide.</p>\n", "LastActivityDate": "2017-11-22T15:25:15.317", "CommentCount": "0", "CreationDate": "2017-11-22T15:25:15.317", "ParentId": "47438291", "Score": "5", "OwnerUserId": "7359094"}});