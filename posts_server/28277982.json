post_cb({"bq_ids": {"n4140": {"so_28277982_28277982_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 822}, "so_28277982_28277982_4": {"length": 22, "quality": 0.9166666666666666, "section_id": 989}, "so_28277982_30244945_4": {"length": 22, "quality": 0.9166666666666666, "section_id": 989}, "so_28277982_28277982_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 822}, "so_28277982_30244945_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 821}, "so_28277982_28277982_1": {"length": 24, "quality": 0.8571428571428571, "section_id": 821}}, "n3337": {"so_28277982_28277982_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 811}, "so_28277982_28277982_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 811}, "so_28277982_28277982_4": {"length": 22, "quality": 0.9166666666666666, "section_id": 974}, "so_28277982_30244945_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 810}, "so_28277982_28277982_1": {"length": 24, "quality": 0.8571428571428571, "section_id": 810}, "so_28277982_30244945_4": {"length": 22, "quality": 0.9166666666666666, "section_id": 974}}, "n4659": {"so_28277982_28277982_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 881}, "so_28277982_28277982_4": {"length": 21, "quality": 0.875, "section_id": 1052}, "so_28277982_30244945_4": {"length": 21, "quality": 0.875, "section_id": 1052}, "so_28277982_28277982_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 881}, "so_28277982_30244945_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 880}, "so_28277982_28277982_1": {"length": 24, "quality": 0.8571428571428571, "section_id": 880}}}, "30244945": {"Id": "30244945", "PostTypeId": "2", "Body": "<p>At Lenexa meeting the issue <a href=\"http://cplusplus.github.io/LWG/lwg-active.html#2477\" rel=\"noreferrer\">got Immediate status</a> with proposed resolution:</p>\n<blockquote>\n<p id=\"so_28277982_30244945_0\">This wording is relative to N4296.</p>\n<p id=\"so_28277982_30244945_1\">Change 23.3.3.4 [deque.modifiers]/5 to:</p>\n<p id=\"so_28277982_30244945_2\">-5- <em>Complexity</em>: The number of calls to the destructor <strong>of <code>T</code></strong> is the same as the number of elements erased, but the number of calls to the assignment operator <strong>of <code>T</code></strong> is no more than the lesser of the number of elements before the erased elements and the number of elements after the erased elements.</p>\n<p id=\"so_28277982_30244945_3\">Change 23.3.6.5 [vector.modifiers]/4 to:</p>\n<p id=\"so_28277982_30244945_4\">-4- <em>Complexity</em>: The destructor of <code>T</code> is called the number of times equal to the number of the elements erased, but the <s>move</s> assignment operator of <code>T</code> is called the number of times equal to the number of elements in the vector after the erased elements.</p>\n</blockquote>\n<p>That is, if the resolution is accepted there will be no special mention of the move assignment for <code>std::vector::erase</code>, and also the wording for <code>std::deque::erase</code> will be\nclarified a bit.</p>\n", "LastActivityDate": "2015-05-14T18:44:27.013", "CommentCount": "0", "CreationDate": "2015-05-14T18:44:27.013", "ParentId": "28277982", "Score": "8", "OwnerUserId": "3959454"}, "28277982": {"ViewCount": "3632", "Body": "<p>In the process of answering <a href=\"https://stackoverflow.com/q/28266382/3959454\">another question</a> I stumbled upon slightly different wordings for <code>std::vector::erase()</code> and <code>std::deque::erase()</code>. </p>\n<p>This is what C++14 says about <code>std::deque::erase</code> (<code>[deque.modifiers]/4-6</code>, emphasis mine):</p>\n<blockquote>\n<p id=\"so_28277982_28277982_0\"><em>Effects:</em> ...</p>\n<p id=\"so_28277982_28277982_1\"><em>Complexity:</em> The number of calls to the destructor is the same as the number of elements erased, but\n  The number of calls to the <strong>assignment operator</strong> is no more than the lesser of the number of elements\n  Before the erased elements and the number of elements after the erased elements.</p>\n<p id=\"so_28277982_28277982_2\"><em>Throws:</em> Nothing unless an exception is thrown by the copy constructor, move constructor, assignment operator, or move assignment operator of <code>T</code>.</p>\n</blockquote>\n<p>And here is what it says about <code>std::vector::erase</code> (<code>[vector.modifiers]/3-5</code>):</p>\n<blockquote>\n<p id=\"so_28277982_28277982_3\"><em>Effects:</em> ...</p>\n<p id=\"so_28277982_28277982_4\"><em>Complexity:</em> The destructor of <code>T</code> is called the number of times equal to the number of the elements erased, but the <strong>move assignment operator</strong> of <code>T</code> is called the number of times equal to the number of elements in the vector after the erased elements.</p>\n<p id=\"so_28277982_28277982_5\"><em>Throws:</em> Nothing unless an exception is thrown by the copy constructor, move constructor, assignment operator, or move assignment operator of <code>T</code>.</p>\n</blockquote>\n<p>As you can see, the exception specifications for both of them are the same, but for <code>std::vector</code> it's explicitly mentioned that move assignment operator is called.</p>\n<p>There's also requirement for <code>T</code> to be <code>MoveAssignable</code> for <code>erase()</code> to work with both <code>std::vector</code> and <code>std::deque</code> (Table 100), but this doesn't imply the presence of the move assignment operator: one can define a copy assignment operator, and not define move assignment operator, and this class will be <code>MoveAssignable</code>.</p>\n<p>Just in case, I checked with GCC and Clang, and indeed <code>std::vector::erase()</code> calls copy assignment operator if there's no move assignment operator, and <code>std::deque::erase()</code> does the same (<a href=\"http://coliru.stacked-crooked.com/a/c9377a2ee408fa16\" rel=\"nofollow noreferrer\">DEMO</a>).</p>\n<p>So the question is: did I miss something, or this is an (editorial) issue in the standard?</p>\n<p><strong>Update:</strong>\nI've submitted an <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2477\" rel=\"nofollow noreferrer\">LWG issue #2477</a>.</p>\n", "AcceptedAnswerId": "30244945", "Title": "Copy/move assignment in std::vector::erase() and std::deque::erase()", "CreationDate": "2015-02-02T12:40:04.790", "Id": "28277982", "CommentCount": "9", "FavoriteCount": "17", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:24:19.710", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-15T12:44:47.150", "Score": "136", "OwnerUserId": "3959454", "Tags": "<c++><language-lawyer><c++14>", "AnswerCount": "1"}});