post_cb({"32025514": {"Id": "32025514", "PostTypeId": "2", "Body": "<p>Because the member function of a class template will not be implicit instantiated until it being called.</p>\n<p>From $14.7.1/2 Implicit instantiation [temp.inst]:</p>\n<blockquote>\n<p id=\"so_32025409_32025514_0\">Unless a member of a class template or a member template has been\n  explicitly instantiated or explicitly specialized, the specialization\n  of the member is implicitly instantiated when the specialization is\n  referenced in a context that requires the member definition to exist;</p>\n</blockquote>\n<p>And /4:</p>\n<pre><code>[ Example:\ntemplate&lt;class T&gt; struct Z {\nvoid f();\nvoid g();\n};\nvoid h() {\nZ&lt;int&gt; a; // instantiation of class Z&lt;int&gt; required\nZ&lt;char&gt;* p; // instantiation of class Z&lt;char&gt; not required\nZ&lt;double&gt;* q; // instantiation of class Z&lt;double&gt; not required\na.f(); // instantiation of Z&lt;int&gt;::f() required\np-&gt;g(); // instantiation of class Z&lt;char&gt; required, and\n// instantiation of Z&lt;char&gt;::g() required\n}\n</code></pre>\n<p>And /11:</p>\n<blockquote>\n<p id=\"so_32025409_32025514_1\">An implementation shall not implicitly instantiate a function\n  template, a variable template, a member template, a non-virtual member\n  function, a member class, or a static data member of a class template\n  that does not require instantiation.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-08-15T16:11:16.370", "Score": "5", "CreationDate": "2015-08-15T14:04:42.960", "ParentId": "32025409", "CommentCount": "13", "LastEditDate": "2015-08-15T16:11:16.370", "OwnerUserId": "3309790"}, "bq_ids": {"n4140": {"so_32025409_32025514_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 234}, "so_32025409_32025514_1": {"length": 22, "quality": 1.0, "section_id": 243}}, "n3337": {"so_32025409_32025514_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 227}, "so_32025409_32025514_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 235}}, "n4659": {"so_32025409_32025514_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 244}, "so_32025409_32025514_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 250}}}, "32025409": {"ViewCount": "312", "Body": "<p>Why <code>std::queue</code> creation with <code>std::vector</code> container does not raise compiler error?</p>\n<p>Compiler error occurs only when pop is called (this is clear as vector does not provide <code>pop_front()</code>).</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n    queue&lt;int, vector&lt;int&gt;&gt; s;\n\n    s.push(10);\n\n    cout &lt;&lt; s.front() &lt;&lt; endl;\n\n    s.pop();\n\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1740e70f9f5b2fd5\" rel=\"nofollow noreferrer\">DEMO</a></p>\n", "AcceptedAnswerId": "32025514", "Title": "Why std::queue creation with std::vector container does not raise compiler error", "CreationDate": "2015-08-15T13:51:30.990", "Id": "32025409", "CommentCount": "4", "LastEditDate": "2017-10-10T08:35:41.550", "PostTypeId": "1", "LastEditorUserId": "1485885", "LastActivityDate": "2017-10-10T08:35:41.550", "Score": "3", "OwnerUserId": "614656", "Tags": "<c++><stl><queue><stdvector>", "AnswerCount": "1"}});