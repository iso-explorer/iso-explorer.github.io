post_cb({"21908272": {"ParentId": "21907836", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>At most one of the two conceptual copies can be elided. If you pass a temporary to the function, then that copy can be elided, per the third bullet of C++11 12.8/31:</p>\n<blockquote>\n<p id=\"so_21907836_21908272_0\">when a temporary class object ... would be copied/moved ..., the copy/move operation can be omitted</p>\n</blockquote>\n<p>The return can't be elided; that can only be done for temporaries (per the rule quoted above) or local variables, per the first bullet:</p>\n<blockquote>\n<p id=\"so_21907836_21908272_1\">in a return statement ... when the expression is the name of a\n  non-volatile automatic object (<strong>other than a function or catch-clause parameter</strong>) ... the copy/move operation can be omitted</p>\n</blockquote>\n<p>In the absence of elision, return values are treated as <em>rvalues</em> and moved if possible (and it is possible here); function arguments are moved if they are <em>rvalues</em>, as they are in both your examples.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-02-20T13:13:21.603", "Id": "21908272", "Score": "4", "CreationDate": "2014-02-20T12:47:40.507", "LastActivityDate": "2014-02-20T13:13:21.603"}, "21907836": {"CommentCount": "4", "ViewCount": "127", "PostTypeId": "1", "LastEditorUserId": "341970", "CreationDate": "2014-02-20T12:28:58.870", "LastActivityDate": "2014-02-20T21:55:38.543", "Title": "Copy elision possible if returning parameter?", "AcceptedAnswerId": "21908272", "LastEditDate": "2014-02-20T21:55:38.543", "Id": "21907836", "Score": "2", "Body": "<p>Consider a function that takes an object by value, performs some operations on it and return that object, for example:</p>\n<pre><code>std::string MyToUpper (std::string s)\n{\n      std::transform(s.begin(), s.end(), s.begin(), std::toupper);\n      return s;\n}\n</code></pre>\n<p>Now you call this function with a temporary:</p>\n<pre><code>std::string Myupperstring = MyToUpper(\"text\");\n</code></pre>\n<p>Conceptually there is no copy needed. Are modern Compilers able to elide all copies in this case? If not, are there only moves? What about this case:</p>\n<pre><code>std::string Mylowerstring(\"text\");\nstd::string Myupperstring = MyToUpper(std::move(Mylowerstring));\n</code></pre>\n", "Tags": "<c++><gcc><c++11><compiler-construction><clang>", "OwnerUserId": "3265278", "AnswerCount": "3"}, "21908106": {"ParentId": "21907836", "CommentCount": "0", "Body": "<p>I don't think so.  Some of the copies can, and probably will be\neliminated, but NVRO cannot apply, since it counts on the\nvariable being constructed in the same location as the return\nvalue.  Except that with value arguments, the argument is\nconstructed by the caller, who cannot see (in general) that the\nargument will be returned, and so cannot construct it in the\ncorrect place. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "21908106", "Score": "2", "CreationDate": "2014-02-20T12:40:21.943", "LastActivityDate": "2014-02-20T12:40:21.943"}, "bq_ids": {"n4140": {"so_21907836_21908272_1": {"section_id": 480, "quality": 1.0, "length": 17}, "so_21907836_21908272_0": {"section_id": 480, "quality": 1.0, "length": 10}}, "n3337": {"so_21907836_21908272_1": {"section_id": 471, "quality": 1.0, "length": 17}, "so_21907836_21908272_0": {"section_id": 471, "quality": 1.0, "length": 10}}, "n4659": {"so_21907836_21908272_1": {"section_id": 502, "quality": 1.0, "length": 17}, "so_21907836_21908272_0": {"section_id": 502, "quality": 0.7, "length": 7}}}, "21913831": {"ParentId": "21907836", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_21907836_21913831_0\">Conceptually there is no copy needed. Are modern Compilers able to elide all copies in this case?</p>\n</blockquote>\n<p><strong>Yes, if the function is inlined, it is possible.</strong> However, I would like to consider the code example below instead of yours because <code>std::string</code> is an untamed beast full of obscure optimizations.</p>\n<p>So let's consider an example with <code>int</code>s instead. The caller has <code>{1, 2, 3}</code> and would like to create in-place a <code>std::vector&lt;int&gt;</code> from this that contains <code>{2, 4, 6}</code>. (It is roughly the analogue of having the <em>literal</em> <code>\"text\"</code> at the caller and wanting to construct in-place a <code>std::string</code> that  contains <code>\"TEXT\"</code>.) </p>\n<p>Code:</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; mult(vector&lt;int&gt; v) {\n  for (int&amp; e : v)\n    e *= 2;\n  return v;\n}\n\nint main() {\n  vector&lt;int&gt; v( mult({1, 2, 3}) );\n  for (int i : v)\n    printf(\"%d\\n\", i);\n}\n</code></pre>\n<p>If I compile it with gcc 4.7.2 as: <code>g++ -O3 -fwhole-program -Wall -Wextra -std=c++11 -S file.cpp</code>, I get exactly one <code>std::vector&lt;int&gt;</code> destructor call in the assembly. <strong>The vector was created in-place.</strong> The generated assembly is as good as it can get.</p>\n<p>If I compile the exact same code but omit the <code>-fwhole-program</code> flag, the <code>mult()</code> function doesn't get inlined, and I get two calls to the destructor of <code>std::vector&lt;int&gt;</code>. The generated assembly is also much worse than in the previous case.</p>\n<p>Clang doesn't know the <code>-fwhole-program</code> flag, so I added the <code>static</code> keyword to <code>mult()</code>:</p>\n<p><code>static vector&lt;int&gt; mult(vector&lt;int&gt; v) { ...</code></p>\n<p>and then it also creates the vector in-place.</p>\n<hr>\n<p><a href=\"https://stackoverflow.com/a/21908106/341970\">From James Kanze's answer:</a></p>\n<blockquote>\n<p id=\"so_21907836_21913831_1\">with value arguments, the argument is constructed by the caller, who\n  cannot see (in general) that the argument will be returned, and so\n  cannot construct it in the correct place.</p>\n</blockquote>\n<p>What I did above (inlining <code>mult()</code>) made it possible that the caller <em>can see</em> that the argument will be returned and in effect, the result was constructed in-place.</p>\n</hr>", "OwnerUserId": "341970", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:43.360", "Id": "21913831", "Score": "1", "CreationDate": "2014-02-20T16:29:25.457", "LastActivityDate": "2014-02-20T16:36:11.013"}});