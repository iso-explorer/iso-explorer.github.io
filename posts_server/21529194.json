post_cb({"21529194": {"CommentCount": "8", "AcceptedAnswerId": "21529283", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-02-03T13:53:15.923", "LastActivityDate": "2014-08-22T15:35:10.940", "LastEditDate": "2014-08-21T06:04:01.120", "ViewCount": "42603", "FavoriteCount": "6", "Title": "C++ warning: deprecated conversion from string constant to \u2018char*\u2019 [-Wwrite-strings]", "Id": "21529194", "Score": "22", "Body": "<p>I am using gnuplot to draw a graph in C++. The graph is being plot as expected but there is a warning during compilation. What does the warning mean?</p>\n<pre><code>warning: deprecated conversion from string constant to \u2018char*\u2019 [-Wwrite-strings]\n</code></pre>\n<p>This is the function I am using:</p>\n<pre><code>void plotgraph(double xvals[],double yvals[], int NUM_POINTS)\n{\n    char * commandsForGnuplot[] = {\"set title \\\"Probability Graph\\\"\", \n        \"plot     'data.temp' with lines\"};\n    FILE * temp = fopen(\"data.temp\", \"w\");\n    FILE * gnuplotPipe = popen (\"gnuplot -persistent \", \"w\");\n    int i;\n    for (i=0; i &lt; NUM_POINTS; i++)\n    {\n        fprintf(temp, \"%lf %lf \\n\", xvals[i], yvals[i]); \n        //Write the data to a te  mporary file\n    }\n    for (i=0; i &lt; NUM_COMMANDS; i++)\n    {\n        fprintf(gnuplotPipe, \"%s \\n\", commandsForGnuplot[i]); \n        //Send commands to gn  uplot one by one.\n    }\n    fflush(gnuplotPipe);\n}\n</code></pre>\n", "Tags": "<c++><string-literals>", "OwnerUserId": "3206808", "AnswerCount": "1"}, "21529283": {"ParentId": "21529194", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>String literals are an <em>array of const char</em>, we can see this from the draft C++ standard section <code>2.14.5</code> <em>String literals</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_21529194_21529283_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal <strong>has type \u201carray of n const char\u201d</strong>, where n is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p>so this change will remove the warning:</p>\n<pre><code>const char * commandsForGnuplot[] = {\"set title \\\"Probability Graph\\\"\", \"plot     'data.temp' with lines\"};\n^^^^^\n</code></pre>\n<p>Note, allowing a *non-const char** to point to <em>const</em> data is a bad idea since modifying a <em>const</em> or a <em>string literal</em> is <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"noreferrer\">undefined behavior</a>. We can see this by going to section <code>7.1.6.1</code> <em>The cv-qualifiers</em> which says:</p>\n<blockquote>\n<p id=\"so_21529194_21529283_1\">Except that any class member declared mutable (7.1.1) can be modified,\n  any attempt to modify a const object during its lifetime (3.8) results\n  in undefined behavior.</p>\n</blockquote>\n<p>and section <code>2.14.5</code> <em>String literals</em> which says:</p>\n<blockquote>\n<p id=\"so_21529194_21529283_2\">Whether all string literals are distinct (that is, are stored in\n  nonoverlapping objects) is implementation defined. The effect of\n  attempting to modify a string literal is undefined.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-08-22T15:35:10.940", "Id": "21529283", "Score": "35", "CreationDate": "2014-02-03T13:57:51.210", "LastActivityDate": "2014-08-22T15:35:10.940"}, "bq_ids": {"n4140": {"so_21529194_21529283_1": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}, "so_21529194_21529283_2": {"section_id": 5361, "quality": 0.8235294117647058, "length": 14}, "so_21529194_21529283_0": {"section_id": 5356, "quality": 1.0, "length": 26}}, "n3337": {"so_21529194_21529283_1": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}, "so_21529194_21529283_2": {"section_id": 5157, "quality": 0.8235294117647058, "length": 14}, "so_21529194_21529283_0": {"section_id": 5153, "quality": 1.0, "length": 26}}, "n4659": {"so_21529194_21529283_2": {"section_id": 6789, "quality": 0.8235294117647058, "length": 14}, "so_21529194_21529283_1": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}, "so_21529194_21529283_0": {"section_id": 6781, "quality": 1.0, "length": 26}}}});