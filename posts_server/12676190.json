post_cb({"bq_ids": {"n4140": {"so_12676190_12676256_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 72}, "so_12676190_12676190_0": {"length": 8, "quality": 0.8, "section_id": 228}}, "n3337": {"so_12676190_12676256_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 67}, "so_12676190_12676190_0": {"length": 8, "quality": 0.8, "section_id": 221}}, "n4659": {"so_12676190_12676190_0": {"length": 8, "quality": 0.8, "section_id": 236}}}, "12676284": {"Id": "12676284", "PostTypeId": "2", "Body": "<p>you can call the function this way:</p>\n<pre><code>b.template foo&lt;T0&gt;();\n</code></pre>\n", "LastActivityDate": "2012-10-01T15:27:07.447", "CommentCount": "0", "CreationDate": "2012-10-01T15:27:07.447", "ParentId": "12676190", "Score": "8", "OwnerUserId": "1633627"}, "12676256": {"Id": "12676256", "PostTypeId": "2", "Body": "<p>Just found it:</p>\n<p>According to C++'03 Standard 14.2/4:</p>\n<blockquote>\n<p id=\"so_12676190_12676256_0\">When the name of a member template specialization appears after <code>.</code> or\n  <code>-&gt;</code> in a postfix-expression, or after nested-name-specifier in a qualified-id, and the postfix-expression or qualified-id explicitly depends on a template-parameter (14.6.2), the member template name must be prefixed by the keyword <code>template</code>. Otherwise the name is assumed to name a non-template.</p>\n</blockquote>\n<p>Correct code is:</p>\n<pre><code>b.template foo&lt;T0&gt;();\n</code></pre>\n", "LastEditorUserId": "596781", "LastActivityDate": "2012-10-01T15:33:10.297", "Score": "34", "CreationDate": "2012-10-01T15:25:28.287", "ParentId": "12676190", "CommentCount": "1", "OwnerUserId": "712302", "LastEditDate": "2012-10-01T15:33:10.297"}, "12676190": {"ViewCount": "15829", "Body": "<blockquote>\n<p id=\"so_12676190_12676190_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1840253/c-template-member-function-of-template-class-called-from-template-function\">C++ template member function of template class called from template function</a> </br></p>\n</blockquote>\n<pre><code>template&lt;class T1&gt;\nclass A \n{\npublic:\n    template&lt;class T0&gt;\n    void foo() const {}\n};\n\ntemplate&lt;class T0,class T1&gt;\nvoid bar( const A&lt;T1&gt;&amp; b )\n{\n    b.foo&lt;T0&gt;();  // This throws \" expected primary-expression before \u2018&gt;\u2019 token\"\n}\n</code></pre>\n<p>I can change it to </p>\n<pre><code>b-&gt;A&lt;T1&gt;::template foo&lt;T0&gt;();\n</code></pre>\n<p>which compiles fine. However I can also change it to</p>\n<pre><code>b.A&lt;T1&gt;::template foo&lt;T0&gt;();\n</code></pre>\n<p>which compiles fine too. eh?</p>\n<p>How does one correctly call the template member function in the sense of the original code?</p>\n", "AcceptedAnswerId": "12676256", "Title": "How to call a template member function?", "CreationDate": "2012-10-01T15:21:31.733", "Id": "12676190", "CommentCount": "1", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2017-11-24T22:37:42.737", "LastEditorUserId": "921070", "LastActivityDate": "2017-11-24T22:37:42.737", "ClosedDate": "2012-11-14T12:47:12.677", "Score": "22", "OwnerUserId": "712302", "Tags": "<c++><templates>", "AnswerCount": "2"}});