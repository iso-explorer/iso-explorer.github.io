post_cb({"bq_ids": {"n4140": {"so_14080408_14080459_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4439}}, "n3337": {"so_14080408_14080459_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4276}}, "n4659": {"so_14080408_14080459_0": {"length": 12, "quality": 0.8, "section_id": 5704}}}, "14080459": {"Id": "14080459", "PostTypeId": "2", "Body": "<p>Yes, this is standard behavior. From the standard (\u00a720.7.2.2.6 <em>shared_ptr creation</em> ):</p>\n<blockquote>\n<p id=\"so_14080408_14080459_0\">Effects: Allocates memory suitable for an object of type T and constructs an object in that memory via the placement new expression <code>::new (pv) T(std::forward&lt;Args&gt;(args)...).</code></p>\n</blockquote>\n<p>This allows <code>make_shared</code> to allocate the storage for both the object and the data structure for the shared pointer itself (the \"control block\") in a single allocation, for efficiency reasons.</p>\n<p>You could use <a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr/allocate_shared\"><code>std::allocate_shared</code></a> if you want to control that storage allocation.</p>\n", "LastEditorUserId": "635608", "LastActivityDate": "2012-12-29T09:48:55.577", "Score": "16", "CreationDate": "2012-12-29T09:42:50.877", "ParentId": "14080408", "CommentCount": "1", "OwnerUserId": "635608", "LastEditDate": "2012-12-29T09:48:55.577"}, "14080408": {"ViewCount": "2959", "Body": "<p>Consider <a href=\"http://ideone.com/8wO6Hc\">this code</a>:</p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;iostream&gt;\n\n\nclass SomeClass {\npublic:\n    SomeClass() {\n        std::cout &lt;&lt; \"SomeClass()\" &lt;&lt; std::endl;\n    }\n\n    ~SomeClass() {\n        std::cout &lt;&lt; \"~SomeClass()\" &lt;&lt; std::endl;\n    }\n\n    void* operator new(std::size_t size) {\n        std::cout &lt;&lt; \"Custom new\" &lt;&lt; std::endl;\n        return ::operator new(size);\n    }\n\n    void operator delete(void* ptr, std::size_t size) {\n        std::cout &lt;&lt; \"Custom delete\" &lt;&lt; std::endl;\n        ::operator delete(ptr);\n    }\n};\n\n\n\nint main() {\n    std::shared_ptr&lt;SomeClass&gt; ptr1(new SomeClass);\n    std::cout &lt;&lt; std::endl &lt;&lt; \"Another one...\" &lt;&lt; std::endl &lt;&lt; std::endl;\n    std::shared_ptr&lt;SomeClass&gt; ptr2(std::make_shared&lt;SomeClass&gt;());\n    std::cout &lt;&lt; std::endl &lt;&lt; \"Done!\" &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Here is its output:</p>\n<pre><code>Custom new\nSomeClass()\n\nAnother one...\n\nSomeClass()\n\nDone!\n\n~SomeClass()\n~SomeClass()\nCustom delete\n</code></pre>\n<p>Clearly, <code>std::make_shared()</code> didn't call the <code>new</code> operator -- it's using a custom allocator. Is this the standard behavior for <code>std::make_shared()</code>?</p>\n", "AcceptedAnswerId": "14080459", "Title": "Does std::make_shared() use custom allocators?", "CreationDate": "2012-12-29T09:35:43.887", "Id": "14080408", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2012-12-30T19:17:40.230", "Score": "15", "OwnerUserId": "1619294", "Tags": "<c++><c++11><shared-ptr><make-shared>", "AnswerCount": "2"}, "14093697": {"Id": "14093697", "PostTypeId": "2", "Body": "<p>To expand on Mat's correct answer, <code>make_shared</code> is typically implemented by allocating an object that contains the <code>shared_ptr</code> reference counts and a buffer of uninitialized bytes:</p>\n<pre><code>template&lt;typename T&gt;\n  struct shared_count_inplace\n  {\n    long m_count;\n    long weak_count;\n    typename std::aligned_storage&lt;sizeof(T)&gt;::type m_storage;\n    // ...\n  };\n</code></pre>\n<p>This is the type which will be allocated on the heap, not your type, so your type's <code>new</code> is not called. Then your type will be constructed using placement <code>new</code> at the location <code>(void*)&amp;m_storage</code>.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2012-12-30T19:17:40.230", "Score": "2", "CreationDate": "2012-12-30T19:07:05.463", "ParentId": "14080408", "CommentCount": "0", "OwnerUserId": "981959", "LastEditDate": "2012-12-30T19:17:40.230"}});