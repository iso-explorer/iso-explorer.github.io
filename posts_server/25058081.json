post_cb({"25058081": {"CommentCount": "0", "ViewCount": "40", "OwnerDisplayName": "user2953119", "CreationDate": "2014-07-31T11:44:08.263", "LastActivityDate": "2014-07-31T12:09:58.080", "Title": "Alignment of a sequence of an element", "PostTypeId": "1", "Id": "25058081", "Score": "0", "Body": "<p>Rule, describing object pointer type is the following (3.7.4.3, N3797):</p>\n<blockquote>\n<p id=\"so_25058081_25058081_0\">a sequence of elements in an array of narrow character type (3.9.1),\n  where the size and <strong>alignment of the sequence</strong> match those of some\n  object pointer type.</p>\n</blockquote>\n<p>I suppose that the size of sequence is sum of any element size in the sequence. But what's definition of <strong>alignement of sequence</strong>?</p>\n<p>3.11/1 N3797 says:</p>\n<blockquote>\n<p id=\"so_25058081_25058081_1\"><strong>Object types</strong> have alignment requirements (3.9.1, 3.9.2) which place\n  restrictions on the addresses at which an object of that type may be\n  allocated.</p>\n</blockquote>\n<p>A sequence is an object type or is something else?</p>\n", "Tags": "<c++><alignment>", "AnswerCount": "1"}, "25058258": {"ParentId": "25058081", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>\u201cAlignment\u201d is the alignment of the start address of the object.</p>\n<p>For example, with an alignment of 4 the start address must be a multiple of 4.</p>\n<p>Basically this is a hardware issue, that accessing, say, a 4 byte object is more efficient (can be done directly in one operation) when the address is a multiple of 4. On many platforms unaligned access is treated as failure. In Windows, for \u201ccertain architectures\u201d the behavior can be specified by calling <code>SetErrorMode</code> with or without the <code>SEM_NOALIGNMENTFAULTEXCEPT</code> flag.</p>\n<hr>\n<p>Regarding the quoted passage from the standard, in the context of possibly treating the sequence of bytes as an object pointer, it must have at least as strict alignment as the object pointer.</p>\n<p>If not, then the sequence can\u2019t possibly be a representation of an object pointer, and thus cannot possibly constitute a logical reference to something (for the purpose of garbage collection).</p>\n</hr>", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2014-07-31T12:09:58.080", "Id": "25058258", "Score": "2", "CreationDate": "2014-07-31T11:54:01.843", "LastActivityDate": "2014-07-31T12:09:58.080"}, "bq_ids": {"n4140": {"so_25058081_25058081_1": {"section_id": 7240, "quality": 0.7857142857142857, "length": 11}, "so_25058081_25058081_0": {"section_id": 7184, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_25058081_25058081_1": {"section_id": 6984, "quality": 0.7857142857142857, "length": 11}, "so_25058081_25058081_0": {"section_id": 6928, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_25058081_25058081_1": {"section_id": 8749, "quality": 0.7142857142857143, "length": 10}, "so_25058081_25058081_0": {"section_id": 8692, "quality": 0.9411764705882353, "length": 16}}}});