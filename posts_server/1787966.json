post_cb({"1788961": {"Id": "1788961", "PostTypeId": "2", "Body": "<p>One can change capacity of vector by using resize() API on vector if one is sure of what data vector is going to store and that is implementation specific.</p>\n", "LastActivityDate": "2009-11-24T09:34:18.783", "CommentCount": "3", "CreationDate": "2009-11-24T09:34:18.783", "ParentId": "1787966", "Score": "-1", "OwnerUserId": "205475"}, "1787966": {"ViewCount": "2149", "Body": "<p>Looks like a stupid question. But comment to my <a href=\"https://stackoverflow.com/questions/1787856/what-is-the-element-value-in-an-uninitialized-vector/1787863#1787863\">answer</a> to one of the SO question made me to think again.</p>\n<p>[ comment says, capacity need not be zero for empty vector]</p>\n<p>By default my answer would be 0 as there are no elements inside vector. It makes sense to keep the capacity as 0 and  on the first allocation it can be increased without any performance hits.</p>\n<p>But standard does not say anything one this.  ( I checked in Josuttis book as well). </p>\n<p>Is it purely implementation specific? Does any STL vendor use some arbitrary number as capcity for the empty vector?  </p>\n<p>Any thoughts...</p>\n", "AcceptedAnswerId": "1788037", "Title": "what is the capacity of an empty vector?", "CreationDate": "2009-11-24T05:21:26.420", "Id": "1787966", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:45:29.597", "LastEditorUserId": "-1", "LastActivityDate": "2009-11-24T09:34:18.783", "Score": "5", "OwnerUserId": "64960", "Tags": "<c++><stl><vector>", "AnswerCount": "5"}, "1788037": {"Id": "1788037", "PostTypeId": "2", "Body": "<p>C++ Standard 23.2.4.2 only says that <code>vector::capacity</code> is</p>\n<blockquote>\n<p id=\"so_1787966_1788037_0\">The total number of elements that the vector can hold without requiring reallocation.</p>\n</blockquote>\n<p>That means that the actual value is fully implementation specific.</p>\n", "LastActivityDate": "2009-11-24T05:38:55.887", "CommentCount": "2", "CreationDate": "2009-11-24T05:38:55.887", "ParentId": "1787966", "Score": "16", "OwnerUserId": "123111"}, "1788010": {"Id": "1788010", "PostTypeId": "2", "Body": "<p>a peek into STL source code in vc6 and vc2008 tells that vector capacity is zero on construction</p>\n", "LastActivityDate": "2009-11-24T05:33:06.647", "CommentCount": "3", "CreationDate": "2009-11-24T05:33:06.647", "ParentId": "1787966", "Score": "-1", "OwnerUserId": "217571"}, "1787990": {"Id": "1787990", "PostTypeId": "2", "Body": "<p>For a quick scan of Google and bouncing off a few random forums (of generally unknown pedigree, so, yeah), it appears to be implementation specific.</p>\n<p>Pretty much a non-issue since you can immediately change it with a call to <code>reserve</code>.</p>\n", "LastActivityDate": "2009-11-24T05:28:11.447", "CommentCount": "0", "CreationDate": "2009-11-24T05:28:11.447", "ParentId": "1787966", "Score": "0", "OwnerUserId": "215568"}, "bq_ids": {"n4140": {"so_1787966_1788037_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 967}}, "n3337": {"so_1787966_1788037_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 957}}, "n4659": {"so_1787966_1788037_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 1029}}}, "1787981": {"Id": "1787981", "PostTypeId": "2", "Body": "<p>The capacity can be whatever the implementors feel is correct or necessary.</p>\n<p>It should also be noted it's never \"safe\" to assume you know the current <code>capacity()</code> without a call to that function. If you reserve 10 elements, the implementor is of free to allocate one hundred if it so wants to. Or 11, 42 (preferred) or just 10.</p>\n", "LastEditorUserId": "87234", "LastActivityDate": "2009-11-24T07:11:11.613", "Score": "7", "CreationDate": "2009-11-24T05:26:35.833", "ParentId": "1787966", "CommentCount": "1", "OwnerUserId": "87234", "LastEditDate": "2009-11-24T07:11:11.613"}});