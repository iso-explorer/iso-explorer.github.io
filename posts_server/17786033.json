post_cb({"17786531": {"Id": "17786531", "PostTypeId": "2", "Body": "<p>I don't have a copy of the actual C++ standard, but the latest working draft says:</p>\n<p>8.4.3/2 <code>[dcl.fct.def.delete]</code></p>\n<blockquote>\n<p id=\"so_17786033_17786531_0\">A program that refers to a deleted function implicitly or explicitly,\n  other than to declare it, is ill-formed.\n  [...]</p>\n</blockquote>\n<p>When an object is destructed, the destructors of any member objects are implicitly called, and even though you're not destroying any objects a default destructor, that references the destructor of its members, is still created. Based on that, the error you are getting seems correct to me.</p>\n", "LastEditorUserId": "947836", "LastActivityDate": "2013-07-22T11:58:12.850", "Score": "2", "CreationDate": "2013-07-22T11:34:36.307", "ParentId": "17786033", "CommentCount": "2", "OwnerUserId": "506413", "LastEditDate": "2013-07-22T11:58:12.850"}, "17786209": {"Id": "17786209", "PostTypeId": "2", "Body": "<p>Your question is not correct, constructor is defined as deleted, since destructor of member of this class is defined as deleted, however, you simply can write</p>\n<pre><code>DeletedDtor* d = new DeletedDtor();\n</code></pre>\n<p>and all will works fine (without delete of course), so gcc and clang are both correct.</p>\n<p>n3376 12.1/8</p>\n<p><blockquote><p id=\"so_17786033_17786209_0\">\nA\ndefaulted default constructor for class X <strong>is defined as deleted</strong> if:</p>\n<p id=\"so_17786033_17786209_1\">\u2014 any direct or virtual base class or <strong>non-static data member has a type with a destructor that is deleted</strong>\nor inaccessible from the defaulted default constructor.</p></blockquote></p>\n", "LastActivityDate": "2013-07-22T11:17:39.520", "CommentCount": "6", "CreationDate": "2013-07-22T11:17:39.520", "ParentId": "17786033", "Score": "4", "OwnerUserId": "1498580"}, "17786082": {"Id": "17786082", "PostTypeId": "2", "Body": "<p>You cannot hold an instance of the class with deleted destructor. But you can hold a pointer to <code>DeletedDtor</code> in your <code>MyClass</code>:</p>\n<pre><code>class MyClass\n{\n  public:\n    MyClass() = default;\n\n  private:\n    DeletedDtor* a;\n};\n</code></pre>\n", "LastEditorUserId": "1065190", "LastActivityDate": "2013-07-22T11:16:44.990", "Score": "0", "CreationDate": "2013-07-22T11:10:39.103", "ParentId": "17786033", "CommentCount": "2", "OwnerUserId": "1065190", "LastEditDate": "2013-07-22T11:16:44.990"}, "17787288": {"Id": "17787288", "PostTypeId": "2", "Body": "<p>Some rationale for this behaviour: There's a situation where the destructor of a member object is automatically invoked outside of the containing object's destructor: in case (something in) the containing object's <em>constructor</em> throws. Before the constructor exits, the destructors of already-constructed members and base class subobjects are invoked in reverse order of construction.</p>\n", "LastActivityDate": "2013-07-22T12:13:19.420", "CommentCount": "1", "CreationDate": "2013-07-22T12:13:19.420", "ParentId": "17786033", "Score": "6", "OwnerUserId": "279597"}, "bq_ids": {"n4140": {"so_17786033_17786209_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 369}, "so_17786033_17786209_0": {"length": 6, "quality": 1.0, "section_id": 369}, "so_17786033_17786531_0": {"length": 9, "quality": 1.0, "section_id": 3277}}, "n3337": {"so_17786033_17786209_1": {"length": 14, "quality": 1.0, "section_id": 359}, "so_17786033_17786209_0": {"length": 6, "quality": 1.0, "section_id": 359}, "so_17786033_17786531_0": {"length": 9, "quality": 1.0, "section_id": 3148}}, "n4659": {"so_17786033_17786209_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 382}, "so_17786033_17786209_0": {"length": 6, "quality": 1.0, "section_id": 382}, "so_17786033_17786531_0": {"length": 9, "quality": 1.0, "section_id": 4035}}}, "17786033": {"ViewCount": "410", "Body": "<p>I have a type whose destructor has been explicitly deleted; I'd like to make an instance of that type a member of another class.</p>\n<p>My expectation is that should be fine provided no attempt is made to delete an instance of the containing class (ie, the containing class's destructor would be invalid).</p>\n<p>However, both clang (v3.3) and g++ (v 4.6.3) give an error when an attempt is made to instantiate the <em>constructor</em> of the parent class.</p>\n<p>For example:</p>\n<pre><code>class DeletedDtor \n{\n  public:\n    DeletedDtor() {}\n    ~DeletedDtor() = delete;\n};\n\nclass MyClass\n{\n  public:\n    MyClass() = default;\n    ~MyClass() = delete;\n\n  private:\n    DeletedDtor a;\n};\n\nint main() {\n    MyClass *p = new MyClass();\n}\n</code></pre>\n<p>Under g++, this gives:</p>\n<pre><code>test.cpp: In function \u2018int main()\u2019:\ntest.cpp:19:30: error: use of deleted function \u2018MyClass::MyClass()\u2019\ntest.cpp:11:5: error: \u2018MyClass::MyClass()\u2019 is implicitly deleted because the default definition would be ill-formed:\ntest.cpp:11:5: error: use of deleted function \u2018DeletedDtor::~DeletedDtor()\u2019\ntest.cpp:5:5: error: declared here\n</code></pre>\n<p>Defining the MyClass constructor myself, rather than letting it take the default implementation, doesn't help either:</p>\n<pre><code>class DeletedDtor \n{\n  public:\n    DeletedDtor() {}\n    ~DeletedDtor() = delete;\n};\n\nclass MyClass\n{\n  public:\n    MyClass();\n    ~MyClass() = delete;\n\n  private:\n    DeletedDtor a;\n};\n\nMyClass::MyClass() : a() {}\n\nint main() {\n    MyClass *p = new MyClass();\n}\n</code></pre>\n<p>Which gives the compilation error:</p>\n<pre><code>test2.cpp: In constructor \u2018MyClass::MyClass()\u2019:\ntest2.cpp:18:24: error: use of deleted function \u2018DeletedDtor::~DeletedDtor()\u2019\ntest2.cpp:5:5: error: declared here\n</code></pre>\n", "AcceptedAnswerId": "17787288", "Title": "C++11: Can I create a field whose type has a deleted destructor?", "CreationDate": "2013-07-22T11:07:57.017", "Id": "17786033", "CommentCount": "6", "LastEditDate": "2013-07-22T12:15:21.710", "PostTypeId": "1", "LastEditorUserId": "637864", "LastActivityDate": "2013-07-22T12:15:21.710", "Score": "3", "OwnerUserId": "637864", "Tags": "<c++><c++11>", "AnswerCount": "4"}});