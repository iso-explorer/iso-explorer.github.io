post_cb({"17233146": {"LastActivityDate": "2013-06-21T10:53:30.773", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_17232890_17233146_0\">I mean what should I to do to get <code>b.m_data[] = {false, false, false}</code> after <code>SafeArray&lt;bool, 3&gt; b;</code> has been constructed?</p>\n</blockquote>\n<p>I am not sure I understand your question correctly, but if I do, then all you need to do is writing a default constructor that initializes your array:</p>\n<pre><code>SafeArray() : m_data()\n{\n}\n</code></pre>\n<p>The complete code:</p>\n<pre><code>template &lt;typename T, int N&gt; class SafeArray\n{\npublic:\n    SafeArray() : m_data()\n    {\n    }\n    T &amp;operator[](int index)\n    {\n        assert(0 &lt;= index &amp;&amp; index &lt; N);\n        return m_data[index];\n    }\nprivate:\n    T m_data[N];\n};\n</code></pre>\n<p>And a <a href=\"http://coliru.stacked-crooked.com/view?id=c61ad7b024bc57c68e84a25f6830d848-7f4bc2c90970fdf19c48ebf8cc2bae3f\" rel=\"nofollow\"><strong>live example</strong></a>.</p>\n", "CreationDate": "2013-06-21T10:36:27.320", "LastEditDate": "2013-06-21T10:53:30.773", "ParentId": "17232890", "Id": "17233146", "LastEditorUserId": "1932150", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1932150"}, "17233157": {"LastActivityDate": "2013-06-21T10:43:32.010", "CommentCount": "2", "Body": "<p>Since you are using C++03 (therefore you don't have <code>std::array</code>) I would rather recommend you <code>boost::array</code> which is, basically, a C++03 implementation of <code>std::array</code>. (Actually, <code>std::array</code> was inspired by <code>boost::array</code>).</p>\n<p>Otherwise, make your class an aggregate, that is, (as per C++03 8.5.1/1)</p>\n<blockquote>\n<blockquote>\n<p id=\"so_17232890_17233157_1\">An aggregate is an array or class (clause 9) with no user-declared constructor, no private protected non-static data member (clause 11), no base classes (clause 10), and no virtual functions.</p>\n</blockquote>\n</blockquote>\n<p>Then your class will support aggregate initialization as you want.</p>\n<p><strong>Update:</strong> Reading the OP again (and <a href=\"https://stackoverflow.com/users/1932150/andy-prowl\">Andy Prowl</a>'s <a href=\"https://stackoverflow.com/a/17233146/1137388\">answer</a>), I'm not sure I understand the question. What I propose here is a way to initialize <code>SafeArray</code> at construction time, e.g.,</p>\n<pre><code>SafeArray&lt;bool, 3&gt; b = { false, false, false };\n</code></pre>\n", "CreationDate": "2013-06-21T10:37:21.480", "LastEditDate": "2017-05-23T12:20:25.283", "ParentId": "17232890", "Id": "17233157", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "0", "OwnerUserId": "1137388"}, "17232890": {"CreationDate": "2013-06-21T10:22:52.560", "ViewCount": "1346", "Id": "17232890", "AcceptedAnswerId": "17233146", "Score": "3", "Title": "Initialize C++ array member in template class", "LastEditorUserId": "63550", "CommentCount": "8", "Body": "<p>I need to implement a safe array class that controls index when accessing underlying C array:</p>\n<pre><code>template &lt;typename T, int N&gt; class SafeArray\n{\npublic:\n    T &amp;operator[](int index)\n    {\n        assert(0 &lt;= index &amp;&amp; index &lt; N);\n        return m_data[index];\n    }\nprivate:\n    T m_data[N];\n};\n</code></pre>\n<p>And instead of <code>bool a[3];</code>, now I write <code>SafeArray&lt;bool, 3&gt; a;</code>.</p>\n<p>How do I support array initialization like <code>bool b[3] = {false};</code>? I mean what should I do to get <code>b.m_data[] = {false, false, false}</code> after <code>SafeArray&lt;bool, 3&gt; b;</code> has been constructed?</p>\n<p>I guess I should add a constructor to <code>SafeArray</code>, but what would be a body of that constructor? Template parameter <code>T</code> can be anything, not necessarily <code>bool</code>. I am using pre-C++11.</p>\n", "Tags": "<c++><arrays><templates>", "LastEditDate": "2014-01-09T10:41:22.917", "LastActivityDate": "2014-01-09T10:41:22.917", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "674548"}, "bq_ids": {"n4140": {"so_17232890_17233157_1": {"length": 10, "quality": 0.5882352941176471, "section_id": 3298}, "so_17232890_17233157_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 3298}}, "n3337": {"so_17232890_17233157_1": {"length": 10, "quality": 0.5882352941176471, "section_id": 3168}, "so_17232890_17233157_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 3168}}}, "17233229": {"CommentCount": "0", "Body": "<p>What about...?</p>\n<pre><code>SafeArray() {\n    for (int i = 0; i &lt; N; ++i) {\n        m_data[i] = T();\n    }\n}\n</code></pre>\n", "CreationDate": "2013-06-21T10:41:39.583", "ParentId": "17232890", "Id": "17233229", "LastActivityDate": "2013-06-21T10:41:39.583", "PostTypeId": "2", "Score": "0", "OwnerUserId": "2095459"}});