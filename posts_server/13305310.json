post_cb({"13305377": {"ParentId": "13305310", "CommentCount": "0", "Body": "<p>The <code>%</code> operator is only allowed on integral types (and user defined\ntypes which overload it).  For floating point, you need the function\n<code>fmod</code>. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "13305377", "Score": "7", "CreationDate": "2012-11-09T09:34:14.317", "LastActivityDate": "2012-11-09T09:34:14.317"}, "13305418": {"ParentId": "13305310", "CommentCount": "0", "Body": "<p>This code return you a double object</p>\n<pre><code>(num / i)\n</code></pre>\n<p>modulo operation is allowed only for int type. You can convert this to int type</p>\n<pre><code>( ((int) (num / i) ) % i)\n</code></pre>\n", "OwnerUserId": "650148", "PostTypeId": "2", "Id": "13305418", "Score": "0", "CreationDate": "2012-11-09T09:36:58.167", "LastActivityDate": "2012-11-09T09:36:58.167"}, "13305353": {"ParentId": "13305310", "CommentCount": "5", "Body": "<p>Actually what you want to do is check if <code>n</code> is divisible by <code>i</code> so all you have to change is </p>\n<pre><code>if ((num / i) % 1 == 0)\n</code></pre>\n<p>into</p>\n<pre><code>if (num % i == 0) \n</code></pre>\n<p>You should know that this is error-prone because you are using <code>double</code> as a type for <code>num</code>. You should use an <code>int</code> instead.</p>\n", "OwnerUserId": "1225541", "PostTypeId": "2", "Id": "13305353", "Score": "5", "CreationDate": "2012-11-09T09:32:42.897", "LastActivityDate": "2012-11-09T09:32:42.897"}, "13305310": {"CommentCount": "9", "ViewCount": "719", "PostTypeId": "1", "LastEditorUserId": "153285", "CreationDate": "2012-11-09T09:29:35.633", "LastActivityDate": "2012-11-09T09:38:51.843", "Title": "C++ test for divisibility with double", "AcceptedAnswerId": "13305353", "LastEditDate": "2012-11-09T09:38:51.843", "Id": "13305310", "Score": "3", "Body": "<p>why doesn\u00b4t <code>((num / i) % 1 == 0)</code> work in C++ when num is a double? and how would I instead write this code, that checks for factorials by checking if it leaves a remainder (etc 0.3333).    </p>\n<pre><code>int getFactorials (double num)\n{\n    int total = 0;      // if (total / 2) is equal too 'num' it is a perfect number.\n\n    for (int i = 1; i &lt; num; i++)\n    {\n        if ((num / i) % 1 == 0)\n        {\n            cout &lt;&lt; i &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><double><factorial><arithmetic-expressions>", "OwnerUserId": "1526334", "AnswerCount": "4"}, "13305423": {"ParentId": "13305310", "CommentCount": "0", "Body": "<p>The <code>%</code> operator is defined by C++11 \u00a75.6/4:</p>\n<blockquote>\n<p id=\"so_13305310_13305423_0\">if the quotient a/b is representable in the type of the result, (a/b)*b + a%b is equal to a.</p>\n</blockquote>\n<p>This is meaningless for floating point types. The definition of modulus depends on division rounding to an integer.</p>\n<p>As James Kanze says, use <a href=\"http://en.cppreference.com/w/cpp/numeric/math/fmod\" rel=\"nofollow\"><code>std::fmod</code></a> instead.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "13305423", "Score": "2", "CreationDate": "2012-11-09T09:37:04.683", "LastActivityDate": "2012-11-09T09:37:04.683"}, "bq_ids": {"n4140": {"so_13305310_13305423_0": {"section_id": 6137, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_13305310_13305423_0": {"section_id": 5901, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_13305310_13305423_0": {"section_id": 7634, "quality": 0.8333333333333334, "length": 5}}}});