post_cb({"47559033": {"ViewCount": "81", "Body": "<pre><code>class Part\n{\npublic:\n    ~Part() = delete;\n};\n\nclass CL\n{\npublic:\n    CL(){} //error: deleted destructor call\n    ~CL();\n    Part part;\n};\n\nint main()\n{\n}\n</code></pre>\n<p>This code gives an error associated with a <code>Part</code>'s deleted destructor call. What is context in default constructor for members destructor calling?</p>\n<p>P.S: As I know, destructor for a <code>Part</code> member must be called in <code>~CL()</code>, but it is specially not defined for demonstrating, that default constructor forces it anywhere</p>\n", "AcceptedAnswerId": "47560249", "Title": "Member's destructor calling from default constructor", "CreationDate": "2017-11-29T18:03:30.303", "Id": "47559033", "CommentCount": "19", "LastEditDate": "2017-11-29T18:39:54.837", "PostTypeId": "1", "LastEditorUserId": "7359094", "LastActivityDate": "2017-11-30T11:31:35.670", "Score": "1", "OwnerUserId": "3514538", "Tags": "<c++><constructor><language-lawyer><destructor>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_47559033_47565432_1": {"length": 11, "quality": 1.0, "section_id": 437}, "so_47559033_47565432_2": {"length": 8, "quality": 1.0, "section_id": 407}, "so_47559033_47565432_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 365}}, "n3337": {"so_47559033_47565432_0": {"length": 13, "quality": 0.5909090909090909, "section_id": 359}}, "n4659": {"so_47559033_47565432_1": {"length": 11, "quality": 1.0, "section_id": 457}, "so_47559033_47565432_2": {"length": 8, "quality": 1.0, "section_id": 425}, "so_47559033_47565432_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 377}}}, "47560249": {"Id": "47560249", "PostTypeId": "2", "Body": "<p>Every constructor needs to have access to it's members' destructors. When a constructor throws an exception, it must be able to destroy every member that was initialized before the exception was thrown. You can verify that this is true for every constructor. If you try adding arbitrary arguments to the constructor, the error still occurs, even with copy and move constructors.</p>\n<p>As it was mentioned in the comments, <code>CL() = default;</code> doesn't produce the error. This is because <code>CL() = default;</code> simply causes the compiler to produce the implicit default constructor it would normally generate. In this case, it appears the CL has a <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor#Deleted_implicitly-declared_default_constructor\" rel=\"nofollow noreferrer\">deleted implicitly-declared default constructor</a>, meaning the automatically generated implicit default constructor would be deleted. If you try the following, you see that the default constructor is not actually available :</p>\n<pre><code>#include &lt;type_traits&gt;\n\nclass Part\n{\npublic:\n    ~Part() = delete;\n};\n\nclass CL\n{\npublic:\n    CL() = default;\n    ~CL();\n    Part part;\n};\n\n// This assert passes\nstatic_assert(std::is_default_constructible&lt;CL&gt;::value == false, \"\");\n</code></pre>\n<p>However, I can't explain precisely <em>why</em> CL has a deleted implicitly-declared default constructor, nor can I explain why <code>CL() noexcept {};</code> doesn't work.</p>\n", "LastActivityDate": "2017-11-29T19:22:16.740", "CommentCount": "1", "CreationDate": "2017-11-29T19:22:16.740", "ParentId": "47559033", "Score": "1", "OwnerUserId": "7359094"}, "47559616": {"Id": "47559616", "PostTypeId": "2", "Body": "<p>If you keep the constructor commented out, but instantiate a CL object in your main, just like this:</p>\n<pre><code>int main()\n{\n  CL c;\n\n  return 0;\n}\n</code></pre>\n<p>the compiler will express a different and more accurate concern: </p>\n<p><em>'CL::CL()' is implicitly deleted because the default definition would be ill-formed: class CL</em></p>\n<p>Let's provide a constructor and explicitly delete it:</p>\n<pre><code>class Part\n{\npublic:\n    ~Part() = delete;\n};\n\nclass CL\n{\npublic:\n    CL() = delete;\n    Part part;\n};\n\nint main()\n{\n\n}\n</code></pre>\n<p>Compiler doesn't complain, but at this point a <code>class CL</code> instance can only be allocated without construction and deallocated without destruction, i.e. :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nclass Part\n{\npublic:\n    ~Part() = delete;\n    void dump() { std::cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; std::endl; }\n    int x;\n};\n\nclass CL\n{\npublic:\n    CL() = delete;    \n    Part part;\n};\n\nint main()\n{\n    std::allocator&lt;CL&gt; a;\n    CL * cl = a.allocate(1);\n    //a.construct(cl);  -&gt; yelds: use of deleted function 'CL::CL()'\n\n    cl-&gt;part.x = 42;\n    cl-&gt;part.dump();\n\n    //a.destroy(cl);   -&gt; yelds: use of deleted function 'CL::~CL()' AND use of deleted function 'Part::~Part()'\n    a.deallocate(cl, 1);\n}\n</code></pre>\n", "LastEditorUserId": "8873508", "LastActivityDate": "2017-11-30T11:31:35.670", "Score": "0", "CreationDate": "2017-11-29T18:42:32.747", "ParentId": "47559033", "CommentCount": "0", "OwnerUserId": "8873508", "LastEditDate": "2017-11-30T11:31:35.670"}, "47565432": {"Id": "47565432", "PostTypeId": "2", "Body": "<p>First, <code>Part</code> is a <em>potentially constructed subobject</em> of <code>CL</code> according to <a href=\"http://www.eel.is/c++draft/special#5\" rel=\"nofollow noreferrer\">[special]p5</a>.</p>\n<blockquote>\n<p id=\"so_47559033_47565432_0\">For a class, its non-static data members, its non-virtual direct base classes, and, if the class is not abstract, its virtual base classes are called its <em>potentially constructed subobjects</em>.</p>\n</blockquote>\n<p>So the destructor for <code>Part</code> is <em>potentially invoked</em> according to <a href=\"http://www.eel.is/c++draft/special#class.base.init-12\" rel=\"nofollow noreferrer\">[class.base.init]p12</a>, regardless of the existence of <code>nonexcept</code> or not. </p>\n<blockquote>\n<p id=\"so_47559033_47565432_1\">In a non-delegating constructor, the destructor for each potentially constructed subobject of class type is potentially invoked.</p>\n</blockquote>\n<p>Therefore the program is ill-formed according to <a href=\"http://www.eel.is/c++draft/class.dtor#12\" rel=\"nofollow noreferrer\">[class.dtor]p12</a>.</p>\n<blockquote>\n<p id=\"so_47559033_47565432_2\">A program is ill-formed if a destructor that is potentially invoked is deleted or not accessible from the context of the invocation.</p>\n</blockquote>\n<p>Note even though the deleted destructor is not actually invoked, the program is ill-formed as long as the destructor is <strong>potentially</strong> invoked.</p>\n", "LastActivityDate": "2017-11-30T03:30:08.420", "CommentCount": "1", "CreationDate": "2017-11-30T03:30:08.420", "ParentId": "47559033", "Score": "1", "OwnerUserId": "5376789"}});