post_cb({"23221448": {"ParentId": "23218925", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The <code>##</code> operator concatenates two preprocessing tokens and must yield a <em>single</em> valid token. For example, from section 6.10.3.3 of the C99 spec:</p>\n<blockquote>\n<p id=\"so_23218925_23221448_0\">For both object-like and function-like macro invocations, before the replacement list is\n  reexamined for more macro names to replace, each instance of a <code>##</code> preprocessing token\n  in the replacement list (not from an argument) is deleted and the preceding preprocessing\n  token is concatenated with the following preprocessing token. Placemarker preprocessing tokens are handled specially: concatenation of two placemarkers results in a single placemarker preprocessing token, and concatenation of a placemarker with a non-placemarker preprocessing token results in the non-placemarker preprocessing token. <strong>If the result is not a valid preprocessing token, the behavior is undefined.</strong> The resulting token is available for further macro replacement. The order of evaluation of <code>##</code> operators is unspecified.</p>\n</blockquote>\n<p>So the expansion <code>ExtBAR(name) ## _dud</code> is invalid since it would yield <code>ExtBAR(object)_dud</code>.</p>\n<p>I'd go with the following approach:</p>\n<pre><code>#ifdef FOO\n#  define ValFOO _foo\n#else\n#  define ValFOO\n#endif\n\n#ifdef BAR\n#  define ValBAR _bar\n#else\n#  define ValBAR\n#endif\n\n#ifdef DUD\n#  define ValDUD _dud\n#else\n#  define ValDUD\n#endif\n\n#define CONCAT(a, b, c, d) a ## b ## c ## d\n#define XCONCAT(a, b, c, d) CONCAT(a, b, c, d)\n#define EXTEND(name) XCONCAT(name, ValFOO, ValBAR, ValDUD)\n</code></pre>\n<p>The intermediate <code>XCONCAT</code> step is needed because macro arguments are not expanded if they're concatenated using <code>##</code>.</p>\n", "OwnerUserId": "1956010", "LastEditorUserId": "1956010", "LastEditDate": "2014-04-22T14:03:58.043", "Id": "23221448", "Score": "3", "CreationDate": "2014-04-22T13:47:14.687", "LastActivityDate": "2014-04-22T14:03:58.043"}, "23218925": {"CommentCount": "0", "ViewCount": "362", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2014-04-22T12:01:38.923", "LastActivityDate": "2016-05-17T17:09:44.710", "Title": "How to compose valid token depending on pre-defined macros (C++ preprocessor)?", "AcceptedAnswerId": "23221448", "LastEditDate": "2016-05-17T17:09:44.710", "Id": "23218925", "Score": "0", "Body": "<p>Suppose some tokens <code>FOO</code>, <code>BAR</code>, and <code>DUD</code> (and possibly more) are <code>#defined</code> or not. I would like to have a macro <code>EXTEND(name)</code> that generates a valid extended name, e.g.</p>\n<pre><code>#define FOO\n#undef  BAR\n#define DUD\nEXTEND(object)\n</code></pre>\n<p>expands to</p>\n<pre><code>object_foo_dud\n</code></pre>\n<p>Is it possible to write macro <code>EXTEND</code> with less than O(2<sup>n</sup>) lines if there are <code>n</code> macro tokens (like <code>FOO</code>, <code>BAR</code>, and <code>DUD</code>)? I think it should be possible with O(n) lines, but how?</p>\n<p>I've <strong>tried this</strong>:</p>\n<pre><code>#ifdef FOO\n#  define ExtFOO(name) name ## _foo\n#else\n#  define ExtFOO(name) name\n#endif\n\n#ifdef BAR\n#  define ExtBAR(name) ExtFOO(name) ## _bar\n#else\n#  define ExtBAR(name) ExtFOO(name)\n#endif\n\n#ifdef DUD\n#  define ExtDUD(name) ExtBAR(name) ## _dud\n#else\n#  define ExtDUD(name) ExtBAR(name)\n#endif\n\n#define EXTEND(name) ExtDUD(name)\n</code></pre>\n<p>but</p>\n<blockquote>\n<p id=\"so_23218925_23218925_0\">test.cc:26:5: error: pasting formed ')_dud', an invalid preprocessing token<br>\n          EXTEND(object)<br>\n          ^</br></br></p>\n</blockquote>\n", "Tags": "<c++><macros><c-preprocessor>", "OwnerUserId": "1023390", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23218925_23221448_0": {"section_id": 529, "quality": 0.9565217391304348, "length": 66}}, "n3337": {"so_23218925_23221448_0": {"section_id": 520, "quality": 0.9565217391304348, "length": 66}}, "n4659": {"so_23218925_23221448_0": {"section_id": 550, "quality": 0.9565217391304348, "length": 66}}}});