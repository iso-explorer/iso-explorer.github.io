post_cb({"15877037": {"ParentId": "15876960", "CommentCount": "0", "Body": "<p>It is conditional not a loop. If it is true then you enter conditional block. If it's zero then it's false and it doesn't enter block. If there's any other value than 0 then it's true and it enters block.</p>\n", "OwnerUserId": "2119757", "PostTypeId": "2", "Id": "15877037", "Score": "0", "CreationDate": "2013-04-08T10:39:55.077", "LastActivityDate": "2013-04-08T10:39:55.077"}, "15877020": {"ParentId": "15876960", "CommentCount": "0", "Body": "<p>I think it is just a test of non-emptyness to ensure we don't iterate over an empty vector</p>\n", "OwnerUserId": "1741450", "PostTypeId": "2", "Id": "15877020", "Score": "0", "CreationDate": "2013-04-08T10:39:03.607", "LastActivityDate": "2013-04-08T10:39:03.607"}, "15877008": {"ParentId": "15876960", "CommentCount": "3", "Body": "<p>Conditional statemens in C and C++ are implicitly comparing with \"not equal to zero\" if nothing else is given. E.g. <code>if (data-&gt;tokens.size())</code> is the same as <code>if (data-&gt;tokens.size() != 0)</code>. </p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "15877008", "Score": "5", "CreationDate": "2013-04-08T10:38:10.093", "LastActivityDate": "2013-04-08T10:38:10.093"}, "15878243": {"ParentId": "15876960", "CommentCount": "0", "Body": "<p>To make it more precise: the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">standard</a> said:</p>\n<blockquote>\n<p id=\"so_15876960_15878243_0\">6.4 Selection statements</p>\n<p id=\"so_15876960_15878243_1\">selection-statement:</p>\n<pre><code>if ( condition ) statement\n</code></pre>\n<p id=\"so_15876960_15878243_2\">\u2026 The rules for conditions apply both to selection-statements and to\n  the <code>for</code> and <code>while</code> statements (6.5). \u2026 The value of a condition that is\n  an initialized declaration in a statement other than a switch\n  statement is the value of the declared variable contextually converted\n  to <code>bool</code> (Clause 4). If that conversion is ill-formed, the program is\n  ill-formed.  \u2026 The value of a condition that is an expression is the\n  value of the expression, contextually <strong>converted to <code>bool</code>;</strong> if that\n  conversion is ill-formed, the program is ill-formed.</p>\n</blockquote>\n<p>Where conversion to bool mean:</p>\n<blockquote>\n<p id=\"so_15876960_15878243_3\">4 Standard conversions</p>\n<p id=\"so_15876960_15878243_4\">Certain language constructs require that an expression be converted to\n  a Boolean value. An expression <code>e</code> appearing in such a context is said\n  to be contextually converted to <code>bool</code> and is well-formed if and only if\n  <strong>the declaration <code>bool t(e);</code></strong> is well-formed, for some invented temporary\n  variable t (8.5).</p>\n</blockquote>\n<p>This is important. That is why you can do this sort of \u201cmagic\u201d:</p>\n<pre><code>while(getline(cin,str))) cout&lt;&lt;str;\n</code></pre>\n<p>with will apply <code>bool(cin)</code>(in this case <code>getline</code> return <code>cin</code>))</p>\n<p>In your example the conversion will be:</p>\n<blockquote>\n<p id=\"so_15876960_15878243_5\">4.12 Boolean conversions [conv.bool]</p>\n<p id=\"so_15876960_15878243_6\">1 A prvalue of arithmetic, unscoped enumeration, pointer, or pointer\n  to member type can be converted to a prvalue of type <code>bool</code>. A zero\n  value, null pointer value, or null member pointer value is converted\n  to <code>false</code>; any other value is converted to <code>true</code>. For\n  direct-initialization (8.5), a prvalue of type <code>std::nullptr_t</code> can be\n  converted to a prvalue of type <code>bool</code>; the resulting value is <code>false</code>.</p>\n</blockquote>\n<p>Just as an aside comment, chances are that the <code>if</code> in your example is almost useless or even just obfuscating the code. Consider:</p>\n<pre><code>for (int i=0; i&lt; data-&gt;tokens.size(); ++i) \n{..\n  //reads a token and assigns to a variable...\n}\n</code></pre>\n<p>or:</p>\n<pre><code>for( const auto &amp;token : data-&gt;tokens)\n    {..\n      // assigns token to a variable...\n    }\n</code></pre>\n<p>In both case the the <code>for</code> will enter only if <code>size()&gt;0</code> making redundant the <code>if</code>.</p>\n", "OwnerUserId": "1458030", "PostTypeId": "2", "Id": "15878243", "Score": "0", "CreationDate": "2013-04-08T11:45:44.877", "LastActivityDate": "2013-04-08T11:45:44.877"}, "15877025": {"ParentId": "15876960", "CommentCount": "0", "Body": "<p><code>if</code> takes a true or false bool expression, not a number. Fortunately for us, if you give a number, it will be converted to a bool. False if the number is 0, true otherwise, so it will work.</p>\n", "OwnerUserId": "2137314", "PostTypeId": "2", "Id": "15877025", "Score": "1", "CreationDate": "2013-04-08T10:39:26.317", "LastActivityDate": "2013-04-08T10:39:26.317"}, "15876960": {"CommentCount": "5", "ViewCount": "146", "PostTypeId": "1", "LastEditorUserId": "16287", "CreationDate": "2013-04-08T10:35:22.263", "LastActivityDate": "2013-04-08T11:45:44.877", "Title": "How is this if condition working?", "AcceptedAnswerId": "15877008", "LastEditDate": "2013-04-08T10:57:04.983", "Id": "15876960", "Score": "1", "Body": "<p>I have Following IF statement and I can't figure out what it means:</p>\n<pre><code>if (data-&gt;tokens.size()) \n{..\n  //reads each token in a for loop and assigns each token to a variable...\n}\n</code></pre>\n<p>Tokens have six values in it so <code>tokens.size()</code> should return <strong>6</strong>, right?</p>\n<p>I don't understand why we need an if condition there? From what i understand, if condition will be true if <code>tokens.size()</code> returns <strong>1</strong> and false if it returns <strong>0</strong>.</p>\n<p>In my case, it returns <strong>6</strong>(or whatever the amount of tokens which can be any number and not just 0 or 1). So how is this if condition working?</p>\n<p>In other words, I want to know how does if handle when it gets the values other than 0 and 1.</p>\n", "Tags": "<c++><if-statement>", "OwnerUserId": "2146609", "AnswerCount": "6"}, "15877099": {"ParentId": "15876960", "PostTypeId": "2", "CommentCount": "2", "Body": "<pre><code>if(data-&gt;tokens.size()) ~ if(data-&gt;tokens.size()!=0) \n</code></pre>\n", "OwnerUserId": "2183287", "LastEditorUserId": "2024761", "LastEditDate": "2013-04-08T11:07:33.190", "Id": "15877099", "Score": "0", "CreationDate": "2013-04-08T10:43:00.880", "LastActivityDate": "2013-04-08T11:07:33.190"}, "bq_ids": {"n4140": {"so_15876960_15878243_4": {"section_id": 3, "quality": 0.9583333333333334, "length": 23}, "so_15876960_15878243_6": {"section_id": 44, "quality": 0.975609756097561, "length": 40}, "so_15876960_15878243_2": {"section_id": 3885, "quality": 0.7, "length": 28}}, "n3337": {"so_15876960_15878243_4": {"section_id": 2, "quality": 0.9583333333333334, "length": 23}, "so_15876960_15878243_6": {"section_id": 41, "quality": 0.9512195121951219, "length": 39}, "so_15876960_15878243_2": {"section_id": 3745, "quality": 0.7, "length": 28}}, "n4659": {"so_15876960_15878243_4": {"section_id": 3, "quality": 0.9583333333333334, "length": 23}, "so_15876960_15878243_2": {"section_id": 4764, "quality": 0.75, "length": 30}, "so_15876960_15878243_6": {"section_id": 45, "quality": 0.975609756097561, "length": 40}}}});