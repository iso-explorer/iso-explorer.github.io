post_cb({"11048875": {"ParentId": "11048827", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Take a look at the final <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++11 draft</a>, section  20.7, particularly the <code>&lt;type_traits&gt;</code> header.</p>\n<p>What you are asking is: <code>std::is_base_of&lt;base, derived&gt;::value;</code></p>\n<p>Regarding your question: <code>static_assert</code> can be evaluated whenever the compiler sees fit, but it will usually:</p>\n<ul>\n<li>In a template: if the expression uses dependent names, in instatiation time; else, in definition time.</li>\n<li>Out of template: in definition time.</li>\n</ul>\n", "OwnerUserId": "865874", "LastEditorUserId": "865874", "LastEditDate": "2012-06-15T22:03:27.240", "Id": "11048875", "Score": "7", "CreationDate": "2012-06-15T10:23:22.343", "LastActivityDate": "2012-06-15T22:03:27.240"}, "11048827": {"CommentCount": "1", "ViewCount": "2390", "PostTypeId": "1", "LastEditorUserId": "808244", "CreationDate": "2012-06-15T10:20:14.920", "LastActivityDate": "2012-06-15T22:03:27.240", "Title": "C++11 static_assert (and functions to be used therein)", "AcceptedAnswerId": "11048875", "LastEditDate": "2012-06-15T10:26:26.317", "Id": "11048827", "Score": "0", "Body": "<p><code>static_assert</code> seems to be a very nice feature together with templates.</p>\n<p>However, I have trouble finding functions in the standard library for doing various tests at compile time. </p>\n<p>For example, I am looking for a function to check whether a type is a subtype of another one. <code>boost::is_base_of</code> does the job, however, is a comparable function in std, so I do not need to rely on boost. </p>\n<p>Basically, is there a good source for a list of functions which can be used in <code>static_assert</code> and are contained in the standard library of C++11?</p>\n<p>When is <code>static_assert</code> executed? Can I put it anywhere in a template and it is evaluated for each template instanciation? Could it be used to constrain template parameters to be a specific subtype of a class?</p>\n", "Tags": "<c++><c++11><assertions><static-assert>", "OwnerUserId": "1408611", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11048827_11048906_1": {"section_id": 5382, "quality": 0.7, "length": 7}}, "n3337": {"so_11048827_11048906_1": {"section_id": 5176, "quality": 0.7, "length": 7}}, "n4659": {"so_11048827_11048906_1": {"section_id": 6806, "quality": 0.7, "length": 7}}}, "11048906": {"ParentId": "11048827", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>In addition to @rodrigo\u2019s answer (he was faster \u2026),</p>\n<blockquote>\n<p id=\"so_11048827_11048906_0\">When is static assert executed? Can I put it anywhere in a template and it is evaluated for each template instanciation? Could it be used to constrain template parameters to be a specific subtype of a class?</p>\n</blockquote>\n<p>Unfortunately, no. For instance, a <code>static_assert(false, \"bummer\");</code> is <em>always</em> executed, no matter the template. This in particular fails if you want to (partially) specialise a template.</p>\n<p>The standard (\u00a77.4) says:</p>\n<blockquote>\n<p id=\"so_11048827_11048906_1\">[If the condition to <code>static_assert</code> is <code>false</code>] the program is ill-formed, and the resulting diagnostic message (1.4) shall include the text of the string-literal, [\u2026]</p>\n</blockquote>\n<p>Which is unfortunately quite unspecific but this lack of specificity is in fact exactly how <code>static_assert</code> behaves when it\u2019s not dependent on a template type.</p>\n<p>You need to make the condition in a <code>static_assert</code> depend on the template argument to bind its execution to the particular template argument.</p>\n<p>So the following would fail:</p>\n<pre><code>template &lt;typename T&gt;\nstruct some_type {\n    static_assert(false, \"T must be a pointer type\");\n};\n\ntemplate &lt;typename T&gt;\nstruct some_type&lt;T*&gt; {\n    // \u2026\n};\n</code></pre>\n<p>Finally, I heartily recommend you read Marthino\u2019s article on <a href=\"http://rmartinho.github.com/2012/05/29/type-traits-galore.html\" rel=\"nofollow\"><em>More type traits</em></a> which details this process more, and gives hints on how to solve many trait-related problems elegantly.</p>\n", "OwnerUserId": "1968", "LastEditorUserId": "1968", "LastEditDate": "2012-06-15T10:30:57.880", "Id": "11048906", "Score": "5", "CreationDate": "2012-06-15T10:25:34.247", "LastActivityDate": "2012-06-15T10:30:57.880"}});