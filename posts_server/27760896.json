post_cb({"27760896": {"CommentCount": "0", "ViewCount": "193", "CreationDate": "2015-01-03T23:55:16.797", "LastActivityDate": "2015-01-04T00:49:46.293", "Title": "Nested class of class template can be \"incomplete\"", "AcceptedAnswerId": "27760976", "PostTypeId": "1", "Id": "27760896", "Score": "4", "Body": "<p>I'm at a loss as to how to explain why it is valid to create the member <code>inner</code> in the class template <code>OuterTempl&lt;T&gt;</code> whereas it is illegal to do so in the untemplated class <code>Outer</code>.</p>\n<pre><code>// Non-template version\nstruct Outer\n{\n    struct Inner;\n    Inner inner;   // incomplete type (I get this)\n};\n\nstruct Outer::Inner\n{\n};\n\n// Template version\ntemplate&lt;typename T&gt;\nstruct OuterTempl\n{\n    struct InnerTempl;\n    InnerTempl inner; // OK ... Huh!?\n};\n\ntemplate&lt;typename T&gt;\nstruct OuterTempl&lt;T&gt;::InnerTempl\n{\n};\n\nint main()\n{\n}\n</code></pre>\n<p>See also <a href=\"http://ideone.com/YMeNhI\" rel=\"nofollow\">ideone</a>.</p>\n", "Tags": "<c++><templates><nested-class>", "OwnerUserId": "181783", "AnswerCount": "2"}, "27760930": {"ParentId": "27760896", "CommentCount": "0", "Body": "<p>The member types need to be defined when the class is defined. However, a class template doesn't get defined until it gets instantiated. Any kind of dependent types can change till then. The definition of members is only needed when the class gets instantiated.</p>\n<p>On the other hand the definition of a non-template class is a definition which needs to know the size of its member at that point.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "27760930", "Score": "4", "CreationDate": "2015-01-04T00:00:03.337", "LastActivityDate": "2015-01-04T00:00:03.337"}, "27760976": {"ParentId": "27760896", "LastEditDate": "2015-01-04T00:49:46.293", "CommentCount": "0", "CreationDate": "2015-01-04T00:06:40.730", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "PostTypeId": "2", "Id": "27760976", "Score": "4", "Body": "<p>Yes - consider [temp.mem.class]/1:</p>\n<blockquote>\n<p id=\"so_27760896_27760976_0\">A member class of a class template may be defined outside the class\n  template definition in which it is declared. <br>  [ <em>Note:</em> <strong>The member\n  class must be defined before its first use that requires an\n  instantiation (14.7.1).</strong> For example,  </br></p>\n<pre><code>template&lt;class T&gt; struct A {\n    class B;\n};\n\nA&lt;int&gt;::B* b1;  // OK: requires A to be defined but not A::B\n\ntemplate&lt;class T&gt; class A&lt;T&gt;::B { };\n\nA&lt;int&gt;::B b2;   // OK: requires A::B to be defined\n</code></pre>\n<p id=\"so_27760896_27760976_1\"><em>\u2014 end note</em> ]</p>\n</blockquote>\n<p>It is also important to mention that the definition of <code>inner</code>, which constitutes the use of <code>Inner</code> the above note describes, is only instantiated once it is required:</p>\n<blockquote>\n<p id=\"so_27760896_27760976_2\">Unless a member [\u2026] has been explicitly instantiated or explicitly specialized, the specialization\n  of the member is implicitly instantiated when the specialization is\n  referenced in a context that requires the member definition to exist;</p>\n</blockquote>\n<p>Since no instantiation of <code>OuterTempl</code> is present in your code, the definition of <code>inner</code> is never instantiated, and an instantiation of <code>Inner</code> is never necessitated. The completeness of the nested class type for such a declaration is thus only required at the point of instantiation. You don't instantiate <code>OuterTempl</code> here, but if you would do that <em>before the definition of <code>Inner</code></em>, the code would be ill-formed.</p>\n<p>That is,</p>\n<pre><code>template&lt;typename T&gt;\nstruct OuterTempl\n{\n    struct InnerTempl;\n    InnerTempl inner;\n};\n\ntemplate struct OuterTempl&lt;int&gt;; // Bad - Ill-formed (NDR?)\n\ntemplate&lt;typename T&gt;\nstruct OuterTempl&lt;T&gt;::InnerTempl {};\n\ntemplate struct OuterTempl&lt;int&gt;; // Fine\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/8f2ff6ebe043f5a0\" rel=\"nofollow\"><strong>Demo</strong></a>.</p>\n", "LastActivityDate": "2015-01-04T00:49:46.293"}, "bq_ids": {"n4140": {"so_27760896_27760976_0": {"section_id": 106, "quality": 0.8461538461538461, "length": 22}, "so_27760896_27760976_2": {"section_id": 234, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_27760896_27760976_0": {"section_id": 101, "quality": 0.7692307692307693, "length": 20}, "so_27760896_27760976_2": {"section_id": 227, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_27760896_27760976_0": {"section_id": 110, "quality": 0.8461538461538461, "length": 22}, "so_27760896_27760976_2": {"section_id": 244, "quality": 0.9473684210526315, "length": 18}}}});