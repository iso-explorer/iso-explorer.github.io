post_cb({"10091182": {"ParentId": "10091082", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>When <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/termination.html\" rel=\"nofollow\"><code>std::terminate()</code></a> is called (as is the case for an uncaught exception), normal cleanup is not run (at least for the stack-frame of <code>main()</code>), and as such the memory you've allocated in that stack frame leaks, even though it's supposedly managed by a smart-pointer. When you're catching the <code>std::bad_alloc</code> in <code>main()</code>, and return normally, the smart-pointer will do it's duty.</p>\n", "OwnerUserId": "1308483", "LastEditorUserId": "72178", "LastEditDate": "2012-04-10T15:03:44.753", "Id": "10091182", "Score": "5", "CreationDate": "2012-04-10T14:59:49.213", "LastActivityDate": "2012-04-10T15:03:44.753"}, "10091240": {"ParentId": "10091082", "CommentCount": "3", "Body": "<p>If the exception is not caught, then the stack unwinding is implementation specific. Therefore in your case, it does not release the memory. </p>\n<p>Also, auto_ptr is no longer recommended.</p>\n<p>Use std::unique_ptr :  </p>\n<pre><code>unique_ptr&lt;int&gt; ptr_int(new int(5));\n</code></pre>\n", "OwnerUserId": "1201507", "PostTypeId": "2", "Id": "10091240", "Score": "2", "CreationDate": "2012-04-10T15:03:57.207", "LastActivityDate": "2012-04-10T15:03:57.207"}, "10091172": {"ParentId": "10091082", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>If an exception is not handled, then it's implementation-defined whether the stack will be unwound before calling <code>std::terminate</code>.</p>\n<p>If you handle the exception, then the smart pointer will work as expected. </p>\n<p>Reference:    </p>\n<p>C++11 15.5.1 The <code>std::terminate()</code> function</p>\n<blockquote>\n<p id=\"so_10091082_10091172_0\">1 In some situations exception handling must be abandoned for less subtle error handling techniques. These situations are:</p>\n<p id=\"so_10091082_10091172_1\">........</p>\n<p id=\"so_10091082_10091172_2\">\u2014 when the exception handling mechanism cannot find a handler for a thrown exception , or </p>\n<p id=\"so_10091082_10091172_3\">........</p>\n<p id=\"so_10091082_10091172_4\">2 In such cases <code>std::terminate()</code> is called. <strong>In the situation where no matching handler is found, it is implementation-defined whether or not the stack is unwound before <code>std::terminate()</code> is called</strong>.</p>\n</blockquote>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2012-04-10T15:13:59.160", "Id": "10091172", "Score": "12", "CreationDate": "2012-04-10T14:59:21.710", "LastActivityDate": "2012-04-10T15:13:59.160"}, "bq_ids": {"n4140": {"so_10091082_10091172_2": {"section_id": 3382, "quality": 1.0, "length": 9}, "so_10091082_10091172_0": {"section_id": 3382, "quality": 0.9230769230769231, "length": 12}, "so_10091082_10091172_4": {"section_id": 3383, "quality": 0.9375, "length": 15}}, "n3337": {"so_10091082_10091172_2": {"section_id": 3251, "quality": 1.0, "length": 9}, "so_10091082_10091172_0": {"section_id": 3251, "quality": 0.9230769230769231, "length": 12}, "so_10091082_10091172_4": {"section_id": 3252, "quality": 0.9375, "length": 15}}, "n4659": {"so_10091082_10091172_2": {"section_id": 4142, "quality": 1.0, "length": 9}, "so_10091082_10091172_0": {"section_id": 4142, "quality": 0.9230769230769231, "length": 12}, "so_10091082_10091172_4": {"section_id": 4143, "quality": 0.9375, "length": 15}}}, "10091082": {"CommentCount": "2", "AcceptedAnswerId": "10091182", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2012-04-10T14:53:57.757", "LastActivityDate": "2012-04-10T20:47:00.767", "LastEditDate": "2012-04-10T20:47:00.767", "ViewCount": "1007", "FavoriteCount": "0", "Title": "C++ leaks in case of exception even by using smart pointers", "Id": "10091082", "Score": "9", "Body": "<p>I am new to the smart pointers world. I've done my reading and all of them stated that smart pointers will avoid leaking memory even when the program will exit after encountering an exception.</p>\n<p>I wrote down a simple program to try this out, but <a href=\"http://en.wikipedia.org/wiki/Valgrind\" rel=\"nofollow\">Valgrind</a> is telling me my program is leaking memory (three allocs and only one free).</p>\n<p>This is the source code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nusing namespace std;\n\nint main()\n{\n    auto_ptr&lt;int&gt; ptr_int(new int(5));\n\n    throw std::bad_alloc();\n\n    cout &lt;&lt; *ptr_int;\n}\n</code></pre>\n<p>And this Valgrind report:</p>\n<pre><code>==27862== Memcheck, a memory error detector\n==27862== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.\n==27862== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info\n==27862== Command: ./smart_pointers\n==27862== Parent PID: 5388\n==27862==\n==27862==\n==27862== HEAP SUMMARY:\n==27862==     in use at exit: 104 bytes in 2 blocks\n==27862==   total heap usage: 3 allocs, 1 frees, 120 bytes allocated\n==27862==\n==27862== 4 bytes in 1 blocks are still reachable in loss record 1 of 2\n==27862==    at 0x4026351: operator new(unsigned int) (vg_replace_malloc.c:255)\n==27862==    by 0x804878A: main (smart_pointers.cpp:8)\n==27862==\n==27862== 100 bytes in 1 blocks are possibly lost in loss record 2 of 2\n==27862==    at 0x4025BD3: malloc (vg_replace_malloc.c:236)\n==27862==    by 0x40E861A: __cxa_allocate_exception (in /usr/lib/libstdc++.so.6.0.14)\n==27862==    by 0x80487AE: main (smart_pointers.cpp:10)\n==27862==\n==27862== LEAK SUMMARY:\n==27862==    definitely lost: 0 bytes in 0 blocks\n==27862==    indirectly lost: 0 bytes in 0 blocks\n==27862==      possibly lost: 100 bytes in 1 blocks\n==27862==    still reachable: 4 bytes in 1 blocks\n==27862==         suppressed: 0 bytes in 0 blocks\n==27862==\n==27862== For counts of detected and suppressed errors, rerun with: -v\n==27862== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 19 from 8)\n</code></pre>\n<p>Does using smart pointers guarantee the allocated resources will be destroyed even if an exception shows up?</p>\n", "Tags": "<c++><memory-leaks><smart-pointers>", "OwnerUserId": "1324318", "AnswerCount": "3"}});