post_cb({"21415700": {"CommentCount": "8", "ViewCount": "273", "CreationDate": "2014-01-28T20:05:50.257", "LastActivityDate": "2014-01-28T21:35:01.420", "Title": "Is it OK to reference an out-of-scope local variable within the same function?", "FavoriteCount": "0", "PostTypeId": "1", "Id": "21415700", "Score": "5", "Body": "<p>In this code, I reference the local variable <code>b</code> even though it is out of scope. But I do it from within the same function so it's probably still on the stack, right? I ran the program and it worked but I'd like to know if it's guaranteed to work on all implementations.</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid main()\n{\n    int* a;\n    {\n        int b = 5;\n        a = &amp;b;\n    }\n    std::cout &lt;&lt; *a;\n}\n</code></pre>\n", "Tags": "<c++><pointers><scope>", "OwnerUserId": "1580088", "AnswerCount": "3"}, "21415731": {"ParentId": "21415700", "CommentCount": "2", "Body": "<p>No, that's <strong>not</strong> guaranteed to work. <code>a</code> is dangling once the inner scope is exited, so any dereference of it results in Undefined Behaviour and nothing whatsoever is guaranteed.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "21415731", "Score": "10", "CreationDate": "2014-01-28T20:07:25.517", "LastActivityDate": "2014-01-28T20:07:25.517"}, "21415854": {"ParentId": "21415700", "LastEditDate": "2014-01-28T20:27:40.157", "CommentCount": "0", "CreationDate": "2014-01-28T20:15:17.830", "OwnerUserId": "298225", "LastEditorUserId": "298225", "PostTypeId": "2", "Id": "21415854", "Score": "6", "Body": "<p>The problem here is not that <code>b</code> is out of <strong>scope</strong>. It is that the <strong>lifetime</strong> of <code>b</code> has ended. Scope is about where the <strong>name</strong> of an object is known. Lifetime is about when the object <strong>exists</strong> (within the computational model).</p>\n<p>Technically, the object <code>b</code> does not exist when you reference it with <code>*a</code>. The bytes that were used to represent it might happen to be still unchanged in memory, and accessing them with <code>*a</code> might happen to work sometimes, especially if optimization is not turned on, but it is undefined behavior.</p>\n<p>An object can still be accessible even though its name is not in scope. Here is an example of an object that is accessible during its lifetime even though it is not in scope:</p>\n<pre><code>void foo(void)\n{\n    int b;\n    bar(&amp;b);\n}\n</code></pre>\n<p>In this code, the function <code>bar</code> may access <code>b</code>, even though it cannot see the name of <code>b</code> in <code>foo</code>. Although control leaves the block in which <code>b</code> is created, execution of the block is merely suspended, not terminated. So <code>b</code> continues to exist even while the function <code>bar</code> is executing. So <code>b</code> will be out of scope, but the access will be during its lifetime.</p>\n", "LastActivityDate": "2014-01-28T20:27:40.157"}, "bq_ids": {"n4140": {"so_21415700_21417377_0": {"section_id": 5803, "quality": 0.9666666666666667, "length": 29}}, "n3337": {"so_21415700_21417377_0": {"section_id": 5576, "quality": 0.9666666666666667, "length": 29}}, "n4659": {"so_21415700_21417377_0": {"section_id": 7261, "quality": 0.9666666666666667, "length": 29}}}, "21417377": {"ParentId": "21415700", "CommentCount": "1", "Body": "<p>The spec says</p>\n<blockquote>\n<p id=\"so_21415700_21417377_0\">An instance of each object with automatic storage duration (3.7.3) is associated with each entry into its block. Such an object exists and retains its last-stored value during the execution of the block and while the block is suspended (by a call of a function or receipt of a signal).</p>\n</blockquote>\n<p><code>b</code> is an object with automatic storage duration. So, when you are outside the object's block, the object does not exist anymore. You <em>can</em> jump <em>before</em> it and continue write to it, I believe, but not if you jump outside its block. That's too much stretching it.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "21417377", "Score": "2", "CreationDate": "2014-01-28T21:35:01.420", "LastActivityDate": "2014-01-28T21:35:01.420"}});