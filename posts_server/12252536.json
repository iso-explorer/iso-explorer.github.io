post_cb({"bq_ids": {"n4140": {"so_12252536_12252562_0": {"length": 25, "quality": 0.625, "section_id": 72}}, "n3337": {"so_12252536_12252562_0": {"length": 25, "quality": 0.625, "section_id": 67}}}, "12252536": {"CreationDate": "2012-09-03T18:22:36.563", "ViewCount": "136", "Id": "12252536", "AcceptedAnswerId": "12252562", "Score": "2", "Title": "C++ Strange Compiler Syntax Error", "CommentCount": "2", "Body": "<p>I got the following code (do not argue about whether it is meaningful, it is just a minimal example):</p>\n<pre><code>struct X{\n    template &lt;typename T&gt;\n    T foo(){ return T(); }\n};\n\ntemplate &lt;typename T&gt;\nstruct Z{\n    virtual X bar(){\n        bar().foo&lt;int&gt;();\n        return X();\n    }\n};\n</code></pre>\n<p>It does not compile on my g++4.6.3. The line <code>bar().foo&lt;int&gt;();</code> gives the following error:</p>\n<pre><code>error: expected primary-expression before \u2018int\u2019\nerror: expected \u2018;\u2019 before \u2018int\u2019\n</code></pre>\n<p>when I first save the result of bar() in a local variable, then it works, i.e. if I replace <code>bar().foo&lt;int&gt;()</code> by </p>\n<pre><code>        X x = bar();\n        x.foo&lt;int&gt;(); \n</code></pre>\n<p>then it works. If i now declare the local variable <code>auto</code> instead of <code>X</code>, i.e.:</p>\n<pre><code>        auto x = bar();\n        x.foo&lt;int&gt;();\n</code></pre>\n<p>then I receive the same error as before. If I remove the type parameter from class Z (i.e. make it a usual instead of a template class), then it works again.</p>\n<p>If I use a classtype like <code>X</code> instead of <code>int</code> as type parameter for foo, i.e. <code>foo&lt;X&gt;</code>, then I receive the following error instead:</p>\n<pre><code>expected primary-expression before \u2018&gt;\u2019 token\nexpected primary-expression before \u2018)\u2019 token\n</code></pre>\n<p>I am really unable to spot the error here. Please help!</p>\n", "Tags": "<c++><syntax-error>", "LastActivityDate": "2012-09-03T19:05:45.487", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1408611"}, "12252562": {"LastActivityDate": "2012-09-03T19:05:45.487", "CommentCount": "4", "Body": "<p>You need to qualify that the type in question is templatable (this is a work-around for what I think is a bug in GCC, see edit below), i.e.</p>\n<pre><code>struct X{\n    template &lt;typename T&gt;\n    T foo(){ return T(); }\n};\n\ntemplate &lt;typename T&gt;\nstruct Z{\n    virtual X bar(){\n        bar().template foo&lt;int&gt;();\n        return X();\n    }\n};\n</code></pre>\n<p>The basic issue has to do with parsing, because explicit template instantiations could be parsed in a number of ways. The interesting bit (I think) is located in 14.2p4, and it is as follows: </p>\n<blockquote>\n<p id=\"so_12252536_12252562_0\">When the name of a member template specialization appears after <code>.</code> or <code>-&gt;</code> in a post\ufb01x-expression or after a\n  <em>nested-name-speci\ufb01er</em> in a <em>quali\ufb01ed-id</em>, and the object or pointer expression of the <em>post\ufb01x-expression</em> or the\n  <em>nested-name-speci\ufb01er</em> in the <em>quali\ufb01ed-id</em> depends on a template parameter (14.6.2) but does not refer to a\n  member of the current instantiation (14.6.2.1), the member template name must be pre\ufb01xed by the keyword <code>template</code>. Otherwise the name is assumed to name a non-template.</p>\n</blockquote>\n<p>If I'm not gravely mistaken, <code>Z&lt;T&gt;::bar</code> <em>does</em> depend on a template parameter, but at the same time it does refer to the current instantiation, thus I'm inclined to believe that the standard does not require a qualification like GCC does. When multiple compilers have conflicting results, I tend to side with Comeau, which in this case says that the <code>template</code> qualifier is <em>not necessary</em>.</p>\n", "CreationDate": "2012-09-03T18:26:06.800", "LastEditDate": "2012-09-03T19:05:45.487", "ParentId": "12252536", "Id": "12252562", "LastEditorUserId": "463074", "PostTypeId": "2", "Score": "8", "OwnerUserId": "463074"}});