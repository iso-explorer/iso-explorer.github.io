post_cb({"9781003": {"ParentId": "9780087", "CommentCount": "0", "Body": "<p><sup><strong>TL;DR:</strong>  If the stream run out of content while trying to read a new value, <code>failbit</code> is set.</sup></p>\n<hr>\n<p>It's defined in the standard that using a <code>istream_iterator</code> has the same effect as doing:</p>\n<pre><code>*in_stream &gt;&gt; value; /* istream_iterator::operator++ */\nreturn        value; /* istream_iterator::operator*  */\n</code></pre>\n<hr>\n<p>Which in the case with handling integers (such as <code>size_t</code>) will results in calls to the below (can be read about under <em>27.6.1.2.2/2 - lib.istream.formatted.arithmetic</em>).</p>\n<pre><code>use_facet&lt;numget&gt; (loc).get (*this, 0, *this, err, lval)\n\n...\n\nsetstate (err);\n</code></pre>\n<hr>\n<p><code>err</code> is passed by reference and will be set to whatever errors the function might run into. Below is a snippet from the standards definition of <code>use_facet&lt;numget&gt; (loc).get</code>:</p>\n<blockquote>\n<p id=\"so_9780087_9781003_0\"><strong>22.2.2.1.2</strong>/8 <code>-</code> [<em>lib.facet.num.get.virtuals</em>]</p>\n<p id=\"so_9780087_9781003_1\">The <code>in</code> iterator is always left pointing one position beyond the last\n  character successfully matched. If <code>val</code> is set, then <code>err</code> is set to\n  <code>str.goodbit;</code> or to <code>str.eofbit</code> if, when seeking another character to\n  match, it is found that <code>(in == end)</code>.</p>\n<p id=\"so_9780087_9781003_2\">If <code>val</code> is not set, then <code>err</code> is\n  set to <code>str.failbit</code>; or to <code>(str.failbit|str.eofbit)</code> if the reason for\n  the failure was that <code>(in == end)</code>.</p>\n</blockquote>\n<hr>\n<p><sup><strong>TL;DR:</strong>  If the stream run out of content while trying to read a new value, <code>failbit</code> is set.</sup></p>\n</hr></hr></hr></hr>", "OwnerUserId": "1090079", "PostTypeId": "2", "Id": "9781003", "Score": "2", "CreationDate": "2012-03-20T03:32:54.020", "LastActivityDate": "2012-03-20T03:32:54.020"}, "9780087": {"CommentCount": "3", "ViewCount": "658", "CreationDate": "2012-03-20T00:59:56.473", "LastActivityDate": "2012-03-20T03:32:54.020", "Title": "ifstream_iterator and ifstream", "AcceptedAnswerId": "9781003", "PostTypeId": "1", "Id": "9780087", "Score": "0", "Body": "<p>The task is to read numbers from file to vector. Format is: one number per line. I want to make with STL-style. So, I wrote such code:</p>\n<pre><code>::std::deque&lt;size_t&gt; Input(const ::std::string&amp; filename) {\n    ::std::deque&lt;size_t&gt; result;\n    try {\n        ::std::ifstream file(filename.c_str(), ::std::ios::binary);\n        file.exceptions(::std::ifstream::failbit |\n                       ::std::ifstream::badbit);\n\n        ::std::copy(::std::istreambuf_iterator&lt;size_t&gt;(file),\n                    ::std::istreambuf_iterator&lt;size_t&gt;(),\n                    ::std::back_inserter(result));\n\n    } catch ( ::std::exception&amp; e ) {\n        ::std::cout &lt;&lt; e.what() &lt;&lt; ::std::endl;\n    }\n    return result;\n}\n</code></pre>\n<p>It works fine, and I get what I want (all numbers from the file), but also I get an exception with failbit at end of file. What's the problem? I don't want to use getline() and parse by hand -- wanna ask STL do it for me.\nUPDATE: I checked -- there is no new line at the end of file.</p>\n", "Tags": "<c++>", "OwnerUserId": "129413", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9780087_9781003_1": {"section_id": 6541, "quality": 0.9615384615384616, "length": 25}, "so_9780087_9781003_2": {"section_id": 6541, "quality": 1.0, "length": 11}}, "n3337": {"so_9780087_9781003_1": {"section_id": 6296, "quality": 0.9615384615384616, "length": 25}, "so_9780087_9781003_2": {"section_id": 6296, "quality": 1.0, "length": 11}}, "n4659": {"so_9780087_9781003_1": {"section_id": 8023, "quality": 0.9615384615384616, "length": 25}, "so_9780087_9781003_2": {"section_id": 8023, "quality": 1.0, "length": 11}}}});