post_cb({"75309": {"Id": "75309", "PostTypeId": "2", "Body": "<p>Also you should note, that name resolution happens before overload resolution. So if there is something with the same name in your current scope then it will stop looking for other names and try to use them.</p>\n<pre><code>void bar() {};\nclass foo {\n    void bar(int) {};\n    void foobar() { bar(); } // won't compile needs ::bar()\n    void foobar(int i) { bar(i); } // ok\n}\n</code></pre>\n", "OwnerDisplayName": "Matt Price", "LastActivityDate": "2008-09-16T18:14:45.757", "Score": "4", "CreationDate": "2008-09-16T18:14:45.757", "ParentId": "75213", "CommentCount": "0", "OwnerUserId": "852"}, "75213": {"ViewCount": "7307", "Body": "<p>In C++, what is the purpose of the scope resolution operator when used without a scope? For instance:</p>\n<pre><code>::foo();\n</code></pre>\n", "AcceptedAnswerId": "75262", "Title": "scope resolution operator without a scope", "CreationDate": "2008-09-16T18:06:50.643", "Id": "75213", "CommentCount": "0", "FavoriteCount": "6", "PostTypeId": "1", "OwnerDisplayName": "landon9720", "LastActivityDate": "2016-02-08T15:52:39.830", "Score": "40", "OwnerUserId": "1785", "Tags": "<c++>", "AnswerCount": "6"}, "22085788": {"Id": "22085788", "PostTypeId": "2", "Body": "<p>A name that begins with the <a href=\"http://en.wikipedia.org/wiki/Scope_resolution_operator\" rel=\"nofollow\">scope resolution operator </a>(<code>::</code>) is looked up in the global namespace. We can see this by looking at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>3.4.3</code> <em>Qualified name lookup</em> paragraph <em>4</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_75213_22085788_0\">A name prefixed by the unary scope operator :: (5.1) <strong>is looked up in global scope</strong>, in the translation unit where it is used. The name shall be declared in global namespace scope or shall be a name whose declaration is visible in global scope because of a using-directive (3.4.3.2). The use of :: <strong>allows a global name to be referred to even if its identifier has been hidden</strong> (3.3.10).</p>\n</blockquote>\n<p>As the standard states this allows us to use names from the global namespace <a href=\"http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Fcplr175.htm\" rel=\"nofollow\">that would otherwise be hidden</a>, the example from the linked document is as follows:</p>\n<pre><code>int count = 0;\n\nint main(void) {\n  int count = 0;\n  ::count = 1;  // set global count to 1\n  count = 2;    // set local count to 2\n  return 0;\n}\n</code></pre>\n<p>The wording is very similar going back to <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\" rel=\"nofollow\">N1804</a> which is the earliest draft standard available. </p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-03-21T12:13:15.570", "Score": "4", "CreationDate": "2014-02-28T03:47:15.140", "ParentId": "75213", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2014-03-21T12:13:15.570"}, "75251": {"Id": "75251", "PostTypeId": "2", "Body": "<p>My c++ is rusty but I believe if you have a function declared in the local scope, such as foo() and one at global scope, foo() refers to the local one. ::foo() will refer to the global one.</p>\n", "OwnerDisplayName": "itsmatt", "LastActivityDate": "2008-09-16T18:09:50.447", "Score": "1", "CreationDate": "2008-09-16T18:09:50.447", "ParentId": "75213", "CommentCount": "0", "OwnerUserId": "7862"}, "75249": {"Id": "75249", "PostTypeId": "2", "Body": "<p>When you already have a function named foo() in your local scope but you need to access the one in the global scope.</p>\n", "OwnerDisplayName": "Drealmer", "LastActivityDate": "2008-09-16T18:09:27.423", "Score": "2", "CreationDate": "2008-09-16T18:09:27.423", "ParentId": "75213", "CommentCount": "0", "OwnerUserId": "12291"}, "bq_ids": {"n4140": {"so_75213_22085788_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 7110}}, "n3337": {"so_75213_22085788_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6854}}, "n4659": {"so_75213_22085788_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 8611}}}, "75224": {"Id": "75224", "PostTypeId": "2", "Body": "<p>referring to the global scope</p>\n", "OwnerDisplayName": "Shy", "LastActivityDate": "2008-09-16T18:07:54.773", "Score": "1", "CreationDate": "2008-09-16T18:07:54.773", "ParentId": "75213", "CommentCount": "1", "OwnerUserId": "9611"}, "75262": {"Body": "<p>It means global scope.  You might need to use this operator when you have conflicting functions or variables in the same scope and you need to use a global one.  You might have something like:</p>\n<pre><code>void bar();    // this is a global function\n\nclass foo {\n    void some_func() { ::bar(); }    // this function is calling the global bar() and not the class version\n    void bar();                      // this is a class member\n};\n</code></pre>\n<p>If you need to call the global bar() function from within a class member function, you should use ::bar() to get to the global version of the function.</p>\n", "CreationDate": "2008-09-16T18:10:38.807", "ParentId": "75213", "CommentCount": "3", "LastEditDate": "2016-02-08T15:52:39.830", "PostTypeId": "2", "OwnerDisplayName": "Mark", "LastEditorUserId": "4405", "LastActivityDate": "2016-02-08T15:52:39.830", "Id": "75262", "Score": "54", "OwnerUserId": "4405"}});