post_cb({"24888001": {"CommentCount": "2", "ViewCount": "510", "CreationDate": "2014-07-22T12:54:31.833", "LastActivityDate": "2014-07-22T13:50:48.733", "Title": "clang redefinition of symbols in different namespaces error", "AcceptedAnswerId": "24888067", "PostTypeId": "1", "Id": "24888001", "Score": "1", "Body": "<p>I am trying to compile following piece of code: </p>\n<pre><code>#include &lt;iostream&gt;\n\nextern \"C\" {\ninline void blah() {\n    std::cout &lt;&lt; \"123\" &lt;&lt; std::endl;\n};\n}\n\nnamespace NN {\nextern \"C\" {\ninline void blah() {\n    std::cout &lt;&lt; \"123\" &lt;&lt; std::endl;\n};\n}\n}\n\nint main() {\n    blah();\n    return 0;\n};\n</code></pre>\n<p>g++ compiles without errors, but clang:</p>\n<pre><code>x.cpp:11:13: error: redefinition of 'blah'\ninline void blah() {\n            ^\nx.cpp:4:13: note: previous definition is here\ninline void blah() {\n            ^\n1 error generated.\n</code></pre>\n<p>Is it possible to fix compilation for clang?</p>\n", "Tags": "<c++><g++><clang><linker-errors>", "OwnerUserId": "3077004", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24888001_24888067_1": {"section_id": 5521, "quality": 1.0, "length": 7}, "so_24888001_24888067_0": {"section_id": 5522, "quality": 1.0, "length": 28}}, "n3337": {"so_24888001_24888067_1": {"section_id": 5307, "quality": 1.0, "length": 7}, "so_24888001_24888067_0": {"section_id": 5308, "quality": 1.0, "length": 28}}, "n4659": {"so_24888001_24888067_1": {"section_id": 6956, "quality": 1.0, "length": 7}, "so_24888001_24888067_0": {"section_id": 6957, "quality": 1.0, "length": 28}}}, "24888067": {"ParentId": "24888001", "LastEditDate": "2014-07-22T13:50:48.733", "CommentCount": "0", "CreationDate": "2014-07-22T12:57:34.833", "OwnerUserId": "440558", "LastEditorUserId": "3204551", "PostTypeId": "2", "Id": "24888067", "Score": "4", "Body": "<p>The problem is the <code>extern \"C\"</code> part, because that makes the function callable from C (and everything else that can call C functions) which have no namespaces, meaning both functions are the same C-callable symbol.</p>\n<p>It has nothing to do with Clang, it's a C++ thing so should not work with any compiler.</p>\n<hr>\n<p>In the C++11 standard (ISO/IEC 14882:2011(E) from 2012), the relevant passages are in \u00a77.5/6, the most important being the beginning:</p>\n<blockquote>\n<p id=\"so_24888001_24888067_0\">At most one function with a particular name can have C language linkage. Two declarations for a function with C language linkage with the same function name (ignoring the namespace names that qualify it) that appear in different namespace scopes refer to the same function.</p>\n</blockquote>\n<p>About error messages, the specification also says</p>\n<blockquote>\n<p id=\"so_24888001_24888067_1\">... no diagnostic is required if the declarations appear in different translation units</p>\n</blockquote>\n<p>GCC Bug report: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=25940\" rel=\"nofollow\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=25940</a></p>\n</hr>", "LastActivityDate": "2014-07-22T13:50:48.733"}});