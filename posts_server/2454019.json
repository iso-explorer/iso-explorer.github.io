post_cb({"2454082": {"ParentId": "2454019", "CommentCount": "4", "Body": "<p>To answer the actual question you asked: \"because the standard says so\".</p>\n<p>Only variables of static, constant, <em>integral</em> types (including enumerations) may be initialized inside of a class declaration. If a compiler supports in-line initialization of floats, it is an extension. As others pointed out, the way to deal with static, constant, non-integral variables is to define and initialize them in the class's corresponding source file (not the header).</p>\n<p>C++ Standard Section 9.2 \"Class Members\" item 4:</p>\n<blockquote>\n<p id=\"so_2454019_2454082_0\">A <em>member-declarator</em> can contain a\n  <em>constant-initializer</em> only if it declares a static member (9.4) of\n  const integral or const enumeration\n  type, see 9.4.2.</p>\n</blockquote>\n<p>Section 9.4.2 \"Static Data Members\" item 2:</p>\n<blockquote>\n<p id=\"so_2454019_2454082_1\">If a static data member is of const\n  integral or const enumeration type,\n  its declaration in the class de\ufb01nition\n  can specify a <em>constant-initializer</em>\n  which shall be an integral constant\n  expression (5.19). In that case, the\n  member can appear in integral constant\n  expressions. The member shall still be\n  de\ufb01ned in a namespace scope if it is\n  used in the program and the namespace\n  scope de\ufb01nition shall not contain an\n  <em>initializer</em>.</p>\n</blockquote>\n", "OwnerUserId": "39375", "PostTypeId": "2", "Id": "2454082", "Score": "52", "CreationDate": "2010-03-16T11:59:28.513", "LastActivityDate": "2010-03-16T11:59:28.513"}, "2454043": {"ParentId": "2454019", "CommentCount": "3", "Body": "<p>You should initialize them in the body of one of your cpp files:</p>\n<pre><code>class MY_CONSTS\n{\npublic :\n    static const long   LONG_CONST = 1;      // Compiles \n    static const float FLOAT_CONST;\n};\n\nconst float MY_CONSTS::FLOAT_CONST = 0.001f;\n</code></pre>\n", "OwnerUserId": "15721", "PostTypeId": "2", "Id": "2454043", "Score": "33", "CreationDate": "2010-03-16T11:52:48.280", "LastActivityDate": "2010-03-16T11:52:48.280"}, "2454077": {"ParentId": "2454019", "CommentCount": "2", "Body": "<p>See <a href=\"http://www2.research.att.com/~bs/bs_faq2.html#in-class\" rel=\"noreferrer\">Stroustrup's explanation</a>. Relevant quote:</p>\n<blockquote>\n<p id=\"so_2454019_2454077_0\">A class is typically declared in a\n  header file and a header file is\n  typically included into many\n  translation units. However, to avoid\n  complicated linker rules, C++ requires\n  that every object has a unique\n  definition. That rule would be broken\n  if C++ allowed in-class definition of\n  entities that needed to be stored in\n  memory as objects. See D&amp;E for an\n  explanation of C++'s design tradeoffs.</p>\n</blockquote>\n", "OwnerUserId": "35501", "PostTypeId": "2", "Id": "2454077", "Score": "18", "CreationDate": "2010-03-16T11:59:08.107", "LastActivityDate": "2010-03-16T11:59:08.107"}, "2454191": {"ParentId": "2454019", "CommentCount": "0", "Body": "<p>The rationale under the standard wording that others have given is the same for which template arguments can't be floating point number.  To get consistent result you'll need the compiler implement the same evaluation as the one done at compile time, and that can be complicated for cross-compiler and in the case where the program plays with rounding mode.</p>\n<p>From memory, in C++0X, the notion of constant expression has been extended and so your code would be valid (but it is unspecified in the result of floating point constant expressions are the same when evaluated at run-time or at compile time).</p>\n", "OwnerUserId": "136208", "PostTypeId": "2", "Id": "2454191", "Score": "6", "CreationDate": "2010-03-16T12:18:33.017", "LastActivityDate": "2010-03-16T12:18:33.017"}, "2454019": {"CommentCount": "1", "CreationDate": "2010-03-16T11:49:51.777", "PostTypeId": "1", "AcceptedAnswerId": "2454082", "LastEditorUserId": "224671", "LastActivityDate": "2010-03-16T14:52:49.140", "LastEditDate": "2010-03-16T11:54:16.273", "ViewCount": "34115", "FavoriteCount": "12", "Title": "Why aren't static const floats allowed?", "Id": "2454019", "Score": "53", "Body": "<p>I have a class which is essentially just holds a bunch of constant definitions used through my application. For some reason though, <code>long</code>s compile but <code>float</code>s do not:</p>\n<pre><code>class MY_CONSTS\n{\npublic :\n    static const long   LONG_CONST = 1;      // Compiles \n    static const float FLOAT_CONST = 0.001f; // C2864\n};\n</code></pre>\n<p>Gives the following error:</p>\n<pre><code>1&gt;c:\\projects\\myproject\\Constant_definitions.h(71) : error C2864: 'MY_CONSTS::FLOAT_CONST' : only static const integral data members can be initialized within a class\n</code></pre>\n<p>Am I missing something?</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "15369", "AnswerCount": "6"}, "2454132": {"ParentId": "2454019", "CommentCount": "0", "Body": "<p>From standard 9.4.2/4</p>\n<blockquote>\n<p id=\"so_2454019_2454132_0\">If a static data member is of const\n  integral or const enumeration type,\n  its declaration in the class\n  definition can specify a\n  constant-initializer which shall be an\n  integral constant expression (5.19).\n  In that case, the member can appear in\n  integral constant expressions. The\n  member shall still be defined in a\n  namespace scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer.</p>\n</blockquote>\n<p>And 5.19/1:</p>\n<blockquote>\n<p id=\"so_2454019_2454132_1\">In several places, C + + requires\n  expressions that evaluate to an\n  integral or enumeration constant: as\n  array bounds (8.3.4, 5.3.4), as case\n  expressions (6.4.2), as bit-field\n  lengths (9.6), as enumerator\n  initializers (7.2), as static member\n  initializers (9.4.2), and as integral\n  or enumeration non-type template\n  arguments (14.3). constant-expression:\n  conditional-expression An integral\n  constant-expression can involve only\n  literals (2.13), enumerators, const\n  variables or static data members of\n  integral or enumeration types\n  initialized with constant expressions\n  (8.5), non-type template parameters of\n  integral or enumeration types, and\n  sizeof expressions. <strong>Floating\n  literals (2.13.3) can appear only if\n  they are cast to integral or\n  enumeration types</strong>. Only type\n  conversions to integral or enumeration\n  types can be used. In particular,\n  except in sizeof expressions,\n  functions, class objects, pointers, or\n  references shall not</p>\n</blockquote>\n", "OwnerUserId": "125672", "PostTypeId": "2", "Id": "2454132", "Score": "2", "CreationDate": "2010-03-16T12:08:55.750", "LastActivityDate": "2010-03-16T12:08:55.750"}, "2454044": {"ParentId": "2454019", "CommentCount": "0", "Body": "<p>what about:</p>\n<pre><code>class MY_CONSTS\n{\npublic :\n    static const long   LONG_CONST;\n    static const float FLOAT_CONST;\n};\n\nconst long MY_CONSTS::LONG_CONST = 1;\nconst float MY_CONSTS::FLOAT_CONST = 0.001f;\n</code></pre>\n<p>(though, i cannot give any explanation of this specific case...)</p>\n", "OwnerUserId": "195823", "PostTypeId": "2", "Id": "2454044", "Score": "2", "CreationDate": "2010-03-16T11:52:49.727", "LastActivityDate": "2010-03-16T11:52:49.727"}, "bq_ids": {"n4140": {"so_2454019_2454082_1": {"section_id": 5908, "quality": 0.6756756756756757, "length": 25}, "so_2454019_2454132_0": {"section_id": 5908, "quality": 0.7567567567567568, "length": 28}}, "n3337": {"so_2454019_2454082_1": {"section_id": 5680, "quality": 0.6756756756756757, "length": 25}, "so_2454019_2454132_0": {"section_id": 5680, "quality": 0.7567567567567568, "length": 28}}, "n4659": {"so_2454019_2454082_1": {"section_id": 7390, "quality": 0.5675675675675675, "length": 21}, "so_2454019_2454132_0": {"section_id": 7390, "quality": 0.6486486486486487, "length": 24}}}});