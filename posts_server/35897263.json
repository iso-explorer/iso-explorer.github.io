post_cb({"35897408": {"ParentId": "35897263", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><code>cin</code> and <code>cout</code> are variables, and as such they're objects.</p>\n<p>An <strong>object</strong>, in C++, is a not-necessarily contiguous region of storage, with an associated content interpretation in the form of a type.</p>\n<p>This is a term defined by the C++ standard.</p>\n<b>C++11 \u00a71.8/1</b>\n<blockquote>\n<p id=\"so_35897263_35897408_0\"><strong>\u201d</strong> The constructs in a C ++ program create, destroy, refer to, access, and manipulate objects. An <em>object</em> is a\n  region of storage. [<em>Note:</em> A function is not an object, regardless of whether or not it occupies storage in the\n  way that objects do. <em>\u2014end note</em> ] An object is created by a <em>definition</em> (3.1), by a <em>new-expression</em> (5.3.4) or\n  by the implementation (12.2) when needed. The properties of an object are determined when the object is\n  created. An object can have a <em>name</em> (Clause 3). An object has a <em>storage duratio</em>n (3.7) which influences\n  its <em>lifetime</em> (3.8). An object has a <em>type</em> (3.9). The term <em>object type</em> refers to the type with which the object\n  is created. Some objects are <em>polymorphic</em> (10.3); the implementation generates information associated with\n  each such object that makes it possible to determine that object\u2019s type during program execution. For other\n  objects, the interpretation of the values found therein is determined by the type of the <em>expressions</em> (Clause 5)\n  used to access them.</p>\n</blockquote>\n<p>The non-contiguous thing was primarily in support of multiple inheritance, but at least one committee member argued strongly, in a discussion with me, that it was intended to support making objects in general non-contiguous. However, I know of no extant compiler that does that. It seems meaningless to me.</p>\n<p><code>std::string</code> is not an object, it's a type.</p>\n<hr>\n<p>Note: with some other programming languages, and in computer science in general, the term \u201cobject\u201d often denotes <em>an instance of a class type</em>. In C++ even instances of non-class types such as <code>int</code>, are objects.</p>\n</hr>", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2016-03-09T16:46:03.060", "Id": "35897408", "Score": "11", "CreationDate": "2016-03-09T16:38:13.773", "LastActivityDate": "2016-03-09T16:46:03.060"}, "35897419": {"ParentId": "35897263", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>They are considered objects, because they are \"objects\". They are not types, they are instances.</p>\n<p>You can see how they are defined <a href=\"http://en.cppreference.com/w/cpp/io/cin\" rel=\"nofollow\">on cppreference</a>.</p>\n<p>Example:</p>\n<pre><code>extern std::istream cin;\nextern std::wistream wcin;\n</code></pre>\n<p>As you can see, <code>cin</code> is a variable whose type is <code>std::istream</code>.</p>\n<p>Regarding your assumption about <code>std::string</code>: again, <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"nofollow\">cppreference is very helpful</a>.</p>\n<p>We can see that <code>std::string</code> is not a variable/object, but a type alias for <code>std::basic_string&lt;char&gt;</code> instead.</p>\n", "OwnerUserId": "598696", "LastEditorUserId": "598696", "LastEditDate": "2016-03-09T16:41:09.180", "Id": "35897419", "Score": "1", "CreationDate": "2016-03-09T16:38:37.400", "LastActivityDate": "2016-03-09T16:41:09.180"}, "bq_ids": {"n4140": {"so_35897263_35897408_0": {"section_id": 5790, "quality": 0.8, "length": 72}}, "n3337": {"so_35897263_35897408_0": {"section_id": 5563, "quality": 0.8, "length": 72}}, "n4659": {"so_35897263_35897408_0": {"section_id": 7247, "quality": 0.7111111111111111, "length": 64}}}, "35897263": {"CommentCount": "4", "ViewCount": "118", "CreationDate": "2016-03-09T16:31:42.330", "LastActivityDate": "2016-03-09T16:46:03.060", "Title": "Why are things like cin, cout, string, etc. considered objects?", "PostTypeId": "1", "Id": "35897263", "Score": "1", "Body": "<p>From what I understand (and what my textbook says), an object is a programming element that is self-contained, which holds data and a procedure that performs an operation on that data. With this being said, why are things like cin, cout, string, etc. considered objects? Is cin an object, in the way that I defined? Is cin the name of a self-contained unit, which holds data and a procedure that performs operations on that data, found within the source code of the iostream header file? </p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "6036224", "AnswerCount": "2"}});