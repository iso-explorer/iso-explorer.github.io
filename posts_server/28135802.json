post_cb({"28135802": {"CommentCount": "0", "ViewCount": "40", "PostTypeId": "1", "LastEditorUserId": "64046", "CreationDate": "2015-01-25T11:23:48.920", "LastActivityDate": "2015-05-12T17:02:52.897", "Title": "Why is this POD initialised with 0?", "LastEditDate": "2015-05-12T17:02:52.897", "Id": "28135802", "Score": "-2", "Body": "<p>I was trying learn behaviour of POD in case of goto. Following is the program I used:</p>\n<pre><code>#include &lt;iostream&gt;\nvoid f(int i){\n    if (i &lt; 10)\n         goto jump1;\n    int j;\n    jump1:\n         std::cout &lt;&lt; j;\n}\n\nint main()\n{\n    f(9);\n}\n</code></pre>\n<p>Why is <code>j</code> initialised with 0? </p>\n", "Tags": "<c++><goto>", "OwnerUserId": "1322382", "AnswerCount": "2"}, "28135828": {"ParentId": "28135802", "CommentCount": "3", "CreationDate": "2015-01-25T11:27:25.053", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "28135828", "Score": "1", "Body": "<p>There is nothing to initialize a local non-static variable to zero in the standard, it's just a custom/random behaviour of you compiler.Reading a value from uninitialized variable can invoke an undefined behaviour. The <code>goto</code> has nothing to do with that declaration.</p>\n", "LastActivityDate": "2015-01-25T11:27:25.053"}, "bq_ids": {"n4140": {"so_28135802_28135866_0": {"section_id": 3918, "quality": 0.9615384615384616, "length": 25}}, "n3337": {"so_28135802_28135866_0": {"section_id": 3778, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_28135802_28135866_0": {"section_id": 4804, "quality": 1.0, "length": 26}}}, "28135866": {"ParentId": "28135802", "CommentCount": "0", "CreationDate": "2015-01-25T11:30:46.750", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "28135866", "Score": "1", "Body": "<p>The <code>goto</code> jump itself is fine. By [stmt.dcl]/3:</p>\n<blockquote>\n<p id=\"so_28135802_28135866_0\">It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A program that jumps from a point where a variable with automatic storage duration is not in scope to a point where it is in scope is ill-formed unless the variable has scalar type [...] and is declared without an initializer (8.5).</p>\n</blockquote>\n<p>However, what is <em>not</em> legal is to read an uninitialized variable by [dcl.init], and thus your program has undefined behaviour at runtime if you call <code>f</code> with an argument less than 10.</p>\n", "LastActivityDate": "2015-01-25T11:30:46.750"}});