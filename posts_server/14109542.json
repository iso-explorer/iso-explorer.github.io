post_cb({"14109569": {"ParentId": "14109542", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Per the C++ 2011 standard, \u00a720.7.2.2.1 \u00b66:</p>\n<p><code>template&lt;class Y&gt; explicit shared_ptr(Y* p);</code></p>\n<blockquote>\n<p id=\"so_14109542_14109569_0\">Throws: <code>bad_alloc</code>, or an\n  implementation-defined exception when a resource other than memory\n  could not be obtained.</p>\n</blockquote>\n<p>You catch exceptions when you know how to handle them. If you're going to handle a out-of-memory exception and have code to do so, then by all means, put it in a try-catch. If you're not writing mission-critical code and don't expect to be operating on the edge of system memory constraints, it's likely not necessary. Note that pretty much every line of code you write can throw exceptions once your system is out of memory.</p>\n<p>It's important to note that on modern hardware/operating systems, \"out of memory\" doesn't mean that you've exceeded the physical memory constraints - you can have only 128MiB of memory and not get an error even when you use 10 times that, and you can have 8GiB of physical memory and get that error when you've only used half that much. This refers to the memory space available to your application, which the OS will page to disk if necessary (and assuming available disk space).</p>\n", "OwnerUserId": "17027", "LastEditorUserId": "17027", "LastEditDate": "2013-01-01T10:37:14.513", "Id": "14109569", "Score": "9", "CreationDate": "2013-01-01T10:15:55.513", "LastActivityDate": "2013-01-01T10:37:14.513"}, "14109542": {"CommentCount": "2", "AcceptedAnswerId": "14109569", "CreationDate": "2013-01-01T10:10:05.897", "LastActivityDate": "2013-01-01T10:37:14.513", "PostTypeId": "1", "ViewCount": "742", "FavoriteCount": "1", "Title": "Does std::tr1::shared_ptr throw bad_alloc and a good idea to be in try/catch block?", "Id": "14109542", "Score": "4", "Body": "<p>I am actually making a simple C++ SFML game and I want to learn much more into C++ programming.</p>\n<p>Now I am using shared_ptr to manage resources. I have some question about shared_ptrs when creating a new resource like:</p>\n<pre><code>    shared_ptr&lt; Resource &gt; resource( new Resource( World::LEVEL ) );\n</code></pre>\n<p>According to boost shared_ptr&lt; class Y&gt;( Y * p ) throws bad_alloc. \nI dunno if std::tr1 does the same. And I do not know if I should worry about putting shared_ptr inside a try/catch block to check if bad_alloc is thrown. Is this a good programming practice?</p>\n", "Tags": "<c++><boost>", "OwnerUserId": "1593007", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_14109542_14109569_0": {"section_id": 4383, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_14109542_14109569_0": {"section_id": 4220, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_14109542_14109569_0": {"section_id": 5648, "quality": 0.8181818181818182, "length": 9}}}, "14109568": {"ParentId": "14109542", "CommentCount": "1", "Body": "<p><code>shared_ptr</code> needs to allocate the counter, so it can throw\n<code>bad_alloc</code>.  (IIRC, when it does so, it calls delete on the\npointer passed into it.) </p>\n<p>Whether you need to catch it is another question; you almost\ncertainly don't need to catch it in the function which creates\nthe <code>shared_ptr</code>.  It's just another failed allocation, and\nshould be caught (or not) whereever you handle failed\nallocations.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "14109568", "Score": "3", "CreationDate": "2013-01-01T10:15:19.193", "LastActivityDate": "2013-01-01T10:15:19.193"}});