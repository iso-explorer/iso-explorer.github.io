post_cb({"22111042": {"PostTypeId": "2", "Body": "<p>If base class had done deep copy everywhere it would expect the same from inherited classes. \nHowever, if we started doing default copy ctors then the compiler would fail to \"automate\" it because you'd need to write special code in all classes for it.</p>\n<p>Your example is fairly easy but it will be difficult if you had multiple pointers and variables in derived classes.\nPerhaps that is why it was never allowed in the beginning. </p>\n", "LastActivityDate": "2014-03-01T06:33:20.317", "Id": "22111042", "CommentCount": "1", "CreationDate": "2014-03-01T06:33:20.317", "ParentId": "22110903", "Score": "0", "OwnerUserId": "142650"}, "22110903": {"ViewCount": "26", "Body": "<p>I have a base class which is inherited by 2 child classes. This child classes also inherit the constructor's. But if I try to construct instance of class A with a copy of class B it won't work (compile error).</p>\n<pre><code>class base {\n  int a_;\npublic:\n  base(int x)\n  : a_(x) {}\n\n  base(base const&amp; cpy)\n  : a_(cpy.a_) {}\n};\n\nclass A : public base {\npublic:\n  using base::base;\n};\n\nclass B : public base  {\npublic:\n  using base::base;\n};\n\nint main() {\n    A a(123);\n    B b(a);\n\n  return 0;\n}\n</code></pre>\n<p>As you can see <a href=\"http://coliru.stacked-crooked.com/a/3fbd01cd7eba8cd0\" rel=\"nofollow\">here</a>.</p>\n<p>However, if I insert a constructor with the base as parameter class it works:</p>\n<pre><code>class A : public base  {\npublic:\n  using base::base;\n\n  A(base const&amp; cpy)\n  : base(cpy) {}\n};\n</code></pre>\n<p>It's not a problem to insert a constructor for the base. My question is why is the inherited constructor not working. </p>\n", "AcceptedAnswerId": "22110962", "Title": "initializing of sisterclass with inherited constructor", "CreationDate": "2014-03-01T06:13:40.220", "Id": "22110903", "CommentCount": "1", "LastEditDate": "2014-03-01T06:36:08.337", "PostTypeId": "1", "LastEditorUserId": "1810087", "LastActivityDate": "2014-03-01T06:36:08.337", "Score": "1", "OwnerUserId": "1810087", "Tags": "<inheritance><c++11><constructor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_22110903_22110962_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 484}}, "n3337": {"so_22110903_22110962_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 475}}}, "22110962": {"PostTypeId": "2", "Body": "<p>The copy constructor (and move, and default) are specifically excluded from inheritance. I think they wanted to avoid making implicit the kind of reverse-slicing behavior you demonstrate, although in many cases it's not a problem.</p>\n<p>N3797 \u00a712.9/2:</p>\n<blockquote>\n<p id=\"so_22110903_22110962_0\">For each non-template constructor in the candidate set of inherited constructors other than a constructor having no parameters or a copy/move constructor having a single parameter, a constructor is implicitly declared with the same constructor characteristics unless \u2026</p>\n</blockquote>\n", "LastActivityDate": "2014-03-01T06:23:28.613", "Id": "22110962", "CommentCount": "1", "CreationDate": "2014-03-01T06:23:28.613", "ParentId": "22110903", "Score": "3", "OwnerUserId": "153285"}});