post_cb({"24499084": {"ParentId": "24499004", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_24499004_24499084_0\"><em>What is a scope for lambda function in C++11?</em></p>\n</blockquote>\n<hr>\n<p>According to the standard <em>\u00a7 5.1.2/2 &amp; 3  Lambda expressions [expr.prim.lambda]</em>:</p>\n<blockquote>\n<p id=\"so_24499004_24499084_1\"><code>2</code> The evaluation of a lambda-expression results in a <code>prvalue</code> temporary (12.2). <strong>This temporary is called the closure object</strong>.</p>\n<p id=\"so_24499004_24499084_2\"><code>3</code> <strong>The closure type is declared in the smallest block scope, class scope, or namespace\n  scope that contains the corresponding lambda-expression.</strong></p>\n</blockquote>\n<ul>\n<li><p>So according to the above, your Lambda function's scope is the scope of function <code>someFunction()</code>. </p></li>\n<li><p>However, because you assign it to <code>onMouseOver</code> member variable, its move constructor is evoked, consequently <code>onMouseOver</code> will hold a moved instance of your Lambda.</p></li>\n</ul>\n<hr>\n<blockquote>\n<p id=\"so_24499004_24499084_3\"><em>Will that pointer be valid until end of program?</em></p>\n</blockquote>\n<hr>\n<ul>\n<li><p>Class template <code>std::function</code> is a general-purpose polymorphic function wrapper (i.e., a function object). Instances of <code>std::function</code> can store, copy, and invoke any callable target (e.g., functions, lambda expressions, bind expressions, or other function objects). </p></li>\n<li><p>Consequently, <code>onMouseOver</code> and its content will be valid as long as the <code>Button</code> class object that contains it is valid.</p></li>\n</ul>\n</hr></hr></hr>", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2014-06-30T21:40:34.160", "Id": "24499084", "Score": "3", "CreationDate": "2014-06-30T21:19:06.503", "LastActivityDate": "2014-06-30T21:40:34.160"}, "24499004": {"CommentCount": "0", "ViewCount": "479", "CreationDate": "2014-06-30T21:10:37.403", "LastActivityDate": "2014-06-30T21:40:34.160", "Title": "What is a scope for lambda function in C++11 (delegates)", "AcceptedAnswerId": "24499084", "PostTypeId": "1", "Id": "24499004", "Score": "2", "Body": "<p>I'm currently working on a GUI for my C++11/OpenGL3.3 project and I though about making some kind of callback system for interactive GUI elements. I used JS/jQuery and I really liked system of definig in-place methods like onMouseOver, onClick for each website element i wanted. I found that delegates are the best way for me to get such feature.</p>\n<p><strong>Example code:</strong></p>\n<pre><code>class Button {\n    public:\n        // ...\n\n        // method (not needed in real-life, just to \"show\" it)\n        void MouseOver(int x, int y) { onMouseOver(this, x, y); }\n\n        // variable\n        std::function&lt;void(Button*, int, int)&gt; onMouseOver;\n}\n\nvoid someFunction(...) {\n    // ...\n    Button t = new Button(...);\n    t.onMouseOver = [](Button* this, int x, int y) -&gt; void { some_code_here };\n    // ...\n}\n</code></pre>\n<p><strong>Main question:</strong> </p>\n<p>But i'm worried about scope of that particular onMouseOver function that i just created - will that pointer be valid until end of program? Can someone explain what exactly will happen with that function for the rest application lifetime?</p>\n<p><strong>Additional questions:</strong> </p>\n<p>Is there a better way to do something like that? Simpler/more efficient? I've seen many \"imposible fast\" - is it really that slow?</p>\n", "Tags": "<c++11><lambda><delegates><scope>", "OwnerUserId": "1020591", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24499004_24499084_2": {"section_id": 5962, "quality": 0.9285714285714286, "length": 13}, "so_24499004_24499084_1": {"section_id": 5961, "quality": 0.75, "length": 9}}, "n3337": {"so_24499004_24499084_2": {"section_id": 5731, "quality": 0.9285714285714286, "length": 13}, "so_24499004_24499084_1": {"section_id": 5730, "quality": 0.75, "length": 9}}, "n4659": {"so_24499004_24499084_2": {"section_id": 7452, "quality": 0.9285714285714286, "length": 13}}}});