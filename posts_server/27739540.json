post_cb({"27739681": {"ParentId": "27739540", "CommentCount": "2", "CreationDate": "2015-01-02T09:03:11.617", "OwnerUserId": "4323", "PostTypeId": "2", "Id": "27739681", "Score": "3", "Body": "<p>Piotr S already explain <em>why</em> your existing code isn't valid.  Here's an alternative solution.</p>\n<p>You can declare, but not define, the base class destructor:</p>\n<pre><code>class B {\n    int i;\npublic:\n    B(int param) : i(param) {}\n    ~B();\n};\n</code></pre>\n<p>By doing this, your existing code will work, and any program which attempts to destroy an instance of <code>B</code> will fail to link, because <code>~B()</code> is not defined.  This is not exactly ideal (because it gives a link-time error rather than a compile-time one), but it may give you what you need.</p>\n", "LastActivityDate": "2015-01-02T09:03:11.617"}, "27739653": {"ParentId": "27739540", "LastEditDate": "2015-06-27T19:57:39.897", "CommentCount": "2", "CreationDate": "2015-01-02T09:00:58.123", "Score": "10", "LastEditorUserId": "3953764", "PostTypeId": "2", "Id": "27739653", "OwnerUserId": "3953764", "Body": "<blockquote>\n<p id=\"so_27739540_27739653_0\"><em>Why is this not working?</em></p>\n</blockquote>\n<p>\u00a712.6.2 [class.base.init]/p10:</p>\n<blockquote>\n<p id=\"so_27739540_27739653_1\">In a non-delegating constructor, <strong>the destructor for each potentially constructed subobject of class type is potentially invoked</strong> (12.4). [ <em>Note:</em> This provision ensures that destructors can be called for fully-constructed sub-objects in case an exception is thrown (15.2). \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>\u00a712.4 [class.dtor]/p11:</p>\n<blockquote>\n<p id=\"so_27739540_27739653_2\">[...] A program is <strong>ill-formed if a destructor that is potentially invoked is deleted</strong> or not accessible from the context of the invocation.</p>\n</blockquote>\n<p>If an exception is thrown during a construction of any of subobjects, a compiler calls the destructors of already constructed base classes and data members, therefore the constructor of <code>D</code> requires a non-deleted, accessible destructor of <code>B</code>.</p>\n<blockquote>\n<p id=\"so_27739540_27739653_3\"><em>Any better ideas how to forbid destructors or non-PODs inside the class?</em></p>\n</blockquote>\n<p>In your case making the destructors <code>protected</code> ones should work instead:</p>\n<pre><code>class B {\n    int i;\npublic:\n    B(int param) : i(param) {}\nprotected:\n    ~B() {}\n};\nclass D : public B {\n    int i2;\npublic:\n    D(int p1, int p2) : B(p1), i2(p2) {}\nprotected:\n    ~D() {}\n};\n</code></pre>\n", "LastActivityDate": "2015-06-27T19:57:39.897"}, "bq_ids": {"n4140": {"so_27739540_27739653_2": {"section_id": 407, "quality": 1.0, "length": 8}, "so_27739540_27739653_1": {"section_id": 437, "quality": 0.7777777777777778, "length": 21}}, "n4659": {"so_27739540_27739653_2": {"section_id": 425, "quality": 1.0, "length": 8}, "so_27739540_27739653_1": {"section_id": 457, "quality": 0.7777777777777778, "length": 21}}}, "27739540": {"CommentCount": "1", "ViewCount": "256", "CreationDate": "2015-01-02T08:47:47.823", "LastActivityDate": "2015-06-27T19:57:39.897", "Title": "C++11's deleted destructor in derived class", "AcceptedAnswerId": "27739653", "PostTypeId": "1", "Id": "27739540", "Score": "4", "Body": "<pre><code>class B {\n    int i;\npublic:\n    B(int param) : i(param) {}\n    ~B() = delete;\n};\nclass D : public B {\n    int i2;\npublic:\n    D(int p1, int p2) : B(p1), i2(p2) {}\n    ~D() = delete;\n};\n\nint main() {\n    B* instance = new D(1,2);\n    return 0;\n}\n</code></pre>\n<p>cl test.cpp:</p>\n<pre><code>Microsoft (R) C/C++ Optimizing Compiler Version 18.00.31101 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\ntest.cpp\ntest.cpp(11) : error C2280: 'B::~B(void)' : attempting to reference a deleted function\n    test.cpp(6) : see declaration of 'B::~B'\n</code></pre>\n<p>(There is one emply line above the code, so these are one off. sorry)</p>\n<p>I have some special classes(one base and many derived) that for performance reasons are always allocated in a stack like memory arena.\nThey don't get any destructor calls(and by design they don't need to). This can be bad if some programmer after me decide that he really needs to put a vector inside.(memory leaks, these classes are spawned in large numbers and live a few function calls, ouch)</p>\n<p>What I tried is using C++11 deleted destructors.\nMy questions are:</p>\n<ul>\n<li>Why is this not working?</li>\n<li>Any better ideas how to forbid destructors or non-PODs inside the class?</li>\n</ul>\n", "Tags": "<c++><c++11><destructor>", "OwnerUserId": "1624322", "AnswerCount": "2"}});