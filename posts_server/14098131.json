post_cb({"14098157": {"Id": "14098157", "PostTypeId": "2", "Body": "<p><em>SFINAE</em> won't protect you there, the error happens <em>after</em> type deduction. However, this should work:</p>\n<pre><code>template &lt; typename T, typename Type = typename T::type &gt;\nstruct a_metafun { typedef Type type; };\n</code></pre>\n<p>By accesing <code>T::type</code> in a default template parameter we cause this to happen at substitution time, and at that time <em>SFINAE</em> kicks in.</p>\n<p><strong>Edit:</strong> After thinking some more, I'm not exactly sure why your current implementation fails. I think is because <code>a_metafun</code> <em>has</em> a member type <code>type</code>, one that causes a compilation error; it would be different if <code>a_metafun</code> didn't have a member type <code>type</code> at all.</p>\n", "LastEditorUserId": "927034", "LastActivityDate": "2012-12-31T06:19:41.703", "Score": "2", "CreationDate": "2012-12-31T06:14:09.280", "ParentId": "14098131", "CommentCount": "1", "OwnerUserId": "927034", "LastEditDate": "2012-12-31T06:19:41.703"}, "bq_ids": {"n4140": {"so_14098131_14098393_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 300}, "so_14098131_14098393_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 294}}, "n3337": {"so_14098131_14098393_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 291}, "so_14098131_14098393_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 285}}, "n4659": {"so_14098131_14098393_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 307}, "so_14098131_14098393_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 301}}}, "14098131": {"ViewCount": "296", "Body": "<p>This code fails to compile in most compilers but at first I intuitively expected SFINAE to protect me:</p>\n<pre><code>typedef void (*A)();\n\ntemplate &lt; typename T &gt;\nstruct a_metafun { typedef typename T::type type; };\n\ntemplate &lt; typename T &gt;\ntypename a_metafun&lt;T&gt;::type f(T) {}\n\ntemplate &lt; typename T&gt;\nvoid f(T(*)()) {}\n\nint main() { f(A()); }\n</code></pre>\n<p>I can fix the problem in at least two ways:</p>\n<p>1) Change the definition of \"metafun\" f() to:</p>\n<p><code>template &lt; typename T &gt;\ntypename T::type f(T) {}</code></p>\n<p>2) define \"a_metafun\" such that it analyzes T and has a type if T has one and doesn't if it doesn't...but instantiates without error either way:</p>\n<pre><code>BOOST_MPL_HAS_XXX_TRAIT_DEF(type)\n\ntypedef &lt; template T, bool = has_type&lt;T&gt;::value &gt;\nstruct a_metafun { };\n\ntypedef &lt; template T &gt;\nstruct a_metafun&lt;T, true&gt; { typedef typename T::type type };\n</code></pre>\n<p>Upon looking at 14.8.2 (C++03) it looks to me like it specifies exactly under what conditions SFINAE can apply.  Is there a better place to look?  Failure within the instantiation of an already deduced template, even during the deduction of another, would not seem to be included in this list.</p>\n<p>Another direction I've taken to interpreting what makes this illegal is that the deduction of a_metafun has already taken place and the instantiation of its innards is what is causing the error.  SFINAE doesn't apply during instantiation but only during deduction, or am I wrong there?  In the second case though, a_metafun is being correctly, and well-formedly instantiated but it simply has no \"type\" definition within, which means the template attempting to instantiate it is failing due to substitution.</p>\n<p>Basically I'm wondering what in the standard specifies the behavior I'm witnessing.  Every compiler I've tried complains, even comeau.  I'm of the opinion that they are correct in doing so, I'm just not completely sure as to why.</p>\n<p>So, experts...what's what?  Why does the instantiation of type, even in the context of deduction in f() cause an error rather than SFINAE exclusion? </p>\n", "Title": "SFINAE, deduction vs. instantiation", "CreationDate": "2012-12-31T06:10:41.370", "LastActivityDate": "2014-09-04T15:32:01.063", "CommentCount": "1", "LastEditDate": "2012-12-31T07:58:34.943", "PostTypeId": "1", "LastEditorUserId": "301883", "Id": "14098131", "Score": "6", "OwnerUserId": "301883", "Tags": "<c++><standards>", "AnswerCount": "2"}, "14098393": {"Id": "14098393", "PostTypeId": "2", "Body": "<p>In C++03 specification, the rule of SFINAE is a little vague, allowing compiler authors to go to <em>any</em> length to find substitution failure to result in SFINAE. The relevant text \u00a714.8.2/2 from C++03 says,</p>\n<blockquote>\n<p id=\"so_14098131_14098393_0\"><code>-</code> [...] If a substitution in a template parameter or in the function type of the function template results in an invalid type, type deduction fails [...]</p>\n</blockquote>\n<p>It further explains few reasons for failure, but none of them actually says at what point the substitution failure should be considered as SFINAE. So I guess, your code may work fine in C++03 (or may not, depending on how the compiler authors interpret the text. It is confusing to me anyway).</p>\n<p>But the wordings in C++11 has been improved removing the vagueness. It says in \u00a714.8.2/8,</p>\n<blockquote>\n<p id=\"so_14098131_14098393_1\">If a substitution results in an invalid type or expression, type deduction fails. An invalid type or expression is one that would be ill-formed if written using the substituted arguments. [ Note: Access checking is done as part of the substitution process. \u2014end note ] Only invalid types and expressions in <strong>the immediate context</strong> of the function type and its template parameter types can result in a deduction failure.</p>\n</blockquote>\n<p>The term <em>\"immediate context\"</em> is interesting, and I think it applies to your situation. More specifically, the substitution failure in the meta-function <code>a_metafun</code> is not considered <em>\"immediate context\"</em> of the function-type. It is ill-formed in C++11, not SFINAE.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2014-09-04T15:32:01.063", "Score": "4", "CreationDate": "2012-12-31T06:42:18.827", "ParentId": "14098131", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2014-09-04T15:32:01.063"}});