post_cb({"bq_ids": {"n4140": {"so_23767241_23767241_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 7043}, "so_23767241_23767278_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 5908}, "so_23767241_23767278_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 5907}}, "n3337": {"so_23767241_23767241_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6788}, "so_23767241_23767278_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 5680}, "so_23767241_23767278_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 5679}}, "n4659": {"so_23767241_23767241_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 8540}, "so_23767241_23767278_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 7390}, "so_23767241_23767278_1": {"length": 24, "quality": 0.8571428571428571, "section_id": 7389}}}, "23767364": {"Id": "23767364", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23767241_23767364_0\">... without the need to declare it somewhere in the scope. Is that by any chance possible?</p>\n</blockquote>\n<p>No, it's not possible without declaring it (which you already tried to do in your class declaration). You probably meant, without <em>defining</em> it outside your class declaration. Again the answer is no.<br>\nYou have to separate declaration and definition for this case (it only works with primitive integral types like <code>int</code> to initialize these directly in the class declaration).</br></p>\n<p>First have a simple declaration in your class declaration (usually something like <code>CData.hpp</code>)</p>\n<pre><code>namespace misc {\n    class CData {\n    public:\n        CData( ) { };\n        CData( int d );\n\n        CData&amp; operator = ( const CData&amp; d );\n\n        static const CData&amp; FIRST;\n\n    private:\n        int data;\n    };\n}\n</code></pre>\n<p>and then define it in a separate compilation unit (usually something like <code>CData.cpp</code>)</p>\n<pre><code>namespace misc {\n    const CData&amp; CData::FIRST = CData( 512 );\n}\n</code></pre>\n", "LastEditorUserId": "1413395", "LastActivityDate": "2015-05-17T02:58:16.273", "Score": "3", "CreationDate": "2014-05-20T18:31:39.367", "ParentId": "23767241", "CommentCount": "7", "OwnerUserId": "1413395", "LastEditDate": "2015-05-17T02:58:16.273"}, "23767241": {"ViewCount": "316", "Body": "<p>I'd like to have a class that has <em>static</em> members to itself, but I can't figure how to do that. Is that even possible?</p>\n<p>I get the error:</p>\n<blockquote>\n<p id=\"so_23767241_23767241_0\">only static const integral data members can be initialized within a class</p>\n</blockquote>\n<p>Code:</p>\n<pre><code>namespace misc\n{\n    class CData\n    {\n    public:\n        CData( ) { };\n        CData( int d );\n\n        CData&amp; operator = ( const CData&amp; d );\n\n        static const CData FIRST = CData( 512 ); //how?\n\n    private:\n        int data;\n    };\n}\n</code></pre>\n<p>As I use <code>FIRST</code> a lot I would like to statically access it using <code>misc::CData::FIRST</code> without the need to declare it somewhere in the scope. Is that by any chance possible?</p>\n", "AcceptedAnswerId": "23767364", "Title": "C++ static const class members initialization", "CreationDate": "2014-05-20T18:23:52.700", "Id": "23767241", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-05-20T20:25:12.433", "LastEditorUserId": "560648", "LastActivityDate": "2015-05-17T02:58:16.273", "Score": "1", "OwnerUserId": "1579704", "Tags": "<c++>", "AnswerCount": "3"}, "23767278": {"Id": "23767278", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23767241_23767278_0\">... without the need to declare it somewhere in the scope. Is that by\n  any chance possible?</p>\n</blockquote>\n<p>No.</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 9.4.2/2 </p>\n<p>Static data members </p>\n<blockquote>\n<p id=\"so_23767241_23767278_1\">The declaration of a static data member in its class definition is not\n  a definition and may be of an incomplete type other than cv-qualified\n  void. The definition for a static data member shall appear in a\n  namespace scope enclosing the member\u2019s class definition. (...)</p>\n</blockquote>\n<p>You can declare a static data member in class:</p>\n<pre><code>namespace misc {\n    class CData {\n    public:\n        //...\n        static const CData FIRST;  // declaration\n        //...\n}\n</code></pre>\n<p>and define it in (exactly) one of the .cpp files:</p>\n<pre><code>namespace misc {\n    CData CData::FIRST = CData( 512 );  // definition\n}\n</code></pre>\n<p>This is preferred solution, however you need to have this definition out of your class. You could have defined the member in class if it was of an integral type </p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 9.4.2/3 says</p>\n<blockquote>\n<p id=\"so_23767241_23767278_2\">If a non-volatile const static data member is of integral or\n  enumeration type, its declaration in the class definition can specify\n  a brace-or-equal-initializer in which every initializer-clause that is\n  an assignment- expression is a constant expression (...)</p>\n</blockquote>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2014-05-20T20:38:34.903", "Score": "0", "CreationDate": "2014-05-20T18:26:58.777", "ParentId": "23767241", "CommentCount": "19", "OwnerUserId": "1141471", "LastEditDate": "2014-05-20T20:38:34.903"}, "23767280": {"Id": "23767280", "PostTypeId": "2", "Body": "<p>For non-integral data, something like this is preferred since it avoids the <a href=\"http://www.parashift.com/c++-faq/static-init-order.html\" rel=\"nofollow\">static initialization fiasco.</a></p>\n<pre><code>static const CData FIRST()\n{\n    static CData first(512); //only initialized once, when first requested\n\n    return first;\n}\n</code></pre>\n", "LastActivityDate": "2014-05-20T18:27:04.583", "CommentCount": "0", "CreationDate": "2014-05-20T18:27:04.583", "ParentId": "23767241", "Score": "0", "OwnerUserId": "2209008"}});