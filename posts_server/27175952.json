post_cb({"bq_ids": {"n4140": {"so_27175952_27176107_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 7196}, "so_27175952_27176107_1": {"length": 49, "quality": 0.9607843137254902, "section_id": 7192}}, "n3337": {"so_27175952_27176107_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 6940}, "so_27175952_27176107_1": {"length": 49, "quality": 0.9607843137254902, "section_id": 6936}}, "n4659": {"so_27175952_27176107_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 8705}, "so_27175952_27176107_1": {"length": 49, "quality": 0.9607843137254902, "section_id": 8701}}}, "27176107": {"Id": "27176107", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27175952_27176107_0\">what happens to the original type?</p>\n</blockquote>\n<p>You mean the original object? It get's destroyed, that is, its lifetime ends. The lifetime of the array object of type <code>buffer_type [1000]</code> ends as soon as you reuse its storage.</p>\n<blockquote>\n<p id=\"so_27175952_27176107_1\"><strong>A program may end the lifetime of any object by reusing the storage\n  which the object occupies</strong> or by explicitly calling the destructor for\n  an object of a class type with a non-trivial destructor. For an object\n  of a class type with a non-trivial destructor, the program is not\n  required to call the destructor explicitly before the storage which\n  the object occupies is reused or released; however, if there is no\n  explicit call to the destructor or if a delete-expression (5.3.5) is\n  not used to release the storage, the destructor shall not be\n  implicitly called and any program that depends on the side effects\n  produced by the destructor has undefined behavior.</p>\n</blockquote>\n<p>Note that this implies that we should not use something with a non-trivial destructor for the buffer:  The elements' destructors are called at the end of the scope it's defined in. For e.g. <code>std::string</code> as the element type that would imply a destructor call on an non-existing array subobject, which clearly triggers undefined behavior.<br> </br></p>\n<blockquote>\n<p id=\"so_27175952_27176107_2\">If a program ends the lifetime of an object of type <code>T</code> with [\u2026]\n  automatic (3.7.3) storage duration and if <code>T</code> has a non-trivial\n  destructor, <strong>the program must ensure that an object of the original\n  type occupies that same storage location when the implicit destructor\n  call takes place</strong>; otherwise the behavior of the program is undefined.</p>\n</blockquote>\n<p>To avoid that you would have to construct <code>std:string</code>s into that buffer after you're done with it, which really seems nonsensical.</p>\n<blockquote>\n<p id=\"so_27175952_27176107_3\">Is any POD safe as <code>buffer_type</code>?</p>\n</blockquote>\n<p><strong>We do not necessarily need PODs</strong> - they have a lot of requirements that are not a necessity here.\n<strong>The only things that bother us are the constructor and the destructor.</strong><br>\nIt matters whether the types destructor is trivial (or for an array, the arrays element types' destructor). Also it's feasible that the constructor is trivial, too.</br></p>\n<p>POD types feel safer since they suffice both requirements and convey the idea of \"bare storage\" very well.</p>\n<blockquote>\n<p id=\"so_27175952_27176107_4\">Are there restrictions on what <code>my_type</code> could be or not be here?</p>\n</blockquote>\n<p>Yes. It shall be an object type. It can be any object type, but it cannot be a reference.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-27T17:50:44.460", "Score": "3", "CreationDate": "2014-11-27T17:23:58.727", "ParentId": "27175952", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-11-27T17:50:44.460"}, "27176037": {"Id": "27176037", "PostTypeId": "2", "Body": "<p>Any POD type would be safe. Also, while a bit dangerous, I believe most non-POD types whose destructor is empty would work here as well. If the destructor is not empty, it will be called on <code>buffer</code> and try to access its data which is no longer vaild (due to the placement new).</p>\n", "LastActivityDate": "2014-11-27T17:18:55.957", "CommentCount": "0", "CreationDate": "2014-11-27T17:18:55.957", "ParentId": "27175952", "Score": "1", "OwnerUserId": "1964342"}, "27175952": {"ViewCount": "137", "Body": "<p>I've seen some examples of placement new, and am a little confused as to what's happening internally with the various types.</p>\n<p>A simple example:</p>\n<pre><code>using my_type       = std::string;\nusing buffer_type   = char;\n\nbuffer_type  buffer[1000];\nmy_type*     p{ new (buffer) my_type() };\n\np-&gt;~my_type();\n</code></pre>\n<p>From what I understand, this is valid, though I'm concerned about what happens to the char array of <code>buffer[]</code>. It seems like this is ok to do as long as I don't access the variable <code>buffer</code> in any form after creating a new object in place on its memory.</p>\n<p>For the sake of keeping this simple, I'm not concerned about anything to do with proper alignment here, or any other topics of what can go wrong when calling placement new other than: what happens to the original type? Could I use another type such as <code>buffer_type = int</code> to achieve a similar effect (ignoring the possibility of how much memory that will actually take)? Is any POD safe as <code>buffer_type</code>? How about non-POD types? Do I have to tell the compiler that the char array is no longer valid in some way? Are there restrictions on what <code>my_type</code> could be or not be here?</p>\n<p><strong>Does this code do what I expect it to, is it well defined, and are there any minor modifications that would either keep this as well defined or break it into undefined behaviour?</strong></p>\n", "AcceptedAnswerId": "27176107", "Title": "When is placement new well defined, and what happens to an existing type when calling placement new?", "CreationDate": "2014-11-27T17:13:36.777", "Id": "27175952", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-11-27T17:50:44.460", "Score": "3", "OwnerUserId": "3561240", "Tags": "<c++><language-lawyer><placement-new>", "AnswerCount": "2"}});