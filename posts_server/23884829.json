post_cb({"bq_ids": {"n4140": {"so_23884829_23884869_1": {"length": 31, "quality": 0.9393939393939394, "section_id": 5343}}, "n3337": {"so_23884829_23884869_1": {"length": 31, "quality": 0.9393939393939394, "section_id": 5140}}, "n4659": {"so_23884829_23884869_1": {"length": 31, "quality": 0.9393939393939394, "section_id": 6765}}}, "23884829": {"ViewCount": "96", "Body": "<p>I have the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nchar ch[] = \"abcd\";\n\nint main() {\n    std::cout &lt;&lt; (long)(int*)(ch+0) &lt;&lt; ' '\n         &lt;&lt; (long)(int*)(ch+1) &lt;&lt; ' '\n         &lt;&lt; (long)(int*)(ch+2) &lt;&lt; ' '\n         &lt;&lt; (long)(int*)(ch+3) &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; *(int*)(ch+0) &lt;&lt; ' '\n         &lt;&lt; *(int*)(ch+1) &lt;&lt; ' '\n         &lt;&lt; *(int*)(ch+2) &lt;&lt; ' '\n         &lt;&lt; *(int*)(ch+3) &lt;&lt; std::endl;\n    std::cout &lt;&lt; int('abcd') &lt;&lt; ' '\n         &lt;&lt; int('bcd') &lt;&lt; ' '\n         &lt;&lt; int('cd') &lt;&lt; ' '\n         &lt;&lt; int('d') &lt;&lt; std::endl;\n}\n</code></pre>\n<p>My question is why the pointer of 'd' is 100 ? I think it should be:</p>\n<pre><code>int('d') &lt;&lt; 24; //plus some trash on stack after ch\n</code></pre>\n<p>And the question is why the second and the third line of the stdout are different ?</p>\n<blockquote>\n<p id=\"so_23884829_23884829_0\">6295640 6295641 6295642 6295643</p>\n<p id=\"so_23884829_23884829_1\">1684234849 6579042 25699 100</p>\n<p id=\"so_23884829_23884829_2\">1633837924 6447972 25444 100</p>\n</blockquote>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "23885634", "Title": "Pointer reference and dereference", "CreationDate": "2014-05-27T08:44:24.647", "Id": "23884829", "CommentCount": "8", "LastEditDate": "2014-05-27T09:35:56.010", "PostTypeId": "1", "LastEditorUserId": "1141471", "LastActivityDate": "2014-05-27T09:48:06.487", "Score": "2", "OwnerUserId": "1368572", "Tags": "<c++><pointers><memory-management>", "AnswerCount": "3"}, "23884869": {"Id": "23884869", "PostTypeId": "2", "Body": "<p><code>int('d')</code> is character <code>'d'</code> converted to int and its decimal value is 100. You can take a look at <a href=\"http://www.asciitable.com/\" rel=\"nofollow\">ASCII table</a>.</p>\n<p>Besides this you use pointer arithmetic that is not correct, because every read of <code>ch + x</code> when <code>x &gt; 0</code> will read past the end of array.</p>\n<blockquote>\n<p id=\"so_23884829_23884869_0\">so why the last number of the second row is 100 ? it should be 100 &lt;&lt;\n  24 plus some trash</p>\n</blockquote>\n<p>Possibly you read 100,0,0,0 (though any garbage is possible on the 1st, 2nd, 3rd place) and it is read as 100 because of endiannes. The same as why \"3rd entry is : <code>(int)('d'*256 + 'c') = 25699</code> and not <code>'c'*256 + 'd'</code>.</p>\n<p>And if someone was interested why <em>(int</em>)(ch+2) = (int)('d'*256 + 'c') = 25699</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 2.14.3/1</p>\n<blockquote>\n<p id=\"so_23884829_23884869_1\">(...)An ordinary character literal that contains a single c-char has\n  type char, with value equal to the numerical value of the encoding of\n  the c-char in the execution character set. An ordinary character\n  literal that contains more than one c-char is a multicharacter\n  literal. <strong>A multicharacter literal has type int and\n  implementation-defined value.</strong>(...)</p>\n</blockquote>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2014-05-27T09:48:06.487", "Score": "2", "CreationDate": "2014-05-27T08:47:21.947", "ParentId": "23884829", "CommentCount": "2", "OwnerUserId": "1141471", "LastEditDate": "2014-05-27T09:48:06.487"}, "23885520": {"Id": "23885520", "PostTypeId": "2", "Body": "<p>The code is not warning-free</p>\n<pre><code>warning: multi-character character constant [-Wmultichar]\n</code></pre>\n<p>output is:</p>\n<pre><code>6296232 6296233 6296234 6296235\n1684234849 6579042 25699 100\n1633837924 6447972 25444 100\n</code></pre>\n<p>Explanation:\nfor 1st line, presuming pointer <code>ch</code> has value <code>6296232</code>, it has pointer values for <code>ch</code>, <code>ch+1</code>, <code>ch+2</code>, <code>ch+3</code> printed</p>\n<p>for 2nd line, presuming one <code>int</code> is 4 bytes on 32 bit machine,</p>\n<pre><code>1st entry is : (int)('d'*256*256*256 + 'c'*256*256 + 'b'*256 + 'a') = 1684234849 \n2nd entry is : (int)('d'*256*256 + 'c'*256 + 'b') = 6579042 \n3rd entry is : (int)('d'*256 + 'c') = 25699 \n4th entry is : (int)('d') = 100 (ASCII value of 'd)\n</code></pre>\n<p>for 3rd line, presuming one <code>int</code> is 4 bytes on 32 bit machine,</p>\n<pre><code>1st entry is : (int)('d' + 'c'*256 + 'b'*256*256 + 'a'*256*256*256) = 1633837924\n2nd entry is : (int)('d' + 'c'*256 + 'b'*256*256) = 6447972 \n3rd entry is : (int)('d' + 'c'*256) = 25444\n4th entry is : (int)('d') = 100 (ASCII value of 'd)\n</code></pre>\n", "LastEditorUserId": "1390091", "LastActivityDate": "2014-05-27T09:29:38.170", "Score": "0", "CreationDate": "2014-05-27T09:17:49.063", "ParentId": "23884829", "CommentCount": "3", "OwnerUserId": "2032021", "LastEditDate": "2014-05-27T09:29:38.170"}, "23885634": {"Id": "23885634", "PostTypeId": "2", "Body": "<p>Well, you are invoking <em>undefined behavior</em>, what do you expect is a sane answer ? ;)</p>\n<hr>\n<p>The second row is invoking undefined behavior:</p>\n<pre><code>std::cout &lt;&lt; *(int*)(ch+0)\n</code></pre>\n<p>is alright, because there are indeed <code>sizeof(int)</code> bytes worth of data at <code>ch+0</code>, however:</p>\n<pre><code>*(int*)(ch+2)\n</code></pre>\n<p>and</p>\n<pre><code>*(int*)(ch+3)\n</code></pre>\n<p>involve reading past the end of the array whenever <code>sizeof(int)</code> 4 bytes or more (and most compilers/platforms use 4 bytes).</p>\n<p>So, why do you expect <em>garbage</em> after the array ? Why is it not acceptable to have bytes with a value of <code>0</code> ?</p>\n<p>It's <em>undefined behavior</em>, thus anything is, by definition, acceptable. Including 0.</p>\n<p>And thus you are reading (100, 0, 0, 0) as an integer, which is displayed as 100.</p>\n<hr>\n<p>Why 100 and not 100 &lt;&lt; 24 you ask ?</p>\n<p>Well, this is a matter of <a href=\"http://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow\"><em>Endianness</em></a>. If your platform is little-endian, then (100, 0, 0, 0) is interpreted as 100 and if it is big-endian then (100, 0, 0, 0) is interpreted as 100 &lt;&lt; 24.</p>\n<p>You seem to be on a little-endian platform: all x86 and x86_64 CPUs such as Intel/AMD are little-endian.</p>\n<hr>\n<p><em>Note: in <code>std::cout &lt;&lt; (long)(int*)(ch+0)</code> the cast to <code>long</code> is unnecessary, <code>ostream</code> can display <code>void const*</code> and there is an implicit conversion from <code>T*</code> to <code>void*</code> so you would get the address without <code>long</code>.</em></p>\n</hr></hr></hr>", "LastActivityDate": "2014-05-27T09:22:11.280", "CommentCount": "6", "CreationDate": "2014-05-27T09:22:11.280", "ParentId": "23884829", "Score": "0", "OwnerUserId": "147192"}});