post_cb({"14691916": {"ParentId": "14691545", "LastEditDate": "2013-02-04T17:38:23.230", "CommentCount": "3", "CreationDate": "2013-02-04T17:19:34.030", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "PostTypeId": "2", "Id": "14691916", "Score": "1", "Body": "<p>\u00a7 14.1/4 of the C++03 Standard <strong>allows</strong> having pointers to member as a template parameter:</p>\n<blockquote>\n<p id=\"so_14691545_14691916_0\">A <strong>non-type</strong> template-parameter shall have one of the following (optionally cv-qualified) types:</p>\n<ul>\n<li>integral or enumeration type,</li>\n<li>pointer to object or pointer to function,</li>\n<li>reference to object or reference to function,</li>\n<li><strong>pointer to member</strong>.</li>\n</ul>\n</blockquote>\n<p>Correspondingly, per \u00a7 14.3.2/1:</p>\n<blockquote>\n<p id=\"so_14691545_14691916_1\">A template-argument for a <strong>non-type</strong>, non-template template-parameter shall be <strong>one of</strong>:</p>\n<ul>\n<li>an integral constant-expression of integral or enumeration type; or</li>\n<li>the name of a non-type template-parameter; or</li>\n<li>the address of an object or function with external linkage, including function templates and function template-ids but excluding non-static class members, expressed as &amp; id-expression where the &amp; is optional if the name refers to a function or array, or if the corresponding template-parameter is a reference; or</li>\n<li><strong>a pointer to member expressed as described in 5.3.1</strong>.</li>\n</ul>\n</blockquote>\n<p>Thus, non-type template parameters <em>can</em> be pointers to member. There are some limitations which apply to template specialization, but they don't seem to apply in this case.</p>\n", "LastActivityDate": "2013-02-04T17:38:23.230"}, "14691545": {"CommentCount": "0", "ViewCount": "285", "PostTypeId": "1", "LastEditorUserId": "252576", "CreationDate": "2013-02-04T16:57:48.110", "LastActivityDate": "2013-02-04T17:38:23.230", "Title": "explicit template instantiation gives compile error on XLC, but works on other compilers", "AcceptedAnswerId": "14691916", "LastEditDate": "2013-02-04T17:18:21.127", "Id": "14691545", "Score": "0", "Body": "<p>The following code is a simplified minimal version of a feature I am trying to implement for a client requirement. </p>\n<p>It fails to compile on IBM's XLC compiler (version 9 and 11, both) with the error <code>A non-type template parameter cannot have type \"int X::*\".</code>. However, I have tried the same code with g++ 4.7.2, clang++ 3.2 and Intel-13.0, and they compile it successfully.</p>\n<p>I am curious to know if XLC is the only sane voice here, or are the other compilers correct? </p>\n<pre><code>struct X {\n    X() : y(123) {}\n    int y;\n};\n\nstruct XFoo {\n   typedef int X::* Type;\n};\n\ntemplate &lt;typename Name, typename Name::Type value&gt;\nstruct Bar {\n    typename Name::Type getValue(Name) {\n        return value;\n    }\n};\n\ntemplate class Bar&lt;XFoo, &amp;X::y&gt;;    // xlc error here, works fine on others\n\nint main() {}\n</code></pre>\n<p>I read through the C++ 2003 standard chapter on templates several times, and could not conclusively find something which prohibits using <code>&lt;type&gt; &lt;class&gt;::*</code> as a non-template type. I have already searched through SO and search engines for an explanation, but have not come across any authoritative source which helps me decide. </p>\n<p>I understand that this may not be a good coding practice, but this is required for the client code since their requirement is somewhat unique. I have also tried out various other alternatives but it does not work for them. </p>\n", "Tags": "<c++><implementation><c++03><xlc>", "OwnerUserId": "252576", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_14691545_14691916_1": {"section_id": 87, "quality": 1.0, "length": 5}, "so_14691545_14691916_0": {"section_id": 57, "quality": 1.0, "length": 8}}, "n3337": {"so_14691545_14691916_1": {"section_id": 82, "quality": 1.0, "length": 5}, "so_14691545_14691916_0": {"section_id": 52, "quality": 1.0, "length": 8}}, "n4659": {"so_14691545_14691916_0": {"section_id": 59, "quality": 1.0, "length": 8}}}, "14691913": {"ParentId": "14691545", "CommentCount": "0", "Body": "<p>Pointer-to-member template parameters are explicitly allowed, XLC should be served a bug report.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "14691913", "Score": "1", "CreationDate": "2013-02-04T17:19:16.767", "LastActivityDate": "2013-02-04T17:19:16.767"}});