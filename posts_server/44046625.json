post_cb({"44046625": {"CommentCount": "0", "ViewCount": "65", "CreationDate": "2017-05-18T11:34:37.113", "LastActivityDate": "2017-05-18T11:49:55.633", "Title": "Reference to a pointer", "PostTypeId": "1", "Id": "44046625", "Score": "1", "Body": "<p>I am just a little confused between two statements.</p>\n<p>1.</p>\n<pre><code>    int a = 42;\n    int *p = &amp;a; //declares pointer p to a\n    int &amp;r = *p; //this is not the way to declare a reference to a pointer, but what does this statement do\n</code></pre>\n<p>To print value of, it can be done by </p>\n<pre><code>    cout &lt;&lt; a &lt;&lt; *p &lt;&lt; r;\n</code></pre>\n<p>All the above will print the value of a, but how, that is what i want to know.</p>\n<ol start=\"2\">\n<li><p>Now this is how a reference to a pointer is defined</p>\n<pre><code>int i = 42;\nint *p;\nint *&amp;r = p; //declares reference r to pointer p\nr = &amp;i; //stores the address of i in pointer p\n</code></pre></li>\n</ol>\n<p>I just want to understand why the first one doesn't define a reference to a pointer.</p>\n", "Tags": "<c++><pointers><reference>", "OwnerUserId": "7868053", "AnswerCount": "3"}, "44046683": {"ParentId": "44046625", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-05-18T11:37:03.617", "Score": "4", "LastEditorUserId": "982161", "LastEditDate": "2017-05-18T11:42:29.163", "Id": "44046683", "OwnerUserId": "982161", "Body": "<p>lets break it down (from Right to Left):</p>\n<pre><code>int &amp;r = *p; \n</code></pre>\n<p>this</p>\n<pre><code>*p  \n</code></pre>\n<p>de -references the pointer</p>\n<p>and this</p>\n<pre><code>int&amp; r\n</code></pre>\n<p>is the reference declaration</p>\n<p>at the end</p>\n<pre><code>int&amp; r = *p;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>int&amp; r = a;\n</code></pre>\n<hr>\n<p>Example:</p>\n<pre><code>int main()\n{\n    int a = 42;\n    int *p = &amp;a; //declares pointer p to a\n    int &amp;r = *p;\n\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; \"r: \" &lt;&lt; r &lt;&lt; endl;\n\n    cout &lt;&lt; \"changing a:\" &lt;&lt; endl;\n    a = 17;\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; \"r: \" &lt;&lt; r &lt;&lt; endl;\n    cout &lt;&lt; \"changing r:\" &lt;&lt; endl;\n\n    r = 0;\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; \"r: \" &lt;&lt; r &lt;&lt; endl;\n\n    cin.get();\n    return 0;\n}\n</code></pre>\n</hr>", "LastActivityDate": "2017-05-18T11:42:29.163"}, "44046780": {"ParentId": "44046625", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-05-18T11:41:40.113", "Score": "5", "LastEditorUserId": "2877241", "LastEditDate": "2017-05-18T11:49:55.633", "Id": "44046780", "OwnerUserId": "2877241", "Body": "<p>In this code snippet</p>\n<pre><code>int a = 42;\nint *p = &amp;a; //declares pointer p to a\nint &amp;r = *p; //this is not the way to declare a reference to a pointer, but what does this \n</code></pre>\n<p>the expression <code>*p</code> yields lvalue of the object <code>a</code> because the pointer <code>p</code> points to the object. So this declaration</p>\n<pre><code>int &amp;r = *p;\n</code></pre>\n<p>declares a reference to the same object <code>a</code> using an indirect access to the object through the pointer <code>p</code>.</p>\n<p>From the C++ Standard (5.3.1 Unary operators)</p>\n<blockquote>\n<p id=\"so_44046625_44046780_0\">1 The unary * operator performs indirection: the expression to which\n  it is applied shall be a pointer to an object type, or a pointer to a\n  function type and the result is an lvalue referring to the object or\n  function to which the expression points. If the type of the expression\n  is \u201cpointer to T\u201d, the type of the result is \u201cT\u201d. [ Note: Indirection\n  through a pointer to an incomplete type (other than cv void) is valid.\n  <strong>The lvalue thus obtained can be used in limited ways (to initialize a reference, for example)</strong>; this lvalue must not be converted to a\n  prvalue, see 4.1. \u2014end note ]</p>\n</blockquote>\n<p>The difference between the two code snippets presented in the question is that in the first code snippet there is declared a reference to an object of type <code>int</code> (int a = 42; ) using indirection by means of a pointer. While in the second code snippet there is declared a reference to a pointer (int *p;).</p>\n", "LastActivityDate": "2017-05-18T11:49:55.633"}, "bq_ids": {"n4140": {"so_44046625_44046780_0": {"section_id": 6064, "quality": 0.8653846153846154, "length": 45}}, "n3337": {"so_44046625_44046780_0": {"section_id": 5832, "quality": 0.8269230769230769, "length": 43}}, "n4659": {"so_44046625_44046780_0": {"section_id": 7560, "quality": 0.8846153846153846, "length": 46}}}, "44046724": {"ParentId": "44046625", "CommentCount": "0", "Body": "<p>That is because in the first case you've just declared a regular reference to int and you assigned <strong>*p</strong> to it, which is an int. <strong>*p</strong> is not a pointer, but the value that the pointer p points to - in this case it's just the value of <strong>a</strong>.</p>\n", "OwnerUserId": "3564091", "PostTypeId": "2", "Id": "44046724", "Score": "0", "CreationDate": "2017-05-18T11:39:15.527", "LastActivityDate": "2017-05-18T11:39:15.527"}});