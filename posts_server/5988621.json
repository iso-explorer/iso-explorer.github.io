post_cb({"5988754": {"ParentId": "5988621", "CommentCount": "2", "Body": "<p>Sure:</p>\n<pre><code>int n = 0;\n\nvoid f() {\n   int n = 42;\n}\n</code></pre>\n<p>The n in the function hides the one declared at global scope.</p>\n", "OwnerUserId": "2100815", "PostTypeId": "2", "Id": "5988754", "Score": "3", "CreationDate": "2011-05-13T07:39:34.893", "LastActivityDate": "2011-05-13T07:39:34.893"}, "5988746": {"ParentId": "5988621", "CommentCount": "2", "Body": "<p>I think it is quite obvious: any time that an entity in the scope of the template declaration has the same name as one of the template parameters, the name will be hidden within the template. If you are having problems coming up with examples chances are that you did not understand the meaning of the quote. What is it that you understood? What is it that you have troubles understanding?</p>\n<p>Also for those that don't want to go into the standard, it is important to complete the original quote:</p>\n<pre><code>   typedef int N;\n   template&lt;N X, typename N, template&lt;N Y&gt; class T&gt; struct A;\n</code></pre>\n<blockquote>\n<p id=\"so_5988621_5988746_0\">Here, X is a non-type template parameter of type int and Y is a non-type template parameter of the same type as the second template parameter of A. -- end example ] -- end note ]</p>\n</blockquote>\n<p>Which helps understanding the example. Note what the quote means: the first <code>N</code> refers to the <code>typedef</code> at the namespace scope, then a template argument <code>N</code> is introduced. From there on, the template argument <em>hides</em> the outer <code>N</code>, and the next appearance of <code>N</code> refers to the template argument and not to the outer <code>N</code> (only within the declarative scope of the template)</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "5988746", "Score": "3", "CreationDate": "2011-05-13T07:38:40.623", "LastActivityDate": "2011-05-13T07:38:40.623"}, "bq_ids": {"n4140": {"so_5988621_5988746_0": {"section_id": 7076, "quality": 0.7777777777777778, "length": 14}, "so_5988621_5988621_0": {"section_id": 7076, "quality": 0.85, "length": 17}}, "n3337": {"so_5988621_5988746_0": {"section_id": 6820, "quality": 0.7777777777777778, "length": 14}, "so_5988621_5988621_0": {"section_id": 6820, "quality": 0.85, "length": 17}}, "n4659": {"so_5988621_5988746_0": {"section_id": 8577, "quality": 0.7777777777777778, "length": 14}, "so_5988621_5988621_0": {"section_id": 8577, "quality": 0.85, "length": 17}}}, "5988621": {"CommentCount": "2", "ViewCount": "948", "PostTypeId": "1", "LastEditorUserId": "2100815", "CreationDate": "2011-05-13T07:25:37.190", "LastActivityDate": "2011-05-13T07:39:34.893", "Title": "template parameter hiding", "AcceptedAnswerId": "5988746", "LastEditDate": "2011-05-13T07:37:41.650", "Id": "5988621", "Score": "2", "Body": "<p>A point from ISO draft n3290 section 3.3.9 paragraph 4:</p>\n<blockquote>\n<p id=\"so_5988621_5988621_0\">The declarative region of the name of a template parameter is nested within the \n  immediately-enclosing declarative\n  region.[Note: As a result, a\n  template-parameter hides any entity\n  with the same name in an enclosing\n  scope (3.3.10).</p>\n</blockquote>\n<pre><code>Example:\ntypedef int N;\ntemplate&lt;N X, typename N, template&lt;N Y&gt; class T&gt; struct A;\n</code></pre>\n<p>Can any one please ....tell some other example other than this ..where &amp; where this situation erises</p>\n<p>draft link n3290: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3290.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3290.pdf</a></p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "751747", "AnswerCount": "2"}});