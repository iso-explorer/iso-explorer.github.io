post_cb({"bq_ids": {"n4140": {"so_19941203_19941429_2": {"length": 4, "quality": 1.0, "section_id": 48}, "so_19941203_19941429_0": {"length": 8, "quality": 1.0, "section_id": 48}}, "n3337": {"so_19941203_19941429_2": {"length": 4, "quality": 1.0, "section_id": 43}, "so_19941203_19941429_0": {"length": 8, "quality": 1.0, "section_id": 43}}, "n4659": {"so_19941203_19941429_2": {"length": 4, "quality": 1.0, "section_id": 49}, "so_19941203_19941429_0": {"length": 7, "quality": 0.875, "section_id": 49}}}, "19941203": {"ViewCount": "714", "Body": "<p>I'm not sure if the topic quite matches what I am looking for, but here it is basically:</p>\n<p>I can do this:</p>\n<pre><code>struct something {\n    int d;\n} somethingType;\n</code></pre>\n<p>But why can't I do this?</p>\n<pre><code>template &lt;bool T&gt;\nstruct somethingelse {\n    int d;\n}&lt;true&gt; somethingelseType;\n</code></pre>\n<p>If it is possible to do the second one, what will be the correct way of doing it?</p>\n", "AcceptedAnswerId": "19941429", "Title": "Initialize a template struct at definition", "CreationDate": "2013-11-12T22:24:55.850", "Id": "19941203", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-10-07T18:44:39.667", "LastEditorUserId": "2089675", "LastActivityDate": "2014-10-07T18:44:39.667", "Score": "4", "OwnerUserId": "2089675", "Tags": "<c++><templates><struct><template-specialization>", "AnswerCount": "3"}, "19941422": {"Id": "19941422", "PostTypeId": "2", "Body": "<p>A <code>type-specifier</code> can be</p>\n<ul>\n<li><code>trailing-type-specifier</code></li>\n<li><code>class-specifier</code></li>\n<li><code>enum-specifier</code></li>\n</ul>\n<p>As you can see, <code>template-declaration</code> is not included, hence what you are looking for doesn't exist (directly)</p>\n<p>See online version of C++11 grammar rules hyperlinked: <a href=\"http://www.nongnu.org/hcb/#type-specifier\" rel=\"nofollow\">http://www.nongnu.org/hcb/#type-specifier</a></p>\n", "LastActivityDate": "2013-11-12T22:38:46.930", "CommentCount": "0", "CreationDate": "2013-11-12T22:38:46.930", "ParentId": "19941203", "Score": "1", "OwnerUserId": "85371"}, "19941296": {"Id": "19941296", "PostTypeId": "2", "Body": "<p>I don't think you can.</p>\n<p>You can follow a struct by object names (according to <a href=\"http://www.cplusplus.com/doc/tutorial/structures/\" rel=\"nofollow\">http://www.cplusplus.com/doc/tutorial/structures/</a>), not by template parameters. </p>\n", "LastActivityDate": "2013-11-12T22:32:02.863", "CommentCount": "1", "CreationDate": "2013-11-12T22:32:02.863", "ParentId": "19941203", "Score": "2", "OwnerUserId": "241013"}, "19941429": {"Id": "19941429", "PostTypeId": "2", "Body": "<p>I think you could, grammatically, but it's forbidden by additional restrictions:</p>\n<p>[temp]/1</p>\n<blockquote>\n<p id=\"so_19941203_19941429_0\">A <em>template</em> defines a family of classes or functions or an alias for a family of types.</p>\n<p id=\"so_19941203_19941429_1\">\u00a0\u00a0 <em>template-declaration:</em><br/>\n  \u00a0\u00a0\u00a0\u00a0 <code>template &lt;</code> <em>template-parameter-list</em> <code>&gt;</code> <em>declaration</em></p>\n<p id=\"so_19941203_19941429_2\">\u00a0\u00a0 <em>template-parameter-list:</em><br/>\n  \u00a0\u00a0\u00a0\u00a0 <em>template-parameter</em><br/>\n  \u00a0\u00a0\u00a0\u00a0 <em>template-parameter-list</em> <code>,</code> <em>template-parameter</em></p>\n<p id=\"so_19941203_19941429_3\">[...]</p>\n<p id=\"so_19941203_19941429_4\">The <em>declaration</em> in a <em>template-declaration</em> shall</p>\n<ul>\n<li>declare or define a function or a class, or</li>\n<li>define a member function, a member class, a member enumeration, or a static data member of a class template or of a class nested within a class template, or</li>\n<li>define a member template of a class or class template, or</li>\n<li>be an <em>alias-declaration</em>.</li>\n</ul>\n</blockquote>\n<p>A declaration (the top-level grammatical construct) can be a <em>template-declaration</em>, so these rules <em>directly</em> apply to the declaration.</p>\n<p>On the other hand (i.e. for non-template classes), a <em>declaration</em> can also be a <em>block-declaration</em> [dcl.dcl]/1, which can be a <em>simple-declaration</em>, which can contain a <em>decl-specifier-seq</em> which can contain a <em>type-specifier</em> [dcl.type]/1 which can be a <em>class-specifier</em> which can declare a class o.O and using this <em>type-specifier</em> you could declare a variable:</p>\n<p>(resolving one construct per line into its (possible) components)</p>\n<pre>\n<i>declaration</i>\n<i>block-declaration</i>\n<i>simple-declaration</i>\n<i>decl-specifier-seq<sub>opt</sub>                    init-declarator-list<sub>opt</sub></i> ;\n<i>type-secifier                           init-declarator-list<sub>opt</sub></i> ;\n<i>class-specifier                         init-declarator-list<sub>opt</sub></i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>init-declarator-list<sub>opt</sub></i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>init-declarator</i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>declarator initializer<sub>opt</sub></i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>ptr-declarator</i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>noptr-declarator</i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   <i>declarator-id attribute-specifier-seq<sub>opt</sub></i> ;\n<i>class-head</i> { <i>member-specification<sub>opt</sub></i> }   ...<i><sub>opt</sub> id-expression</i> ;\n</pre>\n<p>Which now matches, say, <code>struct something { int d; } somethingType;</code></p>\n<p>But that would be a declaration of a variable, which is not allowed for the template case.</p>\n", "LastEditorUserId": "420683", "LastActivityDate": "2013-11-12T23:08:08.797", "Score": "3", "CreationDate": "2013-11-12T22:39:23.227", "ParentId": "19941203", "CommentCount": "0", "OwnerUserId": "420683", "LastEditDate": "2013-11-12T23:08:08.797"}});