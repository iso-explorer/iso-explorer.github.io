post_cb({"23841022": {"ViewCount": "233", "Body": "<p>I have a question related to a previous question posted here <a href=\"https://stackoverflow.com/q/23840647/3093378\">Static field initialization order</a>\nSuppose I have the following struct, with 2 static members <code>x</code> and <code>y</code> (templated types themselves)</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct Foo\n{\n    static T x;\n    static T y;\n    Foo()\n    { \n         cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; endl;\n         cout &lt;&lt; \"y = \" &lt;&lt; y &lt;&lt; endl;\n    }\n};\n\ntemplate &lt;typename T&gt;\nT Foo&lt;T&gt;::x = 1.1f;\n\ntemplate &lt;typename T&gt;\nT Foo&lt;T&gt;::y = 2.0 * Foo&lt;T&gt;::x;\n\n\nint main()\n{\n    Foo&lt;double&gt; foo;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>x = 1.1 \ny = 2.2\n</code></pre>\n<p>I initialize <code>x</code> and <code>y</code> above <code>main()</code>, and you can see that <code>y</code> depends on <code>x</code>, so it better be that <code>x</code> is initialized first. </p>\n<p>My questions:</p>\n<ol>\n<li>At the point of initialization, the types of <code>x</code> and <code>y</code> are still unknown, so when are they really initialized? Are the static members actually initialized after the template instantiation <code>Foo&lt;double&gt; foo;</code> in <code>main()</code>?</li>\n<li>And if yes, the order of declarations of <code>x</code> and <code>y</code> seems not to matter, i.e. I can first declare <code>y</code> then <code>x</code> (both in the struct and in the static initialization) and still get the correct output, i.e. the compiler knows somehow that <code>y</code> is dependent on <code>x</code>. Is this a well defined behaviour (i.e. standard-compliant)? I use g++ 4.8 and clang++ on OS X.</li>\n</ol>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "23841234", "Title": "Template static members initialization order", "CreationDate": "2014-05-24T03:26:08.450", "Id": "23841022", "CommentCount": "2", "LastEditDate": "2017-05-23T11:57:13.187", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-24T04:07:21.957", "Score": "2", "OwnerUserId": "3093378", "Tags": "<c++><templates><static><static-members>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23841022_23841234_2": {"length": 15, "quality": 1.0, "section_id": 7151}, "so_23841022_23841234_3": {"length": 18, "quality": 0.9, "section_id": 7151}}, "n3337": {"so_23841022_23841234_2": {"length": 15, "quality": 1.0, "section_id": 6895}, "so_23841022_23841234_3": {"length": 18, "quality": 0.9, "section_id": 6895}}, "n4659": {"so_23841022_23841234_2": {"length": 8, "quality": 0.5333333333333333, "section_id": 8652}, "so_23841022_23841234_3": {"length": 14, "quality": 0.7, "section_id": 8652}}}, "23841234": {"Id": "23841234", "PostTypeId": "2", "Body": "<p>This code is safe because <code>Foo&lt;double&gt;::x</code> has constant initialization, but <code>Foo&lt;double&gt;::y</code> has dynamic initialization.</p>\n<p>3.6.2/2:</p>\n<blockquote>\n<p id=\"so_23841022_23841234_0\"><em>Constant initialization</em> is performed:</p>\n<ul>\n<li><p id=\"so_23841022_23841234_1\">...</p></li>\n<li><p id=\"so_23841022_23841234_2\">if an object with static or thread storage duration is not initialized by a constructor call and if every full-expression that appears in its initializer is a constant expression.</p></li>\n</ul>\n<p id=\"so_23841022_23841234_3\">Together, zero-initialization and constant initialization are called <em>static initialization</em>; all other initialization is <em>dynamic initialization</em>.  Static initialization shall be performed before any dynamic initialization takes place.</p>\n</blockquote>\n<p>On the other hand, if you had:</p>\n<pre><code>double tmp = 1.1;\n\ntemplate &lt;typename T&gt;\nT Foo&lt;T&gt;::x = tmp;\n\ntemplate &lt;typename T&gt;\nT Foo&lt;T&gt;::y = 2.0 * Foo&lt;T&gt;::x;\n</code></pre>\n<p>that code would not be \"safe\" - <code>Foo&lt;double&gt;::y</code> could end up being either <code>2.2</code> or <code>0.0</code> (assuming nothing else modifies <code>tmp</code> during dynamic initializations).</p>\n", "LastActivityDate": "2014-05-24T04:07:21.957", "CommentCount": "3", "CreationDate": "2014-05-24T04:07:21.957", "ParentId": "23841022", "Score": "3", "OwnerUserId": "459640"}});