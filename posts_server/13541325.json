post_cb({"13543222": {"ParentId": "13541325", "CommentCount": "3", "CreationDate": "2012-11-24T16:44:32.257", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "13543222", "Score": "1", "Body": "<p>I do not think it is forbidden, but I think it is impractical.</p>\n<blockquote>\n<p id=\"so_13541325_13543222_0\"><strong>\u00a79 Classes [class]</strong></p>\n<p id=\"so_13541325_13543222_1\"><strong>7/</strong> A standard-layout class is a class that:</p>\n<ul>\n<li>has no non-static data members of type non-standard-layout class (or array of such types) or reference,</li>\n<li>has no virtual functions (10.3) and no virtual base classes (10.1),</li>\n<li>has the same access control (Clause 11) for all non-static data members,</li>\n<li>has no non-standard-layout base classes,</li>\n<li>either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no base classes with non-static data members, and</li>\n<li>has no base classes of the same type as the first non-static data member.107</li>\n</ul>\n<p id=\"so_13541325_13543222_2\"><strong>8/</strong> A <strong>standard-layout struct</strong> is a standard-layout class defined with the class-key <code>struct</code> or the class-key <code>class</code>.</p>\n</blockquote>\n<p>... thus <code>class X { int x; };</code> is a standard-layout struct.</p>\n<blockquote>\n<p id=\"so_13541325_13543222_3\"><strong>\u00a79.2 Class members [class.mem]</strong></p>\n<p id=\"so_13541325_13543222_4\"><strong>16/</strong> Two standard-layout struct (Clause 9) types are layout-compatible if they have the same number of non-static data members and corresponding non-static data members (in declaration order) have layout-compatible types (3.9).</p>\n</blockquote>\n<p>... thus <code>class X { int x; };</code> is layout-compatible with <code>struct Y { int y; };</code>.</p>\n<p>The unfortunate thing is that layout-compatible is not formally defined in the Standard. However given the use of the word layout it seems the intent is to declare that two layout-compatible types should have the same underlying representation.</p>\n<p>Therefore, to be able to remove the <code>x</code> in <code>X</code> one would have to prove that all structures that are <em>layout-compatible</em> (such as <code>Y</code>) are amenable to the same optimization (to keep the layout compatibility). It seems quite... improbable... in any non-trivial program.</p>\n", "LastActivityDate": "2012-11-24T16:44:32.257"}, "13541325": {"CommentCount": "18", "ViewCount": "143", "PostTypeId": "1", "LastEditorUserId": "518287", "CreationDate": "2012-11-24T12:44:24.440", "LastActivityDate": "2012-11-24T16:44:32.257", "Title": "C++ optimise away private variable", "LastEditDate": "2012-11-24T13:49:03.187", "Id": "13541325", "Score": "2", "Body": "<p>Does ISO C++ (11) permit a private non-static class member variable to be optimised away?\nThis could be detected:</p>\n<pre><code>class X { int x; };\nassert (sizeof(X) &gt;= sizeof(int));\n</code></pre>\n<p>but I am not aware of a clause that demands the assertion above. </p>\n<p>To clarify: (a) Is there a clause in the C++ Standard that ensure the assertion above.</p>\n<p>(b) Can anyone think of any other way to detect the elision of x?\n[offsetof?]</p>\n<p>(c) Is the optimisation permitted anyhow, despite (a) and (b)?</p>\n<p>I have a feeling the optimisation could be possible if the class is local to a function but not otherwise (but I'd like to have a definitive citation).</p>\n", "Tags": "<c++>", "OwnerUserId": "518287", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13541325_13543222_4": {"section_id": 5876, "quality": 0.9545454545454546, "length": 21}, "so_13541325_13543222_2": {"section_id": 5852, "quality": 1.0, "length": 9}}, "n3337": {"so_13541325_13543222_4": {"section_id": 5647, "quality": 1.0, "length": 22}, "so_13541325_13543222_2": {"section_id": 5622, "quality": 1.0, "length": 9}}, "n4659": {"so_13541325_13543222_4": {"section_id": 7361, "quality": 0.8181818181818182, "length": 18}, "so_13541325_13543222_2": {"section_id": 7331, "quality": 0.8888888888888888, "length": 8}}}});