post_cb({"bq_ids": {"n4140": {"so_6071253_6071291_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 3218}}, "n3337": {"so_6071253_6071291_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 3092}}, "n4659": {"so_6071253_6071291_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 3975}}}, "6071313": {"Id": "6071313", "PostTypeId": "2", "Body": "<p>Mixing <code>const</code> with a typedef doesn't work the way you're thinking; see <a href=\"https://stackoverflow.com/questions/2148769/typedef-and-containers-of-const-pointers\">this question</a> for more info. These two lines are equivalent:</p>\n<pre><code>const Ref_to_int ref;\nint&amp; const ref;\n</code></pre>\n<p>You're looking for:</p>\n<pre><code>const int&amp; ref;\n</code></pre>\n<p>One way to fix it is to include it in the typedef itself (although you should probably rename it then):</p>\n<pre><code>typedef const int&amp; Ref_to_int;\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-05-20T11:33:44.047", "Score": "1", "CreationDate": "2011-05-20T11:33:44.047", "ParentId": "6071253", "CommentCount": "2", "OwnerUserId": "309308", "LastEditDate": "2017-05-23T12:19:58.950"}, "6071291": {"Id": "6071291", "PostTypeId": "2", "Body": "<p>Here the type of <code>ref</code> is actually <code>reference to int</code> and not <code>const reference to int</code>. The const qualifier is ignored.</p>\n<p>$8.3.2 says</p>\n<blockquote>\n<p id=\"so_6071253_6071291_0\">Cv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a typedef (7.1.3) or of a template type argument (14.3), in which case the cv-qualifiers are ignored. </p>\n</blockquote>\n<p><code>const Ref_to_int ref;</code> is equivalent to <code>int&amp; const ref;</code> and not <code>const int&amp; ref</code>.</p>\n", "LastActivityDate": "2011-05-20T11:32:08.570", "CommentCount": "1", "CreationDate": "2011-05-20T11:32:08.570", "ParentId": "6071253", "Score": "4", "OwnerUserId": "165520"}, "6071297": {"Id": "6071297", "PostTypeId": "2", "Body": "<p>You can't add additional specifiers to a <code>typedef</code>. It doesn't work like a macro.</p>\n<p>Your code is effectively</p>\n<pre><code>int&amp; const ref = 10;  // error\n</code></pre>\n<p>which isn't valid.</p>\n", "LastActivityDate": "2011-05-20T11:32:49.867", "CommentCount": "0", "CreationDate": "2011-05-20T11:32:49.867", "ParentId": "6071253", "Score": "0", "OwnerUserId": "597607"}, "6071253": {"ViewCount": "158", "Body": "<blockquote>\n<p id=\"so_6071253_6071253_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2148769/typedef-and-containers-of-const-pointers\">typedef and containers of const pointers</a> </br></p>\n</blockquote>\n<p>Why is the code emitting an error?</p>\n<pre><code>int main()\n{\n  //test code\n  typedef int&amp; Ref_to_int;\n  const Ref_to_int ref = 10; \n}\n</code></pre>\n<p>The error is:</p>\n<blockquote>\n<p id=\"so_6071253_6071253_1\">error: invalid initialization of non-const reference of type \u2018int&amp;\u2019 from a temporary of type \u2018int\u2019</p>\n</blockquote>\n<p>I read the post on <a href=\"https://stackoverflow.com/questions/4670137/prolonging-the-lifetime-of-temporaries\">prolonging the lifetime of temporaries</a> which says that temporaries can be bound to references to const. Then why is my code not getting compiled?</p>\n", "AcceptedAnswerId": "6071291", "Title": "error in attaching temporary to a reference to const", "CreationDate": "2011-05-20T11:28:46.577", "LastActivityDate": "2011-05-20T11:35:13.297", "CommentCount": "1", "LastEditDate": "2017-05-23T11:55:36.717", "PostTypeId": "1", "Tags": "<c++><reference><const><temporary>", "Id": "6071253", "AnswerCount": "3", "Score": "4", "OwnerUserId": "762651", "ClosedDate": "2011-05-20T13:20:06.683", "LastEditorUserId": "-1"}});