post_cb({"bq_ids": {"n4140": {"so_30381690_30382242_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 5414}, "so_30381690_30382242_0": {"length": 9, "quality": 0.9, "section_id": 5414}, "so_30381690_30382259_0": {"length": 10, "quality": 1.0, "section_id": 5443}, "so_30381690_30382232_0": {"length": 9, "quality": 1.0, "section_id": 6686}}, "n3337": {"so_30381690_30382242_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 5209}, "so_30381690_30382242_0": {"length": 9, "quality": 0.9, "section_id": 5209}, "so_30381690_30382259_0": {"length": 10, "quality": 1.0, "section_id": 5238}, "so_30381690_30382232_0": {"length": 9, "quality": 1.0, "section_id": 6441}}, "n4659": {"so_30381690_30382242_1": {"length": 12, "quality": 0.6666666666666666, "section_id": 6836}, "so_30381690_30382242_0": {"length": 9, "quality": 0.9, "section_id": 6836}, "so_30381690_30382259_0": {"length": 10, "quality": 1.0, "section_id": 6870}, "so_30381690_30382232_0": {"length": 9, "quality": 1.0, "section_id": 8161}}}, "30382232": {"Id": "30382232", "PostTypeId": "2", "Body": "<p>It's not compliant. The grammar rules for <code>friend</code> in [class.friend]/3 are:</p>\n<blockquote>\n<p id=\"so_30381690_30382232_0\">A friend declaration that does not declare a function shall have one of the following forms:  </p>\n<pre><code>friend elaborated-type-specifier ;\nfriend simple-type-specifier ;\nfriend typename-specifier ;\n</code></pre>\n</blockquote>\n<p><code>class Wrapper&lt;T&gt;::type</code> is none of those specifier types. It's not an <em>elaborated-type-specifier</em> because <code>Wrapper&lt;T&gt;::type</code> isn't an <em>identifier</em> or a <em>class-name</em>, and obviously isn't one of the other two either. What you're looking for is simply:</p>\n<pre><code>friend typename Wrapper&lt;T&gt;::type;\n</code></pre>\n", "LastActivityDate": "2015-05-21T19:02:41.140", "CommentCount": "4", "CreationDate": "2015-05-21T19:02:41.140", "ParentId": "30381690", "Score": "0", "OwnerUserId": "2069064"}, "30382259": {"Id": "30382259", "PostTypeId": "2", "Body": "<p>\u00a77.1.6.3/2:</p>\n<blockquote>\n<p id=\"so_30381690_30382259_0\"><strong>If the identifier resolves to a <em>typedef-name</em></strong> or the\n  <em>simple-template-id</em> resolves to an alias template specialization, <strong>the <em>elaborated-type-specifier</em> is ill-formed</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2015-05-21T19:04:26.773", "CommentCount": "0", "CreationDate": "2015-05-21T19:04:26.773", "ParentId": "30381690", "Score": "1", "OwnerUserId": "3647361"}, "30381690": {"ViewCount": "125", "Body": "<p>I've seen the following pre-C++11 code, used as a trick to declare class template friends (which in C++11 can simply be done with <code>friend T;</code>)</p>\n<pre><code>template &lt;typename T&gt;\nstruct Wrapper\n{\n    typedef T type;\n};\n\ntemplate &lt;typename T&gt; \nclass Foo\n{\n    friend class Wrapper&lt;T&gt;::type; // effectively makes T a friend\n};\n\nstruct Test{};\n\nint main()\n{\n    Foo&lt;Test&gt; foo;\n}\n</code></pre>\n<p>The code compiles fine on g++ (4.9/5.1/6), but fails under clang++ (3.5/3.6/3.7) with the error</p>\n<blockquote>\n<p id=\"so_30381690_30381690_0\">error: elaborated type refers to a typedef</p>\n<p id=\"so_30381690_30381690_1\">friend class Wrapper::type;</p>\n</blockquote>\n<p>Is the code above standard compliant, i.e. valid or not?</p>\n", "AcceptedAnswerId": "30382259", "Title": "Declaring friend class template via wrapper", "CreationDate": "2015-05-21T18:31:45.457", "Id": "30381690", "CommentCount": "2", "LastEditDate": "2015-05-21T19:15:28.750", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-05-21T19:15:28.750", "Score": "2", "OwnerUserId": "3093378", "Tags": "<c++><templates><language-lawyer><friend>", "AnswerCount": "3"}, "30382242": {"Id": "30382242", "PostTypeId": "2", "Body": "<p>[dcl.typedef]/p8:</p>\n<blockquote>\n<p id=\"so_30381690_30382242_0\">[ Note: A <em>typedef-name</em> that names a class type, or a cv-qualified version thereof, is also a <em>class-name</em> (9.1)  </p>\n<p id=\"so_30381690_30382242_1\"><strong>If a <em>typedef-name</em> is used to identify the subject of an <em>elaborated-type-specifier</em></strong> (7.1.6.3), a class definition\n  (Clause 9), a constructor declaration (12.1), or a destructor declaration (12.4), <strong>the program is ill-formed</strong>.\n  \u2014 <em>end note</em> ] [<em>Example</em>:</p>\n<pre><code>struct S {\n    S();\n   ~S();\n};\n\ntypedef struct S T;\nS a = T(); // OK\nstruct T * p; // error\n</code></pre>\n<p id=\"so_30381690_30382242_2\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>The code should fail at template instantiation time, which it does so correctly in Clang.</p>\n<p>Using <code>typename</code> in place of <code>struct</code> allows the code to pass in both compilers.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2015-05-21T19:08:11.200", "Score": "0", "CreationDate": "2015-05-21T19:03:15.153", "ParentId": "30381690", "CommentCount": "1", "OwnerUserId": "701092", "LastEditDate": "2015-05-21T19:08:11.200"}});