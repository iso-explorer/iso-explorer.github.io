post_cb({"bq_ids": {"n4140": {"so_27429310_27429614_1": {"length": 15, "quality": 0.9375, "section_id": 5817}, "so_27429310_27429614_0": {"length": 29, "quality": 0.90625, "section_id": 5834}}, "n3337": {"so_27429310_27429614_1": {"length": 15, "quality": 0.9375, "section_id": 5588}, "so_27429310_27429614_0": {"length": 20, "quality": 0.625, "section_id": 5605}}, "n4659": {"so_27429310_27429614_1": {"length": 14, "quality": 0.875, "section_id": 7278}, "so_27429310_27429614_0": {"length": 29, "quality": 0.90625, "section_id": 7296}}}, "27429310": {"ViewCount": "63", "Body": "<p>If one thread in a program attempts to read from a variable while another writes to it, the value read is of course undefined. However, assuming there is only one writer, is the write guaranteed to succeed? For example:</p>\n<pre><code>bool myGlobalVariable = false;\nvoid thread1() {\n    myGlobalVariable = true;\n}\nvoid thread2() {\n    bool x = myGlobalVariable; //x is undefined\n}\n</code></pre>\n<p>In this case, once both threads are finished, is <code>myGlobalVariable</code> guaranteed to be <code>true</code>? </p>\n<p>I'm specifically wondering about gcc on linux, but I'd be interested to know what other operating systems and compilers do, or if ARM behaves differently than x86.</p>\n", "AcceptedAnswerId": "27429416", "Title": "Success of write with simultaneous read", "CreationDate": "2014-12-11T17:54:01.347", "Id": "27429310", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-12-11T17:59:40.493", "LastEditorUserId": "2460632", "LastActivityDate": "2014-12-11T19:07:30.767", "Score": "1", "OwnerUserId": "2460632", "Tags": "<c++><multithreading>", "AnswerCount": "2"}, "27429416": {"Id": "27429416", "PostTypeId": "2", "Body": "<p>I can't see how this could possibly fail to write the value under any circumstances, if it's just a write and not a read.</p>\n<p>The reason that multithreaded access to the same variable is dangerous is precisely that there's <em>no checking</em> being done as to whether the variable is being modified during an operation. It's not that it might check and then complain.</p>\n<p>So in the case of a single write, and just a write (so no <code>i++</code>, which is a read as well), it must succeed.</p>\n<p>Of course, you could design hardware that would fail if you wanted to, but I don't see how any standard architecture could fail.</p>\n<p>As Anton points out in his answer, the spec says it's undefined behaviour, and so it would be possible to write a valid C++ compiler that deliberately watches out for such behaviour and randomises the result. But no compiler is going to do that in practice.</p>\n<p>That said, it's never a good idea to rely on behaviour that's officially undefined, so as the comment from jeffamaphone says, the right answer to your question is that the write will succeed, but you still shouldn't do it.</p>\n", "LastEditorUserId": "3933089", "LastActivityDate": "2014-12-11T19:07:30.767", "Score": "1", "CreationDate": "2014-12-11T18:00:47.547", "ParentId": "27429310", "CommentCount": "9", "OwnerUserId": "3933089", "LastEditDate": "2014-12-11T19:07:30.767"}, "27429614": {"Id": "27429614", "PostTypeId": "2", "Body": "<p>In practice nothing probably will fail. However, the C++11/14 standard is pretty clear in this regard. Here is a quote from C++14 draft section <code>[intro.multithread]/23</code> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_27429310_27429614_0\">The execution of a program contains a <em>data race</em> if it contains two potentially concurrent conflicting actions, at least one of which is not atomic, and neither happens before the other, except for the special case for signal handlers described below. <strong>Any such data race results in undefined behavior.</strong></p>\n</blockquote>\n<p>Where conflicting actions are defined at <code>[intro.multithread]/6</code>:</p>\n<blockquote>\n<p id=\"so_27429310_27429614_1\">Two expression evaluations <em>conflict</em> if one of them modifies a memory location (1.7) and the other one accesses or modifies the same memory location.</p>\n</blockquote>\n", "LastActivityDate": "2014-12-11T18:11:04.917", "CommentCount": "0", "CreationDate": "2014-12-11T18:11:04.917", "ParentId": "27429310", "Score": "2", "OwnerUserId": "3959454"}});