post_cb({"5215292": {"ParentId": "5215249", "LastEditDate": "2011-03-07T03:16:32.970", "CommentCount": "4", "CreationDate": "2011-03-07T02:46:10.160", "OwnerUserId": "410767", "LastEditorUserId": "410767", "PostTypeId": "2", "Id": "5215292", "Score": "2", "Body": "<p><em>With correction prompted by Adam Rosenfield's comment...</em></p>\n<p><code>std::map&lt;&gt;::operator[]</code> requires the value type to have a public default constructor: you simply must have one in <code>class beatle</code> if you want to use that function from <code>std::map&lt;&gt;</code>.  The Standard says it's ok to create containers of non-default-constructible objects as long as you don't call member functions with signatures specifying default constructed arguments (see below), but this doesn't actually gel with the <code>std::map&lt;&gt;::operator[]</code> issue which uses T() despite not mentioning it in the signature.</p>\n<blockquote>\n<p id=\"so_5215249_5215292_0\">20.1.4 - Default construction [lib.default.con.req]</p>\n<p id=\"so_5215249_5215292_1\">-1- The default constructor is not required. Certain container class member function signatures specify the default constructor as a default argument. T() must be a well-defined expression (dcl.init) if one of those signatures is called using the default argument (dcl.fct.default). </p>\n</blockquote>\n<p>You ask if that means you can leave the member variables uninitialised in your default constructor.  Yes, as long as they're not say pointers that may be deleted by <code>operator=</code> or the destructor - you'd need to explicitly set them to 0/NULL.  If some member variables are objects with their own default constructors, these could be run whether you need them to be or not (i.e. even if they're just setting ints, doubles etc.) unless the compiler-time optimisations are able to detect that they're redundant.</p>\n", "LastActivityDate": "2011-03-07T03:16:32.970"}, "5215277": {"ParentId": "5215249", "CommentCount": "1", "Body": "<p>Does the <code>beatle</code> class have a default constructor?  Using <code>operator[]</code> on a <code>std::map</code> can construct an entry in the map if one isn't found with the key you give, and so it needs to be able to create map values (here, <code>beatle</code>).</p>\n", "OwnerUserId": "319906", "PostTypeId": "2", "Id": "5215277", "Score": "2", "CreationDate": "2011-03-07T02:43:50.617", "LastActivityDate": "2011-03-07T02:43:50.617"}, "5215393": {"ParentId": "5215249", "CommentCount": "0", "Body": "<p><code>std::map&lt;&gt;::operator[]</code> requires a default constructor. This is because it first creates an entry in the map then does the <code>operator=</code> that you are calling.</p>\n<p>If you absolutely want to use an <code>std::map</code> but do not want to provide a default constructor (perhaps it is illogical for your case?) you can use:</p>\n<p><code>std::map&lt;&gt;::insert()</code></p>\n<p>To explicitly insert the object into the code. This makes things a bit more complicated then because look ups must also use find. </p>\n<p>I just noticed that Adam Rosenfield already posted this info in a comment but going ahead and leaving this as a separate answer.</p>\n", "OwnerUserId": "29975", "PostTypeId": "2", "Id": "5215393", "Score": "2", "CreationDate": "2011-03-07T03:03:33.673", "LastActivityDate": "2011-03-07T03:03:33.673"}, "bq_ids": {"n4140": {"so_5215249_5215292_1": {"section_id": 6276, "quality": 0.7777777777777778, "length": 21}}, "n3337": {"so_5215249_5215292_1": {"section_id": 6036, "quality": 0.7777777777777778, "length": 21}}, "n4659": {"so_5215249_5215292_1": {"section_id": 7783, "quality": 0.7777777777777778, "length": 21}}}, "5215249": {"CommentCount": "0", "ViewCount": "3311", "PostTypeId": "1", "LastEditorUserId": "319906", "CreationDate": "2011-03-07T02:39:00.387", "LastActivityDate": "2011-03-07T03:16:32.970", "Title": "Template Error: no appropriate default constructor available", "AcceptedAnswerId": "5215393", "LastEditDate": "2011-03-07T02:42:32.943", "Id": "5215249", "Score": "2", "Body": "<p>The thing is, I am not (knowing trying to use any default constructor of <code>beatle::beatle</code>\nthe error:</p>\n<pre><code>1&gt;  ecosystem.cpp\n1&gt;c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\map(172): error C2512: 'beatle::beatle' : no appropriate default constructor available\n1&gt;          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\map(165) : while compiling class template member function 'beatle &amp;std::map&lt;_Kty,_Ty&gt;::operator [](int &amp;&amp;)'\n1&gt;          with\n1&gt;          [\n1&gt;              _Kty=tokenID,\n1&gt;              _Ty=beatle\n1&gt;          ]\n1&gt;          c:\\users\\zak\\documents\\visual studio 2010\\projects\\ascii_sivvure\\ascii_sivvure\\ecosystem.h(22) : see reference to class template instantiation 'std::map&lt;_Kty,_Ty&gt;' being compiled\n1&gt;          with\n1&gt;          [\n1&gt;              _Kty=tokenID,\n1&gt;              _Ty=beatle\n1&gt;          ]\n</code></pre>\n<p>Code with non relevant things stripped:</p>\n<p>header:</p>\n<pre><code>typedef std::map&lt;tokenID,beatle&gt;    Beatles;\n\nclass ecosystem\n{\nprivate:\nline 22:    Beatles m_Beatles;\n};\n</code></pre>\n<p>source:</p>\n<pre><code>ecosystem::ecosystem(): m_output( output() )\n{\n    Beatles m_Beatles;\n}\n\nvoid ecosystem::populate()\n{\n    if (m_isMatingSeason &amp;&amp; ( random(0,1000) &lt; rateMATING ) )\n    {\n        beatle babyBeatle = breed();\n        m_Beatles[babyBeatle.getTokenID()] = babyBeatle;\n        m_field.occupy(babyBeatle.getTokenID(), babyBeatle.getLocation() );\n    }\n}\n</code></pre>\n<p>I've been trying for hours using different combinations of trying to properly define/declare the <code>maps</code>. At one point intellisense starting saying it wanted pointers to object here:</p>\n<pre><code>m_Beatles[babyBeatle.getTokenID()] = babyBeatle;\n</code></pre>\n<p>and that led me down a sad path.</p>\n<p>This is all happening after my first(and hopefully last) refactoring binge, its been over a week since I've been able to compile... I probably have 40 hours just trying to get it working again.</p>\n", "Tags": "<c++><templates><constructor>", "OwnerUserId": "625444", "AnswerCount": "3"}});