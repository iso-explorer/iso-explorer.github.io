post_cb({"36817210": {"Id": "36817210", "PostTypeId": "2", "Body": "<p>Moving this declaration to a global scope may easily lead to violation of <a href=\"https://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">One Definition Rule</a>.</p>\n<p>You can prohibit optimizing out these variables using <code>volatile</code> keyword.</p>\n<blockquote>\n<p id=\"so_36816894_36817210_0\"><code>[C++11: 3.7.3:]</code> If a variable with automatic storage duration has initialization or a\n  destructor with side effects, it shall not be destroyed before the end\n  of its block, nor shall it be eliminated as an optimization even if it\n  appears to be unused, (...)</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_36816894_36817210_1\"><code>[C++11: 1.9.12:]</code> Accessing an object designated by a volatile glvalue (3.10), modifying\n  an object, calling a library I/O function, or calling a function that\n  does any of those operations are all side effects</p>\n</blockquote>\n", "LastActivityDate": "2016-04-23T22:31:53.160", "CommentCount": "2", "CreationDate": "2016-04-23T22:31:53.160", "ParentId": "36816894", "Score": "1", "OwnerUserId": "13767"}, "bq_ids": {"n4140": {"so_36816894_36817210_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 7172}, "so_36816894_36817210_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 5808}}, "n3337": {"so_36816894_36817210_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6916}, "so_36816894_36817210_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 5581}}, "n4659": {"so_36816894_36817210_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 8680}, "so_36816894_36817210_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 7269}}}, "36816894": {"ViewCount": "43", "Body": "<p>the command \"what\" is used on my project to query some peaces of informations about executables (compilation date, version, ...).\nI am fixing a bug where one line is missing in what output since we have changed the version of gcc. The string was defined in a local scope:</p>\n<pre><code>char string_for_what = \"@(#) Component comp1\";\n</code></pre>\n<p>This string was never used. I assume the optimizer has removed it.</p>\n<p>I think the normal correction should be to declare the string at a global scope. But what prohibits a future compiler to optimize it away if it is not used ?</p>\n<p>I have thought about calling <code>strlen(\"@(#) Component comp1\")</code> to ensure that the string is used, but it seems that clang is optimizing away this call on constant strings.</p>\n<p>Shoud I call <code>fopen(\"@(#) Component comp1\")</code> ? If someone creates a file with this name, I may lose one file descriptor. This seems to work but it seems also a bit overkill.</p>\n", "AcceptedAnswerId": "36817210", "Title": "Interaction between the optimizer and strings dedicated to the what command", "CreationDate": "2016-04-23T21:53:55.130", "Id": "36816894", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-04-23T22:31:53.160", "Score": "1", "OwnerUserId": "2051109", "Tags": "<c++><c>", "AnswerCount": "1"}});