post_cb({"17382815": {"Id": "17382815", "PostTypeId": "2", "Body": "<p>Such behavior is not correct. See 8.5.4p3 4rd last bullet. This was the case for pre-standard drafts for some time, but is not the case in C++11. </p>\n<p>It seems you are confused: In no case there should a temporary be created. Both cases should initialize a reference with another reference. Only in the second case, some pre-standard drafts said that a temporary should be created and bound to the member reference, instead of initializing the reference directly. </p>\n<p>(See Number 27 in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3307.pdf\" rel=\"nofollow\">this list</a>). </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2013-06-29T17:27:40.850", "Score": "4", "CreationDate": "2013-06-29T17:22:28.473", "ParentId": "17382796", "CommentCount": "6", "OwnerUserId": "34509", "LastEditDate": "2013-06-29T17:27:40.850"}, "17382828": {"Id": "17382828", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17382796_17382828_0\">I find, for the first sample, a bound temporary object persists for the life-time of an instance of A, but this is not the case for an instance of B. Is such behavior correct according to the C++11 standard?</p>\n</blockquote>\n<p>The behaviour of <code>B</code> is correct. But the behaviour of <code>A</code> is wrong in that the life-time of the temporary <em>should not</em> persist till the life-time of object of <code>A</code> (or the life-time of <code>B</code> in case of <code>B</code>).</p>\n<p>But as a sidenote, since you're binding a temporary to the member of <code>B</code>, be aware! The temporary doesn't exist when the constructor returns, which means what the member refers to, doesn't exist!</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2013-06-29T17:33:53.873", "Score": "2", "CreationDate": "2013-06-29T17:23:21.237", "ParentId": "17382796", "CommentCount": "7", "OwnerUserId": "415784", "LastEditDate": "2013-06-29T17:33:53.873"}, "17382796": {"ViewCount": "225", "Body": "<p>I find I am getting different behaviors for the 2 samples below with g++-4.8.1, when temporaries are bound to an instance of a class:</p>\n<pre><code>template &lt;class T&gt;\nstruct A\n{\n  A(T const&amp; a) : b(a) { }\n\n  T const&amp; b;\n};\n</code></pre>\n<p>and</p>\n<pre><code>template &lt;class T&gt;\nstruct B\n{\n  B(T const&amp; a) : b{a} { }\n\n  T const&amp; b;\n}\n</code></pre>\n<p>I find, for the first sample, a bound temporary object persists for the life-time of an instance of A, but this is not the case for an instance of B. Is such behavior correct according to the C++11 standard? Please point to the relevant parts of the standard.</p>\n<p>NOTE:\n<code>A</code> and <code>B</code>, as well as the temporaries they bind to are instantiated in an expression. At the end of the expression, they are destroyed, along with the temporary they bind to, that is why their life-time should be the same as the life-time of the temporary.</p>\n<p>EDIT: Could this part of the standard explain the discrepancy between the 2 initializations:</p>\n<blockquote>\n<p id=\"so_17382796_17382796_0\">\u2014 Otherwise, if T is a reference type, a prvalue temporary of the type referenced by T is list-initialized,\n  and the reference is bound to that temporary. [ Note: As usual, the binding will fail and the program\n  is ill-formed if the reference type is an lvalue reference to a non-const type. \u2014 end note ]</p>\n</blockquote>\n", "AcceptedAnswerId": "17382815", "Title": "List-initialization of const references to temporary objects", "CreationDate": "2013-06-29T17:20:26.090", "Id": "17382796", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-06-29T19:18:20.577", "LastEditorUserId": "1095108", "LastActivityDate": "2013-06-29T19:18:20.577", "Score": "2", "OwnerUserId": "1095108", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17382796_17382796_0": {"length": 21, "quality": 0.84, "section_id": 3325}}, "n3337": {"so_17382796_17382796_0": {"length": 22, "quality": 0.88, "section_id": 3195}}, "n4659": {"so_17382796_17382796_0": {"length": 18, "quality": 0.72, "section_id": 4091}}}});