post_cb({"39165540": {"Id": "39165540", "PostTypeId": "2", "Body": "<p><code>a[0]</code> is an array of 2 floats (<code>float[2]</code>). Hence, <code>sizeof(a[0])</code> is equivalent to <code>sizeof(float[2])</code> in your code.  On your platform <code>sizeof(float)</code> is 4 and hence <code>sizeof(a[0])</code> is 8. </p>\n<p>But the size of float is irrelevant forthe purpose of calculating the <code>row</code> and <code>column</code> as you do. The code you have is always going to give correct <code>row</code> and <code>column</code> values irrespective of <code>sizeof(float)</code>.</p>\n", "LastActivityDate": "2016-08-26T11:45:46.920", "Score": "3", "CreationDate": "2016-08-26T11:45:46.920", "ParentId": "39165295", "CommentCount": "0", "OwnerUserId": "4389800"}, "39165529": {"Id": "39165529", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_39165295_39165529_0\">But a[0] is an address right ?</p>\n</blockquote>\n<p>No, <code>a[0]</code> is a 1 Dimensional array. It decays to a pointer in almost all cases. However in the case of a <code>sizeof</code> operation, you will get different answers for both.</p>\n<p>As <code>a[0]</code> is a 1D array of 2 floats, <code>sizeof(a[0])</code> gives 8.</p>\n", "LastActivityDate": "2016-08-26T11:45:18.767", "Score": "5", "CreationDate": "2016-08-26T11:45:18.767", "ParentId": "39165295", "CommentCount": "1", "OwnerUserId": "3555525"}, "39165581": {"Id": "39165581", "PostTypeId": "2", "Body": "<p><code>a</code> is a two dimensional array.  The first dimension is the number of total arrays you have and the second number is the the number of element in each array.  So <code>float a[9][2]</code> means you have 9 arrays all right next to each other(arrays are contiguous) and each array has two elements.</p>\n<p>Now if we look at the <a href=\"http://eel.is/c++draft/expr.sizeof\" rel=\"nofollow\">sizeof operator</a> we see that it is defined as </p>\n<blockquote>\n<p id=\"so_39165295_39165581_0\">When applied to an array, the result is the total number of bytes in the array. This implies that the size of an array of n elements is n times the size of an element.</p>\n</blockquote>\n<p>for arrays.</p>\n<p>So now that we know that <code>sizeof</code> gives the total size of the array if given an array and we know that <code>a[n]</code> represents on of the two element arrays in <code>a</code> then <code>sizeof(a[0])</code> is the total size of one of the first array(and all of them since the array is not jagged) which happens to be <code>8</code> since <code>sizeof(float)</code> is <code>4</code>.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-08-26T11:53:00.940", "Score": "1", "CreationDate": "2016-08-26T11:47:52.330", "ParentId": "39165295", "CommentCount": "3", "LastEditDate": "2016-08-26T11:53:00.940", "OwnerUserId": "4342498"}, "39165295": {"ViewCount": "244", "Body": "<p>I was browsing for finding a way to find number of rows and columns in of a given matrix without any additional information and I came around this answer.</p>\n<p><a href=\"https://stackoverflow.com/questions/8529638/given-a-matrix-find-number-of-rows-and-columns/15957714#15957714\">Given a matrix, find number of rows and columns</a></p>\n<p>This is the code snippet from the second answer of the question above :</p>\n<pre><code>int main()\n{\n    float a[9][2]={{0,1},{1,1}};\n    int row=(sizeof(a)/sizeof(a[0]));\n    int col=(sizeof(a)/sizeof(a[0][0]))/row;\n    printf(\"%d\\n\",row);\n    printf(\"%d\\n\",col);\n    return 0;\n}\n</code></pre>\n<p>How does the sizeof(a[0]) turns out to be 8? In my understanding the pointers have a generic size of 4 bytes in 32 bit arch and 8 bytes in 64 bit arch. I printed out the sizeof(a[0]) on both the machines and the answer is still 8.\nAnybody has any clue why?</p>\n<p>Edited : I mean to say doesn't a[0] decay into a pointer?</p>\n", "AcceptedAnswerId": "39165501", "Title": "How come does the size of arr[0] is of 8 bytes?", "CreationDate": "2016-08-26T11:30:23.807", "Id": "39165295", "CommentCount": "15", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:02.963", "LastEditorUserId": "-1", "LastActivityDate": "2016-08-26T11:53:00.940", "Score": "5", "OwnerUserId": "4092293", "Tags": "<c++><c>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_39165295_39165581_0": {"length": 15, "quality": 0.9375, "section_id": 6077}, "so_39165295_39165501_0": {"length": 9, "quality": 0.9, "section_id": 6077}}, "n3337": {"so_39165295_39165581_0": {"length": 15, "quality": 0.9375, "section_id": 5845}, "so_39165295_39165501_0": {"length": 9, "quality": 0.9, "section_id": 5845}}, "n4659": {"so_39165295_39165581_0": {"length": 15, "quality": 0.9375, "section_id": 7573}, "so_39165295_39165501_0": {"length": 9, "quality": 0.9, "section_id": 7573}}}, "39165501": {"Id": "39165501", "PostTypeId": "2", "Body": "<p>There are no pointers used anywhere in the code posted. Arrays do not decay to a pointer-to-first-element when passed as operand to <code>sizeof</code> (1).</p>\n<ul>\n<li><code>a</code> is a 2D array, of type <code>float [9][2]</code>. </li>\n<li><code>a[0]</code> is the first item in this 2D array, which is a 1D array of type <code>float [2]</code>.</li>\n<li><code>sizeof(a)</code> gives the size of the 2D array, equivalent to <code>sizeof(float) * 9 * 2</code>.</li>\n<li><code>sizeof(a[0])</code> gives the size of the 1D array, equivalent to <code>sizeof(float) * 2</code>.</li>\n<li><code>float</code> is apparently 4 bytes on your system, 4 * 2 = 8.</li>\n</ul>\n<hr>\n<p>(1) See the specification of the sizeof operator in ISO 9899:2011 6.5.3.4:</p>\n<blockquote>\n<p id=\"so_39165295_39165501_0\">When applied to an operand that has array type, the result is the\n  total number of bytes in the array.</p>\n</blockquote>\n<p>The rule of \"array decay\" is found in 6.3.2.1/3:</p>\n<blockquote>\n<p id=\"so_39165295_39165501_1\">Except when it is the operand of the sizeof operator, or the unary &amp;\n  operator, or is a string literal used to initialize an array, an\n  expression that has type \u2018\u2018array of type\u2019\u2019 is converted to an\n  expression with type \u2018\u2018pointer to type\u2019\u2019 that points to the initial\n  element of the array object and is not an lvalue.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "584518", "LastActivityDate": "2016-08-26T11:52:14.703", "Score": "11", "CreationDate": "2016-08-26T11:43:36.980", "ParentId": "39165295", "CommentCount": "4", "LastEditDate": "2016-08-26T11:52:14.703", "OwnerUserId": "584518"}});