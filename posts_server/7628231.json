post_cb({"7628340": {"ParentId": "7628231", "CommentCount": "0", "Body": "<p>According to C++98 Standard member function template shall not be virtual. <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/template.html\" rel=\"nofollow\">http://www.kuzbass.ru:8086/docs/isocpp/template.html</a>.</p>\n<blockquote>\n<p id=\"so_7628231_7628340_0\">-3- A member function template shall not be virtual. [Example:</p>\n<pre><code>template &lt;class T&gt; struct AA {\n  template &lt;class C&gt; virtual void g(C);   //  error\n  virtual void f();                       //  OK\n};\n</code></pre>\n</blockquote>\n", "OwnerUserId": "72178", "PostTypeId": "2", "Id": "7628340", "Score": "2", "CreationDate": "2011-10-02T18:26:19.453", "LastActivityDate": "2011-10-02T18:26:19.453"}, "bq_ids": {"n4140": {"so_7628231_7628259_0": {"section_id": 112, "quality": 1.0, "length": 4}, "so_7628231_7628340_0": {"section_id": 112, "quality": 0.8, "length": 4}}, "n3337": {"so_7628231_7628259_0": {"section_id": 107, "quality": 1.0, "length": 4}, "so_7628231_7628340_0": {"section_id": 107, "quality": 0.8, "length": 4}}, "n4659": {"so_7628231_7628259_0": {"section_id": 116, "quality": 1.0, "length": 4}, "so_7628231_7628340_0": {"section_id": 116, "quality": 0.8, "length": 4}}}, "7628397": {"ParentId": "7628231", "CommentCount": "0", "Body": "<p>You can get a similar effect by overloading your function template with a regular non-template virtual function.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "7628397", "Score": "0", "CreationDate": "2011-10-02T18:37:05.367", "LastActivityDate": "2011-10-02T18:37:05.367"}, "7628259": {"ParentId": "7628231", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Explicit specializations aren't legal within a class. Even if you could make it a partial specialization you would still run into the \"templates can't be virtual\" problem.</p>\n<p>n3290, \u00a7 14.5.2 states:</p>\n<blockquote>\n<p id=\"so_7628231_7628259_0\">A member function template shall not be virtual.</p>\n</blockquote>\n<p>And gives this example:</p>\n<pre><code>template &lt;class T&gt; struct AA {\n  template &lt;class C&gt; virtual void g(C); // error\n  virtual void f(); // OK\n};\n</code></pre>\n<p>Before going on to state that member function templates do not count for virtual overrides too.</p>\n", "OwnerUserId": "168175", "LastEditorUserId": "168175", "LastEditDate": "2011-10-02T18:46:56.890", "Id": "7628259", "Score": "8", "CreationDate": "2011-10-02T18:14:09.950", "LastActivityDate": "2011-10-02T18:46:56.890"}, "7628231": {"CommentCount": "3", "AcceptedAnswerId": "7628259", "CreationDate": "2011-10-02T18:07:42.510", "LastActivityDate": "2011-10-02T18:46:56.890", "PostTypeId": "1", "ViewCount": "618", "FavoriteCount": "1", "Title": "Can specializations of a template function be virtual?", "Id": "7628231", "Score": "5", "Body": "<p>Something like, for example,</p>\n<pre><code>class A {\n    template&lt;typename T&gt; T DoStuff();\n    template&lt;&gt; virtual int DoStuff&lt;int&gt;() = 0;\n};\n</code></pre>\n<p>Visual Studio 2010 says no, but I get a funny feeling that I simply messed up the syntax. Can explicit full specializations of a member function template be virtual?</p>\n", "Tags": "<c++><visual-studio-2010>", "OwnerUserId": "298661", "AnswerCount": "3"}});