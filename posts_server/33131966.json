post_cb({"bq_ids": {"n4140": {"so_33131966_33132074_0": {"length": 11, "quality": 1.0, "section_id": 5811}}, "n3337": {"so_33131966_33132074_0": {"length": 11, "quality": 1.0, "section_id": 5584}}, "n4659": {"so_33131966_33132074_0": {"length": 11, "quality": 1.0, "section_id": 7272}}}, "33131966": {"ViewCount": "97", "Body": "<pre><code>std::map&lt;int,int&gt; bar;\n\nint foo(int key)\n{\n  bar.erase(key);\n  return 1;\n}    \n\nint main()\n{\n  bar[0] = foo(0);\n  return 0;\n}\n</code></pre>\n<p>This code compiled with GCC 4.8 segs fault when checking memory usage with electric fence.</p>\n<pre><code>LD_PRELOAD=libefence.so.0.0 ./a.out\n</code></pre>\n<p>The problem comes from the fact that the compiler generates a code that starts to allocate a new entry in the map, then executes foo() to get the value to put into bar[0]. While running foo(), the entry gets destroyed and the code finally ends by writing in non-allocated memory.</p>\n<p>Does the way the operations are ordered depend on the compiler implementation, or is it specified by the C++ current standard?</p>\n", "AcceptedAnswerId": "33132074", "Title": "c++ STL map::operator[] done on an entry being deleted", "CreationDate": "2015-10-14T17:33:08.617", "Id": "33131966", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2015-10-14T18:03:17.830", "Score": "5", "OwnerUserId": "3835040", "Tags": "<c++><dictionary><stl><segmentation-fault>", "AnswerCount": "1"}, "33132074": {"Id": "33132074", "PostTypeId": "2", "Body": "<p>The standard (\u00a71.9 15) specifies that the evaluation of the two operands to a binary operator is unsequenced (unless in some specific cases):</p>\n<blockquote>\n<p id=\"so_33131966_33132074_0\">Except where noted, evaluations of operands of individual operators\n  and of subexpressions of individual expressions are unsequenced.</p>\n</blockquote>\n<p>This means that it does not mandate that one side of the assignment operation is evaluated before the other, and in fact, it is undefined behavior to depend on the order of these unsequenced operations.</p>\n<p>This is also generally true for the order of evaluation of function arguments.</p>\n<p>You need to break your assignment in two:</p>\n<pre><code>int result = foo(0);\nbar[0] = result;\n</code></pre>\n", "LastEditorUserId": "251153", "LastActivityDate": "2015-10-14T18:03:17.830", "Score": "5", "CreationDate": "2015-10-14T17:39:57.740", "ParentId": "33131966", "CommentCount": "4", "LastEditDate": "2015-10-14T18:03:17.830", "OwnerUserId": "251153"}});