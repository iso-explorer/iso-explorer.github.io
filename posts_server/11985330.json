post_cb({"11985331": {"CommentCount": "0", "Body": "<p>Yes, C++03 does provide this guarantee, but <strong>it's worth double-checking</strong> for your implementations.</p>\n<p>From a draft copy I had on my machine, 20.4.4:</p>\n<blockquote>\n<p id=\"so_11985330_11985331_0\">All the iterators that are used as formal template parameters in the following algorithms are required to have their <code>operator*</code> return an object for which operator&amp; is defined and returns a pointer to <code>T</code>.<br>\n  In the algorithm <code>uninitialized_copy</code>, the formal template parameter <code>InputIterator</code> is required to satisfy the requirements of an input iterator (24.1.1).<br>\n  In all of the following algorithms, the formal template parameter <code>ForwardIterator</code> is required to satisfy the requirements of a forward iterator (24.1.3) and also to satisfy the requirements of a mutable iterator (24.1), and is required to have the property that no exceptions are thrown from increment, assignment, comparison, or dereference of valid iterators.<br>\n<strong>In the following algorithms, if an exception is thrown there are no effects.</strong> </br></br></br></p>\n<ul>\n<li><code>uninitialized_copy</code>  (etc.)</li>\n</ul>\n</blockquote>\n<p>So yes, that means the \"possible implementation\" you see on <a href=\"http://en.cppreference.com/w/cpp/memory/uninitialized_copy_n\" rel=\"nofollow\">some pages</a> can be incorrect.</p>\n", "CreationDate": "2012-08-16T10:33:53.410", "ParentId": "11985330", "Id": "11985331", "LastActivityDate": "2012-08-16T10:33:53.410", "PostTypeId": "2", "Score": "2", "OwnerUserId": "541686"}, "bq_ids": {"n4140": {"so_11985330_11985331_0": {"length": 53, "quality": 0.8153846153846154, "section_id": 4261}}, "n3337": {"so_11985330_11985331_0": {"length": 57, "quality": 0.8769230769230769, "section_id": 4102}}}, "11985330": {"CreationDate": "2012-08-16T10:33:53.410", "ViewCount": "192", "Id": "11985330", "AcceptedAnswerId": "11985331", "Score": "0", "Title": "Is uninitialized_copy() exception-safe?", "CommentCount": "0", "Body": "<p><a href=\"http://msdn.microsoft.com/en-us/library/ctht4stc.aspx\" rel=\"nofollow\">MSDN</a> and <a href=\"http://books.google.com/books?id=gYNVsCaxfYgC&amp;lpg=PA380&amp;ots=KLUIn19QsP&amp;dq=uninitialized_copy%20exception&amp;pg=PA380#v=onepage&amp;q=uninitialized_copy%20exception&amp;f=false\" rel=\"nofollow\">other places</a> say that <code>uninitialized_copy</code> provides a strong exception guarantee, but <a href=\"http://www.sgi.com/tech/stl/uninitialized_copy.html\" rel=\"nofollow\">other</a> C++ references <a href=\"http://www.cplusplus.com/reference/std/memory/uninitialized_copy/\" rel=\"nofollow\">don't</a>.</p>\n<p>Is this in fact guaranteed by C++, or not?</p>\n", "Tags": "<c++><exception><exception-safety>", "LastActivityDate": "2012-08-16T10:33:53.410", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "541686"}});