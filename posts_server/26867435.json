post_cb({"26867506": {"ParentId": "26867435", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Fortunately the C++11 standard makes this clear:</p>\n<blockquote>\n<p id=\"so_26867435_26867506_0\">\u00a723.2.2/1:</p>\n<p id=\"so_26867435_26867506_1\">For purposes of avoiding data races (17.6.5.9), implementations shall\n  consider the following functions to be const: begin, end, rbegin,\n  rend, front, back, data, find, lower_bound, upper_bound, equal_range,\n  at and, except in associative or unordered associative containers,\n  operator[].</p>\n</blockquote>\n<p>So you are safe. The <code>map</code> cannot rebalance when calling a <code>const</code> function.</p>\n", "OwnerUserId": "2380830", "LastEditorUserId": "2380830", "LastEditDate": "2014-11-11T14:50:46.493", "Id": "26867506", "Score": "2", "CreationDate": "2014-11-11T14:44:52.060", "LastActivityDate": "2014-11-11T14:50:46.493"}, "26867435": {"CommentCount": "3", "ViewCount": "560", "PostTypeId": "1", "LastEditorUserId": "2380830", "CreationDate": "2014-11-11T14:40:53.157", "LastActivityDate": "2014-11-11T16:22:56.817", "Title": "Can a std::map rebalance during the invocation of a const function?", "AcceptedAnswerId": "26869014", "LastEditDate": "2014-11-11T14:58:39.647", "Id": "26867435", "Score": "7", "Body": "<p>I have a <code>const std::map&lt;std::string, std::vector&lt;double&gt;&gt;</code> member variable and a function <code>const std::vector* foo()</code>. I'd like this function to sometimes return a pointer to an element of this map. But I'm concerned that the map might rebalance - even during a <code>std::map</code> function marked <code>const</code> - so invalidating my returned pointer. I know that any subsequent modification of the map will invalidate my pointers but that cannot happen as I've marked the member variable <code>const</code>.</p>\n<p>I can't return a reference as on occasions, <code>foo</code> needs to return <code>nullptr</code>.</p>\n<p>Is what I'm doing safe?</p>\n", "Tags": "<c++>", "OwnerUserId": "2696248", "AnswerCount": "3"}, "26869508": {"ParentId": "26867435", "CommentCount": "0", "Body": "<p>I assume you mean \"const std::vector* foo().\"</p>\n<p>Rebalancing is not relevant here. The answer is that your returned pointer is not invalidated as long as the item to which it points remains in the std::map (and the map is not destroyed or moved).</p>\n<p>Note that std::map (which you shouldn't be using anyway - See Chandler's talk at CppCon 2014: <a href=\"http://youtu.be/fHNmRkzxHWs\" rel=\"nofollow\">http://youtu.be/fHNmRkzxHWs</a>) will never move items once they are added to the container, even when rebalancing. The address of an item in a map will be the same as long as that item is in the container. This is true without regard to rebalancing or additions and/or removal of other items.</p>\n", "OwnerUserId": "2646369", "PostTypeId": "2", "Id": "26869508", "Score": "2", "CreationDate": "2014-11-11T16:22:56.817", "LastActivityDate": "2014-11-11T16:22:56.817"}, "bq_ids": {"n4140": {"so_26867435_26869014_0": {"section_id": 745, "quality": 0.9375, "length": 15}, "so_26867435_26867506_1": {"section_id": 717, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_26867435_26869014_0": {"section_id": 734, "quality": 0.9375, "length": 15}, "so_26867435_26867506_1": {"section_id": 706, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_26867435_26869014_0": {"section_id": 803, "quality": 0.9375, "length": 15}, "so_26867435_26867506_1": {"section_id": 748, "quality": 0.9259259259259259, "length": 25}}}, "26869014": {"ParentId": "26867435", "CommentCount": "0", "Body": "<p>The standard is quite clear: the only thing that can invalidate\nan iterator or a pointer or reference into a map is removing the\nelement it points to.  You can even insert other elements\nwithout invalidating your pointer.  See \u00a723.2.4/9: </p>\n<blockquote>\n<p id=\"so_26867435_26869014_0\">The insert and emplace members shall not affect the validity of\n  iterators and references to the container, and the erase members shall\n  invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "26869014", "Score": "8", "CreationDate": "2014-11-11T15:59:10.653", "LastActivityDate": "2014-11-11T15:59:10.653"}});