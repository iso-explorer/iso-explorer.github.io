post_cb({"17560755": {"ParentId": "6102948", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The constraints are in the standards:</p>\n<p>C11(ISO/IEC 9899:201x) \u00a76.5.5 <em>Multiplicative operators</em></p>\n<blockquote>\n<p id=\"so_6102948_17560755_0\">Each of the operands shall have arithmetic type. The operands of the % operator shall\n  have integer type.</p>\n</blockquote>\n<p>C++11(ISO/IEC 14882:2011) \u00a75.6 <em>Multiplicative operators</em></p>\n<blockquote>\n<p id=\"so_6102948_17560755_1\">The operands of * and / shall have arithmetic or enumeration type; the operands of % shall have integral or enumeration\n  type. The usual arithmetic conversions are performed on the operands and determine the type of the result.</p>\n</blockquote>\n<p>The solution is to use <code>fmod</code>, which is exactly why the operands of <code>%</code> are limited to integer type in the first place, according to <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf\" rel=\"nofollow\">C99 Rationale</a> \u00a76.5.5 <em>Multiplicative operators</em>:</p>\n<blockquote>\n<p id=\"so_6102948_17560755_2\">The C89 Committee rejected extending the % operator to work on floating types as such usage would duplicate the facility provided by fmod</p>\n</blockquote>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2013-07-10T02:12:04.343", "Id": "17560755", "Score": "6", "CreationDate": "2013-07-10T00:56:46.273", "LastActivityDate": "2013-07-10T02:12:04.343"}, "6102948": {"CommentCount": "10", "AcceptedAnswerId": "6103040", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-05-23T20:57:43.277", "LastActivityDate": "2016-02-16T16:31:36.323", "LastEditDate": "2017-05-23T12:18:10.243", "ViewCount": "87903", "FavoriteCount": "16", "Title": "Why does modulus division (%) only work with integers?", "Id": "6102948", "Score": "68", "Body": "<p>I recently ran into <a href=\"https://stackoverflow.com/questions/6091837/sin-and-cos-are-slow-is-there-an-alternatve/6091846#6091846\">an issue</a> that could easily be solved using modulus division, but the input was a float:</p>\n<blockquote>\n<p id=\"so_6102948_6102948_0\">Given a periodic function (e.g. <code>sin</code>) and a computer function that can only compute it within the period range (e.g. [-\u03c0, \u03c0]), make a function that can handle any input.</p>\n</blockquote>\n<p>The \"obvious\" solution is something like:</p>\n<pre><code>#include &lt;cmath&gt;\n\nfloat sin(float x){\n    return limited_sin((x + M_PI) % (2 *M_PI) - M_PI);\n}\n</code></pre>\n<p>Why doesn't this work? I get this error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: invalid operands of types double and double to binary operator %\n</code></pre>\n<p>Interestingly, it does work in Python:</p>\n<pre class=\"lang-python prettyprint-override\"><code>def sin(x):\n    return limited_sin((x + math.pi) % (2 * math.pi) - math.pi)\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "212555", "AnswerCount": "8"}, "6103028": {"ParentId": "6102948", "CommentCount": "1", "Body": "<p>The % operator gives you a REMAINDER(another name for modulus) of a number.  For C/C++, this is only defined for integer operations.  Python is a little broader and allows you to get the remainder of a floating point number for the remainder of how many times number can be divided into it:</p>\n<pre><code>&gt;&gt;&gt; 4 % math.pi\n0.85840734641020688\n&gt;&gt;&gt; 4 - math.pi\n0.85840734641020688\n&gt;&gt;&gt; \n</code></pre>\n", "OwnerUserId": "346387", "PostTypeId": "2", "Id": "6103028", "Score": "1", "CreationDate": "2011-05-23T21:05:08.500", "LastActivityDate": "2011-05-23T21:05:08.500"}, "6102974": {"ParentId": "6102948", "CommentCount": "4", "Body": "<p>The modulo operator <code>%</code> in C and C++ is defined for two integers, however, there is an <a href=\"http://www.cplusplus.com/reference/clibrary/cmath/fmod/\" rel=\"noreferrer\"><code>fmod()</code></a> function available for usage with doubles.</p>\n", "OwnerUserId": "21441", "PostTypeId": "2", "Id": "6102974", "Score": "11", "CreationDate": "2011-05-23T21:00:33.480", "LastActivityDate": "2011-05-23T21:00:33.480"}, "6103040": {"CommentCount": "5", "CreationDate": "2011-05-23T21:06:18.547", "LastEditorUserId": "187690", "LastActivityDate": "2014-03-03T18:51:20.790", "ParentId": "6102948", "LastEditDate": "2014-03-03T18:51:20.790", "LastEditorDisplayName": "user283145", "PostTypeId": "2", "Id": "6103040", "Score": "63", "Body": "<p>Because the normal mathematical notion of \"remainder\" is only applicable to integer division. i.e. division that is required to generate integer quotient.</p>\n<p>In order to extend the concept of \"remainder\" to real numbers you have to introduce a new kind of \"hybrid\" operation that would generate <em>integer</em> quotient for <em>real</em> operands. Core C language does not support such operation, but it is provided as a standard library <a href=\"http://en.cppreference.com/w/c/numeric/math/fmod\"><code>fmod</code></a> function, as well as <a href=\"http://en.cppreference.com/w/c/numeric/math/remainder\"><code>remainder</code></a> function in C99. (Note that these functions are not the same and have some peculiarities. In particular, they do not follow the rounding rules of integer division.)</p>\n", "OwnerUserId": "187690"}, "6102971": {"ParentId": "6102948", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You're looking for <a href=\"http://en.cppreference.com/w/cpp/numeric/math/fmod\" rel=\"noreferrer\">fmod()</a>.</p>\n<p>I guess to more specifically answer your question, in older languages the <code>%</code> operator was just defined as integer modular division and in newer languages they decided to expand the definition of the operator.</p>\n<p><strong>EDIT:</strong>  If I were to wager a guess why, I would say it's because the idea of modular arithmetic originates in number theory and deals specifically with integers.</p>\n", "OwnerUserId": "411216", "LastEditorDisplayName": "user283145", "LastEditDate": "2013-09-02T20:31:46.187", "Id": "6102971", "Score": "45", "CreationDate": "2011-05-23T21:00:19.750", "LastActivityDate": "2013-09-02T20:31:46.187"}, "26610135": {"ParentId": "6102948", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <code>%</code> operator does not work in C++, when you are trying to find the remainder of two numbers which are both of the type <code>Float</code> or <code>Double</code>.</p>\n<p>Hence you could try using the <code>fmod</code> function from <code>math.h</code> / <code>cmath.h</code> or you could use these lines of code to avoid using that header file:</p>\n<pre><code>float sin(float x) {\n float temp;\n temp = (x + M_PI) / ((2 *M_PI) - M_PI);\n return limited_sin((x + M_PI) - ((2 *M_PI) - M_PI) * temp ));\n</code></pre>\n<p>}</p>\n", "OwnerUserId": "3840955", "LastEditorUserId": "50939", "LastEditDate": "2014-10-28T14:31:38.463", "Id": "26610135", "Score": "1", "CreationDate": "2014-10-28T13:53:39.573", "LastActivityDate": "2014-10-28T14:31:38.463"}, "6103063": {"ParentId": "6102948", "CommentCount": "2", "Body": "<p>I can't really say for <em>sure</em>, but I'd guess it's mostly historical. Quite a few early C compilers didn't support floating point at all. It was added on later, and even then not as completely -- mostly the data type was added, and the <em>most</em> primitive operations supported in the language, but everything else left to the standard library.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "6103063", "Score": "12", "CreationDate": "2011-05-23T21:08:32.337", "LastActivityDate": "2011-05-23T21:08:32.337"}, "bq_ids": {"n4140": {"so_6102948_17560755_0": {"section_id": 6172, "quality": 0.6363636363636364, "length": 7}, "so_6102948_17560755_1": {"section_id": 6135, "quality": 0.8, "length": 16}}, "n3337": {"so_6102948_17560755_0": {"section_id": 5933, "quality": 0.6363636363636364, "length": 7}, "so_6102948_17560755_1": {"section_id": 5899, "quality": 0.8, "length": 16}}, "n4659": {"so_6102948_17560755_0": {"section_id": 7670, "quality": 0.6363636363636364, "length": 7}, "so_6102948_17560755_1": {"section_id": 7632, "quality": 0.8, "length": 16}}}, "6102980": {"ParentId": "6102948", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>try <code>fmod</code></p>\n", "OwnerUserId": "191596", "LastEditorUserId": "129570", "LastEditDate": "2011-05-23T21:10:22.837", "Id": "6102980", "Score": "3", "CreationDate": "2011-05-23T21:00:42.120", "LastActivityDate": "2011-05-23T21:10:22.837"}});