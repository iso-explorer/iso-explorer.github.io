post_cb({"32729398": {"ParentId": "32729353", "CommentCount": "0", "Body": "<p>Sure. For example:</p>\n<pre><code>template &lt;typename T&gt;\nstruct S {\n    static_assert(std::is_class&lt;T&gt;::value, \"T must be a class\");\n    static_assert(!std::is_class&lt;T&gt;::value, \"T must not be a class\");\n};\n</code></pre>\n<p>However, such a template is automatically ill-formed NDR.</p>\n<blockquote>\n<p id=\"so_32729353_32729398_0\">If no valid specialization can\n  be generated for a template, and that template is not instantiated, the template is ill-formed, no diagnostic\n  required.</p>\n</blockquote>\n<p>([temp.res]/8)</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "32729398", "Score": "2", "CreationDate": "2015-09-23T01:03:20.673", "LastActivityDate": "2015-09-23T01:03:20.673"}, "32729353": {"CommentCount": "3", "ViewCount": "51", "CreationDate": "2015-09-23T00:57:21.480", "LastActivityDate": "2015-09-23T01:08:48.977", "Title": "Is it possible to write C++ template that won't accept any type?", "AcceptedAnswerId": "32729398", "PostTypeId": "1", "Id": "32729353", "Score": "0", "Body": "<p>I'm curious if it's possible to write such C++ template for which it's impossible to create a class/type it will accept (compile without errors).\nIf it is possible, what it could be?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "2399236", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32729353_32729398_0": {"section_id": 175, "quality": 1.0, "length": 11}}, "n3337": {"so_32729353_32729398_0": {"section_id": 169, "quality": 1.0, "length": 11}}, "n4659": {"so_32729353_32729398_0": {"section_id": 180, "quality": 0.8181818181818182, "length": 9}}}, "32729450": {"ParentId": "32729353", "CommentCount": "0", "Body": "<p>One way you can do that is provide a forward declaration of the class template only. One example of such a class template that I have used in the past is to print the size of a type as a compiler error.</p>\n<pre><code>template &lt;size_t&gt; struct PrintSize;\n\nPrintSize&lt;sizeof(int)&gt; a;\n</code></pre>\n<p>When you compile that code, you will be able to tell the size of <code>int</code> from the error message issued by the compiler.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "32729450", "Score": "1", "CreationDate": "2015-09-23T01:08:48.977", "LastActivityDate": "2015-09-23T01:08:48.977"}});