post_cb({"11809432": {"CommentCount": "2", "ViewCount": "188", "PostTypeId": "1", "ClosedDate": "2012-08-06T11:30:07.320", "LastEditorUserId": "-1", "CreationDate": "2012-08-04T14:38:15.287", "LastActivityDate": "2012-08-04T15:22:01.840", "Title": "Template derived from interface - polymorphism stopped working?", "AcceptedAnswerId": "11809590", "LastEditDate": "2017-05-23T12:29:12.327", "Id": "11809432", "Score": "3", "Body": "<blockquote>\n<p id=\"so_11809432_11809432_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3247671/accessing-protected-members-in-a-derived-class\">Accessing protected members in a derived class</a> </br></p>\n</blockquote>\n<p>If I have an abstract base class and a concrete templated class that derives from it, which has a method that uses a pointer to the base class - it seems that the derived class stops seeing itself as derived from it:</p>\n<pre><code>class AbstractBase\n{\nprotected:\n    virtual void test() = 0;\n};\n\ntemplate &lt; class T &gt;\nclass Derived : public AbstractBase\n{\npublic:\n    virtual void call( AbstractBase* d ) { d-&gt;test(); }  //  Error!\nprotected:\n    virtual void test() {}\n};\n\nint main()\n{\n    Derived&lt; int &gt; a;\n    Derived&lt; int &gt; b;\n\n    b.call( &amp;a );\n\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>This errors with:</p>\n<blockquote>\n<p id=\"so_11809432_11809432_1\">'virtual void AbstractBase::test()' is protected</p>\n</blockquote>\n<p>The compiler's not wrong, it's definitely <code>protected</code> - but if <code>Derived&lt; T &gt;</code> inherits from <code>AbstractBase</code>, why is it complaining?</p>\n", "Tags": "<c++><templates><polymorphism>", "OwnerUserId": "498437", "AnswerCount": "2"}, "11809590": {"ParentId": "11809432", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2012-08-04T15:02:15.047", "Score": "3", "LastEditorUserId": "315052", "LastEditDate": "2012-08-04T15:22:01.840", "Id": "11809590", "OwnerUserId": "315052", "Body": "<p>The reason it isn't allowed is because <code>AbstractBase</code> as a type declares <code>test</code> to be protected. This makes it private to all unless the current class is a direct descendant of <code>AbstractBase</code>. Even so, that class can only access the member though an object of the same class, not a different descendant, and not directly from <code>AbstractBase</code> itself.</p>\n<pre><code>template &lt; class T &gt;\nclass Derived : public AbstractBase\n{\npublic:\n    virtual void call( Derived * d ) {\n        d-&gt;test(); // ok, d has same type as this\n        AbstractBase *b = this;\n        b-&gt;test(); // not ok\n    }\nprotected:\n    virtual void test() {}\n};\n</code></pre>\n<p>You can, as demonstrated above, just allow it for pointers of the same type. Alternatively, you can create a proxy base class for <code>Derived</code> to implement your <code>virtual</code> method to call <code>test</code>. This will allow access from different <code>Derived</code> types.</p>\n<pre><code>class DerivedBase : public virtual AbstractBase\n{\npublic:\n    virtual void call( DerivedBase * d ) { d-&gt;test(); }\n};\n\ntemplate &lt; class T &gt;\nclass Derived : public DerivedBase\n{\nprotected:\n    virtual void test() {}\n};\n</code></pre>\n<p>And can be accessed this way:</p>\n<pre><code>   Derived&lt; int &gt; a;\n   Derived&lt; int &gt; b;\n   Derived&lt; float &gt; c;\n\n   b.call( &amp;a );\n   c.call( &amp;a );\n</code></pre>\n", "LastActivityDate": "2012-08-04T15:22:01.840"}, "11809704": {"ParentId": "11809432", "CommentCount": "1", "Body": "<p>This is not related to templates, but to protected member access in general. See <strong>section 11.4 Protected member access [class.protected]</strong> of the latest publicly available draft C++ <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">Standard</a> </p>\n<blockquote>\n<p id=\"so_11809432_11809704_0\">An additional access check beyond those described earlier in Clause 11\n  is applied when a non-static data member or non-static member function\n  is a protected member of its naming class (11.2) 115 As described\n  earlier, access to a protected member is granted because the reference\n  occurs in a friend or member of some class C. If the access is to form\n  a pointer to member (5.3.1), the nested-name-speci\ufb01er shall denote C\n  or a class derived from C. All other accesses involve a (possibly\n  implicit) object expression (5.2.5). In this case, the class of the\n  object expression shall be C or a class derived from C.</p>\n</blockquote>\n<p>[Example:</p>\n<pre><code>class B {\nprotected:\n    int i;\n    static int j;\n};\n\nclass D1 : public B {\n};\n\nclass D2 : public B {\n    friend void fr(B*,D1*,D2*);\n    void mem(B*,D1*);\n};\n\nvoid fr(B* pb, D1* p1, D2* p2) {\n   pb-&gt;i = 1; // ill-formed\n   p1-&gt;i = 2; // ill-formed\n   p2-&gt;i = 3; // OK (access through a D2)\n   p2-&gt;B::i = 4; // OK (access through a D2, even though\n                 // naming class is B)\n   int B::* pmi_B = &amp;B::i; // ill-formed\n   int B::* pmi_B2 = &amp;D2::i; // OK (type of &amp;D2::i is int B::*)\n   B::j = 5; // OK (because refers to static member)\n   D2::j = 6; // OK (because refers to static member)\n}\n</code></pre>\n", "OwnerUserId": "819272", "PostTypeId": "2", "Id": "11809704", "Score": "1", "CreationDate": "2012-08-04T15:18:34.713", "LastActivityDate": "2012-08-04T15:18:34.713"}, "bq_ids": {"n4140": {"so_11809432_11809704_0": {"section_id": 6695, "quality": 0.9166666666666666, "length": 55}, "so_11809432_11809432_0": {"section_id": 6664, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_11809432_11809704_0": {"section_id": 6450, "quality": 0.9166666666666666, "length": 55}, "so_11809432_11809432_0": {"section_id": 6419, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_11809432_11809704_0": {"section_id": 8170, "quality": 0.9166666666666666, "length": 55}, "so_11809432_11809432_0": {"section_id": 8139, "quality": 0.5714285714285714, "length": 4}}}});