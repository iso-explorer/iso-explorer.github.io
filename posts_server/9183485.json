post_cb({"9183858": {"LastActivityDate": "2012-02-07T21:35:31.650", "CommentCount": "3", "Body": "<p>The difference is because <code>const</code> affects the linkage. It works if you add <code>extern</code>. That said, as far as I can tell:</p>\n<blockquote>\n<p id=\"so_9183485_9183858_0\">14.3.2 Template non-type arguments [temp.arg.nontype]</p>\n<p id=\"so_9183485_9183858_1\">A template-argument for a non-type, non-template template-parameter shall be one of:</p>\n<ul>\n<li>an integral constant expression (including a constant expression of literal class type that can be used as an integral constant expression as described in 5.19); or</li>\n<li>the name of a non-type template-parameter; or</li>\n<li>a constant expression (5.19) that designates the address of an object with static storage duration and external or internal linkage or a function with external or internal linkage, including function templates and function template-ids but excluding non-static class members, expressed (ignoring parentheses) as &amp; id-expression, except that the &amp; may be omitted if the name refers to a function or array and shall be omitted if the corresponding template-parameter is a reference; or</li>\n<li>a constant expression that evaluates to a null pointer value (4.10); or</li>\n<li>a constant expression that evaluates to a null member pointer value (4.11); or</li>\n<li>a pointer to member expressed as described in 5.3.1.</li>\n</ul>\n</blockquote>\n<p>it should also work without <code>extern</code>. The object is allowed to have internal linkage, but your compiler does not yet support that. This is one of the changes in C++11, the previous C++ standard did not allow it.</p>\n", "PostTypeId": "2", "LastEditDate": "2012-02-07T21:35:31.650", "ParentId": "9183485", "Id": "9183858", "OwnerUserId": "743382", "Score": "5", "CreationDate": "2012-02-07T21:03:00.453", "LastEditorUserId": "743382"}, "bq_ids": {"n4140": {"so_9183485_9183858_1": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_9183485_9183858_1": {"length": 5, "quality": 1.0, "section_id": 82}}}, "9183620": {"LastActivityDate": "2012-02-07T21:12:31.217", "CommentCount": "4", "Body": "<p>The error says it: the result is not a constant expression (it is known at link time, but not compile time).</p>\n<p>Here is an example that <em>would</em> work:</p>\n<pre><code>typedef const char *nontype_t;\ntemplate &lt;nontype_t&gt; struct Y {};\n\nchar hello[] = \"hello\";\nconstexpr char* world = hello;\n\nint main()\n{\n    Y&lt;hello&gt; a;\n}\n</code></pre>\n", "PostTypeId": "2", "LastEditDate": "2012-02-07T21:12:31.217", "ParentId": "9183485", "Id": "9183620", "OwnerUserId": "85371", "Score": "1", "CreationDate": "2012-02-07T20:46:15.510", "LastEditorUserId": "85371"}, "9183485": {"CreationDate": "2012-02-07T20:37:21.207", "ViewCount": "1626", "FavoriteCount": "2", "Id": "9183485", "AcceptedAnswerId": "9183858", "Score": "7", "Title": "const variable as non-type template parameter (VARIABLE cannot appear in a constant-expression)", "CommentCount": "4", "Body": "<p>Why does this work?</p>\n<pre><code>char __nontype[] = \"foo\";\ntypedef TemplateClass&lt;T, __nontype&gt; MyClass;\n</code></pre>\n<p>But this (with a  constant variable) not?</p>\n<pre><code>const char __nontype[] = \"foo\";\ntypedef TemplateClass&lt;T, __nontype&gt; MyClass;\n</code></pre>\n<p>Compiler Error: </p>\n<p>error: \u2018__nontype\u2019 cannot appear in a constant-expression</p>\n<p>error: template argument 2 is invalid</p>\n", "Tags": "<c++><templates><const>", "LastActivityDate": "2012-02-07T21:35:31.650", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1195640"}});