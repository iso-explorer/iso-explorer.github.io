post_cb({"31571202": {"CommentCount": "2", "ViewCount": "212", "CreationDate": "2015-07-22T18:29:00.673", "LastActivityDate": "2015-07-22T18:51:53.710", "Title": "What is Compiler Generated constructor for abstract class no data members", "AcceptedAnswerId": "31571353", "PostTypeId": "1", "Id": "31571202", "Score": "1", "Body": "<p>I'm running a static analysis tool and getting an error because an abstract class, with no data members, has no constructors.</p>\n<p>Given an abstract class with no data members:</p>\n<pre><code>class My_Interface\n{\n  public:\n    virtual void interface_function(void) = 0;\n};\n</code></pre>\n<ol>\n<li>Are any constructors generated by the compiler?</li>\n<li>If a constructor is generated, what would it's content be?</li>\n<li>If a constructor is generated, would it be eliminated by an\noptimization level?</li>\n</ol>\n<p>The rule documentation in the static analysis says:<br>\n<em>If you do not write at least one constructor in a class, the compiler will\nwrite a public constructor for you by default. This rule detects if you\ndo not declare at least one constructor.</em> </br></p>\n<p>The rule documentation references Scott Meyers, \"Effective C++: 55 Specific Ways to Improve your Programs and Design\", third edition.</p>\n<p>My understanding is that the compiler will not generate constructors for the above case.  </p>\n<p><strong>Edit 1:</strong><br>\nThis is not a duplicate of many constructor questions because:  </br></p>\n<ol>\n<li>This one has no data members.</li>\n<li>This is not asking if a constructor is necessary, but what happens\nwhen a constructor is not provided.  </li>\n<li>This is C++ language.</li>\n</ol>\n", "Tags": "<c++><constructor><abstract-class><language-lawyer><static-analysis>", "OwnerUserId": "225074", "AnswerCount": "3"}, "31571353": {"ParentId": "31571202", "CommentCount": "4", "Body": "<p>The compiler at least theoretically synthesizes a constructor even in this case. Even though you can't create an instance of this class, the constructor will be invoked in the process of creating a derived class (that overrides <code>interface_function</code>, so it can be instantiated).</p>\n<p>Given that this is basically a pure interface class, the constructor probably won't do anything, so most compilers will probably optimize it out (quite possibly even when you don't tell it to optimize the code).</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "31571353", "Score": "1", "CreationDate": "2015-07-22T18:36:59.733", "LastActivityDate": "2015-07-22T18:36:59.733"}, "31571502": {"ParentId": "31571202", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Q1. Are any constructors generated by the compiler?</p>\n<p>Answer: Yes. From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_31571202_31571502_0\"><strong>12.1 Constructors</strong></p>\n<p id=\"so_31571202_31571502_1\">5 A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If\n  there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared\n  as defaulted (8.4). An implicitly-declared default constructor is an <code>inline public</code> member of its class.</p>\n</blockquote>\n<p>I don't see anything in the standard that answers the other two questions. However, in your case, since there is a <code>virtual</code> member function, the default constructor must, at least, set the virtual table of the object.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-07-22T18:51:53.710", "Id": "31571502", "Score": "0", "CreationDate": "2015-07-22T18:44:21.177", "LastActivityDate": "2015-07-22T18:51:53.710"}, "bq_ids": {"n4140": {"so_31571202_31571496_2": {"section_id": 456, "quality": 0.9285714285714286, "length": 26}, "so_31571202_31571496_1": {"section_id": 369, "quality": 0.725, "length": 29}, "so_31571202_31571496_3": {"section_id": 458, "quality": 0.9705882352941176, "length": 33}, "so_31571202_31571502_1": {"section_id": 369, "quality": 0.9615384615384616, "length": 25}}, "n3337": {"so_31571202_31571496_2": {"section_id": 447, "quality": 0.9285714285714286, "length": 26}, "so_31571202_31571496_1": {"section_id": 359, "quality": 0.725, "length": 29}, "so_31571202_31571496_3": {"section_id": 449, "quality": 0.9705882352941176, "length": 33}, "so_31571202_31571502_1": {"section_id": 359, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_31571202_31571496_2": {"section_id": 479, "quality": 0.9642857142857143, "length": 27}, "so_31571202_31571496_1": {"section_id": 381, "quality": 0.75, "length": 30}, "so_31571202_31571496_3": {"section_id": 481, "quality": 1.0, "length": 34}, "so_31571202_31571502_1": {"section_id": 381, "quality": 0.8846153846153846, "length": 23}}}, "31571496": {"ParentId": "31571202", "CommentCount": "0", "Body": "<blockquote id=\"so_31571202_31571496_0\">\n<ol>\n<li>Are any constructors generated by the compiler?</li>\n</ol>\n</blockquote>\n<p>Yes. Several. First, from [class.ctor]:</p>\n<blockquote>\n<p id=\"so_31571202_31571496_1\">A <em>default</em> constructor for a class X is a constructor of class X that either has no parameters or else each\n  parameter that is not a function parameter pack has a default argument. If there is no user-declared constructor\n  for class X, a non-explicit constructor having no parameters is implicitly declared as defaulted (8.4).\n  An implicitly-declared default constructor is an inline public member of its class. A defaulted default\n  constructor for class X is defined as deleted if:</p>\n</blockquote>\n<p>Several bullet points follow, none of which apply. So we have the equivalent of:</p>\n<pre><code>My_Interface() = default;\n</code></pre>\n<p>Then, from [class.copy]:</p>\n<blockquote>\n<p id=\"so_31571202_31571496_2\">If the class definition does not explicitly declare a copy constructor, a non-explicit one is declared implicitly. If the class definition declares a move constructor or move assignment operator, the implicitly declared copy\n  constructor is defined as deleted; otherwise, it is defined as defaulted (8.4).</p>\n</blockquote>\n<p>So we have:</p>\n<pre><code>My_Interface(const My_Interface&amp;) = default;\n</code></pre>\n<p>Also:</p>\n<blockquote>\n<p id=\"so_31571202_31571496_3\">If the definition of a class X does not explicitly declare a move constructor, a non-explicit one will be implicitly\n  declared as defaulted if and only if<br>\n  (9.1) \u2014 X does not have a user-declared copy constructor,<br>\n  (9.2) \u2014 X does not have a user-declared copy assignment operator,<br>\n  (9.3) \u2014 X does not have a user-declared move assignment operator, and<br>\n  (9.4) \u2014 X does not have a user-declared destructor.</br></br></br></br></p>\n</blockquote>\n<p>So we also have:</p>\n<pre><code>My_Interface(My_Interface&amp;&amp; ) = default;\n</code></pre>\n<blockquote id=\"so_31571202_31571496_4\">\n<ol start=\"2\">\n<li>If a constructor is generated, what would it's content be?</li>\n</ol>\n</blockquote>\n<p>All three are generated, all three are <code>= default;</code></p>\n<blockquote id=\"so_31571202_31571496_5\">\n<ol start=\"3\">\n<li>If a constructor is generated, would it be eliminated by an optimization level?</li>\n</ol>\n</blockquote>\n<p>None of the three constructors are <em>trivial</em> because <code>My_Interface</code> has a virtual function. As such, at the very least, the vtable will need to be initialized/copied. So <em>something</em> will have to happen, even if there aren't any members to initialize/copy/move. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "31571496", "Score": "0", "CreationDate": "2015-07-22T18:43:47.380", "LastActivityDate": "2015-07-22T18:43:47.380"}});