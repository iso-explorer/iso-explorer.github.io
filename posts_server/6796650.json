post_cb({"bq_ids": {"n4140": {"so_6796650_6796802_0": {"length": 8, "quality": 1.0, "section_id": 7002}, "so_6796650_6796773_0": {"length": 15, "quality": 1.0, "section_id": 7002}}, "n3337": {"so_6796650_6796802_0": {"length": 8, "quality": 1.0, "section_id": 6748}, "so_6796650_6796773_0": {"length": 15, "quality": 1.0, "section_id": 6748}}, "n4659": {"so_6796650_6796802_0": {"length": 8, "quality": 1.0, "section_id": 8499}, "so_6796650_6796773_0": {"length": 15, "quality": 1.0, "section_id": 8499}}}, "6796802": {"Id": "6796802", "PostTypeId": "2", "Body": "<p><code>2003: 10.3/1</code> states, clearly:</p>\n<blockquote>\n<p id=\"so_6796650_6796802_0\">A class that declares or inherits a virtual function is called a polymorphic class.</p>\n</blockquote>\n<p>You actually said this yourself, word-for-word, so I don't really understand what the question is.</p>\n<p><code>C</code> (and its descendants, if you add any) is polymorphic; <code>A</code> and <code>B</code> are not.</p>\n<hr>\n<p><sup>Note that, in a wider OOP sense, you can always perform <em>some</em> \"polymorphism\" in that C++ always allows you to upcast; thus all objects that inherit can be treated as a different (but related) type.</sup></p>\n<p><sup>However, the term \"polymorphic\" is defined slightly differently in C++, where it has more to do with whether you can <em>downcast</em> as well. If you don't want to be confusing like the C++ standard, you might call this \"dynamic polymorphism\".</sup></p>\n</hr>", "LastEditorUserId": "560648", "LastActivityDate": "2011-07-22T22:40:32.270", "Score": "8", "CreationDate": "2011-07-22T22:35:16.400", "ParentId": "6796650", "CommentCount": "5", "OwnerUserId": "560648", "LastEditDate": "2011-07-22T22:40:32.270"}, "6796650": {"ViewCount": "429", "Body": "<p>In some books there is written that class that declares or inherits a virtual function is called a polymorphic class.</p>\n<p>Class B doesn't have any virtual functions but passes more than one is-a test.</p>\n<p>Class C has one virtual function but doesn't inherit.</p>\n<pre><code>class A {};\nclass B : public A {};\n\nclass C\n{\npublic:\n    virtual void f () {}\n};\n</code></pre>\n<p>is class B or C polymorphic ?</p>\n", "Title": "Polymorphism c++", "CreationDate": "2011-07-22T22:12:31.087", "LastActivityDate": "2012-12-31T14:19:37.353", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-07-22T22:17:52.050", "LastEditorUserId": "166749", "Id": "6796650", "Score": "6", "OwnerUserId": "858741", "Tags": "<c++><oop><polymorphism>", "AnswerCount": "3"}, "6796796": {"Id": "6796796", "PostTypeId": "2", "Body": "<p>Per the standard, \"A class that declares or inherits a virtual function is called a polymorphic class.\"</p>\n<p>Because neither <code>A</code> nor <code>B</code> declare or inherit a virtual function, they are not polymorphic.\n<code>C</code> declares a virtual function, so it is polymorphic.</p>\n", "LastActivityDate": "2011-07-22T22:34:55.657", "CommentCount": "0", "CreationDate": "2011-07-22T22:34:55.657", "ParentId": "6796650", "Score": "3", "OwnerUserId": "102"}, "6796773": {"Id": "6796773", "PostTypeId": "2", "Body": "<p><code>class C</code> is polymorphic, meaning that using <code>dynamic_cast</code> or <code>typeid</code> on a <code>C&amp;</code> will do a runtime type check, and calling member functions through a <code>C&amp;</code> or <code>C*</code> will use virtual dispatch.</p>\n<p>(Of course, the as-if rule allows the compiler to avoid the runtime dispatch under some condition when it knows the runtime type in advance, such as when you just created the object.)</p>\n<hr>\n<p>As @Bill mentioned in a comment, that isn't just what some books say, it's the definition of <em>polymorphic class</em>, found in the C++ standard (section 10.3, <code>[class.virtual]</code>):</p>\n<blockquote>\n<p id=\"so_6796650_6796773_0\">Virtual functions support dynamic binding and object-oriented programming.  <strong>A class that declares or inherits a virtual function is called a <em>polymorphic class</em>.</strong></p>\n</blockquote>\n</hr>", "LastActivityDate": "2011-07-22T22:32:32.350", "CommentCount": "0", "CreationDate": "2011-07-22T22:32:32.350", "ParentId": "6796650", "Score": "2", "OwnerUserId": "103167"}});