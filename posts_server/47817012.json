post_cb({"bq_ids": {"n4140": {"so_47817012_47817138_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 3245}}, "n3337": {"so_47817012_47817138_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 3118}}, "n4659": {"so_47817012_47817138_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 4003}}}, "47817012": {"ViewCount": "249", "Body": "<p>The following code <a href=\"https://godbolt.org/g/NdT26u\" rel=\"noreferrer\">compiles successfully both with <em>clang++ 5.0.0</em> and <em>g++ 7.2</em></a> (with the <code>-std=c++17 -Wall -Wextra -Werror -pedantic-errors -O0</code> compilation flags):</p>\n<pre><code>struct Foo;\n\nstruct Bar\n{\n    Foo get() const;\n\n    void set(Foo);\n};\n\nstruct Foo\n{\n};\n\nFoo Bar::get() const\n{\n    return {};\n}\n\nvoid Bar::set(Foo)\n{\n}\n\n\nint main()\n{\n    Bar bar{};\n\n    (void)bar.get();\n    bar.set(Foo{});\n}\n</code></pre>\n<p>Is it valid to use incomplete types as function parameters and return values? What does the C++ say on it?</p>\n", "Title": "Incomplete types as function parameters and return values", "CreationDate": "2017-12-14T15:34:35.973", "LastActivityDate": "2017-12-19T14:59:10.113", "CommentCount": "3", "LastEditDate": "2017-12-19T14:59:10.113", "PostTypeId": "1", "LastEditorUserId": "3043539", "Id": "47817012", "Score": "7", "OwnerUserId": "3043539", "Tags": "<c++><language-lawyer><c++17><return-type><incomplete-type>", "AnswerCount": "3"}, "47817202": {"Id": "47817202", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47817012_47817202_0\">Is it valid to use incomplete types as function parameters and return values? What does the C++ say on it?</p>\n</blockquote>\n<p>In a function declaration, yes it is valid.</p>\n<p><code>[basic.def.odr]</code> lists situations where a type must be complete. There is no mention of function declarations in that list. Note that function definitions do need the definition for <code>T</code> for argument and return types of <code>T</code>.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2017-12-14T20:49:00.363", "Score": "3", "CreationDate": "2017-12-14T15:44:03.427", "ParentId": "47817012", "CommentCount": "2", "OwnerUserId": "2079303", "LastEditDate": "2017-12-14T20:49:00.363"}, "47854218": {"Id": "47854218", "PostTypeId": "2", "Body": "<p>As far as I know, you can use an incomplete type in the following ways:</p>\n<ol>\n<li>As pointers;</li>\n<li>As reference;</li>\n</ol>\n<p>Because the declaration of the function doesn't create any object, so it is legal.</p>\n", "LastActivityDate": "2017-12-17T10:32:40.630", "Score": "0", "CreationDate": "2017-12-17T10:32:40.630", "ParentId": "47817012", "CommentCount": "0", "OwnerUserId": "8375400"}, "47817138": {"Id": "47817138", "PostTypeId": "2", "Body": "<p>In a function <em>definition</em>, you cannot use incomplete types: <a href=\"http://eel.is/c++draft/dcl.decl#dcl.fct-12\" rel=\"noreferrer\">[dcl.fct]/12</a>:</p>\n<blockquote>\n<p id=\"so_47817012_47817138_0\">The type of a parameter or the return type for a function definition shall not be an incomplete (possibly <em>cv</em>-qualified) class type in the context of the function definition unless the function is deleted.</p>\n</blockquote>\n<p>But a function <em>declaration</em> has no such restriction. By the time you define <code>Bar::get</code> and <code>Bar::set</code>, <code>Foo</code> is a complete type, so the program is fine. </p>\n", "LastActivityDate": "2017-12-14T15:41:11.337", "Score": "8", "CreationDate": "2017-12-14T15:41:11.337", "ParentId": "47817012", "CommentCount": "0", "OwnerUserId": "2069064"}});