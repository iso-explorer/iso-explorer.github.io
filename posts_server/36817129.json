post_cb({"bq_ids": {"n4140": {"so_36817129_36817129_5": {"length": 19, "quality": 0.7037037037037037, "section_id": 391}, "so_36817129_36817129_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 391}, "so_36817129_36817129_3": {"length": 7, "quality": 1.0, "section_id": 391}, "so_36817129_36817129_0": {"length": 7, "quality": 1.0, "section_id": 391}}, "n3337": {"so_36817129_36817129_5": {"length": 19, "quality": 0.7037037037037037, "section_id": 382}, "so_36817129_36817129_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 382}, "so_36817129_36817129_3": {"length": 7, "quality": 1.0, "section_id": 382}, "so_36817129_36817129_0": {"length": 7, "quality": 1.0, "section_id": 382}}, "n4659": {"so_36817129_36817129_5": {"length": 23, "quality": 0.8518518518518519, "section_id": 408}, "so_36817129_36817129_2": {"length": 18, "quality": 0.6666666666666666, "section_id": 408}, "so_36817129_36817129_3": {"length": 7, "quality": 1.0, "section_id": 408}, "so_36817129_36817129_0": {"length": 7, "quality": 1.0, "section_id": 408}}}, "36820120": {"Id": "36820120", "PostTypeId": "2", "Body": "<p>A <em>conversion-type-id</em> contains no <em>decl-specifier-seq</em>; it contains a <em>type-specifier-seq</em>. </p>\n<p>That quote is about this <em>decl-specifier-seq</em> in the conversion function's declaration/definition:</p>\n<pre><code>struct C {\n    constexpr inline explicit operator int() const { return 0; }\n//  ^^^^^^^^^^^^^^^^^^^^^^^^^\n    operator float() const;\n// ^ no decl-specifier-seq here\n};\n</code></pre>\n<p>which, for obvious reasons, cannot contain a <em>defining-type-specifier</em>.</p>\n<p>The point of the change is that it's misleading to say \"no return type can be specified\" when the return type is determined by the <em>conversion-type-id</em>.</p>\n", "LastActivityDate": "2016-04-24T06:45:25.803", "CommentCount": "1", "CreationDate": "2016-04-24T06:45:25.803", "ParentId": "36817129", "Score": "4", "OwnerUserId": "2756719"}, "36817129": {"ViewCount": "104", "Body": "<p>\u00a712.3.2 [class.conv.fct]/1 in C++14:</p>\n<blockquote>\n<p id=\"so_36817129_36817129_0\">A member function of a class X having no parameters with a name of the\n  form</p>\n<p id=\"so_36817129_36817129_1\">\u00a0\u00a0\u00a0\u00a0<em>conversion-function-id</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>operator</strong>\n<em>conversion-type-id</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>conversion-type-id</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>type-specifier-seq</em>\n<em>conversion-declarator</em><sub><em>opt</em></sub><br>\n  \u00a0\u00a0\u00a0\u00a0<em>conversion-declarator</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>ptr-operator</em>\n<em>conversion-declarator</em><sub><em>opt</em></sub> </br></br></br></br></br></p>\n<p id=\"so_36817129_36817129_2\">specifies a conversion from X to the type specified by the\n  <em>conversion-type-id</em>. Such functions are called conversion functions. No return type can be specified. If a conversion function is a member\n  function, the type of the conversion function (8.3.5) is \u201cfunction\n  taking no parameter returning conversion-type-id\u201d. ...</p>\n</blockquote>\n<p>\u00a712.3.2 [class.conv.fct]/1 in C++1z: (the relevant changes are highlighted below)</p>\n<blockquote>\n<p id=\"so_36817129_36817129_3\">A member function of a class X having no parameters with a name of the\n  form</p>\n<p id=\"so_36817129_36817129_4\">\u00a0\u00a0\u00a0\u00a0<em>conversion-function-id</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>operator</strong>\n<em>conversion-type-id</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>conversion-type-id</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>type-specifier-seq</em>\n<em>conversion-declarator</em><sub><em>opt</em></sub><br>\n  \u00a0\u00a0\u00a0\u00a0<em>conversion-declarator</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>ptr-operator</em>\n<em>conversion-declarator</em><sub><em>opt</em></sub> </br></br></br></br></br></p>\n<p id=\"so_36817129_36817129_5\">specifies a conversion from X to the type specified by the <em>conversion-type-id</em>. Such functions are called conversion functions. <strong>A <em>decl-specifier</em> in the <em>decl-specifier-seq</em> of a conversion function (if any) shall be neither\n  a <em>defining-type-specifier</em> nor static</strong>. Type of the conversion function (8.3.5) is \u201cfunction taking no parameter returning <em>conversion-type-id</em>\u201d. ...</p>\n</blockquote>\n<p>I can't think of a conversion function without a <em>decl-specifier-seq</em>, or with a <em>decl-specifier-seq</em> that doesn't contain a <em>defining-type-specifier</em>. As far as I can understand, that would mean a <em>conversion-function-id</em>, whose <em>conversion-type-id</em> doesn't have a type! </p>\n", "AcceptedAnswerId": "36820120", "Title": "\u00a712.3.2 [class.conv.fct]/1 in C++1z changed substantially in relation to C++14. Does it make sense?", "CreationDate": "2016-04-23T22:21:22.643", "Id": "36817129", "CommentCount": "0", "LastEditDate": "2016-04-23T22:34:54.467", "PostTypeId": "1", "LastEditorUserId": "411165", "LastActivityDate": "2016-04-24T06:45:25.803", "Score": "3", "OwnerUserId": "411165", "Tags": "<c++><language-lawyer><c++14><c++1z>", "AnswerCount": "1"}});