post_cb({"37744047": {"CommentCount": "2", "ViewCount": "132", "PostTypeId": "1", "LastEditorUserId": "1812165", "CreationDate": "2016-06-10T08:58:12.040", "LastActivityDate": "2016-06-10T09:35:45.183", "Title": "Class declaration inside function parameter list", "LastEditDate": "2016-06-10T09:35:45.183", "Id": "37744047", "Score": "9", "Body": "<p>As I understand, in C++, a class declared inside function parameter list automatically goes to the enclosing scope:</p>\n<pre><code>void f(struct A *p) {}\n\nvoid g() { A *p; f(p); }\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>struct A;\n\nvoid f(A *p) {}\n\nvoid g() { A *p; f(p); }\n</code></pre>\n<p>What section in C++ standard specifies this behavior? What about C?</p>\n<p>Well, I guess C does not follow C++ in this case. Visual studio does not compile this code is C mode:</p>\n<pre><code>void g(struct A { int a; } a);\n\nstruct A a;     // 'a' uses undefined struct 'A'\n</code></pre>\n", "Tags": "<c++><parameters><language-lawyer>", "OwnerUserId": "1812165", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37744047_37744321_0": {"section_id": 7124, "quality": 0.9285714285714286, "length": 13}, "so_37744047_37744321_2": {"section_id": 7055, "quality": 0.7777777777777778, "length": 7}, "so_37744047_37744321_1": {"section_id": 7124, "quality": 0.8333333333333334, "length": 5}, "so_37744047_37744321_5": {"section_id": 7055, "quality": 1.0, "length": 25}}, "n3337": {"so_37744047_37744321_0": {"section_id": 6868, "quality": 0.9285714285714286, "length": 13}, "so_37744047_37744321_2": {"section_id": 6799, "quality": 0.7777777777777778, "length": 7}, "so_37744047_37744321_1": {"section_id": 6868, "quality": 0.8333333333333334, "length": 5}, "so_37744047_37744321_5": {"section_id": 6799, "quality": 1.0, "length": 25}}, "n4659": {"so_37744047_37744321_0": {"section_id": 8625, "quality": 0.9285714285714286, "length": 13}, "so_37744047_37744321_2": {"section_id": 8552, "quality": 0.7777777777777778, "length": 7}, "so_37744047_37744321_1": {"section_id": 8625, "quality": 0.8333333333333334, "length": 5}, "so_37744047_37744321_5": {"section_id": 8552, "quality": 1.0, "length": 25}}}, "37744321": {"ParentId": "37744047", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is an <em>elaborated-type-specifier</em>. The relevant quote in C++14 is:</p>\n<blockquote>\n<p id=\"so_37744047_37744321_0\"><code>[basic.lookup.elab]/2:</code> [...] If the <em>elaborated-type-specifier</em> is introduced by\n  the <em>class-key</em> and this lookup does not find a previously declared <em>type-name</em>, or if the <em>elaborated-type-specifier</em>\n  appears in a declaration with the form:</p>\n<pre><code>class-key attribute-specifier-seqopt identifier ;\n</code></pre>\n<p id=\"so_37744047_37744321_1\">the <em>elaborated-type-specifier</em> is a declaration that introduces the class-name as described in 3.3.2.</p>\n</blockquote>\n<p>This declares the class name like so:</p>\n<blockquote>\n<p id=\"so_37744047_37744321_2\"><code>[basic.scope.pdecl]/7:</code> The point of declaration of a class first declared in an <em>elaborated-type-specifier</em> is as follows:</p>\n<p id=\"so_37744047_37744321_3\">\u2014 [...]</p>\n<p id=\"so_37744047_37744321_4\">\u2014 for an <em>elaborated-type-specifier</em> of the form</p>\n<pre><code>class-key identifier\n</code></pre>\n<p id=\"so_37744047_37744321_5\">if the <em>elaborated-type-specifier</em> is used in the <em>decl-specifier-seq</em> <strong>or parameter-declaration-clause of a function defined in namespace scope</strong>, the identifier is declared as a class-name in the namespace that\n  contains the declaration; otherwise, except as a friend declaration, the identifier is declared in the\n  smallest namespace or block scope that contains the declaration.</p>\n</blockquote>\n<p>So because <code>struct A</code> is an <em>elaborated-type-specifier</em> and <code>A</code> has not been previously declared, <code>A</code> is declared in the namespace that contains the declaration (in this case, the global namespace).</p>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2016-06-10T09:19:01.163", "Id": "37744321", "Score": "3", "CreationDate": "2016-06-10T09:11:14.800", "LastActivityDate": "2016-06-10T09:19:01.163"}});