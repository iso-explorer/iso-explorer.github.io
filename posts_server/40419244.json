post_cb({"bq_ids": {"n4140": {"so_40419244_40419484_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 5397}}, "n3337": {"so_40419244_40419484_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 5192}}, "n4659": {"so_40419244_40419484_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 6822}}}, "40419484": {"Id": "40419484", "PostTypeId": "2", "Body": "<p>Code that declares the same entity with different linkages is invalid.</p>\n<i>C++11 \u00a77.11/8 (dcl.std/8):</i>\n<blockquote>\n<p id=\"so_40419244_40419484_0\"><strong>\u201d</strong> The linkages implied by successive declarations for a given entity shall agree. That is, within a given scope,\n  each declaration declaring the same variable name or the same overloading of a function name shall imply\n  the same linkage. Each function in a given set of overloaded functions can have a different linkage, however.</p>\n</blockquote>\n<p>For the in-practice, g++ 5.1.4 refuses to compile it, while unfortunately Visual C++ 2015 accepts it as a language extension, with a warning:</p>\n<pre>\n[C:\\my\\forums\\so\\257]\n&gt; <b><i>g++ foo.cpp</i></b>\nfoo.cpp: In function 'imaging::Image* imaging::ReadPPM(const char*)':\nfoo.cpp:9:62: error: 'imaging::Image* imaging::ReadPPM(const char*)' was declared 'extern' and later 'static' [-fpermissive]\n static imaging::Image * imaging::ReadPPM(const char *filename)\n                                                              ^\nfoo.cpp:5:13: note: previous declaration of 'imaging::Image* imaging::ReadPPM(const char*)'\n     Image * ReadPPM(const char * filename);\n             ^\nfoo.cpp: At global scope:\nfoo.cpp:9:54: warning: unused parameter 'filename' [-Wunused-parameter]\n static imaging::Image * imaging::ReadPPM(const char *filename)\n                                                      ^\n\n[C:\\my\\forums\\so\\257]\n&gt; <b><i>cl foo.cpp</i></b>\nfoo.cpp\nfoo.cpp(10): warning C4211: nonstandard extension used: redefined extern to static\nfoo.cpp(9): warning C4100: 'filename': unreferenced formal parameter\nfoo.cpp(9): warning C4505: 'imaging::ReadPPM': unreferenced local function has been removed\n\n[C:\\my\\forums\\so\\257]\n&gt; _\n</pre>\n<p>With a compiler that accepts this with a warning, it can be a good idea to turn that warning into a hard error. With Visual C++ that's option <code>/we4211</code>.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-11-04T09:50:04.340", "Score": "1", "CreationDate": "2016-11-04T09:45:25.717", "ParentId": "40419244", "CommentCount": "5", "LastEditDate": "2016-11-04T09:50:04.340", "OwnerUserId": "464581"}, "40419244": {"ViewCount": "600", "Body": "<p>If i declare a function  in a file named ppmformat.h </p>\n<pre><code>//file ppmformat.h\nnamespace imaging\n{\nImage * ReadPPM(const char * filename);\n} //namespace imaging\n</code></pre>\n<p>... and define it in ppmformat.cpp</p>\n<pre><code>static imaging::Image * imaging::ReadPPM(const char *filename)\n{\n ....\n}\n</code></pre>\n<p>I get the following error:</p>\n<blockquote>\n<p id=\"so_40419244_40419244_0\">'imaging::Image* imaging::ReadPPM(const char*)' was declared 'extern' and later 'static' [-fpermissive]</p>\n</blockquote>\n<pre><code>    //ppmformat.h\n    #ifndef _PPM\n    #define _PPM\n\n    #include \"Image.h\"\n    namespace imaging\n    {\n    /*! Reads a PPM image file and returns a pointer to a newly allocated                  Image object containing the image.\n    *\n    *   \\param filename is the null-terminated string of the name of the  file to open.\n    *\n    *  \\return a pointer to a new Image object, if the read operation was successful, nullptr otherwise.\n    */\n    Image * ReadPPM(const char * filename);\n    } //namespace imaging\n\n    #endif\n\n   //ppmformat.cpp\n   #include &lt;iostream&gt;\n   #include&lt;string.h&gt;\n   #include&lt;stdio.h&gt;\n   #include&lt;stdlib.h&gt;\n   #include &lt;string&gt;\n   #include &lt;fstream&gt;\n   #include \"ppmformat.h\"\n\n   using namespace std;\n\n   imaging::Image * imaging::ReadPPM(const char *filename)\n   {\n   ......\n   }\n\n   //Image.h\n\n   #ifndef _IMAGE\n   #define _IMAGE\n\n   #include \"Color.h\"\n   #include &lt;iostream&gt;\n\n   namespace imaging\n   {\n    class Image\n    {\n    ....\n    }\n   }\n\n  //Image.cpp\n  #include &lt;iostream&gt;\n  #include \"Color.h\"\n  #include \"Image.h\"\n  ....\n  //end of Image.cpp\n\n  //Color.h\n  #ifndef _COLOR\n  #define _COLOR\n  namespace imaging\n  { \n    Class Color\n    {\n    ....\n    }\n  }\n</code></pre>\n", "Title": "error 'extern' and later 'static'", "CreationDate": "2016-11-04T09:33:13.960", "LastActivityDate": "2016-11-04T10:03:26.107", "CommentCount": "6", "LastEditDate": "2016-11-04T10:03:26.107", "PostTypeId": "1", "LastEditorUserId": "6459612", "Id": "40419244", "Score": "0", "OwnerUserId": "6459612", "Tags": "<c++><static><extern>", "AnswerCount": "1"}});