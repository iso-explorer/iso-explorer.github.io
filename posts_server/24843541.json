post_cb({"24844031": {"Id": "24844031", "PostTypeId": "2", "Body": "<p>it is one of c++ traits<br>\nwhen you do an wrong proccess it is Unpredictable</br></p>\n", "LastActivityDate": "2014-07-19T19:13:08.307", "CommentCount": "0", "CreationDate": "2014-07-19T19:13:08.307", "ParentId": "24843541", "Score": "0", "OwnerUserId": "3576334"}, "24843541": {"ViewCount": "69", "Body": "<p>I've been reading about allocation function (sec. 3.7.4.1 of N3797) and I came across with the following:</p>\n<blockquote>\n<p id=\"so_24843541_24843541_0\">Even if the size of the space requested is zero, the request can fail.</p>\n</blockquote>\n<p>It is unclear, because I <a href=\"http://coliru.stacked-crooked.com/a/e7f5b32055d8b914\" rel=\"nofollow\">requested</a> zero size and It works fine. Could you explain the point of that rule?</p>\n", "AcceptedAnswerId": "24843583", "Title": "Allocation request of zero-size", "CreationDate": "2014-07-19T18:18:14.363", "Id": "24843541", "CommentCount": "6", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-07-19T19:13:08.307", "Score": "1", "Tags": "<c++><allocation>", "AnswerCount": "4"}, "24843583": {"Id": "24843583", "PostTypeId": "2", "Body": "<p>The point is the implementation of an allocator is allowed to fail, even if the request size is zero. It doesn't say it has to fail, just that its allowed to fail if for some reason that would be convenient given the allocator's implementation. A typical reason would be that the overhead needed to manage the zero-length-allocation was too large for memory at the present time (say because other allocation had been performed). </p>\n", "LastActivityDate": "2014-07-19T18:22:16.643", "CommentCount": "1", "CreationDate": "2014-07-19T18:22:16.643", "ParentId": "24843541", "Score": "2", "OwnerUserId": "624998"}, "bq_ids": {"n4140": {"so_24843541_24843581_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 6088}, "so_24843541_24843581_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 7177}, "so_24843541_24843541_0": {"length": 8, "quality": 1.0, "section_id": 7177}}, "n3337": {"so_24843541_24843581_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5856}, "so_24843541_24843581_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 6921}, "so_24843541_24843541_0": {"length": 8, "quality": 1.0, "section_id": 6921}}, "n4659": {"so_24843541_24843581_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 7584}, "so_24843541_24843581_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 8685}, "so_24843541_24843541_0": {"length": 8, "quality": 1.0, "section_id": 8685}}}, "24843581": {"Body": "<p>From the standard 5.3.4/7:</p>\n<blockquote>\n<p id=\"so_24843541_24843581_0\">When the value of the expression in a direct-new-declarator is zero,\n  the allocation function is called to allocate an array with no\n  elements.</p>\n</blockquote>\n<p>and from 3.7.3.1/2</p>\n<blockquote>\n<p id=\"so_24843541_24843581_1\">[32. The intent is to have operator new() implementable by calling\n  malloc() or calloc(), so the rules are substantially the same. C++\n  differs from C in requiring a zero request to return a non-null\n  pointer.]</p>\n</blockquote>\n<p>Also to add the operator new is not guaranteed to initialize memory to anything, and the new-expression that allocates an unsigned int without a new-initializer leaves the object with an indeterminate value.</p>\n", "CreationDate": "2014-07-19T18:22:13.757", "ParentId": "24843541", "CommentCount": "1", "LastEditDate": "2014-07-19T18:27:28.983", "PostTypeId": "2", "LastEditorDisplayName": "user3414693", "LastActivityDate": "2014-07-19T18:27:28.983", "LastEditorUserId": "1501794", "Id": "24843581", "OwnerDisplayName": "user3414693", "Score": "0", "OwnerUserId": "1501794"}, "24843907": {"Id": "24843907", "PostTypeId": "2", "Body": "<p>For historical reasons, malloc may return a non-null pointer when zero bytes are requested. <em>MAY.</em> A situation that ends up wanting a zero length array should just set the pointer to nullptr and use that as and indication to not free/delete it.</p>\n", "LastActivityDate": "2014-07-19T19:01:32.930", "CommentCount": "0", "CreationDate": "2014-07-19T19:01:32.930", "ParentId": "24843541", "Score": "0", "OwnerUserId": "3849688"}});