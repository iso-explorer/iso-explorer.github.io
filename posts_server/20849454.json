post_cb({"bq_ids": {"n4140": {"so_20849454_20849500_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 434}, "so_20849454_20849500_5": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_20849454_20849500_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 3286}, "so_20849454_20849500_4": {"length": 11, "quality": 0.7333333333333333, "section_id": 3287}, "so_20849454_20849500_2": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_20849454_20849500_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 426}, "so_20849454_20849500_5": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_20849454_20849500_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 3156}, "so_20849454_20849500_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 3157}, "so_20849454_20849500_2": {"length": 4, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_20849454_20849500_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 452}, "so_20849454_20849500_5": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_20849454_20849500_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 4048}, "so_20849454_20849500_4": {"length": 11, "quality": 0.7333333333333333, "section_id": 4049}}}, "20849490": {"Id": "20849490", "PostTypeId": "2", "Body": "<p>The member initializer <code>_y()</code> has the effect of <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value initialization</a> and initializes <code>_y</code> to zero.</p>\n", "LastActivityDate": "2013-12-30T23:47:51.680", "CommentCount": "0", "CreationDate": "2013-12-30T23:47:51.680", "ParentId": "20849454", "Score": "3", "OwnerUserId": "273767"}, "20849500": {"Id": "20849500", "PostTypeId": "2", "Body": "<p>Constructor initialization lists perform direct-initialization (C++11 \u00a712.6.2/7):</p>\n<blockquote>\n<p id=\"so_20849454_20849500_0\">The expression-list or braced-init-list in a mem-initializer is used to initialize the designated subobject ... according to the initialization rules of 8.5 for direct-initialization.</p>\n</blockquote>\n<p>The initialisation rules state the <code>()</code> will value-initialize an object (\u00a78.5/16):</p>\n<blockquote>\n<p id=\"so_20849454_20849500_1\">If the initializer is (), the object is value-initialized.</p>\n</blockquote>\n<p>To value-initialize a POD type is to zero-initialize it, which means to set its value or its subobjects' values to 0 (\u00a78.5/5):</p>\n<blockquote>\n<p id=\"so_20849454_20849500_2\">To value-initialize an object of type T means:</p>\n<ul>\n<li><p id=\"so_20849454_20849500_3\">if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), <em>[... not a POD]</em></p></li>\n<li><p id=\"so_20849454_20849500_4\">if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, <em>[... not a POD]</em></p></li>\n<li><p id=\"so_20849454_20849500_5\">if T is an array type, then each element is value-initialized;</p></li>\n<li><p id=\"so_20849454_20849500_6\">otherwise, the object is zero-initialized.</p></li>\n</ul>\n</blockquote>\n<p>In the case of an array type, it's only a POD type if its elements are POD types, so they end up being zero-initialized.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-12-30T23:58:34.723", "Score": "2", "CreationDate": "2013-12-30T23:49:31.870", "ParentId": "20849454", "CommentCount": "2", "OwnerUserId": "150634", "LastEditDate": "2013-12-30T23:58:34.723"}, "20849454": {"ViewCount": "349", "Body": "<p>Following is a sample code I cooked up to aid my question:</p>\n<pre><code>class test {\n    public:\n        test(int x, int y) :  _x(x), _y() {}\n\n    private:\n        int _x, _y;\n};\n</code></pre>\n<p>For POD (plain data types), does <code>_y()</code> (empty parenthesis) have any effect?  If so, what is _y getting initialized to?  If no effect, is it inefficient having <code>_y()</code> in the list.</p>\n<p>Thank you,\nAhmed.</p>\n", "AcceptedAnswerId": "20849500", "Title": "Constructor initialization list for POD member types using ()", "CreationDate": "2013-12-30T23:42:44.787", "Id": "20849454", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2014-01-01T13:37:14.390", "LastActivityDate": "2013-12-30T23:58:34.723", "Score": "0", "OwnerUserId": "1348939", "Tags": "<c++><c++11>", "AnswerCount": "2"}});