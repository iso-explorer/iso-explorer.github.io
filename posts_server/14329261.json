post_cb({"14329261": {"CommentCount": "0", "AcceptedAnswerId": "14329360", "PostTypeId": "1", "LastEditorUserId": "511302", "CreationDate": "2013-01-15T00:27:15.723", "LastActivityDate": "2016-06-08T21:46:23.347", "LastEditDate": "2013-01-15T00:43:35.683", "ViewCount": "4372", "FavoriteCount": "3", "Title": "are \"seekp\" & \"seekg\" interchangeable?", "Id": "14329261", "Score": "19", "Body": "<p>Well I just noticed that by changing the position -in microsoft visual studio- through \"seekp\" I implicitelly also change the read-position, when handling files.</p>\n<p>I am wondering however if this is \"portable\" behaviour? Can I expect the position of reading &amp; writing to be always the same? And consequently: will <code>tellp</code> &amp; <code>tellg</code> always return the same value?</p>\n", "Tags": "<c++><position><binaryfiles><fstream>", "OwnerUserId": "511302", "AnswerCount": "2"}, "14329311": {"ParentId": "14329261", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><strong>Update:</strong> So from all the comments and everything, it seems that for fstream, seekp and seekg use the same pointer. But for stringstream and probably other non-file based streams, they are separate.</p>\n<hr>\n<p><strong>Original Post:</strong></p>\n<p>Doesn't work for me on linux with g++ 4.7.2. They seem to be independent:</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nint main(int, char**) {\n    std::stringstream s(\"0123456789\");\n    std::cout &lt;&lt; \"put pointer: \" &lt;&lt; s.tellp() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"get pointer: \" &lt;&lt; s.tellg() &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::endl;\n    s.seekp(2);\n    std::cout &lt;&lt; \"put pointer: \" &lt;&lt; s.tellp() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"get pointer: \" &lt;&lt; s.tellg() &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::endl;\n    s.seekg(4);\n    std::cout &lt;&lt; \"put pointer: \" &lt;&lt; s.tellp() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"get pointer: \" &lt;&lt; s.tellg() &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>put pointer: 0\nget pointer: 0\n\nput pointer: 2\nget pointer: 0\n\nput pointer: 2\nget pointer: 4\n</code></pre>\n<hr>\n<p>Also the behaviour you describe sounds like it doesn't comply with the quotes <a href=\"http://www.cplusplus.com/reference/istream/istream/seekg/\" rel=\"noreferrer\">here</a>: </p>\n<blockquote>\n<p id=\"so_14329261_14329311_0\">Sets the position of the get pointer. The get pointer determines the\n  next location to be read in the source associated to the stream.</p>\n</blockquote>\n<p>and <a href=\"http://www.cplusplus.com/reference/ostream/ostream/seekp/\" rel=\"noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_14329261_14329311_1\">Sets the position of the put pointer. The put pointer determines the location in the\n  output sequence where the next output operation is going to take\n  place.</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "602340", "LastEditorUserId": "602340", "LastEditDate": "2013-01-15T21:50:28.167", "Id": "14329311", "Score": "9", "CreationDate": "2013-01-15T00:34:26.913", "LastActivityDate": "2013-01-15T21:50:28.167"}, "14329360": {"ParentId": "14329261", "CommentCount": "0", "Body": "<p>For <em>file positions</em> they are the same. In other words there is only <strong>one</strong> pointer maintained. </p>\n<p>From <code>27.9.1.1p3</code>:</p>\n<blockquote>\n<p id=\"so_14329261_14329360_0\">A joint file position is maintained for both the input sequence and\n  the output sequence.</p>\n</blockquote>\n<p>So, <code>seekg</code> and <code>seekp</code> are interchangeable for file streams. However, this is not true for other types of streams, as they may hold separate pointers for the put and get positions.</p>\n", "OwnerUserId": "906773", "PostTypeId": "2", "Id": "14329360", "Score": "15", "CreationDate": "2013-01-15T00:40:13.063", "LastActivityDate": "2013-01-15T00:40:13.063"}, "bq_ids": {"n4140": {"so_14329261_14329360_0": {"section_id": 2413, "quality": 1.0, "length": 9}}, "n3337": {"so_14329261_14329360_0": {"section_id": 2398, "quality": 1.0, "length": 9}}, "n4659": {"so_14329261_14329360_0": {"section_id": 2688, "quality": 1.0, "length": 9}}}});