post_cb({"14987847": {"CommentCount": "2", "CreationDate": "2013-02-20T19:00:52.290", "PostTypeId": "1", "AcceptedAnswerId": "14988094", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-23T10:45:58.177", "LastEditDate": "2013-03-23T10:45:58.177", "ViewCount": "973", "FavoriteCount": "1", "Title": "placing objects deriving from tuple into a vector in C++", "Id": "14987847", "Score": "6", "Body": "<p>I want to create a struct with 3 values: a string and two ints.  The string is mandatory, but either (or both) of the ints are optional and can default to -1 if not specified.</p>\n<p>However, rather than use a struct, I thought I would try an std::tuple.  In order to incorporate the optional-ness of the two ints, I setup a \"Trio\" class which inherits from std::tuple as below:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;tuple&gt;\n\nclass Trio : public std::tuple&lt;std::string, int, int&gt;\n{\n    public:\n\n    explicit Trio(std::string const &amp; name, int val1 = -1, int val2 = -1)\n    :\n        tuple(name, val1, val2)\n    {\n    }\n};\n</code></pre>\n<p>Then I go to test the Trio class by pushing some Trio objects into a std::vector:</p>\n<pre><code>#include &lt;vector&gt;\nint main(void)\n{\n    std::vector&lt;Trio&gt; trios;\n\n    Trio trio(\"trio1\", 1, 1);\n    trios.push_back(trio);\n\n    return 0;\n}\n</code></pre>\n<p>It gives me the following error in Visual Studio 2010:</p>\n<pre><code>&gt;c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\tuple(127):\n    error C2664: 'std::basic_string&lt;_Elem,_Traits,_Ax&gt;::basic_string(const\n    std::basic_string&lt;_Elem,_Traits,_Ax&gt; &amp;)' : cannot convert parameter 1\n    from 'const Trio' to 'const std::basic_string&lt;_Elem,_Traits,_Ax&gt; &amp;'\n with\n [\n     _Elem=char,\n     _Traits=std::char_traits&lt;char&gt;,\n     _Ax=std::allocator&lt;char&gt;\n ]\n Reason: cannot convert from 'const Trio' to 'const\n std::basic_string&lt;_Elem,_Traits,_Ax&gt;'\n with\n [\n     _Elem=char,\n     _Traits=std::char_traits&lt;char&gt;,\n     _Ax=std::allocator&lt;char&gt;\n ]\n No user-defined-conversion operator available that can perform\n this conversion, or the operator cannot be called\n</code></pre>\n<p>Does anyone understand what I am doing incorrectly here?  Is there something obvious that I am just not seeing?  Am I, perhaps, severely abusing the usage of std::tuple?</p>\n<p>Thank you,</p>\n<p>Aaron</p>\n", "Tags": "<c++><inheritance><vector><c++11><tuples>", "OwnerUserId": "1899222", "AnswerCount": "2"}, "14988030": {"ParentId": "14987847", "CommentCount": "1", "Body": "<p>Looks like this is just an issue in VS2010. I did not look to see if there is a bug filed about it or not. This will compile in both VS2012 and <a href=\"http://goo.gl/U3GEZ\" rel=\"nofollow\">gcc-4.7.2</a></p>\n", "OwnerUserId": "416574", "PostTypeId": "2", "Id": "14988030", "Score": "1", "CreationDate": "2013-02-20T19:10:59.343", "LastActivityDate": "2013-02-20T19:10:59.343"}, "14988094": {"ParentId": "14987847", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>This is a <strong>bug</strong> of VC10. </p>\n<p>VC10 complains because your class does not <em>seem</em> to have a copy constructor. Therefore, in order to copy values of type <code>Trio</code>, it tries to convert them into <code>string</code>, which is what the constructor you provide accepts (other arguments can be given default values). This is what the error you get complains about:</p>\n<blockquote>\n<p id=\"so_14987847_14988094_0\">cannot convert parameter 1 from 'const Trio' to 'const std::basic_string&lt;_Elem,_Traits,_Ax&gt; &amp;'</p>\n</blockquote>\n<p>You can verify that this is indeed what is going on by adding a copy constructor explicitly and watch the error disappear:</p>\n<pre><code>Trio(Trio const&amp; t) { *this = t; }\n</code></pre>\n<p>Now VC10 is satisfied because it sees a copy constructor, and the code compiles fine.</p>\n<p>Nevertheless, when no copy constructor is explicitly provided by the user, your compiler should generate one implicitly. Per Paragraph 12.8/7 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_14987847_14988094_1\"><strong>If the class definition does not explicitly declare a copy constructor, one is declared implicitly</strong>. If the class definition declares a move constructor or move assignment operator, the implicitly declared copy constructor is defined as deleted; otherwise, it is defined as defaulted (8.4). [...]</p>\n</blockquote>\n<p>Class <code>Trio</code> does not explicitly declare any copy constructor. According to Paragraph 12.8/2 of the C++11 Standard, in fact:</p>\n<blockquote>\n<p id=\"so_14987847_14988094_2\">A non-template constructor for class X is a copy constructor <strong>if its first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile X&amp;</strong>, and either there are no other parameters or else all other parameters have default arguments (8.3.6)</p>\n</blockquote>\n<p>Thus, the constructor you explicitly provide is <em>not</em> a copy constructor and should <em>not</em> inhibit the implicit generation of a copy constructor.</p>\n<p>VC10 probably misinterprets the constructor you provide as a copy constructor and, therefore, does not generate one implicitly. Because of what written above, however, this behavior is a incorrect and qualifies as a <strong>bug</strong>.(*)</p>\n<p>As a side note, your code compiles fine on Clang 3.2, GCC 4.7.2, and ICC 13.0.1.</p>\n<p><strong>UPDATE:</strong></p>\n<p><em>I tried to reproduce the problem with simpler data structures not involving <code>std::tuple&lt;&gt;</code>, and I failed. Therefore, the bug is not simply due to the fact that your constructor is misinterpreted by VC10 as an explicit copy constructor. However, this does not change the fact that VC10's behavior is incorrect.</em></p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-02-20T19:45:57.847", "Id": "14988094", "Score": "8", "CreationDate": "2013-02-20T19:15:55.257", "LastActivityDate": "2013-02-20T19:45:57.847"}, "bq_ids": {"n4140": {"so_14987847_14988094_2": {"section_id": 451, "quality": 0.96, "length": 24}, "so_14987847_14988094_1": {"section_id": 456, "quality": 0.9629629629629629, "length": 26}, "so_14987847_14988094_0": {"section_id": 558, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_14987847_14988094_2": {"section_id": 442, "quality": 0.96, "length": 24}, "so_14987847_14988094_1": {"section_id": 447, "quality": 0.9629629629629629, "length": 26}, "so_14987847_14988094_0": {"section_id": 549, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_14987847_14988094_2": {"section_id": 474, "quality": 0.96, "length": 24}, "so_14987847_14988094_1": {"section_id": 479, "quality": 0.9629629629629629, "length": 26}, "so_14987847_14988094_0": {"section_id": 581, "quality": 0.5714285714285714, "length": 4}}}});