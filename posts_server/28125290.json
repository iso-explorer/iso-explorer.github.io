post_cb({"bq_ids": {"n4140": {"so_28125290_28125378_0": {"length": 18, "quality": 1.0, "section_id": 6254}, "so_28125290_28125378_1": {"length": 18, "quality": 0.75, "section_id": 7146}}, "n3337": {"so_28125290_28125378_0": {"length": 18, "quality": 1.0, "section_id": 6014}, "so_28125290_28125378_1": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}}, "n4659": {"so_28125290_28125378_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7758}, "so_28125290_28125378_1": {"length": 18, "quality": 0.75, "section_id": 8647}}}, "28125378": {"Id": "28125378", "PostTypeId": "2", "Body": "<p>Your lecturer and his book are incorrect/depend on things that were sort of the case 20 years ago.</p>\n<p>Before C++ was standardized in 1998, many compilers (or rather: their library implementations) did in fact know a header <code>&lt;iostream.h&gt;</code> in which several symbols that are in the namespace <code>std</code> in standard C++ existed in the global namespace. Which symbols exactly varied from compiler to compiler, as many things did in those days. These headers were not included in the C++ standard of 1998, and not in any after them. Today, recent compilers will outright reject code that attempts to use them.</p>\n<p>But that will not convince your lecturer that he was wrong these last 15 years, so here's what you can show him (if you believe that doing so will not make you an enemy for life):</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\">This</a> is a link to the last publicly available draft of the C++11 standard, which is the one you can reasonably expect to be able to use today. Open it, go to <strong>page 429</strong> (or search for <strong>[headers]</strong>), see that <code>&lt;iostream&gt;</code> is listed while <code>&lt;iostream.h&gt;</code> is not.</p>\n<p>See at the bottom on <strong>page 428</strong> in <strong>[contents]</strong> that symbols of the standard library are in namespace <code>std</code>:</p>\n<blockquote>\n<p id=\"so_28125290_28125378_0\">All library entities except macros, <code>operator new</code> and <code>operator delete</code> are defined within the namespace <code>std</code> or namespaces nested within namespace <code>std</code>. (...)</p>\n</blockquote>\n<p>Additionally, about the <code>main</code> function, go to <strong>page 61</strong> (or search for <strong>[basic.start.main]</strong>) to see that <code>void main</code> is not allowed:</p>\n<blockquote>\n<p id=\"so_28125290_28125378_1\">An implementation shall not predefine the <code>main</code> function. This function shall not be overloaded. <strong>It shall have a return type of type <code>int</code></strong>, but otherwise its type is imlementation-defined. All implementations shall allow both of the following definitions of <code>main</code>:</p>\n<p id=\"so_28125290_28125378_2\"><code>int main() { /* ... */ }</code></p>\n<p id=\"so_28125290_28125378_3\">and</p>\n<p id=\"so_28125290_28125378_4\"><code>int main(int argc, char *argv[]) { /* ... */ }</code></p>\n<p id=\"so_28125290_28125378_5\">(...)</p>\n</blockquote>\n<p>(Emphasis mine)</p>\n", "LastEditorUserId": "4301306", "LastActivityDate": "2015-01-24T12:29:03.400", "Score": "11", "CreationDate": "2015-01-24T12:18:29.523", "ParentId": "28125290", "CommentCount": "0", "OwnerUserId": "4301306", "LastEditDate": "2015-01-24T12:29:03.400"}, "28125374": {"Id": "28125374", "PostTypeId": "2", "Body": "<p>This book appears to be <em>very</em> outdated. Get a <a href=\"https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\">new one</a>.</p>\n<p>Do not write <code>&lt;iostream.h&gt;</code>, <code>&lt;iostream&gt;</code> is correct (same for all standard headers).</p>\n<p>Do not use <code>using namespace std;</code>, <a href=\"https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\">here</a> is why. Use the fully qualified names like <code>std::cout &lt;&lt; \"Hello World\\n\";</code> instead.</p>\n<p>Your main should either be <code>int main ()</code> or <code>int main (int argc, char **argv)</code>, depending on if you want to handle command line arguments or not.</p>\n<p>Also, do not use TurboC++, it is terribly outdated.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-24T12:18:06.577", "Score": "3", "CreationDate": "2015-01-24T12:18:06.577", "ParentId": "28125290", "CommentCount": "0", "OwnerUserId": "3002139", "LastEditDate": "2017-05-23T11:56:51.053"}, "28125290": {"ViewCount": "159", "Body": "<p>I am a student who is learning C++. I have gone through tutorials in the Internet. All of them do not use a .h extension after some include files, such as</p>\n<pre><code>#include &lt;iostream&gt;\n</code></pre>\n<p>But my C++ lecturer says that I have to include a .h extension after iostream, such as:</p>\n<pre><code>#include &lt;iostream.h&gt;\n</code></pre>\n<p>My book \"The Waite Group's Object Oriented Programming In Turbo C++\" written by Robert Lafore also tells me to put a .h extension after iostream. Both my lecturer and the book says there is no need to have the following line of code when using the cout and cin functions.</p>\n<pre><code>using namespace std;\n</code></pre>\n<p>When using cout and cin functions, the namespace std is needed, right? If I try to do what the book and lecturer tells, my compiler(g++) gives me errors. The book also says to use </p>\n<pre><code>void main()\n</code></pre>\n<p>rather than</p>\n<pre><code>int main()\n</code></pre>\n<p>If I follow what the lecturer or the book says, I get errors during compiling. What is happening? I am using g++ on Linux Mint 17 for compiling.</p>\n", "AcceptedAnswerId": "28125378", "Title": "Using the .h extension", "CreationDate": "2015-01-24T12:05:43.507", "Id": "28125290", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-01-25T04:14:30.770", "LastEditorUserId": "3471459", "LastActivityDate": "2015-01-25T04:14:30.770", "Score": "2", "OwnerUserId": "3471459", "Tags": "<c++><include><g++><header-files><main>", "AnswerCount": "3"}, "28125377": {"Id": "28125377", "PostTypeId": "2", "Body": "<p>According to my knowledge and what my prof told us last time:</p>\n<p>You can choose to or not to include with the <code>.h</code>. The <code>.h</code> are usually older versions.  Once again the using namespace can be optional for you right now. (Does not means this is a good practice, but as a student many schools allowed it.)</p>\n<p>Some books explain with using namespace, some don't.</p>\n<p>So what is the difference of using namespace and not using it?</p>\n<p>Using <code>cout</code> for example. If you used namespace std at the beginning of your codes. You can simply do this:</p>\n<pre><code>cout &lt;&lt; \"hello\" ;\n</code></pre>\n<p>However, if you didn't add the line <code>using namespace std;</code>. You have to write it this way:</p>\n<pre><code>std::cout &lt;&lt; \"hello\";\n</code></pre>\n<p>By the way, we always use <code>int main()</code> in school back then when I was in university. I don't think <code>void main()</code> is a good idea.</p>\n", "LastActivityDate": "2015-01-24T12:18:23.067", "CommentCount": "0", "CreationDate": "2015-01-24T12:18:23.067", "ParentId": "28125290", "Score": "0", "OwnerUserId": "3437460"}});