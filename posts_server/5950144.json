post_cb({"5950176": {"Id": "5950176", "PostTypeId": "2", "Body": "<p><code>x</code> and <code>y</code> are <em>copy-initialized</em> to <code>T</code>'s <em>value-initialized</em> value.</p>\n<p>From the C++03 standard, \u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_5950144_5950176_0\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p>And from \u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_5950144_5950176_1\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a class type with a user-declared constructor, then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of <code>T</code> is value-initialized;</li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n<p id=\"so_5950144_5950176_2\">To <em>zero-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type, the object is set to the value of <code>0</code> (zero) converted to <code>T</code>;</li>\n<li>if <code>T</code> is a non-union class type, each nonstatic data member and each base-class subobject is zero-initialized;</li>\n<li>if <code>T</code> is a union type, the object\u2019s first named data member) is zero-initialized;</li>\n<li>if <code>T</code> is an array type, each element is zero-initialized;</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<hr>\n<p><code>x(T()),y(T())</code> could be replaced with <code>x(),y()</code> to instead value-initialize <code>x</code> and <code>y</code> directly. In most circumstances this will achieve the same net effect (assuming <code>T</code> is copy constructable), but in some cases this will be more efficient, so as a general rule this approach should always be preferred.</p>\n</hr>", "LastEditorUserId": "636019", "LastActivityDate": "2011-05-10T12:56:41.147", "Score": "6", "CreationDate": "2011-05-10T12:41:53.207", "ParentId": "5950144", "CommentCount": "0", "LastEditDate": "2011-05-10T12:56:41.147", "OwnerUserId": "636019"}, "5950164": {"Id": "5950164", "PostTypeId": "2", "Body": "<p>The use of <code>T()</code> in an expression creates an rvalue of type <code>T</code> and <em>value-initializes</em> it. </p>\n<p>If <code>T</code> has a default constructor that constructor will be called, if <code>T</code> is an aggregate type, each one of the attributes will be <em>value-initialized</em>, for <em>primitive</em> types (using <em>primitive</em> in the Java sense: integer, float, double, char, pointers), they will be set to 0.</p>\n", "LastActivityDate": "2011-05-10T12:41:21.080", "Score": "1", "CreationDate": "2011-05-10T12:41:21.080", "ParentId": "5950144", "CommentCount": "0", "OwnerUserId": "36565"}, "5950157": {"Id": "5950157", "PostTypeId": "2", "Body": "<p>An instance (each) of <code>T</code>, built by that type's <a href=\"http://en.wikipedia.org/wiki/Default_constructor\" rel=\"nofollow\">default constructor</a>.</p>\n", "LastActivityDate": "2011-05-10T12:40:52.740", "Score": "3", "CreationDate": "2011-05-10T12:40:52.740", "ParentId": "5950144", "CommentCount": "6", "OwnerUserId": "28169"}, "bq_ids": {"n4140": {"so_5950144_5950176_0": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_5950144_5950176_1": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_5950144_5950176_2": {"length": 4, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_5950144_5950176_0": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_5950144_5950176_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_5950144_5950176_2": {"length": 4, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_5950144_5950176_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "5950192": {"Id": "5950192", "PostTypeId": "2", "Body": "<p>Someone's not realised that you can default-initialise like this:</p>\n<pre><code>VECTOR_2D() : x(), y() {};\n</code></pre>\n<p>So, instead, they're being <em>really verbose</em> by doing something that's a bit like this:</p>\n<pre><code>X x = X();\n</code></pre>\n<p>The pointless copy should be optimised out by any sane compiler, but it's still a bit daft.</p>\n", "LastActivityDate": "2011-05-10T12:43:25.767", "Score": "2", "CreationDate": "2011-05-10T12:43:25.767", "ParentId": "5950144", "CommentCount": "0", "OwnerUserId": "560648"}, "5950144": {"ViewCount": "314", "Body": "<p>I have this snippet:</p>\n<pre><code>template&lt;class T&gt;\nclass VECTOR_2D \n{\npublic:\n    T x,y;\n\n    VECTOR_2D() \n        :x(T()),y(T())\n    {}\n}\n</code></pre>\n<p>What are x and y initialized to in the constructor?</p>\n", "AcceptedAnswerId": "5950176", "Title": "Weird c++ code snippet", "CreationDate": "2011-05-10T12:39:42.033", "Id": "5950144", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-05-10T12:56:41.147", "Score": "4", "OwnerUserId": "183667", "Tags": "<c++>", "AnswerCount": "4"}});