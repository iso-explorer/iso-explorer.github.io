post_cb({"38572483": {"Id": "38572483", "PostTypeId": "2", "Body": "<p>You need to pass a <em>template-argument</em> (in this case, <code>T</code>) to the base <em>template-class</em>.</p>\n<p>Change this</p>\n<pre><code>template&lt;typename T&gt;\nclass NotAbsTotal : public AbsInit&lt;T&gt;, public AbsWork&lt;T&gt;\n{\npublic:\n    T y;\n    NotAbsTotal(int x) : AbsInit&lt;T&gt;(x) // You need to pass the template parameter\n    {};\n};    \n</code></pre>\n", "LastActivityDate": "2016-07-25T16:00:16.667", "CommentCount": "7", "CreationDate": "2016-07-25T16:00:16.667", "ParentId": "38572374", "Score": "2", "OwnerUserId": "1621391"}, "bq_ids": {"n4140": {"so_38572374_38575475_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 195}, "so_38572374_38575475_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 7085}, "so_38572374_38575475_2": {"length": 22, "quality": 0.8461538461538461, "section_id": 190}}, "n3337": {"so_38572374_38575475_0": {"length": 9, "quality": 1.0, "section_id": 189}, "so_38572374_38575475_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 6829}, "so_38572374_38575475_2": {"length": 22, "quality": 0.8461538461538461, "section_id": 184}}, "n4659": {"so_38572374_38575475_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 199}, "so_38572374_38575475_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 8586}, "so_38572374_38575475_2": {"length": 24, "quality": 0.9230769230769231, "section_id": 195}}}, "38572374": {"ViewCount": "340", "Body": "<p>I'm following the example from <a href=\"https://stackoverflow.com/questions/254673/multiple-inheritance-from-two-derived-classes\">here</a>, however I am using templates and calling a constructor of one of the derived classes. The following code works without templates but when included I am not sure why I get the following error: </p>\n<pre><code>: error: no matching function for call to \u2018AbsInit&lt;double&gt;::AbsInit()\u2019\n     NotAbsTotal(int x) : AbsInit(x) {};\n                                   ^\n</code></pre>\n<p>Here is the code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nclass AbsBase\n{\n    virtual void init() = 0;\n    virtual void work() = 0;\n};\n\ntemplate&lt;typename T&gt;\nclass AbsInit : public virtual AbsBase&lt;T&gt;\n{\npublic:\n    int n;\n    AbsInit(int x)\n    {\n        n = x;\n    }\n    void init() {  }\n};\n\ntemplate&lt;typename T&gt;\nclass AbsWork : public virtual AbsBase&lt;T&gt;\n{\n    void work() {  }\n};\n\ntemplate&lt;typename T&gt;\nclass NotAbsTotal : public AbsInit&lt;T&gt;, public AbsWork&lt;T&gt;\n{\npublic:\n    T y;\n    NotAbsTotal(int x) : AbsInit(x) {};\n};    // Nothing, both should be defined\n\n\nint main() {\n  NotAbsTotal&lt;double&gt; foo(10);\n  cout &lt;&lt; foo.n &lt;&lt; endl;\n\n}\n</code></pre>\n", "AcceptedAnswerId": "38572483", "Title": "Multiple Inheritance from two derived classes with templates and constructors", "CreationDate": "2016-07-25T15:54:53.730", "Id": "38572374", "CommentCount": "8", "LastEditDate": "2017-05-23T12:08:03.397", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-26T07:42:33.370", "Score": "4", "OwnerUserId": "848277", "Tags": "<c++><c++14>", "AnswerCount": "2"}, "38575475": {"Id": "38575475", "PostTypeId": "2", "Body": "<p>In the below snippet...</p>\n<pre><code>template&lt;typename T&gt;\nclass NotAbsTotal : public AbsInit&lt;T&gt;\n{\n    NotAbsTotal(int x) : AbsInit(x) {}\n};\n</code></pre>\n<p>... <code>AbsInit&lt;T&gt;</code> is a <a href=\"http://eel.is/c++draft/temp.dep#type-4\" rel=\"nofollow\"><em>dependent base class</em></a>:</p>\n<blockquote>\n<p id=\"so_38572374_38575475_0\">A <em>dependent base class</em> is a base class that is a dependent type and is not the current instantiation.</p>\n</blockquote>\n<p>... and it is attempted to be referred to using an unqualified <a href=\"http://eel.is/c++draft/basic.lookup#3\" rel=\"nofollow\"><em>injected-class-name</em></a> (<code>AbsInit</code>), but:</p>\n<blockquote>\n<p id=\"so_38572374_38575475_1\">The injected-class-name of a class (Clause [<a href=\"http://eel.is/c++draft/class\" rel=\"nofollow\">class</a>]) is also considered to be <strong>a member of that class for the purposes of name hiding and lookup.</strong></p>\n</blockquote>\n<p>... however, <a href=\"http://eel.is/c++draft/temp.dep#3\" rel=\"nofollow\">[temp.dep]/p3</a>:</p>\n<blockquote>\n<p id=\"so_38572374_38575475_2\">In the definition of a class or class template, <strong>the scope of a dependent base class</strong> (<a href=\"http://eel.is/c++draft/temp.dep.type\" rel=\"nofollow\">[temp.dep.type]</a>) <strong>is not examined during unqualified name lookup</strong> either at the point of definition of the class template or member or during an instantiation of the class template or member. [ <em>Example</em>:</p>\n<pre><code>typedef double A;\ntemplate&lt;class T&gt; class B {\n  typedef int A;\n};\ntemplate&lt;class T&gt; struct X : B&lt;T&gt; {\n  A a;              // a has type double\n};\n</code></pre>\n<p id=\"so_38572374_38575475_3\">[...]</p>\n<p id=\"so_38572374_38575475_4\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>As such, <code>AbsInit</code> cannot be bound to an <em>injected-class-name</em> which exists in the scope of <code>AbsInit&lt;T&gt;</code> itself. That name, left alone, is subject to <a href=\"http://eel.is/c++draft/basic.lookup.unqual\" rel=\"nofollow\"><em>unqualified name lookup</em></a>, and refers to a class template found in the global namespace.</p>\n<p>To avoid the error or enforce desired name resolution, append a template argument list to the class template name <code>AbsInit</code>:</p>\n<pre><code>NotAbsTotal(int x) : AbsInit&lt;T&gt;(x) {}\n//                          ~~^\n</code></pre>\n<p>or use a qualified name:</p>\n<pre><code>NotAbsTotal(int x) : NotAbsTotal::AbsInit(x) {}\n//                   ~~~~~~~~~~^\n</code></pre>\n<p>Remark: once the base class is not dependent (i.e., a concrete type is used, e.g., <code>AbsInit&lt;int&gt;</code>), you can use the unqualified form of the injected-class-name.</p>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2016-07-26T07:42:33.370", "Score": "2", "CreationDate": "2016-07-25T18:56:08.800", "ParentId": "38572374", "CommentCount": "0", "OwnerUserId": "3953764", "LastEditDate": "2016-07-26T07:42:33.370"}});