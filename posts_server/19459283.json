post_cb({"bq_ids": {"n4140": {"so_19459283_19459283_4": {"length": 18, "quality": 0.9473684210526315, "section_id": 126}, "so_19459283_19571951_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 353}, "so_19459283_19459283_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 126}, "so_19459283_19459283_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 126}, "so_19459283_19459283_2": {"length": 15, "quality": 1.0, "section_id": 126}, "so_19459283_19459283_1": {"length": 12, "quality": 1.0, "section_id": 126}, "so_19459283_19459283_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 126}}, "n3337": {"so_19459283_19459283_4": {"length": 18, "quality": 0.9473684210526315, "section_id": 120}, "so_19459283_19571951_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 343}, "so_19459283_19459283_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 120}, "so_19459283_19459283_5": {"length": 7, "quality": 1.0, "section_id": 120}, "so_19459283_19459283_2": {"length": 15, "quality": 1.0, "section_id": 120}, "so_19459283_19459283_1": {"length": 12, "quality": 1.0, "section_id": 120}, "so_19459283_19459283_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 120}}, "n4659": {"so_19459283_19459283_4": {"length": 18, "quality": 0.9473684210526315, "section_id": 131}, "so_19459283_19571951_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 363}, "so_19459283_19459283_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 131}, "so_19459283_19459283_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 131}, "so_19459283_19459283_2": {"length": 15, "quality": 1.0, "section_id": 131}, "so_19459283_19459283_1": {"length": 12, "quality": 1.0, "section_id": 131}, "so_19459283_19459283_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 131}}}, "19571951": {"Id": "19571951", "PostTypeId": "2", "Body": "<p>I think that &lt;&gt; is a condition for the deduction to take place, since from 14.8.2.6,</p>\n<blockquote>\n<p id=\"so_19459283_19571951_0\">In a declaration whose declarator-id refers to a specialization of a function template, template argument deduction is performed to identify the specialization to which the declaration refers. Speci\ufb01cally, this is done for explicit instantiations (14.7.2), explicit specializations (14.7.3), and certain friend declarations (14.5.4). </p>\n</blockquote>\n<p>In this case, the declarator-id is not a specialization, therefore, no deduction takes place.</p>\n", "LastEditorUserId": "272733", "LastActivityDate": "2013-10-24T17:17:45.733", "Score": "0", "CreationDate": "2013-10-24T16:52:03.020", "ParentId": "19459283", "CommentCount": "1", "OwnerUserId": "272733", "LastEditDate": "2013-10-24T17:17:45.733"}, "26970457": {"Id": "26970457", "PostTypeId": "2", "Body": "<p>at line //8,\nmodified code as :\n<code>friend void N::test&lt; R&lt;T&gt; &gt;( R&lt;T&gt;&amp;);\n</code><strong>correct too.</strong> </p>\n<pre><code>friend void N::test&lt;R&lt;T&gt;&gt;(const R&lt;T&gt;&amp;);//one type is friend with one type  #1\nfriend void N::test&lt;&gt;(const R&lt;T&gt;&amp;);// one type is friend with one type    #2\n</code></pre>\n<p>I use some code proof that #1 is equal to #2</p>\n<p>At last, I try to answer your question .I am not sure that is right.</p>\n<pre><code> friend void N::test(const R&lt;T&gt;&amp;);\n</code></pre>\n<p>When instantiating the class R, <code>R&lt;T&gt;</code> is a known type . However , the function is </p>\n<p>declared as a friend function and really do not instantiate a function template , then the </p>\n<p>friend function is a function that does not exist . From the point of view of grammar , the</p>\n<p>compiler will prompt you that it is a function rather than a template</p>\n<pre><code>N::test (r);\n</code></pre>\n<p>In this place the function is instantiated, but the compiler does not match with a </p>\n<p>friend before the declaration in R class , because you do not declare as a template in R </p>\n<p>class, you just declare a function.</p>\n", "LastEditorUserId": "2593814", "LastActivityDate": "2014-11-18T09:32:38.290", "Score": "1", "CreationDate": "2014-11-17T10:22:40.347", "ParentId": "19459283", "CommentCount": "0", "OwnerUserId": "2593814", "LastEditDate": "2014-11-18T09:32:38.290"}, "25714313": {"Id": "25714313", "PostTypeId": "2", "Body": "<p>N::test is a templated function that takes a class called <code>T</code>. It does not take a class called <code>R&lt;T&gt;</code>. Change the functions appropriately and it will work.</p>\n<pre><code>namespace N\n{\n    template &lt;class T&gt;\n    void test ( const T &amp; );\n}\n\ntemplate &lt;class T&gt;\nclass R\n{\n    friend void N::test ( const R&lt;T&gt; &amp; );\n    int m;\n};\n\ntemplate &lt;class T&gt;\nvoid N::test ( const T &amp; rec ) { rec.m; }\n\nint main ( )\n{\n    R&lt;int&gt; r;\n    N::test ( r );\n}\n</code></pre>\n", "LastActivityDate": "2014-09-07T20:08:09.387", "CommentCount": "6", "CreationDate": "2014-09-07T20:08:09.387", "ParentId": "19459283", "Score": "0", "OwnerUserId": "3878168"}, "19459283": {"ViewCount": "1285", "Body": "<p>C++03 and C++11 have in the first paragraph of [temp.friend]:</p>\n<p>[Edited quote. First try missed a second difference in wording.]</p>\n<blockquote>\n<p id=\"so_19459283_19459283_0\">For a friend function declaration that is not a template declaration:</p>\n<ol>\n<li><p id=\"so_19459283_19459283_1\">if the name of the friend is a qualified or unqualified <em>template-id</em>, the friend declaration refers to a specialization of a function template, otherwise</p></li>\n<li><p id=\"so_19459283_19459283_2\">if the name of the friend is a <em>qualified-id</em> and a matching nontemplate function is found in the specified class or namespace, the friend declaration refers to that function, otherwise,</p></li>\n<li><p id=\"so_19459283_19459283_3\">[C++03:] if the name of the friend is a <em>qualified-id</em> and a matching specialization of a function template is found in the specified class or namespace, the friend declaration refers to that function template specialization, otherwise,</p>\n<p id=\"so_19459283_19459283_4\">[C++11:] if the name of the friend is a <em>qualified-id</em> and and a matching function template is found in the specified class or namespace, the friend declaration refers to the deduced specialization of that function template, otherwise,</p></li>\n<li><p id=\"so_19459283_19459283_5\">the name shall be an <em>unqualified-id</em> that declares (or redeclares) an ordinary (nontemplate) function.</p></li>\n</ol>\n</blockquote>\n<p>[The change in wording looks like clarification to me.  Though I guess there might be different ways to interpret the C++03 wording about \"finding a specialization in a class or namespace\".]</p>\n<p>I'm curious about that third bullet.  I wrote this code to try to match its requirements, but both g++ 4.8.1 and clang++ 3.4 reject the code, whether with -std=c++03 or -std=c++11:</p>\n<pre><code>template &lt;class T&gt; class R;\nnamespace N {\n    template &lt;class T&gt; void test(const R&lt;T&gt;&amp;);\n}\n\ntemplate &lt;class T&gt;\nclass R {\n    friend void N::test(const R&lt;T&gt;&amp;);  // 8\n    int m;\n};\n\ntemplate &lt;class T&gt;\nvoid N::test(const R&lt;T&gt;&amp; rec) { rec.m; }\n\nint main() {\n    R&lt;int&gt; r;\n    N::test(r);\n}\n</code></pre>\n<p>Of course if I change line 8 to</p>\n<pre><code>friend void N::test&lt;&gt;(const R&lt;T&gt;&amp;);\n</code></pre>\n<p>the first bullet applies and the program is accepted.  g++ prints a helpful warning saying the friend \"declares a non-template function\" and suggesting I might want to do exactly that.  The code would probably get more style points for clarity and safety, too.</p>\n<p>But shouldn't the code above be covered by the third bullet and valid?  The friend declaration is not a template declaration and uses a <em>qualified-id</em> which is not a <em>template-id</em> as the name.  And there is no nontemplate function declaration to match for the second bullet.</p>\n<p>Is this just a compiler bug common to both?  Or have I misunderstood something, and if so, is there an example of a program that does demonstrate that third bullet?</p>\n", "Title": "friend a template specialization without <>", "CreationDate": "2013-10-18T21:25:23.477", "LastActivityDate": "2014-11-18T09:32:38.290", "CommentCount": "11", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2013-10-19T22:06:33.483", "LastEditorUserId": "459640", "Id": "19459283", "Score": "14", "OwnerUserId": "459640", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "3"}});