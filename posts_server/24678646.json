post_cb({"bq_ids": {"n4140": {"so_24678646_24678646_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 7165}}, "n3337": {"so_24678646_24678646_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 6909}}, "n4659": {"so_24678646_24678646_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 8673}}}, "24678646": {"ViewCount": "77", "Body": "<p>I came across the following rule (3.7.1/2 N3797):</p>\n<blockquote>\n<p id=\"so_24678646_24678646_0\">If a variable with static storage duration has initialization or a\n  destructor with side effects, it shall not be eliminated even if it\n  appears to be unused, except that a class object or its copy/move may\n  be eliminated as specified in 12.8.</p>\n</blockquote>\n<p>Is it true that, if we declare a variable with static storage duration, having constructor or destructor with side-effect, then the memory will allocate for that variable even if it is unused?</p>\n<p>In particular, I'm trying to experiment with the following code:</p>\n<pre><code>#include &lt;csignal&gt;\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n\nusing std::cout;\n\nstruct data_member\n{\n    data_member(){ cout &lt;&lt; \"data_member\\n\"; }\n    ~data_member(){ cout &lt;&lt; \"~data_member\\n\"; }\n};\n\nstruct Y\n{\n    static data_member m;\n    Y(){ cout &lt;&lt; \"Y\\n\"; }\n    ~Y(){ cout &lt;&lt; \"~Y\\n\"; }\n};\n\nY y;\n\n\nint main()\n{\n}\n</code></pre>\n<p><a href=\"http://ideone.com/maKW46\" rel=\"nofollow\">IdeOne</a></p>\n<p>Why does data_member object not constructed in the example? </p>\n", "AcceptedAnswerId": "24678770", "Title": "Eliminating of variable with static storage duration", "CreationDate": "2014-07-10T14:03:37.117", "Id": "24678646", "CommentCount": "0", "LastEditDate": "2014-07-10T14:25:11.750", "PostTypeId": "1", "LastEditorDisplayName": "user2953119", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-07-10T14:27:30.770", "Score": "1", "Tags": "<c++><storage-duration>", "AnswerCount": "1"}, "24678770": {"Id": "24678770", "PostTypeId": "2", "Body": "<p>Well, that's what the standard says, so ... yes.</p>\n<p>As always, there's the as-if rule, allowing a compiler to do practically anything, as long as the net effect is the same. I could imagine that if the class is huge data-wise, but the constructor and destructor (and anybody else) do not access that data, the compiler could just call the constructor and destructor in the proper order, without leaving space for the unused data.</p>\n<hr>\n<p>As for your example, you're <em>declaring</em> <code>Y::m</code>, but you never <em>define</em> it. So it doesn't exist. If you tried to access it, you'd get a linker error.</p>\n</hr>", "LastEditorUserId": "1782465", "LastActivityDate": "2014-07-10T14:27:30.770", "Score": "1", "CreationDate": "2014-07-10T14:08:57.677", "ParentId": "24678646", "CommentCount": "6", "OwnerUserId": "1782465", "LastEditDate": "2014-07-10T14:27:30.770"}});