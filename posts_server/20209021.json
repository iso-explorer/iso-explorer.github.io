post_cb({"20209226": {"ParentId": "20209021", "CommentCount": "0", "Body": "<p>Yes (per <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">29.7[atomics.flag] \u00a74</a>):</p>\n<blockquote>\n<p id=\"so_20209021_20209226_0\">The macro <code>ATOMIC_FLAG_INIT</code> shall be defined in such a way that it can be used to initialize an object of type <code>atomic_flag</code> to the clear state. For a static-duration object, that initialization shall be static. It is unspecified whether an uninitialized <code>atomic_flag</code>\n  object has an initial state of set or clear.</p>\n</blockquote>\n", "OwnerUserId": "1139697", "PostTypeId": "2", "Id": "20209226", "Score": "5", "CreationDate": "2013-11-26T05:29:27.263", "LastActivityDate": "2013-11-26T05:29:27.263"}, "20209021": {"CommentCount": "0", "ViewCount": "831", "CreationDate": "2013-11-26T05:12:45.040", "LastActivityDate": "2013-11-26T05:30:44.440", "Title": "what is the difference between using ATOMIC_FLAG_INIT and std::atomic_flag::clear", "AcceptedAnswerId": "20209242", "PostTypeId": "1", "Id": "20209021", "Score": "5", "Body": "<p>Are the following two code snippets the same:</p>\n<pre><code>std::atomic_flag lock = ATOMIC_FLAG_INIT;\n</code></pre>\n<p>and</p>\n<pre><code>std::atomic_flag lock;\nlock.clear();\n</code></pre>\n<p>It seems like the second can allow for lock to be in an unknown state for a few clicks</p>\n<p>Is the first code snippet always going to have a known state?</p>\n", "Tags": "<c++><c++11><atomic>", "OwnerUserId": "2963099", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20209021_20209226_0": {"section_id": 1221, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_20209021_20209226_0": {"section_id": 1219, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_20209021_20209226_0": {"section_id": 1310, "quality": 0.8888888888888888, "length": 24}}}, "20209242": {"ParentId": "20209021", "CommentCount": "0", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/atomic/ATOMIC_FLAG_INIT\"><code>ATOMIC_FLAG_INIT</code></a> is an implementation defined macro that is guaranteed to work in expressions like the one you've posted. It comes in handy for initializing an <code>atomic_flag</code> that you may have defined at namespace scope, for instance. It also guarantees that the flag will be cleared and that if the flag itself has static storage duration, the initialization will also be static.</p>\n<p>The second set of statements is initialization followed by clearing of the flag. Since the state of <code>atomic_flag</code> is unspecified post default construction, it does mean that the flag is in an unspecified state until the <code>clear()</code> has been executed.</p>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "20209242", "Score": "8", "CreationDate": "2013-11-26T05:30:44.440", "LastActivityDate": "2013-11-26T05:30:44.440"}});