post_cb({"10824486": {"ParentId": "10823878", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>According to the C++03 standard, 17.4.1.2.4:</p>\n<blockquote>\n<p id=\"so_10823878_10824486_0\">Except as noted in clauses 18 through 27, the contents of each header cname shall be the same as that of the corresponding header name.h, as specified in ISO/IEC 9899:1990 Programming Languages C (Clause 7), or ISO/IEC:1990 Programming Languages\u2014C AMENDMENT 1: C Integrity, (Clause 7), as appropriate, as if by inclusion. In the C++ Standard Library, however, the declarations and definitions (except for names which are defined as macros in C) are within namespace scope (3.3.5) of the namespace std.</p>\n</blockquote>\n<p>In other words, by choosing to use <code>&lt;cstddef&gt;</code> instead of <code>&lt;stddef.h&gt;</code>, you're specifically asking for the type size_t to be within the namespace std.</p>\n<p>So, here are the choices:</p>\n<ol>\n<li><p>Use <code>&lt;stddef.h&gt;</code> instead, so <code>size_t</code> is in the top-level namespace, as suggested by Jesse Good.</p></li>\n<li><p>Use <code>&lt;cstddef&gt;</code> and use <code>std::size_t</code>.</p></li>\n<li><p>Use <code>&lt;cstddef&gt;</code> and use a using declaration to pull <code>size_t</code> into the top-level namespace, as suggested by cnicutar.</p></li>\n</ol>\n<p>Of course you could rely on the fact that one particular version of one compiler/library/platform lets you get away with it, or write different code for each platform, or wrap the whole thing up with autoconf, or write a code generator or sed-based preprocessor, or whatever\u2026 but why?</p>\n", "OwnerUserId": "908494", "LastEditorUserId": "9530", "LastEditDate": "2012-05-30T21:40:25.260", "Id": "10824486", "Score": "7", "CreationDate": "2012-05-30T21:24:20.783", "LastActivityDate": "2012-05-30T21:40:25.260"}, "10823892": {"ParentId": "10823878", "CommentCount": "9", "Body": "<p>Perhaps saying this somewhere near the top ?</p>\n<pre><code>using std::size_t;\n</code></pre>\n", "OwnerUserId": "714501", "PostTypeId": "2", "Id": "10823892", "Score": "6", "CreationDate": "2012-05-30T20:38:11.357", "LastActivityDate": "2012-05-30T20:38:11.357"}, "10824475": {"ParentId": "10823878", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Use <code>#include &lt;stddef.h&gt;</code>.</p>\n<p>So, what's the difference between <code>#include &lt;stddef.h&gt;</code> and <code>#include &lt;cstddef&gt;</code>?</p>\n<p><code>&lt;cstddef&gt;</code> is a C++ header and is guaranteed to define all symbols in the <code>std</code> namespace and also <em>may</em> define things in the global namespace.</p>\n<p><code>&lt;stddef.h&gt;</code>is a C header and is guaranteed to define all symbols in the global namespace and <em>may</em> also define things in the <code>std</code> namespace.</p>\n<p>So, as you said on Visual Studio, <code>size_t</code> can be used because it injects <code>size_t</code> into the global namespace for you (possibly by already including \"stddef.h\"). If you want that to work on any compiler include <code>stddef.h</code>.</p>\n<p>(However, as a pure C++ fan, I personally prefer <code>std::size_t</code>).</p>\n", "OwnerUserId": "906773", "LastEditorUserId": "9530", "LastEditDate": "2012-05-30T21:39:29.083", "Id": "10824475", "Score": "4", "CreationDate": "2012-05-30T21:23:49.273", "LastActivityDate": "2012-05-30T21:39:29.083"}, "10823878": {"CommentCount": "8", "AcceptedAnswerId": "10824486", "CreationDate": "2012-05-30T20:36:42.943", "LastActivityDate": "2012-05-30T21:40:25.260", "PostTypeId": "1", "ViewCount": "3265", "FavoriteCount": "1", "Title": "size_t on XCode", "Id": "10823878", "Score": "3", "Body": "<p>It seems on XCode I need to use std::size_t instead of just size_t on Visual C++. But this is a pain as I don't really want to have to <code>#include &lt;cstddef&gt;</code> and change every <code>size_t</code> to <code>std::size_t</code> in my code... in my Windows code <code>size_t</code> just works without including any additional files.</p>\n<p>Is there a way to make my existing code work in XCode, (maybe through the .pch file?) or are GCC/MSVC++ fundamentally different in this regard and my code needs to use <code>std::size_t</code> in order to be cross-platform?</p>\n", "Tags": "<c++><xcode><visual-c++><gcc><stl>", "OwnerUserId": "197229", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_10823878_10824486_0": {"section_id": 6259, "quality": 0.5609756097560976, "length": 23}}, "n3337": {"so_10823878_10824486_0": {"section_id": 6019, "quality": 0.5609756097560976, "length": 23}}, "n4659": {"so_10823878_10824486_0": {"section_id": 7763, "quality": 0.5365853658536586, "length": 22}}}});