post_cb({"29761114": {"CommentCount": "2", "ViewCount": "38", "CreationDate": "2015-04-21T01:07:55.267", "LastActivityDate": "2015-04-21T01:32:53.893", "Title": "Sequence-before relation in comma-separated variable definitions", "AcceptedAnswerId": "29761138", "PostTypeId": "1", "Id": "29761114", "Score": "1", "Body": "<p>Let's begin with the following example code:</p>\n<p><code>int a = 0, b = a++, c = a;</code></p>\n<p>Is <code>a++</code> sequenced before <code>a</code> (within <code>c = a</code>)? <code>a++</code> and <code>a</code> seem to qualify as full expressions, and according to <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow\">cppreference</a> (Rule 1), the answer should be positive. But I'm not sure.</p>\n", "Tags": "<c++><order-of-evaluation>", "OwnerUserId": "1348273", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29761114_29761138_1": {"section_id": 3196, "quality": 0.9166666666666666, "length": 11}, "so_29761114_29761138_0": {"section_id": 3196, "quality": 1.0, "length": 8}, "so_29761114_29761138_3": {"section_id": 3196, "quality": 1.0, "length": 4}}, "n3337": {"so_29761114_29761138_1": {"section_id": 3070, "quality": 0.9166666666666666, "length": 11}, "so_29761114_29761138_0": {"section_id": 3070, "quality": 1.0, "length": 8}, "so_29761114_29761138_3": {"section_id": 3070, "quality": 1.0, "length": 4}}, "n4659": {"so_29761114_29761138_1": {"section_id": 3958, "quality": 0.9166666666666666, "length": 11}, "so_29761114_29761138_0": {"section_id": 3958, "quality": 1.0, "length": 8}, "so_29761114_29761138_3": {"section_id": 3958, "quality": 1.0, "length": 4}}}, "29761138": {"ParentId": "29761114", "LastEditDate": "2017-05-23T11:51:05.460", "CommentCount": "4", "CreationDate": "2015-04-21T01:10:22.223", "OwnerUserId": "2069064", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "29761138", "Score": "2", "Body": "<p>Yes. As <a href=\"https://stackoverflow.com/questions/29761114/sequence-before-relation-in-comma-separated-variable-definitions#comment47654594_29761138\">Brian</a> points out, this is not a comma operator, but rather an <em>init-declarator-list</em>. From [dcl.decl] we have:</p>\n<blockquote>\n<p id=\"so_29761114_29761138_0\">Each <em>init-declarator</em> in a declaration is analyzed separately as if it was in a declaration by itself.</p>\n</blockquote>\n<p>With a footnote which clarifies:</p>\n<blockquote>\n<p id=\"so_29761114_29761138_1\">A declaration with several declarators is usually equivalent to the corresponding sequence of declarations each with a single\n  declarator. That is  </p>\n<pre><code>T D1, D2, ... Dn;\n</code></pre>\n<p id=\"so_29761114_29761138_2\">is usually equivalent to</p>\n<pre><code>T D1; T D2; ... T Dn;\n</code></pre>\n<p id=\"so_29761114_29761138_3\">where <code>T</code> is a <em>decl-specifier-seq</em> and each <code>Di</code> is an <em>init-declarator</em>.</p>\n</blockquote>\n<p>There are two exceptions, one for a name hiding a type and one for <code>auto</code>, neither of which apply. So ultimately, the code you have is exactly equivalent to:</p>\n<pre><code>int a = 0;\nint b = a++;\nint c = a;\n</code></pre>\n<p>Which you should prefer to write in the first place since it doesn't take searching through the standard to ensure that you're doing something valid!</p>\n", "LastActivityDate": "2015-04-21T01:32:53.893"}});