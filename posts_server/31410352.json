post_cb({"31410483": {"ParentId": "31410352", "CommentCount": "0", "Body": "<p>Yes, it's explicitly allowed. C++14 (n4140) 20.8.1/5:</p>\n<blockquote>\n<p id=\"so_31410352_31410483_0\">... The template parameter <code>T</code> of <code>unique_ptr</code> may be an incomplete type.</p>\n</blockquote>\n<p>It is also allowed for <code>std::shared_ptr</code> and <code>std::weak_ptr</code>, using similar wording.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "31410483", "Score": "4", "CreationDate": "2015-07-14T15:09:34.237", "LastActivityDate": "2015-07-14T15:09:34.237"}, "31410414": {"ParentId": "31410352", "CommentCount": "1", "Body": "<p>Sure it's allowed. This basically an implementation of some kind of <em>path</em>.</p>\n", "OwnerUserId": "4718420", "PostTypeId": "2", "Id": "31410414", "Score": "0", "CreationDate": "2015-07-14T15:06:59.847", "LastActivityDate": "2015-07-14T15:06:59.847"}, "31410352": {"CommentCount": "1", "ViewCount": "160", "PostTypeId": "1", "LastEditorUserId": "1782465", "CreationDate": "2015-07-14T15:03:38.277", "LastActivityDate": "2015-07-14T15:11:55.157", "Title": "std::unique_ptr structure member to the structure type", "AcceptedAnswerId": "31410483", "LastEditDate": "2015-07-14T15:11:03.783", "Id": "31410352", "Score": "5", "Body": "<p>Is</p>\n<pre><code>struct A\n{\n    std::unique_ptr&lt;A&gt; a;\n};\n</code></pre>\n<p>allowed by the standard? I don't think it is for container types like <code>std::set</code> but is there something <em>special</em> about <code>unique_ptr</code>?</p>\n", "Tags": "<c++><unique-ptr>", "OwnerUserId": "3415258", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31410352_31410483_0": {"section_id": 4280, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_31410352_31410483_0": {"section_id": 4121, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_31410352_31410483_0": {"section_id": 5536, "quality": 0.8571428571428571, "length": 6}}}, "31410538": {"ParentId": "31410352", "CommentCount": "0", "Body": "<p>According to this <strong><a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr\" rel=\"nofollow\">reference</a></strong>:</p>\n<blockquote>\n<p id=\"so_31410352_31410538_0\">std::unique_ptr may be constructed for an incomplete type T, such as\n  to facilitate the use as a handle in the Pimpl idiom. If the default\n  deleter is used, T must be complete at the point in code where the\n  deleter is invoked, which happens in the destructor, move assignment\n  operator, and reset member function of std::unique_ptr.</p>\n</blockquote>\n<p>So yes <code>std::unique_ptr</code> can be used in this way.</p>\n", "OwnerUserId": "3807729", "PostTypeId": "2", "Id": "31410538", "Score": "0", "CreationDate": "2015-07-14T15:11:55.157", "LastActivityDate": "2015-07-14T15:11:55.157"}});