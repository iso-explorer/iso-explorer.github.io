post_cb({"bq_ids": {"n4140": {"so_2169932_2170050_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 603}, "so_2169932_2170050_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 562}, "so_2169932_2170050_4": {"length": 21, "quality": 0.75, "section_id": 639}, "so_2169932_2170050_2": {"length": 13, "quality": 1.0, "section_id": 639}, "so_2169932_2170050_1": {"length": 19, "quality": 0.95, "section_id": 626}}, "n3337": {"so_2169932_2170050_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 593}, "so_2169932_2170050_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 553}, "so_2169932_2170050_4": {"length": 21, "quality": 0.75, "section_id": 629}, "so_2169932_2170050_2": {"length": 13, "quality": 1.0, "section_id": 629}, "so_2169932_2170050_1": {"length": 19, "quality": 0.95, "section_id": 616}}, "n4659": {"so_2169932_2170050_3": {"length": 8, "quality": 0.8888888888888888, "section_id": 629}, "so_2169932_2170050_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 585}, "so_2169932_2170050_4": {"length": 21, "quality": 0.75, "section_id": 667}, "so_2169932_2170050_2": {"length": 13, "quality": 1.0, "section_id": 667}, "so_2169932_2170050_1": {"length": 17, "quality": 0.85, "section_id": 652}}}, "2169932": {"ViewCount": "1060", "Body": "<p>\u00a73.10 section 9 says \"non-class rvalues always have cv-unqualified types\". That made me wonder...</p>\n<pre><code>int foo()\n{\n    return 5;\n}\n\nconst int bar()\n{\n    return 5;\n}\n\nvoid pass_int(int&amp;&amp; i)\n{\n    std::cout &lt;&lt; \"rvalue\\n\";\n}\n\nvoid pass_int(const int&amp;&amp; i)\n{\n    std::cout &lt;&lt; \"const rvalue\\n\";\n}\n\nint main()\n{\n    pass_int(foo()); // prints \"rvalue\"\n    pass_int(bar()); // prints \"const rvalue\"\n}\n</code></pre>\n<p>According to the standard, there is no such thing as a const rvalue for non-class types, yet <code>bar()</code> prefers to bind to <code>const int&amp;&amp;</code>. Is this a compiler bug?</p>\n<p>EDIT: Apparently, <code>this</code> is also a const rvalue :)</p>\n<p>EDIT: This issue seems to be fixed in g++ 4.5.0, both lines print \"rvalue\" now.</p>\n", "AcceptedAnswerId": "2170078", "Title": "non-class rvalues always have cv-unqualified types", "CreationDate": "2010-01-30T23:31:52.680", "Id": "2169932", "CommentCount": "5", "FavoriteCount": "11", "PostTypeId": "1", "LastEditDate": "2012-05-30T06:26:00.803", "LastEditorUserId": "500104", "LastActivityDate": "2012-05-30T06:26:00.803", "Score": "33", "OwnerUserId": "252000", "Tags": "<c++><c++11><rvalue-reference><rvalue>", "AnswerCount": "2"}, "2170050": {"Id": "2170050", "PostTypeId": "2", "Body": "<p>Good point. I guess there are two things to look at: 1) as you pointed out the non-class rvalue thingsy and 2) how overload resolution works:</p>\n<blockquote>\n<p id=\"so_2169932_2170050_0\">The selection criteria for the best\n  function are the number of arguments,\n  how well the arguments match the\n  parameter-type-list of the candidate\n  function, [...]</p>\n</blockquote>\n<p>I haven't seen anything in the standard that tells me non-class rvalues are treated specially during overload resolution.</p>\n<p>Your question is covered in the draft of the standard I have though (N-4411) somewhat:</p>\n<p>What does come into play is however a parallel reading of reference binding, implicit conversion sequences, references, and overload resolution in general:</p>\n<p><strong>13.3.3.1.4 Reference binding</strong></p>\n<blockquote>\n<p id=\"so_2169932_2170050_1\">2 When a parameter of reference type\n  is not bound directly to an argument\n  expression, the conversion sequence\n      is the one required to convert the argument expression to the underlying\n  type of the reference according\n      to 13.3.3.1.</p>\n</blockquote>\n<p>and</p>\n<p><strong>13.3.3.2 Ranking implicit conversion sequences</strong></p>\n<blockquote>\n<p id=\"so_2169932_2170050_2\">3 Two implicit conversion sequences of\n  the same form are indistinguishable\n  conversion sequences unless one of the\n  following rules applies:</p>\n<p id=\"so_2169932_2170050_3\">\u2014 Standard conversion sequence S1 is a better conversion sequence than\n  standard<br>\n         conversion sequence S2 if</br></p>\n<p id=\"so_2169932_2170050_4\">\u2014 S1 and S2 are reference bindings (8.5.3) and neither refers to an\n  implicit object parameter of a\n  nonstatic\n      member function declared without a ref-qualifier, and either S1 binds an\n  lvalue reference\n      to an lvalue and S2 binds an rvalue reference or S1 binds an rvalue\n  reference to an rvalue and S2\n      binds an lvalue reference.</p>\n<p id=\"so_2169932_2170050_5\">[ Example:</p>\n</blockquote>\n<pre><code>int i;\nint f();\nint g(const int&amp;);\nint g(const int&amp;&amp;);\nint j = g(i); // calls g(const int&amp;)\nint k = g(f()); // calls g(const int&amp;&amp;)\n</code></pre>\n", "LastActivityDate": "2010-01-31T00:16:24.547", "CommentCount": "0", "CreationDate": "2010-01-31T00:16:24.547", "ParentId": "2169932", "Score": "2", "OwnerUserId": "66692"}, "2170078": {"Id": "2170078", "PostTypeId": "2", "Body": "<p>The committee already seems to be aware that there's a problem in this part of the standard. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#690\" rel=\"noreferrer\">CWG issue 690</a> talks about a somewhat similar problem with exactly the same part of the standard (in the \"additional note\" from September, 2009). I'd guess new language will be drafted for that part of the standard soon.</p>\n<p>Edit: I've just submitted a post on comp.std.c++, noting the problem and suggesting new wording for the relevant piece of the standard. Unfortunately, being a moderated newsgroup, nearly everybody will probably have forgotten this question by the time it makes it through the approval queue there.</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2010-01-31T01:03:45.720", "Score": "11", "CreationDate": "2010-01-31T00:27:22.043", "ParentId": "2169932", "CommentCount": "6", "OwnerUserId": "179910", "LastEditDate": "2010-01-31T01:03:45.720"}});