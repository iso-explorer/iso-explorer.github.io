post_cb({"42858048": {"CommentCount": "10", "AcceptedAnswerId": "42858714", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-03-17T12:50:05.057", "LastActivityDate": "2017-03-17T13:40:03.763", "LastEditDate": "2017-05-23T12:10:17.723", "ViewCount": "812", "FavoriteCount": "3", "Title": "How do I use a preprocessor macro inside an include?", "Id": "42858048", "Score": "10", "Body": "<p>I am trying to build <a href=\"https://www.freetype.org/\" rel=\"nofollow noreferrer\">freetype2</a> using my own build system (I do not want to use Jam, and I am prepared to put the time into figuring it out). I found something odd in the headers. Freetype defines macros like this: </p>\n<pre><code>#define FT_CID_H  &lt;freetype/ftcid.h&gt;\n</code></pre>\n<p>and then uses them later like this: </p>\n<pre><code>#include FT_CID_H \n</code></pre>\n<p>I didn't think that this was possible, and indeed Clang 3.9.1 complains: </p>\n<pre><code>error: expected \"FILENAME\" or &lt;FILENAME&gt;\n#include FT_CID_H\n</code></pre>\n<ul>\n<li>What is the rationale behind these macros? </li>\n<li>Is this valid C/C++? </li>\n<li>How can I convince Clang to parse these headers? </li>\n</ul>\n<hr>\n<p>This is related to <a href=\"https://stackoverflow.com/questions/40062883/how-to-use-a-macro-in-an-include-directive/40063340#40063340\">How to use a macro in an #include directive?</a> but different because the question here is about compiling freetype, not writing new code. </p>\n</hr>", "Tags": "<c++><c><preprocessor><freetype2>", "OwnerUserId": "1256041", "AnswerCount": "2"}, "42858417": {"ParentId": "42858048", "CommentCount": "0", "Body": "<p>I will address your three questions out of order.</p>\n<blockquote>\n<p id=\"so_42858048_42858417_0\"><strong>Question 2</strong></p>\n<p id=\"so_42858048_42858417_1\">Is this valid C/C++?</p>\n</blockquote>\n<p>Yes, this is indeed valid. Macro expansion can be used to produce the final version of a <code>#include</code> directive. Quoting C++14 (N4140) [cpp.include] 16.2/4:</p>\n<blockquote>\n<p id=\"so_42858048_42858417_2\">A preprocessing directive of the form</p>\n<pre><code># include pp-tokens new-line\n</code></pre>\n<p id=\"so_42858048_42858417_3\">(that does not match one of the two previous forms) is permitted. The preprocessing tokens after <code>include</code>\n  in the directive are processed just as in normal text (i.e., each identifier currently defined as a macro name is\n  replaced by its replacement list of preprocessing tokens). If the directive resulting after all replacements does\n  not match one of the two previous forms, the behavior is undefined.</p>\n</blockquote>\n<p>The \"previous forms\" mentioned are <code>#include \"...\"</code> and <code>#include &lt;...&gt;</code>. So yes, it is legal to use a macro which expands to the header/file to include.</p>\n<blockquote>\n<p id=\"so_42858048_42858417_4\"><strong>Question 1</strong></p>\n<p id=\"so_42858048_42858417_5\">What is the rationale behind these macros?</p>\n</blockquote>\n<p>I have no idea, as I've never used the freetype2 library. That would be a question best answered by its support channels or community.</p>\n<blockquote>\n<p id=\"so_42858048_42858417_6\"><strong>Question 3</strong></p>\n<p id=\"so_42858048_42858417_7\">How can I convince Clang to parse these headers?</p>\n</blockquote>\n<p>Since this is legal C++, you shouldn't have to do anything. Indeed, user @Fanael has <a href=\"https://godbolt.org/g/2DiIL0\" rel=\"noreferrer\">demonstrated</a> that Clang is capable of parsing such code. There must be some problem other problem in your setup or something else you haven't shown.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "42858417", "Score": "11", "CreationDate": "2017-03-17T13:08:46.793", "LastActivityDate": "2017-03-17T13:08:46.793"}, "42858714": {"ParentId": "42858048", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_42858048_42858714_0\">Is this valid C/C++?</p>\n</blockquote>\n<p>The usage is valid C, <em>provided that</em> the macro definition is in scope at the point where the <code>#include</code> directive appears.  Specifically, <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.10.2p4\" rel=\"noreferrer\">paragraph 6.10.2/4 of C11</a> says</p>\n<blockquote>\n<p id=\"so_42858048_42858714_1\">A preprocessing directive of the form</p>\n<pre><code># include pp-tokens new-line\n</code></pre>\n<p id=\"so_42858048_42858714_2\">(that does not match one of the two previous forms) is permitted. The\n  preprocessing tokens after include in the directive are processed just\n  as in normal text. (<strong>Each identifier currently defined as a macro name\n  is replaced by its replacement list of preprocessing tokens.</strong>) The\n  directive resulting after all replacements shall match one of the two\n  previous forms.</p>\n</blockquote>\n<p>(Emphasis added.)  Inasmuch as the preprocessor has the same semantics in C++ as in C, to the best of my knowledge, the usage is also valid in C++.</p>\n<blockquote>\n<p id=\"so_42858048_42858714_3\">What is the rationale behind these macros?</p>\n</blockquote>\n<p>I presume it is intended to provide for indirection of the header name or location (by providing alternative definitions of the macro).</p>\n<blockquote>\n<p id=\"so_42858048_42858714_4\">How can I convince Clang to parse these headers?</p>\n</blockquote>\n<p>Provided, again, that the macro definition is in scope at the point where the <code>#include</code> directive appears, you shouldn't have to do anything.  If indeed it is, then Clang is buggy in this regard.  In that case, after filing a bug report (if this issue is not already known), you probably need to expand the troublesome macro references manually.</p>\n<p>But before you do that, be sure that the macro definitions really are in scope.  In particular, they may be guarded by conditional compilation directives -- in that case, the best course of action would probably be to provide whatever macro definition is needed (via the compiler command line) to satisfy the condition.  If you are expected to do this manually, then surely the build documentation discusses it.  Read the build instructions.</p>\n", "OwnerUserId": "2402272", "PostTypeId": "2", "Id": "42858714", "Score": "6", "CreationDate": "2017-03-17T13:23:41.120", "LastActivityDate": "2017-03-17T13:23:41.120"}, "bq_ids": {"n4140": {"so_42858048_42858714_2": {"section_id": 506, "quality": 0.925, "length": 37}, "so_42858048_42858417_3": {"section_id": 506, "quality": 0.9761904761904762, "length": 41}}, "n3337": {"so_42858048_42858714_2": {"section_id": 497, "quality": 0.95, "length": 38}, "so_42858048_42858417_3": {"section_id": 497, "quality": 0.9523809523809523, "length": 40}}, "n4659": {"so_42858048_42858714_2": {"section_id": 527, "quality": 0.925, "length": 37}, "so_42858048_42858417_3": {"section_id": 527, "quality": 0.9761904761904762, "length": 41}}}});