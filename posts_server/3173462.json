post_cb({"3173462": {"CommentCount": "9", "ViewCount": "2163", "PostTypeId": "1", "LastEditorUserId": "309308", "CreationDate": "2010-07-04T01:57:52.887", "LastActivityDate": "2013-01-17T21:35:37.107", "Title": "int var = 1; void main() { int i = i; }", "LastEditDate": "2010-07-04T02:09:04.593", "Id": "3173462", "Score": "3", "Body": "<p>This is an interview question that I had:</p>\n<pre><code>int var = 1;\nvoid main()\n{\n    int i = i;\n}\n</code></pre>\n<p>What is the value of <code>i</code> after assignment?   It is really compiler dependent or is it just undefined?  My g++ on cygwin seems to give me 0 all the time.</p>\n<p>Thanks</p>\n", "Tags": "<c++>", "OwnerUserId": "382499", "AnswerCount": "4"}, "3173478": {"ParentId": "3173462", "CommentCount": "0", "Body": "<p>If you really meant the code you said, it's undefined, since <code>int i = i;</code> is the same as just doing <code>int i;</code>, which leaves it uninitialized. However, you probably meant:</p>\n<pre><code>int i = 1;\nvoid main() {\n    int i = i;\n}\n</code></pre>\n<p><code>i</code> is still undefined in the local scope, although the question is at least slightly more interesting. The local <code>i</code> shadows the global one as soon as it's defined, so by the time the assignment happens the local definition already exists, and the right-hand side <code>i</code> refers to the <code>i</code> defined within <code>main</code>, not the global one. If it didn't removing the global <code>int i = 1;</code> would cause a compile error, as <code>int i = i;</code> would refer to an <code>i</code> that doesn't exist yet</p>\n", "OwnerUserId": "309308", "PostTypeId": "2", "Id": "3173478", "Score": "3", "CreationDate": "2010-07-04T02:07:18.827", "LastActivityDate": "2010-07-04T02:07:18.827"}, "3173540": {"ParentId": "3173462", "CommentCount": "3", "Body": "<p>Why should i have any value at all here, even undefined?  The assignment does nothing, it could be optimized out entirely.</p>\n", "OwnerUserId": "10659", "PostTypeId": "2", "Id": "3173540", "Score": "0", "CreationDate": "2010-07-04T02:34:22.063", "LastActivityDate": "2010-07-04T02:34:22.063"}, "14388554": {"ParentId": "3173462", "CommentCount": "0", "Body": "<p>I had the same interview question and I can confirm that it was indeed int var = 1;</p>\n<p>Which implies that that does make some difference. I would run the code but I'm not at my PC right now.</p>\n<p>I agree that questions like these are daft for interviews. By analogy it's like if someone is interviewing for a job as a chef and the question is \"If you fed someone a spoonful of e coli, drizzled with typhoid, how sick would they get?\". \nYou're unlikely to ever need that knowledge in the job. </p>\n", "OwnerUserId": "572658", "PostTypeId": "2", "Id": "14388554", "Score": "0", "CreationDate": "2013-01-17T21:35:37.107", "LastActivityDate": "2013-01-17T21:35:37.107"}, "3173477": {"ParentId": "3173462", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><code>i</code> has an indeterminate value because it is not initialized.  So not only is it compiler dependent but it is dependent on whatever happens to be in that memory location. Variables in local scope are not initialized in C++. </p>\n<p>I assume instead of <code>int var = 1;</code> at the top you meant <code>int i = 1;</code>.</p>\n<p>The local scope <code>i</code> will still be used because the point of declaration for a variable is immediately after its declarator and before its initializer.</p>\n<p>More specifically, Section 3.3.1-1 of the C++03 standard:</p>\n<blockquote>\n<p id=\"so_3173462_3173477_0\">The point of declaration for a name is\n  immediately after its complete\n  declarator (clause 8) and before its\n  initializer (if any), except as noted\n  below.\n  [Example:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_3173462_3173477_1\">Here the second x is initialized with its own (indeterminate) value. ]</p>\n</blockquote>\n<hr>\n<p>On a side note I don't think this is a very good interview question because it is related to knowing some obscure fact about the language which doesn't say anything about your coding experience. </p>\n</hr>", "OwnerUserId": "3153", "LastEditorUserId": "3153", "LastEditDate": "2010-07-04T02:11:52.693", "Id": "3173477", "Score": "14", "CreationDate": "2010-07-04T02:06:51.143", "LastActivityDate": "2010-07-04T02:11:52.693"}, "bq_ids": {"n4140": {"so_3173462_3173477_1": {"section_id": 7049, "quality": 1.0, "length": 7}, "so_3173462_3173477_0": {"section_id": 7049, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_3173462_3173477_1": {"section_id": 6794, "quality": 1.0, "length": 7}, "so_3173462_3173477_0": {"section_id": 6794, "quality": 0.7647058823529411, "length": 13}}, "n4659": {"so_3173462_3173477_1": {"section_id": 8546, "quality": 1.0, "length": 7}, "so_3173462_3173477_0": {"section_id": 8546, "quality": 0.7647058823529411, "length": 13}}}});