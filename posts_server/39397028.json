post_cb({"39397028": {"CommentCount": "0", "AcceptedAnswerId": "39397307", "CreationDate": "2016-09-08T17:32:29.737", "LastActivityDate": "2016-09-08T17:52:09.247", "PostTypeId": "1", "ViewCount": "115", "FavoriteCount": "1", "Title": "Are static data members safe as C++ default arguments?", "Id": "39397028", "Score": "4", "Body": "<p>Do I need to worry about the <a href=\"https://isocpp.org/wiki/faq/ctors#static-init-order\" rel=\"nofollow\">static initialization order fiasco</a> when using a static data member as a default argument value?  For example:</p>\n<pre><code>class Thing {\n\n    static double const default_blarg;  // initialized in another file\n\n    void run(double blarg=default_blarg);\n\n};\n</code></pre>\n<p>I know <code>default_blarg</code> will be initialized at a mostly-unspecified point at link time, but I'm not sure when the default argument to <code>run</code> is initialized.  If it's at some point that could be before <code>default_blarg</code> is initialized, what approach could I use to safely expose the default value as part of the class interface without repeating it?  Would using <code>constexpr</code> for the static data member make it safe?</p>\n<p>Note that I'm aware that this could yield some very confusing behavior if <code>default_blarg</code> wasn't const (that's why it is), and I'm not trying to use a non-static data member.</p>\n", "Tags": "<c++><initialization>", "OwnerUserId": "1391611", "AnswerCount": "2"}, "39397307": {"ParentId": "39397028", "CommentCount": "0", "Body": "<p>You still have to be worried about the static initialization order fiasco.  Lets say you have a.cpp and b.cpp.  In a.cpp you have</p>\n<pre><code>double const Thing::default_blarg = 0;\n</code></pre>\n<p>Now in a.cpp any call to <code>run</code> after this point will have a initialized default and you are good to go.  Unfortunately in b.cpp you you have another static object that happens to create an instance of <code>Thing</code> and call <code>run</code>.</p>\n<p>Now we do not know what will happen.  If b.cpp runs first then <code>default_blarg</code> is not initialized and we have undefined behavior.</p>\n<p>Now for you second part</p>\n<blockquote>\n<p id=\"so_39397028_39397307_0\">but I'm not sure when the default argument to run is initialized</p>\n</blockquote>\n<p>The default arguments of a function are evaluated each time the function is called.  So as long as the function is called after <code>default_blarg</code> is initialized(and as noted above it may not) you will be okay.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "39397307", "Score": "4", "CreationDate": "2016-09-08T17:52:09.247", "LastActivityDate": "2016-09-08T17:52:09.247"}, "39397256": {"ParentId": "39397028", "CommentCount": "0", "Body": "<p>From the C++11 Standard, Section 8.3.6/9:</p>\n<blockquote>\n<p id=\"so_39397028_39397256_0\">Default arguments are evaluated each time the function is called.</p>\n</blockquote>\n<p>As long as <code>Thing::default_blarg</code> is initialized before <code>Thing::run</code> is called, you should see predictable behavior.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "39397256", "Score": "2", "CreationDate": "2016-09-08T17:48:24.933", "LastActivityDate": "2016-09-08T17:48:24.933"}, "bq_ids": {"n4140": {"so_39397028_39397256_0": {"section_id": 3260, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_39397028_39397256_0": {"section_id": 3132, "quality": 1.0, "length": 7}}, "n4659": {"so_39397028_39397256_0": {"section_id": 4018, "quality": 0.7142857142857143, "length": 5}}}});