post_cb({"21582032": {"CommentCount": "10", "AcceptedAnswerId": "21582150", "CreationDate": "2014-02-05T15:56:55.180", "LastActivityDate": "2014-02-05T16:21:57.570", "PostTypeId": "1", "ViewCount": "172", "FavoriteCount": "1", "Title": "Non-existing identifier used as default argument in non-instantiated function template", "Id": "21582032", "Score": "15", "Body": "<p>Today I found a piece of code equivalent to the following:</p>\n<pre><code>enum X\n{\n    x1 = 0,\n    x2 = 1\n};\n\ntemplate&lt;typename T&gt;\nvoid bar(T obj, X x = x3) { }\n//                    ^^\n//                    This identifier is bogus!\n\nint main() { }\n</code></pre>\n<p>Both VC10 and VC12 happily compile it. Both clang 3.4 and GCC 4.8.1 reject it (which is what I would expect). </p>\n<p>Is this a bug, or is VC's behavior actually allowed by the Standard? If so, which are the relevant paragraphs?</p>\n", "Tags": "<c++><templates><visual-c++><c++11><language-lawyer>", "OwnerUserId": "1932150", "AnswerCount": "1"}, "21582150": {"ParentId": "21582032", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's a well-known fact that VC doesn't have two-phase lookup. That means it accepts all sorts of <a href=\"http://www.catb.org/jargon/html/B/bogosity.html\" rel=\"noreferrer\">bogosity</a> in templates, as long as it at least looks like syntactically valid C++ and it is not actually instantiated.</p>\n<p>This is just one more of those instances.</p>\n<p>As you can see in their <a href=\"http://blogs.msdn.com/b/somasegar/archive/2013/06/28/cpp-conformance-roadmap.aspx\" rel=\"noreferrer\">conformance roadmap</a>, two-phase lookup is planned for sometime after the post-RTM CTP, which I guess would mean you will have access to it after you pay for the next iteration of the Visual Studio suite.</p>\n<p>As for the Standard references, 14.6/9-10 say:</p>\n<blockquote>\n<p id=\"so_21582032_21582150_0\">When looking for the declaration of a name used in a template definition, the usual lookup rules (3.4.1, 3.4.2) are used for non-dependent names. [...]</p>\n<p id=\"so_21582032_21582150_1\">If a name does not depend on a template-parameter (as defined in 14.6.2), a declaration (or set of declarations) for that name shall be in scope at the point where the name appears in the template definition.</p>\n</blockquote>\n", "OwnerUserId": "46642", "LastEditorUserId": "1932150", "LastEditDate": "2014-02-05T16:21:57.570", "Id": "21582150", "Score": "11", "CreationDate": "2014-02-05T16:01:54.847", "LastActivityDate": "2014-02-05T16:21:57.570"}, "bq_ids": {"n4140": {"so_21582032_21582150_1": {"section_id": 177, "quality": 0.9411764705882353, "length": 16}, "so_21582032_21582150_0": {"section_id": 176, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_21582032_21582150_1": {"section_id": 171, "quality": 0.9411764705882353, "length": 16}, "so_21582032_21582150_0": {"section_id": 170, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_21582032_21582150_1": {"section_id": 182, "quality": 0.9411764705882353, "length": 16}, "so_21582032_21582150_0": {"section_id": 181, "quality": 0.8461538461538461, "length": 11}}}});