post_cb({"bq_ids": {"n4140": {"so_28950575_28950796_0": {"length": 9, "quality": 1.0, "section_id": 4930}}, "n3337": {"so_28950575_28950796_0": {"length": 9, "quality": 1.0, "section_id": 4725}}, "n4659": {"so_28950575_28950796_0": {"length": 9, "quality": 1.0, "section_id": 6330}}}, "28950575": {"ViewCount": "266", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/io/ostrstream/freeze\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/io/ostrstream/freeze</a></p>\n<blockquote>\n<p id=\"so_28950575_28950575_0\">Notes After a call to str(), dynamic streams become frozen\n  automatically. A call to freeze(false) is required before exiting the\n  scope in which this ostrstream object was created. otherwise the\n  destructor will leak memory. Also, additional output to a frozen\n  stream may be truncated once it reaches the end of the allocated\n  buffer.</p>\n</blockquote>\n<pre><code>std::string Function( const ObjectA &amp; obj )\n{\n        std::ostringstream os;\n        os &lt;&lt; obj;\n\n        return os.str( );\n}\n</code></pre>\n<p>Question&gt; Does this function leak memory due to the missing of call of<code>std::ostrstream::freeze</code> after the <code>str()</code>?</p>\n", "Title": "Use std::ostrstream::freeze after std::ostrstream::str to prevent memory leak", "CreationDate": "2015-03-09T19:48:10.860", "LastActivityDate": "2015-03-09T20:23:00.510", "CommentCount": "3", "LastEditDate": "2015-03-09T19:51:23.727", "PostTypeId": "1", "LastEditorUserId": "3002139", "Id": "28950575", "Score": "3", "OwnerUserId": "391104", "Tags": "<c++>", "AnswerCount": "1"}, "28950796": {"Id": "28950796", "PostTypeId": "2", "Body": "<p>The standard effectively explains (<em>section D.7.1.1 and D.7.1.2</em>) that <code>str()</code> sets the state of the <code>strstream</code> to frozen, and that  <code>strstreambuf::~strstreambuf()</code> </p>\n<blockquote>\n<p id=\"so_28950575_28950796_0\">frees the dynamically allocated array object <strong>only if</strong> strmode &amp;\n  allocated != 0 and strmode &amp; <strong>frozen == 0</strong>.</p>\n</blockquote>\n<p>As your <code>strstream</code>  (I assume it's a typo to use stringstream here, givent your question) is a local object, it's destroyed when you return, leaking memory.</p>\n<p><strong><em>Important note:</em></strong> <code>strstream</code> is deprecated and kept alive only for compatibility issues.  If you'd use <code>stringstream</code> you'd have no leaking at as <a href=\"http://www.cplusplus.com/reference/sstream/stringstream/str/\" rel=\"nofollow\"><code>stringstream::str()</code></a> uses strings</p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-03-09T20:23:00.510", "Score": "2", "CreationDate": "2015-03-09T20:03:32.690", "ParentId": "28950575", "CommentCount": "4", "LastEditDate": "2015-03-09T20:23:00.510", "OwnerUserId": "3723423"}});