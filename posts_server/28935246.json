post_cb({"bq_ids": {"n4140": {"so_28935246_29875223_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 7216}, "so_28935246_29875223_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7216}}, "n3337": {"so_28935246_29875223_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 6960}, "so_28935246_29875223_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6960}}, "n4659": {"so_28935246_29875223_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 8725}, "so_28935246_29875223_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 8725}}}, "28935246": {"ViewCount": "147", "Body": "<p>Why was <code>char</code> in C++14 ever defined as specifically one less than the amount of values that a <code>char</code> could hold before, and what was their reasoning for changing such things for the C++14 Standard? It appears that from <a href=\"http://en.cppreference.com/w/cpp/language/types\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/language/types</a> that C++14 has changed the lower limit from -127 to -128.</p>\n<p>Does this break compatibility with ones' complements systems? What was their rationale for even changing the bounds at all?</p>\n", "AcceptedAnswerId": "29875223", "Title": "Does the change in lower bounds for the char type in C++14 break compatibility with ones' complement systems?", "CreationDate": "2015-03-09T04:27:09.140", "Id": "28935246", "CommentCount": "5", "LastEditDate": "2015-04-27T09:03:14.967", "PostTypeId": "1", "LastEditorUserId": "300797", "LastActivityDate": "2015-04-27T09:03:14.967", "Score": "1", "OwnerUserId": "3325075", "Tags": "<c++><range><standards>", "AnswerCount": "1"}, "29875223": {"Id": "29875223", "PostTypeId": "2", "Body": "<p>No, I misunderstood the change; the \"change of bounds\" did not. In fact, the only change wass that C++14  required bytes to now hold 256 distinct values, which was already within the capabilities of the typical byte data structure before hand.</p>\n<p><strong>C++ does not restrict its implementations by requiring a specific binary representation for its integral types, which means that architectures are free to remain conformant to the C++ Standard even if they decide to use a non-standard binary representation for integral types.</strong></p>\n<p>From Section 3.9.1 of the C++14 Standard Working Draft, Fundamental Types:</p>\n<blockquote>\n<p id=\"so_28935246_29875223_0\">7 Types bool , char , char16_t , char32_t , wchar_t , and the signed\n  and unsigned integer types are collectively called integral types.\n  A synonym for integral type is integer type. The representations of\n  integral types shall define values by use of a pure binary numeration\n  system.</p>\n<p id=\"so_28935246_29875223_1\"><strong>[Example: this International Standard permits 2\u2019s complement, 1\u2019s\n  complement and signed magnitude representations for integral types.\n  \u2014end example ]</strong></p>\n</blockquote>\n<p>If we do calculate the amount of values a single <code>char</code> value can hold, it can be seen that C++14 increases the negative space of a char by one for a total of 256 unique values (including 0). I would guess that prior versions left the bottom limit for a <code>char</code> at -128 for compatibility with ones' complement systems.</p>\n<p><strong>Edit:</strong> The misunderstanding is that ones' complements still can hold 256 values; it's just that two \"represent\" 0, as +0 and -0. If we take one to mean something else, we can then pretend that we still have 256 assignable values and thus, enough space to fit the <code>char</code> requirement for C++14.</p>\n<p>Related: <a href=\"https://stackoverflow.com/questions/5654159/why-not-enforce-2s-complement-in-c\">Why not enforce 2's complement in C++?</a></p>\n<p>C++14 Standard Working Draft: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-27T08:06:41.643", "Score": "2", "CreationDate": "2015-04-26T08:07:36.873", "ParentId": "28935246", "CommentCount": "1", "LastEditDate": "2017-05-23T12:00:06.253", "OwnerUserId": "3325075"}});