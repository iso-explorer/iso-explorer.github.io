post_cb({"17805562": {"ParentId": "17804547", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The best way to do this is <code>std::vector</code> :</p>\n<pre><code>// For an array of int\nstd::vector&lt;int&gt; array( size );\n</code></pre>\n<p>And you can add element dynamically :</p>\n<pre><code>array.push_back( 1 ); // 1 is an example\n</code></pre>\n<p>And it is the same with a custom object :</p>\n<pre><code>class MyObject {};\n\nstd::vector&lt;MyObject&gt; array( number_of_object );\n</code></pre>\n<p>If you need a little documentation : <a href=\"http://www.cplusplus.com/reference/vector/vector/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/</a></p>\n<hr>\n<p>As it is said in the standard <em>\u00a7 8.3.4</em>, arrays can only be sized with a constant expression :</p>\n<blockquote>\n<p id=\"so_17804547_17805562_0\">[...]</p>\n<p id=\"so_17804547_17805562_1\">An array declaration has the form : <strong>D1 [ constant-expression] attribute-specifier-seq</strong></p>\n<p id=\"so_17804547_17805562_2\">If the <em>constant-expression</em> is present, it shall be an integral constant expression and its value shall be greater than zero.</p>\n</blockquote>\n</hr>", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-07-23T08:57:04.227", "Id": "17805562", "Score": "2", "CreationDate": "2013-07-23T08:51:43.627", "LastActivityDate": "2013-07-23T08:57:04.227"}, "17804547": {"CommentCount": "7", "ViewCount": "159", "PostTypeId": "1", "ClosedDate": "2013-07-23T12:08:48.840", "LastEditorUserId": "2000301", "CreationDate": "2013-07-23T07:59:27.167", "LastActivityDate": "2013-07-23T12:05:13.450", "Title": "Array Dynamic initialization", "LastEditDate": "2013-07-23T12:05:13.450", "Id": "17804547", "Score": "-1", "Body": "<p>Is there any way to <em>dynamically initialize</em> array size without using pointer for the array?</p>\n<p>Any array of data type except for array of objects.</p>\n<p>using <code>const</code> keyword does not actually work as it has to be initialized to some value already through code and not by user/client.</p>\n<p>Code: </p>\n<pre><code>void input() {\n   int size; \n   cout&lt;&lt;\"Enter the value of Array size\\t\"; \n   cin&gt;&gt;size; \n   float *ad = new float[size]; \n   float *inad = new float[size]; \n   float *e = new float[size];\n}\n</code></pre>\n", "Tags": "<c++><arrays>", "OwnerUserId": "2496474", "AnswerCount": "3"}, "17805545": {"ParentId": "17804547", "CommentCount": "0", "Body": "<p>The question is not gramatically clear, but I think what you are asking for is, without pointers can you create dynamic containers. And given the tags, you want to use C++.</p>\n<p>Thus</p>\n<pre><code>class Foo { \n// Default copy and move constructor created by compiler to allow fast copy by value\n};\n\nstd::vector&lt;Foo&gt; my_dynamic_array;\n</code></pre>\n<p>If you want to reserve some space</p>\n<pre><code>my_dynamic_array.reserve(50);\n</code></pre>\n<p>If you want to add items to it by value, no pointers</p>\n<pre><code>Foo aFoo;\nmy_dynamic_array.push_back(aFoo);\n</code></pre>\n", "OwnerUserId": "2294472", "PostTypeId": "2", "Id": "17805545", "Score": "0", "CreationDate": "2013-07-23T08:50:56.333", "LastActivityDate": "2013-07-23T08:50:56.333"}, "bq_ids": {"n4140": {"so_17804547_17805562_2": {"section_id": 3228, "quality": 0.9, "length": 9}, "so_17804547_17805562_1": {"section_id": 3228, "quality": 0.8, "length": 4}}, "n3337": {"so_17804547_17805562_2": {"section_id": 3101, "quality": 1.0, "length": 10}, "so_17804547_17805562_1": {"section_id": 3101, "quality": 0.8, "length": 4}}, "n4659": {"so_17804547_17805562_2": {"section_id": 3985, "quality": 0.9, "length": 9}, "so_17804547_17805562_1": {"section_id": 3985, "quality": 0.8, "length": 4}}}, "17805070": {"ParentId": "17804547", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The C++ standard only permits arrays to be sized with a constant expression (However, some compiler's may offer it as a non-standard language extension)</p>\n<p>You could use a std::vector instead:-</p>\n<pre><code>std::vector&lt;int&gt; array(arr_size);\n</code></pre>\n<p>Or you could dynamically-allocate memory manually:-</p>\n<pre><code>int *const array = new int[arr_size];\n</code></pre>\n<p>...</p>\n<pre><code>delete [] array;  // Remember to delete when you're done\n</code></pre>\n<p>P.S: Y don't you want to use pointers? Its rather easy with them.</p>\n", "OwnerUserId": "2607581", "LastEditorUserId": "2224265", "LastEditDate": "2013-07-23T08:44:24.130", "Id": "17805070", "Score": "0", "CreationDate": "2013-07-23T08:28:03.150", "LastActivityDate": "2013-07-23T08:44:24.130"}});