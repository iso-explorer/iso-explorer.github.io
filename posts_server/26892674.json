post_cb({"bq_ids": {"n4140": {"so_26892674_26893482_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 6071}}, "n3337": {"so_26892674_26893482_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 5839}}, "n4659": {"so_26892674_26893482_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 7567}}}, "26892674": {"ViewCount": "2200", "Body": "<p>I have this code from a library I want to use. On compiling, I get the following warning:</p>\n<p><strong>warning C4146: unary minus operator applied to unsigned type, result still unsigned</strong></p>\n<pre><code>inline int lastbit (uint32_t v)\n{\n  int r;\n  static const int MultiplyDeBruijnBitPosition[32] = \n    {\n      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, \n      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9\n    };\n  r = MultiplyDeBruijnBitPosition[((uint32_t)((v &amp; -v) * 0x077CB531U)) &gt;&gt; 27];\n  return r;\n}\n</code></pre>\n<p>How can I fix it with altering the library as little as possible?</p>\n", "AcceptedAnswerId": "26893482", "Title": "warning C4146 minus operator on unsigned type", "CreationDate": "2014-11-12T17:14:36.973", "Id": "26892674", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-11-12T17:31:39.210", "LastEditorUserId": "1386054", "LastActivityDate": "2015-11-25T17:22:04.827", "Score": "3", "OwnerUserId": "1930254", "Tags": "<c++><compiler-errors><unsigned>", "AnswerCount": "1"}, "26893482": {"Id": "26893482", "PostTypeId": "2", "Body": "<p>The type for <code>v</code> is <code>std::uint32_t</code>, which is an unsigned type.  An unsigned type is typically used for indexes and counts, since they can never be negative.</p>\n<p>Attempting to flip the sign on an unsigned number is generally suspicious, which is why the compiler gives a warning.  In this case, however, it's safe and well-defined, and the library is relying on details of what exactly it means to flip the sign on an unsigned number.</p>\n<p>From the C++11 standard:</p>\n<blockquote>\n<p id=\"so_26892674_26893482_0\">The negative of an unsigned quantity is computed by subtracting its value from the 2^n, where n is the number of bits in the promoted operand.  The type of the result is the type of the promoted operand. [Section 5.3.1.8]</p>\n</blockquote>\n<p>[Where the standard says 2^n, it means that literally, even though 2^n can't be represented in an unsigned type of n bits.  The most common way to <em>implement</em> this without using a larger type is to flip all the bits and then add one:  <code>neg_v = ~v + 1;</code>.]</p>\n<p>To convince the compiler that this operation is OK, here, you might try to use a cast.  (Casts should be used only rarely, when you need to force the compiler to treat a value as something other that its natural type.)</p>\n<pre><code>const uint32_t neg_v = static_cast&lt;uint32_t&gt;(-static_cast&lt;int32_t&gt;(v));\nr = MultiplyDeBruijnBitPosition[((uint32_t)((v &amp; neg_v) * 0x077CB531U)) &gt;&gt; 27];\n</code></pre>\n<p>The inner cast asks the compiler to convert <code>v</code> to a 32-bit signed integer.  For values of <code>v</code> up to 2^31 - 1, this results in the same value.  For larger values of <code>v</code>, this will result in a negative value.</p>\n<p>But now you're flipping the sign on a signed value (which the compiler will happily do), but it's no longer guaranteed by the standard to do exactly the same thing.  (All modern machines use two's-complement, so in effect, it will give the same result.)</p>\n<p>If you wanted to be nit-picky (like me), you could perform the bitwise operations directly on the unsigned value, using the two's-complement trick from above.  Instead of <code>-v</code>, you'd have <code>(~v + 1u)</code>:</p>\n<pre><code>r = MultiplyDeBruijnBitPosition[((uint32_t)((v &amp; (~v + 1u)) * 0x077CB531U)) &gt;&gt; 27];\n</code></pre>\n", "LastEditorUserId": "1386054", "LastActivityDate": "2015-11-25T17:22:04.827", "Score": "5", "CreationDate": "2014-11-12T18:00:32.967", "ParentId": "26892674", "CommentCount": "2", "OwnerUserId": "1386054", "LastEditDate": "2015-11-25T17:22:04.827"}});