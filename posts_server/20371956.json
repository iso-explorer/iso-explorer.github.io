post_cb({"20371956": {"CommentCount": "0", "AcceptedAnswerId": "20372624", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2013-12-04T09:48:37.690", "LastActivityDate": "2013-12-04T11:06:08.210", "LastEditDate": "2013-12-04T11:06:08.210", "ViewCount": "1620", "FavoriteCount": "0", "Title": "Unexpected exception in std::ifstream", "Id": "20371956", "Score": "4", "Body": "<p>Experimenting with I/O I get an exception where no exception should have been thrown:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main()\n{\n    std::ifstream f(\"/tmp\");\n    std::cout &lt;&lt; \"Exception Flags: \" &lt;&lt; f.exceptions() &lt;&lt; std::endl;\n    if(f &gt;&gt; std::ws) std::cout &lt;&lt; \"This will not succeed\" &lt;&lt; std::endl;\n    else std::cout &lt;&lt; \"Ok - it fails\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>But the output is:</p>\n<pre><code>Exception Flags: 0\nterminate called after throwing an instance of 'std::ios_base::failure'\n  what():  basic_filebuf::underflow error reading the file\nAborted\n</code></pre>\n<p>g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2</p>\n<p><strong>Edit</strong></p>\n<p>The test is supposed to fail without exception:</p>\n<p>From 27.5.5.4 basic_ios flags functions</p>\n<blockquote>\n<p id=\"so_20371956_20371956_0\">void clear(iostate state = goodbit); </p>\n<p id=\"so_20371956_20371956_1\">4 Postcondition: If rdbuf()!=0 then state == rdstate(); otherwise rdstate()==(state | ios_base::badbit). </p>\n<p id=\"so_20371956_20371956_2\">5 Effects: If ((state | (rdbuf() ? goodbit : badbit)) &amp;\n  exceptions()) == 0, returns. Otherwise, the function throws an\n  object fail of class basic_ios::failure (27.5.3.1.1), constructed with\n  implementation-defined argument values. </p>\n<p id=\"so_20371956_20371956_3\">void setstate(iostate state); </p>\n<p id=\"so_20371956_20371956_4\">6 Effects: Calls clear(rdstate() |\n  state) (which may throw basic_ios::failure (27.5.3.1.1)).</p>\n</blockquote>\n", "Tags": "<c++><iostream>", "OwnerUserId": "2249683", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_20371956_20371956_2": {"section_id": 2023, "quality": 0.8421052631578947, "length": 16}, "so_20371956_20371956_1": {"section_id": 2022, "quality": 0.75, "length": 6}, "so_20371956_20371956_0": {"section_id": 2021, "quality": 1.0, "length": 4}, "so_20371956_20371956_4": {"section_id": 2024, "quality": 0.75, "length": 6}}, "n3337": {"so_20371956_20371956_2": {"section_id": 2011, "quality": 0.8421052631578947, "length": 16}, "so_20371956_20371956_1": {"section_id": 2010, "quality": 0.75, "length": 6}, "so_20371956_20371956_0": {"section_id": 2009, "quality": 1.0, "length": 4}, "so_20371956_20371956_4": {"section_id": 2012, "quality": 0.75, "length": 6}}, "n4659": {"so_20371956_20371956_2": {"section_id": 2296, "quality": 0.7894736842105263, "length": 15}, "so_20371956_20371956_0": {"section_id": 2294, "quality": 1.0, "length": 4}, "so_20371956_20371956_4": {"section_id": 2297, "quality": 0.75, "length": 6}, "so_20371956_20371956_1": {"section_id": 2295, "quality": 0.625, "length": 5}}}, "20372624": {"ParentId": "20371956", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's a bug, and clang v3.4 with libc++ <a href=\"http://coliru.stacked-crooked.com/a/65939ef30180b800\" rel=\"noreferrer\">doesn't exhibit this behaviour</a>; GCC 4.8's libstdc++ <a href=\"http://coliru.stacked-crooked.com/a/96a0b8d78b631445\" rel=\"noreferrer\">still does</a>.</p>\n<p>From the libstdc++ source and the text of the exception, I'd say that <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.8.0/libstdc++/api/a01050_source.html#l00041\" rel=\"noreferrer\"><code>basic_ios::clear</code></a> is not catching exceptions thrown from down the call stack and applying the \"are exception flags in play?\" logic before potentially rethrowing them.</p>\n<p>It was already raised last year as <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53984\" rel=\"noreferrer\">bug 53984</a>.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2013-12-04T10:56:28.437", "Id": "20372624", "Score": "7", "CreationDate": "2013-12-04T10:19:33.053", "LastActivityDate": "2013-12-04T10:56:28.437"}});