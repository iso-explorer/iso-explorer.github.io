post_cb({"39415528": {"CommentCount": "8", "AcceptedAnswerId": "39415639", "PostTypeId": "1", "LastEditorUserId": "3980929", "CreationDate": "2016-09-09T15:59:30.647", "LastActivityDate": "2016-09-09T20:29:15.420", "LastEditDate": "2016-09-09T20:29:15.420", "ViewCount": "209", "FavoriteCount": "0", "Title": "Is the \"Type of bit field too small for number of bits\" error part of the C++ standard?", "Id": "39415528", "Score": "1", "Body": "<p>The following code generates <a href=\"https://msdn.microsoft.com/en-us/library/w99za7yk.aspx\" rel=\"nofollow\">MSVS Compiler Error C2034</a> in Visual Studio 2008:</p>\n<pre><code>struct TestStruct {\n    unsigned short var1 : 7;\n    unsigned short      : 9;\n    bool var2           : 1;\n    bool                : 15; // C2034\n};\n</code></pre>\n<pre>error C2034: 'TestStruct::&lt;alignment member&gt;': type of bit field too small for number of bits</pre>\n<p>However, the following code compiles successfully, which seems kind of dumb, because I'd think the compiler could have just done this automatically:</p>\n<pre><code>struct TestStruct {\n    unsigned short var1 : 7;\n    unsigned short      : 9;\n    bool var2           : 1;\n    bool                : 7;\n    bool                : 8;\n};\n</code></pre>\n<p>However, both code snippets compile on my Linux GCC compiler. Is one compiler more correct than the other, according to the C++ Standard? If so, which, and why?</p>\n", "Tags": "<c++><language-lawyer><bit-fields>", "OwnerUserId": "3841872", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39415528_39415639_0": {"section_id": 5921, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_39415528_39415639_0": {"section_id": 5693, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_39415528_39415639_0": {"section_id": 7395, "quality": 0.9583333333333334, "length": 23}}}, "39415639": {"ParentId": "39415528", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Yes this is a bug in MSVS.  That standard states in [class.bit]/1</p>\n<blockquote>\n<p id=\"so_39415528_39415639_0\">[...]The value of the integral constant expression may be larger than the number of bits in the object representation (3.9) of the bit-field\u2019s type; in such cases the extra bits are used as padding bits and do not participate in the value representation (3.9) of the bit-field.[...]</p>\n</blockquote>\n<p>So the compiler should have added extra padding and only let you have a number of bits equal to <code>CHAR_BIT * sizeof(bit_field_underlying_type)</code>.</p>\n", "OwnerUserId": "4342498", "LastEditorUserId": "4342498", "LastEditDate": "2016-09-09T16:54:48.020", "Id": "39415639", "Score": "3", "CreationDate": "2016-09-09T16:06:44.687", "LastActivityDate": "2016-09-09T16:54:48.020"}});