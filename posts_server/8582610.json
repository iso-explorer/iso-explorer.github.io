post_cb({"8582697": {"ParentId": "8582610", "CommentCount": "14", "Body": "<p>As @ildjarn says in his comment, your code is simply ill-formed according to the standard.</p>\n<p><code>\u00a75.1.2 [expr.prim.lambda] p4</code></p>\n<blockquote>\n<p id=\"so_8582610_8582697_0\">[...] If a <em>lambda-expression</em> does not include a <em>trailing-return-type</em>, it is as if the <em>trailing-return-type</em> denotes the following type:</p>\n<ul>\n<li>if the <em>compound-statement</em> is of the form<br>\n<code>{</code> <em>attribute-specifier-seq<sub>opt</sub></em> <code>return</code> <em>expression</em> ; <code>}</code><br>\n  the type of the returned expression after lvalue-to-rvalue conversion (4.1), array-to-pointer conversion\n  (4.2), and function-to-pointer conversion (4.3);</br></br></li>\n<li>otherwise, <code>void</code>.</li>\n</ul>\n<p id=\"so_8582610_8582697_1\">[...]</p>\n</blockquote>\n<p>That's it, basically if the code inside the curly brackets (called <em>compund-statement</em> in the standard) is anything but <code>return some_expr;</code>, the standard says the return type is undeducible and you get a <code>void</code> return type.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "8582697", "Score": "5", "CreationDate": "2011-12-20T22:18:11.970", "LastActivityDate": "2011-12-20T22:18:11.970"}, "8582610": {"CommentCount": "6", "AcceptedAnswerId": "8582697", "CreationDate": "2011-12-20T22:07:59.610", "LastActivityDate": "2015-01-02T00:08:44.913", "PostTypeId": "1", "ViewCount": "624", "FavoriteCount": "1", "Title": "Compiler warning: lambda return type cannot be deduced", "Id": "8582610", "Score": "4", "Body": "<p>Consider this example:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::string str = \"abcde4fghijk4l5mnopqrs6t8uvwxyz\";\n    std::string str2;\n\n    std::remove_copy_if(str.begin(), str.end(),\n        std::back_inserter(str2),\n        [](char&amp; c) {\n            if (std::isdigit(c))\n                return true;      // &lt;----- warning here\n            else\n                return false;\n        }\n    );\n\n    std::cout &lt;&lt; str2 &lt;&lt; '\\n';\n}\n</code></pre>\n<p>With GCC 4.6.1, this compiles fine and prints expected output (the alphabet) but I get a warning saying <em>\"lambda return type can only be deduced when the return statement is the only statement in the function body\"</em>.</p>\n<p>Now, I know how to get rid of the warning (using trailing return type or simply saying <code>return isdigit(c);</code>), but I'm curious, since compiler doesn't warn for nothing (or so it should be): what could possibly go wrong in code like this? Does standard say anything about it?</p>\n", "Tags": "<c++><lambda><c++11><compiler-warnings>", "OwnerUserId": "947836", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8582610_27735933_0": {"section_id": 5455, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_8582610_8582697_0": {"section_id": 5732, "quality": 1.0, "length": 8}}, "n4659": {"so_8582610_27735933_0": {"section_id": 6881, "quality": 0.9655172413793104, "length": 28}}}, "27735933": {"ParentId": "8582610", "CommentCount": "0", "Body": "<p>It is worth noting that this issue has been rectified in C++14. The language now correctly deduces the return type as the OP expected. From the draft standard [7.1.6.4.11]:</p>\n<blockquote>\n<p id=\"so_8582610_27735933_0\">If the type of an entity with an undeduced placeholder type is needed\n  to determine the type of an expression, the program is ill-formed.\n  Once a return statement has been seen in a function, however, the\n  return type deduced from that statement can be used in the rest of the\n  function, including in other return statements. [ Example:</p>\n<pre><code>auto n = n; // error, n\u2019s type is unknown\nauto f();\nvoid g() { &amp;f; } // error, f\u2019s return type is unknown\nauto sum(int i) {\nif (i == 1)\n    return i; // sum\u2019s return type is int\nelse\n    return sum(i-1)+i; // OK, sum\u2019s return type has been deduced\n}\n</code></pre>\n<p id=\"so_8582610_27735933_1\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "540815", "PostTypeId": "2", "Id": "27735933", "Score": "3", "CreationDate": "2015-01-02T00:08:44.913", "LastActivityDate": "2015-01-02T00:08:44.913"}});