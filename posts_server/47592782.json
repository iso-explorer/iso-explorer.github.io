post_cb({"bq_ids": {"n4140": {"so_47592782_47592803_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5873}}, "n3337": {"so_47592782_47592803_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5644}}, "n4659": {"so_47592782_47592803_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 7356}}}, "47592800": {"Id": "47592800", "PostTypeId": "2", "Body": "<p>Yes the order is guaranteed.</p>\n<p>The address of <code>field1</code> must be the same as the address of an instance of <code>my_class_t</code>. <code>field2</code> has a \"higher\" address than <code>field1</code> insofar that positive pointer arithmetic on an <code>unsigned char*</code> pointer obtained by a <code>reinterpret_cast</code> on the address of <code>field1</code> will eventually reach the memory occupied by <code>field2</code>.</p>\n<p>But note that the behaviour on attempting to \"reach\" <code>field2</code> by pointer arithmetic on a pointer to <code>field1</code> is <em>undefined</em>.</p>\n<p>As for ensuring there is no padding between the members, you can't do that in portable C++. But you could use an array type:</p>\n<pre><code>class my_class_t {\nprivate:\n    uint64_t fields[2];\n};\n</code></pre>\n<p>which <em>would</em> guarantee that. And then you <em>can</em> reach the members using pointer arithmetic.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2017-12-01T12:09:16.217", "Score": "4", "CreationDate": "2017-12-01T11:51:47.797", "ParentId": "47592782", "CommentCount": "0", "OwnerUserId": "2380830", "LastEditDate": "2017-12-01T12:09:16.217"}, "47592803": {"Id": "47592803", "PostTypeId": "2", "Body": "<p>They are guaranteed to have increasing addresses with respect to each other (<a href=\"https://timsong-cpp.github.io/cppwp/n4140/class.mem#13\" rel=\"nofollow noreferrer\">[class.mem]/13</a>):</p>\n<blockquote>\n<p id=\"so_47592782_47592803_0\">Nonstatic data members of a (non-union) class <strong>with the same access\n  control</strong> (Clause [class.access]) are allocated so that later members\n  have higher addresses within a class object.</p>\n</blockquote>\n<p>Note the text I marked in bold. While it's guaranteed <code>field2</code> is after <code>field1</code> when they are both private, it need not be the case if they had different access control. And of course, intermediate padding is always an option.</p>\n<p>But if you want to force the absence of padding, and they are of the same type, an array would do it:</p>\n<pre><code>uint64_t field[2];\n</code></pre>\n<p>It also makes <code>&amp;field[0] + 1</code> well defined, since those objects are now obviously members of the same array.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-12-01T12:01:46.723", "Score": "6", "CreationDate": "2017-12-01T11:51:55.677", "ParentId": "47592782", "CommentCount": "13", "OwnerUserId": "817643", "LastEditDate": "2017-12-01T12:01:46.723"}, "47592921": {"Id": "47592921", "PostTypeId": "2", "Body": "<p>The order of objects in memory will be same as the order of declaration when access qualifier does not intervene.</p>\n", "LastActivityDate": "2017-12-01T11:58:45.830", "CommentCount": "0", "CreationDate": "2017-12-01T11:58:45.830", "ParentId": "47592782", "Score": "0", "OwnerUserId": "4501684"}, "47592782": {"ViewCount": "41", "Body": "<pre><code>class my_class_t {\n\nprivate:\n    uint64_t field1;\n    uint64_t field2;\n};\n</code></pre>\n<p>Is order of <code>field1</code> and <code>field2</code> guaranteed in memory by C++ Standard?</p>\n<p>UPD. Answers said that <code>field2</code> it is, but <code>&amp;field2</code> may be not equal to <code>&amp;field1 + 1</code>. How to ensure that <code>field2</code> will be immediately after <code>field1</code>?</p>\n", "AcceptedAnswerId": "47592803", "Title": "Is order of members in memory guarantted for class private members in C++?", "CreationDate": "2017-12-01T11:50:28.933", "Id": "47592782", "CommentCount": "0", "LastEditDate": "2017-12-01T11:57:37.850", "PostTypeId": "1", "LastEditorUserId": "1555823", "LastActivityDate": "2017-12-01T12:09:16.217", "Score": "0", "OwnerUserId": "1555823", "Tags": "<c++><c++14><class-members>", "AnswerCount": "3"}});