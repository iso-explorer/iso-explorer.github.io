post_cb({"bq_ids": {"n4140": {"so_5075928_5076083_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 550}, "so_5075928_5076090_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 543}}, "n3337": {"so_5075928_5076090_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 541}, "so_5075928_5076083_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 541}}, "n4659": {"so_5075928_5076090_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 564}, "so_5075928_5076083_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 571}}}, "5075928": {"ViewCount": "5671", "Body": "<p>As you may see from my other questions many of you may already got the answer for this. Can you please share that knowledge to me?</p>\n", "AcceptedAnswerId": "5076090", "Title": "C++what is the type of the __LINE__ macro", "CreationDate": "2011-02-22T08:52:35.483", "Id": "5075928", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-02-22T09:23:49.260", "Score": "11", "OwnerUserId": "344822", "Tags": "<c++><visual-c++><macros><logic>", "AnswerCount": "2"}, "5076083": {"Id": "5076083", "PostTypeId": "2", "Body": "<p>The C++ standard simply has this to say:</p>\n<blockquote>\n<p id=\"so_5075928_5076083_0\"><code>__LINE__</code>: The presumed line number (within the current source file) of the current source line (an integer constant).</p>\n</blockquote>\n<p>It does not actually state the type so it's most likely going to be the same type as an unadorned integer would be in your source code which would be an <code>int</code>. The fact that the upper end of the allowed range is <code>2G - 1</code> supports that (even though the lower range is <code>1</code>).</p>\n<p>The fact that <code>#line</code> only allows digits (no trailing <code>U</code> to make it unsigned) can also be read to support this.</p>\n<p>But, that's only <em>support.</em> I couldn't find a definitive statement within either the C++ or C standards. It just makes sense<sup>*a</sup> that it will be translated into something like <code>42</code> when it goes through the preprocessing phase and that's what the compiler will see, treating it exactly like <code>42</code> (an <code>int</code>).</p>\n<hr>\n<p><sup>*a</sup>: This wouldn't be the first time my common sense was wrong, though :-)</p>\n</hr>", "LastEditorUserId": "14860", "LastActivityDate": "2011-02-22T09:13:19.677", "Score": "3", "CreationDate": "2011-02-22T09:04:32.907", "ParentId": "5075928", "CommentCount": "7", "LastEditDate": "2011-02-22T09:13:19.677", "OwnerUserId": "14860"}, "5076090": {"Id": "5076090", "PostTypeId": "2", "Body": "<p>C++03 \u00a716.8p1:</p>\n<blockquote>\n<p id=\"so_5075928_5076090_0\">__LINE__ The line number of the current source line (a decimal constant).</p>\n</blockquote>\n<p>This will either be int, or if INT_MAX (which is allowed to be as little as 32,767) is not big enough (\u2026 I won't ask \u2026), then it will be long int.  If it would be bigger than LONG_MAX, then you have undefined behavior, which, for once, is not a problem worth worrying about in a file of at least 2,147,483,647 lines (the minimum allowed value for LONG_MAX).</p>\n<p>The same section also lists other macros you may be interested in.</p>\n", "LastEditorUserId": "511601", "LastActivityDate": "2011-02-22T09:23:49.260", "Score": "17", "CreationDate": "2011-02-22T09:04:56.227", "ParentId": "5075928", "CommentCount": "7", "LastEditDate": "2011-02-22T09:23:49.260", "OwnerUserId": "511601"}});