post_cb({"15580903": {"ViewCount": "129", "Body": "<p>If I declare an object like this:</p>\n<pre><code>void main()\n{\n    myclass objectA(anotherclass(true,true,0));\n}\n</code></pre>\n<p>i.e. I create an objectA and another object \"anotherclass\" by directly calling the latter's constructor, what is \"anotherclass\"'s scope?</p>\n<p>Does it get destructed only when main() finishes?</p>\n", "AcceptedAnswerId": "15580919", "Title": "Scope of an inside-parenthesis declared object", "CreationDate": "2013-03-22T22:33:06.890", "Id": "15580903", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-03-22T22:39:22.623", "Score": "2", "OwnerUserId": "1494037", "Tags": "<c++><scope>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_15580903_15580919_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 380}, "so_15580903_15580915_0": {"length": 14, "quality": 1.0, "section_id": 7044}}, "n3337": {"so_15580903_15580919_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 371}, "so_15580903_15580915_0": {"length": 14, "quality": 1.0, "section_id": 6789}}, "n4659": {"so_15580903_15580919_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 395}, "so_15580903_15580915_0": {"length": 14, "quality": 1.0, "section_id": 8541}}}, "15580915": {"Id": "15580915", "PostTypeId": "2", "Body": "<p>The <code>anotherclass</code> object doesn't have a scope. Scope is a property of names, not of objects, and this object is not named. It's just a temporary object and will be destroyed at the end of the full expression.</p>\n<p>Here's the definition of scope (\u00a73.3.1):</p>\n<blockquote>\n<p id=\"so_15580903_15580915_0\">In general, each particular name is valid only within some possibly discontiguous\n  portion of program text called its <em>scope</em>.</p>\n</blockquote>\n", "LastActivityDate": "2013-03-22T22:34:04.440", "CommentCount": "3", "CreationDate": "2013-03-22T22:34:04.440", "ParentId": "15580903", "Score": "2", "OwnerUserId": "150634"}, "15580919": {"Id": "15580919", "PostTypeId": "2", "Body": "<p>The temporary gets destructed at the end of the full expression that contains it, i.e. when the call to the constructor of <code>myclass</code> returns.</p>\n<p>Per Paragraph 12.2/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15580903_15580919_0\"><strong>Temporary objects are destroyed as the last step\n  in evaluating the full-expression (1.9) that (lexically) contains the point where they were created</strong>. This is true\n  even if that evaluation ends in throwing an exception. The value computations and side effects of destroying\n  a temporary object are associated only with the full-expression, not with any specific subexpression.</p>\n</blockquote>\n<p>For this reason, if <code>myclass</code>'s constructor takes an argument of type <code>anotherClass</code> by <em>reference</em> (either lvalue reference to <code>const</code> or rvalue reference), it shall not store it for future use, because it will be dangling if a temporary is passed, and dereferencing it would be Undefined Behavior.</p>\n<p>It is only <code>objectA</code> that goes out of scope and gets destroyed when returning from the <code>main()</code> function.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-22T22:39:22.623", "Score": "4", "CreationDate": "2013-03-22T22:34:18.017", "ParentId": "15580903", "CommentCount": "7", "OwnerUserId": "1932150", "LastEditDate": "2013-03-22T22:39:22.623"}});