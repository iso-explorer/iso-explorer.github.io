post_cb({"37898704": {"ParentId": "37898525", "CommentCount": "0", "CreationDate": "2016-06-18T15:37:13.803", "OwnerUserId": "172695", "PostTypeId": "2", "Id": "37898704", "Score": "2", "Body": "<p>C++ lambdas are only convertible to function pointers if there is <strong>no capture</strong> (and you are capturing <code>this</code> as stated).</p>\n<p>Also refer to the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++11 standard</a> section <code>5.1.2</code>:</p>\n<blockquote>\n<p id=\"so_37898525_37898704_0\">The closure type for a lambda-expression <strong>with no lambda-capture</strong> has a\n  public non-virtual non-explicit const <strong>conversion function to pointer\n  to function</strong> having the same parameter and return types as the closure\n  type\u2019s function call operator.</p>\n</blockquote>\n<p>As a solution, you could use <code>std::function</code> instead of the function pointer.</p>\n", "LastActivityDate": "2016-06-18T15:37:13.803"}, "37898525": {"CommentCount": "3", "ViewCount": "47", "CreationDate": "2016-06-18T15:17:52.923", "LastActivityDate": "2016-06-18T15:37:13.803", "Title": "Accessing external context within lambdas", "AcceptedAnswerId": "37898704", "PostTypeId": "1", "Id": "37898525", "Score": "0", "Body": "<p>This might be a pretty nooby question, but I wasn't able to figure it out by myself.</p>\n<p>So, I am trying to pass a lambda into the following function:</p>\n<pre><code>wiringPiISR(int pin, int mode, void (*function)())\n</code></pre>\n<p>... what results in this:</p>\n<pre><code>wiringPiISR(Pin::BELL, INT_EDGE_RISING, [] {});\n</code></pre>\n<p>... and seems to work, so I obviously can use a lambda instead of pointing to a function.</p>\n<p>But what I actually want to do is something like that, with capturing <code>this</code> to access the function <code>onInterrupt(Pin pin)</code> in the outer context:</p>\n<pre><code>wiringPiISR(Pin::BELL_1, INT_EDGE_RISING, [this] { \n    onInterrupt(Pin::BELL_1);\n});\n\nwiringPiISR(Pin::BELL_2, INT_EDGE_RISING, [this] { \n    onInterrupt(Pin::BELL_2);\n});\n</code></pre>\n<p>... what results in this error message:</p>\n<pre><code>No matching function for call to wiringPiISR\n</code></pre>\n<p>I'm not very experienced in using c++-lambdas, I know closures from many other languages, but they obviously seem to work different in c++. This capturing seems to modify the signature of the closure, but I have no idea how to fix this, or even if there is a possible solution without pointing to an \"actual\" function.</p>\n<p>Thank you in advance</p>\n", "Tags": "<c++><lambda>", "OwnerUserId": "3164830", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37898525_37898704_0": {"section_id": 5965, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_37898525_37898704_0": {"section_id": 5734, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_37898525_37898704_0": {"section_id": 7456, "quality": 0.782608695652174, "length": 18}}}});