post_cb({"bq_ids": {"n4140": {"so_17127652_17127680_0": {"length": 8, "quality": 1.0, "section_id": 3321}}, "n3337": {"so_17127652_17127680_0": {"length": 8, "quality": 1.0, "section_id": 3191}}, "n4659": {"so_17127652_17127680_0": {"length": 8, "quality": 1.0, "section_id": 4087}}}, "17127652": {"ViewCount": "488", "Body": "<p>In C++, it is illegal to implicitly convert an rvalue to an lvalue reference.\nConsider the following code where an lvalue reference is bound to an rvalue (the lambda):</p>\n<pre><code>int main()\n{\n    auto&amp; f = []() -&gt; void {};\n    return 0;\n}\n</code></pre>\n<p>gcc (4.8.1) does not accept such code (makes perfect sense).\nHowever, Microsoft compiler does accept it meaning that either it is accepting nonstandard code or C++ allows the particular case where an lvalue reference is bound to an rvalue lambda expression.</p>\n<p>The question: which assumption is correct?</p>\n", "AcceptedAnswerId": "17127680", "Title": "rvalue and lvalue reference with lambda expressions - gcc vs. msvc", "CreationDate": "2013-06-15T20:34:49.243", "Id": "17127652", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-07-04T07:57:51.783", "LastEditorUserId": "2164312", "LastActivityDate": "2017-07-04T07:57:51.783", "Score": "4", "OwnerUserId": "1003615", "Tags": "<c++><visual-c++><gcc><c++11>", "AnswerCount": "3"}, "17127815": {"Id": "17127815", "PostTypeId": "2", "Body": "<p>To <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">quote</a> Herb Sutter (chair of the ISO C++ standards committee):</p>\n<blockquote>\n<p id=\"so_17127652_17127815_0\">A conforming C++ compiler can always allow otherwise-illegal C++ code to compile and give it some meaning \u2014 hey, it could choose to allow inline COBOL if some kooky compiler writer was willing to implement that extension, maybe after a few too many Tequilas. For some kinds of extensions the C++ standard requires that the compiler at least emit some diagnostic to say that the code isn\u2019t valid ISO C++, as this compiler does.</p>\n</blockquote>\n<p>He explains further how the following example is illegal:</p>\n<pre><code>// Example 2\n\nstring f() { return \"abc\"; }\n\nvoid g() {\nstring&amp; s = f();       // illegal?\n  cout &lt;&lt; s &lt;&lt; endl;\n}\n</code></pre>\n<p>Please visit this <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">link</a> by Sutter for an explanation, to avoid duplicating the article on SO.</p>\n", "LastEditorUserId": "1055604", "LastActivityDate": "2013-06-16T07:32:44.577", "Score": "2", "CreationDate": "2013-06-15T20:57:08.123", "ParentId": "17127652", "CommentCount": "0", "OwnerUserId": "1055604", "LastEditDate": "2013-06-16T07:32:44.577"}, "17127680": {"Id": "17127680", "PostTypeId": "2", "Body": "<p>The core of your question is: can <em>rvalues</em> be bound to <strong>non-const</strong> <em>lvalue</em> references?</p>\n<p>The Standard says <strong>no</strong>. <em>rvalues</em> can only be bound to <strong>const</strong> <em>lvalue</em> references.</p>\n<p>I believe the relevant Standard paragraph is <strong>8.5.3/5</strong>:</p>\n<blockquote>\n<p id=\"so_17127652_17127680_0\">A reference to type \u201ccv1 T1\u201d is initialized by an expression of type\n  \u201ccv2 T2\u201d as follows:</p>\n<p id=\"so_17127652_17127680_1\">...</p>\n<ul>\n<li>Otherwise, the reference shall be an lvalue reference to a non-volatile <strong>const</strong> type (i.e., cv1 shall be const), or the reference\n  shall be an rvalue reference.</li>\n</ul>\n</blockquote>\n<p>However Microsoft has a long-standing \"feature\" that allows this <strong>non-standard</strong> behaviour, which explains what you're witnessing.</p>\n", "LastEditorUserId": "2070725", "LastActivityDate": "2013-06-15T21:03:59.090", "Score": "6", "CreationDate": "2013-06-15T20:38:40.633", "ParentId": "17127652", "CommentCount": "9", "OwnerUserId": "2070725", "LastEditDate": "2013-06-15T21:03:59.090"}, "17127668": {"Id": "17127668", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17127652_17127668_0\">However, Microsoft compiler does accept it meaning that either it is accepting nonstandard code or C++ allows the particular case where an lvalue reference is bound to an rvalue lambda expression.</p>\n</blockquote>\n<p>MSVC is known for having this (not so great) compiler extension. It simply allows binding rvalues to lvalue references to non-<code>const</code>:</p>\n<pre><code>A&amp; x = A(); // Illegal in C++, allowed by MSVC\n</code></pre>\n", "LastActivityDate": "2013-06-15T20:37:09.497", "CommentCount": "3", "CreationDate": "2013-06-15T20:37:09.497", "ParentId": "17127652", "Score": "3", "OwnerUserId": "1932150"}});