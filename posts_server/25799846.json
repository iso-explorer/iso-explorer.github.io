post_cb({"25799846": {"CommentCount": "0", "AcceptedAnswerId": "25799885", "CreationDate": "2014-09-12T02:33:16.140", "LastActivityDate": "2014-09-12T03:10:02.790", "PostTypeId": "1", "ViewCount": "92", "FavoriteCount": "1", "Title": "How do I define a template member function outside of a full specialized template class's definition?", "Id": "25799846", "Score": "1", "Body": "<p>The following code can be build successfully.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\ntemplate &lt;class T&gt;\nstruct Foo\n{\n    template &lt;class S&gt;\n    void print(const T&amp; t, const S&amp; s);\n};\n\ntemplate &lt;&gt;\nstruct Foo&lt;int&gt;\n{\n    template &lt;class S&gt;\n    void print(const int&amp; t, const S&amp; s)\n    {\n        cout &lt;&lt; s &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl;\n    }\n};\n\nint main(void)\n{\n    string str(\"hello\");\n    Foo&lt;int&gt; foo;\n    foo.print(7, str);\n    return 0;\n}\n</code></pre>\n<p>But if I move the definition of the member function <code>Foo&lt;int&gt;::print(...)</code> outside the definition of the class <code>Foo&lt;int&gt;</code> like below </p>\n<pre><code>template &lt;&gt;\ntemplate &lt;class S&gt;\nvoid Foo&lt;int&gt;::print(const int&amp; t, const S&amp; s)\n{\n    cout &lt;&lt; s &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl;\n}\n</code></pre>\n<p>I got a GCC compiling error like this:</p>\n<pre><code>error: too many template-parameter-lists\n void Foo&lt;int&gt;::print(const int&amp; t, const S&amp; s)\n      ^\n</code></pre>\n<p>Where did I make a mistake?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "153487", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25799846_25799885_0": {"section_id": 267, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_25799846_25799885_0": {"section_id": 258, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_25799846_25799885_0": {"section_id": 274, "quality": 0.9722222222222222, "length": 35}}}, "25799885": {"ParentId": "25799846", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>\u00a714.7.3 [temp.expl.spec]/p5:</p>\n<blockquote>\n<p id=\"so_25799846_25799885_0\">Members of an explicitly specialized class template are defined in the\n  same manner as members of normal classes, and not using the\n  <code>template&lt;&gt;</code> syntax. The same is true when defining a member of an\n  explicitly specialized member class. However, <code>template&lt;&gt;</code> is used in\n  defining a member of an explicitly specialized member class template\n  that is specialized as a class template.</p>\n</blockquote>\n<p><code>print</code> is not a class template. Hence, remove the <code>template &lt;&gt;</code>:</p>\n<pre><code>template &lt;&gt;\nstruct Foo&lt;int&gt;\n{\n    template &lt;class S&gt;\n    void print(const int&amp; t, const S&amp; s);\n};\n\ntemplate &lt;class S&gt;\nvoid Foo&lt;int&gt;::print(const int&amp; t, const S&amp; s)\n{\n    cout &lt;&lt; s &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/59f3f417dc2ca0cf\" rel=\"nofollow\">Demo</a>.</p>\n<hr>\n<p>Note that if you do not explicitly specialize <code>Foo&lt;int&gt;</code>, but tries to define <code>Foo&lt;int&gt;::print</code> directly, then you are explicitly specializing a member of a particular implicit instantiation of <code>Foo</code>, and not defining a member of an explicit specialization. For that, you need <code>template &lt;&gt;</code>:</p>\n<pre><code>template &lt;class T&gt;\nstruct Foo\n{\n    template &lt;class S&gt;\n    void print(const T&amp; t, const S&amp; s);\n};\n\ntemplate &lt;&gt;\ntemplate &lt;class S&gt;\nvoid Foo&lt;int&gt;::print(const int&amp; t, const S&amp; s)\n{\n    cout &lt;&lt; s &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl;\n}\n</code></pre>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-09-12T03:10:02.790", "Id": "25799885", "Score": "4", "CreationDate": "2014-09-12T02:36:54.347", "LastActivityDate": "2014-09-12T03:10:02.790"}});