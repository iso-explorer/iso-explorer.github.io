post_cb({"bq_ids": {"n4140": {"so_30472731_30472768_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6796}}, "n3337": {"so_30472731_30472768_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6551}}, "n4659": {"so_30472731_30472768_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 8286}}}, "30472875": {"Id": "30472875", "PostTypeId": "2", "Body": "<p>It's likely that some header defined <code>__STDC_LIMIT_MACROS</code> and <code>__STDC_CONSTANT_MACROS</code> before <code>stdint.h</code> was included.</p>\n<p>Compiling on Linux with <code>g++ -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS a.cpp</code> should fix this issue on the older compilers.</p>\n<p><a href=\"https://stackoverflow.com/questions/986426/what-do-stdc-limit-macros-and-stdc-constant-macros-mean\">If you'd like to learn more about these macros...</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-27T03:54:50.583", "Score": "8", "CreationDate": "2015-05-27T03:54:50.583", "ParentId": "30472731", "CommentCount": "2", "OwnerUserId": "47453", "LastEditDate": "2017-05-23T11:46:14.360"}, "30472768": {"Id": "30472768", "PostTypeId": "2", "Body": "<p><strong>18.4.1 Header &lt;cstdint&gt; synopsis</strong></p>\n<blockquote>\n<p id=\"so_30472731_30472768_0\">The header also defines numerous macros of the form:</p>\n<blockquote>\n<p id=\"so_30472731_30472768_7\">INT_[FAST LEAST]{8 16 32 64}_MIN</p>\n<p id=\"so_30472731_30472768_8\">[U]INT_[FAST LEAST]{8 16 32 64}_MAX</p>\n<p id=\"so_30472731_30472768_9\">INT{MAX PTR}_MIN</p>\n<p id=\"so_30472731_30472768_10\">[U]INT{MAX PTR}_MAX</p>\n<p id=\"so_30472731_30472768_11\">{PTRDIFF SIG_ATOMIC WCHAR WINT}{_MAX _MIN}</p>\n<p id=\"so_30472731_30472768_12\"><strong>SIZE_MAX</strong></p>\n</blockquote>\n</blockquote>\n<p><strong>EDIT</strong></p>\n<p>In the current C++11/14 standard, <code>SIZE_MAX</code> is introduced and mentioned only in <code>&lt;cstdint&gt;</code>. It is also part of <code>C99</code>, of which specification C++11 fully includes via the <code>&lt;cxxx&gt;</code> headers. So it seems it was not defined prior to C++11.</p>\n", "LastEditorUserId": "3093378", "LastActivityDate": "2015-05-27T03:50:55.173", "Score": "7", "CreationDate": "2015-05-27T03:41:47.490", "ParentId": "30472731", "CommentCount": "7", "OwnerUserId": "3093378", "LastEditDate": "2015-05-27T03:50:55.173"}, "30472731": {"ViewCount": "7194", "Body": "<p>I'm working on an existing C++ codebase that happens to use <code>SIZE_MAX</code> in a couple of places. I did some refactoring and now <code>SIZE_MAX</code> is not defined in one of the modules. This problem appeared when <a href=\"http://travis-ci.org\" rel=\"noreferrer\">Travis-CI</a> attempted to build the project on Linux. It worked fine before I refactored stuff, but tracing which exact header files were included is difficult.</p>\n<p>In an attempt to replicate the problem locally, I installed an Ubuntu VM with the default gcc and was able to reproduce it. Here's the relevant source:</p>\n<pre><code>#include &lt;stddef.h&gt;\n\nint main()\n{\n    size_t a = SIZE_MAX;\n}\n</code></pre>\n<p>The command line is simply:</p>\n<pre><code>g++ a.cpp\n</code></pre>\n<p>The error is:</p>\n<pre><code>a.cpp: In function \u2018int main()\u2019:\na.cpp:5:16: error: \u2018SIZE_MAX\u2019 was not declared in this scope\n</code></pre>\n<p>System info:</p>\n<pre><code>$ uname -a\nLinux quartz 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:39:31 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\n$ gcc --version\ngcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3\n</code></pre>\n<p>I have tried including <code>cstdint</code>, <code>stdint.h</code>, <code>limits.h</code>, <code>inttypes.h</code>, <code>stdio.h</code>, <code>stdlib.h</code>, and probably some others, and I can't figure out which specific header file I need for <code>SIZE_MAX</code>.</p>\n<p>It is important to note that the program I'm working on compiled fine, with <code>SIZE_MAX</code> used in various places, before I made some changes. The changes I made caused it to become undefined in <em>one</em> <code>.cpp</code> source file where it was used (the others continue to be fine). So there exists <em>some</em> header file on my system where it is correctly defined.</p>\n", "AcceptedAnswerId": "30472875", "Title": "Which C++ standard header defines SIZE_MAX?", "CreationDate": "2015-05-27T03:38:21.483", "Id": "30472731", "CommentCount": "6", "LastEditDate": "2015-05-27T03:48:56.880", "PostTypeId": "1", "LastEditorUserId": "893", "LastActivityDate": "2015-09-16T11:09:39.667", "Score": "11", "OwnerUserId": "893", "Tags": "<c++><header><size-t><stdint>", "AnswerCount": "3"}, "32343959": {"Id": "32343959", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30472731_32343959_0\">Which C++ standard header defines SIZE_MAX?</p>\n</blockquote>\n<p>Its supposed to be defined in <code>&lt;cstdint&gt;</code>, but its optional.</p>\n<p>Here are the results on Fedora 22 with GCC 5.1:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>#include &lt;cstdint&gt;\n\n// use SIZE_MAX\n</code></pre>\n<p>Results in:</p>\n<pre class=\"lang-none prettyprint-override\"><code>g++ -DNDEBUG -g -O2 -fPIC -march=native -pipe -c filters.cpp\nIn file included from /usr/include/c++/5.1.1/cstdint:35:0,\n                 from filters.cpp:14:\n/usr/include/c++/5.1.1/bits/c++0x_warning.h:32:2: error: #error This file requires  \ncompiler and library support for the ISO C++ 2011 standard. This support is currently\nexperimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options.\n #error This file requires compiler and library support for the \\\n  ^\nfilters.cpp: In constructor \u2018Filter::Filter(BufferedTransformation*)\u2019:\nfilters.cpp:305:36: error: \u2018SIZE_MAX\u2019 was not declared in this scope\n  : Filter(attachment), m_firstSize(SIZE_MAX), m_blockSize(0), m_lastSize(SIZE_M\n                                    ^\n</code></pre>\n<p>It was simply easier to do the following, and stop worrying about non-portable optional-ness that still causes problems in 2015.</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>#include &lt;limits&gt;\n\n#ifndef SIZE_MAX\n# ifdef __SIZE_MAX__\n#  define SIZE_MAX __SIZE_MAX__\n# else\n#  define SIZE_MAX std::numeric_limits&lt;size_t&gt;::max()\n# endif\n#endif\n</code></pre>\n<p>Trying <code>__SIZE_MAX__</code> gets you back to the compile time constant that you probably crave. You can see if its defined in the preprocessor with <code>cpp -dM &lt; /dev/null | grep __SIZE_MAX__</code>.</p>\n<p>(And how/why <code>numeric_limits&lt;size_t&gt;::max()</code> is <strong><em>not</em></strong> a compile time constant is another C++ mystery, but that's a different problem).</p>\n", "LastEditorUserId": "608639", "LastActivityDate": "2015-09-16T11:09:39.667", "Score": "1", "CreationDate": "2015-09-02T02:57:44.800", "ParentId": "30472731", "CommentCount": "1", "OwnerUserId": "608639", "LastEditDate": "2015-09-16T11:09:39.667"}});