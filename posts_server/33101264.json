post_cb({"bq_ids": {"n4140": {"so_33101264_33101406_1": {"length": 19, "quality": 0.95, "section_id": 4907}}, "n3337": {"so_33101264_33101406_1": {"length": 19, "quality": 0.95, "section_id": 4702}}, "n4659": {"so_33101264_33101406_1": {"length": 19, "quality": 0.95, "section_id": 6316}}}, "33101406": {"Id": "33101406", "PostTypeId": "2", "Body": "<p>It must be in the global namespace.</p>\n<blockquote>\n<p id=\"so_33101264_33101406_0\"><strong>D.5 C standard library headers [depr.c.headers]</strong></p>\n<p id=\"so_33101264_33101406_1\">2 Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname</code> header is placed within the global namespace scope. [...]</p>\n</blockquote>\n<p>There is no exception here for names that are specific to C++. If C++ adds a name to <code>&lt;cstddef&gt;</code> that C's <code>&lt;stddef.h&gt;</code> doesn't provide, then C++'s <code>&lt;stddef.h&gt;</code> still needs to provide it too.</p>\n", "LastActivityDate": "2015-10-13T11:24:22.933", "CommentCount": "2", "CreationDate": "2015-10-13T11:24:22.933", "ParentId": "33101264", "Score": "7", "OwnerUserId": "743382"}, "33101264": {"ViewCount": "139", "Body": "<p>I see that Microsoft's <code>stddef.h</code> defines <code>nullptr_t</code> thus:</p>\n<pre><code>namespace std\n{\n    typedef decltype(__nullptr) nullptr_t;\n}\n\nusing ::std::nullptr_t;\n</code></pre>\n<p>The <em><code>using</code> decleration</em> injects <code>nullptr_t</code> into the global namespace. I can't find anything in the standard that says that this should be done.</p>\n<p><strike>I also see that in GCC <code>nullptr_t</code> isn't in the global namespace.</strike></p>\n<p>Can both implementations be allowed or is one of them a bug?\n</p> <em>My bad, GCC behaves the same as CL</em>.\n<hr>\n<p><strong>Edit:</strong> The same happens with <code>cstddef</code>, the following compiles fine with VC (<a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow\">online too</a>).</p>\n<pre><code>#include &lt;cstddef&gt;\n\nint main()\n{\n    nullptr_t nil = nullptr;\n}\n</code></pre>\n</hr>", "AcceptedAnswerId": "33101406", "Title": "Should `nullptr_t` be part of the global namespace?", "CreationDate": "2015-10-13T11:17:42.770", "Id": "33101264", "CommentCount": "5", "LastEditDate": "2015-10-13T13:01:38.107", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-10-13T13:01:38.107", "Score": "4", "OwnerUserId": "3848", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "2"}, "33101881": {"Id": "33101881", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33101264_33101881_0\">I also see that in GCC nullptr_t isn't in the global namespace.</p>\n</blockquote>\n<p>Are you sure about that?</p>\n<p><a href=\"https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ginclude/stddef.h;hb=HEAD#l436\" rel=\"nofollow\">https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ginclude/stddef.h;hb=HEAD#l436</a></p>\n<p>You might have an older version of GCC, I see it there for GCC 4.8.0 and later.</p>\n<blockquote>\n<p id=\"so_33101264_33101881_1\">The same happens with cstddef, </p>\n</blockquote>\n<p>That's not guaranteed to work. To use <code>::nullptr_t</code> portably you must include <code>&lt;stddef.h&gt;</code>. To use <code>std::nullptr_t</code> portably you must include <code>&lt;cstddef&gt;</code>.</p>\n", "LastActivityDate": "2015-10-13T11:46:32.107", "CommentCount": "0", "CreationDate": "2015-10-13T11:46:32.107", "ParentId": "33101264", "Score": "2", "OwnerUserId": "981959"}});