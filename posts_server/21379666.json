post_cb({"21379728": {"ParentId": "21379666", "CommentCount": "2", "Body": "<pre><code>template &lt;typename T&gt;\nvoid f() { ... }\n\nvoid f() { f&lt;string&gt;(); }\n</code></pre>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "21379728", "Score": "9", "CreationDate": "2014-01-27T11:30:51.730", "LastActivityDate": "2014-01-27T11:30:51.730"}, "21379693": {"ParentId": "21379666", "PostTypeId": "2", "CommentCount": "4", "Body": "<pre><code>#include &lt;string&gt;\n\ntemplate &lt;typename T=std::string&gt;\nvoid f() {}\n\nint main()\n{\n  f();\n}\n</code></pre>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2014-01-27T12:29:43.057", "Id": "21379693", "Score": "2", "CreationDate": "2014-01-27T11:29:20.677", "LastActivityDate": "2014-01-27T12:29:43.057"}, "21380433": {"ParentId": "21379666", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>You can give default type for template arguments:</p>\n<pre><code>template&lt;class T=std::string&gt;\nfoo()\n</code></pre>\n<p>Note: If you give default argument to template class, you must declare the default version with <code>Foo&lt;&gt;</code>. This is not necessary when calling templated functions; You can call the default version without angle brackets: <code>foo()</code></p>\n<p>Another note: This works for functions because of template argument deduction. Quote from the standard (January 2012 draft \u00a714.8.2.5) emphasis mine:</p>\n<blockquote>\n<p id=\"so_21379666_21380433_0\">The resulting substituted and adjusted function type is used as the\n  type of the function template for template argument deduction. <strong>If a\n  template argument has not been deduced, its default template argument,\n  if any, is used</strong>. [ Example:</p>\n</blockquote>\n<pre><code>template &lt;class T, class U = double&gt;\nvoid f(T t = 0, U u = 0);\nvoid g() {\n    f(1, \u2019c\u2019);     //f&lt;int,char&gt;(1,\u2019c\u2019)\n    f(1);          //f&lt;int,double&gt;(1,0)\n    f();           //error: T cannot be deduced\n    f&lt;int&gt;();      //f&lt;int,double&gt;(0,0)\n    f&lt;int,char&gt;(); //f&lt;int,char&gt;(0,0)\n}\n</code></pre>\n", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2014-01-27T16:32:22.617", "Id": "21380433", "Score": "8", "CreationDate": "2014-01-27T12:04:56.027", "LastActivityDate": "2014-01-27T16:32:22.617"}, "21379666": {"CommentCount": "3", "ViewCount": "122", "PostTypeId": "1", "LastEditorUserId": "661519", "CreationDate": "2014-01-27T11:28:22.040", "LastActivityDate": "2014-01-27T16:32:22.617", "Title": "Is it possible to have functions generated from template as f() and f<T>()?", "LastEditDate": "2014-01-27T11:28:54.143", "Id": "21379666", "Score": "1", "Body": "<p>Is it possible to have functions generated from template as <code>f()</code> and <code>f&lt;T&gt;()</code> ?</p>\n<p>I want to call f most of the time with the type specified, such as:</p>\n<pre><code>f&lt;string&gt;();\nf&lt;int&gt;();\n</code></pre>\n<p>but I also need to call it like this:</p>\n<pre><code>f();\n</code></pre>\n<p>and the type when not specified it should be string. Is this possible?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3111311", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_21379666_21380433_0": {"section_id": 297, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_21379666_21380433_0": {"section_id": 288, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_21379666_21380433_0": {"section_id": 304, "quality": 0.9047619047619048, "length": 19}}}});