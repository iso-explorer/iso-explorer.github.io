post_cb({"20803575": {"CommentCount": "3", "AcceptedAnswerId": "20815574", "PostTypeId": "1", "LastEditorUserId": "1141471", "CreationDate": "2013-12-27T15:51:28.597", "LastActivityDate": "2013-12-28T14:17:14.067", "LastEditDate": "2013-12-28T14:03:18.750", "ViewCount": "775", "FavoriteCount": "1", "Title": "map many values into a single key in boost::unordered_map?", "Id": "20803575", "Score": "2", "Body": "<p>I don't see a way to map multiple values to one key in a <a href=\"http://www.boost.org/doc/libs/1_39_0/doc/html/boost/unordered_map.html\" rel=\"nofollow\"><code>boost::unordered_map</code></a>. My map is declared as:</p>\n<pre><code>boost::unordered_map&lt; uint16_t, Myclass* &gt; myMap_;\n</code></pre>\n<p>I think I could achieve this by storing objects of MyClass in containers, i.e:</p>\n<pre><code>boost::unordered_map&lt; uint16_t, vector&lt;Myclass*&gt; &gt; myMap_;\n</code></pre>\n<p>however unordered_map provides the meanings to manage load factor size, therefore I wonder if it really can't or <strong>maybe it can somehow tie multiple values into a single key</strong>?</p>\n<pre><code>float max_load_factor() const;\n</code></pre>\n<p>Returns: Returns the current maximum load factor.</p>\n<pre><code>void max_load_factor(float z);\n</code></pre>\n<p>Effects: Changes the container's maximum load factor, using z as a hint.</p>\n<pre><code>size_type bucket_size(size_type n) const;\n</code></pre>\n<p>Requires: n &lt; bucket_count()\nReturns: The number of elements in bucket n.</p>\n<hr>\n<p>I know I can use multimap</p>\n<pre><code>typedef boost::unordered_multimap&lt; int, MyClass*, MyHash&lt;int&gt; &gt; HashMMap;\n</code></pre>\n<p>however I wondered if multiple values for a single key are possible somehow with a use of unordered_map.</p>\n</hr>", "Tags": "<c++><boost><unordered-map>", "OwnerUserId": "1141471", "AnswerCount": "1"}, "20815574": {"ParentId": "20803575", "CommentCount": "0", "Body": "<p>From C++11 \u00a723.2.5 <em>Unordered associative containers</em></p>\n<blockquote>\n<p id=\"so_20803575_20815574_0\">An unordered associative container supports unique keys if it may contain at most one element for each key. Otherwise, it supports equivalent keys. <code>unordered_set</code> and <code>unordered_map</code> support unique keys. <code>unordered_multiset</code> and <code>unordered_multimap</code> support equivalent keys. </p>\n</blockquote>\n<p>If you want more than one value, you'll need to use a multimap (C++11 or from boost), or store a container as the value. A plain <code>unordered_map</code> will not do it.</p>\n", "OwnerUserId": "635608", "PostTypeId": "2", "Id": "20815574", "Score": "2", "CreationDate": "2013-12-28T14:17:14.067", "LastActivityDate": "2013-12-28T14:17:14.067"}, "bq_ids": {"n4140": {"so_20803575_20815574_0": {"section_id": 758, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_20803575_20815574_0": {"section_id": 746, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_20803575_20815574_0": {"section_id": 818, "quality": 0.9259259259259259, "length": 25}}}});