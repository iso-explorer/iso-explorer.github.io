post_cb({"3880756": {"ParentId": "3880683", "CommentCount": "0", "Body": "<p>During overload resolution it is determined that the correct function to call when you write <code>f(sr)</code> is <code>void f(S&lt;int&gt;&amp;);</code> without explicitly instantiating the definition of class template <code>S</code>, it is unspecified whether your class is actually instantiated.</p>\n<p>Undefined behaviour and Unspecified behaviour are two completely different things.</p>\n<blockquote>\n<p id=\"so_3880683_3880756_0\">instantiation of S&lt; int &gt; allowed but not required</p>\n</blockquote>\n<p>For example:</p>\n<pre><code>template &lt;class T =int&gt; \nstruct S \n{\n  operator int();\n};\n</code></pre>\n<p>is allowed but not required.</p>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "3880756", "Score": "0", "CreationDate": "2010-10-07T10:32:28.253", "LastActivityDate": "2010-10-07T10:32:28.253"}, "3880746": {"ParentId": "3880683", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><em>Unspecified</em> means that</p>\n<ol>\n<li>it's up to the compiler whether it will actually instantiate the templated class or not and </li>\n<li>the compiler designers must have chosen some strategy for dealing with such situations and</li>\n<li>the compiler designers are not required to document their choise.</li>\n</ol>\n<p>Anyway this is correct behavior unlike <em>undefined behavior</em> which is erroneous behavior. See <a href=\"https://stackoverflow.com/questions/2397984/unspecified-behaviour-vs-undefined-behaviour-vs-implementation-defined-behaviour\">this related question</a> for detailed explanation.</p>\n", "OwnerUserId": "57428", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:26:48.637", "Id": "3880746", "Score": "3", "CreationDate": "2010-10-07T10:30:36.960", "LastActivityDate": "2010-10-07T10:30:36.960"}, "3880683": {"CommentCount": "0", "ViewCount": "1755", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-10-07T10:21:02.907", "LastActivityDate": "2010-10-07T10:53:55.830", "AnswerCount": "2", "LastEditDate": "2017-05-23T12:26:48.637", "AcceptedAnswerId": "3880756", "LastEditorDisplayName": "BE Student", "Title": "Confused about implicit template instantiation", "Id": "3880683", "Score": "5", "Body": "<p>This is the statement from the C++03 standard, \u00a714.7.1p5:</p>\n<blockquote>\n<p id=\"so_3880683_3880683_0\">If the overload resolution process can determine the correct function \n        to call without instantiating a class template definition, it is \n         unspecified whether that instantiation actually takes place. [<em>Example:</em></p>\n<pre><code>template &lt;class T&gt; struct S {\n       operator int();\n};\n\nvoid f(int);\nvoid f(S&lt;int&gt;&amp;);\nvoid f(S&lt;float&gt;);\n\nvoid g(S&lt;int&gt;&amp; sr) {\n        f(sr);     // instantiation of S&lt;int&gt; allowed but not required\n                   // instantiation of S&lt;float&gt; allowed but not required\n};\n</code></pre>\n<p id=\"so_3880683_3880683_1\">\u2014<em>end example</em>]</p>\n</blockquote>\n<p>I am unable to understand this point.  Does it have undefined behavior?</p>\n<p>I found another <a href=\"https://stackoverflow.com/questions/3387991\">similar problem</a>, which I also don't understand.  There it is explained that the correct behavior is undefined, but what does that mean?</p>\n<p>here:\n<a href=\"https://stackoverflow.com/questions/3387991\">MSVC: Implicit Template Instantiation, though templated constructor not used</a></p>\n", "Tags": "<c++><templates>", "OwnerDisplayName": "BE Student"}, "bq_ids": {"n4140": {"so_3880683_3880683_0": {"section_id": 239, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_3880683_3880683_0": {"section_id": 231, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_3880683_3880683_0": {"section_id": 248, "quality": 0.6842105263157895, "length": 13}}}});