post_cb({"3673353": {"ViewCount": "3851", "Body": "<p>Consider the following snippet:</p>\n<pre><code>void Foo() // 1\n{\n}\n\nnamespace\n{\n  void Foo() // 2\n  {\n  }\n}\n\nint main()\n{\n  Foo(); // Ambiguous.\n  ::Foo(); // Calls the Foo in the global namespace (Foo #1).\n\n  // I'm trying to call the `Foo` that's defined in the anonymous namespace (Foo #2).\n}\n</code></pre>\n<p>How can I refer to something inside an anonymous namespace in this case?</p>\n", "AcceptedAnswerId": "3673368", "Title": "Anonymous Namespace Ambiguity", "CreationDate": "2010-09-09T02:21:22.467", "Id": "3673353", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-11-27T15:57:13.373", "Score": "15", "OwnerUserId": "442995", "Tags": "<c++><namespaces><anonymous><ambiguity>", "AnswerCount": "5"}, "3673399": {"Id": "3673399", "PostTypeId": "2", "Body": "<p>While Georg gives standard-complient, correct, right, and respectable answer, I'd like to offer my hacky one - <em>use another namespace within the anonymous namespace</em>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nnamespace\n{\nnamespace inner\n{\n    int cout = 42;\n}\n}\n\nint main()\n{\n    cout &lt;&lt; inner::cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2010-09-09T02:36:37.477", "CommentCount": "0", "CreationDate": "2010-09-09T02:36:37.477", "ParentId": "3673353", "Score": "4", "OwnerUserId": "106671"}, "bq_ids": {"n4140": {"so_3673353_3673368_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5482}, "so_3673353_3673368_0": {"length": 4, "quality": 1.0, "section_id": 5482}}, "n3337": {"so_3673353_3673368_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5268}, "so_3673353_3673368_0": {"length": 4, "quality": 1.0, "section_id": 5268}}, "n4659": {"so_3673353_3673368_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 6917}, "so_3673353_3673368_0": {"length": 4, "quality": 1.0, "section_id": 6917}}}, "3673402": {"Id": "3673402", "PostTypeId": "2", "Body": "<p>The only solution I can think of that doesn't modify the existing namespace arrangement is to delegate <code>main</code> to a function in the anonymous namespace. (<code>main</code> itself is required to be a global function (\u00a73.6.1/1), so it cannot be in an anonymous namespace.)</p>\n<pre><code>void Foo() // 1\n{\n}\n\nnamespace\n{\n  void Foo() // 2\n  {\n  }\n}\n\nnamespace { // re-open same anonymous namespace\n\n    int do_main()\n    {\n      Foo(); // Calls local, anonymous namespace (Foo #2).\n      ::Foo(); // Calls the Foo in the global namespace (Foo #1).\n\n      return 0; // return not optional\n    }\n\n}\n\nint main() {\n    return do_main();\n}\n</code></pre>\n", "LastEditorUserId": "153285", "LastActivityDate": "2010-09-09T03:08:39.367", "Score": "2", "CreationDate": "2010-09-09T02:37:57.297", "ParentId": "3673353", "CommentCount": "0", "OwnerUserId": "153285", "LastEditDate": "2010-09-09T03:08:39.367"}, "3673368": {"Id": "3673368", "PostTypeId": "2", "Body": "<p>You can't. The standard contains the following section (<em>\u00a77.3.1.1</em>, C++03):</p>\n<blockquote>\n<p id=\"so_3673353_3673368_0\">An unnamed-namespace-definition behaves as if it were replaced by</p>\n</blockquote>\n<pre><code>  namespace unique { /* empty body */ }\n  using namespace unique;\n  namespace unique { namespace-body }\n</code></pre>\n<blockquote>\n<p id=\"so_3673353_3673368_1\">where all occurrences of unique in a\n  translation unit are replaced by the\n  same identifier and this identifier\n  differs from all other identifiers in the entire program.</p>\n</blockquote>\n<p>Thus you have no way to refer to that unique name.</p>\n<p>You could however technically use something like the following instead:</p>\n<pre><code>int i;\n\nnamespace helper {\n    namespace {\n        int i;\n        int j;\n    }\n}\n\nusing namespace helper;\n\nvoid f() { \n    j++; // works\n    i++; // still ambigous\n    ::i++; // access to global namespace\n    helper::i++; // access to unnamed namespace        \n}\n</code></pre>\n", "LastEditorUserId": "168225", "LastActivityDate": "2010-09-09T02:35:02.383", "Score": "15", "CreationDate": "2010-09-09T02:27:13.777", "ParentId": "3673353", "CommentCount": "6", "OwnerUserId": "168225", "LastEditDate": "2010-09-09T02:35:02.383"}, "3673387": {"Id": "3673387", "PostTypeId": "2", "Body": "<p>The only real way is to put the code you want to access that namespace within the namespace itself. There's no way to resolve to the unnamed namespace otherwise, since it has no identifier you can give it to solve the ambiguous resolution problem.</p>\n<p>If your code is inside the namespace{} block itself, the local name gets priority over the global one, so a Foo() will call the Foo() within your namespace, and a ::Foo() will call the namespace at global scope.</p>\n", "LastActivityDate": "2010-09-09T02:32:15.177", "CommentCount": "0", "CreationDate": "2010-09-09T02:32:15.177", "ParentId": "3673353", "Score": "0", "OwnerUserId": "291907"}, "20247148": {"Id": "20247148", "PostTypeId": "2", "Body": "<p>Just rename the local namespace function.</p>\n", "LastActivityDate": "2013-11-27T15:57:13.373", "CommentCount": "0", "CreationDate": "2013-11-27T15:57:13.373", "ParentId": "3673353", "Score": "0", "OwnerUserId": "697099"}});