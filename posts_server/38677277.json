post_cb({"38677532": {"ParentId": "38677277", "CommentCount": "0", "Body": "<p>From [basic.stc.dynamic.allocation]:</p>\n<blockquote>\n<p id=\"so_38677277_38677532_0\">The allocation function attempts to allocate the requested amount of storage. If it is successful, it shall return the address of the start of a block of storage whose length in bytes shall be <strong>at least as large as the requested size</strong>.</p>\n</blockquote>\n<p>Emphasis added. So yes, the standard permits a valid storage region from having more space than was strictly asked for.</p>\n", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "38677532", "Score": "4", "CreationDate": "2016-07-30T19:02:18.737", "LastActivityDate": "2016-07-30T19:02:18.737"}, "bq_ids": {"n4140": {"so_38677277_38677532_0": {"section_id": 7177, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_38677277_38677532_0": {"section_id": 6921, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_38677277_38677532_0": {"section_id": 8685, "quality": 0.9523809523809523, "length": 20}}}, "38677404": {"ParentId": "38677277", "CommentCount": "0", "Body": "<p>This kind of thing is fairly common.  However, you would normally store the extra data at the start rather than at the end (minding your platform's max alignment, i.e. you might need padding).  There's nothing in the language that prohibits what you're proposing.</p>\n", "OwnerUserId": "4323", "PostTypeId": "2", "Id": "38677404", "Score": "9", "CreationDate": "2016-07-30T18:47:23.473", "LastActivityDate": "2016-07-30T18:47:23.473"}, "38677277": {"CommentCount": "2", "ViewCount": "71", "CreationDate": "2016-07-30T18:34:30.123", "LastActivityDate": "2016-07-30T19:02:18.737", "Title": "Operator new returning more memory than asked to", "AcceptedAnswerId": "38677404", "PostTypeId": "1", "Id": "38677277", "Score": "2", "Body": "<p>I want to override operator <code>new</code> to have this signature:</p>\n<pre><code>void* operator new(size_t bytes, MemoryManager* man);\n</code></pre>\n<p>And the class <code>MemoryManager</code> looks like this:</p>\n<pre><code>struct MemoryManager\n{\n  virtual void* Allocate(size_t bytes) = 0;\n  virtual void Deallocate(void* ptr) = 0;\n};\n</code></pre>\n<p>Now what I want to do is have the overloaded <code>new</code> function allocate more memory than asked to do.  And then in the last few bytes it will store a pointer to the <code>MemoryManager</code> object, so that it knows what function to use in my custom <code>delete</code> operator.  So it would look allocate something like this:</p>\n<pre><code> __________\n|          |   _\n|__________|    |\n|          |    |\n|__________|    |\n|          |    | &lt;---- Bytes requested for object\n|__________|    |\n|          |    |\n|__________|    |\n|          |   _|\n|__________|   \n|          |   _ \n|__________|    | &lt;---- Pointer to MemoryManager\n|          |   _|\n|__________|   \n</code></pre>\n<p>Now my real question is: does doing this result in undefined behavior?  Some things that could be a problem:</p>\n<ul>\n<li>It might be undefined for <code>new</code> to return more bytes than requested</li>\n<li>You might run into alignment issues (but those could probably be overcome)</li>\n</ul>\n", "Tags": "<c++><language-lawyer><new-operator><undefined-behavior>", "OwnerUserId": "6149078", "AnswerCount": "2"}});