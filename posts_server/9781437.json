post_cb({"9781437": {"CommentCount": "4", "ViewCount": "411", "PostTypeId": "1", "LastEditorUserId": "957997", "CreationDate": "2012-03-20T04:40:09.240", "LastActivityDate": "2012-10-02T18:27:42.597", "Title": "| operator , ++ and I operator", "AcceptedAnswerId": "9781457", "LastEditDate": "2012-10-02T18:27:42.597", "Id": "9781437", "Score": "3", "Body": "<p>I think I will get     <code>12</code>, not <code>7</code>.\n <code>w++</code>, then <code>w</code> will be <code>4</code>, which is <code>100</code>, and <code>w++</code>, <code>w</code> will be <code>8</code>, <code>1000</code>;\nso <code>w++|z++</code> will be <code>100|1000 = 1100</code> will be <code>12</code>.</p>\n<p>what's wrong with me?</p>\n<pre><code>int main()\n{\n    int  w=3, z=7; \n    printf(\"%d\\n\", w++|z++);\n}\n</code></pre>\n", "Tags": "<c++><operator-keyword>", "OwnerUserId": "1279988", "AnswerCount": "6"}, "9781496": {"ParentId": "9781437", "CommentCount": "0", "Body": "<p>You are doing post-increment (<code>i++</code>) which takes the value of <code>i</code> first, then only increases it's value.</p>\n<p>If you want to achieve what you said in your question, do this: <code>++w | ++z</code></p>\n", "OwnerUserId": "816416", "PostTypeId": "2", "Id": "9781496", "Score": "1", "CreationDate": "2012-03-20T04:47:48.190", "LastActivityDate": "2012-03-20T04:47:48.190"}, "9781462": {"ParentId": "9781437", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Those are <em>post</em> increment operators; they take effect <em>after</em> the operation, so 3 and 7 are used in the operation.</p>\n", "OwnerUserId": "20862", "LastEditorUserId": "20862", "LastEditDate": "2012-03-20T04:55:56.757", "Id": "9781462", "Score": "2", "CreationDate": "2012-03-20T04:42:50.153", "LastActivityDate": "2012-03-20T04:55:56.757"}, "9781490": {"ParentId": "9781437", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>x++</code> increments <code>x</code>, but it evaluates to the old value of <code>w</code>.</p>\n<p>So <code>w++|z++</code> evaluates to <code>3|7</code> (which happens to be 7 on your implementation), and increments <code>w</code> and <code>z</code> as a side effect.</p>\n<p>If you wanted the behaviour that you were expecting, you could use the prefix operator <code>++x</code>, which increments its <code>x</code> and evaluates to the new value of <code>x</code>.</p>\n", "OwnerUserId": "485561", "LastEditorUserId": "485561", "LastEditDate": "2012-03-20T04:53:20.253", "Id": "9781490", "Score": "1", "CreationDate": "2012-03-20T04:47:18.490", "LastActivityDate": "2012-03-20T04:53:20.253"}, "9781457": {"ParentId": "9781437", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The problem is that by using <code>w++|z++</code>, you're first using the value of <code>w</code> and ORing that by the current value of <code>z</code>, then incrementing each.  Use <code>++w|++z</code> instead, and the numbers will <em>first</em> be incremented, then used.</p>\n<pre><code>int main()\n{\n    int x = 10;\n\n    // prints 10\n    printf(\"%d\\n\", x++);\n    // prints 11\n    printf(\"%d\\n\", x);\n\n    x = 10;\n    // prints 11\n    printf(\"%d\\n\" ++x);\n    // prints 11\n    printf(\"%d\\n\" x);\n}\n</code></pre>\n<p>The same can be done with <code>--x</code> and <code>x--</code>.  For more information, see <a href=\"https://stackoverflow.com/questions/24853/what-is-the-difference-between-i-and-i\">this relevant question</a>.</p>\n", "OwnerUserId": "455678", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:50:34.037", "Id": "9781457", "Score": "2", "CreationDate": "2012-03-20T04:42:21.250", "LastActivityDate": "2012-03-20T04:49:21.150"}, "9781778": {"ParentId": "9781437", "CommentCount": "0", "Body": "<p>You have probably misunderstood the <code>post-increment</code> operator which is very common among the beginners, so don't worry. Over time you'll get it right.</p>\n<p>Take a look at the word <code>post-increment</code>. There is a <code>post</code> word in it which generally signifies <code>after</code>. It means that the increment will happen <code>after</code> everything else has been executed. This is how I used to remember it.</p>\n<p>So, if you take a look at your program now - </p>\n<pre><code>int main()\n{\n    int  w=3, z=7; \n    printf(\"%d\\n\", w++|z++);\n}\n</code></pre>\n<p>then it will become clear that after the <code>printf</code> function itself has been executed, the increment will happen. So you will get the value of <code>w</code> and <code>z</code> as <code>3</code> and <code>7</code>, respectively in the evaluation of the second argument expression of <code>printf</code>.</p>\n<p>The official C++11 standard, (\u00a75.2.6, final version) says - </p>\n<blockquote>\n<p id=\"so_9781437_9781778_0\">The value of a postfix ++ expression is the value of its operand. [Note:the value obtained is a copy of the original value \u2014 end note] </p>\n</blockquote>\n<p>So that means the value of the postfix <code>w++</code> expression, is the value of the operand itself, that is, the value of the <code>w</code>, which is 3 and the value of the second expression <code>z++</code> will be 7. These values will then be used in the calculation of <code>3|7</code> and after that, the variables will be incremented. </p>\n", "OwnerUserId": "245679", "PostTypeId": "2", "Id": "9781778", "Score": "0", "CreationDate": "2012-03-20T05:30:46.410", "LastActivityDate": "2012-03-20T05:30:46.410"}, "bq_ids": {"n4140": {"so_9781437_9781778_0": {"section_id": 6009, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_9781437_9781778_0": {"section_id": 5777, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_9781437_9781778_0": {"section_id": 7508, "quality": 0.7333333333333333, "length": 11}}}, "9781459": {"ParentId": "9781437", "CommentCount": "0", "Body": "<p>You are misunderstanding the <em>postfix</em> <code>++</code> operator. The value of the variable is used <em>before</em> the variable is incremented. Your analysis would be correct for the <em>prefix</em> <code>++</code> operator, as in <code>++w|++z</code>.</p>\n", "OwnerUserId": "893", "PostTypeId": "2", "Id": "9781459", "Score": "3", "CreationDate": "2012-03-20T04:42:32.390", "LastActivityDate": "2012-03-20T04:42:32.390"}});