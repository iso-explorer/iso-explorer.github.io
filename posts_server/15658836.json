post_cb({"bq_ids": {"n4140": {"so_15658836_15667188_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 2171}, "so_15658836_15667188_1": {"length": 35, "quality": 1.0, "section_id": 2172}}, "n3337": {"so_15658836_15667188_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 2159}, "so_15658836_15667188_1": {"length": 35, "quality": 1.0, "section_id": 2160}}, "n4659": {"so_15658836_15667188_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 2444}, "so_15658836_15667188_1": {"length": 35, "quality": 1.0, "section_id": 2445}}}, "15658836": {"ViewCount": "752", "Body": "<p>I'm trying to parse a file using <code>std::istream</code> and want to use exceptions to simplify error handling. But the stream never throws exceptions on <em>eof</em> even though they are enabled.</p>\n<p>Consider the following snippet:</p>\n<pre><code>std::string line(\"Lorem ipsum\");\nstd::istringstream is(line);\nis.exceptions(std::ios::eofbit | std::ios::failbit);\n\nstd::string value1, value2, value3;\nis &gt;&gt; value1;\nstd::cout &lt;&lt; is.eof() &lt;&lt; std::endl;\nis &gt;&gt; value2;\nstd::cout &lt;&lt; is.eof() &lt;&lt; std::endl;\nis &gt;&gt; value3;\nstd::cout &lt;&lt; is.eof() &lt;&lt; std::endl;\n</code></pre>\n<p>After reading <em>value2</em>, <code>eof()</code> returns <em>true</em> but no exception gets thrown at any time even though the stream is instructed to do so (see line 3). At the end, <em>value3</em> contains an empty string.</p>\n<p>What am I missing?</p>\n<p>In case it matters: I'm using the LLVM libc++ that is part of Xcode 4.6.1 (LLVM C++ with C++11 support).</p>\n", "AcceptedAnswerId": "15667188", "Title": "std::istream does not throw eof exception (that has been enabled)", "CreationDate": "2013-03-27T12:30:39.857", "Id": "15658836", "CommentCount": "3", "LastEditDate": "2013-03-27T13:14:02.190", "PostTypeId": "1", "LastEditorUserId": "110396", "LastActivityDate": "2013-03-27T18:58:07.783", "Score": "3", "OwnerUserId": "110396", "Tags": "<c++><stl><llvm><istream>", "AnswerCount": "1"}, "15667188": {"Id": "15667188", "PostTypeId": "2", "Body": "<p>I've just reviewed both the libc++ implementation and the parts of the standard which specifies this behavior:</p>\n<p>27.7.2.1 Class template basic_istream [istream]/p3:</p>\n<blockquote>\n<p id=\"so_15658836_15667188_0\">If <code>rdbuf()-&gt;sbumpc()</code> or <code>rdbuf()-&gt;sgetc()</code> returns <code>traits::eof()</code>, then\n  the input function, except as explicitly noted otherwise, completes\n  its actions and does <code>setstate(eofbit)</code>, which may throw\n  <code>ios_base::failure</code> (27.5.5.4), before returning.</p>\n</blockquote>\n<p>And then p4:</p>\n<blockquote>\n<p id=\"so_15658836_15667188_1\">If one of these called functions throws an exception, then unless\n  explicitly noted otherwise, the input function sets <code>badbit</code> in error\n  state. If <code>badbit</code> is on in <code>exceptions()</code>, the input function rethrows\n  the exception without completing its actions, otherwise it does not\n  throw anything and proceeds as if the called function had returned a\n  failure indication.</p>\n</blockquote>\n<p>I believe the crux here is the interpretation of \"one of these called functions.\"  I interpreted that phrase to refer to all of the functions mentioned in the preceding paragraph, including <code>setstate(eofbit)</code>.  Under that interpretation, libc++'s behavior is correct since <code>badbit</code> is not set.</p>\n<p>To get the behavior you desire, do:</p>\n<pre><code>is.exceptions(std::ios::eofbit | std::ios::failbit | std::ios::badbit);\n</code></pre>\n", "LastActivityDate": "2013-03-27T18:58:07.783", "CommentCount": "3", "CreationDate": "2013-03-27T18:58:07.783", "ParentId": "15658836", "Score": "3", "OwnerUserId": "576911"}});