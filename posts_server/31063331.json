post_cb({"31063484": {"Id": "31063484", "PostTypeId": "2", "Body": "<p><code>i = foo(i++);</code> is fine, because <code>i++</code> is executed before <code>foo()</code> is called. A copy of <code>i</code> is made, <code>i</code> is then incremented, then the copy is passed to <code>foo()</code>.  It is the same as doing this explicitly:</p>\n<pre><code>int tmp = i++;\ni = foo(tmp);\n</code></pre>\n", "LastActivityDate": "2015-06-26T01:31:03.333", "Score": "11", "CreationDate": "2015-06-26T01:31:03.333", "ParentId": "31063331", "CommentCount": "0", "OwnerUserId": "65863"}, "bq_ids": {"n4140": {"so_31063331_31063331_0": {"length": 11, "quality": 1.0, "section_id": 5811}, "so_31063331_31063331_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 5811}, "so_31063331_31063723_0": {"length": 37, "quality": 0.925, "section_id": 5811}, "so_31063331_31063331_3": {"length": 23, "quality": 1.0, "section_id": 5811}, "so_31063331_31063331_2": {"length": 15, "quality": 1.0, "section_id": 6173}}, "n3337": {"so_31063331_31063723_0": {"length": 37, "quality": 0.925, "section_id": 5584}, "so_31063331_31063331_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5584}, "so_31063331_31063331_0": {"length": 11, "quality": 1.0, "section_id": 5584}, "so_31063331_31063331_3": {"length": 23, "quality": 1.0, "section_id": 5584}, "so_31063331_31063331_2": {"length": 15, "quality": 1.0, "section_id": 5934}}, "n4659": {"so_31063331_31063723_0": {"length": 28, "quality": 0.7, "section_id": 7273}, "so_31063331_31063331_1": {"length": 19, "quality": 0.7307692307692307, "section_id": 7272}, "so_31063331_31063331_0": {"length": 11, "quality": 1.0, "section_id": 7272}, "so_31063331_31063331_2": {"length": 15, "quality": 1.0, "section_id": 7675}}}, "31063331": {"ViewCount": "1144", "Body": "<p>For example:</p>\n<pre><code>int foo(int i) { return i; }\n\nint main()\n{\n  int i = 0;\n\n  i = i++;      // Undefined\n  i = foo(i++); // ?\n\n  return 0;\n}\n</code></pre>\n<p>What would the current ISO C++ standard specify for this case?</p>\n<p><strong>EDIT:</strong></p>\n<p>Here's where I get confused: </p>\n<blockquote>\n<p id=\"so_31063331_31063331_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.</p>\n<p id=\"so_31063331_31063331_1\">If a side effect on a scalar\n  object is unsequenced relative to either another side effect on the same scalar object or a value computation\n  using the value of the same scalar object, and they are not potentially concurrent (1.10), the behavior is\n  undefined.  </p>\n<p id=\"so_31063331_31063331_2\">In all cases, the assignment is sequenced after the value\n  computation of the right and left operands, and before the value computation of the assignment expression  </p>\n<p id=\"so_31063331_31063331_3\">Every evaluation in the calling function (including other function calls) that is not otherwise specifically\n  sequenced before or after the execution of the body of the called function is indeterminately sequenced with\n  respect to the execution of the called function.</p>\n</blockquote>\n<p>So it seems you could have a value computation on the left side of the assignment  (just <code>i</code>), and a side effect on the right side (the modification of <code>i</code> from <code>i++</code>) which aren't sequenced with respect to each other.</p>\n<p><strong>EDIT2</strong>: </p>\n<p>For anyone who finds themselves here, there is a really great explanation about sequencing that I found <a href=\"http://josephmansfield.uk/articles/c++-sequenced-before-graphs.html\">here</a>.</p>\n", "AcceptedAnswerId": "31063723", "Title": "i = i++; is undefined. Is i = foo(i++) also undefined?", "CreationDate": "2015-06-26T01:11:53.763", "Id": "31063331", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-06-26T03:07:57.007", "LastEditorUserId": "1346994", "LastActivityDate": "2015-06-26T07:57:03.570", "Score": "16", "OwnerUserId": "1346994", "Tags": "<c++><undefined-behavior>", "AnswerCount": "2"}, "31063723": {"Id": "31063723", "PostTypeId": "2", "Body": "<p>The last sentence in your quote says <strong>\"that is not otherwise specifically sequenced before or after the execution of the body of the called function\"</strong> so the question is whether the increment and the assignment are \"otherwise specifically sequenced before or after\" the function body. </p>\n<p>1.9 [intro.execution] p15 has the answer:</p>\n<blockquote>\n<p id=\"so_31063331_31063723_0\">When calling a function (whether or not the function is inline), every value computation and side effect\n  associated with any argument expression, or with the postfix expression designating the called function, is\n  sequenced before execution of every expression or statement in the body of the called function. [ <em>Note:</em> Value\n  computations and side effects associated with different argument expressions are unsequenced. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>So the increment of <code>i</code> happens before the function body, and the assignment to <code>i</code> happens after the function returns, so it is perfectly well-defined.</p>\n<p>In pre-C++11 terminology, the function call introduces a sequence point between the increment and the assignment.</p>\n", "LastActivityDate": "2015-06-26T02:02:54.730", "Score": "15", "CreationDate": "2015-06-26T02:02:54.730", "ParentId": "31063331", "CommentCount": "8", "OwnerUserId": "981959"}});