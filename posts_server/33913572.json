post_cb({"33913726": {"Id": "33913726", "PostTypeId": "2", "Body": "<p>The <code>int i{};</code> form is called <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value initialization</a>.</p>\n<p>Abridged: </p>\n<blockquote>\n<p id=\"so_33913572_33913726_0\">The effects of value initialization are:<br>\n  [...]<br>\n  4) Otherwise [if T is not a class or array type], the object is zero-initialized.</br></br></p>\n</blockquote>\n", "LastActivityDate": "2015-11-25T10:14:11.957", "CommentCount": "2", "CreationDate": "2015-11-25T10:14:11.957", "ParentId": "33913572", "Score": "1", "OwnerUserId": "996886"}, "bq_ids": {"n4140": {"so_33913572_33913851_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3325}, "so_33913572_33913851_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 3323}, "so_33913572_33913851_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3285}, "so_33913572_33913851_2": {"length": 4, "quality": 0.8, "section_id": 3287}}, "n3337": {"so_33913572_33913851_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 3193}, "so_33913572_33913851_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3195}, "so_33913572_33913851_2": {"length": 4, "quality": 0.8, "section_id": 3157}, "so_33913572_33913851_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3155}, "so_33913572_33913726_0": {"length": 6, "quality": 0.6, "section_id": 3157}}, "n4659": {"so_33913572_33913851_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 4089}, "so_33913572_33913851_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 4091}, "so_33913572_33913851_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 653}}}, "33913851": {"Id": "33913851", "PostTypeId": "2", "Body": "<p>This is stated by the standard (all quotes from N3337).</p>\n<p><code>T x{};</code> is <em>list-initialization</em>.</p>\n<blockquote>\n<p id=\"so_33913572_33913851_0\"><code>[dcl.init.list]/1:</code> List-initialization is initialization of an object or reference from a braced-init-list.Such an initializer is\n  called an initializer list, and the comma-separated initializer-clauses of the list are called the elements of the\n  initializer list. An initializer list may be empty. [...]</p>\n</blockquote>\n<p>The applicable definition for list-initialization:</p>\n<blockquote>\n<p id=\"so_33913572_33913851_1\"><code>[dcl.init.list]/3:</code> List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li>[lots of non-applicable rules]</li>\n<li>Otherwise, if the initializer list has no elements, the object is value-initialized.</li>\n</ul>\n</blockquote>\n<p>So that form for built-in types is <em>value-initialization</em>:</p>\n<blockquote>\n<p id=\"so_33913572_33913851_2\"><code>[dcl.init]/7:</code> To value-initialize an object of type T means:</p>\n<ul>\n<li>[non-applicable rules] </li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p>So now we're looking for <em>zero-initialization</em> (yes, C++ has a <em>lot</em> of types of initialization):</p>\n<blockquote>\n<p id=\"so_33913572_33913851_3\"><code>[dcl.init]/5:</code> To zero-initialize an object or reference of type T means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to <code>T;</code></li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Yay, since arithmetic types are scalar types (<code>[basic.types]/9</code> if you don't trust me), these forms both initialize their objects with <code>0</code>.</p>\n", "LastActivityDate": "2015-11-25T10:19:55.547", "CommentCount": "1", "CreationDate": "2015-11-25T10:19:55.547", "ParentId": "33913572", "Score": "8", "OwnerUserId": "496161"}, "33913572": {"ViewCount": "151", "Body": "<p>I would like to be sure that the following</p>\n<pre><code>int i{};\ndouble x{};\n</code></pre>\n<p>initialize all the variables to 0. My compiler seems to do that in all modes, but I need to be sure that it is clearly stated by the standard.</p>\n<p>Any reference to the C++11 standard is welcome.</p>\n", "AcceptedAnswerId": "33913851", "Title": "Brace initialization of numeric types. Are they 0-initialized?", "CreationDate": "2015-11-25T10:06:30.637", "Id": "33913572", "CommentCount": "0", "LastEditDate": "2015-11-25T10:22:26.353", "PostTypeId": "1", "LastEditorUserId": "212858", "LastActivityDate": "2015-11-25T10:22:26.353", "Score": "7", "OwnerUserId": "3763545", "Tags": "<c++>", "AnswerCount": "3"}, "33913653": {"Id": "33913653", "PostTypeId": "2", "Body": "<p>Yes, this is guaranteed by the standard: this is actually performing <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\"><code>value-initialization</code></a>.</p>\n<p>In particular, see the point 4) on the page: it states that it has to be <code>value-initialization</code>:</p>\n<blockquote>\n<p id=\"so_33913572_33913653_0\">Value initialization is performed in these situations:<br/>\n  ...<br/>\n  4) when a named variable (automatic, static, or thread-local) is declared with the initializer consisting of a pair of braces.</p>\n</blockquote>\n<p>And on the same page, you see that the effect of <code>value-initialization</code> for built-in types is to initialize them with 0 (square braces are mine):</p>\n<blockquote>\n<p id=\"so_33913572_33913653_1\">The effects of value initialization are:<br/>\n  ...<br/>\n  4) Otherwise [if non-class, non-array type], the object is zero-initialized.</p>\n</blockquote>\n", "LastEditorUserId": "1027706", "LastActivityDate": "2015-11-25T10:22:20.053", "Score": "3", "CreationDate": "2015-11-25T10:10:28.903", "ParentId": "33913572", "CommentCount": "0", "OwnerUserId": "1027706", "LastEditDate": "2015-11-25T10:22:20.053"}});