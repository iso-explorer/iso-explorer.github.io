post_cb({"bq_ids": {"n4140": {"so_42742995_42743013_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 3321}}, "n3337": {"so_42742995_42743013_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 3191}}, "n4659": {"so_42742995_42743013_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4087}}}, "42743013": {"Id": "42743013", "PostTypeId": "2", "Body": "<p>The standard says that temporary objects may not be converted to non-const lvalue references implicitly.  See [dcl.init.ref]/8.6.3.5.2 in n4628.</p>\n<blockquote>\n<p id=\"so_42742995_42743013_0\">Otherwise, the reference shall be an lvalue reference to a non-volatile const type (i.e., cv1 shall be\n  const), or the reference shall be an rvalue reference. [ Example:</p>\n<pre><code>double&amp; rd2 = 2.0; // error: not an lvalue and reference not const\nint i = 2;\ndouble&amp; rd3 = i; // error: type mismatch and reference not const\n</code></pre>\n<p id=\"so_42742995_42743013_1\">\u2014 end example ]</p>\n</blockquote>\n<p>To solve this:</p>\n<pre><code>template&lt;class T&gt;\nT&amp; as_lvalue(T&amp;&amp;t){return t;}\n</code></pre>\n<p>This function takes an rvalue <code>t</code> and returns an lvalue reference.</p>\n<pre><code>as_lvalue(NS::B()) &lt;&lt; 2.71 &lt;&lt; 123 &lt;&lt; \"abcdef\";\n</code></pre>\n<p>The above is both standard compliant and safe.</p>\n", "LastEditorUserId": "1774667", "LastActivityDate": "2017-03-12T03:22:38.640", "Score": "4", "CreationDate": "2017-03-12T02:23:43.437", "ParentId": "42742995", "CommentCount": "4", "OwnerUserId": "1774667", "LastEditDate": "2017-03-12T03:22:38.640"}, "42742995": {"ViewCount": "48", "Body": "<p>Here is the code:</p>\n<pre><code>namespace NS\n{\n    class B\n    {\n    public:\n        template&lt;typename T&gt; friend B&amp; operator&lt;&lt;(B&amp; b, T const&amp; obj);\n    };\n\n    template&lt;typename T&gt; B&amp; operator&lt;&lt;(B&amp; b, T const&amp; obj)\n    {\n        // using b and obj\n        return b;\n    }\n}\n\nint main()\n{\n    NS::B() &lt;&lt; 2.71 &lt;&lt; 123 &lt;&lt; \"abcdef\"; // doesn't compile in gcc\n    NS::B b; b &lt;&lt; 2.71 &lt;&lt; 123 &lt;&lt; \"abcdef\"; // OK\n}\n</code></pre>\n<p>The first line in main compiles in VS2015 (and some earlier ones) and doesn't compile in gcc (I tried in 6.3, 4.3.2).</p>\n<p>Which compiler does the right thing?\nI thought the temporary object's (NS::B()) lifetime would be up to the end of the statement (;), so it's ok to pass it to my operator&lt;&lt; by non-const reference.\nIf it isn't so, could you tell me why?</p>\n<p>Thanks.</p>\n", "Title": "Using temporary object by non-const reference within a single statement in C++", "CreationDate": "2017-03-12T02:20:35.570", "LastActivityDate": "2017-03-12T03:22:38.640", "CommentCount": "2", "PostTypeId": "1", "Id": "42742995", "Score": "0", "OwnerUserId": "1614430", "Tags": "<c++><c++11><reference><lifetime><temporary>", "AnswerCount": "1"}});