post_cb({"39611311": {"CommentCount": "3", "ViewCount": "94", "PostTypeId": "1", "LastEditorUserId": "1862823", "CreationDate": "2016-09-21T08:31:12.480", "LastActivityDate": "2016-09-21T09:27:50.843", "Title": "Why does this compile, Template deduction should fail?", "LastEditDate": "2016-09-21T09:09:47.140", "Id": "39611311", "Score": "1", "Body": "<p>I'm attempting to write a serialiser. The following code compiles:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;type_traits&gt;\n#include &lt;map&gt;\n#include &lt;iostream&gt;\n\nclass SpaceStream\n{\npublic:\n\n    SpaceStream(const std::string&amp; filename)\n    :\n        m_file(filename)\n    {\n    }\n\n    template&lt;typename T&gt;\n    typename std::enable_if&lt;std::is_class&lt;T&gt;::value&gt;::type\n    Add(const std::string&amp; key, const T&amp; t)\n    {\n        m_file &lt;&lt; key;\n        m_file &lt;&lt; \":{\";\n        t.Serialise(*this);\n        m_file &lt;&lt; \"},\";\n    }\n\n    template&lt;typename T&gt;\n    typename std::enable_if&lt;!std::is_class&lt;T&gt;::value &amp;&amp; !std::is_pointer&lt;T&gt;::value &amp;&amp; !std::is_reference&lt;T&gt;::value&gt;::type\n    Add(const std::string&amp; key, const T t)\n    {\n        m_file &lt;&lt; key;\n        m_file &lt;&lt; ':';\n        m_file &lt;&lt; t;\n        m_file &lt;&lt; ',';\n    }\n\nprivate:\n    std::ofstream m_file;\n    std::map&lt;std::string,std::string&gt; m_pointerObj;\n};\n\n\nclass ISerialise\n{\npublic:\n    virtual void Serialise(SpaceStream&amp; stream) const = 0;\n};\n\nclass Test1 : public ISerialise\n{\npublic:\n    int m_x;\n    int&amp; m_rx;\n\n    Test1(int&amp; x)\n    :\n        m_x(x), m_rx(x)\n    {\n    }\n\n    virtual void Serialise(SpaceStream&amp; stream) const\n    {\n        stream.Add(\"x\",m_x);\n        stream.Add(\"xr\",m_rx);\n    }\n};\n\nint main()\n{\n    int j = 13;\n    Test1 test(j);\n    j = 23;\n\n    SpaceStream ss(\"somefile.ss\");\n    ss.Add(\"testobj\",test);\n}\n</code></pre>\n<p>I'd have thought that this line:</p>\n<pre><code>stream.Add(\"xr\",m_rx);\n</code></pre>\n<p>would have failed because of the two <code>Add</code> functions, one specifically checks that the type isn't a class, the other checks that it's not a reference. <code>m_rx</code> is a reference type, so it should fail?</p>\n<p><strong>EDIT</strong>\nI understand now that the type is actually a value and not a reference. I need to be able to identify references so that I can keep track of them (I only want to serialise the data once, and reference it).</p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "1862823", "AnswerCount": "1"}, "39612307": {"ParentId": "39611311", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>According to <a href=\"http://eel.is/c++draft/expr#5\" rel=\"nofollow\">expr#5</a></p>\n<blockquote>\n<p id=\"so_39611311_39612307_0\">If an expression initially has the type \u201creference to T\u201d ([dcl.ref], [dcl.init.ref]), the type is adjusted to T prior to any further analysis. The expression designates the object or function denoted by the reference, and the expression is an lvalue or an xvalue, depending on the expression. [ Note: Before the lifetime of the reference has started or after it has ended, the behavior is undefined (see [basic.life]).  \u2014 end note ]</p>\n</blockquote>\n<p>I think the argument type <code>A</code> will never be a reference type when performing template argument deduction. A simple test could be</p>\n<pre><code>#include &lt;type_traits&gt;    \n\ntemplate &lt;class T&gt; void f(T) { static_assert(std::is_same&lt;T, int &amp;&gt;::value, \"ERROR\"); } \ntemplate &lt;class T&gt; void ff(T) { static_assert(std::is_same&lt;T, int&gt;::value, \"ERROR\"); }   \n\nint main(int argc, const char **argv) {\n    int i;\n    int &amp;r = i;\n    f(r); // static assert failed\n    ff(r); // static assert success\n    return 0;\n}\n</code></pre>\n<p>One walk-around I can think of is explicitly specify template argument using <code>decltype</code></p>\n<pre><code>f&lt;decltype(r)&gt;(r); // static assert success now\n</code></pre>\n", "OwnerUserId": "5845611", "LastEditorUserId": "5845611", "LastEditDate": "2016-09-21T09:27:50.843", "Id": "39612307", "Score": "2", "CreationDate": "2016-09-21T09:16:15.143", "LastActivityDate": "2016-09-21T09:27:50.843"}, "bq_ids": {"n4140": {"so_39611311_39612307_0": {"section_id": 5938, "quality": 0.5555555555555556, "length": 20}}, "n3337": {"so_39611311_39612307_0": {"section_id": 5710, "quality": 0.5555555555555556, "length": 20}}, "n4659": {"so_39611311_39612307_0": {"section_id": 7422, "quality": 0.8055555555555556, "length": 29}}}});