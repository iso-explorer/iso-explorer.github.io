post_cb({"43847210": {"ParentId": "43846969", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to  <a href=\"http://eel.is/c++draft/vector.modifiers#1\" rel=\"noreferrer\">[vector.modifiers]</a> (<strong>emphasis</strong> mine):</p>\n<blockquote>\n<p id=\"so_43846969_43847210_0\"><em>Remarks:</em> Causes reallocation if the new size is greater than the old capacity.\n  Reallocation invalidates all the references, pointers, and iterators referring to the elements in the sequence.\n  If no reallocation happens, all the iterators and references before the insertion point remain valid.\n  <strong>If an exception is thrown other than by the copy constructor, move constructor, assignment operator, or move assignment operator of <code>T</code> or by any <code>InputIterator</code> operation there are no effects.</strong>\n  If an exception is thrown while inserting a single element at the end and <code>T</code> is <code>CopyInsertable</code> or <code>is_\u00adnothrow_\u00admove_\u00adconstructible_\u00adv&lt;T&gt;</code> is true, there are no effects.\n  Otherwise, if an exception is thrown by the move constructor of a non-<code>CopyInsertable</code> <code>T</code>, the effects are unspecified.</p>\n</blockquote>\n<p>Since your <code>T</code> is <code>int</code> (and operations on integers never throw) you can only get the out-of-memory errors from <code>std::vector</code> when it attempts to allocate new memory for its contents, hence this function has no effect when throwing any exception and using <code>size()</code> afterwards is a perfectly valid approach.</p>\n", "OwnerUserId": "3919155", "LastEditorUserId": "3919155", "LastEditDate": "2017-05-08T12:11:22.363", "Id": "43847210", "Score": "11", "CreationDate": "2017-05-08T12:04:32.170", "LastActivityDate": "2017-05-08T12:11:22.363"}, "43847104": {"ParentId": "43846969", "CommentCount": "3", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/container/vector/push_back\" rel=\"noreferrer\">the documentation for <code>std::vector::push_back</code></a>:</p>\n<blockquote>\n<p id=\"so_43846969_43847104_0\">If an exception is thrown (which can be due to <code>Allocator::allocate()</code> or element copy/move constructor/assignment), this function has no effect (strong exception guarantee).</p>\n</blockquote>\n<p>So in case of failure, the last <code>push_back</code> which caused the exception will be rolled back, but everything else will be fine: your vector will contain all of the previously pushed elements, and will be in a consistent state.</p>\n", "OwnerUserId": "3233393", "PostTypeId": "2", "Id": "43847104", "Score": "32", "CreationDate": "2017-05-08T11:59:50.930", "LastActivityDate": "2017-05-08T11:59:50.930"}, "43846969": {"CommentCount": "3", "AcceptedAnswerId": "43847104", "PostTypeId": "1", "LastEditorUserId": "2411320", "CreationDate": "2017-05-08T11:53:18.770", "LastActivityDate": "2017-05-09T13:16:12.550", "LastEditDate": "2017-05-09T13:16:12.550", "ViewCount": "1338", "FavoriteCount": "1", "Title": "Can I trust vector::size after an exception is thrown?", "Id": "43846969", "Score": "22", "Body": "<p>I am trying to understand how exceptions affect an <code>std::vector</code>. More precisely, I want to check the size of the vector, when an out of memory exception is thrown.</p>\n<p>I mean something like this:</p>\n<pre><code>std::vector&lt;int&gt; v;\ntry {\n    for(unsigned int i = 0; i &lt; desiredSize; ++i)\n        v.push_back(i);\n}\ncatch (const std::bad_alloc&amp;) {\n    cerr &lt;&lt; \"Out of memory! v.size() = \" &lt;&lt; v.size() &lt;&lt; endl;\n    exit(EXIT_FAILURE);\n}\n</code></pre>\n<p>Is that a good approach or should I keep track of the vector's size with an independent variable of mine?</p>\n", "Tags": "<c++><function><exception><vector><stl>", "OwnerUserId": "2411320", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_43846969_43847210_0": {"section_id": 986, "quality": 0.8307692307692308, "length": 54}}, "n3337": {"so_43846969_43847210_0": {"section_id": 971, "quality": 0.6461538461538462, "length": 42}}, "n4659": {"so_43846969_43847210_0": {"section_id": 1049, "quality": 0.9846153846153847, "length": 64}}}});