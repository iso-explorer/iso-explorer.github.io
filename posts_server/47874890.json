post_cb({"47874890": {"ViewCount": "40", "Body": "<p>I'm working on a c++ project for the university and I get problems with an uninitialized pointer in the following code : </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct t_coord {\n    double valeur;\n    int indice;\n    t_coord *suiv;\n};\n\nstruct t_vecteur {\n    int dimension;\n    double defaut;\n    t_coord *tete;\n};\n\nvoid initialiser (t_vecteur tv, int dimension, double defaut) {\n    tv.dimension = dimension;\n    tv.defaut = defaut;\n    tv.tete = nullptr;\n}\n\nint main () {\n    t_vecteur tv;\n    initialiser(tv, 5, 3.14);\n    return 0;\n}\n</code></pre>\n<p>Is there anyway to override c4700 error in VisualStudio so I can use my initialization function \"initialiser()\" ? The final compilation will be done on GNU which does not take in account uninitialized variables and it is specified in the project that I have to create a function to initialize my t_vecteur.</p>\n<p>Thanks in advance</p>\n", "AcceptedAnswerId": "47875132", "Title": "C++/VisualStudio2017 : Override c4700 compiling error", "CreationDate": "2017-12-18T19:07:19.250", "LastActivityDate": "2017-12-18T19:40:23.377", "CommentCount": "9", "LastEditDate": "2017-12-18T19:17:08.317", "PostTypeId": "1", "LastEditorUserId": "9114900", "Id": "47874890", "Score": "-1", "OwnerUserId": "9114900", "Tags": "<c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_47874890_47875132_1": {"length": 6, "quality": 1.0, "section_id": 3291}, "so_47874890_47875132_0": {"length": 21, "quality": 1.0, "section_id": 3291}}, "n3337": {"so_47874890_47875132_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 1972}}, "n4659": {"so_47874890_47875132_1": {"length": 6, "quality": 1.0, "section_id": 4053}, "so_47874890_47875132_0": {"length": 21, "quality": 1.0, "section_id": 4053}}}, "47875132": {"Id": "47875132", "PostTypeId": "2", "Body": "<p>The struct <code>t_vecteur</code> is an <a href=\"https://en.wikipedia.org/wiki/C%2B%2B_classes#Aggregate_classes\" rel=\"nofollow noreferrer\">aggregate</a>, and as such the instance <code>tv</code> is not initialized (<code>dimension</code>, <code>defaut</code> and <code>tete</code>, being primitive data types, contain indeterminate data).</p>\n<p>Then you pass it <em>by-value</em> to the function <code>initialiser</code>, which <em>reads</em> from <code>tv</code> when making a copy, which invokes undefined behavior.</p>\n<p>The relevant phrase of the standard is in <a href=\"http://eel.is/c++draft/dcl.init#12\" rel=\"nofollow noreferrer\">[dcl.init]/12</a>:</p>\n<blockquote>\n<p id=\"so_47874890_47875132_0\">When storage for an object with automatic or dynamic storage duration is obtained, the object has an indeterminate value, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced</p>\n<p id=\"so_47874890_47875132_1\">If an indeterminate value is produced by an evaluation, the behavior is undefined</p>\n</blockquote>\n<p>To fix it (and the C4700 uninitialized variable warning), pass <code>tv</code> to <code>initialiser</code> <em>by-reference</em>.</p>\n<pre><code>void initialiser (t_vecteur&amp; tv, int dimension, double defaut) {\n</code></pre>\n<p>Passing by-reference is not reading from <code>tv</code>, hence doing so is not UB anymore.</p>\n", "LastEditorUserId": "485343", "LastActivityDate": "2017-12-18T19:40:23.377", "Score": "1", "CreationDate": "2017-12-18T19:26:24.807", "ParentId": "47874890", "CommentCount": "1", "OwnerUserId": "485343", "LastEditDate": "2017-12-18T19:40:23.377"}});