post_cb({"24314853": {"ParentId": "24314638", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<h3>WARNING</h3>\n<p id=\"so_24314638_24314853_0\">Your code is <strong>potentially</strong> ill-formed, and if we are dealing with a platform where <code>unsigned char</code> consists of 8 bits (which is most often the case), it definitely is.</p>\n</blockquote>\n<hr>\n<h3>What does the standard say?</h3>\n<p>It's is stated in the standard that two case constants shall <strong>not</strong> have the same value after <em>conversion</em> to integral type used by the switch-condition.</p>\n<blockquote>\n<p id=\"so_24314638_24314853_1\"><code>6.4.2p2</code> <strong>The <code>switch</code> statement</strong> <code>[stmt.switch]</code></p>\n<blockquote>\n<p id=\"so_24314638_24314853_4\">The condition shall be of intergral type, enumeration type, or class type. If of class type, the condition is contextually implicitly converted (Clause 4) to an integral or enumeration type. Integral promotions are performed. Any statement within the <code>switch</code> statement can be labeled with one or more case labels as follows:</p>\n<pre><code>case constant-expression :\n</code></pre>\n<p id=\"so_24314638_24314853_5\">where teh <em>constant-expression</em> shall be a converted constant expression (5.19) of the promoted type of the switch condition. No two of the case constants in the same switch shall have the same value after conversion to the promoted type of the switch condition.</p>\n</blockquote>\n</blockquote>\n<p>This means that <strong>if</strong> the integral type yield by the integral promotion from the type of <code>m_CPUTYPE</code>, treats <code>static_cast&lt;int&gt; ((BYTE)-1)</code> and <code>static_cast&lt;int&gt; (255)</code> as being the same value.. the snippet is ill-formed.</p>\n<hr>\n<h3>So, am I safe?</h3>\n<p><em>Integral promotion</em> is the method of which an integral type is promoted to another type,if that is necessary to easy implementation and logic when dealing with two integral values that are potentially of different types.</p>\n<blockquote>\n<p id=\"so_24314638_24314853_6\"><code>4.5</code> <strong>Integral promotions</strong> <code>[conv.prom]</code></p>\n<blockquote>\n<p id=\"so_24314638_24314853_8\">A prvalue of an integer type other than bool, char16_t, char32_t, or wchar_t whose integer conversion rank (4.13) is less than the rank of <code>int</code> can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n</blockquote>\n<p>It's stated in the standard that <code>unsigned char</code> has less <em>rank</em> than <code>int</code>, and with this the type of the switch condition will be <code>int</code>, which further means; <code>static_cast&lt;int&gt; (-1) != static_cast&lt;int&gt; (255)</code>.</p>\n<p>But, on most platforms the maximum value of a <em>unsigned char</em> is <code>255</code> which means that <code>(BYTE)-1)</code> will yield a <em>unsigned char</em> with the value of <code>255</code>. This means that <code>255 == CPUTYPE_INVALID</code>.</p>\n<pre><code>switch (m_CPUTYPE) {\ncase 255:               // (A)\n  cout&lt;&lt;\"hit 1\";\ncase -1:\n  cout&lt;&lt;\"hit 2\";\ncase CPUTYPE_INVALID:   // (B), same value as (A)\n  cout&lt;&lt;\"hit 3\";\n  break;\ndefault:\n  cout&lt;&lt;\"no hit\";\n  break;\n}\n</code></pre>\n<p>You have two case constants which <em>after conversions</em> yields the same value: your code is <strong>ill-formed</strong>.</p>\n</hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "LastEditDate": "2014-06-19T19:49:11.030", "Id": "24314853", "Score": "4", "CreationDate": "2014-06-19T19:31:31.253", "LastActivityDate": "2014-06-19T19:49:11.030"}, "24314900": {"ParentId": "24314638", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The value in <code>switch</code> is subjected to integral promotion, which means that on a typical platform it is promoted to type <code>int</code>. That means that the switch value in this case is <code>255</code> of type <code>int</code>.</p>\n<p>Case-constants are implicitly converted to the promoted type of switch value, i.e. to <code>int</code>. This means that you have case-labels with values of <code>-1</code>, <code>255</code> and <code>(BYTE) -1</code>. If <code>unsigned char</code> is an 8-bit type on your platform, then <code>(BYTE) -1</code> is also <code>255</code> and your <code>switch</code> statement is invalid, since it has two case-labels for the same value <code>255</code>. It is illegal to specify more than one case-label for the same value in C++.</p>\n<p>On some exotic platform where integral promotion produces <code>unsigned int</code> the situation will not change much. Value <code>-1</code> in one of the case labels will be converted to <code>UNIT_MAX</code>, but the issue with duplicate <code>255</code> label will still be there.</p>\n<p>The only way this code can compile is another exotic platform on which <code>unsigned char</code> type is more than 8 bits in width.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2014-06-19T19:42:19.493", "Id": "24314900", "Score": "0", "CreationDate": "2014-06-19T19:34:59.107", "LastActivityDate": "2014-06-19T19:42:19.493"}, "24314746": {"ParentId": "24314638", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>As others have pointed out the code is actually ill-formed (meaning it will not compile at all). Switch statements cannot have multiple checks for the same value (I didn't remember that). So in the end the code above will not compile so my answer here is <strong>wrong</strong></p>\n<p><code>m_CPUTYPE</code> is set to 0xFF which is same as 255 decimal so it will take the first case. </p>\n<p>That said since you don't have a break statement in the first two cases I suspect the code will print <code>hit 1hit 2hit 3</code></p>\n<p>If you put a break in each case statement it should pick the first match and then exit.</p>\n", "OwnerUserId": "3757019", "LastEditorUserId": "3757019", "LastEditDate": "2014-06-19T19:48:41.533", "Id": "24314746", "Score": "2", "CreationDate": "2014-06-19T19:25:22.553", "LastActivityDate": "2014-06-19T19:48:41.533"}, "24314819": {"ParentId": "24314638", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>CPUTYPE_INVALID</code> and <code>255</code> are exactly the same(where char is 8 bit), so I doubt that this will even compile(switch statements cannot have cases that are the same integer value). However, your switch statement will hit the first case and then fall through the rest because you are missing break statements. Meaning that (if this even compiles) your output will be <code>hit 1hit 2hit 3</code></p>\n<p><a href=\"https://stackoverflow.com/questions/24313893/what-does-it-mean-by-byte-1\">This SO question</a> explains the values nicely:</p>\n<blockquote>\n<p id=\"so_24314638_24314819_0\">Assuming BYTE = char, this yields -1 since it's converting -1\n  (integer) as a char. It's just a C-style cast for -1.</p>\n<p id=\"so_24314638_24314819_1\">It's a way of getting \"-1\" in the system-defined BYTE type, either\n  signed or unsigned (in that case it's the maximum representable). In\n  the signed case, to indicate a bogus entry, it's a common practice to\n  use a -1 value (or an extreme one when you have a limited number of\n  entries)</p>\n</blockquote>\n", "OwnerUserId": "1818849", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:58:28.053", "Id": "24314819", "Score": "0", "CreationDate": "2014-06-19T19:29:22.173", "LastActivityDate": "2014-06-19T19:39:33.073"}, "bq_ids": {"n4140": {"so_24314638_24314853_8": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24314638_24314853_5": {"section_id": 3890, "quality": 0.72, "length": 18}, "so_24314638_24314853_2": {"section_id": 3890, "quality": 0.8484848484848485, "length": 28}, "so_24314638_24314853_3": {"section_id": 3890, "quality": 0.72, "length": 18}, "so_24314638_24314853_4": {"section_id": 3890, "quality": 0.8484848484848485, "length": 28}, "so_24314638_24314853_7": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}, "n3337": {"so_24314638_24314853_8": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_24314638_24314853_5": {"section_id": 3750, "quality": 0.92, "length": 23}, "so_24314638_24314853_2": {"section_id": 3750, "quality": 0.7272727272727273, "length": 24}, "so_24314638_24314853_3": {"section_id": 3750, "quality": 0.92, "length": 23}, "so_24314638_24314853_4": {"section_id": 3750, "quality": 0.7272727272727273, "length": 24}, "so_24314638_24314853_7": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}}, "n4659": {"so_24314638_24314853_8": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_24314638_24314853_5": {"section_id": 4776, "quality": 0.72, "length": 18}, "so_24314638_24314853_2": {"section_id": 4776, "quality": 0.8484848484848485, "length": 28}, "so_24314638_24314853_3": {"section_id": 4776, "quality": 0.72, "length": 18}, "so_24314638_24314853_4": {"section_id": 4776, "quality": 0.8484848484848485, "length": 28}, "so_24314638_24314853_7": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}}, "24314638": {"CommentCount": "2", "ViewCount": "103", "PostTypeId": "1", "ClosedDate": "2014-06-20T02:11:21.497", "LastEditorUserId": "63550", "CreationDate": "2014-06-19T19:18:39.217", "LastActivityDate": "2015-04-26T09:49:17.177", "Title": "How does switch-case handle the value of the constant in a \"case\"?", "AcceptedAnswerId": "24314853", "LastEditDate": "2015-04-26T09:49:17.177", "Id": "24314638", "Score": "-1", "Body": "<p>Let's say we have</p>\n<pre><code>typedef unsigned char       BYTE;\n#define     CPUTYPE_INVALID  ((BYTE)-1)\n</code></pre>\n<p>Which case will the switch statement hit?</p>\n<pre><code>BYTE m_CPUTYPE;\nm_CPUTYPE = 0xff;\n\nswitch (m_CPUTYPE) {\n    case 255:\n        cout &lt;&lt; \"hit 1\";\n\n    case -1:\n        cout &lt;&lt; \"hit 2\";\n\n    case CPUTYPE_INVALID:\n        cout &lt;&lt; \"hit 3\";\n        break;\n\n    default:\n        cout &lt;&lt; \"no hit\";\n        break;\n}\n</code></pre>\n<p>What will be the outcome then? And please elaborate.</p>\n", "Tags": "<c++><switch-statement>", "OwnerUserId": "1814794", "AnswerCount": "4"}});