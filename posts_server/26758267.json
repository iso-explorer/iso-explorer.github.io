post_cb({"26758267": {"CommentCount": "11", "ViewCount": "1344", "PostTypeId": "1", "LastEditorUserId": "2628243", "CreationDate": "2014-11-05T13:20:21.090", "LastActivityDate": "2014-12-03T18:42:29.540", "Title": "GCC 4.8 with GNU STL produces bad code for std::string constructor?", "AcceptedAnswerId": "26758393", "LastEditDate": "2014-12-03T18:42:29.540", "Id": "26758267", "Score": "13", "Body": "<p>So a bit of C++ code:</p>\n<pre><code>void func( const std::string&amp; theString )\n{\n    std::string theString( theString );\n    theString += \" more string\";\n    std::cout &lt;&lt; theString;\n}\n</code></pre>\n<p>which compiles fine with <code>GCC 4.8</code> and <code>VS 2013</code>. From my C++ knowledge, the code is okay with a local variable <code>theString</code> being brought into scope which then hides <code>theString</code> from the function argument. At the point of <code>theString</code> construction, the only <code>theString</code> in scope is the function argument which is passed to the <code>std::string</code> constructor. The constructed <code>std::string</code> is then named <code>theString</code> which comes into scope and is <code>theString</code> used later in the code. Phew!</p>\n<p>However, <code>GCC</code> seems to act like <code>theString</code> passed to the <code>std::string</code> constructor is the local <code>theString</code> (which hasn't been constructed yet) causing the compiled program to crash. With VS 2013 the code compiles and runs fine.</p>\n<p>So,</p>\n<ol>\n<li>Is my code correct? Or am I doing something outside spec which means the GCC behaviour is undefined.</li>\n<li>Is this a bug in GCC?</li>\n</ol>\n", "Tags": "<c++><gcc><stl><undefined-behavior>", "OwnerUserId": "2746401", "AnswerCount": "3"}, "26758357": {"CommentCount": "0", "CreationDate": "2014-11-05T13:24:53.160", "LastEditorUserId": "-1", "LastActivityDate": "2014-11-05T15:22:38.513", "ParentId": "26758267", "LastEditDate": "2017-05-23T10:29:32.750", "LastEditorDisplayName": "user3920237", "PostTypeId": "2", "Id": "26758357", "Score": "14", "Body": "<p>This is <a href=\"https://stackoverflow.com/questions/9820027/using-newly-declared-variable-in-initialization-int-x-x1\">undefined behaviour in C++</a>. <a href=\"https://stackoverflow.com/a/9820155/3920237\">paxdiablo</a> quotes the C++03 standard:</p>\n<blockquote>\n<p id=\"so_26758267_26758357_0\">The point of declaration for a name is immediately after its complete \n  declarator (clause 8) and before its initializer (if any) ...</p>\n<p id=\"so_26758267_26758357_1\">Example:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_26758267_26758357_2\">Here the second x is initialized with its own (indeterminate) value.</p>\n</blockquote>\n", "OwnerUserId": "209629"}, "bq_ids": {"n4140": {"so_26758267_26758393_0": {"section_id": 7049, "quality": 0.875, "length": 14}, "so_26758267_26758357_0": {"section_id": 7049, "quality": 0.7692307692307693, "length": 10}, "so_26758267_26758393_2": {"section_id": 7062, "quality": 1.0, "length": 13}, "so_26758267_26767656_2": {"section_id": 7194, "quality": 0.9272727272727272, "length": 51}, "so_26758267_26758357_2": {"section_id": 7049, "quality": 1.0, "length": 7}, "so_26758267_26758393_1": {"section_id": 7049, "quality": 0.7777777777777778, "length": 7}, "so_26758267_26767656_3": {"section_id": 7194, "quality": 1.0, "length": 10}}, "n3337": {"so_26758267_26758357_0": {"section_id": 6794, "quality": 0.7692307692307693, "length": 10}, "so_26758267_26767656_3": {"section_id": 6938, "quality": 1.0, "length": 10}, "so_26758267_26758393_0": {"section_id": 6794, "quality": 0.875, "length": 14}, "so_26758267_26758393_2": {"section_id": 6806, "quality": 1.0, "length": 13}, "so_26758267_26767656_2": {"section_id": 6938, "quality": 0.9272727272727272, "length": 51}, "so_26758267_26758393_1": {"section_id": 6794, "quality": 0.7777777777777778, "length": 7}, "so_26758267_26758357_2": {"section_id": 6794, "quality": 1.0, "length": 7}}, "n4659": {"so_26758267_26758357_0": {"section_id": 8546, "quality": 0.7692307692307693, "length": 10}, "so_26758267_26767656_3": {"section_id": 8702, "quality": 0.9, "length": 9}, "so_26758267_26758393_0": {"section_id": 8546, "quality": 0.875, "length": 14}, "so_26758267_26767656_2": {"section_id": 8703, "quality": 0.9272727272727272, "length": 51}, "so_26758267_26758393_2": {"section_id": 8559, "quality": 1.0, "length": 13}, "so_26758267_26758393_1": {"section_id": 8546, "quality": 0.7777777777777778, "length": 7}, "so_26758267_26758357_2": {"section_id": 8546, "quality": 1.0, "length": 7}}}, "26767656": {"ParentId": "26758267", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Although the current answers are basically correct, this is undefined behavior because you are using an indeterminate value the details are a bit more involved. For primitive types I believe either <a href=\"https://stackoverflow.com/q/14935722/1708801\">Does initialization entail lvalue-to-rvalue conversion? Is int x = x; UB?</a> or <a href=\"https://stackoverflow.com/q/23415661/1708801\">Has C++ standard changed with respect to the use of indeterminate values and undefined behavior in C++1y?</a> provide sufficient detail to understand why the behavior is undefined.</p>\n<p>For a user defined type though I don't think they fill in enough of the details. We can see from this rather old but relevant <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1931.html#363\" rel=\"nofollow noreferrer\">defect report 63: Initialization of class from self</a> which asks:</p>\n<blockquote>\n<p id=\"so_26758267_26767656_0\">And if so, what is the semantics of the self-initialization of UDT? </p>\n</blockquote>\n<p>and provides an example in which only the reference and the address is taken of the class under construction and the answer says:</p>\n<blockquote>\n<p id=\"so_26758267_26767656_1\">3.8  basic.life paragraph 6 indicates that the references here are valid. It's permitted to take the address of a class object before it\n  is fully initialized, and it's permitted to pass it as an argument to\n  a reference parameter as long as the reference can bind directly.</p>\n</blockquote>\n<p>It is referring to section <code>3.8</code> <em>Object lifetime</em> because the object is under construction and its storage has been allocated but it lifetime has not began because its initialization is not complete.</p>\n<p>If we look at paragraph <code>6</code> from section <code>3.8</code> it says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_26758267_26767656_2\">Similarly, <strong>before the lifetime of an object has started but after the\n  storage which the object will occupy has been allocated</strong> or, after the\n  lifetime of an object has ended and before the storage which the\n  object occupied is reused or released, any glvalue that refers to the\n  original object may be used but only in limited ways. For an object\n  under construction or destruction, see 12.7. Otherwise, such a glvalue\n  refers to allocated storage (3.7.4.2), and using the properties of the\n  glvalue that do not depend on its value is well-defined. <strong>The program\n  has undefined behavior if</strong>:</p>\n</blockquote>\n<p>and includes:</p>\n<blockquote>\n<p id=\"so_26758267_26767656_3\">the glvalue is used to access a non-static data member or call a\n  non-static member function of the object,</p>\n</blockquote>\n<p>So before the initialization is complete we can not take the value of a non-static data member which clearly will be required during copy construction of a <code>std::string</code>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:55:15.147", "Id": "26767656", "Score": "2", "CreationDate": "2014-11-05T21:41:00.013", "LastActivityDate": "2014-11-05T21:41:00.013"}, "26758393": {"ParentId": "26758267", "CommentCount": "1", "Body": "<p>No, your code is invalid.</p>\n<p>According to the C++ Standard (3.3.2 Point of declaration)</p>\n<blockquote>\n<p id=\"so_26758267_26758393_0\">1 The point of declaration for a name is immediately after its\n  complete declarator (Clause 8) and before its initializer (if any),\n  except as noted below.</p>\n</blockquote>\n<pre><code>[ Example:\nint x = 12;\n{ int x = x; }\n</code></pre>\n<blockquote>\n<p id=\"so_26758267_26758393_1\">Here the second x is initialized with its own (indeterminate) value.\n  \u2014end example ]</p>\n</blockquote>\n<p>And (3.3.3 Block scope, #2)</p>\n<blockquote>\n<p id=\"so_26758267_26758393_2\">A parameter name <strong>shall not be redeclared</strong> in the outermost block of the\n  function definition nor in the outermost block of any handler\n  associated with a function-try-block.</p>\n</blockquote>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "26758393", "Score": "30", "CreationDate": "2014-11-05T13:26:34.977", "LastActivityDate": "2014-11-05T13:26:34.977"}});