post_cb({"bq_ids": {"n4140": {"so_3639741_29352251_0": {"length": 16, "quality": 1.0, "section_id": 744}}, "n3337": {"so_3639741_29352251_0": {"length": 16, "quality": 1.0, "section_id": 733}}, "n4659": {"so_3639741_29352251_0": {"length": 15, "quality": 0.9375, "section_id": 802}}}, "3639797": {"Id": "3639797", "PostTypeId": "2", "Body": "<p>Assuming you want to preserve the elements in mapA, and merge elements in mapB for which there is no key in mapA:</p>\n<pre><code>mapA.insert(mapB.begin(), mapB.end())\n</code></pre>\n<p>will do what you want, I think.</p>\n<p>EDIT: adding working example</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nvoid printIt(std::map&lt;int,int&gt; m) {\n    for(std::map&lt;int,int&gt;::iterator it=m.begin();it!=m.end();++it)\n        std::cout &lt;&lt; it-&gt;first&lt;&lt;\":\"&lt;&lt;it-&gt;second&lt;&lt;\" \";\n    std::cout &lt;&lt; \"\\n\";\n}\n\nint main() {\n    std::map&lt;int,int&gt; foo,bar;\n    foo[1] = 11; foo[2] = 12; foo[3] = 13;\n    bar[2] = 20; bar[3] = 30; bar[4] = 40;\n    printIt(foo);\n    printIt(bar);\n    foo.insert(bar.begin(),bar.end());\n    printIt(foo);\n    return 0;\n}\n</code></pre>\n<p>output:</p>\n<pre><code>:!./insert\n1:11 2:12 3:13\n2:20 3:30 4:40\n1:11 2:12 3:13 4:40\n</code></pre>\n", "LastEditorUserId": "118150", "LastActivityDate": "2016-05-11T15:44:41.593", "Score": "89", "CreationDate": "2010-09-03T21:50:53.837", "ParentId": "3639741", "CommentCount": "6", "OwnerUserId": "118150", "LastEditDate": "2016-05-11T15:44:41.593"}, "3639741": {"ViewCount": "31720", "Body": "<p>How can I merge two STL maps into one?  They both have the same key value types (map).  If there is overlap of the keys I would like to give preference to one of the maps.  </p>\n", "AcceptedAnswerId": "3639797", "Title": "Merge two STL maps", "CreationDate": "2010-09-03T21:42:49.783", "Id": "3639741", "CommentCount": "0", "FavoriteCount": "11", "PostTypeId": "1", "LastEditDate": "2014-03-08T19:48:36.410", "LastEditorUserId": "1362568", "LastActivityDate": "2016-05-11T15:44:41.593", "Score": "48", "OwnerUserId": "48784", "Tags": "<c++><stl><maps>", "AnswerCount": "3"}, "22220891": {"Id": "22220891", "PostTypeId": "2", "Body": "<p>If you want to copy entries from one map to another, you can use <code>std::map</code>'s <code>insert</code>:</p>\n<pre><code>targetMap.insert(sourceMap.begin(), sourceMap.end());\n</code></pre>\n<p>But note that <code>insert</code> does not update elements if their key is already in targetMap; those items will be left as-is. To overwrite elements, you will have to copy explicitly, e.g.:</p>\n<pre><code>for(auto&amp; it : sourceMap)\n{\n    targetMap[it.first] = it.second;\n}\n</code></pre>\n<p>If you don't mind losing the data in <code>sourceMap</code>, another way to achieve a copy-and-overwrite is to <code>insert</code> the target into the source and <code>std::swap</code> the results:</p>\n<pre><code>sourceMap.insert(targetMap.begin(), targetMap.end());\nstd::swap(sourceMap, targetMap);\n</code></pre>\n<p>After swapping, <code>sourceMap</code> will contain <code>targetMap</code>'s old data, and <code>targetMap</code> will be a merge of the two maps, with preference for <code>sourceMap</code>'s entries.</p>\n", "LastActivityDate": "2014-03-06T09:57:44.950", "CommentCount": "0", "CreationDate": "2014-03-06T09:57:44.950", "ParentId": "3639741", "Score": "22", "OwnerUserId": "318826"}, "29352251": {"Id": "29352251", "PostTypeId": "2", "Body": "<p>According to ISO/IEC 14882:2003, section 23.1.2, Table 69, expression a.insert(i,j):</p>\n<blockquote>\n<p id=\"so_3639741_29352251_0\">pre: i,j are not iterators into a. inserts each element from the range\n  [i, j) if and only if there is no element with key equivalent to the\n  key of that element in containers with unique keys;</p>\n</blockquote>\n<p>Since that std::map must follow this restriction, if you'd like to give preference to \"values\" from one map over another you should insert into it. For example,</p>\n<pre><code>std::map&lt;int, int&gt; goodKeys;\nstd::map&lt;int, int&gt; betterKeys;\n\nbetterKeys.insert(goodKeys.begin(), goodKeys.end());\n</code></pre>\n<p>So if there are any equivalent keys in goodKeys and betterKeys, \"values\" of the betterKeys will be preserved.</p>\n", "LastActivityDate": "2015-03-30T17:15:01.947", "CommentCount": "0", "CreationDate": "2015-03-30T17:15:01.947", "ParentId": "3639741", "Score": "0", "OwnerUserId": "4730573"}});