post_cb({"13125861": {"LastActivityDate": "2012-10-29T20:25:43.523", "CommentCount": "4", "Body": "<p>Yes, this is compiler bug. Function pointers must have compatible exception specifiers to be assignable.</p>\n<p>Quote from standard:</p>\n<blockquote>\n<p id=\"so_13125454_13125861_0\"><strong>15.4 Exception specifications</strong></p>\n<p id=\"so_13125454_13125861_1\">(5) ...A similar restriction applies to assignment to and initialization of pointers to\n  functions, pointers to member functions, and references to functions: the target entity\n  shall allow at least the exceptions allowed by the source value in the assignment or initialization.</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code>class A;\n\nvoid (*pf1)(); // no exception specification\nvoid (*pf2)() throw(A);\n\npf1 = pf2; // OK: pf1 is less restrictive\npf2 = pf1; // error: pf2 is more restrictive\n</code></pre>\n<p>Your code compiled with <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"nofollow\">Comeau</a> gives <code>incompatible exception specifications</code> error:</p>\n<pre><code>Comeau C/C++ 4.3.10.1 (Oct  6 2008 11:28:09) for ONLINE_EVALUATION_BETA2\nCopyright 1988-2008 Comeau Computing.  All rights reserved.\nMODE:strict errors C++ C++0x_extensions\n\n\"ComeauTest.c\", line 9: error: incompatible exception specifications\n  pf=foo; // This should NOT work \n    ^\n</code></pre>\n<p>As many other people mentioned exception specifications are deprecated in C++11 standard (see Annex D.4) except for <code>noexcept</code> specification. So the best practice is (and was)  - <strong>avoid using it</strong>.</p>\n", "CreationDate": "2012-10-29T16:36:45.820", "LastEditDate": "2012-10-29T20:25:43.523", "ParentId": "13125454", "Id": "13125861", "LastEditorUserId": "1599260", "PostTypeId": "2", "Score": "5", "OwnerUserId": "1599260"}, "13125522": {"LastActivityDate": "2012-10-29T17:06:53.370", "CommentCount": "5", "Body": "<p><strong><a href=\"http://www.gotw.ca/publications/mill22.htm\" rel=\"nofollow\">Exception specifications don\u2019t participate in a function\u2019s type.</a></strong>\nCorrection:\nAs pointed out in other answer, it is indeed a compiler bug. It is well known fact that most compilers are buggy in implementing exception specifications. Also, they are deprecated in C++11. So,                </p>\n<p>Follow Herb Sutter's advice with exception specifications:      </p>\n<blockquote>\n<p id=\"so_13125454_13125522_0\">Moral #1: Never write an exception specification.</p>\n<p id=\"so_13125454_13125522_1\">Moral #2: Except possibly an empty one, but if I were you I\u2019d avoid even that.</p>\n</blockquote>\n", "CreationDate": "2012-10-29T16:17:10.633", "LastEditDate": "2012-10-29T17:06:53.370", "ParentId": "13125454", "Id": "13125522", "LastEditorUserId": "452307", "PostTypeId": "2", "Score": "9", "OwnerUserId": "452307"}, "13125454": {"CreationDate": "2012-10-29T16:13:08.550", "ViewCount": "734", "FavoriteCount": "1", "Id": "13125454", "AcceptedAnswerId": "13125522", "Score": "4", "Title": "c++ exception specification in a function pointer", "LastEditorUserId": "1599260", "CommentCount": "1", "Body": "<p><b>Code: </b><br/></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid foo() throw(char) {throw 'a';}\n\nint main() try {\n\n   void (*pf)() throw(float);\n   pf = foo; // This should NOT work \n   pf();\n\n}\ncatch(const char&amp; c){cout &lt;&lt; \"Catched ::&gt; \" &lt;&lt; c &lt;&lt; endl;}\n</code></pre>\n<p>Why it is possible to pass <code>foo</code> to <code>pf</code> even though the <code>foo</code> exception specification is different from what the function pointer <code>pf</code> has ? Is this a bug in my compiler?</p>\n", "Tags": "<c++><exception>", "LastEditDate": "2012-10-29T16:51:29.767", "LastActivityDate": "2012-10-29T20:25:43.523", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "869277"}, "bq_ids": {"n4140": {"so_13125454_13125861_1": {"length": 22, "quality": 1.0, "section_id": 3367}}, "n3337": {"so_13125454_13125861_1": {"length": 22, "quality": 1.0, "section_id": 3237}}}});