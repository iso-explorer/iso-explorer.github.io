post_cb({"19676545": {"ParentId": "19676473", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>By value. Compilable example:</p>\n<pre><code>class C\n{\npublic:\n    C()\n    {\n        i = 0;\n    }\n\n    C(const C &amp; source)\n    {\n        std::cout &lt;&lt; \"Copy ctor called\\n\";\n        i = source.i;\n    }\n\n    int i;\n};\n\nvoid test(C &amp; c)\n{\n    c.i = 20;\n\n    auto lambda = [=]() mutable {\n\n        c.i = 55;\n    };\n    lambda();\n\n    std::cout &lt;&lt; c.i &lt;&lt; \"\\n\";\n}\n\nint main(int argc, char * argv[])\n{\n    C c;\n    test(c);\n\n    getchar();\n}\n</code></pre>\n<p>Result:</p>\n<pre>Copy ctor called\n20</pre>\n<p>I guess, that this paragraph of the C++ standard applies:</p>\n<blockquote id=\"so_19676473_19676545_0\">\n<h1>5.1.2 Lambda expressions</h1>\n(...)\n14. An entity is captured by <i>copy</i> if it is implicitly captured and the <i>capture-default</i> is = or if it is explicitly\ncaptured with a capture that does not include an &amp;. For each entity captured by copy, an unnamed nonstatic\ndata member is declared in the closure type. The declaration order of these members is unspecified.\nThe type of such a data member is the type of the corresponding captured entity if the entity is not a\nreference to an object, <b>or the referenced type otherwise</b>. [ <i>Note</i>: If the captured entity is a reference to a\nfunction, the corresponding data member is also a reference to a function. \u2014<i>end note</i>]</blockquote>\n<p>That actually makes sense - if local variables are passed by value and parameter passed by reference \"acts\" as a local variable in function, why would it be passed by reference instead of value?</p>\n", "OwnerUserId": "453803", "LastEditorUserId": "453803", "LastEditDate": "2013-10-30T08:17:24.260", "Id": "19676545", "Score": "16", "CreationDate": "2013-10-30T07:44:58.363", "LastActivityDate": "2013-10-30T08:17:24.260"}, "19676473": {"CommentCount": "4", "AcceptedAnswerId": "19676545", "CreationDate": "2013-10-30T07:41:20.890", "LastActivityDate": "2013-10-30T08:17:24.260", "PostTypeId": "1", "ViewCount": "2437", "FavoriteCount": "2", "Title": "In lambda, how reference is being captured by value", "Id": "19676473", "Score": "21", "Body": "<p>If the variable of reference-type is being captured in lambda by value, does it being captured by reference or value?</p>\n<p>Small sample with question:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Test {\n  int a;\n};\n\nvoid testFunc(const Test &amp;test) {\n  auto a = [=] {\n    // does 'test' is being passed to closure object with copy\n    // or by reference?\n    return test.a;\n  } ();\n  std::cout &lt;&lt; a;\n}\n\nint main() {\n  Test test{1};\n  testFunc(test);\n}\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "685653", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19676473_19676545_0": {"section_id": 5974, "quality": 0.7966101694915254, "length": 47}}, "n3337": {"so_19676473_19676545_0": {"section_id": 5742, "quality": 0.8305084745762712, "length": 49}}, "n4659": {"so_19676473_19676545_0": {"section_id": 7473, "quality": 0.6440677966101694, "length": 38}}}});