post_cb({"41854804": {"ParentId": "41854519", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2017-01-25T15:00:38.407", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:32.283", "Id": "41854804", "OwnerUserId": "1621391", "Body": "<blockquote>\n<p id=\"so_41854519_41854804_0\">The purpose behind my question is to use std::map (ie <strong>insertion</strong>,\n  deletion, access) <strong>with guarantee</strong> that no exception will throw from\n  std::map implementation.</p>\n</blockquote>\n<p>If you leave the default <code>std::allocator</code> in place when instantiating a </p>\n<p><em>std::map<code>&lt;</code>Key, T, Com=std::less<code>&lt;</code>Key<code>&gt;</code>, Allocator=<strong><code>std::allocator&lt;...&gt;</code></strong><code>&gt;</code></em>;</p>\n<p>then you cannot make any exception guarantees. in <code>inserts</code> or <code>emplace</code>.</p>\n<blockquote>\n<p id=\"so_41854519_41854804_1\"><a href=\"http://eel.is/c++draft/containers#container.requirements.general-8\" rel=\"nofollow noreferrer\">23.2.1/8</a>:\n  Unless otherwise specified, all containers defined in this clause\n  obtain memory using an allocator</p>\n</blockquote>\n<hr>\n<p>I don't see how its possible to do inserts without memory allocation in most STL implementations because <a href=\"https://stackoverflow.com/questions/5288320/why-is-stdmap-implemented-as-a-red-black-tree\">they mostly</a> make use of <a href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\" rel=\"nofollow noreferrer\">Red Black Trees</a> with heap allocated nodes. You may want to use a custom allocator that allocates from an existing memory pool, with noexcept guarantees. Or write your own container.</p>\n</hr>", "LastActivityDate": "2017-01-25T15:16:23.207"}, "41854519": {"CommentCount": "1", "ViewCount": "158", "CreationDate": "2017-01-25T14:48:17.170", "LastActivityDate": "2017-01-25T15:45:58.627", "Title": "How to add element in std::map doing allocation oneself?", "AcceptedAnswerId": "41854804", "PostTypeId": "1", "Id": "41854519", "Score": "1", "Body": "<p>The purpose behind my question is to use <code>std::map</code> (ie insertion, deletion, access) with guarantee that no exception will throw from <code>std::map</code> implementation.</p>\n<p>Deletion is not a problem, neither access if one use things carefully (no <code>at</code> without check for example).</p>\n<p>But insertion is another problem. In this code:</p>\n<pre><code>#include &lt;map&gt;\n\nstruct foo{};\n\nint main()\n{\n  std::map&lt;int, foo&gt; my_map;\n\n  my_map.insert(std::pair&lt;int, foo&gt;(42, foo{}));\n}\n</code></pre>\n<p><code>my_map</code> do some allocation and throw if there is no more memory.</p>\n<p>Now, what I want is a way to do this:</p>\n<pre><code>#include &lt;map&gt;\n\nstruct foo{};\n\nint main()\n{\n  std::map&lt;int, foo&gt; my_map;\n  auto my_new_pair{ new std::pair&lt;int, foo&gt;(42, foo{}) };\n\n  if (my_new_pair) // ok, we could build the node\n  {\n    my_map.insert(my_new_pair); // no allocation, my_map only takes the \"ownership\" of my_new_pair\n  }\n}\n</code></pre>\n<p>but there is no such overload of <code>insert</code>.</p>\n<p>Do you guys have a solution?</p>\n", "Tags": "<c++><dictionary>", "OwnerUserId": "4498831", "AnswerCount": "2"}, "41854668": {"ParentId": "41854519", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2017-01-25T14:54:43.057", "Score": "1", "LastEditorUserId": "596781", "LastEditDate": "2017-01-25T15:45:58.627", "Id": "41854668", "OwnerUserId": "596781", "Body": "<p>Use node extraction and transplanation:</p>\n<pre><code>{\n    std::map&lt;int, foo&gt; staging_map;\n    staging_map.emplace(42, foo{});\n\n    real_map.insert(staging_map.extract(42));  // cannot throw\n}\n</code></pre>\n<p>You're not quite doing the allocation \"yourself\", but you basically can get hold of a pre-allocated map node with this approach that you can use to your own ends until you're ready to insert it into the map, e.g.:</p>\n<pre><code>auto nh = staging_map.extract(42);\n// Done initializing.\n\n// use nh freely\n\nreal_map.insert(std::move(nh));  // guaranteed to work\n</code></pre>\n", "LastActivityDate": "2017-01-25T15:45:58.627"}, "bq_ids": {"n4140": {"so_41854519_41854804_1": {"section_id": 709, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_41854519_41854804_1": {"section_id": 698, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_41854519_41854804_1": {"section_id": 738, "quality": 0.8333333333333334, "length": 10}}}});