post_cb({"26534775": {"CommentCount": "0", "Body": "<p>They are used to permit the compiler to produce sensible error messages. The preprocessor changes around the line numbers, but we want compiler errors to indicate the line numbers from the processor's input.</p>\n", "CreationDate": "2014-10-23T18:24:46.940", "ParentId": "26534657", "Id": "26534775", "LastActivityDate": "2014-10-23T18:24:46.940", "PostTypeId": "2", "Score": "2", "OwnerUserId": "721269"}, "bq_ids": {"n4140": {"so_26534657_26534771_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 550}}, "n3337": {"so_26534657_26534771_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 541}}}, "26534771": {"CommentCount": "0", "Body": "<p>These are explained in the <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.3.6/cpp/Preprocessor-Output.html\"><code>gcc</code> manual</a>:</p>\n<blockquote>\n<p id=\"so_26534657_26534771_0\">Source file name and line number information is conveyed by lines of the form</p>\n<pre><code># linenum filename flags\n</code></pre>\n<p id=\"so_26534657_26534771_1\">These are called linemarkers. They are inserted as needed into the output (but never within a string or character constant). They mean that the following line originated in file filename at line linenum. filename will never contain any non-printing characters; they are replaced with octal escape sequences.</p>\n<p id=\"so_26534657_26534771_2\">After the file name comes zero or more flags, which are <code>1</code>, <code>2</code>, <code>3</code>, or <code>4</code>. If there are multiple flags, spaces separate them. Here is what the flags mean:</p>\n<ul>\n<li><code>1</code> This indicates the start of a new file. </li>\n<li><code>2</code> This indicates returning to a file (after having included another file). </li>\n<li><code>3</code>\n  This indicates that the following text comes from a system header file, so certain warnings should be suppressed. </li>\n<li><code>4</code>\n  This indicates that the following text should be treated as being wrapped in an implicit extern \"C\" block.</li>\n</ul>\n</blockquote>\n", "CreationDate": "2014-10-23T18:24:26.440", "ParentId": "26534657", "Id": "26534771", "LastActivityDate": "2014-10-23T18:24:26.440", "PostTypeId": "2", "Score": "6", "OwnerUserId": "367273"}, "26534657": {"CreationDate": "2014-10-23T18:16:55.877", "ViewCount": "87", "Id": "26534657", "AcceptedAnswerId": "26534775", "Score": "1", "Title": "What are the number directives output by the preprocessor?", "LastEditorUserId": "1128289", "CommentCount": "0", "Body": "<p>If I use gcc, clang, or icc with the -E flag to only run the preprocessor, I get lines in the output that look like this:</p>\n<pre><code># 1 \"test1.cpp\"\n# 1 \"&lt;built-in&gt;\" 1\n# 1 \"&lt;built-in&gt;\" 3\n# 175 \"&lt;built-in&gt;\" 3\n# 1 \"&lt;command line&gt;\" 1\n# 1 \"&lt;built-in&gt;\" 2\n# 1 \"test1.cpp\" 2\n</code></pre>\n<p>What are these? They begin with the # sign as though they were preprocessor directives but this is the <em>output</em> of the preprocessor.</p>\n", "Tags": "<c++><c><c-preprocessor>", "LastEditDate": "2014-10-23T18:22:33.080", "LastActivityDate": "2014-10-23T18:24:46.940", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1128289"}});