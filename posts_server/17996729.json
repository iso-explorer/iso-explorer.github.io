post_cb({"17996729": {"CommentCount": "1", "ViewCount": "137", "PostTypeId": "1", "LastEditorUserId": "1649209", "CreationDate": "2013-08-01T14:22:40.990", "LastActivityDate": "2013-08-01T20:10:26.140", "Title": "Why is redefining a fix sized static array required/works?", "AcceptedAnswerId": "17996786", "LastEditDate": "2013-08-01T20:10:26.140", "Id": "17996729", "Score": "1", "Body": "<p>I'm hoping one of you could explain to me why the compiler requires that I redefined a static fixed-length array in the compilation unit despite having already done so in the header. Here's an example:</p>\n<p>MyClass.h:</p>\n<pre><code>#ifndef MYCLASS_H\n#define MYCLASS_H\n\nclass MyClass {\nprivate:\n    static char myPrecomputeTable[256];\n}\n\n#endif\n</code></pre>\n<p>MyClass.cpp</p>\n<pre><code>#include \"MyClass.h\"\n\nchar MyClass::myPrecomputeTable[256];\n</code></pre>\n<p>If I remove the redefinition in MyClass.cpp, the linker complains that myPrecomputeTable is undefined. The syntax seems redundant. Could anyone explain to me why the compiler/linker requires the definition?</p>\n<p>EDIT:</p>\n<p>Sorry, I guess I wasn't clear about what I was confused about. I understand the declaration/definition concept, it's more the defining the size of the array that I find interesting. In both the definition and the declaration, I have to define the size which seems redundant.</p>\n<p>EDIT:</p>\n<p>I did a bit more digging and it turns out a number of approaches to this topic are compiler friendly.\nCompiles:</p>\n<pre><code>MyClass.h\nclass MyClass {\n    static char myPrecomputeTable[256];\n};\n\nMyClass.cpp\nchar MyClass::myPrecomputeTable[256];\n</code></pre>\n<p>Compiles:</p>\n<pre><code>MyClass.h\nclass MyClass {\n    static char myPrecomputeTable[];\n};\n\nMyClass.cpp\nchar MyClass::myPrecomputeTable[256];\n</code></pre>\n<p>Compiles:</p>\n<pre><code>MyClass.h\nclass MyClass {\n    static char myPrecomputeTable[256];\n};\n\nMyClass.cpp\nchar MyClass::myPrecomputeTable[];\n</code></pre>\n<p>Does Not Compile:</p>\n<pre><code>MyClass.h\nclass MyClass {\n    static char myPrecomputeTable[512];\n};\n\nMyClass.cpp\nchar MyClass::myPrecomputeTable[256];\n</code></pre>\n<p>The size has to be defined in either header or class or both, but the compiler is smart enough to stop conflicting sizes.</p>\n", "Tags": "<c++>", "OwnerUserId": "1649209", "AnswerCount": "2"}, "17996752": {"ParentId": "17996729", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-08-01T14:23:53.683", "Score": "2", "LastEditorUserId": "440558", "LastEditDate": "2013-08-01T14:37:38.343", "Id": "17996752", "OwnerUserId": "440558", "Body": "<p>The first one in the header file is just a <em>declaration</em>, telling the compiler that this member exist for all other source files that includes the header file.</p>\n<p>The second in the source file is the actual <em>definition</em>, and is needed by the linker when linking the whole project together into a single executable.</p>\n<hr>\n<p>In the case of having to tell the compiler the size twice, that's just how the language is specified to work. There's not much you (or anyone) can do about it.</p>\n<p>However, you can use <code>typedef</code> to work around it:</p>\n<pre><code>class MyClass\n{\n    typedef char PrecomputeTable_t[256];\n\n    static PrecomputeTable_t myPrecomputeTable;\n};\n\n...\n\nMyClass::PrecomputeTable_t MyClass::myPrecomputeTable;\n</code></pre>\n</hr>", "LastActivityDate": "2013-08-01T14:37:38.343"}, "17996786": {"ParentId": "17996729", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-08-01T14:25:17.157", "Score": "6", "LastEditorUserId": "1394283", "LastEditDate": "2013-08-01T14:34:27.180", "Id": "17996786", "OwnerUserId": "1394283", "Body": "<p>In the header :</p>\n<pre><code>class MyClass {\nprivate:\n    static char myPrecomputeTable[256];\n}\n</code></pre>\n<p>It is a <strong>declaration</strong>.</p>\n<p>And in the .cpp :</p>\n<pre><code>char MyClass::myPrecomputeTable[256];\n</code></pre>\n<p>is a <strong>definition</strong>.</p>\n<blockquote>\n<p id=\"so_17996729_17996786_0\">A <strong>declaration</strong> provides basic attributes of a symbol: its type and its name.</p>\n<p id=\"so_17996729_17996786_1\">A <strong>definition</strong> provides all of the details of that symbol--if it's a function, what it does; if it's a class, what fields and methods it has; if it's a variable, where that variable is stored.</p>\n<p id=\"so_17996729_17996786_2\">Often, the compiler only needs to have a declaration for something in order to compile a file into an object file, expecting that the linker can find the definition from another file. If no source file ever defines a symbol, but it is declared, you will get errors at link time complaining about undefined symbols.</p>\n</blockquote>\n<p>A good link to understand the difference between both : <a href=\"http://www.cprogramming.com/declare_vs_define.html\" rel=\"nofollow\">http://www.cprogramming.com/declare_vs_define.html</a></p>\n<hr>\n<p>From the standard :</p>\n<blockquote>\n<p id=\"so_17996729_17996786_3\"><strong>3.1 Declarations and definitions [basic.def]</strong></p>\n<ol>\n<li><p id=\"so_17996729_17996786_4\">A declaration may introduce one or more names into a translation unit or redeclare names introduced by previous declarations. If so, the declaration specifies the interpretation and attributes of these names. A declaration may also have effects including:</p>\n<ul>\n<li>a static assertion (Clause 7),</li>\n<li>controlling template instantiation (14.7.2),</li>\n<li>use of attributes (Clause 7), and</li>\n<li>nothing (in the case of an empty-declaration).</li>\n</ul></li>\n<li><p id=\"so_17996729_17996786_5\">A declaration is a <em>definition</em> unless it declares a function without specifying the function\u2019s body, it contains the <code>extern</code> specifier or a <em>linkage-specification</em> and neither an <em>initializer</em> nor a <em>function-body</em>, it declares a static data member in a class definition, it is a <em>class name declaration</em>, it is an <em>opaque-enum-declaration</em>, or it is a <em>typedef declaration</em>, a <em>using-declaration</em>, a static_assert-declaration, an <em>attribute-declaration</em>, an <em>empty-declaration</em>, or a <em>using-directive</em>.</p></li>\n</ol>\n</blockquote>\n</hr>", "LastActivityDate": "2013-08-01T14:34:27.180"}, "bq_ids": {"n4140": {"so_17996729_17996786_5": {"section_id": 7034, "quality": 0.96875, "length": 31}, "so_17996729_17996786_4": {"section_id": 7033, "quality": 1.0, "length": 25}, "so_17996729_17996786_0": {"section_id": 7104, "quality": 0.5555555555555556, "length": 5}}, "n3337": {"so_17996729_17996786_5": {"section_id": 6780, "quality": 0.96875, "length": 31}, "so_17996729_17996786_4": {"section_id": 6779, "quality": 1.0, "length": 25}}, "n4659": {"so_17996729_17996786_5": {"section_id": 8531, "quality": 0.96875, "length": 31}, "so_17996729_17996786_4": {"section_id": 8530, "quality": 1.0, "length": 25}, "so_17996729_17996786_0": {"section_id": 8605, "quality": 0.5555555555555556, "length": 5}}}});