post_cb({"30851572": {"Id": "30851572", "PostTypeId": "2", "Body": "<p>From my favorite <a href=\"http://en.cppreference.com/w/cpp/language/implicit_cast\" rel=\"noreferrer\">documentation</a>:</p>\n<blockquote>\n<p id=\"so_30851490_30851572_0\">A prvalue of floating-point type can be converted to prvalue of any integer type. The fractional part is truncated, that is, the fractional part is discarded. <strong>If the value can not fit into the destination type, the behavior is undefined</strong> (even when the destination type is unsigned, modulo arithmetic does not apply).</p>\n</blockquote>\n<p>So yes, you are right. (For C++, but someone already posted a near identical standard quote for C)</p>\n", "LastActivityDate": "2015-06-15T17:41:30.130", "CommentCount": "0", "CreationDate": "2015-06-15T17:41:30.130", "ParentId": "30851490", "Score": "5", "OwnerUserId": "3002139"}, "30851578": {"Id": "30851578", "PostTypeId": "2", "Body": "<p>Undefined behavior in C if the integral part cannot be represented in the integer type.</p>\n<blockquote>\n<p id=\"so_30851490_30851578_0\">(C11, 6.3.1.4p1)\n  \"When a finite value of real floating type is converted to an integer type other than _Bool, the fractional part is discarded (i.e., the value is truncated toward zero). If the value of the integral part cannot be represented by the integer type, the behavior is undefined.61\"</p>\n</blockquote>\n<p>Similar wording in C++ in C++11, 4.9p1.</p>\n", "LastEditorUserId": "1119701", "LastActivityDate": "2015-06-15T17:44:13.117", "Score": "3", "CreationDate": "2015-06-15T17:41:39.947", "ParentId": "30851490", "CommentCount": "0", "OwnerUserId": "1119701", "LastEditDate": "2015-06-15T17:44:13.117"}, "bq_ids": {"n4140": {"so_30851490_30851593_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 37}}, "n3337": {"so_30851490_30851593_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 34}}, "n4659": {"so_30851490_30851593_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 37}}}, "30851490": {"ViewCount": "321", "Body": "<p>So following:</p>\n<pre><code>double t = 244.233;\nint a = (int) t;\n</code></pre>\n<p>is not undefined behaviour since 244 can fit inside <code>int</code> did I get it right?\nOtherwise if it was larger value instead of 244 which didn't fit inside int this would be undefined, did I get it right?</p>\n<p>I am more interested in how C does this. But is there difference in this case w.r.t to C++?</p>\n", "AcceptedAnswerId": "30851593", "Title": "Casting double to integer when is it undefined behaviour", "CreationDate": "2015-06-15T17:36:55.677", "Id": "30851490", "CommentCount": "0", "PostTypeId": "1", "OwnerDisplayName": "user5012412", "LastActivityDate": "2015-06-15T17:44:13.117", "Score": "2", "Tags": "<c++><c>", "AnswerCount": "3"}, "30851593": {"Id": "30851593", "PostTypeId": "2", "Body": "<p>From [conv.fpint]:</p>\n<blockquote>\n<p id=\"so_30851490_30851593_0\">A prvalue of a floating point type can be converted to a prvalue of an integer type. The conversion truncates;\n  that is, the fractional part is discarded. The behavior is undefined if the truncated value cannot be\n  represented in the destination type.</p>\n</blockquote>\n<p>So, for example, converting 66666.66 to an <code>int16_t</code> would be undefined behavior, but converting <code>66.66</code> is just fine. </p>\n", "LastActivityDate": "2015-06-15T17:42:33.193", "CommentCount": "0", "CreationDate": "2015-06-15T17:42:33.193", "ParentId": "30851490", "Score": "6", "OwnerUserId": "2069064"}});