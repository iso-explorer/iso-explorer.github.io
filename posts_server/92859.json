post_cb({"44458801": {"Id": "44458801", "PostTypeId": "2", "Body": "<p>The main difference between struct and class is that in struct you can only declare data variables of different data types while in class you can declare data variables,member functions and thus you can manipulate data variables through functions.</p>\n<p>-&gt; another handy thing that i find in class vs struct is that while implementing files in a program if you want to make some operations of a struct again and again on every new set of operations you need to make a separate function and you need to pass object of struct after reading it from the file so as to make some operations on it .\n   while in class if you make a function that does some operations on the data needed everytime..its easy you just have to read object from file and call the function..</p>\n<p>But it depennds on the programmer which way he/she finds suitable...according to me i prefer class everytime just because it supports OOPs and thats the reason it is implemented in almost every languages and its the wonderful feature of all time programming ;-)</p>\n<p>And yeah the most unforgotten difference i forgot to mention is that class supports data hiding and also supports operations that are performed on built in data types while struct doesnt !</p>\n", "LastEditorUserId": "8137152", "LastActivityDate": "2017-06-09T15:15:07.270", "Score": "-2", "CreationDate": "2017-06-09T13:14:36.580", "ParentId": "92859", "CommentCount": "2", "OwnerUserId": "8137152", "LastEditDate": "2017-06-09T15:15:07.270"}, "3432421": {"Id": "3432421", "PostTypeId": "2", "Body": "<p>It's worth remembering C++'s origins in, and compatibility with, C.</p>\n<p>C has structs, it has no concept of encapsulation, so everything is public.</p>\n<p>Being public by default is generally considered a bad idea when taking an object-oriented approach, so in making a form of C that is natively conducive to OOP (you can do OO in C, but it won't help you) which was the idea in C++ (originally \"C With Classes\"), it makes sense to make members private by default.</p>\n<p>On the other hand, if Stroustrup had changed the semantics of <code>struct</code> so that its members were private by default, it would have broken compatibility (it is no longer as often true as the standards diverged, but all valid C programs were also valid C++ programs, which had a big effect on giving C++ a foothold).</p>\n<p>So a new keyword, <code>class</code> was introduced to be exactly like a struct, but private by default.</p>\n<p>If C++ had come from scratch, with no history, then it would probably have only one such keyword. It also probably wouldn't have made the impact it made.</p>\n<p>In general, people will tend to use struct when they are doing something like how structs are used in C; public members, no constructor (as long as it isn't in a union, you <strong>can</strong> have constructors in structs, just like with classes, but people tend not to), no virtual methods, etc. Since languages are as much to communicate with people reading the code as to instruct machines (or else we'd stick with assembly and raw VM opcodes) it's a good idea to stick with that.</p>\n", "LastEditorUserId": "400547", "LastActivityDate": "2016-05-10T02:06:38.260", "Score": "93", "CreationDate": "2010-08-07T23:17:38.190", "ParentId": "92859", "CommentCount": "7", "OwnerUserId": "400547", "LastEditDate": "2016-05-10T02:06:38.260"}, "27318401": {"Id": "27318401", "PostTypeId": "2", "Body": "<p>There are 3 basic difference between structure and class </p>\n<p>1St- memory are reserved for structure in stack memory (which is near to programming language )whether for class in stack memory  are reserved for only reffrence and actual memory are reserved in heap memory.</p>\n<p>2Nd - By default structure treat as a public whether class treat as a private .</p>\n<p>3Rd- can't re -use code in structure but in class we can re-use same code in many time called inhertence  </p>\n", "LastEditorUserId": "4329167", "LastActivityDate": "2014-12-05T14:51:21.227", "Score": "-6", "CreationDate": "2014-12-05T14:45:45.223", "ParentId": "92859", "CommentCount": "2", "OwnerUserId": "4329167", "LastEditDate": "2014-12-05T14:51:21.227"}, "92859": {"ViewCount": "287709", "Body": "<p>This question was <a href=\"https://stackoverflow.com/questions/13049\">already asked in the context of C#/.Net</a>.</p>\n<p>Now I'd like to learn the differences between a struct and a class in C++. Please discuss the technical differences as well as reasons for choosing one or the other in OO design.</p>\n<p>I'll start with an obvious difference:</p>\n<ul>\n<li>If you don't specify <code>public:</code> or <code>private:</code>, members of a struct are public by default; members of a class are private by default.</li>\n</ul>\n<p>I'm sure there are other differences to be found in the obscure corners of the C++ specification.</p>\n", "AcceptedAnswerId": "999810", "Title": "What are the differences between struct and class in C++?", "CreationDate": "2008-09-18T14:09:58.947", "LastActivityDate": "2017-10-03T04:52:21.913", "CommentCount": "2", "FavoriteCount": "133", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:26:36.550", "OwnerDisplayName": "palm3D", "LastEditorUserId": "-1", "Id": "92859", "Score": "356", "OwnerUserId": "2686", "Tags": "<c++><oop><class><struct><c++-faq>", "AnswerCount": "28"}, "92992": {"Id": "92992", "PostTypeId": "2", "Body": "<p>STRUCT is a type of Abstract Data Type that divides up a given chunk of memory according to the structure specification. Structs are particularly useful in file serialization/deserialization as the structure can often be written to the file verbatim. (i.e. Obtain a pointer to the struct, use the SIZE macro to compute the number of bytes to copy, then move the data in or out of the struct.)</p>\n<p>Classes are a different type of abstract data type that attempt to ensure information hiding. Internally, there can be a variety of machinations, methods, temp variables, state variables. etc. that are all used to present a consistent API to any code which wishes to use the class. </p>\n<p>In effect, structs are about data, classes are about code.</p>\n<p>However, you do need to understand that these are merely abstractions. It's perfectly possible to create structs that look a lot like classes and classes that look a lot like structs. In fact, the earliest C++ compilers were merely pre-compilers that translates C++ code to C. Thus these abstractions are a benefit to logical thinking, not necessarily an asset to the computer itself.</p>\n<p>Beyond the fact that each is a different type of abstraction, Classes provide solutions to the C code naming puzzle. Since you can't have more than one function exposed with the same name, developers used to follow a pattern of _(). e.g. mathlibextreme_max(). By grouping APIs into classes, similar functions (here we call them \"methods\") can be grouped together and protected from the naming of methods in other classes. This allows the programmer to organize his code better and increase code reuse.  In theory, at least.</p>\n", "OwnerDisplayName": "64BitBob", "LastActivityDate": "2008-09-18T14:23:30.927", "Score": "8", "CreationDate": "2008-09-18T14:23:30.927", "ParentId": "92859", "CommentCount": "4", "OwnerUserId": "16339"}, "bq_ids": {"n4140": {"so_92859_2661721_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 369}, "so_92859_999810_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6666}, "so_92859_999810_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6679}}, "n3337": {"so_92859_2661721_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 359}, "so_92859_999810_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6421}, "so_92859_999810_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6434}}, "n4659": {"so_92859_29986884_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6103}, "so_92859_999810_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 8141}, "so_92859_999810_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 8154}}}, "92898": {"Id": "92898", "PostTypeId": "2", "Body": "<p>Here is a good explanation: <a href=\"http://carcino.gen.nz/tech/cpp/struct_vs_class.php\" rel=\"nofollow noreferrer\">http://carcino.gen.nz/tech/cpp/struct_vs_class.php</a></p>\n<blockquote>\n<p id=\"so_92859_92898_0\">So, one more time: in C++, a struct is identical to a class except that the members of a struct have public visibility by default, but the members of a class have private visibility by default.</p>\n</blockquote>\n", "OwnerDisplayName": "nutario", "LastActivityDate": "2008-09-18T14:13:29.017", "Score": "1", "CreationDate": "2008-09-18T14:13:29.017", "ParentId": "92859", "CommentCount": "0", "OwnerUserId": "5334"}, "18455476": {"Id": "18455476", "PostTypeId": "2", "Body": "<p>Out of all these factors,it can be concluded that concept Class is highly suitable to represent real world objects rather than \"Structures\".Largely because OOP concepts used in class are highly practical in explaining real world scenarios therefore easier to merge them to reality.For an example,default inheritance is public for structs but if we apply this rule for real world,it's ridiculous.But in a class default inheritance is private which is more realistic.</p>\n<p>Anyways,what i need to justify is Class is a much broader,real world applicable concept whereas Structure is a primitive Concept with poor internal organization(Eventhough struct follows OOP concepts,they have a poor meaning)</p>\n", "LastActivityDate": "2013-08-27T01:22:29.987", "CommentCount": "1", "CreationDate": "2013-08-27T01:22:29.987", "ParentId": "92859", "Score": "-1", "OwnerUserId": "2465425"}, "92881": {"Body": "<p>Class' members are private by default. Struct's members are public by default. Besides that there are no other differences. Also see <a href=\"https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c\">this question</a>.</p>\n", "CreationDate": "2008-09-18T14:12:32.140", "ParentId": "92859", "CommentCount": "3", "LastEditDate": "2017-05-23T11:47:29.303", "PostTypeId": "2", "OwnerDisplayName": "Kasprzol", "LastEditorUserId": "-1", "LastActivityDate": "2008-09-18T14:12:32.140", "Id": "92881", "Score": "26", "OwnerUserId": "5957"}, "31603033": {"Id": "31603033", "PostTypeId": "2", "Body": "<p><strong>1) Members of a class are private by default and members of struct are public by default.</strong></p>\n<p>For example program 1 fails in compilation and program 2 works fine.</p>\n<pre><code>// Program 1\n#include &lt;stdio.h&gt;\n\nclass Test {\n    int x; // x is private\n};\nint main()\n{\n  Test t;\n  t.x = 20; // compiler error because x is private\n  getchar();\n  return 0;\n}\nRun on IDE\n// Program 2\n#include &lt;stdio.h&gt;\n\nstruct Test {\n    int x; // x is public\n};\nint main()\n{\n  Test t;\n  t.x = 20; // works fine because x is public\n  getchar();\n  return 0;\n}\n</code></pre>\n<p><strong>2) When deriving a struct from a class/struct, default access-specifier for a base class/struct is public. And when deriving a class, default access specifier is private.</strong></p>\n<p>For example program 3 fails in compilation and program 4 works fine.</p>\n<pre><code>// Program 3\n#include &lt;stdio.h&gt;\n\nclass Base {\npublic:\n    int x;\n};\n\nclass Derived : Base { }; // is equilalent to class Derived : private Base {}\n\nint main()\n{\n  Derived d;\n  d.x = 20; // compiler error becuase inheritance is private\n  getchar();\n  return 0;\n}\nRun on IDE\n// Program 4\n#include &lt;stdio.h&gt;\n\nclass Base {\npublic:\n    int x;\n};\n\nstruct Derived : Base { }; // is equilalent to struct Derived : public Base {}\n\nint main()\n{\n  Derived d;\n  d.x = 20; // works fine becuase inheritance is public\n  getchar();\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1667476", "LastActivityDate": "2015-10-07T03:47:26.227", "Score": "5", "CreationDate": "2015-07-24T05:44:13.843", "ParentId": "92859", "CommentCount": "1", "OwnerUserId": "1667476", "LastEditDate": "2015-10-07T03:47:26.227"}, "21415401": {"Id": "21415401", "PostTypeId": "2", "Body": "<p>The main difference between structure and class keyword in oops is that, no public and private member declaration present in structure.and the data member and member function can be defined as public, private as well as protected.</p>\n", "LastActivityDate": "2014-01-28T19:50:07.233", "CommentCount": "1", "CreationDate": "2014-01-28T19:50:07.233", "ParentId": "92859", "Score": "-2", "OwnerUserId": "3246080"}, "29986884": {"Id": "29986884", "PostTypeId": "2", "Body": "<p>You might consider this for guidelines on when to go for struct or class, <a href=\"https://msdn.microsoft.com/en-us/library/ms229017%28v=vs.110%29.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/ms229017%28v=vs.110%29.aspx</a> .</p>\n<blockquote>\n<p id=\"so_92859_29986884_0\">\u221a CONSIDER defining a struct instead of a class if instances of the\n  type are small and commonly short-lived or are commonly embedded in\n  other objects. </p>\n<p id=\"so_92859_29986884_1\">X AVOID defining a struct unless the type has all of\n  the following characteristics: </p>\n<p id=\"so_92859_29986884_2\">It logically represents a single value,\n  similar to primitive types (int, double, etc.). </p>\n<p id=\"so_92859_29986884_3\">It has an instance\n  size under 16 bytes. </p>\n<p id=\"so_92859_29986884_4\">It is immutable. </p>\n<p id=\"so_92859_29986884_5\">It will not have to be boxed\n  frequently.</p>\n</blockquote>\n", "LastActivityDate": "2015-05-01T12:30:43.610", "CommentCount": "1", "CreationDate": "2015-05-01T12:30:43.610", "ParentId": "92859", "Score": "-1", "OwnerUserId": "1141493"}, "8104128": {"Id": "8104128", "PostTypeId": "2", "Body": "<p>Another main difference is when it comes to Templates. As far as I know, you may use a class when you define a template but NOT a struct.</p>\n<pre><code>template&lt;class T&gt; // OK\ntemplate&lt;struct T&gt; // ERROR, struct not allowed here\n</code></pre>\n", "LastActivityDate": "2011-11-12T11:21:53.650", "CommentCount": "2", "CreationDate": "2011-11-12T11:21:53.650", "ParentId": "92859", "Score": "2", "OwnerUserId": "1043056"}, "6942297": {"Id": "6942297", "PostTypeId": "2", "Body": "<p>I found an other difference. if you do not define a constructor in a class, the compiler will define one. but in a struct if you do not define a constructor, the compiler do not define a constructor too. so in some cases that we really do not need a constructor, struct is a better choice (performance tip).\nand sorry for my bad English.</p>\n", "LastActivityDate": "2011-08-04T13:28:15.140", "CommentCount": "3", "CreationDate": "2011-08-04T13:28:15.140", "ParentId": "92859", "Score": "-2", "OwnerUserId": "878667"}, "92941": {"Id": "92941", "PostTypeId": "2", "Body": "<p>It's just a convention.  Structs can be created to hold simple data but later evolve time with the addition of member functions and constructors.  On the other hand it's unusual to see anything other than public: access in a struct.</p>\n", "OwnerDisplayName": "finnw", "LastActivityDate": "2008-09-18T14:17:42.300", "Score": "1", "CreationDate": "2008-09-18T14:17:42.300", "ParentId": "92859", "CommentCount": "0", "OwnerUserId": "12048"}, "92916": {"Body": "<p>The only other difference is the default inheritance of classes and structs, which, unsurprisingly, is private and public respectively.</p>\n", "CreationDate": "2008-09-18T14:15:19.043", "ParentId": "92859", "CommentCount": "0", "LastEditDate": "2012-07-03T13:11:17.783", "PostTypeId": "2", "OwnerDisplayName": "Skizz", "LastEditorUserId": "142162", "LastActivityDate": "2012-07-03T13:11:17.783", "Id": "92916", "Score": "8", "OwnerUserId": "1898"}, "92914": {"Id": "92914", "PostTypeId": "2", "Body": "<p>According to Stroustrup in the <a href=\"http://rads.stackoverflow.com/amzn/click/0201700735\" rel=\"noreferrer\">C++ Programming Language</a>:</p>\n<blockquote>\n<p id=\"so_92859_92914_0\">Which style you use depends on circumstances and taste. I usually prefer to use <code>struct</code> for classes that have all data public. I think of such classes as \"not quite proper types, just data structures.\"</p>\n</blockquote>\n<p>Functionally, there is no difference other than the public / private</p>\n", "OwnerDisplayName": "crashmstr", "LastActivityDate": "2008-09-18T14:15:12.990", "Score": "23", "CreationDate": "2008-09-18T14:15:12.990", "ParentId": "92859", "CommentCount": "1", "OwnerUserId": "1441"}, "29082459": {"Id": "29082459", "PostTypeId": "2", "Body": "<p>Class is only meaningful in the context of software engineering. In the context of data structures and algorithms, class and struct are not that different. There's no any rule restricted that class's member must be referenced.</p>\n<p>When developing large project with tons of people without class, you may finally get complicated coupled code because everybody use whatever functions and data they want. class provides permission controls and inherents to enhance decoupling and reusing codes.</p>\n<p>If you read some software engineering principles, you'll find most standards can not be implemented easily without class. for example:\n<a href=\"http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29\" rel=\"nofollow\">http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29</a></p>\n<p>BTW, When a struct allocates a crunch of memory and includes several variables, value type variables indicates that values are embbeded in where struct is allocated. In contrast, reference type variable's values are external and reference by a pointer which is also embedded in where struct is allocated.</p>\n", "LastActivityDate": "2015-03-16T16:49:09.007", "CommentCount": "1", "CreationDate": "2015-03-16T16:49:09.007", "ParentId": "92859", "Score": "-1", "OwnerUserId": "1065942"}, "19002981": {"Id": "19002981", "PostTypeId": "2", "Body": "<p>Classes are Reference types and Structures are Values types.<br>\nWhen I say Classes are reference types,<br>\nbasically they will contain the address of an instance variables.</br></br></p>\n<p>For example:</p>\n<pre><code>Class MyClass\n{\n    Public Int DataMember;  //By default, accessibility of class data members \n                            //will be private. So I am making it as Public which \n                            //can be accessed outside of the class.\n}\n</code></pre>\n<p>In main method,<br> \nI can create an instance of this class using new operator that allocates memory for this class<br> \nand stores the base address of that into MyClass type variable(_myClassObject2). </br></br></p>\n<pre><code>Static Public void Main (string[] arg)\n{\n    MyClass _myClassObject1 = new MyClass();\n    _myClassObject1.DataMember = 10;\n\n    MyClass _myClassObject2 = _myClassObject1;\n    _myClassObject2.DataMember=20;\n}\n</code></pre>\n<p>In the above program, \n    MyClass _myClassObject2 = _myClassObject1;\ninstruction indicates that both variables of type MyClass </p>\n<ol>\n<li>myClassObject1</li>\n<li>myClassObject2</li>\n</ol>\n<p>and  will point to the same memory location.<br> \nIt basically assigns the same memory location into another variable of same type.</br></p>\n<p>So if any changes that we make in any one of the objects type MyClass will have an effect on another<br>\nsince both are pointing to the same memory location.</br></p>\n<p>\"_myClassObject1.DataMember = 10;\" at this line both the object\u2019s data members will contain the value of 10.<br> \n\"_myClassObject2.DataMember = 20;\" at this line both the object\u2019s data member will contains the value of 20.<br> \nEventually, <b>we are accessing datamembers of an object through pointers.</b></br></br></p>\n<p>Unlike classes, structures are value types. \nFor example: </p>\n<pre><code>Structure MyStructure\n{\n    Public Int DataMember;  //By default, accessibility of Structure data \n                            //members will be private. So I am making it as \n                            //Public which can be accessed out side of the structure.\n}\n\nStatic Public void Main (string[] arg)\n{\n    MyStructure _myStructObject1 = new MyStructure();\n    _myStructObject1.DataMember = 10;\n\n    MyStructure _myStructObject2 = _myStructObject1;\n    _myStructObject2.DataMember = 20;\n}\n</code></pre>\n<p>In the above program,<br> \ninstantiating the object of MyStructure type using new operator and <br> \nstoring address into _myStructObject variable of type MyStructure and <br> \nassigning value 10 to data member of the structure using \"_myStructObject1.DataMember = 10\". </br></br></br></p>\n<p>In the next line, <br>\nI am declaring another variable _myStructObject2 of type MyStructure and assigning _myStructObject1 into that. <br>\nHere .NET C# compiler creates another copy of _myStructureObject1 object and <br>\nassigns that memory location into MyStructure variable _myStructObject2.<br/></br></br></br></p>\n<p>So whatever change we make on _myStructObject1 will never have an effect on another variable _myStructObject2 of type MyStructrue. <br>\nThat\u2019s why we are saying Structures are value types.</br></p>\n<p>So the immediate Base class for class is Object and immediate Base class for Structure is ValueType which inherits from Object.<br>\n<b>Classes will support an Inheritance whereas Structures won\u2019t.</b></br></p>\n<p>How are we saying that? <br>\nAnd what is the reason behind that? <br> \nThe answer is Classes. <br/></br></br></p>\n<p>It can be abstract, sealed, static, and partial and can\u2019t be Private, Protected and protected internal.</p>\n", "LastEditorUserId": "900284", "LastActivityDate": "2013-12-16T13:56:00.300", "Score": "-3", "CreationDate": "2013-09-25T10:54:45.823", "ParentId": "92859", "CommentCount": "6", "OwnerUserId": "2173148", "LastEditDate": "2013-12-16T13:56:00.300"}, "6943176": {"Id": "6943176", "PostTypeId": "2", "Body": "<p>The other answers have mentioned the private/public defaults, (but note that a struct is a class is a struct; they are not two different items, just two ways of defining the same item).</p>\n<p>What might be interesting to note (particularly since the asker is likely to be using MSVC++ since he mentions \"unmanaged\" C++) is that Visual C++ complains under certain circumstances if a class is declared with <code>class</code> and then defined with <code>struct</code> (or possibly the other way round), although the standard says that is perfectly legal.</p>\n", "LastActivityDate": "2011-08-04T14:25:00.830", "CommentCount": "0", "CreationDate": "2011-08-04T14:25:00.830", "ParentId": "92859", "Score": "1", "OwnerUserId": "611142"}, "92951": {"Body": "<p>Quoting <a href=\"http://www.faqs.org/faqs/C++-faq/part3/\" rel=\"noreferrer\">The C++ FAQ</a>,</p>\n<blockquote>\n<p id=\"so_92859_92951_0\">[7.8] What's the difference between\n  the keywords struct and class?</p>\n<p id=\"so_92859_92951_1\">The members and base classes of a\n  struct are public by default, while in\n  class, they default to private.  Note:\n  you should make your base classes\n  explicitly public, private, or\n  protected, rather than relying on the\n  defaults.</p>\n<p id=\"so_92859_92951_2\">Struct and class are otherwise\n  functionally equivalent.</p>\n<p id=\"so_92859_92951_3\">OK, enough of that squeaky clean\n  techno talk.  Emotionally, most\n  developers make a strong distinction\n  between a class and a struct.  A\n  struct simply feels like an open pile\n  of bits with very little in the way of\n  encapsulation or functionality.  A\n  class feels like a living and\n  responsible member of society with\n  intelligent services, a strong\n  encapsulation barrier, and a well\n  defined interface.  Since that's the\n  connotation most people already have,\n  you should probably use the struct\n  keyword if you have a class that has\n  very few methods and has public data\n  (such things do exist in well designed\n  systems!), but otherwise you should\n  probably use the class keyword.</p>\n</blockquote>\n", "CreationDate": "2008-09-18T14:18:44.153", "ParentId": "92859", "CommentCount": "0", "LastEditDate": "2014-03-17T17:56:16.060", "PostTypeId": "2", "OwnerDisplayName": "Rob Adams", "LastEditorUserId": "11208", "LastActivityDate": "2014-03-17T17:56:16.060", "Id": "92951", "Score": "137", "OwnerUserId": "8747"}, "999810": {"Id": "999810", "PostTypeId": "2", "Body": "<p>You forget the tricky 2nd difference between classes and structs.</p>\n<p>Quoth the standard (\u00a711.2.2 in C++98 through C++11):</p>\n<blockquote>\n<p id=\"so_92859_999810_0\">In absence of an <em>access-specifier</em>\n  for a base class, public is assumed\n  when the derived class is declared\n  <em>struct</em> and private is assumed when the class is declared <em>class</em>.</p>\n</blockquote>\n<p>And just for completeness' sake, the more widely known difference between class and struct is defined in (11.2):</p>\n<blockquote>\n<p id=\"so_92859_999810_1\">Member of a class defined with the\n  keyword <em>class</em> are <em>private</em> by\n  default. Members of a class defined\n  with the keywords <em>struct</em> or <em>union</em>\n  are <em>public</em> by default.</p>\n</blockquote>\n<p>Additional difference: the keyword <code>class</code> can be used to declare template parameters, while the <code>struct</code> keyword cannot be so used.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-02-03T04:03:08.017", "Score": "408", "CreationDate": "2009-06-16T06:19:01.103", "ParentId": "92859", "CommentCount": "12", "OwnerUserId": "11208", "LastEditDate": "2016-02-03T04:03:08.017"}, "11420186": {"Id": "11420186", "PostTypeId": "2", "Body": "<ul>\n<li><p>. In classes all the members by default are private but in  structure\nmembers are public by default.</p>\n<ol>\n<li><p>There is no term like constructor and destructor for  structs, but for class compiler creates default if you  don't provide.</p></li>\n<li><p>Sizeof empty structure is 0 Bytes wer as Sizeof empty class is 1 Byte  The struct default access type is public. A struct should\ntypically be used for grouping data. </p></li>\n</ol>\n<p>The class default access type is private, and the default mode for\ninheritance is private. A class should be used for grouping data and\nmethods that operate on that data. </p>\n<p>In short, the convention is to use struct when the purpose is to\ngroup data, and use classes when we require data abstraction and,\nperhaps inheritance. </p>\n<p>In C++ structures and classes are passed by value, unless explicitly\nde-referenced. In other languages classes and structures may have\ndistinct semantics - ie. objects (instances of classes) may be passed\nby reference and structures may be passed by value. Note: There are\ncomments associated with this question. See the discussion page to\nadd to the conversation.</p></li>\n</ul>\n", "LastActivityDate": "2012-07-10T19:07:09.190", "CommentCount": "3", "CreationDate": "2012-07-10T19:07:09.190", "ParentId": "92859", "Score": "2", "OwnerUserId": "1515805"}, "2661721": {"Id": "2661721", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_92859_2661721_0\">ISO IEC 14882-2003</p>\n<p id=\"so_92859_2661721_1\"><strong>9 Classes</strong></p>\n<p id=\"so_92859_2661721_2\">\u00a73</p>\n<p id=\"so_92859_2661721_3\">A structure is a class defined with\n  the <em>class-key</em> <code>struct</code>; its members\n  and base classes (clause 10) are\n  public by default (clause 11).</p>\n</blockquote>\n", "LastActivityDate": "2010-04-18T09:18:14.243", "CommentCount": "0", "CreationDate": "2010-04-18T09:18:14.243", "ParentId": "92859", "Score": "1", "OwnerUserId": "216063"}, "100899": {"Id": "100899", "PostTypeId": "2", "Body": "<ol>\n<li>The members of a structure are public by default, the members of class are private by default.</li>\n<li>Default inheritance for Structure from another structure or class is public.Default inheritance for class from another structure or class is private.</li>\n</ol>\n<pre><code>class A{    \npublic:    \n    int i;      \n};\n\nclass A2:A{    \n};\n\nstruct A3:A{    \n};\n\n\nstruct abc{    \n    int i;\n};\n\nstruct abc2:abc{    \n};\n\nclass abc3:abc{\n};\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{    \n    abc2 objabc;\n    objabc.i = 10;\n\n    A3 ob;\n    ob.i = 10;\n\n    //A2 obja; //privately inherited\n    //obja.i = 10;\n\n    //abc3 obss;\n    //obss.i = 10;\n}\n</code></pre>\n<p>This is on VS2005.</p>\n", "OwnerDisplayName": "GirishNayak", "LastEditorUserId": "1848654", "LastActivityDate": "2017-10-03T04:52:21.913", "Score": "3", "CreationDate": "2008-09-19T10:12:11.273", "ParentId": "92859", "CommentCount": "1", "LastEditDate": "2017-10-03T04:52:21.913"}, "16017087": {"Id": "16017087", "PostTypeId": "2", "Body": "<p>The difference between <strong>struct</strong> and <strong>class</strong> keywords in C++ is that, when there is no specific specifier on particular composite data type then by default <strong>struct</strong> or <strong>union</strong> is the public keywords that merely considers data hiding but class is the private keyword that considers the hiding of program codes or data. Always some programmers use <strong>struct</strong> for data and <strong>class</strong> for code sake. For more information contact other sources.</p>\n", "LastActivityDate": "2013-04-15T13:57:45.987", "CommentCount": "1", "CreationDate": "2013-04-15T13:57:45.987", "ParentId": "92859", "Score": "-1", "OwnerUserId": "2281544"}, "31438159": {"Id": "31438159", "PostTypeId": "2", "Body": "<p>I am seeing another different between structs and classes having to do with default initialization.  </p>\n<pre><code>struct Foo {\n    int a;\n};\n\nclass Bar {\n    int a;\n};\n\nclass Tester {\n    Foo m_Foo = Foo();\n    Bar m_Bar = Bar();\n\npublic:\n    Tester() {}\n};\n\nint main() {\n    auto myTester = Tester();\n}\n</code></pre>\n<p>Run that code and examine myTester.  You'll find that for m_Foo, the struct, m_Foo.a has been initialized to 0, but for m_Bar, the class, m_Bar.a is uninitialized.  So there does appear to be a difference in what the default constructor does for struct vs. class.  I'm seeing this with Visual Studio.</p>\n", "LastActivityDate": "2015-07-15T18:21:35.397", "CommentCount": "1", "CreationDate": "2015-07-15T18:21:35.397", "ParentId": "92859", "Score": "-2", "OwnerUserId": "990163"}, "39769244": {"Id": "39769244", "PostTypeId": "2", "Body": "<p>While implied by other answers, it's not explicitly mentioned - that structs are C compatible, depending on usage; classes are not.</p>\n<p>This means if you're writing a header that you want to be C compatible then you've no option other than struct (which in the C world can't have functions; but can have function pointers).</p>\n", "LastActivityDate": "2016-09-29T11:38:01.740", "CommentCount": "0", "CreationDate": "2016-09-29T11:38:01.740", "ParentId": "92859", "Score": "1", "OwnerUserId": "6387170"}, "92912": {"Id": "92912", "PostTypeId": "2", "Body": "<p>Not in the specification, no. The main difference is in programmer expectations when they read your code in 2 years. structs are often assumed to be POD. Structs are also used in template metaprogramming when you're defining a type for purposes other than defining objects.</p>\n", "OwnerDisplayName": "MSalters", "LastActivityDate": "2008-09-18T14:15:11.307", "Score": "4", "CreationDate": "2008-09-18T14:15:11.307", "ParentId": "92859", "CommentCount": "0", "OwnerUserId": "15416"}, "93608": {"Id": "93608", "PostTypeId": "2", "Body": "<p>One other thing to note, if you updated a legacy app that had structs to use classes you might run into the following issue:</p>\n<p>Old code has structs, code was cleaned up and these changed to classes. \nA virtual function or two was then added to the new updated class.</p>\n<p>When virtual functions are in classes then internally the compiler will add extra pointer to the class data to point to the functions.</p>\n<p>How this would break old legacy code is if in the old code somewhere the struct was cleared using memfill to clear it all to zeros, this would stomp the extra pointer data as well.</p>\n", "OwnerDisplayName": "KPexEA", "LastActivityDate": "2008-09-18T15:31:53.290", "Score": "4", "CreationDate": "2008-09-18T15:31:53.290", "ParentId": "92859", "CommentCount": "2", "OwnerUserId": "13676"}});