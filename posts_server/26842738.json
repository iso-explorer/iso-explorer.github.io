post_cb({"26842738": {"CommentCount": "2", "ViewCount": "120", "PostTypeId": "1", "LastEditorUserId": "1938163", "CreationDate": "2014-11-10T11:26:40.267", "LastActivityDate": "2014-11-10T11:45:07.767", "Title": "Why is this template inference failing", "AcceptedAnswerId": "26842877", "LastEditDate": "2014-11-10T11:45:07.767", "Id": "26842738", "Score": "2", "Body": "<p>This code won't compile with clang++ 6.0  or g++4.9.1 (Code has no meaning but this is the minimum example that makes it happen):</p>\n<pre><code>#include &lt;forward_list&gt;\n\ntemplate&lt;typename T&gt;\nT getItem(typename std::forward_list&lt;T&gt;::const_iterator it) {\n    return *it;\n}\n\ntemplate&lt;typename T&gt;\nvoid foo() {\n    std::forward_list&lt;T&gt; list;\n    auto item = getItem(list.cbegin());\n}\n\ntemplate&lt;typename T&gt;\nvoid bar(const std::forward_list&lt;T&gt;&amp; list) {\n    auto item = getItem(list.cbegin());\n}\n\nint main() {\n    std::forward_list&lt;int&gt; list;\n    bar(list);\n}\n</code></pre>\n<p>I get this error</p>\n<pre><code>t2.cpp:17:17: error: no matching function for call to 'getItem'\n    auto item = getItem(list.cbegin());\n                ^~~~~~~\nt2.cpp:22:5: note: in instantiation of function template specialization 'bar&lt;int&gt;' requested here\n    bar(list);\n    ^\nt2.cpp:4:3: note: candidate template ignored: couldn't infer template argument 'T'\nT getItem(typename std::forward_list&lt;T&gt;::const_iterator it) {\n  ^\n1 error generated.\n</code></pre>\n<p>To fix it I need to change <code>bar()</code>'s call like this:</p>\n<pre><code>template&lt;typename T&gt;\nvoid bar(const std::forward_list&lt;T&gt;&amp; list) {\n    auto item = getItem&lt;T&gt;(list.cbegin());\n}\n</code></pre>\n<p>I don't understand why the compiler is not able to infer the template argument, and the strange thing is that the compiler is perfectly happy with <code>foo()</code>.</p>\n", "Tags": "<c++><templates><c++11><argument-deduction>", "OwnerUserId": "332698", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26842738_26842877_2": {"section_id": 335, "quality": 1.0, "length": 30}, "so_26842738_26842877_1": {"section_id": 336, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_26842738_26842877_2": {"section_id": 325, "quality": 1.0, "length": 30}, "so_26842738_26842877_1": {"section_id": 326, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_26842738_26842877_1": {"section_id": 345, "quality": 0.8571428571428571, "length": 6}, "so_26842738_26842877_2": {"section_id": 344, "quality": 1.0, "length": 30}}}, "26842877": {"ParentId": "26842738", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You're trying to deduce a template argument from a non-deduced context, <em>\u00a7 [temp.deduct.type]/5</em></p>\n<blockquote>\n<p id=\"so_26842738_26842877_0\">The non-deduced contexts are:</p>\n<p id=\"so_26842738_26842877_1\">\u2014 The nested-name-specifier of a type that was specified using a qualified-id.</p>\n</blockquote>\n<p>i.e. </p>\n<pre><code>template&lt;typename T&gt;\nT getItem(typename std::forward_list&lt;T&gt;::const_iterator it)\n                   ^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n<p>and <em>\u00a7 [temp.deduct.type]/4</em></p>\n<blockquote>\n<p id=\"so_26842738_26842877_2\">In certain contexts, however, the value does not participate in type deduction, but instead uses the values of template arguments that were either deduced elsewhere or explicitly specified. <strong>If a template parameter is used only in non-deduced contexts and is not explicitly specified, template argument deduction fails.</strong></p>\n</blockquote>\n<p>If you try to instantiate <code>foo</code> <a href=\"http://coliru.stacked-crooked.com/a/d276969039a25387\" rel=\"nofollow noreferrer\">it will give the same error</a>. You're not getting errors for <code>foo</code> with the code above since dependent names are only looked up at instantiation (this is commonly referred to as <em>two-phase lookup</em>). Cfr. <a href=\"https://stackoverflow.com/q/25405958/1938163\">Semantic correctness of non-instantiated C++ template functions</a></p>\n", "OwnerUserId": "1938163", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:33:40.597", "Id": "26842877", "Score": "8", "CreationDate": "2014-11-10T11:34:43.513", "LastActivityDate": "2014-11-10T11:42:21.077"}});