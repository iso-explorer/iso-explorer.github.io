post_cb({"bq_ids": {"n4140": {"so_25964198_25964198_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 3295}, "so_25964198_25964337_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3296}, "so_25964198_25964198_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 3296}, "so_25964198_25964337_2": {"length": 21, "quality": 0.9545454545454546, "section_id": 3304}, "so_25964198_25964337_1": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_25964198_25964400_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 3325}, "so_25964198_25964198_1": {"length": 5, "quality": 1.0, "section_id": 3291}, "so_25964198_25964198_0": {"length": 7, "quality": 1.0, "section_id": 3290}}, "n3337": {"so_25964198_25964198_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 3165}, "so_25964198_25964337_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3166}, "so_25964198_25964198_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 3166}, "so_25964198_25964337_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 3174}, "so_25964198_25964337_1": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_25964198_25964400_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 3195}, "so_25964198_25964198_1": {"length": 5, "quality": 1.0, "section_id": 3161}, "so_25964198_25964198_0": {"length": 7, "quality": 1.0, "section_id": 3160}}, "n4659": {"so_25964198_25964198_2": {"length": 13, "quality": 0.5909090909090909, "section_id": 4057}, "so_25964198_25964337_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 4058}, "so_25964198_25964198_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 4058}, "so_25964198_25964337_2": {"length": 16, "quality": 0.7272727272727273, "section_id": 4070}, "so_25964198_25964337_1": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_25964198_25964400_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 4048}, "so_25964198_25964198_1": {"length": 5, "quality": 1.0, "section_id": 4053}, "so_25964198_25964198_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "25964337": {"Id": "25964337", "PostTypeId": "2", "Body": "<p>This is indeed covered by your quote:</p>\n<blockquote>\n<p id=\"so_25964198_25964337_0\">If the initializer is a (non-parenthesized) <em>braced-init-list</em>, the object or reference is list-initialized (8.5.4).</p>\n</blockquote>\n<p>Skipping down to 8.5.4 List-initialization. Here I have paraphrased/omitted some points that don't pertain to the case of <code>T x{}</code>:</p>\n<blockquote>\n<p id=\"so_25964198_25964337_1\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li>If T is an aggregate, aggregate initialization is performed (8.5.1).</li>\n<li>Otherwise, if the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized</li>\n<li>Otherwise, if <code>T</code> is a specialization of <code>std::initializer_list&lt;E&gt;</code>  [...]</li>\n<li>Otherwise, [if the list is not empty and it matches a constructor]</li>\n<li>Otherwise, [if the list has a single element]</li>\n<li>Otherwise, [if <code>T</code> is a reference type]</li>\n<li>Otherwise, if the initializer list has no elements, the object is value-initialized.</li>\n<li>Otherwise, the program is ill-formed.</li>\n</ul>\n</blockquote>\n<p>The first point, <em>aggregate initialization</em> was in C++03 as well; in that case <code>T x{};</code> is the same as <code>T x = {};</code>.</p>\n<p>For the second point \"T is a class type with a default constructor\", it is <em>value-initialized</em> which means calling the default constructor.</p>\n<p>If <code>T</code> is a primitive type then the second-to-last point applies and it is <em>value-initialized</em> again.</p>\n<p>Going back to the <em>aggregate initialization</em> case, in 8.5.1/7 there is:</p>\n<blockquote>\n<p id=\"so_25964198_25964337_2\">If there are fewer initializer-clauses in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from its brace-or-equal-initializer or, if there is no brace-or-equal-initializer, from an empty initializer list (8.5.4). </p>\n</blockquote>\n<p>The <em>brace-or-equal-initializer</em> refers to an initializer provided inline in the class definition. If that isn't present then it is initialized as if the member had been initialized with <code>{}</code> (so, this logic is recursively applied for each aggregate member).</p>\n<p>For example,</p>\n<pre><code>struct T\n{\n     int a;\n};\n</code></pre>\n<p>then <code>T x {};</code> leads to <code>a</code> being initialized as if it were <code>int a{};</code> , which is value-initialization since <code>int</code> is a primitive type.</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2014-09-21T22:16:24.830", "Score": "26", "CreationDate": "2014-09-21T22:02:42.647", "ParentId": "25964198", "CommentCount": "4", "OwnerUserId": "1505939", "LastEditDate": "2014-09-21T22:16:24.830"}, "25964400": {"Id": "25964400", "PostTypeId": "2", "Body": "<p>Although Matt McNabb has already covered this, I will add that if you have trouble navigating through the standard, it doesn't hurt to check out <a href=\"http://en.cppreference.com\">cppreference</a>. Their section on <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\">list initialization</a> breaks it down pretty well.</p>\n<p>Essentially, like your standard quote says, <code>T x{};</code> refers to an:</p>\n<blockquote>\n<p id=\"so_25964198_25964400_0\">initialization of a named variable with a brace-enclosed list of\n  expressions or nested lists (<em>braced-init-list</em>).</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_25964198_25964400_1\">The effects of list initialization of an object of type T are:</p>\n<ul>\n<li>If the braced-init-list is empty and T is a class type with a default constructor, value-initialization is performed.</li>\n</ul>\n<p id=\"so_25964198_25964400_2\">[...]</p>\n<ul>\n<li>Otherwise, if the braced-init-list has no elements, T is value-initialized. </li>\n</ul>\n</blockquote>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-09-21T22:11:04.457", "Score": "8", "CreationDate": "2014-09-21T22:11:04.457", "ParentId": "25964198", "CommentCount": "0"}, "25964198": {"ViewCount": "989", "Body": "<p>I'm reading the C++11 standard, but can't figure out whether</p>\n<pre><code>T x{};\n</code></pre>\n<p>is value-initialized or default initialized (automatic storage). \nIt <em>does</em> say pretty clearly that:</p>\n<blockquote>\n<p id=\"so_25964198_25964198_0\">10 An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p>And that</p>\n<blockquote>\n<p id=\"so_25964198_25964198_1\">11 If no initializer is specified for an object, the object is default-initialized;</p>\n</blockquote>\n<p>But all I can find about <code>T x{};</code> is that:</p>\n<blockquote>\n<p id=\"so_25964198_25964198_2\">The initialization that occurs in the forms T x(a);\n  T x{a};\n  as well as in new expressions (5.3.4), static_cast expressions (5.2.9), functional notation type conversions (5.2.3), and base and member initializers (12.6.2) is called direct-initialization.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_25964198_25964198_3\">If the initializer is a (non-parenthesized) braced-init-list, the object or reference is list-initialized (8.5.4).</p>\n</blockquote>\n<p>I'm new to diving into the level of reading the standards. Can someone point me in the right direction?</p>\n", "AcceptedAnswerId": "25964337", "Title": "T v{} initialization", "CreationDate": "2014-09-21T21:45:59.997", "Id": "25964198", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-09-24T00:24:42.893", "LastEditorUserId": "608639", "LastActivityDate": "2014-09-24T00:24:42.893", "Score": "19", "OwnerUserId": "2556973", "Tags": "<c++><c++11><language-lawyer><uniform-initialization>", "AnswerCount": "2"}});