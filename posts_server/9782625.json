post_cb({"bq_ids": {"n4140": {"so_9782625_9782625_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 4706}, "so_9782625_9782772_0": {"length": 27, "quality": 1.0, "section_id": 190}}, "n3337": {"so_9782625_9782625_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 4515}, "so_9782625_9782772_0": {"length": 27, "quality": 1.0, "section_id": 184}}, "n4659": {"so_9782625_9782625_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 6103}, "so_9782625_9782772_0": {"length": 22, "quality": 0.8148148148148148, "section_id": 195}}}, "9782772": {"Id": "9782772", "PostTypeId": "2", "Body": "<p>This behaviour is due to <code>[temp.dep]/3</code>:</p>\n<blockquote>\n<p id=\"so_9782625_9782772_0\">In the definition of a class or class template, if a base class depends on a template-parameter, the base class scope is not examined during unqualified name lookup either at the point of definition of the class template or member or during an instantiation of the class template or member.</p>\n</blockquote>\n", "LastActivityDate": "2012-03-20T07:23:07.307", "CommentCount": "0", "CreationDate": "2012-03-20T07:23:07.307", "ParentId": "9782625", "Score": "1", "OwnerUserId": "485561"}, "9782728": {"Id": "9782728", "PostTypeId": "2", "Body": "<p>Names not depending on a template argument are looked up in context of the template being defined when it doesn't, yet, know the template arguments. The name <code>my_data</code> doesn't depend on the template argument at all. Names somehow depending on a template argument, e.g. because they must refer to a member of a template class, are looked up in phase 2 when the template arguments are known. The name <code>this-&gt;my_data</code> clearly depends on the template argument and is, thus, looked up in phase 2. These are the basic rules for two phase name-lookup in templates.</p>\n", "LastActivityDate": "2012-03-20T07:18:55.883", "CommentCount": "0", "CreationDate": "2012-03-20T07:18:55.883", "ParentId": "9782625", "Score": "4", "OwnerUserId": "1120273"}, "9782696": {"Id": "9782696", "PostTypeId": "2", "Body": "<p>I found this link which answers your question. <a href=\"http://stupefydeveloper.blogspot.com/2008/10/c-inheritance-from-template-class-and.html\" rel=\"nofollow\">http://stupefydeveloper.blogspot.com/2008/10/c-inheritance-from-template-class-and.html</a></p>\n", "LastActivityDate": "2012-03-20T07:15:54.967", "CommentCount": "0", "CreationDate": "2012-03-20T07:15:54.967", "ParentId": "9782625", "Score": "2", "OwnerUserId": "1280214"}, "9782625": {"ViewCount": "1022", "Body": "<blockquote>\n<p id=\"so_9782625_9782625_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4210108/base-template-class-data-members-are-not-visible-in-derived-template-class\">Base template class data members are not visible in derived template class?</a> </br></p>\n</blockquote>\n<p>I am trying to create a templated class that extends a templated super-class.</p>\n<pre><code>template &lt;class T&gt;\nclass SuperClass {\npublic:\n        T my_data;\n};\n\ntemplate &lt;typename T2&gt;\nclass SubClass : public SuperClass&lt;T2&gt;\n{\npublic:\n        T2 f() { return my_data; }\n};\n\nint main()\n{\n        SubClass&lt;int&gt; x;\n        return 0;\n}\n</code></pre>\n<p>However, I get the following error (using g++ 4.6.1):</p>\n<pre><code>test.cpp:11:18: error: \u2018my_data\u2019 was not declared in this scope\n</code></pre>\n<p>Strangely, it works if I redefine <code>SubClass::f()</code> as follows:</p>\n<pre><code>T2 f() { return this-&gt;my_data; }\n</code></pre>\n<p>Does anyone understand why I need to have a <code>this-&gt;</code>?</p>\n", "AcceptedAnswerId": "9782696", "Title": "Why can't I inhert from a templated superclass in C++?", "CreationDate": "2012-03-20T07:09:00.317", "LastActivityDate": "2012-03-20T07:23:07.307", "CommentCount": "0", "LastEditDate": "2017-05-23T12:04:29.003", "PostTypeId": "1", "Tags": "<c++><templates><inheritance>", "Id": "9782625", "AnswerCount": "3", "Score": "2", "OwnerUserId": "1031921", "ClosedDate": "2012-03-20T12:13:19.363", "LastEditorUserId": "-1"}});