post_cb({"bq_ids": {"n4140": {"so_23479015_23479190_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 87}, "so_23479015_23479190_0": {"length": 32, "quality": 1.0, "section_id": 7137}, "so_23479015_23479220_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_23479015_23479190_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7136}}, "n3337": {"so_23479015_23479190_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 82}, "so_23479015_23479190_1": {"length": 22, "quality": 0.9166666666666666, "section_id": 6880}, "so_23479015_23479220_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_23479015_23479190_0": {"length": 32, "quality": 1.0, "section_id": 6881}}, "n4659": {"so_23479015_23479190_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 8637}, "so_23479015_23479190_0": {"length": 32, "quality": 1.0, "section_id": 8638}}}, "31230016": {"Id": "31230016", "PostTypeId": "2", "Body": "<p>This is a bug, however is it known (and it is just not yet implemented, at least until gcc 4.9).</p>\n<p>Here is the <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52036\" rel=\"nofollow\">bug report</a></p>\n<p>I expect gcc 5.0 to have that implemented, since 5.0 adds many new C++11 features.</p>\n", "LastEditorUserId": "576767", "LastActivityDate": "2015-07-05T14:16:00.260", "Score": "1", "CreationDate": "2015-07-05T11:49:33.967", "ParentId": "23479015", "CommentCount": "0", "LastEditDate": "2015-07-05T14:16:00.260", "OwnerUserId": "5082292"}, "23479015": {"ViewCount": "778", "Body": "<p>In the following,</p>\n<pre><code>int i{3};\nconst int j{3};\nextern const int k{3};\n\ntemplate &lt;typename T, T&amp;&gt;\nvoid f() {}\n\nint main()\n{\n    f&lt;int, i&gt;();        // OK\n    f&lt;int const, j&gt;();  // not valid template argument: 'j' has not external linkage\n    f&lt;int const, k&gt;();  // OK\n}\n</code></pre>\n<p>GCC gives error for the use of <code>j</code> as template parameter, while clang compiles fine.</p>\n<ul>\n<li>what is the linkage of <code>i</code>, <code>j</code>?</li>\n<li>why is there a difference between <code>const</code>/non-<code>const</code>?</li>\n<li>who is correct? GCC or clang?</li>\n</ul>\n", "AcceptedAnswerId": "23479220", "Title": "Non-type (reference) template parameters and linkage", "CreationDate": "2014-05-05T18:13:42.637", "Id": "23479015", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-07-05T14:16:00.260", "Score": "1", "OwnerUserId": "2644390", "Tags": "<c++><templates><c++11><linkage><non-type>", "AnswerCount": "3"}, "23479220": {"Id": "23479220", "PostTypeId": "2", "Body": "<p>As Kerrek points out in the comment, namespace level <code>const</code> variables have internal linkage (unless you use the <code>extern</code> keyword).  In C++03 you cannot use the a pointer or reference of a variable with internal linkage as a non-type template argument.  That restriction was lifted in C++11.  It seems that your version of gcc is playing by the C++03 rules, while the clang compiler is using the C++11 ones.</p>\n<hr>\n<p>14.3.2 [temp.arg.nontype] / 1</p>\n<blockquote>\n<p id=\"so_23479015_23479220_0\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<ul>\n<li>[...]</li>\n<li>a constant expression (5.19) that designates the address of an object with <strong>static storage duration and external or internal linkage</strong>\n  or a function with external or internal linkage, including function\n  templates and function template-ids but excluding non-static class\n  members, expressed (ignoring parentheses) as &amp; id-expression, except\n  that the &amp; may be omitted if the name refers to a function or array\n  and shall be omitted if the corresponding template-parameter is a\n  reference; or</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n</hr>", "LastEditorUserId": "36565", "LastActivityDate": "2014-05-05T22:08:16.927", "Score": "4", "CreationDate": "2014-05-05T18:26:07.123", "ParentId": "23479015", "CommentCount": "4", "LastEditDate": "2014-05-05T22:08:16.927", "OwnerUserId": "36565"}, "23479190": {"Id": "23479190", "PostTypeId": "2", "Body": "<p><code>i</code> has external linkage while <code>j</code> has internal linkage. These rules are listed under <em>\u00a73.5 [basic.link]</em></p>\n<blockquote>\n<p id=\"so_23479015_23479190_0\"><em>4</em> An unnamed namespace or a namespace declared directly or indirectly within an unnamed namespace has internal linkage. <strong>All other namespaces have external linkage. A name having namespace scope that has not been given internal linkage above has the same linkage as the enclosing namespace</strong> if it is the name of <br/>\n  \u2014 a variable; or<br/>\n  \u2014 ...</p>\n</blockquote>\n<p>The global namespace has external linkage, hence <code>i</code> has external linkage as well (since it's not explicitly declared as having internal linkage). </p>\n<blockquote>\n<p id=\"so_23479015_23479190_1\"><em>3</em> A name having namespace scope (3.3.6) has internal linkage if it is the name of <br/>\n  \u2014 ...<br/>\n  \u2014 a non-volatile variable that is <strong>explicitly declared <em>const</em> or <em>constexpr</em> and neither explicitly declared <em>extern</em> nor previously declared to have external linkage</strong>; or<br/>\n  \u2014 ...<br/></p>\n</blockquote>\n<p><code>j</code> is explicitly declared <code>const</code> without being declared <code>extern</code>, hence it has internal linkage.</p>\n<p>I believe clang is correct in this case because of <em>\u00a714.3.2/1 [temp.arg.nontype]</em></p>\n<blockquote>\n<p id=\"so_23479015_23479190_2\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:<br/>\n  \u2014 ...<br/>\n  \u2014 a constant expression (5.19) that designates the address of a complete object with static storage duration and external or internal linkage ...</p>\n</blockquote>\n<p><code>j</code> satisfies the requirement above and should be allowed as a non-type argument.</p>\n", "LastEditorUserId": "241631", "LastActivityDate": "2014-05-05T18:33:38.750", "Score": "3", "CreationDate": "2014-05-05T18:24:35.600", "ParentId": "23479015", "CommentCount": "4", "LastEditDate": "2014-05-05T18:33:38.750", "OwnerUserId": "241631"}});