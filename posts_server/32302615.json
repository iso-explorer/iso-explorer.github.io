post_cb({"32302731": {"LastActivityDate": "2015-08-31T01:11:14.897", "CommentCount": "2", "Body": "<p><code>NULL</code> is not type safe. For historical reason it was defined as 0 without casting, and the compiler silence warning of casting number to pointer on this special zero.</p>\n<p>For instant, you can do:</p>\n<pre><code>void* p = 0;\n</code></pre>\n<p>but not this without implicit casting:</p>\n<pre><code>void* p = 1234;\n</code></pre>\n<p>the side effect is that it can be abused as number values, as other answer mentioned.</p>\n<p><code>nullptr</code> improve this by enforcing it is a pointer, you can't assign this to an integer.\nSince the behaviour is changed, a new name is created for backward compatibility.</p>\n<p>Also note that, <code>nullptr</code> is handled by the compiler, its actual value is not exposed to user (like zero in case of <code>NULL</code>). It's much easier to have architecture dependent value, say <code>0xdeadbeef</code>, without affect programmer's code logic.</p>\n", "CreationDate": "2015-08-31T01:06:03.263", "LastEditDate": "2015-08-31T01:11:14.897", "ParentId": "32302615", "Id": "32302731", "LastEditorUserId": "1094101", "PostTypeId": "2", "Score": "8", "OwnerUserId": "1094101"}, "32302664": {"LastActivityDate": "2015-09-07T08:52:45.287", "CommentCount": "4", "Body": "<p><code>nullptr</code> is of <strong>pointer type</strong> , while <code>NULL</code> has the tendency to be integer, and sometimes in overloaded functions, you need to be clear that you are using a pointer and not an integer - this is when<code>nullptr</code> comes in handy.</p>\n<p>So to really answer your question, <code>NULL</code> and <code>nullptr</code> serve to different purposes and redefining one to another will probably break a lot of things in  the already existent code bases.  </p>\n<p>Beside that, </p>\n<p>check this from <a href=\"http://www.stroustrup.com/bs_faq2.html#null\">Bjarne Stroustrup's website</a> </p>\n<blockquote>\n<p id=\"so_32302615_32302664_0\"><strong>Should I use NULL or 0?</strong></p>\n<p id=\"so_32302615_32302664_1\">In C++, the definition of NULL is 0, so there is only an aesthetic\n  difference. I prefer to avoid macros, so I use 0. Another problem with\n  NULL is that people sometimes mistakenly believe that it is different\n  from 0 and/or not an integer. In pre-standard code, NULL was/is\n  sometimes defined to something unsuitable and therefore had/has to be\n  avoided. That's less common these days. If you have to name the null\n  pointer, call it nullptr; that's what it's called in C++11. Then,\n  \"nullptr\" will be a keyword.</p>\n</blockquote>\n", "CreationDate": "2015-08-31T00:53:02.663", "LastEditDate": "2015-09-07T08:52:45.287", "ParentId": "32302615", "Id": "32302664", "LastEditorUserId": "3871352", "PostTypeId": "2", "Score": "36", "OwnerUserId": "3871352"}, "bq_ids": {"n4140": {"so_32302615_32469629_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 2515}}, "n3337": {"so_32302615_32469629_1": {"length": 13, "quality": 0.65, "section_id": 36}, "so_32302615_32469629_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 6460}}}, "32469629": {"LastActivityDate": "2015-09-09T01:44:52.463", "CommentCount": "0", "Body": "<h3>Why did the standards committee choose not to call the new null pointer constant <code>NULL</code></h3>\n<p>Presumably because the new null pointer is a keyword, and keywords cannot be <code>#defined</code>, so calling it <code>NULL</code> would have made inclusion of any C header likely ill-formed.</p>\n<h3>or declare that <code>NULL</code> should be <code>#defined</code> to <code>nullptr</code>?</h3>\n<p>The standards committee does allow <code>NULL</code> to be <code>#defined</code> to <code>nullptr</code>, but it does not require it.</p>\n<blockquote>\n<p id=\"so_32302615_32469629_0\"><strong>C++11 18.2 Types [support.types]/2</strong>:\n  The macro <code>NULL</code> is an implementation-defined C++ null pointer constant in this International Standard.</p>\n<p id=\"so_32302615_32469629_1\"><strong>C++11 4.10 Pointer conversions [conv.ptr]/1</strong>:\n  A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>Backwards compatibility is not a concern here, any use of <code>NULL</code> that assumes it is a form of the integer <code>0</code> is not standard conformant. Implementations might choose not to do it to condone this kind of evil behavior.</p>\n", "CreationDate": "2015-09-09T01:35:52.330", "LastEditDate": "2015-09-09T01:44:52.463", "ParentId": "32302615", "Id": "32469629", "LastEditorUserId": "927034", "PostTypeId": "2", "Score": "2", "OwnerUserId": "927034"}, "32697407": {"CommentCount": "2", "Body": "<p>I will demonstrate a case where the decision to define nullptr as a different type helps preventing bugs.</p>\n<p>Consider these functions:</p>\n<pre><code>void foo(int);\nvoid foo(char *);\n\nint main()\n{\n    foo(NULL); // oops\n}\n</code></pre>\n<p>In C++98, the code above calls the foo(int) function, because NULL is replaced by 0, which is most likely not what you intended to.</p>\n<p>But if you call <strong>foo(nullptr)</strong> it calls the correct one -- <strong>foo(char*)</strong>.</p>\n", "CreationDate": "2015-09-21T14:10:43.583", "ParentId": "32302615", "Id": "32697407", "LastActivityDate": "2015-09-21T14:10:43.583", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1737624"}, "32302615": {"CreationDate": "2015-08-31T00:46:27.053", "ViewCount": "4258", "FavoriteCount": "4", "Id": "32302615", "AcceptedAnswerId": "32302644", "Score": "62", "Title": "Why not call nullptr NULL?", "LastEditorUserId": "2692339", "CommentCount": "3", "Body": "<p>In C++11 the <code>nullptr</code> keyword was added as a more type safe null pointer constant, since the previous common definition of <code>NULL</code> as 0 has some problems.</p>\n<p>Why did the standards committee choose not to call the new null pointer constant <code>NULL</code>, or declare that <code>NULL</code> should be <code>#define</code>d to <code>nullptr</code>?</p>\n", "Tags": "<c++><c++11><language-design>", "LastEditDate": "2015-08-31T10:48:18.970", "LastActivityDate": "2015-09-21T14:10:43.583", "PostTypeId": "1", "AnswerCount": "7", "OwnerUserId": "106104"}, "32302634": {"CommentCount": "0", "Body": "<p>Without actually sitting in on the discussion in the standards committee, it's hard to say for sure, but I would think because it would break some code that uses <code>NULL</code> in a meaning where <code>nullptr</code> isn't sufficiently compatible. And breaking old code is never a good idea.</p>\n", "CreationDate": "2015-08-31T00:49:15.903", "ParentId": "32302615", "Id": "32302634", "LastActivityDate": "2015-08-31T00:49:15.903", "PostTypeId": "2", "Score": "8", "OwnerUserId": "1919155"}, "32302644": {"LastActivityDate": "2015-09-09T01:50:04.527", "CommentCount": "17", "Body": "<p>Stephan T. Lavavej (member of the C++ standard committee) explained that once in a <a href=\"https://channel9.msdn.com/Events/GoingNative/GoingNative-2012/STL11-Magic-Secrets\">talk</a> (55:35):</p>\n<p>While an implementation is allowed to <code>#define NULL nullptr</code>, it would break quite some uses like</p>\n<pre><code>int i = NULL;\n</code></pre>\n<p>and apparently there are plenty of those. So they could not force the change.</p>\n", "CreationDate": "2015-08-31T00:50:36.580", "LastEditDate": "2015-09-09T01:50:04.527", "ParentId": "32302615", "Id": "32302644", "LastEditorUserId": "3002139", "PostTypeId": "2", "Score": "64", "OwnerUserId": "3002139"}, "32434918": {"CommentCount": "2", "Body": "<p>The<code>nullptr</code> is introduced for type safety and for clarity (probably to stop the initialization of non-pointer types using <code>NULL</code>). </p>\n<p>The <code>NULL</code>(int type) is not changed to <code>nullptr</code>(pointer type) to avoid confusion and to ensure backward compatibility.  </p>\n<p>Thus, the standard committee train of thought is probably related to smooth transition from the old to new notation without causing ambiguities or braking any already existing code.</p>\n", "CreationDate": "2015-09-07T09:07:39.440", "ParentId": "32302615", "Id": "32434918", "LastActivityDate": "2015-09-07T09:07:39.440", "PostTypeId": "2", "Score": "1", "OwnerUserId": "3313438"}});