post_cb({"bq_ids": {"n4140": {"so_32576388_32576468_2": {"length": 9, "quality": 1.0, "section_id": 3303}, "so_32576388_32576468_1": {"length": 7, "quality": 0.875, "section_id": 775}, "so_32576388_32576468_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 775}, "so_32576388_32576468_3": {"length": 14, "quality": 0.875, "section_id": 777}}, "n3337": {"so_32576388_32576468_2": {"length": 9, "quality": 1.0, "section_id": 3173}, "so_32576388_32576468_1": {"length": 7, "quality": 0.875, "section_id": 762}, "so_32576388_32576468_3": {"length": 14, "quality": 0.875, "section_id": 764}, "so_32576388_32576468_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 762}}, "n4659": {"so_32576388_32576468_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 4069}}}, "32576468": {"Id": "32576468", "PostTypeId": "2", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"nofollow noreferrer\">std::array</a> is an aggregate and so it uses <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow noreferrer\">aggregate initialization</a>. Providing excess elements during aggregate initialization is ill-formed and requires a diagnostic. The compiler at minimum has to provide a warning, both gcc and clang make this an error. So if you make your class an aggregate then you can have it work the same way std::array does. Note, <a href=\"https://stackoverflow.com/q/27118535/1708801\">in class member initializers makes your class a non-aggregate</a> in C++11 but not in C++14.</p>\n<p>We can see it is an aggregate by going to the draft C++11 standard section <code>23.3.2.1</code> <em>[array.overview]</em>:</p>\n<blockquote>\n<p id=\"so_32576388_32576468_0\">An array is an aggregate (8.5.1) that can be initialized with the\n  syntax</p>\n<pre><code>array&lt;T, N&gt; a = { initializer-list };\n</code></pre>\n<p id=\"so_32576388_32576468_1\">where initializer-list is a comma-separated list of up to N elements\n  whose types are convertible to T.</p>\n</blockquote>\n<p>and section <code>8.5.1</code> <em>[dcl.init.aggr]</em> covers aggregate intialization and says:</p>\n<blockquote>\n<p id=\"so_32576388_32576468_2\">An initializer-list is ill-formed if the number of initializer-clauses\n  exceeds the number of members or elements to initialize.</p>\n</blockquote>\n<p>The draft standard provides for exposition a possible implementation which shortened to the bare minimum looks like this:</p>\n<pre><code>template &lt;class T, size_t N&gt;\nstruct array {\n    T elems[N];\n};\n</code></pre>\n<p>and the draft standard has a note which says:</p>\n<blockquote>\n<p id=\"so_32576388_32576468_3\">The member variable elems is shown for exposition only, to emphasize that array is a class aggregate.\n  The name elems is not part of array\u2019s interface</p>\n</blockquote>\n<p>which is an aggregate and will with both gcc and clang provide an error if excess elements are provided.</p>\n<p>Also see <a href=\"https://stackoverflow.com/q/4178175/1708801\">What are Aggregates and PODs and how/why are they special?</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-09-24T15:26:50.793", "Score": "2", "CreationDate": "2015-09-15T01:53:42.430", "ParentId": "32576388", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:22:25.873"}, "32576388": {"ViewCount": "96", "Body": "<p>I'm trying to write a container class for vector arithmetic. The objects are static in size:</p>\n<pre><code>template&lt;typename T, unsigned N&gt;\nclass vec{\n    T data[N] = {0};\npublic:\n    vec(std::initializer_list&lt;T&gt; ini){\n        std::copy(ini.begin(), ini.end(), data);\n    }\n}\n</code></pre>\n<p>This is how far I got.</p>\n<p>But than I tested the std::array class for comparison and I noticed that it somehow could make a static assertion if the initializer list was to long or to short.</p>\n<pre><code>std::array&lt;float, 2&gt; a = {1, 2, 3, 4} &lt;- instant error message from the visual studio ide\n</code></pre>\n<p>In my class I would have to check the length of the initializer list at run-time.</p>\n<p>I assume, that the std::array class somehow manages it to directly initialize the data with the initializer list notation without the std::initializer_list class.</p>\n<p>Is it possible to initialize my class in the same way as std::array?</p>\n", "AcceptedAnswerId": "32576468", "Title": "How to initialize a class like std::array", "CreationDate": "2015-09-15T01:43:12.410", "Id": "32576388", "CommentCount": "1", "LastEditDate": "2015-09-15T02:44:06.610", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-09-24T15:26:50.793", "Score": "1", "OwnerUserId": "4398147", "Tags": "<arrays><c++11><stl><initialization><stdarray>", "AnswerCount": "1"}});