post_cb({"8696698": {"CommentCount": "8", "AcceptedAnswerId": "8696712", "PostTypeId": "1", "ClosedDate": "2012-01-02T05:36:52.120", "LastEditorUserId": "-1", "LastEditorDisplayName": "user216441", "CreationDate": "2012-01-02T01:14:10.267", "LastActivityDate": "2012-01-23T02:26:36.863", "AnswerCount": "12", "LastEditDate": "2017-05-23T10:33:50.040", "ViewCount": "22714", "FavoriteCount": "0", "Title": "In the main function of a C++ program, what does `return 0` do and mean?", "Id": "8696698", "Score": "17", "Body": "<blockquote>\n<p id=\"so_8696698_8696698_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main\">What is the proper declaration of main?</a> </br></p>\n</blockquote>\n<p>Without citing any code in particular, I am looking for an explanation of the below example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; \"Hello world\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>I don't understand what <code>return 0</code> does. Can you please explain this in as plain English as possible?</p>\n", "Tags": "<c++>", "OwnerDisplayName": "user1125551"}, "8696739": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>In simple applications like yours the returned value means nothing.  If there is an observing process (like if one program launches another) it can be an easy way to get communicate a status or error code.</p>\n<p>For a simple application which does not have an status or error codes, most people <code>return 0</code> for a normal application exit (usually success) and <code>return 1</code> if the app. fails to properly execute.</p>\n", "OwnerUserId": "1086521", "PostTypeId": "2", "Id": "8696739", "Score": "0", "CreationDate": "2012-01-02T01:22:47.180", "LastActivityDate": "2012-01-02T01:22:47.180"}, "8696722": {"ParentId": "8696698", "PostTypeId": "2", "CommentCount": "16", "Body": "<h3>General <code>return</code>ing</h3>\n<p>Every function has a <em>return type</em>.</p>\n<p>In the below example, the type is <code>void</code>, which is an \"incomplete type\" with no values; using this as the return type means that the function returns no value:</p>\n<pre><code>void foo() {\n   std::cout &lt;&lt; \"Hello world\\n\";\n}\n</code></pre>\n<p>However, in the below example, the return type is <code>int</code>:</p>\n<pre><code>int foo() {\n   return 3;\n}\n</code></pre>\n<p>The <code>return</code> statement determines what value calls to function <code>foo</code> will evaluate to. So, <code>std::cout &lt;&lt; foo()</code> will result in \"<code>3</code>\" being printed to standard output.</p>\n<hr>\n<h3><code>return</code>ing from <code>main</code>, specifically</h3>\n<p>When the function in question happens to be the \"main\" function, or the program's entrypoint, it's a bit more special, because the \"return value\" of the \"main\" function is taken to be the program's \"exit code\" \u2014 it tells the calling environment (e.g. terminal session) whether the program's execution was deemed to be successful. It must be an <code>int</code>, and a value of <code>0</code> here means \"everything went fine\":</p>\n<p>It's worth noting that you can actually completely omit <code>return 0;</code> <em>in the \"main\" function</em> as it will be included implicitly. This doesn't help you much, though, if you want to <code>return 1;</code> or some other value, and it doesn't come into play with other functions.</p>\n<hr>\n<h3>Citations</h3>\n<blockquote>\n<p id=\"so_8696698_8696722_0\"><code>[C++11: 3.6.1/5]:</code> <strong>A return statement in <code>main</code> has the effect of\n  leaving the main function</strong> (destroying any objects with automatic\n  storage duration) <strong>and calling <code>std::exit</code> with the return value as the\n  argument.</strong> If control reaches the end of <code>main</code> without encountering a\n  return statement, the effect is that of executing <code>return 0;</code></p>\n</blockquote>\n<p></p>\n<blockquote>\n<p id=\"so_8696698_8696722_1\"><code>[C++11: 18.5/8]:</code></p>\n<pre><code>       [[noreturn]] void exit(int status)\n</code></pre>\n<p id=\"so_8696698_8696722_2\"><strong>The function <code>exit()</code> has additional behavior</strong> in this International Standard:</p>\n<ul>\n<li>First, objects with thread storage duration and associated with the current thread are destroyed.<br/>\n  Next, objects with static storage duration are destroyed and functions registered by calling <code>atexit</code> are called. See 3.6.3 for the order of destructions and calls. (Automatic objects are not destroyed as a result of calling exit().)<br/>\n  If control leaves a registered function called by exit because the function does not provide a handler for a thrown exception, <code>terminate()</code> shall be called (15.5.1).</li>\n<li>Next, all open C streams (as mediated by the function signatures declared in <code>&lt;cstdio&gt;</code>) with unwritten buffered data are flushed, all open C streams are closed, and all files created by calling <code>tmpfile()</code> are removed.</li>\n<li><strong>Finally, control is returned to the host environment. If status is zero or <code>EXIT_SUCCESS</code>, an implementation-defined form of the status successful termination is returned. If status is <code>EXIT_FAILURE</code>, an implementation-defined form of the status unsuccessful termination is returned. Otherwise the status returned is implementation-defined.</strong></li>\n</ul>\n</blockquote>\n<hr>\n\nBootnote\n\n<p><sub>I suggest one of <a href=\"http://jcatki.no-ip.org/fncpp/Resources\" rel=\"nofollow\">these resources</a>, as this sort of thing is explained properly in any decent peer-reviewed C++ book; YouTube tutorials are not a good way to learn C++, and Stack Overflow contributors will generally expect you to have a decent book to form your prior research before resorting to asking for help.</sub></p>\n</hr></hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2012-01-02T15:10:40.007", "Id": "8696722", "Score": "8", "CreationDate": "2012-01-02T01:19:16.500", "LastActivityDate": "2012-01-02T15:10:40.007"}, "bq_ids": {"n4140": {"so_8696698_8697009_0": {"section_id": 6805, "quality": 0.8076923076923077, "length": 21}, "so_8696698_8696722_2": {"section_id": 6805, "quality": 0.7142857142857143, "length": 5}, "so_8696698_8696722_0": {"section_id": 7149, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_8696698_8697009_0": {"section_id": 6560, "quality": 0.8076923076923077, "length": 21}, "so_8696698_8696722_2": {"section_id": 6560, "quality": 0.7142857142857143, "length": 5}, "so_8696698_8696722_0": {"section_id": 6893, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_8696698_8697009_0": {"section_id": 8296, "quality": 0.8076923076923077, "length": 21}, "so_8696698_8696722_0": {"section_id": 8650, "quality": 0.7586206896551724, "length": 22}}}, "8696723": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>Depends on operating system, but an exit code of 0 means success on UNIX, VMS and Windows</p>\n", "OwnerUserId": "579078", "PostTypeId": "2", "Id": "8696723", "Score": "0", "CreationDate": "2012-01-02T01:19:18.987", "LastActivityDate": "2012-01-02T01:19:18.987"}, "8696716": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>It's used because you may use your program as a command line tool. If there is another process waiting for the output of your program you may choose to return 0 if everything is successful, -1 if there was an error or any other constant, according to what you want to communicate.</p>\n", "OwnerUserId": "465157", "PostTypeId": "2", "Id": "8696716", "Score": "1", "CreationDate": "2012-01-02T01:18:18.600", "LastActivityDate": "2012-01-02T01:18:18.600"}, "8696721": {"ParentId": "8696698", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>0</code> is an integer.</p>\n<p>Your main function has to return an integer.</p>\n<p>Just look at:</p>\n<pre><code>int main()\n</code></pre>\n<p><code>int</code> stands for integer and <code>return</code> in this case, returns <code>0</code>: an integer to terminate the program.</p>\n<p>Usually for an error you have to return <code>1</code>; <code>0</code> is the conventional value for success.</p>\n", "OwnerUserId": "1056635", "LastEditorUserId": "560648", "LastEditDate": "2012-01-02T01:24:15.870", "Id": "8696721", "Score": "0", "CreationDate": "2012-01-02T01:19:16.400", "LastActivityDate": "2012-01-02T01:24:15.870"}, "8697412": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>On a modern operating system, every program will exit with a specific \"exit code\".</p>\n<p>DISCLAIMER NO 1.: The actual specification of that concept (of having an exit code at all) is out of the scope of any programming language specification at all. So: ANYONE asking me again about a reference to a standard may please retreat into itself, and think about a better answer for the moment.</p>\n<p>DISPLAIMER NO 2.: The actual values of those exit codes are not specified in not actual \"programming language specification\", because that is out of the scope of a \"programming language specification\".</p>\n<p>So long, practice has shown, that an exit code of \"0\" means \"success\", and any other code signals an error...</p>\n", "OwnerUserId": "206247", "PostTypeId": "2", "Id": "8697412", "Score": "0", "CreationDate": "2012-01-02T04:31:21.393", "LastActivityDate": "2012-01-02T04:31:21.393"}, "8696717": {"ParentId": "8696698", "CommentCount": "1", "Body": "<p>Think of your boss telling you to go pick up the mail. After you pick up the mail, you tell your boss that everything went okay.</p>\n<p>The operating system is the boss, the program is you. And all <code>return 0</code> does is tells the operating system that everything went okay.</p>\n", "OwnerUserId": "243613", "PostTypeId": "2", "Id": "8696717", "Score": "1", "CreationDate": "2012-01-02T01:18:25.810", "LastActivityDate": "2012-01-02T01:18:25.810"}, "8696741": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>Under windows you can test for return value as follows (in batch script):</p>\n<pre><code>MyAppTest.exe\n@if \"%ERRORLEVEL%\" == \"0\" goto success\n echo Failure\n goto end\n:success\n echo Success\n:end\n</code></pre>\n", "OwnerUserId": "471160", "PostTypeId": "2", "Id": "8696741", "Score": "1", "CreationDate": "2012-01-02T01:23:12.013", "LastActivityDate": "2012-01-02T01:23:12.013"}, "8696714": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>return is used to escape the function. Returning the value 0 simply allows it to exit with a code: 0. Also, returning with 0 claims a successful exit of the application.</p>\n", "OwnerUserId": "675940", "PostTypeId": "2", "Id": "8696714", "Score": "0", "CreationDate": "2012-01-02T01:18:06.740", "LastActivityDate": "2012-01-02T01:18:06.740"}, "8696725": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>The return value from the main function is returned to the calling application or process (a lot of times this is a shell script).  The return value is used to signal the exit status of the application.</p>\n<p>There are no hardened rules at to what the return value should be but, by convention a return value of zero signifies normal application exit.  Any non-zero value signifies abnormal application exit.</p>\n", "OwnerUserId": "633150", "PostTypeId": "2", "Id": "8696725", "Score": "0", "CreationDate": "2012-01-02T01:19:58.657", "LastActivityDate": "2012-01-02T01:19:58.657"}, "8696712": {"ParentId": "8696698", "PostTypeId": "2", "CommentCount": "25", "Body": "<p>This defines the <a href=\"http://en.wikipedia.org/wiki/Exit_status\" rel=\"nofollow noreferrer\">exit status</a> of the process. Despite being an <code>int</code>, on Unix-like systems, the value is always in the range 0-255 (see <a href=\"http://www.faqs.org/docs/abs/HTML/exit-status.html\" rel=\"nofollow noreferrer\">Exit and Exit Status</a>). On Microsoft systems you may use <a href=\"https://stackoverflow.com/questions/179565/exitcodes-bigger-than-255-possible\">32-bit signed integers as exit codes</a>, which you can check with <code>%ERRORLEVEL%</code>. For portability, I'd recommend sticking to the 0-255 range.</p>\n<p>Here is a trivial example:</p>\n<pre><code>$ cat -n exit_code.cpp \n     1  int main()\n     2  {\n     3      return 42;\n     4  }\n     5  \n</code></pre>\n<p>Build:    </p>\n<pre><code>$ make exit_code\ng++ exit_code.cpp -o exit_code\n</code></pre>\n<p>Run (in bash):</p>\n<pre><code>$ ./exit_code\n</code></pre>\n<p>Check the exit status:</p>\n<pre><code>$ echo $?\n42\n</code></pre>\n<p><em>Conventionally</em>, a status of zero signifies success and non-zero failure. This can be useful in shell scripts, and so forth to indicate the level of failure, if any:</p>\n<pre><code>$ ./exit_code\nexit_status=$?\nif [[ ${exit_status} ]] ; then\n    echo \"The process failed with status ${exit_status}.\"\nelse\n    echo \"Success!\"\nfi\nThe process failed with status 42.\n</code></pre>\n<hr>\n<p>Following the comments below...</p>\n<p>In the standard <strong>C++</strong> <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-html-USERS-4.3/a01826.html\" rel=\"nofollow noreferrer\">header <code>&lt;cstdlib&gt;</code></a>, the following macros are defined:</p>\n<pre><code>#define EXIT_SUCCESS 0\n#define EXIT_FAILURE 1\n</code></pre>\n<p>However, the <a href=\"http://www.gnu.org/software/libc/manual/html_node/Exit-Status.html#Exit-Status\" rel=\"nofollow noreferrer\">Exit Status</a> section of the <a href=\"http://www.gnu.org/software/libc/manual/html_node/\" rel=\"nofollow noreferrer\">GNU <strong>C</strong> Library documentation</a>, describing the same macros, sagely states:</p>\n<blockquote>\n<p id=\"so_8696698_8696712_0\">Portability note: Some non-POSIX systems <strong>use different conventions for exit status values</strong>. For greater portability, you can use the macros EXIT_SUCCESS and EXIT_FAILURE for the conventional status value for success and failure, respectively. They are declared in the file stdlib.h.</p>\n</blockquote>\n</hr>", "OwnerUserId": "78845", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:52.357", "Id": "8696712", "Score": "35", "CreationDate": "2012-01-02T01:17:43.903", "LastActivityDate": "2012-01-02T02:46:26.933"}, "8697009": {"ParentId": "8696698", "CommentCount": "0", "Body": "<p>Returning from <code>main()</code> has the same effect as calling <code>std::exit()</code> and passing the return value as the <code>status</code> parameter.</p>\n<p>The behavior of <code>std::exit</code> is detailed in section 18.5 (<code>[support.start.term]</code>), and describes the status code:</p>\n<blockquote>\n<p id=\"so_8696698_8697009_0\">Finally,  control is returned to the host environment.   If  status is zero or <code>EXIT_SUCCESS</code>, an implementation-defined form of the status successful termination is returned. If status is <code>EXIT_FAILURE</code>, an implementation-defined  form of the status unsuccessful termination is returned.  Otherwise the status returned is implementation-defined.</p>\n</blockquote>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "8697009", "Score": "1", "CreationDate": "2012-01-02T02:43:36.627", "LastActivityDate": "2012-01-02T02:43:36.627"}});