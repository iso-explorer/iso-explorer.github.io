post_cb({"46613188": {"ParentId": "46613077", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If <code>a</code> is an array <code>int a[N]</code>, then it is undefined behavior to use a subscript that would be out of bounds, i.e. smaller than <code>0</code> or bigger than <code>N-1</code> (e.g. <code>a[-1]</code>).  </p>\n<p>If however, <code>a</code> would be a function argument declared as array, or if a would be a pointer, a negative subscript could be legal, provided that it addresses an element in the bounds of an array.  In this case <code>a[-1]</code> would be perfectly valid and is equivalent to <code>*(a-1)</code>;</p>\n<p>For example:      </p>\n<pre><code>int arr[100];\nint *a = arr+50;  \ncout&lt;&lt;a[-1]&lt;&lt;endl;\n</code></pre>\n<p>or:</p>\n<pre><code>void f(int a[8]) {\n    cout&lt;&lt;a[-1]&lt;&lt;endl;\n}\n...\nf(&amp;arr[50]); \n</code></pre>\n<p>This is guaranteed by the standard: </p>\n<blockquote>\n<p id=\"so_46613077_46613188_0\"><strong>5.2.1/1:</strong> A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have\n  the type \u201carray of T\u201d or \u201cpointer to T\u201d and the other shall have\n  unscoped enumeration or integral type. The result is of type \u201cT.\u201d\n  (...) The expression <code>E1[E2]</code> is identical (by definition) to\n  <code>*((E1)+(E2))</code></p>\n</blockquote>\n", "OwnerUserId": "3723423", "LastEditorUserId": "3723423", "LastEditDate": "2017-10-06T20:59:20.553", "Id": "46613188", "Score": "1", "CreationDate": "2017-10-06T20:03:29.010", "LastActivityDate": "2017-10-06T20:59:20.553"}, "46613161": {"ParentId": "46613077", "PostTypeId": "2", "CommentCount": "15", "Body": "<blockquote id=\"so_46613077_46613161_0\">\n<h1>In array, a[-1] shows consistency in behaviour?</h1>\n</blockquote>\n<p>Supposed <code>a</code> is a raw array of any type, dereferencing like</p>\n<pre><code>a[-1] = 0;\n</code></pre>\n<p>is out of the array bounds and exposes undefined behavior.</p>\n<p><em>Undefined behavior</em> includes giving <strong>inconsistent</strong> or <strong>consistent</strong> results (most probably because the implementation accesses arbitrary memory contents).</p>\n", "OwnerUserId": "8242698", "LastEditorUserId": "8242698", "LastEditDate": "2017-10-06T20:04:13.903", "Id": "46613161", "Score": "4", "CreationDate": "2017-10-06T20:01:44.523", "LastActivityDate": "2017-10-06T20:04:13.903"}, "46613077": {"CommentCount": "11", "ViewCount": "64", "PostTypeId": "1", "ClosedDate": "2017-10-06T20:07:11.763", "LastEditorUserId": "8242698", "CreationDate": "2017-10-06T19:55:40.183", "LastActivityDate": "2017-10-06T20:59:20.553", "Title": "In array, a[-1] shows consistency in behaviour?", "LastEditDate": "2017-10-06T20:10:27.380", "Id": "46613077", "Score": "-2", "Body": "<pre><code>int a[2];\n\na[-1] = -1;\ncout &lt;&lt; \"Step 3 : a[-1] = \" &lt;&lt; a[-1] &lt;&lt; endl;\n    int mex = 0;\ncout &lt;&lt; \"Step 4 : a[-1] = \" &lt;&lt; a[-1] &lt;&lt; endl;\n</code></pre>\n<p>So I have an integer array <code>a</code> of size 2. When I access a[-1] its supposed to give me some random value each time I run the program. But in my program, it always assumes its value as 0. Here I change its value to -1. But in the output screen, it prints a[-1] as -1 in Step 3 and 0 in Step 4. When I try to do the same thing for a[100] this doesn't happen. Can you please explain what is happening here? </p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "7262741", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46613077_46613188_0": {"section_id": 5986, "quality": 0.9, "length": 27}}, "n3337": {"so_46613077_46613188_0": {"section_id": 5754, "quality": 0.8666666666666667, "length": 26}}, "n4659": {"so_46613077_46613188_0": {"section_id": 7486, "quality": 0.8333333333333334, "length": 25}}}});