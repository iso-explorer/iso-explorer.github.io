post_cb({"23756459": {"CommentCount": "2", "ViewCount": "447", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-05-20T09:51:36.227", "LastActivityDate": "2014-10-14T14:29:54.633", "Title": "Warning for calling static methods via instance object in C++", "FavoriteCount": "0", "LastEditDate": "2017-05-23T12:19:20.653", "Id": "23756459", "Score": "8", "Body": "<p>I know calling static method via instance object is <a href=\"https://stackoverflow.com/questions/2207320/can-i-forbid-calling-static-methods-on-object-instance\">explicitly allowed</a>. </p>\n<p>But if I want to avoid it manually, how can I to be warned when the calling happens? I mean, is there some compiler options (or some special attributes) to check the situation?</p>\n<p>I am using Clang, but any other compiler specific features are also welcome.</p>\n", "Tags": "<c++><clang>", "OwnerUserId": "246776", "AnswerCount": "2"}, "26363388": {"ParentId": "23756459", "CommentCount": "0", "Body": "<p>Using <a href=\"http://www.cppdepend.com\" rel=\"nofollow noreferrer\">CppDepend</a> and CQlinq you can detect where all static methods are invoked, and after check manually</p>\n<p>for example you can execute the following query:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/mxaHA.png\"/></p>\n", "OwnerUserId": "1000190", "PostTypeId": "2", "Id": "26363388", "Score": "1", "CreationDate": "2014-10-14T14:29:54.633", "LastActivityDate": "2014-10-14T14:29:54.633"}, "23771621": {"ParentId": "23756459", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The answer is simply no. As per the other Q &amp; A, the standard requires and permits this behaviour. See n3797 s9.4/2:</p>\n<blockquote>\n<p id=\"so_23756459_23771621_0\">A static member s of class X may be referred to using the qualified-id expression X::s; it is not necessary to use the class member access syntax (5.2.5) to refer to a static member. <strong>A static member may be referred to using the class member access syntax, in which case the object expression is evaluated.</strong></p>\n</blockquote>\n<p>Given that blunt language, how would any compiler do what you ask?</p>\n<p>Perhaps you should be looking for a version of lint instead. I found <a href=\"http://stellar.cleanscape.net/products/cpp/checks.html\" rel=\"nofollow\">http://stellar.cleanscape.net/products/cpp/checks.html</a> and error 1705 that might be what you want, and I'm sure there are others.</p>\n<hr>\n<p>So the question is why lint, instead of the compiler. There are shades of grey here, but I think compiler warnings are generally reserved for things that are are or could be or might actually be wrong. They might be undefined behaviour, or implementation defined, or places where the compiler does something different than might have been expected. Calling a static method via a pointer is not in that category. It is absolutely a requirement of the standard, and generates exactly the code you would expect.</p>\n<p>Compilers are not for enforcing coding standards, there are other tools for that. In the C/C++ Unix world it is historically lint that gives you the capability to detect and complain about violations of coding standards, not the compiler. In the .Net world it has been FxCop, although now Visual Studio does most of the same things. When you want your code to satisfy specific standards you look for a tool that does static code analysis, such as this list <a href=\"http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis\" rel=\"nofollow\">here</a>.</p>\n<p>If this doesn't answer your question, perhaps you might like to ask another one. As far as this goes, I'm confident that a compiler does the right thing by implementing the standard and not issuing a warning.</p>\n</hr>", "OwnerUserId": "1105562", "LastEditorUserId": "1105562", "LastEditDate": "2014-05-21T11:01:38.113", "Id": "23771621", "Score": "5", "CreationDate": "2014-05-20T23:31:05.270", "LastActivityDate": "2014-05-21T11:01:38.113"}, "bq_ids": {"n4140": {"so_23756459_23771621_0": {"section_id": 5900, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_23756459_23771621_0": {"section_id": 5672, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_23756459_23771621_0": {"section_id": 7382, "quality": 0.967741935483871, "length": 30}}}});