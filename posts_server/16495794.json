post_cb({"16495812": {"ParentId": "16495794", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><strong>First problem:</strong></p>\n<p>You are not returning anything from <code>createSkipList()</code>, which means your program has undefined behavior. Add a <code>return</code> statement:</p>\n<pre><code>skiplist* createSkipList(){\n    skiplist* l = new skiplist;\n    // ...\n    return l;\n//  ^^^^^^^^^\n}\n</code></pre>\n<p>Per paragraph 6.6.3/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16495794_16495812_0\">[...] Flowing off the end of a function is equivalent to a return with no value; this results in undefined\n  behavior in a value-returning function.</p>\n</blockquote>\n<p><strong>Second problem:</strong></p>\n<blockquote>\n<p id=\"so_16495794_16495812_1\">As mentioned in a similar post I should't experience dangling pointers because I am using the new operator to allocate the structures [...]</p>\n</blockquote>\n<p>Unfortunately, you do experience dangling pointers. As mentioned by Angew <a href=\"https://stackoverflow.com/questions/16495794/returning-a-pointer-to-a-structure-and-accessing-its-fields-c#comment23676665_16495812\">in the comments</a>, what you are doing here:</p>\n<pre><code>node* headNext[MAX_LEVEL]; //array of pointers\nlistHead-&gt;next = headNext; \n</code></pre>\n<p>Is to create a <em>local</em> array object and let <code>listHead-&gt;next</code> point to its first element, without considering that the array (as well as the objects it contains) will be destroyed once <code>createSkipList()</code> returns - objects with automatic storage duration get destroyed when they fall out of scope.</p>\n<p>Moreover, as a general advice, consider using smart pointers for modeling ownership rather than doing manual memory management through raw pointers, <code>new</code>, and <code>delete</code>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:10.053", "Id": "16495812", "Score": "5", "CreationDate": "2013-05-11T09:47:01.180", "LastActivityDate": "2013-05-11T09:54:36.873"}, "bq_ids": {"n4140": {"so_16495794_16495812_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_16495794_16495812_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_16495794_16495812_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}, "16495794": {"CommentCount": "2", "ViewCount": "154", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-05-11T09:45:12.570", "LastActivityDate": "2013-05-11T11:17:38.310", "Title": "Returning a pointer to a structure and accessing its fields C++", "AcceptedAnswerId": "16495812", "LastEditDate": "2017-05-23T11:49:16.643", "Id": "16495794", "Score": "3", "Body": "<p>I am implementing a skiplist for my self and I'm experiencing some problems with C++.\nI have two structures: </p>\n<ol>\n<li><p>A node of the skiplist - it holds its int value, and a pointer to an array of pointers to other nodes.</p>\n<pre><code>struct node{\n    int val;\n    node** next;\n};\n</code></pre></li>\n<li><p>Skiplist which holds pointers to the head and tail of the list (sentinels).</p>\n<pre><code>struct skiplist{\n    node *head, *tail;\n};\n</code></pre></li>\n</ol>\n<p>Also, I have a function which returns a pointer to the skiplist structure (I use this function to initialize the skiplist):</p>\n<pre><code>skiplist* createSkipList(){\n    skiplist* l = new skiplist;\n    node* listHead = new node;\n    node* listTail = new node;\n\n    node* headNext[MAX_LEVEL]; //array of pointers\n    listHead-&gt;next = headNext;\n\n    for(int i=0; i&lt;MAX_LEVEL; i++){\n        listHead-&gt;next[i] = listTail;\n    }\n\n    l-&gt;head=listHead;\n    l-&gt;tail=listTail;\n}\n</code></pre>\n<p>And in the main() function I call: </p>\n<pre><code>skiplist* skiplist=createSkipList();\n</code></pre>\n<p>Everything works fine in the <code>createSkipList()</code> function, but if I want to refer to the skiplist in the main() i.e. by accessing <code>skiplist-&gt;tail</code> the program crashes. \nI've been searching for related posts, but they didn't help me. </p>\n<p>As mentioned <a href=\"https://stackoverflow.com/questions/12632455/c-function-return-pointer-to-struct-goes-weird\">in a similar post</a> I should't experience dangling pointers because I am using the <code>new</code> operator to allocate the structures.\nI would be grateful for any hints ;)</p>\n", "Tags": "<c++>", "OwnerUserId": "2372492", "AnswerCount": "1"}});