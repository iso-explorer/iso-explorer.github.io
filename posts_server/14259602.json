post_cb({"bq_ids": {"n4140": {"so_14259602_14259765_3": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_14259602_14259765_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_14259602_14259765_1": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_14259602_14259765_0": {"section_id": 434, "quality": 0.9411764705882353, "length": 16}, "so_14259602_14259760_0": {"section_id": 3290, "quality": 1.0, "length": 7}}, "n3337": {"so_14259602_14259765_3": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_14259602_14259765_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_14259602_14259765_1": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_14259602_14259765_0": {"section_id": 426, "quality": 0.9411764705882353, "length": 16}, "so_14259602_14259760_0": {"section_id": 3160, "quality": 1.0, "length": 7}}, "n4659": {"so_14259602_14259765_3": {"section_id": 653, "quality": 0.8, "length": 4}, "so_14259602_14259760_0": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_14259602_14259765_0": {"section_id": 452, "quality": 0.9411764705882353, "length": 16}, "so_14259602_14259765_1": {"section_id": 4052, "quality": 1.0, "length": 7}}}, "14259773": {"ParentId": "14259602", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_14259602_14259773_0\">In the below example, will ptr be initialized to 0, toggle to false, and Bar default-constructed?</p>\n</blockquote>\n<p>Yes. If a member initialiser appears in the initialiser list with empty parentheses, then that member is <em>value initialised</em>. This means that numerical types will be initialised to zero, pointers to null, and classes with default constructors using that constructor.</p>\n<p>If you don't include the member in the initialiser list at all, then it will instead be <em>default initialised</em>; in that case. numerical and pointer types will be left uninitialised.</p>\n<blockquote>\n<p id=\"so_14259602_14259773_1\">Could I also be pointed to the section of the C++ standard that states the behavior in the case of initializer list items not being given arguments?</p>\n</blockquote>\n<p>C++11 12.6.2/7 specifies that the rules are the same as for direct initialisation.</p>\n<p>C++11 8.5/16 specifies that if the initialiser is <code>()</code>, the object is value-initialised.</p>\n<p>C++11 8.5/7 defines value initialisation.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "14259773", "Score": "6", "CreationDate": "2013-01-10T14:07:57.323", "LastActivityDate": "2013-01-10T14:07:57.323"}, "14259602": {"CommentCount": "1", "AcceptedAnswerId": "14259765", "CreationDate": "2013-01-10T13:57:55.480", "LastActivityDate": "2013-01-10T14:07:57.323", "PostTypeId": "1", "ViewCount": "3673", "FavoriteCount": "7", "Title": "Default values in C++ initializer lists", "Id": "14259602", "Score": "14", "Body": "<p>I only just learned yesterday that specifying parameters to initializer list items is optional. However, what are the rules for what happens in this case?</p>\n<p>In the below example, will ptr be initialized to 0, toggle to false, and Bar default-constructed? I guess this question is sort of redundant, because there would be little point in initializer lists if unspecified argument values == undefined behavior.</p>\n<p>Could I also be pointed to the section of the C++ standard that states the behavior in the case of initializer list items not being given arguments?</p>\n<pre><code>class Bar\n{\n    Bar() { }\n};\n\nclass SomeClass;\nclass AnotherClass\n{\npublic:\n    SomeClass *ptr;\n    bool toggle;\n    Bar bar;\n\n    AnotherClass() : ptr(), toggle(), bar() { }\n    // as opposed to...\n    // AnotherClass() : ptr(NULL), toggle(false), bar(Bar()) { }\n};\n</code></pre>\n", "Tags": "<c++><standards><initializer-list>", "OwnerUserId": "343845", "AnswerCount": "3"}, "14259765": {"ParentId": "14259602", "CommentCount": "1", "Body": "<p>Yes, the members will be initialized to zero and a default-constructed object respectively.</p>\n<p>The C++ 11 standard specifies this behavior in 12.6.2/7:</p>\n<blockquote>\n<p id=\"so_14259602_14259765_0\">The expression-list or braced-init-list in a mem-initializer is used\n  to initialize the designated subobject (or, in the case of a\n  delegating constructor, the complete class object) according to the\n  initialization rules of 8.5 for direct-initialization.</p>\n</blockquote>\n<p>In turn, 8.5/10 reads:</p>\n<blockquote>\n<p id=\"so_14259602_14259765_1\">An object whose initializer is an empty set of parentheses, i.e., (),\n  shall be value-initialized.</p>\n</blockquote>\n<p>Paragraph 8.5/7 defines <em>value-initialized</em>:</p>\n<blockquote>\n<p id=\"so_14259602_14259765_2\">To value-initialize an object of type T means:</p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor\n  (12.1), then the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default\n  constructor);</li>\n<li>if T is a (possibly cv-qualified) non-union class type\n  without a user-provided constructor, then the object is\n  zero-initialized and, if T\u2019s implicitly-declared default constructor\n  is non-trivial, that constructor is called.</li>\n<li>if T is an array type,\n  then each element is value-initialized;</li>\n<li>otherwise, the object is\n  zero-initialized.</li>\n</ul>\n</blockquote>\n<p>And finally, 8.5/5 defines <em>zero-initialized</em>:</p>\n<blockquote>\n<p id=\"so_14259602_14259765_3\">To zero-initialize an object or reference of type T means:</p>\n<ul>\n<li>if T is a\n  scalar type (3.9), the object is set to the value 0 (zero), taken as\n  an integral constant expression, converted to T;</li>\n<li>if T is a\n  (possibly cv-qualified) non-union class type, each non-static data\n  member and each base-class subobject is zero-initialized and padding\n  is initialized to zero bits;</li>\n<li>if T is a (possibly cv-qualified) union\n  type, the object\u2019s first non-static named data member is zero-\n  initialized and padding is initialized to zero bits;</li>\n<li>if T is an\n  array type, each element is zero-initialized;</li>\n<li>if T is a reference\n  type, no initialization is performed.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "50079", "PostTypeId": "2", "Id": "14259765", "Score": "12", "CreationDate": "2013-01-10T14:07:26.363", "LastActivityDate": "2013-01-10T14:07:26.363"}, "14259760": {"ParentId": "14259602", "CommentCount": "0", "Body": "<p>Initialisations are covered in [dcl.init] (aka 8.5)</p>\n<p>Point 10 says:</p>\n<blockquote>\n<p id=\"so_14259602_14259760_0\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p><em>Value-initialisation</em> is, put simply, default construction for classes and zero-initialisation for non-class types.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "14259760", "Score": "2", "CreationDate": "2013-01-10T14:07:06.920", "LastActivityDate": "2013-01-10T14:07:06.920"}});