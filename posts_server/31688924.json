post_cb({"bq_ids": {"n4140": {"so_31688924_31689283_0": {"section_id": 2087, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_31688924_31689283_0": {"section_id": 2075, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_31688924_31689283_0": {"section_id": 2360, "quality": 0.9523809523809523, "length": 20}}}, "31688924": {"CommentCount": "2", "ViewCount": "76", "CreationDate": "2015-07-28T23:40:12.127", "LastActivityDate": "2015-07-29T01:53:04.330", "Title": "Get Stream Size Without Changing Stream Position", "PostTypeId": "1", "Id": "31688924", "Score": "2", "Body": "<p>The way of getting the size of a stream that I'm familiar with involves doing:</p>\n<pre><code>foo.seekg(0, ios::end);\nint bar = tellg();\nfoo.seekg(0, ios::beg);\n</code></pre>\n<p>But I'd rather not move the stream's position! It obviously already actually knows the start and endpoints of it's buffer, so why can't I just directly access that information?</p>\n<p>Somewhere in the recesses of my memory I think there is a way to get this from the stream's <code>ios</code> or <code>ios_base</code>. But I just can't remember. Can someone else recall how to do this?</p>\n", "Tags": "<c++><stream><size><buffer><string-length>", "OwnerUserId": "2642059", "AnswerCount": "2"}, "31689283": {"ParentId": "31688924", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>What you're probably referring to is <code>foo.rdbuf()-&gt;in_avail()</code>, but you have made the incorrect assumption that a stream always holds its entire contents in the buffer, which isn't going to be the case for things like file streams. </p>\n<p>GCC for instance uses a buffer of length <code>BUFSIZ</code> which will be at least 256 bytes (it's 1024 on my system), so any file larger than that cannot be held entirely in a <code>basic_filebuf</code>'s buffer.</p>\n<p>There's no portable way to get the true size of a stream, for instance a stream opened in text mode on windows won't give you the actual number of bytes in the stream because of EOL conversion. Streams are designed to be read from until you hit the end, depending on what you're trying to do with the stream there may be a better way.</p>\n<p>Source-wise any introductory C++ book will tell you as much, but here's the relevant wording in the standard</p>\n<p>[streambuf.reqts]</p>\n<blockquote>\n<p id=\"so_31688924_31689283_0\">Each sequence is characterized by three pointers which, if non-null, all point into the same <code>charT</code> array object. The array object represents, at any moment, <strong>a (sub)sequence of characters from the sequence</strong>.</p>\n</blockquote>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2015-07-29T01:53:04.330", "Id": "31689283", "Score": "3", "CreationDate": "2015-07-29T00:22:06.750", "LastActivityDate": "2015-07-29T01:53:04.330"}, "31689289": {"ParentId": "31688924", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Took the time to review my memory and it came back to me:</p>\n<pre><code>bar = foo.rdbuf()-&gt;in_avail();\n</code></pre>\n<p>You can see a live example here: <a href=\"http://coliru.stacked-crooked.com/a/66b6182627aebbe6\" rel=\"nofollow noreferrer\">http://coliru.stacked-crooked.com/a/66b6182627aebbe6</a></p>\n<hr>\n<p>Contrary to <a href=\"https://stackoverflow.com/questions/31688924/get-stream-size-without-changing-stream-position?noredirect=1#comment51319859_31688924\">this comment</a> this <em>will</em> work for any C++ stream because they <a href=\"http://www.cplusplus.com/reference/ios/\" rel=\"nofollow noreferrer\">all inherit from <code>ios</code></a> which provides <a href=\"http://www.cplusplus.com/reference/ios/ios/rdbuf/\" rel=\"nofollow noreferrer\"><code>rdbuf</code></a>.</p>\n<p><a href=\"https://i.stack.imgur.com/YmzSU.gif\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/YmzSU.gif\"/></a></p>\n</hr>", "OwnerUserId": "2642059", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:14:37.370", "Id": "31689289", "Score": "-2", "CreationDate": "2015-07-29T00:23:06.050", "LastActivityDate": "2015-07-29T00:23:06.050"}});