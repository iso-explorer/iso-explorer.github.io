post_cb({"13139088": {"Id": "13139088", "PostTypeId": "2", "Body": "<p>One reason is that the <code>max_size</code> function isn't very useful at all, and the committee doesn't think it is worth the trouble to try to fix it. So it is just left the way it is, because it is part of the documented interface.</p>\n<p>See library defect report #197:</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3440.html#197\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3440.html#197</a></p>\n<blockquote>\n<p id=\"so_13137766_13139088_0\">max_size() isn't useful for very many things, and the existing wording is sufficiently clear for the few cases that max_size() can be used for. None of the attempts to change the existing wording were an improvement.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-30T12:34:23.423", "CommentCount": "2", "CreationDate": "2012-10-30T12:34:23.423", "ParentId": "13137766", "Score": "21", "OwnerUserId": "597607"}, "bq_ids": {"n4140": {"so_13137766_13138095_0": {"length": 4, "quality": 1.0, "section_id": 1602}, "so_13137766_13138095_1": {"length": 6, "quality": 0.75, "section_id": 4245}}, "n3337": {"so_13137766_13138095_0": {"length": 4, "quality": 1.0, "section_id": 1598}, "so_13137766_13138095_1": {"length": 6, "quality": 0.75, "section_id": 4086}}, "n4659": {"so_13137766_13138095_0": {"length": 4, "quality": 1.0, "section_id": 1754}, "so_13137766_13138095_1": {"length": 5, "quality": 0.625, "section_id": 6403}}}, "13137766": {"ViewCount": "2416", "Body": "<p><code>std::string</code> provides a <code>max_size()</code> method to determine the maximum number of elements it can contain.</p>\n<p>However, to work out the maximum length of a string in general, the programmer has to create a (possibly empty) string object.</p>\n<p>If this class doesn't need any information from the programmer, why isn't <code>max_size()</code> available as a compile-time constant ? Is there some kind of runtime information necessary for a string to work out its maximum size ?</p>\n", "AcceptedAnswerId": "13139088", "Title": "Why isn't std::string::max_size a compile-time constant?", "CreationDate": "2012-10-30T11:11:59.443", "Id": "13137766", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-10-31T21:10:59.843", "Score": "31", "OwnerUserId": "361535", "Tags": "<c++><string><compile-time-constant>", "AnswerCount": "4"}, "13138095": {"Id": "13138095", "PostTypeId": "2", "Body": "<p><code>std::string::max_size()</code> calls <code>std::allocator::max_size()</code> under the hood.</p>\n<p>According to the standard, 20.9.6.1.10:</p>\n<blockquote>\n<p id=\"so_13137766_13138095_0\"><code>size_type max_size() const noexcept;</code> </p>\n<p id=\"so_13137766_13138095_1\">Returns: The largest value N for which the call allocate(N,0) might succeed.</p>\n</blockquote>\n<p>(See also: <a href=\"http://en.cppreference.com/w/cpp/memory/allocator/max_size\">allocator::max_size</a>)</p>\n<p>Theoretically, an allocator implementation could be able to work out the maximum size of a chunk of memory it could allocate via a syscall. This would help determine the largest possible size for a string, inside a specific process.</p>\n", "LastEditorUserId": "361535", "LastActivityDate": "2012-10-30T11:44:24.293", "Score": "18", "CreationDate": "2012-10-30T11:31:53.717", "ParentId": "13137766", "CommentCount": "2", "LastEditDate": "2012-10-30T11:44:24.293", "OwnerUserId": "361535"}, "13137963": {"Id": "13137963", "PostTypeId": "2", "Body": "<p>The call to <code>max_size()</code> is delegated to the allocator used for the container.</p>\n<p>In theory, a very smart allocator could compute its <code>max_size</code> in runtime, e.g. depending on RAM available.</p>\n", "LastActivityDate": "2012-10-30T11:23:50.997", "CommentCount": "2", "CreationDate": "2012-10-30T11:23:50.997", "ParentId": "13137766", "Score": "5", "OwnerUserId": "1345960"}, "13148317": {"Id": "13148317", "PostTypeId": "2", "Body": "<p>This should also work:</p>\n<pre><code>enum : std::string::size_type {\n    npos     = std::string::size_type(-1),\n    max_size = npos - 1\n};\n</code></pre>\n", "LastEditorUserId": "75889", "LastActivityDate": "2012-10-31T21:10:59.843", "Score": "0", "CreationDate": "2012-10-30T22:12:16.960", "ParentId": "13137766", "CommentCount": "3", "LastEditDate": "2012-10-31T21:10:59.843", "OwnerUserId": "75889"}});