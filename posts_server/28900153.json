post_cb({"bq_ids": {"n4140": {"so_28900153_28905103_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 4706}}, "n4659": {"so_28900153_28905103_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 6103}}}, "28900153": {"ViewCount": "230", "FavoriteCount": "2", "Title": "Create a NDArray in an oct file from a double pointer", "CreationDate": "2015-03-06T13:47:45.180", "LastActivityDate": "2015-03-10T23:03:05.073", "CommentCount": "1", "Body": "<p>Consider the problem of creating an 3-dimensional array <code>NDArray</code> in a C++ Octave function.</p>\n<p>I've got a double pointer <code>double* ptr</code> and the dimensions <code>int dim[3]</code> from an Armadillo <code>cube</code>. I've found a promising <a href=\"http://octave.sourceforge.net/doxygen/html/d3/dd5/classNDArray.html#ad1732a88ea296b1807aff756ec7be84b\" rel=\"nofollow\"><code>NDArray</code> constructor</a> in Octave docs:</p>\n<pre><code>NDArray::NDArray    (   \n    double *    sdata,\n    octave_idx_type     slen,\n    octave_idx_type *   adims,\n    void *      arep \n)   \n</code></pre>\n<p>I can not find any description of what the arguments are, but Ive made this guess: <code>sdata</code> seems to be the raw-data pointer, <code>slen</code> and <code>adims</code> seem to be the lenght and the dim vector respectively. But, what <code>arep</code> is suppose to be?</p>\n", "PostTypeId": "1", "Id": "28900153", "Score": "3", "OwnerUserId": "1848028", "Tags": "<c++><c><pointers><octave><armadillo>", "AnswerCount": "1"}, "28905103": {"Id": "28905103", "PostTypeId": "2", "LastEditDate": "2015-03-10T23:03:05.073", "CommentCount": "5", "LastEditorUserId": "1609556", "LastActivityDate": "2015-03-10T23:03:05.073", "CreationDate": "2015-03-06T18:18:27.557", "ParentId": "28900153", "Score": "0", "Body": "<p><a href=\"http://fossies.org/dox/octave-3.8.2/dNDArray_8h_source.html\" rel=\"nofollow\">The source</a> of dNDArray.h says</p>\n<pre><code>// For jit support only\n</code></pre>\n<p>so it does not seem sure to use.</p>\n<p>From <a href=\"http://www.gnu.org/software/octave/doc/interpreter/Matrices-and-Arrays-in-Oct_002dFiles.html#Matrices-and-Arrays-in-Oct_002dFiles\" rel=\"nofollow\">the octave documentation</a>, </p>\n<blockquote>\n<p id=\"so_28900153_28905103_0\">Define the dimensions of the matrix or array with a <code>dim_vector</code> which\n  has the same characteristics as the vector returned from size. For\n  example:</p>\n<pre><code>dim_vector dv (2); dv(0) = 2; dv(1) = 3;  // 2 rows, 3 columns Matrix\na (dv);\n</code></pre>\n<p id=\"so_28900153_28905103_1\">This can be used on all matrix and <strong>array types</strong>.</p>\n</blockquote>\n<p>But this constructor is deprecated. instead, use</p>\n<pre><code>NDArray a (dim_vector(dim[0], dim[1], dim[2]));\n</code></pre>\n<p>Then loop over (i, j, k) indices to copy the cube to the octave array</p>\n<pre><code>double* a_vec = a.fortran_vec ();\nfor (int i = 0; i &lt; dim[0]; i++) {\n    for (int j = 0; j &lt; dim[1]; j++) {\n        for (int k = 0; k &lt; dim[2]; k++) {\n            *a_vec++ = armadillo_cube(i, j, k);\n        }\n    }\n}\n</code></pre>\n", "OwnerUserId": "3565696"}});