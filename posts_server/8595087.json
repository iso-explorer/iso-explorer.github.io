post_cb({"8859542": {"ParentId": "8595087", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Thanks for the comments and answers posted thus far.  I haven't seen quite what I'm looking for so I'm going to add some information from <a href=\"https://stackoverflow.com/a/8597527/484307\">an answer provided by aschepler</a> to my follow-up question.</p>\n<blockquote>\n<p id=\"so_8595087_8859542_0\">15.3p7: A handler is considered active when initialization is complete for the formal parameter (if any) of the catch clause. ... A handler\n  is no longer considered active when the catch clause exits or when\n  std::unexpected() exits after being entered due to a throw.</p>\n<p id=\"so_8595087_8859542_1\">15.3p8: The exception with the most recently activated handler that is still active is called the currently handled exception.</p>\n</blockquote>\n<p>I think the language of the standard is quite clear here and that <code>main</code> is in fact the <em>last</em> handler.  Therefore the lifetime of an exception is not affected by nested handlers.</p>\n", "OwnerUserId": "484307", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:21:13.617", "Id": "8859542", "Score": "0", "CreationDate": "2012-01-14T01:59:41.233", "LastActivityDate": "2012-01-15T01:42:55.107"}, "8642406": {"ParentId": "8595087", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><em>Am I correct in viewing the handler in main as the \"last handler?\"</em></p>\n<p>Yes, you are.</p>\n<p><em>And therefore any number of rethrow's and catches are allowed in HandleException without causing the destruction of the current exception object?</em></p>\n<p>Yes. Exception object that is unhandled finally will be destroyed by the compiler generated code. No memory leaks will be caused.</p>\n<p>It's not good to re-throw in <code>HandleException()</code>. Instead\n1. write catches to any exception type that requests specific processing;\n2. you can group your exception handling using <code>dynamic_cast</code>. Catch the base exception type and try to downcast it to any of its' derived exception classes. BUT <code>dynamic_cast</code> is not good practice. So it's better to use the 1st solution.</p>\n<p>It's better to rewrite your code in the following way:</p>\n<pre><code>struct ExceptionBase : virtual std::exception{};\nstruct SomeSpecificError : virtual ExceptionBase{};\nstruct SomeOtherError : virtual ExceptionBase{};\n\nvoid MightThrow();\nvoid HandleExceptionBase();\n\nint main()\n{\n  try\n  {\n    MightThrow();\n  }\n  catch (SomeOtherError &amp;error) {\n    // first common code\n    HandleExceptionBase();\n    // react on this exception correctly\n    // specific code\n  }\n  catch (SomeSpecificError &amp;error) {\n    // first common code\n    HandleExceptionBase();\n    // react on this exception correctly\n    // specific code\n  }\n  catch (ExceptionBase &amp;error) {\n    HandleExceptionBase();\n    // finally catch anything derived from base class\n    // react on this exception correctly\n  }\n  catch(...) {\n    // react on any other exception except 3 listed above\n  }\n}\n\nvoid MightThrow()\n{\n  throw SomeSpecificError();\n}\n\nvoid HandleExceptionBase() {\n  // base exception handler\n}\n</code></pre>\n", "OwnerUserId": "823048", "LastEditorUserId": "823048", "LastEditDate": "2011-12-28T05:32:06.113", "Id": "8642406", "Score": "0", "CreationDate": "2011-12-27T08:05:57.997", "LastActivityDate": "2011-12-28T05:32:06.113"}, "8595087": {"CommentCount": "2", "ViewCount": "158", "CreationDate": "2011-12-21T19:17:06.853", "LastActivityDate": "2012-01-15T01:42:55.107", "Title": "Is the lifetime of an exception affected by nested handlers?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "8595087", "Score": "3", "Body": "<p>Consider the following code snippet:</p>\n<pre><code>struct ExceptionBase : virtual std::exception{};\nstruct SomeSpecificError : virtual ExceptionBase{};\nstruct SomeOtherError : virtual ExceptionBase{};\n\nvoid MightThrow();\nvoid HandleException();\nvoid ReportError();\n\nint main()\n{\n  try\n  {\n    MightThrow();\n  }\n  catch( ... )\n  {\n    HandleException();\n  }\n}\n\nvoid MightThrow()\n{\n  throw SomeSpecificError();\n}\n\nvoid HandleException()\n{\n  try\n  {\n    throw;\n  }\n  catch( ExceptionBase const &amp; )\n  {\n    // common error processing\n  }\n\n  try\n  {\n    throw;\n  }\n  catch( SomeSpecificError const &amp; )\n  {\n    // specific error processing\n  }\n  catch( SomeOtherError const &amp; )\n  {\n    // other error processing\n  }\n\n  ReportError();\n}\n\nvoid ReportError()\n{\n}\n</code></pre>\n<p>Section 15.1.4 from the standard tells us:</p>\n<blockquote>\n<p id=\"so_8595087_8595087_0\">The memory for the temporary copy of the exception being thrown is\n  allocated in an unspecified way, except as noted in 3.7.3.1. The\n  temporary persists as long as there is a handler being executed for\n  that exception. In particular, if a handler exits by executing a\n  throw; statement, that passes control to another handler for the same\n  exception, so the temporary remains. <strong>When the last handler being\n  executed for the exception exits by any means other than throw; the\n  temporary object is destroyed</strong> and the implementation may deallocate\n  the memory for the temporary object; any such deallocation is done in\n  an unspecified way. The destruction occurs immediately after the\n  destruction of the object declared in the exception-declaration in the\n  handler.</p>\n</blockquote>\n<p>Am I correct in viewing the handler in <code>main</code> as the \"last handler?\"  And therefore any number of rethrow's and catches are allowed in <code>HandleException</code> without causing the destruction of the current exception object?</p>\n", "Tags": "<c++><exception><exception-handling>", "OwnerUserId": "484307", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8595087_8859542_1": {"section_id": 3353, "quality": 0.7692307692307693, "length": 10}, "so_8595087_8859542_0": {"section_id": 3352, "quality": 0.92, "length": 23}}, "n3337": {"so_8595087_8859542_1": {"section_id": 3223, "quality": 0.7692307692307693, "length": 10}, "so_8595087_8859542_0": {"section_id": 3222, "quality": 0.96, "length": 24}}, "n4659": {"so_8595087_8859542_1": {"section_id": 4120, "quality": 0.7692307692307693, "length": 10}, "so_8595087_8859542_0": {"section_id": 4119, "quality": 0.6, "length": 15}}}});