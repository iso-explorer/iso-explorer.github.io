post_cb({"bq_ids": {"n4140": {"so_21952386_21952738_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 3227}}, "n3337": {"so_21952386_21952738_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 3100}}, "n4659": {"so_21952386_21952738_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 3984}}}, "21952386": {"ViewCount": "1903", "Body": "<p>In C++ I can chose between function pointers and function references (or even function values for the sake of completeness):</p>\n<pre><code>void call_function_pointer (void (*function)()) {\n    (*function) ();\n}\nvoid call_function_reference (void (&amp;function)()) {\n    function ();\n}\nvoid call_function_value (void function()) {\n    function ();\n}\n</code></pre>\n<p>When it comes to methods however, I don't seem to have this choice between pointers and references.</p>\n<pre><code>template &lt;class T&gt; void call_method_pointer (T* object, void (T::*method)()) {\n    (object-&gt;*method) ();\n}\n// the following code creates a compile error\ntemplate &lt;class T&gt; void call_method_reference (T&amp; object, void (T::&amp;method)()) {\n    object.method ();\n}\n</code></pre>\n<p>This leads me to the assumption that method references do not exist in C++. Is that true? If it is, what is the reason they do not exist?  </p>\n", "AcceptedAnswerId": "21952738", "Title": "Why doesn't reference-to-member exist in C++?", "CreationDate": "2014-02-22T09:28:25.920", "Id": "21952386", "CommentCount": "8", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2014-02-22T18:09:08.597", "LastEditorUserId": "616460", "LastActivityDate": "2014-02-22T20:14:56.970", "Score": "30", "OwnerUserId": "799849", "Tags": "<c++><pointers><reference><pointer-to-member>", "AnswerCount": "1"}, "21952738": {"Id": "21952738", "PostTypeId": "2", "Body": "<p>In the standard (e.g. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"noreferrer\">N3337</a> - not the latest but fine for this) there is a note at the end of section 8.3.3.3 that reads:</p>\n<blockquote>\n<p id=\"so_21952386_21952738_0\">[ Note: See also 5.3 and 5.5. The type \u201cpointer to member\u201d is distinct\n  from the type \u201cpointer\u201d, that is, a pointer to member is declared only\n  by the pointer to member declarator syntax, and never by the pointer\n  declarator syntax. There is no \u201creference-to-member\u201d type in C++. \u2014\n  end note ]</p>\n</blockquote>\n<p>Also, of course, there are no \"reference to member\" type operators (which, hypothetically, the best I can come up with would be something like <code>-&gt;&amp;</code> and <code>.&amp;</code>, although these are not consistent with dereferencing of data and function references, which require no special operator).</p>\n<p><strong>Why?</strong> </p>\n<p>As for why; after a fun little historical investigation and failing to find any existing notes on it (I went all the way back to <a href=\"http://www.softwarepreservation.org/projects/c_plus_plus/cfront/release_2.0/doc/ProductReferenceManual.pdf\" rel=\"noreferrer\">Cfront 2.0</a> where <strike><a href=\"http://en.cppreference.com/w/cpp/language/history\" rel=\"noreferrer\">pointer-to-member was first supported</a></strike> -- <em>edit: according to <a href=\"http://www.stroustrup.com/hopl2.pdf\" rel=\"noreferrer\">a far more credible document</a>, the feature was actually first supported in Cfront 1.2</em>), I asked the man himself and here is the reply:</p>\n<pre>\nDate: Sat, 22 Feb 2014 10:12:51 -0500\nFrom: Bjarne Stroustrup &lt;...&gt;\nSubject: Re: On lack of reference-to-member and CFront 2.0\n\nOn 2/22/2014 6:40 AM, Jason C wrote:\n&gt; My question is: C++ very clearly disallows the concept of \n&gt; \"reference-to-member\". Why is this? I have been doing a lot of \n&gt; research, and I traced the origin of \"pointer-to-member\" back (I \n&gt; think) to 1989 CFront 2.0. I read through the product reference manual \n&gt; and other documentation hoping to find an explanation of some sort but \n&gt; could not.\n\nI don't really remember. It was 25+ years ago and the ARM is silent on \nthis. I added pointers to members to eliminate the need for a rare \nbreakage of the type system. I suspect that I didn't add references to \nmembers because it did not seem worth the effort: there was no use case.\n</pre>\n<p>To be honest, I was expecting something far more arcane and complicated.</p>\n<p>So there you have it: The next time somebody asks why there's no reference-to-member, you can confidently say, \"Because there isn't!\" <em>(Note: See my ramblings in the comments; there is still some historical investigation to be done to get to 100% confidence.)</em></p>\n<p>Personally, I've never once found a use for pointers-to-members in my own code, but a distinct rationale for their existence is given in Stroustrup's <em><a href=\"https://www.usenix.org/legacy/publications/compsystems/1989/sum_stroustrup.pdf\" rel=\"noreferrer\">The Evolution of C++: 1985-1989</a></em>, pp. 222-223.</p>\n<hr>\n<p>By the way, your syntax for calling the hypothetical reference-to-member function:</p>\n<pre><code>object.method();\n</code></pre>\n<p>... does not make much sense, as there is no way to distinguish that syntactically from a call to an actual member named <code>method()</code>.</p>\n<p>hvd brings up a good point below: As you can see from the above, syntactically, there wouldn't really be a consistent way to dereference a reference-to-member. You have to distinguish it from normal member access, but at the same time you want to make it consistent with dereferencing of object and function references (which require no special operator), and I can't really think of anything that accomplishes both.</p>\n</hr>", "LastEditorUserId": "616460", "LastActivityDate": "2014-02-22T20:14:56.970", "Score": "35", "CreationDate": "2014-02-22T10:05:03.437", "ParentId": "21952386", "CommentCount": "11", "LastEditDate": "2014-02-22T20:14:56.970", "OwnerUserId": "616460"}});