post_cb({"30277934": {"ParentId": "30277891", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Well. It is simple why it's not possible. You have a clear ambiguousity. <code>redirect_function</code> is not a function; as all template functions it's more like a set of overloads generated from the template for different types of arguments.</p>\n<p>The function needs to get instantiated first to be able to get its address, and you provide no necessary information to do this.</p>\n<p>In other words the problem is that you cannot possibly know which concrete overload of <code>redirect_function</code> you should use on the problematic line.</p>\n<p>The only thing you could do is to provide template arguments explicitly.</p>\n", "OwnerUserId": "1133179", "LastEditorUserId": "1133179", "LastEditDate": "2015-05-16T16:21:03.013", "Id": "30277934", "Score": "0", "CreationDate": "2015-05-16T16:14:23.887", "LastActivityDate": "2015-05-16T16:21:03.013"}, "30277891": {"CommentCount": "1", "ViewCount": "27", "CreationDate": "2015-05-16T16:09:52.353", "LastActivityDate": "2015-05-16T16:21:03.013", "Title": "Get address of a function which has variadic templates in C++11", "AcceptedAnswerId": "30277934", "PostTypeId": "1", "Id": "30277891", "Score": "0", "Body": "<p>When saving the address of a function with a variadic template, the g++ compiler (Version 4.8.2) outputs this error:</p>\n<blockquote>\n<p id=\"so_30277891_30277891_0\">address of overloaded function with no contextual type information</p>\n</blockquote>\n<p>The code in question:</p>\n<pre><code>template&lt;typename... Args&gt;\nvoid redirect_function(const char *format, Args... args)\n{\n    pLog-&gt;Write(format, args...); // or: printf(format, args...);\n}\n\nvoid *fnPtr = (void *)&amp;redirect_function; // The error occurs here.\n</code></pre>\n<p>Here is what I do with this somewhere else:</p>\n<pre><code>typedef void (*log_bridge)(const char*, ...);\nlog_bridge LogWrite;\nLogWrite = (log_bridge)fnPtr;\n</code></pre>\n<p>I have no other possibility to this so please don't suggest completely different ways of solving this.</p>\n", "Tags": "<c++11><g++>", "OwnerUserId": "1792839", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30277891_30277891_0": {"section_id": 311, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_30277891_30277891_0": {"section_id": 302, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_30277891_30277891_0": {"section_id": 319, "quality": 0.6666666666666666, "length": 4}}}});