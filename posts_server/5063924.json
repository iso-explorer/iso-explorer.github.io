post_cb({"5063957": {"ParentId": "5063924", "CommentCount": "0", "Body": "<p>It's perfectly acceptable to call <code>operator new</code> and <code>operator delete</code> directly; they are a part of the global namespace and act like a C++-ier version of <code>malloc</code> and <code>free</code> that interact with <code>set_new_handler</code> and the <code>bad_alloc</code> exceptions a bit nicer.  The C++ ISO standard even contains a few examples of this.  For example, \u00a713.5/4 has this example:</p>\n<blockquote>\n<p id=\"so_5063924_5063957_0\">Operator functions are usually not called directly; instead they are invoked to evaluate the operators they implement (13.5.1 - 13.5.7). They can be explicitly called, however, using the <em>operator-function-id</em> as the name of the function in the function call syntax (5.2.2). [Example:</p>\n<p id=\"so_5063924_5063957_1\">complex z = a.operator+(b); // complex z = a+b;</p>\n<p id=\"so_5063924_5063957_2\">void* p = operator new(sizeof(int)*n);</p>\n<p id=\"so_5063924_5063957_3\">\u2014end example]</p>\n</blockquote>\n", "OwnerUserId": "501557", "PostTypeId": "2", "Id": "5063957", "Score": "4", "CreationDate": "2011-02-21T08:58:17.730", "LastActivityDate": "2011-02-21T08:58:17.730"}, "5063924": {"CommentCount": "2", "ViewCount": "270", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-02-21T08:53:21.847", "LastActivityDate": "2011-02-21T09:09:49.143", "Title": "Is C++ code allowed to call `::operator new()` directly?", "AcceptedAnswerId": "5063957", "LastEditDate": "2017-05-23T11:47:45.467", "Id": "5063924", "Score": "1", "Body": "<p>According to C++ Standard paragraph 3.7.3/1 objects should be dynamically created with <em>new</em> expression and the C++ runtime should provide an allocation function <code>::operator new()</code>.</p>\n<p>Once in a while it is necessary to <a href=\"https://stackoverflow.com/q/4145595/57428\">call <code>::operator new()</code> directly</a>.</p>\n<p>Does the C++ Standard allow such calls to <code>::operator new()</code> function or is this (and related) function for internal use only?</p>\n", "Tags": "<c++><memory><memory-management>", "OwnerUserId": "57428", "AnswerCount": "2"}, "5064077": {"ParentId": "5063924", "CommentCount": "0", "Body": "<p>Yes, it is allowed to call the global operator new function directly \u2013 though it's not as often required as you might believe.  You must match allocation and deallocation functions, but if you have full control over both, then you can always use new[] and delete[] with char.  However, that would be a new-expression and delete-expression, so you are only \"required\" to use the global functions themselves if you need a function pointer.  (You would have to wrap the new-expression to get a function pointer, otherwise.)</p>\n<p>If you replace these global functions so that new and new[] use different heaps, for example, then you might also want to explicitly use ::operator new, but this is rare.</p>\n", "OwnerUserId": "624206", "PostTypeId": "2", "Id": "5064077", "Score": "2", "CreationDate": "2011-02-21T09:09:49.143", "LastActivityDate": "2011-02-21T09:09:49.143"}, "bq_ids": {"n4140": {"so_5063924_5063957_0": {"section_id": 651, "quality": 0.8571428571428571, "length": 24}}, "n3337": {"so_5063924_5063957_0": {"section_id": 641, "quality": 0.8571428571428571, "length": 24}}, "n4659": {"so_5063924_5063957_0": {"section_id": 679, "quality": 0.8571428571428571, "length": 24}}}});