post_cb({"38972604": {"Id": "38972604", "PostTypeId": "2", "Body": "<p>There is no requirement that <code>data()</code> returns dereferencable pointer for empty (<code>size() == 0</code>) vector, even if it has nonzero capacity. It might return <code>nullptr</code> or some arbitrary value (only requirement in this case is that it should be able to be compared with itself and 0 could be added to it without invoking UB).</p>\n", "LastActivityDate": "2016-08-16T10:33:19.183", "CommentCount": "0", "CreationDate": "2016-08-16T10:33:19.183", "ParentId": "38972443", "Score": "3", "OwnerUserId": "3410396"}, "38972505": {"Id": "38972505", "PostTypeId": "2", "Body": "<p>The guarantee of <code>reserve</code> is that subsequent insertions do not reallocate, and thus do not cause invalidation. That's it. There are no further guarantees.</p>\n", "LastActivityDate": "2016-08-16T10:28:42.307", "CommentCount": "0", "CreationDate": "2016-08-16T10:28:42.307", "ParentId": "38972443", "Score": "13", "OwnerUserId": "596781"}, "bq_ids": {"n4140": {"so_38972443_38972840_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 984}}, "n3337": {"so_38972443_38972840_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 969}}, "n4659": {"so_38972443_38972840_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 1047}}}, "38972893": {"Id": "38972893", "PostTypeId": "2", "Body": "<p>I'd say the <a href=\"http://www.cplusplus.com/reference/vector/vector/reserve/\" rel=\"nofollow\">documentation</a> is pretty clear on this topic: anything after <code>data() + size()</code> may be <em>allocated</em> but not <em>initialized</em> memory: if you want to also initialize this memory you should use <code>vector::resize</code>.</p>\n<blockquote>\n<p id=\"so_38972443_38972893_0\"><code>void reserve (size_type n);</code></p>\n<p id=\"so_38972443_38972893_1\"><strong>Request a change in capacity</strong></p>\n<p id=\"so_38972443_38972893_2\">Requests that the vector capacity be at least enough to contain n elements.</p>\n<p id=\"so_38972443_38972893_3\">If n is greater than the current vector capacity, the function causes\n  the container to reallocate its storage increasing its capacity to n\n  (or greater).</p>\n<p id=\"so_38972443_38972893_4\">In all other cases, the function call does not cause a reallocation\n  and the vector capacity is not affected.</p>\n<p id=\"so_38972443_38972893_5\">This function has no effect on the vector size and cannot alter its\n  elements.</p>\n</blockquote>\n<p>I'm not sure why you would want to access anything after <code>data() + size()</code> after <code>reserve()</code> in the first place: the intended use of <code>reserve()</code> is to prevent unnecessary reallocations when you know or can estimate the expected size of your container, but at the same time avoid the unnecessary initializon of memory which may be either inefficient or impractical (e.g. non-trivial data for initialization is not available). In this situation you could replace <code>log(N)</code> reallocations and copies with only 1 improving performance.</p>\n", "LastEditorUserId": "4128833", "LastActivityDate": "2016-08-16T10:59:36.540", "Score": "1", "CreationDate": "2016-08-16T10:47:38.150", "ParentId": "38972443", "CommentCount": "0", "OwnerUserId": "4128833", "LastEditDate": "2016-08-16T10:59:36.540"}, "38972840": {"Id": "38972840", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38972443_38972840_0\">Is <code>reserve</code> forced to update <code>data</code> to the allocated memory range?</p>\n</blockquote>\n<p>No. The standard only guarantees that <a href=\"http://en.cppreference.com/w/cpp/container/vector/data\" rel=\"nofollow\"><code>std::vector::data</code></a> returns a pointer and <code>[data(), data() + size())</code> is a valid range, the <a href=\"http://en.cppreference.com/w/cpp/container/vector/capacity\" rel=\"nofollow\"><code>capacity</code></a> is not concerned.</p>\n<p><a href=\"http://eel.is/c++draft/vector.data#1\" rel=\"nofollow\">$23.3.11.4/1 vector data\n[vector.data]</a>:</p>\n<blockquote>\n<p id=\"so_38972443_38972840_1\">Returns: A pointer such that <code>[data(), data() + size())</code> is a valid\n  range. For a non-empty vector, <code>data() == addressof(front())</code>.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-08-17T02:00:13.903", "Score": "9", "CreationDate": "2016-08-16T10:45:25.427", "ParentId": "38972443", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-08-17T02:00:13.903"}, "38972443": {"ViewCount": "882", "Body": "<p>I have a <code>std::vector</code> on which I call <code>reserve</code> with a large value. Afterwards I retrieve <code>data()</code>.</p>\n<p>Since iterating <code>data</code> is then crashing I am wondering whether this is even allowed. Is <code>reserve</code> forced to update <code>data</code> to the allocated memory range?</p>\n", "Title": "Use std::vector::data after reserve", "CreationDate": "2016-08-16T10:25:33.840", "LastActivityDate": "2016-08-17T02:00:13.903", "CommentCount": "5", "LastEditDate": "2016-08-16T14:02:11.560", "PostTypeId": "1", "LastEditorUserId": "3309790", "Id": "38972443", "Score": "11", "OwnerUserId": "725937", "Tags": "<c++><vector><language-lawyer><stdvector>", "AnswerCount": "4"}});