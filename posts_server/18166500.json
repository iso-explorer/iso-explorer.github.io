post_cb({"18166500": {"CreationDate": "2013-08-10T21:26:06.770", "ViewCount": "542", "Id": "18166500", "AcceptedAnswerId": "18166662", "Score": "1", "Title": "Do global variable constructors/destructors need thread protection?", "CommentCount": "6", "Body": "<p>If I have a class whose sole purpose is to have global <code>static</code> instances (to ensure the code in it's constructor is run before <code>main</code>) and it uses a class <code>static</code> variable, does access to this variable need to be protected via mutex?</p>\n<p>An example will help:</p>\n<pre><code>class WinSock\n{\npublic:\n  WinSock()\n  {\n    if(!(inst++))\n      //winsock init\n  }\n  ~WinSock()\n  {\n    if(!--inst)\n      //winsock deactivate\n  }\nprivate:\n  static int inst = 0;\n}\nstatic WinSock unusedWinSockVar;\n</code></pre>\n<p>This is all in a header that is included by any file using winsock. Does access to <code>inst</code> need to be protected, or is it impossible for this code to be run from multiple threads since threads will be created only once <code>main</code> runs and destroyed before <code>main</code> returns?</p>\n", "Tags": "<c++><multithreading><thread-safety>", "LastActivityDate": "2013-08-10T22:45:06.227", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "331785"}, "bq_ids": {"n4140": {"so_18166500_18166662_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 7151}}, "n3337": {"so_18166500_18166662_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 6895}}}, "18166662": {"CommentCount": "2", "Body": "<p>Firstly, I don't think that <code>private: static int inst = 0;</code> is a valid construct, my compilers complains loudly - if you omitted that you have something like <code>int WinSock::inst = 0</code> in some .cpp file in your project for simplicity, then it's ok. If not and your project compiles at all, there is a good chance that all translation units will use a different variable, and therefore result in incorrect behavior.</p>\n<p>Secondly, if any of the static-object constructors creates a new thread, then you need to make your code thread safe. From C++ standard p. 3.6.2:</p>\n<blockquote>\n<p id=\"so_18166500_18166662_0\">If a program starts a thread (30.3), the subsequent initialization of\n  a variable is unsequenced with respect to the initialization of a\n  variable defined in a different translation unit. Otherwise, the\n  initialization of a variable is indeterminately sequenced with respect\n  to the initialization of a variable defined in a different translation\n  unit.</p>\n</blockquote>\n<p>Indeterminate sequencing means that initialization will not have any particular ordering, but it will not overlap, so you don't need any additional safeguards. No ordering means that constructors in different compilation unis might overlap, and therefore thread safety is required.</p>\n<p>Thirdly, do you even need it done like this? Do you have other static objects that use winsock in their constructors? I really cannot think of any other reason to do it like that.</p>\n", "CreationDate": "2013-08-10T21:49:09.433", "ParentId": "18166500", "Id": "18166662", "LastActivityDate": "2013-08-10T21:49:09.433", "PostTypeId": "2", "Score": "4", "OwnerUserId": "455304"}, "18166817": {"CreationDate": "2013-08-10T22:10:51.453", "CommentCount": "7", "Body": "<p>Given the specific scenario that you describe, this is fine without adding synchronization.</p>\n<p>Your concern is that Winsock is initialized (and de-initialized) before (after) <code>main</code> runs, this is guaranteed to be the case. The code is guaranteed to be only called once from one thread, too. This (the fact that there's only one thread) makes synchronization useless.</p>\n<p>Assuming that other static global objects use Winsock (whether or not they spawn threads), that would of course be unsafe, but it wouldn't be any safer with a mutex either. The initialization takes place at an implementation-defined point in time before <code>main</code>.<br>\nTherefore, no static global object can use Winsock in a safe, well-defined way using this construct, since either way you don't know whether initialization occurred first. Synchronizing it doesn't change a thing for that detail.</br></p>\n<p>Note: the initialization of <code>inst</code> inside the class declaration isn't allowed as it is.</p>\n", "Id": "18166817", "OwnerUserId": "572743", "LastEditDate": "2013-08-10T22:45:06.227", "ParentId": "18166500", "LastActivityDate": "2013-08-10T22:45:06.227", "PostTypeId": "2", "Score": "0", "LastEditorUserId": "572743"}});