post_cb({"bq_ids": {"n4140": {"so_38471737_38471836_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 3260}, "so_38471737_38471802_1": {"length": 31, "quality": 0.8857142857142857, "section_id": 3260}}, "n3337": {"so_38471737_38471836_1": {"length": 10, "quality": 0.5882352941176471, "section_id": 3132}, "so_38471737_38471802_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 3132}}, "n4659": {"so_38471737_38471836_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 4018}, "so_38471737_38471802_1": {"length": 20, "quality": 0.5714285714285714, "section_id": 4018}}}, "38471737": {"ViewCount": "45", "Body": "<p>I want a function argument to take the value of an other argument as a default value.</p>\n<p>My question is: Why am i not allowed to do that ?</p>\n<pre><code>void foo(int a, int b = a)\n{\n\n}\n</code></pre>\n<p>and is there an other way to do it than that ?</p>\n<pre><code>void foo(int a)\n{\n   foo(a,a);\n}\n\nvoid foo(int a, int b)\n{\n\n}\n</code></pre>\n", "AcceptedAnswerId": "38471836", "Title": "Function argument taking other argument as default value", "CreationDate": "2016-07-20T03:18:24.437", "Id": "38471737", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2016-07-20T03:29:15.733", "LastActivityDate": "2016-07-21T01:24:25.390", "Score": "1", "OwnerUserId": "5813828", "Tags": "<c++><default-arguments>", "AnswerCount": "2"}, "38471836": {"Id": "38471836", "PostTypeId": "2", "Body": "<blockquote id=\"so_38471737_38471836_0\">\n<ol>\n<li>Why am i not allowed to do that ?</li>\n</ol>\n</blockquote>\n<p>Because the evaluation order of function arguments is unspecified, it's not guaranteed that <code>b</code> will be initialized with the value passed in as the argument of <code>a</code>.</p>\n<p>From <a href=\"http://eel.is/c++draft/dcl.fct.default#9\" rel=\"nofollow\">$8.3.6/9 Default arguments\n[dcl.fct.default]</a>:</p>\n<blockquote>\n<p id=\"so_38471737_38471836_1\">A default argument is evaluated each time the function is called with\n  no argument for the corresponding parameter. A parameter shall not\n  appear as a potentially-evaluated expression in a default argument.<br>\n  [ Example:</br></p>\n<pre><code>int a;\nint f(int a, int b = a);            // error: parameter a\n                                    // used as default argument\n</code></pre>\n</blockquote>\n<p>and</p>\n<blockquote id=\"so_38471737_38471836_2\">\n<ol start=\"2\">\n<li>and is there an other way to do it than that ?</li>\n</ol>\n</blockquote>\n<p>Using function overloading would be simple and fine.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-21T01:24:25.390", "Score": "0", "CreationDate": "2016-07-20T03:29:49.233", "ParentId": "38471737", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-07-21T01:24:25.390"}, "38471802": {"Id": "38471802", "PostTypeId": "2", "Body": "<p>Using </p>\n<pre><code>void foo(int a, int b = a) { ... }\n</code></pre>\n<p>is an error as per the standard.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_38471737_38471802_0\"><strong>8.3.6 Default arguments</strong></p>\n<p id=\"so_38471737_38471802_1\">9 Default arguments are evaluated each time the function is called. The order of evaluation of function arguments is unspecified. Consequently, parameters of a function shall not be used in a default argument,\n  even if they are not evaluated. Parameters of a function declared before a default argument are in scope and can hide namespace and class member names. <em>[ Example:</em></p>\n<pre><code>int a;\nint f(int a, int b = a); // error: parameter a\n                         // used as default argument\n\n...\n</code></pre>\n<p id=\"so_38471737_38471802_2\"><em>\u2014 end example ]</em></p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-07-20T03:30:29.823", "Score": "1", "CreationDate": "2016-07-20T03:25:33.347", "ParentId": "38471737", "CommentCount": "0", "OwnerUserId": "434551", "LastEditDate": "2016-07-20T03:30:29.823"}});