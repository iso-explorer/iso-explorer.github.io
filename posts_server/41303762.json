post_cb({"41303762": {"ViewCount": "125", "Body": "<p>I have an arbitrary precision <code>Integer</code> class, which is a lot like Java's <code>BigInteger</code> or OpenSSL's <code>BIGNUM</code> in operation. I'm having trouble understanding how I should express an unbounded limit for <code>numeric_limit&lt;Integer&gt;::max()</code>.</p>\n<p>Stack Overflow has a couple of question that asks if its OK to do (like <a href=\"https://stackoverflow.com/q/16122912\">Is it ok to specialize std::numeric_limits for user-defined number-like classes?</a>), and some answers with some examples using primitives, but I did not see an example using an arbitrary precision integer class. I also visited <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits\" rel=\"nofollow noreferrer\">std::numeric_limits</a> reference page but its not clear to me what I should do in this situation.</p>\n<p>At this point, my takeaway is its OK to specialize <code>numeric_limit</code> for my <code>Integer</code>, and its OK to put it in the standard namespace. I also need to specialize all <code>numeric_limits</code>.</p>\n<p>How do I specify an unbounded limit for <code>numeric_limit&lt;T&gt;::max()</code>?</p>\n<hr>\n<p>Below is from GCC 4.2.1's <code>&lt;limits&gt;</code> (OS X machine).</p>\n<pre><code>/// numeric_limits&lt;int&gt; specialization.\ntemplate&lt;&gt;\n  struct numeric_limits&lt;int&gt;\n  {\n    static const bool is_specialized = true;\n\n    static int min() throw()\n    { return -__INT_MAX__ - 1; }\n    static int max() throw()\n    { return __INT_MAX__; }\n\n    static const int digits = __glibcxx_digits (int);\n    static const int digits10 = __glibcxx_digits10 (int);\n    static const bool is_signed = true;\n    static const bool is_integer = true;\n    static const bool is_exact = true;\n    static const int radix = 2;\n    static int epsilon() throw()\n    { return 0; }\n    static int round_error() throw()\n    { return 0; }\n\n    static const int min_exponent = 0;\n    static const int min_exponent10 = 0;\n    static const int max_exponent = 0;\n    static const int max_exponent10 = 0;\n\n    static const bool has_infinity = false;\n    static const bool has_quiet_NaN = false;\n    static const bool has_signaling_NaN = false;\n    static const float_denorm_style has_denorm = denorm_absent;\n    static const bool has_denorm_loss = false;\n\n    static int infinity() throw()\n    { return static_cast&lt;int&gt;(0); }\n    static int quiet_NaN() throw()\n    { return static_cast&lt;int&gt;(0); }\n    static int signaling_NaN() throw()\n    { return static_cast&lt;int&gt;(0); }\n    static int denorm_min() throw()\n    { return static_cast&lt;int&gt;(0); }\n\n    static const bool is_iec559 = false;\n    static const bool is_bounded = true;\n    static const bool is_modulo = true;\n\n    static const bool traps = __glibcxx_integral_traps;\n    static const bool tinyness_before = false;\n    static const float_round_style round_style = round_toward_zero;\n};\n</code></pre>\n</hr>", "Title": "Specify unbounded limit for numeric_limit<T>::max()?", "CreationDate": "2016-12-23T15:08:06.250", "LastActivityDate": "2016-12-23T15:41:49.980", "CommentCount": "3", "LastEditDate": "2017-05-23T11:45:53.870", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "41303762", "Score": "8", "OwnerUserId": "608639", "Tags": "<c++><c++03><numeric-limits>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_41303762_41304226_1": {"length": 15, "quality": 0.6521739130434783, "section_id": 6299}, "so_41303762_41303872_0": {"length": 5, "quality": 1.0, "section_id": 6721}}, "n3337": {"so_41303762_41304226_1": {"length": 15, "quality": 0.6521739130434783, "section_id": 6056}, "so_41303762_41303872_0": {"length": 5, "quality": 1.0, "section_id": 6476}}, "n4659": {"so_41303762_41304226_1": {"length": 15, "quality": 0.6521739130434783, "section_id": 7808}, "so_41303762_41303872_0": {"length": 5, "quality": 1.0, "section_id": 8215}}}, "41303872": {"Id": "41303872", "PostTypeId": "2", "Body": "<p>The standard says the following about the <code>max</code> member function in \u00a718.3.2.4:</p>\n<blockquote>\n<p id=\"so_41303762_41303872_0\">Meaningful for all specializations in which <code>is_bounded != false</code>.</p>\n</blockquote>\n<p>So you should make <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_bounded\" rel=\"nofollow noreferrer\"><code>is_bounded</code></a> <code>false</code> and specify in the documentation for your class that it does not make sense to call <code>std::numeric_limits&lt;T&gt;::max</code> on it.</p>\n", "LastActivityDate": "2016-12-23T15:15:44.440", "CommentCount": "13", "CreationDate": "2016-12-23T15:15:44.440", "ParentId": "41303762", "Score": "5", "OwnerUserId": "3313064"}, "41304226": {"Id": "41304226", "PostTypeId": "2", "Body": "<p>concerning this question: </p>\n<blockquote>\n<p id=\"so_41303762_41304226_0\">At this point, my takeaway is its OK to specialize numeric_limit for my Integer</p>\n</blockquote>\n<p>The answer is Yes because:</p>\n<ol>\n<li><p>it's a specialisation of a standard template, and</p></li>\n<li><p>it's specialising for a user-defined type.</p></li>\n</ol>\n<p>From cppreference:</p>\n<blockquote>\n<p id=\"so_41303762_41304226_1\">It is allowed to add template specializations for any standard library template to the namespace std only if the declaration depends on a user-defined type and the specialization satisfies all requirements for the original template, except where such specializations are prohibited.</p>\n</blockquote>\n", "LastActivityDate": "2016-12-23T15:41:49.980", "CommentCount": "0", "CreationDate": "2016-12-23T15:41:49.980", "ParentId": "41303762", "Score": "1", "OwnerUserId": "2015579"}});