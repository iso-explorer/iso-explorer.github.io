post_cb({"10160489": {"ViewCount": "448", "Body": "<p>I encountered a compilation error in VS2010, and I don't know if it should be considered a compiler bug or not:</p>\n<p>I simplified the scenario as much as possible: a template class is declared a friend of some class, and tries to access the private members of the friend inside a lambda function. Here's the code:</p>\n<pre><code>class Foo {\n    template&lt;typename T&gt; friend class Bar;\n    int priv;\n};\n\ntemplate&lt;typename T&gt;\nclass Bar {\npublic:\n\n    void func() {\n        Foo foo;\n        foo.priv = 17; // compiles\n        auto lambda_func = [](Foo&amp; _foo) { _foo.priv = 17;  }; // doesn't compile\n    }\n};\n\nvoid test() {\n    Bar&lt;int&gt; bar;\n    bar.func();\n}\n</code></pre>\n<p>Note that this only happens if Bar is a template class.</p>\n", "AcceptedAnswerId": "10160597", "Title": "Friend Template Classes and Lambda Functions in Visual Studio 2010", "CreationDate": "2012-04-15T08:10:29.410", "Id": "10160489", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-04-15T15:31:51.297", "LastEditorUserId": "636019", "LastActivityDate": "2012-04-15T15:31:51.297", "Score": "2", "OwnerUserId": "997572", "Tags": "<c++><visual-studio-2010><lambda><c++11><friend>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_10160489_10160597_0": {"length": 29, "quality": 0.90625, "section_id": 5966}}, "n3337": {"so_10160489_10160597_0": {"length": 29, "quality": 0.90625, "section_id": 5735}}, "n4659": {"so_10160489_10160597_0": {"length": 29, "quality": 0.90625, "section_id": 7460}}}, "10160597": {"Id": "10160597", "PostTypeId": "2", "Body": "<p>This compiles fine in g++ 4.6 and 4.7. I think it's legal too --- the lambda should have as much access as the function it is defined in.</p>\n<p>The C++11 standard, 5.1.2p7 says (emphasis added):</p>\n<blockquote>\n<p id=\"so_10160489_10160597_0\">The lambda-expression\u2019s compound-statement yields the function-body (8.4) of the function call operator, but for purposes of name lookup (3.4), determining the type and value of this (9.3.2) and transforming id-expressions referring to non-static class members into class member access expressions using (*this) (9.3.1), <strong>the compound-statement is considered in the context of the lambda-expression</strong>.</p>\n</blockquote>\n<p>I read that as meaning that anything valid within the enclosing block is valid in the lambda body.</p>\n<p>MSVC2010 has other bugs with lambdas, so it doesn't surprise me that it fails to compile this case.</p>\n", "LastEditorUserId": "5597", "LastActivityDate": "2012-04-15T08:38:12.720", "Score": "2", "CreationDate": "2012-04-15T08:32:41.883", "ParentId": "10160489", "CommentCount": "2", "LastEditDate": "2012-04-15T08:38:12.720", "OwnerUserId": "5597"}});