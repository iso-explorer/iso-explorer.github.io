post_cb({"40499861": {"ParentId": "40499837", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-11-09T03:31:58.427", "Score": "2", "LastEditorUserId": "3309790", "LastEditDate": "2016-11-09T03:50:01.620", "Id": "40499861", "OwnerUserId": "3309790", "Body": "<p>This is UB, for a function that is supposed to return an object ends without a return statement. It might work well but nothing is guaranteed.</p>\n<p>From the standard, <a href=\"http://eel.is/c++draft/stmt.return#2\" rel=\"nofollow noreferrer\">$6.6.3/2 The return statement\n[stmt.return]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_40499837_40499861_0\">Flowing off the end of a constructor, a destructor, or a function with a cv <code>void</code> return type is equivalent to a <code>return</code> with no operand. Otherwise, flowing off the end of a function other than <code>main</code> (<a href=\"http://eel.is/c++draft/basic.start.main\" rel=\"nofollow noreferrer\">basic.start.main</a>) results in <strong>undefined behavior</strong>.</p>\n</blockquote>\n<hr>\n<p>You might want to see the result from <a href=\"http://rextester.com/IVUWN27660\" rel=\"nofollow noreferrer\">clang</a>; which gives a warning</p>\n<blockquote>\n<p id=\"so_40499837_40499861_1\">warning: control reaches end of non-void function [-Wreturn-type]</p>\n</blockquote>\n<p>and results in an infinite recursion.</p>\n</hr>", "LastActivityDate": "2016-11-09T03:50:01.620"}, "40499858": {"ParentId": "40499837", "CommentCount": "0", "CreationDate": "2016-11-09T03:31:33.273", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "40499858", "Score": "0", "Body": "<p>In fact the function has undefined behavior. It works maybe because it stores in a register (such as EAX) the reference to the stream and this register is used by the compiler to pass the return value.</p>\n", "LastActivityDate": "2016-11-09T03:31:33.273"}, "40499837": {"CommentCount": "0", "ViewCount": "31", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-11-09T03:28:18.283", "LastActivityDate": "2016-11-09T03:50:01.620", "Title": "Cascading the stream insertion operator doesn't work", "AcceptedAnswerId": "40499861", "LastEditDate": "2016-11-09T03:49:58.527", "Id": "40499837", "Score": "1", "Body": "<p>I was reading an article about <a href=\"http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/insertion.html\" rel=\"nofollow noreferrer\">Overloading the Stream Insertion Operator (&lt;&lt;)</a>. It stresses that the output stream object ought to be returned to ensure the operator is cascaded correctly. But it seems without the return, the output is still correct, what's wrong here?</p>\n<pre><code>#include&lt;iostream&gt;\n\nclass Rational\n{\n    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const Rational&amp;);\n\n    private:\n        int numerator;\n        int denominator;\n    public:\n        Rational(int num, int den): numerator{num}, denominator{den} {}\n};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; lhs, const Rational&amp; rhs)\n{\n    lhs &lt;&lt; rhs.numerator &lt;&lt; \"/\" &lt;&lt; rhs.denominator;\n    //return lhs;\n}\n\nint main()\n{\n    Rational r1(3, 5);\n    std::cout &lt;&lt; \"The value of r1 is \" &lt;&lt; r1 &lt;&lt; std::endl; // After commenting return lhs; still works fine\n}\n</code></pre>\n", "Tags": "<c++><c++11><return><operator-overloading>", "OwnerUserId": "4570230", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_40499837_40499861_1": {"section_id": 3360, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_40499837_40499861_1": {"section_id": 3230, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_40499837_40499861_1": {"section_id": 4126, "quality": 0.5714285714285714, "length": 4}, "so_40499837_40499861_0": {"section_id": 4799, "quality": 0.9166666666666666, "length": 22}}}});