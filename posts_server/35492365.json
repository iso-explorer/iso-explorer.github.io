post_cb({"35492365": {"CommentCount": "0", "ViewCount": "181", "CreationDate": "2016-02-18T21:03:29.113", "LastActivityDate": "2016-02-18T21:19:45.647", "Title": "Is identifying integer literals in decimal, octal, and hexadecimal notation the same in escape characters?", "AcceptedAnswerId": "35492552", "PostTypeId": "1", "Id": "35492365", "Score": "1", "Body": "<p>Going through the 5th edition of the <em>C++ Primer</em> book I was told that integers literals that begin with <code>0</code> are interpreted as <code>octal</code>. It left me with this example on how the integer literal <code>20</code> is represented in the following notations:</p>\n<pre><code> 20 `/* decimal */` 024 `/* octal */` 0x14 `/* hexadecimal */`\n</code></pre>\n<p>Advancing a couple of pages, I was then introduced to escape characters and how to represent numerical values of characters with them using <code>octal</code> and <code>hexadecimal</code> digits. I was then presented with this...</p>\n<pre><code>std::cout &lt;&lt; \"Hi \\x4dO\\115!\\n\"; // prints Hi MOM! followed by a newline\nstd::cout &lt;&lt; '\\115' &lt;&lt; '\\n'; // prints M followed by a newline\n</code></pre>\n<blockquote>\n<p id=\"so_35492365_35492365_0\"><em>Note that if a <code>\\</code> is followed by more than three <code>octal</code> digits, only the first three are associated with the <code>\\</code>. For example, <code>\\1234</code>\n  represents two characters: the character represented by the <code>octal</code>\n  value <code>123</code> and the character <code>4</code>. In contrast, <code>\\x</code> uses up all the hex\n  digits following it; <code>\\x1234</code> represents a single, 16-bit character\n  composed from the bits corresponding to these four <code>hexadecimal</code> digits.\n  Because most machines have 8-bit chars, such values are unlikely to be\n  useful. Ordinarily, <code>hexadecimal</code> characters with more than 8 bits are\n  used with extended characters sets using one of the prefixes from\n  <strong>Table 2.2</strong>.</em></p>\n</blockquote>\n<p>Ok so is it that <code>decimal</code> isn't used with escape characters when representing the numerical value of chars, or the whole interpretation of what is defined as a <code>octal</code> is changed with escape characters ? I'm confused because I thought <code>octals</code> are interpreted as literals that begin with <code>0</code> if it isn't followed by an <code>x</code>, but what I'm reading from that previous block quote... </p>\n<blockquote>\n<p id=\"so_35492365_35492365_1\">For example, <code>\\1234</code> represents two characters: the character\n  represented by the <code>octal</code> value <code>123</code> and the character <code>4</code>.</p>\n</blockquote>\n<p>It says the <strong>octal value</strong> <code>123</code>, but there is no <code>0</code>. So is it only with escape characters that they truncate the zero, and if so then how is a <code>decimal</code> literal represented when using escape characters ?</p>\n", "Tags": "<c++>", "OwnerUserId": "4208297", "AnswerCount": "3"}, "35492538": {"ParentId": "35492365", "CommentCount": "0", "Body": "<p>An octal literal needs to start with a <code>0</code>.  This is what tells the compiler that we are using a octal number.  When using the escape character the number(s) after it are treated as an octal number and it does not need to be prefixed with a <code>0</code> as the compiler know it is an octal number.  This is why <code>\\x</code> is needed if you want to use a hex number.</p>\n<p><a href=\"http://en.cppreference.com/w/\" rel=\"nofollow\">Cppreference</a> has a good table showing all of the <a href=\"http://en.cppreference.com/w/cpp/language/escape\" rel=\"nofollow\">escape sequences</a>.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "35492538", "Score": "2", "CreationDate": "2016-02-18T21:13:56.517", "LastActivityDate": "2016-02-18T21:13:56.517"}, "bq_ids": {"n4140": {"so_35492365_35492552_1": {"section_id": 5346, "quality": 0.9090909090909091, "length": 60}}, "n3337": {"so_35492365_35492552_1": {"section_id": 5143, "quality": 0.9090909090909091, "length": 60}}, "n4659": {"so_35492365_35492552_1": {"section_id": 6771, "quality": 0.8939393939393939, "length": 59}}}, "35492552": {"ParentId": "35492365", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_35492365_35492552_0\">It says the <strong>octal value</strong> 123, but there is no 0. So is it only with escape characters that they truncate the zero, and if so then how is a decimal literal represented when using escape characters ?</p>\n</blockquote>\n<p>That is correct - you do not need zero to have an octal escape sequence. The grammar is defined in [lex.ccon] as:</p>\n<pre><code>octal-escape-sequence:\n    \\ octal-digit\n    \\ octal-digit octal-digit\n    \\ octal-digit octal-digit octal-digit\n\nhexadecimal-escape-sequence:\n    \\ hexadecimal-digit\n    hexadecimal-escape-sequence hexadecimal-digit\n</code></pre>\n<p>Or alternatively:</p>\n<blockquote>\n<p id=\"so_35492365_35492552_1\">The escape <code>\\ooo</code> consists of the backslash followed by one, two, or three octal digits that are taken to specify\n  the value of the desired character. The escape <code>\\xhhh</code> consists of the backslash followed by x followed by one\n  or more hexadecimal digits that are taken to specify the value of the desired character. There is no limit to\n  the number of digits in a hexadecimal sequence. A sequence of octal or hexadecimal digits is terminated by\n  the first character that is not an octal digit or a hexadecimal digit, respectively. The value of a character\n  literal is implementation-defined if it falls outside of the implementation-defined range defined for <code>char</code> (for\n  literals with no prefix) or <code>wchar_t</code> (for literals prefixed by L). </p>\n</blockquote>\n<p>So <code>\\19</code> would be an octal literal with value 1 followed by a decimal literal with value 9. There is no decimal escape sequence. The full table of possibilities is enumerated <a href=\"http://en.cppreference.com/w/cpp/language/escape\" rel=\"nofollow\">here</a>.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "35492552", "Score": "2", "CreationDate": "2016-02-18T21:14:30.427", "LastActivityDate": "2016-02-18T21:14:30.427"}, "35492626": {"ParentId": "35492365", "CommentCount": "0", "Body": "<p>Characters can be defined using the following escape sequences.</p>\n<p>From the C++11 Standard:</p>\n<p><strong>2.14.3 Character literals</strong></p>\n<blockquote id=\"so_35492365_35492626_0\">\n<pre><code>simple-escape-sequence: one of\n\\\u2019 \\\" \\? \\\\\n\\a \\b \\f \\n \\r \\t \\v\n\noctal-escape-sequence:\n\\ octal-digit\n\\ octal-digit octal-digit\n\\ octal-digit octal-digit octal-digit\n\nhexadecimal-escape-sequence:\n\\x hexadecimal-digit\nhexadecimal-escape-sequence hexadecimal-digit\n</code></pre>\n</blockquote>\n<p>A string literal can use any of the escape sequences used to define character literals.</p>\n<p>Coming to your question ...</p>\n<blockquote>\n<p id=\"so_35492365_35492626_1\">Ok so is it that decimal isn't used with escape characters when representing the numerical value of chars,</p>\n</blockquote>\n<p>The answer is \"Yes\". Decimals cannot be used to define escape sequences of character literals or characters in string literals.</p>\n<blockquote>\n<p id=\"so_35492365_35492626_2\">I'm confused because I thought octals are interpreted as literals that begin with 0 if it isn't followed by an x,</p>\n</blockquote>\n<p>That is true only for integer literals, not when being used as escape sequences for character literals and characters in string literals.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "35492626", "Score": "2", "CreationDate": "2016-02-18T21:19:45.647", "LastActivityDate": "2016-02-18T21:19:45.647"}});