post_cb({"37587309": {"CommentCount": "3", "ViewCount": "292", "PostTypeId": "1", "LastEditorUserId": "264325", "CreationDate": "2016-06-02T09:05:43.503", "LastActivityDate": "2016-06-02T12:38:18.250", "Title": "Is erase() in std::vector linear time operation?", "AcceptedAnswerId": "37587453", "LastEditDate": "2016-06-02T09:26:53.317", "Id": "37587309", "Score": "1", "Body": "<p>Page <a href=\"http://www.cplusplus.com/reference/vector/vector/erase/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/erase/</a> says </p>\n<blockquote>\n<p id=\"so_37587309_37587309_0\">Linear on the number of elements erased (destructions) plus the number\n  of elements after the last element deleted (moving).</p>\n</blockquote>\n<p>So, if I am deleting an element, say, with index <code>j</code> from vector of some length <code>n</code> (n&gt;j) - will it be constant or linear(O(n))?</p>\n<p>Or, if I have <code>p</code> elements after <code>Jth</code> element, then it will be of order <code>O(p)</code> -  am I right?</p>\n", "Tags": "<c++><vector><erase>", "OwnerUserId": "6038386", "AnswerCount": "3"}, "37587453": {"ParentId": "37587309", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the link you provided:</p>\n<blockquote>\n<p id=\"so_37587309_37587453_0\">Linear on the number of elements erased (destructions) plus the number\n  of elements after the last element deleted (moving)</p>\n</blockquote>\n<p>This means that when deleting N=1 elements from the <code>std::vector</code>. It will take make N call to the destructor which is equal to 1 in your case. Then it will make M move operation which is equal to <code>(n-j-1)</code> in your case. So it is linear not a constant. </p>\n<p>So the complixity of std::vector::erase is: <code>O(Deleted_Items_Count) + O(Moved_Items_Count)</code>.</p>\n<p>In your case: <code>1*Destructor_Time + (n-j-1)*Moving_Time</code></p>\n<hr>\n<p>In order to erase items from vector in constant time,you may erase them from the tail of the vector(e.g. <code>std::vector::pop_back</code>)</p>\n<p>So if you want a constant time erasing with no importance of sorting:</p>\n<pre><code>auto linear_erase=[](auto&amp; v, const size_t index){\n    std::swap(v[index], v.back());\n    v.pop_back();\n};\n</code></pre>\n</hr>", "OwnerUserId": "4523099", "LastEditorUserId": "4523099", "LastEditDate": "2016-06-02T11:11:27.003", "Id": "37587453", "Score": "2", "CreationDate": "2016-06-02T09:12:31.117", "LastActivityDate": "2016-06-02T11:11:27.003"}, "37592118": {"ParentId": "37587309", "CommentCount": "0", "Body": "<p>I learned here on SO that the standard is the best reference.</p>\n<p>From <a href=\"http://eel.is/c++draft/sequences#vector.overview-1\" rel=\"nofollow\">23.3.11.1/1</a> [vector.overview]:</p>\n<blockquote>\n<p id=\"so_37587309_37592118_0\">A\u00a0vector\u00a0is a sequence container that supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time.</p>\n</blockquote>\n<p>So, in this case <code>erase</code> is neither constant nor linear time.<br>\nIt mostly depends on the kind of operation you are performing:</br></p>\n<ul>\n<li>It's constant if you are erasing at the end of the vector,</li>\n<li>Otherwise it's linear.</li>\n</ul>\n", "OwnerUserId": "4987285", "PostTypeId": "2", "Id": "37592118", "Score": "0", "CreationDate": "2016-06-02T12:38:18.250", "LastActivityDate": "2016-06-02T12:38:18.250"}, "bq_ids": {"n4140": {"so_37587309_37592118_0": {"section_id": 955, "quality": 1.0, "length": 17}}, "n3337": {"so_37587309_37592118_0": {"section_id": 943, "quality": 1.0, "length": 17}}, "n4659": {"so_37587309_37592118_0": {"section_id": 1016, "quality": 1.0, "length": 17}}}, "37587829": {"ParentId": "37587309", "CommentCount": "0", "Body": "<p>Deleting <code>N</code> elements from a vector will take a time complexity of <code>O(N)</code>, because the application has to iterate over <code>M</code> elements, and call each element's destructor, then copy the rest of the elements to the gap created by destroying the erased elements. </p>\n<p>So if we have a vector with <code>N</code> elements, and we erase the elements from the range <code>(p,q]</code> , than destroying the the range will take <code>O(q-p)</code> time complexity, which you can say is <code>O(1)</code>, because <code>p</code> and <code>q</code> are constants. then you will have to copy/move the range <code>(q,N]</code> . since <code>N-q</code> is linear, the time complexity is <code>O(N)</code>.</p>\n<p>together we get <code>O(N) + O(1) = O(N)</code> </p>\n<p>of course, if you delete a range that ends in the end of the array, the Complexity is <code>O(1)</code> because there are no elements to copy/move.</p>\n", "OwnerUserId": "3613500", "PostTypeId": "2", "Id": "37587829", "Score": "3", "CreationDate": "2016-06-02T09:28:39.500", "LastActivityDate": "2016-06-02T09:28:39.500"}});