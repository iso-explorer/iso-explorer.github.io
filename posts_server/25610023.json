post_cb({"25610042": {"ParentId": "25610023", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>One common reason is to figure out whether two interfaces <code>IA*</code> and <code>IB*</code> are in fact pointers to the same underlying object. If you need that, use the cast.</p>\n<p>IIRC, it's even possible in case of Multiple Inheritance with a repeated non-virtual base to have two <code>IA*</code> pointers which compare unequal, yet point to the same object - because they point to two different <code>IA</code> subobjects.</p>\n", "OwnerUserId": "15416", "LastEditorUserId": "15416", "LastEditDate": "2014-09-01T16:51:05.790", "Id": "25610042", "Score": "26", "CreationDate": "2014-09-01T16:40:51.423", "LastActivityDate": "2014-09-01T16:51:05.790"}, "25610023": {"CommentCount": "4", "AcceptedAnswerId": "25610042", "PostTypeId": "1", "ClosedDate": "2014-09-01T21:31:20.743", "LastEditorUserId": "701092", "CreationDate": "2014-09-01T16:39:29.380", "LastActivityDate": "2014-09-01T20:19:38.463", "LastEditDate": "2014-09-01T20:19:38.463", "ViewCount": "1995", "FavoriteCount": "3", "Title": "When is dynamic_cast<void*> useful?", "Id": "25610023", "Score": "24", "Body": "<p>5.2.7/7 says something along the lines of:</p>\n<blockquote>\n<p id=\"so_25610023_25610023_0\">If <code>T</code> is \"pointer to <code>cv void</code>\", the result is a pointer to the most derived class pointed to by <code>x</code>.</p>\n</blockquote>\n<p>What is a good application of this synatx? When should <code>dynamic_cast&lt;void*&gt;</code> be used?</p>\n", "Tags": "<c++><c++11><casting><void-pointers><dynamic-cast>", "OwnerUserId": "701092", "AnswerCount": "2"}, "25610102": {"ParentId": "25610023", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>When you have something like:</p>\n<pre><code>template&lt;typename X, typename Y&gt;\nbool operator==(const X* px, const Y* py) {\n     return dynamic_cast&lt;void*&gt;(px) == dynamic_cast&lt;void*&gt;(py);\n}\n</code></pre>\n", "OwnerUserId": "1312406", "LastEditorUserId": "862351", "LastEditDate": "2014-09-01T20:02:07.230", "Id": "25610102", "Score": "5", "CreationDate": "2014-09-01T16:46:10.813", "LastActivityDate": "2014-09-01T20:02:07.230"}, "bq_ids": {"n4140": {"so_25610023_25610023_0": {"section_id": 6017, "quality": 0.875, "length": 7}}, "n3337": {"so_25610023_25610023_0": {"section_id": 37, "quality": 0.875, "length": 7}}, "n4659": {"so_25610023_25610023_0": {"section_id": 7516, "quality": 0.875, "length": 7}}}});