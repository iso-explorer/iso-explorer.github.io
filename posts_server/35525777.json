post_cb({"35525777": {"CommentCount": "0", "ViewCount": "796", "PostTypeId": "1", "LastEditorUserId": "3953764", "CreationDate": "2016-02-20T16:20:33.380", "LastActivityDate": "2016-02-20T16:42:04.223", "Title": "Use of string_view for map lookup", "AcceptedAnswerId": "35525806", "LastEditDate": "2016-02-20T16:42:04.223", "Id": "35525777", "Score": "9", "Body": "<p>The following code fails to build on recent compilers (g++-5.3, clang++-3.7).</p>\n<pre><code>#include &lt;map&gt;\n#include &lt;functional&gt;\n#include &lt;experimental/string_view&gt;\n\nvoid f()\n{\n    using namespace std;\n    using namespace std::experimental;\n    map&lt;string, int&gt; m;\n    string s = \"foo\";\n    string_view sv(s);\n    m.find(sv);\n}\n</code></pre>\n<p>Error returned by clang : </p>\n<pre><code>error: no matching member function for call to 'find'\n    m.find(sv);\n    ~~^~~~\n</code></pre>\n<p>But shouldn't <code>find</code> be able to use comparable types ? \nCppreference mentions the following overload : </p>\n<p><code>template&lt; class K &gt; iterator find( const K&amp; x );</code> </p>\n<p>The same error happens with <code>boost::string_ref</code>.</p>\n", "Tags": "<c++><dictionary><c++14><string-view>", "OwnerUserId": "1495627", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35525777_35525806_0": {"section_id": 749, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_35525777_35525806_0": {"section_id": 808, "quality": 0.8888888888888888, "length": 16}}}, "35525806": {"ParentId": "35525777", "LastEditDate": "2017-05-23T11:44:22.680", "CommentCount": "1", "CreationDate": "2016-02-20T16:23:20.240", "Score": "14", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "35525806", "OwnerUserId": "3953764", "Body": "<p>You need to specify a <a href=\"https://stackoverflow.com/q/20317413/3953764\"><em>transparent comparator</em></a> explicitly (like <a href=\"http://eel.is/c++draft/comparisons#11\" rel=\"noreferrer\"><code>std::less&lt;&gt;</code></a>):</p>\n<pre><code>std::map&lt;std::string, int, std::less&lt;&gt;&gt; m;\n//                         ~~~~~~~~~~^\n</code></pre>\n<p><code>std::map&lt;K,V&gt;</code> defaults its comparator to <a href=\"http://eel.is/c++draft/comparisons#5\" rel=\"noreferrer\"><code>std::less&lt;K&gt;</code></a> (i.e., a <em>non-transparent</em> one), and since (<a href=\"http://eel.is/c++draft/associative.reqmts#13\" rel=\"noreferrer\">[associative.reqmts]/p13</a>):</p>\n<blockquote>\n<p id=\"so_35525777_35525806_0\">The member function templates <code>find</code>, <code>count</code>, <code>lower_bound</code>, <code>upper_bound</code>, and <code>equal_range</code> shall not participate in overload resolution unless the <em>qualified-id</em> <code>Compare::is_transparent</code> is valid and denotes a type (14.8.2).</p>\n</blockquote>\n<p>the template member function <code>find</code> is not a viable candidate.</p>\n", "LastActivityDate": "2016-02-20T16:38:54.020"}});