post_cb({"5561903": {"Id": "5561903", "PostTypeId": "2", "Body": "<p>The philosphical reasoning aside, down under the hood it's essential that the compiler knows where to separate each command from the next. A bracket is in and of itself a separator, so a semi-colon is unnecessary. </p>\n", "LastActivityDate": "2011-04-06T05:33:56.893", "CommentCount": "1", "CreationDate": "2011-04-06T05:33:56.893", "ParentId": "5561869", "Score": "4", "OwnerUserId": "271166"}, "5562107": {"Id": "5562107", "PostTypeId": "2", "Body": "<p>When you use curly braces to enclose a block of code, you don't need semicolon:</p>\n<pre><code>namespace Some\n{\n  void fun(int i)\n  { \n    while(i != 0)\n    {\n      cout&lt;&lt;\"i = \"&lt;&lt;i&lt;&lt;endl;\n      i --;\n    }  // semicolon not needed\n  }  // semicolon not needed\n} // semicolon not needed\n</code></pre>\n<p>In other cases, you need semicolon (like initialization, declaration etc.):</p>\n<pre><code>struct A {\n// ... declare members\n}; // declaration; put semicolon\nint a[] = {0, 1, 2};  // initialization; put semicolon\n</code></pre>\n", "LastActivityDate": "2011-04-06T06:05:49.597", "CommentCount": "1", "CreationDate": "2011-04-06T06:05:49.597", "ParentId": "5561869", "Score": "-1", "OwnerUserId": "514235"}, "5561891": {"Id": "5561891", "PostTypeId": "2", "Body": "<p>Because curly is not the statement it is used to group the statements. It does not need a terminator.</p>\n", "LastActivityDate": "2011-04-06T05:32:16.150", "CommentCount": "0", "CreationDate": "2011-04-06T05:32:16.150", "ParentId": "5561869", "Score": "-1", "OwnerUserId": "472375"}, "5561986": {"Id": "5561986", "PostTypeId": "2", "Body": "<p>Because the language is defined as:</p>\n<pre><code>statement:\n    labeled-statement\n    expression-statement\n    compound-statement\n    selection-statement\n    iteration-statement\n    jump-statement\n    declaration-statement\n    try-block\n\nlabeled-statement:\n    identifier : statement\n    case constant-expression : statement\n    default : statement\n\nexpression-statement:\n    expressionopt ; \n\ncompound-statement:\n    { statement-seqopt } \n\nstatement-seq:\n    statement\n    statement-seq statement\n\nselection-statement:\n    if ( condition ) statement\n    if ( condition ) statement else statement\n    switch ( condition ) statement\n\ncondition:\n    expression\n    type-specifier-seq declarator = assignment-expression\n\niteration-statement:\n    while ( condition ) statement\n    do statement while ( expression ) ; \n    for ( for-init-statement conditionopt ; expressionopt ) statement\n\nfor-init-statement:\n    expression-statement\n    simple-declaration\n\njump-statement:\n    break ;\n    continue ;\n    return expressionopt ; \n    goto identifier ; \n\ndeclaration-statement:\n    block-declaration \n</code></pre>\n<p>All normal control statements are built recursively from each other. The real work is done by the <code>expression-statement</code>. If you notice the <code>expression-statement</code> is always terminate by the <code>;</code>. The other statements to watch are the <code>jump-statement</code>.</p>\n<p>But the main reason is that they are not needed after the {} block to allow the <code>easy</code> parsing of a statement.</p>\n", "LastEditorUserId": "14065", "LastActivityDate": "2011-04-06T05:53:50.503", "Score": "8", "CreationDate": "2011-04-06T05:45:38.767", "ParentId": "5561869", "CommentCount": "5", "OwnerUserId": "14065", "LastEditDate": "2011-04-06T05:53:50.503"}, "bq_ids": {"n4140": {"so_5561869_5561993_0": {"length": 13, "quality": 1.0, "section_id": 3881}}, "n3337": {"so_5561869_5561993_0": {"length": 13, "quality": 1.0, "section_id": 3741}}, "n4659": {"so_5561869_5561993_0": {"length": 13, "quality": 1.0, "section_id": 4770}}}, "5561882": {"Id": "5561882", "PostTypeId": "2", "Body": "<p>Most people think of <em>statements</em> as being a simple command, often with a keyword, and some parameters, such as \"goto x\", \"a=y+2\", etc.  There has to be some indication of where one statement ends and another begins, much like English sentences need to end with a period. Traditionally the grammars of most langauges require semicolons after such <em>statement</em> as such indication.</p>\n<p>A  { ... }  \"curly brace pair\" is a <em>block</em>, which is a special kind of a statement, but the semicolon isn't needed because the curly braces make the boundaries clear.</p>\n<p>Many language <em>also</em> allow \";\" by itself, to represent the empty statement.  Why would you need one?  For the same reason the natural number system requires \"zero\" instead of \"one\", and sets can be empty.</p>\n<p>But it means you can write:</p>\n<pre><code>{ ... } ;\n</code></pre>\n<p>and most langauge compilers accept it without remark.  But you should think of it as:</p>\n<pre><code>{  ... }\n;\n</code></pre>\n<p>and generally there's no good reason to write that.</p>\n<p>As a practical matter, languages that accept <strong>{}</strong>  (e.g., \"empty brackets\") don't need the empty-statement <strong>;</strong>, because these are semantically identical.  But language designers seem stuck on tradition; have you noticed how every \"modern\" language seems to be a bad syntactic copy of C?  </p>\n", "LastEditorUserId": "120163", "LastActivityDate": "2011-04-06T10:20:05.150", "Score": "3", "CreationDate": "2011-04-06T05:30:59.090", "ParentId": "5561869", "CommentCount": "4", "OwnerUserId": "120163", "LastEditDate": "2011-04-06T10:20:05.150"}, "5561901": {"Id": "5561901", "PostTypeId": "2", "Body": "<p>Putting a semicolon in is the same effect as </p>\n<pre><code>if (a &gt; b) {\n printf(\"hello!\");\n}printf(\"Goodbye\");\n</code></pre>\n<p>and leaving the <code>printf(\"Goodbye\")</code> part out.</p>\n", "LastActivityDate": "2011-04-06T05:33:32.730", "CommentCount": "0", "CreationDate": "2011-04-06T05:33:32.730", "ParentId": "5561869", "Score": "0", "OwnerUserId": "646382"}, "5561883": {"Id": "5561883", "PostTypeId": "2", "Body": "<p>Because curly brackets are used for grouping statements, but they are not statements themselves.</p>\n", "LastActivityDate": "2011-04-06T05:31:01.260", "CommentCount": "14", "CreationDate": "2011-04-06T05:31:01.260", "ParentId": "5561869", "Score": "7", "OwnerUserId": "196838"}, "5563361": {"Id": "5563361", "PostTypeId": "2", "Body": "<p>This is a fair question. A block <strong>is</strong> a statement. It is natural to desire uniformity, and wonder why all statements are not terminated the same. There is no technical problem if we do require a <code>;</code> after a block. But we are also lazy, since <code>}</code> can unambiguously mark the end of a statement, we don't want to have to type another marker. </p>\n<p>A related observation: in C++, you must end class declaration with a <code>;</code></p>\n<pre><code>class A\n{\n    ...\n}; // the semicolon is mandatory!\n</code></pre>\n<p>That annoys the heck of a lot of people. The semicolon is required because the language allows some other stuff after <code>}</code> so the <code>}</code> is not a reliable end marker.</p>\n<p>In Java, that's not the case. The <code>}</code> ends the class declaration and that is it. So <code>;</code> is not needed.</p>\n", "LastActivityDate": "2011-04-06T08:17:35.993", "CommentCount": "0", "CreationDate": "2011-04-06T08:17:35.993", "ParentId": "5561869", "Score": "1", "OwnerUserId": "218978"}, "5561869": {"ViewCount": "4325", "Body": "<p>I know that a semicolon is required after a statement (I'm talking about Java, C++, and similar languages), but is not required after a curled bracket. Why so?</p>\n<pre><code>if (a &gt; b) \n  printf(\"hello!\"); // semicolon is mandatory\n\nif (a &gt; b) {\n  printf(\"hello!\");\n} // semicolon is not required\n</code></pre>\n<p>What is the reason? I mean, what is the theory behind this?</p>\n", "AcceptedAnswerId": "5561883", "Title": "Why semicolon is not required after a curled bracket?", "CreationDate": "2011-04-06T05:29:11.023", "Id": "5561869", "CommentCount": "2", "LastEditDate": "2011-04-06T06:35:26.570", "PostTypeId": "1", "OwnerDisplayName": "riox", "LastEditorUserId": "527702", "LastActivityDate": "2011-04-06T10:20:05.150", "Score": "11", "Tags": "<java><c++><syntax><language-theory>", "AnswerCount": "12"}, "5561906": {"Id": "5561906", "PostTypeId": "2", "Body": "<p>If you are using the object initialization syntax in C# 3+ a semicolon comes after the bracket</p>\n<pre><code>var foo = new Foo\n  {\n    Bar = \"Fizzbuzz\"\n  };\n</code></pre>\n", "LastActivityDate": "2011-04-06T05:35:02.950", "CommentCount": "1", "CreationDate": "2011-04-06T05:35:02.950", "ParentId": "5561869", "Score": "0", "OwnerUserId": "14359"}, "5561993": {"Id": "5561993", "PostTypeId": "2", "Body": "<p><strong>Note : this answer is specific to the C++ language, not Java.</strong></p>\n<p>I would say that the semicolon is not required by the language grammar (2003). This is how the language defines the grammar.</p>\n<p>The code which you've written is called <em>Compound statement or block</em> and the language specification (2003) defines the grammar of compound statement in the section \u00a76.3/1 as,</p>\n<blockquote>\n<p id=\"so_5561869_5561993_0\">So that several statements can be used\n  where one is expected, the compound\n  statement (also, and equivalently,\n  called \u201cblock\u201d) is provided.</p>\n<pre>\ncompound-statement:  \n             { statement-seq<sub>opt</sub> }\n\nstatement-seq:  \n            statement\n            statement-seq statement</pre>\n</blockquote>\n<p>Do you see any semi-colon in the grammar shown above? No. That's why the semi-colon is not  required after the curly bracket in your code.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-04-06T05:59:45.807", "Score": "0", "CreationDate": "2011-04-06T05:47:03.137", "ParentId": "5561869", "CommentCount": "0", "OwnerUserId": "415784", "LastEditDate": "2011-04-06T05:59:45.807"}, "5562247": {"Id": "5562247", "PostTypeId": "2", "Body": "<p>The only place you will need a semi-colon after a close curly bracket is after an array initialization as you could continue the line e.g. </p>\n<pre><code>int[] i= { 1,2,3}, j= {1};\n</code></pre>\n<p>The semi-colon is required because the '}' here doesn't tell the compiler where the end of the line is.</p>\n<p>Similarly</p>\n<pre><code>Runnable r = new Runnable() {\n   public void run() {\n   }\n}, r2 = new Runnable() {\n   public void run() {\n   }\n}; // required as you could define another Runnable or an array of Runnable.\n</code></pre>\n", "LastActivityDate": "2011-04-06T06:25:14.163", "CommentCount": "0", "CreationDate": "2011-04-06T06:25:14.163", "ParentId": "5561869", "Score": "0", "OwnerUserId": "57695"}, "5561911": {"Id": "5561911", "PostTypeId": "2", "Body": "<p>In this case curly brackets are defining a block of statements. Like any other block. while you are about to declare and initialize the array you must provide the ; because in this case you are writing a statement.</p>\n", "LastActivityDate": "2011-04-06T05:35:36.110", "CommentCount": "0", "CreationDate": "2011-04-06T05:35:36.110", "ParentId": "5561869", "Score": "0", "OwnerUserId": "1651158"}});