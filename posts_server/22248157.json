post_cb({"bq_ids": {"n4140": {"so_22248157_22248922_0": {"length": 62, "quality": 1.0, "section_id": 328}}, "n3337": {"so_22248157_22248922_0": {"length": 62, "quality": 1.0, "section_id": 318}}, "n4659": {"so_22248157_22248922_0": {"length": 48, "quality": 0.7741935483870968, "section_id": 336}}}, "22248922": {"Id": "22248922", "PostTypeId": "2", "Body": "<p>Both gcc 4.9.0 20140302 and clang 3.5 (trunk 202594) correctly pick the first version. As <a href=\"https://stackoverflow.com/users/743382/hvd\">hvd</a> kindly gave me <a href=\"https://stackoverflow.com/questions/22248157/overload-resolution-with-universal-reference-involved#comment33789898_22248922\">the references in comments</a>:</p>\n<ul>\n<li><p>It was a subtle issue, there was <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1164\" rel=\"nofollow noreferrer\">a defect report</a>,</p></li>\n<li><p>The gcc implementation prior 4.9 implemented the earlier defect, see  <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=57172\" rel=\"nofollow noreferrer\">Template overload resolution ambiguous for <code>T&amp;&amp;</code> versus <code>T&amp;</code></a></p></li>\n<li><p>The corresponding part in the standard is <strong>14.8.2.4 [temp.deduct.partial]</strong>, paragraph 9:</p></li>\n</ul>\n<blockquote>\n<p id=\"so_22248157_22248922_0\">If, for a given type, deduction succeeds in both directions (i.e., the types are identical after the transformations above) and both <code>P</code> and <code>A</code> were reference types (before being replaced with the type referred to above):<br>\n      \u2014 if the type from the argument template was an lvalue reference and the type from the parameter template was not, the argument type is considered to be more specialized than the other; otherwise,<br>\n      \u2014 if the type from the argument template is more cv-qualified than the type from the parameter template (as described above), the argument type is considered to be more specialized than the other; otherwise,<br>\n      \u2014 neither type is more specialized than the other.</br></br></br></p>\n</blockquote>\n<hr>\n<p>By the way, watch <a href=\"http://www.youtube.com/watch?v=T5swP3dr190\" rel=\"nofollow noreferrer\">The Universal Reference/Overloading Collision Conundrum</a> video why overloading on universal references is a bad idea. In short, consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\nstruct A { bool guts_stolen; };\n\nvoid steal_guts(A&amp;&amp; a) {\n  a.guts_stolen = true; \n}\n\ntemplate &lt;typename T&gt; void f(const T&amp; a) { \n                          // ^^^^^ note the const!\n  std::cout &lt;&lt; \"T&amp;\\n\"; \n}\n\ntemplate &lt;typename T&gt; void f(T&amp;&amp; a) { \n  std::cout &lt;&lt; \"T&amp;&amp;\\n\";\n  steal_guts(std::move(a));\n}\n\nint main() {\n    A a{ false };\n    f(a);\n    std::cout &lt;&lt; \"Guts stolen? \" &lt;&lt; std::boolalpha &lt;&lt; a.guts_stolen &lt;&lt; std::endl;\n}\n</code></pre>\n<p>If you run the program, it will print</p>\n<pre><code>T&amp;&amp;\nGuts stolen? true\n</code></pre>\n<p>which is not at all what you would expect just by looking at <code>A a{ false }; f(a);</code>.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-03-07T12:15:16.957", "Score": "6", "CreationDate": "2014-03-07T11:31:40.853", "ParentId": "22248157", "CommentCount": "11", "OwnerUserId": "341970", "LastEditDate": "2017-05-23T12:09:14.080"}, "22248157": {"ViewCount": "147", "Body": "<p>For the following code:</p>\n<pre><code>class A {};\n\ntemplate &lt;typename T&gt; void f(T&amp; a) {}\ntemplate &lt;typename T&gt; void f(T&amp;&amp; a) {}\n\nint main() {\n    A a;\n    f(a);\n}\n</code></pre>\n<p>clang++ binds the call to the first overload, while g++ reports ambiguous call.  Which one is taking the correct action?</p>\n", "AcceptedAnswerId": "22248922", "Title": "Overload resolution with universal reference involved", "CreationDate": "2014-03-07T10:56:08.603", "Id": "22248157", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-03-07T12:15:16.957", "Score": "9", "OwnerUserId": "3237645", "Tags": "<c++><gcc><c++11><clang><language-lawyer>", "AnswerCount": "1"}});