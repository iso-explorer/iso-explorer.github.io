post_cb({"33593183": {"ParentId": "33592986", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>To fix this, change:</p>\n<pre><code>template&lt;typename T&gt;\nclass Io : public Io_obj, T\n</code></pre>\n<p>to:</p>\n<pre><code>template&lt;typename T&gt;\nclass Io : public Io_obj, public T\n</code></pre>\n<p>Access specifiers must be written separately for each base type. In your case, second derivation was <code>private</code>, as this is the default mode.</p>\n<p><code>dynamic_cast&lt;&gt;</code> converts <code>Io&lt;T&gt;</code> to <code>T</code>, if they are connected with <em>is-a</em> relation, which is created by public inheritation. In case of private, <code>dynamic_cast&lt;&gt;</code> will not work, because <code>Io&lt;T&gt;</code> <em>is not</em> <code>T</code> (private inheritance creates relation called <em>\"implemented in terms of\"</em>).</p>\n<p>Test: <a href=\"http://coliru.stacked-crooked.com/a/130c7768fb5b501d\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/130c7768fb5b501d</a></p>\n<p>Of course this code will also throw an <code>std::runtime_error</code>, as you have not registered \"factory\" for <code>square</code> type, but I guess you already know this :)</p>\n<p>Some reference, perhaps (<strong>18.5.2</strong> - <code>dynamic_cast&lt;T&gt;(v)</code>):</p>\n<blockquote>\n<p id=\"so_33592986_33593183_0\">Otherwise, a run-time check is applied to see if the object pointed or\n  referred to by <code>v</code> can be converted to the type pointed or referred to\n  by <code>T</code>.</p>\n<p id=\"so_33592986_33593183_1\">The run-time check logically executes as follows:</p>\n<p id=\"so_33592986_33593183_2\">If, in the most derived object pointed (referred) to by <code>v</code>, v points\n  (refers) to a <strong>public</strong> base class subobject of a <code>T</code> object, and if\n  only one object of type <code>T</code> is derived from the sub-object pointed\n  (referred) to by <code>v</code>, the result is a pointer (an lvalue referring) to\n  that <code>T</code> object.</p>\n<p id=\"so_33592986_33593183_3\">Otherwise, if <code>v</code> points (refers) to a <strong>public</strong> base class\n  sub-object of the most derived object, and the type of the most\n  derived object has a base class, of type <code>T</code>, that is unambiguous and\n  <strong>public</strong>, the result is a pointer (an lvalue referring) to the <code>T</code> sub-object of the most derived object.</p>\n<p id=\"so_33592986_33593183_4\">Otherwise, the run-time check fails.</p>\n<p id=\"so_33592986_33593183_5\">The value of a failed cast to pointer type is the null pointer value\n  of the required result type. A failed cast to reference type throws\n  <code>bad_cast</code>.</p>\n</blockquote>\n", "OwnerUserId": "2812864", "LastEditorUserId": "2812864", "LastEditDate": "2015-11-08T11:11:00.627", "Id": "33593183", "Score": "3", "CreationDate": "2015-11-08T10:57:53.893", "LastActivityDate": "2015-11-08T11:11:00.627"}, "33592986": {"CommentCount": "0", "ViewCount": "70", "CreationDate": "2015-11-08T10:31:32.420", "LastActivityDate": "2015-11-08T11:11:00.627", "Title": "How to recover an interface through crosscast", "AcceptedAnswerId": "33593183", "PostTypeId": "1", "Id": "33592986", "Score": "2", "Body": "<p>First base class</p>\n<pre><code>class Io_obj\n{\npublic:\n    virtual Io_obj* clone() const=0;\n    virtual ~Io_obj(){}\n};\n</code></pre>\n<p>First derived class</p>\n<pre><code>template&lt;typename T&gt;\nclass Io : public Io_obj,T\n{\npublic:\n    Io(){}\n    Io(string&amp; s){cout &lt;&lt; s &lt;&lt; '\\n';}\n    Io* clone() const override {return new Io{*this};}\n    static Io* new_io(string&amp; s){return new Io{s};}\n};\n</code></pre>\n<p>Second base class</p>\n<pre><code>class Shape\n{\npublic:\n    virtual void draw() const=0;\n    virtual ~Shape(){}\n};\n</code></pre>\n<p>Second derived classes</p>\n<pre><code>class Circle : public Shape\n{\npublic:\n    Circle(){}\n    Circle(string&amp; s){cout &lt;&lt; s &lt;&lt; '\\n';}\n    void draw() const override{cout &lt;&lt; \"draw circle\\n\";}\n};\n\nclass Triangle : public Shape\n{\npublic:\n    Triangle(){}\n    Triangle(string&amp; s){cout &lt;&lt; s &lt;&lt; '\\n';}\n    void draw() const override {cout &lt;&lt; \"draw triangle\";}\n};\n</code></pre>\n<p>main functions</p>\n<pre><code>using io_circle = Io&lt;Circle&gt;;\nusing io_triangle = Io&lt;Triangle&gt;;\nusing Pf = function&lt;Io_obj*(string&amp;)&gt;;\n\nmap&lt;string,Pf&gt; io_map{{\"circle\",&amp;io_circle::new_io},{\"triangle\",&amp;io_triangle::new_io}};\n\nIo_obj* get_obj(string&amp; s){\n    if(auto f=io_map[s]) return f(s);\n    throw runtime_error{\"error: wrong type\"};\n}\n\nint main(){\n    vector&lt;string&gt; vs{\"circle\",\"triangle\",\"square\"};\n    for(auto x:vs){\n        unique_ptr&lt;Io_obj&gt; my_obj{get_obj(x)};\n\n        if(auto sp=dynamic_cast&lt;Shape*&gt;(my_obj.get())){\n            sp-&gt;draw();\n        }else{\n            throw runtime_error{\"error: bad cast\"};\n        }\n    }\n    return 0;\n}\n</code></pre>\n<p>Dynamic cast failed. It seems that the object created by <code>unique_ptr&lt;Io_obj&gt; my_obj{get_obj(x)}</code> is of type <code>Io_obj</code>, which has no member function <code>draw()</code>. How to make it work?</p>\n<p>Code from Bjarne Stroustrup: the C++ programming language Ch22.2.4</p>\n", "Tags": "<c++><interface><polymorphism><dynamic-cast>", "OwnerUserId": "2846062", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33592986_33593183_0": {"section_id": 6017, "quality": 1.0, "length": 13}, "so_33592986_33593183_1": {"section_id": 6018, "quality": 0.8333333333333334, "length": 5}, "so_33592986_33593183_3": {"section_id": 6018, "quality": 0.8888888888888888, "length": 24}, "so_33592986_33593183_2": {"section_id": 6018, "quality": 0.875, "length": 21}, "so_33592986_33593183_5": {"section_id": 6019, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_33592986_33593183_1": {"section_id": 5786, "quality": 0.8333333333333334, "length": 5}, "so_33592986_33593183_5": {"section_id": 5787, "quality": 0.8888888888888888, "length": 16}, "so_33592986_33593183_3": {"section_id": 5786, "quality": 0.8888888888888888, "length": 24}, "so_33592986_33593183_2": {"section_id": 5786, "quality": 0.875, "length": 21}, "so_33592986_33593183_0": {"section_id": 5785, "quality": 1.0, "length": 13}}, "n4659": {"so_33592986_33593183_0": {"section_id": 7516, "quality": 1.0, "length": 13}, "so_33592986_33593183_1": {"section_id": 7517, "quality": 0.8333333333333334, "length": 5}, "so_33592986_33593183_3": {"section_id": 7517, "quality": 0.8888888888888888, "length": 24}, "so_33592986_33593183_2": {"section_id": 7517, "quality": 0.875, "length": 21}, "so_33592986_33593183_5": {"section_id": 7518, "quality": 0.8888888888888888, "length": 16}}}});