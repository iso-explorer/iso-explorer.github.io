post_cb({"bq_ids": {"n4140": {"so_32670531_32670656_0": {"length": 5, "quality": 1.0, "section_id": 6331}}, "n3337": {"so_32670531_32670656_0": {"length": 5, "quality": 1.0, "section_id": 6088}}, "n4659": {"so_32670531_32670656_0": {"length": 5, "quality": 1.0, "section_id": 7841}}}, "32670531": {"ViewCount": "72", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n\nsrand(time(0));\ndouble dd [10];\nfor(int i=0;i!=10; ++i) dd[i]= rand()%5+0;\n\nfor(auto i:dd)\ncout&lt;&lt;i&lt;&lt;' ';\n\ncout&lt;&lt;endl;\n\nexit(100);\n\n}\n</code></pre>\n<p>Why is it compiling without the <code>#include&lt;ctime&gt;</code> and <code>#include&lt;cstdlib&gt;</code> for the calls to <code>time(0)</code> and <code>exit(100)</code>(which is absolutely useless there, I know)? Are they already included in <code>iostream</code>?</p>\n", "Title": "Compiling without (necessary?) #include", "CreationDate": "2015-09-19T16:24:18.593", "LastActivityDate": "2015-09-19T19:04:02.670", "CommentCount": "0", "LastEditDate": "2015-09-19T16:30:53.363", "PostTypeId": "1", "LastEditorUserId": "5273412", "Id": "32670531", "Score": "0", "OwnerUserId": "5273412", "Tags": "<c++><time><include><exit>", "AnswerCount": "2"}, "32670656": {"Id": "32670656", "PostTypeId": "2", "Body": "<p>The C++ standard, section 17.6.5.2 [res.on.headers], says:</p>\n<blockquote>\n<p id=\"so_32670531_32670656_0\">A C++ header may include other C++ headers.</p>\n</blockquote>\n<p>Which means an implementation is free to include other headers when you include one of them. From an implementor's point of view, that's just quite practical, of course.</p>\n<p>There are even headers which are <em>guaranteed</em> to include others. For example, <code>&lt;string&gt;</code> implies <code>&lt;initializer_list&gt;</code>.</p>\n<p>As for <code>&lt;iostream&gt;</code>, it implies <code>&lt;ios&gt;</code> (which itself implies <code>&lt;iosfwd&gt;</code>), <code>&lt;streambuf&gt;</code>,  <code>&lt;istream&gt;</code> and <code>&lt;ostream&gt;</code>. So there is no guarantee for <code>&lt;ctime&gt;</code> and <code>&lt;cstdlib&gt;</code>, and you should include them explicitly for better portability.</p>\n<p>To find out which headers are guaranteed to include others, you can either have a look yourself in the standard <a href=\"https://isocpp.org/std/the-standard\" rel=\"nofollow\">or in a draft</a> (see all the synopses starting in section 18), or just go to cppreference.com, for example <a href=\"http://en.cppreference.com/w/cpp/header/iostream\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/header/iostream</a> for <code>&lt;iostream&gt;</code>. It's quite a reliable online C++ reference.</p>\n<p>Or you just explicitly include <em>every</em> header you need. Which may be the best choice in the end.</p>\n", "LastEditorUserId": "3313064", "LastActivityDate": "2015-09-19T19:04:02.670", "Score": "2", "CreationDate": "2015-09-19T16:37:48.147", "ParentId": "32670531", "CommentCount": "5", "LastEditDate": "2015-09-19T19:04:02.670", "OwnerUserId": "3313064"}, "32670765": {"Id": "32670765", "PostTypeId": "2", "Body": "<p>Yes, <code>iostream</code> includes <code>cstdlib</code> (at least in your case; you should not rely on that dependency chain).\nYour compiler might have an option to list the dependencies, e.g. for the GNU C compiler, you can use the <code>-M</code> flag to list all includes.</p>\n", "LastActivityDate": "2015-09-19T16:50:27.093", "Score": "0", "CreationDate": "2015-09-19T16:50:27.093", "ParentId": "32670531", "CommentCount": "0", "OwnerUserId": "2179112"}});