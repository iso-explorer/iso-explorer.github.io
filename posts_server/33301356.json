post_cb({"33301356": {"CreationDate": "2015-10-23T11:35:29.253", "ViewCount": "81", "Id": "33301356", "AcceptedAnswerId": "33307244", "Score": "2", "Title": "Note in \u00a78.2[dcl.ambig.res]/2 in N4140", "LastEditorUserId": "1708801", "CommentCount": "2", "Body": "<p>In <strong>\u00a78.2[dcl.ambig.res]/2</strong> we have the following note (emphases is mine):  </p>\n<blockquote>\n<p id=\"so_33301356_33301356_0\">[ Note: A declaration can be explicitly disambiguated by a\n  nonfunction-style cast, by an = to indicate initialization or by\n  <strong>removing</strong> the redundant parentheses around the parameter name. \u2014end note ]</p>\n</blockquote>\n<p>Shouldn't it be <strong>inserting</strong> instead of <strong>removing</strong> above?</p>\n<p>Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct S{ int i; S(int j) : i(j) {} };\nfloat f = 1.0f;\n\nS s(int(f)); // function declaration\n\nint main()\n{\n    std::cout &lt;&lt; s.i &lt;&lt; '\\n';\n}\n</code></pre>\n<p>The code doesn't compile, as the compiler considers the declaration <code>S s(int(f));</code> as a function declaration. But if we do insert the parenthesis around the parameter name <code>f</code>, like <code>S s((int(f)));</code> the code compiles and prints 1.</p>\n", "Tags": "<c++><language-lawyer><c++14><disambiguation>", "LastEditDate": "2015-11-05T21:04:02.257", "LastActivityDate": "2015-11-05T21:04:02.257", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1042389"}, "33303128": {"LastActivityDate": "2015-10-24T03:23:31.213", "CommentCount": "1", "Body": "<p>I have to agree with Simple's comment, it is telling you that the parentheses around the parameter name is redundant. This is reinforced by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#340\" rel=\"nofollow\">defect report 340:  Unclear wording in disambiguation section </a> which was closed as Not A Defect and gives the following example:</p>\n<pre><code>  struct Point\n  {\n    Point(int){}\n  };\n  struct Lattice \n  {\n    Lattice(Point, Point, int){}\n  };\n  int main(void)\n  {\n    int a, b;\n    Lattice latt(Point(a), Point(b), 3);   /* Line X */\n  }\n</code></pre>\n<p>and says:</p>\n<blockquote>\n<p id=\"so_33301356_33303128_0\">The declaration of latt declares a function with a return value of the\n  type Lattice and taking three arguments. The type of <strong>the first two\n  arguments is Point and each of these arguments is followed by a\n  parameter name in redundant parentheses.</strong> The type of the third\n  argument can not be determined, because it is a literal. This will\n  result in a syntax error.</p>\n</blockquote>\n", "CreationDate": "2015-10-23T13:09:13.840", "LastEditDate": "2015-10-24T03:23:31.213", "ParentId": "33301356", "Id": "33303128", "LastEditorUserId": "1708801", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1708801"}, "33307244": {"LastActivityDate": "2015-10-23T16:28:24.947", "CommentCount": "2", "Body": "<p>I agree with <a href=\"https://stackoverflow.com/users/1042389/belloc\">Belloc</a>'s argument. The Note could have been written with the following change (in bold) to give it a more precise meaning, an in this case the word <code>remove</code> doesn't make sense.  </p>\n<p><strong>An object</strong> declaration can be explicitly disambiguated by a nonfunction-style cast, by an = to indicate initialization or by <strong><s>removing</s> inserting</strong> the redundant parentheses around the parameter name. \u2014end note</p>\n", "CreationDate": "2015-10-23T16:28:24.947", "LastEditDate": "2017-05-23T12:29:52.310", "ParentId": "33301356", "Id": "33307244", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "-1", "OwnerUserId": "4470935"}, "bq_ids": {"n4140": {"so_33301356_33301356_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 3201}}, "n3337": {"so_33301356_33301356_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 3075}}}});