post_cb({"24213159": {"CommentCount": "0", "AcceptedAnswerId": "24213223", "PostTypeId": "1", "ClosedDate": "2014-06-13T20:29:49.843", "LastEditorUserId": "-1", "CreationDate": "2014-06-13T20:11:43.587", "LastActivityDate": "2014-06-13T20:50:01.210", "LastEditDate": "2017-05-23T10:24:06.067", "ViewCount": "378", "FavoriteCount": "1", "Title": "How to initialize a pointer using an object with 0 value", "Id": "24213159", "Score": "5", "Body": "<p>In the book \"C++ Primer, 5th ed\", section 2.4.4, the entire section explains about \"constexpr\". Then an exercise as below is given in the book:</p>\n<p>Exercise 2.32: Is the following code legal or not? If not, how might you make it legal? </p>\n<pre><code>int null = 0, *p = null;\n</code></pre>\n<p>I understand that a quick way to fix it is to just change it to *p = nullptr, or NULL, or use reinterpret_cast. But I think the book's intention is to use something related to constexpr. So my question is, how would the above exercise be solved properly? (I think the book's intention is to init the value of p to 0, not the address of null.)</p>\n<p>I made below trials but both failed at compilation: </p>\n<p>trial 1, adding constexpr:</p>\n<pre><code>constexpr int null = 0; \nint *p = null;\n</code></pre>\n<p>trial 2, adding const;</p>\n<pre><code>const int null = 0;\nint *p = null;\n</code></pre>\n<p>(I made this trial based on the wordings in book chapter 4.11.2, Other implicit conversions: \"A constant integral value of 0 and the literal nullptr can be converted to any pointer type;\")</p>\n<p>Thank you in advance.\n(Reason being asked as a new question: this is asked as a new question in hope of finding a solution. there is another closely related question but no proposed solution was given <a href=\"https://stackoverflow.com/questions/13493353/is-this-constexpr-integer-not-a-null-pointer-constant\">Is this constexpr integer not a null pointer constant?</a>)</p>\n", "Tags": "<c++><c++11><constexpr>", "OwnerUserId": "3701346", "AnswerCount": "2"}, "24213223": {"ParentId": "24213159", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The actual wording from the standard (4.10 <strong>[conv.ptr]</strong>) is:</p>\n<blockquote>\n<p id=\"so_24213159_24213223_0\">1 - A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>. A null pointer constant can be converted to a pointer type; the result is the <em>null pointer value</em> of that type [...]</p>\n</blockquote>\n<p>The problem with <code>null</code> is that although it is an integral constant expression with value zero, it is an <strong>lvalue</strong> (that is, it is the name of object) and so <em>not</em> a <strong>prvalue</strong>.</p>\n<p>Some ways to obtain an integer constant prvalue:</p>\n<pre><code>constexpr int null = 0; \nint *p = +null;\n</code></pre>\n<p>By prefixing <code>null</code> with the unary arithmetic operator <code>+</code> we get a <strong>prvalue</strong>.</p>\n<pre><code>const int null = 0;\nint *p = static_cast&lt;int&gt;(null);\n</code></pre>\n<p><code>static_cast</code> to a non-reference type yields a <strong>prvalue</strong>.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2014-06-13T20:25:22.410", "Id": "24213223", "Score": "4", "CreationDate": "2014-06-13T20:17:35.717", "LastActivityDate": "2014-06-13T20:25:22.410"}, "24213186": {"ParentId": "24213159", "PostTypeId": "2", "CommentCount": "11", "Body": "<blockquote>\n<p id=\"so_24213159_24213186_0\">Is the following code legal or not? If not, how might you make it legal?  </p>\n</blockquote>\n<p>No. Its not legal. Since <code>null</code> is <code>int</code> type <code>&amp;</code> is needed to initialize <code>p</code>.  </p>\n<pre><code>int null = 0, \nint *p = &amp;null;   \n</code></pre>\n<p>Otherwise your compiler should raise a warning:  </p>\n<pre><code>warning: invalid conversion from 'int' to 'int*'\n</code></pre>\n<p>If you want to initialize <code>p</code> to address <code>0</code> the you can do as</p>\n<pre><code>int null = 0, *p = 0;  \n</code></pre>\n<p>Now it is perfectly legal because <code>0</code> can be used in place of <code>NULL</code>.  </p>\n<p><a href=\"http://www.stroustrup.com/bs_faq2.html#null\" rel=\"nofollow\">c++-faq</a>:   </p>\n<blockquote>\n<p id=\"so_24213159_24213186_1\">In C++, the definition of <code>NULL</code> is <code>0</code>, so there is only an aesthetic difference. I prefer to avoid macros, so I use <code>0</code>. Another problem with <code>NULL</code> is that people sometimes mistakenly believe that it is different from <code>0</code> and/or not an integer. In pre-standard code, NULL was/is sometimes defined to something unsuitable and therefore had/has to be avoided. That's less common these days.  </p>\n<p id=\"so_24213159_24213186_2\">If you have to name the null pointer, call it <code>nullptr</code>; that's what it's called in C++11. Then, \"<code>nullptr</code>\" will be a keyword.  </p>\n</blockquote>\n", "OwnerUserId": "2455888", "LastEditorUserId": "2455888", "LastEditDate": "2014-06-13T20:50:01.210", "Id": "24213186", "Score": "1", "CreationDate": "2014-06-13T20:14:13.340", "LastActivityDate": "2014-06-13T20:50:01.210"}, "bq_ids": {"n4140": {"so_24213159_24213223_0": {"section_id": 39, "quality": 0.6666666666666666, "length": 18}}, "n3337": {"so_24213159_24213223_0": {"section_id": 36, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_24213159_24213223_0": {"section_id": 39, "quality": 0.6666666666666666, "length": 18}}}});