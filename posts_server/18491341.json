post_cb({"bq_ids": {"n4140": {"so_18491341_18491519_1": {"length": 41, "quality": 0.9534883720930233, "section_id": 5929}}, "n3337": {"so_18491341_18491519_1": {"length": 41, "quality": 0.9534883720930233, "section_id": 5701}}, "n4659": {"so_18491341_18491519_1": {"length": 40, "quality": 0.9302325581395349, "section_id": 7414}}}, "18491519": {"Id": "18491519", "PostTypeId": "2", "Body": "<p>No they are not friends.</p>\n<p>But local classes have the same access to the names outside the function as the function itself.</p>\n<p>The standard says :</p>\n<blockquote>\n<p id=\"so_18491341_18491519_0\"><strong>9.8 Local class declarations [class.local]</strong></p>\n<p id=\"so_18491341_18491519_1\">A class can be declared within a function definition; such a class is called a local class. The name of a local class is local to its enclosing scope. <strong>The local class is in the scope of the enclosing scope, and has the same access to names outside the function as does the enclosing function.</strong> Declarations in a local class shall not odr-use (3.2) a variable with automatic storage duration from an enclosing scope.</p>\n</blockquote>\n<p>The big difference to take in count is that your <em>local class</em> will only be accessible inside the function.</p>\n<p>But after that :</p>\n<ul>\n<li>A friend of a class is a function or class that is given permission to use the private and protected member names from the class.</li>\n<li>The local class is in the scope of the enclosing scope, and has the same access to names outside the function as does the enclosing function. That is, it can access to protected and private members of the class the function belongs.</li>\n</ul>\n", "LastEditorUserId": "1394283", "LastActivityDate": "2013-08-28T15:12:48.533", "Score": "13", "CreationDate": "2013-08-28T15:00:09.850", "ParentId": "18491341", "CommentCount": "0", "OwnerUserId": "1394283", "LastEditDate": "2013-08-28T15:12:48.533"}, "18491483": {"Id": "18491483", "PostTypeId": "2", "Body": "<p>This compiles in Clang:</p>\n<pre><code>class A {\n  typedef int Int;\n  void fn();\n};\n\nvoid A::fn() {\n  class B {\n    Int i;\n  };\n}\n</code></pre>\n<p>The inner class has access to A's private members, but not because it is a friend, but because it is considered a member. Since members of a class have access to private members, this includes inner classes as well as local classes of member functions.</p>\n<p>See [class.access]p2.</p>\n", "LastActivityDate": "2013-08-28T14:58:40.380", "CommentCount": "1", "CreationDate": "2013-08-28T14:58:40.380", "ParentId": "18491341", "Score": "3", "OwnerUserId": "8922"}, "18491458": {"Id": "18491458", "PostTypeId": "2", "Body": "<p>No they are not friends. But does it matter?<br>\nNot really! consider these facts:     </br></p>\n<ol>\n<li>Within the member function you will always have access to the members of the class to which the function belongs. </li>\n<li>You cannot access the local class anywhere beyond the function.</li>\n</ol>\n<p>So it hardly matters if they are friends or not. You are always going to be referring the outer class members inside its member function.</p>\n<p><strong><a href=\"http://ideone.com/XUZYMR\">Online Sample:</a></strong></p>\n<pre><code>class A\n{\n    int i;\n    void doSomething()\n    {\n        class B{public: int ii;};\n        B obj;\n        obj.ii = i;\n    }\n};\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "452307", "LastActivityDate": "2013-08-28T15:03:44.790", "Score": "6", "CreationDate": "2013-08-28T14:57:42.017", "ParentId": "18491341", "CommentCount": "4", "OwnerUserId": "452307", "LastEditDate": "2013-08-28T15:03:44.790"}, "18491341": {"ViewCount": "323", "Body": "<p>I have an outer class <code>A</code>. It has a method <code>A::fun</code>. In this method, it has a local or inner class <code>B</code>. My question is: Is <code>B</code> a friend of <code>A</code>? </p>\n<p>I think it is not. Is it right? If so, I think let class <code>B</code> a friend of <code>A</code> is very beneficial since <code>B</code> can access to <code>A</code>'s private and protected members. And moreover, since<code>B</code> is local in a methods, it is not accessible by others and thus safe as a friend of <code>A</code>. How to work around to let <code>B</code> access to <code>A</code>'s private and protected members?</p>\n", "AcceptedAnswerId": "18491519", "Title": "Is a local class in a method of a class a friend of this class?", "CreationDate": "2013-08-28T14:52:15.897", "Id": "18491341", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-08-28T15:02:17.073", "LastEditorUserId": "1899020", "LastActivityDate": "2013-08-28T15:12:48.533", "Score": "9", "OwnerUserId": "1899020", "Tags": "<c++><class><friend>", "AnswerCount": "3"}});