post_cb({"bq_ids": {"n4140": {"so_34885025_34885535_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 233}, "so_34885025_34885535_1": {"length": 42, "quality": 0.9767441860465116, "section_id": 234}}, "n3337": {"so_34885025_34885535_0": {"length": 36, "quality": 0.9473684210526315, "section_id": 226}, "so_34885025_34885535_1": {"length": 42, "quality": 0.9767441860465116, "section_id": 227}}, "n4659": {"so_34885025_34885535_0": {"length": 36, "quality": 0.9473684210526315, "section_id": 243}, "so_34885025_34885535_1": {"length": 41, "quality": 0.9534883720930233, "section_id": 244}}}, "34885025": {"ViewCount": "79", "Body": "<p>So let's take a example :</p>\n<pre><code>template&lt;typename T&gt; struct foo\n{\n    template&lt;typename X&gt; void bar(void (T::*)()) {}\n    template&lt;typename X&gt; void bar(X*) {}\n    template&lt;typename X&gt; void bar(T**) {}\n};\n\nint main() { foo&lt;int&gt; p; }\n</code></pre>\n<p>Will above instantiation of <code>class foo&lt;int&gt;</code> instantiate member template <strong>declaration</strong> <code>bar</code> even though member itself is template? Any reference from standard will be much appreciated.</p>\n", "AcceptedAnswerId": "34885535", "Title": "When a class template is instantiated, is a member template declaration also instantiated?", "CreationDate": "2016-01-19T19:08:05.770", "Id": "34885025", "CommentCount": "4", "LastEditDate": "2016-01-30T11:42:52.270", "PostTypeId": "1", "LastEditorUserId": "4882052", "LastActivityDate": "2016-01-30T11:42:52.270", "Score": "2", "OwnerUserId": "4882052", "Tags": "<c++><templates><instantiation>", "AnswerCount": "1"}, "34885535": {"Id": "34885535", "PostTypeId": "2", "Body": "<p>The answer is yes.</p>\n<p>Citation from C++11 standard, [temp.inst] [14.7.1]:</p>\n<blockquote id=\"so_34885025_34885535_0\">\n<ol>\n<li>...<br>\n  The implicit instantiation of a class template specialization causes the implicit instantiation of the\n  declarations, but not of the definitions, default arguments, or exception-specifications of the class member\n  functions, member classes, scoped member enumerations, static data members and member templates; and\n  it causes the implicit instantiation of the definitions of unscoped member enumerations and member anonymous unions.</br></li>\n</ol>\n</blockquote>\n<p>The second part has some more info about exactly when the member template <em>definitions</em> are instantiated. (It generally happens implicitly, when they are used:)</p>\n<blockquote id=\"so_34885025_34885535_1\">\n<ol start=\"2\">\n<li>Unless a member of a class template or a member template has been explicitly instantiated or explicitly\n  specialized, the specialization of the member is implicitly instantiated when the specialization is referenced in a context that requires the member definition to exist; in particular, the initialization (and any associated\n  side-effects) of a static data member does not occur unless the static data member is itself used in a way\n  that requires the definition of the static data member to exist.</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "3598119", "LastActivityDate": "2016-01-19T20:04:48.203", "Score": "1", "CreationDate": "2016-01-19T19:39:16.680", "ParentId": "34885025", "CommentCount": "0", "OwnerUserId": "3598119", "LastEditDate": "2016-01-19T20:04:48.203"}});