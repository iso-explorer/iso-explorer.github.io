post_cb({"40223929": {"ParentId": "40223413", "CommentCount": "1", "Body": "<p>This is clang bug. From [expr.prim.lambda]:</p>\n<blockquote>\n<p id=\"so_40223413_40223929_0\">The closure type associated with a <em>lambda-expression</em> has no default constructor and a <strong>deleted copy assignment\n  operator</strong>. It has a defaulted copy constructor and a defaulted move constructor (12.8).</p>\n</blockquote>\n<p>So the type shouldn't be move assignable at all, much less nothrow move assignable. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "40223929", "Score": "4", "CreationDate": "2016-10-24T17:14:51.737", "LastActivityDate": "2016-10-24T17:14:51.737"}, "40223413": {"CommentCount": "1", "ViewCount": "60", "CreationDate": "2016-10-24T16:42:13.733", "LastActivityDate": "2016-10-24T17:14:51.737", "Title": "Are lambda functions nothrow_move_assignable?", "AcceptedAnswerId": "40223929", "PostTypeId": "1", "Id": "40223413", "Score": "4", "Body": "<p>clang-cl (4.0.0-trunk) seems to think yes while vc2015 (update3) thinks no.</p>\n<p>Is this implementation defined or the standard dictates how lambda functions should be implemented in terms or nothrow and move assignable?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;type_traits&gt;\n#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nvoid test_nothrow_move_assignable(T&amp;&amp;) {\n  std::cout &lt;&lt; std::boolalpha\n    &lt;&lt; std::is_nothrow_move_assignable&lt;T&gt;::value\n    &lt;&lt; \"\\n\";\n}\n\nint main() {\n  test_nothrow_move_assignable([]{});\n  return 0;\n}\n\n// $ clang-cl.exe scratch.cpp\n// $ scratch.exe\n// true\n\n// $ cl /nologo /EHsc scratch.cpp\n// scratch.cpp\n// $ scratch.exe\n// false\n</code></pre>\n", "Tags": "<c++><lambda><typetraits>", "OwnerUserId": "448706", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40223413_40223929_0": {"section_id": 5979, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_40223413_40223929_0": {"section_id": 5747, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_40223413_40223929_0": {"section_id": 7461, "quality": 0.8888888888888888, "length": 16}}}});