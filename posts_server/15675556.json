post_cb({"15675997": {"Id": "15675997", "PostTypeId": "2", "Body": "<p>ISO/IEC 14882:2003 states the structure of a for loop in section 6.5.3 paragraph 1:</p>\n<pre><code>for ( for-init-statement condition_opt ; expression_opt ) statement\n</code></pre>\n<p>And in paragraph 2 it says:</p>\n<blockquote>\n<p id=\"so_15675556_15675997_0\">Either or both of the condition and the expression can be omitted. A\n  missing condition makes the implied while clause equivalent to\n  while(true).</p>\n</blockquote>\n", "LastActivityDate": "2013-03-28T06:59:30.863", "CommentCount": "1", "CreationDate": "2013-03-28T06:59:30.863", "ParentId": "15675556", "Score": "2", "OwnerUserId": "227755"}, "15675556": {"ViewCount": "197", "Body": "<p>I just wanted to know the reasoning for the line <code>for(;;)</code> in the following code.</p>\n<pre><code>//\n// blocking_tcp_echo_server.cpp\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// Copyright (c) 2003-2012 Christopher M. Kohlhoff (chris at kohlhoff dot com)\n//\n// Distributed under the Boost Software License, Version 1.0. (See accompanying\n// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n//\n\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;boost/bind.hpp&gt;\n#include &lt;boost/smart_ptr.hpp&gt;\n#include &lt;boost/asio.hpp&gt;\n#include &lt;boost/thread/thread.hpp&gt;\n\nusing boost::asio::ip::tcp;\n\nconst int max_length = 1024;\n\ntypedef boost::shared_ptr&lt;tcp::socket&gt; socket_ptr;\n\nvoid session(socket_ptr sock)\n{\n  try\n  {\n    for (;;)\n    {\n      char data[max_length];\n\n      boost::system::error_code error;\n      size_t length = sock-&gt;read_some(boost::asio::buffer(data), error);\n      if (error == boost::asio::error::eof)\n        break; // Connection closed cleanly by peer.\n      else if (error)\n        throw boost::system::system_error(error); // Some other error.\n\n      boost::asio::write(*sock, boost::asio::buffer(data, length));\n    }\n  }\n  catch (std::exception&amp; e)\n  {\n    std::cerr &lt;&lt; \"Exception in thread: \" &lt;&lt; e.what() &lt;&lt; \"\\n\";\n  }\n}\n\nvoid server(boost::asio::io_service&amp; io_service, short port)\n{\n  tcp::acceptor a(io_service, tcp::endpoint(tcp::v4(), port));\n  for (;;)\n  {\n    socket_ptr sock(new tcp::socket(io_service));\n    a.accept(*sock);\n    boost::thread t(boost::bind(session, sock));\n  }\n}\n\nint main(int argc, char* argv[])\n{\n  try\n  {\n    if (argc != 2)\n    {\n      std::cerr &lt;&lt; \"Usage: blocking_tcp_echo_server &lt;port&gt;\\n\";\n      return 1;\n    }\n\n    boost::asio::io_service io_service;\n\n    using namespace std; // For atoi.\n    server(io_service, atoi(argv[1]));\n  }\n  catch (std::exception&amp; e)\n  {\n    std::cerr &lt;&lt; \"Exception: \" &lt;&lt; e.what() &lt;&lt; \"\\n\";\n  }\n\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "15675836", "Title": "C++: purpose of for(;;)?", "CreationDate": "2013-03-28T06:29:02.127", "Id": "15675556", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2013-03-28T09:00:46.167", "LastActivityDate": "2013-03-28T06:59:30.863", "Score": "0", "OwnerUserId": "513034", "Tags": "<c++><for-loop><boost-asio>", "AnswerCount": "5"}, "15675584": {"Id": "15675584", "PostTypeId": "2", "Body": "<p>Loop forever , so you need to have <code>break</code> or <code>return</code> to exit the loop.</p>\n", "LastActivityDate": "2013-03-28T06:30:49.540", "CommentCount": "0", "CreationDate": "2013-03-28T06:30:49.540", "ParentId": "15675556", "Score": "5", "OwnerUserId": "392315"}, "15675572": {"Id": "15675572", "PostTypeId": "2", "Body": "<p>It's like a <code>for loop</code> with nothing for all 3 expressions. It is equivalent to:</p>\n<pre><code>while(true) { ... }\n</code></pre>\n<blockquote>\n<p id=\"so_15675556_15675572_0\">I just wanted to know the reasoning</p>\n</blockquote>\n<p>In this case, the code author wanted a specified block of code to run \"forever\" until he told it not to run (by explicitly exiting using <code>break</code>, <code>return</code>, <code>throw</code>, etc.)</p>\n", "LastActivityDate": "2013-03-28T06:30:08.083", "CommentCount": "0", "CreationDate": "2013-03-28T06:30:08.083", "ParentId": "15675556", "Score": "6", "OwnerUserId": "1368582"}, "bq_ids": {"n4140": {"so_15675556_15675997_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3904}}, "n3337": {"so_15675556_15675997_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3764}}, "n4659": {"so_15675556_15675997_0": {"length": 14, "quality": 1.0, "section_id": 4790}}}, "15675836": {"Id": "15675836", "PostTypeId": "2", "Body": "<p>The <code>for</code> loop in question,</p>\n<pre><code>for (;;)\n{\n  char data[max_length];\n  boost::system::error_code error;\n  size_t length = sock-&gt;read_some(boost::asio::buffer(data), error);\n  if (error == boost::asio::error::eof)\n    break; // Connection closed cleanly by peer.\n  else if (error)\n    throw boost::system::system_error(error); // Some other error.\n  boost::asio::write(*sock, boost::asio::buffer(data, length));\n}\n</code></pre>\n<p>implements a loop with normal exit in the middle.</p>\n<p>This is known as a <strong>loop-and-a-half</strong>.</p>\n<p>Using <code>for(;;)</code> instead of <code>while(true)</code> one avoids silly-warnings with a least one compiler, namely Visual C++. It's also more idiomatic. If the <code>while</code> loop was meant to play such a role, then it would have a default condition (as the <code>for</code> loop has).</p>\n<p>One way to rewrite such a loop to avoid the exit in the middle is to make the second part of the loop body conditional, like this:</p>\n<pre><code>for ( bool finished = false; !finished;)\n{\n  char data[max_length];\n  boost::system::error_code error;\n  size_t length = sock-&gt;read_some(boost::asio::buffer(data), error);\n  if (error == boost::asio::error::eof)\n    finished = true; // Connection closed cleanly by peer.\n  else\n  {\n    if (error)\n      throw boost::system::system_error(error); // Some other error.\n    boost::asio::write(*sock, boost::asio::buffer(data, length));\n  }\n}\n</code></pre>\n<p>Another way to express it, but with rather ungood code redundancy, is to repeat the upper half of the loop before the loop, half <em>unrolling</em> the loop, like this:</p>\n<pre><code>char data[max_length];\nboost::system::error_code error;\nsize_t length = sock-&gt;read_some(boost::asio::buffer(data), error);\nfor (; error != boost::asio::error::eof; )\n{\n  if (error)\n    throw boost::system::system_error(error); // Some other error.\n\n  boost::asio::write(*sock, boost::asio::buffer(data, length));\n  size_t length = sock-&gt;read_some(boost::asio::buffer(data), error);\n}\n</code></pre>\n<p>With respect to expressing the loop, I prefer the code as originally expressed, with exit in the middle.</p>\n", "LastActivityDate": "2013-03-28T06:48:03.717", "CommentCount": "1", "CreationDate": "2013-03-28T06:48:03.717", "ParentId": "15675556", "Score": "4", "OwnerUserId": "464581"}, "15675662": {"Id": "15675662", "PostTypeId": "2", "Body": "<p>The purpose of <code>for (;;)</code> it to run forever. It's equivalent to <code>while (true)</code>. It will need one of the following condition to break:</p>\n<ul>\n<li>the use of <code>break</code>, specifically intended to to break a loop's execution</li>\n<li>the use of <code>return</code> in a function context</li>\n<li>the use of <code>throw</code> to throw an exception</li>\n<li>the use of <code>goto</code></li>\n</ul>\n", "LastEditorUserId": "493122", "LastActivityDate": "2013-03-28T06:42:13.300", "Score": "4", "CreationDate": "2013-03-28T06:36:15.710", "ParentId": "15675556", "CommentCount": "3", "OwnerUserId": "493122", "LastEditDate": "2013-03-28T06:42:13.300"}});