post_cb({"6982219": {"ParentId": "6982158", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It is guaranteed that the construction will be attempted as long as it fails.</p>\n<p>It's caused by what is stated in C++03 \u00a76.7/4:</p>\n<blockquote>\n<p id=\"so_6982158_6982219_0\">... Otherwise such an object is initialized the first time control passes through its declaration; such an object is considered initialized upon the completion of its initialization. If the initialization exits by throwing an exception, the initialization is not complete, so it will be tried again the next time control enters the declaration. If control re-enters the declaration (recursively) while the object is being initialized, the behavior is undefined. [Example:</p>\n</blockquote>\n<pre><code>int foo(int i)\n{\n  static int s = foo(2*i);    // recursive call \u2013 undefined\n  return i+1;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_6982158_6982219_1\">--end example]</p>\n</blockquote>\n<p>I will note that gcc throws an exception in case of recursive initialization attempt, see <a href=\"https://stackoverflow.com/questions/6967179/whats-a-recursive-init-error-exception/6967246#6967246\">litb's related question</a> as for my source.</p>\n", "OwnerUserId": "147192", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:26:07.920", "Id": "6982219", "Score": "14", "CreationDate": "2011-08-08T12:36:28.113", "LastActivityDate": "2011-08-08T12:36:28.113"}, "6982158": {"CommentCount": "0", "AcceptedAnswerId": "6982219", "PostTypeId": "1", "LastEditorUserId": "597607", "CreationDate": "2011-08-08T12:32:00.100", "LastActivityDate": "2011-08-08T12:55:38.673", "LastEditDate": "2011-08-08T12:55:38.673", "ViewCount": "623", "FavoriteCount": "1", "Title": "Function-scope static object's constructor throws an exception", "Id": "6982158", "Score": "7", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X{\n   X(){\n      throw 0;\n   }\n};\n\nvoid f(){\n   static X x;\n}\n\nint main(){\n   try {\n      f();\n   }\n   catch(int)   {\n      std::cout &lt;&lt; \"Caught first time\" &lt;&lt; std::endl;\n   }\n   try {\n      f();\n   }\n   catch(int) {\n      std::cout &lt;&lt; \"Caught second time\" &lt;&lt; std::endl;\n   }\n}\n</code></pre>\n<p>The output of this program is </p>\n<blockquote>\n<p id=\"so_6982158_6982158_0\">Caught first time <br>\n  Caught second time</br></p>\n</blockquote>\n<p>So, is it guaranteed by the standard that the constructor of a static object is going to be called over and over again until it's successfully completed? I can't find the place in the standard where it is mentioned, so a quote or a reference to chapter and verse are very much welcome.</p>\n<p>Or is there any undefined behavior involved in my example?</p>\n", "Tags": "<c++><exception><static><constructor>", "OwnerUserId": "469935", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_6982158_6982219_0": {"section_id": 3919, "quality": 0.9069767441860465, "length": 39}}, "n3337": {"so_6982158_6982219_0": {"section_id": 3779, "quality": 0.9069767441860465, "length": 39}}, "n4659": {"so_6982158_6982219_0": {"section_id": 4805, "quality": 0.8372093023255814, "length": 36}}}});