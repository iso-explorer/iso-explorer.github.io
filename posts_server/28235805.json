post_cb({"bq_ids": {"n4140": {"so_28235805_28235963_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}, "so_28235805_28236231_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6124}, "so_28235805_28235872_0": {"length": 6, "quality": 1.0, "section_id": 5943}}, "n3337": {"so_28235805_28235963_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 18}, "so_28235805_28236231_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5888}, "so_28235805_28235872_0": {"length": 6, "quality": 1.0, "section_id": 5714}}, "n4659": {"so_28235805_28235963_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}, "so_28235805_28236231_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7621}, "so_28235805_28235872_0": {"length": 6, "quality": 1.0, "section_id": 7428}}}, "28235963": {"Id": "28235963", "PostTypeId": "2", "Body": "<p>This is not casting but standard conversion as C++ standard n3337 states in</p>\n<blockquote>\n<p id=\"so_28235805_28235963_0\"><strong>\u00a7</strong> 4 Standard conversions</p>\n<p id=\"so_28235805_28235963_1\">4.5 Integer promotions</p>\n<p id=\"so_28235805_28235963_2\">1) A prvalue of an integer type other than bool, char16_t, char32_t,\n  or wchar_t whose integer conversion rank (4.13) is less than the rank\n  of int can be converted to a prvalue of type int if int can represent\n  all the values of the source type; otherwise, the source prvalue can\n  be converted to a prvalue of type unsigned int.</p>\n</blockquote>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2015-02-02T11:06:50.823", "Score": "1", "CreationDate": "2015-01-30T12:29:08.117", "ParentId": "28235805", "CommentCount": "2", "OwnerUserId": "1141471", "LastEditDate": "2015-02-02T11:06:50.823"}, "28235805": {"ViewCount": "6451", "Body": "<p>I'm studying C++ by two months using the book : Programming principles and practice using C++, and now I wanted to clarify some doubts about my casting. When I am performing an implicit conversion, for example : </p>\n<pre><code>char c = 'a'; \nint b = c; \n</code></pre>\n<p>Here the value of c is implicitly converted to int type without using any explicit operator. Is this considered casting ? or its considered casting just when I have to performe an explicit conversion like in : </p>\n<pre><code>int a = 10; \nint b = 5.5; \ndouble sum = double (a) / b; \n</code></pre>\n<p>I know it may sound a stupid question but I just wanted to be sure about conversions. </p>\n", "AcceptedAnswerId": "28235850", "Title": "Type-casting in C++", "CreationDate": "2015-01-30T12:18:46.840", "Id": "28235805", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-08-19T05:47:46.173", "Score": "17", "OwnerUserId": "4205820", "Tags": "<c++><casting>", "AnswerCount": "5"}, "28235872": {"Id": "28235872", "PostTypeId": "2", "Body": "<p>Widening (value-preserving) conversions \u2014 conversions whose results upon conversion back to its original type would give the original value \u2014 are generally done implicitly. This</p>\n<pre><code>char c = 'x'; \nint b = c;\n</code></pre>\n<p>is an implicit conversion. Explicit conversions are called <em>casts</em>.</p>\n<pre><code>int a = 1;\ndouble sum = static_cast&lt;double&gt;(a) / b;\n</code></pre>\n<p>Here casting <code>a</code> into a <code>double</code> is explicitly done as both <code>a</code> and <code>b</code> are <code>int</code>s; without the cast no conversion would happen thereby leading to an integer division while a floating-point division may be preferred as it may be more precise. Casting one of the operands of <code>/</code> to <code>double</code> which will lead to the other getting implicitly converted to a <code>double</code> too, and thus the division (and its result) would now be floating-point.</p>\n<p>Had you been doing just <code>double x = a;</code>, you can do away with the explicit conversion since an <code>int</code> is implicitly converted to a <code>double</code> (<a href=\"http://coliru.stacked-crooked.com/a/cffe1b2ad84ea6e5\" rel=\"nofollow noreferrer\">live example</a>). From the C++11 standard, N3337 draft</p>\n<blockquote>\n<p id=\"so_28235805_28235872_0\">\u2014 if either operand is double, the other shall be converted to double.</p>\n</blockquote>\n<p>See <a href=\"https://stackoverflow.com/a/23873536/183120\">here</a> for a complete list of implicit conversions performed.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-19T05:47:46.173", "Score": "11", "CreationDate": "2015-01-30T12:23:21.610", "ParentId": "28235805", "CommentCount": "7", "OwnerUserId": "183120", "LastEditDate": "2017-05-23T12:26:31.280"}, "28236231": {"Id": "28236231", "PostTypeId": "2", "Body": "<p>As mentioned in other answers, casts are written explicitly. The standard refers to them as explicit type conversions; [expr.cast]/2:</p>\n<blockquote>\n<p id=\"so_28235805_28236231_0\">An explicit type conversion can be expressed using functional notation\n  (5.2.3), a type conversion operator  (<code>dynamic_cast</code>, <code>static_cast</code>,\n  <code>reinterpret_cast</code>, <code>const_cast</code>), or the <em>cast notation</em>.</p>\n</blockquote>\n<p>There are three kinds of expressions that we call casts, mentioned in the above quote:</p>\n<ul>\n<li><p><code>(T)expr</code>. In the standard this form is called the <em>cast notation</em> of explicit type conversion and is also commonly referred to as a C-style cast (as it is the syntax used in and inherited from C). <code>(double) a</code> is an example.</p></li>\n<li><p><code>T(expr)</code>. This is the <em>functional notation</em> (also called function-style cast). Often used for creating temporaries of class type, e.g. <code>std::string(\"Hello World\")</code>. <code>double(a)</code> is also a function-style cast.</p></li>\n<li><p>And last but not least, the so-called <em>type conversion operators</em> <code>static_cast&lt;T&gt;(expr),</code> <code>reinterpret_cast</code>, <code>const_cast</code> and <code>dynamic_cast</code>. These are the most explicit notations and are individually more restricted.</p></li>\n</ul>\n<p>The use of all these is covered in <a href=\"https://stackoverflow.com/q/332030/3647361\"><strong>this Q/A</strong></a>.</p>\n<p>Every other conversion performed is not called a cast.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-30T16:46:20.603", "Score": "18", "CreationDate": "2015-01-30T12:43:44.197", "ParentId": "28235805", "CommentCount": "5", "OwnerUserId": "3647361", "LastEditDate": "2017-05-23T10:29:11.443"}, "28236034": {"Id": "28236034", "PostTypeId": "2", "Body": "<p><strong>Casting</strong> is <em>explicit conversion of variables in an expression</em>. Like this</p>\n<pre><code>int a = 10; \nint b = 5.5; \ndouble sum = double (a) / b; \n</code></pre>\n<p>Whereas this</p>\n<pre><code>char c = 'a'; \nint b = c;\n</code></pre>\n<p>.. is an example of <strong>implicit type conversion</strong>(or coercion sometimes) <em>where datatypes are promoted from one type to another implicitly</em> [like char to int]</p>\n<p>Have a look at <a href=\"http://www.cplusplus.com/doc/tutorial/typecasting/\" rel=\"nofollow\">this</a> article for more insight.</p>\n<p>Cheers!</p>\n", "LastActivityDate": "2015-01-30T12:33:20.493", "CommentCount": "0", "CreationDate": "2015-01-30T12:33:20.493", "ParentId": "28235805", "Score": "2", "OwnerUserId": "1379667"}, "28235850": {"Id": "28235850", "PostTypeId": "2", "Body": "<p>\"Casting\" is only when you perform an <em>explicit</em> conversion.</p>\n<p>That being said, you will find the term misused all across the internet and in various teams!</p>\n", "LastActivityDate": "2015-01-30T12:21:54.830", "CommentCount": "18", "CreationDate": "2015-01-30T12:21:54.830", "ParentId": "28235805", "Score": "15", "OwnerUserId": "560648"}});