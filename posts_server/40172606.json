post_cb({"40172606": {"ViewCount": "3689", "Body": "<p>I'm having a disagreement with some co-workers over the following code:</p>\n<pre><code>int foo ( int a, int b )\n{\n    return b &gt; 0 ? a / b : a;\n}\n</code></pre>\n<p>Does this code exhibit undefined behavior?</p>\n<p>EDIT: The disagreement started from what appears to be a bug in an overly-eager optimizing compiler, where the <code>b &gt; 0</code> check was optimized out. </p>\n", "AcceptedAnswerId": "40172686", "Title": "Is unevaluated division by 0 undefined behavior?", "CreationDate": "2016-10-21T09:09:28.053", "Id": "40172606", "CommentCount": "19", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-10-26T17:54:30.577", "LastEditorUserId": "673730", "LastActivityDate": "2016-11-20T23:45:08.930", "Score": "62", "OwnerUserId": "673730", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "4"}, "40179264": {"Id": "40179264", "PostTypeId": "2", "Body": "<p>There is no way of dividing with zero in the example code. When the processor executes <code>a / b</code>, it has already checked that <code>b &gt; 0</code>, therefore <code>b</code> is non-zero.</p>\n<p>It should be noted that if <code>a == INT_MIN</code> and <code>b == -1</code>, then <code>a/b</code> is undefined behaviour too. But this is prevented anyway because the condition evaluates to <code>false</code> in that case.</p>\n<p>Although I am not really sure you meant <code>return b != 0 ? a / b : a;</code> and not <code>return b &gt; 0 ? a / b : a;</code> If b is less than zero, the division is still valid, unless it is the condition described above.</p>\n", "LastEditorUserId": "7014281", "LastActivityDate": "2016-10-21T14:56:10.313", "Score": "15", "CreationDate": "2016-10-21T14:29:46.660", "ParentId": "40172606", "CommentCount": "2", "LastEditDate": "2016-10-21T14:56:10.313", "OwnerUserId": "7014281"}, "40184994": {"Id": "40184994", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_40172606_40184994_0\">Does this code exhibit undefined behavior?  </p>\n</blockquote>\n<p>No. It doesn't. The expression   </p>\n<pre><code>return b &gt; 0 ? a / b : a;  \n</code></pre>\n<p>is equivalent to   </p>\n<pre><code>if(b &gt; 0)\n    return a/b;     // this will be executed only when b is greater than 0\nelse\n    return a;  \n</code></pre>\n<p>Division only performed when <code>b</code> is greater than <code>0</code>. </p>\n", "LastActivityDate": "2016-10-21T20:31:28.520", "Score": "9", "CreationDate": "2016-10-21T20:31:28.520", "ParentId": "40172606", "CommentCount": "4", "OwnerUserId": "2455888"}, "40269194": {"Id": "40269194", "PostTypeId": "2", "Body": "<p>If this were UB then so would</p>\n<pre><code>if(a != null &amp;&amp; *a == 42)\n{\n .....\n}\n</code></pre>\n<p>And the sequencing of ifs , ands and ors is clearly designed to specifically allow this type of construct. I cant imagine your colleagues would argue with that</p>\n", "LastActivityDate": "2016-10-26T18:02:12.940", "Score": "3", "CreationDate": "2016-10-26T18:02:12.940", "ParentId": "40172606", "CommentCount": "0", "OwnerUserId": "173397"}, "40172686": {"Id": "40172686", "PostTypeId": "2", "Body": "<p>No.</p>\n<hr>\n<p>Quotes from N4140:</p>\n<blockquote>\n<p id=\"so_40172606_40172686_0\">\u00a75.16 [expr.cond]/1</p>\n<p id=\"so_40172606_40172686_1\">Conditional expressions group right-to-left. The first expression is\n  contextually converted to bool. It is evaluated and if it is true, the\n  result of the conditional expression is the value of the second\n  expression, otherwise that of the third expression. <em>Only one of the</em>\n<em>second and third expressions is evaluated</em>.</p>\n</blockquote>\n<p>Further:</p>\n<blockquote>\n<p id=\"so_40172606_40172686_2\">\u00a75 [expr]/4</p>\n<p id=\"so_40172606_40172686_3\">If during the evaluation of an expression, the result is not\n  mathematically defined or not in the range of representable values for\n  its type, the behavior is undefined.</p>\n</blockquote>\n<p>This clearly does not happen here. The same paragraph mentions division by zero explicitly in a note, and, although it is non-normative, it's making it even more clear that its pertinent to this situation:</p>\n<blockquote>\n<p id=\"so_40172606_40172686_4\">[ Note: most existing implementations of C++ ignore integer overflows.\n  Treatment of division by zero, forming a remainder using a zero\n  divisor, and all floating point exceptions vary among machines, and is\n  usually adjustable by a library function. \u2014end note ]</p>\n</blockquote>\n<hr>\n<p>There's also circumstantial evidence reinforcing the above point: the conditional operator is used to conditionally make behavior undefined.</p>\n<blockquote>\n<p id=\"so_40172606_40172686_5\">\u00a78.5 [dcl.init]/12.3</p>\n<pre><code>int f(bool b) {\n  unsigned char c;\n  unsigned char d = c; // OK, d has an indeterminate value\n  int e = d; // undefined behavior\n  return b ? d : 0; // undefined behavior if b is true\n}\n</code></pre>\n</blockquote>\n<p>In the above example, using <code>d</code> to initialize <code>int</code> (or anything other than <code>unsigned char</code>) is undefined. Yet it is clearly stated that the UB occurs only if the UB branch is evaluated.</p>\n<hr>\n<p>Going out of language-lawyer perspective: if this could be UB, then any division could be treated as UB, since the divisor could potentially be 0. This is not the spirit of the rule.</p>\n</hr></hr></hr>", "LastEditorUserId": "2411320", "LastActivityDate": "2016-11-20T23:45:08.930", "Score": "109", "CreationDate": "2016-10-21T09:13:55.507", "ParentId": "40172606", "CommentCount": "8", "LastEditDate": "2016-11-20T23:45:08.930", "OwnerUserId": "2456565"}, "bq_ids": {"n4140": {"so_40172606_40172686_3": {"length": 13, "quality": 1.0, "section_id": 5937}, "so_40172606_40172686_4": {"length": 25, "quality": 0.8928571428571429, "section_id": 5937}, "so_40172606_40172686_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 6167}}, "n3337": {"so_40172606_40172686_3": {"length": 13, "quality": 1.0, "section_id": 5709}, "so_40172606_40172686_4": {"length": 25, "quality": 0.8928571428571429, "section_id": 5709}, "so_40172606_40172686_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 5928}}, "n4659": {"so_40172606_40172686_3": {"length": 13, "quality": 1.0, "section_id": 7421}, "so_40172606_40172686_4": {"length": 16, "quality": 0.5714285714285714, "section_id": 7421}, "so_40172606_40172686_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 7664}}}});