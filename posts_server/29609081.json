post_cb({"bq_ids": {"n4140": {"so_29609081_29609337_0": {"length": 5, "quality": 1.0, "section_id": 3245}}, "n3337": {"so_29609081_29609337_0": {"length": 5, "quality": 1.0, "section_id": 3118}}, "n4659": {"so_29609081_29609337_0": {"length": 5, "quality": 1.0, "section_id": 4003}}}, "29609337": {"Id": "29609337", "PostTypeId": "2", "Body": "<p>In N3797 (C++14) and N3485 (C++11), \u00a78.3.5 [dcl.fct]/9 explicitly starts with:</p>\n<blockquote>\n<p id=\"so_29609081_29609337_0\">Types shall not be defined in return or parameter types.</p>\n</blockquote>\n<p>Thus, your code is invalid and GCC is correct to diagnose it.</p>\n", "LastActivityDate": "2015-04-13T15:33:56.397", "Score": "6", "CreationDate": "2015-04-13T15:33:56.397", "ParentId": "29609081", "CommentCount": "0", "OwnerUserId": "962089"}, "29609081": {"ViewCount": "101", "Body": "<p>I was surprised to discover that the following code compiles, runs, AND produces the expected output under MSVC:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Foo{\n    int _x;\n    Foo(int x): _x(x) {}\n}  //Note: no semi-colon after class definition.\n   //Makes this behave as a return type for the following function:\n\nFoo_factory(int x)\n{return Foo(x);}\n\nint main (int argc, char* argv[])\n{\n    Foo foo = Foo_factory(42);\n    cout &lt;&lt; foo._x &lt;&lt; endl;  //Prints \"42\"\n    return 0;\n}\n</code></pre>\n<p>I was less surprised to see MinGW fail to compile with the error \"new types may not be defined in a return type\".  Is this just another Microsoft exception to the standard, or is this legal C++?</p>\n", "AcceptedAnswerId": "29609337", "Title": "Define a new type in a function return value", "CreationDate": "2015-04-13T15:21:53.093", "Id": "29609081", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-04-13T15:33:56.397", "Score": "3", "OwnerUserId": "1812187", "Tags": "<c++><visual-c++>", "AnswerCount": "1"}});