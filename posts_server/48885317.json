post_cb({"48889962": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48885317_48889962_0\">Is it possible to make the compiler give a warning / error that std::move won't have any effect since the object can't be moved?</p>\n</blockquote>\n<p>It is not exactly true that <code>std::move</code> won't have any effect. The following code (try it on <a href=\"https://wandbox.org/permlink/f3LageaxWyhmZyTg\" rel=\"nofollow noreferrer\">wandbox</a>):</p>\n<pre><code>void foo(const SomeClass&amp;) {\n    std::cout &lt;&lt; \"calling foo(const SomeClass&amp;)\" &lt;&lt; std::endl;\n}\n\nvoid foo(const SomeClass&amp;&amp;) {\n    std::cout &lt;&lt; \"calling foo(const SomeClass&amp;&amp;)\" &lt;&lt; std::endl;\n}\n\nint main() {\n    foo(getObject());\n    foo(std::move(getObject()));\n}\n</code></pre>\n<p>will output</p>\n<pre><code>calling foo(const SomeClass&amp;)\ncalling foo(const SomeClass&amp;&amp;)\n</code></pre>\n<p>even though your object has a deleted move constructor.\nThe reason is that <code>std::move</code> doesn't by itself \"move\" anything. It just does a simple cast (C++17 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"nofollow noreferrer\">N4659</a> draft, 23.2.5 Forward/move helpers):</p>\n<blockquote id=\"so_48885317_48889962_1\">\n<pre><code>template &lt;class T&gt; constexpr remove_reference_t&lt;T&gt;&amp;&amp; move(T&amp;&amp; t) noexcept;\n\nReturns: static_cast&lt;remove_reference_t&lt;T&gt;&amp;&amp;&gt;(t)\n</code></pre>\n</blockquote>\n<p>This is why the compiled doesn't give a warning - everything is perfectly legal, the cast you are doing has nothing to do with the deleted move constructor, and overload resolution selects the copy constructor as the best match.</p>\n<p>Of course, you can define your own <code>move</code> with different semantics than <code>std::move</code> if you really need such semantics (like the one in matthewscottgordon's answer).</p>\n", "LastActivityDate": "2018-02-20T16:34:15.260", "Score": "1", "Id": "48889962", "CreationDate": "2018-02-20T16:34:15.260", "ParentId": "48885317", "CommentCount": "0", "OwnerUserId": "9385966"}, "bq_ids": {"n4140": {"so_48885317_48889962_1": {"length": 6, "quality": 0.75, "section_id": 3947}}, "n4659": {"so_48885317_48889962_1": {"length": 6, "quality": 0.75, "section_id": 4834}}}, "48885317": {"ViewCount": "115", "Body": "<p>In the following code I want to move-construct an object that has no move-constructor available:</p>\n<pre><code>class SomeClass{\n\npublic:\n    SomeClass() = default;\n\n    SomeClass(const SomeClass&amp;)  = default;\n    SomeClass(      SomeClass&amp;&amp;) = delete;\n\n};\n\nSomeClass&amp; getObject(){\n\n    return some_obj;\n\n};\n\n//...\n\nSomeClass obj = std::move( getObject());\n</code></pre>\n<p>The compiler gives an error: \"use of deleted function\". This is all good.</p>\n<p>On the other hand, if it has a move-constructor but getObject() returns a const object, then the copy constructor will be called instead, even though I'm trying to move it with std::move.</p>\n<p>Is it possible to make the compiler give a warning / error that std::move won't have any effect since the object can't be moved?</p>\n<pre><code>class SomeClass{\n\npublic:\n    SomeClass() = default;\n\n    SomeClass(const SomeClass&amp;)  = default;\n    SomeClass(      SomeClass&amp;&amp;) = default;\n\n};\n\nconst SomeClass&amp; getObject(){\n\n    return some_obj;\n\n};\n\n//...\n\nSomeClass obj = std::move( getObject());\n</code></pre>\n", "Title": "Copy ctor is called instead of move ctor - Can compiler give a warning?", "CreationDate": "2018-02-20T12:27:56.613", "LastActivityDate": "2018-02-20T16:34:15.260", "CommentCount": "4", "PostTypeId": "1", "Id": "48885317", "Score": "2", "OwnerUserId": "8038490", "Tags": "<c++>", "AnswerCount": "3"}, "48887779": {"PostTypeId": "2", "Body": "<p>If your concern is just knowing for sure that you're getting the best possible performance, most of the time you should probably just trust the compiler. In fact, you should almost never need to use <code>std::move()</code> at all. In your example above, for example, it's not having an effect. Modern compilers can work out when a move should happen.</p>\n<p>If you have classes that should always be moved and never copied, then delete their copy constructors.</p>\n<p>But maybe you're writing a template function that is going to have terrible performance if you pass it a class without a move constructor, or you're in some other situation I haven't thought of. In that case, <code>std::is_move_constructible</code> is what you probably want. Try this: </p>\n<pre><code>#include &lt;type_traits&gt;\n\n#include &lt;boost/serialization/static_warning.hpp&gt;\n\ntemplate&lt;class T&gt;\nT &amp;&amp;move_or_warn(T &amp;t)\n{\n    BOOST_STATIC_WARNING(std::is_move_constructible&lt;T&gt;::value);\n    return std::move(t);\n}\n</code></pre>\n<p>Now if you do <code>SomeClass obj = std::move_or_warn( getObject());</code>, you should get a compiler warning if the object can't be moved. (Although I'd probably use the normal <code>std::move</code> and call <code>std::is_move_constructible</code> seperately.)</p>\n<p>Unfortunately, C++ doesn't (yet) have a standard way to produce the sort of programmer-specified warning you're looking for, which is why I had to use boost. Take a look <a href=\"https://stackoverflow.com/questions/8936063/does-there-exist-a-static-warning\">here</a> for more discussion about generating warnings.</p>\n", "LastActivityDate": "2018-02-20T14:41:15.277", "Score": "1", "Id": "48887779", "CreationDate": "2018-02-20T14:41:15.277", "ParentId": "48885317", "CommentCount": "0", "OwnerUserId": "2577577"}, "48889123": {"PostTypeId": "2", "Body": "<p>The problem comes from <code>const</code> rvalue. Such arguments match <code>const T&amp;</code> better than <code>T&amp;&amp;</code>. If you really want to ban such arguments, you can add an overloaded move constructor:</p>\n<pre><code>SomeClass(const SomeClass&amp;&amp;) = delete;\n</code></pre>\n<p><strong>Note:</strong> What you are trying is to ban such arguments, rather to ban the move behavior. Because we are usually not able to \"steal\" resource from a <code>const</code> object even if it is an rvalue, it is reasonable to call copy constructor instead of move constructor. If this is an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a>, you should consider if it is really intended to ban such arguments.</p>\n", "LastActivityDate": "2018-02-20T15:50:05.193", "Score": "1", "Id": "48889123", "CreationDate": "2018-02-20T15:50:05.193", "ParentId": "48885317", "CommentCount": "0", "OwnerUserId": "5376789"}});