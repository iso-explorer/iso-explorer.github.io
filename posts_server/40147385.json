post_cb({"bq_ids": {"n4140": {"so_40147385_40147385_0": {"length": 31, "quality": 0.9117647058823529, "section_id": 3227}}, "n3337": {"so_40147385_40147385_0": {"length": 31, "quality": 0.9117647058823529, "section_id": 3100}}, "n4659": {"so_40147385_40147385_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3984}}}, "40148399": {"Id": "40148399", "PostTypeId": "2", "Body": "<p>Your understanding of the wording is correct. The following is ill-formed:</p>\n<pre><code>int (SomeClass::&amp;RefOnSomeMemberFunction) (int) = SomeClass::SomeMemberFunction;\n</code></pre>\n<p>In fact, if you look at the grammar rules, there's only</p>\n<blockquote>\n<p id=\"so_40147385_40148399_0\">nested-name-specifier * attribute-specifier-seq<sub>opt</sub> cv-qualifier-seq<sub>opt</sub> <code>D1</code></p>\n</blockquote>\n<hr>\n<p>Your understanding of what happens in the calls to <code>boost::bind</code> and <code>std::bind</code> you mentioned is flawed. In this context, <a href=\"http://en.cppreference.com/w/cpp/language/operator_member_access\" rel=\"nofollow\">unary <code>&amp;</code></a> is the addressof operator, and it yields <em>pointer</em> to member (function). That pointer is defined in the paragraph you quoted.</p>\n</hr>", "LastEditorUserId": "2456565", "LastActivityDate": "2016-10-20T07:54:00.483", "Score": "2", "CreationDate": "2016-10-20T07:45:57.450", "ParentId": "40147385", "CommentCount": "1", "OwnerUserId": "2456565", "LastEditDate": "2016-10-20T07:54:00.483"}, "40148058": {"Id": "40148058", "PostTypeId": "2", "Body": "<p>C++ class's member function implicitly uses <code>this</code> as the first parameter.\nSo <code>std::bind(&amp;SomeClass::SomeMemberFunction, this, std::placeholders::_1)</code> can be explained as:</p>\n<ol>\n<li>Get the function pointer address of <code>SomeClass::SomeMemberFunction</code>;</li>\n<li>Use <code>this</code> as the first parameter of the function, here <code>this</code> is the object's address;</li>\n<li>Use <code>std::placeholders::_1</code> as the second parameter.</li>\n</ol>\n<p>Then you get a <code>functor</code>, that will call the <code>object</code>'s <code>SomeMemberFunction</code> with placeholder <code>_1</code>.</p>\n", "LastActivityDate": "2016-10-20T07:27:58.577", "CommentCount": "2", "CreationDate": "2016-10-20T07:27:58.577", "ParentId": "40147385", "Score": "0", "OwnerUserId": "1030870"}, "40147385": {"ViewCount": "66", "Body": "<p>Quoting the standard (2003) version (the more recent others are saying the same I think) very end of 8.3.3, bold emphasizing is mine :</p>\n<blockquote>\n<p id=\"so_40147385_40147385_0\">A pointer to member shall not point to a static member of a class (9.4), a member with reference type, or\n  \u201ccv void.\u201d [Note: see also 5.3 and 5.5. The type \u201cpointer to member\u201d is distinct from the type \u201cpointer\u201d,\n  that is, a pointer to member is declared only by the pointer to member declarator syntax, and never by the\n  pointer declarator syntax. <strong>There is no \u201creference-to-member\u201d type in C + +</strong>. ]</p>\n</blockquote>\n<p>But I see for instance a lot of</p>\n<pre><code>boost::bind(&amp;SomeClass::SomeMemberFunction, this, _1)\n</code></pre>\n<p>as well as</p>\n<pre><code>std::bind(&amp;SomeClass::SomeMemberFunction, this, std::placeholders::_1)\n</code></pre>\n<p>etc working like a charm, involving <code>&amp;SomeClass::SomeMemberFunction</code>'s which seem to be references to member function.</p>\n<p>Is the standard simply saying that for instance</p>\n<pre><code>int (SomeClass::&amp;RefOnSomeMemberFunction) (int) = SomeClass::SomeMemberFunction\n</code></pre>\n<p>is not a valid assertion in that language, or is there more ?</p>\n", "AcceptedAnswerId": "40148399", "Title": "\"There is no \u201creference-to-member\u201d type in C + +\", std::bind and boost::bind are in the same boat", "CreationDate": "2016-10-20T06:52:32.257", "Id": "40147385", "CommentCount": "4", "LastEditDate": "2016-10-20T07:00:33.170", "PostTypeId": "1", "LastEditorUserId": "1581875", "LastActivityDate": "2016-10-20T07:54:00.483", "Score": "3", "OwnerUserId": "1581875", "Tags": "<c++><reference><standards><member-function-pointers><member-functions>", "AnswerCount": "2"}});