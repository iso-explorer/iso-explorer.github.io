post_cb({"bq_ids": {"n4140": {"so_29697469_29697590_0": {"length": 27, "quality": 0.84375, "section_id": 233}}, "n3337": {"so_29697469_29697590_0": {"length": 27, "quality": 0.84375, "section_id": 226}}, "n4659": {"so_29697469_29697590_0": {"length": 27, "quality": 0.84375, "section_id": 242}}}, "29697590": {"Id": "29697590", "PostTypeId": "2", "Body": "<p>Yes, it must be instantiated; <code>doublestruct</code> is a member of the instantiation so, if you do not have an instantiation, you do not have a <code>doublestruct</code>.</p>\n<blockquote>\n<p id=\"so_29697469_29697590_0\"><code>[C++11: 14.7.1]:</code> Unless a class template specialization has been explicitly instantiated (14.7.2) or explicitly specialized (14.7.3), the class template specialization is implicitly instantiated when the specialization is referenced in a context that requires a completely-defined object type or when the completeness of the class type affects the semantics of the program. <em>[..]</em></p>\n</blockquote>\n<p>In particular, consider the potential effect of specialisations of <code>mystruct</code> that may not contain a member <code>doublestruct</code>, or may contain one that is not a type.</p>\n", "LastActivityDate": "2015-04-17T11:11:01.217", "CommentCount": "0", "CreationDate": "2015-04-17T11:11:01.217", "ParentId": "29697469", "Score": "16", "OwnerUserId": "560648"}, "29697469": {"ViewCount": "508", "Body": "<p>If I have the following code:</p>\n<pre><code>template &lt;typename T = int&gt;\nstruct mystruct {\n  using doublestruct = mystruct&lt;double&gt;;\n}\n\nmystruct&lt;&gt;::doublestruct obj;\n</code></pre>\n<p>Does this instantiate the <code>mystruct&lt;int&gt;</code> template at all? Or only the <code>mystruct&lt;double&gt;</code> is instantiated?</p>\n", "AcceptedAnswerId": "29697640", "Title": "Instantiation of template", "CreationDate": "2015-04-17T11:05:39.570", "Id": "29697469", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-04-17T11:31:00.870", "LastEditorUserId": "476681", "LastActivityDate": "2015-04-17T11:31:00.870", "Score": "24", "OwnerUserId": "4715851", "Tags": "<c++><templates>", "AnswerCount": "2"}, "29697640": {"Id": "29697640", "PostTypeId": "2", "Body": "<p>Yes, it will have to instantiate <code>mystruct&lt;int&gt;</code> in order to access its members and determine the meaning of <code>doublestruct</code>. You could test this with a <code>static_assert</code>:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T = int&gt;\nstruct mystruct {\n  static_assert(!std::is_same&lt;T,int&gt;::value, \"\");\n  using doublestruct = mystruct&lt;double&gt;;\n};\n\nmystruct&lt;&gt;::doublestruct obj;     // assertion fails for T==int\nmystruct&lt;char&gt;::doublestruct obj; // OK, not instantiated for int\n</code></pre>\n", "LastEditorUserId": "204847", "LastActivityDate": "2015-04-17T11:15:23.597", "Score": "18", "CreationDate": "2015-04-17T11:13:17.660", "ParentId": "29697469", "CommentCount": "2", "OwnerUserId": "204847", "LastEditDate": "2015-04-17T11:15:23.597"}});