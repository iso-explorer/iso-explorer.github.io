post_cb({"28033990": {"ParentId": "28033901", "CommentCount": "0", "Body": "<p>[algorithms.general]/2, declaration of <code>shuffle</code>:</p>\n<blockquote>\n<pre><code>template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;\nvoid shuffle(RandomAccessIterator first, RandomAccessIterator last,\n              UniformRandomNumberGenerator&amp;&amp; rand);\n</code></pre>\n<p id=\"so_28033901_28033990_0\">[..]</p>\n<p id=\"so_28033901_28033990_1\">If an algorithm\u2019s template parameter is <code>RandomAccessIterator</code> [..]\n  <strong>the actual template argument shall satisfy the requirements of a random-access iterator (24.2.7).</strong></p>\n</blockquote>\n<p>Clearly <code>std::list</code> only provides bidirectional iterators. Try to use a container that does provide random-access iterators instead.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "28033990", "Score": "3", "CreationDate": "2015-01-19T21:43:45.200", "LastActivityDate": "2015-01-19T21:43:45.200"}, "28033925": {"ParentId": "28033901", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/algorithm/random_shuffle\" rel=\"nofollow\"><code>std::shuffle</code></a> requires random access iterators. <code>std::list</code> doesn't provide those. You need a different container, such as <code>std::vector</code>.</p>\n<p>If you really need <code>std::list</code>, you may need to implement the shuffling in a dedicated algorithm. But first make sure you really need it. Often times people think they need <code>std::list</code> when they really need <code>std::vector</code>.</p>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2015-01-19T21:47:09.393", "Id": "28033925", "Score": "8", "CreationDate": "2015-01-19T21:39:36.270", "LastActivityDate": "2015-01-19T21:47:09.393"}, "28033926": {"ParentId": "28033901", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>std::list</code> does not provide random access to its elements, which <code>std::shuffle()</code> requires. This is how the signature of <code>std::shuffle()</code> looks like in its specification (paragraph 25.3.12 of the C++ Standard):</p>\n<pre><code>template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;\nvoid shuffle(RandomAccessIterator first,\n             RandomAccessIterator last,\n             UniformRandomNumberGenerator&amp;&amp; g);\n</code></pre>\n<p>If you can, consider using an <code>std::vector</code> instead - which, by the way, you are encouraged to use as the default sequential container by the C++ Standard itself.</p>\n<p>As an example (<a href=\"http://coliru.stacked-crooked.com/a/cf28112e2c06b6b2\" rel=\"nofollow\">live demo on Coliru</a>):</p>\n<pre><code>int main()\n{\n    std::default_random_engine generator(10);\n    std::vector&lt;int&gt; v(10);\n\n    std::iota(begin(v), end(v), 0);\n    std::shuffle(begin(v), end(v), generator);\n\n    for (auto x : v) { std::cout &lt;&lt; x; }\n}\n</code></pre>\n<p>The <code>std::iota()</code> algorithm is just a simpler alternative to your particular usage of <code>std::generate</code>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2015-01-20T11:53:11.507", "Id": "28033926", "Score": "12", "CreationDate": "2015-01-19T21:39:38.027", "LastActivityDate": "2015-01-20T11:53:11.507"}, "bq_ids": {"n4140": {"so_28033901_28033990_1": {"section_id": 1238, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_28033901_28033990_1": {"section_id": 1236, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_28033901_28033990_1": {"section_id": 1326, "quality": 0.8333333333333334, "length": 10}}}, "28033901": {"CommentCount": "0", "ViewCount": "2011", "CreationDate": "2015-01-19T21:38:05.220", "LastActivityDate": "2015-01-20T11:53:11.507", "Title": "std::shuffle doesn't compile with std::list", "FavoriteCount": "1", "PostTypeId": "1", "Id": "28033901", "Score": "4", "Body": "<p>I'm trying to shuffle some list of generated elements. Here is the code:</p>\n<pre><code>std::default_random_engine generator (10);\nstd::list&lt;int&gt; list(10);\n\nint n = 0;\nstd::generate(list.begin(), list.end(), [&amp;]{ return n++; });\nstd::shuffle(list.begin(), list.end(), generator);\n</code></pre>\n<p>It doens't compile. Here are the errors:</p>\n<pre><code>/include/c++/v1/algorithm:3059:34: Invalid operands to binary expression ('std::__1::__list_iterator&lt;int, void *&gt;' and 'std::__1::__list_iterator&lt;int, void *&gt;')\nmain.cpp:1:10: In file included from main.cpp:1:\n\n/include/c++/v1/random:1641:10: In file included from /bin/../include/c++/v1/random:1641:\n\nmain.cpp:37:10: In instantiation of function template specialization 'std::__1::shuffle&lt;std::__1::__list_iterator&lt;int, void *&gt;, std::__1::linear_congruential_engine&lt;unsigned int, 48271, 0, 2147483647&gt; &amp;&gt;' requested here\n/include/c++/v1/iterator:622:1: Candidate template ignored: could not match 'reverse_iterator' against '__list_iterator'\n/include/c++/v1/iterator:1017:1: Candidate template ignored: could not match 'move_iterator' against '__list_iterator'\n/include/c++/v1/iterator:1369:1: Candidate template ignored: could not match '__wrap_iter' against '__list_iterator'\n/include/c++/v1/string:486:11: Candidate template ignored: could not match 'fpos' against '__list_iterator'\n</code></pre>\n<p>Does anybody have any idea?</p>\n", "Tags": "<c++><list><std><shuffle>", "OwnerUserId": "626382", "AnswerCount": "3"}});