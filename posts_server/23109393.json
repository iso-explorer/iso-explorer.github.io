post_cb({"23109510": {"ParentId": "23109393", "CommentCount": "0", "CreationDate": "2014-04-16T12:29:10.310", "OwnerUserId": "2068573", "PostTypeId": "2", "Id": "23109510", "Score": "2", "Body": "<p><code>v = std::vector&lt;int&gt;(10);</code></p>\n<p>Temporary object is created, and then copied (or moved C++11) into <code>v</code>. After this line, temporary object's destructor is called.</p>\n<p>When <code>c</code> goes out of scope, <code>c.v</code>'s destructor is called.</p>\n<p>Note: you can also do</p>\n<p><code>v.resize(10);</code></p>\n", "LastActivityDate": "2014-04-16T12:29:10.310"}, "23109589": {"ParentId": "23109393", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-04-16T12:32:52.807", "Score": "2", "LastEditorUserId": "1141471", "LastEditDate": "2014-04-16T12:40:48.667", "Id": "23109589", "OwnerUserId": "1141471", "Body": "<p>Destructor for a member vector will be called when TestClass object destructor is called. It will happen when TestClass object goes out of scope</p>\n<pre><code>{\n  TestClass c;\n  c.foo();\n} // destructor for c calls destructor for v\n</code></pre>\n<p>This is because C++ Standard 12.6.2 <strong>\u00a7</strong> 10:</p>\n<blockquote>\n<p id=\"so_23109393_23109589_0\">In a non-delegating constructor, initialization proceeds in the\n  following order: </p>\n<p id=\"so_23109393_23109589_1\">\u2014 First, and only for the constructor of the most\n  derived class (1.8), virtual base classes are initialized in the order\n  they appear on a depth-first left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-specifier-list. </p>\n<p id=\"so_23109393_23109589_2\">\u2014 Then, direct base classes are initialized in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers). </p>\n<p id=\"so_23109393_23109589_3\">\u2014 Then, non-static\n  data members are initialized in the order they were declared in the\n  class definition (again regardless of the order of the\n  mem-initializers). </p>\n<p id=\"so_23109393_23109589_4\">\u2014 Finally, the compound-statement of the\n  constructor body is executed. 11 [ Note: The declaration order is\n  mandated to ensure that base and <strong>member subobjects are destroyed in\n  the reverse order of initialization.</strong> \u2014 end note ]</p>\n</blockquote>\n<p>In line <code>v = std::vector&lt;int&gt;(10)</code> there will be also call to destructor for temporary object, because temporary vector <code>std::vector&lt;int&gt;(10)</code> is being created just to initialize <code>v</code>, and then it is destroyed.</p>\n", "LastActivityDate": "2014-04-16T12:40:48.667"}, "23109715": {"ParentId": "23109393", "CommentCount": "0", "CreationDate": "2014-04-16T12:38:09.197", "OwnerUserId": "2032021", "PostTypeId": "2", "Id": "23109715", "Score": "0", "Body": "<p>when your variable c goes out of scope destructor gets called automatically for c, which was automatically allocated, the destructor will take care of deleting the vector</p>\n", "LastActivityDate": "2014-04-16T12:38:09.197"}, "23109393": {"CommentCount": "4", "ViewCount": "98", "CreationDate": "2014-04-16T12:24:06.313", "LastActivityDate": "2014-04-16T13:09:57.307", "Title": "C++ Class variable destructor", "AcceptedAnswerId": "23109589", "PostTypeId": "1", "Id": "23109393", "Score": "1", "Body": "<p>I have a question about class variables and scopes in C++. Let's say I have the class below:</p>\n<pre><code>class TestClass {\npublic:\n    std::vector&lt;int&gt; v;\n\n    void foo()\n    {\n        v = std::vector&lt;int&gt;(10);\n    }\n}\n</code></pre>\n<p>Now, say I call the following code:</p>\n<pre><code>TestClass c;\nc.foo();\n</code></pre>\n<p>When is the destructor of the vector (assigned to v) called? Is it called when foo() returns or when c goes out of scope?</p>\n", "Tags": "<c++><scope>", "OwnerUserId": "2868061", "AnswerCount": "4"}, "23109600": {"ParentId": "23109393", "PostTypeId": "2", "CommentCount": "14", "CreationDate": "2014-04-16T12:33:31.327", "Score": "1", "LastEditorUserId": "1451714", "LastEditDate": "2014-04-16T13:09:57.307", "Id": "23109600", "OwnerUserId": "2848971", "Body": "<p>Okay, let's go through this step by step:</p>\n<ul>\n<li>c is constructed, v is a member of c, so v must be constructed too.</li>\n<li>foo is called</li>\n<li>v is assigned a new value. The new value is constructed, <strike>old v is destructed, temporary vector is moved onto v.</strike> then moved or copied into v.</li>\n<li>foo returns</li>\n<li>c goes out of scope</li>\n<li>c gets destructed, therefore v is also destructed.</li>\n</ul>\n<p>So, v is destructed <strike>twice</strike> when <code>c</code> is destructed. The temporary <strike>may</strike> will also get destructed <strike>if we have no move constructor</strike>.</p>\n", "LastActivityDate": "2014-04-16T13:09:57.307"}, "bq_ids": {"n4140": {"so_23109393_23109589_2": {"section_id": 438, "quality": 1.0, "length": 13}, "so_23109393_23109589_0": {"section_id": 438, "quality": 1.0, "length": 6}, "so_23109393_23109589_3": {"section_id": 438, "quality": 1.0, "length": 15}, "so_23109393_23109589_1": {"section_id": 438, "quality": 1.0, "length": 29}, "so_23109393_23109589_4": {"section_id": 438, "quality": 0.8, "length": 16}}, "n3337": {"so_23109393_23109589_2": {"section_id": 429, "quality": 1.0, "length": 13}, "so_23109393_23109589_0": {"section_id": 429, "quality": 1.0, "length": 6}, "so_23109393_23109589_3": {"section_id": 429, "quality": 1.0, "length": 15}, "so_23109393_23109589_1": {"section_id": 429, "quality": 1.0, "length": 29}, "so_23109393_23109589_4": {"section_id": 429, "quality": 0.8, "length": 16}}, "n4659": {"so_23109393_23109589_2": {"section_id": 458, "quality": 1.0, "length": 13}, "so_23109393_23109589_0": {"section_id": 458, "quality": 1.0, "length": 6}, "so_23109393_23109589_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_23109393_23109589_1": {"section_id": 458, "quality": 1.0, "length": 29}, "so_23109393_23109589_4": {"section_id": 458, "quality": 0.8, "length": 16}}}});