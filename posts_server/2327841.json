post_cb({"2327870": {"Id": "2327870", "PostTypeId": "2", "Body": "<p>It's implementation defined. Most of the time that would be stored in a string table with all the other strings in your program. Generally you can treat it like a global static const variable except it's not accessible outside your function.</p>\n", "LastActivityDate": "2010-02-24T17:03:40.143", "CommentCount": "0", "CreationDate": "2010-02-24T17:03:40.143", "ParentId": "2327841", "Score": "1", "OwnerUserId": "82320"}, "bq_ids": {"n4140": {"so_2327841_2327980_0": {"length": 15, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_2327841_2327980_0": {"length": 15, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_2327841_2327980_0": {"length": 15, "quality": 1.0, "section_id": 6781}}}, "46016761": {"Id": "46016761", "PostTypeId": "2", "Body": "<p>The string literals are stored on DATA segment and allocated at compile time. This helps to assign same string literals to multiple variables without creating copies of string. </p>\n<p>e.g char * str=\"hello\"; </p>\n<p>The str is char pointer, having address of char h, while \"hello\" is stored in data segment and cannot be altered. Trying to alter it will generate Segmentation fault.</p>\n<p>While assigning a char array string literal creates a copy of string on stack.</p>\n<p>i.e char str[]=\"hello\";</p>\n<p>\"hello\" is copied to stack (appended by null character) and str points to character 'h' in stack.</p>\n", "LastActivityDate": "2017-09-02T18:06:58.777", "CommentCount": "0", "CreationDate": "2017-09-02T18:06:58.777", "ParentId": "2327841", "Score": "0", "OwnerUserId": "5304374"}, "2327862": {"Id": "2327862", "PostTypeId": "2", "Body": "<p>The string is stored in the data area of the program. This is completely compiler, executable format, and platform dependent. For example, an ELF binary places this in a different location than a Windows executable, and if you were compiling for an embedded platform this data might be stored in ROM instead of RAM.</p>\n<p>Here's an illustration of the layout of the ELF format:</p>\n<p><img alt=\"ELF Layout\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Elf-layout--en.svg/200px-Elf-layout--en.svg.png\"/></p>\n<p>Your string data would most likely be found in the <code>.data</code> or <code>.text</code> sections, depending on compiler.</p>\n<p>You can certainly return it from inside the function body. Just check with your implementation to verify that it is random access, as many implementations won't let you overwrite it.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-02-24T17:12:50.857", "Score": "7", "CreationDate": "2010-02-24T17:03:07.243", "ParentId": "2327841", "CommentCount": "7", "OwnerUserId": "172029", "LastEditDate": "2017-02-08T14:21:38.090"}, "2327876": {"Id": "2327876", "PostTypeId": "2", "Body": "<p>It is generally stored in the read only section of memory and has static storage allocation.</p>\n<p>Performing operations like <code>c[0] = 'k'</code> etc invokes Undefined Behavior.</p>\n<blockquote>\n<p id=\"so_2327841_2327876_0\">Can I return it from inside of the function body?</p>\n</blockquote>\n<p>Yes!</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-02-24T17:15:17.853", "Score": "5", "CreationDate": "2010-02-24T17:04:23.793", "ParentId": "2327841", "CommentCount": "0", "OwnerUserId": "165520", "LastEditDate": "2010-02-24T17:15:17.853"}, "2327991": {"Id": "2327991", "PostTypeId": "2", "Body": "<p>It's been a while since I played with C++, but I remember I (self taught) had a load of problems with strings (well, ok, character arrays...).</p>\n<p>If you're going to be modifying their value at all, be sure to use the new and delete keywords... Something along these lines...</p>\n<pre><code>char *strText = new char[10];\n/* Do something\n...\n...\n...\n*/\ndelete [] strText;\n</code></pre>\n<p>Martin</p>\n", "LastEditorUserId": "214792", "LastActivityDate": "2010-02-26T10:17:51.410", "Score": "-3", "CreationDate": "2010-02-24T17:21:14.173", "ParentId": "2327841", "CommentCount": "7", "OwnerUserId": "214792", "LastEditDate": "2010-02-26T10:17:51.410"}, "2327858": {"Id": "2327858", "PostTypeId": "2", "Body": "<p>it is packaged with your binary -- by packaged I mean hard-wired, so yes you can return it and use it elsewhere -- you won't be able to alter it though, and I strongly suggest you declare it as:</p>\n<pre><code>const char * x = \"hello world\";\n</code></pre>\n", "LastActivityDate": "2010-02-24T17:02:42.877", "CommentCount": "7", "CreationDate": "2010-02-24T17:02:42.877", "ParentId": "2327841", "Score": "22", "OwnerUserId": "153865"}, "2327841": {"ViewCount": "4416", "Body": "<pre><code>void f()\n{\n    char *c = \"Hello World!\"\n}\n</code></pre>\n<p>Where is the string stored? What's the property of it? I just know it is a constant, what else? Can I return it from inside of the function body?</p>\n", "Title": "C++ string literal data type storage", "CreationDate": "2010-02-24T17:00:42.040", "LastActivityDate": "2017-09-02T18:06:58.777", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2010-02-24T17:17:03.233", "LastEditorUserId": "172029", "Id": "2327841", "Score": "20", "OwnerUserId": "233254", "Tags": "<c++><memory><compiler-construction><types><storage>", "AnswerCount": "8"}, "2327980": {"Id": "2327980", "PostTypeId": "2", "Body": "<p>\u00a72.14.15 String Literals, Section 7</p>\n<blockquote>\n<p id=\"so_2327841_2327980_0\">A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has <strong>static storage duration</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2010-02-24T17:18:30.470", "CommentCount": "0", "CreationDate": "2010-02-24T17:18:30.470", "ParentId": "2327841", "Score": "6", "OwnerUserId": "252000"}, "2327874": {"Id": "2327874", "PostTypeId": "2", "Body": "<p>It has static storage duration, so it exists throughout the life of the program. Exactly where the compiler/linker put initialized data varies. Returning a pointer to it from a function is fine, but be sure you return a <code>char const *</code> -- writing to the string causes undefined behavior.</p>\n", "LastActivityDate": "2010-02-24T17:04:15.697", "CommentCount": "1", "CreationDate": "2010-02-24T17:04:15.697", "ParentId": "2327841", "Score": "3", "OwnerUserId": "179910"}});