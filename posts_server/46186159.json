post_cb({"46186407": {"Id": "46186407", "PostTypeId": "2", "Body": "<p>No; pathological implementations are free to move-construct any specific std string as a copy, leaving the source alone, so long as the operation doesn't throw.  (there must be a length beyond which this does not happen to obey O(1) guarantee).</p>\n<p>A std vector's iterator invalidation rules are tighter; the move would have to be pathologically evil to own memory afterwards.  Similarly it may not throw, even if allocation fails.</p>\n<p>Both if these are unreasonable possibilities; but so is skipping destruction.</p>\n", "LastEditorUserId": "1774667", "LastActivityDate": "2017-09-12T23:00:30.473", "Score": "3", "CreationDate": "2017-09-12T22:50:15.233", "ParentId": "46186159", "CommentCount": "2", "OwnerUserId": "1774667", "LastEditDate": "2017-09-12T23:00:30.473"}, "bq_ids": {"n4140": {"so_46186159_46186650_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 7192}}, "n3337": {"so_46186159_46186650_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 6936}}, "n4659": {"so_46186159_46186650_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 8701}}}, "46186650": {"Id": "46186650", "PostTypeId": "2", "Body": "<p>There's nothing in the standard that requires a moved-from object to no longer own any resources. (Other than performance guarantees but I don't see them preventing such ownership in this case).</p>\n<p>Regarding your program, see [basic.life/4]:</p>\n<blockquote>\n<p id=\"so_46186159_46186650_0\">For an object of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly before the storage which the object occupies is reused or released; however, if there is no explicit call to the destructor or if a delete-expression (5.3.5) is not used to release the storage, the destructor shall not be implicitly called and any program that depends on the side effects produced by the destructor has undefined behavior.</p>\n</blockquote>\n<p>The part of this \"any program that depends on the side effects\" is not as precise wording as we like to see in a standards document, but it's usually interpreted to mean \"anything other than a destructor that has no observable behaviour\" . We don't know what the library implementation might have put in its destructor for vector and string (e.g. it could have debugging tracking in debug mode). </p>\n<p>So I would say your program causes undefined behaviour by omitting the destructor call , although there is some room to debate.</p>\n", "LastActivityDate": "2017-09-12T23:25:07.357", "CommentCount": "0", "CreationDate": "2017-09-12T23:25:07.357", "ParentId": "46186159", "Score": "2", "OwnerUserId": "1505939"}, "46186159": {"ViewCount": "69", "Body": "<p>I know moved from objects are in unspecified but destructible state and I know generally that means that they can own memory, file handles... \nBut I do not know if moved from <code>std::string</code>s and <code>std::vector</code>s are allowed to own any memory.</p>\n<p>So for example is the following function potentially leaking memory or is it fine according to C++ standard?</p>\n<pre><code>void f(){\n    std::aligned_storage_t&lt;sizeof(std::string), alignof(std::string)&gt; memory;\n    std::string&amp; src = *new (&amp;memory) std::string (\"98-&gt;03-&gt;11-&gt;14-&gt;17-&gt;20\");\n    std::string dest(std::move(src ));\n}\n</code></pre>\n<p>notes:</p>\n<ul>\n<li><p>I am interested in ISO standard, I know that for most obvious\nimplementation <code>src</code> should not be owning any memory after <code>move</code>, I\nam interested in \"legal\" status of this code.</p></li>\n<li><p>I know code presented here is not \"proper\" way to code in C++, it is\njust an example to explain my question</p></li>\n<li>I am asking specifically about std::string and std::vector, I know this is not generally <a href=\"https://stackoverflow.com/questions/6943805/are-moved-from-objects-required-to-be-destructed/6944127#6944127\">true</a></li>\n</ul>\n", "Title": "Are moved from string and vector required to not own any heap memory?", "CreationDate": "2017-09-12T22:21:31.110", "LastActivityDate": "2017-09-12T23:25:07.357", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "Id": "46186159", "Score": "3", "OwnerUserId": "700825", "Tags": "<c++><move-semantics>", "AnswerCount": "2"}});