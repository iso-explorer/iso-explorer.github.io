post_cb({"30724097": {"ParentId": "30724010", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-06-09T06:04:00.240", "Score": "2", "LastEditorUserId": "3789604", "LastEditDate": "2015-06-09T06:09:06.700", "Id": "30724097", "OwnerUserId": "3789604", "Body": "<p>In addition to great answer by R Sahu you can also do </p>\n<pre><code>std::cout &lt;&lt; p[-1]; // returns 1;\nstd::cout &lt;&lt; p[1]; // returns 3;\n\nstd::cout &lt;&lt; 1[p]; // returns 3;\nstd::cout &lt;&lt; (-1)[p]; // returns 1;\n</code></pre>\n<p>See : <a href=\"http://ideone.com/MeW3S7\" rel=\"nofollow\">Ideone</a></p>\n<p>For pointer <code>p</code> and integer value <code>k</code> :</p>\n<p><code>p[k]</code> and <code>k[p]</code> both are evaluating to <code>*(p+k)</code>. So, both are same.</p>\n<p>But following one is not same </p>\n<pre><code>std::cout &lt;&lt; -1[p]; // returns -3;\nstd::cout &lt;&lt; (-1)[p]; // returns 1;\n</code></pre>\n", "LastActivityDate": "2015-06-09T06:09:06.700"}, "30724060": {"ParentId": "30724010", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-06-09T06:01:20.350", "Score": "4", "LastEditorUserId": "434551", "LastEditDate": "2015-06-09T06:11:18.847", "Id": "30724060", "OwnerUserId": "434551", "Body": "<p>In C/C++, given a pointer <code>p</code> and integral value <code>k</code>, <code>p[k]</code> is evaluated as <code>*(p+k)</code>. Either form is fine to use as long as <code>p+k</code> points to valid memory.</p>\n<p>If you have access to the C99 Standard, see section <strong>6.5.2.1 Array subscripting, Paragraph 2</strong>. It says:</p>\n<blockquote>\n<p id=\"so_30724010_30724060_0\">A postfix expression followed by an expression in square brackets <code>[]</code> is a subscripted designation of an element of an array object. The definition of the subscript operator <code>[]</code> is that <code>E1[E2]</code> is identical to <code>(*((E1)+(E2)))</code>. Because of the conversion rules that apply to the binary <code>+</code> operator, if <code>E1</code> is an array object (equivalently, a pointer to the\n  initial element of an array object) and E2 is an integer, <code>E1[E2]</code> designates the <code>E2</code>-th element of <code>E1</code> (counting from zero).</p>\n</blockquote>\n<p>If you have access to the C++11 standard, see section <strong>5.2.1 Subscripting, Paragraph 1</strong>. It says:</p>\n<blockquote>\n<p id=\"so_30724010_30724060_1\">A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have the type \u201cpointer to <code>T</code>\u201d and the other shall have unscoped enumeration or integral type.\n  The result is an lvalue of type \u201c<code>T</code>.\u201d The type \u201c<code>T</code>\u201d shall be a completely-defined object type. The expression <code>E1[E2]</code> is identical (by definition) to <code>*((E1)+(E2))</code></p>\n</blockquote>\n", "LastActivityDate": "2015-06-09T06:11:18.847"}, "30724010": {"CommentCount": "1", "ViewCount": "69", "CreationDate": "2015-06-09T05:57:59.707", "LastActivityDate": "2015-06-09T06:11:18.847", "Title": "C++, Use [] notation on pointer?", "AcceptedAnswerId": "30724060", "PostTypeId": "1", "Id": "30724010", "Score": "1", "Body": "<p>I just noticed I can use [] on a pointer and it works, but I was wondering, if this is good to use it.</p>\n<pre><code>int a[]={1,2,3,4};\nint *p=&amp;a[1];\nstd::cout &lt;&lt; p[0]; // returns 2;\nstd::cout &lt;&lt; p[-1]; // returns 1;\nstd::cout &lt;&lt; p[1]; // returns 3;\n</code></pre>\n<p>I always learned, you have to use it like this:</p>\n<pre><code>std::cout &lt;&lt; *(p-1); \nstd::cout &lt;&lt; *(p+1); \n</code></pre>\n<p>But is it okay to use the operator []  on a pointer ?</p>\n", "Tags": "<c++><arrays><pointers><operator-keyword>", "OwnerUserId": "2815780", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30724010_30724060_1": {"section_id": 5986, "quality": 0.8823529411764706, "length": 30}}, "n3337": {"so_30724010_30724060_1": {"section_id": 5754, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_30724010_30724060_1": {"section_id": 7486, "quality": 0.8235294117647058, "length": 28}}}});