post_cb({"6997194": {"CommentCount": "0", "AcceptedAnswerId": "6999169", "LastActivityDate": "2011-08-09T18:22:37.343", "Body": "<p>Suppose I have two versions of <code>operator-&gt;</code> (overloaded on const) in a base class. If I say</p>\n<pre><code>using Base::operator-&gt;;\n</code></pre>\n<p>in a derived class, will I get access to both versions or just the non-const one?</p>\n", "PostTypeId": "1", "ViewCount": "279", "Title": "using declarations and const overloads", "Id": "6997194", "Score": "4", "CreationDate": "2011-08-09T13:48:48.780", "Tags": "<c++><inheritance><operator-overloading><const><using-declaration>", "OwnerUserId": "252000", "AnswerCount": "3"}, "6999169": {"ParentId": "6997194", "LastEditDate": "2011-08-09T18:22:37.343", "CommentCount": "0", "CreationDate": "2011-08-09T15:58:45.113", "LastEditorUserId": "373025", "PostTypeId": "2", "Id": "6999169", "Score": "4", "Body": "<p>Same business as name hiding. It's all or nothing. Using declarations (7.3.3) bring a <em>name</em>, not a <em>member</em>.</p>\n<blockquote>\n<p id=\"so_6997194_6999169_0\">ISO/IEC 14882 (2003), 7.3.3.  1/ A using-declaration introduces a name into the declarative\n  region in which the using-declaration appears. That name is a synonym\n  for the name of some entity declared elsewhere.</p>\n</blockquote>\n<p>I encourage you to read 7.3.3, there are subtle things inside. You cannot using-declare a template, all the members refered by the name you using-declare must be accessible, the names are considerd for overload resolution alongside the names in the block the using declaration is found (ie. they don't hide anything), etc, etc.</p>\n", "OwnerUserId": "373025", "LastActivityDate": "2011-08-09T18:22:37.343"}, "6997282": {"ParentId": "6997194", "CommentCount": "5", "CreationDate": "2011-08-09T13:54:59.820", "PostTypeId": "2", "Id": "6997282", "Score": "2", "Body": "<p>both. did you try it? (damn this answer is short: ah well, here is example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nstruct bar\n{\n  void foo() { std::cout &lt;&lt; \"non_c:foo()\" &lt;&lt; std::endl; }\n  void foo() const { std::cout &lt;&lt; \"c:foo()\" &lt;&lt; std::endl; }\n};\n\nclass base\n{\npublic:\n  bar* operator-&gt;() { return &amp;b; }\n  bar const* operator-&gt;() const { return &amp;b; }\n\nprivate:\n  bar b;  \n};\n\nclass derived : public base\n{\npublic:\n  using base::operator-&gt;;\n};\n\n\nint main(void)\n{\n  const derived d = derived();\n  derived e;\n\n  d-&gt;foo();\n  e-&gt;foo();\n}\n</code></pre>\n", "OwnerUserId": "266198", "LastActivityDate": "2011-08-09T13:54:59.820"}, "bq_ids": {"n3337": {"so_6997194_6999169_0": {"section_id": 5276, "quality": 0.75, "length": 15}}, "n4659": {"so_6997194_6999169_0": {"section_id": 6924, "quality": 0.55, "length": 11}}}, "6997216": {"ParentId": "6997194", "CommentCount": "0", "CreationDate": "2011-08-09T13:50:21.857", "PostTypeId": "2", "Id": "6997216", "Score": "3", "Body": "<p>You get access to all versions of a method/operator with the same name in that parent.</p>\n", "OwnerUserId": "251738", "LastActivityDate": "2011-08-09T13:50:21.857"}});