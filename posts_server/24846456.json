post_cb({"24846456": {"CommentCount": "1", "ViewCount": "305", "PostTypeId": "1", "LastEditorUserId": "1530549", "CreationDate": "2014-07-20T01:16:49.980", "LastActivityDate": "2014-10-19T01:21:31.363", "Title": "Why can't I reassign elements to an array that was deallocated with delete []?", "AcceptedAnswerId": "24846475", "LastEditDate": "2014-10-19T01:21:31.363", "Id": "24846456", "Score": "1", "Body": "<p>I'm investigating the delete [] operator, and I was wondering this - Why can't I make another array elements assignment on that same pointer that I deleted earlier using the 'delete []' operator?</p>\n<p>Here is what I was doing:</p>\n<pre><code>int *a = new int[n];\ncout &lt;&lt; \"Enter array elements:\" &lt;&lt; endl;\nfor (int i = 0; i &lt; n; i++)\n    cin &gt;&gt; a[i];\n\ncout &lt;&lt; \"a address: \" &lt;&lt; &amp;a &lt;&lt; \" points to: \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"a: \"; printArray(a,n);\n\ndelete [] a; cout &lt;&lt; \"deletes a\" &lt;&lt; endl;\n\ncout &lt;&lt; \"Enter new a elements:\" &lt;&lt; endl;\nfor (int i = 0; i &lt; n; i++)\n    cin &gt;&gt; a[i];\n\ncout &lt;&lt; \"a address: \" &lt;&lt; &amp;a &lt;&lt; \" points to: \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"a: \"; printArray(a,n);\n</code></pre>\n<p>And the output is:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Enter array elements: 1 1 1\na address: 0025FAAC points to: 001172C8\na: 1 1 1\ndeletes a\nEnter new a elements: 2 2 2\na address: 0025FAAC points to: 001172C8\na: -572662307 -572662307 -572662307\n</code></pre>\n<p>What is the reason for this?</p>\n", "Tags": "<c++><new-operator><delete-operator>", "OwnerUserId": "1952017", "AnswerCount": "3"}, "24846529": {"ParentId": "24846456", "CommentCount": "0", "CreationDate": "2014-07-20T01:33:42.570", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "24846529", "Score": "2", "Body": "<p>According the draft standard,</p>\n<blockquote>\n<p id=\"so_24846456_24846529_0\">18.6.1.2/9</p>\n<p id=\"so_24846456_24846529_1\"><code>void operator delete[](void* ptr) noexcept;</code></p>\n<p id=\"so_24846456_24846529_2\">Effects: The deallocation function (3.7.4.2) called by the array form of a delete-expression to render the value of <code>ptr</code> invalid.</p>\n</blockquote>\n<p>Hence, executing </p>\n<pre><code>delete [] a;\n</code></pre>\n<p>make <code>a</code> invalid, according to the standard. If a certain platform allows <code>a</code> to be used after that without crashing or other strange behavior is only a matter of luck.</p>\n", "LastActivityDate": "2014-07-20T01:33:42.570"}, "24846475": {"ParentId": "24846456", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-07-20T01:22:06.340", "Score": "3", "LastEditorUserId": "47453", "LastEditDate": "2014-07-20T01:36:57.877", "Id": "24846475", "OwnerUserId": "47453", "Body": "<p>Doing this:</p>\n<pre><code>int * x = new int[3];\nx[0] = 1;\nx[2] = 2;\n\ndelete [] x;\n\nx[0] = 3; // &lt;-- Undefined Behavior!\n</code></pre>\n<p>Dereferencing a pointer that points to memory that you've deleted is <strong>undefined behavior</strong>.</p>\n<p>Continuing to use that pointer will cause your program to behave in undefined ways including possibly crashing or having any number of other issues.</p>\n<p>That being said, <code>x</code> is just a variable. So we can keep using the variable. We just can't continue to use <strong>what it pointed to</strong>. So let's look at some code to explain this:</p>\n<pre><code>int * x = new int[3];\nx[0] = 1;\nx[2] = 2;\n\ndelete [] x;\nx = NULL;\n\nx = new int[4];\nx[3] = 4; // &lt;-- This is fine.\n</code></pre>\n", "LastActivityDate": "2014-07-20T01:36:57.877"}, "24846469": {"ParentId": "24846456", "CommentCount": "2", "CreationDate": "2014-07-20T01:20:20.140", "OwnerUserId": "121747", "PostTypeId": "2", "Id": "24846469", "Score": "2", "Body": "<p>You are not reallocating the array:</p>\n<pre><code>int *a = new int[n];\n...\ncin &gt;&gt; a[i]\n...\ndelete [] a;\n...\n// here you must allocate a new array\n...\ncin &gt;&gt; a[i];\n</code></pre>\n<p>Once you delete the array, memory on heap that was available to is no longer available, you are storing data with your second <code>cin</code> where you shouldn't. In your example this address <code>0x001172C8</code> becomes invalid after the delete. Allocating a new array should provide you a new address (usually).</p>\n", "LastActivityDate": "2014-07-20T01:20:20.140"}, "bq_ids": {"n4140": {"so_24846456_24846529_1": {"section_id": 6820, "quality": 1.0, "length": 5}, "so_24846456_24846529_2": {"section_id": 6844, "quality": 0.6923076923076923, "length": 9}}, "n3337": {"so_24846456_24846529_1": {"section_id": 6575, "quality": 1.0, "length": 5}, "so_24846456_24846529_2": {"section_id": 6594, "quality": 0.6923076923076923, "length": 9}}, "n4659": {"so_24846456_24846529_1": {"section_id": 8312, "quality": 1.0, "length": 5}, "so_24846456_24846529_2": {"section_id": 8336, "quality": 0.6923076923076923, "length": 9}}}});