post_cb({"18452270": {"ParentId": "18451683", "CommentCount": "0", "Body": "<p>This happes when general object oriented terms are mixed with C++ related terms. </p>\n<ul>\n<li>subobject: Any object that is stored within another object (array elements, base class objects and data member objects).</li>\n<li>sub-class: A general object orientation term refering to what in C++ is called the \"derived class\"</li>\n<li>super-class: A general object orientation term refering to what in C++ is called the \"base class\". </li>\n<li>complete object: Any object that is not stored within another object. </li>\n</ul>\n<p>Just a little hint - When talking in C++ land, I try to use the C++ terminology. When talking in Java land, I'm trying to talk with the Java terminology.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "18452270", "Score": "4", "CreationDate": "2013-08-26T20:13:50.843", "LastActivityDate": "2013-08-26T20:13:50.843"}, "18451954": {"ParentId": "18451683", "CommentCount": "0", "Body": "<p>I think most often sub-object confusingly refers to the base-class-related parts of the sub-class object (e.g. some vtable pointers), especially in a setting when multiple inheritance is involved. I'd suggest avoiding the term and stick to the more stablished terminology (Super/Sub, Base/Derived).</p>\n", "OwnerUserId": "2704853", "PostTypeId": "2", "Id": "18451954", "Score": "0", "CreationDate": "2013-08-26T19:52:33.720", "LastActivityDate": "2013-08-26T19:52:33.720"}, "18452260": {"ParentId": "18451683", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The C++ Standard has a clear definition of what a <em>subobject</em> is. That said, many people don't (precisely) use the language of the Standard when talking about C++. One popular example is the term <em>object</em>. From languages like Java, some people tend to use <em>object</em> only in the sense of <em>instance of a class</em>, which wouldn't apply to <code>int</code>. In the terms of the C++ Standard, an <code>int</code> is an object.</p>\n<p>What the Standard says in [intro.object]/2:</p>\n<blockquote>\n<p id=\"so_18451683_18452260_0\">Objects can contain other objects, called <em>subobjects</em>. A subobject can be a <em>member subobject</em>, a <em>base class subobject</em>, or an array element. An object that is not a subobject of any other object is called a <em>complete object</em>.</p>\n</blockquote>\n<p>This is to be understand in the context of the (possible) memory layout. It isn't fully specified, but most likely looks like this:</p>\n<pre><code>class Foo { int i; };\nclass Bar : public Foo { int j; };\n</code></pre>\n<p>An object of type <code>Bar</code> could look like this in memory:</p>\n<pre>\n+-Bar-------------------+\n|  +-Foo-----+          |\n|  |  int i  |  int j;  |\n|  +---------+          |\n+-----------------------+\n</pre>\n<p>That is, the members of <code>Foo</code> are members of <code>Bar</code> like the direct members of <code>Bar</code>. Every object of <code>Bar</code> therefore \"contains\" an object of type <code>Foo</code>. Also consider</p>\n<pre><code>Bar b;\nBar* pBar = &amp;b;\nFoo* pFoo = &amp;b;\n</code></pre>\n<pre>\n+-Bar-------------------+\n|  +-Foo-----+          |\n|  |  int i  |  int j;  |\n|  +---------+          |\n+--^--------------------+\n^  |pFoo\n|pBar\n</pre>\n<p>To allow <code>pFoo</code> to point to complete objects of type <code>Foo</code> and to subobjects of type <code>Foo</code>, there needs to be a whole and (memory-wise) independent object of type <code>Foo</code> inside any object of type <code>Bar</code>. It might not be known at compile-time which one is the case, but the code produced for <code>pFoo-&gt;i = 5;</code> has to work for both.</p>\n<p>This all is specified under the as-if rule, i.e. it doesn't have to be that way, but it has to observably behave that way. Also, it isn't required that this is the actual memory layout, but it is a common implementation.</p>\n<hr>\n<p>In [intro.object]/4</p>\n<blockquote>\n<p id=\"so_18451683_18452260_1\">If a complete object, a data member, or an array element is of class type, its type is considered the <em>most derived class</em>, to distinguish it from the class type of any base class subobject; an object of a most derived class type or of a non-class type is called a <em>most derived object</em>.</p>\n</blockquote>\n<p>There's no use of the word <em>super</em> in the Standard other than <em>supersede</em> and <em>superset</em>. There's <em>base class</em> and <em>derived class</em> (as well as ~ object).</p>\n<hr>\n<p>Outside the C++ language Standard, the term <em>superclass</em> is used to refer to a <em>base class</em>, and the term <em>subclass</em> is used to refer to a <em>derived class</em>. This refers to the OO concepts and classification, much like a <em>Species</em> is a sub-category of a <em>Genus</em> in biology.</p>\n<p>But in this categorization, there's no memory layout, hence no need to talk about <em>subobjects</em>. There are <em>instances</em> or <em>objects</em> (in the OO sense) <em>of classes</em>, so you could talk about <em>objects of a superclass</em> and <em>objects of a subclass</em>. The confusion might stem from abbreviating this <em>object of a subclass</em> to <em>subobject</em>, and mixing language of OO with language from the C++ Standard.</p>\n</hr></hr>", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2013-08-26T20:44:48.930", "Id": "18452260", "Score": "11", "CreationDate": "2013-08-26T20:13:22.640", "LastActivityDate": "2013-08-26T20:44:48.930"}, "18452522": {"ParentId": "18451683", "CommentCount": "0", "Body": "<p><em>Subobject</em> is C++ terminology for an object that's part of another object; either a member or a base class.</p>\n<p><em>Subclass</em> is terminology used in other languages, and more general discussion of inheritance, to mean a derived class. This comes from the convention of drawing class hierarchies as upside-down trees, with the root at the top. C++ doesn't use this term, perhaps because of the potential confusion you describe.</p>\n<p>To avoid confusion when discussing inheritance in C++, use the standard terminology of <em>base</em> and <em>derived</em> classes.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "18452522", "Score": "2", "CreationDate": "2013-08-26T20:31:23.433", "LastActivityDate": "2013-08-26T20:31:23.433"}, "18451683": {"CommentCount": "4", "AcceptedAnswerId": "18452260", "PostTypeId": "1", "LastEditorUserId": "2672807", "CreationDate": "2013-08-26T19:34:33.903", "LastActivityDate": "2013-08-26T20:44:48.930", "LastEditDate": "2013-08-26T19:43:42.177", "ViewCount": "2189", "FavoriteCount": "1", "Title": "C++ Disambiguation: subobject and subclass object", "Id": "18451683", "Score": "1", "Body": "<p>Basically what the title says. I have been referring to Base objects as subobjects. Is that correct and would it also be correct that <code>subobject</code> == <code>superclass object</code>? Which one is preferred?</p>\n<p>The <code>subclass</code> means the derived class and the <code>subclass object</code> means the derived class' object, right?</p>\n<p>The confusion for me is that <code>subclass object</code> != <code>subobject</code>.</p>\n<p>If any of this is right, anyway..</p>\n<p>Thanks</p>\n", "Tags": "<c++><inheritance><subclass>", "OwnerUserId": "2672807", "AnswerCount": "5"}, "18451844": {"ParentId": "18451683", "CommentCount": "0", "Body": "<p>I would call it parent object maybe?</p>\n", "OwnerUserId": "1047852", "PostTypeId": "2", "Id": "18451844", "Score": "-1", "CreationDate": "2013-08-26T19:45:45.420", "LastActivityDate": "2013-08-26T19:45:45.420"}, "bq_ids": {"n4140": {"so_18451683_18452260_1": {"section_id": 5793, "quality": 0.9333333333333333, "length": 28}, "so_18451683_18452260_0": {"section_id": 5791, "quality": 0.8260869565217391, "length": 19}}, "n3337": {"so_18451683_18452260_1": {"section_id": 5566, "quality": 0.9333333333333333, "length": 28}, "so_18451683_18452260_0": {"section_id": 5564, "quality": 0.8260869565217391, "length": 19}}, "n4659": {"so_18451683_18452260_1": {"section_id": 7252, "quality": 0.9333333333333333, "length": 28}, "so_18451683_18452260_0": {"section_id": 7248, "quality": 0.8260869565217391, "length": 19}}}});