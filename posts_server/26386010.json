post_cb({"26386337": {"ParentId": "26386010", "PostTypeId": "2", "CommentCount": "15", "Body": "<p>There's surprisingly little in the standard about this. About all we hear about redeclaration is:</p>\n<blockquote>\n<p id=\"so_26386010_26386337_0\"><code>[C++11: 3.1/1]:</code> A declaration (Clause 7) may introduce one or more names into a translation unit or redeclare names introduced by previous declarations. <em>[..]</em></p>\n</blockquote>\n<p>and the only relevant part of <code>auto</code>'s semantics:</p>\n<blockquote>\n<p id=\"so_26386010_26386337_1\"><code>[C++11: 7.1.6.4/3]:</code> Otherwise, the type of the variable is deduced from its initializer. <em>[..]</em></p>\n</blockquote>\n<p>(reminding us that the type of <code>x</code> is <code>int</code>).</p>\n<p>We know that a variable must be given the same type by all declarations:</p>\n<blockquote>\n<p id=\"so_26386010_26386337_2\"><code>[C++11: 3.5/10]:</code> After all adjustments of types (during which typedefs (7.1.3) are replaced by their definitions), <strong>the types specified by all declarations referring to a given variable or function shall be identical</strong>, except that declarations for an array object can specify array types that differ by the presence or absence of a major array bound (8.3.4). A violation of this rule on type identity does not require a diagnostic.</p>\n</blockquote>\n<p>and the \"after all adjustments of types\" ought to take care of any questions regarding <code>auto</code>'s participation in all of this; my interpretation, then, is that <strong>this is inherently a valid redeclaration (and definition) of the <code>x</code> at global scope with type <code>int</code>, and that Clang is correct</strong>. Even if we propose that <code>auto</code> does not count as \"adjustment of type\", since no diagnostic is required, at worst <em>all</em> listed implementations are compliant in their own way.</p>\n<p>I believe GCC and Visual Studio are taking the following as inspiration:</p>\n<blockquote>\n<p id=\"so_26386010_26386337_3\"><code>[C++11: 7.1.6.4/5]:</code> A program that uses <code>auto</code> in a context not explicitly allowed in this section is ill-formed.</p>\n</blockquote>\n<p>\u2026but I think that this is short-sighted. It seems unlikely that the standard language is intended to prohibit the usual redeclaration rules, just because they are not repeated or explicitly referenced from within <code>7.1.6.4</code>.</p>\n<p>C++14 adds wording that relates to declarations of <em>functions</em> with deduced types:</p>\n<blockquote>\n<p id=\"so_26386010_26386337_4\"><code>[C++14: 7.1.6.4/13]:</code> Redeclarations or specializations of a function or function template with a declared return type that uses a placeholder type shall also use that placeholder, not a deduced type. <em>[..]</em></p>\n</blockquote>\n<p>By symmetry one might suggest that, in your <code>int</code> case, it is intended that GCC and VS be correct in rejecting the program. However, this is a different feature (since deduction cannot be applied to mere declarations) and thus a different scenario.</p>\n<p>Either way, improved standard wording would help here. I consider it a [reasonably minor] editorial defect.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2014-10-18T17:32:08.987", "Id": "26386337", "Score": "22", "CreationDate": "2014-10-15T15:28:49.673", "LastActivityDate": "2014-10-18T17:32:08.987"}, "26386010": {"CommentCount": "0", "AcceptedAnswerId": "26386337", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2014-10-15T15:12:50.447", "LastActivityDate": "2014-10-18T17:32:08.987", "LastEditDate": "2014-10-15T15:42:53.063", "ViewCount": "1065", "FavoriteCount": "4", "Title": "Does a declaration using \"auto\" match an extern declaration that uses a concrete type specifier?", "Id": "26386010", "Score": "49", "Body": "<p>Consider the following program:</p>\n<pre><code>extern int x;\nauto x = 42;\nint main() { }\n</code></pre>\n<p>Clang 3.5 accepts it (<a href=\"http://coliru.stacked-crooked.com/a/8346873c11d41df9\">live demo</a>), GCC 4.9 and VS2013 do not (<a href=\"http://coliru.stacked-crooked.com/a/4d0cfeba70541e49\">live demo for the former</a>). Who is right, and where is the correct behavior specified in the C++ Standard?</p>\n", "Tags": "<c++><c++11><language-lawyer><extern><c++14>", "OwnerUserId": "1932150", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26386010_26386337_4": {"section_id": 5457, "quality": 0.8888888888888888, "length": 16}, "so_26386010_26386337_3": {"section_id": 5450, "quality": 0.7777777777777778, "length": 7}, "so_26386010_26386337_1": {"section_id": 5448, "quality": 0.625, "length": 5}, "so_26386010_26386337_0": {"section_id": 7033, "quality": 0.8823529411764706, "length": 15}, "so_26386010_26386337_2": {"section_id": 7143, "quality": 0.9069767441860465, "length": 39}}, "n3337": {"so_26386010_26386337_3": {"section_id": 5244, "quality": 0.7777777777777778, "length": 7}, "so_26386010_26386337_1": {"section_id": 5242, "quality": 0.75, "length": 6}, "so_26386010_26386337_0": {"section_id": 6779, "quality": 0.8823529411764706, "length": 15}, "so_26386010_26386337_2": {"section_id": 6887, "quality": 0.9069767441860465, "length": 39}}, "n4659": {"so_26386010_26386337_3": {"section_id": 6877, "quality": 0.7777777777777778, "length": 7}, "so_26386010_26386337_1": {"section_id": 6875, "quality": 0.625, "length": 5}, "so_26386010_26386337_0": {"section_id": 8530, "quality": 0.8823529411764706, "length": 15}, "so_26386010_26386337_2": {"section_id": 8644, "quality": 0.9069767441860465, "length": 39}, "so_26386010_26386337_4": {"section_id": 6883, "quality": 0.8888888888888888, "length": 16}}}});