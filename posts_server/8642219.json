post_cb({"8642338": {"ParentId": "8642219", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-12-27T07:57:25.477", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:34:41.690", "Id": "8642338", "OwnerUserId": "671366", "Body": "<p>Have a look at this <a href=\"https://stackoverflow.com/questions/325555/c-static-member-method-call-on-class-instance\">question</a>.</p>\n<p>According to the standard (C++03, 9.4 static members):</p>\n<blockquote>\n<p id=\"so_8642219_8642338_0\">A static member s of class X may be referred to using the qualified-id\n  expression X::s; it is not necessary to use the class member access\n  syntax (5.2.5) to refer to a static member. A static member may be\n  referred to using the class member access syntax, in which case the\n  object-expression is evaluated.</p>\n</blockquote>\n<p>So, when you already have an object and you're calling a static method on it, then there is no difference to using the class member access syntax.</p>\n<p>If you however need to create the object first (be it by instantiating the object directly before, or by calling some function), then this creation process will of course take up a little extra time and memory. The <em>this</em>-Pointer, however, is never passed in to a static function, the call itself is always the same, no matter how it was written.</p>\n", "LastActivityDate": "2011-12-27T08:03:05.650"}, "8642219": {"CommentCount": "2", "ViewCount": "271", "CreationDate": "2011-12-27T07:41:13.233", "LastActivityDate": "2011-12-27T08:03:05.650", "Title": "c++ accessing static member function with member-selection operator (. or \u2013>)", "AcceptedAnswerId": "8642338", "PostTypeId": "1", "Id": "8642219", "Score": "2", "Body": "<p>I just noticed that we can access c++ static member function by member-selection operator (. or \u2013&gt;) </p>\n<p>for example:</p>\n<pre><code>class StaticTest\n{\nprivate:\n  int y;\n  static int x;\npublic:\n  StaticTest():y(100){\n\n  }\n  static int count()\n  {\n    return x;\n  }\n  int GetY(){return y;}\n  void SetY(){\n    y = this-&gt;count();                         //#1 accessing with -&gt; operator \n  }\n};\n</code></pre>\n<p>Here are how to use</p>\n<pre><code>  StaticTest test;\n  printf_s(\"%d\\n\", StaticTest::count());      //#2\n  printf_s(\"%d\\n\", test.GetY());\n  printf_s(\"%d\\n\", test.count());             //#3 accessing with . operator \n  test.SetY();\n</code></pre>\n<ol>\n<li>what is the use case of #1 and #3?</li>\n<li>what is the difference between #2 and #3?</li>\n</ol>\n<p>Another style of #1 for accessing static member function in member function is </p>\n<pre><code>  void SetY(){\n    y = count();                             //however, I regard it as \n  }                                          // StaticTest::count()\n</code></pre>\n<p>But now it looks more like <strong><em>this-&gt;count()</em></strong>. Is there any difference of two style calling?</p>\n<p>Thanks</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "544213", "AnswerCount": "3"}, "8642318": {"ParentId": "8642219", "CommentCount": "0", "Body": "<p>I'm a little confused about the answer to your first question, but with regards to your second question: </p>\n<p>in #2 ( <code>StaticTest::count()</code> ), you used the count() method in a static manner, which means you called the function without creating a StaticTest object.</p>\n<p>in #3 (<code>test.count()</code>), you created a StaticTest object called test, and called the method through the object (even though it was unnecessary.)</p>\n<p>Functionally, there is no difference, but #2 is the preferred way of calling StaticMethods. Making an object when it is not needed is bad use of memory.</p>\n", "OwnerUserId": "821110", "PostTypeId": "2", "Id": "8642318", "Score": "1", "CreationDate": "2011-12-27T07:54:04.223", "LastActivityDate": "2011-12-27T07:54:04.223"}, "8642366": {"ParentId": "8642219", "CommentCount": "0", "Body": "<p>C++03, 9.4 static members</p>\n<blockquote>\n<p id=\"so_8642219_8642366_0\">A static member s of class X may be referred to using the qualified-id expression X::s; it is not necessary to use the class\n  member access syntax (5.2.5) to refer to a static member. A static\n  member may be referred to using the class member access syntax, in\n  which case the object-expression is evaluated.</p>\n</blockquote>\n", "OwnerUserId": "312896", "PostTypeId": "2", "Id": "8642366", "Score": "1", "CreationDate": "2011-12-27T07:59:51.960", "LastActivityDate": "2011-12-27T07:59:51.960"}, "bq_ids": {"n4140": {"so_8642219_8642366_0": {"section_id": 5900, "quality": 0.9333333333333333, "length": 28}, "so_8642219_8642338_0": {"section_id": 5900, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_8642219_8642366_0": {"section_id": 5672, "quality": 0.9333333333333333, "length": 28}, "so_8642219_8642338_0": {"section_id": 5672, "quality": 0.9333333333333333, "length": 28}}, "n4659": {"so_8642219_8642366_0": {"section_id": 7382, "quality": 0.9333333333333333, "length": 28}, "so_8642219_8642338_0": {"section_id": 7382, "quality": 0.9333333333333333, "length": 28}}}});