post_cb({"31843278": {"ParentId": "31843161", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I did not check the quote but I think this example will be relevant</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace N1\n{    \nstruct A\n{\n    static int x;\n};\n}    \n\nusing N1::A;\n\nint x = 10;\nint N1::A::x = 20;\n\nint A = 30;\n\nint main()\n{\n\n    std::cout &lt;&lt; A::x &lt;&lt; std::endl;\n}    \n</code></pre>\n<p>The program output is</p>\n<pre><code>20\n</code></pre>\n<p>The words <strong>within the same scope</strong>  are ambiguous. So you can consider a modified example</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace N1\n{    \nstruct A\n{\n    static int x;\n};\n\nint A = 30;\n}    \n\nusing N1::A;\n\nint x = 10;\nint N1::A::x = 20;\n\nint main()\n{\n\n    std::cout &lt;&lt; A::x &lt;&lt; std::endl;\n}    \n</code></pre>\n<p>In the both programs the declaration of the object A of type int </p>\n<pre><code>int A = 30;\n</code></pre>\n<p>hides the declaration of <code>struct A</code>.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-08-05T21:55:41.130", "Id": "31843278", "Score": "0", "CreationDate": "2015-08-05T21:37:03.460", "LastActivityDate": "2015-08-05T21:55:41.130"}, "31843161": {"CommentCount": "0", "ViewCount": "137", "CreationDate": "2015-08-05T21:28:20.673", "LastActivityDate": "2015-08-06T17:45:39.600", "Title": "An example for this statement in section 3.4.3.1 of the C++ standard?", "AcceptedAnswerId": "31862004", "PostTypeId": "1", "Id": "31843161", "Score": "2", "Body": "<p>Can someone post a useful example that illustrates (1.4).</p>\n<blockquote>\n<p id=\"so_31843161_31843161_0\">If the nested-name-specifier of a qualified-id nominates a class, the name specified after the nested-namespecifier is looked up in the scope of the class (10.2), except for the cases listed below. The name shall represent one or more members of that class or of one of its base classes (Clause 10). [ Note: A class member can be referred to using a qualified-id at any point in its potential scope (3.3.7). \u2014 end note ] The exceptions to the name lookup rule above are the following: </p>\n<p id=\"so_31843161_31843161_1\">(1.1) \u2014 a destructor name is looked up as specified in</p>\n<p id=\"so_31843161_31843161_2\">(1.2) \u2014 a conversion-type-id of a conversion-function-id is looked up in the same manner as a conversion-type-id in a class member\n  access (see 3.4.5); </p>\n<p id=\"so_31843161_31843161_3\">(1.3) \u2014 the names in a template-argument of a template-id are looked up in the context in which the entire postfix-expression occurs. </p>\n<p id=\"so_31843161_31843161_4\"><strong>(1.4) \u2014 the lookup for a name specified in a using-declaration (7.3.3) also finds class or enumeration names hidden within the same scope (3.3.10).</strong></p>\n</blockquote>\n", "Tags": "<c++>", "OwnerUserId": "1346994", "AnswerCount": "2"}, "31862004": {"ParentId": "31843161", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is a resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#400\" rel=\"nofollow\">CWG 400</a> (which references <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1996/N0905.pdf\" rel=\"nofollow\">N0905</a>) which questions if the following code was well-formed:</p>\n<pre><code>struct A { int i; struct i {}; };\nstruct B { int i; struct i {}; };\nstruct D : public A, public B { using A::i; void f (); };\nvoid D::f () { struct i x; }\n</code></pre>\n<p>The bullet point was added to the standard to make it clear that <code>using A::i</code> brings in <em>both</em> <code>struct i { }</code> <em>and</em> <code>int i</code> into <code>D</code>, such that <code>struct i x</code> is well-formed. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-08-06T17:45:39.600", "Id": "31862004", "Score": "1", "CreationDate": "2015-08-06T17:20:55.153", "LastActivityDate": "2015-08-06T17:45:39.600"}, "bq_ids": {"n4140": {"so_31843161_31843161_0": {"section_id": 7113, "quality": 0.8571428571428571, "length": 42}, "so_31843161_31843161_4": {"section_id": 7113, "quality": 0.8666666666666667, "length": 13}, "so_31843161_31843161_3": {"section_id": 7113, "quality": 1.0, "length": 8}, "so_31843161_31843161_2": {"section_id": 7113, "quality": 0.9090909090909091, "length": 10}, "so_31843161_31843161_1": {"section_id": 7113, "quality": 1.0, "length": 4}}, "n3337": {"so_31843161_31843161_0": {"section_id": 6857, "quality": 0.8571428571428571, "length": 42}, "so_31843161_31843161_4": {"section_id": 6857, "quality": 0.8666666666666667, "length": 13}, "so_31843161_31843161_3": {"section_id": 6857, "quality": 1.0, "length": 8}, "so_31843161_31843161_2": {"section_id": 6857, "quality": 0.9090909090909091, "length": 10}, "so_31843161_31843161_1": {"section_id": 6857, "quality": 1.0, "length": 4}}, "n4659": {"so_31843161_31843161_2": {"section_id": 8614, "quality": 0.9090909090909091, "length": 10}, "so_31843161_31843161_0": {"section_id": 8614, "quality": 0.8571428571428571, "length": 42}, "so_31843161_31843161_3": {"section_id": 8614, "quality": 1.0, "length": 8}, "so_31843161_31843161_4": {"section_id": 8614, "quality": 0.8666666666666667, "length": 13}}}});