post_cb({"bq_ids": {"n4140": {"so_30847558_30847558_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 369}, "so_30847558_30847679_0": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_30847558_30847558_0": {"length": 7, "quality": 0.875, "section_id": 369}}, "n3337": {"so_30847558_30847558_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 359}, "so_30847558_30847679_0": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_30847558_30847558_0": {"length": 7, "quality": 0.875, "section_id": 359}}, "n4659": {"so_30847558_30847558_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 382}, "so_30847558_30847679_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_30847558_30847558_0": {"length": 6, "quality": 0.75, "section_id": 382}}}, "30847679": {"Id": "30847679", "PostTypeId": "2", "Body": "<p>The C++ standard is pretty clear on this, from [dcl.init]:</p>\n<blockquote>\n<p id=\"so_30847558_30847679_0\">If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type\n  with a user-provided default constructor.</p>\n</blockquote>\n<p>So gcc is non-compliant in this regard, and cppreference is correct.</p>\n", "LastActivityDate": "2015-06-15T14:24:26.810", "CommentCount": "3", "CreationDate": "2015-06-15T14:24:26.810", "ParentId": "30847558", "Score": "4", "OwnerUserId": "2069064"}, "30847558": {"ViewCount": "142", "Body": "<p>I was reading about <strong>default initialization</strong> in C++ on <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow\">here</a>. It says that:</p>\n<blockquote>\n<p id=\"so_30847558_30847558_0\">If T is a const-qualified type, it must be a class type with a\n  user-provided default constructor.</p>\n</blockquote>\n<p>The example given on that link is (I've only shown program statements relevant to my question, others I've omitted):</p>\n<pre><code>struct T1 {};\nint main()\n{\n    const T1 nd;    //  error: const class type with implicit ctor\n}\n</code></pre>\n<p>But it compiles fine on gcc 4.8.1 &amp; 4.9.2. I also compiled it with <code>-std=c++14</code> option but it still compiles fine. Is this gcc extension or something else?</p>\n<p>So, I think the reason behind successful compilation of above program is that there are no members in struct T1. So, no default initialization occurs here in this case. But if I add the one data member like:</p>\n<pre><code>struct T1 { int a; };\nint main()\n{\n    const T1 nd;    //  error: const class type with implicit ctor\n}\n</code></pre>\n<p>Then compiler gives appropriate error messages as following:</p>\n<pre><code>6 11 [Error] uninitialized const 'a' [-fpermissive]\n2 8 [Note] 'const struct T1' has no user-provided default constructor\n3 8 [Note] and the implicitly-defined constructor does not initialize 'int T1::a'\n</code></pre>\n<p>So, shouldn't the statment be written like this?</p>\n<blockquote>\n<p id=\"so_30847558_30847558_1\">If T is a const-qualified type having at least one data member, it\n  must be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>Correct me If I am wrong &amp; understood incorrect something.</p>\n", "AcceptedAnswerId": "30847679", "Title": "Why this ill formed program compiles fine in g++?", "CreationDate": "2015-06-15T14:19:11.720", "Id": "30847558", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-03-06T18:16:18.620", "LastEditorUserId": "3777958", "LastActivityDate": "2016-03-06T18:16:18.620", "ClosedDate": "2015-06-15T16:37:08.763", "Score": "1", "OwnerUserId": "3777958", "Tags": "<c++><c++11><initialization><g++>", "AnswerCount": "1"}});