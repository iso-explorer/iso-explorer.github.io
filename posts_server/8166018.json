post_cb({"bq_ids": {"n4140": {"so_8166018_8166480_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5442}, "so_8166018_8166480_1": {"length": 23, "quality": 0.5897435897435898, "section_id": 5443}}, "n3337": {"so_8166018_8166480_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5237}, "so_8166018_8166480_1": {"length": 23, "quality": 0.5897435897435898, "section_id": 5238}}, "n4659": {"so_8166018_8166480_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6869}, "so_8166018_8166480_1": {"length": 23, "quality": 0.5897435897435898, "section_id": 6870}}}, "8166322": {"Id": "8166322", "PostTypeId": "2", "Body": "<p>Consider a namespace instead of nested class. </p>\n<pre><code>class A;\nA * pa;\nnamespace A_help\n{\n   class B;\n} // namespace A_help\nA_help::B * pb;\n</code></pre>\n", "LastActivityDate": "2011-11-17T11:26:32.797", "Score": "3", "CreationDate": "2011-11-17T11:26:32.797", "ParentId": "8166018", "CommentCount": "0", "OwnerUserId": "124161"}, "8166018": {"ViewCount": "207", "Body": "<p>I can declare a pointer to a class that hasn't yet been defined, like this:</p>\n<pre><code>class A ;\nA* p ;\n</code></pre>\n<p>But how do I do this for a nested class? I want to do this:</p>\n<pre><code>class A ;\nclass A::B ; // error: 'B' in class 'A' does not name a type\nA::B* p ;\n</code></pre>\n<p>But it doesn't compile (using g++ 4.5.2). Is there any way to make this work?</p>\n", "AcceptedAnswerId": "8166480", "Title": "Declaring nested classes before they are defined", "CreationDate": "2011-11-17T11:02:33.120", "Id": "8166018", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2011-11-17T11:38:41.650", "Score": "5", "OwnerUserId": "428857", "Tags": "<c++>", "AnswerCount": "2"}, "8166480": {"Id": "8166480", "PostTypeId": "2", "Body": "<p>There are a number of parts of C++03 that disallow forward declarations of nested classes. In particular, \u00a7 7.1.5.3 Elaborated type specifiers:</p>\n<blockquote>\n<ol>\n<li><p id=\"so_8166018_8166480_0\">If an <i>elaborated-type-specifier</i> is the sole constituent of a declaration, the declaration is ill-formed unless it is an explicit specialization (14.7.3), an explicit instantiation (14.7.2) or it has one of the following forms:</p>\n<pre><i>class-key</i> <i>identifier</i> ; \nfriend <i>class-key</i> ::<sub>opt</sub> <i>identifier</i> ; \nfriend <i>class-key</i> ::<sub>opt</sub> <i>template-id</i> ; \nfriend <i>class-key</i> ::<sub>opt</sub> <i>nested-name-specifier</i> <i>identifier</i> ; \nfriend <i>class-key</i> ::<sub>opt</sub> <i>nested-name-specifier</i> <i>template</i><sub>opt</sub>\n<i>template-id</i> ;\n</pre>\n</li>\n<li><p id=\"so_8166018_8166480_1\">3.4.4 describes how name lookup proceeds for the <i>identifier</i> in an <i>elaborated-type-specifier</i>. If the identifier resolves to a <i>class-name</i> or <i>enum-name</i>, the <i>elaborated-type-specifier</i> introduces it into the declaration the same way a <i>simple-type-specifier</i> introduces its <i>type-name</i>. [...] If name lookup does not find a declaration for the name, the elaborated-type-specifier is ill-formed unless it is of the simple form <i>class-key</i> <i>identifier</i> in which case the <i>identifier</i> is declared as described in 3.3.1.</p></li>\n</ol>\n</blockquote>\n<p>In short, when an identifier is scoped, the compiler must try to resolve the identifier. When the scope is a class, the compiler must look up the declaration for the identifier in the outer class. When the outer class hasn't yet been defined, this can't be done and the result is an ill-formed program.</p>\n", "LastActivityDate": "2011-11-17T11:38:41.650", "Score": "4", "CreationDate": "2011-11-17T11:38:41.650", "ParentId": "8166018", "CommentCount": "0", "OwnerUserId": "90527"}});