post_cb({"29776850": {"CommentCount": "6", "AcceptedAnswerId": "29777086", "CreationDate": "2015-04-21T15:38:03.763", "LastActivityDate": "2015-04-21T15:47:28.193", "PostTypeId": "1", "ViewCount": "236", "FavoriteCount": "2", "Title": "clang++ error on late default template parameter declaration", "Id": "29776850", "Score": "7", "Body": "<p>The following code compiles fine with g++, but not with clang++ (3.6):</p>\n<pre><code>// Forward declaration:\ntemplate &lt;class S, class T&gt;\nstruct Base;\n\ntemplate &lt;class T&gt;\nstruct BaseFriend {\n    friend struct Base&lt;int, T&gt;;\n};\n\n// Actual declaration:\ntemplate &lt;class S, class T = int&gt;\nstruct Base {\n    void foo() {}\n};\n\nstruct DerivedFriend : BaseFriend&lt;int&gt; {};\n\nstruct Derived : Base&lt;int&gt; {\n    void foo(int) {\n        Base&lt;int&gt;::foo();\n    }\n};\n</code></pre>\n<p>Error occurs in the <code>Derived::foo</code> definition:</p>\n<pre><code>error: too few template arguments for class template 'Base'\n    Base&lt;int&gt;::foo();\n    ^\ntest.cpp:3:8: note: template is declared here\nstruct Base;\n       ^\n</code></pre>\n<p>Error goes away after few minor fixes, like:</p>\n<ol>\n<li>If default template parameter is defined in forward declaration instead of actual declaration.</li>\n<li>Or if <code>DerivedFriend</code> is not used.</li>\n</ol>\n<p>But, what is wrong with the original code?</p>\n", "Tags": "<c++><templates><clang++>", "OwnerUserId": "1350936", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29776850_29777086_0": {"section_id": 63, "quality": 0.88, "length": 22}}, "n3337": {"so_29776850_29777086_0": {"section_id": 58, "quality": 0.88, "length": 22}}, "n4659": {"so_29776850_29777086_0": {"section_id": 65, "quality": 0.64, "length": 16}}}, "29777086": {"ParentId": "29776850", "CommentCount": "1", "CreationDate": "2015-04-21T15:47:28.193", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "29777086", "Score": "4", "Body": "<p>Definitely a clang bug, looks like <a href=\"https://llvm.org/bugs/show_bug.cgi?id=10147\" rel=\"nofollow\">#10147</a>. The standard clearly allows this [temp.param]/10:</p>\n<blockquote>\n<p id=\"so_29776850_29777086_0\">The set of default template-arguments available for use with a template declaration or definition is obtained\n  by merging the default arguments from the definition (if in scope) and all declarations in scope in the same\n  way default function arguments are (8.3.6). <em>[ Example:</em></p>\n<pre><code>template&lt;class T1, class T2 = int&gt; class A;\ntemplate&lt;class T1 = int, class T2&gt; class A;\n</code></pre>\n<p id=\"so_29776850_29777086_1\">is equivalent to</p>\n<pre><code>template&lt;class T1 = int, class T2 = int&gt; class A;\n</code></pre>\n<p id=\"so_29776850_29777086_2\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "LastActivityDate": "2015-04-21T15:47:28.193"}});