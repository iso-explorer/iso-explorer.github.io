post_cb({"34824404": {"ParentId": "34824323", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-01-16T06:54:45.593", "Score": "0", "LastEditorUserId": "464581", "LastEditDate": "2016-01-16T07:11:10.147", "Id": "34824404", "OwnerUserId": "464581", "Body": "<p>This has nothing to do with a difference between C and C++. It's solely about giving <code>delete[]</code> a pointer value that was not produced by <code>new[]</code>, and you'd get the same problem in C by giving <code>free</code> a pointer value not produced by <code>malloc</code> or <code>calloc</code>. The pointer value that this code uses is one produced by incrementing the original; use the original instead.</p>\n<hr>\n<p>There <em>is</em> a difference between C and C++ in this area, though. Namely that in C++ an application of the <code>++</code> operator is always an lvalue expression, while in C the result of the prefix <code>++</code> is \u201cthe new value of the operand after incrementation\u201d. This difference of semantics is not relevant to your code, however.</p>\n\nC99 \u00a76.5.3.1/2\n\n<blockquote>\n<p id=\"so_34824323_34824404_0\"><strong>\u201d</strong> The value of the operand of the prefix <code>++</code> operator is incremented. The result is the new value of the operand after incrementation. The expression <code>++E</code> is equivalent to <code>(E+=1)</code>.</p>\n</blockquote>\n\nC++11 \u00a75.3.2/1\n\n<blockquote>\n<p id=\"so_34824323_34824404_1\"><strong>\u201d</strong> The operand of prefix <code>++</code> is modified by adding 1, or set to <code>true</code> if it is <code>bool</code> (this use is deprecated). The\n  operand shall be a modifiable lvalue. The type of the operand shall be an arithmetic type or a pointer to\n  a completely-defined object type. The result is the updated operand; it is an lvalue, and it is a bit-field if\n  the operand is a bit-field. If <code>x</code> is not of type <code>bool</code>, the expression <code>++x</code> is equivalent to <code>x+=1</code></p>\n</blockquote>\n<hr>\n<p>Instead of creating dynamic arrays via expressions such as <code>new int[4]</code>, consider using <code>std::vector</code>. It automates the memory management, which means that you avoid many problems, including the one in this question. And it provides much convenient functionality, and is extremely well tested and reliable, which means less work and higher productivity.</p>\n</hr></hr>", "LastActivityDate": "2016-01-16T07:11:10.147"}, "34824356": {"ParentId": "34824323", "CommentCount": "0", "CreationDate": "2016-01-16T06:46:28.337", "OwnerUserId": "892256", "PostTypeId": "2", "Id": "34824356", "Score": "1", "Body": "<p>You need to use <code>delete</code> on the value returned by <code>new</code>. In your code this is not the case as you do <code>++p</code>.</p>\n<p>This is because new/delete uses <code>p</code> to look up housekeeping information that you are not privy to. As you pass in an invalid value for <code>p</code> it gets confused.</p>\n", "LastActivityDate": "2016-01-16T06:46:28.337"}, "34824323": {"CommentCount": "0", "ViewCount": "42", "CreationDate": "2016-01-16T06:42:40.093", "LastActivityDate": "2016-01-16T07:11:10.147", "Title": "pointers arithmetics not working in c++", "AcceptedAnswerId": "34824353", "PostTypeId": "1", "Id": "34824323", "Score": "-1", "Body": "<p>I had worked with pointer arithmetics in C but, I just started to learn <code>new</code> and <code>delete</code> in c++ &amp; I could not understand why I get runtime errors when incrementing the pointer in C++<br><br>\nI get the following error when i use p++ or ++p...<br>\n<code>free(): invalid pointer: 0x0000000002324c24 ***0x2324c240x2324c28Aborted (core dumped)</code></br></br></br></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int *p;\n    p=new int[4];\n    *p=34;\n    *(p+1)=36;\n    cout&lt;&lt;++p;//doesnot work(I just wanted to print the address)\n    cout&lt;&lt;p+1;//works \n    delete[] p;\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "4414160", "AnswerCount": "3"}, "34824353": {"ParentId": "34824323", "CommentCount": "2", "CreationDate": "2016-01-16T06:46:08.757", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "34824353", "Score": "3", "Body": "<p>You need to <code>delete[]</code> the <em>original</em> pointer, the one you got as a result of <code>new[]</code>. And you loose the original pointer because you do <code>++p</code>.</p>\n<p>That leads to <em>undefined behavior</em> when you do <code>delete[] p</code>.</p>\n", "LastActivityDate": "2016-01-16T06:46:08.757"}, "bq_ids": {"n4140": {"so_34824323_34824404_1": {"section_id": 6074, "quality": 0.8857142857142857, "length": 31}}, "n3337": {"so_34824323_34824404_1": {"section_id": 5842, "quality": 0.8857142857142857, "length": 31}}, "n4659": {"so_34824323_34824404_1": {"section_id": 7570, "quality": 0.6857142857142857, "length": 24}}}});