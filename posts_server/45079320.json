post_cb({"bq_ids": {"n4140": {"so_45079320_45079923_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 723}}, "n3337": {"so_45079320_45079923_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 712}}, "n4659": {"so_45079320_45079923_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 754}}}, "45079928": {"Id": "45079928", "PostTypeId": "2", "Body": "<p><code>std::vector&lt;T&gt;::emplace_back</code> requires a move constructor or copy constructor.  The reason is that it might need to reallocate memory and move/copy the existing objects into a new buffer.</p>\n<p>Even though you only called it on an empty vector, which wouldn't actually need to move any existing objects, remember that the same function <code>emplace_back</code> can be used on empty and non-empty vectors.  The function can't possibly know it's being used from an empty state only, so when the member function is instantiated, the code to deal with a non-empty vector must be valid too.</p>\n", "LastActivityDate": "2017-07-13T11:56:50.750", "Score": "1", "CreationDate": "2017-07-13T11:56:50.750", "ParentId": "45079320", "CommentCount": "1", "OwnerUserId": "459640"}, "45079923": {"Id": "45079923", "PostTypeId": "2", "Body": "<p>You are violating the constraints of <code>emaplce_back</code>.  If we look at table 101 from [sequence.reqmts] we have</p>\n<blockquote>\n<p id=\"so_45079320_45079923_0\"><em>Requires</em>: T shall be EmplaceConstructible into X from args. <strong>For vector, T shall also be MoveInsertable into X.</strong></p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>Since your class is not move insertable it will not work with <code>emplace_back</code>.</p>\n<p>The reason this is required is because of the <code>size()</code> becomes greater than the <code>capacity()</code> then the vector needs to allocate new storage and move the elements to that new storage.  If it can't do that then the vector can't function as intended.</p>\n", "LastActivityDate": "2017-07-13T11:56:43.063", "Score": "0", "CreationDate": "2017-07-13T11:56:43.063", "ParentId": "45079320", "CommentCount": "0", "OwnerUserId": "4342498"}, "45079320": {"ViewCount": "57", "Body": "<p>I have an object that I want to construct exactly once, because the class it is in keeps track its objects by adding raw pointers to them. Constructing it inline seems to fail though:</p>\n<pre><code>// Defined utilities:\nModuleClusterPlot(Type typeArg, const int&amp; layer, const int&amp; module, const int&amp; ladder, const int&amp; startEventArg, const int&amp; endEventArg);\n~ModuleClusterPlot();\n// Invalid utilities\nModuleClusterPlot(ModuleClusterPlot&amp; t_other) = delete;\nModuleClusterPlot(ModuleClusterPlot&amp;&amp; t_other) = delete;\nModuleClusterPlot&amp; operator=(const ModuleClusterPlot&amp; t_other) = delete;\nModuleClusterPlot&amp; operator=(ModuleClusterPlot&amp;&amp; t_other) = delete;\n</code></pre>\n<p>Calling the constructor via emplace back fails, because it tries to call the move constructor (why?):</p>\n<pre><code>moduleClusterPlots.emplace_back(t_type, t_layer, t_module, t_ladder, i, i);\n</code></pre>\n<p>What am I doing wrong here? I am using <code>gcc 7.1.0</code> wih <code>std=c++14</code> flag.</p>\n<p>Minimal example:</p>\n<pre><code>#include &lt;vector&gt;\n\nclass ModuleClusterPlot\n{\n    public:\n        enum Type\n        {\n            foo = 0,\n            bar\n        };\n\n        ModuleClusterPlot(Type typeArg);\n        ~ModuleClusterPlot();\n        // Invalid utilities\n        ModuleClusterPlot(ModuleClusterPlot&amp; t_other) = delete;\n        ModuleClusterPlot(ModuleClusterPlot&amp;&amp; t_other) = delete;\n        ModuleClusterPlot&amp; operator=(const ModuleClusterPlot&amp; t_other) = delete;\n        ModuleClusterPlot&amp; operator=(ModuleClusterPlot&amp;&amp; t_other) = delete;\n\n};\n\nint main()\n{\n    std::vector&lt;ModuleClusterPlot&gt; collection;\n    collection.emplace_back(ModuleClusterPlot::foo);\n}\n</code></pre>\n<p>How can I prevent calling the move constructor here?</p>\n", "AcceptedAnswerId": "45079928", "Title": "Emplace back fails at in place construction", "CreationDate": "2017-07-13T11:28:39.027", "Id": "45079320", "CommentCount": "8", "LastEditDate": "2017-07-13T11:46:10.973", "PostTypeId": "1", "LastEditorUserId": "3255071", "LastActivityDate": "2017-07-13T11:56:50.750", "Score": "-3", "OwnerUserId": "3255071", "Tags": "<c++><constructor><c++14><move-constructor><in-place>", "AnswerCount": "2"}});