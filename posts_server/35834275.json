post_cb({"bq_ids": {"n4140": {"so_35834275_35834337_1": {"length": 24, "quality": 0.96, "section_id": 6064}, "so_35834275_35834337_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 5954}}, "n3337": {"so_35834275_35834337_1": {"length": 24, "quality": 0.96, "section_id": 5832}, "so_35834275_35834337_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 5724}}, "n4659": {"so_35834275_35834337_1": {"length": 23, "quality": 0.92, "section_id": 7560}, "so_35834275_35834337_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 7441}}}, "35834337": {"Id": "35834337", "PostTypeId": "2", "Body": "<p><code>*</code> operator used for dereferencing pointer returns <em>lvalue</em> just like identifier that stands for variable such as <code>value</code>, which is a primary expression. So both of them will be accepted for reference arguments.</p>\n<p>Quote from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3337</a> 5.1.1 General (5.1 Primary expressions):</p>\n<blockquote>\n<p id=\"so_35834275_35834337_0\">8\n  An identifier is an id-expression provided it has been suitably declared (Clause 7).\u3000[...] The type of the expression is the type of the identifier.\n  The result is the entity denoted by the identifier. The result is an lvalue if the entity is a function, variable,\n  or data member and a prvalue otherwise.</p>\n</blockquote>\n<p>Quote from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3337</a> 5.3.1 Unary operators:</p>\n<blockquote>\n<p id=\"so_35834275_35834337_1\">1\n  The unary * operator performs indirection: the expression to which it is applied shall be a pointer to an\n  object type, or a pointer to a function type and the result is an lvalue referring to the object or function\n  to which the expression points. If the type of the expression is \u201cpointer to T,\u201d the type of the result is \u201cT.\u201d</p>\n</blockquote>\n", "LastActivityDate": "2016-03-07T00:24:41.930", "CommentCount": "0", "CreationDate": "2016-03-07T00:24:41.930", "ParentId": "35834275", "Score": "1", "OwnerUserId": "4062354"}, "35834374": {"Id": "35834374", "PostTypeId": "2", "Body": "<p>First, when you dereference your pointer p, you get an integer value (because you declare it as a pointer to an integer). In this case, dereferencing p gets you the, er, value of your 'value' variable. With me so far?  </p>\n<p>So now, what happens in the function call? The program dereferences the pointer p, and then passes an lvalue reference to your variable (value) to the function. The function is defined to take a reference (a pointer with some syntactic sugar). So yes, you are correct in thinking it is dereferenced to an integer. However, C++ passes the address of the value variable anyway, rather than an integer variable, because you've told it to only accept references in the function.  </p>\n", "LastActivityDate": "2016-03-07T00:29:43.300", "CommentCount": "0", "CreationDate": "2016-03-07T00:29:43.300", "ParentId": "35834275", "Score": "1", "OwnerUserId": "4791654"}, "35834275": {"ViewCount": "64", "Body": "<p>I understand calling foo(value) fine, but how does calling foo(*p) produce the same results? I thought it would error, but it works just fine. </p>\n<p>*p is dereferencing the pointer, getting the <strong>value</strong> at address stored in p, so isn't it equivalent to calling foo(5)? </p>\n<pre><code>void foo(int &amp;ptr)\n{\n    ptr = 6;\n}\n\nint main()\n{\n    using namespace std;\n    int value = 5;\n    int *p = &amp;value;\n    cout &lt;&lt; \"value = \" &lt;&lt; value &lt;&lt; '\\n';\n    foo(*p);\n    cout &lt;&lt; \"value = \" &lt;&lt; value &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "35834374", "Title": "C++ passing in pointer to a function with reference parameters", "CreationDate": "2016-03-07T00:15:48.353", "Id": "35834275", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-03-07T00:29:43.300", "Score": "2", "OwnerUserId": "4561927", "Tags": "<c++><pointers>", "AnswerCount": "2"}});