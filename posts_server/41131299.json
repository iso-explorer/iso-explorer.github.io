post_cb({"41131299": {"CommentCount": "4", "ViewCount": "75", "PostTypeId": "1", "LastEditorUserId": "1459996", "CreationDate": "2016-12-13T22:00:03.640", "LastActivityDate": "2016-12-14T08:45:24.370", "Title": "How to check if two addresses are the same?", "LastEditDate": "2016-12-14T08:45:24.370", "Id": "41131299", "Score": "-2", "Body": "<p>If given a function <code>operator=</code>, how can I check if two memory addresses are the same? I believe the following is correct, but it uses the <code>==</code> operator rather than the one defined. How would I do this with the <code>=</code> operator?</p>\n<pre><code>if(&amp;this == &amp;rhs)\n    return true;\n</code></pre>\n", "Tags": "<c++><operators><memory-address>", "OwnerUserId": "7233669", "AnswerCount": "1"}, "41131420": {"ParentId": "41131299", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You are not comparing the right address.  <code>this</code> is already a pointer to your object.  And it appears you are trying to implement the common pattern:</p>\n<pre><code>Foo &amp; Foo::operator=( const Foo &amp; rhs )\n{\n    if( this == &amp;rhs )\n    {\n        // :::\n    }\n\n    // :::\n}\n</code></pre>\n<p>Above, the type of <code>this</code> is <code>Foo*</code>, and <code>&amp;rhs</code> is <code>Foo const *</code>, making them comparable.</p>\n<hr>\n<p><em>[Edit: added relevant parts from standard, taken from C++14 draft standard]</em></p>\n<p>From section 5.3.1 <strong>[expr.unary.op]</strong> :</p>\n<blockquote id=\"so_41131299_41131420_0\">\n<ol start=\"3\">\n<li>The result of the unary &amp; operator is a pointer to its operand. The operand shall be an lvalue or a <em>qualified-id</em>.  ...</li>\n</ol>\n</blockquote>\n<p>From section 9.3.2 <strong>[class.this]</strong> :</p>\n<blockquote id=\"so_41131299_41131420_1\">\n<ol>\n<li>In the body of a non-static member function, the keyword <strong>this</strong> is a prvalue expression whose value is the address of the object for which the function is called.</li>\n</ol>\n</blockquote>\n<p>Since <code>this</code> is neither an lvalue nor a <em>qualified-id</em>, you cannot take its address and your compiler should report an error if you try.</p>\n</hr>", "OwnerUserId": "1553090", "LastEditorUserId": "1553090", "LastEditDate": "2016-12-13T22:34:54.650", "Id": "41131420", "Score": "1", "CreationDate": "2016-12-13T22:10:15.397", "LastActivityDate": "2016-12-13T22:34:54.650"}, "bq_ids": {"n4140": {"so_41131299_41131420_1": {"section_id": 5895, "quality": 1.0, "length": 13}, "so_41131299_41131420_0": {"section_id": 6066, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_41131299_41131420_1": {"section_id": 5666, "quality": 1.0, "length": 13}, "so_41131299_41131420_0": {"section_id": 5834, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_41131299_41131420_1": {"section_id": 7378, "quality": 1.0, "length": 13}, "so_41131299_41131420_0": {"section_id": 7562, "quality": 0.8181818181818182, "length": 9}}}});