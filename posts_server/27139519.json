post_cb({"27139593": {"ParentId": "27139519", "CommentCount": "0", "Body": "<p>Yes, you can have the <code>main</code> function signature any way you want it; but it will not be standard.  </p>\n<p>You will have to change the compiler to accept your new declaration. And emit the proper code for it. </p>\n<p>You may have to change the operating system to correctly pass the arguments from the User to your program.  </p>\n<p>Again, yes, other declarations are <em>possible</em>, but <strong>they will not be standard</strong> and require modifications to OS and tool chain.  </p>\n", "OwnerUserId": "225074", "PostTypeId": "2", "Id": "27139593", "Score": "0", "CreationDate": "2014-11-26T00:57:45.873", "LastActivityDate": "2014-11-26T00:57:45.873"}, "27139554": {"ParentId": "27139519", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In C, the only <em>portable</em> definitions for <code>main</code> are:</p>\n<pre><code>int main(void) { /* ... */ }\n</code></pre>\n<p>and</p>\n<pre><code>int main(int argc, char *argv[]) { /* ... */ }\n</code></pre>\n<p>or equivalent. Other implementation-defined forms are permitted -- but as the term \"implementation-defined\" implies, they're permitted <em>only</em> if your compiler chooses to permit them.</p>\n<p>There are some common extensions, such as:</p>\n<pre><code>int main(int argc, char *argv[], char *envp[]) { /* ... */ }\n</code></pre>\n<p>but I doubt that any compiler supports the particular form you suggest. I'm not sure how it would be useful; the existing <code>argc</code>/<code>argv</code> form allows arbitrarily many command-line arguments.</p>\n<p>C++ is slightly different from C in that it requires the return type to be <code>int</code>; in C, a compiler may, but need not, permit other return types. Also, in C++ <code>()</code> means that a function has no parameters, equivalent to C's <code>(void)</code>. (C++ also permits <code>(void)</code> for C compatibility.)</p>\n", "OwnerUserId": "827263", "LastEditorUserId": "827263", "LastEditDate": "2014-11-26T01:07:33.730", "Id": "27139554", "Score": "7", "CreationDate": "2014-11-26T00:53:50.460", "LastActivityDate": "2014-11-26T01:07:33.730"}, "27139540": {"ParentId": "27139519", "CommentCount": "0", "Body": "<p>Your compiler gets to make the decision of what signatures (and return type) of <code>main</code> are allowed, and what the behaviour of the program is for each one. Consult its documentation to find out about this.</p>\n<p>The only signatures that all compilers must support are the two standard ones (and equivalent):</p>\n<pre><code>int main(void)\nint main(int, char **)\n</code></pre>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "27139540", "Score": "1", "CreationDate": "2014-11-26T00:51:49.790", "LastActivityDate": "2014-11-26T00:51:49.790"}, "27139549": {"ParentId": "27139519", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>[basic.start.main]/2:</p>\n<blockquote>\n<p id=\"so_27139519_27139549_0\">An implementation shall not predefine the <code>main</code> function. This\n  function shall not be overloaded. It shall have a declared return type\n  of type int, but otherwise its type is implementation-defined. An\n  implementation shall allow both</p>\n<ul>\n<li>a function of () returning <code>int</code> and</li>\n<li>a function of <code>(int</code>, pointer to pointer to <code>char)</code>returning <code>int</code></li>\n</ul>\n<p id=\"so_27139519_27139549_1\">as the type of <code>main</code> (8.3.5).</p>\n</blockquote>\n<p>An implementation could theoretically allow the signature mentioned in the question - but it would be quite nonsensical, and it seems that no relevant compiler supports it. (What would it pass?)</p>\n<p>Although there are certain signatures of <code>main</code> that are indeed supported and not covered by standard, e.g.:</p>\n<pre><code>int main( int, char**, char** )\n</code></pre>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-26T00:58:43.120", "Id": "27139549", "Score": "1", "CreationDate": "2014-11-26T00:52:49.503", "LastActivityDate": "2014-11-26T00:58:43.120"}, "bq_ids": {"n4140": {"so_27139519_27139549_0": {"section_id": 7146, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_27139519_27139549_0": {"section_id": 6890, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_27139519_27139549_0": {"section_id": 8647, "quality": 0.9047619047619048, "length": 19}}}, "27139519": {"CommentCount": "5", "AcceptedAnswerId": "27139554", "CreationDate": "2014-11-26T00:48:55.833", "LastActivityDate": "2014-11-26T01:07:33.730", "PostTypeId": "1", "ViewCount": "136", "FavoriteCount": "1", "Title": "Can you define main() to take in more than argc/argv arguments?", "Id": "27139519", "Score": "1", "Body": "<p>Can you define main() to take multiple arguments, for example: </p>\n<pre><code>int main(int argc1, int argc2, char* argv1[], int* argv2[])\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "3396951", "AnswerCount": "4"}});