post_cb({"23066901": {"CommentCount": "5", "ViewCount": "1598", "PostTypeId": "1", "LastEditorUserId": "2063087", "CreationDate": "2014-04-14T17:56:06.843", "LastActivityDate": "2014-04-14T18:45:47.137", "Title": "missing ';' before identifier error / trouble with classes", "AcceptedAnswerId": "23067528", "LastEditDate": "2014-04-14T18:20:07.723", "Id": "23066901", "Score": "-1", "Body": "<p>Hi im learning c++ and classes. For some reason I cant some to get this specific function to run, if I comment it out everything else runs. EDIT:* I realized I didn't show proper info, but the problem isn't the case statement since even removed problem still persist. I added the whole code for card.h </p>\n<p><em>in card.h</em></p>\n<pre><code>#ifndef _CARD_\n#define _CARD_\n#include &lt;string&gt;\n\nclass Card\n{\n    private:\n\n        int suit;\n        int rank;\n\n    public:\n        // Default Constructor\n        Card();\n\n        void genRandom();\n        string getRank();\n        string getSuit();\n            void printCard();\n        bool sameCard(Card);\n        bool sameSuit(Card);\n        bool sameRank(Card);\n\n};\n\n#endif\n</code></pre>\n<p><em>in card.cpp</em></p>\n<pre><code>string Card::getRank()\n{\n   cout &lt;&lt; \"test\"; \n\n}\n</code></pre>\n<p>I'm getting errors like </p>\n<blockquote>\n<p id=\"so_23066901_23066901_0\">Card::getRank' : redefinition; different basic types</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p id=\"so_23066901_23066901_1\">card.h(17): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int</p>\n<p id=\"so_23066901_23066901_2\">card.h(17): error C2146: syntax error : missing ';' before identifier 'getRank'</p>\n</blockquote>\n", "Tags": "<c++><string><class>", "OwnerUserId": "2063087", "AnswerCount": "4"}, "23066981": {"ParentId": "23066901", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-04-14T18:00:36.870", "Score": "2", "LastEditorUserId": "2589776", "LastEditDate": "2014-04-14T18:40:08.567", "Id": "23066981", "OwnerUserId": "2589776", "Body": "<p><strong>Updated:</strong> For your latest update, the compiler cannot recognize <code>string</code>. You should use it with proper namespace, i.e. <code>std::</code>:</p>\n<pre><code>std::string getRank();\nstd::string getSuit();\n...\nstd::string Card::getRank()\n{\n    ...\n}\n</code></pre>\n<hr>\n<h2><strong><em>NOTE: The followings are for the old version of OP's question.</em></strong></h2>\n<hr>\n<p>For the first error, you can NOT overload functions just based on their return values.</p>\n<pre><code>string Card::getSuit(void);\nint Card::getSuit(void);\n</code></pre>\n<blockquote>\n<h3>C++11 \u00a713.1 Overloadable declarations</h3>\n<p id=\"so_23066901_23066981_0\">Certain function declarations cannot be overloaded:</p>\n<p id=\"so_23066901_23066981_1\">\u2014 <strong>Function declarations that differ only in the return type cannot be overloaded</strong>.</p>\n<p id=\"so_23066901_23066981_2\">\u2014 Member function declarations with the same name and the same parameter-type-list cannot be overloaded if any of them is a static member function declaration (9.4).</p>\n<p id=\"so_23066901_23066981_3\">\u2014 [...]</p>\n</blockquote>\n<hr>\n<p>For the second error, you should finish the <code>default</code> statement:</p>\n<pre><code>default: return \"\";\n</code></pre>\n<hr>\n<p><strong>P.S.:</strong> <code>'10'</code>-<code>'13'</code> are multicharacter literals, which are implementation-defined.</p>\n<blockquote>\n<h3>C++11 \u00a72.14.3 Character literals</h3>\n<p id=\"so_23066901_23066981_4\">A character literal is one or more characters enclosed in single quotes, as in <code>\u2019x\u2019</code>, optionally preceded by the letter <code>L</code>, as in <code>L\u2019x\u2019</code>. A character literal that does not begin with <code>L</code> is an ordinary character literal, also referred to as a narrow-character literal. An ordinary character literal that contains a single c-char has type char, with value equal to the numerical value of the encoding of the c-char in the execution character set. <strong>An ordinary character literal that contains more than one c-char is a multicharacter literal. A multicharacter literal has type <code>int</code> and implementation-defined value.</strong></p>\n</blockquote>\n</hr></hr></hr></hr>", "LastActivityDate": "2014-04-14T18:40:08.567"}, "23067528": {"ParentId": "23066901", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-04-14T18:29:55.057", "Score": "3", "LastEditorUserId": "168986", "LastEditDate": "2014-04-14T18:45:47.137", "Id": "23067528", "OwnerUserId": "168986", "Body": "<p>You are blaming the wrong thing.  The error <code>C4430: missing type specifier - int assumed.</code> is the critical part; the subsequent error is the compiler trying to make sense of the code that is already incorrect.  Always read error messages from the <em>top</em> not the <em>bottom</em>; especially when they refer to the same or adjacent lines, and fix them in that order.</p>\n<p>The string class is in the <code>std::</code> namespace:</p>\n<pre><code>    std::string getRank();\n    std::string getSuit();\n</code></pre>\n<hr>\n<pre><code>std::string Card::getRank()\n{\n   std::cout &lt;&lt; \"test\"; \n}\n</code></pre>\n<p>In your case <code>string</code> was not a type and was not followed by <code>()</code> so the compiler (looks like VC++) has assumed it was a data member, and then complained that it had no type, and that it was not followed by a <code>;</code> which is required given the earlier assumption.  The compiler also told your the error was on line 17 - so either way, you knew that was the incorrect line (although it is not always that straight forward - that is the line that the compiler stopped making sense of your code at least).</p>\n<p>Another way to help interpret error messages is to use more than one compiler - the different diagnostics from a second compiler can often be informative.  GCC for example reports <code>card.h:17:9: error: \u2018string\u2019 does not name a type</code> - giving the line and column number (9) of the erroneous token.</p>\n</hr>", "LastActivityDate": "2014-04-14T18:45:47.137"}, "23066995": {"ParentId": "23066901", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-04-14T18:01:20.790", "Score": "1", "LastEditorUserId": "2877241", "LastEditDate": "2014-04-14T18:07:16.367", "Id": "23066995", "OwnerUserId": "2877241", "Body": "<p>You must place a semicolon before the closing brace after label <code>default:</code></p>\n<pre><code>default:  // &lt;==here must be a semicolon\n}\n</code></pre>\n<p>there must be</p>\n<pre><code>default: ;\n}\n</code></pre>\n<p>Or simply remove this label. If the label is used then there should be a return statement because the function has return type that is not <code>void</code>.</p>\n<p>Also these cases</p>\n<pre><code>case '10': return \"Ten\"; break;\ncase '11': return \"Eleven\"; break;\ncase '12': return \"Twelve\"; break;\ncase '13': return \"Thirteen\";\n</code></pre>\n<p>are implementation-defined becayse character literals that contain more than 1 character are implementation defined. I think that the act not as you think.</p>\n<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_23066901_23066995_0\">An ordinary character literal that contains more than one c-char is a\n  multicharacter literal. A multicharacter literal, or an ordinary\n  character literal containing a single c-char not representable in the\n  execution character set, is conditionally-supported, <strong>has type int, and\n  has an implementation-defined value</strong>.</p>\n</blockquote>\n<p>As for other error relative to function <code>getSuit</code> then the function declaration differs in two places (I think inside the class definition and outside the class definition when it was defined).</p>\n", "LastActivityDate": "2014-04-14T18:07:16.367"}, "bq_ids": {"n4140": {"so_23066901_23066981_4": {"section_id": 5343, "quality": 0.9454545454545454, "length": 52}, "so_23066901_23066981_2": {"section_id": 557, "quality": 1.0, "length": 14}, "so_23066901_23066995_0": {"section_id": 5343, "quality": 0.9259259259259259, "length": 25}, "so_23066901_23066981_0": {"section_id": 557, "quality": 1.0, "length": 5}, "so_23066901_23066981_1": {"section_id": 557, "quality": 1.0, "length": 7}}, "n3337": {"so_23066901_23066981_4": {"section_id": 5140, "quality": 0.9454545454545454, "length": 52}, "so_23066901_23066981_2": {"section_id": 548, "quality": 1.0, "length": 14}, "so_23066901_23066995_0": {"section_id": 5140, "quality": 0.5925925925925926, "length": 16}, "so_23066901_23066981_0": {"section_id": 548, "quality": 1.0, "length": 5}, "so_23066901_23066981_1": {"section_id": 548, "quality": 1.0, "length": 7}}, "n4659": {"so_23066901_23066981_4": {"section_id": 6765, "quality": 0.6909090909090909, "length": 38}, "so_23066901_23066981_2": {"section_id": 580, "quality": 1.0, "length": 14}, "so_23066901_23066995_0": {"section_id": 6765, "quality": 0.9259259259259259, "length": 25}, "so_23066901_23066981_0": {"section_id": 580, "quality": 1.0, "length": 5}, "so_23066901_23066981_1": {"section_id": 580, "quality": 1.0, "length": 7}}}, "23066933": {"ParentId": "23066901", "CommentCount": "2", "CreationDate": "2014-04-14T17:57:56.053", "OwnerUserId": "841108", "PostTypeId": "2", "Id": "23066933", "Score": "4", "Body": "<p>The <code>case</code>-s should be followed by numbers:</p>\n<pre><code>case 9: return \"Nine\";\ncase 10: return \"Ten\";\n</code></pre>\n<p><sup>no need to <code>break</code> after a <code>return</code>!</sup></p>\n<p>and you should provide a default <em>statement</em>:</p>\n<pre><code>default: return \"??\";\n</code></pre>\n<p>BTW: <code>case '1'</code> is dependent on the character encoding. On my UTF-8 Linux machine, the character <code>1</code> (noted <code>'1'</code> in C or C++ code) is (encoded as) the number 49</p>\n", "LastActivityDate": "2014-04-14T17:57:56.053"}});