post_cb({"40807404": {"ViewCount": "1310", "Body": "<p>I'm checking the standard about narrowing conversion, and I think for a narrowing conversion an error should be triggered. Because the <a href=\"http://eel.is/c++draft/dcl.init.list#7\" rel=\"nofollow noreferrer\">standard</a> says:</p>\n<blockquote>\n<p id=\"so_40807404_40807404_0\">[ Note: As indicated above, such conversions are not allowed at the top level in list-initializations. \u2014 end note ] </p>\n</blockquote>\n<p>I think the description of \"not allowed\" means the compiling should fail.</p>\n<p>But someone told me that <a href=\"http://eel.is/c++draft/dcl.init.list#3.7\" rel=\"nofollow noreferrer\">here</a> just says \"the program is ill-formed\", and the standard won't require that compilation must fail.</p>\n<blockquote>\n<p id=\"so_40807404_40807404_1\">if a narrowing conversion (see below) is required to convert the\n  element to T, the program is ill-formed.</p>\n</blockquote>\n<p>So my question is: Does the standard specify whether an error or warning should be generated? Or for some cases the compiling should fail? From the aspect of a compiler, is it OK to make the program compile and just give some warnings?</p>\n<p>BTW: <a href=\"http://melpon.org/wandbox/permlink/vWMLCfOZAHOHjkju\" rel=\"nofollow noreferrer\">Clang 4.0.0</a> and <a href=\"http://melpon.org/wandbox/permlink/M3BGNWmcfJ99SuoU\" rel=\"nofollow noreferrer\">Gcc 7.0.0</a> behave differently.</p>\n<pre><code>float a {1.e39}; // Error for both Clang and GCC\ndouble d;\nfloat a3{d};     // Error for Clang, warning for GCC\n</code></pre>\n", "AcceptedAnswerId": "40807628", "Title": "Does the C++ standard specify that for some cases the compiling should fail with an error?", "CreationDate": "2016-11-25T14:42:28.137", "Id": "40807404", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-06T01:25:52.770", "LastEditorUserId": "3309790", "LastActivityDate": "2017-05-06T01:25:52.770", "Score": "24", "OwnerUserId": "3309790", "Tags": "<c++><type-conversion><language-lawyer><iso>", "AnswerCount": "5"}, "40807599": {"Id": "40807599", "PostTypeId": "2", "Body": "<p>If a program is not ill-formed (and has no UB), the compiler has to produce \nan executable output. If a program <strong>is</strong> ill-formed, the standard poses no\nrestriction on whether or not there is an output.</p>\n<p>If a program is ill-formed, and that is not NDR, a <em>diagnostic</em> must be\nproduced. The standard does not differentiate between warnings or errors.</p>\n", "LastEditorUserId": "3202093", "LastActivityDate": "2016-11-25T15:01:50.903", "Score": "2", "CreationDate": "2016-11-25T14:53:06.693", "ParentId": "40807404", "CommentCount": "3", "OwnerUserId": "3202093", "LastEditDate": "2016-11-25T15:01:50.903"}, "40807628": {"Id": "40807628", "PostTypeId": "2", "Body": "<p>The standard doesn't use the terms \"error\" and \"warning\", it only talks about cases where the compiler must \"issue a diagnostic\". </p>\n<p>In your example, if the program is \"ill-formed\", the compiler is required to tell you that somehow - issue a diagnostic.</p>\n<p>After that, it can do anything it likes - including compiling and running the program anyway. The standard only specifies what happens for conforming code, everything else is undefined. And then, as we know, anything can happen.</p>\n", "LastActivityDate": "2016-11-25T14:54:40.250", "CommentCount": "3", "CreationDate": "2016-11-25T14:54:40.250", "ParentId": "40807404", "Score": "29", "OwnerUserId": "597607"}, "40807607": {"Id": "40807607", "PostTypeId": "2", "Body": "<p>The only requirement for an ill-formed program is that the compiler must \"issue a diagnostic\", where \"diagnostic\" has an implementation-defined meaning. Having done that, the compiler is free to continue to compile the code. That's the main hook for implementation-specific behavior.</p>\n", "LastEditorUserId": "1593860", "LastActivityDate": "2016-11-25T19:41:00.197", "Score": "15", "CreationDate": "2016-11-25T14:53:43.057", "ParentId": "40807404", "CommentCount": "2", "OwnerUserId": "1593860", "LastEditDate": "2016-11-25T19:41:00.197"}, "bq_ids": {"n4140": {"so_40807404_40807404_1": {"length": 8, "quality": 1.0, "section_id": 3325}, "so_40807404_40807404_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3329}}, "n3337": {"so_40807404_40807404_1": {"length": 8, "quality": 1.0, "section_id": 3195}, "so_40807404_40807404_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3199}}, "n4659": {"so_40807404_40807404_1": {"length": 8, "quality": 1.0, "section_id": 4091}, "so_40807404_40807404_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 4095}}}, "40811684": {"Id": "40811684", "PostTypeId": "2", "Body": "<p>If a program not is ill-formed, the compiler must produce executable output.  If the program contains no UB, the executable must behave as the abstract machine the standard describes states it will behave.  If it does contain UB, the executable can do anything.</p>\n<p>If the program is ill-formed with no diagnostic required, the compiler can do anything.  It can produce an executable output, or not.  That executable output can do anything at all.  It could design a program that seems to match the intent of the code, for example.</p>\n<p>Compilers are free to print diagnostics whenever they want.</p>\n<p>Compilers are mandated to print diagnostics in some situations.  \"Most\" ill-formed programs require a diagnostic.  What a diagnostic is exactly is implementation defined.  It has been noted that printing a single blank newline, or a space, is a valid diagnostic under the standard.</p>\n<p>That would be considered a poor quality of implementation.</p>\n<p>Once the diagnostic is printed when there is an ill-formed program that requires a diagnostic, the compiler is free to do anything.  It can produce an executable that somewhat matches what you ask for, produce an executable that does anything it wants, or produce no executable.</p>\n<p>The standard does not differentiate between warnings and errors.</p>\n<p>An ill-formed program that requires a diagnostic that print a warning, then continue to compile, does not violate the standard.</p>\n<p>An ill-formed program that requires a diagnostic that prints an error, then doesn't continue to compile, does not violate the standard.</p>\n<p>An ill-formed program with no diagnistic required can print a diagnostic.  It may choose to produce an executable or not.  The executable could do something reasonable or not.</p>\n<p>A well formed program can have the compiler issuing a diagnostic.  This diagnostic could be described as a warning.  It could also be described as an error, but the compiler must produce an executable, and the executable must do what the standard mandates.</p>\n", "LastActivityDate": "2016-11-25T20:06:47.950", "CommentCount": "0", "CreationDate": "2016-11-25T20:06:47.950", "ParentId": "40807404", "Score": "5", "OwnerUserId": "1774667"}, "40807766": {"Id": "40807766", "PostTypeId": "2", "Body": "<p>Notes in the standard are non-normative and do not affect the definition of the language. So the note in your first quotation is not important from a language lawyer perspective.</p>\n<p>Having said that, I think that both of your quotations mean the same thing. An \"ill formed program\" is one that is not constructed according to the syntax rules, <em>diagnosable semantic rules</em>, and one definition rule, of the standard (emphasis mine). If a certain semantic is \"not allowed\", that just means it violates a <em>diagnosable semantic rule</em> of the langugae, and therefore just means it is ill formed.</p>\n<p>The compiler is required to issue a diagnostic for a program that is ill formed. After that, the compiler can do anything it wants. The standard does not specify any conditions under which compilation must fail.</p>\n", "LastEditorUserId": "1639256", "LastActivityDate": "2016-11-25T15:17:43.610", "Score": "2", "CreationDate": "2016-11-25T15:02:32.180", "ParentId": "40807404", "CommentCount": "2", "OwnerUserId": "1639256", "LastEditDate": "2016-11-25T15:17:43.610"}});