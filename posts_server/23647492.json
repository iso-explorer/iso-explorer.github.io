post_cb({"23647492": {"CommentCount": "0", "AcceptedAnswerId": "23648778", "LastEditDate": "2014-05-14T07:41:05.407", "LastEditorUserId": "646552", "CreationDate": "2014-05-14T06:47:26.507", "LastActivityDate": "2017-10-30T15:32:47.643", "PostTypeId": "1", "ViewCount": "1221", "FavoriteCount": "2", "Title": "Could non-static member variable be modified in constexpr constructor (C++14)?", "Id": "23647492", "OwnerUserId": "646552", "Body": "<pre><code>struct A {\n    int a = 0;\n    constexpr A() { a = 1; }\n};\n\nconstexpr bool f() {\n    constexpr A a;\n    static_assert(a.a == 1, \"\"); // L1: OK\n    return a.a == 1;\n}\nstatic_assert(f(), \"\"); // L2: Error, can not modify A::a in constexpr\n</code></pre>\n<ul>\n<li>Online Compiler URL: <a href=\"http://goo.gl/jni6Em\" rel=\"nofollow\">http://goo.gl/jni6Em</a></li>\n<li>Compiler: clang 3.4 (with -std=c++1y)</li>\n<li>System: Linux 3.2</li>\n</ul>\n<p>If I delete L2, this code compiles. If I add L2, the compiler complained \"modification of object of const-qualified type 'const int' is not allowed in a constant expression\". I am not a language lawyer, so I am not sure whether this is true. However, if it is, why compiler didn't complain anything about L1, since it also called A() as constexpr? Is this a bug of clang? Or did I miss anything?</p>\n<p>Reference: <a href=\"http://en.cppreference.com/w/cpp/language/constexpr\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/constexpr</a></p>\n<p>BTW, if I change \"constexpr A a;\" to \"A a;\" (remove constexpr keyword), L1 failed to compile which is expect. However, the compiler didn't complain about L2 anymore.</p>\n<p>Online Compiler URL about this: <a href=\"http://goo.gl/AoTzYx\" rel=\"nofollow\">http://goo.gl/AoTzYx</a></p>\n", "Tags": "<c++><constexpr><c++14>", "Score": "8", "AnswerCount": "1"}, "23648778": {"ParentId": "23647492", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>I believe this is just a case of compilers not having caught up to the changes proposed for C++14. Your <code>constexpr</code> constructor satisfies all the conditions listed in \u00a77.1.5/4 of <a href=\"https://github.com/cplusplus/draft/blob/master/papers/N3936.pdf\" rel=\"nofollow noreferrer\">N3936</a>. Both <a href=\"http://coliru.stacked-crooked.com/a/ef25d995b12ef338\" rel=\"nofollow noreferrer\">gcc and clang fail to compile</a> your code, but for different reasons.</p>\n<p>clang complains:</p>\n<blockquote>\n<p id=\"so_23647492_23648778_0\">note: modification of object of const-qualified type 'const int' is not allowed in a constant expression</p>\n</blockquote>\n<p>which doesn't make much sense, but reminds me of the C++11 restriction that <code>constexpr</code> member functions are implicitly <code>const</code> (this is a constructor, and that doesn't apply, but the error message is reminiscent of that). This restriction was also lifted for C++14.</p>\n<p>gcc's error message is:</p>\n<blockquote>\n<p id=\"so_23647492_23648778_1\">error: constexpr constructor does not have empty body</p>\n</blockquote>\n<p>Seems pretty clear that gcc still implements the C++11 rules for <code>constexpr</code> constructors.</p>\n<p>Moreover, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3597.html\" rel=\"nofollow noreferrer\">N3597</a> lists this example:</p>\n<pre><code>struct override_raii {\n  constexpr override_raii(int &amp;a, int v) : a(a), old(a) {\n    a = v;\n  }\n  constexpr ~override_raii() {\n    a = old;\n  }\n  int &amp;a, old;\n};\n</code></pre>\n<p>N3597 was superseded by <a href=\"http://isocpp.org/files/papers/N3652.html\" rel=\"nofollow noreferrer\">N3652</a>, which contains the wording found in the current draft. Unfortunately, the earlier example disappears, but, again, nothing in the current wording says you cannot assign values to data members within the body of a <code>constexpr</code> constructor.</p>\n<h2>Update (2017-10-03)</h2>\n<p>clang fixed this, but there has been no new release yet: <a href=\"https://bugs.llvm.org/show_bug.cgi?id=19741\" rel=\"nofollow noreferrer\">https://bugs.llvm.org/show_bug.cgi?id=19741</a>\n(<a href=\"https://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22M4FwTgrgxiAECCsDeAoW6PoJYDs4EMBuNTDKAex1AFMAPABzAQAoBKALln2YAZXkusALywAjIVgBfFJOIoKVEHUawARuXIAbWADM2yEqVgKaDJoiKHSofCCxQA%2BvmDBqYEM3wA6fMJGiAGlgAImDWYiN0MGoQCDAcLh8%2FMWJpFFw4AFt8XH1UdBs7R2dXd2Y9ViDQ8JkUIA%3D%22%2C%22compiler%22%3A%22%2Fopt%2Fclang%2Bllvm-3.4.1-x86_64-unknown-ubuntu12.04%2Fbin%2Fclang%2B%2B%22%2C%22options%22%3A%22-std%3Dc%2B%2B1y%22%7D%5D%7D\" rel=\"nofollow noreferrer\">Compiler explorer</a>)</p>\n", "OwnerUserId": "241631", "LastEditorUserId": "8857097", "LastEditDate": "2017-10-30T15:32:47.643", "Id": "23648778", "Score": "4", "CreationDate": "2014-05-14T07:58:00.013", "LastActivityDate": "2017-10-30T15:32:47.643"}, "bq_ids": {"n4659": {"so_23647492_23648778_1": {"section_id": 180, "quality": 0.5714285714285714, "length": 4}}}});