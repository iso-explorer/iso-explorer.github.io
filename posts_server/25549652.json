post_cb({"bq_ids": {"n4140": {"so_25549652_25549691_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5846}, "so_25549652_25549691_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5846}}, "n3337": {"so_25549652_25549691_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5616}, "so_25549652_25549691_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5616}}, "n4659": {"so_25549652_25549691_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7325}, "so_25549652_25549691_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 7325}}}, "25549652": {"ViewCount": "4621", "Body": "<p>Recently, I saw a strange C++ feature: <em>injected class name</em>.</p>\n<pre><code>class X { };\nX x1;\nclass X::X x2; // class X::X is equal to X\nclass X::X::X x3; // ...and so on...\n</code></pre>\n<p>But I cannot figure out why this feature is necessary. Is there any practice that requires this feature?</p>\n<p>And I heard this feature didn't exist in old C++. Then, when was it introduced? C++03? C++11?</p>\n", "AcceptedAnswerId": "25549691", "Title": "Why is there an injected class name?", "CreationDate": "2014-08-28T13:10:47.527", "Id": "25549652", "CommentCount": "0", "FavoriteCount": "28", "PostTypeId": "1", "LastEditDate": "2016-10-04T08:31:11.643", "LastEditorUserId": "3980929", "LastActivityDate": "2016-10-04T08:31:11.643", "Score": "119", "OwnerUserId": "2729109", "Tags": "<c++>", "AnswerCount": "1"}, "25549691": {"Id": "25549691", "PostTypeId": "2", "Body": "<p>The injected class name means that <code>X</code> is declared as a member of <code>X</code>, so that name lookup inside <code>X</code> always finds the current class, not another <code>X</code> that might be declared at the same enclosing scope, e.g.</p>\n<pre><code>void X() { }\nclass X {\npublic:\n  static X create() { return X(); }\n};\n</code></pre>\n<p>Is the <code>create()</code> function creating a temporary <code>X</code> object or calling the function <code>X</code>? At namespace scope it would call the function, so the purpose of the injected-class-name is to ensure that within the body of <code>X</code> the name always finds the class itself (because name lookup starts in the class' own scope before looking in the enclosing scope).</p>\n<p>It's also helpful inside class templates, where the injected class name can be used without a template argument list, e.g. using simply <code>Foo</code> instead of the full template-id <code>Foo&lt;blah, blah, blah&gt;</code>, so it's easy to refer to the current instantiation. See <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#176\" rel=\"noreferrer\">DR 176</a> for a change between C++98 and C++03 that clarified that.</p>\n<p>The idea of the injected class name was present in C++98, but the terminology was new for C++03.</p>\n<p>C++98 says:</p>\n<blockquote>\n<p id=\"so_25549652_25549691_0\">A <em>class-name</em> is inserted into the scope in which it is declared immediately after the <em>class-name</em> is seen. The class-name is also inserted into the scope of the class itself.</p>\n</blockquote>\n<p>The second sentence was changed by <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#147\" rel=\"noreferrer\">DR 147</a> so C++03 says in [class]/2:</p>\n<blockquote>\n<p id=\"so_25549652_25549691_1\">A <em>class-name</em> is inserted into the scope in which it is declared immediately after the <em>class-name</em> is seen. The <em>class-name</em> is also inserted into the scope of the class itself; this is known as the <em>injected-class-name</em>.</p>\n</blockquote>\n<p>Even before C++98, the ARM has roughly equivalent wording that means the class' name can always be used in the class body to refer to the class itself:</p>\n<blockquote>\n<p id=\"so_25549652_25549691_2\">The name of a class can be used as a <em>class-name</em> even within the <em>member-list</em> of the class specifier itself.</p>\n<blockquote>\n<ul>\n<li>For example,  \n    \n    <blockquote>\n<p id=\"so_25549652_25549691_5\"><em><code>class link { link* next; };</code></em></p>\n</blockquote></li>\n</ul>\n</blockquote>\n</blockquote>\n", "LastEditorUserId": "981959", "LastActivityDate": "2014-08-28T13:40:52.100", "Score": "140", "CreationDate": "2014-08-28T13:12:24.197", "ParentId": "25549652", "CommentCount": "2", "LastEditDate": "2014-08-28T13:40:52.100", "OwnerUserId": "981959"}});