post_cb({"bq_ids": {"n4140": {"so_28086502_28087648_3": {"length": 7, "quality": 1.0, "section_id": 3242}, "so_28086502_28087648_1": {"length": 5, "quality": 1.0, "section_id": 12}, "so_28086502_28087648_2": {"length": 5, "quality": 1.0, "section_id": 12}, "so_28086502_28087648_4": {"length": 4, "quality": 0.8, "section_id": 3242}}, "n3337": {"so_28086502_28087648_3": {"length": 7, "quality": 1.0, "section_id": 3115}, "so_28086502_28087648_1": {"length": 5, "quality": 1.0, "section_id": 9}, "so_28086502_28087648_2": {"length": 5, "quality": 1.0, "section_id": 9}, "so_28086502_28087648_4": {"length": 4, "quality": 0.8, "section_id": 3115}}, "n4659": {"so_28086502_28087648_3": {"length": 7, "quality": 1.0, "section_id": 3998}, "so_28086502_28087648_1": {"length": 5, "quality": 1.0, "section_id": 13}, "so_28086502_28087648_2": {"length": 5, "quality": 1.0, "section_id": 13}, "so_28086502_28087648_4": {"length": 4, "quality": 0.8, "section_id": 3998}}}, "28086502": {"ViewCount": "176", "Body": "<p>I wrote a Signal/Slot library (<a href=\"http://www.codeproject.com/Articles/867044/Yassi-Yet-Another-Signal-Slot-Implementation\">Codeproject article here</a>), under linux, compiling with both Clang 3.5 and GCC4.9. It compiles without warnings on both compilers (also on versions 3.4 resp 4.8). When I got it all working, and posted the article online, it wasn't long until I got complaints that it's not working on MSVC. (Visual Studio Express 2013? I'm sorry, I'm not familiar with the versioning system.) I installed it in a VM to have a look for myself and found that it won't compile the following:</p>\n<pre><code>template &lt;typename Signature&gt;\nstruct RemoveCV;\n\ntemplate &lt;typename R, typename ... Args&gt;\nstruct RemoveCV&lt;T, R (Args...)&gt;\n{\n    using Type = R(Args...);\n};\n\ntemplate &lt;typename R, typename ... Args&gt;\nstruct RemoveCV&lt;T, R(Args...) const&gt;\n{\n    using Type = R(Args...);\n};\n\n// more specializations for volatile and const volatile\n\n// Usage:\ntemplate &lt;typename Signature_&gt;\nstruct Function\n{\n    using Signature = RemoveCV&lt;Signature_&gt;::Type;\n};\n\n// both Function&lt;void()&gt; and Function&lt;void() const&gt; now have \n// the same Signature: void()\n</code></pre>\n<p>The reason being that <code>R(Args ...)</code> is not a member function, so it can't have a <code>const</code> qualifier. </p>\n<p>While it is of course true that it doesn't make sense to have a <code>const</code> qualifier on a non-memberfunction, I believe I read somewhere (here on SO, including a quote from the standard), that it is allowed as long as it's not bound to an actual function. I.e. it <em>is</em> allowed as a stand-alone type. Unfortunately I don't seem to be able to find that thread anymore...</p>\n<p>I was just wondering who's right on this occasion: MSVC or GCC + Clang, and what the standard has to say about a standalone function signature like <code>void() const</code>.</p>\n", "AcceptedAnswerId": "28087648", "Title": "MSVC: modifiers not allowed on non-memberfunction", "CreationDate": "2015-01-22T10:30:04.860", "Id": "28086502", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-01-22T11:28:38.763", "Score": "8", "OwnerUserId": "1428839", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "28087648": {"Id": "28087648", "PostTypeId": "2", "Body": "<p>Well, I believe that it appears that you (and GCC and Clang) are right, with regards to what the standard says. From <strong>\u00a78.3.5/6</strong> (in N3376), (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28086502_28087648_0\">A <strong><em>cv-qualifier-seq</em></strong> or a <em>ref-qualifier</em> shall only be part of:</p>\n<p id=\"so_28086502_28087648_1\">\u2014 the function type for a non-static member function,</p>\n<p id=\"so_28086502_28087648_2\">\u2014 the function type to which a pointer to member refers,</p>\n<p id=\"so_28086502_28087648_3\">\u2014 the top-level function type of a function typedef declaration or alias-declaration, </p>\n<p id=\"so_28086502_28087648_4\">\u2014 the type-id in the default argument of a type-parameter (14.1), or</p>\n<p id=\"so_28086502_28087648_5\">\u2014 <strong>the type-id of a template-argument for a type-parameter (14.2).</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-01-22T11:28:38.763", "CommentCount": "0", "CreationDate": "2015-01-22T11:28:38.763", "ParentId": "28086502", "Score": "5", "OwnerUserId": "1594913"}});