post_cb({"31866735": {"CommentCount": "11", "AcceptedAnswerId": "31867026", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-08-06T22:18:17.757", "LastActivityDate": "2015-08-07T10:08:11.383", "LastEditDate": "2015-08-06T22:54:09.073", "ViewCount": "303", "FavoriteCount": "1", "Title": "Why does valarray assignment not resize assignee per the documentation?", "Id": "31866735", "Score": "5", "Body": "<p>Code:</p>\n<pre><code>#include &lt;valarray&gt;\n#include &lt;iostream&gt;    \n\nusing namespace std;\n\nint main()\n{\n  valarray&lt;int&gt; v0(2, 4);\n  valarray&lt;int&gt; v1;\n  v1 = v0;\n  cout &lt;&lt; \"v0.size: \" &lt;&lt; v0.size() &lt;&lt; endl;\n  cout &lt;&lt; \"v1.size: \" &lt;&lt; v1.size() &lt;&lt; endl;\n  cout &lt;&lt; \"v0[0]: \" &lt;&lt; v0[0] &lt;&lt; endl;\n  cout &lt;&lt; \"v1[0]: \" &lt;&lt; v1[0] &lt;&lt; endl;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>v0.size: 4\nv1.size: 0\nv0[0]: 2\nSegmentation fault\n</code></pre>\n<p>For the assignment:</p>\n<pre><code>v1 = v0;\n</code></pre>\n<p>I would think the constructor:</p>\n<pre><code>valarray&lt;T&gt;&amp; operator=( const valarray&lt;T&gt;&amp; other );\n</code></pre>\n<p>should be used and according to the <a href=\"http://en.cppreference.com/w/cpp/numeric/valarray/operator%3D\" rel=\"nofollow\">documentation</a>, I believe v1 should be resized and the contents of v0 copied into it, element for element. So what's actually happening?</p>\n<pre><code>$ g++ --version\ng++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)\n</code></pre>\n", "Tags": "<c++><assignment-operator><valarray>", "OwnerUserId": "5199976", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31866735_31867026_6": {"section_id": 3747, "quality": 0.631578947368421, "length": 12}, "so_31866735_31867026_2": {"section_id": 3747, "quality": 1.0, "length": 23}}, "n3337": {"so_31866735_31867026_6": {"section_id": 3609, "quality": 0.631578947368421, "length": 12}, "so_31866735_31867026_2": {"section_id": 3609, "quality": 1.0, "length": 23}}, "n4659": {"so_31866735_31867026_6": {"section_id": 4514, "quality": 0.5263157894736842, "length": 10}, "so_31866735_31867026_2": {"section_id": 4514, "quality": 0.9130434782608695, "length": 21}}}, "31867026": {"ParentId": "31866735", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>Because you're using old C++.</p>\n<p><strong>As of C++11, the destination is resized to match the source.</strong><br>\nThat's why some contributors here could not reproduce your issue (plus, UB has unpredictable results). <strike>It's also why <a href=\"http://en.cppreference.com/w/cpp/numeric/valarray/operator%3D\" rel=\"nofollow\">the cppreference.com article states that a resize is first performed</a> (though a disclaimer that this applies only since C++11 might have been nice).</strike> <em>[This has now been fixed.]</em></br></p>\n<blockquote>\n<p id=\"so_31866735_31867026_0\"><code>[C++11: 23.6.2.3]</code> <strong>valarray assignment [valarray.assign]</strong></p>\n<p id=\"so_31866735_31867026_1\"><code>valarray&lt;T&gt;&amp; operator=(const valarray&lt;T&gt;&amp; v);</code></p>\n<p id=\"so_31866735_31867026_2\"><sup>1</sup>\u00a0\u00a0 Each element of the <code>*this</code> array is assigned the value of the corresponding element of the argument array. If the length of <code>v</code> is not equal to the length of <code>*this</code>, resizes <code>*this</code> to make the two arrays the same length, as if by calling <code>resize(v.size())</code>, before performing the assignment.</p>\n<p id=\"so_31866735_31867026_3\"><sup>2</sup>\u00a0\u00a0 Postcondition: <code>size() == v.size()</code>.</p>\n</blockquote>\n<p><strong>However, in C++03, your code had undefined behaviour.</strong><br>\nThat's why you're getting a segmentation fault with your older toolchain. It's also why, when this issue was raised as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11126\" rel=\"nofollow\">a GCC bug</a> back in 2003, it was rejected as invalid because the implementation was actually conformant at that time.</br></p>\n<blockquote>\n<p id=\"so_31866735_31867026_4\"><code>[C++03: 23.3.2.2]</code> <strong>valarray assignment [valarray.assign]</strong></p>\n<p id=\"so_31866735_31867026_5\"><code>valarray&lt;T&gt;&amp; operator=(const valarray&lt;T&gt;&amp; v);</code></p>\n<p id=\"so_31866735_31867026_6\"><sup>1</sup>\u00a0\u00a0 Each element of the <code>*this</code> array is assigned the value of the corresponding element of the argument array. The resulting behavior is undefined if the length of the argument array is not equal to the length of the <code>*this</code> array.</p>\n</blockquote>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2015-08-07T10:08:11.383", "Id": "31867026", "Score": "6", "CreationDate": "2015-08-06T22:48:26.077", "LastActivityDate": "2015-08-07T10:08:11.383"}});