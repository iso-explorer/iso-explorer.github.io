post_cb({"bq_ids": {"n4140": {"so_26470912_26471420_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 7146}, "so_26470912_26470912_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 7146}, "so_26470912_26470912_2": {"length": 7, "quality": 1.0, "section_id": 7146}, "so_26470912_26470912_3": {"length": 9, "quality": 1.0, "section_id": 7149}}, "n3337": {"so_26470912_26471420_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 6890}, "so_26470912_26470912_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6890}, "so_26470912_26470912_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3073}, "so_26470912_26470912_3": {"length": 9, "quality": 1.0, "section_id": 6893}}, "n4659": {"so_26470912_26471420_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 8647}, "so_26470912_26470912_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 8647}, "so_26470912_26470912_2": {"length": 7, "quality": 1.0, "section_id": 8647}}}, "26471113": {"Id": "26471113", "PostTypeId": "2", "Body": "<p>The first is probably legal.  The other two certainly not\n(\u00a77.1.6.4/1): \"The auto type-specifier signifies that the type\nof a variable being declared shall be deduced from its\ninitializer or that a function declarator shall include\na trailing-return-type.\" </p>\n<p>I say probably for the first, because \u00a73.6.1 isn't really clear\nto what degree the definition must match.  A 100% textual match\nisn't required, even if that is what a literal interpretation of\nwhat it says would imply: in the text, the body of <code>main</code> is\ngiven as <code>/* ... */</code>, which isn't very useful, and certainly\nisn't required.  Similarly, tradition has also allowed any name\nfor <code>argc</code> and <code>argv</code>, and declaring <code>argv</code> as <code>char** argv</code>.\nThere's no tradition about defining main with a trailing return\ntype, however.  I think that what was meant in \u00a73.6.1 is that\nall definitions of <code>main</code> which have the same signature would be\nallowed, but this is not what the actual words say.</p>\n<p>Regardless: why would one want such obfuscation?  C/C++ is not\nPascal, and what is natural in one language (like trailing\nreturn types for functions) is obfuscation in another. </p>\n<p>EDIT:</p>\n<p>I've just downloaded a more recent draft (N3797), and it seems\nlike the wording has changed (and is now contradictory).  The\nfirst paragraph still says basically the same thing (but\nincludes addtiional wording for for lambdas): the <code>auto</code> is\nreplaced \"either by deduction from an initializer or by explicit\nspecification with a trailing-return-type.\"  (And of course,\nfucntions don't have initializers, so only the\ntrailing-return-type can apply.)  Later paragraphs, however, do\nspeak about deduction from the return type, even though the\nfirst paragraph requires the trailing return type (and thus\nmakes deduction superfluous).</p>\n", "LastEditorUserId": "649665", "LastActivityDate": "2014-10-20T17:47:57.750", "Score": "1", "CreationDate": "2014-10-20T17:06:56.303", "ParentId": "26470912", "CommentCount": "1", "LastEditDate": "2014-10-20T17:47:57.750", "OwnerUserId": "649665"}, "26470912": {"ViewCount": "1219", "Body": "<p>The last draft of C++14 that I was able to find says, regarding <code>main()</code> [3.6.1]:</p>\n<blockquote>\n<p id=\"so_26470912_26470912_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a return type of type int, but otherwise its type is implementation-defined. All implementations shall allow both</p>\n<p id=\"so_26470912_26470912_1\">\u2014 a function of () returning int and</p>\n<p id=\"so_26470912_26470912_2\">\u2014 a function of (int, pointer to pointer to char) returning int</p>\n</blockquote>\n<p>and (paragraph 5)</p>\n<blockquote>\n<p id=\"so_26470912_26470912_3\">If control reaches the end of main without encountering a return statement, the effect is that of executing</p>\n<p id=\"so_26470912_26470912_4\"><code>return 0;</code></p>\n</blockquote>\n<p>Does this mean that all of the following are legal C++14 minimal programs? If any isn't, why not?</p>\n<ol>\n<li><code>auto main() -&gt; int {}</code></li>\n<li><code>auto main() { return 0; }</code></li>\n<li><code>auto main() {}</code></li>\n</ol>\n", "AcceptedAnswerId": "26471420", "Title": "Legal definitions of main() in C++14", "CreationDate": "2014-10-20T16:54:38.867", "Id": "26470912", "CommentCount": "9", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-10-20T17:29:15.643", "LastEditorUserId": "1938163", "LastActivityDate": "2015-03-20T14:12:51.513", "Score": "19", "OwnerUserId": "2797826", "Tags": "<c++><main><language-lawyer><c++14>", "AnswerCount": "2"}, "26471420": {"Id": "26471420", "PostTypeId": "2", "Body": "<ol>\n<li><p>Is legal, the second and the latter aren't because of the following reasons:</p></li>\n<li><p>The return type of the main function cannot be deduced since CWG 1669 was accepted and the standard will be reworded as:</p>\n<blockquote>\n<p id=\"so_26470912_26471420_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a <strong>declared</strong> return type of type int, but otherwise its type is implementation-defined.</p>\n</blockquote>\n<p>This got its way into n4140. More on this: <a href=\"http://wg21.cmeerw.net/cwg/issue1669\" rel=\"nofollow\">http://wg21.cmeerw.net/cwg/issue1669</a></p></li>\n<li><p>The same as above</p></li>\n</ol>\n", "LastEditorUserId": "950427", "LastActivityDate": "2015-03-20T14:12:51.513", "Score": "15", "CreationDate": "2014-10-20T17:27:07.747", "ParentId": "26470912", "CommentCount": "6", "LastEditDate": "2015-03-20T14:12:51.513", "OwnerUserId": "1938163"}});