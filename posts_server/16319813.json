post_cb({"bq_ids": {"n4140": {"so_16319813_16319857_0": {"section_id": 638, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_16319813_16319857_0": {"section_id": 628, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_16319813_16319857_0": {"section_id": 666, "quality": 0.8888888888888888, "length": 8}}}, "16319857": {"ParentId": "16319813", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>To call the <code>bool</code> overload requires the following conversion:</p>\n<pre><code>const char[6] ---&gt; const char* ---&gt; bool\n</code></pre>\n<p>To call the <code>std::string</code> overload requires the following conversion:</p>\n<pre><code>const char[6] ---&gt; const char* ---&gt; std::string\n</code></pre>\n<p>This involves a user-defined conversion (using the conversion constructor of <code>std::string</code>). Any conversion sequence without a user-defined conversion is preferred over a sequence with a user-defined conversion.</p>\n<blockquote>\n<p id=\"so_16319813_16319857_0\">When comparing the basic forms of implicit conversion sequences (as defined in 13.3.3.1):</p>\n<ul>\n<li>a standard conversion sequence (13.3.3.1.1) is a better conversion sequence than a user-defined conversion sequence or an ellipsis conversion sequence, and</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>A standard conversion sequence is one involving only standard conversions. A user-defined conversion sequence is one involving a single user-defined conversion.</p>\n", "OwnerUserId": "150634", "LastEditorUserId": "36565", "LastEditDate": "2013-05-01T14:29:06.343", "Id": "16319857", "Score": "14", "CreationDate": "2013-05-01T14:18:54.917", "LastActivityDate": "2013-05-01T14:29:06.343"}, "16319813": {"CommentCount": "8", "ViewCount": "186", "ClosedDate": "2013-05-02T09:30:46.610", "OwnerDisplayName": "user663896", "CreationDate": "2013-05-01T14:16:40.637", "LastActivityDate": "2013-05-01T14:32:05.570", "PostTypeId": "1", "AcceptedAnswerId": "16319857", "FavoriteCount": "1", "Title": "What overloaded C++ function will be called?", "Id": "16319813", "Score": "4", "Body": "<p>Here is the subject of the topic:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nvoid test(bool val)\n{\n    std::cout &lt;&lt; \"bool\" &lt;&lt; std::endl;\n}\n\nvoid test(std::string val)\n{\n    std::cout &lt;&lt; \"std::string\" &lt;&lt; std::endl;\n}\n\nint main(int argc, char *argv[])\n{\n    test(\"hello\");\n    return 0;\n}\n</code></pre>\n<p>The output of the program is <code>bool</code>. Why the <code>bool</code> variant selected?</p>\n", "Tags": "<c++><overloading>", "AnswerCount": "2"}, "16319858": {"ParentId": "16319813", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>That is because <code>\"hello\"</code> has type <code>const char[6]</code>, which decays to <code>const char*</code>, which in turn can be converted into <code>bool</code> by means of another <em>standard conversion</em>. Therefore, the overall conversion:</p>\n<pre><code>const char[6] -&gt; bool\n</code></pre>\n<p>Can be performed <em>just by means of standard conversions</em>.</p>\n<p>On the other hand, converting a <code>const char*</code> to an <code>std::string</code> would require a user-defined conversion (invoking the converting constructor of <code>std::string</code>), and <strong>standard conversions are preferable over user-defined conversions</strong> when doing overload resolution.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-05-01T14:32:05.570", "Id": "16319858", "Score": "6", "CreationDate": "2013-05-01T14:18:58.850", "LastActivityDate": "2013-05-01T14:32:05.570"}});