post_cb({"7068333": {"ParentId": "7068260", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_7068260_7068333_0\">It seems like the three colons are being lexed like &lt;::&gt; &lt;:&gt; rather\n  than &lt;:&gt; &lt;::&gt;, but can this clearly deduced from the [final draft]\n  standard?</p>\n</blockquote>\n<p>It's not a [final] draft any more. It has been <a href=\"http://herbsutter.com/2011/08/12/we-have-an-international-standard-c0x-is-unanimously-approved/\" rel=\"nofollow\">unanimously accepted</a> already. And yes, it can be deduced that <code>:::</code> will be parsed as <code>::</code> followed by <code>:</code>. It's a purely lexical issue. As in C++03, the token is taken as the longest possible one. In C++03 that led template closing <code>&gt;&gt;</code>s to be considered as shift operator. In C++0x an exception had been made for this special case, but the general rule still applies (See 2.5.3). For example +++ will be parsed as ++ followed by +, not vice versa</p>\n", "OwnerUserId": "469935", "PostTypeId": "2", "Id": "7068333", "Score": "6", "CreationDate": "2011-08-15T17:29:51.587", "LastActivityDate": "2011-08-15T17:29:51.587"}, "7068260": {"CommentCount": "2", "ViewCount": "402", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-08-15T17:22:24.820", "LastActivityDate": "2011-08-15T17:31:55.833", "Title": "Global qualification in base specifier", "AcceptedAnswerId": "7068363", "LastEditDate": "2017-05-23T11:47:55.743", "Id": "7068260", "Score": "1", "Body": "<p>As a follow-up to \" <a href=\"https://stackoverflow.com/questions/7067793/what-is-this-crazy-c0x-syntax\">What is this crazy C++11 syntax ==&gt; struct : bar {} foo {};?</a> \", I'd expect the following C++0x code to compile:</p>\n<pre><code>struct x {};\nstruct :::x {} y {};\n</code></pre>\n<p>However, GCC 4.7.0 20110731 tells me:</p>\n<blockquote>\n<p id=\"so_7068260_7068260_0\">error: global qualification of class name is invalid before ':' token</p>\n</blockquote>\n<p>And when I take a step back towards sanity and give the second UDT a name:</p>\n<pre><code>struct x {};\nstruct a:::x {} y{}; // remember, identical to `a::: x` or `a: ::x` or `a:: :x` etc\n</code></pre>\n<p>the error is:</p>\n<blockquote>\n<p id=\"so_7068260_7068260_1\">error: 'a' has not been declared</p>\n</blockquote>\n<hr>\n<p>It seems like the three colons are being lexed like <code>&lt;::&gt; &lt;:&gt;</code> rather than <code>&lt;:&gt; &lt;::&gt;</code>, but can this clearly be deduced from the <em>[final draft]</em> standard?</p>\n<p>And might the question \" <a href=\"https://stackoverflow.com/questions/2781339/global-qualification-in-a-class-declarations-class-head\">Global qualification in a class declarations class-head</a> \" be related?</p>\n</hr>", "Tags": "<c++><c++11>", "OwnerUserId": "560648", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_7068260_7068363_0": {"section_id": 5322, "quality": 1.0, "length": 26}, "so_7068260_7068363_1": {"section_id": 5322, "quality": 1.0, "length": 26}}, "n3337": {"so_7068260_7068363_0": {"section_id": 5119, "quality": 1.0, "length": 26}, "so_7068260_7068363_1": {"section_id": 5119, "quality": 1.0, "length": 26}}, "n4659": {"so_7068260_7068363_0": {"section_id": 6743, "quality": 1.0, "length": 26}, "so_7068260_7068363_1": {"section_id": 6743, "quality": 1.0, "length": 26}}}, "7068363": {"ParentId": "7068260", "CommentCount": "1", "Body": "<p>This is just to do with parsing. From \u00a72.5.3</p>\n<blockquote>\n<blockquote>\n<p id=\"so_7068260_7068363_1\">If the input stream has been parsed into preprocessing tokens up to a given character, the next preprocessing token is the longest sequence of characters that could constitute a preprocessing token, even if that would cause further lexical analysis to fail.</p>\n</blockquote>\n</blockquote>\n<p>Basically, it has to take the longest sequence of characters, so <code>:::</code> is always parsed as <code>::</code> <code>:</code> in the same way that <code>x+++y</code> is always parsed as <code>x</code> <code>++</code> <code>+</code> <code>y</code>.</p>\n<p>This is referred to as <a href=\"http://en.wikipedia.org/wiki/Maximal_munch\">Maximal Munch</a> parsing.</p>\n", "OwnerUserId": "235825", "PostTypeId": "2", "Id": "7068363", "Score": "6", "CreationDate": "2011-08-15T17:31:55.833", "LastActivityDate": "2011-08-15T17:31:55.833"}});