post_cb({"28657392": {"CommentCount": "3", "ViewCount": "124", "PostTypeId": "1", "ClosedDate": "2015-02-24T12:52:52.363", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-22T11:43:05.860", "Body": "<p>Why does the following program</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct C\n{\n    operator int()\n    {\n        std::cout &lt;&lt; \"C::operator int()\" &lt;&lt; std::endl;\n        return 0;\n    }\n    operator void()\n    {\n        std::cout &lt;&lt; \"C::operator void()\" &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    C c;\n    (int)c;\n    (void)c;\n    // this does run the function:\n    // c.operator void();\n}\n</code></pre>\n<p>output this</p>\n<pre><code>C::operator int()\n</code></pre>\n<p>instead of this?</p>\n<pre><code>C::operator int()\nC::operator void()\n</code></pre>\n<p>Live demo at <a href=\"http://coliru.stacked-crooked.com/a/de1783bb8caf51b9\" rel=\"nofollow noreferrer\">coliru.</a></p>\n<p>The immediate answer, as always, is \"because the standard says so\".</p>\n<p>C++11 standard, \u00a7 12.3.2</p>\n<blockquote>\n<p id=\"so_28657392_28657392_0\"><strong>A conversion function is never used to convert</strong> a (possibly\n  cv-qualified) object to the (possibly cv-qualified) same object type\n  (or a reference to it), to a (possibly cv-qualified) base class of\n  that type (or a reference to it), or <strong>to (possibly cv-qualified) void.</strong></p>\n</blockquote>\n<p>So why does the standard say so? What is the benefit of making void conversion functions a special case?</p>\n<p>Additional exposition is in footnote 116:</p>\n<blockquote>\n<p id=\"so_28657392_28657392_1\">These conversions are considered as standard conversions for the\n  purposes of overload resolution (13.3.3.1, 13.3.3.1.4) and therefore\n  initialization (8.5) and explicit casts (5.2.9). A conversion to void\n  does not invoke any conversion function (5.2.9). Even though never\n  directly called to perform a conversion, such conversion functions can\n  be declared and can potentially be reached through a call to a virtual\n  conversion function in a base class.</p>\n</blockquote>\n<p>I've only ever used <code>(void)</code> to silence compiler warnings about unused variables. It looks like that's essentially what others use it for too.</p>\n<p><a href=\"https://stackoverflow.com/questions/689677/casting-unused-return-values-to-void\">Why cast unused return values to void?</a></p>\n<p>If <code>void</code> conversion functions followed the typical conversion function rules it might allow for surprises but that's true of any conversion function with side effects and creating those surprises would be at the discretion of the programmer.</p>\n", "LastEditDate": "2017-05-23T11:45:38.010", "FavoriteCount": "2", "Title": "Why are void conversion functions weird?", "Id": "28657392", "Score": "8", "CreationDate": "2015-02-22T11:43:05.860", "Tags": "<c++><c++11><type-conversion><language-lawyer>", "OwnerUserId": "1128289", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_28657392_28657392_0": {"section_id": 391, "quality": 1.0, "length": 22}, "so_28657392_28657392_1": {"section_id": 391, "quality": 0.8809523809523809, "length": 37}}, "n3337": {"so_28657392_28657392_0": {"section_id": 382, "quality": 1.0, "length": 22}, "so_28657392_28657392_1": {"section_id": 382, "quality": 0.8809523809523809, "length": 37}}, "n4659": {"so_28657392_28657392_1": {"section_id": 408, "quality": 0.8809523809523809, "length": 37}, "so_28657392_28657392_0": {"section_id": 408, "quality": 1.0, "length": 22}}}});