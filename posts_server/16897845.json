post_cb({"16899729": {"Id": "16899729", "PostTypeId": "2", "Body": "<p><code>std::is_move_constructible&lt;T&gt;</code> is true iff <code>std::is_constructible&lt;T, T&amp;&amp;&gt;</code> is true, but that doesn't imply that such a construction will call a move constructor, only that it is possible to construct the type from an rvalue of the same type. Such a construction might use a copy constructor.</p>\n<p>When <code>value::s</code> is a <code>unique_ptr</code> the type's copy constructor and copy assignment operator are defined as deleted, because the <code>s</code> member is not copyable.  It does not have a move constructor and move assignment operator because, as you pointed out, it has a user-declared destructor. That means it has no copy constructor and no move constructor (and no other user-defined constructors that could accept an argument of type <code>value&amp;&amp;</code>) so <code>std::is_constructible&lt;value, value&amp;&amp;&gt;</code> is false.</p>\n<p>When <code>value::s</code> is a <code>string</code> the type's copy constructor and copy assignment operator are  <strong>not</strong> defined as deleted, because the <code>s</code> member <strong>is</strong> copyable, and so <code>value</code> is also copyable, and a CopyConstructible type is also MoveConstructible, because it's valid in this context:</p>\n<pre><code>value v1;\nvalue v2 = std::move(v1);  // calls copy constructor\n</code></pre>\n<p>That means <code>std::is_constructible&lt;value, value&amp;&amp;&gt;</code> is true, even though it invokes the copy constructor not a move constructor.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2013-06-03T15:33:10.240", "Score": "9", "CreationDate": "2013-06-03T14:57:43.690", "ParentId": "16897845", "CommentCount": "2", "OwnerUserId": "981959", "LastEditDate": "2013-06-03T15:33:10.240"}, "bq_ids": {"n4140": {"so_16897845_16897845_0": {"length": 65, "quality": 0.8666666666666667, "section_id": 3274}}, "n3337": {"so_16897845_16897845_0": {"length": 67, "quality": 0.8933333333333333, "section_id": 3145}}, "n4659": {"so_16897845_16897845_0": {"length": 65, "quality": 0.8666666666666667, "section_id": 4032}}}, "16897845": {"ViewCount": "547", "Body": "<p>Code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;ios&gt;\n#include &lt;string&gt;\n#include &lt;type_traits&gt;\n#include &lt;memory&gt;\n\nstruct value\n{\n    ~value() = default;\n    std::unique_ptr&lt;std::string&gt; s;\n};\n\nint main()\n{\n    std::cout &lt;&lt; std::boolalpha;\n    std::cout &lt;&lt; std::is_move_constructible&lt;value&gt;::value &lt;&lt; '\\n';\n    std::cout &lt;&lt; std::is_move_assignable&lt;value&gt;::value    &lt;&lt; '\\n';\n\n    using str_ptr = std::unique_ptr&lt;std::string&gt;;\n    std::cout &lt;&lt; std::is_move_constructible&lt;str_ptr&gt;::value &lt;&lt; '\\n';\n    std::cout &lt;&lt; std::is_move_assignable&lt;str_ptr&gt;::value    &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre>\n<p>Output (compiled with g++ v4.7.2, <a href=\"http://ideone.com/CkW1tG\" rel=\"nofollow noreferrer\">http://ideone.com/CkW1tG</a>):</p>\n<pre>\nfalse\nfalse\ntrue\ntrue\n</pre>\n<p>As I expect, <code>value</code> is not move constructible and is not move assignable because:</p>\n<pre><code>~value() = default;\n</code></pre>\n<p>is a <em>user-declared</em> destructor, which prevents the implicit generation of move members according to section <em>12.8</em> (see below).\nIf the destructor is removed then <code>value</code> is move constructible and move assignable, as I expect (<a href=\"http://ideone.com/VcR2eq\" rel=\"nofollow noreferrer\">http://ideone.com/VcR2eq</a>).</p>\n<p>However, when the definition of <code>value</code> is changed to (<a href=\"http://ideone.com/M8LHEA\" rel=\"nofollow noreferrer\">http://ideone.com/M8LHEA</a>):</p>\n<pre><code>struct value\n{\n    ~value() = default;\n    std::string s;      // std::unique_ptr&lt;&gt; removed\n};\n</code></pre>\n<p>the output is:</p>\n<pre>\ntrue\ntrue\ntrue\ntrue\n</pre>\n<p><code>value</code> is unexpectedly move constructible and move assignable.\nAm I misunderstanding or is this a compiler bug?</p>\n<hr>\n<p><em>Background</em>: I provided an answer to <a href=\"https://stackoverflow.com/questions/16875230/c11-magically-deleted-constructor-in-bst\">this</a> question and was informed that <code>Tree&lt;&gt;</code> was moveable, but I am unsure and am attempting to determine for certain if it is or not.</p>\n<hr>\n<p>Section <em>8.4.2 Explicitly-defaulted functions</em> of the c++11 standard (draft n3337):</p>\n<blockquote>\n<p id=\"so_16897845_16897845_0\">Explicitly-defaulted functions and implicitly-declared functions are\n  collectively called defaulted functions, and the implementation shall\n  provide implicit definitions for them (12.1 12.4, 12.8), which might mean\n  defining them as deleted.\n  A special member function is user-provided if it is user-declared and\n  not explicitly defaulted or deleted on its first declaration.\n  A user-provided explicitly-defaulted function (i.e., explicitly defaulted\n  after its first declaration) is defined at the point where it is\n  explicitly defaulted; if such a function is implicitly defined as deleted,\n  the program is ill-formed. [ Note: Declaring a function as defaulted after its\n  first declaration can provide efficient execution and concise definition while\n  enabling a stable binary interface to an evolving code base.\u2014end note ]</p>\n</blockquote>\n<p>Section <em>12.8 Copying and moving class objects</em> (point 9):</p>\n<pre>\nIf the definition of a class X does not explicitly declare a move constructor,\none will be implicitly declared as defaulted if and only if\n- X does not have a user-declared copy constructor,\n- X does not have a user-declared copy assignment operator,\n- X does not have a user-declared move assignment operator,\n- X does not have a user-declared destructor, and\n- the move constructor would not be implicitly defined as deleted.\n</pre>\n</hr></hr>", "AcceptedAnswerId": "16899729", "Title": "Move member function generation", "CreationDate": "2013-06-03T13:25:32.107", "Id": "16897845", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:20.423", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-04T07:35:14.543", "Score": "12", "OwnerUserId": "1033896", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}});