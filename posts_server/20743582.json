post_cb({"bq_ids": {"n4140": {"so_20743582_20743681_2": {"length": 5, "quality": 1.0, "section_id": 5849}, "so_20743582_20743681_1": {"length": 4, "quality": 1.0, "section_id": 48}}, "n3337": {"so_20743582_20743681_2": {"length": 5, "quality": 1.0, "section_id": 5619}, "so_20743582_20743681_1": {"length": 4, "quality": 1.0, "section_id": 43}}, "n4659": {"so_20743582_20743681_2": {"length": 5, "quality": 1.0, "section_id": 7328}, "so_20743582_20743681_1": {"length": 4, "quality": 1.0, "section_id": 49}}}, "20743706": {"Id": "20743706", "PostTypeId": "2", "Body": "<p>Yes, I've used constructs like that before:</p>\n<pre><code>template &lt;typename T&gt;\nunion test\n{\n    unsigned char ch[sizeof(T)];\n    T variable;\n};\n</code></pre>\n", "LastActivityDate": "2013-12-23T12:34:35.043", "CommentCount": "0", "CreationDate": "2013-12-23T12:34:35.043", "ParentId": "20743582", "Score": "9", "OwnerUserId": "3005167"}, "20743582": {"ViewCount": "1724", "Body": "<p>It seems unions can be templated in c++11, they are used for example in <a href=\"https://github.com/akrzemi1/Optional/blob/master/optional.hpp\" rel=\"noreferrer\">the reference implementation of std::optional</a>.</p>\n<p>Was that possible before c++11 ?</p>\n", "AcceptedAnswerId": "20743681", "Title": "Can union be templated?", "CreationDate": "2013-12-23T12:27:30.060", "Id": "20743582", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-23T10:16:00.813", "LastEditorUserId": "1147772", "LastActivityDate": "2014-07-23T10:16:00.813", "Score": "20", "OwnerUserId": "1147772", "Tags": "<c++><templates><unions>", "AnswerCount": "2"}, "20743681": {"Id": "20743681", "PostTypeId": "2", "Body": "<p>Yes, it seems that this has always been allowed. A union is a class, and a template is either a function or a class template.</p>\n<p>Relevant parts of the standards:</p>\n<ul>\n<li><p>[temp]</p>\n<blockquote>\n<p id=\"so_20743582_20743681_0\">The <em>declaration</em> in a <em>template-declaration</em> shall</p>\n<p id=\"so_20743582_20743681_1\">\u2014 declare or define a function or a class, [...]</p>\n</blockquote></li>\n<li><p>[class]</p>\n<blockquote>\n<p id=\"so_20743582_20743681_2\">A <em>union</em> is a class defined with the class-key <code>union</code></p>\n</blockquote></li>\n</ul>\n<p>(So one might argue that the new type trait <a href=\"http://en.cppreference.com/w/cpp/types/is_class\"><code>std::is_class</code></a> is a slight misnomer; the traits are supposed to partition the space of types, and so <code>is_union</code> is a separate, mutually exclusive trait.)</p>\n", "LastActivityDate": "2013-12-23T12:33:01.810", "CommentCount": "1", "CreationDate": "2013-12-23T12:33:01.810", "ParentId": "20743582", "Score": "19", "OwnerUserId": "596781"}});