post_cb({"bq_ids": {"n4140": {"so_24595372_24595372_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 7156}}, "n3337": {"so_24595372_24595372_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 6900}}, "n4659": {"so_24595372_24595372_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 8663}}}, "24595502": {"Id": "24595502", "PostTypeId": "2", "Body": "<p><strong>Note:</strong> I edited and corrected the statement about unsequenced initialization (thanks to @dyp). If your program doesn't start any threads, then all initializations happen in some (possibly indeterminate) sequence.</p>\n<hr>\n<p>There are no constraints beyond the constraints described in the Standard<sup>1</sup> on which threads perform initialization and destruction of objects with static storage duration. In particular, the initialization of objects in different translation units are indeterminately sequenced with respect to one another (cf. [basic.start.init]/2), and <em>unsequenced</em> if the program starts threads.</p>\n<p>It is therefore possible for initializations to occur concurrently in multiple threads if the first function call within a TU occurs within another thread other than the main thread. What the standard says is that those objects whose initialization <em>is</em> sequenced (e.g. those in the same TU) are also destroyed in a deterministic, compatible order.</p>\n<p><sub><strong>______________</strong><br>\n1) \"beyond what is said, nothing is said\" \u2014 a bit it of a tautology, but worth calling out</br></sub></p>\n</hr>", "LastEditorUserId": "596781", "LastActivityDate": "2014-07-06T13:44:47.247", "Score": "1", "CreationDate": "2014-07-06T11:48:27.793", "ParentId": "24595372", "CommentCount": "11", "LastEditDate": "2014-07-06T13:44:47.247", "OwnerUserId": "596781"}, "24595372": {"ViewCount": "150", "Body": "<p>I have misunderstandingn on sec. 3.6.3/1 N3797. When I considered initialization rule I come across with copy-initialization concept.</p>\n<blockquote>\n<p id=\"so_24595372_24595372_0\">If the completion of the constructor\n  or dynamic initialization of an object with static storage duration is\n  sequenced before that of another, the completion of the destructor of\n  the second is sequenced before the initiation of the destructor of the\n  first. [ Note: <strong>This definition permits concurrent destruction.</strong>\u2014 end\n  note ]</p>\n</blockquote>\n<p>Is it possible that completion destructors of the second and of the first are in different threads?</p>\n", "AcceptedAnswerId": "24595502", "Title": "Concurrent object destruction", "CreationDate": "2014-07-06T11:32:42.147", "Id": "24595372", "CommentCount": "0", "LastEditDate": "2014-07-06T11:45:15.637", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "596781", "LastActivityDate": "2014-07-06T13:44:47.247", "Score": "1", "Tags": "<c++><destructor><language-lawyer>", "AnswerCount": "1"}});