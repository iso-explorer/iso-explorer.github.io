post_cb({"8425154": {"ParentId": "8425118", "CommentCount": "0", "CreationDate": "2011-12-08T01:47:08.857", "OwnerUserId": "275737", "PostTypeId": "2", "Id": "8425154", "Score": "0", "Body": "<p>Integer types smaller than <code>int</code> are promoted to <code>int</code> before any operation is performed on them. You might want to look at what the <a href=\"https://www.securecoding.cert.org/confluence/display/seccode/INT02-C.+Understand+integer+conversion+rules\" rel=\"nofollow\">CERT Secure Coding Standard</a> says about \"understanding integer conversion rules\".</p>\n", "LastActivityDate": "2011-12-08T01:47:08.857"}, "8425118": {"CommentCount": "3", "ViewCount": "1666", "PostTypeId": "1", "LastEditorUserId": "505306", "CreationDate": "2011-12-08T01:41:30.780", "LastActivityDate": "2011-12-08T06:14:11.297", "Title": "Bitwise AND between an 8-bit integer and 32 bit integer in C++", "AcceptedAnswerId": "8425141", "LastEditDate": "2011-12-08T01:50:09.867", "Id": "8425118", "Score": "0", "Body": "<p>If I perform a Bitwise AND between a 8 bit integer (<code>int8_t</code>) and 32 bit integer (<code>int</code>) will the result be a 8 bit integer or a 32 bit integer? </p>\n<p>I am using GNU/Linux and GCC compiler </p>\n<p>To put the question slightly differently, before performing the bitwise AND, are the first 24 bits of the 32 bit integer discarded, or is the 8 bit integer first typecast to a 32 bit integer ? </p>\n<p><em><strong>EDIT:</strong></em></p> In this little code \n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdint.h&gt;\nint main()\n{\n  int    i=34;\n  int8_t j=2;\n\n  std::cout&lt;&lt;sizeof((i&amp;j))&lt;&lt;std::endl;//Bitwise and between a 32 bit integer and 8 bit integer\n  return 0;\n}\n</code></pre>\n<p>I get the output as 4. I would assume that means that the result is a 32 bit integer then. But I don't know if the result depends on the machine, compiler or OS. </p>\n", "Tags": "<c++><c><gcc><int><bit-manipulation>", "OwnerUserId": "505306", "AnswerCount": "4"}, "8425141": {"ParentId": "8425118", "CommentCount": "0", "CreationDate": "2011-12-08T01:45:02.067", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "8425141", "Score": "6", "Body": "<p>For the <code>&amp;</code> operator (and most other operators), any operands smaller than <code>int</code> will be promoted to <code>int</code> before the operation is evaluated.</p>\n<p>From the C99 standard (6.5.10 - describing the bitwise AND operator):</p>\n<blockquote>\n<p id=\"so_8425118_8425141_0\">The usual arithmetic conversions are performed on the operands.</p>\n</blockquote>\n<p>(6.3.1.8 - describing the usual arithmetic conversions):</p>\n<blockquote>\n<p id=\"so_8425118_8425141_1\">the integer promotions are performed on both operands</p>\n</blockquote>\n<p>(6.3.1.1 - describing the integer promotions):</p>\n<blockquote>\n<p id=\"so_8425118_8425141_2\">If an <code>int</code> can represent all values of the original type, the value is converted to an <code>int</code>; otherwise, it is converted to an <code>unsigned int</code>. These are called the integer\n  promotions.</p>\n</blockquote>\n", "LastActivityDate": "2011-12-08T01:45:02.067"}, "8426959": {"ParentId": "8425118", "CommentCount": "0", "CreationDate": "2011-12-08T06:14:11.297", "OwnerUserId": "379897", "PostTypeId": "2", "Id": "8426959", "Score": "2", "Body": "<p>Regardless of what the language specifies, the answer to the question is that it does not matter whatsoever if the high 24 bits are dropped before the bitwise and is performed, since they're all-zero bits in one operand and thus in the result.</p>\n", "LastActivityDate": "2011-12-08T06:14:11.297"}, "8425161": {"ParentId": "8425118", "CommentCount": "0", "CreationDate": "2011-12-08T01:47:29.510", "OwnerUserId": "618400", "PostTypeId": "2", "Id": "8425161", "Score": "1", "Body": "<p>8 bit integer is typecast to a 32 bit integer. Bitwise operators trigger the usual arithmetic conversions (which means the smaller type is promoted to match the larger). That's defined in chapter 5.1 of the spec.</p>\n", "LastActivityDate": "2011-12-08T01:47:29.510"}, "bq_ids": {"n4140": {"so_8425118_8425141_0": {"section_id": 6135, "quality": 0.8333333333333334, "length": 5}, "so_8425118_8425141_2": {"section_id": 21, "quality": 0.5555555555555556, "length": 10}}, "n3337": {"so_8425118_8425141_0": {"section_id": 5899, "quality": 0.8333333333333334, "length": 5}, "so_8425118_8425141_2": {"section_id": 18, "quality": 0.5555555555555556, "length": 10}}, "n4659": {"so_8425118_8425141_0": {"section_id": 7632, "quality": 0.8333333333333334, "length": 5}, "so_8425118_8425141_2": {"section_id": 21, "quality": 0.5555555555555556, "length": 10}}}});