post_cb({"21007793": {"Id": "21007793", "PostTypeId": "2", "Body": "<p>The C++ standard requires complete types for all but a few class templates (e.g. <code>std::shared_ptr</code>, and <code>std::unique_ptr</code> in some special circumstances). The containers require full types, so your code sample would techincally yield <em>undefined behaviour</em>, even though it might work on some implementations. </p>\n<p>Note that <code>boost.container</code> has std c++-like <a href=\"http://www.boost.org/doc/libs/1_55_0/doc/html/container/main_features.html#container.main_features.containers_of_incomplete_types\" rel=\"nofollow noreferrer\">containers for incomplete types</a>.</p>\n<p>See this <a href=\"https://stackoverflow.com/questions/18672135/why-c-containers-dont-allow-incomplete-types\">related SO post</a>.</p>\n<p>This is laid out in <strong>17.6.4.8 [res.on.functions]</strong>, where it specifies undefined behaviour </p>\n<blockquote>\n<p id=\"so_21007724_21007793_0\">if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>Thanks to @DietmarK\u00fchl for finding the appropriate quote.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-09T07:27:42.407", "Score": "3", "CreationDate": "2014-01-08T22:17:52.530", "ParentId": "21007724", "CommentCount": "8", "OwnerUserId": "661519", "LastEditDate": "2017-05-23T12:21:27.580"}, "21007724": {"ViewCount": "75", "Body": "<p>In continuation to my question <a href=\"https://stackoverflow.com/questions/21007535/using-a-class-as-a-template-parameter-for-a-templated-class-with-forward-declera\">here</a>:</p>\n<p>I know that after a forward deceleration such as</p>\n<pre><code>class Foo;\n</code></pre>\n<p>I can declare a variable as <code>Foo*</code> or <code>Foo&amp;</code>, but not <code>Foo</code>, and if I have a templated class <code>Bar&lt;T&gt;</code> that only has <code>T*</code> and <code>T&amp;</code> inside it then the same rule would apply to <code>Bar&lt;Foo&gt;</code> (i.e. I would only need a forward deceleration in order to write <code>Bar&lt;Foo&gt;</code>).</p>\n<p>My question is whether the STL class guarantee such a thing, that they only contain references and pointers to the template type. I tested this:</p>\n<pre><code>class A;\nstd::vector&lt;A&gt; b;\n</code></pre>\n<p>with the VS2010 implementation of the STL and it compiled, but I don't know if this is true for all STL containers, nor if this is just the way the MS implementation of the STL is or if it is part of the standard.</p>\n", "AcceptedAnswerId": "21007793", "Title": "Using a class as a template parameter for a STL class with forward decleration", "CreationDate": "2014-01-08T22:14:09.113", "Id": "21007724", "CommentCount": "0", "LastEditDate": "2017-05-23T12:03:47.687", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-09T07:27:42.407", "Score": "1", "OwnerUserId": "331785", "Tags": "<c++><templates><stl>", "AnswerCount": "2"}, "21007899": {"Id": "21007899", "PostTypeId": "2", "Body": "<p>In 17.6.4.8 [res.on.functions] paragraph 2 it is stated</p>\n<blockquote>\n<p id=\"so_21007724_21007899_0\">In particular, the effects are undefined in the following cases:</p>\n<ul>\n<li>[...]</li>\n<li>if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</li>\n</ul>\n</blockquote>\n<p>That is, the standard library containers would need to make an explicit exemption allowing their instantiation for certain types with an incomplete type. I'm pretty that there is no such exception stated in the containers section.</p>\n", "LastActivityDate": "2014-01-08T22:25:28.237", "CommentCount": "0", "CreationDate": "2014-01-08T22:25:28.237", "ParentId": "21007724", "Score": "2", "OwnerUserId": "1120273"}, "bq_ids": {"n4140": {"so_21007724_21007793_0": {"length": 11, "quality": 1.0, "section_id": 6324}, "so_21007724_21007899_0": {"length": 5, "quality": 1.0, "section_id": 6324}}, "n3337": {"so_21007724_21007793_0": {"length": 11, "quality": 1.0, "section_id": 6081}, "so_21007724_21007899_0": {"length": 5, "quality": 1.0, "section_id": 6081}}, "n4659": {"so_21007724_21007793_0": {"length": 11, "quality": 1.0, "section_id": 7834}, "so_21007724_21007899_0": {"length": 5, "quality": 1.0, "section_id": 7834}}}});