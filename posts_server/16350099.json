post_cb({"16372385": {"Id": "16372385", "PostTypeId": "2", "Body": "<p>I think I get it.</p>\n<p>In Microsoft C++ 2008(probably 2005+), CRT functions as <code>wprintf</code>, <code>wcout</code> are implemented such that they convert a wide string literal as <code>L\"\u4e2d\"</code> encoded in UTF-16, under the hood, to match the current locale/code page setting. So what happens here is that <code>L\"\u4e2d\"</code> is converted to bytes <code>D6 D0</code> in code page 936 for simplified Chinese.</p>\n<p>I was wrong that <code>setlocale</code> set the console code page. It just set the current program code page which is used by CRT functions during the \"conversion\". For changing console code page, command <code>chcp</code> or Win API <code>SetConsoleOputputCP()</code> achieves.</p>\n<p>Since my console's default page is 936, that character can be correctly shown w/o problem.</p>\n", "LastActivityDate": "2013-05-04T08:45:52.270", "Score": "2", "CreationDate": "2013-05-04T08:45:52.270", "ParentId": "16350099", "CommentCount": "1", "OwnerUserId": "419391"}, "bq_ids": {"n4140": {"so_16350099_16350099_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 5313}, "so_16350099_16350099_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 5347}}, "n3337": {"so_16350099_16350099_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 5110}, "so_16350099_16350099_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 5144}}, "n4659": {"so_16350099_16350099_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 6737}, "so_16350099_16350099_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 6772}}}, "16350099": {"ViewCount": "835", "Body": "<p>Per <a href=\"http://msdn.microsoft.com/en-us/library/6aw8xdf2.aspx\" rel=\"nofollow\">MSDN</a>:</p>\n<blockquote>\n<p id=\"so_16350099_16350099_0\">\"For the Microsoft C/C++ compiler, the source and execution character sets are both ASCII.\"</p>\n</blockquote>\n<p>C++03 </p>\n<p>2.1 Phases of translation</p>\n<blockquote>\n<p id=\"so_16350099_16350099_1\">\"..<strong><em>Any source file character not in the basic source character set</em></strong>\n  (2.2) is replaced by the universal-character-name that designates that\n  character. (<strong><em>An implementation may use any internal encoding</em></strong>, so long\n  as an actual extended character encountered in the source file, and\n  the same extended character expressed in the source file as a\n  universal-character-name (i.e. using the \\uXXXX notation), are handled\n  equivalently.)\"</p>\n</blockquote>\n<p>2.13.2 Character literals</p>\n<blockquote>\n<p id=\"so_16350099_16350099_2\">\"A universal-character-name is translated to the encoding, in the\n  execution character set, of the character named. If there is no such\n  encoding, the universal-character-name is translated to an\n  implementation-defined encoding.\"</p>\n</blockquote>\n<p>To test which execution character set is used by MSVC++, I wrote the following code:</p>\n<pre><code>wchar_t *str = L\"\u4e2d\";\nunsigned char *p = reinterpret_cast&lt;unsigned char*&gt;(str);\nfor (int i = 0; i &lt; sizeof(L\"\u4e2d\"); ++i)\n{\n   printf (\"%x \", *(p + i));\n}\n</code></pre>\n<p>The output shows that <code>2d 4e 0 0</code>, and <code>0x4e2d</code> is the <a href=\"http://www.fileformat.info/info/unicode/char/4E2D/index.htm\" rel=\"nofollow\">UTF-16 encoding</a> of this Chinese character. So I conclude: <em>UTF-16 is used as execution character set by MSVC</em> (My version: 2012 4.5.50709)</p>\n<p>After, I tried to print this character out to a Windows console. Since the default locale used by console is <code>\"C\"</code>, I set the locale to code page 936 representing simplified Chinese characters.</p>\n<pre><code>// use the execution environment locale setting, which is 936\nwchar_t *str = L\"\u4e2d\";\nchar* locale = setlocale(LC_ALL, \"\");\nwprintf (L\"%ls\\n\", str);\n</code></pre>\n<p>Which outputs:</p>\n<pre><code>\u4e2d\n</code></pre>\n<p>What I'm curious about is, how can a character encoded in UTF-16 be decoded by a Windows console whose locale(decoder) is set to non-UTF-16(MS code page 936)? How can that happen?</p>\n", "AcceptedAnswerId": "16372385", "Title": "Why a Windows console with Chinese code page set can show a UTF-16 encoded character?", "CreationDate": "2013-05-03T01:08:21.623", "Id": "16350099", "CommentCount": "0", "LastEditDate": "2013-05-03T02:05:51.990", "PostTypeId": "1", "LastEditorUserId": "419391", "LastActivityDate": "2013-05-04T08:45:52.270", "Score": "4", "OwnerUserId": "419391", "Tags": "<c++><visual-c++><unicode><locale>", "AnswerCount": "2"}, "16359502": {"Id": "16359502", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16350099_16359502_0\">how can a character encoded in UTF-16 be decoded by a Windows console whose locale(decoder) is set to non-UTF-16</p>\n</blockquote>\n<p>There are two ways you can write text to the console. The byte way, using the Win32 API <code>WriteConsoleA</code>, gives you characters from bytes interpreted using the console's code page (\"ANSI\"). The Unicode way, <code>WriteConsoleW</code>, receives a UTF-16LE string and writes the characters to the console directly without having to worry about what code page it is using.</p>\n<p>The stdio function <code>printf</code> uses <code>WriteConsoleA</code> when the output is an interactive console. The <code>wprintf</code> function, from VS 2005 on at least, calls <code>WriteConsoleW</code>.</p>\n", "LastActivityDate": "2013-05-03T12:59:20.163", "Score": "0", "CreationDate": "2013-05-03T12:59:20.163", "ParentId": "16350099", "CommentCount": "1", "OwnerUserId": "18936"}});