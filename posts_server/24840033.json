post_cb({"24841031": {"Id": "24841031", "PostTypeId": "2", "Body": "\n<p>What you've just found is a classic example of one of the quirks of C++. Your program can actually be decomposed into this simple example:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>int i = 10;\nf(i, ++i);\n</code></pre>\n<p>The compiler has the choice of function argument evaluation from left-to-right, but this is not guaranteed. Here's some standard text:</p>\n<blockquote>\n<p id=\"so_24840033_24841031_0\"><strong>5.2/4 Postfix Epressions [expr.post]</strong></p>\n<blockquote>\n<p id=\"so_24840033_24841031_2\">When a function is called, each parameter shall be initialized with its corresponding argument. [<em>Note:</em> Such initializations are indeterminatly sequenced with respect to each other (1.9) - <em>end note</em>]</p>\n</blockquote>\n</blockquote>\n<p>Because they are indeterminatly sequenced, the compiler has the freedom of evaluating <code>++i</code> before the first argument and initializing it with the corresponding function parameter, and then evaluating <code>i</code> and initializing it with its respective parameter next.</p>\n<p>The reason function call argument evaluation ambiguity is applicable here is because <code>operator&lt;&lt;()</code> is a function but it's just being called with the operator syntax. For example, this is what your code looks like if we use the operator-id syntax:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>std::operator&lt;&lt;(std::operator&lt;&lt;(std::operator&lt;&lt;(std::cout, \"(\").operator&lt;&lt;(i*3), \",\").operator&lt;&lt;(j*7), \")\").operator&lt;&lt;(getRemainderOf(i*3, 7*j, quotient)).operator&lt;&lt;(quotient);\n</code></pre>\n<p>These are just chains of function calls with arguments and they obey the same rule as the one above.</p>\n<p>The solution is to sequence the act of modifying the object and using it in the <code>operator&lt;&lt;()</code> call. You already achieved this with partitioning the <code>operator&lt;&lt;()</code> call into two statements with the semicolon <code>;</code>, so the function is guaranteed to be called before <code>quotient</code> is printed.</p>\n", "LastActivityDate": "2014-07-19T13:39:44.807", "CommentCount": "2", "CreationDate": "2014-07-19T13:39:44.807", "ParentId": "24840033", "Score": "0", "OwnerUserId": "701092"}, "bq_ids": {"n4140": {"so_24840033_24841031_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5991}, "so_24840033_24841031_2": {"length": 15, "quality": 0.7894736842105263, "section_id": 5991}}, "n3337": {"so_24840033_24841031_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5759}, "so_24840033_24841031_2": {"length": 15, "quality": 0.7894736842105263, "section_id": 5759}}, "n4659": {"so_24840033_24841031_1": {"length": 10, "quality": 0.5263157894736842, "section_id": 7491}, "so_24840033_24841031_2": {"length": 10, "quality": 0.5263157894736842, "section_id": 7491}}}, "24840141": {"Id": "24840141", "PostTypeId": "2", "Body": "<p>The order of evaluation of function arguments is unspecified.\nIn these statements</p>\n<pre><code>cout &lt;&lt; \"(\"&lt;&lt; i*3 &lt;&lt; \",\" &lt;&lt; j*7 &lt;&lt; \") \"  &lt;&lt;( getRemainderOf(i*3, 7*j, quotient) ) &lt;&lt; \" \" &lt;&lt; quotient &lt;&lt;endl;\n\ncout &lt;&lt; \"(\"&lt;&lt; i*7 &lt;&lt; \",\" &lt;&lt; j*3 &lt;&lt; \") \"  &lt;&lt; getRemainderOf(i*7, 3*j, quotient) &lt;&lt; \" \"; cout &lt;&lt; quotient &lt;&lt;endl;\n</code></pre>\n<p>there are called overloaded operators &lt;&lt; that are in fact functions. You have to split each statement in two statements. For example</p>\n<pre><code>cout &lt;&lt; \"(\"&lt;&lt; i*3 &lt;&lt; \",\" &lt;&lt; j*7 &lt;&lt; \") \"  &lt;&lt;( getRemainderOf(i*3, 7*j, quotient) ) ;\ncout &lt;&lt; \" \" &lt;&lt; quotient &lt;&lt;endl;\n</code></pre>\n", "LastActivityDate": "2014-07-19T11:59:30.677", "CommentCount": "0", "CreationDate": "2014-07-19T11:59:30.677", "ParentId": "24840033", "Score": "0", "OwnerUserId": "2877241"}, "24840033": {"ViewCount": "60", "Body": "<p>sorry for asking you a stupid question, but I just can't figure out why I keep on getting this output.\nSo here is my code:</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\nunsigned n = 4242;\n\nint getRemainderOf(int m, int n, int&amp; quotient);\n\nstatic int l = 0;   \nint main()\n{\n\n    int quotient;  // the value of which should be changed after calling the func.\n\n    for(int i=-1; i&lt;=1; ++i)\n    {\n        for(int j=-1; j&lt;=1; ++j)\n        {\n            if( i &amp;&amp; j )\n            {\n\n                cout &lt;&lt; \"(\"&lt;&lt; i*3 &lt;&lt; \",\" &lt;&lt; j*7 &lt;&lt; \") \"  &lt;&lt;( getRemainderOf(i*3, 7*j, quotient) ) &lt;&lt; \" \" &lt;&lt; quotient &lt;&lt;endl;\n\n                cout &lt;&lt; \"(\"&lt;&lt; i*7 &lt;&lt; \",\" &lt;&lt; j*3 &lt;&lt; \") \"  &lt;&lt; getRemainderOf(i*7, 3*j, quotient) &lt;&lt; \" \"; cout &lt;&lt; quotient &lt;&lt;endl;\n            }\n        }\n    }\n\n    return 0;\n}\n\nint getRemainderOf(int m, int n, int&amp; quotient)\n{\n    ++l;\n    cout &lt;&lt; l &lt;&lt;endl;\n    quotient = m / n;\n    cout &lt;&lt; \" quotient \" &lt;&lt; quotient &lt;&lt;endl;\n    return m % n;\n}\n</code></pre>\n<p>so what I expected to see in the first line of my output was the remainder and then the quotient that I get after calling the function getRemainderOf(). But instead when I cout  the value of quotient like that I see that the value of quotient is a garbage value. So the value of the variable is not changed even though I've passed it to the function by using reference.\nThe funny thing is that if I cout the remainder (got by calling the function) and the quotient separately I will get it right.\nI see that the problem might be in calling the function as a argument of the operator &lt;&lt; function but I don't get it why the value of the quotient isn't changed since I call the function before I output it. This operator's associativity is left-to-right so what's wrong?\nSo could you please  tell me what is the reason of this output.</p>\n", "AcceptedAnswerId": "24841031", "Title": "Strange output, not as expected", "CreationDate": "2014-07-19T11:44:34.320", "Id": "24840033", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-07-19T13:39:44.807", "Score": "0", "OwnerUserId": "3576192", "Tags": "<c++><reference><stream><iostream><cout>", "AnswerCount": "2"}});