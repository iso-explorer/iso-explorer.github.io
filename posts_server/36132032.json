post_cb({"36132032": {"ViewCount": "189", "Body": "<p>In this code assigning to b1 works, but it won't allow assigning to b2 (with or without the static cast). I was actually trying to solve the opposite problem, public inheritance but not implicitly converting to the base. However the cast operator never seems to be used. Why is this?</p>\n<pre><code>struct B {};    \n\nstruct D1 : private B {\n    operator B&amp;() {return *this;}\n    B&amp; getB() {return *this;}\n};\n\nstruct D2 : public B {\n    explicit operator B&amp;() {return *this;}\n};\n\nstruct D3 : public B {\n    operator B&amp;() = delete;\n};\n\nvoid funB(B&amp; b){}\n\nint main () {\n  D1 d1;\n  funB(d1.getB()); // works\n  // funB(d1); // fails to compile with 'inaccessible base class\n  D2 d2;\n  funB(d2); // works\n  D3 d3;\n  funB(d3); // works \n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "36132428", "Title": "Why does the cast operator to a private base not get used?", "CreationDate": "2016-03-21T13:13:36.867", "Id": "36132032", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-03-21T13:34:41.563", "Score": "11", "OwnerUserId": "2221312", "Tags": "<c++><inheritance><casting><implicit-cast><explicit-conversion>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36132032_36132428_0": {"length": 22, "quality": 1.0, "section_id": 391}}, "n3337": {"so_36132032_36132428_0": {"length": 22, "quality": 1.0, "section_id": 382}}, "n4659": {"so_36132032_36132428_0": {"length": 22, "quality": 1.0, "section_id": 408}}}, "36132428": {"Id": "36132428", "PostTypeId": "2", "Body": "<p>From <a href=\"http://eel.is/c++draft/class.conv.fct#1\">[class.conv.fct]</a>:</p>\n<blockquote>\n<p id=\"so_36132032_36132428_0\">A conversion function is never used to convert a (possibly cv-qualified) object\n  to the (possibly cv-qualified) same object type (or a reference to it), <strong>to a (possibly cv-qualified) base class of that type (or a reference to it)</strong>, or to (possibly cv-qualified) void.</p>\n</blockquote>\n<p>So in your first example:</p>\n<pre><code>struct D1 : private B {\n    operator B&amp;() {return *this;}\n    B&amp; getB() {return *this;}\n};\n</code></pre>\n<p><code>operator B&amp;</code> will never be used because it converts to a base class. It doesn't matter that it's a private base class. </p>\n", "LastActivityDate": "2016-03-21T13:32:18.540", "CommentCount": "3", "CreationDate": "2016-03-21T13:32:18.540", "ParentId": "36132032", "Score": "11", "OwnerUserId": "2069064"}});