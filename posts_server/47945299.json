post_cb({"bq_ids": {"n4140": {"so_47945299_47945299_2": {"length": 18, "quality": 0.9, "section_id": 6187}, "so_47945299_47945299_0": {"length": 14, "quality": 0.5833333333333334, "section_id": 6187}, "so_47945299_47945710_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 7162}, "so_47945299_47945710_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 7161}, "so_47945299_47945299_5": {"length": 18, "quality": 0.9, "section_id": 7164}, "so_47945299_47945299_1": {"length": 9, "quality": 0.5625, "section_id": 6187}}, "n3337": {"so_47945299_47945299_2": {"length": 14, "quality": 0.7, "section_id": 5947}, "so_47945299_47945710_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6905}, "so_47945299_47945299_5": {"length": 18, "quality": 0.9, "section_id": 6908}, "so_47945299_47945710_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6906}}, "n4659": {"so_47945299_47945299_2": {"length": 19, "quality": 0.95, "section_id": 7690}, "so_47945299_47945299_0": {"length": 24, "quality": 1.0, "section_id": 7690}, "so_47945299_47945299_1": {"length": 16, "quality": 1.0, "section_id": 7690}, "so_47945299_47945710_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 8668}, "so_47945299_47945299_5": {"length": 18, "quality": 0.9, "section_id": 8672}, "so_47945299_47945710_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 8669}, "so_47945299_47945299_3": {"length": 10, "quality": 1.0, "section_id": 7690}, "so_47945299_47945299_4": {"length": 20, "quality": 1.0, "section_id": 7690}}}, "47945299": {"ViewCount": "308", "Body": "<p>Inspired from <a href=\"https://stackoverflow.com/a/47912705/4832499\">this answer</a>, from <a href=\"http://eel.is/c++draft/expr.const#6\" rel=\"noreferrer\">[expr.const]</a></p>\n<blockquote>\n<p id=\"so_47945299_47945299_0\">A constant expression is either a glvalue core constant expression that refers to an entity that is a permitted result of a constant expression (as defined below), or a prvalue core constant expression whose value satisfies the following constraints:</p>\n<ul>\n<li><p id=\"so_47945299_47945299_1\">if the value is an object of class type, each non-static data member of reference type refers to an entity that is a permitted result of a constant expression,</p></li>\n<li><p id=\"so_47945299_47945299_2\">if the value is of pointer type, it contains the address of an object with static storage duration, the address past the end of such an object ([expr.add]), the address of a function, or a null pointer value, and</p></li>\n<li><p id=\"so_47945299_47945299_3\">if the value is an object of class or array type, each subobject satisfies these constraints for the value.</p></li>\n</ul>\n<p id=\"so_47945299_47945299_4\">An entity is a permitted result of a constant expression if it is an <strong>object with static storage duration that is either not a temporary object or is a temporary object whose value satisfies the above constraints</strong>, or it is a function.</p>\n</blockquote>\n<p>What exactly is a temporary object with static storage duration? Am I missing something or is it paradoxical for an object to both be temporary and have static storage duration?</p>\n<p>The definition from <a href=\"https://timsong-cpp.github.io/cppwp/basic.stc.static#1\" rel=\"noreferrer\">[basic.stc.static]</a></p>\n<blockquote>\n<p id=\"so_47945299_47945299_5\">All variables which do not have dynamic storage duration, do not have thread storage duration, and are not local have static storage duration. The storage for these entities shall last for the duration of the program</p>\n</blockquote>\n<p>Applies to <em>variables</em> only.</p>\n", "AcceptedAnswerId": "47945710", "Title": "What is a temporary object with static storage duration", "CreationDate": "2017-12-22T17:34:24.590", "Id": "47945299", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2017-12-22T18:16:01.780", "Score": "11", "OwnerUserId": "4832499", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}, "47945710": {"Id": "47945710", "PostTypeId": "2", "Body": "<p>[basic.stc]/1 tells us:</p>\n<blockquote>\n<p id=\"so_47945299_47945710_0\">The <em>storage duration</em> is the property of an object that defines the minimum potential lifetime of the storage containing the object.</p>\n</blockquote>\n<p>So every object has a storage duration. Further, paragraph 2 says:</p>\n<blockquote>\n<p id=\"so_47945299_47945710_1\">Static, thread, and automatic storage durations are associated with objects introduced by declarations (6.1) and <strong>implicitly created by the implementation (15.2)</strong>.</p>\n</blockquote>\n<p>Emphasis added. Note that section 15.2 is [class.temporary]: the rules for temporary objects.</p>\n<p>Therefore, we can conclude that temporary objects have storage durations. And we can conclude that temporaries must have one of those storage durations. Indeed, there are numerous references in the standard to \"variables or temporary objects\" and their storage durations.</p>\n<p>However, despite this clearly saying that temporary objects have one of those storage durations... the standard never actually says what storage duration they have. [class.temporary] does not have a statement saying that temporaries bound to references have the storage duration of their references. And [basic.stc]'s explanation of static, automatic, and thread-local durations always speaks of variables.</p>\n<p>So I would say that this is a defect in the wording. It seems clear that the standard <em>expects</em> temporaries to have an appropriate storage duration; there are multiple places where the standard talks about the storage duration of variable or temporary objects. But it never says what storage duration they actually have.</p>\n", "LastActivityDate": "2017-12-22T18:16:01.780", "Score": "7", "CreationDate": "2017-12-22T18:16:01.780", "ParentId": "47945299", "CommentCount": "13", "OwnerUserId": "734069"}});