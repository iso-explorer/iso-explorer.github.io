post_cb({"bq_ids": {"n4140": {"so_34840754_34841184_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3162}}, "n3337": {"so_34840754_34841184_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3035}}, "n4659": {"so_34840754_34841184_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3924}}}, "34840754": {"ViewCount": "811", "Body": "<p>I was just trying out this sample to understand future and promise.</p>\n<pre><code>void func(std::promise&lt;int&gt;&amp; p) {\n  p.set_value (0);\n}\n\nint main ()\n{\n  std::promise&lt;int&gt; p;                      \n  std::future&lt;int&gt; f = p.get_future(); \n  std::thread t(func, std::ref(p));  \n  int x = fut.get();            \n\n  t.join();\n  return 0;\n}\n</code></pre>\n<p>Is it ok if the return type of <code>func</code>is void? If yes, can the return type be <code>void</code> if it is used with <code>std::async</code></p>\n<pre><code> std::future&lt;int&gt; f = std::async(std::launch::async,  func);\n</code></pre>\n<p>Is the return of async deduced to <code>std::future&lt; int &gt;</code> if the return type of <code>func</code> is <code>void</code>?</p>\n<p>Please clarify about the return type of the function responsible for setting the promise.</p>\n<p>also, should func be designed based on how it <strong>could</strong> be used?</p>\n", "AcceptedAnswerId": "34841184", "Title": "What should be the return type of function that is run async", "CreationDate": "2016-01-17T16:39:42.310", "Id": "34840754", "CommentCount": "1", "LastEditDate": "2016-01-17T16:51:57.927", "PostTypeId": "1", "LastEditorUserId": "596781", "LastActivityDate": "2016-01-17T17:34:02.640", "Score": "2", "OwnerUserId": "2508038", "Tags": "<c++><c++11><asynchronous>", "AnswerCount": "1"}, "34841184": {"Id": "34841184", "PostTypeId": "2", "Body": "<p>In the first example the function run by the <a href=\"http://en.cppreference.com/w/cpp/thread/thread/thread\" rel=\"nofollow\">std::thread</a> constructor can return a value or not, the value is ignored.</p>\n<p>With a <a href=\"http://en.cppreference.com/w/cpp/thread/async\" rel=\"nofollow\">std::async</a> call the return value of the supplied function (as determined by <a href=\"http://en.cppreference.com/w/cpp/types/result_of\" rel=\"nofollow\">std::result_of</a>) sets the template type of the returned <a href=\"http://en.cppreference.com/w/cpp/thread/future\" rel=\"nofollow\">std::future</a>:</p>\n<pre><code>// function returns an int so std::async() returns a std::future&lt;int&gt;\nstd::future&lt;int&gt; fut = std::async(std::launch::async, []{ return 1; });\n</code></pre>\n<p>According to the <code>C++11</code> standard:</p>\n<p><strong>30.6.8 Function template async</strong></p>\n<blockquote>\n<p id=\"so_34840754_34841184_0\"><strong>4</strong> Returns: An object of type <code>future&lt;typename result_of&lt;F(Args...)&gt;::type&gt;</code> that refers to the shared state created by this call to async.</p>\n</blockquote>\n<p>So in your first example it doesn't matter what the return type of the function is because its the body of the function that sets the <code>std::promise</code>, not the return value.</p>\n<p>With an <code>std::async()</code>, however, the return statement must return the shared value to the <code>std::future</code>.</p>\n", "LastEditorUserId": "3807729", "LastActivityDate": "2016-01-17T17:34:02.640", "Score": "2", "CreationDate": "2016-01-17T17:16:44.540", "ParentId": "34840754", "CommentCount": "0", "OwnerUserId": "3807729", "LastEditDate": "2016-01-17T17:34:02.640"}});