post_cb({"bq_ids": {"n4140": {"so_45415955_45415955_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 379}, "so_45415955_45415955_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 379}}, "n3337": {"so_45415955_45415955_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 370}, "so_45415955_45415955_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 370}}}, "45415955": {"CreationDate": "2017-07-31T12:28:01.147", "ViewCount": "107", "FavoriteCount": "1", "Id": "45415955", "AcceptedAnswerId": "45416168", "Score": "3", "Title": "std::move(std::array) g++ vs visual-c++", "LastEditorUserId": "3681671", "CommentCount": "8", "Body": "<p>I had some problem implementing the move constructor for an element in my std::array in my project in visual studio 2013.</p>\n<p>So I tried making a minimal example in netbeans that I compiled with g++ 5.3.0 .<br>\nOnly to find that in g++ I could do what I was trying</br></p>\n<p>example g++:   </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nusing namespace std;\n\nstruct A{\n    A() = default;\n    A(const A&amp;)\n    {\n        cout &lt;&lt; \"copy constructed\" &lt;&lt; endl;\n    }\n    A(A&amp;&amp;)\n    {\n        cout &lt;&lt; \"move constructed\" &lt;&lt; endl;\n    }\n};\n\nclass B{\npublic:\n    B(array&lt;A, 2&gt;&amp;&amp; a)\n      : m_a(std::move(a))\n    {}\nprivate:\n    array&lt;A, 2&gt; m_a;\n};\n\nint main(){\n    A foo;\n    cout &lt;&lt; \"=========1===========\" &lt;&lt; endl;\n    array&lt;A, 2&gt; a = { { foo, std::move(foo) } };\n    cout &lt;&lt; \"=========2===========\" &lt;&lt; endl;\n    B b(std::move(a));\n    cout &lt;&lt; \"=========3===========\" &lt;&lt; endl;\n    array&lt;A, 2&gt; a_second = std::move(a);\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<blockquote>\n<p id=\"so_45415955_45415955_0\">=========1===========<br>\n  copy constructed<br>\n  move constructed<br>\n  =========2===========<br>\n  move constructed<br>\n  move constructed<br>\n  =========3===========<br>\n  move constructed<br>\n  move constructed    </br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>When I tried the (practically) the same code in visual studio 2013 the result was different:</p>\n<p>Output:</p>\n<blockquote>\n<p id=\"so_45415955_45415955_1\">=========1===========<br>\n  copy constructed<br>\n  move constructed<br>\n  =========2===========<br>\n  copy constructed<br>\n  copy constructed<br>\n  =========3===========<br>\n  copy constructed<br>\n  copy constructed   </br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>How can I use the move constructor in visual c++ and why does visual c++ refuse to use him here?</p>\n", "Tags": "<c++><c++11><visual-studio-2013>", "LastEditDate": "2017-07-31T12:42:22.980", "LastActivityDate": "2017-07-31T12:52:49.167", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "3681671"}, "45416168": {"LastActivityDate": "2017-07-31T12:52:49.167", "CommentCount": "3", "Body": "<p>This is a bug in MSVS 2013.  MSVS 2013 <a href=\"https://stackoverflow.com/questions/26581262/default-move-constructor-in-visual-studio-2013-update-3\">does not generate implicit move constructors</a>.  If you run it in a MSVS 2015 or 2017 you get the same output.</p>\n<hr>\n<p>I would also like to point out that</p>\n<pre><code>B(array&lt;A, 2&gt;&amp; a) : m_a(std::move(a))\n</code></pre>\n<p>Is not how you want to move an object into <code>B</code>.  If you wan't <code>B</code> to take over the array you should have</p>\n<pre><code>B(array&lt;A, 2&gt;&amp;&amp; a) : m_a(std::move(a))\n</code></pre>\n<p>This means that instead of using</p>\n<pre><code>B b(a);\n</code></pre>\n<p>you have to use</p>\n<pre><code>B b(std::move(a));\n</code></pre>\n<p>and now you can clearly see that <code>a</code> has been moved from in <code>main</code>.</p>\n</hr>", "CreationDate": "2017-07-31T12:38:22.400", "LastEditDate": "2017-07-31T12:52:49.167", "ParentId": "45415955", "Id": "45416168", "LastEditorUserId": "4342498", "PostTypeId": "2", "Score": "3", "OwnerUserId": "4342498"}, "45416300": {"CommentCount": "0", "Body": "<p>Visual studio 2013 isn't fully compatible with C++11. Move support for std containers is one of those \"not fully implemented\" parts.\nYour example works fine for the latest version of VS2017, see <a href=\"http://rextester.com/DMAC64783\" rel=\"nofollow noreferrer\">at Rextester</a>.</p>\n<p>P.S. <a href=\"http://en.cppreference.com/w/cpp/compiler_support\" rel=\"nofollow noreferrer\">Here</a> you can get detailed information about support for C++ features in various compilers.</p>\n", "CreationDate": "2017-07-31T12:44:23.860", "ParentId": "45415955", "Id": "45416300", "LastActivityDate": "2017-07-31T12:44:23.860", "PostTypeId": "2", "Score": "1", "OwnerUserId": "5722863"}});