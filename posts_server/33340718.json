post_cb({"bq_ids": {"n4140": {"so_33340718_33341499_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7151}}}, "33340718": {"ViewCount": "352", "Body": "<p>Apologies if this has already been asked, I can't find an answer to my specific question easily.</p>\n<p>I have code that I am parallelising. I want to declare a parallel region outside a function call, but inside the function I need to do some reduction operations.</p>\n<p>The basic form of the code is:</p>\n<pre><code>#pragma omp parallel\n{\n    for(j=0;j&lt;time_limit;j++)\n    {\n        //do some parallel loops\n        do_stuff(arg1, arg2)\n    }\n}\n...\n... \nvoid do_stuff(int arg1, int arg2)\n{\n    int sum=0;\n    #pragma omp for reduction(+:sum) //the sum must be shared between all threads\n    for(int i=0; i&lt;arg1;i++)\n    {\n        sum += something;\n    }\n  }\n</code></pre>\n<p>When I try to compile, the reduction clause throws an error because the variable <code>sum</code> is private for each thread (obviously since it is declared inside the parallel region).</p>\n<p>Is there a way to do this reduction (or something with the same end result) without having to declare the parallel region inside the function <code>do_stuff</code>?</p>\n", "AcceptedAnswerId": "33341499", "Title": "OpenMP reduction after parallel region declared outside function", "CreationDate": "2015-10-26T07:41:51.753", "Id": "33340718", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-10-26T13:26:04.910", "Score": "3", "OwnerUserId": "4636048", "Tags": "<c++><parallel-processing><openmp>", "AnswerCount": "1"}, "33341499": {"PostTypeId": "2", "Body": "<p>If you only want the reduction in the function you can use static storage.  From 2.14.1.2 of the <a href=\"http://www.openmp.org/mp-documents/OpenMP4.0.0.pdf\" rel=\"nofollow\">OpenMP 4.0.0 specification</a></p>\n<blockquote>\n<p id=\"so_33340718_33341499_0\">Variables with static storage duration that are declared in called routines in the region are shared.</p>\n</blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid do_stuff(int arg1, int arg2)\n{\n    static int sum = 0;\n    #pragma omp for reduction(+:sum)\n    for(int i=0; i&lt;arg1;i++) sum += arg2;\n    printf(\"sum %d\\n\", sum);\n}\n\nint main(void) {\n    const int time_limit = 10;\n    int x[time_limit]; for(int i=0; i&lt;time_limit; i++) x[i] = i;\n    #pragma omp parallel\n    {\n        for(int j=0;j&lt;time_limit;j++) do_stuff(10,x[j]);\n    }\n}\n</code></pre>\n", "LastActivityDate": "2015-10-26T13:26:04.910", "LastEditorUserId": "2542702", "Id": "33341499", "Score": "1", "CreationDate": "2015-10-26T08:37:29.657", "ParentId": "33340718", "CommentCount": "5", "LastEditDate": "2015-10-26T13:26:04.910", "OwnerUserId": "2542702"}});