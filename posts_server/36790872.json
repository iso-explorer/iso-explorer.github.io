post_cb({"36790985": {"ParentId": "36790872", "LastEditDate": "2016-04-22T10:26:44.510", "CommentCount": "0", "CreationDate": "2016-04-22T10:13:31.173", "OwnerUserId": "464581", "LastEditorUserId": "464581", "PostTypeId": "2", "Id": "36790985", "Score": "1", "Body": "<p>Re</p>\n<blockquote>\n<p id=\"so_36790872_36790985_0\"><strong>\u201d</strong> I understand that in general , pointers to any data type will have the same size</p>\n</blockquote>\n<p>No. Different pointer sizes are unusual for \u00b9simple pointers to objects, but can occur on word-addressed machines. Then <code>char*</code> is the largest pointer, and <code>void*</code> is the same size.</p>\n<b>C++14 \u00a73.9.2/4</b>\n<blockquote>\n<p id=\"so_36790872_36790985_1\"><strong>\u201d</strong> An object of type <em>cv</em> <code>void*</code> shall have the same\n  representation and alignment requirements as <em>cv</em> <code>char*</code>.</p>\n</blockquote>\n<p>All pointers to class type object are however the same size. For example, you wouldn't be able to use an array of pointers to base type, if this wasn't the case.</p>\n<hr>\n<p>Re</p>\n<blockquote>\n<p id=\"so_36790872_36790985_2\"><strong>\u201d</strong> how does the compiler know by how many bytes to increment this pointer</p>\n</blockquote>\n<p>It knows the size of the type of object pointed to.</p>\n<p>If it does not know the size of the object pointed to, i.e. that type is <em>incomplete</em>, then you can't increment the pointer.</p>\n<p>For example, if <code>p</code> is a <code>void*</code>, then you can't do <code>++p</code>.</p>\n<p><sup>\n<em>Notes:</em><br>\n\u00b9 In addition to ordinary pointers to objects, there are function pointers, and pointers to members. The latter kind are more like offsets, that must be combined with some specification of a relevant object, to yield a reference.\n</br></sup></p>\n</hr>", "LastActivityDate": "2016-04-22T10:26:44.510"}, "36790872": {"CommentCount": "5", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "2173917", "CreationDate": "2016-04-22T10:08:20.260", "LastActivityDate": "2016-11-24T09:22:23.153", "Title": "How does compiler know how to increment different pointers?", "LastEditDate": "2016-04-22T10:17:11.433", "Id": "36790872", "Score": "2", "Body": "<p>I understand that in general , pointers to any data type will have the same size. On a 16 bit system, normally 2 bytes and and on a 32 bit system , 4 bytes. </p>\n<p>Depending on what this pointer points to, if it is incremented , it will increment by a different number of bytes depending on if it's a char pointer, long pointer etc.</p>\n<p>My query is how does the compiler know by how many bytes to increment this pointer. Isn't it just a variable stored in memory like any other? Are the pointers stored in some symbol table with information about how much they should be incremented by? Thanks </p>\n", "Tags": "<c++><c><pointers><pointer-arithmetic>", "OwnerUserId": "4768946", "AnswerCount": "3"}, "36790933": {"ParentId": "36790872", "LastEditDate": "2016-04-22T10:16:30.170", "CommentCount": "0", "CreationDate": "2016-04-22T10:11:05.367", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "PostTypeId": "2", "Id": "36790933", "Score": "2", "Body": "<p>That is why there are data types. Each pointer variable will have an associated data type and that data type has a defined size <sup>(See about complete/incomplete type in footnote)</sup>. Pointer arithmetic will take place based on the data type.</p>\n<p>To add to that, for pointer arithmetic to happen, the pointer(s) should be (quoted from <code>c11</code> standard)</p>\n<blockquote>\n<p id=\"so_36790872_36790933_0\">pointer to a complete object type</p>\n</blockquote>\n<p>So, the size of the \"object\" the pointer points to is known and defined.</p>\n<p>Footnote: FWIW, that is why, pointer arithmetic on void pointers (incomplete type) is not allowed / defined in the standard. <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/Pointer-Arith.html\" rel=\"nofollow\">(<em>Though GCC supports void pointer arithmetic via an extension.</em>)</a></p>\n", "LastActivityDate": "2016-04-22T10:16:30.170"}, "bq_ids": {"n4140": {"so_36790872_36790933_0": {"section_id": 5949, "quality": 1.0, "length": 4}, "so_36790872_36790985_1": {"section_id": 7224, "quality": 1.0, "length": 9}}, "n3337": {"so_36790872_36790933_0": {"section_id": 5719, "quality": 1.0, "length": 4}, "so_36790872_36790985_1": {"section_id": 6968, "quality": 1.0, "length": 9}}, "n4659": {"so_36790872_36790933_0": {"section_id": 7435, "quality": 1.0, "length": 4}, "so_36790872_36790985_1": {"section_id": 8735, "quality": 0.8888888888888888, "length": 8}, "so_36790872_36790985_0": {"section_id": 8732, "quality": 0.5555555555555556, "length": 5}}}, "36791291": {"ParentId": "36790872", "CommentCount": "3", "Body": "<p>The data type of the pointer variable defines how many bytes to be incremented.</p>\n<p>for example:\n1) on incrementing a character pointer, pointer is increment by 1 Byte.\n2) Likewise, for a integer pointer, pointer is increment by 4 Bytes (for 32-bit system) and 8 Bytes (for 64-bit system)</p>\n", "OwnerUserId": "5773017", "PostTypeId": "2", "Id": "36791291", "Score": "0", "CreationDate": "2016-04-22T10:27:53.517", "LastActivityDate": "2016-04-22T10:27:53.517"}});