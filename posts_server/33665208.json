post_cb({"33667546": {"ParentId": "33665208", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>SFINAE simply doesn't apply to <em>exception-specification</em>s, whether or not <code>noexcept</code> is part of the function type.</p>\n<p>See the note in [temp.deduct]/7:</p>\n<blockquote>\n<p id=\"so_33665208_33667546_0\">The substitution occurs in all types and expressions that are used in\n  the function type and in template parameter declarations. The\n  expressions include not only constant expressions such as those that\n  appear in array bounds or as nontype template arguments but also\n  general expressions (i.e., non-constant expressions) inside sizeof,\n  decltype, and other contexts that allow non-constant expressions. The\n  substitution proceeds in lexical order and stops when a condition that\n  causes deduction to fail is encountered. [ <em>Note</em>: The equivalent\n  substitution in exception specifications is done only when the\n  <em>exception-specification</em> is instantiated, at which point a program is ill-formed if the substitution results in an invalid type or\n  expression. \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>P0012R1 <a href=\"https://github.com/cplusplus/draft/commit/6e75f2d588a4b1b0c220eb8eec4b9ad8cb6107f3\" rel=\"nofollow\">didn't change anything</a> in this respect.</p>\n<p>Piotr's answer covers the fix for your code.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-11-12T09:08:20.593", "Id": "33667546", "Score": "6", "CreationDate": "2015-11-12T08:53:28.033", "LastActivityDate": "2015-11-12T09:08:20.593"}, "33665208": {"CommentCount": "3", "AcceptedAnswerId": "33667546", "PostTypeId": "1", "LastEditorUserId": "1430927", "CreationDate": "2015-11-12T05:50:29.510", "LastActivityDate": "2015-11-12T09:20:24.263", "LastEditDate": "2015-11-12T06:24:01.510", "ViewCount": "463", "FavoriteCount": "2", "Title": "SFINAE and noexcept specifier", "Id": "33665208", "Score": "9", "Body": "<p>Does an expression in <code>noexcept</code> specifier's parentheses participate in SFINAE during overload resolution of function templates?</p>\n<p>I want to make an wrapper for aggregates and want the <code>std::is_constructible</code> predicate to work properly for it:</p>\n<pre><code>template&lt; typename type &gt;\nstruct embrace\n    : type\n{\n\n    template&lt; typename ...arguments &gt;\n    embrace(arguments &amp;&amp;... _arguments) noexcept(noexcept(type{std::forward&lt; arguments &gt;(_arguments)...}))\n        : type{std::forward&lt; arguments &gt;(_arguments)...} // braces \n    { ; }\n\n};\n\nint\nmain()\n{\n    struct S { int i; double j; }; // aggregate\n    using E = embrace&lt; S &gt;;\n    E b(1, 1.0); // \"parentheses\"-constructible =&gt; can be used as usual types\n    b.i = 1; b.j = 2.0; // accessible\n    static_assert(std::is_constructible&lt; E, int, double &gt;{});\n    static_assert(std::is_constructible&lt; E, struct B &gt;{}); // want hard error here\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>But my attempt to use <code>noexcept</code> operator inside <code>noexcept</code> specification to enable SFINAE is failed, and the templated constructor accepts everything passed to it. How can the constructor be restricted?</p>\n<p>It is not permitted by the Standard to specialize any predicates from <code>&lt;type_traits&gt;</code>. How to deal with c-tors that accepts variadic template parameter packs and SFINAE in general? Is there an impasse and inherent language flaw?</p>\n", "Tags": "<c++><c++11><constructor><c++14><sfinae>", "OwnerUserId": "1430927", "AnswerCount": "3"}, "33665845": {"ParentId": "33665208", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_33665208_33665845_0\">Does an expression in noexcept specifier's parentheses participate in\n  SFINAE during overload resolution of function templates?</p>\n</blockquote>\n<p>It doesn't participate in template deduction because the <code>noexcept</code> specifier is not part of a function's type.</p>\n<blockquote>\n<p id=\"so_33665208_33665845_1\">The noexcept-specification is not a part of the function type. (until\n  C++17)</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/noexcept_spec\" rel=\"nofollow noreferrer\">Source</a></p>\n<p>Therefore, when your template parameter <code>type</code> is deduced, <code>noexcept</code> is not part of the deduced type. Your compiler seems to return <code>true</code> for any type which is why you aren't able to detect whether it is <code>noexcept</code> or not; that is why everything is accepted.</p>\n<p>I ran into the same issue. You can check my question/answer here:</p>\n<p><a href=\"https://stackoverflow.com/questions/33589752/how-can-i-detect-whether-a-template-argument-is-a-noexcept-function/33590539#33590539\">How can I detect whether a template argument is a noexcept function?</a></p>\n<p>Basically, your only option is to wait for a C++17 compliant compiler.</p>\n", "OwnerUserId": "2296177", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:56.393", "Id": "33665845", "Score": "2", "CreationDate": "2015-11-12T06:56:01.753", "LastActivityDate": "2015-11-12T07:20:13.470"}, "bq_ids": {"n4140": {"so_33665208_33667546_0": {"section_id": 299, "quality": 0.8985507246376812, "length": 62}}, "n3337": {"so_33665208_33667546_0": {"section_id": 290, "quality": 0.7246376811594203, "length": 50}}, "n4659": {"so_33665208_33667546_0": {"section_id": 306, "quality": 0.8840579710144928, "length": 61}}}, "33666040": {"ParentId": "33665208", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_33665208_33666040_0\"><em>How can the constructor be restricted?</em></p>\n</blockquote>\n<pre><code>#include &lt;utility&gt;\n\ntemplate &lt;typename type&gt;\nstruct embrace : type\n{\n    template &lt;typename... arguments\n            , typename = decltype(type{std::declval&lt;arguments&gt;()...})&gt;\n    embrace(arguments&amp;&amp;... _arguments)\n        noexcept(noexcept(type{std::forward&lt;arguments&gt;(_arguments)...}))\n        : type{std::forward&lt;arguments&gt;(_arguments)...}\n    {\n    }\n};\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/dt30TcFZdDKrtLqU\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>(or shorter):</p>\n<pre><code>#include &lt;utility&gt;\n\ntemplate &lt;typename type&gt;\nstruct embrace : type\n{\n    template &lt;typename... arguments\n            , bool NoExcept = noexcept(type{std::declval&lt;arguments&gt;()...})&gt;\n    constexpr\n    embrace(arguments&amp;&amp;... _arguments)\n        noexcept(NoExcept)\n        : type{std::forward&lt;arguments&gt;(_arguments)...}\n    {\n    }\n};\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/s9HK3mkYjHf0vxqr\" rel=\"nofollow\"><strong>DEMO 2</strong></a></p>\n", "OwnerUserId": "3953764", "LastEditorUserId": "1430927", "LastEditDate": "2015-11-12T09:20:24.263", "Id": "33666040", "Score": "4", "CreationDate": "2015-11-12T07:12:16.487", "LastActivityDate": "2015-11-12T09:20:24.263"}});