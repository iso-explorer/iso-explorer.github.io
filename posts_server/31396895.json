post_cb({"bq_ids": {"n4140": {"so_31396895_31397049_0": {"length": 9, "quality": 1.0, "section_id": 5492}}, "n3337": {"so_31396895_31397049_0": {"length": 9, "quality": 1.0, "section_id": 5278}}, "n4659": {"so_31396895_31397049_0": {"length": 9, "quality": 1.0, "section_id": 6926}}}, "31396895": {"ViewCount": "70", "Body": "<p>I would like to use a <code>using</code> declaration to enable ADL on a specific function lookup so that I can use it in a constructor initialization list.</p>\n<p>Here is the code:</p>\n<pre><code>template&lt; typename T &gt;\nstruct RefWrapper\n{\n    RefWrapper(T&amp; t)\n    : w(t)\n    {}\n\n    T&amp; w;\n};\n\nstruct Val\n{\n    Val(RefWrapper&lt;Val&gt; rw)\n    {/*...*/}\n};\n\nnamespace X\n{\n    template&lt; typename T &gt;\n    RefWrapper&lt;T&gt; MakeWrap(T&amp; t)\n    { return RefWrapper&lt;T&gt;(t); }\n}\n\nnamespace Y\n{\n    using X::MakeWrap;  // god no !\n    struct C\n    {\n        //using X::MakeWrap;  // I want it here\n        //                     error: using-declaration for non-member at class scope\n\n        C(Val&amp; value) : member(MakeWrap(value))\n        {}\n\n        Val member;\n    };\n}\n</code></pre>\n<p>related:<br>\n<a href=\"https://stackoverflow.com/q/15276125/893406\">How narrow should a using declaration be?</a><br>\nIn this question's unique's answer, (4) is impossible, but it is the place I want !</br></br></p>\n", "AcceptedAnswerId": "31397049", "Title": "How to use `using space::function` in class declaration scope?", "CreationDate": "2015-07-14T02:59:32.673", "Id": "31396895", "CommentCount": "0", "LastEditDate": "2017-05-23T12:32:58.903", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-15T10:02:33.303", "Score": "1", "OwnerUserId": "893406", "Tags": "<c++><c++03><using-declaration>", "AnswerCount": "1"}, "31397049": {"Id": "31397049", "PostTypeId": "2", "Body": "<p>Unfortunately, you can't do that.</p>\n<p>N4527::7.3.3$3, The using declaration, [namespace.udecl]:</p>\n<blockquote>\n<p id=\"so_31396895_31397049_0\">In a using-declaration used as a member-declaration, the\n  nested-name-specifier shall name a base class of the class being\n  defined.</p>\n</blockquote>\n<p>Of course, you can explicitly appoint the nested-name-specifier like:</p>\n<pre><code>C(Val&amp; value) : member(X::MakeWrap(value))\n</code></pre>\n<p>Or as a workaround, you can use a local wrapper function, something like this:</p>\n<pre><code>struct C\n{\n    //using X::MakeWrap;  // I want it here\n    //                     error: using-declaration for non-member at class scope\n\n    C(Val&amp; value) : member(MakeWrap(value))\n    {}\n\n    Val member;\nprivate:\n    template&lt; typename T &gt;\n    T MakeWrap(T&amp; t) { return X::MakeWrap(t); }\n\n};\n</code></pre>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-07-15T09:56:59.583", "Score": "1", "CreationDate": "2015-07-14T03:20:39.500", "ParentId": "31396895", "CommentCount": "4", "OwnerUserId": "3309790", "LastEditDate": "2015-07-15T09:56:59.583"}});