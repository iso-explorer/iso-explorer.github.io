post_cb({"15234572": {"CommentCount": "5", "ViewCount": "444", "PostTypeId": "1", "LastEditorUserId": "845092", "CreationDate": "2013-03-05T21:34:20.840", "LastActivityDate": "2013-03-05T22:36:15.643", "Title": "inline functions accessing static?", "AcceptedAnswerId": "15234667", "LastEditDate": "2013-03-05T21:59:59.743", "Id": "15234572", "Score": "6", "Body": "<p><a href=\"http://rads.stackoverflow.com/amzn/click/0201309831\" rel=\"nofollow\">Section 16.4 of C++ FAQs (2nd Edition) (Paperback) by Marshall P. Cline, Greg Lomow</a> says that inline functions cannot access static data members safely because the function could be called before the static data member is initialized.</p>\n<p>I fail to see why this applies to inline functions and not just any functions in other translation units which call a static data member in another translation unit? I fail to see what part \"inline\" plays in this disaster?</p>\n", "Tags": "<c++><static><inline>", "OwnerUserId": "997112", "AnswerCount": "1"}, "15234667": {"ParentId": "15234572", "PostTypeId": "2", "CommentCount": "19", "Body": "<p><code>static</code> variables are fully initialized before any function <strong>in that same translation unit</strong> (cpp file more or less) is executed.  They are not guaranteed to be initialized before <code>main</code> is called if <code>main</code> is in a different translation unit.  <code>inline</code> functions are duplicated, where each translation unit has it's own copy.  That means that inline functions in different translation units than the <code>static</code> variable might attempt to read/write to that variable before it is properly initialized, resulting in undefined behavior.  (The rules are very complicated, but that's what I recall)</p>\n<blockquote>\n<p id=\"so_15234572_15234667_0\">\u00a7 3.6.2/4 It is implementation-defined whether the dynamic initialization of a non-local variable with static storage duration is done before the first statement of main. If the initialization is deferred to some point in time after the first statement of main, it shall occur before the first odr-use (3.2) of any function or variable defined in the same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p id=\"so_15234572_15234667_1\">\u00a7 3.2/3 An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<p>inline functions are not really any more dangerous than non-inline functions as far as I know.  Any function accessing a static in a different TU is risky, and since <code>inline</code> just happens to put functions in <em>every</em> TU, most of them aren't safe.  One workaround is to use the <a href=\"https://stackoverflow.com/questions/7325399/can-construct-on-first-use-idiom-fail-under-any-circumstances\">\"construct on first use idiom\"</a>.</p>\n<p>Implicit template specializations are complicated, but for completeness:</p>\n<blockquote>\n<p id=\"so_15234572_15234667_2\">\u00a7 14.7.1/3 [temp.inst] the initialization (and any associated side-effects) of a static data member does not occur unless the static data member is itself used in a way that requires the definition of the static data member to exist.</p>\n</blockquote>\n<p>So static members of template classes are always initialized before use.</p>\n<p>All of the above is subject to the  <a href=\"https://stackoverflow.com/questions/3035422/static-initialization-order-fiasco\">the static initialization order fiasco</a>), which the aformentioned \"construct on first use idom\" solves.</p>\n", "OwnerUserId": "845092", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:27:15.110", "Id": "15234667", "Score": "6", "CreationDate": "2013-03-05T21:39:46.277", "LastActivityDate": "2013-03-05T22:36:15.643"}, "bq_ids": {"n4140": {"so_15234572_15234667_2": {"section_id": 234, "quality": 0.9047619047619048, "length": 19}, "so_15234572_15234667_1": {"section_id": 5404, "quality": 0.875, "length": 7}, "so_15234572_15234667_0": {"section_id": 7153, "quality": 0.9444444444444444, "length": 34}}, "n3337": {"so_15234572_15234667_2": {"section_id": 227, "quality": 0.9047619047619048, "length": 19}, "so_15234572_15234667_1": {"section_id": 5199, "quality": 0.875, "length": 7}, "so_15234572_15234667_0": {"section_id": 6897, "quality": 0.9444444444444444, "length": 34}}, "n4659": {"so_15234572_15234667_2": {"section_id": 244, "quality": 0.8571428571428571, "length": 18}, "so_15234572_15234667_1": {"section_id": 6853, "quality": 0.875, "length": 7}, "so_15234572_15234667_0": {"section_id": 8657, "quality": 0.6388888888888888, "length": 23}}}});