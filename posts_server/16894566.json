post_cb({"bq_ids": {"n4140": {"so_16894566_16894703_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 6955}, "so_16894566_16894566_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 710}}, "n3337": {"so_16894566_16894703_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 6702}, "so_16894566_16894566_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 699}}, "n4659": {"so_16894566_16894703_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 8452}, "so_16894566_16894566_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 802}}}, "16894566": {"ViewCount": "500", "Body": "<p><strong>First part :</strong></p>\n<p><code>std::initializer_list</code> is a really helpful feature of C++11, so I wondered how it is implemented in the standard library. From what I read <a href=\"http://www.cplusplus.com/reference/initializer_list/initializer_list/\">here</a>, the compiler creates an array of type <code>T</code> and gives the pointer to the <code>initializer_list&lt;T&gt;</code>.</p>\n<p>It also states that copying an <code>initializer_list</code> will create a new object referencing the same data : why is it so ? I would have guessed that it either :</p>\n<ul>\n<li>copies the data for the new <code>initializer_list</code></li>\n<li>moves ownership of the data to the new <code>initializer_list</code></li>\n</ul>\n<p><strong>Second part :</strong></p>\n<p>From just one of many online references for the <code>std::vector</code> constructors:</p>\n<pre><code>vector (initializer_list&lt;value_type&gt; il,\n    const allocator_type&amp; alloc = allocator_type());\n</code></pre>\n<blockquote>\n<p id=\"so_16894566_16894566_0\"><strong>(6) initializer list constructor</strong></p>\n<p id=\"so_16894566_16894566_1\">Constructs a container with a copy of each of the elements in <em>il</em>, in the same order.</p>\n</blockquote>\n<p>I am not comfortable with move semantics yet, but couldn't the data of <code>il</code> be moved to the <code>vector</code> ? I am not aware of the deep implementation of <code>std::vector</code> but IIRC it uses plain-old arrays.</p>\n", "AcceptedAnswerId": "16894703", "Title": "What is the underlying structure of std::initializer_list?", "CreationDate": "2013-06-03T10:21:00.973", "Id": "16894566", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-06-03T10:47:09.020", "LastEditorUserId": "560648", "LastActivityDate": "2013-06-03T10:47:09.020", "Score": "6", "OwnerUserId": "1119972", "Tags": "<c++><c++11><stl><initializer-list>", "AnswerCount": "1"}, "16894703": {"Id": "16894703", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16894566_16894703_0\">What is the underlying structure of <code>std::initializer_list</code>?</p>\n</blockquote>\n<p>Most likely, just a pair of pointers, or a pointer and a size. Paragraph 18.9/2 of the C++11 Standard even mentions this in a (non-normative) note:</p>\n<blockquote>\n<p id=\"so_16894566_16894703_1\">An object of type <code>initializer_list&lt;E&gt;</code> provides access to an array of objects of type <code>const E</code>. [ Note:\n  <strong>A pair of pointers or a pointer plus a length would be obvious representations for <code>initializer_list</code></strong>.\n  <code>initializer_list</code> is used to implement initializer lists as specified in 8.5.4. Copying an <code>initializer list</code> does\n  not copy the underlying elements. \u2014end note ]</p>\n</blockquote>\n<p>Moreover:</p>\n<blockquote>\n<p id=\"so_16894566_16894703_2\">I am not comfortable with move semantics yet, but couldn't the data of <code>il</code> be moved to the vector?</p>\n</blockquote>\n<p><strong>No</strong>, you can't move from the elements of an <code>initializer_list</code>, since elements of an <code>initializer_list</code> are supposed to be immutable (see the first sentence of the paragraph quoted above). That's also the reason why only <code>const</code>-qualified member functions give you access to the elements.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-06-03T10:35:05.620", "Score": "12", "CreationDate": "2013-06-03T10:29:48.593", "ParentId": "16894566", "CommentCount": "5", "OwnerUserId": "1932150", "LastEditDate": "2013-06-03T10:35:05.620"}});