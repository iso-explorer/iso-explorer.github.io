post_cb({"bq_ids": {"n4140": {"so_42332147_42332886_1": {"length": 28, "quality": 0.8484848484848485, "section_id": 5905}, "so_42332147_42332651_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5905}, "so_42332147_42332886_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 7003}}, "n3337": {"so_42332147_42332886_1": {"length": 28, "quality": 0.8484848484848485, "section_id": 5677}, "so_42332147_42332651_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5677}, "so_42332147_42332886_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 6749}}, "n4659": {"so_42332147_42332886_1": {"length": 28, "quality": 0.8484848484848485, "section_id": 7387}, "so_42332147_42332651_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7387}, "so_42332147_42332886_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 8500}}}, "42332651": {"Id": "42332651", "PostTypeId": "2", "Body": "<p>It's definitely a MSVC bug. ISO C++ doesn't permit that.</p>\n<p><a href=\"http://www.eel.is/c++draft/class.mem#class.static.mfct-2\" rel=\"nofollow noreferrer\">class.static.mfct/2</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_42332147_42332651_0\"><em>[\u2009Note:</em> A static member function does not have a this pointer. \u2009<em>\u2014\u2009end note\u2009]</em> A static member function shall not be virtual. <strong>There\n  shall not be a static and a non-static member function with the same\n  name and the same parameter types ([over.load])</strong>...</p>\n</blockquote>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2017-02-19T21:13:19.887", "Score": "3", "CreationDate": "2017-02-19T20:44:05.580", "ParentId": "42332147", "CommentCount": "4", "OwnerUserId": "1621391", "LastEditDate": "2017-02-19T21:13:19.887"}, "42332886": {"Id": "42332886", "PostTypeId": "2", "Body": "<p><strong>10.3:2</strong> states that <code>D::Foo</code> must be virtual (even if not declared so).</p>\n<blockquote>\n<p id=\"so_42332147_42332886_0\">If a virtual member function vf is declared in a class Base and in a\n  class Derived, derived directly or indirectly from Base, a member\n  function vf with the same name, parameter-type-list (8.3.5),\n  cv-qualification, and ref-qualifier (or absence of same) as Base::vf\n  is declared, then Derived::vf is also virtual (whether or not it is so\n  declared) and it overrides 111 Base::vf...</p>\n</blockquote>\n<p>And <strong>9.4.1:2</strong> states that it can not be virtual</p>\n<blockquote>\n<p id=\"so_42332147_42332886_1\">[Note: A static member function does not have a this pointer (9.3.2).\n  \u2014end note ] A static member function shall not be virtual. There shall\n  not be a static and a non-static member function with the same name\n  and the same parameter types (13.1). A static member function shall\n  not be declared const, volatile, or const volatile.</p>\n</blockquote>\n", "LastActivityDate": "2017-02-19T21:07:40.803", "CommentCount": "0", "CreationDate": "2017-02-19T21:07:40.803", "ParentId": "42332147", "Score": "1", "OwnerUserId": "2645496"}, "42332147": {"ViewCount": "100", "Body": "<p>Most likely one does not want this sample to compile:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass C {\npublic:\n    virtual void Foo() {\n        std::cout &lt;&lt; \"From C\\n\";\n    }\n};\n\nclass D : public C {\npublic:\n    static void Foo() {\n        std::cout &lt;&lt; \"From D\\n\";\n    }\n};\n\nint main() {\n    D d;\n    d.Foo();\n    return 0;\n}\n</code></pre>\n<p>It does not compile indeed in gcc and clang (Error \"Static member function overrides a virtual function in a base class\"). It does, however, compile in Visual C++, uttering <strong>From D</strong> to console on run. Even with the latest VC++ RC 2017 compiler (v141) with options <em>ISO C++ Latest Draft Standard (/std:c++latest)</em> and <em>/permissive-</em> (<a href=\"https://blogs.msdn.microsoft.com/vcblog/2016/11/16/permissive-switch/\" rel=\"nofollow noreferrer\">link</a>) turned on.</p>\n<p>Which compiler is right? Is this error by the Standard? If so, does it mean that VC++ does not follow the Standard in this case?</p>\n", "Title": "\"Static member function overrides a virtual function in a base class\" caught by gcc and clang but not VC++", "CreationDate": "2017-02-19T19:57:57.280", "LastActivityDate": "2017-02-19T21:13:19.887", "CommentCount": "1", "PostTypeId": "1", "Id": "42332147", "Score": "2", "OwnerUserId": "4620900", "Tags": "<c++><gcc><visual-c++><clang><virtual-functions>", "AnswerCount": "2"}});