post_cb({"18638488": {"PostTypeId": "2", "Body": "<p>No, they are same things.</p>\n<p>Use return; when you want to exit function.</p>\n", "LastActivityDate": "2013-09-05T14:03:50.760", "Id": "18638488", "CommentCount": "0", "CreationDate": "2013-09-05T14:03:50.760", "ParentId": "18638286", "Score": "-1", "OwnerUserId": "2739730"}, "18638354": {"PostTypeId": "2", "Body": "<p>In this particular case, it serves absolutely no purpose - it also won't cause any problems (e.g. no extra code is generated assuming the compiler has at least some optimisation ablities). </p>\n<p>There is of course a purpose to putting a <code>return</code> in the middle of a void function, so that some later part of the function is not executed. </p>\n", "LastActivityDate": "2013-09-05T13:57:22.510", "Id": "18638354", "CommentCount": "0", "CreationDate": "2013-09-05T13:57:22.510", "ParentId": "18638286", "Score": "1", "OwnerUserId": "1919155"}, "18638562": {"PostTypeId": "2", "Body": "<p><code>return</code> in <code>void</code> functions has multiple roles:</p>\n<ol>\n<li><p>prematurely end function execution (e.g Algorithm finished, preconditions are not met)</p></li>\n<li><p>in certain cases you design the algorithm such that in 85% of the cases will end sooner. (thus executing faster) leaving the other 15% of the case go after that return (thus running slower for some rare race conditions.</p></li>\n<li><p>similar to a <code>goto end</code>.</p></li>\n</ol>\n", "LastActivityDate": "2013-09-05T14:07:17.737", "Id": "18638562", "CommentCount": "1", "CreationDate": "2013-09-05T14:07:17.737", "ParentId": "18638286", "Score": "1", "OwnerUserId": "2749648"}, "18638339": {"PostTypeId": "2", "Body": "<p>In your particular code, No. But usually if you want to have an early return from the function based on a condition then use <code>return</code>.</p>\n<pre><code>void InputClass::KeyDown(unsigned int input)\n{\n    // If a key is pressed then save that state in the key array\n    m_keys[input] = true;\n    if(someCondition) //early return\n       return;\n   //continue with the rest of function \n   //.....\n}\n</code></pre>\n", "LastActivityDate": "2013-09-05T13:56:40.963", "Id": "18638339", "CommentCount": "0", "CreationDate": "2013-09-05T13:56:40.963", "ParentId": "18638286", "Score": "1", "OwnerUserId": "961113"}, "18638377": {"PostTypeId": "2", "Body": "<p>No Difference, in your example,but if you want to an earlier return from the function in case,it is useful</p>\n", "LastActivityDate": "2013-09-05T13:58:34.100", "Id": "18638377", "CommentCount": "0", "CreationDate": "2013-09-05T13:58:34.100", "ParentId": "18638286", "Score": "1", "OwnerUserId": "1791142"}, "bq_ids": {"n4140": {"so_18638286_18638372_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 3913}}, "n3337": {"so_18638286_18638372_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 3773}}}, "18638286": {"ViewCount": "475", "Body": "<p>Is there has any different by putting or not putting return in the the last line of function? </p>\n<pre><code>void InputClass::KeyDown(unsigned int input)\n{\n    // If a key is pressed then save that state in the key array\n    m_keys[input] = true;\n    return;\n}\n</code></pre>\n", "AcceptedAnswerId": "18638344", "Title": "what is the purpose of return in the void function", "CreationDate": "2013-09-05T13:54:40.387", "Id": "18638286", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2013-09-05T18:55:45.607", "Score": "2", "OwnerUserId": "2565570", "Tags": "<c++>", "AnswerCount": "8"}, "18638335": {"PostTypeId": "2", "Body": "<p>In this case NOTHING. In other cases it might be because code is after the return statement and the author wanted to have it 'dead' for a little while. It should be deleted afterwards.</p>\n", "OwnerDisplayName": "user34537", "LastActivityDate": "2013-09-05T13:56:33.693", "Id": "18638335", "CommentCount": "0", "CreationDate": "2013-09-05T13:56:33.693", "ParentId": "18638286", "Score": "0"}, "18638344": {"PostTypeId": "2", "Body": "<p>No, there is no difference !</p>\n<p><em><strong>return</strong></em></p> in void functions is used to exit early on certain conditions.\n<p><em>Ex</em>:</p>\n<pre><code>void f(bool cond)\n{\n    // do stuff here\n    if(cond)\n        return;\n    // do other stuff\n}\n</code></pre>\n", "LastActivityDate": "2013-09-05T13:56:53.223", "Id": "18638344", "CommentCount": "0", "CreationDate": "2013-09-05T13:56:53.223", "ParentId": "18638286", "Score": "11", "OwnerUserId": "1233963"}, "18638372": {"PostTypeId": "2", "Body": "<p>There is functionally no difference in your example, if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> section <code>6.6.3</code> <em>The return statement paragraph 2</em> says:</p>\n<blockquote>\n<p id=\"so_18638286_18638372_0\">A <strong>return statement with neither an expression nor a braced-init-list can be used only in functions that do not return a value,</strong> that is, a function with the return type void, a constructor (12.1), or a destructor (12.4). [...] <strong>Flowing off the end of a function is equivalent to a return with no value;</strong> this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n", "LastActivityDate": "2013-09-05T18:55:45.607", "LastEditorUserId": "1708801", "Id": "18638372", "CommentCount": "0", "CreationDate": "2013-09-05T13:58:16.917", "ParentId": "18638286", "Score": "8", "OwnerUserId": "1708801", "LastEditDate": "2013-09-05T18:55:45.607"}});