post_cb({"5481658": {"CommentCount": "4", "CreationDate": "2011-03-30T03:51:03.693", "PostTypeId": "1", "AcceptedAnswerId": "5483008", "LastEditorUserId": "87234", "LastActivityDate": "2011-03-30T07:04:23.303", "LastEditDate": "2011-03-30T04:22:27.067", "ViewCount": "1752", "FavoriteCount": "0", "Title": "cannot create a unary tuple with an empty tuple in it (c++0x)", "Id": "5481658", "Score": "10", "Body": "<p>I was experimenting with tuples and encountered a problem with creating tuples.\nThe code example is as follows.</p>\n<pre><code>//a.cpp\n#include &lt;tuple&gt;\nusing namespace std;\n\nint main() {\n  auto te = make_tuple();    //this line is ok\n  auto tte = make_tuple(te); //this line gives an error.\n  return 0;\n}\n</code></pre>\n<p>I compiled it with both g++ 4.5 (g++ -std=c++0x a.cpp) and MS VC++2010.\nBoth compilers are giving me an error on the second line in main().</p>\n<p>My question is this:\nSince 'te' is a well-defined variable, why can't another tuple be created with te being the content. Is this semantic correct?</p>\n<p>I guess this is kind of a boundary case, but if the arithmetic is correct, zero should be allowed, IMHO.</p>\n<p>FYI, the error message from gcc is:</p>\n<pre><code>$ gcc -std=c++0x a.cpp\n\nIn file included from a.cpp:1:0:\nc:\\mingw\\bin\\../lib/gcc/mingw32/4.5.2/include/c++/tuple: In constructor\n  'std::tuple&lt;_Elements&gt;::tuple(std::tuple&lt;_UElements ...&gt;&amp;) [with _UElements = {},\n  _Elements = {std::tuple&lt;&gt;}]':\n\nc:\\mingw\\bin\\../lib/gcc/mingw32/4.5.2/include/c++/tuple:551:62:   instantiated from\n  'std::tuple&lt;typename std::__decay_and_strip&lt;_Elements&gt;::__type ...&gt; \n  std::make_tuple(_Elements&amp;&amp; ...) [with _Elements = {std::tuple&lt;&gt;&amp;}, typename\n  std::__decay_and_strip&lt;_Elements&gt;::__type = &lt;type error&gt;]'\na.cpp:6:27:   instantiated from here\n\nc:\\mingw\\bin\\../lib/gcc/mingw32/4.5.2/include/c++/tuple:259:70: error: invalid\n  static_cast from type 'std::tuple&lt;&gt;' to type 'const std::_Tuple_impl&lt;0u&gt;&amp;'\n</code></pre>\n", "Tags": "<c++><c++11><tuples>", "OwnerUserId": "683218", "AnswerCount": "1"}, "5483008": {"ParentId": "5481658", "CommentCount": "2", "Body": "<p>This looks like the compiler has matched your <code>std::tuple&lt;&gt;</code> against the following constructor of <code>std::tuple&lt;std::tuple&lt;&gt;&gt;</code> (See 20.4.2p15-17 in N3242):</p>\n<blockquote>\n<p id=\"so_5481658_5483008_0\"><code>template &lt;class... UTypes&gt; tuple(const tuple&lt;UTypes...&gt;&amp; u);</code></p>\n<p id=\"so_5481658_5483008_1\">Requires:\n  <code>sizeof...(Types) == sizeof...(UTypes)</code>.\n  <code>is_constructible&lt;Ti , const Ui &amp;&gt;::value</code> is true for all <code>i</code>.</p>\n<p id=\"so_5481658_5483008_2\">Effects:\n  Constructs each element of <code>*this</code> with\n  the corresponding element of u.</p>\n<p id=\"so_5481658_5483008_3\">Remark: This constructor shall not\n  participate in overload resolution\n  unless <code>const Ui &amp;</code> is implicitly\n  convertible to <code>Ti</code> for all <code>i</code>.</p>\n</blockquote>\n<p>I think this is a bug in the implementation of <code>std::tuple</code> from your compiler; the \"remark\" implies that this constructor should not be considered, since it won't compile.</p>\n", "OwnerUserId": "5597", "PostTypeId": "2", "Id": "5483008", "Score": "5", "CreationDate": "2011-03-30T07:04:23.303", "LastActivityDate": "2011-03-30T07:04:23.303"}, "bq_ids": {"n4140": {"so_5481658_5483008_3": {"section_id": 4029, "quality": 0.8, "length": 8}, "so_5481658_5483008_0": {"section_id": 4026, "quality": 1.0, "length": 5}, "so_5481658_5483008_1": {"section_id": 4027, "quality": 0.625, "length": 5}, "so_5481658_5483008_2": {"section_id": 4028, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_5481658_5483008_3": {"section_id": 3879, "quality": 0.8, "length": 8}, "so_5481658_5483008_0": {"section_id": 3876, "quality": 1.0, "length": 5}, "so_5481658_5483008_1": {"section_id": 3877, "quality": 0.625, "length": 5}, "so_5481658_5483008_2": {"section_id": 3878, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_5481658_5483008_3": {"section_id": 4289, "quality": 0.6, "length": 6}, "so_5481658_5483008_1": {"section_id": 4934, "quality": 0.625, "length": 5}, "so_5481658_5483008_0": {"section_id": 4932, "quality": 1.0, "length": 5}, "so_5481658_5483008_2": {"section_id": 128, "quality": 0.6666666666666666, "length": 4}}}});