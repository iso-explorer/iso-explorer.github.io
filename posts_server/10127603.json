post_cb({"bq_ids": {"n4140": {"so_10127603_10128180_0": {"length": 10, "quality": 1.0, "section_id": 969}}, "n3337": {"so_10127603_10128180_0": {"length": 10, "quality": 1.0, "section_id": 958}}, "n4659": {"so_10127603_10128180_0": {"length": 10, "quality": 1.0, "section_id": 1031}}}, "10128180": {"Id": "10128180", "PostTypeId": "2", "Body": "<p>The short answer is that I think @BenVoigt is basically correct.</p>\n<p>In the description of <code>reserve</code> (\u00a723.3.6.3/2), it says:</p>\n<blockquote>\n<p id=\"so_10127603_10128180_0\">If an exception is thrown other than by the move constructor of a non-CopyInsertable type, there are no effects.</p>\n</blockquote>\n<p>[And the description of <code>resize</code> in \u00a723.3.6.3/12 requires the same.]</p>\n<p>This means that if T is CopyInsertable, you get strong exception safety. To assure that, it can <em>only</em> use move construction if <em>it</em> deduces (by unspecified means) that move construction will never throw. There's no guarantee that either <code>throw()</code> or <code>noexcept</code> will be necessary or sufficient for that though. If T is CopyInsertable, it <em>can</em> simply choose to always use copy construction. Basically, what's happening is that the standard requires copy construction-like semantics; the compiler can only use move construction under the as-if rule, and it's free to define when or if it'll exercise that option.</p>\n<p>If T is not CopyInsertable, reallocation <em>will</em> use move construction, but exception safety depends on whether T's move constructor can throw. If it doesn't throw, you get strong exception safety, but if it throws, you don't (I think you <em>probably</em> get the basic guarantee, but maybe not even that and definitely no more).</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2012-04-12T17:01:33.717", "Score": "12", "CreationDate": "2012-04-12T16:55:36.230", "ParentId": "10127603", "CommentCount": "1", "OwnerUserId": "179910", "LastEditDate": "2012-04-12T17:01:33.717"}, "10127721": {"Id": "10127721", "PostTypeId": "2", "Body": "<p>It's not a regression, it's a bug fix. The standard specifies that std::vector will only prefer an element move constructor which is non-throwing.</p>\n<p>See also <a href=\"https://stackoverflow.com/a/8864895/103167\">this explanation</a> and <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52745\" rel=\"nofollow noreferrer\">this bug report</a>.</p>\n<p><a href=\"https://stackoverflow.com/questions/6011428/move-constructors-and-the-strong-exception-guarantee\">This question</a> is also relevant.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-12T16:43:03.950", "Score": "7", "CreationDate": "2012-04-12T16:27:39.110", "ParentId": "10127603", "CommentCount": "5", "OwnerUserId": "103167", "LastEditDate": "2017-05-23T12:25:58.803"}, "10127603": {"ViewCount": "5421", "Body": "<blockquote>\n<p id=\"so_10127603_10127603_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/8001823/how-to-enforce-move-semantics-when-a-vector-grows\">How to enforce move semantics when a vector grows?</a> </br></p>\n</blockquote>\n<p><code>insert</code>, <code>push_back</code> and <code>emplace</code>(<code>_back</code>) can cause a reallocation of a <code>std::vector</code>. I was baffled to see that the following code <em>copies</em> the elements instead of <em>moving</em> them while reallocating the container.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstruct foo {\n    int value;\n\n    explicit foo(int value) : value(value) {\n        std::cout &lt;&lt; \"foo(\" &lt;&lt; value &lt;&lt; \")\\n\";\n    }\n\n    foo(foo const&amp; other) noexcept : value(other.value) {\n        std::cout &lt;&lt; \"foo(foo(\" &lt;&lt; value &lt;&lt; \"))\\n\";\n    }\n\n    foo(foo&amp;&amp; other) noexcept : value(std::move(other.value)) {\n        other.value = -1;\n        std::cout &lt;&lt; \"foo(move(foo(\" &lt;&lt; value &lt;&lt; \"))\\n\";\n    }\n\n    ~foo() {\n        if (value != -1)\n            std::cout &lt;&lt; \"~foo(\" &lt;&lt; value &lt;&lt; \")\\n\";\n    }\n};\n\nint main() {\n    std::vector&lt;foo&gt; foos;\n    foos.emplace_back(1);\n    foos.emplace_back(2);\n}\n</code></pre>\n<p>On my specific machine using my specific compiler (GCC 4.7) this prints the following:</p>\n<pre><code>foo(1)\nfoo(2)\nfoo(foo(1))\n~foo(1)\n~foo(1)\n~foo(2)\n</code></pre>\n<p>However, when deleting the copy constructor (<code>foo(foo const&amp;) = delete;</code>), the following (expected) output is generated:</p>\n<pre><code>foo(1)\nfoo(2)\nfoo(move(foo(1))\n~foo(1)\n~foo(2)\n</code></pre>\n<p>Why is that? Would\u2019t moving generally be more efficient, or at least not much less efficient, than copying?</p>\n<p>It bears noting that <a href=\"http://ideone.com/2EPxu\" rel=\"nofollow noreferrer\">GCC 4.5.1 does the expected thing</a> \u2013\u00a0is this a regression in GCC 4.7 or is it some deviously clever optimisation because the compiler sees that my object is cheap to copy (but how?!)?</p>\n<p>Also note that I made sure that this <em>is</em> caused by reallocation, by experimentally putting a <code>foos.reserve(2);</code> in front of the insertions; this causes neither copy nor move to be executed.</p>\n", "AcceptedAnswerId": "10128180", "Title": "Why does reallocating a vector copy instead of moving the elements?", "CreationDate": "2012-04-12T16:18:41.100", "Id": "10127603", "CommentCount": "14", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:34:14.860", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-15T13:28:24.520", "ClosedDate": "2012-04-13T00:33:36.450", "Score": "25", "OwnerUserId": "1968", "Tags": "<c++><c++11><stdvector><move-semantics>", "AnswerCount": "3"}, "10128259": {"Id": "10128259", "PostTypeId": "2", "Body": "<p>Tip-of-trunk clang + libc++ gets:</p>\n<pre><code>foo(1)\nfoo(2)\nfoo(move(foo(1))\n~foo(2)\n~foo(1)\n</code></pre>\n<p>If you remove the <code>noexcept</code> from the move constructor, then you get the copy solution:</p>\n<pre><code>foo(1)\nfoo(2)\nfoo(foo(1))\n~foo(1)\n~foo(2)\n~foo(1)\n</code></pre>\n", "LastActivityDate": "2012-04-12T16:59:33.173", "CommentCount": "0", "CreationDate": "2012-04-12T16:59:33.173", "ParentId": "10127603", "Score": "7", "OwnerUserId": "576911"}});