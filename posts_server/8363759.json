post_cb({"8364018": {"LastActivityDate": "2011-12-02T23:32:38.733", "ParentId": "8363759", "Id": "8364018", "Score": "0", "Body": "<p>For instance</p>\n<pre><code>int f(int x) { return 0; }\nint f(long x) { return 1; }\n</code></pre>\n<p>functions are not template functions (i.e. they don't have a <code>template &lt;class T&gt;</code> before them.  T is a template parameter.)\nTherefore they can be compiled on the fly when the templated code is reached.</p>\n", "CommentCount": "3", "PostTypeId": "2", "OwnerUserId": "1078313", "CreationDate": "2011-12-02T23:32:38.733"}, "8363759": {"AcceptedAnswerId": "8516676", "Tags": "<c++><templates><namespaces><overloading>", "AnswerCount": "2", "OwnerUserId": "16480", "Body": "<p>Here is some C++ code:</p>\n<pre><code>namespace A {\n\nint f(int x) { return 0; }\nint f(long x) { return 1; }\n\ntemplate&lt;class T&gt; int g(T x) {\n  return f(x);\n}\n\n}\n\nnamespace B {\nstruct C {};\n}\n\nnamespace A {\nint f(B::C x) { return 2; }\n}\n\nvoid h() {\n  A::g(B::C());\n}\n</code></pre>\n<p>In namespace A, the code declares a few overloads of a function f, and a templated function g which calls f.  Then we declare a new type in namespace B and overload f for the new type <em>in namespace A</em>.  Compiling with g++ 4.2 gives</p>\n<pre><code>order.cpp: In function \u2018int A::g(T) [with T = B::C]\u2019:\norder.cpp:21:   instantiated from here\norder.cpp:7: error: no matching function for call to \u2018f(B::C&amp;)\u2019\norder.cpp:3: note: candidates are: int A::f(int)\norder.cpp:4: note:                 int A::f(long int)\n</code></pre>\n<p>The code works if I do any of the following:</p>\n<ol>\n<li>Remove the namespaces.</li>\n<li>Move the overload of f for B::C into namespace B (thanks to Koenig lookup).</li>\n<li>Move the declaration of B::C and its f overload above the definition of g().</li>\n</ol>\n<p>I'm particularly puzzled by (3), since I was under the impression that overload resolution should be independent of the order of declarations.  Is this expected C++ behavior?</p>\n", "CommentCount": "3", "CreationDate": "2011-12-02T22:59:57.873", "PostTypeId": "1", "FavoriteCount": "3", "LastActivityDate": "2011-12-15T07:44:21.617", "Id": "8363759", "Title": "Why doesn't this overloading/namespace/template-related C++ code compile?", "Score": "12", "ViewCount": "1907"}, "8516676": {"LastActivityDate": "2011-12-15T07:44:21.617", "ParentId": "8363759", "Id": "8516676", "Score": "6", "Body": "<p>Clang gives the following error message, which gives some clues to the problem:</p>\n<pre><code>$ clang -fsyntax-only test.cc -Wall\ntest.cc:7:10: error: call to function 'f' that is neither visible in the\n      template definition nor found by argument-dependent lookup\n  return f(x);\n         ^\ntest.cc:21:3: note: in instantiation of function template specialization\n      'A::g&lt;B::C&gt;' requested here\n  A::g(B::C());\n  ^\ntest.cc:17:5: note: 'f' should be declared prior to the call site or in\n      namespace 'B'\nint f(B::C x) { return 2; }\n    ^\n1 error generated.\n</code></pre>\n<p>Specifically, you've run into a detail of two-phase lookup of dependent names in template definitions. In C++98, [temp.dep.candidate] says:</p>\n<blockquote>\n<p id=\"so_8363759_8516676_0\">For a function call that depends on a template parameter, if the function name is an unqualified-id but not a template-id, the candidate functions are found using the usual lookup rules (3.4.1, 3.4.2) except that:</p>\n<ul>\n<li>For the part of the lookup using unqualified name lookup (3.4.1), only function declarations with external linkage from the template definition context are found.</li>\n<li>For the part of the lookup using associated namespaces (3.4.2), only function declarations with external linkage found in either the template definition context or the template instantiation context are found.</li>\n</ul>\n</blockquote>\n<p>Since <code>A::f(B::C x)</code> isn't found using associated namespaces (i.e. argument-dependent lookup), it has to be visible at the template definition site, not just at the point of instantiation.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "943619", "CreationDate": "2011-12-15T07:44:21.617"}, "bq_ids": {"n3337": {"so_8363759_8516676_0": {"section_id": 217, "quality": 0.6190476190476191, "length": 13}}}});