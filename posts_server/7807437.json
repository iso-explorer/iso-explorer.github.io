post_cb({"bq_ids": {"n4140": {"so_7807437_7807667_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 7234}, "so_7807437_7807490_2": {"length": 25, "quality": 0.9615384615384616, "section_id": 7234}, "so_7807437_7807490_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 7234}}, "n3337": {"so_7807437_7807667_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 6978}, "so_7807437_7807490_2": {"length": 25, "quality": 0.9615384615384616, "section_id": 6978}, "so_7807437_7807490_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 6978}}}, "7807490": {"LastActivityDate": "2011-11-02T09:27:55.513", "CommentCount": "16", "Body": "<p><strong>Wrong answer:</strong></p>\n<p><del>Because <code>value++</code> is a temporary variable that holds the old value of <code>value</code>. You can't <code>++</code> it.</del></p>\n<p><del>You also can't write <code>15++</code>! It's similar. The former is a temporary variable, the later is a constant, none of which you can increment.</del></p>\n<p><strong>Correction:</strong> Since this answer got accepted, I am not going to change the original post, but since people will read it, I will post the correction here.</p>\n<p>First off, I am not saying constants and temporary objects are the same concept. I was just trying to say temporary objects are not l-values, like constants are not, without actually using the word l-value.</p>\n<p>About <code>value++++</code>, it is not an error. I just tested it with my g++ 4.5 and it works fine. In other answers you can read:</p>\n<blockquote>\n<p id=\"so_7807437_7807490_0\">From section 3.10.10 of the 2003 standard:</p>\n<blockquote>\n<p id=\"so_7807437_7807490_2\">An lvalue for an object is necessary in order to modify the object except that an rvalue of class type can also be used to modify its referent under certain circumstances. [Example: a member function called for an object (9.3) can modify the object. ]</p>\n</blockquote>\n</blockquote>\n<p>What is inherently wrong about what you are doing is this:</p>\n<p>Let's say <code>value</code> holds <code>10</code>. The first <code>value++</code> changes <code>value</code> to <code>11</code> but returns a temporary object containing <code>10</code>. Then you <code>++</code> it which changes the temporary value (that you never access) to <code>11</code>, but again returns a temporary object that contains <code>10</code>. So <code>value++++</code> behaves exactly like <code>value++</code> except it does some unnecessary work.</p>\n", "CreationDate": "2011-10-18T12:52:02.277", "LastEditDate": "2011-11-02T09:27:55.513", "ParentId": "7807437", "Id": "7807490", "LastEditorUserId": "912144", "PostTypeId": "2", "Score": "5", "OwnerUserId": "912144"}, "7807667": {"CommentCount": "2", "Body": "<p>Actually, this <a href=\"http://ideone.com/4cdE8\" rel=\"nofollow\">should work</a>. This operator is basically just a normal member-function with fancy syntax, and as such you can invoke it on an rvalue.</p>\n<p>From section 3.10.10 of the 2003 standard:</p>\n<blockquote>\n<p id=\"so_7807437_7807667_0\">An lvalue for an object is necessary in order to modify the object\n  <strong>except that an rvalue of class type can also be used to modify its\n  referent under certain circumstances. [Example: a member function\n  called for an object (9.3) can modify the object. ]</strong></p>\n</blockquote>\n", "CreationDate": "2011-10-18T13:06:42.157", "ParentId": "7807437", "Id": "7807667", "LastActivityDate": "2011-10-18T13:06:42.157", "PostTypeId": "2", "Score": "4", "OwnerUserId": "160206"}, "7807437": {"CreationDate": "2011-10-18T12:48:00.547", "ViewCount": "312", "FavoriteCount": "1", "Id": "7807437", "AcceptedAnswerId": "7807490", "Score": "1", "Title": "Postfix increment operator", "CommentCount": "8", "Body": "<p>I have a custom class MyInt, encapsulating a <strong>int m_nValue</strong> data. The postfix operator  </p>\n<pre><code>MyInt operator++(int)  \n{\n  MyInt temp(*this);  \n  ++(*this);  \n  return temp; \n}\n</code></pre>\n<p>if the operator returns an object, then why i am not able to call postfix++ operator more than once like:</p>\n<pre><code>MyInt value(10);\nvalue++;    // valid\nvalue++++;  // Why is this invalid?? Cant it be interpreted as (value++)++\n</code></pre>\n<p>Why does value++++ gives an error <em>lvalue required</em>\nif i can call value.print() method defined in MyInt Class, then i should also be able to do value++++?</p>\n", "Tags": "<c++><visual-c++>", "LastActivityDate": "2011-11-02T09:27:55.513", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "190041"}});