post_cb({"bq_ids": {"n4140": {"so_10792757_10792766_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}, "so_10792757_10792766_1": {"length": 26, "quality": 1.0, "section_id": 5768}}, "n3337": {"so_10792757_10792766_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}, "so_10792757_10792766_1": {"length": 26, "quality": 1.0, "section_id": 5541}}, "n4659": {"so_10792757_10792766_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}, "so_10792757_10792766_1": {"length": 26, "quality": 1.0, "section_id": 7225}}}, "10792757": {"ViewCount": "225", "Body": "<blockquote>\n<p id=\"so_10792757_10792757_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2508605/modifying-a-const-through-a-non-const-pointer\">Modifying a const through a non-const pointer</a> </br></p>\n</blockquote>\n<p>I have the following code:</p>\n<pre><code>const int x = 5;\nint *p = (int*)&amp;x;\n\n*p = 2; // Line 1\n\ncout &lt;&lt; x &lt;&lt; \" - \" &lt;&lt; *p &lt;&lt; endl;\ncout &lt;&lt; &amp;x &lt;&lt; \" - \" &lt;&lt; p &lt;&lt; endl;\n</code></pre>\n<p>And got the results:</p>\n<pre><code>5 - 2\n0012FF28 - 0012FF28\n</code></pre>\n<p>I know the code is weird and should never do it. But I wondered why the same address but got different result? And where the <code>Line 1</code> store the number 2?</p>\n", "AcceptedAnswerId": "10792766", "Title": "Casting a const int to a pointer?", "CreationDate": "2012-05-29T03:32:14.003", "LastActivityDate": "2012-05-29T04:28:28.660", "CommentCount": "1", "LastEditDate": "2017-05-23T12:11:29.080", "PostTypeId": "1", "Tags": "<c++><pointers><casting>", "Id": "10792757", "AnswerCount": "3", "Score": "0", "OwnerUserId": "253656", "ClosedDate": "2012-05-29T21:22:00.950", "LastEditorUserId": "-1"}, "10792807": {"Id": "10792807", "PostTypeId": "2", "Body": "<p>while some compilers do allocate an address for const values, it is a big no-no to access it. the reason you get 5-2 is because the compiler is replacing x directly with 5, even though you modified the address where x would have been given an address if it were not const and unless you access x's value through p* you are going to get 5 every time no matter what you do - also, p* may yield an undefined value since the getting the address of a const may actually fail with some compilers (and i think it should with all of them, personally)</p>\n", "LastActivityDate": "2012-05-29T03:41:35.587", "CommentCount": "0", "CreationDate": "2012-05-29T03:41:35.587", "ParentId": "10792757", "Score": "1", "OwnerUserId": "549506"}, "10792766": {"Id": "10792766", "PostTypeId": "2", "Body": "<p>Because changing the value of an inherently <code>const</code> variable in anyway is <strong>Undefined Behavior</strong><sup>[Ref #1]</sup>.    </p>\n<p>Once you did:    </p>\n<pre><code>*p = 2; // Line 1\n</code></pre>\n<p>All bets are off, and your code is no longer a valid C++ code, You cannot expect any particular behavior once that line was written. To speculate why an Undefined Behavior gives any particular behavior is pointless because it is allowed to show <em>any</em> behavior<sup>[Ref #2]</sup> that is the meaning of <em>Undefined Behavior</em>.</p>\n<hr>\n<p><sup>[Ref #1]</sup><br>\n<strong>C++03 Standard 7.1.5.1 The cv-qualifiers:</strong><br>\n<strong>Para 4:</strong> </br></br></p>\n<blockquote>\n<p id=\"so_10792757_10792766_0\">Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote>\n<p><sup>[Ref #2]</sup><br>\n<strong>C++03 Standard 1.3.24:</strong> </br></p>\n<blockquote>\n<p id=\"so_10792757_10792766_1\">Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n</hr>", "LastEditorUserId": "452307", "LastActivityDate": "2012-05-29T04:28:28.660", "Score": "10", "CreationDate": "2012-05-29T03:34:06.673", "ParentId": "10792757", "CommentCount": "2", "OwnerUserId": "452307", "LastEditDate": "2012-05-29T04:28:28.660"}, "10792792": {"Id": "10792792", "PostTypeId": "2", "Body": "<p>Declaring something <code>const</code> gives the compiler permission to assume that that value will not change.  This means that they can use an \"immediate\" instruction to load the value <code>5</code>, rather than referencing the location (if any) assigned to <code>x</code>.</p>\n<p>Further, modifying a <code>const</code> violates the assurance you gave the compiler that that \"variable\" would not be modified, and could produce a variety of unanticipated behaviors.</p>\n", "LastActivityDate": "2012-05-29T03:38:43.560", "CommentCount": "0", "CreationDate": "2012-05-29T03:38:43.560", "ParentId": "10792757", "Score": "1", "OwnerUserId": "581994"}});