post_cb({"bq_ids": {"n4140": {"so_47863791_47863929_1": {"length": 13, "quality": 0.5909090909090909, "section_id": 5451}}, "n4659": {"so_47863791_47863929_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 89}}}, "47863791": {"ViewCount": "211", "LastEditDate": "2017-12-18T07:31:02.270", "AcceptedAnswerId": "47863929", "Title": "Why can't the compiler deduce auto template parameter unless I add const?", "CreationDate": "2017-12-18T07:25:35.160", "LastActivityDate": "2017-12-18T07:39:57.033", "CommentCount": "0", "Body": "<p>I recently had problem with code like this:</p>\n<pre><code>constexpr auto lambda = []{};\n\ntemplate&lt;auto&amp; l&gt;\nstruct Lambda {};\n\ntemplate&lt;auto&amp; l&gt;\nvoid test(Lambda&lt;l&gt;) {}\n\nint main() {\n    test(Lambda&lt;lambda&gt;{});\n}\n</code></pre>\n<p>Both clang and GCC tells that it can't deduce <code>l</code>.</p>\n<p>However, if I add const there:</p>\n<pre><code>//   ----v\ntemplate&lt;const auto&amp; l&gt;\nvoid test(Lambda&lt;l&gt;) {}\n</code></pre>\n<p>Then everything works with clang. GCC still fails. What's happening here? Can it not deduce the <code>const</code> itself? Is this a GCC bug for it to not deducing <code>l</code> in both cases?</p>\n", "PostTypeId": "1", "LastEditorUserId": "2104697", "Id": "47863791", "Score": "9", "OwnerUserId": "2104697", "Tags": "<c++><templates><language-lawyer><c++17><argument-deduction>", "AnswerCount": "1"}, "47863929": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47863791_47863929_0\">Is this a GCC bug for it to not deducing l in both cases?</p>\n</blockquote>\n<p>It is a bug, and for Clang too. For a placeholder type non-type argument, <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.arg.nontype#1\" rel=\"noreferrer\">[temp.arg.nontype]/1</a> says:</p>\n<blockquote>\n<p id=\"so_47863791_47863929_1\">If the type of a template-parameter contains a placeholder type, <strong>the\n  deduced parameter type is determined from the type of the\n  template-argument by placeholder type deduction</strong>. If a deduced\n  parameter type is not permitted for a template-parameter declaration\n  ([temp.param]), the program is ill-formed.</p>\n</blockquote>\n<p>The very same process by which it would deduce here</p>\n<pre><code>int main() {\n   auto&amp; l = lambda;\n}\n</code></pre>\n<p>That <code>l</code> is const reference.</p>\n", "LastActivityDate": "2017-12-18T07:39:57.033", "LastEditorUserId": "817643", "Score": "8", "Id": "47863929", "CreationDate": "2017-12-18T07:37:48.983", "ParentId": "47863791", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-12-18T07:39:57.033"}});