post_cb({"bq_ids": {"n4140": {"so_48223804_48229631_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5005}}, "n3337": {"so_48223804_48229631_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 4806}}}, "48223804": {"ViewCount": "44", "Body": "<p>To prevent scope creep (on a <a href=\"https://stackoverflow.com/questions/48167985/nested-qvector-pointer-memory-handling\">previous Q</a>), I've isolated the above error.</p>\n<p>My Voxel class definition:</p>\n<pre><code>#ifndef VOXEL_H\n#define VOXEL_H\n\n#include &lt;QObject&gt;\n#include &lt;QVector&gt;\n#include &lt;iostream&gt;\ninclude &lt;memory&gt;\n\nclass Voxel : public QObject\n{\n    Q_OBJECT\npublic:\n    Voxel();\n    ~Voxel();\n};\n\n#endif // VOXEL_H\n</code></pre>\n<p>The main file which triggers the error:</p>\n<pre><code>#include &lt;voxel.h&gt;\n\nint main(int argc, char *argv[])\n{\n    QVector &lt; QVector &lt;std::unique_ptr &lt;Voxel&gt; &gt; &gt; cVoxel;\n\n    cVoxel.resize(0);\n\n    int rows = 80, cols = 80;\n\n    for (int i = 0; i &lt; rows; i++)\n    {\n       cVoxel[i].resize(cols);\n       for (int j = 0; j &lt; cols; j++)\n       {\n          cVoxel[i][j].reset(new Voxel);\n       }\n    }\n}\n</code></pre>\n<p>The line ultimately throwing the error is: </p>\n<pre><code>cVoxel[i].resize(cols);\n</code></pre>\n<p>The full error trace: (which doesn't say that the error ultimately comes main)</p>\n<p><a href=\"https://i.stack.imgur.com/89Uiz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/89Uiz.png\"/></a></p>\n<p>There are other Questions (<a href=\"https://stackoverflow.com/search?q=attempting%20to%20reference%20a%20deleted%20function\">that are helpful</a>) about this error but I can't fully understand how to resolve it. It would seem that <code>qvector.resize()</code> is attempting to reallocate and likely using a copy constructor which is then throwing this error? I could manually free the memory instead of using the above function, but the whole ideal of using smart pointers is to avoid memory leaks... I started using unique_ptr to address substantial leaking.</p>\n<hr>\n<p>I'm using QtCreator 4.4.0 and Qt 5.6.2, 64-bits.</p>\n<p><strong>--- EDIT ---</strong></p>\n<p>If I replace <code>QVector</code> with <code>std::vector</code>, ie cVoxel is created as:</p>\n<pre><code>std::vector &lt; std::vector &lt;std::unique_ptr &lt;Voxel&gt; &gt; &gt; cVoxel;\n</code></pre>\n<p>Then the program crashes in the outer for loop, at:</p>\n<pre><code>cVoxel[i].resize(cols);\n</code></pre>\n<p>Debugging reveals that:</p>\n<blockquote>\n<p id=\"so_48223804_48223804_0\">Debug Assertion Failed!</p>\n<p id=\"so_48223804_48223804_1\">Program: C:\\windows\\system32\\MSVCP140D.dll\n  File: C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\INCLUDE\\vector\n  Line: 1234</p>\n<p id=\"so_48223804_48223804_2\">Expression: vector subscript out of range</p>\n<p id=\"so_48223804_48223804_3\">For information on how your program can cause an assertion\n  failure, see the Visual C++ documentation on asserts.</p>\n</blockquote>\n<p>I can get the code to work by resizing cVoxel to 80 rather than 0. But it appears there's a subtle difference between how <a href=\"https://doc.qt.io/qt-5/qvector.html#resize\" rel=\"nofollow noreferrer\"><code>QVector.resize()</code></a> and <a href=\"http://www.cplusplus.com/reference/vector/vector/resize/\" rel=\"nofollow noreferrer\"><code>std::vector.resize()</code></a> operate. Reading the docs for each, they seemed identical.</p>\n</hr>", "AcceptedAnswerId": "48229631", "Title": "unique_ptr, qvector.resize() throws error 2280 attempting to reference a deleted function", "CreationDate": "2018-01-12T10:03:19.643", "Id": "48223804", "CommentCount": "2", "LastEditDate": "2018-01-12T15:31:02.073", "PostTypeId": "1", "LastEditorUserId": "2903608", "LastActivityDate": "2018-01-12T15:56:12.767", "Score": "1", "OwnerUserId": "2903608", "Tags": "<c++><windows-7><qt5><smart-pointers><qvector>", "AnswerCount": "1"}, "48229631": {"Id": "48229631", "PostTypeId": "2", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr\" rel=\"nofollow noreferrer\"><code>unique_ptr</code></a> cannot be copied (only moved or move-assigned):</p>\n<blockquote>\n<p id=\"so_48223804_48229631_0\">The class (<code>unique_ptr</code>) satisfies the requirements of MoveConstructible and\n  MoveAssignable, but not the requirements of either CopyConstructible\n  or CopyAssignable.</p>\n</blockquote>\n<p>The copy-constructor and copy-assignment are deleted in <code>unique_ptr</code> hence the error. Copying is implicitly required by <code>cVoxel[i].resize(cols)</code>.\nYou could use <code>QVector&lt;QVector&lt;Voxel&gt;&gt;</code> as an alternative.</p>\n<p>Another thing: calling <code>cVoxel[i].resize(cols)</code> after <code>cVoxel.resize(0)</code> is out-of-bounds. You probably need <code>cVoxel.resize(rows)</code>.</p>\n", "LastEditorUserId": "1597714", "LastActivityDate": "2018-01-12T15:56:12.767", "Score": "1", "CreationDate": "2018-01-12T15:49:12.830", "ParentId": "48223804", "CommentCount": "1", "OwnerUserId": "1597714", "LastEditDate": "2018-01-12T15:56:12.767"}});