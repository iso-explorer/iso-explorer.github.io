post_cb({"27898412": {"CommentCount": "1", "Body": "<p>Yes, they do exactly the same thing.</p>\n<p>Think about the semantics of an <code>if</code> statement. The condition evaluates to a <code>bool</code> and is checked against <code>true</code>. <code>top==-1</code> will either evaluate to <code>true</code> or <code>false</code>, if it evaluates to <code>true</code> then the first form is executed and <code>true</code> is returned, otherwise the second form is evaluated and <code>false</code> is returned. This is exactly the same as the second version, just more verbose.</p>\n", "CreationDate": "2015-01-12T09:05:42.480", "ParentId": "27898343", "Id": "27898412", "LastActivityDate": "2015-01-12T09:05:42.480", "PostTypeId": "2", "Score": "1", "OwnerUserId": "496161"}, "27899168": {"CommentCount": "0", "Body": "<p><code>top == -1</code> is an expression. Assuming no operator overloads are involved, its return type is <code>bool</code>. It will have the value <code>true</code> if <code>top</code> equals <code>-1</code> and the value <code>false</code> if that's not the case.</p>\n<p><code>return top == -1;</code> means \"return the value of the expression <code>top == -1</code>\". As I've shown above, this value is either <code>true</code> or <code>false</code>. These coincide exactly with the values returned from the <code>if()</code>-based code, so the two codes are equivalent.</p>\n<p>In my code, I tend to use parentheses around \"syntactically unusual\" return statements, and I consider <code>==</code> one of them. So I would write this in my code (and I would certainly prefer it to the <code>if</code> version):</p>\n<pre><code>return (top == -1);\n</code></pre>\n", "CreationDate": "2015-01-12T09:50:52.877", "ParentId": "27898343", "Id": "27899168", "LastActivityDate": "2015-01-12T09:50:52.877", "PostTypeId": "2", "Score": "2", "OwnerUserId": "1782465"}, "27898343": {"CreationDate": "2015-01-12T09:01:17.657", "ViewCount": "136", "Id": "27898343", "AcceptedAnswerId": "27899168", "Score": "3", "Title": "not able to understand return statement in isEmpty function of stack implementation", "CommentCount": "6", "Body": "<p>I have <strong>isEmpty()</strong> function in my stack. And it looks something like below.</p>\n<pre><code>bool Mystack&lt;T&gt;::isEmpty() const    //function 1\n{\n     if(top==-1)\n          return true;\n     else \n          return false;\n}\n</code></pre>\n<p>I saw a couple of online code for <strong>isEmpty()</strong>, which I could not understand. Below is the snippet.</p>\n<pre><code>bool Mystack&lt;T&gt;::isEmpty() const    //function 2\n{\n    return top == -1;\n}\n</code></pre>\n<p><strong>Question 1:</strong> Are both the functions doing the exactly the same task?</p>\n<p><strong>Question 2:</strong> If yes, then can some one please explain how the syntax in function 2 performing its task without using any <strong>if</strong> statement.</p>\n", "Tags": "<c++><c><stack>", "LastActivityDate": "2015-01-12T09:50:52.877", "PostTypeId": "1", "AnswerCount": "4", "OwnerUserId": "4407315"}, "27898401": {"CreationDate": "2015-01-12T09:04:57.247", "CommentCount": "0", "Body": "<p><strong>Answer 1:</strong> Yes, same task.</p>\n<p><strong>Answer 2:</strong> I have no exact idea of <code>c++</code>, but logically</p>\n<pre><code>return top == -1;\n</code></pre>\n<p>can be broken into</p>\n<ol>\n<li><p>check if the value of <code>top</code> is equal to <code>1</code> or not.</p>\n<p>1.1 if equal, return <code>1</code> [or <code>TRUE</code>] (as a result of comparison success)</p>\n<p>1.2 if not, return <code>0</code> [or <code>FALSE</code>] (as a result of comparison failure)</p></li>\n</ol>\n<p>As reference, from <code>C99</code> standard document, chapter 6.8.6.4, paragraph 3,</p>\n<blockquote>\n<p id=\"so_27898343_27898401_0\">If a return statement with an expression is executed, the value of the expression is\n  returned to the caller as the value of the function call expression.</p>\n</blockquote>\n<p>and for that of <code>c++11</code>, chapter 6.6.3, paragraph 2,</p>\n<blockquote>\n<p id=\"so_27898343_27898401_1\">. . . A return statement with an expression of non-void type can be used only in functions returning a value; the value of the expression is returned to the caller of the function....</p>\n</blockquote>\n", "Id": "27898401", "OwnerUserId": "2173917", "LastEditDate": "2015-01-12T09:13:51.720", "ParentId": "27898343", "LastActivityDate": "2015-01-12T09:13:51.720", "PostTypeId": "2", "Score": "0", "LastEditorUserId": "2173917"}, "bq_ids": {"n4140": {"so_27898343_27898401_1": {"length": 14, "quality": 1.0, "section_id": 3913}, "so_27898343_27898401_0": {"length": 9, "quality": 0.75, "section_id": 3913}}, "n3337": {"so_27898343_27898401_1": {"length": 14, "quality": 1.0, "section_id": 3773}, "so_27898343_27898401_0": {"length": 9, "quality": 0.75, "section_id": 3773}}}, "27898406": {"CreationDate": "2015-01-12T09:05:15.180", "CommentCount": "0", "Body": "<p>Yes, both functions work exactly the same. They return whether <code>top</code> equals <code>-1</code>. </p>\n<p>In the first code, this is written somewhat \"explicitly\" (from the reader's perspective). Its English equivalent would be (roughly):</p>\n<blockquote>\n<p id=\"so_27898343_27898406_0\">Evaluate the expression <code>top == -1</code>.\n  If the result is <code>true</code>, then return <code>true</code>, else return <code>false</code>.</p>\n</blockquote>\n<p>The second code does it more subtly, and its rough English equivalent would be:</p>\n<blockquote>\n<p id=\"so_27898343_27898406_1\">Return the result of the expression <code>top == -1</code>.</p>\n</blockquote>\n", "Id": "27898406", "OwnerUserId": "252576", "LastEditDate": "2015-01-12T09:14:46.037", "ParentId": "27898343", "LastActivityDate": "2015-01-12T09:14:46.037", "PostTypeId": "2", "Score": "2", "LastEditorUserId": "252576"}});