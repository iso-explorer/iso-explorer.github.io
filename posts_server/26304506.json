post_cb({"26304633": {"ParentId": "26304506", "LastEditDate": "2017-05-23T10:25:59.140", "CommentCount": "3", "CreationDate": "2014-10-10T17:11:33.403", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "26304633", "Score": "9", "Body": "<p>For the <em>C standard library</em> C++ falls back on the C standard and for <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">C++11</a> it falls back on C99 not C11, before C++11 the C standard referenced was C90. This is covered in section <code>1.2</code> <em>Normative references</em> which says:</p>\n<blockquote>\n<p id=\"so_26304506_26304633_0\">The following referenced documents are indispensable for the\n  application of this document. For dated references, only the edition\n  cited applies. For undated references, the latest edition of the\n  referenced document (including any amendments) applies.</p>\n</blockquote>\n<p>and includes:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_26304506_26304633_1\">ISO/IEC 9899:1999, Programming languages \u2014 C</p></li>\n<li><p id=\"so_26304506_26304633_2\">ISO/IEC 9899:1999/Cor.1:2001(E), Programming languages \u2014 C, Technical Corrigendum 1</p></li>\n<li><p id=\"so_26304506_26304633_3\">ISO/IEC 9899:1999/Cor.2:2004(E), Programming languages \u2014 C, Technical Corrigendum 2</p></li>\n<li><p id=\"so_26304506_26304633_4\">ISO/IEC 9899:1999/Cor.3:2007(E), Programming languages \u2014 C, Technical Corrigendum 3</p></li>\n</ul>\n</blockquote>\n<p>and also says:</p>\n<blockquote>\n<p id=\"so_26304506_26304633_5\">The library described in Clause 7 of ISO/IEC 9899:1999 and Clause 7 of\n  ISO/IEC 9899:1999/Cor.1:2001 and Clause 7 of ISO/IEC\n  9899:1999/Cor.2:2003 is hereinafter called the C standard library.<sup>1</sup></p>\n</blockquote>\n<p>The C++ standard uses the term <em>C standard library</em> to refer back to C99 and the TCs and will explicitly state when C++ differs from C.</p>\n<p>and section <code>17.2</code> <em>The C standard library</em> says:</p>\n<blockquote id=\"so_26304506_26304633_6\">\n<ol>\n<li>The C++ standard library also makes available the facilities of the\n  C standard library, suitably adjusted to ensure static type safety.</li>\n<li>The descriptions of many library functions rely on the C standard\n  library for the signatures and semantics of those functions. In all\n  such cases, any use of the restrict qualifier shall be omitted.</li>\n</ol>\n</blockquote>\n<p>The <em>cname</em> header files which correspond to C Standard Library <em>name.h</em> files is covered in <code>17.6.1.2</code> <em>Headers</em> which says amongst other things:</p>\n<blockquote>\n<p id=\"so_26304506_26304633_7\">Except as noted in Clauses 18 through 30 and Annex D, the contents of\n  each header cname shall be the same as that of the corresponding\n  header name.h, as specified in the C standard library (1.2) or the C\n  Unicode TR, as appropriate, as if by inclusion. In the C++ standard\n  library, however, the declarations (except for names which are defined\n  as macros in C) are within namespace scope (3.3.6) of the namespace\n  std. It is unspecified whether these names are first declared within\n  the global namespace scope and are then injected into namespace std by\n  explicit using-declarations (7.3.3)</p>\n</blockquote>\n<p>The contents of <code>climits</code> as they relate to <code>limits.h</code> is covered in section <code>18.3.3</code> and says:</p>\n<blockquote>\n<p id=\"so_26304506_26304633_8\">The contents are the same as the Standard C library header .\n  [ Note: The types of the constants defined by macros in  are\n  not required to match the types to which the macros refer.\u2014end note ]</p>\n</blockquote>\n<p>Note, as I mentioned in the comment above, the normative references are not taken as a whole, the C++ standard must make explicit reference to a normative reference for it to apply to the C++ standard. See <a href=\"https://stackoverflow.com/q/23020323/1708801\"> Can we apply content not explicitly cited from the normative references to the C++ standard?</a> for more details.</p>\n", "LastActivityDate": "2014-10-13T19:00:42.240"}, "26304506": {"CommentCount": "4", "ViewCount": "185", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-10-10T17:03:24.187", "LastActivityDate": "2014-10-13T19:00:42.240", "LastEditDate": "2014-10-10T17:38:19.587", "AcceptedAnswerId": "26304633", "OwnerDisplayName": "user2953119", "Title": "Relationship between C and C++ standard library", "Id": "26304506", "Score": "4", "Body": "<p>This question doesn't directly relate to programming or a specific language concept. My question is can we use a reference to the <code>C</code> International Standard (for instance <code>C11</code>) to provide a <em>normative</em> reference to describe any concept from a <code>C</code> library in <code>C++</code>. </p>\n<p>To be more specific, in a header <code>&lt;climits&gt;</code> defined in <code>N3797::18.3.3 [c.limits]</code> the <code>C library</code> header  is described. But the <code>C</code> Standard provide more comprehensive information about <code>&lt;limits.h&gt;</code>'s content rather than <code>N3797</code> working draft.</p>\n<p>So everything about the <code>C library</code> defined in the <code>C11</code> is true for the <code>C++</code> implementation defined in <code>C++11</code> of <code>C library</code> or we can't rely to what the <code>C</code> standard provides?</p>\n", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26304506_26304633_0": {"section_id": 5761, "quality": 0.8695652173913043, "length": 20}, "so_26304506_26304633_3": {"section_id": 5761, "quality": 0.8333333333333334, "length": 5}, "so_26304506_26304633_5": {"section_id": 5762, "quality": 0.8666666666666667, "length": 13}, "so_26304506_26304633_1": {"section_id": 5761, "quality": 1.0, "length": 4}, "so_26304506_26304633_4": {"section_id": 5761, "quality": 0.8333333333333334, "length": 5}, "so_26304506_26304633_6": {"section_id": 6205, "quality": 0.5483870967741935, "length": 17}, "so_26304506_26304633_7": {"section_id": 6259, "quality": 0.9166666666666666, "length": 44}, "so_26304506_26304633_8": {"section_id": 6793, "quality": 0.6666666666666666, "length": 12}, "so_26304506_26304633_2": {"section_id": 5761, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_26304506_26304633_0": {"section_id": 5534, "quality": 0.8695652173913043, "length": 20}, "so_26304506_26304633_3": {"section_id": 5534, "quality": 0.8333333333333334, "length": 5}, "so_26304506_26304633_5": {"section_id": 5535, "quality": 0.8666666666666667, "length": 13}, "so_26304506_26304633_1": {"section_id": 5534, "quality": 1.0, "length": 4}, "so_26304506_26304633_4": {"section_id": 5534, "quality": 0.8333333333333334, "length": 5}, "so_26304506_26304633_6": {"section_id": 5965, "quality": 0.5483870967741935, "length": 17}, "so_26304506_26304633_7": {"section_id": 6019, "quality": 0.9166666666666666, "length": 44}, "so_26304506_26304633_8": {"section_id": 6548, "quality": 0.6666666666666666, "length": 12}, "so_26304506_26304633_2": {"section_id": 5534, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_26304506_26304633_0": {"section_id": 7217, "quality": 0.7391304347826086, "length": 17}, "so_26304506_26304633_3": {"section_id": 7217, "quality": 0.6666666666666666, "length": 4}, "so_26304506_26304633_4": {"section_id": 7217, "quality": 0.6666666666666666, "length": 4}, "so_26304506_26304633_7": {"section_id": 7763, "quality": 0.8541666666666666, "length": 41}, "so_26304506_26304633_8": {"section_id": 8284, "quality": 0.6111111111111112, "length": 11}, "so_26304506_26304633_2": {"section_id": 7217, "quality": 0.6666666666666666, "length": 4}}}});