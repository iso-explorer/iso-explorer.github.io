post_cb({"3906038": {"ParentId": "3905869", "CommentCount": "5", "Body": "<p>As said in the other answers, the compiler is allowed optimize away even non trivial copy constructors and assignment operators.</p>\n<blockquote>\n<p id=\"so_3905869_3906038_0\"><strong>12.8.15</strong> </p>\n<p id=\"so_3905869_3906038_1\">When certain criteria are met, an implementation is allowed to omit the copy construction of a class object, <strong>even if\n  the copy constructor and/or destructor for the object have side effects</strong>. In such cases, the implementation treats the\n  source and target of the omitted copy operation as simply two different ways of referring to the same object, and the\n  destruction of that object occurs at the later of the times when the two objects would have been destroyed without the\n  optimization. This elision of copy operations is permitted in the following circumstances (which may be combined\n  to eliminate multiple copies):</p>\n<p id=\"so_3905869_3906038_2\">\u2014 in a return statement in a function with a class return type, when the expression is the name of a non-volatile\n  automatic object with the same cv-unqualified type as the function return type, the copy operation can be omitted\n  by constructing the automatic object directly into the function\u2019s return value</p>\n<p id=\"so_3905869_3906038_3\">\u2014 when a temporary class object that has not been bound to a reference (12.2) would be copied to a class object with\n  the same cv-unqualified type, the copy operation can be omitted by constructing the temporary object directly into\n  the target of the omitted copy</p>\n</blockquote>\n", "OwnerUserId": "175093", "PostTypeId": "2", "Id": "3906038", "Score": "13", "CreationDate": "2010-10-11T12:10:36.640", "LastActivityDate": "2010-10-11T12:10:36.640"}, "3905869": {"CommentCount": "7", "AcceptedAnswerId": "3905921", "PostTypeId": "1", "LastEditorUserId": "466694", "CreationDate": "2010-10-11T11:46:54.790", "LastActivityDate": "2010-10-12T05:40:33.087", "LastEditDate": "2010-10-12T05:40:33.087", "ViewCount": "1025", "FavoriteCount": "2", "Title": "Isn't return value optimization (RVO) a bug?", "Id": "3905869", "Score": "7", "Body": "<p>I maybe asking a dumb question, but I looked at the wikipedia page for RVO <a href=\"http://en.wikipedia.org/wiki/Return_value_optimization\" rel=\"nofollow\">here</a> and could not stop wondering if that behavior is wrong. I tried it in my machine and RVO is fully kicked in despite optimization level. What if there was actually something <strong>BIG</strong> happenning in a constructor? I know it shouldn't, but what if? I can't understand why RVO would still happen when there are side effects in the constructor.</p>\n<p>EDIT: <code>-fno-elide-constructors</code> seems to stop RVO. But the question remains. </p>\n<p>EDIT2: On a more serious note, how many people know about something like this? It maybe in the standard, but it is still a really ugly feature as I see it. At least compilers should disable it by default and provide a switch for people who know about this. :)</p>\n<p>EDIT 3: I still insist that this is really bad. :). I don't think I know of any other language constraint like this that goes directly against the syntax of language. Everything else throws either compiler or linker errors right?</p>\n", "Tags": "<c++><return-value-optimization>", "OwnerUserId": "466694", "AnswerCount": "3"}, "3905921": {"ParentId": "3905869", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The standard mandates that operations with concern a program's <strong><em>observable state</em></strong> must not be optimized away, <strong><em>except for copy construction</em></strong> in certain circumstances. You must not rely on copy constructors to be executed, even if they have side effects you expect to see (e.g., console output). </p>\n", "OwnerUserId": "140719", "LastEditorUserId": "140719", "LastEditDate": "2010-10-11T16:06:36.807", "Id": "3905921", "Score": "20", "CreationDate": "2010-10-11T11:54:13.303", "LastActivityDate": "2010-10-11T16:06:36.807"}, "3905935": {"ParentId": "3905869", "CommentCount": "0", "Body": "<p>Define \"wrong\". The C++ language explicitly permits this kind of optimization even though it is observable. If the behavior of your program depends on a specific implementation, then unfortunately you are not using ISO C++, but some dialect.</p>\n", "OwnerUserId": "1626632", "PostTypeId": "2", "Id": "3905935", "Score": "7", "CreationDate": "2010-10-11T11:55:45.520", "LastActivityDate": "2010-10-11T11:55:45.520"}, "bq_ids": {"n4140": {"so_3905869_3906038_3": {"section_id": 480, "quality": 0.8888888888888888, "length": 24}, "so_3905869_3906038_1": {"section_id": 480, "quality": 0.9180327868852459, "length": 56}, "so_3905869_3906038_2": {"section_id": 480, "quality": 0.9666666666666667, "length": 29}}, "n3337": {"so_3905869_3906038_3": {"section_id": 471, "quality": 0.8888888888888888, "length": 24}, "so_3905869_3906038_1": {"section_id": 471, "quality": 0.9180327868852459, "length": 56}, "so_3905869_3906038_2": {"section_id": 471, "quality": 0.9666666666666667, "length": 29}}, "n4659": {"so_3905869_3906038_3": {"section_id": 502, "quality": 0.6296296296296297, "length": 17}, "so_3905869_3906038_1": {"section_id": 502, "quality": 0.9180327868852459, "length": 56}, "so_3905869_3906038_2": {"section_id": 502, "quality": 0.8666666666666667, "length": 26}}}});