post_cb({"bq_ids": {"n4140": {"so_46980595_48280078_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 6149}, "so_46980595_48280078_0": {"length": 17, "quality": 1.0, "section_id": 5942}, "so_46980595_48280078_2": {"length": 15, "quality": 1.0, "section_id": 5947}}, "n3337": {"so_46980595_48280078_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 5912}, "so_46980595_48280078_0": {"length": 17, "quality": 1.0, "section_id": 5713}, "so_46980595_48280078_2": {"length": 15, "quality": 1.0, "section_id": 5717}}, "n4659": {"so_46980595_48280078_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 7646}, "so_46980595_48280078_0": {"length": 17, "quality": 1.0, "section_id": 7426}, "so_46980595_48280078_2": {"length": 15, "quality": 1.0, "section_id": 7433}}}, "46980595": {"ViewCount": "65", "Body": "<p>I asked this question: <a href=\"https://stackoverflow.com/q/46961749/2642059\">static_assert of const Variable</a></p>\n<p>And apparently it comes down to the question does a floating point lvalue get converted to an rvalue for the purposes of comparison?</p>\n<p>So in this code does an lvalue-to-rvalue conversion occur?</p>\n<pre><code>const float foo = 13.0F;\nstatic_assert(foo &gt; 0.0F, \"foo must be greater than 0.\");\n</code></pre>\n", "Title": "Does a Comparison Between an Lvalue and a Literal Invoke an Lvalue-to-Rvalue Conversion?", "CreationDate": "2017-10-27T17:32:36.650", "LastActivityDate": "2018-01-16T11:21:51.940", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-10-27T17:42:13.330", "LastEditorUserId": "2642059", "Id": "46980595", "Score": "3", "OwnerUserId": "2642059", "Tags": "<c++><comparison><rvalue><lvalue><lvalue-to-rvalue>", "AnswerCount": "1"}, "48280078": {"Id": "48280078", "PostTypeId": "2", "Body": "<p>Yes, it is performed. Basically, it's all because <code>3.0 &gt; 1.2</code> is a well-formed expression, that contains nothing but prvalues for operands.</p>\n<p>First, <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr#9\" rel=\"nofollow noreferrer\">[expr]/9</a> states (emphasis mine) that</p>\n<blockquote>\n<p id=\"so_46980595_48280078_0\">Whenever a glvalue expression <strong>appears as an operand of an operator\n  that expects a prvalue for that operand</strong>, the lvalue-to-rvalue,\n  array-to-pointer, or function-to-pointer standard conversions are\n  applied to convert the expression to a prvalue.</p>\n</blockquote>\n<p>So the question really boils down to <em>\"Do the relational operators <strong>expect</strong> prvalues for operands\"</em>? And the answer to that is also yes. For we need to consider <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.rel#1\" rel=\"nofollow noreferrer\">[expr.rel]/1</a>:</p>\n<blockquote>\n<pre><code>relational-expression:\n  shift-expression\n  relational-expression &lt; shift-expression\n  relational-expression &gt; shift-expression\n  relational-expression &lt;= shift-expression\n  relational-expression &gt;= shift-expression\n</code></pre>\n<p id=\"so_46980595_48280078_1\">The operands shall have arithmetic, enumeration, or pointer type. The\n  operators &lt; (less than), &gt; (greater than), &lt;= (less than or equal to),\n  and &gt;= (greater than or equal to) all yield false or true. The type of\n  the result is bool.</p>\n</blockquote>\n<p>The above grammar production is the important bit. We can follow it (I won't do it entirely here) and reduce <code>shift-expression</code> to a <code>primary-expression</code>. And one of the productions of a <code>primary-expression</code> is a <code>literal</code>. For which it is said in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.prim.literal\" rel=\"nofollow noreferrer\">[expr.prim.literal]</a>:</p>\n<blockquote>\n<p id=\"so_46980595_48280078_2\">A literal is a primary expression. Its type depends on its form. A\n  string literal is an lvalue; all other literals are prvalues.</p>\n</blockquote>\n<p>And <em>because</em> most literals are prvalues, I think it's safe to say the relational operators <em>expect</em> prvalues for operands. </p>\n", "LastActivityDate": "2018-01-16T11:21:51.940", "Score": "2", "CreationDate": "2018-01-16T11:21:51.940", "ParentId": "46980595", "CommentCount": "2", "OwnerUserId": "817643"}});