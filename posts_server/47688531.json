post_cb({"bq_ids": {"n4140": {"so_47688531_47688531_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6009}, "so_47688531_47688531_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 5809}}, "n3337": {"so_47688531_47688531_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5777}, "so_47688531_47688531_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 5582}}, "n4659": {"so_47688531_47688531_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7508}, "so_47688531_47688531_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 7270}}}, "47688649": {"Id": "47688649", "PostTypeId": "2", "Body": "<p>The execution of the postfix increment occurs in <strong>two</strong> steps: first, an lvalue-to-rvalue conversion is applied, then, at some point before the end of the full-expression, the value stored in the object is incremented. The latter step is sequenced after the former.</p>\n<p>Let's say A is sequenced before B, and both A and B are indeterminately sequenced with C. In that case, no pair of A, B, and C may overlap, however, there are three possible execution orders: ABC, ACB, and CAB.</p>\n<p>In the case of the postfix increment, the additional guarantee provided by the language is that the order can only be ABC or CAB. A function call will never occur <em>between</em> the lvalue-to-rvalue conversion and the side effect.</p>\n", "LastActivityDate": "2017-12-07T06:09:23.320", "Score": "0", "CreationDate": "2017-12-07T06:09:23.320", "ParentId": "47688531", "CommentCount": "6", "OwnerUserId": "481267"}, "47688531": {"ViewCount": "35", "Body": "<p>There are at least 2 operators with similar texts in their description: </p>\n<blockquote>\n<p id=\"so_47688531_47688531_0\">With respect to an indeterminately-sequenced function call, the\n  operation of an <strong>&lt; operator &gt;</strong> is a single evaluation.</p>\n</blockquote>\n<p>Where <strong>&lt; operator &gt;</strong> might be either \"compound assignment\" ([expr.ass]) or \"postfix ++\" ([expr.post.incr]). That rule, if understand correctly, states essentially that the any interleaving (overlapping) between the indeterminately-sequenced function call and one of the aforementioned operator is forbidden. But the Standard already forbids it in [intro.execution]p15:</p>\n<blockquote>\n<p id=\"so_47688531_47688531_1\">&lt;...&gt; Evaluations A and B are indeterminately sequenced when either A\n  is sequenced before B or B is sequenced before A, but it is\n  unspecified which. [ Note: Indeterminately sequenced evaluations cannot overlap, but either could be executed first. \u2014 end note ] &lt;...&gt;</p>\n</blockquote>\n<p>So to the question: is the wording in the operator description redundant and might as well be removed completely? And if it is not redundant please describe a situation when the text from the operators apply but the general rule does not.</p>\n", "Title": "\"With respect to an indeterminately-sequenced function call\" in operators", "CreationDate": "2017-12-07T05:59:34.300", "LastActivityDate": "2017-12-07T06:09:23.320", "CommentCount": "0", "PostTypeId": "1", "Id": "47688531", "Score": "0", "OwnerUserId": "643393", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}});