post_cb({"20583450": {"CommentCount": "1", "ViewCount": "331", "ClosedDate": "2013-12-14T13:22:20.093", "CreationDate": "2013-12-14T12:44:31.080", "LastActivityDate": "2013-12-14T12:56:29.663", "PostTypeId": "1", "AcceptedAnswerId": "20583499", "FavoriteCount": "2", "Title": "the operator-> return value of smart pointers", "Id": "20583450", "Score": "5", "Body": "<p>smart pointers like shared_ptr can be used like ordinary pointers with <code>*</code> and <code>-&gt;</code> operator.\nThe books say that <code>-&gt;</code> operator returns the pointer that shared_ptr stores. So you can use it to access the object this pointer points to. But I am confused here. Look at the code below.</p>\n<pre><code>class A\n{\npublic:\n    A(int v = 20){val = v;}\n    int val;\n}\nA* p1 = new A;\nstd::cout&lt;&lt;p1-&gt;val;  //This is common sense\n\nboost::shared_ptr&lt;A&gt; p2(new A);\nstd::cout&lt;&lt;p2-&gt;val;  //This is right\n//My question is that p2-&gt; returns the pointers of the object, then maybe another \n//-&gt; should be used?\n//like (p2-&gt;)-&gt;val? \n</code></pre>\n", "Tags": "<c++><pointers>", "OwnerUserId": "3045084", "AnswerCount": "3"}, "20583507": {"ParentId": "20583450", "CommentCount": "0", "Body": "<p>Fortunately, designers of C++ realized this, and changed the semantics of the overloaded infix <code>-&gt;</code> operator to mean that the pointer returned by your operator is plugged in on the left-hand side of the <code>-&gt;</code> operator, and then the member is accessed as usual.</p>\n<p>If you were to invoke the <code>-&gt;</code> operator explicitly, you would need to insert an additional <code>-&gt;</code>, though:</p>\n<pre><code>std::cout &lt;&lt; p1.operator-&gt;()-&gt;val;\n</code></pre>\n<p><a href=\"http://ideone.com/ubI4uv\" rel=\"nofollow\">Demo on ideone</a>.</p>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "20583507", "Score": "1", "CreationDate": "2013-12-14T12:49:49.943", "LastActivityDate": "2013-12-14T12:49:49.943"}, "20583506": {"ParentId": "20583450", "CommentCount": "0", "Body": "<p>The return value of <code>operator -&gt;</code> is not the same as what <code>p2-&gt;val</code> returns. The return value of <code>operator -&gt;</code> is a pointer that will be used to access the <code>val</code> member, so <code>p2-&gt;val</code> works as expected.</p>\n", "OwnerUserId": "3088208", "PostTypeId": "2", "Id": "20583506", "Score": "0", "CreationDate": "2013-12-14T12:49:42.077", "LastActivityDate": "2013-12-14T12:49:42.077"}, "20583499": {"ParentId": "20583450", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's magic. Well, more like a special case. The standard says that</p>\n<blockquote>\n<p id=\"so_20583450_20583499_0\"><strong>13.5.6 Class member access [over.ref]</strong> </p>\n<p id=\"so_20583450_20583499_1\">1 <code>operator-&gt;</code> shall be a non-static member function taking no parameters. It implements the class member access syntax that uses <code>-&gt;</code>.  </p>\n<p id=\"so_20583450_20583499_2\">post\ufb01x-expression -&gt; templateopt id-expression<br>\n  post\ufb01x-expression -&gt; pseudo-destructor-name  </br></p>\n<p id=\"so_20583450_20583499_3\"><strong>An expression <code>x-&gt;m</code>is interpreted as <code>(x.operator-&gt;())-&gt;m</code></strong> for a class object <code>x</code> of type <code>T</code> if <code>T::operator-&gt;()</code>\n  exists and if the operator is selected as the best match function by the overload resolution mechanism (13.3).</p>\n</blockquote>\n<p>That is, <code>operator-&gt;</code> is called again on the result of the overloaded operator. And if that one is overloaded too, it goes on recursively until a raw pointer is the result and the built-in <code>operator-&gt;</code> is called.</p>\n<p>That doesn't mean the result can't be any arbitrary type - it can be, but then you can only call it with the function call syntax:</p>\n<pre><code>struct X {\n    int operator-&gt;() { return 42; }\n};\n\nint main()\n{\n    X x;\n    x.operator-&gt;(); // this is OK\n}\n</code></pre>\n", "OwnerUserId": "947836", "LastEditorUserId": "947836", "LastEditDate": "2013-12-14T12:56:29.663", "Id": "20583499", "Score": "10", "CreationDate": "2013-12-14T12:49:19.240", "LastActivityDate": "2013-12-14T12:56:29.663"}, "bq_ids": {"n4140": {"so_20583450_20583499_3": {"section_id": 664, "quality": 0.8888888888888888, "length": 16}, "so_20583450_20583499_1": {"section_id": 664, "quality": 1.0, "length": 12}}, "n3337": {"so_20583450_20583499_3": {"section_id": 654, "quality": 0.8888888888888888, "length": 16}, "so_20583450_20583499_1": {"section_id": 654, "quality": 1.0, "length": 12}}, "n4659": {"so_20583450_20583499_3": {"section_id": 692, "quality": 0.8888888888888888, "length": 16}, "so_20583450_20583499_1": {"section_id": 692, "quality": 1.0, "length": 12}}}});