post_cb({"42986059": {"Id": "42986059", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_42985624_42986059_0\">I know that the if I have an abstract class then I cannot create an object of abstract class type.</p>\n</blockquote>\n<p>With one exception: An object of an abstract class <em>can</em> be created as a subobject of a derived-class object.</p>\n<p>In fact, it <em>must</em> be created in that situation, because that's just how inheritance works in C++. An object of a derived class contains an object of the base class (or generally, objects of the base classes, because let us not forget that C++ also supports multiple inheritance).</p>\n<p>The standard says this very clearly in \u00a710.4/1:</p>\n<blockquote>\n<p id=\"so_42985624_42986059_1\">An abstract class is a class that can be used only as a base class of some other class; no objects of an abstract class can be created <strong>except as subobjects</strong> of a class derived from it.</p>\n</blockquote>\n<p>There you have it: instances of abstract classes may exist within this restriction. Therefore,</p>\n<blockquote>\n<pre><code>Base(string theName){name = theName);\n</code></pre>\n<p id=\"so_42985624_42986059_2\">Isn't this creating an object ?? </p>\n</blockquote>\n<p>It is a constructor like any other; it is used to create an object. The fact that the class is abstract doesn't matter, given the rule above.</p>\n<blockquote>\n<pre><code>Derived(string theName, int theAge):Base(theName) { age = theAge }\n</code></pre>\n<p id=\"so_42985624_42986059_3\">Isn't that also calling the default constructor for the Base ?? </p>\n</blockquote>\n<p>Yes, it is.</p>\n<blockquote>\n<p id=\"so_42985624_42986059_4\">So, am I allowed to call a parametrized constructor but not the default one ?</p>\n</blockquote>\n<p>A constructor in which all arguments are defaulted <em>is</em> a default constructor.</p>\n<blockquote>\n<p id=\"so_42985624_42986059_5\">One more thing, if I have another function in the Base class other than the pure function, how can I call that function if I am not allowed to create an object for the Base class ?</p>\n</blockquote>\n<p>If it's a <code>public</code> function, then anyone who has a derived-class object can call it (this includes the derived class itself). Additionally, anyone who accesses the derived-class object via a pointer or reference to the base class can call it. And of course, the base class itself can call it, too.</p>\n<p>If it's a <code>protected</code> function, then the derived class and potential further derived classes can call it.</p>\n<p>If it's <code>private</code>, then the base class itself can call it.</p>\n<p>As we have established above, you do technically create an object for the base class, as a subobject inside of the derived-class object. So principally, the situation is not special just because the base class is abstract.</p>\n<hr>\n<p>The thing to keep in mind here is that the technicalities of the language are defined so that all basic object-oriented features just work as expected. You don't have to worry about these things in your daily programming business.</p>\n</hr>", "LastEditorUserId": "3313064", "LastActivityDate": "2017-03-23T20:42:09.090", "Score": "2", "CreationDate": "2017-03-23T20:09:44.473", "ParentId": "42985624", "CommentCount": "5", "OwnerUserId": "3313064", "LastEditDate": "2017-03-23T20:42:09.090"}, "42985783": {"Id": "42985783", "PostTypeId": "2", "Body": "<p>Yup, if you declare constructor like that, then the default one is not generated, because the compiler won't be able to distinguish which one you want to call. This code, for instance, won't be compiled, as CL1(std::string) is private, and default CL1() does not exist.</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nclass CL1{\n    CL1(std::string s=\"\"){\n        std::cout&lt;&lt;\" hello\";\n    }   \n};\nint main() {\n    CL1 instance;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2017-03-23T19:54:04.897", "CommentCount": "1", "CreationDate": "2017-03-23T19:54:04.897", "ParentId": "42985624", "Score": "0", "OwnerUserId": "6762143"}, "bq_ids": {"n4140": {"so_42985624_42986059_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 300}, "so_42985624_42986059_1": {"length": 18, "quality": 1.0, "section_id": 7019}}, "n3337": {"so_42985624_42986059_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 291}, "so_42985624_42986059_1": {"length": 18, "quality": 1.0, "section_id": 6765}}, "n4659": {"so_42985624_42986059_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 307}, "so_42985624_42986059_1": {"length": 18, "quality": 1.0, "section_id": 8516}}}, "42985689": {"Id": "42985689", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_42985624_42985689_0\">Isn't this creating an object ??</p>\n</blockquote>\n<p>No.  It just defines how you would construct the object.</p>\n<blockquote>\n<p id=\"so_42985624_42985689_1\">Isn't that also calling the default constructor for the Base ?? So, am I allowed to call a parametrized constructor but not the default one ?</p>\n</blockquote>\n<p>Yes it is calling the constructor but like I said above, <code>Base(string theName){name = theName);</code>, doesn't call anything.  It just is a constructor definition.</p>\n<blockquote>\n<p id=\"so_42985624_42985689_2\">One more thing, if I have another function in the Base class other than the pure function, how can I call that function if I am not allowed to create an object for the Base class ?</p>\n</blockquote>\n<p>You would call it with a pointer/reference to the base class that points/refers to an instance of the derived class.</p>\n", "LastActivityDate": "2017-03-23T19:49:07.050", "CommentCount": "0", "CreationDate": "2017-03-23T19:49:07.050", "ParentId": "42985624", "Score": "0", "OwnerUserId": "4342498"}, "42985624": {"ViewCount": "294", "Body": "<p>I know that the if I have an abstract class then I cannot create an object of abstract class type. But Suppose \"Base\" is a base class and \"Derived\" is a derived class.\nIn base class I have one member variable name.</p>\n<pre><code>Base.h\nBase(string name = \"\");\n\nBase.cpp\nBase(string theName){name = theName);\n</code></pre>\n<p>Isn't this creating an object ?? </p>\n<p>In the Derived class I have member variable age.\nNow in the derived class default constructor</p>\n<pre><code>Derived.h\nDerived(string name = \"\", int theAge = 0);\n\nDerived.cpp\nDerived(string theName, int theAge):Base(theName) { age = theAge }\n</code></pre>\n<p>Isn't that also calling the default constructor for the Base ??\nSo, am I allowed to call a parametrized constructor but not the default one ?</p>\n<p>One more thing, if I have another function in the Base class other than the pure function, how can I call that function if I am not allowed to create an object for the Base class ?</p>\n<p>Thanks in advance!</p>\n", "AcceptedAnswerId": "42986059", "Title": "Calling the Constructor for the Abstract Base class in C++", "CreationDate": "2017-03-23T19:44:55.457", "Id": "42985624", "CommentCount": "4", "PostTypeId": "1", "OwnerDisplayName": "user7692867", "LastActivityDate": "2017-03-23T20:42:09.090", "Score": "1", "Tags": "<c++><class><c++11><inheritance><constructor>", "AnswerCount": "4"}, "42985699": {"Id": "42985699", "PostTypeId": "2", "Body": "<p>You are conflating two different concepts:</p>\n<ol>\n<li><p>Constructing an object.</p></li>\n<li><p>Instantiating an object.</p></li>\n</ol>\n<p>An abstract class gets constructed just like any other class. It can have its own custom constructor. Or it can have a default constructor, unless there are certain conditions that disallow default constructors.</p>\n<p>An abstract class cannot be instantiated. As you wrote yourself, you \"cannot create\" an abstract class. You can only create a derived class (unless the derived class is also an abstract class).</p>\n<p>Creating a derived class, of course, creates and constructs all of its base classes. Including its base abstract class. Your base class's constructor, the constructor for the abstract class, will be happy to meet its obligation and construct the base abstract class. Following that, the derived class will construct the derived class, and then the entire object would be constructed, and instantiated.</p>\n", "LastActivityDate": "2017-03-23T19:49:24.467", "CommentCount": "2", "CreationDate": "2017-03-23T19:49:24.467", "ParentId": "42985624", "Score": "1", "OwnerUserId": "3943312"}});