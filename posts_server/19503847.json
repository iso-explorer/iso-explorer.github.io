post_cb({"19503928": {"ParentId": "19503847", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-10-21T20:20:31.960", "Score": "4", "LastEditorUserId": "952747", "LastEditDate": "2013-10-21T20:25:47.193", "Id": "19503928", "OwnerUserId": "952747", "Body": "<p>Second one is <em>\"the more specialized template\"</em> and needs less \"substituting\" and compiler selects it as the best choice in overload resolution phase.</p>\n<p>Per \u00a714.5.6.2 (Partial ordering of function templates):</p>\n<blockquote>\n<p id=\"so_19503847_19503928_0\">Partial ordering selects which of two function templates is more\n  specialized than the other by transforming each template in turn (see\n  next paragraph) and performing template argument deduction using the\n  function type. The deduction process determines whether one of the\n  templates is more specialized than the other. If so, the more\n  specialized template is the one chosen by the partial ordering\n  process.</p>\n</blockquote>\n", "LastActivityDate": "2013-10-21T20:25:47.193"}, "19503847": {"CommentCount": "0", "ViewCount": "67", "CreationDate": "2013-10-21T20:14:42.367", "LastActivityDate": "2013-10-21T20:25:47.193", "Title": "Overloaded function template", "AcceptedAnswerId": "19503928", "PostTypeId": "1", "Id": "19503847", "Score": "1", "Body": "<p>I got 2 overloaded function templates:</p>\n<pre><code>template &lt;class typ1, class typ2&gt;\nvoid szab(typ1, typ2) {cout &lt;&lt; \"2 typy\" &lt;&lt; endl;}\n\ntemplate &lt;class typ1&gt;\nvoid szab(typ1, typ1) {cout &lt;&lt; \"1 typ\" &lt;&lt; endl;}\n</code></pre>\n<p>Why is there no ambiguity when I call a function like this: <code>szab(1, 1);</code> ? Isnt 2nd template a special version of first one? When I declare 2 parameters in a template it doesnt mean they HAVE TO be different types, they just CAN be. Why does a compiler choose the 2nd template then?</p>\n", "Tags": "<c++>", "OwnerUserId": "2397173", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19503847_19503928_0": {"section_id": 161, "quality": 0.9767441860465116, "length": 42}}, "n3337": {"so_19503847_19503928_0": {"section_id": 155, "quality": 0.9767441860465116, "length": 42}}, "n4659": {"so_19503847_19503928_0": {"section_id": 165, "quality": 0.9767441860465116, "length": 42}}}});