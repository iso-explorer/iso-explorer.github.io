post_cb({"34191903": {"CommentCount": "12", "AcceptedAnswerId": "34192129", "CreationDate": "2015-12-10T00:54:29.777", "LastActivityDate": "2015-12-10T02:29:51.897", "PostTypeId": "1", "ViewCount": "161", "FavoriteCount": "0", "Title": "Pre/Post Increment Pointers in C++", "Id": "34191903", "Score": "3", "Body": "<p><strong>*(p1++)</strong></p>\n<pre><code>int array[10] = {1,2};\nint *p1 = array;\n*p1=24;\n*p1= *(p1++);\nfor (int i : array)\n    cout &lt;&lt; i &lt;&lt; \" \";\n</code></pre>\n<p>Output is 24 24</p>\n<p><strong>*(++p1)</strong></p>\n<pre><code>int array[10] = {1,2};\nint *p1 = array;\n*p1=24;\n*p1= *(++p1);\nfor (int i : array)\n    cout &lt;&lt; i &lt;&lt; \" \";\n</code></pre>\n<p>Output is 24 2</p>\n<p>It seems like this is the exact opposite of doing increment with values. Can someone explain what is going on here? Thanks!</p>\n", "Tags": "<c++><pointers><increment><post-increment><pre-increment>", "OwnerUserId": "3939361", "AnswerCount": "3"}, "34192558": {"ParentId": "34191903", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-12-10T02:11:56.890", "Score": "-1", "LastEditorUserId": "3175107", "LastEditDate": "2015-12-10T02:29:51.897", "Id": "34192558", "OwnerUserId": "3175107", "Body": "<p>For *(p1++):</p>\n<pre><code>*p1 = *(p1++)\n</code></pre>\n<p><code>p1++</code> will increment <code>p1</code> to point to index 1 in the array, and return the previous value of <code>p1</code> (index 0). So <code>*(p1++)</code> will return 24, and <code>*p1</code> will now equal 2. <code>*p1</code> is then assigned that return value (24), so the array will be <code>{24,24}</code>.</p>\n<p>for *(++p1):</p>\n<pre><code>*p1 = *(++p1)\n</code></pre>\n<p><code>++p1</code> will increment <code>p1</code> to point to index 2 in the array, and return the current value of <code>p1</code> (index 1). So <code>*(++p1)</code> will return 2, and <code>*p1</code> will now equal 2. <code>*p1</code> is then assigned that return value (2), which is the original value at the index of p1 (1), so the array will remain <code>{24,2}</code></p>\n", "LastActivityDate": "2015-12-10T02:29:51.897"}, "34192062": {"ParentId": "34191903", "CommentCount": "0", "Body": "<pre><code>*p1= *(p1++);\n</code></pre>\n<p>This just doesn't make sense. The semantic meaning of this operation is different depending on which side of the <code>=</code> is evaluated first. So there's no way you can make any sense out of it.</p>\n", "OwnerUserId": "721269", "PostTypeId": "2", "Id": "34192062", "Score": "1", "CreationDate": "2015-12-10T01:12:45.133", "LastActivityDate": "2015-12-10T01:12:45.133"}, "bq_ids": {"n4140": {"so_34191903_34192129_0": {"section_id": 5811, "quality": 1.0, "length": 22}}, "n3337": {"so_34191903_34192129_0": {"section_id": 5584, "quality": 1.0, "length": 22}}, "n4659": {"so_34191903_34192129_0": {"section_id": 7272, "quality": 0.7272727272727273, "length": 16}}}, "34192129": {"ParentId": "34191903", "CommentCount": "2", "Body": "<p>There is an undefined behavior in</p>\n<pre><code>*p1 = *(p1++);\n</code></pre>\n<p>because, quoting \u00a71.9/15:</p>\n<blockquote>\n<p id=\"so_34191903_34192129_0\">If a side effect on a scalar\n  object is unsequenced relative to either another side effect on the same scalar object or a value computation\n  using the value of the same scalar object, the behavior is undefined.</p>\n</blockquote>\n<p>Side effect here is an increment of <code>p1</code> and value computation is a computation of address using <code>p1</code>.</p>\n<p>So you shouldn't rely on the exact outcome of your examples.</p>\n", "OwnerUserId": "471164", "PostTypeId": "2", "Id": "34192129", "Score": "2", "CreationDate": "2015-12-10T01:20:22.497", "LastActivityDate": "2015-12-10T01:20:22.497"}});