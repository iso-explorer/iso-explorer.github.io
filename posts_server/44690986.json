post_cb({"bq_ids": {"n4140": {"so_44690986_44691066_0": {"length": 17, "quality": 1.0, "section_id": 761}}, "n3337": {"so_44690986_44691066_0": {"length": 17, "quality": 1.0, "section_id": 748}}, "n4659": {"so_44690986_44691066_0": {"length": 17, "quality": 1.0, "section_id": 821}}}, "44690986": {"ViewCount": "253", "Body": "<p>What is the typical layout of <code>std::unordered_map&lt;K, V&gt;</code>? Are the <code>K</code> and <code>V</code> objects stored in the buckets themselves, or do the buckets store pointers to nodes containing the keys and values?</p>\n<p>I'm trying to figure out the performance implications of using <code>std::unordered_map&lt;K, V&gt;</code> versus <code>std::unordered_map&lt;K, V*&gt;</code>. Assuming I only ever emplace and look up values, is there any reason to prefer the latter, even if the values are quite large? The only reason I can imagine is if the values are stored in-line in buckets, and need to be re-allocated each time the container is rehashed.</p>\n<p>Is there anything in the standard that guarantees this won't happen?</p>\n", "AcceptedAnswerId": "44691066", "Title": "C++: is std::unordered_map guaranteed to be node-based?", "CreationDate": "2017-06-22T05:39:47.920", "Id": "44690986", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-06-22T05:45:49.233", "Score": "5", "OwnerUserId": "1505451", "Tags": "<c++><c++11><unordered-map>", "AnswerCount": "1"}, "44691066": {"Id": "44691066", "PostTypeId": "2", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/n3337/unord.req#8\" rel=\"noreferrer\">[unord.req]/8</a>:</p>\n<blockquote>\n<p id=\"so_44690986_44691066_0\">Rehashing invalidates iterators, changes ordering between elements,\n  and changes which buckets elements appear in, but does not invalidate\n  pointers or references to elements.</p>\n</blockquote>\n<p>The fact that pointers and references to elements are not invalidated by rehashing (or insertion/deletion, see /13) pretty much means that they have to be node based.</p>\n<p>C++17 even exposes node handles so that you can transfer nodes between two <code>unordered_map</code>s.</p>\n", "LastActivityDate": "2017-06-22T05:45:49.233", "CommentCount": "1", "CreationDate": "2017-06-22T05:45:49.233", "ParentId": "44690986", "Score": "12", "OwnerUserId": "2756719"}});