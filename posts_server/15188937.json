post_cb({"bq_ids": {"n4140": {"so_15188937_47136505_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6299}}, "n3337": {"so_15188937_47136505_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6056}}, "n4659": {"so_15188937_47136505_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7808}}}, "47136505": {"Id": "47136505", "PostTypeId": "2", "Body": "<p>Might be an old question, but I looked into this same problem before. Since CLR does not allow you to include <code>std::thead</code> at compile time, you could try to use it only at linking time. Normally you could resolve this be forward declaring the class in your header and including them only in your cpp files. However you <strong>can</strong> forward declare your own classes in header files, but you <strong>can't</strong> for classes in namespace std. According to the C++11 standard, 17.6.4.2.1:</p>\n<blockquote>\n<p id=\"so_15188937_47136505_0\">The behavior of a C++ program is undefined if it adds declarations or\n  definitions to namespace std or to a namespace within namespace std\n  unless otherwise specified.</p>\n</blockquote>\n<p>A workaround for this problem is to create a threading class that inherits from <code>std::thread</code> that you <strong>can</strong> forward declare. The header file for this class would look like:</p>\n<pre><code>#pragma once\n#include &lt;thread&gt;\n#include &lt;utility&gt;\nnamespace Threading\n{\n    class Thread : std::thread\n    {\n    public:\n        template&lt;class _Fn, class... _Args&gt; Thread(_Fn fn, _Args... args) : std::thread(fn, std::forward&lt;_Args...&gt;(args...))\n        {\n\n        }\n    private:\n\n    };\n}\n</code></pre>\n<p>In the header file that you would like to use the thread you can do forward declare it like:</p>\n<pre><code>#pragma once\n\n// Forward declare the thread class \nnamespace Threading { class Thread; }\nclass ExampleClass\n{\n    public:\n        ExampleClass();\n        void ThreadMethod();\n    private:\n        Threading::Thread * _thread;\n};\n</code></pre>\n<p>In your source file you can then use the theading class like:</p>\n<pre><code>#include \"ExampleClass.h\"\n#include \"Thread.h\"\n\nExampleClass::ExampleClass() :\n{\n    _thread = new Threading::Thread(&amp;ExampleClass::ThreadMethod, this);\n}\n\nvoid ExampleClass::ThreadMethod()\n{\n}\n</code></pre>\n<p>Hope it might help anyone.</p>\n", "LastEditorUserId": "4298200", "LastActivityDate": "2017-11-06T13:00:19.090", "Score": "0", "CreationDate": "2017-11-06T11:56:37.487", "ParentId": "15188937", "CommentCount": "0", "OwnerUserId": "8894012", "LastEditDate": "2017-11-06T13:00:19.090"}, "22480616": {"Id": "22480616", "PostTypeId": "2", "Body": "<p>This is an old question, but in case someone hits the same problem: <code>boost::thread</code> is an \"affordable\" and practical replacement (provided you can use boost in your project). Strangely, it bypasses the incompatibility.</p>\n", "LastActivityDate": "2014-03-18T13:18:23.200", "CommentCount": "0", "CreationDate": "2014-03-18T13:18:23.200", "ParentId": "15188937", "Score": "0", "OwnerUserId": "1732138"}, "15188937": {"ViewCount": "1599", "Body": "<p>I'm creating an UI abstraction layer for desktops. Now I'm implementing the functionality of the .NET framework. The annoying thing is that if I let the users create a CLR Windows Forms Application in Visual studio they can't use all the standard libraries like <code>std::thread</code> and if I let them create another type of application, the console shows up.</p>\n<p>Is there a way to use <strong>clr</strong> with <code>std::thread</code> or, even better, is there a way to prevent the console from starting (or hide it from both the screen and the taskbar)with a CLR Console or CLR Empty project.</p>\n<p>Thanks</p>\n", "Title": "using clr and std::thread", "CreationDate": "2013-03-03T18:09:24.433", "LastActivityDate": "2017-11-06T13:00:19.090", "CommentCount": "4", "LastEditDate": "2013-03-03T18:14:55.273", "PostTypeId": "1", "LastEditorUserId": "320018", "Id": "15188937", "Score": "0", "OwnerUserId": "1958160", "Tags": "<c++><.net><stdthread>", "AnswerCount": "2"}});