post_cb({"2336166": {"Id": "2336166", "PostTypeId": "2", "Body": "<p>just a speculation.</p>\n<p>what if your professor is referring to this ?? </p>\n<pre><code>while(*++argv !=NULL)\n\n    printf(\"%s\\n\",*argv);\n</code></pre>\n", "LastActivityDate": "2010-02-25T17:33:03.007", "CommentCount": "0", "CreationDate": "2010-02-25T17:33:03.007", "ParentId": "2336027", "Score": "4", "OwnerUserId": "281402"}, "2336027": {"ViewCount": "14042", "Body": "<p>In the data structures class that I am currently taking, we have been tasked with writing a web crawler in C++. To give us a head start, the professor provided us with a program to get the source from a given URL and a simple HTML parser to strip the tags out. The main function for this program accepts arguments and so uses argc/argv. The code used to check for the arguments is as follows:</p>\n<pre><code>// Process the arguments\nif (!strcmp(option, \"-h\"))\n{\n    // do stuff...\n}\nelse if (!strcmp(option, \"\"))\n{\n    // do stuff...\n}\nelse if (!strcmp(option, \"-t\"))\n{\n    // do stuff...\n}\nelse if (!strcmp(option, \"-a\"))\n{\n    // do stuff...\n}\n\nif ( *argv == NULL )\n{\n    exit(1);\n}\n</code></pre>\n<p>Where \"option\" has been populated with the switch in argv[1], and argv[2] and higher has the remaining arguments. The first block I understand just fine, if the switch equals the string do whatever based on the switch. I'm wondering what the purpose of the last if block is though.</p>\n<p>It could be that my C++ is somewhat rusty, but I seem to recall *argv being equivalent to argv[0], basically meaning it is checking to make sure arguments exist. Except I was under the impression that argv[0] always (at least in most implementations) contained the name of the program being run. It occurs to me that argv[0] could be null if argc is equal to 0, but searching around on Google I couldn't find a single post determining whether or not that is even possible.</p>\n<p>And so I turn to you. What exactly is that final if block checking?</p>\n<p><strong>EDIT:</strong> I've gone with the reasoning provided in the comments of the selected answer, that it may be possible to intentionally cause argv[0] to become NULL, or otherwise become NULL based on an platform-specific implementation of main.</p>\n", "AcceptedAnswerId": "2336038", "Title": "Why check if (*argv == NULL)?", "CreationDate": "2010-02-25T17:16:47.903", "Id": "2336027", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-02-11T21:31:17.023", "LastEditorUserId": "294313", "LastActivityDate": "2012-02-11T21:31:17.023", "ClosedDate": "2017-02-17T08:57:54.423", "Score": "11", "OwnerUserId": "140810", "Tags": "<c++><c><null><main><argv>", "AnswerCount": "4"}, "2336102": {"Id": "2336102", "PostTypeId": "2", "Body": "<p>Remembering just how portable C is, it might not always be running on a standard platform like Windows or Unix.  Perhaps it's some micro-code inside your washing machine running on some cheap, hacked environment. As such, it's good practice to make sure a pointer isn't null before dereferencing it, which might have led to the question.</p>\n<p>Even so, you're correct.  *argv is the same as argv[0], and argv is <em>supposed</em> to be initialized by the environment, if it's provided.</p>\n", "LastActivityDate": "2010-02-25T17:25:39.897", "CommentCount": "2", "CreationDate": "2010-02-25T17:25:39.897", "ParentId": "2336027", "Score": "4", "OwnerUserId": "166073"}, "bq_ids": {"n4140": {"so_2336027_2336110_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 7146}}, "n3337": {"so_2336027_2336110_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 6890}}, "n4659": {"so_2336027_2336110_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 8647}}}, "2336110": {"Id": "2336110", "PostTypeId": "2", "Body": "<p>3.6.1/2:</p>\n<blockquote>\n<p id=\"so_2336027_2336110_0\"><strong>If argc is non-zero</strong> those arguments \n  shall be provided in argv[0] though\n  ... and argv[0] shall be the pointer\n  to the initial character of a NTMBS\n  that represents the name used to\n  invoke the program or \"\". The value of\n  <code>argc</code> shall be nonnegative. The value \n  of <code>argv[argc]</code> shall be 0.</p>\n</blockquote>\n<p>Emphasis mine. argc is only guaranteed non-negative, not non-zero.</p>\n<p>This is at entry to main. It's also possible that <code>//do stuff</code> modifies the value of <code>argv</code>, or the contents of the array it points to. It's not entirely unheard of for option-handling code to shift values off argv as it processes them. The test for <code>*argv == null</code> may therefore be testing whether or not there are any command-line arguments left, after the options have been removed or skipped over. You'd have to look at the rest of the code.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2010-02-25T17:39:42.327", "Score": "10", "CreationDate": "2010-02-25T17:26:47.427", "ParentId": "2336027", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2010-02-25T17:39:42.327"}, "2336038": {"Id": "2336038", "PostTypeId": "2", "Body": "<p><code>argc</code> will provide you with the number of command line arguments passed. You shouldn't need to check the contents of <code>argv</code> too see if there are not enough arguments.</p>\n<pre><code>if (argc &lt;= 1) { // The first arg will be the executable name\n   // print usage\n}\n</code></pre>\n", "LastActivityDate": "2010-02-25T17:18:02.190", "CommentCount": "10", "CreationDate": "2010-02-25T17:18:02.190", "ParentId": "2336027", "Score": "9", "OwnerUserId": "33708"}});