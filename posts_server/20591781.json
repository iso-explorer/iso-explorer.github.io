post_cb({"20591781": {"ViewCount": "1060", "Body": "<p>I am running into an issue when trying to use <code>std::generate_canonical</code>. From my reading at <a href=\"http://en.cppreference.com/w/cpp/numeric/random/generate_canonical\" rel=\"nofollow noreferrer\">cpp-reference.com</a>, I expect <code>std::generate_canonical</code> to generate numbers in the range [0,1).\nHowever, on an up-to-date MSVC 2012 (CTP not installed), <code>std::generate_canonical</code> generates numbers that are all of the order 10^28 (see below). Indeed, <a href=\"http://msdn.microsoft.com/en-us/library/ee462289.aspx\" rel=\"nofollow noreferrer\">Microsoft's documentation</a> does not mention the range in which <code>std::generate_canonical</code> generates numbers.</p>\n<p>Does Microsoft not comply with the standard here? Or is the standard deficient in that it is vague about <code>std::generate_canonical</code>'s behavior? In the second case, how would I write code to generate a random floating point number in the range [0,1)?</p>\n<p>Please consider the below example code for my attempt at using <code>std::generate_canonical</code>.</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;limits&gt;\n#include &lt;iostream&gt;\n\nint main(int argc, char* argv[])\n{\n    std::random_device rd;\n    // seed with true source of randomness\n    std::mt19937 _rng_generator(rd());\n\n    for(int n=0; n&lt;10; ++n)\n        std::cout &lt;&lt; std::generate_canonical&lt;double,std::numeric_limits&lt;double&gt;::digits&gt;(_rng_generator) &lt;&lt; ' ';\n\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>Example of the output I get:<br>\n<code>4.85267e+028 2.76741e+028 3.17392e+028 5.84136e+028 1.0037e+028 4.87202e+028 2.53834e+028 4.233e+028 6.43922e+028 2.30694e+028</code></br></p>\n<p><strong>Update:</strong>\nI have previously reported the bug to <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/811611/std-generate-canonical-does-not-generate-random-number-in-range-0-1\" rel=\"nofollow noreferrer\">Microsoft Connect</a>. The bug has now been fixed and the fix will be included in MSVC 2014 RTM.</p>\n", "AcceptedAnswerId": "20591943", "Title": "how to use std::generate_canonical to generate random number in range [0,1)?", "CreationDate": "2013-12-15T06:12:19.507", "Id": "20591781", "CommentCount": "3", "LastEditDate": "2014-10-21T00:46:32.753", "PostTypeId": "1", "LastEditorUserId": "3103767", "LastActivityDate": "2014-10-21T00:46:32.753", "Score": "5", "OwnerUserId": "3103767", "Tags": "<c++><visual-c++><c++11>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20591781_20591943_1": {"length": 32, "quality": 0.9696969696969697, "section_id": 3604}}, "n3337": {"so_20591781_20591943_1": {"length": 32, "quality": 0.9696969696969697, "section_id": 3466}}, "n4659": {"so_20591781_20591943_1": {"length": 31, "quality": 0.9393939393939394, "section_id": 4368}}}, "20591943": {"Id": "20591943", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_20591781_20591943_0\">26.5.7.2 Function template generate_canonical [rand.util.canonical]</p>\n<p id=\"so_20591781_20591943_1\">Each function instantiated from the template described in this section\n  26.5.7.2 maps the result of one or more invocations of a supplied uniform random number generator <code>g</code> to one member of the specified\n  <code>RealType</code> such that, if the values <code>g</code><sub>i</sub> produced by <code>g</code> are uniformly\n  distributed, the instantiation's results <code>tj</code>, 0 \u2264 <code>tj</code> &lt; 1, are\n  distributed as uniformly as possible as specified below.</p>\n<pre><code>template&lt;class RealType, size_t bits, class URNG&gt; \nRealType generate_canonical(URNG&amp; g);\n</code></pre>\n</blockquote>\n<p>Also, Standard describes, that this function returns <img alt=\"s/rk\" src=\"https://i.stack.imgur.com/Iqrlg.gif\">, where<br>\n<img alt=\"S\" src=\"https://i.stack.imgur.com/I5X86.gif\"><br>\n<img alt=\"R\" src=\"https://i.stack.imgur.com/8XKR7.gif\"/></br></img></br></img></p>\n<p>So, this function should return a value from zero to one. I think, Microsoft implementation is wrong here.</p>\n", "LastEditorUserId": "1532460", "LastActivityDate": "2013-12-15T06:49:57.130", "Score": "6", "CreationDate": "2013-12-15T06:37:25.463", "ParentId": "20591781", "CommentCount": "1", "LastEditDate": "2013-12-15T06:49:57.130", "OwnerUserId": "1532460"}, "20591844": {"Id": "20591844", "PostTypeId": "2", "Body": "<p>Here is the MSDN documentation:</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ee462289.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ee462289.aspx</a></p>\n<p>Here's the corresponding prototype:</p>\n<pre><code>template&lt;class RealType,\n    size_t bits,\n    class Engine&gt;\n    RealType generate_canonical(Engine&amp; gen);\n</code></pre>\n<p>And here is a complete example:</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/bb982398.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/bb982398.aspx</a></p>\n<pre><code>// cl.exe /EHsc /nologo /W4 /MTd\n#include &lt;algorithm&gt;\n#include &lt;array&gt;\n#include &lt;iostream&gt;\n#include &lt;ostream&gt;\n#include &lt;random&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\ntemplate &lt;typename C&gt; void print(const C&amp; c) {\n    for (const auto&amp; e : c) {\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n\n    cout &lt;&lt; endl;\n}\n\nvoid test(unsigned int seed) {\n    cout &lt;&lt; \"Seed: \" &lt;&lt; seed &lt;&lt; endl;\n\n    mt19937 engine(seed);\n\n    uniform_int_distribution&lt;int&gt; dist(-3, 5);\n\n    vector&lt;int&gt; v;\n\n    for (int i = 0; i &lt; 30; ++i) {\n        v.push_back(dist(engine));\n    }\n\n    cout &lt;&lt; \"Randomized vector: \";\n    print(v);\n\n    array&lt;string, 26&gt; arr = { { \"H\", \"He\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\",\n        \"Ne\", \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar\", \"K\", \"Ca\", \"Sc\",\n        \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\" } };\n\n    shuffle(arr.begin(), arr.end(), engine);\n\n    cout &lt;&lt; \"Randomized array: \";\n    print(arr);\n}\n\nint main() {\n    cout &lt;&lt; \"--\" &lt;&lt; endl;\n\n    test(12345);\n\n    cout &lt;&lt; \"--\" &lt;&lt; endl;\n\n    random_device rd;\n\n    test(rd());\n}\n</code></pre>\n", "LastActivityDate": "2013-12-15T06:22:42.460", "Score": "-4", "CreationDate": "2013-12-15T06:22:42.460", "ParentId": "20591781", "CommentCount": "2", "OwnerUserId": "421195"}});