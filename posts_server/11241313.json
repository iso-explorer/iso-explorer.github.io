post_cb({"11241360": {"ParentId": "11241313", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><code>\\\"</code> gives consistency between single-quoted character literals and double-quoted string literals (they're defined to use the same escape sequences, as a result <code>\\'</code> and <code>\\\"</code> can be used in both). I'm slightly guessing, but I reckon the committee just figured it was too much bother to define different escape sequences in each, for no benefit and arguably a slight detriment.</p>\n<p><code>\\?</code> is for avoiding trigraphs: <code>??=</code> is a trigraph, <code>?\\?=</code> isn't.</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "673730", "LastEditDate": "2012-06-28T09:18:25.333", "Id": "11241360", "Score": "24", "CreationDate": "2012-06-28T09:07:49.440", "LastActivityDate": "2012-06-28T09:18:25.333"}, "11241313": {"CommentCount": "0", "ViewCount": "251", "CreationDate": "2012-06-28T09:05:01.690", "LastActivityDate": "2012-06-28T09:18:25.333", "Title": "What is the rationale in allowing `?` to be escaped?", "AcceptedAnswerId": "11241360", "PostTypeId": "1", "Id": "11241313", "Score": "14", "Body": "<p>From <strong>2.13.2/3</strong></p>\n<blockquote>\n<p id=\"so_11241313_11241313_0\">The double quote <code>\"</code> and the question mark <code>?</code>, can be represented as\n  themselves or by the escape sequences <code>\\\"</code> and <code>\\?</code> [...].</p>\n</blockquote>\n<p>Simply put, the following:</p>\n<pre><code>char x = '\\?'; //or '\\\"'\nchar y = '?';  //or '\"'\n</code></pre>\n<p>represent the same character. Why treat these two (especially <code>?</code>) differently than other characters?</p>\n", "Tags": "<c++><language-design><language-lawyer>", "OwnerUserId": "673730", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_11241313_11241313_0": {"section_id": 5345, "quality": 0.9, "length": 9}}, "n3337": {"so_11241313_11241313_0": {"section_id": 5142, "quality": 0.9, "length": 9}}, "n4659": {"so_11241313_11241313_0": {"section_id": 6770, "quality": 0.9, "length": 9}}}});