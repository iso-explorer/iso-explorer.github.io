post_cb({"31206733": {"ParentId": "31206462", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is actually a <a href=\"https://llvm.org/bugs/show_bug.cgi?id=20990\" rel=\"nofollow\">known bug</a> in Clang.</p>\n<p>The code is valid.</p>\n<p>N4140 [dcl.mptr]/1:</p>\n<blockquote>\n<p id=\"so_31206462_31206733_0\">In a declaration <code>T D</code> where <code>D</code> has the form  </p>\n<p id=\"so_31206462_31206733_1\"><em>nested-name-specifier</em> <code>*</code> <em>attribute-specifier-seq<sub>opt</sub> cv-qualifier-seq<sub>opt</sub> <code>D1</code></em> </p>\n<p id=\"so_31206462_31206733_2\">and the <em>nested-name-specifier</em> denotes a class, and the type of the identifier in the declaration <code>T D1</code> is \u201c<em>derived-declarator-type-list <code>T</code></em>\u201d, then the type of the identifier of <code>D</code> is \u201c<em>derived-declarator-type-list cv-qualifier-seq</em> pointer\n  to member of class nested-name-specifier of type <code>T</code>\u201d. The optional <em>attribute-specifier-seq</em> (7.6.1) appertains to\n  the pointer-to-member.</p>\n</blockquote>\n<p>In this definition we are interested in <em>nested-name-specifier</em>, and it's defined at [expr.prim.general]/8 as (emphasis mine):</p>\n<blockquote>\n<p id=\"so_31206462_31206733_3\"><em>nested-name-specifier:</em></p>\n<p id=\"so_31206462_31206733_4\"><em><code>::</code>\n  type-name <code>::</code><br>\n  namespace-name <code>::</code><br>\n<strong>decltype-specifier <code>::</code></strong><br>\n  nested-name-specifier identifier <code>::</code><br>\n  nested-name-specifier <code>template</code><sub>opt</sub> simple-template-id <code>::</code></br></br></br></br></em></p>\n</blockquote>\n", "OwnerUserId": "3959454", "LastEditorUserId": "3959454", "LastEditDate": "2016-01-29T18:50:00.900", "Id": "31206733", "Score": "12", "CreationDate": "2015-07-03T12:20:04.920", "LastActivityDate": "2016-01-29T18:50:00.900"}, "bq_ids": {"n4140": {"so_31206462_31206733_4": {"section_id": 5954, "quality": 0.875, "length": 7}, "so_31206462_31206733_2": {"section_id": 3225, "quality": 0.782608695652174, "length": 18}}, "n3337": {"so_31206462_31206733_4": {"section_id": 5724, "quality": 0.875, "length": 7}, "so_31206462_31206733_2": {"section_id": 3098, "quality": 0.782608695652174, "length": 18}}, "n4659": {"so_31206462_31206733_4": {"section_id": 175, "quality": 0.625, "length": 5}, "so_31206462_31206733_2": {"section_id": 3982, "quality": 0.8260869565217391, "length": 19}}}, "31206462": {"CommentCount": "0", "ViewCount": "223", "PostTypeId": "1", "LastEditorUserId": "3959454", "CreationDate": "2015-07-03T12:05:20.590", "LastActivityDate": "2016-01-29T18:50:00.900", "Title": "Is using 'decltype' in the declaration of pointer to member valid?", "AcceptedAnswerId": "31206733", "LastEditDate": "2015-07-03T12:23:22.943", "Id": "31206462", "Score": "10", "Body": "<p>Imagine for some strange reason I write this:</p>\n<pre><code>int main()\n{\n    struct S\n    {        \n        int i;\n    } var;\n\n\n    int decltype(var)::* pint = &amp;decltype(var)::i;\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/L8Yyiofi3IjoALEE\" rel=\"noreferrer\">GCC</a> seems to compile it fine although <a href=\"http://melpon.org/wandbox/permlink/DzztvqwWG1AVRrUK\" rel=\"noreferrer\">Clang</a> fails with some indeterminate syntax-related error message.</p>\n<p>So what does the holy ISO paper says about this - is this valid or not?</p>\n", "Tags": "<c++><language-lawyer><iso><decltype><pointer-to-member>", "OwnerUserId": "4031604", "AnswerCount": "1"}});