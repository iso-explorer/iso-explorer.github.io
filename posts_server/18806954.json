post_cb({"18806954": {"CommentCount": "5", "ViewCount": "652", "PostTypeId": "1", "LastEditorUserId": "683041", "CreationDate": "2013-09-14T22:20:20.547", "LastActivityDate": "2013-09-14T22:55:08.697", "Title": "Clang complains that a POD class is actually non-POD", "AcceptedAnswerId": "18807039", "LastEditDate": "2013-09-14T22:40:14.003", "Id": "18806954", "Score": "0", "Body": "<p>update: I've modified the code here so that you can just plug it right in and try to compile.</p>\n<p>Clang 3.4.1 (LLVM 3.4) complains that my class is not a POD type ( which as far as I can tell most certainly is ) when used in a variadic function. G++ has no problem compiling this.</p>\n<p>This class is POD even by C++03's standard:</p>\n<ul>\n<li>it contains only PODS as members</li>\n<li>has no user-defined destructor</li>\n<li>has no user-defined copy assignment operator</li>\n<li>has no nonstatic members of pointer-to-member type</li>\n</ul>\n<p>And C++11's rules for what is \"POD\" was relaxed, so what's going on here?</p>\n<p>About the code: This is a template class for a vector (as in vector graphics), and the variadic function is just used to fill an array with some arbitrary data.</p>\n<p>My class header file:</p>\n<pre><code>template&lt;typename TYPE&gt;\nclass Vec3t;\n\ntypedef Vec3t&lt;float&gt; Vec3f;\n\ntemplate&lt;typename TYPE&gt;\nclass Vec3t {\npublic:\n    Vec3t&lt;TYPE&gt;( void ){}\n    Vec3t&lt;TYPE&gt;( const TYPE nx, const TYPE ny, const TYPE nz ){}\n\n    Vec3t&lt;TYPE&gt; operator-(void) const{}\n\n    Vec3t&lt;TYPE&gt; operator*( const Vec3t&lt;TYPE&gt; &amp;other ) const{}\n    Vec3t&lt;TYPE&gt; operator*( const TYPE val ) const{}\n    Vec3t&lt;TYPE&gt;&amp; operator*=( const Vec3t&lt;TYPE&gt; &amp;other ){}\n    Vec3t&lt;TYPE&gt;&amp; operator*=( const TYPE val ){}\n\n    Vec3t&lt;TYPE&gt; operator+( const Vec3t&lt;TYPE&gt; &amp;other ) const{}\n    Vec3t&lt;TYPE&gt; operator+( const TYPE val ) const{}\n    Vec3t&lt;TYPE&gt;&amp; operator+=( const Vec3t&lt;TYPE&gt; &amp;other ){}\n    Vec3t&lt;TYPE&gt;&amp; operator+=( const TYPE val ){}\n\n    Vec3t&lt;TYPE&gt; operator-( const Vec3t&lt;TYPE&gt; &amp;other ) const{}\n    Vec3t&lt;TYPE&gt; operator-( const TYPE val ) const{}\n    Vec3t&lt;TYPE&gt;&amp; operator-=( const Vec3t&lt;TYPE&gt; &amp;other ){}\n    Vec3t&lt;TYPE&gt;&amp; operator-=( const TYPE val ){}\n\n    Vec3t&lt;TYPE&gt; operator/( const Vec3t&lt;TYPE&gt; &amp;other ) const{}\n    Vec3t&lt;TYPE&gt; operator/( const TYPE val ) const{}\n    Vec3t&lt;TYPE&gt;&amp; operator/=( const TYPE val ){}\n    Vec3t&lt;TYPE&gt;&amp; operator/=( const Vec3t&lt;TYPE&gt; &amp;other ){}\n\n    bool operator==( const Vec3t&lt;TYPE&gt; &amp;b ) const {}\n    bool operator==( const TYPE b ) const {}\n    bool operator!=( const Vec3t&lt;TYPE&gt; &amp;b ) const {}\n    bool operator!=( const TYPE b ) const {}\n\n    Vec3t&lt;TYPE&gt;&amp; Set( const TYPE a, const TYPE b, const TYPE c ){}\n    Vec3t&lt;TYPE&gt;&amp; Set( const TYPE a, const TYPE b ){}\n\n    void Cross( const Vec3t&lt;TYPE&gt; &amp;other, Vec3t&lt;TYPE&gt; &amp;out ) const{}\n\n    TYPE Dot( const Vec3t&lt;TYPE&gt; &amp;other ) const{}\n\n    Vec3t&lt;TYPE&gt; PerpCCW_ZAxis( void ){}\n    Vec3t&lt;TYPE&gt; PerpCW_ZAxis( void ){}\n\n    float Len( void ) const{}\n    void Zero( void ){}\n\n    static void Cross( const Vec3t&lt;TYPE&gt; &amp;other, const Vec3t&lt;TYPE&gt; &amp;u, Vec3t&lt;TYPE&gt; &amp;out ){}\n\n    Vec3f Normalize( void ){}\n    Vec3f Rotation( TYPE angle ){}\n    float DegreesBetween( const Vec3f &amp;other ){}\n    float RadiansBetween( const Vec3f &amp;other ){}\n    Vec3f Rotate( float angle, const bool inRadians = false ){}\n    static float Len( const Vec3f &amp;other ){}\n\npublic:\n    TYPE        x,y,z;\n};\n\ntemplate&lt; typename TYPE &gt;\nvoid FillArray( const std::size_t count, TYPE* var, ... ) {\n    va_list vargs;\n    va_start( vargs, var );\n\n    for ( std::size_t i=0; i&lt;count; i++ ) {\n        var[i] = va_arg( vargs, TYPE ); // ** THIS IS THE LINE CLANG ERRS ON ** //\n    }\n\n    va_end( vargs );\n}\n</code></pre>\n<p>My variadic function header file:</p>\n<pre><code>#include &lt;cstdarg&gt;\n\ntemplate&lt; typename TYPE &gt;\nvoid FillArray( const std::size_t count, TYPE* var, ... ) {\n    va_list vargs;\n    va_start( vargs, var );\n\n    for ( std::size_t i=0; i&lt;count; i++ ) {\n        var[i] = va_arg( vargs, TYPE ); // ** THIS IS THE LINE CLANG ERRS ON ** //\n    }\n\n    va_end( vargs );\n}\n</code></pre>\n<p>Clang's error:\n    error: second argument to 'va_arg' is of non-POD type 'Vec3t' [-Wnon-pod-varargs]</p>\n<p>An example program using these that causes the error in Clang:\n    #include \"fillarray.h\"</p>\n<pre><code>int main ( void ) {\n    Vec3t&lt;float&gt; v[2];\n    FillArray&lt; Vec3t&lt;float&gt; &gt;( 2, v, 0.4f, 0.5f);\n}\n</code></pre>\n<p>compile with:\n     clang++ x.cpp -I/usr/include/i386-linux-gnu/c++/4.8 -std=gnu++11</p>\n", "Tags": "<c++><c++11><clang><llvm><variadic-functions>", "OwnerUserId": "683041", "AnswerCount": "1"}, "18807039": {"ParentId": "18806954", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>\u00a712.1/7:</p>\n<blockquote>\n<p id=\"so_18806954_18807039_0\">A default constructor is trivial if it is not user-provided and...</p>\n<p id=\"so_18806954_18807039_1\">Otherwise, the default constructor is <em>non-trivial</em>.</p>\n</blockquote>\n<p>The default constructor you have declared is non-trivial by definition.</p>\n<p>\u00a79/3:</p>\n<blockquote>\n<p id=\"so_18806954_18807039_2\">A <em>trivial class</em> is a class that has a trivial default constructor (12.1) and is trivially copyable.</p>\n</blockquote>\n<p>Since the default constructor is non-trivial, the class is not trivial.</p>\n<p>\u00a79/10:</p>\n<blockquote>\n<p id=\"so_18806954_18807039_3\">A <em>POD struct</em> is a non-union class that is both a trivial class and a standard-layout class...</p>\n</blockquote>\n<p>Since the class is not trivial, it doesn't qualify as POD.  In order to make it POD, you'd have to get rid of the default constructor.</p>\n", "OwnerUserId": "319403", "LastEditorUserId": "319403", "LastEditDate": "2013-09-14T22:55:08.697", "Id": "18807039", "Score": "6", "CreationDate": "2013-09-14T22:32:54.097", "LastActivityDate": "2013-09-14T22:55:08.697"}, "bq_ids": {"n4140": {"so_18806954_18807039_2": {"section_id": 5850, "quality": 0.7777777777777778, "length": 7}, "so_18806954_18807039_0": {"section_id": 369, "quality": 1.0, "length": 4}, "so_18806954_18807039_3": {"section_id": 5854, "quality": 0.8888888888888888, "length": 8}, "so_18806954_18807039_1": {"section_id": 369, "quality": 1.0, "length": 4}}, "n3337": {"so_18806954_18807039_2": {"section_id": 5620, "quality": 0.8888888888888888, "length": 8}, "so_18806954_18807039_0": {"section_id": 359, "quality": 1.0, "length": 4}, "so_18806954_18807039_3": {"section_id": 5624, "quality": 0.8888888888888888, "length": 8}, "so_18806954_18807039_1": {"section_id": 359, "quality": 1.0, "length": 4}}, "n4659": {"so_18806954_18807039_2": {"section_id": 7329, "quality": 0.6666666666666666, "length": 6}, "so_18806954_18807039_3": {"section_id": 7333, "quality": 0.8888888888888888, "length": 8}}}});