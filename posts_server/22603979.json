post_cb({"22604146": {"ParentId": "22603979", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>A compiler not accepting the metioned snippet is faulty, the code provided is legal and should not yield a fatal diagnostic during compilation. In other words; <em>msvc is doing it wrong</em>.</p>\n<hr>\n<p><strong>RELEVANT SECTIONS OF THE STANDARD</strong></p>\n<blockquote>\n<p id=\"so_22603979_22604146_0\">12.3.2 <strong>Conversion functions</strong> <code>[class.conv.fct]</code></p>\n<blockquote>\n<p id=\"so_22603979_22604146_2\"><sup>2</sup> A function may be <code>explicit</code> (7.1.2), in which case it is only considered as a user-defined conversion for <em>direct-initialization</em> (8.5). Otherwise, user-defined conversions are not restricted to use in assignments and initializations.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_22603979_22604146_3\">8.5 <strong>Initializers</strong> <code>[dcl.init]</code></p>\n<blockquote>\n<p id=\"so_22603979_22604146_7\"><sup>16</sup> The initialization that occurs in the forms</p>\n<p id=\"so_22603979_22604146_8\">T x (a); <br/>\n       T x {a};</p>\n<p id=\"so_22603979_22604146_9\">as well as in <code>new</code> expressions (5.3.4), <code>static_cast</code> expressions (5.2.9), functional notation type conversions (5.2.3), and base and member initializers (12.6.2) is called <em>direct-initialization</em>.</p>\n</blockquote>\n</blockquote>\n<hr>\n<p><strong>HOW WOULD I WORK AROUND <code>MSVC++</code> BEING FAULTY?</strong></p>\n<ul>\n<li><p>use <code>typedef radians&lt;float&gt; rads;</code> instead of <code>using</code>, and either;</p>\n<ul>\n<li><p>remove <code>explicit</code> from your <em>conversion function</em>, or;</p></li>\n<li><p>initialize your variable using <code>auto r = rads { d }</code> or <code>auto r = rads (d);</code>.</p></li>\n</ul></li>\n</ul>\n</hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "LastEditDate": "2014-03-24T08:29:55.683", "Id": "22604146", "Score": "6", "CreationDate": "2014-03-24T08:17:54.963", "LastActivityDate": "2014-03-24T08:29:55.683"}, "22603979": {"CommentCount": "3", "AcceptedAnswerId": "22604146", "PostTypeId": "1", "LastEditorUserId": "1090079", "CreationDate": "2014-03-24T08:08:01.187", "LastActivityDate": "2014-03-24T08:31:42.217", "LastEditDate": "2014-03-24T08:31:42.217", "ViewCount": "586", "FavoriteCount": "1", "Title": "Why does this explicit conversion operator work with g++ but not Visual Studio 2013?", "Id": "22603979", "Score": "3", "Body": "<p>The following example contains two templated classes to represent degrees and radians with an explicit conversion operator to cast between them. It compiles and runs with g++ (<a href=\"http://ideone.com/xIxZQC\" rel=\"nofollow\">ideone link</a>) but not with Visual Studio 2013 with <code>Visual C++ Compiler Nov 2013 CTP (CTP_Nov2013)</code> as the platform toolset.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstatic const double PI = 3.14159265358979323846;\n\n// Forward declarations\ntemplate&lt; typename T &gt; class radians;\ntemplate&lt; typename T &gt; class degrees;\n\ntemplate&lt; typename T &gt;\nclass degrees\n{\n    public:\n        degrees(const T value)\n            : value_(value)\n        {}\n\n        template&lt; typename U &gt;\n        explicit operator U() const\n        {\n            return value_ * PI / 180.0;\n        }\n\n        T value() const { return value_; }\n\n    private:\n        T value_;\n};\n\ntemplate&lt; typename T &gt;\nclass radians\n{\n    public:\n        radians(const T value)\n            : value_(value)\n        {}\n\n        template&lt; typename U &gt;\n        explicit operator U() const\n        {\n            return (value_* 180.0) / PI;\n        }\n\n        T value() const { return value_; }\n\n    private:\n        T value_;\n};\n\ntemplate&lt; typename T &gt;\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const radians&lt;T&gt;&amp; r)\n{\n    return out &lt;&lt; r.value() &lt;&lt; \"r\";\n}\n\ntemplate&lt; typename T &gt;\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const degrees&lt;T&gt;&amp; r)\n{\n    return out &lt;&lt; r.value() &lt;&lt; \"d\";\n}\n\n\nint main()\n{\n    using degs = degrees&lt;float&gt;;\n    using rads = radians&lt;float&gt;;\n\n    auto d = degs{10};\n    auto r = static_cast&lt;rads&gt;(d);\n\n    std::cout &lt;&lt; d &lt;&lt; std::endl;\n    std::cout &lt;&lt; r &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The Visual Studio error output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error C2440: 'static_cast' : cannot convert from 'degrees&lt;float&gt;' to 'rads' degrad.cpp  69  1   degrad\nerror C3536: 'r': cannot be used before it is initialized   degrad.cpp  72  1   degrad\n</code></pre>\n<p>What's wrong? <strong>Why does it work with g++ but not Visual Studio 2013?</strong> Which compiler is doing the right thing?</p>\n", "Tags": "<c++><gcc><c++11><visual-studio-2013><explicit-conversion>", "OwnerUserId": "331024", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22603979_22604146_6": {"section_id": 3295, "quality": 0.7777777777777778, "length": 14}, "so_22603979_22604146_2": {"section_id": 392, "quality": 0.9333333333333333, "length": 14}, "so_22603979_22604146_9": {"section_id": 3295, "quality": 0.7777777777777778, "length": 14}, "so_22603979_22604146_1": {"section_id": 392, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_22603979_22604146_6": {"section_id": 3165, "quality": 0.7777777777777778, "length": 14}, "so_22603979_22604146_2": {"section_id": 383, "quality": 0.9333333333333333, "length": 14}, "so_22603979_22604146_9": {"section_id": 3165, "quality": 0.7777777777777778, "length": 14}, "so_22603979_22604146_1": {"section_id": 383, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_22603979_22604146_6": {"section_id": 4057, "quality": 0.5555555555555556, "length": 10}, "so_22603979_22604146_2": {"section_id": 409, "quality": 0.9333333333333333, "length": 14}, "so_22603979_22604146_9": {"section_id": 4057, "quality": 0.5555555555555556, "length": 10}, "so_22603979_22604146_1": {"section_id": 409, "quality": 0.9333333333333333, "length": 14}}}});