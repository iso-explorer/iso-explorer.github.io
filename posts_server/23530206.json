post_cb({"23530206": {"CommentCount": "3", "ViewCount": "92", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-05-07T23:29:59.810", "LastActivityDate": "2014-08-03T09:02:49.603", "Title": "How does g++ not report error with the given code?", "AcceptedAnswerId": "23530445", "LastEditDate": "2017-05-23T11:50:22.890", "Id": "23530206", "Score": "2", "Body": "<p>This is a continuation of my answer to <a href=\"https://stackoverflow.com/questions/23529563/why-is-elapsedtime-giving-me-an-output-of-1/23529598#23529598\">why is elapsedtime giving me an output of 1?</a></p>\n<p>I was able to successfully compile and build the following program using g++ 4.7.3.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint elapsedtime(int time1, int time2)\n{\n   return (time2-time1);\n}\n\nint main()\n{\n   int time1;\n   int time2;\n   cin &gt;&gt; time1 &gt;&gt; time2;\n   cout &lt;&lt; \"Your elapsed time is \" &lt;&lt; elapsedtime &lt;&lt;endl;\n}\n</code></pre>\n<p>The intent of the last line in <code>main</code> is:</p>\n<pre><code>   cout &lt;&lt; \"Your elapsed time is \" &lt;&lt; elapsedtime(time1, time2) &lt;&lt;endl;\n</code></pre>\n<p>How is g++ able to compile the first version without error?</p>\n", "Tags": "<c++><g++>", "OwnerUserId": "434551", "AnswerCount": "3"}, "23530291": {"ParentId": "23530206", "CommentCount": "1", "Body": "<p>With proper warning levels, GCC will warn:</p>\n<blockquote>\n<p id=\"so_23530206_23530291_0\"><code>test.cpp|14 col 39| warning: the address of 'int elapsedtime(int, int)' will always evaluate as 'true' [-Waddress]</code></p>\n</blockquote>\n<p>See it <a href=\"http://coliru.stacked-crooked.com/a/197ce381484219a7\" rel=\"nofollow\">GCC 4.7 On <strong>Coliru</strong></a> and <a href=\"http://coliru.stacked-crooked.com/a/7b77fe30e4ac67b4\" rel=\"nofollow\">clang too</a></p>\n", "OwnerUserId": "85371", "PostTypeId": "2", "Id": "23530291", "Score": "4", "CreationDate": "2014-05-07T23:39:19.983", "LastActivityDate": "2014-05-07T23:39:19.983"}, "23530445": {"ParentId": "23530206", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>std::ostream</code> has an <code>operator &lt;&lt; (bool)</code>, and function names are implicitly convertible to <code>bool</code> under the standard (by a function-to-pointer conversion followed by a boolean conversion). The relevant language is (\u00a74 [conv]/p1, \u00a74.3 [conv.func], \u00a74.12 [conv.bool]) :</p>\n<blockquote>\n<p id=\"so_23530206_23530445_0\">A <em>standard conversion sequence</em> is a sequence of standard conversions\n  in the following order:</p>\n<ul>\n<li>Zero or one conversion from the following set: lvalue-to-rvalue conversion, array-to-pointer conversion, and function-to-pointer conversion.</li>\n<li>Zero or one conversion from the following set: integral promotions, floating point promotion, integral conversions, floating point conversions, floating-integral conversions, pointer conversions, pointer to member conversions, and boolean conversions.</li>\n<li>Zero or one qualification conversion.</li>\n</ul>\n<p id=\"so_23530206_23530445_1\">An lvalue of function type T can be converted to a prvalue of type\n  \"pointer to T.\" The result is a pointer to the function.</p>\n<p id=\"so_23530206_23530445_2\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to\n  member type can be converted to a prvalue of type <code>bool</code>. A zero\n  value, null pointer value, or null member pointer value is converted\n  to <code>false</code>; any other value is converted to <code>true</code>.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-08-03T09:02:49.603", "Id": "23530445", "Score": "2", "CreationDate": "2014-05-07T23:54:46.533", "LastActivityDate": "2014-08-03T09:02:49.603"}, "bq_ids": {"n4140": {"so_23530206_23530445_1": {"section_id": 12, "quality": 0.9166666666666666, "length": 11}, "so_23530206_23530445_0": {"section_id": 0, "quality": 1.0, "length": 6}, "so_23530206_23530445_2": {"section_id": 44, "quality": 1.0, "length": 28}}, "n3337": {"so_23530206_23530445_1": {"section_id": 9, "quality": 0.9166666666666666, "length": 11}, "so_23530206_23530445_0": {"section_id": 0, "quality": 1.0, "length": 6}, "so_23530206_23530445_2": {"section_id": 41, "quality": 1.0, "length": 28}}, "n4659": {"so_23530206_23530445_0": {"section_id": 0, "quality": 1.0, "length": 6}, "so_23530206_23530445_2": {"section_id": 45, "quality": 1.0, "length": 28}, "so_23530206_23530445_1": {"section_id": 13, "quality": 0.9166666666666666, "length": 11}}}, "23530218": {"ParentId": "23530206", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Because it is completely valid C++.</p>\n<p>A function name is implicitly convertible to a pointer to that function.</p>\n<p>For MSVC, the standard library provides a output operator for arbitrary pointers that prints the numerical value of that pointer.</p>\n<p>For GCC/Clang the result is a bit complicated: They (correctly) do not implement an inserter that matches function pointers. Instead the function pointer is implicitly converted to bool which is true (1), since the pointer is not null. The conversion sequence can also be written explicitly like this.</p>\n<pre><code>int(*p)(int, int) = elapsedtime;\nbool b = p;\ncout &lt;&lt; \"Your elapsed time is \" &lt;&lt; b &lt;&lt;endl;\n</code></pre>\n<p>Note that with the proper warning level, both g++ and clang will warn you when an implicit conversion sequence causes a function name to be evaluated to <code>true</code> with a warning similar to:</p>\n<pre><code>warning: address of function 'elapsedtime' will always evaluate to 'true' [-Wbool-conversion]\n</code></pre>\n", "OwnerUserId": "65678", "LastEditorUserId": "65678", "LastEditDate": "2014-05-07T23:45:18.863", "Id": "23530218", "Score": "3", "CreationDate": "2014-05-07T23:32:14.610", "LastActivityDate": "2014-05-07T23:45:18.863"}});