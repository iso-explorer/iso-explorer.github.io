post_cb({"bq_ids": {"n4140": {"so_37037842_37038369_1": {"length": 5, "quality": 1.0, "section_id": 7047}, "so_37037842_37037842_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 5389}, "so_37037842_37038369_0": {"length": 11, "quality": 1.0, "section_id": 7047}, "so_37037842_37037842_1": {"length": 31, "quality": 1.0, "section_id": 5389}}, "n3337": {"so_37037842_37038369_1": {"length": 5, "quality": 1.0, "section_id": 6792}, "so_37037842_37037842_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 5183}, "so_37037842_37038369_0": {"length": 11, "quality": 1.0, "section_id": 6792}, "so_37037842_37037842_1": {"length": 31, "quality": 1.0, "section_id": 5183}}, "n4659": {"so_37037842_37038369_1": {"length": 5, "quality": 1.0, "section_id": 8544}, "so_37037842_37037842_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6815}, "so_37037842_37038369_0": {"length": 11, "quality": 1.0, "section_id": 8544}, "so_37037842_37037842_1": {"length": 31, "quality": 1.0, "section_id": 6815}}}, "37037842": {"ViewCount": "72", "Body": "<p><a href=\"http://eel.is/c++draft/dcl.spec#3\" rel=\"nofollow\">[dcl.spec]/3 in c++1z</a> (emphasis is mine):</p>\n<blockquote>\n<p id=\"so_37037842_37037842_0\">If a <em>type-name</em> is encountered while parsing a <em>decl-specifier-seq</em>,\n  it is interpreted as part of the <em>decl-specifier-seq</em> if and only if\n  there is no previous <em>defining-type-specifier</em> other than a\n  <em>cv-qualifier</em> in the <em>decl-specifier-seq</em>. The sequence shall be self-consistent as described below. [ Example:</p>\n<pre><code>typedef char* Pc;\nstatic Pc;                      // error: name missing\n</code></pre>\n<p id=\"so_37037842_37037842_1\">Here, the declaration <code>static Pc</code> is ill-formed because no name was\n  specified for the static variable of type <code>Pc</code>. <strong>To get a variable\n  called <code>Pc</code>, a <em>type-specifier</em> (other than <code>const</code> or <code>volatile</code>) has\n  to be present to indicate that the <em>typedef-name</em> <code>Pc</code> is the name\n  being (re)declared, rather than being part of the <code>decl-specifier</code>\n  sequence</strong>.</p>\n</blockquote>\n<p>Nevertheless, the snippet below doesn't compile in g++ and clang. Why is that?</p>\n<pre><code>typedef char* Pc;\nstatic int Pc;\n</code></pre>\n", "Title": "Doubts about [dcl.spec]/3 in c++1z", "CreationDate": "2016-05-04T20:55:16.077", "LastActivityDate": "2016-05-04T21:34:55.663", "CommentCount": "3", "LastEditDate": "2016-05-04T21:07:48.777", "PostTypeId": "1", "LastEditorUserId": "1577873", "Id": "37037842", "Score": "2", "OwnerUserId": "1577873", "Tags": "<c++><language-lawyer><declaration><c++1z>", "AnswerCount": "1"}, "37038369": {"Id": "37038369", "PostTypeId": "2", "Body": "<p>The intent of the paragraph is to show that <code>typedef char* Pc</code> is valid, whereas <code>static Pc</code> is not, <em>not</em> that you can redeclare <code>Pc</code> as something else (in the same scope). In other words, <code>static Pc</code> and <code>static int Pc</code> are not different entities. Nothing's changed that would allow you to do this.</p>\n<p><a href=\"http://eel.is/c++draft/basic.scope#basic.scope.declarative-4\" rel=\"nofollow\">[basic.scope.declarative]/4</a></p>\n<blockquote>\n<p id=\"so_37037842_37038369_0\">Given a set of declarations in a single declarative region, each of\n  which specifies the same unqualified name,</p>\n<p id=\"so_37037842_37038369_1\">(4.1) \u2014 they shall all refer to the same entity, ...</p>\n</blockquote>\n", "LastEditorUserId": "6292850", "LastActivityDate": "2016-05-04T21:34:55.663", "Score": "3", "CreationDate": "2016-05-04T21:29:04.360", "ParentId": "37037842", "CommentCount": "5", "OwnerUserId": "6292850", "LastEditDate": "2016-05-04T21:34:55.663"}});