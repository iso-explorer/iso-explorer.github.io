post_cb({"24220504": {"ParentId": "24220127", "PostTypeId": "2", "CommentCount": "1", "Body": "<h3>Introduction</h3>\n<blockquote>\n<p id=\"so_24220127_24220504_0\"><code>7.3p1</code> <strong>Namespaces</strong> <code>[basic.namespace]</code></p>\n<blockquote>\n<p id=\"so_24220127_24220504_2\">A namespace is an optionally-named declarative region. The name of a namespace can be used to access entities declared in that namespace; that is, the members of the namespace. Unlike other declarative regions, the definition of a namespace can be split over several parts of one or more translation units.</p>\n</blockquote>\n</blockquote>\n<p>A declared entity inside a namespace belongs to that namespace, ie. it's a member of that specific namespace, no matter if the namespace is <em>inline</em> or not.</p>\n<hr>\n<h3>ODR VIOLATION = <em>N0NE</em></h3>\n<p>Your example snippet does <strong>not</strong> violate the <em>ODR</em>, mainly because you have 2 <strong>different</strong> entities named <code>j</code>; </p>\n<pre><code>namespace N {\n  int j = 0;            // 1st\n\n  inline namespace M {\n    int j = 1;          // 2nd\n  }\n}\n</code></pre>\n<p>As pointed out further down in <code>[namespace.def]p8</code>, name lookup in the enclosing namespace will include those found in any <code>inline</code> namespace, but the members of the nested inline namespace are still entities of their own.</p>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_24220127_24220504_3\"><code>7.3.1p8</code> <strong>Namespace definition</strong> <code>[namespace.def]</code></p>\n<blockquote>\n<p id=\"so_24220127_24220504_6\">Specifically, the inline namespace and its enclosing namespace are both added to the set of associated namespaces used in argument-dependent lokoup (3.4.2) whenever one of them is, and a using-direction (7.3.4) that names the inline namespace is implicitly inserted into the enclosing namespace as for an unnamed namespace (7.3.1.1).</p>\n<p id=\"so_24220127_24220504_7\">Furthermore, each member of the inline namespace can subsequently be explicitly instantiated (14.7.2) or explicitly specialized (14.7.3) as though it were a member of the enclosing namespace. Finally, lookup up a name in the enclosing namespace via explicit qualification (3.4.3.2) will include members of the inline namespace brought in by the using-directive even if there are declarations of the name in the enclosing namespace.</p>\n</blockquote>\n</blockquote>\n<p>The added names are not treated as redeclarations of previously declared entities, they are additional names, in a nested declarative region, that are brought into the enclosing namespace during name-lookup.</p>\n<hr>\n<blockquote>\n<p id=\"so_24220127_24220504_8\"><sup><strong>Note</strong>: Relying on the compiler to issue a diagnostic in terms of ODR-violations is not safe, mainly because the Standard explicitly states that <em>\"no diagnostic [is] required\"</em> if an application violates the rules set up by <code>[basic.def.odr].</code><br/><br/>Further details are avaiable in a comment by <a href=\"https://stackoverflow.com/users/147192/matthieu-m\">Matthieu M.</a> on this post. </sup></p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:25:05.237", "Id": "24220504", "Score": "3", "CreationDate": "2014-06-14T13:37:23.743", "LastActivityDate": "2014-06-15T11:18:48.287"}, "bq_ids": {"n4140": {"so_24220127_24220504_2": {"section_id": 5471, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_4": {"section_id": 5480, "quality": 0.8333333333333334, "length": 25}, "so_24220127_24220504_1": {"section_id": 5471, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_7": {"section_id": 5480, "quality": 0.9, "length": 36}, "so_24220127_24220127_0": {"section_id": 5480, "quality": 1.0, "length": 12}, "so_24220127_24220504_5": {"section_id": 5480, "quality": 0.9, "length": 36}, "so_24220127_24220504_6": {"section_id": 5480, "quality": 0.8333333333333334, "length": 25}}, "n3337": {"so_24220127_24220504_2": {"section_id": 5257, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_4": {"section_id": 5266, "quality": 0.8333333333333334, "length": 25}, "so_24220127_24220504_1": {"section_id": 5257, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_7": {"section_id": 5266, "quality": 0.9, "length": 36}, "so_24220127_24220127_0": {"section_id": 5266, "quality": 1.0, "length": 12}, "so_24220127_24220504_5": {"section_id": 5266, "quality": 0.9, "length": 36}, "so_24220127_24220504_6": {"section_id": 5266, "quality": 0.8333333333333334, "length": 25}}, "n4659": {"so_24220127_24220504_2": {"section_id": 6906, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_4": {"section_id": 6914, "quality": 0.8333333333333334, "length": 25}, "so_24220127_24220504_1": {"section_id": 6906, "quality": 0.9655172413793104, "length": 28}, "so_24220127_24220504_7": {"section_id": 6914, "quality": 0.9, "length": 36}, "so_24220127_24220127_0": {"section_id": 6914, "quality": 1.0, "length": 12}, "so_24220127_24220504_5": {"section_id": 6914, "quality": 0.9, "length": 36}, "so_24220127_24220504_6": {"section_id": 6914, "quality": 0.8333333333333334, "length": 25}}}, "24220127": {"CommentCount": "0", "ViewCount": "117", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-14T12:53:36.900", "LastActivityDate": "2014-06-15T11:18:48.287", "PostTypeId": "1", "AcceptedAnswerId": "24220504", "Title": "Redefinition member of the namespace into the nested inline namespace", "Id": "24220127", "Score": "5", "Body": "<p>There is a quote from 7.3.1/8 of N3797:</p>\n<blockquote>\n<p id=\"so_24220127_24220127_0\">Members of an inline namespace can be used in most respects as though\n  they were members of the enclosing namespace.</p>\n</blockquote>\n<p>Consider the following code snippet:</p>\n<pre><code>namespace M\n{\n    int j = 7;\n    inline namespace MM\n    {\n        int j = 8;\n    }\n}\n</code></pre>\n<p>I think that the example violates the <code>ODR</code>. But it is not true and it is compiling successful. Can you explain that behavior?</p>\n", "Tags": "<c++><namespaces><inline><language-lawyer>", "AnswerCount": "1"}});