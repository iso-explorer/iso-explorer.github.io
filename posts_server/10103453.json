post_cb({"bq_ids": {"n4140": {"so_10103453_10103453_0": {"length": 14, "quality": 0.875, "section_id": 5407}}, "n3337": {"so_10103453_10103453_0": {"length": 14, "quality": 0.875, "section_id": 5202}}, "n4659": {"so_10103453_10103453_0": {"length": 13, "quality": 0.8125, "section_id": 6829}}}, "10103552": {"Id": "10103552", "PostTypeId": "2", "Body": "<p>IMHO, if the <code>typedef</code> is just to avoid typing or to make the pointer-to-member-function less cumbersome, as your example shows, thenit is fine.</p>\n<p>But if the <code>typedef</code> reveals some particular concept, then it should be visible outside of the function.</p>\n<p>A quick test to check it is the name of the <code>typedef</code>:</p>\n<pre><code>typedef int(C::*MEMFN1)(const std::string&amp;); //OK: as local typedef, just an abbreviation\n\ntypedef int(C::*ACTION)(const std::string&amp;); //Not so OK: Action is a new concept\n</code></pre>\n", "LastActivityDate": "2012-04-11T09:48:36.647", "CommentCount": "3", "CreationDate": "2012-04-11T09:48:36.647", "ParentId": "10103453", "Score": "-3", "OwnerUserId": "865874"}, "10103453": {"ViewCount": "10708", "Body": "<p>I have some class <code>C</code> and want to pass address of its instance and method to some functor in  a test function <code>Test_C_Foo1()</code>. Functor is a template class and I have to provide type of the class method (<code>MEMFN1</code>) as one of its template parameters. I have to define <code>MEMFN1</code> type somewhere but don't want to change <code>C.h</code> and don't want to pollute global namespace with it. I decided to localize <em>typedef</em> as much as possible so put it inside a test-function - within the scope where <code>MEMFN1</code> is actually used. <strong>Is using a typedef inside the function body a good practice?</strong></p>\n<p>Standard allows using <em>typedef</em> inside a function body, restricting it only in these particular cases:</p>\n<blockquote>\n<p id=\"so_10103453_10103453_0\">The typedef specifier shall not be combined in a decl-specifier-seq\n  with any other kind of specifier except a type-specifier, and it shall\n  not be used in the decl-specifier-seq of a parameter-declaration\n  (8.3.5) nor in the decl-specifier-seq of a function-definition (8.4).</p>\n</blockquote>\n<p>Here's the code snippet:</p>\n<p><strong>C.h:</strong></p>\n<pre><code>...\n#include &lt;string&gt;\n...\n\nclass C\n{\npublic:\n    int foo1(const std::string&amp;);       \n};\n</code></pre>\n<p><strong>main.cpp:</strong></p>\n<pre><code>...\n#include \"C.h\"\n...\n\nvoid Test_C_Foo1()\n{\n   typedef int(C::*MEMFN1)(const std::string&amp;);\n\n   C c;   \n   Functor1&lt;C, MEMFN1,...&gt; f1(&amp;c, &amp;C1::foo1,...);\n   ...\n}\n\n...\n\nint main()\n{\n    Test_C_Foo1();\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "10103528", "Title": "Is typedef inside of a function body a bad programming practice?", "CreationDate": "2012-04-11T09:40:02.487", "Id": "10103453", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2012-04-11T09:48:36.647", "Score": "27", "OwnerUserId": "404421", "Tags": "<c++><typedef>", "AnswerCount": "2"}, "10103528": {"Id": "10103528", "PostTypeId": "2", "Body": "<p>It's <em>good</em>. It's legal and localized.</p>\n", "LastActivityDate": "2012-04-11T09:46:33.950", "CommentCount": "1", "CreationDate": "2012-04-11T09:46:33.950", "ParentId": "10103453", "Score": "43", "OwnerUserId": "191596"}});