post_cb({"bq_ids": {"n4140": {"so_14115516_14115575_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 584}, "so_14115516_14115575_2": {"length": 55, "quality": 0.9649122807017544, "section_id": 584}, "so_14115516_14115575_1": {"length": 15, "quality": 0.9375, "section_id": 584}, "so_14115516_14115575_3": {"length": 22, "quality": 0.88, "section_id": 584}, "so_14115516_14115575_4": {"length": 25, "quality": 0.8333333333333334, "section_id": 587}}, "n3337": {"so_14115516_14115575_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 574}, "so_14115516_14115575_2": {"length": 55, "quality": 0.9649122807017544, "section_id": 574}, "so_14115516_14115575_3": {"length": 22, "quality": 0.88, "section_id": 574}, "so_14115516_14115575_4": {"length": 25, "quality": 0.8333333333333334, "section_id": 577}, "so_14115516_14115575_1": {"length": 15, "quality": 0.9375, "section_id": 574}}, "n4659": {"so_14115516_14115575_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 607}, "so_14115516_14115575_2": {"length": 51, "quality": 0.8947368421052632, "section_id": 607}, "so_14115516_14115575_3": {"length": 22, "quality": 0.88, "section_id": 607}, "so_14115516_14115575_4": {"length": 25, "quality": 0.8333333333333334, "section_id": 610}, "so_14115516_14115575_1": {"length": 15, "quality": 0.9375, "section_id": 607}}}, "14115516": {"ViewCount": "194", "Body": "<p>When encountering</p>\n<pre><code>x op y\n</code></pre>\n<p>Does ADL find member x.op(y)? Or is the lookup specified as if not x.op(y), then ADL(op, x, y)?</p>\n", "AcceptedAnswerId": "14115575", "Title": "What are the exact name lookup rules for x op y?", "CreationDate": "2013-01-02T00:14:43.413", "Id": "14115516", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-01-02T00:35:12.713", "Score": "1", "OwnerUserId": "298661", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "14115575": {"Id": "14115575", "PostTypeId": "2", "Body": "<p>Member candidates, non-member candidates (with ADL) and built-in candidates are considered. The best candidate is picked.</p>\n<p><em>[over.match.oper]/3</em></p>\n<blockquote>\n<p id=\"so_14115516_14115575_0\">For a unary <code>operator @</code> with an operand of a type whose cv-unqualified version is <code>T1</code>, and for a binary <code>operator @</code> with a left operand of a type whose cv-unqualified version is <code>T1</code> and a right operand of a type whose cv-unqualified version is <code>T2</code>, three sets of candidate functions, designated member candidates, non-member candidates and built-in candidates, are constructed as follows:</p>\n<ul>\n<li><p id=\"so_14115516_14115575_1\">If <code>T1</code> is a complete class type, the set of member candidates is the result of the qualified lookup of <code>T1::operator@</code> (13.3.1.1.1); otherwise, the set of member candidates is empty.</p></li>\n<li><p id=\"so_14115516_14115575_2\">The set of non-member candidates is the result of the unqualified lookup of <code>operator@</code> in the context of the expression according to the usual rules for name lookup in unqualified function calls (3.4.2) except that all member functions are ignored. However, if no operand has a class type, only those non-member functions in the lookup set that have a first parameter of type <code>T1</code> or \u201creference to (possibly cv-qualified) <code>T1</code>\u201d, when <code>T1</code> is an enumeration type, or (if there is a right operand) a second parameter of type <code>T2</code> or \u201creference to (possibly cv-qualified) <code>T2</code>\u201d, when <code>T2</code> is an enumeration type, are candidate functions.</p></li>\n<li><p id=\"so_14115516_14115575_3\">For the <code>operator ,</code>, the unary <code>operator &amp;</code>, or the <code>operator -&gt;</code>, the built-in candidates set is empty. For all other operators, the built-in candidates include all of the candidate operator functions defined in 13.6 that, compared to the given operator,</p>\n<ul>\n<li>have the same operator name, and</li>\n<li>accept the same number of operands, and</li>\n<li>accept operand types to which the given operand or operands can be converted according to 13.3.3.1, and</li>\n<li>do not have the same parameter-type-list as any non-template non-member candidate.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p><em>[over.match.oper]/6</em></p>\n<blockquote>\n<p id=\"so_14115516_14115575_4\">The set of candidate functions for overload resolution is the union of the member candidates, the non-member candidates, and the built-in candidates. The argument list contains all of the operands of the operator. The best function from the set of candidate functions is selected according to 13.3.2 and 13.3.3.</p>\n</blockquote>\n", "LastEditorUserId": "927034", "LastActivityDate": "2013-01-02T00:35:12.713", "Score": "4", "CreationDate": "2013-01-02T00:23:44.157", "ParentId": "14115516", "CommentCount": "2", "OwnerUserId": "927034", "LastEditDate": "2013-01-02T00:35:12.713"}});