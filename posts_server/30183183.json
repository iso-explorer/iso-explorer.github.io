post_cb({"30183263": {"Id": "30183263", "PostTypeId": "2", "Body": "<p>C++ does not allow the size of arrays to be specified at runtime. In your example of course it is specified at link time, but that is no help to the compiler.\nIf you are using a C++14 compiler however, and on certain other compilers (such as gcc) you can do this, but it is less portable than allocating the memory dynamically, and lest convenient than a std::vector&lt;&gt;.</p>\n<p>For reference: <a href=\"https://isocpp.org/wiki/faq/freestore-mgmt#dynamic-array-len\" rel=\"nofollow\">https://isocpp.org/wiki/faq/freestore-mgmt#dynamic-array-len</a></p>\n", "LastActivityDate": "2015-05-12T06:23:14.170", "CommentCount": "1", "CreationDate": "2015-05-12T06:23:14.170", "ParentId": "30183183", "Score": "1", "OwnerUserId": "2886894"}, "30183183": {"ViewCount": "735", "Body": "<p>I have a problem with an extern variable and an array declaration with it.\nHow to declare an array with global variable which located not in the declarable file.</p>\n<p><strong>file1.cpp</strong></p>\n<pre><code>const int size = 10;\n</code></pre>\n<hr>\n<p><strong>mainfile.cpp</strong></p>\n<pre><code>extern const int size;\n\nvoid main()\n{\n  int mas[size];\n}\n</code></pre>\n<hr>\n<pre><code>int mas[size];\n</code></pre>\n<p>This line has an issue.\nPlease any guess??</p>\n</hr></hr>", "AcceptedAnswerId": "30183556", "Title": "extern variable and array declare issue c++", "CreationDate": "2015-05-12T06:17:24.650", "Id": "30183183", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-05-12T06:44:27.190", "LastEditorUserId": "1994950", "LastActivityDate": "2015-05-12T07:11:59.360", "Score": "6", "OwnerUserId": "4859268", "Tags": "<c++><arrays><global-variables><const><extern>", "AnswerCount": "4"}, "30183556": {"Id": "30183556", "PostTypeId": "2", "Body": "<p>First of all constants have internal linkage. Thus these declarations</p>\n<pre><code>file1.cpp\nconst int size = 10;\n</code></pre>\n<p>and </p>\n<pre><code>mainfile.cpp\nextern const int size;\n</code></pre>\n<p>refer to different entities.</p>\n<p>The constant declared in file1.cpp is not visible outside its corresponding compilation unit.</p>\n<p>According to the C++ Standard (3.5 Program and linkage)</p>\n<blockquote>\n<p id=\"so_30183183_30183556_0\">3 A name having namespace scope (3.3.6) has internal linkage if it is\n  the name of</p>\n<p id=\"so_30183183_30183556_1\">\u2014 a non-volatile variable that is <strong>explicitly declared const or\n  constexpr</strong> and neither explicitly declared extern nor previously\n  declared to have external linkage; or</p>\n</blockquote>\n<p>In mainfile the value of size is not specified so the compiler will issue an error for statement</p>\n<pre><code>int mas[size];\n</code></pre>\n<p>becuase the size of an array shall be a compile-time constant expression.</p>\n<p>The simplest solution is to place the constant definition</p>\n<pre><code>const int size = 10;\n</code></pre>\n<p>in some common headet file that will be included in each translation unit where there is a reference to the constant.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-05-12T06:45:56.640", "Score": "2", "CreationDate": "2015-05-12T06:39:40.067", "ParentId": "30183183", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2015-05-12T06:45:56.640"}, "30183222": {"Id": "30183222", "PostTypeId": "2", "Body": "<p>You can't. An array size must be a constant expression; if it's a variable, then that variable must be <code>const</code> and initialised in the same translation unit, so that its value is available for use as a constant.</p>\n<p>If you want to share the value between multiple translation units, define it in a header and include that.</p>\n", "LastActivityDate": "2015-05-12T06:19:51.877", "CommentCount": "1", "CreationDate": "2015-05-12T06:19:51.877", "ParentId": "30183183", "Score": "6", "OwnerUserId": "204847"}, "bq_ids": {"n4140": {"so_30183183_30183556_0": {"length": 7, "quality": 0.875, "section_id": 7136}, "so_30183183_30183556_1": {"length": 16, "quality": 1.0, "section_id": 7136}}, "n3337": {"so_30183183_30183556_1": {"length": 15, "quality": 0.9375, "section_id": 6880}, "so_30183183_30183556_0": {"length": 7, "quality": 0.875, "section_id": 6880}}, "n4659": {"so_30183183_30183556_0": {"length": 7, "quality": 0.875, "section_id": 8637}, "so_30183183_30183556_1": {"length": 13, "quality": 0.8125, "section_id": 8637}}}, "30184136": {"Id": "30184136", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30183183_30184136_0\">int mas[size];</p>\n<p id=\"so_30183183_30184136_1\">This line has an issue. Please any guess??</p>\n</blockquote>\n<p>As other users pointed, the issue could be that you're trying to create a <a href=\"http://en.wikipedia.org/wiki/Variable-length_array\" rel=\"nofollow\">Variable Lenght Array</a> which is something not allowed in C++ (but almost enter in C++14 as <a href=\"https://isocpp.org/files/papers/n3532.html\" rel=\"nofollow\">Dynamic Arrays</a><sup>*</sup>).</p>\n<p>Some compilers accept VLA as an extension (no standard) so I'm guessing that you're using one that doesn't have this extension or have this extension disabled.</p>\n<p>Don't worry, you have workarrounds anyway...</p>\n<h3>#define (don't do that)</h3>\n<p>Assuming that the issue is the VLA, if we ensure the <code>size</code> as a compile-time value, the problem is solved so...</p>\n<pre><code>// file1.hpp &lt;-- This is now a HEADER not a CPP\n#define SIZE 10\n\n// mainfile.cpp\n#include \"file1.hpp\"\n\nvoid main()\n{\n    int mas[SIZE]; // accepted, equivalent to int mas[10].\n}\n</code></pre>\n<h3>constexpr</h3>\n<p>C++11 introduced the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf\" rel=\"nofollow\"><code>constexpr</code></a><sup>*</sup> keyword which can be used to achieve your goal</p>\n<pre><code>// file1.hpp &lt;-- This is now a HEADER not a CPP\nconstexpr int size() { return 10; }\n\n// mainfile.cpp\n#include \"file1.hpp\"\n\nvoid main()\n{\n    int mas[size()];\n}\n</code></pre>\n<h3>enum</h3>\n<p>Enumerations are compile-time constants, so you can use them this way:</p>\n<pre><code>// file1.hpp &lt;-- This is now a HEADER not a CPP\nenum constant { size = 10 };\n\n// mainfile.cpp\n#include \"file1.hpp\"\n\nvoid main()\n{\n    int mas[constant::size];\n}\n</code></pre>\n<hr>\n<p><sup>*</sup>If someone found a better link, please let me know.</p>\n</hr>", "LastActivityDate": "2015-05-12T07:11:59.360", "CommentCount": "1", "CreationDate": "2015-05-12T07:11:59.360", "ParentId": "30183183", "Score": "2", "OwnerUserId": "499359"}});