post_cb({"29346820": {"CommentCount": "0", "AcceptedAnswerId": "29365435", "PostTypeId": "1", "LastEditorUserId": "2508150", "CreationDate": "2015-03-30T12:55:17.523", "LastActivityDate": "2015-04-02T14:12:02.903", "LastEditDate": "2015-03-30T13:44:12.097", "ViewCount": "161", "FavoriteCount": "3", "Title": "Template non-type arguments for reference type and odr-used", "Id": "29346820", "Score": "14", "Body": "<p>Is the variable <code>v</code> in the sample code below <em>odr-used</em>?</p>\n<pre><code>extern void* v;\n\ntemplate&lt;void*&amp;&gt;\nvoid f() {}\n\nint main()\n{\n    f&lt;v&gt;();\n}\n</code></pre>\n<p>I found this pattern in Boost ML.</p>\n<p>cf. <a href=\"http://lists.boost.org/Archives/boost/2011/04/180082.php\" rel=\"noreferrer\">http://lists.boost.org/Archives/boost/2011/04/180082.php</a></p>\n<p>It says that the <code>boost::enabler</code> is never defined, but <strong>clang</strong> rejects it as a linkage error if <code>-g</code> option is provided.</p>\n<p>cf. <a href=\"http://melpon.org/wandbox/permlink/nF45k7un3rFb175z\" rel=\"noreferrer\">http://melpon.org/wandbox/permlink/nF45k7un3rFb175z</a></p>\n<p>The sample code above is reduced version of the Boost ML's code and <strong>clang</strong> rejects it too.</p>\n<p>cf. <a href=\"http://melpon.org/wandbox/permlink/ZwxaygXgUhbi1Cbr\" rel=\"noreferrer\">http://melpon.org/wandbox/permlink/ZwxaygXgUhbi1Cbr</a></p>\n<p>I think (but I am not sure) that template non-type arguments for reference type are <em>odr-used</em> even if they are not referred in their template body so the Boost ML's pattern is ill-formed.</p>\n<p>Is my understanding correct?</p>\n", "Tags": "<c++><boost><language-lawyer>", "OwnerUserId": "1873224", "AnswerCount": "2"}, "29352099": {"ParentId": "29346820", "CommentCount": "1", "Body": "<p>I believe <code>v</code> is <em>odr-used</em>. <code>f&lt;v&gt;</code> is a <em>template-id</em> (<strong>14.2</strong>) whose <em>template-argument</em> is an <em>id-expression</em> (<strong>5.1.1</strong>) - a form of expression. It's clearly not an unevaluated operand (it doesn't appear as an operand of <code>typeid</code>, <code>sizeof</code>, <code>noexcept</code> or <code>decltype</code>), so it's <em>potentially evaluated</em> per <strong>3.2/2</strong>:</p>\n<blockquote>\n<p id=\"so_29346820_29352099_0\"><strong>3.2/2</strong> An expression is <em>potentially evaluated</em> unless it is an unevaluated operand (Clause 5) or a subexpression thereof...</p>\n</blockquote>\n<p>At which point, we have</p>\n<blockquote>\n<p id=\"so_29346820_29352099_1\"><strong>3.2/3</strong> A variable <code>x</code> whose name appears as a potentially-evaluated expression <code>ex</code> is <em>odr-used</em> unless [a condition that doesn't appear to apply here as no lvalue-to-rvalue conversion is applied].</p>\n</blockquote>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "29352099", "Score": "7", "CreationDate": "2015-03-30T17:06:23.310", "LastActivityDate": "2015-03-30T17:06:23.310"}, "29365435": {"ParentId": "29346820", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>[basic.def.odr]/3:</p>\n<blockquote>\n<p id=\"so_29346820_29365435_0\">A variable <code>x</code> whose name appears as a potentially-evaluated expression\n  <code>ex</code> is <em>odr-used</em> by <code>ex</code> <strong>unless applying the lvalue-to-rvalue conversion\n  (4.1) to <code>x</code> yields a constant expression (5.19)</strong> [..]</p>\n</blockquote>\n<p>Unfortunately, applying the l-t-r conversion to <code>v</code> at this point would not yield a constant expression - [expr.const]/2:</p>\n<blockquote>\n<p id=\"so_29346820_29365435_1\">A <em>conditional-expression</em> <code>e</code> is a core constant expression unless\n  the evaluation of <code>e</code>, following the rules of the abstract machine\n  (1.9), would evaluate one of the following expressions:  [..] <br/></p>\n<p id=\"so_29346820_29365435_2\">\u2014 an\n  lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<ul>\n<li><p id=\"so_29346820_29365435_3\">a non-volatile glvalue of integral or enumeration type <strong>that refers to a non-volatile const object with   a preceding\n  initialization</strong>, initialized with a constant expression [..], or</p></li>\n<li><p id=\"so_29346820_29365435_4\">a non-volatile glvalue <strong>that refers to a non-volatile object defined with <code>constexpr</code></strong>, or that refers\n         to a non-mutable sub-object of such an object, or</p></li>\n<li>a non-volatile glvalue of literal type <strong>that refers to a non-volatile object whose lifetime began within the evaluation of <code>e</code></strong>;</li>\n</ul>\n</blockquote>\n<p>However, though the implementation suggested by Matt isn't correct, the idea certainly is. A simple way of using this approach is demonstrated in <a href=\"https://stackoverflow.com/a/28204207/3647361\">this answer</a>, using a helper template. In your case, try</p>\n<pre><code>template &lt;bool cond, int id=0&gt;\nusing distinct_enable_if =\n    typename std::enable_if&lt;cond, std::integral_constant&lt;int,id&gt;*&gt;::type;\n\nclass test\n{\npublic:\n  template&lt; class... T,\n            distinct_enable_if&lt;sizeof...(T) == 10&gt; = nullptr&gt; \n  test( T&amp;&amp;... ) {}\n\n  template&lt; class T,\n            distinct_enable_if&lt;std::is_arithmetic&lt;T&gt;{}&gt; = nullptr&gt;\n  operator T() const { return T{}; }\n\n  /* Note the additional template argument:\n     It ensures that the template parameter lists are not identical, \n     and the ODR isn't violated */\n  template&lt; class T,\n            distinct_enable_if&lt;std::is_pointer&lt;T&gt;{}, 1&gt; = nullptr&gt;\n  operator T() const { return T{}; }\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/95a352c06b1c1442\" rel=\"nofollow noreferrer\"><strong>Demo</strong></a>.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:24.813", "Id": "29365435", "Score": "2", "CreationDate": "2015-03-31T09:41:05.943", "LastActivityDate": "2015-04-02T14:12:02.903"}, "bq_ids": {"n4140": {"so_29346820_29365435_0": {"section_id": 7040, "quality": 0.8571428571428571, "length": 12}, "so_29346820_29352099_0": {"section_id": 7039, "quality": 0.7777777777777778, "length": 7}, "so_29346820_29365435_1": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}, "so_29346820_29352099_1": {"section_id": 7040, "quality": 0.5625, "length": 9}, "so_29346820_29365435_4": {"section_id": 6185, "quality": 1.0, "length": 12}, "so_29346820_29365435_3": {"section_id": 6185, "quality": 1.0, "length": 14}}, "n3337": {"so_29346820_29365435_0": {"section_id": 6785, "quality": 0.6428571428571429, "length": 9}, "so_29346820_29365435_3": {"section_id": 5946, "quality": 0.9285714285714286, "length": 13}, "so_29346820_29365435_4": {"section_id": 5946, "quality": 0.9166666666666666, "length": 11}, "so_29346820_29352099_0": {"section_id": 6785, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_29346820_29365435_0": {"section_id": 8537, "quality": 0.8571428571428571, "length": 12}, "so_29346820_29352099_0": {"section_id": 8536, "quality": 0.7777777777777778, "length": 7}, "so_29346820_29365435_1": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}, "so_29346820_29365435_3": {"section_id": 7687, "quality": 1.0, "length": 14}, "so_29346820_29365435_4": {"section_id": 7687, "quality": 1.0, "length": 12}, "so_29346820_29352099_1": {"section_id": 8537, "quality": 0.5625, "length": 9}}}});