post_cb({"bq_ids": {"n4140": {"so_43827514_43827979_0": {"length": 7, "quality": 1.0, "section_id": 252}}, "n3337": {"so_43827514_43827979_0": {"length": 7, "quality": 1.0, "section_id": 243}}, "n4659": {"so_43827514_43827979_0": {"length": 7, "quality": 1.0, "section_id": 259}}}, "43827514": {"ViewCount": "32", "Body": "<p>I have some toy codes as follow:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\ntemplate&lt;typename T&gt;\nclass MyClass{\n    T t;\n};\ntemplate class MyClass&lt;int&gt;;\nint main()\n{\n    //template class MyClass&lt;int&gt;;\n    return 0;\n}\n</code></pre>\n<p>and:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\ntemplate&lt;typename T&gt;\nclass MyClass{\n    T t;\n};\n//template class MyClass&lt;int&gt;;\nint main()\n{\n    template class MyClass&lt;int&gt;;\n    return 0;\n}\n</code></pre>\n<p><code>template class MyClass&lt;int&gt;;</code>inside the main() function didn't work.The error is error: expected primary-expression before 'template'\nBut the same statement outside the main() function works.Why this happen?</p>\n", "AcceptedAnswerId": "43827979", "Title": "explicit template instantiation in main function", "CreationDate": "2017-05-07T03:27:34.283", "Id": "43827514", "CommentCount": "3", "LastEditDate": "2017-05-07T03:35:11.300", "PostTypeId": "1", "LastEditorUserId": "7975002", "LastActivityDate": "2017-05-07T04:57:28.333", "Score": "1", "OwnerUserId": "7975002", "Tags": "<c++><templates>", "AnswerCount": "1"}, "43827979": {"Id": "43827979", "PostTypeId": "2", "Body": "<p>I'd think this statement in 14.7.2 [temp.explicit] paragraph 3 means that explicit template instantiations have to appear at namespace scope:</p>\n<blockquote>\n<p id=\"so_43827514_43827979_0\">... An explicit instantiation shall appear in an enclosing namespace of its template. ...</p>\n</blockquote>\n<p>The implication is that you cannot explicitly instantiated templates with function-locale types. Since the intention of explicit template instantiations is avoiding multiple instantiations of templates repeatedly used with a just a few types, e.g., instantiating the stream types, this restriction isn't constraining.</p>\n", "LastActivityDate": "2017-05-07T04:57:28.333", "CommentCount": "0", "CreationDate": "2017-05-07T04:57:28.333", "ParentId": "43827514", "Score": "1", "OwnerUserId": "1120273"}});