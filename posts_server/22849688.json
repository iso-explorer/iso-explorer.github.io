post_cb({"bq_ids": {"n4140": {"so_22849688_22849688_11": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_22849688_22849927_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 3304}, "so_22849688_22849688_8": {"length": 12, "quality": 0.9230769230769231, "section_id": 3286}, "so_22849688_22849688_10": {"length": 14, "quality": 1.0, "section_id": 3286}, "so_22849688_22849688_12": {"length": 12, "quality": 0.7058823529411765, "section_id": 3286}, "so_22849688_22849688_13": {"length": 12, "quality": 0.75, "section_id": 3287}, "so_22849688_22849688_1": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_22849688_22849688_6": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_22849688_22849688_5": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_22849688_22849688_9": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_22849688_22849688_3": {"length": 17, "quality": 1.0, "section_id": 3285}, "so_22849688_22849688_7": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_22849688_22849688_4": {"length": 15, "quality": 1.0, "section_id": 3285}, "so_22849688_22849688_14": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_22849688_22849688_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 6143}, "so_22849688_22849927_0": {"length": 6, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_22849688_22849688_11": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_22849688_22849927_0": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_22849688_22849927_1": {"length": 17, "quality": 0.7727272727272727, "section_id": 3174}, "so_22849688_22849688_8": {"length": 13, "quality": 1.0, "section_id": 3156}, "so_22849688_22849688_12": {"length": 16, "quality": 0.9411764705882353, "section_id": 3157}, "so_22849688_22849688_10": {"length": 14, "quality": 1.0, "section_id": 3156}, "so_22849688_22849688_1": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_6": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_5": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_9": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_22849688_22849688_3": {"length": 17, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_7": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_22849688_22849688_4": {"length": 15, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_14": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_22849688_22849688_2": {"length": 11, "quality": 1.0, "section_id": 3155}, "so_22849688_22849688_13": {"length": 16, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_22849688_22849927_0": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_22849688_22849927_1": {"length": 16, "quality": 0.7272727272727273, "section_id": 4070}, "so_22849688_22849688_8": {"length": 9, "quality": 0.6923076923076923, "section_id": 4049}, "so_22849688_22849688_12": {"length": 11, "quality": 0.6470588235294118, "section_id": 4049}, "so_22849688_22849688_13": {"length": 11, "quality": 0.6875, "section_id": 4049}, "so_22849688_22849688_1": {"length": 4, "quality": 0.8, "section_id": 653}, "so_22849688_22849688_6": {"length": 4, "quality": 1.0, "section_id": 4047}, "so_22849688_22849688_5": {"length": 5, "quality": 1.0, "section_id": 4047}, "so_22849688_22849688_9": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_22849688_22849688_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 4047}, "so_22849688_22849688_4": {"length": 15, "quality": 1.0, "section_id": 4047}, "so_22849688_22849688_14": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_22849688_22849688_10": {"length": 8, "quality": 0.5714285714285714, "section_id": 4048}}}, "22849927": {"Id": "22849927", "PostTypeId": "2", "Body": "<p>@dyp's comment that aggregate initialization occurs is correct, but leads to zero-initialization of the member.</p>\n<pre><code>Foo foo{ };\n</code></pre>\n<p>is list-initialization, so we start at 8.5.4.  8.5.4p3 says that (ordering from draft n3690, which matches C++11, and still in n3797)</p>\n<blockquote>\n<p id=\"so_22849688_22849927_0\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li><strong>If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</strong></li>\n<li>Otherwise, if the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is value-initialized.</li>\n<li>Otherwise, if <code>T</code> is a specialization of <code>std::initializer_list&lt;E&gt;</code>, a prvalue <code>initializer_list</code> object is constructed as described below and used to initialize the object according to the rules for initialization of an object from a class of the same type (8.5).</li>\n<li>Otherwise, if <code>T</code> is a class type, constructors are considered.  The applicable constructors are enumerated\n  and the best one is chosen through overload resolution (13.3, 13.3.1.7).  If a narrowing conversion (see\n  below) is required to convert any of the arguments, the program is ill-formed.</li>\n<li>Otherwise, if the initializer list has a single element of type <code>E</code> and either <code>T</code> is not a reference type or its referenced type is reference-related to <code>E</code>, the object or reference is initialized from that element; if a narrowing conversion (see below) is required to convert the element to <code>T</code>, the program is ill-formed.</li>\n<li>Otherwise, if <code>T</code> is a reference type, a prvalue temporary of the type referenced by <code>T</code> is copy-list-initialized or direct-list-initialized, depending on the kind of initialization for the reference, and the reference is bound to that temporary.</li>\n<li><strong>Otherwise, if the initializer list has no elements, the object is value-initialized.</strong></li>\n<li>Otherwise, the program is ill-formed.</li>\n</ul>\n</blockquote>\n<p>In the first case, we must visit 8.5.1 for aggregate initialization of the class.  p7:</p>\n<blockquote>\n<p id=\"so_22849688_22849927_1\">If there are fewer initializer-clauses in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from its brace-or-equal-initializer or, if there is no brace-or-equal-initializer, from an empty initializer list (8.5.4).</p>\n</blockquote>\n<p>So the <code>value</code> member gets list-initialized from an empty initializer list, which recurses into the above rule, reaching the penultimate case, that of value initialization.  And of course from the rules in the question, that is zero-initialization.</p>\n<hr>\n<p>dyp mentions that prior to n3485, which implemented <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1301\" rel=\"noreferrer\">CWG 1301</a>, the rule for default construction took precedence, and would try and fail to access the deleted default constructor.</p>\n</hr>", "LastEditorUserId": "103167", "LastActivityDate": "2014-04-03T22:13:25.783", "Score": "10", "CreationDate": "2014-04-03T22:06:56.743", "ParentId": "22849688", "CommentCount": "13", "OwnerUserId": "103167", "LastEditDate": "2014-04-03T22:13:25.783"}, "22849688": {"ViewCount": "649", "Body": "<p>I've defined a POD that I'm planning on using as an immutable data store. To accomplish this, I've qualified its members as <code>const</code>, and am expecting to value-initialize instances (and zero-initialize in some cases). Consider the following code:</p>\n<pre><code>struct Foo\n{\n    const int value;\n};\n\nint main()\n{\n    Foo foo{ };\n\n    return 0;\n}\n</code></pre>\n<p>When I try to zero-initialize this POD, I get a compiler error in Visual Studio (<a href=\"http://msdn.microsoft.com/en-us/library/yhh8tk4w.aspx\">C3852</a>) because of the <code>const</code> qualifier on <code>Foo::value</code>. If I remove the qualifier, the code compiles fine.</p>\n<p>The exact error message is:</p>\n<blockquote>\n<p id=\"so_22849688_22849688_0\">error C3852: 'Foo::value' having type 'const int': aggregate initialization could not initialize this member\n  const members cannot be default initialized unless their type has a user defined default constructor</p>\n</blockquote>\n<p>According to the standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">draft n3337</a>), \u00a78.5/5 (<strong>zero-initialization</strong>):</p>\n<blockquote>\n<p id=\"so_22849688_22849688_1\">To zero-initialize an object or reference of type T means:</p>\n<p id=\"so_22849688_22849688_2\">\u2014 if T is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression,\n  converted to T;</p>\n<p id=\"so_22849688_22849688_3\">\u2014 if T is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class\n  subobject is zero-initialized and padding is initialized to zero bits;</p>\n<p id=\"so_22849688_22849688_4\">\u2014 if T is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zeroinitialized\n  and padding is initialized to zero bits;</p>\n<p id=\"so_22849688_22849688_5\">\u2014 if T is an array type, each element is zero-initialized;</p>\n<p id=\"so_22849688_22849688_6\">\u2014 if T is a reference type, no initialization is performed.</p>\n</blockquote>\n<p>and \u00a78.5/6 (<strong>default-initialization</strong>):</p>\n<blockquote>\n<p id=\"so_22849688_22849688_7\">To default-initialize an object of type T means:</p>\n<p id=\"so_22849688_22849688_8\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_22849688_22849688_9\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_22849688_22849688_10\">\u2014 otherwise, no initialization is performed.\n  If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class\n  type with a user-provided default constructor.</p>\n</blockquote>\n<p>and \u00a78.5/7 (<strong>value-initialization</strong>):</p>\n<blockquote>\n<p id=\"so_22849688_22849688_11\">To value-initialize an object of type T means:</p>\n<p id=\"so_22849688_22849688_12\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the\n  default constructor for T is called (and the initialization is ill-formed if T has no accessible default\n  constructor);</p>\n<p id=\"so_22849688_22849688_13\">\u2014 if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is\n  called.</p>\n<p id=\"so_22849688_22849688_14\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_22849688_22849688_15\">\u2014 otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>My reading of the standard leads me to believe that my POD should be zero-initialized; not default-initialized. Am I misunderstanding the initialization process described in the standard?</p>\n<p><strong>EDIT:</strong> Considering the details provided in the accepted answer and related comments, this looks like a potential bug in the VS implementation (i.e., the implementation may be based on an outdated version of the standard). I've created a Microsoft Connect ticket to track this, which can be found here:</p>\n<p><a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/846222/c-compiler-uses-incorrect-initialization-scheme-for-certain-objects\">https://connect.microsoft.com/VisualStudio/feedback/details/846222/c-compiler-uses-incorrect-initialization-scheme-for-certain-objects</a></p>\n", "AcceptedAnswerId": "22849927", "Title": "Does the C++ standard allow zero-initialization of a POD object with const members?", "CreationDate": "2014-04-03T21:51:29.637", "Id": "22849688", "CommentCount": "16", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-04-04T03:23:59.813", "LastEditorUserId": "926713", "LastActivityDate": "2014-04-04T03:23:59.813", "Score": "12", "OwnerUserId": "926713", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}});