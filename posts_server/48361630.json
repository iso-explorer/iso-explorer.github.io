post_cb({"bq_ids": {"n4140": {"so_48361630_48361767_0": {"length": 9, "quality": 1.0, "section_id": 6007}}, "n3337": {"so_48361630_48361767_0": {"length": 9, "quality": 1.0, "section_id": 5775}}, "n4659": {"so_48361630_48361767_0": {"length": 9, "quality": 1.0, "section_id": 7506}}}, "48361630": {"ViewCount": "61", "Body": "<p>I have a <code>fstream &amp;</code> member in a class, on which I'm calling the <code>seekg</code> function in a const function of the class, and yet the code compiles. I checked, and the <code>seekg</code> is not declared <code>const</code> (nor should it be), so how is this happening?</p>\n<p>This is my code:</p>\n<pre><code>class Test {\n    fstream &amp;f;\npublic:\n    Test(fstream &amp;f_): f(f_) {}\n    int fid() const {\n        f.seekg(5);\n        return 0;\n    }\n};\n</code></pre>\n", "AcceptedAnswerId": "48361746", "Title": "C++ const correctness with reference members", "CreationDate": "2018-01-20T22:13:51.350", "Id": "48361630", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2018-01-20T22:33:06.187", "Score": "1", "OwnerUserId": "6075404", "Tags": "<c++><class><const>", "AnswerCount": "2"}, "48361767": {"Id": "48361767", "PostTypeId": "2", "Body": "<p>The rule is defined in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.ref\" rel=\"nofollow noreferrer\">[expr.ref]/4</a>:</p>\n<blockquote>\n<p id=\"so_48361630_48361767_0\">If E2 is declared to have type \u201creference to T\u201d, then E1.E2 is an lvalue; the type of E1.E2 is T. [...]</p>\n</blockquote>\n<p>In practice you should consider a reference to T, as a const pointer to T with automatic dereferencement. Internaly this is what are reference. And inside the standard, all rules that applies to reference (see [basic.life] for example) are those rules that would apply to a const pointer:</p>\n<pre><code>class Test {\n  fstream * const f;\npublic:\n  Test(fstream &amp;f_): f(&amp;f_) {}\n  int fid() const {\n    f-&gt;seekg(5);\n    return 0;\n  }\n};\n</code></pre>\n", "LastActivityDate": "2018-01-20T22:33:06.187", "Score": "0", "CreationDate": "2018-01-20T22:33:06.187", "ParentId": "48361630", "CommentCount": "0", "OwnerUserId": "5632316"}, "48361746": {"Id": "48361746", "PostTypeId": "2", "Body": "<p>It turns out the <code>const</code> does not apply to members that are pointers or references, as stated <a href=\"https://stackoverflow.com/a/6853421/3697870\">here</a>.</p>\n<p>The best explanation I've seen of this is <a href=\"https://stackoverflow.com/a/6852734/3697870\">here</a> where it states that inside <code>const</code> member functions, <code>this</code> is a <code>const T *</code>, where <code>T</code> is the class.</p>\n<p>In your example that means that all the <code>const</code> modifier on <code>fid()</code> does is to change <code>this</code> from a <code>Test *</code> to a <code>const Test *</code> inside the function. When you write <code>f.</code>, this is accessed as <code>this-&gt;f.</code> which is of type <code>fstream &amp; const</code>. The reference is const but what it refers to is not, so calling a function that modifies it causes no problems.</p>\n", "LastActivityDate": "2018-01-20T22:30:11.863", "Score": "1", "CreationDate": "2018-01-20T22:30:11.863", "ParentId": "48361630", "CommentCount": "0", "OwnerUserId": "3697870"}});