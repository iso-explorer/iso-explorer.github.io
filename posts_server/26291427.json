post_cb({"26291561": {"ParentId": "26291427", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is also <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> in C++, we can see this by going to the draft C++ standard section <code>7.1.6.1</code> <em>The cv-qualifiers</em> paragraph <em>4</em> which says:</p>\n<blockquote>\n<p id=\"so_26291427_26291561_0\">[...]any attempt to modify a const object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote>\n<p>Undefined behavior means the results are unpredictable which effectively means any result is possible even ones that at first glance defy intuition.</p>\n<p>A quick experiment with <a href=\"http://goo.gl/Nh7nru\" rel=\"nofollow\">godbolt</a> using <code>-O0</code> so there is no optimization going on shows the compiler is just using the literal value <code>15</code> for <code>a</code> instead of retrieving it from memory and printing that out:</p>\n<pre><code>movl    $15, %esi   #,\n</code></pre>\n<p>So the compiler is performing <a href=\"http://en.wikipedia.org/wiki/Constant_folding\" rel=\"nofollow\">constant folding</a> since it assumes that since <code>a</code> is constant it can just use the value <code>15</code> anywhere it sees <code>a</code>. Which is completely reasonable since you told it <code>a</code> was constant.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-10-10T13:36:11.657", "Id": "26291561", "Score": "5", "CreationDate": "2014-10-10T03:39:25.557", "LastActivityDate": "2014-10-10T13:36:11.657"}, "26291427": {"CommentCount": "3", "ViewCount": "73", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-10-10T03:19:54.290", "LastActivityDate": "2014-10-11T00:19:38.777", "Title": "mechanism for \"undefined-ness\" of modifying the value of a const", "AcceptedAnswerId": "26291561", "LastEditDate": "2014-10-11T00:19:38.777", "Id": "26291427", "Score": "1", "Body": "<p>I have read, it is undefined in some C standards (<em>perhaps 99</em>?) what happens when a const is modified.  But a student presented me with some code, which I modified.</p>\n<p>I cannot see anything special about the address of the constant variable <code>a</code>.  I verified that <code>&amp;a</code> and <code>b</code> are the same, so the compiler is not subtly pointing to some other location.\nYet when I assign <code>*b</code>, the <em>const</em> value does not change.</p>\n<p>I am not running with optimization.  When I compile with the <code>-g</code> flag to debug and step into the code, I get the results I expect (the memory location of the variable <code>a</code> changes). Yet the code presented below does not reflect the updated value of <code>a</code>.</p>\n<p>Is this that temps are now being placed in registers even in debug mode, with no optimization?</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(){\n    const int a = 15;\n    cout &lt;&lt; a &lt;&lt; '\\n';\n    int * b= (int*)&amp;a;\n    cout &lt;&lt; &amp;a &lt;&lt; \"\\n\";\n    cout &lt;&lt; b &lt;&lt; \"\\n\";\n    *b = 20;\n    cout &lt;&lt; *b &lt;&lt; '\\n';\n    cout &lt;&lt; a &lt;&lt; '\\n';\n\n    int x = a;\n    cout &lt;&lt; x &lt;&lt; '\\n';\n    x = *b;\n    cout &lt;&lt; x &lt;&lt; '\\n';\n    return 1;\n}\n</code></pre>\n", "Tags": "<c++><pointers><const><undefined-behavior><constantfolding>", "OwnerUserId": "233928", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26291427_26291561_0": {"section_id": 5433, "quality": 1.0, "length": 10}}, "n3337": {"so_26291427_26291561_0": {"section_id": 5228, "quality": 1.0, "length": 10}}, "n4659": {"so_26291427_26291561_0": {"section_id": 6861, "quality": 1.0, "length": 10}}}});