post_cb({"47511434": {"ParentId": "47511185", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I believe the extract actually covers that:</p>\n<blockquote>\n<p id=\"so_47511185_47511434_0\">If <code>e</code> satisfies the constraints of a core constant expression, but <strong><em>evaluation of e would evaluate an operation that has undefined behaviour</em></strong> as specified in <code>[library]</code> through <code>[thread]</code> of this document, it is unspecified whether <code>e</code> is a core constant expression.</p>\n</blockquote>\n<p>There is actually <em>no</em> undefined behaviour in the expression <code>\"\"[0]?\"\"[1]:'\\0'</code> because the only problematic bit <code>\"\"[1]</code> is never <em>actually</em> executed. In fact, the entire expression can simply be optimised to <code>'\\0'</code> without adverse effects.</p>\n<p>The <em>reason</em> it's not executed comes from the standard itself (e.g., <code>C++11 5.16 Conditional operator [expr.cond] /1</code>:</p>\n<blockquote>\n<p id=\"so_47511185_47511434_1\">Conditional expressions group right-to-left. The first expression is contextually converted to <code>bool</code> (Clause 4). It is evaluated and if it is true, the result of the conditional expression is the value of the second expression,\n  otherwise that of the third expression. <strong><em>Only one of the second and third expressions is evaluated.</em></strong></p>\n</blockquote>\n<p>Since <code>\"\"[0]</code> will always evaluate to false in the boolean context, the second sub-expression is never executed. It's really no conceptually different from the expression:</p>\n<pre><code>false ? (1/0) : 42\n</code></pre>\n<p>in that you'll never actually have to worry about the possibility of divide-by-zero.</p>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2017-11-28T01:26:47.493", "Id": "47511434", "Score": "6", "CreationDate": "2017-11-27T12:51:06.437", "LastActivityDate": "2017-11-28T01:26:47.493"}, "47511185": {"CommentCount": "3", "ViewCount": "132", "CreationDate": "2017-11-27T12:36:48.783", "LastActivityDate": "2017-11-28T01:26:47.493", "Title": "Is reading one-past-the-end pointer allowed in a constant expression when short-circuit disable its evaluation", "AcceptedAnswerId": "47511434", "PostTypeId": "1", "Id": "47511185", "Score": "4", "Body": "<p>Consider example:</p>\n<pre><code>template &lt;char&gt;\nstruct foo { };\n\nint main() {\n    foo&lt;\"\"[0]?\"\"[1]:'\\0'&gt;{};\n}\n</code></pre>\n<p>The code compiles in both <a href=\"https://wandbox.org/permlink/zHRugWUSE97P2Dxg\" rel=\"nofollow noreferrer\">[gcc]</a> and <a href=\"https://wandbox.org/permlink/dwej5McM6ZhYkc3d\" rel=\"nofollow noreferrer\">[clang]</a>, but should it really? I know the expression <code>\"\"[1]</code> doesn't need to be evaluated as it was short-circuited. But standard isn't very clear if the expression can actually qualify as a core constant expression. Relevant <a href=\"http://eel.is/c++draft/expr.const#2\" rel=\"nofollow noreferrer\">[expr.const]/2</a> and especially part:</p>\n<blockquote>\n<p id=\"so_47511185_47511185_0\">If e satisfies the constraints of a core constant expression, but\n  evaluation of e would evaluate an operation that has undefined\n  behavior as specified in [library] through [thread] of this document,\n  it is unspecified whether e is a core constant expression.</p>\n</blockquote>\n<p>raises my doubts...</p>\n", "Tags": "<c++><language-lawyer><short-circuiting><constant-expression>", "OwnerUserId": "4324224", "AnswerCount": "2"}, "47511585": {"ParentId": "47511185", "CommentCount": "2", "Body": "<p>To answer that, one would have to quote the start of this paragraph, which says:</p>\n<blockquote>\n<p id=\"so_47511185_47511585_0\">An expression e is a core constant expression unless the evaluation of\n  e, following the rules of the abstract machine, would evaluate one of\n  the following expressions:</p>\n</blockquote>\n<p>And since the rules of the abstract machine promise the evaluation of the out of bounds access won't happen (<a href=\"http://eel.is/c++draft/expr.cond#1\" rel=\"nofollow noreferrer\">[expr.cond]/1</a>):</p>\n<blockquote>\n<p id=\"so_47511185_47511585_1\">Conditional expressions group right-to-left. The first expression is\n  contextually converted to bool. It is evaluated and if it is true, the\n  result of the conditional expression is the value of the second\n  expression, otherwise that of the third expression. <strong>Only one of the\n  second and third expressions is evaluated</strong>.</p>\n</blockquote>\n<p>There's no undefined behavior, so it must be a core constant expression. Or at least, it's not the bullet you quoted which disqualifies it.</p>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "47511585", "Score": "3", "CreationDate": "2017-11-27T13:00:04.617", "LastActivityDate": "2017-11-27T13:00:04.617"}, "bq_ids": {"n4140": {"so_47511185_47511585_1": {"section_id": 6167, "quality": 0.9259259259259259, "length": 25}, "so_47511185_47511585_0": {"section_id": 6185, "quality": 0.8571428571428571, "length": 12}, "so_47511185_47511434_1": {"section_id": 6167, "quality": 0.9285714285714286, "length": 26}}, "n3337": {"so_47511185_47511585_1": {"section_id": 5928, "quality": 0.9259259259259259, "length": 25}, "so_47511185_47511434_1": {"section_id": 5928, "quality": 0.9285714285714286, "length": 26}}, "n4659": {"so_47511185_47511585_0": {"section_id": 7687, "quality": 0.8571428571428571, "length": 12}, "so_47511185_47511585_1": {"section_id": 7664, "quality": 0.9259259259259259, "length": 25}, "so_47511185_47511185_0": {"section_id": 7687, "quality": 0.8636363636363636, "length": 19}, "so_47511185_47511434_1": {"section_id": 7664, "quality": 0.9285714285714286, "length": 26}, "so_47511185_47511434_0": {"section_id": 7687, "quality": 0.8181818181818182, "length": 18}}}});