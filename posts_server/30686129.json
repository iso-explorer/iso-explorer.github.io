post_cb({"bq_ids": {"n4140": {"so_30686129_30686175_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 433}}, "n3337": {"so_30686129_30686175_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 425}}, "n4659": {"so_30686129_30686175_0": {"length": 18, "quality": 1.0, "section_id": 451}}}, "30686175": {"Id": "30686175", "PostTypeId": "2", "Body": "<p>If you delegate to a constructor, that's the only thing you can do in the initializer list. From [class.base.init]/6:</p>\n<blockquote>\n<p id=\"so_30686129_30686175_0\">A <em>mem-initializer-list</em> can delegate to another constructor of the constructor\u2019s class using any <em>class-or-decltype</em>\n  that denotes the constructor\u2019s class itself. If a <em>mem-initializer-id</em> designates the constructor\u2019s class, <strong>it shall be the only <em>mem-initializer</em></strong>;</p>\n</blockquote>\n<p>So this is illegal:</p>\n<pre><code>Foo::Foo(bool someVar, int someOtherVar, int fooBar) \n    : Foo(someOtherVar, fooBar)\n    , Foo(someVar) //&lt;== second mem-initializer is not allowed\n{}\n</code></pre>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-06T18:25:12.850", "Score": "3", "CreationDate": "2015-06-06T18:23:23.293", "ParentId": "30686129", "CommentCount": "1", "LastEditDate": "2015-06-06T18:25:12.850", "OwnerUserId": "2069064"}, "30686178": {"Id": "30686178", "PostTypeId": "2", "Body": "<p>You cannot call two contructors of the same class that way. Write one constructor that does all your initialization and then two others that call the one and pass some arguments and some default values.</p>\n", "LastActivityDate": "2015-06-06T18:23:40.120", "Score": "1", "CreationDate": "2015-06-06T18:23:40.120", "ParentId": "30686129", "CommentCount": "0", "OwnerUserId": "2060725"}, "30686129": {"ViewCount": "78", "Body": "<p>I'm trying to make two smaller constructors that can be called on their own, then make one larger constructor which allows you to do everything at once by simply calling the two other constructors.</p>\n<p>Example of my code:</p>\n<pre><code>Foo::Foo(bool someVar, int someOtherVar, int fooBar) : Foo(someOtherVar, fooBar), Foo(someVar) {}\n\nFoo::Foo(bool someVar) { this-&gt;_someVar = someVar; }\n\nFoo::Foo(int someOtherVar, int fooBar) { this-&gt;_someOtherVar = someOtherVar + fooBar; }\n</code></pre>\n<p>From which I am getting </p>\n<pre><code>In constructor 'Foo::Foo(bool, int, int)': error: mem-initializer for 'class Foo::Foo' follows constructor delegation Foo(someOtherVar, fooBar), Foo(someVar) { }\n</code></pre>\n<p>What is the problem?</p>\n", "AcceptedAnswerId": "30686175", "Title": "Multiple constructor inheritance", "CreationDate": "2015-06-06T18:18:33.230", "Id": "30686129", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-06-06T18:25:12.850", "Score": "0", "OwnerUserId": "1763295", "Tags": "<c++><inheritance><constructor>", "AnswerCount": "2"}});