post_cb({"34901154": {"CommentCount": "3", "CreationDate": "2016-01-20T13:17:59.433", "PostTypeId": "1", "AcceptedAnswerId": "34902396", "LastEditorUserId": "3647361", "LastActivityDate": "2016-01-21T22:45:44.363", "LastEditDate": "2016-01-21T22:45:44.363", "ViewCount": "513", "FavoriteCount": "5", "Title": "dynamic_cast and rvalue reference", "Id": "34901154", "Score": "14", "Body": "<pre><code>class A{\npublic:\n    virtual ~A() {};\n};\n\nclass B : public A{ };\n\nint main(){\n\n    A&amp;&amp; p = B();\n\n    dynamic_cast&lt;B&amp;&amp;&gt;(std::move(p));\n\n}\n</code></pre>\n<p>Throws the error (g++ 5.2.0):</p>\n<pre><code>error: conversion to non-const reference type 'std::remove_reference&lt;A&amp;&gt;::type&amp; {aka class A&amp;}' from rvalue of type 'A' [-fpermissive]\n</code></pre>\n<p>It attempts to cast <code>std::move(p)</code> to type <code>A&amp;</code>, but I cannot figure out why. I would've thought it necessary to cast <code>p</code> as an rvalue before converting to an rvalue reference, but if I remove <code>std::move</code> it compiles fine. From <a href=\"http://en.cppreference.com/w/cpp/language/dynamic_cast\">cppreference</a>:</p>\n<blockquote>\n<p id=\"so_34901154_34901154_0\"><code>dynamic_cast &lt; new_type &gt; ( expression )</code> </p>\n<p id=\"so_34901154_34901154_1\">Similar to other cast expressions, the result is:</p>\n<p id=\"so_34901154_34901154_2\">an lvalue if new_type is an lvalue reference type (expression must be an lvalue)</p>\n<p id=\"so_34901154_34901154_3\">an xvalue if new_type is an rvalue reference type (<strong>expression may be lvalue or rvalue</strong>)</p>\n</blockquote>\n<p>Even 5.2.7 of N3337:</p>\n<blockquote>\n<p id=\"so_34901154_34901154_4\"><code>dynamic_cast&lt;T&gt;(v)</code></p>\n<p id=\"so_34901154_34901154_5\">If T is a pointer type, v shall be a prvalue of a pointer to complete class type, and the result is a prvalue of type T. If T is an lvalue reference type, v shall be an lvalue of a complete class type, and the result is an lvalue of the type referred to by T. <strong>If T is an rvalue reference type, v shall be an expression having a complete class type, and the result is an xvalue of the type referred to by T</strong>.</p>\n</blockquote>\n<p>The only requirement there being that I use a complete class type, which <code>std::move(p)</code> is, isn't it? </p>\n", "Tags": "<c++><c++11><language-lawyer><dynamic-cast><rvalue>", "OwnerUserId": "5627734", "AnswerCount": "2"}, "34901289": {"ParentId": "34901154", "CommentCount": "0", "Body": "<p>This seems to work instead:</p>\n<pre><code>B&amp;&amp; b = std::move(dynamic_cast&lt;B&amp;&gt;(p));\n</code></pre>\n<p>Can't tell you why yours is incorrect.</p>\n", "OwnerUserId": "2805305", "PostTypeId": "2", "Id": "34901289", "Score": "2", "CreationDate": "2016-01-20T13:23:37.597", "LastActivityDate": "2016-01-20T13:23:37.597"}, "34902396": {"ParentId": "34901154", "CommentCount": "0", "Body": "<p>Your code is, of course, fine:</p>\n<blockquote>\n<p id=\"so_34901154_34902396_0\">If <code>T</code> is an rvalue reference type, <code>v</code> shall be an expression having a\n  complete class type, and the result is an xvalue of the type referred\n  to by <code>T</code>.</p>\n</blockquote>\n<p>Presumably, <code>dynamic_cast</code> wasn't updated properly when rvalue references were introduced, and still enforces the pre-C++11 rule that rvalues shall only be bound to <code>const</code> lvalue references (note that it doesn't even work when altering the target type to <code>B const&amp;&amp;</code>, despite that being implied by the error message!). </p>\n<p>Filed as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69390\" rel=\"noreferrer\">#<strong>69390</strong></a>.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "34902396", "Score": "6", "CreationDate": "2016-01-20T14:14:17.777", "LastActivityDate": "2016-01-20T14:14:17.777"}, "bq_ids": {"n4140": {"so_34901154_34901154_2": {"section_id": 3321, "quality": 0.75, "length": 6}, "so_34901154_34902396_0": {"section_id": 6012, "quality": 1.0, "length": 12}, "so_34901154_34901154_5": {"section_id": 6012, "quality": 1.0, "length": 33}, "so_34901154_34901154_3": {"section_id": 3321, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_34901154_34901154_2": {"section_id": 3191, "quality": 0.75, "length": 6}, "so_34901154_34902396_0": {"section_id": 5780, "quality": 1.0, "length": 12}, "so_34901154_34901154_5": {"section_id": 5780, "quality": 1.0, "length": 33}, "so_34901154_34901154_3": {"section_id": 3191, "quality": 0.6666666666666666, "length": 6}}, "n4659": {"so_34901154_34901154_2": {"section_id": 4087, "quality": 0.75, "length": 6}, "so_34901154_34902396_0": {"section_id": 7511, "quality": 0.8333333333333334, "length": 10}, "so_34901154_34901154_5": {"section_id": 7511, "quality": 0.9696969696969697, "length": 32}, "so_34901154_34901154_3": {"section_id": 7424, "quality": 0.6666666666666666, "length": 6}}}});