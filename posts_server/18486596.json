post_cb({"18486678": {"Id": "18486678", "PostTypeId": "2", "Body": "<p>Objects allocated with <code>new</code> stay on the heap until they are deallocated with <code>delete</code>. If you don't delete them, they will remain there (but won't be accessible -&gt; this is called memory leak) until your process exits, when the operating system will deallocate them.</p>\n", "LastActivityDate": "2013-08-28T11:32:01.483", "CommentCount": "0", "CreationDate": "2013-08-28T11:32:01.483", "ParentId": "18486596", "Score": "0", "OwnerUserId": "600135"}, "18486648": {"Id": "18486648", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18486596_18486648_0\">So if i remove delete[] wp; the program still works ok. So what\n  happens if i remove that line of code?</p>\n</blockquote>\n<p>You have introduced a <a href=\"http://en.wikipedia.org/wiki/Memory_leak\" rel=\"nofollow\">memory leak</a>. Each time this operator is invoked the process will waste some portion of its address space until it ultimately runs out of memory.</p>\n<blockquote>\n<p id=\"so_18486596_18486648_1\">And also <code>wp=tmp</code>, what does that mean, is wp only a new name for that\n  dynamically so it would suit the name in the class, but the location\n  in memory is still the same? Or?</p>\n</blockquote>\n<p><code>wp</code> is presumably a member (an instance variable) of <code>WebServer</code> that holds instances of the <code>WebPage</code> objects it serves. So that line is replacing the previous array of web pages with a new value (that includes the web pages just added to the server).</p>\n<p>Presumably there are other member functions of <code>WebServer</code> that read the values inside <code>wp</code> and do things with them.</p>\n<p>As a general note, you should be aware that this code is extremely badly written because it is not even remotely exception safe, it's doing work that could be avoided with a reasonably smarter implementation and most of all it is using homebrew code instead of standard language facilities like <code>std::vector</code>.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2013-08-28T11:41:00.717", "Score": "4", "CreationDate": "2013-08-28T11:30:53.080", "ParentId": "18486596", "CommentCount": "5", "OwnerUserId": "50079", "LastEditDate": "2013-08-28T11:41:00.717"}, "18486785": {"Id": "18486785", "PostTypeId": "2", "Body": "<p>Not calling delete means that <code>free</code> doesn't get called and the destructor doesn't get called.  The implications of not calling <code>free</code> on the allocated memory is a memory leak -- your program no longer can use that memory.  If this persists, over time your program could very well crash because it's run out of memory,  The implications of not calling the dtor means any other resource (more memory, db connections, <em>etc</em>) your array uses are also lost.</p>\n", "LastActivityDate": "2013-08-28T11:37:01.770", "CommentCount": "1", "CreationDate": "2013-08-28T11:37:01.770", "ParentId": "18486596", "Score": "2", "OwnerUserId": "1312406"}, "18486847": {"Id": "18486847", "PostTypeId": "2", "Body": "<p>If you don't delete something, you have a memory leak. Memory leaks are in the \"It keeps working for quite some time, but then fails\" category of broken code. It makes them hard to deal with, because the problem happens a long time after the original error, and it's often hard to identify where/how the memory got leaked, and the application fails at some \"random\" place when there is no more memory available. </p>\n<p>It is also bad for OTHER applications when an application leaks memory, because there will be less memory available to other applications. </p>\n<p>Depending on the scale of the leak, it may end up being one of those things that causes your application to get poor reputation for reliabilty (\"It crashes after two days\") or it may end up being a killer for your app (\"Doesn't work when I tried a little more complex use-case\"). Or it may just be that after two years of continous use, the application has grown its memory usage for 64MB to 72MB, because the leak is so tiny you don't really notice, in the whole scheme of things. </p>\n<p>But having a memory leak is never a good thing, and in many cases a really bad thing.</p>\n", "LastEditorUserId": "1919155", "LastActivityDate": "2013-08-28T11:45:59.950", "Score": "2", "CreationDate": "2013-08-28T11:39:33.673", "ParentId": "18486596", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2013-08-28T11:45:59.950"}, "18507739": {"Id": "18507739", "PostTypeId": "2", "Body": "<p>It may be a bad code, but i don't know to use strings and vectors(idk for what reason they didn't taught us), but i still don't quite understand. Is it that the, fist with <code>WebPage * tmp = new WebPage [ count + 1];</code> we occupy new space, then we transfer the data, then we delete wp. So what does <code>wp = tmp;</code> do. Does it only give the name wp to the space occupied by tmp so that it would correspond to the name in the class, but the addresses of those objects are the same with those that tmp used, but different with those that wp before being deleted used?<img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/BoHxS.png\">\nSomething like:</img></p>\n", "LastActivityDate": "2013-08-29T09:55:51.977", "CommentCount": "0", "CreationDate": "2013-08-29T09:55:51.977", "ParentId": "18486596", "Score": "0", "OwnerUserId": "2449277"}, "bq_ids": {"n4140": {"so_18486596_18486654_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 7192}}, "n3337": {"so_18486596_18486654_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 6936}}, "n4659": {"so_18486596_18486654_0": {"length": 47, "quality": 0.9215686274509803, "section_id": 8701}}}, "18486596": {"ViewCount": "6214", "Body": "<p>This code is not written bt me!\nIn the class WebServer we overload +=operator. The class uses dynamically allocated array of objects of type WebPage(another class, composition) defined as WebPage *wp;</p>\n<pre><code>WebServer &amp; operator +=( WebPage webPage ) {\nWebPage * tmp = new WebPage [ count + 1];\nfor (int i = 0; i &lt; count ; i ++)\ntmp [i] = wp[i];\ntmp [ count ++] = webPage ;\ndelete [] wp;\nwp = tmp;\nreturn * this ;\n}\n</code></pre>\n<p>So we create a new array of dynamically allocated WebPages with extra space for one object, then we assign them the values that wp held, and then the object that we wanted to add to the array. So if i remove <code>delete[] wp;</code> the program still works ok. So what happens if i remove that line of code? And also wp=tmp, what does that mean, is wp only a new name for that dynamically so it would suit the name in the class, but the location in memory is still the same? Or?</p>\n", "AcceptedAnswerId": "18486648", "Title": "What happens if i don't free/delete dynamically allocated arrays?", "CreationDate": "2013-08-28T11:28:19.237", "Id": "18486596", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-08-29T09:55:51.977", "Score": "2", "OwnerUserId": "2449277", "Tags": "<c++><class><object><dynamic-allocation>", "AnswerCount": "6"}, "18486654": {"Id": "18486654", "PostTypeId": "2", "Body": "<p><strike>Either you get:</strike></p>\n<ul>\n<li>Just a memory leak or</li>\n<li>A memory leak with undefined behavior depending on whether the destructor of your class has code with side effects.</li></ul>\n<p>In this case it just causes a memory leak. However, depending on whether the same unallocated memory gets reused for other objects you might end up with a Undefined behavior.</p>\n<p><strong>C++11 Standard: [basic.life] (3.8 Object lifetime), Para 4:</strong></p>\n<blockquote>\n<p id=\"so_18486596_18486654_0\">A program may end the lifetime of any object by reusing the storage which the object occupies or by explicitly calling the destructor for an object of a class type with a non-trivial destructor. For an object of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly before the storage which the object occupies is reused or released; however, <strong>if there is no explicit call to the destructor or if a delete-expression (5.3.5) is not used to release the storage, the destructor shall not be implicitly called and any program that depends on the side e\ufb00ects produced by the destructor has unde\ufb01ned behavior.</strong></p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2013-08-28T11:48:34.393", "Score": "5", "CreationDate": "2013-08-28T11:31:07.013", "ParentId": "18486596", "CommentCount": "8", "OwnerUserId": "452307", "LastEditDate": "2013-08-28T11:48:34.393"}});