post_cb({"bq_ids": {"n4140": {"so_25308761_25308909_4": {"length": 6, "quality": 1.0, "section_id": 7239}, "so_25308761_25308909_9": {"length": 4, "quality": 1.0, "section_id": 45}, "so_25308761_25308881_10": {"length": 22, "quality": 1.0, "section_id": 7239}, "so_25308761_25308909_7": {"length": 22, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_11": {"length": 9, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_0": {"length": 6, "quality": 1.0, "section_id": 7215}, "so_25308761_25308909_11": {"length": 19, "quality": 0.9047619047619048, "section_id": 7215}, "so_25308761_25308909_3": {"length": 5, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_9": {"length": 10, "quality": 1.0, "section_id": 7239}, "so_25308761_25308909_6": {"length": 10, "quality": 1.0, "section_id": 7239}, "so_25308761_25308909_10": {"length": 6, "quality": 1.0, "section_id": 7215}, "so_25308761_25308909_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 7239}, "so_25308761_25308909_5": {"length": 8, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_4": {"length": 14, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_7": {"length": 6, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_12": {"length": 4, "quality": 1.0, "section_id": 45}, "so_25308761_25308909_8": {"length": 9, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_6": {"length": 5, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_8": {"length": 8, "quality": 1.0, "section_id": 7239}, "so_25308761_25308881_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 7215}}, "n3337": {"so_25308761_25308909_9": {"length": 4, "quality": 1.0, "section_id": 42}, "so_25308761_25308881_4": {"length": 14, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_7": {"length": 22, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_11": {"length": 9, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_10": {"length": 6, "quality": 1.0, "section_id": 6959}, "so_25308761_25308909_11": {"length": 19, "quality": 0.9047619047619048, "section_id": 6959}, "so_25308761_25308909_3": {"length": 5, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_9": {"length": 10, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_6": {"length": 10, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_4": {"length": 6, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6983}, "so_25308761_25308909_5": {"length": 8, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_12": {"length": 4, "quality": 1.0, "section_id": 42}, "so_25308761_25308881_0": {"length": 6, "quality": 1.0, "section_id": 6959}, "so_25308761_25308881_7": {"length": 6, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_10": {"length": 22, "quality": 1.0, "section_id": 6983}, "so_25308761_25308909_8": {"length": 9, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_6": {"length": 5, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_8": {"length": 8, "quality": 1.0, "section_id": 6983}, "so_25308761_25308881_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 6959}}, "n4659": {"so_25308761_25308909_9": {"length": 4, "quality": 1.0, "section_id": 46}, "so_25308761_25308881_10": {"length": 22, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_7": {"length": 22, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_11": {"length": 9, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_10": {"length": 6, "quality": 1.0, "section_id": 8724}, "so_25308761_25308909_11": {"length": 19, "quality": 0.9047619047619048, "section_id": 8724}, "so_25308761_25308909_3": {"length": 5, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_9": {"length": 10, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_6": {"length": 10, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_4": {"length": 6, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 8748}, "so_25308761_25308881_4": {"length": 14, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_12": {"length": 4, "quality": 1.0, "section_id": 46}, "so_25308761_25308881_0": {"length": 6, "quality": 1.0, "section_id": 8724}, "so_25308761_25308881_7": {"length": 6, "quality": 1.0, "section_id": 8748}, "so_25308761_25308909_8": {"length": 9, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_6": {"length": 5, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_8": {"length": 8, "quality": 1.0, "section_id": 8748}, "so_25308761_25308881_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 8724}, "so_25308761_25308909_5": {"length": 8, "quality": 1.0, "section_id": 8748}}}, "25308761": {"ViewCount": "367", "Body": "<p>Consider the following code. Is it ok or does it lead to undefined behaviour?</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    {\n        unsigned char binary[] = {0, 5, 10};\n        bool* x = reinterpret_cast&lt;bool*&gt;(&amp;binary[0]);\n\n        for (unsigned int i = 0; i &lt; 3; ++i)\n        {\n            std::cout &lt;&lt; (x[i] ? 1 : 0) &lt;&lt; \" \";\n        }\n    }\n\n    {\n        unsigned char b = 255;\n        bool* x = reinterpret_cast&lt;bool*&gt;(&amp;b);\n        std::cout &lt;&lt; (*x ? 1 : 0) &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Output when compiled with gcc 4.6 to 4.8 is</p>\n<p><code>0 5 10 1</code></p>\n<p>but only with optimization (<code>-O1</code> and more).\nClang results in</p>\n<p><code>0 1 1 1</code></p>\n<p>even with optimization.\nNow if change <code>y[i] ? 1 : 0</code> to <code>y[i] ? 2 : 1</code> gcc results is</p>\n<p><code>1 2 2 1</code>.</p>\n<p>Any ideas or is it simply undefined behaviour because of the cast?</p>\n", "AcceptedAnswerId": "25308881", "Title": "Interpreting unsigned char array as bool array", "CreationDate": "2014-08-14T13:05:08.610", "Id": "25308761", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-14T13:08:06.720", "LastEditorUserId": "89036", "LastActivityDate": "2014-08-14T13:33:49.727", "Score": "1", "OwnerUserId": "405559", "Tags": "<c++><gcc><casting><boolean>", "AnswerCount": "2"}, "25308881": {"Id": "25308881", "PostTypeId": "2", "Body": "<p>The standard does not guarantee that <code>bool</code> is at all compatible with <code>char</code> (i.e. it does not guarantee that they have the same size or alignment), saying:</p>\n<blockquote>\n<p id=\"so_25308761_25308881_0\">Values of type <code>bool</code> are either <code>true</code> or <code>false</code>.</p>\n<p id=\"so_25308761_25308881_1\">\u00a73.9.1 [basic.fundamental]</p>\n</blockquote>\n<p>It also says:</p>\n<blockquote>\n<p id=\"so_25308761_25308881_2\">Using a <code>bool</code> value in ways described by this International Standard as \u201cundefined,\u201d such as by examining the value of an uninitialized automatic object, might cause it to behave as if it is neither <code>true</code> nor <code>false</code>.</p>\n<p id=\"so_25308761_25308881_3\">Footnote 47 (N3337)</p>\n</blockquote>\n<p>Therefore you are in the realm of undefined behaviour.</p>\n<p>Note that since the standard does not make an exception for <code>bool</code>, the following rules apply:</p>\n<blockquote>\n<p id=\"so_25308761_25308881_4\">If a program attempts to access the stored value of an object through a glvalue of other than one of the following types the behavior is undefined:</p>\n<p id=\"so_25308761_25308881_5\">\u2014 the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_6\">\u2014 a cv-qualified version of the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_7\">\u2014 a type similar (as defined in 4.4) to the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_8\">\u2014 a type that is the signed or unsigned type corresponding to the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_9\">\u2014 a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_10\">\u2014 an aggregate or union type that includes one of the aforementioned types among its elements or nonstatic data members (including, recursively, an element or non-static data member of a subaggregate or contained union),</p>\n<p id=\"so_25308761_25308881_11\">\u2014 a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</p>\n<p id=\"so_25308761_25308881_12\">\u2014 a char or unsigned char type.</p>\n<p id=\"so_25308761_25308881_13\">\u00a73.10 [basic.lval]</p>\n</blockquote>\n<p>The types of the objects in this case are <code>unsigned char</code>, therefore attempting to access them through a <code>bool</code> lvalue (which is what you obtain by dereferencing a <code>bool *</code>) leads to UB.</p>\n", "LastEditorUserId": "1007504", "LastActivityDate": "2014-08-14T13:32:22.843", "Score": "5", "CreationDate": "2014-08-14T13:11:10.147", "ParentId": "25308761", "CommentCount": "0", "OwnerUserId": "1007504", "LastEditDate": "2014-08-14T13:32:22.843"}, "25308909": {"Id": "25308909", "PostTypeId": "2", "Body": "<p>This violates the <a href=\"http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html\" rel=\"nofollow noreferrer\">strict aliasing rule</a>, I will quote my answer <a href=\"https://stackoverflow.com/a/20956250/1708801\">here</a>:</p>\n<blockquote>\n<p id=\"so_25308761_25308909_0\">the strict aliasing rules which makes it illegal to access an object\n  through a pointer of a different type, although access through a char\n  * is allowed. The compiler is allowed to assume that pointers of different types do not point to the same memory and optimize\n  accordingly. It also means the code invokes undefined behavior and\n  could really do anything.</p>\n</blockquote>\n<p>The draft standard covers this in section <code>3.10</code> <em>Lvalues and rvalues</em> paragraph <em>10</em>:</p>\n<blockquote>\n<p id=\"so_25308761_25308909_1\">If a program attempts to access the stored value of an object through\n  a glvalue of other than one of the following types the behavior is\n  undefined:<sup>52</sup></p>\n<p id=\"so_25308761_25308909_2\">\u2014  the dynamic type of the object,</p>\n<p id=\"so_25308761_25308909_3\">\u2014 a cv-qualified version of the dynamic type of the object,</p>\n<p id=\"so_25308761_25308909_4\">\u2014 a type similar (as defined in 4.4) to the dynamic type of the object,</p>\n<p id=\"so_25308761_25308909_5\">\u2014 a type that is the signed or unsigned type corresponding to the dynamic type of the object,</p>\n<p id=\"so_25308761_25308909_6\">\u2014 a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type\n  of the object,</p>\n<p id=\"so_25308761_25308909_7\">\u2014 an aggregate or union type that includes one of the aforementioned types among its elements or nonstatic\n  data members (including, recursively, an element or non-static data member of a subaggregate\n  or contained union),</p>\n<p id=\"so_25308761_25308909_8\">\u2014 a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</p>\n<p id=\"so_25308761_25308909_9\">\u2014 a char or unsigned char type.</p>\n</blockquote>\n<p>If this was not a problem it is not clear, that attempting to interpret a bool as a char is even valid, section <code>3.9.1</code> <em>Fundamental types</em> says:</p>\n<blockquote>\n<p id=\"so_25308761_25308909_10\">Values of type bool are either true or false.[...]</p>\n</blockquote>\n<p>where footnote <em>47</em> says:</p>\n<blockquote>\n<p id=\"so_25308761_25308909_11\">Using a bool value in ways described by this International Standard as \u201cundefined,\u201d such as by examining the value of an\n  uninitialized automatic object, might cause it to behave as if it is neither true nor false.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-08-14T13:33:49.727", "Score": "2", "CreationDate": "2014-08-14T13:12:35.747", "ParentId": "25308761", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:44:36.660"}});