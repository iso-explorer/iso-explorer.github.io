post_cb({"17845090": {"ParentId": "17845005", "CommentCount": "0", "Body": "<p>I think it's due to <code>integer promotion</code></p>\n<p>A good blog post on this concept: <a href=\"http://www.idryman.org/blog/2012/11/21/integer-promotion/\" rel=\"nofollow\">http://www.idryman.org/blog/2012/11/21/integer-promotion/</a></p>\n", "OwnerUserId": "1906361", "PostTypeId": "2", "Id": "17845090", "Score": "3", "CreationDate": "2013-07-24T21:25:43.667", "LastActivityDate": "2013-07-24T21:25:43.667"}, "17845069": {"ParentId": "17845005", "CommentCount": "1", "Body": "<p>A <code>char</code> is signed 8-bit. The <code>\"%x\\n\"</code> format says to print an integer. So the value of <code>byte</code> is sign extended to an integer. Since a <code>char</code> of <code>0xff</code> is, in that context, an 8-bit value of <code>-1</code>, <code>printf</code> is just printing the hex integer value of a <code>-1</code>, which is <code>ffffffff</code>.</p>\n", "OwnerUserId": "980550", "PostTypeId": "2", "Id": "17845069", "Score": "1", "CreationDate": "2013-07-24T21:24:14.467", "LastActivityDate": "2013-07-24T21:24:14.467"}, "17846612": {"ParentId": "17845005", "CommentCount": "0", "Body": "<p>You have invoked Undefined Behavior by passing the wrong argument type to <code>printf</code>. The <code>%x</code> specifier requires an argument of type <code>unsigned int</code>, but you passed (due to default promotions) a signed <code>int</code>. This is <em>arguably</em> valid if the value of the signed <code>int</code> argument is non-negative, but on your system, plain <code>char</code> happens to be a signed type, so <code>byte</code> contains the result of applying an implementation-defined conversion to <code>0xff</code>; the usual result of this conversion is -1.</p>\n", "OwnerUserId": "379897", "PostTypeId": "2", "Id": "17846612", "Score": "2", "CreationDate": "2013-07-24T23:35:15.720", "LastActivityDate": "2013-07-24T23:35:15.720"}, "17845005": {"CommentCount": "4", "ViewCount": "2022", "PostTypeId": "1", "LastEditorUserId": "1673391", "CreationDate": "2013-07-24T21:19:16.000", "LastActivityDate": "2013-07-25T21:00:27.490", "Title": "Why does printf pad an 8-bit char to 32-bits?", "AcceptedAnswerId": "17845106", "LastEditDate": "2013-07-24T21:37:09.033", "Id": "17845005", "Score": "5", "Body": "<pre><code>char byte = 0xff;\nprintf(\"%lu\\n\", sizeof(byte)) // Output is '1'\nprintf(\"%x\\n\", byte); // Output is 'ffffffff'\n</code></pre>\n<p>If the size of <code>byte</code> is only one byte, then why does <code>printf()</code> behave as if it is four bytes?</p>\n", "Tags": "<c++><c><types><printf>", "OwnerUserId": "446554", "AnswerCount": "4"}, "17845106": {"ParentId": "17845005", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Formally, your program exhibits undefined behavior: <code>%x</code> format specification expects an argument of type <code>unsigned int</code>, but you are passing an <code>int</code>, as explained below (hat tip @R). This is harmless in practice on modern two's-complement machines, since int and unsigned have compatible bit layouts. But again, technically, this is undefined behavior and it would be a good idea to fix it, as in <code>printf(\"%x\\n\", (unsigned)byte);</code>.</p>\n<p>The rules for passing parameters to variadic functions state that all integral types smaller than int get promoted to int. Otherwise, how would <code>printf</code> know, upon seeing <code>%x</code>, whether to grab one byte or four bytes off the stack? From the standard:</p>\n<blockquote>\n<p id=\"so_17845005_17845106_0\"><strong>5.2.2p7 :</strong><br>\n  When there is no parameter for a given argument, the argument is passed in such a way that the receiving function can obtain the value of the argument by invoking va_arg<code>(18.10)...</code> If the argument has integral or enumeration type that is subject to the integral promotions<code>(4.5),</code> or a floating point type that is subject to the floating point promotion<code>(4.6),</code> the value of the argument is converted to the promoted type before the call.</br></p>\n</blockquote>\n<p>This is how your <code>char</code> turns into an <code>int</code>. It's unspecified whether <code>char</code> is signed or unsigned, but apparently, on the platform you use it's a signed type. So it gets sign-extended when promoted to <code>int</code>. <code>0xff</code> is <code>(char)-1</code>, and <code>0xffffffff</code> is <code>(int)-1</code>.</p>\n", "OwnerUserId": "1670129", "LastEditorUserId": "1673391", "LastEditDate": "2013-07-25T21:00:27.490", "Id": "17845106", "Score": "14", "CreationDate": "2013-07-24T21:26:20.783", "LastActivityDate": "2013-07-25T21:00:27.490"}, "bq_ids": {"n4140": {"so_17845005_17845106_0": {"section_id": 5994, "quality": 0.8974358974358975, "length": 35}}, "n3337": {"so_17845005_17845106_0": {"section_id": 5762, "quality": 0.8974358974358975, "length": 35}}, "n4659": {"so_17845005_17845106_0": {"section_id": 7496, "quality": 0.7948717948717948, "length": 31}}}});