post_cb({"34506356": {"CommentCount": "0", "AcceptedAnswerId": "34506955", "CreationDate": "2015-12-29T07:21:33.633", "LastActivityDate": "2015-12-29T08:01:37.123", "PostTypeId": "1", "ViewCount": "502", "FavoriteCount": "1", "Title": "using typedef in template instantiation and extern template declaration", "Id": "34506356", "Score": "5", "Body": "<p>There are two cases where <code>typedef</code> confuses me when it comes to <code>extern template declaration</code> and <code>explicit template instantiation</code>.</p>\n<p>To illustrate the two see below 2 example code snippets.</p>\n<p>Consider following example <strong>(Case 1)</strong>:</p>\n<pre><code>// suppose following code in some cpp file    \ntemplate &lt;typename T&gt;\n    struct example\n{\n    T value;\n};\n\n// valid typedefs\ntypedef example&lt;int&gt; int_example;\ntypedef example&lt;std::string&gt; string_example;\n\n// explicit instantiation using above typedefs\ntemplate class int_example; // -&gt; compile time error\ntemplate class string_example; // -&gt; compile time error\n\n// instead we need to use type names\ntemplate class example&lt;int&gt;; // -&gt; OK\ntemplate class example&lt;std::string&gt;; // -&gt; OK\n\n// QUESTION 1: Why does this work however? is this valid code?\ntypedef std::string type_string;\ntemplate class example&lt;type_string&gt;;\n</code></pre>\n<p>Why does the <code>template class example&lt;type_string&gt;</code> work with typedef ? and why is it valid while <code>template class string_example</code> is not?</p>\n<p>Consider following example <strong>(Case 2)</strong>:</p>\n<pre><code>// suppose following code is in some header file\ntemplate &lt;typename T&gt;\nstruct example\n{\n    T value;\n};\n\n// valid typedefs\ntypedef std::string type_string;\ntypedef example&lt;type_string&gt; string_example;\n\n// Explicit instantiation declaration\n// QUESTION 2: Is this valid code? if not why not?\nextern template string_example; // -&gt; at least this compiles, but is it OK?\n</code></pre>\n<p>As questioned in the comment above, is it valid to use typedef in <code>extern template declaration</code>, like in the example above, and why does this compile unlike the <strong>Case1</strong> where it does not.</p>\n<p>I've read about similar cases but none gives the detailed answer to above 2 questions. detailed elaboration is very much appreciated!</p>\n", "Tags": "<c++><templates><c++11><typedef><extern>", "OwnerUserId": "1044776", "AnswerCount": "1"}, "34506955": {"ParentId": "34506356", "CommentCount": "3", "Body": "<pre><code>template class int_example;\n</code></pre>\n<p>is not legal. From the C++11 Stanard:</p>\n<blockquote>\n<p id=\"so_34506356_34506955_0\"><strong>14.7.2 Explicit instantiation</strong></p>\n<p id=\"so_34506356_34506955_1\">2 The syntax for explicit instantiation is:</p>\n<p id=\"so_34506356_34506955_2\"><em>explicit-instantiation:</em><br>\n<code>extern</code><sub>opt</sub> <code>template</code> <em>declaration</em></br></p>\n<p id=\"so_34506356_34506955_3\">There are two forms of explicit instantiation: an explicit instantiation definition and an explicit instantiation declaration. An explicit instantiation declaration begins with the <code>extern</code> keyword.</p>\n<p id=\"so_34506356_34506955_4\">3 If the explicit instantiation is for a class or member class, the <em>elaborated-type-specifier</em> in the <em>declaration</em> shall include a <em>simple-template-id.</em></p>\n</blockquote>\n<p><em>simple-template-id</em> is defined in Section <strong>A.12 Templates</strong> as:</p>\n<blockquote>\n<p id=\"so_34506356_34506955_5\"><em>simple-template-id:</em><br>\n<em>template-name</em> <code>&lt;</code> <em>template-argument-list</em><sub>opt</sub> <code>&gt;</code></br></p>\n</blockquote>\n<p><code>int_example</code> does not qualify as a <em>simple-template-id</em>.<br>\n<code>example&lt;int&gt;</code> does qualify as a <em>simple-template-id</em>.  </br></p>\n<p>However, by that logic, </p>\n<pre><code>extern template string_example;\n</code></pre>\n<p>is not legal either. I don't know how it works for you. I got the following error when I tried to compile such a line in g++ 4.9.3.</p>\n<pre class=\"lang-none prettyprint-override\"><code>socc.cc:15:31: error: expected unqualified-id before \u2018;\u2019 token\n extern template string_example; // -&gt; compile time error\n</code></pre>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "34506955", "Score": "2", "CreationDate": "2015-12-29T08:01:37.123", "LastActivityDate": "2015-12-29T08:01:37.123"}, "bq_ids": {"n4140": {"so_34506356_34506955_4": {"section_id": 252, "quality": 1.0, "length": 9}, "so_34506356_34506955_3": {"section_id": 251, "quality": 1.0, "length": 17}}, "n3337": {"so_34506356_34506955_4": {"section_id": 243, "quality": 1.0, "length": 9}, "so_34506356_34506955_3": {"section_id": 242, "quality": 1.0, "length": 17}}, "n4659": {"so_34506356_34506955_4": {"section_id": 259, "quality": 1.0, "length": 9}, "so_34506356_34506955_3": {"section_id": 258, "quality": 1.0, "length": 17}}}});