post_cb({"bq_ids": {"n4140": {"so_34882107_34883084_0": {"length": 24, "quality": 0.96, "section_id": 6064}}, "n3337": {"so_34882107_34883084_0": {"length": 24, "quality": 0.96, "section_id": 5832}}, "n4659": {"so_34882107_34883084_0": {"length": 23, "quality": 0.92, "section_id": 7560}}}, "34882365": {"Id": "34882365", "PostTypeId": "2", "Body": "<p>If <code>p</code> is of type <code>A*</code>, then <code>*p</code> is of type <code>A&amp;</code>.</p>\n<p>If <code>p</code> is of type <code>A*&amp;</code> (reference to a pointer), then <code>*p</code> is also of type <code>A&amp;</code>.</p>\n<p>If <code>x</code> is of <code>type list&lt;T&gt;::iterator</code>, then <code>*x</code> is of type <code>T&amp;</code>, and if <code>T==A*</code>, then <code>**x</code> is of type <code>A&amp;</code>.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-01-19T16:51:14.140", "Score": "2", "CreationDate": "2016-01-19T16:47:21.073", "ParentId": "34882107", "CommentCount": "5", "LastEditDate": "2016-01-19T16:51:14.140", "OwnerUserId": "5739035"}, "34883084": {"Id": "34883084", "PostTypeId": "2", "Body": "<p>In <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">section 5.3.1</a> you can find</p>\n<blockquote>\n<p id=\"so_34882107_34883084_0\">The unary <code>*</code> operator performs indirection: the expression to which it\n  is applied shall be a pointer to an object type, or a pointer to a\n  function type and the result is an <strong>lvalue</strong> referring to the object or\n  function to which the expression points. If the type of the expression\n  is \u201cpointer to <code>T</code>,\u201d the type of the result is \u201c<code>T</code>.\u201d</p>\n</blockquote>\n", "LastEditorUserId": "4850040", "LastActivityDate": "2016-01-22T12:28:12.813", "Score": "0", "CreationDate": "2016-01-19T17:19:56.753", "ParentId": "34882107", "CommentCount": "3", "LastEditDate": "2016-01-22T12:28:12.813", "OwnerUserId": "698679"}, "34882107": {"ViewCount": "166", "Body": "<p>During a test at university I faced this question regarding lists in the STL, C++ version 98:<br/></p>\n<blockquote>\n<p id=\"so_34882107_34882107_0\">Given these lines: <code>list&lt;A*&gt; l; l.push_back(new A);</code> what is the\n  return type of the call <code>**(l.begin())</code>?</p>\n</blockquote>\n<p>Among the available answers there was <code>A</code> and <code>A&amp;</code> (the others are not relevant).</p>\n<p>I supposed it to be <em>A</em>, but professor stated it's <em>A&amp;</em>.</p>\n<p>I learned that the dereference of an iterator returns a reference to the element of the list, so <code>*(l.begin())</code> should return an object whose type is <code>(A*)&amp;</code>.<br>\nThen another dereference like <code>**(l.begin())</code> should <em>\"go through\"</em> the reference given by the list container and even through the pointer to A and eventually return an object of <code>A</code> type.</br></p>\n<p>What is the correct interpretation? Please provide an explanation.</p>\n", "Title": "Return type of a bi-dereferenced iterator", "CreationDate": "2016-01-19T16:35:10.183", "LastActivityDate": "2016-01-22T12:28:12.813", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "34882107", "Score": "0", "OwnerUserId": "5810105", "Tags": "<c++><stl><c++98><listiterator>", "AnswerCount": "2"}});