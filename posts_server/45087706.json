post_cb({"45090042": {"ParentId": "45087706", "CommentCount": "2", "Body": "<p>As others have noted, the behavior is undefined: falling off the end of an <code>int</code> returning function without a <code>return</code> statement has undefined behavior. It could return <code>1</code>, or <code>2</code> or anything else... as a matter of fact, depending on how it is compiled, it does!</p>\n<p>Here is the assembly output for <code>gcc 7.1 -O2</code> 64-bit as produced by <a href=\"https://godbolt.org/g/HpbzcY\" rel=\"nofollow noreferrer\">Godbolt's fantastic compiler explorer</a>:</p>\n<pre><code>fun(int, int):\n        test    esi, esi\n        je      .L5\n        test    sil, 1\n        je      .L8\n        rep ret\n.L8:\n        sub     rsp, 8\n        mov     eax, esi\n        shr     eax, 31\n        add     esi, eax\n        sar     esi\n        add     edi, edi\n        call    fun(int, int)\n        add     rsp, 8\n        ret\n.L5:\n        mov     eax, esi\n        ret\n.LC0:\n        .string \"%d\"\nmain:\n        sub     rsp, 8\n        mov     esi, 3\n        mov     edi, 6\n        call    fun(int, int)\n        mov     esi, eax\n        mov     edi, OFFSET FLAT:.LC0\n        mov     eax, 0\n        call    printf\n        mov     eax, 0\n        add     rsp, 8\n        ret\n</code></pre>\n<p>The return value for function <code>fun</code> is stored into register <code>eax</code>. Careful analysis shows that when invoked as <code>fun(6, 3)</code>, <code>fun</code> actually does not modify <code>eax</code>. This register is not modified by <code>main()</code> prior to calling <code>fun(6, 3)</code>, so it must come from the C startup code. I suspect <code>eax</code> contains the value of the <code>argc</code> argument to <code>main()</code>, 1 plus the number of arguments passed on the command line.  You can try invoking your program with an argument and see if it outputs <code>2</code>, etc.</p>\n<p>Of course, this is only a guess as</p>\n<ul>\n<li>your compiler might generate code which outputs <code>1</code> for a different reason.</li>\n<li>the C startup code might set <code>eax</code> to <code>1</code> for another cause.</li>\n</ul>\n<p>Try different compilers and optimization settings on the godbolt online compiler and see what it generates. For example <code>clang -O2</code> compiles <code>fun()</code> to always return <code>0</code>.</p>\n", "OwnerUserId": "4593267", "PostTypeId": "2", "Id": "45090042", "Score": "2", "CreationDate": "2017-07-13T20:07:50.407", "LastActivityDate": "2017-07-13T20:07:50.407"}, "45087770": {"ParentId": "45087706", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_45087706_45087770_0\">the default return value is 0</p>\n</blockquote>\n<p>Only for <code>main</code>, which is special.</p>\n<p>For your other functions that have a non-<code>void</code> return type, you <em>must</em> return a value. Period.</p>\n<p>Failure to do so results in undefined behaviour, such as spontaneously inverting your underwear or cutting off your mum's hair. Or getting <code>1</code>.</p>\n<p>So:</p>\n<pre><code>int fun(int a, int b)\n{\n    if (b == 0)\n       return 0;\n\n    if (b % 2 != 0)\n       return 1;\n\n    return fun(a + a, b / 2);\n}\n\nint main()\n{\n    printf(\"%d\", fun(6,3));\n}\n</code></pre>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "45087770", "Score": "4", "CreationDate": "2017-07-13T17:49:39.823", "LastActivityDate": "2017-07-13T17:49:39.823"}, "45087775": {"ParentId": "45087706", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C++, falling off the end of a function that is supposed to return a value and not returning a value is undefined behavior.  You might get 0, you might get 1, or any other value that can be stored in the return type.</p>\n<p>The only time this is not true is with <code>main</code>.  There is a clause in the standard that mandates the <code>main</code> will have a implicit <code>return 0;</code> if there is not one.</p>\n", "OwnerUserId": "4342498", "LastEditorUserId": "918959", "LastEditDate": "2017-07-13T18:10:40.383", "Id": "45087775", "Score": "5", "CreationDate": "2017-07-13T17:49:47.993", "LastActivityDate": "2017-07-13T18:10:40.383"}, "45087946": {"ParentId": "45087706", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It is undefined behavior to not return a value from a function which is return type is not <code>void</code> (except <code>main</code> - <code>main</code> returns 0). Undefined behavior means anything can happen.</p>\n<p><strong>Why do you get 1?</strong> On x86, a function which returns <code>int</code>, returns the value of register <code>eax</code>. So, if you don't return a value in a function, the function will return whatever value of <code>eax</code> contain at exit.</p>\n<p>Here's a possible explanation: at <code>b%2</code>, compiler puts <code>b</code> into <code>eax</code>, and <code>and</code>s it with 1. The result of <code>and</code> can be <code>0</code> or <code>1</code>, <code>eax</code> will contain one of these values. If the result is <code>1</code>, then <code>fun</code> exits without a return. So, at exit, <code>eax</code> contains <code>1</code>. And that is the value which is returned from the function.</p>\n<p>Note: if you enable warnings, the compiler will warn you.</p>\n<p>Note 2: some compilers put runtime error here, as you expected (for example, clang does it).</p>\n<p>Note 3: some compilers emit compile errors for this (for example MSVC).</p>\n", "OwnerUserId": "8157187", "LastEditorUserId": "8157187", "LastEditDate": "2017-07-13T18:22:15.497", "Id": "45087946", "Score": "7", "CreationDate": "2017-07-13T17:59:21.700", "LastActivityDate": "2017-07-13T18:22:15.497"}, "45088068": {"ParentId": "45087706", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The C standard allows a function that is declared and defined to return a value, to end without a <code>return</code> statement. Calling such a function has well-defined behaviour:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint foo(void) {\n    printf(\"Hello world\");\n}\n\nint main(void) {\n    foo();\n}\n</code></pre>\n<p>However, in C <strong>using</strong> the return value from a function that didn't return a value via a <code>return</code> statement has undefined behaviour. This is explicitly mentioned in <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.9.1p12\" rel=\"nofollow noreferrer\">C11 6.9.1p12</a></p>\n<blockquote>\n<p id=\"so_45087706_45088068_0\">12 If the <code>}</code> that terminates a function is reached, and the value of the function call is used by the caller, the behavior is undefined. </p>\n</blockquote>\n<p>Thus in your example,</p>\n<pre><code>fun(6, 3);\n</code></pre>\n<p>is fine, as is the whole function definition, but using the return value as in  </p>\n<pre><code>printf(\"%d\", fun(6, 3));\n</code></pre>\n<p>will summon the <a href=\"http://www.catb.org/jargon/html/N/nasal-demons.html\" rel=\"nofollow noreferrer\">nasal demons</a>.</p>\n<hr>\n<p>C++ is a different beast though, there omitting the return statement itself has undefined behaviour - but GCC seems to ignore it in this case - perhaps to allow the (questionable) compilation of C code with a C++ compiler.</p>\n</hr>", "OwnerUserId": "918959", "LastEditorUserId": "918959", "LastEditDate": "2017-07-13T18:15:16.360", "Id": "45088068", "Score": "1", "CreationDate": "2017-07-13T18:06:38.810", "LastActivityDate": "2017-07-13T18:15:16.360"}, "bq_ids": {"n4140": {"so_45087706_45088068_0": {"section_id": 7182, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_45087706_45088068_0": {"section_id": 6926, "quality": 0.6666666666666666, "length": 6}}, "n4659": {"so_45087706_45088068_0": {"section_id": 3923, "quality": 0.6666666666666666, "length": 6}}}, "45087706": {"CommentCount": "18", "ViewCount": "181", "PostTypeId": "1", "LastEditorUserId": "4593267", "CreationDate": "2017-07-13T17:46:14.323", "LastActivityDate": "2017-07-13T20:07:50.407", "Title": "default return value 1 in function with return type int?", "AcceptedAnswerId": "45087946", "LastEditDate": "2017-07-13T19:48:27.777", "Id": "45087706", "Score": "-4", "Body": "<p>In this particular code, I am not able to see how it is outputting <code>1</code>. The control reaches the end of the function returning <code>int</code> type without encountering a <code>return</code> statement, so shouldn't there be a runtime error.\nI tried passing some other values into the function, all print the same value <code>1</code> since <code>b</code> ends up to be an odd number before <code>0</code>.</p>\n<p>I tried searching for default return value of an <code>int</code> returning function, but couldn't get a satisfactory answer. Some say, the default return value is 0, so why 1 is the output here?</p>\n<pre><code>int fun(int a, int b) {\n    if (b == 0) {\n        return 0;\n    }\n    if (b % 2 == 0) {\n        return fun(a + a, b / 2);\n    }\n}\n\nint main() {\n    printf(\"%d\", fun(6, 3));\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "7472525", "AnswerCount": "5"}});