post_cb({"bq_ids": {"n4140": {"so_47273390_47274196_1": {"length": 18, "quality": 1.0, "section_id": 466}, "so_47273390_47274196_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 648}}, "n3337": {"so_47273390_47274196_1": {"length": 18, "quality": 1.0, "section_id": 457}, "so_47273390_47274196_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 638}}, "n4659": {"so_47273390_47274196_1": {"length": 18, "quality": 1.0, "section_id": 489}, "so_47273390_47274196_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 676}}}, "47274196": {"Id": "47274196", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47273390_47274196_0\">Why doesn't the function template implement the copy-assignment operator?</p>\n</blockquote>\n<p>Because the standard says so ([class.copy.assign]/1):</p>\n<blockquote>\n<p id=\"so_47273390_47274196_1\">A user-declared copy assignment operator <code>X::operator=</code> is a non-static <strong>non-template</strong> member function of\n  class <code>X</code> with exactly one parameter of type <code>X</code>, <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>.</p>\n</blockquote>\n<p>Note there's no <code>X&amp;&amp;</code> in there either.</p>\n", "LastActivityDate": "2017-11-13T21:54:36.583", "CommentCount": "0", "CreationDate": "2017-11-13T21:54:36.583", "ParentId": "47273390", "Score": "2", "OwnerUserId": "775806"}, "47273390": {"ViewCount": "36", "Body": "<p>In a class with a series of ctors (most of which have exactly one argument), I want all one-argument ctors to also be mirrored by a corresponding assignment operator. The ctors include, but are not limited to a copy-ctor and a move-ctor. So this, should satisfy the rule-of-five.</p>\n<pre><code>  template &lt;typename T&gt;\n  object&amp; operator=(T&amp;&amp; from) {\n    // ...\n    return *this;\n  }\n</code></pre>\n<p>Here is a minimal example: <a href=\"https://ideone.com/OKprcr\" rel=\"nofollow noreferrer\">https://ideone.com/OKprcr</a> (thanks to @Daniel H for pointing out constness).</p>\n<p>The error I get is</p>\n<pre><code>error: object of type 'object' cannot be assigned because its copy assignment operator is implicitly deleted\n...\nnote: copy assignment operator is implicitly deleted because 'object' has a user-declared move constructor\n</code></pre>\n<p>Why doesn't the function template implement the copy-assignment operator?</p>\n", "AcceptedAnswerId": "47274196", "Title": "Why doesn't perfect forwarding (catch-all) work to implement a copy-assignment?", "CreationDate": "2017-11-13T20:56:00.527", "Id": "47273390", "CommentCount": "11", "LastEditDate": "2017-11-13T21:38:51.033", "PostTypeId": "1", "LastEditorUserId": "430766", "LastActivityDate": "2017-11-13T21:54:36.583", "Score": "0", "OwnerUserId": "430766", "Tags": "<c++><perfect-forwarding><copy-assignment>", "AnswerCount": "1"}});