post_cb({"bq_ids": {"n4140": {"so_4539563_4539588_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3304}, "so_4539563_4539588_1": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_4539563_4539588_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3174}, "so_4539563_4539588_1": {"length": 4, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_4539563_4539588_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 4070}}}, "4539666": {"Id": "4539666", "PostTypeId": "2", "Body": "<p>The answer to your question depends on the language version (C++98 or C++03) and, in C++98, on some details you failed to provide. Namely, what is <code>SomeFuncPtr</code>? Is this an ordinary function pointer or a member function pointer?</p>\n<p>If this is a member function pointer, then in C++98 version of language specification the inner class is not POD. Since it is a non-POD class, the remaining array members will be default-initialized by calling their default constructors. The compiler-provided default constructor for the inner class does nothing, so the remaining members of the array will contain garbage.</p>\n<p>In C++03 version of language specification the remaining array members are value-initialized, which will indeed zero-initialize the rest of the array, regardless of what <code>SomeFuncPtr</code> is.</p>\n<p>So, if you are using a C++03-compliant compiler, you are fine. If you care about being backward portable to C++98 compilers, you might want to include that explicit terminating initializer (depending, again, on what <code>SomeFuncPtr</code> is).</p>\n", "LastActivityDate": "2010-12-27T15:24:31.050", "CommentCount": "2", "CreationDate": "2010-12-27T15:24:31.050", "ParentId": "4539563", "Score": "2", "OwnerUserId": "187690"}, "4539563": {"ViewCount": "1168", "Body": "<p>assuming I have an object similar to this one:</p>\n<pre><code>struct MenuDef\n{\n    int titleResourceId;\n\n    struct MenuItemDef {\n        char*               name;\n        int                 value;\n        SomeFunctionPtr     someFactory;\n    } menuItems[10];\n};\n</code></pre>\n<p>That is initialized like this:</p>\n<pre><code>const MenuDef m = {\n    1,\n    {\n        {\n            \"zero\",\n            0,\n            (SomeFunctionPtr) &amp; MenuButton::factory,\n        },\n        {\n            \"one\",\n            1,\n            (SomeFunctionPtr) &amp; MenuButton::factory,\n        },\n        {\n            \"two\",\n            2,\n            (SomeFunctionPtr) &amp; MenuButton::factory,\n        },\n    }\n};\n</code></pre>\n<p><strong>Is it safe to assume that</strong> <code>m.menuItems[3].someFactory == 0</code> <strong>?</strong></p>\n<p>for example in a loop like this:</p>\n<pre><code>for ( int i = 0; m.menuItems[i].someFactory != 0; ++i)\n</code></pre>\n<p><strong>or do I have to insert a last element to mark the array end by hand just to be safe?</strong></p>\n<pre><code>...\n        {\n            \"two\",\n            2,\n            (SomeFunctionPtr) &amp; MenuButton::factory,\n        },\n        {\n            \"\",\n            0,\n            (SomeFunctionPtr) 0,\n        },\n...\n</code></pre>\n", "AcceptedAnswerId": "4539588", "Title": "brace-enclosed initializer list", "CreationDate": "2010-12-27T15:08:11.840", "Id": "4539563", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2010-12-27T15:24:31.050", "Score": "1", "OwnerUserId": "86845", "Tags": "<c++><initialization>", "AnswerCount": "2"}, "4539588": {"Id": "4539588", "PostTypeId": "2", "Body": "<p>I believe it is safe according to 8.5.1/7 :</p>\n<blockquote>\n<p id=\"so_4539563_4539588_0\">If there are fewer initializers in the\n  list than there are members in the\n  aggregate, then each member not\n  explicitly initialized shall be\n  value-initialized (8.5).</p>\n</blockquote>\n<p>As a reminder :</p>\n<blockquote>\n<p id=\"so_4539563_4539588_1\">To value-initialize an object of type\n  T means:</p>\n<ul>\n<li>if T is a class type (clause 9) with a user-declared constructor (12.1),\n  then the default constructor for T is\n  called (and the initialization is\n  ill-formed if T has no accessible\n  default constructor);</li>\n<li><strong>if T is a non-union class type without a user-declared constructor,\n  then every non-static data member and\n  base-class component of T is\n  value-initialized;</strong></li>\n<li>if T is an array type, then each element is value-initialized;</li>\n<li><strong>otherwise, the object is zero-initialized</strong></li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2010-12-27T15:13:19.317", "CommentCount": "9", "CreationDate": "2010-12-27T15:13:19.317", "ParentId": "4539563", "Score": "4", "OwnerUserId": "451980"}});