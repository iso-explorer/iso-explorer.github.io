post_cb({"20940737": {"ParentId": "20649951", "CommentCount": "0", "Body": "<p>The copy that you see in the slow path is not caused by lack of RVO, but by the fact that\nin B(MakeA()), \"MakeA()\" is an rvalue, but in B(a) \"a\" is an lvalue.</p>\n<p>To make this clear let's modify the slow path to indicate where MakeA() is complete:</p>\n<pre><code>#ifdef SLOW\n  A a(MakeA());\n  std::cout &lt;&lt; \"---- after call \\n\";\n  return B(a);\n#else\n</code></pre>\n<p>The output is:</p>\n<pre><code>Hello World!\n---- after call \nA copy\nA move\nA d'tor\nA d'tor\n0x7fff5a831b28\nA d'tor\n</code></pre>\n<p>Which shows that no copy was done in</p>\n<pre><code>A a(MakeA());\n</code></pre>\n<p>Thus, RVO did happen.</p>\n<p>The fix, which removes all copy, is:</p>\n<pre><code>return B(std::move(a));\n</code></pre>\n", "OwnerUserId": "3019782", "PostTypeId": "2", "Id": "20940737", "Score": "2", "CreationDate": "2014-01-05T23:45:23.847", "LastActivityDate": "2014-01-05T23:45:23.847"}, "20650181": {"ParentId": "20649951", "CommentCount": "3", "Body": "<p>The simple answer is: because it is not allowed to apply copy elision in this case. The compiler is only allowed under very few and specific cases to apply copy elision. The quote from the standard is 12.8 [class.copy] paragraph 31:</p>\n<blockquote>\n<p id=\"so_20649951_20650181_0\">... This elision of copy/move operations, called copy elision, is permitted in the following circumstances (which may be combined to eliminate multiple copies):</p>\n<ul>\n<li>in a return statement in a function with a class return type, when the expression is the name of a non-volatile automatic object (other than a function or catch-clause parameter) with the same cv unqualified type as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function\u2019s return value</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Clearly the type of <code>B(a)</code> is not <code>A</code>, i.e., copy elision isn't permitted. The other bullets in the same paragraph refer to things like <code>throw</code> expressions, eliding copies from a temporary, and exception declaration. None of these apply.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "20650181", "Score": "13", "CreationDate": "2013-12-18T05:17:19.790", "LastActivityDate": "2013-12-18T05:17:19.790"}, "bq_ids": {"n4140": {"so_20649951_20650181_0": {"section_id": 480, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_20649951_20650181_0": {"section_id": 471, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_20649951_20650181_0": {"section_id": 502, "quality": 0.9333333333333333, "length": 14}}}, "20649951": {"CommentCount": "9", "ViewCount": "674", "PostTypeId": "1", "LastEditorUserId": "1517648", "CreationDate": "2013-12-18T04:58:11.790", "LastActivityDate": "2014-01-05T23:45:23.847", "Title": "Why is clang not optimizing this with NRVO?", "AcceptedAnswerId": "20650181", "LastEditDate": "2013-12-18T05:12:50.553", "Id": "20649951", "Score": "7", "Body": "<p>I'm trying to reason why a reasonably good C++ 11 compiler (clang) is not optimizing this code, and wondering  if anybody here has opinions.</p>\n<pre><code>#include &lt;iostream&gt;\n#define SLOW\n\nstruct A {\n  A() {}\n  ~A() { std::cout &lt;&lt; \"A d'tor\\n\"; }\n  A(const A&amp;) { std::cout &lt;&lt; \"A copy\\n\"; }\n  A(A&amp;&amp;) { std::cout &lt;&lt; \"A move\\n\"; }\n  A &amp;operator =(A) { std::cout &lt;&lt; \"A copy assignment\\n\"; return *this; }\n};\n\nstruct B {\n  // Using move on a sink. \n  // Nice talk at Going Native 2013 by Sean Parent.\n  B(A foo) : a_(std::move(foo)) {}  \n  A a_;\n};\n\nA MakeA() {\n  return A();\n}\n\nB MakeB() {  \n // The key bits are in here\n#ifdef SLOW\n  A a(MakeA());\n  return B(a);\n#else\n  return B(MakeA());\n#endif\n}\n\nint main() {\n  std::cout &lt;&lt; \"Hello World!\\n\";\n  B obj = MakeB();\n  std::cout &lt;&lt; &amp;obj &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>\n<p>If I run this with <code>#define SLOW</code> commented out and optimized with <code>-s</code> I get </p>\n<pre><code>Hello World!\nA move\nA d'tor\n0x7fff5fbff9f0\nA d'tor\n</code></pre>\n<p>which is expected.</p>\n<p>If I run this with <code>#define SLOW</code> enabled and optimized with <code>-s</code> I get:</p>\n<pre><code>Hello World!\nA copy\nA move\nA d'tor\nA d'tor\n0x7fff5fbff9e8\nA d'tor\n</code></pre>\n<p>Which obviously isn't as nice. So the question is:</p>\n<p>Why am I not seeing a NRVO optimization applied in the \"SLOW\" case? I know that the compiler is not required to apply NRVO, but this would seem to be such a common simple case.</p>\n<p>In general I try to encourage code of the \"SLOW\" style because I find it much easier to debug.</p>\n", "Tags": "<c++><optimization><c++11><nrvo>", "OwnerUserId": "266380", "AnswerCount": "2"}});