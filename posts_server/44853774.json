post_cb({"bq_ids": {"n4140": {"so_44853774_44853774_0": {"length": 19, "quality": 0.6551724137931034, "section_id": 3296}, "so_44853774_44853774_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 3286}, "so_44853774_44853864_0": {"length": 7, "quality": 1.0, "section_id": 3296}}, "n3337": {"so_44853774_44853864_0": {"length": 7, "quality": 1.0, "section_id": 3166}, "so_44853774_44853774_1": {"length": 13, "quality": 0.5652173913043478, "section_id": 359}, "so_44853774_44853774_0": {"length": 19, "quality": 0.6551724137931034, "section_id": 3166}}, "n4659": {"so_44853774_44853774_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 4048}, "so_44853774_44853774_1": {"length": 12, "quality": 0.5217391304347826, "section_id": 382}, "so_44853774_44853864_0": {"length": 7, "quality": 1.0, "section_id": 4048}}}, "44853864": {"Id": "44853864", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_44853774_44853864_0\">... and the best one for the initializer () is chosen <strong><em>through overload resolution</em></strong> ...</p>\n</blockquote>\n<p>Overload resolution already implies all that was deleted. With the old wording, with the restrictions not mentioned, it could be read as implicitly allowing inaccessible default constructors to be invoked, but with the new wording, it's already clear by simply specifying that the usual rules apply.</p>\n", "LastActivityDate": "2017-06-30T19:45:48.280", "CommentCount": "0", "CreationDate": "2017-06-30T19:45:48.280", "ParentId": "44853774", "Score": "5", "OwnerUserId": "743382"}, "44853774": {"ViewCount": "47", "Body": "<p>I understand <a href=\"http://eel.is/c++draft/dcl.init#7.1\" rel=\"nofollow noreferrer\">[dcl.init]/7 (7.1)</a> was changed in relation to C++14, due to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1630\" rel=\"nofollow noreferrer\">DR 1630</a>. But shouldn't the highlighted sentence (see below), present in C++14, continue to exist in C++1z?</p>\n<p>[dcl.init]/7 (7.1):</p>\n<blockquote>\n<p id=\"so_44853774_44853774_0\">If T is a (possibly cv-qualified) class type (Clause 12), constructors\n  are considered. The applicable constructors are enumerated (16.3.1.3),\n  and the best one for the initializer () is chosen through overload\n  resolution (16.3). The constructor thus selected is called, with an\n  empty argument list, to initialize the object.</p>\n</blockquote>\n<p>[dcl.init]/7 (7.1) in C++14 (emphasis is mine):</p>\n<blockquote>\n<p id=\"so_44853774_44853774_1\">if T is a (possibly cv-qualified) class type (Clause 9), the default\n  constructor (12.1) for T is called <strong>(and the initialization is\n  ill-formed if T has no default constructor or overload resolution\n  (13.3) results in an ambiguity or in a function that is deleted or\n  inaccessible from the context of the initialization)</strong>;</p>\n</blockquote>\n", "AcceptedAnswerId": "44853864", "Title": "Bullet point [dcl.init]/7 (7.1)", "CreationDate": "2017-06-30T19:38:16.787", "Id": "44853774", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-06-30T19:45:48.280", "Score": "1", "OwnerUserId": "1042389", "Tags": "<c++><initialization><c++14><language-lawyer><c++1z>", "AnswerCount": "1"}});