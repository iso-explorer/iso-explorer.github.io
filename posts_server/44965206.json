post_cb({"44966249": {"ParentId": "44965206", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In light of the comments under your question, my view is that:</p>\n<ul>\n<li><p><code>forward_list::remove_if</code> is not an algorithm, and as such does not fall under the rules of [algorithms.requirements].</p></li>\n<li><p>[forwardlist.ops] places no restriction on what you may do in the predicate.</p></li>\n<li><p><code>forward_list::remove_if</code> is required to apply the predicate exactly once per item in the range.</p></li>\n</ul>\n<p>Therefore, it's strictly legal to modify the object in the predicate in this case, if somewhat anti-social.</p>\n<h3>edit:</h3>\n<p>In the light of T.C.'s later answer, it won't be legal for long...\n<a href=\"https://stackoverflow.com/a/45052149/2015579\">https://stackoverflow.com/a/45052149/2015579</a></p>\n", "OwnerUserId": "2015579", "LastEditorUserId": "2015579", "LastEditDate": "2017-07-13T08:25:15.030", "Id": "44966249", "Score": "2", "CreationDate": "2017-07-07T08:37:13.730", "LastActivityDate": "2017-07-13T08:25:15.030"}, "45052149": {"ParentId": "44965206", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The committee's Library Working Group has just moved <a href=\"https://timsong-cpp.github.io/lwg-issues/2998\" rel=\"nofollow noreferrer\">LWG issue 2998</a> to \"Ready\" status, essentially confirming that the committee's intent here is that the relevant requirements from Clause 28 (the algorithms clause) apply to the similar list operations. This includes the requirement that the <code>Predicate</code> does not apply any non-constant functions.</p>\n<p>Once the issue resolution is adopted (which should happen at the next committee meeting), the code in the OP will formally have undefined behavior. Nonetheless, it should generally work as desired barring an intentionally hostile implementation. If an implementation with guaranteed well-defined behavior is desired, it's not too hard to write one manually with iterators and <code>erase_after</code>.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "6350078", "LastEditDate": "2017-07-12T15:36:08.737", "Id": "45052149", "Score": "2", "CreationDate": "2017-07-12T08:19:27.380", "LastActivityDate": "2017-07-12T15:36:08.737"}, "44965206": {"CommentCount": "8", "AcceptedAnswerId": "45052149", "PostTypeId": "1", "LastEditorUserId": "440558", "CreationDate": "2017-07-07T07:40:51.497", "LastActivityDate": "2017-07-13T08:25:15.030", "LastEditDate": "2017-07-07T07:45:30.953", "ViewCount": "242", "FavoriteCount": "0", "Title": "Requirements on std::forward_list::remove_if predicates", "Id": "44965206", "Score": "6", "Body": "<p>Consider this code:</p>\n<pre><code>struct T\n{\nbool status;\nUsefulData data;\n};\n\nstd::forward_list&lt;T&gt; lst;\n\nlst.remove_if([](T &amp;x) -&gt; bool { return x.status= !x.status; });\n</code></pre>\n<p>i.e. switching the status and removing inactive elements in one go.</p>\n<p>According to <a href=\"http://en.cppreference.com/w/cpp/container/forward_list/remove\" rel=\"noreferrer\">cppreference</a> the above code seems to be undefined behavior (emphasis mine):</p>\n<blockquote>\n<pre><code>template&lt; class UnaryPredicate &gt;\nvoid remove_if( UnaryPredicate p );\n</code></pre>\n<p id=\"so_44965206_44965206_0\"><code>p</code> - unary predicate which returns true if the element should be removed.\n  The signature of the predicate function should be equivalent to the following:</p>\n<pre><code>bool pred(const Type &amp;a);\n</code></pre>\n<p id=\"so_44965206_44965206_1\">The signature does not need to have <code>const &amp;</code>, but the function <strong>must not</strong> modify the objects passed to it.\n  The type <code>Type</code> must be such that an object of type <code>forward_list&lt;T,Allocator&gt;::const_iterator</code> can be dereferenced and then implicitly converted to <code>Type</code>. </p>\n</blockquote>\n<p>However, the current working draft seems to be less restrictive (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"noreferrer\">N4659</a> [forwardlist.ops]):</p>\n<blockquote>\n<pre><code>void remove(const T&amp; value)\ntemplate &lt;class Predicate&gt; void remove_if(Predicate pred);\n</code></pre>\n<p id=\"so_44965206_44965206_2\"><em>Effects:</em></p>\n<p id=\"so_44965206_44965206_3\">Erases all the elements in the list referred by a list iterator <code>i</code> for which the following conditions hold: <code>*i == value</code> (for <code>remove()</code>), <code>pred(*i)</code> is <code>true</code> (for <code>remove_if()</code>). Invalidates only the iterators and references to the erased elements.</p>\n<p id=\"so_44965206_44965206_4\"><em>Throws:</em></p>\n<p id=\"so_44965206_44965206_5\">Nothing unless an exception is thrown by the equality comparison or the predicate.</p>\n<p id=\"so_44965206_44965206_6\"><em>Remarks:</em></p>\n<p id=\"so_44965206_44965206_7\">Stable (20.5.5.7).</p>\n<p id=\"so_44965206_44965206_8\"><em>Complexity:</em></p>\n<p id=\"so_44965206_44965206_9\">Exactly <code>distance(begin(), end())</code> applications of the corresponding predicate.</p>\n</blockquote>\n<p>Are there additional restrictions on predicates in other parts of the Standard?</p>\n<p>I have tested the above code on a number of compilers and it compiles and seems to work as intended. Do I really need to transverse the list twice?</p>\n", "Tags": "<c++><list><c++11><language-lawyer><predicate>", "OwnerUserId": "6350078", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_44965206_44965206_9": {"section_id": 887, "quality": 1.0, "length": 6}, "so_44965206_44965206_5": {"section_id": 885, "quality": 1.0, "length": 6}, "so_44965206_44965206_3": {"section_id": 884, "quality": 1.0, "length": 20}}, "n3337": {"so_44965206_44965206_9": {"section_id": 875, "quality": 1.0, "length": 6}, "so_44965206_44965206_5": {"section_id": 874, "quality": 1.0, "length": 6}, "so_44965206_44965206_3": {"section_id": 873, "quality": 1.0, "length": 20}}, "n4659": {"so_44965206_44965206_9": {"section_id": 947, "quality": 1.0, "length": 6}, "so_44965206_44965206_5": {"section_id": 945, "quality": 1.0, "length": 6}, "so_44965206_44965206_3": {"section_id": 944, "quality": 1.0, "length": 20}}}});