post_cb({"2654378": {"CommentCount": "1", "AcceptedAnswerId": "2654395", "PostTypeId": "1", "LastEditorUserId": "147192", "CreationDate": "2010-04-16T15:56:27.200", "LastActivityDate": "2010-04-18T17:00:32.777", "LastEditDate": "2010-04-16T17:15:22.080", "ViewCount": "1042", "FavoriteCount": "2", "Title": "How can char* be a condition in for loop?", "Id": "2654378", "Score": "6", "Body": "<p>In a book I am reading there is a piece of code :</p>\n<pre><code>string x;\nsize_t h=0;\nfor(const char* s=x.c_str();*s;++s)\n    h=(h*17)^*s;\n</code></pre>\n<p>Regarding this code, I have two questions:</p>\n<ol>\n<li><p>how can <code>*s</code> be a condition? what does it mean?</p></li>\n<li><p>what does <code>\"h=(h*17)^*s\"</code> mean? </p></li>\n</ol>\n<p>Thanks for help! </p>\n", "Tags": "<c++><c>", "OwnerUserId": "265306", "AnswerCount": "7"}, "2654421": {"ParentId": "2654378", "CommentCount": "0", "Body": "<p>In C (or C++) any value can be used as a \"boolean\". A numeric value of 0, or a NULL pointer, means \"false\". Anything else means \"true\".</p>\n<p>Here, <code>*s</code> is \"the character value currently pointed to by <code>s</code>\". The loop stops if that character is a 0 (not the \"<code>0</code>\" digit, with ASCII encoding 48, but the byte with ASCII encoding 0). This is conventionally the \"end-of-string\" marker, so the loop stops when it reaches the end of the string.</p>\n<p>\"<code>^</code>\" is the bitwise XOR operator. The left \"<code>*</code>\" is a plain multiplication, while the other \"<code>*</code>\" is the pointer dereference operator (i.e. the thing which takes the pointer <code>s</code> and looks at the value to which this pointer points). \"<code>=</code>\" is assignment. In brief, the value of <code>h</code> is multiplied by 17, then XORed with the character pointed to by <code>s</code>, and the result becomes the new value of <code>h</code>.</p>\n", "OwnerUserId": "254279", "PostTypeId": "2", "Id": "2654421", "Score": "3", "CreationDate": "2010-04-16T16:02:20.930", "LastActivityDate": "2010-04-16T16:02:20.930"}, "bq_ids": {"n4140": {"so_2654378_2655054_1": {"section_id": 3899, "quality": 1.0, "length": 5}, "so_2654378_2655054_2": {"section_id": 44, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_2654378_2655054_1": {"section_id": 3759, "quality": 1.0, "length": 5}, "so_2654378_2655054_2": {"section_id": 41, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_2654378_2655054_1": {"section_id": 4785, "quality": 1.0, "length": 5}, "so_2654378_2655054_2": {"section_id": 45, "quality": 0.9259259259259259, "length": 25}}}, "2654411": {"ParentId": "2654378", "CommentCount": "0", "Body": "<p>1) <code>*s</code> in the condition checks whether <code>*s!=NUL</code> </p>\n<p>2) <code>h=(h*17)^*s</code> implies multiply <code>h</code> by 17 and perform <code>exclusive-OR</code> operation with the value pointed to by s.</p>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "2654411", "Score": "1", "CreationDate": "2010-04-16T16:01:17.233", "LastActivityDate": "2010-04-16T16:01:17.233"}, "2654403": {"ParentId": "2654378", "CommentCount": "0", "Body": "<ol>\n<li><code>*s</code> is the character that <code>s</code> currently points to, so it's a character. The <code>for</code> loop goes on until it becomes <code>\\0</code>, meaning until the string ends.</li>\n<li><code>h</code> is assigned the value of <code>h * 17</code> <a href=\"http://en.wikipedia.org/wiki/Exclusive_or\" rel=\"nofollow noreferrer\">xored</a> with the (ascii value of) character <code>*s</code>.</li>\n</ol>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/pointers/\" rel=\"nofollow noreferrer\">Here</a>'s a good tutorial about pointers.</p>\n", "OwnerUserId": "270287", "PostTypeId": "2", "Id": "2654403", "Score": "1", "CreationDate": "2010-04-16T16:00:14.993", "LastActivityDate": "2010-04-16T16:00:14.993"}, "2655054": {"ParentId": "2654378", "CommentCount": "0", "Body": "<p>As other answers have explained, the basic answer is that any expression that evaluates to 0 gets interpreted as a 'false' condition in C or C++, and <code>*s</code> will evaluate to 0 when the <code>s</code> pointer reaches the null termination character of the string ('\\0').</p>\n<p>You could equivalently use the expression <code>*s != 0</code>, and some developers might argue that this is what should be used, giving the opinion that the 'fuller' expression is more clear. Whether or not you agree with that opinion, you need to be able to understand the use of the terse alternative, since it's very commonly used in C/C++ code.  You'll come across these expressions a lot, even if you prefer to use the more explicit comparision.</p>\n<p>The more rigorous explanation from the standard (for some reason I feel compelled to bring this into the discussion, even though it doesn't really change or clarify anything.  In fact, it probably will muddle things unnecessarily for some people  - if you don't care to get into this level of trivia, you'll miss absolutely nothing by clicking the back button right now...):</p>\n<p>In C, the <code>*s</code> expression is in what the standard calls 'expression-2' of the <code>for</code> statement, and this particular <code>for</code> statement example is just taking advantage of the standard's definition of the <code>for</code> statement.  The <code>for</code> statement is classified as an 'iteration statement', and among the semantics of any iteration statement are (6.8.5/4  \"Iteration statements\"):</p>\n<blockquote>\n<p id=\"so_2654378_2655054_0\">An iteration statement causes a statement called the loop body to be executed repeatedly\n  until the controlling expression compares equal to 0.</p>\n</blockquote>\n<p>Since the 'expression-2' part of the <code>for</code> statement is the controlling expression, this means that the <code>for</code> loop will execute repeatedly until <code>*s</code> compares equal to 0.</p>\n<p>The C++ standard defines things a little differently (but with the same result).  In C++, the <code>for</code> statement is defined in terms of the <code>while</code> statement, and the condition part of the <code>while</code> statement controls the the iteration (6.5.1/1 \"The while statement\"):</p>\n<blockquote>\n<p id=\"so_2654378_2655054_1\">until the value of the condition becomes <code>false</code></p>\n</blockquote>\n<p>Earlier in the C++ standard, the following describes how expressions are converted to <code>bool</code> (4.12 \"boolean conversions\"):</p>\n<blockquote>\n<p id=\"so_2654378_2655054_2\">An rvalue of arithmetic, enumeration, pointer, or pointer to member type can be converted to an rvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false; any other value is converted to true</p>\n</blockquote>\n<p>Similar wording in the standard (in both languages) apply to the controlling expression/condition of all selection or iteration statements.  All this language-lawyerese boils down to the fact that if an expression evaluates to 0 it's the same as evaluating to false (in the English sense of the word, since C doesn't have a built-in <code>false</code> keyword).</p>\n<p>And that's the long, confusing explanation of the simple concept.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "2655054", "Score": "3", "CreationDate": "2010-04-16T17:43:22.950", "LastActivityDate": "2010-04-16T17:43:22.950"}, "2654419": {"ParentId": "2654378", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C and C++, <code>true</code> and <code>false</code> are the same as non-zero, and zero. So code under <code>if (1){</code> will always execute, as will code under <code>if (-1237830){</code>, but <code>if (0){</code> is always <code>false</code>.</p>\n<p>Likewise, if the value of the pointer is ever 0, the condition is the same as <code>false</code>, i.e. you will exit the loop.</p>\n", "OwnerUserId": "300807", "LastEditorUserId": "300807", "LastEditDate": "2010-04-18T17:00:32.777", "Id": "2654419", "Score": "1", "CreationDate": "2010-04-16T16:02:12.633", "LastActivityDate": "2010-04-18T17:00:32.777"}, "2654394": {"ParentId": "2654378", "PostTypeId": "2", "CommentCount": "6", "Body": "<ul>\n<li><code>*s</code> detects the string termination character '\\0'</li>\n<li><code>(h*17)^*s</code> is what it says: h multiplied by 17 and xor-ed with the content of the character pointed by s. <em>Seems a simple hashing funciton</em>.</li>\n</ul>\n", "OwnerUserId": "295076", "LastEditorUserId": "295076", "LastEditDate": "2010-04-16T16:04:54.483", "Id": "2654394", "Score": "3", "CreationDate": "2010-04-16T15:58:40.270", "LastActivityDate": "2010-04-16T16:04:54.483"}, "2654395": {"ParentId": "2654378", "CommentCount": "1", "Body": "<blockquote id=\"so_2654378_2654395_0\">\n<ol>\n<li>how can *s be a condition? what does it mean?</li>\n</ol>\n</blockquote>\n<p>It means \"while the value pointed to by <code>s</code> is not zero.\"  C strings are null-terminated, so the last character in the string returned by <code>c_str()</code> will be the null character (<code>\\0</code>, represented by all bits zero).</p>\n<blockquote id=\"so_2654378_2654395_1\">\n<ol start=\"2\">\n<li>what does \"h=(h*17)^*s\" mean? </li>\n</ol>\n</blockquote>\n<p>It multiplies <code>h</code> by <code>17</code> then <code>xor</code>s it with the value pointed to by <code>s</code>.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "2654395", "Score": "16", "CreationDate": "2010-04-16T15:58:47.703", "LastActivityDate": "2010-04-16T15:58:47.703"}});