post_cb({"21689388": {"CreationDate": "2014-02-10T22:39:34.727", "ViewCount": "672", "Id": "21689388", "AcceptedAnswerId": "21689452", "Score": "5", "Title": "Ranged for loop with literal list?", "CommentCount": "4", "Body": "<p>In C++11, is it possible to write the following </p>\n<pre><code>int ns[] = { 1, 5, 6, 2, 9 };\nfor (int n : ns) {\n   ...\n}\n</code></pre>\n<p>as something like this</p>\n<pre><code>for (int n : { 1, 5, 6, 2, 9 }) { // VC++11 rejects this form\n   ...\n}\n</code></pre>\n", "Tags": "<c++><c++11><for-loop><initializer-list>", "LastActivityDate": "2014-02-10T23:11:54.327", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "239916"}, "bq_ids": {"n4140": {"so_21689388_21689452_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3906}}, "n3337": {"so_21689388_21689452_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3766}}}, "21689426": {"LastActivityDate": "2014-02-10T22:54:25.813", "CommentCount": "0", "Body": "<p>It is possible to use this construction with an initializer list. Simply it seems the MS VC++ you are using does not support it.</p>\n<p>Here is an example</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;initializer_list&gt;\n\nint main() \n{\n    for (int n : { 1, 5, 6, 2, 9 }) std::cout &lt;&lt; n &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>You have to include header <code>&lt;initializer_list&gt;</code> because the initializer list in the for statement is converted to <code>std::initializer_list&lt;int&gt;</code></p>\n", "CreationDate": "2014-02-10T22:42:39.670", "LastEditDate": "2014-02-10T22:54:25.813", "ParentId": "21689388", "Id": "21689426", "LastEditorUserId": "501557", "PostTypeId": "2", "Score": "4", "OwnerUserId": "2877241"}, "21689452": {"LastActivityDate": "2014-02-10T23:11:54.327", "CommentCount": "4", "Body": "<p><em><strong>tl;dr:</strong> Upgrade your compiler for great success.</em></p>\n<hr>\n<p><strong>Yeah, it's valid.</strong></p>\n<p>The definition of ranged-for in <code>[C++11: 6.5.4/1]</code> gives us two variants of syntax for this construct. One takes an <em>expression</em> on the right-hand-side of the <code>:</code>, and the other takes a <em>braced-init-list</em>.</p>\n<p>Your <em>braced-init-list</em> deduces (through <code>auto</code>) to a <code>std::initializer_list</code>, which is handy because these things may be iterated over.</p>\n<blockquote>\n<p id=\"so_21689388_21689452_0\"><em>[..]</em> for a range-based <code>for</code> statement of the form</p>\n<p id=\"so_21689388_21689452_1\"><code>for (</code> <em>for-range-declaration</em> <code>:</code> <em>braced-init-list</em> <code>) statement</code></p>\n<p id=\"so_21689388_21689452_2\">let <em>range-init</em> be equivalent to the <em>braced-init-list</em>. In each case, a range-based for statement is equivalent to</p>\n<pre><code>{\n   auto &amp;&amp; __range = range-init;\n   for ( auto __begin = begin-expr,\n              __end = end-expr;\n        __begin != __end;\n        ++__begin ) {\n      for-range-declaration = *__begin;\n      statement\n   }\n}\n</code></pre>\n<p id=\"so_21689388_21689452_3\"><em>[..]</em></p>\n</blockquote>\n<p>So, you are basically saying:</p>\n<pre><code>auto ns = { 1, 5, 6, 2, 9 };\nfor (int n : ns) {\n   // ...\n}\n</code></pre>\n<p><sup>(I haven't bothered with the universal reference here.)</sup></p>\n<p>which in turn is more-or-less equivalent to:</p>\n<pre><code>std::initializer_list&lt;int&gt; ns = { 1, 5, 6, 2, 9 };\nfor (int n : ns) {\n   // ...\n}\n</code></pre>\n<p>Now, <a href=\"http://coliru.stacked-crooked.com/a/09bbc7b88337e4a8\">GCC 4.8 supports this</a> but, since \"Visual Studio 11\" is in fact Visual Studio 2012, you'll need to upgrade in order to catch up: <strong><a href=\"http://msdn.microsoft.com/en-us/library/hh567368.aspx\">initialiser lists were not supported <em>at all</em> until Visual Studio 2013</a></strong>.</p>\n</hr>", "CreationDate": "2014-02-10T22:44:17.273", "LastEditDate": "2014-02-10T23:11:54.327", "ParentId": "21689388", "Id": "21689452", "LastEditorUserId": "560648", "PostTypeId": "2", "Score": "16", "OwnerUserId": "560648"}});