post_cb({"bq_ids": {"n4140": {"so_14776416_14777308_0": {"length": 7, "quality": 1.0, "section_id": 2413}}, "n3337": {"so_14776416_14777308_0": {"length": 7, "quality": 1.0, "section_id": 2398}}, "n4659": {"so_14776416_14777308_0": {"length": 7, "quality": 1.0, "section_id": 2688}}}, "14776416": {"ViewCount": "150", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n{\n    fstream file(\"out.txt\", ios_base::app);\n\n    file.seekg(0, ios_base::beg);\n\n    char buffer[100];\n\n    if( !file.getline(buffer, 99) )\n        cout &lt;&lt; \"file.failbit  \" &lt;&lt; boolalpha &lt;&lt; file.fail() &lt;&lt; \"   file.eofbit   \" &lt;&lt; file.eof()\n                 &lt;&lt; '\\n'\n             &lt;&lt; \"file.badbit   \" &lt;&lt; file.bad() &lt;&lt; \"  file.goodbit  \" &lt;&lt; file.good() &lt;&lt; '\\n';\n\n}\n</code></pre>\n<p>output</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/zS7ve.png\"/></p>\n", "Title": "While trying to read a file opened for output only, the eofbit flag is set for the stream. Why is that?", "CreationDate": "2013-02-08T15:55:03.233", "LastActivityDate": "2013-02-08T17:17:00.770", "CommentCount": "6", "PostTypeId": "1", "Id": "14776416", "Score": "3", "OwnerUserId": "1042389", "Tags": "<c++><fstream>", "AnswerCount": "1"}, "14777308": {"Id": "14777308", "PostTypeId": "2", "Body": "<p>The standard prohibits you from reading from a file opened only for output.  From paragraph 27.9.1.1.3 on <code>basic_filebuf</code> (part of the underlying implementation of <code>fstream</code>):</p>\n<blockquote>\n<p id=\"so_14776416_14777308_0\">If the file is not open for reading the input sequence cannot be read.</p>\n</blockquote>\n<p>One would therefore expect to see <code>failbit</code> when trying to read from a file open only for writing.  The standard also says that <code>eofbit</code> is set whenever <code>getline</code> reaches the end of an input sequence.  Since you effectively have an empty input sequence (i.e., a file you can't read from), the first call to getline sets <code>eofbit</code> as well.  In standardese, the underlying stream buffer <strong>underflows</strong>.  <code>basic_streambuf::underflow()</code> returns <code>traits::eof()</code> on failure (see 27.6.3.4.3 paragraphs 7-17).</p>\n<p>To fix this, add <code>ios_base::in</code> to the file's openmode.</p>\n", "LastEditorUserId": "46821", "LastActivityDate": "2013-02-08T17:17:00.770", "Score": "2", "CreationDate": "2013-02-08T16:43:07.530", "ParentId": "14776416", "CommentCount": "2", "OwnerUserId": "46821", "LastEditDate": "2013-02-08T17:17:00.770"}});