post_cb({"11514602": {"ParentId": "11514185", "CommentCount": "5", "Body": "<p>I suspect you are not calling the <code>new</code> you think you are calling.</p>\n<p><a href=\"http://ideone.com/Go3G3\" rel=\"nofollow\">This works as you expect.</a></p>\n<pre><code>void *myalloc (size_t) { return 0; }\nvoid * operator new (size_t s) throw() { return myalloc(s); }\nstruct Foo {\n    std::string s;\n    Foo () { std::cout &lt;&lt; this &lt;&lt; std::endl; }\n};\nint main () {\n    Foo *f = new Foo;\n    if (f == 0) std::cout &lt;&lt; \"f is NULL\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Where as, <a href=\"http://ideone.com/2loA4\" rel=\"nofollow\">this fails.</a></p>\n<pre><code>void *myalloc (size_t) { return 0; }\nvoid * operator new (size_t s) throw() { return myalloc(s); }\nstruct Foo {\n    std::string s;\n    Foo () { std::cout &lt;&lt; this &lt;&lt; std::endl; }\n    void * operator new (size_t s) { return myalloc(s); }\n};\nint main () {\n    Foo *f = new Foo;\n    if (f == 0) std::cout &lt;&lt; \"f is NULL\" &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "315052", "PostTypeId": "2", "Id": "11514602", "Score": "2", "CreationDate": "2012-07-17T00:43:35.980", "LastActivityDate": "2012-07-17T00:43:35.980"}, "11514185": {"CommentCount": "0", "AcceptedAnswerId": "11514602", "CreationDate": "2012-07-16T23:44:39.583", "LastActivityDate": "2012-07-17T00:43:35.980", "PostTypeId": "1", "ViewCount": "821", "FavoriteCount": "2", "Title": "operator new with empty exception-specification calling constructor when allocation returns 0", "Id": "11514185", "Score": "4", "Body": "<p>I have the following declaration:</p>\n<pre><code>void * operator new (size_t s, PersistentMemory * m) throw()\n   {return m-&gt;allocatePersistentMemory(s);}\n</code></pre>\n<p>I'm testing memory exhaustion on start-up, which results in <code>m-&gt;allocatePersistentMemory(s);</code> returning 0.  New then calls the constructor with a null pointer for <code>this</code></p>\n<p>However, based on 3.7.3.1 paragraph 3 of C++ 2003 standard:</p>\n<blockquote>\n<p id=\"so_11514185_11514185_0\">An allocation function that fails to allocate storage can invoke the\n  currently installed new_handler (18.4.2.2), if any. [Note: A\n  program-supplied allocation function can obtain the address of the\n  currently installed new_handler using the set_new_handler function\n  (18.4.2.3). ] If an allocation function declared with an empty\n  exception-specification (15.4), throw(), fails to allocate storage, it\n  shall return a null pointer. Any other allocation function that fails\n  to allocate storage shall only indicate failure by throwing an\n  exception of class std::bad_alloc (18.4.2.1) or a class derived from\n  std::bad_alloc.</p>\n</blockquote>\n<p>The way I understand things is that having <code>m-&gt;allocatePersistentMemory(s)</code> return null should result in the whole <code>operator new() throw()</code> returning null without calling the constructor.  Am I missing some other condition elsewhere that overrides this?</p>\n<p>Thanks!</p>\n", "Tags": "<c++><g++><standards><new-operator>", "OwnerUserId": "242369", "AnswerCount": "2"}, "11514528": {"ParentId": "11514185", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Section 5.3.4 (13) of the C++03 standard says:</p>\n<blockquote>\n<p id=\"so_11514185_11514528_0\">[<em>Note</em>: unless an allocation function is declared with an empty\n  <em>exception-specification</em> (15.4), <code>throw()</code>, it indicates failure to\n  allocate storage by throwing a <em>bad_alloc</em> exception (clause 15,\n  18.4.2.1); it returns a non-null pointer otherwise. If the allocation function is declared with an empty <em>exception-specification</em>, <code>throw()</code>,\n  it returns null to indicate failure to allocate storage and a non-null\n  pointer otherwise. ] If the allocation function returns null,\n  initialization shall not be done, the deallocation function shall not\n  be called, and the value of the <em>new-expression</em> shall be null.</p>\n</blockquote>\n<p>The phrase \"initialization shall not be done\" implies that the constructor will not be called.</p>\n<p>Interestingly -- and unless I am reading the spec wrong -- when your allocation function specifies <code>throw()</code> and returns null, the value of the invocation of \"new\" itself is null.  I had always thought this was impossible (see, for example, pretty much every answer at <a href=\"https://stackoverflow.com/questions/550451/\">Will new return NULL in any case?</a>).</p>\n", "OwnerUserId": "768469", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:09:32.683", "Id": "11514528", "Score": "2", "CreationDate": "2012-07-17T00:32:09.503", "LastActivityDate": "2012-07-17T00:38:17.867"}, "bq_ids": {"n4140": {"so_11514185_11514528_0": {"section_id": 6096, "quality": 0.8125, "length": 39}, "so_11514185_11514185_0": {"section_id": 7178, "quality": 0.7454545454545455, "length": 41}}, "n3337": {"so_11514185_11514528_0": {"section_id": 5862, "quality": 0.8125, "length": 39}, "so_11514185_11514185_0": {"section_id": 6922, "quality": 0.7454545454545455, "length": 41}}, "n4659": {"so_11514185_11514528_0": {"section_id": 7593, "quality": 0.7291666666666666, "length": 35}, "so_11514185_11514185_0": {"section_id": 8686, "quality": 0.7090909090909091, "length": 39}}}});