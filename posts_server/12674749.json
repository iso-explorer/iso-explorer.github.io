post_cb({"12674749": {"ViewCount": "141", "Body": "<p>I have a <code>std::vector</code> containing a lot of elements. As the vector is huge, I store pointers to some specific elements in another vector, to be able to access them faster. But as the vector grows, sometimes its internal container gets reallocated, causing all my pointers to become invalid.</p>\n<p>Is there a way to know when this happens? This way I can update the pointers in the other list.</p>\n", "AcceptedAnswerId": "12674970", "Title": "How to know when a vector\u2019s internal array is reallocated?", "CreationDate": "2012-10-01T13:59:37.857", "Id": "12674749", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2012-10-01T14:34:05.273", "Score": "3", "OwnerUserId": "748175", "Tags": "<c++><std><stdvector>", "AnswerCount": "4"}, "12674970": {"Id": "12674970", "PostTypeId": "2", "Body": "<p>You shoudldn't store pointers, you should store indexes :</p>\n<p>i.e, instead of :</p>\n<pre><code>var1 = &amp;vector[0];\nvar2 = &amp;vector[13];\n</code></pre>\n<p>and access <code>*var1</code>, <code>*var2</code></p>\n<p>you should store :</p>\n<pre><code>i1 = 0;\ni2 = 13;\n</code></pre>\n<p>and access <code>vector[i1]</code>, <code>vector[i2]</code></p>\n<hr>\n<p>Note : you should still be careful if you use modifier methods :</p>\n<ul>\n<li><code>pop_back()</code> (which makes the last position invalid)</li>\n<li><code>erase(i)</code> (which shifts all the indexes greater than i)</li>\n<li>etc ...</li>\n</ul>\n<p>(your first method had the same caveat)</p>\n</hr>", "LastEditorUserId": "86072", "LastActivityDate": "2012-10-01T14:34:05.273", "Score": "6", "CreationDate": "2012-10-01T14:12:19.527", "ParentId": "12674749", "CommentCount": "2", "OwnerUserId": "86072", "LastEditDate": "2012-10-01T14:34:05.273"}, "12674886": {"Id": "12674886", "PostTypeId": "2", "Body": "<p>Instead of storing the elements in the large vector directly, you could store pointers to the individual elements. So instead of a <code>std::vector&lt;int&gt;</code> you use a <code>std::vector&lt;int *&gt;</code>. Even when the vector reallocates its content, the addresses of the data itself won't change, so other pointers to it will stay valid. This, however, requires you to create each element you enter into the vector with <code>new</code> and then manually <code>delete</code> any data which is removed.</p>\n", "LastActivityDate": "2012-10-01T14:07:09.490", "CommentCount": "1", "CreationDate": "2012-10-01T14:07:09.490", "ParentId": "12674749", "Score": "1", "OwnerUserId": "1620671"}, "12674919": {"Id": "12674919", "PostTypeId": "2", "Body": "<p>Maybe you should have a look at boost::container::stable_vector:\n<a href=\"http://www.boost.org/doc/libs/1_51_0/doc/html/boost/container/stable_vector.html\" rel=\"nofollow\">http://www.boost.org/doc/libs/1_51_0/doc/html/boost/container/stable_vector.html</a></p>\n", "LastActivityDate": "2012-10-01T14:08:59.610", "CommentCount": "1", "CreationDate": "2012-10-01T14:08:59.610", "ParentId": "12674749", "Score": "4", "OwnerUserId": "1711980"}, "12674927": {"Id": "12674927", "PostTypeId": "2", "Body": "<p>I apologise, I was plain wrong in my comment. <code>N3337 23.3.6.3 vector capacity paragraph 5</code>:</p>\n<blockquote>\n<p id=\"so_12674749_12674927_0\">Remarks: Reallocation invalidates all the references, pointers, and\n  iterators referring to the elements in the sequence. It is guaranteed\n  that no reallocation takes place during insertions that happen after a\n  call to <code>reserve()</code> until the time when an insertion would make the\n  size of the vector greater than the value of <code>capacity()</code>.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-01T14:09:22.583", "CommentCount": "1", "CreationDate": "2012-10-01T14:09:22.583", "ParentId": "12674749", "Score": "0", "OwnerUserId": "1171191"}, "bq_ids": {"n4140": {"so_12674749_12674927_0": {"length": 29, "quality": 0.90625, "section_id": 972}}, "n3337": {"so_12674749_12674927_0": {"length": 31, "quality": 0.96875, "section_id": 961}}, "n4659": {"so_12674749_12674927_0": {"length": 29, "quality": 0.90625, "section_id": 1034}}}});