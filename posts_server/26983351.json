post_cb({"26992473": {"ParentId": "26983351", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-11-18T10:51:18.360", "OwnerUserId": "775806", "CommunityOwnedDate": "2014-11-18T10:51:18.360", "Id": "26992473", "Score": "2", "Body": "<h2>The solution</h2>\n<p>Move the two lines that start with template class to the end of the source file.</p>\n<h2>The explanation</h2>\n<p>This source uses explicit template instantiation (14.7.2). It is perfectly OK to define the template in the source file (not in the header) as long as only the explicit instantiations of the template are used in the entire program. In this case, these would be <code>MoveList&lt;MoveEntry&gt;</code> and <code>MoveList&lt;RootEntry&gt;</code>.</p>\n<p>However, there is a problem: the explicit specialization must appear <em>after</em> the template <em>definition</em> (14.7.2/4)</p>\n<blockquote>\n<p id=\"so_26983351_26992473_0\">A declaration of a function template, a variable template, a member function or static data member of a class template, or a member function template of a class or class template shall precede an explicit instantiation of that entity. A definition of a class template, a member class of a class template, or a member class template of a class or class template shall precede an explicit instantiation of that entity unless the explicit instantiation is preceded by an explicit specialization of the entity with the same template arguments.</p>\n</blockquote>\n<p>Why g++ 4.9 does not enforce this is anyone's guess.</p>\n", "LastActivityDate": "2014-11-18T10:51:18.360"}, "26983351": {"CommentCount": "5", "ViewCount": "481", "PostTypeId": "1", "LastEditorUserId": "1814909", "CreationDate": "2014-11-17T22:41:38.050", "LastActivityDate": "2014-11-18T10:51:18.360", "Title": "Why does this c++ code not compile in g++ 4.8.2", "AcceptedAnswerId": "26992473", "LastEditDate": "2014-11-17T23:08:48.310", "Id": "26983351", "Score": "1", "Body": "<p>I'm trying to compile C++ pulse chess engine [0] using g++ 4.8.2 (Ubuntu 14.04 environment).</p>\n<p>I get the following errors at linking stage:</p>\n<pre><code>Linking CXX executable pulse-\nCMakeFiles/pulse.dir/main.cpp.o: In function `pulse::MoveGenerator::MoveGenerator()':\n/home/user/cpp/movegenerator.h:15: undefined reference to `pulse::MoveList&lt;pulse::MoveEntry&gt;::MoveList()'\nlibcore.so: undefined reference to `pulse::MoveList&lt;pulse::MoveEntry&gt;::rateFromMVVLVA()'\nlibcore.so: undefined reference to `pulse::MoveList&lt;pulse::RootEntry&gt;::sort()'\nlibcore.so: undefined reference to `pulse::MoveList&lt;pulse::RootEntry&gt;::MoveList()'\nlibcore.so: undefined reference to `pulse::MoveList&lt;pulse::MoveEntry&gt;::sort()'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>When I run the command:</p>\n<pre><code>g++ -std=c++11 -c movelist.cpp &amp;&amp; nm movelist.o | grep sort\n</code></pre>\n<p>I get the output</p>\n<pre><code>0000000000000000 W _ZN5pulse8MoveListINS_9MoveEntryEE4sortEv\n0000000000000000 W _ZN5pulse8MoveListINS_9RootEntryEE4sortEv\n</code></pre>\n<p>when using 4.9.1, but no output when using 4.8.2.</p>\n<p><strong>Why is that g++ 4.9.1 generates the sort function while 4.8.2 does not, is it a bug in the compiler or in the pulse source code?</strong></p>\n<p><strong>EDIT:</strong></p>\n<p>As stated in the pointed out duplicate question \"Why can templates only be implemented in the header file?\", I don't get it then, how does it work in g++ 4.9.1?\nThe movelist header:</p>\n<pre><code>#include \"value.h\"\n#include \"move.h\"\n\n#include &lt;array&gt;\n#include &lt;memory&gt;\n\nnamespace pulse {\n\n/**\n * This class stores our moves for a specific position. For the root node we\n * will populate pv for every root move.\n */\ntemplate&lt;class T&gt; \nclass MoveList {\nprivate:\n  static const int MAX_MOVES = 256;\n\npublic:\n  std::array&lt;std::shared_ptr&lt;T&gt;, MAX_MOVES&gt; entries;\n  int size = 0; \n\n  MoveList();\n\n  void sort();\n  void rateFromMVVLVA();\n};\n\nclass MoveVariation {\npublic:\n  std::array&lt;int, Depth::MAX_PLY&gt; moves;\n  int size = 0; \n};\n\nclass MoveEntry {\npublic:\n  int move = Move::NOMOVE;\n  int value = Value::NOVALUE;\n};\n\nclass RootEntry : public MoveEntry {\npublic:\n  MoveVariation pv;\n};\n\n}\n</code></pre>\n<p>The movelist source:</p>\n<pre><code>#include \"movelist.h\"\n\n#include &lt;cassert&gt;\n\nnamespace pulse {\n\ntemplate class MoveList&lt;MoveEntry&gt;;\ntemplate class MoveList&lt;RootEntry&gt;;\n\ntemplate&lt;class T&gt;\nMoveList&lt;T&gt;::MoveList() {\n  for (unsigned int i = 0; i &lt; entries.size(); ++i) {\n    entries[i] = std::shared_ptr&lt;T&gt;(new T());\n  }  \n}\n\n/**\n * Sorts the move list using a stable insertion sort.\n */\ntemplate&lt;class T&gt; \nvoid MoveList&lt;T&gt;::sort() {\n  for (int i = 1; i &lt; size; ++i) {\n    std::shared_ptr&lt;T&gt; entry(entries[i]);\n\n    int j = i; \n    while ((j &gt; 0) &amp;&amp; (entries[j - 1]-&gt;value &lt; entry-&gt;value)) {\n      entries[j] = entries[j - 1];\n      --j;\n    }  \n\n    entries[j] = entry;\n  }  \n}\n\n/**\n * Rates the moves in the list according to \"Most Valuable Victim - Least Valuable Aggressor\".\n */\ntemplate&lt;class T&gt; \nvoid MoveList&lt;T&gt;::rateFromMVVLVA() {\n  for (int i = 0; i &lt; size; ++i) {\n    int move = entries[i]-&gt;move;\n    int value = 0; \n\n    int piecetypeValue = PieceType::getValue(Piece::getType(Move::getOriginPiece(move)));\n    value += PieceType::KING_VALUE / piecetypeValue;\n\n    int target = Move::getTargetPiece(move);\n    if (Piece::isValid(target)) {\n      value += 10 * PieceType::getValue(Piece::getType(target));\n    }\n\n    assert(value &gt;= (PieceType::KING_VALUE / PieceType::KING_VALUE)\n      &amp;&amp; value &lt;= (PieceType::KING_VALUE / PieceType::PAWN_VALUE) + 10 * PieceType::QUEEN_VALUE);\n\n    entries[i]-&gt;value = value;\n  }\n}\n</code></pre>\n<p>[0] <a href=\"https://github.com/fluxroot/pulse/tree/master/src/main/cpp\" rel=\"nofollow\">https://github.com/fluxroot/pulse/tree/master/src/main/cpp</a></p>\n", "Tags": "<c++><c++11><g++>", "OwnerUserId": "1814909", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26983351_26992473_0": {"section_id": 253, "quality": 1.0, "length": 48}}, "n3337": {"so_26983351_26992473_0": {"section_id": 244, "quality": 0.9583333333333334, "length": 46}}, "n4659": {"so_26983351_26992473_0": {"section_id": 260, "quality": 1.0, "length": 48}}}});