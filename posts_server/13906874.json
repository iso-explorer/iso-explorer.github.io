post_cb({"bq_ids": {"n4140": {"so_13906874_13907192_1": {"length": 11, "quality": 1.0, "section_id": 240}}, "n3337": {"so_13906874_13907192_1": {"length": 11, "quality": 1.0, "section_id": 232}}, "n4659": {"so_13906874_13907192_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 242}}}, "13906874": {"ViewCount": "294", "Body": "<p>I'm trying to learn something about <code>initializer_list&lt;&gt;</code>. I learned on c++03 so to me, it is new.</p>\n<pre><code>template &lt;typename T&gt;\nunion Matrix4\n{\n    struct\n    {\n        T m00, m01, m02, m03;\n        T m10, m11, m12, m13;\n        T m20, m21, m22, m23;\n        T m30, m31, m32, m33;\n    };\n\n    T m[16];\n    T mm[4][4];\n\n    Matrix4(std::initializer_list&lt;T&gt; values)\n    {\n        if (values.size() != 16)\n        {\n            throw InvalidArgumentException;\n        }\n\n        std::copy(values.begin(), values.end(), m);\n    }\n\n    //error: Implicit instantiation of \"Matrix4&lt;float&gt;\" within its own definition.\n    static Matrix4&lt;float&gt; Identityf = {\n        1.f, 0, 0, 0,\n        0, 1.f, 0, 0,\n        0, 0, 1.f, 0,\n        0, 0, 0, 1.f\n    };\n}\n</code></pre>\n<p>I get what the error is saying. What I don't get is why it is saying it. That is why can't the compiler handle this? </p>\n<p>What I would like to accomplish is something like so:</p>\n<pre><code>typedef Matrix4&lt;float&gt; Matrix4f;\n\nMatrix4f mat = Matrix4f::Identity;\n</code></pre>\n", "AcceptedAnswerId": "13907192", "Title": "Error: Implicit instantiation of \"Class\" within its own definition. c++11", "CreationDate": "2012-12-17T00:22:20.163", "Id": "13906874", "CommentCount": "0", "LastEditDate": "2012-12-18T22:08:26.063", "PostTypeId": "1", "LastEditorUserId": "636019", "LastActivityDate": "2012-12-18T22:08:26.063", "Score": "0", "OwnerUserId": "457577", "Tags": "<c++><c++11><initializer-list>", "AnswerCount": "1"}, "13907192": {"Id": "13907192", "PostTypeId": "2", "Body": "<p>Initializing the static member <code>IdentifyF</code> needs to call the <code>Matrix4</code> constructor, which implicitly instantiates the <code>Matrix4&lt;float&gt;</code> specialization, but at the point where it's instantiated the class template isn't (fully) defined yet.</p>\n<blockquote>\n<p id=\"so_13906874_13907192_0\"><strong>\u00a7 14.7.1 [temp.inst]</strong></p>\n<p id=\"so_13906874_13907192_1\"><strong>-7-</strong> If an implicit instantiation of a class template specialization is required and the template is declared but not defined, the program is ill-formed.</p>\n</blockquote>\n<p>A class (or a class template) is defined at the closing brace of its class body.</p>\n<p>You can make the code work by moving the <code>IdentityF</code> definition out of the class body, to a point where the class template is complete:</p>\n<pre><code>template &lt;typename T&gt;\nunion Matrix4\n{\n    // ...\n\n    static Matrix4&lt;float&gt; Identityf;\n};\n\ntemplate&lt;typename T&gt;\nMatrix&lt;float&gt; Matrix4&lt;T&gt;::Identityf = {\n    1.f, 0, 0, 0,\n    0, 1.f, 0, 0,\n    0, 0, 1.f, 0,\n    0, 0, 0, 1.f\n};\n</code></pre>\n<p>The problem is not related to initializer lists, it would apply to any constructor used at that point (not just a constructor taking an <code>initializer_list</code>)</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2012-12-17T01:32:41.223", "Score": "3", "CreationDate": "2012-12-17T01:20:45.947", "ParentId": "13906874", "CommentCount": "1", "OwnerUserId": "981959", "LastEditDate": "2012-12-17T01:32:41.223"}});