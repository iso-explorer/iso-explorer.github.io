post_cb({"15487085": {"ParentId": "15486928", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Although not the cause of your problem, your code has undefined behaviour because you have illegally placed it inside the <code>std</code> namespace.</p>\n<p>See <a href=\"https://stackoverflow.com/questions/320798/adding-types-to-the-std-namespace\">this question</a> or <a href=\"https://stackoverflow.com/questions/5683794/bad-practice-to-declare-names-in-the-standard-namespace\">this one</a>.</p>\n", "OwnerUserId": "1227469", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:00:13.920", "Id": "15487085", "Score": "2", "CreationDate": "2013-03-18T21:15:16.007", "LastActivityDate": "2013-03-18T21:15:16.007"}, "15486996": {"ParentId": "15486928", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_15486928_15486996_0\">First thing I've noticed: the definition of this method takes place within the header-file. Is that standard procedure?</p>\n</blockquote>\n<p>Yes. Normally the definitions of function templates are put in headers. If they were relegated in a separate <code>.cpp</code> file, the compiler wouldn't be able to instantiate them implicitly when invoked, and unless you take proper action this will result in the linker complaining about undefined references. See <a href=\"https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file\">this Q&amp;A on StackOverflow</a> for more information.</p>\n<blockquote>\n<p id=\"so_15486928_15486996_1\">The call to the method convolve won't work, even though in does possess such a method.</p>\n</blockquote>\n<p><code>convolve()</code> is a non-<code>const</code> member function, and you are trying to invoke it through a reference to <code>const</code>. This is illegal and the compiler is telling you that.</p>\n<hr>\n<p>Moreover, as correctly pointed out by <a href=\"https://stackoverflow.com/users/1227469/jbentley\">JBentley</a> in his answer, you cannot add new declarations or definitions to the <code>std</code> namespace. Per Paragraph 17.6.4.2.1/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15486928_15486996_2\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a\n  namespace within namespace std unless otherwise specified. [...]</p>\n</blockquote>\n</hr>", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:17:11.353", "Id": "15486996", "Score": "6", "CreationDate": "2013-03-18T21:09:11.830", "LastActivityDate": "2013-03-18T21:17:11.640"}, "15486928": {"CommentCount": "3", "AcceptedAnswerId": "15486996", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-03-18T21:05:32.783", "LastActivityDate": "2013-05-13T20:50:46.477", "LastEditDate": "2013-05-13T20:50:46.477", "ViewCount": "181", "FavoriteCount": "1", "Title": "C++ cannot call method (with template) from within templated method", "Id": "15486928", "Score": "5", "Body": "<p>I've got the following method within a header file called 'filter.h':</p>\n<pre><code>namespace std{\n\n//some code\n\ntemplate &lt;class T, class S, class BorderMethod&gt;\ntImage&lt;T&gt; binomial(const tImage&lt;T&gt; &amp;in, const size_t k = 3) {\n   //do some computations\n\n  tImage&lt;T&gt; img = in.convolve&lt;T, BorderMethod&gt;(in, kernel);\n  return img;\n}\n}\n</code></pre>\n<p>First thing I've noticed: the definition of this method takes place within the header-file. Is that standard procedure?</p>\n<p>Now, the actual problem: The call to the method <code>convolve</code> won't work, even though <code>in</code> does possess such a method. Here's the definition of the method <code>convolve</code> within the class <code>tImage&lt;T&gt;</code>:</p>\n<pre><code>tImage&lt;T&gt; convolve(const gravis::tImage&lt;T&gt;&amp; image, const gravis::tArray&lt;typename tImageTraits&lt;T&gt;::Float_t&gt;&amp; kernel);\n</code></pre>\n<p>How do I have to call this function?</p>\n", "Tags": "<c++><templates><methods>", "OwnerUserId": "1373669", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_15486928_15486996_2": {"section_id": 6299, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_15486928_15486996_2": {"section_id": 6056, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_15486928_15486996_2": {"section_id": 7808, "quality": 0.9285714285714286, "length": 13}}}});