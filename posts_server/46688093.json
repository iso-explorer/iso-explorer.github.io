post_cb({"bq_ids": {"n4140": {"so_46688093_46688778_0": {"length": 32, "quality": 0.7441860465116279, "section_id": 6187}}, "n4659": {"so_46688093_46688778_0": {"length": 43, "quality": 1.0, "section_id": 7690}}}, "46688093": {"ViewCount": "309", "LastEditDate": "2017-10-11T12:23:40.570", "Body": "<p>This question seems related to <a href=\"https://stackoverflow.com/questions/43745569\">an existing one</a>, but I do not understand the \"portable workaround\" provided in <a href=\"https://stackoverflow.com/questions/43745569/#43748514\">the answer there</a> (involving <code>const auto this_ = this;</code>) and moreover I think the following example is easier to follow.</p>\n<p>I am playing with the following snippet of C++17 code (<a href=\"https://godbolt.org/g/QZca1m\" rel=\"noreferrer\">live demo</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Test {\n  const char* name_{nullptr};\n  const Test* src_{nullptr};\n\n  constexpr Test(const char* name) noexcept\n    : name_{name}\n  {}\n\n  constexpr Test(const Test&amp; src) noexcept\n    : src_{&amp;src}\n  {\n    name_ = src_-&gt;name_;\n    src_ = nullptr;\n  }\n};\n\ntemplate&lt;char c&gt;\nvoid print_constexpr_char() {\n    std::cout &lt;&lt; c &lt;&lt; std::endl;\n}\n\nint main() {\n  constexpr const char* in = \"x\";\n  constexpr auto foo = Test{in};\n  constexpr auto bar = Test{foo};\n  std::cout &lt;&lt; bar.name_ &lt;&lt; std::endl;\n\n  print_constexpr_char&lt;bar.name_[0]&gt;();\n\n  return 0;\n}\n</code></pre>\n<p>Compilation fails with GCC 7.2 while Clang 5.0.0 does not see any problem. The GCC error essentially reads</p>\n<blockquote>\n<p id=\"so_46688093_46688093_0\">error: the value of 'bar' is not usable in a constant expression</p>\n<p id=\"so_46688093_46688093_1\">note: 'bar' used in its own initializer</p>\n</blockquote>\n<p>I am even more confused after realizing that removing the final <code>print_constexpr_char</code> makes the code compile although it still contains the line <code>constexpr auto bar = Test{foo};</code> which GCC used to complain about (\"used in its own initializer\").</p>\n<ol>\n<li>Which compiler is correct here?</li>\n<li>How to understand the GCC note (if not a bug) that \"using in its own initializer\" is harmful iff the result is subsequently used in a constant expression?</li>\n<li>Is there a valid way/workaround to use pointers in a <code>constexpr</code> constructor as an intermediate stage before transforming the object under construction into the final state which can be stored in a <code>constexpr</code> variable?</li>\n</ol>\n", "Title": "`constexpr` variable \"used in its own initializer\": Clang vs. GCC", "CreationDate": "2017-10-11T12:21:06.143", "LastActivityDate": "2017-10-11T13:04:11.430", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditorUserId": "2615118", "Id": "46688093", "Score": "9", "OwnerUserId": "2615118", "Tags": "<c++><compiler-errors><c++1z><constexpr>", "AnswerCount": "1"}, "46688778": {"Id": "46688778", "PostTypeId": "2", "LastEditDate": "2017-10-11T13:04:11.430", "CommentCount": "6", "LastEditorUserId": "27678", "LastActivityDate": "2017-10-11T13:04:11.430", "CreationDate": "2017-10-11T12:57:15.883", "ParentId": "46688093", "Score": "10", "Body": "<p>GCC is correct to reject the code (however the error message could use some work). You cannot use the address of a variable in a constant expression unless that variable has static storage duration.</p>\n<p><code>foo</code> is not static. If you move it outside of <code>main</code>, things will work. <a href=\"https://wandbox.org/permlink/RswS0DYmaaJBxR0L\" rel=\"noreferrer\">Demo</a></p>\n<p>The line marked below is the problem:</p>\n<pre><code>constexpr Test(const Test&amp; src) noexcept\n: src_{&amp;src} &lt;--- That\n</code></pre>\n<p>Standard reference: (<strong>Emphasis</strong> mine)</p>\n<p>[expr.const]</p>\n<blockquote>\n<p id=\"so_46688093_46688778_0\">A <em>constant expression</em> is either a glvalue core constant expression that refers to an entity that is a permitted\n  result of a constant expression (as defined below), or a prvalue core constant expression whose value satisfies\n  the following constraints:\n  <br/>\n<br/>\n  (5.2) \u2014 if the value is of pointer type, <strong>it contains the address of an object with static storage duration</strong>, the\n  address past the end of such an object (8.7), the address of a function, or a null pointer value,</p>\n</blockquote>\n", "OwnerUserId": "27678"}});