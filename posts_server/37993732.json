post_cb({"bq_ids": {"n4140": {"so_37993732_37994483_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5424}}, "n3337": {"so_37993732_37994483_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 5216}}, "n4659": {"so_37993732_37994483_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 6846}, "so_37993732_37994483_1": {"length": 4, "quality": 0.8, "section_id": 6830}}}, "37993732": {"ViewCount": "193", "Body": "<p>In C++11 or C++14, I'm trying to define a type alias to a constexpr function.</p>\n<p>I tried:</p>\n<pre><code>#include &lt;iostream&gt;\nconstexpr int foo(int i, int j) { return i + j; }\nusing TConstExprFunction  = constexpr int (*)(int i, int j);\n\nint main() {\n  TConstExprFunction f = foo;\n  constexpr int i = f(1, 2);\n  std::cout &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<p>But it fails to compile with g++ and clang++.</p>\n<p>g++:\n<code>error: expected type-specifier before 'constexpr'</code></p>\n<p>clang++:\n<code>error: type name does not allow constexpr specifier to be specified</code></p>\n<p>I have to do as below to make it compile</p>\n<pre><code>#include &lt;iostream&gt;\nconstexpr int foo(int i, int j) { return i + j; }\nusing TConstExprFunction  = int (*)(int i, int j);\n\nint main() {\n  constexpr TConstExprFunction f = foo;\n  constexpr int i = f(1, 2);\n  std::cout &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<p>From clang++'s error message, it seems I can NOT using <code>constexpr</code> for type name.</p>\n<p>So, is it possible to define a type alias to a constexpr function; If yes, how?</p>\n", "AcceptedAnswerId": "37994483", "Title": "Is it possible to define type alias to constexpr function", "CreationDate": "2016-06-23T13:55:49.700", "Id": "37993732", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-06-23T14:37:50.077", "Score": "6", "OwnerUserId": "1030870", "Tags": "<c++><c++11><constexpr><type-alias>", "AnswerCount": "2"}, "37994140": {"Id": "37994140", "PostTypeId": "2", "Body": "<p>You cannot define a type alias to a constexpr function.</p>\n", "LastActivityDate": "2016-06-23T14:12:03.140", "CommentCount": "1", "CreationDate": "2016-06-23T14:12:03.140", "ParentId": "37993732", "Score": "1", "OwnerUserId": "1774667"}, "37994483": {"Id": "37994483", "PostTypeId": "2", "Body": "<p>According to the C++ standard <em>7.1.5/p8 The <code>constexpr</code> specifier [dcl.constexpr]</em> (<strong>Emphasis Mine</strong>): </p>\n<blockquote>\n<p id=\"so_37993732_37994483_0\"><strong>The <code>constexpr</code> specifier has no effect on the type of a <code>constexpr</code>\n  function</strong> or a <code>constexpr</code> constructor.</p>\n</blockquote>\n<p>Also from <em>7 Declarations [dcl.dcl]</em>:</p>\n<blockquote id=\"so_37993732_37994483_1\">\n<pre><code>alias-declaration:\nusing identifier attribute-specifier-seqopt = defining-type-id ;\n</code></pre>\n</blockquote>\n<p><code>constexpr</code> specifier is not part of a function's type. Consequently, you can't do:</p>\n<pre><code>using TConstExprFunction  = constexpr int (*)(int i, int j);\n</code></pre>\n<p>Since after a <code>using TConstExprFunction  =</code> a type is expected.</p>\n", "LastEditorUserId": "2352671", "LastActivityDate": "2016-06-23T14:37:50.077", "Score": "7", "CreationDate": "2016-06-23T14:26:05.787", "ParentId": "37993732", "CommentCount": "0", "OwnerUserId": "2352671", "LastEditDate": "2016-06-23T14:37:50.077"}});