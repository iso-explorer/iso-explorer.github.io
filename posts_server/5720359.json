post_cb({"bq_ids": {"n4140": {"so_5720359_5720418_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 7141}}, "n3337": {"so_5720359_5720418_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6885}}, "n4659": {"so_5720359_5720418_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 8642}}}, "5720423": {"Id": "5720423", "PostTypeId": "2", "Body": "<p>You can always explicitly do the promotion to clearly show your intention:</p>\n<p><code>f(static_cast&lt;int&gt;(e));</code></p>\n", "LastActivityDate": "2011-04-19T17:43:40.003", "CommentCount": "0", "CreationDate": "2011-04-19T17:43:40.003", "ParentId": "5720359", "Score": "1", "OwnerUserId": "251738"}, "5720359": {"ViewCount": "1823", "Body": "<p>Given:</p>\n<pre><code>template&lt;typename T&gt;\nvoid f( T ) {\n}\n\nenum {    // if changed to \"enum E\" it compiles\n  e\n};\n\nint main() {\n  f( e ); // line 10\n}\n</code></pre>\n<p>I get:</p>\n<pre><code>foo.cpp: In function \u2018int main()\u2019:\nfoo.cpp:10: error: no matching function for call to \u2018f(&lt;anonymous enum&gt;)\u2019\n</code></pre>\n<p>Yet if the <code>enum</code> declaration is given a name, it compiles.  Why doesn't it work for an anonymous enum?  Ideally, I'd like it to promote the enum value <code>e</code> to an <code>int</code> and instantiate <code>f(int)</code>.</p>\n", "AcceptedAnswerId": "5720418", "Title": "No matching function call to <anonymous enum>", "CreationDate": "2011-04-19T17:36:42.533", "Id": "5720359", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-12-14T19:53:33.167", "Score": "10", "OwnerUserId": "99089", "Tags": "<c++><templates><enums>", "AnswerCount": "3"}, "8510785": {"Id": "8510785", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_5720359_8510785_0\">Ideally, I'd like it to promote the enum value e to an int and instantiate f(int).</p>\n</blockquote>\n<pre><code>f(+e);\n</code></pre>\n", "LastActivityDate": "2011-12-14T19:53:33.167", "CommentCount": "0", "CreationDate": "2011-12-14T19:53:33.167", "ParentId": "5720359", "Score": "5", "OwnerUserId": "963864"}, "5720418": {"Id": "5720418", "PostTypeId": "2", "Body": "<p>Unnamed type simply cannot be used as a template argument</p>\n<p>C++03 says in <code>14.3.1[temp.arg.type]/2</code></p>\n<blockquote>\n<p id=\"so_5720359_5720418_0\">A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a template-argument for a template type-parameter.</p>\n</blockquote>\n<p>This limitation was lifted in C++0x, and your program compiles with no diagnostics with MSVC++ 2010 and gcc 4.5.2 in C++0x mode.</p>\n", "LastEditorUserId": "273767", "LastActivityDate": "2011-04-19T17:48:28.547", "Score": "10", "CreationDate": "2011-04-19T17:42:24.847", "ParentId": "5720359", "CommentCount": "0", "OwnerUserId": "273767", "LastEditDate": "2011-04-19T17:48:28.547"}});