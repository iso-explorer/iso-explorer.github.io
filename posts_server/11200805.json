post_cb({"11200852": {"ParentId": "11200805", "CommentCount": "0", "CreationDate": "2012-06-26T04:38:58.760", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "11200852", "Score": "7", "Body": "<p>Undefined. You are violating ODR.</p>\n", "LastActivityDate": "2012-06-26T04:38:58.760"}, "11200805": {"CommentCount": "5", "AcceptedAnswerId": "11200894", "CreationDate": "2012-06-26T04:31:08.900", "LastActivityDate": "2012-06-26T05:05:12.327", "PostTypeId": "1", "ViewCount": "401", "FavoriteCount": "2", "Title": "Is it an undefined behavior to have different definitions of an inline function?", "Id": "11200805", "Score": "9", "Body": "<p>Minimal code:</p>\n<pre><code>// --------inline.h--------\nstruct X { \n  static inline void foo ();\n};   \n#ifdef YES\ninline void X::foo () { cout &lt;&lt; \"YES\\n\"; }\n#else\ninline void X::foo () { cout &lt;&lt; \"NO\\n\"; }\n#endif\n\n// --------file1.cpp--------\n#define YES    // &lt;---- \n#include\"inline.h\"\nvoid fun1 ()\n{\n  X::foo();\n}\n\n// --------file2.cpp--------\n#include\"inline.h\"\nvoid fun2 ()\n{\n  X::foo();\n}\n</code></pre>\n<p>If we call <code>fun1()</code> and <code>fun2()</code>, then they will print <code>YES</code> and <code>NO</code> respectively, which means they are referring different function bodies of same <code>X::foo()</code>.</p>\n<p>Irrespective of this should be coded or not, my question is:<br>\nIs this a well defined or undefined behavior ?</br></p>\n", "Tags": "<c++><inline><undefined-behavior><function-prototypes>", "OwnerUserId": "514235", "AnswerCount": "3"}, "11201016": {"ParentId": "11200805", "CommentCount": "3", "CreationDate": "2012-06-26T05:05:12.327", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "11201016", "Score": "4", "Body": "<blockquote>\n<p id=\"so_11200805_11201016_0\">If we call fun1() and fun2(), then they will print YES and NO respectively, which means they are referring different function bodies of same X::foo().</p>\n</blockquote>\n<p>Did you try it? With different optimization levels?</p>\n<p>I get YES and NO, YES and YES, or NO and NO depending on the optimization level and the order in which the compiled objects are presented to the linker.</p>\n<p>Needless to say, this is undefined behavior.</p>\n", "LastActivityDate": "2012-06-26T05:05:12.327"}, "11200894": {"ParentId": "11200805", "CommentCount": "5", "CreationDate": "2012-06-26T04:46:11.750", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "11200894", "Score": "13", "Body": "<p>Yes it is Undefined Behavior.</p>\n<p><strong>Reference:</strong></p>\n<p>C++03 Standard:   </p>\n<p><strong>7.1.2 Function specifiers [dcl.fct.spec]</strong><br>\n<strong>Para 4:</strong></br></p>\n<blockquote>\n<p id=\"so_11200805_11200894_0\"><strong>An inline function shall be defined in every translation unit in which it is used and shall have exactly the same definition in every case (3.2)</strong>. [Note: a call to the inline function may be encountered before its definition appears in the translation unit. ] If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears; no diagnostic is required. An\n  inline function with external linkage shall have the same address in all translation units. A static local variable in an extern inline function always refers to the same object. A string literal in an extern inline function is the same object in different translation units.      </p>\n</blockquote>\n<p>Note: 3.2 refers to the One Definition Rule, Which states:     </p>\n<p><strong>3.2 One definition rule    [basic.def.odr]</strong><br>\n<strong>Para 1:</strong> </br></p>\n<blockquote>\n<p id=\"so_11200805_11200894_1\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type or template.</p>\n</blockquote>\n", "LastActivityDate": "2012-06-26T04:46:11.750"}, "bq_ids": {"n4140": {"so_11200805_11200894_1": {"section_id": 7038, "quality": 1.0, "length": 14}, "so_11200805_11200894_0": {"section_id": 5404, "quality": 0.9857142857142858, "length": 69}}, "n3337": {"so_11200805_11200894_1": {"section_id": 6784, "quality": 1.0, "length": 14}, "so_11200805_11200894_0": {"section_id": 5199, "quality": 0.9857142857142858, "length": 69}}, "n4659": {"so_11200805_11200894_1": {"section_id": 8535, "quality": 1.0, "length": 14}, "so_11200805_11200894_0": {"section_id": 6853, "quality": 0.8857142857142857, "length": 62}}}});