post_cb({"3342839": {"Id": "3342839", "PostTypeId": "2", "Body": "<p>This depends on what you mean by \"inlining\". If something is defined in a header file, it will be compiled separately into each compilation unit that includes it. Whether any <em>calls</em> to the function will be inlined will be up to the compiler.</p>\n", "LastActivityDate": "2010-07-27T10:52:54.693", "CommentCount": "0", "CreationDate": "2010-07-27T10:52:54.693", "ParentId": "3342816", "Score": "3", "OwnerUserId": "227267"}, "3343046": {"Id": "3343046", "PostTypeId": "2", "Body": "<p>Any function defined within the class (like your GetNumber example) rather than just declared  is implicitly <code>inline</code>. What that means is that it's equivilent to using the <code>inline</code> keyword, so multiple inclusions of the header will not cause link errors due to multiple definitions of those functions.</p>\n<p>Most modern compiler treat <code>inline</code> as a linkage command and nothing more. Some compilers provide stronger keywords such as CL's <code>__forceinline</code> which mean 'inline this if it's possible to do so'.</p>\n<p>So you're both right and both wrong to a degree.</p>\n", "LastEditorUserId": "59379", "LastActivityDate": "2010-07-27T14:54:52.747", "Score": "10", "CreationDate": "2010-07-27T11:20:06.667", "ParentId": "3342816", "CommentCount": "2", "LastEditDate": "2010-07-27T14:54:52.747", "OwnerUserId": "59379"}, "3342816": {"ViewCount": "3031", "Body": "<p>I just had a discussion with a coworker concerning code in header files:</p>\n<p>He says that code defined in header files will always be inlined by the compiler (like the code from the function GetNumber() in my example header). I say it will be inlined sometimes, whenever the compiler decides to do so. So which one of us has to bring a cake to work for telling filthy lies? Or maybe we are both wrong...?</p>\n<p>MyClass.hpp</p>\n<pre><code>   class MyClass\n    {\n    public:\n    MyClass();\n    ~MyClass();\n\n    int GetNumber() const \n    {\n     //...; \n     return m_number;\n    };\n\n    private:\n    int m_number;\n    };\n</code></pre>\n", "AcceptedAnswerId": "3343046", "Title": "Code in header files will always be inlined?", "CreationDate": "2010-07-27T10:49:20.030", "Id": "3342816", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2010-07-27T14:54:52.747", "Score": "13", "OwnerUserId": "220636", "Tags": "<c++><inline>", "AnswerCount": "7"}, "3342921": {"Id": "3342921", "PostTypeId": "2", "Body": "<p><strong><em>Class member function defined</em></strong> (as opposed to only <em>declared</em>) in the class' definition are <strong><em>implicitly</em></strong> <code>inline</code>. Other code in headers is not. </p>\n<p>You can easily check this: Create a small C++ project with a header and two implementation files, define a function </p>\n<pre><code>void print(std::ostream&amp; os)\n{\n  os &lt;&lt; \"Hello, world!\\n\";\n}\n</code></pre>\n<p>in the header and include that header in both implementation files. The linker will now complain that the function is defined twice. Put an <code>inline</code> before the function definition and the error will disappear. </p>\n<p>There are, however, a few more irregularities. For example, a constant definition will automatically get external linkage. Therefore, a </p>\n<pre><code>const int answer = 42;\n</code></pre>\n<p>in a header will not make the linker complain about multiple definitions of <code>answer</code>, while </p>\n<pre><code>int question;\n</code></pre>\n<p>will. </p>\n", "LastEditorUserId": "140719", "LastActivityDate": "2010-07-27T11:10:12.747", "Score": "2", "CreationDate": "2010-07-27T11:04:39.313", "ParentId": "3342816", "CommentCount": "0", "LastEditDate": "2010-07-27T11:10:12.747", "OwnerUserId": "140719"}, "bq_ids": {"n4140": {"so_3342816_3343011_0": {"length": 7, "quality": 1.0, "section_id": 5403}}, "n3337": {"so_3342816_3343011_0": {"length": 7, "quality": 1.0, "section_id": 5198}}, "n4659": {"so_3342816_3343011_0": {"length": 7, "quality": 1.0, "section_id": 6851}}}, "3342885": {"Id": "3342885", "PostTypeId": "2", "Body": "<p>Your pal is wrong, you're right.</p>\n<p>Inlining do not depends on where the code is (header or not). After preprocessing there is no headers or non-headers. Whole unit is a single file, it contains all included stuff.</p>\n<p>Try running gcc preprocessor then you will see:</p>\n<pre><code>gcc -E some_source_file_with_includes\n</code></pre>\n", "LastEditorUserId": "273580", "LastActivityDate": "2010-07-27T11:07:12.777", "Score": "7", "CreationDate": "2010-07-27T11:00:10.093", "ParentId": "3342816", "CommentCount": "3", "LastEditDate": "2010-07-27T11:07:12.777", "OwnerUserId": "273580"}, "3343011": {"Id": "3343011", "PostTypeId": "2", "Body": "<p>Actually both are correct. The way you guys meant is bit different. (<em>I guess)</em></p>\n<p>From the C++ standard doc for inline function,</p>\n<blockquote>\n<ol>\n<li>A function declaration (8.3.5, 9.3,\n  11.4) with an inline specifier declares an inline function.</li>\n</ol>\n<p id=\"so_3342816_3343011_0\"><strong>2. A function defined within a class\n      definition is an inline function.</strong></p>\n</blockquote>\n<p>So as your colleague said, it <strong>is indeed inline function</strong> .</p>\n<p>But <strong>the code substitution</strong> for the inline function instead of the normal function call <strong>is dependent on the compiler</strong>. (<em>I hope this is what YOU mean</em>) Even if the compiler doesn't substitute it is still an inline function.</p>\n<p>Hope it clears your concern..</p>\n", "LastActivityDate": "2010-07-27T11:15:00.067", "CommentCount": "10", "CreationDate": "2010-07-27T11:15:00.067", "ParentId": "3342816", "Score": "3", "OwnerUserId": "249490"}, "3342831": {"Id": "3342831", "PostTypeId": "2", "Body": "<p>That's not true, only code in member functions will be inlined (should the compiler decide to do so) if specified within the class declaration. It must allow the members to be defined though, so they might be declared as the equivalent of C's <code>static</code> (which will allow it to be used within the compilation unit, but cannot be linked to other object files), which will put one version in each object file. Try it yourself, you'll notice that unless you specify the inline keyword for anything outside the class declaration, you'll get duplicates.</p>\n", "LastActivityDate": "2010-07-27T10:52:00.610", "CommentCount": "0", "CreationDate": "2010-07-27T10:52:00.610", "ParentId": "3342816", "Score": "1", "OwnerUserId": "46991"}, "3342837": {"Id": "3342837", "PostTypeId": "2", "Body": "<p>The compiler decides. Even using <code>_inline</code> only tells the compiler you prefer inline code, but the compiler's cost/benefit analyser can decide otherwise.</p>\n<p>You can use <code>_forceinline</code> if you're using <a href=\"http://msdn.microsoft.com/en-us/library/z8y1yy88%28VS.80%29.aspx\" rel=\"nofollow noreferrer\">Microsoft C++</a> to make the code inline, but that could result in larger binaries.</p>\n", "LastActivityDate": "2010-07-27T10:52:42.790", "CommentCount": "1", "CreationDate": "2010-07-27T10:52:42.790", "ParentId": "3342816", "Score": "1", "OwnerUserId": "107142"}});