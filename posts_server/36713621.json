post_cb({"36714175": {"Id": "36714175", "PostTypeId": "2", "Body": "<p>Your second case will not compile, because the assignment <code>*pointer = &amp;number</code> involves incompatible types (<code>int</code> on the left, a pointer to <code>int</code> on the right) which makes the assignment invalid.</p>\n<p>If you somehow coerce the assignment into compiling, then <code>pointer</code> is not initialised.  Accessing its value, let alone dereferencing it (e.g. evaluating <code>*pointer</code> or assigning to it as in <code>*pointer = number</code> or <code>*pointer = 5</code>) gives undefined behaviour.    Anything can happen then .... depending on circumstances, a common result of undefined behaviour is an abnormal program termination.</p>\n", "LastActivityDate": "2016-04-19T09:25:55.983", "CommentCount": "0", "CreationDate": "2016-04-19T09:25:55.983", "ParentId": "36713621", "Score": "2", "OwnerUserId": "4706785"}, "36716803": {"Id": "36716803", "PostTypeId": "2", "Body": "<p>Analogy from the department of far-fetched analogies:</p>\n<p>You use pointers many times every day without even thinking about it.  </p>\n<p>A pointer is an <em>indirection</em> - it tells you <em>where</em> something is, or how it can be reached, but not <em>what</em> that thing is.<br>\n(In a typed language, you can know what <em>kind</em> of thing it is, but that's another matter.)</br></p>\n<p>Consider, for example, telephone numbers.</p>\n<p>These tell you how to reach the person that the phone number belongs to.<br>\nOver time, that person may change - perhaps somebody didn't pay their bills and the number was reassigned - but as long as the number is valid, you can use it to reach a person.</br></p>\n<p>Using this analogy, we can define the following operations:</p>\n<ul>\n<li><code>&amp;person</code> gives you a person's phone number, and</li>\n<li><code>*number</code> gives you the person that the number belongs to.</li>\n</ul>\n<p>Some rules:</p>\n<ul>\n<li>There are only two types in this language - persons and phone numbers.  </li>\n<li>Only persons can have phone numbers; <code>&amp;number</code> is an error, as is <code>*person</code>.</li>\n<li>An unspecified phone number reaches the General Manager of Customer Services at Acme, Inc.  </li>\n</ul>\n<p>Now, your first example would translate to</p>\n<pre><code>PhoneNumber n;\nPerson Bob;\nn = &amp;Bob;\n</code></pre>\n<p>which makes sense; <code>n</code> now holds Bob's phone number.   </p>\n<p>Your second example would translate to</p>\n<pre><code>PhoneNumber n;\nPerson Bob;\n*n = &amp;Bob;\n</code></pre>\n<p>which would say \"replace the General Manager of Acme Inc's Customer Services with Bob's phone number\", which makes no sense at all.</p>\n<p>And your final question,</p>\n<blockquote>\n<p id=\"so_36713621_36716803_0\">Here does pointer contain the value 5 and *pointer holds the address of number?</p>\n</blockquote>\n<p>would translate to </p>\n<blockquote>\n<p id=\"so_36713621_36716803_1\">Is this phone number the same thing as Bob, and if you call it, will Bob's phone number answer?</p>\n</blockquote>\n<p>which I am sure you can see is a rather strange question.</p>\n", "LastActivityDate": "2016-04-19T11:17:13.203", "CommentCount": "0", "CreationDate": "2016-04-19T11:17:13.203", "ParentId": "36713621", "Score": "2", "OwnerUserId": "404970"}, "36714165": {"Id": "36714165", "PostTypeId": "2", "Body": "<p>In</p>\n<pre><code>int *pointer;\nint number = 5;\n*pointer = &amp;number;\n</code></pre>\n<p>you never assign a valid address to <code>pointer</code>, so dereferencing that pointer (as is done by the expression <code>*pointer</code>) is not valid.</p>\n", "LastActivityDate": "2016-04-19T09:25:25.403", "CommentCount": "0", "CreationDate": "2016-04-19T09:25:25.403", "ParentId": "36713621", "Score": "3", "OwnerUserId": "91757"}, "bq_ids": {"n4140": {"so_36713621_36716803_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7223}, "so_36713621_36714381_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7223}}, "n3337": {"so_36713621_36716803_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 6967}, "so_36713621_36714381_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 6967}}, "n4659": {"so_36713621_36716803_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 8732}, "so_36713621_36714381_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 8732}}}, "36714333": {"Id": "36714333", "PostTypeId": "2", "Body": "<p><code>*pointer = &amp;number;</code> is not valid C. </p>\n<p><code>*pointer</code> is of type <code>int</code> and <code>&amp;number</code> is of type <code>int*</code>. This isn't a valid form of assignment and will not compile on a standard C compiler.</p>\n<p>You can store numbers inside pointer variables, but then you must use an explicit cast to force a type conversion. Some compilers allow it without an explicit cast, but note that doing so is a non-standard extension.</p>\n<p>And of course, note that you haven't set <code>pointer</code> to point at an allocated memory address, so you can't store anything inside where it points.</p>\n<p>If you do an explicit cast such as </p>\n<pre><code>pointer = &amp;something;\n*pointer = (int)&amp;number;\n</code></pre>\n<p>then it is allowed in C, but if you try to de-reference that pointer, the behavior is implementation-defined. It could possibly also be undefined behavior in case of misalignment etc. See C11 6.3.2.3:</p>\n<blockquote>\n<p id=\"so_36713621_36714333_0\">An integer may be converted to any pointer type. Except as previously\n  specified, the result is implementation-defined, might not be\n  correctly aligned, might not point to an entity of the referenced\n  type, and might be a trap representation.</p>\n</blockquote>\n", "LastActivityDate": "2016-04-19T09:32:40.897", "CommentCount": "2", "CreationDate": "2016-04-19T09:32:40.897", "ParentId": "36713621", "Score": "2", "OwnerUserId": "584518"}, "36717204": {"Id": "36717204", "PostTypeId": "2", "Body": "<p>When you create a pointer variable, initially it will have garbage value (let say 300 address location). Hence when you dereference pointer(*300), it would give another garbage value(value at 300 address location) or error (strictly speaking anything may happen depending on your computer). </p>\n<p>In the third step, &amp;number:- which is also another number and your are trying to assign a number to *pointer(may be another number) which not possible. (It is like this:- 5=6). Hence it will be an error. </p>\n", "LastActivityDate": "2016-04-19T11:35:14.260", "CommentCount": "0", "CreationDate": "2016-04-19T11:35:14.260", "ParentId": "36713621", "Score": "1", "OwnerUserId": "4633112"}, "36714381": {"Id": "36714381", "PostTypeId": "2", "Body": "<p>For you to write an assignment <code>x = y</code>, both <code>x</code> and <code>y</code> must be, or be implicitly convertible to, the same type (or <code>x</code> must have a user-defined assignment operator taking an argument matching the type of <code>y</code>, or ... OK, there are a few possibilities, but you get the idea).</p>\n<p>Now, let's look at the statement</p>\n<pre><code>*pointer = &amp;number;\n</code></pre>\n<p>Here, <code>*pointer</code> has type <code>int&amp;</code> - you followed the pointer to get a (reference to) the integer stored at that location. Let's ignore, for now, the fact that your pointer was uninitialized and following it results in undefined behaviour.</p>\n<p>The right hand side, <code>&amp;number</code>, is taking a pointer to an integer variable, so the type is <code>int*</code>.</p>\n<p>So, the expression doesn't make sense at all, just in terms of the type system: there is no way to assign <code>int*</code> to <code>int&amp;</code>. It doesn't <em>mean</em> anything.</p>\n<p>Let's relate it back to the English language of your question</p>\n<blockquote>\n<p id=\"so_36713621_36714381_0\">Here does pointer contain the value 5 and *pointer holds the address of number?</p>\n</blockquote>\n<p>That translates directly to the type system, and hence <em>also</em> doesn't mean anything. Again, we can break it down</p>\n<ul>\n<li><blockquote>\n<p id=\"so_36713621_36714381_1\">does pointer contain the value 5</p>\n</blockquote>\n<p>a pointer contains a <em>location</em>. The only time it would make sense to talk about a pointer having a literal value (other than <code>nullptr</code>) would be on a platform where there were well-known addresses - this is rare, and '5' is very unlikely to be a well-formed address anyway</p></li>\n<li><blockquote>\n<p id=\"so_36713621_36714381_2\">*pointer holds the address</p>\n</blockquote>\n<p>well, there is a case where <code>*pointer</code> could hold an address - it's where <code>*pointer</code> is itself is a pointer, meaning the variable <code>pointer</code> is a pointer-to-pointer such as <code>int **</code>. That isn't the case here: we <em>know</em> the type of <code>*pointer</code> in your code, and it is <code>int&amp;</code>, not <code>int*</code>.</p></li>\n</ul>\n", "LastEditorUserId": "212858", "LastActivityDate": "2016-04-19T14:09:06.843", "Score": "1", "CreationDate": "2016-04-19T09:34:39.230", "ParentId": "36713621", "CommentCount": "0", "OwnerUserId": "212858", "LastEditDate": "2016-04-19T14:09:06.843"}, "36713621": {"ViewCount": "130", "Body": "<p>Normal pointer usage as I have been reading in a book is the following:</p>\n<pre><code>int *pointer;\nint number = 5;\npointer = &amp;number; \n</code></pre>\n<p>Then *pointer has a value of 5.\nBut does this work the other way around? I mean:</p>\n<pre><code>int *pointer;\nint number = 5;\n*pointer = &amp;number;\n</code></pre>\n<p>Here does pointer contain the value 5 and *pointer holds the address of number?</p>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "36716803", "Title": "Can a pointer point to a value and the pointer value point to the address?", "CreationDate": "2016-04-19T09:03:25.850", "Id": "36713621", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-04-19T09:13:48.887", "LastEditorUserId": "898348", "LastActivityDate": "2016-04-19T14:09:06.843", "Score": "0", "OwnerUserId": "4190758", "Tags": "<c++><c><pointers><reference><dereference>", "AnswerCount": "6"}});