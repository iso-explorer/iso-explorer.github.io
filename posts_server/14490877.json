post_cb({"14490951": {"Id": "14490951", "PostTypeId": "2", "Body": "<p>It seems like you're expecting the <code>const</code> reference to extend the lifetime of the temporary. There are certain situations where this doesn't occur. One of those situations is when returning a temporary:</p>\n<blockquote>\n<p id=\"so_14490877_14490951_0\">The second context [in which temporaries are destroyed at a different point than the end of the full-expression] is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<p id=\"so_14490877_14490951_1\">[...]</p>\n<ul>\n<li>The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the end of the full-expression in the return statement.</li>\n</ul>\n</blockquote>\n<p>Since calling a member function of the object returned by <code>foo()</code> will necessitate an lvalue-to-rvalue conversion and the object is invalid (not derived from type <code>base</code>), you get undefined behaviour:</p>\n<blockquote>\n<p id=\"so_14490877_14490951_2\">If the object to which the glvalue refers is not an object of type <code>T</code> and is not an object of a type derived from <code>T</code>, or if the object is uninitialized, a program that necessitates this conversion has undefined behavior.</p>\n</blockquote>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-01-23T23:02:59.577", "Score": "5", "CreationDate": "2013-01-23T22:56:06.670", "ParentId": "14490877", "CommentCount": "0", "OwnerUserId": "150634", "LastEditDate": "2013-01-23T23:02:59.577"}, "14490912": {"Id": "14490912", "PostTypeId": "2", "Body": "<p>You're returning a reference to a temporary which is destructed <strike>when the function ends</strike> at the end of the <code>return</code> statement and you get undefined behaviour.</p>\n<p>You cannot return any kind of reference to a temporary and if you return a <code>base</code> by value you'll get slicing, so if you really want this to work, you should return a <code>std::unique_ptr&lt;base&gt;</code>.</p>\n", "LastEditorUserId": "726361", "LastActivityDate": "2013-01-23T22:58:15.113", "Score": "8", "CreationDate": "2013-01-23T22:53:13.423", "ParentId": "14490877", "CommentCount": "6", "OwnerUserId": "726361", "LastEditDate": "2013-01-23T22:58:15.113"}, "14490963": {"Id": "14490963", "PostTypeId": "2", "Body": "<p>Your temporary 'derived()' object is allocated on the stack. It might have something to do with the object up-casting.</p>\n<blockquote>\n<p id=\"so_14490877_14490963_0\">const base&amp; foo() { derived *d =  new derived(); return *d; }</p>\n</blockquote>\n<p>Works just fine, for me.</p>\n", "LastActivityDate": "2013-01-23T22:57:11.593", "CommentCount": "2", "CreationDate": "2013-01-23T22:57:11.593", "ParentId": "14490877", "Score": "0", "OwnerUserId": "1527852"}, "14490959": {"Id": "14490959", "PostTypeId": "2", "Body": "<p>There is no object during the call, the local object was deleted. There will be no vtable to look at. Try: </p>\n<pre><code>base&amp; foo() { return *new derived(); }\n</code></pre>\n", "LastActivityDate": "2013-01-23T22:56:45.213", "CommentCount": "1", "CreationDate": "2013-01-23T22:56:45.213", "ParentId": "14490877", "Score": "0", "OwnerUserId": "1458030"}, "bq_ids": {"n4140": {"so_14490877_14490951_2": {"length": 8, "quality": 0.5714285714285714, "section_id": 5768}, "so_14490877_14490951_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 382}, "so_14490877_14490963_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 404}}, "n3337": {"so_14490877_14490951_2": {"length": 14, "quality": 1.0, "section_id": 5}, "so_14490877_14490951_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 373}, "so_14490877_14490963_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 395}}, "n4659": {"so_14490877_14490951_2": {"length": 8, "quality": 0.5714285714285714, "section_id": 7225}, "so_14490877_14490951_0": {"length": 18, "quality": 0.6428571428571429, "section_id": 397}, "so_14490877_14490963_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 422}}}, "14490925": {"Id": "14490925", "PostTypeId": "2", "Body": "<p>I don't think you can return references to objects like that. The derived() instance goes out of scope as soon as foo() returns. Have</p>\n<pre><code>base *foo() { return new derived(); }\n</code></pre>\n<p>and</p>\n<pre><code>foo()-&gt;virt();\n</code></pre>\n<p>should work.</p>\n", "LastActivityDate": "2013-01-23T22:54:29.153", "CommentCount": "4", "CreationDate": "2013-01-23T22:54:29.153", "ParentId": "14490877", "Score": "3", "OwnerUserId": "2004272"}, "14491152": {"Id": "14491152", "PostTypeId": "2", "Body": "<p>Change the problem piece to this:</p>\n<pre><code>class A\u00a0{\npublic:\n  const base &amp;foo() { return d; }\nprivate:\n  derived d;\n};\n</code></pre>\n<p>This way the lifetime of the derived object is as long as A's lifetime, and there will never be any problems.</p>\n", "LastActivityDate": "2013-01-23T23:12:09.033", "CommentCount": "1", "CreationDate": "2013-01-23T23:12:09.033", "ParentId": "14490877", "Score": "0", "OwnerUserId": "813009"}, "14490877": {"ViewCount": "597", "Body": "<p>As I understand temporaries, the following code should work, but it doesn't.</p>\n<pre><code>struct base\n{\n    virtual~base() {}\n    virtual void virt()const=0;\n};\nstruct derived:public base\n{\n    virtual void virt()const {}\n};\n\nconst base&amp; foo() {return derived();}\n\nint main()\n{\n    foo().virt();\n    return 0;\n}\n</code></pre>\n<p>The call to virt() gives a \"pure virtual function called\" error. Why is that, and what should I do?</p>\n", "AcceptedAnswerId": "14490951", "Title": "c++ temporary - \"pure virtual method called\"", "CreationDate": "2013-01-23T22:50:08.810", "Id": "14490877", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-01-23T23:12:09.033", "Score": "5", "OwnerUserId": "576812", "Tags": "<c++><virtual-functions><temporary><pure-virtual>", "AnswerCount": "6"}});