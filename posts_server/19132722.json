post_cb({"19132722": {"CommentCount": "8", "AcceptedAnswerId": "19135000", "LastEditDate": "2013-10-02T08:19:55.443", "LastEditorUserId": "1056003", "CreationDate": "2013-10-02T08:18:39.853", "LastActivityDate": "2015-12-03T09:18:07.647", "PostTypeId": "1", "ViewCount": "428", "Title": "What is the hash of a disengaged std::optional<T> object?", "Id": "19132722", "OwnerUserId": "748175", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/utility/optional/hash\">This page</a> from cppreference mentions that <code>std::hash</code> has been specialized for <code>std::optional</code>, but doesn\u2019t specify the behavior when the object is disengaged. I can think of different behaviors:</p>\n<ul>\n<li>It could throw a <code>std::bad_optional_access</code>, to be consistent with <code>std::optional::value</code></li>\n<li>It could return the same hash for every disengaged <code>std::optional&lt;T&gt;</code>, this way 2 disengaged object would have the same hash.</li>\n<li>It could return a <code>std::optional&lt;std::hash&lt;std::optional&lt;T&gt;&gt;&gt;</code></li>\n</ul>\n", "Tags": "<c++><hash><standard-library><optional><c++14>", "Score": "7", "AnswerCount": "2"}, "bq_ids": {"n4659": {"so_19132722_19135000_0": {"section_id": 5175, "quality": 0.8181818181818182, "length": 9}}}, "34061983": {"ParentId": "19132722", "CommentCount": "0", "Body": "<p>I am not sure if it is relevant anymore, as C++14 does not have <code>std::optional</code> ultimately. The intention (although not reflected in the standardese initially) has always been that the hash of a disengaged optional object returns an unspecified value, as Jonathan said.</p>\n<p>This intent is reflected in the <a href=\"https://raw.githubusercontent.com/cplusplus/fundamentals-ts/v2/fundamentals-ts.html\" rel=\"nofollow\">Fundamentals TS</a>.</p>\n<p>The idea is that the implementation of the Standard Library chooses how it wants to represent a disengaged <code>optional&lt;T&gt;</code> and documents it itself. It can choose a different value for different types, and also a different value in debug and release mode.</p>\n", "OwnerUserId": "838509", "PostTypeId": "2", "Id": "34061983", "Score": "1", "CreationDate": "2015-12-03T09:18:07.647", "LastActivityDate": "2015-12-03T09:18:07.647"}, "19135000": {"ParentId": "19132722", "CommentCount": "4", "Body": "<p>The C++14 CD said in [optional.hash]/3:</p>\n<blockquote>\n<p id=\"so_19132722_19135000_0\">For an object <code>o</code> of type <code>optional&lt;T&gt;</code>, if <code>bool(o) == true</code>, <code>hash&lt;optional&lt;T&gt;&gt;()(o)</code> shall evaluate to the same value as <code>hash&lt;T&gt;()(*o)</code>.</p>\n</blockquote>\n<p>So I would say it's unspecified what the hash function returns for a disengaged object.</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "19135000", "Score": "6", "CreationDate": "2013-10-02T10:36:39.247", "LastActivityDate": "2013-10-02T10:36:39.247"}});