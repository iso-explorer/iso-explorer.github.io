post_cb({"2549957": {"CommentCount": "0", "ViewCount": "505", "CreationDate": "2010-03-31T01:57:25.280", "LastActivityDate": "2010-03-31T02:49:10.117", "Title": "comparing two end() iterators", "AcceptedAnswerId": "2549991", "PostTypeId": "1", "Id": "2549957", "Score": "3", "Body": "<pre><code>list&lt;int&gt; foo;\nlist&lt;int&gt; foo2;\nlist&lt;int&gt;::iterator foo_end = foo.end();\nlist&lt;int&gt;::iterator foo2_end = foo2.end();\n\nfor (list&lt;int&gt;::iterator it = foo.begin(); it != foo2_end; ++foo) &lt;- notice != comparison here\n{\n   ...\n</code></pre>\n<p>it this allowed? will it work correctly.</p>\n<p>I am inclined to think that this is implementation dependent, anyone knows if standard says anything about this?</p>\n", "Tags": "<c++><stl><iterator>", "OwnerUserId": "305625", "AnswerCount": "3"}, "2549974": {"ParentId": "2549957", "CommentCount": "0", "Body": "<p><strong>Yes</strong> it is <em>allowed</em> (i.e. will compile).<br>\n<strong>No</strong> it will not work correctly.</br></p>\n<p><code>foo2_end</code> points to the end of <code>foo2</code>, not <code>foo</code>, so your iterator will start at the start of <code>foo</code> and end when it reaches the end of <code>foo2</code>, which will be never, because you are iterating <code>foo</code>. Once <code>it</code> iterates past the end of <code>foo</code> you will get a seg-fault.</p>\n<p>Note: I assumed that you meant to write <code>++it</code>, not <code>++foo</code>.</p>\n", "OwnerUserId": "235825", "PostTypeId": "2", "Id": "2549974", "Score": "2", "CreationDate": "2010-03-31T02:03:10.990", "LastActivityDate": "2010-03-31T02:03:10.990"}, "2549991": {"ParentId": "2549957", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There was a defect reported about this (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#446\" rel=\"nofollow noreferrer\">LWG defect 446</a>).  The defect report asked whether it is valid to compare iterators that refer to elements of different containers.</p>\n<p>Notes in the defect report explain that it was certainly the intention that doing so is undefined, but it is not explicitly stated that it is undefined.</p>\n<p>The proposed resolution was to add the following to the standard, explicitly stating that it is undefined:</p>\n<blockquote>\n<p id=\"so_2549957_2549991_0\">The result of directly or indirectly evaluating any comparison function or the binary - operator with two iterator values as arguments that were obtained from two different ranges r1 and r2 (including their past-the-end values) which are not subranges of one common range is undefined, unless explicitly described otherwise.</p>\n</blockquote>\n<p><strong>Edit:</strong>  That language is not included in the C++0x FCD.  This issue was in fact resolved by changes in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3066.html\" rel=\"nofollow noreferrer\">N3066</a>; specifically the following addition (\u00a724.2.5/2):</p>\n<blockquote>\n<p id=\"so_2549957_2549991_1\">The domain of <code>==</code> for forward iterators is that of iterators over the same underlying sequence.</p>\n</blockquote>\n", "OwnerUserId": "151292", "LastEditorUserId": "151292", "LastEditDate": "2010-03-31T02:49:10.117", "Id": "2549991", "Score": "7", "CreationDate": "2010-03-31T02:07:26.527", "LastActivityDate": "2010-03-31T02:49:10.117"}, "bq_ids": {"n4140": {"so_2549957_2549991_1": {"section_id": 5574, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_2549957_2549991_1": {"section_id": 5356, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_2549957_2549991_1": {"section_id": 7021, "quality": 0.8888888888888888, "length": 8}}}, "2549975": {"ParentId": "2549957", "CommentCount": "7", "Body": "<p>It will compile but result in a seg fault. The iterators are object-specific, and comparing two iterators from different objects will always yield an inequality. So the <code>it != foo2_end</code> expression will always evaluate to true, and your program will crash when <code>it</code> reaches <code>foo.end()</code> and you attempt to dereference it.</p>\n", "OwnerUserId": "300187", "PostTypeId": "2", "Id": "2549975", "Score": "1", "CreationDate": "2010-03-31T02:03:18.023", "LastActivityDate": "2010-03-31T02:03:18.023"}});