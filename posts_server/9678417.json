post_cb({"9679503": {"ParentId": "9678417", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_9678417_9679503_0\">For all I know an std::string could be doing anything internally!</p>\n</blockquote>\n<p>For all <em>you</em> know. The standard, of course, describes and demands certain semantics that rule <em>anything</em> out. It says the following on the <code>basic_string</code> template:</p>\n<p><code>\u00a721.4 [basic.string] p1</code></p>\n<blockquote>\n<p id=\"so_9678417_9679503_1\">The class template <code>basic_string</code> describes objects that can store <strong>a sequence consisting of a varying number of arbitrary char-like objects</strong> with the first element of the sequence at position zero. Such a sequence is also called a \u201cstring\u201d if the type of the char-like objects that it holds is clear from context. In the rest of this Clause, the type of the char-like objects held in a <code>basic_string</code> object is designated by <code>charT</code>.</p>\n</blockquote>\n<p>And a \"char-like object\" is defined by the following text:</p>\n<p><code>\u00a721.1 [strings.general] p1</code></p>\n<blockquote>\n<p id=\"so_9678417_9679503_2\">This Clause describes components for manipulating sequences of any non-array POD (3.9) type. In this Clause such types are called <em>char-like types</em> , and objects of char-like types are called <em>char-like objects</em> or simply <em>characters</em>.</p>\n</blockquote>\n<p>This effectively means that you can stuff anything you want into <code>basic_string</code>, as long as it's not an array and it is a POD (see <a href=\"https://stackoverflow.com/q/146452/500104\">this</a> and <a href=\"https://stackoverflow.com/q/4178175/500104\">this</a> for infos on what PODs are). These char-like objects are then manipulated with the help of character traits, which define the specific behaviour of and relationship between them.</p>\n<hr>\n<blockquote>\n<p id=\"so_9678417_9679503_3\">[...] but how do I know if the method doesn't create a new c char array from whatever data it stores inside and return it? </p>\n</blockquote>\n<p>In C++03 exactly this was possible to do for the implementation, a known defect that has since been corrected in C++11:</p>\n<p><code>\u00a72.4.1 [string.require] p5</code></p>\n<blockquote>\n<p id=\"so_9678417_9679503_4\">The char-like objects in a <code>basic_string</code> object shall be stored contiguously. That is, for any <code>basic_string</code> object <code>s</code>, the identity <code>&amp;*(s.begin() + n) == &amp;*s.begin() + n</code> shall hold for all values of <code>n</code> such that <code>0 &lt;= n &lt; s.size()</code>.</p>\n</blockquote>\n<p>See also these related questions:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/3823058/is-stringc-str-allowed-to-allocate-anything-on-the-heap\">Is string::c_str() allowed to allocate anything on the heap?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/760790/is-it-legal-to-write-to-stdstring\">Is it legal to write to std::string?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2256160/how-bad-is-code-using-stdbasic-stringt-as-a-contiguous-buffer\">Is it reasonable to use std::basic_string&lt;t&gt; as a contiguous buffer when targeting C++03?</a></li>\n</ul>\n</hr>", "OwnerUserId": "500104", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:06:50.310", "Id": "9679503", "Score": "12", "CreationDate": "2012-03-13T06:50:21.817", "LastActivityDate": "2012-03-13T06:50:21.817"}, "9678417": {"CommentCount": "2", "ViewCount": "1139", "CreationDate": "2012-03-13T04:33:16.327", "LastActivityDate": "2012-03-13T06:50:21.817", "Title": "Does std::string really wrap up a C char array?", "AcceptedAnswerId": "9679503", "PostTypeId": "1", "Id": "9678417", "Score": "4", "Body": "<p>I always thought an <code>std::string</code> was implemented as an STL wrapper for a C char array string. But looking closely at the design, I've noticed that it doesn't give any hint or sign of being a wrapped up c-string. For all I know an <code>std::string</code> could be doing <em>anything</em> internally!</p>\n<p>There is the <code>c_str()</code> method of course which I thought returned the internal char array, but how do I know if the method doesn't create a <em>new</em> c char array from whatever data it stores inside and return it? </p>\n<p>Seriously, how has <code>std::string</code> been implemented? Is it (as it appears to be) just a wrapper for a C char array, or is it something else? Or a mixture of the two? Or even can become both conditionally?</p>\n", "Tags": "<c++><string><stl>", "OwnerUserId": "753341", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9678417_9679503_4": {"section_id": 1566, "quality": 0.7777777777777778, "length": 14}, "so_9678417_9679503_2": {"section_id": 1526, "quality": 0.8260869565217391, "length": 19}, "so_9678417_9679503_1": {"section_id": 1558, "quality": 0.975609756097561, "length": 40}}, "n3337": {"so_9678417_9679503_4": {"section_id": 1561, "quality": 0.7777777777777778, "length": 14}, "so_9678417_9679503_2": {"section_id": 1520, "quality": 0.8260869565217391, "length": 19}, "so_9678417_9679503_1": {"section_id": 1552, "quality": 0.975609756097561, "length": 40}}, "n4659": {"so_9678417_9679503_1": {"section_id": 1708, "quality": 0.975609756097561, "length": 40}, "so_9678417_9679503_2": {"section_id": 1676, "quality": 0.7391304347826086, "length": 17}}}});