post_cb({"bq_ids": {"n4140": {"so_27233505_27233505_0": {"length": 23, "quality": 0.5111111111111111, "section_id": 609}, "so_27233505_27234023_2": {"length": 19, "quality": 0.8260869565217391, "section_id": 609}, "so_27233505_27234023_1": {"length": 5, "quality": 1.0, "section_id": 609}}, "n3337": {"so_27233505_27233505_0": {"length": 43, "quality": 0.9555555555555556, "section_id": 599}, "so_27233505_27234023_1": {"length": 5, "quality": 1.0, "section_id": 599}}, "n4659": {"so_27233505_27233505_0": {"length": 23, "quality": 0.5111111111111111, "section_id": 635}, "so_27233505_27234023_2": {"length": 19, "quality": 0.8260869565217391, "section_id": 635}, "so_27233505_27234023_1": {"length": 5, "quality": 1.0, "section_id": 586}}}, "27234023": {"Id": "27234023", "PostTypeId": "2", "Body": "<p>The wording was defective and changed with C++14. Now <a href=\"http://eel.is/c++draft/over.best.ics#4\" rel=\"nofollow\">[over.best.ics]/4 reads</a></p>\n<blockquote>\n<p id=\"so_27233505_27234023_0\">However, if the target is</p>\n<ul>\n<li>the first parameter of a constructor or</li>\n<li>[\u2026]</li>\n</ul>\n<p id=\"so_27233505_27234023_1\">and the constructor or user-defined conversion function is a candidate\n  by</p>\n<ul>\n<li>13.3.1.3, <strong>when the argument is the temporary in the second step of a class copy-initialization</strong>,</li>\n<li>13.3.1.4, 13.3.1.5, or 13.3.1.6 (in all cases), or</li>\n<li>the second phase of 13.3.1.7 when the initializer list has exactly one element, and the target is the first parameter of a\n  constructor of class <code>X</code>, and the conversion is to <code>X</code> or reference to\n  (possibly cv-qualified) <code>X</code>,</li>\n</ul>\n<p id=\"so_27233505_27234023_2\">user-defined conversion sequences are not considered. [ <em>Note:</em> These\n  rules prevent more than one user-defined conversion from being applied\n  during overload resolution, thereby avoiding infinite recursion. <em>\u2014\n  end note</em> ]</p>\n</blockquote>\n<p>The conversion of <code>B()</code> to <code>int</code> is not covered by this - the bold phrase only appertains to the binding of a reference to a temporary during copy-initialization. <br>However, <a href=\"http://coliru.stacked-crooked.com/a/3428da2ca364cb1d\" rel=\"nofollow\">Clang rejects this sample code</a> according to the above:</br></p>\n<pre><code>class A;\n\nstruct B\n{\n    operator A();\n};\n\nstruct A\n{\n    A(A const&amp;){}\n};\n\nA a{B()};\n</code></pre>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2016-04-13T16:52:24.693", "Score": "1", "CreationDate": "2014-12-01T17:39:29.117", "ParentId": "27233505", "CommentCount": "1", "OwnerUserId": "3647361", "LastEditDate": "2016-04-13T16:52:24.693"}, "27233505": {"ViewCount": "154", "Body": "<p>The following code works fine:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct B\n{\n    operator int()\n    {\n        return int();\n    }\n};\n\nstruct A\n{\n    A(int, int){ std::cout &lt;&lt; \"A(int, int)\" &lt;&lt; std::endl; }\n};\n\nA a({B(), B()});\n\nint main()\n{ \n}\n</code></pre>\n<p>and produces output:</p>\n<pre><code>A(int, int)\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/b6cebcdab3ce5609\">DEMO</a></strong></p>\n<p>But I can't get why? What the Standard says is:</p>\n<blockquote>\n<p id=\"so_27233505_27233505_0\">However, when considering the argument of a constructor or\n  user-defined conversion function that is a candidate by 13.3.1.3 when\n  invoked for the copying/moving of the temporary in the second step of\n  a class copy-initialization, by 13.3.1.7 when passing the initializer\n  list as a single argument or when the initializer list has exactly one\n  element and a conversion to some class X or reference to (possibly\n  cv-qualified) X is considered for the first parameter of a constructor\n  of X [...] only standard conversion sequences and ellipsis conversion sequences are considered</p>\n</blockquote>\n<p>So in our case we considered the argument of the constructor (it was <code>{B(), B()}</code>). More precisely, we passed initializer-list as a single argument (the second case in the rule I cited). Now, we need to convert the first element of the initializer-list (temporary of type <code>B</code>) to <code>int</code> and the only way to do that is to apply user-defined convertion (<code>B::operator int()</code>). But, as said at the end of rule that I cited <strong><em>only standard conversion sequences and ellipsis conversion sequences was considered</em></strong>. Since, that code shouldn't work, it should throw the error like <code>A(int, int)</code> is not viable or sort of.</p>\n<p>What's wrong. May be it's a bug?</p>\n", "AcceptedAnswerId": "27234023", "Title": "Why does user-defined conversion applied during the initialization?", "CreationDate": "2014-12-01T17:06:46.897", "LastActivityDate": "2016-04-13T16:52:24.693", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-04-13T16:51:20.117", "OwnerDisplayName": "user2953119", "LastEditorUserId": "3647361", "Id": "27233505", "Score": "5", "Tags": "<c++><c++11><language-lawyer><implicit-conversion>", "AnswerCount": "1"}});