post_cb({"bq_ids": {"n4140": {"so_34969278_34969407_0": {"length": 65, "quality": 0.9848484848484849, "section_id": 480}}, "n3337": {"so_34969278_34969407_0": {"length": 62, "quality": 0.9393939393939394, "section_id": 471}}, "n4659": {"so_34969278_34969407_0": {"length": 65, "quality": 0.9848484848484849, "section_id": 502}}}, "34970644": {"Id": "34970644", "PostTypeId": "2", "Body": "<p>I found what I was searching for in <strong>5.2.2 [expr.call] (4)</strong> (for initialization of function arguments) and <strong>6.6.3 [stmt.return] (2)</strong> (for return values).</p>\n", "LastActivityDate": "2016-01-24T00:13:04.423", "Score": "1", "CreationDate": "2016-01-24T00:13:04.423", "ParentId": "34969278", "CommentCount": "0", "OwnerUserId": "423031"}, "34969407": {"Id": "34969407", "PostTypeId": "2", "Body": "<p>It seems your primary objective is to find the specification of copy elision. That's in 12.8 [class.copy] paragraph 31, first (for the return) and third (for passing argument) bullet</p>\n<blockquote>\n<p id=\"so_34969278_34969407_0\">When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class object, even if the constructor selected for the copy/move operation and/or the destructor for the object have side effects. In such cases, the implementation treats the source and target of the omitted copy/move operation as simply two different ways of referring to the same object, and the destruction of that object occurs at the later of the times when the two objects would have been destroyed without the optimization. This elision of copy/move operations, called copy elision, is permitted in the following circumstances (which may be combined to eliminate multiple copies):</p>\n<ul>\n<li>in a return statement in a function with a class return type, when the expression is the name of a non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified type as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function\u2019s return value</li>\n<li>...</li>\n<li>when a temporary class object that has not been bound to a reference (12.2) would be copied/moved to a class object with the same cv-unqualified type, the copy/move operation can be omitted by constructing the temporary object directly into the target of the omitted copy/move</li>\n</ul>\n</blockquote>\n<p>Other than that the specification on how the arguments and return are built involves pretty much the entire chapter on expressions...</p>\n", "LastActivityDate": "2016-01-23T22:01:47.993", "Score": "4", "CreationDate": "2016-01-23T22:01:47.993", "ParentId": "34969278", "CommentCount": "1", "OwnerUserId": "1120273"}, "34969278": {"ViewCount": "73", "Body": "<p>The title basically says it all:\n<strong>Where does the C++14 standard specify initialization of function arguments and initialization from function return values?</strong></p>\n<p>As an aside: To align what my compiled program does and what the C++ standard says in regards to initialization, I use the <code>--no-elide-constructors</code> argument to <code>gcc</code>. This argument keeps GCC from eliding (i.e. optimizing) superfluous constructor calls. I.e.</p>\n<pre><code>#include &lt;iostream&gt;\n\n#define CALLED  std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; \" called\" &lt;&lt; std::endl\n\nclass C {\npublic:\n    C() { CALLED; }\n    C(const C &amp;c) { CALLED; }\n    C(const C &amp;&amp;c) { CALLED; }\n};\n\nC f() { return C(); }\n\nint main()\n{\n    C c = f();\n    return 0;\n}\n</code></pre>\n<p>gives with <code>c++ -std=c++14</code>:</p>\n<pre><code>C::C() called\n</code></pre>\n<p>and with <code>c++ --no-elide-constructors -std=c++14</code>:</p>\n<pre><code>C::C() called\nC::C(const C&amp;&amp;) called\nC::C(const C&amp;&amp;) called\n</code></pre>\n", "AcceptedAnswerId": "34970644", "Title": "Where does the C++14 standard specify initialization of function arguments and initialization from function return values?", "CreationDate": "2016-01-23T21:47:36.377", "Id": "34969278", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-01-24T00:13:04.423", "Score": "1", "OwnerUserId": "423031", "Tags": "<c++><function><initialization><return-value><c++14>", "AnswerCount": "2"}});