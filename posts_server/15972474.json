post_cb({"15972543": {"ParentId": "15972474", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_15972474_15972543_0\">Does the \"adress of\" &amp; operator now return a pointer to the adress of the reference or the actually object behind the reference?</p>\n</blockquote>\n<p>In C++, references, as such, do not have their <em>own</em> addresses. So address of a reference means address of the object the reference is referring to.</p>\n<pre><code>X x; \nX &amp;r = x; //reference\nX *p = &amp;r; //same as &amp;x\n</code></pre>\n<p>Hope that helps.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "15972543", "Score": "1", "CreationDate": "2013-04-12T13:22:37.430", "LastActivityDate": "2013-04-12T13:22:37.430"}, "15972534": {"ParentId": "15972474", "CommentCount": "0", "Body": "<p>A reference and a pointer are two different concepts. You may think of a reference as an alias to an <strong>existing object</strong>. So just like an alias to an alias is again alias of the original, here the return value of modifyABC() is again a reference to the original object. Taking the pointer to a reference always return the address of the object you have a reference of.</p>\n", "OwnerUserId": "812912", "PostTypeId": "2", "Id": "15972534", "Score": "0", "CreationDate": "2013-04-12T13:22:22.560", "LastActivityDate": "2013-04-12T13:22:22.560"}, "15972474": {"CommentCount": "1", "ViewCount": "130", "CreationDate": "2013-04-12T13:20:01.983", "LastActivityDate": "2013-04-12T13:30:11.610", "Title": "Does a pointer to a reference point to the adress of the reference or the value?", "AcceptedAnswerId": "15972579", "PostTypeId": "1", "Id": "15972474", "Score": "2", "Body": "<p>Imagine the following scenario:</p>\n<pre><code>class ABC\n{ \n  public: \n  int abc;\n};\n\nABC&amp; modifyABC(ABC&amp; foo)\n{\n  foo.abc+=1337;\n  return foo;\n}\n\nvoid saveABC(ABC&amp; bar, std::vector&lt;ABC*&gt;&amp; list)\n{\n  list.push_back(&amp;modifyABC(bar));\n}\n\nint main()\n{\n  ABC foobar;\n  std::vector&lt;ABC*&gt; ABCList;\n  saveABC(foobar,ABCList);\n  return 0;\n}\n</code></pre>\n<p>modifyABC() returns a reference to ABC(which is internally some sort of pointer too AFAIK). Does the \"adress of\" &amp; operator now return a pointer to the adress of the reference or the actually object behind the reference?</p>\n", "Tags": "<c++><pointers><reference>", "OwnerUserId": "2165729", "AnswerCount": "5"}, "15972528": {"ParentId": "15972474", "CommentCount": "0", "Body": "<p>I am struggling with the last sentence of your question (\"<em>a pointer to the adress of the reference</em>\"?)</p>\n<p>What can be said is that <code>modifyABC()</code> takes a reference to an <code>ABC</code>, and returns exactly the same reference. No copy of the object is made.</p>\n<p>The overall effect of your code is that the address of <code>foobar</code> is appended to <code>ABCList</code>.</p>\n", "OwnerUserId": "367273", "PostTypeId": "2", "Id": "15972528", "Score": "1", "CreationDate": "2013-04-12T13:22:14.007", "LastActivityDate": "2013-04-12T13:22:14.007"}, "15972621": {"ParentId": "15972474", "CommentCount": "0", "Body": "<p>Anything you do with a reference (including taking its address)\nis the equivalent of doing it to the referred to object.  In\nC++, a reference itself is <em>not</em> an object, does not necessarily\noccupy space in memory, and does not have an address. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "15972621", "Score": "1", "CreationDate": "2013-04-12T13:26:22.767", "LastActivityDate": "2013-04-12T13:26:22.767"}, "15972579": {"ParentId": "15972474", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_15972474_15972579_0\"><code>modifyABC()</code> returns a reference to <code>ABC</code> (<em>which is internally some sort of pointer too AFAIK</em>)</p>\n</blockquote>\n<p><strong>Not exactly</strong>. </p>\n<p>Pointers are objects (variables) that require some storage and hold in that storage the address in memory of another object. <strong>References are pure <em>aliases</em></strong>, like alternative names. In theory, they do not require any storage at all. </p>\n<p>Per Paragraph 8.3.2/4 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15972474_15972579_1\">It is unspecified whether or not a reference requires storage (3.7).</p>\n</blockquote>\n<p>So a pointer to a reference is actually a pointer to the referenced object, and <strong>any operation done on a reference</strong> (apart from the act of binding it to an object upon initialization) <strong>is actually done on the object for which the reference is an alias</strong>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-04-12T13:30:11.610", "Id": "15972579", "Score": "1", "CreationDate": "2013-04-12T13:24:16.267", "LastActivityDate": "2013-04-12T13:30:11.610"}, "bq_ids": {"n4140": {"so_15972474_15972579_1": {"section_id": 3221, "quality": 1.0, "length": 5}}, "n3337": {"so_15972474_15972579_1": {"section_id": 3095, "quality": 1.0, "length": 5}}, "n4659": {"so_15972474_15972579_1": {"section_id": 3978, "quality": 1.0, "length": 5}}}});