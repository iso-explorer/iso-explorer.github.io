post_cb({"bq_ids": {"n4140": {"so_26529542_26530069_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 5421}, "so_26529542_26530069_1": {"length": 14, "quality": 1.0, "section_id": 6185}}, "n3337": {"so_26529542_26530069_0": {"length": 16, "quality": 0.5925925925925926, "section_id": 5216}}, "n4659": {"so_26529542_26530069_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 6843}, "so_26529542_26530069_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}}}, "26529542": {"ViewCount": "359", "Body": "<p>I'm trying to static instantiate some objects at compile time. What I need is to set to a member int variable an incremented value. For example, the first object I create will have the 0 value, the second 1, the third 2...\nSummarizing I need something like this but it has to work as constexpr.</p>\n<pre><code>//header\nclass MyClass final {\nprivate:\n    static int IDcount;\npublic:\n    const int ID;\n    constexpr MyClass(args);\n    //~MyClass();\n};\n//source\nint MyClass::IDcount = 0;\nconstexpr MyClass::MyClass(args) : ID(MyClass::IDcount++) {\n}\n</code></pre>\n<p>Is there a way to achieve this at compile time (without taking the ID as argument of the constructor)</p>\n", "AcceptedAnswerId": "26530537", "Title": "C++ constexpr count constructor calls", "CreationDate": "2014-10-23T13:44:56.877", "Id": "26529542", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-23T15:08:56.190", "Score": "7", "OwnerUserId": "1417883", "Tags": "<c++><instantiation><constexpr>", "AnswerCount": "2"}, "26530069": {"Id": "26530069", "PostTypeId": "2", "Body": "<p>A <code>constexpr</code>-function or ctor must be a valid core constant expression on at least one path:</p>\n<blockquote>\n<h3>7.1.5 The constexpr specifier <code>[dcl.constexpr]</code></h3>\n<p id=\"so_26529542_26530069_0\">5 For a non-template, non-defaulted <code>constexpr</code> function or a non-template, non-defaulted, non-inheriting <code>constexpr</code> constructor, if no argument values exist such that an invocation of the function or constructor could be an evaluated subexpression of a core constant expression (5.19), the program is ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>Which means it cannot modify a global object on all paths:</p>\n<blockquote>\n<h3>5.19 Constant expressions <code>[expr.const]</code></h3>\n<ol start=\"2\">\n<li><p id=\"so_26529542_26530069_1\">A <em>conditional-expression</em> <code>e</code> is a core constant expression unless the evaluation of <code>e</code>, following the rules of the abstract machine (1.9), would evaluate one of the following expressions:</p>\n<ul>\n<li>modification of an object (5.17, 5.2.6, 5.3.2) unless it is applied to a non-volatile lvalue of literal type\n  that refers to a non-volatile object whose lifetime began within the evaluation of <code>e</code>;</li>\n</ul></li>\n</ol>\n</blockquote>\n", "LastActivityDate": "2014-10-23T14:10:12.853", "CommentCount": "0", "CreationDate": "2014-10-23T14:10:12.853", "ParentId": "26529542", "Score": "3", "OwnerUserId": "3204551"}, "26530537": {"Id": "26530537", "PostTypeId": "2", "Body": "<p>It can't be done the way you've defined it, but there is a non-standard but widely implemented preprocessor trick that could be employed.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct MyClass final {\n    constexpr MyClass(int myid, const char *myname)\n        : id(myid), name(myname) {}\n    int id;\n    const char *name;\n};\n\nconstexpr MyClass m[]{ \n    MyClass(__COUNTER__, \"Larry\"),\n    MyClass(__COUNTER__, \"Moe\"),\n    MyClass(__COUNTER__, \"Curly\")\n};\n\nint main()\n{\n    for (auto const &amp;obj : m)\n        std::cout &lt;&lt; obj.id &lt;&lt; '\\t' &lt;&lt; obj.name &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>The <code>__COUNTER__</code> macro is defined in <a href=\"http://msdn.microsoft.com/en-us/library/b0084kay.aspx\" rel=\"nofollow\">Microsoft's Visual C++</a>, <a href=\"https://gcc.gnu.org/gcc-4.3/changes.html\" rel=\"nofollow\">gcc since version 4.3</a> and <a href=\"http://clang.llvm.org/docs/LanguageExtensions.html\" rel=\"nofollow\">clang</a>.</p>\n<p>When run, this program produces:</p>\n<pre><code>0   Larry\n1   Moe\n2   Curly\n</code></pre>\n", "LastEditorUserId": "3191481", "LastActivityDate": "2014-10-23T15:08:56.190", "Score": "4", "CreationDate": "2014-10-23T14:32:15.720", "ParentId": "26529542", "CommentCount": "1", "OwnerUserId": "3191481", "LastEditDate": "2014-10-23T15:08:56.190"}});