post_cb({"bq_ids": {"n4140": {"so_17022096_17022451_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 1991}, "so_17022096_17022451_1": {"length": 16, "quality": 0.64, "section_id": 1992}}, "n3337": {"so_17022096_17022451_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 1979}, "so_17022096_17022451_1": {"length": 16, "quality": 0.64, "section_id": 1980}}, "n4659": {"so_17022096_17022451_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 2263}, "so_17022096_17022451_1": {"length": 16, "quality": 0.64, "section_id": 2264}}}, "17022451": {"Id": "17022451", "PostTypeId": "2", "Body": "<p>Because streams are by default configured to skip whitespace, therefore, use</p>\n<pre><code>noskipws(strm);\n</code></pre>\n<hr>\n<p>Standard:</p>\n<blockquote>\n<h2>basic_ios constructors</h2>\n<h3><code>explicit basic_ios(basic_streambuf&lt;charT,traits&gt;* sb);</code></h3>\n<p id=\"so_17022096_17022451_0\">Effects: Constructs an object of class basic_ios, assigning initial values to its member objects by calling <code>init(sb).</code></p>\n<h3><code>basic_ios();</code></h3>\n<p id=\"so_17022096_17022451_1\">Effects: Constructs an object of class <code>basic_ios</code> (27.5.2.7) leaving its member objects uninitialized.\n  The object shall be initialized by calling its <code>init</code> member function. If it is destroyed before it has been\n  initialized the behavior is undefined.</p>\n<p id=\"so_17022096_17022451_2\">[...]</p>\n<h3><code>void init(basic_streambuf&lt;charT,traits&gt;* sb);</code></h3>\n<p id=\"so_17022096_17022451_3\">Postconditions: The postconditions of this function are indicated in Table 118.</p>\n<pre><code>+----------+-------------+\n| ...      | ...         |\n| flags()  | skipws|dec  | \n| ...      | ...         |\n+----------+-------------+\n  (Table 118)\n</code></pre>\n</blockquote>\n</hr>", "LastEditorUserId": "76722", "LastActivityDate": "2013-06-10T11:12:08.130", "Score": "12", "CreationDate": "2013-06-10T11:06:30.713", "ParentId": "17022096", "CommentCount": "0", "OwnerUserId": "76722", "LastEditDate": "2013-06-10T11:12:08.130"}, "17022096": {"ViewCount": "1273", "Body": "<p>I am reading from a file into a string until I reach a delimitting character, the dollar symbol.  But the input iterator is skipping whitespace so the string created has no spaces.  not what I want in this case.  Is there any way to stop the skipping behaviour?  and if so how?</p>\n<p>Here is my test code.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;iterator&gt;\n#include &lt;string&gt;\n\n// istream iterator is skipping whitespace.  How do I get all chars?\nvoid readTo(std::istream_iterator&lt;char&gt; iit, \n            std::string&amp; replaced)\n{\n   while(iit != std::istream_iterator&lt;char&gt;()) {\n     char ch = *iit++;\n     if(ch != '$')\n      replaced.push_back(ch);\n     else\n        break;\n   }\n}\n\nint main() {\n   std::ifstream strm(\"test.txt\");\n   std::string s;\n   if(strm.good()) {\n       readTo(strm, s);\n       std::cout &lt;&lt; s &lt;&lt; std::endl;\n   }\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "17022451", "Title": "input iterator skipping whitespace, any way to prevent this skipping", "CreationDate": "2013-06-10T10:48:14.013", "Id": "17022096", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-06-10T11:12:08.130", "Score": "6", "OwnerUserId": "619818", "Tags": "<c++><istream>", "AnswerCount": "1"}});