post_cb({"32866909": {"ParentId": "32866759", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you change this one line</p>\n<pre><code>if ((i=s.insert(t).first)==s.begin())\n</code></pre>\n<p>To two seperate statements</p>\n<pre><code>auto result = s.insert(t);\nif (result.first == s.begin())\n</code></pre>\n<p>It will work correctly. The problem is that it is undefined as to whether the <code>insert</code> or the call to <code>begin</code> will execute first, so it the <code>begin</code> executes first, then the <code>insert</code> the iterator will not compare equal.</p>\n", "OwnerUserId": "2296458", "LastEditorUserId": "2296458", "LastEditDate": "2015-09-30T13:06:38.427", "Id": "32866909", "Score": "1", "CreationDate": "2015-09-30T13:05:43.830", "LastActivityDate": "2015-09-30T13:06:38.427"}, "32866759": {"CommentCount": "0", "ViewCount": "41", "CreationDate": "2015-09-30T12:58:51.623", "LastActivityDate": "2015-09-30T13:06:38.427", "Title": "Unexpected evaluate result when calling std::set functions in \"if\" statement", "AcceptedAnswerId": "32866905", "PostTypeId": "1", "Id": "32866759", "Score": "0", "Body": "<p>I found the behavior of calling std::set function in the \"if\" statement does something I can't understand, here is my code. </p>\n<pre><code>#include&lt;set&gt;\n#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\nset&lt;int&gt;s;int t;\nset&lt;int&gt;::iterator i;\nint main()\n{\n    while (cin&gt;&gt;t) {\n        if ((i=s.insert(t).first)==s.begin())\n/*Expected: \ninsert the new element, \nget the iterator of the new inserted element and save it into i,\nand compare it to the begin of the set to see if it is the smallest. */\n            puts(\"the new int is the smallest\");\n        else puts(\"the new int is not the smallest\");\n    }\n    return 0;\n}\n</code></pre>\n<p>If I input:</p>\n<pre><code>3 2 1\n</code></pre>\n<p>The output would be:</p>\n<pre><code>the new int is not the smallest\nthe new int is not the smallest\nthe new int is not the smallest\n</code></pre>\n<p>However, if I move the insert out of the \"if\":</p>\n<pre><code>while (cin&gt;&gt;t) {\n        (i=s.insert(t).first);\n        if (i==s.begin())\n            puts(\"the new int is the smallest\");\n        else puts(\"the new int is not the smallest\");\n    }\n</code></pre>\n<p>Then I can get the expected output:</p>\n<pre><code>the new int is the smallest\nthe new int is the smallest\nthe new int is the smallest\n</code></pre>\n<p>I also tried to test using the following code:</p>\n<pre><code>int a() {\n    puts(\"fun a encountered\");\n    return 1;\n}\nint b() {\n    puts(\"fun b encountered\");\n    return 1;\n}\nint main()\n{\n    int x;\n    if ((x=a())==b());\n}\n</code></pre>\n<p>And the output is:</p>\n<pre><code>fun a encountered\nfun b encountered\n</code></pre>\n<p>Seems like the order is what was expected in the first code. Now I am very confused. what is the reason for the first code went wrong?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "4879303", "AnswerCount": "2"}, "32866905": {"ParentId": "32866759", "CommentCount": "0", "Body": "<p>This is a great reason to not write horribly complex code!</p>\n<p>From [intro.execution]:</p>\n<blockquote>\n<p id=\"so_32866759_32866905_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.</p>\n</blockquote>\n<p>When you write:</p>\n<pre><code>(i=s.insert(t).first)==s.begin()\n</code></pre>\n<p>You have no guarantee that <code>begin()</code> will be called before or after the <code>insert()</code>. If it's called <em>before</em> the <code>insert()</code>, then clearly the inserted element won't be equal to <code>begin()</code> since they're pointing to different things. </p>\n<p>Just write your assignment and your test on separate lines. Space isn't a premium. Not to mention that</p>\n<pre><code>auto it = s.insert(t).first;\nif (t == s.begin()) { ... }\n</code></pre>\n<p>is much easier to read and understand anyway, in addition to being well-defined behavior. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32866905", "Score": "3", "CreationDate": "2015-09-30T13:05:32.213", "LastActivityDate": "2015-09-30T13:05:32.213"}, "bq_ids": {"n4140": {"so_32866759_32866905_0": {"section_id": 5811, "quality": 1.0, "length": 11}}, "n3337": {"so_32866759_32866905_0": {"section_id": 5584, "quality": 1.0, "length": 11}}, "n4659": {"so_32866759_32866905_0": {"section_id": 7272, "quality": 1.0, "length": 11}}}});