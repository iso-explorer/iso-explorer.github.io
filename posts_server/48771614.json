post_cb({"48771842": {"Id": "48771842", "PostTypeId": "2", "Body": "<p>Clang is correct here.  First a <a href=\"https://timsong-cpp.github.io/cppwp/basic.scope.param\" rel=\"noreferrer\">function's parameter scope</a>  is defined as:</p>\n<blockquote>\n<p id=\"so_48771614_48771842_0\">A function parameter (including one appearing in a lambda-declarator) or function-local predefined variable ([dcl.fct.def]) has function parameter scope. The potential scope of a parameter or function-local predefined variable begins at its point of declaration.[...]</p>\n</blockquote>\n<p>and the <a href=\"https://timsong-cpp.github.io/cppwp/basic.scope.pdecl#1\" rel=\"noreferrer\">point of declaration</a> is defined as </p>\n<blockquote>\n<p id=\"so_48771614_48771842_1\">The point of declaration for a name is immediately after its complete declarator and before its initializer (if any), except as noted below. [\u2009Example:</p>\n<pre><code>unsigned char x = 12;\n{ unsigned char x = x; }\n</code></pre>\n<p id=\"so_48771614_48771842_2\">Here the second x is initialized with its own (indeterminate) value. \u2014\u2009end example\u2009] </p>\n</blockquote>\n<p>So <code>value</code> should be the <code>value</code> you just declared and not the one from the global space</p>\n", "LastActivityDate": "2018-02-13T16:54:52.717", "Score": "7", "CreationDate": "2018-02-13T16:54:52.717", "ParentId": "48771614", "CommentCount": "0", "OwnerUserId": "4342498"}, "bq_ids": {"n4140": {"so_48771614_48771842_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_48771614_48771785_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_48771614_48771842_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 7062}, "so_48771614_48771785_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 7049}, "so_48771614_48771842_1": {"length": 13, "quality": 0.8125, "section_id": 7049}, "so_48771614_48771883_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 7097}, "so_48771614_48771785_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 3260}}, "n3337": {"so_48771614_48771842_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 6806}, "so_48771614_48771785_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_48771614_48771785_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 6794}, "so_48771614_48771883_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6841}, "so_48771614_48771842_1": {"length": 13, "quality": 0.8125, "section_id": 6794}, "so_48771614_48771842_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_48771614_48771785_2": {"length": 33, "quality": 0.9705882352941176, "section_id": 3132}}, "n4659": {"so_48771614_48771842_0": {"length": 16, "quality": 0.6666666666666666, "section_id": 8559}, "so_48771614_48771785_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_48771614_48771785_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 8546}, "so_48771614_48771883_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 8598}, "so_48771614_48771842_1": {"length": 13, "quality": 0.8125, "section_id": 8546}, "so_48771614_48771842_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_48771614_48771785_2": {"length": 20, "quality": 0.5882352941176471, "section_id": 4018}}}, "48771785": {"Id": "48771785", "PostTypeId": "2", "Body": "<p>I think clang is correct. From <a href=\"https://timsong-cpp.github.io/cppwp/n3337/basic.scope.pdecl#1\" rel=\"noreferrer\">basic.scope.pdecl</a>:</p>\n<blockquote>\n<p id=\"so_48771614_48771785_0\">The point of declaration for a name is immediately after its complete declarator (Clause <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.decl\" rel=\"noreferrer\">[dcl.decl]</a>) and before its initializer (if any), except as noted below. [ Example:</p>\n<pre><code>int x = 12;{ int x = x; }\n</code></pre>\n<p id=\"so_48771614_48771785_1\">Here the second x is initialized with its own (indeterminate) value.  \u2014 end example ]</p>\n</blockquote>\n<p>Also, from <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.fct.default#9\" rel=\"noreferrer\">dcl.fct.default</a>:</p>\n<blockquote>\n<p id=\"so_48771614_48771785_2\">Default arguments are evaluated each time the function is called. The order of evaluation of function arguments is unspecified. Consequently, parameters of a function shall not be used in a default argument, even if they are not evaluated. Parameters of a function declared before a default argument are in scope and can hide namespace and class member names</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2018-02-13T17:09:08.163", "Score": "30", "CreationDate": "2018-02-13T16:51:45.583", "ParentId": "48771614", "CommentCount": "8", "OwnerUserId": "434551", "LastEditDate": "2018-02-13T17:09:08.163"}, "48771883": {"Id": "48771883", "PostTypeId": "2", "Body": "<p>Since the OP tagged the question as c++11 I checked that version of the standard and in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/basic.lookup.unqual#11\" rel=\"noreferrer\">[basic.lookup.unqual]</a> sub-clause 11 it states explicitly that:</p>\n<blockquote>\n<p id=\"so_48771614_48771883_0\">During the lookup for a name used as a default argument (8.3.6) in a\n  function parameter-declaration-clause or used in the expression of a\n  mem-initializer for a constructor (12.6.2), the function parameter\n  names are visible and hide the names of entities declared in the\n  block, class or namespace scopes containing the function declaration.</p>\n</blockquote>\n<p>Thus, clang is correct.</p>\n", "LastEditorUserId": "8605791", "LastActivityDate": "2018-02-13T17:23:27.173", "Score": "16", "CreationDate": "2018-02-13T16:57:22.933", "ParentId": "48771614", "CommentCount": "0", "OwnerUserId": "3668462", "LastEditDate": "2018-02-13T17:23:27.173"}, "48771614": {"ViewCount": "2412", "Body": "<p>I have a little toy program:</p>\n<pre><code>static int value = 0;\n\nint function(int &amp;value=value) {\n    return value;\n}\n\nint main() {\n    function();\n}\n</code></pre>\n<p>Compiling with g++ 7.2:</p>\n<blockquote>\n<p id=\"so_48771614_48771614_0\">g++ -std=c++11 -Wall -Wextra test.cc -o test</p>\n</blockquote>\n<p>No problem.</p>\n<p>Compiling with clang++-3.9:</p>\n<blockquote>\n<p id=\"so_48771614_48771614_1\">clang++-3.9 -std=c++11 -Wall -Wextra test.cc -o test</p>\n</blockquote>\n<pre><code>test.cc:3:25: error: default argument references parameter 'value'\nint function(int &amp;value=value) {\n                        ^~~~~\ntest.cc:8:5: error: no matching function for call to 'function'\n    function();\n    ^~~~~~~~\ntest.cc:3:5: note: candidate function not viable: requires single argument 'value', but no arguments were provided\nint function(int &amp;value=value) {\n    ^\n2 errors generated.\n</code></pre>\n<p>Kaboom.  Who's right?</p>\n", "AcceptedAnswerId": "48771785", "Title": "Is gcc or clang correct about this behavior?", "CreationDate": "2018-02-13T16:42:30.563", "LastActivityDate": "2018-02-13T17:23:27.173", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2018-02-13T17:00:01.640", "LastEditorUserId": "2812864", "Id": "48771614", "Score": "35", "OwnerUserId": "157525", "Tags": "<c++><c++11><gcc><clang><language-lawyer>", "AnswerCount": "3"}});