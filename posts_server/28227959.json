post_cb({"bq_ids": {"n4140": {"so_28227959_28228015_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 810}, "so_28227959_28228015_2": {"length": 9, "quality": 0.9, "section_id": 969}}, "n3337": {"so_28227959_28228015_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 801}, "so_28227959_28228015_2": {"length": 9, "quality": 0.9, "section_id": 958}}, "n4659": {"so_28227959_28228015_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 868}, "so_28227959_28228015_2": {"length": 9, "quality": 0.9, "section_id": 873}}}, "28227959": {"ViewCount": "209", "Body": "<p>A vector when it does a resize will attempt to use move semantics to move the objects from the old array to the new one. But if the templated object in the vector does not support a no throw <code>noexcept</code> move constructor then it will revert to using copy construction so that the <code>strong exception guarantee</code> is preserved.</p>\n<p>But when I try this:</p>\n<pre><code>#include &lt;vector&gt;\n\nclass X\n{\n    public:\n        // Needs default constructor\n        X() {}\n\n        // Copy operations disabled.\n        X(X const&amp;)             = delete;\n        X&amp; operator=(X const&amp;)  = delete;\n\n        X(X&amp;&amp;)              // throwable move constructor\n        {}\n        X&amp; operator=(X&amp;&amp;)   // throwable move assignment.\n        {return *this;}\n};\n\nint main()\n{\n    // Vector of Size zero\n    std::vector&lt;X&gt;  data;\n\n    // Vector of Size ten.\n    // Since the move constructor can potentially throw\n    // We have to copy elements when we do a resize\n    //\n    // But X has a disabled copy semantics\n    // Thus I would expect a compile time error here.\n    data.resize(10);\n}\n</code></pre>\n<p>This compiles without error or warning:</p>\n<pre><code>&gt; g++ --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin14.0.0\nThread model: posix\n&gt; g++ -std=c++11 test.cpp\n&gt;\n</code></pre>\n", "Title": "Why is this move allowed?", "CreationDate": "2015-01-30T01:45:16.550", "LastActivityDate": "2015-01-30T02:13:20.547", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Id": "28227959", "Score": "4", "OwnerUserId": "14065", "Tags": "<c++><c++11><move>", "AnswerCount": "1"}, "28228015": {"Id": "28228015", "PostTypeId": "2", "Body": "<p>The strong exception safety guarantee is not provided for noncopyable elements that have a throwing move constructor.</p>\n<p>[vector.capacity]/p12-14 (emphasis mine):</p>\n<blockquote>\n<pre><code>void resize(size_type sz); \n</code></pre>\n<p id=\"so_28227959_28228015_0\">12 <em>Effects</em>: If <code>sz &lt;= size()</code>, equivalent to calling <code>pop_back()</code>\n<code>size() - sz</code> times. If <code>size() &lt; sz</code>, appends <code>sz - size()</code>\n  default-inserted elements to the sequence. </p>\n<p id=\"so_28227959_28228015_1\">13 <em>Requires</em>: <code>T</code> shall be <code>MoveInsertable</code> and <code>DefaultInsertable</code>\n  into <code>*this</code>.</p>\n<p id=\"so_28227959_28228015_2\">14 <em>Remarks</em>: If an exception is thrown <strong>other than by the move\n  constructor of a non-<code>CopyInsertable</code> <code>T</code></strong> there are no effects.</p>\n</blockquote>\n<p>Note that this doesn't require <code>T</code> to be <code>CopyInsertable</code>. </p>\n<p>Internally, the implementation likely uses <code>std::move_if_noexcept</code>, which, despite the name, is really \"move if noexcept or if noncopyable\".</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2015-01-30T02:13:20.547", "Score": "11", "CreationDate": "2015-01-30T01:52:40.820", "ParentId": "28227959", "CommentCount": "2", "OwnerUserId": "2756719", "LastEditDate": "2015-01-30T02:13:20.547"}});