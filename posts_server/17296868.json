post_cb({"bq_ids": {"n4140": {"so_17296868_38110571_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 6359}, "so_17296868_38110571_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 6360}}, "n3337": {"so_17296868_38110571_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 6117}, "so_17296868_38110571_1": {"length": 20, "quality": 0.8333333333333334, "section_id": 6116}}, "n4659": {"so_17296868_38110571_2": {"length": 12, "quality": 0.5454545454545454, "section_id": 7869}, "so_17296868_38110571_1": {"length": 13, "quality": 0.5416666666666666, "section_id": 7869}}}, "38110571": {"Id": "38110571", "PostTypeId": "2", "Body": "<p>Just came to the same question while reading <code>boost::filesystem</code> documentation. In n4296 draft of C++14 standard following declared:</p>\n<blockquote>\n<p id=\"so_17296868_38110571_0\">17.6.5.12 Restrictions on exception handling</p>\n<ol>\n<li><p id=\"so_17296868_38110571_1\">Any of the functions defined in the C++ standard library can report a failure by throwing an exception of a type described in its Throws: paragraph. An implementation may strengthen the exception specification for a non-virtual function by adding a non-throwing noexcept-specification.</p></li>\n<li><p id=\"so_17296868_38110571_2\">A function may throw an object of a type not listed in its Throws clause if its type is derived from a type named in the Throws clause and would be caught by an exception handler for the base type.</p></li>\n</ol>\n</blockquote>\n<p>This doesn't sound informative, thus the real answer needs to be found in boost sources, which are currently hosted on <a href=\"https://github.com/boostorg/filesystem/blob/develop/src/operations.cpp\" rel=\"nofollow\">Github</a>. Actually, per implementation defined there the <code>boost::filesystem::filesystem_error</code> exception will be thrown if <code>ec</code> argument was not provided. </p>\n<pre><code>if (ec == 0)\n  BOOST_FILESYSTEM_THROW(filesystem_error(\n    \"boost::filesystem::create_directories\", parent, local_ec));\n</code></pre>\n", "LastActivityDate": "2016-06-29T21:44:52.997", "CommentCount": "0", "CreationDate": "2016-06-29T21:44:52.997", "ParentId": "17296868", "Score": "0", "OwnerUserId": "3576471"}, "17297023": {"Id": "17297023", "PostTypeId": "2", "Body": "<p>The actual paragraph of the current C++11 standard regarding exception handling is \u00a717.6.5.12.\nBut there is no helpful information on what a boos library may throw except if the have throw specifying paragraphs.</p>\n<p>I think what you want is to catch a <code>std::exception</code> since the most likely case in terms of \" throwing an exception [...] when there is a failure to allocate storage\" is a <code>std::bad_alloc</code>  which derives from <code>std::exception</code>.</p>\n", "LastActivityDate": "2013-06-25T12:13:29.360", "CommentCount": "0", "CreationDate": "2013-06-25T12:13:29.360", "ParentId": "17296868", "Score": "1", "OwnerUserId": "951423"}, "17296868": {"ViewCount": "219", "Body": "<p><b>Short version:</b>  What is \"an exception as described in the C++ standard, 17.6.4.10 [res.on.exception.handling]\" and how do I catch one?</p>\n<p><b>Long version...</b></p>\n<p>I would like to catch the exceptions thrown from the version of <a href=\"http://www.boost.org/doc/libs/1_46_0/libs/filesystem/v3/doc/reference.html#create_directories\" rel=\"nofollow\"><code>boost::create_directories()</code></a> that does not take a <code>system::error_code</code> as an argument.  The <a href=\"http://www.boost.org/doc/libs/1_46_0/libs/filesystem/v3/doc/reference.html#Error-reporting\" rel=\"nofollow\">Boost Filesystem Error Reporting Documentation</a> says that <code>create_directories()</code> reports errors either by...</p>\n<p>a&gt; throwing a <code>boost::filesystem_error</code> when a call by the implementation to an operating system or other underlying API results in an error that prevents the function from meeting its specifications, or...</p>\n<p>b&gt; throwing an exception as described in the C++ standard, 17.6.4.10 [res.on.exception.handling] when there is a failure to allocate storage.</p>\n<p>The first case is obvious and I have handled that situation.  But I can't find any explanation of how to handle the second case.  Googling \"exception as described in the C++ standard, 17.6.4.10 res.on.exception.handling\" yields three articles (that could be a record for a non-zero search result), and none of them tell me how to handle such an exception.</p>\n<p>Can anyone help?</p>\n", "AcceptedAnswerId": "17296949", "Title": "How do I catch an exception as described in the C++ standard, 17.6.4.10 [res.on.exception.handling]?", "CreationDate": "2013-06-25T12:04:56.130", "Id": "17296868", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-06-29T21:44:52.997", "Score": "3", "OwnerUserId": "502556", "Tags": "<c++><exception><boost>", "AnswerCount": "3"}, "17296949": {"Id": "17296949", "PostTypeId": "2", "Body": "<p>I think what they mean is that they will (indirectly) throw <code>std::bad_alloc</code>.  You may not actually want to try to catch that though, as a program which has run out of memory may not be able to continue in any case.  Up to you though--I read this same documentation just the other day and that's the conclusion I came to.</p>\n", "LastActivityDate": "2013-06-25T12:09:27.617", "CommentCount": "2", "CreationDate": "2013-06-25T12:09:27.617", "ParentId": "17296868", "Score": "3", "OwnerUserId": "4323"}});