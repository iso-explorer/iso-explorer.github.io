post_cb({"bq_ids": {"n4140": {"so_45885048_45885631_0": {"section_id": 5836, "quality": 1.0, "length": 32}}, "n3337": {"so_45885048_45885631_0": {"section_id": 5606, "quality": 1.0, "length": 32}}, "n4659": {"so_45885048_45885631_0": {"section_id": 7298, "quality": 1.0, "length": 32}}}, "45885048": {"CommentCount": "12", "AcceptedAnswerId": "45885631", "PostTypeId": "1", "LastEditorUserId": "6651824", "CreationDate": "2017-08-25T15:42:39.190", "LastActivityDate": "2017-08-25T16:17:09.263", "LastEditDate": "2017-08-25T15:58:21.877", "ViewCount": "259", "FavoriteCount": "1", "Title": "Is this compiler transformation allowed?", "Id": "45885048", "Score": "8", "Body": "<p>Consider this code, where <code>x</code> and <code>y</code> are integers:</p>\n<pre><code>if (x)\n    y = 42;\n</code></pre>\n<p>Is the following compiler transformation allowed ?</p>\n<pre><code>int tmp = y;\ny = 42;\n\nif (!x)\n    y = tmp;\n</code></pre>\n<p><strong>context</strong>:</p>\n<p>This is from Bjarne Stroustrup's FAQ:</p>\n<pre><code>// start with x==0 and y==0\n\nif (x) y = 1;   // Thread 1 \n\nif (y) x = 1;   // Thread 2\n</code></pre>\n<p>The FAQ states this is data race free; with <code>x</code> and <code>y</code> both 0, none of the vars should be written to.<br>\nBut what if the transformation is allowed ?</br></p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "6651824", "AnswerCount": "1"}, "45885631": {"ParentId": "45885048", "CommentCount": "3", "CreationDate": "2017-08-25T16:17:09.263", "OwnerUserId": "3002139", "PostTypeId": "2", "Id": "45885631", "Score": "6", "Body": "<p>Unlike I wrote in my incorrect comment, this transformation is actually not allowed if <code>y</code> is potentially shared between threads and the compiler cannot prove any existing UB in the original code.</p>\n<p>The standard explicitly says:</p>\n<blockquote>\n<p id=\"so_45885048_45885631_0\">Compiler transformations that introduce assignments to a potentially shared memory location that\n  would not be modified by the abstract machine are generally precluded by this standard, since such an\n  assignment might overwrite another assignment by a different thread in cases in which an abstract machine\n  execution would not have encountered a data race.</p>\n</blockquote>\n<p>[intro.multithread] (1.10/22) in N3337, (1.10/25) in N4141. </p>\n<p>So if <code>x</code> is always 0, the original code would be race-free, while the transformed one wouldn't. Thus the transformation is not legal.</p>\n", "LastActivityDate": "2017-08-25T16:17:09.263"}});