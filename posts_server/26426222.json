post_cb({"26426222": {"CommentCount": "0", "AcceptedAnswerId": "26426329", "CreationDate": "2014-10-17T13:34:15.307", "LastActivityDate": "2014-10-17T13:41:32.283", "PostTypeId": "1", "ViewCount": "737", "FavoriteCount": "1", "Title": "Simple vector initialization in C++11 returns weird error", "Id": "26426222", "Score": "3", "Body": "<p>Compiling this piece of code:</p>\n<pre><code>#include &lt;vector&gt;\n\nlong long sumOfMedians(int seed, int mul, int add, int N, int K)\n{\n  std::vector&lt;int&gt; nos{N+2,0};\n  for(int i=0; i&lt;N; i++)\n    {\n      if(i == 0)\n    nos[i] = seed;\n      else\n    nos[i] = (nos[i-1]*mul + add)%65536;\n    }\n}\n\nint main()\n{\n  sumOfMedians(3,1,1,10,3);\n  return 0;\n}\n</code></pre>\n<p>causes an error</p>\n<pre><code>*** Error in `./a.out': free(): invalid next size (fast): 0x00000000006e8010 ***\n[2]    31743 abort (core dumped)  ./a.out\n</code></pre>\n<p>While slightly changing the vector initialization line (line 5 in previous code) to (line 5,6 in new code)</p>\n<pre><code>#include &lt;vector&gt;\n\nlong long sumOfMedians(int seed, int mul, int add, int N, int K)\n{\n  std::vector&lt;int&gt; nos;\n  nos.resize(N+2,0);\n  for(int i=0; i&lt;N; i++)\n    {\n      if(i == 0)\n    nos[i] = seed;\n      else\n    nos[i] = (nos[i-1]*mul + add)%65536;\n    }\n}\n\nint main()\n{\n  sumOfMedians(3,1,1,10,3);\n  return 0;\n}\n</code></pre>\n<p>Causes it to compile successfully. What gives?</p>\n<p>g++ parameter: -std=c++11</p>\n", "Tags": "<c++><c++11><vector><g++>", "OwnerUserId": "1405711", "AnswerCount": "4"}, "26426367": {"ParentId": "26426222", "CommentCount": "0", "CreationDate": "2014-10-17T13:41:32.283", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "26426367", "Score": "5", "Body": "<p>List-initialisation for vectors is a way to provide a list of initial elements. It is <em>not</em> the same as providing constructor arguments.</p>\n<p>That's because <a href=\"http://en.cppreference.com/w/cpp/container/vector/vector\"><code>std::vector&lt;T&gt;</code> has a constructor taking <code>std::initializer_list&lt;int&gt;</code></a> which is the best match when you use <code>{x,y,..,z}</code>:</p>\n<blockquote>\n<p id=\"so_26426222_26426367_0\"><code>[C++11: 8.5.4/2]:</code> A constructor is an <em>initializer-list constructor</em> if its first parameter is of type <code>std::initializer_list&lt;E&gt;</code> or reference to possibly cv-qualified <code>std::initializer_list&lt;E&gt;</code> for some type <code>E</code>, and either there are no other parameters or else all other parameters have default arguments (8.3.6). <em>[ Note:</em> <strong>Initializer-list constructors are favored over other constructors in list-initialization (13.3.1.7).</strong> <em>\u2014end note ]</em> The template <code>std::initializer_list</code> is not predefined; if the header <code>&lt;initializer_list&gt;</code> is not included prior to a use of <code>std::initializer_list</code> \u2014 even an implicit use in which the type is not named (7.1.6.4) \u2014 the program is ill-formed.</p>\n<p id=\"so_26426222_26426367_1\"><code>[C++11: 13.3.1.7/1]:</code> When objects of non-aggregate class type <code>T</code> are list-initialized (8.5.4), overload resolution selects the constructor in two phases:</p>\n<ul>\n<li><strong>Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class <code>T</code> and the argument list consists of the initializer list as a single argument.</strong></li>\n<li>If no viable initializer-list constructor is found, overload resolution is performed again, where the candidate functions are all the constructors of the class <code>T</code> and the argument list consists of the elements of the initializer list.</li>\n</ul>\n</blockquote>\n<p>So:</p>\n<pre><code>std::vector&lt;int&gt; v{1,2,3,4,5,6,7};\n</code></pre>\n<p>There are seven elements in this vector.</p>\n<p>Likewise:</p>\n<pre><code>std::vector&lt;int&gt; nos{N+2, 0};\n</code></pre>\n<p>There are two elements in this vector; the first one has value <code>N+2</code>, and the second has value <code>0</code>. Your subsequent looping to <code>N</code>, since <code>N</code> in your case is 10, causes memory corruption.</p>\n<p>If you instead write the following:</p>\n<pre><code>std::vector&lt;int&gt; nos(N+2, 0);\n</code></pre>\n<p>then you use the expected vector constructor, which functions similarly to <code>std::vector::resize</code>.</p>\n", "LastActivityDate": "2014-10-17T13:41:32.283"}, "26426329": {"ParentId": "26426222", "CommentCount": "0", "CreationDate": "2014-10-17T13:39:34.533", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "26426329", "Score": "6", "Body": "<p>For <code>vector</code>, brace-initialisation initialises the vector contents to the contents of the initialiser list, so</p>\n<pre><code>std::vector&lt;int&gt; nos{N+2,0};\n</code></pre>\n<p>initialises it to a size of 2, with elements <code>N+2</code> and <code>0</code>. This uses the constructor that takes a single parameter of type <code>std::initializer_list</code>.</p>\n<p>Changing the braces to parentheses causes it to instead use the two-argument constructor that specifies the size and initial value for all elements. That's what you want here; although you could leave out the second argument since elements are zero-initialised by default.</p>\n", "LastActivityDate": "2014-10-17T13:39:34.533"}, "26426321": {"ParentId": "26426222", "CommentCount": "0", "CreationDate": "2014-10-17T13:39:15.907", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "26426321", "Score": "1", "Body": "<p>You're initializing a <strong>size-2 vector</strong> with <a href=\"http://en.wikipedia.org/wiki/C%2B%2B11#Uniform_initialization\" rel=\"nofollow\">brace-initialization</a> (vector has a constructor which accepts <code>std::initializer_list&lt;int&gt;</code>)</p>\n<pre><code>std::vector&lt;int&gt; nos{ N + 2, 0 };\n</code></pre>\n<p>and afterwards asking for the index 2 (<strong>out-of-range</strong>):</p>\n<pre><code>nos[2] = (nos[2 - 1] * mul + add) % 65536;\n</code></pre>\n", "LastActivityDate": "2014-10-17T13:39:15.907"}, "26426309": {"ParentId": "26426222", "CommentCount": "1", "CreationDate": "2014-10-17T13:38:25.230", "OwnerUserId": "3367929", "PostTypeId": "2", "Id": "26426309", "Score": "0", "Body": "<p>You probably meant to write:</p>\n<pre><code>  std::vector&lt;int&gt; nos(N+2,0);\n</code></pre>\n", "LastActivityDate": "2014-10-17T13:38:25.230"}, "bq_ids": {"n4140": {"so_26426222_26426367_0": {"section_id": 3324, "quality": 0.8392857142857143, "length": 47}, "so_26426222_26426367_1": {"section_id": 599, "quality": 0.8, "length": 12}}, "n3337": {"so_26426222_26426367_0": {"section_id": 3194, "quality": 0.8392857142857143, "length": 47}, "so_26426222_26426367_1": {"section_id": 589, "quality": 0.8, "length": 12}}, "n4659": {"so_26426222_26426367_0": {"section_id": 4090, "quality": 0.8214285714285714, "length": 46}, "so_26426222_26426367_1": {"section_id": 622, "quality": 0.8, "length": 12}}}});