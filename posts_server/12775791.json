post_cb({"bq_ids": {"n4140": {"so_12775791_12775833_0": {"length": 26, "quality": 1.0, "section_id": 3261}, "so_12775791_12775791_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3261}}, "n3337": {"so_12775791_12775833_0": {"length": 26, "quality": 1.0, "section_id": 3133}, "so_12775791_12775791_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3133}}, "n4659": {"so_12775791_12775833_0": {"length": 26, "quality": 1.0, "section_id": 4019}, "so_12775791_12775791_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 4019}}}, "12775833": {"Id": "12775833", "PostTypeId": "2", "Body": "<p>The parameters passed to a function are decided by the code that calls the function. The behavior of the function, once called, is up to the class. If you need this behavior, create a virtual function that takes no parameters.</p>\n<p>Getting the default parameter of the derived function would be impossible because the calling code can't even necessarily see the prototype for that function.</p>\n<p>Consider:</p>\n<pre><code>void someFunction(Human *h)\n{\n    h-&gt;print();\n}\n</code></pre>\n<p>This code may have no idea there exists a class derived from <code>Human</code> that has a <code>print</code> function with a default value of 48. And, in any event, it would have no way to know to actually pass that value.</p>\n<p>Long after this code is compiled, it might get linked to code like this:</p>\n<pre><code>class BasketBallPlayer : public Human\n{\n    void print(int height = 84);\n}\n\nHuman *j = new BasketBallPlayer();\nsomeFunction(j);\n</code></pre>\n<p>See 8.3.6.10:</p>\n<blockquote>\n<p id=\"so_12775791_12775833_0\">A virtual function call uses the default arguments in the declaration of the virtual function determined by the static type of the pointer or reference denoting the object. An overriding function in a derived class does not acquire default arguments from the function it overrides.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-08T05:33:45.617", "CommentCount": "0", "CreationDate": "2012-10-08T05:33:45.617", "ParentId": "12775791", "Score": "5", "OwnerUserId": "721269"}, "12775791": {"ViewCount": "972", "Body": "<blockquote>\n<p id=\"so_12775791_12775791_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6464404/virtual-function-default-arguments-behaviour\">virtual function default arguments behaviour</a> </br></p>\n</blockquote>\n<pre><code>class Human{ virtual void print(int height =72){ cout &lt;&lt; \"Human: \" &lt;&lt; height &lt;&lt; endl; }};\nclass Child:public Human{ void print(int height =48){ cout &lt;&lt; \"Child: \" &lt;&lt; height &lt;&lt; endl; }};\n\nint main()\n{\n Human * brother = new Child();\n brother-&gt;print();\n}\n</code></pre>\n<p>Result is this </p>\n<pre><code>Child: 72\n</code></pre>\n<p>Why it gets default parameter from base class and function definition from derived class? Expecting an explanation associated with C++ standers. </p>\n", "AcceptedAnswerId": "12775833", "Title": "Default argument of overridden function", "CreationDate": "2012-10-08T05:29:22.890", "LastActivityDate": "2012-10-08T05:34:30.840", "CommentCount": "1", "LastEditDate": "2017-05-23T12:03:53.657", "PostTypeId": "1", "Tags": "<c++><method-overloading>", "Id": "12775791", "AnswerCount": "1", "Score": "2", "OwnerUserId": "1268258", "ClosedDate": "2012-10-08T12:48:03.127", "LastEditorUserId": "-1"}});