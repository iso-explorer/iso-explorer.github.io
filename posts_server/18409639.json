post_cb({"18409733": {"ParentId": "18409639", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>, it may seem to work properly but it can break at anytime and you can not rely on the results of this program.</p>\n<p>When the function exits, the memory used to hold the automatic variables will be released and it will not be valid to refer to that memory.</p>\n<p>The draft C++ standard in section <code>3.7.3</code> <em>paragraph 1</em> says: </p>\n<blockquote>\n<p id=\"so_18409639_18409733_0\">Block-scope variables explicitly declared register or not explicitly declared static or extern have automatic storage duration. <strong>The storage for these entities lasts until the block in which they are created exits.</strong></p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-08-23T18:53:12.370", "Id": "18409733", "Score": "7", "CreationDate": "2013-08-23T18:42:02.937", "LastActivityDate": "2013-08-23T18:53:12.370"}, "18409731": {"ParentId": "18409639", "CommentCount": "2", "Body": "<p>What might be happening (again, with UB, anything goes) is that since after you called <code>Add</code>, you didn't call anything else, nothing has yet overridden the piece of memory where <code>cen</code> was, and so the old value is still there. That being said, you cannot rely on that always happening.</p>\n", "OwnerUserId": "1476062", "PostTypeId": "2", "Id": "18409731", "Score": "1", "CreationDate": "2013-08-23T18:41:55.517", "LastActivityDate": "2013-08-23T18:41:55.517"}, "18409639": {"CommentCount": "12", "ViewCount": "1329", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2013-08-23T18:36:24.913", "LastActivityDate": "2013-11-28T03:39:40.403", "Title": "Why does returning a reference to a automatic variable work?", "AcceptedAnswerId": "18409733", "LastEditDate": "2013-11-28T03:39:40.403", "Id": "18409639", "Score": "6", "Body": "<p>I'm currently reading about <em>C++</em>, and I read that when using return by reference I should make sure that I'm  not returning a reference to a variable that will go out of scope when the function returns.</p>\n<p>So why in the <code>Add</code> function the object <code>cen</code> is returned by reference and the code works correctly?!  </p>\n<p>Here is the code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Cents\n{\n private:\n int m_nCents;\n\n public:\n Cents(int nCents) { m_nCents = nCents; }\n\nint GetCents() { return m_nCents; }\n};\n\nCents&amp; Add(Cents &amp;c1, Cents &amp;c2)\n{\n   Cents cen(c1.GetCents() + c2.GetCents());\n   return cen;\n}\n\nint main()\n{\n   Cents cCents1(3);\n   Cents cCents2(9);\n   cout &lt;&lt; \"I have \" &lt;&lt; Add(cCents1, cCents2).GetCents() &lt;&lt; \" cents.\" &lt;&lt; std::endl;\n\n   return 0;\n}\n</code></pre>\n<p>I am using CodeBlocks IDE over Win7.</p>\n", "Tags": "<c++><reference><return><undefined-behavior>", "OwnerUserId": "1350120", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_18409639_18409733_0": {"section_id": 7170, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_18409639_18409733_0": {"section_id": 6914, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_18409639_18409733_0": {"section_id": 8678, "quality": 0.7727272727272727, "length": 17}}}, "18409741": {"ParentId": "18409639", "CommentCount": "0", "Body": "<p>You should do a memcpy to copy the object being returned to heap. Though the code works, the behaviour is undefined when returning objects that go out of scope. It may always work when the code is small, because when the function returns, the portion of the stack occupied by the function will not be cleared and since the local variables within a function will have been allocated space there, the values you get (usually) contain the values you expect. But when you have multiple functions calling each other and programs grows large, your program will start producing undefined behaviour. Possibly even seg faulting at times.</p>\n", "OwnerUserId": "1394294", "PostTypeId": "2", "Id": "18409741", "Score": "1", "CreationDate": "2013-08-23T18:42:35.573", "LastActivityDate": "2013-08-23T18:42:35.573"}});