post_cb({"bq_ids": {"n4140": {"so_16122912_22468790_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 6716}, "so_16122912_16519653_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 6716}, "so_16122912_16519653_2": {"length": 25, "quality": 0.6097560975609756, "section_id": 6299}, "so_16122912_16519653_5": {"length": 14, "quality": 0.9333333333333333, "section_id": 6718}, "so_16122912_22468790_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6713}, "so_16122912_16519653_1": {"length": 17, "quality": 1.0, "section_id": 6300}, "so_16122912_16519653_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 6716}, "so_16122912_16519653_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6299}}, "n3337": {"so_16122912_22468790_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 6471}, "so_16122912_16519653_1": {"length": 17, "quality": 1.0, "section_id": 6057}, "so_16122912_16519653_5": {"length": 14, "quality": 0.9333333333333333, "section_id": 6473}, "so_16122912_16519653_2": {"length": 25, "quality": 0.6097560975609756, "section_id": 6056}, "so_16122912_22468790_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6468}, "so_16122912_16519653_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 6471}, "so_16122912_16519653_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 6471}, "so_16122912_16519653_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6056}}, "n4659": {"so_16122912_22468790_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 8211}, "so_16122912_16519653_1": {"length": 17, "quality": 1.0, "section_id": 7809}, "so_16122912_16519653_5": {"length": 14, "quality": 0.9333333333333333, "section_id": 8210}, "so_16122912_16519653_2": {"length": 25, "quality": 0.6097560975609756, "section_id": 7808}, "so_16122912_22468790_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 8206}, "so_16122912_16519653_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 8211}, "so_16122912_16519653_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 8211}, "so_16122912_16519653_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 7808}}}, "22468790": {"Id": "22468790", "PostTypeId": "2", "Body": "<p>You may not specialize std::numeric_limits for a user-defined type. A user defined type is not an arithmetic type. There is clear written in the C++ Standard that </p>\n<blockquote>\n<p id=\"so_16122912_22468790_0\">1 The numeric_limits class template provides a C++ program with\n  information about various properties of the <strong>implementation\u2019s\n  representation</strong> of the <strong>arithmetic types</strong>.</p>\n</blockquote>\n<p>and for example</p>\n<blockquote>\n<p id=\"so_16122912_22468790_1\">4 Non-arithmetic standard types, such as <strong>complex</strong> (26.4.2), shall\n  not have specializations.</p>\n</blockquote>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-01-03T12:39:26.550", "Score": "3", "CreationDate": "2014-03-18T01:33:34.033", "ParentId": "16122912", "CommentCount": "4", "OwnerUserId": "2877241", "LastEditDate": "2017-01-03T12:39:26.550"}, "16519653": {"Id": "16519653", "PostTypeId": "2", "Body": "<h2>Short answer:</h2>\n<p>Go ahead, nothing bad will happen.</p>\n<h2>Long answer:</h2>\n<p>The C++ standard extensively protects the <code>::std</code> namespace in C++11 17.6.4.2.1, but specifically allows your case in paragraphs 1 and 2:</p>\n<blockquote>\n<p id=\"so_16122912_16519653_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a\n  namespace within namespace std unless otherwise specified. A program may add a template specialization\n  for any standard library template to namespace std only if the declaration depends on a user-defined type\n  and the specialization meets the standard library requirements for the original template and is not explicitly\n  prohibited.</p>\n<p id=\"so_16122912_16519653_1\">[...] A program may explicitly instantiate a template defined in the standard library only if the declaration\n  depends on the name of a user-defined type and the instantiation meets the standard library requirements\n  for the original template.</p>\n</blockquote>\n<p>The older C++03 has a similar definition in 17.4.3.1/1:</p>\n<blockquote>\n<p id=\"so_16122912_16519653_2\">It is undefined for a C++ program to add declarations or definitions to namespace std or namespaces\n  within namespace std unless otherwise specified. A program may add template specializations for any\n  standard library template to namespace std. Such a specialization (complete or partial) of a standard\n  library template results in undefined behavior unless the declaration depends on a user-defined name of\n  external linkage and unless the specialization meets the standard library requirements for the original template.</p>\n</blockquote>\n<p>After getting past this fundamental stepping stone, you already pointed out, C++03 18.2.1/4 forbids specializations of <code>::std::numeric_limits</code> for certain types:</p>\n<blockquote>\n<p id=\"so_16122912_16519653_3\">Non-fundamental standard types, such as complex (26.2.2), shall not have specializations.</p>\n</blockquote>\n<p>The more current C++11 18.3.2.1/4 has a slightly different wording:</p>\n<blockquote>\n<p id=\"so_16122912_16519653_4\">Non-arithmetic standard types, such as <code>complex&lt;T&gt;</code> (26.4.2), shall not have specializations.</p>\n</blockquote>\n<p>Both of these formulations however allow specializations for non-standard types, which <code>T</code> is, since you defined it yourself (as @BoPersson already pointed out in the comments).</p>\n<h3>Caveats</h3>\n<p>C++11 18.3.2.3/1 hints that you should (but does not require you to) ensure that your specialization has all members.</p>\n<p>Also, you may wish to ensure that C++11 18.3.2.3/2 is not violated by your specialization:</p>\n<blockquote>\n<p id=\"so_16122912_16519653_5\">The value of each member of a specialization of numeric_limits on a cv-qualified type cv T shall be equal\n  to the value of the corresponding member of the specialization on the unqualified type T.</p>\n</blockquote>\n<p>Which essentially means, that if you wish to specialize it for <code>T</code>, you should also do so for <code>T const</code>, <code>T volatile</code> and <code>T const volatile</code>.</p>\n", "LastEditorUserId": "65678", "LastActivityDate": "2013-05-13T10:23:29.470", "Score": "12", "CreationDate": "2013-05-13T10:18:13.060", "ParentId": "16122912", "CommentCount": "6", "OwnerUserId": "65678", "LastEditDate": "2013-05-13T10:23:29.470"}, "38670996": {"Id": "38670996", "PostTypeId": "2", "Body": "<p>Just an example:</p>\n<pre><code>namespace std {\n    template&lt;&gt; class numeric_limits&lt;Temperature&gt; {\n    public:\n       static Temperature lowest() {return Temperature(-273.15f);};\n       // One can implement other methods if needed\n    };\n}\n</code></pre>\n", "LastEditorUserId": "312896", "LastActivityDate": "2016-07-30T07:07:06.313", "Score": "2", "CreationDate": "2016-07-30T06:22:21.843", "ParentId": "16122912", "CommentCount": "0", "OwnerUserId": "312896", "LastEditDate": "2016-07-30T07:07:06.313"}, "16122912": {"ViewCount": "2344", "Body": "<p>The documentation of <code>std::numeric_limits&lt;T&gt;</code> says it should not be specialized for non-fundamental types.  What about number-like user-defined types?  If I define my own type <code>T</code> which represents a numeric value and overloads numeric operators, and for which the information represented by <code>numeric_limits</code> makes sense -- will anything break if I specialize <code>numeric_limits</code> for that type?</p>\n", "Title": "is it ok to specialize std::numeric_limits<T> for user-defined number-like classes?", "CreationDate": "2013-04-20T17:01:58.473", "LastActivityDate": "2017-04-05T19:16:28.313", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-04-05T19:16:28.313", "LastEditorUserId": "65678", "Id": "16122912", "Score": "16", "OwnerUserId": "410315", "Tags": "<c++><types><numbers><standards>", "AnswerCount": "3"}});