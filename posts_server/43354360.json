post_cb({"43354670": {"ParentId": "43354360", "CommentCount": "0", "Body": "<p>Yes, this is guaranteed to work.</p>\n<p>[12.2/4-5]</p>\n<blockquote>\n<p id=\"so_43354360_43354670_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the full-expression. ...</p>\n<p id=\"so_43354360_43354670_1\">The second context is when a reference is bound to a temporary.  The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<ul>\n<li><p id=\"so_43354360_43354670_2\">A temporary object bound to a reference parameter in a function call persists until the completion of the full-expression containing the call.</p></li>\n<li><p id=\"so_43354360_43354670_3\">The lifetime of a temporary bound to the returned value in a function return statement is not extended; the temporary is destroyed at the end of the full-expression in the return statement.</p></li>\n<li><p id=\"so_43354360_43354670_4\">A temporary bound to a reference in a <em>new-initializer</em> persists until the completion of the full-expression containing the <em>new-initializer</em>.</p></li>\n</ul>\n</blockquote>\n<p>No constructor or <code>operator=</code> is called to initialize <code>a</code>, and <code>a</code> is not <code>const</code> if it doesn't need to be.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "43354670", "Score": "1", "CreationDate": "2017-04-11T19:30:31.353", "LastActivityDate": "2017-04-11T19:30:31.353"}, "43354360": {"CommentCount": "2", "ViewCount": "51", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2017-04-11T19:10:26.287", "LastActivityDate": "2017-04-11T19:31:28.247", "Title": "Lifetime of temporary rvalue referenced object", "AcceptedAnswerId": "43354670", "LastEditDate": "2017-04-11T19:31:28.247", "Id": "43354360", "Score": "0", "Body": "<p>Suppose you have this code (in c++14) :</p>\n<pre><code>auto &amp;&amp; a = a_function_returning_a_temp_rvalue();\n</code></pre>\n<p>Where is stored the returned value, when is its destructor called, is <code>a</code> <code>const</code> (considering the function doesn't return a <code>const</code> ), how is it specified in the standard ?\n(is it even legal)</p>\n<p>Also, do you confirm, the temporary is really bound to <code>a</code>, and no <code>operator=</code> neither constructors will be called ?</p>\n<p>It compiles on g++ and avoid typing long template classes, but before using it, I would like to check if it's clearly stated in c++14</p>\n", "Tags": "<c++><c++14><language-lawyer>", "OwnerUserId": "1745291", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_43354360_43354670_4": {"section_id": 382, "quality": 1.0, "length": 10}, "so_43354360_43354670_2": {"section_id": 382, "quality": 1.0, "length": 13}, "so_43354360_43354670_3": {"section_id": 382, "quality": 0.9375, "length": 15}, "so_43354360_43354670_0": {"section_id": 381, "quality": 1.0, "length": 10}, "so_43354360_43354683_0": {"section_id": 382, "quality": 0.6607142857142857, "length": 37}, "so_43354360_43354670_1": {"section_id": 382, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_43354360_43354670_4": {"section_id": 373, "quality": 1.0, "length": 10}, "so_43354360_43354670_2": {"section_id": 373, "quality": 1.0, "length": 13}, "so_43354360_43354670_3": {"section_id": 373, "quality": 0.9375, "length": 15}, "so_43354360_43354670_0": {"section_id": 372, "quality": 1.0, "length": 10}, "so_43354360_43354670_1": {"section_id": 373, "quality": 0.9047619047619048, "length": 19}, "so_43354360_43354683_0": {"section_id": 373, "quality": 0.6607142857142857, "length": 37}}, "n4659": {"so_43354360_43354670_2": {"section_id": 397, "quality": 1.0, "length": 13}, "so_43354360_43354670_4": {"section_id": 397, "quality": 1.0, "length": 10}, "so_43354360_43354670_3": {"section_id": 397, "quality": 0.9375, "length": 15}, "so_43354360_43354670_0": {"section_id": 396, "quality": 0.9, "length": 9}, "so_43354360_43354670_1": {"section_id": 397, "quality": 0.8571428571428571, "length": 18}, "so_43354360_43354683_0": {"section_id": 397, "quality": 0.6964285714285714, "length": 39}}}, "43354683": {"ParentId": "43354360", "CommentCount": "0", "Body": "<p>The rule is in [class.temporary]:</p>\n<blockquote>\n<p id=\"so_43354360_43354683_0\">There are three contexts in which temporaries are destroyed at a different point than the end of the full-expression. [...] The third context is when a reference is bound to a temporary.116 The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound <strong>persists for the lifetime of the reference</strong> except:<br>\n  \u2014 A temporary object bound to a reference parameter in a function call (5.2.2) [...]<br>\n  \u2014 The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is [...]<br>\n  \u2014 A temporary bound to a reference in a new-initializer (5.3.4) persists until [...]</br></br></br></p>\n</blockquote>\n<p>In this example:</p>\n<pre><code>auto &amp;&amp; a = a_function_returning_a_temp_rvalue();\n</code></pre>\n<p>I'm assuming the function returns something of type <code>T</code> (as opposed to <code>T&amp;</code> or <code>T&amp;&amp;</code>). In this case, we do have a temporary bound to a reference, and none of those exceptions apply. Hence, the lifetime of that temporary is extended for the lifetime of <code>a</code>. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "43354683", "Score": "2", "CreationDate": "2017-04-11T19:31:20.193", "LastActivityDate": "2017-04-11T19:31:20.193"}});