post_cb({"27221776": {"ParentId": "27221737", "CommentCount": "2", "CreationDate": "2014-12-01T04:37:13.933", "OwnerUserId": "744178", "PostTypeId": "2", "Id": "27221776", "Score": "3", "Body": "<p>Those two functions do not have the same name.  The first one is <code>A::operator+(A)</code>, while the second is <code>operator+(A,A)</code>.  Thus, they are two different functions, and only the second is actually defined.</p>\n<p>After all, giving a class <code>Foo</code> a method named <code>bar()</code> is not the same as defining a function <code>bar(Foo)</code>.  Why should operators be any different?</p>\n", "LastActivityDate": "2014-12-01T04:37:13.933"}, "27222043": {"ParentId": "27221737", "CommentCount": "0", "CreationDate": "2014-12-01T05:09:33.297", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "27222043", "Score": "1", "Body": "<p>In your code the two functions have the same name, <code>operator+</code>.   However, it is possible to have different functions that have the same name. Another example is:</p>\n<pre><code>int foo();\nint foo(int);\n</code></pre>\n<p>Those are different functions with the same name.</p>\n<p>The relevant clauses for your code are N3936 [basic.link]/9:</p>\n<blockquote>\n<p id=\"so_27221737_27222043_0\">Two names that are the same (Clause 3) and that are declared in different scopes shall denote the same variable, function, type, enumerator, template or namespace if</p>\n<ul>\n<li>both names have external linkage or else both names have internal linkage and are declared in the same translation unit; and</li>\n<li>both names refer to members of the same namespace or to members, not by inheritance, of the same\n  class; and\n  [...]</li>\n</ul>\n</blockquote>\n<p>In your code, the second bullet point fails because one <code>operator+</code> is a member of a class but the other one is not a member of the same class. Therefore the names denote different functions.</p>\n<p>The case of overloaded functions in the same scope (as in my example) is covered by [dcl.fct]/5</p>\n", "LastActivityDate": "2014-12-01T05:09:33.297"}, "27221737": {"CommentCount": "6", "ViewCount": "54", "OwnerDisplayName": "user2953119", "CreationDate": "2014-12-01T04:31:34.490", "LastActivityDate": "2014-12-01T05:09:33.297", "PostTypeId": "1", "AcceptedAnswerId": "27222043", "Title": "Why does the following operator overloading is ambiguous?", "Id": "27221737", "Score": "1", "Body": "<p>In the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;initializer_list&gt;\n\nstruct A\n{\n    bool operator+(A a);\n};\n\nbool operator+(A, A)\n{\n    return false;\n}\n\nint main()\n{ \n    A a, b;\n    std::cout &lt;&lt; a + b &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/4c0e1e7b63ac97db\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>The Standard says <code>N3797:3/8 [basic]</code>:</p>\n<blockquote>\n<p id=\"so_27221737_27221737_0\">Two names are the same if </p>\n<p id=\"so_27221737_27221737_1\">\u2014 they are identifiers composed of the same character sequence, or </p>\n<p id=\"so_27221737_27221737_2\">\u2014 they are operator-function-ids formed with the same operator, or</p>\n<p id=\"so_27221737_27221737_3\">[...]</p>\n</blockquote>\n<p>I this example we defined and declared two operator-functions with the same operator, therefore these two functions have the same name. Therefore the first declaration introduces the name, the second defines an entity, denoted by that name. What's wrong?</p>\n", "Tags": "<c++><operator-keyword>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27221737_27222043_0": {"section_id": 7142, "quality": 1.0, "length": 15}, "so_27221737_27221737_2": {"section_id": 7031, "quality": 1.0, "length": 5}, "so_27221737_27221737_1": {"section_id": 7031, "quality": 1.0, "length": 6}}, "n3337": {"so_27221737_27222043_0": {"section_id": 6886, "quality": 1.0, "length": 15}, "so_27221737_27221737_2": {"section_id": 6777, "quality": 1.0, "length": 5}, "so_27221737_27221737_1": {"section_id": 6777, "quality": 1.0, "length": 6}}, "n4659": {"so_27221737_27222043_0": {"section_id": 8643, "quality": 0.9333333333333333, "length": 14}, "so_27221737_27221737_1": {"section_id": 8528, "quality": 1.0, "length": 6}, "so_27221737_27221737_2": {"section_id": 8528, "quality": 1.0, "length": 5}}}});