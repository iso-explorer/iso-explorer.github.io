post_cb({"14122234": {"ParentId": "5206080", "CommentCount": "0", "Body": "<p>There's also another solution to the partial specialization problem, if you don't want to introduce additional functions, methods or classes to your code.</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T1, typename T2&gt;\nclass C\n{\n    void f(T1 t1);\n}\n\ntemplate &lt;typename T1, typename T2&gt;\nvoid C&lt;T1, T2&gt;::f(T1 t1)\n{\n    if (std::is_same&lt;T2, float&gt;::value)\n    // Do sth\n    else\n    // Do sth\n}\n</code></pre>\n", "OwnerUserId": "453803", "PostTypeId": "2", "Id": "14122234", "Score": "0", "CreationDate": "2013-01-02T12:40:56.617", "LastActivityDate": "2013-01-02T12:40:56.617"}, "5206080": {"CommentCount": "0", "CreationDate": "2011-03-05T19:00:44.553", "PostTypeId": "1", "AcceptedAnswerId": "5206652", "LastEditorUserId": "631168", "LastActivityDate": "2013-01-02T12:40:56.617", "LastEditDate": "2011-03-05T19:07:26.843", "ViewCount": "1967", "FavoriteCount": "1", "Title": "C++ - Overload templated class method with a partial specilization of that method", "Id": "5206080", "Score": "0", "Body": "<p>There are a few questions already similar to this already on stack overflow, but nothing that seemd to directly answer the question I have. I do apologise if I am reposting.</p>\n<p>I'd like to overload a few methods of a templated class (with 2 template parameters) with a partial template specialisation of those methods. I haven't been able to figure out the correct syntax, and am starting to think that it's not possible. I thought I'd post here to see if I can get confirmation.</p>\n<p>Example code to follow:</p>\n<pre><code>template &lt;typename T, typename U&gt;\nclass Test\n{\npublic:\n    void Set( T t, U u ); \n\n    T m_T;\n    U m_U;\n};\n\n// Fully templated method that should be used most of the time\ntemplate &lt;typename T, typename U&gt;\ninline void Test&lt;T,U&gt;::Set( T t, U u )\n{\n    m_T=t;\n    m_U=u;\n}\n\n// Partial specialisation that should only be used when U is a float.\n// This generates compile errors\ntemplate &lt;typename T&gt;\ninline void Test&lt;T,float&gt;::Set( T t, float u )\n{\n    m_T=t;\n    m_U=u+0.5f;\n}\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    Test&lt;int, int&gt; testOne;    \n    int a = 1;\n    testOne.Set( a, a );\n\n    Test&lt;int, float&gt; testTwo;    \n    float f = 1.f;\n    testTwo.Set( a, f );\n}\n</code></pre>\n<p>I know that I could write a partial specialisation of the entire class, but that kinda sucks. Is something like this possible?</p>\n<p>(I'm using VS2008)\nEdit: Here is the compile error\nerror C2244: 'Test::Set' : unable to match function definition to an existing declaration</p>\n<p>Thanks :)</p>\n", "Tags": "<c++><templates><overloading><partial-specialization>", "OwnerUserId": "631168", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_5206080_5206117_0": {"section_id": 149, "quality": 0.963855421686747, "length": 80}}, "n3337": {"so_5206080_5206117_0": {"section_id": 143, "quality": 0.963855421686747, "length": 80}}, "n4659": {"so_5206080_5206117_0": {"section_id": 153, "quality": 0.963855421686747, "length": 80}}}, "5206117": {"ParentId": "5206080", "LastEditDate": "2011-03-05T19:22:13.620", "CommentCount": "0", "CreationDate": "2011-03-05T19:07:46.387", "OwnerUserId": "415784", "LastEditorUserId": "415784", "PostTypeId": "2", "Id": "5206117", "Score": "4", "Body": "<p>You cannot partially specialize a member function without defining partial specialization of the class template itself. Note that partial specialization of a template is STILL a template, hence when the compiler sees <code>Test&lt;T, float&gt;</code>, it expects a partial specialization of the class template. </p>\n<p>--</p>\n<p>$14.5.4.3/1 from the C++ Standard (2003) says,</p>\n<blockquote>\n<p id=\"so_5206080_5206117_0\"><strong>The template parameter list of a\n  member of a class template partial\n  specialization shall match the\n  template parameter list of the class\n  template partial specialization.</strong> The\n  template argument list of a member of\n  a class template partial\n  specialization shall match the\n  template argument list of the class\n  template partial specialization. <strong>A\n  class template specialization is a\n  distinct template. The members of the\n  class template partial specialization\n  are unrelated to the members of the\n  primary template.</strong> Class template\n  partial specialization members that\n  are used in a way that requires a\n  definition shall be defined; the\n  definitions of members of the primary\n  template are never used as definitions\n  for members of a class template\n  partial specialization. An explicit\n  specialization of a member of a class\n  template partial specialization is\n  declared in the same way as an\n  explicit specialization of the primary\n  template.</p>\n</blockquote>\n<p>Then the Standard itself gives this example,</p>\n<pre><code>// primary template\ntemplate&lt;class T, int I&gt; struct A {\nvoid f();\n};\ntemplate&lt;class T, int I&gt; void A&lt;T,I&gt;::f() { }\n\n// class template partial specialization\ntemplate&lt;class T&gt; struct A&lt;T,2&gt; {\nvoid f();\nvoid g();\nvoid h();\n};\n// member of class template partial specialization\ntemplate&lt;class T&gt; void A&lt;T,2&gt;::g() { }\n</code></pre>\n<p>I hope the quotation from the Standard along with the example answers your question well.</p>\n", "LastActivityDate": "2011-03-05T19:22:13.620"}, "5206652": {"ParentId": "5206080", "CommentCount": "1", "Body": "<p>The particular problem you're sketching is easy:</p>\n<pre><code>template&lt; class T &gt;\ninline T foo( T const&amp; v ) { return v; }\n\ntemplate&lt;&gt;\nfloat foo( float const&amp; v ) { return v+0.5; }\n</code></pre>\n<p>Then call <code>foo</code> from your <code>Test::Set</code> implementation.</p>\n<p>If you want the full generality, then similarly use a helper class with static helper member functions, and partially specialize that helper class.</p>\n<p>Cheers &amp; hth.,</p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "5206652", "Score": "1", "CreationDate": "2011-03-05T20:42:37.210", "LastActivityDate": "2011-03-05T20:42:37.210"}});