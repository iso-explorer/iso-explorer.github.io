post_cb({"bq_ids": {"n4140": {"so_37206756_37206971_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 955}}, "n3337": {"so_37206756_37206971_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 943}}}, "37206756": {"ViewCount": "766", "Body": "<p>I am doing some height map in OpenGL. The only z of each vertex is stored in a file, and I have to store as well the x and y value in a vector :</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n\nint main(void)\n{\n    std::vector&lt;float&gt;      _data;\n    float constexpr         triangle_side(1.118033989);\n    std::ifstream           ifs(\"mymap\");\n    std::string             line;\n\n    if (not ifs.is_open())\n        return -1;\n    for (float y(0) ; std::getline(ifs, line) ; --y)\n    {\n        std::istringstream  iss(line);\n\n        for (float x(static_cast&lt;int&gt;(y) % 2 ? 0 : triangle_side / 2), z ; iss &gt;&gt; z ; x += triangle_side)\n            _data.push_back({x, y, z}); // does not compile\n    }\n    ifs.close();\n    return 0;\n}\n</code></pre>\n<p>In my opinion, it is a bad thing to do : <code>_data.push_back(x); _data.push_back(y); _data.push_back(z);</code> because the vector perhaps will reallocate the array at each call.</p>\n<p>What is the best way to do it ?</p>\n<p>If I do :</p>\n<pre><code>std::vector&lt; std::array&lt;float, 3&gt; &gt; _data;\n//...\n_data.push_back({x, y, z});\n</code></pre>\n<p>is it guaranteed the values will all be contiguous ?</p>\n", "AcceptedAnswerId": "37207058", "Title": "How to push an array in a std vector", "CreationDate": "2016-05-13T09:49:56.537", "Id": "37206756", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2016-05-13T10:04:24.697", "Score": "0", "OwnerUserId": "4498831", "Tags": "<c++><vector>", "AnswerCount": "2"}, "37206971": {"PostTypeId": "2", "Body": "<p>Use std::vector::reserve(size_type n) to reserve that the backing array contain at least n elements. If it does not, it will be reallocated once.\nOn an existing vector, if you need not just '3' but 'at least 3 more' elements, you just call it with (std::vector::size + 3). After that you can push back safely  with the guarantee the array won't be reallocated inside the vector.</p>\n<p>A vector of std::array is forced to be contiguous by the standard, as is std::vector. A std::vector of std::arrays thus has all the elements in contiguous order. <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow\">Source</a></p>\n<p>@cin_cout:\nC++03 (23.2.4.1):</p>\n<blockquote>\n<p id=\"so_37206756_37206971_0\">The elements of a vector are stored contiguously, meaning that if v is\n  a vector where T is some type other than bool, then it obeys the\n  identity &amp;v[n] == &amp;v[0] + n for all 0 &lt;= n &lt; v.size().</p>\n</blockquote>\n", "LastActivityDate": "2016-05-13T10:04:24.697", "LastEditorUserId": "2912665", "Id": "37206971", "CommentCount": "2", "CreationDate": "2016-05-13T09:58:35.187", "ParentId": "37206756", "Score": "1", "OwnerUserId": "5369164", "LastEditDate": "2016-05-13T10:04:24.697"}, "37207058": {"PostTypeId": "2", "Body": "<p><code>std::array&lt;float, 3&gt;</code> is laid out like a C array in memory, so the <code>float</code>s will be contiguous. You could also just use <code>insert</code>:</p>\n<pre><code>_data.insert(_data.cend(), {x, y, z});\n</code></pre>\n", "LastActivityDate": "2016-05-13T10:01:48.787", "Id": "37207058", "CommentCount": "5", "CreationDate": "2016-05-13T10:01:48.787", "ParentId": "37206756", "Score": "4", "OwnerUserId": "2491746"}});