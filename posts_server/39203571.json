post_cb({"39204332": {"Id": "39204332", "PostTypeId": "2", "Body": "<p>I'll take a wild stab in the dark here and say that people fall into two camps:</p>\n<ul>\n<li><p>those who remove the line think it is redundant and all such code should be \nremoved for brevity</p></li>\n<li><p>those who add the line think it makes the return value clear and unambiguous to lesser coders.</p></li>\n</ul>\n<p><strong>Personally, I would tend to always write a meaningful <code>return</code> statement in <code>main</code> in my production code</strong> (if only because my production <code>main</code>s tend to also contain code paths that end up returning something other than <code>0</code>, generally in exception handlers), although I wouldn't bother for a trivial <code>main</code> that never returns anything else; for example, I don't think I've <em>ever</em> done so in, say, a Coliru post for a Stack Overflow demonstration.</p>\n<p>Some would say that it's absurd to alter a codebase to flip between these two states, that  the arguments are both very weak in the grand scheme of things, and that such a personal choice is not worth risking the introduction of bugs.</p>\n<p>But I'd say this depends almost entirely on what your environment is like. If you're halfway through a release cycle, of course you're going to make code maintenance improvements and style adjustments: this is the best time to avoid accruing technical debt, and you absolutely want to do that. But <strong>if you're planning to make this change directly on a production server, or in version control one week before that big release, you're out of your mind.</strong></p>\n<p><em>(Hopefully your policies prevent such madness anyway. Code freeze, yes? No changes to production, right?)</em></p>\n<p>So, although it goes without saying that <strong>the underlying choice is highly subjective</strong>, we <em>can</em> quantify the risk/benefit of enforcing such a choice after-the-fact.</p>\n<p>But never mind real life, what about on Code Review? Well, I have no idea; you'd have to ask them. Personally, on those specific examples, I probably would have removed it too, albeit with the written caveat that this were purely a style choice. Whether purely style changes are appropriate on Code Review is a question for Code Review Meta.</p>\n", "LastEditorUserId": "366904", "LastActivityDate": "2016-12-07T09:19:16.050", "Score": "4", "CreationDate": "2016-08-29T10:44:59.107", "ParentId": "39203571", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2016-12-07T09:19:16.050"}, "bq_ids": {"n4140": {"so_39203571_39203738_0": {"length": 18, "quality": 0.72, "section_id": 7146}, "so_39203571_39203738_3": {"length": 25, "quality": 0.8928571428571429, "section_id": 7149}}, "n3337": {"so_39203571_39203738_0": {"length": 22, "quality": 0.88, "section_id": 6890}, "so_39203571_39203738_3": {"length": 25, "quality": 0.8928571428571429, "section_id": 6893}}, "n4659": {"so_39203571_39203738_0": {"length": 18, "quality": 0.72, "section_id": 8647}, "so_39203571_39203738_3": {"length": 21, "quality": 0.75, "section_id": 8650}}}, "39203738": {"Id": "39203738", "PostTypeId": "2", "Body": "<p>From C++, <strong>3.6.1 Main Function</strong></p>\n<blockquote>\n<p id=\"so_39203571_39203738_0\">(3.6.1/5) An implementation shall not predefine the main function. This\n  function shall not be overloaded. It shall have a return type of type\n  int, but otherwise its type is implementation-defined. All\n  implementations shall allow both of the following definitions of main:</p>\n<p id=\"so_39203571_39203738_1\"><code>int main() { /* ... */ }</code> and</p>\n<p id=\"so_39203571_39203738_2\"><code>int main(int argc, char* argv[]) { /* ... */ }</code></p>\n</blockquote>\n<p>So in C++, two prominent signatures for <code>main</code> function are :  <code>int main()</code> and <code>int main(int argc, char** argv)</code></p>\n<p>Further in C++, <strong>3.6.1 Main function</strong></p>\n<blockquote>\n<p id=\"so_39203571_39203738_3\">(3.6.1/5) A return statement in main has the effect of leaving the\n  main function (destroying any objects with automatic storage duration)\n  and calling exit with the return value as the argument. <strong>If control\n  reaches the end of main without encountering a return statement, the\n  effect is that of executing return 0</strong>;</p>\n</blockquote>\n<p>So, although the signature suggest that function should return some integer, it is not necessary to <code>return 0</code>. By default, C++ considers return value to be 0.</p>\n<p><strong>Advantages:</strong><br>\n- Treating <code>main</code> as normal function and following similar C++ coding convention<br>\n- <code>return 0</code> explicitly specify normal return value, in other cases we can return non-zero value</br></br></p>\n<p>Although, all these points are matter of coding convention. It is still choice of programmer!</p>\n", "LastEditorUserId": "3315583", "LastActivityDate": "2016-08-29T10:36:42.590", "Score": "1", "CreationDate": "2016-08-29T10:12:49.267", "ParentId": "39203571", "CommentCount": "10", "OwnerUserId": "3315583", "LastEditDate": "2016-08-29T10:36:42.590"}, "39203571": {"ViewCount": "238", "Body": "<p>I know that the current C++ standard special cases <code>main</code> so that falling off the end has the same effect as <code>return 0;</code> rather than undefined behavior.</p>\n<p>I was recently surprised to see <a href=\"https://codereview.stackexchange.com/questions/139896/determining-if-the-kangaroos-will-land-in-the-same-position\">an example at codereview</a> where the responses not only pointed out that including the final <code>return 0;</code> is optional, but actually went so far as to <em>remove</em> it from the original code.</p>\n<p>Thus prompts my question \u2014 is it really considered bad style to make the <code>return 0;</code> explicit at the end of main? What is the rationale for or against?</p>\n", "Title": "Should return 0; be avoided in main()?", "CreationDate": "2016-08-29T10:04:37.757", "LastActivityDate": "2016-12-07T09:19:16.050", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-04-13T12:40:33.320", "Tags": "<c++><main>", "Id": "39203571", "LastEditorUserId": "-1", "Score": "5", "OwnerUserId": "1084944", "ClosedDate": "2016-08-29T12:12:34.723", "AnswerCount": "2"}});