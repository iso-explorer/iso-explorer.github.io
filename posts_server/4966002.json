post_cb({"4966020": {"Id": "4966020", "PostTypeId": "2", "Body": "<p>In C++ <code>NULL</code> expands to either <code>0</code> or <code>0L</code>. So <code>if (pointerVar)</code> the same as <code>if (pointerVar!=NULL)</code> and  <code>if (!pointerVar)</code> is the same as <code>if (pointerVar==NULLL)</code>.</p>\n", "LastActivityDate": "2011-02-11T05:49:26.553", "CommentCount": "9", "CreationDate": "2011-02-11T05:49:26.553", "ParentId": "4966002", "Score": "1", "OwnerUserId": "133520"}, "4966002": {"ViewCount": "161", "Body": "<p>Simple question:</p>\n<p>Is <code>if (pointerVar)</code> the same as <code>if (pointerVar!=NULL)</code>?</p>\n<p>Also, is <code>if (!pointerVar)</code> the same as <code>if (pointerVar==NULL)</code>?</p>\n<p>Give me your most technically correct/pedantic answer. The two statements seem and make sense to operate the same. Is there anything wrong with the former though (besides its slightly lower readability)?</p>\n", "AcceptedAnswerId": "4966034", "Title": "Is if(pointerVar) the same as if(pointerVar!=NULL)?", "CreationDate": "2011-02-11T05:44:20.907", "Id": "4966002", "CommentCount": "2", "LastEditDate": "2011-02-11T18:46:04.413", "PostTypeId": "1", "LastEditorUserId": "501557", "LastActivityDate": "2011-02-11T18:46:04.413", "Score": "6", "OwnerUserId": "429435", "Tags": "<c++><pointers>", "AnswerCount": "4"}, "4966041": {"Id": "4966041", "PostTypeId": "2", "Body": "<p>Yes. You are right. Remember that the condition is false if it returns zero value, it is true otherwise. In above expressions when pointerVal = NULL, (NULL is zero internally), <code>if(pointerVal) </code> will return false. Reverse is true for <code>if(!pointerVal)</code> as we are negating the condition.<br>\nBoth expressions are valid and common practice. </br></p>\n", "LastActivityDate": "2011-02-11T05:52:58.983", "CommentCount": "0", "CreationDate": "2011-02-11T05:52:58.983", "ParentId": "4966002", "Score": "1", "OwnerUserId": "439578"}, "bq_ids": {"n4140": {"so_4966002_4966034_3": {"length": 24, "quality": 0.7272727272727273, "section_id": 39}, "so_4966002_4966034_0": {"length": 18, "quality": 0.9, "section_id": 3885}, "so_4966002_4966034_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 44}, "so_4966002_4966034_2": {"length": 17, "quality": 0.8095238095238095, "section_id": 6072}}, "n3337": {"so_4966002_4966034_3": {"length": 29, "quality": 0.8787878787878788, "section_id": 36}, "so_4966002_4966034_0": {"length": 18, "quality": 0.9, "section_id": 3745}, "so_4966002_4966034_2": {"length": 17, "quality": 0.8095238095238095, "section_id": 5840}, "so_4966002_4966034_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 41}}, "n4659": {"so_4966002_4966034_3": {"length": 24, "quality": 0.7272727272727273, "section_id": 39}, "so_4966002_4966034_0": {"length": 19, "quality": 0.95, "section_id": 4764}, "so_4966002_4966034_2": {"length": 17, "quality": 0.8095238095238095, "section_id": 7568}, "so_4966002_4966034_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 45}}}, "4966034": {"Id": "4966034", "PostTypeId": "2", "Body": "<p>For the most pedantic answer, here's the relevant sections of the spec.</p>\n<p>First, here's how <code>if</code> statements work, from \u00a76.4.4:</p>\n<blockquote>\n<p id=\"so_4966002_4966034_0\">The value of a condition that is an initialized declaration in a statement other than a switch statement is the value of the declared variable <strong>implicitly converted to type <code>bool</code></strong>. If that conversion is ill-formed, the program is ill-formed.</p>\n</blockquote>\n<p>\"But how are pointers converted to <code>bool</code>s?\" you may ask.  Well, here's \u00a74.12.1: :-)</p>\n<blockquote>\n<p id=\"so_4966002_4966034_1\">An rvalue of arithmetic, enumeration, <strong>pointer</strong>, or pointer to member type can be converted to an rvalue of type bool. A zero value, <strong>null pointer value</strong>, or null member pointer value is converted to false; any other value is converted to true.</p>\n</blockquote>\n<p>So this means that the statement</p>\n<pre><code>if (ptr)\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>if ((bool) ptr)\n</code></pre>\n<p>which is in turn equivalent to</p>\n<pre><code>if (ptr == NULL)\n</code></pre>\n<p>But what about</p>\n<pre><code>if (!ptr)\n</code></pre>\n<p>Well, the C++ spec, \u00a75.3.1.8, says that</p>\n<blockquote>\n<p id=\"so_4966002_4966034_2\">The operand of the logical negation operator ! is implicitly converted to <code>bool</code> (clause 4); its value is <code>true</code> if the converted operand is <code>false</code> and <code>false</code> otherwise. The type of the result is <code>bool</code>.</p>\n</blockquote>\n<p>So this means that</p>\n<pre><code>if (!ptr)\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>if (!(bool)ptr)\n</code></pre>\n<p>which is in turn equivalent to</p>\n<pre><code>if (!(ptr == NULL))\n</code></pre>\n<p>which is finally equivalent to</p>\n<pre><code>if (ptr != NULL)\n</code></pre>\n<p>Whew!  That was a fun search to do.  Hope this answers your question!</p>\n<p>Of course, there is more to this story.  <code>NULL</code> is not part of the C++ language; it's a macro in <code>&lt;cstddef&gt;</code> defined as</p>\n<pre><code>#define NULL 0\n</code></pre>\n<p>This works because the C++ standard defines the null pointer in \u00a74.10.1 as</p>\n<blockquote>\n<p id=\"so_4966002_4966034_3\">A null pointer constant is an integral constant expression (5.19) rvalue of <strong>integer type that evaluates to zero</strong>. A null pointer constant can be converted to a pointer type; the result is the null pointer value of that type and is distinguishable from every other value of pointer to object or pointer to function type</p>\n</blockquote>\n<p>So to be more correct, I should have been using the numeric literal 0 in the above examples.  However, if you have <code>&lt;cstddef&gt;</code> included, then this works out to the same code after preprocessing.</p>\n", "LastEditorUserId": "501557", "LastActivityDate": "2011-02-11T07:42:06.163", "Score": "10", "CreationDate": "2011-02-11T05:51:54.290", "ParentId": "4966002", "CommentCount": "9", "OwnerUserId": "501557", "LastEditDate": "2011-02-11T07:42:06.163"}, "4966011": {"Id": "4966011", "PostTypeId": "2", "Body": "<p>Assuming <code>pointerVar</code> is a raw pointer, then yes. Otherwise, it depends, though usually it is still practically the same for smart pointers.</p>\n<p>There is certainly nothing wrong with the first version, in fact, many experienced C++ programmers would consider it more readable.</p>\n", "LastEditorUserId": "319906", "LastActivityDate": "2011-02-11T05:50:37.610", "Score": "6", "CreationDate": "2011-02-11T05:47:40.797", "ParentId": "4966002", "CommentCount": "0", "OwnerUserId": "9990", "LastEditDate": "2011-02-11T05:50:37.610"}});