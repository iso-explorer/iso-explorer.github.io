post_cb({"18581492": {"ParentId": "18581443", "CommentCount": "0", "Body": "<p>C++11 (n3485), [basic.types]9-10</p>\n<blockquote>\n<p id=\"so_18581443_18581492_0\">Arithmetic types, enumeration types, pointer types, pointer to member types, <code>std::nullptr_t</code>, and cv-qualified versions of these types are collectively called <em>scalar types</em> [...]</p>\n<p id=\"so_18581443_18581492_1\">A type is a <em>literal type</em> if it is:</p>\n<ul>\n<li>a scalar type; or</li>\n<li>a reference type; or</li>\n<li>an array of literal type; or</li>\n<li>a class type that has all of the following properties:\n  <ul>\n<li>it has a trivial destructor,</li>\n<li>every constructor call and full-expression in the <em>brace-or-equal-initializers</em> for non-static data members (if any) is a constant expression,</li>\n<li>it is an aggregate type or has at least one <code>constexpr</code> constructor or constructor template that is not a copy or move constructor, and</li>\n<li>all of its non-static data members and base classes are of non-volatile literal types.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>[dcl.init.aggr]/1</p>\n<blockquote>\n<p id=\"so_18581443_18581492_2\">An <em>aggregate</em> is an array or a class with no user-provided constructors, no <em>brace-or-equal-initializers</em> for non-static data members, no private or protected non-static data members, no base classes, and no virtual functions.</p>\n</blockquote>\n", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "18581492", "Score": "2", "CreationDate": "2013-09-02T22:19:52.580", "LastActivityDate": "2013-09-02T22:19:52.580"}, "18581443": {"CommentCount": "0", "ViewCount": "3638", "LastActivityDate": "2013-09-02T22:19:52.580", "Body": "<p>The book I'm reading frequently mentions that a type has to be literal type to use in certain situations, such as types that can use constexpr. But the only definition given was that literal types are arithmetic, reference, or pointer types. But when we define a constexpr type, it seems like it has to be initialized with a literal or a variable that was originally initialized with a literal.</p>\n<p>I'm confused with what qualifies as a literal type and what doesn't.</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "18581488", "FavoriteCount": "4", "Title": "Need clarification on definition of literal type", "Id": "18581443", "Score": "16", "CreationDate": "2013-09-02T22:15:12.593", "Tags": "<c++>", "OwnerUserId": "2697630", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18581443_18581492_0": {"section_id": 7207, "quality": 1.0, "length": 17}, "so_18581443_18581492_2": {"section_id": 3298, "quality": 0.7222222222222222, "length": 13}}, "n3337": {"so_18581443_18581492_0": {"section_id": 6951, "quality": 0.9411764705882353, "length": 16}, "so_18581443_18581492_2": {"section_id": 3168, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_18581443_18581492_0": {"section_id": 8716, "quality": 1.0, "length": 17}, "so_18581443_18581492_2": {"section_id": 4063, "quality": 0.5555555555555556, "length": 10}}}, "18581488": {"ParentId": "18581443", "CommentCount": "7", "Body": "<p>From C++11, 3.9/10:</p>\n<blockquote>\n<p id=\"so_18581443_18581488_0\">A type is a <em>literal type</em> if it is:</p>\n<ul>\n<li>a scalar type; or</li>\n<li>a reference type; or</li>\n<li>an array of literal type; or</li>\n<li>a class type (Clause 9) that has all of the following properties:\n  <ul>\n<li>it has a trivial destructor,</li>\n<li>every constructor call and full-expression in the <em>brace-or-equal-initializers</em> for non-static data members (if any) is a constant expression (5.19),</li>\n<li>it is an aggregate type (8.5.1) or has at least one constexpr constructor or constructor template that is not a copy or move constructor, and</li>\n<li>all of its non-static data members and base classes are of literal types.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>So basically it's either a reference, or a primitive object type, or something that can be constructed from a literal type in a constexpr-sort of way (arrays, aggregates, or classes with constexpr constructor).</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "18581488", "Score": "7", "CreationDate": "2013-09-02T22:19:35.353", "LastActivityDate": "2013-09-02T22:19:35.353"}});