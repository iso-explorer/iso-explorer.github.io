post_cb({"43441714": {"CommentCount": "5", "CreationDate": "2017-04-16T20:17:44.783", "PostTypeId": "1", "AcceptedAnswerId": "43441944", "LastEditorUserId": "3643526", "LastActivityDate": "2017-04-16T21:04:03.187", "LastEditDate": "2017-04-16T20:49:20.473", "ViewCount": "53", "FavoriteCount": "1", "Title": "gcc linking externs incorrectly?", "Id": "43441714", "Score": "3", "Body": "<p>I'm relatively new to gcc and I'm using 'gcc (tdm-1) 5.1.0'. I've come across a very peculiar circumstance by mistake. I've shrunk my concern down to a very small reproducible example...</p>\n<p><strong>main.cpp</strong></p>\n<pre><code>extern int g;\n\nint main(){\n    return g;\n}\n</code></pre>\n<p><strong>someOtherFile.cpp</strong></p>\n<pre><code>#include&lt;windows.h&gt;\n\nRECT g;\n</code></pre>\n<p>this I compile with</p>\n<pre><code>gcc -c someOtherFile.cpp\ngcc main.cpp someOtherFile.o\n</code></pre>\n<p>and this will link without error.</p>\n<p>Am I missing something here as to why this is allowed to link?</p>\n", "Tags": "<c++><gcc><linker>", "OwnerUserId": "3643526", "AnswerCount": "2"}, "43441887": {"ParentId": "43441714", "LastEditDate": "2017-04-16T21:04:03.187", "CommentCount": "12", "CreationDate": "2017-04-16T20:37:18.820", "OwnerUserId": "468725", "LastEditorUserId": "468725", "PostTypeId": "2", "Id": "43441887", "Score": "0", "Body": "<p>In C++ it won't link as the types of <code>g</code> are non-matching between main.cpp and someOtherFile.cpp. You have to have <code>int g</code> in someOtherFile.cpp or opposite, <code>extern RECT g;</code> in main.cpp.</p>\n<p>In C this will compile and link, but on in c++.\nCom compile and link as c++:</p>\n<pre><code>g++ -c someOtherFile.cpp\ng++ -c main.cpp\ng++ main.o someOtherFile.o -o test\n</code></pre>\n<p>Alternatively, you may use functions for this:</p>\n<p><strong>main.cpp</strong></p>\n<pre><code>int g();\n\nint main{\n    return g();\n}\n</code></pre>\n<p><strong>someOtherFile.cpp</strong></p>\n<pre><code>#include&lt;windows.h&gt;\n\nRECT r;\nint g()\n{\n    return (int)r;\n}\n</code></pre>\n<p>Obviously not recommended (as there isn't much point to cast RECT to int), but that would be similar in effect to what you were trying to do.</p>\n<p>Variable <code>g</code> inside <code>someOtherFile.cpp</code> isn't related to the other <code>extern int g</code> declared in main.cpp. In effect, the <code>int g</code> simply isn't defined anywhere and linker will fail at the end for this reason.</p>\n<p>Apparently, this will actually compile and link by g++, while microsoft linker will error on this type of mistake.</p>\n", "LastActivityDate": "2017-04-16T21:04:03.187"}, "bq_ids": {"n4140": {"so_43441714_43441944_0": {"section_id": 7143, "quality": 0.9512195121951219, "length": 39}}, "n3337": {"so_43441714_43441944_0": {"section_id": 6887, "quality": 0.9512195121951219, "length": 39}}, "n4659": {"so_43441714_43441944_0": {"section_id": 8644, "quality": 0.9512195121951219, "length": 39}}}, "43441944": {"ParentId": "43441714", "CommentCount": "1", "Body": "<p>3.5/10:</p>\n<blockquote>\n<p id=\"so_43441714_43441944_0\">After all adjustments of types (during which typedefs (7.1.3) are replaced by their definitions), the types specified by all declarations referring to a given variable or function shall be identical, except that declarations for an array object can specify array types that differ by the presence or absence of a major array bound (8.3.4).  A violation of this rule on type identity does not require a diagnostic.</p>\n</blockquote>\n<p>That last sentence means the compiler and linker are not required to give you an error message.  It's your job to get it straight.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "43441944", "Score": "4", "CreationDate": "2017-04-16T20:44:52.957", "LastActivityDate": "2017-04-16T20:44:52.957"}});