post_cb({"bq_ids": {"n4140": {"so_25499183_25499402_0": {"length": 26, "quality": 0.6341463414634146, "section_id": 6000}}}, "25499183": {"ViewCount": "81", "Body": "<p>I write the follow codes:</p>\n<pre><code>typedef int* pt;\npt p = pt();    // compile ok\n</code></pre>\n<p>but</p>\n<pre><code>int* p = (int*)()   // compile fail.\n</code></pre>\n<p>I want to figure out why? what is the different between them?</p>\n", "AcceptedAnswerId": "25499402", "Title": "why a typedef (typedef int* pt) can make pt() happen?", "CreationDate": "2014-08-26T06:11:17.690", "LastActivityDate": "2014-08-26T12:04:24.777", "CommentCount": "3", "LastEditDate": "2014-08-26T12:04:24.777", "PostTypeId": "1", "LastEditorUserId": "2585537", "Id": "25499183", "AnswerCount": "1", "Score": "1", "OwnerUserId": "2585537", "Tags": "<c++>", "FavoriteCount": "0"}, "25499402": {"PostTypeId": "2", "Body": "<p>First of all, extra parentheses are not allowed in the functional cast notation. For example</p>\n<pre><code>int i1 =  int ();  // compiles\nint i2 = (int)();  // doesn't compile\n</code></pre>\n<p>But your example will not compile even if you omit the parentheses</p>\n<pre><code>int* p = int*();   // doesn't compile\n</code></pre>\n<p>This is because the functional cast notation requires the type name to either be a <em>simple-type-specifier</em> or a <em>typename-specifier</em>.</p>\n<p><em>\u00a75.2.3 [expr.type.conv]</em></p>\n<blockquote>\n<p id=\"so_25499183_25499402_0\"><em>1</em> \u00a0 A <em>simple-type-specifier</em> (7.1.6.2) or <em>typename-specifier</em> (14.6) followed by a parenthesized expression-list constructs a value of the specified type given the expression list. <code>...</code><br/>\n<em>2</em> \u00a0 The expression <code>T()</code>, where <code>T</code> is a <em>simple-type-specifier</em> or <em>typename-specifier</em> for a non-array complete object type or the (possibly cv-qualified) <code>void</code> type, creates a prvalue of the specified type, whose value is that produced by value-initializing (8.5) an object of type <code>T</code>; no initialization is done for the <code>void()</code> case.</p>\n</blockquote>\n<p><em>simple-type-specifier</em> basically means a type name consisting of a single word. The following line does not compile for the same reason</p>\n<pre><code>unsigned int i = unsigned int(); // doesn't compile\n</code></pre>\n", "LastActivityDate": "2014-08-26T06:36:07.683", "LastEditorUserId": "241631", "Id": "25499402", "Score": "5", "CreationDate": "2014-08-26T06:29:21.157", "ParentId": "25499183", "CommentCount": "1", "LastEditDate": "2014-08-26T06:36:07.683", "OwnerUserId": "241631"}});