post_cb({"2207499": {"ParentId": "2207320", "CommentCount": "11", "Body": "<p>The standard actually requires all compliant compilers to allow that syntax in 9.4 [class.static]/2:</p>\n<blockquote>\n<p id=\"so_2207320_2207499_0\">A static member s of class X may be\n  referred to using the qualified-id\n  expression X::s; it is not necessary\n  to use the class member access syntax\n  (5.2.5) to refer to a static member. A\n  static member maybe referred to using\n  the class member access syntax, in\n  which case the object-expression is\n  evaluated.</p>\n</blockquote>\n<p>Now, there are some things you can do to avoid the pitfall, in no particular order</p>\n<ul>\n<li>Convert them into free-functions disallowing the syntax</li>\n<li>Improve the naming convention: <code>createFromXml</code> to make more explicit that it is a factory method</li>\n<li>Convert the static method into a concrete method that will perform the operation in the object, and provide an external method factory that will reuse the code.</li>\n</ul>\n<p>From a design point of view, the first option has the advantage of un-coupling the serialized formats from the class itself. <code>Something</code> (by a better name), represents an object with properties and operations and all those OO things. But in many cases <code>Something</code> is unrelated to the fact that it can be serialized for sending or storage in different formats.</p>\n<p>Users of your <code>Something</code> class that only want to work with XML don't need to even know that your object can be serialized to Json. Neither users of Json or XML should be affected if you later add a database persistence option to the class.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "2207499", "Score": "3", "CreationDate": "2010-02-05T13:33:52.173", "LastActivityDate": "2010-02-05T13:33:52.173"}, "2208053": {"ParentId": "2207320", "CommentCount": "2", "Body": "<p>How about making your static members private?</p>\n<p>If you need to have member functions that are static this may be a way to solve this.  </p>\n<p>Why do you have static member function?  Do they need access to something else in the class?  If not, then you could make them free functions that are not in the header with <code>Something</code>, but in another header in a separate namespace.</p>\n", "OwnerUserId": "4834", "PostTypeId": "2", "Id": "2208053", "Score": "-1", "CreationDate": "2010-02-05T14:59:53.840", "LastActivityDate": "2010-02-05T14:59:53.840"}, "2207335": {"ParentId": "2207320", "CommentCount": "5", "Body": "<p>Revise your design instead. Split your static methods into a separate SomethingFactory class. This is just confusing. </p>\n", "OwnerUserId": "20402", "PostTypeId": "2", "Id": "2207335", "Score": "0", "CreationDate": "2010-02-05T13:04:42.690", "LastActivityDate": "2010-02-05T13:04:42.690"}, "2207320": {"CommentCount": "2", "ViewCount": "2373", "PostTypeId": "1", "CreationDate": "2010-02-05T13:03:03.553", "LastActivityDate": "2010-02-05T14:59:53.840", "Title": "Can I forbid calling static methods on object instance?", "LastEditorDisplayName": "Roger Pate", "LastEditDate": "2010-02-05T13:14:16.043", "Id": "2207320", "Score": "14", "Body": "<p>I have class with lots of conversion functions:</p>\n<pre><code>class Something {\n  public:\n\n    string toXml();\n    string toJson();\n    ...\n\n    static Something fromXml(string);  // factory\n    static Something fromJson(string); // factory\n    ...\n};\n</code></pre>\n<p>Because static functions can be called on instance,\nit is easy to write code like this:</p>\n<pre><code>Something sss;\n\n... initializing sss ...\n\nstring xml1 = sss.toXml();\nsss.fromXml(xml1); // does nothing\nstring xml2 = sss.toXml();\nassert(xml1 == xml2); // always true\n</code></pre>\n<p>So I want to forbid calling fromXXX on objects, or\nat least make them do something different.</p>\n<p>Is there a way to do this?</p>\n", "Tags": "<c++><design><factory>", "OwnerUserId": "267020", "AnswerCount": "4"}, "2207339": {"ParentId": "2207320", "CommentCount": "12", "Body": "<p>Do they really need to be class members? The obvious way to prevent this is to make them free functions.</p>\n", "Id": "2207339", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "5", "CreationDate": "2010-02-05T13:05:40.573", "LastActivityDate": "2010-02-05T13:05:40.573"}, "bq_ids": {"n4140": {"so_2207320_2207499_0": {"section_id": 5900, "quality": 0.9, "length": 27}}, "n3337": {"so_2207320_2207499_0": {"section_id": 5672, "quality": 0.9, "length": 27}}, "n4659": {"so_2207320_2207499_0": {"section_id": 7382, "quality": 0.9, "length": 27}}}});