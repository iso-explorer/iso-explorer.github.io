post_cb({"29866845": {"ParentId": "29866763", "CommentCount": "1", "CreationDate": "2015-04-25T15:03:31.520", "OwnerUserId": "3002139", "PostTypeId": "2", "Id": "29866845", "Score": "3", "Body": "<p>Yes, all of the above is perfectly safe.</p>\n<p>Moving into or from the argument vector does change it, but this is kind of what a non-const reference argument is meant to do anyway. The result of moving the temporary vector into to output parameter is equivalent to the copy method.</p>\n<p>The pointer to the argument vector is no problem either. <code>some_vector</code> will still be the same object as before, you will just have changed its content. </p>\n<p>Pointers, iterators and references to the original data of <code>some_vector</code> get invalidated of course, regardless of copy or move.</p>\n", "LastActivityDate": "2015-04-25T15:03:31.520"}, "29866842": {"ParentId": "29866763", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2015-04-25T15:03:16.170", "Score": "2", "LastEditorUserId": "951423", "LastEditDate": "2015-04-25T15:19:40.040", "Id": "29866842", "OwnerUserId": "951423", "Body": "<p>The standard (in 17.6.5.15) says:</p>\n<blockquote>\n<p id=\"so_29866763_29866842_0\">Objects of types defined in the C++ standard library may be moved from (12.8). Move operations may be explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be placed in a valid but unspecified state.</p>\n</blockquote>\n<p>Thus, <code>some_vector</code> is required to have an (unspecified but) valid state after being moved from. You're allowed to move from it into you temporary and then move again from the temporary into <code>some_vector</code>.</p>\n<pre><code>std::vector&lt;double&gt; a_temporary_vector = std::move(some_vector);\n// do stuff only on a_temporary_vector but not some_vector\nsome_vector = std::move(a_temporary_vector);\n</code></pre>\n<p>Pointers and references to <code>some_vector</code> itself are still valid but pointers or references to content of <code>some_vector</code> are not (as you would normally expect when passing an object to a function taking a non-constant reference).</p>\n<p><em>Note: You could use <code>swap</code> in this case instead if you're not sure about whether to move from it or not.</em></p>\n<pre><code>void foo( std::vector&lt;double&gt; &amp;some_vector )\n{\n  // swap contents of some_vector into temporary\n  std::vector&lt;double&gt; a_temporary_vector;\n  a_temporary_vector.swap(some_vector);\n\n  // operate on temporary\n\n  // swap content back into some_vector\n  a_temporary_vector.swap(some_vector);\n  some_vector = a_temporary_vector;\n}\n</code></pre>\n", "LastActivityDate": "2015-04-25T15:19:40.040"}, "bq_ids": {"n4140": {"so_29866763_29866842_0": {"section_id": 6365, "quality": 0.92, "length": 23}}, "n3337": {"so_29866763_29866842_0": {"section_id": 6122, "quality": 0.92, "length": 23}}, "n4659": {"so_29866763_29866842_0": {"section_id": 7876, "quality": 0.92, "length": 23}}}, "29866763": {"CommentCount": "0", "ViewCount": "78", "PostTypeId": "1", "ClosedDate": "2015-04-25T15:25:47.257", "LastEditorUserId": "4253583", "CreationDate": "2015-04-25T14:56:50.540", "LastActivityDate": "2015-04-25T15:19:40.040", "Title": "C++ 11 - Is moving non local variable safe?", "AcceptedAnswerId": "29866842", "LastEditDate": "2015-04-25T15:02:02.570", "Id": "29866763", "Score": "0", "Body": "<p>Say I have a function which goes like:</p>\n<pre><code>void a_fct( std::vector&lt;double&gt; &amp;some_vector )\n{\n  std::vector&lt;double&gt; a_temporary_vector = some_vector;\n\n  ... some stuff involving only a_temporary_vector ...\n\n  some_vector = a_temporary_vector;\n}\n</code></pre>\n<p>which is of course a bit silly, but it is just intended as bringing the following general questions:</p>\n<ul>\n<li><p>It seems to me that one should rather move <code>a_temporary_vector</code> into <code>some_vector</code> here, as it then goes out of scope. But is it safe to move <code>some_vector</code> into <code>a_temporary_vector</code> rather than copying ?</p></li>\n<li><p>Imagine now that somewhere else in the code, I have a pointer to the vector given as argument here. Is this pointer still pointing to it if I move <code>some_vector</code> into <code>a_temporary_vector</code> ?</p></li>\n</ul>\n<p>In both cases, can I expect it to be true for any STL implementation ?</p>\n", "Tags": "<c++><c++11><stl><move>", "OwnerUserId": "4253583", "AnswerCount": "2"}});