post_cb({"41273307": {"ViewCount": "61", "Body": "<p>Older compilers allowed this kind of \"blasphemy\"</p>\n<pre><code>int a[5];\n4[a] = 3;\n</code></pre>\n<p>Simply because operator[] would allow const expression and those are equal: </p>\n<pre><code>*(4 + a) === *(a + 4)\n</code></pre>\n<p>Is that a defined behavior or an UB in C++11?</p>\n<p>Edit: answer:</p>\n<blockquote>\n<p id=\"so_41273307_41273307_0\">Except where it has been declared for a class (13.5.5), the subscript operator [] is interpreted in such a way that E1[E2] is\n  identical to *((E1)+(E2)). Because of the conversion rules that apply\n  to +, if E1 is an array and E2 an integer, then E1[E2] refers to the\n  E2-th member of E1. Therefore, despite its asymmetric appearance,\n  subscripting is a commutative operation.</p>\n</blockquote>\n", "Title": "C++11: Swapping array name and index", "CreationDate": "2016-12-21T22:56:04.290", "Id": "41273307", "CommentCount": "2", "LastEditDate": "2016-12-21T23:07:58.087", "PostTypeId": "1", "LastEditorUserId": "2742717", "LastActivityDate": "2016-12-21T23:07:58.087", "Tags": "<c++><arrays><c++11>", "Score": "0", "OwnerUserId": "2742717", "ClosedDate": "2016-12-21T23:12:16.450", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_41273307_41273307_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 3233}}, "n3337": {"so_41273307_41273307_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 3106}}, "n4659": {"so_41273307_41273307_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 3990}}}});