post_cb({"12335796": {"ParentId": "12335762", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Function templates can only be specialised completely, not partially.</p>\n<p>You're using the fact that member functions of class templates are themselves function templates, so this rule still applies.</p>\n<hr>\n<p>As for your edit: The following things can be explicitly (i.e. completely) specialized, from 14.7.3/1:</p>\n<blockquote>\n<p id=\"so_12335762_12335796_0\">An explicit specialization of any of the following:</p>\n<p id=\"so_12335762_12335796_1\">\u2014 function template</p>\n<p id=\"so_12335762_12335796_2\">\u2014 class template</p>\n<p id=\"so_12335762_12335796_3\">\u2014 <strong>member function of a class template</strong></p>\n<p id=\"so_12335762_12335796_4\">\u2014 static data member of a class template</p>\n<p id=\"so_12335762_12335796_5\">\u2014 member class of a class template</p>\n<p id=\"so_12335762_12335796_6\">\u2014 member enumeration of a class template</p>\n<p id=\"so_12335762_12335796_7\">\u2014 member class template of a class or class template</p>\n<p id=\"so_12335762_12335796_8\">\u2014 <strong>member function template of a class or class template</strong></p>\n<p id=\"so_12335762_12335796_9\">can be declared by a declaration introduced by <code>template&lt;&gt;;</code></p>\n</blockquote>\n<p>I've emphasized the two statements that apply to your case. Absent any other explicit provisions, those entities can <em>not</em> be specialized partially.</p>\n</hr>", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2012-09-09T09:43:03.127", "Id": "12335796", "Score": "6", "CreationDate": "2012-09-09T01:19:32.527", "LastActivityDate": "2012-09-09T09:43:03.127"}, "12335762": {"CommentCount": "1", "ViewCount": "4086", "PostTypeId": "1", "ClosedDate": "2012-09-09T12:49:36.820", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-09T09:43:03.127", "Body": "<blockquote>\n<p id=\"so_12335762_12335762_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/165101/invalid-use-of-incomplete-type-error-with-partial-template-specialization\">\u201cinvalid use of incomplete type\u201d error with partial template specialization</a> </br></p>\n</blockquote>\n<p>Why is it that I can do this:</p>\n<pre><code>template &lt;typename T&gt;\nstruct A\n{\n    void foo(int);\n};\n\ntemplate &lt;&gt;\nvoid A&lt;int&gt;::foo(int)\n{\n}\n</code></pre>\n<p>but not this:</p>\n<pre><code>template &lt;typename&gt; struct C {};\n\ntemplate &lt;typename T&gt;\nstruct A\n{\n    void foo(int);\n};\n\ntemplate &lt;typename T&gt;\nvoid A&lt;C&lt;T&gt; &gt;::foo(int)\n{\n}\n</code></pre>\n<p>For the second case, GCC gives the following error:</p>\n<pre><code>test.cpp:10:23: error: invalid use of incomplete type 'struct A&lt;C&lt;T&gt; &gt;'\ntest.cpp:4:8: error: declaration of 'struct A&lt;C&lt;T&gt; &gt;'\n</code></pre>\n<p><strong>EDIT</strong>:</p>\n<p>When explaining why the second example is not allowed, please also consider that making the member function also a template has no effect on which example works and which does not. That is, this still works:</p>\n<pre><code>template &lt;typename T&gt;\nstruct A\n{\n    template &lt;typename U&gt;\n    void foo(U);\n};\n\ntemplate &lt;&gt;\ntemplate &lt;typename U&gt;\nvoid A&lt;int&gt;::foo(U)\n{\n}\n</code></pre>\n<p>but this does not:</p>\n<pre><code>template &lt;typename&gt; struct C {};\n\ntemplate &lt;typename T&gt;\nstruct A\n{\n    template &lt;typename U&gt;\n    void foo(U);\n};\n\ntemplate &lt;typename T&gt;\ntemplate &lt;typename U&gt;\nvoid A&lt;C&lt;T&gt; &gt;::foo(U)\n{\n}\n</code></pre>\n<p>So the reason cannot be that function templates can only be fully specialized, because the third example is not a full specialization (the template parameter <code>U</code> is still there), and yet it works.</p>\n", "LastEditDate": "2017-05-23T11:51:09.327", "AcceptedAnswerId": "12335796", "Title": "Partial specialization of member function", "Id": "12335762", "Score": "4", "CreationDate": "2012-09-09T01:10:09.980", "Tags": "<c++><templates><template-specialization><partial-specialization>", "OwnerUserId": "141719", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12335762_12335796_3": {"section_id": 48, "quality": 1.0, "length": 4}, "so_12335762_12335796_7": {"section_id": 48, "quality": 1.0, "length": 6}, "so_12335762_12335796_9": {"section_id": 263, "quality": 1.0, "length": 5}, "so_12335762_12335796_4": {"section_id": 48, "quality": 1.0, "length": 5}, "so_12335762_12335796_6": {"section_id": 48, "quality": 1.0, "length": 4}, "so_12335762_12335796_5": {"section_id": 48, "quality": 1.0, "length": 4}, "so_12335762_12335796_8": {"section_id": 48, "quality": 1.0, "length": 6}}, "n3337": {"so_12335762_12335796_3": {"section_id": 43, "quality": 1.0, "length": 4}, "so_12335762_12335796_7": {"section_id": 43, "quality": 1.0, "length": 6}, "so_12335762_12335796_9": {"section_id": 254, "quality": 1.0, "length": 5}, "so_12335762_12335796_4": {"section_id": 43, "quality": 1.0, "length": 5}, "so_12335762_12335796_6": {"section_id": 43, "quality": 1.0, "length": 4}, "so_12335762_12335796_5": {"section_id": 43, "quality": 1.0, "length": 4}, "so_12335762_12335796_8": {"section_id": 43, "quality": 1.0, "length": 6}}, "n4659": {"so_12335762_12335796_3": {"section_id": 49, "quality": 1.0, "length": 4}, "so_12335762_12335796_7": {"section_id": 49, "quality": 1.0, "length": 6}, "so_12335762_12335796_9": {"section_id": 270, "quality": 1.0, "length": 5}, "so_12335762_12335796_4": {"section_id": 49, "quality": 1.0, "length": 5}, "so_12335762_12335796_6": {"section_id": 49, "quality": 1.0, "length": 4}, "so_12335762_12335796_5": {"section_id": 49, "quality": 1.0, "length": 4}, "so_12335762_12335796_8": {"section_id": 49, "quality": 1.0, "length": 6}}}});