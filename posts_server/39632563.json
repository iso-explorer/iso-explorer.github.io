post_cb({"bq_ids": {"n4140": {"so_39632563_39632632_1": {"length": 27, "quality": 1.0, "section_id": 6107}}, "n3337": {"so_39632563_39632632_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 4515}, "so_39632563_39632632_1": {"length": 27, "quality": 1.0, "section_id": 5873}}, "n4659": {"so_39632563_39632632_1": {"length": 27, "quality": 1.0, "section_id": 7604}}}, "39632563": {"ViewCount": "125", "Body": "<p>In following example, <code>b</code> is a polymorphic pointer type whose <strong>static</strong> type is <code>Base*</code> and whose <strong>dynamic</strong> type is <code>Derived*</code>.</p>\n<pre><code>struct Base \n{\n  virtual void f();\n};\n\nstruct Derived : Base \n{ \n\n};\n\nint main()\n{\n   Base *b = new Derived();\n   // ...\n   delete b;\n}\n</code></pre>\n<p>What happens when <code>b</code> is deleted without a virtual destructor?</p>\n", "AcceptedAnswerId": "39632632", "Title": "What happens when delete a polymorphic object without a virtual destructor?", "CreationDate": "2016-09-22T07:14:54.363", "Id": "39632563", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-09-22T07:28:21.367", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-22T07:28:25.173", "Score": "1", "OwnerUserId": "5612562", "Tags": "<c++><virtual><delete-operator><virtual-destructor>", "AnswerCount": "2"}, "39632632": {"Id": "39632632", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_39632563_39632632_0\">What happens when b is deleted without a virtual destructor?</p>\n</blockquote>\n<p>We don't know. The behavior is undefined. For most actual cases the destructor of <code>Derived</code> might no be invoked, but nothing is guaranteed.</p>\n<p><a href=\"http://eel.is/c++draft/expr.delete#3\" rel=\"nofollow\">5.3.5 Delete\n[expr.delete]</a></p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39632563_39632632_1\">In the first alternative (delete object), if the static type of the\n  object to be deleted is different from its dynamic type, the static\n  type shall be a base class of the dynamic type of the object to be\n  deleted and <strong>the static type shall have a virtual destructor or the\n  behavior is undefined</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-22T07:26:28.717", "Score": "2", "CreationDate": "2016-09-22T07:18:27.217", "ParentId": "39632563", "CommentCount": "1", "LastEditDate": "2016-09-22T07:26:28.717", "OwnerUserId": "3309790"}, "39632826": {"Id": "39632826", "PostTypeId": "2", "Body": "<p>By fact it depends from target compiler and in common case</p>\n<pre><code>delete b;\n</code></pre>\n<p>is call of the descructor function for type of b and then free allocated memory.\nSo if the destructor is virtual then called function from virtual table (~Derived) but if is not then called function from the class (~Base).\nExpected result: ~Base only will be called.</p>\n", "LastActivityDate": "2016-09-22T07:28:25.173", "Score": "0", "CreationDate": "2016-09-22T07:28:25.173", "ParentId": "39632563", "CommentCount": "0", "OwnerUserId": "6124277"}});