post_cb({"bq_ids": {"n4140": {"so_3313479_3313638_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 4091}}, "n3337": {"so_3313479_3313638_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 3938}}, "n4659": {"so_3313479_3313638_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 4999}}}, "12907195": {"Id": "12907195", "PostTypeId": "2", "Body": "<p>The existing answers are great and certainly for the standards committee were vital for this purpose. But there is another issue that I think is important enough to mention.</p>\n<p>With free functions, you have the ability to modify an interface <em>without</em> changing the definition of a class. You can make any type \"gettable\" simply by specializing the global <code>get</code>. With a member function, you would have to directly modify the class.</p>\n<p>This is one of the reasons why range-based <code>for</code> is built on <code>std::begin/std::end</code> instead of looking for member functions. <code>std::begin/end</code> are specialized for array types, so you can use range-based <code>for</code> with arrays. You can use it with any container, even those that don't have <code>begin/end</code> functions. You can specialize it for, for example, LibXML2 element types, such that you can range-based <code>for</code> over <code>xmlElement*</code>'s.</p>\n<p>You can't do that if they had to be member functions.</p>\n<p>In C++, free functions are a natural interface for many operations that could be done on many different kinds of classes.</p>\n", "LastActivityDate": "2012-10-16T03:37:53.410", "Score": "23", "CreationDate": "2012-10-16T03:37:53.410", "ParentId": "3313479", "CommentCount": "2", "OwnerUserId": "734069"}, "3313479": {"ViewCount": "12750", "Body": "<p><code>boost::tuple</code> has a <code>get()</code> member function used like this:</p>\n<pre><code>tuple&lt;int, string, string&gt; t(5, \"foo\", \"bar\");\ncout &lt;&lt; t.get&lt;1&gt;();  // outputs \"foo\"\n</code></pre>\n<p>It seems the C++0x <code>std::tuple</code> does not have this member function, and you have to instead use the non-member function form:</p>\n<pre><code>std::get&lt;1&gt;(t);\n</code></pre>\n<p>which to me looks uglier.</p>\n<p>Is there any particular reason why <code>std::tuple</code> doesn't have the member function? Or is it just my implementation (GCC 4.4)?</p>\n", "AcceptedAnswerId": "3313638", "Title": "std::tuple get() member function", "CreationDate": "2010-07-22T21:06:09.060", "Id": "3313479", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-02-03T14:45:10.970", "LastEditorUserId": "452775", "LastActivityDate": "2016-02-03T14:45:10.970", "Score": "44", "OwnerUserId": "141719", "Tags": "<c++><boost><c++11><tuples>", "AnswerCount": "3"}, "3313627": {"Id": "3313627", "PostTypeId": "2", "Body": "<p>N3090/3092, \u00a720.4.2.6/8: \"Note: The reason get is a nonmember function is that if this functionality had been provided as a member function, code where the type depended on a template parameter would have required using the template keyword. \u2014end note\"</p>\n", "LastActivityDate": "2010-07-22T21:25:35.943", "Score": "12", "CreationDate": "2010-07-22T21:25:35.943", "ParentId": "3313479", "CommentCount": "0", "OwnerUserId": "179910"}, "3313638": {"Id": "3313638", "PostTypeId": "2", "Body": "<p>From C++0x draft:</p>\n<blockquote>\n<p id=\"so_3313479_3313638_0\">[ Note: The reason get is a nonmember function is that if this functionality had been provided as a member function, code where the type depended on a template parameter would have required using the template keyword. \u2014 end note ]</p>\n</blockquote>\n<p>This can be illustrated with this code:</p>\n<pre><code>template &lt;typename T&gt;\nstruct test\n{\n  T value;\n  template &lt;int ignored&gt;\n  T&amp;  member_get ()\n  {  return value;  }\n};\n\ntemplate &lt;int ignored, typename T&gt;\nT&amp;  free_get (test &lt;T&gt;&amp; x)\n{  return x.value;  }\n\ntemplate &lt;typename T&gt;\nvoid\nbar ()\n{\n  test &lt;T&gt;  x;\n  x.template member_get &lt;0&gt; ();  // template is required here\n  free_get &lt;0&gt; (x);\n};\n</code></pre>\n", "LastActivityDate": "2010-07-22T21:26:44.643", "Score": "59", "CreationDate": "2010-07-22T21:26:44.643", "ParentId": "3313479", "CommentCount": "2", "OwnerUserId": "319799"}});