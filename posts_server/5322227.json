post_cb({"bq_ids": {"n4140": {"so_5322227_5322329_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4605}, "so_5322227_5322329_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6155}}, "n3337": {"so_5322227_5322329_1": {"length": 17, "quality": 1.0, "section_id": 5917}, "so_5322227_5322329_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 4423}}, "n4659": {"so_5322227_5322329_1": {"length": 11, "quality": 0.6470588235294118, "section_id": 7652}, "so_5322227_5322329_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 5962}}}, "5322227": {"ViewCount": "437", "Body": "<p>I've bumped into a problem yesterday, which I eventually distilled into the following minimal example.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main()\n{\n    int i=0, j=0;\n    std::cout\n        &lt;&lt; (&amp;i == &amp;j)\n        &lt;&lt; std::less&lt;int *&gt;()(&amp;i, &amp;j)\n        &lt;&lt; std::less&lt;int *&gt;()(&amp;j, &amp;i)\n        &lt;&lt; std::endl;\n}\n</code></pre>\n<p>This particular program, when compiled using MSVC 9.0 with optimizations enabled, outputs <code>000</code>. This implies that</p>\n<ol>\n<li>the pointers are not equal, and</li>\n<li>neither of the pointers is ordered before the other according to <code>std::less</code>, implying that the two pointers are equal according to the total order imposed by <code>std::less</code>.</li>\n</ol>\n<p>Is this behavior correct? Is the total order of <code>std::less</code> not required to be consistend with equality operator?</p>\n<p>Is the following program allowed to output <code>1</code>?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\n\nint main()\n{\n    int i=0, j=0;\n    std::set&lt;int *&gt; s;\n    s.insert(&amp;i);\n    s.insert(&amp;j);\n    std::cout &lt;&lt; s.size() &lt;&lt; std::endl;\n}\n</code></pre>\n", "Title": "Does std::less have to be consistent with the equality operator for pointer types?", "CreationDate": "2011-03-16T07:31:45.713", "LastActivityDate": "2011-03-16T09:15:37.027", "CommentCount": "1", "LastEditDate": "2011-03-16T09:15:37.027", "PostTypeId": "1", "LastEditorUserId": "21234", "Id": "5322227", "Score": "13", "OwnerUserId": "89847", "Tags": "<c++><pointers>", "AnswerCount": "2"}, "5322329": {"Id": "5322329", "PostTypeId": "2", "Body": "<p>Seems as we have a standard breach! Panic!</p>\n<p>Following 20.3.3/8 (C++03) :</p>\n<blockquote>\n<p id=\"so_5322227_5322329_0\">For templates greater, less,\n  greater_equal, and less_equal, the\n  specializations for any pointer type\n  yield a total order, even if the\n  built-in operators &lt;, &gt;, &lt;=, &gt;= do\n  not.</p>\n</blockquote>\n<p>It seems a situation where eager optimizations lead to improper code...</p>\n<p><strong>Edit:</strong> C++0x also holds this one under 20.8.5/8</p>\n<p><strong>Edit 2:</strong> Curiously, as an answer to the second question:</p>\n<p>Following 5.10/1 C++03:</p>\n<blockquote>\n<p id=\"so_5322227_5322329_1\">Two pointers of the same type compare\n  equal if and only if they are both\n  null, both point to the same function,\n  or both represent the same address</p>\n</blockquote>\n<p>Something is wrong here... on many levels.</p>\n", "LastEditorUserId": "233522", "LastActivityDate": "2011-03-16T08:02:59.040", "Score": "11", "CreationDate": "2011-03-16T07:44:52.413", "ParentId": "5322227", "CommentCount": "14", "OwnerUserId": "233522", "LastEditDate": "2011-03-16T08:02:59.040"}, "5322314": {"Id": "5322314", "PostTypeId": "2", "Body": "<p>No, the result is obviously not correct. </p>\n<p>However, MSVC is known not to follow the \"unique address\" rules to the letter. For example, it merges template functions that happens to generate identical code. Then those different functions will also have the same address.</p>\n<p>I guess that you example would work better if you actually did something to i and j, other that taking their address.</p>\n", "LastActivityDate": "2011-03-16T07:42:47.953", "CommentCount": "4", "CreationDate": "2011-03-16T07:42:47.953", "ParentId": "5322227", "Score": "0", "OwnerUserId": "597607"}});