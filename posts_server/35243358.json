post_cb({"35243358": {"CommentCount": "1", "CreationDate": "2016-02-06T16:26:10.760", "PostTypeId": "1", "AcceptedAnswerId": "35245058", "LastEditorUserId": "1430927", "LastActivityDate": "2016-02-06T19:05:25.920", "LastEditDate": "2016-02-06T17:11:07.527", "ViewCount": "112", "FavoriteCount": "2", "Title": "move-only input and output iterators", "Id": "35243358", "Score": "1", "Body": "<p>Concerning <a href=\"http://en.cppreference.com/w/cpp/concept/InputIterator\" rel=\"nofollow\">InputIterator</a>/<a href=\"http://en.cppreference.com/w/cpp/concept/OutputIterator\" rel=\"nofollow\">OutputIterator</a>-s is it consistent to modify their semantics to be move-only? Surely I mean only newly-created custom iterators, not <em>STL</em> ones.</p>\n<p>Notes to semantic requirements to <code>++i</code> and <code>++r</code> expressions for input and output iterators correspondingly says:</p>\n<blockquote>\n<p id=\"so_35243358_35243358_0\">Postcondition: Any copies of the previous value of <code>i</code> are no longer required to be either dereferenceable or to be in the domain of <code>==</code>.</p>\n<p id=\"so_35243358_35243358_1\">After this operation <code>r</code> is not required to be incrementable and any copies of the previous value of <code>r</code> are no longer required to be dereferenceable or incrementable.</p>\n</blockquote>\n<p>I think it is safer to prohibit possibility to have a copies of input/output iterators in most cases, but never heard such advice. Is it bad idea?</p>\n", "Tags": "<c++><c++11><iterator><move>", "OwnerUserId": "1430927", "AnswerCount": "2"}, "35243398": {"ParentId": "35243358", "LastEditDate": "2016-02-06T16:31:12.393", "CommentCount": "16", "CreationDate": "2016-02-06T16:29:53.367", "OwnerUserId": "5501675", "LastEditorUserId": "5501675", "PostTypeId": "2", "Id": "35243398", "Score": "0", "Body": "<p>That is probably not a good idea.  Iterator objects are usually designed to be lightweight and are passed around by value in order to be efficient.  And many of the C++ standard library containers use iterators passed by value. Disabling the copy constructors does not seem like a good idea at all to me.</p>\n<p>For example see <a href=\"http://www.cplusplus.com/reference/vector/vector/vector/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/vector/</a> the vector constructor accepts the input iterator by value.</p>\n<p>And see <a href=\"http://www.cplusplus.com/reference/algorithm/copy/\" rel=\"nofollow\">http://www.cplusplus.com/reference/algorithm/copy/</a> for an example of a C++ standard library container that accepts an output iterator by value</p>\n", "LastActivityDate": "2016-02-06T16:31:12.393"}, "bq_ids": {"n4140": {"so_35243358_35243358_1": {"section_id": 5569, "quality": 0.6363636363636364, "length": 7}, "so_35243358_35245058_0": {"section_id": 5567, "quality": 1.0, "length": 4}, "so_35243358_35243358_0": {"section_id": 5569, "quality": 0.7, "length": 7}}, "n3337": {"so_35243358_35243358_1": {"section_id": 5351, "quality": 0.6363636363636364, "length": 7}, "so_35243358_35245058_0": {"section_id": 5349, "quality": 1.0, "length": 4}, "so_35243358_35243358_0": {"section_id": 5351, "quality": 0.7, "length": 7}}, "n4659": {"so_35243358_35243358_1": {"section_id": 7016, "quality": 0.6363636363636364, "length": 7}, "so_35243358_35245058_0": {"section_id": 7014, "quality": 1.0, "length": 4}, "so_35243358_35243358_0": {"section_id": 7016, "quality": 0.7, "length": 7}}}, "35245058": {"ParentId": "35243358", "LastEditDate": "2016-02-06T19:05:25.920", "CommentCount": "3", "CreationDate": "2016-02-06T18:52:49.293", "OwnerUserId": "734069", "LastEditorUserId": "734069", "PostTypeId": "2", "Id": "35245058", "Score": "2", "Body": "<p>Input/OutputIterators must first satisfy the Iterator requirement. And that requirement say, from C++14, [iterator.iterators], p2:</p>\n<blockquote>\n<p id=\"so_35243358_35245058_0\">A type <code>X</code> satisfies the <code>Iterator</code> requirements if:</p>\n<ul>\n<li><code>X</code> satisfies the <code>CopyConstructible</code>, <code>CopyAssignable</code>, and <code>Destructible</code> requirements (17.6.3.1)</li>\n</ul>\n</blockquote>\n<p>So no, they cannot be move-only.</p>\n", "LastActivityDate": "2016-02-06T19:05:25.920"}});