post_cb({"5085392": {"CommentCount": "0", "AcceptedAnswerId": "5085425", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2011-02-22T23:42:20.557", "LastActivityDate": "2016-06-20T09:34:20.893", "LastEditDate": "2016-06-20T09:34:20.893", "ViewCount": "5460", "FavoriteCount": "7", "Title": "What is the value of an undefined constant used in #if?", "Id": "5085392", "Score": "46", "Body": "<p>My preprocessor appears to assume that undefined constants are 0 for the purpose of evaluating <code>#if</code> conditions.</p>\n<p>Can this be relied upon, or do undefined constants give undefined behaviour?</p>\n", "Tags": "<c++><c-preprocessor>", "OwnerUserId": "500690", "AnswerCount": "2"}, "5085425": {"ParentId": "5085392", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, it can be relied upon. The C99 standard specifies at \u00a76.10.1 \u00b63:</p>\n<blockquote>\n<p id=\"so_5085392_5085425_0\">After all replacements due to macro expansion and the defined unary\n  operator have been performed, all remaining identifiers are replaced with the pp-number\n   <code>0</code></p>\n</blockquote>\n<p><em><strong>Edit</strong></em></p>\n<p>Sorry, I thought it was a C question; still, no big deal, the equivalent section in the C++ standard (\u00a716.1 \u00b64) states:</p>\n<blockquote>\n<p id=\"so_5085392_5085425_1\">After all replacements due to macro expansion and the defined unary operator\n  have been performed, all remaining identifiers and keywords, except for <code>true</code> and <code>false</code>, are replaced with the pp-number <code>0</code></p>\n</blockquote>\n<p>The only difference is the different handling of <code>true</code> and <code>false</code>, which in C do not need special handling, while in C++ they have a special meaning even in the preprocessing phase.</p>\n", "OwnerUserId": "214671", "LastEditorUserId": "214671", "LastEditDate": "2011-02-22T23:50:29.143", "Id": "5085425", "Score": "55", "CreationDate": "2011-02-22T23:45:25.133", "LastActivityDate": "2011-02-22T23:50:29.143"}, "bq_ids": {"n4140": {"so_5085392_5085425_0": {"section_id": 500, "quality": 1.0, "length": 17}, "so_5085392_5085425_1": {"section_id": 500, "quality": 1.0, "length": 21}}, "n3337": {"so_5085392_5085425_0": {"section_id": 491, "quality": 1.0, "length": 17}, "so_5085392_5085425_1": {"section_id": 491, "quality": 1.0, "length": 21}}, "n4659": {"so_5085392_5085425_0": {"section_id": 520, "quality": 0.8235294117647058, "length": 14}, "so_5085392_5085425_1": {"section_id": 520, "quality": 0.8571428571428571, "length": 18}}}, "5085407": {"ParentId": "5085392", "CommentCount": "0", "Body": "<p>An identifier that is not defined as a macro is converted to <code>0</code> before the expression is evaluated.</p>\n<p>The exception is the identifier <code>true</code>, which is converted to <code>1</code>.  This is specific to the C++ preprocessor; in C, this doesn't happen and you would need to include <code>&lt;stdbool.h&gt;</code> to use <code>true</code> this way, in which case it will be defined as a macro and no special handling is required.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "5085407", "Score": "11", "CreationDate": "2011-02-22T23:44:01.703", "LastActivityDate": "2011-02-22T23:44:01.703"}});