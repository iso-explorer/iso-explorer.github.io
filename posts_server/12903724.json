post_cb({"bq_ids": {"n4140": {"so_12903724_12903763_0": {"length": 4, "quality": 0.8, "section_id": 3258}, "so_12903724_12903763_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 3259}}, "n3337": {"so_12903724_12903763_0": {"length": 4, "quality": 0.8, "section_id": 3130}, "so_12903724_12903763_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 3131}}, "n4659": {"so_12903724_12903763_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 4017}}}, "12903724": {"ViewCount": "882", "Body": "<p>Why was C++ designed like this?...</p>\n<p>(This question is different, but intimately related to</p>\n<p><a href=\"https://stackoverflow.com/questions/12828216/not-possible-this-pointer-as-a-default-argument-why\">Not possible: this pointer as a default argument. Why?</a> )</p>\n", "AcceptedAnswerId": "12903763", "Title": "Default arguments have to be bound at compiled time - why?", "CreationDate": "2012-10-15T20:46:53.880", "LastActivityDate": "2014-06-27T13:54:22.303", "CommentCount": "1", "LastEditDate": "2017-05-23T11:44:09.723", "PostTypeId": "1", "Tags": "<c++><compilation><default-value>", "Id": "12903724", "AnswerCount": "2", "Score": "4", "OwnerUserId": "1053942", "ClosedDate": "2012-10-16T08:32:57.250", "LastEditorUserId": "-1"}, "12903763": {"Id": "12903763", "PostTypeId": "2", "Body": "<p>Actually, that's not completely accurate. The restrictions are:</p>\n<h3>8.3.6 Default arguments [dcl.fct.default]</h3>\n<blockquote>\n<p id=\"so_12903724_12903763_0\">7) Local variables shall not be used in a default argument. [ Example:</p>\n</blockquote>\n<pre><code>void f() {\nint i;\nextern void g(int x = i); //error\n// ...\n}\n</code></pre>\n<blockquote>\n<p id=\"so_12903724_12903763_1\">\u2014end example ]</p>\n<p id=\"so_12903724_12903763_2\">8) The keyword <code>this</code> shall not be used in a default argument of a member function. [ Example:</p>\n</blockquote>\n<pre><code>class A {\nvoid f(A* p = this) { } // error\n};\n</code></pre>\n<p>So, <code>this</code> and local variables can't be used as defaults.</p>\n<p>For example, the following is valid:</p>\n<pre><code>int a = 1;\nint f(int);\nint g(int x = f(a)); // default argument: f(::a)\nvoid h() {\n  a = 2;\n  {\n    int a = 3;\n    g(); // g(f(::a))\n  }\n}\n</code></pre>\n<p><code>g</code> will be called with the value <code>f(2)</code>, which isn't a compile-time constant. This is an example straight from the standard.</p>\n<p>The reasons it's like this is the usual: there either wasn't a proposal for it, or it was rejected, deemed not necessary or too difficult to implement.</p>\n", "LastActivityDate": "2012-10-15T20:50:00.460", "CommentCount": "4", "CreationDate": "2012-10-15T20:50:00.460", "ParentId": "12903724", "Score": "11", "OwnerUserId": "673730"}, "12903859": {"Id": "12903859", "PostTypeId": "2", "Body": "<p>Default arguments are values to a parameter due to be used in the function's body. This variable's(i.e. parameter) value may be overridden depending upon how the function is called. But while its not - the default argument is the <strong>value</strong> to this variable - and a value must be defined. It this value has to be dynamic - not to be bound during compile time - then perhaps a separate function should be better used to compute that value and does not seem fit in the <code>default</code> arena. Also for such a scenario C++ already has the right mechanism - <code>Polymorphism</code> by function overloading.</p>\n<p>Consider this:\nYou need to call a function <code>Fn</code> either with a param <code>v</code> or else it should default to <code>Fn(x)</code> here both <code>v</code> and <code>x</code> are variables.</p>\n<p>Instead of going through having to have default parameters this could be easily implemented using function overloading.</p>\n<pre><code>BOOL x;\n\nVOID Fn(BOOL v)\n{\n     ...\n}\n\nVOID Fn()\n{\n    Fn(::x);\n}\n\nVOID Main()\n{\n    ::x = ...; // Variable x's value is altered\n\n    Fn(FALSE);\n    Fn();      // Param value defaults to value of x\n}\n</code></pre>\n<p>This enforces the programmer to write a better code which is likely to be worth its while in the longer run.</p>\n", "LastEditorUserId": "759866", "LastActivityDate": "2014-06-27T13:54:22.303", "Score": "0", "CreationDate": "2012-10-15T20:57:03.397", "ParentId": "12903724", "CommentCount": "10", "OwnerUserId": "483588", "LastEditDate": "2014-06-27T13:54:22.303"}});