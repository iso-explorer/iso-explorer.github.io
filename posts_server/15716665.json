post_cb({"bq_ids": {"n4140": {"so_15716665_15716841_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 742}, "so_15716665_15716841_1": {"length": 5, "quality": 0.625, "section_id": 723}}, "n3337": {"so_15716665_15716841_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 731}, "so_15716665_15716841_1": {"length": 5, "quality": 0.625, "section_id": 712}}, "n4659": {"so_15716665_15716841_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 800}}}, "15718627": {"Id": "15718627", "PostTypeId": "2", "Body": "<p>The algorithm <code>std::remove_if</code> (<strong>not</strong> the member function <code>unordered_set::remove_if</code>, which is mentioned in the title but does not exist) doesn't actually remove anything; it reorders the sequence by overwriting elements that match the passed-in criterion with later elements in the sequence. So it requires a sequence of mutable objects. The objects in the sequence managed by an <code>unordered_set</code> are not mutable, since modifying them could disrupt the order that the container imposes.</p>\n<p>To remove an element with a given key, use <code>unordered_set::erase</code>.</p>\n<p>To remove an element or elements that match a more general criterion, you have to roll your own: iterate through the container looking for a match (<code>std::find_if</code> will do this), and remove elements as they're found using <code>unordered_set::erase</code>. Be careful: after you've erased an element the iterator that points to it is no longer valid, so your code has to save an iterator that points to the next element in the sequence. There are lots of examples of how to do this floating around.</p>\n", "LastActivityDate": "2013-03-30T12:41:12.380", "CommentCount": "0", "CreationDate": "2013-03-30T12:41:12.380", "ParentId": "15716665", "Score": "0", "OwnerUserId": "1593860"}, "15716841": {"Id": "15716841", "PostTypeId": "2", "Body": "<p>According to the standard \u00a7 23.2.4.6</p>\n<blockquote>\n<p id=\"so_15716665_15716841_0\">For associative containers where the value type is the same as the\n  key type, both iterator and const_iterator are constant iterators.</p>\n</blockquote>\n<p>So, you can't even do </p>\n<pre><code>std::unordered_set&lt;int&gt; s{1, 2, 3, 4};\n*s.begin() = 42;\n</code></pre>\n<p>And, of course, you can't use <code>std::remove_if(ForwardIt first, ForwardIt last, ...)</code> function for removing elements from <code>std::set</code> and <code>std::unordered_set</code>:</p>\n<blockquote>\n<p id=\"so_15716665_15716841_1\">The type of dereferenced ForwardIt must meet the requirements of MoveAssignable.</p>\n</blockquote>\n", "LastEditorUserId": "1532460", "LastActivityDate": "2013-03-30T09:19:57.850", "Score": "5", "CreationDate": "2013-03-30T09:10:37.000", "ParentId": "15716665", "CommentCount": "2", "OwnerUserId": "1532460", "LastEditDate": "2013-03-30T09:19:57.850"}, "15716665": {"ViewCount": "3207", "Body": "<p>I have code like: </p>\n<pre><code>unordered_set&lt;AttrValue&gt; output;\n...\n\nauto requiredType = variables.at(arg.value);\nauto end = remove_if(output.begin(), output.end(), \n    [&amp;](AttrValue x) {\n        return !matchingOutputType(requiredType, ast-&gt;getNodeType(ast-&gt;getNodeKeyAttribute(x)));\n    }); // queryevaluator_getcandidatelist.cpp(179)\noutput.erase(end);\n</code></pre>\n<p>Error is on line 4 of the code. So I think its because of <code>remove_if</code>. But whats wrong? output is not defined constant? </p>\n<hr>\n<pre><code>Error   90  error C3892: '_Next' : you cannot assign to a variable that is const    c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\algorithm    1840\nError   109 error C3892: '_Next' : you cannot assign to a variable that is const    c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\algorithm    1840\n</code></pre>\n<p>Output window: </p>\n<pre><code>3&gt;c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\algorithm(1840): error C3892: '_Next' : you cannot assign to a variable that is const\n3&gt;          c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\algorithm(1853) : see reference to function template instantiation '_FwdIt std::_Remove_if&lt;std::_List_unchecked_const_iterator&lt;_Mylist&gt;,_Pr&gt;(_FwdIt,_FwdIt,_Pr)' being compiled\n3&gt;          with\n3&gt;          [\n3&gt;              _FwdIt=std::_List_unchecked_const_iterator&lt;std::_List_val&lt;int,std::allocator&lt;AttrValue&gt;&gt;&gt;,\n3&gt;              _Mylist=std::_List_val&lt;int,std::allocator&lt;AttrValue&gt;&gt;,\n3&gt;              _Pr=`anonymous-namespace'::&lt;lambda4&gt;\n3&gt;          ]\n3&gt;          h:\\dropbox\\sch\\cs3202\\code\\source\\query\\query evaluator\\queryevaluator_getcandidatelist.cpp(179) : see reference to function template instantiation '_FwdIt std::remove_if&lt;std::_List_const_iterator&lt;_Mylist&gt;,`anonymous-namespace'::&lt;lambda4&gt;&gt;(_FwdIt,_FwdIt,_Pr)' being compiled\n3&gt;          with\n3&gt;          [\n3&gt;              _FwdIt=std::_List_const_iterator&lt;std::_List_val&lt;int,std::allocator&lt;AttrValue&gt;&gt;&gt;,\n3&gt;              _Mylist=std::_List_val&lt;int,std::allocator&lt;AttrValue&gt;&gt;,\n3&gt;              _Pr=`anonymous-namespace'::&lt;lambda4&gt;\n3&gt;          ]\n</code></pre>\n</hr>", "AcceptedAnswerId": "15716841", "Title": "unordered_set::remove_if(): C3892: cannot assign to a variable that is const", "CreationDate": "2013-03-30T08:44:19.477", "Id": "15716665", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-03-30T12:41:12.380", "Score": "4", "OwnerUserId": "292291", "Tags": "<c++>", "AnswerCount": "2"}});