post_cb({"bq_ids": {"n4140": {"so_45356673_45357246_0": {"length": 12, "quality": 0.75, "section_id": 6071}}, "n3337": {"so_45356673_45357246_0": {"length": 12, "quality": 0.75, "section_id": 5839}}, "n4659": {"so_45356673_45357246_0": {"length": 12, "quality": 0.75, "section_id": 7567}}}, "45357246": {"Id": "45357246", "PostTypeId": "2", "Body": "<p>According to the C++ Standard, </p>\n<blockquote>\n<p id=\"so_45356673_45357246_0\">(<em>\u00a7 5.3.1, Unary operators, 8</em>) The negative of an unsigned quantity is computed by subtracting its\n  value from 2^n , where n is the number of bits in the promoted\n  operand.</p>\n</blockquote>\n<p>So, if you declare <code>var</code> as <code>unsigned var = 400;</code>, the value <code>-var</code> is actually <strong>4294966896</strong> (considering a 32bit representation) and the condition <code>-var &lt; a</code> in your example become (4294966896 &lt; 20).</p>\n<p>If you are trying to check if an <code>int</code> variable (signed) <code>a</code> is in the range -400 &lt; a &lt; 400 you could do this:</p>\n<pre><code>int a = 20;\nunsigned var = 400;\nif( static_cast&lt;unsigned&gt;(std::abs(a)) &lt; var )\n{\n  //true if 20 is greater than (-400) and less than 400\n}\n</code></pre>\n", "LastEditorUserId": "4944425", "LastActivityDate": "2017-07-27T18:14:20.303", "Score": "4", "CreationDate": "2017-07-27T17:20:53.583", "ParentId": "45356673", "CommentCount": "3", "OwnerUserId": "4944425", "LastEditDate": "2017-07-27T18:14:20.303"}, "45356673": {"ViewCount": "72", "Body": "<p>I want to compare a variable with another variable in both of the positive and negative magnitudes.</p>\n<pre><code>unsigned a =20;\nunsigned var = 400;\nif( -var &lt; a &amp;&amp; a &lt; var )\n{\n  //true if 20 is greater than (-400) and less than 400\n}\n</code></pre>\n<p>Can I compare these two variables like this?</p>\n<p>Thanks in advance</p>\n", "AcceptedAnswerId": "45357246", "Title": "Negative signed value of a variable in C++", "CreationDate": "2017-07-27T16:49:21.040", "Id": "45356673", "CommentCount": "3", "LastEditDate": "2017-07-27T16:52:58.823", "PostTypeId": "1", "LastEditorUserId": "7821843", "LastActivityDate": "2017-07-27T18:14:20.303", "Score": "-3", "OwnerUserId": "7821843", "Tags": "<c++>", "AnswerCount": "2"}, "45357280": {"Id": "45357280", "PostTypeId": "2", "Body": "<p>Awkwardly asked, but you're right to be careful as you're mixing in unsigned in there.</p>\n<p>In your case, both a and var are unsigned, so your test should be simply be if a is less than var as you <strong>know</strong> that neither a not var can be less than zero.</p>\n<p>In a more general case, use std::abs() to get the absolute value (ie the value with the sign always positive) and compare that.. so if a and var were signed..</p>\n<pre><code>if (std::abs(a) &lt; std::abs(var))\n</code></pre>\n<p>In extreme case you may have to worry as the the largest negative number cannot be represented as a positive number but if you're anywhere near those sorts of limits you should cast to double (or long or long log etc) and then abs those value.</p>\n<p>And generally steer clear of unsigned where you can (valid size_t etc uses notwithstanding)</p>\n", "LastActivityDate": "2017-07-27T17:22:53.460", "CommentCount": "0", "CreationDate": "2017-07-27T17:22:53.460", "ParentId": "45356673", "Score": "0", "OwnerUserId": "406068"}});