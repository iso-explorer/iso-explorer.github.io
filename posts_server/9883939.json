post_cb({"9883939": {"ViewCount": "272", "Body": "<p>I ran into a problem with some C code like this:</p>\n<pre><code>struct SomeType { ...details immaterial... };\n\nstatic struct SomeType array[] =\n{\n    { ... },\n    ...\n    { ... },\n};\nenum { ARRAY_SIZE = sizeof(array) / sizeof(array[0]) };\n</code></pre>\n<p>The Unix compilers (various versions of GCC, and the compilers on AIX and HP-UX) were all quite happy with the <code>enum</code>.  MSVC 2005 objected with error <code>C2056: Illegal Expression</code>.  According to <a href=\"http://msdn.microsoft.com/en-us/library/89tt256x%28v=vs.80%29.aspx\" rel=\"nofollow noreferrer\">MSDN</a>, this is because 'An expression was invalid because of a previous error'.  This was the only error reported, which makes it slightly surprising.</p>\n<p>However, my questions are:</p>\n<ol>\n<li>Is MSVC 2005 accurately interpreting the C89 standard in disallowing the <code>enum</code>?</li>\n<li>Are the Unix compilers being too generous in permitting this without warning?</li>\n<li>Does C99 (or C2011) make any difference?</li>\n<li>Do more recent versions of MSVC still object to the <code>enum</code>?</li>\n</ol>\n<p>FWIW: the acceptable solution was to change the <code>enum</code> into:</p>\n<pre><code>static int const ARRAY_SIZE = sizeof(array) / sizeof(array[0]);\n</code></pre>\n<hr>\n<h3>Deprecated options are troublesome</h3>\n<p><a href=\"https://stackoverflow.com/users/12711/michael-burr\">Michael Burr</a> gave some extra information which is very valuable, and has allowed me to unlock the problem.</p>\n<p>Compilable example (isomorphic with the actual problems):</p>\n<pre><code>static const char *names[] = { \"abc\", \"def\", \"ghi\" };\nenum { NAMES_SIZE = sizeof(names) / sizeof(names[0]) };\n\nstatic const struct stuff { const char *name; int flags; } array[] =\n{\n    { \"abc\", 1 },\n    { \"def\", 2 },\n    { \"ghi\", 3 },\n};\nenum { ARRAY_SIZE = sizeof(array) / sizeof(array[0]) };\n</code></pre>\n<p>The precise version of the MSVC (as given by <code>cl</code>) is:</p>\n<pre><code>Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.762 for 80x86\n</code></pre>\n<p>That's the version Michael says works.</p>\n<p>And, I've found the cause of my problem.  (The command lines below remove all the project-specific guff \u2014 the multitude of /D and /I options that aren't needed for the sample code.)  Compiling with:</p>\n<pre><code>cl     /W3 /c /LD /MD /Od aaa.c\n</code></pre>\n<p>And the code above compiles OK.</p>\n<pre><code>cl /Zg /W3 /c /LD /MD /Od aaa.c\n</code></pre>\n<p>This generates first the warning:</p>\n<pre><code>cl : Command line warning D9035 : option 'Zg' has been deprecated and will be removed in a future release\n</code></pre>\n<p>I've been bitching about compilations being done with deprecated options for a year or more, but no-one from the team in charge of this sub-project has been willing to stand up and fix it, and I'm not supposed to \u2014 something that's about to change.</p>\n<p>and then it says:</p>\n<pre><code>aaa.c(2) : error C2056: illegal expression\naaa.c(10) : error C2056: illegal expression\n</code></pre>\n<p>So, not only is the <a href=\"http://msdn.microsoft.com/en-us/library/y4s1adf3.aspx\" rel=\"nofollow noreferrer\"><code>/Zg</code></a> option deprecated but it is also the cause of the trouble in the first place.  Now I've got some better ammunition to go after people with!</p>\n<p>Thanks for the extra information, Michael.</p>\n<p>PS: The MSDN page about <code>/Zg</code> says:</p>\n<blockquote>\n<p id=\"so_9883939_9883939_0\">If you use the <code>/Zg</code> option and your program contains formal parameters that have <code>struct</code>, <code>enum</code>, or <code>union</code> type (or pointers to such types), the declaration of each <code>struct</code>, <code>enum</code>, or <code>union</code> type must have a tag (name).</p>\n</blockquote>\n<p>That isn't wholly accurate.  There are no formal parameters in the example fragment, and the <code>enum</code> values were never passed to a function.  But without the tag on the <code>enum</code>, the error still appears with the <code>/Zg</code> flag.</p>\n<hr>\n<p>(No; I'm not particularly attached to MSVC 2005. The group I work in simply hasn't upgraded to anything more recent yet. Mostly it doesn't affect me. There are occasions, like this, when it hurts a lot.  One day, I'll work out why the other builds on Windows seem to be accepting the <code>enum</code>; I fear that I'll find this particular sub-product is out of line with everything else and using an older compiler than the other products use.)</p>\n<p>This is strictly C code.  The MSVC tag is a synonym for the Visual-C++ tag.</p>\n</hr></hr>", "AcceptedAnswerId": "9884173", "Title": "Are the Unix compilers too lax or is MSVC 2005 missing a trick?", "CreationDate": "2012-03-27T05:43:47.817", "Id": "9883939", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:48:50.500", "LastEditorUserId": "-1", "LastActivityDate": "2012-03-27T18:08:53.773", "Score": "3", "OwnerUserId": "15168", "Tags": "<c><visual-c++><gcc><xlc>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9883939_9884173_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5464}, "so_9883939_9884173_3": {"length": 6, "quality": 0.6, "section_id": 5464}}, "n3337": {"so_9883939_9884173_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 86}, "so_9883939_9884173_3": {"length": 8, "quality": 0.8, "section_id": 5946}}, "n4659": {"so_9883939_9884173_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6898}, "so_9883939_9884173_3": {"length": 6, "quality": 0.6, "section_id": 6898}}}, "9884173": {"Id": "9884173", "PostTypeId": "2", "Body": "<p>It is certainly legal in C89 (as long as the resulting array size is representable as an <code>int</code>).</p>\n<p>The constraint in \u00a73.5.2.2 on the defining value of an enumeration constant is:</p>\n<blockquote>\n<p id=\"so_9883939_9884173_0\">The expression that defines the value of an enumeration constant shall\n  be an integral constant expression that has a value representable as\n  an int.</p>\n</blockquote>\n<p>\u00a73.4 describes integral constant expressions:</p>\n<blockquote>\n<p id=\"so_9883939_9884173_1\">Constraints</p>\n<p id=\"so_9883939_9884173_2\">Constant expressions shall not contain assignment, increment,\n  decrement, function-call, or comma operators, except when they are\n  contained within the operand of a sizeof operator.</p>\n<p id=\"so_9883939_9884173_3\">Each constant expression shall evaluate to a constant that is in\n  the range of representable values for its type.</p>\n<p id=\"so_9883939_9884173_4\">Semantics</p>\n<p id=\"so_9883939_9884173_5\">An expression that evaluates to a constant is required in several\n  contexts. If the expression is evaluated in the translation\n  environment, the arithmetic precision and range shall be at least as\n  great as if the expression were being evaluated in the execution\n  environment.</p>\n<p id=\"so_9883939_9884173_6\">An integral constant expression shall have integral type and shall\n  only have operands that are integer constants, enumeration constants,\n  character constants, sizeof expressions, and floating constants that\n  are the immediate operands of casts.  Cast operators in an integral\n  constant expression shall only convert arithmetic types to integral\n  types, except as part of an operand to the sizeof operator.</p>\n</blockquote>\n", "LastEditorUserId": "134633", "LastActivityDate": "2012-03-27T09:30:15.313", "Score": "2", "CreationDate": "2012-03-27T06:08:24.423", "ParentId": "9883939", "CommentCount": "1", "OwnerUserId": "134633", "LastEditDate": "2012-03-27T09:30:15.313"}});