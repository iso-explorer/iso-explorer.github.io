post_cb({"bq_ids": {"n4140": {"so_37354243_37354609_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 603}, "so_37354243_37354609_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 639}}, "n3337": {"so_37354243_37354609_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 629}, "so_37354243_37354609_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 593}}, "n4659": {"so_37354243_37354609_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 667}, "so_37354243_37354609_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 629}}}, "37354243": {"ViewCount": "57", "Body": "<pre><code>class Myclass{\nprivate:\n    int i;\npublic:\n    Myclass(){}\n    Myclass(const Myclass &amp;lvalue){} //&lt;---\n    template&lt;typename T&gt;Myclass(T&amp; lvalue):i(lvalue){}\n};\n\nint main()\n{\n    Myclass a;\n    Myclass b(a);\n    return 0;\n}\n</code></pre>\n<p>The code above fails to compile with:</p>\n<pre><code>error: cannot convert \u2018Myclass\u2019 to \u2018int\u2019 in initialization\n</code></pre>\n<p>Is this a bug? I have tested it using g++ 5.3 and clang3.9</p>\n", "AcceptedAnswerId": "37354505", "Title": "SFINAE is not applied to auto generated special member function?", "CreationDate": "2016-05-20T19:13:02.550", "Id": "37354243", "CommentCount": "5", "LastEditDate": "2016-05-20T20:05:15.220", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2016-05-20T20:05:15.220", "Score": "2", "OwnerUserId": "440403", "Tags": "<c++>", "AnswerCount": "2"}, "37354505": {"Id": "37354505", "PostTypeId": "2", "Body": "<p>Nope, not a bug. And this has nothing to do with SFINAE. </p>\n<p>Let's do overload resolution on:</p>\n<pre><code>Myclass b(a);\n</code></pre>\n<p>We have two viable overloads:</p>\n<pre><code> Myclass(Myclass const&amp;); // your copy ctor\n Myclass(Myclass&amp; );      // your ctor template, with [T=Myclass]\n</code></pre>\n<p>Both are exact matches. One of the tiebreakers in picking the best viable candidate is to select the least cv-qualified reference - which in this case is the template. This ends up trying to initialize your <code>int</code> with a <code>Myclass</code>, hence the error. (Note, there is a tiebreaker to prefer non-templates to templates - but it's a lower ranked tiebreaker than the cv-qualification on the reference). </p>\n<p>In this case, the solution would be to introduce SFINAE to disable this constructor in the case that it should use the copy ctor. That is:</p>\n<pre><code>template &lt;class T, class = std::enable_if_t&lt;!std::is_convertible&lt;T*, Myclass const*&gt;::value&gt;&gt;\nMyclass(T&amp; );\n</code></pre>\n<p>And now this constructor won't be viable for <code>Myclass b(a)</code>.</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2016-05-20T19:37:00.280", "Score": "4", "CreationDate": "2016-05-20T19:29:40.683", "ParentId": "37354243", "CommentCount": "5", "OwnerUserId": "2069064", "LastEditDate": "2016-05-20T19:37:00.280"}, "37354609": {"Id": "37354609", "PostTypeId": "2", "Body": "<p>The other answers are good, but I thought I'd add standard references to complement. The <a href=\"http://eel.is/c++draft/over.match\" rel=\"nofollow\">latest draft</a>, section <strong>Ranking implicit conversion sequences</strong>, states:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_37354243_37354609_0\">Standard conversion sequence <code>S1</code> is a better conversion sequence than standard conversion sequence <code>S2</code> if</p>\n<ul>\n<li><p id=\"so_37354243_37354609_1\"><code>S1</code> and <code>S2</code> are reference bindings ([dcl.init.ref]), and the types to which the references refer are the same type except for top-level\n  cv-qualifiers, and the type to which the reference initialized by <code>S2</code>\n  refers is more cv-qualified than the type to which the reference\n  initialized by <code>S1</code> refers. [ <em>Example:</em></p>\n<pre><code>int f(const int &amp;);\nint f(int &amp;);\nint g(const int &amp;);\nint g(int);\n\nint i;\nint j = f(i);                   // calls f(int &amp;)\n</code></pre></li>\n</ul></li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2016-05-20T19:37:43.857", "CommentCount": "0", "CreationDate": "2016-05-20T19:37:43.857", "ParentId": "37354243", "Score": "3", "OwnerUserId": "6362627"}});