post_cb({"bq_ids": {"n4140": {"so_33684826_33684826_0": {"length": 16, "quality": 1.0, "section_id": 5436}}, "n3337": {"so_33684826_33684826_0": {"length": 16, "quality": 1.0, "section_id": 5231}}, "n4659": {"so_33684826_33684826_0": {"length": 16, "quality": 1.0, "section_id": 6863}}}, "33684863": {"Id": "33684863", "PostTypeId": "2", "Body": "<p>If you define</p>\n<pre><code>const some_type x = some_value;\n</code></pre>\n<p>that means you can't modify the value of <code>x</code>.  In the absence of <code>volatile</code>, the compiler can replace a reference to <code>x</code> by <code>some_value</code>.</p>\n<p>If you define</p>\n<pre><code>const volatile some_type x = some_value;\n</code></pre>\n<p>then you still can't modify <code>x</code> (at least not by using the name <code>x</code>), but the compiler can no longer assume that its value cannot change.  Any reference to the value of <code>x</code> must actually load its value from memory; it can't assume that it will always retain its initial value.</p>\n<p>For example, there might be some compiler-specific attribute that associates <code>x</code> with some device.  The name <code>x</code> provides a read-only view of the object; the <code>volatile</code> inhibits certain optimizations.</p>\n", "LastActivityDate": "2015-11-13T02:13:20.073", "CommentCount": "0", "CreationDate": "2015-11-13T02:13:20.073", "ParentId": "33684826", "Score": "3", "OwnerUserId": "827263"}, "33684846": {"Id": "33684846", "PostTypeId": "2", "Body": "<p>This doesn\u2019t make much sense:</p>\n<pre><code>int const volatile x = 42;\n</code></pre>\n<p>You\u2019re right, <code>x</code> cannot be changed \u2014 drop <code>volatile</code>. However, the following is different:</p>\n<pre><code>int x = 42;\nint const volatile&amp; y = x;\n</code></pre>\n<p>Now <code>y</code> cannot be changed, but <code>x</code> can, and its change propagates through to <code>y</code>. This works regardless of <code>volatile</code>, of course \u2014 but if the change to <code>y</code> comes from a source that is unobservable to the C++ compiler, <code>volatile</code> may become necessary. Of course in cases where <code>volatile</code> makes sense, the pointer/reference wouldn\u2019t just refer to any other variable but rather to a specific memory address that is mapped to the hardware or elsewhere.</p>\n", "LastActivityDate": "2015-11-13T02:11:04.453", "CommentCount": "0", "CreationDate": "2015-11-13T02:11:04.453", "ParentId": "33684826", "Score": "1", "OwnerUserId": "1968"}, "33684826": {"ViewCount": "129", "Body": "<p>Say I have some object declared as <code>const volatile</code>:</p>\n<p>According to the C++ standard ($7.1.5.1/8):</p>\n<blockquote>\n<p id=\"so_33684826_33684826_0\">[..] volatile is a hint to the implementation to avoid aggressive\n  optimization involving the object <b>because the value of the object\n  might be changed</b> by means undetectable by an implementation.[...]</p>\n</blockquote>\n<p>However, the <code>const</code> qualifier implies than the object is <i><b>not</b></i> subject to change, so the two qualifiers appear to conflict:</p>\n<p>One implies the object should be treated differently because it is subject to change, and the other implies it should be treated differently because it is <i>not</i> subject to change. </p>\n<p>So, why are variables allowed be be <code>const volatile</code> in the first place? </p>\n", "AcceptedAnswerId": "33684863", "Title": "C++ Why does the \"const volatile\" type qualifier exist?", "CreationDate": "2015-11-13T02:07:36.433", "Id": "33684826", "CommentCount": "2", "PostTypeId": "1", "ClosedDate": "2015-11-13T02:42:24.623", "LastActivityDate": "2015-11-13T02:38:14.240", "Score": "1", "OwnerUserId": "4404330", "Tags": "<c++><const><volatile>", "AnswerCount": "2"}});