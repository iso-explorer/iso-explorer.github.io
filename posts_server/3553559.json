post_cb({"3553588": {"Id": "3553588", "PostTypeId": "2", "Body": "<p>There are no references in your code, so any of your points that mention \"references\" make no sense.</p>\n<p>In your example, both global object - <code>global_int</code> and <code>global_A</code> - are zero-initialized. Both local objects - <code>local_int</code> and <code>local_A</code> - contain indeterminate values, which means that <code>local_int</code> and <code>local_A.x</code> are not initialized.</p>\n<p>P.S. Of course, as other already noted, your code is non-compilable. You can't declare <code>A</code> objects before declaring <code>class A</code> (and you are missing a <code>;</code> after the class definition).</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2010-08-24T04:42:28.653", "Score": "6", "CreationDate": "2010-08-24T04:35:22.130", "ParentId": "3553559", "CommentCount": "0", "LastEditDate": "2010-08-24T04:42:28.653", "OwnerUserId": "187690"}, "3553559": {"ViewCount": "16656", "Body": "<p>Based on below, am i right?</p>\n<ul>\n<li>global_A reference is initialized to null.</li>\n<li>global_int is 0</li>\n<li>local_A reference is null</li>\n<li>local_int is uninitialized</li>\n<li>Both global_A.x and local_A.x is uninitialized.</li>\n</ul>\n<p>THanks for any help.</p>\n<hr>\n<pre><code>A global_A;\nint global_int;\n\nclass A {\n  public : int x;\n}\n\nint main()\n{\n  int local_int;\n  A local_A;\n}\n</code></pre>\n</hr>", "Title": "How are local and global variables initialized by default?", "CreationDate": "2010-08-24T04:24:11.730", "LastActivityDate": "2010-08-25T03:19:29.083", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2010-08-24T05:34:36.970", "LastEditorUserId": "225647", "Id": "3553559", "Score": "10", "OwnerUserId": "429025", "Tags": "<c++><initialization>", "AnswerCount": "10"}, "3553576": {"Id": "3553576", "PostTypeId": "2", "Body": "<p>global_A and local_A are not references; they are objects and created using their default constructors. Default constructor has not been specified so it will be generated, which will do nothing so the member variable will remain uninitialized.</p>\n", "LastActivityDate": "2010-08-24T04:30:55.497", "Score": "1", "CreationDate": "2010-08-24T04:30:55.497", "ParentId": "3553559", "CommentCount": "2", "OwnerUserId": "18573"}, "3553629": {"Id": "3553629", "PostTypeId": "2", "Body": "<pre><code>A global_A;\n</code></pre>\n<p>This is an instace, not a pointer, your program will call the constructor before entering main.</p>\n<p>To get a pointer to an instance and not an instance you have to write:</p>\n<pre><code>A* global_A;\n</code></pre>\n<p>global_int is initialized to 0, as all global variables are initialized to their defaults.</p>\n<p>The variable <code>A local_A</code> will be initialized every time your program enters the function in which it is declared by a call to its constructor.</p>\n<p>As before if you want a pointer to A you have to write A *local_A, but this time you have to initialize it to NULL yourself.</p>\n<pre><code>A *local_A = NULL;\n</code></pre>\n<p>The varialle <code>local_int</code> wont be initialized as it is a primitive type.</p>\n<p>If local_A.x is initialized depends on the constructor of A, the default constructor will not initialize local_A.x. If x where a class instance creating an instance of A will initialize x with the constructor of its class.</p>\n", "LastEditorUserId": "216111", "LastActivityDate": "2010-08-24T04:55:32.907", "Score": "1", "CreationDate": "2010-08-24T04:45:55.623", "ParentId": "3553559", "CommentCount": "2", "LastEditDate": "2010-08-24T04:55:32.907", "OwnerUserId": "216111"}, "bq_ids": {"n4140": {"so_3553559_3553682_1": {"length": 11, "quality": 1.0, "section_id": 3285}, "so_3553559_3553682_2": {"length": 7, "quality": 0.875, "section_id": 3285}, "so_3553559_3553682_3": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_3553559_3553682_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3285}, "so_3553559_3553682_4": {"length": 4, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_3553559_3553682_1": {"length": 11, "quality": 1.0, "section_id": 3155}, "so_3553559_3553682_2": {"length": 7, "quality": 0.875, "section_id": 3155}, "so_3553559_3553682_0": {"length": 7, "quality": 1.0, "section_id": 3155}, "so_3553559_3553682_4": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_3553559_3553682_3": {"length": 5, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_3553559_3553682_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 4047}, "so_3553559_3553682_2": {"length": 7, "quality": 0.875, "section_id": 4047}, "so_3553559_3553682_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 4047}, "so_3553559_3553682_4": {"length": 4, "quality": 1.0, "section_id": 4047}, "so_3553559_3553682_3": {"length": 5, "quality": 1.0, "section_id": 4047}}}, "3562646": {"Id": "3562646", "PostTypeId": "2", "Body": "<p>well guys .. i am more confused as i see responses from here. Anyway i did a test as shown below:</p>\n<p>1 #include </p>\n<pre><code>  2 using namespace std;\n  3 \n  4 class A {\n  5 \n  6 public :\n  7         A() : x(9) {};\n  8         int x;\n  9 \n 10 };\n 11 \n 12 A global_a;\n 13 int global_b;\n 14 \n 15 int main() {\n 16 \n 17         A local_a;\n 18         int local_b;\n 19         cout &lt;&lt; \"global_a.x = \" &lt;&lt; global_a.x &lt;&lt; '\\n';\n 20         cout &lt;&lt; \"local_a.x = \" &lt;&lt; local_a.x &lt;&lt; '\\n';\n 21 \n 22         cout &lt;&lt; \"global_b = \" &lt;&lt; global_b &lt;&lt; '\\n';\n 23         cout &lt;&lt; \"local_b = \" &lt;&lt; local_b &lt;&lt; '\\n';\n 24 \n 25 }\n</code></pre>\n<p>Results using my g++ compiler on ubuntu linux:</p>\n<p>global_a.x = 9</p>\n<p>local_a.x = 9</p>\n<p>global_b = 0</p>\n<p>local_b = 0</p>\n<p>I do think local_b should be undefined but somehow compiler initialized it by default. However local_a .. i am not sure if that should be initialized by default. From the testing here .. local_a seem to be initialized. Not sure if that complies with standard c++ specification (eg C++ PRimer 4th edition says default constructor is used regardless where a class variable is declared - does that means variable of class type is initialized whether it is global or local?).</p>\n<p>Whatever it is .. it is one big hell of confusion. Maybe i should quit learning C++. Java is so much more straight forward. Hell yeahhh!!</p>\n", "LastActivityDate": "2010-08-25T03:19:29.083", "Score": "-2", "CreationDate": "2010-08-25T03:19:29.083", "ParentId": "3553559", "CommentCount": "2", "OwnerUserId": "430232"}, "3553583": {"Id": "3553583", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_3553559_3553583_0\">global_A reference is initialized to\n  null.</p>\n</blockquote>\n<p>No, its a valid object (constructed based on default constructor, which you don't have in your code but compiler adds that)</p>\n<blockquote>\n<p id=\"so_3553559_3553583_1\">global_int is 0</p>\n</blockquote>\n<p>yes</p>\n<blockquote>\n<p id=\"so_3553559_3553583_2\">local_A reference is null</p>\n</blockquote>\n<p>no, same reason as for global</p>\n<blockquote>\n<p id=\"so_3553559_3553583_3\">local_int is uninitialized</p>\n</blockquote>\n<p>no, its initialized to 0</p>\n<blockquote>\n<p id=\"so_3553559_3553583_4\">Both global_A.x and local_A.x is\n  uninitialized.</p>\n</blockquote>\n<p>no both are initialized to 0</p>\n", "LastEditorUserId": "131930", "LastActivityDate": "2010-08-24T04:34:26.463", "Score": "-3", "CreationDate": "2010-08-24T04:32:45.160", "ParentId": "3553559", "CommentCount": "2", "LastEditDate": "2010-08-24T04:34:26.463", "OwnerUserId": "424060"}, "3553572": {"Id": "3553572", "PostTypeId": "2", "Body": "<p>They all require to be initialized. The compiler will give you a warning about this.</p>\n", "LastActivityDate": "2010-08-24T04:29:39.283", "Score": "-2", "CreationDate": "2010-08-24T04:29:39.283", "ParentId": "3553559", "CommentCount": "11", "OwnerUserId": "17382"}, "3553647": {"Id": "3553647", "PostTypeId": "2", "Body": "<p>Just for the sake of completeness if you had references:</p>\n<p>References must be initialized on declaration, otherwise you get punished by a compiler error. This means a reference always needs another value or reference it refers to (like the says), this is ensured by the compiler so you cannot forget it. This also implies that references can never be null pointers. However the object they refer to might become invalid.</p>\n", "LastActivityDate": "2010-08-24T04:50:44.633", "Score": "2", "CreationDate": "2010-08-24T04:50:44.633", "ParentId": "3553559", "CommentCount": "0", "OwnerUserId": "170443"}, "3553682": {"Id": "3553682", "PostTypeId": "2", "Body": "<p>Building up on Andrey's response.</p>\n<p>$3.6.2- \"Objects with static storage duration (3.7.1) shall be zero-initialized (8.5) before any other initialization takes place.\". In OP, \"global_A\" and \"global_int\" have static storage duration. \"local_int\" and \"local_A\" have no linkage as these are local objects.</p>\n<p>$8.5/5- To zero-initialize an object of type T means:</p>\n<blockquote>\n<p id=\"so_3553559_3553682_0\">\u2014 if T is a scalar type (3.9), the\n  object is set to the value of 0 (zero)\n  converted to T;</p>\n<p id=\"so_3553559_3553682_1\">\u2014 if T is a non-union class type, each\n  nonstatic data member and each\n  base-class subobject is\n  zeroinitialized;</p>\n<p id=\"so_3553559_3553682_2\">\u2014 if T is a union type, the object\u2019s\n  first named data member89) is\n  zero-initialized;</p>\n<p id=\"so_3553559_3553682_3\">\u2014 if T is an array type, each element\n  is zero-initialized;</p>\n<p id=\"so_3553559_3553682_4\">\u2014 if T is a reference type, no\n  initialization is performed.</p>\n</blockquote>\n<p>$6.7.4/4- \"The zero-initialization (8.5) of all local objects with static storage duration (3.7.1) is performed before any other initialization takes place. A local object of POD type (3.9) with static storage duration initialized with constant-expressions is initialized before its block is first entered. An implementation is permitted to perform\nearly initialization of other local objects with static storage duration under the same conditions that an implementation is permitted to statically initialize an object with  static storage duration in namespace scope(3.6.2). Otherwise such an object is initialized the first time control passes through its declaration; such an object is considered initialized upon the completion of its initialization. If the initialization exits by throwing an exception, the initialization is not complete, so it will be tried again the next time control enters the declaration. If control re-enters the declaration (recursively) while the object is being initialized, the behavior is undefined.\"</p>\n<p>EDIT 2:</p>\n<blockquote>\n<p id=\"so_3553559_3553682_5\">$8.5/9- \"If no initializer is\n  specified for an object, and the\n  object is of (possibly cv-qualified)\n  non-POD class type (or array thereof),\n  the object shall be\n  default-initialized; if the object is\n  of const-qualified type, the\n  underlying class type shall have a\n  user-declared default constructor.\n  <strong><em>Otherwise, if no initializer is specified for a nonstatic object, the\n  object and its subobjects, if any,\n  have an indeterminate initial\n  value90)</em></strong>; if the object or any of\n  its subobjects are of const-qualified\n  type, the program is ill-formed.\"</p>\n</blockquote>\n<p>In general, you want to read up these sections along with $8.5 for good hold on this aspect.</p>\n", "LastEditorUserId": "418110", "LastActivityDate": "2010-08-24T06:44:56.027", "Score": "13", "CreationDate": "2010-08-24T04:58:37.823", "ParentId": "3553559", "CommentCount": "0", "LastEditDate": "2010-08-24T06:44:56.027", "OwnerUserId": "418110"}, "3553631": {"Id": "3553631", "PostTypeId": "2", "Body": "<p>Basically, whenever you declare a variable, the compiler will call its default constructor unless you specify otherwise.</p>\n<p>The language level types (e.g. pointers, 'int', 'float', 'bool', etc) \"default constructor\" does absolutely nothing, it just leaves the memory as it is when it is declared (global/static variables are special cases, refer to <a href=\"https://stackoverflow.com/questions/3553559/how-are-local-and-global-variables-initialized-by-default/3553682#3553682\">chubsdad's answer</a> for more on the specifics). This means that they can be pretty much anything because you usually can't be sure what was in that memory previously or even where the memory came from (except in the case of the 'placement new' operator).</p>\n<p>The class you created has no constructors so the compiler will generate a default constructor for you which simply calls the constructor of each of its members/variables. If you incorporate the information provided in the previous paragraph, you can see that the variable 'x' will have its default constructor called, which does nothing, and thus is isn't initialized to any value.</p>\n<p>As others have said, there are no references in your code or pointers, so the term 'NULL' is invalid in all cases here. NULL usually refers to a pointer which, like other language level types, doesn't get set to anything until you assign it a value (unless of course its a global/static variable).</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-08-24T06:30:15.047", "Score": "6", "CreationDate": "2010-08-24T04:46:57.180", "ParentId": "3553559", "CommentCount": "5", "LastEditDate": "2017-05-23T11:46:11.673", "OwnerUserId": "68241"}, "3553586": {"Id": "3553586", "PostTypeId": "2", "Body": "<p>This code won't compile unless you forward declare A.</p>\n<p>global_A reference is initialized to null - No, it will reference an A object.\nglobal_int is 0 - Think so, need to check.\nlocal_A reference is null - No, same as with global_A.\nlocal_int is uninitialized - Yes, it will get some garbage value.\nBoth global_A.x and local_A.x is uninitialized - Yes.</p>\n<p>You can always debug and see for yourself.</p>\n", "LastEditorUserId": "366112", "LastActivityDate": "2010-08-24T04:40:33.500", "Score": "-2", "CreationDate": "2010-08-24T04:35:11.553", "ParentId": "3553559", "CommentCount": "2", "LastEditDate": "2010-08-24T04:40:33.500", "OwnerUserId": "366112"}});