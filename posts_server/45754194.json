post_cb({"bq_ids": {"n4140": {"so_45754194_45754633_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6305}, "so_45754194_45754633_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 6306}}, "n3337": {"so_45754194_45754633_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6062}, "so_45754194_45754633_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 6063}}, "n4659": {"so_45754194_45754633_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 7816}, "so_45754194_45754633_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 7817}}}, "45754633": {"Id": "45754633", "PostTypeId": "2", "Body": "<p>Okay. Thanks to @AshishJohn this question is now solvable. </p>\n<p>In the provided <a href=\"https://github.com/sudheesh001/LP/commit/3670ba3ca1728aeaf6d38c1cb6b8b926afc63153\" rel=\"nofollow noreferrer\">link</a> you can see a define in the beginning which changes the syntax of for loops:</p>\n<pre><code>#define for(i,a,b) for(i=a;i&lt;b; i++)\n</code></pre>\n<p>So <code>for(j,0,np)</code> will be converted by the preprocessor to:</p>\n<pre><code>for (j=0; j&lt;np; j++)\n</code></pre>\n<p>which is a normal for loop. <code>np</code> is also declared in the file and is nothing but a global integer variable.</p>\n<hr>\n<p>However, as @molbdnilo pointed out correctly the standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4296</a>) forbids the declaration of macros that override existing keywords:</p>\n<blockquote>\n<p id=\"so_45754194_45754633_0\"><strong>17.6.4.3.1 Macro names</strong></p>\n<ol>\n<li><p id=\"so_45754194_45754633_1\">A translation unit that includes a standard library header shall not #define or #undef names declared in any standard library header.</p></li>\n<li><p id=\"so_45754194_45754633_2\">A translation unit shall not #define or #undef names lexically identical to keywords, to the identifiers listed in Table 2, or to the attribute-tokens described in 7.6</p></li>\n</ol>\n</blockquote>\n<p>Therefore it may or may not behave like I described it.</p>\n</hr>", "LastEditorUserId": "4711812", "LastActivityDate": "2017-08-18T11:55:25.060", "Score": "1", "CreationDate": "2017-08-18T10:37:35.317", "ParentId": "45754194", "CommentCount": "3", "OwnerUserId": "4711812", "LastEditDate": "2017-08-18T11:55:25.060"}, "45754194": {"ViewCount": "73", "Body": "<pre><code>inline string search_prod(string p) //returns a concatenated string of variables which can produce string p\n    {\n        int j,k;\n        string r=\"\";\n        for(j,0,np)\n        {\n            k=1;\n            while(gram[j][k] != \"\")\n            {\n                if(gram[j][k] == p)\n                {\n                    r=concat(r,gram[j][0]);\n                }\n                k++;\n            }\n        }   \n        return r;\n    }\n</code></pre>\n<p>I have never seen this loop before.</p>\n", "AcceptedAnswerId": "45754633", "Title": "what does this loop means: for(j,0,np)", "CreationDate": "2017-08-18T10:15:32.647", "LastActivityDate": "2017-08-18T11:55:25.060", "CommentCount": "14", "LastEditDate": "2017-08-18T10:53:49.300", "PostTypeId": "1", "Tags": "<c++><loops><for-loop>", "Id": "45754194", "AnswerCount": "1", "Score": "-5", "OwnerUserId": "7608900", "ClosedDate": "2017-08-18T11:29:41.227", "LastEditorUserId": "735926"}});