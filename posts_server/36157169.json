post_cb({"36157169": {"ViewCount": "108", "Body": "<pre><code>#include &lt;stdio.h&gt;\nint foo() { return 0; }\nint a = foo();\nint main() {\n    return 0;\n}\n</code></pre>\n<p>The code above can not be complied because of</p>\n<blockquote>\n<p id=\"so_36157169_36157169_0\">From section 3.5.7 Initialization of the C standard:</p>\n<blockquote>\n<p id=\"so_36157169_36157169_2\">All the expressions in an initializer for an object that has static storage duration or in an initializer list for an object that has aggregate or union type shall be constant expressions.</p>\n</blockquote>\n</blockquote>\n<pre><code>#include &lt;iostream&gt;\nint foo() { return 0; }\nint a = foo();\nint main() {\n    return 0;\n}\n</code></pre>\n<p>However, I don't know why it can be complied in C++ without using <code>constexpr</code></p>\n<p>I want to mention that my main question is why it can be complied in C++ without using <code>constexpr</code></p>\n", "Title": "The difference of function assigning to variable in C and C++", "CreationDate": "2016-03-22T14:29:16.247", "LastActivityDate": "2016-03-22T15:28:12.277", "CommentCount": "12", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-03-22T14:33:58.437", "LastEditorUserId": "4206629", "Id": "36157169", "Score": "-2", "OwnerUserId": "4206629", "Tags": "<c++><c><global-variables>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_36157169_36158564_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 7153}}, "n3337": {"so_36157169_36157169_1": {"length": 9, "quality": 0.6, "section_id": 5947}, "so_36157169_36157169_2": {"length": 9, "quality": 0.6, "section_id": 5947}, "so_36157169_36158564_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 6897}}, "n4659": {"so_36157169_36158564_0": {"length": 23, "quality": 0.6571428571428571, "section_id": 8657}}}, "36157391": {"Id": "36157391", "PostTypeId": "2", "Body": "<p>C++ is a different programming language. It has different rules than C. For one, C++ supports non-constant initializers for static variables. They are executed prior to <code>main()</code>. That's why the code compiles and works in C++.</p>\n", "LastActivityDate": "2016-03-22T14:38:39.560", "CommentCount": "7", "CreationDate": "2016-03-22T14:38:39.560", "ParentId": "36157169", "Score": "4", "OwnerUserId": "417501"}, "36158564": {"Id": "36158564", "PostTypeId": "2", "Body": "<p>In your example, <code>int a</code> is a variable with <code>static</code> storage duration.</p>\n<p>According to the C++ Standard, Section 3.6.2 (4),</p>\n<blockquote>\n<p id=\"so_36157169_36158564_0\">It is implementation-defined whether the dynamic initialization of a non-local variable with <code>static</code> storage\n  duration is done before the first statement of <code>main</code>. If the initialization is deferred to some point in time\n  after the first statement of <code>main</code>, it shall occur before the first odr-use (3.2) of any function or variable\n  defined in the same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>Depending on your compiler, <code>a</code> might get initialized before <code>main</code> or it will get initialized before its first use in main. (Most compilers do the former, because it tends to be easier to implement.)</p>\n<p>So, in your example, <code>int a = foo();</code> is declaring and initializing a variable with <code>static</code> storage duration, which is allowed in the C++ standard.</p>\n", "LastActivityDate": "2016-03-22T15:28:12.277", "CommentCount": "3", "CreationDate": "2016-03-22T15:28:12.277", "ParentId": "36157169", "Score": "3", "OwnerUserId": "4975646"}, "36157378": {"Id": "36157378", "PostTypeId": "2", "Body": "<p>The likely reason that C++ can compile your code even without the 'constexpr' attribute on your declaration of <code>foo()</code> is that you have not declared <code>int a</code> to be a <code>constexpr</code>. Therefore, the compiler doesn't need to know the value of <code>a</code>, and it can be initialized at runtime.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-03-22T14:39:27.183", "Score": "0", "CreationDate": "2016-03-22T14:38:09.240", "ParentId": "36157169", "CommentCount": "1", "OwnerUserId": "2098932", "LastEditDate": "2016-03-22T14:39:27.183"}});