post_cb({"27468687": {"Id": "27468687", "PostTypeId": "2", "Body": "<p>VC++ correctly rejects this code, but for the wrong reasons - it's a bug. It's ill-formed according to [dcl.attr.grammar]/6:</p>\n<blockquote>\n<p id=\"so_27468666_27468687_0\">Two consecutive left square bracket tokens shall appear only when\n  introducing an <em>attribute-specifier</em>. [ <em>Note:</em>\n  If two consecutive left square brackets appear where an attribute-specifier is not allowed, <strong>the program is\n  ill-formed even if the brackets match an alternative grammar production.</strong> <em>\u2014 end note</em> ] [ <em>Example:</em></p>\n<pre><code>int p[10];\nvoid f() {\n    int x = 42, y[5];\n    int(p[[x] { return x; }()]); // error: invalid attribute on a nested\n                                 // declarator-id and not a \n                                 // function-style cast of an element of p.\n\n    y[[] { return 2; }()] = 2; // error even though attributes are not allowed\n                               // in this context.\n}\n</code></pre>\n<p id=\"so_27468666_27468687_1\"><em>\u2014 end example</em> ]</p>\n</blockquote>\n<p>So try enclosing the lambda-expression in two parantheses as follows.</p>\n<pre><code>t[ ([](){; }) ];\n</code></pre>\n<p>Or write</p>\n<pre><code>auto&amp;&amp; closure = [](){; };\nt[closure]; // move here if correct value category is desired\n</code></pre>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-12-15T10:41:19.207", "Score": "5", "CreationDate": "2014-12-14T11:07:26.643", "ParentId": "27468666", "CommentCount": "4", "OwnerUserId": "3647361", "LastEditDate": "2014-12-15T10:41:19.207"}, "bq_ids": {"n4140": {"so_27468666_27468687_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5531}}, "n3337": {"so_27468666_27468687_0": {"length": 25, "quality": 0.8333333333333334, "section_id": 5317}}, "n4659": {"so_27468666_27468687_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 6967}}}, "27468666": {"ViewCount": "295", "Body": "<p><strong>Using Visual C++ 2013, the following code produces a weird compile error:</strong></p>\n<pre><code>/// header.h\nclass Test\n{\npublic:\n    template &lt;typename Func&gt;\n    void operator[](Func f)\n    {\n        f();\n    }\n};\n\ntemplate &lt;typename T&gt;\nvoid funct()\n{\n    Test t;\n    t[[](){; }];    // line 16 // The same error with t[ ([](){; }) ];\n}\n\n/// main.cpp\nint main()\n{\n    funct&lt;int&gt;();\n    // funct();\n}\n</code></pre>\n<p><strong>Errors:</strong></p>\n<pre><code>1&gt;c:\\path\\to\\header.h(16): error C2958: the left bracket '[' found at 'e:\\path\\to\\header.h(16)' was not matched correctly\n1&gt;c:\\path\\to\\header.h(16): error C2059: syntax error : ']'\n1&gt;c:\\path\\to\\header.h(17): error C2059: syntax error : '}'\n1&gt;c:\\path\\to\\header.h(17): error C2143: syntax error : missing ';' before '}'\n</code></pre>\n<p><br/>\n<strong>This error does not happen when the lambda function body doesn't have any statements:</strong></p>\n<pre><code>template &lt;typename T&gt;\nvoid funct()\n{\n    Test t;\n    t[[](){ }];    // line 16 // No semicolon - No statement - No errors\n}\n</code></pre>\n<p><br/>\n<strong>Or when the function is not template:</strong></p>\n<pre><code>// Ordinary function - No errors\nvoid funct()\n{\n    Test t;\n    t[[](){; }];    // line 16\n}\n</code></pre>\n<p><br/>\nI think I have found a bug in this compiler. However, if anyone knows a way to write this without errors and without using a variable to hold the lambda function, that would be great.</p>\n", "AcceptedAnswerId": "27468687", "Title": "Left bracket not matched correctly while using lambda inside brackets, inside template function", "CreationDate": "2014-12-14T11:05:18.797", "Id": "27468666", "CommentCount": "2", "LastEditDate": "2014-12-14T11:17:11.183", "PostTypeId": "1", "LastEditorUserId": "3997133", "LastActivityDate": "2014-12-15T10:41:19.207", "Score": "2", "OwnerUserId": "3997133", "Tags": "<c++><lambda><visual-c++-2013>", "AnswerCount": "1"}});