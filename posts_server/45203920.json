post_cb({"45203920": {"ViewCount": "29", "Body": "<p>I am not certain of the memory semantics of C++ initialization process. \nLet's say we have the following program.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nvoid func(int* arr, int s)\n{\n    for (int i = 0; i &lt; s; ++i)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    int *a = new int[10];\n    for (int i = 0; i &lt; 10; ++i)\n    {\n        a[i] = i;\n    }\n\n    // Do I need some sort of memory barrier here?\n    std::thread t(func, a, 10);\n    t.join();\n    return 0;\n}\n</code></pre>\n<p>Will the new thread see an array initialized properly? Or do I need the insert some sort of memory barrier in between. How does C++ language define the memory semantics for the initialization?</p>\n<p>My concern is that all the writes to array <strong>a[10]</strong> may sit in one cpu's write buffer, and we start a new thread on a different cpu, which may not observe the initialization writes. </p>\n<p>Do we need memory fence for initialization to be able to be observed by later issued thread running on a different cpus?</p>\n", "AcceptedAnswerId": "45227606", "Title": "Memory semantics of initialization in multithread environment (C++)", "CreationDate": "2017-07-20T02:09:16.593", "Id": "45203920", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-07-21T01:28:53.277", "LastEditorUserId": "7594452", "LastActivityDate": "2017-07-21T01:33:45.367", "Score": "0", "OwnerUserId": "7594452", "Tags": "<c++><multithreading><concurrency><memory-fences>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45203920_45227606_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 2711}}, "n3337": {"so_45203920_45227606_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 2672}}, "n4659": {"so_45203920_45227606_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 3451}}}, "45227606": {"Id": "45227606", "PostTypeId": "2", "Body": "<p>There is a \"happens-before\" relationship between operations in the parent prior to executing the thread constructor, and the thread procedure running in the child.  In particular the Standard says (<code>f</code> being the thread procedure):</p>\n<blockquote>\n<p id=\"so_45203920_45227606_0\"><em>Synchronization</em>: The completion of the invocation of the constructor synchronizes with the beginning of the invocation of the copy of <code>f</code>.</p>\n</blockquote>\n<p>This is found in section <code>[thread.thread.constr]</code></p>\n", "LastActivityDate": "2017-07-21T01:33:45.367", "CommentCount": "5", "CreationDate": "2017-07-21T01:33:45.367", "ParentId": "45203920", "Score": "1", "OwnerUserId": "103167"}});