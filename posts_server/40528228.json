post_cb({"bq_ids": {"n4140": {"so_40528228_40528228_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 1951}}, "n3337": {"so_40528228_40528228_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 1940}}, "n4659": {"so_40528228_40528228_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 2222}}}, "40528228": {"ViewCount": "61", "Body": "<p>I was playing around on <em>godbolt.org</em>, and noticed some <a href=\"https://godbolt.org/g/lCBXF8\" rel=\"nofollow noreferrer\"><em>\"extra code\"</em></a> added by compiler with an <em>'empty main()'</em> with <code>iostream</code> header included.</p>\n<p>After looking into standards I figured those are needed to constructs and initializes the objects <code>cin</code>, <code>cout</code>, <code>cerr</code>, <code>clog</code>, <code>wcin</code>, <code>wcout</code>, <code>wcerr</code>, and <code>wclog,</code> if they have not already been constructed/initialized.</p>\n<p><strong>N4606: \u00a7 27.5.3.1.6</strong> </p>\n<blockquote id=\"so_40528228_40528228_0\">\n<pre><code>27.5.3.1.6 Class ios_base::Init [ios::Init] \n\nnamespace std {\n   class ios_base::Init {\n      public:\n         Init();\n         ~Init();\n      private:\n         static int init_cnt; // exposition only\n   };\n}\n</code></pre>\n</blockquote>\n<p>But for the <code>static</code> data all that standard says it counts the number of constructor and destructor calls for <code>class Init</code>, and is initialized to zero.</p>\n<blockquote>\n<p id=\"so_40528228_40528228_1\">2 For the sake of exposition, the maintained data is presented here\n  as: (2.1) \u2014 static int init_cnt, counts the number of constructor and\n  destructor calls for class Init, initialized to zero.</p>\n</blockquote>\n<p>What I don't get is what is the use of <code>static int init_cnt;</code> here ?\nWhy we need to counting how many times constructor/destructor is called ?</p>\n", "AcceptedAnswerId": "40528531", "Title": "Use of static data inside iostream header", "CreationDate": "2016-11-10T12:57:42.307", "LastActivityDate": "2016-11-10T13:26:26.523", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "Tags": "<c++><iostream>", "Id": "40528228", "Score": "0", "OwnerUserId": "1870232", "ClosedDate": "2016-11-10T14:11:52.283", "AnswerCount": "1"}, "40528531": {"Id": "40528531", "PostTypeId": "2", "Body": "<p>Based on <a href=\"https://github.com/maniacbug/StandardCplusplus/blob/master/ios.cpp#L163\" rel=\"nofollow noreferrer\">https://github.com/maniacbug/StandardCplusplus/blob/master/ios.cpp#L163</a> I think that <strong>if is needed</strong> then program at the end when calling destructors for global variables can properly destruct cin, cout, cerr, clog, wcin, wcout, wcerr and wclog.</p>\n<p>From <a href=\"http://www.csci.csusb.edu/dick/c++std/september/lib-iostreams.html\" rel=\"nofollow noreferrer\">http://www.csci.csusb.edu/dick/c++std/september/lib-iostreams.html</a> :</p>\n<blockquote>\n<p id=\"so_40528228_40528531_0\">~Init();</p>\n<p id=\"so_40528228_40528531_1\">Effects:\n      Destroys an object of class Init.  The function subtracts  one  from\n      the  value  stored in init_cnt and, if the resulting stored value is\n      one, calls cout.flush(), cerr.flush(), clog.flush(),  wcout.flush(),\n      wcerr.flush(), wclog.flush().</p>\n</blockquote>\n", "LastEditorUserId": "7141464", "LastActivityDate": "2016-11-10T13:26:26.523", "Score": "4", "CreationDate": "2016-11-10T13:13:33.947", "ParentId": "40528228", "CommentCount": "0", "LastEditDate": "2016-11-10T13:26:26.523", "OwnerUserId": "7141464"}});