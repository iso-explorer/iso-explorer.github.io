post_cb({"11060994": {"ParentId": "11060968", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"noreferrer\">C++ standard</a> states (A note in section 1.9.16):</p>\n<blockquote>\n<p id=\"so_11060968_11060994_0\">Value computations and side effects associated with the different argument expressions are unsequenced.</p>\n</blockquote>\n<p>In other words, it's undefined and/or compiler-dependent which order the arguments are evaluated in before their value is passed into the function. So on some compilers (which evaluate the left argument first) that code would output <code>10, 10</code> and on others (which evaluate the right argument first) it will output <code>11, 10</code>. In general you should never rely on undefined behaviour.</p>\n<p>To help you understand this, imagine that each argument expression is evaluated before the function is called like so (not that this is exactly how it actually works, it's just an easy way to think of it that will help you understand the sequencing):</p>\n<pre><code>int arg1 = x;       // This line\nint arg2 = x++;     // And this line can be swapped.\nprint(arg1, arg2);\n</code></pre>\n<p>The C++ Standard says that the two argument expression are unsequenced. So, if we write out the argument expressions on separate lines like this, their order should not be significant, because the standard says they can be evaluated in any order. Some compilers might evaluate them in the order above, others might swap them:</p>\n<pre><code>int arg2 = x++;     // And this line can be swapped.\nint arg1 = x;       // This line\nprint(arg1, arg2);\n</code></pre>\n<p>That makes it pretty obvious how <code>arg2</code> can hold the value <code>10</code>, while <code>arg1</code> holds the value <code>11</code>.</p>\n<p>You should always avoid this undefined behaviour in your code.</p>\n", "OwnerUserId": "772035", "LastEditorUserId": "252000", "LastEditDate": "2012-06-16T08:00:50.440", "Id": "11060994", "Score": "11", "CreationDate": "2012-06-16T05:06:51.060", "LastActivityDate": "2012-06-16T08:00:50.440"}, "11061069": {"ParentId": "11060968", "CommentCount": "0", "Body": "<p>I believe this has to do with the function call stack where the last argument goes in first. So x++ is your y and x is the local x in print(). </p>\n", "OwnerUserId": "1409302", "PostTypeId": "2", "Id": "11061069", "Score": "0", "CreationDate": "2012-06-16T05:23:31.860", "LastActivityDate": "2012-06-16T05:23:31.860"}, "11061103": {"ParentId": "11060968", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>On a whole the statement:</p>\n<pre><code> print(x, x++);\n</code></pre>\n<p>results in an <strong><em>Undefined Behavior</em></strong>. Once a program has an Undefined Behavior it ceases to be an valid C++ program and literally any behavior is possible.So it is pointless to find reasoning for such an program.</p>\n<hr>\n<blockquote>\n<p id=\"so_11060968_11061103_0\"><strong>Why is this Undefined Behavior?</strong></p>\n</blockquote>\n<p>Lets evaluate the program step by step to the point where we can beyond any doubt prove that it causes <strong><em>Undefined Behavior</em></strong>.</p>\n<p>The order of evaluation of arguments to a function is <strong><em>Unspecified</em></strong><sup>[Ref 1]</sup>.  </p>\n<p><em><strong>Unspecified</strong></em></p></hr> means that an implementation is allowed to implement this particular functionality as it desires and it is not required to document the detail about it.  \n<p>Applying the above rule to your function call:</p>\n<pre><code>print(x, x++);\n</code></pre>\n<p>An implementation might evaluate this as:</p>\n<ul>\n<li>Left to Right or</li>\n<li>Right to Left or</li>\n<li>Any Magical order(<em>in case of more than two function arguments</em>)</li>\n</ul>\n<p>In short you cannot rely on an implementation to follow any specific order because it is not required to as per the C++ Standard.     </p>\n<p>In C/C++ you cannot read or write to a variable more than once without an intervening <strong><em><a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a></em></strong><sup>[Ref 2]</sup>.If you do so it results in an Undefined Behavior.Irrespective of whether either of the arguments gets evaluated first in the said function, there is no sequence point between them,a sequence point exists only after evaluation of all function arguments<sup>[Ref 3]</sup>.</p>\n<p>In this case <code>x</code> is being accessed without an intervening sequence point and hence it results in an Undefined Behavior.</p>\n<p>Simply put it is best to write any code which does not invoke such <strong><em>Undefined Behaviors</em></strong> because once you do so you cannot expect any specific behavior from such a program.</p>\n<hr>\n<p><sup>[Ref 1]</sup> <strong>C++03 Standard \u00a75.2.2.8</strong><br>\n<strong>Para 8:</strong> </br></p>\n<blockquote>\n<p id=\"so_11060968_11061103_1\">[...] The order of evaluation of function arguments is <strong>unspecified</strong>. [...]</p>\n</blockquote>\n<hr>\n<p><sup>[Ref 2]</sup><strong>C++03 5 Expressions [expr]:</strong><br>\n<strong>Para 4:</strong> </br></p>\n<blockquote>\n<p id=\"so_11060968_11061103_2\">....<br>\n<strong>Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored</strong>. The requirements of this paragraph shall be met for each allowable ordering of the subexpressions of a full\n  expression; <strong>otherwise the behavior is undefined</strong>. </br></p>\n</blockquote>\n<hr>\n<p><sup>[Ref 3]</sup><strong>C++03 1.9 Program execution [intro.execution]:</strong><br>\n<strong>Para 17:</strong> </br></p>\n<blockquote>\n<p id=\"so_11060968_11061103_3\">When calling a function (whether or not the function is inline), <strong>there is a sequence point after the evaluation of all function arguments</strong> (if any) which takes place before execution of any expressions or statements in the function body.</p>\n</blockquote>\n</hr></hr></hr>", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2012-06-16T11:56:46.693", "Id": "11061103", "Score": "5", "CreationDate": "2012-06-16T05:33:02.883", "LastActivityDate": "2012-06-16T11:56:46.693"}, "11060968": {"CommentCount": "4", "ViewCount": "3505", "PostTypeId": "1", "CreationDate": "2012-06-16T05:02:14.543", "LastActivityDate": "2012-06-28T07:39:32.430", "Title": "Using the post-increment in function arguments", "AcceptedAnswerId": "11060994", "LastEditorDisplayName": "user34537", "LastEditDate": "2012-06-28T07:39:32.430", "Id": "11060968", "Score": "5", "Body": "<p>When I run this code, the output is 11, 10.</p>\n<p>Why on earth would that be?  Can someone give me an explanation of this that will hopefully enlighten me?</p>\n<p>Thanks</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print(int x, int y)\n{ \n    cout &lt;&lt; x &lt;&lt; endl;\n    cout &lt;&lt; y &lt;&lt; endl;\n}\nint main()\n{\n    int x = 10;\n    print(x, x++);\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1218599", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_11060968_11061103_1": {"section_id": 3260, "quality": 0.8333333333333334, "length": 5}, "so_11060968_11060994_0": {"section_id": 5811, "quality": 1.0, "length": 9}}, "n3337": {"so_11060968_11061103_1": {"section_id": 3132, "quality": 0.8333333333333334, "length": 5}, "so_11060968_11060994_0": {"section_id": 5584, "quality": 1.0, "length": 9}}, "n4659": {"so_11060968_11061103_1": {"section_id": 7709, "quality": 0.6666666666666666, "length": 4}}}, "11060979": {"ParentId": "11060968", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>x++ is a function parameter and they may be evaluated in an unspecified order which means the behavior is undefined and not portable (or legal).</p>\n", "Id": "11060979", "LastEditDate": "2012-06-16T17:03:16.997", "OwnerDisplayName": "user34537", "Score": "4", "CreationDate": "2012-06-16T05:04:54.540", "LastActivityDate": "2012-06-16T17:03:16.997", "LastEditorDisplayName": "user34537"}});