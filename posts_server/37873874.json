post_cb({"37873917": {"ParentId": "37873874", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>It is not required by the standard for the <code>main</code> to explicitly return. If <code>return</code> statement is missing, compiler simply puts:</p>\n<p><code>return 0;</code></p>\n<p>at the end. This rule doesn't apply to other functions. </p>\n<p>In C, default return type of any function was <code>int</code> if not provided by programmer, for example:</p>\n<pre><code>get() // int assumed\n{\n    return 10;\n}\n</code></pre>\n<p>C++ standard requires that you must specify the return type. Above code will not compile in C++ compiler. C90 allowed implicit <code>int</code>, C99 disallows implicit <code>int</code>.</p>\n", "OwnerUserId": "264325", "LastEditorUserId": "264325", "LastEditDate": "2016-06-17T05:51:33.883", "Id": "37873917", "Score": "2", "CreationDate": "2016-06-17T05:40:09.543", "LastActivityDate": "2016-06-17T05:51:33.883"}, "37874421": {"ParentId": "37873874", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>See also <a href=\"https://stackoverflow.com/questions/204476/\">What should <code>main()</code> return in C and C++?</a></p>\n<p>ISO/IEC 14882:1998 contains:</p>\n<blockquote>\n<p id=\"so_37873874_37874421_0\">\u00a77 <strong>Declarations</strong></p>\n<p id=\"so_37873874_37874421_1\">\u00b67 Only in function declarations for constructors, destructors, and type conversions can the <em>decl-specifier-seq</em>\n  be omitted.<sup>78)</sup></p>\n</blockquote>\n<p>and footnote 78 says:</p>\n<blockquote>\n<p id=\"so_37873874_37874421_2\">The \u201cimplicit int\u201d rule of C is no longer supported.</p>\n</blockquote>\n<p>The same statements are in  \u00b69 and footnote 89 in the C++11 standard.</p>\n<p>So, <code>main()</code> declared without the return type has never been a part of standard C++, but it was allowed roughly up until C++98 standard was created (and probably a bit longer for reasons of backwards compatibility).</p>\n<p>If you look in Stroustrup's \"Design and Evolution of C++\" (published 1994), \u00a72.8 <strong>The C Declaration Syntax</strong> says:</p>\n<blockquote>\n<p id=\"so_37873874_37874421_3\">Allowing the type specifier to be omitted (meaning <code>int</code> by default) also led to complications. \u2026 The negative reaction to changes in this area from users was very strong. \u2026 I backed out the change.  I don't think I had a choice.  Allowing that implicit <code>int</code> is the source of many of the annoying problems with the C++ grammar today. \u2026 Finally, ten years later, the C++ ANSI/ISO standard committee has decided to deprecate implicit <code>int</code>.  That means we may get rid of it in another decade or so.</p>\n</blockquote>\n", "OwnerUserId": "15168", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:33:00.733", "Id": "37874421", "Score": "22", "CreationDate": "2016-06-17T06:17:07.460", "LastActivityDate": "2016-06-17T06:17:07.460"}, "37874305": {"ParentId": "37873874", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Implicit <code>int</code> types were disallowed in all C++ standards, i.e., it wasn't allowed in C++98. It isn't anything new in C++11. There wasn't any exception for <code>main()</code> with respect to the <em>declaration</em> of the function. Also, the implicit <code>int</code> rule applied to all declarations not just to <code>main()</code>.</p>\n<p>The relevant clause in the C++ standard is 7 [dcl.dcl] paragraph 11:</p>\n<blockquote>\n<p id=\"so_37873874_37874305_0\">Only in function declarations for constructors, destructors, and type conversions can the <em>decl-specifier-seq</em>\n  be omitted.<sup>94</sup></p>\n<p id=\"so_37873874_37874305_1\">94) The \u201cimplicit int\u201d rule of C is no longer supported.</p>\n</blockquote>\n<p>I don't have easy access to the C++98 standard right now but C++03 definitely has the same statement. The only difference is that it is in paragraph 7 and the footnote is \"<sup>79</sup>\" instead of \"<sup>94</sup>\".</p>\n<p>C's implicit <code>int</code> rule was part of C++ for a while prior to the first standard but got removed at some point. Compilers may accept programs omitting the type as an extension but I think they are required to emit a diagnostic. Whether that means much is a separate question as it is long established that writing a single <code>\\r</code> at the start of a line would meet that requirement.</p>\n<p>What is there and what will remain is the odd exception that program execution can flow off the end of <code>main()</code> without a <code>return</code> statement: it is assumed that mandating a <code>return</code> statement in <code>main()</code> would break existing code.</p>\n<p>The statement</p>\n<blockquote>\n<p id=\"so_37873874_37874305_2\">It shall have a return type of type <code>int</code></p>\n</blockquote>\n<p>doesn't state anything about how the function acquires its return type. It only states what the return type shall be.</p>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2016-06-17T06:42:21.533", "Id": "37874305", "Score": "8", "CreationDate": "2016-06-17T06:10:18.193", "LastActivityDate": "2016-06-17T06:42:21.533"}, "37874013": {"ParentId": "37873874", "PostTypeId": "2", "CommentCount": "8", "Body": "<p><a href=\"http://eel.is/c++draft/basic.start.main\" rel=\"nofollow\">This</a> is what the working draft says about the main function.<br>\nExcerpts follow.</br></p>\n<ul>\n<li><a href=\"http://eel.is/c++draft/basic.start.main#2\" rel=\"nofollow\">3.6.1/2</a></li>\n</ul>\n<blockquote>\n<p id=\"so_37873874_37874013_0\">An implementation shall not predefine the\u00a0main function. This function shall not be overloaded. Its type shall have C++ language linkage and it shall have a declared return type of type\u00a0int, but otherwise its type is\u00a0implementation-defined. An implementation shall allow both</p>\n<ul>\n<li>a function of\u00a0()\u00a0returning\u00a0int\u00a0and</li>\n<li>a function of\u00a0(int, pointer to pointer to\u00a0char) returning\u00a0int</li>\n</ul>\n<p id=\"so_37873874_37874013_1\">as the type of\u00a0main</p>\n</blockquote>\n<ul>\n<li><a href=\"http://eel.is/c++draft/basic.start.main#5\" rel=\"nofollow\">3.6.1/5</a>:</li>\n</ul>\n<blockquote>\n<p id=\"so_37873874_37874013_2\">A return statement in\u00a0main\u00a0has the effect of leaving the main function [...] If control flows off the end of the compound-statement\u00a0of\u00a0main, the effect is equivalent to a\u00a0return\u00a0with operand\u00a00</p>\n</blockquote>\n<p>So, the standard says that the main function shall have one of the following types:</p>\n<ul>\n<li><p><code>int()</code></p></li>\n<li><p><code>int(int, char **)</code></p></li>\n</ul>\n<p>Being the main function a function, I guess it follows also the rules in <a href=\"http://eel.is/c++draft/dcl.fct\" rel=\"nofollow\">8.3.5</a>.<br>\nThe question would become thus: <em>can I omit the return type from a function definition? Does the standard allow me to do that?</em><br>\nThe answer is no, indeed.</br></br></p>\n", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2016-06-17T05:59:10.877", "Id": "37874013", "Score": "3", "CreationDate": "2016-06-17T05:48:27.427", "LastActivityDate": "2016-06-17T05:59:10.877"}, "37873874": {"CommentCount": "4", "ViewCount": "1545", "PostTypeId": "1", "LastEditorUserId": "1620779", "CreationDate": "2016-06-17T05:37:16.700", "LastActivityDate": "2016-06-17T06:42:21.533", "Title": "Is the usage of main without a return type phased out in C++11?", "AcceptedAnswerId": "37874421", "LastEditDate": "2016-06-17T06:39:09.607", "Id": "37873874", "Score": "10", "Body": "<p>Stephen Prata in his book C++ Primer Plus [p 31] says :</p>\n<blockquote>\n<p id=\"so_37873874_37873874_0\">Many existing programs use the classic C function header instead:<br><br>\n<code>main() // original C style</code>\n<br><br>Under classic C, omitting the return type\n  is the same as saying that the function is type int. However, C++ has\n  phased out that usage.</br></br></br></br></p>\n</blockquote>\n<p>However The C++11 draft 3.6.1-&gt;2 says</p>\n<blockquote>\n<p id=\"so_37873874_37873874_1\">An implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined.</p>\n</blockquote>\n<p><strong>Test Result</strong></p>\n<pre><code>$ g++ -Werror=pedantic MainCheck.cpp -o MainCheck\nMainCheck.cpp:3:6: error: ISO C++ forbids declaration of \u2018main\u2019 with no type [-Werror=pedantic]\n main()\n$ # also means g++ don't conform to the standard\n</code></pre>\n<p>confirms that what Mr. Prata said is true when it comes to C++ standard.</p>\n<p>Is there a clause in the C++11 draft that discourages the use of :</p>\n<pre><code>main() // that is without return type.\n</code></pre>\n<p>Is</p>\n<blockquote>\n<p id=\"so_37873874_37873874_2\">It shall have a return type of type int</p>\n</blockquote>\n<p>itself such a clause?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1620779", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_37873874_37873874_1": {"section_id": 7146, "quality": 0.8823529411764706, "length": 15}, "so_37873874_37873874_2": {"section_id": 7146, "quality": 1.0, "length": 5}, "so_37873874_37874305_2": {"section_id": 7146, "quality": 1.0, "length": 5}, "so_37873874_37874305_0": {"section_id": 5387, "quality": 0.8, "length": 8}, "so_37873874_37874013_2": {"section_id": 7149, "quality": 0.6470588235294118, "length": 11}, "so_37873874_37874421_2": {"section_id": 5387, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874421_1": {"section_id": 5387, "quality": 0.8, "length": 8}, "so_37873874_37874305_1": {"section_id": 5387, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874013_0": {"section_id": 7146, "quality": 0.7307692307692307, "length": 19}}, "n3337": {"so_37873874_37873874_1": {"section_id": 6890, "quality": 0.8823529411764706, "length": 15}, "so_37873874_37873874_2": {"section_id": 6890, "quality": 1.0, "length": 5}, "so_37873874_37874305_2": {"section_id": 6890, "quality": 1.0, "length": 5}, "so_37873874_37874305_0": {"section_id": 5181, "quality": 0.8, "length": 8}, "so_37873874_37874013_2": {"section_id": 6893, "quality": 0.6470588235294118, "length": 11}, "so_37873874_37874421_2": {"section_id": 5181, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874421_1": {"section_id": 5181, "quality": 0.8, "length": 8}, "so_37873874_37874305_1": {"section_id": 5181, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874013_0": {"section_id": 6890, "quality": 0.6538461538461539, "length": 17}}, "n4659": {"so_37873874_37873874_1": {"section_id": 8647, "quality": 0.8823529411764706, "length": 15}, "so_37873874_37873874_2": {"section_id": 8647, "quality": 1.0, "length": 5}, "so_37873874_37874305_2": {"section_id": 8647, "quality": 1.0, "length": 5}, "so_37873874_37874013_2": {"section_id": 8650, "quality": 1.0, "length": 17}, "so_37873874_37874421_2": {"section_id": 6812, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874305_1": {"section_id": 6812, "quality": 0.8333333333333334, "length": 5}, "so_37873874_37874013_0": {"section_id": 8647, "quality": 0.9230769230769231, "length": 24}}}});