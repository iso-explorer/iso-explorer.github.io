post_cb({"30826046": {"ParentId": "30826000", "CommentCount": "0", "Body": "<p>What said by Scott Mayers is right but your program is wrong.</p>\n<pre><code> B(): b(9), A(foo()) { } \n</code></pre>\n<p>This statement is absolutely wrong:</p>\n<p>In derived class constructor initialization list you should first call base class constructor before initializing derived class member object. You cant invoke non static member function before  instantiating the object.</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\nstruct A\n{\n    int a;\n    A(int) { std::cout&lt;&lt;\"base constructed\\n\"; }\n    virtual int foo(){ std::cout &lt;&lt; \"base\" &lt;&lt; std::endl; return 5; }\n};\n\nstruct B : A\n{\n    int b;\n    B():  A(6), b(9) { std::cout&lt;&lt;\"derived constructed\"; }\n    virtual int foo(){ std::cout &lt;&lt; \"derived\" &lt;&lt; std::endl; return 6; }\n};\n\n\n\nint main(){\n    B b; //prints derived\n    }\n\nO/P\n\nbase constructed\n\nderived constructed\n</code></pre>\n", "OwnerUserId": "1144157", "PostTypeId": "2", "Id": "30826046", "Score": "0", "CreationDate": "2015-06-14T04:51:26.940", "LastActivityDate": "2015-06-14T04:51:26.940"}, "30826049": {"ParentId": "30826000", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Scott means that while you are in the base class constructor usual rules for virtual function don't work. So if you are in the base class constructor then any virtual functions(of that base class) called inside the ctor will be called on the object which is currently under construction in this very ctor. </p>\n<p>So your code prints correct result: <code>foo()</code> is called in the <code>B</code>'s ctor not in the parent constructor. If you called <code>foo</code> <strong>inside</strong> the <code>A</code> ctor you would have <code>base</code> printed.</p>\n<p>Still the behavior is deemed undefined according to the standard:</p>\n<blockquote>\n<p id=\"so_30826000_30826049_0\"><strong>[12.6.2/13]</strong> Member functions (including virtual member functions, 10.3) can be called for an object under construction. Similarly, an object under construction can be the operand of the typeid operator\n  (5.2.8) or of a dynamic_-cast (5.2.7). <em>However, if these operations\n  are performed in a ctor-initializer (or in a function called directly\n  or indirectly from a ctor-initializer) before all the mem-initializers\n  for base classes have completed, the resultof the operation is\n  undefined</em>.</p>\n</blockquote>\n<p>But you should understand that \"undefined\" here means that you might use some internal state in the called function. Since you don't the behavior will be consistent but standard still deems it undefined. The \"undefined\" part have nothing to do with what is printed but rather with what might be accessed in the member function. </p>\n", "OwnerUserId": "643393", "LastEditorUserId": "643393", "LastEditDate": "2015-06-14T05:01:08.673", "Id": "30826049", "Score": "3", "CreationDate": "2015-06-14T04:51:49.800", "LastActivityDate": "2015-06-14T05:01:08.673"}, "bq_ids": {"n4140": {"so_30826000_30826000_0": {"section_id": 6981, "quality": 0.7272727272727273, "length": 8}, "so_30826000_30826049_0": {"section_id": 441, "quality": 0.8837209302325582, "length": 38}}, "n3337": {"so_30826000_30826049_0": {"section_id": 432, "quality": 0.8837209302325582, "length": 38}, "so_30826000_30826000_0": {"section_id": 6727, "quality": 0.7272727272727273, "length": 8}}, "n4659": {"so_30826000_30826049_0": {"section_id": 461, "quality": 0.8604651162790697, "length": 37}, "so_30826000_30826000_0": {"section_id": 8479, "quality": 0.7272727272727273, "length": 8}}}, "30826000": {"CommentCount": "0", "ViewCount": "50", "CreationDate": "2015-06-14T04:41:32.477", "LastActivityDate": "2015-06-14T05:01:08.673", "Title": "Understanding base class initialization", "AcceptedAnswerId": "30826049", "PostTypeId": "1", "Id": "30826000", "Score": "3", "Body": "<p>Consider the program:</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\nstruct A\n{\n    int a;\n    A(int) { }\n    virtual int foo(){ std::cout &lt;&lt; \"base\" &lt;&lt; std::endl; return 5; }\n};\n\nstruct B : A\n{\n    int b;\n    B(): b(9), A(foo()) { }\n    virtual int foo(){ std::cout &lt;&lt; \"derived\" &lt;&lt; std::endl; return 6; }\n};\n\nB b; //prints derived\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/c95a474cf2448540\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>What Scott Meyers in his <code>Effective C++</code> said about that was :</p>\n<blockquote>\n<p id=\"so_30826000_30826000_0\">During base class construction of a derived class object, the type of\n  the object is that of the base class.</p>\n</blockquote>\n<p>So, I expected <code>base</code> to be printed instead, because we was under the base class class construction while invoking the <code>foo</code> function. What did I miss? Maybe it's UB? If so, please point me out to the relevant section.</p>\n", "Tags": "<c++><base>", "OwnerUserId": "2786156", "AnswerCount": "3"}, "30826080": {"ParentId": "30826000", "CommentCount": "2", "Body": "<p>Just do not use virtual functions in constructors - item 9</p>\n", "OwnerUserId": "892256", "PostTypeId": "2", "Id": "30826080", "Score": "1", "CreationDate": "2015-06-14T04:57:15.560", "LastActivityDate": "2015-06-14T04:57:15.560"}});