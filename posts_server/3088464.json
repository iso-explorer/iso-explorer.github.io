post_cb({"bq_ids": {"n4140": {"so_3088464_3088474_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 660}}, "n3337": {"so_3088464_3088474_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 650}}, "n4659": {"so_3088464_3088474_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 688}}}, "3088464": {"ViewCount": "4202", "Body": "<p>I'm trying something like this:</p>\n<pre><code>Foo &amp; operator=(Foo &amp; to, const Bar &amp;from);\n</code></pre>\n<p>But I'm getting this error: </p>\n<pre><code>E2239 'operator =(Foo &amp;, const Bar &amp;)' must be a member function\n</code></pre>\n<p>Are there limitations on which operators can/cannot be defined as Free Functions, and if so, why?</p>\n", "AcceptedAnswerId": "3088474", "Title": "Can C++ assignment operators be free functions?", "CreationDate": "2010-06-21T20:57:01.977", "Id": "3088464", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-12-28T08:27:38.760", "Score": "13", "OwnerUserId": "1737", "Tags": "<c++><operator-overloading><free-function>", "AnswerCount": "2"}, "3088474": {"Id": "3088474", "PostTypeId": "2", "Body": "<p>The assignment operator must be a non-static member function and must have exactly one parameter:</p>\n<blockquote>\n<p id=\"so_3088464_3088474_0\">An assignment operator shall be implemented by a non-static member function with exactly one parameter (C++03 13.5.3/1).</p>\n</blockquote>\n<p><code>operator()</code>, <code>operator[]</code>, and <code>operator-&gt;</code> must also be implemented as non-static member functions.  </p>\n<p>Class-specific <code>operator new</code> and <code>operator delete</code> (and variants thereof) must be implemented as static member functions (note that these are implicitly static, even if they are not declared with the <code>static</code> keyword).</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2015-07-06T14:01:14.523", "Score": "22", "CreationDate": "2010-06-21T20:58:35.383", "ParentId": "3088464", "CommentCount": "2", "OwnerUserId": "151292", "LastEditDate": "2015-07-06T14:01:14.523"}, "3088501": {"Id": "3088501", "PostTypeId": "2", "Body": "<p>It cannot.</p>\n<p>The reason, I guess, has to do with copy constructor. They have very similar semantics, and, you cannot define a copy constructor outside of a class just like other constructor. So, they didn't want to separate the twins far apart (to avoid the twins paradox:).</p>\n<p>P.S. What's a shame in C++, is that you cannot add a member to existing class. There's no low-level reason for that. If it would be possible, you could decouple header and cpp dependencies by not declaring private functions in the class definition header.</p>\n", "LastActivityDate": "2010-06-21T21:02:56.513", "CommentCount": "3", "CreationDate": "2010-06-21T21:02:56.513", "ParentId": "3088464", "Score": "-1", "OwnerUserId": "73656"}});