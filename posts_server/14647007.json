post_cb({"14647210": {"Id": "14647210", "PostTypeId": "2", "Body": "<p>From C++11, Table 100 (Sequence container requirements):</p>\n<blockquote>\n<p id=\"so_14647007_14647210_0\"><code>clear()</code> [...]  may invalidate the past-the-end iterator.</p>\n</blockquote>\n<p>And <code>std::list</code> is of course a sequence container template (23.3.5.1/2):</p>\n<blockquote>\n<p id=\"so_14647007_14647210_1\">A list satisfies all of the requirements of a container, of a reversible container (given in two tables in 23.2), <strong>of a sequence container</strong>, including most of the optional sequence container requirements (23.2.3), and of an allocator-aware container (Table 99). The exceptions are the operator[] and at member functions, which are not provided. Descriptions are provided here only for operations on list that are not described in one of these tables <strong>or for operations where there is additional semantic information</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "596781", "LastActivityDate": "2013-02-01T13:36:58.843", "Score": "3", "CreationDate": "2013-02-01T13:20:30.467", "ParentId": "14647007", "CommentCount": "4", "LastEditDate": "2013-02-01T13:36:58.843", "OwnerUserId": "596781"}, "14647095": {"Id": "14647095", "PostTypeId": "2", "Body": "<p>This is in fact invalid.\nIterators are only valid on the current state container.\nOnce you add or remove items, the iterator is no longer valid.</p>\n<p>The article you link does not say what you are doing is valid. They get a new iterator after the clear.</p>\n<p>The reason it doesn't show up in release code is because the debugging that picks up the issue is disabled.</p>\n", "LastActivityDate": "2013-02-01T13:13:30.673", "Score": "-2", "CreationDate": "2013-02-01T13:13:30.673", "ParentId": "14647007", "CommentCount": "4", "OwnerUserId": "1154019"}, "14647540": {"Id": "14647540", "PostTypeId": "2", "Body": "<p>Other answers point out that, in general, you can't rely on a container's past-the-end iterator remaining valid when the container is cleared. However, the past-the-end iterator of a list should indeed remain valid:</p>\n<blockquote>\n<p id=\"so_14647007_14647540_0\">C++11 23.3.5.4/3 <em>Effects:</em> Invalidates only the iterators and references to the erased elements.</p>\n</blockquote>\n<p>The past-the-end iterator does not refer to any element, so should not be invalidated.</p>\n", "LastActivityDate": "2013-02-01T13:37:39.433", "Score": "9", "CreationDate": "2013-02-01T13:37:39.433", "ParentId": "14647007", "CommentCount": "3", "OwnerUserId": "204847"}, "bq_ids": {"n4140": {"so_14647007_14647210_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 903}, "so_14647007_14647210_0": {"length": 4, "quality": 0.8, "section_id": 723}, "so_14647007_14647540_0": {"length": 5, "quality": 0.625, "section_id": 884}}, "n3337": {"so_14647007_14647210_0": {"length": 4, "quality": 0.8, "section_id": 712}, "so_14647007_14647210_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 889}, "so_14647007_14647540_0": {"length": 5, "quality": 0.625, "section_id": 873}}, "n4659": {"so_14647007_14647210_0": {"length": 4, "quality": 0.8, "section_id": 754}, "so_14647007_14647210_1": {"length": 39, "quality": 0.9069767441860465, "section_id": 963}, "so_14647007_14647540_0": {"length": 5, "quality": 0.625, "section_id": 944}}}, "14647007": {"ViewCount": "1338", "Body": "<p>Check this code: </p>\n<pre><code>#include \"stdafx.h\"\n#include &lt;list&gt;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    std::list&lt;int&gt; mylist;\n    mylist.push_back(1);\n    std::list&lt;int&gt;::iterator i = mylist.end();\n    if( i == mylist.end() )\n        printf( \"end is end\\n\" );\n\n    mylist.clear();\n    if( i == mylist.end() )\n        printf( \"never get here because Microsoft seems to \"\n                \"think the iterator is no longer safe.\\n\" );\n\n    return 0;\n}\n</code></pre>\n<p>Now, according to <a href=\"http://www.cplusplus.com/reference/list/list/clear/\" rel=\"nofollow\">cplusplus.com</a> this shouldn't be a problem, and in release mode, I think this is fine and doesn't cause any issues really, but debugging becomes impossible as this just bails without letting me continue. Any pointers?</p>\n", "AcceptedAnswerId": "14647540", "Title": "Does std::list::clear invalidate std::list::end iterator?", "CreationDate": "2013-02-01T13:07:56.230", "Id": "14647007", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-10-26T03:44:45.803", "LastEditorUserId": "1505120", "LastActivityDate": "2015-10-26T03:44:45.803", "Score": "9", "OwnerUserId": "64122", "Tags": "<c++><visual-studio-2012><stl><stdlist>", "AnswerCount": "3"}});