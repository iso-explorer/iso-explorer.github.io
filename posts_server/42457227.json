post_cb({"bq_ids": {"n4140": {"so_42457227_42457407_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5885}}, "n3337": {"so_42457227_42457407_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5656}}, "n4659": {"so_42457227_42457407_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7368}}}, "42457377": {"Id": "42457377", "PostTypeId": "2", "Body": "<p>You are wrong, because the singleton is defined in one single translation unit, the one that contains the definition of the function that returns it. That means that all translation units that wants to use the singleton ask it to the single one that actually defines it, and in the end all use the same object (as expected for a <em>singleton</em> pattern :-) ).</p>\n", "LastActivityDate": "2017-02-25T14:36:00.690", "CommentCount": "2", "CreationDate": "2017-02-25T14:36:00.690", "ParentId": "42457227", "Score": "-1", "OwnerUserId": "3545273"}, "42457227": {"ViewCount": "115", "Body": "<p><a href=\"https://stackoverflow.com/questions/1008019/c-singleton-design-pattern\">C++ Singleton design pattern</a> I come across this question and learned that there are two ways to implement the singleton pattern in c++.</p>\n<p>1) allocate the single instance in heap and return it in the instance() call </p>\n<p>2) return a static instance in the instance() call, this is also known as the lazy initialization implementation.</p>\n<p>But I think the second, that is the lazy initialization implementation, is wrong due to following reasons.\nStatic object returned from the instance() call has internal linkage and will have unique copies in different translation unit.  So if user modifies the singleton, it will not be reflected in any other translation unit.</p>\n<p>But there are many statement that the second implementation is correct, am I missing something?</p>\n", "AcceptedAnswerId": "42457377", "Title": "C++ singleton lazy initialization implementation and linkage seems conflict", "CreationDate": "2017-02-25T14:20:23.060", "Id": "42457227", "CommentCount": "5", "LastEditDate": "2017-05-23T11:54:33.733", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2017-02-25T14:45:37.020", "Score": "0", "OwnerUserId": "1737132", "Tags": "<c++><singleton><linkage>", "AnswerCount": "3"}, "42457407": {"Id": "42457407", "PostTypeId": "2", "Body": "<p>In the context of a method, the <code>static</code> keyword is not about linkage. It just affects the \"storage class\" of the defined variable. And for static local variables the standard explicitly states:</p>\n<blockquote>\n<p id=\"so_42457227_42457407_0\">9.3.6 A static local variable in a member function always refers to the same object, whether or not the member function is inline.</p>\n</blockquote>\n<p>So it doesn't matter at all whether you put the code in a header or cpp file.</p>\n<p>Note that for free / non-member function it does indeed depend on the linkage of the function, as KerrekSB pointed out.</p>\n", "LastEditorUserId": "3989746", "LastActivityDate": "2017-02-25T14:45:37.020", "Score": "2", "CreationDate": "2017-02-25T14:38:25.503", "ParentId": "42457227", "CommentCount": "3", "OwnerUserId": "3989746", "LastEditDate": "2017-02-25T14:45:37.020"}, "42457385": {"Id": "42457385", "PostTypeId": "2", "Body": "<p>The linkage of the name of implementation object does not matter. What matters is the linkage of the name of the function you use to access the object, and <em>that</em> name has, of course, external linkage:</p>\n<p><strong>thing.h:</strong></p>\n<pre><code>Thing &amp; TheThing();   // external linkage\n</code></pre>\n<p><strong>thing.cpp:</strong></p>\n<pre><code>#include \"thing.h\"\n\nThing &amp; TheThing() { static Thing impl; return impl; }\n</code></pre>\n<p>Every use of the name <code>TheThing</code> in the program refers to the same entity, namely the function defined (uniquely) in thing.cpp.</p>\n<p>Remember, linkage is a property of <em>names</em>, not of objects.</p>\n", "LastActivityDate": "2017-02-25T14:36:30.073", "CommentCount": "3", "CreationDate": "2017-02-25T14:36:30.073", "ParentId": "42457227", "Score": "1", "OwnerUserId": "596781"}});