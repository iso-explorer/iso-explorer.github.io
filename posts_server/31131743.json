post_cb({"bq_ids": {"n4140": {"so_31131743_31131915_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 717}, "so_31131743_31131915_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 718}}, "n3337": {"so_31131743_31131915_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 706}, "so_31131743_31131915_2": {"length": 18, "quality": 0.9473684210526315, "section_id": 707}}, "n4659": {"so_31131743_31131915_1": {"length": 25, "quality": 0.9259259259259259, "section_id": 748}, "so_31131743_31131915_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 749}}}, "31131915": {"Id": "31131915", "PostTypeId": "2", "Body": "<p>C++11 says the following about the thread safetly of containers in the standard library:</p>\n<blockquote>\n<p id=\"so_31131743_31131915_0\">23.2.2 Container data races [container.requirements.dataraces]</p>\n<p id=\"so_31131743_31131915_1\">For purposes of avoiding data races (17.6.5.9), implementations shall\n  consider the following functions to be const: <code>begin</code>, <code>end</code>,\n  <code>rbegin</code>, <code>rend</code>, <code>front</code>, <code>back</code>, <code>data</code>, <code>find</code>, <code>lower_bound</code>,\n  <code>upper_bound</code>, <code>equal_range</code>, <code>at</code> and, except in associative or\n  unordered associative containers, <code>operator[]</code>.</p>\n<p id=\"so_31131743_31131915_2\">Notwithstanding (17.6.5.9), implementations are required to avoid data\n  races when the contents of the contained object in different elements\n  in the same sequence, excepting <code>vector&lt;bool&gt;</code>, are modified\n  concurrently.</p>\n</blockquote>\n<p>So, basically reading from a container from multiple threads is fine, and modifying elements that are already in the container is fine (as long as they are different elements).</p>\n<p>So, neither of your two more specific questions are thread safe for <code>std::vector</code>:</p>\n<p>1) Two threads inserting into the vector is modifying the vector itself - not existing separate elements.</p>\n<p>2) One thread erasing and other walking to access the same element is not safe because erasing an element from the vector isn't an operation that is promised to be thread safe (or \"free from data races\", as the standard puts it).</p>\n<p>To perform those operations safely will require that the program impose some external synchronization itself.</p>\n", "LastEditorUserId": "12711", "LastActivityDate": "2015-06-30T15:09:20.467", "Score": "14", "CreationDate": "2015-06-30T07:16:52.087", "ParentId": "31131743", "CommentCount": "4", "OwnerUserId": "12711", "LastEditDate": "2015-06-30T15:09:20.467"}, "31131743": {"ViewCount": "2551", "Body": "<p>what does it mean to make an dynamic array thread safe and concurrent?\nSay for ex: std::vector.</p>\n<ol>\n<li>two threads may want to insert at the same position. No synchronization needed as it will be done as per thread scheduling.</li>\n<li>one thread erasing and other walking to access the same element? This is not a data structure issue i believe, it is the usage problem.</li>\n</ol>\n<p>So is there anything that needs to be done over std::vector to make it thread safe ad concurrent or it is by default thread safe and concurrent?</p>\n", "Title": "Is std::vector thread-safe and concurrent by default? Why or why not?", "CreationDate": "2015-06-30T07:07:09.763", "LastActivityDate": "2015-07-29T07:28:02.680", "CommentCount": "5", "LastEditDate": "2015-06-30T07:10:05.537", "PostTypeId": "1", "LastEditorUserId": "2864740", "Id": "31131743", "Score": "5", "OwnerUserId": "1987142", "Tags": "<c++><vector><data-structures><concurrency><lock-free>", "AnswerCount": "2"}, "31132250": {"Id": "31132250", "PostTypeId": "2", "Body": "<p>The only concurrent operations on a single object in the standard library that are safe by default are\n - Only accessing <code>const</code>-member functions \n - All accesses to synchronization primitives (like mutex lock and unlock or atomic operations) \nEverything else has to be externally synchronized. In particular, the standard library doesn't have any thread safe containers yet (as of c++14)</p>\n<p>So the answer to both of your examples is no, they both require a form of external synchronization.</p>\n<p>What you can do of course is modifying the value of two different elements in the container.</p>\n", "LastEditorUserId": "2881849", "LastActivityDate": "2015-07-29T07:28:02.680", "Score": "2", "CreationDate": "2015-06-30T07:34:19.000", "ParentId": "31131743", "CommentCount": "0", "OwnerUserId": "2881849", "LastEditDate": "2015-07-29T07:28:02.680"}});