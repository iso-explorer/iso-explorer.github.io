post_cb({"1387728": {"ParentId": "1387647", "CommentCount": "1", "CreationDate": "2009-09-07T05:50:51.180", "OwnerUserId": "64960", "PostTypeId": "2", "Id": "1387728", "Score": "7", "Body": "<p>Some basic rules for vector:</p>\n<ul>\n<li>Reallocation invalidates all\nreferences, pointers, and iterators\nfor elements of the vector.</li>\n<li>Insertions <em>may</em> invalidate references,\npointers, and iterators.</li>\n<li>Inserting or removing elements\ninvalidates references, pointers, and\niterators that refer to the following\nelements.</li>\n<li>If an insertion causes reallocation,\nit invalidates all references,\niterators, and pointers.</li>\n</ul>\n", "LastActivityDate": "2009-09-07T05:50:51.180"}, "1387655": {"ParentId": "1387647", "CommentCount": "2", "CreationDate": "2009-09-07T05:22:14.590", "OwnerUserId": "49942", "PostTypeId": "2", "Id": "1387655", "Score": "1", "Body": "<p>I expect that references would be invalidated only by any explicit or implicit <code>resize()</code> (see also the <code>max_size</code>, <code>capacity</code>, and <code>reserve</code> methods).</p>\n", "LastActivityDate": "2009-09-07T05:22:14.590"}, "bq_ids": {"n4140": {"so_1387647_1387747_0": {"section_id": 986, "quality": 0.8947368421052632, "length": 17}, "so_1387647_1387747_1": {"section_id": 820, "quality": 0.625, "length": 5}}, "n3337": {"so_1387647_1387747_0": {"section_id": 971, "quality": 0.8947368421052632, "length": 17}, "so_1387647_1387747_1": {"section_id": 809, "quality": 0.625, "length": 5}}, "n4659": {"so_1387647_1387747_0": {"section_id": 1049, "quality": 0.8947368421052632, "length": 17}, "so_1387647_1387747_1": {"section_id": 879, "quality": 0.75, "length": 6}}}, "1387747": {"ParentId": "1387647", "CommentCount": "4", "CreationDate": "2009-09-07T05:58:36.857", "OwnerUserId": "47984", "PostTypeId": "2", "Id": "1387747", "Score": "12", "Body": "<p>About inserting into vectors, the standard says in 23.2.4.3/1:</p>\n<blockquote>\n<p id=\"so_1387647_1387747_0\">[<code>insert()</code>] causes reallocation if the\n  new size is greater than the old\n  capacity. If no reallocation happens,\n  all the iterators and references\n  before the insertion point remain\n  valid.</p>\n</blockquote>\n<p>(Although this in fact this talks about <code>insert()</code>, Table 68 indicates that <code>a.push_back(x)</code> must be equivalent to <code>a.insert(a.end(), x)</code> for any vector <code>a</code> and value <code>x</code>.)  This means that if you <code>reserve()</code> enough memory beforehand, then (and only then) iterators and references are guaranteed not to be invalidated when you <code>insert()</code> or <code>push_back()</code> more items.</p>\n<p>Regarding removing items, 23.2.4.3/3 says:</p>\n<blockquote>\n<p id=\"so_1387647_1387747_1\">[<code>erase()</code>] invalidates all the\n  iterators and references after the\n  point of the erase.</p>\n</blockquote>\n<p>According to Table 68 and Table 67 respectively, <code>pop_back()</code> and <code>clear()</code> are equivalent to appropriate calls to <code>erase()</code>.</p>\n", "LastActivityDate": "2009-09-07T05:58:36.857"}, "1387676": {"ParentId": "1387647", "CommentCount": "0", "CreationDate": "2009-09-07T05:30:09.303", "OwnerUserId": "39742", "PostTypeId": "2", "Id": "1387676", "Score": "1", "Body": "<p>Vector will invalidate its iterator and references when it reallocates, which depends upon  its current capacity. Although the above code might work in some cases, you shouldn't rely on this as the reference might be invalidated after the push_back(4) call.</p>\n", "LastActivityDate": "2009-09-07T05:30:09.303"}, "1387647": {"CommentCount": "3", "ViewCount": "1751", "PostTypeId": "1", "LastEditorUserId": "40175", "CreationDate": "2009-09-07T05:18:26.180", "LastActivityDate": "2009-09-07T06:43:48.287", "Title": "Persistant references in STL Containers", "AcceptedAnswerId": "1387747", "LastEditDate": "2009-09-07T06:43:48.287", "Id": "1387647", "Score": "6", "Body": "<p>When using C++ STL containers, under what conditions must reference values be accessed?\nFor example are any references invalidated after the next function call to the container?</p>\n<pre><code>{\nstd::vector&lt;int&gt; vector;\nvector.push_back (1);\nvector.push_back (2);\nvector.push_back (3);\n\nvector[0] = 10;       //modifies 0'th element\n\nint&amp; ref = vector[0];\nref = 10;             //modifies 0'th element\n\nvector.push_back (4);\nref = 20;             //modifies 0'th element???\n\nvector.clear ();\nref = 30;             //clearly obsurd\n}\n</code></pre>\n<p>I understand that in most implementations of the stl this would work, but I'm interested in what the standard declaration requires.</p>\n<p>--edit:\nIm interested becuase I wanted to try out the STXXL (<a href=\"http://stxxl.sourceforge.net/\" rel=\"noreferrer\">http://stxxl.sourceforge.net/</a>) library for c++, but I realised that the references returned by the containers were not persistent over multiple reads, and hence not compatible without making changes (however superficial) to my existing stl code. An example:</p>\n<pre><code>{\nstd::vector&lt;int&gt; vector;\nvector.push_back (1);\nvector.push_back (2);\n\n\nint&amp; refA = vector[0];\nint&amp; refB = vector[1]; //refA is not gaurenteed to be valid anymore\n}\n</code></pre>\n<p>I just wanted to know if this meant that STXXL containers where not 100% compatible, or indeed if I had been using STL containers in an unsafe/implementation dependant way the whole time.</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "40175", "AnswerCount": "4"}});