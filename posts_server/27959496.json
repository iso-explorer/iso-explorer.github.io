post_cb({"27959698": {"Id": "27959698", "PostTypeId": "2", "Body": "<p>The implicit default constructor is not deleted, it's just not generated if you have other constructors. This has been the same since very old time.</p>\n<p>C++03 [class.ctor]/5:</p>\n<blockquote>\n<p id=\"so_27959496_27959698_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a default constructor is implicitly declared.</p>\n</blockquote>\n<p>C++11 [class.ctor]/5 (same in C++14):</p>\n<blockquote>\n<p id=\"so_27959496_27959698_1\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared as defaulted</p>\n</blockquote>\n", "LastActivityDate": "2015-01-15T08:52:06.877", "CommentCount": "0", "CreationDate": "2015-01-15T08:52:06.877", "ParentId": "27959496", "Score": "6", "OwnerUserId": "3959454"}, "bq_ids": {"n4140": {"so_27959496_27959698_0": {"length": 15, "quality": 0.9375, "section_id": 369}, "so_27959496_27959698_1": {"length": 18, "quality": 1.0, "section_id": 369}, "so_27959496_27959703_0": {"length": 18, "quality": 1.0, "section_id": 369}}, "n3337": {"so_27959496_27959698_0": {"length": 15, "quality": 0.9375, "section_id": 359}, "so_27959496_27959703_0": {"length": 18, "quality": 1.0, "section_id": 359}, "so_27959496_27959698_1": {"length": 18, "quality": 1.0, "section_id": 359}}, "n4659": {"so_27959496_27959698_0": {"length": 13, "quality": 0.8125, "section_id": 381}, "so_27959496_27959703_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 381}, "so_27959496_27959698_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 381}}}, "27959703": {"Id": "27959703", "PostTypeId": "2", "Body": "<p>The default constructor for <code>Foo</code> is not deleted, it is simply not defined. An explicitly defaulted/deleted constructor is a <em>user-declared</em> constructor, and this causes an implicit declaration of a default constructor to be inhibited. <code>Foo</code> has a <em>user-declared</em> constructor, the explicitly deleted copy constructor.</p>\n<p>From N3337, <em>\u00a712.1/5</em> <strong>[class.ctor]</strong></p>\n<blockquote>\n<p id=\"so_27959496_27959703_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. <strong>If there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared as defaulted</strong> (8.4). <code>...</code></p>\n</blockquote>\n<hr>\n<p>Note that if the default constructor was indeed deleted, the error message would probably have said as much. For instance, if I change the definition of <code>Foo</code> to </p>\n<pre><code>class Foo\n{\npublic:\n    int &amp;i;\n};\n</code></pre>\n<p>the presence of the data member of reference type implicitly deletes the default constructor. Now, <a href=\"http://coliru.stacked-crooked.com/a/eaa1af70f80dfbdc\" rel=\"nofollow\">clang and gcc produce the error messages</a></p>\n<blockquote>\n<p id=\"so_27959496_27959703_1\">error: call to implicitly-deleted default constructor of 'Foo'</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p id=\"so_27959496_27959703_2\">error: use of deleted function 'Foo::Foo()'</p>\n</blockquote>\n<p>Compare these to the error messages produced by your <a href=\"http://coliru.stacked-crooked.com/a/a0698e5c9b16db9a\" rel=\"nofollow\">original example</a></p>\n<blockquote>\n<p id=\"so_27959496_27959703_3\">error: no matching constructor for initialization of 'Foo'<br/>\n  error: no matching function for call to 'Foo::Foo()'</p>\n</blockquote>\n<hr>\n<p>To fix your example, you'll need to explicitly default the default constructor</p>\n<pre><code>Foo() = default;\n</code></pre>\n</hr></hr>", "LastEditorUserId": "241631", "LastActivityDate": "2015-01-15T09:14:35.930", "Score": "7", "CreationDate": "2015-01-15T08:52:21.303", "ParentId": "27959496", "CommentCount": "0", "OwnerUserId": "241631", "LastEditDate": "2015-01-15T09:14:35.930"}, "27959496": {"ViewCount": "757", "Body": "<p>I wanted to make my class uncopyable using C++11, before I privately inherited my class from <code>boost::noncopyable</code>. In C++11 I implemented following:</p>\n<pre><code>class Foo\n{\npublic:\n    Foo(const Foo&amp;) = delete;\n    Foo&amp; operator=(const Foo&amp;) = delete;\n};\n</code></pre>\n<p>With this change compilation of a client code (with VS 2013) gives me following error:</p>\n<pre><code>..\\main.cpp(9): error C2512: 'Foo' : no appropriate default constructor available\n</code></pre>\n<p>My client code is pretty simple:</p>\n<pre><code>int main()\n{\n    Foo foo;\n}\n</code></pre>\n<p>Is there any C++11 rule which implicitly <em>deletes default constructor</em> in my case ?</p>\n", "AcceptedAnswerId": "27959703", "Title": "Why C++11 implicitly deletes my default constructor?", "CreationDate": "2015-01-15T08:39:38.030", "Id": "27959496", "CommentCount": "2", "LastEditDate": "2015-01-15T08:54:14.993", "PostTypeId": "1", "LastEditorUserId": "137261", "LastActivityDate": "2015-01-15T09:14:35.930", "Score": "1", "OwnerUserId": "137261", "Tags": "<c++><c++11><default-constructor>", "AnswerCount": "2"}});