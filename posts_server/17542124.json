post_cb({"17542150": {"Id": "17542150", "PostTypeId": "2", "Body": "<p>Looks like an overflow. An <code>int</code> can't hold values larger than <code>INT_MAX</code>.</p>\n", "LastActivityDate": "2013-07-09T07:10:43.130", "CommentCount": "0", "CreationDate": "2013-07-09T07:10:43.130", "ParentId": "17542124", "Score": "1", "OwnerUserId": "15416"}, "17542202": {"Id": "17542202", "PostTypeId": "2", "Body": "<p>Your <code>int</code>s are probably 32-bit wide. If so, your arithmetic calculations produce signed integer overflow, which triggers <em>undefined behavior</em>.</p>\n", "LastActivityDate": "2013-07-09T07:13:18.353", "CommentCount": "0", "CreationDate": "2013-07-09T07:13:18.353", "ParentId": "17542124", "Score": "1", "OwnerUserId": "187690"}, "17542124": {"ViewCount": "120", "Body": "<p>I have the following line:</p>\n<pre><code>int iEndFrame = ((uByteStart + uByteCount-1) / g_iByteSize1FrameDecoded) + 1;\n</code></pre>\n<p>My values are:</p>\n<pre><code>uByteStart = 2147479808\nuByteCount = 8684\ng_iByteSize1FrameDecoded = 1920\n</code></pre>\n<p>However, iEndFrame becomes -1118477, and that can not be correct.</p>\n<p>Does anybody see my error?</p>\n<p>Thank you for the help!</p>\n<p>ps: \nThe declaration is:</p>\n<pre><code>void CApp::pCalcFrames(int uByteStart, int uByteCount, int &amp;uStartFrame, int &amp;uFramesToRead, int&amp; uOffset)\n</code></pre>\n", "AcceptedAnswerId": "17542364", "Title": "C++ strange value during calculation", "CreationDate": "2013-07-09T07:09:20.407", "Id": "17542124", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-07-09T07:27:35.953", "Score": "0", "OwnerUserId": "1390192", "Tags": "<c++><math>", "AnswerCount": "4"}, "17542364": {"Id": "17542364", "PostTypeId": "2", "Body": "<p>Like pointed in other answers, you have an integer overflow.</p>\n<p>It should be easily resolved in your case (assuming the final result can fit into <code>int</code>):</p>\n<p>Instead of:</p>\n<pre><code>int iEndFrame = ((uByteStart + uByteCount-1) / g_iByteSize1FrameDecoded) + 1;\n</code></pre>\n<p>do:</p>\n<pre><code>int iEndFrame = uByteStart / g_iByteSize1FrameDecoded + \n                uByteCount / g_iByteSize1FrameDecoded - 1 / g_iByteSize1FrameDecoded + 1;\n</code></pre>\n<p>Note the rounding though.</p>\n", "LastActivityDate": "2013-07-09T07:24:11.043", "CommentCount": "3", "CreationDate": "2013-07-09T07:24:11.043", "ParentId": "17542124", "Score": "1", "OwnerUserId": "1756636"}, "bq_ids": {"n4140": {"so_17542124_17542153_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5937}}, "n3337": {"so_17542124_17542153_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5709}}, "n4659": {"so_17542124_17542153_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7421}}}, "17542153": {"Id": "17542153", "PostTypeId": "2", "Body": "<p><code>uByteStart  + uByteCount</code> is wrapping around to negative since it's exceeding the size of an <code>int</code> on your platform (assume 32 bit).</p>\n<p>It's important not to do this as, technically, the behaviour is undefined so your code will not be portable:</p>\n<blockquote>\n<p id=\"so_17542124_17542153_0\">(\u00a75/5 C++03, \u00a75/4 C++11) If during the evaluation of an expression,\n  the result is not mathematically defined or not in the range of\n  representable values for its type, the behavior is undefined.</p>\n</blockquote>\n<p>One solution (but note it will not be as precise due to the truncation effects of successive integer divisions) would be to write</p>\n<pre><code>uByteStart / g_iByteSize1FrameDecoded + (uByteCount-1) / g_iByteSize1FrameDecoded + 1;\n</code></pre>\n<p>which reduces the size of the summation arguments.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2013-07-09T07:27:35.953", "Score": "2", "CreationDate": "2013-07-09T07:10:50.287", "ParentId": "17542124", "CommentCount": "0", "OwnerUserId": "2380830", "LastEditDate": "2013-07-09T07:27:35.953"}});