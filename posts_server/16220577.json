post_cb({"16220577": {"Tags": "<c++>", "ViewCount": "1135", "LastEditDate": "2013-04-25T17:15:05.467", "CreationDate": "2013-04-25T16:56:53.203", "LastEditorUserId": "937324", "Title": "Creating a struct and a class with the same name", "CommentCount": "10", "AcceptedAnswerId": "16220603", "Score": "1", "OwnerUserId": "937324", "Id": "16220577", "LastActivityDate": "2017-06-07T11:39:21.330", "Body": "<p><strong>Summary</strong>: What happens if you declare a <code>struct</code> and a <code>class</code> with the same name.</p>\n<p><strong>Details</strong>:</p>\n<p>I'm reviewing some code and I saw a warning like this:</p>\n<pre><code>warning: struct 'foo' was previously declared as a class\n</code></pre>\n<p>When compiling with clang there were also a couple of places where clang added notes saying:</p>\n<pre><code>foo.h:29:1: note: did you mean struct here?\nclass foo;\n^~~~~\nstruct\n</code></pre>\n<p>Obviously this is not a good coding practice to have a struct and a class with the same name.  It looks like what happened is the developer was writing his own class and used a name that was already in use in another file that he was including and he did not notice that.</p>\n<p>However, my question is will the compiler be able to tell the difference between the variables that were declared as <code>class foo</code> and the ones that were <code>struct foo</code>?</p>\n<p><strong>Edit</strong>:</p>\n<p>Actually what was happening was that the developer was using the <code>class foo</code> in a <code>class bar</code> that he had created.  I think that in the meantime the place where the <code>class foo</code> was declared had been changed to a <code>struct bar</code>.  So that was why the code was compiling.  So I guess the answer to my question is that <code>struct</code> and <code>class</code> are interchangeable when declaring objects.  Still I guess it's a good idea to use them consistently.</p>\n", "PostTypeId": "1", "AnswerCount": "4"}, "44408280": {"ParentId": "16220577", "Score": "0", "CreationDate": "2017-06-07T09:09:17.260", "LastActivityDate": "2017-06-07T11:39:21.330", "LastEditDate": "2017-06-07T11:39:21.330", "OwnerUserId": "2394284", "LastEditorUserId": "2394284", "Body": "<p>I would take @Alex Chamberlain and @James Kanze's comments as an answer:</p>\n<p>There is nothing wrong with the code because <strong>declaration != definition</strong>: You can declare a type as a <code>class</code>, <code>struct</code> or <code>union</code> and then use a different one for the definition. Multiple definitions shouldn't compile; multiple declarations however is just fine.</p>\n<p>The real problem: When you forward declare, you do NOT want to care whether it was a struct, class or union: In that context, that is an irrelevant implementation detail, that could even change later. So this warning is an artificial code smell. Still, you have to choose, and considering that <code>class foo;</code> has come to be <em>the way to forward declare</em>, I would go as far as to say <strong>the code is perfect</strong>.</p>\n<p>The author didn't <em>forget</em> to update the forward declaration; he isn't <em>supposed to</em> (whether he changed the implementation or not, he probably didn't).</p>\n", "Id": "44408280", "PostTypeId": "2", "CommentCount": "0"}, "16221939": {"ParentId": "16220577", "Score": "2", "CreationDate": "2013-04-25T18:21:27.967", "Id": "16221939", "OwnerUserId": "104427", "LastActivityDate": "2013-04-25T18:21:27.967", "Body": "<p>In general all identifiers must be unique. </p>\n<p>In particular, in Section 10.2.8 of the book \"The C++ Programming Language\", Bjarne Stroustrup states:</p>\n<blockquote>\n<p id=\"so_16220577_16221939_0\">By definition a <code>struct</code> is a class in which members are public by\n  default; that is</p>\n<pre><code>struct s { ... \n</code></pre>\n<p id=\"so_16220577_16221939_1\">is simply shorthand for</p>\n<pre><code>class s { public:...\n</code></pre>\n</blockquote>\n<p>There is no <em>underlying difference</em> between <code>struct</code> and <code>class</code>; the former is mere syntactic sugar.</p>\n<p>So, even if you could have identifiers with the same name (which, again, you cannot), there would be no distinction whatsoever between a struct and a class because they are the exact same thing.</p>\n", "PostTypeId": "2", "CommentCount": "0"}, "16220603": {"ParentId": "16220577", "Score": "7", "CreationDate": "2013-04-25T16:58:59.753", "Id": "16220603", "OwnerUserId": "649665", "LastActivityDate": "2013-04-25T16:58:59.753", "Body": "<p>The keywords <code>struct</code> and <code>class</code> are largely interchangeable.\nEven if you write <code>struct Foo</code>, you have created a <em>class</em> type\nwith the name of <code>Foo</code>.  And that name must be unique within its\nscope (with a special exception for reasons of C compatibility,\nbut which it is better to ignore). </p>\n", "PostTypeId": "2", "CommentCount": "2"}, "bq_ids": {"n4659": {"so_16220577_16221939_0": {"length": 4, "section_id": 6103, "quality": 0.6666666666666666}}}, "16220599": {"ParentId": "16220577", "Score": "1", "CreationDate": "2013-04-25T16:58:40.147", "Id": "16220599", "OwnerUserId": "48684", "LastActivityDate": "2013-04-25T16:58:40.147", "Body": "<p>Identifiers must be unique, no matter what if you are defining a class or a struct.</p>\n", "PostTypeId": "2", "CommentCount": "0"}});