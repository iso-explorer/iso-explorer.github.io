post_cb({"32624874": {"ParentId": "32624557", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><code>f</code> can only be found via argument-dependent name lookup (ADL). The second call compiles because the pointee of <code>p</code>, which is passed as an argument, is of type <code>C&lt;int&gt;</code> - this causes ADL to jump in and inspect otherwise invisible functions. In fact, the first overload of <code>f</code> can't be found at all, as there is no way of conveying an association to any specialization of <code>C</code>.</p>\n<p>Just see the quote right after yours, <a href=\"http://eel.is/c++draft/temp.inject#2\" rel=\"nofollow\">[temp.inject]/2</a>:</p>\n<blockquote>\n<p id=\"so_32624557_32624874_0\">As with non-template classes, the names of namespace-scope friend functions of a class template specialization\n  are <strong>not visible during an ordinary lookup unless explicitly declared at namespace scope (11.3)</strong>. Such names\n  may be found under the rules for associated classes (3.4.2). <sup>141</sup></p>\n<hr>\n<p id=\"so_32624557_32624874_1\"><sup>141)</sup> <strong>Friend declarations do not introduce new names into any scope, either when the template is declared or when it is\n  instantiated.</strong></p>\n</hr></blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-03-20T10:30:38.407", "Id": "32624874", "Score": "3", "CreationDate": "2015-09-17T07:36:13.783", "LastActivityDate": "2016-03-20T10:30:38.407"}, "32624813": {"ParentId": "32624557", "CommentCount": "0", "Body": "<p>The call to <code>f()</code> is in no way associated with class <code>C</code>, so its friends are not used in the overload resolution.</p>\n<p>In the other call, <code>f(*p)</code>, the parameter is of class type and therefore the class and the namespace of the class are checked for possible candidates. That way the compiler will find both <code>f</code> functions and use overload resolution to select the proper one.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "32624813", "Score": "1", "CreationDate": "2015-09-17T07:32:48.290", "LastActivityDate": "2015-09-17T07:32:48.290"}, "32624557": {"CommentCount": "1", "ViewCount": "76", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-09-17T07:17:26.467", "LastActivityDate": "2016-03-20T10:34:33.570", "Title": "friend function name visible in class template", "LastEditDate": "2016-03-20T10:34:33.570", "Id": "32624557", "Score": "2", "Body": "<p>Consider the following example:    </p>\n<pre><code>template &lt;typename T&gt;\nclass C\n{\n    public:\n        friend void f() {}\n        friend void f(C&lt;T&gt;) {}\n};\n\nC&lt;int&gt; c;\n\nvoid g(C&lt;int&gt;* p)\n{\n     f(); \n     f(*p);\n}\n</code></pre>\n<p>Compiling with GCC 5.2 throws the following compile error:</p>\n<pre><code>no matching function for call to 'f()'\n</code></pre>\n<p>But the standard says in 14.6.5:</p>\n<blockquote>\n<p id=\"so_32624557_32624557_0\">Friend classes or functions can be declared within a class template.\n  When a template is instantiated, the names of its friends are treated\n  as if the specialization had been <strong>explicitly declared</strong> at its point of instantiation.</p>\n</blockquote>\n<p>Why does this fail to compile? In GCC 3.4, it passes.</p>\n", "Tags": "<c++><templates><language-lawyer><friend><friend-function>", "OwnerUserId": "4333497", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32624557_32624874_1": {"section_id": 226, "quality": 0.8571428571428571, "length": 12}, "so_32624557_32624557_0": {"section_id": 225, "quality": 1.0, "length": 23}, "so_32624557_32624874_0": {"section_id": 226, "quality": 0.8928571428571429, "length": 25}}, "n3337": {"so_32624557_32624874_1": {"section_id": 219, "quality": 0.8571428571428571, "length": 12}, "so_32624557_32624557_0": {"section_id": 218, "quality": 1.0, "length": 23}, "so_32624557_32624874_0": {"section_id": 219, "quality": 0.8928571428571429, "length": 25}}, "n4659": {"so_32624557_32624874_1": {"section_id": 234, "quality": 0.8571428571428571, "length": 12}, "so_32624557_32624557_0": {"section_id": 233, "quality": 1.0, "length": 23}, "so_32624557_32624874_0": {"section_id": 234, "quality": 0.8928571428571429, "length": 25}}}});