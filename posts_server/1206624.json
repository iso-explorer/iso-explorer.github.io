post_cb({"1206624": {"CommentCount": "3", "AcceptedAnswerId": "1206687", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2009-07-30T13:30:36.073", "LastActivityDate": "2016-02-11T20:12:05.843", "LastEditDate": "2016-02-11T20:12:05.843", "ViewCount": "6334", "FavoriteCount": "1", "Title": "Differences in Macro ## concatenation operator between Visual-C++ and gcc", "Id": "1206624", "Score": "4", "Body": "<p>I'm having a macro like this ( not exactly, but function is quite equivalent):</p>\n<pre><code>#define STRUCTMEMBER(Member,Value) GlobalStructInstance. ## Member = Value\n...\nSTRUCTMEMBER(Item,1);\n</code></pre>\n<p>This works perfectly in Visual C++, but gcc 3.4.5 (MingGW) yield the following error:</p>\n<blockquote>\n<p id=\"so_1206624_1206624_0\">pasting \".\" and \"Item\" does not give a valid preprocessing token</p>\n</blockquote>\n<p>This also happens when I use the \"-&gt;\" operator. I didn't found hints on concatenation, that the usage of these operators is forbidden. </p>\n<p>Does anyone have an idea ? </p>\n", "Tags": "<visual-c++><gcc><c-preprocessor><stringification>", "OwnerUserId": "147807", "AnswerCount": "3"}, "1206794": {"ParentId": "1206624", "CommentCount": "0", "CreationDate": "2009-07-30T13:59:22.170", "OwnerUserId": "147842", "PostTypeId": "2", "Id": "1206794", "Score": "4", "Body": "<p>From the <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.3.3/cpp/Concatenation.html#Concatenation\" rel=\"nofollow noreferrer\">gcc c preprocessor docs</a>:</p>\n<blockquote>\n<p id=\"so_1206624_1206794_0\">However, two tokens that don't together form a valid token cannot be pasted together.</p>\n</blockquote>\n<p>structure.member is not a single token.</p>\n<p>In this case you do not need to use the ## (token concatenation) operator.  You can just remove it.  Here is an example tested with gcc 4.2.4 on linux:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#define STRUCTMEMBER(Member, Value) GlobalStructInstance.Member = Value\n\nstruct {\n    const char* member1;\n}GlobalStructInstance;\n\nint main(void)\n{\n\n    STRUCTMEMBER(member1, \"Hello!\");\n\n    printf(\"GlobalStructInstance.member1 = %s\\n\",\n           GlobalStructInstance.member1);\n\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2009-07-30T13:59:22.170"}, "1206687": {"ParentId": "1206624", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2009-07-30T13:41:18.073", "Score": "6", "LastEditorUserId": "13005", "LastEditDate": "2009-07-30T14:29:10.307", "Id": "1206687", "OwnerUserId": "13005", "Body": "<p>Maybe Visual C++ is pasting a couple of spaces together to make another space. Not that whitespaces are tokens, but it would allow your code to work.</p>\n<p><code>object.member</code> is not a token, it's three tokens, so you don't need token-pasting to implement the macro you describe. Just remove the '##' and it should work everywhere.</p>\n<p>[Edit: just checked, and the result of using ## to form something that isn't a valid token is undefined. So GCC is allowed to reject it and MSVC is allowed to ignore it and perform no paste, as far as I can tell.]</p>\n", "LastActivityDate": "2009-07-30T14:29:10.307"}, "bq_ids": {"n4140": {"so_1206624_1206939_0": {"section_id": 5321, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_1206624_1206939_0": {"section_id": 5118, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_1206624_1206939_0": {"section_id": 6742, "quality": 0.8947368421052632, "length": 17}}}, "1206939": {"ParentId": "1206624", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2009-07-30T14:25:11.857", "Score": "5", "LastEditorUserId": "12711", "LastEditDate": "2009-07-30T15:57:05.600", "Id": "1206939", "OwnerUserId": "12711", "Body": "<p>According to the C Standard, the result of the '<code>##</code>' preprocessing operator must be a 'preprocessing token' or the result is undefined (C99 6.10.3.3(3) - The ## operator).</p>\n<p>The list of preprocessing tokens is (C99 6.4(3) - Lexical elements):</p>\n<blockquote>\n<p id=\"so_1206624_1206939_0\">header names, identi\ufb01ers, preprocessing numbers, character constants, string literals, punctuators, and single non-white-space characters that do not lexically match the other preprocessing token categories.</p>\n</blockquote>\n<p>GCC lets you know that you're entering undefined territory.  MSVC is silently happy with the undefined result (that is what you'd pretty much expect to happen).</p>\n<p>Note that if you're not creating a single token anyway, then you don't need the token pasting operator. Generally (I'm sure there's probably an exception or two), 2 tokens separated by whitespace is equivalent to 2 tokens not separated by whitespace - as in your example.</p>\n", "LastActivityDate": "2009-07-30T15:57:05.600"}});