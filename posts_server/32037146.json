post_cb({"bq_ids": {"n4140": {"so_32037146_32037243_0": {"length": 9, "quality": 0.9, "section_id": 5846}, "so_32037146_32037250_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 179}, "so_32037146_32037250_0": {"length": 9, "quality": 0.9, "section_id": 5846}, "so_32037146_32037250_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 7056}}, "n3337": {"so_32037146_32037243_0": {"length": 9, "quality": 0.9, "section_id": 5616}, "so_32037146_32037250_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 173}, "so_32037146_32037250_0": {"length": 9, "quality": 0.9, "section_id": 5616}, "so_32037146_32037250_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6800}}, "n4659": {"so_32037146_32037243_0": {"length": 9, "quality": 0.9, "section_id": 7325}, "so_32037146_32037250_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 184}, "so_32037146_32037250_0": {"length": 9, "quality": 0.9, "section_id": 7325}, "so_32037146_32037250_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 8553}}}, "32037250": {"Id": "32037250", "PostTypeId": "2", "Body": "<pre><code>template&lt;typename B&gt;\nclass SubClass : public BaseClass&lt;SubClass&lt;B&gt;, B&gt;\n//                                        ^^^\n{\n\n};\n</code></pre>\n<p><code>SubClass</code> is an <em>injected name</em> that can be used to refer to <code>SubClass&lt;B&gt;</code> only in the scope of <code>SubClass</code>. Outside, it is the name of a <em>class template</em> itself (that it, it requires a template parameter list <code>&lt;&gt;</code> to form a type).</p>\n<p>\u00a7 9 [class]/p2:</p>\n<blockquote>\n<p id=\"so_32037146_32037250_0\">The <em>class-name</em> is also inserted into the scope of the class itself; this is known as the <em>injected-class-name</em>.</p>\n</blockquote>\n<p>\u00a7 3.3.2 [basic.scope.pdecl]/p8:</p>\n<blockquote>\n<p id=\"so_32037146_32037250_1\">The point of declaration for an <em>injected-class-name</em> (Clause 9) is immediately following the opening brace of\n  the class definition.</p>\n</blockquote>\n<p>\u00a7 14.6.1 [temp.local]/p1:</p>\n<blockquote>\n<p id=\"so_32037146_32037250_2\">Like normal (non-template) classes, class templates have an <em>injected-class-name</em> (Clause 9). The <em>injected-class-name</em> can be used as a <em>template-name</em> or a <em>type-name</em>. When it is used with a template-argument-list,\n  as a <em>template-argument</em> for a template <em>template-parameter</em>, or as the final identifier in the <em>elaborated-type-specifier</em> of a friend class template declaration, it refers to the class template itself. Otherwise, it is equivalent\n  to the <em>template-name</em> followed by the <em>template-parameters</em> of the class template enclosed in <code>&lt;&gt;</code>.</p>\n</blockquote>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2015-08-16T16:20:03.780", "Score": "5", "CreationDate": "2015-08-16T16:11:57.557", "ParentId": "32037146", "CommentCount": "1", "OwnerUserId": "3953764", "LastEditDate": "2015-08-16T16:20:03.780"}, "32037146": {"ViewCount": "66", "Body": "<p>I am trying to forward a template parameter to a parent class (from a subclass), however I am getting the following error when trying to do so;</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>test.cc:9:46: error: type/value mismatch at argument 1 in template parameter list for \u2018template&lt;class A, class B&gt; class BaseClass\u2019\n class SubClass : public BaseClass&lt;SubClass, B&gt; {\n                                              ^\ntest.cc:9:46: error:   expected a type, got \u2018SubClass\u2019\n</code></pre>\n<p>Here is the code I am trying to run;</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;cstdlib&gt;\n\ntemplate&lt;typename A, typename B&gt;\nclass BaseClass {\n\n};\n\ntemplate&lt;typename B&gt;\nclass SubClass : public BaseClass&lt;SubClass, B&gt; { // Trying to forward B to the second parameter\n\n};\n\nint main(void) {\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>I have tried prefixing <code>B</code> with <code>typename</code>, but I get the following error instead;</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>test.cc:9:55: error: type/value mismatch at argument 1 in template parameter list for \u2018template&lt;class A, class B&gt; class BaseClass\u2019\n class SubClass : public BaseClass&lt;SubClass, typename B&gt; {\n                                                       ^\ntest.cc:9:55: error:   expected a type, got \u2018SubClass\u2019\ntest.cc:9:55: error: template argument 2 is invalid\n</code></pre>\n", "AcceptedAnswerId": "32037250", "Title": "Forwarding template parameters", "CreationDate": "2015-08-16T16:02:48.777", "Id": "32037146", "CommentCount": "3", "LastEditDate": "2015-08-16T16:08:30.370", "PostTypeId": "1", "LastEditorUserId": "2664985", "LastActivityDate": "2015-08-16T16:20:03.780", "Score": "1", "OwnerUserId": "2664985", "Tags": "<c++><templates>", "AnswerCount": "2"}, "32037243": {"Id": "32037243", "PostTypeId": "2", "Body": "<p>You're trying to use the injected-class-name. However, </p>\n<blockquote>\n<p id=\"so_32037146_32037243_0\">The <em>class-name</em> is also inserted into the <strong>scope of the class</strong> itself;\n  this is known as the <em>injected-class-name</em>.</p>\n</blockquote>\n<p>The base-clause is not looking up names that are within the scope of the class. Hence  you have to supply the argument list yourself.</p>\n<pre><code>template&lt;typename B&gt;\nclass SubClass : public BaseClass&lt;SubClass&lt;B&gt;, B&gt; { /*..*/ };\n</code></pre>\n", "LastActivityDate": "2015-08-16T16:11:30.493", "CommentCount": "0", "CreationDate": "2015-08-16T16:11:30.493", "ParentId": "32037146", "Score": "2", "OwnerUserId": "3647361"}});