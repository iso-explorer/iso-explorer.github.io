post_cb({"bq_ids": {"n4140": {"so_24943665_24943751_3": {"length": 19, "quality": 1.0, "section_id": 435}, "so_24943665_24946007_0": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_24943665_24943751_2": {"length": 17, "quality": 0.6538461538461539, "section_id": 435}, "so_24943665_24943751_0": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_24943665_24943751_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 3274}}, "n3337": {"so_24943665_24943751_3": {"length": 17, "quality": 0.8947368421052632, "section_id": 427}, "so_24943665_24946007_0": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_24943665_24943751_2": {"length": 25, "quality": 0.9615384615384616, "section_id": 427}, "so_24943665_24943751_0": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_24943665_24943751_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 3145}}, "n4659": {"so_24943665_24943751_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 454}, "so_24943665_24946007_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_24943665_24943751_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_24943665_24943751_2": {"length": 17, "quality": 0.6538461538461539, "section_id": 454}, "so_24943665_24943751_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 4032}}}, "24943665": {"ViewCount": "1777", "Body": "<p>I have a code similar to this:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class AClass {\npublic:\n  struct AStruct { };\n\n  AClass(){}\n\nprivate:\n  const AStruct m_struct;\n};\n\nint main() {\n  AClass a;\n}\n</code></pre>\n<p>It throws this compilation error (with <a href=\"http://en.wikipedia.org/wiki/Clang\" rel=\"noreferrer\">Clang</a> <a href=\"http://en.wikipedia.org/wiki/LLVM\" rel=\"noreferrer\">LLVM</a> version 5.1):</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>error: constructor for 'AClass' must explicitly initialize \n       the const member 'm_struct'\n</code></pre>\n<p>If I specify a C++11 default constructor for <code>struct AStruct</code>, I get the same error:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>  struct AStruct {\n    AStruct() = default;\n  };\n</code></pre>\n<p>However, this is solved by writing a constructor with an empty body:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>  struct AStruct {\n    AStruct(){}  // fixed\n  };\n</code></pre>\n<p>Why do I need to specify an empty constructor? Isn't it automatically created with public access for structs?</p>\n<p>Why does not the C++11 default constructor solve the problem?</p>\n", "AcceptedAnswerId": "24943751", "Title": "Why is a constructor necessary in a const member struct?", "CreationDate": "2014-07-24T20:47:20.830", "Id": "24943665", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2014-07-25T11:46:59.920", "LastEditorUserId": "63550", "LastActivityDate": "2014-07-25T11:46:59.920", "Score": "35", "OwnerUserId": "2357837", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "24946007": {"Id": "24946007", "PostTypeId": "2", "Body": "<p>Stolen from @chris's answer we have this paragraph: \u00a78.5 [dcl.init]/7:</p>\n<blockquote>\n<p id=\"so_24943665_24946007_0\">If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>We can then construct a completely ridiculous case that illustrates this restriction:</p>\n<pre><code>struct Foo {};\nint main() {\n  const Foo f;\n}\n</code></pre>\n<p>which fails to compile in clang, as the standard dictates.  Your code is simply this, but as a member variable of another class/struct.</p>\n<p>We can even do this:</p>\n<pre><code>struct Foo {int x = 3;};\nint main() {\n  const Foo f;\n}\n</code></pre>\n<p>where all the data is obviously initialized.  This last example convinces me that this is a defect in the standard.</p>\n<p>The thought was probably something to do with POD types being uninitialized and <code>const</code>, but the wording blocks code that is unrelated.  Default constructors in modern C++ are often more than good enough, and forcing <code>Foo(){}</code> is poor form.</p>\n", "LastEditorUserId": "1774667", "LastActivityDate": "2014-07-25T00:14:07.457", "Score": "16", "CreationDate": "2014-07-25T00:06:47.183", "ParentId": "24943665", "CommentCount": "0", "OwnerUserId": "1774667", "LastEditDate": "2014-07-25T00:14:07.457"}, "24943751": {"Id": "24943751", "PostTypeId": "2", "Body": "<p>From \u00a78.5 [dcl.init]/7:</p>\n<blockquote>\n<p id=\"so_24943665_24943751_0\">If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>The default constructor of <code>AClass</code> default-initializes the <code>const</code> member (see below), so that member must have a user-provided default constructor. Using <code>= default</code> does not result in a user-provided default constructor, as can be seen in \u00a78.4.2 [dcl.fct.def.default]/4:</p>\n<blockquote>\n<p id=\"so_24943665_24943751_1\">A function is user-provided if it is user-declared and not explicitly defaulted or\n  deleted on its first declaration.</p>\n</blockquote>\n<hr>\n<p>The member is default-initialized per \u00a712.6.2 [class.base.init]/8:</p>\n<blockquote>\n<p id=\"so_24943665_24943751_2\">In a non-delegating constructor, if a given non-static data member or base class is not designated by a mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no ctor-initializer) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<p id=\"so_24943665_24943751_3\">\u2014 if the entity is a non-static data member that has a brace-or-equal-initializer , the entity is initialized as specified in 8.5;<br>\n  \u2014 otherwise, if the entity is an anonymous union or a variant member (9.5), no initialization is performed;<br>\n  \u2014 <strong>otherwise, the entity is default-initialized (8.5).</strong></br></br></p>\n</blockquote>\n</hr>", "LastEditorUserId": "962089", "LastActivityDate": "2014-07-24T21:02:26.697", "Score": "27", "CreationDate": "2014-07-24T20:53:07.543", "ParentId": "24943665", "CommentCount": "5", "OwnerUserId": "962089", "LastEditDate": "2014-07-24T21:02:26.697"}});