post_cb({"27781485": {"CommentCount": "4", "AcceptedAnswerId": "27781584", "PostTypeId": "1", "LastEditorUserId": "1756405", "CreationDate": "2015-01-05T14:21:58.073", "LastActivityDate": "2015-01-05T14:38:22.890", "LastEditDate": "2015-01-05T14:38:22.890", "ViewCount": "211", "FavoriteCount": "0", "Title": "Why can't RHR functions be overloaded?", "Id": "27781485", "Score": "7", "Body": "<p>I could see something like the following being useful:</p>\n<pre><code>class A {\npublic:\n   const vector&lt;int&gt;&amp; vals() const {\n       return val;\n   }\n\n   vector&lt;int&gt; vals() &amp;&amp; {\n       return std::move(val);\n   }\nprivate:\n    vector&lt;int&gt; val;\n}\n</code></pre>\n<p>But I get a compiler error with g++:</p>\n<pre><code>error: \u2018vector&lt;int&gt; A::vals() &amp;&amp;\u2019 cannot be overloaded\n</code></pre>\n<p>I would think you'd be able to do the same sort of overloading that you can with <code>const</code> functions. This would be less useful for the above accessor, and more useful for operators.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1756405", "AnswerCount": "1"}, "27781584": {"ParentId": "27781485", "CommentCount": "0", "CreationDate": "2015-01-05T14:27:27.847", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "27781584", "Score": "11", "Body": "<p>The reason is C++11 13.1/2:</p>\n<blockquote>\n<p id=\"so_27781485_27781584_0\">...</p>\n<ul>\n<li><p id=\"so_27781485_27781584_1\">Member function declarations with the same name and the same <em>parameter-type-list</em>- as well as member\n  function template declarations with the same name, the same <em>parameter-type-list,</em> and the same\n  template parameter lists cannot be overloaded if any of them, but not all, have a <em>ref-qualifier</em> (8.3.5).</p>\n<p id=\"so_27781485_27781584_2\">[ <em>Example:</em></p>\n<pre><code>class Y {\n  void h() &amp;;\n  void h() const &amp;; // OK\n  void h() &amp;&amp;;      // OK, all declarations have a ref-qualifier\n\n  void i() &amp;;\n  void i() const;   // ill-formed, prior declaration of i\n                    // has a ref-qualifier\n};\n</code></pre>\n<p id=\"so_27781485_27781584_3\"><em>\u2014end example</em> ]</p></li>\n</ul>\n</blockquote>\n<p>In ohter words, your example would work if you added a <em>ref-qualifier</em> to the <code>const</code> overload of <code>vals()</code>.</p>\n", "LastActivityDate": "2015-01-05T14:27:27.847"}, "bq_ids": {"n4140": {"so_27781485_27781584_1": {"section_id": 557, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_27781485_27781584_1": {"section_id": 548, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_27781485_27781584_1": {"section_id": 580, "quality": 0.9642857142857143, "length": 27}}}});