post_cb({"34523923": {"CommentCount": "3", "ViewCount": "177", "LastActivityDate": "2015-12-30T06:24:27.963", "Body": "<p>This line compiles when I use C++, but not C:</p>\n<p><code>gmtime(&amp;(*(time_t *)alloca(sizeof(time_t)) = time(NULL))); //make an lvalue with alloca</code></p>\n<p>I'm surprised by this difference. There is not even a warning for C++.</p>\n<p>When I specify <code>gcc -x c</code>, the message is:</p>\n<pre><code>playground.cpp:25:8: error: lvalue required as unary '&amp;' operand\n gmtime(&amp;(*(time_t *)alloca(sizeof(time_t)) = time(NULL)));\n        ^\n</code></pre>\n<p>Isn't the <code>&amp;</code> here just an address-of operator? Why is it different in C and C++?</p>\n<p>Although I can use compound literals in C, still is it possible to modify my syntax to make it work in both C &amp; C++?</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "34524091", "FavoriteCount": "1", "Title": "Compiles as C++ but not C (error: lvalue required as unary '&' operand)", "Id": "34523923", "Score": "5", "CreationDate": "2015-12-30T06:11:45.377", "Tags": "<c++><c><compiler-errors><lvalue><rvalue>", "OwnerUserId": "2419922", "AnswerCount": "1"}, "34524091": {"ParentId": "34523923", "CommentCount": "2", "Body": "<p>In C11 6.5.16/3:</p>\n<blockquote>\n<p id=\"so_34523923_34524091_0\">An assignment operator stores a value in the object designated by the left operand. An assignment expression has the value of the left operand after the assignment, <strong>but is not an lvalue</strong>.</p>\n</blockquote>\n<p>In C++14 5.17/1:</p>\n<blockquote>\n<p id=\"so_34523923_34524091_1\">The assignment operator (=) and the compound assignment operators all group right-to-left. All require a modifiable lvalue as their left operand <strong>and return an lvalue</strong> referring to the left operand.</p>\n</blockquote>\n<p>(Earlier versions of the language standards in each case specified the same thing).</p>\n<p>Since the address-of operator can only operate on an lvalue, the code is correct in C++ but not in C.</p>\n<hr>\n<p>Regarding the question \"Is it possible to modify my syntax to make it work in both C &amp; C++?\".  This is not a desirable goal; the two languages are different and you should decide what you're writing. This makes about as much sense as trying to stick to syntax that works in both C and Java.</p>\n<p>As suggested by others, you could write:</p>\n<pre><code>time_t t = time(NULL);\ngmtime(&amp;t);\n</code></pre>\n<p>which has the benefits over your original code of being:</p>\n<ul>\n<li>simpler, therefore easier to understand and maintain</li>\n<li>does not depend on non-standard <code>alloca</code> function</li>\n<li>does not have potential alignment violation</li>\n<li>uses no more memory and perhaps uses less</li>\n</ul>\n</hr>", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "34524091", "Score": "8", "CreationDate": "2015-12-30T06:24:27.963", "LastActivityDate": "2015-12-30T06:24:27.963"}, "bq_ids": {"n4140": {"so_34523923_34524091_1": {"section_id": 6173, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_34523923_34524091_1": {"section_id": 5934, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_34523923_34524091_1": {"section_id": 7675, "quality": 0.9523809523809523, "length": 20}, "so_34523923_34524091_0": {"section_id": 7675, "quality": 0.5294117647058824, "length": 9}}}});