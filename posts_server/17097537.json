post_cb({"17097537": {"CommentCount": "9", "AcceptedAnswerId": "17097580", "PostTypeId": "1", "LastEditorUserId": "2158784", "CreationDate": "2013-06-13T21:37:51.073", "LastActivityDate": "2013-06-14T08:42:11.337", "LastEditDate": "2013-06-14T07:42:43.047", "ViewCount": "9007", "FavoriteCount": "8", "Title": "Why is 'char' signed by default in C++?", "Id": "17097537", "Score": "26", "Body": "<p>Why is char by default in the range from -128 to 127 when it is supposed to represent a 'character' whose textual reprezentations are in the range from 0 to 255? In this sense I'd guess char should be unsigned by default, only if we intended to treat it only like 'numbers' we'd have to add 'signed' keyword. Therefore should I rather use unsigned char when I work with text files?</p>\n<p>Also I don't understand why <code>std::ofstream</code>'s read and write functions use <code>char</code> and not <code>unsigned char</code> when I need to work with binary files. There I don't care about signed-ness, do I? Moreover I've made successfuly a copy of a JPEG file using <code>signed char</code> like this:</p>\n<pre><code>//..open all streams..\nchar c;\nwhile(input.peek()!=EOF){\n    input.read(&amp;c,1);   //std::ifstream input;\n    output.write(&amp;c,1); //std::ofstream output;\n} \n//..close all streams..\n</code></pre>\n<p>Since it works I think the <code>read</code> reads an <code>unsigned byte</code>s (in image processing an <code>unsigned char</code> is commonly used) and sets <code>c</code> so that the value has some accidental signed interpretation in 2's complement. I need to create a histogram of values, but I get a runtime error because I use signed char as index. Isn't it rather stupid that I have to use some cast <code>uc = (unsigned char)c;?</code> when there could be at least a simple overload of read/write for unsigned char?</p>\n", "Tags": "<c++>", "OwnerUserId": "2158784", "AnswerCount": "2"}, "17097575": {"ParentId": "17097537", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Here is your answer from the standard:</p>\n<blockquote>\n<p id=\"so_17097537_17097575_0\">3.9.1 Fundamental types [basic.fundamental]</p>\n<p id=\"so_17097537_17097575_1\">1 Objects declared as characters char) shall be large enough to store any member of the implementation's basic character set. If a character from this set is stored in a character object, the integral value of that character object is equal to the value of the single character literal form of that character. It is implementation-defined whether a char object can hold negative values. Characters can be explicitly declared unsigned or signed. Plain char, signed char, and unsigned char are three distinct types. A char, a signed char, and an unsigned char occupy the same amount of storage and have the same alignment requirements (basic.types); that is, they have the same object representation. For character types, all bits of the object representation participate in the value representation. For unsigned character types, all possible bit patterns of the value representation represent numbers. These requirements do not hold for other types. <strong>In any particular implementation, a plain char object can take on either the same values as a signed char or an unsigned char; which one is implementation-defined.</strong></p>\n</blockquote>\n", "OwnerUserId": "103959", "LastEditorUserId": "743214", "LastEditDate": "2013-06-14T08:42:11.337", "Id": "17097575", "Score": "26", "CreationDate": "2013-06-13T21:39:54.080", "LastActivityDate": "2013-06-14T08:42:11.337"}, "17097580": {"ParentId": "17097537", "CommentCount": "1", "Body": "<p>It isn't.</p>\n<p>The signedness of a <code>char</code> that isn't either a <code>signed char</code> or <code>unsigned char</code> is implementation-defined. Many systems make it signed to match other types that <em>are</em> signed by default (like <code>int</code>), but it may be unsigned on some systems. (Say, if you pass <code>-funsigned-char</code> to GCC.)</p>\n", "OwnerUserId": "149341", "PostTypeId": "2", "Id": "17097580", "Score": "40", "CreationDate": "2013-06-13T21:40:11.143", "LastActivityDate": "2013-06-13T21:40:11.143"}, "bq_ids": {"n4140": {"so_17097537_17097575_1": {"section_id": 7210, "quality": 0.9469026548672567, "length": 107}}, "n3337": {"so_17097537_17097575_1": {"section_id": 6954, "quality": 0.9469026548672567, "length": 107}}, "n4659": {"so_17097537_17097575_1": {"section_id": 8719, "quality": 0.911504424778761, "length": 103}}}});