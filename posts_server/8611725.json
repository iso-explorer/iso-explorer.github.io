post_cb({"bq_ids": {"n4140": {"so_8611725_17692736_0": {"length": 7, "quality": 1.0, "section_id": 5404}, "so_8611725_17692736_1": {"length": 13, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_8611725_17692736_0": {"length": 7, "quality": 1.0, "section_id": 5199}, "so_8611725_17692736_1": {"length": 13, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_8611725_17692736_0": {"length": 7, "quality": 1.0, "section_id": 6853}, "so_8611725_17692736_1": {"length": 13, "quality": 1.0, "section_id": 6853}}}, "8611725": {"ViewCount": "3841", "Body": "<p>I have no idea why this is happening. The error I get is the following:</p>\n<pre><code>Error   2   error LNK2019: unresolved external symbol \"public: int __thiscall Graphics::GLMatrix::getColumnSize(void)\" (?getColumnSize@GLMatrix@Graphics@@QAEHXZ) referenced in function _SDL_main  C:\\Users\\holland\\Documents\\code\\c++\\projects\\OpenGL_01\\OpenGL_01\\main.obj\nError   3   error LNK2019: unresolved external symbol \"public: int __thiscall Graphics::GLMatrix::getRowSize(void)\" (?getRowSize@GLMatrix@Graphics@@QAEHXZ) referenced in function _SDL_main    C:\\Users\\holland\\Documents\\code\\c++\\projects\\OpenGL_01\\OpenGL_01\\main.obj\nError   4   error LNK1120: 2 unresolved externals   C:\\Users\\holland\\Documents\\code\\c++\\projects\\OpenGL_01\\Debug\\OpenGL_01.exe  \n</code></pre>\n<p>What isn't being linked is a <code>getRowSize()</code> and <code>getColumnSize()</code> function from my Matrix class. What am I doing wrong?</p>\n<p>So, what am I doing wrong here? I've been searching...searching every which way.</p>\n<p><strong>The Code</strong></p>\n<p>Header file:</p>\n<pre><code>#ifndef GLMATRIX_H\n#define GLMATRIX_H\n\n#pragma once\n\n#include &lt;array&gt;\n\n\nnamespace Graphics {\n\n    class GLMatrix\n    {\n    public:\n        GLMatrix(int sizeX, int sizeY);\n        ~GLMatrix();\n        void allocMatrix();\n        void addColumnI(int row, int column, long item);\n        void revertRowsByColumns(); /*changes the formula of r * c to c * r*/\n        GLMatrix &amp;operator *(float scalar); /*multiply by scalar*/\n        inline int getRowSize();\n        inline int getColumnSize();\n    private:\n        int _sizeX, _sizeY;\n        long** _pArray;\n    };\n\n}\n\n#endif //GLMATRIX_H\n</code></pre>\n<p>Source:</p>\n<pre><code>#include \"GLMatrix.h\"\n\nnamespace Graphics {\n\n    GLMatrix::GLMatrix(int sizeX, int sizeY)\n    {\n        _sizeX = sizeX; \n        _sizeY = sizeY;\n    }\n\n    GLMatrix::~GLMatrix()\n    {\n        delete _pArray;\n    }\n\n    void GLMatrix::addColumnI(int row, int column, long item) {\n\n    }\n\n    inline int GLMatrix::getRowSize() {\n        return _sizeX;\n    }\n\n    inline int GLMatrix::getColumnSize() {\n        return _sizeY;\n    }\n\n    void GLMatrix::allocMatrix() {\n\n        _pArray = new long*[_sizeX];\n\n        for (int i = 0; i &lt; _sizeX; ++i) {          \n            _pArray[i] = new long[_sizeY];\n        }\n\n    }\n\n    void GLMatrix::revertRowsByColumns() {\n\n        long** columns = new long*[_sizeY];\n\n        for (int col = 0; col &lt; _sizeY; ++col) {\n            columns[col] = new long[_sizeX];\n            memmove(\n                columns + col, \n                _pArray[_sizeX - col], \n                sizeof(_sizeX) - sizeof(col)\n            );\n        }   \n    }\n\n}\n</code></pre>\n<p>Main:</p>\n<pre><code>#include &lt;SDL.h&gt;\n#include \"GLMatrix.h\"\n\n\nint main(int argc, char* argv[]) {\n\n    //SDL_Init(SDL_INIT_EVERYTHING);\n\n    //matrix test\n\n    Graphics::GLMatrix* matrix = new Graphics::GLMatrix(3, 3);\n\n    int num_rows = matrix-&gt;getRowSize();\n    int num_columns = matrix-&gt;getColumnSize();\n    for (int row = 0; row &lt; num_rows; ++row) {\n\n    }\n\n    //SDL_Quit();\n\n    delete matrix;\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "11072936", "Title": "LNK2019 unresolved error for inline function", "CreationDate": "2011-12-23T02:40:34.760", "Id": "8611725", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-03-30T18:02:10.040", "LastEditorUserId": "472614", "LastActivityDate": "2014-03-30T18:04:11.580", "Score": "2", "OwnerUserId": "763053", "Tags": "<visual-c++><linker><compiler-errors><unresolved-external>", "AnswerCount": "3"}, "17692736": {"Id": "17692736", "PostTypeId": "2", "Body": "<h2>1. A translation unit is a single source file (\"Source\" and \"Main\" in your case) together with the included files.</h2>\n<h2>2. Inline functions</h2>\n<blockquote>\n<h3>C++11, \u00a73.2/3</h3>\n<p id=\"so_8611725_17692736_0\">\"[...] An inline function shall be defined in every translation unit in which it is odr-used. [...]\"</p>\n<h3>\u00a7 7.1.2/4</h3>\n<p id=\"so_8611725_17692736_1\">An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case (3.2). [...]</p>\n</blockquote>\n<p>Your \"Source\" translation unit has a definition of <code>getRowSize</code> and <code>getColumnSize</code>. Your \"Main\" translation unit has not! This is undefined behaviour since the compiler is not required to check for that.</p>\n<h2>LTCG/LTO</h2>\n<p>Parts of Vladimir's answer are correct. There is link time optimization (or link time code generation). But it doesn't serve the purpose of helping lazy programmers to save function-definitions for inline functions.</p>\n<p>LTCG/LTO is done to make all functions visible to the compiler at once, which in turn may decide to inline function which aren't visible to it under normal circumstances. Functions declared <code>inline</code> must per definition visible to the compiler at every point they are used at. Therefore, LTCG/LTO is not needed for (and should not be abused for the purpose of) solving missing inline link errors.</p>\n<p><hr>\n<sub>Just to make things clear: I'm well aware of the fact that this is an old question but it isn't answerd correctly yet and I just fell over it.</sub></hr></p>\n", "LastEditorUserId": "951423", "LastActivityDate": "2013-07-17T06:44:38.217", "Score": "1", "CreationDate": "2013-07-17T06:34:27.557", "ParentId": "8611725", "CommentCount": "0", "LastEditDate": "2013-07-17T06:44:38.217", "OwnerUserId": "951423"}, "8611754": {"Id": "8611754", "PostTypeId": "2", "Body": "<p>Inline functions must be defined in header files. (More specifically, the definition must be visible in every translation unit in which it is used.)</p>\n", "LastActivityDate": "2011-12-23T02:47:05.160", "Score": "1", "CreationDate": "2011-12-23T02:47:05.160", "ParentId": "8611725", "CommentCount": "3", "OwnerUserId": "902497"}, "11072936": {"Id": "11072936", "PostTypeId": "2", "Body": "<p>The common knowledge that inline function MUST be declared in the header file is no longer true. Since several years, most compilers implement a feature called Link Time Optimization (gcc) or Link Time Code Generation (VC) that save important information about inline functions (among others) allowing the linker to look at all the object files as \"one big happy translation unit\". Thus the linker can inline functions you put in a cpp file.</p>\n<p>Relevant links:\n<a href=\"http://msdn.microsoft.com/en-us/library/xbf3tbeh.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/xbf3tbeh.aspx</a>\n<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html</a> (search for -flto)</p>\n<p>Edit: It was apparently not understood from what I wrote earlier. This feature was not designed to save lazy programmers from declaring inline functions in each translation unit. But it does give you this byproduct that can cause problems.\nDo declare inline functions in the header file.</p>\n", "LastEditorUserId": "472614", "LastActivityDate": "2014-03-30T18:04:11.580", "Score": "1", "CreationDate": "2012-06-17T16:28:10.350", "ParentId": "8611725", "CommentCount": "4", "LastEditDate": "2014-03-30T18:04:11.580", "OwnerUserId": "1462019"}});