post_cb({"13783939": {"ParentId": "13783932", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You should also implement <code>operator!()</code> if you want a developer to be able to say <code>!myobject</code> where <code>myobject</code> is an instance of your class.</p>\n<p>Section 13.3.1.2 specifies that when applying a unary operator to an object of user-defined type</p>\n<blockquote>\n<p id=\"so_13783932_13783939_0\">the built-in candidates include all of the candidate operator functions de\ufb01ned\n  in 13.6 that, compared to the given operator,</p>\n<ul>\n<li>have the same operator name, and</li>\n<li>accept the same number of operands, and</li>\n<li>accept operand types to which the given operand or operands can be converted according to\n  13.3.3.1, and</li>\n<li>do not have the same parameter-type-list as any non-template non-member candidate.</li>\n</ul>\n</blockquote>\n<p>So the compiler may use the built-in <code>bool operator!(bool)</code> and your user-defined conversion, but only when your <code>operator bool()</code> is implicitly callable.  <code>operator bool()</code> is almost always made explicit to avoid its use in arbitrary integer contexts.  Multiple user-defined conversions could also create ambiguity among built-in candidate operators as chris mentioned in a comment.</p>\n<p>So it's best to just define <code>operator!()</code> yourself.</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "745903", "LastEditDate": "2012-12-09T02:02:37.223", "Id": "13783939", "Score": "6", "CreationDate": "2012-12-09T01:54:54.427", "LastActivityDate": "2012-12-09T02:02:37.223"}, "bq_ids": {"n4140": {"so_13783932_13783939_0": {"section_id": 584, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_13783932_13783939_0": {"section_id": 574, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_13783932_13783939_0": {"section_id": 607, "quality": 0.8333333333333334, "length": 10}}}, "13783932": {"CommentCount": "3", "AcceptedAnswerId": "13783939", "OwnerDisplayName": "user955249", "CreationDate": "2012-12-09T01:52:17.730", "LastActivityDate": "2012-12-09T02:02:37.223", "PostTypeId": "1", "ViewCount": "332", "FavoriteCount": "1", "Title": "C++ operator overloading, operator bool() and operator !()", "Id": "13783932", "Score": "3", "Body": "<p>If I have overloaded <code>operator bool()</code>. Do I need to overload <code>operator !()</code> too? When and why. Thanks for help.</p>\n", "Tags": "<c++><operator-overloading>", "AnswerCount": "1"}});