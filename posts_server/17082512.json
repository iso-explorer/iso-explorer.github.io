post_cb({"bq_ids": {"n4140": {"so_17082512_17082756_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5343}}, "n3337": {"so_17082512_17082756_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5140}}, "n4659": {"so_17082512_17082756_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6765}}}, "17082756": {"Id": "17082756", "PostTypeId": "2", "Body": "<p>You are using a multi-character literal <code>'ABC'</code> to initialize an <code>int</code>.</p>\n<p>How the multi-character literal (which is an uncommon way of using <code>''</code>) is interpreted is implementation-defined. Specifically, the order of the individual characters in the <code>int</code> interpretation is implementation-defined.</p>\n<p>There is no portable (i.e. implementation-independent) way to predict what this program will do in terms of the order of the characters in <code>'ABC'</code>.</p>\n<p>From the Standard (C++11, \u00a72.14.3/1):</p>\n<blockquote>\n<p id=\"so_17082512_17082756_0\">[...] A multicharacter literal has type <code>int</code> and implementation-defined value.</p>\n</blockquote>\n", "LastEditorUserId": "777186", "LastActivityDate": "2013-06-13T09:06:59.820", "Score": "14", "CreationDate": "2013-06-13T08:40:42.893", "ParentId": "17082512", "CommentCount": "3", "OwnerUserId": "777186", "LastEditDate": "2013-06-13T09:06:59.820"}, "17082512": {"ViewCount": "236", "Body": "<p>My expected output for u6.c was ABC but here I got CBA why is it so? Could you please shed some light on this with detailed explanation?</p>\n<pre><code>union mediatech\n{ \n int i; \n char c[5]; \n};\n\nint main(){\n mediatech u1 = {2};               // 1\n mediatech u2 = {'a'};             // 2\n mediatech u3 = {2.0};             // 3\n mediatech u6 = {'ABC'};           // 6\n\n cout&lt;&lt;\"\\nu6.i = \"&lt;&lt;u6.i&lt;&lt;\" u6.c=\"&lt;&lt;u6.c;  // o/p: u6.i=4276803  u6.c=CBA\n}\n</code></pre>\n", "AcceptedAnswerId": "17082842", "Title": "Why it is printing reverse string?", "CreationDate": "2013-06-13T08:26:12.550", "Id": "17082512", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-05-07T15:11:02.130", "LastEditorUserId": "718379", "LastActivityDate": "2014-05-07T15:11:02.130", "Score": "6", "OwnerUserId": "1866401", "Tags": "<c++><unions>", "AnswerCount": "2"}, "17082842": {"Id": "17082842", "PostTypeId": "2", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/Little_endian#Little-endian\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Little_endian#Little-endian</a></p>\n<p>You probably use processor with x86 architecture :), which is little-endian.</p>\n<p>It means that when you assign character to char array they go to memory in same order, but when you read that memory as integer, it goes to processor register in reverse order.</p>\n<p><strong>Edited</strong></p>\n<p>Sorry, the same but in reverse order, you initialize integer with 'ABC' multi-character literal, which goes from processor register to memory in reverse order and as char array it becomes \"CBA\"</p>\n", "LastEditorUserId": "1007109", "LastActivityDate": "2013-06-13T09:00:26.907", "Score": "5", "CreationDate": "2013-06-13T08:46:38.070", "ParentId": "17082512", "CommentCount": "0", "OwnerUserId": "1007109", "LastEditDate": "2013-06-13T09:00:26.907"}});