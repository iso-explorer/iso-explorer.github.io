post_cb({"15084225": {"ParentId": "15084149", "CommentCount": "2", "CreationDate": "2013-02-26T08:07:10.403", "OwnerUserId": "346804", "PostTypeId": "2", "Id": "15084225", "Score": "4", "Body": "<blockquote>\n<p id=\"so_15084149_15084225_0\">\u00a730.5.1.7: If any threads are blocked waiting for *this, unblocks one\n  of those threads.</p>\n</blockquote>\n<p>There is no guarantee that it's different threads, just that it's <strong>one</strong> thread. During the time between the two <code>notify_one</code> calls it is possible that the same thread that was waked with the first <code>notify_one</code> is re-blocked.</p>\n<p>e.g. In the following example it is not guaranteed whether thread 3 will wake or not (disregard spurious wakes for this example).</p>\n<pre><code>- thread 1:\n\n1    condvar.notify_one();\n- 3 and 4 could run here.\n2    condvar.notify_one();\n\n- thread 2:\n\n3    condvar.wait(/*...*/);\n4    condvar.wait(/*...*/);\n\n- thread 3:\n\n5    condvar.wait(/*...*/);\n</code></pre>\n", "LastActivityDate": "2013-02-26T08:07:10.403"}, "15085557": {"ParentId": "15084149", "CommentCount": "1", "CreationDate": "2013-02-26T09:32:49.983", "OwnerUserId": "13005", "PostTypeId": "2", "Id": "15085557", "Score": "0", "Body": "<p>I assume that <code>condvar_mutex</code> is the correct mutex for the condvar.</p>\n<p>It's not possible for both notifications to be delivered to the same thread. The reason is that you call <code>notify_one</code> twice <em>while holding the mutex</em>. So whichever thread is unblocked first, there's no way it can acquire the mutex, so it can't return from <code>wait</code>. It can't even throw an exception from <code>wait_for</code> without first acquiring the mutex.</p>\n<p>Since it can't get out of its wait, there's no way it can get back onto the list of waiters before the second <code>notify_one</code> is called.</p>\n<p>So, your code unblocks up to two threads blocked on the condvar, if there are that many. If there are fewer then the additional notifications have no effect.</p>\n", "LastActivityDate": "2013-02-26T09:32:49.983"}, "15084149": {"CommentCount": "2", "ViewCount": "868", "PostTypeId": "1", "ClosedDate": "2013-02-26T18:26:39.690", "LastEditorUserId": "1716695", "CreationDate": "2013-02-26T08:01:43.450", "LastActivityDate": "2013-02-26T09:32:49.983", "Title": "std::condition_variable::notify_one() called twice", "LastEditDate": "2013-02-26T08:28:41.220", "Id": "15084149", "Score": "2", "Body": "<p>How many waiting threads will wake up if I call std::condition_variable::notify_one() twice without any time interval, like this:</p>\n<pre><code>{\n    std::unique_lock&lt;std::mutex&gt; lock(condvar_mutex);\n\n    condvar.notify_one();\n    condvar.notify_one();\n}\n</code></pre>\n<p>Is there any guarantee that these notifications will be delivered to different threads, not the same thread several times?</p>\n", "Tags": "<c++><c++11><condition-variable>", "OwnerUserId": "1716695", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_15084149_15084225_0": {"section_id": 2993, "quality": 0.875, "length": 7}}, "n3337": {"so_15084149_15084225_0": {"section_id": 2863, "quality": 0.875, "length": 7}}, "n4659": {"so_15084149_15084225_0": {"section_id": 3752, "quality": 0.875, "length": 7}}}});