post_cb({"33988156": {"CommentCount": "0", "ViewCount": "92", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-11-29T21:09:51.840", "LastActivityDate": "2015-11-30T15:09:49.363", "Title": "Is it valid to use an id-expression representing a non-static data member in an unevalauted context in C++03", "LastEditDate": "2015-11-30T11:39:10.450", "Id": "33988156", "Score": "2", "Body": "<p>Given the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    int x ;\n} ;\n\nint main()\n{\n    std::cout &lt;&lt; sizeof( A::x ) &lt;&lt; \"\\n\" ;\n}\n</code></pre>\n<p>clang(<em><a href=\"http://melpon.org/wandbox/permlink/d0w2IudGv9TYreUn\" rel=\"nofollow\">see it live</a></em>) and gcc(<em><a href=\"http://melpon.org/wandbox/permlink/L8tiFgJu1mhExn2o\" rel=\"nofollow\">see it live</a></em>) disagree whether this is valid in C++03. clang provides the following diagnostic:</p>\n<pre><code>error: invalid use of non-static data member 'x'\nstd::cout &lt;&lt; sizeof( A::x ) &lt;&lt; \"\\n\" ;\n                     ~~~^\n</code></pre>\n<p>gcc generates no diagnostic for this example.</p>\n<p>Both clang and gcc accept this code in C++11 and greater. We can see this is valid in C++11 from the draft C++11 standard section <code>5.1.1</code> <em>[expr.prim.general]</em> which says:</p>\n<blockquote>\n<p id=\"so_33988156_33988156_0\">An id-expression that denotes a non-static data member or non-static member function of a class can only\n  be used:</p>\n</blockquote>\n<p>and includes the following bullet:</p>\n<blockquote id=\"so_33988156_33988156_1\">\n<ul>\n<li>if that id-expression denotes a non-static data member and it appears in an unevaluated operand</li>\n</ul>\n</blockquote>\n<p><a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\" rel=\"nofollow\">N1804</a> the earliest draft C++ standard available from 2005 does not seem to have similar wording.</p>\n<p>Is this valid in C++03, which compiler is correct? </p>\n", "Tags": "<c++><gcc><language-lawyer><c++03>", "OwnerUserId": "1708801", "AnswerCount": "1"}, "33988157": {"ParentId": "33988156", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-11-29T21:09:51.840", "Score": "4", "LastEditorUserId": "1708801", "LastEditDate": "2015-11-30T15:09:49.363", "Id": "33988157", "OwnerUserId": "1708801", "Body": "<p>This was not valid in C++03, although this changed via <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#613\" rel=\"nofollow\">defect report 613: Unevaluated uses of non-static class members</a> which says:</p>\n<blockquote>\n<p id=\"so_33988156_33988157_0\">According to 9.2 [class.mem] paragraph 9, the name of a non-static\n  data member can only be used with an object reference (explicit or\n  implied by the this pointer of a non-static member function) or to\n  form a pointer to member. This restriction applies even in the operand\n  of sizeof, although the operand is not evaluated and thus no object is\n  needed to perform the operation. Consequently, determining the size of\n  a non-static class member often requires a circumlocution like</p>\n<pre><code>sizeof ((C*) 0)-&gt;m\n</code></pre>\n<p id=\"so_33988156_33988157_1\">instead of the simpler and more obvious (but incorrect)</p>\n<pre><code>sizeof (C::m)\n</code></pre>\n<p id=\"so_33988156_33988157_2\">The CWG considered this question as part of issue 198 and decided at\n  that time to retain the restriction on consistency grounds: the rule\n  was viewed as applying uniformly to expressions, and making an\n  exception for sizeof would require introducing a special-purpose\n  \u201cwart.\u201d</p>\n</blockquote>\n<p>and we can find the wording in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html\" rel=\"nofollow\">N2253</a>, which amongst other things introduced the term <em>unevaluated operand</em>.</p>\n<p>We can see that gcc decided to apply this back to C++03 since it was changed through a defect report. This is document in the bug report <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65890\" rel=\"nofollow\">[C++03]sizeof(qualified-id) accepted when the operand denotes a non-static member</a> which has the following example:</p>\n<pre><code>struct Tag { int m; };\n\nint main()\n{\n    sizeof(Tag::m);\n}\n</code></pre>\n<p>and says:</p>\n<blockquote>\n<p id=\"so_33988156_33988157_3\">According to ISO C++03 5.1/10, this is not well-formed. (But C++11\n  should work.) However, G++ 4.9.1 wrongly accepted it even with\n  -std=c++03 -pedantic-errors.</p>\n</blockquote>\n<p>The conclusion is that this is not a bug:</p>\n<blockquote>\n<p id=\"so_33988156_33988157_4\">It has always been the policy of G++ (and other compilers!) to\n  incorporate DRs into past standard modes, and that is clearly\n  documented in the manual:</p>\n<pre><code>c++98\nc++03\n  The 1998 ISO C++ standard plus the 2003 technical corrigendum\n  and some additional defect reports.\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n<p id=\"so_33988156_33988157_5\">So this is not a bug and there is no documentation issue.</p>\n</blockquote>\n<p>This defect has CD1 <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#Issue%20Status\" rel=\"nofollow\">status</a> and in general from my experience defects are applied to the previous version of the standard as well. Not clear if we can say clang is incorrect not to apply it back though, although it would make for more consistent behavior.</p>\n", "LastActivityDate": "2015-11-30T15:09:49.363"}, "bq_ids": {"n4140": {"so_33988156_33988156_0": {"section_id": 5959, "quality": 1.0, "length": 10}, "so_33988156_33988156_1": {"section_id": 5959, "quality": 1.0, "length": 8}}, "n3337": {"so_33988156_33988156_0": {"section_id": 5728, "quality": 1.0, "length": 10}, "so_33988156_33988156_1": {"section_id": 5728, "quality": 1.0, "length": 8}}, "n4659": {"so_33988156_33988156_0": {"section_id": 7440, "quality": 1.0, "length": 10}, "so_33988156_33988156_1": {"section_id": 7440, "quality": 1.0, "length": 8}}}});