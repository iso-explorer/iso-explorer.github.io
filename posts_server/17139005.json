post_cb({"17139076": {"ParentId": "17139005", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I don't get your interpretation. The quoted text applies to the quoted example properly. As long as you include it like that in all TUs. To violate ODR you must break something of the text:</p>\n<pre><code>constexpr double foo = 10; // type\nconstexpr int foo = ret_10(); // non-const init\nconstexpr int foo = 42; // value\n</code></pre>\n<p>And to break ODR-usage I think you must take its address.</p>\n", "OwnerUserId": "2422194", "LastEditorUserId": "2422194", "LastEditDate": "2013-06-17T01:03:44.733", "Id": "17139076", "Score": "0", "CreationDate": "2013-06-17T00:42:15.900", "LastActivityDate": "2013-06-17T01:03:44.733"}, "17139136": {"ParentId": "17139005", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As for the multiple definitions of <code>foo</code>, I don't think <code>foo</code> is odr-used because it satisfies the requirements for appearing in a constant expression, as per 3.2.3:</p>\n<blockquote>\n<p id=\"so_17139005_17139136_0\">A variable x whose name appears as a potentially-evaluated expression ex is odr-used unless x is an object that satisfies the requirements for appearing in a constant expression</p>\n</blockquote>\n<p>Therefore as it is not odr-used the odr-rule does not apply to it, 3.2.4:</p>\n<blockquote>\n<p id=\"so_17139005_17139136_1\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used\n  in that program</p>\n</blockquote>\n<p>As for the two different definitions of <code>widget</code>, and whether they are sufficiently similar according to 3.2.6.  The answer is yes because N3485 3.2.6:</p>\n<blockquote>\n<p id=\"so_17139005_17139136_2\">a name can refer to a const object [yes, constexpr is const] with internal [constexpr is internal] or no linkage if the object has the same literal type [yes, both int] in all definitions of D, and the object is initialized with a constant expression [yes, 10], and the value (but not the address) of the object is used, and the object has the same value [yes, 10] in all definitions of D</p>\n</blockquote>\n<p>So even though the name <code>foo</code> is referring to two different entities in the two different TUs, these two entities satisfy the given requirements.</p>\n<p>(In practice it works because the compiler will layout the two classes identically, therefore the generated code from the two TUs will be compatible.)</p>\n", "OwnerUserId": "1131467", "LastEditorUserId": "1131467", "LastEditDate": "2013-06-17T01:37:26.303", "Id": "17139136", "Score": "1", "CreationDate": "2013-06-17T00:54:20.730", "LastActivityDate": "2013-06-17T01:37:26.303"}, "17139005": {"CommentCount": "0", "AcceptedAnswerId": "17139163", "CreationDate": "2013-06-17T00:26:41.030", "LastActivityDate": "2013-06-17T01:37:26.303", "PostTypeId": "1", "ViewCount": "1070", "FavoriteCount": "1", "Title": "constexpr and ODR", "Id": "17139005", "Score": "5", "Body": "<p>If we have a header file <code>widget.hpp</code> with the contents below:</p>\n<pre><code>constexpr int foo = 10;\n\nstruct widget\n{\n    int bars[foo];\n};\n</code></pre>\n<p>...and we have two translation units generated from two source files which both only include <code>widget.hpp</code>, does this violate the one definition rule (more specifically, does the use of <code>foo</code> violate the one definition rule)?</p>\n<p><code>foo</code> has internal linkage but it is also a constant expression. From my reading of 3.2.6 in the C++11 standard, which I will quote below, this is well-formed if requirement #2 is not referring solely to static data members.</p>\n<hr>\n<p>3.2.6 requirement #2:</p>\n<blockquote>\n<p id=\"so_17139005_17139005_0\">in each definition of D, corresponding names, looked up according to\n  3.4, shall refer to an entity defined within the definition of D, or shall refer to the same entity, after overload resolution (13.3) and\n  after matching of partial template specialization (14.8.3), <strong>except\n  that a name can refer to a non-volatile const object with internal or\n  no linkage if the object has the same literal type in all definitions\n  of D, and the object is initialized with a constant expression (5.19),\n  and the object is not odr-used, and the object has the same value in\n  all definitions of D</strong></p>\n</blockquote>\n</hr>", "Tags": "<c++><c++11><constexpr><one-definition-rule>", "OwnerUserId": "2491746", "AnswerCount": "3"}, "17139163": {"ParentId": "17139005", "CommentCount": "0", "Body": "<p>The only place I can see any room for question about your case would be whether or not your use of <code>foo</code> qualifies as <code>odr-used</code> or not. Perhaps the easiest way to clarify at least the intent would be to quote the corresponding section of n1337 (immediately followed the official standard, mostly cleaning up some phrasing, such as in this case):</p>\n<blockquote>\n<p id=\"so_17139005_17139163_0\">[...] a name can refer to a const object with internal or no linkage if the object has the same literal type in all definitions of D, and the object is initialized with a constant expression (5.19), and the value (but not the address) of the object is used, and the object has the same value in all definitions of D;</p>\n</blockquote>\n<p>Your use clearly meets all these requirements.</p>\n<ol>\n<li><code>foo</code> has type <code>int</code> in every case.</li>\n<li><code>foo</code> is initialized with a constant expression.</li>\n<li>you use only the value, not the address, of <code>foo</code>.</li>\n<li><code>foo</code> has the same value in all defintions of <code>widget</code>.</li>\n</ol>\n<p>That said, you'd probably be better off changing <code>foos</code> to a <code>std::vector</code> instead:</p>\n<pre><code>struct widget { \n    std::vector&lt;int&gt; bars;\n\n    widget : bars(foo) {}\n};\n</code></pre>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "17139163", "Score": "3", "CreationDate": "2013-06-17T00:58:48.913", "LastActivityDate": "2013-06-17T00:58:48.913"}, "bq_ids": {"n4140": {"so_17139005_17139005_0": {"section_id": 7043, "quality": 0.9411764705882353, "length": 48}, "so_17139005_17139163_0": {"section_id": 7043, "quality": 0.7407407407407407, "length": 20}, "so_17139005_17139136_0": {"section_id": 7040, "quality": 0.6923076923076923, "length": 9}, "so_17139005_17139136_2": {"section_id": 7043, "quality": 0.5555555555555556, "length": 20}, "so_17139005_17139136_1": {"section_id": 7041, "quality": 1.0, "length": 10}}, "n3337": {"so_17139005_17139005_0": {"section_id": 6788, "quality": 0.9019607843137255, "length": 46}, "so_17139005_17139163_0": {"section_id": 6788, "quality": 0.9629629629629629, "length": 26}, "so_17139005_17139136_0": {"section_id": 6785, "quality": 0.9230769230769231, "length": 12}, "so_17139005_17139136_2": {"section_id": 6788, "quality": 0.7222222222222222, "length": 26}, "so_17139005_17139136_1": {"section_id": 6786, "quality": 1.0, "length": 10}}, "n4659": {"so_17139005_17139005_0": {"section_id": 8540, "quality": 0.8431372549019608, "length": 43}, "so_17139005_17139163_0": {"section_id": 8540, "quality": 0.7407407407407407, "length": 20}, "so_17139005_17139136_0": {"section_id": 8537, "quality": 0.6923076923076923, "length": 9}, "so_17139005_17139136_2": {"section_id": 8540, "quality": 0.5555555555555556, "length": 20}, "so_17139005_17139136_1": {"section_id": 8538, "quality": 1.0, "length": 10}}}});