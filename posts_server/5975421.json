post_cb({"5975757": {"ParentId": "5975421", "CommentCount": "1", "Body": "<p>There seems to be <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#494\" rel=\"nofollow\">some defect in the original standard C++03 </a></p>\n<p>As per C++03 [pre CD1] your code should not compile because the wording and the example says that private members of a class(granting friendship) cannot be accessed in the nested member of the friend class.</p>\n<p>C++11 gives the same example as in C++03. The only change made to that example is that the nested member(class) of the friend class is able to access the private member of the class granting friendship.</p>\n<blockquote>\n<p id=\"so_5975421_5975757_0\">Declaring a class to be a friend implies that the names of private and protected members from the class granting friendship can be accessed in the base-specifiers and member declarations of the befriended class.</p>\n</blockquote>\n<p>Also look at <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#45\" rel=\"nofollow\">issue #45</a></p>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "5975757", "Score": "4", "CreationDate": "2011-05-12T09:10:37.907", "LastActivityDate": "2011-05-12T09:10:37.907"}, "5975421": {"CommentCount": "4", "AcceptedAnswerId": "5975568", "CreationDate": "2011-05-12T08:37:52.860", "LastActivityDate": "2011-06-10T18:58:56.937", "PostTypeId": "1", "ViewCount": "1127", "FavoriteCount": "3", "Title": "Does \"friend\"ing a class extend to classes declared within that class?", "Id": "5975421", "Score": "14", "Body": "<p>I have the following code where class A declares class B as friend. Should class C, declared within class B, be able to view private declarations/members of class A?</p>\n<p>It compiles without error with CL version 16 (Visual Studio 2010), but gcc g++ version 4.1.1 gives the error \"typedef int A::T is private within this context\".</p>\n<p>The same behaviour occurs with functions calls as typedefs (which is how I discovered the difference).</p>\n<pre><code>class A {\n   friend class B;\n   typedef int T;\n};\n\nclass B {\n   A::T t; // ok\n   typedef A::T U; // ok\n   class C {\n      U u; // ok\n      A::T v; // compile error on gcc\n   };\n};\n</code></pre>\n<p>I have seearched briefly, but not been able to find the right search terms. I've yet to read through the standard. Are there any previous questions on the subject, or mentioned in the C++ FAQ? Which behaviour is imlpied by the standard, if either?</p>\n", "Tags": "<c++><friend>", "OwnerUserId": "138170", "AnswerCount": "3"}, "5975568": {"ParentId": "5975421", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From standard docs., <code>$11.4.2</code></p>\n<blockquote>\n<p id=\"so_5975421_5975568_0\">Declaring a class to be a friend implies that the names of private and protected members from the class granting friendship\n  <strong>can be accessed in the base-specifier s and member declarations</strong> of the befriended class.</p>\n</blockquote>\n<p>An example from the standard docs., themselves,</p>\n<pre><code>class A {\nclass B { };\nfriend class X;\n};\nstruct X : A::B { // OK: A::B accessible to friend\n    A::B mx; // OK: A::B accessible to member of friend\n    class Y {\n        A::B my; // OK: A::B accessible to nested member of friend\n    };\n};\n</code></pre>\n<p>Hence it should work without any error.</p>\n", "OwnerUserId": "249490", "LastEditorUserId": "165520", "LastEditDate": "2011-05-12T09:21:50.780", "Id": "5975568", "Score": "9", "CreationDate": "2011-05-12T08:50:55.350", "LastActivityDate": "2011-05-12T09:21:50.780"}, "bq_ids": {"n4140": {"so_5975421_5975568_0": {"section_id": 6685, "quality": 0.9444444444444444, "length": 17}, "so_5975421_5975757_0": {"section_id": 6685, "quality": 1.0, "length": 18}}, "n3337": {"so_5975421_5975568_0": {"section_id": 6440, "quality": 0.9444444444444444, "length": 17}, "so_5975421_5975757_0": {"section_id": 6440, "quality": 1.0, "length": 18}}, "n4659": {"so_5975421_5975568_0": {"section_id": 8160, "quality": 0.9444444444444444, "length": 17}, "so_5975421_5975757_0": {"section_id": 8160, "quality": 1.0, "length": 18}}}, "6310886": {"ParentId": "5975421", "CommentCount": "0", "Body": "<p>Prasoon mentioned issue #45... this behavior changes in C++0x.  The old behavior was (11.7 <code>[class.access.nest]</code> paragraph 1):</p>\n<blockquote>\n<p id=\"so_5975421_6310886_0\">The members of a nested class have no special access to members of an enclosing class, nor to classes or functions that have granted friendship to an enclosing class.</p>\n</blockquote>\n<p>This clearly states that gcc 4.1 is correct according to the C++03 rules.  gcc 4.5 and MSVC2010 are using the C++0x rules.</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "6310886", "Score": "0", "CreationDate": "2011-06-10T18:58:56.937", "LastActivityDate": "2011-06-10T18:58:56.937"}});