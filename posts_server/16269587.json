post_cb({"20875790": {"CommentCount": "1", "Body": "<p>This is one of those cases where trying out code in multiple compilers may have helped you realize that using <code>const auto</code> with a trailing return type is an error. There are several <a href=\"https://stackoverflow.com/questions/3916000/online-c-compiler-and-evaluator\">online C++ compilers</a>. If you had tried out this code in <code>clang</code> you would have received the following error(<em><a href=\"http://coliru.stacked-crooked.com/a/a3447998409bd632\" rel=\"nofollow noreferrer\">live example</a></em>):</p>\n<blockquote>\n<p id=\"so_16269587_20875790_0\">error: function with trailing return type must specify return type 'auto', not 'const auto'</p>\n</blockquote>\n<p>The relevant section in the draft C++ standard is section <code>8.3.5</code> <em>Functions</em> paragraph <em>2</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_16269587_20875790_1\">In a declaration T D where D has the form</p>\n<pre><code>D1 ( parameter-declaration-clause ) cv-qualifier-seqopt\n  ref-qualifieropt exception-specificationopt attribute-specifier-seqopt\n    trailing-return-type\n</code></pre>\n<p id=\"so_16269587_20875790_2\">[...]<strong>T shall be the single type-specifier auto</strong>.[...]</p>\n</blockquote>\n", "LastEditorUserId": "-1", "PostTypeId": "2", "LastEditDate": "2017-05-23T12:11:34.717", "ParentId": "16269587", "Id": "20875790", "LastActivityDate": "2014-01-02T03:18:32.733", "Score": "1", "CreationDate": "2014-01-02T03:18:32.733", "OwnerUserId": "1708801"}, "16269587": {"CreationDate": "2013-04-29T00:27:26.490", "ViewCount": "132", "Id": "16269587", "AcceptedAnswerId": "20875617", "Score": "3", "Title": "Compiler crashes with const auto", "LastEditorUserId": "1708801", "CommentCount": "5", "Body": "<p>I am using <code>Visual Studio 2010</code> with SP1. The following code crashes the compiler:</p>\n<pre><code>template &lt;typename T&gt;\nclass MyClass\n{\npublic:\n  typedef int my_int;\n\n  const my_int foo();\n\n};\n\ntemplate &lt;typename T&gt;\nconst auto MyClass&lt;T&gt;::foo() -&gt; my_int\n// auto MyClass&lt;T&gt;::foo() -&gt; const my_int // THIS WORKS!\n{\n  return my_int(1);\n}\n\nint main()\n{\n  MyClass&lt;int&gt; m;\n  m.foo();\n}\n</code></pre>\n<p>Note the commented line that fixes the issue. Am I using <code>auto</code> properly here (i.e. <code>const</code> qualifier on <code>auto</code>)? Is the workaround essentially the exact same thing (i.e. can I safely use it until the compiler's bug is fixed)? And lastly, am I the only one experiencing this issue, if not, I will file a bug report.</p>\n<p><strong>NOTE:</strong> I realize that const here makes little sense. I was trying to replicate the bug in a smaller project where in the actual project I am returning a <code>const</code> reference to an object. </p>\n", "Tags": "<c++><visual-studio-2010><auto>", "LastEditDate": "2014-01-02T02:43:30.257", "LastActivityDate": "2014-01-02T03:18:32.733", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "368599"}, "bq_ids": {"n4140": {"so_16269587_20875790_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 5451}}}, "20875617": {"CommentCount": "4", "Body": "<p>The code is ill-formed in C++11:  if there is a trailing return type, then the \"normal\" return type must be <code>auto</code> (the C++11 specification states at 8.3.5[dcl.fct]/2 that \"T shall be the single <em>type-specifier</em> <code>auto</code>,\" where <code>T</code> is the \"type\" that appears before the name of the function). </p>\n<p>All compiler crashes are compiler bugs, so it is a bug that the Visual C++ 2010 compiler crashes when compiling your program.  This bug has been fixed, though; Visual C++ 2013 rejects the program with a proper compilation error.</p>\n", "PostTypeId": "2", "ParentId": "16269587", "Id": "20875617", "LastActivityDate": "2014-01-02T02:52:32.577", "Score": "3", "CreationDate": "2014-01-02T02:52:32.577", "OwnerUserId": "151292"}});