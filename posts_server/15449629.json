post_cb({"15449689": {"Id": "15449689", "PostTypeId": "2", "Body": "<p>The relevant rules are clearly defined in the standard, There are a number of rules but simply said and put the ones that apply to your example are:    </p>\n<ul>\n<li><code>throw</code> without a <code>catch</code> results in call to <code>terminate</code> or the function set for it.  </li>\n<li>When a exception thrown does not match the exception specification results in a call to  <code>unexpected</code> or the function set for it.</li>\n</ul>\n<hr>\n<p><strong>15.1 Throwing an exception</strong><br>\n<strong>Para 8:</strong></br></p>\n<blockquote>\n<p id=\"so_15449629_15449689_0\">If no exception is presently being handled, executing a throw-expression with no operand calls\n  terminate() (15.5.1).</p>\n</blockquote>\n<p><strong>15.4 Exception specifications</strong><br>\n<strong>Para 8:</strong></br></p>\n<blockquote>\n<p id=\"so_15449629_15449689_1\">Whenever an exception is thrown and the search for a handler (15.3) encounters the outermost block of a\n  function with an exception-specification, the function unexpected() is called (15.5.2) if the exceptionspecification\n  does not allow the exception</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_15449629_15449689_2\"><strong>Why does your program call <code>abort</code>?</strong> </p>\n</blockquote>\n<p>Your program has an undefined behavior. It is compliant with the fact that you set the <code>terminate_handler</code> appropriately and as you notice the program does result in call to <code>f()</code> but the required behavior for a <code>terminate_handler</code> function is:      </p>\n<p><strong>C++03 Standard 18.6.3.1.2:</strong></p>\n<blockquote>\n<p id=\"so_15449629_15449689_3\">A terminate_handler shall terminate execution of the program without returning\n  to the caller.</p>\n</blockquote>\n<p>Your <code>terminate_handler</code> function <code>f</code> does not satisfy this condition and hence results in Undefined behavior and technically it is possible that you can get any behavior, your implementation chooses to call <code>abort</code> in this situation. Nothing stops it from doing so.</p>\n</hr></hr>", "LastEditorUserId": "452307", "LastActivityDate": "2013-03-16T13:52:56.460", "Score": "0", "CreationDate": "2013-03-16T13:11:37.543", "ParentId": "15449629", "CommentCount": "8", "OwnerUserId": "452307", "LastEditDate": "2013-03-16T13:52:56.460"}, "bq_ids": {"n4140": {"so_15449629_15449692_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 3382}, "so_15449629_15449692_3": {"length": 9, "quality": 0.9, "section_id": 3382}, "so_15449629_15449692_5": {"length": 9, "quality": 0.9, "section_id": 3382}, "so_15449629_15449692_6": {"length": 11, "quality": 0.9166666666666666, "section_id": 3382}, "so_15449629_15449692_14": {"length": 12, "quality": 0.75, "section_id": 3382}, "so_15449629_15449692_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 3382}, "so_15449629_15449692_12": {"length": 7, "quality": 0.875, "section_id": 3382}, "so_15449629_15449689_3": {"length": 5, "quality": 1.0, "section_id": 6923}, "so_15449629_15449692_13": {"length": 8, "quality": 0.8888888888888888, "section_id": 3382}, "so_15449629_15449692_10": {"length": 9, "quality": 0.6923076923076923, "section_id": 3382}, "so_15449629_15449692_15": {"length": 4, "quality": 0.8, "section_id": 3383}, "so_15449629_15449692_8": {"length": 9, "quality": 0.9, "section_id": 3382}, "so_15449629_15449692_2": {"length": 19, "quality": 0.95, "section_id": 3382}, "so_15449629_15449692_17": {"length": 5, "quality": 0.8333333333333334, "section_id": 3371}, "so_15449629_15449692_9": {"length": 9, "quality": 0.9, "section_id": 3382}, "so_15449629_15449689_1": {"length": 12, "quality": 0.631578947368421, "section_id": 3371}, "so_15449629_15449692_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 3382}, "so_15449629_15449692_18": {"length": 4, "quality": 0.8, "section_id": 3371}, "so_15449629_15449689_0": {"length": 8, "quality": 0.8, "section_id": 3342}, "so_15449629_15449692_16": {"length": 14, "quality": 0.9333333333333333, "section_id": 3371}, "so_15449629_15449692_11": {"length": 7, "quality": 0.875, "section_id": 3382}}, "n3337": {"so_15449629_15449692_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 3251}, "so_15449629_15449692_3": {"length": 9, "quality": 0.9, "section_id": 3251}, "so_15449629_15449692_5": {"length": 9, "quality": 0.9, "section_id": 3251}, "so_15449629_15449692_6": {"length": 11, "quality": 0.9166666666666666, "section_id": 3251}, "so_15449629_15449692_14": {"length": 12, "quality": 0.75, "section_id": 3251}, "so_15449629_15449692_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 3251}, "so_15449629_15449692_12": {"length": 7, "quality": 0.875, "section_id": 3251}, "so_15449629_15449692_9": {"length": 9, "quality": 0.9, "section_id": 3251}, "so_15449629_15449692_10": {"length": 9, "quality": 0.6923076923076923, "section_id": 3251}, "so_15449629_15449692_15": {"length": 4, "quality": 0.8, "section_id": 3252}, "so_15449629_15449692_2": {"length": 19, "quality": 0.95, "section_id": 3251}, "so_15449629_15449692_16": {"length": 14, "quality": 0.9333333333333333, "section_id": 3241}, "so_15449629_15449689_3": {"length": 5, "quality": 1.0, "section_id": 6671}, "so_15449629_15449692_18": {"length": 4, "quality": 0.8, "section_id": 3241}, "so_15449629_15449689_1": {"length": 12, "quality": 0.631578947368421, "section_id": 3241}, "so_15449629_15449692_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 3251}, "so_15449629_15449692_13": {"length": 8, "quality": 0.8888888888888888, "section_id": 3251}, "so_15449629_15449692_11": {"length": 7, "quality": 0.875, "section_id": 3251}, "so_15449629_15449692_17": {"length": 5, "quality": 0.8333333333333334, "section_id": 3241}, "so_15449629_15449689_0": {"length": 8, "quality": 0.8, "section_id": 3212}, "so_15449629_15449692_8": {"length": 9, "quality": 0.9, "section_id": 3251}}, "n4659": {"so_15449629_15449692_4": {"length": 9, "quality": 0.6428571428571429, "section_id": 4142}, "so_15449629_15449692_3": {"length": 9, "quality": 0.9, "section_id": 4142}, "so_15449629_15449692_5": {"length": 9, "quality": 0.9, "section_id": 4142}, "so_15449629_15449692_6": {"length": 11, "quality": 0.9166666666666666, "section_id": 4142}, "so_15449629_15449692_14": {"length": 12, "quality": 0.75, "section_id": 4142}, "so_15449629_15449692_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 4142}, "so_15449629_15449692_12": {"length": 7, "quality": 0.875, "section_id": 4142}, "so_15449629_15449692_9": {"length": 9, "quality": 0.9, "section_id": 4142}, "so_15449629_15449692_15": {"length": 4, "quality": 0.8, "section_id": 4143}, "so_15449629_15449692_2": {"length": 19, "quality": 0.95, "section_id": 4142}, "so_15449629_15449689_3": {"length": 5, "quality": 1.0, "section_id": 8420}, "so_15449629_15449689_1": {"length": 12, "quality": 0.631578947368421, "section_id": 4133}, "so_15449629_15449692_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 4142}, "so_15449629_15449692_13": {"length": 8, "quality": 0.8888888888888888, "section_id": 4142}, "so_15449629_15449689_0": {"length": 7, "quality": 0.7, "section_id": 7674}, "so_15449629_15449692_16": {"length": 10, "quality": 0.6666666666666666, "section_id": 4133}, "so_15449629_15449692_8": {"length": 9, "quality": 0.9, "section_id": 4142}}}, "15449629": {"ViewCount": "367", "Body": "<p>What happens when ended function f() and g() ?</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\n     ~A(){}\n\n}\nvoid f()\n{\n    cout &lt;&lt; \"terminate\" &lt;&lt; endl;\n\n}\nvoid g()\n{\n    cout &lt;&lt; \"unexpected\" &lt;&lt; endl;\n}\n\n\n\nint main()\n{\n    set_terminate(f);\n    set_unexpected(g);\n    throw 5;\n    cout &lt;&lt; \"end\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Why is called abort() function?\nAnd when is called destruktor? I can't find logic :((((((((</p>\n", "AcceptedAnswerId": "15449689", "Title": "Can anyone tell me when called terminate(), and when unexpected()?", "CreationDate": "2013-03-16T13:05:05.673", "Id": "15449629", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-03-16T13:52:56.460", "Score": "2", "OwnerUserId": "2090964", "Tags": "<c++><exception><terminate>", "AnswerCount": "2"}, "15449692": {"Id": "15449692", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15449629_15449692_0\">Can anyone tell me when called terminate(), and when unexpected()?</p>\n</blockquote>\n<p>In your case, your terminate handler will be invoked. You can verify this <a href=\"http://liveworkspace.org/code/4cvdpz%2437\" rel=\"nofollow\">here</a>.</p>\n<p>Concerning <code>std::terminate()</code>, paragraph 15.5.1/1-2 contains a note which makes a pretty exhaustive list of the situation in which it is called (<strong>the part in bold font is what applies in your case</strong>):</p>\n<blockquote>\n<p id=\"so_15449629_15449692_1\">1 In some situations exception handling must be abandoned for less subtle error handling techniques. [ Note:\n  These situations are:</p>\n<p id=\"so_15449629_15449692_2\">\u2014 when the exception handling mechanism, after completing the initialization of the exception object\n  but before activation of a handler for the exception (15.1), calls a function that exits via an exception,\n  or</p>\n<p id=\"so_15449629_15449692_3\">\u2014 <strong>when the exception handling mechanism cannot find a handler for a thrown exception</strong> (15.3), or</p>\n<p id=\"so_15449629_15449692_4\">\u2014 when the search for a handler (15.3) encounters the outermost block of a function with a noexcept specification\n  that does not allow the exception (15.4), or</p>\n<p id=\"so_15449629_15449692_5\">\u2014 when the destruction of an object during stack unwinding (15.2) terminates by throwing an exception,\n  or</p>\n<p id=\"so_15449629_15449692_6\">\u2014 when initialization of a non-local variable with static or thread storage duration (3.6.2) exits via an\n  exception, or</p>\n<p id=\"so_15449629_15449692_7\">\u2014 when destruction of an object with static or thread storage duration exits via an exception (3.6.3), or</p>\n<p id=\"so_15449629_15449692_8\">\u2014 when execution of a function registered with <code>std::atexit</code> or <code>std::at_quick_exit</code> exits via an exception\n  (18.5), or</p>\n<p id=\"so_15449629_15449692_9\">\u2014 when a throw-expression with no operand attempts to rethrow an exception and no exception is being\n  handled (15.1), or</p>\n<p id=\"so_15449629_15449692_10\">\u2014 when <code>std::unexpected</code> throws an exception which is not allowed by the previously violated dynamicexception-\n  specification, and std::bad_exception is not included in that dynamic-exception-specification\n  (15.5.2), or</p>\n<p id=\"so_15449629_15449692_11\">\u2014 when the implementation\u2019s default unexpected exception handler is called (D.11.1), or</p>\n<p id=\"so_15449629_15449692_12\">\u2014 when the function <code>std::nested_exception::rethrow_nested</code> is called for an object that has captured\n  no exception (18.8.6), or</p>\n<p id=\"so_15449629_15449692_13\">\u2014 when execution of the initial function of a thread exits via an exception (30.3.1.2), or</p>\n<p id=\"so_15449629_15449692_14\">\u2014 when the destructor or the copy assignment operator is invoked on an object of type std::thread\n  that refers to a joinable thread (30.3.1.3, 30.3.1.4).\n  \u2014end note ]</p>\n<p id=\"so_15449629_15449692_15\">2 In such cases, <code>std::terminate()</code> is called (18.8.3). [...]</p>\n</blockquote>\n<p>Concerning <code>std::unexpected()</code>, per Paragraph 15.4/9:</p>\n<blockquote>\n<p id=\"so_15449629_15449692_16\">Whenever an exception is thrown and the search for a handler (15.3) encounters the outermost block of a\n  function with an exception-specification that does not allow the exception, then,</p>\n<p id=\"so_15449629_15449692_17\">\u2014 if the exception-specification is a dynamic-exception-specification, the function <code>std::unexpected()</code> is\n  called (15.5.2),</p>\n<p id=\"so_15449629_15449692_18\">\u2014 otherwise, the function std::terminate() is called (15.5.1).</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-16T13:21:52.790", "Score": "2", "CreationDate": "2013-03-16T13:11:46.243", "ParentId": "15449629", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-03-16T13:21:52.790"}});