post_cb({"bq_ids": {"n4140": {"so_24577441_24577525_0": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_24577441_24577525_0": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_24577441_24577525_0": {"length": 6, "quality": 1.0, "section_id": 458}}}, "24577441": {"ViewCount": "163", "Body": "<p>Consider the following code:</p>\n<pre><code>class A {};\n\nclass B : virtual public A {};\n\nclass C : virtual public A {};\n\nclass D : public B, public C {};\n\nD d;\n</code></pre>\n<p>The Visual Studio's compiler first calls the constructor of class B, then the constructor of class C. But is this a Rule, i.e. does the ISO C++ standard guarantee the order of constructor call?</p>\n", "AcceptedAnswerId": "24577525", "Title": "Constructor call sequence", "CreationDate": "2014-07-04T15:29:43.290", "LastActivityDate": "2014-07-25T01:29:25.337", "CommentCount": "3", "LastEditDate": "2014-07-04T15:35:37.173", "PostTypeId": "1", "Tags": "<c++><inheritance><constructor><language-lawyer><virtual-inheritance>", "Id": "24577441", "AnswerCount": "1", "Score": "3", "OwnerUserId": "1856429", "ClosedDate": "2014-07-05T02:50:35.783", "LastEditorUserId": "2718186"}, "24577525": {"Id": "24577525", "PostTypeId": "2", "Body": "<p>It's guaranteed. From \u00a712.6.2 [class.base.init]/p11 of N3797:</p>\n<blockquote>\n<p id=\"so_24577441_24577525_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class <em>base-specifier-list</em>.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the <em>base-specifier-list</em> (regardless of the order of the <em>mem-initializers</em>).</li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the <em>mem-initializers</em>).</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-07-25T01:29:25.337", "Score": "8", "CreationDate": "2014-07-04T15:36:08.513", "ParentId": "24577441", "CommentCount": "1", "OwnerUserId": "2756719", "LastEditDate": "2014-07-25T01:29:25.337"}});