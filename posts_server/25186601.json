post_cb({"25187224": {"ParentId": "25186601", "CommentCount": "6", "Body": "<p><code>decltype</code> is special-cased for an unparenthesized <em>id-expression</em> to give the type of the entity, without reference qualification <strong>[dcl.type.simple]</strong>:</p>\n<blockquote>\n<p id=\"so_25186601_25187224_0\">4 - The type denoted by <code>decltype(e)</code> is defined as follows:<br/>\n  \u2014 if <code>e</code> is an unparenthesized id-expression or an unparenthesized class member access (5.2.5), <code>decltype(e)</code> is the type of the entity named by <code>e</code>. [...]<br/>\n  \u2014 otherwise, if <code>e</code> is an lvalue, <code>decltype(e)</code> is <code>T&amp;</code>, where <code>T</code> is the type of <code>e</code>; [...]</p>\n</blockquote>\n<p>By providing a comma expression you are disabling this special case, as with parentheses:</p>\n<pre><code>decltype(i)    // int\ndecltype((i))  // int&amp;\ndecltype(1, i) // int&amp;\n</code></pre>\n<p><code>(i)</code> and <code>1, i</code> are lvalue expressions, so their <code>decltype</code> is a reference type.</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "25187224", "Score": "7", "CreationDate": "2014-08-07T16:06:55.437", "LastActivityDate": "2014-08-07T16:06:55.437"}, "bq_ids": {"n4140": {"so_25186601_25187224_0": {"section_id": 5440, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_25186601_25187224_0": {"section_id": 5235, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_25186601_25187224_0": {"section_id": 6867, "quality": 0.9090909090909091, "length": 20}}}, "25186601": {"CommentCount": "0", "AcceptedAnswerId": "25187224", "PostTypeId": "1", "LastEditorUserId": "241631", "CreationDate": "2014-08-07T15:37:45.397", "LastActivityDate": "2014-08-07T16:53:00.287", "LastEditDate": "2014-08-07T16:53:00.287", "ViewCount": "137", "FavoriteCount": "0", "Title": "c++11 decltype returns reference type", "Id": "25186601", "Score": "4", "Body": "<p>I am a little bit confused about why <code>decltype</code> with the comma operator returns reference type in some cases.</p>\n<p>for example, in this code:</p>\n<pre><code>int i = 101;\ndecltype(1, i) var = i;\nvar = 20;\nprintf(\"%d\\n\", i); // will print 20\n</code></pre>\n<p>here, var is int&amp; instead of int, but if I replace the second line with:</p>\n<pre><code>decltype(i) var = i;\n</code></pre>\n<p>it will return int!</p>\n<p>can anyone please explain that?</p>\n", "Tags": "<c++><c++11><decltype>", "OwnerUserId": "2912782", "AnswerCount": "1"}});