post_cb({"39026696": {"ParentId": "39026390", "CommentCount": "6", "Body": "<blockquote>\n<p id=\"so_39026390_39026696_0\">Is it true that in C++ <code>main ()</code> is not required to include a <code>return 0;</code>?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_39026390_39026696_1\">Does it apply to main only or to any non-void function?</p>\n</blockquote>\n<p>It applies for <code>main()</code> only.</p>\n<blockquote>\n<p id=\"so_39026390_39026696_2\">Is it new in C++11 or was it always like that?</p>\n</blockquote>\n<p>No, it always was like that.</p>\n<blockquote>\n<p id=\"so_39026390_39026696_3\">What is the rationale?</p>\n</blockquote>\n<p>Backwards compatibility (and compatibility with C) of the language most probably.</p>\n", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "39026696", "Score": "0", "CreationDate": "2016-08-18T20:09:22.277", "LastActivityDate": "2016-08-18T20:09:22.277"}, "39027129": {"ParentId": "39026390", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <code>main()</code> function is guaranteed to return 0 if you do not return explicitly a value.  This is defined in the ISO standard:  </p>\n<blockquote>\n<p id=\"so_39026390_39027129_0\"><strong>3.6.1/5:</strong> A <code>return</code> statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic storage duration) and\n  calling <code>std::exit</code> with the return value as the argument. If control\n  reaches the end of main without encountering a return statement, the\n  effect is that of executing</p> <code>return 0;</code></blockquote>\n<p>This special behavior is only for <code>main()</code>, because <code>main()</code> is a function returning an <code>int</code>,  and the standard defines the general rule:  </p>\n<blockquote>\n<p id=\"so_39026390_39027129_1\"><strong>6.6.3/2</strong> Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a\n  value-returning function.</p>\n</blockquote>\n<p>Now, was it always like that ?  Bjarne Stroutsturp in the <em>C++ Programming language</em>, in its edition of 1986, long before any standardization, suggests this. In most of his examples of his tutorial chapter,  <code>main()</code>  doesn't return a value, and on page 82 of this early edition, he states:  </p>\n<blockquote>\n<p id=\"so_39026390_39027129_2\">Conventionally, main() returns 0 if the program terminates normally\n  and non zero otherwise, so returning the number of errors\n  accomplishes this nicely</p>\n</blockquote>\n<p><strong><em>Additional remarks</em></strong></p>\n<p>In this book, the rule is however implicit from the examples and acompanying explanations; Stroustrup didn't state  explicitly a general unambiguous rule for <code>main()</code> nor didn't he mention it in his <em>The Design and evolution of C++</em> book of 1994. </p>\n<p>To be noted that in C89 the principle was still undefined behavior in absence of explicit return value, until arrival of C99.  But in C++98 the current 0 return by default rule was already formalized. So I think it's not for backward compatibility with C.</p>\n", "OwnerUserId": "3723423", "LastEditorUserId": "3723423", "LastEditDate": "2016-08-18T21:32:52.340", "Id": "39027129", "Score": "2", "CreationDate": "2016-08-18T20:40:39.950", "LastActivityDate": "2016-08-18T21:32:52.340"}, "39026390": {"CommentCount": "16", "AcceptedAnswerId": "39027129", "PostTypeId": "1", "ClosedDate": "2016-08-19T04:25:27.413", "LastEditorUserId": "6690134", "CreationDate": "2016-08-18T19:46:51.453", "LastActivityDate": "2016-08-18T21:32:52.340", "LastEditDate": "2016-08-18T20:30:49.670", "ViewCount": "91", "FavoriteCount": "1", "Title": "Returning a value on function exit in C++", "Id": "39026390", "Score": "-2", "Body": "<p>Is it true that in C++ <code>main ()</code> is not required to include a <code>return 0;</code>?</p>\n<p>Does it apply to <code>main</code> only or to any non-void function?</p>\n<p>Is it new in C++11 or was it always like that?</p>\n<p>What is the rationale?</p>\n", "Tags": "<c++><c++11><iso>", "OwnerUserId": "6690134", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_39026390_39026917_0": {"section_id": 7149, "quality": 0.7, "length": 21}, "so_39026390_39027129_1": {"section_id": 3913, "quality": 0.9230769230769231, "length": 12}, "so_39026390_39027129_0": {"section_id": 7149, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_39026390_39026917_0": {"section_id": 6893, "quality": 0.7, "length": 21}, "so_39026390_39027129_1": {"section_id": 3773, "quality": 0.9230769230769231, "length": 12}, "so_39026390_39027129_0": {"section_id": 6893, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_39026390_39026917_0": {"section_id": 8650, "quality": 0.9666666666666667, "length": 29}, "so_39026390_39027129_0": {"section_id": 8650, "quality": 0.7777777777777778, "length": 21}, "so_39026390_39027129_1": {"section_id": 4799, "quality": 0.6923076923076923, "length": 9}}}, "39026917": {"ParentId": "39026390", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://eel.is/c++draft/basic.start.main#5\" rel=\"nofollow\">[basic.start.main]/5</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39026390_39026917_0\"><em>A return statement in main has the effect of leaving the main function\n  (destroying any objects with automatic storage duration) and calling\n  std::exit with the return value as the argument. <strong>If control flows off\n  the end of the compound-statement of main, the effect is equivalent to\n  a return with operand 0</strong> (see also [except.handle]).</em></p>\n</blockquote>\n<p>It seems to always have been in the C++ standard (and also in C, for that matter, starting from C99 -see C99 spec \u00a75.1.2.2.3).</p>\n<p>It applies to the <code>main()</code> function only.</p>\n<p>I don't know the original rationale though. It might have been \"<em>to aid developers by saving them from typing <code>return 0;</code> at the end of <code>main()</code></em>\".</p>\n", "OwnerUserId": "485343", "LastEditorUserId": "485343", "LastEditDate": "2016-08-18T20:33:00.793", "Id": "39026917", "Score": "0", "CreationDate": "2016-08-18T20:26:18.200", "LastActivityDate": "2016-08-18T20:33:00.793"}});