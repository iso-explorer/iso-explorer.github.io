post_cb({"18418841": {"ParentId": "18418470", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From Josuttis 's <em>The C++ Standard Library</em> </p>\n<p>You don\u2019t have to and should not move() return values. According to the language rules, the standard specifies that for the following code</p>\n<pre><code>X foo ()\n{\nX x;\n...\n\nreturn x;\n}\n</code></pre>\n<p>the following behavior is guaranteed:</p>\n<p>\u2022 If X has an accessible copy or move constructor, the compiler may\n   choose to elide the copy. This is the so-called (named) <em>return value\n   optimization ((N)RVO)</em>, which was specified even before C++11 and is\n   supported by most compilers.</p>\n<p>\u2022 Otherwise, if X has a move constructor, x is moved.</p>\n<p>\u2022 Otherwise, if X has a copy constructor, x is copied.</p>\n<p>\u2022 Otherwise, a compile-time error is emitted.</p>\n<p>From <strong>\u00a725.2.4</strong> (for_each)</p>\n<blockquote>\n<p id=\"so_18418470_18418841_0\">Requires:Function shall meet the requirements of <em>MoveConstructible\n  (Table 20)</em>. [Note:Function need not meet the requirements of\n  CopyConstructible (Table 21).\u2014end note]</p>\n</blockquote>\n<p>With <code>std::move(f)</code> you can be guaranteed of being able to read the mutated state externally.</p>\n", "OwnerUserId": "1870232", "LastEditorUserId": "1870232", "LastEditDate": "2013-08-24T13:03:38.183", "Id": "18418841", "Score": "2", "CreationDate": "2013-08-24T12:56:32.750", "LastActivityDate": "2013-08-24T13:03:38.183"}, "18418470": {"CommentCount": "4", "ViewCount": "364", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2013-08-24T12:16:39.037", "LastActivityDate": "2015-10-13T16:12:58.950", "Title": "Returning std::move(f) in std::for_each", "AcceptedAnswerId": "18418841", "LastEditDate": "2015-10-13T16:12:58.950", "Id": "18418470", "Score": "6", "Body": "<p>I'm writing an implementation of standard c++ library for study.</p>\n<p>The C++11 standard says that <code>for_each</code> returns <code>std::move(f)</code>.</p>\n<pre><code>template &lt;class InputIterator, class Function&gt;\nFunction for_each(InputIterator first, InputIterator last, Function f);\n\nReturns: std::move(f).\n</code></pre>\n<p>I thought that function scope local variable is move-constructed when it's returned.\nShould I return <code>move(f)</code> explicitly?</p>\n", "Tags": "<c++><c++11><std><move-semantics><c++-standard-library>", "OwnerUserId": "1030861", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18418470_18418841_0": {"section_id": 1252, "quality": 0.5384615384615384, "length": 7}}, "n3337": {"so_18418470_18418841_0": {"section_id": 1250, "quality": 0.5384615384615384, "length": 7}}, "n4659": {"so_18418470_18418841_0": {"section_id": 1357, "quality": 0.5384615384615384, "length": 7}}}});