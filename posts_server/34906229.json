post_cb({"bq_ids": {"n4140": {"so_34906229_34906229_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 5852}, "so_34906229_34906229_0": {"length": 47, "quality": 0.9791666666666666, "section_id": 5854}}, "n3337": {"so_34906229_34906229_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 5622}, "so_34906229_34906229_0": {"length": 46, "quality": 0.9583333333333334, "section_id": 5624}}, "n4659": {"so_34906229_34906229_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 7331}, "so_34906229_34906229_0": {"length": 47, "quality": 0.9791666666666666, "section_id": 7333}}}, "34906298": {"Id": "34906298", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34906229_34906298_0\">Why do both struct and class exist in C++?</p>\n</blockquote>\n<p><code>struct</code> comes from C, and exists in C++ mainly for reasons of compatibility with the C programming language.</p>\n<blockquote>\n<p id=\"so_34906229_34906298_1\">Are there any technical differences that I have missed that\n  significantly distinguish <code>struct</code> and <code>class</code>?</p>\n</blockquote>\n<p>The main difference between a <code>struct</code> and a <code>class</code> is that for the <code>struct</code> its members have <code>public</code> access by default whereas for the <code>class</code> its members have <code>private</code> access by default.</p>\n<p>The keyword <code>class</code> used in template arguments does not define a class but rather a non type template argument and can be used interchangeably with keyword <code>typename</code>.</p>\n<p>As for why you can't use <code>struct</code> keyword for specifying a non type template argument, the reasons are historical and I guess you have to ask Bjarne for it :) or refer to this SO <a href=\"https://stackoverflow.com/a/2520156/2352671\">answer</a> for info behind the scenes.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-20T17:31:35.037", "Score": "5", "CreationDate": "2016-01-20T17:12:38.357", "ParentId": "34906229", "CommentCount": "6", "OwnerUserId": "2352671", "LastEditDate": "2017-05-23T11:51:32.000"}, "34907535": {"Id": "34907535", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34906229_34907535_0\">Why do both struct and class exist in C++?</p>\n</blockquote>\n<p>A reason for existence of <code>struct</code> is for compatibility with C.</p>\n<p>Why then, did \"C with Classes\" introduce the new keyword <code>class</code> when you could use <code>struct</code> for the same thing, you may ask. See this <a href=\"https://stackoverflow.com/a/1654464/2079303\">SO answer</a> for plausible speculation. In short, it's probably because there was desire for emphasis on <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"nofollow noreferrer\">OOP</a> in which <a href=\"https://en.wikipedia.org/wiki/Class_%28computer_programming%29\" rel=\"nofollow noreferrer\">class</a> is a widely used term. Only Stroustrup may know for certain.</p>\n<blockquote>\n<p id=\"so_34906229_34907535_1\">Confusingly, the keywords themselves do not necessarily correspond to the language used in the standard</p>\n</blockquote>\n<p>What needs to be understood, is that the concept of a <em>class</em> is not one and the same with the keyword <code>class</code>.</p>\n<p>There are three keywords for declaring classes. These keywords known as class-keys are <code>class</code>, <code>struct</code> and <code>union</code>. The non-union classes that are declared with either <code>class</code> or <code>struct</code> are exactly the same thing, except for <sup>\u2020</sup>. Union classes are different from non-union classes.</p>\n<blockquote>\n<p id=\"so_34906229_34907535_2\">However, struct explicitly cannot be used in a template declaration to introduce type template parameters</p>\n</blockquote>\n<p>C++ re-uses keywords for different purposes in different contexts. <code>class</code> keyword in a class declaration context, is not entirely the same as <code>class</code> keyword in a template argument definition. One keyword being equivalent to another in one context does not make it equivalent in all contexts. The reason for reusing keywords in different but similar contexts (<code>static</code> is another example), is to avoid introducing new keywords, which introduces more holes with compatibility with C (or earlier C++ standard) that does not have the new keywords.</p>\n<p>The reason <em>why</em> <code>class</code> keyword was reused in the context of template type arguments was probably because classes are types, and therefore typically used as type parameters. There is also a <code>typename</code> keyword, which was added later and is (almost) interchangeable with <code>class</code> in template type argument declaration, but also used elsewhere (dependent type names) where <code>class</code> is not used. See this <a href=\"https://stackoverflow.com/a/213135/2079303\">answer</a> for a link and a summary about why a separate keyword was added to that context.</p>\n<p>Why <code>struct</code> is not used in the context as an equivalent, you may ask. Well, that's another question to Stroustrup or the committee. It's an opposite choice than what committee did when <code>enum class</code>/<code>enum struct</code> was introduced.</p>\n<blockquote>\n<p id=\"so_34906229_34907535_3\">I'm unable to see any significant difference between struct and class</p>\n</blockquote>\n<p>Good. There isn't any except for <sup>\u2020</sup></p>\n<blockquote>\n<p id=\"so_34906229_34907535_4\">This seems rather redundant and confusing while introducing a glaring inconsistency.</p>\n</blockquote>\n<p>I see no inconsistency in the quote from the standard. I see redundancy and I suspect that the redundancy exists to make it extra clear that a class declared with the keyword <code>struct</code> is still a class.</p>\n<blockquote id=\"so_34906229_34907535_5\">\n<ol>\n<li>Are there any technical differences that I have missed that significantly distinguish struct and class?</li>\n</ol>\n</blockquote>\n<p>I've already answered, but to be clear, there is <strong>no</strong> difference between classes declared with <code>struct</code> and <code>class</code> keywords, beyond <sup>\u2020</sup>.</p>\n<p><sup>\u2020</sup> the difference with the default access specifier (as you already know, and also described <a href=\"https://stackoverflow.com/a/999810/2079303\">here</a>), which is their <strong>only</strong> difference. </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-16T09:44:35.560", "Score": "6", "CreationDate": "2016-01-20T18:17:17.867", "ParentId": "34906229", "CommentCount": "1", "OwnerUserId": "2079303", "LastEditDate": "2017-05-23T12:32:52.383"}, "34906229": {"ViewCount": "399", "Body": "<p>As we know, <code>struct</code> and <code>class</code> are interchangeable in many places in the language. Confusingly, the keywords themselves do not necessarily correspond to the language used in the standard. For example, in draft standard N4567 [class]/10, </p>\n<blockquote>\n<p id=\"so_34906229_34906229_0\">A <em>POD struct</em><sup>109</sup> is a non-union class that is both a\n  trivial class and a standard-layout class, and has no non-static data\n  members of type non-POD struct, non-POD union (or array of such\n  types). Similarly, a <em>POD union</em> is a union that is both a trivial\n  class and a standard-layout class, and has no non-static data members\n  of type non-POD struct, non-POD union (or array of such types). A <em>POD\n  class</em> is a class that is either a POD struct or a POD union.</p>\n</blockquote>\n<p>In over-simplified terms, <code>struct</code> and <code>class</code> are interchangeable in the following cases:</p>\n<ul>\n<li>declaration of a \"class\"</li>\n<li>declaration of a scoped enumeration type</li>\n<li>elaborated type specifier unless the \"class\" was declared with <code>union</code></li>\n</ul>\n<p>However, <code>struct</code> <em>explicitly</em> cannot be used in a template declaration to introduce type template parameters:</p>\n<pre><code>template &lt;struct T&gt; // error\n</code></pre>\n<p>I'm unable to see any significant difference between <code>struct</code> and <code>class</code>, even in the POD example above because a <em>POD struct</em> as defined in the standard can be declared with either <code>struct</code> or <code>class</code>. </p>\n<blockquote>\n<p id=\"so_34906229_34906229_1\">[class]/8 A <em>standard-layout struct</em> is a standard-layout class\n  defined with the <em>class-key struct</em> or the <em>class-key class</em>. A\n  <em>standard-layout union</em> is a standard-layout class defined with the <em>class-key union</em>.</p>\n</blockquote>\n<p>This seems rather redundant and confusing while introducing a glaring inconsistency.</p>\n<p>I have two questions:</p>\n<ol>\n<li><p>Are there any technical differences that I have missed that significantly distinguish <code>struct</code> and <code>class</code>?</p></li>\n<li><p>What is the rationale, if any, behind this clumsiness?</p></li>\n</ol>\n<p><sup>I'm ignoring the difference between default access specifiers because everyone knows that already.</sup></p>\n", "AcceptedAnswerId": "34907535", "Title": "Why do both struct and class exist in C++?", "CreationDate": "2016-01-20T17:09:13.123", "Id": "34906229", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-06-16T09:44:35.560", "Score": "4", "OwnerUserId": "5817092", "Tags": "<c++><class><struct><standards>", "AnswerCount": "2"}});