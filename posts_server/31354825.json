post_cb({"31354901": {"ParentId": "31354825", "CommentCount": "0", "Body": "<p><code>virtual</code> keyword on the overridden function is completely useless. It doesn't provide anything except readability(some might say it harms readability) but it was the only way in C++03 to convey to the class readers that the function is actually virtual without them checking the base class.</p>\n<p>Nowadays it is better to use the keyword which is intruduced specifically for the overriding - <code>override</code>. So your example will look like:</p>\n<pre><code>class A{\npublic:\n    virtual void fun(){ }\n};\nclass B :public A{\npublic:\n    void fun() override{}\n};\n</code></pre>\n<p>Not only does it convey the intent but it also makes sure you won't make any mistake when overriding a virtual function.</p>\n", "OwnerUserId": "643393", "PostTypeId": "2", "Id": "31354901", "Score": "0", "CreationDate": "2015-07-11T08:02:48.190", "LastActivityDate": "2015-07-11T08:02:48.190"}, "31354825": {"CommentCount": "1", "ViewCount": "458", "PostTypeId": "1", "ClosedDate": "2015-07-11T08:04:36.803", "LastEditorUserId": "643393", "CreationDate": "2015-07-11T07:53:42.473", "LastActivityDate": "2015-07-11T08:45:45.567", "LastEditDate": "2015-07-11T07:58:12.937", "AcceptedAnswerId": "31354856", "OwnerDisplayName": "user5028722", "Title": "Override function with \"virtual\" keyword and without it", "Id": "31354825", "Score": "1", "Body": "<p>I'm reading about virtual functions and now little confused about overriding virtual functions.\nI want to confirm that below given codes are same?</p>\n<pre><code>class A{\npublic:\n    virtual void fun(){ }\n};\nclass B :public A{\npublic:\n    void fun(){}\n};\n</code></pre>\n<p>and </p>\n<pre><code>class A{\npublic:\n    virtual void fun(){ }\n};\nclass B :public A{\npublic:\n    virtual void fun(){}\n};\n</code></pre>\n<p>If not same then what's the difference? As I expected that B's function with virtual keyword could be same as for B's Derived. Please clear my confusion thanks.</p>\n", "Tags": "<c++>", "AnswerCount": "3"}, "31354856": {"ParentId": "31354825", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Yes, they are the same. Any function overriding a virtual function in the base class is implicitly declared virtual.</p>\n<p>From the last working draft of the c++14 standard:</p>\n<blockquote>\n<p id=\"so_31354825_31354856_0\">10.3 Virtual functions [class.virtual]<br>\n  If a virtual member function vf is declared in a class Base and in a class Derived, derived directly or indirectly from Base, a member function vf with the <strong>same name, parameter-type-list</strong> (8.3.5), <strong>cv-qualification</strong>, and ref- \u00a7 10.3 249 c ISO/IEC N4296 qualifier (or absence of same) as Base::vf is declared, then Derived::vf is also virtual (<strong>whether or not it is so declared</strong>) and it overrides(111) Base::vf.</br></p>\n</blockquote>\n<p>Emphasis mine</p>\n<p>As @Mats and @ixSci pointed out, it is good practice since c++11, to use the keyword <code>override</code> to ensure that you are actually <em>overriding</em> a virtual function and not acidentally <em>overloading</em> a function or overriding a non-virtual function. \nPersonally, my preferred style is this, but it is up to debate whether the virtual keyword in B adds any value or is even harming readability: </p>\n<pre><code>class A{\npublic:\n    virtual void fun(){ }\n};\n\nclass B :public A{\npublic:\n    virtual void fun() override {}\n};\n</code></pre>\n", "OwnerUserId": "2881849", "LastEditorUserId": "2881849", "LastEditDate": "2015-07-11T08:45:45.567", "Id": "31354856", "Score": "1", "CreationDate": "2015-07-11T07:57:27.417", "LastActivityDate": "2015-07-11T08:45:45.567"}, "bq_ids": {"n4140": {"so_31354825_31354856_0": {"section_id": 7003, "quality": 0.7073170731707317, "length": 29}}, "n3337": {"so_31354825_31354856_0": {"section_id": 6749, "quality": 0.7073170731707317, "length": 29}}, "n4659": {"so_31354825_31354856_0": {"section_id": 8500, "quality": 0.7073170731707317, "length": 29}}}, "31354929": {"ParentId": "31354825", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Virtual keyword tells compiler that there function may be implemented later by inheriting class ( pure virtual). Additionally in c++11 there is keyword override wich checks if implemented method in inheriting class overrodes virtual method of base class. In case of implemented function there is no much difference. We can sam that in case of virtual we talk avout override in other case about hiding of base method ( in both cases your cab still invoke implementation of base). Additionally this is information for programmer that function is intended to override. Additionaly virtual keyword is important in case of destructor. As general rule of thumb if function has some virtual methods it is good to have it a virtual destructor.</p>\n", "OwnerUserId": "5064707", "LastEditorUserId": "5064707", "LastEditDate": "2015-07-11T08:28:29.037", "Id": "31354929", "Score": "0", "CreationDate": "2015-07-11T08:06:22.450", "LastActivityDate": "2015-07-11T08:28:29.037"}});