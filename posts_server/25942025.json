post_cb({"25942070": {"ParentId": "25942025", "LastEditDate": "2014-09-19T20:45:01.593", "CommentCount": "3", "CreationDate": "2014-09-19T20:39:44.583", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "PostTypeId": "2", "Id": "25942070", "Score": "6", "Body": "<p>C++ Standard section \u00a7 24.2.1 [iterator.requirements.general] :</p>\n<blockquote>\n<p id=\"so_25942025_25942070_0\"><strong>Iterators are a generalization of pointers</strong> that allow a C ++ program\n  to work with different data structures (containers) in a uniform\n  manner.</p>\n<p id=\"so_25942025_25942070_1\">[...]</p>\n<p id=\"so_25942025_25942070_2\">Since iterators are an abstraction of pointers, their semantics is a\n  generalization of most of the semantics of pointers in C ++ . <strong>This\n  ensures that every function template that takes iterators works as\n  well with regular pointers.</strong></p>\n</blockquote>\n<p>So yes, any function template that expects an iterator (as defined in the standard) is required to work when called with regular pointers.</p>\n<p>In particular, pointers respects all the requirements of any standard C++ iterator class (including Input Iterators)</p>\n", "LastActivityDate": "2014-09-19T20:45:01.593"}, "25942025": {"CommentCount": "1", "ViewCount": "92", "CreationDate": "2014-09-19T20:36:22.757", "LastActivityDate": "2014-09-19T20:45:01.593", "Title": "Can I always substitute regular pointers for input iterators?", "AcceptedAnswerId": "25942070", "PostTypeId": "1", "Id": "25942025", "Score": "4", "Body": "<p>Can I always substitite pointers for InputIterators in the fashion examplified in the below code?</p>\n<pre><code>int a[] = {5, 6, 7, 8, 9, 10};\nstd::list&lt;int&gt; l(a, a + 4); // 5, 6, 7, 8\n</code></pre>\n<p>The constructor declaration for list is (leaving out the allocator part)</p>\n<pre><code>list (InputIterator first, InputIterator last);\n</code></pre>\n<p>But from the C++ reference it almost seems like anything which supports actions such as ++ (increment) and * (dereferenceing) could be used as InputIterators?</p>\n<p>Thank you.</p>\n", "Tags": "<c++>", "OwnerUserId": "3367091", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25942025_25942070_0": {"section_id": 5555, "quality": 1.0, "length": 11}, "so_25942025_25942070_2": {"section_id": 5556, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_25942025_25942070_0": {"section_id": 5337, "quality": 1.0, "length": 11}, "so_25942025_25942070_2": {"section_id": 5338, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_25942025_25942070_2": {"section_id": 7001, "quality": 0.9523809523809523, "length": 20}, "so_25942025_25942070_0": {"section_id": 7000, "quality": 1.0, "length": 11}}}, "25942129": {"ParentId": "25942025", "CommentCount": "0", "Body": "<p>Yes, you can. Iterator categories form a hierarchy. With each level including the level above (or below, depending on how you write it).</p>\n<p>Forward iterators satisfy all the requirements of Input iterators, and then some. Bidirectional iterators support all the requirements of forward iterators, and then some. And finally, random access iterators, the most capable iterators of all, satisfy all the requirements of bidirectional iterators, and then some.</p>\n<p>Pointers are random access iterators, therefore, they satisfy all the requirements of input iterators.</p>\n", "OwnerUserId": "440119", "PostTypeId": "2", "Id": "25942129", "Score": "3", "CreationDate": "2014-09-19T20:44:26.410", "LastActivityDate": "2014-09-19T20:44:26.410"}});