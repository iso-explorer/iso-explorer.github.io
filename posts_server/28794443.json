post_cb({"28794443": {"CommentCount": "16", "ViewCount": "540", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-03-01T14:07:51.147", "LastActivityDate": "2015-03-01T17:48:41.080", "Title": "C++ Special member functions", "AcceptedAnswerId": "28796911", "LastEditDate": "2015-03-01T17:44:39.173", "Id": "28794443", "Score": "0", "Body": "<p>I have always known that special member functions of C++ are:</p>\n<ul>\n<li>Default constructor</li>\n<li>Copy Constructor</li>\n<li>Copy assignment operator</li>\n<li>Destructor</li>\n<li>Move constructor</li>\n<li>Move assignment operator</li>\n</ul>\n<p>Now I am reading Meyers Effective C++ book and have realized that there is also pair of <strong>address-of operators</strong>.</p>\n<p>I can redefine it this way:</p>\n<pre><code>class A\n{\npublic:\n  A* operator&amp;()\n  {\n    std::cout &lt;&lt; \"Address of operator\" &lt;&lt; std::endl;\n  }\n};\n\nint main()\n{\n  A a;\n  B* b = &amp;a; // Will call address-of operator.\n}\n</code></pre>\n<p>Why then in C++ standard section 12 (Special member functions) there is no word about this operator.</p>\n", "Tags": "<c++><c++11><assignment-operator><default-constructor>", "OwnerUserId": "4037465", "AnswerCount": "3"}, "28796911": {"ParentId": "28794443", "CommentCount": "0", "Body": "<p>This should probably be an answer, not a comment, so be it:</p>\n<p>It's a <strong>mistake in your edition of Effective C++</strong>. The copy I have says:</p>\n<blockquote>\n<p id=\"so_28794443_28796911_0\">If you don't declare them yourself, your thoughtful compilers will\n  declare their own versions of a copy constructor, an assignment\n  operator, and a destructor.</p>\n</blockquote>\n<p>As you can see, there is no more mention of any address-of operator. The <a href=\"http://www.aristeia.com/BookErrata/ec++2e-errata.html\" rel=\"nofollow\">errata for the second edition</a> explicitly mention this change:</p>\n<blockquote>\n<p id=\"so_28794443_28796911_1\">A class declaring no operator&amp; function(s) does NOT have them\n  implicitly declared.  Rather, compilers use the built-in address-of\n  operator whenever \"&amp;\" is applied to an object of that type. This\n  behavior, in turn, is technically not an application of a global\n  operator&amp; function.  Rather, it is a use of a built-in operator.</p>\n</blockquote>\n", "OwnerUserId": "3313064", "PostTypeId": "2", "Id": "28796911", "Score": "3", "CreationDate": "2015-03-01T17:48:41.080", "LastActivityDate": "2015-03-01T17:48:41.080"}, "28794570": {"ParentId": "28794443", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>If you would read the Standard more closely you find that special member functions are those functions that the compiler can declare implicitly if you will not declare them explicitly.</p>\n<p>From the C++ Standard:</p>\n<blockquote>\n<p id=\"so_28794443_28794570_0\">12 Special member functions [special] 1 The default constructor\n  (12.1), copy constructor and copy assignment operator (12.8), move\n  constructor and move assignment operator (12.8), and destructor (12.4)\n  are special member functions. [ Note: <strong>The implementation will\n  implicitly declare these member functions for some class types when\n  the program does not explicitly declare them.</strong> The implementation\n  will implicitly define them if they are odr-used (3.2). See 12.1, 12.4\n  and 12.8. \u2014end note ] An implicitly-declared special member function\n  is declared at the closing } of the class-specifier. Programs shall\n  not define implicitly-declared special member functions.</p>\n</blockquote>\n<p>By the way the definition of the operator you showed is wrong becuase it returns nothing.</p>\n<p>As for other member functions including operators that for example shall be declared as class members then the implementation does not declare them implicitly. It is the programmer who decides whether to declare some operators or not. For example your class may contain a dozen of assignment operators.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-03-01T14:59:07.150", "Id": "28794570", "Score": "0", "CreationDate": "2015-03-01T14:19:54.083", "LastActivityDate": "2015-03-01T14:59:07.150"}, "bq_ids": {"n4140": {"so_28794443_28794570_0": {"section_id": 361, "quality": 0.7352941176470589, "length": 50}, "so_28794443_28794594_3": {"section_id": 649, "quality": 1.0, "length": 6}, "so_28794443_28794594_1": {"section_id": 648, "quality": 0.8571428571428571, "length": 36}}, "n3337": {"so_28794443_28794570_0": {"section_id": 351, "quality": 0.6323529411764706, "length": 43}, "so_28794443_28794594_3": {"section_id": 639, "quality": 1.0, "length": 6}, "so_28794443_28794594_1": {"section_id": 638, "quality": 0.8571428571428571, "length": 36}}, "n4659": {"so_28794443_28794570_0": {"section_id": 373, "quality": 0.7352941176470589, "length": 50}, "so_28794443_28794594_1": {"section_id": 676, "quality": 0.8571428571428571, "length": 36}, "so_28794443_28794594_3": {"section_id": 677, "quality": 1.0, "length": 6}}}, "28794594": {"ParentId": "28794443", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_28794443_28794594_0\"><em>\"Why then in C++ standard section 12 (Special member functions) there is no word about this operator. \"</em></p>\n</blockquote>\n<p>Because this operator isn't a <em>special member function</em>.  It's actually covered in <a href=\"https://isocpp.org/files/papers/N3690.pdf\" rel=\"nofollow\">this section</a></p>\n<blockquote>\n<p id=\"so_28794443_28794594_1\"><strong>13.5 Overloaded operators</strong><br>\n<sub><em>1 A function declaration having one of the following operator-function-ids as its name declares an operator\n  function. A function template declaration having one of the following operator-function-ids as its name\n  declares an operator function template. A specialization of an operator function template is also an operator\n  function. An operator function is said to implement the operator named in its<br>\n  operator-function-id.</br></em></sub></br></p>\n<pre><code>operator-function-id:\noperator operator\noperator: one of\n\nnew delete new[] delete[]\n+ - * / % \u02c6 &amp; | \u223c\n! = &lt; &gt; += -= *= /= %=\n\u02c6= &amp;= |= &lt;&lt; &gt;&gt; &gt;&gt;= &lt;&lt;= == !=\n&lt;= &gt;= &amp;&amp; || ++ -- , -&gt;* -&gt;\n( ) [ ]\n</code></pre>\n<p id=\"so_28794443_28794594_2\">...</p>\n<p id=\"so_28794443_28794594_3\"><sub><em>2 Both the unary and binary forms of\n  <code>+</code> <code>-</code> <code>*</code> <code>&amp;</code>\n  can be overloaded.</em></sub></p>\n</blockquote>\n", "OwnerUserId": "1413395", "LastEditorUserId": "1413395", "LastEditDate": "2015-03-01T14:34:49.883", "Id": "28794594", "Score": "2", "CreationDate": "2015-03-01T14:22:04.407", "LastActivityDate": "2015-03-01T14:34:49.883"}});