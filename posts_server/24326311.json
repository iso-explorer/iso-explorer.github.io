post_cb({"bq_ids": {"n4140": {"so_24326311_24326579_0": {"length": 35, "quality": 1.0, "section_id": 257}, "so_24326311_24326545_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 257}}, "n3337": {"so_24326311_24326579_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 248}, "so_24326311_24326545_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 248}}, "n4659": {"so_24326311_24326579_0": {"length": 35, "quality": 1.0, "section_id": 264}, "so_24326311_24326545_0": {"length": 43, "quality": 0.9347826086956522, "section_id": 264}}}, "24326545": {"Id": "24326545", "PostTypeId": "2", "Body": "<p>An explicit instantiation of a class template also instantiates static data members. As per C++11, [temp.explicit]/8:</p>\n<blockquote>\n<p id=\"so_24326311_24326545_0\">An explicit instantiation that names a class template specialization is also an explicit instantiation of the\n  same kind (declaration or definition) of each of its members (not including members inherited from base\n  classes) that has not been previously explicitly specialized in the translation unit containing the explicit\n  instantiation, except as described below. [ <em>Note:</em> In addition, it will typically be an explicit instantiation of\n  certain implementation-dependent data about the class. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>And none of the \"described below\" cases apply to static data members.</p>\n", "LastActivityDate": "2014-06-20T11:47:02.980", "CommentCount": "0", "CreationDate": "2014-06-20T11:47:02.980", "ParentId": "24326311", "Score": "1", "OwnerUserId": "1782465"}, "24326311": {"ViewCount": "401", "Body": "<p>With regard to explicit instantiation (IIRC used when the template is declare in a header and defined in a cpp file because otherwise the linker would not be able to find it when using it somewhere else), if the template has a static member variable, will the explicit instantiation also instantiate and create the static member variable?</p>\n", "AcceptedAnswerId": "24326579", "Title": "Does instantiating a template instantiate its static data members?", "CreationDate": "2014-06-20T11:31:54.867", "Id": "24326311", "CommentCount": "4", "LastEditDate": "2014-06-20T11:55:01.270", "PostTypeId": "1", "LastEditorUserId": "147192", "LastActivityDate": "2014-06-20T12:09:15.257", "Score": "7", "OwnerUserId": "3617954", "Tags": "<c++><templates>", "AnswerCount": "2"}, "24326579": {"Id": "24326579", "PostTypeId": "2", "Body": "<p>If you explicitly instantiate a class template, all non-template members will be instantiated, including <code>static</code> data members as long as they also have a definition. For example:</p>\n<pre><code>template &lt;typename T&gt;\nstruct foo {\n    static int static_data;\n    void non_template_member() {}\n    template &lt;typename S&gt;\n    void template_member(S) {}\n};\n\ntemplate &lt;typename T&gt;\nint foo&lt;T&gt;::static_data = 0;\n\ntemplate struct foo&lt;int&gt;;\ntemplate struct foo&lt;double&gt;;\n</code></pre>\n<p>The explicit instantiations at the bottom create definitions for <code>static_data</code> and <code>non_template_member()</code> for the types <code>int</code> and <code>double</code>. There won't be a definition for <code>template_member(S)</code> as this is still an open set.</p>\n<p>If you do not provide a [templated] definition for <code>static_data</code>, it won't instantiate a corresponding definition.</p>\n<p>The relevant section of the standard is 14.7.2 [temp.explicit] paragraph 8:</p>\n<blockquote>\n<p id=\"so_24326311_24326579_0\">An explicit instantiation that names a class template specialization is also an explicit instantiation of the same kind (declaration or definition) of each of its members (not including members inherited from base classes and members that are templates) that has not been previously explicitly specialized in the translation unit containing the explicit instantiation, except as described below.</p>\n</blockquote>\n<p>Without the member definition the <code>static</code> member is only declared and the explicit instantiation would merely see the declaration being instantiated. With the definition the explicit instantiation becomes a definition.</p>\n", "LastEditorUserId": "1120273", "LastActivityDate": "2014-06-20T12:09:15.257", "Score": "3", "CreationDate": "2014-06-20T11:48:46.483", "ParentId": "24326311", "CommentCount": "0", "OwnerUserId": "1120273", "LastEditDate": "2014-06-20T12:09:15.257"}});