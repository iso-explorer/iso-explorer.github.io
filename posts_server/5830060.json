post_cb({"5830131": {"Id": "5830131", "PostTypeId": "2", "Body": "<p>Note: I think my earlier answer was wrong. Its not <a href=\"http://en.wikipedia.org/wiki/Argument-dependent_name_lookup\" rel=\"nofollow\">Koenig Lookup</a> i.e Argument-dependent name lookup (ADL). So I deleted my (earlier) answer since I found the relevant section from the Standard which answers your question.</p>\n<p>Your code is directly from the section \u00a79.4/2 of the C++03 Standard.</p>\n<blockquote>\n<p id=\"so_5830060_5830131_0\">A static member may be referred to\n  directly in the scope of its class or\n  in the scope of a class derived\n  (clause 10) from its class; in this\n  case, the static member is referred to\n  as if a qualified-id expression was\n  used, with the nested-name-specifier\n  of the qualified-id naming the class\n  scope from which the static member is\n  referenced.</p>\n</blockquote>\n<p>It then gives this example (which you've asked in the question)</p>\n<pre><code>[Example:\n\n    int g();\n    struct X {\n        static int g();\n    };\n    struct Y : X {\n        static int i;\n    };\n    int Y::i = g(); // equivalent to Y::g();\n\n\u2014end example]\n</code></pre>\n<p>It then says that in \u00a79.4/3</p>\n<blockquote>\n<p id=\"so_5830060_5830131_1\"><strong>If an unqualified-id (5.1) is used in\n  the definition of a static member</strong>\n  following the member\u2019s declarator-id,\n  and <strong>name lookup (3.4.1) finds that the\n  unqualified-id refers to a static\n  member, enumerator, or nested type of\n  the member\u2019s class (or of a base class\n  of the member\u2019s class), the\n  unqualified-id is transformed into a\n  qualified-id expression in which the\n  nested-name-specifier names the class\n  scope from which the member is\n  referenced</strong>.</p>\n</blockquote>\n<p>Since that happens <strong>only</strong> in the <em>definition</em> of the static member, that means <code>Y::g()</code> is called ONLY in the <strong>initialization</strong>, not in <strong>assignment</strong>:</p>\n<pre><code>//definition-cum-initialization\nint Y::i = g(); // equivalent to Y::g();\nint main()\n{\n   //assignment \n   Y::i = g(); // does not equivalent to Y::g(); it calls global g()\n}\n</code></pre>\n<p>See the output here : <a href=\"http://www.ideone.com/6KDMI\" rel=\"nofollow\">http://www.ideone.com/6KDMI</a></p>\n<p>Lets consider another example:</p>\n<pre><code>struct B{};\n\nB f();\n\nnamespace NS \n{\n   struct A { static B b;};\n   B f();\n}\n\n//Definition cum Initialization\nB NS::A::b = f();  //calls NS::f()\nB b = f();         //calls global f()\n\nint main() \n{\n   //Assignment\n   NS::A::b = f(); //calls global f()\n   b = f();        //calls global f()\n}\n</code></pre>\n<p>See the complete demo here : <a href=\"http://www.ideone.com/53hoW\" rel=\"nofollow\">http://www.ideone.com/53hoW</a></p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-04-29T11:40:13.163", "Score": "11", "CreationDate": "2011-04-29T09:04:55.943", "ParentId": "5830060", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2011-04-29T11:40:13.163"}, "bq_ids": {"n4140": {"so_5830060_5830131_1": {"length": 34, "quality": 0.9714285714285714, "section_id": 5902}, "so_5830060_5830131_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 5901}}, "n3337": {"so_5830060_5830131_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 5673}, "so_5830060_5830131_1": {"length": 34, "quality": 0.9714285714285714, "section_id": 5674}}, "n4659": {"so_5830060_5830131_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 7383}, "so_5830060_5830131_1": {"length": 34, "quality": 0.9714285714285714, "section_id": 7384}}}, "5830060": {"ViewCount": "1404", "Body": "<p><a href=\"http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.jsp?topic=/com.ibm.vacpp6m.doc/language/ref/clrc13cplr038.htm\" rel=\"noreferrer\">Doubt originated from here</a></p>\n<p><br/></p>\n<pre><code>int g() {\n   cout &lt;&lt; \"In function g()\" &lt;&lt; endl;\n   return 0;\n}\n\nclass X {\npublic:\n  static int g() {\n     cout &lt;&lt; \"In static member function X::g()\" &lt;&lt; endl;\n     return 1;\n  }\n};\n\nclass Y: public X {\n   public:\n  static int i;\n};\n\nint Y::i = g();   \n</code></pre>\n<p>initially I though that as symbol resolution happens from inner most scope to outer most scope, that is why x::g() would be called.<br> but then I closely noticed the code </br></p>\n<pre><code>int Y::i = g();\n</code></pre>\n<p>how are we able to access X::g() without namescope? <br>\nAnd scope in which this statement lies should be global, not Y:: or X:: , so symbol resolution should give global version of the function g()?</br></p>\n", "AcceptedAnswerId": "5830131", "Title": "class static member function chosen over global function with same name?", "CreationDate": "2011-04-29T08:57:41.247", "Id": "5830060", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-04-29T13:10:28.547", "Score": "10", "OwnerUserId": "183570", "Tags": "<c++><static-methods>", "AnswerCount": "2"}, "5830107": {"Id": "5830107", "PostTypeId": "2", "Body": "<p>This is because you use <code>int Y::i =...</code>, note the <code>Y::</code>. That's why, it actually looks for <code>g()</code> inside <code>Y</code>, which is <code>X::g()</code>, because <code>Y</code> derives <code>X</code>.</p>\n<hr>\n<p>Addition: For example, if you put <code>int i = g();</code> after <code>int Y::i = g();</code>, there result would be:</p>\n<pre>In static member function X::g()\nIn function g()</pre>\n<hr>\n<p><strike> <strong>EDIT</strong>: exactly - Argument-dependent name lookup. I couldn't remember how this is called at the beginning. Thanks Nawaz's answer (: </strike></p>\n<p><strike><strong>EDIT2</strong>: OK, Nawaz found the correct explanation, it's in the standard and it seems not to be \"Argument-dependent name lookup\". But the logic is still <em>absolutely</em> the same.</strike></p>\n</hr></hr>", "LastEditorUserId": "435800", "LastActivityDate": "2011-04-29T13:10:28.547", "Score": "9", "CreationDate": "2011-04-29T09:02:31.213", "ParentId": "5830060", "CommentCount": "12", "OwnerUserId": "435800", "LastEditDate": "2011-04-29T13:10:28.547"}});