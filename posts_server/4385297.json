post_cb({"4385743": {"ParentId": "4385297", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I believe that 13.5.8/7 clarifies this issue :</p>\n<blockquote>\n<p id=\"so_4385297_4385743_0\">Note: literal operators and literal\n  operator templates are usually invoked\n  implicitly through user-defined\n  literals (2.14.8). However, <strong>except for\n  the constraints described above</strong>, they\n  are ordinary namespace-scope functions\n  and function templates. In particular,\n  they are looked up like ordinary\n  functions and function templates and\n  they follow the same overload\n  resolution rules.</p>\n</blockquote>\n<p>From my understanding, regular overload resolution rules are only implied for literal operators when called <em>outside</em> an implicit invocation through user-defined literals.</p>\n<p>So I think that if 2 &amp; 3 are defined, <code>13_xx</code> calls 2 (the raw literal operator).</p>\n", "OwnerUserId": "451980", "LastEditorUserId": "451980", "LastEditDate": "2010-12-08T11:36:11.287", "Id": "4385743", "Score": "4", "CreationDate": "2010-12-08T09:07:58.997", "LastActivityDate": "2010-12-08T11:36:11.287"}, "4385297": {"CommentCount": "0", "AcceptedAnswerId": "4385743", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2010-12-08T07:59:01.097", "LastActivityDate": "2012-06-04T23:46:36.493", "LastEditDate": "2012-06-04T23:46:36.493", "ViewCount": "887", "FavoriteCount": "0", "Title": "Overloading rules for User-defined-literals in c++0x", "Id": "4385297", "Score": "2", "Body": "<p>I am a little confused about overloading rules,</p>\n<p>let's say there are following literal operators,</p>\n<pre><code>unsigned long long operator \"\" _xx(unsigned long long cooked_literal_int); //1\nunsigned long long operator \"\" _xx(const char * raw_literal_string); // 2\nunsigned long long operator \"\" _xx(long double cooked_literal_double); // 3\n</code></pre>\n<p>if both 1, 2, &amp; 3 are defined, the overloading is obvious,</p>\n<pre><code>13_xx //call 1\n13.5_xx //call 3\n</code></pre>\n<p>if 1 &amp; 2 are defined, </p>\n<pre><code>13_xx //call 1\n13.5_xx //call 2\n</code></pre>\n<p>if 2 &amp; 3 are defined</p>\n<pre><code>13_xx // call 2 or 3??\n13.5_xx // call 3\n</code></pre>\n<p>The confusion comes from latest c++0x standard n3225 2.14.8/3,</p>\n<blockquote>\n<p id=\"so_4385297_4385297_0\">If L is a user-defined-integer-literal, let n be the literal without its ud-suffix. If S contains a literal operator with parameter type unsigned long long, the literal L is treated as a call of the form</p>\n<p id=\"so_4385297_4385297_1\">operator \"\" X (n ULL)</p>\n<p id=\"so_4385297_4385297_2\">Otherwise, S shall contain a raw literal operator or a literal operator template (13.5.8) but not both. If S contains a raw literal operator, the literal L is treated as a call of the form </p>\n<p id=\"so_4385297_4385297_3\">operator \"\" X (\"n\")</p>\n<p id=\"so_4385297_4385297_4\">Otherwise (S contains a literal operator template), L is treated as a call of the form</p>\n<p id=\"so_4385297_4385297_5\">operator \"\" X &lt;\u2019c1\u2019, \u2019c2\u2019, ... \u2019ck\u2019&gt;()</p>\n<p id=\"so_4385297_4385297_6\">where n is the source character sequence c1c2...ck.</p>\n</blockquote>\n<p>This says that, if 1 is present  (an unsigned long long parameter), 13_xx shall call 1, otherwise, 13_xx shall call 2. And from 13.5.8,</p>\n<blockquote>\n<p id=\"so_4385297_4385297_7\">In particular, they are looked up like ordinary functions and function templates\n  and they follow the same overload resolution rules.</p>\n</blockquote>\n<p>From my understanding, if 1 is not present, 13_xx can be implicitly converted to double and call 3.</p>\n<p>Therefore if 1 is not present, both 2 &amp; 3 are somehow valid from the standard description.</p>\n<p>I hope someone can help me clear my doubts. Many thanks.</p>\n", "Tags": "<c++><c++11><user-defined-literals>", "OwnerUserId": "534498", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_4385297_4385297_6": {"section_id": 5313, "quality": 0.8, "length": 4}, "so_4385297_4385297_4": {"section_id": 5369, "quality": 1.0, "length": 8}, "so_4385297_4385297_7": {"section_id": 673, "quality": 1.0, "length": 14}, "so_4385297_4385743_0": {"section_id": 673, "quality": 0.9210526315789473, "length": 35}, "so_4385297_4385297_0": {"section_id": 5369, "quality": 1.0, "length": 17}, "so_4385297_4385297_2": {"section_id": 5369, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_4385297_4385297_6": {"section_id": 5110, "quality": 0.8, "length": 4}, "so_4385297_4385297_4": {"section_id": 5165, "quality": 1.0, "length": 8}, "so_4385297_4385297_7": {"section_id": 663, "quality": 1.0, "length": 14}, "so_4385297_4385743_0": {"section_id": 663, "quality": 0.9210526315789473, "length": 35}, "so_4385297_4385297_0": {"section_id": 5165, "quality": 1.0, "length": 17}, "so_4385297_4385297_2": {"section_id": 5165, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_4385297_4385297_6": {"section_id": 6737, "quality": 0.8, "length": 4}, "so_4385297_4385297_7": {"section_id": 701, "quality": 1.0, "length": 14}, "so_4385297_4385743_0": {"section_id": 701, "quality": 0.9210526315789473, "length": 35}, "so_4385297_4385297_0": {"section_id": 6794, "quality": 1.0, "length": 17}, "so_4385297_4385297_2": {"section_id": 6794, "quality": 0.9473684210526315, "length": 18}, "so_4385297_4385297_4": {"section_id": 6794, "quality": 1.0, "length": 8}}}});