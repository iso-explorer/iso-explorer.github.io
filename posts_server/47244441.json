post_cb({"bq_ids": {"n4140": {"so_47244441_47244441_2": {"length": 24, "quality": 0.8275862068965517, "section_id": 5768}, "so_47244441_47244441_5": {"length": 5, "quality": 1.0, "section_id": 5768}}, "n3337": {"so_47244441_47244441_2": {"length": 24, "quality": 0.8275862068965517, "section_id": 5541}, "so_47244441_47244441_5": {"length": 5, "quality": 1.0, "section_id": 5541}}, "n4659": {"so_47244441_47244441_6": {"length": 6, "quality": 0.6, "section_id": 4058}, "so_47244441_47244441_2": {"length": 23, "quality": 0.7931034482758621, "section_id": 7225}, "so_47244441_47244441_5": {"length": 4, "quality": 0.8, "section_id": 4058}}}, "47244687": {"Id": "47244687", "PostTypeId": "2", "Body": "<p>3.9 is defining \"dynamic type of a glvalue\", and 3.10 is defining \"dynamic type of a prvalue\".</p>\n<p>The document is using slightly unusual formatting. These two sections should be taken as separate definitions with no overlap. (All expressions are either glvalues or prvalues, but not both at once).</p>\n", "LastActivityDate": "2017-11-12T01:52:54.567", "CommentCount": "0", "CreationDate": "2017-11-12T01:52:54.567", "ParentId": "47244441", "Score": "1", "OwnerUserId": "1505939"}, "47244441": {"ViewCount": "37", "Body": "<p><strong>[N4687]</strong></p>\n<blockquote>\n<p id=\"so_47244441_47244441_0\">3.9 [defns.dynamic.type]</p>\n<p id=\"so_47244441_47244441_1\"><strong>dynamic type</strong></p>\n<p id=\"so_47244441_47244441_2\">\u2329glvalue\u232a type of the most derived object (4.5) to which the glvalue refers\n  [Example: If a pointer (11.3.1) p whose static type is \u201cpointer to class B\u201d is pointing to an object of class D,\n  derived from B (Clause 13), the dynamic type of the expression *p is \u201cD\u201d. References (11.3.2) are treated\n  similarly. \u2014 end example ]</p>\n<p id=\"so_47244441_47244441_3\">3.10 [defns.dynamic.type.prvalue]</p>\n<p id=\"so_47244441_47244441_4\"><strong>dynamic type</strong></p>\n<p id=\"so_47244441_47244441_5\">\u2329prvalue\u232a static type of the prvalue expression</p>\n</blockquote>\n<p>Most questions about dynamic type concrete on 3.9.\nbut I still can't understand the meaning of 3.10. </p>\n<p>Here is <a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow noreferrer\">cppreference</a>'s description:</p>\n<blockquote>\n<p id=\"so_47244441_47244441_6\">A prvalue cannot be polymorphic: the dynamic type of the object it identifies is always the type of the expression.</p>\n</blockquote>\n<h2>Update:</h2>\n<p>3.9 tells me dynamic type means the determination of type has to be delayed at runtime. </p>\n<p>I have several questions about 3.10: </p>\n<ol>\n<li><p>What the relationship between 3.9 and 3.10</p></li>\n<li><p>Why prvalue is emphasized? </p></li>\n<li><p>Does it mean prvalue's dynamic and static type is always the same?</p></li>\n</ol>\n", "AcceptedAnswerId": "47244635", "Title": "How to understand \"dynamic type: \u2329prvalue\u232a static type of the prvalue expression\"\"", "CreationDate": "2017-11-12T00:58:54.030", "Id": "47244441", "CommentCount": "3", "LastEditDate": "2017-11-12T01:25:11.713", "PostTypeId": "1", "LastEditorUserId": "6949852", "LastActivityDate": "2017-11-13T21:25:59.377", "Score": "0", "OwnerUserId": "6949852", "Tags": "<c++>", "AnswerCount": "2"}, "47244635": {"Id": "47244635", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47244441_47244635_0\">What the relationship between 3.9 and 3.10</p>\n</blockquote>\n<p>They both define \"dynamic type\". Informally, the dynamic type of an expression is the type of the complete object that contains the object denoted by the expression.</p>\n<blockquote>\n<p id=\"so_47244441_47244635_1\">Why prvalue is emphasized?</p>\n</blockquote>\n<p>Perhaps for the sake of clarity, they decided to explain separately what \"dynamic type\" means for glvalues and prvalues. The philosophy (before C++17) is that a glvalue is something that <em>refers to</em> an object or function while a prvalue is the <em>value of</em> an object, so they are somewhat different simply by nature.</p>\n<blockquote>\n<p id=\"so_47244441_47244635_2\">Does it mean prvalue's dynamic and static type is always the same?</p>\n</blockquote>\n<p>Yes. While it's possible to create a glvalue that refers to a base class subobject of another object, a prvalue doesn't refer to anything, and, as such, is what it is. Any attempt to create a prvalue that's a subobject of another object will just create a copy of the subobject instead, and that copy is a complete object.</p>\n", "LastEditorUserId": "481267", "LastActivityDate": "2017-11-13T21:25:59.377", "Score": "3", "CreationDate": "2017-11-12T01:42:05.907", "ParentId": "47244441", "CommentCount": "0", "OwnerUserId": "481267", "LastEditDate": "2017-11-13T21:25:59.377"}});