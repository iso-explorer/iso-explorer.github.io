post_cb({"22736198": {"Id": "22736198", "PostTypeId": "2", "Body": "<p>C++11 Standard (draft n3337):</p>\n<blockquote>\n<p id=\"so_22736150_22736198_0\">17.6.4.3.2 Global names [global.names]</p>\n<p id=\"so_22736150_22736198_1\">Certain sets of names and function signatures are always reserved to the implementation:</p>\n<p id=\"so_22736150_22736198_2\">\u2014 Each name that contains a double underscore __ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.</p>\n<p id=\"so_22736150_22736198_3\">\u2014 Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</p>\n</blockquote>\n<p>Other than these there aren't any restrictions on the (identifier) names you choose for global variables.</p>\n<p>It's a convention used by some to prefix global variables by <code>g_</code>, member variables by <code>m_</code>, etc. This is a matter of choice; the language itself doesn't impose such a requirement. So you're free to name them anything and prefix them with anything as long as the identifier starts with an English alphabet.</p>\n<p>As for the usage of global variables, I would say if you are just beginning to learn C++, use them, get hurt and then realize how they are bad; you'll see why they are always condemned by experienced programmers. Just telling they're bad would add little value, some things are better learned by experience.</p>\n", "LastEditorUserId": "183120", "LastActivityDate": "2014-03-29T20:18:56.383", "Score": "0", "CreationDate": "2014-03-29T20:04:03.797", "ParentId": "22736150", "CommentCount": "1", "LastEditDate": "2014-03-29T20:18:56.383", "OwnerUserId": "183120"}, "22736219": {"Id": "22736219", "PostTypeId": "2", "Body": "<p>It's better to use a prefix than nothing that distinguishes global variables as such. But</p>\n<ul>\n<li><p>it's even better to avoid global variables to the degree possible, and</p></li>\n<li><p>instead of a C style prefix, in C++ you can use a named <strong>namespace</strong>.</p></li>\n</ul>\n<p>It also has many advantages to avoid Microsoft's <code>T</code> macro silliness. It's in support of Windows 9x, and you're probably not targeting Windows 9x. Also, it has many advantages, not the least for maintenance, to avoid Microsoft's silly Hungarian notation thing, that is, prefixes like <code>sz</code>, which was in support of Microsoft's 1980's <em>Programmers Workbench</em> help system, which just like Windows 98 is not very relevant any longer.</p>\n<p>Also, it can be advantageous to use <code>const</code> wherever practically possible.</p>\n<p>Note that <code>const</code> at namespace level implies static storage class, so an explicit <code>static</code> is then no longer necessary.</p>\n<p>Thus, instead of the current</p>\n<pre><code>// The main window class name.\nstatic TCHAR g_szWindowClass[] = _T(\"win32app\");\n</code></pre>\n<p>do</p>\n<pre><code>namespace g {\n    auto const windowClassName = L\"win32app\";\n}\n</code></pre>\n<p>with</p>\n<ul>\n<li><p>C++ namespace <code>g</code> instead of C prefix <code>g_</code>,</p></li>\n<li><p><code>const</code> added, guaranteeing that this variable is not modified, and</p></li>\n<li><p>direct use of wide character literal instead of Microsoft Windows 9x <code>T</code> macros.</p></li>\n</ul>\n<p>Then you can refer to <code>g::windowClassName</code>, or without the prefix after a <code>using namespace g;</code>, or even with an alias for <code>g</code>.</p>\n<p>The particular braces convention I use for namespaces is in support of nested namespaces without the indentation hassle. Unfortunately that's not supported by common editors.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2014-03-29T20:24:18.750", "Score": "1", "CreationDate": "2014-03-29T20:05:19.817", "ParentId": "22736150", "CommentCount": "3", "LastEditDate": "2014-03-29T20:24:18.750", "OwnerUserId": "464581"}, "bq_ids": {"n4140": {"so_22736150_22736198_1": {"length": 8, "quality": 1.0, "section_id": 6307}, "so_22736150_22736198_3": {"length": 10, "quality": 1.0, "section_id": 6307}, "so_22736150_22736198_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 6307}}, "n3337": {"so_22736150_22736198_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 6064}, "so_22736150_22736198_3": {"length": 10, "quality": 1.0, "section_id": 6064}, "so_22736150_22736198_1": {"length": 8, "quality": 1.0, "section_id": 6064}}, "n4659": {"so_22736150_22736198_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 6756}, "so_22736150_22736198_3": {"length": 9, "quality": 0.9, "section_id": 6756}, "so_22736150_22736198_1": {"length": 5, "quality": 0.625, "section_id": 7844}}}, "22736285": {"Id": "22736285", "PostTypeId": "2", "Body": "<p>The most obvious definition of a <em>global variable</em> is a variable declared at namespace scope (including the outermost namespace).</p>\n<p>Now, you could argue that a variable declared at namespace scope which is also declared <code>static</code> and, thus, isn't visible outside the given translation unit. Likewise, a variable declared in an unnamed namespace might be considered non-global. However, both of these kinds of variables shared many of the the bad properties of global variables. For example, they introduce a serialization point when being accessed from multiple threads.</p>\n<p>Thus, I consider actually a wider range of variables to be global, i.e., also <code>static</code> data members in classes and function locale <code>static</code> variables. Each of these also exists just once throughout a a program. Just because these constructs happen to be used for some [anti] design patterns (notable Singleton) doesn't magically bless global variables!</p>\n<p>With respect to prefixing variables names: do <em>not</em> include type prefix into your variable names! In C++ types are already sufficiently checked by the compiler. Including the type tends to result in eventually incorrect names. Specifically with respect to global variables, here is my recommendation for their prefix: whenever you want to use the prefix for a global variable stop whatever you are doing! You are in the process of constructing a problem and you should rather seek to change the design to remove the need for the global variable!</p>\n", "LastActivityDate": "2014-03-29T20:10:10.947", "Score": "0", "CreationDate": "2014-03-29T20:10:10.947", "ParentId": "22736150", "CommentCount": "3", "OwnerUserId": "1120273"}, "22736150": {"ViewCount": "112", "Body": "<p>First of all, I'm new to c++, and 'trying' to prefix my variables.\nBut it isn't very clear to me.\nSo my question is, is it correct to prefix static variables with \"g_\"?\nThank you!</p>\n<pre><code>using namespace std;\n\n// The main window class name.\nstatic TCHAR g_szWindowClass[] = _T(\"win32app\");\n\n// The string that appears in the application's title bar.\nstatic TCHAR g_szTitle[] = _T(\"Win32 App\");\n\n...\n</code></pre>\n", "AcceptedAnswerId": "22736285", "Title": "Global variables, what are they exactly?", "CreationDate": "2014-03-29T19:59:40.593", "Id": "22736150", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2014-03-29T20:24:18.750", "Score": "0", "OwnerUserId": "3476584", "Tags": "<c++><variables><global>", "AnswerCount": "4"}, "22736277": {"Id": "22736277", "PostTypeId": "2", "Body": "<p>C++ has no official naming conventions. It does have a few <strong>rules</strong> for variable names, or identifers in general, which you have to follow, but other than that, names are entirely up to you, with all the flexibility and dangers it brings (much like the rest of the language).</p>\n<p>Here is a good overview of the rules: <a href=\"http://en.cppreference.com/w/cpp/keyword\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/keyword</a></p>\n<p>So, for example, <code>_G_szTitle</code> would be wrong, but <code>g_szTitle</code> is OK.</p>\n<p>The real problem is that you almost certainly do not want to use globals. Global variables are almost always <strong>bad design</strong>. Avoid them.</p>\n<p>Another, smaller, problem is that you use the so-called \"Hungarian notation\". Google a bit for it to find out why many people (myself included) are opposed to it, especially in a language like C++.</p>\n", "LastActivityDate": "2014-03-29T20:09:36.800", "Score": "1", "CreationDate": "2014-03-29T20:09:36.800", "ParentId": "22736150", "CommentCount": "3", "OwnerUserId": "3313064"}});