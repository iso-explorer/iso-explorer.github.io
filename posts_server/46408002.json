post_cb({"46408392": {"ParentId": "46408002", "Score": "18", "CreationDate": "2017-09-25T15:01:15.443", "Id": "46408392", "OwnerUserId": "4573247", "LastActivityDate": "2017-09-25T15:01:15.443", "Body": "<blockquote>\n<p id=\"so_46408002_46408392_0\"><em>\"As the second one looks like a function call, hence there is no guaranteed evaluation order in the parameters?\"</em></p>\n</blockquote>\n<p>Indeed. <a href=\"https://timsong-cpp.github.io/cppwp/expr.call\" rel=\"noreferrer\">[expr.call]/5</a> contains an example specifically covering the difference between the two cases covered in your question [<strong>emphasis mine</strong>]:</p>\n<blockquote>\n<p id=\"so_46408002_46408392_1\">The postfix-expression is sequenced before each expression in the\n  expression-list and any default argument. The initialization of a\n  parameter, including every associated value computation and side\n  effect, <strong>is indeterminately sequenced with respect to that of any other\n  parameter</strong>.</p>\n<p id=\"so_46408002_46408392_2\">...</p>\n<p id=\"so_46408002_46408392_3\">Note: If an operator function is invoked using operator notation,\n  <strong>argument evaluation is sequenced as specified for the built-in\n  operator</strong>; see\n  <a href=\"https://timsong-cpp.github.io/cppwp/over.match.oper\" rel=\"noreferrer\">[over.match.oper]</a>.\n  [ Example:</p>\n<pre><code>struct S {\n  S(int);\n};\nint operator&lt;&lt;(S, int);\nint i, j;\nint x = S(i=1) &lt;&lt; (i=2);\nint y = operator&lt;&lt;(S(j=1), j=2);\n</code></pre>\n<p id=\"so_46408002_46408392_4\">After performing the initializations, the value of <code>i</code> is <code>2</code> (see\n  <a href=\"https://timsong-cpp.github.io/cppwp/expr.shift\" rel=\"noreferrer\">[expr.shift]</a>), but <strong>it is unspecified</strong> whether the value of <code>j</code> is\n  <code>1</code> or <code>2</code>.</p>\n<p id=\"so_46408002_46408392_5\">\u2014\u2009end example\u2009]</p>\n</blockquote>\n", "PostTypeId": "2", "CommentCount": "2"}, "46408002": {"Tags": "<c++><language-lawyer><standards><c++1z>", "ViewCount": "327", "LastEditDate": "2017-09-25T14:48:25.333", "CreationDate": "2017-09-25T14:43:07.393", "LastEditorUserId": "636019", "Title": "c++17 evaluation order with operator overloading functions", "CommentCount": "3", "AcceptedAnswerId": "46408392", "Score": "16", "OwnerUserId": "7036212", "Id": "46408002", "LastActivityDate": "2017-09-25T15:01:15.443", "Body": "<p>Regarding this question</p>\n<p><a href=\"https://stackoverflow.com/questions/38501587/what-are-the-evaluation-order-guarantees-introduced-by-c17\">What are the evaluation order guarantees introduced by C++17?</a></p>\n<p>With this specification</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf</a></p>\n<p>And this text from the specification</p>\n<blockquote>\n<p id=\"so_46408002_46408002_0\">Furthermore, we suggest the following additional rule: <strong>the order of\n  evaluation of an expression involving an overloaded operator is\n  determined by the order associated with the corresponding built-in\n  operator, not the rules for function calls.</strong></p>\n</blockquote>\n<p>Does this mean that these two expressions are no longer equivalent?</p>\n<pre><code>a &lt;&lt; b;\noperator&lt;&lt;(a, b);\n</code></pre>\n<p>As the second one looks like a function call, hence there is no guaranteed evaluation order in the parameters?</p>\n", "PostTypeId": "1", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_46408002_46408392_3": {"length": 13, "section_id": 7492, "quality": 0.8125}, "so_46408002_46408392_4": {"length": 9, "section_id": 7492, "quality": 0.9}, "so_46408002_46408392_1": {"length": 22, "section_id": 7492, "quality": 0.9166666666666666}}}});