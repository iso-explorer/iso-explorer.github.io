post_cb({"17504565": {"CommentCount": "6", "ViewCount": "432", "CreationDate": "2013-07-06T15:54:13.143", "LastActivityDate": "2013-07-06T18:02:37.087", "Title": "How much does the C standard library extensibility affect C++ programs?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "17504565", "Score": "14", "Body": "<p>Take this code:</p>\n<pre><code>int issuecode(int i)\n{\n  return 2 * i;\n}\n\nint main(int argc, char **argv)\n{\n  return issuecode(argc);\n}\n</code></pre>\n<p>The way I understand it, if compiled as a C program, it will have undefined behaviour. I reason based on these standard quotes:</p>\n<p><strong>C99, 7.26</strong> (or C11, 7.31)</p>\n<blockquote>\n<p id=\"so_17504565_17504565_0\">The following names are grouped under individual headers for convenience. All external names described below are reserved no matter what headers are included by the program.</p>\n</blockquote>\n<p><strong>C99, 7.26.2</strong> (or C11, 7.31.2)</p>\n<blockquote>\n<p id=\"so_17504565_17504565_1\">Function names that begin with either <code>is</code> or <code>to</code>, and a lowercase letter may be added to the declarations in the <code>&lt;ctype.h&gt;</code> header.</p>\n</blockquote>\n<p><strong>C99, 7.1.3</strong> (or C11, 7.1.3)</p>\n<blockquote>\n<ol>\n<li><p id=\"so_17504565_17504565_2\">Each header declares or defines all identifiers listed in its associated subclause, and optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.</p>\n<p id=\"so_17504565_17504565_3\">[...]</p>\n<ul>\n<li>All identifiers with external linkage in any of the following subclauses (including the future library directions) are always reserved for use as identifiers with external linkage.</li>\n</ul></li>\n<li><p id=\"so_17504565_17504565_4\">[...] If the program declares or defines an identifier in a context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved identifier as a macro name, the behavior is undefined.</p></li>\n</ol>\n</blockquote>\n<p>Based on the above, I believe the function name <code>issuecode</code> is actually reserved for use in <code>&lt;ctype.h&gt;</code>, and so the program technically has UB.</p>\n<p><strong>Question 0</strong> (sanity check): Is my reading of the standard correct and the program's behaviour technically undefined?</p>\n<p><strong>Question 1:</strong> Will the program have UB if compiled as C++ code?</p>\n<p>I believe the answer is \"no,\" as from the following quotes, I'd say the \"future library directions\" of C are not part of the C++ standard library, but I am not really sure.</p>\n<p><strong>C++11, 21.7</strong></p>\n<blockquote>\n<ol>\n<li><p id=\"so_17504565_17504565_5\">Tables 74, 75, 76, 77, 78, and 79 describe headers <code>&lt;cctype&gt;</code>, <code>&lt;cwctype&gt;</code>, <code>&lt;cstring&gt;</code>, <code>&lt;cwchar&gt;</code>, <code>&lt;cstdlib&gt;</code> (character conversions), and <code>&lt;cuchar&gt;</code>, respectively.</p></li>\n<li><p id=\"so_17504565_17504565_6\">The contents of these headers shall be the same as the Standard C Library headers <code>&lt;ctype.h&gt;</code>, <code>&lt;wctype.h&gt;</code>, <code>&lt;string.h&gt;</code>, <code>&lt;wchar.h&gt;</code>, and <code>&lt;stdlib.h&gt;</code> and the C Unicode TR header , respectively, with the following modifications:</p></li>\n</ol>\n</blockquote>\n<p>None of the \"following modifications\" mentions the additional reserved identifiers. Table 74 is a taxative list of function names like <code>isdigit</code> and <code>isalnum</code>.</p>\n<p><strong>C++11, C.2</strong></p>\n<blockquote>\n<p id=\"so_17504565_17504565_7\">1. This subclause summarizes the contents of the C++ standard library included from the Standard C library. It also summarizes the explicit changes in definitions, declarations, or behavior from the Standard C library noted in other subclauses (17.6.1.2, 18.2, 21.7).</p>\n<p id=\"so_17504565_17504565_8\">7. The C++ standard library provides 209 standard functions from the C library, as shown in Table 153.</p>\n</blockquote>\n<p>Again, table 153 is a taxative list.</p>\n<p><strong>Question 2:</strong> Assuming I am wrong on question 1 and the program actually does have UB in C++ as well, would the following change affect this?</p>\n<pre><code>namespace foo {\n\n  int issuecode(int i)\n  {\n    return 2 * i;\n  }\n\n}\n\nusing namespace foo;\n\nint main(int argc, char **argv)\n{\n  return issuecode(argc);\n}\n</code></pre>\n<hr>\n<p><em>Note:</em> The standard quotes are taken from drafts N1256 (C99), N1570 (C11) and N3242 (C++11), which are the latest publically available drafts for the respective language versions.</p>\n</hr>", "Tags": "<c++><c><language-lawyer><undefined-behavior><reserved-words>", "OwnerUserId": "1782465", "AnswerCount": "2"}, "17504919": {"ParentId": "17504565", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_17504565_17504919_0\">The following names are grouped under individual headers for convenience. All external names described below are reserved no matter what headers are included by the program.</p>\n</blockquote>\n<p>There is a predefined list of functions that are reserved, if your function does not conflict name wise there is no issue.</p>\n<blockquote>\n<p id=\"so_17504565_17504919_1\">Function names that begin with either is or to, and a lowercase letter may be added to the declarations in the &lt;ctype.h&gt; header.</p>\n</blockquote>\n<p>The operative term there is <strong>may</strong> be added to the <code>&lt;ctype.h&gt;</code> header. The \"is or to\" bit is just guidance on organization of declarations.</p>\n<p>So there never really was undefined behavior there... </p>\n<p>As for C++ I think this follows the same idea take for example:</p>\n<pre><code>namespace foo{\n  int isupper ( int c );\n}\n\n#include &lt;cctype&gt;\nusing namespace foo;\nint main(void){\n    isupper(92);\n}\n</code></pre>\n<p>That should produce a compiler error because your function collides name wise with the C function, but due to namespaceing this is easily fixable by either appending an <code>std::</code> or a <code>foo::</code> to the beginning of the call.</p>\n", "OwnerUserId": "332733", "LastEditorUserId": "332733", "LastEditDate": "2013-07-06T17:05:10.843", "Id": "17504919", "Score": "1", "CreationDate": "2013-07-06T16:38:28.937", "LastActivityDate": "2013-07-06T17:05:10.843"}, "bq_ids": {"n4140": {"so_17504565_17505654_1": {"section_id": 6259, "quality": 0.9333333333333333, "length": 28}, "so_17504565_17504565_4": {"section_id": 6304, "quality": 0.5625, "length": 9}, "so_17504565_17505654_0": {"section_id": 6254, "quality": 0.8695652173913043, "length": 20}, "so_17504565_17504565_7": {"section_id": 2504, "quality": 0.7391304347826086, "length": 17}, "so_17504565_17504565_8": {"section_id": 2510, "quality": 0.6666666666666666, "length": 6}, "so_17504565_17504565_5": {"section_id": 1886, "quality": 1.0, "length": 12}, "so_17504565_17504565_6": {"section_id": 1887, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_17504565_17505654_0": {"section_id": 6014, "quality": 0.8695652173913043, "length": 20}, "so_17504565_17504565_6": {"section_id": 1876, "quality": 0.8823529411764706, "length": 15}, "so_17504565_17505654_1": {"section_id": 6019, "quality": 0.9333333333333333, "length": 28}, "so_17504565_17504565_4": {"section_id": 6061, "quality": 0.5625, "length": 9}, "so_17504565_17504565_5": {"section_id": 1875, "quality": 1.0, "length": 12}}, "n4659": {"so_17504565_17505654_0": {"section_id": 7758, "quality": 0.8695652173913043, "length": 20}, "so_17504565_17504565_5": {"section_id": 1677, "quality": 0.5833333333333334, "length": 7}, "so_17504565_17504565_4": {"section_id": 7814, "quality": 0.5625, "length": 9}, "so_17504565_17505654_1": {"section_id": 7763, "quality": 0.9333333333333333, "length": 28}}}, "17505654": {"ParentId": "17504565", "CommentCount": "1", "Body": "<p>C++11 17.6.1.2 Headers</p>\n<blockquote>\n<p id=\"so_17504565_17505654_0\">172) The C standard library headers (Annex D.5) also define names within the global namespace, while the C ++ headers for C\n  library facilities (17.6.1.2) <strong>may</strong> also define names within the global namespace.</p>\n<p id=\"so_17504565_17505654_1\">In the C ++ standard library, however, the declarations (except for\n  names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace std. <strong>It is\n  unspecified</strong> whether these names are first declared within the global namespace scope and are then injected\n  into namespace std by explicit using-declarations (7.3.3).</p>\n</blockquote>\n<p>So if you don't include <code>&lt;cctype&gt;</code> the behavior is well-defined. If you do, it is unspecified.</p>\n", "OwnerUserId": "3624760", "PostTypeId": "2", "Id": "17505654", "Score": "0", "CreationDate": "2013-07-06T18:02:37.087", "LastActivityDate": "2013-07-06T18:02:37.087"}});