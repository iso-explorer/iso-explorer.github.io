post_cb({"bq_ids": {"n4140": {"so_42444262_42444707_0": {"length": 24, "quality": 1.0, "section_id": 6007}}, "n3337": {"so_42444262_42444707_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5775}}, "n4659": {"so_42444262_42444707_0": {"length": 24, "quality": 1.0, "section_id": 7506}}}, "42444707": {"Id": "42444707", "PostTypeId": "2", "Body": "<p>Yes. C++14 standard, \u00a75.2.5/4.2, given <code>E1.E2</code>:</p>\n<blockquote>\n<p id=\"so_42444262_42444707_0\">If <code>E2</code> is a non-static data member and the type of <code>E1</code> is \u201c<em>cq1 vq1 X</em>\u201d, and the type of <code>E2</code> is \u201c<em>cq2 vq2 T</em>\u201d, the expression designates the named member of the object designated by the first expression. If <code>E1</code> is an lvalue, then <code>E1.E2</code> is an lvalue; <strong>otherwise <code>E1.E2</code> is an xvalue.</strong></p>\n</blockquote>\n<p>Pedantically, originally C++11 classified this as a prvalue, but such classification was meaningless so it was changed. If the change was applied by a defect report, though, then it's retroactive \u2014 the published C++11 standard document N3290 is wrong and the C++14 document defines C++11 instead. That's likely to be the case, as otherwise would require compilers to implement a subtle difference in behavior between <code>-std=c++11</code> and <code>-std=c++14</code>. I'm lazy to search through DRs right now.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2017-02-24T17:31:57.167", "Score": "9", "CreationDate": "2017-02-24T17:24:07.377", "ParentId": "42444262", "CommentCount": "1", "OwnerUserId": "153285", "LastEditDate": "2017-02-24T17:31:57.167"}, "42444262": {"ViewCount": "310", "Body": "<pre><code>#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct A\n{\n    vector&lt;int&gt; coll;\n};\n\nvoid f(const vector&lt;int&gt;&amp;){}\nvoid f(vector&lt;int&gt;&amp;&amp;){}\n\nint main()\n{\n    f(A().coll); // Is \"A().coll\" an xvalue? \n}\n</code></pre>\n<p><strong>Does C++11 guarantee <code>f(A().coll)</code> will call <code>void f(vector&lt;int&gt;&amp;&amp;)</code>?</strong></p>\n", "AcceptedAnswerId": "42444707", "Title": "Is a data member of a temporary object an xvalue in C++11?", "CreationDate": "2017-02-24T16:59:28.487", "Id": "42444262", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-02-24T17:31:57.167", "Score": "13", "OwnerUserId": "508343", "Tags": "<c++><c++11><move-semantics><rvalue-reference><rvalue>", "AnswerCount": "1"}});