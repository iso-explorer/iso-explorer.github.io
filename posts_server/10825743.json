post_cb({"10825770": {"ParentId": "10825743", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Because <code>operator&gt;&gt;</code> fails if the input is not 0 or 1, and when it fails, it does not consume input.   So the loop consists of reading the digit and then un-reading it, repeatedly.</p>\n<p>Try changing the code like this to see it:</p>\n<pre><code>if (cin &gt;&gt; answer) {\n  cout &lt;&lt; answer &lt;&lt; endl;\n} else {\n  cerr &lt;&lt; \"oops\" &lt;&lt; endl;\n  break;\n}\n</code></pre>\n", "OwnerUserId": "445525", "LastEditorUserId": "445525", "LastEditDate": "2012-05-31T08:19:12.567", "Id": "10825770", "Score": "15", "CreationDate": "2012-05-30T23:46:56.037", "LastActivityDate": "2012-05-31T08:19:12.567"}, "10825743": {"CommentCount": "5", "AcceptedAnswerId": "10825885", "PostTypeId": "1", "LastEditorUserId": "211160", "CreationDate": "2012-05-30T23:42:35.307", "LastActivityDate": "2012-05-31T16:40:08.180", "AnswerCount": "2", "LastEditDate": "2012-05-31T01:59:08.840", "ViewCount": "1971", "FavoriteCount": "1", "Title": "C++ Boolean evaluation", "Id": "10825743", "Score": "22", "Body": "<p>So I'm curious as to why this happens.</p>\n<pre><code>int main()\n{\n   bool answer = true;\n   while(answer)\n   {\n      cout &lt;&lt; \"\\nInput?\\n\";\n      cin &gt;&gt; answer;\n   }\nreturn 0;\n}\n</code></pre>\n<p>Expected behavior:\n0 - Exits program,\n1 - Prompts again,\nAny non-zero integer other than 1 - Prompts again</p>\n<p>Actual behavior:\n0 - As expected,\n1 - As expected,\nAny non-zero integer other than 1 - Infinite loop</p>\n<p>From <a href=\"http://www.learncpp.com/cpp-tutorial/26-boolean-values/\" rel=\"noreferrer\">http://www.learncpp.com/cpp-tutorial/26-boolean-values/</a></p>\n<pre><code>One additional note: when converting integers to booleans, \nthe integer zero resolves to boolean false, \nwhereas non-zero integers all resolve to true.\n</code></pre>\n<p>Why does the program go into an infinite loop?</p>\n", "Tags": "<c++><boolean><type-conversion><iostream>", "OwnerDisplayName": "user611105"}, "10825885": {"ParentId": "10825743", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In effect, the <code>operator&gt;&gt;</code> overload used for reading a <code>bool</code> only allows a value of <code>0</code> or <code>1</code> as valid input.  The operator overload defers to the <code>num_get</code> class template, which reads the next number from the input stream and then behaves as follows (C++11 \u00a722.4.2.1/6):</p>\n<blockquote>\n<ul>\n<li><p id=\"so_10825743_10825885_0\">If the value to be stored is <code>0</code> then <code>false</code> is stored.</p></li>\n<li><p id=\"so_10825743_10825885_1\">If the value is <code>1</code> then <code>true</code> is stored.</p></li>\n<li><p id=\"so_10825743_10825885_2\">Otherwise <code>true</code> is stored and <code>ios_base::failbit</code> is assigned to <code>err</code>.</p></li>\n</ul>\n</blockquote>\n<p>(<code>err</code> here is the error state of the stream from which you are reading; <code>cin</code> in this case.  Note that there is additional language specifying the behavior when the <code>boolalpha</code> manipulator is used, which allows booleans to be inserted and extracted using their names, <code>true</code> and <code>false</code>; I have omitted these other details for brevity.)</p>\n<p>When you input a value other than zero or one, the fail state gets set on the stream, which causes further extractions to fail.  <code>answer</code> is set to <code>true</code> and remains <code>true</code> forever, causing the infinite loop.</p>\n<p>You must test the state of the stream after every extraction, to see whether the extraction succeeded and whether the stream is still in a good state.  For example, you might rewrite your loop as:</p>\n<pre><code>bool answer = true;\nwhile (std::cin &amp;&amp; answer)\n{\n    std::cout &lt;&lt; \"\\nInput?\\n\";\n    std::cin &gt;&gt; answer;\n}\n</code></pre>\n", "OwnerUserId": "151292", "LastEditorUserId": "151292", "LastEditDate": "2012-05-31T16:40:08.180", "Id": "10825885", "Score": "23", "CreationDate": "2012-05-31T00:04:58.523", "LastActivityDate": "2012-05-31T16:40:08.180"}, "bq_ids": {"n4140": {"so_10825743_10825885_2": {"section_id": 6539, "quality": 1.0, "length": 6}, "so_10825743_10825885_0": {"section_id": 6539, "quality": 1.0, "length": 5}, "so_10825743_10825885_1": {"section_id": 6539, "quality": 1.0, "length": 4}}, "n3337": {"so_10825743_10825885_2": {"section_id": 6294, "quality": 1.0, "length": 6}, "so_10825743_10825885_0": {"section_id": 6294, "quality": 1.0, "length": 5}, "so_10825743_10825885_1": {"section_id": 6294, "quality": 1.0, "length": 4}}, "n4659": {"so_10825743_10825885_1": {"section_id": 8021, "quality": 1.0, "length": 4}, "so_10825743_10825885_0": {"section_id": 8021, "quality": 1.0, "length": 5}, "so_10825743_10825885_2": {"section_id": 8021, "quality": 1.0, "length": 6}}}});