post_cb({"16532764": {"ParentId": "16532712", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>There are a few issues with your implementation. One of the most subtle is in the <code>push()</code> member function:</p>\n<pre><code>void push(T* item){\n    stackData[top++] = *item; //insert to data array and increase the top by one\n    //           ^^\n    //           You want pre-increment here!\n}\n</code></pre>\n<p>This is incrementing <code>top</code> and using the <em>old</em> value as an index into <code>stackData</code>. Since <code>top</code> is <code>-1</code> when the stack is empty, your program is actually doing:</p>\n<pre><code>stackData[-1] = *item;\ntop = 0;\n</code></pre>\n<p>Needless to say that the first assignment results in undefined behavior. </p>\n<p>Another source of undefined behavior is the <code>peek()</code> member function, which does not return anything when the stack is empty:</p>\n<pre><code>T* peek(){\n    if(!isEmpty())//check for empty\n        return &amp;stackData[top - 1];\n}\n</code></pre>\n<p>Per paragraph 6.6.3/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16532712_16532764_0\">[...] Flowing off the end of a function is equivalent to a return with no value; this results in undefined\n  behavior in a value-returning function.</p>\n</blockquote>\n<p>But that's not the only issue: the other problem is with the access of <code>stackData</code>:</p>\n<pre><code>return &amp;stackData[top - 1];\n</code></pre>\n<p>When <code>top</code> is not equal to or greater than one, this will also result in undefined behavior, since you would be taking the address of a (non-)object located at a negative address in the array.</p>\n<p>Also, I suggest to rewrite <code>isEmpty()</code> and <code>isFull()</code> as follows:</p>\n<pre><code>bool isEmpty(){\n    return (top == -1);\n}\n\nbool isFull(){\n   return (top == maxSize - 1);\n}\n</code></pre>\n<p>As a general advice, consider not using the value <code>-1</code> for <code>top</code> when the stack is empty.  <a href=\"https://stackoverflow.com/questions/16532712/template-stack-and-lifo-c/16532764#comment23742820_16532764\">As Ben Voigt mentions in the comments</a>, this is leading you to a lot of off-by-one errors.</p>\n<p>Also, <a href=\"https://stackoverflow.com/questions/16532712/template-stack-and-lifo-c/16532764?noredirect=1#comment23743034_16532764\">as pointed out by DyP</a>, your destructor is not freeing the memory allocated in the constructor, so your <code>StackTest</code> object is leaking memory. And after doing that, since we're at it, you may want to have a look at the so-called <a href=\"https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three\">Rule of Three</a>, that your program would be violating.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:29:22.727", "Id": "16532764", "Score": "0", "CreationDate": "2013-05-13T23:28:10.520", "LastActivityDate": "2013-05-13T23:54:01.167"}, "bq_ids": {"n4140": {"so_16532712_16532764_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_16532712_16532764_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_16532712_16532764_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}, "16532712": {"CommentCount": "7", "ViewCount": "2492", "CreationDate": "2013-05-13T23:20:25.890", "LastActivityDate": "2013-05-13T23:54:01.167", "Title": "Template Stack and LIFO C++", "PostTypeId": "1", "Id": "16532712", "Score": "0", "Body": "<p>So I'm trying to learn about Templates and the Fifo and Lifo stack stuff. I've been playing around with some code that deals with this, and I can get the int data to do what I want for testing but I can't for the life of me figure out how to get this to work with a string. \nThe way I have the code keeps crashing on me, but doesn't give me any errors, so I thought I'd pop in here and see if anybody could tell me what I'm doing wrong. Here's my code:</p>\n<pre><code>-----------//my header//---------------------\n\n#include &lt;stdlib.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n#ifndef STACK_H_\n#define STACK_H_\n\ntemplate&lt;class T&gt; \nclass StackTest\n{\n\nprivate:\nunsigned int maxSize;\nT *stackData;\nint top;\n\npublic:\nStackTest(int size){\n    stackData = new T[size];//to hold the T \u200ctype data items \n    top = -1;//no items on the stack\n    maxSize = size;//set maximum size that stack can hold\n}\n\nvirtual ~StackTest(){}\n\nint count(){\n    return top + 1;\n}\n\nbool isEmpty(){\n    return top == -1 ? true : false;\n}\n\nbool isFull(){\n    return top == maxSize - 1 ? true : false;\n}\n\nT* peek(){\n    if(!isEmpty())//check for empty\n        return &amp;stackData[top - 1];\n}\n\nT* pop(){\n    if(!isEmpty()){\n        top -= 1;//decrease the top by 1 to indicate the delete\n        return &amp;stackData[top];//return deleted item\n    }\n    return NULL;\n}\n\nvoid push(T* item){\n    stackData[top++] = *item;//insert to data array and increase the top by one \n}\n};\n\n\n#endif /* STACK_H_ */\n\n-----------//my main//---------------\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include \"Pair.h\"\n\nusing namespace std;\n\nint main() {\n\nint dataTest;\nstring strTest;\nStackTest&lt;int&gt; intStack(10);\nStackTest&lt;string&gt; stringStack(50);\n\n//Insert data into the stack\ndataTest = 3;\nintStack.push(&amp;dataTest);\ndataTest = 4;\nintStack.push(&amp;dataTest);\ndataTest = 5;\nintStack.push(&amp;dataTest);\ndataTest = 6;\nintStack.push(&amp;dataTest);\nstrTest = \"test\";\nstringStack.push(&amp;strTest);\n\n//Show the top item\ncout &lt;&lt; *intStack.peek() &lt;&lt; endl;\ncout &lt;&lt; *stringStack.peek() &lt;&lt; endl;\n\n//Pull the top item out (twice)\nintStack.pop();\nintStack.pop();\n\n//Show the new top item\ncout &lt;&lt; *intStack.peek() &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>\n<p>So if anyone feels like giving me some pointers I would really appreciate it, thanks.</p>\n", "Tags": "<c++><templates><stack>", "OwnerUserId": "2197339", "AnswerCount": "1"}});