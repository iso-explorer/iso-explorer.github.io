post_cb({"17790213": {"ParentId": "17790127", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>You are setting the first element to be a null termination character. The other elements gain partial initialisation to zero: <a href=\"https://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure\">C and C++ : Partial initialization of automatic structure</a></p>\n", "OwnerUserId": "2068642", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:12:59.617", "Id": "17790213", "Score": "1", "CreationDate": "2013-07-22T14:30:13.987", "LastActivityDate": "2013-07-22T14:39:00.630"}, "17790202": {"ParentId": "17790127", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>It's a 3-character array initialized to three null characters.</p>\n<p><strong>EDIT (after comments below):</strong></p>\n<p>From K&amp;R:</p>\n<blockquote>\n<p id=\"so_17790127_17790202_0\">If there are fewer initializers for an array than the number specified, the missing elements will be zero for external, static, and automatic variables.</p>\n<p id=\"so_17790127_17790202_1\">...</p>\n<p id=\"so_17790127_17790202_2\">Character arrays are a special case of initialization; a string may be used instead of the braces and commas notation:</p>\n<p id=\"so_17790127_17790202_3\">char pattern[] = \"ould\";</p>\n<p id=\"so_17790127_17790202_4\">is a shorthand for the longer but equivalent</p>\n<p id=\"so_17790127_17790202_5\">char pattern[] = { 'o', 'u', 'l', 'd', '\\0' };</p>\n</blockquote>\n<p>From a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">draft copy of the C++ standard, section 8.5.2, Character arrays</a>:</p>\n<blockquote>\n<p id=\"so_17790127_17790202_6\">\"1. A char array (whether plain char, signed char, or unsigned char), char16_t array, char32_t array, or wchar_t array can be initialized by a narrow character literal, char16_t string literal, char32_t string literal, or wide string literal, respectively, or by an appropriately-typed string literal enclosed in braces. Successive characters of the value of the string literal initialize the elements of the array. [Example:</p>\n<p id=\"so_17790127_17790202_7\">char msg[] = \"Syntax error on line %s\\n\";</p>\n<p id=\"so_17790127_17790202_8\">shows a character array whose members are initialized with a string-literal. Note that because \u2019\\n\u2019 is a single character and because a trailing \u2019\\0\u2019 is appended, sizeof(msg) is 25. \u2014 end example ]</p>\n<p id=\"so_17790127_17790202_9\">... </p>\n<p id=\"so_17790127_17790202_10\">\"3. If there are fewer initializers than there are array elements, each element not explicitly initialized shall be zero-initialized (8.5).\"</p>\n</blockquote>\n", "OwnerUserId": "202009", "LastEditorUserId": "202009", "LastEditDate": "2013-08-08T14:14:49.780", "Id": "17790202", "Score": "9", "CreationDate": "2013-07-22T14:29:52.530", "LastActivityDate": "2013-08-08T14:14:49.780"}, "17790127": {"CommentCount": "15", "AcceptedAnswerId": "17790207", "PostTypeId": "1", "LastEditorUserId": "1849664", "CreationDate": "2013-07-22T14:27:03.657", "LastActivityDate": "2013-08-08T18:22:38.783", "LastEditDate": "2013-08-07T20:43:17.543", "ViewCount": "2591", "FavoriteCount": "0", "Title": "What is meant by char temp[3]=\"\";?", "Id": "17790127", "Score": "6", "Body": "<p>Normally in <code>C++</code>, character arrays are initialized in the following way,  </p>\n<pre><code>char example[5]=\"cat\";\n</code></pre>\n<p>What if you initialize it with <code>\"\"</code> (just a double quotes without spaces)?<br>\nWhat will be the elements in the character array after initialization?  </br></p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "2607152", "AnswerCount": "4"}, "17790207": {"ParentId": "17790127", "PostTypeId": "2", "CommentCount": "28", "Body": "<p>The declaration </p>\n<pre><code>char    temp[3] = \"\";\n</code></pre>\n<p>is same as </p>\n<pre><code>char    temp[3] = {0};\n                  // `\\0` ascii value is 0\n</code></pre>\n<p>remember remaining elements of half initialized array initialized with <code>0</code>.</p>\n<p>Point :<code>char temp[3] = \"\"</code> is <em>easy</em> to <kbd>type</kbd>(means writing), so its preferable. </p>\n<p>Look even compare it with this declaration <code>char temp[3] = {'\\0'};</code>  (it need more chars to <kbd>type</kbd>) Whereas in <code>char    temp[3] = \"\";</code>  is simple (even no type mismatch - int/char). </p>\n", "OwnerUserId": "1673391", "LastEditorUserId": "1673391", "LastEditDate": "2013-08-08T18:22:38.783", "Id": "17790207", "Score": "12", "CreationDate": "2013-07-22T14:30:04.100", "LastActivityDate": "2013-08-08T18:22:38.783"}, "bq_ids": {"n4140": {"so_17790127_17790202_6": {"section_id": 3314, "quality": 0.7727272727272727, "length": 34}, "so_17790127_17790202_8": {"section_id": 3314, "quality": 0.8823529411764706, "length": 15}, "so_17790127_17790202_10": {"section_id": 3316, "quality": 1.0, "length": 12}}, "n3337": {"so_17790127_17790202_6": {"section_id": 3184, "quality": 0.9772727272727273, "length": 43}, "so_17790127_17790202_8": {"section_id": 3184, "quality": 0.8823529411764706, "length": 15}, "so_17790127_17790202_10": {"section_id": 3186, "quality": 1.0, "length": 12}}, "n4659": {"so_17790127_17790202_6": {"section_id": 4080, "quality": 0.7727272727272727, "length": 34}, "so_17790127_17790202_8": {"section_id": 4080, "quality": 0.8823529411764706, "length": 15}, "so_17790127_17790202_10": {"section_id": 4082, "quality": 1.0, "length": 12}}}, "17790194": {"ParentId": "17790127", "CommentCount": "3", "Body": "<p>A blank string. The first char will be the null terminator. After an experiment, it appears the remaining characters are set to 0 (which is also null terminator).</p>\n", "OwnerUserId": "2068573", "PostTypeId": "2", "Id": "17790194", "Score": "2", "CreationDate": "2013-07-22T14:29:32.003", "LastActivityDate": "2013-07-22T14:29:32.003"}});