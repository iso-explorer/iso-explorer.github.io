post_cb({"27364969": {"ParentId": "27364787", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>A glvalue is anything that isn't a prvalue. Examples are names of entities, or expressions that have reference type (regardless of the kind of the reference).</p>\n<pre><code>int i;\nint* p = &amp;i;\nint&amp; f();\nint&amp;&amp; g();\n\nint h();\n\nh() // prvalue\ng() // glvalue (xvalue)\nf() // glvalue (lvalue)\ni   // glvalue (lvalue)\n*p  // glvalue (lvalue)\n\nstd::move(i)  // glvalue (xvalue)\n</code></pre>\n<p>As the quote in your question clearly states, the category <em>glvalue</em> includes all xvalues and lvalues. lvalues, xvalues and prvalues are complementary categories:</p>\n<blockquote>\n<p id=\"so_27364787_27364969_0\">Every expression belongs to exactly one of the fundamental\n  classifications in this taxonomy: lvalue, xvalue, or prvalue.</p>\n</blockquote>\n<p>You should be familiar with lvalues. Now consider what xvalues are, [expr]/6:</p>\n<blockquote>\n<p id=\"so_27364787_27364969_1\">[ <em>Note:</em> An expression is an xvalue if it is:</p>\n<ul>\n<li>the result of calling a function, whether implicitly or explicitly, whose return type is an rvalue reference to object type,</li>\n<li>a cast to an rvalue reference to object type,</li>\n<li>a class member access expression designating a non-static data member of non-reference type in which the object expression is an\n  xvalue, or</li>\n<li>a <code>.*</code> pointer-to-member expression in which the first operand is an xvalue and the second operand is a pointer to data member.</li>\n</ul>\n<p id=\"so_27364787_27364969_2\">[\u2026] <em>\u2014 end note</em> ]</p>\n</blockquote>\n<p>So, roughly speaking, you could think of glvalues as <br><strong>\"All lvalues plus expressions involving rvalue references\".</strong><br>\nWe use it to describe expressions that refer to objects rather than \"being\" those objects.</br></br></p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-12-08T19:22:21.630", "Id": "27364969", "Score": "4", "CreationDate": "2014-12-08T19:00:03.993", "LastActivityDate": "2014-12-08T19:22:21.630"}, "27364787": {"CommentCount": "2", "ViewCount": "596", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-12-08T18:48:01.983", "LastActivityDate": "2014-12-08T19:22:21.630", "Title": "Glvalue real examples and explanation?", "AcceptedAnswerId": "27364969", "LastEditDate": "2017-05-23T12:33:08.790", "Id": "27364787", "Score": "3", "Body": "<p>I know what 'xvalues', 'prvalues', 'rvalues' and 'lvalues' are, how they are helpful and I've seen real examples of them. But I've never understand what a 'glvalue' is, and how it co-operate with the others. I've searched everywhere but with no-luck even in the latest standard paper it was barely noticed. Can somebody explains it to me and show some examples?</p>\n<p>Note that this is not a duplicate of <a href=\"https://stackoverflow.com/questions/6609968/real-life-examples-of-xvalues-glvalues-and-prvalues\">this</a>, as even there nobody gave an example of 'glvalue'. Here <a href=\"https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues\">too</a>. It was only barely mentioned like this:</p>\n<blockquote>\n<p id=\"so_27364787_27364787_0\">A glvalue (\u201cgeneralized\u201d lvalue) is an lvalue or an xvalue.</p>\n</blockquote>\n", "Tags": "<c++><c++11>", "OwnerUserId": "4031604", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27364787_27364969_0": {"section_id": 7230, "quality": 1.0, "length": 11}, "so_27364787_27364899_1": {"section_id": 7230, "quality": 1.0, "length": 11}, "so_27364787_27364787_0": {"section_id": 7230, "quality": 0.8, "length": 4}, "so_27364787_27364899_0": {"section_id": 7230, "quality": 0.8, "length": 4}}, "n3337": {"so_27364787_27364969_0": {"section_id": 6974, "quality": 1.0, "length": 11}, "so_27364787_27364899_1": {"section_id": 6974, "quality": 1.0, "length": 11}, "so_27364787_27364787_0": {"section_id": 6974, "quality": 0.8, "length": 4}, "so_27364787_27364899_0": {"section_id": 6974, "quality": 0.8, "length": 4}}, "n4659": {"so_27364787_27364969_0": {"section_id": 8741, "quality": 1.0, "length": 11}, "so_27364787_27364899_1": {"section_id": 8741, "quality": 1.0, "length": 11}, "so_27364787_27364787_0": {"section_id": 7486, "quality": 0.8, "length": 4}, "so_27364787_27364899_0": {"section_id": 7486, "quality": 0.8, "length": 4}}}, "27364899": {"ParentId": "27364787", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>By definition from \u00a73.10\\1</p>\n<blockquote>\n<p id=\"so_27364787_27364899_0\">A <em>glvalue</em> (\u201cgeneralized\u201d lvalue) is an lvalue or an xvalue</p>\n</blockquote>\n<p>where</p>\n<blockquote>\n<p id=\"so_27364787_27364899_1\">Every expression belongs to exactly one of the fundamental classifications in this taxonomy: lvalue,\n  xvalue, or prvalue.</p>\n</blockquote>\n<p>Here the taxonomy:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/3X59P.png\"/></p>\n<p>So, for instance, every lvalue is a glvalue:</p>\n<pre><code>int x = 7; // x is an lvalue. x is also a glvalue.\n           // 7 is a literal, so it is a prvalue. 7 is not a glvalue.\n\nauto foo = static_cast&lt;int&amp;&amp;&gt;(x); // foo is an lvalue, so it is a glvalue\n                                  // the cast is an rvalue but not a prvalue,\n                                  // it is an xvalue. so it is a glvalue.\n</code></pre>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2014-12-08T19:07:46.687", "Id": "27364899", "Score": "1", "CreationDate": "2014-12-08T18:54:51.313", "LastActivityDate": "2014-12-08T19:07:46.687"}});