post_cb({"30512259": {"ParentId": "30512204", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The problem there is that <code>a</code> is <code>const</code> and therefore <code>operator=</code>, which is supposed to modify the object on which is called, is disallowed. This is caused by <code>const</code>-correctness.</p>\n<p>Declaring <code>operator=</code> to be <code>const</code> would not make sense, because the semantic of <code>operator=</code> are that it should modify the object on which it's called with the right hand side value and return a <code>T&amp;</code> reference to the left hand side object, which is not possible if the left hand side object is <code>const</code> (excluding <code>const_cast</code> usage).</p>\n<p>On the other hand, the following is allowed:</p>\n<pre><code>int main()\n{\n    A b;\n    const A a = b;\n}\n</code></pre>\n<p>because in that case it's <em>construction</em> of a new constant object.</p>\n<hr>\n<p>As you said, the standard specifies this at \u00a79.3.2/3 with the following wording:</p>\n<blockquote>\n<p id=\"so_30512204_30512259_0\">A cv-qualified member function can be called on an object-expression (5.2.5) only if the object-expression is as cv-qualified or less-cv-qualified than the member function.</p>\n</blockquote>\n</hr>", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2015-05-28T16:43:52.380", "Id": "30512259", "Score": "6", "CreationDate": "2015-05-28T16:31:52.567", "LastActivityDate": "2015-05-28T16:43:52.380"}, "bq_ids": {"n4140": {"so_30512204_30512259_0": {"section_id": 5897, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_30512204_30512259_0": {"section_id": 5669, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_30512204_30512259_0": {"section_id": 7380, "quality": 0.9230769230769231, "length": 12}}}, "30512204": {"CommentCount": "7", "ViewCount": "74", "CreationDate": "2015-05-28T16:28:22.913", "LastActivityDate": "2015-05-28T16:43:52.380", "Title": "Discarding const qualifier", "AcceptedAnswerId": "30512259", "PostTypeId": "1", "Id": "30512204", "Score": "-2", "Body": "<p>Why isn't discarding const qualifier allowed? Suppose we wrote:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    void operator=(const A&amp;){ std::cout &lt;&lt; \"A&amp;\" &lt;&lt; std::endl; }\n    void operator=(const A&amp;&amp;){ std::cout &lt;&lt; \"A&amp;&amp;\" &lt;&lt; std::endl; }\n};\n\nconst A a;\nA b;\n\nint main()\n{\n    a = b; //Error: discarding qualifier\n}\n</code></pre>\n<p>Couldn't someone provide a reference where the Standard disallows that?</p>\n", "Tags": "<c++><class><operator-keyword>", "OwnerUserId": "2786156", "AnswerCount": "1"}});