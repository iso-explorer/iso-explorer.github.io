post_cb({"5922035": {"LastActivityDate": "2011-05-07T15:35:17.710", "LastEditorUserId": "165520", "ParentId": "5921920", "CommentCount": "6", "PostTypeId": "2", "Score": "7", "Body": "<p>6.7.8/4 [C99]</p>\n<blockquote>\n<p id=\"so_5921920_5922035_0\">All the expressions in an initializer for an object that has static storage duration shall be\n  constant expressions or string literals.</p>\n</blockquote>\n<p>In <code>static int i = initializer();</code> the RHS is not a constant expression and so the code doesn't compile in C.</p>\n<p>In C++ there is no such restriction and the code is well-formed in C++.</p>\n", "Id": "5922035", "LastEditDate": "2011-05-07T15:35:17.710", "OwnerUserId": "165520", "CreationDate": "2011-05-07T15:30:01.597"}, "5921920": {"AcceptedAnswerId": "5922051", "Tags": "<c++><c><static>", "CommentCount": "0", "OwnerUserId": "734154", "Body": "<p>I was going through the code at <a href=\"http://geeksforgeeks.org/?p=10302\" rel=\"nofollow noreferrer\">http://geeksforgeeks.org/?p=10302</a></p>\n<pre><code>#include&lt;stdio.h&gt;\nint initializer(void)\n{\n    return 50;\n}\n\nint main()\n{\n    static int i = initializer();\n    printf(\" value of i = %d\", i);\n    getchar();\n    return 0;\n}\n</code></pre>\n<p>This code will not compile in C because static variables need to be initialised before main() starts. That is fine. But this code will compile just fine in a C++ compiler.</p>\n<p>My question is why it compiles in a C++ compiler when static has the same usage in both languages. Of course compilers will be different for these languages but I am not able to pin point the exact reason. If it is specified in the standard, I would love to know that.</p>\n<p>I searched for this question on SO , found 3 similar links but in vain.\n<a href=\"https://stackoverflow.com/questions/943280/difference-between-static-in-c-and-static-in-c\">Link1</a>\n<a href=\"https://stackoverflow.com/questions/211237/c-static-variables-initialisation-order\">Link2</a>\n<a href=\"https://stackoverflow.com/questions/2528457/static-variables-in-c-and-c\">Link3</a></p>\n<p>Thanks for your help.</p>\n", "Id": "5921920", "CreationDate": "2011-05-07T15:12:47.427", "ViewCount": "3974", "FavoriteCount": "1", "LastActivityDate": "2013-02-14T19:40:30.287", "LastEditorUserId": "-1", "PostTypeId": "1", "Title": "Difference between initialization of static variables in C and C++", "AnswerCount": "3", "Score": "20", "LastEditDate": "2017-05-23T10:33:58.197"}, "5922039": {"LastActivityDate": "2011-05-07T15:30:44.033", "ParentId": "5921920", "CommentCount": "0", "Score": "3", "Body": "<p>Static variables in C need to be initialised with a value known at compile time. This requirement  has been removed in C++, and you can initialise them with expressions evaluated at run-time. </p>\n<p>The two languages differ in this, and many, many other respects. You can quite easily write C code which will be acceptable to a C++ compiler, but the reverse is not true.</p>\n", "Id": "5922039", "CreationDate": "2011-05-07T15:30:44.033", "OwnerUserId": "2100815", "PostTypeId": "2"}, "5922051": {"LastActivityDate": "2011-05-07T15:32:04.263", "ParentId": "5921920", "CommentCount": "5", "Score": "10", "Body": "<p>It compiles in C++ because C++ needs to support dynamic initialization anyway, or you couldn't have local static or non-local objects with non-trivial constructors. </p>\n<p>So since C++ has this complexity anyway, supporting that initialization like you show isn't complicated to add anymore. </p>\n<p>In C that would be a big matter because C doesn't have any other reason to support initialization done at program startup (apart from trivial <a href=\"http://en.wikipedia.org/wiki/.bss\" rel=\"noreferrer\">zero initialization</a>). In C, initial values of file-scope or local static objects can always statically be put into the executable image. </p>\n", "Id": "5922051", "CreationDate": "2011-05-07T15:32:04.263", "OwnerUserId": "34509", "PostTypeId": "2"}, "bq_ids": {"n4659": {"so_5921920_5922035_0": {"section_id": 6789, "quality": 0.5454545454545454, "length": 6}}, "n3337": {"so_5921920_5922035_0": {"section_id": 5947, "quality": 0.6363636363636364, "length": 7}}}});