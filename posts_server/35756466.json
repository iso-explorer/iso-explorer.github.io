post_cb({"bq_ids": {"n4140": {"so_35756466_35756466_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6005}}, "n3337": {"so_35756466_35756466_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5773}}, "n4659": {"so_35756466_35756466_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7504}}}, "35756466": {"ViewCount": "120", "Body": "<p>I was looking at the C++ standard regarding member reference operators (the unary <code>*</code> dereferencing operator, the <code>-&gt;</code> member accessor operator) as well as many other related questions:</p>\n<p><a href=\"https://stackoverflow.com/questions/2470255/c-difference-between-and\">C++ - Difference between (*). and -&gt;?</a></p>\n<p><a href=\"https://stackoverflow.com/questions/447543/ptr-hello-versus-ptr-hello\">ptr-&gt;hello(); /* VERSUS */ (*ptr).hello();</a></p>\n<p><a href=\"https://stackoverflow.com/questions/7681926/c-pointers-difference-between-and\">C++ pointers difference between * and -&gt;</a></p>\n<p>I saw that most answers stated that <code>p-&gt;m</code> is syntactic sugar for <code>(*p).m</code> as defined by the C++ Standard (5.2.5, paragraph 2):</p>\n<blockquote>\n<p id=\"so_35756466_35756466_0\">The expression <code>E1-&gt;E2</code> is converted to the equivalent form <code>(*(E1)).E2</code></p>\n</blockquote>\n<p>Many comments also noted that because <code>operator*</code> and <code>operator-&gt;</code> are overloadable in classes, they should be overloaded uniformly to ensure consistent behavior.</p>\n<p>These statements seem to contradict each other: if (as per the standard) <code>E1-&gt;E2</code> is converted to the equivalent form <code>(*(E1)).E2</code>, then what would be the purpose of overloading <code>operator-&gt;</code> (as is permitted by the standard)?</p>\n<p>Simpler stated, are these two parts of the standard in conflict, or am I misunderstanding the Standard?<br>\nDoes the <code>E1-&gt;E2</code> equivalence transformation to <code>(*(E1)).E2</code> apply to all complete types or only to built in ones?</br></p>\n", "AcceptedAnswerId": "35756525", "Title": "C++ member access/indirection operator equivalence", "CreationDate": "2016-03-02T19:33:12.003", "Id": "35756466", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:32:49.320", "LastEditorUserId": "-1", "LastActivityDate": "2016-03-07T12:43:55.483", "Score": "3", "OwnerUserId": "4975646", "Tags": "<c++><pointers><language-lawyer>", "AnswerCount": "1"}, "35756525": {"Id": "35756525", "PostTypeId": "2", "Body": "<p>The conversion from <code>E1 -&gt; E2</code> to <code>(*(E1)).E2</code> only applies to raw pointer types. For class types, <code>E1 -&gt; E2</code> evaluates to <code>(E1).operator-&gt;().E2</code>, which potentially might recursively expand out even more copies of <code>operator-&gt;</code> if the return type of <code>operator-&gt;</code> is not itself a pointer type. You can see this by creating a type that supports <code>operator*</code> but not <code>operator-&gt;</code> and trying to use the arrow operator on it; you'll get an error that <code>operator-&gt;</code> is undefined.</p>\n<p>As a follow-up, it's common to implement <code>operator -&gt;</code> in terms of <code>operator *</code> in a way that makes the semantics of <code>-&gt;</code> match the semantics for pointers. You often see things like this:</p>\n<pre><code>PointerType ClassType::operator-&gt; () const {\n    return &amp;**this;\n}\n</code></pre>\n<p>This expression is interpreted as</p>\n<pre><code>&amp;(*(*this)),\n</code></pre>\n<p>meaning \"take this object (<code>*this</code>), dereference it (<code>*(*this)</code>), and get the address of what you find (<code>&amp;(*(*this))</code>.).\" Now, if you use the rule that <code>E1 -&gt; E2</code> should be equivalent to <code>(*(E1)).E2</code>, you can see that you end up getting something equivalent.</p>\n", "LastEditorUserId": "501557", "LastActivityDate": "2016-03-02T22:05:58.887", "Score": "5", "CreationDate": "2016-03-02T19:36:29.720", "ParentId": "35756466", "CommentCount": "1", "OwnerUserId": "501557", "LastEditDate": "2016-03-02T22:05:58.887"}});