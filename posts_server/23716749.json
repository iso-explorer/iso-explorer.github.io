post_cb({"23716775": {"ParentId": "23716749", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There are 3 types of modifiers on the declarator level:</p>\n<ul>\n<li>Pointer to type/reference to type;</li>\n<li>Array of types elements;</li>\n<li>Function, returning type;</li>\n</ul>\n<p>You can combine these modifiers although with certain restrictions. Modifier <code>const</code> is not creating a new data type. I it restricts the set of applicable operations.</p>\n<p>There are 2 things on the class level:</p>\n<ul>\n<li>Derived Class;</li>\n<li>Template Specialization;</li>\n</ul>\n<p>Once again, these are modifiers of something already existing. Unions and struct create new objects, they are not modifying their containing fields.</p>\n", "OwnerUserId": "1459996", "LastEditorUserId": "1459996", "LastEditDate": "2014-05-18T00:44:10.457", "Id": "23716775", "Score": "2", "CreationDate": "2014-05-17T22:41:08.653", "LastActivityDate": "2014-05-18T00:44:10.457"}, "23717265": {"ParentId": "23716749", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As mentioned in the comments by <a href=\"https://stackoverflow.com/users/1566221/rici\">rici</a>, the related Standard quote is in 3.9.2. </p>\n<p>This paragraph describes the creation of <strong>compound types</strong></p>\n<blockquote>\n<p id=\"so_23716749_23717265_0\">Compound types can be constructed n the following ways</p>\n<p id=\"so_23716749_23717265_1\">\u2014 arrays of objects of a given type, 8.3.4;</p>\n<p id=\"so_23716749_23717265_2\">\u2014 functions , which have parameters of given types and return void or references or objects of a given type, 8.3.5;</p>\n<p id=\"so_23716749_23717265_3\">\u2014 pointers to void or objects or functions (including static members of classes) of a given type, 8.3.1;</p>\n<p id=\"so_23716749_23717265_4\">\u2014 references to objects or functions of a given type, 8.3.2. There are two types of references:</p>\n<p id=\"so_23716749_23717265_5\">\u2014 lvalue reference</p>\n<p id=\"so_23716749_23717265_6\">\u2014 rvalue reference</p>\n<p id=\"so_23716749_23717265_7\">\u2014 classes containing a sequence of objects of various types (Clause 9), a set of types, enumerations and functions for manipulating these objects (9.3), and a set of restrictions on the access to these entities (Clause 11);</p>\n<p id=\"so_23716749_23717265_8\">\u2014 unions, which are classes capable of containing objects of different types at different times, 9.5;</p>\n<p id=\"so_23716749_23717265_9\">\u2014 enumerations, which comprise a set of named constant values. Each distinct enumeration constitutes a different enumerated type, 7.2;</p>\n<p id=\"so_23716749_23717265_10\">\u2014 pointers to non-static class members, which identify members of a given type within objects of a given class, 8.3.3.</p>\n</blockquote>\n", "OwnerUserId": "2567683", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:21:29.253", "Id": "23717265", "Score": "0", "CreationDate": "2014-05-17T23:55:58.817", "LastActivityDate": "2014-05-17T23:55:58.817"}, "23716749": {"CommentCount": "5", "ViewCount": "69", "CreationDate": "2014-05-17T22:36:58.217", "LastActivityDate": "2014-05-18T00:44:10.457", "Title": "Which are the type constructors in C++?", "PostTypeId": "1", "Id": "23716749", "Score": "-4", "Body": "<p>In many programming languages, there are <strong>ways to define new types out of the built ins</strong>.</p>\n<p>What are the <strong>ways this can be done in C++ ?</strong></p>\n<p>Let me cross out the obvious ones : </p>\n<ul>\n<li>pointers  : applying <code>*</code> to type gives a new type <code>pointer to type</code></li>\n<li>arrays    : you can make an array of built in types and this defines a new type</li>\n<li>templates : you can wrap any built in type <code>T</code> in a class template <code>my_class&lt;T&gt;</code> defining a new type</li>\n</ul>\n", "Tags": "<c++>", "OwnerUserId": "2567683", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_23716749_23717265_3": {"section_id": 7221, "quality": 0.8181818181818182, "length": 9}, "so_23716749_23717265_9": {"section_id": 7221, "quality": 0.9230769230769231, "length": 12}, "so_23716749_23717265_0": {"section_id": 7221, "quality": 1.0, "length": 6}, "so_23716749_23717265_4": {"section_id": 7221, "quality": 0.9, "length": 9}, "so_23716749_23717265_7": {"section_id": 7221, "quality": 1.0, "length": 18}, "so_23716749_23717265_2": {"section_id": 7221, "quality": 0.8333333333333334, "length": 10}, "so_23716749_23717265_8": {"section_id": 7221, "quality": 0.8888888888888888, "length": 8}, "so_23716749_23717265_10": {"section_id": 7221, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_23716749_23717265_3": {"section_id": 6965, "quality": 0.8181818181818182, "length": 9}, "so_23716749_23717265_9": {"section_id": 6965, "quality": 0.9230769230769231, "length": 12}, "so_23716749_23717265_0": {"section_id": 6965, "quality": 1.0, "length": 6}, "so_23716749_23717265_4": {"section_id": 6965, "quality": 0.9, "length": 9}, "so_23716749_23717265_7": {"section_id": 6965, "quality": 1.0, "length": 18}, "so_23716749_23717265_2": {"section_id": 6965, "quality": 0.8333333333333334, "length": 10}, "so_23716749_23717265_8": {"section_id": 6965, "quality": 0.8888888888888888, "length": 8}, "so_23716749_23717265_10": {"section_id": 6965, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_23716749_23717265_3": {"section_id": 8730, "quality": 0.8181818181818182, "length": 9}, "so_23716749_23717265_9": {"section_id": 8730, "quality": 0.9230769230769231, "length": 12}, "so_23716749_23717265_0": {"section_id": 8730, "quality": 1.0, "length": 6}, "so_23716749_23717265_4": {"section_id": 8730, "quality": 0.9, "length": 9}, "so_23716749_23717265_7": {"section_id": 8730, "quality": 1.0, "length": 18}, "so_23716749_23717265_2": {"section_id": 8730, "quality": 0.8333333333333334, "length": 10}, "so_23716749_23717265_8": {"section_id": 8730, "quality": 0.8888888888888888, "length": 8}, "so_23716749_23717265_10": {"section_id": 8730, "quality": 0.8461538461538461, "length": 11}}}});