post_cb({"33823077": {"Id": "33823077", "PostTypeId": "2", "Body": "<p>I would use a nullptr for the empty case. It can be used because you never use full function objects but only pointers to them, so <code>func(f1);</code> will be in fact  <code>func(&amp;f1)</code> =&gt; you will always pass pointers to func, so <code>nullptr</code> is IMHO the best candidate.</p>\n<p>This compiles and run:</p>\n<pre><code>void func(const std::function&lt;void()&gt;&amp; f = nullptr)\n{\n    if(f)\n        f();\n}\n</code></pre>\n<p>The alternative of using a default function would be:</p>\n<pre><code>void func(const std::function&lt;void()&gt;&amp; f = std::function&lt;void()&gt;()) {\n    try {\n        f();\n    }\n    catch(std::bad_function_call e) {\n    }\n}\n</code></pre>\n<p>using exception catching. The choice between the 2 mainly depends on whether you expect the empty case to occur; almost never: go with exception vs. sometimes: test before call.</p>\n<p>As question mentions <code>if (f)</code>, use <code>nullptr</code></p>\n", "LastActivityDate": "2015-11-20T09:24:56.690", "CommentCount": "0", "CreationDate": "2015-11-20T09:24:56.690", "ParentId": "33822271", "Score": "9", "OwnerUserId": "3545273"}, "33822331": {"Id": "33822331", "PostTypeId": "2", "Body": "<pre><code>void func(const std::function&lt;void()&gt;&amp; f = {}) {\n    if(f) f();\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/68fb241d1159bf2b\"><strong>LIVE DEMO</strong></a></p>\n", "LastEditorUserId": "2352671", "LastActivityDate": "2015-11-20T08:55:56.807", "Score": "40", "CreationDate": "2015-11-20T08:44:43.280", "ParentId": "33822271", "CommentCount": "5", "OwnerUserId": "2352671", "LastEditDate": "2015-11-20T08:55:56.807"}, "33822304": {"Id": "33822304", "PostTypeId": "2", "Body": "<p>You can try like this:</p>\n<pre><code>const std::function&lt;void()&gt; &amp; f = std::function&lt;void()&gt;()\n</code></pre>\n<p>As Basile added, the standard says:</p>\n<blockquote>\n<p id=\"so_33822271_33822304_0\">\u00a7 20.8.11.1 Class bad_function_call [func.wrap.badcall]</p>\n<p id=\"so_33822271_33822304_1\">1/ An exception of type bad_function_call is thrown by\n  function::operator() (20.8.11.2.4) when the function wrapper object\n  has no target.</p>\n</blockquote>\n", "LastActivityDate": "2015-11-20T08:43:17.463", "CommentCount": "0", "CreationDate": "2015-11-20T08:43:17.463", "ParentId": "33822271", "Score": "3", "OwnerUserId": "1501794"}, "bq_ids": {"n4140": {"so_33822271_33822304_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 4648}}, "n3337": {"so_33822271_33822304_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 4459}}, "n4659": {"so_33822271_33822304_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6016}}}, "33822271": {"ViewCount": "7424", "Body": "<pre><code>void func(const std::function&lt;void()&gt;&amp; f = empty)\n{\n    if(f)\n        f();\n}\n</code></pre>\n<p>what is the 'empty' should be? I use <code>[](){}</code> . But technically, that is not empty, the f() will execute.</p>\n", "AcceptedAnswerId": "33822331", "Title": "specify default value of std::function", "CreationDate": "2015-11-20T08:41:14.063", "Id": "33822271", "CommentCount": "0", "FavoriteCount": "6", "PostTypeId": "1", "LastActivityDate": "2015-11-20T13:54:19.293", "Score": "37", "OwnerUserId": "851185", "Tags": "<c++><lambda>", "AnswerCount": "4"}, "33822294": {"Id": "33822294", "PostTypeId": "2", "Body": "<pre><code>const std::function&lt;void()&gt;&amp; f = nullptr\n</code></pre>\n<p>or</p>\n<pre><code>const std::function&lt;void()&gt;&amp; f = std::function&lt;void()&gt;()\n</code></pre>\n", "LastEditorUserId": "447156", "LastActivityDate": "2015-11-20T13:54:19.293", "Score": "17", "CreationDate": "2015-11-20T08:42:40.440", "ParentId": "33822271", "CommentCount": "3", "OwnerUserId": "3607294", "LastEditDate": "2015-11-20T13:54:19.293"}});