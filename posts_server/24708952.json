post_cb({"bq_ids": {"n4140": {"so_24708952_24709095_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 5908}, "so_24708952_24709072_0": {"length": 20, "quality": 1.0, "section_id": 5908}}, "n3337": {"so_24708952_24709095_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 5680}, "so_24708952_24709072_0": {"length": 20, "quality": 1.0, "section_id": 5680}}, "n4659": {"so_24708952_24709095_0": {"length": 29, "quality": 0.6904761904761905, "section_id": 7390}, "so_24708952_24709072_0": {"length": 20, "quality": 1.0, "section_id": 7390}}}, "24709095": {"Id": "24709095", "PostTypeId": "2", "Body": "<p>This is what the draft standard has to say about initialization of <code>const static</code> member data:</p>\n<blockquote>\n<p id=\"so_24708952_24709095_0\">9.4.2/3 If a non-volatile <code>const static</code> data member is of integral or enumeration type, its declaration in the class definition can specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an assignment-expression is a constant expression (5.19). A <code>static</code> data member of literal type can be declared in the class definition with the <code>constexpr</code> specifier; if so, its declaration shall specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an assignment-expression is a constant expression.</p>\n</blockquote>\n<p>You have the choice of changing the type of <code>qs</code> to an integral type or change it to a <code>constexpr</code> instead of <code>const</code>.</p>\n<p>Use:</p>\n<pre><code>class Q\n{\n   static const int qs = 10;\n};\n</code></pre>\n<p>or </p>\n<pre><code>class Q \n{\n   static constexpr double qs = 10;\n};\n</code></pre>\n", "LastActivityDate": "2014-07-12T02:36:21.933", "CommentCount": "0", "CreationDate": "2014-07-12T02:36:21.933", "ParentId": "24708952", "Score": "0", "OwnerUserId": "434551"}, "24708952": {"ViewCount": "84", "Body": "<p>Last time I am puzzled with the initialization of static const int ,const int and static int , then some kind men help me. But question comes again,</p>\n<p>I try these int C_free 5.0</p>\n<pre><code>class Q{\n\n   static const double qs = 10;//float is also ok\n\n};\n</code></pre>\n<p>Then I try it in Qt creator 2.8.1 ,this can't pass . </p>\n<p>So for understand this completely, Can anyone give me a whole explanation, under which situation which type is allowed ? not just int type. Thanks.</p>\n<p>Forgive me , new C++ learner , not good English</p>\n", "AcceptedAnswerId": "24709072", "Title": "static const double/float in a class ,ok or not ok, please give me a current answer", "CreationDate": "2014-07-12T02:11:03.700", "Id": "24708952", "CommentCount": "1", "LastEditDate": "2014-07-15T21:13:09.763", "PostTypeId": "1", "LastEditorUserId": "1329652", "LastActivityDate": "2014-07-15T21:13:09.763", "Score": "1", "OwnerUserId": "3331479", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "24709072": {"Id": "24709072", "PostTypeId": "2", "Body": "<p>In</p>\n<pre><code>using T = sometype;\nclass Q\n{\n    static const T qs = somevalue;\n};\n</code></pre>\n<p>\u2026 <code>T</code> must be an integral type or an enumeration type:</p>\n<p>C++11 \u00a79.4.2/3</p>\n<blockquote>\n<p id=\"so_24708952_24709072_0\"><strong>\u201d</strong><br>\n  If a non-volatile <code>const static</code> data member is of integral or enumeration type, its declaration in the class\n  definition can specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression.</br></p>\n</blockquote>\n<p>The meaning of <em>constant expression</em> here is essentially that it can be evaluated at compile time; it is defined by C++11 \u00a75.19/3.</p>\n<hr>\n<p>C++11 <code>constexpr</code> allows a much wider ranger of types, if all relevant compilers support it.</p>\n<hr>\n<p>A simple alternative is to do this:</p>\n<pre><code>class Q\n{\n    static\n    auto qs() -&gt; double { return somevalue; }\n};\n</code></pre>\n<p>And a more elaborate alternative, the templated const trick:</p>\n<pre><code>template&lt; class Dummy_ &gt;\nstruct Q_constants_\n{\n    static double const qs;\n};\n\ntemplate&lt; class Dummy_ &gt;\ndouble Q_constants&lt;Dummy_&gt;::qs = somevalue;\n\nclass Q\n    : public Q_constants_&lt;void&gt;\n{};\n</code></pre>\n</hr></hr>", "LastEditorUserId": "464581", "LastActivityDate": "2014-07-12T02:39:59.310", "Score": "3", "CreationDate": "2014-07-12T02:32:48.627", "ParentId": "24708952", "CommentCount": "0", "OwnerUserId": "464581", "LastEditDate": "2014-07-12T02:39:59.310"}});