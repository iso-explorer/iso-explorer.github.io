post_cb({"43530295": {"CommentCount": "15", "ViewCount": "423", "PostTypeId": "1", "LastEditorUserId": "2756719", "CreationDate": "2017-04-20T21:32:33.073", "LastActivityDate": "2017-04-22T00:17:36.390", "Title": "Deducing class template arguments with a constructor that uses a member type alias", "FavoriteCount": "4", "LastEditDate": "2017-04-20T21:37:43.143", "Id": "43530295", "Score": "18", "Body": "<p>So apparently this is supposed to work:</p>\n<pre><code>template&lt;class T&gt;\nstruct C {\n   using value_type = T;\n   C(value_type);\n};\n\nC c(1); // C&lt;int&gt;\n</code></pre>\n<p>As is this (see the <code>B</code> example in <a href=\"https://timsong-cpp.github.io/cppwp/over.match.class.deduct#3\" rel=\"noreferrer\">[over.match.class.deduct]/3</a>):</p>\n<pre><code>template&lt;class T&gt;\nstruct D {\n   template&lt;class&gt; using meow_t = T;\n\n   template&lt;class U&gt;\n   D(U, meow_t&lt;U&gt;);\n};\n\nD d(1, 'c'); // D&lt;char&gt;\n</code></pre>\n<p>Note that a seemingly-equivalent explicit guide won't work since the parameter is a non-deduced context:</p>\n<pre><code>template&lt;class T&gt;\nC(typename C&lt;T&gt;::value_type) -&gt; C&lt;T&gt;;\n</code></pre>\n<p>While it's certainly <em>desirable</em> that at least the first snippet works, I haven't yet been able to find the wording that actually <em>makes</em> it work in the current working draft. Does anyone know where it is?</p>\n", "Tags": "<c++><language-lawyer><c++1z>", "OwnerUserId": "2756719", "AnswerCount": "2"}, "43552366": {"ParentId": "43530295", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I think a careful reading makes this clear:</p>\n<blockquote>\n<p id=\"so_43530295_43552366_0\">The types of the function parameters are those of the constructor.</p>\n</blockquote>\n<p>Note that <code>C&lt;T&gt;::value_type</code> is not a type, it is a typedef-name.  Due to substitution, the type of the constructor parameter is <code>T</code>, and the equivalent deduction guide is actually</p>\n<pre><code>template &lt;class T&gt; C(T) -&gt; C&lt;T&gt;;\n</code></pre>\n<p>In your example, using <code>C&lt;T&gt;::value_type</code> made it seem liked there was an issue with a non-deduced context, but that issue doesn't actually exist because there is no lookup involved for the deduction function parameters.</p>\n", "OwnerUserId": "951890", "LastEditorUserId": "951890", "LastEditDate": "2017-04-22T00:17:36.390", "Id": "43552366", "Score": "0", "CreationDate": "2017-04-21T21:35:42.020", "LastActivityDate": "2017-04-22T00:17:36.390"}, "bq_ids": {"n4140": {"so_43530295_43552366_0": {"section_id": 7104, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_43530295_43552366_0": {"section_id": 6848, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_43530295_43552366_0": {"section_id": 623, "quality": 0.8333333333333334, "length": 5}}}, "43545313": {"ParentId": "43530295", "CommentCount": "3", "Body": "<p>This isn't strictly an answer, as I don't think such wording actually exists. This is more of a cobbling together of information related to the question.</p>\n<hr/>\n<p>This is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2\" rel=\"nofollow noreferrer\">Core Issue 2</a>. The discussion in Oulu and Issaquah about this feature made it clear that the <em>intent</em> is that looking through the typedefs is valid, but no wording as added to indicate as to how this is supposed to work - it just... is. The wording as-is suggests that the deduction guide for:</p>\n<pre><code>template&lt;class T&gt;\nstruct C {\n   using value_type = T;\n   C(value_type);\n};\n</code></pre>\n<p>would be:</p>\n<pre><code>template &lt;class T&gt; C&lt;T&gt; foo(typename C&lt;T&gt;::value_type );\n</code></pre>\n<p>which would be a non-deduced context and fail, yet <a href=\"http://eel.is/c++draft/thread.lock.guard\" rel=\"nofollow noreferrer\">[thread.lock.guard]</a> does not have an explicit deduction guide for this case. </p>\n<p>The example in <a href=\"http://eel.is/c++draft/over#match.best-1.10\" rel=\"nofollow noreferrer\">[over.match.best]</a> is apparently intended to indicate that typedefs are supposed to work, although none of the examples in that example actually use #1 as the deduction guide:</p>\n<blockquote id=\"so_43530295_43545313_0\">\n<pre><code>template &lt;class T&gt; struct A {\n  using value_type = T;\n  A(value_type);    // #1\n  A(const A&amp;);      // #2\n  A(T, T, int);     // #3\n  template&lt;class U&gt;\n    A(int, T, U);   // #4\n  // #5 is the copy deduction candidate, A(A)\n};\n\nA x(1, 2, 3);       // uses #3, generated from a non-template constructor\n\ntemplate &lt;class T&gt;\nA(T) -&gt; A&lt;T&gt;;       // #6, less specialized than #5\n\nA a(42);            // uses #6 to deduce A&lt;int&gt; and #1 to initialize\nA b = a;            // uses #5 to deduce A&lt;int&gt; and #2 to initialize\n\ntemplate &lt;class T&gt;\nA(A&lt;T&gt;) -&gt; A&lt;A&lt;T&gt;&gt;; // #7, as specialized as #5\n\nA b2 = a;           // uses #7 to deduce A&lt;A&lt;int&gt;&gt; and #1 to initialize\n</code></pre>\n</blockquote>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "43545313", "Score": "0", "CreationDate": "2017-04-21T14:31:45.483", "LastActivityDate": "2017-04-21T14:31:45.483"}});