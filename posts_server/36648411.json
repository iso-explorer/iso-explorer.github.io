post_cb({"36648411": {"CommentCount": "2", "AcceptedAnswerId": "36648550", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2016-04-15T13:23:23.653", "LastActivityDate": "2016-05-17T02:19:36.737", "LastEditDate": "2016-05-17T02:19:36.737", "ViewCount": "106", "FavoriteCount": "1", "Title": "How direct base is constructed in virtual inheritance?", "Id": "36648411", "Score": "5", "Body": "<p>In the following code, I attempted to created a <code>Leaf</code> object <code>obj</code> to see the constructor order in multi-layer inheritance, but I find the structure of <code>obj</code> and constructor calls in this case a little strange.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass Base1 { \npublic:\n    Base1(void) { \n        cout &lt;&lt; \"class Base1\" &lt;&lt; endl; \n    } \n}; \nclass Base2 {\npublic: \n    Base2(void) { \n        cout &lt;&lt; \"class Base2\" &lt;&lt; endl; }\n};\nclass Level1 : public Base2, virtual public Base1\n{\npublic:\n    Level1(void)\n    {\n        cout &lt;&lt; \"class Level1\" &lt;&lt; endl;\n    }\n};\n\nclass Level2 : public Base2, virtual public Base1\n{\npublic:\n    Level2(void)\n    {\n        cout &lt;&lt; \"class Level2\" &lt;&lt; endl;\n    }\n};\n\nclass Leaf :virtual public Level2, virtual public Level1\n{\npublic:\n    Leaf(void)\n    {\n        cout &lt;&lt; \"class Leaf\" &lt;&lt; endl;\n    }\n};\n\n\nint main(void)\n{\n    Leaf obj;\n    return 0;\n}\n</code></pre>\n<p>With the output showing the constructor calls:</p>\n<pre><code>class Base1\nclass Base2\nclase Level2\nclass Base2\nclass Level1\nclass Leaf\n</code></pre>\n<p>But the structure of obj at the end of the program is actually:</p>\n<pre><code>obj\n--Level2\n----Base2\n----Base1\n--Level1\n----Base2\n----Base1\n--Base1\n</code></pre>\n<p>I know the <code>Base1</code> of <code>obj</code> is virtual inherited, but during the construction of <code>obj</code>, <code>Level2</code> and <code>Level1</code> are also needed to be constructed, which leads to <code>Base1</code> in each of their structure. But the whole construction process only calls <code>Base1</code> constructor once. I cannot explain this. Does this mean the <code>Base1</code> in <code>Level2</code> and <code>Level1</code> inside <code>obj</code> shares the same data with <code>Base1</code> that directly belongs to <code>obj</code>?</p>\n", "Tags": "<c++><inheritance><multiple-inheritance><virtual-inheritance>", "OwnerUserId": "5555077", "AnswerCount": "2"}, "36648698": {"ParentId": "36648411", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_36648411_36648698_0\">Does this mean the Base1 in Level2 and Level1 inside obj shares the same data with Base1 that directly belongs to obj?</p>\n</blockquote>\n<p>Yes, there's only one subobject of <code>Base1</code>, and shared by base subobject of <code>Level2</code> and <code>Level1</code> in class <code>Leaf</code>.</p>\n<p>Here's an explanation with example from the standard, $10.1/6 Multiple base classes [class.mi] (emphasized mine)</p>\n<blockquote>\n<p id=\"so_36648411_36648698_1\">For another example,</p>\n<pre><code>class V { /* ... */ };\nclass A : virtual public V { /* ... */ };\nclass B : virtual public V { /* ... */ };\nclass C : public A, public B { /* ... */ };\n</code></pre>\n<p id=\"so_36648411_36648698_2\">for an object <code>c</code> of class type <code>C</code>, a single subobject of type <code>V</code> is\n  <strong>shared by every base subobject of <code>c</code></strong> that has a virtual base class of\n  type <code>V</code>. Given the class <code>C</code> defined above, an object of class <code>C</code> will\n  have <strong>one subobject</strong> of class <code>V</code>, as shown below.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-04-15T13:42:24.480", "Id": "36648698", "Score": "1", "CreationDate": "2016-04-15T13:36:04.413", "LastActivityDate": "2016-04-15T13:42:24.480"}, "bq_ids": {"n4140": {"so_36648411_36648698_2": {"section_id": 6987, "quality": 1.0, "length": 27}}, "n3337": {"so_36648411_36648698_2": {"section_id": 6733, "quality": 1.0, "length": 27}}, "n4659": {"so_36648411_36648698_2": {"section_id": 8485, "quality": 0.9629629629629629, "length": 26}}}, "36648550": {"ParentId": "36648411", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_36648411_36648550_0\">But the whole construction process only calls Base1 constructor once. I cannot explain this. </p>\n</blockquote>\n<p>The explanation is that <code>Base1</code> is a virtual base of all the classes in the hierarchy. This is exactly what virtual bases are and what they're used for: sharing common base class instances.</p>\n<p>Quotes from <a href=\"http://en.cppreference.com/w/cpp/language/derived_class#Virtual_base_classes\" rel=\"nofollow\">cppreference</a></p>\n<blockquote>\n<p id=\"so_36648411_36648550_1\">For each distinct base class that is specified virtual, the most derived object contains only one base class subobject of that type, even if the class appears many times in the inheritance hierarchy (as long as it is inherited virtual every time).</p>\n<p id=\"so_36648411_36648550_2\">All virtual base subobjects are initialized before any non-virtual base subobject, so only the most derived class calls the constructors of the virtual bases in its member initializer list: </p>\n</blockquote>\n<p>Taking virtual inheritance into account, your structure diagram could be considered to be like this:</p>\n<pre><code>obj\n--Level2\n----Base2\n----+-------Base1\n--Level1   / /\n----Base2 / /\n----+----/ /\n--+-------/\n</code></pre>\n<blockquote>\n<p id=\"so_36648411_36648550_3\">Does this mean the Base1 in Level2 and Level1 inside obj shares the same data with Base1 that directly belongs to obj?</p>\n</blockquote>\n<p>Yes. There is exactly one <code>Base1</code> instance within the entire structure of <code>obj</code>.</p>\n", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2016-04-15T13:36:57.063", "Id": "36648550", "Score": "4", "CreationDate": "2016-04-15T13:29:49.990", "LastActivityDate": "2016-04-15T13:36:57.063"}});