post_cb({"bq_ids": {"n4140": {"so_10017607_10018555_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 807}}, "n3337": {"so_10017607_10018555_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 796}}, "n4659": {"so_10017607_10018555_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 865}}}, "10017607": {"ViewCount": "351", "Body": "<p>Consider this:</p>\n<pre><code>std::vector&lt;int*&gt; v(1, 0);\n</code></pre>\n<p>This compiles fine with VC++10 (no warnings even at max warning level).  However, it doesn't compile with llvm on mac or gcc on linux, giving an error like \"assigning to int* from incompatible type const int.\"  I'm not looking for solutions -- I know the second parameter is unnecessary or that a static_cast fixes the error.</p>\n<p>I thought zero was implicitly convertible to any pointer type.  What gives?  I can do the following:</p>\n<pre><code>int* i = 0;\nint* const&amp; ii = 0;\nconst int t = 0;\ni = t;\n</code></pre>\n<p>I understand that the vector constructor signature takes a <code>const T&amp;</code> which when expanded for <code>vector&lt;int*&gt;</code> becomes <code>int* const&amp;</code> correct?  Can someone explain what is going on here, and whether the VC++ or non-VC++ compiler is correct?</p>\n", "AcceptedAnswerId": "10018555", "Title": "Explicitly initializing vector of pointers results in conversion error?", "CreationDate": "2012-04-04T19:03:42.337", "Id": "10017607", "CommentCount": "11", "PostTypeId": "1", "LastActivityDate": "2012-04-04T20:12:35.393", "Score": "9", "OwnerUserId": "490205", "Tags": "<c++><visual-c++>", "AnswerCount": "2"}, "10018555": {"Id": "10018555", "PostTypeId": "2", "Body": "<p>It looks like g++ actually wrong here. See C++98 23.1.1/9:</p>\n<blockquote>\n<p id=\"so_10017607_10018555_0\">For every sequence defined in this clause and in clause 21:</p>\n<p id=\"so_10017607_10018555_1\">\u2014 the\n  constructor template  X(InputIterator f,\n  InputIterator l, const Allocator&amp; a = Allocator())</p>\n<p id=\"so_10017607_10018555_2\">shall have the same\n  effect as: <code>X(static_cast&lt;typename X::size_type&gt;(f),\n  static_cast&lt;typename X::value_type&gt;(l), a)</code> if InputIterator is an\n  integral type.</p>\n</blockquote>\n<p>Note that <code>InputIterator</code> is a template parameter to the constructor, which in this case will be <code>int</code> for your example, and thus an integral type. The g++ library actually has specific code to handle all the cases where the type being stored in the <code>vector</code> is integral as well and those will all work properly. In this case, only because you used <code>0</code> would the <code>static_cast</code> dictated by the standard actually be legal. I tried compiling the code that the standard says should be equivalent and it compiles with g++ 4.5.</p>\n", "LastActivityDate": "2012-04-04T20:12:35.393", "CommentCount": "2", "CreationDate": "2012-04-04T20:12:35.393", "ParentId": "10017607", "Score": "2", "OwnerUserId": "251738"}, "10017742": {"Id": "10017742", "PostTypeId": "2", "Body": "<p><code>std::vector</code> has a nasty constructor with this signature</p>\n<pre><code>template &lt;class InputIterator&gt;\nvector(InputIterator first, InputIterator last,\n       const Allocator&amp; = Allocator());\n</code></pre>\n<p>which, if the compiler deducts <code>InputIterator</code> as <code>int</code>(!) from your parameters <code>0</code> and <code>1</code>, will be a good fit but not do what we want.</p>\n<p>I believe C++11 requires the compiler to try harder to figure out if the parameters could actually be iterators or not. In C++03 they would probably end up as <code>size_type(1)</code> and <code>int(0)</code>, causing your problem.</p>\n<p>The integer literal 0 is convertible to a null pointer, but an <code>int</code> with value 0 is not!</p>\n", "LastEditorUserId": "597607", "LastActivityDate": "2012-04-04T19:20:35.757", "Score": "2", "CreationDate": "2012-04-04T19:14:08.850", "ParentId": "10017607", "CommentCount": "2", "OwnerUserId": "597607", "LastEditDate": "2012-04-04T19:20:35.757"}});