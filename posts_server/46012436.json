post_cb({"bq_ids": {"n4140": {"so_46012436_46012658_1": {"length": 17, "quality": 0.6538461538461539, "section_id": 4412}}, "n3337": {"so_46012436_46012658_1": {"length": 17, "quality": 0.6538461538461539, "section_id": 4249}}, "n4659": {"so_46012436_46012658_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5671}}}, "46012436": {"ViewCount": "157", "Body": "<p>std::shared_ptr has an aliasing constructor that allows newly created shared_ptr to share state with an existing shared pointer while pointing to some other object. </p>\n<p>I was thinking about abusing this constructor to put pointer to some global object inside shared_ptr:</p>\n<pre><code>int global = 0;\n\nint main() \n{\n    // because we point to global object we do not need to track its lifetime\n    // so we use empty shared_ptr&lt;void&gt; as a provider of shared state\n    std::shared_ptr&lt;int&gt; p(std::shared_ptr&lt;void&gt;(), &amp;global);\n    std::shared_ptr&lt;int&gt; pp = p; \n    return *pp;\n}\n</code></pre>\n<p>My question is: Is it legal? The code successfully works on major compilers. </p>\n<p>Note, that I do not ask if it's a good thing to do. I do understand that there's a canonical way of putting pointers to global objects into shared_ptr using no-op deleter. It is also a bit disturbing if it is legal, because it would be possible to have dereferenceable shared_ptr, weak pointers to which are always expired:</p>\n<pre><code>    std::shared_ptr&lt;int&gt; p(std::shared_ptr&lt;void&gt;(), &amp;global);\n    std::weak_ptr&lt;int&gt; w = p;\n    if (p) // p is alive and well \n    {      // and w is not\n        *w.lock(); // and here program crashes\n    }\n</code></pre>\n", "AcceptedAnswerId": "46012658", "Title": "Using C++ shared pointer's aliasing constructor with an empty shared pointer", "CreationDate": "2017-09-02T09:38:29.490", "Id": "46012436", "CommentCount": "0", "LastEditDate": "2017-09-02T10:30:43.987", "PostTypeId": "1", "LastEditorUserId": "4672588", "LastActivityDate": "2017-09-02T12:33:23.833", "Score": "7", "OwnerUserId": "4316978", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "46012658": {"Id": "46012658", "PostTypeId": "2", "Body": "<p>As you already know, with your current solution, <code>p</code> has a <code>use_count()</code> of zero, that's why the <code>weak_ptr</code> is expired. This seems to be ok, according to the C++ draft N4296:</p>\n<blockquote>\n<p id=\"so_46012436_46012658_0\"><strong>20.8.2.2.1 shared_ptr constructors</strong> [util.smartptr.shared.const]<br>\n  template shared_ptr(const shared_ptr&amp; r, T* p) noexcept;<br>\n  13 Effects: Constructs a shared_ptr instance that stores p and shares ownership with r.<br>\n  14 Postconditions: get() == p &amp;&amp; use_count() == r.use_count()<br>\n  15 [ Note: To avoid the possibility of a dangling pointer, the user of this constructor must ensure that p\n  remains valid at least until the ownership group of r is destroyed. \u2014 end note ]<br>\n<strong>16 [ Note: This constructor allows creation of an empty shared_ptr instance with a non-null stored\n  pointer. \u2014 end note ]</strong> </br></br></br></br></br></p>\n<p id=\"so_46012436_46012658_1\"><strong>20.8.2.2.2</strong> shared_ptr destructor [util.smartptr.shared.dest]<br>\n  ~shared_ptr();<br>\n  1 Effects:<br>\n  (1.1) \u2014 <strong>If *this is empty</strong> or shares ownership with another shared_ptr instance (use_count() &gt; 1),\n  <strong>there are no side effects.</strong><br>\n  (1.2) \u2014 Otherwise, if *this owns an object p and a deleter d, d(p) is called.<br>\n  (1.3) \u2014 Otherwise, *this owns a pointer p, and delete p is called  </br></br></br></br></br></p>\n</blockquote>\n<p>emphasis mine.<br>\nYou could use the following instead which gives a <code>shared_ptr</code> with a <code>use_count()</code> of one:</br></p>\n<pre><code>std::shared_ptr&lt;int&gt; p(&amp;global, [](int*){});\n</code></pre>\n<p>This uses an empty custom deleter.</p>\n", "LastEditorUserId": "3435400", "LastActivityDate": "2017-09-02T12:33:23.833", "Score": "3", "CreationDate": "2017-09-02T10:08:41.467", "ParentId": "46012436", "CommentCount": "4", "OwnerUserId": "3435400", "LastEditDate": "2017-09-02T12:33:23.833"}});