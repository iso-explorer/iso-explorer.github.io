post_cb({"bq_ids": {"n4140": {"so_47908885_47908885_0": {"length": 9, "quality": 0.9, "section_id": 6185}, "so_47908885_47909612_0": {"length": 11, "quality": 1.0, "section_id": 6185}, "so_47908885_47909612_1": {"length": 14, "quality": 0.5833333333333334, "section_id": 6187}, "so_47908885_47908885_5": {"length": 10, "quality": 0.6666666666666666, "section_id": 5954}, "so_47908885_47908885_4": {"length": 12, "quality": 1.0, "section_id": 6185}}, "n3337": {"so_47908885_47908885_0": {"length": 6, "quality": 0.6, "section_id": 5946}, "so_47908885_47909612_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5946}, "so_47908885_47908885_5": {"length": 9, "quality": 0.6, "section_id": 5724}, "so_47908885_47908885_4": {"length": 11, "quality": 0.9166666666666666, "section_id": 5946}}, "n4659": {"so_47908885_47909612_0": {"length": 11, "quality": 1.0, "section_id": 7687}, "so_47908885_47909612_2": {"length": 20, "quality": 1.0, "section_id": 7690}, "so_47908885_47908885_4": {"length": 12, "quality": 1.0, "section_id": 7687}, "so_47908885_47908885_0": {"length": 8, "quality": 0.8, "section_id": 7687}, "so_47908885_47909612_1": {"length": 24, "quality": 1.0, "section_id": 7690}, "so_47908885_47908885_5": {"length": 13, "quality": 0.8666666666666667, "section_id": 7441}}}, "47908885": {"ViewCount": "479", "Body": "<p>The expression <code>b</code> in this code shall be a <em>core constant expression</em></p>\n<pre><code>int main()\n{\n    constexpr int a = 10;\n    const int &amp;b = a;\n    constexpr int c = b; // here\n    return 0;\n}\n</code></pre>\n<p>since the standard says (8.20, paragraph 2 [expr.const] in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4700.pdf\" rel=\"nofollow noreferrer\">n4700</a>)</p>\n<blockquote>\n<p id=\"so_47908885_47908885_0\">An expression <code>e</code> is a <em>core constant expression</em> unless the evaluation of\n  <code>e</code> would evaluate one of the following expressions:</p>\n<ul>\n<li><p id=\"so_47908885_47908885_1\">...</p></li>\n<li><p id=\"so_47908885_47908885_2\">an lvalue-to-rvalue conversion (7.1) unless it is applied to</p>\n<ul>\n<li><p id=\"so_47908885_47908885_3\">...</p></li>\n<li><p id=\"so_47908885_47908885_4\"><strong>a non-volatile glvalue</strong> that refers to <strong>a non-volatile object defined with constexpr</strong>, or that refers to a non-mutable subobject of such an object, or</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>First, the expression <code>b</code> in the above code is an lvalue (which is also a glvalue) since it's a reference, thereby being a variable (8.1.4.1, paragraph 1 \n[expr.prim.id.unqual]):</p>\n<blockquote>\n<p id=\"so_47908885_47908885_5\">The expression is an lvalue if the entity is a function,\n  <strong>variable</strong>, or data member and a prvalue otherwise; it is a bit-field if the identifier designates a bit-field (11.5).</p>\n</blockquote>\n<p>Second, the object the variable <code>b</code> denotes is <code>a</code>, and it's declared with <code>constexpr</code>. However, gcc complains</p>\n<pre><code>./hello.cpp: In function \u2018int main()\u2019:\n./hello.cpp:6:20: error: the value of \u2018b\u2019 is not usable in a constant expression\n  constexpr int c = b;\n                    ^\n./hello.cpp:5:13: note: \u2018b\u2019 was not declared \u2018constexpr\u2019\n  const int &amp;b = a;\n</code></pre>\n<p>As far as I can tell, <strong>a reference is not an object,</strong> so the above bullet apparently suggests that <code>a</code> shall be declared with <code>constexpr</code>. Am I missing something? The reason why I don't agree with gcc is that gcc sees <code>b</code> as an object, thereby requiring it to be declared with <code>constexpr</code>. However, <code>b</code> is not an object!</p>\n", "AcceptedAnswerId": "47909612", "Title": "Why is this expression not a constant expression?", "CreationDate": "2017-12-20T15:01:12.437", "LastActivityDate": "2017-12-25T14:44:57.713", "CommentCount": "1", "LastEditDate": "2017-12-21T15:18:36.870", "PostTypeId": "1", "LastEditorUserId": "2069064", "Id": "47908885", "Score": "12", "OwnerUserId": "5645940", "Tags": "<c++><language-lawyer><c++17>", "AnswerCount": "1"}, "47909612": {"Id": "47909612", "PostTypeId": "2", "Body": "<p>One of the rules for core constant expressions is that we <a href=\"http://eel.is/c++draft/expr.const#2.11\" rel=\"nofollow noreferrer\">can't evaluate</a>:</p>\n<blockquote>\n<p id=\"so_47908885_47909612_0\">an <em>id-expression</em> that refers to a variable or data member of reference type unless the reference has a preceding initialization and either  </p>\n<ul>\n<li>it is initialized with a constant expression or</li>\n<li>its lifetime began within the evaluation of e;</li>\n</ul>\n</blockquote>\n<p><code>b</code> is an <em>id-expression</em> that refers to a variable of reference type with preceding initialization. However, it is initialized from <code>a</code>. Is <code>a</code> a constant expression? From <a href=\"http://eel.is/c++draft/expr.const#6\" rel=\"nofollow noreferrer\">[expr.const]/6</a>:</p>\n<blockquote>\n<p id=\"so_47908885_47909612_1\">A <em>constant expression</em> is either a glvalue core constant expression that refers to an entity that is a permitted result of a constant expression (as defined below), or a prvalue core constant expression whose value satisfies the following constraints: [... ]</p>\n<p id=\"so_47908885_47909612_2\">An entity is a <em>permitted result of a constant expression</em> if it is an object with static storage duration that is either not a temporary object or is a temporary object whose value satisfies the above constraints, or it is a function.</p>\n</blockquote>\n<p><code>a</code> is a glvalue core constant expression (it doesn't hit any of the restrictions in expr.const/2), however it is <em>not</em> an object with static storage duration. Nor is it a function. </p>\n<p>Hence, <code>a</code> is not a constant expression. And <code>b</code>, as a result, isn't initialized from a constant expression and so can't be used in a core constant expression. And thus <code>c</code>'s initialization is ill-formed as not being a constant expression. Declare <code>a</code> as a <code>static constexpr int</code>, and both gcc and clang accept the program. </p>\n<p>C++, you magical beast. </p>\n", "LastEditorUserId": "923854", "LastActivityDate": "2017-12-25T14:44:57.713", "Score": "12", "CreationDate": "2017-12-20T15:37:03.887", "ParentId": "47908885", "CommentCount": "15", "OwnerUserId": "2069064", "LastEditDate": "2017-12-25T14:44:57.713"}});