post_cb({"41460467": {"CommentCount": "8", "ViewCount": "142", "PostTypeId": "1", "LastEditorUserId": "1362568", "CreationDate": "2017-01-04T09:35:47.350", "LastActivityDate": "2017-01-04T18:40:06.817", "Title": "Correct behavior for string literal concatenation (C++11 phase 6 of translation)", "LastEditDate": "2017-01-04T18:40:06.817", "Id": "41460467", "Score": "6", "Body": "<p>I'm pretty sure that Visual C++ 2015 has a bug here, but I don't feel 100% sure.</p>\n<p>Code:</p>\n<pre><code>// Encoding: UTF-8 with BOM (required by Visual C++).\n#include &lt;stdlib.h&gt;\n\nauto main()\n    -&gt; int\n{\n    auto const s = L\"\"\n        \" is not in the Unicode BMP!\";\n    return s[0] &gt; 256? EXIT_SUCCESS : EXIT_FAILURE;\n}\n</code></pre>\n<p>Result with g++:</p>\n<pre>\n[H:\\scratchpad\\simple_text_io]\n&gt; g++ --version | find \"++\"\ng++ (i686-win32-dwarf-rev1, Built by MinGW-W64 project) 6.2.0\n\n[H:\\scratchpad\\simple_text_io]\n&gt; g++ compiler_bug_demo.cpp\n\n[H:\\scratchpad\\simple_text_io]\n&gt; run a\nProcess exit code = 0.\n\n[H:\\scratchpad\\simple_text_io]\n&gt; _\n</pre>\n<p>Result with Visual C++:</p>\n<pre>\n[H:\\scratchpad\\simple_text_io]\n&gt; cl /nologo- 2&gt;&amp;1 | find \"++\"\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.00.23026 for x86\n\n[H:\\scratchpad\\simple_text_io]\n&gt; cl compiler_bug_demo.cpp /Feb\ncompiler_bug_demo.cpp\ncompiler_bug_demo.cpp(8): warning C4566: character represented by universal-character-name '\\U00010437' cannot be represented in the current code page (1252)\n\n[H:\\scratchpad\\simple_text_io]\n&gt; run b\nProcess exit code = 1.\n\n[H:\\scratchpad\\simple_text_io]\n&gt; _\n</pre>\n<p>Is there any UB involved, and if not, which compiler behaves correctly?</p>\n<p><strong>Addendum:</strong></p>\n<p>The behavior is unchanged for both compilers if use lowercase greek PI, \u201c\u03c0\u201d, which <em>is</em> in the BMP, so that doesn't seem to matter.</p>\n", "Tags": "<c++><visual-c++><g++>", "OwnerUserId": "464581", "AnswerCount": "1"}, "41460863": {"ParentId": "41460467", "CommentCount": "2", "Body": "<p>From <strong>[lex.string]</strong>:</p>\n<blockquote id=\"so_41460467_41460863_0\">\n<ol start=\"13\">\n<li>In translation phase 6, adjacent string literals are concatenated. If both string literals have the same encoding-prefix, the resulting concatenated string literal has that encoding-prefix. <strong>If one string literal has no encoding-prefix, it is treated as a string literal of the same encoding-prefix as the other operand.</strong> If a UTF-8 string literal token is adjacent to a wide string literal token, the program is ill-formed. Any other\n  concatenations are conditionally-supported with implementation-defined behavior. [ Note: This concatenation is an interpretation, not a conversion. Because the interpretation happens in translation phase 6 (after\n  each character from a literal has been translated into a value from the appropriate character set), a string literal\u2019s initial rawness has no effect on the interpretation or well-formedness of the concatenation. \u2014end\n  note ] Table 8 has some examples of valid concatenations.</li>\n</ol>\n</blockquote>\n<p>So there is no UB here, however phase 5 of translation might have already changed values of some characters:</p>\n<blockquote id=\"so_41460467_41460863_1\">\n<ol start=\"5\">\n<li><strong>Each</strong> source character set <strong>member in a</strong> character literal or a <strong>string literal</strong>, as well as each escape sequence and universal-character-name in a character literal or a non-raw string literal, is <strong>converted to the corresponding member of the execution character set if there is no corresponding member, it is converted to an implementation-defined member</strong> other than the null (wide) character.</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "3410396", "PostTypeId": "2", "Id": "41460863", "Score": "0", "CreationDate": "2017-01-04T09:54:51.370", "LastActivityDate": "2017-01-04T09:54:51.370"}, "bq_ids": {"n4140": {"so_41460467_41460863_1": {"section_id": 5313, "quality": 0.9722222222222222, "length": 35}, "so_41460467_41460863_0": {"section_id": 5362, "quality": 0.9125, "length": 73}}, "n3337": {"so_41460467_41460863_1": {"section_id": 5110, "quality": 0.9722222222222222, "length": 35}, "so_41460467_41460863_0": {"section_id": 5158, "quality": 0.9, "length": 72}}, "n4659": {"so_41460467_41460863_1": {"section_id": 6737, "quality": 0.9722222222222222, "length": 35}, "so_41460467_41460863_0": {"section_id": 6786, "quality": 0.7875, "length": 63}}}});