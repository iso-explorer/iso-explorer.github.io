post_cb({"bq_ids": {"n4140": {"so_20593878_20593934_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 1812}, "so_20593878_20593934_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 1812}, "so_20593878_20593934_3": {"length": 16, "quality": 1.0, "section_id": 1532}, "so_20593878_20593934_1": {"length": 7, "quality": 0.875, "section_id": 1811}}, "n3337": {"so_20593878_20593934_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 1806}, "so_20593878_20593934_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 1806}, "so_20593878_20593934_3": {"length": 16, "quality": 1.0, "section_id": 1526}, "so_20593878_20593934_1": {"length": 7, "quality": 0.875, "section_id": 1805}}, "n4659": {"so_20593878_20593934_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 1984}, "so_20593878_20593934_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 1981}, "so_20593878_20593934_3": {"length": 15, "quality": 0.9375, "section_id": 1682}, "so_20593878_20593934_1": {"length": 7, "quality": 0.875, "section_id": 2111}}}, "20593934": {"Id": "20593934", "PostTypeId": "2", "Body": "<p>It's impossible to speak for \"the pages\". You can probably find a Youtube video that will make <em>any</em> claim about anything, so that's not a good basis to go on.</p>\n<p>Instead, let's turn to the language standard. It says, in <code>[string::compare]</code>:</p>\n<blockquote>\n<p id=\"so_20593878_20593934_0\"><code>basic_string::compare</code>: <code>int compare(const basic_string&amp; str) const noexcept;</code></p>\n<p id=\"so_20593878_20593934_1\"><em>Effects:</em> [...] compares the two strings by calling <code>traits::compare(data(), str.data(), rlen)</code>.</p>\n<p id=\"so_20593878_20593934_2\"><em>Returns:</em> The nonzero result if the result of the comparison is nonzero. [...]</p>\n</blockquote>\n<p>(There's an additional rule about first comparing the string lengths, which I'm omitting here.)</p>\n<p>So then, <code>traits::compare</code> is what we need. The traits need to satisfy the \"Character trait requirements\", which say:</p>\n<blockquote>\n<p id=\"so_20593878_20593934_3\">yields: <code>0</code> if for each <code>i</code> in <code>[0,n)</code>, <code>X::eq(p[i],q[i])</code> is true; else, a negative value if, for some <code>j</code> in <code>[0,n)</code>, <code>X::lt(p[j],q[j])</code> is true and for each <code>i</code> in <code>[0,j)</code>\n<code>X::eq(p[i],q[i])</code> is true; else a positive value.</p>\n</blockquote>\n<p>In other words, <code>string::compare</code> returns <em>a negative value</em>, zero, or <em>a positive value</em> respectively to represent lexicographic less-than, equal or greater-than. No actual result <em>values</em> are prescribed, only their sign.</p>\n<p>A <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/compare\" rel=\"nofollow\">decent web reference</a> should get this right, though, so you if you know how to find a good source of information, you don't always have to dig through the standard yourself.</p>\n", "LastActivityDate": "2013-12-15T11:25:34.793", "CommentCount": "0", "CreationDate": "2013-12-15T11:25:34.793", "ParentId": "20593878", "Score": "2", "OwnerUserId": "596781"}, "20593878": {"ViewCount": "493", "Body": "<blockquote>\n<p id=\"so_20593878_20593878_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"http://www.cplusplus.com/reference/string/string/compare/\" rel=\"nofollow noreferrer\">\"compare\" definition</a><br>\n<a href=\"https://stackoverflow.com/questions/9158894/differences-between-c-string-and-compare\">Differences between C++ string == and compare()?</a></br></br></p>\n</blockquote>\n<p>As the pages said \"compare\" simply compares two strings and returns an integer 0,1,-1\nbut in my test cases (when a=100 and b=1) it returns 2 also.</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;sstream&gt;\n#include&lt;vector&gt;\n#include&lt;stdlib.h&gt;\nusing namespace std;\nint main()\n{\n    string a,b,ans;\n    //for(;;)\n    {cin&gt;&gt;a&gt;&gt;b;\n    cout&lt;&lt;a.compare(b)&lt;&lt;\"\\n\\n\";}\n    return 0;\n}\n</code></pre>\n<p>Also I am not able to understand how the function is comparing two strings (is it only number of digits)\nfor test cases like a=10^n b=1 it returns n.</p>\n", "AcceptedAnswerId": "20593934", "Title": "C++ How string::compare work", "CreationDate": "2013-12-15T11:17:07.483", "Id": "20593878", "CommentCount": "3", "LastEditDate": "2017-05-23T11:44:40.557", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-15T11:31:56.473", "Score": "-2", "OwnerUserId": "2374691", "Tags": "<c++><string>", "AnswerCount": "1"}});