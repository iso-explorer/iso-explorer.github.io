post_cb({"8359314": {"ParentId": "8359201", "CommentCount": "1", "Body": "<p>They are both a potential match, but the <code>bool</code> version is preferred by the compiler because in order to match the <code>string</code> version a user-provided (or, in this case, library-provided) conversion function is required.</p>\n<p>If you really want to do this, providing an overload for <code>const char*</code> can get you there:</p>\n<pre><code>void Foo( int xIn, const char* in)\n{\n    return Foo( xIn, string(in) );\n}\n</code></pre>\n<p>I would guess that by doing this, there's a very good chance that the compiler will perform quite a bit of optimization on it.</p>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "8359314", "Score": "9", "CreationDate": "2011-12-02T16:19:04.757", "LastActivityDate": "2011-12-02T16:19:04.757"}, "8359201": {"CommentCount": "3", "AcceptedAnswerId": "8359260", "PostTypeId": "1", "LastEditorUserId": "241536", "CreationDate": "2011-12-02T16:11:40.657", "LastActivityDate": "2011-12-02T17:49:10.280", "LastEditDate": "2011-12-02T16:13:56.840", "ViewCount": "533", "FavoriteCount": "2", "Title": "wrong function being picked", "Id": "8359201", "Score": "26", "Body": "<p>I was trying to clean up some code that uses <code>char*</code> with <code>std::string</code> and ran into a problem that is illustrated by the following code.</p>\n<pre><code>void Foo( int xIn , const std::string &amp; fooIn )\n{\n    std::cout &lt;&lt; \"string argument version called \\n\";\n}\n\nvoid Foo( int xIn ,  bool flagIn = true )\n{\n    std::cout &lt;&lt; \"bool argument version called \\n\";\n}\n\nint main()\n{\n    int x = 1;\n    Foo( x , \"testing\" );\n    return 0;\n}\n</code></pre>\n<p>When I run the program I get <strong>bool argument version called</strong>.  Is a <code>char*</code> to <code>bool</code> conversion preferred over <code>char*</code> to <code>const std::string&amp;</code> or is Visual Studio 2008 playing tricks on me ?</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "764882", "AnswerCount": "3"}, "8360202": {"ParentId": "8359201", "CommentCount": "0", "Body": "<p>One simple fix would be to change the <code>bool</code> to <code>int</code> - there is an implicit conversion from a pointer to <code>bool</code>, but not to <code>int</code>. <code>bool</code> to <code>int</code> is not a problem, so the existing code that passes bools will continue to work.</p>\n<p>Unfortunately this does impact the code readability a little by masking the parameter's intent.</p>\n", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "8360202", "Score": "1", "CreationDate": "2011-12-02T17:27:16.540", "LastActivityDate": "2011-12-02T17:27:16.540"}, "bq_ids": {"n4140": {"so_8359201_8359260_1": {"section_id": 638, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_8359201_8359260_1": {"section_id": 628, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_8359201_8359260_1": {"section_id": 666, "quality": 0.9090909090909091, "length": 20}}}, "8359260": {"ParentId": "8359201", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Surprising as this behaviour is, the compiler is compliant: <code>char*</code> to <code>bool</code> conversion is preferred over the conversion to <code>std::string</code>.</p>\n<p>Read more <a href=\"http://blogs.msdn.com/b/vcblog/archive/2008/06/05/some-c-gotchas.aspx\" rel=\"noreferrer\">here</a>.</p>\n<p>The exact rules are spelled out in the C++ standard. They're surprisingly complicated, but the following paragraph is crucial here:</p>\n<blockquote>\n<p id=\"so_8359201_8359260_0\">C++11 <strong>13.3.3.2 Ranking implicit conversion sequences [over.ics.rank]</strong></p>\n<p id=\"so_8359201_8359260_1\">2\n  When comparing the basic forms of implicit conversion sequences (as\n  defined in 13.3.3.1) \u2014 a standard conversion sequence (13.3.3.1.1) is\n  a better conversion sequence than a user-defined conversion sequence\n  or an ellipsis conversion sequence</p>\n</blockquote>\n<p><code>char*</code>-to-<code>bool</code> requires a \"standard conversion sequence\" whereas <code>char*</code>-to-<code>string</code> requires a \"user-defined conversion sequence\". Therefore, the former is preferred.</p>\n", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2011-12-02T17:49:10.280", "Id": "8359260", "Score": "27", "CreationDate": "2011-12-02T16:15:11.260", "LastActivityDate": "2011-12-02T17:49:10.280"}});