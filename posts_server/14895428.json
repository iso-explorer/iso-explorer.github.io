post_cb({"14895497": {"ParentId": "14895428", "CommentCount": "0", "Body": "<p>Yes, when the <code>std::vector</code> changes size (perhaps by doing <code>std::vector::resize</code>), any new elements will be <em>value-initialized</em>. For a type such as <code>int</code> or <code>long</code>, value-initialization causes zero-initialization which, as the name suggests, will set the value to 0.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "14895497", "Score": "4", "CreationDate": "2013-02-15T13:10:07.707", "LastActivityDate": "2013-02-15T13:10:07.707"}, "14895428": {"CommentCount": "0", "ViewCount": "482", "PostTypeId": "1", "CreationDate": "2013-02-15T13:06:24.357", "LastActivityDate": "2013-02-15T13:16:01.380", "Title": "Are newly allocated elements of std::vector<int> initialized to 0?", "AcceptedAnswerId": "14895494", "LastEditorDisplayName": "user195488", "LastEditDate": "2013-02-15T13:10:46.723", "Id": "14895428", "Score": "3", "Body": "<p>Let us say, we use <code>std::vector&lt;int&gt;</code> or <code>std::vector&lt;long&gt;</code>. As the vector grows in size, would the newly allocated elements be initialized to 0 by default, or the programmer needs to 0 them explicitly?</p>\n", "Tags": "<c++><vector><stl>", "OwnerUserId": "760807", "AnswerCount": "3"}, "14895494": {"ParentId": "14895428", "LastEditDate": "2013-02-15T13:15:15.473", "CommentCount": "0", "CreationDate": "2013-02-15T13:09:59.970", "OwnerUserId": "560648", "LastEditorUserId": "560648", "PostTypeId": "2", "Id": "14895494", "Score": "9", "Body": "<p>New <em>elements</em> are value-initialised:</p>\n<blockquote>\n<p id=\"so_14895428_14895494_0\"><code>[C++11: 23.3.6.3/9]:</code> <code>void resize(size_type sz);</code> <br/><br/>\n<strong>Effects:</strong> If <code>sz &lt;= size()</code>, equivalent to <code>erase(begin() + sz, end());</code>. If <code>size() &lt; sz</code>, appends <code>sz - size()</code> <em>value-initialized</em> elements to the sequence.</p>\n</blockquote>\n<p>For both <code>int</code> and <code>long</code> this means <code>0</code>:</p>\n<blockquote>\n<p id=\"so_14895428_14895494_1\"><code>[C++11: 8.5/7]:</code> <strong>To value-initialize an object of type <code>T</code> means</strong>:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li><strong>otherwise, the object is zero-initialized.</strong></li>\n</ul>\n<p id=\"so_14895428_14895494_2\">An object that is value-initialized is deemed to be constructed and thus subject to provisions of this International Standard applying to \u201cconstructed\u201d objects, objects \u201cfor which the constructor has completed,\u201d etc., even if no constructor is invoked for the object\u2019s initialization.</p>\n</blockquote>\n<p><strong>Note, though, that this is <em>not</em> talking about the \"reserved\" space at the end of the vector.</strong> This space does not contain any valid elements, zero-initialised or otherwise. This answer and the standard wording talks only about the elements you get when you perform a <code>resize</code> without specifying an explicit value for your new elements.</p>\n", "LastActivityDate": "2013-02-15T13:15:15.473"}, "14895493": {"ParentId": "14895428", "LastEditDate": "2013-02-15T13:16:01.380", "CommentCount": "0", "CreationDate": "2013-02-15T13:09:57.417", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "PostTypeId": "2", "Id": "14895493", "Score": "6", "Body": "<p>Per Paragraph 23.3.6.3/9 of the C++11 Standard (about <code>std::vector::resize()</code>):</p>\n<blockquote>\n<p id=\"so_14895428_14895493_0\"><code>void resize(size_type sz);</code></p>\n<p id=\"so_14895428_14895493_1\">Effects: If sz &lt;= size(), equivalent to erase(begin() + sz, end());. If size() &lt; sz, appends sz - size() <strong>value-initialized</strong> elements to the sequence.</p>\n</blockquote>\n<p>Moreover, per Paragraph 8.5/7 of the Standard:</p>\n<blockquote>\n<p id=\"so_14895428_14895493_2\">To <strong>value-initialize</strong> an object of type T means:</p>\n<p id=\"so_14895428_14895493_3\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the\n  default constructor for T is called (and the initialization is ill-formed if T has no accessible default\n  constructor);</p>\n<p id=\"so_14895428_14895493_4\">\u2014  if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is\n  called.</p>\n<p id=\"so_14895428_14895493_5\">\u2014  if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_14895428_14895493_6\">\u2014  <strong>otherwise, the object is zero-initialized</strong>.</p>\n</blockquote>\n<p>This means that in the case of <code>int</code> the newly created elements are value-initialized to <code>0</code>.</p>\n", "LastActivityDate": "2013-02-15T13:16:01.380"}, "bq_ids": {"n4140": {"so_14895428_14895493_1": {"section_id": 810, "quality": 0.6363636363636364, "length": 7}, "so_14895428_14895493_3": {"section_id": 3286, "quality": 0.7058823529411765, "length": 12}, "so_14895428_14895493_4": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_14895428_14895494_1": {"section_id": 3287, "quality": 0.6666666666666666, "length": 4}, "so_14895428_14895494_2": {"section_id": 3287, "quality": 0.9523809523809523, "length": 20}, "so_14895428_14895493_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_14895428_14895493_5": {"section_id": 3287, "quality": 1.0, "length": 6}}, "n3337": {"so_14895428_14895493_1": {"section_id": 801, "quality": 0.9090909090909091, "length": 10}, "so_14895428_14895493_3": {"section_id": 3157, "quality": 0.9411764705882353, "length": 16}, "so_14895428_14895494_0": {"section_id": 801, "quality": 0.6666666666666666, "length": 10}, "so_14895428_14895493_4": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_14895428_14895494_1": {"section_id": 3157, "quality": 0.6666666666666666, "length": 4}, "so_14895428_14895494_2": {"section_id": 3157, "quality": 0.9523809523809523, "length": 20}, "so_14895428_14895493_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_14895428_14895493_5": {"section_id": 3157, "quality": 1.0, "length": 6}}, "n4659": {"so_14895428_14895493_1": {"section_id": 868, "quality": 0.5454545454545454, "length": 6}, "so_14895428_14895493_3": {"section_id": 4049, "quality": 0.6470588235294118, "length": 11}, "so_14895428_14895493_5": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_14895428_14895493_4": {"section_id": 4049, "quality": 0.6875, "length": 11}}}});