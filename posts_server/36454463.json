post_cb({"36457979": {"ParentId": "36454463", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Using the code provided I was unable to reproduce your strange behavior with g++ regarding the commenting/uncommenting of the queue declared in B.  I get the same error on g++ whether the queue is commented out or not.</p>\n<p>However, the compilation error that you are getting is the same as I get in my test of your code.  This error results from the fact that you have explicitly deleted B's copy constructor.  The error message points directly at B's copy constructor: <code>B(const B&amp;) = delete;</code></p>\n<p>See this answer here for more details: <a href=\"https://stackoverflow.com/a/14543600/1456187\">https://stackoverflow.com/a/14543600/1456187</a></p>\n<p>As to the second part of your question I can only hazard a guess since I do not have a copy of the Microsoft compiler handy.  My best guess is that the Microsoft compiler allows the initialization of the array of Bs because they are being constructed in place.  Although, this would seem to fly in the face of the standard as of the '03 spec.</p>\n", "OwnerUserId": "1456187", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:31:14.547", "Id": "36457979", "Score": "0", "CreationDate": "2016-04-06T17:16:33.870", "LastActivityDate": "2016-04-06T17:22:49.783"}, "36454463": {"CommentCount": "3", "ViewCount": "279", "PostTypeId": "1", "LastEditorUserId": "6166851", "CreationDate": "2016-04-06T14:42:16.437", "LastActivityDate": "2016-04-07T12:53:51.843", "Title": "C++11 g++ error: use of deleted function", "LastEditDate": "2016-04-07T12:53:51.843", "Id": "36454463", "Score": "1", "Body": "<p>I have compilers:<br>\ng++ (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4<br>\nMicrosoft Visual Studio 2015 ver. 14.0. (Visual C++ 2015)</br></br></p>\n<p>Source code:</p>\n<pre><code>#include &lt;queue&gt;\n\nclass C\n{\n};\n\n\nclass B\n{\npublic:\n  // assignment and copy prohibited\n  B(const B&amp;) = delete;\n  B&amp; operator=(const B&amp;) = delete;\n\n  B(int v1, int v2) : m_V1(v1), m_V2(v2) {}\n\nprivate:\n  int m_V1;\n  int m_V2;\n  std::queue&lt;C&gt; m_Queue;\n};\n\nclass A\n{\npublic:\n  // assignment and copy prohibited\n  A(const A&amp;) = delete;\n  A&amp; operator=(const A&amp;) = delete;\n\n  A(int p1, int p2) : arrB{ {p1+1, p2+2}, {p1+3, p2+4}, {p1+5, p2+6} } { }\n\nprivate:\n  B arrB[3];\n};\n</code></pre>\n<p>1) If I use g++ with</p>\n<pre><code>std::queue&lt;C&gt; m_Queue;\n</code></pre>\n<p>I get the following error:</p>\n<pre><code>make\ng++ -std=c++11 -c test.cpp\ntest.cpp: In constructor \u2018A::A(int, int)\u2019:\ntest.cpp:29:70: error: use of deleted function \u2018B::B(const B&amp;)\u2019\n   A(int p1, int p2) : arrB{ {p1+1, p2+2}, {p1+3, p2+4}, {p1+5, p2+6} } { }\n                                                                      ^\ntest.cpp:11:3: error: declared here\n   B(const B&amp;) = delete;\n   ^\nmake: *** [test.o] Error 1\n</code></pre>\n<p>2) If I use g++ and comment the line</p>\n<pre><code>//std::queue&lt;C&gt; m_Queue;\n</code></pre>\n<p>or I use both variants (commented and not) with Microsoft Visual Studio 2015 I don't get any errors.</p>\n<p>Why?</p>\n<p><strong>Update:</strong><br>\nList-initialization uses direct-list-initialization or copy-list-initialization.</br></p>\n<blockquote>\n<p id=\"so_36454463_36454463_0\">8.5.4 List-initialization<br> 1 List-initialization is initialization of an object or reference from a braced-init-list. Such an initializer\n  is called an initializer list, and the comma-separated\n  initializer-clauses of the list are called the elements of the\n  initializer list. An initializer list may be empty.\n  List-initialization can occur in direct-initialization or\n  copyinitialization contexts; list-initialization in a\n  direct-initialization context is called direct-list-initialization and\n  list-initialization in a copy-initialization context is called\n  copy-list-initialization.</br></p>\n</blockquote>\n<p>But I do not understand what sort of initialization to be used in my case. I supposed that should be used direct-list-initialization in accordance with <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/list_initialization</a></p>\n<p><strong>Update 2:</strong></p>\n<blockquote>\n<p id=\"so_36454463_36454463_1\">8.5.1 Aggregates [dcl.init.aggr]<br> 1 An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or\n  protected non-static data members (Clause 11), no base classes (Clause\n  10), and no virtual functions (10.3).</br></p>\n<p id=\"so_36454463_36454463_2\">When an aggregate is initialized by an initializer list, as specified\n  in 8.5.4, the elements of the initializer list are taken as\n  initializers for the members of the aggregate, in increasing subscript\n  or member order. Each member is copy-initialized from the\n  corresponding initializer-clause.</p>\n</blockquote>\n<p><strong>An aggregate is an array</strong> and <strong>Each member is copy-initialized</strong> - answer?<br>\nBut this does not explain why compiles without errors when commenting on the line:</br></p>\n<pre><code>//std::queue&lt;C&gt; m_Queue;\n</code></pre>\n", "Tags": "<c++11><g++>", "OwnerUserId": "6166851", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36454463_36454463_1": {"section_id": 3298, "quality": 0.7272727272727273, "length": 16}, "so_36454463_36454463_0": {"section_id": 3323, "quality": 0.8974358974358975, "length": 35}, "so_36454463_36454463_2": {"section_id": 3299, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_36454463_36454463_1": {"section_id": 3168, "quality": 0.7272727272727273, "length": 16}, "so_36454463_36454463_0": {"section_id": 3193, "quality": 0.8974358974358975, "length": 35}, "so_36454463_36454463_2": {"section_id": 3169, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_36454463_36454463_1": {"section_id": 4063, "quality": 0.5454545454545454, "length": 12}, "so_36454463_36454463_0": {"section_id": 4089, "quality": 0.8205128205128205, "length": 32}, "so_36454463_36454463_2": {"section_id": 4065, "quality": 0.7391304347826086, "length": 17}}}});