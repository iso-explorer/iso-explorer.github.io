post_cb({"bq_ids": {"n4140": {"so_14169752_14169973_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 6066}, "so_14169752_14169904_0": {"length": 14, "quality": 1.0, "section_id": 380}}, "n3337": {"so_14169752_14169973_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 5834}, "so_14169752_14169904_0": {"length": 14, "quality": 1.0, "section_id": 371}}, "n4659": {"so_14169752_14169973_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 7562}, "so_14169752_14169904_0": {"length": 14, "quality": 1.0, "section_id": 395}}}, "14169904": {"Id": "14169904", "PostTypeId": "2", "Body": "<p>The code is perfectly valid(<em>on MSVC</em>). And you can ignore the warning as red herring.    </p>\n<p>There are two issues to consider:</p>\n<ol>\n<li>Taking the address of an temporary(<em>a.k.a: rvalue</em>), which is not allowed as per the standard &amp;</li>\n<li>Lifetime of the temporary who's address is taken.</li>\n</ol>\n<p><strong>Counter Issue 1:</strong><br>\nMSVC allows you to take the address of an temporary through an extension. So taking address of the temporary shall and will compile atleast in your case(courtesy MSVC).    </br></p>\n<p><strong>Counter Issue 2:</strong><br>\nFurther the temporary <code>String8(\"Exception\")</code> is guaranteed to live at least until the expression ends. Note that the expressions ends just after the return from <code>WriteLine()</code>, to be precise <code>;</code>(<em>the semicolon at the end of call</em>). So it is perfectly valid. In this case you can consider the warning as an red herring. </br></p>\n<p><strong>C++03 Standard \u00a712.2/3:</strong></p>\n<blockquote>\n<p id=\"so_14169752_14169904_0\">Temporary objects are destroyed as the last step in evaluating the full-expression (1.9) that (lexically) contains the point where they were created. </p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2013-01-05T08:12:04.690", "Score": "2", "CreationDate": "2013-01-05T08:04:07.747", "ParentId": "14169752", "CommentCount": "0", "LastEditDate": "2013-01-05T08:12:04.690", "OwnerUserId": "452307"}, "14169752": {"ViewCount": "168", "Body": "<p>Why do some compilers complain about taking an address of a temporary from a constructor and some dont?</p>\n<p>For example:</p>\n<pre><code>WriteLine(&amp;String8(\"Exception\"));\n</code></pre>\n<p>I'm assuming the complaining compiler is not storing that address on the stack and it will blow up if I ignore the warning.  Is there a way to get that to work in one line?  Is the best/only way a static method on the class that returns an address?  Hmm I don't think a static method on the String8 class that returns a pointer would work since it would save the String8 class to a register and then eat it in WriteLine()</p>\n", "AcceptedAnswerId": "14169973", "Title": "C++ temporaries and constructors", "CreationDate": "2013-01-05T07:38:53.193", "Id": "14169752", "CommentCount": "16", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-01-05T07:45:31.620", "LastEditorUserId": "951757", "LastActivityDate": "2013-01-05T08:21:25.987", "Score": "2", "OwnerUserId": "1815759", "Tags": "<c++>", "AnswerCount": "2"}, "14169973": {"Id": "14169973", "PostTypeId": "2", "Body": "<p>The example code you give,</p>\n<pre><code>WriteLine(&amp;String8(\"Exception\"));\n</code></pre>\n<p>is <strong>invalid</strong> as standard C++, unless the <code>String8</code> type defines a custom address operator.</p>\n<hr>\n<p>You ask,</p>\n<blockquote>\n<p id=\"so_14169752_14169973_0\">\u201cWhy do some compilers complain about taking an address of a temporary from a constructor and some dont?\u201d</p>\n</blockquote>\n<p>Some compilers complain, because the C++ standard says you can't use the built-in address operator to take the address of a temporary:</p>\n<blockquote>\n<p id=\"so_14169752_14169973_1\"><strong>C++11 \u00a75.3.1/3</strong>:<br>\n  \u201cThe result of the unary <code>&amp;</code> operator is a pointer to its operand. The operand shall be an lvalue or a <em>qualified-id</em>.\u201d</br></p>\n</blockquote>\n<p>Some compilers, such as Visual C++, don't complain, because they offer the ability to take the address as a <strong>language extension</strong>.</p>\n<hr>\n<p>Note that a user defined type can define a custom address operator. Thus, in your case it <em>depends on the <code>String8</code> type</em>. As well as on the compiler.</p>\n<hr>\n<p>You further ask,</p>\n<blockquote>\n<p id=\"so_14169752_14169973_2\">\u201cIs there a way to get that to work in one line?\u201d</p>\n</blockquote>\n<p>Yes you <em>can</em> define an address operator. But it's not a good idea. First of all it only creates problems with standard library etc., and secondly, the need for that is very rare.</p>\n<p>I can only remember one case where I seriously considered such a solution, namely for passing a COM smart pointer as out-argument. Instead of defining an address operator I defined a named method. It's much more clear and doesn't interfere with other things.</p>\n</hr></hr></hr>", "LastEditorUserId": "464581", "LastActivityDate": "2013-01-05T08:21:25.987", "Score": "5", "CreationDate": "2013-01-05T08:15:28.120", "ParentId": "14169752", "CommentCount": "5", "LastEditDate": "2013-01-05T08:21:25.987", "OwnerUserId": "464581"}});