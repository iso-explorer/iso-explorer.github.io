post_cb({"bq_ids": {"n4140": {"so_36356115_36356212_0": {"length": 8, "quality": 0.8, "section_id": 4706}}, "n4659": {"so_36356115_36356212_0": {"length": 7, "quality": 0.7, "section_id": 6103}}}, "36356212": {"Id": "36356212", "PostTypeId": "2", "LastEditDate": "2016-04-01T13:09:01.827", "CommentCount": "1", "LastEditorUserId": "1782465", "LastActivityDate": "2016-04-01T13:09:01.827", "CreationDate": "2016-04-01T12:20:57.333", "ParentId": "36356115", "Score": "4", "Body": "<p>libstdc++ is correct as marking this as not <code>std::is_copy_assignable</code>. Per C++14 20.10.4.3 table 49, <code>is_copy_assignable</code> is defined as:</p>\n<blockquote>\n<p id=\"so_36356115_36356212_0\">For a referenceable type <code>T</code>, the same result as <code>is_assignable&lt;T, const T&amp;&gt;::value</code>, otherwise <code>false</code>.</p>\n</blockquote>\n<p>This means that the type trait <code>std::is_copy_assignable&lt;T&gt;</code> means \"<code>T</code> can be assigned into with a <code>const T&amp;</code> argument.\" Which your class cannot.</p>\n", "OwnerUserId": "1782465"}, "36356115": {"ViewCount": "43", "Body": "<p>With following code:</p>\n<pre><code>namespace _Detail\n{\n    struct _HasCopyAssignment\n    {\n        template &lt;typename _Type&gt;\n        static auto test(_Type&amp;&amp; var) -&gt; decltype(var = var, std::true_type());\n        static auto test(...) -&gt; decltype(std::false_type());\n    };\n}\n\ntemplate &lt;typename _Type&gt;\nstruct HasCopyAssignment : public decltype(_Detail::_HasCopyAssignment::test(std::declval&lt;_Type&gt;()))\n{};\n</code></pre>\n<p>And this test type:</p>\n<pre><code>struct B\n{\n    B&amp; operator=(B&amp;);\n};\n</code></pre>\n<p>my <code>HasCopyAssignment&lt;B&gt;::value</code> evaluates to <code>true</code>, but <code>&lt;type_traits&gt;</code> test for <code>is_copy_assignable&lt;B&gt;::value</code> in GCC standard lib implementation is <code>false</code>. Should object be considered copy assignable if it's copy assignment operator take a non-const reference as parameter?</p>\n", "AcceptedAnswerId": "36356212", "Title": "C++ Should this type satisfy std::is_copy_assignable?", "CreationDate": "2016-04-01T12:15:18.260", "Id": "36356115", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-04-01T13:09:01.827", "Score": "2", "OwnerUserId": "3964037", "Tags": "<c++><templates><typetraits>", "AnswerCount": "1"}});