post_cb({"38796403": {"ParentId": "38795544", "CommentCount": "1", "Body": "<p>You said</p>\n<blockquote>\n<p id=\"so_38795544_38796403_0\">I can't tell whether \"truncated value cannot be represented\" covers infinity</p>\n</blockquote>\n<p>but it all boils down to</p>\n<blockquote>\n<p id=\"so_38795544_38796403_1\">What is the result of truncating infinity.</p>\n</blockquote>\n<p>The C standard (incorporated into C++ via 26.9) answers that quite plainly:</p>\n<p><a href=\"https://i.stack.imgur.com/85Trw.png\" rel=\"noreferrer\"><img alt=\"C standard semantics for &lt;code&gt;trunc&lt;/code&gt;\" src=\"https://i.stack.imgur.com/85Trw.png\"/></a></p>\n<p>Since truncation of infinity is still infinity, and infinity cannot be represented in <code>int</code> (I hope there's no question about this part), the behavior is undefined.</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "38796403", "Score": "15", "CreationDate": "2016-08-05T19:18:56.013", "LastActivityDate": "2016-08-05T19:18:56.013"}, "38796216": {"ParentId": "38795544", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_38795544_38796216_0\">I'm trying to understand why <code>std::numeric_limits&lt;int&gt;::infinity()</code> and <code>static_cast&lt;int&gt;(std::numeric_limits&lt;float&gt;::infinity() )</code> have different results.</p>\n</blockquote>\n<p>The standard says: <a href=\"http://eel.is/c++draft/numeric.limits.members\" rel=\"nofollow\">18.3.2.4</a></p>\n<blockquote>\n<p id=\"so_38795544_38796216_1\">static constexpr T infinity() noexcept;</p>\n<p id=\"so_38795544_38796216_2\">47 Representation of positive infinity, if available. [216]</p>\n<p id=\"so_38795544_38796216_3\">48 Meaningful for all specializations for which has_infinity != false. Required in specializations for which is_iec559 != false.</p>\n</blockquote>\n<p>--- edit ---</p>\n<p>According to 18.3.2.7/1 [numeric.special]</p>\n<blockquote>\n<p id=\"so_38795544_38796216_4\">1 All members shall be provided for all specializations. However, many values are only required to be meaningful under certain conditions (for example, epsilon() is only meaningful if is_integer is false). Any value that is not \u201cmeaningful\u201d shall be set to 0 or false.</p>\n</blockquote>\n", "OwnerUserId": "257645", "LastEditorUserId": "978917", "LastEditDate": "2016-08-06T01:07:09.123", "Id": "38796216", "Score": "4", "CreationDate": "2016-08-05T19:06:21.487", "LastActivityDate": "2016-08-06T01:07:09.123"}, "38795544": {"CommentCount": "15", "ViewCount": "1450", "PostTypeId": "1", "LastEditorUserId": "513951", "CreationDate": "2016-08-05T18:15:02.490", "LastActivityDate": "2016-08-06T01:07:09.123", "Title": "Is casting of infinity to integer undefined?", "AcceptedAnswerId": "38796403", "LastEditDate": "2016-08-05T18:19:01.587", "Id": "38795544", "Score": "24", "Body": "<p>Is the casting of infinity (represented by float) to an integer an undefined behavior?</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_38795544_38795544_0\">4.10  Floating-integral conversions</p>\n<p id=\"so_38795544_38795544_1\">A prvalue of a floating point type can be converted to a prvalue of an\n  integer type. The conversion truncates; that is, the fractional part\n  is discarded. The behavior is undefined if the truncated value cannot\n  be represented in the destination type.</p>\n</blockquote>\n<p>but I can't tell whether \"truncated value cannot be represented\" covers infinity.</p>\n<p>I'm trying to understand why <code>std::numeric_limits&lt;int&gt;::infinity()</code> and <code>static_cast&lt;int&gt;(std::numeric_limits&lt;float&gt;::infinity() )</code> have different results.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;limits&gt;\n\nint main ()\n{\n    std::cout &lt;&lt; std::numeric_limits&lt;int&gt;::infinity () &lt;&lt; std::endl;\n    std::cout &lt;&lt; static_cast&lt;int&gt; (std::numeric_limits&lt;float&gt;::infinity () ) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>0  \n-2147483648  \n</code></pre>\n<p>The result of <code>std::numeric_limits&lt;int&gt;::infinity()</code> <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/infinity\">is well defined</a> and equal to <code>0</code>, but I can't find any information about casting infinity.</p>\n", "Tags": "<c++><undefined-behavior>", "OwnerUserId": "3175480", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_38795544_38795544_1": {"section_id": 37, "quality": 0.9166666666666666, "length": 22}, "so_38795544_38796162_0": {"section_id": 37, "quality": 0.8888888888888888, "length": 8}, "so_38795544_38796216_4": {"section_id": 6789, "quality": 0.9565217391304348, "length": 22}, "so_38795544_38796216_3": {"section_id": 6766, "quality": 1.0, "length": 9}, "so_38795544_38796216_1": {"section_id": 6764, "quality": 1.0, "length": 4}, "so_38795544_38796216_2": {"section_id": 6765, "quality": 0.8, "length": 4}}, "n3337": {"so_38795544_38795544_1": {"section_id": 34, "quality": 0.9166666666666666, "length": 22}, "so_38795544_38796162_0": {"section_id": 34, "quality": 0.8888888888888888, "length": 8}, "so_38795544_38796216_4": {"section_id": 6544, "quality": 0.9565217391304348, "length": 22}, "so_38795544_38796216_3": {"section_id": 6521, "quality": 1.0, "length": 9}, "so_38795544_38796216_1": {"section_id": 6519, "quality": 1.0, "length": 4}, "so_38795544_38796216_2": {"section_id": 6520, "quality": 0.8, "length": 4}}, "n4659": {"so_38795544_38795544_1": {"section_id": 37, "quality": 0.8333333333333334, "length": 20}, "so_38795544_38796162_0": {"section_id": 37, "quality": 0.8888888888888888, "length": 8}, "so_38795544_38796216_4": {"section_id": 8281, "quality": 0.9565217391304348, "length": 22}, "so_38795544_38796216_3": {"section_id": 8260, "quality": 1.0, "length": 9}, "so_38795544_38796216_1": {"section_id": 8258, "quality": 1.0, "length": 4}, "so_38795544_38796216_2": {"section_id": 8259, "quality": 0.8, "length": 4}}}, "38796162": {"ParentId": "38795544", "CommentCount": "0", "Body": "<p>Casting of infinity to integer is undefined.</p>\n<blockquote>\n<p id=\"so_38795544_38796162_0\">The behavior is undefined if the truncated value cannot be represented in the destination type.</p>\n</blockquote>\n<p>Says it all. Since truncation removes precision but not magnitude, a truncated infinity is still infinity and integers cannot represent infinity.</p>\n", "OwnerUserId": "973872", "PostTypeId": "2", "Id": "38796162", "Score": "20", "CreationDate": "2016-08-05T19:02:14.397", "LastActivityDate": "2016-08-05T19:02:14.397"}});