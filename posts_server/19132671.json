post_cb({"19132671": {"CommentCount": "5", "AcceptedAnswerId": "19132953", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-10-02T08:15:59.950", "LastActivityDate": "2013-10-02T09:11:05.843", "LastEditDate": "2017-05-23T12:00:35.347", "ViewCount": "104", "FavoriteCount": "1", "Title": "Are array elements incomplete objects?", "Id": "19132671", "Score": "4", "Body": "<p>After a <a href=\"https://stackoverflow.com/a/18988080/596781\">recent question on static typing</a>, I was thinking about arrays again. I always thought that array elements are just ordinary objects, but now I wonder:</p>\n<p>Are the elements of an array complete objects in their own right, or are they incomplete, and the only complete object is the array itself?</p>\n<p>If this were the case, then what is the complete object of <code>(new T[N])[0]</code>, and what is its type?</p>\n<p>If the element is incomplete, then does that mean that there are complete objects whose type cannot be known statically? (This is different from base/derived business: the type of <code>new Derived</code> <em>is</em> known statically, though it may never be recorded outside that expression.)</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "596781", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19132671_19132953_0": {"section_id": 5791, "quality": 0.8333333333333334, "length": 20}, "so_19132671_19132953_1": {"section_id": 6082, "quality": 0.875, "length": 7}}, "n3337": {"so_19132671_19132953_0": {"section_id": 5564, "quality": 0.8333333333333334, "length": 20}, "so_19132671_19132953_1": {"section_id": 5850, "quality": 0.875, "length": 7}}, "n4659": {"so_19132671_19132953_1": {"section_id": 7578, "quality": 0.875, "length": 7}, "so_19132671_19132953_0": {"section_id": 7248, "quality": 0.8333333333333334, "length": 20}}}, "19132953": {"ParentId": "19132671", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>An array element is not a complete object. C++11, [intro.object]\u00a72:</p>\n<blockquote>\n<p id=\"so_19132671_19132953_0\">Objects can contain other objects, called <em>subobjects.</em> A subobject can be a <em>member subobject</em> (9.2), a <em>base class subobject</em> (Clause 10), or an array element. An object that is not a subobject of any other object is called a <em>complete object.</em></p>\n</blockquote>\n<p>As for <code>(new T[N])[0]</code>. The complete object is the object created by the <em>new-expression</em> (an array of <code>T</code>). I'd say its type is \"array of <code>N</code> elements of <code>T</code>\", as per [expr.new]\u00a71:</p>\n<blockquote>\n<p id=\"so_19132671_19132953_1\">The <em>new-expression</em> attempts to create an object of the <em>type-id</em> or <em>new-type-id</em> to which it is applied.</p>\n</blockquote>\n<p>Here, it's a <em>new-type-id,</em> constructed from <code>T[N]</code>.</p>\n<p>Note that when creating arrays, a <em>new-expression</em> returns a pointer to the initial element of that array, not to the array itself. Which means that in such case, the type of the <em>new-expression</em> is not the type of the complete object it creates. In other words, the complete object's type cannot be accessed by any means.</p>\n", "OwnerUserId": "1782465", "LastEditorUserId": "1782465", "LastEditDate": "2013-10-02T09:11:05.843", "Id": "19132953", "Score": "4", "CreationDate": "2013-10-02T08:34:03.493", "LastActivityDate": "2013-10-02T09:11:05.843"}});