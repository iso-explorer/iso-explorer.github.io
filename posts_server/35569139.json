post_cb({"bq_ids": {"n4140": {"so_35569139_35569331_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 5937}, "so_35569139_35569331_1": {"length": 13, "quality": 1.0, "section_id": 5937}}, "n3337": {"so_35569139_35569331_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 5709}, "so_35569139_35569331_1": {"length": 13, "quality": 1.0, "section_id": 5709}}, "n4659": {"so_35569139_35569331_2": {"length": 16, "quality": 0.5714285714285714, "section_id": 7421}, "so_35569139_35569331_1": {"length": 13, "quality": 1.0, "section_id": 7421}}}, "35569323": {"Id": "35569323", "PostTypeId": "2", "Body": "<p>int max on a 32 bit system is 2,147,483,647 (2^31 -1), unsigned it's (2^32 -1) 4,294,967,295</p>\n<pre><code>int thing = 21474836470;\n</code></pre>\n<p>What happens is unspecified, it's up to the compiler. Mine appears to truncate the higher bits. 21474836470 is 0x4fffffff6,  </p>\n<pre><code>warning: implicit conversion from 'long' to 'int' changes\n  value from 21474836470 to -10 [-Wconstant-conversion]\nint thing = 21474836470;\n</code></pre>\n", "LastActivityDate": "2016-02-23T05:11:31.470", "CommentCount": "1", "CreationDate": "2016-02-23T05:11:31.470", "ParentId": "35569139", "Score": "1", "OwnerUserId": "3995687"}, "35569331": {"Id": "35569331", "PostTypeId": "2", "Body": "<p>According to the standard, evaluating an expression that causes integer overflow is cause for undefined behavior.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_35569139_35569331_0\"><strong>5 Expressions</strong></p>\n<p id=\"so_35569139_35569331_1\">4 If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined. </p>\n</blockquote>\n<p>Strangely enough, the standard goes on to say:</p>\n<blockquote>\n<p id=\"so_35569139_35569331_2\">[ <em>Note:</em> most existing implementations of C++ ignore integer overflows. Treatment of division by zero, forming a remainder using a zero divisor, and all floating point exceptions vary among machines, and is usually adjustable by a library function. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>That would indicate that dealing with integer overflow is a compiler specific behavior for modern compilers.</p>\n<p><strong>PS</strong> Even though the answer above does not explain the behavior observed by OP, I decided to keep it around for the comments. Hopefully nobody will delete the comments.</p>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-02-23T05:40:21.717", "Score": "-1", "CreationDate": "2016-02-23T05:12:07.567", "ParentId": "35569139", "CommentCount": "10", "OwnerUserId": "434551", "LastEditDate": "2016-02-23T05:40:21.717"}, "35569298": {"Id": "35569298", "PostTypeId": "2", "Body": "<p>It is <em>implementation-defined</em> behaviour. This means that your compiler must provide documentation saying what happens in this scenario.</p>\n<p>So, consult that documentation to get your answer.</p>\n<p>A common way that implementations define it is to truncate the input integer to the number of bits of <code>int</code> (after reinterpreting unsigned as signed if necessary).</p>\n<p>C++14 Standard references: [expr.ass]/3, [conv.integral]/3</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2016-02-23T05:31:27.817", "Score": "4", "CreationDate": "2016-02-23T05:09:38.630", "ParentId": "35569139", "CommentCount": "4", "OwnerUserId": "1505939", "LastEditDate": "2016-02-23T05:31:27.817"}, "35569139": {"ViewCount": "417", "Body": "<p>Suppose I assign an eleven digits number to an int, what will happen? I played around with it a little bit and I know it's giving me some other numbers within the int range. How is this new number created?</p>\n", "AcceptedAnswerId": "35569298", "Title": "What happens when I assign a number larger than INT_MAX to an int?", "CreationDate": "2016-02-23T04:57:51.150", "Id": "35569139", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-02-23T05:40:21.717", "Score": "1", "OwnerUserId": "2817869", "Tags": "<c++>", "AnswerCount": "3"}});