post_cb({"12928105": {"ParentId": "12927835", "CommentCount": "1", "Body": "<p>You are probably calling the function and assigning the result to something:</p>\n<pre><code>Polynomial p = ....;\nstd::string s = p.toString();\n</code></pre>\n<p>Since you have no return statement in <code>Polynomial::toString()</code>, which in itself is undefined behaviour, this can easily result in a segmentation violation. You can easily fix this by returning the <code>stringstreams</code>'s `string:</p>\n<pre><code>return result.str();\n</code></pre>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "12928105", "Score": "3", "CreationDate": "2012-10-17T06:05:06.440", "LastActivityDate": "2012-10-17T06:05:06.440"}, "12927835": {"CommentCount": "3", "ViewCount": "203", "CreationDate": "2012-10-17T05:44:38.403", "LastActivityDate": "2012-10-17T06:11:12.443", "Title": "C++ segmentation fault", "AcceptedAnswerId": "12928105", "PostTypeId": "1", "Id": "12927835", "Score": "0", "Body": "<p>I'm new to C++ and the memory nuances that are needed to write and debug the language. Can anyone tell me why the following code is giving me a segmentation fault?</p>\n<pre><code>string Polynomial::toString(){\n    int i, exponent;\n    stringstream result;\n\n    for (i = 0; i &lt; coeffs.size(); i++){\n\n        // For first non-zero coefficient\n        if (result.str().empty()){\n            if(coeffs[i] &lt; 0)\n                result &lt;&lt; \"-\";\n            if(coeffs[i] != 0)\n                result &lt;&lt; coeffs[i];\n        }\n        else{\n            if(coeffs[i] &lt; 0)\n                result &lt;&lt; \" - \" &lt;&lt; abs(coeffs[i]);\n            else if(coeffs[i] &gt; 0)\n                result &lt;&lt; \" + \" &lt;&lt; coeffs[i];\n        }\n\n        exponent = (coeffs.size() - i - 1);\n        if (coeffs[i] != 0){\n            if (exponent &gt; 1)\n                result &lt;&lt; coeffs[i] &lt;&lt; \"x^\" &lt;&lt; exponent;\n            else if(exponent == 1)\n                result &lt;&lt; coeffs[i] &lt;&lt; \"x\";\n        }\n    }\n\n    result.str();\n}\n</code></pre>\n", "Tags": "<c++><segmentation-fault>", "OwnerUserId": "1634835", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_12927835_12928089_0": {"section_id": 3913, "quality": 0.5714285714285714, "length": 4}, "so_12927835_12928089_1": {"section_id": 3913, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_12927835_12928089_0": {"section_id": 3773, "quality": 0.5714285714285714, "length": 4}, "so_12927835_12928089_1": {"section_id": 3773, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_12927835_12928089_1": {"section_id": 4799, "quality": 0.6363636363636364, "length": 7}}}, "12928089": {"ParentId": "12927835", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your function is missing a return statement (probably just the <code>return</code> part). According to the standard, reaching the closing brace on any function besides <code>main</code> that has a return type is undefined behaviour, as per \u00a76.6.2/2 of the C++11 standard, shown below, which usually results in a crash, though it might not always do so.</p>\n<p>Other than that, there's nothing that could cause undefined behaviour or a crash. What you want to do is add the <code>return</code> part:</p>\n<pre><code>return result.str();\n</code></pre>\n<p>For what it's worth, GCC 4.7.2 gives the following warning:</p>\n<blockquote>\n<p id=\"so_12927835_12928089_0\">warning: no return statement in function returning non-void [-Wreturn-type]</p>\n</blockquote>\n<p>Always take advantage of the warnings compilers can and will give you.</p>\n<hr>\n<p>Standard reference:</p>\n<blockquote>\n<p id=\"so_12927835_12928089_1\">Flowing o\ufb00 the end of a function is equivalent to a return with no value; this results in unde\ufb01ned\n  behavior in a value-returning function.</p>\n</blockquote>\n</hr>", "OwnerUserId": "962089", "LastEditorUserId": "962089", "LastEditDate": "2012-10-17T06:11:12.443", "Id": "12928089", "Score": "1", "CreationDate": "2012-10-17T06:03:57.617", "LastActivityDate": "2012-10-17T06:11:12.443"}});