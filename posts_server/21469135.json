post_cb({"21469135": {"CommentCount": "8", "AcceptedAnswerId": "21469596", "PostTypeId": "1", "LastEditorUserId": "1968", "CreationDate": "2014-01-30T22:52:53.827", "LastActivityDate": "2014-01-30T23:51:14.417", "LastEditDate": "2014-01-30T23:10:26.393", "ViewCount": "225", "FavoriteCount": "1", "Title": "Overload resolution C++ for const member functions", "Id": "21469135", "Score": "3", "Body": "<p>Assume you have a class T with two member functions</p>\n<ol>\n<li><code>char foo() const {...}</code></li>\n<li><code>char foo() {...}</code>.</li>\n</ol>\n<p>It is my understanding that when called for a constant T, we resolve to (1); and for a non-constant T, we resolve to (2).\u00a0</p>\n<ol>\n<li>is that correct? \u00a0\u00a0</li>\n<li>which rule is invoked in this resolution? (reference to standard great, but a helpful brief summary appreciated)\u00a0</li>\n</ol>\n<p>Notes:</p>\n<ol>\n<li><p>I tried to google for it, but old hits I got on SO were cases for other overload resolutions involving const. However, link to an old SO actually explaining the above obviously great. \u00a0 \u00a0\u00a0</p></li>\n<li><p>This came up when re-reading Stroustrup's \"The C++ programming language\", 2nd edition (\"Special Edition\"), String/Cref example in section 11.12, p. 296. As Stroustrup is so precise, the answer might be in previous sections, but I fail to see where. Reference to sections in Stroustrup very welcome too (2nd edition best as this is the one I have). Section 10.2.6 introduces const members as those \"that don't change an object's value\", which hints at the answer, but doesn't strike me as a clear resolution directive.</p></li>\n</ol>\n", "Tags": "<c++><class><overloading>", "OwnerUserId": "315014", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_21469135_21469596_2": {"section_id": 639, "quality": 1.0, "length": 21}, "so_21469135_21469596_1": {"section_id": 603, "quality": 0.8888888888888888, "length": 8}, "so_21469135_21469596_0": {"section_id": 568, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_21469135_21469596_2": {"section_id": 629, "quality": 1.0, "length": 21}, "so_21469135_21469596_1": {"section_id": 593, "quality": 0.8888888888888888, "length": 8}, "so_21469135_21469596_0": {"section_id": 559, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_21469135_21469596_2": {"section_id": 667, "quality": 1.0, "length": 21}, "so_21469135_21469596_1": {"section_id": 629, "quality": 0.8888888888888888, "length": 8}, "so_21469135_21469596_0": {"section_id": 591, "quality": 0.8333333333333334, "length": 10}}}, "21469596": {"ParentId": "21469135", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>In N3242 (the standard draft I have on hand), 13.3.1 paragraph 4 says </p>\n<blockquote>\n<p id=\"so_21469135_21469596_0\">the type of the implicit object parameter is \"lvalue reference to <em>cv</em> X\u201d for [non-static member] functions declared without a\n  ref-qualifier or with the &amp; ref-qualifier</p>\n</blockquote>\n<p>this means that type of the implicit object argument, which occurs first, is an \"lvalue reference to <code>cv X</code>\", where <code>X</code> is the class, and <code>cv</code> is the cv-qualification of the member variable (i.e. const or non-const).  Then, overload resolution continues as normal.</p>\n<p>To review the overload resolution process, first, both are listed as \"candidate\" functions as they are in the correct scope and have the correct name.  </p>\n<p>In the <code>const</code> case, only the <code>const</code> member function gets to the next step (called \"viability\"), so it's automatically the best choice.  The non-const member function is not viable because you can't convert a <code>const</code> reference into a non-const reference.</p>\n<p>In the non-const case, both the const and non-const versions are viable, but the non-const one is \"better\" because of the fifth rule of 13.3.3.2 paragraph 3, quoted below.</p>\n<blockquote>\n<p id=\"so_21469135_21469596_1\">Standard conversion sequence S1 is a better conversion sequence than\n  standard conversion sequence S2 if ...</p>\n<p id=\"so_21469135_21469596_2\">S1 and S2 are reference bindings, and the types to which the\n  references refer are the same type except for top-level cv-qualifiers,\n  and the type to which the reference initialized by S2 refers is more\n  cv-qualified than the type to which the reference initialized by S1\n  refers.</p>\n</blockquote>\n", "OwnerUserId": "930949", "LastEditorUserId": "930949", "LastEditDate": "2014-01-30T23:51:14.417", "Id": "21469596", "Score": "4", "CreationDate": "2014-01-30T23:24:30.737", "LastActivityDate": "2014-01-30T23:51:14.417"}});