post_cb({"39127998": {"ParentId": "39127703", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Since C++11, initialization of static variables which are local to functions is atomic and thread safe, so yes, your lines of code is thread-safe and practically equivalent. (Syntax-wise your first version calls for copy constructor, but no compiler will generate it).</p>\n<p>However, it is not clear what arguments are going to be provided to your Factory function and where are those  going to be taken from?  </p>\n", "OwnerUserId": "5245033", "LastEditorUserId": "5245033", "LastEditDate": "2016-08-24T19:33:50.127", "Id": "39127998", "Score": "1", "CreationDate": "2016-08-24T15:58:36.123", "LastActivityDate": "2016-08-24T19:33:50.127"}, "39128079": {"ParentId": "39127703", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>8.5.2 is  \"[dcl.init.string]\", and doesn't seem to be relevant.  I think you mean 8.5 para2.  </p>\n<p>Yes, this is strictly initialization (specifically <em>copy initialization</em> - see 8.5 para14).</p>\n<p>If the declaration is inside a function, then, as <a href=\"https://stackoverflow.com/a/1661564/771073\">the answer to the linked question shows</a>, all is well.</p>\n<p>However if this is a static variable at namespace scope, then I can't see anything which requires the initialization to be thread safe.  (That is only a problem if initialization creates threads - but I bet it does.)</p>\n", "OwnerUserId": "771073", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:08:31.567", "Id": "39128079", "Score": "1", "CreationDate": "2016-08-24T16:02:26.897", "LastActivityDate": "2016-08-24T16:02:26.897"}, "39127703": {"CommentCount": "0", "ViewCount": "267", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-08-24T15:42:57.430", "LastActivityDate": "2016-08-24T19:33:50.127", "Title": "C++ is static variable initialization with = atomic?", "AcceptedAnswerId": "39128079", "LastEditDate": "2017-05-23T12:14:57.493", "Id": "39127703", "Score": "1", "Body": "<p>The Meyers Singleton depends on the fact that <a href=\"https://stackoverflow.com/questions/1661529/is-meyers-implementation-of-singleton-pattern-thread-safe\">local static variable initialization is atomic</a>. </p>\n<p>I'm building something similar but I want the singleton to actually be one of a number of derived types. The base class <code>getInstance()</code> method should call a factory that will return the appropriate type. </p>\n<p>My first idea is  </p>\n<pre><code>static Foo *instance = FooFactory(...);\n</code></pre>\n<p>8.5p2 of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">N3337</a> seems to indicate that this is strictly initialization and not initialization and assignment and I interpret that to mean the entire statement is atomic. Is this correct? </p>\n<p>If not would the statement </p>\n<pre><code>static Foo *instance(FooFactory(...));\n</code></pre>\n<p>be different?</p>\n<p>Edit 8.5.2 -&gt; 8.5.p2</p>\n", "Tags": "<c++><initialization><singleton>", "OwnerUserId": "974040", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_39127703_39127999_1": {"section_id": 3294, "quality": 0.68, "length": 17}}, "n3337": {"so_39127703_39127999_1": {"section_id": 3164, "quality": 0.68, "length": 17}}, "n4659": {"so_39127703_39127999_1": {"section_id": 4056, "quality": 0.68, "length": 17}}}, "39127999": {"ParentId": "39127703", "CommentCount": "0", "Body": "<p><code>variable_type variable_name = initializer</code> is always initialization and not default construction and assignment.  [dcl.init]/15 has</p>\n<blockquote>\n<p id=\"so_39127703_39127999_0\">The initialization that occurs in the form</p>\n<pre><code>T x = a;\n</code></pre>\n<p id=\"so_39127703_39127999_1\">as well as in argument passing, function return, throwing an exception (15.1), handling an exception (15.3), and aggregate member initialization (8.5.1) is called copy-initialization. [ Note: Copy-initialization may invoke a move (12.8). \u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "39127999", "Score": "1", "CreationDate": "2016-08-24T15:58:37.667", "LastActivityDate": "2016-08-24T15:58:37.667"}});