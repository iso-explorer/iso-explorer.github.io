post_cb({"6474675": {"CommentCount": "5", "AcceptedAnswerId": "6474685", "OwnerDisplayName": "user34537", "CreationDate": "2011-06-24T23:19:13.383", "LastActivityDate": "2011-06-24T23:23:24.410", "PostTypeId": "1", "ViewCount": "2422", "FavoriteCount": "1", "Title": "Why cant i use two ptrs in operator overload?", "Id": "6474675", "Score": "5", "Body": "<p>This is annoying, i can write a function with these parameters/return, but why cant i define an operator to do this?</p>\n<p>-edit- i am actually trying to overload <code>&lt;&lt;</code> the below is just for reference.</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/zy7kx46x%28v=vs.80%29.aspx\" rel=\"noreferrer\">From msdn</a></p>\n<pre><code>// C2803.cpp\n// compile with: /c\nclass A{};\nbool operator&lt; (const A *left, const A *right);   // C2803\n// try the following line instead\n// bool operator&lt; (const A&amp; left, const A&amp; right);\n</code></pre>\n<p>gcc error</p>\n<pre><code>error: \u2018bool operator&lt;(const A*, const A*)\u2019 must have an argument of class or enumerated type\n</code></pre>\n", "Tags": "<c++><operator-overloading><compiler-errors>", "AnswerCount": "2"}, "6474705": {"ParentId": "6474675", "CommentCount": "3", "CreationDate": "2011-06-24T23:23:24.410", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "6474705", "Score": "3", "Body": "<p>Because you aren't allowed to cheat.</p>\n<p>If you could override comparison operators for pointer types, then you would no longer be able to compare those pointers by value (aka: by the actual numerical pointer values). And that's kind of important and occasionally useful.</p>\n<blockquote>\n<p id=\"so_6474675_6474705_0\">My real code is actually &lt;&lt;. Why cant i use it for that?</p>\n</blockquote>\n<p>For the same reason: pointers are C++-basic types. They aren't user-defined types. Do you want to be able to not left-shift pointer values anymore? OK, obviously you do, but C++ won't let you.</p>\n<p>You can only override operators when C++ does not have existing functionality for operators with those types (with a few exceptions). C++ already has operator&lt; and operator&lt;&lt; for pointers, so you're not allowed to change what they do.</p>\n", "LastActivityDate": "2011-06-24T23:23:24.410"}, "6474685": {"ParentId": "6474675", "CommentCount": "4", "CreationDate": "2011-06-24T23:20:47.163", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "6474685", "Score": "10", "Body": "<p>Because every user-defined operator overload needs at least one user-defined type as a parameter. A point isn't a user-defined type.</p>\n<p>C++03 standard, <code>\u00a713.5 [over.oper] p6</code>:</p>\n<blockquote>\n<p id=\"so_6474675_6474685_0\">An operator function shall either be a non-static member function or be a non-member function <strong>and have at least one parameter whose type is a class, a reference to a class, an enumeration, or a reference to an enumeration</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2011-06-24T23:20:47.163"}, "bq_ids": {"n4140": {"so_6474675_6474685_0": {"section_id": 653, "quality": 0.95, "length": 19}}, "n3337": {"so_6474675_6474685_0": {"section_id": 643, "quality": 1.0, "length": 20}}, "n4659": {"so_6474675_6474685_0": {"section_id": 681, "quality": 0.95, "length": 19}}}});