post_cb({"46287978": {"Id": "46287978", "PostTypeId": "2", "Body": "<p><code>std::string</code> has a user supplied default constructor, so default constructing <code>b</code> will give it a \"meaningful\" value (it will be an empty string). The constructor can therefore default initialize it implicitly.</p>\n<p><code>int</code> however is a trivially constructible type. Its default constructor does absolutely nothing, so the content of <code>a</code> is indeterminate unless explicitly initialized in the member initializer list. List initializing (using braces <code>{}</code>) <code>a</code> will preform value initialization on it, and will end up giving it the well defined value of 0.</p>\n<p>The member variables must be initialized with a meaningful value, because the program cannot change them afterwards. That's the rationale behind demanding an initializer. </p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-09-18T20:55:09.853", "Score": "1", "CreationDate": "2017-09-18T20:49:24.020", "ParentId": "46287633", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-09-18T20:55:09.853"}, "bq_ids": {"n4140": {"so_46287633_46288718_0": {"length": 11, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_46287633_46288718_0": {"length": 11, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_46287633_46288718_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}}}, "46287633": {"ViewCount": "69", "Body": "<p>I was under the impression that all <code>const</code> members had to be explicitly initialized by the constructor once, but after testing it seems as if only POD types have to be initialized. The following compiles regardless of whether <code>b</code> is mentioned in the constructor or not:</p>\n<pre><code>#include &lt;string&gt;\n\nstruct A {\n    const int a;\n    const std::string b;\n\n    A() : a{} {}\n};\n</code></pre>\n<p>Example: <a href=\"http://cpp.sh/36my2\" rel=\"nofollow noreferrer\">http://cpp.sh/36my2</a></p>\n", "AcceptedAnswerId": "46288718", "Title": "Why does the following compile if the non-POD constant isn't explicitly defined?", "CreationDate": "2017-09-18T20:23:47.003", "Id": "46287633", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-09-19T00:59:35.793", "Score": "1", "OwnerUserId": "8623997", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "46288718": {"Id": "46288718", "PostTypeId": "2", "Body": "<p>This is covered by C++14 [dcl.init]/7:</p>\n<blockquote>\n<p id=\"so_46287633_46288718_0\">If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>Providing no initializer for an object, in this context, is \"calling for default initialization\".  \"User-provided default constructor\" means that there is a constructor defined that can be called with zero arguments, and that constructor was not set to <code>=default;</code>. </p>\n<p>The <code>std::string</code> class does in fact have a user-provided default constructor.\nSo this rule prevents you from omitting <code>a{}</code>, but it does not force you to provide any initializer for <code>b</code>.</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2017-09-19T00:59:35.793", "Score": "2", "CreationDate": "2017-09-18T21:51:59.330", "ParentId": "46287633", "CommentCount": "0", "OwnerUserId": "1505939", "LastEditDate": "2017-09-19T00:59:35.793"}});