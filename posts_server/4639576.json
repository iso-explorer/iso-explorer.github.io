post_cb({"4639576": {"CommentCount": "1", "ViewCount": "591", "PostTypeId": "1", "LastEditorUserId": "187543", "CreationDate": "2011-01-09T14:07:06.407", "LastActivityDate": "2011-01-09T15:32:00.827", "Title": "Copy constructor is not called for copy-initialization or optimized?", "AcceptedAnswerId": "4639839", "LastEditDate": "2011-01-09T14:32:42.440", "Id": "4639576", "Score": "1", "Body": "<p>If copy constructor is made <code>private</code> then in</p>\n<p><strong>Case 1:</strong> No error, the compiler doesn't care if the copy constructor was defined in class.</p>\n<p><strong>Case 2:</strong> Error, copy constructor is private and when it is made <code>public</code>, it is elided.</p>\n<p>Does it directly optimizes the copy without being noticing that if the constructor was made <code>private</code>?</p>\n<pre><code>#include &lt;string&gt;\nusing std::string;\n\nclass T\n{\n    string s;\n    T(const T &amp;obj):s(obj.s){}\npublic:\n    T(const string &amp;str):s(str){}\n};\n\nint main()\n{\n    T a = (\"Copy Initialization\");     //Case: 1\n\n    T b = T(\"Copy Initialization\");    //Case: 2\n}\n</code></pre>\n", "Tags": "<c++><visual-c++-2010>", "OwnerUserId": "187543", "AnswerCount": "2"}, "4639614": {"ParentId": "4639576", "CommentCount": "7", "Body": "<blockquote>\n<p id=\"so_4639576_4639614_0\">Case 1: <strong>No error</strong>, the compiler doesn't care if the copy constructor was defined in class.</p>\n</blockquote>\n<p><code>T a = (\"Copy Initialization\");</code> <a href=\"http://ideone.com/DbYAx\" rel=\"nofollow\">should give an error</a> because there's no suitable constructor to convert from <code>\"const char [20]\"</code> to <code>\"T\"</code></p>\n<p>Did you mean <code>T a = std::string(\"Copy Initialization\");</code> ?</p>\n<blockquote>\n<p id=\"so_4639576_4639614_1\">Does it directly optimizes the copy without being noticing that if the constructor was made private?</p>\n</blockquote>\n<p>No it can't. Compilers usually perform syntactic and semantic analysis prior to the code optimization phase.</p>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "4639614", "Score": "2", "CreationDate": "2011-01-09T14:16:42.570", "LastActivityDate": "2011-01-09T14:16:42.570"}, "4639839": {"ParentId": "4639576", "LastEditDate": "2011-01-09T15:32:00.827", "CommentCount": "4", "CreationDate": "2011-01-09T14:57:48.510", "OwnerUserId": "13005", "LastEditorUserId": "13005", "PostTypeId": "2", "Id": "4639839", "Score": "5", "Body": "<p>Case 2 comes under 12.8/31 in N3225: </p>\n<blockquote>\n<p id=\"so_4639576_4639839_0\">A program is ill-formed if the\n  copy/move constructor or the copy/move\n  assignment operator for an object is\n  implicitly odr-used and the special\n  member function is not accessible.</p>\n</blockquote>\n<p>Just because the copy ctor is elided doesn't mean it isn't odr-used. 3.2/2:</p>\n<blockquote>\n<p id=\"so_4639576_4639839_1\">A member of a set of candidate\n  functions is odr-used if it is\n  selected by overload resolution when\n  referred to from a\n  potentially-evaluated expression.\n  [Note: this covers calls to named\n  functions (5.2.2), oper- ator\n  overloading (Clause 13), user-de\ufb01ned\n  conversions (12.3.2), allocation\n  function for placement new (5.3.4), as\n  well as non-default initialization\n  (8.5). A copy constructor or move\n  constructor is odr-used even if the\n  call is actually elided by the\n  implementation. \u2014end note ]</p>\n</blockquote>\n<p>Beware of course that MSVC is <em>not</em> fully C++0x-compliant, because (a) C++0x isn't a standard yet, and isn't finalized; and (b) MSVC hasn't implemented everything up to date anyway. But this stuff isn't substantially changed from C++03, so I'm fairly confident the explanation still holds.</p>\n<p>Case 1 would come under this too, except that on the two C++03 compilers I've checked it doesn't get that far because there's no possible conversion from a string literal to T. I can't be bothered to check whether there are any additional conversion sequences allowed in C++0x, there could be a new clause anywhere :-)</p>\n<p>It's still a mystery to me why MSVC allows case 1 ever, even with a public copy ctor. Does it allow it in strict C++03 mode?</p>\n", "LastActivityDate": "2011-01-09T15:32:00.827"}, "bq_ids": {"n4140": {"so_4639576_4639839_1": {"section_id": 7040, "quality": 0.5777777777777777, "length": 26}, "so_4639576_4639839_0": {"section_id": 479, "quality": 1.0, "length": 13}}, "n3337": {"so_4639576_4639839_1": {"section_id": 6785, "quality": 0.7777777777777778, "length": 35}, "so_4639576_4639839_0": {"section_id": 470, "quality": 1.0, "length": 13}}, "n4659": {"so_4639576_4639839_1": {"section_id": 8537, "quality": 0.5333333333333333, "length": 24}, "so_4639576_4639839_0": {"section_id": 473, "quality": 1.0, "length": 13}}}});