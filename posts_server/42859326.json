post_cb({"42860108": {"ParentId": "42859326", "LastEditDate": "2017-03-17T16:32:30.340", "CommentCount": "2", "CreationDate": "2017-03-17T14:28:20.697", "OwnerUserId": "2411320", "LastEditorUserId": "2411320", "PostTypeId": "2", "Id": "42860108", "Score": "4", "Body": "<p>That's strange. GCC 4.9.2 with Wall flag doesn't complain about this similar code (I haven't qt installed)</p>\n<pre><code>#include &lt;vector&gt;\n\nstd::vector&lt;int&gt; foo(const std::vector&lt;int&gt;&amp; v)\n{\n    do { return v; } while( v.size() != 0 );\n}\n\nint main() {std::vector&lt;int&gt; v; foo(v);}\n</code></pre>\n<p>Same with clang 4.2.1. As a result I would say that this is something specific to your installation, and if I were you I would add a dummy return statement at the end of the function, or use a flag to get rid of this warning.</p>\n<hr>\n<p>Update: Reproduced the behavior of the last two new functions provided by the OP with GCC, while clang raised an 'unused variable' only for <code>DecompressBytes4()</code>.</p>\n<p>One possible explanation is that this <a class=\"post-tag\" href=\"/questions/tagged/do-while\" rel=\"tag\" title=\"show questions tagged 'do-while'\">do-while</a> you have there is not really used in practice. Dead-code elimination occurs, leaving only the return statement there. </p>\n<p>However, when we use an extra variable the dead code elimination mechanism doesn't work in the same way, some information is preserved and it fails to see the return statement.</p>\n<p>Usually dead code elimination happens on the back-end, while warnings are raised by the front-end. In this case it seems that these two do not communicate brilliantly! =)</p>\n<hr>\n<p>PS - <a href=\"http://www.compileroptimizations.com/category/dead_code_elimination.htm\" rel=\"nofollow noreferrer\">Dead code elimination</a> explains why you don't get an unreachable warning too.</p>\n</hr></hr>", "LastActivityDate": "2017-03-17T16:32:30.340"}, "bq_ids": {"n4140": {"so_42859326_42859326_0": {"section_id": 3360, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_42859326_42859326_0": {"section_id": 3230, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_42859326_42859326_0": {"section_id": 4126, "quality": 0.5714285714285714, "length": 4}}}, "42859326": {"CommentCount": "7", "CreationDate": "2017-03-17T13:53:11.600", "PostTypeId": "1", "AcceptedAnswerId": "42860108", "LastEditorUserId": "2411320", "LastActivityDate": "2017-03-18T15:31:11.673", "LastEditDate": "2017-03-18T15:31:11.673", "ViewCount": "260", "FavoriteCount": "0", "Title": "\"Control reaches end on non-void function\" with do { return result; } while(condition);", "Id": "42859326", "Score": "4", "Body": "<p>I have the following function (reduced example):</p>\n<pre><code>QByteArray DecompressBytes(const QByteArray&amp; content){\n  /* function body (with other return expressions) */\n\n  do { return content; } while(content.size() != 0);\n}\n</code></pre>\n<p>Last line was added for testing, replacing a macro used. Visual Studio doesn't see a problem with this code, but g++ generates </p>\n<blockquote>\n<p id=\"so_42859326_42859326_0\">warning: control reaches end of non-void function [-Wreturn-type]</p>\n</blockquote>\n<p>Changing last line to <code>return content;</code> removes the warning.<br>\nMy question: why the compiler behaves this way and what should be the form of the code to avoid any warnings?  </br></p>\n<p>The last line used to be <code>ASSERT_FAIL(\"must be unreachable\", content)</code> with <code>ASSERT_FAIL</code> expanding into <code>do { ... } while(false)</code> pattern with another macro replacing <code>while</code> to forbid non-bool expressions, so the resulting expression was like <code>do { qt_assert_x(\"\", \"\", 42); return content; } while(::helper::bool_verify(false));</code>.  </p>\n<p>g++ version 5.3.0, used with MinGW (standard Qt setup).</p>\n<p><strong>Upd:</strong> after trying to comment different parts of code (since pure example above doesn't allow to reproduce the problem), something really strange emerged:</p>\n<pre><code>QByteArray DecompressBytes(const QByteArray&amp; content){\n  QByteArray decompressed; //no 'unused variable' warning\n  do { return content; } while(content.size() != 0);\n} //produces warning above\n\nQByteArray DecompressBytes2(const QByteArray&amp; content){\n  //QByteArray decompressed;\n  do { return content; } while(content.size() != 0);\n} //doesn't produce warning\n\nstd::vector&lt;char&gt; DecompressBytes3(const std::vector&lt;char&gt;&amp; content){\n  std::vector&lt;char&gt; decompressed; //no 'unused variable' warning\n\n  do { return content; } while(content.size() != 0);\n} //does produce warning\n\nstd::vector&lt;char&gt; DecompressBytes4(const std::vector&lt;char&gt;&amp; content){\n  int decompressed; //unused variable warning is given\n\n  do { return content; } while(content.size() != 0);\n} //doesn't produce warning\n</code></pre>\n<p>Not sure what all of this means.</p>\n", "Tags": "<c++><gcc><gcc-warning>", "OwnerUserId": "1835778", "AnswerCount": "1"}});