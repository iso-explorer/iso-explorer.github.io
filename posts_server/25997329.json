post_cb({"bq_ids": {"n4140": {"so_25997329_25997527_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_25997329_25997527_6": {"length": 24, "quality": 1.0, "section_id": 404}, "so_25997329_25997527_5": {"length": 34, "quality": 1.0, "section_id": 404}, "so_25997329_25997527_4": {"length": 5, "quality": 1.0, "section_id": 438}, "so_25997329_25997527_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_25997329_25997527_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_25997329_25997527_1": {"length": 9, "quality": 1.0, "section_id": 438}}, "n3337": {"so_25997329_25997527_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_25997329_25997527_6": {"length": 24, "quality": 1.0, "section_id": 395}, "so_25997329_25997527_5": {"length": 34, "quality": 1.0, "section_id": 395}, "so_25997329_25997527_4": {"length": 5, "quality": 1.0, "section_id": 429}, "so_25997329_25997527_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_25997329_25997527_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_25997329_25997527_1": {"length": 9, "quality": 1.0, "section_id": 429}}, "n4659": {"so_25997329_25997527_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_25997329_25997527_6": {"length": 24, "quality": 1.0, "section_id": 422}, "so_25997329_25997527_5": {"length": 34, "quality": 1.0, "section_id": 422}, "so_25997329_25997527_4": {"length": 5, "quality": 1.0, "section_id": 458}, "so_25997329_25997527_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_25997329_25997527_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_25997329_25997527_1": {"length": 9, "quality": 1.0, "section_id": 458}}}, "25997527": {"Id": "25997527", "PostTypeId": "2", "Body": "<p>[class.base.init]/10, emphasis mine:</p>\n<blockquote>\n<p id=\"so_25997329_25997527_0\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<ul>\n<li><p id=\"so_25997329_25997527_1\">First, and only for the constructor of the most\n  derived class, virtual base classes are initialized [...]</p></li>\n<li><p id=\"so_25997329_25997527_2\">Then, <strong>direct base classes are initialized</strong> in\n  declaration order as they appear in the <em>base-specifier-list</em>\n  (regardless of the order of the <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_25997329_25997527_3\">Then, non-static\n  data members are initialized in the order they were declared in the\n  class definition (again regardless of the order of the\n  <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_25997329_25997527_4\"><strong>Finally, the <em>compound-statement</em> of the constructor body is executed</strong>.</p></li>\n</ul>\n</blockquote>\n<p>That is, the derived class' ctor is \"called\" first, but before its compound-statement (its function body), the base class ctor must complete.</p>\n<hr>\n<p>One way we can see this order is to use a <em>function-try-block</em> in the ctor of the derived class:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Base {\n    Base() { throw \"Base throwing\\n\"; }\n};\n\nstruct Derived : Base{\n    Derived()\n    try : Base()\n    {}\n    catch(char const* p) {\n        std::cout &lt;&lt; p;\n    }\n};\n\nint main() {\n    try { Derived d; }catch(...){}\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1a3d88b5f884bbdd\" rel=\"nofollow\">Live example</a></p>\n<p>The <em>function-try-block</em> can catch exceptions that occur during the initialization of bases and members. The exception is propagated implicitly: since the base/member could not be constructed/initialized, the (derived) object cannot be constructed/initialized.</p>\n<hr>\n<p>For the destructor, [class.dtor]/8</p>\n<blockquote>\n<p id=\"so_25997329_25997527_5\"><strong>After executing the body of the destructor</strong> and destroying any automatic objects allocated within the body, a destructor for class <code>X</code> calls the destructors for <code>X</code>\u2019s direct non-variant non-static data members, the destructors\n  for <code>X</code>\u2019s direct base classes and, if <code>X</code> is the type of the most derived class, its destructor calls the destructors for <code>X</code>\u2019s virtual base classes.</p>\n<p id=\"so_25997329_25997527_6\">All destructors are called as if they were referenced with a qualified\n  name, that is, ignoring any possible virtual overriding destructors in more derived classes. Bases and members are destroyed in the reverse order of the completion of their constructor.</p>\n</blockquote>\n<p>If the destructor is virtual, the compiler (sometimes) cannot know which destructors (most-derived type and its bases) have to be called at the destruction site/translation unit. Therefore, the destructor itself has to invoke the destruction of bases and members (at least, for virtual destructors called via dynamic dispatch).</p>\n</hr></hr>", "LastEditorUserId": "420683", "LastActivityDate": "2014-09-23T15:16:52.580", "Score": "5", "CreationDate": "2014-09-23T14:20:10.467", "ParentId": "25997329", "CommentCount": "2", "OwnerUserId": "420683", "LastEditDate": "2014-09-23T15:16:52.580"}, "25997329": {"ViewCount": "1611", "Body": "<p>I know there is clear answer for this question: Base class constructor is called first, then derived class constructor is called. </p>\n<p>But I don't fully understand the word \"called\". Does it mean the beginning of usage of the constructor, or the completion of usage of the constructor? In other word, there are two possible orders for the code below:</p>\n<ol>\n<li><p>BaseClass constructor starts -&gt; BaseClass constructor completes -&gt; DerivedClass constructor starts -&gt; DerivedClass constructor completes.</p></li>\n<li><p>DerivedClass constructor starts -&gt; BaseClass constructor starts -&gt; BaseClass constructor completes -&gt; DerivedClass constructor completes.</p></li>\n</ol>\n<p>Which one should be the correct order? And if 1 is correct, how does the compiler know to call BaseClass constructor before we initialize a DerivedClass instance?</p>\n<p>It seems case 2 is correct: \"called\" should mean the completion of constructor. A follow-up question is how about the destructor? I know the standard answer is \"the destructor of derived class is called first\". So which is the correct order for:</p>\n<ul>\n<li>DerivedClass destructor starts </li>\n<li>DerivedClass destructor completes</li>\n<li>BaseClass destructor starts</li>\n<li>BaseClass destructor completes</li>\n</ul>\n<p>Thanks</p>\n<pre><code>class BaseClass {\npublic:\n    BaseClass() {\n        cout &lt;&lt; \"BaseClass constructor.\" &lt;&lt; endl;\n    }\n};\n\nclass DerivedClass : public BaseClass {\npublic:\n    DerivedClass() : BaseClass() {\n        cout &lt;&lt; \"DerivedClass constructor.\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    DerivedClass dc;\n}\n</code></pre>\n", "Title": "Is base class constructor really called before derived class constructor", "CreationDate": "2014-09-23T14:11:11.180", "LastActivityDate": "2014-09-23T15:16:52.580", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-09-23T15:09:54.013", "LastEditorUserId": "2705212", "Id": "25997329", "Score": "0", "OwnerUserId": "2705212", "Tags": "<c++><constructor><derived-class><base-class>", "AnswerCount": "2"}, "25997457": {"Id": "25997457", "PostTypeId": "2", "Body": "<p>The correct answer is choice 1, but this can be easily verified by actually running the code you already typed out</p>\n", "LastActivityDate": "2014-09-23T14:16:36.843", "CommentCount": "1", "CreationDate": "2014-09-23T14:16:36.843", "ParentId": "25997329", "Score": "0", "OwnerUserId": "2236401"}});