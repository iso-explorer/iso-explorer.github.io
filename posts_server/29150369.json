post_cb({"bq_ids": {"n4140": {"so_29150369_29150503_1": {"length": 7, "quality": 0.875, "section_id": 775}, "so_29150369_29150584_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 775}, "so_29150369_29150503_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 775}}, "n3337": {"so_29150369_29150584_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 762}, "so_29150369_29150503_1": {"length": 7, "quality": 0.875, "section_id": 762}, "so_29150369_29150503_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 762}}}, "29150584": {"PostTypeId": "2", "Body": "<p>In the standard we have 23.3.2.1 (3)</p>\n<blockquote>\n<p id=\"so_29150369_29150584_0\">An array is an aggregate (8.5.1) that can be initialized with the syntax</p>\n<p id=\"so_29150369_29150584_1\"><code>array&lt;T, N&gt; a = { initializer-list };</code></p>\n</blockquote>\n<p>This shows that when you initialize the array with an internalizer list you need to wrap it in curly braces.</p>\n", "LastActivityDate": "2015-03-19T16:56:53.660", "Id": "29150584", "CommentCount": "1", "CreationDate": "2015-03-19T16:56:53.660", "ParentId": "29150369", "Score": "0", "OwnerUserId": "4342498"}, "29150369": {"ViewCount": "326", "Body": "<p>I have the following code:</p>\n<pre><code>   enum class MessageDeliveryMethod\n   {\n      POST_MASTER,\n      BUBBLE,\n\n      NUM_ENUMERATORS\n   };\n\n   namespace\n   {\n      using MapType = std::array&lt;\n         std::pair&lt;char const*, MessageDeliveryMethod&gt;,\n         static_cast&lt;std::size_t&gt;(MessageDeliveryMethod::NUM_ENUMERATORS)\n      &gt;;\n\n      MapType g_mapping = {{\n         {\"POST_MASTER\", MessageDeliveryMethod::POST_MASTER},\n         {\"BUBBLE\", MessageDeliveryMethod::BUBBLE},\n      }};\n   }\n</code></pre>\n<p>This compiles but I don't know why. The <code>g_mapping</code> variable requires an extra level of seemingly redundant curly braces. In other words, I expect the initialization to look like:</p>\n<pre><code>MapType g_mapping = {\n   {\"POST_MASTER\", MessageDeliveryMethod::POST_MASTER},\n   {\"BUBBLE\", MessageDeliveryMethod::BUBBLE},\n};\n</code></pre>\n<p>(One level of outer braces removed).</p>\n<p>My understanding is that prior to C++14, when doing direct initialization the extra level of braces is required. However, copy initialization was not supposed to require this based on <a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"nofollow noreferrer\">this page</a> (look at the example there).</p>\n<p>Can anyone explain this?</p>\n<h1>UPDATE:</h1>\n<p><a href=\"https://stackoverflow.com/questions/20519992/array-declaration-and-initialization-in-c11\">This SO question</a> which is presumed to be duplicated by my question does indeed answer some specific and helpful questions (related to my own) however out of context mine was confusing due to the usage of <code>pair</code> (which I thought was causing the issue initially). I never would have found that SO question in the first place, so if anything I think perhaps the way I've worded my question may help people arrive to the solution from different angles.</p>\n", "AcceptedAnswerId": "29150503", "Title": "std::array aggregate initialization requires a confusing amount of curly braces", "CreationDate": "2015-03-19T16:47:28.953", "Id": "29150369", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:27:18.133", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-19T17:31:29.477", "Score": "7", "OwnerUserId": "157971", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "29150603": {"PostTypeId": "2", "Body": "<p><code>std::array</code> is defined to be a nested aggregate - a class containing an array as its only member. Prior to C++14, aggregate initialisation needed two levels of braces: one to surround the class member list (in which there was only one member, the array), and one to surround the array element list. Then you need a third level if, as here, you want to list-initialise each array element.</p>\n<p>C++14 allows you to \"flatten\" the lists when initialising nested aggregates, as described in the page you link to.</p>\n", "LastActivityDate": "2015-03-19T17:05:52.093", "LastEditorUserId": "204847", "Id": "29150603", "CommentCount": "6", "CreationDate": "2015-03-19T16:57:58.173", "ParentId": "29150369", "Score": "1", "OwnerUserId": "204847", "LastEditDate": "2015-03-19T17:05:52.093"}, "29150503": {"PostTypeId": "2", "Body": "<p><code>std::array</code> is defined as a structure that contains an array.</p>\n<p>Thus the first pair of braces are used to initialize data members of the structure that is the array.\nThe second pair of braces is used to initialize the array within the structure.\nAnd the third pairs of braces are used to initialize each object of type std::pair.</p>\n<p>To be more precise then according to the C++ Standard (23.3.2.1 Class template array overview)</p>\n<blockquote>\n<p id=\"so_29150369_29150503_0\">2 An array is an aggregate (8.5.1) that can be initialized with the\n  syntax</p>\n</blockquote>\n<pre><code>array&lt;T, N&gt; a = { initializer-list }; \n</code></pre>\n<blockquote>\n<p id=\"so_29150369_29150503_1\">where initializer-list is a comma-separated list of up to N elements\n  whose types are convertible to T.</p>\n</blockquote>\n", "LastActivityDate": "2015-03-19T16:58:15.707", "LastEditorUserId": "157971", "Id": "29150503", "CommentCount": "1", "CreationDate": "2015-03-19T16:52:59.810", "ParentId": "29150369", "Score": "5", "OwnerUserId": "2877241", "LastEditDate": "2015-03-19T16:58:15.707"}});