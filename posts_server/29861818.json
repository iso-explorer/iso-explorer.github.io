post_cb({"29862016": {"Id": "29862016", "PostTypeId": "2", "Body": "<p>According to the C++ Standard (12.4 Destructors)</p>\n<blockquote>\n<p id=\"so_29861818_29862016_0\">4 If a class has no user-declared destructor, a destructor is\n  implicitly declared as defaulted (8.4). An implicitlydeclared\n  destructor is an inline public member of its class.</p>\n<p id=\"so_29861818_29862016_1\">11... A destructor is also invoked implicitly through use of a <strong>delete- expression</strong> (5.3.5) for a constructed object allocated by a new-expression (5.3.4);</p>\n</blockquote>\n<p>And all destructors do the following except that implicitly defined destructor has an empty body and consequently does not have automatic objects allocated within its body.</p>\n<blockquote>\n<p id=\"so_29861818_29862016_2\">8 After executing the body of the destructor and destroying any\n  automatic objects allocated within the body, a destructor for class X\n  calls the destructors for X\u2019s direct non-variant non-static data\n  members, the destructors for X\u2019s direct base classes and, if X is the\n  type of the most derived class (12.6.2), its destructor calls the\n  destructors for X\u2019s virtual base classes. All destructors are called\n  as if they were referenced with a qualified name, that is, ignoring\n  any possible virtual overriding destructors in more derived classes.\n  Bases and members are destroyed in the reverse order of the completion\n  of their constructor (see 12.6.2). A return statement (6.6.3) in a\n  destructor might not directly return to the caller; before\n  transferring control to the caller, the destructors for the members\n  and bases are called. Destructors for elements of an array are called\n  in reverse order of their construction (see 12.6).</p>\n</blockquote>\n", "LastActivityDate": "2015-04-25T06:49:16.403", "CommentCount": "0", "CreationDate": "2015-04-25T06:49:16.403", "ParentId": "29861818", "Score": "1", "OwnerUserId": "2877241"}, "29861888": {"Id": "29861888", "PostTypeId": "2", "Body": "<p>I assume that by delete a pointer p to a class C you mean</p>\n<pre><code>C *p;\n&lt;some init and work&gt;\ndelete p;\n</code></pre>\n<p>If class C does not have a destructor explicitly declared the compiler will add a destructor implicitly. </p>\n<p>This implicitly destructor gets called upon destruction of an instance of \nthe class doing nothing.</p>\n<p>n.b. the implicitly added destructor is inline public.</p>\n", "LastActivityDate": "2015-04-25T06:36:12.977", "CommentCount": "0", "CreationDate": "2015-04-25T06:36:12.977", "ParentId": "29861818", "Score": "0", "OwnerUserId": "750375"}, "bq_ids": {"n4140": {"so_29861818_29862016_2": {"length": 83, "quality": 0.9540229885057471, "section_id": 404}, "so_29861818_29862016_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 407}, "so_29861818_29862016_0": {"length": 14, "quality": 1.0, "section_id": 400}}, "n3337": {"so_29861818_29862016_2": {"length": 83, "quality": 0.9540229885057471, "section_id": 395}, "so_29861818_29862016_0": {"length": 14, "quality": 1.0, "section_id": 391}}, "n4659": {"so_29861818_29862016_2": {"length": 83, "quality": 0.9540229885057471, "section_id": 422}, "so_29861818_29862016_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 425}, "so_29861818_29862016_0": {"length": 14, "quality": 1.0, "section_id": 417}}}, "29861894": {"Id": "29861894", "PostTypeId": "2", "Body": "<p>Every class (or struct) has a destructor (unless it is a <a href=\"http://en.cppreference.com/w/cpp/concept/PODType\" rel=\"nofollow\">POD</a>. If you do not declare one the compiler will add an implicit destructor. Take the following class as an example:</p>\n<pre><code>struct A\n{\n    std::string test;\n};\n</code></pre>\n<p>No destructor was defined for A. Yet it has one, because the compiler automatically adds it. It isn't even empty. It would call the destructor of test, because std::string has a destructor itself.</p>\n", "LastActivityDate": "2015-04-25T06:36:38.263", "CommentCount": "5", "CreationDate": "2015-04-25T06:36:38.263", "ParentId": "29861818", "Score": "1", "OwnerUserId": "1393971"}, "29862012": {"Id": "29862012", "PostTypeId": "2", "Body": "<p><strong>Implicitly-declared destructor</strong>\nIf no user-defined destructor is provided for a class type (struct, class, or union), the compiler will always declare a destructor as an inline public member of its class.</p>\n<p><strong>Deleted implicitly-declared destructor</strong>\nThe implicitly-declared or defaulted destructor for class T is undefined (until C++11)defined as deleted (since C++11) if any of the following is true:\nT has a non-static data member that cannot be destructed (has deleted or inaccessible destructor)\nT has direct or virtual base class that cannot be destructed (has deleted or inaccessible destructors)\nT is a union and has a variant member with non-trivial destructor.\n(since C++11)\nThe implicitly-declared destructor is virtual (because the base class has a virtual destructor) and the lookup for the deallocation function (operator delete() results in a call to ambiguous, deleted, or inaccessible function.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    int i;\n\n    A ( int i ) : i ( i ) {}\n\n    ~A()\n    {\n        std::cout &lt;&lt; \"~a\" &lt;&lt; i &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    A a1(1);\n    A* p;\n\n    { // nested scope\n        A a2(2);\n        p = new A(3);\n    } // a2 out of scope\n\n    delete p; // calls the destructor of a3\n\n}\n\noutput:\n~a2\n~a3\n~a1\n</code></pre>\n", "LastActivityDate": "2015-04-25T06:48:55.700", "CommentCount": "0", "CreationDate": "2015-04-25T06:48:55.700", "ParentId": "29861818", "Score": "0", "OwnerUserId": "2335805"}, "29861818": {"ViewCount": "115", "Body": "<p>What happens when you delete a pointer to an object of a class that does not have a declared destructor?</p>\n", "AcceptedAnswerId": "29861894", "Title": "C++: what happens when you delete a pointer to an object of a class without explicit destructor?", "CreationDate": "2015-04-25T06:28:43.240", "Id": "29861818", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-25T06:49:16.403", "Score": "-3", "OwnerUserId": "2460978", "Tags": "<c++>", "AnswerCount": "4"}});