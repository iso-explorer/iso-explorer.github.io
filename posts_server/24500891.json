post_cb({"24500891": {"CommentCount": "1", "AcceptedAnswerId": "24501091", "PostTypeId": "1", "LastEditorUserId": "931579", "CreationDate": "2014-07-01T00:32:56.793", "LastActivityDate": "2014-07-01T15:43:52.947", "LastEditDate": "2014-07-01T00:50:02.020", "ViewCount": "90", "FavoriteCount": "1", "Title": "Accessing inherited objects from class template", "Id": "24500891", "Score": "5", "Body": "<p>I've been learning C++ templating and I've run across some weird behavior. Consider this class structure (stripped down from my original code):</p>\n<pre><code>class A {\npublic:\n    std::vector &lt;int&gt; vec;\n};\n\ntemplate &lt;typename T&gt; class B : public A {  };\n\ntemplate &lt;typename T&gt; class C : public B&lt;T&gt; {\npublic:\n    using A::vec;\n    int test() {\n        return vec[1];      // OK\n    }\n\n    int test2() {\n        return vec.size();  // error: 'class A' has no member named 'size'\n    }\n};\n</code></pre>\n<p>When compiling, I get an error in <code>test2</code>, saying that <code>class A</code> has no member <code>size</code>. But <code>vec</code> should be a <code>vector</code> object, not an instance of <code>A</code>. Indeed, if I derive <code>C</code> directly from <code>A</code> instead of <code>B&lt;T&gt;</code>, or remove the template from <code>C</code>, it compiles fine.</p>\n<p>Furthermore, if I add the following method to <code>C</code>:</p>\n<pre><code>int test3() {\n    void ***v = vec;        // error: cannot convert from\n                            // 'std::vector&lt;int,...&gt;'  to 'void***' \n}\n</code></pre>\n<p>the compiler says it can't convert from a <code>vector&lt;int&gt;</code> to <code>void***</code>, so it seems to know the correct type for <code>vec</code>. Am I making a mistake here, or is this possibly a bug in my compiler? I'm using an Apple version of g++ 4.2.1. Edit: also seems to occur in later versions of g++.</p>\n<p>Thanks for your help!</p>\n<p><strong>Second edit</strong>: my compiler is happy if I use <code>this-&gt;vec.size()</code> in <code>test2</code> instead of relying on the <code>using A::vec</code> declaration. </p>\n", "Tags": "<c++><templates><inheritance><g++>", "OwnerUserId": "931579", "AnswerCount": "1"}, "24501091": {"ParentId": "24500891", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>First, your code compiles with clang (see it <a href=\"http://coliru.stacked-crooked.com/a/fec20f05917ad8db\" rel=\"nofollow\">here</a>), and doesn't compile with <a href=\"http://coliru.stacked-crooked.com/a/f22340c6b0133ffe\" rel=\"nofollow\">gcc</a>. I also got it to compile with VS2013.</p>\n<hr>\n<p>Your original issue is related to how the compiler lookup names in templates. </p>\n<p>The Standard \u00a7 14.6.2 :</p>\n<blockquote>\n<p id=\"so_24500891_24501091_0\">Non-dependent names used in a template definition are found using the\n  usual name lookup and bound at the point they are used.</p>\n</blockquote>\n<p>Also the <a href=\"http://www.parashift.com/c++-faq-lite/nondependent-name-lookup-members.html\" rel=\"nofollow\">C++ FAQ</a> has a good entry about it :</p>\n<blockquote>\n<p id=\"so_24500891_24501091_1\">The compiler does not look in dependent base classes (like B) when\n  looking up nondependent names (like vec).</p>\n</blockquote>\n<hr>\n<p><strong>Solution</strong> :</p>\n<p><strong>1.</strong> Use <code>this-&gt;vec</code> (this is always <strong>implicitly dependent</strong> in a template)</p>\n<pre><code>int test2() {\n    return this-&gt;vec.size();  \n}\n</code></pre>\n<p><strong>2.</strong> Use <code>using B&lt;T&gt;::vec</code></p>\n<p><strong>3.</strong> Use <code>B&lt;T&gt;</code> directly :</p>\n<pre><code>int test2() {\n    return B&lt;T&gt;::vec.size();  \n}\n</code></pre>\n<hr>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>I'm not sure why gcc refuses <code>using A::vec;</code>, looks like a compiler bug to me (and note that <code>using B&lt;T&gt;::A::vec;</code> works).</li>\n<li>Standard reference for template names lookup : \u00a7 14.6.3 and \u00a7 14.6.4</li>\n</ul>\n</hr></hr></hr>", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-07-01T15:43:52.947", "Id": "24501091", "Score": "2", "CreationDate": "2014-07-01T01:04:27.680", "LastActivityDate": "2014-07-01T15:43:52.947"}, "bq_ids": {"n4140": {"so_24500891_24501091_0": {"section_id": 214, "quality": 1.0, "length": 12}}, "n3337": {"so_24500891_24501091_0": {"section_id": 208, "quality": 1.0, "length": 12}}, "n4659": {"so_24500891_24501091_0": {"section_id": 222, "quality": 1.0, "length": 12}}}});