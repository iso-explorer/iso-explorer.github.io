post_cb({"18042320": {"ParentId": "18042223", "CommentCount": "4", "Body": "<p>In C <code>bool</code> is a macro from <code>stdbool.h</code> that expands to <code>_Bool</code> which is the C boolean type.</p>\n", "OwnerUserId": "1119701", "PostTypeId": "2", "Id": "18042320", "Score": "7", "CreationDate": "2013-08-04T11:15:31.973", "LastActivityDate": "2013-08-04T11:15:31.973"}, "18042233": {"ParentId": "18042223", "CommentCount": "0", "Body": "<p>In C++ <code>bool</code> is a built-in data type.  In C it is not, so if you're using <code>bool</code> in C it has been implemented as a typedef or with <code>#define</code>, and <code>true</code> and <code>false</code> must have been implemented with <code>#define</code> or perhaps are constants.</p>\n", "OwnerUserId": "780719", "PostTypeId": "2", "Id": "18042233", "Score": "1", "CreationDate": "2013-08-04T11:04:08.250", "LastActivityDate": "2013-08-04T11:04:08.250"}, "18042258": {"ParentId": "18042223", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C there is no concept like Boolean variables, Yes Higher level languages like Java, C# and other provides us the facility to declare a Boolean variable, that we use for flagging purposes to set it either true or false.</p>\n<p>But you can implement this using integrals like we did in C</p>\n<pre><code>if(1)\n{\n   // Because C treats 1 and any other integer as true\n}\nif(0)\n{\n   // This time our if condition will result in false\n}\n</code></pre>\n", "OwnerUserId": "2273202", "LastEditorUserId": "2273202", "LastEditDate": "2013-08-04T11:12:38.963", "Id": "18042258", "Score": "1", "CreationDate": "2013-08-04T11:06:39.193", "LastActivityDate": "2013-08-04T11:12:38.963"}, "18042253": {"ParentId": "18042223", "PostTypeId": "2", "CommentCount": "6", "Body": "<h3>In C, <code>bool</code> is a macro.</h3>\n<p>There is no built-in type or keyword by the name of <code>bool</code> in C, so typical implementations use the standard library to <code>#define</code> <code>true</code> and <code>false</code> to <code>1</code> and <code>0</code> respectively. Rules such as those for the <code>if</code> statement are defined in terms of \"zero\" and \"non-zero\" expressions, and therefore rely on the expanded macro definitions of <code>true</code> and <code>false</code>:</p>\n<blockquote>\n<p id=\"so_18042223_18042253_0\"><code>[C99: 6.8.4.1/2]:</code> In both forms, the first substatement is executed if the expression compares unequal to 0. In the else form, the second substatement is executed if the expression compares equal to 0. If the first substatement is reached via a label, the second substatement is not executed.</p>\n</blockquote>\n<p>For convenience, C99 added the built-in intermediate type <code>_Bool</code>, and implementations of this language typically <code>#define</code> <code>bool</code> to <code>_Bool</code>. This type is defined thus:</p>\n<blockquote>\n<p id=\"so_18042223_18042253_1\"><code>[C99: 6.2.5/2]:</code> An object declared as type <code>_Bool</code> is large enough to store the values 0 and 1.</p>\n</blockquote>\n<p>This allows for greater compatibility with C++ programs, which may include declarations of functions using the <code>bool</code> type; really, though, <code>#define _Bool int</code> would probably have sufficed.</p>\n<hr>\n<h3>In C++, <code>bool</code> is both a built-in type and a keyword.</h3>\n<p>The link you provided doesn't say that <code>bool</code> is a macro in C++. It says:</p>\n<blockquote>\n<p id=\"so_18042223_18042253_2\">The purpose in C of this header is to add a bool type and the true and false values as macro definitions.</p>\n<p id=\"so_18042223_18042253_3\">In C++, which supports those directly, the header simply contains a macro that can be used to check if the type is supported.</p>\n</blockquote>\n<p>And this is correct.</p>\n<p><strong>Semantically</strong> (that is, in terms of \"meaning\" of your code), <code>[C++11: 3.9.1/2]</code> defines <code>bool</code> as an integral type in C++.</p>\n<p><strong>Lexically</strong> (that is, in terms of \"appearance\" in your code), <code>[C++11: 2.12/1]</code> lists it as a keyword. In fact, <em>all</em> tokens that are part of the names of integral types are also keywords, including (but not limited to):</p>\n<ul>\n<li><code>int</code></li>\n<li><code>unsigned</code></li>\n<li><code>long</code></li>\n<li><code>bool</code></li>\n<li><code>short</code></li>\n<li><code>signed</code></li>\n</ul>\n<p>It is, however, <em>never</em> a macro in C++. Instead, you get a macro <code>__bool_true_false_are_defined</code> which you could use in multi-language code to switch treatment of <code>bool</code> depending on whether you're working in C or C++; I'm not sure I can think of a useful example, mind you.</p>\n</hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2013-08-04T11:40:49.707", "Id": "18042253", "Score": "16", "CreationDate": "2013-08-04T11:05:51.510", "LastActivityDate": "2013-08-04T11:40:49.707"}, "18042447": {"ParentId": "18042223", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C <code>_Bool</code> is a type and <code>bool</code>, <code>true</code> and <code>false</code> are macros defined in <code>stdbool.h</code></p>\n<p>ISO C11 standard states (in section <strong>6.2.5 Types</strong> )</p>\n<blockquote>\n<p id=\"so_18042223_18042447_0\">An object declared as type _Bool is large enough to store the values 0 and 1.</p>\n</blockquote>\n<p><code>stdbool.h</code> defines 4 macros.</p>\n<ol>\n<li><code>bool</code> which expands to <code>_Bool</code></li>\n<li><code>true</code> which expands to <code>1</code></li>\n<li><code>false</code> which expands to <code>0</code></li>\n<li><code>__bool_true_false_are_defined</code> which expands to <code>1</code>.</li>\n</ol>\n", "OwnerUserId": "1908235", "LastEditorUserId": "1908235", "LastEditDate": "2013-08-04T14:42:43.903", "Id": "18042447", "Score": "1", "CreationDate": "2013-08-04T11:34:20.063", "LastActivityDate": "2013-08-04T14:42:43.903"}, "18042273": {"ParentId": "18042223", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_18042223_18042273_0\">So what exactly the bool is? A an integral type keyword or a macro?</p>\n</blockquote>\n<p>In C++, it's called <strong>Boolean literal</strong>, it's build in type.</p>\n<p>\u00a72.14.7</p>\n<p>Types <strong>bool</strong>, char, char16_t, char32_t, wchar_t, and the signed and unsigned integer types are collectively called <strong>integral types</strong>. </p>\n<p>\u00a72.14.6  </p>\n<p>Boolean literals</p>\n<pre><code>boolean-literal:\nfalse\ntrue\n</code></pre>\n<p>The Boolean literals are the keywords <strong><em>false</em></strong> and <strong><em>true</em></strong>. Such literals are prvalues and have type bool.</p>\n<p>\u00a7 3.9.1.6  </p>\n<blockquote>\n<p id=\"so_18042223_18042273_1\">Values of type bool are either true or false. [ Note: There are no signed, unsigned, short, or long\n  bool types or values. \u2014 end note ] Values of type bool participate in integral promotions (4.5).</p>\n</blockquote>\n", "OwnerUserId": "951757", "PostTypeId": "2", "Id": "18042273", "Score": "4", "CreationDate": "2013-08-04T11:09:17.670", "LastActivityDate": "2013-08-04T11:09:17.670"}, "bq_ids": {"n4140": {"so_18042223_18042447_0": {"section_id": 7210, "quality": 0.625, "length": 5}, "so_18042223_18042253_0": {"section_id": 3888, "quality": 0.5769230769230769, "length": 15}, "so_18042223_18042273_1": {"section_id": 7215, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_18042223_18042447_0": {"section_id": 6954, "quality": 0.625, "length": 5}, "so_18042223_18042273_1": {"section_id": 6959, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_18042223_18042447_0": {"section_id": 8719, "quality": 0.625, "length": 5}, "so_18042223_18042253_0": {"section_id": 4772, "quality": 0.5769230769230769, "length": 15}, "so_18042223_18042273_1": {"section_id": 8724, "quality": 0.8695652173913043, "length": 20}}}, "18042223": {"CommentCount": "5", "AcceptedAnswerId": "18042253", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-08-04T11:02:23.870", "LastActivityDate": "2013-08-04T14:42:43.903", "LastEditDate": "2017-05-23T12:16:31.537", "ViewCount": "12524", "FavoriteCount": "1", "Title": "What is bool in C/C++? A keyword or a macro?", "Id": "18042223", "Score": "7", "Body": "<p>I referred <a href=\"https://stackoverflow.com/questions/3269478/what-is-bool-in-c\">this question</a>, in which some of the answers suggest that <code>bool</code> is an integral type (IDEs also treat it as a keyword).  </p>\n<p>However, none of the answers suggest the information provided in <a href=\"http://www.cplusplus.com/reference/cstdbool/\" rel=\"nofollow noreferrer\">cplusplus</a>, which says that <code>bool</code> is a macro which is added through <code>&lt;cstdbool&gt;</code> (In that case, the compilers might be implicitly adding this header while compiling to allow <code>bool</code>).  Here is the g++ version of <a href=\"http://ideone.com/od5blR\" rel=\"nofollow noreferrer\"><code>&lt;stdbool.h&gt;</code></a>.</p>\n<p>So what exactly the <code>bool</code> is? A an integral type keyword or a macro?  </p>\n", "Tags": "<c++><c><boolean><keyword>", "OwnerUserId": "514235", "AnswerCount": "6"}});