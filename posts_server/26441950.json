post_cb({"bq_ids": {"n4140": {"so_26441950_26442287_0": {"section_id": 11, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_26441950_26442287_0": {"section_id": 8, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_26441950_26442287_0": {"section_id": 12, "quality": 0.9444444444444444, "length": 17}}}, "26442287": {"ParentId": "26441950", "LastEditDate": "2014-10-18T17:07:42.620", "CommentCount": "3", "CreationDate": "2014-10-18T16:58:24.577", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "PostTypeId": "2", "Id": "26442287", "Score": "4", "Body": "<p>Clang is right. Constructing the array object is well-formed after [expr.type.conv]/3, and we are not taking the adress of the array object (as GCC says) but let an array-to-pointer decay happen, which is allowed for arrays no matter the value category:</p>\n<blockquote>\n<p id=\"so_26441950_26442287_0\">An lvalue <strong>or rvalue</strong> of type \u201carray of N T\u201d or \u201carray of unknown bound\n  of T\u201d can be converted to a prvalue of type \u201cpointer to T\u201d. The result\n  is a pointer to the first element of the array.</p>\n</blockquote>\n", "LastActivityDate": "2014-10-18T17:07:42.620"}, "26441950": {"CommentCount": "1", "ViewCount": "186", "CreationDate": "2014-10-18T16:24:32.877", "LastActivityDate": "2014-10-18T17:16:07.593", "Title": "Array literal syntax quirks", "AcceptedAnswerId": "26442287", "PostTypeId": "1", "Id": "26441950", "Score": "4", "Body": "<p>When I am using array literals I am seeing weird behavior on different compilers.</p>\n<p>The first problem I face is when I have a program like this:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>void f(int*)\n{\n}\n\nint main()\n{\n    using T = int[];\n    f(T{1, 2, 3});\n}\n</code></pre>\n<p>On <a href=\"http://coliru.stacked-crooked.com/a/a89215c0267552e1\" rel=\"nofollow\">Clang 3.5</a> this compiles fine, but on <a href=\"http://coliru.stacked-crooked.com/a/71bffcf9ee06808e\" rel=\"nofollow\">g++ 4.9</a> it gives the error:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>source_file.cpp: In function \u2018int main()\u2019:\nsource_file.cpp:8:17: error: taking address of temporary array\n     f(T{1, 2, 3});\n</code></pre>\n<p>In <a href=\"http://rextester.com/RQTY16956\" rel=\"nofollow\">VC++</a> it gives the error:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>Process exit code is not 0: 255\n</code></pre>\n<p>So that's weird.</p>\n<p>If I make <code>T</code> equal to <code>int[3]</code> instead of <code>int[]</code>, it will compile fine on <a href=\"http://rextester.com/VUCC64069\" rel=\"nofollow\">VC++</a> but still gives the same error on g++.</p>\n<p>Also, if I change the code to:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>using T = int[];\nint* x = T{1, 2, 3};\n</code></pre>\n<p>then clang gives an error similar to g++.</p>\n<p>Which compiler is right?</p>\n<hr>\n<p>I figured out how to make it work on <a href=\"http://coliru.stacked-crooked.com/a/79fcc348ff1078e5\" rel=\"nofollow\">g++</a> by making the parameter of <code>f</code> be <code>int (&amp;&amp;)[3]</code> but in <a href=\"http://rextester.com/VKW32133\" rel=\"nofollow\">VC++</a> it gives a different error.</p>\n</hr>", "Tags": "<c++><c++11>", "OwnerUserId": "1935708", "AnswerCount": "1"}});