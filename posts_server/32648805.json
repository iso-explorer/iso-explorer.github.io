post_cb({"bq_ids": {"n4140": {"so_32648805_32652158_1": {"length": 37, "quality": 1.0, "section_id": 3323}, "so_32648805_32652158_4": {"length": 15, "quality": 1.0, "section_id": 3285}, "so_32648805_32652158_2": {"length": 32, "quality": 0.8205128205128205, "section_id": 3325}, "so_32648805_32648892_0": {"length": 20, "quality": 0.7142857142857143, "section_id": 6181}, "so_32648805_32652158_3": {"length": 24, "quality": 1.0, "section_id": 3287}, "so_32648805_32652158_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3294}}, "n3337": {"so_32648805_32652158_1": {"length": 37, "quality": 1.0, "section_id": 3193}, "so_32648805_32652158_4": {"length": 11, "quality": 0.7333333333333333, "section_id": 3155}, "so_32648805_32652158_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3164}, "so_32648805_32648892_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 5942}, "so_32648805_32652158_3": {"length": 22, "quality": 0.9166666666666666, "section_id": 3157}, "so_32648805_32652158_2": {"length": 27, "quality": 0.6923076923076923, "section_id": 3195}}, "n4659": {"so_32648805_32652158_1": {"length": 34, "quality": 0.918918918918919, "section_id": 4089}, "so_32648805_32652158_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 4047}, "so_32648805_32652158_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 4056}, "so_32648805_32648892_0": {"length": 20, "quality": 0.7142857142857143, "section_id": 7683}, "so_32648805_32652158_3": {"length": 23, "quality": 0.9583333333333334, "section_id": 4049}, "so_32648805_32652158_2": {"length": 37, "quality": 0.9487179487179487, "section_id": 4091}}}, "32648892": {"Id": "32648892", "PostTypeId": "2", "Body": "<p>Yes, it's legal. The standard says (5.17.9):</p>\n<blockquote>\n<p id=\"so_32648805_32648892_0\">A braced-init-list may appear on the right-hand side of an\n  assignment to a scalar, in which case the initializer list shall have\n  at most a single element. The meaning of x={v} , where T is the scalar\n  type of the expression x , is that of x=T(v) except that no narrowing\n  conversion (\n  8.5.4 ) is allowed. <strong>The meaning of x={} is x=T()</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-09-18T09:44:55.617", "CommentCount": "4", "CreationDate": "2015-09-18T09:44:55.617", "ParentId": "32648805", "Score": "5", "OwnerUserId": "1490355"}, "32652158": {"Id": "32652158", "PostTypeId": "2", "Body": "<p>Yes it's okay and you are guaranteed that <code>nBytesRead</code> will contain the value zero. You are copy-initializing <code>nBytesRead</code> with an empty initializer list, which for a non-class type means that you are zero-initializing it. Zero-initialization means precisely what you think it means. </p>\n<hr/>\n<p>What you are doing is called <em>list-copy-initialization</em>. From [dcl.init]:</p>\n<blockquote>\n<p id=\"so_32648805_32652158_0\">The initialization that occurs in the <code>=</code> form of a <em>brace-or-equal-initializer</em> or [...] is called <em>copy-initialization</em>.</p>\n</blockquote>\n<p>From [dcl.init.list]:</p>\n<blockquote>\n<p id=\"so_32648805_32652158_1\"><em>List-initialization</em> is initialization of an object or reference from a <em>braced-init-list</em>. Such an initializer is\n  called an initializer list, and the comma-separated <em>initializer-clauses</em> of the list are called the <em>elements</em> of the\n  initializer list. An initializer list may be empty. List-initialization can occur in direct-initialization or copy-initialization\n  contexts; list-initialization in a direct-initialization context is called <em>direct-list-initialization</em> and\n  list-initialization in a copy-initialization context is called <em>copy-list-initialization</em>.</p>\n</blockquote>\n<p>Where:</p>\n<blockquote>\n<p id=\"so_32648805_32652158_2\">List-initialization of an object or reference of type <code>T</code> is defined as follows:<br>\n  \u2014 If T is a class type and [...]<br>\n  \u2014 Otherwise, if T is a character array and [...]<br>\n  \u2014 Otherwise, if T is an aggregate, [...]<br>\n  \u2014 Otherwise, if the initializer list has no elements and T is a class type [...]<br>\n  \u2014 Otherwise, if T is a specialization of std::initializer_list, [...]<br>\n  \u2014 Otherwise, if T is a class type, [...]<br>\n  \u2014 Otherwise, if the initializer list has a single element [...]<br>\n  \u2014 Otherwise, if T is a reference type, [...]<br>\n  \u2014 Otherwise, if the initializer list has no elements, <strong>the object is value-initialized</strong>.</br></br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>Value-initialization, for a non-class type, means [dcl.init]:</p>\n<blockquote>\n<p id=\"so_32648805_32652158_3\">To <em>value-initialize</em> an object of type <code>T</code> means:<br>\n  \u2014 if T is a (possibly cv-qualified) class type with either no default constructor [...]<br>\n  \u2014 if T is a (possibly cv-qualified) class type without a user-provided or deleted default constructor [...]<br>\n  \u2014 if T is an array type, [...]<br>\n  \u2014 <strong>otherwise, the object is zero-initialized.</strong></br></br></br></br></p>\n</blockquote>\n<p>Zero-initialization means, [dcl.init]:</p>\n<blockquote>\n<p id=\"so_32648805_32652158_4\">To zero-initialize an object or reference of type <code>T</code> means:<br>\n  \u2014 if T is a scalar type (3.9), <strong>the object is initialized to the value obtained by converting the integer literal\n  0 (zero) to <code>T</code></strong></br></p>\n</blockquote>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-09-18T13:27:49.290", "Score": "5", "CreationDate": "2015-09-18T12:33:52.463", "ParentId": "32648805", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2015-09-18T13:27:49.290"}, "32648805": {"ViewCount": "151", "Body": "<p>Is it ok to write something like this</p>\n<pre><code>typedef unsigned long DWORD;\nDWORD nBytesRead = {};\n</code></pre>\n<p>Will this variable contains 0 after this expression?</p>\n", "AcceptedAnswerId": "32648892", "Title": "Curly brackets initialization without any value", "CreationDate": "2015-09-18T09:40:04.363", "Id": "32648805", "CommentCount": "4", "LastEditDate": "2015-09-18T19:56:02.883", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2015-09-18T19:56:02.883", "Score": "1", "OwnerUserId": "1608835", "Tags": "<c++><c++11><list-initialization>", "AnswerCount": "2"}});