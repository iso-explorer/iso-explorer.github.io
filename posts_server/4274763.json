post_cb({"bq_ids": {"n4140": {"so_4274763_4274763_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5768}}, "n3337": {"so_4274763_4274763_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5541}}, "n4659": {"so_4274763_4274763_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7225}}}, "4274830": {"Id": "4274830", "PostTypeId": "2", "Body": "<p>As notes are not normative it doesn't limit UB in any way. It's just a clarification that an implementation could use some constructs that formally cause UB as a documented extension, although any program that relies on such a detail is, of course, inherently not safely portable to other environments.</p>\n", "LastActivityDate": "2010-11-25T08:01:48.653", "CommentCount": "0", "CreationDate": "2010-11-25T08:01:48.653", "ParentId": "4274763", "Score": "6", "OwnerUserId": "19563"}, "4274763": {"ViewCount": "340", "Body": "<p>As <a href=\"https://stackoverflow.com/users/410767/tony\">user Tony</a> <a href=\"https://stackoverflow.com/questions/4265167/is-a-c-compiler-allowed-to-emit-random-code-once-it-encounters-a-construct-that/4272482#4272482\">points out</a> there's a [Note] in paragraph 1.3.12 of C++ standard saying</p>\n<blockquote>\n<p id=\"so_4274763_4274763_0\">permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment...</p>\n</blockquote>\n<p>Doesn't this contradict the definition of UB saying that <strong><em>...this International Standard imposes no requirements</em></strong>? I mean they say \"no requirements\" and then say \"permissible UB\" - right in the same paragraph.</p>\n<p>How should this note be interpreted? Does it indeed limit UB in any way?</p>\n", "AcceptedAnswerId": "4274836", "Title": "What does the [Note] in undefined behavior paragraph in C++ standard mean?", "CreationDate": "2010-11-25T07:52:53.130", "Id": "4274763", "CommentCount": "0", "LastEditDate": "2017-05-23T12:22:01.593", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2010-12-13T17:47:44.650", "Score": "1", "OwnerUserId": "57428", "Tags": "<c++><standards><undefined-behavior><iso><language-lawyer>", "AnswerCount": "3"}, "4431785": {"Id": "4431785", "PostTypeId": "2", "Body": "<p>This note is explaining what an implementation might do if it encounters code for which there is no defined behaviour. The word \"permissible\" is not intended to be a restriction, rather some examples of common behaviours are given.</p>\n<p>It is interesting to note that a compiler almost always HAS to compile something! Consider this fragment of code:</p>\n<pre><code>void f() { 1 / 0; }\n</code></pre>\n<p>the behaviour of the translator on encountering this is not well defined, but it can't just do anything it likes! In fact if it is a compiler it is still required to compile this compilation unit. That is because the behaviour of a program containing this function could still be well defined! The compiler cannot know if the function is called. In fact this question arose where the function was \"main()\" and control was certain to flow through the zero division, and the upshot is that the compiler is not allowed to reject even that program. The reason is: the program is still well formed, and a conforming compiler is required to accept all well formed programs (and reject all ill-formed ones and issue a diagnostic error message, unless otherwise specified).</p>\n<p>This can't easily be made ill-formed because it is hard to specify exactly how smart compilers can be required to be in detecting when a division by zero must take place.</p>\n<p>So interestingly, the claim of the Standard that it \"Imposes no requirements\" is in fact very close to being wrong. It is characteristics of a compilation system supporting separate compilation that it cannot detect if a piece of code for which there is no well defined behaviour is, in fact, executed, and so the compiler is in fact <strong>required</strong> to compile something anyhow, because it cannot deduce if the <strong>program</strong> has undefined behaviour.</p>\n", "LastActivityDate": "2010-12-13T17:47:44.650", "CommentCount": "11", "CreationDate": "2010-12-13T17:47:44.650", "ParentId": "4274763", "Score": "2", "OwnerUserId": "518287"}, "4274836": {"Id": "4274836", "PostTypeId": "2", "Body": "<p>From \u00a76.5.1 of <a href=\"http://std.dkuug.dk/jtc1/sc22/wg9/isodir3.pdf\" rel=\"noreferrer\">Part 3</a> of the ISO/IEC Directives:</p>\n<blockquote>\n<p id=\"so_4274763_4274836_0\">Notes and examples integrated in the\n  text of a standard shall only be used\n  for giving additional information\n  intended to assist the understanding\n  or use of the standard and shall not\n  contain provisions to which it is\n  necessary to conform in order to be\n  able to claim compliance with the\n  standard.</p>\n</blockquote>\n<p>So it's entirely non-normative (non-binding) and meant only for possible clarification.</p>\n", "LastEditorUserId": "47773", "LastActivityDate": "2010-11-25T08:12:31.640", "Score": "7", "CreationDate": "2010-11-25T08:02:23.710", "ParentId": "4274763", "CommentCount": "2", "OwnerUserId": "47773", "LastEditDate": "2010-11-25T08:12:31.640"}});