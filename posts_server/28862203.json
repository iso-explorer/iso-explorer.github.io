post_cb({"28862373": {"Id": "28862373", "PostTypeId": "2", "Body": "<p>In this particular case solution could be using different argument order:</p>\n<pre><code>void func(int const n, int *array=NULL, bool const flag=true ) {\n  /* print contents of array */\n}\n</code></pre>\n<p>If you ommit second parameter boolean value cannot be implicitly converted to a pointer (unless you have bad habbit of using 0 as <code>false</code>), so it will fail to compile (or at least provide warning). </p>\n<pre><code>void func(int const n, int *array = nullptr, bool const flag=true ) {\n      /* print contents of array */\n}\n\nint main()\n{\n    func( 0, false );\n}\n</code></pre>\n<blockquote>\n<p id=\"so_28862203_28862373_0\">warning: converting 'false' to pointer type for argument 2 of 'void\n  func(int, int*, bool)' [-Wconversion-null]</p>\n</blockquote>\n<p>But in general it shows that you should use different technique. For example using <code>std::vector</code> instead of raw pointer.</p>\n<pre><code>typedef std::vector&lt;int&gt; int_vec;\nvoid func( bool const flag=true, const int_vec &amp;array = int_vec() ) {\n      /* print contents of array */\n}\n\nint main()\n{\n    int_vec array {1,2,3,4,5};\n    func( array );\n}\n</code></pre>\n<blockquote>\n<p id=\"so_28862203_28862373_1\">error: cannot convert 'int_vec {aka std::vector}' to 'bool' for\n  argument '1' to 'void func( bool, int_vec)'</p>\n</blockquote>\n", "LastEditorUserId": "432358", "LastActivityDate": "2015-03-04T19:04:09.820", "Score": "2", "CreationDate": "2015-03-04T18:43:15.970", "ParentId": "28862203", "CommentCount": "3", "OwnerUserId": "432358", "LastEditDate": "2015-03-04T19:04:09.820"}, "28862503": {"Id": "28862503", "PostTypeId": "2", "Body": "<p>According to the C++ Standard (4 Standard conversions)</p>\n<blockquote>\n<p id=\"so_28862203_28862503_0\">1 Standard conversions are implicit conversions with built-in meaning.\n  Clause 4 enumerates the full set of such conversions. A standard\n  conversion sequence is a sequence of standard conversions in the\n  following order:</p>\n<p id=\"so_28862203_28862503_1\">\u2014 Zero or one conversion from the following set:\n  lvalue-to-rvalue conversion, <strong>array-to-pointer conversion</strong>, and\n  function-to-pointer conversion.</p>\n<p id=\"so_28862203_28862503_2\">\u2014 Zero or one conversion from the following set: integral\n  promotions, floating point promotion, integral conversions, floating\n  point conversions, floating-integral conversions, pointer conversions,\n  pointer to member conversions, and <strong>boolean conversions</strong>.</p>\n<p id=\"so_28862203_28862503_3\">\u2014 Zero or one qualification conversion.</p>\n</blockquote>\n<p>And</p>\n<p>4.12 Boolean conversions</p>\n<blockquote>\n<p id=\"so_28862203_28862503_4\">1 A prvalue of arithmetic, unscoped enumeration, <strong>pointer</strong>, or pointer\n  to member type can be converted to a prvalue of type bool. A zero\n  value, null pointer value, or null member pointer value is\n  converted to false; any other value is converted to true. For\n  direct-initialization (8.5), a prvalue of type std::nullptr_t can be\n  converted to a prvalue of type bool; the resulting value is false.</p>\n</blockquote>\n<p>So this function call</p>\n<pre><code>func(5,array);\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>func(5,array, NULL);\n</code></pre>\n<p>the second argument at first was converted from array to pointer (array-to-pointer conversion) and then was converted to boolean true (boolean conversions).</p>\n<p>Thus this call is a valid call of the function. The compiler implicitly converts arguments to appropriate types.</p>\n", "LastActivityDate": "2015-03-04T18:51:16.677", "CommentCount": "0", "CreationDate": "2015-03-04T18:51:16.677", "ParentId": "28862203", "Score": "2", "OwnerUserId": "2877241"}, "28862203": {"ViewCount": "202", "Body": "<p>I declared a C++ function declaration with 3 arguments, two of which had defaults like so.</p>\n<pre><code>void func(int const n, bool const flag=true, int *array=NULL) {\n  /* print contents of array */\n}\n</code></pre>\n<p>When I invoked the function erroneously, omitting the second argument but including the third argument, like so</p>\n<pre><code>int array[5]={1,2,3,4,5};\nfunc(5,array);\n</code></pre>\n<p>neither gcc nor intel compilers (default ones on Ubuntu 14.04 LTS) complained that the last argument was specified without specifying the second last one. The code ran but sent in NULL for array (I expected the code to fail).</p>\n<p>My question is why didn't the compilers complain that it could not find a matching function since the signature of my invocation should have appeared as</p>\n<pre><code>funct(int const, int *)\n</code></pre>\n<p>What options can I turn on during compiling to trigger a warning about this erroneous usage?</p>\n", "Title": "C++ compiler does not warn about missing argument before end of default arguments", "CreationDate": "2015-03-04T18:33:42.757", "LastActivityDate": "2015-03-04T19:04:09.820", "CommentCount": "4", "PostTypeId": "1", "Id": "28862203", "Score": "5", "OwnerUserId": "3389120", "Tags": "<c++><compiler-warnings><default-arguments>", "AnswerCount": "4"}, "28862234": {"Id": "28862234", "PostTypeId": "2", "Body": "<p>The compiler decays the array to a pointer and converts the pointer to a <code>bool</code> and proceeds.</p>\n<p><strong>Update</strong></p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_28862203_28862234_0\"><strong>4 Standard conversions</strong> [conv]</p>\n<p id=\"so_28862203_28862234_1\">1 Standard conversions are implicit conversions with built-in meaning. Clause 4 enumerates the full set of such\n  conversions. <em>A standard conversion sequence</em> is a sequence of standard conversions in the following order:</p>\n<p id=\"so_28862203_28862234_2\">\u2014 Zero or one conversion from the following set: lvalue-to-rvalue conversion, array-to-pointer conversion,\n  and function-to-pointer conversion.</p>\n<p id=\"so_28862203_28862234_3\">\u2014 Zero or one conversion from the following set: integral promotions, floating point promotion, integral\n  conversions, floating point conversions, floating-integral conversions, pointer conversions, pointer to\n  member conversions, and boolean conversions.</p>\n<p id=\"so_28862203_28862234_4\">\u2014 Zero or one qualification conversion.</p>\n<p id=\"so_28862203_28862234_5\">[ <em>Note:</em> A standard conversion sequence can be empty, i.e., it can consist of no conversions. <em>\u2014end note</em> ]</p>\n<p id=\"so_28862203_28862234_6\">A standard conversion sequence will be applied to an expression if necessary to convert it to a required destination type.</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2015-03-04T18:50:36.887", "Score": "14", "CreationDate": "2015-03-04T18:35:00.567", "ParentId": "28862203", "CommentCount": "15", "OwnerUserId": "434551", "LastEditDate": "2015-03-04T18:50:36.887"}, "bq_ids": {"n4140": {"so_28862203_28862503_1": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862234_6": {"length": 10, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_2": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_2": {"length": 24, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_4": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_5": {"length": 7, "quality": 0.7, "section_id": 0}, "so_28862203_28862234_3": {"length": 24, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_3": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862503_4": {"length": 40, "quality": 0.975609756097561, "section_id": 44}}, "n3337": {"so_28862203_28862503_1": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862234_6": {"length": 10, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_2": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_2": {"length": 24, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_4": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_5": {"length": 7, "quality": 0.7, "section_id": 0}, "so_28862203_28862234_3": {"length": 24, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_3": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862503_4": {"length": 39, "quality": 0.9512195121951219, "section_id": 41}}, "n4659": {"so_28862203_28862503_1": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862503_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28862203_28862234_2": {"length": 11, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 0}, "so_28862203_28862234_4": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_5": {"length": 7, "quality": 0.7, "section_id": 0}, "so_28862203_28862234_3": {"length": 20, "quality": 0.8333333333333334, "section_id": 0}, "so_28862203_28862503_3": {"length": 4, "quality": 1.0, "section_id": 0}, "so_28862203_28862234_6": {"length": 10, "quality": 1.0, "section_id": 0}, "so_28862203_28862503_4": {"length": 40, "quality": 0.975609756097561, "section_id": 45}}}, "28862558": {"Id": "28862558", "PostTypeId": "2", "Body": "<p>There is an implicit casting to bool taking place.\nWith Visual C++ you would get a <a href=\"https://msdn.microsoft.com/en-us/library/b6801kcy.aspx\" rel=\"nofollow\">C4800</a> warning.\nIn gcc you can request specific warnings with options beginning with \u2018-W\u2019, for example <code>-Wimplicit</code> to request warnings on implicit declarations. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"nofollow\">Options to Request or Suppress Warnings</a> for the full documentation.</p>\n", "LastActivityDate": "2015-03-04T18:55:17.920", "CommentCount": "0", "CreationDate": "2015-03-04T18:55:17.920", "ParentId": "28862203", "Score": "2", "OwnerUserId": "1818292"}});