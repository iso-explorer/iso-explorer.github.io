post_cb({"bq_ids": {"n4140": {"so_13025535_13025809_0": {"length": 41, "quality": 0.9534883720930233, "section_id": 124}}, "n3337": {"so_13025535_13025809_0": {"length": 41, "quality": 0.9534883720930233, "section_id": 118}}, "n4659": {"so_13025535_13025809_0": {"length": 41, "quality": 0.9534883720930233, "section_id": 128}}}, "13025809": {"Id": "13025809", "PostTypeId": "2", "Body": "<p>The empty parenthesis (<code>()</code>) will make it a function declaration only if it's written as such in the source code.</p>\n<p><code>\u00a714.5.3 [temp.variadic] p6</code> also mentions this:</p>\n<blockquote>\n<p id=\"so_13025535_13025809_0\">The instantiation of a pack expansion that is not a sizeof... expression produces a list E1, E2, ..., EN, where N is the number of elements in the pack expansion parameters. [...] When N is zero, the instantiation of the expansion produces an empty list. <strong>Such an instantiation does not alter the syntactic interpretation of the enclosing construct</strong>, even in cases where omitting the list entirely would otherwise be ill-formed or would result in an ambiguity in the grammar. [ <em>Example:</em></p>\n<pre><code>template&lt;class... T&gt; struct X : T... { };\ntemplate&lt;class... T&gt; void f(T... values) {\nX&lt;T...&gt; x(values...);\n}\ntemplate void f&lt;&gt;(); // OK: X&lt;&gt; has no base classes\n                     // x is a variable of type X&lt;&gt; that is value-initialized\n</code></pre>\n<p id=\"so_13025535_13025809_1\"><em>\u2014end example</em> ]</p>\n</blockquote>\n<p>See specifically the second comment in the example code.</p>\n", "LastActivityDate": "2012-10-23T07:52:37.893", "CommentCount": "1", "CreationDate": "2012-10-23T07:52:37.893", "ParentId": "13025535", "Score": "13", "OwnerUserId": "500104"}, "13025535": {"ViewCount": "190", "Body": "<p>I was writing a function template as</p>\n<pre><code>template&lt;typename ...T&gt;\nvoid f(T ...t) {\n  X x(t...);\n  // ...\n}\n</code></pre>\n<p>When I was looking at it, I was wondering what happens for a call <code>f()</code>. Will vexing  parse make x a function declaration? Compilers seem to make it a variable. Can someone help me be sure about it please?</p>\n", "AcceptedAnswerId": "13025809", "Title": "Can X x(t...) ever result in a function declaration with vexing parse?", "CreationDate": "2012-10-23T07:32:22.180", "Id": "13025535", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-10-23T07:55:45.210", "LastEditorUserId": "500104", "LastActivityDate": "2012-10-23T07:55:45.210", "Score": "15", "OwnerUserId": "34509", "Tags": "<c++><templates><c++11><variadic-templates>", "AnswerCount": "1"}});