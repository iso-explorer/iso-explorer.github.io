post_cb({"bq_ids": {"n4140": {"so_39303483_39303512_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6034}}, "n3337": {"so_39303483_39303512_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5802}}, "n4659": {"so_39303483_39303512_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7533}}}, "39303512": {"Id": "39303512", "PostTypeId": "2", "Body": "<p>This is presumably because you cannot have an object of function type (under the definition of object used in the standard: a region of storage). The cast would need to create an object of the type <code>int(int)</code>, but you can't have objects of that type (functions are not objects).</p>\n<p>You can, however, cast to a function pointer because you can have objects of a function pointer type. In fact, the function argument to <code>static_cast</code> already decays to a function pointer before being casted to the now-same type (much like an array readily decays to a pointer). This is because of [expr.static.cast]/8:</p>\n<blockquote>\n<p id=\"so_39303483_39303512_0\">The lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) conversions are applied to the operand.</p>\n</blockquote>\n<p>Long story short, <code>fn2</code> is equivalent to <code>fn1</code> with a redundant cast because <code>f</code> is already converted to a function pointer when intializing <code>fn1</code>.</p>\n", "LastEditorUserId": "962089", "LastActivityDate": "2016-09-03T05:58:07.277", "Score": "3", "CreationDate": "2016-09-03T05:19:46.357", "ParentId": "39303483", "CommentCount": "2", "LastEditDate": "2016-09-03T05:58:07.277", "OwnerUserId": "962089"}, "39303483": {"ViewCount": "62", "Body": "<pre><code>#include &lt;functional&gt;\n\nint f(int x)\n{\n    return 0;\n}\n\nint main()\n{\n    std::function&lt;int(int)&gt; fn1 = f; // ok\n    std::function&lt;int(int)&gt; fn2 = static_cast&lt;int(*)(int)&gt;(f); // ok\n\n    //\n    // error C2066: cast to function type is illegal\n    //\n    std::function&lt;int(int)&gt; fn3 = static_cast&lt;int(int)&gt;(f); \n}\n</code></pre>\n<p>My C++ compiler is VS 2015 Update 3.</p>\n<p>I just wonder:</p>\n<p>Why doesn't the C++ standard allow <code>std::function&lt;int(int)&gt; fn3 = static_cast&lt;int(int)&gt;(f);</code>? </p>\n<p><strong>What's the rationale behind?</strong></p>\n", "Title": "Why doesn't C++ allow to static_cast<function_type_of_f>(f)?", "CreationDate": "2016-09-03T05:13:32.020", "LastActivityDate": "2016-09-03T05:58:07.277", "CommentCount": "0", "PostTypeId": "1", "Id": "39303483", "Score": "0", "OwnerUserId": "508343", "Tags": "<c++><function><compiler-errors><type-conversion><standards>", "AnswerCount": "1"}});