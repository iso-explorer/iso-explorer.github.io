post_cb({"38757329": {"ParentId": "38757079", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2016-08-04T02:00:50.813", "Score": "5", "LastEditorUserId": "657267", "LastEditDate": "2016-08-04T02:08:14.157", "Id": "38757329", "OwnerUserId": "657267", "Body": "<p>Direct- and copy-list-initialization both result in a call to a constructor in this case.</p>\n<p>Using a process of elimination in the rules in [dcl.init.list] / 3, </p>\n<blockquote>\n<p id=\"so_38757079_38757329_0\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<p id=\"so_38757079_38757329_1\">[...]</p>\n<p id=\"so_38757079_38757329_2\">Otherwise, if <code>T</code> is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution (13.3, 13.3.1.7). If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed.</p>\n</blockquote>\n<p>The important thing to take home is that copy-initialization and copy-list-initialization aren't equivalent, you can use copy-list-initialization to initialize an object with deleted copy and move constructors for instance:</p>\n<pre><code>struct A\n{\n  A(int i){}\n  A(A const&amp;) =delete;\n  A(A&amp;&amp;) =delete;\n};    \n\nint main()\n{\n  A a1 = {1};\n  A a2 = 1; // won't compile\n}\n</code></pre>\n", "LastActivityDate": "2016-08-04T02:08:14.157"}, "38757079": {"CommentCount": "0", "ViewCount": "87", "CreationDate": "2016-08-04T01:26:47.620", "LastActivityDate": "2016-08-04T02:08:14.157", "Title": "Does C++ language enforce compiler optimization when using list initialization?", "AcceptedAnswerId": "38757329", "PostTypeId": "1", "Id": "38757079", "Score": "3", "Body": "<p>Here is the source.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    A(int i) : i(i) { std::cout &lt;&lt; this &lt;&lt; \": A(int)\" &lt;&lt; std::endl; }\n    A(A const &amp;a) : i(a.i) { std::cout &lt;&lt; this &lt;&lt; \": A(A const &amp;)\" &lt;&lt; std::endl; }\n    A(A &amp;&amp;a) : i(a.i) { std::cout &lt;&lt; this &lt;&lt; \": A(A &amp;&amp;)\" &lt;&lt; std::endl; }\n    ~A() { std::cout &lt;&lt; this &lt;&lt; \": ~A()\" &lt;&lt; std::endl; }    \n\n  private:\n    int i;\n};    \n\nint main() {\n    std::cout &lt;&lt; \"#1 :\" &lt;&lt; std::endl;\n    A a1 = 1; // #1, copy-initialization    \n\n    std::cout &lt;&lt; \"#2 :\" &lt;&lt; std::endl;\n    A a3(1); // #2, direct-initialization    \n\n    std::cout &lt;&lt; \"#3 :\" &lt;&lt; std::endl;\n    A a4 = {1}; // #3, copy-list-initialization    \n\n    std::cout &lt;&lt; \"#4 :\" &lt;&lt; std::endl;\n    A a5{1}; // #4, direct-list-initialization    \n\n    std::cout &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Compiling above codes with <code>clang++ -std=c++14 -Wall -fno-elide-constructors -pedantic -o main.exe source.cpp</code> (Here, I disable the construction optimization. BTW, I'm using Clang 3.8.1). Then, I get following output:</p>\n<pre><code>#1 :\n0x61fe40: A(int)\n0x61fe48: A(A &amp;&amp;)\n0x61fe40: ~A()\n#2 :\n0x61fe30: A(int)\n#3 :\n0x61fe28: A(int)\n#4 :\n0x61fe20: A(int)\n\n0x61fe20: ~A()\n0x61fe28: ~A()\n0x61fe30: ~A()\n0x61fe48: ~A()\n</code></pre>\n<p>What supprise me is #3 doesn't call <code>A::A(int)</code> first and then <code>A::A(A &amp;&amp;)</code> as #1 does, although both of they are copy-initialized. I also tested it with gcc 6.1.0. Same thing happens. As far as I know, one of common usage of list initialization is to prohibit narrowing conversions. I didn't know it has anything related to compiling optimization. So,</p>\n<p>Does C++ language enforce compiler optimization when using list initialization or just compilers prefer to do so or something else cause the behavior described above?</p>\n", "Tags": "<c++><gcc><optimization><clang><list-initialization>", "OwnerUserId": "5845611", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38757079_38757329_0": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_38757079_38757329_2": {"section_id": 3325, "quality": 0.875, "length": 21}}, "n3337": {"so_38757079_38757329_0": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_38757079_38757329_2": {"section_id": 3195, "quality": 0.875, "length": 21}}, "n4659": {"so_38757079_38757329_0": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_38757079_38757329_2": {"section_id": 4091, "quality": 0.875, "length": 21}}}});