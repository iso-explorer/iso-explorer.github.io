post_cb({"bq_ids": {"n4140": {"so_25406818_25406977_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 6057}, "so_25406818_25406977_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}, "so_25406818_25406930_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 6057}}, "n3337": {"so_25406818_25406977_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5825}, "so_25406818_25406977_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}, "so_25406818_25406930_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5825}}, "n4659": {"so_25406818_25406977_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7555}, "so_25406818_25406977_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}, "so_25406818_25406930_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 7555}}}, "25406818": {"ViewCount": "232", "Body": "<p>This is a language lawyer question, not a good practice question.</p>\n<p>Is the following code valid or undefined behaviour? A const object ends up calling a non-const function, but it doesn't actually modify the state of the object.</p>\n<pre><code>struct Bob\n{\n    Bob() : a(0) {}\n\n    int&amp; GetA()\n    {\n        return a;\n    }\n\n    const int&amp; GetA() const\n    {\n        return const_cast&lt;Bob&amp;&gt;(*this).GetA();\n    }\n\n    int a;\n};\n\nint main()\n{\n    const Bob b;\n    int a = b.GetA();\n}\n</code></pre>\n", "Title": "Is the following use of const_cast undefined behavior?", "CreationDate": "2014-08-20T14:04:38.783", "LastActivityDate": "2014-08-20T14:15:15.317", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-20T14:05:57.150", "LastEditorUserId": "1782465", "Id": "25406818", "Score": "7", "OwnerUserId": "2068573", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "25406977": {"Id": "25406977", "PostTypeId": "2", "Body": "<p>I believe it is well-defined, since the standard only ascribes undefined behaviour to <em>modifying</em> a <code>const</code> object. C++11 quotes follow:</p>\n<p>[expr.const.cast] 5.2.11 \u00a77</p>\n<blockquote>\n<p id=\"so_25406818_25406977_0\">[ <em>Note:</em> Depending on the type of the object, a write operation through the pointer, lvalue or pointer\n  to data member resulting from a <code>const_cast</code> that casts away a const-qualifier may produce undefined\n  behavior (7.1.6.1). <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>[dcl.type.cv] 7.1.6.1 \u00a74</p>\n<blockquote>\n<p id=\"so_25406818_25406977_1\">Except that any class member declared <code>mutable</code> (7.1.1) can be modified, any attempt to modify a <code>const</code>\n  object during its lifetime (3.8) results in undefined behavior. ...</p>\n</blockquote>\n<p><code>GetA()</code> does not actually modify any object, so it doesn't have undefined behaviour.</p>\n", "LastActivityDate": "2014-08-20T14:11:26.607", "CommentCount": "1", "CreationDate": "2014-08-20T14:11:26.607", "ParentId": "25406818", "Score": "4", "OwnerUserId": "1782465"}, "25406930": {"Id": "25406930", "PostTypeId": "2", "Body": "<p>The behavior is well-defined :</p>\n<p>C++ standard, section \u00a7 5.2.11/7 [const cast]</p>\n<blockquote>\n<p id=\"so_25406818_25406930_0\">[ Note: Depending on the type of the object, a <strong>write operation</strong> through the pointer, lvalue or pointer <strong>to data member</strong> resulting from a const_cast that casts away a const-qualifier may produce undefined behavior. \u2014end note ]</p>\n</blockquote>\n<p><code>GetA()</code> does not write any member of <code>Bob</code>, so this program does not involve undefined behavior.</p>\n", "LastEditorUserId": "27678", "LastActivityDate": "2014-08-20T14:15:15.317", "Score": "8", "CreationDate": "2014-08-20T14:09:50.857", "ParentId": "25406818", "CommentCount": "0", "OwnerUserId": "3510483", "LastEditDate": "2014-08-20T14:15:15.317"}});