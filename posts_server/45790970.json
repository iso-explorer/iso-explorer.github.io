post_cb({"bq_ids": {"n4140": {"so_45790970_45791389_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 341}}, "n3337": {"so_45790970_45791389_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 331}}, "n4659": {"so_45790970_45791389_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 311}}}, "45792218": {"Id": "45792218", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45790970_45792218_0\">An answer from the link above and the answer to this question assert that <code>Container&lt;T&gt;</code> can't be counted as a template parameter</p>\n</blockquote>\n<p>What is or is not a template parameter is not subject to much interpretation. It is clearly defined in <code>[temp.param]</code>:</p>\n<pre><code>template-parameter: \n    type-parameter \n    parameter-declaration \n type-parameter: \n    type-parameter-key ...(opt) identier (opt)\n    type-parameter-key identier(opt) = type-id \n    template &lt; template-parameter-list &gt; type-parameter-key ...(opt) identier(opt)\n    template &lt; template-parameter-list &gt; type-parameter-key identier(opt) = id-expression \ntype-parameter-key: \n    class\n    typename\n</code></pre>\n<p>It is clear from these production rules that <code>dummyMe</code> has exactly two template parameters: <code>typename T</code> and <code>template &lt;typename&gt; class Container</code>. Identifiers that name each of these parameters are <code>T</code> and <code>Container</code>. <code>T</code> names the first parameter and <code>Container</code> names the second one. <code>Container&lt;T&gt;</code> is not an identifier and names neither of the two.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2017-08-28T06:06:16.890", "Score": "6", "CreationDate": "2017-08-21T08:13:50.177", "ParentId": "45790970", "CommentCount": "4", "OwnerUserId": "775806", "LastEditDate": "2017-08-28T06:06:16.890"}, "45791389": {"Id": "45791389", "PostTypeId": "2", "Body": "<p>The term \"forwarding reference\" is described at <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.deduct.call#3\" rel=\"noreferrer\">[temp.deduct.call/3]</a>(from C++17 draft n4659):</p>\n<blockquote>\n<p id=\"so_45790970_45791389_0\">A forwarding reference is an rvalue reference to a cv-unqualified\n  <strong>template parameter</strong> that does not represent a template parameter of a\n  class template (during class template argument deduction).</p>\n</blockquote>\n<p>In your example <code>Container&lt;T&gt;</code> is not a template parameter, it is a type you comprised from the template parameters <code>T</code> and <code>Container</code>. In order for the reference to be truly forwarding, you can use <code>T&amp;&amp;</code> only. While <code>Conatiner</code> is a template parameter, you can't have a reference to a template (the above paragraphs even mentions it explicitly). The <strong>type</strong> <code>Container&lt;T&gt;</code> is not the same as the <strong>template</strong> <code>Container</code>. It's an instantiated class.<sup>1</sup></p>\n<p>While you can use SFINAE to obtain a forwarding reference that can be bound only to the container type, I personally feel you're better off just overloading the function.</p>\n<pre><code>template &lt;typename T, template &lt;typename&gt; class Container&gt;\nvoid dummyMe(Container&lt;T&gt;&amp;&amp;)\n{}\n\ntemplate &lt;typename T, template &lt;typename&gt; class Container&gt;\nvoid dummyMe(Container&lt;T&gt;&amp;)\n{}\n</code></pre>\n<hr>\n<p><sub>\n<sup>1</sup><a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.spec#2\" rel=\"noreferrer\">[temp.spec/2]</a> - A class instantiated from a class template is called an instantiated class\n</sub></p>\n</hr>", "LastEditorUserId": "817643", "LastActivityDate": "2017-08-21T07:32:59.847", "Score": "10", "CreationDate": "2017-08-21T07:22:37.697", "ParentId": "45790970", "CommentCount": "15", "OwnerUserId": "817643", "LastEditDate": "2017-08-21T07:32:59.847"}, "45790970": {"ViewCount": "514", "Body": "<p>Suppose we have the following code:</p>\n<pre><code>template&lt;typename T&gt;\nclass C\n{};\n\ntemplate &lt;typename T, template &lt;typename&gt; class Container&gt;\nvoid dummyMe(Container&lt;T&gt;&amp;&amp;)\n{};\n\nint main(int argc, char* argv[])\n{\n    C&lt;int&gt; c;\n    dummyMe(c);\n    return 0;\n}\n</code></pre>\n<p>Which doesn't compile due to the first <code>dummyMe</code> argument being an rvalue-reference. Could someone explain me in Standardese why the template template parameters are not getting along with the forwarding references and why is it so in plain English. </p>\n<p>P.S. I've stumbled on <a href=\"https://stackoverflow.com/questions/21022724/universal-reference-to-template-template-parameter\">this</a> and <a href=\"https://stackoverflow.com/questions/32282705/a-failure-to-instantiate-function-templates-due-to-universal-forward-reference\">that</a> questions but I do not see any real proofs in the answers.</p>\n<hr>\n<p>An answer from the link above and the answer to this question assert that <code>Container&lt;T&gt;</code> can't be counted as a template parameter. And I see no reason why  it is so. Let's make the example even simpler:</p>\n<pre><code>template &lt;template &lt;typename=int&gt; class Container&gt;\nvoid dummyMe(Container&lt;&gt;&amp;&amp;)\n{};\n</code></pre>\n<p>Now we have an example almost identical to the following:</p>\n<pre><code>template &lt;typename Container&gt;\nvoid dummyMe(Container&amp;&amp;)\n{};\n</code></pre>\n<p>But which is treated in a completely different fashion. Why? Why is <code>Container&lt;&gt;&amp;&amp;</code> can't be considered as the same thing to <code>template &lt;typename=int&gt; class Container</code> as <code>Container&amp;&amp;</code> to <code>typename Container</code>?</p>\n</hr>", "AcceptedAnswerId": "45792218", "Title": "template template parameters and forwarding references", "CreationDate": "2017-08-21T06:56:09.027", "Id": "45790970", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-08-21T08:00:27.043", "LastEditorUserId": "643393", "LastActivityDate": "2017-08-28T06:06:16.890", "Score": "10", "OwnerUserId": "643393", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}});