post_cb({"bq_ids": {"n4140": {"so_16666304_16666387_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 7093}, "so_16666304_16666387_2": {"length": 7, "quality": 0.875, "section_id": 7093}}, "n3337": {"so_16666304_16666387_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 6837}, "so_16666304_16666387_2": {"length": 7, "quality": 0.875, "section_id": 6837}}, "n4659": {"so_16666304_16666387_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 8594}, "so_16666304_16666387_2": {"length": 7, "quality": 0.875, "section_id": 8594}}}, "16667336": {"Id": "16667336", "PostTypeId": "2", "Body": "<p>You can also get it to work like this:</p>\n<pre><code>struct B\n{\n    double operator()()\n    {\n        return 1.0;\n    }\n};\n\n// my implementation does not have std::declval\ntemplate &lt; typename T &gt; T&amp;&amp; declval();\n\nstruct A\n{\n    B b;\n    auto func() -&gt; decltype(declval&lt;B&gt;().operator()())\n    {\n        return b();\n    }\n};\n</code></pre>\n<p>edit:\nor since B is in scope already anyway no need for auto, -&gt; decltype and declval</p>\n<pre><code>struct A\n{\n    B b;\n    decltype(Q()()) func()\n    {\n        return b();\n    }\n};\n</code></pre>\n", "LastEditorUserId": "1866300", "LastActivityDate": "2013-05-21T10:28:16.383", "Score": "1", "CreationDate": "2013-05-21T10:05:35.567", "ParentId": "16666304", "CommentCount": "1", "OwnerUserId": "1866300", "LastEditDate": "2013-05-21T10:28:16.383"}, "16666304": {"ViewCount": "1586", "Body": "<p>I got error compiling below code. </p>\n<pre><code>struct B{\n    double operator()(){\n        return 1.0;\n    }\n};\n\nstruct A {\n    auto func() -&gt; decltype(b())\n    {\n        return b();\n    }\n\n    B b;\n};\n</code></pre>\n<p>However, if I reorganize the <code>A</code>, it compiles. </p>\n<p>gcc 4.8 said that 'b' was not declared in this scope.</p>\n<pre><code>struct A {\n    B b;\n    auto func() -&gt; decltype(b())\n    {\n        return b();\n    }\n};\n</code></pre>\n<p>So, what is wrong with the first??</p>\n", "AcceptedAnswerId": "16666504", "Title": "decltype as a return type in class member function", "CreationDate": "2013-05-21T09:16:38.027", "Id": "16666304", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-06-03T01:30:19.983", "LastEditorUserId": "1120977", "LastActivityDate": "2013-06-03T01:30:19.983", "Score": "9", "OwnerUserId": "1120977", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "16666387": {"Id": "16666387", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16666304_16666387_0\">Is it valid?</p>\n</blockquote>\n<p>Your last example is well-formed, while the first one is not (so GCC is correct). </p>\n<p>Paragraph 3.4.1/7 on unqualified name lookup specifies:</p>\n<blockquote>\n<p id=\"so_16666304_16666387_1\">A name used in the definition of a class <code>X</code> <strong>outside of a member function body</strong>, default argument, <em>brace-or-\n  equal-initializer</em> of a non-static data member, or nested class definition <strong>shall be declared in one of the\n  following ways</strong>:</p>\n<p id=\"so_16666304_16666387_2\">\u2014 <strong>before its use in class <code>X</code></strong> or be a member of a base class of X (10.2), or</p>\n<p id=\"so_16666304_16666387_3\">\u2014 [...]</p>\n</blockquote>\n<p>And what follows are other conditions that do not apply in your case.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-21T09:26:26.587", "Score": "9", "CreationDate": "2013-05-21T09:20:51.137", "ParentId": "16666304", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-05-21T09:26:26.587"}, "16666504": {"Id": "16666504", "PostTypeId": "2", "Body": "<p>The definition of the <code>class</code> is processed it two passes: first the member declarations are collected, including function <em>signatures</em>, and then the bodies of definitions are parsed. </p>\n<p>The function body therefore has access to all member declarations, including subsequent ones, but the function prototype only sees preceding declarations.</p>\n", "LastActivityDate": "2013-05-21T09:25:29.830", "CommentCount": "2", "CreationDate": "2013-05-21T09:25:29.830", "ParentId": "16666304", "Score": "8", "OwnerUserId": "153285"}});