post_cb({"31523327": {"ParentId": "31518581", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>From the <a href=\"https://msdn.microsoft.com/en-us/library/8183zf3x%28v=vs.120%29.aspx\" rel=\"nofollow\">friendly manual</a> (abbreviating #2 a bit):</p>\n<blockquote id=\"so_31518581_31523327_0\">\n<ol>\n<li>The class's destructor is called.</li>\n<li>Destructors for nonstatic members in reverse order of declaration.</li>\n<li>Destructors for nonvirtual base classes are called in the reverse order of declaration.</li>\n<li>Destructors for virtual base classes are called in the reverse order of declaration.</li>\n</ol>\n</blockquote>\n<p>So your compiler emits code that destructs in the order AB, B, A.</p>\n<p>[Edit 20150725: Barry's repeated comments eventually led me to notice that I had typoed \"This is not\" as \"This is also\".  Of course, having typed it, I couldn't see it until I <em>did</em>.  Meh.  Thus, the one changed word in the following.]</p>\n<p>This is <em><strong>not</strong></em> the order from isocpp.org's <a href=\"https://isocpp.org/wiki/faq/multiple-inheritance#mi-vi-dtor-order\" rel=\"nofollow\">FAQ</a>.  That entry refers to the same question about constructor ordering, where the text \"Note that the order B1 and then B2 (or B1a then B1b) is determined by the order that the base classes appear in the declaration of the class, not in the order that the initializer appears in the derived class\u2019s initialization list.\" appears, highlighting that declaration order is the relevant order.</p>\n", "OwnerUserId": "478891", "LastEditorUserId": "478891", "LastEditDate": "2015-07-25T22:27:08.783", "Id": "31523327", "Score": "1", "CreationDate": "2015-07-20T18:03:44.840", "LastActivityDate": "2015-07-25T22:27:08.783"}, "31518581": {"CommentCount": "3", "ViewCount": "1003", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-07-20T14:03:23.470", "LastActivityDate": "2015-07-25T22:27:08.783", "Title": "Order of destruction in the case of multiple inheritance", "AcceptedAnswerId": "31519337", "LastEditDate": "2015-07-20T16:36:59.667", "Id": "31518581", "Score": "9", "Body": "<p>Is the order of destruction well defined in the case of multiple inheritance?</p>\n<pre><code>struct A\n{\n   ~A(){std::cout &lt;&lt; \"A\\n\";}   \n};\n\nstruct B\n{\n   ~B(){std::cout &lt;&lt; \"B\\n\";}   \n};\n\nstruct AB : public B, public A\n{\n    ~AB(){std::cout&lt;&lt;\"AB\\n\";}   \n};\n\nint main()\n{\n    AB ab;\n}\n</code></pre>\n<p>For the given code my compiler prints:</p>\n<pre><code>AB\nB\nA\n</code></pre>\n<p>Buf I use more complex constructs (including <code>CWinApp</code>), I get different results. So is the order well-defined? And if so, what is the ordering rule?</p>\n", "Tags": "<c++><language-lawyer><multiple-inheritance>", "OwnerUserId": "1235183", "AnswerCount": "3"}, "31519337": {"ParentId": "31518581", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From [class.dtor]:</p>\n<blockquote>\n<p id=\"so_31518581_31519337_0\">Bases and\n  members are destroyed in the reverse order of the completion of their constructor (see 12.6.2).</p>\n</blockquote>\n<p>The constructor ordering, from [class.base.init]:</p>\n<blockquote>\n<p id=\"so_31518581_31519337_1\">In a non-delegating constructor, initialization proceeds in the following order:<br>\n  \u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized [ ... ]<br>\n  \u2014 Then, direct base classes are initialized in declaration order as they appear in the <em>base-specifier-list</em>\n  (regardless of the order of the <em>mem-initializers</em>).</br></br></p>\n</blockquote>\n<p>For your example:</p>\n<pre><code>struct AB : public B, public A\n</code></pre>\n<p>The construction order is <code>B</code> then <code>A</code> then <code>AB</code>. So the destruction order is <code>AB</code> then <code>A</code> then<code>B</code>. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-07-20T14:46:59.020", "Id": "31519337", "Score": "14", "CreationDate": "2015-07-20T14:37:58.427", "LastActivityDate": "2015-07-20T14:46:59.020"}, "bq_ids": {"n4140": {"so_31518581_31519337_0": {"section_id": 404, "quality": 0.9, "length": 9}, "so_31518581_31518644_0": {"section_id": 6983, "quality": 0.7333333333333333, "length": 11}, "so_31518581_31519337_1": {"section_id": 438, "quality": 1.0, "length": 28}}, "n3337": {"so_31518581_31519337_0": {"section_id": 395, "quality": 0.9, "length": 9}, "so_31518581_31518644_0": {"section_id": 6729, "quality": 0.7333333333333333, "length": 11}, "so_31518581_31519337_1": {"section_id": 429, "quality": 1.0, "length": 28}}, "n4659": {"so_31518581_31519337_0": {"section_id": 422, "quality": 0.9, "length": 9}, "so_31518581_31518644_0": {"section_id": 8481, "quality": 0.7333333333333333, "length": 11}, "so_31518581_31519337_1": {"section_id": 458, "quality": 1.0, "length": 28}}}, "31518644": {"ParentId": "31518581", "CommentCount": "2", "Body": "<p>The C++11 Standard makes this clear (S10.1), for multiple inheritance</p>\n<blockquote>\n<p id=\"so_31518581_31518644_0\">The order of derivation is not significant except as specified by the\n  semantics of initialization by constructor (12.6.2), cleanup (12.4),\n  and storage layout (9.2, 11.1).</p>\n</blockquote>\n<p>But you can guarantee that the destruction order is the reverse of the construction.</p>\n", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "31518644", "Score": "6", "CreationDate": "2015-07-20T14:06:20.487", "LastActivityDate": "2015-07-20T14:06:20.487"}});