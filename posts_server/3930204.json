post_cb({"3930224": {"Id": "3930224", "PostTypeId": "2", "Body": "<p>Make <code>local</code> static and then you should be able to access it</p>\n", "LastActivityDate": "2010-10-14T05:04:52.413", "CommentCount": "0", "CreationDate": "2010-10-14T05:04:52.413", "ParentId": "3930204", "Score": "0", "OwnerUserId": "409141"}, "bq_ids": {"n4140": {"so_3930204_3930239_0": {"length": 36, "quality": 0.75, "section_id": 5929}}, "n3337": {"so_3930204_3930239_0": {"length": 36, "quality": 0.75, "section_id": 5701}}, "n4659": {"so_3930204_3930239_0": {"length": 35, "quality": 0.7291666666666666, "section_id": 7414}}}, "3930218": {"Id": "3930218", "PostTypeId": "2", "Body": "<p>Inside a local class you cannot use/access auto variables from the enclosing scope. You can use only static variables, extern variables, types, enums and functions from the enclosing scope.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-10-14T05:09:08.267", "Score": "1", "CreationDate": "2010-10-14T05:03:47.500", "ParentId": "3930204", "CommentCount": "0", "OwnerUserId": "165520", "LastEditDate": "2010-10-14T05:09:08.267"}, "3930250": {"Id": "3930250", "PostTypeId": "2", "Body": "<p>Probably because you can declare object that lives out of scope of the function.</p>\n<pre><code>foobar() called // local variable created;\nAccess* a = new Access(); // save to external variable through interface\nfoobar() finished // local variable destroyed\n\n...\n\n\nsavedA-&gt;foo(); // what local variable should it modify?\n</code></pre>\n", "LastActivityDate": "2010-10-14T05:11:04.887", "CommentCount": "0", "CreationDate": "2010-10-14T05:11:04.887", "ParentId": "3930204", "Score": "0", "OwnerUserId": "283975"}, "3930239": {"Id": "3930239", "PostTypeId": "2", "Body": "<p>From standard docs <em>Sec 9.8.1</em>,</p>\n<blockquote>\n<p id=\"so_3930204_3930239_0\">A class can be declared within a function definition; such a class is called a local class. The name of a local class is local\n  to its enclosing scope. The local class is in the scope of the enclosing scope, and has the same access to names outside\n  the function as does the enclosing function. Declarations in a local class <strong>can use only type names, static variables,\n  extern variables and functions, and enumerators from the enclosing scope.</strong></p>\n</blockquote>\n<p>An example from the standard docs itself,</p>\n<pre><code>int x;\nvoid f()\n{\nstatic int s ;\nint x;\nextern int g();\nstruct local {\nint g() { return x; } // error: x is auto\nint h() { return s; } // OK\nint k() { return ::x; } // OK\nint l() { return g(); } // OK\n};\n// ...\n}\n</code></pre>\n<p>Hence accessing an auto variable inside a local class is not possible. Either make your local value as <code>static</code> or a global one, whichever looks <em>appropriate</em> for your design.</p>\n", "LastEditorUserId": "249490", "LastActivityDate": "2010-10-14T05:19:20.753", "Score": "1", "CreationDate": "2010-10-14T05:07:51.890", "ParentId": "3930204", "CommentCount": "0", "OwnerUserId": "249490", "LastEditDate": "2010-10-14T05:19:20.753"}, "3930204": {"ViewCount": "437", "Body": "<pre><code>void foobar(){\n    int local;\n    static int value;\n     class access{\n           void foo(){\n                local = 5; /* &lt;-- Error here */\n                value = 10;\n           }\n     }bar;    \n}   \nvoid main(){\n  foobar();\n}\n</code></pre>\n<p>Why doesn't access to <code>local</code> inside <code>foo()</code> compile? OTOH I can easily access and modify the static variable <code>value</code>.</p>\n", "Title": "Access problem in local class", "CreationDate": "2010-10-14T05:00:51.440", "LastActivityDate": "2010-10-14T05:19:20.753", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "Id": "3930204", "Score": "5", "OwnerUserId": "475342", "Tags": "<c++><scope><local-class>", "AnswerCount": "4"}});