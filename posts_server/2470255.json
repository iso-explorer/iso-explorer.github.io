post_cb({"bq_ids": {"n4140": {"so_2470255_2470834_0": {"length": 9, "quality": 0.9, "section_id": 6005}}, "n3337": {"so_2470255_2470834_0": {"length": 9, "quality": 0.9, "section_id": 5773}}, "n4659": {"so_2470255_2470834_0": {"length": 9, "quality": 0.9, "section_id": 7504}}}, "2470834": {"Id": "2470834", "PostTypeId": "2", "Body": "<p>Since you are asking for it in the comments. What you are probably looking for can be found in the Standard (5.2.5  Class member access):</p>\n<blockquote>\n<p id=\"so_2470255_2470834_0\">3   If E1 has the type \u201cpointer to class\n  X,\u201d then the expression E1-&gt;E2 is\n  converted to the equivalent form\n  (*(E1)).E2;</p>\n</blockquote>\n<p>The compiler will produce the exact same instructions and it will be just as efficient. Your machine will not know if you wrote \"-&gt;\" or \"*.\". </p>\n", "LastActivityDate": "2010-03-18T15:05:38.780", "CommentCount": "1", "CreationDate": "2010-03-18T15:05:38.780", "ParentId": "2470255", "Score": "12", "OwnerUserId": "74660"}, "2470269": {"Id": "2470269", "PostTypeId": "2", "Body": "<p>[Edit]</p>\n<p>If the variable is defined as T* (where T is some type) then both -&gt; and * are the same (unless ptr is null).</p>\n<p>If the variable is an instance of a class (by value or by reference) then -&gt; and * should behave the same (per best practice) but this requires the class to overload them the same way.</p>\n", "LastEditorUserId": "27198", "LastActivityDate": "2010-03-18T15:37:39.820", "Score": "15", "CreationDate": "2010-03-18T13:54:09.013", "ParentId": "2470255", "CommentCount": "15", "OwnerUserId": "27198", "LastEditDate": "2010-03-18T15:37:39.820"}, "2470255": {"ViewCount": "1271", "Body": "<p>Is there any difference in performance - or otherwise - between:</p>\n<pre><code>ptr-&gt;a();\n</code></pre>\n<p>and</p>\n<pre><code>(*ptr).a(); \n</code></pre>\n<p>?</p>\n", "AcceptedAnswerId": "2470834", "Title": "C++ - Difference between (*). and ->?", "CreationDate": "2010-03-18T13:52:27.313", "Id": "2470255", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-03-18T15:49:34.843", "Score": "13", "OwnerUserId": "292442", "Tags": "<c++><pointers><dereference>", "AnswerCount": "3"}, "2470586": {"Id": "2470586", "PostTypeId": "2", "Body": "<p>The <code>-&gt;</code> operator is special in that in most cases it \"drills-down\" recursively until the result of the expression is no longer something that has an overloaded -&gt; operator defined for it. The <code>(*subxpression).x</code> expression only does one dereference on subexpression, so if the result of <code>(*subexpression)</code> is another pointer, then this wouldn't compile (you would need to write <code>(*(*subexpression)).x</code>. See the following code for a better illustration:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass\n{\npublic:\n    MyClass() : x(0) {}\n    int x;\n};\n\nclass MyPtr\n{\nprivate:\n    MyClass* mObj;\npublic:\n    MyPtr(MyClass* obj) : mObj(obj) {}\n    MyClass* operator-&gt;() \n    {\n        return mObj;\n    }\n};\n\nint main() \n{\n    MyClass obj;\n    MyClass* objCPtr = &amp;obj;\n    MyClass** objCHandle = &amp;objCPtr;\n    MyPtr ptr(&amp;obj);\n    cout &lt;&lt; ptr-&gt;x &lt;&lt; endl;\n    cout &lt;&lt; (*(*objCHandle)).x &lt;&lt; endl;\n}\n</code></pre>\n<p>Note however, that this would not compile:</p>\n<pre><code>cout &lt;&lt; objCHandle-&gt;x &lt;&lt; endl;\n</code></pre>\n<p>Because the drill down behavior of -&gt; only occurs when the left hand side of the expression is a class, struct, union, or generic type. In this case, objCHandle is a MyClass**, so it doesn't qualify.</p>\n", "LastEditorUserId": "24762", "LastActivityDate": "2010-03-18T15:49:34.843", "Score": "7", "CreationDate": "2010-03-18T14:32:48.717", "ParentId": "2470255", "CommentCount": "2", "OwnerUserId": "278966", "LastEditDate": "2010-03-18T15:49:34.843"}});