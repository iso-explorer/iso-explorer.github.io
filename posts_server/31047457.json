post_cb({"31047457": {"CommentCount": "0", "CreationDate": "2015-06-25T10:13:47.273", "PostTypeId": "1", "AcceptedAnswerId": "31047542", "LastEditorUserId": "2756719", "LastActivityDate": "2015-06-25T10:30:52.647", "LastEditDate": "2015-06-25T10:19:07.977", "ViewCount": "632", "FavoriteCount": "1", "Title": "std::vector on forward declared type", "Id": "31047457", "Score": "9", "Body": "<p>The following code seems to work correctly on Clang++ and GCC:</p>\n<pre><code>#include &lt;vector&gt;\n\nclass A {\nprivate:\n    int i;\n    std::vector&lt;A&gt; children;\npublic:\n    A&amp; add();\n};\n\nA&amp; A::add() { children.emplace_back(); return children.back(); }\n\nint main() {\n    A a;\n    A&amp; a2 = a.add();\n}\n</code></pre>\n<p>When the data member <code>std::vector&lt;A&gt;</code> is declared, <code>A</code> is still an incomplete type. Same when using <code>std::vector&lt;B&gt;</code> and <code>B</code> was only forward declared with <code>class B;</code>.\nIt should work with <code>std::vector</code> since it only contains a pointer-to-<code>A</code>.</p>\n<p>Is this guaranteed to work, or undefined behavior?</p>\n", "Tags": "<c++><c++11><stl><forward-declaration><c++1z>", "OwnerUserId": "4108376", "AnswerCount": "2"}, "31047542": {"ParentId": "31047457", "CommentCount": "0", "Body": "<p>This is undefined behavior in C++14 and earlier; well-defined in C++17 (if it's 17).</p>\n<p>[res.on.functions]/p2, bullet 2.7:</p>\n<blockquote>\n<p id=\"so_31047457_31047542_0\">In particular, the effects are undefined in the following cases:</p>\n<ul>\n<li>[...]</li>\n<li>if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for\n  that component.</li>\n</ul>\n</blockquote>\n<p>In C++14 and earlier, <code>std::vector</code> does not \"specifically allow\" this. So the behavior is undefined.</p>\n<p>For C++17, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4510.html\">N4510</a>, adopted at the committee's May 2015 meeting, relaxes this rule for <code>vector</code>, <code>list</code>, and <code>forward_list</code>.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "31047542", "Score": "13", "CreationDate": "2015-06-25T10:18:16.537", "LastActivityDate": "2015-06-25T10:18:16.537"}, "bq_ids": {"n4140": {"so_31047457_31047542_0": {"section_id": 6324, "quality": 1.0, "length": 5}}, "n3337": {"so_31047457_31047542_0": {"section_id": 6081, "quality": 1.0, "length": 5}}, "n4659": {"so_31047457_31047542_0": {"section_id": 7834, "quality": 1.0, "length": 5}}}, "31047645": {"ParentId": "31047457", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>According to section \"Template Parameters\" from <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow\">cppreference.com</a> this might work (depending on the actual usage of the container) in C++17 standard, but not in C++14 and earlier. Probably you are using versions of the compilers that implement this part of C++17 standard.</p>\n", "OwnerUserId": "2882509", "LastEditorUserId": "2882509", "LastEditDate": "2015-06-25T10:30:52.647", "Id": "31047645", "Score": "1", "CreationDate": "2015-06-25T10:23:13.543", "LastActivityDate": "2015-06-25T10:30:52.647"}});