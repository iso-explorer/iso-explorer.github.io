post_cb({"26195424": {"ParentId": "26195283", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The name of a class is \"injected\" into the class, this is called the <em>injected-class-name</em>. It is similar to:</p>\n<pre><code>class my_class_name\n{\npublic:\n    typedef ::my_class_name my_class_name;\n};\n</code></pre>\n<p>(But this of course doesn't compile, a class may not have a manually declared member of the same name as the class.)</p>\n<p>Class templates also have an injected-class-name, and it can be used to refer to the class template itself, or the current specialization (including the current template arguments), depending on the context:</p>\n<p>[temp.local]/1</p>\n<blockquote>\n<p id=\"so_26195283_26195424_0\">Like normal (non-template) classes, class templates have an <strong>injected-class-name</strong>. The injected-class-name can be used as a <em>template-name</em> or a <em>type-name</em>. When it is used with a <em>template-argument-list</em>, as a <em>template-argument</em> for a template <em>template-parameter</em>, or as the final identifier in the <em>elaborated-type-specifier</em> of a friend class template declaration, it refers to the class template itself. <strong>Otherwise, it is equivalent\n  to the <em>template-name</em> followed by the <em>template-parameters</em> of the class template enclosed in <code>&lt;&gt;</code></strong>.</p>\n</blockquote>\n", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2014-10-04T17:47:58.707", "Id": "26195424", "Score": "4", "CreationDate": "2014-10-04T17:42:57.593", "LastActivityDate": "2014-10-04T17:47:58.707"}, "26195283": {"CommentCount": "4", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2014-10-04T17:27:32.250", "LastActivityDate": "2014-10-04T17:47:58.707", "Title": "Using template name without parameters", "AcceptedAnswerId": "26195424", "LastEditDate": "2014-10-04T17:40:47.650", "Id": "26195283", "Score": "4", "Body": "<p>I have this code:</p>\n<pre><code>template &lt;typename A&gt;\nclass templatedclass {\n    public:\n    using type = templatedclass;\n};\n\ntemplate &lt;typename A&gt;\nclass sinkstuff {\n    public:\n    void print() {\n        cout &lt;&lt; \"generic sinkstuff\";\n    }\n};\ntemplate &lt;typename A&gt;\nclass sinkstuff &lt;templatedclass&lt;A&gt;&gt; {\n    public:\n    void print() {\n        cout &lt;&lt; \"partiallyspecialized sinkstuff\";\n    }\n};\n\ntemplate &lt;typename NtoA&gt;\nstruct pass_parameter : sinkstuff&lt;typename templatedclass&lt;NtoA&gt;::type&gt; {}; \n\n\nint main() {\n  pass_parameter&lt;int&gt; obj;\n  obj.print();\n  cout &lt;&lt; is_same&lt;templatedclass&lt;int&gt;, typename templatedclass&lt;int&gt;::type&gt;::value; // 1, yes\n}\n</code></pre>\n<p>I always thought the \"using directive\" was a typedef on steroids. How come I can use \"<code>templatedclass&lt;int&gt;::type</code>\" without specifying the parameter again, i.e. \"<code>templatedclass&lt;int&gt;::type&lt;int&gt;</code>\" ?</p>\n<p>Isn't \"using type = templatedclass\" just a textual substitution? Am I missing something?</p>\n", "Tags": "<c++>", "OwnerUserId": "3834459", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26195283_26195424_0": {"section_id": 179, "quality": 0.972972972972973, "length": 36}}, "n3337": {"so_26195283_26195424_0": {"section_id": 173, "quality": 0.972972972972973, "length": 36}}, "n4659": {"so_26195283_26195424_0": {"section_id": 184, "quality": 0.972972972972973, "length": 36}}}, "26195421": {"ParentId": "26195283", "CommentCount": "0", "Body": "<p>This doesn't have anything to do with the <code>using</code> directive. Within the definition of <code>A&lt;T&gt;</code> (and the <code>using</code> directive is in that scope), saying <code>A</code> is the same as saying <code>A&lt;T&gt;</code>.</p>\n<p>It's the same reason you may write:</p>\n<pre><code>template &lt;typename T&gt;\nstruct A\n{\n   void foo(const A&amp;);\n};\n</code></pre>\n<p>instead of</p>\n<pre><code>template &lt;typename T&gt;\nstruct A\n{\n   void foo(const A&lt;T&gt;&amp;);\n};\n</code></pre>\n<p>For more information, search for \"<em>injected-class-name</em>\".</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "26195421", "Score": "2", "CreationDate": "2014-10-04T17:42:26.097", "LastActivityDate": "2014-10-04T17:42:26.097"}});