post_cb({"21707185": {"Id": "21707185", "PostTypeId": "2", "Body": "<p>C++ Standard paragraph 3.9.1.8 says:</p>\n<blockquote>\n<p id=\"so_21706877_21707185_0\">There are three floating point types: float, double, and long double. The type double provides at least as much precision as float, and the type long double provides at least as much precision as double. The set of values of the type float is a subset of the set of values of the type double; the set of values of the type double is a subset of the set of values of the type long double. The value representation of floating-point types is implementation-defined. Integral and floating types are collectively called arithmetic types. Specializations of the standard template std::numeric_limits (18.3) shall specify the maximum and minimum values of each arithmetic type for an implementation.</p>\n</blockquote>\n<p>Which pretty much only says that the long double type should be... longer than the float type.</p>\n<p>In practice, long double are usually 80- to 128-bit wide, as explained here: <a href=\"http://en.cppreference.com/w/cpp/language/types\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/types</a><br>\nThis makes casting (I assume reinterpret_cast) to a uint64_t unsafe, as the some bits from the long double will probably not fit.</br></p>\n", "LastActivityDate": "2014-02-11T16:16:38.207", "CommentCount": "0", "CreationDate": "2014-02-11T16:16:38.207", "ParentId": "21706877", "Score": "1", "OwnerUserId": "2715219"}, "21707092": {"Id": "21707092", "PostTypeId": "2", "Body": "<p>The <code>std::hash</code> call operator returns a value of type <code>size_t</code> that represents the hash value of the parameter.</p>\n<p>Thus, the assumption of the question, about <code>long double</code> return type, seems to be incorrect.</p>\n", "LastActivityDate": "2014-02-11T16:13:03.220", "CommentCount": "1", "CreationDate": "2014-02-11T16:13:03.220", "ParentId": "21706877", "Score": "3", "OwnerUserId": "464581"}, "bq_ids": {"n4140": {"so_21706877_21707185_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 7217}}, "n3337": {"so_21706877_21707185_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 6961}}, "n4659": {"so_21706877_21707185_0": {"length": 63, "quality": 0.9, "section_id": 8726}}}, "21706877": {"ViewCount": "2069", "Body": "<p>I'm using <code>std::hash&lt;std::string&gt;()</code> to create a hash code for a string in C++. The function returns a <code>long double</code> but I need a <code>uint64_t</code> for inherited reasons. </p>\n<p>Is such a cast safe?</p>\n", "AcceptedAnswerId": "21707185", "Title": "Safe to cast long double to uint64_t", "CreationDate": "2014-02-11T16:04:39.360", "Id": "21706877", "CommentCount": "5", "LastEditDate": "2014-02-11T16:05:57.503", "PostTypeId": "1", "LastEditorUserId": "246342", "LastActivityDate": "2014-02-11T16:16:38.207", "Score": "-1", "OwnerUserId": "1068167", "Tags": "<c++><casting>", "AnswerCount": "2"}});