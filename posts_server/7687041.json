post_cb({"bq_ids": {"n4140": {"so_7687041_7688154_0": {"length": 15, "quality": 1.0, "section_id": 7002}}, "n3337": {"so_7687041_7688154_0": {"length": 15, "quality": 1.0, "section_id": 6748}}, "n4659": {"so_7687041_7688154_0": {"length": 15, "quality": 1.0, "section_id": 8499}}}, "7688789": {"Id": "7688789", "PostTypeId": "2", "Body": "<p>In MSVC, if your code is not compiled with RTTI enabled, a <code>__non_rtti_object</code> exception will be thrown, if the cast cannot be performed without a run-time check.</p>\n", "LastEditorUserId": "2642204", "LastActivityDate": "2015-02-26T13:35:28.880", "Score": "8", "CreationDate": "2011-10-07T14:38:08.287", "ParentId": "7687041", "CommentCount": "0", "OwnerUserId": "241536", "LastEditDate": "2015-02-26T13:35:28.880"}, "7687041": {"ViewCount": "11354", "Body": "<p>I'm curious to know what happens when compiling code with a dynamic cast whith RTTI disabled \n(either with <code>-fno-rtti</code>on GCC or with <code>/GR-</code> on visual studio). Does the compiler \"falls back\" to <code>static_cast</code> ? Since (at least on VS) it does only issue a warning, what will the compiled code do ?</p>\n<p>More specifically, what bad things could happen if I compile without RTTI a code where I'm sure that there are no error possible with dynamic_cast (i.e. where <code>dynamic_cast</code> could be safely replaced by a <code>static_cast</code>) like this one :</p>\n<pre><code>class A{ /*...*/ } ;\nclass B : public A {\n    int foo() { return 42 ;}\n} ;\n//...\nA * myA = new B() ;\nint bar = (dynamic_cast&lt;B*&gt;(myA))-&gt;foo() ;\n</code></pre>\n", "AcceptedAnswerId": "7687156", "Title": "dynamic_cast with RTTI disabled", "CreationDate": "2011-10-07T12:11:37.137", "Id": "7687041", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-02-26T13:35:28.880", "Score": "14", "OwnerUserId": "746547", "Tags": "<c++><rtti><dynamic-cast>", "AnswerCount": "3"}, "7687156": {"Id": "7687156", "PostTypeId": "2", "Body": "<p>The easiest way to find out is to try it.</p>\n<p>What you will find is that <em>some</em> of your dynamic casts will be flagged as illegal. Some won't. For example, the conversion is known at compile time when you use dynamic cast to upcast to an unambiguous base class.</p>\n<p><strong>Addendum</strong><br>\nRe \"<em>Since (at least on VS) it does only issue a warning</em> ...\"\nIgnore warnings at your peril. The best thing to do is to ensure that your code compiles without warnings, with warning levels set very high (and possibly converted to errors). Second best is to look at each and every warning you get and ensure that nothing untoward happens. In this case, something untoward will happen. You really should not care how that untoward event is implemented. What you should care about is getting rid of it.</br></p>\n", "LastEditorUserId": "774499", "LastActivityDate": "2011-10-07T12:26:46.473", "Score": "5", "CreationDate": "2011-10-07T12:21:43.663", "ParentId": "7687041", "CommentCount": "2", "OwnerUserId": "774499", "LastEditDate": "2011-10-07T12:26:46.473"}, "7688154": {"Id": "7688154", "PostTypeId": "2", "Body": "<p>Reading the standard, in 5.2.7/6 we find that unless the target is an unambiguous base of the source, source must be a polymorphic type. Then in 10.3/1 </p>\n<blockquote>\n<p id=\"so_7687041_7688154_0\">Virtual functions support dynamic binding and objectoriented\n  programming. A class that declares or inherits a virtual function is\n  called a polymorphic class.</p>\n</blockquote>\n<p>In other words the standard doesn't seem to say anything about your question. In this case, the standard doesn't allow for a compiler to turn off RTTI so for each compiler you need to check its documentation to see what would happen. Based on this reading, I think this is a compiler question, not a C++ language question as the tag indicates.</p>\n<p>Alternately you can avoid the problem completely by just using <code>static_cast</code> when you know it's sufficient.</p>\n", "LastActivityDate": "2011-10-07T13:46:39.063", "CommentCount": "0", "CreationDate": "2011-10-07T13:46:39.063", "ParentId": "7687041", "Score": "9", "OwnerUserId": "251738"}});