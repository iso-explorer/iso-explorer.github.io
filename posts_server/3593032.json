post_cb({"3593032": {"CommentCount": "1", "AcceptedAnswerId": "3593047", "PostTypeId": "1", "LastEditorUserId": "42706", "CreationDate": "2010-08-29T00:18:35.460", "LastActivityDate": "2010-08-29T00:49:01.427", "LastEditDate": "2010-08-29T00:27:53.567", "ViewCount": "2238", "FavoriteCount": "1", "Title": "Calling friend function defined in struct requires forward declaration?", "Id": "3593032", "Score": "4", "Body": "<p>While reading Karlsson's <em>Beyond the C++ Standard</em> the author defined the friend function <strong>intrusive_ptr_add_ref</strong> in the body of <strong>class reference_counted</strong> (see pg 36).  That function is called automatically using Argument Dependent Lookup at the proper time.</p>\n<p>Never having seen friend functions defined in the body of a class, I played around and discovered that gcc 4.4.3 requires a forward declaration if not using ADL lookup.  In fact, there seems to be no way to reference <strong>adl_no</strong> without that forward declaration.  Is this part of the C++ standard or is it an artifact of gcc? (I don't have Windows box so cannot try VC).</p>\n<pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n\n\nnamespace {\n    void adl_no();        // Remove this and it won't compile with gcc\n\n    struct Q {\n        friend void adl_yes(const Q&amp;) {\n            std::cout &lt;&lt; \"adl_yes\" &lt;&lt; std::endl;\n        }\n\n        friend void adl_no() {\n            std::cout &lt;&lt; \"adl_NO\" &lt;&lt; std::endl;\n        }\n    };\n}\n\n\nint main(int argc, char** argv)\n{\n    adl_yes(Q());\n    adl_no();\n\n    return EXIT_SUCCESS;\n}\n</code></pre>\n", "Tags": "<c++><friend>", "OwnerUserId": "42706", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_3593032_3593047_0": {"section_id": 5485, "quality": 0.8085106382978723, "length": 38}}, "n3337": {"so_3593032_3593047_0": {"section_id": 5271, "quality": 0.8723404255319149, "length": 41}}, "n4659": {"so_3593032_3593047_0": {"section_id": 6920, "quality": 0.8085106382978723, "length": 38}}}, "3593047": {"ParentId": "3593032", "LastEditDate": "2010-08-29T00:49:01.427", "CommentCount": "2", "CreationDate": "2010-08-29T00:28:31.680", "OwnerUserId": "19563", "LastEditorUserId": "19563", "PostTypeId": "2", "Id": "3593047", "Score": "5", "Body": "<p>Yes, this behaviour is standard. The relevant part of the standard is 7.3.1.2 [namespace.memdef] para 3:</p>\n<blockquote>\n<p id=\"so_3593032_3593047_0\">If a <code>friend</code> declaration in a non-local class first declares a class or function the friend class or function is a member of the innermost enclosing namespace. The name of the friend is not found by simple name lookup until a matching declaration is provided in that namespace scope [...]. If a friend function is called, its name may be found by the name lookup that considers function from namespaces and classes associated with the types of the function arguments (3.4.2) [i.e. ADL].</p>\n</blockquote>\n", "LastActivityDate": "2010-08-29T00:49:01.427"}});