post_cb({"bq_ids": {"n4140": {"so_19808749_19808808_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}}, "n3337": {"so_19808749_19808808_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}}, "n4659": {"so_19808749_19808808_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}}}, "32851509": {"Id": "32851509", "PostTypeId": "2", "Body": "<p>Better will be</p>\n<pre><code>void doStuff( std::string const &amp; s1, std::string const &amp; s2 = std::string());\n</code></pre>\n<p>To avoid extra temporary <code>const char *</code>. (Your variant has 2 temporaries: a <code>const char *</code> and empty <code>std::string</code>).</p>\n<p>Or, using user-defined literals (C++14):</p>\n<pre><code>void doStuff( std::string const &amp; s1, std::string const &amp; s2 = \"\"s);\n</code></pre>\n", "LastActivityDate": "2015-09-29T18:43:22.027", "CommentCount": "0", "CreationDate": "2015-09-29T18:43:22.027", "ParentId": "19808749", "Score": "0", "OwnerUserId": "1555823"}, "19808808": {"Id": "19808808", "PostTypeId": "2", "Body": "<p>Yes this is legal. <code>const</code> will ensure temporary be lasting till function <code>doStuff</code> finishes.</p>\n<p>\u00a7 12.2.5</p>\n<blockquote>\n<p id=\"so_19808749_19808808_0\">A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</p>\n</blockquote>\n", "LastEditorUserId": "951757", "LastActivityDate": "2013-11-06T10:02:11.307", "Score": "8", "CreationDate": "2013-11-06T09:53:20.913", "ParentId": "19808749", "CommentCount": "0", "OwnerUserId": "951757", "LastEditDate": "2013-11-06T10:02:11.307"}, "19809000": {"Id": "19809000", "PostTypeId": "2", "Body": "<p>That to understand the semantic it is better to split the original statemenet .</p>\n<pre><code>void doStuff( std::string const &amp; s1, std::string const &amp; s2=\"\");\n</code></pre>\n<p>into two statements</p>\n<pre><code>void doStuff( std::string const &amp; s1, std::string const &amp; s2);\ndoStuff( SomeString, \"\" );\n</code></pre>\n<p>In the call of the function the second argument is implicitly converted to an object of type std::string:</p>\n<pre><code>s2 = std::string( \"\" );\n</code></pre>\n<p>So in fact in the body of the function you will have</p>\n<p>std::string const &amp;s2 = std::string( \"\" );</p>\n<p>That is constant reference s2 will refer temporary object std::string( \"\" ).</p>\n", "LastActivityDate": "2013-11-06T10:00:40.413", "CommentCount": "1", "CreationDate": "2013-11-06T10:00:40.413", "ParentId": "19808749", "Score": "0", "OwnerUserId": "2877241"}, "19808749": {"ViewCount": "1556", "Body": "<pre><code>void doStuff( std::string const &amp; s1, std::string const &amp; s2=\"\");\n</code></pre>\n<p>I was wondering if this code is legal in C++, for the s2 string.\nI want to have a default argument, but passing a reference and having an empty string as default. Will a temporary be created, and the reference will point to that temporary, or is it illegal C++?</p>\n", "AcceptedAnswerId": "19808808", "Title": "Can I pass a default value to a reference for a std::string ?", "CreationDate": "2013-11-06T09:50:39.370", "Id": "19808749", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-09-29T18:43:22.027", "Score": "4", "OwnerUserId": "78374", "Tags": "<c++>", "AnswerCount": "3"}});