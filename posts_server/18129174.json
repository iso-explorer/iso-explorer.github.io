post_cb({"18129308": {"Id": "18129308", "PostTypeId": "2", "Body": "<p>The <code>!</code> operator is a logical <code>not</code> and this is how you should read it: <code>while not valid</code>. You could have also written that as:</p>\n<pre><code>while(valid == false)\n</code></pre>\n<p>or</p>\n<pre><code>while(valid != true)\n</code></pre>\n<p>Note that here, again, <code>!=</code> is equivalent to <code>not equal</code>.</p>\n", "LastEditorUserId": "1056003", "LastActivityDate": "2013-08-08T15:03:24.320", "Score": "2", "CreationDate": "2013-08-08T14:56:27.883", "ParentId": "18129174", "CommentCount": "3", "OwnerUserId": "1056003", "LastEditDate": "2013-08-08T15:03:24.320"}, "18129485": {"Id": "18129485", "PostTypeId": "2", "Body": "<p>nijansen forgot to add the most elegant one</p>\n<pre><code>while(!valid)\n</code></pre>\n<p>which is the same as the 2 others</p>\n", "LastActivityDate": "2013-08-08T15:04:07.390", "CommentCount": "3", "CreationDate": "2013-08-08T15:04:07.390", "ParentId": "18129174", "Score": "1", "OwnerUserId": "1693857"}, "bq_ids": {"n4140": {"so_18129174_18129401_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3899}}, "n3337": {"so_18129174_18129401_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3759}}, "n4659": {"so_18129174_18129401_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 4785}}}, "18129401": {"Id": "18129401", "PostTypeId": "2", "Body": "<p>A while loop has a condition and a body, the body is executed as long as the condition evaluates to true.</p>\n<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_18129174_18129401_0\">6.5.1 The while statement</p>\n<p id=\"so_18129174_18129401_1\">In the while statement the substatement is executed repeatedly until the value of the condition (6.4) becomes\n  false. The test takes place before each execution of the substatement.</p>\n</blockquote>\n<p>A while loop can have one of the following forms</p>\n<p><code>while ( condition ) statement</code></p>\n<pre><code>while ( condition )\n{\n  statement(s)\n}\n</code></pre>\n", "LastActivityDate": "2013-08-08T15:00:44.710", "CommentCount": "0", "CreationDate": "2013-08-08T15:00:44.710", "ParentId": "18129174", "Score": "2", "OwnerUserId": "1345339"}, "18129274": {"Id": "18129274", "PostTypeId": "2", "Body": "<p>You want to run the loop \"<strong>while</strong> there is <strong>not</strong> a <strong>valid</strong> input\". Remove the non-bold words, and translate to C++. </p>\n<p>Of course, the second case is not working, because nothing changes <code>validInput</code> inside the loop, so it stays \"invalid\", and the loop continues forever (And if you want to set something to <code>false</code> then  <code>bool validInput = !true;</code> is more convoluted than <code>bool validInput = false;</code> - the compiler will do the same thing, but someone reading the code will have to think to see what it does - it is a good thing to think when reading code, but it's not a good thing to write code that is more complicated than necessary...).</p>\n", "LastEditorUserId": "1919155", "LastActivityDate": "2013-08-08T15:00:36.837", "Score": "2", "CreationDate": "2013-08-08T14:54:46.997", "ParentId": "18129174", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2013-08-08T15:00:36.837"}, "18129525": {"Id": "18129525", "PostTypeId": "2", "Body": "<p>Loops (and ifs) are controled by an expression of type <code>bool</code>.\nIn <code>while ( !valid )</code>, the expression is <code>!valid</code>, the operator\nnot applied to the value of the variable <code>valid</code>.\n<code>while\u00a0(\u00a0!valid\u00a0)</code> means (literally) while the expression\n<code>!valid</code> (which means \"not valid\") is true.</p>\n<p>For the rest, the code you're copying is pretty bad.  I wouldn't\nuse it as an example if I were you. </p>\n<p>As for your own code:</p>\n<ul>\n<li><p><code>_tmain</code> is very particular to Microsoft.  You don't want to\nuse it.  If your writing a console application, just use <code>main</code>.\n(Same thing holds for <code>_TCHAR</code>, rather than <code>char</code>.)</p></li>\n<li><p>Neither <code>_tmain</code> nor <code>main</code> can return a <code>float</code>.  The return\ntype of <code>main</code> should always be <code>int</code>.  I'm less familiar with\n<code>_tmain</code>, but it's either <code>int</code> or <code>void</code>.  (Probably <code>int</code>, if\nyou're in a console mode program.)</p></li>\n<li><p><code>!true</code> is <code>false</code>.  Always.  (Programming is different than\nthe real world.  There are no maybes.)  Why be more\ncomplicated than necessary?</p></li>\n<li><p>There's no need for the flag variable at all.  You\ncan just write:</p>\n<p>cin &gt;&gt; operatorSelection;\nwhile ( !cin || operatorSelection &gt; 4 || operatorSelection &lt; 1 ) {\n    //  ...\n}</p></li>\n<li><p>In case of error, you currently only ignore a single\ncharacter.  You probably want to ignore up to and including the\nend of line.\n(<code>std::cin.ignore(\u00a0std::numeric_limits&lt;std::streamsize&gt;::max()\u00a0);</code>.</p></li>\n<li><p>And the condition in your if will always be true.  (See my\nversion above.)  Where do you expect to find a number which is\nneither less than for nor greater than one?</p></li>\n</ul>\n", "LastEditorUserId": "649665", "LastActivityDate": "2013-08-08T15:10:38.137", "Score": "2", "CreationDate": "2013-08-08T15:05:35.990", "ParentId": "18129174", "CommentCount": "5", "OwnerUserId": "649665", "LastEditDate": "2013-08-08T15:10:38.137"}, "18129174": {"ViewCount": "427", "Body": "<p>I'm a beginner programmer in C++ (currently), and I've got a conceptual question.</p>\n<p>I'm trying to filter a <code>cin</code> input to ensure that it is a one-or-two-digit integer between 01-04, and if it isn't, to produce an error and ask for a new input. </p>\n<p>I'm also using <code>map</code> to give the user a list of options that, upon <em>valid</em> selection, routes inputs (integers) through any of several methods to produce a relevant result, but I'll ask a more specific version of this question elsewhere.</p>\n<p>I found a snippet of code at <a href=\"http://www.cplusplus.com/forum/beginner/26821/\" rel=\"nofollow\">http://www.cplusplus.com/forum/beginner/26821/</a> that is meant to validate an input. I sort of get it, except where the boolean condition is set inside the while loop. Because I don't understand it, it makes it very difficult to edit or make sure that I'm manipulating it right.</p>\n<p>Here is the example code:</p>\n<pre><code>int main()\n{\n    int num;\n    bool valid = false;\n\n    while (!valid)\n    {\n        valid = true; //Assume the cin will be an integer.\n\n        cout &lt;&lt; \"Enter an integer value: \" &lt;&lt; endl;\n        cin &gt;&gt; num;\n\n        if(cin.fail()) //cin.fail() checks to see if the value in the cin\n                    //stream is the correct type, if not it returns true,\n                    //false otherwise.\n        {\n            cin.clear(); //This corrects the stream.\n            cin.ignore(); //This skips the left over stream data.\n            cout &lt;&lt; \"Please enter an Integer only.\" &lt;&lt; endl;\n            valid = false; //The cin was not an integer so try again.\n        }\n    }\n\n    cout &lt;&lt; \"You entered: \" &lt;&lt; num &lt;&lt; endl;\n\n    system(\"PAUSE\");\n    return 0;\n</code></pre>\n<p>And here is my code (the entire thing, to give context). I don't think it's complete, I just want to make sure I'm using the boolean right.</p>\n<pre><code>float _tmain(float argc, _TCHAR* argv[])\n{\n    bool validInput = !true;\n\n    map&lt;string,int&gt; Operations;\n    Operations.insert(pair&lt;string, int&gt;(\"Addition\", 01));\n    Operations.insert(pair&lt;string, int&gt;(\"Subtraction\", 02));\n    Operations.insert(pair&lt;string, int&gt;(\"Multiplication\", 03));\n    Operations.insert(pair&lt;string, int&gt;(\"Division\", 04));\n\n    cout &lt;&lt; \"Welcome to OneOpCalc, what operation would you like to perform?\" &lt;&lt; endl;\n\n    for(map&lt;string, int&gt;::iterator ii=Operations.begin(); ii!=Operations.end(); ++ii)\n    {\n        cout &lt;&lt; (*ii).second &lt;&lt; \": \" &lt;&lt; (*ii).first &lt;&lt; endl;\n    }\n\n    while (!validInput)\n    {\n        cin &gt;&gt; operatorSelection;\n\n        if (cin.fail() || operatorSelection &lt; 4 || operatorSelection &gt; 1)\n        {\n            cout &lt;&lt; \"Error: Invalid selection. Please choose a valid number.\" &lt;&lt; endl &lt;&lt; endl;\n            cin.clear();\n            cin.ignore();\n        }\n    }\n}\n</code></pre>\n<p>Does <code>while (!valid)</code> mean \"While <code>valid</code> is <em>false</em>\"? In my head, it's saying \"While <code>valid</code> is <code>!valid</code>\", which obviously, would always be false.</p>\n<p>EDIT: Thanks for the answers guys, I'm looking through them all. One answer I keep getting goes too general; I understand that ! is NOT, and I understand the concept of flipping the bool using it. However the implicit logical implications are what confuse me. In any given statement, I am used to thinking of <code>!valid</code> as a way of flipping the <code>valid</code> value; Not testing a condition. It's the syntax of using it to test a condition that tricks me. In other words, writing <code>while(!valid)</code> reads literally to me as <code>while(NOTvalid)</code>, not <code>while(valid==false)</code>. I can't get myself to understand why in this case, <code>!valid</code> reads as a condition and not just a bit-flip.</p>\n", "AcceptedAnswerId": "18129525", "Title": "Can you explain HOW bool can control loops?", "CreationDate": "2013-08-08T14:50:51.310", "Id": "18129174", "CommentCount": "12", "LastEditDate": "2013-08-08T15:28:22.877", "PostTypeId": "1", "LastEditorUserId": "2664842", "LastActivityDate": "2013-08-08T15:28:22.877", "Score": "1", "OwnerUserId": "2664842", "Tags": "<c++><loops><while-loop><boolean><cin>", "AnswerCount": "6"}, "18129390": {"Id": "18129390", "PostTypeId": "2", "Body": "<p>In your code, inside the loop, just add:</p>\n<pre><code>else\n  validInput = true;\n</code></pre>\n<p>after the <code>if</code> closing bracket.\nYou want to get out of it once the user has typed a correct value.</p>\n", "LastActivityDate": "2013-08-08T15:00:23.070", "CommentCount": "1", "CreationDate": "2013-08-08T15:00:23.070", "ParentId": "18129174", "Score": "2", "OwnerUserId": "2090481"}});