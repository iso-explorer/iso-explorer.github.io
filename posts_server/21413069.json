post_cb({"21413116": {"Id": "21413116", "PostTypeId": "2", "Body": "<p><code>break</code> should be in the body of the for loop:</p>\n<pre><code>for( ; condition ; ) {\n    body;\n    break;\n}\n</code></pre>\n", "LastActivityDate": "2014-01-28T17:54:38.893", "CommentCount": "0", "CreationDate": "2014-01-28T17:54:38.893", "ParentId": "21413069", "Score": "1", "OwnerUserId": "1351465"}, "21413182": {"Id": "21413182", "PostTypeId": "2", "Body": "<p>The syntax of a for statement is:</p>\n<pre><code>for ( for-init-statement condition[opt] ; expression[opt] ) statement\n</code></pre>\n<p>So the update clause must be an expression, and <code>break</code> not an expression.</p>\n", "LastActivityDate": "2014-01-28T17:57:18.303", "CommentCount": "0", "CreationDate": "2014-01-28T17:57:18.303", "ParentId": "21413069", "Score": "1", "OwnerUserId": "204847"}, "21413069": {"ViewCount": "91", "Body": "<p>Shouldn't the following code work mostly like an \"if( condition )\" statement, up to the obvious misbehaviour when it's inside another loop and the \"body\" has its own break or continue statements:</p>\n<pre><code>for( ; condition ; break ) {\n    body;\n}\n</code></pre>\n<p>This was triggered by a coffee break chat on C++ syntax regarding the assumption that </p>\n<pre><code>for( init ; condition ; update ) {\n    body;\n}\n</code></pre>\n<p>is identical to</p>\n<pre><code>{\n    init;\n    while( condition ) {\n         body;\n         update;\n   }\n}\n</code></pre>\n<p>A quick experiment with g++ shows that modelling \"if(condition)\" with \"for(;condition;break)\" doesn't compile. So the question is: according to the latest standards, should g++ swallow such construction or is it correct in rejecting it? </p>\n", "AcceptedAnswerId": "21413176", "Title": "Modelling \"if\" with \"for\"", "CreationDate": "2014-01-28T17:52:20.887", "Id": "21413069", "CommentCount": "1", "LastEditDate": "2014-01-28T18:02:11.720", "PostTypeId": "1", "LastEditorUserId": "2249683", "LastActivityDate": "2014-01-28T18:04:47.887", "Score": "1", "OwnerUserId": "2540407", "Tags": "<c++><language-lawyer>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_21413069_21413176_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 3895}, "so_21413069_21413160_0": {"length": 19, "quality": 0.95, "section_id": 3910}}, "n3337": {"so_21413069_21413176_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 3755}, "so_21413069_21413160_0": {"length": 19, "quality": 0.95, "section_id": 3770}}, "n4659": {"so_21413069_21413160_0": {"length": 19, "quality": 0.95, "section_id": 4796}}}, "21413114": {"Id": "21413114", "PostTypeId": "2", "Body": "<p>It is correct in rejecting it. <code>break</code> cannot be outside the block of code which constitutes the body of the loop itself. That code is not valid C++.</p>\n", "LastActivityDate": "2014-01-28T17:54:31.273", "CommentCount": "0", "CreationDate": "2014-01-28T17:54:31.273", "ParentId": "21413069", "Score": "1", "OwnerUserId": "96780"}, "21413176": {"Id": "21413176", "PostTypeId": "2", "Body": "<p>It's correct to reject it - the for loop is in the form (see ISO C++ \u00a76.5.3):</p>\n<blockquote>\n<p id=\"so_21413069_21413176_0\"><em>for ( for-init-statement  condition <sub>opt</sub> ; expression <sub>opt</sub>) statement</em></p>\n</blockquote>\n<p>A <code>break</code> is a statement, not an expression.</p>\n<p>As mentioned, the workaround is</p>\n<pre><code>for( ; condition ; ) {\n    body;\n    break;\n}\n</code></pre>\n<p>Here's another way without using <code>break</code>:</p>\n<pre><code>bool b = false;\nfor (; condition &amp;&amp; !b++; ) { // this usage of operator++ on bool is deprecated\n   body\n}\n</code></pre>\n", "LastActivityDate": "2014-01-28T17:57:00.493", "CommentCount": "1", "CreationDate": "2014-01-28T17:57:00.493", "ParentId": "21413069", "Score": "4", "OwnerUserId": "947836"}, "21413160": {"Id": "21413160", "PostTypeId": "2", "Body": "<p>This is not valid C++, the draft C++ standard in section <code>6.6.1</code> <em>The break statement</em> says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_21413069_21413160_0\">The break statement shall <strong>occur only in an iteration-statement or a switch statement</strong> and causes termination of the smallest enclosing iteration-statement or switch statement; control passes to the statement following the terminated statement, if any.</p>\n</blockquote>\n<p>and we can see from the grammar of <em>for</em> from section <code>6.5</code> <em>Iteration statements</em> here:</p>\n<pre><code>for ( for-init-statement conditionopt; expressionopt) statement\n                                                      ^^^^^^^^^  \n</code></pre>\n<p>the <em>statement</em> is the body of the <em>for</em> loop.</p>\n<p><b>EDIT</b></p>\n<p>As dasblinkenlight corrected me, this is not strong enough for the general case. We need to observe that <em>break</em> is a statement not an expression and therefore can not be in the header of a <em>for</em> loop.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-01-28T18:04:47.887", "Score": "3", "CreationDate": "2014-01-28T17:56:11.383", "ParentId": "21413069", "CommentCount": "4", "OwnerUserId": "1708801", "LastEditDate": "2014-01-28T18:04:47.887"}});