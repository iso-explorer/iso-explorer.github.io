post_cb({"3276642": {"Id": "3276642", "PostTypeId": "2", "Body": "<p>The \"technical\" reason is due to the following:</p>\n<blockquote>\n<p id=\"so_3276235_3276642_0\">Nonstatic data members of a (non-union) class with the same access control are allocated so that later members have higher addresses within a class object. The order of allocation of non-static data members with different access control is unspeci\ufb01ed (C++0x \u00a79.2/12). </p>\n</blockquote>\n<p>So long as all the nonstatic data members have the same access control, their order is well-specified; otherwise their order is unspecified.</p>\n", "LastEditorUserId": "168225", "LastActivityDate": "2010-07-18T19:36:54.023", "Score": "3", "CreationDate": "2010-07-18T18:10:18.223", "ParentId": "3276235", "CommentCount": "4", "OwnerUserId": "151292", "LastEditDate": "2010-07-18T19:36:54.023"}, "bq_ids": {"n4140": {"so_3276235_3276642_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 5873}}, "n3337": {"so_3276235_3276642_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 5644}}, "n4659": {"so_3276235_3276642_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 7356}}}, "3276235": {"ViewCount": "414", "Body": "<p>take two following classes:</p>\n<pre><code>class Test1{\n public:\n  Test1()=default;\n  Test1(char in1,char in2):char1(in1),char2(in2){}\n  char char1;\n  char char2;\n};\nclass Test2{\n public:\n  Test2()=default;\n  Test2(char in1,char in2):char1(in1),char2(in2){}\n private:\n  char char1;\n  char char2;\n};\n</code></pre>\n<p>I know in c++0x both of these classes are considered as POD types and we can initialize objects of them using initializer lists as below:</p>\n<pre><code>Test1 obj1={'a','b'};//valid in c++0x\nTest2 obj2={'a','b'};//valid in c++0x\n</code></pre>\n<p>But I wonder what the technical reason is that when we have different access specifiers in a class like below, it's not possible to use initializer list for initializing objects of that class and that class is not considered as a POD type ?</p>\n<pre><code>class Test{\n public:\n  Test()=default;\n  Test(char in1,char in2):char1(in1),char2(in2){}\n  char char1;\n private:\n  char char2;\n};\nTest obj={'a','b'};//invalid in c++0x\n</code></pre>\n<p><strong>In case you don't know definition of PODs in c++0x:</strong><br>\nA class/struct is considered a POD if it is trivial, standard-layout, and if all of its non-static members are PODs.</br></p>\n<p>A trivial class or struct is defined as one that:</p>\n<ol>\n<li>Has a trivial default constructor. This may use the default constructor syntax (SomeConstructor() = default;).</li>\n<li>Has a trivial copy constructor, which may use the default syntax.</li>\n<li>Has a trivial copy assignment operator, which may use the default syntax.</li>\n<li>Has a trivial destructor, which must not be virtual.</li>\n</ol>\n<p>A standard-layout class or struct is defined as one that:</p>\n<ol>\n<li>Has only non-static data members that are of standard-layout type</li>\n<li>Has the same access control (public, private, protected) for all non-static members</li>\n<li>Has no virtual functions</li>\n<li>Has no virtual base classes</li>\n<li>Has only base classes that are of standard-layout type</li>\n<li>Has no base classes of the same type as the first defined non-static member</li>\n<li>Either has no base classes with non-static members, or has no non-static data members in the most derived class and at most one base class with non-static members. In essence, there may be only one class in this class's hierarchy that has non-static members.  </li>\n</ol>\n<p><strong>In case you don't know what a trivial constructor or operator is:</strong><br>\nCompiler generates a trivial one of each of following items for a class, in case it isn't user-declared:\nCopy constructor, destructor and copy assignment operator.<br>\nAnd also if there's no user-declared constructor for a class, a trivial default constructor is generated for that class, in case there are any user-declared constructors you can use the syntax(SomeConstructor() = default;) to make your own trivial default constructor.</br></br></p>\n", "AcceptedAnswerId": "3379328", "Title": "relation between access specifiers and using initializer lists for POD types in c++0x", "CreationDate": "2010-07-18T16:08:22.313", "Id": "3276235", "CommentCount": "8", "LastEditDate": "2010-07-19T05:16:44.633", "PostTypeId": "1", "LastEditorUserId": "388056", "LastActivityDate": "2010-07-31T18:27:36.417", "Score": "2", "OwnerUserId": "388056", "Tags": "<c++><initialization><c++11><aggregate><pod>", "AnswerCount": "2"}, "3379328": {"Id": "3379328", "PostTypeId": "2", "Body": "<pre><code>class Test{\n public:\n  Test()=default;\n  Test(char in1,char in2):char1(in1),char2(in2){}\n  char char1;\n private:\n  char char2;\n};\n</code></pre>\n<p>considering above class following syntax is valid in c++0x:</p>\n<pre><code>Test obj={'a','b'};//valid in c++0x\n</code></pre>\n<p>The final proposal is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf\" rel=\"nofollow noreferrer\"><strong>here</strong></a>.</p>\n", "LastActivityDate": "2010-07-31T18:27:36.417", "CommentCount": "0", "CreationDate": "2010-07-31T18:27:36.417", "ParentId": "3276235", "Score": "0", "OwnerUserId": "388056"}});