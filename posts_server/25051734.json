post_cb({"bq_ids": {"n4140": {"so_25051734_25052211_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 179}}, "n3337": {"so_25051734_25052211_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 173}}, "n4659": {"so_25051734_25052211_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 184}}}, "25052211": {"Id": "25052211", "PostTypeId": "2", "Body": "<p>(Previous version was incorrect because of a misreading)</p>\n<p>You have an ambiguous template instantiation.</p>\n<p>Change your <code>GetNthTypeOfNested&lt;0,...&gt;</code> specialization to</p>\n<pre><code>template&lt;template&lt;class...&gt; class ClassName, \n         class FirstOfInsideClass,                              // &lt;- change here\n         class ... InsideClass&gt;\nstruct GetNthTypeOfNested&lt;0, \n                          ClassName, \n                          FirstOfInsideClass,                   // &lt;- and here\n                          InsideClass...&gt;\n{\n    typedef ClassName&lt;FirstOfInsideClass, InsideClass...&gt; type; // &lt;- and here\n};\n</code></pre>\n<p>Also replace replace <code>Typer</code> with <code>::Typer</code> inside <code>Typer</code> because of a VC++ bug.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/2c9c795013626a63\" rel=\"nofollow\">Demo</a>.</p>\n<p>There are two things in this example that are handled differently by different compilers.</p>\n<ol>\n<li>VC++ does not recognize the template specialization as ambiguous. Both gcc and clang do. This is probably a VC++ bug.</li>\n<li>VC++ does not recognize <code>Typer</code> with no template parameters as a template. gcc does, clang does not. It looks like a bug in both VC++ and clang. (Update: this is indeed <a href=\"http://llvm.org/bugs/show_bug.cgi?id=9551\" rel=\"nofollow\">clang bug #9551</a>).</li>\n</ol>\n<p>Says 14.6.1/1:</p>\n<blockquote>\n<p id=\"so_25051734_25052211_0\">Like normal (non-template) classes, class templates have an injected-class-name (Clause 9). The injected class-name can be used as a template-name or a type-name. When it is used with a template-argument-list, <strong>as a template-argument for a template template-parameter</strong>, or as the final identifier in the elaborated-type-specifier of a friend class template declaration, it refers to the class template itself.</p>\n</blockquote>\n", "LastEditorUserId": "775806", "LastActivityDate": "2014-08-02T18:08:50.323", "Score": "0", "CreationDate": "2014-07-31T06:32:45.367", "ParentId": "25051734", "CommentCount": "4", "OwnerUserId": "775806", "LastEditDate": "2014-08-02T18:08:50.323"}, "25051734": {"ViewCount": "419", "Body": "<p>I cant use template name inside of same template.I want to use it like below.But it gives me error.Here is the code; </p>\n<pre><code>   template &lt;unsigned int N, template &lt;class...&gt; class ClassName, class ... InsideClass&gt; struct GetNthTypeOfNested;\n    template&lt;unsigned int N, template&lt;class...&gt; class ClassName, class FirstOfInsideClass, class ... RestOfInsideClass&gt;\n    struct GetNthTypeOfNested&lt;N, ClassName, FirstOfInsideClass, RestOfInsideClass...&gt;:GetNthTypeOfNested&lt;N - 1, ClassName, RestOfInsideClass...&gt;{};\n    template&lt;template&lt;class...&gt; class ClassName, class ... InsideClass&gt;\n    struct GetNthTypeOfNested&lt;0, ClassName, InsideClass...&gt;{\n        typedef typename ClassName&lt;InsideClass...&gt; type;\n    };\n\n    template&lt;typename ... Args&gt; struct Typer;\n    template&lt;&gt;\n    struct Typer&lt;&gt;{\n\n    };\n    template&lt;typename First,typename ... Args&gt;\n    struct Typer&lt;First,Args...&gt;:Typer&lt;Args...&gt;{\n        template&lt;unsigned int N&gt;\n        void get(){\n            cout &lt;&lt; typeid(typename GetNthTypeOfNested&lt;N, Typer, First, Args...&gt;::type).name();\n//Typer undefined here i cant use Typer but i can use Typer outside of function\n        }\n    };\n</code></pre>\n", "AcceptedAnswerId": "25052211", "Title": "C++ template self name passing as a template template parameter inside of same template structure function", "CreationDate": "2014-07-31T05:56:41.823", "Id": "25051734", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-17T09:13:17.870", "LastEditorUserId": "3043539", "LastActivityDate": "2014-08-17T09:13:17.870", "Score": "0", "OwnerUserId": "3856948", "Tags": "<c++><templates><c++11><variadic-templates>", "AnswerCount": "1"}});