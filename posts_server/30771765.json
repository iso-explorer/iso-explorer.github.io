post_cb({"30772158": {"ParentId": "30771765", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>If a destructor invoked by a standard library component exits via an exception, the behavior is undefined. [res.on.functions]/p2, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30771765_30772158_0\">In particular, the effects are undefined in the following cases:</p>\n<ul>\n<li>[...]</li>\n<li>if any replacement function or handler function or <strong>destructor operation</strong> exits via an exception, unless specifically allowed in the\n  applicable <em>Required behavior:</em> paragraph.</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-06-11T05:26:20.807", "Id": "30772158", "Score": "3", "CreationDate": "2015-06-11T05:20:08.403", "LastActivityDate": "2015-06-11T05:26:20.807"}, "30771765": {"CommentCount": "3", "ViewCount": "953", "PostTypeId": "1", "LastEditorUserId": "364818", "CreationDate": "2015-06-11T04:46:38.760", "LastActivityDate": "2017-03-16T19:56:01.120", "Title": "Destructor throwing an exception", "AcceptedAnswerId": "30772158", "LastEditDate": "2017-03-16T19:56:01.120", "Id": "30771765", "Score": "0", "Body": "<p>I'm reading Scott Meyerses <code>C++</code> and now I'm at the destructor throwing exceptions section. Here is what is he said:</p>\n<blockquote>\n<p id=\"so_30771765_30771765_0\">When the vector <code>v</code> is destroyed, it is responsible for destroying all\n  the <code>Widget</code>s it contains. Suppose <code>v</code> has ten <code>Widget</code>s in it, and during\n  destruction of the first one, an exception is thrown. <strong>The other nine</strong>\n<code>Widget</code>s <strong>still have to be destroyed (otherwise any resources they hold</strong>\n<strong>would be leaked)</strong>, <strong>so v should invoke their destructors</strong>. <strong>But suppose</strong>\n<strong>that during those calls, a second Widget destructor throws an</strong>\n<strong>exception.</strong> Now there are two simultaneously active exceptions</p>\n</blockquote>\n<p>So, as far as I undesrstood it, if the first element of a vector throws an exception it doesn't mean the program to be terminated right after that. The implementation tries to destroy the other objects in the vector instead. Let me provide an example:</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\nstruct A\n{\n    ~A(){ std::cout &lt;&lt; \"destruction\" &lt;&lt; std::endl; throw std::exception(); }\n};\n\nint main()\n{\n    A a[] = {A(), A(), A(), A(), A(), A()};\n    std::vector&lt;A&gt; v;\n    v.assign(a, a+6);\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/d4a0e12419c1a478\" rel=\"nofollow noreferrer\">DEMO</a></strong></p>\n<p>The program was terminated right after the first exception throwing. Where is the promised the second exception throwing?</p>\n", "Tags": "<c++><exception>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "30772140": {"ParentId": "30771765", "CommentCount": "0", "Body": "<p>You're referring to Item 8 \"Prevent exceptions from leaving destructors\". Your quote of the text truncates it mid sentence:</p>\n<blockquote>\n<p id=\"so_30771765_30772140_0\"><em>Now there are two simultaneously active exceptions</em>, <strong>and that's one too many for C++</strong>. Depending on the precise conditions under which such pairs of simultaneously active exceptions arise, program execution either terminates or yields undefined behavior.</p>\n</blockquote>\n<p>You indicate that you \"undesrstood it, if the first element of a vector throws an exception it doesn't mean the program to be terminated right after that\"</p>\n<p>Well, it does if you don't catch it, because that's what uncaught exceptions do.</p>\n<p>Alternatively, you catch it. By doing so, you have left the frame of execution that was doing the destruction, and so whatever <em>was</em> going on is no-longer going on.</p>\n<pre><code>// speculative \"what if\"\n\nstruct A { ~A() { raise std::exception(); } };\n\nvoid f() {\n   A a, b;\n} // b and a go out of scope, the first one throws\n\nint main() {\n    try {\n        f();\n    } catch (...) {\n        // &lt;&lt; program is now here.\n    }\n}\n</code></pre>\n<p>There is no mechanism to \"resume\" the termination code for <code>f()</code>, an exception occurred, that code path is done, so if it was <code>a</code> that destructed, <code>b</code> will never destruct; or vice versa.</p>\n<p>Ok, you were talking about a vector. So you perceive that, say, std::vector::clear is doing something like:</p>\n<pre><code>clear() {\n    while (!empty()) {\n        try {\n            erase(back());\n        } catch (std::exception&amp; e) {\n            // something went wrong, lets ignore it\n        }\n        m_size--;\n    }\n}\n</code></pre>\n<p>Your understanding that \"if an exception occurs, the implementation tries to destroy the other objects in the vector instead\" is false. As Meyers says, the STL doesn't expect or encourage exceptions from destructors, so it doesn't try to handle them. I don't know where you got this understanding from, but it's inaccurate, sorry, and if the language <em>tried</em> to implement it, we'd be in a real mess because if something went wrong enough to generate an exception while trying to destroy an object, things would get really messy.</p>\n", "OwnerUserId": "257645", "PostTypeId": "2", "Id": "30772140", "Score": "1", "CreationDate": "2015-06-11T05:18:37.560", "LastActivityDate": "2015-06-11T05:18:37.560"}, "bq_ids": {"n4140": {"so_30771765_30772158_0": {"section_id": 6324, "quality": 1.0, "length": 5}}, "n3337": {"so_30771765_30772158_0": {"section_id": 6081, "quality": 1.0, "length": 5}}, "n4659": {"so_30771765_30772158_0": {"section_id": 7834, "quality": 1.0, "length": 5}}}});