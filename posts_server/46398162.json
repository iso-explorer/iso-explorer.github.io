post_cb({"46398322": {"ParentId": "46398162", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>std::align_val_t</code> and its constraints are specified in the synopsis of the language support header <code>&lt;new&gt;</code>. So if one reads <a href=\"https://timsong-cpp.github.io/cppwp/n4659/support.dynamic#new.delete-1\" rel=\"nofollow noreferrer\">[new.delete]</a> it says the following:</p>\n<blockquote>\n<p id=\"so_46398162_46398322_0\">Except where otherwise specified, the provisions of\n  [basic.stc.dynamic] apply to the library versions of operator new and\n  operator delete. <strong>If the value of an alignment argument passed to any\n  of these functions is not a valid alignment value, the behavior is\n  undefined.</strong></p>\n</blockquote>\n<p>So you must pass a value that is valid, where the definition of valid alignment is given at <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.align#4\" rel=\"nofollow noreferrer\">[basic.align]/4</a>:</p>\n<blockquote>\n<p id=\"so_46398162_46398322_1\">Alignments are represented as values of the type std\u200b::\u200bsize_\u00adt. Valid\n  alignments include only those values returned by an alignof expression\n  for the fundamental types plus an additional implementation-defined\n  set of values, which may be empty. Every alignment value shall be a\n  non-negative integral power of two.</p>\n</blockquote>\n<p>So yes, only powers of two plus any value your implementation explicitly allows. And don't worry about the mention of <code>std::size_t</code> above. <code>std::align_val_t</code> is simply an enum class with <code>std::size_t</code> as underlying type:</p>\n<pre><code>enum class align_val_t : size_t {};\n</code></pre>\n<p>This also implies the upper bound you asked about, essentially <code>std::numeric_limits&lt;std::size_t&gt;::max()</code>. But of course your implementation may enforce a lower one.</p>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-09-25T06:28:11.203", "Id": "46398322", "Score": "1", "CreationDate": "2017-09-25T05:45:19.573", "LastActivityDate": "2017-09-25T06:28:11.203"}, "46398162": {"CommentCount": "4", "ViewCount": "41", "CreationDate": "2017-09-25T05:29:50.297", "LastActivityDate": "2017-09-25T06:28:11.203", "Title": "What are the valid alignment values for std::align_val_t for C++ allocators?", "PostTypeId": "1", "Id": "46398162", "Score": "0", "Body": "<p>Now that C++ has several additional new and delete operators with std::align_val_t parameters, what are the valid values for them?</p>\n<p>Are they 1, 2, 4, 8, ... and so forth?</p>\n<p>Is there an upper limit to the values?</p>\n<p>Defined by the compiler?</p>\n", "Tags": "<c++><memory><memory-management><dynamic-memory-allocation><allocation>", "OwnerUserId": "8425823", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46398162_46398322_1": {"section_id": 7243, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_46398162_46398322_1": {"section_id": 6987, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_46398162_46398322_1": {"section_id": 8752, "quality": 0.9655172413793104, "length": 28}, "so_46398162_46398322_0": {"section_id": 8303, "quality": 0.9130434782608695, "length": 21}}}});