post_cb({"30559173": {"ParentId": "30558980", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_30558980_30559173_0\"><strong>[expr.post.incr]/1</strong> ... The value computation of the <code>++</code> expression is sequenced before the modification of the operand object. With respect to an indeterminately-sequenced function call, the operation of postfix\n  <code>++</code> is a single evaluation. [ <em>Note:</em> Therefore, a function call shall not intervene between the lvalue-to-rvalue conversion and the side effect associated with any single postfix <code>++</code> operator. <em>\u2014end note</em> ]...</p>\n</blockquote>\n<p>My reading of this is that the side effects of <code>a++</code> and <code>b++</code> must complete before the body of <code>f</code> is executed, and therefore within <code>f</code> it must be that <code>a==1</code> and <code>b==1</code>. Your examples #2 and #3 are not possible with a conforming implementation.</p>\n<p>A call to <code>g</code> is indeterminately sequenced with a call to <code>f</code>, and thus can observe either pre-increment or post-increment values.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "30559173", "Score": "1", "CreationDate": "2015-05-31T15:30:29.060", "LastActivityDate": "2015-05-31T15:30:29.060"}, "30558980": {"CommentCount": "2", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "4958516", "CreationDate": "2015-05-31T15:10:20.930", "LastActivityDate": "2015-05-31T15:58:19.923", "Title": "\"sequenced before\" and \"Every evaluation in the calling function\" in c++", "AcceptedAnswerId": "30559173", "LastEditDate": "2015-05-31T15:58:19.923", "Id": "30558980", "Score": "0", "Body": "<p>Every evaluation in the calling function (including other function calls) that is not otherwise specifically sequenced before or after the execution of the body of the called function is indeterminately sequenced with respect to the execution of the called function.</p>\n<p>In other words, function executions do not interleave with each other.</p>\n<p>what is the meaning of \"Every evaluation\".</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint a = 0;\ning b = 0;\nint f(int,int)\n{\n    cout &lt;&lt; \"call f, \";\n    cout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; \", \";\n    cout &lt;&lt; \"b=\" &lt;&lt; b &lt;&lt; \", \";\n    return 1;\n}\n\nint g()\n{\n    cout &lt;&lt; \"call g, \";\n    cout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; \", \";\n    cout &lt;&lt; \"b=\" &lt;&lt; b &lt;&lt; \", \";\n    return 1;\n}\n\nint main()\n{\n    f(a++, b++) + g();\n    return 0;\n}\n</code></pre>\n<ol>\n<li><p>it menas evaluation of function call expression <code>f(a++, b++)</code>, so evaluation of a++, evaluation of b++, and execution of f are all sequenced before or after the execution of g.</p>\n<p>In this case, there are two kinds of results. If evaluation of expression f(a++, b++) is sequenced before the execution of g:</p>\n<p><code>call f, a=1, b=1, call g, a=1, b=1,</code></p>\n<p>If execution of g issequenced before evaluation of expression f(a++, b++):</p>\n<p><code>call g, a=0, b=0, call f, a=1, b=1,</code></p></li>\n</ol>\n<p>2.It means evaluation of a++, evaluation of b++, or execution of f. </p>\n<p>So evaluation of a++ may be sequenced before execution of g, evaluation of b++ and execution of f may be sequenced after execution of g.</p>\n<pre><code>call g, a=1, b=0, call f, a=1, b=1,\n</code></pre>\n<ol start=\"3\">\n<li>It means value computation or side effect.</li>\n</ol>\n<p>So value computation of a++ may be sequenced before execution of g, side effect of a++, evaluation of b++ and execution of f may be sequenced after execution of g.</p>\n<pre><code>call g, a=0, b=0, call f, a=1, b=1,\n</code></pre>\n<p>In this case,</p>\n<pre><code>f(a++, b++) + (a = g());\n1.value computation of a++\n2.execution of g\n3.side effect of a++\n4.side effect of = (a = 0)\n5.evaluation of b++\n6.execution of f\n\ncall g, a=0, b=0, call f, a=0, b=1,\n</code></pre>\n<p>Which one is right? Or other answer?</p>\n<p>I'm not an English speaker, and I'm not very good at English.</p>\n<p>I hope you can understand what i say</p>\n<p>f(h1(), h2()) + g(h3(), h4())</p>\n<p>h1 and h2 are sequenced before f, h3 and h4 are sequenced before g.</p>\n<p>Is it possible:</p>\n<ol>\n<li><p>h1</p></li>\n<li><p>h4</p></li>\n<li><p>h2</p></li>\n<li><p>f</p></li>\n<li><p>h3</p></li>\n<li><p>g</p></li>\n</ol>\n", "Tags": "<c++>", "OwnerUserId": "4958516", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30558980_30559173_0": {"section_id": 6009, "quality": 0.8285714285714286, "length": 29}}, "n3337": {"so_30558980_30559173_0": {"section_id": 5777, "quality": 0.8285714285714286, "length": 29}}, "n4659": {"so_30558980_30559173_0": {"section_id": 7508, "quality": 0.8285714285714286, "length": 29}}}, "30559012": {"ParentId": "30558980", "PostTypeId": "2", "CommentCount": "1", "Body": "<pre><code>f(a++, b++) + g();\n</code></pre>\n<p>Compiler can decide the order of execution of <code>f()</code> and <code>g()</code> in the above statement.</p>\n<p>These are only 2 possibilities not 3.</p>\n<p>Either <code>f()</code> will call first and modifies variables <code>a</code> and <code>b</code>\nOR \n<code>g()</code> will get call first.</p>\n", "OwnerUserId": "1144157", "LastEditorUserId": "1144157", "LastEditDate": "2015-05-31T15:23:51.560", "Id": "30559012", "Score": "0", "CreationDate": "2015-05-31T15:13:54.730", "LastActivityDate": "2015-05-31T15:23:51.560"}});