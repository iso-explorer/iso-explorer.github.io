post_cb({"bq_ids": {"n4140": {"so_30131370_30131485_0": {"length": 36, "quality": 1.0, "section_id": 438}}, "n3337": {"so_30131370_30131485_0": {"length": 36, "quality": 1.0, "section_id": 429}}, "n4659": {"so_30131370_30131485_0": {"length": 36, "quality": 1.0, "section_id": 458}}}, "30131370": {"ViewCount": "160", "Body": "<p>Suppose I have a class <code>Alpha</code>, which has two member variables, <code>beta</code> and <code>gamma</code>, which are objects of classes <code>Beta</code> and <code>Gamma</code> respectively:</p>\n<pre><code>class Alpha\n{\npublic:\n    Beta beta_;\n    Gamma gamma_;\n};\n</code></pre>\n<p>Now, the class <code>Gamma</code> itself has a member variable <code>p_beta</code>, which is a pointer to that same <code>beta</code> variable in <code>Alpha</code>. However, <code>Gamma</code> does not have a default constructor, but instead it must be constructed by passing <code>p_beta</code>:</p>\n<pre><code>class Gamma\n{\npublic:\n    Beta* p_beta_;\n    Gamma(Beta* p_beta)\n    {\n        p_beta_ = p_beta;\n    }\n};\n</code></pre>\n<p>So then, if I want to create an object <code>alpha</code> of class <code>Alpha</code>, I need to construct its member <code>gamma_</code> in the initializer list of <code>Alpha</code>, given that <code>Gamma</code> does not have a default constructor:</p>\n<pre><code>class Alpha\n{\npublic:\n    Beta beta_;\n    Gamma gamma_;\n    Alpha() : gamma_(&amp;beta_){}\n};\n</code></pre>\n<p>My question is: Will <code>beta_</code> have already been created by the time <code>gamma_</code> is constructed in this initializer list? I would have thought that the initializer list is called before creating any of the other member variables, in which case <code>beta_</code> will not exist. If <code>beta_</code> has not been created by then, then how can I pass a pointer to <code>beta_</code> when constructing <code>gamma_</code>?</p>\n", "AcceptedAnswerId": "30131455", "Title": "Are initializer lists called before or after default constructors?", "CreationDate": "2015-05-08T19:22:23.853", "Id": "30131370", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2015-05-08T19:34:14.727", "LastActivityDate": "2015-05-08T19:29:44.147", "Score": "0", "OwnerUserId": "3320135", "Tags": "<c++>", "AnswerCount": "3"}, "30131451": {"Id": "30131451", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30131370_30131451_0\">Will <code>beta_</code> have already been created by the time <code>gamma_</code> is constructed in this initializer list?</p>\n</blockquote>\n<p>Yes, <code>beta_</code> will have been default-constructed before <code>gamma_</code>, so it is safe to use its address. Initialization of non-static data members occurs in declaration order, and destruction in reverse-declaration order.</p>\n", "LastActivityDate": "2015-05-08T19:27:04.377", "CommentCount": "0", "CreationDate": "2015-05-08T19:27:04.377", "ParentId": "30131370", "Score": "2", "OwnerUserId": "701092"}, "30131485": {"Id": "30131485", "PostTypeId": "2", "Body": "<p>From [class.base.init]/13, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30131370_30131485_0\">In a non-delegating constructor, initialization proceeds in the following order:<br>\n  \u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are...<br>\n  \u2014 Then, direct base classes are initialized in declaration order ...<br>\n  \u2014 Then, non-static data members are initialized <strong>in the order they were declared in the class definition</strong>\n  (again regardless of the order of the <em>mem-initializers</em>).</br></br></br></p>\n</blockquote>\n<p>So yes, <code>beta_</code> will have been constructed before <code>gamma_</code> (the order of the initializers is irrelevant)</p>\n", "LastActivityDate": "2015-05-08T19:29:44.147", "CommentCount": "0", "CreationDate": "2015-05-08T19:29:44.147", "ParentId": "30131370", "Score": "0", "OwnerUserId": "2069064"}, "30131455": {"Id": "30131455", "PostTypeId": "2", "Body": "<p>The non-static non-variant data members of a class are initialized in declaration order, without exception. The fact that you haven't specified a <em>mem-initializer</em> for <code>beta_</code> simply means that it will be default-initialized, and this default initialization takes place <em>before</em> the initialization of <code>gamma_</code> because <code>beta_</code> precedes <code>gamma_</code> in declaration order.</p>\n<p>Besides that, even if you changed the order of <code>beta_</code> and <code>gamma_</code> in the class definition, there's nothing wrong with passing around a pointer to an object that hasn't been initialized yet.</p>\n", "LastActivityDate": "2015-05-08T19:27:29.523", "CommentCount": "1", "CreationDate": "2015-05-08T19:27:29.523", "ParentId": "30131370", "Score": "3", "OwnerUserId": "481267"}});