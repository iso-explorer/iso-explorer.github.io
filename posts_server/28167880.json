post_cb({"bq_ids": {"n4140": {"so_28167880_28168022_0": {"length": 35, "quality": 1.0, "section_id": 278}}, "n3337": {"so_28167880_28168022_0": {"length": 35, "quality": 1.0, "section_id": 269}}, "n4659": {"so_28167880_28168022_0": {"length": 35, "quality": 1.0, "section_id": 285}}}, "28167880": {"ViewCount": "69", "Body": "<p>I am constructing a library that makes use of expression templates, where I make heavily use of templated functions in classes. All my code is running and recently I decided to make the main class templated to allow for using it on data of different kinds. However, I can no longer specialize my functions. How do I solve this? I have attached a small test program that shows the problem.</p>\n<p>My previous <code>Animal</code> class was not templated and then this code works fine.</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\n// Example templated class with templated function\ntemplate&lt;class T&gt;\nclass Animals\n{\n  public:\n    template&lt;class X&gt;\n    void printFood(const X&amp; x) const { std::cout &lt;&lt; \"We eat \" &lt;&lt; x &lt;&lt; \"!\" &lt;&lt; std::endl; }\n\n  private:\n    std::vector&lt;T&gt; animals;\n};\n\n// How do I specialize?\ntemplate&lt;class T&gt; template&lt;&gt;\nvoid Animals&lt;T&gt;::printFood(const unsigned int&amp; x) const { std::cout &lt;&lt; \"We don't want to eat \" &lt;&lt; x &lt;&lt; \"!\" &lt;&lt; std::endl; }\n\n// Main loop;\nint main()\n{\n  Animals&lt;double&gt; doubleAnimals;\n\n  const int banana = 42;\n  doubleAnimals.printFood(banana);\n\n  const unsigned int apple = 666;\n  doubleAnimals.printFood(apple);\n\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "28168022", "Title": "Templated functions in templated classes", "CreationDate": "2015-01-27T10:11:39.327", "Id": "28167880", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-01-27T10:28:18.970", "Score": "2", "OwnerUserId": "1673574", "Tags": "<c++><templates><expression-templates>", "AnswerCount": "3"}, "28168056": {"Id": "28168056", "PostTypeId": "2", "Body": "<p>You should specialize your class first. Then specialize function:</p>\n<pre><code>template&lt;&gt; template&lt;&gt;\nvoid Animals&lt;double&gt;::printFood(const unsigned int&amp; x) const { std::cout &lt;&lt; \"We don't want to eat \" &lt;&lt; x &lt;&lt; \"!\" &lt;&lt; std::endl; }\n</code></pre>\n", "LastActivityDate": "2015-01-27T10:20:05.403", "CommentCount": "1", "CreationDate": "2015-01-27T10:20:05.403", "ParentId": "28167880", "Score": "2", "OwnerUserId": "2183667"}, "28168022": {"Id": "28168022", "PostTypeId": "2", "Body": "<p>This simply isn't possible</p>\n<p>[temp.expl.spec]</p>\n<blockquote>\n<p id=\"so_28167880_28168022_0\">16 In an explicit specialization declaration for a member of a class template or a member template that appears in namespace scope, the member template and some of its enclosing class templates may remain unspecialized, except that <strong>the declaration shall not explicitly specialize a class member template if its enclosing class templates are not explicitly specialized as well.</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-01-27T10:18:49.213", "CommentCount": "1", "CreationDate": "2015-01-27T10:18:49.213", "ParentId": "28167880", "Score": "7", "OwnerUserId": "657267"}, "28168021": {"Id": "28168021", "PostTypeId": "2", "Body": "<p>You can't partially specialize template members of non-specialized template class. This is consistent with prohibiting partial specialization of template functions (think of template class as the member function's first parameter). Use overloading instead:</p>\n<pre><code>template&lt;class T&gt;\nclass Animals\n{\npublic:\n    template&lt;class X&gt;\n    void printFood(const X&amp; x) const { std::cout &lt;&lt; \"We eat \" &lt;&lt; x &lt;&lt; \"!\" &lt;&lt; std::endl; }\n\n    void printFood(const unsigned int&amp; x) const { std::cout &lt;&lt; \"We don't want to eat \" &lt;&lt; x &lt;&lt; \"!\" &lt;&lt; std::endl; }\n\nprivate:\n    std::vector&lt;T&gt; animals;\n};\n</code></pre>\n", "LastEditorUserId": "3959454", "LastActivityDate": "2015-01-27T10:28:18.970", "Score": "0", "CreationDate": "2015-01-27T10:18:48.597", "ParentId": "28167880", "CommentCount": "5", "OwnerUserId": "3959454", "LastEditDate": "2015-01-27T10:28:18.970"}});