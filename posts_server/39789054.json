post_cb({"39789346": {"Id": "39789346", "PostTypeId": "2", "Body": "<p>ideone is mistaken.</p>\n<p>Older versions of C (pre-standard, and the 1989 standard) supported an implicit <code>int</code> return type from a function.    It is illegal in C since the 1999 standard.</p>\n<p>No C++ standard has supported an implicit <code>int</code> return type.  In fact, the implicit <code>int</code> was \"banned\" in the ARM (The Annotated C++ Reference Manual by Margaret Ellis and Bjarne Stroustrup).  The ARM was one of the key documents that guided development of the first C++ standard.</p>\n", "LastActivityDate": "2016-09-30T10:27:19.950", "CommentCount": "0", "CreationDate": "2016-09-30T10:27:19.950", "ParentId": "39789054", "Score": "7", "OwnerUserId": "4706785"}, "39789156": {"Id": "39789156", "PostTypeId": "2", "Body": "<p>No, it works because compilers support really old C, that allowed that.</p>\n", "LastActivityDate": "2016-09-30T10:17:14.097", "CommentCount": "1", "CreationDate": "2016-09-30T10:17:14.097", "ParentId": "39789054", "Score": "11", "OwnerUserId": "1092151"}, "39792673": {"Id": "39792673", "PostTypeId": "2", "Body": "<p>For Old C it was supported with logic behind it - when main() terminates it explicitly returns 0 meaning that the program was successful. The int value that main returns is usually the value that will be passed back to the operating system.</p>\n", "LastActivityDate": "2016-09-30T13:26:26.117", "CommentCount": "0", "CreationDate": "2016-09-30T13:26:26.117", "ParentId": "39789054", "Score": "0", "OwnerUserId": "6643401"}, "bq_ids": {"n4140": {"so_39789054_39789172_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 7146}, "so_39789054_39789172_1": {"length": 36, "quality": 0.8571428571428571, "section_id": 7145}}, "n3337": {"so_39789054_39789172_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 6890}, "so_39789054_39789172_1": {"length": 36, "quality": 0.8571428571428571, "section_id": 6889}}, "n4659": {"so_39789054_39789172_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 8647}, "so_39789054_39789172_1": {"length": 34, "quality": 0.8095238095238095, "section_id": 8646}}}, "39794993": {"Id": "39794993", "PostTypeId": "2", "Body": "<p>The Standard prescribes how a hosted implementation should treat programs where \"main\" returns \"int\".  It does not specify exactly what an implementation should do when \"main\" returns, but it strongly implies that having \"main\" returns zero an implementation should do whatever is \"normal\" for the underlying platform.  It does not prescribe how implementations should treat programs where \"main\" returns something else; implementations are free to behave usefully or not, at their leisure.</p>\n<p>Freestanding implementations are allowed to specify that \"main\" must never return, and that arbitrary bad things may happen if it does.  The Standard does not prescribe any particular alternative form of invocation, but implies that implementations may usefully support such forms.  There are platforms where invocation of a \"void\" function by code that expects it to return \"int\" will cause weird and wacky behaviors whether or not the function actually returns, but there are many where nothing weird will happen.  In a freestanding implementation which will behave badly if \"main\" returns, but where a function's return type will be irrelevant if the function never returns, it may be reasonable and appropriate to declare \"main\" as a \"void\" function since it will never return a value.</p>\n", "LastActivityDate": "2016-09-30T15:25:43.850", "CommentCount": "0", "CreationDate": "2016-09-30T15:25:43.850", "ParentId": "39789054", "Score": "0", "OwnerUserId": "363751"}, "39789054": {"ViewCount": "1117", "Body": "<p>Are there some special rules with respect to the declaration of the <code>main</code> function?</p>\n<p>According to <a href=\"http://ideone.com/eEoa8n\">ideone</a> this is legal C++:</p>\n<pre><code>main()  // As opposed to int main()\n{\n   return 0;\n}\n</code></pre>\n<p>On the other hand, normal functions do not seem to have the privilege to avoid the return type:</p>\n<pre><code>f(){} \n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>Gives the error:</p>\n<blockquote>\n<p id=\"so_39789054_39789054_0\">prog.cpp:1:3: error: ISO C++ forbids declaration of 'f' with no type\n  [-fpermissive]  f(){}    ^</p>\n</blockquote>\n<p>Is the <code>main</code> function special in this case?</p>\n", "AcceptedAnswerId": "39789172", "Title": "Can you omit the return type in main function?", "CreationDate": "2016-09-30T10:11:52.640", "LastActivityDate": "2016-09-30T15:25:43.850", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "Tags": "<c++>", "Id": "39789054", "Score": "18", "OwnerUserId": "1097451", "ClosedDate": "2016-09-30T17:14:51.010", "AnswerCount": "6"}, "39789172": {"Id": "39789172", "PostTypeId": "2", "Body": "<p>Never omit <code>main</code>'s return type, as <strong>it's non-standard!</strong></p>\n<hr>\n<p><a href=\"http://melpon.org/wandbox/permlink/cFpPpUWB1ngQMxDh\" rel=\"noreferrer\">wandbox example</a>: </p>\n<blockquote>\n<p id=\"so_39789054_39789172_0\">prog.cc:1:6: warning: ISO C++ forbids declaration of 'main' with no type [-Wpedantic]\n   main()</p>\n</blockquote>\n<hr>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf\" rel=\"noreferrer\">From $3.6.1</a>:</p>\n<blockquote>\n<p id=\"so_39789054_39789172_1\">1 A program shall contain a global function called main, which is the designated start of the program. It\n  is implementation-defined whether a program in a freestanding environment is required to define a main\n  function. [ Note: In a freestanding environment, start-up and termination is implementation-defined; startup\n  contains the execution of constructors for objects of namespace scope with static storage duration;\n  termination contains the execution of destructors for objects with static storage duration. \u2014 end note ]\n  \u00a7 3.6.1 58</p>\n<p id=\"so_39789054_39789172_2\">2 An implementation shall not predefine the main function. This function shall not be overloaded. <strong>It shall\n  have a return type of type int</strong>, but otherwise its type is implementation-defined</p>\n</blockquote>\n</hr></hr>", "LastActivityDate": "2016-09-30T10:18:15.687", "CommentCount": "0", "CreationDate": "2016-09-30T10:18:15.687", "ParentId": "39789054", "Score": "18", "OwnerUserId": "598696"}, "39789545": {"Id": "39789545", "PostTypeId": "2", "Body": "<p>In C++, it is not valid except a few old C++ compilers like Turbo C++. Every function should specify the return type in C++.</p>\n<p>See the reference link : <a href=\"http://www.geeksforgeeks.org/implicit-return-type-int-c-language/\" rel=\"nofollow\">http://www.geeksforgeeks.org/implicit-return-type-int-c-language/</a></p>\n", "OwnerDisplayName": "user6359267", "LastEditorUserId": "560648", "LastActivityDate": "2016-09-30T11:11:40.977", "Score": "1", "CreationDate": "2016-09-30T10:37:26.747", "ParentId": "39789054", "CommentCount": "0", "LastEditDate": "2016-09-30T11:11:40.977"}});