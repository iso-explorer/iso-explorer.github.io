post_cb({"441843": {"PostTypeId": "2", "Body": "<p>Well, let's try it:</p>\n<pre><code>jeremy@jeremy-desktop:~$ echo 'main() { int a; delete &amp;a; }' &gt; test.cpp\njeremy@jeremy-desktop:~$ g++ -o test test.cpp\njeremy@jeremy-desktop:~$ ./test\nSegmentation fault\n</code></pre>\n<p>So apparently it is not safe at all.</p>\n", "OwnerDisplayName": "Jeremy Ruten", "LastActivityDate": "2009-01-14T03:47:23.747", "Id": "441843", "CommentCount": "5", "CreationDate": "2009-01-14T03:47:23.747", "ParentId": "441831", "Score": "39", "OwnerUserId": "813"}, "12513503": {"PostTypeId": "2", "Body": "<p>Nobody can know what happens. This invokes undefined behavior, so literally anything can happen. <strong>Don't do this.</strong></p>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2012-09-20T13:18:56.750", "Id": "12513503", "CommentCount": "10", "CreationDate": "2012-09-20T13:18:56.750", "ParentId": "441831", "Score": "5"}, "bq_ids": {"n4140": {"so_441831_12513513_0": {"length": 35, "quality": 0.7777777777777778, "section_id": 7182}}, "n3337": {"so_441831_12513513_0": {"length": 35, "quality": 0.7777777777777778, "section_id": 6926}}}, "442468": {"PostTypeId": "2", "Body": "<p>No,\nMemory allocated using new should be deleted using delete operator\nand that allocated using malloc should be deleted using free.\nAnd no need to deallocate the variable which are allocated on stack.</p>\n", "OwnerDisplayName": "Vinay", "LastActivityDate": "2009-01-14T10:02:15.657", "Id": "442468", "CommentCount": "0", "CreationDate": "2009-01-14T10:02:15.657", "ParentId": "441831", "Score": "4", "OwnerUserId": "28641"}, "12513527": {"PostTypeId": "2", "Body": "<p>It's UB because you must not call delete on an item that has not been dynamically allocated with new.  It's that simple.</p>\n", "LastActivityDate": "2012-09-20T13:19:51.613", "Id": "12513527", "CommentCount": "0", "CreationDate": "2012-09-20T13:19:51.613", "ParentId": "441831", "Score": "0", "OwnerUserId": "758133"}, "442543": {"PostTypeId": "2", "Body": "<p>here the memory is allocated using stack so no need to delete it exernally but if you have allcoted dynamically </p>\n<p>like \nint *a=new int()</p>\n<p>then you have to  do delete a and not delete &amp;a(a itself is a pointer), because the memory is allocated from free store. </p>\n", "OwnerDisplayName": "Ashrith", "LastActivityDate": "2009-01-14T10:28:16.183", "Id": "442543", "CommentCount": "0", "CreationDate": "2009-01-14T10:28:16.183", "ParentId": "441831", "Score": "1"}, "441982": {"PostTypeId": "2", "Body": "<p>Keep in mind that when you allocate a block of memory using new (or malloc for that matter), the actual block of memory allocated will be larger than what you asked for.\nThe memory block will also contain some bookkeeping information so that when you free the block, it can easily be put back into the free pool and possibly be coalesced with adjacent free blocks.</p>\n<p>When you try to free any memory that you didn't receive from new, that bookkeeping information wont be there but the system will act like it is and the results are going to be unpredictable (usually bad).</p>\n", "OwnerDisplayName": "Ferruccio", "LastActivityDate": "2009-01-14T05:11:47.677", "Id": "441982", "CommentCount": "0", "CreationDate": "2009-01-14T05:11:47.677", "ParentId": "441831", "Score": "14", "OwnerUserId": "4086"}, "12513525": {"PostTypeId": "2", "Body": "<p>You already answered the question yourself. <code>delete</code> must only be used for pointers optained through <code>new</code>. Doing anything else is plain and simple undefined behaviour. </p>\n<p>Therefore there is really no saying what happens, anything from the code working fine through crashing to erasing your harddrive is a valid outcome of doing this. So please <em>never do this</em>.</p>\n", "LastActivityDate": "2012-09-20T13:19:46.573", "Id": "12513525", "CommentCount": "0", "CreationDate": "2012-09-20T13:19:46.573", "ParentId": "441831", "Score": "0", "OwnerUserId": "201270"}, "12513513": {"PostTypeId": "2", "Body": "<p>Yes, it is undefined behavior: passing to <code>delete</code> anything that did not come from <code>new</code> is UB:</p>\n<blockquote>\n<p id=\"so_441831_12513513_0\">C++ standard, section 3.7.3.2.3:\n  The value of the first argument supplied to one of thea deallocation functions provided in the standard library may be a <code>null</code> pointer value; if so, and if the deallocation function is one supplied in the standard library, the call to the deallocation function has no effect. Otherwise, the value supplied to <code>operator delete(void*)</code> in the standard library shall be one of the values returned by a previous invocation of either <code>operator new(std::size_t)</code> or <code>operator new(std::size_t, const std::nothrow_t&amp;)</code> in the standard library.</p>\n</blockquote>\n<p>The consequences of undefined behavior are, well, undefined. \"Nothing happens\" is as valid a consequence as anything else. However, it's usually \"nothing happens right away\": deallocating an invalid memory block may have severe consequences in subsequent calls to the allocator.</p>\n", "LastActivityDate": "2012-09-20T13:24:46.617", "LastEditorUserId": "335858", "Id": "12513513", "CommentCount": "0", "CreationDate": "2012-09-20T13:19:15.450", "ParentId": "441831", "Score": "7", "OwnerUserId": "335858", "LastEditDate": "2012-09-20T13:24:46.617"}, "6036172": {"PostTypeId": "2", "Body": "<p>After playing a bit with g++ 4.4 in windows, I got very interesting results:</p>\n<ol>\n<li><p>calling delete on a stack variable doesn't seem to do anything. No errors throw, but I can access the variable without problems after deletion.</p></li>\n<li><p>Having a class with a method with <code>delete this</code> successfully deletes the object if it is allocated in the heap, but not if it is allocated in the stack (if it is in the stack, nothing happens).</p></li>\n</ol>\n", "LastActivityDate": "2011-05-17T19:37:00.573", "Id": "6036172", "CommentCount": "2", "CreationDate": "2011-05-17T19:37:00.573", "ParentId": "441831", "Score": "6", "OwnerUserId": "118750"}, "441837": {"Body": "<p><a href=\"https://msdn.microsoft.com/en-us/library/h6227113(v=vs.140).aspx\" rel=\"nofollow noreferrer\">No</a>, it is not safe to call <code>delete</code> on a stack-allocated variable.  You should only call <code>delete</code> on things created by <code>new</code>.</p>\n<ul>\n<li>For each <code>malloc</code> or <code>calloc</code>, there should be exactly one <code>free</code>.  </li>\n<li>For each <code>new</code> there should be exactly one <code>delete</code>.  </li>\n<li>For each <code>new[]</code> there should be exactly one <code>delete[]</code>.  </li>\n<li>For each stack allocation, there should be no explicit freeing or deletion. The destructor is called automatically, where applicable.  </li>\n</ul>\n<p>In general, you cannot mix and match any of these, e.g. no <code>free</code>-ing or <code>delete[]</code>-ing a <code>new</code> object.  Doing so results in undefined behavior.</p>\n", "CreationDate": "2009-01-14T03:44:51.737", "ParentId": "441831", "CommentCount": "4", "LastEditDate": "2017-10-25T14:15:40.250", "PostTypeId": "2", "LastEditorDisplayName": "Mr Fooz", "LastActivityDate": "2017-10-25T14:15:40.250", "LastEditorUserId": "25050", "Id": "441837", "OwnerDisplayName": "Mr Fooz", "Score": "89", "OwnerUserId": "25050"}, "12513507": {"PostTypeId": "2", "Body": "<p>An angel loses its wings... You can only call <code>delete</code> on a pointer allocated with <code>new</code>, otherwise you get undefined behavior.</p>\n", "LastActivityDate": "2012-09-20T13:19:03.360", "Id": "12513507", "CommentCount": "0", "CreationDate": "2012-09-20T13:19:03.360", "ParentId": "441831", "Score": "3", "OwnerUserId": "673730"}, "441831": {"ViewCount": "35729", "Body": "<p>Ignoring programming style and design, is it \"safe\" to call delete on a variable allocated on the stack?</p>\n<p>For example:</p>\n<pre><code>   int nAmount;\n   delete &amp;nAmount;\n</code></pre>\n<p>or</p>\n<pre><code>class sample\n{\npublic:\n    sample();\n    ~sample() { delete &amp;nAmount;}\n    int nAmount;\n}\n</code></pre>\n", "AcceptedAnswerId": "441837", "Title": "Calling delete on variable allocated on the stack", "CreationDate": "2009-01-14T03:41:58.687", "Id": "441831", "CommentCount": "7", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2014-10-18T10:42:27.393", "LastEditorDisplayName": "Jonathan Leffler", "OwnerDisplayName": "unistudent", "LastEditorUserId": "3622940", "LastActivityDate": "2017-10-25T14:15:40.250", "Score": "46", "OwnerUserId": "54883", "Tags": "<c++><stack><heap><delete-operator>", "AnswerCount": "11"}});