post_cb({"26170808": {"ParentId": "26170513", "CommentCount": "0", "Body": "<p>The standard library never tries to put back characters into stream in case of an error. For example, here is an excerpt from the standard on how <code>short</code> is read from a stream (<code>27.7.2.2.2/2</code>):</p>\n<pre><code>operator&gt;&gt;(short&amp; val);\n</code></pre>\n<blockquote>\n<p id=\"so_26170513_26170808_0\">The conversion occurs as if performed by the following code fragment (using the same notation as for the preceding code fragment):</p>\n</blockquote>\n<pre><code>typedef num_get&lt;charT,istreambuf_iterator&lt;charT,traits&gt; &gt; numget;\niostate err = ios_base::goodbit;\nlong lval;\nuse_facet&lt;numget&gt;(loc).get(*this, 0, *this, err, lval);\nif (lval &lt; numeric_limits&lt;short&gt;::min()) {\n    err |= ios_base::failbit;\n    val = numeric_limits&lt;short&gt;::min();\n} else if (numeric_limits&lt;short&gt;::max() &lt; lval) {\n    err |= ios_base::failbit;\n    val = numeric_limits&lt;short&gt;::max();\n} else\n    val = static_cast&lt;short&gt;(lval);\nsetstate(err);\n</code></pre>\n<p>You see that even if the number doesn't fit into <code>short</code>, nothing is reverted.</p>\n", "OwnerUserId": "3959454", "PostTypeId": "2", "Id": "26170808", "Score": "1", "CreationDate": "2014-10-02T22:44:05.773", "LastActivityDate": "2014-10-02T22:44:05.773"}, "26170938": {"ParentId": "26170513", "CommentCount": "0", "Body": "<p>In general in case of failure you're expected to leave any object involved into a valid state. Whether that means rolling back the variable being written to, partially writing to it or anything else depends on what you are trying to accomplish and what you think is going to be best for the user. In any case, be sure to document your choice so that users can program knowing how your implementation will behave.</p>\n<p>As Anton already said, the standard library does not seem to make any effort into putting characters back into the stream. Another practical example, which seems to be closer to what you are doing, is <code>operator&gt;&gt;</code> for the <code>std::complex</code> class, which actually has to read multiple tokens in a sequence before being done.</p>\n<pre><code>template&lt;typename _Tp, typename _CharT, class _Traits&gt;\n  basic_istream&lt;_CharT, _Traits&gt;&amp;\n  operator&gt;&gt;(basic_istream&lt;_CharT, _Traits&gt;&amp; __is, complex&lt;_Tp&gt;&amp; __x)\n  {\n    _Tp __re_x, __im_x;\n    _CharT __ch;\n    __is &gt;&gt; __ch;\n    if (__ch == '(') \n  {\n    __is &gt;&gt; __re_x &gt;&gt; __ch;\n    if (__ch == ',') \n      {\n        __is &gt;&gt; __im_x &gt;&gt; __ch;\n        if (__ch == ')') \n      __x = complex&lt;_Tp&gt;(__re_x, __im_x);\n        else\n      __is.setstate(ios_base::failbit);\n      }\n    else if (__ch == ')') \n      __x = __re_x;\n    else\n      __is.setstate(ios_base::failbit);\n  }\n    else \n  {\n    __is.putback(__ch);\n    __is &gt;&gt; __re_x;\n    __x = __re_x;\n  }\n    return __is;\n  }\n</code></pre>\n", "OwnerUserId": "1356926", "PostTypeId": "2", "Id": "26170938", "Score": "1", "CreationDate": "2014-10-02T22:58:52.990", "LastActivityDate": "2014-10-02T22:58:52.990"}, "bq_ids": {"n4140": {"so_26170513_26170808_0": {"section_id": 2190, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_26170513_26170808_0": {"section_id": 2178, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_26170513_26170808_0": {"section_id": 2463, "quality": 0.9230769230769231, "length": 12}}}, "26170513": {"CommentCount": "1", "ViewCount": "84", "PostTypeId": "1", "LastEditorUserId": "893180", "CreationDate": "2014-10-02T22:16:47.247", "LastActivityDate": "2014-10-03T12:03:13.843", "Title": "Expected behaviour when failing reading a custom type from an istream", "AcceptedAnswerId": "26170938", "LastEditDate": "2014-10-03T12:03:13.843", "Id": "26170513", "Score": "3", "Body": "<p>Say I have a class with two data members:</p>\n<pre><code>class X {\n    std::string a;\n    int b;\npublic:\n    ostream&amp; print(ostream&amp; os);\n    istream&amp; read(istream&amp; is);\n}\n</code></pre>\n<p>The <code>print</code> function outputs all of the data nicely formatted, like so:</p>\n<pre><code>ostream&amp; X::print(ostream&amp; os) {\n    return os &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b;\n}\n</code></pre>\n<p>Now, the <code>read</code> function is supposed to do the inverse: read something in a specified format (say, like <code>horse 54</code> which would then result in <code>a = \"horse\"</code> and <code>b = 54</code>).</p>\n<p>So say an input does not follow this format. My intuition says that as soon as we encounter an unexpected character (for example a letter when trying to read an <code>int</code>), we set the <code>failbit</code> and <em>put every character we read so far back into the stream</em>. What is the expected behavior of a <code>read</code> function (or <code>operator&gt;&gt;</code>) in this case? How does the standard library behave? Should we be required to undo all extraction of characters if the read fails?</p>\n", "Tags": "<c++><istream>", "OwnerUserId": "893180", "AnswerCount": "2"}});