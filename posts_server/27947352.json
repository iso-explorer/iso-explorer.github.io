post_cb({"27947714": {"ParentId": "27947352", "CommentCount": "0", "CreationDate": "2015-01-14T16:24:46.813", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "27947714", "Score": "1", "Body": "<p>This is one of those places where the C++ standard is extremely easy to understand. From \u00a78.3.6/9 (in N3797, emphasis mine):</p>\n<blockquote>\n<p id=\"so_27947352_27947714_0\">The order of evaluation of function arguments is <strong>unspecified</strong>.</p>\n</blockquote>\n<p>That means you cannot rely on <code>intval</code> being evaluated as a copy of <code>x</code> <em>after</em> <code>changeX()</code> is called. Your code is thus undefined behavior. </p>\n", "LastActivityDate": "2015-01-14T16:24:46.813"}, "27947394": {"ParentId": "27947352", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-01-14T16:09:20.437", "Score": "4", "LastEditorUserId": "3093378", "LastEditDate": "2015-01-14T16:32:37.337", "Id": "27947394", "OwnerUserId": "3093378", "Body": "<p>The order of evaluation of arguments in a function is <strong>unspecified</strong>, so NO, you cannot say that.</p>\n<p>See e.g. <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/eval_order</a></p>\n<p>or see the standard if you dare read \"standardese\" :)</p>\n<p>PS: even if the order may have been specified, it is always a good idea to avoid code like this, since most of the time other people reading your code will have exactly the same question, and will lose a lot of time digging in. Just prefer clarity over extremely \"clever\" code.</p>\n", "LastActivityDate": "2015-01-14T16:32:37.337"}, "27947352": {"CommentCount": "1", "ViewCount": "385", "CreationDate": "2015-01-14T16:07:26.190", "LastActivityDate": "2015-01-14T16:32:37.337", "Title": "Passing uninitialized variables safety", "AcceptedAnswerId": "27947385", "PostTypeId": "1", "Id": "27947352", "Score": "2", "Body": "<p>I stumbled upon some code today, I simplified it to this :</p>\n<pre><code>#include &lt;iostream&gt;\nusing std::cout;\nusing std::cin;\n\nbool changeX(int &amp;x)\n{\n    x = 5;\n    return true;\n}\n\nvoid printvals(bool bval, int intval)\n{\n    cout &lt;&lt; bval &lt;&lt; \" : \" &lt;&lt; intval;\n}\n\nint main()\n{\n    int x;\n    printvals(changeX(x), x);\n    cin.get();\n}\n</code></pre>\n<p>Here, <code>x</code> is still uninitialized at the time it's passed to the function <code>printvals</code> but can I say for sure that x will <em>always</em> be initialized before printvals uses it?\nI tried to run my simplified code in VS2013 debug-mode which gave me : <code>Run-Time Check Failure #3 - The variable 'x' is being used without being initialized.</code>. However, running it in release-mode ran fine and printed : <code>1 : 5</code> as expected.</p>\n<p>Does this meant that I can use this approach in production code? Will <code>x</code> always be initialized before <code>printvals</code> can use it so it doesn't cause UB?</p>\n", "Tags": "<c++><function><undefined-behavior>", "OwnerUserId": "1870760", "AnswerCount": "4"}, "27947385": {"ParentId": "27947352", "CommentCount": "0", "CreationDate": "2015-01-14T16:09:02.893", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "27947385", "Score": "9", "Body": "<blockquote>\n<p id=\"so_27947352_27947385_0\">can I say for sure that <code>x</code> will always be initialized before <code>printvals</code> uses it?</p>\n</blockquote>\n<p>No, the order of evaluation of function parameters is unspecified. Since you may read from an uninitialized variable, your code may have <em>undefined behaviour</em>. You cannot rely on the side effects of the call to <code>changeX</code>.</p>\n", "LastActivityDate": "2015-01-14T16:09:02.893"}, "bq_ids": {"n4140": {"so_27947352_27947714_0": {"section_id": 3260, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_27947352_27947714_0": {"section_id": 3132, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_27947352_27947714_0": {"section_id": 7709, "quality": 0.6666666666666666, "length": 4}}}, "27947412": {"ParentId": "27947352", "CommentCount": "0", "CreationDate": "2015-01-14T16:09:49.347", "OwnerUserId": "3987536", "PostTypeId": "2", "Id": "27947412", "Score": "1", "Body": "<p>This could lead to undefined behavior, since order of execution is unspecified (it depends on the compiler).</p>\n", "LastActivityDate": "2015-01-14T16:09:49.347"}});