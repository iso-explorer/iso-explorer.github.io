post_cb({"bq_ids": {"n4140": {"so_10170087_10170224_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 4650}}, "n3337": {"so_10170087_10170224_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 4461}}, "n4659": {"so_10170087_10170224_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 6019}}}, "10170224": {"Id": "10170224", "PostTypeId": "2", "Body": "<p><code>std::function</code> is able to store function pointers that use any calling convention. </p>\n<p>\u00a7 20.8.11.2:</p>\n<blockquote>\n<p id=\"so_10170087_10170224_0\">The function class template provides polymorphic wrappers that generalize the notion of a function pointer. Wrappers can store, copy, and call arbitrary callable objects (20.8.1), given a call signature (20.8.1), allowing functions to be \ufb01rst-class objects.</p>\n</blockquote>\n<p>As <a href=\"https://stackoverflow.com/users/5696/john-calsbeek\">John Calsbeek</a> <a href=\"https://stackoverflow.com/questions/10170087/how-does-stdfunction-know-about-calling-convention/10170224#comment13048868_10170224\">added</a>: There is nothing in particular in the standard concerning the calling conventions, but the compilers are doing their job and function pointers contain the information about the convention.</p>\n<p>With function pointers you would need to specify the unusual calling convention:</p>\n<pre><code>typedef int(* c_ptr_t)(int);\ntypedef int(__stdcall * std_ptr_t)(int);\n\nc_ptr_t c_ptr = ccall;\nstd_ptr_t std_ptr = stdcall;\n\n// But std::function doesn't mind:\nstd::function&lt;int(int)&gt; fnc = c_ptr;\nstd::function&lt;int(int)&gt; fnstd = std_ptr;\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-16T08:16:06.630", "Score": "6", "CreationDate": "2012-04-16T07:33:42.690", "ParentId": "10170087", "CommentCount": "4", "OwnerUserId": "61574", "LastEditDate": "2017-05-23T11:50:47.897"}, "10170087": {"ViewCount": "2181", "Body": "<pre><code>int __cdecl ccall(int i)\n{\n    wprintf(L\"ccall(%d)\", i);\n    return 0;\n}\n\nint __stdcall stdcall(int i)\n{\n    wprintf(L\"stdcall(%d)\", i);\n    return 0;\n}\n\nint __cdecl wmain(int argc, wchar_t **argv)\n{\n    std::function&lt;int(int)&gt; fnc = ccall;\n    std::function&lt;int(int)&gt; fnstd = stdcall;\n\n    fnc(10); // printed well\n    fnstd(100); // printed well\n    return 0;\n}\n</code></pre>\n<p>I was concerned how do I assign a <code>__stdcall function</code> to <code>std::function</code> object.\nBut without any specifying calling convention, it looks like working fine. How can <code>std::function</code> know what calling convention is?</p>\n", "AcceptedAnswerId": "10170224", "Title": "How does std::function know about calling convention?", "CreationDate": "2012-04-16T07:20:56.033", "Id": "10170087", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2012-04-16T08:16:06.630", "Score": "9", "OwnerUserId": "252047", "Tags": "<c++><c++11><calling-convention>", "AnswerCount": "1"}});