post_cb({"6466923": {"ParentId": "6466816", "CommentCount": "4", "Body": "<p>All non-pure virtual functions must be implemented, <a href=\"http://www.ideone.com/ktnYv\" rel=\"nofollow\">whether you use them or not</a>:</p>\n<pre><code>struct Test\n{\n  Test() {}\n  virtual void foo();\n};\n\nint main() {\n   Test* t = new Test;\n   // ^ it seems to have to be dynamic allocation to coerce the error out\n}\n\n/* Output:\n/home/Y3oGMf/ccOLuYWf.o: In function `main':\nprog.cpp:(.text+0x17): undefined reference to `vtable for Test'\ncollect2: ld returned 1 exit status\n*/\n</code></pre>\n<p>I think you're seeing the slightly odd error message regarding <em>use</em> of a deleted function for a similar reason. It's just because of how things work internally. A more sensible error message might be on the line where you attempted to <code>delete</code> a <code>virtual</code> function member, saying \"this is not going to work. it's going to cause problems because this implementation <em>must</em> exist.\"</p>\n<p>It doesn't make sense to <code>delete</code> an interface function anyway. Inheritance adds functionality; it does not take it away. Notice how making a member function <em>pure</em> virtual prohibits the entire class from being instantiated: derived classes must re-implement the functionality so that it is not lost.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "6466923", "Score": "3", "CreationDate": "2011-06-24T11:11:48.427", "LastActivityDate": "2011-06-24T11:11:48.427"}, "26070609": {"ParentId": "6466816", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Deleted virtual functions are allowed, but overloading them is not.</p>\n<p>\u00a710.3(11) says:</p>\n<blockquote>\n<p id=\"so_6466816_26070609_0\"><strong>A virtual function</strong> declared in a class <strong>shall be defined</strong>, or declared pure (10.4) in that class, or both; but no diagnostic is required (3.2).</p>\n</blockquote>\n<p>\u00a78.4.1 says that <strong>a deleted function is defined</strong>.</p>\n<p>And \u00a710.3(16) says:</p>\n<blockquote>\n<p id=\"so_6466816_26070609_1\">A function with a deleted definition (8.4) shall not override a function that does not have a deleted definition. Likewise, a function that does not have a deleted definition shall not override a function with a deleted definition.</p>\n</blockquote>\n<p>The intention of this last rule is to ensure that a call to a deleted function can be diagnosed at compile time.</p>\n<p>So the following code is ill formed:</p>\n<pre><code>struct Base {\n    virtual void foo();\n};\nstruct Derived : public Base {\n    virtual void foo() = delete;\n};\n</code></pre>\n<p>But the following code is well formed:</p>\n<pre><code>struct Base {\n    virtual void foo() = delete;\n};\nstruct Derived : public Base {\n    virtual void foo() = delete;\n};\n</code></pre>\n<p><a href=\"http://ideone.com/m0sVQa\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>OP had either a compiler bug or QoI issue (it's hard to tell which because he didn't post the whole code) which has since been fixed.</p>\n", "OwnerUserId": "1639256", "LastEditorUserId": "212378", "LastEditDate": "2014-09-27T04:14:26.850", "Id": "26070609", "Score": "1", "CreationDate": "2014-09-27T02:10:03.743", "LastActivityDate": "2014-09-27T04:14:26.850"}, "6466863": {"ParentId": "6466816", "CommentCount": "3", "Body": "<p>My understanding is delete keyword is for deleting default implementation that is generated by compiler. For virtual methods there is no default implementation generated by compiler.</p>\n", "OwnerUserId": "36464", "PostTypeId": "2", "Id": "6466863", "Score": "2", "CreationDate": "2011-06-24T11:03:37.250", "LastActivityDate": "2011-06-24T11:03:37.250"}, "6466816": {"CommentCount": "7", "AcceptedAnswerId": "6467562", "PostTypeId": "1", "LastEditorUserId": "168868", "CreationDate": "2011-06-24T10:57:56.380", "LastActivityDate": "2014-09-27T04:14:26.850", "LastEditDate": "2011-06-24T19:19:52.797", "ViewCount": "301", "FavoriteCount": "2", "Title": "Are virtual method not \"delete\"able in C++0x?", "Id": "6466816", "Score": "4", "Body": "<p>The error message seems to be little mis-leading with the scenario, when we try to <code>delete</code> a <code>virtual</code> method.</p>\n<pre><code>prog.cpp:4:16: error: deleted function 'virtual void Test::foo()'\nprog.cpp:8:2: error: used here\n</code></pre>\n<p>Code</p>\n<pre><code>struct Test : public Base\n{\n  Test() {}\n  virtual void foo () = delete;  // error\n};\n</code></pre>\n<p>Are <code>virtual</code> method not <code>delete</code>able for the same reason, why they cannot remain unimplemented in C++03 ? Is there any way to mention that <code>Test</code> purposely not implementing <code>virtual foo()</code> ?</p>\n", "Tags": "<c++><c++11><virtual>", "OwnerUserId": "514235", "AnswerCount": "5"}, "6466857": {"ParentId": "6466816", "CommentCount": "1", "Body": "<p>Maybe you should not derive from a class that REQUIRES something if your derived class cannot implement it. Probably you don't need to derive from that class in the first place.</p>\n<p>It's like saying \"I'm building a better car. Which is kind of a car but does not implement wheels.\" Are you sure that it is a car then in the first place?</p>\n<p>Or are you asking this just out of curiosity?</p>\n", "OwnerUserId": "551045", "PostTypeId": "2", "Id": "6466857", "Score": "0", "CreationDate": "2011-06-24T11:03:16.133", "LastActivityDate": "2011-06-24T11:03:16.133"}, "bq_ids": {"n4140": {"so_6466816_26070609_0": {"section_id": 7012, "quality": 0.9230769230769231, "length": 12}, "so_6466816_26070609_1": {"section_id": 7017, "quality": 1.0, "length": 19}, "so_6466816_6467562_0": {"section_id": 7040, "quality": 0.625, "length": 5}, "so_6466816_6467562_1": {"section_id": 7040, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_6466816_26070609_0": {"section_id": 6758, "quality": 0.9230769230769231, "length": 12}, "so_6466816_26070609_1": {"section_id": 6763, "quality": 1.0, "length": 19}, "so_6466816_6467562_0": {"section_id": 6785, "quality": 0.625, "length": 5}, "so_6466816_6467562_1": {"section_id": 6785, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_6466816_26070609_0": {"section_id": 8509, "quality": 0.8461538461538461, "length": 11}, "so_6466816_26070609_1": {"section_id": 8514, "quality": 1.0, "length": 19}, "so_6466816_6467562_0": {"section_id": 8537, "quality": 0.625, "length": 5}, "so_6466816_6467562_1": {"section_id": 8537, "quality": 0.6666666666666666, "length": 4}}}, "6467562": {"ParentId": "6466816", "CommentCount": "4", "Body": "<p>The term <em>use</em> has a concrete definition in the standard, and in particular for virtual functions the definition of <em>odr-used</em> is:</p>\n<blockquote>\n<p id=\"so_6466816_6467562_0\">\u00a73.2/2 (C++0x FDIS) [...]A virtual member function is odr-used if it is not pure.[...]</p>\n</blockquote>\n<p>Where <em>odr-used</em> is a new term in the upcoming standard that refers to what the previous standard called plainly <em>used</em>:</p>\n<blockquote>\n<p id=\"so_6466816_6467562_1\">\u00a73.2/2 (current standard) [...]A virtual member function is used if it is not pure.[...]</p>\n</blockquote>\n<p>My take is that the error message employs the term <em>used</em> to refer to <em>odr-used</em> in this particular case, and yes, the reason why this is a violation is exactly the same reason by which you cannot leave a non-pure virtual member function unimplemented.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "6467562", "Score": "9", "CreationDate": "2011-06-24T12:07:33.977", "LastActivityDate": "2011-06-24T12:07:33.977"}});