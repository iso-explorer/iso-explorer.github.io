post_cb({"7468219": {"ParentId": "7468151", "CommentCount": "0", "Body": "<p>Uninitialized local integers are not guaranteed to be 0 in C++. They are \"garbage\", hence they can be any value including 0.</p>\n", "OwnerUserId": "471016", "PostTypeId": "2", "Id": "7468219", "Score": "0", "CreationDate": "2011-09-19T08:29:44.097", "LastActivityDate": "2011-09-19T08:29:44.097"}, "7468185": {"ParentId": "7468151", "CommentCount": "0", "Body": "<p>This is \"undefined behavior\" in C++.</p>\n<p>When you do not initialize a variable in C++ it is not always zero. That is just by chance. The memory is allocated, and the garbage value which was in that memory location previously will be outputted until it is initialized.</p>\n", "OwnerUserId": "932058", "PostTypeId": "2", "Id": "7468185", "Score": "3", "CreationDate": "2011-09-19T08:26:45.767", "LastActivityDate": "2011-09-19T08:26:45.767"}, "7468197": {"ParentId": "7468151", "CommentCount": "5", "Body": "<p>C++ does not initializes variables on declaration it just allocate RAM memory for them. They can by any value before initialize no metter if you use pointer or not.\nYou should always initialize your variables before use.</p>\n", "OwnerUserId": "796078", "PostTypeId": "2", "Id": "7468197", "Score": "0", "CreationDate": "2011-09-19T08:27:48.967", "LastActivityDate": "2011-09-19T08:27:48.967"}, "7468166": {"ParentId": "7468151", "PostTypeId": "2", "CommentCount": "8", "Body": "<blockquote>\n<p id=\"so_7468151_7468166_0\">Well it's understandable, uninitialized integer should be 0</p>\n</blockquote>\n<p>No.</p>\n<p>There is no guarantee of that, it depends on the storage class, If your int is local variable it has a auto storage and it need not be 0.  </p>\n<p>Accessing Unitialized variables causes <strong>Undefined Behavior</strong> and Your code is causing an <strong>Undefined Behavior</strong>. Once there is an Undefined Behavior all bets are off and the behavior cannot be explained.</p>\n<p>Regarding Undefined Behavior,</p>\n<p><strong>C++ Standard section 1.3.24 states:</strong></p>\n<blockquote>\n<p id=\"so_7468151_7468166_1\">Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p><strong>EDIT:</strong><br>\nGiven the above that this is Undefined Behavior and One should not write any code which relies on such behaviors, infact One should not even think of writing such code. I find it irrelevant &amp; unproductive to dig in to the implementations of all those compilers to seek an explanation of why it works this way.</br></p>\n<p>If someone finds this reply hardheaded, You are free to downvote. If the downvote count exceeds the upvotes, I would know the answer is unwelcome and I will delete it.</p>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-09-19T09:08:28.490", "Id": "7468166", "Score": "6", "CreationDate": "2011-09-19T08:25:35.403", "LastActivityDate": "2011-09-19T09:08:28.490"}, "7468362": {"ParentId": "7468151", "CommentCount": "0", "Body": "<p>It's undefined behaviour but here is some speculation as to what might be happening:</p>\n<p>In the first code sample, the address of the variables is never taken so possibly the compiler has chosen to keep them in registers and they never exist in main memory, and the value of the register happens to be 0.</p>\n<p>In the second code sample, the address is taken so the variable has to be in memory (on the stack) so that it can have an address.  It just happens that the existing data there was some random garbage.</p>\n", "OwnerUserId": "79047", "PostTypeId": "2", "Id": "7468362", "Score": "2", "CreationDate": "2011-09-19T08:44:04.737", "LastActivityDate": "2011-09-19T08:44:04.737"}, "7468899": {"ParentId": "7468151", "CommentCount": "0", "Body": "<p>You've got a bunch of variables that are not written to, ever. A compiler may decide not to allocate storage for such variables. This may seem harsh, but it's reasonable: modern compilers allocate variable storage on a fine-grained level, and some variables may be unused on some branches. Why bother allocating memory when it's not needed ?</p>\n<p>Now, what happens if you read from a \"variable\" that wasn't allocated memory because you never wrote to it? You'll get some random data, quite possibly another variable. Or a segfault - Undefined Behavior comes in many forms.</p>\n<p>Now take your second example: here you <em>do</em> write to one variable, <code>p</code>. Since <code>a</code> didn't need any memory allocation (lacking a write), it may very well alias <code>p</code>. And the value of <code>p</code>, reinterpreted as an <code>int</code> could very well be 1792816880.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "7468899", "Score": "1", "CreationDate": "2011-09-19T09:33:40.270", "LastActivityDate": "2011-09-19T09:33:40.270"}, "7468177": {"ParentId": "7468151", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The value of an uninitialized value is not defined. There is no default value. Any value could show up.</p>\n<p>Any seemingly unrelated operation you do could change the underlying value of the garbage which the software will give you as an answer to your query of an undefined value.</p>\n<p>The bottom line is, do not speculate about what undefined behaviour should happen. It is simply undefined - do not write code with undefined behaviour.</p>\n", "OwnerUserId": "96780", "LastEditorUserId": "96780", "LastEditDate": "2011-09-19T08:38:38.480", "Id": "7468177", "Score": "2", "CreationDate": "2011-09-19T08:26:06.237", "LastActivityDate": "2011-09-19T08:38:38.480"}, "bq_ids": {"n4140": {"so_7468151_7468166_1": {"section_id": 5768, "quality": 1.0, "length": 26}}, "n3337": {"so_7468151_7468166_1": {"section_id": 5541, "quality": 1.0, "length": 26}}, "n4659": {"so_7468151_7468166_1": {"section_id": 7225, "quality": 1.0, "length": 26}}}, "7468151": {"CommentCount": "3", "AcceptedAnswerId": "7468166", "PostTypeId": "1", "LastEditorUserId": "861193", "CreationDate": "2011-09-19T08:23:50.207", "LastActivityDate": "2011-09-19T09:54:23.480", "LastEditDate": "2011-09-19T09:54:23.480", "ViewCount": "1239", "FavoriteCount": "1", "Title": "Assigning pointer to uninitialized variable changes it value?", "Id": "7468151", "Score": "3", "Body": "<p>I'm playing with c++ in VisualStudio2010</p>\n<p>Please explain why IT happens:</p>\n<pre><code>int a, b;\nint *p, *q;\ncout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b;\n</code></pre>\n<p>prints out \"0 0\". Well it's understandable, uninitialized integer should be 0;\nbut</p>\n<pre><code>int a, b;\nint *p, *q;\np = &amp;a;\ncout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b;\n</code></pre>\n<p>output is \"1792816880 0\"</p>\n<p>So if I assign pointer to uninitialized variable it change value from default.\nWhy?</p>\n<p><strong>Edit</strong> clarification: the question was not about value of uninitialized variable</p>\n<pre><code>int a; int *p;\ncout &lt;&lt; a; // would be 0, because it's loacal variable\np = &amp;a;\ncout &lt;&lt; a; //not 0;\n</code></pre>\n<p>How getting pointer of <strong>a</strong> could change it value?\nwhen we init variable, we allocate space, some bits, they could be anything, but \"p = &amp;a\" does it actually change bits in this space?</p>\n", "Tags": "<c++><visual-studio-2010><pointers>", "OwnerUserId": "861193", "AnswerCount": "7"}});