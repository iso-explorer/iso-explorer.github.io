post_cb({"bq_ids": {"n4140": {"so_24644982_24645738_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 7043}, "so_24644982_24645738_0": {"length": 7, "quality": 1.0, "section_id": 5403}}, "n3337": {"so_24644982_24645738_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6788}, "so_24644982_24645738_0": {"length": 7, "quality": 1.0, "section_id": 5198}}, "n4659": {"so_24644982_24645738_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 8540}, "so_24644982_24645738_0": {"length": 7, "quality": 1.0, "section_id": 6851}}}, "24645738": {"Id": "24645738", "PostTypeId": "2", "Body": "<p>In your <code>C</code> example, <code>aa</code> is defined twice, which violates the \"one definition rule\". This would be equally true if it were <code>C++</code>.</p>\n<p>In your <code>C++</code> example, <code>a::doit</code> is defined twice, but it is implicitly declared <code>inline</code>. Member functions defined within a class are implicitly inline per <code>[dcl.fct.spec]/3</code>:</p>\n<blockquote>\n<p id=\"so_24644982_24645738_0\">A function defined within a class definition is an inline function. ...</p>\n</blockquote>\n<p><code>inline</code> functions are an exception to the one definition rule (in fact, this is the only meaning of <code>inline</code> required by the standard) per <code>[basic.def.odr]/5</code>.</p>\n<blockquote>\n<p id=\"so_24644982_24645738_1\">There can be more than one definition of a ... inline function with external linkage (7.1.2) ... in a program, provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements. ...</p>\n</blockquote>\n<p>The requirements essentially boil down to a requirement that the definitions be identical in every translation unit where they appear.</p>\n<p>Had you declared <code>aa</code> as <code>inline</code>, similar rules would have applied and your code would have compiled and worked as expected.</p>\n", "LastEditorUserId": "485561", "LastActivityDate": "2014-07-09T05:09:50.037", "Score": "0", "CreationDate": "2014-07-09T05:04:17.503", "ParentId": "24644982", "CommentCount": "0", "OwnerUserId": "485561", "LastEditDate": "2014-07-09T05:09:50.037"}, "24644982": {"ViewCount": "587", "Body": "<p><strong>C Example</strong></p>\n<p>bb.c:</p>\n<pre><code>#include \"bb.h\"\n#include &lt;stdio.h&gt;\n\nvoid bb() {\n    printf(\"aa()...\\n\");\n    aa();\n}\n</code></pre>\n<p>main.c:</p>\n<pre><code>#include \"aa.h\"\n#include \"bb.h\"\n\nint main(int argc, const char** argv) {\n\n    aa();\n    bb();\n\n    return 0;\n}\n</code></pre>\n<p>aa.h:</p>\n<pre><code>#ifndef aa_h\n#define aa_h\n\n#include &lt;stdio.h&gt;\n\nvoid aa() {\n    printf(\"aa()...\\n\");\n}\n\n#endif // aa_h\n</code></pre>\n<p>bb.h:</p>\n<pre><code>#ifndef bb_h\n#define bb_h\n\n#include \"aa.h\"\n\nvoid bb();\n\n#endif // bb_h\n</code></pre>\n<p><strong>C Result</strong></p>\n<p>Compiled with clang main.c bb.c:</p>\n<pre><code>duplicate symbol _aa in:\n    /var/folders/f2/2w4c0_n519g8cd2k6xv66hc80000gn/T/main-OsFJVB.o\n    /var/folders/f2/2w4c0_n519g8cd2k6xv66hc80000gn/T/bb-OkcMzn.o\nld: 1 duplicate symbol for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n<p><strong>C++ Example</strong></p>\n<p>b.cpp:</p>\n<pre><code>#include \"b.hpp\"\n\nvoid b::do_something_else() {\n    std::cout &lt;&lt; \"b::do_something_else() being called...\" &lt;&lt; std::endl;\n    a a;\n    a.doit();\n}\n</code></pre>\n<p>main.cpp:</p>\n<pre><code>#include \"a.hpp\"\n#include \"b.hpp\"\n\nint main() {\n\n    a a;\n    b b;\n\n    a.doit();\n    b.do_something_else();\n\n    return 0;\n}\n</code></pre>\n<p>a.hpp:</p>\n<pre><code>#ifndef a_hpp\n#define a_hpp\n\n#include &lt;iostream&gt;\n\nclass a{\npublic:\n\n    void doit() {\n        std::cout &lt;&lt; \"a::doit() being called...\" &lt;&lt; std::endl;\n    }\n\n};\n\n#endif // a_hpp\n</code></pre>\n<p>b.hpp:</p>\n<pre><code>#ifndef b_hpp\n#define b_hpp\n\n#include \"a.hpp\"\n\n#include &lt;iostream&gt;\n\nclass b{\npublic:\n\n    void do_something_else();\n\n};\n\n#endif // b_hpp\n</code></pre>\n<p><strong>C++ Result</strong></p>\n<p>The above compiles fine with <code>clang++ main.cpp b.cpp</code> and the output to the program is:</p>\n<pre><code>a::doit() being called...\nb::do_something_else() being called...\na::doit() being called...\n</code></pre>\n<p><strong>Questions</strong></p>\n<ol>\n<li><p>Why does the duplicate error <em>not</em> occur with the C++ version?</p></li>\n<li><p>Does the fact that the function <code>void a::doit()</code> is <em>defined</em> in the header file rather than a source file mean that the compiler will automatically inline the function?</p></li>\n</ol>\n", "Title": "Why do C++ member functions defined in a class not produce duplicate symbols, whereas they do in C?", "CreationDate": "2014-07-09T03:35:49.783", "LastActivityDate": "2014-07-09T05:09:50.037", "CommentCount": "7", "LastEditDate": "2014-07-09T04:32:35.287", "PostTypeId": "1", "LastEditorUserId": "65863", "Id": "24644982", "Score": "1", "OwnerUserId": "1420752", "Tags": "<c++><c><inline-functions><duplicate-symbol>", "AnswerCount": "3"}, "24645071": {"Id": "24645071", "PostTypeId": "2", "Body": "<p>In C++ class methods are not top-level symbols, but are effectively scoped names within their class hierarchy.</p>\n<p>This means that you have defined in C++ two <code>doit()</code> methods, <code>a::doit()</code> and <code>b::doit()</code></p>\n<p>In C, you have attempted to define one <code>aa()</code> function twice.</p>\n<p>Note that C++ will give an error too if you define the <code>doit()</code> method twice, <em>within the scope of the same class</em>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass a {\n\n  public:\n\n  void doit() {\n    std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl;\n  }\n\n  void doit() {\n    std::cout &lt;&lt; \"goodbye\" &lt;&lt; std::endl;\n  }\n};\n</code></pre>\n<p>leads to</p>\n<pre><code>ed.cpp:11:8: error: \u2018void a::doit()\u2019 cannot be overloaded\n   void doit() {\n        ^\ned.cpp:7:8: error: with \u2018void a::doit()\u2019\n   void doit() {\n        ^\n</code></pre>\n", "LastActivityDate": "2014-07-09T03:46:39.000", "CommentCount": "16", "CreationDate": "2014-07-09T03:46:39.000", "ParentId": "24644982", "Score": "2", "OwnerUserId": "302139"}, "24645072": {"Id": "24645072", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_24644982_24645072_0\">Why does the duplicate error not occur with the C++ version?</p>\n</blockquote>\n<p>Because there is no duplication. C++ member functions are scoped by the class they are defined in. b::doit() isn't a duplicate of a::doit().</p>\n<blockquote>\n<p id=\"so_24644982_24645072_1\">Does the fact that the function void a::doit() is defined in the header file rather than a source file mean that the compiler will automatically inline the function?</p>\n</blockquote>\n<p>No, but it means it is possible.</p>\n", "LastActivityDate": "2014-07-09T03:46:46.077", "CommentCount": "0", "CreationDate": "2014-07-09T03:46:46.077", "ParentId": "24644982", "Score": "0", "OwnerUserId": "207421"}});