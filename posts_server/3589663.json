post_cb({"bq_ids": {"n4140": {"so_3589663_3589663_1": {"length": 9, "quality": 0.9, "section_id": 7217}}, "n3337": {"so_3589663_3589663_1": {"length": 9, "quality": 0.9, "section_id": 6961}}, "n4659": {"so_3589663_3589663_1": {"length": 7, "quality": 0.7, "section_id": 8726}}}, "3589690": {"Id": "3589690", "PostTypeId": "2", "Body": "<p>Unsigned integer types have two important properties that differentiate them from signed integer types: \"shifted\" range (no negative subrange, but positive subrange twice as wide) and modulo arithmetic. For integer types these properties are important enough to justify the existence of unsigned types.</p>\n<p>With floating-types neither of these properties are immediately applicable. With floating-point types the main issue is not in their range (for many purposes it can be thought of as virtually infinite), but rather in precision. And modulo arithmetic is not naturally applicable to non-integer types. For this reason, it didn't make much sense to introduce unsigned floating-point types, i.e. it didn't make much sense to flip-flop the role of just one bit in the floating-point representation.</p>\n<p>It should also be noted that the above reasoning should probably be used as rationale behind introducing unsigned integer types (and not introducing unsigned floating-point types) in popular hardware and corresponding hardware-derived standards. What we have in C and C++ was essentially inherited from the hardware capabilities and these standards.</p>\n<p>Of course, from the conceptual point if view, it would be quite logical to have unsigned floating-point types in the language, just for the sake of consistency. But, alas they are not there.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2013-07-19T07:19:48.510", "Score": "21", "CreationDate": "2010-08-28T06:09:41.523", "ParentId": "3589663", "CommentCount": "2", "LastEditDate": "2013-07-19T07:19:48.510", "OwnerUserId": "187690"}, "3589674": {"Id": "3589674", "PostTypeId": "2", "Body": "<p>All floating points are signed. C++ follows the <a href=\"http://en.wikipedia.org/wiki/IEEE_754\" rel=\"noreferrer\">IEEE 754</a> standard, which is the most common hardware implementation and following it, floats are always signed.</p>\n<p>As the floats already take up at least 32 bits, the gain of having a software implementation that would regain that 1 bit is insignificant compared to the usefullness of such an implementation.</p>\n", "LastActivityDate": "2010-08-28T06:06:01.273", "Score": "6", "CreationDate": "2010-08-28T06:06:01.273", "ParentId": "3589663", "CommentCount": "5", "OwnerUserId": "233522"}, "3589663": {"ViewCount": "17047", "Body": "<blockquote>\n<p id=\"so_3589663_3589663_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/512022/why-doesnt-c-have-unsigned-floats\">Why doesn't C have unsigned floats?</a> </br></p>\n</blockquote>\n<p>The question is probably very basic and probably answered many time earlier, but I want to understand why C++ does not have unsigned floating point types, even though floating point literals can be signed or unsigned.</p>\n<blockquote>\n<p id=\"so_3589663_3589663_1\">$3.9.1/8- \"There are three floating\n  point types: float, double, and long\n  double.\"</p>\n</blockquote>\n", "AcceptedAnswerId": "3589690", "Title": "Why no unsigned floating point types?", "CreationDate": "2010-08-28T06:01:24.263", "Id": "3589663", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:03:04.477", "LastEditorUserId": "-1", "LastActivityDate": "2013-07-19T07:19:48.510", "ClosedDate": "2010-08-28T06:47:19.567", "Score": "11", "OwnerUserId": "418110", "Tags": "<c++><floating-point>", "AnswerCount": "2"}});