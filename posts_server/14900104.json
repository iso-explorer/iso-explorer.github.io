post_cb({"14900136": {"ParentId": "14900104", "CommentCount": "1", "Body": "<p>Yes -- once you reserve a specific capacity, the vector will not be reallocated until you exceed the capacity you've set<sup>1</sup>. Exactly how many more items you may be able to push without reallocation isn't specified, but you are guaranteed at least that many.</p>\n<hr>\n<ol>\n<li>In particular, pointers and iterators into the vector are guaranteed to remain valid until you exceed the specified capacity.</li>\n</ol>\n</hr>", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "14900136", "Score": "7", "CreationDate": "2013-02-15T17:32:18.597", "LastActivityDate": "2013-02-15T17:32:18.597"}, "14900104": {"CommentCount": "4", "ViewCount": "522", "CreationDate": "2013-02-15T17:30:19.870", "LastActivityDate": "2013-02-15T17:36:49.867", "Title": "When does vector::push_back increase capacity?", "AcceptedAnswerId": "14900136", "PostTypeId": "1", "Id": "14900104", "Score": "3", "Body": "<p>I'm using a bunch of <code>std::vectors</code> by setting their capacity at the beginning and using <code>push_back</code> to slowly fill them up. Most of these vectors will have the same size (16 elements), although some might get larger. If I use <code>push_back</code> 16 times on a vector with size 0 and capacity 16 initially, can I be sure that capacity will be exactly 16 after the <code>push_backs</code>?</p>\n", "Tags": "<c++><stdvector>", "OwnerUserId": "333749", "AnswerCount": "3"}, "14900222": {"ParentId": "14900104", "CommentCount": "0", "Body": "<p>Yup.</p>\n<p>23.3.6.3p6:</p>\n<blockquote>\n<p id=\"so_14900104_14900222_0\">No reallocation shall take place during insertions that happen after a call to <code>reserve()</code> until the time when an insertion would make the size of the vector greater than the value of <code>capacity()</code>.</p>\n</blockquote>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "14900222", "Score": "2", "CreationDate": "2013-02-15T17:36:49.867", "LastActivityDate": "2013-02-15T17:36:49.867"}, "14900172": {"ParentId": "14900104", "CommentCount": "0", "Body": "<p><code>23.3.6.5 [vector modi\ufb01ers]</code></p>\n<pre><code>void push_back(const T&amp; x);\nvoid push_back(T&amp;&amp; x);\n</code></pre>\n<blockquote>\n<p id=\"so_14900104_14900172_0\">Remarks: Causes reallocation if the new size is greater than the old capacity</p>\n</blockquote>\n<p>Pretty much self-explanatory.</p>\n", "OwnerUserId": "752976", "PostTypeId": "2", "Id": "14900172", "Score": "2", "CreationDate": "2013-02-15T17:34:04.670", "LastActivityDate": "2013-02-15T17:34:04.670"}, "bq_ids": {"n4140": {"so_14900104_14900172_0": {"section_id": 986, "quality": 0.8888888888888888, "length": 8}, "so_14900104_14900222_0": {"section_id": 972, "quality": 1.0, "length": 21}}, "n3337": {"so_14900104_14900172_0": {"section_id": 971, "quality": 0.8888888888888888, "length": 8}, "so_14900104_14900222_0": {"section_id": 961, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_14900104_14900172_0": {"section_id": 1049, "quality": 0.8888888888888888, "length": 8}, "so_14900104_14900222_0": {"section_id": 1034, "quality": 1.0, "length": 21}}}});