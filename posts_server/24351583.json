post_cb({"24351869": {"ParentId": "24351583", "CommentCount": "0", "Body": "<p>1) You must use pointers.\n2) If you want to get A::f(), you must use A* type variable, but class instance can be of type B* or A*.</p>\n<pre><code>    #include &lt;iostream&gt;\n    using namespace std;\n    class A {\n    public:\n        virtual void f(int a) {cout &lt;&lt; a &lt;&lt; \" A::f(int)\" &lt;&lt; endl; }\n        virtual void f(){cout &lt;&lt; 5 &lt;&lt; \" A::f()\" &lt;&lt; endl;}\n    };\n    class B:public A {\n    public:\n        virtual void f(int a) {cout &lt;&lt; a+1 &lt;&lt; \" B::f(int)\" &lt;&lt; endl; }\n    };\n    int main() {\n        A *a;\n        a = new B();\n        a-&gt;f(1);\n        a-&gt;f();\n        delete a;\n        a = new A();\n        a-&gt;f(1);\n        a-&gt;f();\n        delete a;\n        return 0;\n    }\n</code></pre>\n<p>Output:</p>\n<pre><code>    2 B::f(int)\n    5 A::f()\n    1 A::f(int)\n    5 A::f()\n</code></pre>\n", "OwnerUserId": "1742529", "PostTypeId": "2", "Id": "24351869", "Score": "0", "CreationDate": "2014-06-22T13:45:40.860", "LastActivityDate": "2014-06-22T13:45:40.860"}, "24351606": {"ParentId": "24351583", "LastEditDate": "2014-06-27T14:43:01.683", "CommentCount": "0", "CreationDate": "2014-06-22T13:16:09.780", "OwnerUserId": "1141471", "LastEditorUserId": "1141471", "PostTypeId": "2", "Id": "24351606", "Score": "8", "Body": "<blockquote>\n<p id=\"so_24351583_24351606_0\">it seems that void f() didn't inherited?</p>\n</blockquote>\n<p>The name f in class A <em>shadows</em> name f in B. You can still access foo() from B this way</p>\n<pre><code>A a;\na.B::f();\n</code></pre>\n<p>Other option is to redeclare function foo of B in the scope of A:</p>\n<pre><code>class A : public B{\npublic:\n\n    virtual void f(int a) {}\n    using B::foo;\n};\n</code></pre>\n<hr>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 10.2 Member name lookup</p>\n<blockquote>\n<p id=\"so_24351583_24351606_1\">1) Member name lookup determines the meaning of a name (id-expression)\n  in a class scope (3.3.7). Name lookup can result in an ambiguity, in\n  which case the program is ill-formed. For an id-expression, name\n  lookup begins in the class scope of this; for a qualified-id, name\n  lookup begins in the scope of the nested- name-specifier. Name lookup\n  takes place before access control (3.4, Clause 11).</p>\n<p id=\"so_24351583_24351606_2\">2) The following steps define the result of name lookup for a member\n  name f in a class scope C.</p>\n<p id=\"so_24351583_24351606_3\">3) The lookup set for f in C, called S(f, C), consists of two\n  component sets: the declaration set, a set of members named f; and the\n  subobject set, a set of subobjects where declarations of these members\n  (possibly including using-declarations) were found. In the declaration\n  set, using-declarations are replaced by the members they designate,\n  and type declarations (including injected-class-names) are replaced by\n  the types they designate. S(f, C) is calculated as follows:</p>\n<p id=\"so_24351583_24351606_4\">4) If C contains a declaration of the name f, the declaration set\n  contains every declaration of f declared in C that satisfies the\n  requirements of the language construct in which the lookup occurs. [\n  Note: Looking up a name in an elaborated-type-specifier (3.4.4) or\n  base-specifier (Clause 10), for instance, ignores all non- type\n  declarations, while looking up a name in a nested-name-specifier\n  (3.4.3) ignores function, variable, and enumerator declarations. As\n  another example, looking up a name in a using-declaration (7.3.3)\n  includes the declaration of a class or enumeration that would\n  ordinarily be hidden by another declaration of that name in the same\n  scope. \u2014 end note ] If the resulting declaration set is not empty, the\n  subobject set contains C itself, and calculation is complete.</p>\n<p id=\"so_24351583_24351606_5\">5) Otherwise (i.e., C does not contain a declaration of f or the\n  resulting declaration set is empty), S(f, C) is initially empty. If C\n  has base classes, calculate the lookup set for f in each direct base\n  class subobject Bi , and merge each such lookup set S(f, Bi ) in turn\n  into S(f, C).</p>\n</blockquote>\n</hr>", "LastActivityDate": "2014-06-27T14:43:01.683"}, "24351612": {"ParentId": "24351583", "CommentCount": "0", "Body": "<p>Your declaration of <code>A::f(int a)</code> hides all signatures <code>B::f</code> unless they are exposed to the derived class.  There are 2 good options for exposing the \"hidden\" methods.</p>\n<p><strong>Option 1</strong></p>\n<pre><code>class A:public B{\npublic:\n    using B::f;\n    virtual void f(int a){}\n};\n</code></pre>\n<p><strong>Option 2</strong></p>\n<pre><code>class A:public B{\npublic:\n    virtual void f(int a){}\n    virtual void f(){ B::f(); }\n};\n</code></pre>\n", "OwnerUserId": "1303358", "PostTypeId": "2", "Id": "24351612", "Score": "6", "CreationDate": "2014-06-22T13:17:18.107", "LastActivityDate": "2014-06-22T13:17:18.107"}, "24351583": {"CommentCount": "3", "ViewCount": "113", "PostTypeId": "1", "LastEditorUserId": "2794292", "CreationDate": "2014-06-22T13:12:59.183", "LastActivityDate": "2014-06-27T14:43:01.683", "Title": "Unrecognized inherited function", "AcceptedAnswerId": "24351606", "LastEditDate": "2014-06-22T13:18:50.527", "Id": "24351583", "Score": "4", "Body": "<p>Running this C++ Source on Visual C++ 2010:</p>\n<pre><code>class B{\npublic:\n    virtual void f(int a){}\n    virtual void f(){}\n};\nclass A:public B{\npublic:\n    virtual void f(int a){}\n};\nint main(){\nA a;\na.f();\nreturn 0;\n}\n</code></pre>\n<p>Leads to the following error:</p>\n<p><code>IntelliSense: too few arguments in function call</code></p>\n<p>In other words, it seems that <code>void f()</code> didn't inherited? </p>\n<p>What is the problem? </p>\n", "Tags": "<c++><inheritance>", "OwnerUserId": "1798362", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24351583_24351606_5": {"section_id": 6993, "quality": 1.0, "length": 27}, "so_24351583_24351606_3": {"section_id": 6991, "quality": 0.8571428571428571, "length": 36}, "so_24351583_24351606_4": {"section_id": 6992, "quality": 0.8823529411764706, "length": 60}, "so_24351583_24351606_2": {"section_id": 6990, "quality": 0.9090909090909091, "length": 10}, "so_24351583_24351606_1": {"section_id": 6989, "quality": 0.8717948717948718, "length": 34}}, "n3337": {"so_24351583_24351606_5": {"section_id": 6739, "quality": 1.0, "length": 27}, "so_24351583_24351606_3": {"section_id": 6737, "quality": 0.9047619047619048, "length": 38}, "so_24351583_24351606_4": {"section_id": 6738, "quality": 0.8823529411764706, "length": 60}, "so_24351583_24351606_2": {"section_id": 6736, "quality": 0.9090909090909091, "length": 10}, "so_24351583_24351606_1": {"section_id": 6735, "quality": 0.8717948717948718, "length": 34}}, "n4659": {"so_24351583_24351606_1": {"section_id": 8487, "quality": 0.8717948717948718, "length": 34}, "so_24351583_24351606_3": {"section_id": 8489, "quality": 0.8571428571428571, "length": 36}, "so_24351583_24351606_4": {"section_id": 8490, "quality": 0.8823529411764706, "length": 60}, "so_24351583_24351606_2": {"section_id": 8488, "quality": 0.9090909090909091, "length": 10}, "so_24351583_24351606_5": {"section_id": 8491, "quality": 1.0, "length": 27}}}});