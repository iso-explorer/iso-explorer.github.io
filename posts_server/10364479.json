post_cb({"10364505": {"ParentId": "10364479", "CommentCount": "0", "Body": "<p>Technically, the memory where <code>a</code> was stored is available for us by other contexts, so to answer your question, yes.</p>\n<p>This depends on some factors though. There <em>might</em> not even be memory to speak of. In your particular example, the optimizer might just cut everything out. Even if you do something like <code>cout &lt;&lt; a</code>, a <code>5</code> might be inlined which doesn't reside in memory.</p>\n<p>Note that if you pass by reference, the lifetime is that of the original variable.</p>\n<p>Also, just because it's deallocated that doesn't mean the memory is automatically cleaned afterwards. The value might still reside there until that memory is reused.</p>\n<p><strong>Your example</strong> exibits undefined behavior:</p>\n<pre><code>void fun3(int *&amp;p, int a){\n        p = &amp;a;\n}\n</code></pre>\n<p><code>a</code> is a local variable, and you take its address and assign it to <code>p</code>, which you then use outside the function. Anything can happen.</p>\n", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "10364505", "Score": "2", "CreationDate": "2012-04-28T14:39:23.423", "LastActivityDate": "2012-04-28T14:39:23.423"}, "10364501": {"ParentId": "10364479", "CommentCount": "0", "Body": "<p>Yes, the storage allocated for <code>a</code> gets deallocated when the function exits.</p>\n", "OwnerUserId": "367273", "PostTypeId": "2", "Id": "10364501", "Score": "1", "CreationDate": "2012-04-28T14:39:12.950", "LastActivityDate": "2012-04-28T14:39:12.950"}, "10364487": {"ParentId": "10364479", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-04-28T14:38:06.073", "Score": "1", "LastEditorUserId": "452307", "LastEditDate": "2012-04-28T14:49:51.840", "Id": "10364487", "OwnerUserId": "452307", "Body": "<p>Yes <code>a</code> is deallocated when the scope of the function ends.</p>\n<p><strong>So What is the reason for this output ?</strong><br>\nAccessing the contents of an automatic variable through an pointer to the memory location beyond the scope in which the variable exists is an Undefined Behavior as per the standard.</br></p>\n<p>Your program does exactly that, so it has an <strong>Undefined Behavior(UB)</strong>. With UB your program can show any behavior valid or invalid<sup>Ref 1</sup>.    </p>\n<p><sup>Ref 1</sup><strong>C++03 section 1.3.24:</strong></p>\n<blockquote>\n<p id=\"so_10364479_10364487_0\">Permissible undefined behavior ranges from <strong>ignoring the situation completely with unpredictable results</strong>, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n", "LastActivityDate": "2012-04-28T14:49:51.840"}, "bq_ids": {"n4140": {"so_10364479_10364487_0": {"section_id": 5768, "quality": 1.0, "length": 26}}, "n3337": {"so_10364479_10364487_0": {"section_id": 5541, "quality": 1.0, "length": 26}}, "n4659": {"so_10364479_10364487_0": {"section_id": 7225, "quality": 1.0, "length": 26}}}, "10364479": {"CommentCount": "1", "ViewCount": "200", "PostTypeId": "1", "ClosedDate": "2012-04-28T18:31:53.037", "LastEditorUserId": "-1", "CreationDate": "2012-04-28T14:37:30.840", "LastActivityDate": "2012-04-28T14:49:51.840", "Title": "When Automatic Memory Deallocated?", "AcceptedAnswerId": "10364487", "LastEditDate": "2017-05-23T10:34:42.040", "Id": "10364479", "Score": "0", "Body": "<blockquote>\n<p id=\"so_10364479_10364479_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope\">Can a local variable's memory be accessed outside its scope?</a> </br></p>\n</blockquote>\n<p>When Automatic Memory Deallocated ?</p>\n<pre><code>void fun3(int a){\n    a = 5;\n}\n</code></pre>\n<p>Does 'a' deallocated when the function end ?</p>\n<p>Yes !</p>\n<p>So What is the reason for this output ?\n<a href=\"http://ideone.com/2ZJ57\" rel=\"nofollow noreferrer\">http://ideone.com/2ZJ57</a></p>\n", "Tags": "<c++>", "OwnerUserId": "423903", "AnswerCount": "3"}});