post_cb({"bq_ids": {"n4140": {"so_31527219_31527797_4": {"length": 11, "quality": 0.9166666666666666, "section_id": 6714}, "so_31527219_31527797_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 7212}, "so_31527219_31527797_2": {"length": 19, "quality": 1.0, "section_id": 7216}, "so_31527219_31527797_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 7211}, "so_31527219_31527797_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 7217}}, "n3337": {"so_31527219_31527797_4": {"length": 11, "quality": 0.9166666666666666, "section_id": 6469}, "so_31527219_31527797_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 6956}, "so_31527219_31527797_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 6961}, "so_31527219_31527797_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 6955}, "so_31527219_31527797_2": {"length": 19, "quality": 1.0, "section_id": 6960}}, "n4659": {"so_31527219_31527797_4": {"length": 9, "quality": 0.75, "section_id": 8209}, "so_31527219_31527797_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 8721}, "so_31527219_31527797_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 8726}, "so_31527219_31527797_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 8720}, "so_31527219_31527797_2": {"length": 19, "quality": 1.0, "section_id": 8725}}}, "31527219": {"ViewCount": "70", "Body": "<p>Is it possible, at least theoretically, that cstdint typedefs bind to some implementation specific types std::numeric_limits is not specialized for?</p>\n<p>According <a href=\"http://www.cplusplus.com/reference/limits/numeric_limits\" rel=\"nofollow\">http://www.cplusplus.com/reference/limits/numeric_limits</a> , let me quote, \"<em>[std::numeric_limits] is specialized for every fundamental arithmetic type, with its members describing the properties of type T. This template shall not be specialized for any other type.</em>\"</p>\n<p>According to <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/types/numeric_limits</a> , let me quote again, \"<em>implementations may provide specializations of std::numeric_limits for implementation-specific types</em>\".</p>\n<p>\"<em>May</em>\", cppreference says. So they don't have to. </p>\n<p>And finally, according to <a href=\"http://www.cplusplus.com/reference/cstdint\" rel=\"nofollow\">http://www.cplusplus.com/reference/cstdint</a> , the typedefs defined in the header \"<em>are typedefs of fundamental integral types or extended integral types</em>\".</p>\n<p>So, to sum up - it seems that cstdint typedefs might bind to <em>extended integral types</em> (whatever they are), which are not <em>fundamental integral types</em> (again, whatever they are), and therefore might be incompatible with std::numeric_limits . Is this correct?</p>\n<p>However, the documentations I linked to seem to be slightly inconsistent on one point. Isn't cplusplus.com's prohibition that std::numeric_limits must not be specialized for any non-fundamental arithmetic type in opposition of cppreference's allowance that std::numeric_limits might be specialized for implementation-specific types? Unless, of course, these <em>implementation-specific</em> types actually <strong>are</strong> <em>fundamental integral types</em>, in which case, hopefully, std::numeric_limits would have to be specialized for all cstdint typedefs.</p>\n<p>The documentations confuse me. So I ask my question here :)</p>\n<p>EDIT.</p>\n<p>According to <a href=\"http://eel.is/c++draft/cstdint\" rel=\"nofollow\">http://eel.is/c++draft/cstdint</a> , cstdint must bind to integer types. And according to <a href=\"http://eel.is/c++draft/limits.numeric\" rel=\"nofollow\">http://eel.is/c++draft/limits.numeric</a> , \"<em>Specializations shall be provided for each arithmetic type, both floating point and integer, including bool</em>\". Is the understanding that <em>integer type</em> is an <em>arithmetic type</em> and therefore std::numeric_limits must be specialized for cstdint typedefs correct?</p>\n", "AcceptedAnswerId": "31527797", "Title": "Can cstdint typedefs bind to some implementation specific types std::numeric_limits is not specialized for?", "CreationDate": "2015-07-20T22:12:16.427", "Id": "31527219", "CommentCount": "2", "LastEditDate": "2016-11-19T18:22:44.087", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2016-11-19T18:22:44.087", "Score": "0", "OwnerUserId": "4385532", "Tags": "<c++><c++11><numeric-limits><cstdint>", "AnswerCount": "1"}, "31527797": {"Id": "31527797", "PostTypeId": "2", "Body": "<p>The specializations such as <code>std::numeric_limits&lt;std::int_fast32_t&gt;</code> must exist.</p>\n<p>3.9.1/2:</p>\n<blockquote>\n<p id=\"so_31527219_31527797_0\">There are five <em>standard signed integer types</em>: \"<code>signed char</code>\", \"<code>short int</code>\", \"<code>int</code>\", \"<code>long int</code>\", and \"<code>long long int</code>\".  ...  There may also be implementation-defined <em>extended signed integer types</em>.  The standard and extended signed integer types are collectively called <em>signed integer types</em>.</p>\n</blockquote>\n<p>3.9.1/3:</p>\n<blockquote>\n<p id=\"so_31527219_31527797_1\">For each of the standard signed integer types, there exists a corresponding (but different) <em>standard unsigned integer type</em>....  Likewise, for each of the extended signed integer types there exists a corresponding <em>extended unsigned integer type</em>....  The standard and extended unsigned integer types are collectively called <em>unsigned integer types</em>.</p>\n</blockquote>\n<p>3.9.1/7:</p>\n<blockquote>\n<p id=\"so_31527219_31527797_2\">Types <code>bool</code>, <code>char</code>, <code>char16_t</code>, <code>char32_t</code>, <code>wchar_t</code>, and the signed and unsigned integer types are collectively called <em>integral</em> types.  A synonym for integral type is <em>integer type</em>.</p>\n</blockquote>\n<p>3.9.1/8:</p>\n<blockquote>\n<p id=\"so_31527219_31527797_3\"><em>Integral</em> and <em>floating</em> types are collectively called <em>arithmetic</em> types.  Specializations of the standard template <code>std::numeric_limits</code> (18.3) shall specify the maximum and minimum values of each arithmetic type for an implementation.</p>\n</blockquote>\n<p>18.3.2.1/2:</p>\n<blockquote>\n<p id=\"so_31527219_31527797_4\">Specializations [of <code>numeric_limits</code>] shall be provided for each arithmetic type, both floating point and integer, including <code>bool</code>.</p>\n</blockquote>\n<p>18.4.1:</p>\n<pre><code>namespace std {\n  typedef signed_integer_type int8_t;    // optional\n  //...\n  typedef unsigned_integer_type uint8_t; // optional\n  //...\n}\n</code></pre>\n<p>So the types defined in <code>&lt;cstdint&gt;</code> might be extended types, but are definitely integer types and therefore must have corresponding specializations of <code>std::numeric_limits</code>.</p>\n<p>Also, all integral types are \"fundamental\" in the sense used in the Standard (3.9), though not all are standard types.</p>\n", "LastActivityDate": "2015-07-20T23:09:31.093", "Score": "4", "CreationDate": "2015-07-20T23:09:31.093", "ParentId": "31527219", "CommentCount": "0", "OwnerUserId": "459640"}});