post_cb({"16778393": {"Id": "16778393", "PostTypeId": "2", "Body": "<p>It is for additional cleanup that the members themselves are not responsible for. Or in the case of resource management to make sure the resources associated with he object are correctly released. Remember not all members have destructors that will be called (pointers don't have destructors). So if you have pointers you need to manually manage them. </p>\n<p>Example resource management with pointers.</p>\n<pre><code>shared_ptr::~shared_ptr()\n{\n    if (decrementReferenceCountAndCheckForZero())\n    {\n        cleanupResources();\n    }\n}\n</code></pre>\n<p>Example. Working with frameworks. None of the members know about the framework but the worker does.</p>\n<pre><code>MyWorker::MyWorker()\n{\n     Framwork::Register(this);\n}\nMyWorker::~MyWorker()\n{\n    Framework::Unrigester(this);\n}\n</code></pre>\n", "LastActivityDate": "2013-05-27T18:04:54.303", "CommentCount": "2", "CreationDate": "2013-05-27T18:04:54.303", "ParentId": "16778210", "Score": "3", "OwnerUserId": "14065"}, "16778298": {"Id": "16778298", "PostTypeId": "2", "Body": "<p>This might help you </p>\n<p>Suppose a class is having array of someClass which is dynamically created . In your constructor suppose you created </p>\n<pre><code>someClass * p = new someClass [10] ;\n</code></pre>\n<p>then in destructor you would write </p>\n<pre><code>delete []p ;\n</code></pre>\n", "LastActivityDate": "2013-05-27T17:55:51.520", "CommentCount": "0", "CreationDate": "2013-05-27T17:55:51.520", "ParentId": "16778210", "Score": "0", "OwnerUserId": "1636300"}, "16778272": {"Id": "16778272", "PostTypeId": "2", "Body": "<p>Anything associated to the class instance that needs disassociation/release/special handling once the object ceases to exist.<br>\nFew examples:</br></p>\n<ul>\n<li>File handles opened, owned and used by the instance and wont be used post object destruction.</li>\n<li>Socktes, mutex etc opened and owned by the class instance.</li>\n</ul>\n", "LastActivityDate": "2013-05-27T17:53:58.080", "CommentCount": "0", "CreationDate": "2013-05-27T17:53:58.080", "ParentId": "16778210", "Score": "2", "OwnerUserId": "452307"}, "16778379": {"Id": "16778379", "PostTypeId": "2", "Body": "<p>Your class might manage resources that <em>aren't</em> released by calling the destructors of the data members of your object. If so, then the code to release the resource belongs in a destructor that you write.</p>\n<p>For example if you allocate objects with <code>new</code> then they must be freed with <code>delete</code>. If you open a file with <code>fopen</code> then it's closed with <code>fclose</code>. If you take a Posix mutex with <code>pthread_mutex_lock</code> then it must be released with <code>pthread_mutex_unlock</code>.</p>\n<p>For each kind of resource needs freeing you (or someone else) can write a class that manages and frees that resource, and provides access to its basic operations. Hence the existence of classes like <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::lock_guard</code>, <code>std::fstream</code>. Of course, for simplicity you usually want there to be only one class that manages a particular kind of resource. So, since <code>std::lock_guard</code> exists in C++11, the only reason that you'd write your own class to release a mutex would be if you're providing some alternative interface to the standard one. Classes with non-default destructors should ideally be rare in your own code -- often there already exist classes that you can use as data members or automatic variables, and whose destructors do the job.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2013-05-27T18:08:58.857", "Score": "1", "CreationDate": "2013-05-27T18:03:18.727", "ParentId": "16778210", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2013-05-27T18:08:58.857"}, "16778239": {"Id": "16778239", "PostTypeId": "2", "Body": "<p>A destructor is a method which is automatically invoked when the object is destroyed. <a href=\"http://en.wikipedia.org/wiki/Destructor_%28computer_programming%29\" rel=\"nofollow\">Wikipedia</a></p>\n<p>It doesn't destroy objects, but starts working when they are destroyed. For it, you have to use something else.</p>\n", "LastActivityDate": "2013-05-27T17:51:07.810", "CommentCount": "3", "CreationDate": "2013-05-27T17:51:07.810", "ParentId": "16778210", "Score": "-1", "OwnerUserId": "2320153"}, "16778281": {"Id": "16778281", "PostTypeId": "2", "Body": "<p>All that statement means is if you have a destructor defined as </p>\n<pre><code>Foo::~Foo()\n{\n    Bar b;\n    b.do_whatever();\n}\n</code></pre>\n<p>then the <code>b</code> object's destructor is run before the destructors of any of <code>Foo</code>'s members. The body of the destructor is executed, and the automatic object allocated within the body, i.e. <code>b</code>, is destroyed first.</p>\n", "LastActivityDate": "2013-05-27T17:54:20.160", "CommentCount": "0", "CreationDate": "2013-05-27T17:54:20.160", "ParentId": "16778210", "Score": "1", "OwnerUserId": "241631"}, "bq_ids": {"n4140": {"so_16778210_16778210_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 404}}, "n3337": {"so_16778210_16778210_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 395}}, "n4659": {"so_16778210_16778210_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 422}}}, "16778210": {"ViewCount": "220", "Body": "<p><a href=\"https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three\">What is The Rule of Three?</a> mentions </p>\n<blockquote>\n<p id=\"so_16778210_16778210_0\">After executing the body of the destructor and destroying any automatic objects \n  allocated within the body, a destructor for class X calls the destructors for \n  X's direct [...] members [n3126.pdf 12.4 \u00a76]</p>\n</blockquote>\n<p>Which leaves me wondering, what's the use of a destructor if not to destroy the members? Please provide examples</p>\n", "AcceptedAnswerId": "16778393", "Title": "C++ need for destructor function", "CreationDate": "2013-05-27T17:49:01.240", "Id": "16778210", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:11:19.717", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-27T18:21:25.973", "Score": "1", "OwnerUserId": "459384", "Tags": "<c++><destructor>", "AnswerCount": "6"}});