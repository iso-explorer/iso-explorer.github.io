post_cb({"37644128": {"CommentCount": "0", "AcceptedAnswerId": "37644422", "PostTypeId": "1", "LastEditorUserId": "3777958", "CreationDate": "2016-06-05T16:22:06.077", "LastActivityDate": "2016-06-05T17:47:25.860", "LastEditDate": "2016-06-05T17:47:25.860", "ViewCount": "109", "FavoriteCount": "0", "Title": "Partially specializing on non-type template parameter of the wrong type", "Id": "37644128", "Score": "9", "Body": "<p>Consider the following:</p>\n<pre><code>template &lt;unsigned &gt;\nstruct uint_ { };\n\ntemplate &lt;class &gt;\nstruct X {\n    static constexpr bool value = false;\n};\n\ntemplate &lt;int I&gt; // NB: int, not unsigned\nstruct X&lt;uint_&lt;I&gt;&gt; {\n    static constexpr bool value = true;\n};\n\nint main() {\n    static_assert(X&lt;uint_&lt;0&gt;&gt;::value, \"!\");\n}\n</code></pre>\n<p>clang compiles the code, gcc does not.</p>\n<p>However, in the following highly related example:</p>\n<pre><code>template &lt;unsigned &gt;\nstruct uint_ { };\n\ntemplate &lt;int I&gt; // NB: int, not unsigned\nvoid foo(uint_&lt;I&gt; ) { }\n\nint main() {\n    foo(uint_&lt;0&gt;{} );\n}\n</code></pre>\n<p>both compilers reject with no matching function call to <code>foo</code>. gcc's behavior is consistent, clang's is not - so one or the other compiler has a bug for one or both examples. Which compiler is correct?</p>\n", "Tags": "<c++><templates><c++11><language-lawyer><type-parameter>", "OwnerUserId": "2069064", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37644128_37644422_0": {"section_id": 348, "quality": 1.0, "length": 9}}, "n3337": {"so_37644128_37644422_0": {"section_id": 331, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_37644128_37644422_0": {"section_id": 350, "quality": 0.7777777777777778, "length": 7}}}, "37644422": {"ParentId": "37644128", "CommentCount": "1", "Body": "<p>GCC is correct. <a href=\"http://eel.is/c++draft/temp.deduct.type#17\">[temp.deduct.type]/17</a>:</p>\n<blockquote>\n<p id=\"so_37644128_37644422_0\">If <code>P</code> has a form that contains <code>&lt;i&gt;</code>, and if the type of the\n  corresponding value of <code>A</code> differs from the type of <code>i</code>, deduction fails.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "37644422", "Score": "7", "CreationDate": "2016-06-05T16:50:53.313", "LastActivityDate": "2016-06-05T16:50:53.313"}});