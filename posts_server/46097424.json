post_cb({"46097458": {"ParentId": "46097424", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>You need a <code>long long</code> type for 64 bits.</p>\n<p>The expression <code>1 &lt;&lt; 32</code> will be evaluated with <code>int</code> types for the operands, irrespective of the type of the variable to which this result is assigned.</p>\n<p>You will have more luck with <code>1LL &lt;&lt; 32</code>, and <code>1LL &lt;&lt; rot</code>. That causes the expression to be evaluated using <code>long long</code> types.</p>\n<p>Currently the behaviour of your program is undefined as you are overshifting a type when you write <code>1 &lt;&lt; 32</code>. Note also that <code>1 &lt;&lt; 32</code> is a compile time evaluable constant expression whereas <code>1 &lt;&lt; rot</code> isn't. That probably accounts for the observed difference between using a variable and a constant.</p>\n", "OwnerUserId": "2380830", "LastEditorUserId": "2380830", "LastEditDate": "2017-09-07T13:25:24.410", "Id": "46097458", "Score": "5", "CreationDate": "2017-09-07T13:18:36.587", "LastActivityDate": "2017-09-07T13:25:24.410"}, "46097534": {"ParentId": "46097424", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The expression <code>1 &lt;&lt; rot</code>, when <code>rot</code> is an <code>int</code>, will give you an <code>int</code> result. It doesn't matter if you then place it into a <code>long long</code> since the damage has already been done<sup>(a)</sup>.</p>\n<p>Use <code>1LL &lt;&lt; rot</code> instead.</p>\n<hr>\n<p><sup>(a)</sup> And, by damage, I mean undefined behaviour, as per <code>C11 6.5.7 Bitwise shift operators</code>:</p>\n<blockquote>\n<p id=\"so_46097424_46097534_0\">The integer promotions are performed on each of the operands. The type of the result is that of the promoted left operand. If the value of the right operand is negative <strong><em>or is greater than or equal to the width of the promoted left operand,</em></strong> the behavior is undefined.</p>\n</blockquote>\n<p>As to \"why the debug build produces different outputs if I shift with a variable as a parameter compared to a constant\", that's one of the vagaries of undefined behaviour - literally anything that's possible is allowed to happen. It's perfectly within its rights to play <code>derisive_laughter.ogg</code> and format your hard disk :-)</p>\n</hr>", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2017-09-07T13:43:01.260", "Id": "46097534", "Score": "3", "CreationDate": "2017-09-07T13:22:30.040", "LastActivityDate": "2017-09-07T13:43:01.260"}, "46097424": {"CommentCount": "2", "AcceptedAnswerId": "46097534", "CreationDate": "2017-09-07T13:16:39.277", "LastActivityDate": "2017-09-07T13:43:01.260", "PostTypeId": "1", "ViewCount": "55", "FavoriteCount": "0", "Title": "Somewhat unexpected behaviour from left shift <<", "Id": "46097424", "Score": "1", "Body": "<p>This is a 32-bit MFC application currently running on Windows 10.  Compiled with Visual C++ 2013.</p>\n<pre><code>std::cout &lt;&lt; \"sizeof(long long) = \" &lt;&lt; sizeof(long long) &lt;&lt; std::endl;\n\nint rot{ 32 };\nlong long bits{ (1 &lt;&lt; rot) };\nstd::cout &lt;&lt; \"bits with variable = \" &lt;&lt; bits &lt;&lt; std::endl;\n\nlong long bits2 = (1 &lt;&lt; 32);\nstd::cout &lt;&lt; \"bits2 with constant = \" &lt;&lt; bits2 &lt;&lt; std::endl;\n\nsystem(\"pause\");\n</code></pre>\n<p>The size of long long is 8 bytes, sufficient to manage my 32 bits, I was thinking.  Here is the output of the debug build:</p>\n<pre><code>sizeof(long long) = 8\nbits with variable = 1\nbits2 with constant = 0\nPress any key to continue . . .\n</code></pre>\n<p>And here is the output of the release build:</p>\n<pre><code>sizeof(long long) = 8\nbits with variable = 0\nbits2 with constant = 0\nPress any key to continue . . .\n</code></pre>\n<p>So, apparently my single bit is leftshifted into oblivion even with a 64 bit data type.  But I'm really puzzled to why the debug build produces different outputs if I shift with a variable as a parameter compared to a constant?</p>\n", "Tags": "<c++><visual-c++><visual-c++-2013>", "OwnerUserId": "127399", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46097424_46097534_0": {"section_id": 6146, "quality": 0.64, "length": 16}}, "n3337": {"so_46097424_46097534_0": {"section_id": 5909, "quality": 0.64, "length": 16}}, "n4659": {"so_46097424_46097534_0": {"section_id": 7642, "quality": 0.64, "length": 16}}}});