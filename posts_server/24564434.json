post_cb({"bq_ids": {"n4140": {"so_24564434_24567920_1": {"length": 10, "quality": 1.0, "section_id": 1971}}, "n3337": {"so_24564434_24567920_1": {"length": 10, "quality": 1.0, "section_id": 1960}}, "n4659": {"so_24564434_24567920_1": {"length": 10, "quality": 1.0, "section_id": 2242}}}, "24564434": {"ViewCount": "163", "Body": "<pre><code>#include &lt;locale&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::locale::global(std::locale(\"en_US.utf8\"));\n    std::wcout &lt;&lt; L\"H\u0259\u0142\u00a3\u014d \u05e9\u00f8\u044f\u013c\u0111\\n\";\n    return 0;\n}\n</code></pre>\n<p>This works as expected with libstdc++ (both gcc and clang), but only prints the first character (which happens to be ASCII) with libc++. I'm using libcxx-0.0_p20140322 on Gentoo Linux. </p>\n<p>Is this a known bug in libc++, or just me not knowing how to cook it?</p>\n<p>Update 1. I have tried</p>\n<pre><code>std::locale::global(std::locale(\"en_US.utf8\"));\nstd::locale::global(std::locale(\"\"));\nstd::setlocale(LC_ALL, \"en_US.utf8\");\nstd::setlocale(LC_ALL, \"\");\n</code></pre>\n<p>which all do the same thing.</p>\n<p>Update 2. The wide string literal is here for simplicity. The same thing happens when the string is obtained in any other way (converted from UTF-8, read from binary file, ...)</p>\n", "AcceptedAnswerId": "24567920", "Title": "wchar_t output with libc++", "CreationDate": "2014-07-03T22:55:17.570", "Id": "24564434", "CommentCount": "9", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2014-07-04T06:04:03.780", "LastEditorUserId": "775806", "LastActivityDate": "2014-07-04T06:30:45.680", "Score": "8", "OwnerUserId": "775806", "Tags": "<c++><clang++><libc++>", "AnswerCount": "1"}, "24567920": {"Id": "24567920", "PostTypeId": "2", "Body": "<p>You have to explicitly imbue the output stream with a locale, like so:</p>\n<pre><code>std::wcout.imbue(std::locale());\n</code></pre>\n<p>This makes things work as expected. In fact, it is <em>required</em> by the standard:</p>\n<blockquote>\n<p id=\"so_24564434_24567920_0\">27.5.3.3 ios_base functions</p>\n<pre><code>locale getloc() const;\n</code></pre>\n<p id=\"so_24564434_24567920_1\">4 If no locale has been imbued, a copy of the global C++ locale, locale(), in effect at the time of construction.</p>\n</blockquote>\n<p>So when <code>wcout</code> is constructed, it gets a copy of the initial locale imbued in it. The initial locale is \"C\". My incorrect assumption was that streams which have no locale explicitly imbued use the current global locale always (and not just at the time of construction). This assumption is totally unreasonable if one thinks about it a little.</p>\n", "LastEditorUserId": "366904", "LastActivityDate": "2014-07-04T06:30:45.680", "Score": "5", "CreationDate": "2014-07-04T06:24:20.583", "ParentId": "24564434", "CommentCount": "0", "OwnerUserId": "775806", "LastEditDate": "2014-07-04T06:30:45.680"}});