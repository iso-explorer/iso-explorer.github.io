post_cb({"7494318": {"CommentCount": "2", "ViewCount": "460", "PostTypeId": "1", "LastEditorUserId": "956054", "CreationDate": "2011-09-21T03:37:53.893", "LastActivityDate": "2011-09-21T05:06:27.710", "Title": "Is this a valid function?", "FavoriteCount": "3", "LastEditDate": "2011-09-21T04:07:11.557", "Id": "7494318", "Score": "13", "Body": "<p>What happens to the reference in function parameter, if it gets destroyed when the function returns, then how <code>const int *i</code> is still a valid pointer?</p>\n<pre><code>const int* func(const int &amp;x = 5)\n{\n    return &amp;x;\n}\n\n\nint main()\n{\n    const int *i = func();\n}\n</code></pre>\n", "Tags": "<c++><reference><return-value>", "OwnerUserId": "956054", "AnswerCount": "7"}, "7494341": {"ParentId": "7494318", "CommentCount": "3", "Body": "<p>5 is program data.  It is in the data segment, not the stack or heap.</p>\n<p>So a pointer or reference to it will remain valid for the duration of the program.</p>\n", "OwnerUserId": "479869", "PostTypeId": "2", "Id": "7494341", "Score": "0", "CreationDate": "2011-09-21T03:43:36.473", "LastActivityDate": "2011-09-21T03:43:36.473"}, "7494446": {"ParentId": "7494318", "CommentCount": "0", "Body": "<p>Default arguments are evaluated every time the function is called, so the call <code>func()</code> is actually <code>func(5)</code> which is binding a temporary to a reference-to-const. The lifetime of that temporary is then extended till the end of the function and the object is destroyed. Any pointer to this object after that is invalid and dereferencing it is undefined behaviour.</p>\n", "OwnerUserId": "105672", "PostTypeId": "2", "Id": "7494446", "Score": "0", "CreationDate": "2011-09-21T04:00:17.430", "LastActivityDate": "2011-09-21T04:00:17.430"}, "7494424": {"ParentId": "7494318", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>\u00a712.2/5: </p>\n<blockquote>\n<p id=\"so_7494318_7494424_0\">\"A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full expression containing the call.\"</p>\n</blockquote>\n<p>That means as <code>i</code> is being initialized, it's getting the address of a temporary object that does exist at that point. As soon as <code>i</code> is initialized, however, the temporary object will be destroyed, and <code>i</code> will become just another dangling pointer.</p>\n<p>As such, yes, the function is valid -- but with the surrounding code as you've written it, any code you added afterward that attempted to dereference <code>i</code> would give undefined behavior.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "415784", "LastEditDate": "2011-09-21T05:06:27.710", "Id": "7494424", "Score": "8", "CreationDate": "2011-09-21T03:56:50.630", "LastActivityDate": "2011-09-21T05:06:27.710"}, "7494345": {"ParentId": "7494318", "CommentCount": "0", "Body": "<p>Just because a pointer has a value doesn't mean it's a valid pointer.</p>\n<p>In this case it holds an address which used to be that of x, and chances are that address still has the value 5, but it's not valid pointer and you can't count on that value being there.</p>\n", "OwnerUserId": "481044", "PostTypeId": "2", "Id": "7494345", "Score": "3", "CreationDate": "2011-09-21T03:44:02.190", "LastActivityDate": "2011-09-21T03:44:02.190"}, "7494362": {"ParentId": "7494318", "CommentCount": "0", "Body": "<p>I think that <code>x</code> is created as an un-named temporary on the stack in setting up the call to <code>func()</code>. This temporary will exist until at least the end of the statement in the caller. So the <code>int* i</code> is perfectly valid. It only ceases to be valid at the end of the statement - which means that you cannot use it.</p>\n<p>There is something in the standard about un-named temporaries being retained until the last reference to them goes out of scope, but I don't think it covers this explicit and hidden indirection. \n[ Happy to have someone tell me otherwise.]</p>\n", "OwnerUserId": "540026", "PostTypeId": "2", "Id": "7494362", "Score": "1", "CreationDate": "2011-09-21T03:46:09.913", "LastActivityDate": "2011-09-21T03:46:09.913"}, "7494334": {"ParentId": "7494318", "CommentCount": "0", "Body": "<p>the variable \"i\" is still a pointer, but even reading the value it points to will give you undefined behavior.  That's why you should never write a function like func.</p>\n", "OwnerUserId": "14167", "PostTypeId": "2", "Id": "7494334", "Score": "1", "CreationDate": "2011-09-21T03:43:06.217", "LastActivityDate": "2011-09-21T03:43:06.217"}, "7494328": {"ParentId": "7494318", "CommentCount": "2", "Body": "<p><code>int i</code> points to a patch of memory that is unsafe to access, it is not a valid pointer.</p>\n", "OwnerUserId": "614008", "PostTypeId": "2", "Id": "7494328", "Score": "1", "CreationDate": "2011-09-21T03:41:52.323", "LastActivityDate": "2011-09-21T03:41:52.323"}, "bq_ids": {"n4140": {"so_7494318_7494424_0": {"section_id": 382, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_7494318_7494424_0": {"section_id": 373, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_7494318_7494424_0": {"section_id": 397, "quality": 0.7857142857142857, "length": 11}}}});