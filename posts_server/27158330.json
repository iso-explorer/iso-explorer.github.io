post_cb({"27158396": {"Id": "27158396", "PostTypeId": "2", "Body": "<p>The overriders of <code>virtual</code> functions are always odr-used - that is, their definition must be present, whether they are explicitly used in a translation unit or not.<br> Overriders of <code>virtual</code> functions are themselves <code>virtual</code> ([class.virtual]/2) and all <code>virtual</code> functions must be defined ([basic.def.odr]/3 and 4).</br></p>\n<p>Now the question is whether the <code>test</code> overloads in the derived class are actually instantiated.\nFor templates, the standard mandates that</p>\n<blockquote>\n<p id=\"so_27158330_27158396_0\">Unless a member of a class template [\u2026] has been\n  explicitly instantiated or explicitly specialized, the specialization\n  of the member is implicitly instantiated when the specialization is\n  referenced in a context that requires the member definition to exist;</p>\n</blockquote>\n<p>For virtual functions one might argue that their presence is enough to require a definition. However, the standard doesn't tie itself down and leaves the decision to the implementation, [temp.inst]/11:</p>\n<blockquote>\n<p id=\"so_27158330_27158396_1\">It is unspecified whether or not an implementation implicitly\n  instantiates a virtual member function of a class template if the\n  virtual member function would not otherwise be instantiated.</p>\n</blockquote>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-26T23:07:34.307", "Score": "2", "CreationDate": "2014-11-26T20:34:59.177", "ParentId": "27158330", "CommentCount": "4", "LastEditDate": "2014-11-26T23:07:34.307", "OwnerUserId": "3647361"}, "27158330": {"ViewCount": "48", "Body": "<p>An error in a method that relies on template expansion only gives a compiler error when the method is explicitly called. Though when that method is marked as virtual, it produces a compiler error whether or not it is actually called. Is there anything in the C++ standard that explains why marking these methods as virtual causes a compiler error?</p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;iostream&gt;\n\ntemplate &lt;class T_&gt;\nclass Foo\n{\nprotected:\n    T_ data;\npublic:\n    Foo(const T_&amp; x) : data(x) { }\n\n    Foo(T_&amp;&amp; x) : data(std::move(x)) { }\n\n    // comment these two lines out and it works fine.\n    virtual void test(T_&amp; x) = 0;\n    virtual void test(T_&amp;&amp; x) = 0;\n};\n\ntemplate &lt;class T_&gt;\nclass Bar : public Foo&lt;T_&gt;\n{\npublic:\n    using Foo&lt;T_&gt;::Foo;\n\n    void test(T_&amp; x)\n    {\n        std::cout &lt;&lt; \"test(&amp;)\" &lt;&lt; std::endl;\n        x = this-&gt;data;\n    }\n\n    void test(T_&amp;&amp; x)\n    {\n        std::cout &lt;&lt; \"test(&amp;&amp;)\" &lt;&lt; std::endl;\n        x = std::move(this-&gt;data);\n    }\n};\n\nint main()\n{\n    Bar&lt;std::unique_ptr&lt;int&gt;&gt; x(std::unique_ptr&lt;int&gt;(new int(42)));\n}\n</code></pre>\n", "AcceptedAnswerId": "27158396", "Title": "Inheritance with possible template failure", "CreationDate": "2014-11-26T20:31:17.830", "Id": "27158330", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-11-26T23:07:34.307", "Score": "1", "OwnerUserId": "1233005", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "27158511": {"Id": "27158511", "PostTypeId": "2", "Body": "<p>Making it virtual is forcing instantiation. I get the same error with the following test code after commenting out the virtual function in the base class:</p>\n<pre><code>int main()\n{\n    Bar&lt;std::unique_ptr&lt;int&gt;&gt; x(std::unique_ptr&lt;int&gt;(new int(42)));\n    x.test(std::unique_ptr&lt;int&gt;(new int(99)));\n    std::unique_ptr&lt;int&gt; pi;\n    x.test(pi);\n    std::cout &lt;&lt; \"test returned \" &lt;&lt; *pi &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The version taking an reference can't be instantiated as <code>std::unique_ptr</code> is not assignable. </p>\n", "LastActivityDate": "2014-11-26T20:42:13.173", "Score": "0", "CreationDate": "2014-11-26T20:42:13.173", "ParentId": "27158330", "CommentCount": "0", "OwnerUserId": "2587908"}, "bq_ids": {"n4140": {"so_27158330_27158396_1": {"length": 16, "quality": 1.0, "section_id": 243}, "so_27158330_27158396_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 234}}, "n3337": {"so_27158330_27158396_1": {"length": 16, "quality": 1.0, "section_id": 235}, "so_27158330_27158396_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 227}}, "n4659": {"so_27158330_27158396_1": {"length": 16, "quality": 1.0, "section_id": 250}, "so_27158330_27158396_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 244}}}});