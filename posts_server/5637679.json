post_cb({"bq_ids": {"n4140": {"so_5637679_5638060_0": {"length": 38, "quality": 0.9743589743589743, "section_id": 3257}, "so_5637679_5637862_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3255}}, "n3337": {"so_5637679_5637862_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3127}, "so_5637679_5638060_0": {"length": 38, "quality": 0.9743589743589743, "section_id": 3129}}, "n4659": {"so_5637679_5637862_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4013}, "so_5637679_5638060_0": {"length": 38, "quality": 0.9743589743589743, "section_id": 4015}}}, "5637679": {"ViewCount": "9300", "Body": "<p>I saw a function declaration in our code that looked as follows</p>\n<pre><code>void error(char const *msg, bool showKind = true, bool exit);\n</code></pre>\n<p>I thought first that this is an error because you cannot have default arguments in the middle of functions, but the compiler accepted this declaration. Has anyone seen this before? I'm using GCC4.5. Is this a GCC extension?</p>\n<p>The weird thing is, if I take this out in a separate file and try to compile, GCC rejects it. I've double checked everything, including the compiler options used. </p>\n", "AcceptedAnswerId": "5637862", "Title": "Default argument in the middle of parameter list?", "CreationDate": "2011-04-12T15:25:08.750", "Id": "5637679", "CommentCount": "0", "FavoriteCount": "14", "PostTypeId": "1", "LastEditDate": "2011-05-26T10:04:02.127", "LastEditorUserId": "41956", "LastActivityDate": "2016-07-10T18:55:38.937", "Score": "49", "OwnerUserId": "34509", "Tags": "<c++><default-arguments>", "AnswerCount": "2"}, "5637862": {"Id": "5637862", "PostTypeId": "2", "Body": "<p>That code would work if in the very first declaration of the function, the last parameter has default value, something like this:</p>\n<pre><code>//declaration\nvoid error(char const *msg, bool showKind, bool exit = false);\n</code></pre>\n<p>And then <em>in the same scope</em> you can provide default values for other arguments (from right side), in the later declaration, as:</p>\n<pre><code>void error(char const *msg, bool showKind = true, bool exit); //okay\n\n//void error(char const *msg = 0 , bool showKind, bool exit); // error\n</code></pre>\n<p>which can called as:</p>\n<pre><code>error(\"some error messsage\");\nerror(\"some error messsage\", false);\nerror(\"some error messsage\", false, true);\n</code></pre>\n<p>Online Demo : <a href=\"http://ideone.com/aFpUn\">http://ideone.com/aFpUn</a></p>\n<p>Note if you provide default value for the first parameter (from left), without providing default value for the second, it wouldn't compile (as expected) : <a href=\"http://ideone.com/5hj46\">http://ideone.com/5hj46</a> </p>\n<hr>\n<p>\u00a78.3.6/4 says,</p>\n<blockquote>\n<p id=\"so_5637679_5637862_0\">For non-template functions, default\n  arguments can be added in later\n  declarations of a function in the same\n  scope.</p>\n</blockquote>\n<p>Example from the Standard itself:</p>\n<pre><code>void f(int, int);\nvoid f(int, int = 7);\n</code></pre>\n<p>The second declaration adds default value!</p>\n<p>Also see \u00a78.3.6/6.</p>\n</hr>", "LastEditorUserId": "415784", "LastActivityDate": "2011-04-22T12:25:36.303", "Score": "54", "CreationDate": "2011-04-12T15:37:17.393", "ParentId": "5637679", "CommentCount": "8", "OwnerUserId": "415784", "LastEditDate": "2011-04-22T12:25:36.303"}, "5638060": {"Id": "5638060", "PostTypeId": "2", "Body": "<p>The answer might be in 8.3.6:</p>\n<h2>8.3.6 Default Arguments</h2>\n<blockquote>\n<p id=\"so_5637679_5638060_0\">6 Except for member functions of class\n  templates, the default arguments in a\n  member function definition that\n  appears outside of the class\n  definition are added to the set of\n  default arguments provided by the\n  member function declaration in the\n  class definition. Default arguments\n  for a member function of a class\n  template shall be specified on the\n  initial declaration of the member\n  function within the class template.\n  [Example:</p>\n<pre><code>class C {\nvoid f(int i = 3);\nvoid g(int i, int j = 99);\n};\nvoid C::f(int i = 3) // error: default argument already\n{ } // specified in class scope\nvoid C::g(int i = 88, int j) // in this translation unit,\n{ } // C::g can be called with no argument\n</code></pre>\n<p id=\"so_5637679_5638060_1\">\u2014end example]</p>\n</blockquote>\n<p>After reading this, I found that MSVC10 accepted the following with compiler extensions turned off:</p>\n<pre><code>void error(char const* msg, bool showKind, bool exit= false);\n\nvoid error(char const* msg, bool showKind = false, bool exit)\n{\n    msg;\n    showKind;\n    exit;\n}\n\nint main()\n{\n    error(\"hello\");\n}\n</code></pre>\n", "LastEditorUserId": "1863564", "LastActivityDate": "2016-07-10T18:55:38.937", "Score": "7", "CreationDate": "2011-04-12T15:50:25.830", "ParentId": "5637679", "CommentCount": "0", "OwnerUserId": "241536", "LastEditDate": "2016-07-10T18:55:38.937"}});