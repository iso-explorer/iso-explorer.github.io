post_cb({"13267759": {"ParentId": "13267734", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>They are the same most of the time. Pedantically, the standard says:</p>\n<h3>13.5.3 Assignment [over.ass]</h3>\n<blockquote>\n<p id=\"so_13267734_13267759_0\">2) Any assignment operator, even the copy and move assignment operators, can be virtual.</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/a/13267811/673730\">(correct reference in Steve's answer)</a></p>\n<p>Which leads us to believe that an assignment operator can exist without being a copy or move one.</p>\n<p>The example given is:</p>\n<pre><code>struct B {\n   virtual int operator= (int);\n   virtual B&amp; operator= (const B&amp;);\n};\n</code></pre>\n<p>which makes me believe the first one is a simple assignment operator, while the second is the copy assignment operator. This also preserves the nomenclature used by the copy constructor.</p>\n<p>So, I'd say a <strong>copy assignment operator</strong> is an <strong>assignment operator</strong> that takes as parameter a reference (or object) of the same type.</p>\n", "OwnerUserId": "673730", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:50.043", "Id": "13267759", "Score": "1", "CreationDate": "2012-11-07T10:27:11.290", "LastActivityDate": "2012-11-07T10:32:55.767"}, "13267734": {"CommentCount": "0", "AcceptedAnswerId": "13267811", "CreationDate": "2012-11-07T10:25:55.693", "LastActivityDate": "2012-11-07T10:53:58.723", "PostTypeId": "1", "ViewCount": "110", "FavoriteCount": "1", "Title": "what is the copy assignement operator?", "Id": "13267734", "Score": "1", "Body": "<p>At the present moment I am reading <strong>C++ 11 standart</strong>, in which (chapter 12)\namoung special member functions is mentioned <strong><em>?copy?</em> assignement operator</strong>.</p>\n<p>I have already <strong>faced with operator=</strong>, which is <strong>simply assignement operator</strong></p>\n<p>My first guess was that it is used in statements like this:  </p>\n<pre><code>Class_name instance_name1 = instance_name2;   \n</code></pre>\n<p>when an object is created and initialized simultaniously, I checked my assumption and got that this done by means of copy constructor(which was expected).</p>\n<p>So, what for copy assignement operator is used, how to declare it and can you give me some example of it`s usage.\nThanks in advance!</p>\n", "Tags": "<c++><standards>", "OwnerUserId": "1280794", "AnswerCount": "3"}, "13267971": {"ParentId": "13267734", "CommentCount": "0", "Body": "<p>The assignment operator is <code>=</code>, and you can overload it like so:</p>\n<pre><code>struct T\n{\n   T&amp; operator=(const int&amp;);\n};\n</code></pre>\n<p>In this case I've made it take <code>int</code>, which is pretty unusual and probably not desirable. Usually you write a <em>copy assignment operator</em>, which means it takes a reference to a <code>T</code>:</p>\n<pre><code>struct T\n{\n   T&amp; operator=(const T&amp;);\n};\n</code></pre>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "13267971", "Score": "0", "CreationDate": "2012-11-07T10:40:05.797", "LastActivityDate": "2012-11-07T10:40:05.797"}, "13267811": {"ParentId": "13267734", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It's defined in the standard, 12.8/17:</p>\n<blockquote>\n<p id=\"so_13267734_13267811_0\">A user-declared <em>copy</em> assignment operator <code>X::operator=</code> is a non-static\n  non-template member function of class <code>X</code> with exactly one parameter of\n  type <code>X</code>, <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>.</p>\n</blockquote>\n<p>So for example:</p>\n<pre><code>struct X {\n    int a;\n    // an assignment operator which is not a copy assignment operator\n    X &amp;operator=(int rhs) { a = rhs; return *this; }\n    // a copy assignment operator\n    X &amp;operator=(const X &amp;rhs) { a = rhs.a; return *this; }\n    // another copy assignment operator\n    volatile X &amp;operator=(const volatile X &amp;rhs) volatile { \n        a = rhs.a; \n        return *this; \n    }\n};\n</code></pre>\n<p>Assignment operators are used when you assign to an object. You might think that doesn't say much, but your example code <code>Class_name instance_name1 = instance_name2;</code> <em>doesn't</em> assign to an object, it initializes one. The difference is in the grammar of the language: in both cases the <code>=</code> symbol precedes something called an <em>initializer-clause</em>, but <code>Class_name instance_name1 = instance_name2;</code> is a definition, whereas <code>instance_name1 = instance_name2;</code> on its own after <code>instance_name1</code> has been defined is an <em>expression-statement</em> containing an <em>assignment-expression</em>. Assignment-expressions use assignment operators, definitions use constructors.</p>\n<p>If the usual rules for overload resolution select an assignment operator that is a copy assignment operator, then that's when a copy assignment operator is used:</p>\n<pre><code>X x;\nx = 4; // uses non-copy assignment operator\nX y;\ny = x; // uses copy assignment operator\n</code></pre>\n<p>The reason there's a distinction between copy and non-copy assignment operators, is that if you declare a copy assignment operator, that suppresses the default copy assignment operator. If you declare any non-copy assignment operators, they don't suppress the default copy assignment.</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2012-11-07T10:53:58.723", "Id": "13267811", "Score": "7", "CreationDate": "2012-11-07T10:30:12.690", "LastActivityDate": "2012-11-07T10:53:58.723"}, "bq_ids": {"n4140": {"so_13267734_13267811_0": {"section_id": 466, "quality": 0.9444444444444444, "length": 17}, "so_13267734_13267759_0": {"section_id": 661, "quality": 0.9, "length": 9}}, "n3337": {"so_13267734_13267811_0": {"section_id": 457, "quality": 0.9444444444444444, "length": 17}, "so_13267734_13267759_0": {"section_id": 651, "quality": 0.9, "length": 9}}, "n4659": {"so_13267734_13267811_0": {"section_id": 489, "quality": 0.9444444444444444, "length": 17}, "so_13267734_13267759_0": {"section_id": 689, "quality": 0.9, "length": 9}}}});