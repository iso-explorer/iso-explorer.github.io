post_cb({"31678567": {"ParentId": "31678245", "CommentCount": "1", "Body": "<p>A default value can only be given once, so if it is in the header it cannot be restated with the definition of the function. Just remove (or comment out) the default.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "31678567", "Score": "1", "CreationDate": "2015-07-28T14:01:05.640", "LastActivityDate": "2015-07-28T14:01:05.640"}, "31678245": {"CommentCount": "0", "ViewCount": "409", "CreationDate": "2015-07-28T13:49:05.653", "LastActivityDate": "2015-07-29T08:37:00.570", "Title": "Visual Studio 2013 - std::enable_if warning 4544", "AcceptedAnswerId": "31695350", "PostTypeId": "1", "Id": "31678245", "Score": "1", "Body": "<p>I have  written this code</p>\n<p>In class in header</p>\n<pre><code>template &lt;typename T,\ntypename = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type&gt;\nT GetResultValueAsNumber(char * result);\n</code></pre>\n<p>than in inline file </p>\n<pre><code> template &lt;\n        typename T,\n        typename = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type\n    &gt;\n    T PostgreSQLWrapper::GetResultValueAsNumber(char * result)\n    {    \n        double value = strtod(result, NULL);\n\n        return static_cast&lt;T&gt;(value);\n    };\n</code></pre>\n<p>In Visual Studio 2013 I got this warning (but code works correctly)</p>\n<pre><code>warning C4544: '&lt;unnamed-symbol&gt;' : default template argument ignored on this template declaration - see declaration of '&lt;unnamed-symbol&gt;'\n</code></pre>\n<p>What does it mean?</p>\n", "Tags": "<c++><visual-studio><c++11>", "OwnerUserId": "1130231", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31678245_31695350_1": {"section_id": 3255, "quality": 1.0, "length": 8}, "so_31678245_31695350_2": {"section_id": 3257, "quality": 0.96, "length": 24}, "so_31678245_31695350_0": {"section_id": 63, "quality": 0.8, "length": 16}}, "n3337": {"so_31678245_31695350_1": {"section_id": 3127, "quality": 1.0, "length": 8}, "so_31678245_31695350_2": {"section_id": 3129, "quality": 0.96, "length": 24}, "so_31678245_31695350_0": {"section_id": 58, "quality": 0.8, "length": 16}}, "n4659": {"so_31678245_31695350_1": {"section_id": 4013, "quality": 1.0, "length": 8}, "so_31678245_31695350_2": {"section_id": 4015, "quality": 0.96, "length": 24}, "so_31678245_31695350_0": {"section_id": 65, "quality": 0.9, "length": 18}}}, "31695350": {"ParentId": "31678245", "CommentCount": "0", "Body": "<p>VC++ isn't conforming here; The program is ill-formed. GCC and Clang <a href=\"http://coliru.stacked-crooked.com/a/96224a57afa62a16\" rel=\"nofollow\">refuse to compile similar code</a>. </p>\n<p>\u00a714.1/10:</p>\n<blockquote>\n<p id=\"so_31678245_31695350_0\">The set of default <em>template-argument</em>s available for use is obtained\n  by merging the default arguments from all prior declarations of the\n  template <strong>in the same way default function arguments are (8.3.6)</strong>.</p>\n</blockquote>\n<p>\u00a78.3.6/4:</p>\n<blockquote>\n<p id=\"so_31678245_31695350_1\"><strong>A default argument shall not be redefined by a later declaration (not\n  even to the same value</strong>).</p>\n</blockquote>\n<p>/6 shows an example as well:</p>\n<blockquote>\n<p id=\"so_31678245_31695350_2\">Except for member functions of class templates, the default arguments\n  in a member function definition that appears outside of the class\n  definition are added to the set of default arguments provided by the\n  member function declaration in the class definition; [\u2026] [ <em>Example</em>:</p>\n<pre><code>class C {\n    void f(int i = 3);\n};\n\nvoid C::f(int i = 3) {   // error: default argument already\n}                        // specified in class scope\n\n// [\u2026]\n</code></pre>\n<p id=\"so_31678245_31695350_3\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "31695350", "Score": "2", "CreationDate": "2015-07-29T08:37:00.570", "LastActivityDate": "2015-07-29T08:37:00.570"}});