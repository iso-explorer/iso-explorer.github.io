post_cb({"11948074": {"ParentId": "11946711", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There seem to be a couple of different issues with the original code sample, and also the declarations given in the book for a number of operators.</p>\n<p>The 'best' solution I believe is to do as follows</p>\n<pre><code>void f(valarray&lt;double&gt;&amp; d)\n{\n    const slice_array&lt;double&gt;&amp; v_even = d[slice(0,d.size()/2,2)];\n    const slice_array&lt;double&gt;&amp; v_odd = d[slice(1,d.size()/2,2)];\n\n    v_odd *= v_even;\n    v_even = 0;\n}\n</code></pre>\n<p>All operators on <code>slice_array&lt;T&gt;</code> are defined as <code>const</code> as they are not modifying the slice itself, but the contents. These are defined incorrectly in the book as non-<code>const</code>.</p>\n", "OwnerUserId": "227765", "LastEditorUserId": "108648", "LastEditDate": "2013-08-26T04:47:45.443", "Id": "11948074", "Score": "9", "CreationDate": "2012-08-14T07:58:34.353", "LastActivityDate": "2013-08-26T04:47:45.443"}, "11946896": {"ParentId": "11946711", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>This seems to be published in errata(although the link is dead now).</p>\n<p>However google is great, it shows a snap for a search like this \"slice_array&amp; v_even\"</p>\n<blockquote>\n<p id=\"so_11946711_11946896_0\">Stroustrup: <strong>Errata for 3rd printing of The C++ Programming</strong> Language<br>\n  www.research.att.com/~bs/3rd_printing4.html<br>\n  [Cached][Share] Shared on Google+.<br>\n  View the post.<br>\n  You +1'd this publicly.<br>\n  Undo</br></br></br></br></br></p>\n</blockquote>\n<pre><code>void f(valarray&lt;double&gt;&amp; d)\n{\n    slice_array&lt;double&gt;&amp; v_even = d[slice(0,d.size()/2, 2)];\n    slice_array&lt;double&gt;&amp; v_odd  = d[slice(1,d.size()/2,2)];\n\n    v_odd *= 2; // double ...\n</code></pre>\n<p>EDIT:-\nThanks for edit in question Kevin ,it is not an error anymore \nI can see in N3092 clearly mentioned (\u00a7 26.6.1,Pg 944)</p>\n<blockquote>\n<p id=\"so_11946711_11946896_1\"><strong>4.</strong> Implementations introducing such replacement types shall provide\n  additional functions and operators as follows: <br/>\u2014 for every\n  function taking a const valarray&amp;, identical functions taking the\n  replacement types shall be added;<br/> \u2014 for every function taking two\n  const valarray&amp; arguments, identical functions taking every\n  combination of const valarray&amp; and replacement types shall be\n  added.</p>\n<p id=\"so_11946711_11946896_2\"><strong>5.</strong> In particular, an implementation shall allow a valarray to be\n  constructed from such replacement types and shall allow assignments\n  and computed assignments of such types to valarray, <strong>slice_array,</strong>\n  gslice_array, mask_array and indirect_array objects.</p>\n</blockquote>\n<p>Further my compiler is not giving any issue(presently VS 2010) with the code,compiles perfectly.</p>\n", "OwnerUserId": "287783", "LastEditorUserId": "287783", "LastEditDate": "2012-08-14T08:14:45.040", "Id": "11946896", "Score": "4", "CreationDate": "2012-08-14T06:30:41.500", "LastActivityDate": "2012-08-14T08:14:45.040"}, "11946711": {"CommentCount": "6", "CreationDate": "2012-08-14T06:14:26.757", "PostTypeId": "1", "AcceptedAnswerId": "11948074", "LastEditorUserId": "582", "LastActivityDate": "2013-08-26T04:47:45.443", "LastEditDate": "2012-08-14T17:14:42.580", "ViewCount": "1245", "FavoriteCount": "3", "Title": "How does Stroustrup take a non-const reference to a temporary?", "Id": "11946711", "Score": "26", "Body": "<p>In Stroustrup's C++ Programming Language book (3rd edition), in the Numerics chapter he shows the following code snippet:</p>\n<pre><code>void f(valarray&lt;double&gt;&amp; d)\n{\n    slice_array&lt;double&gt;&amp; v_even = d[slice(0,d.size()/2,2)];\n    slice_array&lt;double&gt;&amp; v_odd = d[slice(1,d.size()/2,2)];\n\n    v_odd *= v_even;\n    v_even = 0;\n}\n</code></pre>\n<p>The problem is, <code>v_even</code> and <code>v_odd</code> are non-const references to temporaries, which isn't allowed. And attempting to compile this emits an error:</p>\n<pre><code>error: non-const lvalue reference to type 'slice_array&lt;double&gt;' cannot bind to a temporary of type 'slice_array&lt;double&gt;'\n    slice_array&lt;double&gt;&amp; v_even = d[slice(0,d.size()/2,2)];\n                         ^        ~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n<p>I checked through all of the errata available online and there's nothing that touches upon this fundamental problem. Am I missing something? Did the language change in this regard since the book was printed (unlikely, since the book itself mentions the rule against non-const references to temporaries)? What's going on here?</p>\n<hr>\n<p>If I modify the function to use values instead of references, e.g. <code>slice_array&lt;double&gt; v_even = ...</code>, then this actually compiles. However, it turns out my local C++ headers make the copy constructor public, whereas Stroustrup and various online references (cppreference.com, cplusplus.com) claim the copy constructor is private. I assume that means this solution is non-portable. This is reinforced by the fact that Stroustrup explicitly lists a code sample with non-reference variables and says this produces an error.</p>\n<hr>\n<p>The C++98 spec (<a href=\"http://www-d0.fnal.gov/~dladams/cxx_standard.pdf\" rel=\"noreferrer\">PDF</a>) declares <code>slice_array&lt;T&gt;</code> as having a private copy constructor. By 2005 (according to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"noreferrer\">this spec</a>), and presumably as part of C++03, this changed to a public copy constructor.</p>\n</hr></hr>", "Tags": "<c++><reference><language-lawyer>", "OwnerUserId": "582", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11946711_11946896_1": {"section_id": 3732, "quality": 0.9210526315789473, "length": 35}, "so_11946711_11946896_2": {"section_id": 3733, "quality": 0.7, "length": 14}}, "n3337": {"so_11946711_11946896_1": {"section_id": 3594, "quality": 0.9210526315789473, "length": 35}, "so_11946711_11946896_2": {"section_id": 3595, "quality": 0.7, "length": 14}}, "n4659": {"so_11946711_11946896_1": {"section_id": 4499, "quality": 0.9210526315789473, "length": 35}, "so_11946711_11946896_2": {"section_id": 4500, "quality": 0.65, "length": 13}}}});