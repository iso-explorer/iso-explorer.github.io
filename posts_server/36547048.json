post_cb({"bq_ids": {"n4140": {"so_36547048_36547150_4": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_36547048_36547150_4": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_36547048_36547150_4": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "36547150": {"Id": "36547150", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_36547048_36547150_0\">How is the compiler treating these functions </p>\n</blockquote>\n<p>in an undefined way</p>\n<blockquote>\n<p id=\"so_36547048_36547150_1\">or is it automatically returning *this by looking at the return type?</p>\n</blockquote>\n<p>no. the program's behaviour is not predictable and certainly won't be correct.</p>\n<blockquote>\n<p id=\"so_36547048_36547150_2\">but it seems to work</p>\n</blockquote>\n<p>in an unoptimised build, very likely. The register holding the <code>this</code> pointer is probably not being modified.</p>\n<p>Wait until the optimiser starts inlining your code in your release build. Enjoy the fireworks.</p>\n<blockquote>\n<p id=\"so_36547048_36547150_3\">Why doesn't the compiler complain?</p>\n</blockquote>\n<p>If you enable warnings, it will. You should always enable all warnings. They help you to avoid incorrect code:</p>\n<pre><code>/tmp/gcc-explorer-compiler116311-75-17mquww/example.cpp: In member function 'OpenFile&amp; OpenFile::readonly()':\n28 : warning: no return statement in function returning non-void [-Wreturn-type]\n{ readonly_ = true; }\n^\nCompiled ok\n</code></pre>\n<p>From \u00a76.6.3 (2):</p>\n<blockquote>\n<p id=\"so_36547048_36547150_4\">Flowing off the end of a function is equivalent to a return with no value; this results in\n  undefined behavior in a value-returning function.</p>\n</blockquote>\n", "LastEditorUserId": "2015579", "LastActivityDate": "2016-04-11T11:23:14.893", "Score": "4", "CreationDate": "2016-04-11T11:15:19.623", "ParentId": "36547048", "CommentCount": "2", "OwnerUserId": "2015579", "LastEditDate": "2016-04-11T11:23:14.893"}, "36547048": {"ViewCount": "65", "Body": "<p>Why does'nt the compiler throw error for not returning this pointer for a function whose return type is classname&amp;</p>\n<p>Ex: In the functions readonly , readwrite etc , even though we comment return *this and do not return anything , this seems to work fine and also the chaining mechanism is perfectly working in the main function.</p>\n<p>Will these functions return *this automatically ?</p>\n<pre><code>class OpenFile {\npublic:\n  OpenFile(const std::string&amp; filename);\n\n  OpenFile&amp; readonly();  // changes readonly_ to true\n  OpenFile&amp; readwrite(); // changes readonly_ to false\n  OpenFile&amp; createIfNotExist();\n  OpenFile&amp; blockSize(unsigned nbytes);\n\nprivate:\n  friend class File;\n  std::string filename_;\n  bool readonly_;          // defaults to false [for example]\n  bool createIfNotExist_;  // defaults to false [for example]\n\n  unsigned blockSize_;     // defaults to 4096 [for example]\n\n};\ninline OpenFile::OpenFile(const std::string&amp; filename)\n  : filename_         (filename)\n  , readonly_         (false)\n  , createIfNotExist_ (false)\n  , blockSize_        (4096u)\n{ }\ninline OpenFile&amp; OpenFile::readonly()\n{ readonly_ = true; return *this; }\ninline OpenFile&amp; OpenFile::readwrite()\n{ readonly_ = false; return *this; }\ninline OpenFile&amp; OpenFile::createIfNotExist()\n{ createIfNotExist_ = true; return *this; }\ninline OpenFile&amp; OpenFile::blockSize(unsigned nbytes)\n{ blockSize_ = nbytes; return *this; }\n\nmain()\n{\n//OpenFile *obj = new OpenFile();\n  OpenFile f = OpenFile(\"foo.txt\")\n       .readonly()\n       .createIfNotExist()\n       .blockSize(1024);\n}\n</code></pre>\n<p>Deleting return statement will not effect the code at all, Something like this </p>\n<pre><code>inline OpenFile&amp; OpenFile::readonly()\n{ readonly_ = true;  }\ninline OpenFile&amp; OpenFile::readwrite()\n{ readonly_ = false;  }\ninline OpenFile&amp; OpenFile::createIfNotExist()\n{ createIfNotExist_ = true; }\ninline OpenFile&amp; OpenFile::blockSize(unsigned nbytes)\n{ blockSize_ = nbytes;  }\n</code></pre>\n<p>How is the compiler treating these functions or is it automatically returning *this by looking at the return type?</p>\n", "Title": "Why does'nt the compiler throw error for not returning this pointer for a function whose return type is classname&", "CreationDate": "2016-04-11T11:11:02.140", "LastActivityDate": "2016-04-11T11:23:14.893", "CommentCount": "2", "PostTypeId": "1", "Id": "36547048", "Score": "0", "OwnerUserId": "2256825", "Tags": "<c++><c++11><c++14><chaining><constructor-chaining>", "AnswerCount": "1"}});