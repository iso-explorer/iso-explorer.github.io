post_cb({"bq_ids": {"n4140": {"so_48354134_48357128_4": {"length": 6, "quality": 0.6, "section_id": 5404}, "so_48354134_48357128_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 5402}, "so_48354134_48354134_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5404}, "so_48354134_48355532_0": {"length": 19, "quality": 1.0, "section_id": 7033}, "so_48354134_48357128_2": {"length": 61, "quality": 0.9384615384615385, "section_id": 5404}, "so_48354134_48357128_3": {"length": 10, "quality": 1.0, "section_id": 7041}}, "n3337": {"so_48354134_48357128_4": {"length": 6, "quality": 0.6, "section_id": 5199}, "so_48354134_48357128_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 5197}, "so_48354134_48354134_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5199}, "so_48354134_48355532_0": {"length": 19, "quality": 1.0, "section_id": 6779}, "so_48354134_48357128_2": {"length": 61, "quality": 0.9384615384615385, "section_id": 5199}, "so_48354134_48357128_3": {"length": 10, "quality": 1.0, "section_id": 6786}}, "n4659": {"so_48354134_48357128_4": {"length": 6, "quality": 0.6, "section_id": 6853}, "so_48354134_48357128_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6849}, "so_48354134_48354134_0": {"length": 12, "quality": 1.0, "section_id": 6853}, "so_48354134_48355532_0": {"length": 19, "quality": 1.0, "section_id": 8530}, "so_48354134_48357128_2": {"length": 61, "quality": 0.9384615384615385, "section_id": 6853}, "so_48354134_48357128_3": {"length": 10, "quality": 1.0, "section_id": 8538}}}, "48357128": {"Id": "48357128", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48354134_48357128_0\">What happens at the redeclaration of <code>f</code>? Is <code>f</code> still considered <code>inline</code>?</p>\n</blockquote>\n<p>Yes, <code>f</code> is still considered <code>inline</code>.</p>\n<p>The relevant sections of the standard pertaining to the semantics of the <code>inline</code> function specifier can be found in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.spec#dcl.fct.spec\" rel=\"nofollow noreferrer\">[dcl.fct.spec]</a>:</p>\n<blockquote>\n<p id=\"so_48354134_48357128_1\">A function declaration ... with an <code>inline</code> specifier declares an inline function. The <code>inline</code> specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism.</p>\n<p id=\"so_48354134_48357128_2\">An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case ([basic.def.odr]). [ <em>Note</em>: A call to the inline function may be encountered before its definition appears in the translation unit.  \u2014 <em>end note</em> ] If the definition of a function appears in a translation unit before its first declaration as inline, the program is ill-formed. If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears; no diagnostic is required. An <code>inline</code> function with external linkage shall have the same address in all translation units.</p>\n</blockquote>\n<p>And in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/basic.def.odr#3\" rel=\"nofollow noreferrer\">[basic.def.odr]</a>:</p>\n<blockquote>\n<p id=\"so_48354134_48357128_3\">Every program shall contain exactly one definition of every <em>non-inline</em> function or variable that is odr-used in that program</p>\n</blockquote>\n<p>Also see an example in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.spec#dcl.stc-8\" rel=\"nofollow noreferrer\">[dcl.stc]/8</a>:</p>\n<blockquote id=\"so_48354134_48357128_4\">\n<pre><code>void h();\ninline void h();                // external linkage\n\ninline void l();\nvoid l();                       // external linkage\n</code></pre>\n</blockquote>\n<p>The interpretation of all that is:</p>\n<ul>\n<li><p><code>inline</code> as a function specifier acts as a flag, expressing your wish to have the call to the given function inlined. Once it is encountered on a certain function declaration, it remains \"set\" for that specific function overload, and there is no way to \"unset\" it.</p></li>\n<li><p>It doesn't matter if you specify <code>inline</code> on a <em>declaration</em> or a <em>definition</em> of a function, because a definition <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.def#2\" rel=\"nofollow noreferrer\">is also</a> a declaration and because multiple declarations are <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.def#1\" rel=\"nofollow noreferrer\">allowed</a>.<br>\nHowever, the <code>inline</code> specifier must be encountered <em>before</em> or <em>with</em> the definition of the function and <em>before</em> it is odr-used (<em>odr-use</em> means the compiler needs to actually emit code that invokes the function, or needs its address for whatever reason).</br></p></li>\n<li><p>The <code>inline</code> specifier has <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.spec#footnote-90\" rel=\"nofollow noreferrer\">no effect</a> on the linkage of the function, which remains external for non-static global functions. If an address of an <code>inline</code> function (that has external linkage) is taken, the compiler will emit an out-of-line definition for it, making sure the linker can fold multiple definitions if necessary (e.g. using a weak symbol). That way the address of the <code>inline</code> function in different TUs will be the same.</p></li>\n<li><p>Once a function is declared <code>inline</code> and has external linkage, it must be declared <code>inline</code> in all other translation units that odr-use it.</p></li>\n<li><p>You must provide the definition of the <code>inline</code> function in every translation unit that odr-uses it, and it must be exactly the same.</p></li>\n</ul>\n", "LastActivityDate": "2018-01-20T14:11:37.797", "Score": "1", "CreationDate": "2018-01-20T14:11:37.797", "ParentId": "48354134", "CommentCount": "5", "OwnerUserId": "485343"}, "48355532": {"Id": "48355532", "PostTypeId": "2", "Body": "<p>The effect of a redeclaration is specified in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.def\" rel=\"nofollow noreferrer\">[basic.def]/1</a></p>\n<blockquote>\n<p id=\"so_48354134_48355532_0\">A declaration may introduce one or more names into a translation unit or <strong>redeclare</strong> names introduced by previous declarations. <em>If so, the declaration specifies the interpretation and attributes of these names.</em>[...]</p>\n</blockquote>\n<p>So by redeclaring, one can add specifications to a name but not remove them.</p>\n", "LastActivityDate": "2018-01-20T11:23:01.407", "Score": "0", "CreationDate": "2018-01-20T11:23:01.407", "ParentId": "48354134", "CommentCount": "0", "OwnerUserId": "5632316"}, "48354134": {"ViewCount": "91", "Body": "<p>Consider the following example (in the same translation unit):</p>\n<pre><code>inline void f();\nvoid f() {}\n</code></pre>\n<p>What happens at the redeclaration of <code>f</code>? Is <code>f</code> still considered <code>inline</code>?</p>\n<p>I looked in the standard for this situation but I only found the reverse of it in 10.1.6/6 [dcl.inline]:</p>\n<blockquote>\n<p id=\"so_48354134_48354134_0\">[...] If the definition of a function or variable appears in a translation unit before its first declaration as inline, the program is ill-formed. [...]</p>\n</blockquote>\n<p>I would like some references in the standard which specify what happens in this situation.</p>\n<p>I saw this <a href=\"https://stackoverflow.com/questions/23595664/c-inline-functions-and-redeclarations\">post</a>, but it doesn't show an explicit reference in the standard. I'm inclined to believe there is no such reference. </p>\n", "AcceptedAnswerId": "48357128", "Title": "C++ inline redeclaration", "CreationDate": "2018-01-20T08:40:29.527", "Id": "48354134", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2018-01-20T14:11:37.797", "Score": "3", "OwnerUserId": "3766405", "Tags": "<c++><inline><redeclaration>", "AnswerCount": "2"}});