post_cb({"26044156": {"ParentId": "26043871", "CommentCount": "3", "Body": "<p>N3936 \u00a7<strong>17.6.4.8 Other functions [res.on.functions]</strong>:</p>\n<blockquote>\n<p id=\"so_26043871_26044156_0\">1 In certain cases (replacement functions, handler functions, operations on types used to instantiate standard library template components), the C++ standard library depends on components supplied by a C++ program. If these components do not meet their requirements, the Standard places no requirements on the implementation.</p>\n<p id=\"so_26043871_26044156_1\">2 In particular, the effects are undefined in the following cases:</p>\n<ul>\n<li>...</li>\n<li>if an incomplete type (3.9) is used as a template argument when instantiating a template component,\n  unless specifically allowed for that component.</li>\n</ul>\n</blockquote>\n<p>A quick scan through <strong>20.9.3 Class template <code>reference_wrapper</code> [refwrap]</strong> reveals no such specific exception for <code>reference_wrapper</code>, so your program has undefined behavior. Both implementations are conforming.</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "26044156", "Score": "14", "CreationDate": "2014-09-25T17:00:16.177", "LastActivityDate": "2014-09-25T17:00:16.177"}, "26043871": {"CommentCount": "2", "CreationDate": "2014-09-25T16:44:24.077", "PostTypeId": "1", "AcceptedAnswerId": "26044156", "LastEditorUserId": "3204551", "LastActivityDate": "2014-09-25T17:04:09.063", "LastEditDate": "2014-09-25T17:04:09.063", "ViewCount": "774", "FavoriteCount": "1", "Title": "Can I instantiate an std::reference_wrapper<T> where T is an incomplete type?", "Id": "26043871", "Score": "9", "Body": "<p>Does <code>std::reference_wrapper&lt;T&gt;</code> allow <code>T</code> to be incomplete, in the same way that a <code>T&amp;</code> can be dealt with without <code>T</code> being complete?</p>\n<p>GCC 4.9 accepts the following:</p>\n<pre><code>#include &lt;functional&gt;\n\nstruct woof;\n\nstruct test\n{\n   test(woof&amp; w) : w(w) {}\n   std::reference_wrapper&lt;woof&gt; w;\n};\n\nstruct woof\n{\n   int a;\n};\n\nint main()\n{\n    woof w;\n    test t = w;   // (braced-init would be better, but VS2012!)\n}\n</code></pre>\n<p>But MSVS 2012 rejects it with the following message:</p>\n<blockquote>\n<p id=\"so_26043871_26043871_0\">Error 1   error C2139: 'woof' : an undefined class is not allowed as an argument to compiler intrinsic type trait '__is_abstract' c:\\program files (x86)\\microsoft visual studio 11.0\\vc\\include\\type_traits  755 1   test3</p>\n</blockquote>\n<p>I suspect this is because the <code>op()</code> needs the full type, but the standard doesn't <em>appear</em> to specify either way.</p>\n<p>Which, if either, of these implementations is following standard mandates?</p>\n", "Tags": "<c++><c++11><language-lawyer><incomplete-type>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26043871_26044156_1": {"section_id": 6324, "quality": 1.0, "length": 5}, "so_26043871_26044156_0": {"section_id": 6323, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_26043871_26044156_1": {"section_id": 6081, "quality": 1.0, "length": 5}, "so_26043871_26044156_0": {"section_id": 6080, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_26043871_26044156_1": {"section_id": 7834, "quality": 1.0, "length": 5}, "so_26043871_26044156_0": {"section_id": 7833, "quality": 0.9583333333333334, "length": 23}}}});