post_cb({"22782166": {"ViewCount": "563", "LastEditDate": "2014-04-01T10:32:46.760", "AcceptedAnswerId": "22783134", "Title": "Function pointers with different return types", "CreationDate": "2014-04-01T09:46:04.293", "LastActivityDate": "2014-04-01T14:56:49.610", "CommentCount": "2", "Body": "<p>Is this correct code?</p>\n<pre><code>class SomeClass;\n\nSomeClass* createSomeClass(); // just returns new SomeClass\nvoid* (*createFuncPtr)();\n\nint main()\n{\n    createFuncPtr= (void* (*)()) &amp;createSomeClass;\n    SomeClass* instance = (SomeClass*)createFuncPtr();\n}\n</code></pre>\n<p>The C standard says:</p>\n<blockquote>\n<p id=\"so_22782166_22782166_0\">768 If a converted pointer is used to call a function whose type is\n  not compatible with the pointed-to type, the behavior is undefined.</p>\n</blockquote>\n<p>In this case, are the function types compatible? Or am I forced to re-cast the function pointer before calling it if I want to avoid ant kind of trouble?</p>\n<pre><code>SomeClass* instance = ((SomeClass* (*)())createFuncPtr)();\n</code></pre>\n<p>Thanks!</p>\n<p>Edit: yes, it contains C++ code but my question remains valid if it was C only, please leave the C tag.</p>\n", "PostTypeId": "1", "LastEditorUserId": "2025162", "Id": "22782166", "AnswerCount": "2", "Score": "1", "OwnerUserId": "2025162", "Tags": "<c++><c>", "FavoriteCount": "0"}, "22783134": {"Id": "22783134", "PostTypeId": "2", "Body": "<p>From the C99 standard section 6.7.5.1, paragraph 2:</p>\n<blockquote>\n<p id=\"so_22782166_22783134_0\">For two pointer types to be compatible, both shall be identically qualified and both shall be pointers to compatible types.</p>\n</blockquote>\n<p>In your case, the function pointers are not compatible, because the return values are not compatible. So, yes, you have to cast back before calling the pointed to function.</p>\n", "Score": "1", "LastActivityDate": "2014-04-01T10:26:34.377", "CreationDate": "2014-04-01T10:26:34.377", "ParentId": "22782166", "CommentCount": "2", "OwnerUserId": "2793118"}, "22782895": {"Id": "22782895", "PostTypeId": "2", "LastEditDate": "2014-04-01T11:08:41.120", "CommentCount": "6", "LastEditorUserId": "3484570", "LastActivityDate": "2014-04-01T11:08:41.120", "CreationDate": "2014-04-01T10:16:14.717", "ParentId": "22782166", "Score": "-2", "Body": "<p>You need to cast it back to the correct type, otherwise you will most likely corrupt your stack. See a more detailed and somewhat funny description here: <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2011/05/06/10161590.aspx\" rel=\"nofollow\">Old New Thing: A function pointer cast is a bug waiting to happen</a></p>\n<p>Edit: Since you need to cast it to the right type anyway you may as well just <s>use a void pointer</s> (Edit: does not work since a void pointer could have a smaller size, thanks to Filipe) instead of the wrong function pointer to store the pointer to avoid accidentally calling it wrong. Or use the correct function pointer type. Or an std::function object, depending on your goals.</p>\n", "OwnerUserId": "3484570"}, "bq_ids": {"n4140": {"so_22782166_22782166_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 5988}}, "n4659": {"so_22782166_22782166_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 7537}}}});