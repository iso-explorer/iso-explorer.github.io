post_cb({"bq_ids": {"n4140": {"so_34817394_34819002_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 95}}, "n3337": {"so_34817394_34819002_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 90}}, "n4659": {"so_34817394_34819002_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 99}}}, "34819002": {"Id": "34819002", "PostTypeId": "2", "Body": "<p>According to C11 (N1570 draft) 6.7/4 <em>Declarations</em> (within Constraints section):</p>\n<blockquote>\n<p id=\"so_34817394_34819002_0\">All declarations in the same scope that refer to the same object or\n  function shall specify compatible types.</p>\n</blockquote>\n<p>The definition serves also as declaration, hence the <em>language constraint</em> is violated. </p>\n<p>For that, the conforming implementation is obligated to produce a <em>diagnostic message</em>, that is in implementation-defined manner, as of 5.1.1.3 <em>Diagnostics</em>:</p>\n<blockquote>\n<p id=\"so_34817394_34819002_1\">A conforming implementation shall produce at least one diagnostic\n  message (identified in an implementation-defined manner) if a\n  preprocessing translation unit or translation unit contains a\n  violation of any syntax rule or constraint (...)</p>\n</blockquote>\n<p>That's all. A diagnostic message may be of any kind, they may even send you a letter, if they like so.</p>\n", "LastEditorUserId": "586873", "LastActivityDate": "2016-01-15T20:10:25.213", "Score": "2", "CreationDate": "2016-01-15T20:05:19.370", "ParentId": "34817394", "CommentCount": "1", "OwnerUserId": "586873", "LastEditDate": "2016-01-15T20:10:25.213"}, "34817394": {"ViewCount": "70", "Body": "<p>I was answering a question and noticed something that seemed odd. The code in question was more complicated, but the observation boils down to the fact that this compiles in MSVC 14.0:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid foo(int);\n\nint main()\n{\n    foo(66);\n\n    getchar();\n}\n\nvoid foo(const char* str, int x)\n{\n    printf(\"%s %d\\n\", str, x);\n}\n</code></pre>\n<p>This code produces undefined behavior, because the value of <code>str</code> in <code>foo</code> is <code>66</code>, which doesn't point to a valid null-terminated string, so in practice we (most likely) get a segfault.</p>\n<p>As stated, I used Visual Studio 2015 - MSVC 14.0 - to compile this. I'm compiling as the code as C. If we try <a href=\"https://ideone.com/Q89wBz\" rel=\"nofollow\">GCC 5.1</a>, it fails.</p>\n<p>At first I thought this was one of the weird thing C allowed in its early days and has been left in it not to break old code (such as implicit function prototypes). But here, we have a prototype AND a definition with the same name, yet they are not compatible. How come this is not rejected by the compiler? C doesn't allow function overloading, so two identifiers with identical names should not be legal.</p>\n<p>Why does MSVC not reject this code? Is there an explanation for this behavior? Is this explicitly allowed in one of the standards?</p>\n<p><strong>EDIT:</strong> Because there seems to be much confusion in the comments, I would like to clarify. I <em>know</em> how to avoid these kinds of mistakes, I always compile with the maximum warning level and treat warnings as errors; this is not the point here. The question is purely theoretical: I want to know whether this behavior is legal and defined in the C Standard. Because two C compilers behave differently when given the same code, something is wrong.</p>\n", "AcceptedAnswerId": "34819002", "Title": "Why can I have conflicting function prototypes and definitions with the same name?", "CreationDate": "2016-01-15T18:23:36.957", "Id": "34817394", "CommentCount": "15", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-01-15T18:31:30.300", "LastEditorUserId": "1928235", "LastActivityDate": "2016-01-15T20:10:25.213", "Score": "3", "OwnerUserId": "1928235", "Tags": "<c><visual-c++><function-prototypes>", "AnswerCount": "1"}});