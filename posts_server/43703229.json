post_cb({"43703341": {"ParentId": "43703229", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2017-04-30T05:46:32.840", "Score": "8", "LastEditorUserId": "5249307", "LastEditDate": "2017-04-30T05:55:11.170", "Id": "43703341", "OwnerUserId": "5249307", "Body": "<p>First, lets change your inheritance as currently it is private:</p>\n<pre><code>class B : virtual protected A {...};\nclass C : virtual protected A {...};\n</code></pre>\n<p>Now, in your copy constructor, explicitly specify that the copy constructors of <code>A</code> and <code>B</code> and <code>C</code> should be called:</p>\n<pre><code>class D : protected B, protected C {\n    D(const D &amp; obj) : A(obj), B(obj), C(obj) {cout &lt;&lt; \"8\";}\n};\n</code></pre>\n<p>And the output will be as desired (<code>2468</code>).</p>\n<h3>Why?</h3>\n<p>When we have virtual base classes, they must be initialized <strong>by the most derived class</strong>, otherwise there would be ambiguity concerning whether <code>B</code> or <code>C</code> for example is responsible for the construction of <code>A</code>.</p>\n<blockquote>\n<p id=\"so_43703229_43703341_0\">\u00a712.6.2, (13.1):</p>\n<p id=\"so_43703229_43703341_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8),\n  virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class base-specifier-list.</li>\n</ul>\n</blockquote>\n<p>In particular, if you define a copy constructor, and omit the list of copy constructors it should call, then <strong>the default constructors</strong> will be used. </p>\n", "LastActivityDate": "2017-04-30T05:55:11.170"}, "43703356": {"ParentId": "43703229", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2017-04-30T05:49:13.317", "Score": "3", "LastEditorUserId": "434551", "LastEditDate": "2017-04-30T06:03:13.123", "Id": "43703356", "OwnerUserId": "434551", "Body": "<p>The way you have inherited your classes, all of them use <code>private</code> inheritance.</p>\n<p>By changing the inheritance of <code>B</code> from <code>A</code> and <code>C</code> from <code>A</code> to be <code>protected</code> or <code>public</code>, you can resolve the problem.</p>\n<pre><code>class B : protected virtual A\n{\n   ...\n}\n\nclass C : protected virtual A\n{\n   ...\n}\n</code></pre>\n<p>or</p>\n<pre><code>class B : public virtual A\n{\n   ...\n}\n\nclass C : public virtual A\n{\n   ...\n}\n</code></pre>\n<p>and then update <code>D</code>'s copy constructor to:</p>\n<pre><code>D(const D &amp; obj) : A(obj), B(obj), C(obj) {cout &lt;&lt;\"8\";}\n</code></pre>\n<hr>\n<p><strong>PS</strong> It's baffling to me that the default constructor works even with <code>private</code> inheritance. </p>\n</hr>", "LastActivityDate": "2017-04-30T06:03:13.123"}, "43703229": {"CommentCount": "4", "ViewCount": "323", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2017-04-30T05:28:48.997", "LastActivityDate": "2017-05-08T03:22:07.313", "Title": "How to call copy constructor of all base classes for copying most derived class object in diamond inheritance in C++?", "FavoriteCount": "0", "LastEditDate": "2017-05-07T05:02:15.017", "Id": "43703229", "Score": "4", "Body": "<p>Consider the below code:</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A\n{\npublic:\n     A() {cout &lt;&lt; \"1\";}\n     A(const A &amp;obj) {cout &lt;&lt; \"2\";}\n};\n\nclass B: virtual A\n{\npublic:\n    B() {cout &lt;&lt; \"3\";}\n    B(const B &amp; obj) {cout&lt;&lt; \"4\";}\n};\n\nclass C: virtual A\n{\npublic:\n   C() {cout &lt;&lt; \"5\";}\n   C(const C &amp; obj) {cout &lt;&lt; \"6\";}\n};\n\nclass D:B,C\n{\npublic:\n    D()  {cout &lt;&lt; \"7\";}\n    D(const D &amp; obj) {cout &lt;&lt; \"8\";}\n};\n\nint main()\n{\n   D d1;\n   cout &lt;&lt; \"\\n\";\n   D d(d1);\n}\n</code></pre>\n<p>The output of the program is below:</p>\n<pre><code>1357\n1358\n</code></pre>\n<p>So, for line <code>D d(d1)</code> the copy constructor of <code>D</code> class is bein called. During inheritance we need to explicitly call copy constructor of base class otherwise only default constructor of base class is called. I understood till here.</p>\n<p><strong>My Problem:</strong></p>\n<p>Now I want to call copy constructor of all base classes during <code>D d(d1)</code> execution. For that if I try below\n<code>D(const D &amp; obj) : A(obj), B(obj), C(obj) {cout &lt;&lt; \"8\";}</code>\nThen I get this error:\nerror: <code>'class A A::A' is inaccessible within this context</code></p>\n<p>How to resolve the issue. I want copy constructor of <code>A</code>, <code>B</code> and <code>C</code> when copy constructor of <code>D</code> gets called. It might be very small change but I am not getting. </p>\n", "Tags": "<c++><copy-constructor><virtual-inheritance><ctor-initializer><private-inheritance>", "OwnerUserId": "1729567", "AnswerCount": "4"}, "43828129": {"ParentId": "43703229", "CommentCount": "0", "CreationDate": "2017-05-07T05:24:46.467", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "43828129", "Score": "0", "Body": "<p>Alternative solution which doesn't require changing the inheritance modifiers of class <code>B</code> or <code>C</code>:</p>\n<pre><code>class A\n{\npublic:\n     A() {cout &lt;&lt; \"1\";}\n     A(const A &amp;obj) {cout &lt;&lt; \"2\";}\n};\n\nclass B: virtual A\n{\npublic:\n    B() {cout &lt;&lt; \"3\";}\n    B(const B &amp; obj) {cout&lt;&lt; \"4\";}\n};\n\nclass C: virtual A\n{\npublic:\n   C() {cout &lt;&lt; \"5\";}\n   C(const C &amp; obj) {cout &lt;&lt; \"6\";}\n};\n\nclass D:B,C,virtual A\n{\npublic:\n    D() {cout &lt;&lt; \"7\";}\n    D(const D &amp; obj) : A(obj), B(obj), C(obj) {cout &lt;&lt; \"8\";}\n};\n</code></pre>\n", "LastActivityDate": "2017-05-07T05:24:46.467"}, "43839226": {"ParentId": "43703229", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-05-08T03:14:17.807", "Score": "0", "LastEditorUserId": "963864", "LastEditDate": "2017-05-08T03:22:07.313", "Id": "43839226", "OwnerUserId": "963864", "Body": "<p>Regarding access checking for constructors: from <a href=\"http://eel.is/c++draft/class.access#6\" rel=\"nofollow noreferrer\">[class.access]/6</a></p>\n<blockquote>\n<p id=\"so_43703229_43839226_0\">All access controls in Clause [class.access] affect the ability to\n  access a class member name from the declaration of a particular entity\n  ... [\u2009Note : This access also applies to <strong>implicit references to\n  constructors</strong>, conversion functions, and destructors.  \u2014\u2009end note]</p>\n</blockquote>\n<p>similarly, <a href=\"http://eel.is/c++draft/special#4\" rel=\"nofollow noreferrer\">[class.access]/4</a></p>\n<blockquote>\n<p id=\"so_43703229_43839226_1\">Special member functions obey the usual access rules. [\u2009Example:\n  Declaring a constructor protected ensures that only derived classes\n  and friends can create objects using it. \u2014\u2009end example\u2009]</p>\n</blockquote>\n<p>Regarding base class subobject initialization: from <a href=\"http://eel.is/c++draft/class.base.init#9\" rel=\"nofollow noreferrer\">[class.base.init]/9</a></p>\n<blockquote>\n<p id=\"so_43703229_43839226_2\">In a non-delegating constructor, if a given potentially constructed\n  subobject is not designated by a mem-initializer-id (including the\n  case where there is no mem-initializer-list because the constructor\n  has no ctor-initializer), then ... otherwise, the entity is\n  default-initialized</p>\n</blockquote>\n<p>The lack of any <em>ctor-initializer</em> for a base class subobject means that the subobject is default-initialized; from <a href=\"http://eel.is/c++draft/dcl.init#7\" rel=\"nofollow noreferrer\">[dcl.init]/7</a></p>\n<blockquote>\n<p id=\"so_43703229_43839226_3\">To default-initialize an object of type T means: ...\n  The constructor thus selected is called, with an empty argument list,\n  to initialize the object.</p>\n</blockquote>\n<p>So the lack of any base in a <em>ctor-initializer</em> is a request for default-initialization for that base, which means calling the default constructor.</p>\n<p>The lack of mention of a base class makes no difference; in any case, a constructor has no name and is not named in the <em>ctor-initializer</em>, it is referenced either explicitly or implicitly. There is nothing in the standard suggesting that access control should not be performed in such case.</p>\n<p>It seems like the constructor, being from an inaccessible base class, cannot be called either way, so your program should not compile.</p>\n<p>In any case, you can change the inheritance from private to protected, even add a path to the virtual base class:</p>\n<pre><code>class D: B, C, virtual A\n{\n</code></pre>\n<p>This way, the virtual base class <code>A</code> is still private, but is accessible to <code>D</code>.</p>\n", "LastActivityDate": "2017-05-08T03:22:07.313"}, "bq_ids": {"n4140": {"so_43703229_43839226_2": {"section_id": 435, "quality": 1.0, "length": 20}, "so_43703229_43839226_0": {"section_id": 6669, "quality": 0.8148148148148148, "length": 22}, "so_43703229_43703341_1": {"section_id": 438, "quality": 1.0, "length": 6}, "so_43703229_43839226_1": {"section_id": 364, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_43703229_43839226_2": {"section_id": 427, "quality": 0.85, "length": 17}, "so_43703229_43839226_0": {"section_id": 6424, "quality": 0.8148148148148148, "length": 22}, "so_43703229_43703341_1": {"section_id": 429, "quality": 1.0, "length": 6}, "so_43703229_43839226_1": {"section_id": 354, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_43703229_43839226_2": {"section_id": 454, "quality": 1.0, "length": 20}, "so_43703229_43839226_0": {"section_id": 8144, "quality": 0.8148148148148148, "length": 22}, "so_43703229_43703341_1": {"section_id": 458, "quality": 1.0, "length": 6}, "so_43703229_43839226_3": {"section_id": 4048, "quality": 0.8571428571428571, "length": 12}, "so_43703229_43839226_1": {"section_id": 376, "quality": 0.8571428571428571, "length": 18}}}});