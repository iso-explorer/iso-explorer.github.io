post_cb({"12419384": {"CommentCount": "6", "AcceptedAnswerId": "12419573", "PostTypeId": "1", "LastEditorUserId": "2864740", "CreationDate": "2012-09-14T06:44:07.137", "LastActivityDate": "2014-06-24T05:46:29.590", "LastEditDate": "2014-06-24T05:46:29.590", "ViewCount": "186", "FavoriteCount": "0", "Title": "\"if (var)\" uses number conversion instead of boolean", "Id": "12419384", "Score": "4", "Body": "<p>Why if (var) ... uses number conversion instead of boolean ?\nI have a class that implements both :</p>\n<pre><code>operator int() { ....}\noperator bool() { ....}\n</code></pre>\n<p>but if I use :</p>\n<pre><code>if (my_class_var) ....;\n</code></pre>\n<p>then the <code>int</code> conversion is used instead of <code>boolean</code> ?!!?!</p>\n<p>EDIT:\nAs versedmarald say it is correct. I found what was the differnce.. I'm in fact using :</p>\n<pre><code>operator int() { ....}\noperator bool() const { ... }\n</code></pre>\n<p>Still mesmerized, why the difference ?\ngcc version 4.6.2</p>\n", "Tags": "<c++><if-statement><types>", "OwnerUserId": "1019129", "AnswerCount": "3"}, "12419609": {"ParentId": "12419384", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-09-14T07:01:28.273", "Score": "1", "LastEditorUserId": "1498580", "LastEditDate": "2012-09-14T07:31:31.993", "Id": "12419609", "OwnerUserId": "1498580", "Body": "<p>There are two <code>used-defined implicit conversion chains</code>.</p>\n<p>First - <code>class -&gt; bool -&gt; no conversion</code></p>\n<p>Second - <code>class -&gt; int -&gt; bool</code></p>\n<p>n3337 4/2\n<blockquote><p id=\"so_12419384_12419609_0\">\nNote: expressions with a given type will be implicitly converted to other types in several contexts:</p>\n<p id=\"so_12419384_12419609_1\">\u2014 When used in the condition of an if statement or iteration statement (6.4, 6.5). The destination type\nis bool.</p></blockquote></p>\n<p>n3337 4/3\n<blockquote><p id=\"so_12419384_12419609_2\">\nThe effect of either implicit conversion is the same as performing the\ndeclaration and initialization and then using the temporary variable as the result of the conversion.</p></blockquote></p>\n<p>Quotes means that really</p>\n<pre><code>if (class_var) \n</code></pre>\n<p>is</p>\n<pre><code>if (bool _ = class_var)\n</code></pre>\n<p>n3337 13.3.3/1\n<blockquote><p id=\"so_12419384_12419609_3\">\nGiven these definitions, a viable function F1 is defined to be a better function than another viable function\nF2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n<p id=\"so_12419384_12419609_4\">\u2014 the context is an initialization by user-defined conversion (see 8.5, 13.3.1.5, and 13.3.1.6) and the\nstandard conversion sequence from the return type of F1 to the destination type (i.e., the type of the\nentity being initialized) is a better conversion sequence than the standard conversion sequence from\nthe return type of F2 to the destination type. [ Example:</p>\n<pre><code>struct A {\nA();\noperator int();\noperator double();\n} a;\nint i = a; // a.operator int() followed by no conversion\n//is better than a.operator double() followed by\n//a conversion to int\nfloat x = a; //ambiguous: both possibilities require conversions,\n//and neither is better than the other\n</code></pre>\n<p id=\"so_12419384_12419609_5\">\u2014 end example </p></blockquote></p>\n<p>So, compiler should choose <code>operator bool</code>, since <code>class -&gt; bool -&gt; no standart conversion</code> is better than <code>class -&gt; int -&gt; standard conversion to bool</code></p>\n", "LastActivityDate": "2012-09-14T07:31:31.993"}, "12419608": {"ParentId": "12419384", "CommentCount": "0", "Body": "<p>If what you say is true, I believe your compiler is in violation of the Standard:</p>\n<blockquote>\n<p id=\"so_12419384_12419608_0\">(\u00a76.4/4) The value of a condition that is an initialized declaration in a statement other than a switch statement is the value of the declared variable contextually converted to bool (Clause 4). If that conversion is ill-formed, the program is ill-formed. [...]</p>\n</blockquote>\n<p>(To be clear, this is in the context of \u00a76.4, which describes <code>if</code> and <code>switch</code> statements.)</p>\n", "OwnerUserId": "777186", "PostTypeId": "2", "Id": "12419608", "Score": "3", "CreationDate": "2012-09-14T07:01:24.677", "LastActivityDate": "2012-09-14T07:01:24.677"}, "12419573": {"ParentId": "12419384", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2012-09-14T06:58:39.917", "Score": "1", "LastEditorUserId": "285951", "LastEditDate": "2012-09-14T07:13:16.877", "Id": "12419573", "OwnerUserId": "285951", "Body": "<p>It doesn't (using <code>g++</code> at least). My guess would be there is an error in your conversion operators.</p>\n<pre><code>#include &lt;iostream&gt;\nclass A {\npublic:\n    operator int() { return 1; }\n};\n\nclass B {\npublic:\n    operator int() { return 1; }\n    operator bool() { return false; }\n};\n\nint main() {\n    A a;\n    B b;\n\n    if (a)\n        std::cout &lt;&lt; \"true\\n\";\n    else\n        std::cout &lt;&lt; \"false\\n\";\n\n    if (b)\n        std::cout &lt;&lt; \"true\\n\";\n    else\n        std::cout &lt;&lt; \"false\\n\";\n}\n</code></pre>\n<p>Outputs:</p>\n<pre><code>true\nfalse\n</code></pre>\n", "LastActivityDate": "2012-09-14T07:13:16.877"}, "bq_ids": {"n4140": {"so_12419384_12419609_3": {"section_id": 603, "quality": 0.85, "length": 17}, "so_12419384_12419609_0": {"section_id": 1, "quality": 0.9090909090909091, "length": 10}, "so_12419384_12419609_4": {"section_id": 603, "quality": 0.8928571428571429, "length": 25}, "so_12419384_12419609_2": {"section_id": 5, "quality": 0.8666666666666667, "length": 13}, "so_12419384_12419609_1": {"section_id": 1, "quality": 0.8888888888888888, "length": 8}, "so_12419384_12419608_0": {"section_id": 3885, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_12419384_12419609_3": {"section_id": 593, "quality": 0.85, "length": 17}, "so_12419384_12419609_0": {"section_id": 1, "quality": 0.9090909090909091, "length": 10}, "so_12419384_12419609_4": {"section_id": 593, "quality": 0.8928571428571429, "length": 25}, "so_12419384_12419609_2": {"section_id": 2, "quality": 0.9333333333333333, "length": 14}, "so_12419384_12419609_1": {"section_id": 1, "quality": 0.8888888888888888, "length": 8}, "so_12419384_12419608_0": {"section_id": 3745, "quality": 0.8571428571428571, "length": 18}}, "n4659": {"so_12419384_12419609_3": {"section_id": 629, "quality": 0.85, "length": 17}, "so_12419384_12419609_0": {"section_id": 1, "quality": 0.8181818181818182, "length": 9}, "so_12419384_12419609_4": {"section_id": 629, "quality": 0.8928571428571429, "length": 25}, "so_12419384_12419609_2": {"section_id": 5, "quality": 0.8666666666666667, "length": 13}, "so_12419384_12419609_1": {"section_id": 1, "quality": 0.8888888888888888, "length": 8}, "so_12419384_12419608_0": {"section_id": 4764, "quality": 0.9047619047619048, "length": 19}}}});