post_cb({"bq_ids": {"n4140": {"so_31681856_31682099_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 5770}, "so_31681856_31682099_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 5770}, "so_31681856_31682099_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5770}, "so_31681856_31682099_4": {"length": 7, "quality": 1.0, "section_id": 175}, "so_31681856_31682129_0": {"length": 12, "quality": 0.8, "section_id": 5770}, "so_31681856_31682099_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 5770}}, "n3337": {"so_31681856_31682099_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 5543}, "so_31681856_31682099_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 5543}, "so_31681856_31682099_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5543}, "so_31681856_31682099_4": {"length": 7, "quality": 1.0, "section_id": 169}, "so_31681856_31682129_0": {"length": 12, "quality": 0.8, "section_id": 5543}, "so_31681856_31682099_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 5543}}, "n4659": {"so_31681856_31682099_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 7227}, "so_31681856_31682099_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 7227}, "so_31681856_31682099_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 7227}, "so_31681856_31682099_4": {"length": 7, "quality": 1.0, "section_id": 180}, "so_31681856_31682129_0": {"length": 12, "quality": 0.8, "section_id": 7227}, "so_31681856_31682099_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 7227}}}, "31682129": {"Id": "31682129", "PostTypeId": "2", "Body": "<p>An implementation can issue <sup>(1)</sup>any number of diagnostics it wants, as long as it does issue the required diagnostics.</p>\n<p>It must accept correct programs, to the degree that it's able to,</p>\n\nC++14 \u00a71.4/2:\n\n<blockquote>\n<p id=\"so_31681856_31682129_0\"><em>\u201d</em> If a program contains no violations of the rules in this International Standard, a conforming imple-\n  mentation shall, within its resource limits, accept and correctly execute that program\"</p>\n</blockquote>\n<p>but it can issue diagnostics about it.</p>\n<p>The C++ standard does not differentiate between <strong>error messages</strong> and <strong>warning messages</strong>, but this is a <em>de facto</em> standard. An error message means (by convention) that no binary is produced, because the problem is too severe. A warning message means (by convention) that there is a potential problem, but not a direct violation of language rules, and so a binary is produced unless there are also errors.</p>\n<hr>\n<p>Sometimes the lines are a bit blurred, where implementations incorrectly but for pragmatic reasons accept invalid code, with only warnings or even no diagnostics. For new code one may therefore ask the compiler to treat every warning as an error, and aim for completely <strong>clean compiles</strong>. And as I understand it that's now absolutely not uncommon.</p>\n<p>With some compilers, e.g. Visual C++, it can however be problematic, because the compiler issues too many <strong>silly-warnings</strong>, warnings about perfectly legitimate and non-problematic constructs. Then one has to somehow suppress those warnings. E.g. via <code>#pragma</code> directives, if possible, or by code rewrites.</p>\n<p>Happily for Visual C++ there exists <a href=\"https://alfps.wordpress.com/the-no_sillywarnings_please-h-file/\" rel=\"nofollow noreferrer\">a header with such <code>#pragma</code> directives that turn off sillywarnings</a>, compiled about five years ago from a community effort in the comp.lang.c++ Usenet group. And happily, for the community edition of Visual Studio 2015 there is <a href=\"https://visualstudiogallery.msdn.microsoft.com/73c7c7bb-ac4e-4397-b98f-4a15ee73e14c\" rel=\"nofollow noreferrer\">an extension that provides a project template with that header included</a>. These are both by me.</p>\n<hr>\n<p>For the code in question,</p>\n<blockquote id=\"so_31681856_31682129_1\">\n<pre><code>int main() { 0; }\n</code></pre>\n</blockquote>\n<p>\u2026 instead of suppressing the warning, which generally is a useful one, you should rewrite the code to express your intent explicitly:</p>\n<pre><code>int main() { (void)0; }\n</code></pre>\n<p>The <strong><code>(void)</code></strong> cast tells the compiler that it's  your intent to discard the value of that expression.</p>\n<p>In the case of using this construct for an otherwise unused function argument, you can additionally declare an incomplete class of the same name, to prevent inadvertent use of the name:</p>\n<pre><code>(void)arg_name; struct arg_name;\n</code></pre>\n<p>But since it's unconventional it may trip up other programmers \u2013 with the compilers I use the error message for later use of the name is not exactly intuitive.</p>\n<hr>\n<p><sup>\n<sup>(1)</sup> Except as <a href=\"https://stackoverflow.com/a/31682099/464581\">noted by Columbo in his answer</a>, C++14 \u00a714.6/8  \u201cNo diagnostic shall be issued for a template for which a valid specialization can be generated.\u201d.\n</sup></p>\n</hr></hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-28T16:42:36.660", "Score": "3", "CreationDate": "2015-07-28T16:29:45.517", "ParentId": "31681856", "CommentCount": "12", "OwnerUserId": "464581", "LastEditDate": "2017-05-23T11:58:19.717"}, "31681856": {"ViewCount": "148", "Body": "<p>Is an implementation allowed to issue a diagnostic message for a well-formed program?</p>\n<p>For example some compilers issue a warning about unused expression result when compiling the following well-formed program:</p>\n<pre><code>int main() { 0; }\n</code></pre>\n<p>Are such compilers allowed to consider that warning a diagnostic message?</p>\n", "AcceptedAnswerId": "31682129", "Title": "Diagnostic message for well-formed program", "CreationDate": "2015-07-28T16:15:30.663", "Id": "31681856", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-29T15:02:06.357", "Score": "3", "OwnerUserId": "1272610", "Tags": "<c++><language-lawyer><diagnostics>", "AnswerCount": "2"}, "31682099": {"Id": "31682099", "PostTypeId": "2", "Body": "<p>It's perfectly fine to issue a diagnostic, as long as the rules below are met in any corresponding scenario. \u00a71.4/2: </p>\n<blockquote>\n<p id=\"so_31681856_31682099_0\">Although this International Standard states only requirements on C ++\n  implementations, those requirements are often easier to understand if\n  they are phrased as requirements on programs, parts of programs, or\n  execution of programs. Such requirements have the following meaning:</p>\n<ul>\n<li><p id=\"so_31681856_31682099_1\"><strong>If a program contains no violations of the rules in this International Standard, a conforming implementation shall</strong>, within\n  its resource limits, <strong>accept and correctly execute that program</strong>.</p></li>\n<li><p id=\"so_31681856_31682099_2\">If a program contains a violation of any diagnosable rule or an occurrence of a construct described in this Standard as\n  \u201cconditionally-supported\u201d when the implementation does not support\n  that construct, a conforming implementation shall issue at least one\n  diagnostic message.</p></li>\n<li><p id=\"so_31681856_31682099_3\">If a program contains a violation of a rule for which no diagnostic is required, this International Standard places no requirement on\n  implementations with respect to that program.</p></li>\n</ul>\n</blockquote>\n<p>\"Accepting\" solely addresses the acknowledgment of the implementation that this is a well-formed program, not the absence of any diagnostics. After all, despite any warnings issued in the process, implementations still yield the object file you asked for.</p>\n<p>However, there is one rule concerning templates that does require that there be no diagnostic issued; \u00a714.6/8:</p>\n<blockquote>\n<p id=\"so_31681856_31682099_4\">No diagnostic shall be issued for a template for which a valid\n  specialization can be generated.</p>\n</blockquote>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-07-29T15:02:06.357", "Score": "4", "CreationDate": "2015-07-28T16:28:19.967", "ParentId": "31681856", "CommentCount": "2", "OwnerUserId": "3647361", "LastEditDate": "2015-07-29T15:02:06.357"}});