post_cb({"14514074": {"Id": "14514074", "PostTypeId": "2", "Body": "<p>In your der,There are two base class, one is for inheriting, another one is b(the member of der).</p>\n", "LastActivityDate": "2013-01-25T01:49:40.277", "CommentCount": "0", "CreationDate": "2013-01-25T01:49:40.277", "ParentId": "14513534", "Score": "0", "OwnerUserId": "1058875"}, "14513637": {"Id": "14513637", "PostTypeId": "2", "Body": "<p>Keep in mind that you are adding a member of type <code>base</code> to the <code>der</code> class, which also needs to be constructed. That member is being initialized with the constructor that doesn't take arguments. What you probably meant was:</p>\n<pre><code>class base\n{\nprivate:\n    int num;\npublic:\n\n    base()\n    {\n        std::cout &lt;&lt; \"Default Constructor called \\n\";\n    }\n    base (int i) : num(i)\n    {\n        std::cout &lt;&lt; \"Int constructor called \\n\";\n    }\n};\n\nclass der : public base\n{\nprivate:\n    //base b;\npublic:\n    der(int i):base(i)\n    {\n        std::cout &lt;&lt; \"Derived constructor called \\n\";\n    }\n};\n\nvoid main()\n{\n    der d(12);\n}\n</code></pre>\n", "LastActivityDate": "2013-01-25T00:56:35.400", "CommentCount": "0", "CreationDate": "2013-01-25T00:56:35.400", "ParentId": "14513534", "Score": "1", "OwnerUserId": "599926"}, "bq_ids": {"n4140": {"so_14513534_14513705_0": {"length": 18, "quality": 0.75, "section_id": 7146}}, "n3337": {"so_14513534_14513705_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}}, "n4659": {"so_14513534_14513705_0": {"length": 18, "quality": 0.75, "section_id": 8647}}}, "14513534": {"ViewCount": "458", "Body": "<p>I was reading effective C++ and I couldn't really understand one of the mentioned benefit of initialization list.From what I understand is that initialization lists also help to avoid calling of unnecessary default constructors especially when they are not needed. So in order to test that I created a simple code example as such</p>\n<pre><code>class base\n{\npublic:\n\n    base()\n    {\n        std::cout &lt;&lt; \"Default Constructor called \\n\";\n    }\n    base (int i)\n    {\n        std::cout &lt;&lt; \"Int constructor called \\n\";\n    }\n};\n\nclass der : public base\n{\nprivate:\n    base b;\npublic:\n    der(int i):b(i)\n    {\n        std::cout &lt;&lt; \"Derived constructor called \\n\";\n    }\n};\n\nvoid main()\n{\n    der d(12);\n}\n</code></pre>\n<p>No where I assumed that only the int constructor will be called instead both the constructors of the base class are called. Could anyone please clarify this concept.</p>\n", "AcceptedAnswerId": "14513606", "Title": "Benefit of Initialization List - Avoiding calls to default constructors", "CreationDate": "2013-01-25T00:45:30.773", "Id": "14513534", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-01-25T01:49:40.277", "Score": "-1", "OwnerUserId": "1305891", "Tags": "<c++>", "AnswerCount": "4"}, "14513606": {"Id": "14513606", "PostTypeId": "2", "Body": "<p>The problem is that you actually have 2 instances of <code>base</code>, one as a member and one as a base. Either change into <code>der(int i):base(i),b(i)</code> or remove the member.</p>\n", "LastActivityDate": "2013-01-25T00:53:40.380", "CommentCount": "1", "CreationDate": "2013-01-25T00:53:40.380", "ParentId": "14513534", "Score": "4", "OwnerUserId": "135326"}, "14513705": {"Id": "14513705", "PostTypeId": "2", "Body": "<p><code>der</code> has two <code>base instances</code>, as explained by Ylisar. <strong>As base has default constructor, it will be implicitly called in der constructor.</strong> </p>\n<p>Also C++ only supports below two forms of main function, there is no <code>void main()</code> in C++</p>\n<p><strong>\u00a73.6.1 Main function</strong></p>\n<blockquote>\n<p id=\"so_14513534_14513705_0\">An implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined. All implementations\n  shall allow both of the following definitions of main:  </p>\n<p id=\"so_14513534_14513705_1\">int main() { /* ... */ } </p>\n<p id=\"so_14513534_14513705_2\">and  </p>\n<p id=\"so_14513534_14513705_3\">int main(int argc, char* argv[]) { /* ... */ }</p>\n</blockquote>\n", "LastActivityDate": "2013-01-25T01:04:50.290", "CommentCount": "0", "CreationDate": "2013-01-25T01:04:50.290", "ParentId": "14513534", "Score": "1", "OwnerUserId": "951757"}});