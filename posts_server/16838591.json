post_cb({"bq_ids": {"n4140": {"so_16838591_16838644_7": {"length": 15, "quality": 0.9375, "section_id": 3287}, "so_16838591_16838644_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 1007}, "so_16838591_16838644_9": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_16838591_16838644_8": {"length": 15, "quality": 0.9375, "section_id": 3287}, "so_16838591_16838644_6": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_16838591_16838644_7": {"length": 11, "quality": 0.6875, "section_id": 3157}, "so_16838591_16838644_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 992}, "so_16838591_16838644_9": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_16838591_16838644_8": {"length": 11, "quality": 0.6875, "section_id": 3157}, "so_16838591_16838644_6": {"length": 4, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_16838591_16838644_7": {"length": 15, "quality": 0.9375, "section_id": 4049}, "so_16838591_16838644_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 802}, "so_16838591_16838644_9": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_16838591_16838644_8": {"length": 15, "quality": 0.9375, "section_id": 4049}}}, "16838644": {"Id": "16838644", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16838591_16838644_0\">If the key does not exist, then after execution of count[x]++;, I should have count[x]=1 i.e. int should be 0 initialized. Will this vary with platform.</p>\n</blockquote>\n<p>No, it will not vary. The value will be <em>value-initialized</em>. So if the type is a fundamental type, such as <code>int</code>, it will be initialized to <code>0</code>. This is specified by paragraph 23.4.4.3/1 of the C++11 Standard:</p>\n<blockquote>\n<pre><code>T&amp; operator[](const key_type&amp; x);\n</code></pre>\n<p id=\"so_16838591_16838644_1\">1 <em>Effects</em>: If there is no key equivalent to <code>x</code> in the map, inserts <code>value_type(x, T())</code> into the map.</p>\n</blockquote>\n<p>The fact that <code>T()</code> corresponds to value-initialization is specified in paragraph 8.5/17:</p>\n<blockquote>\n<p id=\"so_16838591_16838644_2\">The semantics of initializers are as follows. [...]</p>\n<p id=\"so_16838591_16838644_3\">[...]</p>\n<p id=\"so_16838591_16838644_4\">\u2014 <strong>If the initializer is <code>()</code>, the object is value-initialized</strong>.</p>\n<p id=\"so_16838591_16838644_5\">[...]</p>\n</blockquote>\n<p>Finally, per paragraph 8.5/8:</p>\n<blockquote>\n<p id=\"so_16838591_16838644_6\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<p id=\"so_16838591_16838644_7\">\u2014 if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a\n  default constructor that is user-provided or deleted, then the object is default-initialized;</p>\n<p id=\"so_16838591_16838644_8\">\u2014 if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided or deleted default constructor,\n  then the object is zero-initialized and, if <code>T</code> has a non-trivial default constructor, default-initialized;</p>\n<p id=\"so_16838591_16838644_9\">\u2014 if <code>T</code> is an array type, then each element is value-initialized;</p>\n<p id=\"so_16838591_16838644_10\">\u2014 <strong>otherwise, the object is zero-initialized</strong>.</p>\n</blockquote>\n<p>Next question:</p>\n<blockquote>\n<p id=\"so_16838591_16838644_11\">If it exists, the operator should work as expected i.e. increment the value.</p>\n</blockquote>\n<p>Yes (modulo operator overloading of course).</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-30T14:25:14.677", "Score": "11", "CreationDate": "2013-05-30T14:18:45.663", "ParentId": "16838591", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-05-30T14:25:14.677"}, "16838656": {"Id": "16838656", "PostTypeId": "2", "Body": "<p>If you do <code>count[x]++</code> where the key <code>x</code> doesn't exists, the <code>map</code> will default-construct a new instance, put it in the map and return the reference.</p>\n<p>Since your values here are <code>int</code>, and <code>int</code> ares default-constructed to <code>0</code> as if you make <code>int()</code>, <strong>it will always work as expected</strong>.</p>\n", "LastEditorUserId": "1439688", "LastActivityDate": "2013-05-30T14:25:10.357", "Score": "1", "CreationDate": "2013-05-30T14:19:27.610", "ParentId": "16838591", "CommentCount": "0", "OwnerUserId": "1439688", "LastEditDate": "2013-05-30T14:25:10.357"}, "16838591": {"ViewCount": "218", "Body": "<p>Let us assume we have</p>\n<pre><code>map&lt;int, int&gt; count;\n</code></pre>\n<p>How safe(platform dependent, compiler issues) is the operation <code>count[x]++;</code> or <code>count[x] += value;</code> where <code>x</code> and <code>value</code> are integers.</p>\n<p>The behaviour I would like to observe is the following:</p>\n<ul>\n<li>If the key does not exist, then after execution of <code>count[x]++;</code>, I should have <code>count[x]=1</code> <em>i.e.</em> int should be 0 initialized. Will this vary with platform.</li>\n<li>If it exists, the operator should work as expected <em>i.e.</em> increment the value.</li>\n</ul>\n<p>For reference there is a question on similar issue <a href=\"https://stackoverflow.com/questions/5616421/increment-mapstring-int-using-operator\">here</a> but that does not answer the platform dependent/compiler dependent part.</p>\n<p>In other words, will <code>count[x]++;</code> or <code>count[x] += value;</code> always work.</p>\n", "AcceptedAnswerId": "16838644", "Title": "How safe is count[x]++ on maps", "CreationDate": "2013-05-30T14:16:00.173", "Id": "16838591", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:22:04.847", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-30T14:25:14.677", "Score": "3", "OwnerUserId": "1317240", "Tags": "<c++><stl><initialization>", "AnswerCount": "3"}, "16838640": {"Id": "16838640", "PostTypeId": "2", "Body": "<p>Integer and other primitive C++ types in a map are initialized to zero if they don't exist. Other types are initialized with their default constructor of the type (which can of course give some interesting results if the default constructor doesn't do a good job...)</p>\n<p>But if we assume basic C++ types, then <code>count[x]++</code> will be fine. </p>\n", "LastActivityDate": "2013-05-30T14:18:28.573", "CommentCount": "0", "CreationDate": "2013-05-30T14:18:28.573", "ParentId": "16838591", "Score": "2", "OwnerUserId": "1919155"}});