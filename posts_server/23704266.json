post_cb({"bq_ids": {"n4140": {"so_23704266_23704331_1": {"length": 55, "quality": 0.8208955223880597, "section_id": 5485}}, "n3337": {"so_23704266_23704331_1": {"length": 54, "quality": 0.8059701492537313, "section_id": 5271}}, "n4659": {"so_23704266_23704331_1": {"length": 49, "quality": 0.7313432835820896, "section_id": 6920}}}, "23704266": {"ViewCount": "745", "Body": "<p>this code compiles under MSVC 2013, but not under Clang 500.2.79:</p>\n<pre><code>class A\n{\n    friend class B;\n    B *b;\n};\n\nclass B\n{\n};\n\n&gt; error: unknown type name 'B'\n</code></pre>\n<p>Why?</p>\n", "AcceptedAnswerId": "23704331", "Title": "Why can't I forward declare an internal friend class?", "CreationDate": "2014-05-16T20:44:41.357", "Id": "23704266", "CommentCount": "9", "LastEditDate": "2014-05-16T20:53:47.400", "PostTypeId": "1", "LastEditorUserId": "805659", "LastActivityDate": "2014-05-16T22:20:02.300", "Score": "2", "OwnerUserId": "805659", "Tags": "<c++><friend>", "AnswerCount": "1"}, "23704331": {"Id": "23704331", "PostTypeId": "2", "Body": "<p><strong>A friend declaration doesn't itself (always) require a forward declaration, but subsequent uses of the friend pointers/references do.</strong> VC++ appears to be allowing functionality not allowed by the language specification. Functions do have slightly more liberal lookup rules than classes though:</p>\n<blockquote>\n<p id=\"so_23704266_23704331_0\"><strong>C++11 \u00a77.3.1.2/3</strong> (Namespace member de\ufb01nitions) <strong>[namespace.memdef]</strong>:</p>\n<p id=\"so_23704266_23704331_1\"><em>Every name \ufb01rst declared in a namespace is a member of that namespace. If a friend declaration in a non-local class \ufb01rst declares a class, function, class template or function template the friend is a member of the innermost enclosing namespace. The name of the friend is not found by unquali\ufb01ed lookup (3.4.1) or by quali\ufb01ed lookup (3.4.3) until a matching declaration is provided in that namespace scope (either before or after the class de\ufb01nition granting friendship). If a friend <strong>function or function template</strong> is called, its\n  name may be found by the name lookup that considers functions from namespaces and classes associated with the types of the function arguments (3.4.2).</em></p>\n</blockquote>\n<p><strong>The specification's example:</strong></p>\n<pre><code>// Assume f and g have not yet been declared.\nvoid h(int);\ntemplate &lt;class T&gt; void f2(T);\n\nnamespace A {\n  class X {\n    friend void f(X);        // A::f(X) is a friend\n\n    class Y {\n      friend void g();       // A::g is a friend\n      friend void h(int);    // A::h is a friend, ::h not considered\n      friend void f2&lt;&gt;(int); // ::f2&lt;&gt;(int) is a friend\n    };\n  };\n\n  // A::f, A::g and A::h are not visible here\n  X x;\n\n  void g()    { f(x); }      // de\ufb01nition of A::g\n  void f(X)   { /* ... */}   // de\ufb01nition of A::f\n  void h(int) { /* ... */ }  // de\ufb01nition of A::h\n  // A::f, A::g and A::h are visible here and known to be friends\n}\n\nusing A::x;\nvoid h() {\n  A::f(x);\n  A::X::f(x); // error: f is not a member of A::X\n  A::X::Y::g(); // error: g is not a member of A::X::Y\n}\n</code></pre>\n<p>Internal (\"nested\") classes are automatically friended, but they have to be defined, not just declared, internally:</p>\n<pre><code>class A {\n  public:\n    // This class is nested, and referred to as \"A::B\" outside of A.\n    class B {\n      public:\n        int foo(A &amp;a) { return a.x; } // OK by default to access A's privates\n    };\n\n  private:\n    int x;\n};\n\nA a;\nA::B b;\nint n = b.foo(a);\n</code></pre>\n<p>If you move your definition of B (or just make a forward declaration), you can properly friend a non-nested class:</p>\n<pre><code>class B;\n\nclass A {\n  friend class B; // OK, since B (not nested) declared before this directive\n  B *b; \n}\n\nclass B { }; // can define B later, since only B pointer/references used earlier\n</code></pre>\n", "LastEditorUserId": "334932", "LastActivityDate": "2014-05-16T22:20:02.300", "Score": "4", "CreationDate": "2014-05-16T20:49:47.490", "ParentId": "23704266", "CommentCount": "0", "OwnerUserId": "334932", "LastEditDate": "2014-05-16T22:20:02.300"}});