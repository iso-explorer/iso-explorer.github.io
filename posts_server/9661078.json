post_cb({"9661129": {"ParentId": "9661078", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-03-12T02:40:27.990", "Score": "5", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:34:35.557", "Id": "9661129", "OwnerUserId": "390913", "Body": "<p>Because X constructor wants a <code>const</code> argument, it prefers the operator. If you remove the <code>const</code> in the X constructor then compiler complains about ambiguity. If there are more than one functions with reference parameters, the one with the most relaxed const qualification is preferred.</p>\n<p>A good answer <a href=\"https://stackoverflow.com/a/1384044/390913\">here</a></p>\n", "LastActivityDate": "2012-03-12T02:57:08.230"}, "9661158": {"ParentId": "9661078", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-03-12T02:45:12.707", "Score": "1", "LastEditorUserId": "452307", "LastEditDate": "2012-03-12T02:50:19.713", "Id": "9661158", "OwnerUserId": "452307", "Body": "<p>There is no ambiguity here, the only valid conversion is provided by the <strong>conversion function</strong>.<br>\nNote that <code>y</code>is <strong>not a <code>const</code></strong>, your <strong>conversion constructor</strong> needs a <code>const</code> argument.      </br></p>\n<p>There would be a ambiguity, If your conversion constructor took a non const reference.    </p>\n<p><strong><a href=\"http://ideone.com/maf3y\" rel=\"nofollow\">Online Sample:</a></strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y;\n\nstruct X\n{\n    X(Y&amp;) { cout &lt;&lt; \"converting constructor\" &lt;&lt; endl; }\n\n};\n\nstruct Y\n{\n    operator X() { cout &lt;&lt; \"conversion function\" &lt;&lt; endl; }\n};\n\nvoid f(X x) {}\n\nint main()\n{\n    Y y;\n    f(y);\n    return 0;  \n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<blockquote>\n<p id=\"so_9661078_9661158_0\">prog.cpp: In member function \u2018Y::operator X()\u2019:<br>\n  prog.cpp:13: warning: no return statement in function returning non-void<br>\n  prog.cpp: In function \u2018int main()\u2019:<br>\n  prog.cpp:21: error: conversion from \u2018Y\u2019 to \u2018X\u2019 is ambiguous<br>\n  prog.cpp:13: note: candidates are: Y::operator X()<br>\n  prog.cpp:8: note:                 X::X(Y&amp;)       </br></br></br></br></br></p>\n</blockquote>\n", "LastActivityDate": "2012-03-12T02:50:19.713"}, "9661078": {"CommentCount": "0", "ViewCount": "497", "PostTypeId": "1", "LastEditorUserId": "514235", "CreationDate": "2012-03-12T02:33:11.020", "LastActivityDate": "2012-03-12T02:57:08.230", "Title": "C++11: Ambiguity between Converting Constructor and Conversion Function in Initialization of Pass-By-Value Parameter?", "AcceptedAnswerId": "9661129", "LastEditDate": "2012-03-12T02:45:10.513", "Id": "9661078", "Score": "6", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Y;\n\nstruct X\n{\n    X(const Y&amp;) { cout &lt;&lt; \"converting constructor\" &lt;&lt; endl; }\n};\n\nstruct Y\n{\n    operator X() { cout &lt;&lt; \"conversion function\" &lt;&lt; endl; }\n};\n\nvoid f(X x) {}\n\nint main()\n{\n    Y y;\n    f(y);\n}\n</code></pre>\n<p>In the above the <strong>conversion function</strong> is given priority to the <strong>converting constructor</strong> by my compiler (gcc 4.6.1), however in the standard it states that:</p>\n<blockquote>\n<p id=\"so_9661078_9661078_0\">User-defined conversions are applied only where they are unambiguous</p>\n</blockquote>\n<p>It would seem that there is ambiguity in this case.  Can anyone explain the contradiction?</p>\n<p>I would have expected the above to not compile.  I'm also pretty sure years ago that Scott Meyers wrote about this specific example and said that it wouldn't compile.  What am I missing?</p>\n", "Tags": "<c++><c++11><copy-constructor><implicit-conversion><language-lawyer>", "OwnerUserId": "1131467", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_9661078_9661078_0": {"section_id": 384, "quality": 1.0, "length": 6}}, "n3337": {"so_9661078_9661078_0": {"section_id": 375, "quality": 1.0, "length": 6}}, "n4659": {"so_9661078_9661078_0": {"section_id": 401, "quality": 1.0, "length": 6}}}});