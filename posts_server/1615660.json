post_cb({"1615660": {"CommentCount": "3", "AcceptedAnswerId": "1615812", "PostTypeId": "1", "LastEditorUserId": "442284", "CreationDate": "2009-10-23T20:15:54.970", "LastActivityDate": "2014-10-22T14:26:19.240", "LastEditDate": "2014-10-22T14:26:19.240", "ViewCount": "627", "FavoriteCount": "1", "Title": "Why this warning from IBM XL C/C++ compiler?", "Id": "1615660", "Score": "8", "Body": "<p>Here's a minimum code example that illustrates the problem:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Thing\n{\n   // Non-copyable\n   Thing(const Thing&amp;);\n   Thing&amp; operator=(const Thing&amp;);\n\n   int n_;\n\npublic:\n   Thing(int n) : n_(n) {}\n\n   int getValue() const { return n_;}\n};\n\nvoid show(const Thing&amp; t)\n{\n   std::cout &lt;&lt; t.getValue() &lt;&lt; std::endl;\n}\n\nint main()\n{\n   show(3);\n}\n</code></pre>\n<p>This yields the same error:</p>\n<pre><code>int main()\n{\n    show( Thing(3) );\n}\n</code></pre>\n<p>IBM XL C/C++ 8.0 compiler under AIX emits these warnings:</p>\n<pre><code>\"testWarning.cpp\", line 24.9: 1540-0306 (W) The \"private\" copy constructor \"Thing(const Thing &amp;)\" cannot be accessed.\n\"testWarning.cpp\", line 24.9: 1540-0308 (I) The semantics specify that a temporary object must be constructed.\n\"testWarning.cpp\", line 24.9: 1540-0309 (I) The temporary is not constructed, but the copy constructor must be accessible.\n</code></pre>\n<p>I also tried g++ 4.1.2 with \"-Wall\" and \"-pedantic\" and got no diagnostic.  Why is access to the copy constructor required here?  How can I eliminate the warning, besides making the object copyable (which is outside my control) or making an explicit copy to pass (when the real-life object is expensive to copy)?</p>\n", "Tags": "<c++><compiler-warnings><aix><ibm>", "OwnerUserId": "10077", "AnswerCount": "4"}, "1615714": {"ParentId": "1615660", "CommentCount": "3", "Body": "<p>C++ permits sufficiently-smart compilers to avoid copying temporary objects, the one violation of the <em>as-if</em> rule allowed by the standard.  I'm not familiar with IBM's AIX C++ compiler, but it sounds like it thinks the <code>show(3)</code> call requires a temporary Thing to be copied.  In that case, C++ requires that you have an accessible copy constructor even though your compiler is smart enough to avoid using it.</p>\n<p>But why does <code>show(3)</code> require a copy in the first place?  That I can't figure out.  With luck, litb will be along in a bit.</p>\n", "OwnerUserId": "121674", "PostTypeId": "2", "Id": "1615714", "Score": "3", "CreationDate": "2009-10-23T20:26:02.483", "LastActivityDate": "2009-10-23T20:26:02.483"}, "1615776": {"ParentId": "1615660", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>What happens if you try naming the temporary Thing?<br/><br/>\n<code>Thing temp(3);</code><br/>\n<code>show(temp);</code></p>\n", "OwnerUserId": "200783", "LastEditorUserId": "200783", "LastEditDate": "2009-10-23T20:56:27.307", "Id": "1615776", "Score": "0", "CreationDate": "2009-10-23T20:41:41.970", "LastActivityDate": "2009-10-23T20:56:27.307"}, "1624719": {"ParentId": "1615660", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>My gut feeling is that Jerry's <a href=\"https://stackoverflow.com/questions/1615660/why-this-warning-from-ibm-xl-c-c-compiler/1615812#1615812\">answer</a> is correct, but there are a few questions still.</p>\n<p>What is interesting is that there is a core issue covering the previous paragraph of that section (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#391\" rel=\"nofollow noreferrer\">391</a>).  That issue relates to when the argument is the same class type.  Specifically:</p>\n<pre><code>int main () {\n  show ( Thing (3) );       // not allowed under current wording\n                            // but allowed with Core Issue 391\n\n  show ( 3 );               // Still illegal with 391\n}\n</code></pre>\n<p>The change in Core Issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#391\" rel=\"nofollow noreferrer\">391</a> only affects where the rvalue temporary has the same class type.  The previous wording had:</p>\n<blockquote>\n<p id=\"so_1615660_1624719_0\">If the initializer expression is an rvalue, with T2 a class type, and <code>cv1 T1</code> is reference-compatible with <code>cv2 T2,</code> the reference is bound as follows:</p>\n<p id=\"so_1615660_1624719_1\">[...]</p>\n<p id=\"so_1615660_1624719_2\">The constructor that would be used to make the copy shall be callable whether or not the copy is actually done.</p>\n</blockquote>\n<p>That last line is what would make <code>show(Thing(3))</code> illegal as per the current standard.  The proposed wording for this section is:</p>\n<blockquote>\n<p id=\"so_1615660_1624719_3\">If the initializer expression is an rvalue, with T2 a class type, and \"cv1 T1\" is reference-compatible with \"cv2 T2\", the reference is bound to the object represented by the rvalue (see 3.10 [basic.lval]) or to a sub-object within that object.</p>\n</blockquote>\n<p>At this point, I considered that g++ may have updated its behaviour as per <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#391\" rel=\"nofollow noreferrer\">391</a> but that the change accidentally included the copy-initialization case.  However, that is not demonstrated by the versions of g++ that I tested with:</p>\n<pre><code>class A{\npublic:\n  A ();\n  A (int);\nprivate:\n  A (A const &amp;);\n};\n\nvoid foo (A const &amp;);\n\nvoid foo ()\n{\n  A a = 3 ;     // 3.2.3 (ERROR), 3.4.6(ERROR), 4.4.0(ERROR), Comeau(ERROR)\n\n  foo ( 3 ) ;   // 3.2.3 (OK), 3.4.6(OK), 4.4.0(OK), Comeau(OK)\n  foo ( A() );  // 3.2.3 (OK), 3.4.6(ERROR), 4.4.0(OK), Comeau(OK)\n  foo ( A(3) ); // 3.2.3 (OK), 3.4.6(ERROR), 4.4.0(OK), Comeau(OK)\n}\n</code></pre>\n<p>I cannot find fault in Jerry's interpretation for the <code>foo (3)</code> case, however, I do have doubts due to the discrepency between the different compiler behaviours.</p>\n", "OwnerUserId": "11698", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:25.883", "Id": "1624719", "Score": "1", "CreationDate": "2009-10-26T13:15:36.837", "LastActivityDate": "2009-10-26T15:12:20.057"}, "1615812": {"ParentId": "1615660", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The rules for this are in \u00a78.5.3/5 of the standard. There are three basic situations identified. The first involve the initializer ('3' in your case) being either an lvalue, or having class type. Since neither of those is true, what you have is the third case: initializing a const reference with an rvalue that does not have a class type. This case is covered by the final bullet in 8.5.3/5:</p>\n<blockquote id=\"so_1615660_1615812_0\">\nOtherwise, a temporary of type \u201ccv1 T1\u201d is created and initialized from the initializer expression using the rules for a non-reference copy initialization (8.5). The reference is then bound to the temporary. If T1 is reference-related to T2, cv1 must be the same cv-qualification as, or greater cv-qualification than, cv2; otherwise, the program is ill-formed.\n</blockquote>\n<p>Edit: rereading, I think IBM has it right. I was previously thinking of the possibility of having to copy the temporary, but that's not the source of the problem. To create the temporary using non-reference copy initialization as specified in \u00a78.5, it needs the copy ctor. In particular, at this point it's equivalent to an expression like:</p>\n<p>T x = a;</p>\n<p>This is basically equivalent to:</p>\n<p>T x = T(a);</p>\n<p>I.e. it's required to create a temporary, then copy the temporary to the object being initialized (which, in this case, is <em>also</em> a temporary). To summarize the required process, it's roughly equivalent to code like:</p>\n<pre><code>T temp1(3);\nT temp2(temp1); // requires copy ctor\nshow(temp2);    // show's reference parameter binds directly to temp2\n</code></pre>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2009-10-23T21:01:59.867", "Id": "1615812", "Score": "9", "CreationDate": "2009-10-23T20:50:44.883", "LastActivityDate": "2009-10-23T21:01:59.867"}, "bq_ids": {"n4140": {"so_1615660_1624719_3": {"section_id": 3321, "quality": 0.631578947368421, "length": 12}, "so_1615660_1615812_0": {"section_id": 3321, "quality": 0.5517241379310345, "length": 16}, "so_1615660_1624719_0": {"section_id": 3321, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_1615660_1624719_3": {"section_id": 3191, "quality": 0.5263157894736842, "length": 10}, "so_1615660_1615812_0": {"section_id": 3191, "quality": 0.6896551724137931, "length": 20}, "so_1615660_1624719_0": {"section_id": 3191, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_1615660_1624719_3": {"section_id": 4087, "quality": 0.5789473684210527, "length": 11}, "so_1615660_1624719_0": {"section_id": 4087, "quality": 0.7272727272727273, "length": 8}}}});