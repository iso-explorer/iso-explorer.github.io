post_cb({"bq_ids": {"n4140": {"so_38265936_38266419_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 6077}, "so_38265936_38266419_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6077}}, "n3337": {"so_38265936_38266419_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5845}, "so_38265936_38266419_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5845}}, "n4659": {"so_38265936_38266419_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7573}, "so_38265936_38266419_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 7573}}}, "38266419": {"Id": "38266419", "PostTypeId": "2", "Body": "<p>According to the working draft, <a href=\"http://eel.is/c++draft/expr.sizeof#2\" rel=\"nofollow\">[5.3.3/2]</a>:</p>\n<blockquote>\n<p id=\"so_38265936_38266419_0\">When applied to a class, the result is the number of bytes in an object of that class including any padding required for placing objects of that type in an array. The size of a most derived class shall be greater than zero. The result of applying\u00a0sizeof\u00a0to a base class subobject is the size of the base class type.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/expr.sizeof#footnote-77\" rel=\"nofollow\">Here</a> the footnote related to the last sentence:</p>\n<blockquote>\n<p id=\"so_38265936_38266419_1\">The actual size of a base class subobject may be less than the result of applying\u00a0sizeof\u00a0to the subobject, due to virtual base classes and less strict padding requirements on base class subobjects.</p>\n</blockquote>\n<p>So: yes, it is safe and the results is more or less <em>greater or equal the size of all of its members</em>.</p>\n", "LastActivityDate": "2016-07-08T12:16:50.430", "CommentCount": "0", "CreationDate": "2016-07-08T12:16:50.430", "ParentId": "38265936", "Score": "2", "OwnerUserId": "4987285"}, "38265977": {"Id": "38265977", "PostTypeId": "2", "Body": "<p>Of course it's safe. And note also that <code>sizeof</code> is evaluated at <em>compile-time</em>.</p>\n<p>The <code>sizeof</code> a non-POD type will never be <em>less</em> than the total of the size of all its members, excepting any empty base class optimisations.</p>\n<p>It could well be <em>greater</em> than the total of the size of all its members, due to packing arrangements and the fact that a class with no members will have a non-zero <code>sizeof</code>.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2016-07-08T12:00:37.897", "Score": "5", "CreationDate": "2016-07-08T11:54:47.303", "ParentId": "38265936", "CommentCount": "5", "OwnerUserId": "2380830", "LastEditDate": "2016-07-08T12:00:37.897"}, "38265936": {"ViewCount": "113", "Body": "<p>Is it safe to use <code>sizeof</code> operator on non-POD types in C++? Will this value greater or equal the size of all of its members?</p>\n", "AcceptedAnswerId": "38265977", "Title": "Is it safe to use sizeof operator on non-POD types in C++", "CreationDate": "2016-07-08T11:52:55.270", "Id": "38265936", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-07-08T12:16:50.430", "Score": "2", "OwnerUserId": "1608835", "Tags": "<c++>", "AnswerCount": "3"}, "38266287": {"Id": "38266287", "PostTypeId": "2", "Body": "<p>Yes. Sizeof is guaranteed to return enough bytes to hold the object, including any padding and other types of \"hidden\" fields, such as the padding to serialize it.</p>\n<p>The perhaps only caveat is that being evaluated at compile time, it is not polimorphic. \nThat is,</p>\n<pre><code>class Base\n{\n    int x;\n};\n\nclass Derived : public Base\n{\n    int y;\n};\n\nint main()\n{\n    Base* k = new Derived;\n\n    return sizeof(*k)/sizeof(int);\n}\n</code></pre>\n<p>returns <code>1</code> rather than <code>2</code>, that is it evaluates to its formal type <code>Base</code> even though the object is in fact a <code>Derived</code> at run time.</p>\n", "LastActivityDate": "2016-07-08T12:10:04.620", "CommentCount": "0", "CreationDate": "2016-07-08T12:10:04.620", "ParentId": "38265936", "Score": "2", "OwnerUserId": "5160450"}});