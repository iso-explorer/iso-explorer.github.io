post_cb({"bq_ids": {"n4140": {"so_12681780_12681823_0": {"length": 7, "quality": 0.875, "section_id": 745}}, "n3337": {"so_12681780_12681823_0": {"length": 7, "quality": 0.875, "section_id": 734}}, "n4659": {"so_12681780_12681823_0": {"length": 7, "quality": 0.875, "section_id": 803}}}, "12681780": {"ViewCount": "2378", "Body": "<p>Can we use forward iteration to erase elements in unordered_map ? </p>\n<pre><code>unordered_map&lt;string, int&gt; employeeTable;\nunordered_map&lt;string, int&gt;::iterator it;\n\nfor (it = employeeTable.begin(); it != employeeTable.end();) {\n   int age = it-&gt;second;\n   if (age &lt; 18) {\n      employeeTable.erase(it++);\n   } else {\n      ++it;\n   }\n}\n</code></pre>\n<p>If the above is incorrect, what does the standard recommend ? Something like below</p>\n<pre><code>it = employeeTable.erase(it);\n</code></pre>\n", "AcceptedAnswerId": "12681823", "Title": "Erasing elements in std::tr1::unordered_map", "CreationDate": "2012-10-01T22:04:53.663", "Id": "12681780", "CommentCount": "6", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-10-02T16:26:39.047", "LastEditorUserId": "1123475", "LastActivityDate": "2012-10-02T16:26:39.047", "Score": "3", "OwnerUserId": "1123475", "Tags": "<c++><unordered-map>", "AnswerCount": "2"}, "12681871": {"Id": "12681871", "PostTypeId": "2", "Body": "<p>Yes, your question contains the correct answer:</p>\n<pre><code>it = employeeTable.erase(it);\n</code></pre>\n", "LastActivityDate": "2012-10-01T22:13:55.697", "Score": "3", "CreationDate": "2012-10-01T22:13:55.697", "ParentId": "12681780", "CommentCount": "9", "OwnerUserId": "900626"}, "12681823": {"Id": "12681823", "PostTypeId": "2", "Body": "<p>According to 6.3.1 [tr.unord.req] paragraph 12: </p>\n<blockquote>\n<p id=\"so_12681780_12681823_0\">... The erase members shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>That is, the code above should be OK.</p>\n", "LastActivityDate": "2012-10-01T22:09:16.213", "Score": "6", "CreationDate": "2012-10-01T22:09:16.213", "ParentId": "12681780", "CommentCount": "6", "OwnerUserId": "1120273"}});