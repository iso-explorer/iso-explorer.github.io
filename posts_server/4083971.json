post_cb({"4083971": {"CommentCount": "0", "ViewCount": "330", "PostTypeId": "1", "LastEditorUserId": "418110", "CreationDate": "2010-11-03T03:21:19.407", "LastActivityDate": "2010-11-03T03:31:40.693", "Title": "Is it possible to initialize static const member object in a class in C++?", "AcceptedAnswerId": "4083993", "LastEditDate": "2010-11-03T03:31:40.693", "Id": "4083971", "Score": "1", "Body": "<p>Is it possible to initialize a static constant member in a class definition? Please see below for the code,</p>\n<pre><code>class foo\n{\n  public:\n    foo(int p) : m_p(p){}\n    ~foo(){}\n\n  private:\n    int m_p;\n};\n\n\nclass bar\n{\n   public:\n     bar(){}\n     ~bar(){}\n\n   public:\n     static const foo m_foo = foo( 2 ); //is this possible?\n};\n</code></pre>\n<p>Many thanks.</p>\n", "Tags": "<c++><static><const><definition><class-members>", "OwnerUserId": "130278", "AnswerCount": "2"}, "4084003": {"ParentId": "4083971", "CommentCount": "0", "Body": "<p>Not for a static data member of class type, as in your example.</p>\n<p>9.4.2/2:</p>\n<blockquote>\n<p id=\"so_4083971_4084003_0\">The declaration of a static data\n  member in its class definition is not\n  a definition ... The definition for\n  a static data member shall appear in a\n  namespace scope enclosing the member\u2019s\n  class definition.</p>\n</blockquote>\n<p>9.4.2/4:</p>\n<blockquote>\n<p id=\"so_4083971_4084003_1\">If a static data member is of const\n  integral or const enumeration type,\n  its declaration in the class\n  definition can specify a\n  constant-initializer which shall be an\n  integral constant expression (5.19).\n  In that case, the member can appear in\n  integral constant expressions. The\n  member shall still be defined in a\n  name- space scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer.</p>\n</blockquote>\n", "OwnerUserId": "13005", "PostTypeId": "2", "Id": "4084003", "Score": "3", "CreationDate": "2010-11-03T03:29:52.910", "LastActivityDate": "2010-11-03T03:29:52.910"}, "bq_ids": {"n4140": {"so_4083971_4083993_0": {"section_id": 5908, "quality": 0.7368421052631579, "length": 28}, "so_4083971_4084003_1": {"section_id": 5908, "quality": 0.7105263157894737, "length": 27}, "so_4083971_4084003_0": {"section_id": 5907, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_4083971_4083993_0": {"section_id": 5680, "quality": 0.7368421052631579, "length": 28}, "so_4083971_4084003_1": {"section_id": 5680, "quality": 0.7105263157894737, "length": 27}, "so_4083971_4084003_0": {"section_id": 5679, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_4083971_4083993_0": {"section_id": 7390, "quality": 0.631578947368421, "length": 24}, "so_4083971_4084003_1": {"section_id": 7390, "quality": 0.6052631578947368, "length": 23}, "so_4083971_4084003_0": {"section_id": 7389, "quality": 0.9047619047619048, "length": 19}}}, "4083993": {"ParentId": "4083971", "CommentCount": "0", "Body": "<p>Short answer: </p>\n<p>No, until the static member is const and is of integral or enumeration type.</p>\n<p>Long answer:</p>\n<blockquote>\n<p id=\"so_4083971_4083993_0\">$9.4.2/4 - \"If a static data member is\n  of const integral or const enumeration\n  type, its declaration in the class\n  definition can specify a\n  constant-initializer which shall be an\n  integral constant expression (5.19).\n  In that case, the member can appear in\n  integral constant expressions. The\n  member shall still be defined in a\n  namespace scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer.\"</p>\n</blockquote>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "4083993", "Score": "4", "CreationDate": "2010-11-03T03:27:22.767", "LastActivityDate": "2010-11-03T03:27:22.767"}});