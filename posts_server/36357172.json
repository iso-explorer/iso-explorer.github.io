post_cb({"36357172": {"ViewCount": "162", "Body": "<p>Usually I see the <code>= default</code> syntax used in the header. My understanding is that this is the same as if the functions are explicitly implemented in the header, see <code>Foo</code> below.</p>\n<h1>Foo.h</h1>\n<pre><code>#pragma once\n\nclass Foo\n{\npublic:\n    Foo() = default;\n\n    Foo(const Foo&amp; other) = default;\n};\n</code></pre>\n<p>Purely out of curiosity, can the <code>= default</code> be used in the source files as follows?</p>\n<h1>Bar.h</h1>\n<pre><code>#pragma once\n\nclass Bar\n{\npublic:\n    Bar();\n\n    Bar(const Bar&amp; other);\n};\n</code></pre>\n<h1>Bar.cpp</h1>\n<pre><code>#include \"Bar.h\"\n\nBar::Bar() = default;\n\nBar::Bar(const Bar&amp;) = default;\n</code></pre>\n<p>As far as I know this is equivalent to explicitly implementing the functions in the cpp file.</p>\n<p>The above <code>Bar</code> example compiles with <code>gcc-5.1</code> but does the standard allow for this usage?</p>\n<p><em>As an aside</em>, are there any benefits to using <code>= default</code> in the source file versus the header?</p>\n", "AcceptedAnswerId": "36357419", "Title": "Does \"= default\" allow out-of-line implementations?", "CreationDate": "2016-04-01T13:06:21.987", "Id": "36357172", "CommentCount": "0", "LastEditDate": "2016-04-01T19:20:02.673", "PostTypeId": "1", "LastEditorUserId": "3747990", "LastActivityDate": "2016-04-01T19:20:02.673", "Score": "6", "OwnerUserId": "4505712", "Tags": "<c++><c++11>", "AnswerCount": "5"}, "36357434": {"Id": "36357434", "PostTypeId": "2", "Body": "<p>Yes, special member functions may be defaulted \"out of line\"; the compiler will generate the correct code and it will work as expected.</p>\n<p>In fact, there is a rule relating to special members not being defaulted on first declaration, they are then considered user provided (and hence non-trivial).</p>\n<blockquote>\n<p id=\"so_36357172_36357434_0\">A function is <em>user-provided</em> if it is user-declared and not explicitly defaulted or deleted on its first declaration. A user-provided explicitly-defaulted function (i.e., explicitly defaulted after its first declaration) is defined at the point where it is explicitly defaulted; if such a function is implicitly defined as deleted, the program is ill-formed.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/dcl.fct.def.default#5\" rel=\"nofollow\">Link here [dcl.fct.def.default]</a>. With the following example detailing your situation;</p>\n<blockquote id=\"so_36357172_36357434_1\">\n<pre><code>struct nontrivial1 {\n  nontrivial1();\n};\nnontrivial1::nontrivial1() = default; // not first declaration\n</code></pre>\n</blockquote>\n<p>Its usefulness lies in what it does, it provides the default implementation, but not at the point of declaration, thus making it <em>user-provided</em>. As noted, this is useful when dealing with an as-yet incomplete type, such as when using the pimpl idiom. It could also be used to mark your type as non-trivial, thus prohibiting its use in code that requires a trivial type (e.g. <a href=\"http://en.cppreference.com/w/cpp/types/is_trivial\" rel=\"nofollow\"><code>std::is_trivial</code></a>).</p>\n", "LastEditorUserId": "3747990", "LastActivityDate": "2016-04-01T13:53:33.180", "Score": "2", "CreationDate": "2016-04-01T13:18:59.013", "ParentId": "36357172", "CommentCount": "1", "OwnerUserId": "3747990", "LastEditDate": "2016-04-01T13:53:33.180"}, "bq_ids": {"n4140": {"so_36357172_36357434_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 3274}, "so_36357172_36357419_0": {"length": 45, "quality": 0.9, "section_id": 3274}, "so_36357172_36357419_3": {"length": 21, "quality": 0.9545454545454546, "section_id": 3274}}, "n3337": {"so_36357172_36357434_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 3145}, "so_36357172_36357419_0": {"length": 45, "quality": 0.9, "section_id": 3145}, "so_36357172_36357419_3": {"length": 21, "quality": 0.9545454545454546, "section_id": 3145}}, "n4659": {"so_36357172_36357434_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 4032}, "so_36357172_36357419_0": {"length": 45, "quality": 0.9, "section_id": 4032}, "so_36357172_36357419_3": {"length": 21, "quality": 0.9545454545454546, "section_id": 4032}}}, "36357432": {"Id": "36357432", "PostTypeId": "2", "Body": "<p>When implementing in source file,\nthe methods are no longer <em>defaulted</em> but <em>user provided</em>.</p>\n", "LastActivityDate": "2016-04-01T13:18:48.923", "CommentCount": "2", "CreationDate": "2016-04-01T13:18:48.923", "ParentId": "36357172", "Score": "0", "OwnerUserId": "2684539"}, "36357419": {"Id": "36357419", "PostTypeId": "2", "Body": "<p>Yes this is legal.  From <strong>[dcl.fct.def.default]</strong></p>\n<blockquote>\n<p id=\"so_36357172_36357419_0\">Explicitly-defaulted functions and implicitly-declared functions are collectively called defaulted functions, and the implementation shall provide implicit definitions for them (12.1 12.4, 12.8), which might mean defining them as deleted. <strong>A function is user-provided if it is user-declared and not explicitly defaulted or deleted on its first declaration. A user-provided explicitly-defaulted function (i.e., explicitly defaulted after its first declaration) is defined at the point where it is explicitly defaulted;</strong> if such a function is implicitly defined as deleted, the program is ill-formed.</p>\n</blockquote>\n<p><sup>Emphasis mine</sup></p>\n<p>And then they go on to detail you exact scenario with</p>\n<blockquote id=\"so_36357172_36357419_1\">\n<pre><code>struct nontrivial1 {\n  nontrivial1();\n};\nnontrivial1::nontrivial1() = default; // not first declaration\n</code></pre>\n</blockquote>\n<p>So as long as the function is not implicitly marked as deleted then the function will be defined where you explicitly default it.</p>\n<blockquote>\n<p id=\"so_36357172_36357419_2\">As an aside, are there any benefits to using <code>= default</code> in the source file versus the header?</p>\n</blockquote>\n<p>The only \"advantage\" I can see it it allows existing code bases to change their cpp files to use modern techniques without having to change the header file.  There is even a note in the standard:</p>\n<blockquote>\n<p id=\"so_36357172_36357419_3\"><em>Note:</em> Declaring a function as defaulted after its first declaration can provide efficient execution and concise definition while enabling a stable binary interface to an evolving code base.</p>\n</blockquote>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-04-01T13:36:31.557", "Score": "4", "CreationDate": "2016-04-01T13:18:06.467", "ParentId": "36357172", "CommentCount": "1", "OwnerUserId": "4342498", "LastEditDate": "2016-04-01T13:36:31.557"}, "36357839": {"Id": "36357839", "PostTypeId": "2", "Body": "<p>One potential usage of defaulting in the source file instead of the header is to use the pimpl idiom with <code>unique_ptr</code>. It requires a complete type for construction and destruction, so you can't define those special members in the header. You'd have to do:</p>\n<p>Foo.h</p>\n<pre><code>struct Foo { \n    struct Impl;\n    unique_ptr&lt;Impl&gt; p;\n    Foo();\n    ~Foo();\n};\n</code></pre>\n<p>Foo.cpp</p>\n<pre><code>// Foo::Impl definition here\n\n// now Impl isn't incomplete\nFoo::Foo() = default;\nFoo::~Foo() = default;\n</code></pre>\n", "LastActivityDate": "2016-04-01T13:39:20.040", "CommentCount": "1", "CreationDate": "2016-04-01T13:39:20.040", "ParentId": "36357172", "Score": "3", "OwnerUserId": "2069064"}, "36357495": {"Id": "36357495", "PostTypeId": "2", "Body": "<p>There is a small change in the behaviour. Other TU than <code>Bar.cpp</code> can't see that they are defaulted because they only see the header. So putting default in the cpp will make your class not trivially assignable and not trivially constructible.</p>\n<p>There are some case that you want to do this: if your class hold a <code>unique_ptr</code> to an incomplete type, it's a good practice to default the destructor in the cpp, because if you don't, classes that uses yours will be required the incomplete type's destructor to be visible.</p>\n", "LastActivityDate": "2016-04-01T13:21:35.183", "CommentCount": "2", "CreationDate": "2016-04-01T13:21:35.183", "ParentId": "36357172", "Score": "1", "OwnerUserId": "2104697"}});