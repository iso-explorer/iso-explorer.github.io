post_cb({"47067006": {"CommentCount": "0", "ViewCount": "104", "CreationDate": "2017-11-02T03:13:31.783", "LastActivityDate": "2017-11-02T05:26:35.660", "Title": "Warning for a cast from a char literal to a char *", "PostTypeId": "1", "Id": "47067006", "Score": "5", "Body": "<p>I can't find a warning for the following in Visual Studio. I turned on /Wall but still get nothing:</p>\n<pre><code>const char * pointer = '\\0';\n</code></pre>\n<p>gcc won't compile it for C++11, C++14, or C++17:</p>\n<blockquote>\n<p id=\"so_47067006_47067006_0\">[x86-64 gcc 7.2 #1] error: invalid conversion from 'char' to 'const char*' [-fpermissive]</p>\n</blockquote>\n<p>gcc will compile with the above as a warning if I pass <code>-fpermissive</code>:</p>\n<blockquote>\n<p id=\"so_47067006_47067006_1\">[x86-64 gcc 7.2 #1] warning: invalid conversion from 'char' to 'const char*' [-fpermissive]</p>\n</blockquote>\n<p>clang won't compile for C++11, C++14, or C++17:</p>\n<blockquote>\n<p id=\"so_47067006_47067006_2\">[x86-64 clang 5.0.0 #1] error: cannot initialize a variable of type 'const char *' with an rvalue of type 'char'</p>\n</blockquote>\n<p>I'm asking because of the below code that ended up in our codebase, apparently with no warnings:</p>\n<pre><code>std::ofstream file;\n//...\nfile.write('\\0', 20);\n</code></pre>\n<p>Is there a way to turn on a warning for this in Visual Studio?</p>\n", "Tags": "<c++><visual-studio><compiler-warnings>", "OwnerUserId": "2850543", "AnswerCount": "1"}, "47068111": {"ParentId": "47067006", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Visual Studio 2015 only allows this conversion with const values of '\\0'. Examples:</p>\n<pre><code>char c = '\\0';\nconst char cconst = '\\0';\n\nconst char * p1 = c;      //error (not even warning)\nconst char * p2 = cconst; //ok\nconst char * p3 = '\\0';   //ok\nconst char * p4 = '\\1';   //error (not even warning)\n</code></pre>\n<p>The specific error is:</p>\n<blockquote>\n<p id=\"so_47067006_47068111_0\">Error: a value of type \"char\" cannot be used to initialize an entity of type \"const char *\"</p>\n</blockquote>\n<p>Apple LLVM 8.1.0 (clang-802.0.41) gives a warning with C++03 but an error with C++11 and later. The behavior was changed sometime between the Feb. 28, 2011 (draft N3242 and May 15, 2013 (draft N3690). I can't find the exact point. </p>\n<p>In earlier drafts of C++, such as n1905, the OP code is defined as a valid conversion:</p>\n<blockquote>\n<p id=\"so_47067006_47068111_1\"><strong>A null pointer constant is an integral constant expression (5.19) rvalue of integer type that evaluates to zero. A null\n  pointer constant can be converted to a pointer type;</strong> the result is the null pointer value of that type and is distinguishable\n  from every other value of pointer to object or pointer to function type. Two null pointer values of the same type shall\n  compare equal. <strong>The conversion of a null pointer constant to a pointer to cv-qualified type is a single conversion,</strong> and not\n  the sequence of a pointer conversion followed by a qualification conversion (4.4).</p>\n</blockquote>\n<p>Section 3.9.1.2 defines the signed integer types:</p>\n<blockquote>\n<p id=\"so_47067006_47068111_2\">There are five signed integer types: <strong>\u201csigned char\u201d</strong>, \u201cshort int\u201d, \u201cint\u201d, \u201clong int\u201d, and \u201clong long int\u201d.</p>\n</blockquote>\n<p>This was changed in later drafts. In draft N3690 from 2013, section 4.10 says:</p>\n<blockquote>\n<p id=\"so_47067006_47068111_3\"><strong>A null pointer constant is an integer literal (2.14.2) with value zero or a prvalue of type std::nullptr_t.\n  A null pointer constant can be converted to a pointer type;</strong> the result is the null pointer value of that type\n  and is distinguishable from every other value of object pointer or function pointer type. Such a conversion\n  is called a null pointer conversion. Two null pointer values of the same type shall compare equal. <strong>The\n  conversion of a null pointer constant to a pointer to cv-qualified type is a single conversion,</strong> and not the\n  sequence of a pointer conversion followed by a qualification conversion (4.4).</p>\n</blockquote>\n<p><code>character-literal</code> is a defined as a literal in section 2.14.1, but it does not appear in section 2.14.2. Instead it gets its own section - 2.14.3.</p>\n<p>C++17 draft n4659 has the exact same verbiage but in different sections.</p>\n<p>I don't see a way to give a warning for this in VS 2015. This would be another reason to run static analysis tools / other compilers to catch extra warnings.</p>\n<p>Thanks to @EricPostpischil for the help.</p>\n", "OwnerUserId": "2850543", "LastEditorUserId": "2850543", "LastEditDate": "2017-11-02T05:26:35.660", "Id": "47068111", "Score": "1", "CreationDate": "2017-11-02T05:20:28.343", "LastActivityDate": "2017-11-02T05:26:35.660"}, "bq_ids": {"n4140": {"so_47067006_47068111_2": {"section_id": 7211, "quality": 1.0, "length": 15}, "so_47067006_47068111_1": {"section_id": 39, "quality": 0.8070175438596491, "length": 46}, "so_47067006_47068111_3": {"section_id": 39, "quality": 0.9193548387096774, "length": 57}}, "n3337": {"so_47067006_47068111_2": {"section_id": 6955, "quality": 1.0, "length": 15}, "so_47067006_47068111_1": {"section_id": 36, "quality": 0.8947368421052632, "length": 51}, "so_47067006_47068111_3": {"section_id": 36, "quality": 0.8870967741935484, "length": 55}}, "n4659": {"so_47067006_47068111_2": {"section_id": 8720, "quality": 0.9333333333333333, "length": 14}, "so_47067006_47068111_1": {"section_id": 39, "quality": 0.8070175438596491, "length": 46}, "so_47067006_47068111_3": {"section_id": 39, "quality": 0.9193548387096774, "length": 57}}}});