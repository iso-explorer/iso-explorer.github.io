post_cb({"4223617": {"CommentCount": "0", "AcceptedAnswerId": "4223652", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-11-19T09:25:22.230", "LastActivityDate": "2010-11-19T17:57:21.383", "AnswerCount": "4", "LastEditDate": "2017-05-23T12:22:47.143", "ViewCount": "9802", "FavoriteCount": "1", "Title": "standard conversions: Array-to-pointer conversion", "Id": "4223617", "Score": "4", "Body": "<p>This is the point from ISO <em>:Standard Conversions:Array-to-pointer conversion: $4.2.1</em></p>\n<blockquote>\n<p id=\"so_4223617_4223617_0\">An lvalue or rvalue of type \u201carray\n  of N T\u201d or \u201carray of unknown bound of\n  T\u201d     can be converted to an rvalue\n  of type \u201cpointer to T.\u201d The result is\n  a pointer     to the first element of\n  the array.</p>\n</blockquote>\n<p>Can any one explain this, if possible with an example program.</p>\n<p>I seen these links already, but i am unable to understand:</p>\n<p><a href=\"https://stackoverflow.com/questions/3656726/array-and-rvalue\">Array and Rvalue</a></p>\n<p><a href=\"https://stackoverflow.com/questions/4058151/i-think-i-may-have-come-up-with-an-example-of-rvalue-of-array-type\">I think I may have come up with an example of rvalue of array type</a></p>\n", "Tags": "<c++><arrays>", "OwnerDisplayName": "BE Student"}, "4223656": {"ParentId": "4223617", "CommentCount": "0", "Body": "<pre><code>int a[6];\nint *b = a;\n</code></pre>\n<p>Pointer b points to the a[0], i.e. contains the address of the element a[0].</p>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "4223656", "Score": "1", "CreationDate": "2010-11-19T09:31:16.067", "LastActivityDate": "2010-11-19T09:31:16.067"}, "4223652": {"ParentId": "4223617", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>In both C and C++, an array can be used as if it were a pointer to its first element.  Effectively, given an array named <code>x</code>, you can replace most uses of <code>&amp;x[0]</code> with just <code>x</code>.</p>\n<p>This is how subscripting is able to be used with array objects:</p>\n<pre><code>int x[5];\nx[2];     // this is the same as (&amp;x[0])[2]\n</code></pre>\n<p>This is also how an array can be passed to a function that has a parameter of pointer type:</p>\n<pre><code>void f(int* p);\n\nint x[5];\nf(x);     // this is the same as f(&amp;x[0])\n</code></pre>\n<p>There are several contexts in which the array-to-pointer conversion does not take place.  Examples include when an array is the operand of <code>sizeof</code> or the unary-<code>&amp;</code> (the address-of operator), when a string literal is used to initialize an array, and when an array is bound to a reference to an array.</p>\n", "OwnerUserId": "151292", "LastEditorUserId": "151292", "LastEditDate": "2010-11-19T17:57:21.383", "Id": "4223652", "Score": "9", "CreationDate": "2010-11-19T09:30:55.673", "LastActivityDate": "2010-11-19T17:57:21.383"}, "4223680": {"ParentId": "4223617", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>This means, that you can have the following situation:</p>\n<pre><code>int arr[100];\narr[ 0 ] = arr[ 1 ] = 666;\n// ..\n</code></pre>\n<p>You can use <code>arr</code> as pointer to <code>int</code>, which points to the first element of the array, for example:</p>\n<pre><code>*arr = 123;\n</code></pre>\n<p>and then the array will be: <code>arr = { 123, 666, ... }</code></p>\n<p>Also, you could pass the array to a function, that takes int*:</p>\n<pre><code>void f( int* a ) { /* ... */ }\n</code></pre>\n<p>and call it:</p>\n<pre><code>f( arr );\n</code></pre>\n<p>It's absolutely the same as calling it like this:</p>\n<pre><code>f( &amp;arr[ 0 ] );\n</code></pre>\n<p>That is what <code>The result is a pointer to the first element of the array.</code> means.</p>\n<hr>\n<p>Another way, you could use the address of the first element is:</p>\n<pre><code>*( &amp;arr[ 0 ] + 1 ) = 222;\n</code></pre>\n<p>this will make the second element in the array with value <code>222</code>; It's the same as</p>\n<pre><code>arr[1] = 222;\n</code></pre>\n<p>and</p>\n<pre><code>*( arr + 1 ) = 222;\n</code></pre>\n</hr>", "OwnerUserId": "435800", "LastEditorUserId": "435800", "LastEditDate": "2010-11-19T09:41:53.577", "Id": "4223680", "Score": "0", "CreationDate": "2010-11-19T09:35:33.573", "LastActivityDate": "2010-11-19T09:41:53.577"}, "4223649": {"ParentId": "4223617", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>One example of this is that any array variable will automatically degenerate into a pointer to it's first element when passed to a function which takes a pointer of the array's type.</p>\n<p>Take a look at this section from the C-Faq on <a href=\"http://c-faq.com/aryptr/index.html\" rel=\"nofollow\">Arrays and Pointers</a>.  This is equally applicable in C++.</p>\n<pre><code>void foo(int *a) {\n    a[0] = 1;\n}\n\nint main(void) {\n    int b[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n    foo(b);\n\n    printf(\"b[0] == %d\\n\", b[0]);\n}\n</code></pre>\n", "OwnerUserId": "71074", "LastEditorUserId": "71074", "LastEditDate": "2010-11-19T09:43:43.223", "Id": "4223649", "Score": "0", "CreationDate": "2010-11-19T09:30:29.230", "LastActivityDate": "2010-11-19T09:43:43.223"}, "bq_ids": {"n4140": {"so_4223617_4223617_0": {"section_id": 11, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_4223617_4223617_0": {"section_id": 8, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_4223617_4223617_0": {"section_id": 12, "quality": 0.8888888888888888, "length": 16}}}});