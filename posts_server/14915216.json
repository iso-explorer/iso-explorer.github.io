post_cb({"bq_ids": {"n4140": {"so_14915216_14915364_0": {"length": 43, "quality": 0.8958333333333334, "section_id": 620}}, "n3337": {"so_14915216_14915364_0": {"length": 43, "quality": 0.8958333333333334, "section_id": 610}}, "n4659": {"so_14915216_14915364_0": {"length": 43, "quality": 0.8958333333333334, "section_id": 646}}}, "14915364": {"Id": "14915364", "PostTypeId": "2", "Body": "<p>\u00a7 13.3.3.1.2/1 about implicit user-defined conversion sequences mandates:</p>\n<blockquote>\n<p id=\"so_14915216_14915364_0\"><strong>A user-defined conversion sequence consists of an initial standard conversion sequence followed by a user defined conversion (12.3) followed by a second standard conversion sequence</strong>. If the user-defined conversion is specified by a constructor (12.3.1), the initial standard conversion sequence converts the source type to the type required by the argument of the constructor. If the user-defined conversion is specified by a conversion function (12.3.2), the initial standard conversion sequence converts the source type to the implicit object parameter of the conversion function.</p>\n</blockquote>\n<p>This means it is not possible to chain more than one user-defined conversion.</p>\n", "LastActivityDate": "2013-02-16T21:34:40.217", "CommentCount": "0", "CreationDate": "2013-02-16T21:34:40.217", "ParentId": "14915216", "Score": "0", "OwnerUserId": "1932150"}, "14915283": {"Id": "14915283", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14915216_14915283_0\">I'm providing a bar constructor that takes a foo, and ints can be implicitly converted to foo as shown by the line preceding it. So, what is going wrong?</p>\n</blockquote>\n<p>Chained-conversion is not allowed in C++, which means the (chained) conversion cannot occur:</p>\n<pre><code>int -&gt; foo -&gt; bar  //not allowed (chained conversion)\n</code></pre>\n<p>even though the followings are given:</p>\n<pre><code>int -&gt; foo  //given\nfoo -&gt; bar  //given\n</code></pre>\n<p>So if you want <code>int -&gt; bar</code> to work, then add another constructor taking <code>int</code> to class <code>bar</code>.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2013-02-16T21:30:05.317", "Score": "5", "CreationDate": "2013-02-16T21:24:58.203", "ParentId": "14915216", "CommentCount": "9", "OwnerUserId": "415784", "LastEditDate": "2013-02-16T21:30:05.317"}, "14915216": {"ViewCount": "132", "Body": "<p>This code:</p>\n<pre><code>class foo\n{\n    int x;\npublic:\n    foo(int x) : x(x) { }\n    int get() const { return x; }\n    //...\n};\n\nclass bar\n{\n    int x;\npublic:\n    bar(const foo&amp; x) : x(x.get()) { }\n    int get() const { return x; }\n    bar&amp; operator =(const foo&amp; rhs) { x = rhs.get(); return *this; }\n    //...\n};\n\nvoid func()\n{\n    foo f = 3;\n    bar b = 3;\n    b = 7;\n    //...\n}\n</code></pre>\n<p>errors out on the <code>bar b = 3</code> line (g++ 4.7.1 with <code>-fstd=gnu++11</code>):</p>\n<pre><code>error: conversion from 'int' to non-scalar type 'bar' requested\n</code></pre>\n<p>However, I'm providing a <code>bar</code> constructor that takes a <code>foo</code>, and ints can be implicitly converted to <code>foo</code> as shown by the line preceding it. So, what is going wrong?</p>\n<p>By the way, for several reasons it is undesirable to force conversion to <code>foo</code> using <code>foo(3)</code> because that would make my actual code ugly to use and read.</p>\n", "AcceptedAnswerId": "14915283", "Title": "C++ copy initialization + implicit constructor call = fail", "CreationDate": "2013-02-16T21:17:51.307", "Id": "14915216", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-02-16T21:34:40.217", "Score": "1", "OwnerUserId": "897268", "Tags": "<c++><c++11><constructor><implicit-conversion><copy-initialization>", "AnswerCount": "2"}});