post_cb({"39534929": {"ParentId": "39534609", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The C language leaves this as undefined behavior in <em>6.10.3 Macro replacement, \u00b611</em>:</p>\n<blockquote>\n<p id=\"so_39534609_39534929_0\">If there are sequences of preprocessing tokens within the list of arguments that would otherwise act as preprocessing directives, the behavior is undefined.</p>\n</blockquote>\n<p>So indeed it's wrong to do it.</p>\n<p>GCC and perhaps other popular compiles don't catch it, which is probably why many users of the language are not aware. I encountered this when some of my code failed to compile on PCC (and promptly fixed the bug in my code).</p>\n<p>Update: PJTraill asked in the comments for a case where it would be \"misleading or meaningless\" to have preprocessor directives inside a macro expansion. Here's an obvious one:</p>\n<pre><code>    foo(a, b,\n#ifdef BAR\n        c);\n#else\n        d);\n#endif\n</code></pre>\n<p>I'm not sure whether it would have been plausible for the language to specify that <em>balanced</em> preprocessor conditionals inside the macro expansion are okay, but I think you'd run into problems there too with ambiguities in the order in which they should be processed.</p>\n", "OwnerUserId": "379897", "LastEditorUserId": "379897", "LastEditDate": "2016-09-21T14:44:31.560", "Id": "39534929", "Score": "44", "CreationDate": "2016-09-16T15:16:05.580", "LastActivityDate": "2016-09-21T14:44:31.560"}, "39535850": {"ParentId": "39534609", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Do the following instead?</p>\n<pre><code>#ifdef ANOTHER_MACRO\nFUNC_MACRO(aVal + offset, bVal);\n#else\nFUNC_MACRO(aVal, bVal);\n#endif\n</code></pre>\n<p><strong>EDIT:</strong> Addressing concern raised by comment; I do not know if the OP's method is <em>specifically</em> wrong (I think other answers cover that). However, succinctness and clarity are two aspects held to be pretty important when coding with C. </p>\n<p>As such I would much prefer to find better ways to achieve what the OP seems to be trying, by slightly rethinking the situation such as I have offered above. I guess the OP may have used a triviallised example but I usually find with most C situations that if something is becoming overly complex or attempting to do something it does not seem like the language should allow, then there are better ways to achieve what is needed.</p>\n", "OwnerUserId": "1292918", "LastEditorUserId": "1292918", "LastEditDate": "2016-09-19T10:42:05.940", "Id": "39535850", "Score": "20", "CreationDate": "2016-09-16T16:05:53.683", "LastActivityDate": "2016-09-19T10:42:05.940"}, "39534609": {"CommentCount": "13", "AcceptedAnswerId": "39534929", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-09-16T15:00:33.467", "LastActivityDate": "2016-09-21T14:44:31.560", "LastEditDate": "2017-05-23T12:09:39.440", "ViewCount": "1386", "FavoriteCount": "1", "Title": "Is it wrong to add preprocessor directives in a function-like macro?", "Id": "39534609", "Score": "29", "Body": "<p>I know that my question is similar to <a href=\"https://stackoverflow.com/questions/5566452/macro-function-with-several-lines-for-the-parameter\">this one</a> or <a href=\"https://stackoverflow.com/questions/301711/is-it-possible-for-c-preprocessor-macros-to-contain-preprocessor-directives\">this one</a>, but I find that it is not really the same and, more, the second one has not an answer accepted, I decided to ask if it is correct to add preprocessor directives when a function-like macro is called?</p>\n<p>In my case I have a function-like macro:</p>\n<pre><code>#define FUNC_MACRO(a, b)  // do something with the variables\n</code></pre>\n<p>and somewhere in the code I call it with specific difference if some other macro is defined:</p>\n<pre><code>// ...\nFUNC_MACRO(aVal\n#ifdef ANOTHER_MACRO\n                + offset\n#endif // ANOTHER_MACRO\n           , bVal);\n// ...\n</code></pre>\n<p>I tested on my machine (linux, with gcc 4.8) and it worked ok (with and without the preprocessor directives, and with and without ANOTHER_MACRO defined), but is it safe to do so?</p>\n<p>I read the 16.3/9 paragraph from the answer of the first similar question, but is it true for my case too?</p>\n", "Tags": "<c++><c><macros>", "OwnerUserId": "3062311", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_39534609_39534929_0": {"section_id": 521, "quality": 1.0, "length": 14}}, "n3337": {"so_39534609_39534929_0": {"section_id": 512, "quality": 1.0, "length": 14}}, "n4659": {"so_39534609_39534929_0": {"section_id": 542, "quality": 1.0, "length": 14}}}});