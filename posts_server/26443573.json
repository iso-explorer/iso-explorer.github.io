post_cb({"26443573": {"CommentCount": "2", "ViewCount": "294", "PostTypeId": "1", "LastEditorUserId": "2864740", "CreationDate": "2014-10-18T19:16:39.487", "LastActivityDate": "2014-11-17T10:58:38.170", "Title": "What is the reason for providing a default value of zero for SFINAE testers?", "FavoriteCount": "1", "LastEditDate": "2014-10-18T19:19:57.927", "Id": "26443573", "Score": "11", "Body": "<p>I noted that much of boost and libc++/libstdc++ explicitly provide a default value of zero for SFINAE in code like</p>\n<pre><code>// libc++ http://llvm.org/svn/llvm-project/libcxx/trunk/include/memory\nnamespace __has_pointer_type_imp\n{\n    template &lt;class _Up&gt; static __two __test(...);\n    template &lt;class _Up&gt; static char __test(typename _Up::pointer* = 0);\n}\n\ntemplate &lt;class _Tp&gt;\nstruct __has_pointer_type\n    : public integral_constant&lt;bool, sizeof(__has_pointer_type_imp::__test&lt;_Tp&gt;(0)) == 1&gt;\n{\n};\n</code></pre>\n<p>However it confuses me as to why this would be expected when they explicitly make the call with 0. I remember hearing somewhere it was an optimization (to speed up the compiler when instantiating the template) but I don't fully understand how that would work. I looked at the standard and it has a section that briefly describes what happens with default-arguments in relation to template argument deduction.</p>\n<p><strong>14.8.2</strong></p>\n<blockquote>\n<p id=\"so_26443573_26443573_0\">At certain points in the template argument deduction process it is necessary to take a function type that makes use of template parameters and replace those template parameters with the corresponding template arguments. This is done at the beginning of template argument deduction when any explicitly specified template arguments are substituted into the function type, and again at the end of template argument deduction when any template arguments that were deduced or obtained from default arguments are substituted.</p>\n</blockquote>\n<p>The last bit there sounds concerning to my question</p>\n<blockquote>\n<p id=\"so_26443573_26443573_1\">and again at the end of template argument deduction when any template arguments that were deduced or obtained from default arguments are substituted.</p>\n</blockquote>\n<p>However that sounds like the opposite of an optimization if it has to do more work. Does anyone have any reasoning why that 0 must be there, it works without it, but every single example of SFINAE in libc++ at least seems to explicitly put 0 there, even though they never call the function with no arguments.</p>\n", "Tags": "<c++><templates><c++11><sfinae><libc++>", "OwnerUserId": "658162", "AnswerCount": "1"}, "26971145": {"ParentId": "26443573", "CommentCount": "0", "Body": "<p>I believe Piotr S. is right about disambiguation.  For example, see <a href=\"http://www.boost.org/doc/libs/1_47_0/libs/utility/enable_if.html\" rel=\"nofollow\">http://www.boost.org/doc/libs/1_47_0/libs/utility/enable_if.html</a>, especially Section 3.</p>\n", "OwnerUserId": "4257674", "PostTypeId": "2", "Id": "26971145", "Score": "1", "CreationDate": "2014-11-17T10:58:38.170", "LastActivityDate": "2014-11-17T10:58:38.170"}, "bq_ids": {"n4140": {"so_26443573_26443573_1": {"section_id": 298, "quality": 1.0, "length": 14}, "so_26443573_26443573_0": {"section_id": 298, "quality": 0.98, "length": 49}}, "n3337": {"so_26443573_26443573_1": {"section_id": 289, "quality": 1.0, "length": 14}, "so_26443573_26443573_0": {"section_id": 289, "quality": 0.98, "length": 49}}, "n4659": {"so_26443573_26443573_1": {"section_id": 305, "quality": 1.0, "length": 14}, "so_26443573_26443573_0": {"section_id": 305, "quality": 0.98, "length": 49}}}});