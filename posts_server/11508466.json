post_cb({"11508524": {"ParentId": "11508466", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>According to the standard (C99, I haven't checked C++ or earlier C versions), neither of these is true.</p>\n<ol>\n<li><p>If you look at the grammar definition for declarations (section 6.7), you will find that the type specifier is not optional.</p></li>\n<li><p>On default initialisation (section 6.7.8), we find the following:</p>\n<blockquote>\n<p id=\"so_11508466_11508524_0\">If an object that has automatic storage duration is not initialized\n  explicitly, its value is indeterminate. If an object that has static\n  storage duration is not initialized explicitly, then:</p>\n<p id=\"so_11508466_11508524_1\">...</p>\n<ul>\n<li>if it has arithmetic type, it is initialized to (positive or unsigned) zero;</li>\n</ul>\n<p id=\"so_11508466_11508524_2\">...</p>\n</blockquote>\n<p>Nothing about <code>const</code> here.</p></li>\n</ol>\n", "OwnerUserId": "129570", "LastEditorUserId": "129570", "LastEditDate": "2012-07-16T16:46:32.390", "Id": "11508524", "Score": "1", "CreationDate": "2012-07-16T16:28:19.940", "LastActivityDate": "2012-07-16T16:46:32.390"}, "11508563": {"ParentId": "11508466", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://ideone.com/kl9CZ\" rel=\"nofollow\">http://ideone.com/kl9CZ</a> No, it is not true.</p>\n<p>C allowed default <code>int</code>, but only until 1999, at which point they made it illegal.  A long time ago, variables defaulted to <code>int</code> in MSVC 2003's C++, but in standard C++, that has been illegal since the language was standardized.  In fact, when I type your code into recent versions of MSVC, I get the error message:</p>\n<blockquote>\n<p id=\"so_11508466_11508563_0\">error C4430: missing type specifier - int assumed. Note: C++ does not support default-int</p>\n</blockquote>\n<p>To my knowledge, leaving out the <code>=</code> was never legal in C or C++.</p>\n<p>There are <em>some</em> cases where C and C++ will zero initialize variables to zero, but they are cases where you have something along the lines of <code>int a = int();</code>, and globals/statics are zero-initialized.  In your code, (if they're in a function) neither C nor C++ will zero initialize those variables.</p>\n", "OwnerUserId": "845092", "LastEditorUserId": "845092", "LastEditDate": "2012-07-16T16:41:56.700", "Id": "11508563", "Score": "1", "CreationDate": "2012-07-16T16:30:33.840", "LastActivityDate": "2012-07-16T16:41:56.700"}, "11508604": {"ParentId": "11508466", "PostTypeId": "2", "CommentCount": "0", "Body": "<ol>\n<li><p>This is true for C89/90. This is not true for C99 or C++. The \"implicit int\" rule was outlawed in C99 and never existed in C++.</p>\n<p>However,</p>\n<pre><code>const size 10;\n</code></pre>\n<p>is not valid C syntax. The <code>=</code> is still required. A very ancient pre-standard version of C  (called CRM C) used initialization syntax without <code>=</code>, but that version of the language didn't even have <code>const</code> in it yet.</p></li>\n<li><p>Not true. In C and objects with <em>static storage duration</em> are zero-initailized by default. This means, for example, that any <em>file-scope</em> object is zero-initialized by default, regardless of whether it is <code>const</code> or not. Local variables are not zero-initialized by default, regardless of whether they are <code>const</code> or not. In other words, this issue is completely unrelated to <code>const</code>.</p>\n<p>C++ implements similar specification. All objects with <em>static storage duration</em> are zero-initialized before any other initialization take place.</p></li>\n</ol>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2012-07-16T16:54:39.497", "Id": "11508604", "Score": "3", "CreationDate": "2012-07-16T16:33:18.390", "LastActivityDate": "2012-07-16T16:54:39.497"}, "bq_ids": {"n4140": {"so_11508466_11508524_0": {"section_id": 3291, "quality": 0.625, "length": 10}}, "n3337": {"so_11508466_11508524_0": {"section_id": 6895, "quality": 0.625, "length": 10}}, "n4659": {"so_11508466_11508524_0": {"section_id": 4053, "quality": 0.625, "length": 10}}}, "11508466": {"CommentCount": "2", "ViewCount": "328", "PostTypeId": "1", "ClosedDate": "2012-07-17T01:05:39.707", "LastEditorUserId": "1014938", "CreationDate": "2012-07-16T16:24:45.400", "LastActivityDate": "2015-02-21T20:11:11.300", "Title": "const modifiers In ANSI C and ANSI C++", "LastEditDate": "2015-02-21T20:11:11.300", "Id": "11508466", "Score": "-4", "Body": "<p>Is this true ?</p>\n<p>1.if we use the const modifier alone , it defaults to int. For example,</p>\n<pre><code>const size = 10;\n</code></pre>\n<p>means </p>\n<pre><code>const int size =10; \n</code></pre>\n<p>2.ANSI C does not require an initializer to const;if none is given, it initializes the const to 0. For Example,</p>\n<pre><code>const int i;\n</code></pre>\n<p>means </p>\n<pre><code>const i = 0;\n</code></pre>\n<p>please give ans. according to ANSI std</p>\n", "Tags": "<c++><c><ansi-c>", "OwnerUserId": "1529443", "AnswerCount": "3"}});