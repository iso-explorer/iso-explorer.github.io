post_cb({"23148158": {"ViewCount": "231", "Body": "<pre><code>class animal {\nprotected:\n    animal() {}\n    void eat(int x) {}\n};\n\n\nclass human\n    : private animal\n{\npublic:\n    typedef animal base_type;\n    using base_type::eat;\n};\n\nclass stomach {\npublic:\n    stomach(std::function&lt;void(int)&gt; feed) {}\n};\n\nclass lady\n    : public human\n{\npublic:\n    typedef lady        this_type;\n    typedef human       base_type;\n\n    lady()\n        : base_type()\n        , m_Stomach(std::bind(&amp;base_type::eat, this, std::placeholders::_1))\n    {\n    }\n\nprivate:\n    stomach m_Stomach;\n};\n</code></pre>\n<p>If client code write down:</p>\n<pre><code>lady gaga;\n</code></pre>\n<p>The compiler complains that <code>std::bind(&amp;base_type::eat, ...)</code> is <strong>error C2064: term does not evaluate to a function taking 2 arguments</strong>.</p>\n<p>I had found that if the class lady is modified to:</p>\n<pre><code>class lady\n    : public human\n{\npublic:\n    typedef lady        this_type;\n    typedef human       base_type;\n\n    lady()\n        : base_type()\n        , m_Stomach(std::bind(&amp;this_type::help_eat, this, std::placeholders::_1))\n    {\n    }\n\nprivate:\n    void help_eat(int x)\n    {\n        base_type::eat(x);\n    }\n    stomach m_Stomach;\n};\n</code></pre>\n<p>With a help function, the compiler will <code>std::bind</code> well. But the code duplicates.</p>\n<p>I had also found if changing <code>std::bind</code> to lambda <code>m_Stomach([&amp;](int x){ base_type::eat(x); })</code>, this can also been compiled.</p>\n<p>My question is that is there a better way to use <code>std::bind</code> in this situation? If not, I maybe consider the lambda.</p>\n", "AcceptedAnswerId": "23148367", "Title": "How can I std::bind the method of a base class in this situation?", "CreationDate": "2014-04-18T05:45:57.353", "Id": "23148158", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-04-18T06:33:44.880", "Score": "3", "OwnerUserId": "2045884", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "23148367": {"Id": "23148367", "PostTypeId": "2", "Body": "<p>Your problem is that <code>animal</code> is a <strong>private</strong> base class of <code>human</code> and therefore passing (and storing) <code>this</code> (which is of type <code>lady*</code>) can not be used to call the method from <code>animal</code>. You could fix it making it a public base or by adding a method to <code>human</code>:</p>\n<pre><code>animal* animal_ptr() { return this; }\n</code></pre>\n<p>and later bind:</p>\n<pre><code>std::bind(&amp;base_type::eat, animal_ptr(), std::placeholders::_1)\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/86aa3493784bdb9a\" rel=\"nofollow\"><strong>Live example</strong></a></p>\n", "LastActivityDate": "2014-04-18T06:04:45.707", "CommentCount": "5", "CreationDate": "2014-04-18T06:04:45.707", "ParentId": "23148158", "Score": "2", "OwnerUserId": "2073257"}, "bq_ids": {"n4140": {"so_23148158_23148648_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 5505}}, "n3337": {"so_23148158_23148648_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 5291}}, "n4659": {"so_23148158_23148648_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 6939}}}, "23148648": {"Id": "23148648", "PostTypeId": "2", "Body": "<p>The animal is a private base class of human and although the using-declaration makes the function eat available it does not change the signature <code>void (animal::*)(int)</code> of the function.</p>\n<p>From 7.3.3 The using declaration </p>\n<blockquote>\n<p id=\"so_23148158_23148648_0\">For the purpose of overload resolution, the functions which are\n  introduced by a using-declaration into a derived class will be treated\n  as though they were members of the derived class. In particular, the\n  implicit this parameter shall be treated as if it were a pointer to\n  the derived class rather than to the base class. <strong>This has no effect on\n  the type of the function, and in all other respects the function\n  remains a member of the base class.</strong></p>\n</blockquote>\n<p>Hence, the binding (referring to the function type) leads to the error <code>\u2018animal\u2019 is an inaccessible base of \u2018lady\u2019</code> (g++).</p>\n<p>You can fix it by using a lambda <code>m_Stomach([this](int x) { this-&gt;eat(x); })</code>,\nreplacing the using-declaration in human by <code>void eat(int x) { base_type::eat(x); }</code> or just do it your way.</p>\n", "LastEditorUserId": "2249683", "LastActivityDate": "2014-04-18T06:33:44.880", "Score": "0", "CreationDate": "2014-04-18T06:27:51.130", "ParentId": "23148158", "CommentCount": "2", "OwnerUserId": "2249683", "LastEditDate": "2014-04-18T06:33:44.880"}});