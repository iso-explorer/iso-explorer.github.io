post_cb({"24343764": {"ParentId": "24343724", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The compiler does not initialize the variable explicitly. So it has a value that is stored in the memory allocated for the variable. But according to the C++ Standard the variable is created each time when the control is passed to the switch statement.</p>\n<p>In fact nothing prevents the compiler to use the same memory in some other code block included in the range-based for compound statement.</p>\n<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_24343724_24343764_0\">2 Variables with automatic storage duration (3.7.3) are initialized\n  each time their declaration-statement is executed. Variables with\n  automatic storage duration declared in the block are destroyed on exit\n  from the block (6.6).</p>\n</blockquote>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-06-21T17:13:41.670", "Id": "24343764", "Score": "4", "CreationDate": "2014-06-21T16:49:10.310", "LastActivityDate": "2014-06-21T17:13:41.670"}, "24343724": {"CommentCount": "6", "AcceptedAnswerId": "24343764", "ClosedDate": "2014-06-21T20:16:49.440", "CreationDate": "2014-06-21T16:44:06.393", "LastActivityDate": "2014-06-21T17:13:41.670", "PostTypeId": "1", "ViewCount": "132", "FavoriteCount": "0", "Title": "Does a variable defined inside a switch/case persists it's value?", "Id": "24343724", "Score": "2", "Body": "<p>I know that it is possible to create, but not initalize, a variable inside a switch-statement. But I wonder if a created variable remains in memory, during subsequent executions of the switch-statement?</p>\n<p>I assume the variable named <em>cnt</em> is <strong>newley created every time</strong> the switch-statement is executed. Therefore the value of <em>cnt</em> is always undefined, until the code inside a case label assigns a value!</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int iarr[6] = {0, 1, 1, 1, 0, 1};\n\n    for (int i : iarr) {\n        switch (i) {\n            int cnt;\n            case 0:\n                // it is illegal to initalize value, therefore we assign an\n                // inital value now\n                cout &lt;&lt; \"Just assign 0 to the variable cnt.\\n\";\n                cout &lt;&lt; (cnt = 0) &lt;&lt; \"\\n\";\n                break;\n            case 1:\n                cout &lt;&lt; \"Increment variable cnt.\\n\";\n                cout &lt;&lt; ++cnt &lt;&lt; \"\\n\";\n                break;\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n<p>But at least on my machine and during my tests, the variable <em>cnt</em> defined within the switch-statement persists it's value. I assume this a false positive and my system is (bad luck) accessing always the same memory region?</p>\n<p>Output (GCC 4.9):</p>\n<pre><code>$ g++ -o example example.cpp -std=gnu++11 -Wall -Wpedantic -fdiagnostics-color &amp;&amp; ./example\nJust assign 0 to the variable cnt.\n0\nIncrement variable cnt.\n1\nIncrement variable cnt.\n2\nIncrement variable cnt.\n3\nJust assign 0 to the variable cnt.\n0\nIncrement variable cnt.\n1\n</code></pre>\n<p>Thank you</p>\n", "Tags": "<c++><switch-statement>", "OwnerUserId": "1054324", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24343724_24343764_0": {"section_id": 3917, "quality": 0.95, "length": 19}}, "n3337": {"so_24343724_24343764_0": {"section_id": 3777, "quality": 0.95, "length": 19}}, "n4659": {"so_24343724_24343764_0": {"section_id": 4803, "quality": 0.95, "length": 19}}}});