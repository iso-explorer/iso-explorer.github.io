post_cb({"21013710": {"Id": "21013710", "PostTypeId": "2", "Body": "<p>In <strong>C++11</strong>, both <code>std::multiset</code> and <code>std::multimap</code> are guaranteed to preserve the insertion order of same-valued/same-keyed elements.</p>\n<p>Quoting from the C++11 standard,</p>\n<blockquote>\n<h3>23.2.4 Associative containers</h3>\n<p id=\"so_21013322_21013710_0\"><sup>4</sup> An associative container supports unique keys if it may contain at most one element for each key. Otherwise,\n  it supports equivalent keys. The set and map classes support unique keys; the multiset and multimap classes\n  support equivalent keys. <strong>For <code>multiset</code> and <code>multimap</code>, insert, emplace, and erase preserve the relative\n  ordering of equivalent elements</strong>.</p>\n</blockquote>\n<p>It must be explicitly stated that their unordered (hash) variants, <code>std::unordered_multiset</code> and <code>std::unordered_multimap</code> <strong>does not</strong> guarantee (it is unspecified) the relative order of insertion of elements.</p>\n", "LastActivityDate": "2014-01-09T07:06:14.197", "CommentCount": "0", "CreationDate": "2014-01-09T07:06:14.197", "ParentId": "21013322", "Score": "4", "OwnerUserId": "1619294"}, "bq_ids": {"n4140": {"so_21013322_21013710_0": {"length": 38, "quality": 0.95, "section_id": 740}}, "n3337": {"so_21013322_21013710_0": {"length": 38, "quality": 0.95, "section_id": 729}}, "n4659": {"so_21013322_21013710_0": {"length": 38, "quality": 0.95, "section_id": 798}}}, "21021166": {"Id": "21021166", "PostTypeId": "2", "Body": "<p>I am not 100% sure if I understand what you are asking, but it sounds to me like a linked list would sufficiently suit your needs.  You can just push and pop to keep the list in the order you placed it in.  You can look here for a reference: <a href=\"http://www.cplusplus.com/reference/list/list/\" rel=\"nofollow\">http://www.cplusplus.com/reference/list/list/</a></p>\n<p>Furthermore, you can use the unique method to remove duplicates making it emulate a set data structure.</p>\n", "LastActivityDate": "2014-01-09T13:07:21.313", "CommentCount": "3", "CreationDate": "2014-01-09T13:07:21.313", "ParentId": "21013322", "Score": "1", "OwnerUserId": "3123513"}, "21013322": {"ViewCount": "415", "Body": "<p>Is there any C++ built-in set data structure which keeps the inserted order?\nIt doesn't a problem whether the set is a hash set or a set implemented by a balanced binary tree.</p>\n", "AcceptedAnswerId": "21013710", "Title": "c++ set data structure which keeps inserted order", "CreationDate": "2014-01-09T06:44:07.307", "Id": "21013322", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-01-09T13:07:21.313", "Score": "4", "OwnerUserId": "3020430", "Tags": "<c++><boost><data-structures><set>", "AnswerCount": "2"}});