post_cb({"15366653": {"Id": "15366653", "PostTypeId": "2", "Body": "<p>Yes, the parent constructor is always called before the derived class. Otherwise, the derived class couldn't \"alter\" something set by the parent class. </p>\n", "LastActivityDate": "2013-03-12T16:23:11.063", "CommentCount": "0", "CreationDate": "2013-03-12T16:23:11.063", "ParentId": "15366621", "Score": "3", "OwnerUserId": "1919155"}, "15366780": {"Id": "15366780", "PostTypeId": "2", "Body": "<p>Just as some advice, you can usually just test things like this out yourself if you're not sure:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass parent {\nprotected:\n  int a;\npublic:\n  parent() : a(123) { cout &lt;&lt; \"in parent(): a == \" &lt;&lt; a &lt;&lt; endl; };\n};\n\nclass child : public parent {\n  int b;\npublic:\n            // question: is parent constructor done before init b?\n  child() : b(456), parent() { cout &lt;&lt; \"in child(): a == \" &lt;&lt; a &lt;&lt; \", b == \" &lt;&lt; b &lt;&lt; endl; };\n};\n\nint main() {\n  child c;\n  return 0;\n}\n</code></pre>\n<p>prints</p>\n<pre><code>in parent(): a == 123\nin child(): a == 123, b == 456\n</code></pre>\n", "LastActivityDate": "2013-03-12T16:27:51.483", "CommentCount": "2", "CreationDate": "2013-03-12T16:27:51.483", "ParentId": "15366621", "Score": "2", "OwnerUserId": "598940"}, "15367485": {"Id": "15367485", "PostTypeId": "2", "Body": "<p>think of derived class as extra addition or extension of its base class, addition so it adds to something (this something must already exists).\nthen, another issue is initialization of members. here, you provided default constructor</p>\n<pre><code>public:\n  parent() : a(123) {};\n</code></pre>\n<p>so the member will be default initialized with 123 even if you create parent this way:</p>\n<pre><code>parent p;\n</code></pre>\n<p>if there was no default constructor that initializes object with value</p>\n<pre><code>class parent {\npublic:\n  int a;\n};\n</code></pre>\n<p>than what will be by default in member depends, if the class is P.O.D then int will be default initialized to 0, but if it is not, i.e. you provide more members such as string or vector </p>\n<pre><code>class parent {\npublic:\n  int a;\n  std::string s;\n  std::vector&lt;int&gt; v;\n};\n</code></pre>\n<p>int will have random value if there is no default constructor that initializes it.</p>\n", "LastActivityDate": "2013-03-12T17:01:36.443", "CommentCount": "0", "CreationDate": "2013-03-12T17:01:36.443", "ParentId": "15366621", "Score": "0", "OwnerUserId": "1141471"}, "15366747": {"Id": "15366747", "PostTypeId": "2", "Body": "<p>Yes, the base class is initialized before the members of the derived class and before the constructor body executes.</p>\n<h3>12.6.2 Initializing bases and members [class.base.init]</h3>\n<blockquote>\n<p id=\"so_15366621_15366747_0\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<p id=\"so_15366621_15366747_1\">\u2014 First, and only for the constructor of the most\n  derived class (1.8), virtual base classes are initialized in the order\n  they appear on a depth-first left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-specifier-list. </p>\n<p id=\"so_15366621_15366747_2\">\u2014 Then, direct base classes are initialized in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers). </p>\n<p id=\"so_15366621_15366747_3\">\u2014 Then, non-static\n  data members are initialized in the order they were declared in the\n  class definition (again regardless of the order of the\n  mem-initializers). </p>\n<p id=\"so_15366621_15366747_4\">\u2014 Finally, the compound-statement of the\n  constructor body is executed.</p>\n</blockquote>\n", "LastActivityDate": "2013-03-12T16:26:29.567", "CommentCount": "0", "CreationDate": "2013-03-12T16:26:29.567", "ParentId": "15366621", "Score": "13", "OwnerUserId": "673730"}, "bq_ids": {"n4140": {"so_15366621_15366747_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_15366621_15366747_1": {"length": 29, "quality": 1.0, "section_id": 438}, "so_15366621_15366747_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_15366621_15366747_4": {"length": 5, "quality": 1.0, "section_id": 438}, "so_15366621_15366747_3": {"length": 15, "quality": 1.0, "section_id": 438}}, "n3337": {"so_15366621_15366747_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_15366621_15366747_1": {"length": 29, "quality": 1.0, "section_id": 429}, "so_15366621_15366747_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_15366621_15366747_4": {"length": 5, "quality": 1.0, "section_id": 429}, "so_15366621_15366747_3": {"length": 15, "quality": 1.0, "section_id": 429}}, "n4659": {"so_15366621_15366747_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_15366621_15366747_1": {"length": 29, "quality": 1.0, "section_id": 458}, "so_15366621_15366747_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_15366621_15366747_4": {"length": 5, "quality": 1.0, "section_id": 458}, "so_15366621_15366747_3": {"length": 15, "quality": 1.0, "section_id": 458}}}, "15366621": {"ViewCount": "4385", "Body": "<p>Are parent class constructors called before initializing variables, or will the compiler initialize the variables of the class first?</p>\n<p>For example:\n</p>\n<pre><code>class parent {\nprotected:\n  int a;\npublic:\n  parent() : a(123) {};\n};\n\nclass child : public parent {\n  int b;\npublic:\n            // question: is parent constructor done before init b?\n  child() : b(456), parent() {};\n}\n</code></pre>\n", "AcceptedAnswerId": "15366747", "Title": "Are parent class constructors called before initializing variables?", "CreationDate": "2013-03-12T16:21:41.960", "Id": "15366621", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-09-14T09:34:38.617", "LastEditorUserId": "1810087", "LastActivityDate": "2016-09-14T09:34:38.617", "Score": "9", "OwnerUserId": "1810087", "Tags": "<c++><class><inheritance>", "AnswerCount": "5"}, "15367202": {"Id": "15367202", "PostTypeId": "2", "Body": "<p>Yes,construction of objects starts from the parent class and comes to child classes, so the constructor calls are in that order. In case of destruction, this is exactly opposite.  </p>\n", "LastActivityDate": "2013-03-12T16:47:47.510", "CommentCount": "0", "CreationDate": "2013-03-12T16:47:47.510", "ParentId": "15366621", "Score": "0", "OwnerUserId": "1791142"}});