post_cb({"bq_ids": {"n4140": {"so_38275525_38275525_0": {"length": 4, "quality": 1.0, "section_id": 3329}}, "n3337": {"so_38275525_38275525_0": {"length": 4, "quality": 1.0, "section_id": 3199}}, "n4659": {"so_38275525_38275525_0": {"length": 4, "quality": 1.0, "section_id": 4095}}}, "38277032": {"Id": "38277032", "PostTypeId": "2", "Body": "<p>It looks like a bug, indeed. For a workaround, the following appears to silence both errors and warnings in MSVC 2015.</p>\n<pre><code>#pragma float_control(precise, off, push)\n\nfloat f2 = 7.2; // OK, with warning\n//...\n\n#pragma float_control(precise, pop)\n</code></pre>\n<p>The same works globally if using the <a href=\"https://msdn.microsoft.com/en-us/library/e7s85ffb.aspx\" rel=\"noreferrer\"><code>/fp:fast</code></a> compiler switch, though that one is incompatible with <a href=\"https://msdn.microsoft.com/en-us/library/0k0w269d.aspx\" rel=\"noreferrer\"><code>/Za</code></a> which disables MS language extensions.</p>\n", "LastActivityDate": "2016-07-09T00:16:01.520", "Score": "6", "CreationDate": "2016-07-09T00:16:01.520", "ParentId": "38275525", "CommentCount": "1", "OwnerUserId": "5538420"}, "38275525": {"ViewCount": "242", "Body": "<p>Check out this simple program:</p>\n<pre><code>int main() {\n    float f2 = 7.2; // OK, with warning\n    float f3 = 7.199999809265137; // OK, no warning\n    float f4{ 7.2 }; // Fails\n    float f5{ 7.199999809265137 }; // OK, no warning\n    float f6 = { 7.2 }; // Fails\n    float f7 = { 7.199999809265137 }; // OK, no warning\n}\n</code></pre>\n<p>When compiled with MSVC 2015 using the default options (<code>cl /W4</code>, version 19.00.23918), I get the following messages:</p>\n<pre><code>FloatTest.cpp(2): warning C4305: 'initializing': truncation from 'double' to 'float'\nFloatTest.cpp(4): error C2397: conversion from 'double' to 'float' requires a narrowing conversion\nFloatTest.cpp(4): warning C4305: 'initializing': truncation from 'double' to 'float'\nFloatTest.cpp(6): error C2397: conversion from 'double' to 'float' requires a narrowing conversion\nFloatTest.cpp(6): warning C4305: 'initializing': truncation from 'double' to 'float'\n</code></pre>\n<p>This program compiles fine with Clang 3.0-3.8 and GCC 4.5.4-6.1.0 (tested with <a href=\"http://melpon.org/wandbox\">http://melpon.org/wandbox</a>), with only warnings for unused variables. Further, removing/commenting out lines <code>f4</code> and <code>f6</code> result in successful compilation (with only the one warning for line <code>f2</code>).</p>\n<p>Initially it looks like MSVC is just telling me that 7.2 can't be represented precisely as a <code>float</code>, so it's a narrowing conversion (which is illegal in brace initialization). However, the standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">draft N3337</a>), section 8.5.4, note 7, says this:</p>\n<blockquote>\n<p id=\"so_38275525_38275525_0\">A <em>narrowing conversion</em> is an implicit conversion...</p>\n<ul>\n<li>from <code>long double</code> to <code>double</code> or <code>float</code>, or from <code>double</code> to <code>float</code>, except where the source is a constant expression and the actual value after conversion is within the range of values that can be represented (<strong>even if it cannot be represented exactly</strong>)</li>\n</ul>\n</blockquote>\n<p>Emphasis mine. Since 7.2 is within the range of values representable by <code>float</code>, its conversion to <code>float</code> should not be a narrowing conversion according to the standard. Is MSVC in the wrong here, and should I file a bug?</p>\n", "AcceptedAnswerId": "38277032", "Title": "MSVC brace initialization with doubles appears to violate the standard?", "CreationDate": "2016-07-08T21:17:35.070", "LastActivityDate": "2017-09-19T15:37:12.463", "CommentCount": "5", "LastEditDate": "2016-07-08T22:19:32.353", "PostTypeId": "1", "LastEditorUserId": "1204143", "Id": "38275525", "Score": "10", "OwnerUserId": "1204143", "Tags": "<c++><c++11><visual-c++><language-lawyer><brace-initialization>", "AnswerCount": "2"}, "46304520": {"Id": "46304520", "PostTypeId": "2", "Body": "<p>Some floating point numbers can be exactly expressed in a <code>float</code> representation and some can't. If the number can be represented in the form <code>x / 2^y</code> where <code>x</code> is any integer and <code>y</code> is an integer 23 or less, it fits. <em>Most</em> decimal numbers can't be represented in this way, as a binary number they repeat forever. <code>7.2</code> is one example.</p>\n<p>You can fix this easily by appending <code>f</code> to each number, to indicate to the compiler that this is a <code>float</code> constant rather than a <code>double</code>.</p>\n<pre><code>float f4{ 7.2f };\n</code></pre>\n", "LastActivityDate": "2017-09-19T15:37:12.463", "Score": "-3", "CreationDate": "2017-09-19T15:37:12.463", "ParentId": "38275525", "CommentCount": "5", "OwnerUserId": "5987"}});