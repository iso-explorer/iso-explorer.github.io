post_cb({"20423080": {"ViewCount": "755", "Body": "<p>I'm experimenting with C++11 (I've used old C++ so far) and I wrote the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;type_traits&gt;\n\nusing namespace std;\n\nconstexpr bool all_true(){\n    return true;\n}\n\ntemplate &lt;typename Head, typename... Tail&gt;\nconstexpr bool all_true(Head head, Tail... tail){\n    static_assert( is_convertible&lt;bool, Head&gt;::value, \"all_true arguments must be convertible to bool!\");\n    return static_cast&lt;bool&gt;(head) &amp;&amp; all_true(tail...);\n}\n\ntemplate&lt;typename T, typename... Args&gt;\nvoid print_as(Args... args){\n    static_assert( all_true(is_convertible&lt;T,Args&gt;::value...), \"all arguments must be convertible to the specified type!\");\n    vector&lt;T&gt; v {static_cast&lt;T&gt;(args)...};\n    for(T i : v) cout &lt;&lt; i &lt;&lt; endl;\n}\n\nint main(){\n    print_as&lt;bool&gt;(1, 2, 0, 4.1);\n}\n</code></pre>\n<p>The code compiles and runs as expected (I used gcc 4.6). I would like to aks the following questions:</p>\n<ol>\n<li>I initialized a std::vector with an expanded parameter pack ( vector v {static_cast(args)...}; ). Is this correct C++11? I haven't found this feature explained anywhere.</li>\n<li><p>I don't like too much the declaration of all_true because I know the type but I use templates. Is it possible to use something similar to the following?</p>\n<pre><code>constexpr bool all_true(bool head, bool... tail){...} // This code doesn't compile\n</code></pre></li>\n</ol>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "20423615", "Title": "Can we use parameter packs as std::vector initializers?", "CreationDate": "2013-12-06T11:46:09.540", "Id": "20423080", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-12-06T12:12:25.693", "Score": "4", "OwnerUserId": "1150514", "Tags": "<c++11><stdvector><variadic-templates>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_20423080_20423615_0": {"length": 6, "quality": 1.0, "section_id": 121}}, "n3337": {"so_20423080_20423615_0": {"length": 6, "quality": 1.0, "section_id": 116}}, "n4659": {"so_20423080_20423615_0": {"length": 6, "quality": 1.0, "section_id": 125}}}, "20423615": {"Id": "20423615", "PostTypeId": "2", "Body": "<ol>\n<li><p>Yes, it is possible to use pack expansions inside initialiser lists. C++11 [temp.variadic]\u00a74 allows this:</p>\n<blockquote>\n<p id=\"so_20423080_20423615_0\">... Pack expansions can occur in the following contexts:\n  ...</p>\n<ul>\n<li>In an <em>initializer-list</em> (8.5); the pattern is an <em>initializer-clause.</em></li>\n</ul>\n</blockquote></li>\n<li><p>No, there's no way to make a non-template typesafe variadic function. What you have is OK. There was a <a href=\"https://stackoverflow.com/q/20407753/1782465\">question about this</a> recently.</p></li>\n</ol>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-06T12:12:25.693", "Score": "3", "CreationDate": "2013-12-06T12:12:25.693", "ParentId": "20423080", "CommentCount": "1", "OwnerUserId": "1782465", "LastEditDate": "2017-05-23T12:08:44.197"}});