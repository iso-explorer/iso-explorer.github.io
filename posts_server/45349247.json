post_cb({"bq_ids": {"n4140": {"so_45349247_45350254_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5419}}, "n4659": {"so_45349247_45350254_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6841}}}, "45349699": {"Id": "45349699", "PostTypeId": "2", "LastEditDate": "2017-07-27T12:53:02.890", "CommentCount": "3", "LastEditorUserId": "4124855", "LastActivityDate": "2017-07-27T12:53:02.890", "CreationDate": "2017-07-27T11:36:55.140", "ParentId": "45349247", "Score": "1", "Body": "<p>Just move it out as another function:</p>\n<pre><code>constexpr double sqrtNewtonRaphson (double x, double current, double previous) {\n            return current == previous ? current : sqrtNewtonRaphson(x, 0.5 * (current + x / current), current);\n        }\nconstexpr double compile_time_sqrt_ver2(double x) {\n    return x &gt;= 0 &amp;&amp; x &lt; std::numeric_limits&lt;double&gt;::infinity()\n           ? sqrtNewtonRaphson(x, x, 0)\n           : std::numeric_limits&lt;double&gt;::quiet_NaN();\n}\n\n//------------------------------------------------------------\nint main() {\n    constexpr double test_v2 = compile_time_sqrt_ver2(24);\n    return test_v2;\n}\n</code></pre>\n<hr>\n<p>EDIT made method static</p>\n<pre><code>constexpr double compile_time_sqrt_ver2(double x) {\n    struct SNR{\n        static constexpr double sqrtNewtonRaphson (double x, double current, double previous) {\n            return current == previous ? current : sqrtNewtonRaphson(x, 0.5 * (current + x / current), current);\n        }\n    }; \n\n    return x &gt;= 0 &amp;&amp; x &lt; std::numeric_limits&lt;double&gt;::infinity()\n           ? SNR::sqrtNewtonRaphson(x, x, 0)\n           : std::numeric_limits&lt;double&gt;::quiet_NaN();\n}\n</code></pre>\n</hr>", "OwnerUserId": "4124855"}, "45350254": {"Id": "45350254", "PostTypeId": "2", "LastEditDate": "2017-07-27T12:35:25.923", "CommentCount": "2", "LastEditorUserId": "27678", "LastActivityDate": "2017-07-27T12:35:25.923", "CreationDate": "2017-07-27T12:02:27.067", "ParentId": "45349247", "Score": "3", "Body": "<p>GCC is right; Clang is wrong.</p>\n<p>Per [basic.types] your anonymous struct is an aggregate type (and therefore a literal type), so it should be constexpr constructible. (N4659 \u00a76.9/10)</p>\n<p>However, you are not initializing your aggregate. Aggregates are not default constructed upon declaration. This is why adding the braces <code>{}</code> afterwards enables it to work (aggregate initialization)</p>\n<p>A <code>constexpr</code> function requires that all variables be initialized per [dcl.constexpr] \u00a710.1.5/3.4.5 (<strong>emphasis mine</strong>)</p>\n<blockquote>\n<p id=\"so_45349247_45350254_0\">The definition of a constexpr function shall satisfy the following requirements: <br/>[...]<br/> \u2014 its <em>function-body</em> shall be <code>= delete</code>, <code>= default</code>, or a compound-statement that does not contain <br/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2014 a definition of a variable of non-literal type or of static or thread storage duration <strong>or for which no\n  initialization is performed</strong>.</p>\n</blockquote>\n<p>If you add a <code>constexpr</code> constructor, then it will also work (the type remains literal but is no longer aggregate, so you are not required to explicitly initialize it). However, this would also require you to name your struct.</p>\n", "OwnerUserId": "27678"}, "45349247": {"ViewCount": "87", "LastEditDate": "2017-07-27T12:36:15.657", "AcceptedAnswerId": "45350254", "Title": "Nested struct inside constexpr function, compiles in clang, fails in gcc", "CreationDate": "2017-07-27T11:15:42.437", "LastActivityDate": "2017-07-27T12:53:02.890", "CommentCount": "4", "Body": "<p>Im having trouble with the following code, I am trying to write a compile time square root function. The code compiles on the most recent clang 6.0.\nyet fails on the most recent version of gcc 8.0. the issue seems to be with the initialisation of the struct. </p>\n<p>GCC output </p>\n<pre><code> error: uninitialized variable 'sqrtNewtonRaphson' in 'constexpr' context\n     } sqrtNewtonRaphson;\n       ^~~~~~~~~~~~~~~~~\n</code></pre>\n<p>The last version of gcc that this code compiles on is gcc 6.3, in the following versions after that, compile_time_sqrt_ver1(double) fails to compile.</p>\n<pre><code>//------------------------------------------------------------\nconstexpr double\ncompile_time_sqrt_ver1(double x) {\n    struct {\n        constexpr double operator() (double x, double current, double previous) {\n            return current == previous ? current : (*this)(x, 0.5 * (current + x / current), current);\n        }\n    } sqrtNewtonRaphson; \n\n    return x &gt;= 0 &amp;&amp; x &lt; std::numeric_limits&lt;double&gt;::infinity()\n           ? sqrtNewtonRaphson(x, x, 0)\n           : std::numeric_limits&lt;double&gt;::quiet_NaN();\n}\n\n//------------------------------------------------------------\nint main() {\n    constexpr double test_v1 = compile_time_sqrt_ver1(24);\n    return test_v1;\n}\n</code></pre>\n<p>The solution I found to this is to add {} at the end of the struct making it compile in the most recent version of gcc as well as clang. why is this?</p>\n<pre><code>//------------------------------------------------------------\nconstexpr double\ncompile_time_sqrt_ver2(double x) {\n    struct {\n        constexpr double operator() (double x, double current, double previous) {\n            return current == previous ? current : (*this)(x, 0.5 * (current + x / current), current);\n        }\n    } sqrtNewtonRaphson{}; // &lt;- change {}\n\n    return x &gt;= 0 &amp;&amp; x &lt; std::numeric_limits&lt;double&gt;::infinity()\n           ? sqrtNewtonRaphson(x, x, 0)\n           : std::numeric_limits&lt;double&gt;::quiet_NaN();\n}\n\n//------------------------------------------------------------\nint main() {\n    constexpr double test_v2 = compile_time_sqrt_ver2(24);\n    return test_v2;\n}\n</code></pre>\n", "PostTypeId": "1", "LastEditorUserId": "27678", "Id": "45349247", "Score": "3", "OwnerUserId": "3198492", "Tags": "<c++><gcc><language-lawyer><constexpr><clang++>", "AnswerCount": "2"}});