post_cb({"15867521": {"Id": "15867521", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15867399_15867521_0\">14.3.2 Template non-type arguments [temp.arg.nontype]</p>\n<p id=\"so_15867399_15867521_1\">A template-argument for a non-type, non-template template-parameter shall be one of:</p>\n<p id=\"so_15867399_15867521_2\">[...]</p>\n<p id=\"so_15867399_15867521_3\">\u2014 a constant expression (5.19) that designates the address of an object with static storage &gt; duration and external or internal linkage <strong>or a function with external or internal linkage</strong>, including function templates and function template-ids but excluding non-static class members, <strong>expressed (ignoring parentheses) as &amp; id-expression</strong>, except that the &amp; may be omitted if the name refers to a function or array and shall be omitted if the corresponding template-parameter is a reference; [...]</p>\n</blockquote>\n<p>(n3485, emphasis mine)</p>\n<p>I don't know exactly why it's been limited, but I think it might be related to the fact that the function address is not available at compile time (there might be a substitute for template instantiation purposes).</p>\n<hr>\n<p>Edit: Enhanced answer due to a follow-up question (comment) of Synxis</p>\n<pre><code>constexpr func = &amp;function;\n</code></pre>\n<p>^ this is well-formed; you can use the address of a function to initialize a <code>constexpr</code> object.\nThe problem is that it's explicitly forbidden to use pointers as non-type template arguments other than of the form <code>&amp;identifier</code>:</p>\n<pre><code>using My_Call     = Call &lt; &amp;function &gt;;  // fine\n\nconstexpr func mypointer = &amp;function;    // fine\nusing My_Ind_Call = Call &lt; func &gt;;       // forbidden, argument not of form `&amp;id`\n</code></pre>\n</hr>", "LastEditorUserId": "420683", "LastActivityDate": "2013-04-08T17:15:41.333", "CommentCount": "6", "CreationDate": "2013-04-07T20:37:07.920", "ParentId": "15867399", "Score": "8", "OwnerUserId": "420683", "LastEditDate": "2013-04-08T17:15:41.333"}, "bq_ids": {"n4140": {"so_15867399_15867521_3": {"length": 40, "quality": 0.975609756097561, "section_id": 87}, "so_15867399_15867521_1": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_15867399_15867521_3": {"length": 40, "quality": 0.975609756097561, "section_id": 82}, "so_15867399_15867521_1": {"length": 5, "quality": 1.0, "section_id": 82}}}, "15867399": {"ViewCount": "2042", "Body": "<p>When answering <a href=\"https://stackoverflow.com/questions/15866258/template-class-multiple-definition/15866315\">this question</a>, I tried the following code with gcc (<a href=\"http://ideone.com/z7Rf49\" rel=\"nofollow noreferrer\">code compiled</a>) and clang (<a href=\"http://liveworkspace.org/code/PaAfb$0\" rel=\"nofollow noreferrer\">code rejected</a>):</p>\n<pre><code>typedef long (*func)(int);\n\nlong function(int) { return 42; }\n\nstruct Test\n{\n    static constexpr func f = &amp;function;\n};\n\ntemplate&lt;func c&gt;\nstruct Call\n{\n    static void f()\n    {\n        c(0);\n    }\n};\n\nint main()\n{\n    Call&lt;Test::f&gt;::f();\n}\n</code></pre>\n<p>I am not sure which compiler is right, although I think the constexpr initialization of <code>Test::f</code> is ok. The error clang outputs is:</p>\n<pre><code>error: non-type template argument for template parameter of pointer type 'func'\n       (aka 'long (*)(int)') must have its address taken\n</code></pre>\n<ol>\n<li>Which compiler is right ?</li>\n<li>If clang is right, why , and what does this error really means ?</li>\n</ol>\n<p><strong>EDIT</strong>: for the \"why\", see <a href=\"https://stackoverflow.com/questions/15885399/pointer-as-non-type-template-argument\">DyP's question</a>.</p>\n", "AcceptedAnswerId": "15867521", "Title": "static constexpr pointer-to-function, difference between compilers", "CreationDate": "2013-04-07T20:24:21.643", "Id": "15867399", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:17:46.607", "LastEditorUserId": "-1", "LastActivityDate": "2013-04-08T19:27:14.523", "Score": "8", "OwnerUserId": "1261432", "Tags": "<c++><c++11><static><function-pointers><constexpr>", "AnswerCount": "1"}});