post_cb({"22180886": {"ParentId": "22180312", "CommentCount": "15", "Body": "<p>The standard is not always as coherent as we would like, since\nit is a very large document, written (in practice) by a number\nof different people, and despite all of the proof-reading that\ndoes occur, inconsistencies slip through.  In the case of\nundefined behavior (and errors in general), I think there is an\nadditional problem in that for much of the most basic things\n(pointers, etc.), the C++ standard inspires from C.  But the\nC standard takes the point of view that all errors are undefined\nbehavior, unless stated otherwise, where as the C++ standard\ntries to take the point of view that all errors require\na diagnostic, unless stated otherwise.  (Although they still\nhave to allow for the case where the standard omits to specify\na behavior.)  I think this accounts for a lot of the\ninconsistency in the wording. </p>\n<p>Globally, the inconsistency is regrettable, but on the whole, if\nthe standard says that something is erroneous, or ill-formed,\nthen it requires a diagnostic, unless the standard says that it\ndoesn't, or that it is undefined behavior.  In something like\n\"<em>ill-formed; no diagnostic required</em>\", the \"<em>no diagnostic\nrequired</em>\" is important, because otherwise, it would require\na diagnostic.  As for the difference between \"ill-formed; no\ndiagnostic required\" and \"undefined behavior\", there isn't any.\nThe first is probably more frequent in cases where the code is\nincorrect, the second where it is a run-time issue, but it's not\nsystematic.  (The specification of the one definition\nrule\u2014clearly a compile time issue\u2014ends with \"then\nthe behavior is undefined\".)</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "22180886", "Score": "10", "CreationDate": "2014-03-04T19:14:04.567", "LastActivityDate": "2014-03-04T19:14:04.567"}, "22180312": {"CommentCount": "4", "AcceptedAnswerId": "22180886", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-03-04T18:45:14.420", "LastActivityDate": "2014-03-04T19:14:04.567", "LastEditDate": "2017-05-23T10:31:19.257", "ViewCount": "1664", "FavoriteCount": "5", "Title": "Difference between Undefined Behavior and Ill-formed, no diagnostic message required", "Id": "22180312", "Score": "16", "Body": "<p>The C++ standard comes with an stunning number of definitions for <em>unclear</em><sup>1</sup> behavior which mean more or less the same with subtle differences. Reading <a href=\"https://stackoverflow.com/a/22177425/572743\">this answer</a>, I noticed the wording <em>\"the program is ill-formed; no diagnostic required\"</em>.</p>\n<p><strong>Implementation-defined</strong> differs from <strong>unspecified</strong> behavior in that the implementation in the former case must clearly document what it's doing (in the latter case, it needn't), both are <em>well-formed</em>. <strong>Undefined</strong> behavior differs from unspecified in that the program is <em>erroneous</em> (1.3.13).<br>\nThey otherwise all have in common that the standard makes no assumptions or requirements about what the implementation will do.\nExcept for 1.4/8, which states that implementations may have extensions that do not alter the behavior of well-formed programs, but are ill-formed according to the standard, and the implementation <strong>must</strong> diagnose use of these, but can afterwards continue compiling and executing the ill-formed program.</br></p>\n<p>An <strong>ill-formed</strong> program is otherwise only defined as being not well-formed (great!). A <strong>well-formed</strong> program, on the other hand, is defined as one that adheres to the syntax and diagnosable semantic rules. Which would consequently mean that an ill-formed program is one that breaks either the syntax or semantic rules (or both). In other words, an ill-formed program <em>actually</em> shouldn't compile at all (how would one translate e.g. a program with a wrong syntax in any meaningful way?).</p>\n<p>I would be inclined to think that the word <em>erroneous</em> also implies that the compiler should abort the build with an error message (after all, <em>erroneous</em> suggests there's an error), but the \"Note\" section in 1.3.13 explicitly allows for something different, including silently ignoring the problem (and compilers demonstrably <em>do not</em> break the build because of UB, most do not even warn by default).</p>\n<p>One might further believe that <em>erroneous</em> and ill-formed are the same, but the standard doesn't go into detail if that is the case or what the word is supposed to mean.</p>\n<p>Further, 1.4 states that</p>\n<blockquote>\n<p id=\"so_22180312_22180312_0\">a conforming implementation shall [...] accept and correctly execute a well-formed program</p>\n</blockquote>\n<p>and  </p>\n<blockquote>\n<p id=\"so_22180312_22180312_1\">If a program contains a violation of a rule for which no diagnostic is required, [...] no requirement on implementations with respect to that program.</p>\n</blockquote>\n<p>In other words, a conforming implementation <strong>must</strong> accept a well-formed program, but it might as well accept an ill-formed one, and even without a warning. Except, if the program is ill-formed <em>because it uses an extension</em>.  </p>\n<p>The second paragraph suggests that anything in conjunction with \"no diagnostic required\" means there are no requirements from the specification, which means it is mostly equivalent to \"undefined behavior\", except there is no mention of <em>erroneous</em>.</p>\n<p>What would therefore be the intention behind using a wording such as <em>\"ill-formed; no diagnostic required\"</em>?</p>\n<p>The presence of \"no diagnostics\" would suggest that it is identical (or <em>mostly</em> identical?) to undefined behavior. Also, since <em>implementation-defined</em> and <em>unspecified</em> behavior are defined as <em>well-formed</em>, it must be <em>something different</em>.</p>\n<p>On the other hand, since an ill-formed program breaks the syntax/semantic rules, it actually should not compile. Which, however, in conjunction with \"no diagnostic required\" would mean that a compiler would be permitted to silently exit without as much as a warning, and you would be unable to find an executable afterwards.</p>\n<p>Is there a difference between \"ill-formed; no diagnostic required\" and \"undefined behavior\", or is this simply a complicated synonym for the same thing?</p>\n<p><hr/>\n<sup>1</sup>In lack of a better wording for the collective of behaviors</p>\n", "Tags": "<c++><language-lawyer><undefined-behavior>", "OwnerUserId": "572743", "AnswerCount": "2"}, "22180509": {"ParentId": "22180312", "CommentCount": "3", "Body": "<p>The way it should be is: things that are undefined don't cause problems as long as a particular run of a program doesn't trigger the undefined behavior. E.g. a null pointer dereference only ruins your day when your particular program run (characterized by its input: I/O, non-deterministic functions like clock queries, etc.) would actually execute it - but it reaches backwards, so it could exhibit undefined behavior even before technically reaching the dereference. (This is mainly there to allow code rearrangements I think.)</p>\n<p>Whereas ill-formed NDR is something that the implementation <em>should</em> diagnose during translation, but may not be able to due to various technical or theoretical limitations. E.g. the ODR would require the implementation to collect all definitions of an entity and compare them; but that's a massive resource drain. Some NDR things are even computationally infeasible. Undefined behavior arises when the implementation doesn't immediately diagnose this stuff.</p>\n<p>In practice, undefined behavior applies to some weird cases that aren't runtime conditions. Some weird preprocessor issues trigger undefined behavior. These are weird because they don't have a meaningful representation in the compiled program, so it's unclear what would cause them to execute.</p>\n<p>Nevertheless, this view still gives you a reasonable idea for why there are two terms.</p>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "22180509", "Score": "6", "CreationDate": "2014-03-04T18:56:31.577", "LastActivityDate": "2014-03-04T18:56:31.577"}, "bq_ids": {"n4140": {"so_22180312_22180312_1": {"section_id": 5770, "quality": 1.0, "length": 8}, "so_22180312_22180312_0": {"section_id": 5770, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_22180312_22180312_1": {"section_id": 5543, "quality": 1.0, "length": 8}, "so_22180312_22180312_0": {"section_id": 5543, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_22180312_22180312_1": {"section_id": 7227, "quality": 1.0, "length": 8}, "so_22180312_22180312_0": {"section_id": 7227, "quality": 0.8333333333333334, "length": 5}}}});