post_cb({"bq_ids": {"n4140": {"so_37284762_37285529_1": {"length": 23, "quality": 0.92, "section_id": 6700}}, "n3337": {"so_37284762_37285529_1": {"length": 23, "quality": 0.92, "section_id": 6455}}, "n4659": {"so_37284762_37285529_1": {"length": 23, "quality": 0.92, "section_id": 8174}}}, "37285529": {"Id": "37285529", "PostTypeId": "2", "Body": "<p>The access rights is not the issue. A nested class has the same access rights as any other member of the class.</p>\n<p>The issue is that you don't have an object of <code>myClass</code>. Without that, you can't access any member of the class.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_37284762_37285529_0\"><strong>11.7 Nested classes</strong> <strong>[class.access.nest]</strong></p>\n<p id=\"so_37284762_37285529_1\">1 A nested class is a member and as such has the same access rights as any other member. The members of an enclosing class have no special access to members of a nested class; the usual access rules (Clause 11)\n  shall be obeyed. [ <em>Example:</em></p>\n<pre><code>class E {\n    int x;\n    class B { };\n\n    class I {\n      B b; // OK: E::I can access E::B\n      int y;\n      void f(E* p, int i) {\n        p-&gt;x = i; // OK: E::I can access E::x\n      }\n   };\n\n int g(I* p) {\n     return p-&gt;y; // error: I::y is private\n   }\n };\n</code></pre>\n<p id=\"so_37284762_37285529_2\">\u2014<em>end example</em> ]</p>\n</blockquote>\n<hr>\n<p>The following program works fine for me using g++ 4.9.3.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass myClass\n{\n   public:\n\n      myClass(int in) : var1(in) {}\n\n      struct memberStruct\n      {\n         int foo(myClass&amp; obj);\n      };\n\n   protected:\n\n      int var1;\n};\n\nint myClass::memberStruct::foo(myClass&amp; obj)\n{\n   return obj.var1;\n}\n\nint main()\n{\n   myClass obj1{10};\n   myClass::memberStruct obj2;\n   std::cout &lt;&lt; obj2.foo(obj1) &lt;&lt; std::endl;\n}\n</code></pre>\n</hr>", "LastEditorUserId": "434551", "LastActivityDate": "2016-05-19T22:37:38.977", "Score": "1", "CreationDate": "2016-05-17T20:19:45.383", "ParentId": "37284762", "CommentCount": "0", "OwnerUserId": "434551", "LastEditDate": "2016-05-19T22:37:38.977"}, "37284762": {"ViewCount": "107", "Body": "<p>I have a function that looks like this:</p>\n<pre><code>void myClass::memberStruct::memberFunction() {\n         // code\n}\n</code></pre>\n<p>I then have a (protected) array in <code>myClass</code>, that I want to access in this function(not a static array). How do I access this array? I can't use <code>this</code> because that gives me a pointer to the <code>memberStruct</code>. </p>\n", "AcceptedAnswerId": "37285529", "Title": "How to access member variable?", "CreationDate": "2016-05-17T19:29:22.810", "Id": "37284762", "CommentCount": "8", "LastEditDate": "2016-05-17T19:33:46.967", "PostTypeId": "1", "LastEditorUserId": "955273", "LastActivityDate": "2016-05-19T22:37:38.977", "Score": "-4", "OwnerUserId": "6347510", "Tags": "<c++><oop>", "AnswerCount": "2"}, "37284811": {"Id": "37284811", "PostTypeId": "2", "Body": "<p>You can't, because the <code>struct</code> has nothing to do with the <code>class</code>, even though you define the <code>struct</code> in the <code>class</code>. </p>\n<p>Declaring the <code>struct</code> in the <code>class</code> only limits its scope to the class, nothing else. So no, you can't access the array.</p>\n<p>You could however pass the array to the <code>memberFunction</code>, for example.</p>\n", "LastActivityDate": "2016-05-17T19:31:47.650", "CommentCount": "11", "CreationDate": "2016-05-17T19:31:47.650", "ParentId": "37284762", "Score": "1", "OwnerUserId": "3980929"}});