post_cb({"bq_ids": {"n4140": {"so_30519148_30519155_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 382}, "so_30519148_30519155_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 381}}, "n3337": {"so_30519148_30519155_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 373}, "so_30519148_30519155_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 372}}, "n4659": {"so_30519148_30519155_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 397}, "so_30519148_30519155_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 396}}}, "30519155": {"Id": "30519155", "PostTypeId": "2", "Body": "<p>It's a dangling reference. From [class.temporary]/4-5:</p>\n<blockquote>\n<p id=\"so_30519148_30519155_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression.\n  The first context is when a default constructor is called [ ... ]</p>\n<p id=\"so_30519148_30519155_1\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound persists\n  for the lifetime of the reference except:</p>\n<ul>\n<li>A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> [ ...]</li>\n<li>A temporary bound to a reference parameter in a function call (5.2.2) persists <strong>until the completion of\n  the full-expression containing the call</strong>.</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>The <code>5</code> persists until the completion of the full-expression containing the call, which is to say:</p>\n<pre><code>const int &amp;r = fun(5);\n// &lt;== no more 5\n</code></pre>\n", "LastActivityDate": "2015-05-29T00:17:10.717", "CommentCount": "0", "CreationDate": "2015-05-29T00:17:10.717", "ParentId": "30519148", "Score": "5", "OwnerUserId": "2069064"}, "30519148": {"ViewCount": "123", "Body": "<p>I can do something like this:</p>\n<pre><code>const int &amp;i = 5;\n</code></pre>\n<p>and have the lifetime of the temporary extended to the lifetime of <code>i</code>.</p>\n<p>But how about</p>\n<pre><code>const int &amp;fun (const int &amp;i){\n    return i;\n}\n\nint main () {\n    const int &amp;r = fun(5);\n    // Can I use r here?\n}\n</code></pre>\n<p>Is the lifetime of the proxy-5 still extended? Or is <code>r</code> a dangling reference?</p>\n", "AcceptedAnswerId": "30519155", "Title": "Lifetime of temporary passed through function by reference", "CreationDate": "2015-05-29T00:15:16.887", "LastActivityDate": "2015-05-29T00:41:53.560", "CommentCount": "7", "LastEditDate": "2015-05-29T00:41:53.560", "PostTypeId": "1", "Tags": "<c++>", "Id": "30519148", "AnswerCount": "2", "Score": "3", "OwnerUserId": "3002139", "ClosedDate": "2015-05-29T00:25:42.217", "LastEditorUserId": "3002139"}, "30519153": {"Id": "30519153", "PostTypeId": "2", "Body": "<p>No, I don't believe so. You bound <code>5</code> to the reference that's the argument to <code>fun</code>, so it lasts for as long as that argument lasts. The argument only lasts for the duration of the call to <code>fun</code>.</p>\n<p>The relevant standard text was explored in <a href=\"https://stackoverflow.com/a/14738884/560648\">this previous question</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-29T00:16:45.387", "Score": "4", "CreationDate": "2015-05-29T00:16:45.387", "ParentId": "30519148", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2017-05-23T10:31:25.210"}});