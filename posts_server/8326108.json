post_cb({"8326170": {"Id": "8326170", "PostTypeId": "2", "Body": "<p>7.1.3 paragraph 3 tells :  </p>\n<blockquote>\n<p id=\"so_8326108_8326170_0\">In a given scope, a typedef specifier shall not be used to redefine\n  the name of any type declared in thascope to refer to a different\n  type. \n  [Example: </p>\n</blockquote>\n<pre><code>class complex { /* ... */ }; \ntypedef int complex; //\n</code></pre>\n<blockquote>\n<p id=\"so_8326108_8326170_1\">error: redefinition</p>\n</blockquote>\n<p>Then it goes :  </p>\n<blockquote>\n<p id=\"so_8326108_8326170_2\">\u2014end example] Similarly, in a given scope, a class or enumeration\n  shall not be declared with the same name as a typedef-name that is\n  declared in that scope and refers to a type other than the class or\n  enumera- tion itself. [Example:</p>\n</blockquote>\n<pre><code>typedef int complex;\nclass complex { /* ... */ };\n</code></pre>\n<blockquote>\n<p id=\"so_8326108_8326170_3\">// error: redefinition</p>\n</blockquote>\n<p>This is your example.</p>\n", "LastActivityDate": "2011-11-30T12:45:41.417", "Score": "5", "CreationDate": "2011-11-30T12:45:41.417", "ParentId": "8326108", "CommentCount": "0", "OwnerUserId": "476681"}, "bq_ids": {"n4140": {"so_8326108_8326170_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 5413}, "so_8326108_8326170_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5412}}, "n3337": {"so_8326108_8326170_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 5208}, "so_8326108_8326170_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5207}}, "n4659": {"so_8326108_8326170_2": {"length": 17, "quality": 0.7727272727272727, "section_id": 6835}, "so_8326108_8326170_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6834}}}, "8326168": {"Id": "8326168", "PostTypeId": "2", "Body": "<p>Outside the function, you cannot declare a class with the same name as a <code>typedef</code> in the same namespace.</p>\n<p>Inside the function, you are declaring a new class, scoped inside the function. It is not the same as the anonymous class declared in the surrounding namespace. Within the function, this hides the declaration of the <code>typedef</code>.</p>\n", "LastActivityDate": "2011-11-30T12:45:35.490", "Score": "0", "CreationDate": "2011-11-30T12:45:35.490", "ParentId": "8326108", "CommentCount": "0", "OwnerUserId": "204847"}, "8326108": {"ViewCount": "131", "Body": "<p>According to ($ 3.4.4) A typedef name followed by a class-key is invalid. But I'm not sure about which scope? For example: In the following, compiler doesn't complain if elaborated specifier was used in a block such as inside a function.</p>\n<pre><code>typedef class { /* ... */ } S;\n\n// invalid\nclass S;\n\n// ok\nvoid foo() {\n   class S;\n}\n</code></pre>\n<p>Is it valid to declare a class inside a local scope with typedef-name, Why?</p>\n", "AcceptedAnswerId": "8326170", "Title": "Use of typedef name in elaborated specifier", "CreationDate": "2011-11-30T12:40:02.247", "Id": "8326108", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-11-30T12:45:41.417", "Score": "4", "OwnerUserId": "187543", "Tags": "<c++><g++><typedef>", "AnswerCount": "3"}, "8326164": {"Id": "8326164", "PostTypeId": "2", "Body": "<p>The problem is that you declared the class with no name, but with an alias (the typedef). Later, you used the same name to declare without defining another class (I know that was not the intention, but that's what the compiler understood) and its name clashed with the typedef. When you did the same thing inside foo(), that was a separated scope and so was acceptable. But notice that the 'class S' inside foo() is NOT the same type as that declared in the first line.</p>\n", "LastActivityDate": "2011-11-30T12:45:15.537", "Score": "2", "CreationDate": "2011-11-30T12:45:15.537", "ParentId": "8326108", "CommentCount": "0", "OwnerUserId": "8999"}});