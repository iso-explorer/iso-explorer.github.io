post_cb({"6436604": {"ParentId": "6436554", "CommentCount": "0", "Body": "<p>Yes, they are.</p>\n<p>Compiler fills the initialization with zeroes when not enough given per declared size.</p>\n", "OwnerUserId": "618400", "PostTypeId": "2", "Id": "6436604", "Score": "3", "CreationDate": "2011-06-22T07:49:53.753", "LastActivityDate": "2011-06-22T07:49:53.753"}, "6436554": {"CommentCount": "2", "ViewCount": "283", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2011-06-22T07:45:20.273", "LastActivityDate": "2011-06-22T07:58:36.737", "Title": "Value initialize aggregate", "AcceptedAnswerId": "6436615", "LastEditDate": "2011-06-22T07:54:47.297", "Id": "6436554", "Score": "3", "Body": "<p>Tried C++ standard, but couldn't figure it out. Are these equivalent?</p>\n<pre><code>double x[2] = {0.0, 0.0};\n</code></pre>\n<p>and</p>\n<pre><code>double x[2] = {};\n</code></pre>\n<p>How about these?</p>\n<pre><code>struct A {\n    double x[2];\n};\n\nA a = {0.0, 0.0};\n</code></pre>\n<p>and</p>\n<pre><code>A a = {};\n</code></pre>\n<p>Thank you!</p>\n", "Tags": "<c++><value-initialization>", "OwnerUserId": "638231", "AnswerCount": "2"}, "6436615": {"ParentId": "6436554", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The C++ standard says (8.5.1):</p>\n<blockquote>\n<p id=\"so_6436554_6436615_0\">If there are fewer initializers in the\n  list than there are members in the\n  aggregate, then each member not\n  explicitly initialized shall be\n  value-initialized</p>\n</blockquote>\n<p>and value-initialization of a double is to set it to <code>0.0</code>.</p>\n<p>So yes!  In C++ they are equivalent.</p>\n<p>[<em>I haven't had time to check the C99 standard.</em>]</p>\n", "OwnerUserId": "129570", "LastEditorUserId": "129570", "LastEditDate": "2011-06-22T07:58:36.737", "Id": "6436615", "Score": "4", "CreationDate": "2011-06-22T07:50:47.637", "LastActivityDate": "2011-06-22T07:58:36.737"}, "bq_ids": {"n4140": {"so_6436554_6436615_0": {"section_id": 3304, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_6436554_6436615_0": {"section_id": 3174, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_6436554_6436615_0": {"section_id": 4070, "quality": 0.7142857142857143, "length": 10}}}});