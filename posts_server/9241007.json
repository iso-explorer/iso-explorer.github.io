post_cb({"9241021": {"ParentId": "9241007", "PostTypeId": "2", "CommentCount": "14", "Body": "<blockquote>\n<p id=\"so_9241007_9241021_0\">I've tried some business with forward declarations but it didn't seem to work</p>\n</blockquote>\n<p>You didn't show us what \"didn't seem to work\", or in what way it \"didn't seem to work\", but there is <em>one</em> place in your code where you can replace a full type definition with a forward declaration, and two where you can't.</p>\n<h3>Where you can't</h3>\n<p>Non-static data members must be of complete types:</p>\n<blockquote>\n<p id=\"so_9241007_9241021_1\"><code>[C++11: 9.2/10]:</code> Non-<code>static</code> (9.4) data members shall not have incomplete types. In particular, a class <code>C</code> shall not contain a non-static member of class <code>C</code>, but it can contain a pointer or reference to an object of class <code>C</code>.</p>\n</blockquote>\n<p>So, the <code>B</code> in <code>A</code>and the <code>C::EnumType</code> in <code>B</code> cannot be forward declared.</p>\n<p><strong>BTW:</strong> This is not the case for <code>static</code> data members, which <em>can</em> be forward declared:</p>\n<blockquote>\n<p id=\"so_9241007_9241021_2\"><code>[C++11: 9.4.2/2]:</code> The declaration of a <code>static</code> data member in its class definition is not a definition and may be of an incomplete type other than cv-qualified <code>void</code>.</p>\n</blockquote>\n<h3>Where you can</h3>\n<p>However, the same is not true of the types of parameters in a member function declaration, so you can forward-declare the <code>A</code> in <code>C(A a)</code>:</p>\n<pre><code>class A;\n\nclass C {\npublic:\n    C(A a);\n    enum EnumType {\n        // enum stuff\n    };\n\n    // more stuff\n};\n</code></pre>\n<p><code>#include</code> as little into headers as you possibly can.</p>\n<h3>Why you shouldn't need to</h3>\n<blockquote>\n<p id=\"so_9241007_9241021_3\">I'm sure this is some design flaw on my part mainly because I come from a Java background</p>\n</blockquote>\n<p>I don't see that Java has anything to do with it but, yes, your design seems flawed in the way that these classes all depend on each other. Perhaps <code>C::EnumType</code> should instead be <code>B::EnumType</code>? Try to make your classes more self-contained. Forward declarations are all well and good, but life would be a lot easier if you solved the root problem of your design's tight coupling.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2012-02-11T15:05:12.920", "Id": "9241021", "Score": "2", "CreationDate": "2012-02-11T14:39:04.093", "LastActivityDate": "2012-02-11T15:05:12.920"}, "9241082": {"ParentId": "9241007", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>In C, you don't need to include A. Only the other two headers need their include directives you put there.</p>\n<pre><code>class A;\n\nclass C {\npublic:\n    C(A a);\n    enum EnumType {\n        // enum stuff\n    };\n\n    // more stuff\n};\n</code></pre>\n<p>Put the definition of <code>C::C</code> into a <code>.cpp</code> file where you can include <code>A.h</code> then. Only the definition of <code>C::C</code> needs its parameter type to have a definition.</p>\n", "OwnerUserId": "34509", "LastEditorUserId": "560648", "LastEditDate": "2012-02-11T14:57:43.657", "Id": "9241082", "Score": "3", "CreationDate": "2012-02-11T14:47:12.453", "LastActivityDate": "2012-02-11T14:57:43.657"}, "9241007": {"CommentCount": "1", "ViewCount": "1441", "PostTypeId": "1", "LastEditorUserId": "1711796", "CreationDate": "2012-02-11T14:37:16.247", "LastActivityDate": "2013-09-16T18:35:08.963", "Title": "Circular dependency fix", "AcceptedAnswerId": "9241021", "LastEditDate": "2013-09-16T18:35:08.963", "Id": "9241007", "Score": "1", "Body": "<p>I'm sure this is some design flaw on my part mainly because I come from a Java background. But it is what it is.</p>\n<p>Here's the setup in general:</p>\n<p>I have a class lets say <code>A</code> with <code>#include \"B.h\"</code></p>\n<pre><code>#include \"B.h\"\n\nclass A {\n\n    // stuff\nprivate:\n    B _b;\n\n}\n</code></pre>\n<p>Additionally I have class <code>B</code> with <code>#include \"C.h\"</code></p>\n<pre><code>#include \"C.h\"\n\nclass B {\n\n    // more stuff\n\nprivate:\n    C::EnumType _cEnum;\n}\n</code></pre>\n<p>And lastly I have class <code>C</code> with <code>#include \"A.h\"</code></p>\n<pre><code>#include \"A.h\"\n\nclass C {\npublic:\n    C(A a);\n    enum EnumType {\n        // enum stuff\n    };\n\n    // more stuff\n\n}\n</code></pre>\n<p>How can I fix this? I've tried some business with forward declarations but it didn't seem to work, though I don't claim that I did it correctly. Namespaces maybe? </p>\n", "Tags": "<c++><include><circular-dependency>", "OwnerUserId": "1047930", "AnswerCount": "3"}, "9241065": {"ParentId": "9241007", "CommentCount": "0", "Body": "<p>@Lightness says it - you don't need to include a.h into C's compilation unit if you declare class A using a 'forward' definition. Just put 'class A;' into the header which tells the compiler (and linker) to figure out what A is at a later time. The only disadvantage to this is that file C no longer knows what's inside of A, so you have to use references or pointers.</p>\n<p>An alternative is just to split C into 2 parts. Is there a reason the enum in embedded inside it, and not part of B? If C and B share the enum definitions, then it should be split into a separate class, or just be an top-level enum by itself.</p>\n<p>When I get circular definitions like this, I double check what it is that I'm doing. I always find that I've made things a bit too complicated for myself.</p>\n", "OwnerUserId": "13744", "PostTypeId": "2", "Id": "9241065", "Score": "0", "CreationDate": "2012-02-11T14:45:28.413", "LastActivityDate": "2012-02-11T14:45:28.413"}, "bq_ids": {"n4140": {"so_9241007_9241021_1": {"section_id": 5869, "quality": 0.9047619047619048, "length": 19}, "so_9241007_9241021_2": {"section_id": 5907, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_9241007_9241021_1": {"section_id": 5640, "quality": 0.9047619047619048, "length": 19}, "so_9241007_9241021_2": {"section_id": 5679, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_9241007_9241021_1": {"section_id": 7352, "quality": 0.9047619047619048, "length": 19}, "so_9241007_9241021_2": {"section_id": 7389, "quality": 0.7222222222222222, "length": 13}}}});