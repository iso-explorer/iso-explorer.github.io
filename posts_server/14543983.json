post_cb({"14543983": {"CommentCount": "1", "AcceptedAnswerId": "14544093", "PostTypeId": "1", "LastEditorUserId": "469408", "CreationDate": "2013-01-27T02:57:22.910", "LastActivityDate": "2013-01-27T13:12:47.677", "LastEditDate": "2013-01-27T03:12:50.133", "ViewCount": "655", "FavoriteCount": "0", "Title": "C++11 is_pod with GCC 4.6", "Id": "14543983", "Score": "6", "Body": "<p>Under the <a href=\"http://en.wikipedia.org/wiki/C++11#Modification_to_the_definition_of_plain_old_data\" rel=\"noreferrer\">relaxed definition of POD</a> in C++11, it is my understanding that the following struct is considered a POD:</p>\n<pre><code>template &lt;class T&gt;\nstruct Foo \n{\n    Foo()\n    { }\n\n    explicit Foo(T* obj) : m_data(obj)\n    { }\n\n    T* m_data;\n};\n</code></pre>\n<p>However, using GCC 4.6 and compiling with the <code>-std=c++0x</code> flag, if I say:</p>\n<pre><code>std::cout &lt;&lt; std::boolalpha &lt;&lt; std::is_pod&lt;Foo&lt;int&gt;&gt;::value &lt;&lt; std::endl;\n</code></pre>\n<p>It outputs:</p>\n<pre><code>false\n</code></pre>\n<p>Here is an <a href=\"http://ideone.com/7yTq46\" rel=\"noreferrer\"><strong>ideone link</strong></a> showing the full program.  (Note that ideone uses GCC 4.5)\n<br>\n<br/></br></p>\n<p>So, is my understanding of PODs in C++11 mistaken, or is GCC 4.6 simply not up-to-date in terms of C++11 compliance?</p>\n", "Tags": "<c++><gcc><c++11><pod>", "OwnerUserId": "469408", "AnswerCount": "2"}, "14545772": {"ParentId": "14543983", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Default declaring default constructor, makes Foo a POD.\ni.e.</p>\n<pre><code>Foo() = default;\nexplicit Foo(T* obj) : m_data(obj)\n{ }\n</code></pre>\n<p><a href=\"http://ideone.com/vJltmA\" rel=\"nofollow\">http://ideone.com/vJltmA</a></p>\n", "OwnerUserId": "463758", "LastEditorUserId": "463758", "LastEditDate": "2013-01-27T13:12:47.677", "Id": "14545772", "Score": "2", "CreationDate": "2013-01-27T08:37:27.880", "LastActivityDate": "2013-01-27T13:12:47.677"}, "bq_ids": {"n4140": {"so_14543983_14544093_1": {"section_id": 5850, "quality": 0.875, "length": 7}, "so_14543983_14544093_2": {"section_id": 369, "quality": 1.0, "length": 4}, "so_14543983_14544093_0": {"section_id": 5854, "quality": 0.95, "length": 19}}, "n3337": {"so_14543983_14544093_1": {"section_id": 5620, "quality": 1.0, "length": 8}, "so_14543983_14544093_2": {"section_id": 359, "quality": 1.0, "length": 4}, "so_14543983_14544093_0": {"section_id": 5624, "quality": 0.95, "length": 19}}, "n4659": {"so_14543983_14544093_1": {"section_id": 7329, "quality": 0.75, "length": 6}, "so_14543983_14544093_0": {"section_id": 7333, "quality": 0.95, "length": 19}}}, "14544093": {"ParentId": "14543983", "CommentCount": "3", "Body": "<p>A POD struct must be a trivial class (C++11 \u00a79[class]/10):</p>\n<blockquote>\n<p id=\"so_14543983_14544093_0\">A POD struct is a non-union class that is both a trivial class and a standard-layout class, and has no non-static data members of type non-POD struct, non-POD union (or array of such types).</p>\n</blockquote>\n<p>\u00a79[class]/6 defines what a trivial class is:</p>\n<blockquote>\n<p id=\"so_14543983_14544093_1\">A trivial class is a class that has a trivial default constructor and is trivially copyable.</p>\n</blockquote>\n<p>\u00a712.1[class.ctor]/5 defines what a trivial default constructor is.  It begins:</p>\n<blockquote>\n<p id=\"so_14543983_14544093_2\">A default constructor is trivial if it is not user-provided and...</p>\n</blockquote>\n<p>The default constructor of <code>Foo&lt;T&gt;</code> is user-provided and is therefore nontrivial.  Therefore, <code>Foo&lt;int&gt;</code> is not POD.  It is, however, standard layout.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "14544093", "Score": "6", "CreationDate": "2013-01-27T03:24:38.563", "LastActivityDate": "2013-01-27T03:24:38.563"}});