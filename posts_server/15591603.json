post_cb({"15591645": {"Id": "15591645", "PostTypeId": "2", "Body": "<p>You can't. The only way it <em>could</em> be achieved would be if your operator was a member of the vector. (For some reason member functions can be invoked on temporaries).</p>\n<p>As a nonmember function though what you're after is impossible</p>\n<p>Also it's not a very good idea to overload operators for STL types such as std::vector. I think what you're trying to accomplish is already present in <a href=\"http://www.boost.org/libs/assign/\" rel=\"nofollow\"><strong>boost assign</strong></a> library. I don't believe you can write it better than they have, so better use boost if you need this.</p>\n", "LastActivityDate": "2013-03-23T20:22:43.110", "CommentCount": "5", "CreationDate": "2013-03-23T20:22:43.110", "ParentId": "15591603", "Score": "2", "OwnerUserId": "469935"}, "15591741": {"Id": "15591741", "PostTypeId": "2", "Body": "<p>I haven't actually thought about the consequences of this properly, but it seems you could have an overload for rvalues:</p>\n<pre><code>std::vector&lt;std::string&gt; operator&lt;&lt;(std::vector&lt;std::string&gt;&amp;&amp; op, std::string str) {\n  op.push_back(std::move(str));\n  return op;\n}\n</code></pre>\n<p>Yes, it returns by value, but it will be optimized to a move due to \u00a712.8/32:</p>\n<blockquote>\n<p id=\"so_15591603_15591741_0\">When the criteria for elision of a copy operation are met or would be met save for the fact that the source object is a function parameter, and the object to be copied is designated by an lvalue, overload resolution to select the constructor for the copy is first performed as if the object were designated by an rvalue. </p>\n</blockquote>\n", "LastEditorUserId": "845092", "LastActivityDate": "2013-03-24T00:13:44.587", "Score": "2", "CreationDate": "2013-03-23T20:33:17.017", "ParentId": "15591603", "CommentCount": "0", "OwnerUserId": "150634", "LastEditDate": "2013-03-24T00:13:44.587"}, "15591603": {"ViewCount": "878", "Body": "<p>I want to add <code>operator&lt;&lt;</code> to <code>std::vector&lt;string&gt;</code>.\nThis is the operator</p>\n<pre><code>std::vector&lt;std::string&gt;&amp; operator&lt;&lt;(std::vector&lt;std::string&gt;&amp; op, std::string str) {\n    op.push_back(str);\n    return op;\n}\n</code></pre>\n<p>Now I can add elements to vector this way:</p>\n<pre><code>std::vector&lt;std::string&gt; vec;\nvec &lt;&lt; \"aaa\" &lt;&lt; \"bbb\" &lt;&lt; \"ccc\";\n</code></pre>\n<p>But the following code isn\u2019t compiled since cant pass temporary object by reference. </p>\n<pre><code>std::vector&lt;std::string&gt;() &lt;&lt; \"AAA\" &lt;&lt; \"BBB\";\n</code></pre>\n<p>How can I change the code to add elements to temporary vectors too?</p>\n<p>I have a function which accepts <code>const std::vector&lt;std::string&gt;&amp;</code> argument so I want to pass to it a vector in one line.</p>\n", "AcceptedAnswerId": "15591645", "Title": "Add operator<< to std::vector", "CreationDate": "2013-03-23T20:18:30.517", "Id": "15591603", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2013-03-24T00:13:44.587", "Score": "3", "OwnerUserId": "1356110", "Tags": "<c++><vector>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_15591603_15591741_0": {"length": 20, "quality": 0.6896551724137931, "section_id": 481}}, "n3337": {"so_15591603_15591741_0": {"length": 29, "quality": 1.0, "section_id": 472}}, "n4659": {"so_15591603_15591741_0": {"length": 16, "quality": 0.5517241379310345, "section_id": 504}}}, "15591643": {"Id": "15591643", "PostTypeId": "2", "Body": "<p>I'm afraid this is not possible. Also it's a bad idea to overload operator for any standard library class. The STL is not meant to be extended.</p>\n", "LastActivityDate": "2013-03-23T20:22:34.793", "CommentCount": "3", "CreationDate": "2013-03-23T20:22:34.793", "ParentId": "15591603", "Score": "-1", "OwnerUserId": "493122"}, "15592274": {"Id": "15592274", "PostTypeId": "2", "Body": "<p>This is a code, that helps you to do something similar to your idea (<a href=\"http://ideone.com/3lrTxW\" rel=\"nofollow\">http://ideone.com/3lrTxW</a>):</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n\ntypedef std::string String;\ntypedef std::vector&lt;String&gt; StringVector;\n\nclass StringVectorWrapper {\n    StringVector vector;\npublic:    \n    operator StringVector&amp;() {\n        return vector;        \n    }\n\n    StringVectorWrapper&amp; operator &lt;&lt; (const String&amp; str) {\n        vector.push_back(str);\n        return *this;\n    }\n};\n</code></pre>\n<p>And an example of use:</p>\n<pre><code>#include &lt;iostream&gt;    \n\nvoid printVector(const StringVector&amp; vector) {\n    for(StringVector::const_iterator it = vector.begin(); it != vector.end(); it++)\n        std::cout &lt;&lt; *it &lt;&lt; std::endl;\n}\n\nint main(void) {\n\n    StringVectorWrapper w;\n    w &lt;&lt; \"A\" &lt;&lt; \"B\";    \n    printVector(w);\n\n    printVector(StringVectorWrapper() &lt;&lt; \"Z\" &lt;&lt; \"W\");\n\n\n    return 0;\n}\n</code></pre>\n<p>But I would not use such a code in any of my programs.</p>\n", "LastEditorUserId": "945183", "LastActivityDate": "2013-03-23T21:36:15.150", "Score": "0", "CreationDate": "2013-03-23T21:28:05.730", "ParentId": "15591603", "CommentCount": "7", "OwnerUserId": "945183", "LastEditDate": "2013-03-23T21:36:15.150"}, "15591825": {"Id": "15591825", "PostTypeId": "2", "Body": "<p>Well... technically it is doable but in dirty style. Just for illustration (I'm not so sure it worth real implementation). Checked to work with GCC 4.7.2. I really don't know how this will behave on constant objects.</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nconst std::vector&lt;std::string&gt;&amp; operator &lt;&lt; (const std::vector&lt;std::string&gt;&amp; op, const std::string &amp;str) \n{\n    ((std::vector&lt;std::string&gt;&amp;) op).push_back(str);\n    return op;\n}\n\nint main()\n{\n    std::vector&lt;std::string&gt; a = std::vector&lt;std::string&gt;() &lt;&lt; \"A\" &lt;&lt; \"B\";\n    a &lt;&lt; \"AAA\";\n\n    std::cout &lt;&lt; \"size: \" &lt;&lt; a.size() &lt;&lt; std::endl;\n    for (std::vector&lt;std::string&gt;::iterator i = a.begin(); i != a.end(); ++i)\n    {\n        std::cout &lt;&lt; '\\t' &lt;&lt; *i &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "204665", "LastActivityDate": "2013-03-23T20:48:52.183", "Score": "1", "CreationDate": "2013-03-23T20:43:07.137", "ParentId": "15591603", "CommentCount": "4", "OwnerUserId": "204665", "LastEditDate": "2013-03-23T20:48:52.183"}});