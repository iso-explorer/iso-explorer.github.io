post_cb({"bq_ids": {"n4140": {"so_23942277_23942317_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 7019}}, "n3337": {"so_23942277_23942317_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 6765}}, "n4659": {"so_23942277_23942317_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 8516}}}, "23942277": {"ViewCount": "212", "Body": "<p>I have problem with my simple data base program in C++ (with inheritance and virtual func.)\nI've done class hirarchy which represents the object Weapon:</p>\n<pre><code>#ifndef Ammu_h\n#define Ammu_h\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n//////////HEADER FILE//////////////\nclass Weapon{                               \nprotected:                                      \n    string name;\n    char damage;\n\npublic: \n    virtual void show() = 0;\n    //virtual ~Weapon();        \n};\n\nclass WhiteArm: public Weapon{\nprotected:\n    double sharpness;\n    double defence;\n\n};\n\nclass Axe: public WhiteArm{\npublic:\n    Axe(string str, char dmg, double shrp, double def){\n        name = str;\n        damage = dmg;\n        sharpness = shrp;\n        defence = def;\n    };\n    void show(){\n        cout &lt;&lt; this-&gt;name &lt;&lt; this-&gt;damage &lt;&lt; this-&gt;sharpness &lt;&lt; this-&gt;defence &lt;&lt; endl;\n    };\n\n//class Sword: public WhiteArm{...};\n//class Club: public WhiteArm{...};\n\n};\n\n#endif\n</code></pre>\n<p>First of all im not quite sure if my implementation is proper.</p>\n<ol>\n<li><p>My main problem is that when I add a virtual destructor, I get error: <code>LNK2001: unresolved external symbol \"public: __thiscall Weapon::~Weapon(void)\"</code>\nI thought it is necessary to make the destructor virtual when the base class contains virtual methods.</p></li>\n<li><p>Is it good to make constructors at the end of hierarchy? (like me, upper)</p></li>\n</ol>\n<p>I will appreciate every suggestion to my code\nThanks in advance</p>\n", "AcceptedAnswerId": "23942317", "Title": "Virtual destructor in simple program causes compiler error: \"unresolved external symbol\"", "CreationDate": "2014-05-29T20:23:21.320", "LastActivityDate": "2016-08-22T09:45:29.540", "CommentCount": "0", "LastEditDate": "2016-08-22T09:45:29.540", "PostTypeId": "1", "Tags": "<c++><inheritance><polymorphism><virtual><destructor>", "Id": "23942277", "AnswerCount": "1", "Score": "0", "OwnerUserId": "3689007", "ClosedDate": "2014-05-29T20:27:13.973", "LastEditorUserId": "1370085"}, "23942317": {"Id": "23942317", "PostTypeId": "2", "Body": "<p>Your virtual destructor still needs to have an implementation, even if you mean for it to be pure virtual. I usually write them using this odd-looking syntax: <code>virtual ~Weapon() = 0 {}</code>.</p>\n<p>But that evidently doesn't work with some compilers (all compilers other than Microsoft's?), and rightly so (C++11 draft \u00a7 10.4/2):</p>\n<blockquote>\n<p id=\"so_23942277_23942317_0\">[ Note: A function declaration cannot provide both a pure-specifier\n  and a definition \u2014end note ] [ Example:</p>\n</blockquote>\n<pre><code> struct C\n {\n    virtual void f() = 0 { }; // ill-formed\n };\n</code></pre>\n<p>Instead, you can either leave out the <code>= 0</code> or locate the body outside the class definition.</p>\n", "LastEditorUserId": "3549027", "LastActivityDate": "2014-05-29T20:55:38.353", "Score": "3", "CreationDate": "2014-05-29T20:25:30.587", "ParentId": "23942277", "CommentCount": "9", "OwnerUserId": "3549027", "LastEditDate": "2014-05-29T20:55:38.353"}});