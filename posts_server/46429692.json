post_cb({"46429692": {"CommentCount": "9", "AcceptedAnswerId": "46429926", "ClosedDate": "2017-09-26T15:10:41.627", "CreationDate": "2017-09-26T14:50:38.353", "LastActivityDate": "2017-09-26T15:07:13.863", "PostTypeId": "1", "ViewCount": "223", "FavoriteCount": "1", "Title": "Explicitly invoking `int` destructor - why is a type alias required?", "Id": "46429692", "Score": "6", "Body": "<p>The following program...</p>\n<pre><code>int main()\n{\n    int{1}.~int();\n}\n</code></pre>\n<p>does not compile on <em>(see <a href=\"https://godbolt.org/g/HCsgAA\" rel=\"noreferrer\">conformance viewer</a>)</em>:</p>\n<ul>\n<li><p>clang++ trunk, with <code>-std=c++1z</code></p></li>\n<li><p>g++ trunk, with <code>-std=c++1z</code></p></li>\n<li><p>CL 19 2017 </p></li>\n</ul>\n<hr>\n<p>Introducing a <em>type alias</em> for <code>int</code>...</p>\n<pre><code>int main()\n{\n    using X = int;\n    int{1}.~X();\n}\n</code></pre>\n<p>...makes the program valid on all previously mentioned compilers, without warnings <em>(see <a href=\"https://godbolt.org/g/Ktnhmt\" rel=\"noreferrer\">conformance viewer</a>)</em>.</p>\n<p><strong>Why is a type alias required when invoking <code>int</code>'s destructor?</strong> Is this because <code>int</code> is not a valid grammar element for a destruction invocation?</p>\n</hr>", "Tags": "<c++><language-lawyer><destructor><c++1z><primitive-types>", "OwnerUserId": "598696", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46429692_46429926_0": {"section_id": 5984, "quality": 0.875, "length": 7}, "so_46429692_46429926_1": {"section_id": 5437, "quality": 1.0, "length": 5}, "so_46429692_46429926_2": {"section_id": 6002, "quality": 0.90625, "length": 29}}, "n3337": {"so_46429692_46429926_0": {"section_id": 5752, "quality": 0.875, "length": 7}, "so_46429692_46429926_1": {"section_id": 5232, "quality": 1.0, "length": 5}, "so_46429692_46429926_2": {"section_id": 5770, "quality": 0.90625, "length": 29}}, "n4659": {"so_46429692_46429926_2": {"section_id": 7501, "quality": 0.90625, "length": 29}, "so_46429692_46429926_1": {"section_id": 6864, "quality": 1.0, "length": 5}, "so_46429692_46429926_0": {"section_id": 7484, "quality": 0.875, "length": 7}}}, "46429926": {"ParentId": "46429692", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It works because the grammar didn't make provisions for built-in types, but it did make provisions for aliases:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.post#1\" rel=\"noreferrer\">[expr.post]/1</a>:</p>\n<blockquote id=\"so_46429692_46429926_0\">\n<pre><code>postfix-expression:\n    postfix-expression . pseudo-destructor-name\n    postfix-expression -&gt; pseudo-destructor-name\n\npseudo-destructor-name:\n    ~ type-name\n    ~ decltype-specifier\n</code></pre>\n</blockquote>\n<p>And <a href=\"https://timsong-cpp.github.io/cppwp/n4659/dcl.type.simple#1\" rel=\"noreferrer\">[dcl.type.simple]/1</a>:</p>\n<blockquote id=\"so_46429692_46429926_1\">\n<pre><code>type-name:\n  class-name\n  enum-name\n  typedef-name\n  simple-template-id\n</code></pre>\n</blockquote>\n<p>You can imagine what each variable under <code>type-name</code> stands for. For the case at hand <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.pseudo#1\" rel=\"noreferrer\">[expr.pseudo]/1</a> specifies that it is just a <code>void</code> expression:</p>\n<blockquote>\n<p id=\"so_46429692_46429926_2\">The use of a pseudo-destructor-name after a dot . or arrow -&gt; operator\n  represents the destructor for <strong>the non-class type denoted by type-name\n  or decltype-specifier. The result shall only be used as the operand\n  for the function call operator (), and the result of such a call has\n  type void. The only effect is the evaluation of the postfix-expression\n  before the dot or arrow.</strong></p>\n</blockquote>\n<p>The interesting thing to note, is that you should be able do that without an alias (if you have a named object), because the pseudo destructor call also works with a <code>decltype</code> specifier:</p>\n<pre><code>auto a = int{1};\na.~decltype(a)();\n</code></pre>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-09-26T15:07:13.863", "Id": "46429926", "Score": "9", "CreationDate": "2017-09-26T15:02:00.050", "LastActivityDate": "2017-09-26T15:07:13.863"}});