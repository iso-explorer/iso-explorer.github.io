post_cb({"bq_ids": {"n4140": {"so_42004877_42007403_0": {"length": 6, "quality": 1.0, "section_id": 3161}, "so_42004877_42004877_4": {"length": 8, "quality": 1.0, "section_id": 3165}, "so_42004877_42007403_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3161}, "so_42004877_42004877_7": {"length": 18, "quality": 0.9473684210526315, "section_id": 3159}, "so_42004877_42004877_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3164}, "so_42004877_42004877_10": {"length": 42, "quality": 0.7241379310344828, "section_id": 3161}}, "n3337": {"so_42004877_42007403_0": {"length": 6, "quality": 1.0, "section_id": 3034}, "so_42004877_42004877_4": {"length": 8, "quality": 1.0, "section_id": 3038}, "so_42004877_42007403_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3034}, "so_42004877_42004877_10": {"length": 42, "quality": 0.7241379310344828, "section_id": 3034}, "so_42004877_42004877_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3037}, "so_42004877_42004877_7": {"length": 18, "quality": 0.9473684210526315, "section_id": 3032}}, "n4659": {"so_42004877_42007403_0": {"length": 6, "quality": 1.0, "section_id": 3923}, "so_42004877_42004877_4": {"length": 8, "quality": 1.0, "section_id": 3927}, "so_42004877_42007403_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3923}, "so_42004877_42004877_10": {"length": 41, "quality": 0.7068965517241379, "section_id": 3923}, "so_42004877_42004877_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3926}, "so_42004877_42004877_7": {"length": 18, "quality": 0.9473684210526315, "section_id": 3921}}}, "42007403": {"Id": "42007403", "PostTypeId": "2", "Body": "<p>The two key statements here are:</p>\n<blockquote>\n<p id=\"so_42004877_42007403_0\">as if in a new thread of execution represented by a <code>thread</code> object</p>\n<p id=\"so_42004877_42007403_1\">The <code>thread</code> object is stored in the shared state and affects the behavior of any asynchronous return objects that reference that state.</p>\n</blockquote>\n<p>\"As if\" means it must behave exactly as if it had created a <code>std::thread</code> object for this function. Which means that all side effects of the creation of a <code>std::thread</code> must also happen.</p>\n<p>That being said, if you combine <code>launch::async</code> with <code>launch::deferred</code>, then the implementation decides whether to launch a new thread or defer it to an existing one. So it's only <code>launch::async</code> alone that requires a new thread.</p>\n", "LastActivityDate": "2017-02-02T16:29:15.313", "CommentCount": "2", "CreationDate": "2017-02-02T16:29:15.313", "ParentId": "42004877", "Score": "5", "OwnerUserId": "734069"}, "42004877": {"ViewCount": "434", "Body": "<p>Does standard C++11 guarantee that <code>std::async(std::launch::async, func)</code> launches function in separate thread?</p>\n<p>Working Draft, Standard for Programming Language C++ 2016-07-12: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf</a></p>\n<p><strong>1. On the one hand</strong>, C++11-Standard says that if the thread can not be created, then there is an error. This ensures the creation of a new thread (in the absence of errors).</p>\n<blockquote>\n<p id=\"so_42004877_42004877_0\">\u00a7 30.6.8 </p>\n<p id=\"so_42004877_42004877_1\">6</p>\n<p id=\"so_42004877_42004877_2\"><strong>Throws: system_error if</strong> policy == launch::async and the\n  implementation is <strong>unable to start a new thread.</strong></p>\n<p id=\"so_42004877_42004877_3\">7 Error conditions:</p>\n<p id=\"so_42004877_42004877_4\">(7.1) \u2014 <strong>resource_unavailable_try_again \u2014 if</strong> policy == launch::async\n  and the system is <strong>unable to start a new thread</strong>.</p>\n</blockquote>\n<p>And documentation says: <a href=\"http://en.cppreference.com/w/cpp/thread/launch\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/thread/launch</a></p>\n<blockquote>\n<p id=\"so_42004877_42004877_5\">std::launch::async    a new thread is launched to execute the task\n  asynchronously</p>\n</blockquote>\n<p><strong>2. On the other hand</strong>, it is written that the thread can be <strong>potentially</strong> created. Those, is not necessary that thread should be created.</p>\n<blockquote>\n<p id=\"so_42004877_42004877_6\">\u00a7 30.6.8 </p>\n<p id=\"so_42004877_42004877_7\">1 The function template async provides a mechanism to launch a\n  function <strong>potentially in a new thread</strong> and provides the result of the\n  function in a future object with which it shares a shared state.</p>\n</blockquote>\n<p>And here written <strong>as if in a new thread</strong>, does it mean not necessary in new separate thread?</p>\n<blockquote>\n<p id=\"so_42004877_42004877_8\">\u00a7 30.6.8 </p>\n<p id=\"so_42004877_42004877_9\">(3.1)</p>\n<p id=\"so_42004877_42004877_10\">\u2014 if policy &amp; launch::async is non-zero \u2014 calls INVOKE (DECAY_COPY\n  (std::forward(f)), DECAY_COPY (std::forward(args))...)\n  (20.14.2, 30.3.1.2) <strong>as if in a new thread</strong> of execution\n  represented by a thread object with the calls to DECAY_COPY () being\n  evaluated in the thread that called async. Any return value is stored\n  as the result in the shared state. Any exception propagated from the\n  execution of INVOKE (DECAY_COPY (std::forward(f)), DECAY_COPY\n  (std::forward(args))...) is stored as the exceptional result in\n  the shared state. The thread object is stored in the shared state and\n  affects the behavior of any asynchronous return objects that reference\n  that state.</p>\n</blockquote>\n<p>When used <code>std::async(std::launch::async, func)</code> then does standard C++11 guarantee that <code>func()</code> will be executed in separate thread, or it can be executed in the same thread that called async?</p>\n", "AcceptedAnswerId": "42007403", "Title": "Does standard C++11 guarantee that std::async(std::launch::async, func) launches func in separate thread?", "CreationDate": "2017-02-02T14:31:53.180", "Id": "42004877", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-02-02T15:34:11.577", "LastEditorUserId": "1558037", "LastActivityDate": "2017-02-02T16:29:15.313", "Score": "8", "OwnerUserId": "1558037", "Tags": "<c++><multithreading><c++11><asynchronous><c++14>", "AnswerCount": "1"}});