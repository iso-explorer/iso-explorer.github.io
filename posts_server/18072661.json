post_cb({"bq_ids": {"n4140": {"so_18072661_18072866_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 4691}}, "n3337": {"so_18072661_18072866_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 4500}}, "n4659": {"so_18072661_18072866_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 6085}}}, "18072866": {"Id": "18072866", "PostTypeId": "2", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/types\" rel=\"nofollow\">cppreference</a> :</p>\n<blockquote>\n<p id=\"so_18072661_18072866_0\">Type traits defines an <strong>compile-time</strong> template-based interface to query or modify the properties of types.</p>\n</blockquote>\n<p>In your case, <code>TM&lt;true&gt;</code> and <code>TM&lt;false</code> are treated as two different types. <code>TM&lt;var&gt;::MType</code> will not let the compiler deduce the type. It will only be available at runtime, which is not correct. How the compiler can deduce which of the two types is it ?</p>\n<hr>\n<p>From the standard :</p>\n<blockquote>\n<p id=\"so_18072661_18072866_1\"><strong>20.9 Metaprogramming and type traits                  [meta]</strong></p>\n<p id=\"so_18072661_18072866_2\">This subclause describes components used by C++ programs, particularly in templates, to support the widest possible range of types, optimise template code usage, detect type related user errors, and perform type inference and transformation at <strong>compile time</strong>. [...]</p>\n</blockquote>\n</hr>", "LastEditorUserId": "1394283", "LastActivityDate": "2013-08-06T08:06:21.870", "Score": "2", "CreationDate": "2013-08-06T06:11:22.230", "ParentId": "18072661", "CommentCount": "0", "OwnerUserId": "1394283", "LastEditDate": "2013-08-06T08:06:21.870"}, "18072821": {"Id": "18072821", "PostTypeId": "2", "Body": "<p>In C++, the compiler creates source code for all used template arguments from the templates. This is done during compilation. The created source code is then compiled as if it was regular source code.</p>\n<p>Thus, in your case, <code>TM&lt;true&gt;</code> and <code>TM&lt;false&gt;</code> are treated as completely different types. If you write something like <code>TM&lt;var&gt;::MType</code> the compiler has no way of finding out which of the two types it is because the information will not be available before runtime. </p>\n", "LastActivityDate": "2013-08-06T06:06:44.403", "CommentCount": "0", "CreationDate": "2013-08-06T06:06:44.403", "ParentId": "18072661", "Score": "3", "OwnerUserId": "2649218"}, "18072661": {"ViewCount": "181", "Body": "<p>I am learning c++ template and want to apply the so-called template trait to select data type. I find some code online and make it work for my case</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate &lt;bool T&gt; struct TM;\ntemplate &lt;&gt; struct TM&lt;true&gt;  {typedef double MType;};\ntemplate &lt;&gt; struct TM&lt;false&gt; {typedef int MType;};\n\nint main(int argc, char *argv[])\n{\n  TM&lt;true&gt;::MType x;\n  TM&lt;false&gt;::MType y;\n\n  cout &lt;&lt; sizeof(x) &lt;&lt; endl;\n  cout &lt;&lt; sizeof(y) &lt;&lt; endl; \n  return 0;\n}\n</code></pre>\n<p>It works pretty good. However, it seems that this only work for constant boolean instead of variable, so the following code doesn't work</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate &lt;bool T&gt; struct TM;\ntemplate &lt;&gt; struct TM&lt;true&gt;  {typedef double MType;};\ntemplate &lt;&gt; struct TM&lt;false&gt; {typedef int MType;};\n\nint main(int argc, char *argv[])\n{\n  bool var=true;\n\n  TM&lt;var&gt;::MType w;\n\n  if (var) TM&lt;true&gt;::MType z;\n  else TM&lt;false&gt;::MType z;\n\n  cout &lt;&lt; sizeof(w) &lt;&lt; endl;\n  cout &lt;&lt; sizeof(z) &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>So is that true that template trait doesn't work the variable defined in run time? Thanks</p>\n", "AcceptedAnswerId": "18072821", "Title": "about using template trait in c++ to select data type", "CreationDate": "2013-08-06T05:52:52.807", "Id": "18072661", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-08-06T08:06:21.870", "Score": "3", "OwnerUserId": "1285419", "Tags": "<c++><templates>", "AnswerCount": "2"}});