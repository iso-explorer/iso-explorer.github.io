post_cb({"bq_ids": {"n4140": {"so_27708629_29457433_2": {"length": 4, "quality": 1.0, "section_id": 2500}, "so_27708629_29457433_6": {"length": 11, "quality": 1.0, "section_id": 2500}, "so_27708629_29457433_7": {"length": 17, "quality": 0.8947368421052632, "section_id": 6343}, "so_27708629_29457433_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 2500}, "so_27708629_29457433_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 2500}, "so_27708629_29457433_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 6185}}, "n3337": {"so_27708629_29457433_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 2485}, "so_27708629_29457433_2": {"length": 4, "quality": 1.0, "section_id": 2485}, "so_27708629_29457433_6": {"length": 11, "quality": 1.0, "section_id": 2485}, "so_27708629_29457433_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 2485}, "so_27708629_29457433_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 5946}}, "n4659": {"so_27708629_29457433_2": {"length": 4, "quality": 1.0, "section_id": 3233}, "so_27708629_29457433_6": {"length": 11, "quality": 1.0, "section_id": 3233}, "so_27708629_29457433_7": {"length": 17, "quality": 0.8947368421052632, "section_id": 7852}, "so_27708629_29457433_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 3233}, "so_27708629_29457433_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 3233}, "so_27708629_29457433_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7687}}}, "29457433": {"Id": "29457433", "PostTypeId": "2", "Body": "<p>I can't give a good reason for why <code>abs</code> couldn't be <code>constexpr</code> and apparently neither can <code>gcc</code>.  When I use <code>gcc 4.9.2</code> with this program:</p>\n<pre><code>#include &lt;cstdlib&gt;\n#include &lt;cinttypes&gt;\n#include &lt;cassert&gt;\n\nconstexpr intmax_t abs3 = std::abs(3);\nconstexpr intmax_t absneg3 = std::abs(-3);\nint main()\n{\n    assert(abs3 == absneg3);\n}\n</code></pre>\n<p>it compiles and runs to completion with no warnings or errors. You can <a href=\"http://coliru.stacked-crooked.com/a/d249d36a109123cf\" rel=\"nofollow\">try it here</a>.  However, <code>clang++</code> (version 3.5.0) throws a compile-time error:</p>\n<blockquote>\n<p id=\"so_27708629_29457433_0\">abs.cpp:6:20: error: constexpr variable 'abs3' must be initialized by a constant expression.</p>\n</blockquote>\n<p>I think that <code>clang++</code> actually gets it right here, because in section 27.9.2 [c.files] of the 2011 standard, it says:</p>\n<blockquote>\n<p id=\"so_27708629_29457433_1\">The contents of header  are the same as the Standard C Library header , with the following changes:</p>\n<p id=\"so_27708629_29457433_2\">\u2014 the header  includes the header  instead of , and</p>\n<p id=\"so_27708629_29457433_3\">\u2014 if and only if the type intmax_t designates an extended integer type (3.9.1), the following function\n  signatures are added:</p>\n<p id=\"so_27708629_29457433_4\">intmax_t abs(intmax_t);</p>\n<p id=\"so_27708629_29457433_5\">imaxdiv_t div(intmax_t, intmax_t);</p>\n<p id=\"so_27708629_29457433_6\">which shall have the same semantics as the function signatures intmax_t imaxabs(intmax_t) and\n  imaxdiv_t imaxdiv(intmax_t, intmax_t), respectively.</p>\n</blockquote>\n<p>In the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">current working draft</a> of the C++ standard, as in the published 2014 version, it says in section 17.6.5.6 [constexpr.functions]:</p>\n<blockquote>\n<p id=\"so_27708629_29457433_7\">This standard explicitly requires that certain standard library functions are constexpr (7.1.5). An implementation shall not declare any standard library function signature as constexpr except for those where it\n  is explicitly required.</p>\n</blockquote>\n<p>So the result, for now, is that these functions are still not <code>constexpr</code> according to the standard (which you knew) but they could be, as demonstrated by the <code>gcc</code> compiler.</p>\n", "LastActivityDate": "2015-04-05T12:47:48.193", "CommentCount": "1", "CreationDate": "2015-04-05T12:47:48.193", "ParentId": "27708629", "Score": "4", "OwnerUserId": "3191481"}, "29457755": {"Id": "29457755", "PostTypeId": "2", "Body": "<p>The simple explanation is probably that nobody went through every function listed as part of the standard library, and updated the entry to make it <code>constexpr</code>.</p>\n<p>Updating a standard is a process involving human effort to propose changes and get those proposals reviewed and accepted.   And that means, when a new feature is added - and <code>constexpr</code> is a new feature - not everything else is automagically updated to use that feature.    This particular case may well be updated in a future evolution of the standard - if some people take on the - often thankless - task of proposing the set of changes, some other people take on the task of reviewing it, and convincing those with voting power on the committee to accept it.</p>\n", "LastActivityDate": "2015-04-05T13:23:01.323", "CommentCount": "0", "CreationDate": "2015-04-05T13:23:01.323", "ParentId": "27708629", "Score": "1", "OwnerUserId": "4706785"}, "27708629": {"ViewCount": "1072", "Body": "<p>In <code>&lt;cinttypes&gt;</code>, since C++11, there are <a href=\"http://en.cppreference.com/w/cpp/numeric/math/abs\" rel=\"noreferrer\">the following two</a> overloads:</p>\n<pre><code>std::intmax_t abs( std::intmax_t n );\nstd::intmax_t imaxabs( std::intmax_t n );\n</code></pre>\n<p>Why aren't those two functions <code>constexpr</code>?</p>\n", "AcceptedAnswerId": "29457433", "Title": "Why isn't abs constexpr?", "CreationDate": "2014-12-30T16:05:00.070", "Id": "27708629", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-05T23:57:31.673", "Score": "12", "OwnerUserId": "493122", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "2"}});