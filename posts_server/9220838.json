post_cb({"9220838": {"ViewCount": "2454", "Body": "<p>I have an integer 1 and i want to display it as a character '1' in C++. So far I have only managed to convert it from say integer 65 to character 'A'.\nHow do you stop this ?</p>\n", "AcceptedAnswerId": "9220852", "Title": "How to display an integer literally as a character", "CreationDate": "2012-02-10T00:00:05.887", "Id": "9220838", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-02-10T00:20:57.497", "Score": "2", "OwnerUserId": "1199397", "Tags": "<c++><char><int>", "AnswerCount": "4"}, "9220916": {"Id": "9220916", "PostTypeId": "2", "Body": "<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint i = 3;\nchar buffer [25];\nitoa (i, buffer, 10);\nprintf (\"Integer: %s\\n\",buffer);\n</code></pre>\n<p>Integer: 3</p>\n", "LastActivityDate": "2012-02-10T00:10:37.977", "Score": "1", "CreationDate": "2012-02-10T00:10:37.977", "ParentId": "9220838", "CommentCount": "2", "OwnerUserId": "1172326"}, "9220943": {"Id": "9220943", "PostTypeId": "2", "Body": "<p>You did just ask about printing an integer, so the really simple c++ answer is:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n  int value = 1;\n  std::cout &lt;&lt; value &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "240313", "LastActivityDate": "2012-02-10T00:20:57.497", "Score": "0", "CreationDate": "2012-02-10T00:13:55.733", "ParentId": "9220838", "CommentCount": "8", "LastEditDate": "2012-02-10T00:20:57.497", "OwnerUserId": "240313"}, "9220913": {"Id": "9220913", "PostTypeId": "2", "Body": "<p>Use the stringstream.</p>\n<pre><code>int blah = 356;\nstringstream ss;\nstring text;\n\nss &lt;&lt; blah;\nss &gt;&gt; text;\n</code></pre>\n<p>Now <code>text</code> contains <code>\"356\"</code>(without quotes). Make sure to include the header files and use the namespace if you are going to copy my code:</p>\n<pre><code>#include &lt;sstream&gt; //For stringstream\n#include &lt;string&gt;\n\nusing namespace std;\n</code></pre>\n", "LastActivityDate": "2012-02-10T00:09:57.893", "Score": "2", "CreationDate": "2012-02-10T00:09:57.893", "ParentId": "9220838", "CommentCount": "0", "OwnerUserId": "1120400"}, "9220852": {"Id": "9220852", "PostTypeId": "2", "Body": "<pre><code>int theDigit = 1;\nchar ch = theDigit+'0';\n</code></pre>\n<p>This works because it's guaranteed<sup>1</sup> that the sequence of characters <code>'0'</code>...<code>'9'</code> is contiguous, so if you add your number to '0' you get the corresponding character. Obviously this works only for single digits (if <code>theDigit</code> is e.g. 20 you'll get an unrelated character), if you need to convert to a string a whole number you'll need <a href=\"http://en.cppreference.com/w/cpp/io/c/fprintf\" rel=\"nofollow\"><code>snprintf</code></a> (in C) or <a href=\"http://www.cplusplus.com/reference/iostream/ostringstream/\" rel=\"nofollow\">string streams</a> (in C++).</p>\n<hr/>\n<ol>\n<li>C++11, [lex.charset] \u00b63: </li>\n</ol>\n<blockquote>\n<p id=\"so_9220838_9220852_0\">In both the source and execution basic character sets, the value of each character after 0 in the above list of decimal digits shall be one greater than the value of the previous.</p>\n</blockquote>\n<p>By the way, I suppose that they didn't mandate contiguity also in the alphabetical characters just because of EBCDIC.</p>\n", "LastEditorUserId": "214671", "LastActivityDate": "2012-02-10T00:12:43.610", "Score": "5", "CreationDate": "2012-02-10T00:01:21.347", "ParentId": "9220838", "CommentCount": "4", "LastEditDate": "2012-02-10T00:12:43.610", "OwnerUserId": "214671"}, "bq_ids": {"n4140": {"so_9220838_9220852_0": {"length": 19, "quality": 1.0, "section_id": 5316}}, "n3337": {"so_9220838_9220852_0": {"length": 19, "quality": 1.0, "section_id": 5113}}, "n4659": {"so_9220838_9220852_0": {"length": 19, "quality": 1.0, "section_id": 6740}}}});