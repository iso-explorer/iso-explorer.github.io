post_cb({"bq_ids": {"n4140": {"so_48402633_48403514_1": {"length": 43, "quality": 0.8775510204081632, "section_id": 7043}, "so_48402633_48403034_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 274}, "so_48402633_48403514_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 7041}}, "n3337": {"so_48402633_48403514_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 6786}, "so_48402633_48403034_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 265}, "so_48402633_48403514_1": {"length": 43, "quality": 0.8775510204081632, "section_id": 6788}}, "n4659": {"so_48402633_48403514_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 8538}, "so_48402633_48403034_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 281}, "so_48402633_48403514_1": {"length": 43, "quality": 0.8775510204081632, "section_id": 8540}}}, "48403023": {"Id": "48403023", "PostTypeId": "2", "Body": "<p>This will work without inline:</p>\n<p><strong>file1.h</strong></p>\n<pre><code>template&lt;typename T&gt; void func(T&amp; val);\ntemplate&lt;&gt; void func&lt;mytype&gt;(mytype&amp; val);\n</code></pre>\n<p><strong>file1.cpp</strong></p>\n<pre><code>template&lt;&gt; void func&lt;int&gt;(int&amp; ) {}\n</code></pre>\n<p>But if you define template specialization in header file, than you may violate <a href=\"https://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"noreferrer\">ODR</a></p>\n", "LastActivityDate": "2018-01-23T13:33:27.633", "CommentCount": "0", "CreationDate": "2018-01-23T13:33:27.633", "ParentId": "48402633", "Score": "7", "OwnerUserId": "312896"}, "48403514": {"Id": "48403514", "PostTypeId": "2", "Body": "<p>According to clause 3.2:4 in the c++ standard </p>\n<blockquote>\n<p id=\"so_48402633_48403514_0\">Every program shall contain exactly one definition of every non-inline\n  function or variable that is odr-used in that program; no diagnostic\n  required. The definition can appear explicitly in the program, it can\n  be found in the standard or a user-defined library, or (when\n  appropriate) it is implicitly defined (see 12.1, 12.4 and\n  12.8). An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<p>This explains why there is a link-time error when the specialized function is not declared inline. The program will contain multiple definitions of the specialized function, one from each module including the .tpp-file and this breaks the condition from the standard. When declaring the specialized function <code>inline</code> it will make the function satisfy the second part of the same clause, i.e. that an inline function must be defined in each module using the function.</p>\n<p>When the parameterized function is not specialized it is covered by clause 3.2:6:</p>\n<blockquote>\n<p id=\"so_48402633_48403514_1\">There can be more than one definition of a class type (Clause 9),\n  enumeration type (7.2), inline function with external linkage (7.1.2),\n  class template (Clause 14), non-static function template (14.5.6),\n  static data member of a class template (14.5.1.3), member function of\n  a class template (14.5.1.1), or template specialization for which some\n  template parameters are not specified (14.7, 14.5.5) in a program\n  provided that each definition appears in a different translation unit</p>\n</blockquote>\n<p>This clause states that it is OK for multiple definitions of the same template function as long as at least one of the template parameters is not specified in the code. This is to allow the decision on whether the parameterized function should be instantiated in a module to be made on local information only. </p>\n", "LastActivityDate": "2018-01-23T13:58:53.293", "CommentCount": "0", "CreationDate": "2018-01-23T13:58:53.293", "ParentId": "48402633", "Score": "6", "OwnerUserId": "3668462"}, "48403034": {"Id": "48403034", "PostTypeId": "2", "Body": "<p>Well, if you want the standard quote on this, that'd be over at <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.expl.spec#12\" rel=\"noreferrer\">[temp.expl.spec]/12</a></p>\n<blockquote>\n<p id=\"so_48402633_48403034_0\">An explicit specialization of a function or variable template is\n  inline only if it is declared with the inline specifier or defined as\n  deleted, and independently of whether its function or variable\n  template is inline. [\u2009Example:</p>\n<pre><code>template&lt;class T&gt; void f(T) { /* ... */ }\ntemplate&lt;class T&gt; inline T g(T) { /* ... */ }\n\ntemplate&lt;&gt; inline void f&lt;&gt;(int) { /* ... */ }   // OK: inline\ntemplate&lt;&gt; int g&lt;&gt;(int) { /* ... */ }           // OK: not inline \n</code></pre>\n<p id=\"so_48402633_48403034_1\">\u2014\u2009end example\u2009]</p>\n</blockquote>\n<p>That's why you <em>have</em> to do it. It's independent because I believe doing otherwise would be needlessly restrictive, as <a href=\"https://stackoverflow.com/a/48403023/817643\">Yola</a> demonstrated.</p>\n", "LastActivityDate": "2018-01-23T13:33:57.220", "CommentCount": "0", "CreationDate": "2018-01-23T13:33:57.220", "ParentId": "48402633", "Score": "10", "OwnerUserId": "817643"}, "48402633": {"ViewCount": "779", "Body": "<p>I am referring to this answer:</p>\n<p><a href=\"https://stackoverflow.com/a/4447057/930315\">https://stackoverflow.com/a/4447057/930315</a></p>\n<p>I ran into a similar issue as the OP of the cited question,\nhaving a function</p>\n<pre><code>template&lt;typename T&gt;\nvoid func(T&amp; val);\n</code></pre>\n<p>and its specialization</p>\n<pre><code>template&lt;&gt;\nvoid func&lt;mytype&gt;(mytype&amp; val);\n</code></pre>\n<p>resulted in a duplicate symbols linker error (the methods are implemented in a '.tpp' file that is included at the end of my header).\nadding <code>inline</code> to the specialised function resolved the issue. Why?</p>\n", "AcceptedAnswerId": "48403514", "Title": "Why do templates specialisations need to be inlined?", "CreationDate": "2018-01-23T13:12:53.797", "Id": "48402633", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2018-01-23T13:58:53.293", "Score": "11", "OwnerUserId": "930315", "Tags": "<c++><templates><inline><template-meta-programming><template-specialization>", "AnswerCount": "3"}});