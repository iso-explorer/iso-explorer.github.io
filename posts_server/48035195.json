post_cb({"48035195": {"ViewCount": "152", "LastEditDate": "2018-01-03T02:23:11.467", "AcceptedAnswerId": "48035334", "Title": "Is this undefined behaviour or a bug with struct init?", "CreationDate": "2017-12-30T15:17:44.693", "LastActivityDate": "2018-01-03T03:10:41.597", "CommentCount": "1", "FavoriteCount": "2", "OwnerUserId": "8746007", "PostTypeId": "1", "LastEditorUserId": "963864", "Id": "48035195", "Score": "4", "Body": "<p>Please consider this bit of code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    struct A \n    { \n        int x; \n        int y; \n        int z; \n\n        int foo()\n        {\n            std::cout &lt;&lt; \"enter foo: \" &lt;&lt; this-&gt;x &lt;&lt; \",\" &lt;&lt; this-&gt;y &lt;&lt; \",\" &lt;&lt; this-&gt;z &lt;&lt; std::endl;\n            return 5;\n        }       \n\n        int moo() \n        { \n            std::cout &lt;&lt; \"enter moo: \" &lt;&lt; this-&gt;x &lt;&lt; \",\" &lt;&lt; this-&gt;y &lt;&lt; \",\" &lt;&lt; this-&gt;z &lt;&lt; std::endl;\n            this-&gt;x = 1;\n            this-&gt;z = 10;\n            return 2; \n        }\n    };\n\n    A b { b.foo(), b.z = b.moo(), 3};\n\n    std::cout &lt;&lt; \"final: \" &lt;&lt; b.x &lt;&lt; \",\" &lt;&lt; b.y &lt;&lt; \",\" &lt;&lt; b.z &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The result in my VS2017 (x64 release):</p>\n<pre><code>enter foo: 0,0,0\nenter moo: 5,0,0\nfinal: 1,2,3\n</code></pre>\n<p>The result from ideone.com (gcc 6.3) <a href=\"https://ideone.com/OGqvjW\" rel=\"nofollow noreferrer\">https://ideone.com/OGqvjW</a>):</p>\n<pre><code>enter foo: 0,0,3\nenter moo: 5,0,3\nfinal: 1,2,2\n</code></pre>\n<p>One compiler sets <code>z</code> member to 3 immediately, before everything, then overwrites it when methods and assignments are called, another does it at the very end, after everything. </p>\n<p><strong>Q. What would be the explanation to such behaviour?</strong></p>\n<p>Thank you.</p>\n", "Tags": "<c++><struct><language-lawyer><object-lifetime><brace-initialization>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_48035195_48035334_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 3291}}, "n4659": {"so_48035195_48035334_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 4053}}}, "48035334": {"PostTypeId": "2", "Body": "<p>Yes, this is undefined behavior:</p>\n<pre><code>int foo()\n{\n    std::cout &lt;&lt; \"enter foo: \" &lt;&lt; this-&gt;x &lt;&lt; \",\" &lt;&lt; this-&gt;y &lt;&lt; \",\" &lt;&lt; this-&gt;z &lt;&lt; std::endl;\n    //                            ~~~~~~~           ~~~~~~~           ~~~~~~~\n}       \n</code></pre>\n<p>At the point that <code>foo()</code> is invoked, <code>x</code>, <code>y</code>, and <code>z</code> have not been initialized yet. From <a href=\"http://eel.is/c++draft/dcl.init#12\" rel=\"nofollow noreferrer\">[dcl.init]/12</a>:</p>\n<blockquote>\n<p id=\"so_48035195_48035334_0\">If no initializer is specified for an object, the object is default-initialized. When storage for an object with automatic or dynamic storage duration is obtained, the object has an <em>indeterminate value</em>, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced ([expr.ass]). [...] If an indeterminate value is produced by an evaluation, the behavior is undefined except in the following cases: [...]</p>\n</blockquote>\n<p>None of the remaining cases apply. So printing <code>x</code>, <code>y</code>, and <code>z</code> there is undefined behavior. No different from just:</p>\n<pre><code>int x;\nstd::cout &lt;&lt; x; // ub\n</code></pre>\n<hr/>\n<p>My previous answer said yes, but for lifetime reasons. It had suggested that the initialization in <code>A b{ b.foo(), b.z = b.moo(), 3};</code> is non-vacuous and hence any access of any of the members of <code>b</code> before the end of initialization is UB. However, xskxzr has since indicated to me that in order for initialization to be non-vacuous, you <a href=\"http://eel.is/c++draft/basic.life#1.sentence-2\" rel=\"nofollow noreferrer\">must have constructors invoked</a>, and <code>int</code> does not have constructors. This makes the initialization of <code>b</code> vacuous. Which seems conceptually odd to me, but the wording in this regard is clear. </p>\n", "LastActivityDate": "2018-01-03T03:10:41.597", "LastEditorUserId": "2069064", "Score": "7", "Id": "48035334", "CreationDate": "2017-12-30T15:36:50.190", "ParentId": "48035195", "CommentCount": "15", "OwnerUserId": "2069064", "LastEditDate": "2018-01-03T03:10:41.597"}});