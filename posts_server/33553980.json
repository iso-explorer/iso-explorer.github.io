post_cb({"33554156": {"ParentId": "33553980", "CommentCount": "0", "Body": "<p>I don't know your compile options, but the warning</p>\n<pre><code>warning: extended initializer lists only available with -std=c++11 or -std=gnu++11|\n</code></pre>\n<p>leads me to the conclusion that the c++11 (initializer lists) is not enabled.</p>\n<p>But non the less, the code won't compile, becaus initialzer lists apperently can't handle default values of parameters. In this case the source of the problem is the line:</p>\n<pre><code>int default_bet = 5;\n</code></pre>\n<p>remove the default value and enable c++11, then your code will work.</p>\n", "OwnerUserId": "476315", "PostTypeId": "2", "Id": "33554156", "Score": "1", "CreationDate": "2015-11-05T20:28:37.737", "LastActivityDate": "2015-11-05T20:28:37.737"}, "33554115": {"ParentId": "33553980", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is because you have a default value for <strong>default_bet</strong>.\nRemove it and it will work or build the object explicitely instead of initializer list</p>\n<pre><code>    struct player\n    {\n            string name;\n            int bankroll;\n            int default_bet = 5;\n            player(string name_, int bankroll_, int default_bet_)\n            {\n                name=name_;\n                bankroll=bankroll_;\n                default_bet_=default_bet_;\n            }\n    };\n\n\n    players.push_back(player(\"Jim\", 500, 5));\n</code></pre>\n", "OwnerUserId": "2229099", "LastEditorUserId": "2229099", "LastEditDate": "2015-11-05T22:53:15.680", "Id": "33554115", "Score": "1", "CreationDate": "2015-11-05T20:25:34.133", "LastActivityDate": "2015-11-05T22:53:15.680"}, "33556166": {"ParentId": "33553980", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The problem isn't related to vectors at all but can be seen more simply by the following:</p>\n<pre><code>card c { \"Queen\", 10, \"Hearts\" };    // OK     (g++ -std=c++11)\nplayer p { \"Jim\", 500, 5 };          // Not OK (g++ -std=c++11)\n</code></pre>\n<p>There is a thing called <em>aggregate initialization</em> whereby an aggregate may be initialized from a brace-enclosed initializer list, bypassing the constructor. \nBut non-aggregates do not have this; they can only be initialized by their constructor. Both <code>player</code> and <code>card</code> have implicitly-generated default constructors taking no arguments, and that's all.</p>\n<hr>\n<p>Your compiler appears to be treating <code>card</code> as an aggregate, but <code>player</code> not.</p>\n<p>In C++11 this is correct, from N3337 [dcl.init.aggr]/1:</p>\n<blockquote>\n<p id=\"so_33553980_33556166_0\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal- initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>However in C++14 (N3936) this was changed to:</p>\n<blockquote>\n<p id=\"so_33553980_33556166_1\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or\n  protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>The <code>= 5</code> in your code is a <em>brace-or-equal-initializer</em> for a non-static data member, so we can see that in C++11 <code>player</code> is not an aggregate, but in C++14 <code>player</code> is an aggregate.</p>\n<p>Testing with g++, I found that g++ 5.1 implements this behaviour correctly - the code is rejected with <code>-std=c++11</code> and accepted with <code>-std=c++14</code>.  However, g++ 4.9.2 rejects the code with <code>-std=c++14</code>, so this would be a compiler bug in that version of g++.</p>\n<hr>\n<p><strong>Conclusion:</strong> If you have access to g++ 5.1 (or another compiler which correctly implements C++14) then a solution would be to use the <code>-std=c++14</code> flag when compiling your code. Otherwise you'll have to put in some ugly workarounds.</p>\n</hr></hr>", "OwnerUserId": "1505939", "LastEditorUserId": "1505939", "LastEditDate": "2015-11-05T22:56:31.007", "Id": "33556166", "Score": "1", "CreationDate": "2015-11-05T22:40:26.403", "LastActivityDate": "2015-11-05T22:56:31.007"}, "33553980": {"CommentCount": "5", "ViewCount": "250", "CreationDate": "2015-11-05T20:16:54.727", "LastActivityDate": "2015-11-05T22:56:31.007", "Title": "C++ Multiple Struct Vectors Error", "AcceptedAnswerId": "33554115", "PostTypeId": "1", "Id": "33553980", "Score": "4", "Body": "<p>I am trying to make two different vectors containing custom structures but when I try to add elements to the vectors it works for the \"deck\" vector but throws an error of the \"players\" vector. I am new to C++ and cannot figure out what is wrong.</p>\n<p>These are the errors it throws:</p>\n<pre><code>warning: extended initializer lists only available with -std=c++11 or -std=gnu++11|\n\nerror: no matching function for call to 'std::vector&lt;BlackjackClass::player&gt;::push_back(&lt;brace-enclosed initializer list&gt;)'|\n</code></pre>\n<p>This is the code I am using:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nclass BlackjackClass {\n\n    private:\n        struct card\n        {\n                string label;\n                int value;\n                string suit;\n        };\n        vector&lt;card&gt; deck;\n\n        struct player\n        {\n                string name;\n                int bankroll;\n                int default_bet = 5;\n        };\n        vector&lt;player&gt; players;\n\n    public:\n        BlackjackClass()\n        {\n            // Works\n            deck.push_back({\"Queen\", 10, \"Hearts\"});\n            // Doesn't Work\n            players.push_back({\"Jim\", 500, 5});\n\n        }\n};\n\nint main()\n{\n    BlackjackClass Blackjack;\n}\n</code></pre>\n", "Tags": "<c++><vector><struct><push-back>", "OwnerUserId": "5530933", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_33553980_33556166_0": {"section_id": 3298, "quality": 0.6666666666666666, "length": 16}, "so_33553980_33556166_1": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}}, "n3337": {"so_33553980_33556166_0": {"section_id": 3168, "quality": 0.7916666666666666, "length": 19}, "so_33553980_33556166_1": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}}, "n4659": {"so_33553980_33556166_1": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}}}});