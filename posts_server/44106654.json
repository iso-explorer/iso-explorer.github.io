post_cb({"44106781": {"ParentId": "44106654", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the C++ Standard (5.3.1 Unary operators)</p>\n<blockquote>\n<p id=\"so_44106654_44106781_0\">1 The unary * operator performs indirection: the expression to which\n  it is applied shall be a pointer to an object type, or a pointer to a\n  function type and the result is an lvalue referring to the object or\n  function to which the expression points. If the type of the expression\n  is \u201cpointer to T\u201d, the type of the result is \u201cT\u201d. [ Note: Indirection\n  through a pointer to an incomplete type (other than cv void) is valid.\n  <strong>The lvalue thus obtained can be used in limited ways (to initialize a reference, for example)</strong>; this lvalue must not be converted to a\n  prvalue, see 4.1. \u2014end note ]</p>\n</blockquote>\n<p>In this statement</p>\n<pre><code>int &amp;r = *(new int(100));\n</code></pre>\n<p>there is declared a reference to the lvalue obtained by using the operator <code>*</code> of an unnamed object created in the heap.</p>\n<p>Lately you can delete the object using the reference</p>\n<pre><code>delete &amp;r;\n</code></pre>\n<p>Consider a more interesting example with the polymorphism.</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    struct A\n    {\n        virtual ~A()\n        {\n            std::wcout &lt;&lt; \"A::~A()\" &lt;&lt; std::endl;\n        }\n    };\n    struct B : A\n    {\n        ~B()\n        {\n            std::wcout &lt;&lt; \"B::~B()\" &lt;&lt; std::endl;\n        }\n    };\n\n    A &amp;ra = *(new B);\n    delete &amp;ra;\n}\n</code></pre>\n<p>The program output is</p>\n<pre><code>B::~B()\nA::~A()\n</code></pre>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2017-05-22T07:25:31.117", "Id": "44106781", "Score": "5", "CreationDate": "2017-05-22T07:16:28.447", "LastActivityDate": "2017-05-22T07:25:31.117"}, "44106831": {"ParentId": "44106654", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The <code>new</code> operator returns a pointer to whatever it's allocated for you. When you dereference a pointer, you get a reference to the value it points to. Simple as that.</p>\n<p>It's been that way since C (though references weren't an explicit thing). It allows code like this:</p>\n<pre><code>void modify_my_int(int* the_int) { *the_int = 4; }\n\nint main(void)\n{\n    int var;\n    modify_my_int(&amp;var);\n    printf(\"%d\\n\", var); // prints \"4\"\n}\n</code></pre>\n", "OwnerUserId": "7881131", "LastEditorUserId": "7881131", "LastEditDate": "2017-05-22T07:20:15.113", "Id": "44106831", "Score": "0", "CreationDate": "2017-05-22T07:18:31.913", "LastActivityDate": "2017-05-22T07:20:15.113"}, "bq_ids": {"n4140": {"so_44106654_44106781_0": {"section_id": 6064, "quality": 0.8653846153846154, "length": 45}}, "n3337": {"so_44106654_44106781_0": {"section_id": 5832, "quality": 0.8269230769230769, "length": 43}}, "n4659": {"so_44106654_44106781_0": {"section_id": 7560, "quality": 0.8846153846153846, "length": 46}}}, "44106654": {"CommentCount": "4", "AcceptedAnswerId": "44106781", "PostTypeId": "1", "LastEditorUserId": "6935629", "CreationDate": "2017-05-22T07:11:00.520", "LastActivityDate": "2017-05-22T13:21:09.003", "LastEditDate": "2017-05-22T13:21:09.003", "ViewCount": "286", "FavoriteCount": "1", "Title": "Memory allocation with reference variable in C++", "Id": "44106654", "Score": "4", "Body": "<p>I have compiled following piece of code in <strong>G++</strong> compiler, it's working fine without any error or warning. </p>\n<pre><code>#include &lt;iostream&gt;             \nint main()                      \n{                               \n    int &amp;r = *(new int(100));   \n    std::cout &lt;&lt; r &lt;&lt; std::endl;\n    return 0;                   \n}\n</code></pre>\n<p><strong>How does the reference variable working with memory allocation?</strong></p>\n<p><strong>Is it valid to allocate memory for reference variable?</strong></p>\n", "Tags": "<c++><c++11><reference><c++14><heap-memory>", "OwnerUserId": "6935629", "AnswerCount": "2"}});