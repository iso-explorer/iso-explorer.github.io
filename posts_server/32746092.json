post_cb({"32746092": {"CommentCount": "12", "ViewCount": "162", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-09-23T17:41:53.633", "LastActivityDate": "2015-09-23T18:07:48.120", "Title": "Random output different between implementations", "AcceptedAnswerId": "32746283", "LastEditDate": "2015-09-23T17:59:40.477", "Id": "32746092", "Score": "5", "Body": "<p>I've tried this program with libstdc++, libc++ and dinkumware:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;random&gt;\n#include &lt;functional&gt;\n#include &lt;limits&gt;\n\nint main()\n{\n    std::vector&lt;int&gt; v(10);\n\n    std::mt19937 rand{0};\n    std::uniform_int_distribution&lt;&gt; dist(\n        1, 10\n    );\n\n    std::generate_n(v.begin(), v.size(),\n        std::bind(dist, rand));\n\n    for (auto i : v)\n        std::cout &lt;&lt; i &lt;&lt; \" \";\n}\n</code></pre>\n<p>Output respectively is:</p>\n<pre><code>6 6 8 9 7 9 6 9 5 7 \n\n6 1 4 4 8 10 4 6 3 5 \n\n5 10 4 1 4 10 8 4 8 4 \n</code></pre>\n<p>The output is consistent for each run but as you can see, they're different. Explain?</p>\n", "Tags": "<c++><c++11><random>", "OwnerUserId": "5368921", "AnswerCount": "2"}, "32746283": {"ParentId": "32746092", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>There is <strong>no</strong> required implementation for <code>uniform_int_distribution&lt;&gt;</code>. [rand.dist.general] specifies that:</p>\n<blockquote>\n<p id=\"so_32746092_32746283_0\">The algorithms for producing each of the specified distributions are implementation-defined.</p>\n</blockquote>\n<p>All that [rand.dist.uni.int] states is:</p>\n<blockquote>\n<p id=\"so_32746092_32746283_1\">A uniform_int_distribution random number distribution produces random integers <code>i</code>, <code>a &lt;= i &lt;= b</code>, distributed\n  according to the constant discrete probability function\n  <code>P(i | a, b) = 1/(b \u2212 a + 1)</code> .</p>\n</blockquote>\n<p>Each implementation is free to achieve this distribution how it wishes. What you are seeing is apparently three different implementations.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-09-23T17:56:32.360", "Id": "32746283", "Score": "7", "CreationDate": "2015-09-23T17:52:05.843", "LastActivityDate": "2015-09-23T17:56:32.360"}, "32746578": {"ParentId": "32746092", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>To be clear: the random number generators themselves are specified quite tightly--including the input parameters and results. To be technical, what's specified is the 10000<sup>th</sup> result from a default-constructed generator, but for any practical purpose a match on this result from a generator that's at least reasonably close to correct otherwise essentially guarantees that the generator is working correctly, and its outputs will match ever other similar generator for a given seed.</p>\n<p>For example, a quick test:</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\n\nint main() { \n    std::mt19937 r;\n\n    for (int i=0; i&lt;10000-2; i++)\n        r();\n    for (int i=0; i&lt;3; i++)\n        std::cout &lt;&lt; r() &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>...shows identical results with every (recent) compiler I have handy:</p>\n<pre><code>1211010839\n4123659995\n725333953\n</code></pre>\n<p>The second of those three is the value required by the standard.</p>\n<p>More leeway is given, however, in the distribution templates. A <code>uniform_int_distribution</code> has to map inputs to outputs uniformly, but there are different ways of doing that, and no requirement about which of those ways to use.</p>\n<p>If you really need to produce a sequence of integers within a range that's not only uniformly distributed, but consistent between implementations, you'll probably have to implement your own distribution code. Doing this well isn't quite as trivial as most people initially think. You might want to look at one of my <a href=\"https://stackoverflow.com/a/10219422/179910\">previous answers</a> for a working implementation along with some explanation and a bit of test code.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:31:01.727", "Id": "32746578", "Score": "2", "CreationDate": "2015-09-23T18:07:48.120", "LastActivityDate": "2015-09-23T18:07:48.120"}, "bq_ids": {"n4140": {"so_32746092_32746283_0": {"section_id": 3612, "quality": 0.8571428571428571, "length": 6}, "so_32746092_32746283_1": {"section_id": 3614, "quality": 1.0, "length": 13}}, "n3337": {"so_32746092_32746283_0": {"section_id": 3474, "quality": 0.8571428571428571, "length": 6}, "so_32746092_32746283_1": {"section_id": 3476, "quality": 1.0, "length": 13}}, "n4659": {"so_32746092_32746283_0": {"section_id": 4376, "quality": 0.7142857142857143, "length": 5}, "so_32746092_32746283_1": {"section_id": 4378, "quality": 1.0, "length": 13}}}});