post_cb({"11927032": {"CommentCount": "0", "AcceptedAnswerId": "11927092", "CreationDate": "2012-08-13T00:44:17.007", "LastActivityDate": "2012-08-14T22:18:53.427", "PostTypeId": "1", "ViewCount": "1600", "FavoriteCount": "6", "Title": "sfinae check for static member using decltype", "Id": "11927032", "Score": "10", "Body": "<p>I've written the below code to try to detect if a type has a static member variable.  Unfortunately, it's always returning that the variable does not exist.  </p>\n<p>Could someone tell me where I'm going wrong?  I'm using g++ 4.7.1.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;type_traits&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;                                                  \nclass has_is_baz                                                          \n{                                                                   \n    template&lt;class U, \n             typename std::enable_if&lt;std::is_same&lt;bool, decltype(U::is_baz)&gt;::value&gt;::type...&gt;                    \n        static std::true_type check(int);                           \n    template &lt;class&gt;                                                \n        static std::false_type check(...);                          \npublic:                                                             \n    static constexpr bool value = decltype(check&lt;T&gt;(0))::value;     \n};\n\nstruct foo { };\n\nstruct bar \n{ \n    static constexpr bool is_baz = true;\n};\n\nint main()\n{\n    cout &lt;&lt; has_is_baz&lt;foo&gt;::value &lt;&lt; '\\n';\n    cout &lt;&lt; has_is_baz&lt;bar&gt;::value &lt;&lt; '\\n';\n}\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1594173", "AnswerCount": "2"}, "11927092": {"ParentId": "11927032", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The main problem was that:</p>\n<pre><code>std::is_same&lt;bool, decltype(bar::is_baz)&gt;::value == false\n</code></pre>\n<p>Then your SFINAE was failing always. I've re-written the <code>has_is_baz</code> trait and it now works:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;type_traits&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;                                                  \nclass has_is_baz                                                          \n{       \n    template&lt;class U, class = typename std::enable_if&lt;!std::is_member_pointer&lt;decltype(&amp;U::is_baz)&gt;::value&gt;::type&gt;\n        static std::true_type check(int);\n    template &lt;class&gt;\n        static std::false_type check(...);\npublic:\n    static constexpr bool value = decltype(check&lt;T&gt;(0))::value;\n};\n\nstruct foo { };\n\nstruct bar \n{ \n    static constexpr bool is_baz = true;\n};\n\nstruct not_static {\n    bool is_baz;\n};\n\nint main()\n{\n    cout &lt;&lt; has_is_baz&lt;foo&gt;::value &lt;&lt; '\\n';\n    cout &lt;&lt; has_is_baz&lt;bar&gt;::value &lt;&lt; '\\n';\n    cout &lt;&lt; has_is_baz&lt;not_static&gt;::value &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Demo <a href=\"http://liveworkspace.org/code/59fd857028c00cca3a9f85cf96c02428\" rel=\"noreferrer\">here</a>.</p>\n<p><strong>Edit</strong>: I've fixed the type trait. As @litb indicated, it was detecting static members as well as non-static members.</p>\n", "OwnerUserId": "525217", "LastEditorUserId": "525217", "LastEditDate": "2012-08-14T22:18:53.427", "Id": "11927092", "Score": "8", "CreationDate": "2012-08-13T00:55:22.100", "LastActivityDate": "2012-08-14T22:18:53.427"}, "bq_ids": {"n4140": {"so_11927032_11927364_0": {"section_id": 5425, "quality": 1.0, "length": 7}}, "n3337": {"so_11927032_11927364_0": {"section_id": 5220, "quality": 1.0, "length": 7}}, "n4659": {"so_11927032_11927364_0": {"section_id": 6847, "quality": 1.0, "length": 7}}}, "11927364": {"ParentId": "11927032", "CommentCount": "0", "Body": "<p>The issue in your code is that a <code>constexpr</code> object is implicitly <code>const</code>, which means that your test for same type should be:</p>\n<pre><code>std::is_same&lt;const bool, decltype(U::is_baz)&gt;::value\n</code></pre>\n<p>This is specified in the standard in \u00a77.1.5 [dcl.constexpr]/9</p>\n<blockquote>\n<p id=\"so_11927032_11927364_0\">A constexpr specifier used in an object declaration declares the object as const. [...]</p>\n</blockquote>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "11927364", "Score": "5", "CreationDate": "2012-08-13T01:56:18.450", "LastActivityDate": "2012-08-13T01:56:18.450"}});