post_cb({"17774781": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>Question is answered, but I would like to add my points. </p>\n<p>I will always prefer <code>if(pointer)</code> instead of <code>if(pointer != NULL)</code> and <code>if(!pointer)</code> instead of <code>if(pointer == NULL)</code>: </p>\n<ul>\n<li>It is simple, small </li>\n<li><p>Less chances to write a buggy code, suppose if I misspelled equality check operator <code>==</code> with <code>=</code><br>\n<code>if(pointer == NULL)</code> can be misspelled <code>if(pointer = NULL)</code> So I will avoid it, best is just <code>if(pointer)</code>.<br>\n<sub>(I also suggested some <a href=\"https://stackoverflow.com/questions/17681535/variable-assignment-in-if-condition/17681607#17681607\">Yoda condition in one answer</a>, but that is diffrent matter)</sub></br></br></p></li>\n<li><p>Similarly for <code>while (node != NULL &amp;&amp; node-&gt;data == key)</code>, I will simply write <code>while (node &amp;&amp; node-&gt;data == key)</code> that is more obvious to me (shows that using short-circuit).</p></li>\n<li>(may be stupid reason) Because NULL is a macro, if suppose  some one redefine by mistake with other value.</li>\n</ul>\n", "OwnerUserId": "1673391", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:47:28.910", "Id": "17774781", "Score": "10", "CreationDate": "2013-07-21T17:08:43.200", "LastActivityDate": "2013-07-23T23:37:12.580"}, "17775859": {"ParentId": "17772103", "CommentCount": "2", "Body": "<p>Yes, you can always do this as 'IF' condition evaluates only when the condition inside it goes true. C does not have a boolean return type and thus returns a non-zero value when the condition is true while returns 0 whenever the condition in 'IF' turns out to be false. The non zero value returned by default is 1. Thus, both ways of writing the code are correct while I will always prefer the second one.</p>\n", "OwnerUserId": "2280507", "PostTypeId": "2", "Id": "17775859", "Score": "-1", "CreationDate": "2013-07-21T19:09:01.230", "LastActivityDate": "2013-07-21T19:09:01.230"}, "17772125": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Yes, you can. In fact, I prefer to use <code>if(pointer)</code> because it's simpler to read and write once you get used to it.</p>\n<p>Also note that C++11 introduced <code>nullptr</code> which is preferred over <code>NULL</code>.</p>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2013-07-22T06:11:11.033", "Id": "17772125", "Score": "25", "CreationDate": "2013-07-21T12:03:42.353", "LastActivityDate": "2013-07-22T06:11:11.033"}, "17772103": {"CommentCount": "12", "CreationDate": "2013-07-21T12:00:34.693", "PostTypeId": "1", "AcceptedAnswerId": "17772117", "LastEditorUserId": "1079110", "LastActivityDate": "2017-04-15T09:26:03.227", "LastEditDate": "2016-07-19T23:30:51.237", "ViewCount": "48885", "FavoriteCount": "17", "Title": "Can I use if (pointer) instead of if (pointer != NULL)?", "Id": "17772103", "Score": "133", "Body": "<p>Is it safe to check a pointer to not being <code>NULL</code> by writing simply <code>if(pointer)</code> or do I have to use <code>if(pointer != NULL)</code>?</p>\n", "Tags": "<c++><pointers><if-statement><null><null-pointer>", "OwnerUserId": "1079110", "AnswerCount": "12"}, "17772144": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, you could.</p>\n<ul>\n<li>A null pointer is converted to false implicitly</li>\n<li>a non-null pointer is converted to true.</li>\n</ul>\n<p>This is part of the C++ standard conversion, which falls in <em>Boolean conversion</em> clause:</p>\n<p><strong>\u00a7 4.12 Boolean conversions</strong></p>\n<blockquote>\n<p id=\"so_17772103_17772144_0\">A prvalue of arithmetic, unscoped enumeration, <strong>pointer</strong>, or pointer to member type can be converted to a prvalue of type bool. <strong>A zero value, null pointer value, or null member pointer value is converted to false; any other value is converted to true.</strong> A prvalue of type std::nullptr_t can be converted to a prvalue of type bool; the resulting value is false.</p>\n</blockquote>\n", "OwnerUserId": "951757", "LastEditorUserId": "63550", "LastEditDate": "2016-01-27T12:47:38.483", "Id": "17772144", "Score": "30", "CreationDate": "2013-07-21T12:05:51.520", "LastActivityDate": "2016-01-27T12:47:38.483"}, "17788493": {"ParentId": "17772103", "CommentCount": "0", "Body": "<p>I think as a rule of thumb, if your <em>if-expression</em> can be re-written as</p>\n<pre><code>const bool local_predicate = *if-expression*;\nif (local_predicate) ...\n</code></pre>\n<p>such that it causes NO WARNINGS, then THAT should be the preferred style for the <em>if-expression</em>.  (I know I get warnings when I assign an old C <code>BOOL</code> (<code>#define BOOL int</code>) to a C++ <code>bool</code>, let alone pointers.)</p>\n", "OwnerUserId": "346104", "PostTypeId": "2", "Id": "17788493", "Score": "-1", "CreationDate": "2013-07-22T13:10:24.643", "LastActivityDate": "2013-07-22T13:10:24.643"}, "bq_ids": {"n4140": {"so_17772103_17772117_0": {"section_id": 44, "quality": 1.0, "length": 39}, "so_17772103_17772144_0": {"section_id": 44, "quality": 1.0, "length": 39}}, "n3337": {"so_17772103_17772117_0": {"section_id": 41, "quality": 1.0, "length": 39}, "so_17772103_17772144_0": {"section_id": 41, "quality": 1.0, "length": 39}}, "n4659": {"so_17772103_17772117_0": {"section_id": 45, "quality": 1.0, "length": 39}, "so_17772103_17772144_0": {"section_id": 45, "quality": 1.0, "length": 39}}}, "17772119": {"ParentId": "17772103", "CommentCount": "0", "Body": "<p>Yes, you can. The ability to compare values to zeros implicitly has been inherited from C, and is there in all versions of C++. You can also use <code>if (!pointer)</code> to check pointers for NULL.</p>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "17772119", "Score": "6", "CreationDate": "2013-07-21T12:03:18.093", "LastActivityDate": "2013-07-21T12:03:18.093"}, "17772181": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Yes. In fact you should. If you're wondering if it creates a <a href=\"http://en.wikipedia.org/wiki/Segmentation_fault\" rel=\"nofollow\">segmentation fault</a>, it doesn't.</p>\n", "OwnerUserId": "2595584", "LastEditorUserId": "63550", "LastEditDate": "2016-01-27T12:48:06.890", "Id": "17772181", "Score": "1", "CreationDate": "2013-07-21T12:09:17.313", "LastActivityDate": "2016-01-27T12:48:06.890"}, "17775553": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The relevant use cases for null pointers are</p>\n<ul>\n<li>Redirection to something like a deeper tree node, which may not exist or has not been linked yet. That's something you should always keep closely encapsulated in a dedicated class, so readability or conciseness isn't that much of an issue here.</li>\n<li><p>Dynamic casts. Casting a base-class pointer to a particular derived-class one (something you should again try to avoid, but may at times find necessary) always succeeds, but results in a null pointer if the derived class doesn't match. One way to check this is</p>\n<pre><code>Derived* derived_ptr = dynamic_cast&lt;Derived*&gt;(base_ptr);\nif(derived_ptr != nullptr) { ... }\n</code></pre>\n<p>(or, preferrably, <code>auto derived_ptr = ...</code>). Now, this is bad, because it leaves the (possibly invalid, i.e. null) derived pointer outside of the safety-guarding <code>if</code> block's scope. This isn't necessary, as C++ allows you to introduce boolean-convertable variables <em>inside an <code>if</code>-condition</em>:</p>\n<pre><code>if(auto derived_ptr = dynamic_cast&lt;Derived*&gt;(base_ptr)) { ... }\n</code></pre>\n<p>which is not only shorter and scope-safe, it's also much more clear in its intend: when you check for null in a separate if-condition, the reader wonders \"ok, so <code>derived_ptr</code> must not be null here... well, why would it be null?\" Whereas the one-line version says very plainly \"if you can safely cast <code>base_ptr</code> to <code>Derived*</code>, then use it for...\".</p>\n<p>The same works just as well for any other possible-failure operation that returns a pointer, though IMO you should generally avoid this: it's better to use something like <code>boost::optional</code> as the \"container\" for results of possibly failing operations, rather than pointers.</p></li>\n</ul>\n<p>So, if the main use case for null pointers should always be written in a variation of the implicit-cast-style, I'd say it's good for consistency reasons to <em>always</em> use this style, i.e. I'd advocate for <code>if(ptr)</code> over <code>if(ptr!=nullptr)</code>.</p>\n<hr>\n<p>I'm afraid I have to end with an advert: the <code>if(auto bla = ...)</code> syntax is actually just a slightly cumbersome approximation to the <em>real</em> solution to such problems: <em>pattern matching</em>. Why would you first force some action (like casting a pointer) and then consider that there might be a failure... I mean, it's ridiculous, isn't it? It's like, you have some foodstuff and want to make soup. You hand it to your assistant with the task to extract the juice, if it happens to be a soft vegetable. You don't first look it at it. When you have a potato, you still give it to your assistant but they slap it back in your face with a failure note. Ah, imperative programming!</p>\n<p>Much better: consider right away all the cases you might encounter. Then act accordingly. Haskell:</p>\n<pre><code>makeSoupOf :: Foodstuff -&gt; Liquid\nmakeSoupOf p@(Potato{..}) = mash (boil p) &lt;&gt; water\nmakeSoupOf vegetable\n | isSoft vegetable  = squeeze vegetable &lt;&gt; salt\nmakeSoupOf stuff  = boil (throwIn (water&lt;&gt;salt) stuff)\n</code></pre>\n<p>Haskell also has special tools for when there is really a serious possibility of failure (as well as for a whole bunch of other stuff): monads. But this isn't the place for explaining those.</p>\n<p><sup>&amp;langle;/advert&amp;rangle;</sup></p>\n</hr>", "OwnerUserId": "745903", "LastEditorUserId": "745903", "LastEditDate": "2013-07-21T19:18:51.110", "Id": "17775553", "Score": "2", "CreationDate": "2013-07-21T18:32:53.857", "LastActivityDate": "2013-07-21T19:18:51.110"}, "17772117": {"ParentId": "17772103", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can; the null pointer is implicitly converted into boolean false while non-null pointers are converted into true. From the C++11 standard, section on <strong>Boolean Conversions:</strong></p>\n<blockquote>\n<p id=\"so_17772103_17772117_0\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a\n  prvalue of type\n  <code>bool</code>. A zero value, null pointer value, or null member pointer value is converted to\n  <code>false</code>;\n  any other value is converted to\n  <code>true</code>\n  . A prvalue of type\n  <code>std::nullptr_t</code>\n  can be converted to a prvalue of\n  type\n  <code>bool</code>\n  ; the resulting value is\n  <code>false</code>\n  .</p>\n</blockquote>\n", "OwnerUserId": "318758", "LastEditorUserId": "318758", "LastEditDate": "2013-07-21T12:11:56.607", "Id": "17772117", "Score": "151", "CreationDate": "2013-07-21T12:02:51.990", "LastActivityDate": "2013-07-21T12:11:56.607"}, "43424405": {"ParentId": "17772103", "CommentCount": "0", "Body": "<p>yes, of course! \nin fact, writing if(pointer) is a more convenient way of writing rather than if(pointer != NULL) because:\n1. it is easy to debug\n2. easy to understand\n3. if accidently, the value of NULL is defined, then also the code will not crash</p>\n", "OwnerUserId": "7618749", "PostTypeId": "2", "Id": "43424405", "Score": "0", "CreationDate": "2017-04-15T09:26:03.227", "LastActivityDate": "2017-04-15T09:26:03.227"}, "33405622": {"ParentId": "17772103", "CommentCount": "0", "Body": "<p>Explicitly checking for NULL could provide a hint to the compiler on what you are trying to do, ergo leading to being less error-prone.</p>\n<p><a href=\"https://i.stack.imgur.com/bFxnY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/bFxnY.png\"/></a></p>\n", "OwnerUserId": "740014", "PostTypeId": "2", "Id": "33405622", "Score": "4", "CreationDate": "2015-10-29T03:48:02.737", "LastActivityDate": "2015-10-29T03:48:02.737"}, "17826204": {"ParentId": "17772103", "CommentCount": "6", "Body": "<p>\"Is it safe..?\" is a question about the language standard and the generated code.</p>\n<p>\"Is is a good practice?\" is a question about how well the statement is understood by any arbitrary human reader of the statement. If you are asking this question, it suggests that the \"safe\" version is less clear to future readers and writers.</p>\n", "OwnerUserId": "2317533", "PostTypeId": "2", "Id": "17826204", "Score": "-1", "CreationDate": "2013-07-24T05:54:25.407", "LastActivityDate": "2013-07-24T05:54:25.407"}});