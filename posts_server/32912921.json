post_cb({"32912921": {"CommentCount": "1", "ViewCount": "4686", "PostTypeId": "1", "LastEditorUserId": "3953764", "CreationDate": "2015-10-02T17:45:28.637", "LastActivityDate": "2015-10-03T00:03:38.397", "Title": "What's wrong with this inline initialization of std::array?", "AcceptedAnswerId": "32912976", "LastEditDate": "2015-10-02T17:53:50.150", "Id": "32912921", "Score": "11", "Body": "<p>Consider the following declaration:</p>\n<pre><code>#include &lt;array&gt;\n\nstruct X\n{\n    //std::array&lt;bool,3&gt; arr={false,false,false};\n    bool brr[3]={false,false,false};\n};\n</code></pre>\n<p>As is, it compiles normally by g++ 5.2. But if I uncomment the <code>std::array</code>, I get an error:</p>\n<pre><code>test.cpp:5:46: error: array must be initialized with a brace-enclosed initializer\n     std::array&lt;bool,3&gt; arr={false,false,false};\n                                              ^\ntest.cpp:5:46: error: too many initializers for \u2018std::array&lt;bool, 3u&gt;\u2019\n</code></pre>\n<p>OTOH, this declaration works without problems inside <code>main()</code>. Also, the following initialization does work inside <code>struct X</code>:</p>\n<pre><code>std::array&lt;bool,3&gt; arr={{false,false,false}};\n</code></pre>\n<p>Why can't I use the simple initialization with single braces in struct definition?</p>\n", "Tags": "<c++><arrays><c++11><g++>", "OwnerUserId": "673852", "AnswerCount": "1"}, "32912976": {"ParentId": "32912921", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-10-02T17:50:09.473", "Score": "21", "LastEditorUserId": "1708801", "LastEditDate": "2015-10-03T00:03:38.397", "Id": "32912976", "OwnerUserId": "1708801", "Body": "<p>This looks like a gcc bug see: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65815\">Bug 65815 - brace elision doesn't work in NSDMI</a>. The report says:</p>\n<blockquote>\n<p id=\"so_32912921_32912976_0\">On Page 975 of \"The C++ Programming Language\", 4th edition, Bjarne\n  Stroustrup says:</p>\n<p id=\"so_32912921_32912976_1\">\"An array can be initialized by an initializer list: array a1 =\n  { 1, 2, 3 };\"</p>\n<p id=\"so_32912921_32912976_2\">and Clang (V 3.5) accepts it. However, G++ 4.9.2 thinks this is an\n  error:</p>\n<pre><code>\"error: array must be initialized with a brace-enclosed initializer\n   const std::array&lt;double, 3&gt; _ar0val = {1.0, -1.0, 1.0};\"\n</code></pre>\n</blockquote>\n<p>The issue was narrowed down to the following test case:</p>\n<pre><code>struct array {\n  int data [2];\n};\n\nstruct X {\n  array a = { 1, 2 };\n};\n</code></pre>\n<p>It looks like the fix is in the head revision, the OPs code works in that revision, <a href=\"http://melpon.org/wandbox/permlink/UsIG78qY3rMDrPjJ\">see it live</a>.</p>\n<p>As noted in the bug report using an inner set of braces is a possible work-around:</p>\n<pre><code>std::array&lt;bool,3&gt; arr={ {false,false,false} };\n                         ^                 ^\n</code></pre>\n", "LastActivityDate": "2015-10-03T00:03:38.397"}, "bq_ids": {"n4140": {"so_32912921_32912976_1": {"section_id": 3301, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_32912921_32912976_1": {"section_id": 3171, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_32912921_32912976_1": {"section_id": 4067, "quality": 0.8333333333333334, "length": 5}}}});