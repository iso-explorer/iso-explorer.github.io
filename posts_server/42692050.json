post_cb({"42692050": {"CommentCount": "0", "AcceptedAnswerId": "42692128", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2017-03-09T09:53:54.230", "LastActivityDate": "2017-03-09T10:21:47.853", "LastEditDate": "2017-03-09T10:16:41.963", "ViewCount": "352", "FavoriteCount": "2", "Title": "Correct syntax for friend template function", "Id": "42692050", "Score": "3", "Body": "<p>In The C++ Programming Language, Fourth Edition - chapter 23.4.7 Friends, I found following example (I have slightly modified it to show only relevant part):</p>\n<pre><code>template&lt;typename T&gt;\nclass Vector {\npublic:\n    friend Vector operator*&lt;&gt;(const Vector&amp; v, int f); \n                           ^^ ~~~~ ?\n};\n\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f) {\n    return v;\n}\n</code></pre>\n<p>I tried to compile it, but I get following error (clang):</p>\n<pre><code>main.cpp:8:20: error: friends can only be classes or functions\n        friend Vector operator*&lt;&gt;(const Vector&amp; v, int f); \n                      ^\nmain.cpp:8:29: error: expected ';' at end of declaration list\n        friend Vector operator*&lt;&gt;(const Vector&amp; v, int f); \n                               ^\n                               ;\n2 errors generated.\n</code></pre>\n<p>Book explains that : </p>\n<blockquote>\n<p id=\"so_42692050_42692050_0\">The &lt;&gt; after the name of the friend function is needed to make clear that the friend is a template function. Without the &lt;&gt;, a non template function would be assumed. </p>\n</blockquote>\n<p>And that is all on this.</p>\n<p>Without <code>&lt;&gt;</code> this code compiles, but when operator* is used (ex.: <code>Vector&lt;int&gt; v; v*12;</code>) then linker error appears:</p>\n<pre><code>main.cpp:(.text+0xb): undefined reference to `operator*(Vector&lt;int&gt; const&amp;, int)'\n</code></pre>\n<p>So I assume that <code>&lt;&gt;</code> is needed to tell compiler that function template for operator* should be generated each time Vector template is instantiated for given type.</p>\n<p>But what am I doing wrong in the example from the book, and why?</p>\n", "Tags": "<c++><templates><friend>", "OwnerUserId": "6483824", "AnswerCount": "4"}, "42692286": {"ParentId": "42692050", "CommentCount": "2", "CreationDate": "2017-03-09T10:04:18.030", "OwnerUserId": "4706785", "PostTypeId": "2", "Id": "42692286", "Score": "0", "Body": "<p>Whatever book you're using is explaining it incorrectly.</p>\n<p>What you need to do is</p>\n<pre><code>template&lt;typename T&gt;\nclass Vector\n{\n       public:\n           friend Vector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f); \n};\n\ntemplate&lt;typename T&gt;\n   Vector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f)\n{\n    return v;\n}\n</code></pre>\n<p>The above makes the <code>operator*()</code> which accepts a <code>Vector&lt;T&gt;</code> a friend of <code>Vector&lt;T&gt;</code> but not a friend of <code>Vector&lt;U&gt;</code> (unless <code>T</code> is the same type as <code>U</code>).</p>\n<p>Within the class definition it is possible to leave out the <code>&lt;T&gt;</code> from <code>Vector&lt;T&gt;</code>, but in my experience mere human beings seem to have more trouble convincing themselves that the function declaration and function definition correspond to each other.  So I generally prefer not doing that .... your call though.</p>\n<p>The <code>&lt;&gt;</code> syntax is used when explicitly specialising templates, but that's not what you are trying to do.   For example, with a templated function;</p>\n<pre><code> template &lt;class T&gt; void foo(T) { /* whatever */   }\n template&lt;&gt; void foo&lt;int&gt; {/* something specific to int */ }\n</code></pre>\n", "LastActivityDate": "2017-03-09T10:04:18.030"}, "42692153": {"ParentId": "42692050", "CommentCount": "4", "CreationDate": "2017-03-09T09:58:20.033", "OwnerUserId": "598696", "PostTypeId": "2", "Id": "42692153", "Score": "3", "Body": "<p>In your case, you're <em>declaring</em> <code>operator*</code> as a friend directly inside <code>Vector</code>, without any previous declaration. Therefore the correct syntax is:</p>\n<pre><code>template&lt;typename T&gt;\nclass Vector {\npublic:\n    template&lt;typename&gt;\n    friend Vector operator*(const Vector&amp; v, int f);               \n};\n\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f) {\n    return v;\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/RPVkid4ZyBeQyhl4\" rel=\"nofollow noreferrer\"><strong>live example on wandbox</strong></a></p>\n", "LastActivityDate": "2017-03-09T09:58:20.033"}, "42692259": {"ParentId": "42692050", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2017-03-09T10:03:14.373", "Score": "2", "LastEditorUserId": "6857153", "LastEditDate": "2017-03-09T10:21:47.853", "Id": "42692259", "OwnerUserId": "6857153", "Body": "<p>To make template friend method syntax work you need a forward declaration of this template method.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename T&gt;\nclass Vector;\n\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f);\n\ntemplate&lt;typename T&gt;\nclass Vector\n{\n    template&lt;typename T_&gt; friend\n    Vector&lt;T_&gt; operator*(const Vector&lt;T_&gt;&amp; v, int f);\n};\n\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f)\n{\n    return v;\n}\n</code></pre>\n", "LastActivityDate": "2017-03-09T10:21:47.853"}, "42692128": {"ParentId": "42692050", "CommentCount": "2", "CreationDate": "2017-03-09T09:57:17.393", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "42692128", "Score": "7", "Body": "<p>As the book said, </p>\n<blockquote>\n<p id=\"so_42692050_42692128_0\">the <code>&lt;&gt;</code> after the name of the friend function is needed to make clear that the friend is a template function. </p>\n</blockquote>\n<p>That means, the name should refer to a function template, which should be declared (as template) in advance. e.g.</p>\n<pre><code>// forward declaration of the class template\ntemplate&lt;typename T&gt;\nclass Vector;\n\n// declaration of the function template\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f);\n\ntemplate&lt;typename T&gt;\nclass Vector {\npublic:\n    // friend declaration\n    friend Vector operator*&lt;&gt;(const Vector&amp; v, int f); \n};\n\n// definition of the function template\ntemplate&lt;typename T&gt;\nVector&lt;T&gt; operator*(const Vector&lt;T&gt;&amp; v, int f) {\n    return v;\n}\n</code></pre>\n", "LastActivityDate": "2017-03-09T09:57:17.393"}, "bq_ids": {"n4140": {"so_42692050_42692128_0": {"section_id": 126, "quality": 0.6, "length": 6}}, "n3337": {"so_42692050_42692128_0": {"section_id": 120, "quality": 0.6, "length": 6}}, "n4659": {"so_42692050_42692128_0": {"section_id": 131, "quality": 0.6, "length": 6}}}});