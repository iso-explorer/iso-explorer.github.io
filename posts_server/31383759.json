post_cb({"31384243": {"ParentId": "31383759", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I would be inclined to write the code like this:</p>\n<pre><code>struct B {\n   B() {} \n   static int x;\n};\n\nint B::x = 42;\n</code></pre>\n<p>After all, the static (x) is defined (and therefore should be initialized) on the last line. Putting the initialization inside the constructor of B means that the static x (there is only one of them!) would be re-initialized each and every single time you construct a B. There is one static, you should initialize only once. </p>\n", "OwnerUserId": "5057025", "LastEditorUserId": "2069064", "LastEditDate": "2015-07-13T13:07:20.550", "Id": "31384243", "Score": "-2", "CreationDate": "2015-07-13T13:06:12.337", "LastActivityDate": "2015-07-13T13:07:20.550"}, "31384223": {"ParentId": "31383759", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From [basic.start.init]:</p>\n<blockquote>\n<p id=\"so_31383759_31384223_0\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5)\n  before any other initialization takes place. A constant initializer for an object o is an expression that is a\n  constant expression, except that it may also invoke constexpr constructors for o and its subobjects even\n  if those objects are of non-literal class types. [ ... ] </p>\n<p id=\"so_31383759_31384223_1\">Together, zero-initialization and constant initialization are called static initialization; all other initialization is\n  dynamic initialization. Static initialization shall be performed before any dynamic initialization takes place.</p>\n</blockquote>\n<p>In our case, <code>b</code> is statically initialized but <code>b.x</code> is dynamically initialized (the constructor isn't constexpr). But we also have:</p>\n<blockquote>\n<p id=\"so_31383759_31384223_2\">It is implementation-defined whether the dynamic initialization of a non-local variable with static storage\n  duration is done before the first statement of main. If the initialization is deferred to some point in time\n  after the first statement of main, it shall occur before the first odr-use (3.2) of any function or variable\n  defined in the same translation unit as the variable to be initialized. </p>\n</blockquote>\n<p>Odr-used means, from [basic.def.odr]:</p>\n<blockquote>\n<p id=\"so_31383759_31384223_3\">A variable x whose name appears as a potentially-evaluated expression ex is odr-used by ex unless applying\n  the lvalue-to-rvalue conversion (4.1) to x yields a constant expression (5.20) that does not invoke any nontrivial\n  functions and, if [ ... ]</p>\n</blockquote>\n<p>But evaluating <code>b.x</code> does not yield a constant expression, so we can stop there - <code>b.x</code> is <em>odr-used</em> by <code>A&lt;N&gt;::foo()</code>, which is also the first <em>odr-use</em>. So while the initialization does not have to occur before <code>main()</code>, it does have to occur before <code>foo()</code>. So if you get 0, that's a compiler error. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-07-13T13:12:32.940", "Id": "31384223", "Score": "6", "CreationDate": "2015-07-13T13:05:18.333", "LastActivityDate": "2015-07-13T13:12:32.940"}, "31383759": {"CommentCount": "1", "ViewCount": "288", "PostTypeId": "1", "LastEditorUserId": "4634174", "CreationDate": "2015-07-13T12:42:20.370", "LastActivityDate": "2015-07-14T07:16:40.850", "Title": "Initialization of a static member inside a template", "AcceptedAnswerId": "31384223", "LastEditDate": "2015-07-14T07:16:40.850", "Id": "31383759", "Score": "6", "Body": "<p>Here's a minimal example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct B {\n  B() { x = 42; }\n  static int x;\n};  \n\nint B::x;\n\ntemplate &lt;int N&gt;\nstruct A {\n  int foo() { return b.x; }\n  static B b;\n};\n\ntemplate&lt;int N&gt;\nB A&lt;N&gt;::b;\n\n//template struct A&lt;2&gt;; // explicit instantiation with N = 2 (!)\n\nint main(int argc, char **argv) {\n  std::cout &lt;&lt; A&lt;1&gt;().foo() &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>This program writes 42 using g++ 4.9.2, but writes 0 using Visual Studio 2015 RC. Also, if I uncomment the explicit instantiation, VS2015RC also gives 42, which is quite interesting, as the template parameter here is different from the one used in the <code>main</code> function.</p>\n<p>Is this a bug? I assume that g++ is correct, as there is a reference to <code>b</code> inside <code>foo</code>, so <code>B</code>'s constructor should be called.</p>\n<hr>\n<p>EDIT: There is a simple workaround - if there is a non-static variable in <code>B</code>, that is referenced in <code>A</code>, VS2015RC will compile correctly:</p>\n<pre><code>// ...\n\nstruct B {\n  B() { x = 42; }\n  static int x;\n  int y;                         // &lt;- non-static variable\n};\n\n// ...\n\ntemplate &lt;int N&gt;\nstruct A {\n  int foo() { b.y; return b.x; } // &lt;- reference to b.y\n  static B b;\n};\n</code></pre>\n<p>This seems to work, even though <code>b.y</code>, as a statement, is obviously NOP.</p>\n</hr>", "Tags": "<c++><templates><visual-studio-2015><explicit-instantiation>", "OwnerUserId": "4634174", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31383759_31384223_1": {"section_id": 7151, "quality": 0.9, "length": 18}, "so_31383759_31384223_3": {"section_id": 7040, "quality": 0.8888888888888888, "length": 16}, "so_31383759_31384223_2": {"section_id": 7153, "quality": 0.9714285714285714, "length": 34}, "so_31383759_31384223_0": {"section_id": 7151, "quality": 0.9142857142857143, "length": 32}}, "n3337": {"so_31383759_31384223_1": {"section_id": 6895, "quality": 0.9, "length": 18}, "so_31383759_31384223_3": {"section_id": 6785, "quality": 0.5555555555555556, "length": 10}, "so_31383759_31384223_2": {"section_id": 6897, "quality": 0.9714285714285714, "length": 34}, "so_31383759_31384223_0": {"section_id": 6895, "quality": 0.5428571428571428, "length": 19}}, "n4659": {"so_31383759_31384223_1": {"section_id": 8652, "quality": 0.7, "length": 14}, "so_31383759_31384223_3": {"section_id": 8537, "quality": 0.8888888888888888, "length": 16}, "so_31383759_31384223_2": {"section_id": 8657, "quality": 0.6571428571428571, "length": 23}, "so_31383759_31384223_0": {"section_id": 8652, "quality": 0.5142857142857142, "length": 18}}}});