post_cb({"bq_ids": {"n4140": {"so_25600484_25600513_0": {"length": 9, "quality": 0.75, "section_id": 1246}, "so_25600484_25600508_0": {"length": 10, "quality": 0.625, "section_id": 763}}, "n3337": {"so_25600484_25600513_0": {"length": 9, "quality": 0.75, "section_id": 1244}, "so_25600484_25600508_0": {"length": 10, "quality": 0.625, "section_id": 750}}, "n4659": {"so_25600484_25600546_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 802}, "so_25600484_25600513_0": {"length": 9, "quality": 0.75, "section_id": 1351}, "so_25600484_25600508_0": {"length": 12, "quality": 0.75, "section_id": 823}}}, "25600513": {"Id": "25600513", "PostTypeId": "2", "Body": "<p><code>std::all_of</code> returns <code>true</code> if the range is empty. From <strong>25.2.1 All of</strong></p>\n<pre><code>template &lt;class InputIterator, class Predicate&gt;\nbool all_of(InputIterator first, InputIterator last, Predicate pred);\n</code></pre>\n<blockquote>\n<p id=\"so_25600484_25600513_0\">Returns: <code>true</code> if <code>[first,last)</code> is empty or if <code>pred(*i)</code> is <code>true</code> for\n  every iterator <code>i</code> in the range <code>[first,last)</code>, and <code>false</code> otherwise.</p>\n</blockquote>\n", "LastActivityDate": "2014-09-01T07:09:03.603", "Score": "6", "CreationDate": "2014-09-01T07:09:03.603", "ParentId": "25600484", "CommentCount": "0", "OwnerUserId": "661519"}, "25600508": {"Id": "25600508", "PostTypeId": "2", "Body": "<p>It's correct, it's behaviour of <a href=\"http://en.cppreference.com/w/cpp/algorithm/all_any_none_of\" rel=\"nofollow\">std::all_of</a> algorithm.</p>\n<blockquote>\n<p id=\"so_25600484_25600508_0\">Return value: true if unary predicate returns true for all elements in\n  the range, false otherwise. <strong>Returns true if the range is empty.</strong></p>\n</blockquote>\n", "LastActivityDate": "2014-09-01T07:08:44.120", "Score": "3", "CreationDate": "2014-09-01T07:08:44.120", "ParentId": "25600484", "CommentCount": "0", "OwnerUserId": "1498580"}, "25600546": {"Id": "25600546", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25600484_25600546_0\">I am trying to figure out why an empty container returns true for this\n  operation.</p>\n</blockquote>\n<p>Because it <em>is</em> true. There are zero elements in the container which are not equal to 0. Therefore <em>all</em> of the elements satisfy the condition of being equal to zero. They also all happen to satisfy the condition of not being equal to 0, since there are zero elements in the container which are equal to 0, so the reverse predicate would work as well.</p>\n<p>In fact, there are zero elements in the container which fail to satisfy any condition at all, therefore all of the elements of the container satisfy any condition. So any predicate passed to <code>all_of</code> will result in <code>all_of</code> returning <code>true</code> for an empty range. Even a predicate which just returns <code>true</code> or <code>false</code>, irrespective of its argument.</p>\n", "LastEditorUserId": "440119", "LastActivityDate": "2014-09-01T07:19:44.747", "Score": "5", "CreationDate": "2014-09-01T07:10:59.800", "ParentId": "25600484", "CommentCount": "0", "LastEditDate": "2014-09-01T07:19:44.747", "OwnerUserId": "440119"}, "25600484": {"ViewCount": "145", "Body": "<p>I just tried to initialised a container, which happened to be empty and came across the following phenomenon:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n#include &lt;algorithm&gt;\n\nint main(int argc, char *argv[])\n{\n  std::array&lt;int,NULL&gt; foo = {};\n  if ( std::all_of(foo.begin(), foo.end(), [](int i){return i==0;}) )\n  std::cout &lt;&lt; \"All the elements are zero.\\n\";\n  return 0;\n}\n</code></pre>\n<p>compiling with:</p>\n<pre><code>clang++ -std=c++11 -stdlib=libc++ -o test test.cpp\n</code></pre>\n<p>resulted in:</p>\n<pre><code>bash-3.2$ ./test\nAll the elements are zero.\n</code></pre>\n<p>I am trying to figure out why an empty container returns true for this operation. This problem might be related to: \n<a href=\"https://stackoverflow.com/questions/10793404/behaviour-of-stdlistbegin-when-list-is-empty\">Behaviour of std::list:begin() when list is empty</a></p>\n<p>However I could not find a proper answer to this particular question.</p>\n<p>Thank you for your time.</p>\n", "AcceptedAnswerId": "25600546", "Title": "c++ empty container iterator behaviour", "CreationDate": "2014-09-01T07:06:41.333", "Id": "25600484", "CommentCount": "5", "LastEditDate": "2017-05-23T11:49:33.547", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-01T07:19:44.747", "Score": "2", "OwnerUserId": "2584084", "Tags": "<c++><containers>", "AnswerCount": "3"}});