post_cb({"16543835": {"ParentId": "16542026", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think you're right in that the Standard isn't precise at this point:</p>\n<p>[expr.ref]/4</p>\n<blockquote>\n<p id=\"so_16542026_16543835_0\">If f is a (possibly overloaded) member function, function overload resolution (13.3) is used to determine whether <code>x.f</code> refers to a static or a non-static member function.</p>\n</blockquote>\n<p>As the first sub-bullet states:</p>\n<blockquote>\n<p id=\"so_16542026_16543835_1\">If it refers to a static member function and the type of E2 is \u201cfunction of parameter-type-list returning T\u201d, then E1.E2 is an lvalue; the expression designates the static member function. The type of E1.E2 is the same type as that of E2, namely \u201cfunction of parameter-type-list returning T\u201d.</p>\n</blockquote>\n<p>That is, <code>x.f</code> can be used to initialize a function ptr if <code>f</code> is static, whereas (see following sub-bullet) if <code>f</code> is not static, it can only be used in a function-call expression.</p>\n<p>But actually, overload resolution <strong>is not performed</strong> to select an overload from the name of an overloaded function outside the context of a function-call-expression:</p>\n<p>[over.over]/1</p>\n<blockquote>\n<p id=\"so_16542026_16543835_2\">A use of an overloaded function name without arguments is resolved in certain contexts to a function, a pointer to function or a pointer to member function for a specific function from the overload set. [...] <strong>The function selected is the one whose type is identical to the function type of the target type required in the context.</strong></p>\n</blockquote>\n<p>That is, an exact match, not invoking the overload resolution mechanism described in [over.match]. Therefore [expr.ref]/4 is incomplete, is doesn't describe your case of using <code>x.f</code> to initialize a function pointer/reference.</p>\n<p>As the <code>auto</code> keyword doesn't specify a target type (or according to [dcl.spec.auto]/6, the mechanism to deduce the type for <code>auto</code> fails), you cannot use <code>auto y = x.f;</code>:</p>\n<ul>\n<li><code>x.f</code> refers to a set of overloaded functions</li>\n<li>a function from this set needs to be selected</li>\n<li>selection is based upon overload resolution (in a function-call-expression, not applicable here) or based on the target type</li>\n<li>there's no target type here, or rather, the target type is equivalent to a template argument, therefore type deduction for <code>auto</code> fails</li>\n</ul>\n<hr>\n<p>The type of <code>x.f</code> therefore is</p>\n<ul>\n<li>in the context of a function call, directly refer to [expr.ref]/4</li>\n<li>otherwise, it is a set of overloaded functions, from which then the function is selected according to [over.over], whereupon the type is determined according to [expr.ref]/4</li>\n</ul>\n</hr>", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2013-05-14T13:03:23.383", "Id": "16543835", "Score": "3", "CreationDate": "2013-05-14T12:57:52.483", "LastActivityDate": "2013-05-14T13:03:23.383"}, "16542026": {"CommentCount": "2", "AcceptedAnswerId": "16543835", "PostTypeId": "1", "LastEditorUserId": "1131467", "CreationDate": "2013-05-14T11:29:36.757", "LastActivityDate": "2013-05-14T13:03:23.383", "LastEditDate": "2013-05-14T11:39:10.303", "ViewCount": "195", "FavoriteCount": "1", "Title": "Overload resolution without a parameter list on class member access?", "Id": "16542026", "Score": "3", "Body": "<pre><code>struct X\n{\n    void f(double) {}\n    static void f(int) {}\n};\n\nint main()\n{\n    X x;\n\n    auto y = x.f;\n}\n</code></pre>\n<p>gcc gives:</p>\n<pre><code>error: unable to deduce \u2018auto\u2019 from \u2018x.X::f\u2019\n</code></pre>\n<p><code>x.f</code> is a <em>class member access</em> <code>postfix-expression</code> documented in 5.2.5 [expr.ref]</p>\n<p>It effectively says:</p>\n<blockquote>\n<p id=\"so_16542026_16542026_0\">If <code>f</code> is a (possibly overloaded) member function, function overload resolution (13.3) is used to deter-\n  mine whether <code>x.f</code> refers to a static or a non-static member function.  (from N3485 5.2.5.4.3 )</p>\n</blockquote>\n<p>How can overload resolution be applied here - <code>x.f</code> doesn't have a parameter list with which to do overload resolution?</p>\n<p>Or am I missing something?</p>\n<p><strong>Update:</strong> If I change the <code>auto y = x.f</code> line to an <code>expression-statement</code>:</p>\n<pre><code>- auto y = x.f;\n+ x.f;\n</code></pre>\n<p>then gcc instead complains:</p>\n<pre><code>error: statement cannot resolve address of overloaded function\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1131467", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_16542026_16543835_0": {"section_id": 6007, "quality": 0.9333333333333333, "length": 14}, "so_16542026_16543835_2": {"section_id": 641, "quality": 0.967741935483871, "length": 30}, "so_16542026_16542026_0": {"section_id": 6007, "quality": 0.7222222222222222, "length": 13}, "so_16542026_16543835_1": {"section_id": 6007, "quality": 0.96, "length": 24}, "so_16542026_16542381_0": {"section_id": 6007, "quality": 0.8823529411764706, "length": 15}, "so_16542026_16542381_1": {"section_id": 641, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_16542026_16543835_0": {"section_id": 5775, "quality": 0.9333333333333333, "length": 14}, "so_16542026_16543835_2": {"section_id": 631, "quality": 0.967741935483871, "length": 30}, "so_16542026_16542026_0": {"section_id": 5775, "quality": 0.7222222222222222, "length": 13}, "so_16542026_16543835_1": {"section_id": 5775, "quality": 0.96, "length": 24}, "so_16542026_16542381_0": {"section_id": 5775, "quality": 0.8823529411764706, "length": 15}, "so_16542026_16542381_1": {"section_id": 631, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_16542026_16543835_0": {"section_id": 7506, "quality": 0.9333333333333333, "length": 14}, "so_16542026_16543835_2": {"section_id": 669, "quality": 0.8387096774193549, "length": 26}, "so_16542026_16542026_0": {"section_id": 7506, "quality": 0.7222222222222222, "length": 13}, "so_16542026_16543835_1": {"section_id": 7506, "quality": 0.96, "length": 24}, "so_16542026_16542381_0": {"section_id": 7506, "quality": 0.8823529411764706, "length": 15}, "so_16542026_16542381_1": {"section_id": 669, "quality": 0.9473684210526315, "length": 18}}}, "16542381": {"ParentId": "16542026", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Even if there's only one <code>x.f</code> valid in this context, the compiler <em>must</em> do the overload resolution before determining if the function is static or not.</p>\n<blockquote>\n<p id=\"so_16542026_16542381_0\"><em>\u00a75.2.5</em> \u00ab If E2 is a (possibly overloaded) member function, function overload\n  resolution (13.3) is used to determine whether E1.E2 refers to a\n  static or a non-static member function. \u00bb</p>\n</blockquote>\n<p>The overload resolution mechanism (as described in \u00a713.3 and \u00a713.4) need a valid context to select the correct candidate :</p>\n<blockquote>\n<p id=\"so_16542026_16542381_1\"><em>\u00a713.4.1</em> \u00ab A use of an overloaded function name without arguments is resolved in certain contexts to a function, a pointer to function or a\n  pointer to member function for a specific function from the overload\n  set \u00bb</p>\n</blockquote>\n<p><code>auto y = x.f;</code> is not a valid resolution context, you either have to drop the <code>auto</code> keyword or to use a <code>static_cast</code> to force the overload resolution :</p>\n<pre><code>X x;\n\nauto y = static_cast&lt;void (&amp;)(int)&gt;(x.f);\ny(1);\n\nauto z = static_cast&lt;void (X::*)(double)&gt;(&amp;X::f);\n(x.*z)(1.);\n</code></pre>\n<p>Note that you can't have a reference to a non-static member, only a pointer, as per <em>\u00a7 8.3.3</em> :</p>\n<blockquote>\n<p id=\"so_16542026_16542381_2\">There is no \u201creference-to-member\u201d type in C++</p>\n</blockquote>\n", "OwnerUserId": "1439688", "LastEditorUserId": "1439688", "LastEditDate": "2013-05-14T12:40:24.757", "Id": "16542381", "Score": "2", "CreationDate": "2013-05-14T11:48:15.823", "LastActivityDate": "2013-05-14T12:40:24.757"}});