post_cb({"7134218": {"Id": "7134218", "PostTypeId": "2", "Body": "<p>From the error message, it looks like you're not allowed to take the address of a parenthesized expression.  It's suggesting that you rewrite</p>\n<pre><code>fPtr = &amp;(myfoo::foo);  // main.cpp:14\n</code></pre>\n<p>to</p>\n<pre><code>fPtr = &amp;myfoo::foo;\n</code></pre>\n<p>This is due to a portion of the spec (\u00a75.3.1/3) that reads</p>\n<blockquote>\n<p id=\"so_7134197_7134218_0\">A pointer to member is only formed when an explicit &amp; is used and its operand is a qualified-id <strong>not enclosed in parentheses</strong> [...]</p>\n</blockquote>\n<p>(my emphasis).  I'm not sure why this is a rule (and I didn't actually know this until now), but this seems to be what the compiler is complaining about.</p>\n<p>Hope this helps!</p>\n", "LastActivityDate": "2011-08-20T19:44:04.567", "CommentCount": "8", "CreationDate": "2011-08-20T19:44:04.567", "ParentId": "7134197", "Score": "24", "OwnerUserId": "501557"}, "bq_ids": {"n4140": {"so_7134197_7134218_0": {"length": 10, "quality": 1.0, "section_id": 6067}}, "n3337": {"so_7134197_7134218_0": {"length": 10, "quality": 1.0, "section_id": 5835}}, "n4659": {"so_7134197_7134218_0": {"length": 10, "quality": 1.0, "section_id": 7563}}}, "7134197": {"ViewCount": "16082", "Body": "<p>I found something interesting. The error message says it all. What is the reason behind not allowing parentheses while taking the address of a non-static member function? I compiled it on gcc 4.3.4.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass myfoo{\n    public:\n     int foo(int number){\n         return (number*10);\n     }\n};\n\nint main (int argc, char * const argv[]) {\n\n    int (myfoo::*fPtr)(int) = NULL;\n\n    fPtr = &amp;(myfoo::foo);  // main.cpp:14\n\n    return 0;\n\n}\n</code></pre>\n<blockquote>\n<p id=\"so_7134197_7134197_0\">Error: main.cpp:14: error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say '&amp;myfoo::foo'</p>\n</blockquote>\n", "AcceptedAnswerId": "7134218", "Title": "Error with address of parenthesized member function", "CreationDate": "2011-08-20T19:39:00.947", "Id": "7134197", "CommentCount": "8", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2011-08-21T13:45:10.703", "LastEditorUserId": "560648", "LastActivityDate": "2011-08-21T14:18:11.777", "Score": "32", "OwnerUserId": "528724", "Tags": "<c++><function-pointers><pointer-to-member>", "AnswerCount": "2"}, "7138582": {"Id": "7138582", "PostTypeId": "2", "Body": "<p>Imagine this code:</p>\n<pre><code>struct B { int data; };\nstruct C { int data; };\n\nstruct A : B, C {\n  void f() {\n    // error: converting \"int B::*\" to \"int*\" ?\n    int *bData = &amp;B::data;\n\n    // OK: a normal pointer\n    int *bData = &amp;(B::data);\n  }\n};\n</code></pre>\n<p>Without the trick with the parentheses, you would not be able to take a pointer directly to B's data member (you would need base-class casts and games with <code>this</code> - not nice). </p>\n<hr>\n<p>From the ARM:</p>\n<blockquote>\n<p id=\"so_7134197_7138582_0\">Note that the address-of operator must be explicitly used to get a pointer to member; there is no implicit conversion ... Had there been, we would have an ambiguity in the context of a member function ... For example, </p>\n<pre><code>void B::f() {\n    int B::* p = &amp;B::i; // OK\n    p = B::i; // error: B::i is an int\n    p = &amp;i; // error: '&amp;i'means '&amp;this-&gt;i' which is an 'int*'\n\n    int *q = &amp;i; // OK\n    q = B::i; // error: 'B::i is an int\n    q = &amp;B::i; // error: '&amp;B::i' is an 'int B::*'\n}\n</code></pre>\n</blockquote>\n<p>The IS just kept this pre-Standard concept and explicitly mentioned that parentheses make it so that you don't get a pointer to member. </p>\n</hr>", "LastEditorUserId": "34509", "LastActivityDate": "2011-08-21T14:18:11.777", "Score": "14", "CreationDate": "2011-08-21T13:42:30.673", "ParentId": "7134197", "CommentCount": "2", "OwnerUserId": "34509", "LastEditDate": "2011-08-21T14:18:11.777"}});