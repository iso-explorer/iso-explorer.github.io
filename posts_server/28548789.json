post_cb({"bq_ids": {"n4140": {"so_28548789_28549139_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5507}}, "n3337": {"so_28548789_28549139_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5293}}, "n4659": {"so_28548789_28549139_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6942}}}, "28549139": {"Id": "28549139", "PostTypeId": "2", "Body": "<p>[namespace.udecl]/p18:</p>\n<blockquote>\n<p id=\"so_28548789_28549139_0\">The alias created by the <em>using-declaration</em> has the usual\n  accessibility for a <em>member-declaration</em>.</p>\n</blockquote>\n<p>Not much to say here. The name <code>B::C</code> is publicly accessible, and the code is well-formed. Just another MSVC bug.</p>\n", "LastActivityDate": "2015-02-16T19:41:57.020", "CommentCount": "0", "CreationDate": "2015-02-16T19:41:57.020", "ParentId": "28548789", "Score": "4", "OwnerUserId": "2756719"}, "28548789": {"ViewCount": "107", "Body": "<p>Consider the following (artificial) example:</p>\n<pre><code>class A {\n public:\n  template &lt;typename T&gt;\n  class C {};\n};\n\nclass B : private A {\n public:\n  using A::C;\n};\n\nint main() {\n  B::C&lt;int&gt; c;\n}\n</code></pre>\n<p>It compiles successfully with both GCC and Clang, but Visual C++ 2010 gives the following error:</p>\n<blockquote>\n<p id=\"so_28548789_28548789_0\">test.cpp(13): error C2247: 'A::C' not accessible because 'B' uses 'private' to inherit from 'A'</p>\n</blockquote>\n<p>Is this a bug in Visual C++ or this code is indeed invalid?</p>\n<p>If <code>C</code> is not a template, the code compiles on all compilers.</p>\n", "AcceptedAnswerId": "28549139", "Title": "Why is a member template from private base class introduced with a using declaration inaccessible?", "CreationDate": "2015-02-16T19:19:54.557", "Id": "28548789", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-02-16T19:41:57.020", "Score": "3", "OwnerUserId": "471164", "Tags": "<c++><visual-c++><gcc><compiler-errors><clang>", "AnswerCount": "1"}});