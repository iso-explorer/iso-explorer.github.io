post_cb({"bq_ids": {"n4140": {"so_27741698_27741897_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 7172}}, "n3337": {"so_27741698_27741897_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 6916}}, "n4659": {"so_27741698_27741897_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 8680}}}, "27741884": {"Id": "27741884", "PostTypeId": "2", "Body": "<p>It's perfectly safe to do that. In fact, it is an often used technique when putting in practice RAII. The compiler will not optimize out any local variable which has <strong>non-trivial</strong> constructor or destructor. Check out <a href=\"https://stackoverflow.com/questions/3899223/what-is-a-non-trivial-constructor-in-c\">What is a non-trivial constructor in C++</a>.</p>\n<p>To also avoid the compiler warning regarding unused local variables, you can use <strong>Q_UNUSED</strong> macro.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-02T12:01:27.417", "Score": "2", "CreationDate": "2015-01-02T12:01:27.417", "ParentId": "27741698", "CommentCount": "0", "OwnerUserId": "3183129", "LastEditDate": "2017-05-23T11:51:09.090"}, "27741897": {"Id": "27741897", "PostTypeId": "2", "Body": "<p>The compiler is not allowed to optimize away an automatic object whose destructors or initlization has side effects, we can see this by going to the draft standard section <code>3.7.3</code>:</p>\n<blockquote>\n<p id=\"so_27741698_27741897_0\">If a variable with automatic storage duration has initialization or a\n  destructor with side effects, it shall not be destroyed before the end\n  of its block, nor shall it be eliminated as an optimization even if it\n  appears to be unused, except that a class object or its copy/move may\n  be eliminated as specified in 12.8.</p>\n</blockquote>\n", "LastActivityDate": "2015-01-02T12:02:23.793", "CommentCount": "0", "CreationDate": "2015-01-02T12:02:23.793", "ParentId": "27741698", "Score": "6", "OwnerUserId": "1708801"}, "27741738": {"Id": "27741738", "PostTypeId": "2", "Body": "<p>If you can observe any different the the compiler is not allowed to remove the object.</p>\n<p>In this case the constructor/destructor have side effects, so the compiler will not remove them.</p>\n<p>The idea of delegating effects to construction/destruction of local stack-based objects is used often; for example:</p>\n<pre><code>{\n    Locker L(my_lock);\n    ...\n}\n</code></pre>\n<p>This way the code in <code>...</code> will be executing with a lock being held, and the lock will be automatically released when you leave the scope for any reason (just getting out of the block, executing a <code>return</code> or and if exception is thrown while inside).</p>\n", "LastActivityDate": "2015-01-02T11:50:15.650", "CommentCount": "0", "CreationDate": "2015-01-02T11:50:15.650", "ParentId": "27741698", "Score": "0", "OwnerUserId": "320726"}, "27741698": {"ViewCount": "834", "Body": "<p>I use following class to automatically set waiting cursor in the beginning of a certain function and reset the cursor when function returns.</p>\n<pre><code>class WaitCursorSetter\n{\npublic:\n    WaitCursorSetter() {QApplication::setOverrideCursor(Qt::WaitCursor);}\n    virtual ~WaitCursorSetter() {QApplication::restoreOverrideCursor();}\n};\n</code></pre>\n<p>I create a local <code>WaitCursorSetter</code> object when function begins. Since waiting cursor is reset in the destructor of object, I do not have to reset the cursor before each and every return statement in the method since destructor gets called when function returns and object goes out of scope.</p>\n<p>If the compiler optimized out the unreferenced <code>WaitCursorSetter</code> object, this will not work. My problem is, is the compiler allowed to optimize out this object?</p>\n", "AcceptedAnswerId": "27741897", "Title": "Is C++ compiler allowed to optimize out unreferenced local objects", "CreationDate": "2015-01-02T11:47:26.960", "Id": "27741698", "CommentCount": "0", "LastEditDate": "2015-01-02T16:08:52.417", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-01-02T16:08:52.417", "Score": "7", "OwnerUserId": "1015678", "Tags": "<c++><qt><optimization>", "AnswerCount": "3"}});