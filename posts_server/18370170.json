post_cb({"18370170": {"ViewCount": "137", "Body": "<p>I have the following 32 bit aligned structure with the necessary padding to ensure 32 bit alignment of the <code>i32</code> data member:</p>\n<pre><code>struct\n{\n    std::uint8_t  i8; \n    std::uint32_t i32;\n} x, y = {0};\n</code></pre>\n<p>Is writing in the padding bits has a well defined behavior? For instance, in the code:</p>\n<pre><code>reinterpret_cast&lt;std::uint32_t&amp;&gt;(x) = 256u;\n</code></pre>\n<p>is the padding part <em>always</em> written and read as 1?</p>\n<p>Another question: </p>\n<p>Is the padding <em>always</em> initialized to 0 for <code>y</code>?</p>\n<p>I understand so as C++ <strong>[dcl.init]</strong> states:</p>\n<blockquote>\n<p id=\"so_18370170_18370170_0\">To zero-initialize an object or reference of type T means: if T is a\n  non-union class type, each non-static data member and each base-class\n  subobject is zero-initialized and padding is initialized to zero bits</p>\n</blockquote>\n<p>However, I'm not seeing this behavior in Microsoft compiler (vc++ v120), example:</p>\n<pre><code>reinterpret_cast&lt;std::uint32_t&amp;&gt;(y) == 0u\n</code></pre>\n<p>doesn't evaluate to <code>true</code>. It could be a missing feature or I misunderstood the phrase from the standard.</p>\n", "Title": "reading and writing in the padding bits of a structure", "CreationDate": "2013-08-22T01:16:55.330", "LastActivityDate": "2014-01-29T19:13:44.137", "CommentCount": "2", "LastEditDate": "2014-01-29T19:13:44.137", "PostTypeId": "1", "LastEditorUserId": "845092", "Id": "18370170", "Score": "2", "OwnerUserId": "1003615", "Tags": "<c++><casting><padding><undefined-behavior>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18370170_18370170_0": {"length": 20, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_18370170_18370170_0": {"length": 20, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_18370170_18370170_0": {"length": 18, "quality": 0.9, "section_id": 4047}}}, "18370378": {"Id": "18370378", "PostTypeId": "2", "Body": "<p>I am not an expert in padding but I don't believe it is possible to guarantee any padding, at least not without special and possibly implementation-specific options.</p>\n<p>It is not defined behavior to use reinterpret_cast for anything other than to convert back to the original pointer. reinterpret_cast means you are doing something dodgy in your code.</p>\n<p>This question talks about what padding is initialized to\n<a href=\"https://stackoverflow.com/questions/13056364/is-zero-initialization-of-structures-guaranteed-to-wipe-padded-areas\">Is zero initialization of structures guaranteed to wipe padded areas?</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-22T01:45:40.663", "Score": "0", "CreationDate": "2013-08-22T01:45:40.663", "ParentId": "18370170", "CommentCount": "1", "OwnerUserId": "2068573", "LastEditDate": "2017-05-23T11:52:04.110"}});