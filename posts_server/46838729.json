post_cb({"46838940": {"ParentId": "46838729", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2017-10-19T21:09:52.297", "Score": "8", "LastEditorUserId": "149138", "LastEditDate": "2017-10-20T22:21:29.080", "Id": "46838940", "OwnerUserId": "1505939", "Body": "<p><strong>No</strong>, <code>realloc</code> cannot be used to safely move objects, even of trivially copyable types, because <code>realloc</code> cannot create new objects in uninitialized storage. </p>\n<p>In particular, according to C++14 [basic.life]/1:</p>\n<blockquote>\n<p id=\"so_46838729_46838940_0\">The lifetime of an object of type T ends when:</p>\n<ul>\n<li><p id=\"so_46838729_46838940_1\">if T is a class type with a non-trivial destructor (12.4), the destructor call starts, or</p></li>\n<li><p id=\"so_46838729_46838940_2\">the storage which the object occupies is reused or released.</p></li>\n</ul>\n</blockquote>\n<p>Calling <code>realloc</code> releases or reuses the storage (even if a reallocation doesn't occur, I'd argue, although that is moot for your question). So the lifetime of the objects ends.</p>\n<p>The cases when an object is created is covered by [intro.objects]/1:</p>\n<blockquote>\n<p id=\"so_46838729_46838940_3\">An object is created by a definition (3.1), by a new-expression (5.3.4)\n  or by the implementation (12.2) when needed.</p>\n</blockquote>\n<p>This does not include <code>realloc</code>; so the realloc call ends the lifetime of the old objects and does not create new objects. </p>\n<p>Not only does this imply that <code>realloc</code> isn't suitable to copy trivially copyable objects, it also implies that using <code>malloc</code> or <code>operator new(size_t)</code> to obtain uninitialized storage, followed by a <code>memcpy</code> from an existing object into that storage does not create a usable copy of the object as the destination object has also not been <em>created</em> in that case.</p>\n<hr>\n<p>See also: <a href=\"https://stackoverflow.com/questions/40873520/\">reinterpret_cast creating a trivially-default-constructible object</a>, or <a href=\"https://stackoverflow.com/questions/30114397/\">constructing a trivially copyable object with memcpy</a> for further discussion of the fact that copying bytes to a new location does not create an object in that location.</p>\n</hr>", "LastActivityDate": "2017-10-20T22:21:29.080"}, "46860463": {"ParentId": "46838729", "CommentCount": "32", "CreationDate": "2017-10-21T05:50:52.000", "OwnerUserId": "963864", "PostTypeId": "2", "Id": "46860463", "Score": "-3", "Body": "<p><strong>3.8 Object lifetime</strong> is clear:</p>\n<blockquote>\n<p id=\"so_46838729_46860463_0\">The lifetime of an object of type T begins when:</p>\n<p id=\"so_46838729_46860463_1\">1.1 storage with the proper alignment and size for type T is obtained, and</p>\n<p id=\"so_46838729_46860463_2\">1.2 if the object has non-vacuous initialization, its initialization is complete.</p>\n</blockquote>\n<p>And same of end of lifetime. You can ignore the garbage in the other parts of the std, like [intro]!</p>\n", "LastActivityDate": "2017-10-21T05:50:52.000"}, "46838729": {"CommentCount": "10", "ViewCount": "134", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2017-10-19T20:53:51.573", "LastActivityDate": "2017-10-25T00:24:22.650", "Title": "Can the storage of trivially copyable objects be safely reallocated with realloc?", "LastEditDate": "2017-10-25T00:24:22.650", "Id": "46838729", "Score": "6", "Body": "<p>I know that <a href=\"http://en.cppreference.com/w/cpp/concept/TriviallyCopyable\" rel=\"nofollow noreferrer\">trivially copyable</a> objects can safely be copied my <code>malloc</code> into an appropriate storage location<sup>1</sup> and that the destination object will have the same value as the source. </p>\n<p>Is this also possible with <code>realloc</code>? That is, if <code>realloc</code> some storage containing some objects of type <code>T</code>, and <code>realloc</code> decides to move and copy the block, will the objects in the newly allocated storage be intact and have started their lifetime, and will the lifetime of the objects in the old storage be safely ended?</p>\n<hr>\n<p><sup>1</sup> While asking this question, I had assumed that an \"appropriate storage location\" included uninitialized storage of suitable alignment and size, but as <a href=\"https://stackoverflow.com/a/46838940/149138\">M.M's answer</a> below argues this isn't actually well supported by the standard. That would make <code>realloc</code> questionable since it is always copying into uninitialized storage.</p>\n</hr>", "Tags": "<c++><c++11><language-lawyer><realloc><object-lifetime>", "OwnerUserId": "149138", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46838729_46838940_0": {"section_id": 7189, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46838940_1": {"section_id": 7189, "quality": 0.875, "length": 7}, "so_46838729_46838940_3": {"section_id": 5790, "quality": 0.7777777777777778, "length": 7}, "so_46838729_46860463_0": {"section_id": 7189, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46860463_1": {"section_id": 7189, "quality": 1.0, "length": 6}, "so_46838729_46860463_2": {"section_id": 7189, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46838940_2": {"section_id": 7189, "quality": 1.0, "length": 5}}, "n3337": {"so_46838729_46838940_0": {"section_id": 6933, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46838940_1": {"section_id": 6933, "quality": 0.875, "length": 7}, "so_46838729_46838940_3": {"section_id": 5563, "quality": 0.7777777777777778, "length": 7}, "so_46838729_46860463_2": {"section_id": 6933, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46860463_1": {"section_id": 6933, "quality": 1.0, "length": 6}, "so_46838729_46838940_2": {"section_id": 6933, "quality": 1.0, "length": 5}, "so_46838729_46860463_0": {"section_id": 6933, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_46838729_46838940_0": {"section_id": 8697, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46838940_1": {"section_id": 8697, "quality": 0.875, "length": 7}, "so_46838729_46860463_0": {"section_id": 8697, "quality": 0.8333333333333334, "length": 5}, "so_46838729_46860463_2": {"section_id": 8697, "quality": 1.0, "length": 6}, "so_46838729_46860463_1": {"section_id": 8697, "quality": 1.0, "length": 6}, "so_46838729_46838940_2": {"section_id": 8701, "quality": 1.0, "length": 5}}}});