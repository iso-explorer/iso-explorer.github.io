post_cb({"bq_ids": {"n4140": {"so_21120788_21177636_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 634}}, "n3337": {"so_21120788_21177636_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 624}}, "n4659": {"so_21120788_21177636_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 662}}}, "21120788": {"ViewCount": "308", "Body": "<p>can you explain how STL containers handle assignment operator with empty initializer list?</p>\n<p>when i'll do something like this:</p>\n<pre><code>vector&lt;int&gt; v;\nv = { };\n</code></pre>\n<p>the function that is called is <strong>not</strong>:</p>\n<pre><code>vector&amp; operator= (initializer_list&lt;value_type&gt; il);\n</code></pre>\n<p>but:</p>\n<pre><code>vector&amp; operator= (vector&amp;&amp; x);\n</code></pre>\n<p>on the other hand, when i'll do something similar with my own class:</p>\n<pre><code>struct A {\n    A&amp; operator= (const A&amp;) { return *this; }\n    A&amp; operator= (A&amp;&amp;) { return *this; }\n    A&amp; operator= (initializer_list&lt;int&gt;) { return *this; }\n};\n\n/* ... */\n\nA a;\na = { };\n</code></pre>\n<p>the code does not compile on VS2013, and says:</p>\n<pre><code>error C2593: 'operator =' is ambiguous\n</code></pre>\n<p>if the list is not empty, it works fine, it just calls the function with initializer list. the problem appears only when the list is empty, on vector it calls the rvalue assignment operator, on my class it gives error.</p>\n<p>how this situation is handled in vector and other containers?</p>\n", "AcceptedAnswerId": "21177636", "Title": "assignment operator on empty inizializer_list", "CreationDate": "2014-01-14T18:07:53.273", "Id": "21120788", "CommentCount": "9", "LastEditDate": "2014-01-17T15:03:48.090", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2014-01-18T03:13:57.727", "Score": "5", "OwnerUserId": "3126358", "Tags": "<c++><visual-studio-2013><initializer-list><overload-resolution><compiler-bug>", "AnswerCount": "1"}, "21177636": {"Id": "21177636", "PostTypeId": "2", "Body": "<p>This appears to be a bug clang(<em><a href=\"http://coliru.stacked-crooked.com/a/b8b7e0042fed07dd\" rel=\"nofollow\">see it live</a></em>) and gcc(<em><a href=\"http://coliru.stacked-crooked.com/a/1c126fb9a976b112\" rel=\"nofollow\">see it live</a></em>) accept this program and choose the <em>std::initializer_list</em> overload which looks correct since that is an <em>exact match</em>, this is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> section section <code>13.3.3.1.5</code> <em>List-initialization sequence</em> paragraph <em>2</em> from the example:</p>\n<pre><code>void f(std::initializer_list&lt;int&gt;);\nf( {1,2,3} ); // OK: f(initializer_list&lt;int&gt;) identity conversion\nf( {\u2019a\u2019,\u2019b\u2019} ); // OK: f(initializer_list&lt;int&gt;) integral promotion\nf( {1.0} ); // error: narrowing\n</code></pre>\n<p>we have an <em>identity conversion</em> which is an <em>exact match</em>.</p>\n<p>For the reference overloads we go to paragraph <em>5</em> it says (<em>emphasis mine going forward</em>):</p>\n<blockquote>\n<p id=\"so_21120788_21177636_0\">Otherwise, if the parameter is a reference, see 13.3.3.1.4. [ Note: <strong>The rules in this section will apply for initializing the underlying temporary for the reference</strong>. \u2014end note ]</p>\n</blockquote>\n<p>indicates that temporary is created an then we can apply the rules to resulting temporary. This will be a <em>User-defined conversion</em> which is worse than an <em>exact match</em>.</p>\n<p>So this should not be ambiguous.</p>\n<p><b>Update</b></p>\n<p>Looks like there are two active bugs related to this:</p>\n<ul>\n<li><a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/792355/compiler-confused-about-whether-to-use-a-initializer-list-assignment-operator\" rel=\"nofollow\">Compiler confused about whether to use a initializer_list assignment operator</a></li>\n<li><a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/806184/vc-12-rc-fails-to-choose-between-initializer-list-enabled-assignment-operator-and-canonical-one-for-std-pair-list-elements\" rel=\"nofollow\">VC++ 12 RC fails to choose between initializer_list enabled assignment operator and canonical one for std::pair list elements</a></li>\n</ul>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-01-18T03:13:57.727", "Score": "3", "CreationDate": "2014-01-17T04:02:00.397", "ParentId": "21120788", "CommentCount": "6", "OwnerUserId": "1708801", "LastEditDate": "2014-01-18T03:13:57.727"}});