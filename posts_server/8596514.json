post_cb({"bq_ids": {"n4140": {"so_8596514_8596656_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 1455}}, "n3337": {"so_8596514_8596656_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 1449}}, "n4659": {"so_8596514_8596656_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 1593}}}, "8596514": {"ViewCount": "280", "Body": "<p>I was using set_intersection from the STL in C++, and I was wondering if there was any rule on which set would be used when creating the intersection.  Or is the behavior undefined, and potentially implementation dependent.  </p>\n<p>On linux using g++ (ver. 4.4.6), it seems that it always uses the first set that is passed into the set_difference function, but I'm not sure I can rely on this.  As you can see from the example below, there is other data in each set member that is not considered in the operator&lt; function.</p>\n<pre><code>#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass myClass {\n  public:\n    myClass(int val, int data)\n        : value(val),\n          metaData(data) {}\n\n    // Only consider the value, not metaData\n    bool operator&lt;(const myClass &amp;other) const{\n        return value &lt; other.value;\n    }\n\n    void print() const {\n        cout &lt;&lt; \"Value: \" &lt;&lt; value &lt;&lt; \" metaData: \" &lt;&lt; metaData &lt;&lt; endl;\n    }\n\n  private:\n    int value;\n    int metaData;\n\n};\n\nint main() {\n    // Create two sets with some data\n    set&lt;myClass&gt; set1;\n    set&lt;myClass&gt; set2;\n    set&lt;myClass&gt; intersect;\n\n    // Set1 has 1, 2, 3, 4\n    set1.insert(myClass(1,-10));\n    set1.insert(myClass(2,-10));\n    set1.insert(myClass(3,-10));\n    set1.insert(myClass(4,-10));\n\n    // Set2 has -1, 2, 3\n    set2.insert(myClass(-1, 10));\n    set2.insert(myClass(2, 10));\n    set2.insert(myClass(3, 10));\n\n    set_intersection(set1.begin(), set1.end(),\n                   set2.begin(), set2.end(),\n                   inserter(intersect, intersect.begin()));\n\n    for_each(intersect.begin(), intersect.end(),\n             mem_fun_ref(&amp;myClass::print));\n\n}\n// The output of this code is \n// Value: 2 metaData: -10\n// Value: 3 metaData: -10\n</code></pre>\n", "AcceptedAnswerId": "8596656", "Title": "When using std::set_intersection, which set is used to copy the values into the destination set?", "CreationDate": "2011-12-21T21:19:17.223", "Id": "8596514", "CommentCount": "3", "LastEditDate": "2011-12-21T21:30:42.400", "PostTypeId": "1", "LastEditorUserId": "49514", "LastActivityDate": "2011-12-21T21:31:12.870", "Score": "0", "OwnerUserId": "49514", "Tags": "<c++><stl>", "AnswerCount": "2"}, "8596609": {"Id": "8596609", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/algorithm/set_difference/\" rel=\"nofollow\">here</a>, </p>\n<blockquote>\n<p id=\"so_8596514_8596609_0\">The difference of two sets is formed by the elements that are present\n  in the first set, but not in the second one.</p>\n</blockquote>\n<p>I know of no instance where this site has provided incorrect information.</p>\n", "LastActivityDate": "2011-12-21T21:26:32.753", "CommentCount": "1", "CreationDate": "2011-12-21T21:26:32.753", "ParentId": "8596514", "Score": "1", "OwnerUserId": "512947"}, "8596656": {"Id": "8596656", "PostTypeId": "2", "Body": "<p>Assuming you're asking about <code>set_intersection</code> as in the question title, rather than <code>set_difference</code> as in the code sample, the C++ standard is explicit:</p>\n<p><code>C++03 \u00a725.3.5.3[lib.set.intersection]/5</code></p>\n<blockquote>\n<p id=\"so_8596514_8596656_0\">if an element is present in both ranges, the one from the first range is copied</p>\n</blockquote>\n<p>Current standard makes this point even stronger, mostly for the sake of multisets which are now stable with regards to the order of equivalent keys:</p>\n<p><code>C++11 \u00a725.4.5.3[set.intersection]/5</code></p>\n<blockquote>\n<p id=\"so_8596514_8596656_1\">If <code>[first1,last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2,\n  last2)</code> contains <code>n</code> elements that are equivalent to them, the first <code>min(m, n)</code> elements shall be copied from the first range to the output range, in order.</p>\n</blockquote>\n<p>As for <code>set_difference</code>, it simply copies the elements of the first sorted sequence that are not present in the second.</p>\n", "LastActivityDate": "2011-12-21T21:31:12.870", "CommentCount": "1", "CreationDate": "2011-12-21T21:31:12.870", "ParentId": "8596514", "Score": "5", "OwnerUserId": "273767"}});