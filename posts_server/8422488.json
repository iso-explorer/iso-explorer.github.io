post_cb({"bq_ids": {"n4140": {"so_8422488_8422694_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6975}, "so_8422488_8423121_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6975}, "so_8422488_8422694_1": {"length": 8, "quality": 1.0, "section_id": 5862}}, "n3337": {"so_8422488_8422694_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6721}, "so_8422488_8422694_1": {"length": 8, "quality": 1.0, "section_id": 5632}, "so_8422488_8423121_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6721}}, "n4659": {"so_8422488_8422694_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 8474}, "so_8422488_8422694_1": {"length": 8, "quality": 1.0, "section_id": 7345}}}, "8423121": {"Id": "8423121", "PostTypeId": "2", "Body": "<p>10/2:</p>\n<blockquote>\n<p id=\"so_8422488_8423121_0\">The type denoted by a base-type-speci\ufb01er shall be a class type that is not an incompletely de\ufb01ned class</p>\n</blockquote>\n<p>It is one manifestation of <em>the</em> bug of MSVC: its lack of two-phase name resolution.</p>\n", "LastEditorUserId": "998299", "LastActivityDate": "2011-12-07T22:09:04.777", "Score": "0", "CreationDate": "2011-12-07T21:52:55.387", "ParentId": "8422488", "CommentCount": "2", "OwnerUserId": "775806", "LastEditDate": "2011-12-07T22:09:04.777"}, "8422488": {"ViewCount": "1008", "Body": "<p>Is this valid C++?</p>\n<pre><code>template&lt;class category&gt;\nclass any_iterator : public any_iterator&lt;void&gt;\n{ \npublic:\n        typedef any_iterator&lt;void&gt; any_iter_void;\n\n        any_iterator() : any_iter_void() {}\n};\ntemplate&lt;&gt;\nclass any_iterator&lt;void&gt;\n{ \npublic:\n        typedef any_iterator&lt;void&gt; any_iter_void;\n\n        any_iterator() {}\n        void foo() {};\n};\n\nint main() {\n    any_iterator&lt;int&gt; a;\n    a.foo();\n}\n</code></pre>\n<p>MSVC10 accepts it with no errors/warnings on <code>\\WALL</code>, but <a href=\"http://ideone.com/THHNh\" rel=\"nofollow\">gcc-4.5.1</a> complains: </p>\n<blockquote>\n<p id=\"so_8422488_8422488_0\">prog.cpp:3:5: error: invalid use of incomplete type 'class any_iterator'<br>\n  prog.cpp:2:11: error: declaration of 'class any_iterator'<br>\n  prog.cpp: In function 'int main()':<br>\n  prog.cpp:21:11: error: 'class any_iterator' has no member named 'foo'<br>\n  prog.cpp: In constructor 'any_iterator::any_iterator() [with category = int]':<br>\n  prog.cpp:20:27:   instantiated from here<br>\n  prog.cpp:7:44: error: type 'any_iterator' is not a direct base of 'any_iterator'  </br></br></br></br></br></br></p>\n</blockquote>\n<p>Can someone quote the standard showing if this should or should not compile?  I think this is a bug in MSVC.</p>\n<p>As a note, I know the correct thing to do is to declare the class, specialize the root, <em>then</em> define the general case, and that's what I'll do to my code, but I was wondering which compiler is wrong here?</p>\n", "AcceptedAnswerId": "8422694", "Title": "inheriting from class of specialized self?", "CreationDate": "2011-12-07T21:03:33.627", "Id": "8422488", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2011-12-07T22:09:04.777", "Score": "4", "OwnerUserId": "845092", "Tags": "<c++><templates><inheritance><template-specialization>", "AnswerCount": "2"}, "8422694": {"Id": "8422694", "PostTypeId": "2", "Body": "<p>To inherit from a type, that type must be complete. A little rearranging solves things:</p>\n<pre><code>template&lt;class category&gt;\nclass any_iterator;\n\ntemplate&lt;&gt;\nclass any_iterator&lt;void&gt;\n{ \npublic:\n    typedef any_iterator&lt;void&gt; any_iter_void;\n\n    any_iterator() { }\n    void foo() { }\n};\n\ntemplate&lt;class category&gt;\nclass any_iterator : public any_iterator&lt;void&gt;\n{ \npublic:\n    typedef any_iterator&lt;void&gt; any_iter_void;\n\n    any_iterator() : any_iter_void() { }\n};\n\nint main()\n{\n    any_iterator&lt;int&gt; a;\n    a.foo();\n}\n</code></pre>\n<hr>\n<p>Token standard quotes:</p>\n<p>C++11, \u00a710/2:</p>\n<blockquote>\n<p id=\"so_8422488_8422694_0\">The type denoted by a <em>base-type-specifier</em> shall be a class type that is not an incompletely defined class; this class is called a <em>direct base class</em> for the class being defined.</p>\n</blockquote>\n<p>\u00a79.2/2:</p>\n<blockquote>\n<p id=\"so_8422488_8422694_1\">A class is considered a completely-defined object type (or complete type) at the closing <code>}</code> of the <em>class-specifier</em>.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "636019", "LastActivityDate": "2011-12-07T21:47:01.327", "Score": "4", "CreationDate": "2011-12-07T21:18:09.613", "ParentId": "8422488", "CommentCount": "15", "OwnerUserId": "636019", "LastEditDate": "2011-12-07T21:47:01.327"}});