post_cb({"47352963": {"ParentId": "47352663", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C++, a zero-size array is illegal.</p>\n<p><strong>ISO/IEC 14882:2003 8.3.4/1:</strong></p>\n<blockquote>\n<p id=\"so_47352663_47352963_0\">[..] If the <em>constant-expression</em> (5.19) is present, <strong>it shall be an integral constant expression and its value shall be greater than zero</strong>. The constant expression specifies the bound of (number of elements in) the array. If the value of the constant expression is <code>N</code>, the array has <code>N</code> elements numbered <code>0</code> to <code>N-1</code>, and the type of the identifier of <code>D</code> is \u201c<em>derived-declarator-type-list</em> array of <code>N</code> T\u201d. <em>[..]</em></p>\n</blockquote>\n<p>g++ requires the <code>-pedantic</code> flag to give a warning on a zero-sized array.</p>\n", "OwnerUserId": "6935629", "LastEditorUserId": "63550", "LastEditDate": "2017-11-19T00:11:05.663", "Id": "47352963", "Score": "16", "CreationDate": "2017-11-17T14:28:56.547", "LastActivityDate": "2017-11-19T00:11:05.663"}, "47352663": {"CommentCount": "8", "CreationDate": "2017-11-17T14:14:55.827", "PostTypeId": "1", "AcceptedAnswerId": "47356922", "LastEditorUserId": "2805305", "LastActivityDate": "2017-11-22T11:04:27.803", "LastEditDate": "2017-11-22T11:04:27.803", "ViewCount": "4346", "FavoriteCount": "8", "Title": "How can this structure have sizeof == 0?", "Id": "47352663", "Score": "74", "Body": "<p>There is an old post asking for a construct for which <code>sizeof</code> would return <code>0</code>. There are some high score answers from high reputation users saying that by the standard no type or variable can have sizeof 0. And I agree 100% with that.</p>\n<p>However there is <a href=\"https://stackoverflow.com/a/47352302/2805305\">this new answer</a> which presents this solution:</p>\n<pre><code>struct ZeroMemory {\n    int *a[0];\n};\n</code></pre>\n<p>I was just about to down-vote and comment on it, but time spent here taught me to check even the things that I am 100% sure on. So... to my surprise both <code>gcc</code> and <code>clang</code> show the same results: <code>sizeof(ZeroMemory) == 0</code>. Even more, sizeof a variable is <code>0</code>:</p>\n<pre><code>ZeroMemory z{};\nstatic_assert(sizeof(z) == 0); // Awkward...\n</code></pre>\n<p>Whaaaat...?</p>\n<p><a href=\"https://godbolt.org/g/hyVr9u\" rel=\"noreferrer\">Godbolt link</a></p>\n<p>How is this possible?</p>\n", "Tags": "<c++><language-lawyer><sizeof>", "OwnerUserId": "2805305", "AnswerCount": "4"}, "47354947": {"ParentId": "47352663", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Zero length arrays are an extension by GCC and Clang. Applying <code>sizeof</code> to zero-length arrays <a href=\"https://gcc.gnu.org/onlinedocs/gcc-5.1.0/gcc/Zero-Length.html\" rel=\"nofollow noreferrer\">evaluates to zero</a>.</p>\n<p>A C++ class (empty) can't have size <code>0</code>, but note that the class <code>ZeroMemory</code> is not empty. It has a named member with size <code>0</code> and applying <code>sizeof</code> will return zero.</p>\n", "OwnerUserId": "2455888", "LastEditorUserId": "63550", "LastEditDate": "2017-11-19T00:12:16.257", "Id": "47354947", "Score": "4", "CreationDate": "2017-11-17T16:16:42.497", "LastActivityDate": "2017-11-19T00:12:16.257"}, "47352751": {"ParentId": "47352663", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>As pointed out by <a href=\"https://stackoverflow.com/users/2684539/jarod42\">Jarod42</a> zero size arrays are not standard C++, but GCC and Clang extensions.</p>\n<p>Adding <code>-pedantic</code> produces this warning:</p>\n<blockquote id=\"so_47352663_47352751_0\">\n<pre><code>5 : &lt;source&gt;:5:12: warning: zero size arrays are an extension [-Wzero-length-array]\n    int *a[0];\n           ^\n</code></pre>\n</blockquote>\n<p>I always forget that <code>std=c++XX</code> (instead of <code>std=gnu++XX</code>) doesn't disable all extensions.</p>\n<p>This still doesn't explain the <code>sizeof</code> behavior. But at least we know it's not standard...</p>\n", "OwnerUserId": "2805305", "LastEditorUserId": "63550", "LastEditDate": "2017-11-19T00:10:28.017", "Id": "47352751", "Score": "38", "CreationDate": "2017-11-17T14:19:24.237", "LastActivityDate": "2017-11-19T00:10:28.017"}, "47356922": {"ParentId": "47352663", "CommentCount": "2", "Body": "<p>Before C was standardized, many compilers would have had no difficulty handling zero-size types as long as code never tried to subtract one pointer to a zero-size type from another.  Such types were useful, and supporting them was easier and cheaper than forbidding them.  Other compilers decided to forbid such types, however, and some static-assertion code may have relied upon the fact that they would squawk if code tried to create a zero-sized array.  The authors of the Standard were faced with a choice:</p>\n<ol>\n<li><p>Allow compilers to silently accept zero-sized array declarations, even\nin cases where the purpose of such declarations would be to trigger a\ndiagnostic and abort compilation, and require that all compilers accept\nsuch declarations (though not necessarily silently) as producing zero-\nsized objects.</p></li>\n<li><p>Allow compilers to silently accept zero-sized array declarations, even\nin cases where the purpose of such declarations would be to trigger a\ndiagnostic and abort compilation, and allow compilers encountering such\ndeclarations to either abort compilation or continue it at their leisure.</p></li>\n<li><p>Require that implementations issue a diagnostic if code declares a\nzero-sized array, but then allow implementations to either abort\ncompilation or continue it (with whatever semantics they see fit) at\ntheir leisure.</p></li>\n</ol>\n<p>The authors of the Standard opted for #3.  Consequently, zero-sized array declarations are regarded by the Standard \"extension\", even though such constructs were widely supported before the Standard forbade them.</p>\n<p>The C++ Standard allows for the existence of empty objects, but in an effort to allow the addresses of empty objects to be usable as tokens it mandates that they have a minimum size of 1.  For an object that has no members to have a size of 0 would thus violate the Standard.  If an object contains zero-sized members, however, the C++ Standard imposes no requirements about how it is processed beyond the fact that a program containing such a declaration must trigger a diagnostic.  Since most code that uses such declarations expects the resulting objects to have a size of zero, the most useful behavior for compilers receiving such code is to treat them that way.</p>\n", "OwnerUserId": "363751", "PostTypeId": "2", "Id": "47356922", "Score": "47", "CreationDate": "2017-11-17T18:18:59.013", "LastActivityDate": "2017-11-17T18:18:59.013"}, "bq_ids": {"n4140": {"so_47352663_47352963_0": {"section_id": 3228, "quality": 0.8275862068965517, "length": 24}}, "n3337": {"so_47352663_47352963_0": {"section_id": 3101, "quality": 0.8620689655172413, "length": 25}}, "n4659": {"so_47352663_47352963_0": {"section_id": 3985, "quality": 0.8275862068965517, "length": 24}}}});