post_cb({"bq_ids": {"n4140": {"so_19331508_19331742_2": {"length": 21, "quality": 0.84, "section_id": 3325}, "so_19331508_19331742_3": {"length": 9, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_19331508_19331742_2": {"length": 22, "quality": 0.88, "section_id": 3195}, "so_19331508_19331742_3": {"length": 9, "quality": 1.0, "section_id": 3195}}, "n4659": {"so_19331508_19331742_2": {"length": 18, "quality": 0.72, "section_id": 4091}, "so_19331508_19331742_3": {"length": 9, "quality": 1.0, "section_id": 4091}}}, "19331742": {"Id": "19331742", "PostTypeId": "2", "Body": "<p>It fails because it tries to bind an rvalue to an nonconst lvalue reference.</p>\n<blockquote>\n<p id=\"so_19331508_19331742_0\">8.5.4 List-initialization</p>\n<p id=\"so_19331508_19331742_1\">[#3]</p>\n<p id=\"so_19331508_19331742_2\">-- Otherwise, if T is a reference type, a <strong>prvalue temporary</strong> of the type\n  referenced by T is list-initialized, and the <strong>reference is\n  bound to that temporary</strong>. [ Note: As usual, the    binding will fail\n  and the program is ill-formed if the reference type is an lvalue reference to a non-const type. \u2014 end note]</p>\n</blockquote>\n<p>Check this example to verify that <code>r1</code> is bound to a distinct object</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint\nmain () {\n  std::string var {\"Cambridge\"};\n  const std::string&amp; r1 {var}; \n  const std::string&amp; r2 (var);\n\n  var.clear ();\n\n  std::cout &lt;&lt; \"var = \" &lt;&lt; var &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"r1 = \" &lt;&lt; r1 &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"r2 = \" &lt;&lt; r2 &lt;&lt; std::endl;\n}\n</code></pre>\n<p>and contrast that to <code>r2</code>.</p>\n<p>PS. Now the question arises, why the following does not fail according to the above considerations:</p>\n<pre><code>int x;\nint &amp;y { x };\n</code></pre>\n<p>the standard says (in the same place as above, but the next clause):</p>\n<blockquote>\n<p id=\"so_19331508_19331742_3\">-- Otherwise, if the initializer list has a single element, the object or <strong>reference</strong> is initialized from that element;</p>\n</blockquote>\n<p>This clause explicitly mentions reference, in other words, initializing a reference is not described in a single clause, but there are a few possibilities (maybe tried in order of the clauses?), which explains why <code>int &amp;</code> behaves this way.</p>\n", "LastEditorUserId": "390807", "LastActivityDate": "2013-10-12T09:18:50.760", "Score": "3", "CreationDate": "2013-10-12T07:36:46.293", "ParentId": "19331508", "CommentCount": "12", "LastEditDate": "2013-10-12T09:18:50.760", "OwnerUserId": "390807"}, "19331508": {"ViewCount": "265", "Body": "<p>Some sample code from the \"The C++ Programming Language 4th Edition\" makes me confusing. Here is my test cases.</p>\n<p><strong>Env</strong> gcc version 4.6.3 (Debian 4.6.3-14+rpi1) with -std=c++0x </p>\n<ul>\n<li><strong>Code1</strong> <code>string var {\"Cambridge\"}; string&amp; r1 {var};</code> <strong>Compiling fails</strong></li>\n<li><strong>Code2</strong> <code>string var {\"Cambridge\"}; string&amp; r1 = var;</code> <strong>Compiling Succeed</strong></li>\n<li><strong>Code3</strong> <code>string var {\"Cambridge\"}; string&amp;&amp; r1 {var};</code> <strong>Compiling Succeed</strong></li>\n<li><strong>Code1 Compiling Fails with</strong> <code>g++ -g -DLINUX -std=c++0x   -c src/dummy.cpp -o src/dummy.o\nsrc/dummy.cpp: In function \u2018int main(int, char**)\u2019:\nsrc/dummy.cpp:26:17: error: invalid initialization of non-const reference of type \u2018std::string&amp; {aka std::basic_string&lt;char&gt;&amp;}\u2019 from an rvalue of type \u2018&lt;brace-enclosed initializer list&gt;\u2019\nmake: *** [src/dummy.o] Error 1\n</code></li>\n<li>Code1 should be ok according the books. Section 7.7.2 since var is a lvalue, but why code1 does not work but code3 works in my situation? </li>\n</ul>\n", "AcceptedAnswerId": "19331742", "Title": "lvalue initialization fails", "CreationDate": "2013-10-12T07:02:49.483", "Id": "19331508", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-10-12T07:17:59.673", "LastEditorUserId": "2073257", "LastActivityDate": "2013-10-12T09:18:50.760", "Score": "6", "OwnerUserId": "2806310", "Tags": "<c++><string><gcc><c++11>", "AnswerCount": "1"}});