post_cb({"46387179": {"ParentId": "46387101", "PostTypeId": "2", "CommentCount": "15", "CreationDate": "2017-09-24T06:16:10.747", "Score": "5", "LastEditorUserId": "817643", "LastEditDate": "2017-09-24T06:56:09.230", "Id": "46387179", "OwnerUserId": "817643", "Body": "<p>To reiterate my comment, that tutorial is wrong. The storage for the object itself is not the responsibility of the constructor. If you look at the C++ standard definition of object lifetime <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.life#1\" rel=\"nofollow noreferrer\">[basic.life]/1</a>:</p>\n<blockquote>\n<p id=\"so_46387101_46387179_0\">The lifetime of an object or reference is a runtime property of the\n  object or reference. An object is said to have <em>non-vacuous\n  initialization</em> if it is of a class or aggregate type and it or one of\n  its subobjects is initialized by a constructor other than a trivial\n  default constructor. [\u2009Note: Initialization by a trivial copy/move\n  constructor is non-vacuous initialization. \u2009\u2014\u2009end note\u2009] The lifetime\n  of an object of type T begins when:</p>\n<ul>\n<li><p id=\"so_46387101_46387179_1\"><strong>storage with the proper alignment and size for type T is obtained, and</strong></p></li>\n<li><p id=\"so_46387101_46387179_2\"><strong>if the object has non-vacuous initialization, its initialization is complete,</strong></p></li>\n</ul>\n</blockquote>\n<p>You'll see that obtaining the storage is a separate item in the description of the objects lifetime. And for a good reason, since storage can be obtained in a multitude of ways:</p>\n<ol>\n<li>It may be static storage. So the c'tor <strong>can only</strong> initialize the object.</li>\n<li>It may be automatic storage, where again it's the run-time that manages it, not the c'tor, every time a scope is entered.</li>\n<li>It could be storage obtained by dynamic allocation, with the use of <code>operator new</code>. Again, not something the c'tor will do.</li>\n</ol>\n<p>The constructor is always operating on storage (however obtained) to make an object come into existence there.</p>\n<p>The quote you got from the site is wrong two-fold. Since a default c'tor could <em>very well initialize the object</em> to have valid state. Consider this:</p>\n<pre><code>struct foo {\n  std::string a;\n  std::string b;\n};\n</code></pre>\n<p>There is no user defined c'tor, so a compiler generated one will be synthesized. And you can be certain that it will default initialize the two strings into a valid state (as empty strings).</p>\n", "LastActivityDate": "2017-09-24T06:56:09.230"}, "46387101": {"CommentCount": "2", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "817643", "CreationDate": "2017-09-24T06:03:13.580", "LastActivityDate": "2017-09-24T06:56:09.230", "Title": "Is the implicitly created default constructor responsible for allocating the objects memory?", "AcceptedAnswerId": "46387179", "LastEditDate": "2017-09-24T06:34:54.100", "Id": "46387101", "Score": "1", "Body": "<p><code>www.fredosaurus.com</code> states this:</p>\n<blockquote>\n<p id=\"so_46387101_46387101_0\">When an object of a class is created, C++ calls the constructor for\n  that class. If no constructor is defined, C++ invokes a default\n  constructor, which allocates memory for the object, but doesn't\n  initialize it.</p>\n</blockquote>\n<p>But I thought constructors are only responsible for initializing data members. Is my understanding incorrect?</p>\n", "Tags": "<c++><constructor>", "OwnerUserId": "7129688", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46387101_46387179_2": {"section_id": 7189, "quality": 0.8333333333333334, "length": 5}, "so_46387101_46387179_0": {"section_id": 7189, "quality": 0.7073170731707317, "length": 29}, "so_46387101_46387179_1": {"section_id": 7189, "quality": 1.0, "length": 6}}, "n3337": {"so_46387101_46387179_2": {"section_id": 6933, "quality": 0.8333333333333334, "length": 5}, "so_46387101_46387179_0": {"section_id": 6933, "quality": 0.7073170731707317, "length": 29}, "so_46387101_46387179_1": {"section_id": 6933, "quality": 1.0, "length": 6}}, "n4659": {"so_46387101_46387179_2": {"section_id": 8697, "quality": 1.0, "length": 6}, "so_46387101_46387179_0": {"section_id": 8697, "quality": 0.8292682926829268, "length": 34}, "so_46387101_46387179_1": {"section_id": 8697, "quality": 1.0, "length": 6}}}});