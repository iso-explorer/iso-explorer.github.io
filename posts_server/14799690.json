post_cb({"14800797": {"ParentId": "14799690", "CommentCount": "0", "CreationDate": "2013-02-10T18:00:02.687", "OwnerUserId": "273767", "PostTypeId": "2", "Id": "14800797", "Score": "0", "Body": "<p>I believe the key point to understanding is that reference types are <em>not</em> object types. </p>\n<blockquote>\n<p id=\"so_14799690_14800797_0\">An object type is a (possibly cv-qualified) type that is not a function type, not a reference type, and not a\n  void type <code>(\u00a73.9[basic.types]/8)</code></p>\n</blockquote>\n<p>Objects require storage (\"An object is a region of storage.\" -- \u00a71.8[intro.object]/1)</p>\n<p>Moreover, C++ programs operate on objects: \"The constructs in a C++ program create, destroy, refer to, access, and manipulate objects.\" -- same paragraph</p>\n<p>So, when the compiler encounters a reference in the program, it is up to the compiler whether it has to synthesize an <em>object</em> (typically of a pointer type), and, therefore, use some storage, or find some other way to implement the desired semantics in terms of object model (which may involve no storage).</p>\n", "LastActivityDate": "2013-02-10T18:00:02.687"}, "14799690": {"CommentCount": "3", "ViewCount": "197", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-02-10T16:11:40.170", "LastActivityDate": "2013-02-10T18:00:02.687", "Title": "How can a reference require no storage?", "AcceptedAnswerId": "14799717", "LastEditDate": "2017-05-23T12:18:58.273", "Id": "14799690", "Score": "4", "Body": "<p>From <a href=\"https://stackoverflow.com/questions/3744675/size-of-references-in-64bit-environments\">this question</a>, and consequently, from the Standard (ISO C++-03):</p>\n<blockquote>\n<p id=\"so_14799690_14799690_0\">It is unspecified whether or not a reference requires storage (3.7).</p>\n</blockquote>\n<p>In some answers in that thread, it's said that references have, internally, the same structure of a pointer, thus, having the same size of it (32/64 bits).</p>\n<p>What I'm struggling to grasp is: how would a reference come <strong>not</strong> to require storage?</p>\n<p>Any sample code exemplifying this would be greatly appreciated. </p>\n<p><strong>Edit</strong>:\nFrom @JohannesSchaub-litb comment, is there anything like, if I'm not using a <code>const &amp;</code>, or if I'm using a <code>const &amp;</code> with default value, it requires allocation? It seems to me, somehow, that there should be no allocations for references at all -- except, of course, when there are explicit allocations involved, like:</p>\n<pre><code>A&amp; new_reference(*(new A())); // Only A() instance would be allocated,\n                              // not the new_reference itself\n</code></pre>\n<p>Is there any case like this?</p>\n", "Tags": "<c++><variables><compiler-construction><reference>", "OwnerUserId": "1655939", "AnswerCount": "2"}, "14799717": {"ParentId": "14799690", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2013-02-10T16:14:14.917", "Score": "5", "LastEditorUserId": "150634", "LastEditDate": "2013-02-10T16:37:00.310", "Id": "14799717", "OwnerUserId": "150634", "Body": "<p>Take something simple:</p>\n<pre><code>int foo() {\n  int  x = 5;\n  int&amp; r = x;\n  r = 10;\n  return x;\n}\n</code></pre>\n<p>The implementation <em>may</em> use a pointer to <code>x</code> behind the scenes to implement that reference, but there's no reason it has to. It could just as well translate the code to the equivalent form of:</p>\n<pre><code>int foo() {\n  int x = 10\n  return x;\n}\n</code></pre>\n<p>Then no pointers are needed whatsoever. The compiler can just bake it right into the executable that <code>r</code> is the same as <code>x</code>, without storing and dereferencing a pointer that points at <code>x</code>.</p>\n<p>The point is, whether the reference requires any storage is an implementation detail that you shouldn't need to care about.</p>\n", "LastActivityDate": "2013-02-10T16:37:00.310"}, "bq_ids": {"n4140": {"so_14799690_14800797_0": {"section_id": 7206, "quality": 0.8333333333333334, "length": 10}, "so_14799690_14799690_0": {"section_id": 3221, "quality": 1.0, "length": 5}}, "n3337": {"so_14799690_14800797_0": {"section_id": 6950, "quality": 0.8333333333333334, "length": 10}, "so_14799690_14799690_0": {"section_id": 3095, "quality": 1.0, "length": 5}}, "n4659": {"so_14799690_14800797_0": {"section_id": 4058, "quality": 0.75, "length": 9}, "so_14799690_14799690_0": {"section_id": 3978, "quality": 1.0, "length": 5}}}});