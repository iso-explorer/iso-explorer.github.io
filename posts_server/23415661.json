post_cb({"23415661": {"ViewCount": "2896", "Body": "<p>As covered in <a href=\"https://stackoverflow.com/questions/14935722/does-initialization-entail-lvalue-to-rvalue-conversion-is-int-x-x-ub\">Does initialization entail lvalue-to-rvalue conversion? Is <code>int x = x;</code> UB?</a> the C++ standard has a surprising example in section <code>3.3.2</code> <em>Point of declaration</em> in which an <code>int</code> is initialized with it's own indeterminate value:</p>\n<blockquote>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_23415661_23415661_0\">Here the second x is initialized with its own (indeterminate) value.\n  \u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>Which Johannes answer to this question indicates is undefined behavior since it requires an lvalue-to-rvalue conversion.</p>\n<p>In the latest C++14 draft standard <code>N3936</code> which can be found <a href=\"https://github.com/cplusplus/draft/tree/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers\" rel=\"nofollow noreferrer\">here</a> this example has changed to:</p>\n<blockquote>\n<pre><code>unsigned char x = 12;\n{ unsigned char x = x; }\n</code></pre>\n<p id=\"so_23415661_23415661_1\">Here the second x is initialized with its own (indeterminate) value.\n  \u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>Has something changed in C++14 with respect to indeterminate values and undefined behavior that has driven this change in the example?</p>\n", "AcceptedAnswerId": "23415662", "Title": "Has C++ standard changed with respect to the use of indeterminate values and undefined behavior in C++14?", "CreationDate": "2014-05-01T20:04:20.140", "Id": "23415661", "CommentCount": "0", "FavoriteCount": "17", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:46:57.347", "LastEditorUserId": "-1", "LastActivityDate": "2014-12-15T15:41:19.563", "Score": "56", "OwnerUserId": "1708801", "Tags": "<c++><c++11><language-lawyer><undefined-behavior><c++14>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23415661_23415661_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_23415661_23415662_8": {"length": 29, "quality": 0.8787878787878788, "section_id": 3291}, "so_23415661_23415662_12": {"length": 4, "quality": 0.6666666666666666, "section_id": 446}, "so_23415661_23415661_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_23415661_23415662_9": {"length": 21, "quality": 0.9130434782608695, "section_id": 3291}, "so_23415661_23415662_0": {"length": 19, "quality": 0.76, "section_id": 3291}, "so_23415661_23415662_2": {"length": 8, "quality": 0.8, "section_id": 3291}, "so_23415661_23415662_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 3291}, "so_23415661_23415662_7": {"length": 5, "quality": 1.0, "section_id": 3291}, "so_23415661_23415662_1": {"length": 42, "quality": 0.8571428571428571, "section_id": 3291}, "so_23415661_23415662_5": {"length": 7, "quality": 0.5384615384615384, "section_id": 3291}}, "n3337": {"so_23415661_23415661_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_23415661_23415662_12": {"length": 6, "quality": 1.0, "section_id": 5}, "so_23415661_23415662_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 5930}, "so_23415661_23415661_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_23415661_23415662_0": {"length": 21, "quality": 0.84, "section_id": 3161}}, "n4659": {"so_23415661_23415661_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_23415661_23415662_8": {"length": 29, "quality": 0.8787878787878788, "section_id": 4053}, "so_23415661_23415662_7": {"length": 5, "quality": 1.0, "section_id": 4053}, "so_23415661_23415662_12": {"length": 4, "quality": 0.6666666666666666, "section_id": 468}, "so_23415661_23415661_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_23415661_23415662_9": {"length": 21, "quality": 0.9130434782608695, "section_id": 4053}, "so_23415661_23415662_0": {"length": 19, "quality": 0.76, "section_id": 4053}, "so_23415661_23415662_2": {"length": 8, "quality": 0.8, "section_id": 4053}, "so_23415661_23415662_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 4053}, "so_23415661_23415662_1": {"length": 42, "quality": 0.8571428571428571, "section_id": 4053}, "so_23415661_23415662_5": {"length": 7, "quality": 0.5384615384615384, "section_id": 4053}}}, "23415662": {"Id": "23415662", "PostTypeId": "2", "Body": "<p>Yes, this change was driven by changes in the language which makes it undefined behavior <em>if an indeterminate value is produced by an evaluation</em> but with some exceptions for <em>unsigned narrow characters</em>.</p>\n<p><a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1787\" rel=\"nofollow noreferrer\">Defect report <code>1787</code></a> whose proposed text can be found in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3914.html\" rel=\"nofollow noreferrer\">N3914</a><sup>1</sup> was <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3903.html\" rel=\"nofollow noreferrer\">recently accepted in 2014</a> and is incorporated in the latest working draft <code>N3936</code>:</p>\n<p>The most interesting change with respect to indeterminate values would be to section <code>8.5</code> paragraph <em>12</em> which goes from:</p>\n<blockquote>\n<p id=\"so_23415661_23415662_0\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value. [ <em>Note:</em> Objects with static or thread storage duration are zero-initialized, see 3.6.2. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>to (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_23415661_23415662_1\">If no initializer is specified for an object, the object is\n  default-initialized. When storage for an object with automatic or\n  dynamic storage duration is obtained, the object has an <em>indeterminate\n  value</em>, and if no initialization is performed for the object, that\n  object retains an indeterminate value until that value is replaced\n  (5.17 [expr.ass]). [Note: Objects with static or thread storage\n  duration are zero-initialized, see 3.6.2 [basic.start.init]. \u2014end\n  note] <strong>If an indeterminate value is produced by an evaluation, the\n  behavior is undefined except in the following cases</strong>:</p>\n<ul>\n<li><p id=\"so_23415661_23415662_2\">If an indeterminate value of unsigned narrow character type (3.9.1 [basic.fundamental]) is produced by the evaluation of:</p>\n<ul>\n<li><p id=\"so_23415661_23415662_3\">the second or third operand of a conditional expression (5.16 [expr.cond]),</p></li>\n<li><p id=\"so_23415661_23415662_4\">the right operand of a comma (5.18 [expr.comma]),</p></li>\n<li><p id=\"so_23415661_23415662_5\">the operand of a cast or conversion to an unsigned narrow character type (4.7 [conv.integral], 5.2.3 [expr.type.conv], 5.2.9\n  [expr.static.cast], 5.4 [expr.cast]), or</p></li>\n<li><p id=\"so_23415661_23415662_6\">a discarded-value expression (Clause 5 [expr]),</p></li>\n</ul>\n<p id=\"so_23415661_23415662_7\">then the result of the operation is an indeterminate value.</p></li>\n<li><p id=\"so_23415661_23415662_8\">If an indeterminate value of unsigned narrow character type (3.9.1 [basic.fundamental]) is produced by the evaluation of the right\n  operand of a simple assignment operator (5.17 [expr.ass]) whose first\n  operand is an lvalue of unsigned narrow character type, an\n  indeterminate value replaces the value of the object referred to by\n  the left operand.</p></li>\n<li><p id=\"so_23415661_23415662_9\"><strong>If an indeterminate value of unsigned narrow character type (3.9.1 [basic.fundamental]) is produced by the evaluation of the\n  initialization expression when initializing an object of unsigned\n  narrow character type, that object is initialized to an indeterminate\n  value.</strong></p></li>\n</ul>\n</blockquote>\n<p>and included the following example:</p>\n<blockquote>\n<p id=\"so_23415661_23415662_10\">[ <em>Example:</em></p>\n<pre><code>int f(bool b) {\n  unsigned char c;\n  unsigned char d = c; // OK, d has an indeterminate value\n  int e = d;           // undefined behavior\n  return b ? d : 0;    // undefined behavior if b is true\n}\n</code></pre>\n<p id=\"so_23415661_23415662_11\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>We can find this text in <a href=\"https://github.com/cplusplus/draft/tree/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers\" rel=\"nofollow noreferrer\">N3936</a> which is the current <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3938.html\" rel=\"nofollow noreferrer\">working draft</a> and <code>N3937</code> is the <code>C++14 DIS</code>.</p>\n<p><b>Prior to C++1y</b></p>\n<p>It is interesting to note that prior to this draft unlike C <a href=\"http://blog.frama-c.com/index.php?post/2013/03/13/indeterminate-undefined\" rel=\"nofollow noreferrer\">which has always had a well specified notion of what uses of indeterminate values were undefined</a> C++ used the term indeterminate value without even defining it (<em><a href=\"https://stackoverflow.com/questions/23020323/can-we-apply-content-not-explicitly-cited-from-the-normative-references-to-the-c\">assuming we can not borrow definition from C99</a></em>) and also <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#616\" rel=\"nofollow noreferrer\">see defect report 616</a>. We had to rely on the <a href=\"https://stackoverflow.com/questions/14991219/what-is-the-value-category-of-the-operands-of-c-operators-when-unspecified\">underspecified lvalue-to-rvalue conversion</a> which in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++11 standard</a> is covered in section <code>4.1</code> <em>Lvalue-to-rvalue conversion</em> paragraph <em>1</em> which says:</p>\n<blockquote>\n<p id=\"so_23415661_23415662_12\">[...]if the object is uninitialized, a program that necessitates this conversion has undefined behavior.[...]</p>\n</blockquote>\n<hr>\n<p>Footnotes:</p>\n<ol>\n<li><code>1787</code> is a revision of <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#616\" rel=\"nofollow noreferrer\">defect report 616</a>, we can find that information in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3903.html\" rel=\"nofollow noreferrer\">N3903</a></li>\n</ol>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-05T15:14:36.797", "Score": "48", "CreationDate": "2014-05-01T20:04:20.140", "ParentId": "23415661", "CommentCount": "14", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:54:30.797"}});