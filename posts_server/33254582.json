post_cb({"33255086": {"ParentId": "33254582", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-10-21T09:02:13.530", "Score": "7", "LastEditorUserId": "951890", "LastEditDate": "2015-10-21T12:11:43.373", "Id": "33255086", "OwnerUserId": "3309790", "Body": "<p>I think it would be some kind of mistake, the implicit declaration of default destructor should have nothing to do with the definition of a move constructor.</p>\n<p>From the standard, 12.4$4,5 Destructors [class.dtor]</p>\n<blockquote>\n<p id=\"so_33254582_33255086_0\">4 If a class has no user-declared destructor, a destructor is\n  implicitly declared as defaulted (8.4). An implicitly-declared\n  destructor is an inline public member of its class.  </p>\n<p id=\"so_33254582_33255086_1\">5 A defaulted destructor for a class X is defined as deleted if:  </p>\n<p id=\"so_33254582_33255086_2\">(5.1) \u2014 X is a union-like class that has a variant member with a\n  non-trivial destructor,  </p>\n<p id=\"so_33254582_33255086_3\">(5.2) \u2014 any potentially constructed subobject has class type M (or\n  array thereof) and M has a deleted destructor or a destructor that is\n  inaccessible from the defaulted destructor,  </p>\n<p id=\"so_33254582_33255086_4\">(5.3) \u2014 or, for a virtual destructor, lookup of the non-array\n  deallocation function results in an ambiguity or in a function that is\n  deleted or inaccessible from the defaulted destructor.</p>\n</blockquote>\n", "LastActivityDate": "2015-10-21T12:11:43.373"}, "bq_ids": {"n4140": {"so_33254582_33255086_0": {"section_id": 400, "quality": 1.0, "length": 14}, "so_33254582_33255086_3": {"section_id": 401, "quality": 1.0, "length": 13}, "so_33254582_33255086_1": {"section_id": 401, "quality": 1.0, "length": 5}, "so_33254582_33255086_2": {"section_id": 369, "quality": 1.0, "length": 6}, "so_33254582_33255086_4": {"section_id": 401, "quality": 1.0, "length": 13}}, "n3337": {"so_33254582_33255086_0": {"section_id": 391, "quality": 1.0, "length": 14}, "so_33254582_33255086_3": {"section_id": 392, "quality": 0.7692307692307693, "length": 10}, "so_33254582_33255086_1": {"section_id": 392, "quality": 1.0, "length": 5}, "so_33254582_33255086_2": {"section_id": 359, "quality": 1.0, "length": 6}, "so_33254582_33255086_4": {"section_id": 392, "quality": 1.0, "length": 13}}, "n4659": {"so_33254582_33255086_0": {"section_id": 417, "quality": 1.0, "length": 14}, "so_33254582_33255086_3": {"section_id": 418, "quality": 1.0, "length": 13}, "so_33254582_33255086_1": {"section_id": 418, "quality": 1.0, "length": 5}, "so_33254582_33255086_2": {"section_id": 418, "quality": 1.0, "length": 6}, "so_33254582_33255086_4": {"section_id": 418, "quality": 1.0, "length": 13}}}, "33254582": {"CommentCount": "3", "ViewCount": "381", "PostTypeId": "1", "LastEditorUserId": "3240681", "CreationDate": "2015-10-21T08:38:18.537", "LastActivityDate": "2015-10-21T12:11:43.373", "Title": "Need for declare destructor as default", "AcceptedAnswerId": "33255086", "LastEditDate": "2015-10-21T08:49:02.760", "Id": "33254582", "Score": "11", "Body": "<p>According to <a href=\"https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#note-73\">these</a> guidelines: </p>\n<blockquote>\n<p id=\"so_33254582_33254582_0\">If the default destructor is needed, but its generation has been\n  suppressed (e.g., by defining a move constructor), use <code>=default</code>.</p>\n</blockquote>\n<p>I can't imagine when code would be ill-formed without explicit default destructor in class which has move constructor.</p>\n<p>Can somebody show me example confirms quote above?</p>\n<pre><code>struct S {\n    S() {};\n    S( S&amp;&amp; ) {}; // move ctor\n};\n\nint main() {\n    S s; // there is no need to declare dtor explicitly =default\n}\n</code></pre>\n", "Tags": "<c++><c++11><destructor><language-lawyer>", "OwnerUserId": "3240681", "AnswerCount": "1"}});