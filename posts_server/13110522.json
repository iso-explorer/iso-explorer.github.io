post_cb({"13110522": {"CommentCount": "1", "ViewCount": "660", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-10-28T16:08:28.870", "LastActivityDate": "2012-10-29T20:24:51.113", "Title": "C++11: std ref global variable and non-function-local thread_local initialization order?", "AcceptedAnswerId": "13110647", "LastEditDate": "2012-10-29T20:24:51.113", "Id": "13110522", "Score": "4", "Body": "<p>Global variables in C++11 with non-trivial constructors are constructed before the entry to main during a static initialization phase.</p>\n<p>Likewise non-function-local thread_local variables are constructed during a per-thread \"thread_local initialization phase\".</p>\n<p>Does the C++11 standard specify in what order these variables shall be constructed?  In both cases if there are two variables:</p>\n<pre><code>// global scope\n\nA::A() { b.f(); }  // A constructor uses global b\n\nA a;\nB b;\n</code></pre>\n<p>Does the C++11 standard specify in what order they shall be initialized, or that an error should be produced if a variable is used uninitialized?</p>\n<p>Likewise for non-function-local thread_local:</p>\n<pre><code>// global scope\n\nA::A() { b.f(); }  // A constructor uses global b\n\nthread_local A a;\nthread_local B b;\n</code></pre>\n<p>Does the standard specify the order they must be constructed, and does it define what will happen if the variable is used from the constructor of another before it is initialized?</p>\n<p>Can you please provide a <strong>C++11 standard reference</strong> in support of any claims you make to have an answer.</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "1131467", "AnswerCount": "2"}, "13111285": {"ParentId": "13110522", "CommentCount": "1", "Body": "<p>For static storage duration, I agree with Alan's answer.  If the initializations are in the same translation unit, their dynamic initializations are the order of those object definitions.  The compiler is allowed to initialize <code>b</code> as a static initialization instead if it can figure out how (per 3.6.2/3).  So the first program may or may not invoke undefined behavior, and is probably a bad idea.</p>\n<p>For dynamic storage duration, note 3.7.2/2:</p>\n<blockquote>\n<p id=\"so_13110522_13111285_0\">A variable with thread storage duration shall be initialized before its first odr-use (3.2) and, if constructed, shall be destroyed on thread exit.</p>\n</blockquote>\n<p>So thread-local variables act more like function-local static variables than namespace-scope static variables.  The second program does not have undefined behavior.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "13111285", "Score": "2", "CreationDate": "2012-10-28T17:35:35.630", "LastActivityDate": "2012-10-28T17:35:35.630"}, "bq_ids": {"n4140": {"so_13110522_13110647_0": {"section_id": 7151, "quality": 1.0, "length": 14}, "so_13110522_13111285_0": {"section_id": 7169, "quality": 1.0, "length": 13}}, "n3337": {"so_13110522_13110647_0": {"section_id": 6895, "quality": 1.0, "length": 14}, "so_13110522_13111285_0": {"section_id": 6913, "quality": 1.0, "length": 13}}, "n4659": {"so_13110522_13110647_0": {"section_id": 8655, "quality": 0.5714285714285714, "length": 8}, "so_13110522_13111285_0": {"section_id": 8677, "quality": 1.0, "length": 13}}}, "13110647": {"ParentId": "13110522", "CommentCount": "0", "Body": "<p>Your statement that \"Global variables in C++11 with non-trivial constructors are constructed before the entry to main during a static initialization phase.\" doesn't seem to be entirely true - they may not be initialised until the dynamic initialization phase</p>\n<p>For variables with \"ordered initialization\", which your first a and b are, then the standard says </p>\n<blockquote>\n<p id=\"so_13110522_13110647_0\">Variables with ordered initialization defined within a single\n  translation unit shall be initialized in the order of their\n  definitions in the translation unit.</p>\n</blockquote>\n<p>3.6.2/2 covers all this.</p>\n<p>Edit: as far as I can tell your second a and b don't have ordered initialization, and could be initialized in either order. But I may be missing something.</p>\n", "OwnerUserId": "212870", "PostTypeId": "2", "Id": "13110647", "Score": "2", "CreationDate": "2012-10-28T16:24:21.893", "LastActivityDate": "2012-10-28T16:24:21.893"}});