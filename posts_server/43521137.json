post_cb({"bq_ids": {"n4659": {"so_43521137_43521442_1": {"section_id": 311, "quality": 0.9310344827586207, "length": 27}, "so_43521137_43521442_0": {"section_id": 623, "quality": 0.9298245614035088, "length": 53}}}, "43521442": {"ParentId": "43521137", "CommentCount": "4", "Body": "<p>The rule in <a href=\"http://eel.is/c++draft/over.match.class.deduct\" rel=\"noreferrer\">[over.match.class.deduct]</a> is:</p>\n<blockquote>\n<p id=\"so_43521137_43521442_0\">A set of functions and function templates is formed comprising:<br>\n  - For each constructor of the primary class template designated by the template-name, if the template is defined, a function template with the following properties:<br>\n  \u00a0\u00a0\u00a0\u00a0- The template parameters are the template parameters of the class template followed by the template parameters (including default template arguments) of the constructor, if any.<br>\n  \u00a0\u00a0\u00a0\u00a0- The types of the function parameters are those of the constructor.<br>\n  \u00a0\u00a0\u00a0\u00a0- The return type is the class template specialization designated by the template-name and template arguments corresponding to the template parameters obtained from the class template.</br></br></br></br></p>\n</blockquote>\n<p>Our set includes:</p>\n<pre><code>template &lt;class T&gt; // &lt;-- the template parameters come from the class template\nS&lt;T&gt;               // &lt;-- the return type is the class template specialization   \nfoo(T&amp;&amp; );         // &lt;-- the types of the parameters are those of the constructor\n</code></pre>\n<p>We perform overload resolution as usual, which involves template deduction. <em>But</em> from <a href=\"http://eel.is/c++draft/temp.deduct.call\" rel=\"noreferrer\">[temp.deduct.call]</a>:</p>\n<blockquote>\n<p id=\"so_43521137_43521442_1\">A <em>forwarding reference</em> is an rvalue reference to a cv-unqualified template parameter <strong>that does not represent a template parameter of a class template</strong> (during class template argument deduction ([over.match.class.deduct])). If P is a forwarding reference and the argument is an lvalue, the type \u201clvalue reference to A\u201d is used in place of A for type deduction.</p>\n</blockquote>\n<p>Hence, this <code>T&amp;&amp;</code> is <strong>not</strong> a forwarding reference. It is an rvalue reference to <code>T</code>. So deduction against an lvalue (in our case, <code>S(i)</code>) fails. gcc is correct to reject your code here.</p>\n<p>If you want the class template parameter to function as a forwarding reference, you will need to add a deduction guide:</p>\n<pre><code>template &lt;class T&gt; S(T&amp;&amp; ) -&gt; S&lt;T&gt;;\n</code></pre>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "43521442", "Score": "6", "CreationDate": "2017-04-20T13:48:58.817", "LastActivityDate": "2017-04-20T13:48:58.817"}, "43521137": {"CommentCount": "4", "AcceptedAnswerId": "43521442", "LastEditDate": "2017-04-20T13:56:07.550", "LastEditorUserId": "5632316", "CreationDate": "2017-04-20T13:35:46.617", "LastActivityDate": "2017-04-20T13:56:07.550", "PostTypeId": "1", "ViewCount": "106", "Title": "Could an implicit template deduction guide deduce a reference type?", "Id": "43521137", "OwnerUserId": "5632316", "Body": "<p>While testing C++17 deduction guide behaviour with gcc7, I found that this example fails:</p>\n<pre><code>template&lt;class T&gt;\nstruct S{\n  S(T&amp;&amp; v){}\n};\nint i=10;\nauto v = S(i);\n</code></pre>\n<p>According to what I have read from <a href=\"http://en.cppreference.com/w/cpp/language/class_template_deduction\" rel=\"nofollow noreferrer\">cpp reference</a>, I thought <code>v</code> should be of type <code>S&lt;int &amp;&gt;</code>. Nevertheless gcc7 does not compile this code complaining that a <code>int&amp;</code> can not be bound to a <code>int &amp;&amp;</code> (the universal reference mechanism fails).</p>\n<p>So my questions are:</p>\n<ol>\n<li><p>Should gcc7 have deduced <code>v</code> to be of type <code>S&lt;int&amp;&gt;</code>?</p></li>\n<li><p>Where are described automatic deduction guide in the working draft standard?</p></li>\n</ol>\n", "Tags": "<c++><templates><c++1z>", "Score": "3", "AnswerCount": "1"}});