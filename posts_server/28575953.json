post_cb({"28576028": {"Id": "28576028", "PostTypeId": "2", "Body": "<p>The <code>hole = child</code> assignment is executed after the body of the loop is executed, so by the time it is executed, <code>child</code> has been assigned a value.</p>\n<p>To a first approximation, the loop is equivalent to:</p>\n<pre><code>int child;\nwhile (hole * 2 &lt;= currentSize)\n{\n    child = hole * 2;\n    hole = child;\n}\n</code></pre>\n<p>(It's a first approximation because the behaviour of <code>break</code> and <code>continue</code> are not capturable with the transliteration shown \u2014 but your code doesn't have those anyway.)</p>\n<p>You could avoid <code>child</code> by simply using <code>hole *= 2;</code> as the body of the loop.</p>\n", "LastEditorUserId": "15168", "LastActivityDate": "2015-02-18T04:39:12.890", "Score": "3", "CreationDate": "2015-02-18T04:31:20.140", "ParentId": "28575953", "CommentCount": "1", "OwnerUserId": "15168", "LastEditDate": "2015-02-18T04:39:12.890"}, "28576010": {"Id": "28576010", "PostTypeId": "2", "Body": "<p>Any <code>for</code> loop of the form:</p>\n<pre><code>for (A; B; C) {\n    ....\n}\n</code></pre>\n<p>is equivalent of a <code>while</code> loop of the form:</p>\n<pre><code>{\n    A;\n    while (B) {\n        ....\n        C;\n    };\n}\n</code></pre>\n<p>so, you can see the body of the loop is executed before the 'increment' part (<code>C</code> in this example).</p>\n", "LastEditorUserId": "11649", "LastActivityDate": "2015-02-18T04:44:28.590", "Score": "-3", "CreationDate": "2015-02-18T04:28:59.050", "ParentId": "28575953", "CommentCount": "6", "OwnerUserId": "11649", "LastEditDate": "2015-02-18T04:44:28.590"}, "28576005": {"Id": "28576005", "PostTypeId": "2", "Body": "<p>The last part of a for loop is only executed after the loop has done its first iteration. Thus, it first sets child and then assigns hole to child.</p>\n", "LastActivityDate": "2015-02-18T04:28:14.007", "CommentCount": "0", "CreationDate": "2015-02-18T04:28:14.007", "ParentId": "28575953", "Score": "3", "OwnerUserId": "1457269"}, "28576210": {"Id": "28576210", "PostTypeId": "2", "Body": "<p>C++11 \u00a76.5.3/1 in [stmt.for]:</p>\n<blockquote>\n<p id=\"so_28575953_28576210_0\"><strong>\u201d</strong> The <code>for</code> statement  </p>\n<p id=\"so_28575953_28576210_1\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>for</code> <code>(</code> <em>for-init-statement</em> <em>condition</em><sub>opt</sub><code>;</code> <em>expression</em><sub>opt</sub> <code>)</code> <em>statement</em> </p>\n<p id=\"so_28575953_28576210_2\">is equivalent to  </p>\n<p id=\"so_28575953_28576210_3\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>{</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>for-init-statement</em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>while</code> <code>(</code> <em>condition</em> <code>)</code> <code>{</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>statement</em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>expression</em> <code>;</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>}</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>}</code> </br></br></br></br></br></br></p>\n<p id=\"so_28575953_28576210_4\">except that names declared in the <em>for-init-statement</em> are in the same \n  declarative-region as those declared in the condition, and except that a <code>continue</code> in <em>statement</em> (not enclosed in another iteration statement) will\n  execute <em>expression</em>  before re-evaluating <em>condition</em>.</p>\n</blockquote>\n<p>I.e., the <code>hole = child</code> update is not executed until after the <code>for</code> loop body.</p>\n<p>And yes, it's a pain-in-the-ass formatting this in Stack Overflow markdown. Evidently it was so also for the editor of the standard (I think that's written in LaTeX or something like that), because at the end <em>statement</em>, <em>expression</em> and <em>condition</em> lacks italics. I added that in the quote.</p>\n", "LastActivityDate": "2015-02-18T04:51:15.620", "CommentCount": "0", "CreationDate": "2015-02-18T04:51:15.620", "ParentId": "28575953", "Score": "2", "OwnerUserId": "464581"}, "bq_ids": {"n4140": {"so_28575953_28576210_4": {"length": 18, "quality": 0.8181818181818182, "section_id": 3903}, "so_28575953_28576210_3": {"length": 4, "quality": 0.8, "section_id": 3895}}, "n3337": {"so_28575953_28576210_4": {"length": 19, "quality": 0.8636363636363636, "section_id": 3763}, "so_28575953_28576210_3": {"length": 4, "quality": 0.8, "section_id": 3755}}, "n4659": {"so_28575953_28576210_4": {"length": 20, "quality": 0.9090909090909091, "section_id": 4789}}}, "28575953": {"ViewCount": "68", "Body": "<p>I am reading my data structures book and see some code that doesn't sit well with me. I think my idea of for loops is wrong. Can someone help? </p>\n<pre><code>void percolateDown(int hole){\n\n    int child;\n    Comparable tmp = array[hole];\n     // my problem is that child is not initialized to a value until inside for loop how is hole = child possible! \n    for(; hole * 2 &lt;= currentSize; hole = child){\n          child = hole * 2;  \n         //code that does percolate up\n    }\n\n    array[hole] = tmp; \n}\n</code></pre>\n<p>This code is right I only removed the unnecessary code inside. You probably guessed it but it is a method for percolating down in a heap.  </p>\n<p>My problem is that child is not given a value until inside the for loop so how is it the for loop can state hole = child in it? </p>\n<p>My assumption is that everything in the for loop is ran before or at the first iteration. </p>\n", "AcceptedAnswerId": "28576005", "Title": "Shouldn't there be an error in this for loop?", "CreationDate": "2015-02-18T04:24:38.613", "Id": "28575953", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-02-18T04:51:15.620", "Score": "0", "OwnerUserId": "4775199", "Tags": "<c++><for-loop>", "AnswerCount": "4"}});