post_cb({"9820027": {"CommentCount": "4", "AcceptedAnswerId": "9820155", "PostTypeId": "1", "LastEditorUserId": "5794048", "CreationDate": "2012-03-22T10:03:38.077", "LastActivityDate": "2016-02-12T13:21:07.713", "LastEditDate": "2016-02-12T13:21:07.713", "ViewCount": "2260", "FavoriteCount": "1", "Title": "Using newly declared variable in initialization (int x = x+1)?", "Id": "9820027", "Score": "7", "Body": "<p>I just stumbled upon a behavior which surprised me:</p>\n<p>When writing:</p>\n<pre><code>int x = x+1;\n</code></pre>\n<p>in a C/C++-program (or even more complex expression involving the newly created variable x) my gcc/g++ compiles without errors. In the above case X is 1 afterwards. Note that there is no variable x in scope by a previous declaration.</p>\n<p>So I'd like to know whether this is correct behaviour (and even might be useful in some situation) or just a parser pecularity with my gcc version or gcc in general.</p>\n<p>BTW: The following does not work:</p>\n<pre><code>int x++;\n</code></pre>\n", "Tags": "<c++><c><initialization><undefined-behavior>", "OwnerUserId": "575635", "AnswerCount": "8"}, "9820118": {"ParentId": "9820027", "CommentCount": "0", "CreationDate": "2012-03-22T10:09:16.467", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "9820118", "Score": "3", "Body": "<p>In the first case you simply use the value already at the place in memory where the variable is. In your case this seems to be zero, but it can be anything. Using such a construct is a recipe for disaster and hard to find bugs in the future.</p>\n<p>For the second case, it's simply a syntax error. You can not mix an expression with a variable declaration like that.</p>\n", "LastActivityDate": "2012-03-22T10:09:16.467"}, "9820580": {"ParentId": "9820027", "CommentCount": "0", "CreationDate": "2012-03-22T10:36:23.567", "OwnerUserId": "252131", "PostTypeId": "2", "Id": "9820580", "Score": "0", "Body": "<blockquote>\n<p id=\"so_9820027_9820580_0\">3.3.1 Point of declaration 1 The point of declaration for a name is immediately after its complete declarator (clause 8) and before its\n  initializer (if any), except as noted below. [ Example: int x = 12; {\n  int x = x; } Here the second x is initialized with its own\n  (indeterminate) value. \u2014end example ]</p>\n</blockquote>\n<p>The above states so and should have indeterminate value, You are lucky with 1.</p>\n", "LastActivityDate": "2012-03-22T10:36:23.567"}, "9820152": {"ParentId": "9820027", "CommentCount": "1", "CreationDate": "2012-03-22T10:11:07.120", "OwnerUserId": "535539", "PostTypeId": "2", "Id": "9820152", "Score": "-1", "Body": "<p>This is undefined behaviour and the compiler should at least to issue a warning. Try to compile using <code>g++ -ansi ...</code>. The second example is just a syntax error.</p>\n", "LastActivityDate": "2012-03-22T10:11:07.120"}, "9820221": {"ParentId": "9820027", "CommentCount": "0", "CreationDate": "2012-03-22T10:15:38.343", "OwnerUserId": "104774", "PostTypeId": "2", "Id": "9820221", "Score": "3", "Body": "<p>The variable is defined from the \"=\" on, so it is valid and when it is globally defined, it is initialized as zero, so in that case it is defined behavior, in others the variable was unintialized as as such still is unitialized (but increased with 1).<br>\n<strong>Remark that it still is not very sane or useful code.</strong></br></p>\n", "LastActivityDate": "2012-03-22T10:15:38.343"}, "9820155": {"ParentId": "9820027", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-03-22T10:11:23.557", "Score": "16", "LastEditorUserId": "14860", "LastEditDate": "2012-03-22T11:20:46.973", "Id": "9820155", "OwnerUserId": "14860", "Body": "<p>With the expression:</p>\n<pre><code>int x = x + 1;\n</code></pre>\n<p>the variable <code>x</code> comes into existence at the <code>=</code> sign, which is why you can use it on the right hand side. By \"comes into existence\", I mean the variable exists but has yet to be assigned a value by the initialiser part.</p>\n<p>However, unless you're initialising a variable with static storage duration (e.g., outside of a function), it's undefined behaviour since the <code>x</code> that comes into existence has an arbitrary value.</p>\n<p>C++03 has this to say:</p>\n<blockquote>\n<p id=\"so_9820027_9820155_0\">The point of declaration for a name is immediately after its complete declarator (clause 8) and before its initializer (if any) ... </p>\n<p id=\"so_9820027_9820155_1\">Example:<br>\n<code>int x = 12;</code><br>\n<code>{ int x = x; }</code><br>\n  Here the second x is initialized with its own (indeterminate) value.</br></br></br></p>\n</blockquote>\n<p>That second case there is pretty much what you have in your question.</p>\n", "LastActivityDate": "2012-03-22T11:20:46.973"}, "24067885": {"ParentId": "9820027", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-06-05T18:45:10.513", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:50.750", "Id": "24067885", "OwnerUserId": "103167", "Body": "<p>Your code has two possiblities:</p>\n<ol>\n<li>If <code>x</code> is a local variable, you have undefined behavior, since you use the value of an object before its lifetime begins.</li>\n<li>If <code>x</code> has static or thread-local lifetime, it is pre-initialized to zero, and your static initialization will reliably set it to <code>1</code>.  This is well-defined.</li>\n</ol>\n<p>You may also wish to read <a href=\"https://stackoverflow.com/a/24067465/103167\">my answer that covers related cases, including variables of other types, and variables which are <em>written to</em> before their initialization is completed</a></p>\n", "LastActivityDate": "2014-06-05T18:45:10.513"}, "9820080": {"ParentId": "9820027", "CommentCount": "0", "CreationDate": "2012-03-22T10:07:06.457", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "9820080", "Score": "8", "Body": "<p>It's not, it's <strong>undefined behavior</strong>.</p>\n<p>You're using an uninitialized variable - <code>x</code>. You get <code>1</code> out of pure luck, anything could happen.</p>\n<p>FYI, in MSVS I get a warning:</p>\n<blockquote>\n<p id=\"so_9820027_9820080_0\">Warning   1   warning C4700: uninitialized local variable 'i' used</p>\n</blockquote>\n<p>Also, at run-time, I get an exception, so it's definitely not safe.</p>\n", "LastActivityDate": "2012-03-22T10:07:06.457"}, "bq_ids": {"n4140": {"so_9820027_9820155_1": {"section_id": 7049, "quality": 0.7, "length": 7}, "so_9820027_9820580_0": {"section_id": 7049, "quality": 0.6774193548387096, "length": 21}, "so_9820027_9820155_0": {"section_id": 7049, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_9820027_9820155_1": {"section_id": 6794, "quality": 0.7, "length": 7}, "so_9820027_9820580_0": {"section_id": 6794, "quality": 0.6774193548387096, "length": 21}, "so_9820027_9820155_0": {"section_id": 6794, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_9820027_9820155_1": {"section_id": 8546, "quality": 0.7, "length": 7}, "so_9820027_9820580_0": {"section_id": 8546, "quality": 0.6774193548387096, "length": 21}, "so_9820027_9820155_0": {"section_id": 8546, "quality": 0.7692307692307693, "length": 10}}}, "9820121": {"ParentId": "9820027", "CommentCount": "0", "CreationDate": "2012-03-22T10:09:19.070", "OwnerUserId": "912144", "PostTypeId": "2", "Id": "9820121", "Score": "5", "Body": "<pre><code>int x = x + 1;\n</code></pre>\n<p>is basically</p>\n<pre><code>int x;\nx = x + 1;\n</code></pre>\n<p>You have just been lucky to have 0 in <code>x</code>.</p>\n<pre><code>int x++;\n</code></pre>\n<p>however is not possible in C++ at a parser level! The previous could be parsed but was semantically wrong. The second one can't even be parsed.</p>\n", "LastActivityDate": "2012-03-22T10:09:19.070"}});