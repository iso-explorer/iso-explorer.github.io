post_cb({"43877628": {"ParentId": "1571340", "CommentCount": "0", "Body": "<p><strong>C++11 N3337 standard draft</strong></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf</a></p>\n<p>19.3 Assertions</p>\n<blockquote>\n<p id=\"so_1571340_43877628_0\">1 The header , described in (Table 42), provides a macro for documenting C ++ program assertions\n  and a mechanism for disabling the assertion checks.</p>\n<p id=\"so_1571340_43877628_1\">2 The contents are the same as the Standard C library header .</p>\n</blockquote>\n<p><strong>C99 N1256 standard draft</strong></p>\n<p><a href=\"http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf</a></p>\n<p>7.2 Diagnostics </p>\n<blockquote>\n<p id=\"so_1571340_43877628_2\">1 The header <code>&lt;assert.h&gt;</code> defines the assert macro and refers to another macro, <code>NDEBUG</code> which is not defined by <code>&lt;assert.h&gt;</code>. If <code>NDEBUG</code> is defined as a macro name at the\n  point in the source file where  is included, the assert macro is defined\n  simply as</p>\n<pre><code> #define assert(ignore) ((void)0)\n</code></pre>\n<p id=\"so_1571340_43877628_3\">The assert macro is redefined according to the current state of NDEBUG each time that\n  <code>&lt;assert.h&gt;</code> is included.</p>\n<p id=\"so_1571340_43877628_4\">2.\n  The assert macro shall be implemented as a macro, not as an actual function. If the\n  macro definition is suppressed in order to access an actual function, the behavior is\n  undefined.</p>\n</blockquote>\n<p>7.2.1 Program diagnostics</p>\n<p>7.2.1.1 The assert macro</p>\n<blockquote>\n<p id=\"so_1571340_43877628_5\">Synopsis</p>\n<p id=\"so_1571340_43877628_6\">1.</p>\n<pre><code>#include &lt;assert.h&gt;\nvoid assert(scalar expression);\n</code></pre>\n<p id=\"so_1571340_43877628_7\">Description</p>\n<p id=\"so_1571340_43877628_8\">2\n  The assert macro puts diagnostic tests into programs; it expands to a void expression.\n  When it is executed, if expression (which shall have a scalar type) is false (that is,\n  compares equal to 0), the assert macro writes information about the particular call that\n  failed (including the text of the argument, the name of the source file, the source line\n  number, and the name of the enclosing function \u2014 the latter are respectively the values of\n  the preprocessing macros <code>__FILE__</code> and <code>__LINE__</code> and of the identifier\n  <code>__func__</code>) on the standard error stream in an implementation-defined format. 165) It\n  then calls the abort function.</p>\n<p id=\"so_1571340_43877628_9\">Returns</p>\n<p id=\"so_1571340_43877628_10\">3\n  The assert macro returns no value.</p>\n</blockquote>\n", "OwnerUserId": "895245", "PostTypeId": "2", "Id": "43877628", "Score": "0", "CreationDate": "2017-05-09T18:45:09.330", "LastActivityDate": "2017-05-09T18:45:09.330"}, "1571368": {"ParentId": "1571340", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Assert allows you to halt execution if a condition (assertion) is false.</p>\n<p>For instance (Pseudocode):</p>\n<pre><code>Bank myBank = Bank.GetMyStuff();\n\nassert(myBank != NULL);\n\n// .. Continue.\n</code></pre>\n<p>If myBank is NULL, the function will stop execution, and an error produced. This is very good for making certain reusable code accept correct conditions, etc.</p>\n", "OwnerUserId": "103385", "LastEditorUserId": "103385", "LastEditDate": "2009-10-17T11:24:19.560", "Id": "1571368", "Score": "1", "CreationDate": "2009-10-15T09:52:54.030", "LastActivityDate": "2009-10-17T11:24:19.560"}, "1571376": {"ParentId": "1571340", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It is a function that will halt program execution if the value it has evaluated is false. Usually it is surrounded by a macro so that it is not compiled into the resultant binary when compiled with release settings. </p>\n<p>It is designed to be used for testing the assumptions you have made. For example:</p>\n<pre><code>void strcpy(char* dest, char* src){\n    //pointers shouldn't be null\n    assert(dest!=null);\n    assert(src!=null);\n\n    //copy string\n    while(*dest++ = *src++);\n}\n</code></pre>\n<p>The ideal you want is that you can make an error in your program, like calling a function with invalid arguments, and you hit an assert before it segfaults (or fails to work as expected)</p>\n", "OwnerUserId": "118145", "LastEditorUserId": "118145", "LastEditDate": "2009-10-15T10:03:43.217", "Id": "1571376", "Score": "0", "CreationDate": "2009-10-15T09:55:34.573", "LastActivityDate": "2009-10-15T10:03:43.217"}, "21071282": {"ParentId": "1571340", "CommentCount": "1", "Body": "<p><strong>The assert() can diagnose program bugs. It is defined in ASSERT.H, and its prototype is</strong></p>\n<p><strong>void assert(int expression);</strong>\nThe argument expression can be anything you want to test--a variable or any C expression. If expression evaluates to TRUE, assert() does nothing. If expression evaluates to FALSE, assert() displays an error message on stderr and aborts program execution.</p>\n<p><strong>How do you use assert()?</strong> It is most frequently used to track down program bugs (which are distinct from compilation errors). A bug doesn't prevent a program from compiling, but it causes it to give incorrect results or to run improperly (locking up, for example). For instance, a financial-analysis program you're writing might occasionally give incorrect answers. You suspect that the problem is caused by the variable interest_rate taking on a negative value, which should never happen. To check this, place the statement</p>\n<p>assert(interest_rate &gt;= 0);\nat locations in the program where interest_rate is used. If the variable ever does become negative, the assert() macro alerts you. You can then examine the relevant code to locate the cause of the problem.</p>\n<p><strong>To see how assert() works, run the sample program below</strong>. If you enter a nonzero value, the program displays the value and terminates normally. If you enter zero, the assert() macro forces abnormal program termination. The exact error message you see will depend on your compiler, but here's a typical example:</p>\n<p>Assertion failed: x, file list19_3.c, line 13\nNote that, in order for assert() to work, your program must be compiled in debug mode. Refer to your compiler documentation for information on enabling debug mode (as explained in a moment). When you later compile the final version in release mode, the assert() macros are disabled.</p>\n<pre><code> int x;\n\n printf(\"\\nEnter an integer value: \");\n scanf(\"%d\", &amp;x);\n\n assert(x &gt;= 0);\n\n printf(\"You entered %d.\\n\", x);\n return(0);\n</code></pre>\n<p>Enter an integer value: 10</p>\n<p>You entered 10.</p>\n<p>Enter an integer value: -1</p>\n<p>Error Message:\nAbnormal program termination</p>\n<p>Your error message might differ, depending on your system and compiler, but the general idea is the same.</p>\n", "OwnerUserId": "2447909", "PostTypeId": "2", "Id": "21071282", "Score": "6", "CreationDate": "2014-01-12T04:21:29.547", "LastActivityDate": "2014-01-12T04:21:29.547"}, "1571359": {"ParentId": "1571340", "CommentCount": "5", "Body": "<p>Take a look at</p>\n<p><a href=\"http://www.java-samples.com/showtutorial.php?tutorialid=451\" rel=\"noreferrer\">assert() example program in C++</a></p>\n<blockquote>\n<p id=\"so_1571340_1571359_0\">Many compilers offer an assert()\n  macro. The assert() macro returns TRUE\n  if its parameter evaluates TRUE and\n  takes some kind of action if it\n  evaluates FALSE. Many compilers will\n  abort the program on an assert() that\n  fails; others will throw an exception</p>\n<p id=\"so_1571340_1571359_1\">One powerful feature of the assert()\n  macro is that the preprocessor\n  collapses it into no code at all if\n  DEBUG is not defined. It is a great\n  help during development, and when the\n  final product ships there is no\n  performance penalty nor increase in\n  the size of the executable version of\n  the program.</p>\n</blockquote>\n<p>Eg</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\nvoid analyze (char *, int);\n\nint main(void)\n{\n   char *string = \"ABC\";\n   int length = 3;\n\n   analyze(string, length);\n   printf(\"The string %s is not null or empty, \"\n          \"and has length %d \\n\", string, length);\n}\n\nvoid analyze(char *string, int length)\n{\n   assert(string != NULL);     /* cannot be NULL */\n   assert(*string != '\\0');    /* cannot be empty */\n   assert(length &gt; 0);         /* must be positive */\n}\n\n/****************  Output should be similar to  ******************\nThe string ABC is not null or empty, and has length 3\n</code></pre>\n", "OwnerUserId": "47738", "PostTypeId": "2", "Id": "1571359", "Score": "11", "CreationDate": "2009-10-15T09:51:27.633", "LastActivityDate": "2009-10-15T09:51:27.633"}, "1571529": {"ParentId": "1571340", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>stuff like 'raises exception' and 'halts execution' might be true for most compilers, but not for all. (btw are there assert statements that really thrwo exceptions?)</p>\n<p>Here's an interesting, slightly different meaning of assert used by c6x and other TI compilers: upon seeing certain assert statements, these compilers use the information in that statement to perform certain optimizations. Wicked.</p>\n<p>Example in C:</p>\n<pre><code>int dot_product(short *x, short *y, short z)\n{\n  int sum = 0\n  int i;\n\n  assert( ( (int)(x) &amp; 0x3 ) == 0 );\n  assert( ( (int)(y) &amp; 0x3 ) == 0 );\n\n  for( i = 0 ; i &lt; z ; ++i )\n    sum += x[ i ] * y[ i ];\n  return sum;\n}\n</code></pre>\n<p>This tells de compiler the arrays are aligned on 32bits boundaries, so the compiler can generate specific instructions made for that kind of alignment.</p>\n", "OwnerUserId": "128384", "LastEditorUserId": "128384", "LastEditDate": "2009-10-15T10:53:56.807", "Id": "1571529", "Score": "3", "CreationDate": "2009-10-15T10:29:39.663", "LastActivityDate": "2009-10-15T10:53:56.807"}, "1571360": {"CommentCount": "8", "CreationDate": "2009-10-15T09:51:28.627", "CommunityOwnedDate": "2009-10-17T04:57:55.940", "LastEditorUserId": "6387170", "LastActivityDate": "2017-10-17T13:58:48.080", "ParentId": "1571340", "PostTypeId": "2", "LastEditDate": "2017-10-17T13:58:48.080", "Id": "1571360", "Score": "217", "Body": "<p><code>assert</code> will terminate the program (usually with a message quoting the assert statement) if its argument turns out to be false. it's commonly used during debugging to make the program fail more obviously if an unexpected condition occurs.</p>\n<p>for example:</p>\n<pre><code>assert(length &gt;= 0);  // die if length is negative.\n</code></pre>\n<p>You can also add a more informative message to be displayed if it fails like so:</p>\n<pre><code>assert(length &gt;= 0 &amp;&amp; \"Whoops, length can't possibly be negative! (didn't we just check 10 lines ago?) Tell jsmith\");\n</code></pre>\n<p>Or else like this:</p>\n<pre><code>assert((\"Length can't possibly be negative! Tell jsmith\", length &gt;= 0));\n</code></pre>\n<p>When you're doing a release (non-debug) build, you can also remove the overhead of evaluating <code>assert</code> statements by defining the <code>NDEBUG</code> macro, usually with a compiler switch. The corollary of this is that your program should <em>never</em> rely on the assert macro running.</p>\n<pre><code>// BAD\nassert(x++);\n\n// GOOD\nassert(x);    \nx++;\n\n// Watch out! Depends on the function:\nassert(foo());\n\n// Here's a safer way:\nint ret = foo();\nassert(ret);\n</code></pre>\n<p>From the combination of the program calling abort() and not being guarenteed to do anything, asserts should only be used to test things that the developer has assumed rather than, for example, the user entering a number rather than a letter (which should be handled by other means).</p>\n", "OwnerUserId": "157237"}, "36624016": {"ParentId": "1571340", "CommentCount": "3", "Body": "<p><strong>in addition, you can use it to check if the dynamic allocation successful.</strong></p>\n<p>Code example:</p>\n<pre><code>int ** p;\np = new int * [5];   // Dynamic `array (size 5) of pointers to int`\nfor (int i = 0; i &lt; 5; ++i) {\n  p[i] = new int[3]; // each i(ptr) is now pointing to dynamic array(size3)of actual int values\n    }\nassert (p);          // Check the dynamic allocation .\nSimilar to:\nif (p == NULL) {\ncout &lt;&lt; \"dynamic allocation failed\" &lt;&lt; endl;\nexit(1);\n}\n</code></pre>\n", "OwnerUserId": "6136134", "PostTypeId": "2", "Id": "36624016", "Score": "-2", "CreationDate": "2016-04-14T13:04:48.397", "LastActivityDate": "2016-04-14T13:04:48.397"}, "1571340": {"CommentCount": "4", "CreationDate": "2009-10-15T09:47:59.747", "PostTypeId": "1", "AcceptedAnswerId": "1571360", "LastEditorUserId": "827263", "LastActivityDate": "2017-10-17T13:58:48.080", "LastEditDate": "2013-06-25T18:51:38.530", "ViewCount": "203384", "FavoriteCount": "67", "Title": "What is the \"assert\" function?", "Id": "1571340", "Score": "197", "Body": "<p>I've been studying OpenCV tutorials and came across the <code>assert</code> function; what does it do?</p>\n", "Tags": "<c++><c><assert>", "OwnerUserId": "189646", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_1571340_43877628_1": {"section_id": 1523, "quality": 0.6666666666666666, "length": 4}, "so_1571340_43877628_0": {"section_id": 2571, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_1571340_43877628_1": {"section_id": 1517, "quality": 0.6666666666666666, "length": 4}, "so_1571340_43877628_0": {"section_id": 2536, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_1571340_43877628_1": {"section_id": 2156, "quality": 0.6666666666666666, "length": 4}, "so_1571340_43877628_0": {"section_id": 3307, "quality": 0.75, "length": 9}}}, "1571644": {"ParentId": "1571340", "CommentCount": "4", "Body": "<p>The <strong>assert</strong> computer statement is analogous to the statement <strong>make sure</strong> in English.</p>\n", "OwnerUserId": "184135", "PostTypeId": "2", "Id": "1571644", "Score": "95", "CreationDate": "2009-10-15T11:02:30.453", "LastActivityDate": "2009-10-15T11:02:30.453"}});