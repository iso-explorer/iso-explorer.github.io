post_cb({"9316880": {"ParentId": "9316795", "Score": "8", "CreationDate": "2012-02-16T18:25:22.823", "Id": "9316880", "OwnerUserId": "636019", "LastActivityDate": "2012-02-16T18:25:22.823", "Body": "<p>Yes, that's the first thing that's checked \u2014 from the C++11 standard, \u00a723.2.1 table 96 (Container requirements):</p>\n<blockquote>\n<p id=\"so_9316795_9316880_0\"><strong>Expression:</strong></p>\n<p id=\"so_9316795_9316880_1\">\u00a0\u00a0\u00a0\u00a0\u00a0<code>a == b</code> (where <code>a</code> and <code>b</code> denote values of type <code>X</code> and <code>X</code> denotes a container class containing objects of type <code>T</code>)</p>\n<p id=\"so_9316795_9316880_2\"><strong>Operational semantics:</strong></p>\n<pre><code>   distance(a.begin(), a.end()) == distance(b.begin(), b.end()) &amp;&amp;\n     equal(a.begin(), a.end(), b.begin())\n</code></pre>\n</blockquote>\n", "PostTypeId": "2", "CommentCount": "0"}, "9316795": {"Tags": "<c++><stl><comparator><performance>", "ViewCount": "2053", "AnswerCount": "1", "CreationDate": "2012-02-16T18:20:26.767", "Title": "Does the STL set equality operator check size first?", "CommentCount": "4", "AcceptedAnswerId": "9316880", "Score": "3", "OwnerUserId": "382186", "Id": "9316795", "LastActivityDate": "2012-02-16T18:26:49.597", "Body": "<p>When I'm using the == or != operator to compare two sets, does that operator actually compare the size of the two sets first?  I'm wondering if I need to manually compare the two sizes first to make it more efficient, or if I would actually be making it less efficient.  I know the equality and inequality operators will check size, I just don't know if it will do so first.</p>\n<pre><code>bool checkEqualTo( const set&lt;int&gt; &amp; set1, const set&lt;int&gt; &amp; set2 )\n{\n    // Should I include comparison of sizes first?\n    if ( set1.size() != set2.size() )\n    {\n       return false;\n    }\n    if ( set1 != set2 )\n    { \n        return false;\n    }\n    return true;\n}\n</code></pre>\n", "PostTypeId": "1"}, "bq_ids": {"n4659": {"so_9316795_9316880_1": {"length": 6, "section_id": 823, "quality": 0.6}}}});