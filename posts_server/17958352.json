post_cb({"17958720": {"ParentId": "17958352", "CommentCount": "1", "Body": "<p><code>bad_alloc</code> comes from heap problems of some kind, and can be thrown by any code that indirectly allocates or frees heap memory, which includes all the standard library collections (<code>std::vector</code>, <code>std::map</code>, etc) as well as <code>std::string</code>.</p>\n<p>If your programs do not use a lot of heap memory (so they're not running out of heap), <code>bad_alloc</code>s are likely caused by heap corruption, which is generally caused by using dangling pointers into the heap.</p>\n<p>You mention that your code does a lot of <code>resize</code> operations -- <code>resize</code> on most collections will invalidate all iterators on the collection, so if you reuse any iterator after a <code>resize</code>, that may cause heap corruption that manifests <code>bad_alloc</code> exceptions.  If you use unchecked vector element accesses (<code>std::vector::operator[]</code>), and your indexes are out of range, that can cause heap corruption as well.</p>\n<p>The best way to track down heap corruption and memory errors in general is to use a heap debugger such as <a href=\"http://valgrind.org\" rel=\"noreferrer\">valgrind</a></p>\n", "OwnerUserId": "16406", "PostTypeId": "2", "Id": "17958720", "Score": "6", "CreationDate": "2013-07-30T22:40:19.737", "LastActivityDate": "2013-07-30T22:40:19.737"}, "17958489": {"ParentId": "17958352", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_17958352_17958489_0\">If I am not using \"new\" and \"delete\", and all of my variables are being initialized INSIDE of local functions, is it possible to have memory leaks / allocation problems through repeated function calls?</p>\n</blockquote>\n<p>Unclear. If all the variables you refer to are local, no. If you're using malloc(), calloc(), and free(), yes.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_1\">Is there any chance I am running low on stack memory, if I am doing the whole program through the stack?</p>\n</blockquote>\n<p>Not if you get bad_alloc. If you got a 'stack overflow' error, yes.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_2\">Is it possible I need to load some of my big lookup tables (maps, etc.) on the heap and then just use the stack for my iterations where speed is important?</p>\n</blockquote>\n<p>Well, it's hard to believe that you need a local copy of a lookup table in every stack frame of a recursive method.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_3\">Is there a problem with using resize a lot related to memory?</p>\n</blockquote>\n<p>Of course. You can run out.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_4\">Could this be an instance where I should use \"new\" and \"delete\"</p>\n</blockquote>\n<p>Impossible today without knowing more about your data structures.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_5\">(I've been warned in many instances not to use those unless there is a very strong, specific reason to do so)?</p>\n</blockquote>\n<p>By whom? Why?</p>\n<blockquote>\n<p id=\"so_17958352_17958489_6\">Within the problem function, I am creating a class variable,</p>\n</blockquote>\n<p>You are creating an instance of the class on the stack. I think. Please clarify.</p>\n<blockquote>\n<p id=\"so_17958352_17958489_7\">then writing over that variable about 20 times (once for each \"iteration\" of my model).</p>\n</blockquote>\n<p>With an assignment? Does the class have an assignment operator? Is it correct? Does the class itself use heap memory? Is it correctly allocated and deleted on construction, destruction, and assignment?</p>\n", "OwnerUserId": "207421", "PostTypeId": "2", "Id": "17958489", "Score": "2", "CreationDate": "2013-07-30T22:21:21.307", "LastActivityDate": "2013-07-30T22:21:21.307"}, "17958469": {"ParentId": "17958352", "CommentCount": "0", "Body": "<p>Classes like <code>std::vector</code> and <code>std::string</code> are allowed to throw <code>bad_alloc</code> or other exceptions.  After all, they have to use some memory that comes from somewhere, and any computer only has so much memory to go around.</p>\n<p>Standard 17.6.5.12/4:</p>\n<blockquote>\n<p id=\"so_17958352_17958469_0\">Destructor operations defined in the C++ standard library shall not throw exceptions. Every destructor in the C++ standard library shall behave as if it had a non-throwing exception specification. Any other functions defined in the C++ standard library that do not have an <em>exception-specification</em> may throw implementation-defined exceptions unless otherwise specified. [Footnote 1]  An implementation may strengthen this implicit <em>exception-specification</em> by adding an explicit one.</p>\n<p id=\"so_17958352_17958469_1\">Footnote 1: In particular, they can report a failure to allocate storage by throwing an exception of type <code>bad_alloc</code>, or a class derived from <code>bad_alloc</code> (18.6.2.1). Library implementations should report errors by throwing exceptions of or derived from the standard exception classes (18.6.2.1, 18.8, 19.2).</p>\n</blockquote>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "17958469", "Score": "3", "CreationDate": "2013-07-30T22:19:55.013", "LastActivityDate": "2013-07-30T22:19:55.013"}, "17958700": {"ParentId": "17958352", "CommentCount": "0", "Body": "<p>Since, as you said, you are using <code>std::vector</code> with default allocator, problem occurs when you use a lot of <code>std::vector::resize(...)</code> and it occurs after some iterations, my guess is that you run into heap fragmentation problem.</p>\n", "OwnerUserId": "917249", "PostTypeId": "2", "Id": "17958700", "Score": "2", "CreationDate": "2013-07-30T22:38:33.930", "LastActivityDate": "2013-07-30T22:38:33.930"}, "17958352": {"CommentCount": "6", "ViewCount": "3474", "PostTypeId": "1", "LastEditorUserId": "1473217", "CreationDate": "2013-07-30T22:10:12.313", "LastActivityDate": "2013-07-30T22:40:19.737", "Title": "C++ memory allocation errors without use of new", "AcceptedAnswerId": "17958720", "LastEditDate": "2013-07-30T22:30:57.487", "Id": "17958352", "Score": "4", "Body": "<p>I am having issues with my program throwing a large number of memory allocation exceptions and I am having a very hard time diagnosing the problem...I would post code, but my program is very large and I have proprietary information concerns, so I am hoping to get some help without posting the code.  If you plan on responding with some form of SSCCE comment, just stop reading now and save both of us some time.  This is a case where I cannot post succinct code - I will try to be as clear and concise as possible with my problem description and some specific questions.</p>\n<p><em>Program Background</em> - my program is basically a data cruncher.  It takes a bunch of data tables as inputs, performs calculations on them, and spits out new data tables based on the calculation results.  All of my data structures are user-defined classes (consisting of int, double and string types with vector containers for arrays).  In all cases, I initiate instances of class variables without the use of new and delete.</p>\n<p><em>Problem Description</em> - my program compiles without warnings, and runs fine on smaller datasets.  However, once I increase the dataset (from a 20x80 array to 400x80), I start throwing bad_alloc exceptions (once I've processed the first 35 entries or so).  The large datasets runs fine in 17 of my 18 modules - I have isolated one function where the errors are occurring.  The calculations needed for this function would result in about 30,000 rows of data being created, whereas other functions in my code generate 800,000+ rows without incident.<br>\n     The only real unique attribute in this module is that I am using resize a lot (about 100 times per function call), and that the function uses recursive loops during the resize operation (the function is allocating square feet out of a building one tenant at a time, and then updating the remaining feet to be allocated after each tenant lease size and duration is simulated, until all square feet are allocated).  Also, the error is happening at nearly the same place each time (but not the exact same location because I have a random number generator that is throwing in some variation to the outcomes).  What really confounds me is that the first ~34 calls to this function work fine, and the ~35 call does not require more memory than the previous 34, yet I am having these bad_alloc exceptions on the 35th call nonetheless...</br></p>\n<p>I know it's difficult to help without code.  Please just try to give me some direction.  My specific questions are as follows:</p>\n<ol>\n<li><p>If I am not using \"new\" and \"delete\", and all of my variables are being initialized INSIDE of local functions, is it possible to have memory leaks / allocation problems through repeated function calls?  Is there anything I can or should do to manage memory when initializing variables include of local function using \"vector Instance;\" to declare my variables?</p></li>\n<li><p>Is there any chance I am running low on stack memory, if I am doing the whole program through the stack?  Is it possible I need to load some of my big lookup tables (maps, etc.) on the heap and then just use the stack for my iterations where speed is important?</p></li>\n<li><p>Is there a problem with using resize a lot related to memory?  Could this be an instance where I should use \"new\" and \"delete\" (I've been warned in many instances not to use those unless there is a very strong, specific reason to do so)?  </p></li>\n<li><p>[Related to 3] Within the problem function, I am creating a class variable, then writing over that variable about 20 times (once for each \"iteration\" of my model).  I don't need the data from the previous iteration when I do this...so I could ostensibly create a new instance of the variable for each iteration, but I don't understand how this would help necessarily (since clearly I am able to do all 20 iterations on one instance on the first ~34 data slices)</p></li>\n</ol>\n<p>Any thoughts would be appreciated.  I can try to post some code, but I already tried that once and everyone seemed to get distracted by the fact that it wasn't compilable.  I can post the function in question but it doesn't compile by itself.</p>\n<p>Here is the class that is causing the problem:</p>\n<pre><code>// Class definition\nclass SpaceBlockRentRoll\n{\npublic:\n    double RBA;\n    string Tenant;\n    int TenantNumber;\n    double DefaultTenantPD;\n    int StartMonth;\n    int EndMonth;\n    int RentPSF;\n    vector&lt;double&gt; OccupancyVector;\n    vector&lt;double&gt; RentVector;\n};\n\n// Class variable declaration (occuring inside function)\nvector&lt;SpaceBlockRentRoll&gt; RentRoll;\n</code></pre>\n<p>Also, here is a snippet from the function where the recursion occurs</p>\n<pre><code>for (int s=1; s&lt;=NumofPaths; ++s) {\n    TenantCounter = 0;\n    RemainingTenantSF = t1SF;\n    if (RemainingTenantSF &gt; 0) {\n        while (RemainingTenantSF &gt; 0) {\n            TenantCounter = TenantCounter + 1;\n\n            // Resize relevant RentRoll vectors\n            ResizeRentRoll(TenantCounter, NumofPaths, NumofPeriods, RentRoll);\n\n            // Assign values for current tenant\n            RentRoll[TenantCounter] = AssignRentRollValues(MP, RR)  \n            // Update the square feet yet to be allocated\n            RemainingTenantSF = RemainingTenantSF - RentRoll[TenantCounter].RBA;\n        }\n    }\n}\n</code></pre>\n", "Tags": "<c++><bad-alloc>", "OwnerUserId": "1473217", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_17958352_17958489_6": {"section_id": 5954, "quality": 0.6666666666666666, "length": 4}, "so_17958352_17958469_1": {"section_id": 6362, "quality": 0.8214285714285714, "length": 23}, "so_17958352_17958469_0": {"section_id": 6362, "quality": 0.9166666666666666, "length": 33}}, "n3337": {"so_17958352_17958489_6": {"section_id": 5724, "quality": 0.6666666666666666, "length": 4}, "so_17958352_17958469_1": {"section_id": 6119, "quality": 0.8214285714285714, "length": 23}, "so_17958352_17958469_0": {"section_id": 6119, "quality": 0.9166666666666666, "length": 33}}, "n4659": {"so_17958352_17958489_6": {"section_id": 7441, "quality": 0.6666666666666666, "length": 4}, "so_17958352_17958469_1": {"section_id": 7872, "quality": 0.75, "length": 21}}}});