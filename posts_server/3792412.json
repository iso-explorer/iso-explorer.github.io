post_cb({"3792427": {"ParentId": "3792412", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Use constructor initializer list to initialize non-static constant members.</p>\n<p>ISO C++03 says the following things about static data members.</p>\n<p><code>[class.static.data]</code></p>\n<p><code>9.4.2  Static data members</code></p>\n<blockquote>\n<p id=\"so_3792412_3792427_0\">1 A static data member is not part of the subobjects of a class.  There is only one copy of a static data member shared by all the objects of the class.`</p>\n<p id=\"so_3792412_3792427_1\">2 The  declaration  of  a static data  member  in  its  class  definition  is  not  a  definition  and  may  be  of  an incomplete type other than cv-qualified void.  The definition for a staticdata member shall appear in a namespace scope enclosing the member\u2019s class definition.  In the definition at namespace scope, the name of  the static data  member  shall  be  qualified  by  its  class  name  using  the :: operator. `</p>\n<p id=\"so_3792412_3792427_2\">If a static data member is of <strong>const integral</strong> or const enumeration type, its declaration in the class definition can specify a <strong>constant-initializer which shall be an integral constant expression</strong> (5.19).  In that case, the member can appear in integral constant expressions.  <strong>The member shall still be defined in a name-space scope if it is used in the program and the namespace scope definition shall not contain an initializer*</strong>.</p>\n</blockquote>\n<pre><code>class A\n{\n        private:\n\n                const  int a=9; //incorrect \n                static const int b = 10; //declaration (correct)\n                static const double c = 1.3 //incorrect (Only const-static int members can be initialized like that)\n\n\n        public:\n\n                A(): a(9){} \n};\n\nconst int A::b; //definition of const-static int member\n</code></pre>\n<p>You can take the address of a static member if (and only if) <a href=\"http://www2.research.att.com/~bs/bs_faq2.html#in-class\" rel=\"nofollow\">it has an out-of-class definition:</a></p>\n<pre><code>class AE {\n    // ...\npublic:\n    static const int c6 = 7;\n    static const int c7 = 31;\n};\n\nconst int AE::c7;   // definition\n\nint f()\n{\n    const int* p1 = &amp;AE::c6;    // error: c6 not an lvalue\n    const int* p2 = &amp;AE::c7;    // ok\n    // ...\n}\n</code></pre>\n", "OwnerUserId": "165520", "LastEditorUserId": "165520", "LastEditDate": "2010-09-25T09:40:11.230", "Id": "3792427", "Score": "5", "CreationDate": "2010-09-25T03:55:57.463", "LastActivityDate": "2010-09-25T09:40:11.230"}, "3792426": {"ParentId": "3792412", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>To initialize the <code>const</code> object, you'll need to do it within the constructor because it is a per object instantiation of an int.  On the other hand, the <code>static const</code> variable is different in that it is shared amongst all the objects of that type.  That means its allocated in the data segment, in a separate location to the variables within the object.  It must be defined outside the constructor because it's only going to be set once, ever and not once per object.</p>\n<p>edit:  fixed \"on the stack\" as per casablanca's suggestion</p>\n", "OwnerUserId": "178060", "LastEditorUserId": "178060", "LastEditDate": "2010-09-25T04:05:27.660", "Id": "3792426", "Score": "2", "CreationDate": "2010-09-25T03:55:38.887", "LastActivityDate": "2010-09-25T04:05:27.660"}, "3792434": {"ParentId": "3792412", "CommentCount": "0", "Body": "<p><code>static</code> is a keyword used for instance-less variables/methods of a class. Therefore stating:</p>\n<pre><code>static int a=9;\n</code></pre>\n<p>means that a lives for the life of the application. The <code>const</code> keyword means a value cannot change. Therefore <code>const static int a=9;</code> declares a variable that is both static (lives for the application) and does not change value.</p>\n<p>The reason you cannot state:</p>\n<pre><code>const int a=9;\n</code></pre>\n<p>Is because non-static members cannot be initialized like this, and need to be initialized in the constructor. Since you cannot change constant variables outside there declaration, constant non-static members become impossible.</p>\n<p><strong>EDIT:</strong> Also note that a const non-static member is unnecessary. Because you member will never change value, making it static to get around errors will make no difference to your code, besides the fact that you can access it with <code>A::a</code>, instead of needing an instantiation of A.</p>\n", "OwnerUserId": "429435", "PostTypeId": "2", "Id": "3792434", "Score": "0", "CreationDate": "2010-09-25T03:58:40.827", "LastActivityDate": "2010-09-25T03:58:40.827"}, "bq_ids": {"n4140": {"so_3792412_3792427_0": {"section_id": 5906, "quality": 0.9375, "length": 15}, "so_3792412_3792427_1": {"section_id": 5907, "quality": 0.925, "length": 37}, "so_3792412_3792427_2": {"section_id": 5908, "quality": 0.7567567567567568, "length": 28}}, "n3337": {"so_3792412_3792427_0": {"section_id": 5678, "quality": 0.9375, "length": 15}, "so_3792412_3792427_1": {"section_id": 5679, "quality": 0.925, "length": 37}, "so_3792412_3792427_2": {"section_id": 5680, "quality": 0.7567567567567568, "length": 28}}, "n4659": {"so_3792412_3792427_0": {"section_id": 7388, "quality": 0.9375, "length": 15}, "so_3792412_3792427_1": {"section_id": 7389, "quality": 0.875, "length": 35}, "so_3792412_3792427_2": {"section_id": 7390, "quality": 0.6486486486486487, "length": 24}}}, "3792412": {"CommentCount": "0", "AcceptedAnswerId": "3792427", "CreationDate": "2010-09-25T03:51:01.750", "LastActivityDate": "2010-09-25T09:40:11.230", "PostTypeId": "1", "ViewCount": "2126", "FavoriteCount": "1", "Title": "const and static specifiers in c++", "Id": "3792412", "Score": "6", "Body": "<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass A\n{\n        private:\n                const  int a=9;\n        public:\n                void display()\n                {\n                    cout&lt;&lt;a;\n                }\n};\nint main()\n{\n        A a;\n        a.display();\n        return 0;\n}\n</code></pre>\n<p>Why does initialization const int a=9 is not permitted.\nBut where as if i write constant static int a=9 compiler does not show any error. What is the meaning of writing const static int a=9? when should i write like this ?<br>\n~     </br></p>\n", "Tags": "<c++>", "OwnerUserId": "424716", "AnswerCount": "3"}});