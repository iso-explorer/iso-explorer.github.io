post_cb({"bq_ids": {"n4140": {"so_43286980_43287800_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 203}, "so_43286980_43287800_1": {"length": 9, "quality": 0.9, "section_id": 206}}, "n3337": {"so_43286980_43287800_1": {"length": 9, "quality": 0.9, "section_id": 200}, "so_43286980_43287800_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 197}}, "n4659": {"so_43286980_43287800_1": {"length": 9, "quality": 0.9, "section_id": 214}, "so_43286980_43287800_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 209}, "so_43286980_43287800_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 180}}}, "43287393": {"Id": "43287393", "PostTypeId": "2", "Body": "<p>Firstly, if you want to assert that the template has been instanciated with the wrong type, you must be explicit in the static_assert:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate&lt;typename T&gt; class Class\n{\n    static_assert(std::is_same&lt;T, int&gt;::value, \"Class instantiated with non-int type\");\n\n\n};\n</code></pre>\n<p>Secondly, the following line may not be doing what you think:</p>\n<pre><code>template&lt;&gt; class Class&lt;int&gt; {};\n</code></pre>\n<p>What you're actually doing here is creating a whole new specialisation, which has nothing whatsoever to do with the default template specialisation<code>Class&lt;T&gt;</code>.</p>\n<p>Deleting the specialisation for <code>int</code> and instanciating a non-int class of the default specialisation yields an error in both compilers as it should: </p>\n<pre><code>int main()\n{\n    Class&lt;int&gt; ci;\n    Class&lt;float&gt; cf;\n}\n</code></pre>\n<p>example error:</p>\n<pre><code>&lt;source&gt;: In instantiation of 'class Class&lt;float&gt;':\n&lt;source&gt;:14:18:   required from here\n&lt;source&gt;:5:5: error: static assertion failed: Class instantiated with non-int type\n     static_assert(std::is_same&lt;T, int&gt;::value, \"Class instantiated with non-int type\");\n     ^~~~~~~~~~~~~\n</code></pre>\n", "LastActivityDate": "2017-04-07T21:33:32.973", "CommentCount": "3", "CreationDate": "2017-04-07T21:33:32.973", "ParentId": "43286980", "Score": "0", "OwnerUserId": "2015579"}, "43286980": {"ViewCount": "98", "Body": "<p>My question is, whether the following code is valid:</p>\n<pre><code>template&lt;int i&gt; class Class\n{\n    static_assert(sizeof(i) == 0, \"Class instantiated with i != 1\");\n};\n\ntemplate&lt;&gt; class Class&lt;1&gt; {};\n</code></pre>\n<p>This snippet compiles with <code>g++</code>. But <code>clang++</code> is trapped by the <code>static_assert</code>:</p>\n<pre><code>error: static_assert failed \"Class instantiated with non-int type\"\n</code></pre>\n<p>A template that uses a type instead of an <code>int</code> like</p>\n<pre><code>template&lt;typename T&gt; class Class\n{\n    static_assert(sizeof(T) == 0, \"Class instantiated with non-int type\");\n};\n\ntemplate&lt;&gt; class Class&lt;int&gt; {};\n</code></pre>\n<p>is accepted by both compilers. Exactly the same pattern applies to function templates.</p>\n<p>I found <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#1483\" rel=\"nofollow noreferrer\">open-std.org::Non-dependent static_assert-declarations</a>, but that does not seem to apply, because my <code>static_assert</code> is dependent on the template parameter.</p>\n<p>You may check the described behavior on <a href=\"https://godbolt.org/g/wBCgA2\" rel=\"nofollow noreferrer\">godbolt.org</a></p>\n<p><strong>EDIT</strong>: As Johan Lundberg points out in the comment my question is wrong. Indeed <code>sizeof(i)</code> does not depend on the template parameter. Also R.Sahu is completely right: It would make much more sense to assert <code>i != 1</code>. For this again both compilers accept the code.</p>\n<p>However, still the upper example compiles with <code>g++</code>. As <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#1483\" rel=\"nofollow noreferrer\">open-std.org::Non-dependent static_assert-declarations</a> applies to that case (I apologize again for the wrong question in this respect): Is <code>g++</code> actually wrong in compiling the code without error?</p>\n", "AcceptedAnswerId": "43287800", "Title": "static_assert in not initialized template class with valid specialization", "CreationDate": "2017-04-07T20:56:32.357", "Id": "43286980", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-04-07T21:36:55.830", "LastEditorUserId": "5394346", "LastActivityDate": "2017-04-07T22:10:50.767", "Score": "1", "OwnerUserId": "5394346", "Tags": "<c++><templates><static-assert>", "AnswerCount": "2"}, "43287800": {"Id": "43287800", "PostTypeId": "2", "Body": "<p>clang++ is right to reject your code, but g++ is not wrong to fail to catch the error; this is a \"no diagnostic required\" situation.</p>\n<p>The Standard strictly defines expressions within a template as \"type-dependent\" and/or \"value-dependent\".  Given <code>template&lt;int i&gt;</code>, <code>i</code> is value-dependent but not type-dependent.</p>\n<blockquote>\n<p id=\"so_43286980_43287800_0\">[14.6.2.2/4]: Expressions of the following forms are never type-dependent (because the type of the expression cannot be dependent):</p>\n<ul>\n<li>...</li>\n<li><code>sizeof</code> <em>unary-expression</em></li>\n<li>...</li>\n</ul>\n<p id=\"so_43286980_43287800_1\">[14.6.2.3/2]: Expressions of the following form are value-dependent if the <em>unary-expression</em> or <em>expression</em> is type-dependent or the <em>type-id</em> is dependent:</p>\n<ul>\n<li><code>sizeof</code> <em>unary-expression</em></li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>So <code>sizeof(i)</code> is not dependent.</p>\n<p>Finally, 14.6/8 says:</p>\n<blockquote>\n<p id=\"so_43286980_43287800_2\">If a hypothetical instantiation of a template immediately following its definition would be ill-formed due to a construct that does not depend on a template parameter, the program is ill-formed; no diagnostic is required.</p>\n</blockquote>\n", "LastActivityDate": "2017-04-07T22:10:50.767", "CommentCount": "0", "CreationDate": "2017-04-07T22:10:50.767", "ParentId": "43286980", "Score": "1", "OwnerUserId": "459640"}});