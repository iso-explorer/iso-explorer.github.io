post_cb({"bq_ids": {"n4140": {"so_18225064_18225160_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 7170}}, "n3337": {"so_18225064_18225160_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 6914}}, "n4659": {"so_18225064_18225160_1": {"length": 17, "quality": 0.7727272727272727, "section_id": 8678}}}, "18225447": {"Id": "18225447", "PostTypeId": "2", "Body": "<p>Yes, it get destroy every time the function execution ends (in your case its get created/destroyed for 30 times per second).</p>\n<p>if you want it to keep value after execution, use member variable of the class where this function belong to instead or use static variable or global variable.</p>\n<pre><code>void updateLoop(double delta)\n{\n    static double TestVar = 1; \n}\n</code></pre>\n<p>But in case you are trying to allocate memory dynamically inside this function, make sure you always perform <strong>delete</strong> operation on pointer you allocated memory to or you will get memory leaks. Because the pointer you allocated will be destroyed once program is out of scope, but memory allocated where this pointer pointed to will not destroyed. So you will loss the reference to it and hence memory leaks.</p>\n<pre><code>void updateLoop(double delta)\n{\n    int* TestVar = new int;\n    // your codes\n    delete TestVar; \n}\n</code></pre>\n", "LastEditorUserId": "1201289", "LastActivityDate": "2013-08-14T07:23:48.880", "Score": "1", "CreationDate": "2013-08-14T07:16:14.953", "ParentId": "18225064", "CommentCount": "0", "OwnerUserId": "1201289", "LastEditDate": "2013-08-14T07:23:48.880"}, "18225160": {"Id": "18225160", "PostTypeId": "2", "Body": "<p>Here <code>TestVar</code> is a local variable.</p>\n<p>It means that it is limited in scope to all the code below the declaration until the end of the enclosing block. That is from its declaration to the end of the block (until the <code>}</code>).</p>\n<p>Its <strong>lifetime</strong> is <em>As long as execution is inside the block</em>.</p>\n<p>From the standard :</p>\n<blockquote>\n<p id=\"so_18225064_18225160_0\"><strong>3.7.3 Automatic storage duration [basic.stc.auto]</strong></p>\n<p id=\"so_18225064_18225160_1\"><strong>Block-scope variables</strong> explicitly declared register or not explicitly declared static or extern have automatic storage duration. The storage for these entities lasts until the block in which they are created exits.</p>\n</blockquote>\n<p>It means : <strong>Automatic/Local non-static variables Lifetime is limited to their Scope.</strong></p>\n", "LastEditorUserId": "1394283", "LastActivityDate": "2013-08-14T07:21:29.803", "Score": "1", "CreationDate": "2013-08-14T06:59:02.410", "ParentId": "18225064", "CommentCount": "2", "OwnerUserId": "1394283", "LastEditDate": "2013-08-14T07:21:29.803"}, "18225064": {"ViewCount": "208", "Body": "<p>I have a game update loop that's executed about 30 times a second. I was wondering what happens to variable memory once it leaves the method scope, example.</p>\n<pre><code>void updateLoop(double delta)\n{\n    double TestVar = 1; // &lt;&lt; Does this variable get \"deleted from memory\"\n                        // once it this method completes? What exactly happens?\n}\n</code></pre>\n", "AcceptedAnswerId": "18225447", "Title": "Variable Memory Method Scope within game loop", "CreationDate": "2013-08-14T06:53:59.730", "Id": "18225064", "CommentCount": "2", "LastEditDate": "2013-08-14T06:55:29.763", "PostTypeId": "1", "LastEditorUserId": "311966", "LastActivityDate": "2013-08-14T07:23:48.880", "Score": "0", "OwnerUserId": "1134192", "Tags": "<c++>", "AnswerCount": "2"}});