post_cb({"5667833": {"ParentId": "5666899", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The paper N2238 is from 2007 and has no relevance. I'm not sure what Stroustrup is specifically referring to in the interview, but that isn't breaking news.</p>\n<p>N3242 \u00a722.5 still requires <code>codecvt_utf8</code> and <code>codecvt_utf16</code>, which are all you need for Unicode file I/O. <code>imbue</code> the proper facet onto <code>wcout</code> and should be good to go\u2026 assuming you have a compliant library. However, in practice, GCC and MSVC already supply UTF-8, and I would expect that every serious C++ platform keeps parity between <code>mbstowcs</code> and <code>codecvt</code>.</p>\n<p>There may be confusion because N3242 \u00a722.5/5 says</p>\n<blockquote>\n<p id=\"so_5666899_5667833_0\">\u2014 The multibyte sequences may be written only as a binary file. Attempting to write to a text file\n  produces undefined behavior.</p>\n</blockquote>\n<p>This is because text mode I/O converts line endings, so a <code>0x10</code> byte as half of a 16-bit UTF-16 word could be converted to <code>0x13, 0x10</code>, corrupting the stream. This has nothing to do with poor support\u2026 just be sure to open up the file in binary mode, as you must with any library providing such functionality.</p>\n", "OwnerUserId": "153285", "LastEditorUserId": "153285", "LastEditDate": "2011-04-14T18:49:09.417", "Id": "5667833", "Score": "3", "CreationDate": "2011-04-14T18:28:14.087", "LastActivityDate": "2011-04-14T18:49:09.417"}, "5666944": {"ParentId": "5666899", "CommentCount": "3", "Body": "<p>The first paragraph you cited tells you: it's not that Unicode streams in particular are more difficult than other streams, it's that iostreams in general are extremely complicated.  Thus, <strong>implementing Unicode iostreams is difficult not because they are Unicode, but because they are iostreams</strong>.</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "5666944", "Score": "5", "CreationDate": "2011-04-14T17:09:34.093", "LastActivityDate": "2011-04-14T17:09:34.093"}, "bq_ids": {"n4140": {"so_5666899_5667833_0": {"section_id": 6659, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_5666899_5667833_0": {"section_id": 6414, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_5666899_5667833_0": {"section_id": 6437, "quality": 0.9285714285714286, "length": 13}}}, "5666899": {"CommentCount": "3", "ViewCount": "820", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-04-14T17:05:57.380", "LastActivityDate": "2011-04-14T18:49:09.417", "Title": "No Unicode Streams in C++0x ? Why?", "FavoriteCount": "1", "LastEditDate": "2017-05-23T12:18:59.443", "Id": "5666899", "Score": "6", "Body": "<p>Today I have discovered, that C++ standard committee has dismissed Unicode streams support in C++0x  in second revision. Fore more information see <a href=\"https://stackoverflow.com/questions/4704585/unicode-support-in-c0x\">this</a> question.</p>\n<p>According <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2238.html\" rel=\"nofollow noreferrer\">this</a> document:</p>\n<blockquote>\n<p id=\"so_5666899_5666899_0\">The rationale for leaving out stream specializations of the two new types was that streams of non-char types have not attracted wide usage, so it is not clear that there is a real need for doubling the number of specializations of this very complicated machinery.</p>\n</blockquote>\n<p>From <a href=\"http://www.codeguru.com/cpp/misc/print.php/c18357/An-Interview-with-C-Creator-Bjarne-Stroustrup.htm\" rel=\"nofollow noreferrer\">this</a> interview with Stroustrup:</p>\n<blockquote>\n<p id=\"so_5666899_5666899_1\">Obviously, we ought to have Unicode streams and other much extended Unicode support in the standard library. The committee knew that but didn't have anyone with the skills and time to do the work, so unfortunately, this is one of the many areas where you have to look for \"third party\" support.</p>\n</blockquote>\n<p>I'm not expert in Unicode, and I'm wondering  why implementing Unicode streams is so difficult? What is so problematic with it? </p>\n", "Tags": "<c++><unicode><stream><io><c++11>", "OwnerUserId": "556049", "AnswerCount": "2"}});