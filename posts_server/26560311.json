post_cb({"26560311": {"CommentCount": "13", "ViewCount": "326", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2014-10-25T07:41:59.750", "LastActivityDate": "2015-05-13T12:53:38.167", "LastEditDate": "2015-05-13T12:53:38.167", "AcceptedAnswerId": "26560424", "OwnerDisplayName": "user2953119", "Title": "What's the struct's initial sequence?", "Id": "26560311", "Score": "4", "Body": "<p>I came across the initial sequence concept. Serching through the Standard for <code>initial sequence</code> phrase gives only 3 results and they don't give a definition.</p>\n<p>Section <code>N3797::9.5/1 [class.union]</code>:</p>\n<blockquote>\n<p id=\"so_26560311_26560311_0\">If a standard-layout union contains several standard-layout structs\n  that share a common <em>initial sequence</em> (9.2), and if an object of this\n  standard-layout union type contains one of the standard-layout\n  structs, it is permitted to inspect the common initial sequence of any\n  of standard-layout struct members;</p>\n</blockquote>\n<p>I wish to look at an example which is demostrated that quote.</p>\n", "Tags": "<c++><struct><language-lawyer><unions>", "AnswerCount": "1"}, "26560424": {"ParentId": "26560311", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>I believe it's talking about this kind of thing:</p>\n<pre><code>union U {\n    struct S {\n        int a;\n        int b;\n        int c;\n    }\n    struct T {\n        int x;\n        int y;\n        float f;\n    }\n};\n</code></pre>\n<p>It's saying that it's OK to access either <code>U.S.a</code> or <code>U.T.x</code> and that they will be equivalent. Ditto for <code>U.S.b</code> and <code>U.T.y</code> of course. But accessing <code>U.T.f</code> after setting <code>U.S.c</code> would be undefined behaviour.</p>\n", "OwnerUserId": "253056", "LastEditorUserId": "253056", "LastEditDate": "2014-10-25T09:35:48.663", "Id": "26560424", "Score": "5", "CreationDate": "2014-10-25T08:02:27.463", "LastActivityDate": "2014-10-25T09:35:48.663"}, "bq_ids": {"n4140": {"so_26560311_26560311_0": {"section_id": 5913, "quality": 1.0, "length": 26}}, "n3337": {"so_26560311_26560311_0": {"section_id": 5685, "quality": 1.0, "length": 26}}, "n4659": {"so_26560311_26560311_0": {"section_id": 7404, "quality": 0.9615384615384616, "length": 25}}}});