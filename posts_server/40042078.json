post_cb({"40042078": {"CommentCount": "0", "ViewCount": "68", "ClosedDate": "2016-10-14T11:30:36.243", "CreationDate": "2016-10-14T11:28:58.463", "LastActivityDate": "2016-10-14T11:44:33.727", "PostTypeId": "1", "FavoriteCount": "1", "Title": "What's the difference between void(int) and void(*)(int)?", "Id": "40042078", "Score": "2", "Body": "<p>I know void(*)(int) is a function pointer. But I'm really confused of void(int). First, they're different types</p>\n<pre><code>using A = void(int);\nusing B = void(*)(int);\nis_same&lt;A*, B&gt;::value == true\n</code></pre>\n<p>I can initialize a variable of type B using a function pointer but not A</p>\n<pre><code>void func(int x){\n    cout&lt;&lt;x&lt;&lt;endl;\n}\nB b { func }; //ok\nA a { func }; //error\nA* ap { func }; //ok\n</code></pre>\n<p>But if used as function parameter types, they seem to be exchangable</p>\n<pre><code>void callA(A a, int arg){ a(arg); }\nvoid callB(B b, int arg){ b(arg); }\ncallA(func, 1); //ok\ncallB(func, 1); //ok\n</code></pre>\n<p>So what is void(int) indeed? When should I use void(int) and when should I use void(*)(int)?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2666950", "AnswerCount": "1"}, "40042198": {"ParentId": "40042078", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your <code>A</code> is a function type, whereas your <code>B</code> is a pointer-to-function type.</p>\n<p>You have correctly identified that these are different types, but when you use <code>A</code> as a parameter, it's silently translated into <code>B</code> (for \"convenience\"):</p>\n<blockquote>\n<p id=\"so_40042078_40042198_0\"><code>[C++14: 8.3.5/5]:</code> <em>[..]</em> After determining the type of each parameter, any parameter of type \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d is adjusted to be \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>,\u201d respectively. <em>[..]</em></p>\n</blockquote>\n<p>So, in that context, it arguably doesn't matter which you use.</p>\n<p>Otherwise, you might use <code>A</code> in a template parameter expecting an actual function type, e.g. <code>std::function&lt;void()&gt;</code>; you would use <code>B</code> to declare a bog-standard function pointer. That's a bit like how you might use a <code>std::vector&lt;int&gt;</code>, or a <code>int*</code> instead.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2016-10-14T11:44:33.727", "Id": "40042198", "Score": "3", "CreationDate": "2016-10-14T11:35:13.140", "LastActivityDate": "2016-10-14T11:44:33.727"}, "bq_ids": {"n4140": {"so_40042078_40042198_0": {"section_id": 3241, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_40042078_40042198_0": {"section_id": 3114, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_40042078_40042198_0": {"section_id": 3997, "quality": 0.6666666666666666, "length": 12}}}});