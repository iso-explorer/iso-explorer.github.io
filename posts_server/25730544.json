post_cb({"25731250": {"ParentId": "25730544", "CommentCount": "0", "Body": "<p>For the language lawyers:</p>\n<p>The grammar does allow this. Whether or not this is intentional is unclear to me. A <em>declarator</em> and an <em>abstract-declarator</em> differ in that the latter doesn't allow a name at the top level.</p>\n<p><em>declarator</em>:</p>\n<ul>\n<li><em>ptr-declarator</em></li>\n<li><em>noptr-declarator</em> <em>parameters-and-qualifiers</em> <em>trailing-return-type</em></li>\n</ul>\n<p><em>ptr-declarator</em>:</p>\n<ul>\n<li><em>noptr-declarator</em></li>\n<li><em>ptr-operator</em> <em>ptr-declarator</em></li>\n</ul>\n<p><em>noptr-declarator</em>:</p>\n<ul>\n<li><em>declarator-id</em> <em>attribute-specifier-seq</em> (opt)</li>\n<li><em>noptr-declarator</em> <em>parameters-and-qualifiers</em></li>\n<li><em>noptr-declarator</em> <code>[</code> <em>constant-expression</em> (opt) <code>]</code> <em>attribute-specifier-seq</em> (opt)</li>\n<li><code>(</code> <em>ptr-declarator</em> <code>)</code></li>\n</ul>\n<p>Note that in a <em>declarator</em> you can have a <em>declarator-id</em>, that is, a name. Now consider the syntax of an <em>abstract-declarator</em>:</p>\n<p><em>abstract-declarator</em>:</p>\n<ul>\n<li><em>ptr-abstract-declarator</em></li>\n<li><em>noptr-abstract-declarator</em> (opt) <em>parameters-and-qualifiers</em> <em>trailing-return-type</em></li>\n<li><em>abstract-pack-declarator</em></li>\n</ul>\n<p><em>ptr-abstract-declarator</em>:</p>\n<ul>\n<li><em>noptr-abstract-declarator</em></li>\n<li><em>ptr-operator</em> <em>ptr-abstract-declarator</em> (opt)</li>\n</ul>\n<p><em>noptr-abstract-declarator</em>:</p>\n<ul>\n<li><em>noptr-abstract-declarator</em> (opt) <em>parameters-and-qualifiers</em></li>\n<li><em>noptr-abstract-declarator</em> (opt) <code>[</code> <em>constant-expression</em> (opt) <code>]</code> <em>attribute-specifier-seq</em> (opt)</li>\n<li><code>(</code> <em>ptr-abstract-declarator</em> <code>)</code></li>\n</ul>\n<p>An <em>abstract-declarator</em> can't contain a <em>declarator-id</em> at top level. However, notice that the <em>parameters-and-qualifiers</em> that occurs in the production rules for <em>abstract-declarator</em> and <em>noptr-abstract-declarator</em> is the same as that in <em>declarator</em> and <em>noptr-declarator</em>. There is no special <em>abstract-parameters-and-qualifiers</em> to enforce not having a name within a parameter list that occurs in an <em>abstract-declarator</em>. So the grammar allows names to be specified for function parameters inside <em>abstract-declarators</em> even though the overall function type can't be given a name.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "25731250", "Score": "8", "CreationDate": "2014-09-08T18:58:32.057", "LastActivityDate": "2014-09-08T18:58:32.057"}, "25730902": {"ParentId": "25730544", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, you can provide the parameter name. From paragraph \u00a78.3.5/11 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_25730544_25730902_0\">An identifier can optionally be provided as a parameter name;</p>\n</blockquote>\n<p>The same goes for pointer-to-function and pointer-to-member function type. Personally, I would use the identifier only if it expresses more clearly the intention of your code.</p>\n", "OwnerUserId": "701092", "LastEditorUserId": "701092", "LastEditDate": "2014-09-08T18:49:37.240", "Id": "25730902", "Score": "14", "CreationDate": "2014-09-08T18:37:59.853", "LastActivityDate": "2014-09-08T18:49:37.240"}, "bq_ids": {"n4140": {"so_25730544_25730902_0": {"section_id": 3247, "quality": 1.0, "length": 6}}, "n3337": {"so_25730544_25730902_0": {"section_id": 3120, "quality": 1.0, "length": 6}}, "n4659": {"so_25730544_25730902_0": {"section_id": 4005, "quality": 1.0, "length": 6}}}, "25730544": {"CommentCount": "6", "AcceptedAnswerId": "25730902", "PostTypeId": "1", "LastEditorUserId": "1774667", "CreationDate": "2014-09-08T18:13:17.097", "LastActivityDate": "2014-09-08T18:58:32.057", "LastEditDate": "2014-09-08T18:23:24.163", "ViewCount": "696", "FavoriteCount": "1", "Title": "Can I use named parameters in std::function template signature type argument?", "Id": "25730544", "Score": "14", "Body": "<p>Can I legally use names for template parameters in <code>std::function</code> (or another similar construct)? E.g. given the code</p>\n<pre><code>std::function&lt;int(int, int)&gt; some_func;\n</code></pre>\n<p>Can I rewrite it in following way?</p>\n<pre><code>std::function&lt;int(int begin, int end)&gt; some_func;\n</code></pre>\n<p>It would be very nice, if it is standard compliant, because the type alone carries little information about the purpose of the parameter.</p>\n<p>So far I've tested it in Visual Studio 2013 and it works. Edit: It works with gcc 4.8.1 too.</p>\n", "Tags": "<c++><c++11><std-function>", "OwnerUserId": "3026910", "AnswerCount": "2"}});