post_cb({"8521430": {"ParentId": "314983", "CommentCount": "0", "Body": "<p>I use</p>\n<pre><code>&lt;FILENAME_IN_ALL_CAPS&gt;_&lt;YYYYMMDD&gt;\n</code></pre>\n<p>or</p>\n<pre><code>&lt;FILENAME_IN_ALL_CAPS&gt;_INCLUDED_&lt;YYYYMMDD&gt;\n</code></pre>\n<p>Keeping it synchronous with folder hierarchies is too annoying (friend of refactoring), GUIDs are too annoying, the date suffix is <a href=\"http://en.wikipedia.org/wiki/Principle_of_good_enough\" rel=\"nofollow\">good enough</a>. If I would have to equally named files on the same day, I would</p>\n<pre><code>&lt;FILENAME_IN_ALL_CAPS&gt;_&lt;YYYYMMDD&gt;a\n&lt;FILENAME_IN_ALL_CAPS&gt;_&lt;YYYYMMDD&gt;b\n&lt;FILENAME_IN_ALL_CAPS&gt;_&lt;YYYYMMDD&gt;...\n</code></pre>\n", "OwnerUserId": "76722", "PostTypeId": "2", "Id": "8521430", "Score": "0", "CreationDate": "2011-12-15T14:13:26.033", "LastActivityDate": "2011-12-15T14:13:26.033"}, "314999": {"CommentCount": "0", "CreationDate": "2008-11-24T18:36:33.340", "LastEditorUserId": "23283", "LastActivityDate": "2008-11-24T18:39:29.857", "ParentId": "314983", "LastEditDate": "2008-11-24T18:39:29.857", "LastEditorDisplayName": "JaredPar", "PostTypeId": "2", "Id": "314999", "Score": "1", "Body": "<p>I always use use</p>\n<pre><code>#ifndef FOOBAR_CPP\n</code></pre>\n", "OwnerUserId": "68043"}, "315008": {"ParentId": "314983", "CommentCount": "11", "CreationDate": "2008-11-24T18:39:04.303", "OwnerUserId": "23283", "Id": "315008", "PostTypeId": "2", "OwnerDisplayName": "JaredPar", "Score": "3", "Body": "<p>If you are using Visual Studio or a Microsoft compiler use the pragma way</p>\n<pre><code>#pragma once\n</code></pre>\n", "LastActivityDate": "2008-11-24T18:39:04.303"}, "314996": {"ParentId": "314983", "CommentCount": "1", "CreationDate": "2008-11-24T18:34:53.890", "OwnerUserId": "12725", "Id": "314996", "PostTypeId": "2", "OwnerDisplayName": "James Curran", "Score": "2", "Body": "<p>I use</p>\n<pre><code> #if !defined(FOO_HPP_INCLUDED)\n</code></pre>\n<p>I prefer the modern <code>defined</code> syntax because it allows || &amp;&amp; operators, even if they aren't used here.</p>\n<p>Also</p>\n<pre><code> #ifndef __FOO_HPP__\n</code></pre>\n<p>is technically illegal, as leading underscores are reserved.</p>\n", "LastActivityDate": "2008-11-24T18:34:53.890"}, "314983": {"CommentCount": "0", "AcceptedAnswerId": "315022", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2008-11-24T18:30:38.160", "LastActivityDate": "2015-11-27T11:18:27.010", "AnswerCount": "13", "LastEditDate": "2015-11-27T11:18:27.010", "ViewCount": "8101", "FavoriteCount": "6", "Title": "#include header guard format?", "Id": "314983", "Score": "18", "Body": "<p>I know it makes little difference to a project but, assuming you use #defined header guards for your C++ code, what format do you use?  e.g. assuming a header called <code>foo.hpp</code>:</p>\n<pre><code>#ifndef __FOO_HPP__\n...\n\n#ifndef INCLUDED_FOO_HPP\n...\n\n#ifndef SOME_OTHER_FORMAT\n</code></pre>\n<p>I'm sold on the idea of upper-case #defines but cannot settle on a format for these guards.</p>\n", "Tags": "<c++><header><c-preprocessor>", "OwnerUserId": "9236", "OwnerDisplayName": "Rob"}, "315225": {"ParentId": "314983", "CommentCount": "0", "CreationDate": "2008-11-24T19:50:49.213", "OwnerUserId": "13430", "Id": "315225", "PostTypeId": "2", "OwnerDisplayName": "Evan Teran", "Score": "0", "Body": "<p>I tend to use:</p>\n<pre><code>#ifndef FILE_DATE_H_\n</code></pre>\n<p>(replace _H_ with the appropriate extension like _HPP_, etc). The date stamp is to avoid collisions with other same named headers in other directions/libraries.</p>\n<p>so in the end it looks like this:</p>\n<pre><code>#ifndef SOMEFILE_20082411_H_\n</code></pre>\n", "LastActivityDate": "2008-11-24T19:50:49.213"}, "bq_ids": {"n4140": {"so_314983_315020_0": {"section_id": 6307, "quality": 1.0, "length": 8}}, "n3337": {"so_314983_315020_0": {"section_id": 6064, "quality": 1.0, "length": 8}}, "n4659": {"so_314983_315020_0": {"section_id": 7844, "quality": 0.625, "length": 5}}}, "315022": {"CommentCount": "1", "CreationDate": "2008-11-24T18:41:33.940", "LastEditorUserId": "15168", "LastActivityDate": "2012-04-07T14:29:35.823", "ParentId": "314983", "LastEditDate": "2012-04-07T14:29:35.823", "OwnerDisplayName": "Fionn", "PostTypeId": "2", "Id": "315022", "Score": "19", "Body": "<p>I always included the namespace or relative path in the include guard, because only the header name alone has proven to be dangerous.</p>\n<p>For example, you have some large project with the two files somewhere in your code</p>\n<pre><code>/myproject/module1/misc.h\n/myproject/module2/misc.h\n</code></pre>\n<p>So if you use a consistent naming schema for your include guards you might end up with having <code>_MISC_HPP__</code> defined in both files (very funny to find such errors).</p>\n<p>So I settled with</p>\n<pre><code>MYPROJECT_MODULE1_MISC_H_\nMYPROJECT_MODULE2_MISC_H_\n</code></pre>\n<p>These names are rather long, but compared with the pain of double definitions it is worth it.</p>\n<p>Another option, if you don't need compiler/platform independence you might look for some #pragma once stuff.</p>\n", "OwnerUserId": "21566"}, "316158": {"ParentId": "314983", "CommentCount": "0", "CreationDate": "2008-11-25T02:18:26.997", "OwnerUserId": "13005", "Id": "316158", "PostTypeId": "2", "OwnerDisplayName": "onebyone.livejournal.com", "Score": "1", "Body": "<p>When I'm being paid for my time, and there isn't already a company standard, I use:</p>\n<pre><code>#ifndef path_to_file_h\n#define path_to_file_h\n</code></pre>\n<p>The reason for the lowercase is that it's easier to copy and paste filenames and replace slashes with underscores. The reason for #ifndef is that it lines up nicely with #define, making it easier to see that the symbols are the same. I like the GUID idea, though, so I might try it out.</p>\n<p>When I'm not being paid for my time, and not releasing my code into the wild, I just use <code>#pragma once</code>. Unlike most other portability issues, it's just as easy to add include guards later as now, and it can be done by someone who knows nothing about the code base (e.g. me in a year's time, or some innocent programmer I send my code to), so YAGNI applies.</p>\n", "LastActivityDate": "2008-11-25T02:18:26.997"}, "315208": {"ParentId": "314983", "CommentCount": "0", "CreationDate": "2008-11-24T19:44:49.210", "OwnerUserId": "2974", "Id": "315208", "PostTypeId": "2", "OwnerDisplayName": "Rob Wells", "Score": "1", "Body": "<p>I've also always used something along the lines of:</p>\n<pre><code>#ifndef FOO_HPP\n#define FOO_HPP 1\n\n...\n\n#endif\n</code></pre>\n<p>As most people have mentioned, don't prepend symbols with double underscores as that is reserved by the C++ standard for internal use by the implementation.</p>\n<p>You might like to look at John Lakos's excellent book \"Large Scale C++ Software Design\" (<a href=\"http://www.amazon.co.uk/dp/0201633620/\" rel=\"nofollow noreferrer\">Amazon link</a> - sanitised for the script kiddy link nazis) for some considerations regarding header includes.</p>\n<p>HTH</p>\n<p>cheers,</p>\n<p>Rob</p>\n", "LastActivityDate": "2008-11-24T19:44:49.210"}, "315010": {"ParentId": "314983", "CommentCount": "5", "CreationDate": "2008-11-24T18:39:17.063", "OwnerUserId": "9936", "Id": "315010", "PostTypeId": "2", "OwnerDisplayName": "Martin Cote", "Score": "12", "Body": "<p>To truly avoid name collisions, I use GUIDs:</p>\n<pre><code>#ifndef GUARD_8D419A5B_4AC2_4C34_B16E_2E5199F262ED\n</code></pre>\n", "LastActivityDate": "2008-11-24T18:39:17.063"}, "24479819": {"ParentId": "314983", "CommentCount": "0", "Body": "<p>I'd go with the filepath + the boost <code>_INCLUDED</code> suffix plus the nowadays widely supported <code>#pragma once</code></p>\n<p>In alot editors (for me its sublime) you can also define some macros/snippets for this.</p>\n<p>Here is one that does it for you:</p>\n<pre><code>&lt;snippet&gt;\n    &lt;content&gt;&lt;![CDATA[\n#ifndef ${1:${TM_FILEPATH/(.*\\/(include|src))*([^a-zA-Z0-9_]+)*([a-zA-Z0-9_]+)([.])*([a-zA-Z0-9_]+)*/\\U$4_$6/ig}_INCLUDED}\n#define $1\n#pragma once\n\n\n$0\n\n\n#endif // $1\n]]&gt;&lt;/content&gt;\n    &lt;tabTrigger&gt;incguard&lt;/tabTrigger&gt;\n    &lt;description&gt;include guard&lt;/description&gt;\n&lt;/snippet&gt;\n</code></pre>\n<p>so <code>yourproject/include/yourlib/yourfile.hpp</code></p>\n<p>becomes <code>YOURLIB_YOURFILE_HPP_INCLUDED</code></p>\n<p>An additional external source code style checker tool could easily track consistency of your guards this way.</p>\n", "OwnerUserId": "3087952", "PostTypeId": "2", "Id": "24479819", "Score": "0", "CreationDate": "2014-06-29T20:09:12.770", "LastActivityDate": "2014-06-29T20:09:12.770"}, "314989": {"ParentId": "314983", "CommentCount": "1", "CreationDate": "2008-11-24T18:32:49.463", "OwnerUserId": "17440", "Id": "314989", "PostTypeId": "2", "OwnerDisplayName": "MrZebra", "Score": "14", "Body": "<p>I always use <code>INCLUDED_FOO_HPP</code></p>\n<p>I wouldn't use the double underscore one, because starting things with double underscores is reserved.</p>\n", "LastActivityDate": "2008-11-24T18:32:49.463"}, "315018": {"CommentCount": "0", "CreationDate": "2008-11-24T18:40:34.987", "LastEditorUserId": "12320", "LastActivityDate": "2008-11-24T18:56:31.833", "ParentId": "314983", "PostTypeId": "2", "LastEditorDisplayName": "efotinis", "LastEditDate": "2008-11-24T18:56:31.833", "Id": "315018", "Score": "4", "Body": "<p>I prefer this format:</p>\n<pre><code>#ifndef FOO_HPP\n#define FOO_HPP\n\n/* ... */\n\n#endif // FOO_HPP\n</code></pre>\n<ul>\n<li>A simple <strong>#ifndef</strong> instead of <strong>#if !defined(...)</strong>, because it rarely makes sense to use a complex condition for a header guard.</li>\n<li>The <strong>_HPP</strong> part to mark the identifier as a header guard.</li>\n<li>No leading underscores, because such identifiers (starting with 2 underscores or with 1 underscore and capital letter) are reserved for the implementation.</li>\n<li>The base part is just the file name, <strong>FOO</strong>. However, for library code that is going to be reused, it's advisable to add another part at the beginning. This is usually the containing namespace or the \"module\" name, e.g. <strong><code>MYLIB_FOO_HPP</code></strong>, and it helps to avoid naming conflicts.</li>\n</ul>\n", "OwnerUserId": "12320", "OwnerDisplayName": "efotinis"}, "315020": {"ParentId": "314983", "CommentCount": "1", "CreationDate": "2008-11-24T18:41:05.440", "OwnerUserId": "34509", "Id": "315020", "PostTypeId": "2", "OwnerDisplayName": "litb", "Score": "10", "Body": "<p>Personally, i just use the filename FOO_HPP. Google uses the whole path like SRC_ENGINE_FAST_HPP.</p>\n<blockquote>\n<p id=\"so_314983_315020_0\">Certain sets of names and function\n  signatures are always reserved to the\n  implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (_ _) or begins with an\n  underscore followed by an uppercase\n  letter (2.11) is reserved to the\n  implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the\n  implementation for use as a name in\n  the global namespace.</li>\n</ul>\n</blockquote>\n<p>(<code>17.4.3.1.2/1</code>)</p>\n", "LastActivityDate": "2008-11-24T18:41:05.440"}});