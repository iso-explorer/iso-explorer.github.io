post_cb({"bq_ids": {"n4140": {"so_46649360_46649411_1": {"section_id": 456, "quality": 0.8571428571428571, "length": 36}}, "n3337": {"so_46649360_46649411_1": {"section_id": 447, "quality": 0.8571428571428571, "length": 36}}, "n4659": {"so_46649360_46649411_1": {"section_id": 479, "quality": 0.8809523809523809, "length": 37}}}, "46649411": {"ParentId": "46649360", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2017-10-09T14:56:30.020", "Score": "12", "LastEditorUserId": "1020484", "LastEditDate": "2017-10-09T15:02:05.273", "Id": "46649411", "OwnerUserId": "1020484", "Body": "<p><code>B(A aa)</code> takes an <code>A</code> by value, so when you execute <code>B b(a)</code> the compiler calls the copy constructor <code>A(const A&amp; a)</code> to generate the instance of <code>A</code> named <code>aa</code> in the <code>explicit</code> constructor for <code>B</code>.</p>\n<p>The reason you can remove the copy constructor and have this still work is that the compiler will generate a copy constructor for you in cases where you have not also declared a move constructor.</p>\n<p><em>Note: The compiler generated copy constructor is often not sufficient for complex classes, it performs a simple member wise copy, so for complex elements or dynamically allocated memory you should declare your own.</em></p>\n<blockquote>\n<p id=\"so_46649360_46649411_0\">\u00a7 15.8.1 </p>\n<p id=\"so_46649360_46649411_1\">If the class definition does not explicitly declare a copy constructor, a non-explicit one is declared implicitly.\n  If the class definition declares a move constructor or move assignment operator, the implicitly declared copy\n  constructor is defined as deleted; otherwise, it is defined as defaulted (11.4). The latter case is deprecated if\n  the class has a user-declared copy assignment operator or a user-declared destructor or assignment operator.</p>\n</blockquote>\n", "LastActivityDate": "2017-10-09T15:02:05.273"}, "46649401": {"ParentId": "46649360", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-10-09T14:56:05.057", "Score": "7", "LastEditorUserId": "1030410", "LastEditDate": "2017-10-09T15:06:51.513", "Id": "46649401", "OwnerUserId": "1030410", "Body": "<p><strong>Why the copy happens</strong></p>\n<p>Look at your <code>class B</code> c'tor:</p>\n<pre><code>class B {\npublic:\n    explicit B(A aa) {}\n};\n</code></pre>\n<p>You receive A by <strong>value</strong>, triggering a copy during the call.</p>\n<p>If you would have change it to (notice <code>A &amp; aa</code>):</p>\n<pre><code>class B {\npublic:\n    explicit B(A &amp; aa) {}\n};\n</code></pre>\n<p>There wouldn't be any copy...</p>\n<p><strong>Default copy constructor</strong></p>\n<p>When you remove the c'tor, the compiler generates one for you when it can trivially do so:</p>\n<blockquote>\n<p id=\"so_46649360_46649401_0\">First, you should understand that if you do not declare a copy\n  constructor, the compiler gives you one implicitly. The implicit\n  copy constructor does a member-wise copy of the source object.</p>\n</blockquote>\n<p>The default c'tor is equivalent to:</p>\n<pre><code>MyClass::MyClass( const MyClass&amp; other ) :\n     x( other.x ), c( other.c ), s( other.s ) {}\n</code></pre>\n", "LastActivityDate": "2017-10-09T15:06:51.513"}, "46649360": {"CommentCount": "0", "ViewCount": "142", "CreationDate": "2017-10-09T14:54:16.060", "LastActivityDate": "2017-10-09T15:06:51.513", "Title": "C++ Why was the copy constructor called?", "AcceptedAnswerId": "46649411", "PostTypeId": "1", "Id": "46649360", "Score": "3", "Body": "<pre><code>class A {\npublic:\n    A() {}\n    A(const A&amp; a) { cout &lt;&lt; \"A::A(A&amp;)\" &lt;&lt; endl; }\n};\n\nclass B {\npublic:\n    explicit B(A aa) {}\n};\n\nint main() {\n    A a;\n    B b(a);\n    return 0;\n}\n</code></pre>\n<p>Why does it print \"A::A(A&amp;)\"?</p>\n<p>When was the copy constructor for \"A\" called? And if the code calls the copy constructor, why can I remove the copy constructor without creating a compilation error?</p>\n", "Tags": "<c++><c++11><copy-constructor>", "OwnerUserId": "8746559", "AnswerCount": "2"}});