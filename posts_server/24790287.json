post_cb({"bq_ids": {"n4140": {"so_24790287_24790452_0": {"length": 8, "quality": 1.0, "section_id": 57}}, "n3337": {"so_24790287_24790452_0": {"length": 8, "quality": 1.0, "section_id": 52}}, "n4659": {"so_24790287_24790452_0": {"length": 8, "quality": 1.0, "section_id": 59}}}, "24790452": {"Id": "24790452", "PostTypeId": "2", "Body": "<p>That is a non-type template parameter. A parameter in the parameter list of a template can be either a non-type parameter, a type parameter or a template parameter. In your example it is the first. For more information see <a href=\"http://en.cppreference.com/w/cpp/language/template_parameters\" rel=\"nofollow\">Template parameters and template arguments</a>.</p>\n<p>A non-type template argument is normally used to initialize a class or to specify the sizes of class members. According to the standard (14.1 [temp.param]) a non-type template parameter can have one of the following types:</p>\n<blockquote>\n<p id=\"so_24790287_24790452_0\">A non-type template-parameter shall have one of the following\n  (optionally cv-qualified) types:</p>\n<ul>\n<li>integral or enumeration type,</li>\n<li>pointer to object or pointer to function,</li>\n<li>lvalue reference to object or lvalue reference to function,</li>\n<li>pointer to member,</li>\n<li>std::nullptr_t.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2014-07-16T20:50:39.403", "CommentCount": "0", "CreationDate": "2014-07-16T20:50:39.403", "ParentId": "24790287", "Score": "1", "OwnerUserId": "648078"}, "24790342": {"Id": "24790342", "PostTypeId": "2", "Body": "<p>Template parameters may be of any of the three kinds of C++ entities: values, types, or templates:</p>\n<pre><code>template &lt;int N&gt; struct Foo;                        // N is a value\n\ntemplate &lt;typename T&gt; struct Bar;                   // T is a type\n\ntemplate &lt;template &lt;typename&gt; class X&gt; struct Zip;  // X is a template\n</code></pre>\n<p>Example usage:</p>\n<pre><code>Foo&lt;10&gt; a;\n\nBar&lt;int&gt; b;\n\nZip&lt;Bar&gt; c;\n</code></pre>\n<p>Note that this corresponds to the three ways of disamiguating dependent names:</p>\n<pre><code>X::a = 10;              // X::a is a value\ntypename X::B n = 10;   // X::B is a type\nX::template C&lt;int&gt; m;   // X::C is a template\n</code></pre>\n<hr>\n<p>An interesting combination arises when you want to \"typify\" a value. This can be done like so:</p>\n<pre><code>template &lt;typename T, T Val&gt; struct Typificate;\n</code></pre>\n<p>Now you can say e.g. <code>Typificate&lt;int, 10&gt;</code> to get a unique type that represents the integer 10. This can occasionally be very useful, e.g. when <code>T</code> is a member function pointer (e.g. in <a href=\"http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates\">this delegate implementation</a>); or it can be used to create value-unique overloads for tag dispatch, etc.</p>\n</hr>", "LastEditorUserId": "596781", "LastActivityDate": "2014-07-16T20:51:05.077", "Score": "13", "CreationDate": "2014-07-16T20:44:04.957", "ParentId": "24790287", "CommentCount": "6", "OwnerUserId": "596781", "LastEditDate": "2014-07-16T20:51:05.077"}, "24790380": {"Id": "24790380", "PostTypeId": "2", "Body": "<p>It will provide a <code>int</code> constant value that is evaluated at compile time</p>\n<pre><code>template &lt;int N&gt; struct matrix {\n   static const int MatrixSize = N;\n   map &lt;int, row&gt; my_matrix;\n};\n\nmatrix&lt;10&gt;::MatrixSize; // Yields 10\n</code></pre>\n", "LastEditorUserId": "1413395", "LastActivityDate": "2014-07-16T20:59:20.817", "Score": "0", "CreationDate": "2014-07-16T20:46:22.233", "ParentId": "24790287", "CommentCount": "2", "OwnerUserId": "1413395", "LastEditDate": "2014-07-16T20:59:20.817"}, "24790287": {"ViewCount": "1254", "Body": "<p>What does it mean to define a template with <code>template &lt;int N&gt;</code>, I read this from an example in a book:</p>\n<pre><code>typedef map&lt;int, double&gt; row;\ntemplate &lt;int N&gt; struct matrix;\n{\n   map &lt;int, row&gt; my_matrix;\n}\n</code></pre>\n<p>I have usually seen templates which are followed by class and then type, i.e. <code>template &lt;class int&gt;</code></p>\n", "AcceptedAnswerId": "24790342", "Title": "templates <int T> C++", "CreationDate": "2014-07-16T20:40:53.070", "Id": "24790287", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2014-07-16T20:54:21.240", "LastActivityDate": "2014-07-16T20:59:20.817", "Score": "1", "OwnerUserId": "2407162", "Tags": "<c++><templates>", "AnswerCount": "3"}});