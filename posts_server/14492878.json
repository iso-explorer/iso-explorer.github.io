post_cb({"14492878": {"CommentCount": "7", "ViewCount": "168", "CreationDate": "2013-01-24T02:22:13.793", "LastActivityDate": "2013-01-24T02:52:13.920", "Title": "C++ class function return type definition, return a class", "AcceptedAnswerId": "14493136", "PostTypeId": "1", "Id": "14492878", "Score": "0", "Body": "<p>I have a vector class look like this:</p>\n<pre><code>class Vector3\n{\n\n public:\n   Vector3(){m_x = m_y = m_z = 0.0f;}\n   Vector3(const float &amp; i_x, const float &amp; i_y, const float &amp; i_z):\n     m_x(i_x), \n     m_y(i_y),\n     m_z(i_z)\n     {}\n\n   Vector3 operator+(const Vector3 &amp; i_other);\nprivate:\n   float m_x;\n   float m_y;\n   float m_z;\n};\n\nVector3::Vector3 Vector3::operator+(const Vector3 &amp; i_other)\n{\n   float tx = m_x + i_other.m_x;\n   float ty = m_y + i_other.m_y;\n   float tz = m_z + i_other.m_z;\n   return Vector3(tx, ty, tz);\n}\n</code></pre>\n<p>Obviously, the <code>Vector3::operator+</code> definition synax is wrong because the return type is <code>Vector3::Vector3</code>, not <code>Vector3</code>. <code>Vector3::Vector3</code> means there is a namespace <code>Vector3</code>, and inside the name space there is a class <code>Vector3</code>. But I only have a class <code>Vector3</code>, no namespace here.</p>\n<p>My question is, in Ubuntu 12.04, the syntax above can not be compiled (Ubuntu's g++ compiler is [gcc version 4.6.3]). However, in Mac, g++ can compile the code(Mac's g++ compiler is [gcc version 4.2.1]). Also, I test this syntax in a Red Hat linux machine, it also works (g++ version is [gcc version 4.4.6])</p>\n<p>So, is it different version of gcc have different compile principle? Or, my g++ in Ubuntu broke?</p>\n", "Tags": "<c++><syntax><g++>", "OwnerUserId": "2005959", "AnswerCount": "1"}, "14493136": {"ParentId": "14492878", "CommentCount": "0", "Body": "<p>The older compiler is incorrect. Little surprise there.</p>\n<p>It is probably parsing <code>Vector3::Vector3</code> as an injected-type-name. Inside the scope of <code>class Vector3 { }</code>, the identifier <code>Vector3</code> refers to the class, not the constructor (except when you're declaring the constructor, of course). And at first glance, you might think it means the same thing in a return type, because \u00a73.4/3 (I'm using the C++11 standard here) says</p>\n<blockquote>\n<p id=\"so_14492878_14493136_0\">The injected-class-name of a class (Clause 9) is also considered to be a member of that class for the purposes of name hiding and lookup.</p>\n</blockquote>\n<p>Digging deeper, in \u00a73.4.3.1/2, </p>\n<blockquote>\n<p id=\"so_14492878_14493136_1\">In a lookup in which the constructor is an acceptable lookup result and the nested-name-specifier nominates\n  a class C:</p>\n<p id=\"so_14492878_14493136_2\">\u2014 if the name specified after the nested-name-specifier, when looked up in C, is the injected-class-name\n  of C (Clause 9)</p>\n<p id=\"so_14492878_14493136_3\">the name is instead considered to name the constructor of class C.</p>\n</blockquote>\n<p>The context of starting a declaration with an injected-class-name happens to be the same as in defining a constructor outside <code>class {}</code> scope, a la</p>\n<pre><code>class Vector3 { \u2026 };\n\nVector3::Vector3(){m_x = m_y = m_z = 0.0f;}\n</code></pre>\n<p>The older GCC noticed that the declaration wasn't a constructor, then took a fallback path that did work. However that fallback was illegal because C++ specifies that in a context where the constructor could be the result of the lookup, it is the only valid lookup result.</p>\n<p>In all probability, some user took the time to file a bug, and a GCC developer took the time to diagnose this, fix it, and write a testcase. Multiply across the number of trivialities in a complex language like C++, and you start to appreciate the effort put into your compiler.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "14493136", "Score": "2", "CreationDate": "2013-01-24T02:52:13.920", "LastActivityDate": "2013-01-24T02:52:13.920"}, "bq_ids": {"n4140": {"so_14492878_14493136_0": {"section_id": 7085, "quality": 0.9090909090909091, "length": 10}, "so_14492878_14493136_1": {"section_id": 7114, "quality": 0.625, "length": 5}, "so_14492878_14493136_2": {"section_id": 7114, "quality": 1.0, "length": 8}, "so_14492878_14493136_3": {"section_id": 7114, "quality": 1.0, "length": 5}}, "n3337": {"so_14492878_14493136_0": {"section_id": 6829, "quality": 0.9090909090909091, "length": 10}, "so_14492878_14493136_1": {"section_id": 6858, "quality": 1.0, "length": 8}, "so_14492878_14493136_2": {"section_id": 6858, "quality": 1.0, "length": 8}, "so_14492878_14493136_3": {"section_id": 6858, "quality": 1.0, "length": 5}}, "n4659": {"so_14492878_14493136_0": {"section_id": 8586, "quality": 0.9090909090909091, "length": 10}, "so_14492878_14493136_1": {"section_id": 8615, "quality": 0.625, "length": 5}, "so_14492878_14493136_2": {"section_id": 8615, "quality": 1.0, "length": 8}, "so_14492878_14493136_3": {"section_id": 8615, "quality": 1.0, "length": 5}}}});