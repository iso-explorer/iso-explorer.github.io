post_cb({"2464004": {"ParentId": "2462624", "CommentCount": "0", "Body": "<p>chars are normally signed by default.\nTry this.</p>\n<pre><code>cout &lt;&lt; (unsigned char) mystring[a] &lt;&lt; endl;\n</code></pre>\n", "OwnerUserId": "7734", "PostTypeId": "2", "Id": "2464004", "Score": "0", "CreationDate": "2010-03-17T16:27:02.477", "LastActivityDate": "2010-03-17T16:27:02.477"}, "2462671": {"ParentId": "2462624", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Look at <code>std::numeric_limits&lt;char&gt;::min()</code> and <code>max()</code>. Or <code>CHAR_MIN</code> and <code>CHAR_MAX</code> if you don't like typing, or if you need an integer constant expression.</p>\n<p>If <code>CHAR_MAX == UCHAR_MAX</code> and <code>CHAR_MIN == 0</code> then chars are unsigned (as you expected). If <code>CHAR_MAX != UCHAR_MAX</code> and <code>CHAR_MIN &lt; 0</code> they are signed (as you're seeing).</p>\n<p>In the standard 3.9.1/1, ensures that there are no other possibilities: \"... a plain char can take on either the same values as a signed char or an unsigned char; which one is implementation-defined.\"</p>\n<p>This tells you whether <code>char</code> is signed or unsigned, and that's what's confusing you. You certainly can't call anything to modify it: from the POV of a program it's baked into the compiler even if the compiler has ways of changing it (GCC certainly does: <code>-fsigned-char</code> and <code>-funsigned-char</code>).</p>\n<p>The usual way to deal with this is if you're going to cast a <code>char</code> to <code>int</code>, cast it through <code>unsigned char</code> first. So in your example, <code>(int)(unsigned char)mystring[a]</code>. This ensures you get a non-negative value.</p>\n<p>It doesn't actually tell you what charset your implementation uses for <code>char</code>, but I don't think you need to know that. On Microsoft compilers, the answer is essentially that commonly-used character encoding \"ISO-8859-mutter-mutter\". This means that chars with 7-bit ASCII values are represented by that value, while values outside that range are ambiguous, and will be interpreted by a console or other recipient according to how that recipient is configured. ISO Latin 1 unless told otherwise.</p>\n<p>Properly speaking, the way characters are interpreted is locale-specific, and the locale can be modified and interrogated using a whole bunch of stuff towards the end of the C++ standard that personally I've never gone through and can't advise on ;-)</p>\n<p>Note that if there's a mismatch between the charset in effect, and the charset your console uses, then you could be in for trouble. But I think that's separate from your issue: whether chars can be negative or not is nothing to do with charsets, just whether char is signed.</p>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2010-03-17T14:11:49.767", "Id": "2462671", "Score": "1", "CreationDate": "2010-03-17T13:46:40.827", "LastActivityDate": "2010-03-17T14:11:49.767"}, "2462624": {"CommentCount": "4", "ViewCount": "1021", "CreationDate": "2010-03-17T13:40:16.967", "LastActivityDate": "2010-03-17T16:27:02.477", "Title": "How can I find out what the current charset is in C++?", "AcceptedAnswerId": "2462665", "PostTypeId": "1", "Id": "2462624", "Score": "4", "Body": "<p>How can I find out what the current charset is in C++?</p>\n<p>In a console application (WinXP) I am getting negative values for some characters (like \u00e4\u00f6\u00fc\u00e9) with</p>\n<pre><code>(int)mystring[a]\n</code></pre>\n<p>and this surprises me.  I was expecting the values to be between 127 and 256.</p>\n<p>So is there something like GetCharset() or SetCharset() in c++?</p>\n", "Tags": "<c++><character-encoding>", "OwnerUserId": "272165", "AnswerCount": "4"}, "2462788": {"ParentId": "2462624", "CommentCount": "3", "Body": "<p>The only gurantee that the standard provides are for members of the basic character set:</p>\n<blockquote>\n<p id=\"so_2462624_2462788_0\"><strong>2.2 Character sets</strong></p>\n<p id=\"so_2462624_2462788_1\"><strong>3</strong> The basic execution character set\n  and the basic execution wide-character\n  set shall each contain all the members\n  of the basic source character set,\n  plus control characters representing\n  alert, backspace, and carriage return,\n  plus a null character (respectively,\n  null wide character), whose\n  representation has all zero bits. For\n  each basic execution character set,\n  the values of the members shall be\n  non-negative and distinct from one\n  another. In both the source and\n  execution basic character sets, the\n  value of each character after 0 in the\n  above list of decimal digits shall be\n  one greater than the value of the\n  previous. The execution character set\n  and the execution wide-character set\n  are supersets of the basic execution\n  character set and the basic execution\n  wide-character set, respectively. The\n  values of the members of the execution\n  character sets are\n  implementation-defined, and any\n  additional members are locale-specific</p>\n</blockquote>\n<p>Further, the type <code>char</code> is supposed to hold:</p>\n<blockquote>\n<p id=\"so_2462624_2462788_2\"><strong>3.9.1 Fundamental types</strong></p>\n<p id=\"so_2462624_2462788_3\"><strong>1</strong> Objects declared as characters (char) shall be large enough to store any member of the \n  implementation\u2019s basic\n  character set.</p>\n</blockquote>\n<p>So, no gurantees whethere you will get the correct value for the characters you have mentioned. However, try to use an <code>unsigned int</code> to hold this value (for all practical purposes, it never makes sense to use a signed type to hold <code>char</code> values ever, if you are going to print them/pass around).</p>\n", "OwnerUserId": "66692", "PostTypeId": "2", "Id": "2462788", "Score": "0", "CreationDate": "2010-03-17T14:01:18.890", "LastActivityDate": "2010-03-17T14:01:18.890"}, "bq_ids": {"n4140": {"so_2462624_2462788_3": {"section_id": 7210, "quality": 1.0, "length": 12}, "so_2462624_2462788_1": {"section_id": 5316, "quality": 0.8842105263157894, "length": 84}}, "n3337": {"so_2462624_2462788_3": {"section_id": 6954, "quality": 1.0, "length": 12}, "so_2462624_2462788_1": {"section_id": 5113, "quality": 0.8842105263157894, "length": 84}}, "n4659": {"so_2462624_2462788_3": {"section_id": 8719, "quality": 1.0, "length": 12}, "so_2462624_2462788_1": {"section_id": 6740, "quality": 0.8, "length": 76}}}, "2462665": {"ParentId": "2462624", "CommentCount": "1", "Body": "<p>It depends on how you look at the value you have at hand. <code>char</code> can be signed(e.g. on Windows), or unsigned like on some other systems. So, what you should do is to print the value as unsigned to get what you are asking for.</p>\n<p>C++ until now is char-set agnostic. For Windows console specifically, you can use: <a href=\"http://msdn.microsoft.com/en-us/library/ms683169%28VS.85%29.aspx\" rel=\"nofollow noreferrer\"><code>GetConsoleOutputCP</code></a>.</p>\n", "OwnerUserId": "127893", "PostTypeId": "2", "Id": "2462665", "Score": "5", "CreationDate": "2010-03-17T13:45:21.107", "LastActivityDate": "2010-03-17T13:45:21.107"}});