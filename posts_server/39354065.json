post_cb({"39358534": {"ParentId": "39354065", "LastEditDate": "2016-09-07T10:54:42.510", "CommentCount": "0", "CreationDate": "2016-09-06T22:04:49.817", "Score": "10", "LastEditorUserId": "4987285", "PostTypeId": "2", "Id": "39358534", "OwnerUserId": "4987285", "Body": "<p>Confirmed the bug. Already fixed.<br>\n<a href=\"https://isocpp.org/forums/iso-c-standard-discussion?place=topic%2Fstd-discussion%2Fg6Rpo1NSHOw%2Fdiscussion\">Here</a> is the discussion (pretty short to be honest).</br></p>\n<p>So, the answer is - <em>no, <code>void{}</code> is not legal</em>.<br>\nIt was a wording bug of the working draft.</br></p>\n", "LastActivityDate": "2016-09-07T10:54:42.510"}, "39354065": {"CommentCount": "11", "ViewCount": "583", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-09-06T16:46:31.333", "LastActivityDate": "2016-09-07T14:44:39.977", "LastEditDate": "2017-05-23T10:30:59.047", "AcceptedAnswerId": "39358534", "FavoriteCount": "4", "Title": "Is void{} legal or not?", "Id": "39354065", "Score": "28", "Body": "<p>This is a follow-up up of <a href=\"https://stackoverflow.com/questions/39300653/differences-between-decltypevoid-and-decltypevoid\">this</a> question.<br>\nIn the comments and in the answer it is said more than once that <code>void{}</code> is <em>neither a valid type-id nor a valid expression</em>.</br></p>\n<p>That was fine, it made sense and that was all.</p>\n<p>Then I came through <a href=\"http://eel.is/c++draft/dcl.spec.auto#dcl.type.auto.deduct-2\" rel=\"nofollow noreferrer\">[7.1.7.4.1/2]</a> (<em>placeholder type deduction</em>) of the working draft.<br>\nThere it is said that:</br></p>\n<blockquote>\n<p id=\"so_39354065_39354065_0\">[...]<br>\n  - for a non-discarded\u00a0<code>return</code>\u00a0statement that occurs in a function declared with a return type that contains a placeholder type,\u00a0<code>T</code>\u00a0is the declared return type and\u00a0<code>e</code>\u00a0is the operand of the\u00a0<code>return</code> statement. If the\u00a0<code>return</code>\u00a0statement has no operand, then\u00a0<code>e</code>\u00a0is\u00a0<code>void{}</code>;<br>\n  [...]</br></br></p>\n</blockquote>\n<p>So, is <code>void{}</code> (conceptually) legal or not?<br>\nIf it's acceptable as mentioned in the working draft (even though only as an <em>- as if it's a -</em> statement), it must be legal indeed. This means that <code>decltype(void{})</code> should be valid as well, as an example.<br>\nOtherwise, should the working draft use <code>void()</code> instead of <code>void{}</code>?</br></br></p>\n<hr>\n<p>Well, to be honest, I'm quite sure I'm not skilled enough to point out an error in the working draft, so the <em>real</em> question is: what 's wrong in my reasoning?<br>\nWhat's exactly the <code>void{}</code> mentioned in the bullet above and why it's a legal expression in this case?</br></p>\n</hr>", "Tags": "<c++><language-lawyer><void><c++1z><return-type-deduction>", "OwnerUserId": "4987285", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_39354065_39355695_0": {"section_id": 5451, "quality": 1.0, "length": 25}, "so_39354065_39354065_0": {"section_id": 5451, "quality": 0.6818181818181818, "length": 15}, "so_39354065_39355695_1": {"section_id": 5451, "quality": 0.7692307692307693, "length": 20}}, "n4659": {"so_39354065_39354065_0": {"section_id": 6887, "quality": 1.0, "length": 22}, "so_39354065_39355695_0": {"section_id": 6887, "quality": 0.8, "length": 20}, "so_39354065_39355695_1": {"section_id": 6887, "quality": 0.8846153846153846, "length": 23}}}, "39355695": {"ParentId": "39354065", "LastEditDate": "2016-09-07T14:44:39.977", "CommentCount": "7", "CreationDate": "2016-09-06T18:35:19.410", "Score": "11", "LastEditorUserId": "27678", "PostTypeId": "2", "Id": "39355695", "OwnerUserId": "27678", "Body": "<p>To me it sounds like someone messed up merging the previous standard with the new one.</p>\n<p>Previously the standard said this: (C++14 N4140, 7.1.6.4.7 [dcl.spec.auto]):</p>\n<blockquote>\n<p id=\"so_39354065_39355695_0\">When a [...] <code>return</code> statement occurs in a function\n  declared with a return type that contains a placeholder type, the deduced return type or variable type\n  is determined from the type of its initializer. In the case of a <code>return</code> with no operand, the initializer is\n  considered to be <code>void()</code>.</p>\n</blockquote>\n<p>The newer standard allows for <code>if constexpr</code> statements, so the language needed to change to reflect that.  <code>if constexpr</code> leads to the concept of a potentially <em>discarded</em> <code>return</code> statement (if the <code>return</code> is in the not-taken branch of a constexpr if, then it's discarded and the return type is inferred from other return statements, if any).</p>\n<p>Probably the new wording should be something like:</p>\n<blockquote>\n<p id=\"so_39354065_39355695_1\">for a non-discarded return statement that occurs in a function\n  declared with a return type that contains a placeholder type, <code>T</code> is the\n  declared return type and <code>e</code> is the operand of the <code>return</code> statement. If\n  the return statement has no operand, then <code>T</code> is <code>auto</code> and the deduced return type is <code>void</code></p>\n</blockquote>\n", "LastActivityDate": "2016-09-07T14:44:39.977"}});