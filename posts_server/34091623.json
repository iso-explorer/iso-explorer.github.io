post_cb({"34091623": {"CommentCount": "14", "ViewCount": "556", "PostTypeId": "1", "LastEditorUserId": "5181494", "CreationDate": "2015-12-04T15:21:45.570", "LastActivityDate": "2015-12-19T14:42:49.203", "Title": "Why does the rule defining the term for a constant expression have to be so cluttered?", "FavoriteCount": "1", "LastEditDate": "2015-12-11T14:40:17.630", "Id": "34091623", "Score": "14", "Body": "<p>I do not understand why a temporary object, which is referred to by a prvalue core constant expression, must not have any pointer or a reference, which points or refers to an object with storage duration other than static, in order for that prvalue core constant expression to be a constant expression; see <strong>N4296 [expr.const] 5.20\\5</strong>.  </p>\n<p>I think it is possible for implementations to rewrite that rule like this:</p>\n<p><strong>[expr.const] 5.20\\5 (modified)</strong></p>\n<blockquote>\n<p id=\"so_34091623_34091623_0\">A core constant expression e is a <em>constant expression</em>, unless it\n  initializes an object such that it contains a pointer, which points to\n  an object with storage duration other than static.</p>\n</blockquote>\n<p>If it is not, can someone, please, explain why?</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5181494", "AnswerCount": "1"}, "34369191": {"ParentId": "34091623", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2015-12-19T09:25:52.867", "Score": "1", "LastEditorUserId": "5247040", "LastEditDate": "2015-12-19T14:42:49.203", "Id": "34369191", "OwnerUserId": "5247040", "Body": "<blockquote>\n<p id=\"so_34091623_34369191_0\">which points to an object with storage duration other than static</p>\n</blockquote>\n<ol>\n<li>You ruled out null-pointers  </li>\n<li>You ruled out function-pointers</li>\n</ol>\n<p>From standard 5.20\\5:</p>\n<blockquote>\n<p id=\"so_34091623_34369191_1\">(5.2) if the object or subobject is of pointer type, it contains the address of an object with static storage duration, the address past the end of such an object (5.7), the address of a function, or a null pointer value</p>\n</blockquote>\n<ol start=\"3\">\n<li>You omitted notion of references as members in objects. What to do with them? You can take const reference of runtime object or static object. Does this make whole object to be <code>core constant expression</code> or not?</li>\n</ol>\n<blockquote>\n<p id=\"so_34091623_34369191_2\">(5.1) each non-static data member of reference type refers to an entity that is a permitted result of a constant expression</p>\n</blockquote>\n<p>I bet there is an additional nuance with <code>glvalue core constant expression</code> and <code>prvalue core constant expression</code> ( as I understand this phrase excludes some of <code>xvalue</code> ), but I fail to grasp it. I hope that someone will explain this.</p>\n<blockquote>\n<p id=\"so_34091623_34369191_3\">A constant expression is either a glvalue core constant expression whose value refers to an entity that is a permitted result of a constant expression (as defined below), or a prvalue core constant expression whose\n  value is an object</p>\n</blockquote>\n<p><strong>EDIT</strong></p>\n<blockquote>\n<p id=\"so_34091623_34369191_4\">So what is a problem with that? There are still other rules, you know:\n  5.20\\2.7, 2.9, 2.13, 2.19, 2.5; etc. ; )</p>\n</blockquote>\n<p>Yes, <strong>5.20/2.9</strong> is about references ( other mentioned rules doesn't apply to reference types - as I understand them ). Let's read it.</p>\n<blockquote>\n<p id=\"so_34091623_34369191_5\">(2) A conditional-expression e is a core constant expression unless\n  the evaluation of e , following the rules of the abstract machine (\n  1.9 ), would evaluate one of the following expressions:<br>\n  (2.9) an id-expression that refers to a variable or data member of\n  reference type unless the reference has a preceding initialization and\n  either<br>\n  \u2014 (2.9.1) it is initialized with a constant expression or<br>\n  \u2014 (2.9.2) it is a non-static data member of an object whose lifetime\n  began within the evaluation of e ;</br></br></br></p>\n</blockquote>\n<p>Now let's compare your rule and standard's. Standard adds some details to <strong>5.20/2.9</strong>.</p>\n<blockquote>\n<p id=\"so_34091623_34369191_6\"><strong>5.20/5</strong><br>\n  (5.1) each non-static data member of reference type refers to an entity that is a permitted result of a constant expression<br>\n  An entity is a permitted result of a constant expression if it is an object with static storage duration that is either not a temporary object or is a temporary object whose value satisfies the above constraints, or it is a function.</br></br></p>\n</blockquote>\n<ul>\n<li>again we see mention of <code>functions</code> ( like with pointers ) - your rule (based on <strong>5.20/2.9</strong> ) lacks it.</li>\n<li>there is no mention of reference to <code>object with static storage duration</code> in your rule</li>\n</ul>\n", "LastActivityDate": "2015-12-19T14:42:49.203"}, "bq_ids": {"n4140": {"so_34091623_34369191_3": {"section_id": 6187, "quality": 0.6666666666666666, "length": 16}, "so_34091623_34091623_0": {"section_id": 6187, "quality": 0.5882352941176471, "length": 10}, "so_34091623_34369191_1": {"section_id": 6187, "quality": 1.0, "length": 20}, "so_34091623_34369191_2": {"section_id": 6187, "quality": 0.5833333333333334, "length": 7}, "so_34091623_34369191_0": {"section_id": 382, "quality": 0.7142857142857143, "length": 5}, "so_34091623_34369191_5": {"section_id": 6185, "quality": 0.9230769230769231, "length": 36}}, "n3337": {"so_34091623_34091623_0": {"section_id": 5947, "quality": 0.5882352941176471, "length": 10}, "so_34091623_34369191_0": {"section_id": 373, "quality": 0.7142857142857143, "length": 5}, "so_34091623_34369191_1": {"section_id": 5947, "quality": 0.7, "length": 14}}, "n4659": {"so_34091623_34369191_3": {"section_id": 7690, "quality": 0.875, "length": 21}, "so_34091623_34369191_1": {"section_id": 7690, "quality": 0.95, "length": 19}, "so_34091623_34369191_0": {"section_id": 504, "quality": 0.7142857142857143, "length": 5}, "so_34091623_34369191_6": {"section_id": 7690, "quality": 0.9090909090909091, "length": 30}, "so_34091623_34369191_2": {"section_id": 7690, "quality": 1.0, "length": 12}, "so_34091623_34091623_0": {"section_id": 7690, "quality": 0.6470588235294118, "length": 11}, "so_34091623_34369191_5": {"section_id": 7687, "quality": 0.8461538461538461, "length": 33}}}});