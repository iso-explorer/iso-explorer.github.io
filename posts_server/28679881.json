post_cb({"28679881": {"ViewCount": "129", "Body": "<p>So, I want to understand if it is allowed for const_iterator (i.e not mutable) to return by-value.</p>\n<p>What I have found is that return type of <code>*r</code> should be <code>reference</code>(1) where <code>reference</code> is <code>iterator_traits&lt;X&gt;::reference</code>(2). Naming clearly suggest that it's usually should be reference type, but does it have to?</p>\n<p>Are there any difference between different iterator categories in that aspect?</p>\n<p>All my links to standard(see below) are to n3242(last c++11 draft, I believe), but I'am also interested to know the difference between the versions of c++ too, if any.</p>\n<p>(1) 24.2.2.2<br>\n(2) 24.2.1.11</br></p>\n", "AcceptedAnswerId": "28680126", "Title": "May iterator's operator * return by-value?", "CreationDate": "2015-02-23T17:40:35.793", "Id": "28679881", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2015-02-25T14:06:47.937", "Score": "1", "OwnerUserId": "768110", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28679881_28680126_0": {"length": 7, "quality": 1.0, "section_id": 5573}}, "n3337": {"so_28679881_28680126_0": {"length": 7, "quality": 1.0, "section_id": 5355}}, "n4659": {"so_28679881_28680126_0": {"length": 7, "quality": 1.0, "section_id": 7020}}}, "28680126": {"Id": "28680126", "PostTypeId": "2", "Body": "<p>Forward and stronger iterators are supposed to have <code>reference</code> be an actual reference type ([forward.iterators]/p1):</p>\n<blockquote>\n<p id=\"so_28679881_28680126_0\">A class or pointer type <code>X</code> satisfies the requirements of a forward\n  iterator if</p>\n<ul>\n<li>[...]</li>\n<li>if <code>X</code> is a mutable iterator, <code>reference</code> is a reference to <code>T</code>; if <code>X</code> is a const iterator, <code>reference</code> is a reference to <code>const T</code>,</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Input iterators can have non-reference <code>reference</code>s. <code>istreambuf_iterator&lt;charT&gt;::reference</code>, for example, is <code>charT</code>.</p>\n<p>The standard is <a href=\"http://cplusplus.github.io/LWG/lwg-active.html#2437\" rel=\"nofollow\">contradictory</a> about what <code>reference</code> can be for output iterators. To quote the linked LWG issue, it \"can and can't be <code>void</code>\".</p>\n<p>Note that the standard itself lies: as of N4140, <code>vector&lt;bool&gt;::iterator</code> is supposed to be a random access iterator, but doesn't even satisfy the forward iterator requirements because its <code>reference</code> needs to be a wrapper class and not an actual reference type.<sup>*</sup> Another <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4346.html\" rel=\"nofollow\">current proposal</a> includes more lies (see <code>bounds_iterator</code>).</p>\n<hr>\n<p><sub><sup>*</sup> With the edits applied by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4284.html\" rel=\"nofollow\">N4284</a>, [vector.overview] no longer places any requirements on <code>vector&lt;bool&gt;::iterator</code> beyond those found in table 96 - which requires forward iterator or stronger, so the standard is still lying.</sub></p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2015-02-25T14:06:47.937", "Score": "3", "CreationDate": "2015-02-23T17:53:14.613", "ParentId": "28679881", "CommentCount": "0", "LastEditDate": "2015-02-25T14:06:47.937", "OwnerUserId": "2756719"}, "28681203": {"Id": "28681203", "PostTypeId": "2", "Body": "<p>There is no explicit mandate in the language specification that operator * should return anything in particular.</p>\n<p>Obviously it's good practice to return a reference if operator * is being used as a dereference operator as it normally is.</p>\n<p>Boost xpressive is an example of a widely adopted and well regarded template library that uses operator * to return an object that represents the operation of matching multiple similar terms zero or more times.</p>\n<p>Documentation here:</p>\n<p><a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/xpressive.html\" rel=\"nofollow\">http://www.boost.org/doc/libs/1_57_0/doc/html/xpressive.html</a></p>\n", "LastActivityDate": "2015-02-23T18:53:48.623", "Score": "0", "CreationDate": "2015-02-23T18:53:48.623", "ParentId": "28679881", "CommentCount": "0", "OwnerUserId": "2015579"}});