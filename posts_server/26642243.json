post_cb({"26642348": {"ParentId": "26642243", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The insertion operator that \"inserts\" streambuffers sets the failbit if no characters could be extracted from the streambuffer - [ostream.inserters]/9:</p>\n<blockquote>\n<p id=\"so_26642243_26642348_0\">If the function inserts no characters, it calls <code>setstate(failbit)</code>\n  (which may throw <code>ios_base:: failure</code> (27.5.5.4)).</p>\n</blockquote>\n<p>Whereas the insertion operator that outputs a string obviously doesn't consider the amount of characters written.</p>\n<p>It seems that this is because inserting a streambuffer \"forwards\" the streambuffer into the stream - if no characters could be extracted most certainly there was an error in the streambuffer itself and this error should be represented by the streams error state. Outputting an empty stream is an exception that was presumably not considered important enough to take into account when this rule was created.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-10-29T23:34:14.000", "Id": "26642348", "Score": "5", "CreationDate": "2014-10-29T23:19:03.603", "LastActivityDate": "2014-10-29T23:34:14.000"}, "26642243": {"CommentCount": "0", "ViewCount": "153", "CreationDate": "2014-10-29T23:09:48.977", "LastActivityDate": "2014-10-29T23:34:14.000", "Title": "difference between << s.str() and << s.rdbuf()", "AcceptedAnswerId": "26642348", "PostTypeId": "1", "Id": "26642243", "Score": "4", "Body": "<p>Can someone explain the subtle difference in:</p>\n<pre><code>ofstream f(\"test.txt\")\nstd::stringstream s;\ns&lt;&lt;\"\";\nf &lt;&lt; s.rdbuf();\nf.good() // filestream is bad!!\n\n\nofstream f(\"test.txt\")\nstd::stringstream s;\ns&lt;&lt;\"\";\nf &lt;&lt; s.str();\nf.good() // is still ok!\n</code></pre>\n<p>I mostly use .rdbuf() to push the stringstream to the file (because its more efficient), but if the stringstream is empty than the filestream gets bad...? Isnt this stupid?\nI think I dont quite understand <code>&lt;&lt; s.rdbuf()</code> ...</p>\n", "Tags": "<c++><iostream><stringstream><ofstream><cstdio>", "OwnerUserId": "293195", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26642243_26642348_0": {"section_id": 2206, "quality": 0.8, "length": 8}}, "n3337": {"so_26642243_26642348_0": {"section_id": 2194, "quality": 0.8, "length": 8}}, "n4659": {"so_26642243_26642348_0": {"section_id": 2479, "quality": 0.8, "length": 8}}}});