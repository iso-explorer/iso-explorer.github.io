post_cb({"24043577": {"CommentCount": "4", "ViewCount": "492", "PostTypeId": "1", "LastEditorUserId": "1149981", "CreationDate": "2014-06-04T17:12:55.600", "LastActivityDate": "2014-06-05T09:42:07.610", "Title": "Partial Aggregate Initialization and Non-static Data Member Initializer", "AcceptedAnswerId": "24043750", "LastEditDate": "2014-06-04T17:23:50.203", "Id": "24043577", "Score": "9", "Body": "<pre><code>struct Point {\n  int x = 0;\n  int y = 10;\n};\n\nPoint p = {1,};\np.x == 1;  // true\np.y == 10; // is this true?\n</code></pre>\n<p>According to the standard missing elements in initializer list are value initialized, so <code>y</code> should be <code>int()</code> or <code>0</code>, but it doesn't seem to say what happen in the situation of Non-static Data Member Initializer.</p>\n<p>Edit: According to the answer, apparently this is invalid c++11, I would like to know the situation in c++1y. </p>\n", "Tags": "<c++><c++11><c++14>", "OwnerUserId": "1149981", "AnswerCount": "2"}, "24043750": {"ParentId": "24043577", "PostTypeId": "2", "CommentCount": "5", "Body": "<h3>C++98, C++03</h3>\n<p>Non-static data member initialisers (NSDMIs) do not exist; the question is inapplicable.</p>\n<hr>\n<h3>C++11</h3>\n<p>Well, first of all, this initialisation is invalid because your type is not an aggregate:</p>\n<blockquote>\n<p id=\"so_24043577_24043750_0\"><code>[C++11: 8.5.1/1]:</code> <strong>An aggregate is</strong> an array or <strong>a class</strong> (Clause 9) <strong>with</strong> user-provided constructors (12.1), <strong>no <em>brace-or-equal-initializers</em> for non-static data members</strong> (9.2), no private or protected non-static data members (Clause 11),\n  no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>So, aggregate initialisation can't be performed here; a constructor taking an <code>std::initializer_list</code> would be your only way to use that initialisation syntax (<code>[C++11: 8.5.4/3]</code>), but you don't have one of those either.</p>\n<p>Consequently, the entire premise of the question is flawed: it is not possible to get yourself into this state.</p>\n<hr>\n<h3>C++1y</h3>\n<p>In the upcoming version of the standard, the definition of aggregates has been relaxed to allow your type to be deemed an <em>aggregate</em> (as long as both of those members stay <code>public</code>!):</p>\n<blockquote>\n<p id=\"so_24043577_24043750_1\"><code>[n3936: 8.5.1/1]</code> <strong>An aggregate is</strong> an array or <strong>a class</strong> (Clause 9) with no user-provided constructors (12.1), <strong>no private or protected non-static data members</strong> (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>Following on from this, there's a rule that guarantees the result you're looking for:</p>\n<blockquote>\n<p id=\"so_24043577_24043750_2\"><code>[n3936: 8.5.1/7]</code>: If there are fewer <em>initializer-clauses</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized from its <em>brace-or-equal-initializer</em> or, if there is no <em>brace-or-equal-initializer</em>,\n  from an empty initializer list (8.5.4). <em>[ Example:</em></p>\n<pre><code>struct S { int a; const char* b; int c; int d = b[a]; };\nS ss = { 1, \"asdf\" };\n</code></pre>\n<p id=\"so_24043577_24043750_3\">initializes <code>ss.a</code> with <code>1</code>, <code>ss.b</code> with <code>\"asdf\"</code>, <code>ss.c</code> with the value of an expression of the form <code>int{}</code> (that is, <code>0</code>), and <code>ss.d</code> with the value of <code>ss.b[ss.a]</code> (that is, <code>\u2019s\u2019</code>), and in</p>\n<pre><code>struct X { int i, j, k = 42; };\nX a[] = { 1, 2, 3, 4, 5, 6 };\nX b[2] = { { 1, 2, 3 }, { 4, 5, 6 } };\n</code></pre>\n<p id=\"so_24043577_24043750_4\"><code>a</code> and <code>b</code> have the same value <em>\u2014end example ]</em></p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2014-06-04T17:36:55.367", "Id": "24043750", "Score": "14", "CreationDate": "2014-06-04T17:23:53.020", "LastActivityDate": "2014-06-04T17:36:55.367"}, "24043804": {"ParentId": "24043577", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><sup><em>(Answer valid in C++1y, <strong>only</strong>!)</em></sup></p>\n<p>According to paragraph #7 of section \"8.5.1 Aggregates\" (Working Draft N3691 Date: 2013-05-16)</p>\n<blockquote>\n<p id=\"so_24043577_24043804_0\">7 If there are fewer initializer-clauses in the list than there are\n  members in the aggregate, then each member not explicitly initialized\n  shall be initialized from its brace-or-equal-initializer or, if there\n  is no brace-or-equalinitializer, from an empty initializer list\n  (8.5.4).</p>\n</blockquote>\n<p>And below the quote there is an example</p>\n<pre><code>[ Example: struct S { int a; const char* b; int c; int d = b[a]; }; \nS  ss = { 1, \"asdf\" };\n initializes ss.a with 1, ss.b with \"asdf\", ss.c\nwith the value of an expression of the form int{} (that is, 0), and\nss.d with the value of ss.b[ss.a] (that is, \u2019s\u2019),\n</code></pre>\n<p>So in your example p.y will be initialized by 10.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "560648", "LastEditDate": "2014-06-05T09:42:07.610", "Id": "24043804", "Score": "3", "CreationDate": "2014-06-04T17:27:46.307", "LastActivityDate": "2014-06-05T09:42:07.610"}, "bq_ids": {"n4140": {"so_24043577_24043750_4": {"section_id": 480, "quality": 0.8, "length": 4}, "so_24043577_24043750_2": {"section_id": 3304, "quality": 0.84, "length": 21}, "so_24043577_24043750_1": {"section_id": 3298, "quality": 0.7619047619047619, "length": 16}, "so_24043577_24043750_0": {"section_id": 3298, "quality": 0.64, "length": 16}, "so_24043577_24043804_0": {"section_id": 3304, "quality": 0.9545454545454546, "length": 21}, "so_24043577_24043750_3": {"section_id": 3304, "quality": 1.0, "length": 12}}, "n3337": {"so_24043577_24043750_4": {"section_id": 471, "quality": 0.8, "length": 4}, "so_24043577_24043750_2": {"section_id": 3174, "quality": 0.68, "length": 17}, "so_24043577_24043750_1": {"section_id": 3168, "quality": 0.7619047619047619, "length": 16}, "so_24043577_24043750_0": {"section_id": 3168, "quality": 0.8, "length": 20}, "so_24043577_24043804_0": {"section_id": 3174, "quality": 0.7727272727272727, "length": 17}, "so_24043577_24043750_3": {"section_id": 3174, "quality": 0.75, "length": 9}}, "n4659": {"so_24043577_24043804_0": {"section_id": 4070, "quality": 0.7272727272727273, "length": 16}, "so_24043577_24043750_3": {"section_id": 4070, "quality": 1.0, "length": 12}, "so_24043577_24043750_2": {"section_id": 4070, "quality": 0.64, "length": 16}, "so_24043577_24043750_4": {"section_id": 4013, "quality": 0.8, "length": 4}, "so_24043577_24043750_1": {"section_id": 4063, "quality": 0.5714285714285714, "length": 12}}}});