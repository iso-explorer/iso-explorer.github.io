post_cb({"10925459": {"CommentCount": "4", "AcceptedAnswerId": "10933049", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-06-07T03:56:27.330", "LastActivityDate": "2012-06-07T22:17:40.887", "LastEditDate": "2017-05-23T10:09:15.250", "ViewCount": "658", "FavoriteCount": "1", "Title": "Initializing a const int with a floating point literal", "Id": "10925459", "Score": "8", "Body": "<p><strong>Example</strong></p>\n<pre><code>int main()\n{\n    const int i = 1.0; // Notice I am assigning a double to an int here\n    char a[i];\n}\n</code></pre>\n<p><strong>Question</strong></p>\n<p>Compiling the above code with <code>g++ -O0 -Wall -pedantic -ansi -std=c++11</code> gives no errors (except for an unused variable). However, if I remove <code>-std=c++11</code>,  I get the following warning:</p>\n<blockquote>\n<p id=\"so_10925459_10925459_0\">warning: ISO C++ forbids variable length array</p>\n</blockquote>\n<p>According to <a href=\"https://stackoverflow.com/questions/4518787/typo-at-msdn-page-c-constant-expressions\">this SO question</a>, I believe that in C++03, the code is invalid. However, can someone explain how the rule has changed in C++11?</p>\n<p>(This question was a result of <a href=\"https://stackoverflow.com/questions/10923615/compiler-bug-g-allows-variable-size-static-arrays-unless-function-is-templat/10924195#10924195\">a previous question</a> I answered.)</p>\n", "Tags": "<c++><c++11><constants>", "OwnerUserId": "906773", "AnswerCount": "1"}, "10933049": {"ParentId": "10925459", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2012-06-07T13:41:03.003", "Score": "7", "LastEditorUserId": "981959", "LastEditDate": "2012-06-07T18:46:10.260", "Id": "10933049", "OwnerUserId": "981959", "Body": "<p>An array bound must be an integral constant expression, see 8.3.4 [dcl.array]/1 (same wording in C++03 and C++11):</p>\n<blockquote>\n<p id=\"so_10925459_10933049_0\">If the constant-expression (5.19) is present, it shall be an integral constant expression and its value shall be greater than zero.</p>\n</blockquote>\n<p>In C++03 an integral constant expression cannot be initialized by a floating literal unless cast to integral type, see the last sentence of 5.19 [expr.const]/1:</p>\n<blockquote>\n<p id=\"so_10925459_10933049_1\">An <em>integral constant-expression</em> can involve only literals (2.13), enumerators, <code>const</code> variables or static data members of integral or enumeration types initialized with constant expressions (8.5), non-type template parameters of integral or enumeration types, and <code>sizeof</code> expressions. Floating literals (2.13.3) can appear only if they are cast to integral or enumeration types.</p>\n</blockquote>\n<p>This means that in C++03 <code>i</code> is not an integral constant expression, so cannot be used as an array bound.</p>\n<p>GCC and Clang allow variable-length arrays as an extension to C++03, so it compiles with a non-constant bound, but you get a warning with <code>-pedantic</code>.  Changing the constant's initializer to cast it to integral type makes <code>i</code> a valid integral constant expression:</p>\n<pre><code>const int i = (int) 1.0;\n</code></pre>\n<p>With that change the array is no longer variable length and there is no warning even with <code>-pedantic</code>.</p>\n<p>In C++11 5.19 [expr.const]/3 says:</p>\n<blockquote>\n<p id=\"so_10925459_10933049_2\">A <em>literal constant expression</em> is a prvalue core constant expression of literal type, but not pointer type.  An <em>integral constant expression</em> is a literal constant expression of integral or unscoped enumeration type.</p>\n</blockquote>\n<p>The preceding (quite lengthy) paragraphs describe the rules for core constant expressions, but basically in C++11 the double initializer does not prevent <code>i</code> being a core constant expression, even without a cast, so it is an integral constant expression and therefore a valid array bound, so no warning.</p>\n", "LastActivityDate": "2012-06-07T18:46:10.260"}, "bq_ids": {"n4140": {"so_10925459_10933049_2": {"section_id": 6186, "quality": 0.5909090909090909, "length": 13}, "so_10925459_10933049_0": {"section_id": 3228, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_10925459_10933049_2": {"section_id": 5947, "quality": 0.9090909090909091, "length": 20}, "so_10925459_10933049_0": {"section_id": 3101, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_10925459_10933049_2": {"section_id": 7687, "quality": 0.5454545454545454, "length": 12}, "so_10925459_10933049_0": {"section_id": 3985, "quality": 0.8181818181818182, "length": 9}}}});