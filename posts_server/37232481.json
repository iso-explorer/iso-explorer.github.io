post_cb({"37232481": {"CommentCount": "1", "ViewCount": "153", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-05-14T22:20:03.463", "LastActivityDate": "2016-05-14T23:53:25.827", "Title": "Lambdas, local types, and global namespace", "AcceptedAnswerId": "37232747", "LastEditDate": "2017-05-23T12:15:57.563", "Id": "37232481", "Score": "7", "Body": "<p>This minimal program</p>\n<pre><code>template &lt;typename X&gt;\nvoid foo (X x)\n{\n    bar (x);\n}\n\ntemplate &lt;typename X&gt;\nvoid bar (X x)\n{\n}\n\nint main ()\n{\n    foo ([]{});\n}\n</code></pre>\n<p>compiles with gcc (4.8.5 and 5.3) and fails to compile with clang (3.7)</p>\n<p>My analysis is as follows.</p>\n<p><code>bar</code> is used in <code>foo</code> and declared after <code>foo</code>, so it is not visible at <code>foo</code> definition point. The only way <code>bar</code> can be found at <code>foo</code> instantiation point is via argument-dependent lookup. </p>\n<p>The only argument to both <code>foo</code> and <code>bar</code> is a lambda defined in <code>main</code>.</p>\n<p>Apparently gcc regards its type as declared in the global namespace, while clang does not. Thus, gcc can find <code>bar</code> via ADL and clang cannot.</p>\n<p>Same thing happens when we use a type defined locally in <code>main</code>:</p>\n<pre><code>int main ()\n{\n    struct K{};\n    foo (K());     // gcc compiles, clang complains\n}\n</code></pre>\n<p>It looks like gcc is in the wrong here. The type of the lambda according to the standard is <em>unnamed</em> (expr.prim.lambda/3), so it should not belong to any namespace. The local type supposedly shouldn't belong to the global namespace either.</p>\n<p>Is the analysis correct? Is this a known gcc bug?</p>\n<p>This question is inspired by <a href=\"https://stackoverflow.com/questions/37231313/function-works-when-not-in-namespace-else-it-breaks\">this question</a>.</p>\n", "Tags": "<c++><gcc><lambda><clang><argument-dependent-lookup>", "OwnerUserId": "775806", "AnswerCount": "2"}, "37232971": {"ParentId": "37232481", "CommentCount": "1", "Body": "<p>GCC is wrong here. It finds <code>bar()</code> via ADL even though <code>[]{}</code> is not a member of the global namespace. Using the same quote T.C. used:</p>\n<p><a href=\"http://eel.is/c++draft/expr.prim.lambda#4\" rel=\"nofollow\">[expr.prim.lambda]/4</a>:</p>\n<blockquote>\n<p id=\"so_37232481_37232971_0\">The closure type is declared in the smallest block scope, class scope,\n  or namespace scope that contains the corresponding <em>lambda-expression</em>.\n  [ <em>Note</em>: This determines the set of namespaces and classes associated\n  with the closure type ([basic.lookup.argdep]). The parameter types of\n  a <em>lambda-declarator</em> do not affect these associated namespaces and\n  classes.  \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>It's easy to see this by intentionally introducing an error. In GCC:</p>\n<pre><code>auto f = -[]{};\n\nint main ()\n{\n    foo (f);\n}\n\nerror: no match for 'operator-' (operand type is '&lt;lambda()&gt;')\n\nint main ()\n{\n    foo (-[]{});\n}\n\nno match for 'operator-' (operand type is 'main()::&lt;lambda()&gt;')\n</code></pre>\n<p>On the other hand, if we move the lambda declaration to global scope, Clang does not complain:</p>\n<pre><code>auto f = []{};\n\nint main ()\n{\n    foo (f);\n}\n</code></pre>\n<p>FWIW this was reported as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57433\" rel=\"nofollow\">Bug 57433</a> for GCC but it's unconfirmed. It contains more examples of programs in which GCC accepts/Clang rejects.</p>\n", "OwnerUserId": "6335631", "PostTypeId": "2", "Id": "37232971", "Score": "2", "CreationDate": "2016-05-14T23:35:57.290", "LastActivityDate": "2016-05-14T23:35:57.290"}, "37232747": {"ParentId": "37232481", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>GCC is correct, per the resolution of <a href=\"http://wg21.link/cwg1691\" rel=\"nofollow\">DR1690/1691</a>.</p>\n<p><a href=\"http://eel.is/c++draft/expr.prim.lambda#4\" rel=\"nofollow\">[expr.prim.lambda]/4</a>:</p>\n<blockquote>\n<p id=\"so_37232481_37232747_0\">The closure type is declared in the smallest block scope, class scope,\n  or namespace scope that contains the corresponding <em>lambda-expression</em>.\n  [ <em>Note</em>: This determines the set of namespaces and classes associated\n  with the closure type ([basic.lookup.argdep]). The parameter types of\n  a <em>lambda-declarator</em> do not affect these associated namespaces and\n  classes.  \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/basic.lookup.argdep#2\" rel=\"nofollow\">[basic.lookup.argdep]/2</a>:</p>\n<blockquote>\n<p id=\"so_37232481_37232747_1\">If <code>T</code> is a class type (including unions), its associated classes are:\n  the class itself; the class of which it is a member, if any; and its\n  direct and indirect base classes. Its associated namespaces are the\n  innermost enclosing namespaces of its associated classes.</p>\n</blockquote>\n<p>The innermost enclosing namespace of the closure type at issue is the global namespace, so the global namespace is an associated namespace. </p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2016-05-14T23:53:25.827", "Id": "37232747", "Score": "7", "CreationDate": "2016-05-14T23:00:27.063", "LastActivityDate": "2016-05-14T23:53:25.827"}, "bq_ids": {"n4140": {"so_37232481_37232747_0": {"section_id": 5962, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232971_0": {"section_id": 5962, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232747_1": {"section_id": 7104, "quality": 1.0, "length": 25}}, "n3337": {"so_37232481_37232747_0": {"section_id": 5731, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232971_0": {"section_id": 5731, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232747_1": {"section_id": 6848, "quality": 0.96, "length": 24}}, "n4659": {"so_37232481_37232747_0": {"section_id": 7452, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232971_0": {"section_id": 7452, "quality": 0.7941176470588235, "length": 27}, "so_37232481_37232747_1": {"section_id": 8605, "quality": 1.0, "length": 25}}}});