post_cb({"25033791": {"ParentId": "25033690", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>As the order of initialisation is dependent on the order they are defined in your class, the member order is ignored: <a href=\"https://stackoverflow.com/questions/2669888/c-initialization-order-for-member-classes\">C++: Initialization Order of Class Data Members</a>.</p>\n<p>So I would just move the integer and string above <code>MyOb1</code> and <code>MyOb2</code>, also @Matt McNabb also pointed out that you should use the params passed in your constructor in the initialisation of your MyOb1/2 objects to avoid ambiguity (a sensible suggestion):</p>\n<pre><code>class MyClass\n{\nprivate:\n  int i;\n  std::string str;\n  MyOb1 Obj1;\n  MyOb2 Obj2;\n\n\npublic:\n  MyClass(int iIn, const std::string&amp; strIn)\n  : i(iIn),      // here\n    str(strIn),\n    Obj1(iIn),\n    Obj2(iIn, strIn) {}\n}\n</code></pre>\n<p>To quote from the standard section 12.6.2 (the latest <a href=\"https://isocpp.org/files/papers/N3797.pdf\" rel=\"nofollow noreferrer\">draft</a> has this on page 266):</p>\n<blockquote>\n<p id=\"so_25033690_25033791_0\">5 Initialization shall proceed in the following order:</p>\n<p id=\"so_25033690_25033791_1\">\u2014 First, and only for the constructor of the most derived class as\n  described below, virtual base classes shall be initialized in the\n  order they appear on a depth-first left-to-right traversal of the\n  directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the\n  order of appearance of the base class names in the derived class\n  base-specifier-list.</p>\n<p id=\"so_25033690_25033791_2\">\u2014 Then, direct base classes shall be initialized in declaration order\n  as they appear in the base-specifier-list (regardless of the order of\n  the mem-initializers).</p>\n<p id=\"so_25033690_25033791_3\">\u2014 Then, nonstatic data members shall be initialized in the order they\n  were declared in the class definition (again regardless of the order\n  of the mem-initializers).</p>\n<p id=\"so_25033690_25033791_4\">\u2014 Finally, the body of the constructor is executed. [Note: the\n  declaration order is mandated to ensure that base and member\n  subobjects are destroyed in the reverse order of initialization. ]</p>\n</blockquote>\n", "OwnerUserId": "704848", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:57:10.597", "Id": "25033791", "Score": "4", "CreationDate": "2014-07-30T09:53:05.623", "LastActivityDate": "2014-07-30T10:01:44.930"}, "25033690": {"CommentCount": "5", "ViewCount": "56", "PostTypeId": "1", "LastEditorUserId": "3062311", "CreationDate": "2014-07-30T09:48:03.680", "LastActivityDate": "2014-07-30T10:02:39.180", "Title": "Members declaration order in a class if they depend on eachother, optimal solution", "AcceptedAnswerId": "25033791", "LastEditDate": "2014-07-30T10:02:39.180", "Id": "25033690", "Score": "1", "Body": "<p>If I have a class that contains more members and some of them are dependent the on others, what is the best way to declare the its members? For example:</p>\n<pre><code>class MyClass\n{\nprivate:\n  MyOb1 Obj1;\n  MyOb2 Obj2;\n  int i;\n  std::string str;\n\npublic:\n  MyClass(int iIn, const std::string&amp; strIn)\n  : i(iIn),      // here\n    str(strIn),\n    Obj1(i),\n    Obj2(i, str) {}\n}\n</code></pre>\n<p>There are some problems because of the declaration order. I have chosen that order because it is an optimal order. I need those values in other functions of the <code>MyClass</code>. What is the optimal solution to this problem?</p>\n", "Tags": "<c++>", "OwnerUserId": "3062311", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25033690_25033791_4": {"section_id": 438, "quality": 0.875, "length": 14}, "so_25033690_25033791_2": {"section_id": 438, "quality": 1.0, "length": 13}, "so_25033690_25033791_1": {"section_id": 438, "quality": 0.875, "length": 28}, "so_25033690_25033791_3": {"section_id": 438, "quality": 1.0, "length": 15}}, "n3337": {"so_25033690_25033791_4": {"section_id": 429, "quality": 0.875, "length": 14}, "so_25033690_25033791_2": {"section_id": 429, "quality": 1.0, "length": 13}, "so_25033690_25033791_1": {"section_id": 429, "quality": 0.875, "length": 28}, "so_25033690_25033791_3": {"section_id": 429, "quality": 1.0, "length": 15}}, "n4659": {"so_25033690_25033791_4": {"section_id": 458, "quality": 0.875, "length": 14}, "so_25033690_25033791_2": {"section_id": 458, "quality": 1.0, "length": 13}, "so_25033690_25033791_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_25033690_25033791_1": {"section_id": 458, "quality": 0.875, "length": 28}}}});