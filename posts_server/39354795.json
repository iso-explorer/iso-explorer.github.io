post_cb({"39354911": {"ParentId": "39354795", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\u00a7 5.1.1 [expr.prim.general] 13</p>\n<blockquote>\n<p id=\"so_39354795_39354911_0\">An id-expression that denotes a non-static data member or non-static member function of a class can only be used:</p>\n<p id=\"so_39354795_39354911_1\">\u2014 as part of a class member access (5.2.5) in which the object expression refers to the member\u2019s class[63] or a class derived from that class, or</p>\n<p id=\"so_39354795_39354911_2\">\u2014 to form a pointer to member (5.3.1), or</p>\n<p id=\"so_39354795_39354911_3\">\u2014 if that id-expression denotes a non-static data member and it appears in an unevaluated operand\n  <em>[Example:</em></p>\n<pre><code>struct S {\n    int m;\n};\n\nint i = sizeof(S::m);      // OK\nint j = sizeof(S::m + 42); // OK\n</code></pre>\n<p id=\"so_39354795_39354911_4\"><em>-end example]</em></p>\n</blockquote>\n<p>Edit:\nAs @Praetorian points out in comments to the question itself: This was introduced in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html\">C++11</a></p>\n", "OwnerUserId": "257645", "LastEditorUserId": "257645", "LastEditDate": "2016-09-06T20:53:46.270", "Id": "39354911", "Score": "26", "CreationDate": "2016-09-06T17:41:24.873", "LastActivityDate": "2016-09-06T20:53:46.270"}, "39354795": {"CommentCount": "3", "AcceptedAnswerId": "39354911", "CreationDate": "2016-09-06T17:33:49.130", "LastActivityDate": "2016-09-06T20:53:46.270", "PostTypeId": "1", "ViewCount": "662", "FavoriteCount": "1", "Title": "Clang and GCC accept questionable sizeof", "Id": "39354795", "Score": "18", "Body": "<p>I have compilers that disagree on sizeof.  For the following code, Clang and GCC will compile it, but other compilers that I have to use fail claiming \"illegal sizeof operand\".  My reading of the standard says this is illegal, since <code>sizeof</code> can only take an expression (I don't think that S::a is an expression) or a type-id, but it is unusual for GCC and Clang to both be wrong.  I can obviously replace it with <code>sizeof(S().a)</code>, which works with all my compilers.</p>\n<pre><code>struct S\n{\n   int a[32];\n   int b;\n   int c;\n   int d[32];\n};\n\nint main()\n{\n   return sizeof(S::a);\n}\n</code></pre>\n<p>Are Clang and GCC wrong, or am I misreading the standard?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2012007", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39354795_39354911_1": {"section_id": 5959, "quality": 0.8461538461538461, "length": 11}, "so_39354795_39354911_3": {"section_id": 5959, "quality": 0.8888888888888888, "length": 8}, "so_39354795_39354911_0": {"section_id": 5959, "quality": 1.0, "length": 10}}, "n3337": {"so_39354795_39354911_1": {"section_id": 5728, "quality": 0.8461538461538461, "length": 11}, "so_39354795_39354911_3": {"section_id": 5728, "quality": 0.8888888888888888, "length": 8}, "so_39354795_39354911_0": {"section_id": 5728, "quality": 1.0, "length": 10}}, "n4659": {"so_39354795_39354911_1": {"section_id": 7440, "quality": 0.8461538461538461, "length": 11}, "so_39354795_39354911_3": {"section_id": 7440, "quality": 0.8888888888888888, "length": 8}, "so_39354795_39354911_0": {"section_id": 7440, "quality": 1.0, "length": 10}}}});