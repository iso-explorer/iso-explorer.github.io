post_cb({"40779919": {"ParentId": "24067499", "CommentCount": "0", "Body": "<p>In this question x is an integer value whereas y is a float value... an integer value and a float value cannot be equated...so inorder to check equality we have to typecast either float to integer or vice versa... Hope this may help to clear your concept</p>\n", "OwnerUserId": "7203779", "PostTypeId": "2", "Id": "40779919", "Score": "-2", "CreationDate": "2016-11-24T07:05:17.633", "LastActivityDate": "2016-11-24T07:05:17.633"}, "24067599": {"ParentId": "24067499", "CommentCount": "1", "Body": "<p>Comparisons between arithmetic types are subject to the so-called <em>usual arithmetic conversions</em> (\u00a75/9, \u00a75.9/2, \u00a75.10/1). Emphasis mine.</p>\n<blockquote>\n<p id=\"so_24067499_24067599_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield\n  result types in a similar way. The purpose is to yield a common type, which is also the type of the result.\n  This pattern is called the usual arithmetic conversions, which are defined as follows:</p>\n<p id=\"so_24067499_24067599_1\">\u2014 If either operand is of scoped enumeration type (7.2), no conversions are performed; if the other\n  operand does not have the same type, the expression is ill-formed.</p>\n<p id=\"so_24067499_24067599_2\">\u2014 If either operand is of type <code>long double</code>, the other shall be converted to <code>long double</code>.</p>\n<p id=\"so_24067499_24067599_3\">\u2014 Otherwise, if either operand is <code>double</code>, the other shall be converted to <code>double</code>.</p>\n<p id=\"so_24067499_24067599_4\">\u2014 <strong>Otherwise, if either operand is <code>float</code>, the other shall be converted to <code>float</code>.</strong></p>\n<p id=\"so_24067499_24067599_5\">\u2014 Otherwise, the integral promotions (4.5) shall be performed on both operands. Then the following\n  rules shall be applied to the promoted operands:</p>\n<blockquote>\n<p id=\"so_24067499_24067599_11\">\u2014 If both operands have the same type, no further conversion is needed.</p>\n<p id=\"so_24067499_24067599_12\">\u2014 Otherwise, if both operands have signed integer types or both have unsigned integer types, the\n    operand with the type of lesser integer conversion rank shall be converted to the type of the\n    operand with greater rank.</p>\n<p id=\"so_24067499_24067599_13\">\u2014 Otherwise, if the operand that has unsigned integer type has rank greater than or equal to the\n    rank of the type of the other operand, the operand with signed integer type shall be converted to\n    the type of the operand with unsigned integer type.</p>\n<p id=\"so_24067499_24067599_14\">\u2014 Otherwise, if the type of the operand with signed integer type can represent all of the values of\n    the type of the operand with unsigned integer type, the operand with unsigned integer type shall\n    be converted to the type of the operand with signed integer type.</p>\n<p id=\"so_24067499_24067599_15\">\u2014 Otherwise, both operands shall be converted to the unsigned integer type corresponding to the\n    type of the operand with signed integer type.</p>\n</blockquote>\n</blockquote>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "24067599", "Score": "12", "CreationDate": "2014-06-05T18:29:28.700", "LastActivityDate": "2014-06-05T18:29:28.700"}, "bq_ids": {"n4140": {"so_24067499_24067599_9": {"section_id": 5943, "quality": 1.0, "length": 25}, "so_24067499_24067599_10": {"section_id": 5943, "quality": 1.0, "length": 13}, "so_24067499_24067599_4": {"section_id": 5943, "quality": 1.0, "length": 7}, "so_24067499_24067599_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_24067499_24067599_5": {"section_id": 5943, "quality": 1.0, "length": 12}, "so_24067499_24067599_14": {"section_id": 5943, "quality": 1.0, "length": 25}, "so_24067499_24067599_15": {"section_id": 5943, "quality": 1.0, "length": 13}, "so_24067499_24067599_6": {"section_id": 5943, "quality": 1.0, "length": 8}, "so_24067499_24067599_1": {"section_id": 5943, "quality": 1.0, "length": 15}, "so_24067499_24067599_12": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_24067499_24067599_11": {"section_id": 5943, "quality": 1.0, "length": 8}, "so_24067499_24067599_7": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_24067499_24067599_3": {"section_id": 5943, "quality": 1.0, "length": 7}, "so_24067499_24067599_13": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_24067499_24067599_8": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_24067499_24067599_2": {"section_id": 5943, "quality": 1.0, "length": 9}}, "n3337": {"so_24067499_24067599_9": {"section_id": 5714, "quality": 1.0, "length": 25}, "so_24067499_24067599_10": {"section_id": 5714, "quality": 1.0, "length": 13}, "so_24067499_24067599_4": {"section_id": 5714, "quality": 1.0, "length": 7}, "so_24067499_24067599_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_24067499_24067599_5": {"section_id": 5714, "quality": 1.0, "length": 12}, "so_24067499_24067599_14": {"section_id": 5714, "quality": 1.0, "length": 25}, "so_24067499_24067599_15": {"section_id": 5714, "quality": 1.0, "length": 13}, "so_24067499_24067599_6": {"section_id": 5714, "quality": 1.0, "length": 8}, "so_24067499_24067599_1": {"section_id": 5714, "quality": 1.0, "length": 15}, "so_24067499_24067599_12": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_24067499_24067599_11": {"section_id": 5714, "quality": 1.0, "length": 8}, "so_24067499_24067599_7": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_24067499_24067599_3": {"section_id": 5714, "quality": 1.0, "length": 7}, "so_24067499_24067599_13": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_24067499_24067599_8": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_24067499_24067599_2": {"section_id": 5714, "quality": 1.0, "length": 9}}, "n4659": {"so_24067499_24067599_9": {"section_id": 7428, "quality": 1.0, "length": 25}, "so_24067499_24067599_10": {"section_id": 7428, "quality": 1.0, "length": 13}, "so_24067499_24067599_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}, "so_24067499_24067599_5": {"section_id": 7428, "quality": 1.0, "length": 12}, "so_24067499_24067599_14": {"section_id": 7428, "quality": 1.0, "length": 25}, "so_24067499_24067599_15": {"section_id": 7428, "quality": 1.0, "length": 13}, "so_24067499_24067599_6": {"section_id": 7428, "quality": 1.0, "length": 8}, "so_24067499_24067599_1": {"section_id": 7428, "quality": 1.0, "length": 15}, "so_24067499_24067599_12": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_24067499_24067599_11": {"section_id": 7428, "quality": 1.0, "length": 8}, "so_24067499_24067599_7": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_24067499_24067599_3": {"section_id": 7428, "quality": 1.0, "length": 7}, "so_24067499_24067599_13": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_24067499_24067599_2": {"section_id": 7428, "quality": 1.0, "length": 9}, "so_24067499_24067599_8": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_24067499_24067599_4": {"section_id": 7428, "quality": 1.0, "length": 7}}}, "24067499": {"CommentCount": "12", "ViewCount": "1974", "CreationDate": "2014-06-05T18:25:54.697", "LastActivityDate": "2016-11-24T07:05:17.633", "Title": "checking for equality between an int and float in C", "PostTypeId": "1", "Id": "24067499", "Score": "2", "Body": "<p>I came across this piece of code : </p>\n<pre><code>int x=3;\nfloat y=3.0;\nif(x==y)\n  printf(\"x and y are equal\");\nelse\n  printf(\"x and y are not equal\");\n</code></pre>\n<p>Why does this code print \"x and y are equal\"?? \nHere if y=3.1(say), then the code prints \"x and y are not equal\".\nSomeone please explain how is this happening.</p>\n", "Tags": "<c++><c><floating-point><int><equality>", "OwnerUserId": "3712468", "AnswerCount": "3"}, "24067596": {"ParentId": "24067499", "CommentCount": "5", "Body": "<p>When you try to compare an int with a float, the int gets converted to float first.</p>\n<p>So <code>3 == 3.0f</code> actually tests <code>float(3) == 3.0f</code>, which is true.</p>\n<p>On the other hand, <code>3 == 3.1f</code> tests <code>float(3) == 3.1f</code>, which is false.</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "24067596", "Score": "1", "CreationDate": "2014-06-05T18:29:25.567", "LastActivityDate": "2014-06-05T18:29:25.567"}});