post_cb({"4371294": {"ParentId": "4349778", "CommentCount": "1", "Body": "<p>I believe it is implementation defined and that you provided the relevant quotes.</p>\n<p>For the record, this is what <a href=\"http://www.amazon.com/gp/search?index=books&amp;linkCode=qs&amp;keywords=0201183951\" rel=\"noreferrer\">Standard C++ IOStreams and locales</a>, not exactly a recent book I have to admit, has to say on the subject in a section titled \"<strong>The almost semantic free function - <code>setbuf()</code></strong>\" :</p>\n<blockquote>\n<p id=\"so_4349778_4371294_0\">The virtual member function <code>setbuf()</code>\n  is a rather peculiar stream buffer\n  member. <strong>Its semantics are basically\n  undefined</strong>. For string stream buffers,\n  the semantics of <code>setbuf()</code> are\n  implementation-defined, except that\n  <code>setbuf(0, 0)</code> are defined: if\n  <code>setbuf(0, 0)</code> is called on a stream\n  before and I/O has occured on that\n  stream, the stream becomes unbuffered,\n  meaning that characters are directly\n  transported to and from the file\n  system. <strong>Otherwise, the results are\n  implementation-defined.</strong></p>\n<p id=\"so_4349778_4371294_1\">However, the specifications of\n  <code>setbuf()</code> for <code>basic_filebuf</code> and\n  <code>basic_stringbuf</code> hardly impose any\n  requirements on the semantics of\n  <code>setbuf()</code> in other stream buffer\n  types. At best, the general semantics\n  can be defined as device and, in the\n  case of user-defined stream buffer\n  types, implementation-specific.</p>\n<p id=\"so_4349778_4371294_2\">The lack of any requirements frees you\n  to redefine <code>setbuf()</code> for just about\n  any purpose and in any way that fits\n  into the predefined interface of\n  <code>setbuf()</code>.</p>\n</blockquote>\n", "OwnerUserId": "451980", "PostTypeId": "2", "Id": "4371294", "Score": "7", "CreationDate": "2010-12-06T21:50:22.633", "LastActivityDate": "2010-12-06T21:50:22.633"}, "bq_ids": {"n4140": {"so_4349778_4350012_1": {"section_id": 2359, "quality": 0.9, "length": 18}, "so_4349778_4350012_2": {"section_id": 2434, "quality": 1.0, "length": 16}, "so_4349778_4349778_0": {"section_id": 2130, "quality": 0.7857142857142857, "length": 11}, "so_4349778_4350012_0": {"section_id": 2130, "quality": 0.7333333333333333, "length": 11}, "so_4349778_4349778_3": {"section_id": 2444, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_4349778_4350012_1": {"section_id": 2344, "quality": 0.9, "length": 18}, "so_4349778_4350012_2": {"section_id": 2419, "quality": 1.0, "length": 16}, "so_4349778_4349778_0": {"section_id": 2118, "quality": 0.7857142857142857, "length": 11}, "so_4349778_4350012_0": {"section_id": 2118, "quality": 0.7333333333333333, "length": 11}, "so_4349778_4349778_3": {"section_id": 2429, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_4349778_4350012_2": {"section_id": 2710, "quality": 1.0, "length": 16}, "so_4349778_4350012_1": {"section_id": 2634, "quality": 0.9, "length": 18}, "so_4349778_4349778_0": {"section_id": 2403, "quality": 0.7857142857142857, "length": 11}, "so_4349778_4350012_0": {"section_id": 2403, "quality": 0.7333333333333333, "length": 11}, "so_4349778_4349778_3": {"section_id": 2720, "quality": 0.6666666666666666, "length": 6}}}, "4350012": {"ParentId": "4349778", "PostTypeId": "2", "CommentCount": "4", "Body": "<h3>OK. Retract.</h3>\n<p>After spending the last couple of days going through the documentation and the the proposals that have been made it now seems clear that this may not work (as it is implementation defined).</p>\n<p>As you note in your description above:</p>\n<blockquote>\n<p id=\"so_4349778_4350012_0\">27.5.2.4.2: 1 Effects: Influences stream buffering in a way that is defined separately for each class derived from basic_streambuf in this Clause (27.8.1.4, 27.9.1.5).</p>\n</blockquote>\n<p>The effect of setbuf() is really defined by its interaction with 27.8.1.4 underflow();</p>\n<blockquote>\n<p id=\"so_4349778_4350012_1\">Returns: If the input sequence has a read position available, returns traits::to_int_type(*gptr()). Otherwise, returns traits::eof(). <strong>Any character in the underlying buffer which has been initialized is considered to be part of the input sequence</strong>.</p>\n</blockquote>\n<p>Also for getting more characters from the stream you need to check 27.9.1.5 showmanyc()</p>\n<blockquote>\n<p id=\"so_4349778_4350012_2\">An implementation might well provide an overriding definition for this function signature if it can determine that more characters can be read from the input sequence.</p>\n</blockquote>\n<p>Which for the stringstream buffer means it will not get anything as the buffer already holds the whole stream.</p>\n<p>So though it is implementation defined how it does it.<br>\nIt is still well defined how it does it.</br></p>\n", "OwnerUserId": "14065", "LastEditorUserId": "14065", "LastEditDate": "2010-12-09T20:54:37.687", "Id": "4350012", "Score": "4", "CreationDate": "2010-12-03T21:26:23.330", "LastActivityDate": "2010-12-09T20:54:37.687"}, "4349778": {"CommentCount": "0", "AcceptedAnswerId": "4371294", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-12-03T20:53:39.950", "LastActivityDate": "2010-12-09T20:54:37.687", "LastEditDate": "2017-05-23T12:33:18.210", "ViewCount": "1182", "FavoriteCount": "2", "Title": "The effect of `basic_streambuf::setbuf`", "Id": "4349778", "Score": "15", "Body": "<p>My problem is as follows: <a href=\"https://stackoverflow.com/users/14065/martin-york\">Martin York</a> claims in <a href=\"https://stackoverflow.com/questions/132358/how-to-read-file-content-into-istringstream/138645#138645\">this</a>, <a href=\"https://stackoverflow.com/questions/2079912/simpler-way-to-create-a-c-memorystream-from-char-size-t-without-copying-th/2080048#2080048\">this</a>, and <a href=\"https://stackoverflow.com/questions/4346240/how-can-i-read-from-memory-just-like-from-a-file-using-iostream/4346309#4346309\">this</a> answers that one can make a <code>stringstream</code> read from some piece of memory by using <code>basic_stringbuf::pubsetbuf</code> like this:</p>\n<pre><code>char buffer[] = \"123\";\nistringstream in;\nin.rdbuf()-&gt;pubsetbuf(buffer, sizeof(buffer)); // calls basic_stringbuf::setbuf\nint num;\nin &gt;&gt; num; // reads 123\n</code></pre>\n<p>Unfortunately I dug through the whole standard and couldn't see where it's guaranteed to work. What I see is that's just implementation-defined. In fact on Microsoft's implementation (maybe on others too) this call has no effect.</p>\n<p>Here are related quotes I found in the last C++0x draft. For the <code>basic_streambuf::setbuf</code> [streambuf.virt.buffer]:</p>\n<blockquote>\n<p id=\"so_4349778_4349778_0\">1 <em>Effects:</em> Influences stream buffering in a way that is defined separately for each class derived from basic_streambuf in this Clause (27.8.1.4, 27.9.1.5).</p>\n<p id=\"so_4349778_4349778_1\">2 <em>Default behavior:</em> <strong>Does nothing</strong>. Returns this.</p>\n</blockquote>\n<p>However in the derived classes it seems to leave the behavior implementation-defined. For <code>basic_stringbuf::setbuf</code> it says [stringbuf.virtuals]:</p>\n<blockquote>\n<p id=\"so_4349778_4349778_2\">1 <em>Effects:</em> <strong>implementation-defined</strong>, except that setbuf(0,0) has no effect.</p>\n</blockquote>\n<p>For <code>basic_filebuf::setbuf</code> it says [filebuf.virtuals]:</p>\n<blockquote>\n<p id=\"so_4349778_4349778_3\">12 <em>Effects:</em> If setbuf(0,0) [...], the stream becomes unbuffered. Otherwise the results are <strong>implementation-defined</strong>. \u201cUnbuffered\u201d [...]</p>\n</blockquote>\n<p>And that's it. So as I see it, a valid implementation can ignore these calls completely (for non-null parameters).</p>\n<p>Am I wrong? What is the correct interpretation of the standard? Do C++98/03/0x have the same guarantees? Do you have more statistics on which implementations the above code works and on which it does not? How <code>basic_streambuf::setbuf</code> is intended to be used?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "277176", "AnswerCount": "2"}});