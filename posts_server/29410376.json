post_cb({"29410376": {"AcceptedAnswerId": "29410712", "OwnerUserId": "1048099", "LastActivityDate": "2015-04-02T12:06:17.977", "CreationDate": "2015-04-02T10:13:27.107", "Score": "2", "LastEditDate": "2015-04-02T10:41:52.743", "CommentCount": "5", "Title": "C++ rvalue reference behaviour (specific example)", "AnswerCount": "2", "PostTypeId": "1", "Tags": "<c++><c++11><rvalue-reference>", "Body": "<p>I'm currently trying to get libc++ to compile and run with MSVC.  In doing so I encountered a nasty bug (at least what I think is a bug) which has taken me a while to pin down.  I have the following repro code:</p>\n<pre><code>int globalInt = 666;\n\nclass mini_move_iterator\n{\npublic:\n\n    mini_move_iterator(int* i) : __i(i){}\n\n    int&amp;&amp; operator*() const\n    {\n        return static_cast&lt;int&amp;&amp;&gt;(*__i);\n    }\n\n    int* __i;\n};\n\nvoid foo(int&amp;&amp; rval)\n{\n    // Smash stack\n    char stackUser[1000];\n    for (int i = 0; i &lt; 1000; ++i)\n        stackUser[i] = 0xff;\n\n    rval += 1;\n}\n\nint main()\n{\n    mini_move_iterator mmi(&amp;globalInt);\n    foo(*mmi);\n    return 0;\n}\n</code></pre>\n<p>I have a few questions:</p>\n<p>1) Is this legal, i.e. have I avoided straying into the realms of undefined behaviour (it is certainly syntactically legal)?</p>\n<p>2) What is the expected value of the global variable <em>globalInt</em> after foo returns (undefined may be an acceptable answer)?</p>\n<p><strong>EDIT:</strong></p>\n<p>I should have made clear that this isn't working in VS with MSVC 12.  In <em>foo</em> the variable <em>rval</em> is pointing to a temporary on the stack and thus the global variable is never incremented.  </p>\n<p>The temporary is created in int&amp;&amp; operator*() const.  If I replace:</p>\n<pre><code>return static_cast&lt;int&amp;&amp;&gt;(*__i);\n</code></pre>\n<p>with</p>\n<pre><code>return std::move(*i);\n</code></pre>\n<p>then all is well.  Using a C-cast also causes the temporary to be created.</p>\n", "Id": "29410376", "ViewCount": "174", "LastEditorUserId": "1048099"}, "29410822": {"PostTypeId": "2", "ParentId": "29410376", "Body": "<p>In <em>The C++ programming language (4th edition)</em>, Stroustrup states (\u00a77.7.2, pg. 195):</p>\n<blockquote>\n<p id=\"so_29410376_29410822_0\">[...] the standard library provides a <code>move()</code> function: <code>move(x)</code> means <code>static_cast&lt;X&amp;&amp;&gt;(x)</code> where <code>X</code> is the type of <code>x</code>.</p>\n</blockquote>\n<p>More precisely, from the C++11 standard (iso.20.2.3):</p>\n<blockquote>\n<p id=\"so_29410376_29410822_1\"><code>template &lt;class T&gt; typename remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; t) noexcept;</code>\n<em>Returns</em>: <code>static_cast&lt;typename remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t)</code>.</p>\n</blockquote>\n<p>If your type <code>T</code> is an int, <code>std::move()</code> and <code>static_cast&lt;int&amp;&amp;&gt;()</code> are exactly the same thing.</p>\n<p>So, if MSVC gives different results when switching from one to another, it's clearly a bug.</p>\n", "CreationDate": "2015-04-02T10:36:12.203", "Score": "1", "LastEditDate": "2015-04-02T12:06:17.977", "CommentCount": "2", "Id": "29410822", "OwnerUserId": "2508150", "LastEditorUserId": "2508150", "LastActivityDate": "2015-04-02T12:06:17.977"}, "29410712": {"PostTypeId": "2", "ParentId": "29410376", "Body": "<blockquote>\n<p id=\"so_29410376_29410712_0\">1) Is this legal, i.e. have I avoided straying into the realms of\n  undefined behaviour (it is certainly syntactically legal)?</p>\n</blockquote>\n<p>You are so, so close. <code>__i</code> is a reserved identifier, and the conversion of <code>0xff</code> to <code>char</code> is likely implementation-defined. Other than that, this code is valid and the behavior is well-defined.</p>\n<blockquote>\n<p id=\"so_29410376_29410712_1\">2) What is the expected value of the global variable <code>globalInt</code> after\n  foo returns (undefined may be an acceptable answer)?</p>\n</blockquote>\n<p><code>667</code>. The reference returned by <code>static_cast&lt;int&amp;&amp;&gt;(*__i)</code> binds directly to <code>*__i</code> - i.e., <code>globalInt</code>. No temporary should be created. The applicable rule, in [expr.static.cast]/p3, has remained substantially the same since C++11, so you are definitely seeing a compiler bug here.</p>\n<p>It looks like this bug has been fixed in the next version of VC++, based on testing on <a href=\"http://webcompiler.cloudapp.net/\">http://webcompiler.cloudapp.net/</a> .</p>\n", "CreationDate": "2015-04-02T10:30:53.643", "Score": "8", "CommentCount": "3", "Id": "29410712", "OwnerUserId": "2756719", "LastActivityDate": "2015-04-02T10:30:53.643"}, "bq_ids": {"n3337": {"so_29410376_29410822_1": {"quality": 0.7777777777777778, "length": 7, "section_id": 3806}}}});