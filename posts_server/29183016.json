post_cb({"29183189": {"Id": "29183189", "PostTypeId": "2", "Body": "<p>Macros cannot be recursive: if a macro directly on indirectly expands to include its own name, that second occurrence will not be expanded any more. So in your case, the following expansions happen:</p>\n<p>Input:</p>\n<pre><code>cout &lt;&lt; TRUE &lt;&lt; endl;\n</code></pre>\n<p><code>TRUE</code> is a macro, it's expanded:</p>\n<pre><code>cout &lt;&lt; FALSE &lt;&lt; endl;\n</code></pre>\n<p>Expanded text re-scanned for macros, <code>FALSE</code> is found and expanded:</p>\n<pre><code>cout &lt;&lt; TRUE &lt;&lt; endl;\n</code></pre>\n<p>Expanded text re-scanned for macros, <code>TRUE</code> is found; but it was already expanded once, so nothing happens and it stays as <code>TRUE</code> for subsequent compilation (which then finds the global variable).</p>\n", "LastActivityDate": "2015-03-21T13:20:18.923", "CommentCount": "0", "CreationDate": "2015-03-21T13:20:18.923", "ParentId": "29183016", "Score": "7", "OwnerUserId": "1782465"}, "29183016": {"ViewCount": "442", "Body": "<p>Consider the following C++ code:</p>\n<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring TRUE = \"true\";\nstring FALSE = \"false\";\n\n#define TRUE FALSE\n#define FALSE TRUE\n\nint main()\n{\n    cout &lt;&lt; TRUE &lt;&lt; endl;\n    cout &lt;&lt; FALSE &lt;&lt; endl;\n}\n</code></pre>\n<p>Compiled using GCC 4.9.2, the above code outputs:</p>\n<pre><code>true\nfalse\n</code></pre>\n<p>What is the logic behind the produced output? I expected \"false\\ntrue\\n\" or even \"false\\nfalse\\n\", but I cannot find the reasoning behind this actual output.</p>\n<p>How does the pair of #defines work in this case?</p>\n", "AcceptedAnswerId": "29183186", "Title": "Strange result from mutual reference in C++ macro", "CreationDate": "2015-03-21T13:01:07.707", "Id": "29183016", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-03-30T11:31:04.003", "LastEditorUserId": "1257035", "LastActivityDate": "2015-03-30T11:31:04.003", "Score": "14", "OwnerUserId": "173152", "Tags": "<c++><c-preprocessor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29183016_29183186_0": {"length": 48, "quality": 0.5581395348837209, "section_id": 531}}, "n3337": {"so_29183016_29183186_0": {"length": 48, "quality": 0.5581395348837209, "section_id": 522}}, "n4659": {"so_29183016_29183186_0": {"length": 48, "quality": 0.5581395348837209, "section_id": 552}}}, "29183186": {"Id": "29183186", "PostTypeId": "2", "Body": "<p>This is described in [cpp.rescan]/1-2:</p>\n<blockquote id=\"so_29183016_29183186_0\">\n<h3>16.3.4 Rescanning and further replacement</h3>\n<ol>\n<li>After all parameters in the replacement list have been substituted and <code>#</code> and <code>##</code> processing has taken place, all placemarker preprocessing tokens are removed. Then the resulting preprocessing token sequence is rescanned, along with all subsequent preprocessing tokens of the source file, for more macro names to replace.</li>\n<li>If the name of the macro being replaced is found during this scan of the replacement list (not including the rest of the source file's preprocessing tokens), it is not replaced. <strong>Furthermore, if any nested replacements encounter the name of the macro being replaced, it is not replaced.</strong> These nonreplaced macro name preprocessing tokens are no longer available for further replacement even if they are later (re)examined in contexts in which that macro name preprocessing token would otherwise have been replaced.</li>\n</ol>\n</blockquote>\n<p>(Emphasis mine)</p>\n<p>So: When <code>TRUE</code> is encountered in the code, it is replaced with <code>FALSE</code>. The sequence is rescanned, <code>FALSE</code> is replaced with <code>TRUE</code>. The sequence is rescanned, <code>TRUE</code> is found but no longer eligible for replacement, and so it stays. The same applies for the expansion of <code>FALSE</code> (with swapped identifiers).</p>\n", "LastActivityDate": "2015-03-21T13:19:52.270", "CommentCount": "1", "CreationDate": "2015-03-21T13:19:52.270", "ParentId": "29183016", "Score": "17", "OwnerUserId": "4301306"}});