post_cb({"37051384": {"Id": "37051384", "PostTypeId": "2", "Body": "<p>From <em>5.2.11 Const cast [expr.const.cast]</em>: </p>\n<blockquote>\n<p id=\"so_37051273_37051384_0\">Note: Depending on the type of the object, a write operation through the pointer, lvalue or pointer\n  to data member resulting from a <code>const_cast</code> that casts away a const-qualifier may produce undefined\n  behavior (7.1.6.1). \u2014 end note ]</p>\n</blockquote>\n<p>You're performing undefined behavior, so you're quite (un)lucky that your computer didn't implode. :)</p>\n", "LastEditorUserId": "2883245", "LastActivityDate": "2016-05-05T13:11:57.360", "Score": "8", "CreationDate": "2016-05-05T13:04:02.793", "ParentId": "37051273", "CommentCount": "12", "LastEditDate": "2016-05-05T13:11:57.360", "OwnerUserId": "2883245"}, "37051408": {"Id": "37051408", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37051273_37051408_0\">Is this something to do with <code>const</code> or <code>const_cast</code>?</p>\n</blockquote>\n<p>Yes.</p>\n<p>Even with <code>const_cast</code>, it's still undefined behavior to modify an object that was originally <code>const</code>. Or, in other words, it's illegal to use <code>const_cast</code> to write to a <code>const</code> object.</p>\n", "LastEditorUserId": "1009479", "LastActivityDate": "2016-05-05T13:46:31.220", "Score": "5", "CreationDate": "2016-05-05T13:05:11.353", "ParentId": "37051273", "CommentCount": "2", "LastEditDate": "2016-05-05T13:46:31.220", "OwnerUserId": "1009479"}, "37051273": {"ViewCount": "86", "Body": "<p>I could not understand why in below code snippet reference and its associated variable are giving different results.</p>\n<pre><code>const int x = 10;\nconst int &amp;ptr = x; \nint&amp; y = const_cast&lt;int&amp;&gt;(ptr);\ny = 19;\nstd::cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; \" ptr=\" &lt;&lt; ptr &lt;&lt; \" y=\" &lt;&lt; y &lt;&lt; std::endl;\n</code></pre>\n<p>Output:</p>\n<pre><code>x=10 ptr=19 y=19\n</code></pre>\n<p>As per my understanding references are just alias for variable so why <code>ptr</code> is <code>19</code> and <code>x</code> is <code>10</code>? Is this something to do with <code>const</code> or <code>const_cast</code> ?</p>\n", "AcceptedAnswerId": "37051384", "Title": "Can reference and the variable it is pointing to have different values?", "CreationDate": "2016-05-05T12:58:45.780", "LastActivityDate": "2016-05-05T13:46:31.220", "CommentCount": "2", "LastEditDate": "2016-05-05T13:01:22.647", "PostTypeId": "1", "Tags": "<c++><casting><reference><const>", "Id": "37051273", "AnswerCount": "2", "Score": "3", "OwnerUserId": "3600304", "ClosedDate": "2016-05-05T13:17:23.037", "LastEditorUserId": "3552770"}, "bq_ids": {"n4140": {"so_37051273_37051384_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 6057}}, "n3337": {"so_37051273_37051384_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5825}}, "n4659": {"so_37051273_37051384_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7555}}}});