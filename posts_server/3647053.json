post_cb({"3647445": {"ParentId": "3647053", "CommentCount": "1", "Body": "<p>Another benefit of in-lining (note that actual inlining is sometimes orthogonal to use of the \"inline\" directive) occurs when a function uses reference parameters.  Passing two variables to a non-inline function to add its first operand to the second would require pushing the value of the first operand and the address of the second and then calling a function which would have to pop the first operand and address of the second, and then add the former value indirectly to the popped address.  If the function were expanded inline, the compiler could simply add one variable to the other directly.</p>\n", "OwnerUserId": "363751", "PostTypeId": "2", "Id": "3647445", "Score": "1", "CreationDate": "2010-09-05T19:30:10.230", "LastActivityDate": "2010-09-05T19:30:10.230"}, "3647089": {"ParentId": "3647053", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_3647053_3647089_0\">Is inline just a recommendation for the compiler?</p>\n</blockquote>\n<p>Yes. But the linker needs it if there are multiple definitions of the function (see below)</p>\n<blockquote>\n<p id=\"so_3647053_3647089_1\">Should it be explicitly stated when you have a small function (I guess 1-4 instructions?)</p>\n</blockquote>\n<p>On functions that are defined in header files it is (usually) needed. It does not hurt to add it to small functions (but I don't bother). Note class members defined within the class declaration are automatically declared inline.</p>\n<blockquote>\n<p id=\"so_3647053_3647089_2\">What other benefits are there with writing inline?</p>\n</blockquote>\n<p>It will stop linker errors if used correctly.</p>\n<blockquote>\n<p id=\"so_3647053_3647089_3\">is it needed to state inline in order to reduce the executable file size, even though the compiler (according to wikipedia [I know, bad reference]) should find such functions itself?</p>\n</blockquote>\n<p>No. The compiler makes a cost/benefit comparison of inlining each function call and makes an appropriate choice. Thus calls to a function may be inlined in curtain situations and not inlined in other (depending on how the compilers algorithm works).</p>\n<p>Speed/Space are two competing forces and it depends what the compiler is optimizing for which will determine weather functions are inlined and weather the executable will grow or shrink.</p>\n<p>Also note if excessively aggressive inlining is used causing the program to expand too much, then locality of reference is lost and this can actually slow the program down (as more executable pages need to be brought into memory).</p>\n<p>Multiple definition:</p>\n<p>File: head.h</p>\n<pre><code>// Without inline the linker will choke.\n/*inline*/       int  add(int x, int y) { return x + y; }\nextern void test()\n</code></pre>\n<p>File: main.cpp</p>\n<pre><code>#include \"head.h\"\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; add(2,3) &lt;&lt; std::endl;\n    test();\n}\n</code></pre>\n<p>File: test.cpp</p>\n<pre><code>#include \"head.h\"\n#include &lt;iostream&gt;\n\nvoid test()\n{\n    std::cout &lt;&lt; add(2,3) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Here we have two definitions of add(). One in main.o and one in test.o</p>\n", "OwnerUserId": "14065", "LastEditorUserId": "14065", "LastEditDate": "2010-09-05T18:04:46.470", "Id": "3647089", "Score": "3", "CreationDate": "2010-09-05T17:51:55.410", "LastActivityDate": "2010-09-05T18:04:46.470"}, "3647085": {"ParentId": "3647053", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Actually inlining leads to bigger executables, not smaller ones.\nIt's to reduce one level of indirection, by pasting the function code.</p>\n<p><a href=\"http://www.parashift.com/c++-faq-lite/inline-functions.html\" rel=\"nofollow noreferrer\">http://www.parashift.com/c++-faq-lite/inline-functions.html</a></p>\n", "OwnerUserId": "437866", "LastEditorUserId": "437866", "LastEditDate": "2010-09-05T17:59:11.383", "Id": "3647085", "Score": "0", "CreationDate": "2010-09-05T17:51:18.377", "LastActivityDate": "2010-09-05T17:59:11.383"}, "3647105": {"ParentId": "3647053", "CommentCount": "4", "Body": "<p>With regards to this:</p>\n<blockquote>\n<p id=\"so_3647053_3647105_0\">And \"inline\" allows you to define the function multiple times in the program.</p>\n</blockquote>\n<p>I can think of one instance where this is useful: Making copy protection code harder to crack. If you have a program that takes user information and verifies it against a registration key, inlining the function that does the verification will make it harder for a cracker to find all duplicates of that function.</p>\n<p>As to other points:</p>\n<ol>\n<li><code>inline</code> is just a recommendation to compiler, but there are <code>#pragma</code> directives that can force inlining of any function.</li>\n<li>Since it's just a recommendation, it's probably safe to explicitly ask for it and let the compiler override your recommendation. But it's probably better to omit it altogether and let the compiler decide.</li>\n<li>The obfuscation mentioned above is one possible benefit of inlining.</li>\n<li>As others have mentioned, <code>inline</code> would actually increase the size of the compiled code.</li>\n</ol>\n", "OwnerUserId": "407664", "PostTypeId": "2", "Id": "3647105", "Score": "1", "CreationDate": "2010-09-05T17:57:13.870", "LastActivityDate": "2010-09-05T17:57:13.870"}, "3647133": {"ParentId": "3647053", "CommentCount": "0", "Body": "<ol>\n<li><p>Yes, it will readily ignore it when it thinks the function is too large or uses incompatible features (exception handling perhaps).  Furthermore, there is usually a compiler setting to let it automatically inline functions that it deems worthy (/Ob2 in MSVC).</p></li>\n<li><p>It should be explicitly stated if you put the definition of the function in the header file.  Which is usually necessary to ensure that multiple translation units can take advantage of it.  And to avoid multiple definition errors.  Furthermore, <em>inline</em> functions are put in the COMDAT section.  Which tells the linker that it can pick just one of the multiple definitions.  Equivalent to __declspec(selectany) in MSVC.</p></li>\n<li><p></p></li>\n<li><p>Inlined functions don't usually make the executable smaller.  Since the call opcode is typically smaller than the inlined machined code, except for very small property accessor style functions.  It depends but bigger is not an uncommon outcome.</p></li>\n</ol>\n", "OwnerUserId": "17034", "PostTypeId": "2", "Id": "3647133", "Score": "1", "CreationDate": "2010-09-05T18:04:15.990", "LastActivityDate": "2010-09-05T18:04:15.990"}, "3647053": {"CommentCount": "6", "AcceptedAnswerId": "3647130", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-09-05T17:44:15.600", "LastActivityDate": "2010-09-05T19:30:10.230", "LastEditDate": "2017-05-23T12:30:39.393", "ViewCount": "1291", "FavoriteCount": "2", "Title": "what is/are the purpose(s) of inline?", "Id": "3647053", "Score": "15", "Body": "<p>I had a <a href=\"https://stackoverflow.com/questions/3645896/can-i-make-alias-to-singletone-function/3645900#3645900\">discussion</a> with <a href=\"https://stackoverflow.com/users/34509/johannes-schaub-litb\">Johannes Schaub</a> regarding the keyword <code>inline</code>. \nThe code there was this:</p>\n<pre><code>namespace ... {\n    static void someFunction() {\n        MYCLASS::GetInstance()-&gt;someFunction();\n    }\n};\n</code></pre>\n<p>He stated that:</p>\n<blockquote>\n<p id=\"so_3647053_3647053_0\">Putting this as an inline function may\n  save code size in the executable</p>\n</blockquote>\n<p>But according to my findings <a href=\"http://en.wikipedia.org/wiki/Inline_function#Language_support\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx\" rel=\"nofollow noreferrer\">here</a> it wouldn't be needed, since:</p>\n<ul>\n<li><em>[Inline] only occurs if the compiler's cost/benefit analysis show it to be profitable</em></li>\n<li><em>Mainstream C++ compilers like Microsoft Visual C++ and GCC support an option that lets the compilers automatically inline any suitable function, even those not marked as inline functions.</em></li>\n</ul>\n<p>Johannes however states that there are other benefits of explicitly specifying it. Unfortunately I do not understand them. For instance, he stated that <em>And \"inline\" allows you to define the function multiple times in the program.</em>, which I am having a hard time understanding (and finding references to).</p>\n<p>So</p>\n<ol>\n<li>Is <code>inline</code> just a recommendation for the compiler?</li>\n<li>Should it be explicitly stated when you have a small function (I guess 1-4 instructions?)</li>\n<li>What other benefits are there with writing <code>inline</code>?</li>\n<li>is it needed to state <code>inline</code> in order to reduce the executable file size, even though the compiler (according to wikipedia [I know, bad reference]) should find such functions itself?</li>\n</ol>\n<p>Is there anything else I am missing?</p>\n", "Tags": "<c++><compiler-construction><inline>", "OwnerUserId": "238902", "AnswerCount": "9"}, "3647130": {"ParentId": "3647053", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_3647053_3647130_0\">Is inline just a recommendation for the compiler?</p>\n</blockquote>\n<p>Yes. </p>\n<blockquote>\n<p id=\"so_3647053_3647130_1\"><strong>7.1.2 Function specifiers</strong></p>\n<p id=\"so_3647053_3647130_2\"><strong>2</strong> A function declaration (8.3.5, 9.3, 11.4) with an inline specifier declares an inline function. The inline\n  specifier indicates to the implementation that inline substitution of the function body at the point of call\n  is to be preferred to the usual function call mechanism. An implementation is not required to perform this\n  inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules\n  for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n<p>For example from MSDN: </p>\n<blockquote>\n<p id=\"so_3647053_3647130_3\">The compiler treats the inline expansion options and keywords as suggestions. There is no guarantee that functions will be inlined. You cannot force the compiler to inline a particular function, even with the __forceinline keyword. When compiling with /clr, the compiler will not inline a function if there are security attributes applied to the function.</p>\n</blockquote>\n<p>Note though:</p>\n<blockquote>\n<p id=\"so_3647053_3647130_4\"><strong>3.2 One definition rule</strong></p>\n<p id=\"so_3647053_3647130_5\"><strong>3</strong> [...]An inline function shall be defined in every translation unit in which it is used.</p>\n<p id=\"so_3647053_3647130_6\"><strong>4</strong> An inline function shall be defined in every translation unit in which it is used and shall have exactly\n  the same definition in every case (3.2). [ Note: a call to the inline function may be encountered before its\n  definition appears in the translation unit. \u2014end note ] If the definition of a function appears in a translation\n  unit before its first declaration as inline, the program is ill-formed. <strong><em>If a function with external linkage is\n  declared inline in one translation unit, it shall be declared inline in all translation units in which it appears;\n  no diagnostic is required.</em></strong> An inline function with external linkage shall have the same address in all\n  translation units. A static local variable in an extern inline function always refers to the same object.\n  A string literal in the body of an extern inline function is the same object in different translation units.\n  [ Note: A string literal appearing in a default argument expression is not in the body of an inline function\n  merely because the expression is used in a function call from that inline function. \u2014end note ] A type\n  defined within the body of an extern inline function is the same type in every translation unit.</p>\n</blockquote>\n<p>[Note: Emphasis mine]</p>\n<p>A TU is basically a set of headers plus an implementation file (<code>.cpp</code>) which leads to an object file.</p>\n<blockquote>\n<p id=\"so_3647053_3647130_7\">Should it be explicitly stated when you have a small function (I\n  guess 1-4 instructions?)</p>\n</blockquote>\n<p>Absolutely. Why not help the compiler help you generate less code? Usually, if the prolog/epilog part incurs more cost than having it inline force the compiler to generate them? But you must, <em>absolutely must</em> go through this GOTW article before getting started with inlining: <a href=\"http://www.gotw.ca/gotw/033.htm\" rel=\"nofollow noreferrer\"><strong>GotW #33: Inline</strong></a></p>\n<blockquote>\n<p id=\"so_3647053_3647130_8\">What other benefits are there with writing inline?</p>\n</blockquote>\n<ul>\n<li><p><code>namespace</code>s can be <code>inline</code> too. Note that member functions defined in the class body itself are inline by default. So are implicitly generated special member functions. </p></li>\n<li><p>Function templates cannot be defined in an implementation file (see <a href=\"http://www.parashift.com/c++-faq-lite/templates.html#faq-35.12\" rel=\"nofollow noreferrer\">FAQ 35.12</a>) unless of course you provide a explicit instantiations (for all types for which the template is used -- generally a PITA IMO). See the DDJ article on <a href=\"http://www.drdobbs.com/184403420\" rel=\"nofollow noreferrer\"><strong>Moving Templates Out of Header Files</strong></a> (If you are feeling weird read on this other article on the <code>export</code> keyword which was dropped from the standard.)</p></li>\n</ul>\n<blockquote>\n<p id=\"so_3647053_3647130_9\">Is it needed to state inline in order to reduce the executable file\n  size, even though the compiler\n  (according to wikipedia [I know, bad\n  reference]) should find such functions\n  itself?</p>\n</blockquote>\n<p>Again, as I said, as a good programmer, you should, when you can, help the compiler. But <a href=\"http://www.parashift.com/c++-faq-lite/inline-functions.html#faq-9.3\" rel=\"nofollow noreferrer\">here's</a> what the C++ FAQ has to offer about <code>inline</code>. So be wary. Not all compilers do this sort of analysis so you should read the documentation on their optimization switches. E.g: GCC does something similar:</p>\n<blockquote>\n<p id=\"so_3647053_3647130_10\">You can also direct GCC to try to integrate all \u201csimple enough\u201d functions into their callers with the option -finline-functions. </p>\n</blockquote>\n<p>Most compilers allow you to override the compiler's cost/benefit ratio analysis to some extent. The <a href=\"http://msdn.microsoft.com/en-us/library/z8y1yy88%28VS.80%29.aspx\" rel=\"nofollow noreferrer\">MSDN</a> and <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Inline.html\" rel=\"nofollow noreferrer\">GCC</a> documentation is worth reading.</p>\n", "OwnerUserId": "66692", "LastEditorUserId": "66692", "LastEditDate": "2010-09-05T18:43:07.503", "Id": "3647130", "Score": "3", "CreationDate": "2010-09-05T18:03:15.163", "LastActivityDate": "2010-09-05T18:43:07.503"}, "3647078": {"ParentId": "3647053", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Actually, inline function may increase executable size, because inline function code is duplicated in every place where this function is called. With modern C++ compilers, inline mostly allows to programmer to believe, that he writes high-performance code. Compiler decides itself whether to make function inline or not. So, writing inline just allows us to feel better...</p>\n", "OwnerUserId": "279313", "LastEditorUserId": "279313", "LastEditDate": "2010-09-05T18:07:39.417", "Id": "3647078", "Score": "2", "CreationDate": "2010-09-05T17:50:30.547", "LastActivityDate": "2010-09-05T18:07:39.417"}, "3647234": {"ParentId": "3647053", "CommentCount": "0", "Body": "<p>To restate what I said in those little comment boxes. In particular, I was never talking about inlin-<em>ing</em>:</p>\n<pre><code>// foo.h:\nstatic void f() {\n  // code that can't be inlined\n}\n\n// TU1 calls f\n// TU2 calls f\n</code></pre>\n<p>Now, both TU1 and TU2 have their own copy of <code>f</code> - the code of <code>f</code> is in the executable two times. </p>\n<pre><code>// foo.h:\ninline void f() {\n  // code that can't be inlined\n}\n\n// TU1 calls f\n// TU2 calls f\n</code></pre>\n<p>Both TUs will emit specially marked versions of <code>f</code> that are effectively merged by the linker by discarding all but one of them. The code of <code>f</code> only exists one time in the executable. </p>\n<p><strong>Thus we have saved space in the executable</strong>.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "3647234", "Score": "6", "CreationDate": "2010-09-05T18:29:32.167", "LastActivityDate": "2010-09-05T18:29:32.167"}, "bq_ids": {"n4140": {"so_3647053_3647130_6": {"section_id": 5404, "quality": 0.9391304347826087, "length": 108}, "so_3647053_3647130_5": {"section_id": 5404, "quality": 1.0, "length": 6}, "so_3647053_3647130_2": {"section_id": 5402, "quality": 0.8888888888888888, "length": 40}}, "n3337": {"so_3647053_3647130_6": {"section_id": 5199, "quality": 0.9391304347826087, "length": 108}, "so_3647053_3647130_5": {"section_id": 5199, "quality": 1.0, "length": 6}, "so_3647053_3647130_2": {"section_id": 5197, "quality": 0.8888888888888888, "length": 40}}, "n4659": {"so_3647053_3647130_6": {"section_id": 6853, "quality": 0.6956521739130435, "length": 80}, "so_3647053_3647130_2": {"section_id": 6849, "quality": 0.8666666666666667, "length": 39}, "so_3647053_3647130_5": {"section_id": 6853, "quality": 1.0, "length": 6}}}, "3647086": {"ParentId": "3647053", "CommentCount": "6", "Body": "<ol>\n<li>Yes. It's nothing more.</li>\n<li>No.</li>\n<li>You hint the compiler that it's a function that gets called <em>a lot</em>, where the jump-to-the-function part takes a lot of the execution time.\nThe compiler might decide to put the function code right where it gets called instead where normal functions are. However, if a function is inlined in x places, you need x times the space of a normal function.</li>\n<li>Always trust your compiler to be much smarter than yourself on the subject of <strike>premature</strike> micro-optimization.</li>\n</ol>\n", "OwnerUserId": "24587", "PostTypeId": "2", "Id": "3647086", "Score": "2", "CreationDate": "2010-09-05T17:51:20.310", "LastActivityDate": "2010-09-05T17:51:20.310"}});