post_cb({"12939997": {"CreationDate": "2012-10-17T17:31:18.813", "CommentCount": "0", "Body": "<p>Even though aC++ compiler can't <em>always</em> detect when a function can't execute a return statement, it <em>usually</em> can.</p>\n<p>On the bright side, at least g++ makes this easy to detect with the command-line compiler option \"-Wreturn-type\".  You just need to remember to enable it.  (It also gets enabled if you use \"-Wall\".)</p>\n", "Id": "12939997", "OwnerUserId": "387887", "LastEditDate": "2012-10-17T17:38:47.203", "ParentId": "3402178", "LastActivityDate": "2012-10-17T17:38:47.203", "PostTypeId": "2", "Score": "2", "LastEditorUserId": "387887"}, "3402178": {"CreationDate": "2010-08-04T02:30:22.070", "ViewCount": "4354", "FavoriteCount": "4", "Id": "3402178", "AcceptedAnswerId": "3402194", "Score": "19", "Title": "Omitting return statement in C++", "CommentCount": "2", "Body": "<p>I just had some weird behavior from a version of g++ for Windows that I got with Strawberry Perl. It allowed me to omit a return statement.</p>\n<p>I have a member function that returns a structure consisting of two pointers, called a <code>boundTag</code>:</p>\n<pre><code>struct boundTag Box::getBound(int side) {\n    struct boundTag retBoundTag;\n    retBoundTag.box = this;\n    switch (side)\n    {\n        // set retBoundTag.bound based on value of \"side\"\n    }\n}\n</code></pre>\n<p>This function gave me some bad output, and I discovered that it had no return statement. I had meant to return <code>retBoundTag</code> but forgot to actually write the return statement. Once I added <code>return retBoundTag;</code> everything was fine.</p>\n<p>But I had tested this function and gotten correct <code>boundTag</code> output from it. Even now, when I remove the return statement, g++ compiles it without warning. WTF? Does it guess to return <code>retBoundTag</code>?</p>\n", "Tags": "<c++><g++><strawberry-perl>", "LastActivityDate": "2012-10-17T17:38:47.203", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "410312"}, "3405364": {"CommentCount": "1", "Body": "<p>C and C++ don't require you to have a <code>return</code> statement.\nIt might not be necessary to have one, because the function enters an infinite loop, or because it throws an exception. </p>\n<p>Prasoon already quoted the relevant part of the standard:   </p>\n<p>[Section 6.6.3/2]</p>\n<blockquote>\n<p id=\"so_3402178_3405364_0\">A return statement with an expression can be used only in functions returning a value; the value of the expression is returned to the caller of the function. If required, the expression is implicitly converted to the return type of the function in which it appears. A return statement can involve the construction and copy of a temporary object (class.temporary). Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>What it means is that <em>not having</em> a return statement is ok. But <em>reaching the end of the function</em> without returning is <em>undefined behavior</em>.</p>\n<p>The compiler can't always detect these cases, so it's not required to be a compile error (it'd have to solve the halting problem to determine whether execution ever <em>actually</em> reaches the end of the function). It is simply <em>undefined</em> what should happen if this occurs. It might appear to work (because the calling function will just look at whatever garbage value is in the location where the return value is supposed to be), it might crash, or make demons fly out of your nose.</p>\n", "CreationDate": "2010-08-04T12:15:07.403", "ParentId": "3402178", "Id": "3405364", "LastActivityDate": "2010-08-04T12:15:07.403", "PostTypeId": "2", "Score": "12", "OwnerUserId": "33213"}, "3402194": {"CreationDate": "2010-08-04T02:33:20.120", "CommentCount": "6", "Body": "<p>Omitting the <code>return</code> statement in a <code>non-void</code> function [Except <code>main()</code>] and using the returned value in your code invokes <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"noreferrer\">Undefined Behaviour</a>.</p>\n<p>ISO C++-98[Section 6.6.3/2]</p>\n<blockquote>\n<p id=\"so_3402178_3402194_0\">A  return  statement  with an expression can be used\n    only in functions returning a value; the value of  the  expression  is\n    returned  to  the caller of the function.  If required, the expression\n    is implicitly converted to the return type of the function in which it\n    appears.   A return statement can involve the construction and copy of\n    a temporary object (<em>class.temporary</em>). <em>Flowing  off  the  end  of  a\n    function  is  equivalent  to  a  return with no value; this results in\n    <strong>undefined behavior</strong> in a value-returning function</em>.</p>\n</blockquote>\n<p>For example</p>\n<pre><code>int func()\n{\n    int a=10;\n    //do something with 'a'\n    //oops no return statement\n}\n\n\nint main()\n{\n     int p=func();\n     //using p is dangerous now\n     //return statement is optional here \n}\n</code></pre>\n<p>Generally g++ gives a <code>warning: control reaches end of non-void function</code>. Try compiling  with <code>-Wall</code> option. </p>\n", "Id": "3402194", "OwnerUserId": "165520", "LastEditDate": "2010-08-04T11:45:44.593", "ParentId": "3402178", "LastActivityDate": "2010-08-04T11:45:44.593", "PostTypeId": "2", "Score": "16", "LastEditorUserId": "165520"}, "bq_ids": {"n4140": {"so_3402178_3402194_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 3913}, "so_3402178_3405364_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 3913}}, "n3337": {"so_3402178_3402194_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 3773}, "so_3402178_3405364_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 3773}}}});