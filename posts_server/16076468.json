post_cb({"bq_ids": {"n4140": {"so_16076468_16076878_6": {"length": 9, "quality": 1.0, "section_id": 3277}, "so_16076468_16076878_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 3274}, "so_16076468_16076878_4": {"length": 6, "quality": 1.0, "section_id": 369}}, "n3337": {"so_16076468_16076878_6": {"length": 9, "quality": 1.0, "section_id": 3148}, "so_16076468_16076878_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 3145}, "so_16076468_16076878_4": {"length": 6, "quality": 1.0, "section_id": 359}}, "n4659": {"so_16076468_16076878_6": {"length": 9, "quality": 1.0, "section_id": 4035}, "so_16076468_16076878_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 4032}, "so_16076468_16076878_4": {"length": 6, "quality": 1.0, "section_id": 382}}}, "16076522": {"Id": "16076522", "PostTypeId": "2", "Body": "<p>It doesn't compile in any major compiler. It will compile, until of creation of object of type <code>Y</code>.</p>\n<p>If you create object of type <code>Y</code>, output of clang will be</p>\n<pre><code>error: call to implicitly-deleted default constructor of 'Y'\nnote: explicitly defaulted function was implicitly deleted here\n    Y() = default;\nnote: default constructor of 'Y' is implicitly deleted because field\n'x' of reference type 'X &amp;' would not be initialized\n    X&amp; x;\n</code></pre>\n<p>When you declare <code>user-defined</code> constructor, which is simply empty function, there is error, without creation of object.</p>\n<p>Michael Burr is right. An implicitly-defaulted constructor works perfectly fine. There is no problems with diagnostic here, as I can see.</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2013-04-18T07:35:26.753", "Score": "9", "CreationDate": "2013-04-18T07:03:58.923", "ParentId": "16076468", "CommentCount": "0", "OwnerUserId": "1498580", "LastEditDate": "2013-04-18T07:35:26.753"}, "16076468": {"ViewCount": "1018", "Body": "<pre><code>struct X {};\n\nstruct Y { \n    Y() = default;\n    X&amp; x;\n};\n</code></pre>\n<p>works fine in C++11. I wish to know how Y::x is actually initialized behind the scenes?</p>\n", "AcceptedAnswerId": "16076522", "Title": "Reference initialization in C++11 default constructor", "CreationDate": "2013-04-18T07:00:36.277", "Id": "16076468", "CommentCount": "9", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2013-04-18T22:14:30.750", "LastEditorUserId": "337819", "LastActivityDate": "2013-04-18T22:14:30.750", "Score": "4", "OwnerUserId": "28555", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "16076544": {"Id": "16076544", "PostTypeId": "2", "Body": "<p>It \"works\" if you don't make a Y object. Once you make one you will get an error:</p>\n<p>(GCC 4.8.0)</p>\n<blockquote>\n<p id=\"so_16076468_16076544_0\">error: uninitialized reference member in 'struct Y'</p>\n</blockquote>\n", "LastActivityDate": "2013-04-18T07:05:01.023", "CommentCount": "0", "CreationDate": "2013-04-18T07:05:01.023", "ParentId": "16076468", "Score": "8", "OwnerUserId": "1381108"}, "16076878": {"Id": "16076878", "PostTypeId": "2", "Body": "<p>Even though you explicitly indicate that <code>Y()</code> should be defaulted, the compiler is obligated to delete the default constructor under certain conditions (emphasis added):</p>\n<blockquote>\n<p id=\"so_16076468_16076878_0\">8.4.2/4  Explicitly-defaulted functions</p>\n<p id=\"so_16076468_16076878_1\">Explicitly-defaulted functions and implicitly-declared functions are\n  collectively called defaulted functions, and the implementation shall\n  provide implicit definitions for them (12.1 12.4, 12.8), <strong>which might\n  mean defining them as deleted</strong></p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_16076468_16076878_2\">12.1/5 Constructors:</p>\n<p id=\"so_16076468_16076878_3\">...</p>\n<p id=\"so_16076468_16076878_4\">... A defaulted default constructor for class X is defined as deleted if:</p>\n<ul>\n<li>any non-static data member with no brace-or-equal-initializer is of reference type</li>\n</ul>\n</blockquote>\n<p>But it's not an error to define a deleted function or constructor unless you actually try to use it:</p>\n<blockquote>\n<p id=\"so_16076468_16076878_5\">8.4.3/2 Deleted defintions</p>\n<p id=\"so_16076468_16076878_6\">A program that refers to a deleted function implicitly or explicitly,\n  other than to declare it, is ill-formed.</p>\n</blockquote>\n", "LastActivityDate": "2013-04-18T07:24:07.397", "CommentCount": "2", "CreationDate": "2013-04-18T07:24:07.397", "ParentId": "16076468", "Score": "10", "OwnerUserId": "12711"}});