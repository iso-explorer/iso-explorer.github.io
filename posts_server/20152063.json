post_cb({"20152063": {"Tags": "<c++><exception><inheritance><c++11><virtual>", "ViewCount": "590", "LastEditDate": "2017-05-23T10:28:28.463", "CreationDate": "2013-11-22T18:35:27.813", "LastEditorUserId": "-1", "Title": "exception specification for virtual function is incompatible with that of overridden function", "CommentCount": "6", "AnswerCount": "0", "Score": "2", "OwnerUserId": "1023390", "Id": "20152063", "LastActivityDate": "2013-11-22T18:57:21.323", "Body": "<p>I get this error message with intel's <code>icpc</code> (version 14.0.1, using <code>-std=c++11</code>), while both clang (version 3.4) and gcc (version 4.8.1) are happy. A typical offending code is:</p>\n<pre><code>#include &lt;vector&gt;\nnamespace test {\n  struct A\n  {\n    virtual bool foo(std::size_t) const = 0;\n    virtual ~A() = default;\n  };\n\n  struct B\n  : A\n  {\n    const std::vector&lt;double&gt; V;\n    const double X;\n    bool foo(std::size_t i) const { return V.at(i) &gt; X; }\n    virtual bool bar(std::size_t i) const { return V.at(i) &lt; X; }\n    B(double x, std::vector&lt;double&gt; const &amp;v)\n      : V(v), X(x) {}\n    ~B() = default;\n  };\n}\n</code></pre>\n<p>Since <code>test::A</code> is abstract, is better has a virtual destructor. However,\nicpc complains (compile error not a warning) about</p>\n<blockquote>\n<p id=\"so_20152063_20152063_0\">exception specification for virtual function \"test::B::~B\" is\n  incompatible with that of overridden function \"test::A::~A\"</p>\n</blockquote>\n<p>I presume that all this is some bug of the intel compiler. Correct?</p>\n<p>PS. I noticed a related <a href=\"https://stackoverflow.com/questions/5295134/exception-specification-when-overriding-a-virtual-function\">question</a>, asked before C++11. I'm really concerned with C++11 when <code>throw</code> is deprecated (and replaced by <code>noexcept</code>).</p>\n", "PostTypeId": "1", "FavoriteCount": "1"}, "bq_ids": {"n4659": {"so_20152063_20152063_0": {"length": 5, "section_id": 4140, "quality": 0.5555555555555556}}}});