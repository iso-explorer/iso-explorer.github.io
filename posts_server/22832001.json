post_cb({"22832001": {"CommentCount": "2", "AcceptedAnswerId": "22832144", "CreationDate": "2014-04-03T08:30:13.433", "LastActivityDate": "2014-04-03T09:07:44.100", "PostTypeId": "1", "ViewCount": "1635", "FavoriteCount": "1", "Title": "Access member field with same name as local variable (or argument)", "Id": "22832001", "Score": "3", "Body": "<p>Consider following code snippet:</p>\n<pre><code>struct S\n{\n   S( const int a ) \n   { \n      this-&gt;a = a; // option 1\n      S::a = a; // option 2\n   }\n   int a;\n};\n</code></pre>\n<p>Is option 1 is equivalent to option 2? Are there cases when one form is better than another? Which clause of standard describes these options?</p>\n", "Tags": "<c++><this><name-hiding>", "OwnerUserId": "3240681", "AnswerCount": "3"}, "22832370": {"ParentId": "22832001", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Have you tried this option?</p>\n<pre><code>struct S\n{\n   S(int a) : a(a) { }\n   int a;\n};\n</code></pre>\n<p>Have a look at the following:</p>\n<blockquote>\n<p id=\"so_22832001_22832370_0\"><strong>12.6.2 Initializing bases and members</strong></p>\n<p id=\"so_22832001_22832370_1\">[12] Names in the <em>expression-list</em> or <em>braced-init-list</em> of a <em>mem-initializer</em> are evaluated in the scope of the constructor for which the <em>mem-initializer</em> is specified. [ <em>Example</em>:</p>\n</blockquote>\n<pre><code>class X {\n   int a;\n   int b;\n   int i;\n   int j;\npublic:\n   const int&amp; r;\n   X(int i): r(a), b(i), i(i), j(this-&gt;i) { }\n};\n</code></pre>\n<blockquote>\n<p id=\"so_22832001_22832370_2\">initializes <code>X::r</code> to refer to <code>X::a</code>, initializes <code>X::b</code> with the value of the constructor parameter <code>i</code>, initializes <code>X::i</code> with the value of the constructor parameter <code>i</code>, and initializes <code>X::j</code> with the value of <code>X::i</code>; this takes place each time an object of class <code>X</code> is created. \u2014 <em>end example</em> ] [ <em>Note</em>: Because the <em>mem-initializer</em> are evaluated in the scope of the constructor, the <code>this</code> pointer can be used in the <em>expression-list</em> of a <em>mem-initializer</em> to refer to the object being initialized. \u2014 <em>end note</em> ]</p>\n</blockquote>\n", "OwnerUserId": "2644390", "LastEditorUserId": "2644390", "LastEditDate": "2014-04-03T09:01:03.270", "Id": "22832370", "Score": "2", "CreationDate": "2014-04-03T08:47:28.240", "LastActivityDate": "2014-04-03T09:01:03.270"}, "22832616": {"ParentId": "22832001", "CommentCount": "2", "Body": "<p>Both forms are identical unless <code>a</code> is a virtual function.  I'd\nprefer <code>this-&gt;a</code>, because it does what I usually want even if\n<code>a</code> is a virtual function.  (But isn't it better to avoid the\nname clash to begin with.) </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "22832616", "Score": "1", "CreationDate": "2014-04-03T08:59:05.410", "LastActivityDate": "2014-04-03T08:59:05.410"}, "bq_ids": {"n4140": {"so_22832001_22832370_1": {"section_id": 440, "quality": 0.9, "length": 9}, "so_22832001_22832370_2": {"section_id": 440, "quality": 0.8648648648648649, "length": 32}}, "n3337": {"so_22832001_22832370_1": {"section_id": 431, "quality": 0.9, "length": 9}, "so_22832001_22832370_2": {"section_id": 431, "quality": 0.8648648648648649, "length": 32}}, "n4659": {"so_22832001_22832370_1": {"section_id": 460, "quality": 0.9, "length": 9}, "so_22832001_22832370_2": {"section_id": 460, "quality": 0.8648648648648649, "length": 32}}}, "22832144": {"ParentId": "22832001", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>option 1 is equivalent to option 2, but option 1 will not work for a static data member</p>\n<p>EDITED:  static data members can be accessed with this pointer. But this-&gt;member will not work in static function. but option 2 will work in static function with static member</p>\n<p>Eg:  </p>\n<pre><code>struct S\n{\n   static void initialize(int a)\n   {\n      //this-&gt;a=a; compilation error\n      S::a=a; \n   }\n   static int a;\n};\nint S::a=0;\n</code></pre>\n", "OwnerUserId": "950979", "LastEditorUserId": "950979", "LastEditDate": "2014-04-03T09:07:44.100", "Id": "22832144", "Score": "5", "CreationDate": "2014-04-03T08:37:21.357", "LastActivityDate": "2014-04-03T09:07:44.100"}});