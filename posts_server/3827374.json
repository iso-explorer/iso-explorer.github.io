post_cb({"3827449": {"ParentId": "3827374", "CommentCount": "1", "Body": "<p>You can translate in your mind:</p>\n<pre><code>virtual void Base::eval() const;\nvoid Derived::eval() ;\n</code></pre>\n<p>to</p>\n<pre><code>void eval(const Base *this, size_t vtable_offset); \nvoid eval(Derived *this);\n</code></pre>\n<p>and see by inspection how little the second matches the signature of the first.</p>\n", "OwnerUserId": "29403", "PostTypeId": "2", "Id": "3827449", "Score": "8", "CreationDate": "2010-09-30T03:20:14.400", "LastActivityDate": "2010-09-30T03:20:14.400"}, "3827374": {"CommentCount": "0", "ViewCount": "9736", "PostTypeId": "1", "LastEditorUserId": "391104", "CreationDate": "2010-09-30T02:56:22.490", "LastActivityDate": "2011-08-26T22:15:36.880", "Title": "C++ Virtual Const Function", "AcceptedAnswerId": "3827386", "LastEditDate": "2011-08-26T22:15:36.880", "Id": "3827374", "Score": "6", "Body": "<p>Given the following snippet, </p>\n<pre><code>class Base\n{\npublic:\n    virtual void eval() const\n    {\n        std::cout&lt;&lt;\"Base Const Eval\\n\";\n    }\n};\n\nclass Derived:public Base\n{\npublic:\n    void eval()\n    {\n        std::cout&lt;&lt;\"Derived Non-Const Eval\\n\";\n    }\n};\n\nint main()\n{\n\n    Derived d;\n    Base* pB=&amp;d;\n\n    pB-&gt;eval(); //This will call the Base eval()\n\n    return 0;\n}\n</code></pre>\n<p>Why the pB-&gt;eval() will call the Base::eval()?</p>\n<p>Thank you</p>\n", "Tags": "<c++>", "OwnerUserId": "391104", "AnswerCount": "6"}, "3827386": {"ParentId": "3827374", "CommentCount": "2", "Body": "<p>This is because one is declared const and the other isn't. One function is being hidden by the other. The function in Derived is hiding the one in Base because they have the same name while they aren't the same function.</p>\n<p>My compiler gives a warning here, does yours?</p>\n", "OwnerUserId": "296460", "PostTypeId": "2", "Id": "3827386", "Score": "6", "CreationDate": "2010-09-30T03:01:15.700", "LastActivityDate": "2010-09-30T03:01:15.700"}, "3827389": {"ParentId": "3827374", "CommentCount": "0", "Body": "<p>The <code>const</code> is part of the function signature. In order to override a function the override must have exactly the same signature as the base version - in this case it does not.</p>\n<p>Consider that the calling code doesn't need to know anything about <code>Derived</code> - it is calling a <code>const</code> function on a <code>Base</code>. You wouldn't expect that call to wind up in a non-const function which might change stuff about the class.</p>\n", "OwnerUserId": "22517", "PostTypeId": "2", "Id": "3827389", "Score": "2", "CreationDate": "2010-09-30T03:01:31.013", "LastActivityDate": "2010-09-30T03:01:31.013"}, "3827450": {"ParentId": "3827374", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C++0x, the situation is detectable at compile time using the <code>base_check</code> and <code>override</code> keywords. <a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#Explicit_virtual_function_overrides\" rel=\"nofollow\">Excerpt from wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_3827374_3827450_0\">The [[base_check]] attribute on a\n  class/struct means that any implicit\n  overriding will give rise to a\n  compiler error. Any overriding must be\n  explicitly marked with the\n  [[override]] attribute.</p>\n</blockquote>\n<p>Most probably (not very sure about the syntax):</p>\n<pre><code>class Derived [[base_check]] : public Base {\n\n    virtual void eval [[override]] () {\n        ....\n    }\n};\n</code></pre>\n", "OwnerUserId": "278326", "LastEditorUserId": "278326", "LastEditDate": "2010-09-30T03:49:50.227", "Id": "3827450", "Score": "2", "CreationDate": "2010-09-30T03:20:28.160", "LastActivityDate": "2010-09-30T03:49:50.227"}, "3827388": {"ParentId": "3827374", "CommentCount": "0", "Body": "<p>In your <code>Derived</code> class, the prototype for eval doesn't match the one for the virtual function in <code>Base</code>. So it won't override the virtual function.</p>\n<pre><code>Base::eval() const;\nDerived::eval(); //No const.\n</code></pre>\n<p>If you add the const for <code>Derived::eval()</code>, you should get virtual behavior.</p>\n", "OwnerUserId": "454638", "PostTypeId": "2", "Id": "3827388", "Score": "8", "CreationDate": "2010-09-30T03:01:20.440", "LastActivityDate": "2010-09-30T03:01:20.440"}, "bq_ids": {"n4140": {"so_3827374_3827415_1": {"section_id": 7003, "quality": 0.9375, "length": 30}, "so_3827374_3827415_0": {"section_id": 7003, "quality": 0.9090909090909091, "length": 30}}, "n3337": {"so_3827374_3827415_1": {"section_id": 6749, "quality": 0.9375, "length": 30}, "so_3827374_3827415_0": {"section_id": 6749, "quality": 0.9090909090909091, "length": 30}}, "n4659": {"so_3827374_3827415_1": {"section_id": 8500, "quality": 0.9375, "length": 30}, "so_3827374_3827415_0": {"section_id": 8500, "quality": 0.9090909090909091, "length": 30}}}, "3827415": {"ParentId": "3827374", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_3827374_3827415_0\">$10.3/2- \"If a virtual member function\n  vf is declared in a class Base and in\n  a class Derived, derived directly or\n  indirectly from Base, a member\n  function vf with the same name,\n  parameter-type-list (8.3.5),\n  <strong>cv-qualification</strong>, and refqualifier (or\n  absence of same) as Base::vf is\n  declared, then Derived::vf is also\n  virtual (whether or not it is so\n  declared) and it <strong>overrides111</strong>\n  Base::vf.\"</p>\n<p id=\"so_3827374_3827415_1\">111) A function with the same name but\n  a different parameter list (Clause 13)\n  as a virtual function is not\n  necessarily virtual and does not\n  override. The use of the virtual\n  specifier in the declaration of an\n  overriding function is legal but\n  redundant (has empty semantics).\n  Access control (Clause 11) is not\n  considered in determining overriding.</p>\n</blockquote>\n<p>As an aside, note that it does not talk about access specifications. So base class and derived class access specifiers for the overridden function could be different</p>\n<p>This means that Derived::eval does not override Base::eval as their cv qualifications differ.</p>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3827415", "Score": "5", "CreationDate": "2010-09-30T03:09:45.260", "LastActivityDate": "2010-09-30T03:09:45.260"}});