post_cb({"bq_ids": {"n4140": {"so_34638149_34638478_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 7041}}, "n3337": {"so_34638149_34638478_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 6786}}, "n4659": {"so_34638149_34638478_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 8538}}}, "34638149": {"ViewCount": "139", "Body": "<p>Here is a problem the reason of which is quite obscure to me, but the workaround of which is fortunately quite easy.</p>\n<p>Consider the following code (let me call it my <code>main.cpp</code>):</p>\n<pre><code>#include &lt;algorithm&gt;\n\nstruct Foo {\n    static constexpr float BAR = .42;\n\n    float operator()() const noexcept {\n        float zero = .0;\n        return std::min(zero, BAR);\n    }\n};\n\nint main() {\n    Foo foo;\n    foo();\n}\n</code></pre>\n<p>When I tried to compile it, I got the error:</p>\n<blockquote>\n<p id=\"so_34638149_34638149_0\">foobar:~/stackoverflow$ g++ -std=c++11 main.cpp<br>\n  /tmp/ccjULTPy.o: In function 'Foo::operator()() const':<br>\n  main.cpp:(.text._ZNK3FooclEv[_ZNK3FooclEv]+0x1a): undefined reference to `Foo::BAR'<br>\n  collect2: error: ld returned 1 exit status</br></br></br></p>\n</blockquote>\n<p>The same happens (quite obviously) also if I use the following statement:</p>\n<pre><code>return std::min(zero, Foo::BAR);\n</code></pre>\n<p>Below a slightly modified version of the example above.<br/>\nThis one compiles with no error, even though I'm still referring to the <code>BAR</code> member:</p>\n<pre><code>#include &lt;algorithm&gt;\n\nstruct Foo {\n    static constexpr float BAR = .42;\n\n    float operator()() const noexcept {\n        float zero = .0;\n        float bar = BAR;\n        return std::min(zero, bar);\n    }\n};\n\nint main() {\n    Foo foo;\n    foo();\n}\n</code></pre>\n<p>I didn't succeed in understanding why the latter version compiles fine while the former ends with an error.<br/>\nAs far as I know, both the versions are correct and should compile, but I strongly suspect that I'm missing something important here.</p>\n<p>Any suggestion?</p>\n<p>Here my compiler's version: <code>g++ (Debian 5.3.1-5) 5.3.1 20160101</code>.</p>\n", "AcceptedAnswerId": "34638478", "Title": "Static constexpr members seem not to go along with std::min", "CreationDate": "2016-01-06T16:39:09.253", "Id": "34638149", "CommentCount": "11", "PostTypeId": "1", "ClosedDate": "2016-01-06T17:01:39.737", "LastActivityDate": "2016-01-06T17:08:39.667", "Score": "2", "OwnerUserId": "4987285", "Tags": "<c++><c++11><static><constexpr><stl-algorithm>", "AnswerCount": "1"}, "34638478": {"Id": "34638478", "PostTypeId": "2", "Body": "<p>The selected prototype for <code>min</code> is</p>\n<pre><code>template&lt;class T&gt; \n/* constexpr since C++14 */ const T&amp; min( const T&amp; a, const T&amp; b );\n</code></pre>\n<p>The pertinent point is that it takes the argument by reference, meaning it One-Definition-Rule (ODR)-uses it.<br>\nAnd you never defined it, you only declared it in your class (with an initializer):</br></p>\n<pre><code>    static constexpr float BAR = .42;\n</code></pre>\n<p>Which is good enough for copying and otherwise using the value, but not for using it as anything but a prvalue.</p>\n<p>See <a href=\"https://stackoverflow.com/questions/29397864/why-does-constexpr-static-member-of-type-class-require-a-definition\">Why does constexpr static member (of type class) require a definition?</a></p>\n<p>Violation of the ODR (whose finer points are fine and voluminuous indeed) need not be diagnosed:</p>\n<blockquote>\n<h3>3.2 One definition rule <em>[basic.def.odr]</em></h3>\n<p id=\"so_34638149_34638478_0\">4 Every program shall contain exactly one definition of every non-inline function or variable that is odr-used\n  in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found\n  in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and\n  12.8). An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-06T17:08:39.667", "Score": "4", "CreationDate": "2016-01-06T16:56:04.370", "ParentId": "34638149", "CommentCount": "0", "OwnerUserId": "3204551", "LastEditDate": "2017-05-23T10:28:18.557"}});