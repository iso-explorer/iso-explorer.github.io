post_cb({"8111505": {"Id": "8111505", "PostTypeId": "2", "Body": "<p>The question is somewhat confusing. The title mentions <em>Type of array index</em>, but in the question, you seem to ask something else. Are you asking about <em>size</em> of an array? or <em>index</em> to an array? <strong>The size of a <em>declared</em> array must be greater than zero</strong>; it can any integral type: <code>int</code>, <code>char</code>, <code>signed char</code>,  <code>unsigned int</code>, and so on.  In your question, the type of literal <code>5</code> is <code>int</code>.</p>\n<p>However, if you're asking about type of <em>index</em> to an array, then it must be one of the integral type. The index type to an array can be <code>int</code> also, as it can even be negative.</p>\n<pre><code>int a[10][10];\n\nint x = a[3][-1]; //same as a[2][9]\nint y = a[3][-2]; //same as a[2][8]\nint z = a[3][-3]; //same as a[2][7]\n</code></pre>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-11-13T12:45:51.057", "Score": "5", "CreationDate": "2011-11-13T12:26:43.627", "ParentId": "8111357", "CommentCount": "5", "OwnerUserId": "415784", "LastEditDate": "2011-11-13T12:45:51.057"}, "8111357": {"ViewCount": "8728", "Body": "<p>What is the type of array index in C++ programming language? For example in such statement:</p>\n<pre><code>int tab[5];\n</code></pre>\n<p>To what type 5 is converted? or maybe is it just plain int?</p>\n", "AcceptedAnswerId": "8111377", "Title": "Type of array index in C++", "CreationDate": "2011-11-13T12:00:07.607", "Id": "8111357", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-11-13T12:02:03.710", "LastEditorUserId": "635608", "LastActivityDate": "2011-11-13T12:56:09.880", "Score": "13", "OwnerUserId": "738811", "Tags": "<c++><arrays>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_8111357_8111507_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 5341}, "so_8111357_8111507_2": {"length": 19, "quality": 0.95, "section_id": 5342}, "so_8111357_8111507_0": {"length": 13, "quality": 0.6190476190476191, "section_id": 6186}, "so_8111357_8111377_1": {"length": 38, "quality": 0.9047619047619048, "section_id": 3228}, "so_8111357_8111377_2": {"length": 30, "quality": 0.8823529411764706, "section_id": 5986}}, "n3337": {"so_8111357_8111377_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 5754}, "so_8111357_8111507_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 5138}, "so_8111357_8111507_2": {"length": 19, "quality": 0.95, "section_id": 5139}, "so_8111357_8111377_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 3101}, "so_8111357_8111507_0": {"length": 15, "quality": 0.7142857142857143, "section_id": 5947}}, "n4659": {"so_8111357_8111507_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 6762}, "so_8111357_8111507_2": {"length": 19, "quality": 0.95, "section_id": 6763}, "so_8111357_8111377_1": {"length": 34, "quality": 0.8095238095238095, "section_id": 3985}, "so_8111357_8111377_2": {"length": 28, "quality": 0.8235294117647058, "section_id": 7486}}}, "8111377": {"Id": "8111377", "PostTypeId": "2", "Body": "<p>In that code, <code>5</code> is just a plain integer literal, so it's just a plain <code>int</code> here.</p>\n<p>\u00a78.3.4 <em>Arrays</em> in n3290 (~ C++11) specifies array declarators:</p>\n<blockquote>\n<p id=\"so_8111357_8111377_0\">In a declaration T D where D has the form  </p>\n<pre><code>D1 [ constant-expressionopt ] attribute-specifier-seqopt\n</code></pre>\n<p id=\"so_8111357_8111377_1\">and the type of the identifier in the declaration T D1 is \u201cderived-declarator-type-list T\u201d, then the type of the identifier of D is an array type; if the type of the identifier of D contains the auto type-specifier, the program is ill-formed. T is called the array element type; this type shall not be a reference type, the (possibly cv-qualified) type void, a function type or an abstract class type. If the constant-expression (5.19) is present,<strong>it shall be an integral constant expression and its value shall be greater than zero</strong>.</p>\n</blockquote>\n<p>\u00a75.2.1 <em>Subscripting</em> describes what can go in the brackets in expressions:</p>\n<blockquote>\n<p id=\"so_8111357_8111377_2\">A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have the type \u201cpointer to T\u201d and the other shall have <strong>unscoped enumeration or integral type</strong>.\n  The result is an lvalue of type \u201cT.\u201d The type \u201cT\u201d shall be a completely-defined object type. The expression\n  E1[E2] is identical (by definition) to *((E1)+(E2))</p>\n</blockquote>\n", "LastEditorUserId": "635608", "LastActivityDate": "2011-11-13T12:44:54.640", "Score": "13", "CreationDate": "2011-11-13T12:03:00.637", "ParentId": "8111357", "CommentCount": "4", "OwnerUserId": "635608", "LastEditDate": "2011-11-13T12:44:54.640"}, "8111414": {"Id": "8111414", "PostTypeId": "2", "Body": "<p>This is <code>int</code> if you wanta different type use sufix, for example:</p>\n<pre><code>5         // int\n5u        // unsigned int\n5l        // long\n5ul       // unsigned long \n</code></pre>\n", "LastActivityDate": "2011-11-13T12:08:28.107", "CommentCount": "1", "CreationDate": "2011-11-13T12:08:28.107", "ParentId": "8111357", "Score": "3", "OwnerUserId": "1027198"}, "8111507": {"Id": "8111507", "PostTypeId": "2", "Body": "<p><code>int tab[5];</code> is an array declaration.</p>\n<p>Array declaration accepts an <em>integral constant expression</em> that has value greater than zero (c++11: \u00a78.3.4).</p>\n<h3>\u00a75.19.4 (n3242):</h3>\n<blockquote>\n<p id=\"so_8111357_8111507_0\">A constant expression is an integral constant expression if it is of\n  integral or enumeration type. [ Note: Such expressions may be used as\n  array bounds (8.3.4, 5.3.4), as case expressions (6.4.2), as bit-field\n  lengths (9.6), ...</p>\n</blockquote>\n<hr>\n<p><code>5</code> is an integer literal (\u00a72.14.2). Its type is <code>int</code>. </p>\n<h3>\u00a72.14.2 (n3242)</h3>\n<blockquote>\n<p id=\"so_8111357_8111507_1\">2 The type of an integer literal is the first of the corresponding\n  list in Table 6 in which its value can be  represented.</p>\n</blockquote>\n<p></p>\n<blockquote>\n<p id=\"so_8111357_8111507_2\">3 If an\n  integer literal cannot be represented by any type in its list and an\n  extended integer type (3.9.1) can  represent its value, it may have\n  that extended integer type. ... </p>\n</blockquote>\n<p>Types of decimal constants without suffix in the Table 6 are: <code>int</code>, <code>long int</code>, <code>long long int</code>. </p>\n</hr>", "LastEditorUserId": "4279", "LastActivityDate": "2011-11-13T12:56:09.880", "Score": "4", "CreationDate": "2011-11-13T12:26:58.317", "ParentId": "8111357", "CommentCount": "0", "OwnerUserId": "4279", "LastEditDate": "2011-11-13T12:56:09.880"}});