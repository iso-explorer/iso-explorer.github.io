post_cb({"24219807": {"CommentCount": "6", "ViewCount": "1129", "CreationDate": "2014-06-14T12:13:31.283", "LastActivityDate": "2014-06-14T13:55:24.607", "Title": "Why doesn't the istringstream eof flag become true when successfully converting a boolean string value to a bool?", "AcceptedAnswerId": "24220317", "PostTypeId": "1", "Id": "24219807", "Score": "3", "Body": "<p>I am learning how to convert values stored as a string to native types using <code>istringstream</code>. When a number stored as a string is successfully converted to an <code>int</code> or <code>double</code>, the istringstream eof() function returns true. When a boolean stored as a string is successfully converted to a <code>bool</code>, eof() returns false. </p>\n<p>What causes the difference and why does eof() not return true when there seems to be no other characters remaining to process?</p>\n<p>Code for converting to a bool:</p>\n<pre><code>string value = \"true\";\nistringstream converter(value);\nbool convertedValue;\n\nif (!(converter &gt;&gt; std::boolalpha &gt;&gt; convertedValue)){\n    cout &lt;&lt; \"Conversion error.\" &lt;&lt; endl;\n} else {\n    cout &lt;&lt; \"Conversion success.\" &lt;&lt; endl;\n}\n\ncout &lt;&lt; \"convertedValue=\" &lt;&lt; convertedValue &lt;&lt; \"  value.length()=\" &lt;&lt; value.length() &lt;&lt; \"  converter.tellg()=\" &lt;&lt; converter.tellg() &lt;&lt; \"  converter.eof()=\" &lt;&lt; converter.eof() &lt;&lt; endl;\n</code></pre>\n<p>The output shows the eof flag is false:</p>\n<pre><code>Conversion success.\nconvertedValue=1  value.length()=4  converter.tellg()=4  converter.eof()=0\n</code></pre>\n<p>Code for converting to a double:</p>\n<pre><code>string value = \"1234.56\";\nistringstream converter(value);\ndouble convertedValue;\n\nif (!(converter &gt;&gt; std::boolalpha &gt;&gt; convertedValue)){\n    cout &lt;&lt; \"Conversion error.\" &lt;&lt; endl;\n} else {\n    cout &lt;&lt; \"Conversion success.\" &lt;&lt; endl;\n}\n\ncout &lt;&lt; \"convertedValue=\" &lt;&lt; convertedValue &lt;&lt; \"  value.length()=\" &lt;&lt; value.length() &lt;&lt; \"  converter.tellg()=\" &lt;&lt; converter.tellg() &lt;&lt; \"  converter.eof()=\" &lt;&lt; converter.eof() &lt;&lt; endl;\n</code></pre>\n<p>The output shows the eof flag is true:</p>\n<pre><code>Conversion success.\nconvertedValue=1234.56  value.length()=7  converter.tellg()=-1  converter.eof()=1\n</code></pre>\n<p>Code for converting to an int:</p>\n<pre><code>string value = \"1234\";\nistringstream converter(value);\nint convertedValue;\n\nif (!(converter &gt;&gt; std::boolalpha &gt;&gt; convertedValue)){\n    cout &lt;&lt; \"Conversion error.\" &lt;&lt; endl;\n} else {\n    cout &lt;&lt; \"Conversion success.\" &lt;&lt; endl;\n}\n\ncout &lt;&lt; \"convertedValue=\" &lt;&lt; convertedValue &lt;&lt; \"  value.length()=\" &lt;&lt; value.length() &lt;&lt; \"  converter.tellg()=\" &lt;&lt; converter.tellg() &lt;&lt; \"  converter.eof()=\" &lt;&lt; converter.eof() &lt;&lt; endl;\n</code></pre>\n<p>The output shows the eof flag is true:</p>\n<pre><code>Conversion success.\nconvertedValue=1234  value.length()=4  converter.tellg()=-1  converter.eof()=1\n</code></pre>\n<p>I am using g++ (Debian 4.8.3-3) 4.8.3.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3371448", "AnswerCount": "2"}, "24220637": {"ParentId": "24219807", "CommentCount": "0", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_24219807_24220637_0\">Successive characters in the range [in,end) (see 23.2.3) are obtained\n  and matched against corresponding positions in the target sequences\n  only as necessary to identify a unique match.</p>\n</blockquote>\n<p>So for example if to compile the following code</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n\nint main() \n{\n    std::istringstream is( \"trueabc\" );\n    bool b = false;\n\n    is &gt;&gt; std::boolalpha &gt;&gt; b;\n\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; b &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; is.eof() &lt;&lt; std::endl;\n\n    std::string s;\n\n    is &gt;&gt; s;\n\n    std::cout &lt;&lt; s &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>using GCC (at www.ideone.com) or MS VC++ 2010 then the result will be the same</p>\n<pre><code>true\nfalse\nabc\n</code></pre>\n<p>That is it was enough to read \"true\" from the input stream that to determine the \"<strong>unique match</strong>\".</p>\n<p>It is interesting to note that it seems that MS VC++ 2010 contains a bug. If to compile the following code</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n\nint main() \n{\n    std::istringstream is( \"true\" );\n    bool b = false;\n\n    is &gt;&gt; std::boolalpha &gt;&gt; b;\n\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; b &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; is.eof() &lt;&lt; std::endl;\n\n\n    return 0;\n}\n</code></pre>\n<p>then the output will be</p>\n<p><strong>MS VC++ 2010:</strong></p>\n<pre><code>true\ntrue\n</code></pre>\n<p><strong>GCC:</strong></p>\n<pre><code>true\nfalse\n</code></pre>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "24220637", "Score": "1", "CreationDate": "2014-06-14T13:55:24.607", "LastActivityDate": "2014-06-14T13:55:24.607"}, "24220317": {"ParentId": "24219807", "CommentCount": "2", "Body": "<p>The state of \"End of File\" is reached after the first unsuccessful input operation, where there is nothing more to input.</p>\n<p>In the case of reading from a string, an input operation reads one character.</p>\n<p>Inputting a boolean (\"true\") does not have to try and read a character beyond the 'e'. This is in contrast to input operations for numbers, where there may be a next digit.</p>\n<p>To determine, whether all has been read: check whether the tellg result is -1 or equal to the string length.</p>\n", "OwnerUserId": "2107876", "PostTypeId": "2", "Id": "24220317", "Score": "3", "CreationDate": "2014-06-14T13:14:26.537", "LastActivityDate": "2014-06-14T13:14:26.537"}, "bq_ids": {"n4140": {"so_24219807_24220637_0": {"section_id": 6540, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_24219807_24220637_0": {"section_id": 6295, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_24219807_24220637_0": {"section_id": 8022, "quality": 0.8823529411764706, "length": 15}}}});