post_cb({"bq_ids": {"n4140": {"so_40138325_40138652_1": {"length": 27, "quality": 0.7941176470588235, "section_id": 7151}}, "n3337": {"so_40138325_40138652_1": {"length": 26, "quality": 0.7647058823529411, "section_id": 6895}}, "n4659": {"so_40138325_40138652_1": {"length": 25, "quality": 0.7352941176470589, "section_id": 8652}}}, "40138652": {"Id": "40138652", "PostTypeId": "2", "Body": "<p>I'm not so sure this is undefined. Quote from the current <a href=\"http://eel.is/c++draft/basic.start\">draft</a>:</p>\n<blockquote>\n<p id=\"so_40138325_40138652_0\">[basic.start.static]/3</p>\n<p id=\"so_40138325_40138652_1\">If constant initialization is not performed, a variable with static\n  storage duration ([basic.stc.static]) or thread storage duration\n  ([basic.stc.thread]) is zero-initialized ([dcl.init]). Together,\n  zero-initialization and constant initialization are called static\n  initialization; all other initialization is dynamic initialization.\n  <em>Static initialization shall be performed before any dynamic initialization takes place</em>.</p>\n</blockquote>\n<p>To me it looks like <code>kTest</code> is already zero-initialized when the dynamic initialization starts, so it may be defined to initialize to <code>0</code>.</p>\n", "LastActivityDate": "2016-10-19T18:08:54.763", "CommentCount": "5", "CreationDate": "2016-10-19T18:08:54.763", "ParentId": "40138325", "Score": "8", "OwnerUserId": "2456565"}, "40138406": {"Id": "40138406", "PostTypeId": "2", "Body": "<pre><code>int kTest[] = {\n    kTest[0]\n};\n</code></pre>\n<p>is similar to, if not exactly same as</p>\n<pre><code>int x = x;\n</code></pre>\n<p>It will be undefined behavior, if declared locally in a function.</p>\n<p>It seems to be well defined when <code>kTest</code> is a global variable. See <a href=\"https://stackoverflow.com/a/40138652/434551\">the other answer</a> for additional details.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-10-19T18:36:23.033", "Score": "15", "CreationDate": "2016-10-19T17:54:45.403", "ParentId": "40138325", "CommentCount": "4", "OwnerUserId": "434551", "LastEditDate": "2017-05-23T12:34:33.157"}, "40138325": {"ViewCount": "721", "Body": "<p>I accidentally created a bug in a program by self-referencing in an array. Here's a very simplified demo program similar in concept:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint kTest[] = {\n    kTest[0]\n};\n\nint main() {\n    cout &lt;&lt; kTest[0] &lt;&lt; endl;\n}\n</code></pre>\n<p>I was surprised that I received neither a compiler error or even a warning on this code! In my case it ended up producing unpredictable output. Is it accessing garbage memory?</p>\n<p>I was curious about under what circumstances this would have well-defined output (if ever!). </p>\n<p><strong>Edit</strong>: Does it make a difference if <code>kTest</code> is <code>static</code>? What about <code>const</code>? Both?</p>\n", "AcceptedAnswerId": "40138406", "Title": "C++ self-referencing array?", "CreationDate": "2016-10-19T17:50:20.040", "Id": "40138325", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-10-19T19:45:17.557", "LastEditorUserId": "618068", "LastActivityDate": "2016-10-19T19:45:17.557", "Score": "19", "OwnerUserId": "618068", "Tags": "<c++>", "AnswerCount": "2"}});