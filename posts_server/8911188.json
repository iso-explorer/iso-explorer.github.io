post_cb({"bq_ids": {"n4140": {"so_8911188_8911596_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 5462}}, "n3337": {"so_8911188_8911596_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 5249}}, "n4659": {"so_8911188_8911596_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 6896}}}, "8911188": {"ViewCount": "273", "Body": "<p>When passing forward declared struct or a class, one has to pass it to a function through a reference or a pointer.</p>\n<p>But, what can be done with a forward declared enum? Does it also have to be passed through a reference or a pointer? Or, can it be passed with a value?</p>\n<p>Next example compiles fine using g++ 4.6.1 :</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum class E;\n\nvoid foo( const E e );\n\n\nenum class E\n{\n  V1,\n  V2\n};\n\nvoid foo( const E e )\n{\n  switch ( e )\n  {\n    case E::V1 :\n      std::cout &lt;&lt; \"V1\"&lt;&lt;std::endl;\n      break;\n    case E::V2 :\n      std::cout &lt;&lt; \"V2\"&lt;&lt;std::endl;\n      break;\n    default:\n      ;\n  }\n}\n\nint main()\n{\n  foo( E::V1);\n  foo( E::V2);\n}\n</code></pre>\n<p>To build :</p>\n<pre><code>g++ gy.cpp -Wall -Wextra -pedantic -std=c++0x -O3\n</code></pre>\n<p>Is the above standard compliant, or is it using an extension?</p>\n", "AcceptedAnswerId": "8911596", "Title": "Can I pass value of forward declared enum?", "CreationDate": "2012-01-18T13:47:14.467", "Id": "8911188", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-01-18T14:15:07.140", "Score": "9", "OwnerUserId": "476681", "Tags": "<c++><enums><c++11><forward-declaration>", "AnswerCount": "1"}, "8911596": {"Id": "8911596", "PostTypeId": "2", "Body": "<p>A declared enum, even if you don't specify the enumerators (what the standard calls an <em>opaque-enum-declaration</em>) is a complete type, so it can be used everywhere.</p>\n<p>For completeness, here's a quote from paragraph 3 of \u00a77.2:</p>\n<blockquote>\n<p id=\"so_8911188_8911596_0\">An <em>opaque-enum-declaration</em> is either a redeclaration of an enumeration\n  in the current scope or a declaration of a new enumeration. [<em>Note:</em> An\n  enumeration declared by an <em>opaque-enum-declaration</em> has fixed\n  underlying type and is a complete type. The list of enumerators can be\n  provided in a later redeclaration with an enum-specifier. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>And the grammar for <em>opaque-enum-declaration</em>, from paragraph one of the same \u00a77.2:</p>\n<blockquote>\n<p id=\"so_8911188_8911596_1\"><em>opaque-enum-declaration:</em> </p>\n<blockquote>\n<p id=\"so_8911188_8911596_3\"><em>enum-key attribute-specifier-seq<sub>opt</sub> identifier enum-base<sub>opt</sub></em><code>;</code></p>\n</blockquote>\n</blockquote>\n", "LastActivityDate": "2012-01-18T14:15:07.140", "Score": "11", "CreationDate": "2012-01-18T14:15:07.140", "ParentId": "8911188", "CommentCount": "2", "OwnerUserId": "46642"}});