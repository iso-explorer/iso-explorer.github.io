post_cb({"bq_ids": {"n4140": {"so_48916222_48916222_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3296}}, "n3337": {"so_48916222_48916222_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3166}}, "n4659": {"so_48916222_48916222_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 4058}}}, "48916222": {"ViewCount": "66", "Body": "<p>I am trying to understand which <em>rules in the standard</em> justify the compiler behavior below. So this question is only intended to get a <strong>language-lawyer answer.</strong></p>\n<p>Let's consider this two classes:</p>\n<pre><code>struct A{\n   A(int);\n};\nstruct B{\n   operator int();\n};\n</code></pre>\n<p>The following code compile:</p>\n<pre><code> B b;\n A a{b};\n</code></pre>\n<p>The variable <code>a</code> is direct initialized by a <code>b</code>. According to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/dcl.init#17.6.3\" rel=\"nofollow noreferrer\">[dlc.init]/17.6.3</a>:</p>\n<blockquote>\n<p id=\"so_48916222_48916222_0\">Otherwise (i.e., for the remaining copy-initialization cases), user-defined conversion sequences that can convert from the source type to the destination type or (when a conversion function is used) to a derived class thereof are enumerated as described in [over.match.copy],</p>\n</blockquote>\n<p>I understand that the process of direct initialization will list all <em>user-defined</em> conversion sequence that can perform a conversion from <code>B</code> (the source type) to <code>A</code>, the destination type. [over.match.copy] explain where can be found user defined conversion function.</p>\n<p>A <em>user defined conversion sequence</em> can only involve 1 user defined conversion function or constructor. But the only conversion path consist in calling both the conversion constructor <code>A::A(int)</code> and the conversion function <code>B::operator int()</code>. </p>\n<p>So there are no user defined conversion sequence that allows conversion from <code>B</code> to <code>A</code>.</p>\n<p>Why according to the standard the initialization <code>A a{b};</code> could be well formed?</p>\n", "Title": "Why conversion can involve two user defined conversion function/constructor?", "CreationDate": "2018-02-21T22:00:25.863", "LastActivityDate": "2018-02-22T04:45:12.823", "CommentCount": "12", "LastEditDate": "2018-02-22T04:45:12.823", "PostTypeId": "1", "LastEditorUserId": "8005438", "Id": "48916222", "Score": "1", "OwnerUserId": "5632316", "Tags": "<c++><type-conversion><language-lawyer>", "AnswerCount": "1"}, "48916292": {"Id": "48916292", "PostTypeId": "2", "Body": "<p>It's well-formed because it uses one conversion to convert from a B to an <code>int</code>. Then the constructor for A is called explicitly, using that <code>int</code> as a parameter.</p>\n<p>This would be a case where you have two user-defined conversions:</p>\n<pre><code>  void f( A a ) {}\n  B b;\n  f( b  );      \n</code></pre>\n", "LastEditorUserId": "2100815", "LastActivityDate": "2018-02-21T22:11:32.173", "Score": "2", "CreationDate": "2018-02-21T22:05:41.547", "ParentId": "48916222", "CommentCount": "2", "OwnerUserId": "2100815", "LastEditDate": "2018-02-21T22:11:32.173"}});