post_cb({"46992006": {"CommentCount": "6", "ViewCount": "64", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2017-10-28T16:33:15.080", "LastActivityDate": "2017-10-28T18:58:19.950", "Title": "ADL lookup inside a class (template) member function body", "FavoriteCount": "1", "LastEditDate": "2017-10-28T18:58:19.950", "Id": "46992006", "Score": "3", "Body": "<pre><code>struct B {};\nstruct C : B {};\nvoid f(B){} // worse match than A::f&lt;C&gt;\n\nstruct A {\n    template&lt;class T&gt;\n    void f(T v) {\n        f(v); // #1\n    }\n};\n\nint main()\n{\n    A{}.f(C{});\n}\n</code></pre>\n<p>Activating ADL lookup in line <code>#1</code> is as simple as </p>\n<pre><code>{\n    using ::f;\n    f(v);\n}\n</code></pre>\n<p>I think the rule that makes the code fail without the <code>using</code> directive is:</p>\n<blockquote>\n<p id=\"so_46992006_46992006_0\"><a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.lookup#argdep-3\" rel=\"nofollow noreferrer\"><strong>[basic.lookup.argdep]/3</strong></a> Let X be the lookup set produced by unqualified lookup and let Y be\n  the lookup set produced by argument dependent lookup (defined as\n  follows). If X contains</p>\n<ul>\n<li>(3.1) a declaration of a class member, or</li>\n<li>(3.2) a block-scope function declaration that is not a using-declaration, or</li>\n<li>(3.3) a declaration that is neither a function nor a function template</li>\n</ul>\n<p id=\"so_46992006_46992006_1\">then Y is empty. [...]</p>\n</blockquote>\n<p>So, since a call to <code>f</code> found by non-ADL lookup will find <code>A::f</code>, which is a class member, overloads found by ADL-lookup are discarded.</p>\n<p>Which C++ rule allows to ignore the restriction in 3.1 with the <code>using</code> declaration, to make the above code compile?</p>\n<p>I think I'm completely misunderstanding the context where the rule <em>[basic.lookup.argdep]/3</em> must be applied, or maybe I have a bigger and hidden hole in my understanding of the name lookup process.</p>\n", "Tags": "<c++><language-lawyer><c++1z><argument-dependent-lookup><class-members>", "OwnerUserId": "1794803", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46992006_46993212_0": {"section_id": 7087, "quality": 0.9473684210526315, "length": 18}, "so_46992006_46993212_1": {"section_id": 7094, "quality": 0.9285714285714286, "length": 13}, "so_46992006_46993212_2": {"section_id": 7094, "quality": 0.8571428571428571, "length": 6}, "so_46992006_46993212_3": {"section_id": 187, "quality": 0.8333333333333334, "length": 5}, "so_46992006_46992006_0": {"section_id": 7105, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_46992006_46993212_0": {"section_id": 6831, "quality": 0.9473684210526315, "length": 18}, "so_46992006_46993212_1": {"section_id": 6837, "quality": 0.6428571428571429, "length": 9}, "so_46992006_46993212_2": {"section_id": 6838, "quality": 0.8571428571428571, "length": 6}, "so_46992006_46993212_3": {"section_id": 181, "quality": 0.8333333333333334, "length": 5}, "so_46992006_46992006_0": {"section_id": 6849, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_46992006_46993212_3": {"section_id": 192, "quality": 0.8333333333333334, "length": 5}, "so_46992006_46993212_1": {"section_id": 8595, "quality": 0.9285714285714286, "length": 13}, "so_46992006_46993212_0": {"section_id": 8588, "quality": 0.9473684210526315, "length": 18}, "so_46992006_46992006_0": {"section_id": 8606, "quality": 0.9411764705882353, "length": 16}, "so_46992006_46993212_2": {"section_id": 8595, "quality": 0.8571428571428571, "length": 6}}}, "46993212": {"ParentId": "46992006", "CommentCount": "3", "Body": "<p><a href=\"http://eel.is/c++draft/basic.lookup.unqual#1\" rel=\"noreferrer\">First paragraph</a> on unqualified name lookup:</p>\n<blockquote>\n<p id=\"so_46992006_46993212_0\">In all the cases listed in [basic.lookup.unqual], the scopes are\n  searched for a declaration in the order listed in each of the\n  respective categories; name lookup ends as soon as a declaration is\n  found for the name.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/basic.lookup.unqual#8\" rel=\"noreferrer\">In particular</a>,</p>\n<blockquote>\n<p id=\"so_46992006_46993212_1\">For the members of a class <code>X</code>, a name used in a member function body [\u2026], following\n  the member's <em>declarator-id</em>, shall be declared in one of the\n  following ways:</p>\n<ul>\n<li><p id=\"so_46992006_46993212_2\">before its use in the block in which it is used or in an enclosing\n  block (<a href=\"http://eel.is/c++draft/stmt.block\" rel=\"noreferrer\">[stmt.block]</a>), or</p></li>\n<li><p id=\"so_46992006_46993212_3\">shall be a member of class <code>X</code> or be a member\n  of a base class of <code>X</code> (<a href=\"http://eel.is/c++draft/class.member.lookup\" rel=\"noreferrer\">[class.member.lookup]</a>), or ...</p></li>\n</ul>\n</blockquote>\n<p>A local (re)declaration of a name is prioritised and shadows all extrinsic declarations.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "46993212", "Score": "5", "CreationDate": "2017-10-28T18:42:39.347", "LastActivityDate": "2017-10-28T18:42:39.347"}});