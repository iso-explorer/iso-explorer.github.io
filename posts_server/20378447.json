post_cb({"20378553": {"ParentId": "20378447", "PostTypeId": "2", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_20378447_20378553_0\">How is array subscription interpreted in C++,</p>\n</blockquote>\n<p>In <em>C++</em> <code>E1[E2]</code> is <em>identical</em> to <code>*((E1)+(E2))</code></p>\n<blockquote>\n<p id=\"so_20378447_20378553_1\">what type does C++ expect to appear as the subscript? </p>\n</blockquote>\n<p><em>C++</em> expects a <em>unscoped enumeration or integral type</em> both items are covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>5.2.1</code> <em>Subscripting</em> paragraph <em>1</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_20378447_20378553_2\">A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have the type \u201cpointer to T\u201d and the <strong>other shall have unscoped enumeration or integral type</strong>. The result is an lvalue of type \u201cT.\u201d The type \u201cT\u201d shall be a completely-defined object type.<sup>62</sup> The <strong>expression E1[E2] is identical (by definition) to *((E1)+(E2))</strong> [ Note: see 5.3 and 5.7 for details of * and + and 8.3.4 for details of arrays. \u2014end note ]</p>\n</blockquote>\n<p>As James points out, the wording <em>One of the expressions shall have</em> allows the <em>pointer</em> and <em>subscript</em> to be interchanged, for example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arr[5] = {1, 2, 3, 4, 5 } ;\n\n    std::cout &lt;&lt; arr[2] &lt;&lt; \":\" &lt;&lt; 2[arr] &lt;&lt; std::endl ;\n}\n</code></pre>\n<p>Using the alternative syntax <code>2[arr]</code> is not recommended, most people won't know what this is doing it makes the code less readable and hence less maintainable. </p>\n<p>which is similar to the relevant section in the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">draft C99 standard</a> <code>6.5.2.1</code> <em>Array subscripting</em> paragraph <em>2</em> which says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_20378447_20378553_3\">A postfix expression followed by an expression in square brackets [] is a subscripted\n  designation of an element of an array object. The definition of the subscript operator []\n  is <strong>that E1[E2] is identical to (*((E1)+(E2)))</strong>. Because of the conversion rules that\n  apply to the binary + operator, if E1 is an array object (equivalently, a pointer to the\n  initial element of an array object) <strong>and E2 is an integer</strong>, E1[E2] designates the E2-th\n  element of E1 (counting from zero).</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-12-07T01:34:20.213", "Id": "20378553", "Score": "5", "CreationDate": "2013-12-04T14:54:57.660", "LastActivityDate": "2013-12-07T01:34:20.213"}, "20378499": {"ParentId": "20378447", "CommentCount": "0", "Body": "<p>C++ is exactly the same as C in this respect. C++11 \u00a75.2.1:</p>\n<blockquote>\n<p id=\"so_20378447_20378499_0\">The expression <code>E1[E2]</code> is identical (by de\ufb01nition) to <code>*((E1)+(E2))</code></p>\n</blockquote>\n", "OwnerUserId": "367273", "PostTypeId": "2", "Id": "20378499", "Score": "2", "CreationDate": "2013-12-04T14:53:24.300", "LastActivityDate": "2013-12-04T14:53:24.300"}, "bq_ids": {"n4140": {"so_20378447_20378499_0": {"section_id": 5986, "quality": 0.6666666666666666, "length": 4}, "so_20378447_20378553_2": {"section_id": 5986, "quality": 0.7857142857142857, "length": 33}}, "n3337": {"so_20378447_20378499_0": {"section_id": 5754, "quality": 0.6666666666666666, "length": 4}, "so_20378447_20378553_2": {"section_id": 5754, "quality": 0.8095238095238095, "length": 34}}, "n4659": {"so_20378447_20378499_0": {"section_id": 7486, "quality": 0.6666666666666666, "length": 4}, "so_20378447_20378553_2": {"section_id": 7486, "quality": 0.7380952380952381, "length": 31}}}, "20378447": {"CommentCount": "3", "AcceptedAnswerId": "20378499", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-12-04T14:50:52.303", "LastActivityDate": "2013-12-07T01:34:20.213", "LastEditDate": "2017-05-23T10:25:40.903", "ViewCount": "1050", "FavoriteCount": "0", "Title": "What type does C++ expect for array subscripts?", "Id": "20378447", "Score": "2", "Body": "<p>In C, array subscription: <code>a[b]</code> is merely the syntactic sugar equivalent of dereferencing after pointer arithmetic: <code>*(a+b)</code> (as explained, say, <a href=\"https://stackoverflow.com/a/18393343/1593077\">here</a>).</p>\n<p>How is array subscription interpreted in C++, for base types? (Not for classes, for which we have overload semantics)? And, more specifically, what type does C++ expect to appear as the subscript? Is it a <code>ptrdiff_t</code>?</p>\n", "Tags": "<c++><arrays><pointers><standards><subscript-operator>", "OwnerUserId": "1593077", "AnswerCount": "2"}});