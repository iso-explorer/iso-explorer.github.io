post_cb({"25060360": {"CommentCount": "0", "ViewCount": "56", "OwnerDisplayName": "user2953119", "CreationDate": "2014-07-31T13:39:34.550", "LastActivityDate": "2014-07-31T15:24:00.040", "Title": "prvalue of type std::nullptr_t", "PostTypeId": "1", "Id": "25060360", "Score": "0", "Body": "<p>Section 4.10/1 N3797 says:</p>\n<blockquote>\n<p id=\"so_25060360_25060360_0\">A null pointer constant is an integer literal (2.14.2) with value zero\n  or a prvalue of type std::nullptr_t.</p>\n</blockquote>\n<p>I think <code>nullptr</code> is a <code>prvalue</code> of type <code>std::nullptr_t</code>. Would you get a bit more examples of such <code>prvalue</code>?</p>\n", "Tags": "<c++><rvalue>", "AnswerCount": "1"}, "25060473": {"ParentId": "25060360", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As with any type, there are various ways to get a prvalue of type <code>std::nullptr_t</code>:</p>\n<ul>\n<li>cast from an appropriate expression: <code>static_cast&lt;std::nullptr_t&gt;(0)</code></li>\n<li>temporary constructor call: <code>std::nullptr_t{}</code></li>\n<li>call to a function returning <code>std::nullptr_t</code>: <code>std::nullptr_t f() { return {}; } f()</code></li>\n<li>call to a lambda returning <code>std::nullptr_t</code>: <code>[]() -&gt; std::nullptr_t { return {}; }()</code></li>\n<li>a comma expression where the right hand side is a <code>std::nullptr_t</code> prvalue: <code>(\"hello\", nullptr)</code></li>\n<li>a conditional expression where one side has type <code>std::nullptr_t</code> and the other side is of a different value category or is a throw-expression: <code>false ? throw \"oops\" : nullptr</code>, <code>false ? std::move(nullptr) : nullptr</code></li>\n</ul>\n<p>Because <code>std::nullptr_t</code> does not participate in most operators, this is a reasonably exhaustative list; most other expressions with type <code>std::nullptr_t</code> will yield glvalues.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2014-07-31T15:24:00.040", "Id": "25060473", "Score": "2", "CreationDate": "2014-07-31T13:44:27.607", "LastActivityDate": "2014-07-31T15:24:00.040"}, "bq_ids": {"n4140": {"so_25060360_25060360_0": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_25060360_25060360_0": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}}, "n4659": {"so_25060360_25060360_0": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}}}});