post_cb({"bq_ids": {"n4140": {"so_16010083_16010180_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 7156}, "so_16010083_16010180_3": {"length": 19, "quality": 0.8636363636363636, "section_id": 7158}}, "n3337": {"so_16010083_16010180_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 6900}, "so_16010083_16010180_3": {"length": 19, "quality": 0.8636363636363636, "section_id": 6902}}, "n4659": {"so_16010083_16010180_2": {"length": 13, "quality": 0.6842105263157895, "section_id": 8661}, "so_16010083_16010180_3": {"length": 18, "quality": 0.8181818181818182, "section_id": 8665}}}, "16010083": {"ViewCount": "2573", "Body": "<p>I wonder that can sure order between destruction of global object and <code>atexit</code> in C++</p>\n<p>I have a global object and register <code>atexit</code> function like below:</p>\n<pre><code>static MyClass g_class;\n\nvoid onExit()\n{\n    // do some destruction\n}\n\nint main()\n{\n    atexit(onExit);\n\n    return 0;\n}\n</code></pre>\n<p>I've found <code>onExit()</code> is invoked before <code>MyClass::~MyClass()</code> in Visual Studio 2012 and gcc4.7.2. Am I sure that <code>onExit</code> is always invoked before global object(like <code>g_class</code>) destruction?</p>\n<p>I wonder global object register order and <code>atexit</code> register order use same order table.\nOr there is no relation between global object order and <code>atexit</code> order?</p>\n<p>Edited : Sorry I wrote a mistake. I'm so confused while tidying example code. <code>onExit()</code> is invoked before ~MyClass().</p>\n", "AcceptedAnswerId": "16010180", "Title": "Order between destruction of global object and atexit in C++", "CreationDate": "2013-04-15T07:43:39.810", "Id": "16010083", "CommentCount": "5", "LastEditDate": "2013-04-15T09:24:33.150", "PostTypeId": "1", "LastEditorUserId": "1429798", "LastActivityDate": "2013-04-15T09:24:33.150", "Score": "14", "OwnerUserId": "1429798", "Tags": "<c++><order><atexit><global-object>", "AnswerCount": "1"}, "16010180": {"Id": "16010180", "PostTypeId": "2", "Body": "<p><strong>UPDATE:</strong> <em>The OP made some confusion, and it seems VC11 does indeed behave as specified by the C++11 Standard. The following answer was written in the assumption that it did not.</em></p>\n<p><em>Therefore, the answer to this question:</em></p>\n<blockquote>\n<p id=\"so_16010083_16010180_0\">Am I sure that <code>onExit</code> is always invoked before global object(like <code>g_class</code>) destruction?</p>\n</blockquote>\n<p><em>Is <strong>\"Yes\"</strong>, as long as you are working with a fully-compliant compiler.</em></p>\n<hr>\n<blockquote>\n<p id=\"so_16010083_16010180_1\">I've found <code>MyClass::~MyClass()</code> is invoked before <code>onExit()</code> in Visual Studio 2012.</p>\n</blockquote>\n<p>If this is the case, then it is a <strong>bug</strong> in VC11. Per Paragraph 3.6.3/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16010083_16010180_2\">Destructors (12.4) for initialized objects (that is, objects whose lifetime (3.8) has begun) with static storage\n  duration are called as a result of returning from <code>main</code> and as a result of calling <code>std::exit</code> (18.5). [...]</p>\n</blockquote>\n<p>Also, per Paragraph 3.6.3/3:</p>\n<blockquote>\n<p id=\"so_16010083_16010180_3\">If the completion of the initialization of an object with static storage duration is sequenced before a call\n  to <code>std::atexit</code> (see <code>&lt;cstdlib&gt;</code>, 18.5), <strong>the call to the function passed to <code>std::atexit</code> is sequenced before the call to the destructor for the object.</strong></p>\n</blockquote>\n<p>Therefore, in your case, <code>onexit()</code> should be invoked before the destructor of <code>MyClass</code>.</p>\n<p>As far as I can tell, Clang 3.2 and GCC 4.8.0 are compliant in this respect, as shown in this <a href=\"http://liveworkspace.org/code/3kW04t%24370\">live example</a>.</p>\n</hr>", "LastEditorUserId": "1932150", "LastActivityDate": "2013-04-15T08:48:51.590", "Score": "13", "CreationDate": "2013-04-15T07:49:52.170", "ParentId": "16010083", "CommentCount": "3", "OwnerUserId": "1932150", "LastEditDate": "2013-04-15T08:48:51.590"}});