post_cb({"bq_ids": {"n4140": {"so_5100451_5100719_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 5509}, "so_5100451_5100719_0": {"length": 4, "quality": 0.8, "section_id": 5497}}, "n3337": {"so_5100451_5100719_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 5295}, "so_5100451_5100719_0": {"length": 4, "quality": 0.8, "section_id": 5283}}, "n4659": {"so_5100451_5100719_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6944}, "so_5100451_5100719_0": {"length": 4, "quality": 0.8, "section_id": 6931}}}, "5100593": {"Id": "5100593", "PostTypeId": "2", "Body": "<p>The purpose of <code>using base&lt;T&gt;::foo</code> in the function scope is that you want to call <code>foo</code> in the function, and since it gives error, you cannot do that.</p>\n<p>If you want to call the functon (otherwise why you would do that), then you can do these which are allowed:</p>\n<pre><code>this-&gt;template base&lt;T&gt;::foo(); //syntax 1\nthis-&gt;base&lt;T&gt;::foo();          //syntax 2 - simple\nthis-&gt;foo();                   //syntax 3 - simpler\n</code></pre>\n<p>However, you <strong>cannot</strong> write this:</p>\n<pre><code>foo() ;  //error - since foo is in base class template!\n//if you write `using base&lt;T&gt;::foo` at class scope, it will work!\n</code></pre>\n<p>Demo at ideone : <a href=\"http://www.ideone.com/vfDNs\" rel=\"nofollow noreferrer\">http://www.ideone.com/vfDNs</a></p>\n<p>Read this to know when you <em>must</em> use <code>template</code> keyword in a function call:</p>\n<p><a href=\"https://stackoverflow.com/questions/5050870/ugly-compiler-errors-with-template/5050877#5050877\">Ugly compiler errors with template</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-02-24T05:27:08.390", "Score": "2", "CreationDate": "2011-02-24T05:07:16.340", "ParentId": "5100451", "CommentCount": "4", "OwnerUserId": "415784", "LastEditDate": "2017-05-23T12:06:43.223"}, "5100451": {"ViewCount": "3086", "Body": "<p>If I want to use a member of a template base class from a template derived class, I have to bring it into scope as such:</p>\n<pre><code>template &lt;typename T&gt;\nstruct base\n{\n    void foo();\n};\n\ntemplate &lt;typename T&gt;\nstruct derived : base&lt;T&gt;\n{\n    using base&lt;T&gt;::foo;\n};\n</code></pre>\n<p>Why can't I place this using statement into a local scope, like other using statements?</p>\n<pre><code>template &lt;typename T&gt;\nstruct base\n{\n    void foo();\n};\n\ntemplate &lt;typename T&gt;\nstruct derived : base&lt;T&gt;\n{\n    void f()\n    {\n        using base&lt;T&gt;::foo;  // ERROR: base&lt;T&gt; is not a namespace\n    }\n};\n</code></pre>\n", "AcceptedAnswerId": "5100719", "Title": "C++ using statement in member function scope", "CreationDate": "2011-02-24T04:45:03.710", "Id": "5100451", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-02-24T05:27:08.390", "Score": "6", "OwnerUserId": "141719", "Tags": "<c++><templates><using-declaration>", "AnswerCount": "2"}, "5100719": {"Id": "5100719", "PostTypeId": "2", "Body": "<p>The standard (draft 3225) says in <code>[namespace.udecl]</code>:</p>\n<blockquote>\n<p id=\"so_5100451_5100719_0\">A <em>using-declaration</em> for a class member shall be a <em>member-declaration</em>. [ Example:</p>\n</blockquote>\n<pre><code>struct  X  {\n    int  i;\n    static  int  s;\n};\nvoid  f()  {\n    using  X::i; // error:  X::i is a class member\n                 // and this is not a member declaration.\n    using  X::s; // error:  X::s is a class member\n                 // and this is not a member declaration.\n}\n</code></pre>\n<blockquote>\n<p id=\"so_5100451_5100719_1\">\u2014 end example ]</p>\n</blockquote>\n<p>A <em>using-directive</em> has no such restriction, however (<code>[namespace.udir]</code>):</p>\n<blockquote>\n<p id=\"so_5100451_5100719_2\">when looking up a <em>namespace-name</em> in a <em>using-directive</em>,  only namespace names are considered</p>\n</blockquote>\n", "LastActivityDate": "2011-02-24T05:26:25.490", "CommentCount": "2", "CreationDate": "2011-02-24T05:26:25.490", "ParentId": "5100451", "Score": "1", "OwnerUserId": "103167"}});