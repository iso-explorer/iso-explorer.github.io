post_cb({"bq_ids": {"n4140": {"so_25512673_25512970_1": {"length": 7, "quality": 0.875, "section_id": 7070}, "so_25512673_25512970_2": {"length": 27, "quality": 0.9, "section_id": 7070}}, "n3337": {"so_25512673_25512970_1": {"length": 7, "quality": 0.875, "section_id": 6814}, "so_25512673_25512970_2": {"length": 29, "quality": 0.9666666666666667, "section_id": 6814}}, "n4659": {"so_25512673_25512970_2": {"length": 27, "quality": 0.9, "section_id": 8567}}}, "25512673": {"ViewCount": "100", "Body": "<p>I always thought that if I declare member of a class inside class this member is known at the entire scope of a class that is:</p>\n<pre><code> class X\n{\npublic:\n    X(int a) :v_(a)\n    {}\nprivate:\n    int v_;//even though v_ is declared here I'm using it in ctor which is above this line\n};\n</code></pre>\n<p>So that makes sense to me.</p>\n<p>Anyhow this doesn't because I'm getting error that <code>v_</code> isn't known</p>\n<pre><code>class X\n{\npublic:\n    X(decltype(v_) a) :v_(a)//error on this line, compiler doesn't know v_\n    {}\nprivate:\n    int v_;\n};\n</code></pre>\n<p>Would be glad to learn why.</p>\n<p>I'm using intel compiler v14 SP1</p>\n<p>Thank you.</p>\n", "AcceptedAnswerId": "25512970", "Title": "members of a class known at any point inside class", "CreationDate": "2014-08-26T18:23:15.793", "Id": "25512673", "CommentCount": "3", "LastEditDate": "2014-08-26T18:24:43.443", "PostTypeId": "1", "LastEditorUserId": "1760345", "LastActivityDate": "2014-08-26T18:59:56.143", "Score": "5", "OwnerUserId": "207177", "Tags": "<c++>", "AnswerCount": "3"}, "25512757": {"Id": "25512757", "PostTypeId": "2", "Body": "<p>Your code compiles with Clang.</p>\n<p>Reading C++11 specifications you are not allowed to declare the variable after it is being used as function/constructor parameter.</p>\n", "LastEditorUserId": "1829943", "LastActivityDate": "2014-08-26T18:59:56.143", "Score": "1", "CreationDate": "2014-08-26T18:28:25.260", "ParentId": "25512673", "CommentCount": "7", "LastEditDate": "2014-08-26T18:59:56.143", "OwnerUserId": "1829943"}, "25512865": {"Id": "25512865", "PostTypeId": "2", "Body": "<p>In many cases classes including function signatures will be defined in headers, but function bodies in cpp files. Since the header will have been read by the compiler at the start of reading the cpp file, this problem does usually not occur. But indeed, C++ compilers don't look ahead.</p>\n", "LastActivityDate": "2014-08-26T18:35:39.917", "Score": "-1", "CreationDate": "2014-08-26T18:35:39.917", "ParentId": "25512673", "CommentCount": "3", "OwnerUserId": "1577341"}, "25512970": {"Id": "25512970", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25512673_25512970_0\"><strong>3.3.7 Class scope</strong></p>\n<p id=\"so_25512673_25512970_1\"><strong>1</strong> The following rules describe the scope of names declared in classes.</p>\n<p id=\"so_25512673_25512970_2\">1) The potential scope of a name declared in a class consists not only of the declarative region following\n  the name\u2019s point of declaration, but also of all function bodies, brace-or-equal-initializers of non-static\n  data members, and default arguments in that class (including such things in nested classes).</p>\n<p id=\"so_25512673_25512970_3\">...</p>\n</blockquote>\n<p>That means that you can use <code>v_</code> in function bodies, constructor initializer lists and default arguments. You are not allowed to use <code>v_</code> in parameter declarations the way you used it in your code.</p>\n<p>For example, this shall compile</p>\n<pre><code>class X\n{\npublic:\n    X(int a = decltype(v_)()) : v_(a)\n    {}\nprivate:\n    int v_;\n};\n</code></pre>\n<p>but not the second example in your original post.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2014-08-26T18:48:04.797", "Score": "6", "CreationDate": "2014-08-26T18:41:35.657", "ParentId": "25512673", "CommentCount": "3", "LastEditDate": "2014-08-26T18:48:04.797", "OwnerUserId": "187690"}});