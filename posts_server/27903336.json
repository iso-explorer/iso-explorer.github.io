post_cb({"bq_ids": {"n4140": {"so_27903336_27904091_9": {"length": 6, "quality": 1.0, "section_id": 7208}, "so_27903336_27904091_3": {"length": 6, "quality": 1.0, "section_id": 5419}, "so_27903336_27904091_12": {"length": 10, "quality": 1.0, "section_id": 7208}, "so_27903336_27904091_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5419}, "so_27903336_27904091_2": {"length": 5, "quality": 1.0, "section_id": 5419}, "so_27903336_27904091_11": {"length": 11, "quality": 0.9166666666666666, "section_id": 7208}}, "n3337": {"so_27903336_27904091_9": {"length": 6, "quality": 1.0, "section_id": 6952}, "so_27903336_27904091_2": {"length": 5, "quality": 1.0, "section_id": 5214}, "so_27903336_27904091_3": {"length": 6, "quality": 1.0, "section_id": 5214}, "so_27903336_27904091_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5214}, "so_27903336_27904091_12": {"length": 9, "quality": 0.9, "section_id": 6952}, "so_27903336_27904091_11": {"length": 11, "quality": 0.9166666666666666, "section_id": 6952}}, "n4659": {"so_27903336_27904091_9": {"length": 6, "quality": 1.0, "section_id": 8717}, "so_27903336_27904091_2": {"length": 5, "quality": 1.0, "section_id": 6841}, "so_27903336_27904091_3": {"length": 6, "quality": 1.0, "section_id": 6841}, "so_27903336_27904091_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6841}, "so_27903336_27904091_12": {"length": 10, "quality": 1.0, "section_id": 8717}, "so_27903336_27904091_11": {"length": 11, "quality": 0.9166666666666666, "section_id": 8717}}}, "27903336": {"ViewCount": "73", "Body": "<p>I'm writing a constrexpr function taking either a <code>CArray T(&amp;)(N)</code>, either a <code>std::array</code>.\nI think I have to write 2 functions (if you know better I would be happy to know),</p>\n<p>But I'm concerned about what I wrote with the std::array</p>\n<pre><code>    constexpr float LinInterp01(const std::array&lt;float, N&gt;&amp; inArray, float inX);\n</code></pre>\n<p><strong>Is it correct when writing a constrexpr function to pass by const &amp; or not?</strong></p>\n<p>I think it should be because at compile time the compiler would instanciate a copy and there is no notion of L Value, at compile time.</p>\n<p><strong>Could someone explain me this?</strong></p>\n", "AcceptedAnswerId": "27904091", "Title": "Can I use const & as parameter of a constexpr function?", "CreationDate": "2015-01-12T13:40:58.333", "Id": "27903336", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-01-12T14:19:54.153", "Score": "1", "OwnerUserId": "466464", "Tags": "<c++11><constexpr><stdarray>", "AnswerCount": "1"}, "27904091": {"Id": "27904091", "PostTypeId": "2", "Body": "<p>C++ standard section \u00a7 7.1.5 [dcl.constexpr]</p>\n<blockquote>\n<p id=\"so_27903336_27904091_0\">The definition of a constexpr function shall satisfy the following constraints:</p>\n<p id=\"so_27903336_27904091_1\">\u2014 it shall not be virtual (10.3);</p>\n<p id=\"so_27903336_27904091_2\">\u2014 its return type shall be a literal type;</p>\n<p id=\"so_27903336_27904091_3\">\u2014 each of its parameter types shall be a <strong>literal type</strong>;</p>\n</blockquote>\n<p>And section  \u00a7 3.9 [basic.types]</p>\n<blockquote>\n<p id=\"so_27903336_27904091_4\">A type is a literal type if it is:</p>\n<p id=\"so_27903336_27904091_5\">\u2014 void; or</p>\n<p id=\"so_27903336_27904091_6\">\u2014 a scalar type; or</p>\n<p id=\"so_27903336_27904091_7\">\u2014 <strong>a reference type</strong>; or</p>\n<p id=\"so_27903336_27904091_8\">\u2014 an array of literal type; or</p>\n<p id=\"so_27903336_27904091_9\">\u2014 a class type (Clause 9) that has all of the following properties:</p>\n<p id=\"so_27903336_27904091_10\">\u2014 it has a trivial destructor,</p>\n<p id=\"so_27903336_27904091_11\">\u2014 it is an aggregate type (8.5.1) or has at least one constexpr constructor or constructor template\n  that is not a copy or move constructor, and</p>\n<p id=\"so_27903336_27904091_12\">\u2014 all of its non-static data members and base classes are of non-volatile literal types.</p>\n</blockquote>\n<p>So <strong>yes</strong>, you can pass parameters by reference to <code>constexpr</code> functions. </p>\n<p>Now whether or not your function calls will actually be evaluated at compile time depends on the body and calls of <code>LinInterp01</code>.</p>\n", "LastActivityDate": "2015-01-12T14:19:54.153", "Score": "1", "CreationDate": "2015-01-12T14:19:54.153", "ParentId": "27903336", "CommentCount": "3", "OwnerUserId": "3510483"}});