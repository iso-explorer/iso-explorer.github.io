post_cb({"33204020": {"CommentCount": "1", "ViewCount": "1477", "PostTypeId": "1", "LastEditorUserId": "1007353", "CreationDate": "2015-10-18T22:37:27.553", "LastActivityDate": "2015-10-19T00:19:36.793", "Title": "Can a C++ class contain a static const std::array initialized inline in a header file?", "AcceptedAnswerId": "33204136", "LastEditDate": "2015-10-18T22:43:57.370", "Id": "33204020", "Score": "5", "Body": "<p>This is what I've got:</p>\n<pre><code>struct Foo\n{\n   static std::array&lt;double, 4&gt; acgt_default_background_frequencies() { return {0.281774, 0.222020, 0.228876, 0.267330}; }\n};\n</code></pre>\n<p>But I'd prefer to <strong>not use a function</strong> and instead just have a variable, like this:</p>\n<pre><code>struct Foo\n{\n   static constexpr std::array&lt;double, 4&gt; acgt_default_background_frequencies = {0.281774, 0.222020, 0.228876, 0.267330};\n};\n</code></pre>\n<p>What I want compiles, but when I <a href=\"http://ideone.com/8ku69H\">try to use</a> <code>Foo::acgt_default_background_frequencies</code> it gives the linker error \"undefined reference to `Foo::acgt_default_background_frequencies'\".</p>\n<p>Is what I am trying to do possible?  I think it is clearer to the reader of my header if I have the value inlined as a const than to hide it in the .cpp file and having a constant as opposed to a function also seems clearer.  Isn't the point of constexpr to allow stuff like this?  If it isn't possible, why not?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1007353", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33204020_33204136_0": {"section_id": 5908, "quality": 0.9375, "length": 30}}, "n3337": {"so_33204020_33204136_0": {"section_id": 5680, "quality": 0.9375, "length": 30}}, "n4659": {"so_33204020_33204136_0": {"section_id": 7390, "quality": 0.71875, "length": 23}}}, "33204136": {"ParentId": "33204020", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>What you have in the second example is a <em>declaration</em> of a <code>static</code> data member which has an initializer, but you haven't provided a <em>definition</em> anywhere. If you make <a href=\"http://en.cppreference.com/w/cpp/language/definition#ODR-use\" rel=\"nofollow\"><em>odr-use</em></a> of that member, a definition will be required.</p>\n<p>To provide a definition, add the following to your .cpp file</p>\n<pre><code>constexpr std::array&lt;double, 4&gt; Foo::acgt_default_background_frequencies;\n</code></pre>\n<p>The declaration in the question works in C++14, but note that in C++11 you need an extra set of curly braces, e.g.</p>\n<pre><code>struct Foo\n{\n  static constexpr std::array&lt;double, AlphabetSize&gt; acgt_default_background_frequencies = {{0.281774, 0.222020, 0.228876, 0.267330}};\n};\n</code></pre>\n<p>The relevant standardese from N3337 <em>\u00a79.4.2/3 [class.static.data]</em></p>\n<blockquote>\n<p id=\"so_33204020_33204136_0\">... A <code>static</code> data member of literal type can be declared in the class definition with the <code>constexpr</code> specifier; if so, its declaration shall specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression. ... The member shall still be de\ufb01ned in a namespace scope if it is odr-used (3.2) in the program and the namespace scope definition shall not contain an <em>initializer</em>. </p>\n</blockquote>\n", "OwnerUserId": "241631", "LastEditorUserId": "1007353", "LastEditDate": "2015-10-19T00:19:36.793", "Id": "33204136", "Score": "6", "CreationDate": "2015-10-18T22:51:30.283", "LastActivityDate": "2015-10-19T00:19:36.793"}});