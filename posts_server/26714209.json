post_cb({"26714209": {"CommentCount": "2", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "3747990", "CreationDate": "2014-11-03T12:19:48.230", "LastActivityDate": "2014-11-11T14:52:37.730", "LastEditDate": "2014-11-04T17:45:54.290", "AcceptedAnswerId": "26715518", "OwnerDisplayName": "user3920237", "Title": "Why is bernoulli_distribution::param_type's constructor explicit?", "Id": "26714209", "Score": "1", "Body": "<p>In \u00a726.5.1.6/7 it says:</p>\n<blockquote>\n<p id=\"so_26714209_26714209_0\">It is unspecified whether <code>D::param_type</code> is declared as a (nested)\n  class or via a typedef. In this subclause 26.5, declarations of\n  <code>D::param_type</code> are in the form of typedefs for convenience of\n  exposition only.</p>\n</blockquote>\n<p>This seems to indicate that the <code>param_type</code> is implementation defined. In particular for GCC and Clang, the following does not compile:</p>\n<pre><code>std::bernoulli_distribution d(0.50);\nd.param(0.25);\n</code></pre>\n<p>But for MSVC 2013 it does. Looking in random.h for libstdc++, it shows that <code>param_type</code>'s constructor is marked explicit:</p>\n<pre><code>struct param_type\n{\n  typedef bernoulli_distribution distribution_type;\n\n  explicit\n  param_type(double __p = 0.5)\n  : _M_p(__p)\n  {\n_GLIBCXX_DEBUG_ASSERT((_M_p &gt;= 0.0) &amp;&amp; (_M_p &lt;= 1.0));\n  }\n\n  double\n  p() const\n  { return _M_p; }\n\n  friend bool\n  operator==(const param_type&amp; __p1, const param_type&amp; __p2)\n  { return __p1._M_p == __p2._M_p; }\n\nprivate:\n  double _M_p;\n};\n</code></pre>\n<p>thus not allowing the code above to compile.</p>\n<p>What reason would they choose to make the constructor explicit?</p>\n", "Tags": "<c++><c++11><random><libstdc++>", "AnswerCount": "1"}, "26715518": {"ParentId": "26714209", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Reading the following paragraph in the specification (following on the quote above); C++ \u00a7 26.5.1.6/9:</p>\n<blockquote>\n<p id=\"so_26714209_26715518_0\">For each of the constructors of <code>D</code> taking arguments corresponding to parameters of the distribution, <code>P</code> shall have a <strong>corresponding constructor subject to the same requirements</strong> and taking arguments identical in number, type, and default values. Moreover, for each of the member functions of <code>D</code> that return values corresponding to parameters of the distribution, <code>P</code> shall have a corresponding member function with the identical name, type, and semantics.</p>\n</blockquote>\n<p>Where;</p>\n<ul>\n<li><code>P</code> is the embedded <code>param_type</code> and</li>\n<li><code>D</code> is the random number distribution.</li>\n</ul>\n<p>And given (\u00a7 26.5.8.3.1);</p>\n<pre><code>explicit bernoulli_distribution(double p = 0.5);\n</code></pre>\n<p>It can be argued that the requirements of the constructor of <code>bernoulli_distribution</code> are:</p>\n<ul>\n<li>explicit construction from a single parameter</li>\n<li>that single parameter is of type <code>double</code></li>\n<li>the parameter has a default argument of <code>0.5</code></li>\n</ul>\n<p>Thus the embedded <code>param_type</code> should be the same since they would then have <em>\"the same requirements\"</em> as dictated by \u00a7 26.5.1.6/9. Giving it the form;</p>\n<pre><code>explicit param_type(double __p = 0.5) { /*...*/ }\n</code></pre>\n<p>Although admittedly I think this may not initially be very clear in the wording. I suspect that the libstdc++ implementation has a more accurate interpretation of the specification and the MSVC implementation may be incorrect.</p>\n<p><strong>Update</strong></p>\n<p>Microsoft have reportedly fixed this, look out for the <em>VS 14 RTM</em> when it becomes available.</p>\n", "OwnerUserId": "3747990", "LastEditorUserId": "3747990", "LastEditDate": "2014-11-11T14:52:37.730", "Id": "26715518", "Score": "4", "CreationDate": "2014-11-03T13:37:29.410", "LastActivityDate": "2014-11-11T14:52:37.730"}, "bq_ids": {"n4140": {"so_26714209_26714209_0": {"section_id": 3516, "quality": 0.9375, "length": 15}, "so_26714209_26715518_0": {"section_id": 3518, "quality": 0.9736842105263158, "length": 37}}, "n3337": {"so_26714209_26714209_0": {"section_id": 3381, "quality": 0.9375, "length": 15}, "so_26714209_26715518_0": {"section_id": 3383, "quality": 0.9736842105263158, "length": 37}}, "n4659": {"so_26714209_26714209_0": {"section_id": 4279, "quality": 0.9375, "length": 15}, "so_26714209_26715518_0": {"section_id": 4281, "quality": 0.9736842105263158, "length": 37}}}});