post_cb({"46900655": {"CommentCount": "3", "AcceptedAnswerId": "46907206", "PostTypeId": "1", "LastEditorUserId": "481267", "CreationDate": "2017-10-24T01:03:20.160", "LastActivityDate": "2017-10-24T09:44:31.740", "LastEditDate": "2017-10-24T01:13:51.467", "ViewCount": "206", "FavoriteCount": "3", "Title": "Is it legal to use a const value captured in a lambda as a template argument?", "Id": "46900655", "Score": "15", "Body": "<p>Consider the following code, provided by a colleague:</p>\n<pre><code>#include &lt;array&gt;\n#include &lt;string&gt;\n\nint main() {\n    const int size = 4;\n    return [size]() {\n      std::array&lt;std::string, size&gt; a; // *\n      return a.size();\n    }();\n}\n</code></pre>\n<p>It's accepted by Clang 5.0.0 but rejected by GCC 7.2 with the error message for the starred line being:</p>\n<pre><code>error: '__closure' is not a constant expression\n</code></pre>\n<p>Which compiler is right?</p>\n", "Tags": "<c++><templates><lambda><language-lawyer>", "OwnerUserId": "481267", "AnswerCount": "1"}, "46907206": {"ParentId": "46900655", "CommentCount": "0", "CreationDate": "2017-10-24T09:44:31.740", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "46907206", "Score": "7", "Body": "<p>The rule is actually intuitive: any occurrence of a variable that doesn't necessitate a capture refers to the original variable. <a href=\"http://eel.is/c++draft/expr.prim.lambda.capture#11\" rel=\"noreferrer\">[expr.prim.lambda]/11</a>:</p>\n<blockquote>\n<p id=\"so_46900655_46907206_0\">Every <em>id-expression</em> within the <em>compound-statement</em> of a\n  <em>lambda-expression</em> that is an odr-use of an entity captured by copy is\n  transformed into an access to the corresponding unnamed data member of\n  the closure type. [\u2009Note: <strong>An <em>id-expression</em> that is not an odr-use\n  refers to the original entity</strong>, never to a member of the closure type.\n  [\u2026] \u2014\u2009end note\u2009]</p>\n</blockquote>\n<p>Clearly, the declared <code>size</code> variable can be used in constant expressions, hence Clang is right.</p>\n", "LastActivityDate": "2017-10-24T09:44:31.740"}, "bq_ids": {"n4140": {"so_46900655_46907206_0": {"section_id": 5977, "quality": 0.9, "length": 27}}, "n3337": {"so_46900655_46907206_0": {"section_id": 5745, "quality": 0.8, "length": 24}}, "n4659": {"so_46900655_46907206_0": {"section_id": 7474, "quality": 0.9, "length": 27}}}});