post_cb({"bq_ids": {"n4140": {"so_17280755_17280812_0": {"length": 22, "quality": 0.7857142857142857, "section_id": 6009}, "so_17280755_17280812_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 6009}}, "n3337": {"so_17280755_17280812_0": {"length": 22, "quality": 0.7857142857142857, "section_id": 5777}, "so_17280755_17280812_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5777}}, "n4659": {"so_17280755_17280812_0": {"length": 22, "quality": 0.7857142857142857, "section_id": 7508}}}, "17280755": {"ViewCount": "118", "Body": "<p>I just stumbled across this: When postifix incrementing a bool twice, the integer value still is 1 instead of the expected 2. I'd like to know why this happens.</p>\n<pre><code>bool test = false; // results in integer 0\ntest++; // results in integer 1\ntest++; // results in integer 1\n\n// but there still is at least one byte of memory used:\n// results in integer 137\n*(unsigned char*)(&amp;test) = 137;\n</code></pre>\n", "AcceptedAnswerId": "17280812", "Title": "c++ bool anomaly -- why is this possible?", "CreationDate": "2013-06-24T16:48:31.490", "Id": "17280755", "CommentCount": "2", "LastEditDate": "2016-08-24T09:09:17.710", "PostTypeId": "1", "LastEditorUserId": "1683939", "LastActivityDate": "2016-08-24T09:09:17.710", "Score": "-1", "OwnerUserId": "1683939", "Tags": "<c++><language-features>", "AnswerCount": "3"}, "17280799": {"Id": "17280799", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17280755_17280799_0\">why is this possible?!</p>\n</blockquote>\n<p>Undefined behaviour is just that - undefined.  Anything at all could happen.</p>\n<blockquote>\n<p id=\"so_17280755_17280799_1\">if enough memory for <code>137</code> is allocated, then why the hell <code>test++</code>; results in <code>1</code>?</p>\n</blockquote>\n<p>The language specification defines that behaviour.</p>\n", "LastActivityDate": "2013-06-24T16:50:50.090", "Score": "0", "CreationDate": "2013-06-24T16:50:50.090", "ParentId": "17280755", "CommentCount": "0", "OwnerUserId": "116908"}, "17280808": {"Id": "17280808", "PostTypeId": "2", "Body": "<p>Because you've invoked undefined behavior by casting a pointer to a different type and performing read/write on it.  UB = anything can happen, including nasal demons.</p>\n", "LastActivityDate": "2013-06-24T16:51:53.180", "Score": "0", "CreationDate": "2013-06-24T16:51:53.180", "ParentId": "17280755", "CommentCount": "0", "OwnerUserId": "301883"}, "17280812": {"Id": "17280812", "PostTypeId": "2", "Body": "<p>This is how the <code>++</code> operator is specified.  See C++11 \u00a75.2.6[expr.post.incr]/1 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17280755_17280812_0\">The value of a postfix <code>++</code> expression is the value of its operand.  [Note: the value obtained is a copy of the original value \u2014end note] The operand shall be a modifiable lvalue. The type of the operand shall be an arithmetic type or a pointer to a complete object type.</p>\n<p id=\"so_17280755_17280812_1\">The value of the operand object is modified by adding 1 to it, <strong>unless the object is of type bool, in which case it is set to true.</strong> [Note: this use is deprecated, see Annex D. \u2014end note]</p>\n</blockquote>\n<p>(The prefix <code>++</code> operator has similar language to allow it to be applied to a <code>bool</code> value.)</p>\n<p>Modifying the <code>bool</code> object through a pointer or reference of a type other than <code>bool</code> yields undefined behavior.</p>\n", "LastActivityDate": "2013-06-24T16:52:08.900", "Score": "8", "CreationDate": "2013-06-24T16:52:08.900", "ParentId": "17280755", "CommentCount": "4", "OwnerUserId": "151292"}});