post_cb({"bq_ids": {"n4140": {"so_11279647_11281056_0": {"length": 12, "quality": 0.8, "section_id": 5451}, "so_11279647_11281056_1": {"length": 6, "quality": 1.0, "section_id": 304}}, "n3337": {"so_11279647_11281056_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5245}, "so_11279647_11281056_1": {"length": 6, "quality": 1.0, "section_id": 295}}, "n4659": {"so_11279647_11281056_0": {"length": 9, "quality": 0.6, "section_id": 6889}, "so_11279647_11281056_1": {"length": 6, "quality": 1.0, "section_id": 311}}}, "11279661": {"Id": "11279661", "PostTypeId": "2", "Body": "<p>Have a look at template argument deduction. <code>auto x = stuff;</code> is quite equivalent to <code>template&lt;typename T&gt; void f(T x) {} f(stuff);</code> inso far as the type of <code>x</code>.</p>\n", "LastEditorUserId": "427309", "LastActivityDate": "2012-07-01T04:52:13.837", "Score": "3", "CreationDate": "2012-07-01T04:47:25.103", "ParentId": "11279647", "CommentCount": "0", "OwnerUserId": "298661", "LastEditDate": "2012-07-01T04:52:13.837"}, "11281056": {"Id": "11281056", "PostTypeId": "2", "Body": "<p>From C++11 draft, 7.1.6.4 (<code>auto</code> specifier) paragraph 6:</p>\n<blockquote>\n<p id=\"so_11279647_11281056_0\">The type deduced for the variable d is then the deduced A determined using the rules of template argument deduction from a function call (14.8.2.1).</p>\n</blockquote>\n<p>And from 14.8.2.1 (<em>Deducing template arguments from a function call</em>) paragraph 3:</p>\n<blockquote>\n<p id=\"so_11279647_11281056_1\">If P is a reference type, the type referred to by P is used for type deduction.</p>\n</blockquote>\n<p>So the reference is just ignored for the type deduction of <code>auto</code>.</p>\n<p>Note how this rule is different from that of <code>decltype</code>.</p>\n<p><strong>UPDATE</strong>: Please see my comment below, as I think 14.8.2.1 paragraph 3 does not apply.</p>\n", "LastEditorUserId": "865874", "LastActivityDate": "2012-07-02T08:20:17.850", "Score": "5", "CreationDate": "2012-07-01T09:55:17.863", "ParentId": "11279647", "CommentCount": "1", "OwnerUserId": "865874", "LastEditDate": "2012-07-02T08:20:17.850"}, "11279647": {"ViewCount": "192", "Body": "<p>I'm trying to understand why <code>not_a_ref</code> is not a reference.  I understand that I can make it a reference by <code>auto &amp;</code>.  I dug around in the standard for awhile, but got lost and couldn't figure out where this behaviour is defined.</p>\n<p>Example:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstd::vector&lt;int&gt; stuff;\n\nstd::vector&lt;int&gt;&amp; get_stuff()\n{\n    return stuff;\n}\n\nint main()\n{\n    auto not_a_ref = get_stuff();\n\n    if( std::is_reference&lt;decltype(not_a_ref)&gt;::value )\n        std::cout &lt;&lt; \"is_reference true\" &lt;&lt; std::endl;\n    else\n        std::cout &lt;&lt; \"is_reference false\" &lt;&lt; std::endl;\n\n    if( &amp;not_a_ref != &amp;stuff )\n        std::cout &lt;&lt; \"definately not a reference\" &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "11281056", "Title": "Why is auto not a reference when its initializer is a reference?", "CreationDate": "2012-07-01T04:43:31.633", "Id": "11279647", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2012-07-02T08:20:17.850", "Score": "9", "OwnerUserId": "213080", "Tags": "<c++><c++11><standards>", "AnswerCount": "3"}, "11280482": {"Id": "11280482", "PostTypeId": "2", "Body": "<p>According to the C++11 standard, auto counts as a simple-type-specifier [7.1.6.2], therefore the same rules apply to it as to other simple-type-specifiers. This means that declaring references with auto is no different from anything else.</p>\n<p>This means next line :</p>\n<pre><code>auto not_a_ref = get_stuff();\n</code></pre>\n<p>is going to be the same as :</p>\n<pre><code>std::vector&lt;int&gt; not_a_ref = get_stuff();\n</code></pre>\n", "LastActivityDate": "2012-07-01T08:11:49.057", "CommentCount": "0", "CreationDate": "2012-07-01T08:11:49.057", "ParentId": "11279647", "Score": "-1", "OwnerUserId": "476681"}});