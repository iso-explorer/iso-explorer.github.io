post_cb({"35683466": {"ParentId": "35682325", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The reason that specs have wording such as \"may\" and \"can\", and other vague words that allow for other possibilities comes from the wish by the spec writers not wanting to (unnecessarily) limit the implementation of a \"better\" solution of something. </p>\n<p>Imagine a system where time in general is counted in seconds, and the <code>system_clock</code> is just that - the <code>system_clock::period</code> will return 1 second. This time is stored as a single 64-bit integer.</p>\n<p>Now, in the same system, there is also a time in nano-seconds, but it's stored as a 128-bit integer. The resulting time-calculations are slightly more complex due to this large integer format, and for someone that only needs 1s precision for their time (in a system where a large number of calculations on time are made), you wouldn't want to have the extra penalty of using <code>high_precision_clock</code>, when the system doesn't need it.</p>\n<p>As to if there are such things in real life, I'm not sure. The key is that it's not a violation to the standard, if you care to implement it such.</p>\n<p>Note that steady is very much a property of \"what happens when the system changes time\" (e.g. if the outside network has been down for a several days, and the internal clock in the system has drifted off from the atomic clock that the network time updates to). Using <code>steady_clock</code> will guarantee that time doesn't go backwards or suddenly jumps forward 25 seconds all of a sudden. Likewise, there is no problem when there is a \"leap second\" or similar time adjustment in the computer system. On the other hand, a <code>system_clock</code> is guaranteed to give you the correct new time if you give it a forward duration past a daylight savings time, or some such, where <code>steady_clock</code> will just tick along hour after hour, regardless. So choosing the right one of those will affect the recording of your favourite program in the digital TV recorder - <code>steady_clock</code> will record at the wrong time [my DTV recorder did this wrong a few years back, but they appear to have fixed it now].</p>\n<p><code>system_clock</code> should also take into account the user (or sysadmin) changing the clock in the system, <code>steady_clock</code> should NOT do so.</p>\n<p>Again, <code>high_resolution_clock</code> may or may not be <code>steady</code> - it's up to the implementor of the C++ library to give the appropriate response to <code>is_steady</code>. </p>\n<p>In the 4.9.2 version of <code>&lt;chrono&gt;</code>, we find this <code>using high_resolution_clock = system_clock;</code>, so in this case it's a direct <code>typedef</code> (by a different name). But the spec doesn't REQUIRE this.</p>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2016-02-28T14:10:35.690", "Id": "35683466", "Score": "4", "CreationDate": "2016-02-28T14:03:58.080", "LastActivityDate": "2016-02-28T14:10:35.690"}, "bq_ids": {"n4140": {"so_35682325_35682325_0": {"section_id": 4853, "quality": 1.0, "length": 5}}, "n3337": {"so_35682325_35682325_0": {"section_id": 4648, "quality": 1.0, "length": 5}}, "n4659": {"so_35682325_35682325_0": {"section_id": 6278, "quality": 1.0, "length": 5}}}, "35682325": {"CommentCount": "2", "ViewCount": "127", "CreationDate": "2016-02-28T12:08:06.537", "LastActivityDate": "2016-02-28T14:10:35.690", "Title": "Is there a standard library implementation where high_resolution_clock is not a typedef?", "PostTypeId": "1", "Id": "35682325", "Score": "7", "Body": "<p>The C++ Draft par <em>20.12.7.3</em> reads: </p>\n<blockquote>\n<p id=\"so_35682325_35682325_0\"><code>high_resolution_clock</code> may be a synonym for <code>system_clock</code> or <code>steady_clock</code></p>\n</blockquote>\n<p>Of course this <strong>may</strong> mandates nothing but I wonder :</p>\n<ul>\n<li>Is there any point for <code>high_resolution_clock</code> to something other that a typedef ?</li>\n<li>Are there such implementations ? </li>\n<li>If a clock with a shorter tick period is devised it can either be steady or not steady. So if such a mechanism exists, wouldn't we want to \"improve\" <code>system_clock</code> and <code>high_resolution_clock</code> as well, defaulting to the <code>typedef</code> solution once more ? </li>\n</ul>\n", "Tags": "<c++><chrono>", "OwnerUserId": "4224575", "AnswerCount": "1"}});