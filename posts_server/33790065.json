post_cb({"bq_ids": {"n4140": {"so_33790065_33790696_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 382}, "so_33790065_33791273_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 3222}}, "n3337": {"so_33790065_33790696_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 373}, "so_33790065_33791273_0": {"length": 26, "quality": 0.896551724137931, "section_id": 3096}}, "n4659": {"so_33790065_33791273_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 3979}}}, "33791273": {"Id": "33791273", "PostTypeId": "2", "Body": "<p>I don't see any rules that forbid case 1 and 2 nor can I find a relevant defect report either.</p>\n<p>All we really have from the draft C++ standard is from section <code>8.3.2</code> <em>[dcl.ref]</em>:</p>\n<blockquote>\n<p id=\"so_33790065_33791273_0\">[...]A reference shall be initialized to refer to a valid object or\n  function. [ Note: in particular, a null reference cannot exist in a well-defined program, because the only way\n  to create such a reference would be to bind it to the \u201cobject\u201d obtained by indirection through a null pointer,\n  which causes undefined behavior.[...]</p>\n</blockquote>\n<p>which does not apply to case 1 since we are not initialing a reference and neither case 2 since the object is <em>valid</em> when we initialize the reference. </p>\n<p>This does seem to apply to case 3. So what does <em>valid object</em> mean is subject of the following defect report. The defect report which covers this topic is still open and therefore we can only get a a feel for current thinking which is that this should be undefined behavior.</p>\n<p>If we look at <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#453\" rel=\"nofollow\">defect report 453: References may only bind to \u201cvalid\u201d objects </a>, which deals with what it means to bind a reference to an invalid object. The current proposed resolution says:</p>\n<blockquote>\n<p id=\"so_33790065_33791273_1\">[...]If an lvalue to which a reference is directly bound designates neither an existing object or function of an appropriate type (8.5.3 [dcl.init.ref]), nor a region of storage of suitable size and alignment to contain an object of the reference's type (1.8 [intro.object], 3.8 [basic.life], 3.9 [basic.types]), the behavior is undefined. [...]</p>\n</blockquote>\n<p>So we can say the current thinking is that this should be undefined behavior but currently this is defect and so we can't say for sure until this defect report is resolved. I would err on the side of caution and assume it is undefined behavior.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-11-24T19:56:06.303", "Score": "4", "CreationDate": "2015-11-18T22:01:12.637", "ParentId": "33790065", "CommentCount": "1", "LastEditDate": "2015-11-24T19:56:06.303", "OwnerUserId": "1708801"}, "33790696": {"Id": "33790696", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33790065_33790696_0\">2) Is it undefined behavior to simply have a reference to an object that no longer exists, even if that reference is not used?</p>\n</blockquote>\n<p>No. The rule that references must refer to a valid object applies when the reference is inintialised. The rule has already been quoted in the comments: \"A reference shall be initialized to refer to a valid object or function.\" This rule has not been violated in your program, and there are no other restrictions on references requiring them to refer to valid objects or functions after initialization.</p>\n<p>The standard has a few examples involving dangling references, such as [class.temporary]5.4:</p>\n<blockquote id=\"so_33790065_33790696_1\">\n<pre><code>struct S { int mi; const std::pair&lt;int,int&gt;&amp; mp; };\nS a { 1, {2,3} };\nS* p = new S{ 1, {2,3} };  // Creates dangling reference.\n</code></pre>\n</blockquote>\n<p>and doesn't say for any such example that the mere existence of a dangling reference is invalid. Although it's never explicitly stated as allowed, the absence of any rule prohibiting it is enough to allow it.</p>\n<blockquote>\n<p id=\"so_33790065_33790696_2\">1) Is it undefined behavior to return a reference to a temporary, even if that reference is not used?</p>\n</blockquote>\n<p>No. The construction of the result (the initialisation of the reference) happens in the context of the called function. There can even be extra code in the called function that runs after the construction of the result: destructors for local objects run after the construction of the result has finished. Since the reference is initialized to a valid object, this is just like your second question, that same rule still hasn't been violated.</p>\n<blockquote>\n<p id=\"so_33790065_33790696_3\">3) Is it undefined behavior to combine these?</p>\n</blockquote>\n<p>Yes. In your example, <code>p</code> is not initialised to refer to a valid object or function. As you can tell from the comments on your question, there are issues with the wording in the standard, but the intent of this rule pretty clearly is that if it is violated, the behaviour is undefined.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2015-11-18T21:37:55.600", "Score": "6", "CreationDate": "2015-11-18T21:25:08.767", "ParentId": "33790065", "CommentCount": "0", "LastEditDate": "2015-11-18T21:37:55.600", "OwnerUserId": "743382"}, "33790065": {"ViewCount": "326", "Body": "<p>1) Is it undefined behavior to return a reference to a temporary, even if that reference is not used? For example, is this program guaranteed to output \"good\":</p>\n<pre><code>int&amp; func()\n{\n    int i = 5;\n    return i;\n}\n\nint main()\n{\n    func();\n\n    cout &lt;&lt; \"good\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>2) Is it undefined behavior to simply have a reference to an object that no longer exists, even if that reference is not used? For example, is this program guaranteed to output \"good\":</p>\n<pre><code>int main()\n{\n    int *j = new int();\n    int &amp;k = *j;\n    delete j;\n\n    cout &lt;&lt; \"good\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>3) Is it undefined behavior to combine these?</p>\n<pre><code>int&amp; func()\n{\n    int i = 5;\n    return i;\n}\n\nint main()\n{\n    int&amp; p = func();\n\n    cout &lt;&lt; \"good\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "33791273", "Title": "Undefined behavior and temporaries", "CreationDate": "2015-11-18T20:49:09.227", "Id": "33790065", "CommentCount": "25", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2015-11-18T20:55:38.893", "LastEditorUserId": "721269", "LastActivityDate": "2015-11-24T19:56:06.303", "Score": "15", "OwnerUserId": "721269", "Tags": "<c++><language-lawyer><undefined-behavior><temporary-objects>", "AnswerCount": "2"}});