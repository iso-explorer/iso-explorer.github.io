post_cb({"7889192": {"LastActivityDate": "2011-10-25T12:32:03.920", "LastEditorUserId": "85371", "ParentId": "7889087", "CommentCount": "6", "PostTypeId": "2", "Score": "12", "Body": "<p>The return type of lambdas can be implicitly inferred, but you need to have a single <code>return</code> statement to achieve this; that's why your \"working\" lambda works (return type inferred to be <code>bool</code>).</p>\n<p>sehe's solution explicitly declares the return type, so it works fine as well.</p>\n<p><strong>Update:</strong></p>\n<p>The C++11 standard, \u00a75.1.2/4 states:</p>\n<blockquote>\n<p id=\"so_7889087_7889192_0\">If a lambda-expression does not include a <em>trailing-return-type</em>, it is\n  as if the trailing-return-type denotes the following type:</p>\n<ul>\n<li><p id=\"so_7889087_7889192_1\">If the compound-statement is of the form\n  <code>{ return expression ; }</code> the type of the returned expression after\n  lvalue-to-rvalue conversion (4.1), array-to-pointer conversion\n  (4.2), and function-to-pointer conversion (4.3);</p></li>\n<li><p id=\"so_7889087_7889192_2\">otherwise, <code>void</code>.</p></li>\n</ul>\n</blockquote>\n<p>Your not-working lambda falls into the second category.</p>\n", "Id": "7889192", "LastEditDate": "2011-10-25T12:32:03.920", "OwnerUserId": "50079", "CreationDate": "2011-10-25T12:23:07.483"}, "7889112": {"LastActivityDate": "2011-10-25T12:25:44.180", "LastEditorUserId": "85371", "ParentId": "7889087", "CommentCount": "9", "PostTypeId": "2", "Score": "11", "Body": "<p>As Mike noted, <strong>if the lambda's body is a single return statement, then the return type is inferred from that (see 5.1.2/4)</strong> (thanks Mike).</p>\n<pre><code>std::min_element(begin, end, [] (const PointAndAngle &amp; p1, const PointAndAngle &amp; p2)\n  -&gt; bool \n {\n    if (p1.first-&gt;y() &lt; p2.first-&gt;y())\n         return true;\n    else \n        return false;\n}\n</code></pre>\n<p>Note <code>-&gt; bool</code>.</p>\n", "Id": "7889112", "LastEditDate": "2011-10-25T12:25:44.180", "OwnerUserId": "85371", "CreationDate": "2011-10-25T12:15:26.330"}, "bq_ids": {"n4659": {"so_7889087_7889192_1": {"section_id": 7667, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_7889087_7889192_0": {"section_id": 5732, "quality": 1.0, "length": 8}, "so_7889087_7889192_1": {"section_id": 5732, "quality": 0.9285714285714286, "length": 13}}}, "7889087": {"AcceptedAnswerId": "7889192", "Tags": "<c++><visual-studio-2010><lambda>", "CommentCount": "3", "OwnerUserId": "680031", "Body": "<p>I want to find point, which has the less Y coordinate (if more of such points, find the one with smallest X).\nWhen writing it with lambda:</p>\n<pre><code>    std::min_element(begin, end, [](PointAndAngle&amp; p1, PointAndAngle&amp; p2) {\n        if (p1.first-&gt;y() &lt; p2.first-&gt;y())\n            return true;\n        else if (p1.first-&gt;y() &gt; p2.first-&gt;y())\n            return false;\n        else \n            return p1.first-&gt;x() &lt; p2.first-&gt;x();\n    }\n</code></pre>\n<p>I am getting:</p>\n<pre><code>error C3499: a lambda that has been specified to have a void return type cannot return a value\n</code></pre>\n<p>what is the difference between:</p>\n<pre><code>    // works\n    std::min_element(begin, end, [](PointAndAngle&amp; p1, PointAndAngle&amp; p2) {\n        return p1.first-&gt;y() &lt; p2.first-&gt;y();\n    }\n</code></pre>\n<p>and</p>\n<pre><code>    // does not work\n    std::min_element(begin, end, [](PointAndAngle&amp; p1, PointAndAngle&amp; p2) {\n        if (p1.first-&gt;y() &lt; p2.first-&gt;y())\n            return true;\n        else \n            return false;\n    }\n</code></pre>\n", "Id": "7889087", "CreationDate": "2011-10-25T12:13:12.410", "ViewCount": "10006", "LastActivityDate": "2017-03-15T14:56:48.003", "LastEditorUserId": "158259", "PostTypeId": "1", "Title": "lambda returning bool", "AnswerCount": "2", "Score": "15", "LastEditDate": "2017-03-15T14:56:48.003"}});