post_cb({"20871205": {"ParentId": "20871139", "CommentCount": "1", "Body": "<p>Neither of these expressions are legal, they should both fail to compile.</p>\n<p>C++11, 5.17.1:</p>\n<blockquote>\n<p id=\"so_20871139_20871205_0\">The assignment operator (=) and the compound assignment operators all group right-to-left. All require a modifiable lvalue as their left operand and return an lvalue referring to the left operand.</p>\n</blockquote>\n<p>5.4:</p>\n<blockquote>\n<p id=\"so_20871139_20871205_1\">Explicit type conversion (cast notation) [expr.cast]\n  1 The result of the expression (T) cast-expression is of type T. The result is an lvalue if T is an lvalue reference type or an rvalue reference to function type and an xvalue if T is an rvalue reference to object type; otherwise the result is a prvalue.</p>\n</blockquote>\n<p>So both expressions violate these constraints.</p>\n", "Id": "20871205", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "4", "CreationDate": "2014-01-01T17:24:46.047", "LastActivityDate": "2014-01-01T17:24:46.047"}, "20871191": {"ParentId": "20871139", "CommentCount": "1", "CreationDate": "2014-01-01T17:23:05.250", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "20871191", "Score": "0", "Body": "<p>The result of a value conversion is an rvalue. You cannot assign to rvalues of fundamental types.</p>\n<p>In other words, for <code>int a = 10;</code>, <code>a</code> is an lvalue of type <code>int</code>, but <code>(long) a</code> is a temporary rvalue of type <code>long</code>, and you cannot assign to the temporary. Likewise for pointers.</p>\n", "LastActivityDate": "2014-01-01T17:23:05.250"}, "20871139": {"CommentCount": "4", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "620029", "CreationDate": "2014-01-01T17:19:09.360", "LastActivityDate": "2014-01-02T16:22:18.780", "Title": "Casting and pointer casting in C++", "AcceptedAnswerId": "20871205", "LastEditDate": "2014-01-01T18:33:43.357", "Id": "20871139", "Score": "1", "Body": "<p>Can anyone explain me why this is true:</p>\n<pre><code>char *p;\nshort  i;\nlong l;\n\n(long *) p = &amp;l ;       /* Legal cast   */\n(long) i = l ;          /* Illegal cast */\n</code></pre>\n<p>I know it has something to do with lvalue and rvalue but shouldn't <code>(long *) p</code> be a rvalue?</p>\n<p><strong>edit:</strong></p>\n<p>sorry it seems I confused myself and others, I asked this while reading <a href=\"http://msdn.microsoft.com/en-us/library/bkbs2cds.aspx\" rel=\"nofollow\">\"this MDSN\"</a> and I was surprised to see this syntax, I see it's a special feature that allows to convert lvalue into lvalue as long as it's the same size.</p>\n", "Tags": "<c++><pointers><casting><lvalue><rvalue>", "OwnerUserId": "620029", "AnswerCount": "4"}, "20871169": {"ParentId": "20871139", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-01-01T17:21:33.457", "Score": "0", "LastEditorUserId": "2345215", "LastEditDate": "2014-01-01T17:26:54.103", "Id": "20871169", "OwnerUserId": "2345215", "Body": "<p>Why do you think your cast is legal? I'm getting <code>error C2106: '=' : left operand must be l-value</code> on both casts.</p>\n<p>This shouldn't be legal. If you really want to do it, you have to cast it like this:</p>\n<pre><code>(long*&amp;)p = &amp;l; // equivalent to *(long**)&amp;p = &amp;l\n</code></pre>\n<p>But don't do that unless you know what you are doing.</p>\n", "LastActivityDate": "2014-01-01T17:26:54.103"}, "20871187": {"ParentId": "20871139", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-01-01T17:22:43.637", "Score": "2", "LastEditorUserId": "560648", "LastEditDate": "2014-01-02T16:22:18.780", "Id": "20871187", "OwnerUserId": "560648", "Body": "<blockquote>\n<p id=\"so_20871139_20871187_0\">shouldn't (long *) p be a rvalue?</p>\n</blockquote>\n<p><strong>It is.</strong></p>\n<p>They're both prvalues and, as such, <em>both</em> statements are ill-formed:</p>\n<blockquote>\n<p id=\"so_20871139_20871187_1\"><code>[C++03: 5.4/1]:</code> <strong>The result of the expression <code>(T)</code> <em>cast-expression</em></strong> is of type <code>T</code>. The result is an lvalue if <code>T</code> is a reference type, otherwise the result <strong>is an rvalue</strong>.</p>\n<p id=\"so_20871139_20871187_2\"><code>[C++11: 5.4/1]:</code> <strong>The result of the expression <code>(T)</code> <em>cast-expression</em></strong> is of type <code>T</code>. The result is an lvalue if <code>T</code> is an lvalue reference type or an rvalue reference to function type and an xvalue if <code>T</code> is an rvalue reference to object type; otherwise the result <strong>is a prvalue</strong>. <em>[..]</em></p>\n</blockquote>\n<p><a href=\"http://coliru.stacked-crooked.com/a/cdec1e9db0026232\" rel=\"nofollow\">GCC 4.8 rejects your \"legal cast\"</a>, but <a href=\"http://msdn.microsoft.com/en-us/library/bkbs2cds.aspx\" rel=\"nofollow\">Visual Studio has an extension that accepts this</a> (for no apparent reason).</p>\n", "LastActivityDate": "2014-01-02T16:22:18.780"}, "bq_ids": {"n4140": {"so_20871139_20871187_1": {"section_id": 6123, "quality": 0.6666666666666666, "length": 10}, "so_20871139_20871205_0": {"section_id": 6173, "quality": 0.9523809523809523, "length": 20}, "so_20871139_20871205_1": {"section_id": 6123, "quality": 0.7241379310344828, "length": 21}, "so_20871139_20871187_2": {"section_id": 6123, "quality": 0.84, "length": 21}}, "n3337": {"so_20871139_20871187_1": {"section_id": 5887, "quality": 0.6666666666666666, "length": 10}, "so_20871139_20871205_0": {"section_id": 5934, "quality": 0.9523809523809523, "length": 20}, "so_20871139_20871205_1": {"section_id": 5887, "quality": 0.7241379310344828, "length": 21}, "so_20871139_20871187_2": {"section_id": 5887, "quality": 0.84, "length": 21}}, "n4659": {"so_20871139_20871187_1": {"section_id": 7620, "quality": 0.6666666666666666, "length": 10}, "so_20871139_20871205_1": {"section_id": 7620, "quality": 0.7241379310344828, "length": 21}, "so_20871139_20871205_0": {"section_id": 7675, "quality": 0.9523809523809523, "length": 20}, "so_20871139_20871187_2": {"section_id": 7620, "quality": 0.84, "length": 21}}}});