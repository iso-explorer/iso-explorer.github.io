post_cb({"13228049": {"ParentId": "13228028", "PostTypeId": "2", "CommentCount": "6", "Body": "<pre><code>  ostream&amp;  operator&lt;&lt;(ostream&amp; o, const randomNumberMagnfier&amp; rhs );\n</code></pre>\n<p><code>randomNumberMagnfier</code> is misspelled.</p>\n<p><strong>EDIT</strong></p>\n<p>To clarify the second error you are getting:</p>\n<blockquote>\n<p id=\"so_13228028_13228049_0\">error: \u2018std::ostream&amp; randomNumberMagnifier::operator&lt;&lt;(std::ostream&amp;, const randomNumberMagnifier&amp;)\u2019 must take exactly one argument </p>\n</blockquote>\n<p>You need to implement this as a nonmember function.</p>\n<p>As best I can tell, the reason you cannot implement it as a member of the class comes from 13.5.2.1 in the standard:</p>\n<blockquote>\n<p id=\"so_13228028_13228049_1\"><code>13.5.2</code> Binary operators</p>\n<p id=\"so_13228028_13228049_2\"><code>1</code> A binary operator shall be implemented either by a non-static member function (9.3) with one parameter or by a nonmember function with two parameters. Thus, for any binary operator @, x@y can be interpreted as either x.operator@(y) or operator@(x,y). If both forms of the operator function have been declared, the rules in 13.3.1.2 determine which, if any, interpretation is used.</p>\n</blockquote>\n<p>That is, if you're overloading a binary operator and it's a member function then it must take one parameter. You need two parameters, therefore you must use a nonmember function.</p>\n", "OwnerUserId": "242520", "LastEditorUserId": "242520", "LastEditDate": "2012-11-05T08:39:18.980", "Id": "13228049", "Score": "1", "CreationDate": "2012-11-05T07:56:16.837", "LastActivityDate": "2012-11-05T08:39:18.980"}, "13228028": {"CommentCount": "2", "ViewCount": "1938", "PostTypeId": "1", "ClosedDate": "2012-11-05T09:41:50.247", "LastEditorUserId": "777186", "CreationDate": "2012-11-05T07:54:13.660", "LastActivityDate": "2012-11-05T08:39:18.980", "LastEditDate": "2012-11-05T07:56:22.490", "FavoriteCount": "0", "Title": "error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018&\u2019 token", "Id": "13228028", "Score": "0", "Body": "<p><strong>Error:</strong></p>\n<pre><code>expected \u2018,\u2019 or \u2018...\u2019 before \u2018&amp;\u2019 token\nrandomNumberMagnifier.h:32: error: ISO C++ forbids declaration of \u2018randomNumberMagnfier\u2019 with no type\nrandomNumberMagnifier.h:32: error: \u2018std::ostream&amp; randomNumberMagnifier::operator&lt;&lt;(std::ostream&amp;, int)\u2019 must take exactly one argument\n[singha1@cs1 p4]$ \n</code></pre>\n<p>This is the error that keeps showing up. I have pretty much copied the code for the overloaded <code>operator&lt;&lt;</code> to print the values user these operators.</p>\n<p><strong>.h:</strong></p>\n<pre><code>#ifndef RANDOMNUMBERMAGNIFIER_H\n#define RANDOMNUMBERMAGNIFIER_H\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\nclass randomNumberMagnifier\n{\n  int addFactor;\n  int multFactor;\n  bool addOn;\n  bool multOn;\n  int randomNumber;\n  static const int MAX_ADD_FACTOR = 100;\n  static const int MAX_MULT_FACTOR = 20;\n  static const int MAX_RANDOM = 200;\n\n public:\n  randomNumberMagnifier();\n\n  randomNumberMagnifier(const randomNumberMagnifier&amp; arandom);\n  //~randomNumberMagnifer();                                                         \n\n  randomNumberMagnifier&amp; operator=(const randomNumberMagnifier&amp; rhs );\n  //  randomNumberMagnifier&amp; operator==(const randomNumberMagnfier&amp; rhs );           \n  ostream&amp;  operator&lt;&lt;(ostream&amp; o, const randomNumberMagnfier&amp; rhs );\n  randomNumberMagnifier(bool aState, bool mState);\n\n  int randomMagnifier();\n\n  int getAdd();\n  int getMult();\n\n  bool getAddState();\n  bool getMultState();\n\n  int getRandomNumber();\n\n  void display(ostream&amp; out) const;\n\n\n\n};\n#endif\n</code></pre>\n<p><strong>.cpp:</strong></p>\n<pre><code>ostream&amp; operator&lt;&lt;(operator&amp; out, const randomNumberMagnifier&amp; rhs)\n{\n  rhs.display(out);\n  return out;\n  //cout &lt;&lt; this-&gt;getAdd()=rhs.getAdd();                                                  \n  /*                                                                                      \n  cout &lt;&lt; this-&gt;multFactor;                                                               \n  cout &lt;&lt; this-&gt;addOn;                                                                    \n  cout &lt;&lt; this-&gt;multOn;                                                                   \n  cout &lt;&lt; this-&gt;randomNumber;                                                             \n  */\n}\n\nvoid randomNumberMagnifier :: display(ostream&amp; out)const\n{\n  out &lt;&lt; addFactor &lt;&lt; multFactor &lt;&lt; randomNumber;\n}\n</code></pre>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "1754192", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13228028_13228049_2": {"section_id": 659, "quality": 0.9375, "length": 30}}, "n3337": {"so_13228028_13228049_2": {"section_id": 649, "quality": 0.9375, "length": 30}}, "n4659": {"so_13228028_13228049_2": {"section_id": 687, "quality": 0.9375, "length": 30}}}});