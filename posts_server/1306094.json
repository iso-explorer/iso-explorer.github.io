post_cb({"1306127": {"Id": "1306127", "PostTypeId": "2", "Body": "<p>A call to</p>\n<pre><code>new B();\n</code></pre>\n<p>resolves in two things:</p>\n<ul>\n<li>allocating with an operator new() (either the global one or a class specific one, potentially a placement one with the syntax <code>new (xxx) B()</code>)</li>\n<li>calling the constructor.</li>\n</ul>\n<p>If the constructor throw, the corresponding operator delete is called.  The case where the corresponding delete is a placement one is the only case where a placement delete operator is called without the syntax ::operator delete().  <code>delete x;</code> or <code>delete[] x;</code> don't call the placement delete operators and there is no similar syntax to placement new to call them.</p>\n<p>Note that while the destructor of B will <strong>not</strong> be called, already constructed subobjects (members or B and base classes of B) will be destructed before the call to operator delete.  The constructor which isn't called is the one for B.</p>\n", "LastEditorUserId": "136208", "LastActivityDate": "2009-08-20T14:01:18.710", "Score": "9", "CreationDate": "2009-08-20T13:17:57.330", "ParentId": "1306094", "CommentCount": "5", "OwnerUserId": "136208", "LastEditDate": "2009-08-20T14:01:18.710"}, "1675301": {"Id": "1675301", "PostTypeId": "2", "Body": "<p>From the C++ 2003 Standard 5.3.4/17 - New:</p>\n<blockquote>\n<p id=\"so_1306094_1675301_0\">If any part of the object initialization described above terminates by throwing an exception and a suitable deallocation  function  can  be  found,  the  deallocation  function  is  called  to  free  the  memory  in  which the object was being constructed, after which the exception continues to propagate in the context of the new-expression.  If  no  unambiguous  matching  deallocation  function  can  be  found,  propagating  the  exception does not cause the object\u2019s memory to be freed.  [Note: This is appropriate when the called allocation function does not allocate memory; otherwise, it is likely to result in a memory leak.  ]</p>\n</blockquote>\n<p>So there may or may not be a leak - it depends on whether an appropriate deallocator can be found (which is normally the case, unless operator new/delete have been overridden).In the case where there's a suitable deallocator, the compiler is responsible for wiring in a call to it if the constructor throws.</p>\n<p>Note that this is more or less unrelated to what happens to resources acquired in the constructor, which is what my first attempt at an answer discussed - and is a question that is discussed in many FAQs, articles, and postings.</p>\n", "LastEditorUserId": "12711", "LastActivityDate": "2009-11-04T17:53:52.800", "Score": "1", "CreationDate": "2009-11-04T17:13:43.037", "ParentId": "1306094", "CommentCount": "1", "OwnerUserId": "12711", "LastEditDate": "2009-11-04T17:53:52.800"}, "1306106": {"Id": "1306106", "PostTypeId": "2", "Body": "<p>When an exception is thrown from the constructor, the memory allocated by new is released, but the destructor of class B is not called.</p>\n", "LastActivityDate": "2009-08-20T13:12:48.303", "CommentCount": "3", "CreationDate": "2009-08-20T13:12:48.303", "ParentId": "1306094", "Score": "6", "OwnerUserId": "83153"}, "bq_ids": {"n4140": {"so_1306094_1675301_0": {"length": 54, "quality": 0.9642857142857143, "section_id": 6101}}, "n3337": {"so_1306094_1675301_0": {"length": 54, "quality": 0.9642857142857143, "section_id": 5867}}, "n4659": {"so_1306094_1675301_0": {"length": 54, "quality": 0.9642857142857143, "section_id": 7598}}}, "1306150": {"Id": "1306150", "PostTypeId": "2", "Body": "<p>In this case, your object, o, does not actually get constructed, and the memory allocated by new is freed.  As such, the destructor does not get called.  So you do NOT need to call:</p>\n<pre><code>delete o;\n</code></pre>\n<p>An interesting design pattern is RAII -- Resource Acquisition Is Initialization.  In this pattern, you use a constructor to encapsulate the acquisition of a resource, and release the resource in the destructor.  If the resource can not be acquired, you throw in the constructor -- much like your example.  Thus if you have a valid object, you have the resource.</p>\n<p>If the object is constructed, then you have successfully acquired the resource.  This means that for the life of the object, you own the resource.  When the object is deleted, the resource is released.  If the object is never constructed, then you never acquired the resource.  See wikipedia:</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"nofollow noreferrer\">http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization</a></p>\n", "LastEditorUserId": "99317", "LastActivityDate": "2009-08-20T13:38:31.423", "Score": "2", "CreationDate": "2009-08-20T13:22:48.540", "ParentId": "1306094", "CommentCount": "1", "OwnerUserId": "99317", "LastEditDate": "2009-08-20T13:38:31.423"}, "1306094": {"ViewCount": "1814", "Body": "<p>I was debating with some colleges about what happens when you throw an exception in a dynamically allocated class. I know that malloc gets called, and then the constructor of the class. The constructor never returns, so what happens to the malloc?</p>\n<p>Consider the following</p>\n<pre><code>class B\n{\n    public:\n        B()\n        {\n            cout &lt;&lt; \"B::B()\" &lt;&lt; endl;\n            throw \"B::exception\";\n        }\n\n        ~B()\n        {\n            cout &lt;&lt; \"B::~B()\" &lt;&lt; endl;          \n        }\n};\n\nvoid main()\n{\n    B *o = 0;\n    try\n    {\n        o = new B;\n    }\n\n    catch(const char *)\n    {\n    cout &lt;&lt; \"ouch!\" &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>What happens to the malloced memory 'o', does it leak? Does the CRT catch the exception of the constructor and deallocate the memory?</p>\n<p>Cheers\nRich</p>\n", "AcceptedAnswerId": "1306127", "Title": "Does the memory get released when I throw an exception?", "CreationDate": "2009-08-20T13:10:33.220", "Id": "1306094", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2009-11-04T17:53:52.800", "Score": "5", "OwnerUserId": "74842", "Tags": "<c++><exception><constructor><handler>", "AnswerCount": "4"}});