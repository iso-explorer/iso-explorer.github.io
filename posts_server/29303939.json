post_cb({"29304084": {"ParentId": "29303939", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_29303939_29304084_0\"><strong>17.6.4.8/1</strong> In certain cases (replacement functions, handler functions, operations on types used to instantiate standard\n  library template components), the C++ standard library depends on components supplied by a C++ program.\n  If these components do not meet their requirements, the Standard places no requirements on the\n  implementation.</p>\n<p id=\"so_29303939_29304084_1\"><strong>17.6.4.8/2</strong> In particular, the effects are undefined in the following cases:</p>\n<p id=\"so_29303939_29304084_2\">...</p>\n<ul>\n<li>if any replacement function or handler function or destructor operation exits via an exception, unless specifically allowed in the\n  applicable <em>Required behavior:</em> paragraph.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "29304084", "Score": "7", "CreationDate": "2015-03-27T15:14:21.630", "LastActivityDate": "2015-03-27T15:14:21.630"}, "29303939": {"CommentCount": "1", "ViewCount": "218", "CreationDate": "2015-03-27T15:07:32.703", "LastActivityDate": "2015-03-27T15:14:21.630", "Title": "Are STL container elements explicitly required to be (noexcept) destructible?", "AcceptedAnswerId": "29304084", "PostTypeId": "1", "Id": "29303939", "Score": "8", "Body": "<p>C++11 (and C++14) STL containers have <code>noexcept</code> destructors and <code>clear()</code> member functions.</p>\n<p>This implies that the elements should have <code>noexcept</code> destructors too, or at least that the actual elements stored in containers should not throw any exceptions when destroyed\u2014or more correctly, that the corresponding <code>allocator_traits&lt;Allocator&gt;::destroy</code> call should not throw.</p>\n<p>Is this specified as a requirement (explicitly or implied by another explicit requirement) anywhere in the standard? If not, why?</p>\n<p>I know <code>is_nothrow_constructible</code> requires a <code>noexcept</code> destructor, but <code>is_constructible</code> alone doesn\u2019t, and container requirements are specified in terms of concepts rather than type traits templates anyway.</p>\n", "Tags": "<c++><c++11><stl>", "OwnerUserId": "865331", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29303939_29304084_0": {"section_id": 6323, "quality": 0.92, "length": 23}, "so_29303939_29304084_1": {"section_id": 6324, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_29303939_29304084_0": {"section_id": 6080, "quality": 0.92, "length": 23}, "so_29303939_29304084_1": {"section_id": 6081, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_29303939_29304084_0": {"section_id": 7833, "quality": 0.92, "length": 23}, "so_29303939_29304084_1": {"section_id": 7834, "quality": 0.8333333333333334, "length": 5}}}});