post_cb({"10147335": {"ParentId": "10147264", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The braces are optional, and the expression is equivalent to just an array of char.</p>\n<p>You can also write this:</p>\n<pre><code> int a = {100}; //ok\n</code></pre>\n<p>Demo : <a href=\"http://ideone.com/z0psd\" rel=\"nofollow\">http://ideone.com/z0psd</a></p>\n<p>In fact, <code>C++11</code> generalizes this very syntax, to initialize non-arrays as well as arrays, uniformly. So in <code>C++11</code>, you can have these:</p>\n<pre><code>int a{}; //a is initialized to zero, and it is NOT an array\n\nint b[]{1,2,3,4}; //b is an array of size 4 containing elements 1,2,3,4\n\nint c[10]{}; //all 10 elements are initialized to zero\n\nint *d{}; //pointer initialized to nullptr\n\nstd::vector&lt;int&gt; v{1,2,3,4,5}; //vector is initialized uniformly as well.\n</code></pre>\n", "OwnerUserId": "415784", "LastEditorUserId": "447156", "LastEditDate": "2012-04-19T07:48:25.133", "Id": "10147335", "Score": "22", "CreationDate": "2012-04-13T19:45:10.227", "LastActivityDate": "2012-04-19T07:48:25.133"}, "10147353": {"ParentId": "10147264", "CommentCount": "0", "Body": "<p>Any variable in (<code>int</code>, <code>char</code>, etc.) is just an array of length 1.</p>\n<pre><code>char s = {0};\n</code></pre>\n<p>works as well.</p>\n", "OwnerUserId": "950430", "PostTypeId": "2", "Id": "10147353", "Score": "3", "CreationDate": "2012-04-13T19:46:21.660", "LastActivityDate": "2012-04-13T19:46:21.660"}, "10147344": {"ParentId": "10147264", "CommentCount": "0", "Body": "<p>I might be wrong, but I think this is not an array of arrays of chars, but a block contains an array of chars. <code>int a = {1};</code> may work as well.</p>\n", "OwnerUserId": "464988", "PostTypeId": "2", "Id": "10147344", "Score": "2", "CreationDate": "2012-04-13T19:45:43.640", "LastActivityDate": "2012-04-13T19:45:43.640"}, "38657078": {"ParentId": "10147264", "CommentCount": "0", "Body": "<p>This is allowed by the C++ standard as well, Citation:</p>\n<blockquote>\n<p id=\"so_10147264_38657078_0\"><a href=\"http://eel.is/c++draft/dcl.init.string#1\" rel=\"nofollow\">[dcl.init.string] \u00a71</a></p>\n<p id=\"so_10147264_38657078_1\">An array of narrow character type ([basic.fundamental]), char16_t array, char32_t array, or wchar_t array can be initialized by a narrow string literal, char16_t string literal, char32_t string literal, or wide string literal, respectively, <strong>or</strong> by an appropriately-typed string literal <strong>enclosed in braces</strong> ([lex.string]). [snip]</p>\n</blockquote>\n", "OwnerUserId": "2079303", "PostTypeId": "2", "Id": "38657078", "Score": "1", "CreationDate": "2016-07-29T10:56:17.020", "LastActivityDate": "2016-07-29T10:56:17.020"}, "10147264": {"CommentCount": "3", "AcceptedAnswerId": "10147410", "PostTypeId": "1", "LastEditorDisplayName": "user166390", "CreationDate": "2012-04-13T19:39:40.770", "LastActivityDate": "2016-07-29T10:56:17.020", "LastEditDate": "2012-04-13T19:46:45.773", "ViewCount": "4820", "FavoriteCount": "5", "Title": "Braces around string literal in char array declaration valid? (e.g. char s[] = {\"Hello World\"})", "Id": "10147264", "Score": "50", "Body": "<p>By accident I found that the line <code>char s[] = {\"Hello World\"};</code> is properly compiled and seems to be treated the same as <code>char s[] = \"Hello World\";</code>. Isn't the first (<code>{\"Hello World\"}</code>) an array containing one element that is an array of char, so the declaration for s should read <code>char *s[]</code>? In fact if I change it to <code>char *s[] = {\"Hello World\"};</code> the compiler accepts it as well, as expected.</p>\n<p>Searching for an answer, the only place I found which mentioned this is <a href=\"http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=/com.ibm.xlcpp8l.doc/language/ref/aryin.htm\">this one</a> but there is no citing of the standard.</p>\n<p>So my question is, why the line <code>char s[] = {\"Hello World\"};</code> is compiled although the left side is of type <code>array of char</code> and the right side is of type <code>array of array of char</code>?</p>\n<p>Following is a working program:</p>\n<pre><code>#include&lt;stdio.h&gt;\nint main() {\n    char s[] = {\"Hello World\"};\n    printf(\"%s\", s); // Same output if line above is char s[] = \"Hello World\";\n    return 0;\n}\n</code></pre>\n<p>Thanks for any clarifications.</p>\n<p>P.S. My compiler is gcc-4.3.4.</p>\n", "Tags": "<c++><c><string><arrays><array-initialization>", "OwnerUserId": "637284", "AnswerCount": "6"}, "10147410": {"ParentId": "10147264", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It's allowed because the standard says so: C99 section 6.7.8, \u00a714:</p>\n<blockquote>\n<p id=\"so_10147264_10147410_0\">An array of character type may be initialized by a character string literal, optionally\n  enclosed in braces. Successive characters of the character string literal (including the\n  terminating null character if there is room or if the array is of unknown size) initialize the\n  elements of the array.</p>\n</blockquote>\n<p>What this means is that both</p>\n<pre><code>char s[] = { \"Hello World\" };\n</code></pre>\n<p>and</p>\n<pre><code>char s[] = \"Hello World\";\n</code></pre>\n<p>are nothing more than syntactic sugar for</p>\n<pre><code>char s[] = { 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', 0 };\n</code></pre>\n<p>On a related note (same section, \u00a711), C also allows braces around scalar initializers like</p>\n<pre><code>int foo = { 42 };\n</code></pre>\n<p>which, incidentally, fits nicely with the syntax for compound literals</p>\n<pre><code>(int){ 42 }\n</code></pre>\n", "OwnerUserId": "48015", "LastEditorUserId": "48015", "LastEditDate": "2012-04-13T19:58:57.537", "Id": "10147410", "Score": "64", "CreationDate": "2012-04-13T19:50:10.193", "LastActivityDate": "2012-04-13T19:58:57.537"}, "bq_ids": {"n4140": {"so_10147264_38657078_1": {"section_id": 3314, "quality": 0.9090909090909091, "length": 30}, "so_10147264_10147410_0": {"section_id": 3314, "quality": 0.5357142857142857, "length": 15}}, "n3337": {"so_10147264_38657078_1": {"section_id": 3184, "quality": 0.7878787878787878, "length": 26}}, "n4659": {"so_10147264_38657078_1": {"section_id": 4080, "quality": 0.9090909090909091, "length": 30}, "so_10147264_10147410_0": {"section_id": 4080, "quality": 0.5357142857142857, "length": 15}}}, "10147782": {"ParentId": "10147264", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_10147264_10147782_0\">[...] In fact if I change it to\n  char *s[] = {\"Hello World\"}; the compiler accepts it as well, as\n  expected</p>\n</blockquote>\n<p>The compiler accepets it,because actually, you're making an array 2D of undefined size elements,where you stored one element only,the <code>\"Hello World\"</code> string. Something like this:</p>\n<pre><code>char* s[] = {\"Hello world\", \"foo\", \"baa\" ...};\n</code></pre>\n<p>You can't omit the <code>bracets</code> in this case.</p>\n", "OwnerUserId": "800123", "PostTypeId": "2", "Id": "10147782", "Score": "1", "CreationDate": "2012-04-13T20:19:44.620", "LastActivityDate": "2012-04-13T20:19:44.620"}});