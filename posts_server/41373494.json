post_cb({"41373599": {"ParentId": "41373494", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-12-29T05:26:59.363", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:46.983", "Id": "41373599", "OwnerUserId": "2315473", "Body": "<p>The standard (C++14) briefly mentions some circumstances of temporary object : </p>\n<pre><code>1. Binding a reference to a prvalue\n2. Returning a prvalue \n3. A conversion that creates a prvalue\n4. Throwing an exception\n5. In some initializations\n</code></pre>\n<p>You can get the description of <code>prvalue</code> from <a href=\"https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues\">stackoverflow</a>. \nI have collected the circumstances from <a href=\"https://www.quora.com/In-which-circumstances-C++-compiler-creates-temporary-objects/answer/Brian-Bi\" rel=\"nofollow noreferrer\">Quora</a>. </p>\n", "LastActivityDate": "2016-12-29T05:26:59.363"}, "bq_ids": {"n4140": {"so_41373494_41374318_1": {"section_id": 7172, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_41373494_41374318_1": {"section_id": 6916, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_41373494_41374318_1": {"section_id": 8680, "quality": 0.8928571428571429, "length": 25}}}, "41373494": {"CommentCount": "3", "ViewCount": "147", "PostTypeId": "1", "LastEditorUserId": "3233393", "CreationDate": "2016-12-29T05:14:56.897", "LastActivityDate": "2016-12-29T10:08:17.650", "Title": "c++ explicit call to constructor and temporary object", "LastEditDate": "2016-12-29T10:08:17.650", "Id": "41373494", "Score": "1", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Test\n{\n    public:\n    Test()  { cout &lt;&lt; \"Constructor is executed\\n\"; }\n    ~Test() { cout &lt;&lt; \"Destructor is executed\\n\";  }\n};\n\nint main()\n{\n     Test();  // Explicit call to constructor\n\n    return 0;\n}\n</code></pre>\n<p>in above code we are calling constructor explicitly and When the constructor is called explicitly the compiler creates a nameless temporary object and it is immediately destroyed.\nwhy do we need this temporary object??</p>\n", "Tags": "<c++><c++11><c++14>", "OwnerUserId": "7352499", "AnswerCount": "4"}, "41374318": {"ParentId": "41373494", "CommentCount": "0", "CreationDate": "2016-12-29T06:30:43.280", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "41374318", "Score": "0", "Body": "<p>Re</p>\n<blockquote>\n<p id=\"so_41373494_41374318_0\"><strong>\u201d</strong> why do we need this temporary object??</p>\n</blockquote>\n<p>\u2026 we don't. The compiler is free to optimize away, as long as the effect is <em>as if</em> the constructor and destructor, with side effects, had been called.</p>\n<p>The compiler can't remove the constructor and destructor side effects because the standard explicitly requires it to not remove local objects whose construction or destruction has side effects:</p>\n<b>C++11 \u00a73.7.3/3</b><sub><sup>basic.std.auto/3</sup></sub>:\n\n<blockquote>\n<p id=\"so_41373494_41374318_1\"><strong>\u201d</strong>\n  If a variable with automatic storage duration has initialization or a destructor with side effects, it shall not\n  be destroyed before the end of its block, nor shall it be eliminated as an optimization even if it appears to\n  be unused, except that a class object or its copy/move may be eliminated as specified in 12.8.</p>\n</blockquote>\n", "LastActivityDate": "2016-12-29T06:30:43.280"}, "41373543": {"ParentId": "41373494", "CommentCount": "0", "CreationDate": "2016-12-29T05:20:42.993", "OwnerUserId": "6497438", "PostTypeId": "2", "Id": "41373543", "Score": "0", "Body": "<p>Because the constructor &amp; destructor have side effects. They both print stuff.</p>\n<p>If they had no side effects, then the compiler might be smart enough to figure out that it doesn't actually need to create the temporary, and skip it entirely.</p>\n", "LastActivityDate": "2016-12-29T05:20:42.993"}, "41373553": {"ParentId": "41373494", "CommentCount": "6", "CreationDate": "2016-12-29T05:22:06.670", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "41373553", "Score": "0", "Body": "<p>The <em>functional type conversion notation</em> you are using, <code>Test(...)</code>, actually means \"create a temporary object of type <code>Test</code>\" from C++98 up to C++14. Therefore, the temporary is created, as requested, and the constructor is called in order to initialize the object. It does <em>not</em> mean \"call the constructor\". In fact, the execution of a constructor can never be separated from the creation of an object.</p>\n<p>In C++17, <code>Test()</code> is a prvalue that is materialized since it is used as a discarded-value expression. At the point of materialization, the temporary object is created, and the constructor is called. It remains true that the execution of a constructor never occurs separately from the creation of an object.</p>\n", "LastActivityDate": "2016-12-29T05:22:06.670"}});