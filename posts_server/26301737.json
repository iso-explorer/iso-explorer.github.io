post_cb({"bq_ids": {"n4140": {"so_26301737_26301737_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 5335}}, "n3337": {"so_26301737_26301737_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 5132}}, "n4659": {"so_26301737_26301737_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 6756}}}, "26301906": {"Id": "26301906", "PostTypeId": "2", "Body": "<p>I don't think so. Dollar sign is in ASCII 0x24, which is not inside any of the ranges defined in appendix E.1 (charname.allowed) of the standard. And since it is neither digit nor nondigit it must be an implementation-defined character. I aggree thus that this is not portable C++11. Also note that an identifier shall not start with a universal-character, while it does allow an identifier to start with an character allowed by the implementation.</p>\n", "LastActivityDate": "2014-10-10T14:36:27.553", "CommentCount": "2", "CreationDate": "2014-10-10T14:36:27.553", "ParentId": "26301737", "Score": "3", "OwnerUserId": "675646"}, "26302259": {"Id": "26302259", "PostTypeId": "2", "Body": "<p>This is implementation defined behavior, <code>$</code> is not included in grammar for identifiers. The rules for identifier names in <em>C++11</em> are:</p>\n<ol>\n<li>It can not start with a number</li>\n<li>Can be composed of letters, numbers, underscore, universal character names and <em>implementation defined</em> characters</li>\n<li>Can not be a <a href=\"http://en.cppreference.com/w/cpp/keyword\" rel=\"nofollow noreferrer\">keyword</a></li>\n</ol>\n<p><em>Implementation-defined characters</em> are allowed and many compilers support as an extension, including <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Dollar-Signs.html#Dollar-Signs\" rel=\"nofollow noreferrer\">gcc</a>, <code>clang</code>, <a href=\"http://msdn.microsoft.com/en-us/library/565w213d.aspx\" rel=\"nofollow noreferrer\">Visual Studio</a> and as noted in a <a href=\"https://stackoverflow.com/questions/26301737/does-c11-allow-dollar-signs-in-identifiers#comment41275143_26301737\">comment</a> apparently <a href=\"https://www.cs.auckland.ac.nz/references/c/cplusplus/cxx570_ug_003.html#index_x_142\" rel=\"nofollow noreferrer\">DEC C++ compilers</a>.</p>\n<p>The grammar is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++ standard</a> section <code>2.11</code> <em>Indentifier</em>, I added additional notes starting with <code>&lt;-</code>:</p>\n<pre><code>identifier:\n  identifier-nondigit            &lt;- Can only start with a non-digit\n  identifier identifier-nondigit &lt;- Next two rules allows for subsequent \n  identifier digit               &lt;-  characters to be those outlined in 2 above\nidentifier-nondigit:\n  nondigit                       &lt;- a-z, A-Z and _ \n  universal-character-name\n  other implementation-defined characters\n[...]\n</code></pre>\n<p>If we compile this code using <code>clang</code> with the <code>-pedantic-errors</code> flag it will not compile:</p>\n<pre><code>int $ = 0\n</code></pre>\n<p>and generates the following error:</p>\n<pre><code>error: '$' in identifier [-Werror,-Wdollar-in-identifier-extension]\nint $ = 0;\n    ^\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-10-15T20:20:22.373", "Score": "17", "CreationDate": "2014-10-10T14:54:27.883", "ParentId": "26301737", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:54:09.493"}, "26301737": {"ViewCount": "2893", "Body": "<p><a href=\"https://stackoverflow.com/questions/936744/are-dollar-signs-allowed-in-identifiers-in-c03\">Are dollar-signs allowed in identifiers in C++03?</a> covers that dollar signs in identifiers are not allowed in C++03. GCC provides it as a <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Dollar-Signs.html#Dollar-Signs\" rel=\"nofollow noreferrer\">C extension</a> and properly gives a diagnostic in C++03 mode. However, in C++11, <code>int $ = 0</code> will compile without warning.</p>\n<p>This <a href=\"https://stackoverflow.com/a/16055409/3920237\">answer</a> reasons that <code>$</code> may be allowed because no diagnostic is required for implementation defined identifiers:</p>\n<blockquote>\n<p id=\"so_26301737_26301737_0\">The answer here is <strong>\"Maybe\"</strong>:    According to <strong>\u00a72.11</strong>, identifiers\n  may consist of <em>digits</em> and <em>identifier-nondigits</em>, starting with one\n  of the latter. <em>identifier-nondigits</em> are the usual <code>a-z</code>, <code>A-Z</code> and\n  underscore, in addition since C++11 they include\n  <em>universal-character-names</em> (e.g. <code>\\uBEAF</code>, <code>\\UC0FFEE32</code>), <strong>and other implementation-defined characters</strong>. So it is implementation defined\n  if using <code>$</code> in an identifier is allowed. VC10 and up supports that,\n  maybe earlier versions, too. It even supports identifiers like\n  <code>\u3053\u3093\u3070\u3093\u308f</code>. </p>\n<p id=\"so_26301737_26301737_1\"><strong>But:</strong> I wouldn't use them. Make identifiers as readable and portable as possible. <code>$</code> is implementation defined and thus not\n  portable.</p>\n</blockquote>\n<p>This language is present in the C++03 standard as well, so I don't find this to be a very convincing argument.</p>\n<p>\u00a72.10/2</p>\n<blockquote>\n<p id=\"so_26301737_26301737_2\">In addition, some identifiers are reserved for use by C ++\n  implementations and standard libraries (17.6.4.3.2) and shall not be\n  used otherwise; no diagnostic is required.</p>\n</blockquote>\n<p>What change in the standard allows <code>$</code> to be used as an identifier name?</p>\n", "AcceptedAnswerId": "26302259", "Title": "Does C++11 allow dollar signs in identifiers?", "CreationDate": "2014-10-10T14:26:48.003", "LastActivityDate": "2014-10-15T20:20:22.373", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:54:09.493", "OwnerDisplayName": "user3920237", "LastEditorUserId": "-1", "Id": "26301737", "Score": "16", "Tags": "<c++><c++11><language-lawyer><identifier>", "AnswerCount": "2"}});