post_cb({"26792448": {"Id": "26792448", "PostTypeId": "2", "Body": "<p><code>fwd</code> expects a function that takes a boolean parameter; you only have one such version of <code>does</code>, so there is no confusion.  In effect, <code>does</code> and <code>&amp;does</code> are considered the same (because functions cannot be values, one of these two should technically be incorrect if not impossible to represent, but the language has to chosen to instead just treat them as the same thing).</p>\n<p>But when you try to use <code>fwd(*does)</code>, you would need a definition of <code>does</code> that <em>dereferences</em> to such a function, and you don't have anything like that -- in fact, as I have been recently schooled, you <em>can't</em> have anything like that.</p>\n", "LastEditorUserId": "535275", "LastActivityDate": "2014-11-07T03:19:11.213", "Score": "0", "CreationDate": "2014-11-07T01:16:40.690", "ParentId": "26792376", "CommentCount": "3", "OwnerUserId": "535275", "LastEditDate": "2014-11-07T03:19:11.213"}, "bq_ids": {"n4140": {"so_26792376_26792689_1": {"length": 15, "quality": 0.9375, "section_id": 641}, "so_26792376_26792689_0": {"length": 49, "quality": 0.8909090909090909, "section_id": 641}}, "n3337": {"so_26792376_26792689_0": {"length": 49, "quality": 0.8909090909090909, "section_id": 631}, "so_26792376_26792689_1": {"length": 15, "quality": 0.9375, "section_id": 631}}, "n4659": {"so_26792376_26792689_0": {"length": 45, "quality": 0.8181818181818182, "section_id": 669}, "so_26792376_26792689_1": {"length": 15, "quality": 0.9375, "section_id": 669}}}, "26792689": {"Id": "26792689", "PostTypeId": "2", "Body": "<p>The answer to your question is in the overload-resolution rules for functions.<br>\nSpecifically, there is an exception for using <code>&amp;</code> before the function-name (once) not breaking overload-resolution, but none for using <code>*</code>.<br>\nAlso see that only one of those two functions accept that single argument:</br></br></p>\n<blockquote>\n<h3>13.4 Address of overloaded function <code>[over.over]</code></h3>\n<p id=\"so_26792376_26792689_0\">1 A use of an overloaded function name without arguments is resolved in certain contexts to a function, a pointer to function or a pointer to member function for a specific function from the overload set. A function template name is considered to name a set of overloaded functions in such contexts. <strong>The function selected is the one whose type is identical to the function type of the target type required in the context.</strong> <em>[ Note: That is, the class of which the function is a member is ignored when matching a pointer-to-member-function type. \u2014end note ]</em> The target can be</p>\n<ul>\n<li>an object or reference being initialized (8.5, 8.5.3),</li>\n<li>the left side of an assignment (5.17),</li>\n<li><strong>a parameter of a function</strong> (5.2.2),</li>\n<li>a parameter of a user-defined operator (13.5),</li>\n<li>the return value of a function, operator function, or conversion (6.6.3),</li>\n<li>an explicit type conversion (5.2.3, 5.2.9, 5.4), or</li>\n<li>a non-type template-parameter (14.3.2).</li>\n</ul>\n<p id=\"so_26792376_26792689_1\"><strong>The overloaded function name can be preceded by the <code>&amp;</code> operator.</strong> An overloaded function name shall not be used without arguments in contexts other than those listed.</p>\n</blockquote>\n<p>Quote is from n3242 (c++11), with bold by me.</p>\n", "LastActivityDate": "2014-11-07T01:43:12.790", "CommentCount": "1", "CreationDate": "2014-11-07T01:43:12.790", "ParentId": "26792376", "Score": "6", "OwnerUserId": "3204551"}, "26792376": {"ViewCount": "107", "Body": "<p>The following code snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid does() { std::cout &lt;&lt; \"do\" &lt;&lt; std::endl; }\nvoid does(bool b = false) { std::cout &lt;&lt; \"do(bool)\" &lt;&lt; std::endl; }\n\nvoid fwd(void (*func)(bool))\n{\n    func(false);\n}\n\nint main(int, char**)\n{\n    fwd(&amp;does);\n    fwd(does);\n    fwd(*does);\n}\n</code></pre>\n<p>understandably produces the following error:</p>\n<p><code>test.cpp:15:10: error: overloaded function with no contextual type information</code></p>\n<p>The compiler cannot discern which of the functions I intend to use.\nWhat I don't understand is why the code will correctly run when I comment out the line that reads:</p>\n<p><code>fwd(*does)</code></p>\n<p><strong>Why can the compiler suddenly resolve the ambiguousness?</strong></p>\n<pre><code>int main(int, char**)\n{\n    fwd(&amp;does);\n    fwd(does);\n}\n</code></pre>\n<p>Also, without overloading <code>does</code> the snippet will correctly run with all 3 calls.\nThis snippet runs fine...</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid does(bool b = false) { std::cout &lt;&lt; \"do(bool)\" &lt;&lt; std::endl; }\n\nvoid fwd(void (*func)(bool))\n{\n    func(false);\n}\n\nint main(int, char**)\n{\n    fwd(&amp;does);\n    fwd(does);\n    fwd(*does);\n}\n</code></pre>\n<p>I'm compiling this with gcc 4.6.3 on a Linux box.</p>\n<p>Thanks for the help!</p>\n", "AcceptedAnswerId": "26792689", "Title": "Understanding how the compiler resolves pointer to functions", "CreationDate": "2014-11-07T01:08:03.573", "Id": "26792376", "CommentCount": "7", "LastEditDate": "2014-11-07T01:15:47.523", "PostTypeId": "1", "LastEditorUserId": "241631", "LastActivityDate": "2014-11-07T03:19:11.213", "Score": "6", "OwnerUserId": "4225086", "Tags": "<c++><function><function-pointers>", "AnswerCount": "2"}});