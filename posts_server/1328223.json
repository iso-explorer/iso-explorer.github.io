post_cb({"1328246": {"ParentId": "1328223", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Yes it's inherited from C.  The function:</p>\n<pre><code>void foo ( char a[100] );\n</code></pre>\n<p>Will have the parameter adjusted to be a pointer, and so becomes:</p>\n<pre><code>void foo ( char * a );\n</code></pre>\n<p>If you want that the array type is preserved, you should pass in a reference to the array:</p>\n<pre><code>void foo ( char (&amp;a)[100] );\n</code></pre>\n<p><strong>C++ '03 8.3.5/3:</strong></p>\n<blockquote>\n<p id=\"so_1328223_1328246_0\">...The type of a function is determined using the following rules. The type of each parameter is determined from its own decl-specifier-seq and declarator. After determining the type of each parameter, any parameter of type \"array of T\" or \"function returning T\" is adjusted to be \"pointer to T\" or \"pointer to function returning T,\" respectively....</p>\n</blockquote>\n<p><strong>To explain the syntax:</strong></p>\n<p>Check for \"right-left\" rule in google; I found one description of it <a href=\"http://www.cpp-home.com/archives/106.html\" rel=\"noreferrer\">here</a>.</p>\n<p>It would be applied to this example approximately as follows:</p>\n<pre><code>void foo (char (&amp;a)[100]);\n</code></pre>\n<p>Start at identifier 'a'</p>\n<blockquote>\n<p id=\"so_1328223_1328246_1\">'a' is a </p>\n</blockquote>\n<p>Move right - we find a <code>)</code> so we reverse direction looking for the <code>(</code>.  As we move left we pass <code>&amp;</code></p>\n<blockquote>\n<p id=\"so_1328223_1328246_2\">'a' is a reference</p>\n</blockquote>\n<p>After the <code>&amp;</code> we reach the opening <code>(</code> so we reverse again and look right.  We now see <code>[100]</code></p>\n<blockquote>\n<p id=\"so_1328223_1328246_3\">'a' is a reference to an array of 100 </p>\n</blockquote>\n<p>And we reverse direction again until we reach <code>char</code>:</p>\n<blockquote>\n<p id=\"so_1328223_1328246_4\">'a' is a reference to an array of 100 chars</p>\n</blockquote>\n", "OwnerUserId": "11698", "LastEditorUserId": "11698", "LastEditDate": "2015-04-08T13:51:07.230", "Id": "1328246", "Score": "60", "CreationDate": "2009-08-25T13:22:38.113", "LastActivityDate": "2015-04-08T13:51:07.230"}, "1328223": {"CommentCount": "3", "AcceptedAnswerId": "1328246", "PostTypeId": "1", "LastEditorUserId": "1593077", "CreationDate": "2009-08-25T13:17:32.050", "LastActivityDate": "2016-04-21T07:01:55.517", "LastEditDate": "2015-12-06T22:05:07.400", "ViewCount": "21927", "FavoriteCount": "21", "Title": "When a function has a specific-size array parameter, why is it replaced with a pointer?", "Id": "1328223", "Score": "54", "Body": "<p>Given the following program,</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid foo( char a[100] )\n{\n    cout &lt;&lt; \"foo() \" &lt;&lt; sizeof( a ) &lt;&lt; endl;\n}\n\nint main()\n{\n    char bar[100] = { 0 };\n    cout &lt;&lt; \"main() \" &lt;&lt; sizeof( bar ) &lt;&lt; endl;\n    foo( bar );\n    return 0;\n}\n</code></pre>\n<p>outputs</p>\n<pre><code>main() 100\nfoo() 4\n</code></pre>\n<ol>\n<li>Why is the array passed as a pointer to the first element?</li>\n<li>Is it a heritage from C?</li>\n<li>What does the standard say?</li>\n<li>Why is the strict type-safety of C++ dropped?</li>\n</ol>\n", "Tags": "<c++><arrays><standards><sizeof><function-parameter>", "OwnerUserId": "140006", "AnswerCount": "3"}, "8593393": {"ParentId": "1328223", "CommentCount": "1", "Body": "<p>There is magnificent word in C/C++ terminology that is used for static arrays and function pointers - <em>decay</em>.\nConsider the following code:</p>\n<pre><code>int intArray[] = {1, 3, 5, 7, 11}; // static array of 5 ints\n//...\nvoid f(int a[]) {\n  // ...\n}\n// ...\nf(intArray); // only pointer to the first array element is passed\nint length = sizeof intArray/sizeof(int); // calculate intArray elements quantity (equals 5)\nint ptrToIntSize = sizeof(*intArray); // calculate int * size on your system\n</code></pre>\n", "OwnerUserId": "823048", "PostTypeId": "2", "Id": "8593393", "Score": "1", "CreationDate": "2011-12-21T16:53:07.673", "LastActivityDate": "2011-12-21T16:53:07.673"}, "bq_ids": {"n4140": {"so_1328223_1328246_0": {"section_id": 3241, "quality": 0.9375, "length": 30}}, "n3337": {"so_1328223_1328246_0": {"section_id": 3114, "quality": 0.9375, "length": 30}}, "n4659": {"so_1328223_1328246_0": {"section_id": 3997, "quality": 0.8125, "length": 26}}}, "1328242": {"ParentId": "1328223", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>Yes. In C and C++ you cannot pass arrays to functions. That's just the way it is. </p>\n<p>Why are you doing plain arrays anyway? Have you looked at <code>boost</code>/<code>std::tr1::array</code>/<code>std::array</code> or <code>std::vector</code>? </p>\n<p>Note that you can, however, pass a reference to an array of arbitrary length to a function <em>template</em>. Off the top of my head:  </p>\n<pre><code>template&lt; std::size_t N &gt;\nvoid f(char (&amp;arr)[N])\n{\n  std::cout &lt;&lt; sizeof(arr) &lt;&lt; '\\n';\n}\n</code></pre>\n", "OwnerUserId": "140719", "LastEditorUserId": "140719", "LastEditDate": "2016-04-21T07:01:55.517", "Id": "1328242", "Score": "11", "CreationDate": "2009-08-25T13:22:13.947", "LastActivityDate": "2016-04-21T07:01:55.517"}});