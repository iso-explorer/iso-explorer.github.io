post_cb({"21421720": {"CommentCount": "7", "ViewCount": "142", "PostTypeId": "1", "LastEditorUserId": "2797826", "CreationDate": "2014-01-29T03:51:55.560", "LastActivityDate": "2014-01-29T13:11:04.120", "Title": "Interoperability of types in C and C++", "AcceptedAnswerId": "21421929", "LastEditDate": "2014-01-29T04:34:33.053", "Id": "21421720", "Score": "5", "Body": "<p>A very simple question: are there any guarantees that a C <code>int</code> is the same thing as a C++ <code>int</code>, on the same system?</p>\n<p>It goes without saying that this is, of course, a purely theoretical question.</p>\n<p>The C and C++ standards use the same language to define the fundamental types. But whereas Fortran 2003 makes it clear that</p>\n<pre><code>use ISO_C_BINDING\ninteger(kind=c_int) :: i\n</code></pre>\n<p>declares an integer type which is compatible with the <code>int</code> type on a \"companion C processor\", I can't find any such assertion in the C++ stardard. It seems very odd that Fortran would provide stronger C interoperability guarantees than C++!</p>\n<p>The closest I can find is section 7.5 [dcl.link], paragraph 3 of the C++11 standard, which states that</p>\n<blockquote>\n<p id=\"so_21421720_21421720_0\">Every implementation shall provide for linkage to functions written in the C programming language</p>\n</blockquote>\n<p>But this little sentence doesn't (to me) seem strong enough to guarantee compatibility of fundamental types.</p>\n<p>Is there some other language in the C++ standard that I've overlooked which guarantees this, or is it just so obviously taken for granted that no-one has bothered to state it explicitly?</p>\n<p><strong>EDIT</strong>: David Schwartz in the comments points out that I was imprecise when I said \"the same system\". I really meant the same \"platform\", i.e. hardware, OS, system libraries etc. It's really an ABI issue of course. In the quoted passage the C++ standard seems to want to indicate that you can call C functions with <code>extern \"C\"</code>, but I'm not sure if it provides enough other guarantees?</p>\n", "Tags": "<c++><c><language-lawyer><language-interoperability>", "OwnerUserId": "2797826", "AnswerCount": "1"}, "21421929": {"ParentId": "21421720", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>No.</p>\n<p>There are widely used conforming compilers on x64 amd compatible cpus that treat <code>long</code>as 32 bit and others as 64 bit by default.  So this is not even the case for two C++ compilers on the same system, let alone a C++ and C compiler.</p>\n<p>Within one compiler, that is up to the compiler vendor if they are compatible.  They usually (always) are.  \"one compiler\" is a bit of a misnomer here: the C snd C++ compilers are different compilers, even if in the same binary by the same vendor, in a sense.</p>\n", "OwnerUserId": "1774667", "LastEditorUserId": "1774667", "LastEditDate": "2014-01-29T13:11:04.120", "Id": "21421929", "Score": "5", "CreationDate": "2014-01-29T04:12:19.740", "LastActivityDate": "2014-01-29T13:11:04.120"}, "bq_ids": {"n4140": {"so_21421720_21421720_0": {"section_id": 5519, "quality": 1.0, "length": 8}}, "n3337": {"so_21421720_21421720_0": {"section_id": 5305, "quality": 1.0, "length": 8}}, "n4659": {"so_21421720_21421720_0": {"section_id": 6954, "quality": 1.0, "length": 8}}}});