post_cb({"40891113": {"CommentCount": "14", "ViewCount": "125", "CreationDate": "2016-11-30T14:38:25.483", "LastActivityDate": "2016-11-30T15:13:03.140", "Title": "Widening and narrowing rules in C/C++", "AcceptedAnswerId": "40891838", "PostTypeId": "1", "Id": "40891113", "Score": "3", "Body": "<p>I was trying to read through the C/C++ standard for this but I can't find the answer.</p>\n<p>Say you have the following snippet:</p>\n<pre><code>int8_t m;\nint64_t n;\n</code></pre>\n<p>And that at some point you perform <code>m + n</code>, the addition itself is a binary operator and I think the most likely think that happen in such a case is:</p>\n<ol>\n<li>Wide <code>m</code> to the same size of <code>n</code>, call the widening result <code>m_prime</code></li>\n<li>Perform <code>m_prime + n</code></li>\n<li>Return a result of type <code>int64_t</code></li>\n</ol>\n<p>I was trying to understand however if instead of performing <code>m+n</code> I had performed <code>n+m</code> the result would change (because maybe there could be a narrowing operations instead of a widening).</p>\n<p>I cannot find the part of the standard that clarify this point (which I understand it could sound trivial).</p>\n<p>Can anyone point me where I can find this in the standard? or what happens in general in situations like the one I exposed?</p>\n<p>Personally I've been looking at the section \"Additive operators\" but it doesn't seem to me to explain what happens, pointer arithmetic is covered a bit, but there's no reference to some casting rule implicitly applied.</p>\n<p>You can assume I'm talking about C++11, but any other standard I guess would apply the same rules.</p>\n", "Tags": "<c++><standards>", "OwnerUserId": "4792660", "AnswerCount": "1"}, "40891838": {"ParentId": "40891113", "CommentCount": "0", "Body": "<p>See Clause 5 Expressions [expr]. Point 10 starts</p>\n<blockquote>\n<p id=\"so_40891113_40891838_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a <strong>common type</strong>, which is also the type of the result. This pattern is called the usual arithmetic conversions, which are defined as follows:</p>\n</blockquote>\n<p>The sub-points that follow say things like \"If <strong>either</strong> operand is...\", \"...the <strong>other</strong> shall...\", \"If <strong>both</strong> operands ...\" etc.</p>\n<p>For your specific example, see 10.5.2</p>\n<blockquote>\n<p id=\"so_40891113_40891838_1\">Otherwise, if both operands have signed integer types or both have unsigned integer types, the operand with the type of lesser integer conversion rank shall be converted to the type of the operand with greater rank.</p>\n</blockquote>\n", "OwnerUserId": "583195", "PostTypeId": "2", "Id": "40891838", "Score": "2", "CreationDate": "2016-11-30T15:13:03.140", "LastActivityDate": "2016-11-30T15:13:03.140"}, "bq_ids": {"n4140": {"so_40891113_40891838_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_40891113_40891838_1": {"section_id": 5943, "quality": 1.0, "length": 23}}, "n3337": {"so_40891113_40891838_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_40891113_40891838_1": {"section_id": 5714, "quality": 1.0, "length": 23}}, "n4659": {"so_40891113_40891838_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}, "so_40891113_40891838_1": {"section_id": 7428, "quality": 1.0, "length": 23}}}});