post_cb({"bq_ids": {"n4140": {"so_16775034_16775133_0": {"length": 21, "quality": 1.0, "section_id": 5997}}, "n3337": {"so_16775034_16775133_0": {"length": 21, "quality": 1.0, "section_id": 5765}}, "n4659": {"so_16775034_16775133_0": {"length": 21, "quality": 1.0, "section_id": 7498}}}, "16775133": {"Id": "16775133", "PostTypeId": "2", "Body": "<p>The reference is dropped when evaluating the type of the expression (as per \u00a7 5/5), but this does not change the fact that the function call expression <code>f()</code> is an <em>lvalue</em>. Per paragraph 5.2.2/10 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16775034_16775133_0\">A function call is an <em>lvalue</em> if the result type is an <em>lvalue</em> reference type or an <em>rvalue</em> reference to function\n  type, an <em>xvalue</em> if the result type is an <em>rvalue</em> reference to object type, and a <em>prvalue</em> otherwise.</p>\n</blockquote>\n<p>In other words, the reference is not dropped from the return type of the function itself, only from the type of the evaluated function call expression (which is, therefore, <code>int</code>). </p>\n<p>The fact that the function is returning an <em>lvalue</em> reference is what allows the type system to classify corresponding function call expressions as <em>lvalues</em> - which, in turn, allows <code>decltype</code> to add the <em>lvalue</em> reference to the type of the expression, thus yielding <code>int&amp;</code>.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-27T14:24:20.610", "Score": "6", "CreationDate": "2013-05-27T14:14:44.313", "ParentId": "16775034", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-05-27T14:24:20.610"}, "16775034": {"ViewCount": "277", "Body": "<p>I know the type of <code>i</code> below in <code>main()</code> is an <code>int&amp;</code>. That's why it must be initialized.</p>\n<pre><code>int&amp; f(){ static int i = 1; return i; }\n\nint main()\n{\n    decltype(f()) i = f();\n}\n</code></pre>\n<p>But using paragraph <code>5p5</code> in the Standard, I conclude that the expression <code>f()</code> has type <code>int</code> as the reference is dropped.</p>\n<p>From <code>7.1.6.2p4</code>, how can one say that the expression <code>f()</code> is an lvalue, given that the reference was dropped from the function return?</p>\n", "AcceptedAnswerId": "16775133", "Title": "The type of 'i' below in main(). Why is it an int&?", "CreationDate": "2013-05-27T14:09:03.630", "Id": "16775034", "CommentCount": "1", "LastEditDate": "2013-05-27T14:14:52.783", "PostTypeId": "1", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-27T16:37:49.150", "Score": "6", "OwnerUserId": "411165", "Tags": "<c++><c++11><decltype>", "AnswerCount": "1"}});