post_cb({"28383177": {"ParentId": "28383035", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_28383035_28383177_0\">Is it possible to declare/implement a template within a function scope?</p>\n</blockquote>\n<p>No. [temp]/p2:</p>\n<blockquote>\n<p id=\"so_28383035_28383177_1\">A <em>template-declaration</em> can appear only as a namespace scope or class scope declaration.</p>\n</blockquote>\n<p>And lest you think this allows for template declarations inside local classes, [temp.mem]/p2:</p>\n<blockquote>\n<p id=\"so_28383035_28383177_2\">A local class of non-closure type shall not have member templates.</p>\n</blockquote>\n<p>There are also various other problems with your code, two of which are noted in Mike Seymour's answer. </p>\n<p>It is likely though that something like <code>sinh</code> can be implemented as a <code>constexpr</code> function, permitting evaluation at compile time if the argument is a constant expression.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-02-07T14:22:22.307", "Id": "28383177", "Score": "2", "CreationDate": "2015-02-07T14:16:53.703", "LastActivityDate": "2015-02-07T14:22:22.307"}, "28383067": {"ParentId": "28383035", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>There are two three problems:</p>\n<ul>\n<li>template paramaters can't have floating-point type</li>\n<li>template arguments must be constant expressions, which precludes a function argument.</li>\n<li>function definitions can only be at namespace scope. You could make it lambda, or a member of a local class, if you wanted to make it inaccessible for some reason.</li>\n</ul>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2015-02-07T15:15:51.873", "Id": "28383067", "Score": "1", "CreationDate": "2015-02-07T14:06:13.353", "LastActivityDate": "2015-02-07T15:15:51.873"}, "28383035": {"CommentCount": "4", "ViewCount": "56", "PostTypeId": "1", "LastEditorUserId": "204847", "CreationDate": "2015-02-07T14:02:37.753", "LastActivityDate": "2015-02-07T15:15:51.873", "Title": "Is it possible to declare/implement a template within a function scope?", "AcceptedAnswerId": "28383177", "LastEditDate": "2015-02-07T14:07:34.317", "Id": "28383035", "Score": "-3", "Body": "<p>Title == Question.</p>\n<p>To be very specific, is it possible to implement std::sinh like this?</p>\n<pre><code>namespace std {\n    long double sinh(const long double arg) {\n        template &lt;long double _arg&gt; long double _sinh() {\n            // sinh implementaion here\n        }\n        template &lt;&gt; long double _sinh&lt;0&gt;() {return 0;}\n        template &lt;&gt; long double _sinh&lt;-0&gt;() {return -0;}\n        template &lt;&gt; long double _sinh&lt;INFINITY&gt;() {return INFINITY;}\n        template &lt;&gt; long double _sinh&lt;-INFINITY&gt;() {return -INFINITY;}\n        return _sinh&lt;arg&gt;();\n    }\n}\n</code></pre>\n<p>I know, this is a stupid idea, but I am really curious.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "4540658", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28383035_28383177_2": {"section_id": 111, "quality": 1.0, "length": 7}, "so_28383035_28383177_0": {"section_id": 48, "quality": 0.6666666666666666, "length": 4}, "so_28383035_28383177_1": {"section_id": 49, "quality": 1.0, "length": 8}}, "n3337": {"so_28383035_28383177_2": {"section_id": 106, "quality": 0.7142857142857143, "length": 5}, "so_28383035_28383177_0": {"section_id": 6788, "quality": 0.6666666666666666, "length": 4}, "so_28383035_28383177_1": {"section_id": 44, "quality": 1.0, "length": 8}}, "n4659": {"so_28383035_28383177_2": {"section_id": 115, "quality": 1.0, "length": 7}, "so_28383035_28383177_0": {"section_id": 49, "quality": 0.6666666666666666, "length": 4}, "so_28383035_28383177_1": {"section_id": 50, "quality": 1.0, "length": 8}}}});