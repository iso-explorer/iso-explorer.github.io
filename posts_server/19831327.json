post_cb({"bq_ids": {"n4140": {"so_19831327_19831496_0": {"length": 18, "quality": 0.9, "section_id": 180}}, "n3337": {"so_19831327_19831496_0": {"length": 18, "quality": 0.9, "section_id": 174}}, "n4659": {"so_19831327_19831496_0": {"length": 18, "quality": 0.9, "section_id": 185}}}, "19831416": {"Id": "19831416", "PostTypeId": "2", "Body": "<p>Within a template, the template name is also the <em>injected class name</em> and refers to the class type <code>S&lt;N&gt;</code> rather than the template; and within a class member function, the class type is complete even if the function is defined inside the class. So both are valid and equivalent to each other.</p>\n", "LastActivityDate": "2013-11-07T08:49:34.573", "CommentCount": "0", "CreationDate": "2013-11-07T08:49:34.573", "ParentId": "19831327", "Score": "3", "OwnerUserId": "204847"}, "19831356": {"Id": "19831356", "PostTypeId": "2", "Body": "<p>C++ implicitly inserts <code>using S = S&lt;N&gt;;</code> into the class body, so the two statements are equivalent.</p>\n<pre><code>template&lt;int N&gt;\nstruct S {\n    static_assert(std::is_same&lt;S, S&lt;N&gt;&gt;(), \"\");\n};\n</code></pre>\n<p>It <em>would be</em> an error if you did <code>sizeof(S)</code> outside of the definition of <code>S</code>.</p>\n", "LastEditorUserId": "1804599", "LastActivityDate": "2017-05-25T22:04:28.327", "Score": "11", "CreationDate": "2013-11-07T08:45:54.553", "ParentId": "19831327", "CommentCount": "0", "OwnerUserId": "1804599", "LastEditDate": "2017-05-25T22:04:28.327"}, "19831327": {"ViewCount": "3254", "Body": "<pre><code>template&lt;int N&gt;\nstruct S\n{\n    void foo()\n    {\n        sizeof( S ); // (*)\n        sizeof( S&lt;N&gt; );\n    }\n};\n\nint main()\n{\n    S&lt;5&gt; s;\n    s.foo();\n    return 0;\n}\n</code></pre>\n<p>This code compiles fine (VS2010), but i have doubts about <code>(*)</code> string. <code>S</code> is not complete type, unlike <code>S&lt;N&gt;</code> in my opinion then how come the compiler knows its size? What does the standard say about such situation, does it well-formed correct <code>sizeof</code>?</p>\n", "AcceptedAnswerId": "19831496", "Title": "sizeof of template class", "CreationDate": "2013-11-07T08:44:16.407", "Id": "19831327", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-05-25T22:04:28.327", "Score": "11", "OwnerUserId": "324137", "Tags": "<c++><templates><sizeof>", "AnswerCount": "4"}, "19831496": {"Id": "19831496", "PostTypeId": "2", "Body": "<p>Name <code>S</code> inside the definition of <code>struct S</code> refers to the <em>injected class name</em> <code>S</code>, which according to 14.6.1/2 (C++03) does not require an explicit argument list</p>\n<blockquote>\n<p id=\"so_19831327_19831496_0\">Within the scope of a class template specialization or partial \n  specialization, \n  when the injected-class-name is\n      not followed by a &lt;, it is equivalent to the injected-class-name \n  followed by the template-arguments of the\n      class template specialization or partial specialization enclosed in &lt;&gt;.</p>\n</blockquote>\n<p>Note that if you deliberately force the compiler to use the \"original\" name of the template (instead of the injected class name) by using scope resolution operator, the parameter list will become mandatory</p>\n<pre><code>template&lt;int N&gt;\nstruct S\n{\n    void foo()\n    {\n        sizeof( ::S );    // &lt;- ERROR\n        sizeof( ::S&lt;N&gt; ); // &lt;- OK\n    }\n};\n</code></pre>\n", "LastEditorUserId": "187690", "LastActivityDate": "2013-11-07T09:07:06.433", "Score": "14", "CreationDate": "2013-11-07T08:54:13.817", "ParentId": "19831327", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2013-11-07T09:07:06.433"}, "19831473": {"Id": "19831473", "PostTypeId": "2", "Body": "<p>Member functions of class templates are not instantiated until they are called. By that time, the class will already be  instantiated and the compiler will have all the information it needs to calculate its size. </p>\n", "LastEditorUserId": "947836", "LastActivityDate": "2013-11-07T09:59:42.993", "Score": "1", "CreationDate": "2013-11-07T08:52:48.830", "ParentId": "19831327", "CommentCount": "0", "OwnerUserId": "947836", "LastEditDate": "2013-11-07T09:59:42.993"}});