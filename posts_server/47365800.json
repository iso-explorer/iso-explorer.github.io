post_cb({"47365850": {"ParentId": "47365800", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++ Standard <code>\u00a727.4.1 [iostream.objects.overview]</code></p>\n<blockquote>\n<pre><code>#include &lt;ios&gt;\n#include &lt;streambuf&gt;\n#include &lt;istream&gt;\n#include &lt;ostream&gt;\n\nnamespace std {\n  extern istream cin;\n  extern ostream cout;\n  extern ostream cerr;\n  extern ostream clog;\n  extern wistream wcin;\n  extern wostream wcout;\n  extern wostream wcerr;\n  extern wostream wclog;\n}\n</code></pre>\n<p id=\"so_47365800_47365850_0\">p1 The header  declares objects that associate objects with\n  the standard C streams provided for by the functions declared in\n   (27.9.2), and includes all the headers necessary to use these\n  objects.</p>\n</blockquote>\n<p>You may also take a look at gcc's <a href=\"https://github.com/gcc-mirror/gcc/blob/1cb6c2eb3b8361d850be8e8270c597270a1a7967/libstdc%2B%2B-v3/src/c%2B%2B98/globals_io.cc#L58\" rel=\"nofollow noreferrer\">implementation on github</a>:</p>\n<blockquote id=\"so_47365800_47365850_1\">\n<pre><code>namespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  // Standard stream objects.\n  // NB: Iff &lt;iostream&gt; is included, these definitions become wonky.\n  typedef char fake_istream[sizeof(istream)]\n  __attribute__ ((aligned(__alignof__(istream))));\n  typedef char fake_ostream[sizeof(ostream)]\n  __attribute__ ((aligned(__alignof__(ostream))));\n  fake_istream cin;\n  fake_ostream cout;\n  fake_ostream cerr;\n  fake_ostream clog;\n\n#ifdef _GLIBCXX_USE_WCHAR_T\n  typedef char fake_wistream[sizeof(wistream)]\n  __attribute__ ((aligned(__alignof__(wistream))));\n  typedef char fake_wostream[sizeof(wostream)]\n  __attribute__ ((aligned(__alignof__(wostream))));\n  fake_wistream wcin;\n  fake_wostream wcout;\n  fake_wostream wcerr;\n  fake_wostream wclog;\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n</code></pre>\n</blockquote>\n", "OwnerUserId": "275221", "LastEditorUserId": "275221", "LastEditDate": "2017-11-18T12:13:53.607", "Id": "47365850", "Score": "4", "CreationDate": "2017-11-18T12:04:47.497", "LastActivityDate": "2017-11-18T12:13:53.607"}, "47365800": {"CommentCount": "1", "ViewCount": "30", "CreationDate": "2017-11-18T11:59:53.227", "LastActivityDate": "2017-11-18T12:13:53.607", "Title": "What is datatype of cin", "AcceptedAnswerId": "47365832", "PostTypeId": "1", "Id": "47365800", "Score": "2", "Body": "<p>I would like to know what cin exactly is. I mean a function or class....</p>\n<p>I am sure it not a function as the way we use cin is very different from the a function is called.</p>\n<p>That leaves options like class or object or something else.</p>\n<p>What is it exactly?</p>\n", "Tags": "<c++><cin>", "OwnerUserId": "8957908", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47365800_47365850_0": {"section_id": 1919, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_47365800_47365850_0": {"section_id": 1908, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_47365800_47365850_0": {"section_id": 2190, "quality": 0.8823529411764706, "length": 15}}}, "47365832": {"ParentId": "47365800", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>cin</code> is an <strong><em>object</em></strong> of the <code>istream</code> class</p>\n", "OwnerUserId": "7121742", "LastEditorUserId": "7121742", "LastEditDate": "2017-11-18T12:11:56.687", "Id": "47365832", "Score": "3", "CreationDate": "2017-11-18T12:03:03.643", "LastActivityDate": "2017-11-18T12:11:56.687"}});