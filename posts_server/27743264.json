post_cb({"27743286": {"Id": "27743286", "PostTypeId": "2", "Body": "<p>If you have <code>const</code> data member in your class/struct, then compiler won't generate default constructor for that. You have to explicitly define it and initialize that <code>const</code> member ( not assign it ).</p>\n<p>It should be an error in both cases. </p>\n", "LastEditorUserId": "4047092", "LastActivityDate": "2015-01-02T14:12:30.010", "Score": "4", "CreationDate": "2015-01-02T13:53:37.180", "ParentId": "27743264", "CommentCount": "4", "OwnerUserId": "4047092", "LastEditDate": "2015-01-02T14:12:30.010"}, "bq_ids": {"n4140": {"so_27743264_27743635_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 369}}, "n3337": {"so_27743264_27743635_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 359}}, "n4659": {"so_27743264_27743635_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 382}}}, "27743264": {"ViewCount": "1897", "Body": "<p>Consider this code snippet:</p>\n<pre><code>struct Foo {\n\n};\n\ntemplate&lt;typename T&gt;\nstruct Bar {\n    const T foo;\n};\n\nint main() {\n    Bar&lt;Foo&gt; test;\n}\n</code></pre>\n<p>I'm compiling it with g++-4.9.2 with [-std=c++11 -O0 -g3 -pedantic -Wall -Wextra -Wconversion] and getting <code>error: uninitialized const member in \u2018struct Bar&lt;Foo&gt;\u2019</code>. This is pretty obvious.</p>\n<p>BUT try just add std::string as Foo member and program compiles!</p>\n<pre><code>#include &lt;string&gt;\nstruct Foo {\n    std::string test;\n};\n// (...)\n</code></pre>\n<p>What happening? Replacing test's type into double causes program to fail to compile again. What string member changes in class?</p>\n<p><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4DOAXATuA5gPgChDMsYIMkAxAexqQG9CBICGsTJTOALh9LxIMCTAG5CAX3GFhAWwAOUAIbCUGAJ7yEYJbOQAVIqXKUAQkqyMWbDpX1IAZnXFTi4SrKXgAFAEorzOZYKLQ0%2BEIiGC5AA%3D%3D%22%2C%22compiler%22%3A%22%2Fopt%2Fgcc-4.9.0%2Fbin%2Fg%2B%2B%22%2C%22options%22%3A%22-O2%20-std%3Dc%2B%2B11%22%7D%5D%7D\" rel=\"nofollow noreferrer\">Link to online compiler with this snippet.</a></p>\n<p>It seems that gcc behaves like that since version 4.6.</p>\n", "AcceptedAnswerId": "27743635", "Title": "Weird uninitialized const member behavior", "CreationDate": "2015-01-02T13:51:31.457", "Id": "27743264", "CommentCount": "3", "LastEditDate": "2015-01-08T14:06:17.890", "PostTypeId": "1", "LastEditorUserId": "5801", "LastActivityDate": "2015-01-08T14:06:17.890", "Score": "17", "OwnerUserId": "719457", "Tags": "<c++><c++11><gcc>", "AnswerCount": "3"}, "27743635": {"Id": "27743635", "PostTypeId": "2", "Body": "<p>I think it should consistently always produce an error. Clang does so. The C++ standard says in clause (4.3) of \u00a712.1.4 that\nthe default constructor is implicitly deleted when</p>\n<blockquote>\n<p id=\"so_27743264_27743635_0\">\u2014 any non-variant non-static data member of const-qualified type (or\n  array thereof) with no brace-or equal-initializer does not have a\n  user-provided default constructor,</p>\n</blockquote>\n<p>As <code>Foo</code> does not have a user-provided default constructor, <code>Bar</code> should have an implicitly deleted default constructor and thus instantiating <code>Bar&lt;Foo&gt; test</code> in main should produce an error.</p>\n<p>Maybe report a bug to GCC?</p>\n", "LastEditorUserId": "2169853", "LastActivityDate": "2015-01-02T17:07:13.720", "Score": "17", "CreationDate": "2015-01-02T14:21:32.963", "ParentId": "27743264", "CommentCount": "0", "OwnerUserId": "2169853", "LastEditDate": "2015-01-02T17:07:13.720"}, "27743885": {"Id": "27743885", "PostTypeId": "2", "Body": "<p>It looks like g++ automatically generates a default constructor even when const members should have been initialized at construction time because it knows that a string has a default constructor initializing it to an empty string. In fact all happens as if the source was :</p>\n<pre><code>struct Foo {\n    std::string test;\n    Foo():test() {;}\n};\n\ntemplate&lt;typename T&gt;\nstruct Bar {\n    const T foo;\n    Bar(): foo() {;}\n};\n\nint main() {\n    Bar&lt;Foo&gt; test;\n}\n</code></pre>\n<p>which compiles fine both with clang and MSVC.</p>\n<p>(but I must admit I still haven't found the reference in gcc doc explaining that ...)</p>\n", "LastActivityDate": "2015-01-02T14:42:05.600", "CommentCount": "0", "CreationDate": "2015-01-02T14:42:05.600", "ParentId": "27743264", "Score": "2", "OwnerUserId": "3545273"}});