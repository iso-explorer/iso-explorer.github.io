post_cb({"40685032": {"CommentCount": "15", "AcceptedAnswerId": "40691509", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-11-18T19:55:51.913", "LastActivityDate": "2016-11-19T10:09:43.630", "LastEditDate": "2017-05-23T11:45:56.913", "ViewCount": "185", "FavoriteCount": "2", "Title": "Is it legal to perform partial in-class specialization of a member template class in derived class", "Id": "40685032", "Score": "7", "Body": "<p>It is continuation of <a href=\"https://stackoverflow.com/questions/40656857/why-is-in-class-partial-specialization-well-formed\">this</a> question. I am specifically interested if the <strong>partial</strong> specialization of a <strong>member class</strong> like this:</p>\n<pre><code>struct FooParent {\n    template &lt;class&gt;\n    struct Bar{ };\n};\n\nstruct Foo: FooParent {\n    template &lt;class T&gt;\n    struct Bar&lt;T*&gt; {};\n};\n</code></pre>\n<p>I know this can be done inside a namespace scope:</p>\n<pre><code>template &lt;class T&gt;\nstruct Foo::Bar&lt;T*&gt;{ };\n</code></pre>\n<p>But I'm also specifically interested in <strong>in-class</strong> partial specialization at the level of derived class.</p>\n<p>Both clang and gcc complains when encounter a former:</p>\n<p>clang states that there is an explicit template specialization which obviously does not occur:</p>\n<blockquote>\n<p id=\"so_40685032_40685032_0\">error: explicit specialization of 'Bar' in class scope</p>\n</blockquote>\n<p>gcc is a little bit less verbose here and says that the specialization of the member template must be performed at a namespace scope which obviously is not a case for not derived class.</p>\n<blockquote>\n<p id=\"so_40685032_40685032_1\">error: specialization of 'template struct FooParent::Bar' must appear at namespace scope</p>\n</blockquote>\n<p>Is gcc right here in his error message?</p>\n", "Tags": "<c++><templates><language-lawyer><template-specialization><partial-specialization>", "OwnerUserId": "4324224", "AnswerCount": "1"}, "40691509": {"ParentId": "40685032", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>I'm trying to sum up what I said in the comments to the question, as requested by the OP.</p>\n<hr>\n<p>I guess <a href=\"http://eel.is/c++draft/temp.class.spec#5\" rel=\"nofollow\">[temp.class.spec]/5</a> is enough to reply to the question.<br>\nIn particular:</br></p>\n<blockquote>\n<p id=\"so_40685032_40691509_0\">A class template partial specialization may be declared or redeclared in any namespace scope in which the corresponding primary template may be defined [...].</p>\n</blockquote>\n<p>In this case, what actually rule on it is where the primary template can be defined.<br>\nIn the example, you are trying to declare (and contextually define, but it's first of all a declaration) a partial specialization in a derived class.</br></p>\n<p>The short answer is: you cannot define the primary template in the derived class, so you cannot declare a partial specialization in that class as well.</p>\n<p>If it was possible , the following would have been possible too:</p>\n<pre><code>struct FooParent {\n    template &lt;class&gt;\n    struct Bar;\n};\n\nstruct Foo: FooParent {\n    template &lt;class T&gt;\n    struct FooParent::Bar&lt;T*&gt; {};\n};\n</code></pre>\n<p>Or this one if you prefer:</p>\n<pre><code>struct Foo: FooParent {\n    template &lt;class T&gt;\n    struct Bar&lt;T*&gt; {};\n};\n</code></pre>\n<p>Unfortunately (?) they are not allowed and this would suffice to tell you that your attempt to specialize the class template is invalid as well.</p>\n<p>Anyway, let's consider it a bit further.<br>\nThe primary template is part of the member specification of <code>Foo</code> (see <a href=\"http://eel.is/c++draft/class.mem#1\" rel=\"nofollow\">here</a> for further details).<br>\nThus, the question - <em>where can I define such a template?</em>, quickly becomes - <em>where can I define any other member of the class?</em>.<br>\nAgain, the answer is - <em>not in the scope of a derived class</em>.</br></br></br></p>\n<hr>\n<p>I'm pretty sure that a language-lawyer would give you more direct and straightforward explanation.<br>\nI'm also pretty sure that the same language-lawyer would curse me for having mentioned the wrong sections of the standard.<br>\nAnyway, I hope the few examples above can give you a base point from which to start.</br></br></p>\n</hr></hr>", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2016-11-19T10:09:43.630", "Id": "40691509", "Score": "1", "CreationDate": "2016-11-19T10:01:06.683", "LastActivityDate": "2016-11-19T10:09:43.630"}, "bq_ids": {"n4140": {"so_40685032_40685032_0": {"section_id": 278, "quality": 0.6666666666666666, "length": 4}, "so_40685032_40691509_0": {"section_id": 139, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_40685032_40685032_0": {"section_id": 269, "quality": 0.6666666666666666, "length": 4}, "so_40685032_40691509_0": {"section_id": 133, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_40685032_40685032_0": {"section_id": 285, "quality": 0.6666666666666666, "length": 4}, "so_40685032_40691509_0": {"section_id": 143, "quality": 0.8571428571428571, "length": 12}}}});