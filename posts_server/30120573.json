post_cb({"30122659": {"ParentId": "30120573", "CommentCount": "2", "Body": "<p>You're not doing anything wrong, and your interpretation of the standard is correct. Visual C++ 2013 indeed does not implement these rules properly.</p>\n<p>A relevant bug report is here:</p>\n<p><a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/995876/default-copy-constructor-is-generated-even-when-a-custom-move-constructor-is-defined-c-11\">Default copy constructor is generated even when a custom move constructor is defined [c++11]</a></p>\n<p>It's marked as <code>Won't Fix</code> and the comment from the development team is:</p>\n<blockquote>\n<p id=\"so_30120573_30122659_0\">Visual Studio 2013 indeed does not fully implement the C++11 rules\n  governing special member functions and move operations. We will\n  include a fix for this bug in the next major release of Visual Studio.</p>\n</blockquote>\n<p>The good news is that things seem to be working properly in Visual C++ 2015 RC. I've just verified that your code triggers both compiler and IntelliSense errors. The compiler diagnostic is:</p>\n<pre><code>error C2280: 'C::C(const C &amp;)': attempting to reference a deleted function\n</code></pre>\n<p>(From what I've tested during the past few months, MSVC14 is shaping up as a pretty good C++ compiler - lots of standard compliance issues have been fixed.)</p>\n", "OwnerUserId": "4326278", "PostTypeId": "2", "Id": "30122659", "Score": "5", "CreationDate": "2015-05-08T11:25:04.973", "LastActivityDate": "2015-05-08T11:25:04.973"}, "30120573": {"CommentCount": "2", "AcceptedAnswerId": "30122659", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-05-08T09:38:04.450", "LastActivityDate": "2015-05-08T11:25:04.973", "LastEditDate": "2017-05-23T11:51:02.493", "ViewCount": "517", "FavoriteCount": "1", "Title": "Visual Studio 2013 does not delete the copy constructor when a user-defined move constructor is provided", "Id": "30120573", "Score": "8", "Body": "<p>I appreciate the C++11 standard dictates:</p>\n<blockquote>\n<p id=\"so_30120573_30120573_0\">If the class definition does not explicitly declare a copy\n  constructor, one is declared implicitly. <strong>If the class definition\n  declares a move constructor or move assignment operator, the\n  implicitly declared copy constructor is defined as deleted</strong>; otherwise,\n  it is defined as defaulted.</p>\n</blockquote>\n<p>(actually copied from <a href=\"https://stackoverflow.com/a/11255089\">here</a>)</p>\n<p>The following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct C\n{\n    int x = 1;\n\n    C()\n    {\n    }\n\n    C(C&amp;&amp;)\n    {\n    }\n};\n\nint main()\n{\n    const C c;\n    C c2(c);\n\n    std::cout &lt;&lt; c.x &lt;&lt; \" \" &lt;&lt; c2.x &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>does not compile on <code>gcc 4.9.0</code>, but compiles just fine on Visual Studio 2013 (<code>Compiler Version 18.00.21005.1 for x86</code>). Is this yet another Visual Studio violation of the standard, or am I doing something wrong this time? If this is a violation of the standard, is there a tracking bug or any source where this behaviour is documented?</p>\n", "Tags": "<c++><visual-studio><c++11><visual-studio-2013>", "OwnerUserId": "671092", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30120573_30120573_0": {"section_id": 456, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_30120573_30120573_0": {"section_id": 447, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_30120573_30120573_0": {"section_id": 479, "quality": 0.9629629629629629, "length": 26}}}});