post_cb({"27081829": {"ParentId": "27081797", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because C++ language knows nothing about any \"URL encoding\". From the point if view of C++ language your <code>'%20'</code> is a multi-character constant that designates some implementation-defined value of type <code>char</code> (multi-character constants is an obscure feature of C and C++ languages).</p>\n<p>If you want to (or have to) use <code>\"%20\"</code> in your string for passing to some URL-aware recipient you will have to insert \"%20\" as a substring (three characters) into your string.</p>\n<p>Your attempts to convert string literal <code>\"%20\"</code> to character type will achieve nothing. It is not possible to squeeze three characters into the place of one. You will have to \"shift\" the tail portion of your string in order to provide space for three characters where one used to reside.</p>\n<p>Under the circumstances, it might make more sense to generate the new result in a separate string</p>\n<pre><code>std::string new_text;\n\nfor (std::string::const_iterator it = text.begin(); it != text.end(); ++it) {\n    if (*it == ' ') \n      new_text += \"%20\";\n    else\n      new_text += *it;\n}\n\nreturn new_text;\n</code></pre>\n<p>Although with some careful programming it is possible to do it directly in the original string.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2015-01-27T00:24:18.293", "Id": "27081829", "Score": "9", "CreationDate": "2014-11-22T19:55:34.220", "LastActivityDate": "2015-01-27T00:24:18.293"}, "27081797": {"CommentCount": "6", "ViewCount": "767", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-11-22T19:52:42.050", "LastActivityDate": "2015-01-27T00:24:18.293", "AnswerCount": "2", "LastEditDate": "2017-05-23T11:54:28.600", "LastEditorDisplayName": "anon", "Title": "Why can't I use \"%20\" in a string?", "Id": "27081797", "Score": "-3", "Body": "<p>I use a function that I found in <a href=\"https://stackoverflow.com/questions/5252612/replace-space-with-an-underscore\">this question</a>, adapted to replace all spaces with \"%20\" (probably could be done far more efficiently!):</p>\n<pre><code>## Heading ##std::string Main::SpacesForWeb(std::string text) {\n    for (std::string::iterator it = text.begin(); it != text.end(); ++it) {\n        if (*it == ' ') {\n            *it = '%20';\n        }\n    }\n    return text;\n}\n</code></pre>\n<p>However when I try to use it for a string such as <code>Local Live Test Server</code>, the output is this:</p>\n<p><img alt=\"enter image description here\" src=\"https://puu.sh/d1fqJ/f6e555e123.png\"/></p>\n<p>My last question dealt with <code>string</code> issues and found out that <code>string</code> is <code>typedef</code>ed to point to the internal <code>CryString</code> type in the game SDK I am using (CryEngine2). I am now using <code>std::string</code> in order to counter this.</p>\n<p>This issue is also reflected in the database I use after this conversion happens and the data is sent to the database:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/O0s25.png\"/></p>\n<p>Why can't I use <code>%20</code> (and perhaps other URL encoding symbols) in this way, and how can I get this to work?\nI attempted to do some research on this in order to fix the issue myself, but however nothing relevant came up.</p>\n<p>I have tried using <code>*it = (char)\"%20\";</code> in-place of <code>*it = (char)\"%20\";</code>, but however this actually removes the <code>0</code> that is appearing in the string instead of replacing the spaces with <code>%20</code>.</p>\n", "Tags": "<c++><string><sfml><url-encoding><crysis>", "OwnerDisplayName": "anon"}, "27081934": {"ParentId": "27081797", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_27081797_27081934_0\">I have tried using *it = (char)\"%20\"; in-place of *it = (char)\"%20\";, but however this actually removes the 0 that is appearing in the string instead of replacing the spaces with %20.</p>\n</blockquote>\n<p>Please don't apply whacky PHP habits to C++, you can't just say \"pretend this string is a single character\" and expect anything sensible. <code>\"%20\"</code> is an array, casting it to <code>char</code> takes the address of the first element (which is a 32-bit or 64-bit pointer value) and then truncates it to the size of a <code>char</code>, probably 8-bits, and that is going to give you garbage.</p>\n<p><code>'%'</code> is a character, and <code>'2'</code> is a character, but <code>'%20'</code> is not a character, so you cannot sensibly assign it to a <code>char</code>.</p>\n<p>(Technically <code>'%20'</code> is a multi-character constant with an implementation-defined value, which with my compiler is <code>0x253230</code>, which is clearly too large to fit into my compiler's 8-bit characters)</p>\n<p>2.13.3 [lex.ccon] says:</p>\n<blockquote>\n<p id=\"so_27081797_27081934_1\">An ordinary character literal that contains more than one <em>c-char</em> is a <em>multicharacter literal</em>. A multicharacterliteral, or an ordinary character literal containing a single <em>c-char</em> not representable in the execution character set, is conditionally-supported, has type <code>int</code>, and has an implementation-defined value.</p>\n</blockquote>\n<p>There are several ways to replace single characters with strings (AndreyT's answer shows a nice simple approach) but just trying to smash something that isn't a <code>char</code> into the byte of memory holding a single <code>char</code> is never going to work.</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "27081934", "Score": "5", "CreationDate": "2014-11-22T20:07:25.587", "LastActivityDate": "2014-11-22T20:07:25.587"}, "bq_ids": {"n4140": {"so_27081797_27081934_1": {"section_id": 5343, "quality": 0.8846153846153846, "length": 23}}, "n3337": {"so_27081797_27081934_1": {"section_id": 5140, "quality": 0.5769230769230769, "length": 15}}, "n4659": {"so_27081797_27081934_1": {"section_id": 6765, "quality": 0.8846153846153846, "length": 23}}}});