post_cb({"bq_ids": {"n4140": {"so_44818513_44818513_0": {"length": 57, "quality": 0.9661016949152542, "section_id": 3255}}, "n3337": {"so_44818513_44818513_0": {"length": 57, "quality": 0.9661016949152542, "section_id": 3127}}, "n4659": {"so_44818513_44818513_0": {"length": 57, "quality": 0.9661016949152542, "section_id": 4013}}}, "44818513": {"ViewCount": "1904", "Body": "<p>There is a possibility to add or redefine default arguments of a function in C++. Let's look at the example:</p>\n<pre><code>void foo(int a, int b, int c = -1) {\n    std::cout &lt;&lt; \"foo(\" &lt;&lt; a &lt;&lt; \", \" &lt;&lt; b &lt;&lt; \", \" &lt;&lt; c &lt;&lt; \")\\n\";\n}\n\nint main() {\n    foo(1, 2);   // output: foo(1, 2, -1)\n\n    // void foo(int a, int b = 0, int c);\n    // error: does not use default from surrounding scope\n\n    void foo(int a, int b, int c = 30);\n    foo(1, 2);   // output: foo(1, 2, 30) \n\n    // void foo(int a, int b, int c = 35);\n    // error: we cannot redefine the argument in the same scope\n\n    // has a default argument for c from a previous declaration\n    void foo(int a, int b = 20, int c);\n    foo(1);      // output: foo(1, 20, 30)\n\n    void foo(int a = 10, int b, int c);\n    foo();       // output: foo(10, 20, 30)\n\n    {\n        // in inner scopes we can completely redefine them\n        void foo(int a, int b = 4, int c = 8);\n        foo(2);  // output: foo(2, 4, 8)\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Online version to play with: <a href=\"http://ideone.com/vdfs3t\" rel=\"nofollow noreferrer\">http://ideone.com/vdfs3t</a></p>\n<p>These possibilities are regulated by the standard in 8.3.6. More specific details are in 8.3.6/4</p>\n<blockquote>\n<p id=\"so_44818513_44818513_0\">For non-template functions, default arguments can be added in later\n  declarations of a function in the same scope. Declarations in\n  different scopes have completely distinct sets of default arguments.\n  That is, declarations in inner scopes do not acquire default arguments\n  from declarations in outer scopes, and vice versa. In a given function\n  declaration, each parameter subsequent to a parameter with a default\n  argument shall have a default argument supplied in this or a previous\n  declaration or shall be a function parameter pack. A default argument\n  shall not be redefined by a later declaration (not even to the same\n  value)\n  ...</p>\n</blockquote>\n<p>To tell the truth I never use this feature when coding in c++. I used similar code snippets several times to surprise my colleagues, but certainly not in the production code. Thus, the question is: Do you know real world examples of the code that use these features with benefits?     </p>\n", "Title": "C++: Adding and redefinition of default arguments in real world", "CreationDate": "2017-06-29T07:08:37.830", "LastActivityDate": "2017-09-06T13:03:53.523", "CommentCount": "4", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2017-09-06T13:03:53.523", "LastEditorUserId": "4759200", "Id": "44818513", "Score": "15", "OwnerUserId": "4759200", "Tags": "<c++><language-features><default-arguments>", "AnswerCount": "1"}, "44911701": {"Id": "44911701", "PostTypeId": "2", "Body": "<p>If you cannot change some existing code or library and you really cannot be bothered to type the correct argument then changing the default argument for some scope could be a solution.</p>\n<p>It seems like the kind of hack that could be useful when working with C++ code generated by some legacy tool. For example, if the generated code has always had hundreds calls into some external library using a default argument but now the default argument is no longer correct.</p>\n", "LastActivityDate": "2017-07-04T17:48:13.697", "CommentCount": "0", "CreationDate": "2017-07-04T17:48:13.697", "ParentId": "44818513", "Score": "2", "OwnerUserId": "3527268"}});