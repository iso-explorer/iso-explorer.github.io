post_cb({"6654820": {"Id": "6654820", "PostTypeId": "2", "Body": "<p>See 9.4.2/4:</p>\n<blockquote>\n<p id=\"so_6654609_6654820_0\">If a static data member is of const integral or const enumeration\n  type, its declaration in the class definition can specify a constant\n  initializer which shall be an integral constant expression (5.19). In\n  that case, the member can appear in integral constant expressions\n  within its scope. The member shall still be defined in a namespace\n  scope if it is used in the program and the namespace scope definition\n  shall not contain an initializer.</p>\n</blockquote>\n<p>There is some contention (I believe) as to the precise meaning of \"used\" although my understanding is roughly that the if program requires the address of the variable then it's \"used\" in this context. It doesn't seem unreasonable in my mind at all that changing the ternary to an <code>if/else</code> or changing optimization level could change the view of the program as seen by g++ thus causing the failure or success. Also note that it doesn't say anything about a required diagnostic if you violate the requirement here.</p>\n<p>You can't go wrong by always defining your static members.</p>\n", "LastActivityDate": "2011-07-11T18:37:08.677", "CommentCount": "6", "CreationDate": "2011-07-11T18:37:08.677", "ParentId": "6654609", "Score": "5", "OwnerUserId": "251738"}, "bq_ids": {"n4140": {"so_6654609_6654820_0": {"length": 28, "quality": 0.6829268292682927, "section_id": 5908}}, "n3337": {"so_6654609_6654820_0": {"length": 28, "quality": 0.6829268292682927, "section_id": 5680}}, "n4659": {"so_6654609_6654820_0": {"length": 24, "quality": 0.5853658536585366, "section_id": 7390}}}, "6654714": {"Id": "6654714", "PostTypeId": "2", "Body": "<p><strong>There is an <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#712\" rel=\"noreferrer\">ongoing debate</a> on whether this code is actually legal or not</strong>.</p>\n<p>Either way, according to some readings the constants actually <em>do</em> need to be defined before usage, not just declared. That is,</p>\n<pre><code>class C {\n  public:\n    static const int a = 0;\n    static const int b = 1;\n};\n\nconst int C::a;\nconst int C::b;\n</code></pre>\n<p>Or just use the <code>enum</code> hack that was used to accomodate older compilers (but which may after all be the only legal way):</p>\n<pre><code>class C {\n  public:\n    enum { a = 0, b = 1 };\n};\n</code></pre>\n", "LastEditorUserId": "1968", "LastActivityDate": "2011-07-11T18:47:20.930", "Score": "18", "CreationDate": "2011-07-11T18:27:41.650", "ParentId": "6654609", "CommentCount": "8", "OwnerUserId": "1968", "LastEditDate": "2011-07-11T18:47:20.930"}, "6654609": {"ViewCount": "514", "Body": "<p>For some strange reason g++ (versions 4.5.0 and 4.5.2) cannot compile this code:</p>\n<pre><code>bool somefunc() {\n    return false;\n}\n\nclass C {\n  public:\n    static const int a = 0;\n    static const int b = 1;\n};\n\nclass myclass {\n  public:\n    int check() {\n        return somefunc() ? C::a : C::b;\n        // if(somefunc()) return C::a; else return C::b;\n    }\n};\n\nint main() {\n    myclass obj;\n    obj.check();\n    return 0;\n}\n</code></pre>\n<p>It gives me this error:</p>\n<pre><code>/tmp/ccyvvTUy.o:/home/mati/test.cpp:14: undefined reference to `C::a'\n/tmp/ccyvvTUy.o:/home/mati/test.cpp:14: undefined reference to `C::b'\ncollect2: ld returned 1 exit status\n</code></pre>\n<p>What's strange if I change problematic line to the commented line it compiles fine.\nIs it something wrong with my code and something I don't understand about C++ or is it just a bug in G++ ?</p>\n", "AcceptedAnswerId": "6654714", "Title": "Is this code broken or is there a bug in g++?", "CreationDate": "2011-07-11T18:19:19.603", "Id": "6654609", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2011-07-11T18:24:35.553", "LastEditorUserId": "27615", "LastActivityDate": "2011-07-11T20:08:53.083", "Score": "21", "OwnerUserId": "838889", "Tags": "<c++><linker-errors>", "AnswerCount": "4"}, "6654823": {"Id": "6654823", "PostTypeId": "2", "Body": "<p>Try defining it globally without optimisation.</p>\n<pre><code>const int C::a = 0; \n</code></pre>\n", "LastActivityDate": "2011-07-11T18:37:37.523", "CommentCount": "4", "CreationDate": "2011-07-11T18:37:37.523", "ParentId": "6654609", "Score": "0", "OwnerUserId": "832009"}, "6655891": {"Id": "6655891", "PostTypeId": "2", "Body": "<p>change the following line \n     return somefunc() ? C::a : C::b;</p>\n<p>to\n    return (somefunc() ? C::a : C::b);</p>\n<p>It should compile.</p>\n", "LastActivityDate": "2011-07-11T20:08:53.083", "CommentCount": "0", "CreationDate": "2011-07-11T20:08:53.083", "ParentId": "6654609", "Score": "-2", "OwnerUserId": "839585"}});