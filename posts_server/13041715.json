post_cb({"bq_ids": {"n4140": {"so_13041715_13041715_0": {"length": 49, "quality": 0.9423076923076923, "section_id": 3376}, "so_13041715_13044052_0": {"length": 15, "quality": 0.9375, "section_id": 3374}}, "n3337": {"so_13041715_13041715_0": {"length": 52, "quality": 1.0, "section_id": 3246}, "so_13041715_13044052_0": {"length": 15, "quality": 0.9375, "section_id": 3244}}}, "13044052": {"PostTypeId": "2", "Body": "<p>I do not believe that's the case. The actual requirement is only that \"...f shall allow no exceptions if every function it directly invokes allows no exceptions.\"</p>\n<p>As noted just above (\u00a715.4/12): </p>\n<blockquote>\n<p id=\"so_13041715_13044052_0\">An exception-specification is non-throwing if it is of the form <code>throw()</code>, <code>noexcept</code>, or <code>noexcept(</code><em>constant-expression</em><code>)</code> where the <em>constant-expression</em> yields <code>true</code>. A function with a non-throwing <em>exception-specification</em> does not allow any exceptions.</p>\n</blockquote>\n<p>It's not exactly a revelation that a non-throwing exception specification does not allow any exceptions, but I think it's telling that the wording in the description of a non-throwing exception specification is echoed nearly verbatim in the requirement on the implicitly declared special member function. As such, it appears to me that any form of non-throwing exception specification (<code>throw()</code> or <code>noexcept</code> or <code>noexcept(&lt;anything that converts to true&gt;)</code>) is allowed -- and that this was specifically intended, not just an accident of wording.</p>\n", "LastActivityDate": "2012-10-24T06:38:54.817", "Id": "13044052", "CommentCount": "1", "CreationDate": "2012-10-24T06:38:54.817", "ParentId": "13041715", "Score": "1", "OwnerUserId": "179910"}, "13041715": {"ViewCount": "284", "Body": "<p>The C++11 spec is clear that implicitly-generated special functions (i.e., default constructor, destructor, copy/move constructors, and copy/move assignment operators) have exception specifications. But the spec seems be written only in terms of the now-deprecated <em>dynamic</em> exception specifications (i.e., \"throw (T1, T2, T3)\").  This is backed up by the example in 15.4/14:</p>\n<pre><code>struct A {\n  A();\n  A(const A&amp;) throw();\n  A(A&amp;&amp;) throw();\n  ~A() throw(X);\n};\nstruct B {\n  B() throw();\n  B(const B&amp;) throw();\n  B(B&amp;&amp;) throw(Y);\n  ~B() throw(Y);\n};\nstruct D : public A, public B {\n  // Implicit declaration of D::D();\n  // Implicit declaration of D::D(const D&amp;) throw();\n  // Implicit declaration of D::D(D&amp;&amp;) throw(Y);\n  // Implicit declaration of D::D() throw(X, Y);\n};\n</code></pre>\n<p>Notes are not normative, I know, but it's noteworthy that D's copy constructor is declared <code>throw()</code> instead of <code>noexcept</code>.  It makes a difference, because the behavior of the program is different if a <code>throw()</code> is violated versus if a <code>noexcept</code> is violated. </p>\n<p>The text in 15.4/14 above the example is normative, and it says:</p>\n<blockquote>\n<p id=\"so_13041715_13041715_0\">An implicitly declared special member function (Clause 12) \n  shall have an exception-specification. If f is an implicitly declared\n  default constructor, copy constructor, move constructor, destructor,\n  copy assignment operator, or move assignment operator, its implicit\n  exception-specification specifies the type-id T if and only if T is\n  allowed by the exception-specification of a function directly invoked\n  by f\u2019s implicit definition; f shall allow all exceptions if any\n  function it directly invokes allows all exceptions, and f shall allow\n  no exceptions if every function it directly invokes allows no\n  exceptions.</p>\n</blockquote>\n<p>Given that only dynamic exception specifications are referred to here, I fear that implicitly-generated special member functions are never declared <code>noexcept</code>.  Is that really the case?</p>\n", "Title": "Are special member functions noexcept or throw()?", "CreationDate": "2012-10-24T01:21:28.467", "LastActivityDate": "2012-10-24T06:38:54.817", "CommentCount": "8", "PostTypeId": "1", "Id": "13041715", "Score": "4", "OwnerUserId": "1426649", "Tags": "<c++><c++11>", "AnswerCount": "1"}});