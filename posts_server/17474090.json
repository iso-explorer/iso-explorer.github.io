post_cb({"17474118": {"ParentId": "17474090", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-07-04T15:41:46.930", "Score": "3", "LastEditorUserId": "46642", "LastEditDate": "2013-07-04T21:45:46.213", "Id": "17474118", "OwnerUserId": "46642", "Body": "<p>It's quite simple actually: <code>u\"\\U00010000\"</code>. As stated in the text, a single <em>c-char</em> (in this case <code>\\U00010000</code>) can produce more than one <code>char16_t</code>. A quick test will reveal that the type of <code>u\"\\U00010000\"</code> is <code>char16_t const[3]</code> (2 for the surrogate pair + 1 for the null terminator).</p>\n<p>Alternatively, you can simply put the character directly in the string, as <code>u\"\"</code>, assuming the source file is saved with an encoding your compiler expects. This will be exactly the same thing, because one of the first steps performed on a source file is to replace any character outside the basic character set with its <em>universal-character-name</em> (i.e. <code>\\U00010000</code>).</p>\n<p>A <em>c-char</em> is \"any member of the source character set except the single-quote <code>'</code>, backslash <code>\\</code>, or new-line character\", or an <em>escape-sequence</em> (like <code>\\n</code>, or <code>\\123</code>, or <code>\\x41</code>), or an <em>universal-character-name</em> (like <code>\\u1234</code> or <code>\\U12345678</code>).</p>\n<p>The standard document has an index of grammar productions near the end that you can use to look up these things.</p>\n", "LastActivityDate": "2013-07-04T21:45:46.213"}, "17474090": {"CommentCount": "1", "ViewCount": "275", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2013-07-04T15:39:40.530", "LastActivityDate": "2013-07-04T21:45:46.213", "Title": "How do I codify the unicode point U+10000 in a char16_t string literal?", "AcceptedAnswerId": "17474118", "LastEditDate": "2013-07-04T15:42:03.367", "Id": "17474090", "Score": "1", "Body": "<p>Paragraph 2.14.5p9 in the C++11 Standard says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17474090_17474090_0\">A string literal that begins with u, such as u\"asdf\", is a char16_t\n  string literal. A char16_t string literal has type \u201carray of n const\n  char16_t\u201d, where n is the size of the string as defined below; it has\n  static storage duration and is initialized with the given characters.\n  <strong>A single c-char may produce more than one char16_t character in the\n  form of surrogate pairs</strong>.</p>\n</blockquote>\n<p>How do I codify the unicode point U+10000, which is made up of the surrogate pairs D800 (high surrogate) and DC00 (low surrogate) in a char16_t string literal ?</p>\n<p>What is meant by the <code>c-char</code> mentioned above in the quoted text?</p>\n", "Tags": "<c++><unicode><c++11>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17474090_17474090_0": {"section_id": 5358, "quality": 1.0, "length": 38}}, "n3337": {"so_17474090_17474090_0": {"section_id": 5154, "quality": 1.0, "length": 38}}, "n4659": {"so_17474090_17474090_0": {"section_id": 6783, "quality": 0.868421052631579, "length": 33}}}});