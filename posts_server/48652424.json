post_cb({"bq_ids": {"n4140": {"so_48652424_48652524_0": {"length": 32, "quality": 0.7441860465116279, "section_id": 7041}}, "n3337": {"so_48652424_48652524_0": {"length": 32, "quality": 0.7441860465116279, "section_id": 6786}}, "n4659": {"so_48652424_48652524_0": {"length": 39, "quality": 0.9069767441860465, "section_id": 8538}}}, "48652524": {"Id": "48652524", "PostTypeId": "2", "Body": "<p>It is an ODR violation. But according to <a href=\"http://eel.is/c++draft/basic.def.odr#10\" rel=\"nofollow noreferrer\">[basic.def.odr]/10</a>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_48652424_48652524_0\">Every program shall contain exactly one definition of every non-inline\n  function or variable that is odr-used in that program outside of a\n  discarded statement; <strong>no diagnostic required</strong>. The definition can\n  appear explicitly in the program, it can be found in the standard or a\n  user-defined library, or (when appropriate) it is implicitly defined\n  (see [class.ctor], [class.dtor] and [class.copy]). An inline function\n  or variable shall be defined in every translation unit in which it is\n  odr-used outside of a discarded statement.</p>\n</blockquote>\n<p>And we must recall that compilers are free to assume you don't write code that exhibits undefined behavior or is otherwise ill-formed in ways they don't need to diagnose. Because each function must have an address that isn't null, the <code>bool</code> overload can just be called with <code>true</code>, since that's what the conversion must yield in a <em>valid program</em>.</p>\n<p>We can see <a href=\"https://godbolt.org/g/5qDT5x\" rel=\"nofollow noreferrer\">GCC 7.3</a> doing just that. It passes 1 for what is meant to be the result of the conversion, even at <code>-O0</code>.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2018-02-06T21:55:06.000", "Score": "7", "CreationDate": "2018-02-06T21:48:00.640", "ParentId": "48652424", "CommentCount": "1", "OwnerUserId": "817643", "LastEditDate": "2018-02-06T21:55:06.000"}, "48652424": {"ViewCount": "108", "Body": "<p>Consider the following MCVE:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() \n{\n    void foo(int);\n    std::cout &lt;&lt; foo &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>Here I intentionally try to print a pointer to a function in a wrong way so that the <a href=\"http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt\" rel=\"noreferrer\">operator&lt;&lt; overload</a> which accepts <code>bool</code> is chosen.</p>\n<pre><code> basic_ostream&amp; operator&lt;&lt;( bool value );\n</code></pre>\n<p>The thing that puzzles me is that both <a href=\"https://wandbox.org/permlink/yIMnYX1RMOpWcc9T\" rel=\"noreferrer\">gcc 7.2</a> and <a href=\"https://wandbox.org/permlink/x2J4mTt9g5MoKpWv\" rel=\"noreferrer\">clang 5.0</a> produce a warning, but compile and <em>link</em> the program.</p>\n<p>In the same time, <em>Visual Studio 15.5.6</em> doesn't link this example.</p>\n<p>Personally, I expected, that this code won't link at all despite the compiler used as <code>foo</code> seems to be <em>ODR-used</em>.</p>\n<p>Could anybody explain why <em>gcc</em> and <em>clang</em> are able to link the program?</p>\n", "AcceptedAnswerId": "48652524", "Title": "Printing the address of function... declaration?", "CreationDate": "2018-02-06T21:40:50.500", "Id": "48652424", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2018-02-06T21:55:06.000", "Score": "5", "OwnerUserId": "5507349", "Tags": "<c++>", "AnswerCount": "1"}});