post_cb({"32072151": {"Id": "32072151", "PostTypeId": "2", "Body": "<p>The address of the uninitialized pointer is undefined until you set it. When you call <code>new Node&lt;T&gt;</code> you are invoking <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow\">default-initialization</a></p>\n<blockquote>\n<p id=\"so_32072029_32072151_0\">Default initialization is performed in three situations:  </p>\n<ol>\n<li>when a variable with automatic, static, or thread-local storage duration is declared with no initializer.  </li>\n<li><strong>when an object with dynamic storage duration is created by a new-expression with no initializer</strong> or when an object is created by a new-expression with the initializer consisting of an empty pair of parentheses <em>(until C++03)</em> </li>\n<li>when a base class or a non-static data member is not mentioned in a constructor initializer list and that constructor is called.</li>\n</ol>\n<p id=\"so_32072029_32072151_1\">The effects of default initialization are:  </p>\n<ul>\n<li>If T is a non-POD (until C++11) class type, the constructors are considered and subjected to overload resolution against the empty argument list. The constructor selected (which is one of the default constructors) is called to provide the initial value for the new object.  </li>\n<li>If T is an array type, every element of the array is default-initialized.  </li>\n<li><strong>Otherwise, nothing is done: the objects with automatic storage duration (and their subobjects) are initialized to indeterminate values.</strong></li>\n</ul>\n</blockquote>\n<p>To have the <code>struct</code> <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-initialized</a> you would need to call it as</p>\n<pre><code>first = new Node&lt;T&gt;();\n</code></pre>\n<p>Note that the latter part of comment 2 (the non-bold part) is no longer true as of C++11 and later, now the following is true:</p>\n<p><strong>\u00a78.5 Initializers</strong> </p>\n<blockquote>\n<p id=\"so_32072029_32072151_2\">An object whose initializer is an empty set of parentheses, i.e., <code>()</code> shall be value-initialized.</p>\n</blockquote>\n", "LastEditorUserId": "2296458", "LastActivityDate": "2015-08-18T12:39:10.197", "Score": "7", "CreationDate": "2015-08-18T12:14:59.047", "ParentId": "32072029", "CommentCount": "1", "OwnerUserId": "2296458", "LastEditDate": "2015-08-18T12:39:10.197"}, "32072097": {"Id": "32072097", "PostTypeId": "2", "Body": "<p>It has some garbage value. You should initialize it in constructor.</p>\n<pre><code>Node() : next(0), value(T()) {}\n</code></pre>\n<p>or you can just use</p>\n<pre><code>first = new Node&lt;T&gt;();\n</code></pre>\n<p>for <code>value-initialization</code>.</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-08-18T12:17:59.167", "Score": "4", "CreationDate": "2015-08-18T12:12:02.313", "ParentId": "32072029", "CommentCount": "0", "OwnerUserId": "1498580", "LastEditDate": "2015-08-18T12:17:59.167"}, "32072029": {"ViewCount": "65", "Body": "<p>I'm trying to implement a linked list but when I allocate memory for one note, the pointer inside it is not NULL.</p>\n<p>Here is my struct</p>\n<pre><code>template &lt;typename T&gt;\nstruct Node {\n  T value;\n  Node* next;\n};\n</code></pre>\n<p>and I allocate memory for a note</p>\n<pre><code>first = new Node&lt;T&gt;;\n</code></pre>\n<p>the first-&gt;next is not NULL. This forces me to explicitly assign that note to NULL. It really confused me. But why did this happened ?</p>\n", "AcceptedAnswerId": "32072151", "Title": "allocate memory for node in linked list but unexpectedly, the next node inside it is also allocated", "CreationDate": "2015-08-18T12:09:05.690", "Id": "32072029", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-08-18T12:39:10.197", "Score": "1", "OwnerUserId": "4859535", "Tags": "<c++><pointers><linked-list><dynamic-allocation>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32072029_32072151_2": {"length": 7, "quality": 1.0, "section_id": 3290}}, "n3337": {"so_32072029_32072151_2": {"length": 7, "quality": 1.0, "section_id": 3160}}, "n4659": {"so_32072029_32072151_2": {"length": 7, "quality": 1.0, "section_id": 4052}}}});