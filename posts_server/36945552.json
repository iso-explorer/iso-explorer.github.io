post_cb({"36947939": {"ParentId": "36945552", "CommentCount": "3", "Body": "<p>Yes, it is safe to use different names.</p>\n<p>Personally, I wouldn't recommend it, though, as the traditional <code>argc</code> and <code>argv</code> are so widely known and familiar to every other C programmer who might ever work with your code.  In the long run, using your own, special, different names will cause far more confusion and/or frustration among your readers than it will ever save you because you like your names better.</p>\n<p>\"When in Rome, do as the Romans do.\"</p>\n", "OwnerUserId": "3923896", "PostTypeId": "2", "Id": "36947939", "Score": "5", "CreationDate": "2016-04-29T21:47:45.607", "LastActivityDate": "2016-04-29T21:47:45.607"}, "36945570": {"ParentId": "36945552", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes. It is safe, it looks weird, but it won't break anything. </p>\n", "OwnerUserId": "2819650", "LastEditorUserId": "3049655", "LastEditDate": "2016-04-30T10:07:19.853", "Id": "36945570", "Score": "13", "CreationDate": "2016-04-29T18:53:17.820", "LastActivityDate": "2016-04-30T10:07:19.853"}, "36945552": {"CommentCount": "9", "AcceptedAnswerId": "36945664", "PostTypeId": "1", "LastEditorUserId": "22489", "CreationDate": "2016-04-29T18:51:14.277", "LastActivityDate": "2016-07-16T17:43:02.413", "LastEditDate": "2016-04-29T21:42:53.980", "ViewCount": "2953", "FavoriteCount": "1", "Title": "Is it safe to rename argc and argv in main function?", "Id": "36945552", "Score": "57", "Body": "<p>A lot of programs use standard names for a number of arguments and arrays of strings. The prototype of main function looks like: <code>int main(int argc, char *argv[]);</code>. But would I break something if I choose custom names for these variables? </p>\n<p>E.g. <code>int main(int n_of_args, char *args[]);</code></p>\n<p>In the context of the compiler, everything is fine. These variables are local for main function, so they may have any names. And the simple code builds and runs perfectly. But these names may be used by preprocessor. So is it safe to rename these arguments?</p>\n<p><strong>PS</strong> Personally I find these names bad, because they look very similar and differ in only one letter. But EVERYONE uses them for some kind of reason.</p>\n", "Tags": "<c++><c><main>", "OwnerUserId": "4355809", "AnswerCount": "6"}, "36945664": {"ParentId": "36945552", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, it is safe, so long as you use valid variable names.  They're local variables, so their scope doesn't go beyond the <code>main</code> function.</p>\n<p>From section 5.1.2.2.1 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\">C standard</a>:</p>\n<blockquote>\n<p id=\"so_36945552_36945664_0\">The function called at program startup is named <code>main</code>. The\n  implementation declares no prototype  for  this  function.  It  shall \n  be  defined  with  a  return  type  of <code>int</code> and  with  no parameters:</p>\n<pre><code>int main(void) { /*  ... */ }\n</code></pre>\n<p id=\"so_36945552_36945664_1\">or with two parameters (referred to here as <code>argc</code> and <code>argv</code>, <strong>though any\n  names may be used, as they are local to the function in which they are\n  declared</strong>):</p>\n<pre><code>int main(int argc, char *argv[]) { /* ...   */ }\n</code></pre>\n<p id=\"so_36945552_36945664_2\">or equivalent; or in some other implementation-defined manner</p>\n</blockquote>\n<p>That being said, using anything other than <code>argc</code> and <code>argv</code> might confuse others reading your code who are used to the conventional names for these parameters.   So better to err on the side of clairity.</p>\n", "OwnerUserId": "1687119", "LastEditorUserId": "1687119", "LastEditDate": "2016-04-30T17:47:43.443", "Id": "36945664", "Score": "78", "CreationDate": "2016-04-29T18:59:37.523", "LastActivityDate": "2016-04-30T17:47:43.443"}, "36945576": {"ParentId": "36945552", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Sure you can rename these parameters <em>safely</em> as you like </p>\n<pre><code> int main(int wrzlbrnft, char* _42[]) {\n }\n</code></pre>\n<p>Names are written in sand. They don't have any influence on the finally compiled code.</p>\n<hr>\n<p>The only thing that matters is, that parameter types of declaration and definition actually match.</p>\n<p>The signature of the <code>main()</code> function is intrinsically declared as</p>\n<pre><code> int main(int, char*[]);\n</code></pre>\n<p>if you need to use them in an implementation actually you'll need to name them. Which names are used is actually irrelevant as mentioned before.</p>\n</hr>", "OwnerUserId": "1413395", "LastEditorUserId": "1413395", "LastEditDate": "2016-07-16T17:43:02.413", "Id": "36945576", "Score": "24", "CreationDate": "2016-04-29T18:53:33.393", "LastActivityDate": "2016-07-16T17:43:02.413"}, "36945639": {"ParentId": "36945552", "CommentCount": "0", "Body": "<p>Yes you can rename them as you want. They are simply function parameter names, nothing more.</p>\n", "OwnerUserId": "4070000", "PostTypeId": "2", "Id": "36945639", "Score": "4", "CreationDate": "2016-04-29T18:58:00.230", "LastActivityDate": "2016-04-29T18:58:00.230"}, "bq_ids": {"n4140": {"so_36945552_36959404_3": {"section_id": 7146, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_36945552_36959404_2": {"section_id": 6890, "quality": 1.0, "length": 4}, "so_36945552_36959404_0": {"section_id": 6890, "quality": 1.0, "length": 7}}, "n4659": {"so_36945552_36959404_3": {"section_id": 8647, "quality": 0.9411764705882353, "length": 16}}}, "36959404": {"ParentId": "36945552", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The names <code>argc</code> and <code>argv</code> were actually mandated by the C++ standard prior to C++11. It stated:</p>\n<blockquote>\n<p id=\"so_36945552_36959404_0\">All implementations shall allow both of the following definitions of main:</p>\n<pre><code>int main ()\n</code></pre>\n<p id=\"so_36945552_36959404_1\">and</p>\n<pre><code>int main ( int argc , char * argv [])\n</code></pre>\n</blockquote>\n<p>and went on to discuss the requirements on <code>argc</code> and <code>argv</code>.</p>\n<p>So technically, any program using different names was not standard-conforming, and the compiler was allowed to reject it. No compiler actually did so, of course. See <a href=\"https://groups.google.com/d/msg/comp.std.c++/oeVQS0mbxY8/uZh5iAHfPZIJ\">this thread on comp.std.c++</a>, or section 3.6.1 of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf#page=65\">this C++03 draft standard</a>.</p>\n<p>This was almost certainly a mere oversight, and was changed in C++11, which instead says</p>\n<blockquote>\n<p id=\"so_36945552_36959404_2\">All implementations shall allow both</p>\n<ul>\n<li>a function of () returning <code>int</code> and</li>\n<li>a function of (<code>int</code>, pointer to pointer to <code>char</code>) returning <code>int</code></li>\n</ul>\n<p id=\"so_36945552_36959404_3\">as the type of <code>main</code> (8.3.5). In the latter form, for purposes of\n  exposition, the first function parameter is called <code>argc</code> and the second\n  function parameter is called <code>argv</code>,\u2026</p>\n</blockquote>\n", "OwnerUserId": "2132213", "LastEditorUserId": "2132213", "LastEditDate": "2016-05-04T14:52:55.643", "Id": "36959404", "Score": "13", "CreationDate": "2016-04-30T19:41:14.650", "LastActivityDate": "2016-05-04T14:52:55.643"}});