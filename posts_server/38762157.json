post_cb({"38762157": {"CommentCount": "3", "AcceptedAnswerId": "38764809", "PostTypeId": "1", "LastEditorUserId": "898348", "CreationDate": "2016-08-04T08:25:28.807", "LastActivityDate": "2016-08-04T10:26:45.073", "LastEditDate": "2016-08-04T08:47:37.807", "ViewCount": "93", "FavoriteCount": "1", "Title": "Visual C++ initialization inconsistence with gcc and clang", "Id": "38762157", "Score": "3", "Body": "<p>The following piece of code <a href=\"http://rextester.com/OIG44494\" rel=\"nofollow\">prints <code>0</code> compiled with <em>vc++</em></a> and <a href=\"http://coliru.stacked-crooked.com/a/8d6828d3df14ab90\" rel=\"nofollow\">prints <code>1</code> compiled with <em>g++</em> or <em>clang++</em></a>:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstruct S\n{\n    S() = default;\n\n    std::vector&lt;int&gt; v{0};        \n};\n\nint main()\n{\n    std::vector&lt;S&gt; s{{}};\n\n    std::cout &lt;&lt; s.front().v.size() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Is it a bug in <em>vc++</em>?</p>\n<p>If a user-defined constructor is provided (<code>S() {};</code> instead of <code>S() = default;</code>) <a href=\"http://rextester.com/ADRHQ41270\" rel=\"nofollow\"><em>vc++</em> starts to print <code>1</code>, too</a>.</p>\n", "Tags": "<c++><visual-c++><initialization><c++14><brace-initialization>", "OwnerUserId": "3043539", "AnswerCount": "2"}, "38764241": {"ParentId": "38762157", "CommentCount": "0", "Body": "<p>This is not an answer but a comment requiring code.</p>\n<p>The following illustrates the compiler differences more clearly, I think:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstruct S\n{\n    S() = default;\n\n    std::vector&lt;int&gt; v = std::vector&lt;int&gt;(13);\n};\n\nint main()\n{\n    std::vector&lt;S&gt; s{{}};\n    std::cout &lt;&lt; s.front().v.size() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Here g++ MinGW 5.1.0 reports 13 items, while MSVC 2015 update 2 reports 0 items.</p>\n<p>I.e. g++ uses the initializer specified in the class, while MSVC uses the one specified in the declaration of <code>s</code>. To me that looks like a problem with g++. But I'm not sure: the only sure thing is that both can't be right.</p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "38764241", "Score": "1", "CreationDate": "2016-08-04T10:01:24.237", "LastActivityDate": "2016-08-04T10:01:24.237"}, "bq_ids": {"n4140": {"so_38762157_38764809_0": {"section_id": 436, "quality": 1.0, "length": 16}, "so_38762157_38764809_1": {"section_id": 370, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_38762157_38764809_0": {"section_id": 428, "quality": 1.0, "length": 16}, "so_38762157_38764809_1": {"section_id": 360, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_38762157_38764809_0": {"section_id": 455, "quality": 0.875, "length": 14}, "so_38762157_38764809_1": {"section_id": 384, "quality": 0.8888888888888888, "length": 16}}}, "38764809": {"ParentId": "38762157", "CommentCount": "0", "Body": "<p>In reading the Standard (C++11 n3485), <code>12.6.2/9</code> states that:</p>\n<blockquote>\n<p id=\"so_38762157_38764809_0\">If a given non-static data member has both a <code>brace-or-equal-initializer</code> and a <code>mem-initializer</code>, the initialization specified by the <code>mem-initializer</code> is performed, and the non-static data member\u2019s <code>brace-or-equal-initializer</code> is ignored.</p>\n</blockquote>\n<p>So the question becomes if the <code>default</code>, i.e. the implicitly defined constructor contains a <code>mem-initializer</code> or not. </p>\n<p>Section <code>12.1/6</code> states:</p>\n<blockquote>\n<p id=\"so_38762157_38764809_1\">The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no <code>ctor-initializer</code> (12.6.2) and an empty <code>compound-statement</code>.</p>\n</blockquote>\n<p>This would mean the implicitly generated (default) constructor has no <code>mem-initializer</code>s and should indeed use the in-class initializer (the <code>brace-or-equal-initializer</code> in the above quote).</p>\n<p>MSVC is wrong here (no surprise there, really).</p>\n", "OwnerUserId": "256138", "PostTypeId": "2", "Id": "38764809", "Score": "3", "CreationDate": "2016-08-04T10:26:45.073", "LastActivityDate": "2016-08-04T10:26:45.073"}});