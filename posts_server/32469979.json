post_cb({"32475135": {"ParentId": "32469979", "CommentCount": "0", "CreationDate": "2015-09-09T08:54:35.107", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "32475135", "Score": "7", "Body": "<p>As of the latest official standard, C++14, your first initialization is not ambiguous. [over.match.list]:</p>\n<p><a href=\"https://i.stack.imgur.com/tucov.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/tucov.png\"/></a></p>\n<p>As no initializer-list constructors exist, we enter the \"second phase\". And now consider [over.best.ics]/4:</p>\n<p><a href=\"https://i.stack.imgur.com/g6NEE.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/g6NEE.png\"/></a></p>\n<p>Our element is <code>{0}</code>. Hence <strong>this disallows the (user-defined) conversion <code>{0}</code> -&gt; <code>A</code> for the copy constructor</strong>. Clearly, this doesn't apply if we aren't in the second phase of [over.match.list], so for your example with <code>B c({0})</code>, no list-initialization occurs for <code>c</code> and both constructors are considered.</p>\n<hr>\n<h2>CWG issue 1467</h2>\n<p>The first initialization is currently just as ambiguous as the second one. Compilers simply haven't implemented CWG <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1467\" rel=\"nofollow noreferrer\"><strong>#1467</strong></a> yet - its resolution removed bullet point (4.5), quoted above.<br>\nSee <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2076\" rel=\"nofollow noreferrer\"><strong>#2076</strong></a>, which opts to revert the change:</br></p>\n<blockquote>\n<p id=\"so_32469979_32475135_0\">The resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1467\" rel=\"nofollow noreferrer\">issue 1467</a> made some plausible constructs\n  ill-formed. For example,</p>\n<pre><code>struct A { A(int); };\nstruct B { B(A); };\nB b{{0}};\n</code></pre>\n<p id=\"so_32469979_32475135_1\">This is now ambiguous, because the text disallowing user-defined\n  conversions for <code>B</code>'s copy and move constructors was removed from\n  13.3.3.1 [over.best.ics] paragraph 4.</p>\n</blockquote>\n<p>\"The text\" is the aforementioned bullet point. Richard Smith proposes the following wording:</p>\n<blockquote>\n<p id=\"so_32469979_32475135_2\">For non-class types, we allow initialization from a single-item list\n  to perform a copy only if the element within the list is not itself a\n  list (13.3.3.1.5 [over.ics.list] bullet 9.1). <strong>The analogous rule for\n  this case would be to add back the bullet in 13.3.3.1 [over.best.ics]\n  paragraph 4, but only in the case where the initializer is itself an\n  initializer list</strong>:</p>\n<p id=\"so_32469979_32475135_3\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the second phase of\n  13.3.1.7 [over.match.list] when the initializer list has exactly one    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0element that is\n  itself an initializer list, where the target is the first parameter of\n  a constructor<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of class <code>X</code>, and the conversion is\n  to <code>X</code> or reference to (possibly cv-qualified) <code>X</code>,</br></p>\n</blockquote>\n<p>As the initializer <code>{0}</code> is itself an initializer list, that bullet point would make your first initialization well-formed again.</p>\n</hr>", "LastActivityDate": "2015-09-09T08:54:35.107"}, "32469979": {"CommentCount": "5", "ViewCount": "159", "PostTypeId": "1", "LastEditorUserId": "1505939", "CreationDate": "2015-09-09T02:22:00.273", "LastActivityDate": "2015-09-09T08:54:35.107", "LastEditDate": "2015-09-09T02:37:11.457", "AcceptedAnswerId": "32475135", "FavoriteCount": "5", "Title": "Direct list initialization compiles successfully, but normal direct initialization fails, why?", "Id": "32469979", "Score": "5", "Body": "<p>For example, code like this:</p>\n<pre><code>struct A { A(int); };\nstruct B { B(A);   };\n\nint main()\n{\n    B b{{0}}; // OK\n    B c({0}); // error\n}\n</code></pre>\n<p>The error messages are:</p>\n<pre><code>f.cc: In function 'int main()':\nf.cc:7:9: error: call of overloaded 'B(&lt;brace-enclosed initializer list&gt;)' is ambiguous\n  B c({0}); // error\n\n         ^\nf.cc:7:9: note: candidates are:\nf.cc:2:12: note: B::B(A)\n struct B { B(A);   };\n        ^\nf.cc:2:8: note: constexpr B::B(const B&amp;)\n struct B { B(A);   };\n        ^\nf.cc:2:8: note: constexpr B::B(B&amp;&amp;)\n</code></pre>\n", "Tags": "<c++><initialization><overload-resolution>", "OwnerUserId": "1986903", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32469979_32475135_3": {"section_id": 609, "quality": 0.7391304347826086, "length": 17}}, "n4659": {"so_32469979_32475135_3": {"section_id": 635, "quality": 0.782608695652174, "length": 18}}}});