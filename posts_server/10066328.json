post_cb({"10066372": {"ParentId": "10066328", "CommentCount": "0", "CreationDate": "2012-04-08T20:47:27.143", "OwnerUserId": "51831", "PostTypeId": "2", "Id": "10066372", "Score": "6", "Body": "<p>Yes.</p>\n<p>String's comparison operators are defined in terms of its <code>traits::compare</code> (that is <code>char_traits&lt;char&gt;::compare</code>) (C++03 21.3.6.8) which is specified to return a value based on the lexicographical ordering of its arguments (21.1.1).</p>\n<blockquote>\n<p id=\"so_10066328_10066372_0\">X::compare(p,q,n) ...  yields: 0 if for each i in [0,n),\n    X::eq(p[i],q[i]) is true; else, a negative\n    value if, for some j in [0,n),\n    X::lt(p[j],q[j]) is true and for each i in\n    [0,j) X::eq(p[i],q[i]) is true; else a positive value.</p>\n</blockquote>\n<p>In effect, it means comparing string must not be locale sensitive (which could be non-lexicographical in some locales, such as mine).</p>\n", "LastActivityDate": "2012-04-08T20:47:27.143"}, "10066328": {"CommentCount": "3", "ViewCount": "4090", "CreationDate": "2012-04-08T20:40:50.793", "LastActivityDate": "2012-04-08T20:47:27.143", "Title": "C++: Comparing strings lexicographical", "AcceptedAnswerId": "10066372", "PostTypeId": "1", "Id": "10066328", "Score": "2", "Body": "<p>Are strings compared lexicographical when using the overriden <code>bool operator&lt;(const std::string &amp; rhs)</code> operator? In example:</p>\n<pre><code>std::string str1 = \"aabbcc\"\nstd::string str2 = \"bbaacc\"\n\n(str1 &lt; str2) == std::lexicographical_compare(str1.begin(),str1.end(),str2.begin(),str2.end()) // is this statement true?\n</code></pre>\n", "Tags": "<c++><string><comparison><lexicographic>", "OwnerUserId": "878307", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_10066328_10066372_0": {"section_id": 1532, "quality": 1.0, "length": 17}}, "n3337": {"so_10066328_10066372_0": {"section_id": 1526, "quality": 1.0, "length": 17}}, "n4659": {"so_10066328_10066372_0": {"section_id": 1682, "quality": 0.9411764705882353, "length": 16}}}});