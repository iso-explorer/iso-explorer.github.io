post_cb({"bq_ids": {"n4140": {"so_25375274_25376396_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5343}}, "n3337": {"so_25375274_25376396_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 5140}}, "n4659": {"so_25375274_25376396_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6765}}}, "25376396": {"Id": "25376396", "PostTypeId": "2", "Body": "<p>This appears to be a known MSVC compiler 'peculiarity'. </p>\n<p>The C++ standard n3797 S2.14.3/1 says:</p>\n<blockquote>\n<p id=\"so_25375274_25376396_0\">A multicharacter literal, or an ordinary character literal containing a single c-char not representable in the execution character set, is conditionally-supported, has type int, and has an implementation-de\ufb01ned value.</p>\n</blockquote>\n<p>So MSVC can certainly do this and claim it is 'implementation-defined' and not a bug. </p>\n<p>If this was my call, I would probably say 'do not fix'. The risk of breaking existing code is far higher than the benefit of doing anything useful, and is easily dealt with by interesting question and answer on Stack Overflow.</p>\n<p>Ref: see <a href=\"http://www.tech-archive.net/Archive/VC/microsoft.public.vc.language/2004-09/0079.html\" rel=\"nofollow noreferrer\">http://www.tech-archive.net/Archive/VC/microsoft.public.vc.language/2004-09/0079.html</a>.</p>\n<hr>\n<p>If you wish to reliably assemble equivalent values you have two choices, which produce opposite results depending on endianism.</p>\n<p>You can use arithmetic operations (shift and mask) to produce an integer value:</p>\n<pre><code> '\\'' | ('/' &lt;&lt; 8) | ('&gt;' &lt;&lt; 16) | ('\\x20' &lt;&lt; 24)\n</code></pre>\n<p>Or you can use string and cast operations to produce a string-like integer value:</p>\n<pre><code>*(int*)\"\\\"/&gt;\\x20\"\n</code></pre>\n<hr>\n<p>As per a comment, depending on how it is written this last technique can lead to generation of bad code. The string has to go somewhere (at run-time) and it will be null-terminated. The main justification is that it can avoid the need for endian-sensitive #defines and pre-processing.</p>\n<p>See also this question: <a href=\"https://stackoverflow.com/questions/22239629/how-to-write-a-compile-time-initialisation-of-a-4-byte-character-constant-that-i\">How to write a compile-time initialisation of a 4 byte character constant that is fully portable</a></p>\n</hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-08-22T00:16:43.613", "Score": "1", "CreationDate": "2014-08-19T05:44:18.040", "ParentId": "25375274", "CommentCount": "5", "LastEditDate": "2017-05-23T12:23:20.737", "OwnerUserId": "1105562"}, "25375274": {"ViewCount": "343", "Body": "<p>I thought I knew how MSVC 2010 treated multicharacter literals, until this:</p>\n<pre><code>int main(int argc, char* argv[]) \n{\n    int a = '\\'   ';\n    int b = '\\'/  ';\n    int c = '\\'/&gt; ';\n    int d = '\\'/&gt;\\x20';  // same as c supposedly\n    int e = 'ABC\\x20';\n    printf(\"%X\\n%X\\n%X\\n%X  &lt;-- what?\\n%X\\n\", a,b,c,d,e);\n    return 0;\n}\n\n27202020\n272F2020\n272F3E20\n20272F3E  &lt;-- what?\n41424320\n</code></pre>\n<p>In the IDE's watch window if you type:</p>\n<pre><code>'\\'/&gt;\\x20'\n</code></pre>\n<p>It prints out:</p>\n<pre><code>272F3E20\n</code></pre>\n<p>Which is what I would expect.  So... what's going on here!?</p>\n<p>I found <a href=\"http://www.tech-archive.net/Archive/VC/microsoft.public.vc.language/2004-09/0079.html\" rel=\"nofollow\">this</a> on the net, so I'm thinking it's a compiler bug.  I guess it might not get fixed because it could break older code?  </p>\n<p><strong>EDIT:</strong>\nI'm pretty satisfied that this is a quirk or a bug that isn't going to change.  It only seems to occur when there is more than 1 escape sequence being used in the multicharacter literal. </p>\n<p>Here is a workaround:</p>\n<pre><code>('\\'/&gt;' &lt;&lt; 8) | '\\n'\n</code></pre>\n", "AcceptedAnswerId": "25376396", "Title": "multicharacter literal misunderstanding", "CreationDate": "2014-08-19T03:29:12.313", "Id": "25375274", "CommentCount": "17", "LastEditDate": "2014-08-19T17:06:31.327", "PostTypeId": "1", "LastEditorUserId": "121540", "LastActivityDate": "2014-08-22T00:16:43.613", "Score": "1", "OwnerUserId": "121540", "Tags": "<c++><visual-c++>", "AnswerCount": "1"}});