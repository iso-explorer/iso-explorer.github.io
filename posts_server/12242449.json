post_cb({"12242489": {"ParentId": "12242449", "LastEditDate": "2012-09-03T12:02:09.740", "CommentCount": "5", "CreationDate": "2012-09-03T05:36:54.370", "OwnerUserId": "661519", "LastEditorUserId": "661519", "PostTypeId": "2", "Id": "12242489", "Score": "5", "Body": "<p>It is in \u00a77.1.6.4 <strong>auto specifier</strong>. In your examples of function return types, the rules of template argument deduction apply.</p>\n<p>Paraquoting the relevant example from the standard:</p>\n<blockquote>\n<p id=\"so_12242449_12242489_0\"><code>const auto &amp;i = expr;</code></p>\n<p id=\"so_12242449_12242489_1\">The type of <code>i</code> is the deduced type of the parameter X in the call <code>f(expr)</code> of the following invented function template:</p>\n<p id=\"so_12242449_12242489_2\"><code>template &lt;class AUTO&gt; void f(const AUTO&amp; X);</code></p>\n</blockquote>\n<p>So in your examples, the types of all your variables <code>x11</code> to <code>x23</code> are deduced as <code>T</code>.</p>\n", "LastActivityDate": "2012-09-03T12:02:09.740"}, "12242449": {"CommentCount": "3", "CreationDate": "2012-09-03T05:31:43.357", "PostTypeId": "1", "AcceptedAnswerId": "12242489", "LastEditorUserId": "1131467", "LastActivityDate": "2012-09-03T13:55:03.273", "LastEditDate": "2012-09-03T13:55:03.273", "ViewCount": "297", "FavoriteCount": "1", "Title": "C++11: Standard ref for action of `auto` on const and reference types", "Id": "12242449", "Score": "5", "Body": "<p>Suppose I have a type T:</p>\n<pre><code>typedef ... T;\n</code></pre>\n<p>and then I have these functions:</p>\n<pre><code>T f11();\nT&amp; f12();\nT&amp;&amp; f13();\nconst T f21();\nconst T&amp; f22();\nconst T&amp;&amp; f23();\n</code></pre>\n<p>and then call them like this:</p>\n<pre><code>auto x11 = f11();\nauto x12 = f12();\nauto x13 = f13();\nauto x21 = f21();\nauto x22 = f22();\nauto x23 = f23();\n</code></pre>\n<p>From which sections/clauses of the C++11 standard can it be deduced the equivalent non-auto declarations of x11..x23?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1131467", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12242449_12242489_1": {"section_id": 5451, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_12242449_12242489_1": {"section_id": 5246, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_12242449_12242489_1": {"section_id": 6889, "quality": 0.9090909090909091, "length": 10}}}});