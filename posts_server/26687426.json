post_cb({"26687426": {"CommentCount": "3", "ViewCount": "727", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-01T08:23:02.833", "LastActivityDate": "2016-03-18T10:11:23.740", "LastEditDate": "2016-03-18T10:11:23.740", "AcceptedAnswerId": "26687534", "OwnerDisplayName": "user2953119", "Title": "What's with the copy-constructor if the class contains a user-declared destructor?", "Id": "26687426", "Score": "5", "Body": "<p>The Standard in section 12.8/7 says:</p>\n<blockquote>\n<p id=\"so_26687426_26687426_0\">If the class definition does not explicitly declare a copy\n  constructor, one is declared implicitly. If the class definition\n  declares a move constructor or move assignment operator, the\n  implicitly declared copy constructor is defined as deleted; otherwise,\n  it is defined as defaulted (8.4). <em>The latter case is deprecated if the</em>\n<em>class has a user-declared copy assignment operator or a user-declared</em>\n<em>destructor</em>. Thus, for the class definition </p>\n<pre><code>struct X {\n    X(const X&amp;, int);\n};\n</code></pre>\n<p id=\"so_26687426_26687426_1\">a copy constructor is implicitly-declared. If the user-declared\n  constructor is later defined as </p>\n<pre><code>X::X(const X&amp; x, int i =0) { /\u2217 ... \u2217/ }\n</code></pre>\n</blockquote>\n<p>I can't get the point of that <em>The latter case is deprecated if the class has a user-declared copy assignment operator or a user-declared destructor.</em> In the example the Standard neither provides a user-declared copy assignment operator nor a destructor. What will happen if we declare a destructor or a copy assignment operator? I've tried to do that as follows:</p>\n<pre><code>struct A\n{\n    ~A(){ };\n};\n\nA::A(const A&amp;){ }; //error\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/3f5045adf6c5eb84\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>but in the example we still have the implicitly-declared copy constructor. What does that rule actual mean?</p>\n<p>I thought that if we write the following:</p>\n<pre><code>struct A\n{\n    A(){ };\n    A(const A&amp;&amp;){ };\n    ~A(){ };\n};\n\nA a;\n\nA t = a; //error: call to implicitly-deleted copy constructor of 'A'\n\nint main()\n{ \n\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/4b51a6d555b815cd\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>the copy-constructor won't explicitly deleted. But thats's not the case.</p>\n", "Tags": "<c++><constructor><language-lawyer><rule-of-three>", "AnswerCount": "2"}, "26687534": {"ParentId": "26687426", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2014-11-01T08:39:43.030", "Score": "3", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-01T08:51:22.310", "Id": "26687534", "OwnerUserId": "3647361", "Body": "<p>This deprecation basically incorporates the Rule of Three (Five). If a user-declared copy assignment operator or destructor is provided, the fact that the copy constructor is defined as defaulted (and not as deleted) is deprecated. That should prevent you from depending upon such an implicitly declared copy constructor in future.</p>\n<blockquote>\n<p id=\"so_26687426_26687534_0\">In the example the Standard provides neither copy assignment nor\n  destructor are user-decalred.</p>\n</blockquote>\n<p>The example has nothing to do with the deprecation.</p>\n<blockquote>\n<p id=\"so_26687426_26687534_1\">I've tryied to do that as follows: [\u2026] but in the example we still have the impliclty-declared copy\n  constructor.</p>\n</blockquote>\n<p>You cannot define an implicitly declared copy constructor - because it's already defined, by <code>= default</code> (no pun intended). You would have to declare it yourself first.</p>\n<blockquote>\n<p id=\"so_26687426_26687534_2\">I thought that If we wirte the following: [\u2026] the copy-constructor won't explicitly deleted. But it's not true.</p>\n</blockquote>\n<p><em>You</em> quoted the rule that explicitly specifies that the copy constructor will be implicitly defined as deleted if a move constructor is declared:</p>\n<blockquote>\n<p id=\"so_26687426_26687534_3\">If the class definition declares a move constructor or move\n  assignment operator, the implicitly declared copy constructor is\n  defined as deleted;</p>\n</blockquote>\n<p>Clearly,</p>\n<pre><code>A(const A&amp;&amp;){ }\n</code></pre>\n<p>Is a move constructor according to [class.copy]/3. If you removed this move constructor then <a href=\"http://coliru.stacked-crooked.com/a/a9688b9417eb71e6\" rel=\"nofollow\">your example compiles</a>, although it uses said deprecated feature.</p>\n", "LastActivityDate": "2014-11-01T08:51:22.310"}, "26687608": {"ParentId": "26687426", "CommentCount": "0", "Body": "<p>Deprecated normally means that something will work, but that it is frowned upon and may not work in the future. I think the standard is saying that if you create a user-declared copy assignment operator or a user-declared destructor it will still create a default copy constructor (if you haven't) - but it may not in the future. So they want you to create your own copy constructor now, if you have one of the other two, and in the future they may force you to.</p>\n", "OwnerUserId": "1530549", "PostTypeId": "2", "Id": "26687608", "Score": "0", "CreationDate": "2014-11-01T08:50:16.593", "LastActivityDate": "2014-11-01T08:50:16.593"}, "bq_ids": {"n4140": {"so_26687426_26687534_3": {"section_id": 456, "quality": 1.0, "length": 14}, "so_26687426_26687426_0": {"section_id": 456, "quality": 0.8780487804878049, "length": 36}, "so_26687426_26687426_1": {"section_id": 5979, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_26687426_26687534_3": {"section_id": 447, "quality": 1.0, "length": 14}, "so_26687426_26687426_0": {"section_id": 447, "quality": 0.9512195121951219, "length": 39}, "so_26687426_26687426_1": {"section_id": 447, "quality": 1.0, "length": 7}}, "n4659": {"so_26687426_26687534_3": {"section_id": 479, "quality": 1.0, "length": 14}, "so_26687426_26687426_1": {"section_id": 479, "quality": 0.5714285714285714, "length": 4}, "so_26687426_26687426_0": {"section_id": 479, "quality": 0.8780487804878049, "length": 36}}}});