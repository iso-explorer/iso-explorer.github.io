post_cb({"33957037": {"ViewCount": "1259", "Body": "<p>Inspired by the post <em><a href=\"https://stackoverflow.com/questions/33932824/why-destructor-disabling-the-generation-of-implicit-move-functions\">Why does destructor disable generation of implicit move methods?</a></em>, I was wondering if the same is true for the default virtual destructor, e.g.</p>\n<pre><code>class WidgetBase // Base class of all widgets\n{\n    public:\n        virtual ~WidgetBase() = default;\n        // ...\n};\n</code></pre>\n<p>As the class is intended to be a base class of a widget hierarchy I have to define its destructor virtual to avoid memory leaks and undefined behavior when working with base class pointers. On the other hand I don't want to prevent the compiler from automatically generating move operations.</p>\n<p>Does a default virtual destructor prevent compiler-generated move operations?</p>\n", "AcceptedAnswerId": "33957174", "Title": "Does a default virtual destructor prevent compiler-generated move operations?", "CreationDate": "2015-11-27T12:04:29.460", "Id": "33957037", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:54:25.650", "LastEditorUserId": "-1", "LastActivityDate": "2015-11-27T17:49:18.330", "Score": "24", "OwnerUserId": "137261", "Tags": "<c++><c++11><move-semantics><virtual-destructor>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33957037_33957174_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 458}}, "n3337": {"so_33957037_33957174_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 449}}, "n4659": {"so_33957037_33957174_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 481}}}, "33957174": {"Id": "33957174", "PostTypeId": "2", "Body": "<p>Yes, declaring any destructor will prevent the implicit-declaration of the move constructor.</p>\n<blockquote>\n<p id=\"so_33957037_33957174_0\"><code>N3337 [class.copy]/9:</code> If the definition of a class X does not explicitly declare a move constructor, one will be implicitly declared\n  as defaulted if and only if</p>\n<ul>\n<li>X does not have a user-declared copy constructor,</li>\n<li>X does not have a user-declared copy assignment operator,</li>\n<li>X does not have a user-declared move assignment operator,</li>\n<li><strong>X does not have a user-declared destructor</strong>, and</li>\n<li>the move constructor would not be implicitly defined as deleted.</li>\n</ul>\n</blockquote>\n<p>Declaring the destructor and defining it as <code>default</code> counts as <em>user-declared</em>.</p>\n<p>You'll need to declare the move constructor and define it as <code>default</code> yourself:</p>\n<pre><code>WidgetBase(WidgetBase&amp;&amp;) = default;\n</code></pre>\n<p>Note that this will in turn define the copy constructor as <code>delete</code>, so you'll need to <code>default</code> that one too:</p>\n<pre><code>WidgetBase(const WidgetBase&amp;) = default;\n</code></pre>\n<p>The rules for copy and move assignment operators are pretty similar as well, so you'll have to <code>default</code> them if you want them.</p>\n", "LastActivityDate": "2015-11-27T12:12:27.430", "CommentCount": "0", "CreationDate": "2015-11-27T12:12:27.430", "ParentId": "33957037", "Score": "21", "OwnerUserId": "496161"}});