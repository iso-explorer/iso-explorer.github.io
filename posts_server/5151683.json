post_cb({"5151719": {"Id": "5151719", "PostTypeId": "2", "Body": "<p>The key reason is that a static bool is a variable after all and a enum is a type - hence in case of enum no variable is ever instantiated and it's thus guaranteed to be a compile-time evaluation.</p>\n<p>Also see <a href=\"https://stackoverflow.com/q/1377695/57428\">this question</a> for more details.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-03-01T07:42:56.487", "Score": "7", "CreationDate": "2011-03-01T07:42:56.487", "ParentId": "5151683", "CommentCount": "0", "OwnerUserId": "57428", "LastEditDate": "2017-05-23T11:53:17.133"}, "5151683": {"ViewCount": "2128", "Body": "<p>Why is it considered better practice to use enum not static const bool in template metaprogramming?<br>\nI've read that somewhere in Alexandrescu's book but cannot find it and really would like to know it.</br></p>\n", "AcceptedAnswerId": "5151719", "Title": "Why enum instead of static bool?", "CreationDate": "2011-03-01T07:39:00.893", "Id": "5151683", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-04-08T22:55:42.317", "Score": "3", "OwnerUserId": "207177", "Tags": "<c++><metaprogramming>", "AnswerCount": "3"}, "5153283": {"Id": "5153283", "PostTypeId": "2", "Body": "<p>The C++ standard (ISO/IEC 14882:2003) permits the usage of a static const bool only where an <em>integral constant-expression</em> is <strong>required</strong>.</p>\n<p>In pre-standard C++, all static data members (including const members) required a definition outside of their class. However, during the C++ standardization process it was decided to lift this requirement for static const integral members. The intent was to allow uses such as:</p>\n<pre><code>struct C\n{\n  static const int N = 10;\n};\nchar data[C::N]; // N \"used\" without out-of-class definition\n</code></pre>\n<p>without a namespace scope definition for N.</p>\n<p>Nevertheless, the wording of the 1998 C++ standard still required a definition if the member was used in the program. This included the member appearing anywhere except as the operand to sizeof or typeid, effectively making the above ill-formed.</p>\n<p>This was identified as a defect, and the wording was adjusted to allow such a member to appear anywhere a constant expression is required, without requiring an out-of-class definition. This includes array bounds, case expressions, static member initializers, and nontype template arguments.</p>\n<pre><code>struct C\n{\n  static const int N = 10;\n  static const int U = N; // Legal per C++03\n};\n\nchar data[C::N]; // Legal per C++03\n\ntemplate&lt;int&gt; struct D;\n\ntemplate&lt;&gt; struct D&lt;C::N&gt; {}; // Legal per C++03\n</code></pre>\n<p>However, using a static const integral member anywhere except where an integral constant-expression is required requires a definition. But most compilers won't diagnose this violation:</p>\n<pre><code>struct C\n{\n  static const int N = 10;\n};\n\nint main()\n{\n  int i = C::N; // ill-formed, definition of C::N required\n}\n</code></pre>\n<p>This pitfall, however, does not apply to enums.</p>\n", "LastActivityDate": "2011-03-01T10:32:28.607", "CommentCount": "0", "CreationDate": "2011-03-01T10:32:28.607", "ParentId": "5151683", "Score": "7", "OwnerUserId": "632030"}, "5151723": {"Id": "5151723", "PostTypeId": "2", "Body": "<p>That's an old recommendation based on old compilers' deficiencies related to inline initialization of <code>static const</code> primitives inside of class definitions. <code>static bool const</code> is the overwhelmingly usual approach at this point.</p>\n<p>From the C++03 standard, \u00a79.4.2/4:</p>\n<blockquote>\n<p id=\"so_5151683_5151723_0\">If a <code>static</code> data member is of <code>const</code> integral or <code>const</code> enumeration type, its declaration in the class definition can specify a <em>constant-initializer</em> which shall be an integral constant expression (5.19). In that case, the member can appear in integral constant expressions. The member shall still be defined in a namespace scope if it is used in the program and the namespace scope definition shall not contain an <em>initializer</em>.</p>\n</blockquote>\n", "LastEditorUserId": "636019", "LastActivityDate": "2011-04-08T22:55:42.317", "Score": "3", "CreationDate": "2011-03-01T07:43:54.410", "ParentId": "5151683", "CommentCount": "0", "OwnerUserId": "636019", "LastEditDate": "2011-04-08T22:55:42.317"}, "bq_ids": {"n4140": {"so_5151683_5151723_0": {"length": 28, "quality": 0.7567567567567568, "section_id": 5908}}, "n3337": {"so_5151683_5151723_0": {"length": 28, "quality": 0.7567567567567568, "section_id": 5680}}, "n4659": {"so_5151683_5151723_0": {"length": 24, "quality": 0.6486486486486487, "section_id": 7390}}}});