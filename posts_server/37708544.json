post_cb({"37710367": {"ParentId": "37708544", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The main case of \"undefined\" behavior would be that typically, if someone sees <code>const</code>, they will assume that it does not change. So, <code>const_cast</code> intentionally does something that many libraries and programs would either not expect to be done or consider as explicit undefined behavior. It's important to remember that not all <em>undefined behavior</em> comes from the standard alone, even if that is the typical usage of the term.</p>\n<p>That said, I was able to locate a place in the standard library where such thinking can be applied to do something I believe would more narrowly be considered undefined behavior: generating an <code>std::map</code> with \"duplicate keys\":</p>\n<pre><code>#include \"iostream\"\n#include \"map\"\n\nint main( )\n{\n    std::map&lt; int, int &gt; aMap;\n\n    aMap[ 10 ] = 1;\n    aMap[ 20 ] = 2;\n\n    *const_cast&lt; int* &gt;( &amp;aMap.find( 10 )-&gt;first ) = 20;\n\n    std::cout &lt;&lt; \"Iteration:\" &lt;&lt; std::endl;\n    for( std::map&lt; int,int &gt;::iterator i = aMap.begin(); i != aMap.end(); ++i )\n        std::cout &lt;&lt; i-&gt;first &lt;&lt; \" : \" &lt;&lt; i-&gt;second &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; std::endl &lt;&lt; \"Subscript Access:\" &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"aMap[ 10 ]\" &lt;&lt; \" : \" &lt;&lt; aMap[ 10 ] &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"aMap[ 20 ]\" &lt;&lt; \" : \" &lt;&lt; aMap[ 20 ] &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; std::endl &lt;&lt; \"Iteration:\" &lt;&lt; std::endl;\n    for( std::map&lt; int,int &gt;::iterator i = aMap.begin(); i != aMap.end(); ++i )\n        std::cout &lt;&lt; i-&gt;first &lt;&lt; \" : \" &lt;&lt; i-&gt;second &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>Iteration:\n20 : 1\n20 : 2\n\nSubscript Access:\naMap[ 10 ] : 0\naMap[ 20 ] : 1\n\nIteration:\n10 : 0\n20 : 1\n20 : 2\n</code></pre>\n<p>Built with <code>g++.exe (Rev5, Built by MSYS2 project) 5.3.0</code>.</p>\n<p>Obviously, there is a mismatch between the access keys and the key values in the stored pairs. It also seems that the 20:2 pair is not accessible except via iteration.</p>\n<p>My guess is that this is happening because <code>map</code> is implemented as a tree. Changing the value leaves it where it initially was (where <code>10</code> would go), so it does not overwrite the other <code>20</code> key. At the same time, adding an actual <code>10</code> does not overwrite the old <code>10</code> because on checking the key value, it's not actually the same</p>\n<p>I do not have a standard to look at right now, but I would expect this violates the definition of <code>map</code> on a few levels.</p>\n<p>It might also lead to worse behavior, but with my compiler/OS combo I was unable to get it to do anything more extreme, like crash.</p>\n", "Id": "37710367", "LastEditDate": "2016-06-08T20:54:55.960", "OwnerDisplayName": "user3995702", "Score": "0", "CreationDate": "2016-06-08T18:38:25.793", "LastActivityDate": "2016-06-08T20:54:55.960", "LastEditorDisplayName": "user3995702"}, "37708544": {"CommentCount": "16", "AcceptedAnswerId": "37708940", "PostTypeId": "1", "LastEditorUserId": "464289", "CreationDate": "2016-06-08T16:54:57.130", "LastActivityDate": "2016-06-08T20:54:55.960", "LastEditDate": "2016-06-08T17:21:06.603", "ViewCount": "288", "FavoriteCount": "3", "Title": "Non-trivial example of undefined behavior with const_cast", "Id": "37708544", "Score": "13", "Body": "<p>The following code is, as far as I understand it, undefined behavior according to the c++ standard (section 7.1.5.1.4 [dcl.type.cv]/4 in particular).</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct F;\nF* g;\n\nstruct F {\n    F() : val(5)\n    {\n        g = this;\n    }\n    int val;\n};\n\n\nconst F f;\n\nint main() {\n    g-&gt;val = 8;\n    std::cout &lt;&lt; f.val &lt;&lt; std::endl;\n}\n</code></pre>\n<p>However, this prints '8' with every compiler and optimization setting I have tried.</p>\n<p><strong>Question</strong>: Is there an example that will exhibit unexpected results with this type of \"implicit const_cast\"?</p>\n<p>I am hoping for something as spectacular as the results of</p>\n<pre><code>#include &lt;iostream&gt;\nint main() {\n    for (int i = 0; i &lt;=4; ++i)\n        std::cout &lt;&lt; i * 1000000000 &lt;&lt; std::endl;\n}\n</code></pre>\n<p>on, e.g., gcc 4.8.5 with -O2</p>\n<p><strong>EDIT</strong>: the relevant section from the standard</p>\n<blockquote>\n<p id=\"so_37708544_37708544_0\">7.1.5.1.4: Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const object during its lifetime\n  (3.8) results in undefined behavior.</p>\n</blockquote>\n<p>In reply to the comment suggesting a duplicate; it is not a duplicate because I am asking for an example where \"unexpected\" results occur.</p>\n", "Tags": "<c++><undefined-behavior>", "OwnerUserId": "464289", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37708544_37708544_0": {"section_id": 5433, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_37708544_37708544_0": {"section_id": 5228, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_37708544_37708544_0": {"section_id": 6861, "quality": 0.8947368421052632, "length": 17}}}, "37708940": {"ParentId": "37708544", "CommentCount": "0", "Body": "<p>Not as spectacular:</p>\n<p><code>f.h</code> (guards omitted):</p>\n<pre><code>struct F;\nextern F* g;\n\nstruct F {\n    F() : val(5)\n    {\n        g = this;\n    }\n    int val;\n};\n\nextern const F f;\nvoid h();\n</code></pre>\n<p>TU1:</p>\n<pre><code>#include \"f.h\"\n// definitions\nF* g;\nconst F f;\nvoid h() {}    \n</code></pre>\n<p>TU2: </p>\n<pre><code>#include \"f.h\"\n#include &lt;iostream&gt;\nint main() {\n    h(); // ensure that globals have been initialized\n    int val = f.val;\n    g-&gt;val = 8;\n    std::cout &lt;&lt; (f.val == val) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Prints <code>1</code>  when compiled with <code>g++ -O2</code>, and <code>0</code> when compiled with <code>-O0</code>.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "37708940", "Score": "7", "CreationDate": "2016-06-08T17:17:21.883", "LastActivityDate": "2016-06-08T17:17:21.883"}});