post_cb({"5718539": {"ParentId": "5715865", "CommentCount": "0", "CreationDate": "2011-04-19T15:07:21.280", "OwnerUserId": "198356", "PostTypeId": "2", "Id": "5718539", "Score": "2", "Body": "<p>Just to complement the answers, there is also <a href=\"http://doc.trolltech.com/4.7/qobject.html#Q_INTERFACES\" rel=\"nofollow\"><code>Q_INTERFACES</code></a> and <a href=\"http://doc.trolltech.com/4.7/qtplugin.html#Q_DECLARE_INTERFACE\" rel=\"nofollow\"><code>Q_DECLARE_INTERFACE</code></a> that allow casting using <strong>qobject_cast</strong> instead of <strong>dynamic_cast</strong>. The documentation advertises them mostly for building plugins, but they can be used in any kind of project.</p>\n<p>They are especially useful when creating \"services.\" (As in, does this class implement the service interface <code>com.example.IFileService/1.0</code>?) And, of course, they work with RTTI turned off if you ever need to.</p>\n", "LastActivityDate": "2011-04-19T15:07:21.280"}, "5716028": {"ParentId": "5715865", "CommentCount": "0", "CreationDate": "2011-04-19T12:02:57.063", "OwnerUserId": "506441", "PostTypeId": "2", "Id": "5716028", "Score": "7", "Body": "<p>You could do it the way you present, but it isn't necessary. The Below should work fine.</p>\n<pre><code>IMethodHelper* myIHelper = dynamic_cast&lt;IMethodHelper*&gt;(someObject);\n</code></pre>\n", "LastActivityDate": "2011-04-19T12:02:57.063"}, "5715865": {"CommentCount": "0", "ViewCount": "1532", "PostTypeId": "1", "LastEditorUserId": "183133", "CreationDate": "2011-04-19T11:47:43.213", "LastActivityDate": "2011-04-19T15:07:21.280", "Title": "How to perform casting with multiple inheritance", "AcceptedAnswerId": "5716028", "LastEditDate": "2011-04-19T11:53:28.407", "Id": "5715865", "Score": "4", "Body": "<p>My classes structure is like:</p>\n<pre><code>class MethodHelper : public QObject, public IMethodHelper {\npublic:\n    // Stuff\n};\n</code></pre>\n<p>Now, I get a pointer to the object:</p>\n<pre><code>QObject* someObject = getMethodHelper();\n</code></pre>\n<p>Here, I am extremely sure that <code>someObject</code> is a type of MethodHelper. I somehow want to cast it to IMethodHelper. How should I go about it?</p>\n<p>My current thoughts are like <code>QObject -&gt; MethodHelper -&gt; IMethodHelper</code>, like:</p>\n<pre><code>QObject* someObject = getMethodHelper();\nMethodHelper* myHelper = qobject_cast&lt;MethodHelper*&gt;(someObject);\nIMethodHelper* myIHelper = dynamic_cast&lt;IMethodHelper*&gt;(myHelper);\n</code></pre>\n<p>is there a potential flaw in my approach?</p>\n", "Tags": "<c++><qt><casting>", "OwnerUserId": "183133", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_5715865_5716020_0": {"section_id": 6018, "quality": 0.8666666666666667, "length": 26}}, "n3337": {"so_5715865_5716020_0": {"section_id": 5786, "quality": 0.8666666666666667, "length": 26}}, "n4659": {"so_5715865_5716020_0": {"section_id": 7517, "quality": 0.8666666666666667, "length": 26}}}, "5716020": {"ParentId": "5715865", "CommentCount": "2", "CreationDate": "2011-04-19T12:02:14.133", "OwnerUserId": "616700", "PostTypeId": "2", "Id": "5716020", "Score": "4", "Body": "<pre><code>IMethodHelper * myIHelper = dynamic_cast&lt;IMethodHelper *&gt;(someObject);\n</code></pre>\n<p>Cross casts are legal with <code>dynamic_cast</code> - if your types are polymorphic.</p>\n<p>5.2.7/8 snippet:</p>\n<blockquote>\n<p id=\"so_5715865_5716020_0\">The run-time check logically executes\n  as follows: \u2014 If, in the most derived\n  object pointed (referred) to by v, v\n  points (refers) to a public base class\n  subobject of a T object, and if only\n  one object of type T is derived from\n  the sub-object pointed (referred) to\n  by v, the result is a pointer (an\n  lvalue referring) to that T object.</p>\n</blockquote>\n", "LastActivityDate": "2011-04-19T12:02:14.133"}});