post_cb({"bq_ids": {"n4140": {"so_31798217_31798261_1": {"length": 29, "quality": 1.0, "section_id": 438}, "so_31798217_31798261_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_31798217_31798261_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_31798217_31798261_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 438}}, "n3337": {"so_31798217_31798261_1": {"length": 29, "quality": 1.0, "section_id": 429}, "so_31798217_31798261_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_31798217_31798261_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_31798217_31798261_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 429}}, "n4659": {"so_31798217_31798261_1": {"length": 29, "quality": 1.0, "section_id": 458}, "so_31798217_31798261_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_31798217_31798261_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_31798217_31798261_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 458}}}, "31798261": {"Id": "31798261", "PostTypeId": "2", "Body": "<p>It depends on the order of the members <code>m_BoundingBox</code> and  <code>m_Area</code> in the class definition.  </p>\n<p>The standard states:  </p>\n<blockquote>\n<p id=\"so_31798217_31798261_0\"><strong>12.6.2/10</strong> In a non-delegating constructor, initialization proceeds in the following order: </p>\n<p id=\"so_31798217_31798261_1\">\u2014 First, and only for the constructor of the\n  most derived class (1.8), virtual base classes are initialized in the\n  order they appear on a depth-first left-to-right traversal of the\n  directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the\n  order of appearance of the base classes in the derived class\n  base-specifier-list.</p>\n<p id=\"so_31798217_31798261_2\">\u2014 Then, direct base classes are initialized in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers).</p>\n<p id=\"so_31798217_31798261_3\">\u2014 Then, non-static\n  data members are initialized <strong>in the order they were declared in the\n  class definition</strong> (again regardless of the order of the\n  mem-initializers).</p>\n</blockquote>\n<p>So the members are not initialized in the order in which they appear in the mem-initializer, but on their odrer in the class definition.  </p>\n<p>Here you can see an <a href=\"http://ideone.com/qWB4yC\">online example</a> of what happens if the elements are in the right or in the wrong order in the class.    </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-08-03T23:41:00.987", "Score": "13", "CreationDate": "2015-08-03T23:19:03.677", "ParentId": "31798217", "CommentCount": "2", "OwnerUserId": "3723423", "LastEditDate": "2015-08-03T23:41:00.987"}, "31798217": {"ViewCount": "185", "Body": "<p>For example, is it safe to call <code>Area()</code> here:</p>\n<pre><code>Polygon::Polygon( Coord x0, Coord y0, Coord x1, Coord y1 )\n    : m_BoundingBox( x0, y0, x1, y1 ), m_Area( m_BoundingBox.Area() )\n{\n}\n</code></pre>\n<p>That is, can one assume that members in the <code>: ,</code> portion of a constructor are constructed and initialized in the order they are listed?</p>\n", "AcceptedAnswerId": "31798261", "Title": "Is it safe to use members initialized in the `: , ` portion of a constructor later in `: , `?", "CreationDate": "2015-08-03T23:15:38.440", "LastActivityDate": "2015-08-03T23:41:00.987", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "Tags": "<c++><constructor>", "Id": "31798217", "Score": "7", "OwnerUserId": "2540407", "ClosedDate": "2015-08-04T00:44:06.810", "AnswerCount": "2"}, "31798264": {"Id": "31798264", "PostTypeId": "2", "Body": "<p>Nope, they are initialized in the order in which they are declared in the <code>class</code> block. The order in the initialization list has no effect (and that's why many compilers emit a warning when they do not match). </p>\n", "LastActivityDate": "2015-08-03T23:19:26.110", "CommentCount": "0", "CreationDate": "2015-08-03T23:19:26.110", "ParentId": "31798217", "Score": "3", "OwnerUserId": "214671"}});