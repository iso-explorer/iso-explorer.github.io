post_cb({"5472159": {"ParentId": "5472115", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>There is no <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a> between the call to <code>operator []</code> and the call to <code>clear</code> in this statement. Consequently, the behaviour <em>should</em> be undefined.</p>\n", "OwnerUserId": "1968", "LastEditorUserId": "1968", "LastEditDate": "2011-03-29T12:33:01.707", "Id": "5472159", "Score": "2", "CreationDate": "2011-03-29T12:02:37.177", "LastActivityDate": "2011-03-29T12:33:01.707"}, "46613205": {"ParentId": "5472115", "CommentCount": "0", "Body": "<p>Given that C++17 is pretty much here, I think it's worth mentioning that this code now exhibits well defined behavior under the new standard. For this case of <code>=</code> being the built-in assignment to an integer:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.ass#1\" rel=\"nofollow noreferrer\">[expr.ass]/1</a>:</p>\n<blockquote>\n<p id=\"so_5472115_46613205_0\">The assignment operator (=) and the compound assignment operators all\n  group right-to-left. All require a modifiable lvalue as their left\n  operand and return an lvalue referring to the left operand. The result\n  in all cases is a bit-field if the left operand is a bit-field. In all\n  cases, the assignment is sequenced after the value computation of the\n  right and left operands, and before the value computation of the\n  assignment expression. <strong>The right operand is sequenced before the left\n  operand.</strong> With respect to an indeterminately-sequenced function call,\n  the operation of a compound assignment is a single evaluation.</p>\n</blockquote>\n<p>Which leaves us with only one option, and that is #2.</p>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "46613205", "Score": "1", "CreationDate": "2017-10-06T20:04:10.537", "LastActivityDate": "2017-10-06T20:04:10.537"}, "5472408": {"ParentId": "5472115", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I believe it's <em>unspecified</em> whether 0 or 1 is stored in <code>m[0]</code>, but it's not undefined behavior.</p>\n<p>The LHS and the RHS can occur in either order, but they're both function calls, so they both have a sequence point at the start and end. There's no danger of the two of them, collectively, accessing the same object without an intervening sequence point.</p>\n<p>The assignment is actual int assignment, not a function call with associated sequence points, since <code>operator[]</code> returns <code>T&amp;</code>. That's briefly worrying, but it's not modifying an object that is accessed anywhere else in this statement, so that's safe too. It's accessed within <code>operator[]</code>, of course, where it is initialized, but that occurs before the sequence point on return from <code>operator[]</code>, so that's OK. If it wasn't, <code>m[0] = 0;</code> would be undefined too!</p>\n<p>However, the order of evaluation of the operands of <code>operator=</code> is not specified by the standard, so the actual result of the call to <code>size()</code> might be 0 or 1 depending which order occurs.</p>\n<p>The following would be undefined behavior, though. It doesn't make function calls and so there's nothing to prevent <code>size</code> being accessed (on the RHS) and modified (on the LHS) without an intervening sequence point:</p>\n<pre><code>int values[1];\nint size = 0;\n\n(++size, values[0] = 0) = size;\n/*     fake m[0]     */  /* fake m.size() */\n</code></pre>\n", "OwnerUserId": "13005", "LastEditorUserId": "13005", "LastEditDate": "2011-03-29T12:41:02.973", "Id": "5472408", "Score": "17", "CreationDate": "2011-03-29T12:21:27.460", "LastActivityDate": "2011-03-29T12:41:02.973"}, "5472115": {"CommentCount": "4", "AcceptedAnswerId": "5472408", "PostTypeId": "1", "LastEditorUserId": "3885376", "CreationDate": "2011-03-29T11:58:45.757", "LastActivityDate": "2017-10-06T20:04:10.537", "LastEditDate": "2017-10-06T19:53:34.573", "ViewCount": "419", "FavoriteCount": "5", "Title": "Is this code behavior defined?", "Id": "5472115", "Score": "39", "Body": "<p>What does the following code print to the console?</p>\n<pre><code>map&lt;int,int&gt; m;\nm[0] = m.size();\nprintf(\"%d\", m[0]);\n</code></pre>\n<p>Possible answers:</p>\n<ol>\n<li>The behavior of the code is not defined since it is not defined which statement <code>m[0]</code> or <code>m.size()</code> is being executed first by the compiler. So it could print <code>1</code> as well as <code>0</code>.</li>\n<li>It prints <code>0</code> because the right hand side of the assignment operator is executed first.</li>\n<li><p>It prints <code>1</code> because the <code>operator[]</code> has the highest priority of the complete statement <code>m[0] = m.size()</code>. Because of this the following sequence of events occurs:</p>\n<ul>\n<li><code>m[0]</code> creates a new element in the map</li>\n<li><code>m.size()</code> gets called which is now <code>1</code></li>\n<li><code>m[0]</code> gets assigned the previously returned (by m.size()) <code>1</code> </li>\n</ul></li>\n<li><p><em>The real answer?</em>, which is unknown to me^^</p></li>\n</ol>\n", "Tags": "<c++><operators>", "OwnerUserId": "572616", "AnswerCount": "4"}, "5472263": {"ParentId": "5472115", "CommentCount": "4", "Body": "<p>It <em>does</em> print 1, and without raising a warning(!) using gcc. It <em>should</em> raise a warning because it is undefined.</p>\n<p>The precedence class of both <code>operator[]</code> and <code>operator.</code> is 2 whereas the precedence class of <code>operator=</code> is 16.<br>\nThis means that it is well-defined that <code>m[0]</code> and <code>m.size()</code> will be executed before the assignment. However, it is not defined which one executes first.</br></p>\n", "OwnerUserId": "572743", "PostTypeId": "2", "Id": "5472263", "Score": "2", "CreationDate": "2011-03-29T12:11:02.430", "LastActivityDate": "2011-03-29T12:11:02.430"}, "bq_ids": {"n4140": {"so_5472115_46613205_0": {"section_id": 6173, "quality": 0.8360655737704918, "length": 51}}, "n3337": {"so_5472115_46613205_0": {"section_id": 5934, "quality": 0.8360655737704918, "length": 51}}, "n4659": {"so_5472115_46613205_0": {"section_id": 7675, "quality": 0.9344262295081968, "length": 57}}}});