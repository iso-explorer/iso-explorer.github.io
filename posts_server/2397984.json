post_cb({"2397995": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "15", "Body": "<p>Well, this is basically a straight copy-paste from the standard</p>\n<blockquote>\n<p id=\"so_2397984_2397995_0\"><strong>3.4.1</strong> 1 <strong>implementation-defined behavior</strong> unspecified behavior where\n  each implementation documents how the\n  choice is made </p>\n<p id=\"so_2397984_2397995_1\">2 EXAMPLE An example of\n  implementation-defined behavior is the\n  propagation of the high-order bit when\n  a signed integer is shifted right.</p>\n<p id=\"so_2397984_2397995_2\"><strong>3.4.3</strong> 1 <strong>undefined behavior</strong> behavior, upon use of a nonportable or erroneous\n  program construct or of erroneous\n  data, for which this International\n  Standard imposes no requirements </p>\n<p id=\"so_2397984_2397995_3\">2\n  NOTE Possible undefined behavior\n  ranges from ignoring the situation\n  completely with unpredictable results,\n  to behaving during translation or\n  program execution in a documented\n  manner characteristic of the\n  environment (with or without the\n  issuance of a diagnostic message), to\n  terminating a translation or execution\n  (with the issuance of a diagnostic\n  message).</p>\n<p id=\"so_2397984_2397995_4\">3 EXAMPLE An example of\n  undefined behavior is the behavior on\n  integer overflow.</p>\n<p id=\"so_2397984_2397995_5\"><strong>3.4.4</strong> 1 <strong>unspecified behavior</strong> use of an unspecified value, or other behavior\n  where this International Standard\n  provides two or more possibilities and\n  imposes no further requirements on\n  which is chosen in any instance </p>\n<p id=\"so_2397984_2397995_6\">2\n  EXAMPLE An example of unspecified\n  behavior is the order in which the\n  arguments to a function are evaluated.</p>\n</blockquote>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2010-03-07T21:25:11.050", "Id": "2397995", "Score": "75", "CreationDate": "2010-03-07T21:15:46.093", "LastActivityDate": "2010-03-07T21:25:11.050"}, "2398030": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Maybe easy wording could be easier for understanding than the rigorous definition of the standards.</p>\n<p><strong>implementation-defined behavior</strong><br>\nThe language says that we have data-types. The compiler vendors specify what sizes shall they use, and provide a documentation of what they did.</br></p>\n<p><strong>undefined behavior</strong><br>\nYou are doing something wrong. For example, you have a very large value in an <code>int</code> that doesn't fit in <code>char</code>. How do you put that value in <code>char</code>? actually there is no way! Anything could happen, but the most sensible thing would be to take the first byte of that int and put it in <code>char</code>. It is just wrong to do that to assign the first byte, but thats what happens under the hood.</br></p>\n<p><strong>unspecified behavior</strong><br>\nWhich function of these two is executed first?</br></p>\n<pre><code>void fun(int n, int m);\n\nint fun1()\n{\n  cout &lt;&lt; \"fun1\";\n  return 1;\n}\nint fun2()\n{\n  cout &lt;&lt; \"fun2\";\n  return 2;\n}\n...\nfun(fun1(), fun2()); // which one is executed first?\n</code></pre>\n<p>The language doesn't specify the evaluation, left to right or right to left! So an unspecified behavior may or mayn't result in an undefined behavior, but certainly your program should not produce an unspecified behavior.</p>\n<hr>\n<p>@eSKay I think your question is worth editing the answer to clarify more :)</p>\n<blockquote>\n<p id=\"so_2397984_2398030_0\">for <code>fun(fun1(), fun2());</code> isn't the\n  behaviour \"implementation defined\"?\n  The compiler has to choose one or the\n  other course, after all?</p>\n</blockquote>\n<p>The difference between implementation-defined and unspecified, is that the compiler is supposed to pick a behavior in the first case but it doesn't have to in the second case. For example, an implementation must have one and only one definition of <code>sizeof(int)</code>. So, it can't say that <code>sizeof(int)</code> is 4 for some portion of the program and 8 for others. Unlike unspecified behavior, where the compiler can say OK I am gonna evaluate these arguments left-to-right and the next function's arguments are evaluated right-to-left. It can happen in the same program, that's why it is called <strong><em>unspecified</em></strong>. In fact, C++ could have been made easier if some of the unspecified behaviors were specified. Take a look here at <a href=\"http://www2.research.att.com/~bs/bs_faq2.html#undefined\" rel=\"noreferrer\">Dr. Stroustrup's answer for that</a>:</p>\n<blockquote>\n<p id=\"so_2397984_2398030_1\">It is claimed that the difference\n  between what can be produced giving\n  the compiler this freedom and\n  requiring \"ordinary left-to-right\n  evaluation\" can be significant. I'm\n  unconvinced, but with innumerable\n  compilers \"out there\" taking advantage\n  of the freedom and some people\n  passionately defending that freedom, a\n  change would be difficult and could\n  take decades to penetrate to the\n  distant corners of the C and C++\n  worlds. I am disappointed that not all\n  compilers warn against code such as\n  ++i+i++. Similarly, the order of evaluation of arguments is\n  unspecified.</p>\n<p id=\"so_2397984_2398030_2\">IMO far too many \"things\" are left\n  undefined, unspecified,\n  implementation-defined, etc. However,\n  that's easy to say and even to give\n  examples of, but hard to fix. It\n  should also be noted that it is not\n  all that difficult to avoid most of\n  the problems and produce portable\n  code.</p>\n</blockquote>\n</hr>", "OwnerUserId": "127893", "LastEditorUserId": "127893", "LastEditDate": "2010-03-08T09:56:36.217", "Id": "2398030", "Score": "45", "CreationDate": "2010-03-07T21:28:19.920", "LastActivityDate": "2010-03-08T09:56:36.217"}, "29664862": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Historically, both Implementation-Defined Behavior and Undefined Behavior represented situations in which the authors of the Standard expected that people writing quality implementations would use judgment to decide what behavioral guarantees, if any, would be useful for programs in the intended application field running on the intended targets.  The needs of high-end number-crunching code are quite different from those of low-level systems code, and both UB and IDB give compiler writers flexibility to meet those different needs.  Neither category mandates that implementations behave in a way that's useful for any particular purpose, or even for any purpose whatsoever.  Quality implementations that claim to be suitable for a particular purpose, however, should behave in a manner befitting such purpose <em>whether the Standard requires it or not</em>.</p>\n<p>The only difference between Implementation-Defined Behavior and Undefined Behavior is that the former requires that implementations define and document a consistent behavior <em>even in cases where nothing the implementation could possibly do would be useful</em>.  The dividing line between them is not whether it would generally be useful for implementations to define behaviors (compiler writers should define useful behaviors when practical whether the Standard requires them to or not) but <em>whether there might be implementations where defining a behavior would be simultaneously costly and useless</em>.  A judgment that such implementations might exist does not in any way, shape, or form, imply any judgment about the usefulness of supporting a defined behavior on other platforms.</p>\n<p>Unfortunately, since the mid 1990s compiler writers have started to interpret the lack of behavioral mandates as an judgment that behavioral guarantees aren't worth the cost even in application fields where they're vital, and even on systems where they cost practically nothing.  Instead of treating UB as an invitation to exercise reasonable judgment, compiler writers have started treating it as an excuse <em>not</em> to do so.</p>\n<p>For example, given the following code:</p>\n<pre><code>int scaled_velocity(int v, unsigned char pow)\n{\n  if (v &gt; 250)\n    v = 250;\n  if (v &lt; -250)\n    v = -250;\n  return v &lt;&lt; pow;\n}\n</code></pre>\n<p>a two's-complement implementation would not have to expend any effort\nwhatsoever to treat the expression <code>v &lt;&lt; pow</code> as a two's-complement shift\nwithout regard for whether <code>v</code> was positive or negative.</p>\n<p>The preferred philosophy among some of today's compiler writers, however, would suggest that because <code>v</code> can only be negative if the program is going to engage in Undefined Behavior, there's no reason to have the program clip the negative range of <code>v</code>.  Even though left-shifting of negative values used to be supported on every single compiler of significance, and a large amount of existing code relies upon that behavior, modern philosophy would interpret the fact that the Standard says that left-shifting negative values is UB as implying that compiler writers should feel free to ignore that.</p>\n", "OwnerUserId": "363751", "LastEditorUserId": "363751", "LastEditDate": "2017-02-24T23:58:02.913", "Id": "29664862", "Score": "5", "CreationDate": "2015-04-16T03:32:59.083", "LastActivityDate": "2017-02-24T23:58:02.913"}, "bq_ids": {"n4140": {"so_2397984_4105123_2": {"section_id": 5798, "quality": 0.92, "length": 23}, "so_2397984_23581132_1": {"section_id": 5768, "quality": 0.9166666666666666, "length": 55}, "so_2397984_4105123_3": {"section_id": 5799, "quality": 0.8275862068965517, "length": 24}, "so_2397984_4105123_1": {"section_id": 5797, "quality": 0.8, "length": 8}, "so_2397984_23581132_2": {"section_id": 5768, "quality": 0.75, "length": 18}, "so_2397984_4105123_4": {"section_id": 5800, "quality": 0.6666666666666666, "length": 16}, "so_2397984_4105123_5": {"section_id": 5768, "quality": 1.0, "length": 26}, "so_2397984_2397995_3": {"section_id": 5768, "quality": 0.9259259259259259, "length": 25}, "so_2397984_4105123_0": {"section_id": 5361, "quality": 0.8571428571428571, "length": 6}, "so_2397984_23581132_0": {"section_id": 5768, "quality": 1.0, "length": 10}}, "n3337": {"so_2397984_4105123_2": {"section_id": 5571, "quality": 0.92, "length": 23}, "so_2397984_4105123_0": {"section_id": 5157, "quality": 0.8571428571428571, "length": 6}, "so_2397984_4105123_3": {"section_id": 5572, "quality": 0.896551724137931, "length": 26}, "so_2397984_4105123_1": {"section_id": 5570, "quality": 0.8, "length": 8}, "so_2397984_23581132_2": {"section_id": 5541, "quality": 0.75, "length": 18}, "so_2397984_4105123_4": {"section_id": 5573, "quality": 0.6666666666666666, "length": 16}, "so_2397984_23581132_1": {"section_id": 5541, "quality": 0.9166666666666666, "length": 55}, "so_2397984_4105123_5": {"section_id": 5541, "quality": 1.0, "length": 26}, "so_2397984_2397995_3": {"section_id": 5541, "quality": 0.9259259259259259, "length": 25}, "so_2397984_23581132_0": {"section_id": 5541, "quality": 1.0, "length": 10}}, "n4659": {"so_2397984_4105123_2": {"section_id": 7257, "quality": 0.92, "length": 23}, "so_2397984_23581132_1": {"section_id": 7225, "quality": 0.9166666666666666, "length": 55}, "so_2397984_4105123_3": {"section_id": 7258, "quality": 0.8275862068965517, "length": 24}, "so_2397984_4105123_1": {"section_id": 7256, "quality": 0.8, "length": 8}, "so_2397984_23581132_2": {"section_id": 7225, "quality": 0.75, "length": 18}, "so_2397984_4105123_4": {"section_id": 7259, "quality": 0.6666666666666666, "length": 16}, "so_2397984_4105123_5": {"section_id": 7225, "quality": 1.0, "length": 26}, "so_2397984_2397995_3": {"section_id": 7225, "quality": 0.9259259259259259, "length": 25}, "so_2397984_4105123_0": {"section_id": 6789, "quality": 0.8571428571428571, "length": 6}, "so_2397984_23581132_0": {"section_id": 7225, "quality": 1.0, "length": 10}}}, "2397984": {"CommentCount": "14", "AcceptedAnswerId": "4105123", "PostTypeId": "1", "LastEditorUserId": "426671", "CreationDate": "2010-03-07T21:10:30.717", "LastActivityDate": "2017-07-05T07:38:52.350", "LastEditDate": "2017-03-22T16:18:41.917", "ViewCount": "34698", "FavoriteCount": "200", "Title": "Undefined, unspecified and implementation-defined behavior", "Id": "2397984", "Score": "397", "Body": "<p>What is the difference between undefined, unspecified, and implementation-defined behavior in C and C++?</p>\n", "Tags": "<c++><c><undefined-behavior><c++-faq><unspecified-behavior>", "OwnerUserId": "182153", "AnswerCount": "8"}, "4105123": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "13", "Body": "<p><strong><em>Undefined behavior</em></strong> is one of those aspects of the C and C++ language that can be surprising to programmers coming from other languages (other languages try to hide it better). Basically,  it is possible to write C++ programs that do not behave in a predictable way, even though many C++ compilers will not report any errors in the program!</p>\n<p>Let's look at a classic example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    char* p = \"hello!\\n\";   // yes I know, deprecated conversion\n    p[0] = 'y';\n    p[5] = 'w';\n    std::cout &lt;&lt; p;\n}\n</code></pre>\n<p>The variable <code>p</code> points to the string literal <code>\"hello!\\n\"</code>, and the two assignments below try to modify that string literal. What does this program do? According to section 2.14.5 paragraph 11 of the C++ standard, it invokes <em>undefined behavior</em>:</p>\n<blockquote>\n<p id=\"so_2397984_4105123_0\">The effect of attempting to modify a string literal is undefined.</p>\n</blockquote>\n<p>I can hear people screaming \"But wait, I can compile this no problem and get the output <code>yellow</code>\" or \"What do you mean undefined, string literals are stored in read-only memory, so the first assignment attempt results in a core dump\". This is exactly the problem with undefined behavior. Basically, the standard allows anything to happen once you invoke undefined behavior (even nasal demons). If there is a \"correct\" behavior according to your mental model of the language, that model is simply wrong; The C++ standard has the only vote, period.</p>\n<p>Other examples of undefined behavior include accessing an array beyond its bounds, <a href=\"https://stackoverflow.com/q/2894891\">dereferencing the null pointer</a>, <a href=\"https://stackoverflow.com/q/6441218\">accessing objects after their lifetime ended</a> or writing <a href=\"https://stackoverflow.com/q/949433\">allegedly clever expressions</a> like <code>i++ + ++i</code>.</p>\n<p>Section 1.9 of the C++ standard also mentions undefined behavior's two less dangerous brothers, <strong>unspecified behavior</strong> and <strong>implementation-defined behavior</strong>:</p>\n<blockquote>\n<p id=\"so_2397984_4105123_1\">The semantic descriptions in this International Standard define a parameterized nondeterministic abstract machine.</p>\n<p id=\"so_2397984_4105123_2\">Certain aspects and operations of the abstract machine are described in this International Standard as <strong>implementation-defined</strong> (for example, <code>sizeof(int)</code>). These constitute the parameters of the abstract machine. Each implementation shall include documentation describing its characteristics and behavior in these respects.</p>\n<p id=\"so_2397984_4105123_3\">Certain other aspects and operations of the abstract machine are described in this International Standard as <strong>unspecified</strong> (for example, order of evaluation of arguments to a function). Where possible, this International Standard defines a set of allowable behaviors. These define the nondeterministic aspects of the abstract machine.</p>\n<p id=\"so_2397984_4105123_4\">Certain other operations are described in this International Standard as <strong>undefined</strong> (for example, the  effect of dereferencing the null pointer). [ <em>Note</em>: <strong>this International Standard imposes no requirements on the behavior of programs that contain undefined behavior.</strong> \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>Specifically, section 1.3.24 states:</p>\n<blockquote>\n<p id=\"so_2397984_4105123_5\">Permissible undefined behavior ranges from <strong>ignoring the situation completely with unpredictable results</strong>, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p>What can you do to avoid running into undefined behavior? Basically, you have to read <a href=\"https://stackoverflow.com/questions/388242/\">good C++ books</a> by authors who know what they're talking about. Screw internet tutorials. Screw bullschildt.</p>\n", "OwnerUserId": "252000", "LastEditorUserId": "194894", "LastEditDate": "2017-07-05T07:38:52.350", "Id": "4105123", "Score": "296", "CreationDate": "2010-11-05T10:41:41.690", "LastActivityDate": "2017-07-05T07:38:52.350"}, "23581132": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++ standard n3337  <strong>\u00a7</strong> 1.3.10\n<strong>implementation-defined behavior</strong></p>\n<blockquote>\n<p id=\"so_2397984_23581132_0\">behavior, for a well-formed program construct and correct data, that\n  depends on the implementation and that each implementation documents</p>\n</blockquote>\n<p>Sometimes C++ Standard doesn't impose particular behavior on some constructs but says instead that a particular, well defined behavior has to be chosen and <strong>described</strong> by particular implementation (version of library). So user can still know exactly how will program behave even though Standard doesn't describe this. </p>\n<hr>\n<p>C++ standard n3337  <strong>\u00a7</strong> 1.3.24\n<strong>undefined behavior</strong></p>\n<blockquote>\n<p id=\"so_2397984_23581132_1\">behavior for which this International Standard imposes no requirements\n  [ Note: Undefined behavior may be expected when this International\n  Standard omits any explicit definition of behavior or when a program\n  uses an erroneous construct or erroneous data. Permissible undefined\n  behavior ranges from ignoring the situation completely with\n  unpredictable results, to behaving during translation or program\n  execution in a documented manner characteristic of the environment\n  (with or without the issuance of a diagnostic message), to terminating\n  a translation or execution (with the issuance of a diagnostic\n  message). Many erroneous program constructs do not engender undefined\n  behavior; they are required to be diagnosed. \u2014 end note ]</p>\n</blockquote>\n<p>When the program encounters construct that is not defined according to C++ Standard it is allowed to do whatever it wants to do ( maybe send an email to me or maybe send an email to you or maybe ignore the code completely). </p>\n<hr>\n<p>C++ standard n3337  <strong>\u00a7</strong> 1.3.25\n<strong>unspecified behavior</strong></p>\n<blockquote>\n<p id=\"so_2397984_23581132_2\">behavior, for a well-formed program construct and correct data, that\n  depends on the implementation [ Note: The implementation is not\n  required to document which behavior occurs. The range of possible\n  behaviors is usually delineated by this International Standard. \u2014 end\n  note ]</p>\n</blockquote>\n<p>C++ Standard doesn't impose particular behavior on some constructs but says instead that a particular, well defined behavior has to be chosen ( <strong>bot not necessary described</strong>) by particular implementation (version of library). So in the case when no description has been provided it can be difficult to the user to know exactly how will program behave.</p>\n</hr></hr>", "OwnerUserId": "1141471", "LastEditorUserId": "1141471", "LastEditDate": "2014-05-10T13:06:15.650", "Id": "23581132", "Score": "3", "CreationDate": "2014-05-10T12:35:39.100", "LastActivityDate": "2014-05-10T13:06:15.650"}, "29093246": {"ParentId": "2397984", "CommentCount": "1", "Body": "<p>Implementation defined- </p>\n<blockquote>\n<p id=\"so_2397984_29093246_0\">Implementors wish,should be well documented,standard gives choices but sure to compile</p>\n</blockquote>\n<p>Unspecified -</p>\n<blockquote>\n<p id=\"so_2397984_29093246_1\">Same as implementation-defined but not documented</p>\n</blockquote>\n<p>Undefined-</p>\n<blockquote>\n<p id=\"so_2397984_29093246_2\">Anything might happen,take care of it.</p>\n</blockquote>\n", "OwnerUserId": "1667476", "PostTypeId": "2", "Id": "29093246", "Score": "4", "CreationDate": "2015-03-17T07:11:45.170", "LastActivityDate": "2015-03-17T07:11:45.170"}, "14487077": {"ParentId": "2397984", "CommentCount": "2", "Body": "<p>From the official C Rationale Document</p>\n<blockquote>\n<p id=\"so_2397984_14487077_0\">The terms <em>unspecified</em> behavior, <em>undefined</em> behavior, and <em>implementation-defined</em> behavior are used to categorize the result of writing programs whose properties the Standard does not, or cannot, completely describe.  The goal of adopting this categorization is to allow a certain variety among implementations which permits quality of implementation to be an active force in the marketplace as well as to allow certain popular extensions, without removing the cachet of conformance to the Standard.  Appendix F to the Standard catalogs those behaviors which fall into one of these three categories. </p>\n<p id=\"so_2397984_14487077_1\"><em>Unspecified behavior</em> gives the implementor some latitude in translating programs.  This latitude does not extend as far as failing to translate the program. </p>\n<p id=\"so_2397984_14487077_2\"><em>Undefined behavior</em> gives the implementor license not to catch certain program errors that are difficult to diagnose.  It also identifies areas of possible conforming language extension: the implementor may augment the language by providing a definition of the officially undefined behavior. </p>\n<p id=\"so_2397984_14487077_3\"><em>Implementation-defined</em> behavior gives an implementor the freedom to choose the appropriate approach, but requires that this choice be explained to the user.  Behaviors designated as implementation-defined are generally those in which a user could make meaningful coding decisions based on the implementation definition.  Implementors should bear in mind this criterion when deciding how extensive an implementation definition ought to be.  As with unspecified behavior, simply failing to translate the source containing the implementation-defined behavior is not an adequate response. </p>\n</blockquote>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "14487077", "Score": "18", "CreationDate": "2013-01-23T18:46:51.647", "LastActivityDate": "2013-01-23T18:46:51.647"}, "2398003": {"ParentId": "2397984", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><a href=\"http://www.devx.com/tips/Tip/12684\" rel=\"nofollow noreferrer\">Undefined Behavior vs. Unspecified Behavior</a> has a short description of it.</p>\n<p>Their final summary:</p>\n<blockquote>\n<p id=\"so_2397984_2398003_0\">To sum up, unspecified behavior is usually something you shouldn't\n  worry about, unless your software is required to be portable.\n  Conversely, undefined behavior is always undesirable and should never\n  occur.</p>\n</blockquote>\n", "OwnerUserId": "280222", "LastEditorUserId": "280222", "LastEditDate": "2013-04-29T09:12:09.550", "Id": "2398003", "Score": "7", "CreationDate": "2010-03-07T21:18:32.000", "LastActivityDate": "2013-04-29T09:12:09.550"}});