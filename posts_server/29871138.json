post_cb({"29957648": {"ParentId": "29871138", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><strong>GCC is wrong here.</strong></p>\n<p>All references are to N4431, the latest C++ WD.</p>\n<p>[tl;dr: There's a difference between a function being <em>inline</em> (or more precisely, being an <em>inline function</em>, as defined in 7.1.2/2) and being declared with the <code>inline</code> specifier. The <code>constexpr</code> specifier makes a function inline, but isn't an <code>inline</code> specifier.]</p>\n<p>Specifiers are described in subclause 7.1 of the C++ standard, and are an element of the grammar. Therefore, whenever standard talks about a <code>foo</code> specifier appearing somewhere, it means that specifier literally appeared within the (parse tree of the) source code. The <code>inline</code> specifier is a <em>function-specifier</em>, described in subclause 7.1.2, and its effect is to make a function be an inline function. (7.1.2)/2:</p>\n<blockquote>\n<p id=\"so_29871138_29957648_0\">A function declaration (8.3.5, 9.3, 11.3) with an <code>inline</code> specifier declares an <em>inline function</em>.</p>\n</blockquote>\n<p>There are two other ways to declare an inline function, without using an <code>inline</code> specifier. One is described in (7.1.2)/3:</p>\n<blockquote>\n<p id=\"so_29871138_29957648_1\">A function defined within a class definition is an inline function.</p>\n</blockquote>\n<p>The other is described in (7.1.5)/1:</p>\n<blockquote>\n<p id=\"so_29871138_29957648_2\">constexpr functions and constexpr constructors are implicitly\n  inline (7.1.2).</p>\n</blockquote>\n<p>Neither of these says that the behavior is as if an <code>inline</code> <em>specifier</em> were present, merely that the function is an inline function.</p>\n<p><strong>So why does this rule exist?</strong></p>\n<p>There's a simpler form of this rule in (7.1.2)/3:</p>\n<blockquote>\n<p id=\"so_29871138_29957648_3\">If the <code>inline</code> specifier is used in a friend declaration, that declaration shall be a definition or the function shall have previously been declared inline.</p>\n</blockquote>\n<p>The purpose of this is to allow friend declarations to be ignored in most cases -- they are not permitted to add \"new information\" to the befriended entity, except in the special case where they are defining a friend function. (This in turn allows an implementation to delay parsing a class definition until it's \"needed\".) Thus we also see, in (8.3.6)/4:</p>\n<blockquote>\n<p id=\"so_29871138_29957648_4\">If a friend declaration specifies a default argument expression, that declaration shall be a definition and shall be the only declaration of the function or function template in the translation unit.</p>\n</blockquote>\n<p>And the same applies to a declaration of a friend specialization of a function template: if it could add extra information, then implementations could not delay parsing the class definition.</p>\n<p>Now, note that this rationale does <em>not</em> apply to <code>constexpr</code>: if the <code>constexpr</code> specifier appears on any declaration of a function, it must appear on <em>every</em> declaration, per (7.1.5)/1. Since there is no \"new information\" here, there is no need for a restriction.</p>\n", "OwnerUserId": "1041090", "LastEditorUserId": "1041090", "LastEditDate": "2015-05-04T02:01:09.113", "Id": "29957648", "Score": "29", "CreationDate": "2015-04-30T01:44:57.510", "LastActivityDate": "2015-05-04T02:01:09.113"}, "29871138": {"CommentCount": "6", "ViewCount": "912", "PostTypeId": "1", "LastEditorUserId": "819272", "CreationDate": "2015-04-25T21:51:00.373", "LastActivityDate": "2015-05-04T02:01:09.113", "Title": "Constexpr is not allowed in declaration of friend template specialization?", "AcceptedAnswerId": "29957648", "LastEditDate": "2015-05-02T07:48:38.143", "Id": "29871138", "Score": "27", "Body": "<p>I'm porting a C++14-<code>constexpr</code> codebase from Clang to the latest g++-5.1. Consider the following reduced code snippet of a home-grown <code>bitset</code> class that has been compiling correctly since the halcyon days of Clang 3.3 (almost 2 years now!)</p>\n<pre><code>#include &lt;cstddef&gt;\n\ntemplate&lt;std::size_t&gt;\nclass bitset;\n\ntemplate&lt;std::size_t N&gt;\nconstexpr bool operator==(const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs) noexcept;\n\ntemplate&lt;std::size_t N&gt;\nclass bitset\n{\n    friend constexpr bool operator== &lt;&gt;(const bitset&lt;N&gt;&amp;, const bitset&lt;N&gt;&amp;) noexcept;\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ &lt;-- error from this piece\n};\n\ntemplate&lt;std::size_t N&gt;\nconstexpr bool operator==(const bitset&lt;N&gt;&amp; /* lhs */, const bitset&lt;N&gt;&amp; /* rhs */) noexcept\n{\n    return true;\n}\n\nint main() {}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/EVdayJ5tzkp0Y9v7\">Live example</a> on Wandbox. However, g++-5.1 and the current trunk release give an error: </p>\n<blockquote>\n<p id=\"so_29871138_29871138_0\">'constexpr' is not allowed in declaration of friend template\n  specialization</p>\n</blockquote>\n<p><strong>Question</strong>: is this a known g++ bug or is Clang not conforming to the latest Standard? </p>\n<p><strong>Note</strong>: the above only uses C++11 style <code>constexpr</code> features, since there are no modifications taking place inside <code>operator==</code>, so it seems some weird interference between templates, friends and constexpr. </p>\n<p><strong>UPDATE</strong>: filed as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65977\">bug 65977</a> on Bugzilla.</p>\n", "Tags": "<c++><templates><c++11><g++><constexpr>", "OwnerUserId": "819272", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29871138_29957648_4": {"section_id": 3255, "quality": 1.0, "length": 14}, "so_29871138_29957648_2": {"section_id": 5418, "quality": 0.8571428571428571, "length": 6}, "so_29871138_29957648_1": {"section_id": 5403, "quality": 1.0, "length": 7}, "so_29871138_29871138_0": {"section_id": 126, "quality": 0.6666666666666666, "length": 4}, "so_29871138_29957648_0": {"section_id": 5402, "quality": 0.7777777777777778, "length": 7}, "so_29871138_29957648_3": {"section_id": 5403, "quality": 1.0, "length": 12}}, "n3337": {"so_29871138_29957648_4": {"section_id": 3127, "quality": 1.0, "length": 14}, "so_29871138_29957648_2": {"section_id": 5213, "quality": 0.8571428571428571, "length": 6}, "so_29871138_29957648_1": {"section_id": 5198, "quality": 1.0, "length": 7}, "so_29871138_29871138_0": {"section_id": 120, "quality": 0.6666666666666666, "length": 4}, "so_29871138_29957648_0": {"section_id": 5197, "quality": 0.7777777777777778, "length": 7}, "so_29871138_29957648_3": {"section_id": 5198, "quality": 1.0, "length": 12}}, "n4659": {"so_29871138_29957648_4": {"section_id": 4013, "quality": 1.0, "length": 14}, "so_29871138_29957648_2": {"section_id": 6839, "quality": 0.5714285714285714, "length": 4}, "so_29871138_29957648_1": {"section_id": 6851, "quality": 1.0, "length": 7}, "so_29871138_29871138_0": {"section_id": 131, "quality": 0.6666666666666666, "length": 4}, "so_29871138_29957648_0": {"section_id": 6849, "quality": 0.7777777777777778, "length": 7}, "so_29871138_29957648_3": {"section_id": 6852, "quality": 1.0, "length": 12}}}});