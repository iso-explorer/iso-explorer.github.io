post_cb({"43163801": {"ViewCount": "354", "Body": "<p>I was reading the documentation for <code>std::for_each</code> here <a href=\"http://en.cppreference.com/w/cpp/algorithm/for_each\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/algorithm/for_each</a> and saw that the return value is <code>std::move(f)</code></p>\n<p>Why does the standard enforce moving the input parameter in the return value?  Won't it be moved by default anyway, since the input parameter is passed by value? </p>\n<hr>\n<p>This leads me to a couple of followups, when you compile the following code</p>\n<pre><code>Something function(Something something) {\n    return something;\n} \n</code></pre>\n<ol>\n<li><p>The return statement is a move on my system with the highest optimization level (<code>-O3</code>),  why don't most compilers elide this return value?  Local values are elided but function arguments are not.. </p></li>\n<li><p>Does C++17 enforce elision in this case?  I read the proposal (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0135r0.html\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0135r0.html</a>) but I do not fully understand which cases qualify for mandatory elision. </p></li>\n</ol>\n<p>I have tried this on <code>Apple LLVM version 8.0.0 (clang-800.0.42.1)</code> on my Mac and on <code>g++ 5.4</code> on Ubuntu 16.04.</p>\n</hr>", "AcceptedAnswerId": "43163920", "Title": "Why does for_each return function by move", "CreationDate": "2017-04-02T01:46:19.723", "Id": "43163801", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-04-02T01:57:38.213", "LastEditorUserId": "5501675", "LastActivityDate": "2017-04-02T02:53:47.003", "Score": "6", "OwnerUserId": "5501675", "Tags": "<c++><c++11><move><c++1z><copy-elision>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43163801_43163920_1": {"length": 11, "quality": 1.0, "section_id": 480}}, "n3337": {"so_43163801_43163920_1": {"length": 11, "quality": 1.0, "section_id": 471}}, "n4659": {"so_43163801_43163920_1": {"length": 11, "quality": 1.0, "section_id": 502}}}, "43163920": {"Id": "43163920", "PostTypeId": "2", "Body": "<p>This is due to a late-breaking change in the move-semantics rules for C++11.  <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm\" rel=\"noreferrer\">The original move proposal</a> did not automatically move when by-value function arguments appeared on the return clause.  However by late in the C++11 process, that language feature was added.</p>\n<p>Prior to the language feature being added, <code>for_each</code> \"was moved\".  At that time the move on the return statement was necessary.  But it became unnecessary, though harmless by the time C++11 shipped.</p>\n<p><a href=\"http://cplusplus.github.io/LWG/lwg-defects.html#2747\" rel=\"noreferrer\">LWG issue 2747</a> corrected this for C++17.</p>\n<p>As to your first followup question, I am not a compiler writer, but my best guess is:  It is not currently legal to elide the return from a function parameter (that much I know), and I'm guessing as to why it isn't legal is that no one has figured out how to implement it, and thus no one has had the motivation to change the standard to make it legal.</p>\n<p>Second follow up:  No, C++17 does not enforce elision in this case.  The rules remain the same as for C++11 in this case, save for the fact that the redundant move from <code>for_each</code> is no longer specified.</p>\n<p>From the comments below:</p>\n<blockquote>\n<p id=\"so_43163801_43163920_0\">Why do you say it's not legal to elide the return from a function parameter?</p>\n</blockquote>\n<p>I'm referencing <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4660.pdf\" rel=\"noreferrer\">N4660</a>, which is C++17, but there is similar wording in C++98/03/11/14 ... backup, it has recently been protected.  See <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"noreferrer\">N4659</a> instead (just as good):</p>\n<p><strong>15.8.3 Copy/move elision [class.copy.elision]</strong></p>\n<blockquote>\n<ol>\n<li><p id=\"so_43163801_43163920_1\">When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class object, ...</p>\n<ul>\n<li>in a <code>return</code> statement in a function with a class return type, when the <em>expression</em> is the name of a non-volatile automatic object (other than a function parameter or a variable introduced by the <em>exception-declaration</em> of a <em>handler</em> (18.3)) with the same type (ignoring cv-qualification) as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function call\u2019s return object</li>\n</ul></li>\n</ol>\n</blockquote>\n<p>This language specifically disallows elision from function parameters.</p>\n", "LastEditorUserId": "576911", "LastActivityDate": "2017-04-02T02:53:47.003", "Score": "11", "CreationDate": "2017-04-02T02:12:01.880", "ParentId": "43163801", "CommentCount": "9", "OwnerUserId": "576911", "LastEditDate": "2017-04-02T02:53:47.003"}});