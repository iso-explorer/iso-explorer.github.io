post_cb({"bq_ids": {"n4140": {"so_34449966_34451597_1": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_34449966_34451597_1": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_34449966_34451597_1": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "34450125": {"Id": "34450125", "PostTypeId": "2", "Body": "<p>The source code is <code>efsink.c</code>, which is a C file.</p>\n<p>This code is valid in C but not valid in C++ (I think).</p>\n<p>You should use a C compiler to compile C files. C and C++ are different languages. </p>\n<p>The major C++ compilers also come bundled with a C compiler, and usually they autodetect the language based on filename (but this can be overridden with switches).</p>\n<p>You can have a project that contains some C files and some C++ files, but you must use a C compiler for the C files and use a C++ compiler for the C++ files.</p>\n", "LastActivityDate": "2015-12-24T09:07:45.073", "CommentCount": "0", "CreationDate": "2015-12-24T09:07:45.073", "ParentId": "34449966", "Score": "5", "OwnerUserId": "1505939"}, "34451597": {"Id": "34451597", "PostTypeId": "2", "Body": "<p>Quoting the (always cryptic!) standard:</p>\n<blockquote>\n<p id=\"so_34449966_34451597_0\">3.3.7  [basic.scope.class]</p>\n<p id=\"so_34449966_34451597_1\">2) A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>In the above class, following the declaration of <code>ef_addr ef_addr;</code>, the name <code>ef_addr</code> now refers to a member and not a type (within the scope of class <code>pkt_buf</code>. </p>\n<p>GCC has chosen to issue a diagnostic. clang in this situation does not. Both are correct.</p>\n<p>If you're able to change the header then I would turn off this error by surrounding the class definition with a <code>#pragma</code> to turn off the warning locally.</p>\n<p>If not, put the pragma around the inclusion of the header (i.e. as tightly scoped as possible)</p>\n", "LastActivityDate": "2015-12-24T10:50:40.343", "CommentCount": "0", "CreationDate": "2015-12-24T10:50:40.343", "ParentId": "34449966", "Score": "0", "OwnerUserId": "2015579"}, "34450164": {"Id": "34450164", "PostTypeId": "2", "Body": "<p><strike>Unfortunately I am not certain why this problem arises</strike> EDIT: This problem arises because many things are valid in C but not in C++ - for example, declaring an array with a dynamic length i.e. <code>int bob[x]</code> is valid in C but not in C++. Looking at the link, it is a C file and should be compiled with <code>gcc</code>.</p>\n<blockquote>\n<p id=\"so_34449966_34450164_0\"><code>openonload-201509/src/include/etherfabric/ef_vi.h:119:33: error: changes meaning of \u2018ef_addr\u2019 from \u2018typedef uint64_t ef_addr\u2019 [-fpermissive]</code></p>\n</blockquote>\n<p><strike>This makes the solution quite obvious if you use g++ - add <code>-fpermissive</code> to your compiler flags.</strike> NO, don't do that! Use a C compiler, or rather, use <code>gcc</code>. The code is written in C and should be treated as such.</p>\n", "LastEditorUserId": "3943306", "LastActivityDate": "2015-12-24T09:15:22.550", "Score": "0", "CreationDate": "2015-12-24T09:10:27.503", "ParentId": "34449966", "CommentCount": "2", "OwnerUserId": "3943306", "LastEditDate": "2015-12-24T09:15:22.550"}, "34449966": {"ViewCount": "111", "Body": "<p>I copy-paste some code from <a href=\"https://github.com/majek/openonload/blob/master/src/tests/ef_vi/efsink.c\" rel=\"nofollow\">here</a> and can not compile. Problem with this part:</p>\n<pre><code>struct pkt_buf {\n/* I/O address corresponding to the start of this pkt_buf struct */\nef_addr            ef_addr;\n</code></pre>\n<p>I have this error:</p>\n<pre><code>openonload-201509/src/include/etherfabric/ef_vi.h:119:33: error: changes meaning of \u2018ef_addr\u2019 from \u2018typedef uint64_t ef_addr\u2019 [-fpermissive]\ntypedef uint64_t                ef_addr;\n</code></pre>\n<p>As I understand I can not use the same name for a type and for a field.\nBut library I've linked is widely-used and it must compile.\nMay be something wrong with my compiler settings? How can I compile my code?</p>\n", "AcceptedAnswerId": "34450125", "Title": "How to compile code where field has exactly the same name as a type?", "CreationDate": "2015-12-24T08:58:10.963", "Id": "34449966", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-12-24T10:50:40.343", "Score": "0", "OwnerUserId": "93647", "Tags": "<c++>", "AnswerCount": "3"}});