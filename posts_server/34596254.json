post_cb({"bq_ids": {"n4140": {"so_34596254_34596319_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5962}}, "n3337": {"so_34596254_34596319_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5731}}, "n4659": {"so_34596254_34596319_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 7451}}}, "34596319": {"Id": "34596319", "PostTypeId": "2", "Body": "<p>Yes, each lambda expression produces a unique type ([expr.prim.lambda]/3):</p>\n<blockquote>\n<p id=\"so_34596254_34596319_0\">The type of the lambda-expression (which is also the type of the closure object) is a <strong>unique</strong>, unnamed nonunion class type \u2014 called the closure type \u2014 whose properties are described below.</p>\n</blockquote>\n<p>[emphasis added]</p>\n", "LastActivityDate": "2016-01-04T17:13:52.617", "CommentCount": "3", "CreationDate": "2016-01-04T17:13:52.617", "ParentId": "34596254", "Score": "12", "OwnerUserId": "179910"}, "34596254": {"ViewCount": "110", "Body": "<p>Every lambda should have a unique unknown type.. is it guaranteed that two lambdas into the same scope have different types?</p>\n<pre><code>int main() {\n   auto l1 = [](){};\n   auto l2 = [](){};   \n  static_assert(std::is_same&lt;decltype(l1), decltype(l2)&gt;::value == false, \"Types cannot be equal!\");\n}\n</code></pre>\n<p>This works but I'd like to know if it's guaranteed that the assert will never fire.</p>\n", "AcceptedAnswerId": "34596319", "Title": "Do lambdas have different types?", "CreationDate": "2016-01-04T17:10:51.570", "Id": "34596254", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-01-04T17:13:52.617", "Score": "7", "OwnerUserId": "3834459", "Tags": "<c++>", "AnswerCount": "1"}});