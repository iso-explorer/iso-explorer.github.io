post_cb({"46331111": {"ParentId": "46330784", "CommentCount": "0", "Body": "<p>From the C++ Standard (9.2.2.1 The this pointer)</p>\n<blockquote>\n<p id=\"so_46330784_46331111_0\">1 In the body of a non-static (9.2.1) member function, <strong>the keyword\n  this is a prvalue expression</strong> whose value is the address of the\n  object for which the function is called.</p>\n</blockquote>\n<p>and (5.3.1 Unary operators)</p>\n<blockquote>\n<p id=\"so_46330784_46331111_1\">3 The result of the unary &amp; operator is a pointer to its operand. <strong>The\n  operand shall be an lvalue</strong> or a qualified-id....</p>\n</blockquote>\n<p>To make it more clear consider the following code snippet.</p>\n<p>If for example you have a declaration</p>\n<pre><code>int x = 10;\n</code></pre>\n<p>then you may not write</p>\n<pre><code>int **p = &amp;&amp;x;\n</code></pre>\n<p>In the right expression <code>&amp;x</code> is a <code>prvalue</code> and according to the second quote from the Standard you may not apply the unary operator <code>&amp;</code> to the <code>prvalue</code>.</p>\n<p>You could write</p>\n<pre><code>int *q = &amp;x;\nint **p = &amp;q;\n</code></pre>\n<p>because <code>q</code> is <code>lvalue</code>.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "46331111", "Score": "3", "CreationDate": "2017-09-20T20:18:38.150", "LastActivityDate": "2017-09-20T20:18:38.150"}, "46331017": {"ParentId": "46330784", "CommentCount": "0", "Body": "<p>The expression <code>this</code> is an rvalue, the same way that the expressions <code>137</code> or <code>'a'</code> are, and so you can't take its address.</p>\n<p>If you want to get a pointer to a pointer to <code>this</code>, you'll need to create a new variable of the right type:</p>\n<pre><code>auto* ptr = this;\ndoSomething(&amp;ptr);\n</code></pre>\n", "OwnerUserId": "501557", "PostTypeId": "2", "Id": "46331017", "Score": "4", "CreationDate": "2017-09-20T20:12:15.620", "LastActivityDate": "2017-09-20T20:12:15.620"}, "46330784": {"CommentCount": "9", "ViewCount": "550", "PostTypeId": "1", "LastEditorUserId": "2877241", "CreationDate": "2017-09-20T19:56:25.687", "LastActivityDate": "2017-09-21T14:46:09.297", "Title": "\"expression must be an l-value or function designator\" error when taking the address of this", "AcceptedAnswerId": "46330927", "LastEditDate": "2017-09-20T20:31:06.427", "Id": "46330784", "Score": "3", "Body": "<p>I'm trying to do this in C++:</p>\n<pre><code>class Abc\n{\n   int callFunction1()\n};\n\nvoid function1(Abc** c1) {//do something}\n\nint Abc::callFunction1()\n{\n   function1(&amp;this);\n   return 0;\n}\n</code></pre>\n<p>And I get \"expression must be an l-value or function designator\" error in visual studio 2015. So I don't understand where I go wrong. To my knowledge, <code>&amp;this</code> should have the type <code>Abc**</code> right?</p>\n<p>The function definition isn't mine to change. So I can't just change the parameter type.</p>\n", "Tags": "<c++><this><lvalue><prvalue>", "OwnerUserId": "6490497", "AnswerCount": "3"}, "46330927": {"ParentId": "46330784", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The error is clear enough. Since <code>this</code> is not an lvalue, you cannot take its address. If you just want the address of the object, then just pass <code>this</code>, not <code>&amp;this</code>, and change the function declaration to:</p>\n<pre><code>void function1(Abc* c1) //To just pass a pointer\n</code></pre>\n<p>However, since you mentioned you cannot change the definition of the function, you can create a temporary variable and pass its address:</p>\n<pre><code>auto temp = this;\nfunction1(&amp;temp);\n</code></pre>\n<p>How this works:</p>\n<ol>\n<li>Since <a href=\"http://en.cppreference.com/w/cpp/language/this\" rel=\"nofollow noreferrer\"><code>this</code></a> is a <a href=\"http://en.cppreference.com/w/cpp/language/value_category#prvalue\" rel=\"nofollow noreferrer\">prvalue</a> and cannot have its address taken, you need something to point to it to turn it into an lvalue, here <code>temp</code>.</li>\n<li>Now that <code>temp</code> points to <code>this</code>, taking <code>temp</code>'s address will effectively take <code>this</code>'s address, albeit indirectly.</li>\n<li>Therefore, since you are passing the address of an lvalue to <code>function1</code>, the code compiles and works as expected.</li>\n</ol>\n", "OwnerUserId": "6525260", "LastEditorUserId": "6525260", "LastEditDate": "2017-09-21T14:46:09.297", "Id": "46330927", "Score": "6", "CreationDate": "2017-09-20T20:05:33.610", "LastActivityDate": "2017-09-21T14:46:09.297"}, "bq_ids": {"n4140": {"so_46330784_46331111_1": {"section_id": 6066, "quality": 0.8181818181818182, "length": 9}, "so_46330784_46331111_0": {"section_id": 5895, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_46330784_46331111_1": {"section_id": 5834, "quality": 0.8181818181818182, "length": 9}, "so_46330784_46331111_0": {"section_id": 5666, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_46330784_46331111_1": {"section_id": 7562, "quality": 0.8181818181818182, "length": 9}, "so_46330784_46331111_0": {"section_id": 7378, "quality": 0.9285714285714286, "length": 13}}}});