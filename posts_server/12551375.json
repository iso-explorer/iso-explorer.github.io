post_cb({"12551375": {"ViewCount": "79", "Body": "<p>From my testing, an object can still be modified after creation.</p>\n<pre><code>//Let's use this copy constructor as an example:\nFoo::Foo( const Foo&amp; F )\n{\n  var = F.var;\n}\n\n//With this code:\nFoo f1;\nconst Foo f2(f1); //No Error?\n</code></pre>\n<p>There is no initializtion list, so f2 is being modified <strong>after</strong> it was created. So if the members of Foo are still modifiable, what is being made constant?</p>\n", "AcceptedAnswerId": "12551401", "Title": "What does a constant object make constant?", "CreationDate": "2012-09-23T10:04:28.337", "Id": "12551375", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-09-23T10:40:47.847", "Score": "1", "OwnerUserId": "688707", "Tags": "<c++><object><constants>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_12551375_12551434_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 368}}, "n3337": {"so_12551375_12551434_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 358}}, "n4659": {"so_12551375_12551434_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 380}}}, "12551434": {"Id": "12551434", "PostTypeId": "2", "Body": "<p>An object's lifetime does not start until its constructor has completed (C++03 3.8 \"Object lifetime\"), so until that point there's nothing to be <code>const</code>.  In particular, C++03 12.1/4 \"Constructors\" says:</p>\n<blockquote>\n<p id=\"so_12551375_12551434_0\"><code>const</code> and <code>volatile</code> semantics (7.1.5.1) are not applied on an\n  object under construction.  Such semantics only come into effect once\n  the constructor for the most derived object (1.8) ends.</p>\n</blockquote>\n", "LastActivityDate": "2012-09-23T10:12:22.067", "CommentCount": "0", "CreationDate": "2012-09-23T10:12:22.067", "ParentId": "12551375", "Score": "1", "OwnerUserId": "12711"}, "12551401": {"Id": "12551401", "PostTypeId": "2", "Body": "<p><code>f2</code> is <strong>not</strong> being modified after being created. This line</p>\n<pre><code>const Foo f2(f1); \n</code></pre>\n<p>creates <code>f2</code>, and <code>f2</code> can modify it's own data members in the body of the constructor. Once the body of the constructor is exited, the object is fully constructed and cannot be modified.</p>\n<p>There are a couple of points worth mentioning:</p>\n<ul>\n<li>If <code>var</code> were <code>const</code>, then you would have to initialize it in the constructor's initialization list, and it could not be modified in the body of the constructor. This is independent of whether you have a <code>const</code> <code>Foo</code> instance or not.</li>\n<li>If <code>var</code> were declared <code>mutable</code>, then it would be possible to modify a <code>const Foo</code> instance via a <code>const</code> method that modifies <code>var</code>.</li>\n</ul>\n", "LastEditorUserId": "661519", "LastActivityDate": "2012-09-23T10:40:47.847", "Score": "2", "CreationDate": "2012-09-23T10:07:12.347", "ParentId": "12551375", "CommentCount": "1", "OwnerUserId": "661519", "LastEditDate": "2012-09-23T10:40:47.847"}});