post_cb({"bq_ids": {"n4140": {"so_40656857_40656857_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 139}, "so_40656857_40694056_1": {"length": 13, "quality": 1.0, "section_id": 136}, "so_40656857_40694056_0": {"length": 12, "quality": 1.0, "section_id": 110}}, "n3337": {"so_40656857_40656857_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 133}, "so_40656857_40694056_1": {"length": 13, "quality": 1.0, "section_id": 130}, "so_40656857_40694056_0": {"length": 12, "quality": 1.0, "section_id": 105}}, "n4659": {"so_40656857_40656857_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 143}, "so_40656857_40694056_1": {"length": 13, "quality": 1.0, "section_id": 140}, "so_40656857_40694056_0": {"length": 12, "quality": 1.0, "section_id": 114}}}, "40694056": {"Id": "40694056", "PostTypeId": "2", "Body": "<p>The spec says at 14.5.2p1</p>\n<blockquote>\n<p id=\"so_40656857_40694056_0\">A template can be declared within a class or class template; such a template is called a member template. </p>\n</blockquote>\n<p>And at 14.5.5p2</p>\n<blockquote>\n<p id=\"so_40656857_40694056_1\">Each class template partial specialization is a distinct template and definitions shall be provided for the members of a template partial specialization</p>\n</blockquote>\n<p>Therefore, a class template partial specialization is a template, which is natural aswell because it still has parameters that are not fixed, therefore it denotes a \"family of classes\". And templates can be declared within a class or class template. </p>\n", "LastActivityDate": "2016-11-19T14:32:55.297", "CommentCount": "5", "CreationDate": "2016-11-19T14:32:55.297", "ParentId": "40656857", "Score": "1", "OwnerUserId": "34509"}, "40692382": {"Id": "40692382", "PostTypeId": "2", "Body": "<p>The intent is that it is valid\u2014see <a href=\"http://wg21.link/n4090\" rel=\"nofollow noreferrer\">N4090</a>:</p>\n<blockquote>\n<p id=\"so_40656857_40692382_0\">Following a brief discussion of DR 1755<sup>7</sup> and DR 727<sup>8</sup> in Issaquah 2014, and based on discussion on the core-reflector<sup>9</sup><sup>10</sup><sup>11</sup>, it seems as if Core is converging on the following rules for member templates and their specializations: <strong>Partial specializations and explicit specializations can be first\n  declared at</strong> either <strong>innermost-enclosing-class scope</strong> or enclosing\n  namespace scope (recognizing that explicitly declaring specializations\n  does not constitute adding members to a class and hence can be done\n  after the closing brace).</p>\n<p id=\"so_40656857_40692382_1\"><sub>7 <a href=\"http://www.open%C2%ADstd.org/jtc1/sc22/wg21/docs/cwg_toc.html#727\" rel=\"nofollow noreferrer\">http://www.open\u00adstd.org/jtc1/sc22/wg21/docs/cwg_toc.html#727</a><br>\n  8 <a href=\"http://www.open%C2%ADstd.org/jtc1/sc22/wg21/docs/cwg_toc.html#1755\" rel=\"nofollow noreferrer\">http://www.open\u00adstd.org/jtc1/sc22/wg21/docs/cwg_toc.html#1755</a><br>\n  9 <a href=\"http://accu.org/cgi%C2%ADbin/wg21/message?wg=core&amp;msg=24366\" rel=\"nofollow noreferrer\">http://accu.org/cgi\u00adbin/wg21/message?wg=core&amp;msg=24366</a>(24033, 24290, 24309, 24368)\n  <br>\n  10 <a href=\"http://www.open%C2%ADstd.org/jtc1/sc22/wg21/docs/cwg_toc.html#1755\" rel=\"nofollow noreferrer\">http://accu.org/cgi\u00adbin/wg21/message?wg=core&amp;msg=24731</a>(24731, 24732, 24736, 24738)\n  <br>\n  11 <a href=\"http://accu.org/cgi%C2%ADbin/wg21/message?wg=core&amp;msg=25168\" rel=\"nofollow noreferrer\">http://accu.org/cgi\u00adbin/wg21/message?wg=core&amp;msg=25168</a> (25168\u00ad-25179)</br></br></br></br></sub></p>\n</blockquote>\n<p>I filed a core issue, because I feel the current wording is not clear enough; the paragraph you quoted can be interpreted to disallow in-class partial specializations.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2016-11-19T14:34:29.860", "Score": "1", "CreationDate": "2016-11-19T11:32:47.930", "ParentId": "40656857", "CommentCount": "16", "OwnerUserId": "3647361", "LastEditDate": "2016-11-19T14:34:29.860"}, "40656857": {"ViewCount": "157", "Body": "<p>According to [temp.class.spec] 5/ (emphasis mine)</p>\n<blockquote>\n<p id=\"so_40656857_40656857_0\">A class template partial specialization may be declared or redeclared\n  in any <strong>namespace scope</strong> in which the <strong>corresponding primary template</strong> may\n  be defined</p>\n</blockquote>\n<p>This would suggest that partial specialization (just like in case of explicit specialization) have to appear in the namespace scope. This is actually confirmed by the example below the paragraph:</p>\n<pre><code>template&lt;class T&gt; struct A {\n     struct C {\n          template&lt;class T2&gt; struct B { };\n     };\n};\n// partial specialization of A&lt;T&gt;::C::B&lt;T2&gt;\ntemplate&lt;class T&gt; template&lt;class T2&gt;\n     struct A&lt;T&gt;::C::B&lt;T2*&gt; { };\n\n//...\nA&lt;short&gt;::C::B&lt;int*&gt; absip; // uses partial specialization\n</code></pre>\n<p>On the other hand <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#727\" rel=\"nofollow noreferrer\">C++ Standard Core Language Active Issues No 727</a> example suggests that in-class partial specialization is well formed:</p>\n<pre><code>struct A {\n  template&lt;class T&gt; struct B;\n  template &lt;class T&gt; struct B&lt;T*&gt; { }; // well-formed\n  template &lt;&gt; struct B&lt;int*&gt; { }; // ill-formed\n};\n</code></pre>\n<p>I'm sure core issues document is correct here, but cannot find appropriate reference to confirm that. Can you help me?</p>\n", "AcceptedAnswerId": "40692382", "Title": "Why is in-class partial specialization well-formed?", "CreationDate": "2016-11-17T14:00:01.207", "Id": "40656857", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-11-17T14:01:22.463", "LastEditorUserId": "1490355", "LastActivityDate": "2016-11-19T14:34:29.860", "Score": "4", "OwnerUserId": "4324224", "Tags": "<c++><templates><language-lawyer><template-specialization><partial-specialization>", "AnswerCount": "2"}});