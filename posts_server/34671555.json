post_cb({"bq_ids": {"n4140": {"so_34671555_34672121_0": {"length": 16, "quality": 1.0, "section_id": 664}}, "n3337": {"so_34671555_34672121_0": {"length": 16, "quality": 1.0, "section_id": 654}}, "n4659": {"so_34671555_34672121_0": {"length": 16, "quality": 1.0, "section_id": 692}}}, "34671555": {"ViewCount": "72", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass myclass\n{\n\npublic:\n    void fun()\n    {\n        cout&lt;&lt;\"Having some fun\"&lt;&lt;endl;\n    }\n};\n\n\nclass spointer\n{\n    myclass * mptr;\npublic:\n    spointer(myclass * m)\n    {\n        mptr=m; \n    }\n\n    myclass * operator-&gt;()\n    {\n        return mptr;\n    }\n\n};\n\n\nint main() {\n    // your code goes here\n\n    spointer s(new myclass);\n\n    s-&gt;fun();\n    return 0;\n}\n</code></pre>\n<p>when <code>s-&gt;fun()</code> is called in <code>main</code>, <code>s-&gt;</code> would return pointer to <code>myclass</code>, but then how <code>fun()</code> is called on <code>myclass</code> object pointed by the pointer?</p>\n<hr>\n<p>edit : since <code>spointer::operator-&gt;</code> returns a pointer to <code>myclass</code>, why can one say <code>s-&gt;fun()</code>, instead of having to say <code>s-&gt;-&gt;fun()</code> or something</p>\n</hr>", "AcceptedAnswerId": "34672121", "Title": "How pointer access operator -> works?", "CreationDate": "2016-01-08T07:25:05.017", "Id": "34671555", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-01-08T07:43:31.617", "LastEditorUserId": "5455629", "LastActivityDate": "2016-01-08T08:07:14.417", "Score": "1", "OwnerUserId": "5455629", "Tags": "<c++><pointers>", "AnswerCount": "1"}, "34672121": {"Id": "34672121", "PostTypeId": "2", "Body": "<p>The C++11 standard says this about the overloaded <code>-&gt;</code> operator (13.5.6 \"Overloading/Overloaded operators/Class member access\"):</p>\n<blockquote>\n<p id=\"so_34671555_34672121_0\">An expression x-&gt;m is interpreted as <code>(x.operator-&gt;())-&gt;m</code> for a class object x of type T if <code>T::operator-&gt;()</code> exists and if the operator is selected as the best match function by the overload resolution mechanism</p>\n</blockquote>\n<p>So the member access operator (<code>-&gt;</code>) is applied to the result of the overload implementation (resulting in something that acts like your <code>s-&gt;-&gt;fun()</code> comment).  This allows for the overload to operate 'naturally' when implementing smart pointers or pointer proxies.</p>\n", "LastEditorUserId": "12711", "LastActivityDate": "2016-01-08T08:07:14.417", "Score": "6", "CreationDate": "2016-01-08T08:00:39.297", "ParentId": "34671555", "CommentCount": "1", "OwnerUserId": "12711", "LastEditDate": "2016-01-08T08:07:14.417"}});