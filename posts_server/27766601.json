post_cb({"27766740": {"ParentId": "27766601", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-01-04T14:53:13.420", "Score": "3", "LastEditorUserId": "3510483", "LastEditDate": "2015-01-05T00:46:16.287", "Id": "27766740", "OwnerUserId": "3510483", "Body": "<p>In \u00a7 7.1.6.4 [dcl.spec.auto]</p>\n<blockquote>\n<p id=\"so_27766601_27766740_0\">If the placeholder is the decltype(auto) type-specifier, the declared\n  type of the variable or return type of the function <strong>shall be the\n  placeholder alone</strong>. The type deduced for the variable or return type is\n  determined as described in 7.1.6.2, as though the initializer had been\n  the operand of the decltype.</p>\n</blockquote>\n<p>So this is allowed :</p>\n<pre><code>decltype(auto) a = 100;\n</code></pre>\n<p>But not this:</p>\n<pre><code>decltype(auto)&amp; a = 100;\n</code></pre>\n<p>Or this :</p>\n<pre><code>decltype(auto)&amp;&amp; a = 100;\n</code></pre>\n<p>This makes sense, since one of the idea behind <code>decltype(auto)</code> is to preserve reference-ness during type deduction (i.e. use <code>decltype</code> type deduction, instead of template/auto type deduction)</p>\n<hr>\n<p>The standard gives us examples as how references are deduced by <code>decltype(auto)</code> :</p>\n<pre><code>int i;\nint&amp;&amp; f();\nauto x3a = i;                  // decltype(x3a) is int\ndecltype(auto) x3d = i;        // decltype(x3d) is int\nauto x4a = (i);                // decltype(x4a) is int\ndecltype(auto) x4d = (i);      // decltype(x4d) is int&amp;\nauto x5a = f();                // decltype(x5a) is int\ndecltype(auto) x5d = f();      // decltype(x5d) is int&amp;&amp;\nauto x6a = { 1, 2 };           // decltype(x6a) is std::initializer_list&lt;int&gt;\ndecltype(auto) x6d = { 1, 2 }; // error, { 1, 2 } is not an expression\nauto *x7a = &amp;i;                // decltype(x7a) is int*\ndecltype(auto)*x7d = &amp;i;       // error, declared type is not plain decltype(auto)\n</code></pre>\n</hr>", "LastActivityDate": "2015-01-05T00:46:16.287"}, "27766601": {"CommentCount": "0", "AcceptedAnswerId": "27766740", "CreationDate": "2015-01-04T14:37:40.867", "LastActivityDate": "2015-01-05T00:46:16.287", "PostTypeId": "1", "ViewCount": "139", "FavoriteCount": "1", "Title": "Why cannot form reference to 'decltype(auto)'", "Id": "27766601", "Score": "4", "Body": "<pre><code>int main(){\n    decltype(auto)&amp;&amp; a = 100;\n}\n</code></pre>\n<p>The above code, an error in the GCC and Clang.</p>\n<pre><code>int main(){\n    decltype(int)&amp;&amp; a = 100;\n}\n</code></pre>\n<p>This code correct.</p>\n<p>In N4296,</p>\n<p>In the \u00a7 8.3.2/6</p>\n<blockquote>\n<p id=\"so_27766601_27766601_0\">If a typedef (7.1.3), a type template-parameter (14.3.1), or a decltype-specifier (7.1.6.2) denotes a type TR\n  that is a reference to a type T, an attempt to create the type \u201clvalue reference to cv TR\u201d creates the type\n  \u201clvalue reference to T\u201d, while an attempt to create the type \u201crvalue reference to cv TR\u201d creates the type TR.</p>\n</blockquote>\n<p><em>decltype-specifier</em> in \u00a7 7.1.6.2</p>\n<blockquote>\n<p id=\"so_27766601_27766601_1\">decltype-specifier:<br>\n  \u3000\u3000decltype ( expression )<br>\n  \u3000\u3000decltype ( auto )</br></br></p>\n</blockquote>\n<p>I think <em>\u00a7 8.3.2/6</em> is a problem with the wording.</p>\n<p>Why reference to <em>decltype(auto)</em> is not allowed. \nPlease tell me the wording of the relevant standard.\nSorry in poor English.\nThank you.</p>\n", "Tags": "<c++><c++14><decltype>", "OwnerUserId": "4417390", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27766601_27766740_0": {"section_id": 5451, "quality": 0.9230769230769231, "length": 24}, "so_27766601_27766601_0": {"section_id": 3223, "quality": 0.7857142857142857, "length": 22}}, "n3337": {"so_27766601_27766601_0": {"section_id": 3097, "quality": 0.8928571428571429, "length": 25}}, "n4659": {"so_27766601_27766740_0": {"section_id": 6890, "quality": 0.5384615384615384, "length": 14}, "so_27766601_27766601_0": {"section_id": 3980, "quality": 0.7857142857142857, "length": 22}}}});