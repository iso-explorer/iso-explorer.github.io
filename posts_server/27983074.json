post_cb({"27983235": {"ParentId": "27983074", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It's legal, for the simple reason that there's no rule against it anywhere in the standard. The effect of <code>typedef</code> is only defined as what effect it has on names defined with the <code>typedef</code> specifier, so when there are no names defined with that specifier, the behaviour is well-defined: <code>typedef</code> simply has no effect.</p>\n<p>The grammar in general does not require any declarators for a <em>simple-declaration</em>, and you probably already know this, since you would not have been surprised to see <code>enum AttributeFormat_e { ... };</code> without the <code>typedef</code>. The productions are</p>\n<blockquote>\n<p id=\"so_27983074_27983235_0\"><em>simple-declaration</em>:<br>\n  \u00a0 \u00a0 <em>decl-specifier-seq<sub>opt</sub></em> <em>init-declarator-list<sub>opt</sub></em> <code>;</code><br>\n  \u00a0 \u00a0 <em>attribute-specifier-seq</em> <em>decl-specifier-seq<sub>opt</sub></em> <em>init-declarator-list</em> <code>;</code></br></br></p>\n</blockquote>\n<p>As long as no <em>attribute-specifier-seq</em> is present in a <em>simple-declaration</em>, the <em>init-declarator-list</em> is optional.</p>\n<p><code>typedef int;</code> would be invalid, as would <code>int;</code> without the <code>typedef</code>, but that's a different rule: the rule there is that a declaration has to declare something. That rule doesn't apply to what's in your question, because that declaration does declare something. More precisely, C++11 [dcl.dcl]p3:</p>\n<blockquote>\n<p id=\"so_27983074_27983235_1\">In a <em>simple-declaration</em>, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (Clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaborated-type-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>. [...]</p>\n</blockquote>\n<p>The code in the question is declaring an enumeration, so this rule is not violated.</p>\n<p><code>static enum E { x };</code> would be invalid, but that's another different rule: C++11 [dcl.stc]p1:</p>\n<blockquote>\n<p id=\"so_27983074_27983235_2\">[...] If a <em>storage-class-specifier</em> appears in a <em>decl-specifier-seq</em>, there can be no <code>typedef</code> specifier in the same <em>decl-specifier-seq</em> and the <em>init-declarator-list</em> of the declaration shall not be empty (except for an anonymous union declared in a named namespace or in the global namespace, which shall be declared <code>static</code> (9.5)). [...]</p>\n</blockquote>\n<p><code>const enum E { x };</code> would also be invalid, but that's a third different rule: C++11 [dcl.type.cv]p1:</p>\n<blockquote>\n<p id=\"so_27983074_27983235_3\">[...] If a <em>cv-qualifier</em> appears in a <em>decl-specifier-seq</em>, the <em>init-declarator-list</em> of the declaration shall not be empty. [...]</p>\n</blockquote>\n<p>There is simply no such rule anywhere for <code>typedef</code>.</p>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2015-01-16T12:29:45.070", "Id": "27983235", "Score": "11", "CreationDate": "2015-01-16T11:43:38.823", "LastActivityDate": "2015-01-16T12:29:45.070"}, "27983074": {"CommentCount": "5", "AcceptedAnswerId": "27983235", "CreationDate": "2015-01-16T11:34:23.430", "LastActivityDate": "2015-01-16T12:29:45.070", "PostTypeId": "1", "ViewCount": "363", "FavoriteCount": "2", "Title": "Is this redundant \"typedef\" strictly legal?", "Id": "27983074", "Score": "1", "Body": "<p>I found the following declaration in v0.9.2 of the ACE Radius library:</p>\n<pre><code>// Types of attribute data\ntypedef enum AttributeFormat_e\n{\n    E_ATTR_FORMAT_INTEGER,\n    E_ATTR_FORMAT_IP_ADDRESS,\n    E_ATTR_FORMAT_STRING,\n    E_ATTR_FORMAT_VENDOR_SPECIFIC,\n    E_ATTR_FORMAT_USER_PASSWORD,\n    E_ATTR_FORMAT_CHAP_PASSWORD\n};\n</code></pre>\n<p>That leading <code>typedef</code> is completely meaningless and should not be present.<br>\nIndeed, GCC emits the following diagnostic:</br></p>\n<blockquote>\n<p id=\"so_27983074_27983074_0\">/usr/include/ace-radius/RadiusAttribute.h:597: warning: \u2018typedef\u2019 was ignored in this declaration</p>\n</blockquote>\n<p>Now, this is ultimately harmless, despite being a bizarre sort of half-meaningful half-C declaration in a file that otherwise may only be parsed as C++ (the declaration is found as a <code>private</code> member in a <code>class</code>).</p>\n<p>But purely out of curiosity I wanted to know whether this is strictly compliant, or strictly ill-formed, and couldn't quite tell from the standard.</p>\n<p>Is this leading <code>typedef</code> legal? Or is GCC being permissive?</p>\n", "Tags": "<c++><c++11><language-lawyer><c++14><c++03>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27983074_27983235_3": {"section_id": 5430, "quality": 1.0, "length": 6}, "so_27983074_27983235_2": {"section_id": 5391, "quality": 1.0, "length": 22}, "so_27983074_27983235_1": {"section_id": 5381, "quality": 1.0, "length": 18}}, "n3337": {"so_27983074_27983235_3": {"section_id": 5225, "quality": 1.0, "length": 6}, "so_27983074_27983235_2": {"section_id": 5185, "quality": 1.0, "length": 22}, "so_27983074_27983235_1": {"section_id": 5175, "quality": 1.0, "length": 18}}, "n4659": {"so_27983074_27983235_3": {"section_id": 6858, "quality": 1.0, "length": 6}, "so_27983074_27983235_1": {"section_id": 6805, "quality": 1.0, "length": 18}, "so_27983074_27983235_2": {"section_id": 6817, "quality": 1.0, "length": 22}}}});