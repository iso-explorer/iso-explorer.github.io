post_cb({"bq_ids": {"n4140": {"so_19995534_19995691_3": {"length": 34, "quality": 0.6415094339622641, "section_id": 2710}, "so_19995534_19995691_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 2711}, "so_19995534_19995691_1": {"length": 5, "quality": 1.0, "section_id": 2707}}, "n3337": {"so_19995534_19995691_3": {"length": 34, "quality": 0.6415094339622641, "section_id": 2671}, "so_19995534_19995691_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 2672}, "so_19995534_19995691_1": {"length": 5, "quality": 1.0, "section_id": 2669}}, "n4659": {"so_19995534_19995691_3": {"length": 32, "quality": 0.6037735849056604, "section_id": 3450}, "so_19995534_19995691_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 3451}, "so_19995534_19995691_1": {"length": 5, "quality": 1.0, "section_id": 3447}}}, "19995691": {"Id": "19995691", "PostTypeId": "2", "Body": "<p>Yes. If it fails to copy it will throw in the constructing thread.</p>\n<blockquote>\n<p id=\"so_19995534_19995691_0\"><em>\u00a730.3.1.2 thread constructors</em></p>\n<p id=\"so_19995534_19995691_1\">template  explicit thread(F&amp;&amp; f, Args&amp;&amp;...\n  args); </p>\n<p id=\"so_19995534_19995691_2\"><em>Requires:</em> F and each Ti in Args shall satisfy the\n  MoveConstructible requirements. INVOKE (DECAY_- COPY (\n  std::forward(f)), DECAY_COPY (std::forward(args))...)\n  (20.8.2) shall be a valid expression. 4 </p>\n<p id=\"so_19995534_19995691_3\"><em>Effects:</em> Constructs an object\n  of type thread. The new thread of execution executes INVOKE (DECAY_-\n  COPY ( std::forward(f)), DECAY_COPY (std::forward(args))...)\n  <strong>with the calls to DECAY_COPY being evaluated in the constructing thread</strong>. Any return value from this invocation is ignored. [ Note:\n  <strong>This implies that any exceptions not thrown from the invocation of the copy of f will be thrown in the constructing thread, not the new\n  thread</strong>. \u2014end note ] If the invocation of INVOKE (DECAY_COPY (\n  std::forward(f)), DECAY_COPY (std::forward(args))...)\n  terminates with an uncaught exception, std::terminate shall be called.</p>\n<p id=\"so_19995534_19995691_4\"><em>Synchronization:</em> <strong>The completion of the invocation of the\n  constructor synchronizes with the beginning of the invocation of the\n  copy of f.</strong></p>\n</blockquote>\n", "LastActivityDate": "2013-11-15T07:26:05.153", "Score": "4", "CreationDate": "2013-11-15T07:26:05.153", "ParentId": "19995534", "CommentCount": "0", "OwnerUserId": "346804"}, "19995661": {"Id": "19995661", "PostTypeId": "2", "Body": "<p>Yes, if the arguments cannot be copied, to storage available to the new thread, it will throw an exception.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/thread/thread/thread\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/thread/thread/thread</a></p>\n<blockquote>\n<p id=\"so_19995534_19995661_0\">Any exceptions thrown during evaluation and copying/moving of the\n  arguments are thrown in the current thread, not the new thread.</p>\n</blockquote>\n", "LastEditorUserId": "2958164", "LastActivityDate": "2013-11-15T19:18:58.127", "Score": "3", "CreationDate": "2013-11-15T07:24:37.947", "ParentId": "19995534", "CommentCount": "4", "LastEditDate": "2013-11-15T19:18:58.127", "OwnerUserId": "2958164"}, "19995534": {"ViewCount": "507", "Body": "<p>When parameters are passed to <code>std::thread()</code>, does the thread from which the new thread is being spawned wait until all the parameters are completely copied into new thread local storage?</p>\n<p>Simple example:</p>\n<pre><code>void f()\n{  \n  int array[10];\n  ........ //done something with array  \n  std::thread th(someF, array); //assuming that someF accepts int[]  \n  th.detach();  \n}\n</code></pre>\n<p>Should I automatically assume that all the data is safely copied before <code>f()</code> has ended? \nOne of the scenarios I see, assuming <code>f()</code> doesn't wait, and plows full steam ahead, is that <code>th</code> is attempting to copy <code>array</code> that is being in destroyed.</p>\n", "AcceptedAnswerId": "19995691", "Title": "Lifetime of std::thread arguments", "CreationDate": "2013-11-15T07:16:20.433", "Id": "19995534", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-11-16T00:18:52.083", "LastEditorUserId": "2778484", "LastActivityDate": "2013-11-16T00:18:52.083", "Score": "7", "OwnerUserId": "465292", "Tags": "<c++><multithreading><c++11><stl>", "AnswerCount": "2"}});