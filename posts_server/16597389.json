post_cb({"16597390": {"Id": "16597390", "PostTypeId": "2", "Body": "<h2>No!</h2>\n<p>Superficially they are similar (beyond the fact that abstract classes do have definitions whereas incomplete types do not):</p>\n<blockquote>\n<p id=\"so_16597389_16597390_0\"><code>[n3690: 3.9/5]:</code> <em>[..]</em> <strong>Objects shall not be defined to have an incomplete type.</strong></p>\n<p id=\"so_16597389_16597390_1\"><code>[n3690: 10.4/2]:</code> An abstract class is a class that can be used only as a base class of some other class; <strong>no objects of an abstract class can be created except as subobjects of a class derived from it.</strong> <em>[..]</em></p>\n<p id=\"so_16597389_16597390_2\"><code>[n3690: 10.4/3]:</code> An abstract class shall not be used as a parameter type, as a function return type, or as the type of an explicit conversion. Pointers and references to an abstract class can be declared.</p>\n</blockquote>\n<p>However, the standard in fact makes clear that the two concepts are unrelated:</p>\n<blockquote>\n<p id=\"so_16597389_16597390_3\"><code>[n3690: 3.9/5]:</code> <strong>A class that has been declared but not defined</strong>, an enumeration type in certain contexts (7.2), or an array of unknown size or of incomplete element type, <strong>is an incompletely-defined object type</strong>. <strong>Incompletely-defined object types</strong> and the void types <strong>are incomplete types</strong> (3.9.1). Objects shall not be defined to have an incomplete type.</p>\n</blockquote>\n<p>Your abstract class has a definition, and therefore cannot be considered to be an <em>incomplete type</em>.</p>\n<hr>\n<p><sup>N3690 is the C++14 Committee Draft.</sup></p>\n</hr>", "LastActivityDate": "2013-05-16T20:59:36.330", "CommentCount": "6", "CreationDate": "2013-05-16T20:59:36.330", "ParentId": "16597389", "Score": "15", "OwnerUserId": "560648"}, "16597389": {"ViewCount": "731", "Body": "<p>Incomplete types cannot be instantiated, and abstract classes (that is, those with pure virtual member functions) also cannot be instantiated.</p>\n<pre><code>struct incomplete_type;\n\nstruct abstract_class\n{\n   virtual void foo() = 0;\n};\n</code></pre>\n<p>By any chance are abstract classes themselves considered to be <em>incomplete types</em>?</p>\n", "AcceptedAnswerId": "16597390", "Title": "Are C++ abstract classes incomplete types?", "CreationDate": "2013-05-16T20:59:36.330", "Id": "16597389", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-07-02T11:34:09.493", "LastEditorUserId": "46642", "LastActivityDate": "2013-07-02T11:34:09.493", "Score": "11", "OwnerUserId": "560648", "Tags": "<c++><language-lawyer><c++14>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16597389_16597390_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 7020}, "so_16597389_16597390_1": {"length": 18, "quality": 0.9, "section_id": 7019}, "so_16597389_16597390_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7203}, "so_16597389_16597390_3": {"length": 30, "quality": 0.9090909090909091, "section_id": 7203}}, "n3337": {"so_16597389_16597390_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 6766}, "so_16597389_16597390_1": {"length": 18, "quality": 0.9, "section_id": 6765}, "so_16597389_16597390_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6947}, "so_16597389_16597390_3": {"length": 26, "quality": 0.7878787878787878, "section_id": 6947}}, "n4659": {"so_16597389_16597390_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 8517}, "so_16597389_16597390_1": {"length": 18, "quality": 0.9, "section_id": 8516}, "so_16597389_16597390_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 8712}, "so_16597389_16597390_3": {"length": 25, "quality": 0.7575757575757576, "section_id": 8712}}}});