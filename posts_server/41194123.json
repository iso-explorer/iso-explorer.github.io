post_cb({"41194123": {"CommentCount": "7", "ViewCount": "80", "CreationDate": "2016-12-17T00:09:52.047", "LastActivityDate": "2016-12-18T00:14:01.370", "Title": "Can't delete only const overload of method?", "AcceptedAnswerId": "41204286", "PostTypeId": "1", "Id": "41194123", "Score": "2", "Body": "<p>At least with unary <code>&amp;</code> and unary <code>-</code> it appears GCC will only let you delete both the non-const and const version of an operator or none (it probably affects binary operators but I haven't checked). As described in the comments below, although I can successfully overload based on const, I cannot individually delete the const or non-const overload without running into a compile error. Is this behavior standard compliant? It seems counterintuitive.</p>\n<p>Tested with GCC 5.4.0.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    // These both being defined at the same time is fine,\n    // and whether or not x is const as expected will change\n    // which overload you get.\n\n    A* operator&amp;() {\n        std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl;\n        return this;\n    }\n\n    const A* operator&amp;() const {\n        std::cout &lt;&lt; \"world\" &lt;&lt; std::endl;\n        return this;\n    }\n\n\n\n    // assuming both definitions above are commented out,\n    // regardless of whether or not x is const\n    // either one of these lines being present\n    // will make the example not compile!\n\n    // A* operator&amp;() = delete;\n    // const A* operator&amp;() const = delete;\n\n\n\n    // Finally if you have the const version defined and the non-const version deleted\n    // or vice versa, it will compile as long as the one that you have defined\n    // matches the constness of x.\n};\n\nint main(int argc, char** argv)\n{\n    A x;\n    std::cout &lt;&lt; &amp;x &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><operator-overloading><overloading>", "OwnerUserId": "50385", "AnswerCount": "1"}, "41204286": {"ParentId": "41194123", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The built-in <code>operator&amp;</code> does not participate in overload resolution (<a href=\"http://eel.is/c++draft/over.match.oper#3.3\" rel=\"nofollow noreferrer\">[over.match.oper]/3.3</a>).</p>\n<blockquote>\n<p id=\"so_41194123_41204286_0\">For the <code>operator ,</code>, the <strong><code>unary operator &amp;</code></strong>, or the <code>operator -&gt;</code>, the built-in candidates set is empty.</p>\n</blockquote>\n<p>Say you declare as deleted the overload below</p>\n<pre><code>const A* operator&amp;() const = delete;\n</code></pre>\n<p>Regardless of whether you're trying to take the address of a <code>const</code> or non-<code>const</code> <code>A</code>, the declaration above is the only viable candidate, resulting in a compilation error.</p>\n<p>If you comment it out, then the built-in <code>operator&amp;</code> is found as per <a href=\"http://eel.is/c++draft/over.match.oper#9\" rel=\"nofollow noreferrer\">[over.match.oper]/9</a>.</p>\n<blockquote>\n<p id=\"so_41194123_41204286_1\">If the operator is the <code>operator ,</code>, the <strong><code>unary operator &amp;</code></strong>, or the <code>operator -&gt;</code>, <strong>and there are no viable functions, then the operator is assumed to be the built-in operator</strong> and interpreted according to Clause [expr].</p>\n</blockquote>\n<p>Now, if you declare as deleted the non-<code>const</code> overload only</p>\n<pre><code>A* operator&amp;() = delete;\n</code></pre>\n<p>this cannot be called on a <code>const A</code> object, so it won't be a viable candidate and the built-in <code>operator&amp;</code>  will be found.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0f52693994f416ed\" rel=\"nofollow noreferrer\">Live demo</a></p>\n<hr>\n<p>When dealing with a class that overloads <code>operator&amp;</code>, you can use <a href=\"http://en.cppreference.com/w/cpp/memory/addressof\" rel=\"nofollow noreferrer\"><code>std::addressof</code></a> to get the address of an instance.</p>\n</hr>", "OwnerUserId": "241631", "LastEditorUserId": "241631", "LastEditDate": "2016-12-18T00:14:01.370", "Id": "41204286", "Score": "4", "CreationDate": "2016-12-18T00:05:37.337", "LastActivityDate": "2016-12-18T00:14:01.370"}, "bq_ids": {"n4140": {"so_41194123_41204286_0": {"section_id": 584, "quality": 0.8888888888888888, "length": 8}, "so_41194123_41204286_1": {"section_id": 590, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_41194123_41204286_0": {"section_id": 574, "quality": 0.8888888888888888, "length": 8}, "so_41194123_41204286_1": {"section_id": 580, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_41194123_41204286_1": {"section_id": 613, "quality": 0.9411764705882353, "length": 16}, "so_41194123_41204286_0": {"section_id": 607, "quality": 0.8888888888888888, "length": 8}}}});