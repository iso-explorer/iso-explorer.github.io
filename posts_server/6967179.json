post_cb({"bq_ids": {"n4140": {"so_6967179_6967246_3": {"length": 7, "quality": 0.875, "section_id": 3919}, "so_6967179_6967246_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 3919}, "so_6967179_6967246_0": {"length": 39, "quality": 0.9069767441860465, "section_id": 3919}}, "n3337": {"so_6967179_6967246_3": {"length": 7, "quality": 0.875, "section_id": 3779}, "so_6967179_6967246_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 3779}, "so_6967179_6967246_0": {"length": 39, "quality": 0.9069767441860465, "section_id": 3779}}, "n4659": {"so_6967179_6967246_3": {"length": 7, "quality": 0.875, "section_id": 4805}, "so_6967179_6967246_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 4805}, "so_6967179_6967246_0": {"length": 36, "quality": 0.8372093023255814, "section_id": 4805}}}, "6967179": {"ViewCount": "1045", "Body": "<p>I decided to do a test with computed gotos and local statics</p>\n<pre><code>void g() { std::cout &lt;&lt; \"init \"; } \nvoid f() { \n  int z = 0; \n  y: z++; \n  static int x = \n    (g(), z == 1 ? ({ goto *&amp;&amp;y; 0; }) : 0); \n}\n\nint main() { f(); std::cout &lt;&lt; \"!\"; f(); }\n</code></pre>\n<p>I wanted to see whether the output would be \"init init !\". But to my surprise I didn't get that output, but instead GCC handled it gracefully, outputting at runtime:</p>\n<pre><code>init terminated by recursive_init_error: exception\n</code></pre>\n<p>What's that exception? Is it a Standard exception? C++03 or C++0x? Thanks for any explanation.</p>\n", "AcceptedAnswerId": "6967246", "Title": "What's a \"recursive_init_error\" exception?", "CreationDate": "2011-08-06T13:39:39.020", "Id": "6967179", "CommentCount": "4", "LastEditDate": "2015-05-04T10:23:31.167", "PostTypeId": "1", "LastEditorUserId": "635608", "LastActivityDate": "2015-05-04T10:23:31.167", "Score": "8", "OwnerUserId": "34509", "Tags": "<c++><exception><initialization><g++>", "AnswerCount": "1"}, "6967246": {"Id": "6967246", "PostTypeId": "2", "Body": "<p>It's caused by what is stated in C++03 \u00a76.7/4:</p>\n<blockquote>\n<p id=\"so_6967179_6967246_0\">... Otherwise such an object is initialized the first time control passes through its declaration; such an object is considered initialized upon the completion of its initialization. If the initialization exits by throwing an exception, the initialization is not complete, so it will be tried again the next time control enters the declaration. If control re-enters the declaration (recursively) while the object is being initialized, the behavior is undefined. [Example:</p>\n</blockquote>\n<pre><code>int foo(int i)\n{\n  static int s = foo(2*i);    // recursive call \u2013 undefined\n  return i+1;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_6967179_6967246_1\">--end example]</p>\n</blockquote>\n<p>GCC throws an exception in that case. Here's <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-api-4.5/a00069.html\" rel=\"nofollow\">some documentation</a> about it.</p>\n<hr>\n<p>C++11 update: The following wording was added in C++11, just before the text about the recursive case:</p>\n<blockquote>\n<p id=\"so_6967179_6967246_2\">If control enters the declaration concurrently while the variable is being initialized, the concurrent execution shall wait for completion of the initialization.<sup>88</sup></p>\n<p id=\"so_6967179_6967246_3\"><sub><sup>88</sup> The implementation must not introduce any deadlock around execution of the initializer.</sub></p>\n</blockquote>\n<p>Doesn't change the problem here, but does make this construct thread-safe when there is no recursion.</p>\n</hr>", "LastEditorUserId": "635608", "LastActivityDate": "2013-09-12T13:25:15.227", "Score": "16", "CreationDate": "2011-08-06T13:51:23.253", "ParentId": "6967179", "CommentCount": "2", "OwnerUserId": "635608", "LastEditDate": "2013-09-12T13:25:15.227"}});