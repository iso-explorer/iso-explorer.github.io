post_cb({"24438336": {"ParentId": "24437396", "CommentCount": "3", "Body": "<p>The wording concerning use of <code>ATOMIC_FLAG_INIT</code> has changed since N3337 to N3936 (the current C++14 draft). The former shows a possible usage, in a copy-initialization context, of the <code>ATOMIC_FLAG_INIT</code> macro in an example, which are non-normative, and doesn't mention anything about uses within other initialization contexts.</p>\n<p>N3936 clarifies the usage, and no longer lists the copy-initialization usage as an example, but as part of the description itself.</p>\n<p><em>\u00a729.7/4 [atomics.flag]</em></p>\n<blockquote>\n<p id=\"so_24437396_24438336_0\">The macro <code>ATOMIC_FLAG_INIT</code> shall be defined in such a way that it can be used to\n  initialize an object of type <code>atomic_flag</code> to the clear state. The macro can be used in \n  the form:<br/></p>\n<pre><code> atomic_flag guard = ATOMIC_FLAG_INIT;\n</code></pre>\n<p id=\"so_24437396_24438336_1\"><strong>It is unspecified whether the macro can be used in other initialization contexts</strong>. For a complete static-duration object, that initialization shall be static. Unless initialized with <code>ATOMIC_FLAG_INIT</code>, it is unspecified whether an <code>atomic_flag</code> object has an initial state of set or clear.</p>\n</blockquote>\n<p>The rationale for these changes is discussed <a href=\"http://wg21.cmeerw.net/lwg/issue2159\">here</a>.</p>\n<p>So you're right that using the macro in the member initializer list cannot be relied upon. The solution is to use a non-static data member initializer, or <em>brace-or-equal-initializer</em>, to initialize the <code>atomic_flag</code>. Then it will be initialized in a copy initialization context.</p>\n<pre><code>struct Foo\n{\n  std::atomic_flag flag = ATOMIC_FLAG_INIT;\n};\n</code></pre>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "24438336", "Score": "8", "CreationDate": "2014-06-26T19:10:35.027", "LastActivityDate": "2014-06-26T19:10:35.027"}, "24437396": {"CommentCount": "0", "CreationDate": "2014-06-26T18:11:31.350", "PostTypeId": "1", "AcceptedAnswerId": "24438336", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-26T20:23:55.763", "LastEditDate": "2017-05-23T12:17:04.823", "ViewCount": "1630", "FavoriteCount": "1", "Title": "std::atomic_flag as member variable", "Id": "24437396", "Score": "8", "Body": "<p>What is a safe way to initialize an <code>std::atomic_flag</code> in a class constructor?</p>\n<p><a href=\"https://stackoverflow.com/questions/19657222/how-do-i-initialise-an-atomic-flag-variable-if-it-is-a-member-of-a-class\"><strong>This question</strong></a> seems to be asking the same question I'm asking - except here the asker is complaining about a compiler problem.</p>\n<p>My question relates to the C++ standard itself.  According to <a href=\"http://en.cppreference.com/w/cpp/atomic/ATOMIC_FLAG_INIT\" rel=\"nofollow noreferrer\"><strong>this site</strong></a>, initializing an <code>std::atomic_flag</code> using constructor initializer syntax is unspecified.</p>\n<pre><code>std::atomic_flag static_flag = ATOMIC_FLAG_INIT; // static initialization,\n// guaranteed to be available during dynamic initialization of static objects.\n\nint main()\n{\n    std::atomic_flag automatic_flag = ATOMIC_FLAG_INIT; // guaranteed to work\n//    std::atomic_flag another_flag(ATOMIC_FLAG_INIT); // unspecified\n}\n</code></pre>\n<p>Is this information correct?  If so, I assume that:</p>\n<pre><code>struct Foo\n{\n  Foo() : flag(ATOMIC_FLAG_INIT)\n  { }\n\n  std::atomic_flag flag;\n};\n</code></pre>\n<p>...is also unspecified.  So, does this mean that we can't use an <code>std::atomic_flag</code> as a member variable of a class?  Or is it safe if we simple call <code>std::atomic_flag::clear()</code> from within a class constructor?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2923952", "AnswerCount": "2"}, "24437665": {"ParentId": "24437396", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-06-26T18:28:45.143", "Score": "2", "LastEditorUserId": "388520", "LastEditDate": "2014-06-26T20:23:55.763", "Id": "24437665", "OwnerUserId": "388520", "Body": "<p>The actual text of the C++11 standard (well, <a href=\"http://www.compsci.hunter.cuny.edu/~sweiss/resources/c11standard.pdf\" rel=\"nofollow\">N1570</a>)'s definition of <code>ATOMIC_FLAG_INIT</code> is</p>\n<blockquote>\n<h2>7.17.8 Atomic flag type and operations</h2>\n<p id=\"so_24437396_24437665_0\">...</p>\n<p id=\"so_24437396_24437665_1\">The macro <code>ATOMIC_FLAG_INIT</code> may be used to initialize an <code>atomic_flag</code> to the\n  clear state.  An <code>atomic_flag</code> that is not explicitly initialized with\n  <code>ATOMIC_FLAG_INIT</code> is initially in an indeterminate state.</p>\n<p id=\"so_24437396_24437665_2\">EXAMPLE</p>\n<pre><code>   atomic_flag guard = ATOMIC_FLAG_INIT;\n</code></pre>\n</blockquote>\n<p>The C++ standard uses the word <em>initialize</em> to refer generally to all the various ways that a variable can be given an initial value.  As there is no further wording to the contrary, I read the intent as being that <code>atomic_flag guard(ATOMIC_FLAG_INIT)</code>, and use of <code>ATOMIC_FLAG_INIT</code> in constructor initializer lists, are also valid and not unspecified.  I think the site you quote is reading too much into the single example.  Examples in this standard are not normative, and in particular, that an example shows one way to do something does <em>not</em> mean that that is the only acceptable way to do it.</p>\n", "LastActivityDate": "2014-06-26T20:23:55.763"}, "bq_ids": {"n4140": {"so_24437396_24438336_1": {"section_id": 1221, "quality": 0.9166666666666666, "length": 22}, "so_24437396_24438336_0": {"section_id": 1221, "quality": 0.8823529411764706, "length": 15}, "so_24437396_24437665_1": {"section_id": 1221, "quality": 0.6, "length": 9}}, "n3337": {"so_24437396_24438336_1": {"section_id": 1219, "quality": 0.5833333333333334, "length": 14}, "so_24437396_24438336_0": {"section_id": 1219, "quality": 0.7058823529411765, "length": 12}}, "n4659": {"so_24437396_24438336_1": {"section_id": 1310, "quality": 0.9166666666666666, "length": 22}, "so_24437396_24438336_0": {"section_id": 1310, "quality": 0.8823529411764706, "length": 15}, "so_24437396_24437665_1": {"section_id": 1310, "quality": 0.6, "length": 9}}}});