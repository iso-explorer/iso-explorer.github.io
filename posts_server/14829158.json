post_cb({"14829308": {"Id": "14829308", "PostTypeId": "2", "Body": "<p>A function pointer can be NULL and you may assign NULL to it. Have a look <a href=\"http://ideone.com/5COrgw\" rel=\"nofollow\">here</a> for instance:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct S { void (*f)(); };\n\nint main()\n{\n    S s = S();\n    s.f = NULL;\n    return 0;\n}\n</code></pre>\n<p>I believe the way you call the constructor of the structure(with <code>()</code>), f will be NULL.</p>\n", "LastActivityDate": "2013-02-12T09:29:02.420", "Score": "3", "CreationDate": "2013-02-12T09:29:02.420", "ParentId": "14829158", "CommentCount": "0", "OwnerUserId": "812912"}, "14829158": {"ViewCount": "3060", "Body": "<p>What is the default value of a function pointer in C++? (Apparently it can't be <code>NULL</code>, so what is it?)</p>\n<p>How is this program supposed to behave and why?</p>\n<pre><code>struct S { void (*f)(); };\n\nint main()\n{\n    S s = S();\n    s.f();   // What is the value of s.f?\n}\n</code></pre>\n", "AcceptedAnswerId": "14829262", "Title": "Default value of a function pointer in C++", "CreationDate": "2013-02-12T09:20:50.123", "Id": "14829158", "CommentCount": "23", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-11-22T15:01:16.050", "Score": "6", "OwnerUserId": "541686", "Tags": "<c++><function-pointers>", "AnswerCount": "5"}, "14829225": {"Id": "14829225", "PostTypeId": "2", "Body": "<p>In C++ (and C), pointers (regardless of type) do not have a default value <em>per se</em>; they take what ever happens to be in memory at the time. However, they do have a default initialised value of <code>NULL</code>.</p>\n<h3>Default Initialisation</h3>\n<p>When you don't explicitly define a constructor, C++ will call the default initialiser on each member variable, which will initialise pointers to <code>0</code>. However, if you define a constructor, but do not set the value for a pointer, it does not have a default value. The behaviour is the same for integers, floats and doubles.</p>\n<p><strong>Aside</strong></p>\n<pre><code>int main()\n{\n    S s = S();\n    s.f();   // &lt;-- This is calling `f`, not getting the pointer value.\n}\n</code></pre>\n", "LastEditorUserId": "961353", "LastActivityDate": "2013-02-12T09:32:59.353", "Score": "0", "CreationDate": "2013-02-12T09:24:43.467", "ParentId": "14829158", "CommentCount": "4", "LastEditDate": "2013-02-12T09:32:59.353", "OwnerUserId": "961353"}, "bq_ids": {"n4140": {"so_14829158_14829622_14": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_14829158_14829622_13": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_14829158_14829622_17": {"length": 19, "quality": 0.8260869565217391, "section_id": 3291}, "so_14829158_14829622_5": {"length": 12, "quality": 0.75, "section_id": 3287}, "so_14829158_14829622_1": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_14829158_14829622_19": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_14829158_14829622_6": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_14829158_14829622_4": {"length": 12, "quality": 0.7058823529411765, "section_id": 3286}, "so_14829158_14829622_21": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_14829158_14829622_3": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_14829158_14829622_12": {"length": 14, "quality": 0.875, "section_id": 3285}, "so_14829158_14829622_15": {"length": 10, "quality": 0.6666666666666666, "section_id": 3285}, "so_14829158_14829622_20": {"length": 12, "quality": 0.9230769230769231, "section_id": 3286}, "so_14829158_14829622_11": {"length": 17, "quality": 1.0, "section_id": 3285}, "so_14829158_14829622_9": {"length": 5, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_14829158_14829622_14": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_14829158_14829622_13": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_14829158_14829622_17": {"length": 21, "quality": 0.9130434782608695, "section_id": 3161}, "so_14829158_14829622_5": {"length": 16, "quality": 1.0, "section_id": 3157}, "so_14829158_14829622_1": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_14829158_14829622_20": {"length": 13, "quality": 1.0, "section_id": 3156}, "so_14829158_14829622_19": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_14829158_14829622_6": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_14829158_14829622_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 3157}, "so_14829158_14829622_21": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_14829158_14829622_3": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_14829158_14829622_12": {"length": 14, "quality": 0.875, "section_id": 3155}, "so_14829158_14829622_15": {"length": 13, "quality": 0.8666666666666667, "section_id": 3155}, "so_14829158_14829622_9": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_14829158_14829622_11": {"length": 17, "quality": 1.0, "section_id": 3155}, "so_14829158_14829622_10": {"length": 11, "quality": 0.9166666666666666, "section_id": 3155}}, "n4659": {"so_14829158_14829622_14": {"length": 4, "quality": 1.0, "section_id": 4047}, "so_14829158_14829622_13": {"length": 5, "quality": 1.0, "section_id": 4047}, "so_14829158_14829622_17": {"length": 19, "quality": 0.8260869565217391, "section_id": 4053}, "so_14829158_14829622_5": {"length": 11, "quality": 0.6875, "section_id": 4049}, "so_14829158_14829622_1": {"length": 7, "quality": 1.0, "section_id": 4052}, "so_14829158_14829622_20": {"length": 9, "quality": 0.6923076923076923, "section_id": 4049}, "so_14829158_14829622_6": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_14829158_14829622_4": {"length": 11, "quality": 0.6470588235294118, "section_id": 4049}, "so_14829158_14829622_21": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_14829158_14829622_12": {"length": 14, "quality": 0.875, "section_id": 4047}, "so_14829158_14829622_15": {"length": 10, "quality": 0.6666666666666666, "section_id": 4047}, "so_14829158_14829622_9": {"length": 4, "quality": 0.8, "section_id": 653}, "so_14829158_14829622_11": {"length": 16, "quality": 0.9411764705882353, "section_id": 4047}}}, "14829262": {"Id": "14829262", "PostTypeId": "2", "Body": "<p>In your case the object <code>s</code> is zero-initialized which means the function pointer is <code>NULL</code>.</p>\n<pre><code>struct S { void (*f)(); };\n\nint main()\n{\n    S s = S();\n    if ( s.f == NULL)\n       std::cout &lt;&lt; \"s.f is NULL\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>s.f is NULL\n</code></pre>\n<p><a href=\"http://stacked-crooked.com/view?id=e8c6c3e1874a2c1883c50da3589a59a2\">Online demo</a>.</p>\n", "LastActivityDate": "2013-02-12T09:26:18.013", "Score": "6", "CreationDate": "2013-02-12T09:26:18.013", "ParentId": "14829158", "CommentCount": "1", "OwnerUserId": "415784"}, "14829252": {"Id": "14829252", "PostTypeId": "2", "Body": "<p>Function pointer can be NULL, this way you can indicate that they don't point to anything!</p>\n", "LastEditorUserId": "26095", "LastActivityDate": "2013-02-12T09:43:29.457", "Score": "3", "CreationDate": "2013-02-12T09:25:53.587", "ParentId": "14829158", "CommentCount": "0", "LastEditDate": "2013-02-12T09:43:29.457", "OwnerUserId": "26095"}, "14829622": {"Id": "14829622", "PostTypeId": "2", "Body": "<p>First <em>any</em> pointer can be null. It is the one universal truth about pointers. That said, yours <em>will</em> be null, but not necessarily for the reasons you may think;</p>\n<blockquote>\n<p id=\"so_14829158_14829622_0\"><strong>C++11 \u00a7 8.5,p10</strong></p>\n<p id=\"so_14829158_14829622_1\">An object whose initializer is an empty set of parentheses, i.e., <strong>()</strong>, shall be <strong>value-initialized</strong>.</p>\n</blockquote>\n<p>This is important because your declaration includes this :</p>\n<pre><code>S s = S();\n</code></pre>\n<p>By the definition of <em>value initialization</em>:</p>\n<blockquote>\n<p id=\"so_14829158_14829622_2\"><strong>C++11 \u00a7 8.5,p7</strong></p>\n<p id=\"so_14829158_14829622_3\">To value-initialize an object of type T means:</p>\n<ul>\n<li><p id=\"so_14829158_14829622_4\">if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p></li>\n<li><p id=\"so_14829158_14829622_5\">if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is <strong>zero-initialized</strong> and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</p></li>\n<li><p id=\"so_14829158_14829622_6\">if T is an array type, then each element is value-initialized;</p></li>\n<li><p id=\"so_14829158_14829622_7\">otherwise, the object is <strong>zero-initialized.</strong></p></li>\n</ul>\n</blockquote>\n<p>Which brings us to what it means for your object-type to be zero-initialized:</p>\n<blockquote>\n<p id=\"so_14829158_14829622_8\"><strong>C++11 \u00a7 8.5,p5</strong></p>\n<p id=\"so_14829158_14829622_9\">To zero-initialize an object or reference of type T means:</p>\n<ul>\n<li><p id=\"so_14829158_14829622_10\">if T is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to T <sub>(103)</sub></p></li>\n<li><p id=\"so_14829158_14829622_11\">if T is a (possibly cv-qualified) non-union class type, <strong>each non-static data member and each base-class subobject is zero-initialized</strong> and padding is initialized to zero bits;</p></li>\n<li><p id=\"so_14829158_14829622_12\">if T is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zero- initialized and padding is initialized to zero bits;</p></li>\n<li><p id=\"so_14829158_14829622_13\">if T is an array type, each element is zero-initialized;</p></li>\n<li><p id=\"so_14829158_14829622_14\">if T is a reference type, no initialization is performed.</p></li>\n</ul>\n<p id=\"so_14829158_14829622_15\">103) As specified in 4.10, converting an integral constant expression whose value is 0 to a pointer type results in a <strong>null pointer value</strong>.</p>\n</blockquote>\n<p>The latter is the reason you're pointer is null. It will <em>not</em> be guaranteed-so by the standard given the same code, but changing the declaration of <code>s</code> to this:</p>\n<pre><code>S s;\n</code></pre>\n<p>Given a declaration like the above, a different path is taken through the standard:</p>\n<blockquote>\n<p id=\"so_14829158_14829622_16\"><strong>C++11 \u00a7 8.5,p11</strong></p>\n<p id=\"so_14829158_14829622_17\">If no initializer is specified for an object, the object is <strong>default-initialized</strong>; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value. [ Note: Objects with static or thread storage duration are zero-initialized, see 3.6.2.</p>\n</blockquote>\n<p>Which then begs the last question, what is <em>default initialization</em>:</p>\n<blockquote>\n<p id=\"so_14829158_14829622_18\"><strong>C++11 \u00a7 8.5,p6</strong></p>\n<p id=\"so_14829158_14829622_19\">To default-initialize an object of type T means:</p>\n<ul>\n<li><p id=\"so_14829158_14829622_20\">if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p></li>\n<li><p id=\"so_14829158_14829622_21\">if T is an array type, each element is default-initialized;</p></li>\n<li><p id=\"so_14829158_14829622_22\">otherwise, no initialization is performed.</p></li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "89303", "LastActivityDate": "2014-11-22T15:01:16.050", "Score": "16", "CreationDate": "2013-02-12T09:48:09.357", "ParentId": "14829158", "CommentCount": "4", "LastEditDate": "2014-11-22T15:01:16.050", "OwnerUserId": "1322972"}});