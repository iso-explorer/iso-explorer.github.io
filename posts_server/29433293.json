post_cb({"29433585": {"ParentId": "29433293", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you look through the standard, you'll find quite a few things that would be accepted at a purely syntactical level, but are prohibited by the text. This is just one of many instances of that basic idea.</p>\n<p>Many of these situations are pretty obvious. Let's consider a really trivial one: a floating point number. Using a syntactical notation similar to that of the standard we could get something like:</p>\n<p>\"-\"<em><sub>opt</sub></em> digits <em><sub>opt</sub></em> \".\"<em><sub>opt</sub></em> digits <em><sub>opt</sub></em> (\"e\" \"-\"<em><sub>opt</sub></em> digits)<em><sub>opt</sub></em></p>\n<p>Everything there is \"optional\". That doesn't, however, mean that nothingness should be taken as a number. Nor does it mean that (for example) <code>.e</code> is a valid floating point number. It does mean that almost any individual piece can be omitted if some of the others are present. You don't need digits both before <em>and</em> after the decimal point, so each is optional in itself--but one or the other has to be present, so <code>1.</code> and <code>.1</code> are both valid, but just <code>.</code> isn't. Likewise, the <code>.</code> is optional as well--something like <code>1e50</code> is a perfectly valid floating point literal, even though it doesn't contain a <code>.</code> anywhere.</p>\n<p>Those limitations are expressed in the text associated with the syntactic notation itself. What's allowed (or not) has to based on everything taken together, not just on one piece in isolation.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2015-04-03T14:23:19.407", "Id": "29433585", "Score": "2", "CreationDate": "2015-04-03T13:58:24.727", "LastActivityDate": "2015-04-03T14:23:19.407"}, "29433293": {"CommentCount": "7", "ViewCount": "150", "PostTypeId": "1", "LastEditorUserId": "1042389", "CreationDate": "2015-04-03T13:38:06.570", "LastActivityDate": "2015-04-03T15:01:20.023", "Title": "Legality of empty, unnamed enumeration specifier", "AcceptedAnswerId": "29433534", "LastEditDate": "2015-04-03T14:23:29.043", "Id": "29433293", "Score": "-3", "Body": "<p>In the example in \u00a77.5 (C++14) one finds:</p>\n<p><code>enum {};   // ill-formed</code> </p>\n<p>But, technically speaking, I think the code is valid.<code>enum {}</code> is an <em>enum-specifier</em>, and so, it's a <em>type-specifier</em>, which is a <em>decl-specifier</em>, and thus, it is a <em>simple-declaration</em> with an omitted <em>init-declarator-list</em>. And this is accepted by \u00a77.5. Note that the <em>identifier</em> is optional for an unscoped enumeration. Also, clang compiles this with a warning.</p>\n<p><strong>Edit</strong></p>\n<p>In relation to the answers mentioning that <code>the *decl-specifier-seq* shall introduce one or more names into the program, or shall redeclare a name introduced by a previous declaration</code>, I show below a <strong>typedef</strong> declaration that compiles, but whose <em>decl-specifier-seq</em> doesn't introduce any name in the declaration:  </p>\n<pre><code>typedef class {} A;\n</code></pre>\n", "Tags": "<c++><c++11><language-lawyer><c++14>", "OwnerUserId": "1042389", "AnswerCount": "3"}, "29433534": {"ParentId": "29433293", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>In the C++14 FD, <em>right above</em> your example, it is explained why the declaration is ill-formed:</p>\n<blockquote>\n<p id=\"so_29433293_29433534_0\">In a <em>simple-declaration</em>, the optional <em>init-declarator-list</em> can be\n  omitted only when declaring a class (Clause 9) or enumeration (7.2)\n  [\u2026]  </p>\n<p id=\"so_29433293_29433534_1\">In such cases, <strong>the <em>decl-specifier-seq</em> shall introduce one or more\n  names into the program, or shall redeclare a name introduced by a\n  previous declaration.</strong></p>\n</blockquote>\n<p>Hence</p>\n<pre><code>enum {} e;\nenum {a};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/4971b123b8488706\">Are valid</a> - our quote does not apply to the first declaration as it includes an <em>init-declarator</em>, and the second one introduces the name <code>a</code> as an enumerator. Note that GCC won't compile the first declaration, which is presumably a bug.</p>\n<p>You also mentioned the quote</p>\n<blockquote>\n<p id=\"so_29433293_29433534_2\">If the <em>enumerator-list</em> is empty, the underlying type is as if the\n  enumeration had a single enumerator with value <code>0</code>.</p>\n</blockquote>\n<p>This makes a statement about the underlying type, not the enumeration itself, and is thus irrelevant for this matter.</p>\n<hr>\n<h3>Why does <code>typedef class {} A;</code> compile?</h3>\n<p><code>A</code> is an <em>init-declarator</em>. Yes, it is - [dcl.dcl]/9:</p>\n<blockquote>\n<p id=\"so_29433293_29433534_3\">If the <em>decl-specifier-seq</em> contains the <em>typedef specifier</em>, the\n  declaration is called a typedef declaration <strong>and the name of each\n  <em>init-declarator</em> is declared to be a <em>typedef-name</em></strong></p>\n</blockquote>\n<p>I.e. the names declared as <em>typedef-names</em> are the <em>init-declarators</em>, by this definition. Hence there is an <em>init-declarator-list</em>, and our above quote isn't applicable.</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-04-03T14:31:10.883", "Id": "29433534", "Score": "7", "CreationDate": "2015-04-03T13:54:32.710", "LastActivityDate": "2015-04-03T14:31:10.883"}, "bq_ids": {"n4140": {"so_29433293_29433534_3": {"section_id": 5385, "quality": 0.9230769230769231, "length": 12}, "so_29433293_29433459_0": {"section_id": 5381, "quality": 0.7647058823529411, "length": 13}, "so_29433293_29433459_1": {"section_id": 5407, "quality": 0.6923076923076923, "length": 9}, "so_29433293_29433534_1": {"section_id": 5381, "quality": 1.0, "length": 13}, "so_29433293_29433534_2": {"section_id": 5466, "quality": 1.0, "length": 9}, "so_29433293_29433534_0": {"section_id": 5381, "quality": 1.0, "length": 10}}, "n3337": {"so_29433293_29433534_3": {"section_id": 5179, "quality": 0.9230769230769231, "length": 12}, "so_29433293_29433459_0": {"section_id": 5175, "quality": 1.0, "length": 17}, "so_29433293_29433459_1": {"section_id": 5202, "quality": 0.6923076923076923, "length": 9}, "so_29433293_29433534_1": {"section_id": 5175, "quality": 1.0, "length": 13}, "so_29433293_29433534_2": {"section_id": 5252, "quality": 1.0, "length": 9}, "so_29433293_29433534_0": {"section_id": 5175, "quality": 1.0, "length": 10}}, "n4659": {"so_29433293_29433534_3": {"section_id": 6810, "quality": 0.9230769230769231, "length": 12}, "so_29433293_29433534_0": {"section_id": 6805, "quality": 1.0, "length": 10}, "so_29433293_29433459_0": {"section_id": 6805, "quality": 0.7647058823529411, "length": 13}, "so_29433293_29433459_1": {"section_id": 6829, "quality": 0.6923076923076923, "length": 9}, "so_29433293_29433534_1": {"section_id": 6805, "quality": 1.0, "length": 13}, "so_29433293_29433534_2": {"section_id": 6900, "quality": 1.0, "length": 9}}}, "29433459": {"ParentId": "29433293", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>There is clear written in the Standard that (7 Declarations)</p>\n<blockquote id=\"so_29433293_29433459_0\">\n<ol start=\"3\">\n<li>...In such cases, and except for the declaration of an unnamed bit-field (9.6), the decl-specifier-seq <strong>shall introduce one or more\n  names</strong> into the program, or shall redeclare a name introduced by a\n  previous declaration.</li>\n</ol>\n</blockquote>\n<p>This declaration</p>\n<pre><code>enum {};   // ill-formed \n</code></pre>\n<p>does not satisfy the requirement. It introduces neither name into the program.</p>\n<p>As for typedef(s) then</p>\n<blockquote>\n<p id=\"so_29433293_29433459_1\">7.1.3 The typedef specifier 1 Declarations containing the decl-specifier <strong>typedef declare identifiers</strong> that can be used later\n  for naming 94)</p>\n</blockquote>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-04-03T15:01:20.023", "Id": "29433459", "Score": "2", "CreationDate": "2015-04-03T13:49:18.503", "LastActivityDate": "2015-04-03T15:01:20.023"}});