post_cb({"26196095": {"CommentCount": "14", "ViewCount": "1079", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-10-04T18:58:28.473", "LastActivityDate": "2015-10-16T12:50:42.900", "Title": "Static constexpr odr-used or not?", "FavoriteCount": "2", "LastEditDate": "2015-10-16T12:20:21.330", "Id": "26196095", "Score": "7", "Body": "<p>How come that the following works on <code>gcc</code> but doesn't on <code>clang</code>, (<em><a href=\"http://coliru.stacked-crooked.com/a/bc1887da0ea50cfe\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>constexpr int giveMeValue() { return 42; }\n\nstruct TryMe {\n  static constexpr int arr[1] = {\n      giveMeValue()\n  };  \n};\n\nint main() {\n    int val = TryMe::arr[0];\n    return val;\n}\n</code></pre>\n<p>I get an unresolved external symbol with clang.</p>\n<p>Is <code>TryMe::arr[0]</code> an object? If it is, is it odr-used?</p>\n", "Tags": "<c++><c++11><constexpr><one-definition-rule>", "OwnerUserId": "3834459", "AnswerCount": "1"}, "28446388": {"ParentId": "26196095", "PostTypeId": "2", "CommentCount": "7", "Body": "<p><code>TryMe::arr</code> is <a href=\"http://en.cppreference.com/w/cpp/language/definition\" rel=\"nofollow\">odr-used</a> but you don't provide a definition (<em><a href=\"http://coliru.stacked-crooked.com/a/66938aea39feee23\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>constexpr int TryMe::arr[1];\n</code></pre>\n<p>Why is the result inconsistent between <code>gcc</code> and <code>clang</code>? This is because odr violations do not require a disagnostic, from both the C++11 and C++14 draft standard (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_26196095_28446388_0\">Every program shall contain exactly one definition of every non-inline\n  function or variable that is odr-used in that program; <strong>no diagnostic\n  required</strong>.</p>\n</blockquote>\n<p>We can see it is odr-used from the draft C++11 standard, section <code>3.2</code> which says:</p>\n<blockquote>\n<p id=\"so_26196095_28446388_1\">An expression is potentially evaluated unless it is an unevaluated\n  operand (Clause 5) or a subexpression thereof. A variable whose name\n  appears as a potentially-evaluated expression is odr-used unless it is\n  an object that satisfies the requirements for appearing in a constant\n  expression (5.19) and the lvalue-to-rvalue conversion (4.1) is\n  immediately applied.</p>\n</blockquote>\n<p><code>TryMe::arr</code> is an object and it does satisfy the requirements for appearing in a constant expression but the lvalue-to-rvalue conversion is not immediately applied to <code>TryMe::arr</code> but to <code>TryMe::arr[0]</code>.</p>\n<p>The updated wording from the draft C++14 standard which applies to C++11 as well since it was applied via a defect report(<em><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#712\" rel=\"nofollow\">DR 712</a></em>):</p>\n<blockquote>\n<p id=\"so_26196095_28446388_2\">A variable x whose name appears as a potentially-evaluated expression\n  ex is odr-used unless applying the lvalue-to-rvalue conversion (4.1)\n  to x yields a constant expression (5.19) that does not invoke any\n  non-trivial functions and, if x is an object, ex is an element of the\n  set of potential results of an expression e, where either the\n  lvalue-to-rvalue conversion (4.1) is applied to e, or e is a\n  discarded-value expression</p>\n</blockquote>\n<p>The <em>potential results</em> of the expression <code>TryMe::arr[0]</code> is empty by the criteria in <code>3.2</code> paragraph <code>2</code> and so it is odr-used.</p>\n<p>Note: you need to provide a definition outside of the class as per section <code>9.4.2</code> <em>[class.static.data]</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_26196095_28446388_3\">A static data member of literal type can be declared in the class\n  definition with the constexpr specifier; if so, its declaration shall\n  specify a brace-or-equal-initializer in which every initializer-clause\n  that is an assignment-expression is a constant expression. [ Note: In\n  both these cases, the member may appear in constant expressions. \u2014end\n  note ] <strong>The member shall still be defined in a namespace scope if it\n  is odr-used (3.2)</strong> in the program and the namespace scope definition\n  shall not contain an initializer</p>\n</blockquote>\n<p><b>Update</b></p>\n<p>T.C. pointed out <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1926\" rel=\"nofollow\">defect report 1926</a> which adds the following bullet to <code>3.2</code> [basic.def.odr] paragraph 2:</p>\n<blockquote id=\"so_26196095_28446388_4\">\n<ul>\n<li>If e is a subscripting operation (5.2.1 [expr.sub]) with an array operand, the set contains that operand.</li>\n</ul>\n</blockquote>\n<p>Which means subscripting an array is no longer an odr-use and so the OPs code would be well-formed in C++1z and it seems like C++14 since the defect looks like it is against C++14.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-10-16T12:50:42.900", "Id": "28446388", "Score": "7", "CreationDate": "2015-02-11T04:01:10.993", "LastActivityDate": "2015-10-16T12:50:42.900"}, "bq_ids": {"n4140": {"so_26196095_28446388_3": {"section_id": 5908, "quality": 0.9047619047619048, "length": 38}, "so_26196095_28446388_2": {"section_id": 7040, "quality": 0.9354838709677419, "length": 29}, "so_26196095_28446388_0": {"section_id": 7041, "quality": 1.0, "length": 12}}, "n3337": {"so_26196095_28446388_1": {"section_id": 6785, "quality": 0.8846153846153846, "length": 23}, "so_26196095_28446388_3": {"section_id": 5680, "quality": 0.9047619047619048, "length": 38}, "so_26196095_28446388_0": {"section_id": 6786, "quality": 1.0, "length": 12}}, "n4659": {"so_26196095_28446388_3": {"section_id": 7390, "quality": 0.5714285714285714, "length": 24}, "so_26196095_28446388_2": {"section_id": 8537, "quality": 0.9354838709677419, "length": 29}, "so_26196095_28446388_4": {"section_id": 8536, "quality": 0.7777777777777778, "length": 7}, "so_26196095_28446388_0": {"section_id": 8538, "quality": 1.0, "length": 12}}}});