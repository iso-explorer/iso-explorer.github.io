post_cb({"bq_ids": {"n4140": {"so_29269025_29269162_0": {"length": 26, "quality": 0.896551724137931, "section_id": 5999}, "so_29269025_29269162_1": {"length": 34, "quality": 0.8947368421052632, "section_id": 6030}}, "n3337": {"so_29269025_29269162_0": {"length": 26, "quality": 0.896551724137931, "section_id": 5767}, "so_29269025_29269162_1": {"length": 35, "quality": 0.9210526315789473, "section_id": 5798}}}, "29269162": {"LastActivityDate": "2015-03-26T00:48:11.693", "CommentCount": "2", "Body": "<p>Just read <a href=\"https://stackoverflow.com/questions/332030/when-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used\">When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</a></p>\n<hr/>\n<p>The C++11 draft standard calls <code>T(number)</code> functional notation and <code>(T) number</code> cast notation. Given that the expression list is a single expression, they're equivalent:</p>\n<blockquote>\n<p id=\"so_29269025_29269162_0\">\u00a75.2.3/1 A <em>simple-type-specifier</em> (7.1.6.2) or <em>typename-specifier</em>\n  (14.6) followed by a parenthesized expression-list constructs a value\n  of the specified type given the expression list. If the expression\n  list is a single expression, the type conversion expression is\n  equivalent (in definedness, and if defined in meaning) to the\n  corresponding cast expression (5.4). [...]</p>\n</blockquote>\n<p><code>(T) number</code> can call <code>static_cast</code>, which has the following behavior in this situation:</p>\n<blockquote>\n<p id=\"so_29269025_29269162_1\">\u00a75.2.9/4 Otherwise, an expression e can be explicitly converted to a\n  type <code>T</code> using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the\n  declaration <code>T t(e);</code> is well-formed, for some invented temporary\n  variable <code>t</code> (8.5). The effect of such an explicit conversion is the\n  same as performing the declaration and initialization and then using\n  the temporary variable as the result of the conversion. The expression\n  <code>e</code> is used as a glvalue if and only if the initialization uses it as\n  a glvalue.</p>\n</blockquote>\n<p>You could save yourself a lot of typing and just use floating literals (which has type double). </p>\n<pre><code>a = 3.0 / 7.0;\n</code></pre>\n", "CreationDate": "2015-03-26T00:41:02.663", "OwnerDisplayName": "user3920237", "LastEditDate": "2015-03-26T00:48:11.693", "ParentId": "29269025", "Id": "29269162", "LastEditorDisplayName": "user3920237", "PostTypeId": "2", "Score": "2"}, "29269025": {"CreationDate": "2015-03-26T00:26:53.127", "ViewCount": "603", "Id": "29269025", "AcceptedAnswerId": "29269162", "Score": "0", "Title": "are static_cast<double> and double the same?", "CommentCount": "6", "Body": "<p>I am a beginner in C++ casting.\nI need to know are <code>static_cast&lt;double&gt;</code> and <code>double</code> ex-changable in any code?</p>\n<p>In the following code can I replace <code>static_cast&lt;double&gt;</code> with <code>double</code>? which is much shorter. Do I loose any readability?</p>\n<pre><code>a= static_cast&lt;double&gt; ( 3 ) / static_cast&lt;double&gt;( 7 );\n</code></pre>\n<p>How about <code>static_cast</code> of other basic types such as <code>int</code>, <code>char</code>, <code>size_t</code>?</p>\n<p>According to explanations they must be the same. But is there any exceptional case?</p>\n", "Tags": "<c++><c++11><casting><type-conversion><static-cast>", "OwnerDisplayName": "user4714474", "LastActivityDate": "2015-03-26T00:48:11.693", "PostTypeId": "1", "AnswerCount": "1"}});