post_cb({"5733213": {"ParentId": "5733180", "CommentCount": "1", "Body": "<p>Why? The temporary lives till the end of the full expression.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "5733213", "Score": "1", "CreationDate": "2011-04-20T15:58:01.367", "LastActivityDate": "2011-04-20T15:58:01.367"}, "5733227": {"ParentId": "5733180", "CommentCount": "0", "Body": "<p>The behavior you are seeing is the one mandated by the standard: temporaries are destroyed at the end of the full expression creating them.</p>\n<p>Historically another behavior was seen (and is still available in some compilers): destruction at the end of the block.  In your case it wouldn't have made a difference as it delays still further the destruction.</p>\n", "OwnerUserId": "136208", "PostTypeId": "2", "Id": "5733227", "Score": "1", "CreationDate": "2011-04-20T15:58:54.593", "LastActivityDate": "2011-04-20T15:58:54.593"}, "5733180": {"CommentCount": "3", "ViewCount": "86", "CreationDate": "2011-04-20T15:55:53.733", "LastActivityDate": "2011-04-20T16:27:57.813", "Title": "Does this run into undefined behavior regarding object lifetimes?", "AcceptedAnswerId": "5733237", "PostTypeId": "1", "Id": "5733180", "Score": "2", "Body": "<pre><code>#include \"stdio.h\"\n\nclass C {\n public:\n  ~C() { printf(\"~C\\n\"); }\n};\n\nint I(const C&amp; c) { printf(\"I\\n\"); return 0; }\nvoid V(int i) { printf(\"V\\n\"); }\n\nint main() {\n  V(I(C()));\n  return 0;\n}\n</code></pre>\n<p>Seen output:</p>\n<pre><code>I\nV\n~C\n</code></pre>\n<p>what I would have expected:</p>\n<pre><code>I\n~C\nV\n</code></pre>\n", "Tags": "<c++><undefined-behavior>", "OwnerUserId": "1343", "AnswerCount": "4"}, "5733237": {"ParentId": "5733180", "LastEditDate": "2011-04-20T16:27:57.813", "CommentCount": "0", "CreationDate": "2011-04-20T15:59:24.093", "OwnerUserId": "415784", "LastEditorUserId": "415784", "PostTypeId": "2", "Id": "5733237", "Score": "4", "Body": "<pre><code>V(I(C()));\n</code></pre>\n<p><code>C()</code> creates a temporary which persists <strong>till the completion of the full expression</strong>, and the completion of the <strong>full</strong> expression is <code>;</code> (i.e the semicolon). That is why you see that output which is in my opinion is well-defined.</p>\n<p>Section \u00a712.2/3 from the Standard reads,</p>\n<blockquote>\n<p id=\"so_5733180_5733237_0\">[...] Temporary objects are <strong>destroyed as the last step in evaluating\n  the full-expression</strong> (1.9) that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception.</p>\n</blockquote>\n<p>Just to emphasize, in this example the lifetime of the temporary has nothing to do with the <em>reference</em>  or <em>const reference</em>  parameter of function <code>I()</code>. Even if the signature of <code>I()</code> is:</p>\n<pre><code>int I(C c); //instead of : int I(const C &amp; c);\n</code></pre>\n<p>the temporary would persist till the completion of the <strong>full</strong> expression and you would see <em>exactly</em> the same output.</p>\n<p>See this: <a href=\"http://www.ideone.com/RYWhy\" rel=\"nofollow\">http://www.ideone.com/RYWhy</a></p>\n", "LastActivityDate": "2011-04-20T16:27:57.813"}, "5733238": {"ParentId": "5733180", "CommentCount": "8", "Body": "<p>The call to <code>V</code> returns before the full expression has been completely evaluated. And when <code>V</code> has returned, it will have printed its stuff (there is a sequence point before returning from <code>V</code>). </p>\n<p>The temporary <code>C()</code> is only destroyed after the complete full expression has been evaluated.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "5733238", "Score": "3", "CreationDate": "2011-04-20T15:59:25.403", "LastActivityDate": "2011-04-20T15:59:25.403"}, "bq_ids": {"n4140": {"so_5733180_5733237_0": {"section_id": 380, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_5733180_5733237_0": {"section_id": 371, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_5733180_5733237_0": {"section_id": 395, "quality": 0.9523809523809523, "length": 20}}}});