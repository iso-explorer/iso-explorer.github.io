post_cb({"bq_ids": {"n4140": {"so_29899282_29899835_0": {"section_id": 819, "quality": 1.0, "length": 8}, "so_29899282_29899835_2": {"section_id": 989, "quality": 0.9166666666666666, "length": 22}, "so_29899282_29899835_3": {"section_id": 822, "quality": 0.9230769230769231, "length": 12}, "so_29899282_29899835_1": {"section_id": 988, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_29899282_29899835_0": {"section_id": 808, "quality": 1.0, "length": 8}, "so_29899282_29899835_2": {"section_id": 974, "quality": 0.9166666666666666, "length": 22}, "so_29899282_29899835_3": {"section_id": 811, "quality": 0.9230769230769231, "length": 12}, "so_29899282_29899835_1": {"section_id": 973, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_29899282_29899835_0": {"section_id": 878, "quality": 1.0, "length": 8}, "so_29899282_29899835_2": {"section_id": 1052, "quality": 0.875, "length": 21}, "so_29899282_29899835_3": {"section_id": 881, "quality": 0.9230769230769231, "length": 12}, "so_29899282_29899835_1": {"section_id": 1051, "quality": 0.8571428571428571, "length": 6}}}, "29899282": {"CommentCount": "0", "ViewCount": "838", "CreationDate": "2015-04-27T15:02:33.557", "LastActivityDate": "2015-04-27T15:26:59.470", "Title": "Compilation failure associated with vector of const std::string", "AcceptedAnswerId": "29899390", "PostTypeId": "1", "Id": "29899282", "Score": "15", "Body": "<p>Please can someone explain why the following code doesn't compile using clang 3.5.</p>\n<p>The error reported is 'No viable overloaded '=' in algorithm.'</p>\n<pre><code>std::vector&lt;const std::string&gt; m_messages;\nstd::vector&lt;const std::string&gt;::iterator iter;\n...\n\nif (iter != m_messages.end())\n{\n    m_messages.erase(iter);      // compilation error\n}\n</code></pre>\n<p>If I declare <code>m_messages</code> as: <code>std::vector&lt;std::string&gt; m_messages;</code> then it compiles OK.</p>\n<p>Also, what is the difference between:</p>\n<pre><code>std::vector&lt;const std::string&gt; m_messages;\n</code></pre>\n<p>and </p>\n<pre><code>std::vector&lt;std::string&gt; m_messages;\n</code></pre>\n<p>TIA.</p>\n", "Tags": "<c++><c++11><iterator><stdvector>", "OwnerUserId": "820657", "AnswerCount": "2"}, "29899390": {"ParentId": "29899282", "CommentCount": "6", "Body": "<p>To erase an element, the right hand side elements have to be relocated (shifted to the left).</p>\n<p>Since your strings are <code>const</code>, the old element cannot be overwritten (via the <code>=</code> operator) hence the error.</p>\n", "OwnerUserId": "650405", "PostTypeId": "2", "Id": "29899390", "Score": "16", "CreationDate": "2015-04-27T15:07:14.777", "LastActivityDate": "2015-04-27T15:07:14.777"}, "29899835": {"ParentId": "29899282", "CommentCount": "0", "Body": "<p>Does that mean it makes no sense to have a vector of const strings if the elements can be removed? <code>Yes at least what the standard says</code></p>\n<p><strong>23.3.7.5 vector modifiers [vector.modifiers]</strong></p>\n<blockquote>\n<p id=\"so_29899282_29899835_0\">iterator erase(const_iterator position); iterator erase(const_iterator\n  first, const_iterator last); </p>\n<p id=\"so_29899282_29899835_1\"><strong>Effects</strong>: Invalidates iterators and references at or after the point of the erase. </p>\n<p id=\"so_29899282_29899835_2\"><strong>Complexity</strong>: The destructor of T is called the number of times equal to the number of the elements erased, but the move assignment operator of T is called the number of times equal to the number of elements in the vector after the erased elements. </p>\n<p id=\"so_29899282_29899835_3\"><strong>Throws</strong>: Nothing unless an exception is thrown by the copy constructor, move constructor, assignment operator, or move assignment operator of T.</p>\n</blockquote>\n", "OwnerUserId": "977038", "PostTypeId": "2", "Id": "29899835", "Score": "5", "CreationDate": "2015-04-27T15:26:59.470", "LastActivityDate": "2015-04-27T15:26:59.470"}});