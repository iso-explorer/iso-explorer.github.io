post_cb({"27004075": {"CommentCount": "1", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/language/copy_constructor\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/copy_constructor</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_27003791_27004075_0\"><strong>Implicitly-defined copy constructor</strong></p>\n<p id=\"so_27003791_27004075_1\">If the implicitly-declared copy constructor is neither deleted nor\n  trivial, it is defined (that is, a function body is generated and\n  compiled) by the compiler if odr-used. For union types, the\n  implicitly-defined copy constructor copies the object representation\n  (as by std::memmove). For non-union class types (class and struct),\n  the constructor performs <strong>full member-wise copy of the object's bases\n  and non-static members</strong>, in their initialization order, using direct\n  initialization.</p>\n</blockquote>\n<p>So it seems that compiler generated copy constructor will call the base copy constructor just as it calls the copy constructors of the members.</p>\n", "CreationDate": "2014-11-18T21:07:56.720", "ParentId": "27003791", "Id": "27004075", "LastActivityDate": "2014-11-18T21:07:56.720", "PostTypeId": "2", "Score": "3", "OwnerUserId": "1738399"}, "27003791": {"CreationDate": "2014-11-18T20:52:31.553", "ViewCount": "368", "Id": "27003791", "AcceptedAnswerId": "27004075", "Score": "0", "Title": "Implicit copy constructor and inheritance", "CommentCount": "0", "Body": "<p>I know this kind of question has been asked many times, and I've read different answers about it, as well as some parts of the ISO standard.<br>\nBut still, I need <strong>a few clarifications</strong> about the exact behaviour expected by the C++ standard.</br></p>\n<p>Assuming this:</p>\n<pre><code>class A\n{\n    public:\n\n        A( void ) {}\n        A( const A &amp; a ) {}\n};\n\nclass B: public A\n{\n    public:\n\n        B( void ) {}\n        B( const B &amp; b ) {}\n};\n</code></pre>\n<p>I know that calling the copy constructor of the <code>B</code> class won't call the copy constructor of the <code>A</code> class, and that we can use an <strong>initialisation list</strong> in order to do it properly.</p>\n<p>I also know about using <code>using</code> in order to inherit constructors.</p>\n<p>But what does the standard exactly mandates about a derived class which does not provides explicitly a copy constructor, while the base class does:</p>\n<pre><code>class A\n{\n    public:\n\n        A( void ) {}\n        A( const A &amp; a ) {}\n};\n\nclass B: public A\n{};\n</code></pre>\n<p>I always thought the compiler would implicitly define a copy constructor for class <code>B</code>, thus hiding the copy constructor of class <code>A</code>, which won't be called.</p>\n<p>However, looks like it's not the case, and the the <code>A</code> copy constructor is called.<br>\nCompiling with Clang on OS X 10.10.</br></p>\n<p>So is this something mandatory, or something that can be implementation defined, meaning we should not rely on this behaviour?</p>\n<p>In the C++ standard, I've found the following, but it's clearly not crystal-clear to me:</p>\n<blockquote>\n<p id=\"so_27003791_27003791_0\">An inheriting constructor for a class is implicitly defined when it is\n  odr-used (3.2) to create an object of its class type (1.8). An\n  implicitly-defined inheriting constructor performs the set of\n  initializations of the class that would be performed by a user-written\n  inline constructor for that class with a mem-initializer-list whose\n  only mem-initializer has a mem-initializer-id that names the base\n  class denoted in the nested-name-specifier of the using-declaration\n  and an expression-list as specified below, and where the\n  compound-statement in its function body is empty (12.6.2).</p>\n</blockquote>\n<p>I would really enjoy a clarification on it, in accordance with the standard, and also with multiple inheritance in mind.</p>\n", "Tags": "<c++><inheritance><constructor>", "LastActivityDate": "2014-11-18T21:07:56.720", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "182676"}, "bq_ids": {"n4140": {"so_27003791_27003791_0": {"length": 44, "quality": 0.9777777777777777, "section_id": 489}}, "n3337": {"so_27003791_27003791_0": {"length": 44, "quality": 0.9777777777777777, "section_id": 480}}}});