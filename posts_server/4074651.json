post_cb({"4074662": {"ParentId": "4074651", "CommentCount": "2", "Body": "<p>My best guess:</p>\n<p>If it were non-static, it could be referenced by other code.  But what would other code call it?  It is anonymous.  Hence, the need to restrict an anonymous union to some local scope; hence, it shall be declared static.</p>\n<p>But its just a guess.  Language Designers get to design things the way they want.  Sometimes their choices are arbitrary, just because <em>some</em> choice must be made.</p>\n", "OwnerUserId": "34824", "PostTypeId": "2", "Id": "4074662", "Score": "1", "CreationDate": "2010-11-02T03:09:39.710", "LastActivityDate": "2010-11-02T03:09:39.710"}, "4074651": {"CommentCount": "0", "AcceptedAnswerId": "4075484", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2010-11-02T03:05:28.047", "LastActivityDate": "2017-07-23T04:29:57.030", "LastEditDate": "2012-10-06T15:18:26.863", "ViewCount": "1533", "FavoriteCount": "1", "Title": "Why are global anonymous unions required to be declared as static?", "Id": "4074651", "Score": "6", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf\" rel=\"nofollow\" title=\"C++ 0x draft\">C++ 0x draft</a></p>\n<blockquote>\n<p id=\"so_4074651_4074651_0\">9.5.6 Anonymous unions declared in a named namespace or in the global namespace shall be declared static.</p>\n</blockquote>\n<p>Why? </p>\n<hr>\n<p>Update-</p>\n<p>Based on Bart van Ingen Schenau and lothar's respones, the best explanation so far might be this: </p>\n<p>If the same global anonymous union is encountered in two translation units (say, via a header file), then how can the One Definition Rule be satisfied? Are the two definitions treated as the same and merged together? Or are the two definitions treated as different? If they are treated as the same, then the compiler is presumably doing 'magic' it doesn't otherwise do for other entities. If they are treated as the same, then the compiler is doing so without the explicit consent of the programmer... so I suppose explicit consent is being forced by requiring it to be declared as static. </p>\n</hr>", "Tags": "<c++><c++11><anonymous-types><unions>", "OwnerUserId": "492471", "AnswerCount": "5"}, "4077770": {"ParentId": "4074651", "CommentCount": "1", "Body": "<p>Suppose anonymous unions were not required to be declared static, and the compiler encounters these two translation-units (after preprocessing):</p>\n<p>File1:</p>\n<pre><code>union {\n  int  a;\n  char b;\n};\n\n// Further contents referring to a and b\n</code></pre>\n<p>File2:</p>\n<pre><code>union {\n  int  a;\n  char b;\n};\n\n// Further (different) contents referring to a and b\n</code></pre>\n<p>Are those two unions one an the same object, or are they supposed to be different objects?</p>\n<p>I think that, in order to avoid unanswerable questions like this, it has been decided that namespace-scope anonymous unions have to be declared static.</p>\n", "OwnerUserId": "430719", "PostTypeId": "2", "Id": "4077770", "Score": "4", "CreationDate": "2010-11-02T12:48:48.787", "LastActivityDate": "2010-11-02T12:48:48.787"}, "45261502": {"ParentId": "4074651", "CommentCount": "0", "Body": "<p>There was never a justification for the static requirement and it should be removed. The compiler does, and should, treat the multiple elements in the union as multiple individual global variables that share the same address. In practicality it means that the compiler allow multiple types to be applied to the same address. Since the scope of a global anonymous union is the global scope, the rules for naming elements in anonymous unions should be (and are) the same as the rules for naming global variables. i.e. anonymous union elements names must be unique. As for the initialization of union - there is no difference between the initialization of a union and of a simple variable. Another point about static unions -- the value and type of a union are time-dependent. Note that only one value at a time can occupy a union regardless of the number of elements in it.  The reason for declaring a union to start with is to allow the same address to be used for different  types, dynamically, at different times. This is why a static unions is a misnomer and some compilers simply ignore it.</p>\n", "OwnerUserId": "8351986", "PostTypeId": "2", "Id": "45261502", "Score": "-1", "CreationDate": "2017-07-23T04:29:57.030", "LastActivityDate": "2017-07-23T04:29:57.030"}, "4074813": {"ParentId": "4074651", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_4074651_4074813_0\">$9.5/5- A union of the form union {\n  member-specification } ; is called an\n  anonymous union; <strong>it defines an unnamed object of unnamed type</strong>.</p>\n</blockquote>\n<p>My guess that it should be static so that the object can be initialized as per the rule of global static objects. If it is not static and the object does not have a name, then how does one initialize it?</p>\n<p>EDIT2:</p>\n<p>On rethinking...</p>\n<p>Members of anonymous unions have internal linkage. Further by default global names have external linkage unless they have internal linkage. If the name of the anonymous union has external linkage, it is not possible for the members of the anonymous union to have internal linkage. Therefore anonymous unions are declared with 'static' storage class specifier so that the anonymous name itself has internal linkage.</p>\n", "OwnerUserId": "418110", "LastEditorUserId": "418110", "LastEditDate": "2010-11-02T05:29:00.597", "Id": "4074813", "Score": "0", "CreationDate": "2010-11-02T03:54:44.387", "LastActivityDate": "2010-11-02T05:29:00.597"}, "bq_ids": {"n4140": {"so_4074651_4074813_0": {"section_id": 5917, "quality": 0.7692307692307693, "length": 10}, "so_4074651_4074651_0": {"section_id": 5918, "quality": 0.9, "length": 9}}, "n3337": {"so_4074651_4074813_0": {"section_id": 5689, "quality": 0.8461538461538461, "length": 11}, "so_4074651_4074651_0": {"section_id": 5690, "quality": 0.9, "length": 9}}, "n4659": {"so_4074651_4074813_0": {"section_id": 7410, "quality": 0.6923076923076923, "length": 9}, "so_4074651_4074651_0": {"section_id": 7411, "quality": 0.9, "length": 9}}}, "4075484": {"ParentId": "4074651", "CommentCount": "1", "Body": "<p>My guess is that if it were allowed to define the union in a non static way it may violate the <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">ODR (one definition rule)</a></p>\n", "OwnerUserId": "44434", "PostTypeId": "2", "Id": "4075484", "Score": "1", "CreationDate": "2010-11-02T06:48:00.310", "LastActivityDate": "2010-11-02T06:48:00.310"}});