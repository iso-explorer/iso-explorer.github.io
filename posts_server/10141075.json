post_cb({"10141152": {"Id": "10141152", "PostTypeId": "2", "Body": "<p>Why not just manually clear() the stream then go back once the eofbit has been set? EOF has been reached, why should seekg clear it automatically? Doing that would seem to cause more problems.</p>\n", "LastActivityDate": "2012-04-13T12:49:38.117", "CommentCount": "0", "CreationDate": "2012-04-13T12:49:38.117", "ParentId": "10141075", "Score": "0", "OwnerUserId": "1200129"}, "bq_ids": {"n4140": {"so_10141075_10141203_1": {"length": 8, "quality": 0.8, "section_id": 2241}}, "n3337": {"so_10141075_10141203_1": {"length": 8, "quality": 0.8, "section_id": 2229}}, "n4659": {"so_10141075_10141203_1": {"length": 8, "quality": 0.8, "section_id": 2514}}}, "10141075": {"ViewCount": "2000", "Body": "<p>I would like to know if and why <code>seekg(0)</code> is not supposed to clear the <code>eofbit</code> of a stream.\nI am in a point where I have already read all the stream, thus <code>EOF</code> has been reached (but no <code>failbit</code> is set yet) and want to go back with <code>seekg()</code> to a valid position and read some chars again. In this case <code>seekg(0)</code> seems \"to work\" with the <code>eofbit</code> set, but as soon as I try to read from the stream, the failbit is set. Is this logic, correct or is my implementation bad? Am I supposed to recognize this case and clear the eofbit manually (if the failbit is not set)?</p>\n<p>EDIT:</p>\n<p>The following program provided by a reader gives different results in my implementation ( mingw32-c++.exe (TDM-2 mingw32) 4.4.1 ):</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n        std::istringstream foo(\"AAA\");\n        std::string a;\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 0\n        foo.seekg(0);\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 0 0\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 0\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 1\n}\n</code></pre>\n<p>The comments above are from the user who tried that program in his implementation. I obtain these results:</p>\n<pre><code>1 0\n1 0\n1 1\n1 1\n</code></pre>\n", "AcceptedAnswerId": "10141203", "Title": "Why does not seekg(0) clear the eof state of stream?", "CreationDate": "2012-04-13T12:43:55.920", "Id": "10141075", "CommentCount": "2", "LastEditDate": "2012-04-16T10:51:27.500", "PostTypeId": "1", "LastEditorUserId": "989331", "LastActivityDate": "2012-04-16T10:51:27.500", "Score": "6", "OwnerUserId": "989331", "Tags": "<c++><iostream>", "AnswerCount": "2"}, "10141203": {"Id": "10141203", "PostTypeId": "2", "Body": "<p>According to the <strong>new</strong> standard <code>clear()</code> is supposed to reset the <code>eofbit</code> (\u00a7 27.7.2.3):</p>\n<blockquote>\n<p id=\"so_10141075_10141203_0\"><code>basic_istream&lt;charT,traits&gt;&amp; seekg(pos_type pos);</code></p>\n<p id=\"so_10141075_10141203_1\"><em>Effects:</em> Behaves as an unformatted input function ..., except that the function \ufb01rst clears <code>eofbit</code> ...</p>\n</blockquote>\n<p>But in the <strong>old</strong> standard (\u00a7 27.6.1.3) there is no mention of clearing the <code>eofbit</code>!</p>\n<p>And a simple test:</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n        std::istringstream foo(\"AAA\");\n        std::string a;\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 0\n        foo.seekg(0);\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 0 0\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 0\n        foo &gt;&gt; a;\n        std::cout &lt;&lt; foo.eof() &lt;&lt; \" \" &lt;&lt; foo.fail() &lt;&lt; std::endl; // 1 1\n}\n</code></pre>\n", "LastEditorUserId": "61574", "LastActivityDate": "2012-04-13T13:52:04.780", "Score": "2", "CreationDate": "2012-04-13T12:52:42.407", "ParentId": "10141075", "CommentCount": "4", "OwnerUserId": "61574", "LastEditDate": "2012-04-13T13:52:04.780"}});