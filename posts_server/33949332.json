post_cb({"bq_ids": {"n4140": {"so_33949332_33950387_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 6185}, "so_33949332_33949332_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 6186}, "so_33949332_33950387_1": {"length": 4, "quality": 1.0, "section_id": 6185}, "so_33949332_33950387_0": {"length": 6, "quality": 1.0, "section_id": 6027}}, "n3337": {"so_33949332_33950387_3": {"length": 13, "quality": 1.0, "section_id": 5946}, "so_33949332_33949332_0": {"length": 15, "quality": 0.6521739130434783, "section_id": 5947}, "so_33949332_33950387_1": {"length": 4, "quality": 1.0, "section_id": 5946}, "so_33949332_33950387_0": {"length": 6, "quality": 1.0, "section_id": 5795}}, "n4659": {"so_33949332_33950387_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 7687}, "so_33949332_33949332_0": {"length": 18, "quality": 0.782608695652174, "section_id": 7688}, "so_33949332_33950387_0": {"length": 6, "quality": 1.0, "section_id": 7526}}}, "33949332": {"ViewCount": "185", "Body": "<p>g++ accepts the code:</p>\n<pre><code>char b[static_cast&lt;int&amp;&amp;&gt;(5)];\n</code></pre>\n<p>N3936 [expr.const]/3 defines the term as:</p>\n<blockquote>\n<p id=\"so_33949332_33949332_0\">An integral constant expression is an expression of integral or unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression. [Note: Such expressions\n  may be used as array bounds [...] </p>\n</blockquote>\n<p>I'm unsure because the expression looks like it has type <code>int&amp;&amp;</code>  but the definition of <em>integral type</em> in 3.9 doesn't make any mention of reference types.</p>\n<p>In case it was unclear, my question is: Is <code>static_cast&lt;int&amp;&amp;&gt;(5)</code> an integral constant expression?</p>\n<hr>\n<p><em>Background:</em> The question is motivated by the following example:</p>\n<pre><code>char *c = (1 - 1);\nchar *d = static_cast&lt;int&amp;&amp;&gt;(0);\n</code></pre>\n<p>All recent versions of <code>g++</code> with <code>-std=c++11</code> accept the <code>c</code> line but reject the <code>d</code> line.  The C++11 standard said that a null pointer constant is an <em>integral constant expression with value <code>0</code></em> . (This was changed for C++14).</p>\n<p>clang (3.4.1 and later) rejects the <code>c</code> line in <code>-std=c++11</code> mode.</p>\n<p>So it appears there is a bug in g++, but I'd like to confirm whether the bug is in the <code>b</code> or the <code>d</code> definition.</p>\n</hr>", "AcceptedAnswerId": "33950387", "Title": "Is (int&&)5 an integral constant expression?", "CreationDate": "2015-11-27T02:02:56.893", "Id": "33949332", "CommentCount": "4", "LastEditDate": "2015-11-27T05:57:57.067", "PostTypeId": "1", "LastEditorUserId": "1505939", "LastActivityDate": "2015-11-27T16:14:32.953", "Score": "4", "OwnerUserId": "1505939", "Tags": "<c++><c++11><language-lawyer><rvalue-reference>", "AnswerCount": "1"}, "33950387": {"Id": "33950387", "PostTypeId": "2", "Body": "<p>As far as I can tell <code>static_cast&lt;int&amp;&amp;&gt;(5)</code> is indeed a constant expression the result of this is an <em>xvalue</em> from the draft C++11 standard section <code>5.2.9</code> [expr.static.cast]:</p>\n<blockquote>\n<p id=\"so_33949332_33950387_0\">[...]if T is an rvalue\n  reference to object type, the result is an xvalue[...]</p>\n</blockquote>\n<p>and if we then go to section <code>5.19</code> [expr.const] we have:</p>\n<blockquote>\n<p id=\"so_33949332_33950387_1\">A conditional-expression is a core constant expression unless[...]</p>\n</blockquote>\n<p>and we have the following bullet:</p>\n<blockquote id=\"so_33949332_33950387_2\">\n<ul>\n<li>an lvalue-to-rvalue conversion (4.1) unless it is applied to</li>\n</ul>\n</blockquote>\n<p>with the following exception:</p>\n<blockquote id=\"so_33949332_33950387_3\">\n<ul>\n<li>a glvalue of literal type that refers to a non-volatile temporary object whose lifetime has not\n  ended, initialized with a constant expression;</li>\n</ul>\n</blockquote>\n<p>You also noted:</p>\n<blockquote>\n<p id=\"so_33949332_33950387_4\">clang (3.4.1 and later) incorrectly rejects the c line in -std=c++11 mode.</p>\n</blockquote>\n<p>but as T.C. noted since this change was applied via <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#903\" rel=\"nofollow\">DR 903</a> clangs behavior is valid.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-11-27T16:14:32.953", "Score": "2", "CreationDate": "2015-11-27T04:43:31.297", "ParentId": "33949332", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2015-11-27T16:14:32.953"}});