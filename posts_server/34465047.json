post_cb({"34465086": {"Id": "34465086", "PostTypeId": "2", "Body": "<p>First, since we're using a reference, [expr.const]/(2.9) must not be violated. (2.9.1) applies, though:</p>\n<blockquote>\n<p id=\"so_34465047_34465086_0\">an <em>id-expression</em> that refers to a variable or data member of\n  reference type unless the reference has a preceding initialization and \n  either <br>\u2014 it is initialized with a constant expression</br></p>\n</blockquote>\n<p>I.e. using <code>r</code> is fine, as long as the initializer - <code>i</code> - is a constant expression (this is shown below).<br>\nIt's also necessary to check whether the l-t-r conversion in line 3 is legal, i.e. (2.7) must not be violated. However, (2.7.1) applies:</br></p>\n<blockquote>\n<p id=\"so_34465047_34465086_1\">an lvalue-to-rvalue conversion (4.1) unless it is applied to <br> \u2014 a\n  non-volatile glvalue of integral or enumeration type that refers to\n  a complete non-volatile <code>const</code> object with a preceding\n  initialization, initialized with a constant expression, or</br></p>\n</blockquote>\n<p>\u2026so that's fine as well, since the (g)lvalue is <code>r</code>, and it refers to <code>i</code> - which is a non-volatile <code>const</code> object with a constant expression initializer (<code>1</code>).  </p>\n<p>We postponed showing that <code>i</code> is actually a constant expression, and once that's out of the way, we need to show that <code>r</code> is a constant expression.<br>\n[expr.const]/5 pertains to that: </br></p>\n<blockquote>\n<p id=\"so_34465047_34465086_2\">A <em>constant expression</em> is either a glvalue core constant expression\n  whose value refers to an entity that is a permitted result of a\n  constant expression (as defined below), or a prvalue core constant\n  expression whose value is an object where, for that object and its\n  subobjects:</p>\n<ul>\n<li>each non-static data member of reference type refers to an entity that is a permitted result of a constant expression, and</li>\n<li>if the object or subobject is of pointer type, it contains the address of an object with static storage duration, the address past\n  the end of such an object (5.7), the address of a function, or a null\n  pointer value.</li>\n</ul>\n<p id=\"so_34465047_34465086_3\">An entity is a <em>permitted result of a constant expression</em> if it is an object with static storage duration that is\n  either not a temporary object or is a temporary object whose value satisfies the above constraints, or it is a\n  function.</p>\n</blockquote>\n<p>Since <code>i</code> is, in the above context, a (g)lvalue, it has to be a permitted result of a constant expression - which it is, since it has static storage duration and certainly isn't a temporary. Thus <code>i</code> is a constant expression.</p>\n<p><code>r</code> is, however, treated as a prvalue in line 3. Since we already established that <code>r</code> is a core constant expression, we solely need to check the bullet points. They're clearly met, though.</p>\n<p>Hence <strong>the code is well-formed in namespace scope</strong>. It won't be in local scope, as <code>i</code> wouldn't be a permitted result of a constant expression anymore. <a href=\"http://coliru.stacked-crooked.com/a/6c003aa3056096af\">Clang gives a comprehensive error message</a>.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-12-25T18:45:58.207", "Score": "10", "CreationDate": "2015-12-25T17:52:01.753", "ParentId": "34465047", "CommentCount": "29", "OwnerUserId": "3647361", "LastEditDate": "2015-12-25T18:45:58.207"}, "bq_ids": {"n4140": {"so_34465047_34465086_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6185}, "so_34465047_34465086_2": {"length": 21, "quality": 0.75, "section_id": 6187}, "so_34465047_34465086_0": {"length": 14, "quality": 1.0, "section_id": 6185}}, "n3337": {"so_34465047_34465086_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 5946}, "so_34465047_34465086_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5946}}, "n4659": {"so_34465047_34465086_1": {"length": 18, "quality": 1.0, "section_id": 7687}, "so_34465047_34465086_2": {"length": 23, "quality": 0.8214285714285714, "section_id": 7690}, "so_34465047_34465086_0": {"length": 14, "quality": 1.0, "section_id": 7687}, "so_34465047_34465086_3": {"length": 20, "quality": 1.0, "section_id": 7690}}}, "34465047": {"ViewCount": "237", "Body": "<p>The code below doesn't compile under <a href=\"https://goo.gl/2oyoCt\" rel=\"nofollow\">GCC 5.3.0</a> because the declaration of <code>r</code> is missing a <code>constexpr</code> specifier. </p>\n<pre><code>const int i = 1;\nconst int&amp; r = i;\nconstexpr int j = r;\n</code></pre>\n<p>I believe the rejection is correct. How do I prove it using the working draft N4527?</p>\n", "AcceptedAnswerId": "34465086", "Title": "Is GCC correct in requiring the constexpr specifier for this reference declaration?", "CreationDate": "2015-12-25T17:44:28.693", "Id": "34465047", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-12-25T18:53:57.760", "LastEditorUserId": "1042389", "LastActivityDate": "2015-12-25T18:53:57.760", "Score": "7", "OwnerUserId": "1042389", "Tags": "<c++><gcc><language-lawyer><c++14><constexpr>", "AnswerCount": "1"}});