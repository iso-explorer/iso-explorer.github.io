post_cb({"24942577": {"ParentId": "24942339", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-07-24T19:40:28.890", "Score": "2", "LastEditorUserId": "432358", "LastEditDate": "2014-07-24T19:59:19.123", "Id": "24942577", "OwnerUserId": "432358", "Body": "<p>Yes <code>mutable</code> member can be modified in const method and most probably will remove that object ROMability. There are also other requirement to make an instance of class ROMable. Details can be found in <a href=\"http://www.stroustrup.com/Performance-TR.pdf\" rel=\"nofollow\">Techincal Report on C++ Perfomance</a> chapter 7 and <a href=\"http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=218\" rel=\"nofollow\">here</a></p>\n", "LastActivityDate": "2014-07-24T19:59:19.123"}, "24942417": {"ParentId": "24942339", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-07-24T19:30:42.093", "Score": "5", "LastEditorUserId": "1708801", "LastEditDate": "2014-07-25T13:01:13.423", "Id": "24942417", "OwnerUserId": "1708801", "Body": "<p>Yes, you are allowed to modify mutable members of const objects, this is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>7.1.1</code> <em>Storage class specifiers</em> which says:</p>\n<blockquote>\n<p id=\"so_24942339_24942417_0\">The mutable specifier on a class data member nullifies a const\n  specifier applied to the containing class object and permits\n  modification of the mutable class member even though the rest of the\n  object is const (7.1.6.1).</p>\n</blockquote>\n<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/18015.html\" rel=\"nofollow\">Technical Report on C++ Performance </a> section <code>7.1</code> <em>ROMability</em> covers the cases when a compiler could put data in read-only memory. In this case that would not be possible since it is clearly not immutable:</p>\n<blockquote>\n<p id=\"so_24942339_24942417_1\">The subject of ROMability therefore has performance application to all\n  programs, where immutable portions of the program can be placed in a\n  shared, read-only space.</p>\n</blockquote>\n", "LastActivityDate": "2014-07-25T13:01:13.423"}, "bq_ids": {"n4140": {"so_24942339_24942417_0": {"section_id": 5400, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_24942339_24942417_0": {"section_id": 5195, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_24942339_24942417_0": {"section_id": 6825, "quality": 0.9166666666666666, "length": 22}}}, "24942339": {"CommentCount": "5", "ViewCount": "218", "PostTypeId": "1", "LastEditorUserId": "19405", "CreationDate": "2014-07-24T19:26:45.430", "LastActivityDate": "2014-09-26T18:28:43.483", "Title": "Is modifying a mutable member of a const object valid?", "AcceptedAnswerId": "24942417", "LastEditDate": "2014-07-24T19:30:07.123", "Id": "24942339", "Score": "4", "Body": "<p>In C++ you can now have <code>mutable</code> members. This adds a layer of \"logical const\" to the language. How do these relate to read only data - will having a <code>mutable</code> member prevent a const class from being put into a <code>.rodata</code> section?</p>\n<pre><code>class Foo {\n    mutable int bar;\n\npublic:\n    Foo(): bar(0) {}\n    void set(int x) const { bar = x; }\n};\n\n// Can this be in a read-only section?\nconst Foo foo;\n\nint main(void)\n{\n    // Is this well-defined?\n    foo.set(5);\n}\n</code></pre>\n", "Tags": "<c++><const><mutable>", "OwnerUserId": "1166181", "AnswerCount": "2"}});