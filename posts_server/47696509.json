post_cb({"bq_ids": {"n4140": {"so_47696509_47696846_0": {"length": 44, "quality": 1.0, "section_id": 3919}}, "n3337": {"so_47696509_47696846_0": {"length": 44, "quality": 1.0, "section_id": 3779}}, "n4659": {"so_47696509_47696846_0": {"length": 42, "quality": 0.9545454545454546, "section_id": 4805}}}, "47696846": {"Id": "47696846", "PostTypeId": "2", "Body": "<p>Yes, it's thread safe. Quoting n3337 - <a href=\"https://timsong-cpp.github.io/cppwp/n3337/stmt.dcl#4\" rel=\"nofollow noreferrer\">[stmt.dcl]/4</a>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_47696509_47696846_0\">...such a variable is initialized the first time control passes\n  through its declaration; such a variable is considered initialized\n  upon the completion of its initialization. If the initialization exits\n  by throwing an exception, the initialization is not complete, so it\n  will be tried again the next time control enters the declaration. <strong>If\n  control enters the declaration concurrently while the variable is\n  being initialized, the concurrent execution shall wait for completion\n  of the initialization.</strong></p>\n</blockquote>\n<p>You perform copy initialization from a lambda's return value, but it's immaterial. The paragraph above doesn't constrain the initialization of <code>obj</code> to be value or direct initialization. All forms of initialization are applicable.</p>\n<p>And as a side note, if you must contend with such poorly written types, I'd argue your solution is very idiomatic. It doesn't artificially introduce a new named function to perform the initialization. Instead it keeps initialization code localized. That is a good thing in my book.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-12-07T14:24:41.203", "Score": "1", "CreationDate": "2017-12-07T14:06:24.127", "ParentId": "47696509", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-12-07T14:24:41.203"}, "47696509": {"ViewCount": "33", "Body": "<p>I'm using a function static variable that I want to initialize once by calling a setter:</p>\n<pre><code>void foo() {\n    static Obj obj;\n    obj.setName(\"name\"); // this should be called once\n    // use obj\n}\n</code></pre>\n<p>I don't want the setter to be called multiple times, also due to multi threading issues and I can't add a constructor to Obj since I don't own the code. So is this reasonable and thread safe:</p>\n<pre><code>void foo() {\n    static Obj obj = []() {\n        Obj o;\n        o.setName(\"name\");\n        return o;\n    }();\n    // use obj\n}\n</code></pre>\n", "AcceptedAnswerId": "47696846", "Title": "Calling setter once on function static variable", "CreationDate": "2017-12-07T13:46:38.143", "LastActivityDate": "2017-12-07T14:24:41.203", "CommentCount": "9", "LastEditDate": "2017-12-07T13:49:13.250", "PostTypeId": "1", "LastEditorUserId": "245452", "Id": "47696509", "Score": "1", "OwnerUserId": "245452", "Tags": "<c++><multithreading><c++11><static>", "AnswerCount": "1"}});