post_cb({"14017047": {"ParentId": "14016993", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>Following the comments made by @AlokSave, here is a later edit of the answer:</p>\n<p>Three are two possible explanations for this compiler flag. Since the documentation about it is scarce, it is somewhat unclear what its original meaning is, but there are, mainly, two possible explanations:</p>\n<p>1) Warning the user about returning an aggregate object make him aware that the stack could overflow if the aggregate object (which is allocated on the stack) is returned.</p>\n<p>2) Apparently, some old C compiler did not support returning aggrregates (you had to return a pointer).</p>\n<p>Which of the two is the best one, it is hard for me to judge. However, more relevant information about this flag may be found at the following links:</p>\n<p><a href=\"http://bytes.com/topic/c/answers/644271-aggregate-return-warnings\" rel=\"nofollow\">http://bytes.com/topic/c/answers/644271-aggregate-return-warnings</a></p>\n<p><a href=\"https://lists.gnu.org/archive/html/bug-gnulib/2012-09/msg00006.html\" rel=\"nofollow\">https://lists.gnu.org/archive/html/bug-gnulib/2012-09/msg00006.html</a></p>\n<p>Quoting from the latter link:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p id=\"so_14016993_14017047_3\">In the GNU apps I'm familiar with (Emacs, coreutils, ...)\n        we simply disable -Waggregate-return.  It a completely\n        anachronistic warning, since its motivation was to\n        support backwards compatibility with C compilers that\n        did not allow returning structures.  Those compilers\n        are long dead and are no longer of practical concern.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n", "OwnerUserId": "1284631", "LastEditorUserId": "1284631", "LastEditDate": "2012-12-25T12:30:44.387", "Id": "14017047", "Score": "5", "CreationDate": "2012-12-24T04:23:36.667", "LastActivityDate": "2012-12-25T12:30:44.387"}, "bq_ids": {"n4140": {"so_14016993_14017039_3": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}, "so_14016993_14017039_2": {"section_id": 7207, "quality": 0.8, "length": 12}}, "n3337": {"so_14016993_14017039_3": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}, "so_14016993_14017039_2": {"section_id": 6951, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_14016993_14017039_3": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}, "so_14016993_14017039_2": {"section_id": 8716, "quality": 0.8, "length": 12}}}, "14017039": {"ParentId": "14016993", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Aggregates are defined in the C and C++ standards. The C version says (C99 6.2.5 Types/20-21):</p>\n<blockquote>\n<p id=\"so_14016993_14017039_0\">A structure type describes a sequentially allocated nonempty set of member objects\n  (and, in certain circumstances, an incomplete array), each of which has an optionally\n  specified name and possibly distinct type.</p>\n<p id=\"so_14016993_14017039_1\">[...]</p>\n<p id=\"so_14016993_14017039_2\">Arithmetic types and pointer types are collectively called scalar types. Array and\n  structure types are collectively called aggregate types.</p>\n</blockquote>\n<p>The C++ version says (N3485 8.5.1 [dcl.init.aggr]/1):</p>\n<blockquote>\n<p id=\"so_14016993_14017039_3\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>Your second example (with <code>std::string</code>) doesn't trigger the warning because <code>std::string</code> has a user-provided constructor; and has private data members.</p>\n<p>It is my suspicion that this warning exists because it is considered poor style to return an aggregate in C; passing an out pointer is preferred in that language instead. I don't think it applies to C++ as much. But I can't confirm this with any data.</p>\n", "OwnerUserId": "82320", "LastEditorUserId": "82320", "LastEditDate": "2012-12-24T04:28:52.447", "Id": "14017039", "Score": "4", "CreationDate": "2012-12-24T04:22:21.967", "LastActivityDate": "2012-12-24T04:28:52.447"}, "14016993": {"CommentCount": "2", "AcceptedAnswerId": "14017047", "CreationDate": "2012-12-24T04:14:30.613", "LastActivityDate": "2012-12-25T12:30:44.387", "PostTypeId": "1", "ViewCount": "2397", "FavoriteCount": "0", "Title": "Confusion in regards to purpose/behavior of -Waggregate-return?", "Id": "14016993", "Score": "7", "Body": "<p>While looking at the <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options\" rel=\"noreferrer\">GCC's warning options</a>,  I came across <em>-Waggregate-return</em>.</p>\n<blockquote>\n<p id=\"so_14016993_14016993_0\"><strong>-Waggregate-return</strong><br>\n  Warn if any functions that return structures or unions are defined or called. (In languages where you can return an array, this also elicits a warning.) </br></p>\n</blockquote>\n<hr>\n<p><strong>small example that elicits the warning:</strong></p>\n<pre><code>class foo{};\nfoo f(void){return foo{};}\nint main(){}\n</code></pre>\n<blockquote>\n<p id=\"so_14016993_14016993_1\">$ g++ -std=c++0x -Waggregate-return -o main main.cpp<br>\n  main.cpp: In function \u2018foo f()\u2019:<br>\n  main.cpp:2:5: warning: function returns an aggregate [-Waggregate-return]</br></br></p>\n</blockquote>\n<hr>\n<p><strong>another small example that does not elicit the warning:</strong></p>\n<pre><code>#include &lt;string&gt;\nstd::string f(void){return \"test\";}\nint main(){}\n</code></pre>\n<hr>\n<p>What is the benefit gained from using -Waggregate-return?<br>\nWhy would someone want to be warned about this?<br>\nAlso, isn't std::string a class?- why arn't I warned about the 'returned aggregate' in the second example?</br></br></p>\n</hr></hr></hr>", "Tags": "<c++><gcc><g++><warnings><gcc-warning>", "OwnerUserId": "908939", "AnswerCount": "2"}});