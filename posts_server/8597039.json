post_cb({"8597255": {"ParentId": "8597039", "CommentCount": "2", "CreationDate": "2011-12-21T22:29:52.323", "OwnerUserId": "319403", "PostTypeId": "2", "Id": "8597255", "Score": "1", "Body": "<p>Not sure how standard it is, but if i add a <code>throw;</code> right before the end of <code>HandleException</code> and compile with g++, the resulting program tells me this:</p>\n<pre><code>root@xxxx [~/code]# ./a.out\nterminate called after throwing an instance of 'SomeSpecificError'\n  what():  17SomeSpecificError\nAborted\n</code></pre>\n<p>Note the exception type.  That's the exception that was thrown in <code>MightThrow</code>, not the one from <code>ReportError</code>.</p>\n<p>VS2010 reports a <code>SomeSpecificError</code> as well.</p>\n", "LastActivityDate": "2011-12-21T22:29:52.323"}, "8597527": {"ParentId": "8597039", "CommentCount": "1", "CreationDate": "2011-12-21T23:00:06.820", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "8597527", "Score": "2", "Body": "<p>C++11 (N3242):</p>\n<blockquote>\n<p id=\"so_8597039_8597527_0\">15.1p4: The memory for the exception object is allocated in an unspecified way, except as noted in 3.7.4.1. If a\n  handler exits by rethrowing, control is passed to another handler for the same exception. The exception\n  object is destroyed after either the last remaining active handler for the exception exits by any means other\n  than rethrowing, or the last object of type <code>std::exception_ptr</code> (18.8.5) that refers to the exception object is\n  destroyed, whichever is later.</p>\n</blockquote>\n<p>(<code>std::exception_ptr</code> is a C++11 feature, and isn't used in your example code.)</p>\n<blockquote>\n<p id=\"so_8597039_8597527_1\">15.3p7: A handler is considered active when initialization is complete for the formal parameter (if any) of the catch clause. ...  A handler\n  is no longer considered active when the catch clause exits or when <code>std::unexpected()</code> exits after being\n  entered due to a throw.</p>\n<p id=\"so_8597039_8597527_2\">15.3p8: The exception with the most recently activated handler that is still active is called the <em>currently handled exception</em>.</p>\n<p id=\"so_8597039_8597527_3\">15.1p8: A <em>throw-expression</em> with no operand rethrows the currently handled exception (15.3).</p>\n</blockquote>\n<p>Or equivalently, I think, <code>throw;</code> always refers to the exception caught by the innermost catch block which is currently executing.  Except that I haven't defined 'innermost' and 'executing' as carefully as the Standard defined all its terms above.</p>\n<p>And yes, more than one exception object can be allocated at a time, and C++ is required to make sure they live long enough to do \"the right thing\" when you try to rethrow.</p>\n", "LastActivityDate": "2011-12-21T23:00:06.820"}, "8597302": {"ParentId": "8597039", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2011-12-21T22:34:41.310", "Score": "0", "LastEditorUserId": "768469", "LastEditDate": "2011-12-21T22:54:05.880", "Id": "8597302", "OwnerUserId": "768469", "Body": "<p>There is only one \"active exception\" at a time.  When you <code>throw</code> another exception in an exception handler, in effect you are changing the type of the exception that is being propagated up the stack.</p>\n<p>(As an aside, is all this necessary?  Do you really find this code easy to read?)</p>\n<p>[update]</p>\n<p>As for the standard reference... ISO/IEC 14882:2003, section 15.3 [except.handle], paragraph 8 reads:</p>\n<blockquote>\n<p id=\"so_8597039_8597302_0\">An exception is considered handled upon entry to a handler. [Note: the\n  stack will have been unwound at that point. ]</p>\n</blockquote>\n<p>So another way to say this is, as soon as you enter the <code>catch</code> block, the original exception is no longer active.</p>\n<p>Also, the <code>uncaught_exception()</code> function will return <code>false</code> as soon as the <code>catch</code> block is entered.  Section 15.5.3 [except.uncaught] reads:</p>\n<blockquote>\n<p id=\"so_8597039_8597302_1\">The function</p>\n<p id=\"so_8597039_8597302_2\"><code>bool uncaught_exception() throw()</code></p>\n<p id=\"so_8597039_8597302_3\">returns true after completing evaluation of the object to be thrown until completing the\n  initialization of the exception-declaration in the matching handler\n  (18.6.4). This includes stack unwinding. If the exception is rethrown\n  (15.1), uncaught_exception() returns true from the point of rethrow\n  until the rethrown exception is caught again.</p>\n</blockquote>\n<p>[update 2]</p>\n<p>Also relevant is section 15.3 paragraph 4:</p>\n<blockquote>\n<p id=\"so_8597039_8597302_4\">The memory for the temporary copy of the exception being thrown is\n  allocated in an unspecified way, except as noted in 3.7.3.1. The\n  temporary persists as long as there is a handler being executed for\n  that exception. In particular, if a handler exits by executing a\n  <code>throw;</code> statement, that passes control to another handler for the same\n  exception, so the temporary remains. When the last handler being\n  executed for the exception exits by any means other than <code>throw;</code> the\n  temporary object is destroyed and the implementation may deallocate\n  the memory for the temporary object; any such deallocation is done in\n  an unspecified way. The destruction occurs immediately after the\n  destruction of the object declared in the exception-declaration in the\n  handler.</p>\n</blockquote>\n<p>So the original exception is destroyed as soon as the handler is exited via any means other than a naked <code>throw;</code>.  So if you <code>throw</code> some other exception, that exits the handler and destroys the original exception.</p>\n", "LastActivityDate": "2011-12-21T22:54:05.880"}, "8597039": {"CommentCount": "2", "ViewCount": "119", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-12-21T22:07:15.370", "LastActivityDate": "2011-12-21T23:00:06.820", "Title": "Is the lifetime of an exception affected by other exceptions?", "AcceptedAnswerId": "8597527", "LastEditDate": "2017-05-23T12:20:13.203", "Id": "8597039", "Score": "2", "Body": "<p>As a follow-up to <a href=\"https://stackoverflow.com/questions/8595087/is-the-lifetime-of-an-exception-affected-by-nested-handlers\">my previous question</a>:</p>\n<p>If I change the code as follows:</p>\n<pre><code>struct ExceptionBase : virtual std::exception{};\nstruct SomeSpecificError : virtual ExceptionBase{};\nstruct SomeOtherError : virtual ExceptionBase{};\n\nvoid MightThrow();\nvoid HandleException();\nvoid ReportError();\n\nint main()\n{\n  try\n  {\n    MightThrow();\n  }\n  catch( ... )\n  {\n    HandleException();\n  }\n}\n\nvoid MightThrow()\n{\n  throw SomeSpecificError();\n}\n\nvoid HandleException()\n{\n  try\n  {\n    throw;\n  }\n  catch( ExceptionBase const &amp; )\n  {\n    // common error processing\n  }\n\n  try\n  {\n    throw;\n  }\n  catch( SomeSpecificError const &amp; )\n  {\n    // specific error processing\n  }\n  catch( SomeOtherError const &amp; )\n  {\n    // other error processing\n  }\n\n  try\n  {\n    ReportError();\n  }\n  catch( ... )\n  {\n  }\n}\n\nvoid ReportError()\n{\n  throw SomeOtherError();\n}\n</code></pre>\n<p>The \"last handler\" for the original exception (i.e. the one in <code>main</code>) has not exited when the second exception is thrown, so are both exceptions active?  Is the original exception still available once we leave the handler for the second exception?</p>\n", "Tags": "<c++><exception><exception-handling>", "OwnerUserId": "484307", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_8597039_8597527_2": {"section_id": 3353, "quality": 0.7692307692307693, "length": 10}, "so_8597039_8597527_0": {"section_id": 3337, "quality": 0.8936170212765957, "length": 42}, "so_8597039_8597302_3": {"section_id": 3388, "quality": 0.7096774193548387, "length": 22}, "so_8597039_8597527_3": {"section_id": 3341, "quality": 0.75, "length": 6}, "so_8597039_8597527_1": {"section_id": 3352, "quality": 0.92, "length": 23}}, "n3337": {"so_8597039_8597527_3": {"section_id": 3211, "quality": 0.75, "length": 6}, "so_8597039_8597527_0": {"section_id": 3207, "quality": 0.8936170212765957, "length": 42}, "so_8597039_8597302_3": {"section_id": 3257, "quality": 0.7096774193548387, "length": 22}, "so_8597039_8597527_2": {"section_id": 3223, "quality": 0.7692307692307693, "length": 10}, "so_8597039_8597527_1": {"section_id": 3222, "quality": 0.96, "length": 24}}, "n4659": {"so_8597039_8597527_3": {"section_id": 7673, "quality": 0.75, "length": 6}, "so_8597039_8597527_0": {"section_id": 4104, "quality": 0.723404255319149, "length": 34}, "so_8597039_8597302_3": {"section_id": 4144, "quality": 0.5483870967741935, "length": 17}, "so_8597039_8597527_2": {"section_id": 4120, "quality": 0.7692307692307693, "length": 10}, "so_8597039_8597527_1": {"section_id": 4119, "quality": 0.6, "length": 15}}}});