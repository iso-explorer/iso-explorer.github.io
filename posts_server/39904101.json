post_cb({"39904258": {"ParentId": "39904101", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Yes, this is a defect in C++14, specifically <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1813\" rel=\"nofollow\">CWG 1813</a>.  Although it can be repaired by reading \"non-static data members\" to refer only to <em>direct</em> (non-inherited) non-static data members (as is probably necessary elsewhere), the chosen fix has been to replace the language you found problematic with the following:</p>\n<blockquote>\n<p id=\"so_39904101_39904258_0\">A standard-layout class is a class that: [...]</p>\n<ul>\n<li>has all non-static data members and bit-fields in the class and its base classes first declared in the same class, [...]</li>\n</ul>\n</blockquote>\n<p>This is a little tricky to get right; there is some resistance to the idea of considering inherited members as members of the derived class, even though <strong>[class.derived]</strong> has:</p>\n<blockquote>\n<p id=\"so_39904101_39904258_1\">[...] Unless redeclared in the derived class, members of a base class\n  are also considered to be members of the derived class. Members of a base class other than constructors are said to be <em>inherited</em> by the derived class. [...]</p>\n</blockquote>\n<p>Notwithstanding this, a number of places where both direct and inherited non-static data members are intended to be considered specifically call out inherited data members, for example also in <strong>[class]</strong> (after the resolution to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1672\" rel=\"nofollow\">CWG 1672</a>):</p>\n<blockquote>\n<p id=\"so_39904101_39904258_2\">8.6 - an aggregate or union type that includes one of the aforementioned types among its elements or nonstatic data members (including, recursively, an element or non-static data member of a subaggregate or contained union),</p>\n</blockquote>\n<p>Or in <strong>[basic.lval]</strong>:</p>\n<blockquote>\n<p id=\"so_39904101_39904258_3\">7.8 - If X is a non-union class type, the set M(X) is empty if X has no (possibly inherited (Clause 10))\n  non-static data members; [...]</p>\n</blockquote>\n<p>Meanwhile, in many places \"members\" has to be read as referring only to direct members to make sense; to begin with and only looking at non-static data members (not member functions), [expr.rel]/3.2, [expr.const]/5.1, [dcl.constexpr]/4.6, [class.mem]/17, /19, [special]/5, [class.ctor]/4.3, /4.4, /4.10, /4.12, [class.dtor]/5.6, [class.base.init]/2, /13.3, [class.copy]/12.2, /12.4, /18.2, /25.2, /25.4, /26.3, /27, [except.spec]/15.1.1.1, /15.2, /15.3 are all places where \"non-static data members\" could or should have \"direct\" prefixed.</p>\n<p>On the other hand, in some places (e.g. in the amended [class], or in [class.copy]/23.2-23.3, /28) \"members\" is implicitly taken to include inherited members, so it's a bit of a mess.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2016-10-07T13:25:29.970", "Id": "39904258", "Score": "8", "CreationDate": "2016-10-06T19:32:52.587", "LastActivityDate": "2016-10-07T13:25:29.970"}, "39904101": {"CommentCount": "4", "AcceptedAnswerId": "39904258", "CreationDate": "2016-10-06T19:23:26.977", "LastActivityDate": "2016-10-07T13:25:29.970", "PostTypeId": "1", "ViewCount": "139", "FavoriteCount": "1", "Title": "Definition of standard-layout class in C++14", "Id": "39904101", "Score": "5", "Body": "<p>A <em>standard-layout</em> class is defined in [class]/7 in C++14, as follows (emphasis is mine):  </p>\n<p>A <em>standard-layout</em> class is a class that:</p>\n<ul>\n<li>(7.1) \u2014 has no non-static data members of type non-standard-layout\nclass (or array of such types) or reference,</li>\n<li>(7.2) \u2014 has no virtual functions (10.3) and no virtual base classes\n(10.1),</li>\n<li>(7.3) \u2014 has the same access control (Clause 11) for all non-static\ndata members,</li>\n<li>(7.4) \u2014 has no non-standard-layout base classes,</li>\n<li>(7.5) \u2014 either has no non-static data members in the most derived\nclass <strong>and</strong> at most one base class with non-static data members, or has\nno base classes with non-static data members, and</li>\n<li>(7.6) \u2014 has no base classes of the same type as the first non-static\ndata member.</li>\n</ul>\n<p>My concern is in relation to bullet (7.5): how is it possible to have <strong>no</strong> non-static data members in the most derived class and at the same time having one base class with non-static data members?  </p>\n<p>In other words, aren't the non-static data members of the base class, also non-static data members of the most-derived class? </p>\n", "Tags": "<c++><c++14><language-lawyer>", "OwnerUserId": "5479741", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39904101_39904258_1": {"section_id": 6975, "quality": 0.7142857142857143, "length": 15}, "so_39904101_39904258_3": {"section_id": 369, "quality": 0.5454545454545454, "length": 6}, "so_39904101_39904258_2": {"section_id": 7239, "quality": 1.0, "length": 22}}, "n3337": {"so_39904101_39904258_1": {"section_id": 6721, "quality": 0.7142857142857143, "length": 15}, "so_39904101_39904258_3": {"section_id": 359, "quality": 0.5454545454545454, "length": 6}, "so_39904101_39904258_2": {"section_id": 6983, "quality": 1.0, "length": 22}}, "n4659": {"so_39904101_39904258_1": {"section_id": 8474, "quality": 0.9047619047619048, "length": 19}, "so_39904101_39904258_3": {"section_id": 7330, "quality": 0.8181818181818182, "length": 9}, "so_39904101_39904258_2": {"section_id": 8748, "quality": 1.0, "length": 22}}}});