post_cb({"3831158": {"ViewCount": "349", "Body": "<pre><code>// sizeofarray.cpp\n#include &lt;iostream&gt;\ntemplate &lt;typename T,int N&gt;\nint size(T (&amp;Array)[N])\n{\n  return N;\n}\n\nint main()\n{\n   char p[]=\"Je suis trop bon, et vous?\";\n   char q[size(p)]; // (A)\n   return 0;\n}\n</code></pre>\n<p>I heard that an array size in C++ must be a constant expression. So <code>char q[size(p)]</code> is invalid, am I right? But I got no errors when I tried</p>\n<pre><code> g++ -Wall sizeofarray.cpp\n</code></pre>\n<p>Why?</p>\n", "Title": "Using size of one array in another array", "CreationDate": "2010-09-30T13:48:40.597", "LastActivityDate": "2010-09-30T16:09:05.310", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-09-30T15:32:33.407", "LastEditorUserId": "165520", "Id": "3831158", "Score": "8", "OwnerUserId": "462878", "Tags": "<c++><arrays><templates><size>", "AnswerCount": "4"}, "3832079": {"PostTypeId": "2", "Body": "<p>I beg to differ with all the answers here. The code show is perfectly fine except for a  minor issue (which is definitely not VLA)</p>\n<pre><code>template &lt;typename T,int N&gt; \nint size(T (&amp;Array)[N]) \n{ \n  return N; \n} \n\nint main() \n{ \n   char p[]=\"Je suis trop bon, et vous?\"; \n   char q[sizeof(p)]; // (A), not sizeof and not size as in OP\n   return 0; \n} \n</code></pre>\n<p>I was wondering that the result of the sizeof is always a const value, and hence the code should be fine.</p>\n<p>The above code builds fine on VS 2010 and Comeau(strict mode)</p>\n<blockquote>\n<p id=\"so_3831158_3832079_0\">$5.3.3/6- \"The result is a constant of\n  type size_t. [Note: size_t is defined\n  in the standard header (18.1).\"</p>\n</blockquote>\n", "LastActivityDate": "2010-09-30T15:23:09.610", "Id": "3832079", "CommentCount": "1", "CreationDate": "2010-09-30T15:23:09.610", "ParentId": "3831158", "Score": "-1", "OwnerUserId": "418110"}, "3831333": {"Id": "3831333", "PostTypeId": "2", "Body": "<p>Like <a href=\"https://stackoverflow.com/questions/3831158/using-size-of-one-array-in-another-array/3831176#3831176\">Prasoon says</a>, it's not a constant expression. For now, you can get a constant-expression value of the size of an array like this:</p>\n<pre><code>template &lt;std::size_t N&gt;\nstruct type_of_size\n{\n    typedef char type[N];\n};\n\ntemplate &lt;typename T, std::size_t Size&gt;\ntypename type_of_size&lt;Size&gt;::type&amp; sizeof_array_helper(T(&amp;)[Size]);\n\n#define sizeof_array(pArray) sizeof(sizeof_array_helper(pArray))\n</code></pre>\n<p>Explanation <a href=\"https://stackoverflow.com/questions/3368883/how-does-this-size-of-array-template-function-work-closed\">here</a>. You basically encode the size of the array into the size of a type, then get the <code>sizeof</code> of that type, giving you:</p>\n<pre><code>char q[sizeof_array(p)];\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-09-30T14:07:06.350", "CommentCount": "1", "CreationDate": "2010-09-30T14:07:06.350", "ParentId": "3831158", "Score": "7", "OwnerUserId": "87234", "LastEditDate": "2017-05-23T11:59:09.820"}, "bq_ids": {"n4140": {"so_3831158_3831176_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 198}}, "n3337": {"so_3831158_3831176_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 192}}}, "3832556": {"PostTypeId": "2", "Body": "<p>I use g++ 4.4.3 and have the following alias so that I never forget to turn on the warnings:</p>\n<pre><code>$ alias g++\nalias g++='g++ -ansi -pedantic -Wall -W -Wconversion -Wshadow -Wcast-qual -Wwrite-strings'\n</code></pre>\n<p><strong>If compiled with the above, there would be some warnings.</strong> Following steps show how different options show different warnings.</p>\n<p>Compilation with no warning option does not show any warning</p>\n<pre><code>$ \\g++ sizeofarray.cpp \n</code></pre>\n<p>Turning on <code>-Wall</code></p>\n<pre><code>$ \\g++ -Wall sizeofarray.cpp\nsizeofarray.cpp: In function \u2018int main()\u2019:\nsizeofarray.cpp:12: warning: unused variable \u2018q\u2019\n</code></pre>\n<p>Turning on <code>-Wextra</code></p>\n<pre><code>$ \\g++ -Wall -Wextra sizeofarray.cpp \nsizeofarray.cpp: In function \u2018int main()\u2019:\nsizeofarray.cpp:12: warning: unused variable \u2018q\u2019\nsizeofarray.cpp: At global scope:\nsizeofarray.cpp: In instantiation of \u2018int size(T (&amp;)[N]) [with T = char, int N = 27]\u2019:\nsizeofarray.cpp:12:   instantiated from here\nsizeofarray.cpp:4: warning: unused parameter \u2018Array\u2019\n</code></pre>\n<p>Finally turning on <code>-pedantic</code> to catch the real problem</p>\n<pre><code>$ \\g++ -Wall -Wextra -pedantic  sizeofarray.cpp \nsizeofarray.cpp: In function \u2018int main()\u2019:\nsizeofarray.cpp:12: warning: ISO C++ forbids variable length array \u2018q\u2019\nsizeofarray.cpp:12: warning: unused variable \u2018q\u2019\nsizeofarray.cpp: At global scope:\nsizeofarray.cpp: In instantiation of \u2018int size(T (&amp;)[N]) [with T = char, int N = 27]\u2019:\nsizeofarray.cpp:12:   instantiated from here\nsizeofarray.cpp:4: warning: unused parameter \u2018Array\u2019\n</code></pre>\n", "LastActivityDate": "2010-09-30T16:09:05.310", "Id": "3832556", "CommentCount": "0", "CreationDate": "2010-09-30T16:09:05.310", "ParentId": "3831158", "Score": "-1", "OwnerUserId": "278326"}, "3831176": {"Id": "3831176", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_3831158_3831176_0\">I heard that an array size in C++ must be a constant expression. </p>\n</blockquote>\n<p>Correct</p>\n<blockquote>\n<p id=\"so_3831158_3831176_1\">So char q[size(p)] is invalid, am I right? </p>\n</blockquote>\n<p>According to ISO C++, yes!</p>\n<blockquote>\n<p id=\"so_3831158_3831176_2\">But I got no errors when I tried</p>\n<p id=\"so_3831158_3831176_3\">g++ -Wall sizeofarray.cpp</p>\n</blockquote>\n<p>That's because g++ supports VLA (<a href=\"http://en.wikipedia.org/wiki/Variable-length_array\" rel=\"nofollow\">Variable Length Array</a>) as an extension.</p>\n<p>In <code>C++0x</code> there is <a href=\"http://www2.research.att.com/~bs/C++0xFAQ.html#constexpr\" rel=\"nofollow\"><code>constexpr</code></a> feature with the help of which you can write</p>\n<pre><code>constexpr int size(T (&amp;Array)[N])\n{\n  return N;\n}\n</code></pre>\n<p>and then <code>char q[size(p)]</code> would be legal.</p>\n<p><strong>EDIT</strong> : Also read <a href=\"http://blogs.msdn.com/b/the1/archive/2004/05/07/128242.aspx\" rel=\"nofollow\">this</a> article [blog whatever] </p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-09-30T15:28:29.993", "CommentCount": "4", "CreationDate": "2010-09-30T13:51:09.950", "ParentId": "3831158", "Score": "4", "OwnerUserId": "165520", "LastEditDate": "2010-09-30T15:28:29.993"}});