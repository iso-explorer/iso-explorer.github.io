post_cb({"33291360": {"Id": "33291360", "PostTypeId": "2", "Body": "<p><sup>Disclaimer: This answer addresses C++.</sup></p>\n<p>You're accessing an object whose lifetime hasn't begun yet - <code>baz.bar</code> - which induces UB by [basic.life]/(6.1). </p>\n<p>Assuming <code>bar</code> has been brought to life (e.g. by initializing it), your code is fine; before the assignment, <code>foo</code> need not be alive as no operation is performed that depends on its value, and <em>during</em> it, the active member is changed by reusing the memory and effectively initializing it. The current rules aren't clear about the latter; see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1116\" rel=\"nofollow\"><strong>CWG #1116</strong></a>. However, the status quo is that such assignments are indeed setting the target member as active (=alive).</p>\n<p>Note that the assignment is sequenced (i.e. guaranteed to happen) after the value computation of the operands - see [expr.ass]/1. </p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-10-28T15:05:04.973", "Score": "4", "CreationDate": "2015-10-22T21:48:25.843", "ParentId": "33291146", "CommentCount": "12", "OwnerUserId": "3647361", "LastEditDate": "2015-10-28T15:05:04.973"}, "bq_ids": {"n4140": {"so_33291146_33291213_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 5811}}, "n3337": {"so_33291146_33291213_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 5584}}, "n4659": {"so_33291146_33291213_1": {"length": 15, "quality": 0.6818181818181818, "section_id": 7272}}}, "33291213": {"Id": "33291213", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33291146_33291213_0\">I remember that writing and reading from the same underlying memory between two sequence points is UB, but I am not certain.   </p>\n</blockquote>\n<p>Reading and writing to the same memory location in the same expression does not invoke undefined behavior until and unless that location is modified more than once between two sequence points or the side effect is unsequenced relative to the value computation using the value at the same location.   </p>\n<h3>C11: 6.5 Expressions:</h3>\n<blockquote>\n<p id=\"so_33291146_33291213_1\"><strong>If a side effect on a scalar object is unsequenced relative to</strong> either a different side effect on the same scalar object or <strong>a value computation using the value of the same scalar object</strong>, the behavior is undefined. [...]</p>\n</blockquote>\n<p>The expression   </p>\n<pre><code> baz.foo = 3.14 * baz.bar;  \n</code></pre>\n<p>has well defined behaviour <em>if <code>bar</code> is initialized before</em>. The reason is that the side effect to <code>baz.foo</code> is sequenced relative to the value computations of the objects <code>baz.foo</code> and <code>baz.bar</code>.   </p>\n<p>6.5.16 (p3):  </p>\n<blockquote>\n<p id=\"so_33291146_33291213_2\">[...] <strong>The side effect of updating the stored value of the left operand is sequenced after the value computations of the left and right operands</strong>. The evaluations of the operands are unsequenced.</p>\n</blockquote>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2015-10-28T16:01:58.873", "Score": "3", "CreationDate": "2015-10-22T21:36:13.227", "ParentId": "33291146", "CommentCount": "19", "OwnerUserId": "2455888", "LastEditDate": "2015-10-28T16:01:58.873"}, "33291146": {"ViewCount": "219", "Body": "<p>Is the following undefined behaviour?</p>\n<pre><code> union {\n   int foo;\n   float bar;\n } baz;\n\n baz.foo = 3.14 * baz.bar;\n</code></pre>\n<p>I remember that writing and reading from the same underlying memory between two sequence points is UB, but I am not certain.</p>\n", "AcceptedAnswerId": "33291213", "Title": "C/C++ unions and undefined behaviour", "CreationDate": "2015-10-22T21:31:48.873", "Id": "33291146", "CommentCount": "5", "LastEditDate": "2015-10-22T21:37:23.533", "PostTypeId": "1", "LastEditorUserId": "1848654", "LastActivityDate": "2015-10-28T16:01:58.873", "Score": "4", "OwnerUserId": "1819452", "Tags": "<c++><c><language-lawyer><undefined-behavior><unions>", "AnswerCount": "2"}});