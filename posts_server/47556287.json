post_cb({"47556287": {"CommentCount": "2", "CreationDate": "2017-11-29T15:27:11.947", "PostTypeId": "1", "AcceptedAnswerId": "47556411", "LastEditorUserId": "545127", "LastActivityDate": "2017-11-29T16:02:28.210", "LastEditDate": "2017-11-29T16:02:28.210", "ViewCount": "1752", "FavoriteCount": "4", "Title": "May a destructor be final?", "Id": "47556287", "Score": "25", "Body": "<p>Does the C++ standard allow a destructor to be declared as <code>final</code>? Like this:</p>\n<pre><code> class Derived: public Base\n {\n      ...\n      virtual ~Derived() final;\n }\n</code></pre>\n<p>And if so, does that prevent the declaration of a derived class:</p>\n<pre><code> class FurtherDerived: public Derived {// allowed?\n }\n</code></pre>\n<p>If it <em>is</em> allowed, is a compiler likely to issue a warning? Is declaring a destructor to be <code>final</code> a workable idiom for indicating that a class is not intended to be used as a base class?</p>\n<p>(There is <a href=\"https://stackoverflow.com/questions/11704406/whats-the-point-of-a-final-virtual-function\">no point in doing this in a ultimate base class</a>, only a derived class.)</p>\n", "Tags": "<c++><c++11><inheritance><destructor>", "OwnerUserId": "545127", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_47556287_47556411_2": {"section_id": 7005, "quality": 1.0, "length": 12}, "so_47556287_47556411_1": {"section_id": 5493, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_47556287_47556411_2": {"section_id": 6751, "quality": 1.0, "length": 12}, "so_47556287_47556411_1": {"section_id": 5279, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_47556287_47556411_2": {"section_id": 8502, "quality": 1.0, "length": 12}, "so_47556287_47556411_1": {"section_id": 6927, "quality": 0.6666666666666666, "length": 4}}}, "47556411": {"ParentId": "47556287", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_47556287_47556411_0\">May a C++ destructor be declared as <code>final</code>?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_47556287_47556411_1\">And if so, does that prevent declaration of a derived class:</p>\n</blockquote>\n<p>Yes, because the derived class would have to declare a destructor (either explicitly by you or implicitly by the compiler), and that destructor would be overriding a function declared <code>final</code>, which is ill-formed.</p>\n<p>The rule is <a href=\"http://eel.is/c++draft/class.derived#class.virtual-4.sentence-1\" rel=\"noreferrer\">[class.virtual]/4</a>:</p>\n<blockquote>\n<p id=\"so_47556287_47556411_2\">If a virtual function <code>f</code> in some class B is marked with the <em>virt-specifier</em> <code>final</code> and in a class D derived from B a function <code>D\u200b::\u200bf</code> overrides <code>B\u200b::\u200bf</code>, the program is ill-formed.</p>\n</blockquote>\n<p>It's the derivation itself that is ill-formed, it doesn't have to be used. </p>\n<blockquote>\n<p id=\"so_47556287_47556411_3\">Is declaring a destructor to be final a workable idiom for indicating that a class is not intended to be used as a base class?</p>\n</blockquote>\n<p>Effectively, but you should just mark the class <code>final</code>. It's quite a bit more explicit. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "47556411", "Score": "45", "CreationDate": "2017-11-29T15:33:58.683", "LastActivityDate": "2017-11-29T15:33:58.683"}});