post_cb({"bq_ids": {"n4140": {"so_36030781_36030938_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6143}}, "n3337": {"so_36030781_36030938_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5907}}, "n4659": {"so_36030781_36030938_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 7639}}}, "36030938": {"Id": "36030938", "PostTypeId": "2", "Body": "<p>This is undefined behavior according to 5.7.6:</p>\n<blockquote>\n<p id=\"so_36030781_36030938_0\">When two pointers to elements of the same array object are subtracted, the result is the difference of the subscripts of the two array elements. [...] Unless both pointers point to elements of the same array object, or\n  one past the last element of the array object, the behavior is undefined.</p>\n</blockquote>\n<p>In your code, pointer <code>two</code> is not pointing to an element of the same <code>int</code> array as pointer <code>one</code>. In fact, it is not pointing to any array element of <code>p</code>, because it points to the \"middle\" of one of the elements (which in itself is an undefined behavior).</p>\n", "LastEditorUserId": "335858", "LastActivityDate": "2016-03-17T09:07:49.033", "Score": "20", "CreationDate": "2016-03-16T09:02:33.513", "ParentId": "36030781", "CommentCount": "5", "LastEditDate": "2016-03-17T09:07:49.033", "OwnerUserId": "335858"}, "36031399": {"Id": "36031399", "PostTypeId": "2", "Body": "<p>Under some assumptions<sup>1</sup>, in C the third line:</p>\n<pre><code>int* two = (int*)((char*)p + 7);\n</code></pre>\n<p>already causes undefined behavior, because the pointer p isn't correctly aligned for the type it is referencing<sup>2</sup>.</p>\n<hr>\n<p><sup>1</sup> The assumption is that alignment requirements for type int are be higher than for type char. This is true on most moderns architectures. Since all alignments must be powers of two<sup>3</sup> and the value 7 isn't, the addition of that value to the pointer p cannot produce a pointer with an alignment that is as strict as is the alignment requirement for type int.</p>\n<p><sup>2</sup> (Quoted from: ISO/IEC 9899:201x 6.3.2.3 Pointers 7.)<br>\nA pointer to an object type may be converted to a pointer to a different object type. If the\nresulting pointer is not correctly aligned for the referenced type, the behavior is\nundefined.</br></p>\n<p><sup>3</sup> (Quoted from: ISO/IEC 9899:201x 6.2.8 Alignment of objects 4.)<br>\nEvery valid\nalignment value shall be a nonnegative integral power of two.</br></p>\n</hr>", "LastEditorUserId": "4082723", "LastActivityDate": "2016-08-17T13:06:14.630", "Score": "19", "CreationDate": "2016-03-16T09:24:18.430", "ParentId": "36030781", "CommentCount": "1", "LastEditDate": "2016-08-17T13:06:14.630", "OwnerUserId": "4082723"}, "36030781": {"ViewCount": "860", "Body": "<p>Is subtraction of non-divisible pointer addresses defined in C? In C++?</p>\n<p>Here's an example:</p>\n<pre><code>void* p = malloc(64);\n\nint* one = (int*)((char*)p);\nint* two = (int*)((char*)p + 7);\n\nprintf(\"%x %x %d %d\\n\", one, two, sizeof(int), two - one);\n</code></pre>\n<p><a href=\"http://ideone.com/qHUk6N\" rel=\"noreferrer\">Ideone link</a>.</p>\n<p>I get the output <code>8a94008 8a9400f 4 1</code>, so it seems like it does the division and truncates the remainder. Is the behavior defined?</p>\n", "AcceptedAnswerId": "36030938", "Title": "Subtraction of non-divisible pointer addresses", "CreationDate": "2016-03-16T08:55:59.443", "Id": "36030781", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-08-17T13:06:14.630", "Score": "17", "OwnerUserId": "2604492", "Tags": "<c++><c><pointers>", "AnswerCount": "2"}});