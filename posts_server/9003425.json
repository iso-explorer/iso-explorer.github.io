post_cb({"9003576": {"ParentId": "9003425", "CommentCount": "0", "Body": "<p>You shouldn't be defining it at all, unless you're writing your own version of <code>&lt;cstddef&gt;</code>; it certainly shouldn't be in \"many topmost header files\".</p>\n<p>If you are implementing your own standard library, then the only requirement is</p>\n<blockquote>\n<p id=\"so_9003425_9003576_0\">18.2/3 The macro NULL is an implementation-defined C++ null pointer constant</p>\n</blockquote>\n<p>so either <code>0</code> or <code>nullptr</code> is acceptable, and <code>nullptr</code> is better (if your compiler supports it) for the reason you give.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "9003576", "Score": "4", "CreationDate": "2012-01-25T13:34:41.470", "LastActivityDate": "2012-01-25T13:34:41.470"}, "9004188": {"ParentId": "9003425", "CommentCount": "0", "Body": "<p><strong>Maybe Not</strong></p>\n<p>If you have a particular format of overloading behaviour:</p>\n<pre><code>void foo(int);\nvoid foo(char*);\n</code></pre>\n<p>Then the behaviour of the code:</p>\n<pre><code>foo(NULL);\n</code></pre>\n<p>will change depending on whether NULL is changed to nullptr or not.</p>\n<p>Of course, there's another question as to whether it's safe to write such code as is present in this answer...</p>\n", "OwnerUserId": "24913", "PostTypeId": "2", "Id": "9004188", "Score": "4", "CreationDate": "2012-01-25T14:20:02.957", "LastActivityDate": "2012-01-25T14:20:02.957"}, "9003425": {"CommentCount": "0", "AcceptedAnswerId": "9003503", "CreationDate": "2012-01-25T13:22:36.390", "LastActivityDate": "2012-01-25T18:57:04.600", "PostTypeId": "1", "ViewCount": "5759", "FavoriteCount": "7", "Title": "Is it safe to #define NULL nullptr?", "Id": "9003425", "Score": "39", "Body": "<p>I have seen below macro in many topmost header files:</p>\n<pre><code>#define NULL 0  // C++03\n</code></pre>\n<p>In all over the code, <code>NULL</code> and <code>0</code> are used interchangeably. If I change it to.</p>\n<pre><code>#define NULL nullptr  // C++11\n</code></pre>\n<p>Will it cause any bad side effect ? I can think of the only (good) side effect as following usage will become ill-formed;</p>\n<pre><code>int i = NULL;\n</code></pre>\n", "Tags": "<c++><null><c++11><nullptr>", "OwnerUserId": "514235", "AnswerCount": "6"}, "9003503": {"ParentId": "9003425", "PostTypeId": "2", "CommentCount": "14", "Body": "<blockquote>\n<p id=\"so_9003425_9003503_0\">I have seen below macro in topmost header file:</p>\n</blockquote>\n<p>You shouldn't have seen that, the standard library defines it in <code>&lt;cstddef&gt;</code> (and <code>&lt;stddef.h&gt;</code>). And, IIRC, according to the standard, redefining names defined by standard header files results in undefined behaviour. So from a purely standardese viewpoint, you shouldn't do that.</p>\n<hr>\n<p>I've seen people do the following, for whatever reason their broken mind thought of:</p>\n<pre><code>struct X{\n  virtual void f() = NULL;\n}\n</code></pre>\n<p>(As in [incorrectly]: \"set the virtual table pointer to <code>NULL</code>\")</p>\n<p>This is only valid if <code>NULL</code> is defined as <code>0</code>, because <code>= 0</code> is the valid token for pure-virtual functions (<code>\u00a79.2 [class.mem]</code>).</p>\n<p>That said, <strong>if <code>NULL</code> was <em>correctly</em> used as a null pointer constant, then nothing should break.</strong></p>\n<p>However, beware that, even if seemingly used correctly, this will change:</p>\n<pre><code>void f(int){}\nvoid f(char*){}\n\nf(0); // calls f(int)\nf(nullptr); // calls f(char*)\n</code></pre>\n<p>However, if that was ever the case, it was almost certainly broken anyways.</p>\n</hr>", "OwnerUserId": "500104", "LastEditorUserId": "500104", "LastEditDate": "2012-01-25T18:57:04.600", "Id": "9003503", "Score": "39", "CreationDate": "2012-01-25T13:28:50.610", "LastActivityDate": "2012-01-25T18:57:04.600"}, "9003477": {"ParentId": "9003425", "CommentCount": "4", "Body": "<p>Far better is to search and replace <code>NULL</code> with <code>nullptr</code> throughout the code.</p>\n<p>It may be syntactically safe, but where would you put the <code>#define</code>? It creates code organisation problems.</p>\n", "OwnerUserId": "458742", "PostTypeId": "2", "Id": "9003477", "Score": "14", "CreationDate": "2012-01-25T13:26:36.550", "LastActivityDate": "2012-01-25T13:26:36.550"}, "9003676": {"ParentId": "9003425", "CommentCount": "1", "Body": "<p>No.  You're not allowed to (re)define standard macros.  And if you see</p>\n<pre><code>#define NULL 0\n</code></pre>\n<p>at the top of any file other than a standard header (and even there, it\nshould be in include guards, and typically in additional guards as\nwell), then that file is broken.  Remove it.</p>\n<p>Note that good compilers will typically define <code>NULL</code> with something \nlike:</p>\n<pre><code>#define NULL __builtin_null\n</code></pre>\n<p>, to access a compiler builtin which will trigger a warning if it is\nused in a non-pointer context.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "9003676", "Score": "7", "CreationDate": "2012-01-25T13:42:38.117", "LastActivityDate": "2012-01-25T13:42:38.117"}, "bq_ids": {"n4140": {"so_9003425_9003503_0": {"section_id": 523, "quality": 0.5714285714285714, "length": 4}, "so_9003425_9003576_0": {"section_id": 2515, "quality": 0.75, "length": 6}}, "n3337": {"so_9003425_9003503_0": {"section_id": 514, "quality": 0.5714285714285714, "length": 4}, "so_9003425_9003576_0": {"section_id": 6460, "quality": 0.75, "length": 6}}, "n4659": {"so_9003425_9003503_0": {"section_id": 544, "quality": 0.5714285714285714, "length": 4}, "so_9003425_9003576_0": {"section_id": 3249, "quality": 0.625, "length": 5}}}, "9003506": {"ParentId": "9003425", "CommentCount": "6", "Body": "<p>While it might break backwards-compatibility with older stuff that was badly written <em>(either that, or overly clever...)</em>, for your newer code, this is a non-issue. You should use <code>nullptr</code>, and not <code>NULL</code>, where you mean <code>nullptr</code>. Also, you should use <code>0</code> where you mean zero.</p>\n", "OwnerUserId": "549471", "PostTypeId": "2", "Id": "9003506", "Score": "2", "CreationDate": "2012-01-25T13:29:04.557", "LastActivityDate": "2012-01-25T13:29:04.557"}});