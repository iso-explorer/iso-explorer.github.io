post_cb({"27507361": {"CommentCount": "8", "AcceptedAnswerId": "27508570", "PostTypeId": "1", "LastEditorUserId": "4326278", "CreationDate": "2014-12-16T14:51:50.723", "LastActivityDate": "2015-09-08T17:20:29.423", "LastEditDate": "2014-12-16T22:48:00.543", "ViewCount": "1487", "FavoriteCount": "7", "Title": "Narrowing conversion to bool in list-initialization - strange behaviour", "Id": "27507361", "Score": "23", "Body": "<p>Consider this piece of C++11 code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X\n{\n    X(bool arg) { std::cout &lt;&lt; arg &lt;&lt; '\\n'; }\n};\n\nint main() \n{\n    double d = 7.0;\n    X x{d};\n}\n</code></pre>\n<p>There's a narrowing conversion from a double to a bool in the initialization of <code>x</code>. According to my understanding of the standard, this is ill-formed code and we should see some diagnostic. </p>\n<p>Visual C++ 2013 issues an error:</p>\n<pre><code>error C2398: Element '1': conversion from 'double' to 'bool' requires a narrowing conversion\n</code></pre>\n<p>However, both Clang 3.5.0 and GCC 4.9.1, using the following options</p>\n<pre><code>-Wall -Wextra -std=c++11 -pedantic \n</code></pre>\n<p>compile this code with <strong>no errors and no warnings</strong>. Running the program outputs a <code>1</code> (no surprise there).</p>\n<hr>\n<p>Now, let's go deeper into strange territory.</p>\n<p>Change <code>X(bool arg)</code> to <code>X(int arg)</code> and, suddenly, we've got an error from Clang</p>\n<pre><code>error: type 'double' cannot be narrowed to 'int' in initializer list [-Wc++11-narrowing]\n</code></pre>\n<p>and a warning from GCC</p>\n<pre><code>warning: narrowing conversion of 'd' from 'double' to 'int' inside { } [-Wnarrowing]\n</code></pre>\n<p>This looks more like what I was expecting.</p>\n<hr>\n<p>Now, keep the <code>bool</code> constructor argument (that is, revert to <code>X(bool arg)</code>), and change <code>double d = 7.0;</code> to <code>int d = 7;</code>. Again, a narrowing error from Clang, but GCC doesn't issue any diagnostic at all and compiles the code.</p>\n<p>There are a few more behaviour variants that we can get if we pass the constant directly to the constructor, some strange, some expected, but I won't list them here - this question is getting too long as it is.</p>\n<hr>\n<p>I'd say this is one of the rare cases when VC++ is right and Clang and GCC are wrong when it comes to standard-conformance, but, given the respective track records of these compilers, I'm still very hesitant about this. </p>\n<p><strong>What do the experts think?</strong></p>\n<hr>\n<p>Standard references (quotes from the final standard document for C++11, ISO/IEC 14882-2011):</p>\n<p>In 8.5.4 [dcl.init.list] paragraph 3, we have:</p>\n<blockquote>\n<p id=\"so_27507361_27507361_0\">\u2014 Otherwise, if T is a class type, constructors are considered. The applicable constructors are enumerated\n  and the best one is chosen through overload resolution (13.3, 13.3.1.7). If a narrowing conversion (see\n  below) is required to convert any of the arguments, the program is ill-formed.</p>\n</blockquote>\n<p>In the same section, in paragraph 7, we have:</p>\n<blockquote>\n<p id=\"so_27507361_27507361_1\">A narrowing conversion is an implicit conversion<br>\n  \u2014 from a floating-point type to an integer type, or<br>\n  \u2014 from long double to double or float, or from double to float, except where the source is a constant\n  expression and the actual value after conversion is within the range of values that can be represented\n  (even if it cannot be represented exactly), or<br>\n  \u2014 from an integer type or unscoped enumeration type to a floating-point type, except where the source\n  is a constant expression and the actual value after conversion will fit into the target type and will\n  produce the original value when converted back to the original type, or<br>\n  \u2014 from an integer type or unscoped enumeration type to an integer type that cannot represent all the\n  values of the original type, except where the source is a constant expression and the actual value after\n  conversion will fit into the target type and will produce the original value when converted back to the\n  original type.<br>\n  [ Note: As indicated above, such conversions are not allowed at the top level in list-initializations.\u2014end\n  note ]</br></br></br></br></br></p>\n</blockquote>\n<p>In 3.9.1 [basic.fundamental] paragraph 7, we have: </p>\n<blockquote>\n<p id=\"so_27507361_27507361_2\">Types bool, char, char16_t, char32_t, wchar_t, and the signed and unsigned integer types are collectively\n  called integral types.48 A synonym for integral type is integer type.</p>\n</blockquote>\n<p>(I was starting to question everything at this stage...)</p>\n</hr></hr></hr></hr>", "Tags": "<c++><c++11><standards-compliance><narrowing><list-initialization>", "OwnerUserId": "4326278", "AnswerCount": "1"}, "27508570": {"ParentId": "27507361", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>This simply looks like a bug, if we try the following:</p>\n<pre><code>bool b {3} ;\n</code></pre>\n<p>both <code>gcc</code> and <code>clang</code> issue a diagnostic, for example <code>gcc</code> says:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_0\">warning: narrowing conversion of '3' from 'int' to 'bool' inside { } [-Wnarrowing]</p>\n</blockquote>\n<p>This is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"noreferrer\">draft C++11 standard</a> by section <code>8.5.4</code> <em>List-initialization</em> paragraph <em>7</em> which says:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_1\">A narrowing conversion is an implicit conversion</p>\n<p id=\"so_27507361_27508570_2\">[...]</p>\n<ul>\n<li>from an integer type or unscoped enumeration type to an integer type\n  that cannot represent all the values of the original type, except\n  where the source is a constant expression and the actual value after\n  conversion will fit into the target type and will produce the original\n  value when converted back to the original type.</li>\n</ul>\n</blockquote>\n<p>This is same paragraph that covers your example and the following simpler example:</p>\n<pre><code>bool a {3.0} ;\n</code></pre>\n<p>which would be covered by this bullet from paragraph <code>7</code> quoted above:</p>\n<blockquote id=\"so_27507361_27508570_3\">\n<ul>\n<li>from a floating-point type to an integer type, or</li>\n</ul>\n</blockquote>\n<p>From paragraph <code>3</code>, this is ill-formed an requires a diagnostic:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_4\">List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_27507361_27508570_5\">[...]</p>\n<ul>\n<li>Otherwise, if the initializer list has a single element, the object or reference is initialized from that\n  element; if a narrowing conversion (see below) is required to convert the element to T, the program is\n  ill-formed.</li>\n</ul>\n</blockquote>\n<p>which <code>gcc</code> produces no diagnostic but <code>clang</code> does provide the following warning, although not the narrowing conversion warning we should see:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_6\">warning: implicit conversion from 'double' to 'bool' changes value from 3 to true [-Wliteral-conversion]</p>\n</blockquote>\n<p>Note, section <code>3.9.1</code> <em>[basic.fundamental]</em> says:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_7\">Types <strong>bool</strong>, char, char16_t, char32_t, wchar_t, and the signed and unsigned integer types are collectively\n  called <strong>integral types</strong>.48 <strong>A synonym for integral type is integer type</strong>.</p>\n</blockquote>\n<p>You should file a bug report with both <a href=\"http://llvm.org/docs/HowToSubmitABug.html\" rel=\"noreferrer\">clang</a> and <a href=\"https://gcc.gnu.org/bugzilla/\" rel=\"noreferrer\">gcc</a>.</p>\n<p>Jonathan Wakely notes that the EDG compiler gives a narrowing error for the OPs code, which is a strong indication that this indeed should produce a diagnostic.</p>\n<p><b>Update</b></p>\n<p>I submitted a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65043\" rel=\"noreferrer\">gcc</a> and <a href=\"http://llvm.org/bugs/show_bug.cgi?id=22566\" rel=\"noreferrer\">clang</a> bug report.</p>\n<p>The <a href=\"http://llvm.org/bugs/show_bug.cgi?id=22566#c1\" rel=\"noreferrer\">clang bug report has been updated as fixed</a>:</p>\n<blockquote>\n<p id=\"so_27507361_27508570_8\">Fixed in r229792.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-09-08T17:20:29.423", "Id": "27508570", "Score": "13", "CreationDate": "2014-12-16T15:52:52.727", "LastActivityDate": "2015-09-08T17:20:29.423"}, "bq_ids": {"n4140": {"so_27507361_27508570_7": {"section_id": 7216, "quality": 0.8947368421052632, "length": 17}, "so_27507361_27508570_3": {"section_id": 3329, "quality": 1.0, "length": 4}, "so_27507361_27508570_4": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_27507361_27507361_0": {"section_id": 3325, "quality": 0.875, "length": 21}, "so_27507361_27507361_1": {"section_id": 3329, "quality": 0.8611111111111112, "length": 93}, "so_27507361_27507361_2": {"section_id": 7216, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_27507361_27508570_7": {"section_id": 6960, "quality": 0.8947368421052632, "length": 17}, "so_27507361_27508570_3": {"section_id": 3199, "quality": 1.0, "length": 4}, "so_27507361_27508570_4": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_27507361_27507361_0": {"section_id": 3195, "quality": 0.875, "length": 21}, "so_27507361_27507361_1": {"section_id": 3199, "quality": 0.9629629629629629, "length": 104}, "so_27507361_27507361_2": {"section_id": 6960, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_27507361_27508570_7": {"section_id": 8725, "quality": 0.9473684210526315, "length": 18}, "so_27507361_27508570_3": {"section_id": 37, "quality": 1.0, "length": 4}, "so_27507361_27508570_4": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_27507361_27507361_0": {"section_id": 4091, "quality": 0.875, "length": 21}, "so_27507361_27507361_1": {"section_id": 4095, "quality": 0.8611111111111112, "length": 93}, "so_27507361_27507361_2": {"section_id": 8725, "quality": 0.9473684210526315, "length": 18}}}});