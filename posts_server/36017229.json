post_cb({"36017435": {"ParentId": "36017229", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-03-15T16:54:08.053", "Score": "5", "LastEditorUserId": "4524862", "LastEditDate": "2016-03-15T17:52:15.300", "Id": "36017435", "OwnerUserId": "4524862", "Body": "<p>Immediate values, or literals, like <code>3</code>, <code>3.14</code> or <code>\"Hello\"</code> have types in C++.  The type of <code>3.14</code> is <code>double</code>, which is larger than <code>float</code> and causes this warning.  By \"larger\" I mean that it can hold values that do not fit into <code>float</code> if converted, at which point the language may behave in an unexpected way.</p>\n<p>You may use suffixes to specify what type you want, <code>3.14F</code> will be float.</p>\n<p>Similarly, for integers you have <code>3U</code> for unsigned and <code>3L</code> for long and even combinations of those.  C++11 features user-defined suffixes as well.</p>\n", "LastActivityDate": "2016-03-15T17:52:15.300"}, "36017229": {"CommentCount": "1", "ViewCount": "2983", "CreationDate": "2016-03-15T16:44:18.597", "LastActivityDate": "2016-03-15T17:52:15.300", "Title": "truncation from double to float?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "36017229", "Score": "3", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(void)\n{\n    float haha[2];\n    float (&amp;ptr)[2] = haha;\n    ptr[0] = 0.54;\n    ptr[1] = 0.65;\n\n    cout &lt;&lt; haha[0] &lt;&lt; '\\n' &lt;&lt; haha[1];\n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<p>I am currently learning complicated array declarations using primer C++ and in my code here i get warnings saying <code>Warning  C4305   '=': truncation from 'double' to 'float'    Array</code> for both <code>ptr[0]</code> and <code>ptr[1]</code> for some reason but i don't see doubles anywhere but when i modify the code to </p>\n<pre><code>ptr[0] = (float)0.54;\nptr[1] = (float)0.65;\n</code></pre>\n<p>i seem to have no warnings can anyone explain why? Thank you in advance!</p>\n", "Tags": "<c++><floating-point>", "OwnerUserId": "5348801", "AnswerCount": "2"}, "36017726": {"ParentId": "36017229", "CommentCount": "0", "CreationDate": "2016-03-15T17:07:05.577", "OwnerUserId": "3658660", "PostTypeId": "2", "Id": "36017726", "Score": "4", "Body": "<p>From Standard 2.14.4, <code>Floating literals</code>:</p>\n<blockquote>\n<p id=\"so_36017229_36017726_0\">The type of a floating literal is double unless explicitly specified by a suffix. The suffixes <code>f</code> and <code>F</code> specify float, the suffixes <code>l</code> and <code>L</code> specify long double.</p>\n</blockquote>\n<p>Then, floating literals are always double, unless when explicitly specified by a suffix. Casting to float may work too (be careful with numbers which fits in double's size and not in float's), but you should use casting when it is your only option (not this case). In your code just use a suffix (<code>0.54f</code>) and it will be fine.</p>\n", "LastActivityDate": "2016-03-15T17:07:05.577"}, "bq_ids": {"n4140": {"so_36017229_36017726_0": {"section_id": 5348, "quality": 0.875, "length": 14}}, "n3337": {"so_36017229_36017726_0": {"section_id": 5145, "quality": 0.875, "length": 14}}, "n4659": {"so_36017229_36017726_0": {"section_id": 6773, "quality": 0.875, "length": 14}}}});