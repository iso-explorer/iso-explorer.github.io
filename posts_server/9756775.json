post_cb({"9756825": {"ParentId": "9756775", "CommentCount": "0", "Body": "<p>No, the vectors won't be moved around. The manipulations of the tree just rearrange pointers between the nodes. They don't move nodes or their contents in memory.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "9756825", "Score": "1", "CreationDate": "2012-03-18T07:50:37.630", "LastActivityDate": "2012-03-18T07:50:37.630"}, "9756846": {"ParentId": "9756775", "LastEditDate": "2012-03-18T08:00:40.613", "CommentCount": "2", "CreationDate": "2012-03-18T07:54:29.970", "OwnerUserId": "17027", "LastEditorUserId": "17027", "PostTypeId": "2", "Id": "9756846", "Score": "1", "Body": "<p>I believe the C++03 does not make any guarantees of stability <em>of the data in the memory</em>, and this would be an implementation detail (and actually not something you can safely assume without testing).</p>\n<p>Note that the preservation of <em>iterators</em> to the map and the location of the actual vector in the memory are <em>completely different things</em>. The validity of iterators is clearly defined (both when they're valid and when they're not) in the C++ spec, but the actual internal behavior of the tree isn't.</p>\n<p>That said, any decent compiler (for release builds/with optimizations enabled) would optimize the implementation to not actually copy the vector when it's being moved around in the tree, and C++11 implementations of <code>std::map</code> would use move semantics to guarantee that behavior.</p>\n<p>What you cannot assume is that internally only pointers are moved.</p>\n", "LastActivityDate": "2012-03-18T08:00:40.613"}, "9756823": {"ParentId": "9756775", "LastEditDate": "2017-05-23T12:01:49.533", "CommentCount": "4", "CreationDate": "2012-03-18T07:50:00.673", "OwnerUserId": "635654", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "9756823", "Score": "9", "Body": "<p>See this one:\n<a href=\"https://stackoverflow.com/questions/516007/stdmap-pointer-to-map-key-value-is-this-possible\">std::map, pointer to map key value, is this possible?</a></p>\n<p>the <em>second</em> top answer:</p>\n<blockquote>\n<p id=\"so_9756775_9756823_0\">Section 23.1.2#8 (associative container requirements):</p>\n<p id=\"so_9756775_9756823_1\">\"The insert members shall not affect the validity of iterators and references to the container, and the erase members shall invalidate only iterators and references to the erased elements.\"</p>\n<p id=\"so_9756775_9756823_2\">So <em>yes</em> storing pointers to data members of a map element is guaranteed to be valid, unless you remove <em>that</em> element.</p>\n</blockquote>\n<p>So, if the references are preserved, the data cannot be copied into a different part of memory. And if that is the case, I don't see the point in performing any copy at all...</p>\n", "LastActivityDate": "2012-03-18T07:50:00.673"}, "bq_ids": {"n4140": {"so_9756775_9756823_1": {"section_id": 745, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_9756775_9756823_1": {"section_id": 734, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_9756775_9756823_1": {"section_id": 803, "quality": 0.9333333333333333, "length": 14}}}, "9756775": {"CommentCount": "0", "ViewCount": "956", "CreationDate": "2012-03-18T07:35:55.583", "LastActivityDate": "2012-03-18T08:00:40.613", "PostTypeId": "1", "AcceptedAnswerId": "9756823", "FavoriteCount": "1", "Title": "Is second part of map<..,..> stable?", "Id": "9756775", "Score": "6", "Body": "<p>If we have a <code>map &lt;int, vector&lt;int&gt; &gt;</code> are <code>vector</code>s moved when the red-black tree of map changes or it stores pointers to <code>vector</code>s or something like that and does not move them(else working with maps won't be O(lg n) anymore e.g. if we push_back elements to some <code>vector</code>s)</p>\n", "Tags": "<c++><stl><map>", "OwnerUserId": "913461", "AnswerCount": "3"}});