post_cb({"38933823": {"CommentCount": "3", "AcceptedAnswerId": "38936111", "PostTypeId": "1", "LastEditorUserId": "2756719", "CreationDate": "2016-08-13T14:41:15.083", "LastActivityDate": "2016-08-13T19:12:33.383", "LastEditDate": "2016-08-13T15:54:53.287", "ViewCount": "78", "FavoriteCount": "0", "Title": "Can the conditional operator produce a cv-qualified, array, or function type when used on two xvalues of cv-unqualified non-array object type?", "Id": "38933823", "Score": "4", "Body": "<p>Given two cv-unqualified non-array object types <code>T1</code> and <code>T2</code>, can the expression <code>true ? std::declval&lt;T1&gt;() : std::declval&lt;T2&gt;()</code> ever have a cv-qualified, array, or function type? I'm fairly sure it can't, but want to make sure that I didn't overlook anything.</p>\n<hr>\n<p>Motivation: The current proposed resolution of <a href=\"http://wg21.link/LWG2465\" rel=\"nofollow\">LWG issue 2465</a> doesn't decay the type of a conditional expression of the form <code>true? std::declval&lt;D1&gt;() : std::declval&lt;D2&gt;()</code>, where <code>D1</code> and <code>D2</code> are produced by <code>std::decay</code> (and hence are cv-unqualified non-array object types<sup>*</sup>). This is correct only if decaying the type of the conditional expression has no effect (which is not true if the type is a cv-qualified, array, or function type<sup>**</sup>).</p>\n<p><sub><sup>*</sup> Ignoring the \"abnominable function types\" case, which is never going to produce a valid expression anyway, and the <code>void</code> case, which is a separate problem.</sub><br/>\n<sub><sup>**</sup> Per <a href=\"http://eel.is/c++draft/expr#5\" rel=\"nofollow\">[expr]/5</a>, expressions never have reference type.</sub></p>\n</hr>", "Tags": "<c++><language-lawyer>", "OwnerUserId": "2756719", "AnswerCount": "1"}, "38936111": {"ParentId": "38933823", "CommentCount": "1", "Body": "<p>We can prove this using <a href=\"http://eel.is/c++draft/expr.cond\" rel=\"nofollow\">[expr.cond]</a>:</p>\n<blockquote id=\"so_38933823_38936111_0\">\n<ol start=\"2\">\n<li>If either the second or the third operand has type <code>void</code>, [...]</li>\n</ol>\n</blockquote>\n<p>The first sub-bullet talks about <em>throw-expression</em>s as operands, the second one gives result type <code>void</code>.</p>\n<blockquote id=\"so_38933823_38936111_1\">\n<ol start=\"3\">\n<li>Otherwise, if the second and third operand are glvalue bit-fields of the same value category and of types <em>cv1</em>\n<code>T</code> and <em>cv2</em> <code>T</code>, respectively, the operands are considered to be of type <em>cv</em> <code>T</code> for the remainder of this section,\n  where <em>cv</em> is the union of <em>cv1</em> and <em>cv2</em>.</li>\n</ol>\n</blockquote>\n<p>The union of empty sets is empty, so nothing to worry about here.</p>\n<blockquote id=\"so_38933823_38936111_2\">\n<ol start=\"4\">\n<li>Otherwise, if the second and third operand have different types and either has (possibly cv-qualified) class\n  type, or if both are glvalues of the same value category and the same type except for cv-qualification, an\n  attempt is made to form an implicit conversion sequence (13.3.3.1) from each of those operands to the type\n  of the other.</li>\n</ol>\n</blockquote>\n<p>Let's analyze each following case:</p>\n<blockquote id=\"so_38933823_38936111_3\">\n<ul>\n<li>(4.1) If <code>E2</code> is an lvalue, <strong>the target type is \u201clvalue reference to <code>T2</code>\u201d</strong>, [..].</li>\n<li>(4.2) If <code>E2</code> is an xvalue, <strong>the target type is \u201crvalue reference to <code>T2</code>\u201d</strong>,  [..].</li>\n</ul>\n</blockquote>\n<p>Expression is thus of type <code>T2</code>, cv-unqualified by assumption.</p>\n<blockquote id=\"so_38933823_38936111_4\">\n<ul>\n<li>(4.3) If <code>E2</code> is a prvalue or if neither of the conversion sequences above can be formed and at least one of the operands has (possibly cv-qualified) class type:\n  \n  <ul>\n<li>if <code>T1</code> and <code>T2</code> are the same class type (ignoring cv-qualification), or one is a base class of the other, and <code>T2</code> is at least as cv-qualified as <code>T1</code>, <strong>the target type is <code>T2</code></strong>,</li>\n<li>otherwise, the target type is the type that <code>E2</code> would have after applying the lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) standard conversions.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>In the first case, the target type is cv-unqualified by assumption.</p>\n<p>Finally, l-t-r conversions do not add cv-qualification (<a href=\"http://eel.is/c++draft/conv.lval#1\" rel=\"nofollow\">[conv.lval]/1</a>). And *-to-pointer conversions cannot do that, either; in fact, what they yield after an application is a prvalue of pointer (that is, non-array, non-class) type, which as per <a href=\"http://eel.is/c++draft/expr#6\" rel=\"nofollow\">[expr]/6</a> is never cv-qualified. Since <code>E2</code> is of type <code>T2</code>, the target type is cv-unqualified in this case, too.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "38936111", "Score": "3", "CreationDate": "2016-08-13T19:12:33.383", "LastActivityDate": "2016-08-13T19:12:33.383"}, "bq_ids": {"n4140": {"so_38933823_38936111_3": {"section_id": 3321, "quality": 0.8, "length": 8}, "so_38933823_38936111_4": {"section_id": 6169, "quality": 0.5128205128205128, "length": 20}, "so_38933823_38936111_0": {"section_id": 6168, "quality": 1.0, "length": 6}, "so_38933823_38936111_2": {"section_id": 6169, "quality": 0.8484848484848485, "length": 28}}, "n3337": {"so_38933823_38936111_3": {"section_id": 3191, "quality": 0.8, "length": 8}, "so_38933823_38936111_2": {"section_id": 5930, "quality": 0.8484848484848485, "length": 28}, "so_38933823_38936111_0": {"section_id": 5929, "quality": 1.0, "length": 6}}, "n4659": {"so_38933823_38936111_0": {"section_id": 7665, "quality": 1.0, "length": 6}, "so_38933823_38936111_3": {"section_id": 7667, "quality": 1.0, "length": 10}, "so_38933823_38936111_4": {"section_id": 7667, "quality": 1.0, "length": 39}, "so_38933823_38936111_2": {"section_id": 7667, "quality": 0.9696969696969697, "length": 32}, "so_38933823_38936111_1": {"section_id": 7666, "quality": 0.8095238095238095, "length": 17}}}});