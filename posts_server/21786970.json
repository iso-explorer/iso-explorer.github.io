post_cb({"21787798": {"Id": "21787798", "PostTypeId": "2", "Body": "<p>First we visit 24.2.1/7 to learn what a valid range is:</p>\n<p><code>Range [i,j) is valid if and only if\nj is reachable from i. The result of the application of functions in the library to invalid ranges is undefined.</code></p>\n<p>Then it's a simple matter to look up the <code>vector</code> constructor in sequence container requirements 23.2.3/table 100, noting that it requires an iterator range, that from the previous section must be valid. This means that in the example provided you have indefined behavior.</p>\n", "LastActivityDate": "2014-02-14T19:21:27.760", "CommentCount": "0", "CreationDate": "2014-02-14T19:21:27.760", "ParentId": "21786970", "Score": "2", "OwnerUserId": "251738"}, "21787293": {"Id": "21787293", "PostTypeId": "2", "Body": "<p>It will be <strong>undefined behavior.</strong></p>\n<p>Looking at the Standard:</p>\n<p>N3690 23.3.7.2<code>[vector.cons]</code></p>\n<pre><code>template &lt;class InputIterator&gt;\n    vector(InputIterator first, InputIterator last,\n    const Allocator&amp; = Allocator());\n</code></pre>\n<blockquote>\n<p id=\"so_21786970_21787293_0\"><code>9.</code> Effects: Constructs a vector equal to the range [first,last), using\n  the specified allocator.  </p>\n</blockquote>\n<p>It says that the range has to be <strong>[first, last)</strong>, but the standard doesn't mention what happens if that isn't the case. It therefore is <strong>undefined behavior.</strong></p>\n", "LastEditorUserId": "1942027", "LastActivityDate": "2014-02-15T07:09:05.167", "Score": "4", "CreationDate": "2014-02-14T18:51:22.263", "ParentId": "21786970", "CommentCount": "0", "OwnerUserId": "1942027", "LastEditDate": "2014-02-15T07:09:05.167"}, "21787250": {"Id": "21787250", "PostTypeId": "2", "Body": "<p>I would say that this would result in undefined behavior.</p>\n<p>According to <a href=\"http://cppreference.com\" rel=\"nofollow\">http://cppreference.com</a>, <code>vector::vector(first, last)</code> takes an <em>input iterator</em>, and, regarding iteration, this category of iterators are only required to provide <code>operator!=</code> and <code>operator++</code>.</p>\n<p>The <code>vector</code> constructor will basically run a loop equivalent to:</p>\n<pre><code>while (first != last) {\n    push_back(*first);\n    ++first;\n}\n</code></pre>\n<p>This will cause an infinite loop, but might be guarded by your standard library implementation by some assertion (at least in debug builds).</p>\n", "LastActivityDate": "2014-02-14T18:49:05.047", "CommentCount": "1", "CreationDate": "2014-02-14T18:49:05.047", "ParentId": "21786970", "Score": "1", "OwnerUserId": "34855"}, "21786970": {"ViewCount": "1473", "Body": "<p>Assuming you have a valid starting point:</p>\n<pre><code>std::vector&lt;UINT32&gt; host = {1,2,3,4,5};\n</code></pre>\n<p>When you try to construct another vector using iterators:</p>\n<pre><code>std::vector&lt;UINT32&gt; client(host.begin(),host.end());\n\n// client.size() is 5. Elements begin -&gt; end look just like host.\n</code></pre>\n<p>But what happens if the iterators are backwards? What if the start is after the end?</p>\n<pre><code>std::vector&lt;UINT32&gt; backwardsClient(host.end(), host.begin());\n\n// What happens?\n</code></pre>\n", "AcceptedAnswerId": "21787293", "Title": "What is the official behavior for std::vector range constructor when the first itr comes after the last?", "CreationDate": "2014-02-14T18:34:21.373", "Id": "21786970", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-02-15T07:09:05.167", "Score": "6", "OwnerUserId": "3246550", "Tags": "<c++><vector><stdvector>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_21786970_21787321_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 722}, "so_21786970_21787293_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 965}, "so_21786970_21787269_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 744}}, "n3337": {"so_21786970_21787321_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 711}, "so_21786970_21787293_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 953}, "so_21786970_21787269_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 733}}, "n4659": {"so_21786970_21787321_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 753}, "so_21786970_21787293_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 1027}, "so_21786970_21787269_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 802}}}, "21787321": {"Id": "21787321", "PostTypeId": "2", "Body": "<p>The behaviour is undefined. The requirements for this constructor are specified in C++11 <code>[sequence.reqmts]\u00a73+4</code>:</p>\n<blockquote>\n<p id=\"so_21786970_21787321_0\">3 In Tables 100 and 101, <code>X</code> denotes a sequence container class, <code>a</code> denotes a value of <code>X</code> containing elements\n  of type <code>T</code>, ... , <code>i</code> and <code>j</code> denote iterators satisfying input iterator requirements and refer to elements implicitly convertible to <code>value_type</code>,\n  <strong><code>[i, j)</code> denotes a valid range,</strong> ...</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>\u00a74 is then Table 100, which defines what <code>X a(i, j)</code> does.</p>\n<p>In other words, it's only defined if <code>[i, j)</code> is a valid range, which in your case it's not. So the behaviour is not defined.</p>\n", "LastActivityDate": "2014-02-14T18:52:46.317", "CommentCount": "0", "CreationDate": "2014-02-14T18:52:46.317", "ParentId": "21786970", "Score": "3", "OwnerUserId": "1782465"}, "21787269": {"Id": "21787269", "PostTypeId": "2", "Body": "<p>According to <a href=\"http://www.cplusplus.com/reference/vector/vector/vector/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/vector/</a>:</p>\n<blockquote>\n<p id=\"so_21786970_21787269_0\">(3) range constructor\n   Constructs a container with as many elements as the range [first,last), with each element constructed from its corresponding\n  element in that range, in the same order.</p>\n<p id=\"so_21786970_21787269_1\">first, last</p>\n<p id=\"so_21786970_21787269_2\">Input iterators to the initial and final positions in a range. \n  The range used is [first,last), which includes all the elements between\n  first and last, including the element pointed by first but not the\n  element pointed by last.</p>\n</blockquote>\n<p>In your case, the range <code>[host.end(), host.begin())</code> will try to include the element pointed by <code>host.end()</code>, and this will generate an error while de-referencing the past-end-iterator.</p>\n", "LastEditorUserId": "683218", "LastActivityDate": "2014-02-14T18:57:01.330", "Score": "1", "CreationDate": "2014-02-14T18:49:48.777", "ParentId": "21786970", "CommentCount": "0", "OwnerUserId": "683218", "LastEditDate": "2014-02-14T18:57:01.330"}});