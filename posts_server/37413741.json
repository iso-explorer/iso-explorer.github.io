post_cb({"37415910": {"ParentId": "37413741", "CommentCount": "1", "CreationDate": "2016-05-24T14:01:34.183", "OwnerUserId": "3545273", "PostTypeId": "2", "Id": "37415910", "Score": "2", "Body": "<p>Simply because it is required by standard. Draft n4296 for current C++ standard states at :</p>\n<p>7.1.5 The constexpr specifier [dcl.constexpr] \u00a74 (emphasize mine):</p>\n<blockquote>\n<p id=\"so_37413741_37415910_0\">4 The definition of a constexpr constructor shall satisfy the following constraints:<br/>\n  ...</p>\n<p id=\"so_37413741_37415910_1\">In addition, either its function-body shall be = delete, or it shall satisfy the following constraints:</p>\n<p id=\"so_37413741_37415910_2\">(4.4) \u2014 either its function-body shall be = default, or the compound-statement of its function-body shall satisfy\n  the constraints for a function-body of a constexpr function;<br/>\n  (4.5) \u2014 <strong>every non-variant non-static data member and base class sub-object shall be initialized</strong> (12.6.2);<br/>...</p>\n</blockquote>\n", "LastActivityDate": "2016-05-24T14:01:34.183"}, "37416116": {"ParentId": "37413741", "CommentCount": "3", "CreationDate": "2016-05-24T14:10:12.357", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "37416116", "Score": "5", "Body": "<p>Consider the semantics.</p>\n<p>Omitting the member from the initialization list will perform default initialization, which in this case leaves the array with unspecified values. That negates the purpose of a <code>constexpr</code>.</p>\n<p>Value initializing the array performs zero initialization on each array element (since this is an array of built in types).</p>\n", "LastActivityDate": "2016-05-24T14:10:12.357"}, "bq_ids": {"n4140": {"so_37413741_37415910_1": {"section_id": 5420, "quality": 1.0, "length": 8}, "so_37413741_37415910_2": {"section_id": 5420, "quality": 0.9545454545454546, "length": 21}, "so_37413741_37415910_0": {"section_id": 5420, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_37413741_37415910_1": {"section_id": 5215, "quality": 1.0, "length": 8}, "so_37413741_37415910_2": {"section_id": 5215, "quality": 0.6818181818181818, "length": 15}, "so_37413741_37415910_0": {"section_id": 5215, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_37413741_37415910_1": {"section_id": 6842, "quality": 0.875, "length": 7}, "so_37413741_37415910_2": {"section_id": 6842, "quality": 0.9090909090909091, "length": 20}, "so_37413741_37415910_0": {"section_id": 6842, "quality": 0.7142857142857143, "length": 5}}}, "37413741": {"CommentCount": "3", "AcceptedAnswerId": "37416116", "CreationDate": "2016-05-24T12:34:41.707", "LastActivityDate": "2016-05-24T14:10:12.357", "PostTypeId": "1", "ViewCount": "225", "FavoriteCount": "1", "Title": "Why do I need to member-initialize a non-static array member in a constexpr class?", "Id": "37413741", "Score": "7", "Body": "<p>The following code desperately needs <code>: values()</code> to compile, at least in ideone::C++14:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;int N&gt;\nstruct Table\n{\n    constexpr Table() : values()\n    {\n        for (auto i = 0; i &lt; N; ++i)\n        {\n            values[i] = i * i * i;\n        }\n    }\n    int values[N];\n};\n\nint main() {\n    constexpr auto a = Table&lt;1000&gt;();\n    for (auto x : a.values)\n        std::cout &lt;&lt; x &lt;&lt; '\\n';\n}\n</code></pre>\n<p>But why? I had thoughts along \"values could also be initialized in a non-constexpr way and values() does explicitly say that we initialize it in a constexpr-compliant manner\". But is not omitting <code>: values()</code> just as clear?</p>\n", "Tags": "<c++><c++14><constexpr>", "OwnerUserId": "2573127", "AnswerCount": "2"}});