post_cb({"28746600": {"CommentCount": "0", "ViewCount": "1810", "CreationDate": "2015-02-26T15:38:49.207", "LastActivityDate": "2015-02-28T11:28:36.713", "Title": "Does opencv implement in-place rotation or transposition of an image?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "28746600", "Score": "2", "Body": "<p><a href=\"https://en.wikipedia.org/wiki/In-place_matrix_transposition\" rel=\"nofollow\">https://en.wikipedia.org/wiki/In-place_matrix_transposition</a>\nSeems to be a well-researched and longstanding problem, so I am a bit surprised in opencv's capabilities in solving it (zero?).</p>\n<p>I have tried the equivalent to the pseudocode:</p>\n<pre><code>cv::Mat input(width,height,CV_8UC3);\nFillMyInput();\ncv::transpose(input,input);\ncv::flip(input);\n</code></pre>\n<p>The transpose method changes the input.data pointer, so I believe the method does something functionally equivalent to the following:</p>\n<pre><code>if (input_image == output_image)\n{\n    cv::Mat m = CreateNewMat(sizeof(input_image));\n    TransposeOutOfPlace(input_image,m)\n    output_image = m;\n}\n</code></pre>\n<p>Is this correct, and if so, does opencv expose another way to rotate or transpose an image <em>without allocating a large buffer with size equal to the original image?</em></p>\n", "Tags": "<c++><opencv><image-processing>", "OwnerUserId": "1974659", "AnswerCount": "1"}, "28748266": {"ParentId": "28746600", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It is a choice between time complexity and memory usage.</p>\n<p>Take a look at the source code(OpenCV 2.4.10). For simplification, I remove some lines:</p>\n<pre><code>void cv::transpose( InputArray _src, OutputArray _dst )\n{\n    Mat src = _src.getMat();\n    size_t esz = src.elemSize();\n\n    _dst.create(src.cols, src.rows, src.type());\n    Mat dst = _dst.getMat();\n\n    if( dst.data == src.data )\n    {\n        TransposeInplaceFunc func = transposeInplaceTab[esz];\n        CV_Assert( func != 0 );\n        func( dst.data, dst.step, dst.rows );\n    }\n    else\n    {\n        TransposeFunc func = transposeTab[esz];\n        CV_Assert( func != 0 );\n        func( src.data, src.step, dst.data, dst.step, src.size() );\n    }\n}\n</code></pre>\n<p>Obviously, <code>_dst.create(src.cols, src.rows, src.type());</code> is the point. Function <code>getMat()</code> simply return the <code>Mat</code> header. </p>\n<p>The OpenCV API Reference:</p>\n<blockquote>\n<p id=\"so_28746600_28748266_0\"><strong>C++: void Mat::create(int rows, int cols, int type);</strong></p>\n<p id=\"so_28746600_28748266_1\">This is one of the key Mat methods. Most new-style OpenCV functions\n  and methods that produce arrays call this method for each output\n  array. The method uses the following algorithm:</p>\n<ol>\n<li>If the current array shape and the type match the new ones, return\n  immediately. Otherwise, de-reference the previous data by calling\n  Mat::release().</li>\n<li>Initialize the new header.</li>\n<li>Allocate the new data of total()*elemSize() bytes.</li>\n<li>Allocate the new, associated with the data, reference counter and set it to 1.</li>\n</ol>\n</blockquote>\n<p>As you can see, if <code>_src</code> is a squre matrix(rows == cols), it do nothing(return  immediately). And then in-place transpose algorithm is used. If it is non-squre matrix, it will firstly allocate <code>total()*elemSize()</code> memory by using <code>malloc()</code>.</p>\n<p>It seems to be a waste when compares to in-place algorithm. But according to Wikipedia: </p>\n<blockquote>\n<p id=\"so_28746600_28748266_2\">The known algorithms have a worst-case linearithmic computational cost of O(MN log MN) at best. </p>\n</blockquote>\n<p>It is better to reduce memory usage at the cost of higher time complexity? In most case, we prefer to reduce execution time.</p>\n<p>If want to avoid allocating large buffer, you need to implement the in-place non-squre transposition algorithm by yourself. OpenCV does not provide such tools.</p>\n", "OwnerUserId": "4377701", "LastEditorUserId": "4377701", "LastEditDate": "2015-02-28T11:28:36.713", "Id": "28748266", "Score": "2", "CreationDate": "2015-02-26T16:57:33.067", "LastActivityDate": "2015-02-28T11:28:36.713"}, "bq_ids": {"n4140": {"so_28746600_28748266_0": {"section_id": 2290, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_28746600_28748266_0": {"section_id": 2277, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_28746600_28748266_0": {"section_id": 2563, "quality": 0.5714285714285714, "length": 4}}}});