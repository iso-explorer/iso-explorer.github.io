post_cb({"28199261": {"ParentId": "28199162", "CommentCount": "0", "Body": "<p><code>nullptr_t</code> is not defined by the preprocessor, so having the preprocessor check for it won't work.  <code>nullptr</code> is defined in <code>g++-4.9.2</code> with <code>-std=c++11</code>, which a quick test program can verify.</p>\n<pre><code>    int main() {\n      std::nullptr_t i = nullptr;\n    }\n</code></pre>\n", "OwnerUserId": "1277769", "PostTypeId": "2", "Id": "28199261", "Score": "7", "CreationDate": "2015-01-28T18:03:54.740", "LastActivityDate": "2015-01-28T18:03:54.740"}, "28199162": {"CommentCount": "4", "ViewCount": "449", "PostTypeId": "1", "LastEditorUserId": "960907", "CreationDate": "2015-01-28T17:58:39.297", "LastActivityDate": "2015-01-29T09:58:01.737", "Title": "nullptr_t not defined on g++ 4.9.2", "LastEditDate": "2015-01-29T09:58:01.737", "Id": "28199162", "Score": "1", "Body": "<p>I am using C++ Rest SDK on a project in linux comipled with g++ 4.9.2 with the -std=c++11 flag set.</p>\n<p>Internaly C++ Rest SDK checks if nullptr exists like that:</p>\n<pre><code>#if defined nullptr_t\n#define NEEDS_NULLPTR_DEFINED 0\n#else\n#define NEEDS_NULLPTR_DEFINED 1\n#endif\n#if NEEDS_NULLPTR_DEFINED\n#define nullptr NULL\n#endif\n</code></pre>\n<p>This check fail on my machine leading nullptr to be defined as NULL which breaks the compilation afterwards. I am not quite sure if g++ or C++ Rest SDK is to blame for that problem.</p>\n<p>Do you have any idea on why this nullptr_t check fails with g++ 4.9.2 and how to fix it?</p>\n<p><strong>EDIT:</strong></p>\n<p>I submitted an issue to C++ REST SDK: <a href=\"https://casablanca.codeplex.com/workitem/340\" rel=\"nofollow\">https://casablanca.codeplex.com/workitem/340</a></p>\n", "Tags": "<c++><c++11><g++>", "OwnerUserId": "960907", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28199162_28199607_0": {"section_id": 497, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_28199162_28199607_0": {"section_id": 488, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_28199162_28199607_0": {"section_id": 513, "quality": 0.8333333333333334, "length": 15}}}, "28199607": {"ParentId": "28199162", "LastEditDate": "2015-01-28T18:41:39.467", "CommentCount": "0", "CreationDate": "2015-01-28T18:22:35.853", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "PostTypeId": "2", "Id": "28199607", "Score": "7", "Body": "<p>I think you misunderstand what <code>#ifdef</code> tests for. Specifically</p>\n<pre><code>#if defined identifier\n</code></pre>\n<p>will (from \u00a716.1, emphasis mine):</p>\n<blockquote>\n<p id=\"so_28199162_28199607_0\">evaluate to 1 if the identifier is currently defined as a <strong>macro name</strong> (that is, if it is predefined or if it\n  has been the subject of a <code>#define</code> preprocessing directive without an intervening <code>#undef</code> directive with the\n  same subject identifier), 0 if it is not.</p>\n</blockquote>\n<p>It only can check for if the identifier is defined by <code>#define</code>. But <code>std::nullptr_t</code> isn't a a macro name - it's a typedef. Specifically (\u00a718.2/9):</p>\n<blockquote>\n<p id=\"so_28199162_28199607_1\"><code>nullptr_t</code> is defined as follows:</p>\n<pre><code>namespace std {\n    typedef decltype(nullptr) nullptr_t;\n}\n</code></pre>\n</blockquote>\n<p>In a similar vein, the following program won't print anything:</p>\n<pre><code>int main() {\n    #ifdef int\n    std::cout &lt;&lt; \"int is defined\" &lt;&lt; std::endl;\n    #endif\n}\n</code></pre>\n<p>The test you want instead is:</p>\n<pre><code>#if __cplusplus &gt;= 201103L\n    // C++11\n#else\n    // not C++11\n#endif\n</code></pre>\n<p>From the <a href=\"https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html\" rel=\"nofollow\">gcc docs</a>:</p>\n<blockquote>\n<p id=\"so_28199162_28199607_2\"><code>__cplusplus</code><br>\n  This macro is defined when the C++ compiler is in use. You can use <code>__cplusplus</code> to test whether a header is compiled by a C compiler or a C++ compiler. This macro is similar to <code>__STDC_VERSION__</code>, in that it expands to a version number. Depending on the language standard selected, the value of the macro is <code>199711L</code>, as mandated by the 1998 C++ standard; <code>201103L</code>, per the 2011 C++ standard; an unspecified value strictly larger than <code>201103L</code> for the experimental languages enabled by <code>-std=c++1y</code> and <code>-std=gnu++1y</code>. </br></p>\n</blockquote>\n", "LastActivityDate": "2015-01-28T18:41:39.467"}});