post_cb({"44332397": {"PostTypeId": "2", "ParentId": "44332074", "Body": "<blockquote>\n<p id=\"so_44332074_44332397_0\">Do I have to implement begin/end?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_44332074_44332397_1\">As far as I understood it, it should choose <code>cbegin/cend</code> if it's <code>const auto &amp;x</code> and not <code>auto &amp;x</code>.</p>\n</blockquote>\n<p>That's not how the range-based <code>for</code> is defined in the standard. Range-based <code>for</code> always looks for <code>begin()</code> and <code>end()</code>. From <a href=\"https://timsong-cpp.github.io/cppwp/n3337/stmt.ranged\" rel=\"noreferrer\">https://timsong-cpp.github.io/cppwp/n3337/stmt.ranged</a>.</p>\n<blockquote>\n<p id=\"so_44332074_44332397_2\">otherwise, <em>begin-expr</em> and <em>end-expr</em> are <code>begin(__range)</code> and <code>end(__range)</code>, respectively, where <code>begin</code> and <code>end</code> are looked up with argument-dependent lookup ([basic.lookup.argdep]). For the purposes of this name lookup, namespace std is an associated namespace.</p>\n</blockquote>\n", "LastEditorUserId": "434551", "Score": "8", "LastEditDate": "2017-06-02T15:32:44.973", "CommentCount": "0", "Id": "44332397", "OwnerUserId": "434551", "CreationDate": "2017-06-02T15:23:11.423", "LastActivityDate": "2017-06-02T15:32:44.973"}, "44332074": {"AcceptedAnswerId": "44332397", "Score": "8", "CreationDate": "2017-06-02T15:06:19.217", "CommentCount": "2", "OwnerUserId": "7421666", "Title": "Is cbegin/cend not enough for a range based for loop?", "LastActivityDate": "2017-06-02T15:32:44.973", "PostTypeId": "1", "Tags": "<c++>", "AnswerCount": "1", "Body": "<p>I have a class, let's call it ConstVector, that only defines cbegin/cend and not begin/end because I don't want to allow modifications to its members after construction. I tried to use the range based for loop like this:</p>\n<pre><code>ConstVector const_vector(1, 2, 3);\nfor(const auto &amp;x : const_vector)\n....\n</code></pre>\n<p>While the relevant part of the class looks like this:</p>\n<pre><code>template&lt;class T&gt;\nclass ConstVector\n{\n    public:\n        ConstVector(std::initializer_list&lt;T&gt; values);\n        typename std::vector&lt;T&gt;::const_iterator cbegin(void) const;\n        typename std::vector&lt;T&gt;::const_iterator cend(void) const;\n\n    private:\n        std::vector&lt;T&gt; data;\n};\n\ntemplate&lt;class T&gt;\nConstVector::ConstVector(std::initializer_list&lt;T&gt; values)\n    : data(values)\n{\n}\n\ntemplate&lt;class T&gt;\ntypename std::vector&lt;T&gt;::const_iterator ConstVector&lt;T&gt;::cbegin() const\n{\n    return this-&gt;data.cbegin();\n}\n\ntemplate&lt;class T&gt;\ntypename std::vector&lt;T&gt;::const_iterator ConstVector&lt;T&gt;::cend() const\n{\n    return this-&gt;data.cend();\n}\n</code></pre>\n<p>But my compiler complains:</p>\n<pre><code>\u2018begin\u2019 was not declared in this scope\n</code></pre>\n<p>My question is: Do I have to implement begin/end? As far as I understood it, it should choose cbegin/cend if it's <code>const auto &amp;x</code> and not <code>auto &amp;x</code>. At least that's what would make sense to me. If I remove my range based for loop, everything compiles fine.</p>\n<p>I also tried pretty much everything suggested <a href=\"https://stackoverflow.com/q/15518894/7421666\">here</a> to make it <code>const</code>, but that didn't help.</p>\n", "Id": "44332074", "ViewCount": "269"}, "bq_ids": {"n3337": {"so_44332074_44332397_2": {"quality": 0.8571428571428571, "length": 18, "section_id": 3766}}}});