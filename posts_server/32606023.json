post_cb({"32606023": {"ViewCount": "4706", "Body": "<p>C is somewhat, not exactly, a subset of C++. So we can use most of the C functions/headers in C++ by changing the name a little bit (<code>stdio.h</code> to <code>cstdio</code>, <code>stdlib.h</code> to <code>cstdlib</code>). </p>\n<p>My question is actually kind of semantic. In C++ code (using newest version of GCC compiler), I can call <code>printf(\"Hello world!);</code> and <code>std::printf(\"Hello world!);</code> and it works exactly the same. And in the reference I am using it also appears as <code>std::printf(\"Hello world!);</code>.</p>\n<p>My question is, is it preferred to use <code>std::printf();</code> in C++? Is there a difference?</p>\n", "AcceptedAnswerId": "32606280", "Title": "When using C headers in C++, should we use functions from std:: or the global namespace?", "CreationDate": "2015-09-16T10:26:51.287", "Id": "32606023", "CommentCount": "11", "FavoriteCount": "17", "PostTypeId": "1", "LastEditDate": "2015-09-22T03:06:36.980", "LastEditorUserId": "1106367", "LastActivityDate": "2016-05-02T20:12:27.053", "Score": "94", "OwnerUserId": "5212827", "Tags": "<c++><c>", "AnswerCount": "8"}, "32606271": {"Id": "32606271", "PostTypeId": "2", "Body": "<p>From the C++11 standard:</p>\n<blockquote>\n<p id=\"so_32606023_32606271_0\">Every C header, each of which has a name of the form name.h, behaves\n  as if each name placed in the standard library namespace by the\n  corresponding cname header is placed within the global namespace\n  scope. It is unspecified whether these names are first declared or\n  defined within namespace scope (3.3.6) of the namespace std and are\n  then injected into the global namespace scope by explicit\n  using-declarations (7.3.3).</p>\n</blockquote>\n<p>So, if you use <code>&lt;cstdio&gt;</code>, you can be sure, that <code>printf</code> will be in the <code>namespace std</code>, and hence not in global namespace.<br>\nUsing a global namespace creates a conflict of names. <strong>This is not C++ way.</strong></br></p>\n<p>Therefore, I'm using <code>&lt;cstdio&gt;</code> headers and advise you to do so.</p>\n", "LastActivityDate": "2015-09-16T10:38:46.657", "CommentCount": "1", "CreationDate": "2015-09-16T10:38:46.657", "ParentId": "32606023", "Score": "2", "OwnerUserId": "5341818"}, "bq_ids": {"n4140": {"so_32606023_32606271_0": {"length": 38, "quality": 0.926829268292683, "section_id": 4907}}, "n3337": {"so_32606023_32606271_0": {"length": 38, "quality": 0.926829268292683, "section_id": 4702}}, "n4659": {"so_32606023_32606271_0": {"length": 38, "quality": 0.926829268292683, "section_id": 6316}}}, "32606276": {"Id": "32606276", "PostTypeId": "2", "Body": "<p>No, you're fine either way.</p>\n<p>The <em>original</em> intent was that the <code>&lt;___.h&gt;</code> headers would be the C versions which put everything in the global namespace, and the <code>&lt;c___&gt;</code> headers would be the C++-ified versions, which place everything in the <code>std</code> namespace.</p>\n<p>In practice, though, the C++ versions <em>also</em> put everything into the global namespace. And there's no clear consensus that using the <code>std::</code> versions is \"the right thing to do\".</p>\n<p>So basically, use whichever you prefer. The most common is probably to use the C standard library functions in the global namespace (<code>printf</code> instead of <code>std::printf</code>), but there's not much reason to consider one \"better\" than the other.</p>\n", "LastActivityDate": "2015-09-16T10:39:03.043", "CommentCount": "7", "CreationDate": "2015-09-16T10:39:03.043", "ParentId": "32606023", "Score": "7", "OwnerUserId": "33213"}, "32606258": {"Id": "32606258", "PostTypeId": "2", "Body": "<p>The only difference there is is that in <code>std::printf()</code> by adding <code>std::</code> scope resolution you will secure yourself from someone writing a function with the same name in the future, which would lead to namespace conflict. Both usages will lead to exactly the same OS API calls (you can check it under Linux by running <code>strace your_program</code>). </p>\n<p>I find it very unlikely that someone would name a function like that, as <code>printf()</code> is one of the most commonly used functions out there. Also, in C++, <code>iostream</code>s are preffered over calls to <code>cstdio</code> functions like printf.</p>\n", "LastActivityDate": "2015-09-16T10:38:11.950", "CommentCount": "6", "CreationDate": "2015-09-16T10:38:11.950", "ParentId": "32606023", "Score": "2", "OwnerUserId": "963881"}, "32632611": {"Id": "32632611", "PostTypeId": "2", "Body": "<p>From my own practice: use <code>std::</code> prefixes. Otherwise one day <code>abs</code> <strong>will</strong> bite you very painfully in case you using floating points.</p>\n<p>Non-qualified <code>abs</code> refers to function defined on <code>int</code> on some platforms. On others it is overloaded. However <code>std::abs</code> is always overloaded for all types.</p>\n", "LastActivityDate": "2015-09-17T14:16:22.100", "CommentCount": "0", "CreationDate": "2015-09-17T14:16:22.100", "ParentId": "32606023", "Score": "3", "OwnerUserId": "976247"}, "32606206": {"Id": "32606206", "PostTypeId": "2", "Body": "<p><code>&lt;cmeow&gt;</code> always provides <code>::std::purr</code> and may or may not provide <code>::purr</code>. </p>\n<p><code>&lt;meow.h&gt;</code> always provides <code>::purr</code> and may or may not provide <code>::std::purr</code>.</p>\n<p>Use the form that is guaranteed to be provided by the header you include.</p>\n", "LastActivityDate": "2015-09-16T10:35:38.393", "CommentCount": "3", "CreationDate": "2015-09-16T10:35:38.393", "ParentId": "32606023", "Score": "74", "OwnerUserId": "2756719"}, "32606280": {"Id": "32606280", "PostTypeId": "2", "Body": "<p>From the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_32606023_32606280_0\"><strong>D.5 C standard library headers [depr.c.headers]</strong></p>\n<ol>\n<li>For compatibility with the C standard library ...</li>\n<li>Every C header, each of which has a name of the form <strong>name.h</strong>, behaves as if each name placed in the standard\n  library namespace by the corresponding <strong>cname</strong> header is placed within the <strong>global namespace</strong> scope. It is <strong>unspecified whether these names are first declared or defined within namespace scope</strong> (3.3.6) <strong>of</strong> the namespace <strong>std</strong> and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</li>\n<li><em>Example:</em> The header <code>&lt;cstdlib&gt;</code> <strong>assuredly</strong> provides its declarations and definitions <strong>within the namespace\n  <code>std</code></strong>. It may also provide these names within the global namespace. The header <code>&lt;stdlib.h&gt;</code> <strong>assuredly</strong> provides the same declarations and definitions <strong>within the global namespace</strong>, much as in the C Standard. It\n  may also provide these names within the namespace <code>std</code>.</li>\n</ol>\n</blockquote>\n<p>Using the \u00abname.h\u00bb headers is deprecated, they have been identified as candidates for removal from future revisions.</p>\n<p>So, I would suggest to include the \u00abcname\u00bb headers and to use the declarations and definitions from the <code>std</code> namespace.</p>\n<p>If you have to use the \u00abname.h\u00bb headers for some reasons (it's deprecated, see above), I would suggest to use the declarations and definitions from the global namespace.</p>\n<p>In other words: prefer</p>\n<pre><code>#include &lt;cstdio&gt;\n\nint main() {\n    std::printf(\"Hello world\\n\");\n}\n</code></pre>\n<p>over</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello world\\n\");\n}\n</code></pre>\n", "LastEditorUserId": "2020827", "LastActivityDate": "2016-05-02T20:12:27.053", "Score": "92", "CreationDate": "2015-09-16T10:39:10.000", "ParentId": "32606023", "CommentCount": "4", "OwnerUserId": "2020827", "LastEditDate": "2016-05-02T20:12:27.053"}, "32606161": {"Id": "32606161", "PostTypeId": "2", "Body": "<p>Using just <code>printf</code> without <code>std::</code> could generate some name conflicts and is considered a bad practice by a lot of c++ devs. Google is your friend on this one, but here are some links, hope this helps</p>\n<p><a href=\"https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\">Why is \"using namespace std\" considered bad practice?</a>\n<a href=\"http://www.cplusplus.com/forum/beginner/61121/\" rel=\"nofollow noreferrer\">http://www.cplusplus.com/forum/beginner/61121/</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-09-16T10:33:20.387", "Score": "1", "CreationDate": "2015-09-16T10:33:20.387", "ParentId": "32606023", "CommentCount": "9", "OwnerUserId": "4915700", "LastEditDate": "2017-05-23T12:25:31.460"}, "32606316": {"Id": "32606316", "PostTypeId": "2", "Body": "<p>In stdio</p>\n<blockquote>\n<p id=\"so_32606023_32606316_0\">This is the C++ version of the Standard C Library header @c stdio.h, \n  and its contents are (mostly) the same as that header, but are all \n  contained in the namespace @c std (except for names which are defined \n  as macros in C).</p>\n</blockquote>\n<p>So it should not make any difference.</p>\n", "LastActivityDate": "2015-09-16T10:40:56.243", "CommentCount": "0", "CreationDate": "2015-09-16T10:40:56.243", "ParentId": "32606023", "Score": "2", "OwnerUserId": "4077900"}});