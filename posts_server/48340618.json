post_cb({"bq_ids": {"n4140": {"so_48340618_48372399_0": {"length": 10, "quality": 1.0, "section_id": 715}, "so_48340618_48372399_2": {"length": 7, "quality": 0.5384615384615384, "section_id": 810}, "so_48340618_48372399_4": {"length": 9, "quality": 0.9, "section_id": 969}, "so_48340618_48372399_1": {"length": 9, "quality": 0.9, "section_id": 715}}, "n3337": {"so_48340618_48372399_0": {"length": 8, "quality": 0.8, "section_id": 704}, "so_48340618_48372399_4": {"length": 9, "quality": 0.9, "section_id": 958}}, "n4659": {"so_48340618_48372399_0": {"length": 10, "quality": 1.0, "section_id": 745}, "so_48340618_48372399_1": {"length": 9, "quality": 0.9, "section_id": 745}, "so_48340618_48372399_4": {"length": 9, "quality": 0.9, "section_id": 873}, "so_48340618_48372399_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 868}}}, "48340618": {"ViewCount": "148", "Body": "<p>I tried to update from VS2015 to VS2017 and the code below does not work in the newer version. As you can see a move constructor is defined which automatically deletes the copy constructor. </p>\n<pre><code>#include &lt;boost/optional.hpp&gt;\n#include &lt;vector&gt;\n\nstruct Foo {\n    Foo() {}\n    Foo(Foo&amp;&amp; other) {}\n};\n\nint main() {\n    std::vector&lt;boost::optional&lt;Foo&gt;&gt; foos;\n    foos.resize(42);\n    return 0;\n}\n</code></pre>\n<p>The compilation error is </p>\n<pre><code>1&gt;...\\boost\\dist\\include\\boost-1_66\\boost\\optional\\optional.hpp(384): error C2280: 'Foo::Foo(const Foo &amp;)': attempting to reference a deleted function\n1&gt;...\\main.cpp(7): note: compiler has generated 'Foo::Foo' here\n1&gt;...\\boost\\dist\\include\\boost-1_66\\boost\\optional\\optional.hpp(383): note: while compiling class template member function 'void boost::optional_detail::optional_base&lt;T&gt;::construct(const Foo &amp;)'\n1&gt;        with\n1&gt;        [\n1&gt;            T=Foo\n1&gt;        ]\n1&gt;...\\boost\\dist\\include\\boost-1_66\\boost\\optional\\optional.hpp(181): note: see reference to function template instantiation 'void boost::optional_detail::optional_base&lt;T&gt;::construct(const Foo &amp;)' being compiled\n1&gt;        with\n1&gt;        [\n1&gt;            T=Foo\n1&gt;        ]\n1&gt;...\\boost\\dist\\include\\boost-1_66\\boost\\optional\\optional.hpp(831): note: see reference to class template instantiation 'boost::optional_detail::optional_base&lt;T&gt;' being compiled\n1&gt;        with\n1&gt;        [\n1&gt;            T=Foo\n1&gt;        ]\n1&gt;...\\msvc\\14.12.25827\\include\\vector(1902): note: see reference to class template instantiation 'boost::optional&lt;Foo&gt;' being compiled\n1&gt;...\\msvc\\14.12.25827\\include\\vector(1901): note: while compiling class template member function 'boost::optional&lt;Foo&gt; *std::vector&lt;boost::optional&lt;Foo&gt;,std::allocator&lt;_Ty&gt;&gt;::_Udefault(boost::optional&lt;Foo&gt; *,const unsigned __int64)'\n1&gt;        with\n1&gt;        [\n1&gt;            _Ty=boost::optional&lt;Foo&gt;\n1&gt;        ]\n1&gt;...\\msvc\\14.12.25827\\include\\vector(1528): note: see reference to function template instantiation 'boost::optional&lt;Foo&gt; *std::vector&lt;boost::optional&lt;Foo&gt;,std::allocator&lt;_Ty&gt;&gt;::_Udefault(boost::optional&lt;Foo&gt; *,const unsigned __int64)' being compiled\n1&gt;        with\n1&gt;        [\n1&gt;            _Ty=boost::optional&lt;Foo&gt;\n1&gt;        ]\n1&gt;...\\main.cpp(10): note: see reference to class template instantiation 'std::vector&lt;boost::optional&lt;Foo&gt;,std::allocator&lt;_Ty&gt;&gt;' being compiled\n1&gt;        with\n1&gt;        [\n1&gt;            _Ty=boost::optional&lt;Foo&gt;\n1&gt;        ]\n1&gt;...\\main.cpp(7): note: 'Foo::Foo(const Foo &amp;)': function was implicitly deleted because 'Foo' has a user-defined move constructor\n</code></pre>\n<p>Now the interesting thing is that it does compile when I use <code>std::optional</code> instead of <code>boost::optional</code>. I am not really sure what the issue is and who to blame: me, boost, microsoft, the c++ standard? Anyone knows what is going on?</p>\n<p>Is this a known issue? Is it a bug in boost or is it correct that it does not work?</p>\n", "AcceptedAnswerId": "48372399", "Title": "boost::optional vs std::optional for non copyable objects", "CreationDate": "2018-01-19T11:58:59.393", "LastActivityDate": "2018-01-23T00:15:55.937", "CommentCount": "12", "LastEditDate": "2018-01-19T15:00:34.150", "PostTypeId": "1", "LastEditorUserId": "3370124", "Id": "48340618", "Score": "3", "OwnerUserId": "445860", "Tags": "<c++><boost><visual-studio-2015><visual-studio-2017><language-lawyer>", "AnswerCount": "1"}, "48372399": {"Id": "48372399", "PostTypeId": "2", "Body": "<p>This appears to be an issue with the STL implementations.</p>\n<p>From the latest draft, n4700:</p>\n<p><strong>26.2.1 General container requirements</strong> [container.requirements.general] defines <code>DefaultInsertable</code> and <code>MoveInsertable</code>, and also states in part:</p>\n<blockquote>\n<p id=\"so_48340618_48372399_0\"><code>T</code> is <em><code>CopyInsertable</code></em> into <code>X</code> means that, in addition to <code>T</code> being <code>MoveInsertable</code> into <code>X</code>, the following expression is well-formed:</p>\n<pre><code>allocator_traits&lt;A&gt;::construct(m, p, v)\n</code></pre>\n<p id=\"so_48340618_48372399_1\">and its evaluation causes the following postcondition to hold: The value of <code>v</code> is unchanged and is equivalent to <code>*p</code>.</p>\n</blockquote>\n<p>(In this case, <code>T</code> is <code>boost::optional&lt;Foo&gt;</code>, <code>X</code> is <code>std::vector&lt;T&gt;</code>.)</p>\n<p>Clearly, <code>T</code> is <code>DefaultInsertable</code> and <code>MoveInsertable</code> but not <code>CopyInsertable</code>.</p>\n<p><strong>26.3.11.3 <code>vector</code> capacity</strong> [vector.capacity] states in part:</p>\n<blockquote>\n<pre><code>void resize(size_type sz);\n</code></pre>\n<p id=\"so_48340618_48372399_2\"><em>Effects:</em> If <code>sz &lt; size()</code>, erases the last <code>size() - sz</code> elements from the sequence. Otherwise, appends <code>sz - size()</code> default-inserted elements to the sequence.</p>\n<p id=\"so_48340618_48372399_3\"><em>Requires:</em> <code>T</code> shall be <code>MoveInsertable</code> and <code>DefaultInsertable</code> into <code>*this</code>.</p>\n<p id=\"so_48340618_48372399_4\"><em>Remarks:</em> If an exception is thrown other than by the move constructor of a non-<code>CopyInsertable</code> <code>T</code> there are no effects.</p>\n</blockquote>\n<p>Although I do not possess official copies of C++11 or C++14, based on working copies, C++11 did not have the \"<em>Remarks:</em>\" paragraph and had a slightly different \"<em>Requires:</em>\" paragraph:</p>\n<blockquote>\n<p id=\"so_48340618_48372399_5\"><em>Requires:</em> <code>T</code> shall be <code>CopyInsertable</code> into <code>*this</code>.</p>\n</blockquote>\n<p>Therefore, <code>foos.resize(42)</code> is not well-formed in C++11, but it should be well-formed in C++14 because the requirements that <code>T</code> be <code>MoveInsertable</code> and <code>DefaultInsertable</code> into the vector are satisfied.</p>\n<p>I have confirmed <a href=\"https://stackoverflow.com/questions/48340618/boostoptional-vs-stdoptional-for-non-copyable-objects#comment83667949_48340618\">@patatahooligan's comment</a> that adding <code>noexcept</code> to the <code>Foo</code> move constructor allows the code to compile in Clang and g++ 7.2.0. However, unless I am misreading the standard, it is not a requirement that a non-<code>CopyInsertable</code> <code>T</code>'s move constructor be noexcept; in fact, the standard seems to allow for the possibility that a non-<code>CopyInsertable</code> <code>T</code>'s move constructor can throw an exception, in which case it's not guaranteed whether there were effects.</p>\n<p><strong>UPDATE</strong> I have filed GCC Bugs <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83981\" rel=\"nofollow noreferrer\">83981</a> and <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83982\" rel=\"nofollow noreferrer\">83982</a>.</p>\n", "LastEditorUserId": "196844", "LastActivityDate": "2018-01-23T00:15:55.937", "Score": "1", "CreationDate": "2018-01-21T22:32:22.050", "ParentId": "48340618", "CommentCount": "3", "OwnerUserId": "196844", "LastEditDate": "2018-01-23T00:15:55.937"}});