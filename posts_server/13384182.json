post_cb({"13384240": {"ParentId": "13384182", "CommentCount": "1", "CreationDate": "2012-11-14T17:42:22.177", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "13384240", "Score": "6", "Body": "<p>This is not allowed in either C or C++. The replacement list must be identical. What you're talking about (after the first pass) is the result of processing the replacement list<sup>1</sup>, not the replacement list itself. Since the replacement list itself is not identical, the code is not allowed.</p>\n<hr>\n<p><sup>1</sup> Or at least what the result would be if the preprocessor worked a particular way that happens to be different from how it actually does.</p>\n</hr>", "LastActivityDate": "2012-11-14T17:42:22.177"}, "13384182": {"CommentCount": "2", "ViewCount": "398", "CreationDate": "2012-11-14T17:38:42.117", "LastActivityDate": "2012-11-14T17:42:22.427", "Title": "Macro redefinition in C and C++", "PostTypeId": "1", "Id": "13384182", "Score": "5", "Body": "<p>I know that this code is valid both in C and C++:</p>\n<pre><code>#define FOO 0\n#define FOO 0\n</code></pre>\n<p><strong>ISO/IEC 14882:2011</strong></p>\n<blockquote>\n<p id=\"so_13384182_13384182_0\">16.3 Macro replacement [cpp.replace]</p>\n<p id=\"so_13384182_13384182_1\">2 An identifier currently defined as an object-like macro may be\n  redefined by another #define preprocessing directive provided that the\n  second definition is an object-like macro definition and the two\n  replacement lists are identical, otherwise the program is ill-formed.\n  Likewise, an identifier currently defined as a function-like macro may\n  be redefined by another #define preprocessing directive provided that\n  the second definition is a function-like macro definition that has the\n  same number and spelling of parameters, and the two replacement lists\n  are identical, otherwise the program is ill-formed.</p>\n</blockquote>\n<p>But what about this code?</p>\n<pre><code>#define FOO 0\n#define FOO FOO\n</code></pre>\n<p>Replacement lists are not identical at the start of preprocessing (only when the first replacement occurs).</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1608835", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13384182_13384182_1": {"section_id": 512, "quality": 0.9607843137254902, "length": 49}}, "n3337": {"so_13384182_13384182_1": {"section_id": 503, "quality": 0.9607843137254902, "length": 49}}, "n4659": {"so_13384182_13384182_1": {"section_id": 533, "quality": 0.9607843137254902, "length": 49}}}});