post_cb({"26942974": {"Id": "26942974", "PostTypeId": "2", "Body": "<p>[expr.log.and]</p>\n<blockquote>\n<p id=\"so_26942958_26942974_0\">The <code>&amp;&amp;</code> operator groups left-to-right. The operands are both contextually converted to <code>bool</code> (Clause 4).\n  The result is true if both operands are true and false otherwise. Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right\n  evaluation: the second operand is not evaluated if the first operand is false.</p>\n<p id=\"so_26942958_26942974_1\">The result is a <code>bool</code>. If the second expression is evaluated, every value computation and side effect associated\n  with the first expression is sequenced before every value computation and side effect associated with the\n  second expression.</p>\n</blockquote>\n", "LastActivityDate": "2014-11-15T05:44:47.387", "Score": "13", "CreationDate": "2014-11-15T05:44:47.387", "ParentId": "26942958", "CommentCount": "0", "OwnerUserId": "481267"}, "bq_ids": {"n4140": {"so_26942958_26942974_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 6164}, "so_26942958_26942974_0": {"length": 26, "quality": 0.896551724137931, "section_id": 6163}}, "n3337": {"so_26942958_26942974_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5925}, "so_26942958_26942974_0": {"length": 26, "quality": 0.896551724137931, "section_id": 5924}}, "n4659": {"so_26942958_26942974_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7661}, "so_26942958_26942974_0": {"length": 26, "quality": 0.896551724137931, "section_id": 7660}}}, "26942958": {"ViewCount": "399", "Body": "<p>Pre-C++11 we know that short-circuiting and evaluation order are required for operator <code>&amp;&amp;</code> because of:</p>\n<blockquote>\n<p id=\"so_26942958_26942958_0\"><strong>1.9.18</strong></p>\n<p id=\"so_26942958_26942958_1\"><em>In the evaluation of the following expressions</em></p>\n<pre><code>a &amp;&amp; b\na || b\na ? b : c\na , b\n</code></pre>\n<p id=\"so_26942958_26942958_2\"><em>using the built-in meaning of the operators in these expressions, <strong>there is a sequence point after the evaluation of the first expression</strong> (12).</em></p>\n</blockquote>\n<p>But sequence points no longer exist in C++11, so where is the standard part that says:</p>\n<pre><code>if (ptr &amp;&amp; ptr-&gt;do_something())\n{\n}\n</code></pre>\n<p>is safe?</p>\n", "Title": "Safe short circuit evaluation in C++11", "CreationDate": "2014-11-15T05:42:04.600", "LastActivityDate": "2016-08-23T17:24:27.400", "CommentCount": "2", "PostTypeId": "1", "Id": "26942958", "Score": "7", "OwnerUserId": "4254894", "Tags": "<c++><c++11><short-circuiting><sequence-points>", "AnswerCount": "1"}});