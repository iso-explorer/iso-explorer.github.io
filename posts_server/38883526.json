post_cb({"38883611": {"ParentId": "38883526", "CommentCount": "5", "Body": "<p>In C++ the initializer list doesn't follow the order in which you write the items in the initializer. It rather follows the order in which the members are declared in your class. Since you put your <code>NCD2Relay</code> after your <code>Output</code> inside the class, then <code>NCD2Relay</code> will be initialized <strong>after</strong> Output, even though in the initializer you put <code>NCD2Relay</code> first. So, just move <code>NCD2Relay</code> <strong>before</strong> the <code>Output</code> inside your class declaration.</p>\n", "OwnerUserId": "4608341", "PostTypeId": "2", "Id": "38883611", "Score": "3", "CreationDate": "2016-08-10T21:10:40.457", "LastActivityDate": "2016-08-10T21:10:40.457"}, "38883526": {"CommentCount": "5", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "5343613", "CreationDate": "2016-08-10T21:05:07.873", "LastActivityDate": "2016-08-10T21:42:40.747", "Title": "How to pass pointer of a class member in a member initialization list?", "LastEditDate": "2016-08-10T21:42:40.747", "Id": "38883526", "Score": "1", "Body": "<p>I have a class named HighWaterDetector:</p>\n<pre><code>class HighWaterDetector\n{\npublic:\n    HighWaterDetector(Device* device);\n    Device * devicePtr;\n    Output * output1Ptr;\n    CloudMsgParser * cloudMsgParserPtr;\n    Output output1;\n    NCD2Relay ncd2Relay;\n    CloudMsgParser cloudMsgParser;\n};\n</code></pre>\n<p>with constructor:</p>\n<pre><code>HighWaterDetector::HighWaterDetector(Device* device): ncd2Relay(), output1(1, &amp;ncd2Relay){\n}\n</code></pre>\n<p>I am trying to initialize an instance of Output in the member initialization list for HighWaterDetector but Output which requires you to pass a pointer to an instance of NCD2Relay which is also a member of the class HighWaterDetector. My program crashes inside the output constructor. Is this the wrong way of doing this? What am I doing wrong?</p>\n<p>Output class:</p>\n<pre><code>class Output\n{\npublic:\n    Output(ushort relayNum, NCD2Relay* ncd2RelayPtr);\n    ushort relayNum;\n    OutputStatus outputStatus;\n    int setOutputOn(void);\n    int setOutputOff(void);\n    void process(void);\n    NCD2Relay* ncd2RelayPtr;\n};\n\n\n//Output Constructor\nOutput::Output(ushort relayNum, NCD2Relay* ncd2RelayPtr) {\n    this-&gt;relayNum = relayNum;\n    this-&gt;ncd2RelayPtr = ncd2RelayPtr; //DOESNT CRASH IF I COMMENT THIS OUT\n    this-&gt;outputStatus.outFail = 0;\n    Serial.print(\"Initializing output \");\n    Serial.println(this-&gt;relayNum);\n    this-&gt;setOutputOff();\n}\n</code></pre>\n", "Tags": "<c++><object><initialization-list><member-initialization>", "OwnerUserId": "5343613", "AnswerCount": "2"}, "38883621": {"ParentId": "38883526", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Did you heed to your compiler warnings? or are they turned on to maximum?\nThe order of declaration of your members may be the cause:</p>\n<pre><code>class HighWaterDetector\n{\npublic:\n    HighWaterDetector(Device* device);\n    Device * devicePtr;\n    Output * output1Ptr;\n    CloudMsgParser * cloudMsgParserPtr;\n    Output output1;                     // &lt;- This is constructed before\n    NCD2Relay ncd2Relay;                // &lt;- This...\n    CloudMsgParser cloudMsgParser;\n};\n</code></pre>\n<p>but your constructor goes like:</p>\n<pre><code>HighWaterDetector::HighWaterDetector(Device* device): ncd2Relay(), output1(1, &amp;ncd2Relay){ ... }\n</code></pre>\n<p>In the above context, using the address of <code>ncd2Relay</code> in the constructor of <code>output1</code> is simply using a pointer to an uninitialized object which is Undefined Behavior when you eventually dereference it before it's construction. Hence, You will need to enforce the ordering in your class definition...</p>\n<p>Just to quote from the C++ standard: (emphasis mine) <a href=\"http://www.eel.is/c++draft/class.base.init#13\" rel=\"nofollow\">[class.base.init/13]</a></p>\n<blockquote>\n<p id=\"so_38883526_38883621_0\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<ul>\n<li><p id=\"so_38883526_38883621_1\">First, and only for the constructor of the most derived class ([intro.object]), virtual base classes are initialized in the order\n  they appear on a depth-first left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-specifier-list.</p></li>\n<li><p id=\"so_38883526_38883621_2\">Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the\n  mem-initializers).</p></li>\n<li><p id=\"so_38883526_38883621_3\"><strong>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the\n  mem-initializers).</strong></p></li>\n<li><p id=\"so_38883526_38883621_4\">Finally, the compound-statement of the constructor body is executed.</p></li>\n</ul>\n</blockquote>\n", "OwnerUserId": "1621391", "LastEditorUserId": "1621391", "LastEditDate": "2016-08-10T21:29:57.347", "Id": "38883621", "Score": "4", "CreationDate": "2016-08-10T21:11:21.020", "LastActivityDate": "2016-08-10T21:29:57.347"}, "bq_ids": {"n4140": {"so_38883526_38883621_3": {"section_id": 438, "quality": 1.0, "length": 15}, "so_38883526_38883621_1": {"section_id": 438, "quality": 0.9666666666666667, "length": 29}, "so_38883526_38883621_0": {"section_id": 438, "quality": 1.0, "length": 6}, "so_38883526_38883621_2": {"section_id": 438, "quality": 1.0, "length": 13}, "so_38883526_38883621_4": {"section_id": 438, "quality": 1.0, "length": 5}}, "n3337": {"so_38883526_38883621_3": {"section_id": 429, "quality": 1.0, "length": 15}, "so_38883526_38883621_4": {"section_id": 429, "quality": 1.0, "length": 5}, "so_38883526_38883621_0": {"section_id": 429, "quality": 1.0, "length": 6}, "so_38883526_38883621_1": {"section_id": 429, "quality": 0.9666666666666667, "length": 29}, "so_38883526_38883621_2": {"section_id": 429, "quality": 1.0, "length": 13}}, "n4659": {"so_38883526_38883621_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_38883526_38883621_2": {"section_id": 458, "quality": 1.0, "length": 13}, "so_38883526_38883621_0": {"section_id": 458, "quality": 1.0, "length": 6}, "so_38883526_38883621_1": {"section_id": 458, "quality": 0.9666666666666667, "length": 29}, "so_38883526_38883621_4": {"section_id": 458, "quality": 1.0, "length": 5}}}});