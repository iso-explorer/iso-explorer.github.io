post_cb({"14839460": {"ParentId": "14838672", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_14838672_14839460_0\">If not, why is the range-based for loop in \u00a76.5.4 not implemented as a call to std::for_each? (this would allow range-based for loops to also be automatically parallelized)</p>\n</blockquote>\n<p>Well, <code>std::for_each</code> is not <em>allowed</em> by the standard to be \"automatically parallelized\" (it must proceed sequentially, as stated in the standard), so there's that. But more importantly, range-based <code>for</code> allows other things besides <code>std::for_each</code>. As a language feature, you get to, for example, <em><code>break</code></em> out of the loop. You can use <code>goto</code> or other language constructs. And so forth.</p>\n<p><code>std::for_each</code> is based around calling a function for each iteration. And you can't really \"break\" out of a function.</p>\n", "OwnerUserId": "734069", "LastEditorUserId": "734069", "LastEditDate": "2013-02-12T21:03:26.620", "Id": "14839460", "Score": "3", "CreationDate": "2013-02-12T18:39:31.620", "LastActivityDate": "2013-02-12T21:03:26.620"}, "14838769": {"ParentId": "14838672", "CommentCount": "5", "Body": "<ul>\n<li>Does this mean that <code>f</code> is applied to the elements of a container <em>in order</em>?</li>\n</ul>\n<p>I originally said no, but I think it does mean that, yes.  Other algorithms don't include that specific wording.</p>\n<ul>\n<li>If so, does the parallel mode of libstdc++ violate it?</li>\n</ul>\n<p>Maybe, the parallel mode is an extension, and somewhat experimental, not really claiming to be a 100% conforming implementation of the standard library. (If it does claim that somewhere in the docs I'll fix the docs! ;-)</p>\n<ul>\n<li>If not, why is the range-based for loop in \u00a76.5.4 not implemented as a call to std::for_each? (this would allow range-based for loops to also be automatically parallelized)</li>\n</ul>\n<p>Range-based <code>for</code> does not depend on the standard library to work. If <code>std::begin</code> and <code>std::end</code> are visible they might be used, but are not required.  Also, it would involve packaging up the loop body as a lambda so you have a function object to pass to <code>std::for_each</code>, which would complicate the specification of range-based <code>for</code>, which is supposed to have the same semantics and be exactly as efficient as a hand-written <code>for</code> loop.  But the real reason might be that noone thought to do it that way!</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "14838769", "Score": "8", "CreationDate": "2013-02-12T17:58:43.510", "LastActivityDate": "2013-02-12T17:58:43.510"}, "bq_ids": {"n4140": {"so_14838672_14838672_0": {"section_id": 1253, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_14838672_14838672_0": {"section_id": 1251, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_14838672_14838672_0": {"section_id": 1358, "quality": 0.8333333333333334, "length": 10}}}, "14838672": {"CommentCount": "0", "AcceptedAnswerId": "14838769", "PostTypeId": "1", "LastEditorUserId": "1422197", "CreationDate": "2013-02-12T17:53:27.887", "LastActivityDate": "2013-02-12T21:03:26.620", "LastEditDate": "2013-02-12T18:12:49.560", "ViewCount": "762", "FavoriteCount": "2", "Title": "Restrictions on std::for_each implementation", "Id": "14838672", "Score": "10", "Body": "<p>In \u00a725.2.4.2 of the C++ standard (<code>std::for_each</code>):</p>\n<pre><code>template&lt;class InputIterator, class Function&gt;   Function\nfor_each(InputIterator first, InputIterator last, Function f);\n</code></pre>\n<blockquote>\n<p id=\"so_14838672_14838672_0\"><em>Effects</em>: Applies f to the result of dereferencing every iterator in\n  the range [first,last),   <strong>starting from first and proceeding to last -\n  1</strong>.</p>\n</blockquote>\n<ul>\n<li>Does this mean that f is applied to the elements of a container <em>in order</em>?</li>\n<li>If so, does the <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/parallel_mode.html\" rel=\"nofollow noreferrer\">parallel mode of libstdc++</a> violate it? </li>\n<li>If not, why is the range-based for loop in \u00a76.5.4 not implemented as a call to std::for_each? (this would allow range-based for loops to also be automatically parallelized by the implementation)</li>\n</ul>\n", "Tags": "<c++><c++11><foreach>", "OwnerUserId": "1422197", "AnswerCount": "2"}});