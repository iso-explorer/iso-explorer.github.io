post_cb({"12245026": {"ParentId": "12245019", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because you're calling it through a pointer to <code>base</code>. That's how it works.</p>\n<p>Arguments are pushed on the argument stack (or inside registers) <em>before</em> the actual call. Because you have a pointer to <code>base</code> and no parameters, the default <code>4</code> is passed to the function. Then the correct function is called (<code>derived::display</code>), but with <code>base</code>'s default parameter. Of course, this is an implementation detail, but the behavior is standard.</p>\n<h3>C++03 8.4/10</h3>\n<blockquote>\n<p id=\"so_12245019_12245026_0\">A virtual function call (10.3) uses the default arguments in the declaration of the virtual function determined by the static\n  type of the pointer or reference denoting the object. An overriding function in a derived class does not acquire default\n  arguments from the function it overrides.</p>\n</blockquote>\n<p>I would provide emphasis on the quote, but the whole thing is pretty self-explanatory.</p>\n<pre><code>dobj.display();\n</code></pre>\n<p>would print <code>125</code> (5^3).</p>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2012-09-03T09:21:40.583", "Id": "12245026", "Score": "6", "CreationDate": "2012-09-03T09:16:24.373", "LastActivityDate": "2012-09-03T09:21:40.583"}, "12245019": {"CommentCount": "0", "ViewCount": "2222", "PostTypeId": "1", "LastEditorUserId": "1561378", "CreationDate": "2012-09-03T09:15:50.810", "LastActivityDate": "2012-09-03T11:54:48.853", "Title": "Why derived class function argument takes value of base class function argument?", "AcceptedAnswerId": "12245026", "LastEditDate": "2012-09-03T11:54:48.853", "Id": "12245019", "Score": "7", "Body": "<p>I'm working on C++. Following is my code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass base\n{\n        public:\n        virtual void display(int a = 4)\n        {\n                cout &lt;&lt; \"base ::  \"&lt;&lt;  a*a &lt;&lt; endl;\n        }\n};\n\nclass derived : public base\n{\n        public:\n        void display(int b = 5)\n        {\n                cout &lt;&lt; \" Derived :: \" &lt;&lt; b*b*b &lt;&lt;  endl;\n        }\n};\n\nint main()\n{\n        base *bobj;\n        derived dobj;\n        bobj = &amp;dobj;\n        bobj-&gt;display();\n        return 0;\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>Derived :: 64\n</code></pre>\n<p>The function of Base class is called, but default value of the parameter of derived function is used. \nWhy the derived class method display(), takes the base class method argument value?</p>\n", "Tags": "<c++><oop><inheritance><derived-class><base-class>", "OwnerUserId": "946509", "AnswerCount": "5"}, "12245105": {"ParentId": "12245019", "CommentCount": "0", "Body": "<p>The Standard says it all:</p>\n<blockquote>\n<p id=\"so_12245019_12245105_0\">(\u00a78.3.6/10) A virtual function call (10.3) uses the default arguments in the declaration of the virtual function determined by the static type of the pointer or reference denoting the object. An overriding function in a derived class does not acquire default arguments from the function it overrides. [ Example:</p>\n<pre><code>    struct A {\n      virtual void f(int a = 7);\n    };\n    struct B : public A {\n      void f(int a);\n    };\n    void m() {\n      B* pb = new B;\n      A* pa = pb;\n      pa-&gt;f();   // OK, calls pa-&gt;B::f(7)\n      pb-&gt;f();   // error: wrong number of arguments for B::f()\n    }\n    \u2014 end example ]\n</code></pre>\n</blockquote>\n", "OwnerUserId": "777186", "PostTypeId": "2", "Id": "12245105", "Score": "2", "CreationDate": "2012-09-03T09:22:09.663", "LastActivityDate": "2012-09-03T09:22:09.663"}, "12245090": {"ParentId": "12245019", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When you use <code>-&gt;</code> i.e. invoke a function using a pointer it uses the object which is being pointed for taking a decision which in this case is an object of <code>Derived</code> class.</p>\n<p>As the specification says...</p>\n<blockquote>\n<p id=\"so_12245019_12245090_0\">A virtual function call uses the default arguments in the declaration of the virtual function determined by the static type of the pointer or reference denoting the object. An overriding function in a derived class does not acquire default arguments from the function it overrides.</p>\n</blockquote>\n", "OwnerUserId": "185041", "LastEditorUserId": "185041", "LastEditDate": "2012-09-03T10:15:31.660", "Id": "12245090", "Score": "0", "CreationDate": "2012-09-03T09:20:55.420", "LastActivityDate": "2012-09-03T10:15:31.660"}, "12245209": {"ParentId": "12245019", "CommentCount": "3", "Body": "<p>Make yourself a less contrived test setup, and it becomes clear:</p>\n<pre><code>#include \"base.hpp\"\n\nint compute(base * p)\n{\n    return p-&gt;display();\n}\n</code></pre>\n<p>Two things are obvious now:</p>\n<ol>\n<li><p>The default argument can only possibly come from the default argument specified in <code>base</code>.</p></li>\n<li><p>The actual dispatch is dynamic, since <code>display</code> is a virtual member function.</p></li>\n</ol>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "12245209", "Score": "0", "CreationDate": "2012-09-03T09:29:58.543", "LastActivityDate": "2012-09-03T09:29:58.543"}, "12245071": {"ParentId": "12245019", "CommentCount": "1", "Body": "<p>Default arguments are inserted by the caller. Your code is equivalent to</p>\n<pre><code>class base {\npublic:\n    virtual void display(int a) { cout &lt;&lt; \"base ::  \"&lt;&lt;  a*a &lt;&lt; endl; }\n    inline void display(void) { display(4); }\n};\n</code></pre>\n<p>etc.</p>\n<p>When calling through a <code>base</code> pointer, the default value from the base class is inserted.</p>\n", "OwnerUserId": "613064", "PostTypeId": "2", "Id": "12245071", "Score": "2", "CreationDate": "2012-09-03T09:19:30.870", "LastActivityDate": "2012-09-03T09:19:30.870"}, "bq_ids": {"n4140": {"so_12245019_12245090_0": {"section_id": 3261, "quality": 1.0, "length": 26}, "so_12245019_12245105_0": {"section_id": 3261, "quality": 0.896551724137931, "length": 26}, "so_12245019_12245026_0": {"section_id": 3261, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_12245019_12245090_0": {"section_id": 3133, "quality": 1.0, "length": 26}, "so_12245019_12245105_0": {"section_id": 3133, "quality": 0.896551724137931, "length": 26}, "so_12245019_12245026_0": {"section_id": 3133, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_12245019_12245090_0": {"section_id": 4019, "quality": 1.0, "length": 26}, "so_12245019_12245105_0": {"section_id": 4019, "quality": 0.896551724137931, "length": 26}, "so_12245019_12245026_0": {"section_id": 4019, "quality": 0.9629629629629629, "length": 26}}}});