post_cb({"bq_ids": {"n4140": {"so_6804029_6804415_4": {"length": 4, "quality": 0.8, "section_id": 87}, "so_6804029_6804415_1": {"length": 4, "quality": 0.8, "section_id": 676}, "so_6804029_6804415_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_6804029_6804415_3": {"length": 25, "quality": 0.9615384615384616, "section_id": 87}}, "n3337": {"so_6804029_6804415_4": {"length": 4, "quality": 0.8, "section_id": 82}, "so_6804029_6804415_1": {"length": 4, "quality": 0.8, "section_id": 666}, "so_6804029_6804415_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_6804029_6804415_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 82}}, "n4659": {"so_6804029_6804415_1": {"length": 4, "quality": 0.8, "section_id": 704}}}, "6804415": {"Id": "6804415", "PostTypeId": "2", "Body": "<p>Let's start with what the Standard says for the benefit of all, from 14.3.2 Template non-type arguments [temp.arg.nontype] (C++03 Standard):</p>\n<blockquote>\n<p id=\"so_6804029_6804415_0\">1 A template-argument for a non-type, non-template template-parameter\n  shall be one of:</p>\n<p id=\"so_6804029_6804415_1\">\u2014 an integral constant-expression of integral or\n  enumeration type; or</p>\n<p id=\"so_6804029_6804415_2\">\u2014 the name of a non-type template-parameter; or</p>\n<p id=\"so_6804029_6804415_3\">\u2014 <strong>the address of an object or function with external linkage</strong>, including\n  function templates and function template-ids but excluding non-static\n  class members, expressed as &amp; id-expression <strong>where the &amp; is optional if\n  the name refers to a function or array</strong>, or if the corresponding\n  template-parameter is a reference; or</p>\n<p id=\"so_6804029_6804415_4\">\u2014 a pointer to member expressed\n  as described in 5.3.1 .</p>\n</blockquote>\n<p>Emphasis mine for the relevant parts.</p>\n<p>Additionally, paragraph 5 lists the conversions that are allowed and one of them is array to pointer decay. Paragraph 2 is even a note that showcases a similar use of <code>char*</code> as that of the OP.</p>\n<p>All that is left is how to have an object in a header with external linkage and no errors. The usual way is a declaration in the header, and one and only one definition in one TU.</p>\n<pre><code>// In header\nextern char EL[]; // array of unspecified size, an incomplete type\n                  // extern char EL[3] is acceptable, too.\n\n// In source\nchar EL[] = \"el\";\n</code></pre>\n<p>Note that <code>static</code> is not a possibility because of the requirement that the object have external linkage. The unnamed namespace is to be preferred if the intent is to have a separate object per TU.</p>\n<pre><code>// In header\n// NOT RECOMMENDED! Be wary of ODR-violations with such constructs\n// or simply only use these in source files\nnamespace {\n\n// Recommend using const here, which in turn means using extern\n// change non-type template parameter accordingly\nextern const char EL[] = \"el\";\n\n} // namespace\n</code></pre>\n<hr>\n<p>For the curious, C++0x relaxed the requirement that an object have external linkage to be a valid parameter. (My copy of GCC doesn't support that yet.) String literals are inexplicably <em>still</em> forbidden to appear as template arguments.</p>\n</hr>", "LastEditorUserId": "726300", "LastActivityDate": "2011-07-24T01:33:08.883", "Score": "3", "CreationDate": "2011-07-24T01:26:55.337", "ParentId": "6804029", "CommentCount": "1", "OwnerUserId": "726300", "LastEditDate": "2011-07-24T01:33:08.883"}, "6804029": {"ViewCount": "146", "Body": "<p>I know the only way to pass a string literal as template argument is to declare it before:</p>\n<p>file a.h</p>\n<pre><code>#ifndef A_H\n#define A_H\n\n#include &lt;string&gt;\n\nchar EL[] = \"el\";\n\n\ntemplate&lt;char* name&gt;\nstruct myclass\n{\n  std::string get_name() { return name; }\n};\n\ntypedef myclass&lt;EL&gt; myclass_el;\n\n#endif\n</code></pre>\n<p>file a.cpp</p>\n<pre><code>#include \"a.cpp\"\n</code></pre>\n<p>main.cpp</p>\n<pre><code>#include \"a.h\"\n...\n\ng++ -c a.cpp\ng++ -c main.cpp\ng++ -o main main.o a.o\n</code></pre>\n<p>and I got:</p>\n<pre><code>a.o:(.data+0x0): multiple definition of `EL'\nmain.o:(.data+0x0): first defined here\ncollect2: ld returned 1 exit status\n</code></pre>\n<p>I can't declare <code>EL</code> as external and I want to keep the <code>a.cpp</code>. Solutions?</p>\n", "AcceptedAnswerId": "6804415", "Title": "code guards fail and template from string literal", "CreationDate": "2011-07-23T23:47:00.580", "Id": "6804029", "CommentCount": "15", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-02-20T08:12:52.637", "LastEditorUserId": "817766", "LastActivityDate": "2014-02-20T08:12:52.637", "Score": "1", "OwnerUserId": "238671", "Tags": "<c++><compiler-errors><include-guards><multiple-definition-error>", "AnswerCount": "2"}, "6804170": {"Id": "6804170", "PostTypeId": "2", "Body": "<p><strong>Revised Answer</strong> (The previous answer was nonsense. Sorry for that! Also, your previous question should have covered this problem already entirely.)</p>\n<p>Header:</p>\n<pre><code>#ifndef H_ABC\n#define H_ABC\n\nextern char EL[];\n\ntemplate &lt;const char * S&gt;\nstruct Foo\n{\n  static inline const char * get_name() { return S; }\n  static const char * name;\n};\ntemplate &lt;const char * S&gt; const char * Foo&lt;S&gt;::name(S);\n\ntypedef Foo&lt;EL&gt; MyElClass;\n\n#endif\n</code></pre>\n<p>You need one TU to define <code>EL</code>:</p>\n<pre><code>#include \"header.h\"\nchar EL[] = \"EL\";\n</code></pre>\n<p>You can use the template anywhere:</p>\n<pre><code>#include \"header.h\"\n\nchar A[] = \"abc\";\nextern const char B[] = \"xyz\";  // must have extern linkage!\n\nvoid f() {\n  std::cout &lt;&lt; MyElClass::name &lt;&lt; std::endl;\n  std::cout &lt;&lt; MyElClass::get_name() &lt;&lt; std::endl;\n  std::cout &lt;&lt; Foo&lt;A&gt;::name &lt;&lt; std::endl;\n  std::cout &lt;&lt; Foo&lt;B&gt;::name &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastEditorUserId": "596781", "LastActivityDate": "2011-07-24T02:06:48.720", "Score": "2", "CreationDate": "2011-07-24T00:21:12.557", "ParentId": "6804029", "CommentCount": "0", "OwnerUserId": "596781", "LastEditDate": "2011-07-24T02:06:48.720"}});