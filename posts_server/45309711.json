post_cb({"45309711": {"CommentCount": "4", "AcceptedAnswerId": "45309794", "ClosedDate": "2017-07-25T17:27:20.387", "CreationDate": "2017-07-25T17:10:58.730", "LastActivityDate": "2017-07-25T17:20:14.783", "PostTypeId": "1", "ViewCount": "54", "Title": "Pointer returned by overloaded new is changed", "Id": "45309711", "Score": "0", "Body": "<p>I have come across a bizarre problem and I have created this simple program in order to demonstrate it. I know the code itself doesn't make much sense, but I would like to highlight something I don't understand.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass tempClass{\npublic:\n    float n;\n    tempClass(){};\n    ~tempClass(){} //VERY IMPORTANT LINE\n    void* operator new[](size_t size);\n};\n\n\nvoid* tempClass::operator new[](size_t size){\n    tempClass* a;\n    a= ::new tempClass[2];\n    for (int i = 0; i &lt; 2; i++)\n    {\n        a[i].n = i*10;\n    }\n    cout &lt;&lt; a &lt;&lt; endl;\n    return a;\n}\n\n\nint main(){\n    tempClass* a;\n    a = new tempClass[2];\n    cout &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; a[0].n &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>In the code, I have overloaded the operator new for the class that I have created. However, the behaviour of the function changes, depending on whether I include the destructor of the class or not. I have noticed, that if I don't include the destructor, everything works fine, whereas if I did, the returned value of the pointer <code>a</code> would be increased by <code>8</code> at all times. Therefore, in this example, the last <code>cout</code> of the program will print <code>20</code> if I include the destructor and <code>0</code> if I don't, at all times.  Why does this happen?</p>\n", "Tags": "<c++>", "OwnerUserId": "3371101", "AnswerCount": "2"}, "45309794": {"ParentId": "45309711", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Array-new-expressions pass an unspecified amount of overhead to the allocation function (i.e. your <code>operator new</code> overload). This is to allow the implementation to record the number of array elements, so that destructors can be called on deletion.</p>\n<p>If your implementation detects that the class doesn't <em>need</em> destructors to be called (because it is trivially destructible), it may choose to not require the same amount of overhead as it would otherwise.</p>\n<p>The formal wording is 8.3.4[expr.new]p11:</p>\n<blockquote>\n<p id=\"so_45309711_45309794_0\">When a <em>new-expression</em> calls an allocation function and that allocation has not been extended, the <em>new-\n  expression</em> passes the amount of space requested to the allocation function as the first argument of type\n  <code>std::size_t</code>. <strong>That argument shall be no less than the size of the object being created; it may be greater\n  than the size of the object being created only if the object is an array.</strong> [...] </p>\n</blockquote>\n<p>Note that the overhead is <em>unspecified</em>, so it could in principle be different at every call! (This is also the reason that <a href=\"https://stackoverflow.com/q/8720425\">placement-array-new is unusable</a>.) However, the Itanium ABI that many implementations use is fairly specific in how the \"<a href=\"http://itanium-cxx-abi.github.io/cxx-abi/abi.html#array-cookies\" rel=\"nofollow noreferrer\">array cookie</a>\" works, and matches your experience.</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2017-07-25T17:20:14.783", "Id": "45309794", "Score": "4", "CreationDate": "2017-07-25T17:14:54.537", "LastActivityDate": "2017-07-25T17:20:14.783"}, "45309822": {"ParentId": "45309711", "CommentCount": "0", "Body": "<p>This is the Itanium CXX ABI <a href=\"http://itanium-cxx-abi.github.io/cxx-abi/abi.html#array-cookies\" rel=\"nofollow noreferrer\">array <code>operator new[]</code> cookie</a>:</p>\n<blockquote>\n<p id=\"so_45309711_45309822_0\">When operator new is used to create a new array, a cookie is usually stored to remember the allocated length (number of array elements) so that it can be deallocated correctly. [...]\n  <br/>\n<strong>No cookie is required if the array element type T has a trivial destructor (12.4 [class.dtor])</strong> [...]</p>\n</blockquote>\n<p>A destructor, other than one defined within the class as <code>= default</code>, is non-trivial.</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "45309822", "Score": "2", "CreationDate": "2017-07-25T17:16:59.207", "LastActivityDate": "2017-07-25T17:16:59.207"}, "bq_ids": {"n4140": {"so_45309711_45309794_0": {"section_id": 6092, "quality": 0.8918918918918919, "length": 33}}, "n3337": {"so_45309711_45309794_0": {"section_id": 5859, "quality": 0.7027027027027027, "length": 26}}, "n4659": {"so_45309711_45309794_0": {"section_id": 7588, "quality": 0.918918918918919, "length": 34}}}});