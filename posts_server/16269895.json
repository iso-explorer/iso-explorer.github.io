post_cb({"16269895": {"ViewCount": "427", "Body": "<p>The following code gives me a segmentation fault: </p>\n<pre><code>bool primeNums[100000000]; // index corresponds to number, t = prime, f = not prime\n\nfor (int i = 0; i &lt; 100000000; ++i)\n{\n    primeNums[i] = false;\n}\n</code></pre>\n<p>However, if I change the array declaration to be dynamic:</p>\n<pre><code>bool *primeNums = new bool[100000000];\n</code></pre>\n<p>I don't get a seg-fault.  I have a general idea of why this is: in the first example, the memory's being put on the stack while in the dynamic case it's being put on the heap.</p>\n<p>Could you explain this in more detail?</p>\n", "Title": "Why does a large static array give a seg-fault but dynamic doesn't? (C++)", "CreationDate": "2013-04-29T01:11:10.133", "LastActivityDate": "2013-04-29T01:36:08.880", "CommentCount": "1", "PostTypeId": "1", "Id": "16269895", "Score": "1", "OwnerUserId": "681523", "Tags": "<c++><arrays><dynamic><static>", "AnswerCount": "4"}, "16269947": {"Id": "16269947", "PostTypeId": "2", "Body": "<p>in the first case you allocate memory on stack:</p>\n<pre><code>bool primeNums[100000000]; // put 100000000 bools on stack\n\nfor (int i = 0; i &lt; 100000000; ++i)\n{\n    primeNums[i] = false;\n}\n</code></pre>\n<p>however this is allocation on heap:</p>\n<pre><code>bool *primeNums = new bool[100000000]; // put 100000000 bools in the heap\n</code></pre>\n<p>and since stack is (very) limited this is the reason for segfault</p>\n", "LastActivityDate": "2013-04-29T01:18:39.077", "CommentCount": "0", "CreationDate": "2013-04-29T01:18:39.077", "ParentId": "16269895", "Score": "0", "OwnerUserId": "1141471"}, "16269985": {"Id": "16269985", "PostTypeId": "2", "Body": "<pre><code>bool primeNums[100000000];\n</code></pre>\n<p>This declaration allocates memory in the <a href=\"http://en.wikipedia.org/wiki/Stack-based_memory_allocation\" rel=\"nofollow\">stack space</a>. The stack space is a memory block allocated when your application is launched. It is usually in the range of a few kilobyes or megabytes (it depends on the language implementation, compiler, os, and other factors).</p>\n<p>This space is used to store local and static variables so you have to be gentle and don't overuse it. Because this is a stack, all allocations are continuos (no empty space between allocations).</p>\n<pre><code>bool *primeNums = new bool[100000000];\n</code></pre>\n<p>In this case the memory is allocated is the heap. This is space free where large new chucks of memory can be allocated.</p>\n", "LastActivityDate": "2013-04-29T01:24:53.380", "CommentCount": "0", "CreationDate": "2013-04-29T01:24:53.380", "ParentId": "16269895", "Score": "1", "OwnerUserId": "2330352"}, "bq_ids": {"n4140": {"so_16269895_16269904_4": {"length": 10, "quality": 0.6666666666666666, "section_id": 6815}, "so_16269895_16269904_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 6815}, "so_16269895_16269904_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 6814}, "so_16269895_16269904_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 6815}, "so_16269895_16269904_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 6815}}, "n3337": {"so_16269895_16269904_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 6570}, "so_16269895_16269904_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 6570}, "so_16269895_16269904_4": {"length": 10, "quality": 0.6666666666666666, "section_id": 6570}, "so_16269895_16269904_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 6570}, "so_16269895_16269904_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 6569}}, "n4659": {"so_16269895_16269904_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 8307}, "so_16269895_16269904_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 8306}, "so_16269895_16269904_4": {"length": 10, "quality": 0.6666666666666666, "section_id": 8307}, "so_16269895_16269904_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 8307}, "so_16269895_16269904_3": {"length": 17, "quality": 0.8947368421052632, "section_id": 8307}}}, "16269904": {"Id": "16269904", "PostTypeId": "2", "Body": "<pre><code>bool primeNums[100000000];\n</code></pre>\n<p>used out all your <code>stack</code> space, therefore, you will get segmentation fault since there is not enough stack space to allocate a static array with huge size. </p>\n<p>dynamic array is allocated on the <code>heap</code>, therefore, not that easy to get segmentation fault. Dynamic arrays are created using <code>new</code> in C++, it will call <code>operator new</code> to allocate memory then call constructor to initialize the allocated memory. </p>\n<p>More information about how <code>operator new</code> works is quoted from the standard below [new.delete.single]:</p>\n<blockquote>\n<p id=\"so_16269895_16269904_0\">Required behavior:</p>\n<p id=\"so_16269895_16269904_1\">Return a nonnull pointer to suitably aligned storage (3.7.3), or <strong>else throw a bad_alloc exception</strong>. This requirement is binding on a replacement version of this function.</p>\n<p id=\"so_16269895_16269904_2\">Default behavior:</p>\n<p id=\"so_16269895_16269904_3\">\u2014 Executes a loop: Within the loop, <strong>the function first attempts to allocate the requested storage</strong>. Whether the attempt involves a call to the Standard C library function malloc is unspecified.</p>\n<p id=\"so_16269895_16269904_4\">\u2014 Returns a pointer to the allocated storage if the attempt is successful. Otherwise, if the last argument to set_new_handler() was a null pointer, throw bad_alloc.</p>\n<p id=\"so_16269895_16269904_5\">\u2014 Otherwise, the function calls the current new_handler (18.4.2.2). If the called function returns, the loop repeats.</p>\n<p id=\"so_16269895_16269904_6\">\u2014 The loop terminates when an attempt to allocate the requested storage is successful or when a called new_handler function does not return.</p>\n</blockquote>\n<p>So using dynamic array with <code>new</code>, when there is not enough space, it will throw <code>bad_alloc</code> by default, in this case, you will see an exception not a segmentation fault, when your array size is huge, it is better to use dynamic array or standard containers such as vectors.</p>\n", "LastEditorUserId": "1760345", "LastActivityDate": "2013-04-29T01:36:08.880", "Score": "5", "CreationDate": "2013-04-29T01:12:49.233", "ParentId": "16269895", "CommentCount": "2", "OwnerUserId": "1760345", "LastEditDate": "2013-04-29T01:36:08.880"}, "16269910": {"Id": "16269910", "PostTypeId": "2", "Body": "<p>Some compilers or operating systems limit the size of the stack.  On windows the default is 1 MB but it can be changed.</p>\n", "LastActivityDate": "2013-04-29T01:14:08.507", "CommentCount": "0", "CreationDate": "2013-04-29T01:14:08.507", "ParentId": "16269895", "Score": "0", "OwnerUserId": "1862101"}});