post_cb({"282818": {"ParentId": "282800", "CommentCount": "4", "Body": "<p>In C++ you cannot name a function the same name as a class/struct/typedef.  You have a class named \"Player\" and so the HalfSet class has a function named \"Player\" (\"Player *Player()\").  You need to rename one of these (probably changing HalfSet's Player() to getPlayer() or somesuch).</p>\n", "OwnerUserId": "36384", "Id": "282818", "PostTypeId": "2", "OwnerDisplayName": "SoapBox", "Score": "13", "CreationDate": "2008-11-12T02:26:43.513", "LastActivityDate": "2008-11-12T02:26:43.513"}, "283463": {"ParentId": "282800", "CommentCount": "0", "Body": "<p>Your problem is that names are looked up in scopes. Within the declaration of HalfSet::setPlayer(Player*), the unqualified name Player needs to be looked up. The first scope tried is class HalfSet. In that scope, the lookup of Player finds function HalfSet::Player, not global class ::Player.</p>\n<p>The solution is to use a qualified name, ::Player. This tells the compiler which scope to use for lookup (global) which in turn means HalfSet::Player is not even considered.</p>\n", "OwnerUserId": "15416", "Id": "283463", "PostTypeId": "2", "OwnerDisplayName": "MSalters", "Score": "8", "CreationDate": "2008-11-12T09:57:06.083", "LastActivityDate": "2008-11-12T09:57:06.083"}, "26695750": {"ParentId": "282800", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The current answer to this question is just incorrect, it says:</p>\n<blockquote>\n<p id=\"so_282800_26695750_0\">In C++ you cannot name a function the same name as a class/struct/typedef</p>\n</blockquote>\n<p>Name hiding of a class by a function is allowed, if we go to the <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\" rel=\"nofollow noreferrer\">draft Pre C++11 standard</a> section <code>3.3.7</code> <em>Name hiding</em> it says:</p>\n<blockquote>\n<p id=\"so_282800_26695750_1\">A class name (9.1) or enumeration name (7.2) can be hidden by the name\n  of an object, function, or enumerator declared in the same scope. If a\n  class or enumeration name and an object, function, or enumerator are\n  declared in the same scope (in any order) with the same name, the\n  class or enumeration name is hidden wherever the object, function, or\n  enumerator name is visible.</p>\n</blockquote>\n<p>So the fact that you have the function and a class named <code>Player</code> is not the issue, in fact the following code is valid:</p>\n<pre><code>class Player\n{\n} ;\n\nPlayer* Player() ;\n</code></pre>\n<p>and we can use an <a href=\"https://stackoverflow.com/questions/10902518/when-to-use-an-elaborated-type-specifier\">elaborated type specifier</a> to un-hide the class type.</p>\n<p>As far as I can tell this is violating section <code>3.3.6</code> <em>Class scope</em> paragraph <code>2</code> which says:</p>\n<blockquote>\n<p id=\"so_282800_26695750_2\">A name N used in a class S shall refer to the same declaration in its\n  context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>So in this case <code>Player</code> changes meaning from <em>class</em> to a <em>function</em>, it is not clear to me it was intended so strictly but I can see how it could be read that way. This seems to be the message <code>gcc</code> uses when it detects this violation as we can see from a <a href=\"https://stackoverflow.com/q/26681873/1708801\">similar question</a>.</p>\n<p>Using an elaborated type specifier prevents the change of meaning:</p>\n<pre><code>class Player* Player() const ;\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:17:11.353", "Id": "26695750", "Score": "4", "CreationDate": "2014-11-02T03:30:43.790", "LastActivityDate": "2014-11-04T03:12:20.393"}, "bq_ids": {"n4140": {"so_282800_26695750_2": {"section_id": 7070, "quality": 1.0, "length": 15}, "so_282800_26695750_0": {"section_id": 557, "quality": 0.7142857142857143, "length": 5}, "so_282800_26695750_1": {"section_id": 7079, "quality": 0.9142857142857143, "length": 32}}, "n3337": {"so_282800_26695750_2": {"section_id": 6814, "quality": 1.0, "length": 15}, "so_282800_26695750_0": {"section_id": 548, "quality": 0.7142857142857143, "length": 5}, "so_282800_26695750_1": {"section_id": 6823, "quality": 0.9142857142857143, "length": 32}}, "n4659": {"so_282800_26695750_2": {"section_id": 8568, "quality": 1.0, "length": 15}, "so_282800_26695750_0": {"section_id": 580, "quality": 0.7142857142857143, "length": 5}, "so_282800_26695750_1": {"section_id": 8580, "quality": 0.9142857142857143, "length": 32}}}, "282800": {"CommentCount": "1", "ViewCount": "11294", "PostTypeId": "1", "LastEditorUserId": "893", "CreationDate": "2008-11-12T02:13:50.887", "LastActivityDate": "2014-11-04T03:12:20.393", "AnswerCount": "3", "LastEditDate": "2012-09-18T06:43:57.253", "AcceptedAnswerId": "282818", "LastEditorDisplayName": "epochwolf", "Title": "C++ odd compile error: error: changes meaning of \"Object\" from class \"Object\"", "Id": "282800", "Score": "8", "Body": "<p>I don't even know where to go with this. Google wasn't very helpful. As with my previous question. I'm using TextMate's Command+R to compile the project. </p>\n<blockquote>\n<p id=\"so_282800_282800_0\">game.h:16:error: declaration of \u2018Player* HalfSet::Player() const\u2019</p>\n<p id=\"so_282800_282800_1\">players.h:11:error: changes meaning of \u2018Player\u2019 from \u2018class Player\u2019</p>\n<p id=\"so_282800_282800_2\">game.h:21:error: \u2018Player\u2019 is not a type</p>\n</blockquote>\n<p>player.h file (partial)</p>\n<pre><code>#ifndef PLAYERS_H\n#define PLAYERS_H\nusing namespace std;\n\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;istream&gt;\n#include &lt;iomanip&gt;\n#include \"generics.h\"\n\nclass Player{ //Line 11\npublic:\n    //getters\n    long Id() const;\n    string FirstName() const;\n    string LastName() const;\n    string Country() const;\n    //setters\n    void setId(long id);\n    void setFirstName(string s);\n    void setLastName(string s);\n    void setCountry(string s);\n    //serializing functions\n    void display(ostream &amp;out);\n    void read(istream &amp;in);\n    void write(ostream &amp;out);\n    //Initalizers\n    Player();\n    Player(istream &amp;in);\n    Player(string firstName, string lastName);\n    Player(string firstName, string lastName, string country);\n    Player(long id, string firstName, string lastName, string country);\n    ~Player();\nprivate:\n    long _id;\n    string _firstName;\n    string _lastName;\n    string _country;\n};\n</code></pre>\n<p>game.h file (partial)</p>\n<pre><code>#ifndef GAME_H\n#define GAME_H\n\n#include \"generics.h\"\n#include \"players.h\"\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;istream&gt;\n#include &lt;iomanip&gt;\n\nusing namespace std;\n\nclass HalfSet{\npublic:\n    //getters\n    Player* Player() const; //Line 16\n    int GamesWon() const;\n    int TotalPoints() const;\n    int Errors() const;\n    //setters\n    void setPlayer(Player* p);\n    void setGamesWon(int games);\n    void setTotalPoints(int points);\n    void setErrors(int errors);\n    //Serialization\n    void display(ostream &amp;out) const;\n    void read(istream &amp;in) const;\n    void write(ostream &amp;out) const;\n    //Initalizers\n    HalfSet();\n    ~HalfSet();\nprivate:\n    Player* _player;\n    int _gamesWon;\n    int _points;\n    int _errors;\n};\n</code></pre>\n<p>What is going on here?</p>\n", "Tags": "<c++><xcode>", "OwnerUserId": "16204", "OwnerDisplayName": "epochwolf"}});