post_cb({"30875579": {"ParentId": "30875069", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It was added to suport <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Standards.html\">GNU mode in C++</a>, as we can see from this patch <a href=\"http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20100927/034949.html\">[cfe-commits] r115028 </a>:</p>\n<blockquote>\n<p id=\"so_30875069_30875579_0\">Define _Bool, bool, true, and false macros in  when we're\n  in a GNU-compatible C++ dialect. Fixes &lt;rdar://problem/8477819&gt;.</p>\n</blockquote>\n<p>so <code>gcc</code> supports this as an extension and this modification was made to support that extension.</p>\n<p>Although I can not find the original problem report mentioned in the patch.</p>\n<p>This is non-conforming as we can see from the draft C++11 standard section <code>18.10</code> Other runtime support <em>[support.runtime]</em>:</p>\n<blockquote>\n<p id=\"so_30875069_30875579_1\">The header &lt;cstdbool&gt; and the header &lt;stdbool.h&gt; shall not\n  define macros named bool, true, or false.</p>\n</blockquote>\n<p>but <code>gcc</code> is not meant to be strictly conforming in GNU mode.</p>\n<p><code>stdbool.h</code> is part of C99 and so was not supported by the C++ standard until C++11 which in <em>Annex D</em> says:</p>\n<blockquote>\n<p id=\"so_30875069_30875579_2\">For compatibility with the C standard library and the C Unicode TR,\n  the C++ standard library provides the 25 C headers, as shown in Table\n  154</p>\n</blockquote>\n<p>and includes <code>&lt;stdbool.h&gt;</code>. </p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-06-18T23:58:06.133", "Id": "30875579", "Score": "18", "CreationDate": "2015-06-16T18:37:45.397", "LastActivityDate": "2015-06-18T23:58:06.133"}, "30875069": {"CommentCount": "6", "AcceptedAnswerId": "30875592", "PostTypeId": "1", "LastEditorUserId": "600591", "CreationDate": "2015-06-16T18:11:22.220", "LastActivityDate": "2015-06-23T06:21:12.843", "LastEditDate": "2015-06-16T18:22:06.067", "ViewCount": "2532", "FavoriteCount": "3", "Title": "Why does clang's stdbool.h contain #define false false", "Id": "30875069", "Score": "58", "Body": "<p>After being pointed there by a compiler error, I noticed clang's <a href=\"http://clang.llvm.org/doxygen/stdbool_8h_source.html\" rel=\"noreferrer\"><code>stdbool.h</code></a> file includes (among other things) the following lines:</p>\n<pre><code>#define bool  bool\n#define false false\n#define true  true\n</code></pre>\n<p>They're contained in an <code>#ifdef</code> block that enforces <code>__cplusplus</code> indirectly, hence the c++ tag even though <code>stdbool.h</code> is a C header.</p>\n<p>What's the need for those defines? I imagine they're required for some preprocessor-related reason but I'd be interested to know what part of the standard or which technical reason makes it so clang has to include those. </p>\n", "Tags": "<c++><clang><language-lawyer>", "OwnerUserId": "600591", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30875069_30875592_0": {"section_id": 6971, "quality": 0.6666666666666666, "length": 6}, "so_30875069_30875579_1": {"section_id": 6971, "quality": 0.9090909090909091, "length": 10}, "so_30875069_30875579_2": {"section_id": 4906, "quality": 0.7, "length": 7}}, "n3337": {"so_30875069_30875592_0": {"section_id": 6718, "quality": 0.6666666666666666, "length": 6}, "so_30875069_30875579_1": {"section_id": 6718, "quality": 0.9090909090909091, "length": 10}, "so_30875069_30875579_2": {"section_id": 4701, "quality": 0.7, "length": 7}}, "n4659": {"so_30875069_30875592_0": {"section_id": 6311, "quality": 0.6666666666666666, "length": 6}, "so_30875069_30875579_1": {"section_id": 6311, "quality": 0.9090909090909091, "length": 10}}}, "30875592": {"ParentId": "30875069", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>stdbool.h</code> is a C header, not a C++ header. It is not usually found in C++ programs because <code>true</code> and <code>false</code> are already keywords in C++.</p>\n<p>Consequently, if a C++ program includes <code>stdbool.h</code> it is a fairly clear indication that it is a ported-over C program (e.g. a C program that is being compiled as C++). In this case, G++ supports <code>stdbool.h</code> in C++ mode as a GNU extension, per the comments from the <a href=\"http://sites.uclouvain.be/SystInfo/usr/include/stdbool.h.html\">GCC <code>stdbool.h</code></a>:</p>\n<pre><code>/* Supporting &lt;stdbool.h&gt; in C++ is a GCC extension.  */\n#define _Bool        bool\n#define bool        bool\n#define false        false\n#define true        true\n\n...\n\n/* Signal that all the definitions are present.  */\n#define __bool_true_false_are_defined        1\n</code></pre>\n<p>Clang, likewise, supports <code>stdbool.h</code> in C++ for compatibility with G++.\nThe values are intentionally defined here to match the built-in C++ type rather than the traditional C99 definitions. They are defined as macros presumably to provide some compatibility with the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdbool.h.html\">C99 standard</a>, which requires:</p>\n<blockquote>\n<p id=\"so_30875069_30875592_0\">The  header shall define the following <em>macros</em>: <code>bool</code>, <code>true</code>, <code>false</code>, <code>__bool_true_false_are_defined</code>.</p>\n<p id=\"so_30875069_30875592_1\">An application may undefine and then possibly redefine the macros bool, true, and false.</p>\n</blockquote>\n", "OwnerUserId": "1204143", "LastEditorUserId": "1204143", "LastEditDate": "2015-06-23T06:21:12.843", "Id": "30875592", "Score": "50", "CreationDate": "2015-06-16T18:38:22.563", "LastActivityDate": "2015-06-23T06:21:12.843"}});