post_cb({"706082": {"ParentId": "706030", "CommentCount": "1", "Body": "<p>item 8.5.1.7 of standard draft:</p>\n<blockquote>\n<p id=\"so_706030_706082_0\">-7- If there are fewer initializers in the list than there are members in the\n  aggregate, then each member not\n  explicitly initialized shall be\n  default-initialized (dcl.init).\n  [Example:</p>\n<pre><code>struct S { int a; char* b; int c; };\nS ss = { 1, \"asdf\" };\n</code></pre>\n<p id=\"so_706030_706082_1\">initializes ss.a with 1, ss.b with\n  \"asdf\", and ss.c with the value of an\n  expression of the form int(), that is,\n  0. ]</p>\n</blockquote>\n", "OwnerUserId": "72000", "Id": "706082", "PostTypeId": "2", "OwnerDisplayName": "bb", "Score": "25", "CreationDate": "2009-04-01T15:36:08.307", "LastActivityDate": "2009-04-01T15:36:08.307"}, "706039": {"ParentId": "706030", "CommentCount": "1", "Body": "<p>No. it is guaranteed to be 0.</p>\n", "OwnerUserId": "74261", "Id": "706039", "PostTypeId": "2", "OwnerDisplayName": "Yossarian", "Score": "3", "CreationDate": "2009-04-01T15:24:41.267", "LastActivityDate": "2009-04-01T15:24:41.267"}, "706045": {"CommentCount": "5", "CreationDate": "2009-04-01T15:25:19.453", "LastEditorUserId": "33708", "LastActivityDate": "2009-04-01T15:40:06.377", "ParentId": "706030", "PostTypeId": "2", "LastEditorDisplayName": "Mehrdad", "LastEditDate": "2009-04-01T15:40:06.377", "Id": "706045", "Score": "24", "Body": "<p>It's guaranteed to be 0 if it's partially initialized, just like array initializers. If it's uninitialized, it'll be unknown.</p>\n<pre><code>struct T t; // t.x, t.y will NOT be initialized to 0 (not guaranteed to)\n\nstruct T t = {42}; // t.y will be initialized to 0.\n</code></pre>\n<p>Similarly:</p>\n<pre><code>int x[10]; // Won't be initialized.\n\nint x[10] = {1}; // initialized to {1,0,0,...}\n</code></pre>\n<p>Sample:</p>\n<pre><code>// a.c\nstruct T { int x, y };\nextern void f(void*);\nvoid partialInitialization() {\n  struct T t = {42};\n  f(&amp;t);\n}\nvoid noInitialization() {\n  struct T t;\n  f(&amp;t);\n}\n\n// Compile with: gcc -O2 -S a.c\n\n// a.s:\n\n; ...\npartialInitialzation:\n; ...\n; movl $0, -4(%ebp)     ;;;; initializes t.y to 0.\n; movl $42, -8(%ebp)\n; ...\nnoInitialization:\n; ... ; Nothing related to initialization. It just allocates memory on stack.\n</code></pre>\n", "OwnerUserId": "33708", "OwnerDisplayName": "Mehrdad"}, "706030": {"CommentCount": "0", "AcceptedAnswerId": "706082", "PostTypeId": "1", "LastEditorUserId": "8090", "LastEditorDisplayName": "bk1e", "CreationDate": "2009-04-01T15:22:36.823", "LastActivityDate": "2009-04-03T04:14:54.457", "AnswerCount": "3", "LastEditDate": "2009-04-03T04:14:54.473", "ViewCount": "7150", "FavoriteCount": "1", "Title": "Are uninitialized struct members always set to zero?", "Id": "706030", "Score": "16", "Body": "<p>Consider a C struct:</p>\n<pre><code>struct T {\n    int x;\n    int y;\n};\n</code></pre>\n<p>When this is partially initialized as in </p>\n<pre><code>struct T t = {42};\n</code></pre>\n<p>is <em>t.y</em> guaranteed to be 0 or is this an implementation decision of the compiler?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "23424", "OwnerDisplayName": "VoidPointer"}, "bq_ids": {"n4140": {"so_706030_706082_0": {"section_id": 3304, "quality": 0.75, "length": 12}, "so_706030_706082_1": {"section_id": 3304, "quality": 1.0, "length": 9}}, "n3337": {"so_706030_706082_0": {"section_id": 3174, "quality": 0.75, "length": 12}, "so_706030_706082_1": {"section_id": 3174, "quality": 1.0, "length": 9}}, "n4659": {"so_706030_706082_0": {"section_id": 4070, "quality": 0.625, "length": 10}, "so_706030_706082_1": {"section_id": 4070, "quality": 1.0, "length": 9}}}});