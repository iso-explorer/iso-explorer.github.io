post_cb({"bq_ids": {"n4140": {"so_26524250_26524503_0": {"length": 12, "quality": 1.0, "section_id": 639}}, "n3337": {"so_26524250_26524503_0": {"length": 12, "quality": 1.0, "section_id": 629}}, "n4659": {"so_26524250_26524503_0": {"length": 12, "quality": 1.0, "section_id": 667}}}, "26524503": {"Id": "26524503", "PostTypeId": "2", "Body": "<p>This is a bug in your compilers overload resolution mechanism - or its standard library implementation. \nOverload resolution clearly states in [over.ics.rank]/3 that</p>\n<blockquote>\n<p id=\"so_26524250_26524503_0\">\u2014 List-initialization sequence <code>L1</code> is a better conversion sequence than\n  list-initialization sequence <code>L2</code> if <code>L1</code> converts to\n  <code>std::initializer_list&lt;X&gt;</code> for some <code>X</code> and <code>L2</code> does not.</p>\n</blockquote>\n<p>Here, <code>X</code> is <code>std::pair&lt;std::string, std::string&gt;</code>. <code>L1</code> converts your list to the parameter of</p>\n<pre><code>map&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );\n</code></pre>\n<p>Whilst <code>L2</code> converts the list to one of the following functions' parameters:</p>\n<pre><code>map&amp; operator=( map&amp;&amp; other );\nmap&amp; operator=( const map&amp; other );\n</code></pre>\n<p>Which clearly aren't <code>initializer_list</code>s. \n<hr>\nYou could try to use</hr></p>\n<pre><code>barMap = decltype(barMap){\n    { \"First\", \"ABC\" },\n    { \"Second\", \"DEF\" }\n};\n</code></pre>\n<p>Which should select the move-assignment operator (<a href=\"http://rextester.com/GIG33127\" rel=\"noreferrer\">Demo with VC++</a>). The temporary should also be optimized away according to copy elision.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-10-23T09:07:02.230", "Score": "10", "CreationDate": "2014-10-23T08:53:40.950", "ParentId": "26524250", "CommentCount": "3", "OwnerUserId": "3647361", "LastEditDate": "2014-10-23T09:07:02.230"}, "26524250": {"ViewCount": "937", "Body": "<p>I have a <code>std::map</code> I'm trying to initialize with an initialization list. I do this in two places, in two different ways. The first one works, while the other one causes the error mentioned in the title.</p>\n<p>Here's the one that works:</p>\n<pre><code>void foo() {\n    static std::map&lt;std::string, std::string&gt; fooMap =\n    {\n        { \"First\", \"ABC\" },\n        { \"Second\", \"DEF\" }\n    };\n}\n</code></pre>\n<p>While this one does not:</p>\n<pre><code>class Bar {\n    public:\n        Bar();\n    private:\n        std::map&lt;std::string, std::string&gt; barMap;\n};\n\nBar::Bar() {\n    barMap = { // &lt;-- this is the error line\n        { \"First\", \"ABC\" },\n        { \"Second\", \"DEF\" }\n    };\n}\n</code></pre>\n<p>Why do I get the error when trying to initialize the class member, while the static map works? At the moment, I can populate the member by first creating a local variable and then swapping it with the member like this:</p>\n<pre><code>Bar::Bar() {\n    std::map&lt;std::string, std::string&gt; tmpMap = {\n        { \"First\", \"ABC\" },\n        { \"Second\", \"DEF\" }\n    };\n\n    barMap.swap(tmpMap);\n}\n</code></pre>\n<p>However, this feels rather counter-intuitive compared to just populating the member directly.</p>\n<hr>\n<p>EDIT: <a href=\"http://pastebin.com/wycmCJuG\">Here's the compiler output.</a></p>\n</hr>", "AcceptedAnswerId": "26524503", "Title": "\"C2593: operator = is ambiguous\" when populating std::map", "CreationDate": "2014-10-23T08:38:07.623", "Id": "26524250", "CommentCount": "11", "LastEditDate": "2014-10-23T08:49:52.023", "PostTypeId": "1", "LastEditorUserId": "1755847", "LastActivityDate": "2014-10-23T09:47:39.357", "Score": "7", "OwnerUserId": "1755847", "Tags": "<c++><c++11>", "AnswerCount": "1"}});