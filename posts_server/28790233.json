post_cb({"28790269": {"ParentId": "28790233", "CommentCount": "0", "Body": "<p>It is allowed to destroy an object that is referred to some reference, and to construct (e.g. by placement-new) another object in its storage location. The original reference becomes valid once again, as long as certain requirements are met.</p>\n<p>To quote <code>3.8[basic.life]/7</code></p>\n<blockquote>\n<p id=\"so_28790233_28790269_0\">7 If, after the lifetime of an object has ended and before the storage\n  which the object occupied is reused or released, a new object is\n  created at the storage location which the original object occupied, a\n  pointer that pointed to the original object, <strong>a reference that\n  referred to the original object</strong>, or the name of the original object\n  will automatically refer to the new object and, once the lifetime of\n  the new object has started, can be used to manipulate the new object,\n  if:</p>\n</blockquote>\n", "OwnerUserId": "273767", "PostTypeId": "2", "Id": "28790269", "Score": "3", "CreationDate": "2015-03-01T04:59:59.480", "LastActivityDate": "2015-03-01T04:59:59.480"}, "28790233": {"CommentCount": "2", "ViewCount": "64", "CreationDate": "2015-03-01T04:53:09.253", "LastActivityDate": "2015-03-01T04:59:59.480", "Title": "Why are dangling references allowed?", "PostTypeId": "1", "Id": "28790233", "Score": "0", "Body": "<p>The draft C++ standard states</p>\n<blockquote>\n<p id=\"so_28790233_28790233_0\">The storage duration categories apply to references as well. The\n  lifetime of a reference is its storage duration.</p>\n</blockquote>\n<p>And then</p>\n<blockquote>\n<p id=\"so_28790233_28790233_1\">A reference cannot be changed to refer to another object after\n  initialization. Note that initialization of a reference is treated\n  very differently from assignment to it. Argument passing (5.2.2) and\n  function value return (6.6.3) are initializations.</p>\n</blockquote>\n<p>So unlike pointers, which can be made to point to different memory, the same cannot be said for a reference. Why is it then that references have their own lifetime?</p>\n", "Tags": "<c++><reference>", "OwnerUserId": "4619419", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28790233_28790269_0": {"section_id": 7195, "quality": 1.0, "length": 43}, "so_28790233_28790233_0": {"section_id": 7163, "quality": 0.8461538461538461, "length": 11}, "so_28790233_28790233_1": {"section_id": 3318, "quality": 0.9130434782608695, "length": 21}}, "n3337": {"so_28790233_28790269_0": {"section_id": 6939, "quality": 1.0, "length": 43}, "so_28790233_28790233_0": {"section_id": 6907, "quality": 0.8461538461538461, "length": 11}, "so_28790233_28790233_1": {"section_id": 3188, "quality": 0.9130434782608695, "length": 21}}, "n4659": {"so_28790233_28790269_0": {"section_id": 8704, "quality": 1.0, "length": 43}, "so_28790233_28790233_1": {"section_id": 4084, "quality": 0.6521739130434783, "length": 15}}}});