post_cb({"23980018": {"ParentId": "23974070", "CommentCount": "1", "Body": "<p>3.5/10:</p>\n<blockquote>\n<p id=\"so_23974070_23980018_0\">After all adjustments of types (during which typedefs (7.1.3) are replaced by their definitions), the types specified by all declarations referring to a given variable or function shall be identical</p>\n</blockquote>\n<p>So you either have two declarations of the same variable (a variable is an entity) with non-identical types, or two different variables with the same name. Either way it's an error.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "23980018", "Score": "1", "CreationDate": "2014-06-01T12:45:57.537", "LastActivityDate": "2014-06-01T12:45:57.537"}, "23974070": {"CommentCount": "14", "ViewCount": "115", "PostTypeId": "1", "LastEditorUserId": "420683", "CreationDate": "2014-05-31T19:44:39.810", "LastActivityDate": "2014-06-01T12:45:57.537", "Title": "Why does declaration of the variable with different types denote the different entity", "OwnerDisplayName": "user2953119", "LastEditDate": "2014-06-01T12:15:44.920", "Id": "23974070", "Score": "0", "Body": "<p>The following code does not compile:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n\nextern int a;\nextern char a;\n\nint main(){ std::cout &lt;&lt; a;}\n</code></pre>\n<p>As I understand, it is because there are two declarations of <code>a</code> in the same declarative region denote the different entities. It seems obvious.</p>\n<p><strong>But where does the standard say that those two entities are different?</strong> I've read 3.1-3.4 sections but can't find anything.</p>\n<p>Can you find a quote which explicitly or implicitly disallows this? </p>\n", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "23979947": {"ParentId": "23974070", "CommentCount": "3", "Body": "<p>[basic]/3</p>\n<blockquote>\n<p id=\"so_23974070_23979947_0\">An <em>entity</em> is a value, object, reference, function, enumerator, type,\n  class member, template, template specialization, namespace, parameter\n  pack, or <code>this</code>.</p>\n</blockquote>\n<p>/6</p>\n<blockquote>\n<p id=\"so_23974070_23979947_1\">A variable is introduced by the declaration of a reference other than a non-static data member or of an object. The variable\u2019s name denotes the reference or object.</p>\n</blockquote>\n<p>The two declarations <code>extern int a;</code> and <code>extern char a;</code> each declare a variable. The name <code>a</code> in the first case refers to an entity which is an object of type <code>int</code>, and in the second case it refers to an entity which is an object of type <code>char</code>.</p>\n<p>An object has a type [intro.object]/1. The objects denoted by the two <code>a</code> have different types, hence they're not the same objects (literally).</p>\n<p>There's still the question of type-punning, but I think that produces only an expression with a type different from the object it refers to. I don't think it's possible (= allowed) to produce an object which has two types, I interpret that \"An object has a type\" in [intro.object]/1 as \"an object has exactly one type\".</p>\n<p>I think it's safe to conclude from here that two objects with different types are different objects and hence different <em>entities</em>.</p>\n", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "23979947", "Score": "0", "CreationDate": "2014-06-01T12:37:30.763", "LastActivityDate": "2014-06-01T12:37:30.763"}, "bq_ids": {"n4140": {"so_23974070_23980018_0": {"section_id": 7143, "quality": 0.9473684210526315, "length": 18}, "so_23974070_23979947_1": {"section_id": 7029, "quality": 0.875, "length": 14}, "so_23974070_23979947_0": {"section_id": 7026, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_23974070_23980018_0": {"section_id": 6887, "quality": 0.9473684210526315, "length": 18}, "so_23974070_23979947_1": {"section_id": 6775, "quality": 0.875, "length": 14}, "so_23974070_23979947_0": {"section_id": 6772, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_23974070_23980018_0": {"section_id": 8644, "quality": 0.9473684210526315, "length": 18}, "so_23974070_23979947_1": {"section_id": 8526, "quality": 0.875, "length": 14}, "so_23974070_23979947_0": {"section_id": 8523, "quality": 0.9333333333333333, "length": 14}}}});