post_cb({"bq_ids": {"n4140": {"so_31910794_31910836_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 1617}, "so_31910794_31910836_7": {"length": 7, "quality": 1.0, "section_id": 1619}, "so_31910794_31910836_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1619}, "so_31910794_31910836_6": {"length": 16, "quality": 0.8888888888888888, "section_id": 6328}}, "n3337": {"so_31910794_31910836_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 1613}, "so_31910794_31910836_7": {"length": 7, "quality": 1.0, "section_id": 1615}, "so_31910794_31910836_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1615}, "so_31910794_31910836_6": {"length": 16, "quality": 0.8888888888888888, "section_id": 6085}}, "n4659": {"so_31910794_31910836_2": {"length": 17, "quality": 0.8947368421052632, "section_id": 1770}, "so_31910794_31910836_7": {"length": 7, "quality": 1.0, "section_id": 1772}, "so_31910794_31910836_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1772}, "so_31910794_31910836_6": {"length": 16, "quality": 0.8888888888888888, "section_id": 7838}}}, "31910836": {"Id": "31910836", "PostTypeId": "2", "Body": "<p>The standard specifies that what you are doing is undefined behaviour. As per <code>C++11 21.4.5 basic_string element access</code>:</p>\n<blockquote>\n<p id=\"so_31910794_31910836_0\"><strong><code>const_reference operator[](size_type pos) const;</code></strong><br>\n<strong><code>reference operator[](size_type pos);</code></strong></br></p>\n<p id=\"so_31910794_31910836_1\">Requires: <code>pos &lt;= size()</code></p>\n<p id=\"so_31910794_31910836_2\">Returns: <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>, otherwise, returns a reference to an object of type <code>charT</code> with value <code>charT()</code>, where modifying the object leads to undefined behavior.</p>\n<p id=\"so_31910794_31910836_3\">Throws: Nothing.</p>\n<p id=\"so_31910794_31910836_4\">Complexity: constant time.</p>\n</blockquote>\n<p>In your case, <code>pos</code> is <em>not</em> less than <code>size()</code> so you may think the \"otherwise\" clause of the \"returns\" section would normally be applicable, and you'd therefore just get an instance of <code>charT</code> which you're not allowed to modify.</p>\n<p><strong>However,</strong> since you're actually violating the \"requires\" clause, with your <code>pos</code> being <em>greater</em> than <code>size()</code>, all bets are off. The controlling part of the standard is the library-wide:</p>\n<blockquote>\n<p id=\"so_31910794_31910836_5\"><code>17.6.4.11 Requires paragraph [res.on.required]</code></p>\n<p id=\"so_31910794_31910836_6\">Violation of the preconditions specified in a function\u2019s 'Requires:' paragraph results in undefined behavior unless the function\u2019s 'Throws:' paragraph specifies throwing an exception when the precondition is violated.</p>\n</blockquote>\n<hr>\n<p>If you <em>need</em> bounds checking, use <code>at()</code> instead of <code>operator[]</code>:</p>\n<blockquote>\n<p id=\"so_31910794_31910836_7\"><strong><code>const_reference at(size_type pos) const;</code></strong><br>\n<strong><code>reference at(size_type pos);</code></strong></br></p>\n<p id=\"so_31910794_31910836_8\">Requires: <code>pos &lt; size()</code></p>\n<p id=\"so_31910794_31910836_9\">Throws: <code>out_of_range</code> if <code>pos &gt;= size()</code></p>\n<p id=\"so_31910794_31910836_10\">Returns: <code>operator[](pos)</code></p>\n</blockquote>\n</hr>", "LastEditorUserId": "14860", "LastActivityDate": "2015-08-10T02:51:34.547", "Score": "1", "CreationDate": "2015-08-10T02:25:07.493", "ParentId": "31910794", "CommentCount": "0", "OwnerUserId": "14860", "LastEditDate": "2015-08-10T02:51:34.547"}, "31910826": {"Id": "31910826", "PostTypeId": "2", "Body": "<p>The <code>operator[]</code> for <code>std::string</code> is <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/operator_at\" rel=\"nofollow\">documented to not do any bounds checking</a>:</p>\n<blockquote>\n<p id=\"so_31910794_31910826_0\">Returns a reference to the character at specified location pos. No bounds checking is performed.</p>\n</blockquote>\n<p>To read from the string with bounds checking, use <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/at\" rel=\"nofollow\">at()</a>:</p>\n<blockquote>\n<p id=\"so_31910794_31910826_1\">Returns a reference to the character at specified location pos. Bounds checking is performed, exception of type std::out_of_range will be thrown on invalid access.</p>\n</blockquote>\n", "LastActivityDate": "2015-08-10T02:24:02.423", "CommentCount": "4", "CreationDate": "2015-08-10T02:24:02.423", "ParentId": "31910794", "Score": "4", "OwnerUserId": "893"}, "31910794": {"ViewCount": "215", "Body": "<p>This code doesn't print anything but doesn't produce an error either. Why?</p>\n<pre><code>string s = \"test\";\ncout &lt;&lt; s[5];\n</code></pre>\n", "AcceptedAnswerId": "31910826", "Title": "When string subscript is out of range, no exception is thrown", "CreationDate": "2015-08-10T02:18:51.903", "Id": "31910794", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-08-10T02:51:34.547", "Score": "0", "OwnerUserId": "5127166", "Tags": "<c++><string>", "AnswerCount": "2"}});