post_cb({"1259842": {"Id": "1259842", "PostTypeId": "2", "Body": "<p>A related question is: <a href=\"http://bytes.com/topic/c/answers/578467-what-malloc-0-should-returns\" rel=\"nofollow noreferrer\">What should malloc(0) return?</a></p>\n<p><a href=\"http://docs.sun.com/source/819-3688/c99Implementation.app.html\" rel=\"nofollow noreferrer\">And from some C99 docs</a>, the malloc(0) behavior is implementation-defined:</p>\n<blockquote>\n<p id=\"so_1259803_1259842_0\">Whether the calloc, malloc, and\n  realloc functions return a null\n  pointer or a pointer to an allocated\n  object when the size requested is zero\n  (7.20.3).</p>\n<p id=\"so_1259803_1259842_1\">Either a null pointer or a unique\n  pointer that can be passed to free()\n  is returned.</p>\n<p id=\"so_1259803_1259842_2\">See the malloc(3C) man page.</p>\n</blockquote>\n<p>Granted you're asking about C++, but the malloc info is probably useful anyway.</p>\n", "LastActivityDate": "2009-08-11T11:39:01.407", "CommentCount": "1", "CreationDate": "2009-08-11T11:39:01.407", "ParentId": "1259803", "Score": "0", "OwnerUserId": "126042"}, "1259803": {"ViewCount": "1352", "Body": "<p>Looking at some example code and come across some zero-size array allocation. I created the following code snippet to clarify my question</p>\n<p>This is valid code:</p>\n<pre><code>class T\n{\n};\n\nint main(void)\n{\n  T * ptr = new T[0];\n\n  return 0;\n}\n</code></pre>\n<p>What is its use? Is ptr valid? Is this construct portable?</p>\n", "AcceptedAnswerId": "1259845", "Title": "What does zero-sized array allocation do/mean?", "CreationDate": "2009-08-11T11:32:07.130", "Id": "1259803", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-11-23T15:01:19.303", "Score": "5", "OwnerUserId": "77673", "Tags": "<c++><memory-management>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_1259803_1259842_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 7177}}, "n3337": {"so_1259803_1259842_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 6921}}, "n4659": {"so_1259803_1259842_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 8685}}}, "1259826": {"Id": "1259826", "PostTypeId": "2", "Body": "<p>Yes it is valid behaviour, and ptr will be valid. The construct is portable to all C++ compilers that adhere to the C++ Standard. It is useful in that it allows you to write code which doesn't require special-case stuiff to handle the case where the number of elements is zero.</p>\n<p>However, as always, you will be better served by using a std::vector (which can also be zero-sized) instead of an array.</p>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2009-08-11T11:36:41.393", "Score": "0", "CreationDate": "2009-08-11T11:36:41.393", "ParentId": "1259803", "CommentCount": "0"}, "1259845": {"Id": "1259845", "PostTypeId": "2", "Body": "<p>5.3.4 in the C++ Standard:</p>\n<p>6 Every <em>constant-expression</em> in a <em>direct-new-declarator</em> shall be an integral constant expression (5.19) and evaluate to a strictly positive value. The <em>expression</em> in a <em>direct-new-declarator</em> shall have integral or enumeration type (3.9.1) with a non-negative value...</p>\n<p>7 When the value of the <em>expression</em> in a <em>direct-new-declarator</em> is zero, the allocation function is called to allocate an array with no elements.</p>\n<p>So, your code allocates an array which behaves in every respect like any other array of T (can be deleted with delete[], passed as a parameter, probably other things). However, it has no accessible indexes (that is, reading or writing ptr[0] results in undefined behaviour).</p>\n<p>In this context the different between the constant-expression and the expression is not whether the actual expression is compile time constant (which obviously 0 is), but whether it specifies the \"last\" dimension of a multi-dimensional array. The syntax is defined in 5.3.4:1.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2009-08-11T11:44:30.863", "Score": "8", "CreationDate": "2009-08-11T11:39:21.343", "ParentId": "1259803", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2009-08-11T11:44:30.863"}, "1259830": {"Id": "1259830", "PostTypeId": "2", "Body": "<p>It is authorized (5.3.4/6). Its result is an empty array, so the value returned is the pointer past the array.</p>\n", "LastActivityDate": "2009-08-11T11:37:35.200", "CommentCount": "0", "CreationDate": "2009-08-11T11:37:35.200", "ParentId": "1259803", "Score": "2", "OwnerUserId": "136208"}});