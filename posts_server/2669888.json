post_cb({"2669911": {"Id": "2669911", "PostTypeId": "2", "Body": "<p>The order is the order they appear in the class definition - this is from section 12.6.2 of the C++ Standard:</p>\n<blockquote>\n<p id=\"so_2669888_2669911_0\">5 Initialization shall proceed in the\n  following order:</p>\n<p id=\"so_2669888_2669911_1\">\u2014 First, and only for\n  the constructor of the most derived\n  class as described below, virtual base\n  classes shall be initialized in the\n  order they appear on a depth-first\n  left-to-right traversal of the\n  directed acyclic graph of base\n  classes, where \u201cleft-to-right\u201d is the\n  order of appearance of the base class\n  names in the derived class\n  base-specifier-list. </p>\n<p id=\"so_2669888_2669911_2\">\u2014 Then, direct\n  base classes shall be initialized in\n  declaration order as they appear in\n  the base-specifier-list (regardless of\n  the order of the mem-initializers).</p>\n<p id=\"so_2669888_2669911_3\">\u2014 Then, nonstatic data members shall be\n  initialized in the order they were\n  declared in the class definition\n  (again regardless of the order of the\n  mem-initializers). </p>\n<p id=\"so_2669888_2669911_4\">\u2014 Finally, the body\n  of the constructor is executed. [Note:\n  the declaration order is mandated to\n  ensure that base and member subobjects\n  are destroyed in the reverse order of\n  initialization. ]</p>\n</blockquote>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2010-04-19T18:41:12.080", "Score": "44", "CreationDate": "2010-04-19T18:41:12.080", "ParentId": "2669888", "CommentCount": "3"}, "bq_ids": {"n4140": {"so_2669888_2669911_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_2669888_2669911_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_2669888_2669911_1": {"length": 28, "quality": 0.875, "section_id": 438}, "so_2669888_2669911_4": {"length": 14, "quality": 0.875, "section_id": 438}}, "n3337": {"so_2669888_2669911_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_2669888_2669911_4": {"length": 14, "quality": 0.875, "section_id": 429}, "so_2669888_2669911_1": {"length": 28, "quality": 0.875, "section_id": 429}, "so_2669888_2669911_2": {"length": 13, "quality": 1.0, "section_id": 429}}, "n4659": {"so_2669888_2669911_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_2669888_2669911_4": {"length": 14, "quality": 0.875, "section_id": 458}, "so_2669888_2669911_1": {"length": 28, "quality": 0.875, "section_id": 458}, "so_2669888_2669911_2": {"length": 13, "quality": 1.0, "section_id": 458}}}, "2669894": {"Id": "2669894", "PostTypeId": "2", "Body": "<p>Initialization is always in the order that the class members appear in your class definition, so in your example <code>a</code>, then <code>b</code>.</p>\n<p>There is a sequence point between the initialization of each member and you <em>can</em> pass a reference to a yet-to-be initialized member into the constructor of a class member but you would only be able to use it in limited ways (such as taking its address to form a pointer), other uses may well cause undefined behaviour.</p>\n<p>Destruction of class members always happens in the reverse order of construction.</p>\n<p>Order of initialization of bases and members is defined in 12.6.2 [class.base.init]/5.</p>\n", "LastActivityDate": "2010-04-19T18:37:19.433", "CommentCount": "7", "CreationDate": "2010-04-19T18:37:19.433", "ParentId": "2669888", "Score": "7", "OwnerUserId": "19563"}, "2669888": {"ViewCount": "12636", "Body": "<p>In the following code, when the ctor of X is called will the ctor of A or B be called first? Does the order in which they are placed in the body of the class control this? If somebody can provide a snippet of text from the C++ standard that talks about this issue, that would be perfect.</p>\n<pre><code>class A {};\nclass B {};\nclass X\n{\n A a;\n B b;\n};\n</code></pre>\n", "AcceptedAnswerId": "2669911", "Title": "C++: Initialization Order of Class Data Members", "CreationDate": "2010-04-19T18:35:33.173", "Id": "2669888", "CommentCount": "0", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2017-03-05T07:26:28.987", "LastEditorUserId": "661519", "LastActivityDate": "2017-03-05T07:26:28.987", "Score": "29", "OwnerUserId": "66455", "Tags": "<c++>", "AnswerCount": "2"}});