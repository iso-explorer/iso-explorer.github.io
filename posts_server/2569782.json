post_cb({"2569814": {"ParentId": "2569782", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2010-04-03T00:13:07.697", "Score": "9", "LastEditorUserId": "3153", "LastEditDate": "2010-04-03T00:26:10.943", "Id": "2569814", "OwnerUserId": "3153", "Body": "<blockquote>\n<p id=\"so_2569782_2569814_0\">Could someone please explain to me why\n  the type of inheritance matters in\n  this case? Bonus points for a\n  reference in the standard.</p>\n</blockquote>\n<p>The type of inheritance doesn't matter. It only matters that you have an accessible conversion available to one of the catch types.  It just so happens that since it is not public inheritance there is no public accessible conversion.</p>\n<hr>\n<p><strong>Explanation:</strong></p>\n<p>You can see the same behavior here:</p>\n<pre><code>class B\n{\n};\n\nclass C1 : B\n{\n};\n\nclass C2 : public B\n{\n};\n\nint main(int argc, char** argv)\n{\n    B&amp; b1 = C1();//Compiling error due to conversion exists but is inaccessible\n    B&amp; b2 = C2();//OK\n    return 0;\n}\n</code></pre>\n<p>A thrown exception is only caught by a catch block if:</p>\n<ol>\n<li>The catch block has a matching type, or </li>\n<li>The catch block is for a type that has an <strong>accessible conversion</strong></li>\n<li>The catch block is a catch(...) </li>\n</ol>\n</hr>", "LastActivityDate": "2010-04-03T00:26:10.943"}, "2569819": {"ParentId": "2569782", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2010-04-03T00:15:30.950", "Score": "19", "LastEditorUserId": "87234", "LastEditDate": "2010-04-03T00:23:55.813", "Id": "2569819", "OwnerUserId": "87234", "Body": "<p>When you inherit privately, you cannot convert to or otherwise access that base class outside of the class. Since you asked for something from the standard:</p>\n<blockquote>\n<p id=\"so_2569782_2569819_0\">\u00a711.2/4:<br>\n  A base class is said to be accessible if an invented public member of the base class is accessible. If a base class is accessible, one can implicitly convert a pointer to a derived class to a pointer to that base class (4.10, 4.11).</br></p>\n</blockquote>\n<p>Simply put, to anything outside the class it's like you never inherited from <code>std::exception</code>, because it's private. Ergo, it will not be able to be caught in the <code>std::exception&amp;</code> clause, since no conversion exists.</p>\n", "LastActivityDate": "2010-04-03T00:23:55.813"}, "2569782": {"CommentCount": "0", "AcceptedAnswerId": "2569819", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2010-04-03T00:02:57.027", "LastActivityDate": "2015-07-03T16:56:46.797", "LastEditDate": "2015-07-03T16:56:46.797", "ViewCount": "7762", "FavoriteCount": "1", "Title": "C++ Exceptions and Inheritance from std::exception", "Id": "2569782", "Score": "9", "Body": "<p>Given this sample code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n\nclass my_exception_t : std::exception\n{\npublic:\n    explicit my_exception_t()\n    { }\n\n    virtual const char* what() const throw()\n    { return \"Hello, world!\"; }\n};\n\nint main()\n{\n    try\n        { throw my_exception_t(); }\n    catch (const std::exception&amp; error)\n        { std::cerr &lt;&lt; \"Exception: \" &lt;&lt; error.what() &lt;&lt; std::endl; }\n    catch (...)\n        { std::cerr &lt;&lt; \"Exception: unknown\" &lt;&lt; std::endl; }\n\n    return 0;\n}\n</code></pre>\n<p>I get the following output:</p>\n<pre><code>Exception: unknown\n</code></pre>\n<p>Yet simply making the inheritance of <code>my_exception_t</code> from <code>std::exception</code> <code>public</code>, I get the following output:</p>\n<pre><code>Exception: Hello, world!\n</code></pre>\n<p>Could someone please explain to me why the type of inheritance matters in this case? Bonus points for a reference in the standard.</p>\n", "Tags": "<c++><exception><inheritance><private><private-inheritance>", "OwnerUserId": "153535", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_2569782_2569819_0": {"section_id": 6975, "quality": 0.5769230769230769, "length": 15}}, "n3337": {"so_2569782_2569819_0": {"section_id": 6721, "quality": 0.5769230769230769, "length": 15}}, "n4659": {"so_2569782_2569819_0": {"section_id": 8474, "quality": 0.5769230769230769, "length": 15}}}});