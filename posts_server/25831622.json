post_cb({"25831677": {"Id": "25831677", "PostTypeId": "2", "Body": "<p>In fact it's </p>\n<pre><code>Types ty = Double\n</code></pre>\n<p>If you want to scope your values use a enum class (C++11)</p>\n<pre><code>enum class Types {Int,Double,String};\n</code></pre>\n<p>And so you can do</p>\n<pre><code>Types ty = Types::Double\n</code></pre>\n", "LastActivityDate": "2014-09-14T08:58:54.783", "Score": "3", "CreationDate": "2014-09-14T08:58:54.783", "ParentId": "25831622", "CommentCount": "0", "OwnerUserId": "4037461"}, "25831636": {"Id": "25831636", "PostTypeId": "2", "Body": "<p>The compiler is complaining about the attempt at qualifying the value <code>Double</code> which is Java's way to do this.</p>\n<p>Just do</p>\n<pre><code>Types ty = Double;\n</code></pre>\n", "LastActivityDate": "2014-09-14T08:53:54.633", "Score": "2", "CreationDate": "2014-09-14T08:53:54.633", "ParentId": "25831622", "CommentCount": "3", "OwnerUserId": "1440565"}, "25831692": {"Id": "25831692", "PostTypeId": "2", "Body": "<p>In C++, there are two different types of enumerations - scoped and unscoped ones (the former was introduced with C++11). For unscoped ones the names of the enumerators are directly introduced into the enclosing scope.</p>\n<blockquote>\n<p id=\"so_25831622_25831692_0\"><strong>N3337 \u00a77.2/10</strong></p>\n<p id=\"so_25831622_25831692_1\">Each <em>enum-name</em> and each unscoped <em>enumerator</em> is declared in the\n  scope that immediately contains the <em>enum-specifier</em>. Each scoped\n  <em>enumerator</em> is declared in the scope of the enumeration. These names obey the scope rules defined for all names in (3.3) and (3.4).</p>\n</blockquote>\n<p>Your enumeration is unscoped, therefore it suffices to write </p>\n<pre><code>Types ty = Double;\n</code></pre>\n<p>For scoped enumerations, as the name suggests, the enumerators are declared in the enumeration scope and have to be qualified with the enumeration-name:</p>\n<pre><code>enum class ScopedTypes {Int,Double,String}; \nenum UnscopedTypes     {Int,Double,String}; \n\nScopedTypes a = ScopedTypes::Double;\n//ScopedTypes b = Double; // error\n\nUnscopedTypes c = UnscopedTypes::Double;\nUnscopedTypes d = Double;\n</code></pre>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-09-14T11:39:52.563", "Score": "7", "CreationDate": "2014-09-14T09:00:50.877", "ParentId": "25831622", "CommentCount": "7", "LastEditDate": "2014-09-14T11:39:52.563", "OwnerUserId": "3647361"}, "bq_ids": {"n4140": {"so_25831622_25831692_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5470}}, "n3337": {"so_25831622_25831692_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5256}}, "n4659": {"so_25831622_25831692_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 6904}}}, "25831622": {"ViewCount": "10407", "Body": "<p>I create an enum called <code>Types</code>:  </p>\n<pre><code>enum  Types {Int,Double,String};  \n</code></pre>\n<p>When I create an object and initialize it with one of the enum allowed values I get the following error: \"Error: type name is not allowed\". </p>\n<pre><code>Types ty = Types.Double;  \n</code></pre>\n<p>Any ideas?</p>\n", "AcceptedAnswerId": "25831692", "Title": "Initialize enum c++", "CreationDate": "2014-09-14T08:51:34.283", "Id": "25831622", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-09-14T11:39:52.563", "Score": "2", "OwnerUserId": "3165438", "Tags": "<c++><enums>", "AnswerCount": "4"}, "25831647": {"Id": "25831647", "PostTypeId": "2", "Body": "<p>Either use</p>\n<pre><code>Types ty = Double;  \n</code></pre>\n<p>or</p>\n<pre><code>enum  class Types {Int,Double,String};  \nTypes ty = Types::Double;  \n</code></pre>\n", "LastActivityDate": "2014-09-14T08:54:37.940", "Score": "5", "CreationDate": "2014-09-14T08:54:37.940", "ParentId": "25831622", "CommentCount": "2", "OwnerUserId": "2877241"}});