post_cb({"33848588": {"ParentId": "33834573", "CommentCount": "0", "CreationDate": "2015-11-21T21:08:13.523", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "33848588", "Score": "1", "Body": "<p>Re: why the ampersand is required. Because the standard says so.</p>\n<blockquote>\n<p id=\"so_33834573_33848588_0\"><strong>[expr.prim.general]/13</strong> An <em>id-expression</em> that denotes a non-static data member or non-static member function of a class can only be used:</p>\n<p id=\"so_33834573_33848588_1\">(13.1) \u2014 as part of a class member access (5.2.5) in which the object expression refers to the member's class or a class derived from that class, or</p>\n<p id=\"so_33834573_33848588_2\">(13.2) \u2014 to form a pointer to member (5.3.1), or</p>\n<p id=\"so_33834573_33848588_3\">(13.3) \u2014 if that <em>id-expression</em> denotes a non-static data member and it appears in an unevaluated operand.</p>\n</blockquote>\n<p>And further:</p>\n<blockquote>\n<p id=\"so_33834573_33848588_4\"><strong>[expr.ref]/4</strong> ...one of the following rules applies.</p>\n<p id=\"so_33834573_33848588_5\">(4.3.2) \u2014 Otherwise, if <code>E1.E2</code> refers to a non-static member\n  function... [t]he expression can be used only as the left-hand operand\n  of a member function call (9.3)...</p>\n</blockquote>\n<p>So basically, <code>A::foo</code> can legally appear only with the ampersand in front (\"to form a pointer to member\") or with the opening paren following (\"left-hand operand of a function call\").</p>\n", "LastActivityDate": "2015-11-21T21:08:13.523"}, "bq_ids": {"n4140": {"so_33834573_33848588_1": {"section_id": 5959, "quality": 0.8571428571428571, "length": 12}, "so_33834573_33848588_0": {"section_id": 5959, "quality": 0.9090909090909091, "length": 10}, "so_33834573_33848588_4": {"section_id": 639, "quality": 0.8, "length": 4}, "so_33834573_33848588_3": {"section_id": 5959, "quality": 0.8888888888888888, "length": 8}, "so_33834573_33848588_5": {"section_id": 6007, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_33834573_33848588_1": {"section_id": 5728, "quality": 0.8571428571428571, "length": 12}, "so_33834573_33848588_0": {"section_id": 5728, "quality": 0.9090909090909091, "length": 10}, "so_33834573_33848588_4": {"section_id": 629, "quality": 0.8, "length": 4}, "so_33834573_33848588_3": {"section_id": 5728, "quality": 0.8888888888888888, "length": 8}, "so_33834573_33848588_5": {"section_id": 5775, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_33834573_33848588_3": {"section_id": 7440, "quality": 0.8888888888888888, "length": 8}, "so_33834573_33848588_0": {"section_id": 7440, "quality": 0.9090909090909091, "length": 10}, "so_33834573_33848588_4": {"section_id": 667, "quality": 0.8, "length": 4}, "so_33834573_33848588_1": {"section_id": 7440, "quality": 0.8571428571428571, "length": 12}, "so_33834573_33848588_5": {"section_id": 7506, "quality": 0.9285714285714286, "length": 13}}}, "33834573": {"CommentCount": "4", "ViewCount": "4076", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-11-20T19:26:51.793", "LastActivityDate": "2015-11-21T21:08:13.523", "Title": "Invalid use of non-static member function In instantiation of member function of a class template?", "LastEditDate": "2015-11-21T17:45:09.270", "Id": "33834573", "Score": "2", "Body": "<p>I want a class template to start some number of threads to test some functions, which access some shared states.</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;thread&gt;\nusing namespace std;\n\ntemplate&lt;std::size_t M, std::size_t N&gt;\nclass A {\npublic:\n    void test(std::size_t n) {\n        std::vector&lt;std::thread&gt; ts;\n        for(int i = 0; i &lt; N; ++i){\n            ts.push_back(\n                    std::thread( A::foo, this, i, n )\n            );\n        }\n        for(auto&amp; thread : ts){\n            thread.join();\n        }\n    }\n\nprivate:\n    void foo( std::size_t tid, std::size_t n ) {\n    }\n};\n\nint main() {\n    A&lt;10, 2&gt; tester;\n    tester.test(1000);\n}\n</code></pre>\n<p>This gives following error. Why and how to fix?</p>\n<pre><code>prog.cpp: In instantiation of 'void A&lt;M, N&gt;::test(std::size_t) [with unsigned int M = 10u; unsigned int N = 2u; std::size_t = unsigned int]':\nprog.cpp:27:18:   required from here\nprog.cpp:11:27: error: invalid use of non-static member function\n          threads.push_back(\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p>It compiles after changing to <code>std::thread( &amp;A::foo, this, i, n )</code> as @Igor suggested. As far as I understand, function name decay to a pointer when passing into a function. Why do we still need the ampersand '&amp;'?</p>\n", "Tags": "<c++><c++11><generic-programming>", "OwnerUserId": "4284481", "AnswerCount": "1"}});