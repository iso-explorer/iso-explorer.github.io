post_cb({"16842660": {"CommentCount": "3", "AcceptedAnswerId": "16842753", "PostTypeId": "1", "LastEditorUserId": "87234", "CreationDate": "2013-05-30T17:42:21.313", "LastActivityDate": "2013-05-30T22:32:47.093", "LastEditDate": "2013-05-30T22:32:47.093", "ViewCount": "323", "FavoriteCount": "0", "Title": "What is the return value of shared_ptr<T>::get() after it is released?", "Id": "16842660", "Score": "3", "Body": "<p>After releasing a <code>std::shared_ptr&lt;T&gt;</code>, when I do <code>ptr.get()</code> is the return value <code>NULL</code> or <code>nullptr</code>? In order to compare, I used this:</p>\n<pre><code>std::shared_ptr&lt;int&gt; ptr(new int(44));\n\nptr.reset();\nint *p = ptr.get();\n\nif (p == nullptr)\n{\n    cout &lt;&lt; \"nullptr\";\n}\n\nif (p == NULL)\n{\n    cout &lt;&lt; \"NULL\";\n}\n</code></pre>\n<p>Both seem to be the result.</p>\n", "Tags": "<c++><c++11><shared-ptr>", "OwnerUserId": "2248845", "AnswerCount": "2"}, "16842786": {"ParentId": "16842660", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_16842660_16842786_0\"><em><strong>2.14.7 Pointer literals [lex.nullptr]</strong></em></p></blockquote>\n<p>The pointer literal is the keyword nullptr. It is a prvalue of type\n  std::nullptr_t. [ Note: std::nullptr_t is a distinct type that is\n  neither a pointer type nor a pointer to member type; rather, a prvalue\n  of this type is a null pointer constant and can be converted to a null\n  pointer value or null member pointer value.</p>\n<p>Both are equivalent, but you should prefer to use nullptr.</p>\n", "OwnerUserId": "2406758", "PostTypeId": "2", "Id": "16842786", "Score": "2", "CreationDate": "2013-05-30T17:49:13.867", "LastActivityDate": "2013-05-30T17:49:13.867"}, "16842753": {"ParentId": "16842660", "CommentCount": "0", "Body": "<p>In C++11, use <code>nullptr</code>. </p>\n<p>It is true that they are both correct and equivalent in this case, since both are <em>null pointer constants</em> as specified by paragraph 4.10/1 (<code>NULL</code> is usually <code>#define</code>d to be <code>0</code>):</p>\n<blockquote>\n<p id=\"so_16842660_16842753_0\">A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to\n  zero or a prvalue of type <code>std::nullptr_t</code>. A null pointer constant can be converted to a pointer type; the\n  result is the <em>null pointer value</em> of that type and is distinguishable from every other value of object pointer or\n  function pointer type.</p>\n</blockquote>\n<p>However, <code>nullptr</code> is recognized by the type system as <strong>the</strong> pointer literal of type <code>nullptr_t</code> and as a special null pointer constant, so its semantics are clear both to you and to the compiler. <code>NULL</code>, on the other hand, is just a macro that is known to expand to zero.</p>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16842753", "Score": "12", "CreationDate": "2013-05-30T17:46:56.177", "LastActivityDate": "2013-05-30T17:46:56.177"}, "bq_ids": {"n4140": {"so_16842660_16842753_0": {"section_id": 39, "quality": 0.75, "length": 27}}, "n3337": {"so_16842660_16842753_0": {"section_id": 36, "quality": 0.9166666666666666, "length": 33}}, "n4659": {"so_16842660_16842753_0": {"section_id": 39, "quality": 0.75, "length": 27}}}});