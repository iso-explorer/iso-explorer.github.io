post_cb({"31406495": {"CommentCount": "3", "ViewCount": "77", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-07-14T12:24:13.390", "LastActivityDate": "2015-07-14T12:39:48.690", "Title": "Passing constant reference... does it work like most important const?", "AcceptedAnswerId": "31406581", "LastEditDate": "2015-07-14T12:39:48.690", "Id": "31406495", "Score": "1", "Body": "<p>It's a known special case that constant references are not lost in return values if they're assigned as constant references:</p>\n<pre><code>int MyFunction()\n{\n    int x = 5;\n    return x;\n}\n\nint main()\n{\n    const int&amp; y = MyFunction();\n    std::cout &lt;&lt; \"This is valid: \" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Now if I have two functions like the following:</p>\n<pre><code>int MyFunction()\n{\n    int x = 5;\n    return x;\n}\nvoid MyOtherFunction(const int&amp; val)\n{\n    std::cout &lt;&lt; val &lt;&lt; std::endl;\n}\n\nint main()\n{\n     MyOtherFunction(MyFunction());   \n}\n</code></pre>\n<p>Does this work <strong>according to the standard</strong>? What are the limitations of  passing const references?</p>\n", "Tags": "<c++><function><reference><const>", "OwnerUserId": "1317944", "AnswerCount": "3"}, "31406624": {"ParentId": "31406495", "CommentCount": "3", "CreationDate": "2015-07-14T12:30:26.940", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "31406624", "Score": "3", "Body": "<p><strong>Yes.</strong></p>\n<blockquote>\n<p id=\"so_31406495_31406624_0\"><code>[C++14: 12.2/5]:</code> <em>[..]</em> A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the <em>full-expression</em> containing the call. <em>[..]</em></p>\n</blockquote>\n", "LastActivityDate": "2015-07-14T12:30:26.940"}, "31406630": {"ParentId": "31406495", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-07-14T12:30:42.447", "Score": "-1", "LastEditorUserId": "5048064", "LastEditDate": "2015-07-14T12:32:49.990", "Id": "31406630", "OwnerUserId": "5048064", "Body": "<p>it is valid. . \nReference is just an alias to your variable and it represents the address location where the variable stored.</p>\n<p>const reference means you cannot modify your const arguement inside your function.</p>\n<p>In ur case,\nMyOtherFunction(MyFunction());</p>\n<p>here MyFunctions returns an int which stores as anonymous variable whose life time is upto that expression.</p>\n", "LastActivityDate": "2015-07-14T12:32:49.990"}, "bq_ids": {"n4140": {"so_31406495_31406624_0": {"section_id": 382, "quality": 0.8, "length": 12}}, "n3337": {"so_31406495_31406624_0": {"section_id": 373, "quality": 0.8, "length": 12}}, "n4659": {"so_31406495_31406624_0": {"section_id": 397, "quality": 0.8, "length": 12}}}, "31406581": {"ParentId": "31406495", "CommentCount": "11", "CreationDate": "2015-07-14T12:28:09.890", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "31406581", "Score": "1", "Body": "<p>That's fine too: the standard mandates that an anonymous temporary (<code>MyFunction()</code>)can bind to a const reference. </p>\n<p>(It can't bind to a non-const reference; some compilers are lapse on that).</p>\n", "LastActivityDate": "2015-07-14T12:28:09.890"}});