post_cb({"20874041": {"ParentId": "20873984", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_20873984_20874041_0\">in practice it just sets a ptr to some value</p>\n</blockquote>\n<p>In theory, just having a pointer that points somewhere invalid is not allowed.</p>\n<p><strong>Pointers are <em>not</em> integers: they are things that point to other things, or to nullity.</strong></p>\n<p>You can't just set them to whatever number you like.</p>\n<blockquote>\n<p id=\"so_20873984_20874041_1\">in this example, there is nothing but assignment and then qualified dereferrencing - the value is only used if validated, the question is why is the setting of the value an issue?</p>\n</blockquote>\n<p>Yeah, you'd have to be pretty unlucky to run into practical consequences of doing that. <strong>\"Undefined behaviour\" does <em>not</em> mean \"always crash\".</strong> Why should the standard actually mandate semantics for such an operation? What do you think such semantics should be?</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "20874041", "Score": "3", "CreationDate": "2014-01-01T22:38:58.983", "LastActivityDate": "2014-01-01T22:38:58.983"}, "20873984": {"CommentCount": "9", "ViewCount": "210", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-01-01T22:32:56.847", "LastActivityDate": "2014-01-01T22:50:40.673", "Title": "C++ is it legal to take the address of 2 or more past the end of the array?", "AcceptedAnswerId": "20874040", "LastEditDate": "2017-05-23T11:52:50.863", "Id": "20873984", "Score": "6", "Body": "<p>From <a href=\"https://stackoverflow.com/questions/988158/take-the-address-of-a-one-past-the-end-array-element-via-subscript-legal-by-the/991310#991310\">Take the address of a one-past-the-end array element via subscript: legal by the C++ Standard or not?</a></p>\n<p>It seems that there is language specific to taking the address of <strong>one</strong> more than an array end.</p>\n<p>Why would <strong>2</strong> or <strong>2,000,000</strong> past the end be an issue if it's not derefferenced?</p>\n<p>Looking at some simple loop:</p>\n<pre><code>int array[];\n...\nfor (int i = 0: i &lt; array_max; ++i)\n{\n       int * x = &amp;array[i *2];      // Is this legal\n       int y=0;\n       if (i * 2 &lt; array_max)       // We check here before dereference\n       {\n              y = *x;               // Legal dereference\n       }\n       ...\n}\n</code></pre>\n<p>Why or at what point does this become undefined, in practice it just sets a ptr to some value, why would it be undefined if it's not refferenced?</p>\n<p>More specifically - what example of anything but what is expected to happen could there be?</p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "2963099", "AnswerCount": "3"}, "20874063": {"ParentId": "20873984", "CommentCount": "8", "Body": "<p>Since <code>array[i *2]</code> is equivalent to <code>*((array) + (i*2))</code>, we should look at the rules for pointer addition. C++11 \u00a75.7 says:</p>\n<blockquote>\n<p id=\"so_20873984_20874063_0\">If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>So you have undefined behaviour even if you don't perform indirection on the pointer (not to mention that you <em>do</em> perform indirection, due to the expression equivalence I gave at the beginning).</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "20874063", "Score": "4", "CreationDate": "2014-01-01T22:41:29.943", "LastActivityDate": "2014-01-01T22:41:29.943"}, "20874040": {"ParentId": "20873984", "CommentCount": "4", "Body": "<p>The key issue with taking addresses beyond the end of an array are segmented architectures: you may overflow the representable range of the pointer. The existing rule already creates some level of pain as it means that the last object can't be right on the boundary of a segment. however, the ability to form this address was well established.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "20874040", "Score": "8", "CreationDate": "2014-01-01T22:38:52.047", "LastActivityDate": "2014-01-01T22:38:52.047"}, "bq_ids": {"n4140": {"so_20873984_20874063_0": {"section_id": 6142, "quality": 1.0, "length": 21}}, "n3337": {"so_20873984_20874063_0": {"section_id": 5906, "quality": 1.0, "length": 21}}, "n4659": {"so_20873984_20874063_0": {"section_id": 7638, "quality": 0.5238095238095238, "length": 11}}}});