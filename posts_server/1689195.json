post_cb({"1689267": {"ParentId": "1689195", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2009-11-06T18:00:14.857", "Score": "10", "LastEditorUserId": "124161", "LastEditDate": "2009-11-06T18:12:19.387", "Id": "1689267", "OwnerUserId": "124161", "Body": "<p>C++ Standard 2003. 10.3.5</p>\n<blockquote>\n<p id=\"so_1689195_1689267_0\">The return type of an overriding\n  function shall be either identical to\n  the return type of the overridden\n  function or <strong>covariant</strong> with the classes\n  of the functions.  If a function D::f\n  overrides a function B::f, the return\n  types of the functions are covariant\n  if they satisfy the following\n  criteria:</p>\n<p id=\"so_1689195_1689267_1\">\u2014  both are pointers to classes or\n  references to classes</p>\n<p id=\"so_1689195_1689267_2\">\u2014  the class in the return type of\n  B::f is the same class as the class in\n  the return type of D::f, or <strong>is an\n  unambiguous and accessible direct or\n  indirect base class of the class in\n  the return type of D::f</strong></p>\n<p id=\"so_1689195_1689267_3\">\u2014  both pointers or references have\n  the same cv-qualification and the\n  class type in the return type of D::f\n  has the same cv-qualification as or\n  less cv-qualification than the class\n  type in the return type of B::f.</p>\n<p id=\"so_1689195_1689267_4\">If the return type of D::f differs\n  from the return type of B::f, the\n  class type in the return type of D::f\n  shall be complete at the point of\n  declaration of D::f or shall be the\n  class type D.  When the overriding\n  function is called as the final\n  overrider of the overridden function,\n  its result is converted to the type\n  returned by the (statically chosen)\n  overridden function (5.2.2).</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class B {};\nclass D : private B { friend class Derived; };\nstruct Base {\n  virtual B*  vf4();\n  virtual B*  vf5();\n};\nclass A;\nstruct Derived : public Base {\n  D* vf4();  // OK: returns pointer to derived class\n  A* vf5();  // error: returns pointer to incomplete class\n};\n</code></pre>\n", "LastActivityDate": "2009-11-06T18:12:19.387"}, "1689346": {"ParentId": "1689195", "CommentCount": "2", "CreationDate": "2009-11-06T18:13:31.107", "OwnerUserId": "158676", "PostTypeId": "2", "Id": "1689346", "Score": "4", "Body": "<p>Pff, too long standard quoting.</p>\n<p>You can use another type as covariant if (a) it is a pointer/reference (b) it can be casted to the prior return type by mere addition of a constant known at compilation time (c) it is compliant to all constant-volatile qualifiers.</p>\n", "LastActivityDate": "2009-11-06T18:13:31.107"}, "1689195": {"CommentCount": "6", "ViewCount": "324", "PostTypeId": "1", "LastEditorUserId": "149045", "CreationDate": "2009-11-06T17:45:34.137", "LastActivityDate": "2009-11-06T19:50:03.917", "Title": "What the C++ rules in regard to covariant return types?", "AcceptedAnswerId": "1689267", "LastEditDate": "2009-11-06T19:50:03.917", "Id": "1689195", "Score": "5", "Body": "<p>Like in the example below, what is allowed, how and why?    </p>\n<pre><code>class Shape {\n      public:\n        //...\n        virtual Shape *clone() const = 0; // Prototype\n        //...\n    };\n    class Circle : public Shape {\n      public:\n        Circle *clone() const;\n        //...\n    };\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "149045", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_1689195_1689267_3": {"section_id": 7008, "quality": 1.0, "length": 19}, "so_1689195_1689267_1": {"section_id": 7008, "quality": 1.0, "length": 5}, "so_1689195_1689267_0": {"section_id": 7008, "quality": 0.92, "length": 23}, "so_1689195_1689267_4": {"section_id": 7009, "quality": 0.90625, "length": 29}, "so_1689195_1689267_2": {"section_id": 7008, "quality": 1.0, "length": 17}}, "n3337": {"so_1689195_1689267_3": {"section_id": 6754, "quality": 1.0, "length": 19}, "so_1689195_1689267_1": {"section_id": 6754, "quality": 1.0, "length": 5}, "so_1689195_1689267_0": {"section_id": 6754, "quality": 0.92, "length": 23}, "so_1689195_1689267_4": {"section_id": 6755, "quality": 0.96875, "length": 31}, "so_1689195_1689267_2": {"section_id": 6754, "quality": 1.0, "length": 17}}, "n4659": {"so_1689195_1689267_4": {"section_id": 8506, "quality": 0.90625, "length": 29}, "so_1689195_1689267_1": {"section_id": 8505, "quality": 1.0, "length": 5}, "so_1689195_1689267_0": {"section_id": 8505, "quality": 0.92, "length": 23}, "so_1689195_1689267_2": {"section_id": 8505, "quality": 1.0, "length": 17}, "so_1689195_1689267_3": {"section_id": 8505, "quality": 1.0, "length": 19}}}});