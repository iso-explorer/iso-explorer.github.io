post_cb({"bq_ids": {"n4140": {"so_41667547_41683684_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 52}}, "n3337": {"so_41667547_41683684_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 47}}, "n4659": {"so_41667547_41683684_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 53}}}, "41667547": {"ViewCount": "40", "Body": "<p>I have a trouble with code below:</p>\n<pre><code>template&lt;typename Name&gt;\nclass Person;\n\ntemplate&lt;typename Name, typename FamilyNmae&gt;\nclass Person {};\n\ntemplate&lt;typename Name, typename FamilyName&gt;\nclass Person &lt; Name(FamilyName) &gt;\n{\npublic:\n   Person(Name a)\n      : k{ a }\n   {\n\n   }\n\nprivate:\n   Name k;\n   FamilyName l;\n};\n</code></pre>\n<p>This code does not compile (C2977 'Person': too many template arguments), but if I do next:</p>\n<pre><code>template&lt;typename Name&gt;\nclass Person;\n\n//template&lt;typename Name, typename FamilyNmae&gt;\n//class Person {};\n\ntemplate&lt;typename Name, typename FamilyName&gt;\nclass Person &lt; Name(FamilyName) &gt;\n{\npublic:\n   Person(Name a)\n      : k{ a }\n   {\n\n   }\n\nprivate:\n   Name k;\n   FamilyName l;\n};\n</code></pre>\n<p>It compiles properly. But I cannot find rule according which received the error.\nI mean not explanation from compiler writer, but from the standard.\nDoes anybody know something about it ?</p>\n", "AcceptedAnswerId": "41683684", "Title": "Partialy specialization with function pattern parameters", "CreationDate": "2017-01-15T23:32:55.767", "Id": "41667547", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2017-01-16T20:37:09.620", "Score": "0", "OwnerUserId": "5157245", "Tags": "<c++><templates><generics>", "AnswerCount": "1"}, "41683684": {"Id": "41683684", "PostTypeId": "2", "Body": "<p>In the latest <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow noreferrer\">publicly available draft</a>, see 14.0.0.5 (shown below) and 14.5.5.</p>\n<blockquote>\n<p id=\"so_41667547_41683684_0\">A class template shall not have the same name as any other template,\n  class, function, variable, enumeration, enumerator, namespace, or type\n  in the same scope (3.3), except as specified in (14.5.5).</p>\n</blockquote>\n<p>It is not so explicit in regard to what exactly you are asking, but the 'except' clause is the critical part. It implies 'overloading' class templates cannot be done.</p>\n<p>If you follow the reference to 14.5.5, you can see that what you want to do can only be done through template specialization.</p>\n<p>Using 14.5.5.3 as a guide in how to properly specialize class templates, you could do something like this:</p>\n<pre><code>class EmptyName {}; //just a placeholder\n\ntemplate&lt;typename Name, typename FamilyName&gt;\nclass Person {};\n\ntemplate&lt;typename Name&gt;\nclass Person&lt;Name, EmptyName&gt; {};\n</code></pre>\n<p>Notice how the template declaration with 2 parameters is defined first as the \"primary template\" that you will specialize afterwards.</p>\n", "LastEditorUserId": "7148416", "LastActivityDate": "2017-01-16T20:37:09.620", "Score": "0", "CreationDate": "2017-01-16T19:26:16.503", "ParentId": "41667547", "CommentCount": "1", "OwnerUserId": "7148416", "LastEditDate": "2017-01-16T20:37:09.620"}});