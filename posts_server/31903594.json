post_cb({"bq_ids": {"n4140": {"so_31903594_31903690_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 5409}, "so_31903594_31903690_2": {"length": 12, "quality": 0.8, "section_id": 5412}}, "n3337": {"so_31903594_31903690_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 5204}, "so_31903594_31903690_2": {"length": 12, "quality": 0.8, "section_id": 5207}}, "n4659": {"so_31903594_31903690_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 6831}, "so_31903594_31903690_2": {"length": 12, "quality": 0.8, "section_id": 6834}}}, "31903594": {"ViewCount": "14503", "Body": "<p>This gives an error in C++ but not in C:</p>\n<pre><code>typedef struct nodes\n{\n    int data;\n    struct node *next;\n}node;\n</code></pre>\n<p>It gives the following error in C++.</p>\n<pre><code>/home/DS cpp/linkedlist.cpp|10|error: conflicting declaration \u2018typedef struct nodes node\u2019|\n/home/DS cpp/linkedlist.cpp|9|error: \u2018struct node\u2019 has a previous declaration as \u2018struct node\u2019|\n||=== Build failed: 2 error(s), 0 warning(s) (0 minute(s), 0 second(s)) ===|\n</code></pre>\n<p>For it to work in C++ I have to change it to this:</p>\n<pre><code>typedef struct node\n{\n    int data;\n    struct node *next;\n}node;\n</code></pre>\n<p>I don't understand why this happens, I want to know the order of execution in both C and C++ so that I can understand it.</p>\n", "AcceptedAnswerId": "31903690", "Title": "Typedef struct in C Vs C++", "CreationDate": "2015-08-09T11:12:36.693", "Id": "31903594", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-08-09T11:19:58.867", "LastEditorUserId": "3425536", "LastActivityDate": "2015-08-09T12:06:45.440", "Score": "16", "OwnerUserId": "4475119", "Tags": "<c++><c><struct><typedef>", "AnswerCount": "2"}, "31903810": {"Id": "31903810", "PostTypeId": "2", "Body": "<p>The C example you gave should be an error.  You're using a tag name (<code>node</code>) that you haven't defined with <code>struct node</code>.</p>\n<p>Given those two choices, the second is the one to use.  I prefer a bit of economy:</p>\n<pre><code>typedef struct node_t\n{\n    int data;\n    struct node_t *next;\n} node_t;\n</code></pre>\n<p>In C or C++, the tag names have their own namespace, so there is no problem with using the same name for the tag and the typedef name.  In C, this allows you to use either <code>node_t</code> or <code>struct node_t</code> to refer to this struct type.  C++ will search the tag names for a type name if a declared type name doesn't exist, so the above double-definition isn't needed, but doesn't hurt.</p>\n<p>In both languages, the explicit <code>struct node_t</code> version is required at any point before the type is completely defined, so any self-reference, and any forward references will use the <code>struct</code> version.  I prefer this in header files, mostly because it reduces problems with order of <code>#include</code> directives.</p>\n<p>PS: This <em>does</em> work in either language (see LRIO's answer for pointers into the C++11 Standard) and has been used in enough bilingual and even pure C++ header files that it's unlikely to disappear soon) so it's a very simple approach that just works in either language.</p>\n", "LastEditorUserId": "1762193", "LastActivityDate": "2015-08-09T12:06:45.440", "Score": "4", "CreationDate": "2015-08-09T11:38:02.363", "ParentId": "31903594", "CommentCount": "5", "OwnerUserId": "1762193", "LastEditDate": "2015-08-09T12:06:45.440"}, "31903690": {"Id": "31903690", "PostTypeId": "2", "Body": "<p>Let's analyse your code a bit:</p>\n<pre><code>typedef struct nodes\n{\n    int data;\n    struct node *next;\n}node;\n</code></pre>\n<p>This declares and defines <code>struct nodes</code>, a type with two members, and declares a type alias so we can refer to it only as <code>node</code>.</p>\n<p>Now, in C++, the member declaration <code>struct node *next</code> <a href=\"https://stackoverflow.com/a/31876176/560648\">automatically forward-declares a type called <code>node</code></a>. That then conflicts with your <code>typedef</code> target <code>node</code>: it's as if you're trying to give two types the same name.</p>\n<p>In C, there is no conflict, because the type called <code>node</code> can in fact only be referred to as <code>struct node</code>.</p>\n<p>The second snippet worked because, since during parsing of the member declaration <code>struct node</code> already exists, no new type is forward-declared there \u2026 and since all you're then doing is renaming it in the same <code>typedef</code> statement, C++ doesn't really care, knowing that it's all the same type (<code>struct T</code> <em>is</em> <code>T</code>; the difference is in syntax, not in name).</p>\n<blockquote>\n<p id=\"so_31903594_31903690_0\"><code>[C++11: 7.1.3/3]:</code> In a given non-class scope, a <code>typedef</code> specifier can be used to redefine the name of any type declared in that scope to refer to the type to which it already refers. <em>[ Example:</em></p>\n<pre><code>typedef struct s { / ... / } s;\ntypedef int I;\ntypedef int I;\ntypedef I I;\n</code></pre>\n<p id=\"so_31903594_31903690_1\"><em>\u2014end example ]</em></p>\n<p id=\"so_31903594_31903690_2\"><code>[C++11: 7.1.3/6]:</code> In a given scope, a <code>typedef</code> specifier shall not be used to redefine the name of any type declared in that scope to refer to a different type. <em>[ Example:</em></p>\n<pre><code>class complex { / ... / };\ntypedef int complex; // error: redefinition\n</code></pre>\n<p id=\"so_31903594_31903690_3\"><em>\u2014end example ]</em></p>\n</blockquote>\n<p>Of course, in C++, this is all moot and you should just write:</p>\n<pre><code>struct node\n{\n   int data;\n   node* next;\n};\n</code></pre>\n<p>You do not need to <code>typedef</code>-away the <em>elaborated-type-specifier</em> <code>struct</code>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-09T11:29:07.360", "Score": "24", "CreationDate": "2015-08-09T11:22:43.833", "ParentId": "31903594", "CommentCount": "15", "OwnerUserId": "560648", "LastEditDate": "2017-05-23T12:08:57.263"}});