post_cb({"bq_ids": {"n4140": {"so_29775826_29776416_2": {"length": 41, "quality": 0.9761904761904762, "section_id": 7154}, "so_29775826_29776326_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 7151}, "so_29775826_29776416_1": {"length": 34, "quality": 0.9714285714285714, "section_id": 7153}, "so_29775826_29776416_0": {"length": 47, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_29775826_29776416_2": {"length": 41, "quality": 0.9761904761904762, "section_id": 6898}, "so_29775826_29776326_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 6895}, "so_29775826_29776416_0": {"length": 47, "quality": 1.0, "section_id": 6895}, "so_29775826_29776416_1": {"length": 34, "quality": 0.9714285714285714, "section_id": 6897}}, "n4659": {"so_29775826_29776416_2": {"length": 29, "quality": 0.6904761904761905, "section_id": 8659}, "so_29775826_29776416_1": {"length": 23, "quality": 0.6571428571428571, "section_id": 8657}}}, "29775826": {"ViewCount": "416", "Body": "<p>Does the C++ standard require that dynamic initialization of non-local static variables, be performed in the same thread that calls <code>main()</code>?</p>\n<p>More specifically, in C++11, is <code>std::this_thread::get_id()</code> guaranteed to return the same result in static initializers and inside <code>main()</code>?</p>\n<p><strong>Edit:</strong></p>\n<p>Even more specifically, given the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nstatic std::thread::id id = std::this_thread::get_id();\n\nint main()\n{\n        std::cout &lt;&lt; id &lt;&lt; \"\\n\";\n        std::cout &lt;&lt; std::this_thread::get_id() &lt;&lt; \"\\n\";\n        return 0;\n}\n</code></pre>\n<p>are the two emitted thread IDs required/guaranteed to match?</p>\n", "AcceptedAnswerId": "29776416", "Title": "Does the C++ standard require that dynamic initialization of static variables be performed in the main thread?", "CreationDate": "2015-04-21T14:55:53.280", "Id": "29775826", "CommentCount": "3", "LastEditDate": "2015-04-21T16:13:59.043", "PostTypeId": "1", "LastEditorUserId": "193887", "LastActivityDate": "2015-04-21T16:13:59.043", "Score": "16", "OwnerUserId": "193887", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}, "29776326": {"Id": "29776326", "PostTypeId": "2", "Body": "<p>No. The standard nowhere provides such a guarantee, and in fact the contrary is implied by [basic.start.init]/p2:</p>\n<blockquote>\n<p id=\"so_29775826_29776326_0\">If a program starts a thread (30.3), the subsequent initialization of\n  a variable is unsequenced with respect to the initialization of a\n  variable defined in a different translation unit. Otherwise, the\n  initialization of a variable is indeterminately sequenced with respect\n  to the initialization of a variable defined in a different translation\n  unit. If a program starts a thread, the subsequent unordered\n  initialization of a variable is unsequenced with respect to every\n  other dynamic initialization. Otherwise, the unordered initialization\n  of a variable is indeterminately sequenced with respect to every other\n  dynamic initialization.</p>\n</blockquote>\n<p>There would be no need to weaken the sequencing guarantee in the presence of threads if all initializations had to be performed on the same thread.</p>\n", "LastActivityDate": "2015-04-21T15:14:53.133", "CommentCount": "3", "CreationDate": "2015-04-21T15:14:53.133", "ParentId": "29775826", "Score": "5", "OwnerUserId": "2756719"}, "29776162": {"Id": "29776162", "PostTypeId": "2", "Body": "<p>No, though it may be a good idea to write your program that way.  The syntax requires that static initialization happens in a deterministic way, but does not dictate things like the thread involved.</p>\n", "LastActivityDate": "2015-04-21T15:08:45.883", "CommentCount": "2", "CreationDate": "2015-04-21T15:08:45.883", "ParentId": "29775826", "Score": "0", "OwnerUserId": "2773169"}, "29776416": {"Id": "29776416", "PostTypeId": "2", "Body": "<p>Standard doesn't say anything about what thread should perform such initialization. It only requires specific orderings and guarantees:</p>\n<p><strong>3.6.2 Initialization of non-local variables</strong> [basic.start.init]</p>\n<blockquote>\n<p id=\"so_29775826_29776416_0\"><strong>2.</strong> Static initialization shall be performed before any dynamic initialization takes place. [...] Variables with ordered initialization defined within a single translation unit shall be initialized in the order of their definitions in the translation unit. [...] If a program starts a thread, the subsequent initialization of a variable is unsequenced with respect to the initialization of a variable defined in a different translation unit. Otherwise, the initialization of a variable is indeterminately sequenced with respect to the initialization of a variable defined in a different translation unit.</p>\n<p id=\"so_29775826_29776416_1\"><strong>4.</strong> It is implementation-defined whether the dynamic initialization of a non-local variable with static storage duration is done before the first statement of main. If the initialization is deferred to some point in time\n  after the first statement of main, it shall occur before the first odr-use of any function or variable defined in the same translation unit as the variable to be initialized.</p>\n<p id=\"so_29775826_29776416_2\"><strong>5.</strong> It is implementation-defined whether the dynamic initialization of a non-local variable with static or thread storage duration is done before the first statement of the initial function of the thread. If the initialization is deferred to some point in time after the first statement of the initial function of the thread, it shall occur before the first odr-use of any variable with thread storage duration defined in the same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>However, most implementations will do so - initialization of static non-local variables will be performed in the same thread, that calls <code>main()</code>. Example from Visual C++ 11:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nstruct Cx\n{\npublic:\n    Cx()\n    {\n        cout&lt;&lt;\"Cx: \"&lt;&lt;std::this_thread::get_id()&lt;&lt;endl;\n    }\n};\n\nstatic Cx c;\n\nint main()\n{\n    cout&lt;&lt;\"Main: \"&lt;&lt;std::this_thread::get_id()&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>Cx: 5820\nMain: 5820\n</code></pre>\n<p>After setting breakpoint inside <code>Cx::Cx()</code>:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/YBATs.png\"/></p>\n", "LastEditorUserId": "2812864", "LastActivityDate": "2015-04-21T15:20:18.853", "Score": "0", "CreationDate": "2015-04-21T15:19:16.380", "ParentId": "29775826", "CommentCount": "7", "OwnerUserId": "2812864", "LastEditDate": "2015-04-21T15:20:18.853"}});