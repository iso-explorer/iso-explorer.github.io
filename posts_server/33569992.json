post_cb({"bq_ids": {"n4140": {"so_33569992_33570258_0": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_33569992_33570258_0": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_33569992_33570258_0": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "33569992": {"ViewCount": "177", "Body": "<p>The following  code</p>\n<pre><code>#include &lt;iostream&gt;\n\ntypedef double A; // a global typedef\n\ntemplate &lt;class Z&gt; struct B // a template class...\n{\n    A i{22.2}; // global typedef is in scope\n    typedef int A; // now  a local typedef with the same name is introduced\n    A b{24};  // now the local typedef is in scope\n    Z c{36}; // a simple member of the template type\n};\n\ntemplate &lt;class Z&gt; struct C : B&lt;Z&gt; // a template struct inheriting B\n{\n    A a;  // global typedef is in scope because we are in a template struct\n    C(  ) : a(2.2){  }\n};\n\nint main(  )\n{\n    C&lt;int&gt; c;\n    std::cout &lt;&lt; \"c's members: \"\n           &lt;&lt; c.a &lt;&lt; ' '\n           &lt;&lt; c.i &lt;&lt; ' '\n           &lt;&lt; c.b &lt;&lt; ' '\n           &lt;&lt; c.c &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"their sizeof: \"\n           &lt;&lt; sizeof(c.a) &lt;&lt; ' ' \n           &lt;&lt; sizeof(c.i) &lt;&lt; ' '\n           &lt;&lt; sizeof(c.b) &lt;&lt; ' '\n           &lt;&lt; sizeof(c.c) &lt;&lt;  std::endl;\n}\n</code></pre>\n<p>is NOT compiled by <code>GNU-g++ 4.9.2</code> while it is by <code>clang 3.5.0</code> and behaves as I tried to explain in the embedded comments and as it can be seen by the output produced. Is this a bug in the GNU compiler?\nThe diagnostic says that the line <code>typedef int A;</code> in the scope of the\n<code>struct B</code></p>\n<blockquote>\n<p id=\"so_33569992_33569992_0\">error: changes meaning of \u2018A\u2019 from \u2018typedef double A\u2019</p>\n</blockquote>\n<p>Note that when the hierarchy is not made of <code>template</code> (and of course the <code>Z c{36};</code> declaration is removed) the lookup performed by <code>clang</code> in the scope of <code>C</code> (correctly, as I suppose) finds the <code>typedef</code> in the scope of <code>B</code> and considers the member <code>a</code> to be of\ntype <code>int</code>; then it issues a warning about the narrowing of the initializing <code>double</code> constant <code>2.2</code>...</p>\n", "Title": "name lookup for typedef is buggy in GNU compiler?", "CreationDate": "2015-11-06T15:20:13.760", "LastActivityDate": "2015-11-09T06:58:59.740", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-11-09T06:58:59.740", "LastEditorUserId": "88442", "Id": "33569992", "Score": "7", "OwnerUserId": "4278083", "Tags": "<c++><c++11><typedef><language-lawyer><name-lookup>", "AnswerCount": "1"}, "33570258": {"Id": "33570258", "PostTypeId": "2", "Body": "<p>From the c++ standard draft (N4140)</p>\n<p>\u00a73.3.7 [basic.scope.class]</p>\n<blockquote>\n<p id=\"so_33569992_33570258_0\">2) A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p><code>A i{22.2}</code> initially refers to the global <code>::A</code>. But after <code>B::A</code> is declared, when re-evaluated in the completed scope of <code>B</code>, it would refer to <code>B::A</code>. This violates the rule above.</p>\n<p>To fix it, use the fully qualified name: <code>::A i{22.2}</code>. <code>::A</code> always refers to the global <code>A</code> even after <code>B::A</code> is declared, so it doesn't violate the rule.</p>\n<p>This is not a bug in g++; it's just an ill-formed program. The compiler is not required not give you a diagnostic for the violation of the rule, but it's not required to accept it either. </p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2015-11-06T16:10:33.170", "Score": "9", "CreationDate": "2015-11-06T15:33:53.690", "ParentId": "33569992", "CommentCount": "0", "OwnerUserId": "2079303", "LastEditDate": "2015-11-06T16:10:33.170"}});