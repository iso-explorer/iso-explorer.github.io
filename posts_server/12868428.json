post_cb({"12868453": {"ParentId": "12868428", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>That quote is wrong. A nested inner class-type has access to all members (including <code>private</code>) of the enclosing class-type.</p>\n<p>This was not the case in C++98, and your edition probably refers to that version of the standard. In C++03 and C++11 the quote doesn't apply.</p>\n<h3>11.7 Nested classes [class.access.nest]</h3>\n<blockquote>\n<p id=\"so_12868428_12868453_0\">1 A nested class is a member and as such has the same access rights as any other member. The members of\n  an enclosing class have no special access to members of a nested class; the usual access rules (Clause 11)\n  shall be obeyed.</p>\n</blockquote>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2012-10-12T23:37:35.557", "Id": "12868453", "Score": "6", "CreationDate": "2012-10-12T23:31:30.913", "LastActivityDate": "2012-10-12T23:37:35.557"}, "12868428": {"CommentCount": "0", "AcceptedAnswerId": "12868453", "CreationDate": "2012-10-12T23:27:37.893", "LastActivityDate": "2012-10-12T23:37:35.557", "PostTypeId": "1", "ViewCount": "882", "FavoriteCount": "1", "Title": "Friend for nested structure in C++", "Id": "12868428", "Score": "4", "Body": "<p>I know <a href=\"http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html\" rel=\"nofollow\">Thinking in C++</a> by Bruce Eckel is not a reference book but I found a strange paragraph and I don't understand if it's still applicable today:</p>\n<blockquote>\n<p id=\"so_12868428_12868428_0\">Making a structure nested doesn\u2019t automatically give it access to\n  private members. To accomplish this, you must follow a particular\n  form: first, declare (without defining) the nested structure, then\n  declare it as a friend, and finally define the structure. The\n  structure definition must be separate from the friend declaration,\n  otherwise it would be seen by the compiler as a non-member.</p>\n</blockquote>\n<p>I actually tried this without declaring the nested structure as a friend and it worked:</p>\n<pre><code>struct myStruct{\nprivate:\n    int bar;\npublic:\n    struct nestedStruct{\n        void foo(myStruct *);\n    }a;\n};\n\nvoid myStruct::nestedStruct::foo(myStruct * p){\n    p-&gt;bar = 20;\n}\n</code></pre>\n<p>Is there still a need to declare a nested structure friend in order to modify the private members of the base class?</p>\n", "Tags": "<c++><struct><nested>", "OwnerUserId": "547695", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12868428_12868453_0": {"section_id": 6700, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_12868428_12868453_0": {"section_id": 6455, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_12868428_12868453_0": {"section_id": 8174, "quality": 0.9583333333333334, "length": 23}}}});