post_cb({"bq_ids": {"n4140": {"so_23128045_23128045_1": {"length": 18, "quality": 0.9, "section_id": 7164}, "so_23128045_23128045_3": {"length": 39, "quality": 0.9512195121951219, "section_id": 7150}, "so_23128045_23128045_4": {"length": 13, "quality": 0.8666666666666667, "section_id": 7151}}, "n3337": {"so_23128045_23128045_1": {"length": 18, "quality": 0.9, "section_id": 6908}, "so_23128045_23128045_3": {"length": 39, "quality": 0.9512195121951219, "section_id": 6894}, "so_23128045_23128045_4": {"length": 13, "quality": 0.8666666666666667, "section_id": 6895}}, "n4659": {"so_23128045_23128045_1": {"length": 18, "quality": 0.9, "section_id": 8672}, "so_23128045_23128045_3": {"length": 21, "quality": 0.5121951219512195, "section_id": 8651}, "so_23128045_23128045_4": {"length": 9, "quality": 0.6, "section_id": 4051}}}, "23128256": {"Id": "23128256", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23128045_23128256_0\">Is memory for global variables allocated on demand?</p>\n</blockquote>\n<p>Linkers store only initialized data in the binaries. Space for uninitialized data with static storage duration is allocated at run-time by the run-time linker, and even then the physical memory is committed only when you start accessing that data. See <a href=\"https://en.wikipedia.org/wiki/Data_segment\" rel=\"nofollow\">data segment</a> for more details.</p>\n", "LastActivityDate": "2014-04-17T08:31:56.980", "Score": "4", "CreationDate": "2014-04-17T08:31:56.980", "ParentId": "23128045", "CommentCount": "3", "OwnerUserId": "412080"}, "23128045": {"ViewCount": "174", "Body": "<p>I have this test code:</p>\n<pre><code>#include &lt;thread&gt;\n#include &lt;cstdint&gt;\n#include &lt;cstdlib&gt;\n\nint32_t global_buffer[1024][1024][256];\n\nint main()\n{\n    std::this_thread::sleep_for(std::chrono::seconds(5));\n\n    for (size_t i = 0; i &lt; 1024; ++i)\n        for (size_t j = 0; j &lt; 1024; ++j)\n        for (size_t k = 0; k &lt; 256; ++k)\n                global_buffer[i][j][k] = rand();\n\n    std::this_thread::sleep_for(std::chrono::seconds(5));\n\n    int32_t* heap_buffer = new int32_t[1024 * 1024 * 256];\n    for (size_t i = 0; i &lt; 1024 * 1024 * 256; ++i)\n        heap_buffer[i] = rand();\n\n    std::this_thread::sleep_for(std::chrono::seconds(5));\n\n    delete[] heap_buffer;\n\n    std::this_thread::sleep_for(std::chrono::seconds(5));\n}\n</code></pre>\n<p>If I run the program, compiled with VS2013 on 32bits, on Windows 7 I have the following memory behavior:</p>\n<ol>\n<li>memory usage is very low, several KB in the first ~5 seconds</li>\n<li>memory usage increases in time until it hits ~1 GB</li>\n<li>memory usage stays ~1 GB for 5 seconds</li>\n<li>memory usage jumps to ~2 GB and stays there for ~5 second</li>\n<li>memory usage jumps to ~1 GB</li>\n</ol>\n<p>As I don't understand why 1. and 2. are happening I have several questions:</p>\n<ol>\n<li>Why doesn't the program start with ~1 GB memory usage? </li>\n<li>Is memory for global variables allocated on demand? </li>\n<li>Is this a VS/Windows specific behavior or other compilers/OS have the same behavior?</li>\n<li>Is this behavior correct? The std says:</li>\n</ol>\n<blockquote>\n<p id=\"so_23128045_23128045_0\">3.7.1 Static storage duration</p>\n<p id=\"so_23128045_23128045_1\">All variables which do not have dynamic storage duration, do not have\n  thread storage duration, and are not local have static storage\n  duration. The storage for these entities shall last for the duration\n  of the program</p>\n<p id=\"so_23128045_23128045_2\">3.6.2 Initialization of non-local variables</p>\n<ol>\n<li><p id=\"so_23128045_23128045_3\">There are two broad classes of named non-local variables: those with static storage duration (3.7.1) and those with thread storage\n  duration (3.7.2). Non-local variables with static storage duration are\n  initialized as a consequence of program initiation. Non-local\n  variables with thread storage duration are initialized as a\n  consequence of thread execution. Within each of these phases of\n  initiation, initialization occurs as follows.</p></li>\n<li><p id=\"so_23128045_23128045_4\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other\n  initialization takes place.</p></li>\n</ol>\n</blockquote>\n", "AcceptedAnswerId": "23128256", "Title": "Global variables memory allocation in C++", "CreationDate": "2014-04-17T08:20:08.503", "Id": "23128045", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-04-17T08:31:56.980", "Score": "0", "OwnerUserId": "336578", "Tags": "<c++><memory><memory-management>", "AnswerCount": "1"}});