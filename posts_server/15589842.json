post_cb({"15589842": {"ViewCount": "535", "Body": "<p>I tested the following code with GCC, Clang, ICC and VS:</p>\n<pre><code>void f() {}\n\nvoid g(void (&amp;&amp;)()) { }\n\nint main() {\n    g(f);\n}\n</code></pre>\n<p>As we can see, <code>g</code> takes an rvalue reference but <code>f</code> is an lvalue and, in general, rvalue references cannot be bound to lvalues. That's exactly what <strong>ICC complains</strong> about:</p>\n<pre><code>error: an rvalue reference cannot be bound to an lvalue\n</code></pre>\n<p><strong>VS also gives an error</strong> but for another reason:</p>\n<pre><code>error C2664: 'void h(void (__cdecl &amp;&amp;)(void))' : cannot convert parameter 1 from 'void (__cdecl *)(void)' to 'void (__cdecl &amp;&amp;)(void)'\n</code></pre>\n<p>This suggests to me that VS is immediately performing a function-to-pointer conversion rather than directly bind the reference to <code>f</code>. It's worth mentioning that if I replace <code>g(f)</code> with <code>g(&amp;f)</code> then the four compilers yield this very same error.</p>\n<p>Finally, <strong>GCC and Clang accept the code</strong> and I believe they are correct. My reasoning is based on 8.5.3/5</p>\n<blockquote>\n<p id=\"so_15589842_15589842_0\">A reference to type \u201ccv1 T1\u201d is initialized by an expression of type \u201ccv2 T2\u201d as </p>\n<p id=\"so_15589842_15589842_1\">\u2014 If the reference is an lvalue reference [...]</p>\n<p id=\"so_15589842_15589842_2\">\u2014 Otherwise, [...] <strong>the reference shall be an rvalue reference</strong>.</p>\n<p id=\"so_15589842_15589842_3\">\u00a0\u00a0\u00a0\u00a0 \u2014 If <strong>the initializer expression is a</strong> [...] <strong>function lvalue</strong> [...]</p>\n<p id=\"so_15589842_15589842_4\">\u00a0\u00a0\u00a0\u00a0 then <strong>the reference is bound to the value of the initializer expression</strong> [...]</p>\n</blockquote>\n<p>Is my interpretation correct (that is, Clang and GCC are compliant for the given reason)?</p>\n", "AcceptedAnswerId": "15590092", "Title": "Can an rvalue reference bind to a function?", "CreationDate": "2013-03-23T17:28:38.197", "Id": "15589842", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-03-23T17:29:55.383", "LastEditorUserId": "1782465", "LastActivityDate": "2013-03-23T17:55:17.980", "Score": "12", "OwnerUserId": "1137388", "Tags": "<c++><function><c++11><language-lawyer><rvalue-reference>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15589842_15589842_3": {"length": 4, "quality": 1.0, "section_id": 597}, "so_15589842_15589842_2": {"length": 4, "quality": 1.0, "section_id": 3321}, "so_15589842_15590092_1": {"length": 28, "quality": 0.9655172413793104, "section_id": 627}, "so_15589842_15589842_4": {"length": 6, "quality": 1.0, "section_id": 3321}, "so_15589842_15590092_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 603}, "so_15589842_15589842_0": {"length": 7, "quality": 1.0, "section_id": 3321}, "so_15589842_15590092_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 639}}, "n3337": {"so_15589842_15589842_3": {"length": 4, "quality": 1.0, "section_id": 587}, "so_15589842_15589842_2": {"length": 4, "quality": 1.0, "section_id": 3191}, "so_15589842_15590092_1": {"length": 28, "quality": 0.9655172413793104, "section_id": 617}, "so_15589842_15589842_4": {"length": 6, "quality": 1.0, "section_id": 3191}, "so_15589842_15590092_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 593}, "so_15589842_15589842_0": {"length": 7, "quality": 1.0, "section_id": 3191}, "so_15589842_15590092_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 629}}, "n4659": {"so_15589842_15589842_3": {"length": 4, "quality": 1.0, "section_id": 620}, "so_15589842_15589842_2": {"length": 4, "quality": 1.0, "section_id": 4087}, "so_15589842_15590092_1": {"length": 28, "quality": 0.9655172413793104, "section_id": 653}, "so_15589842_15589842_4": {"length": 6, "quality": 1.0, "section_id": 4087}, "so_15589842_15590092_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 629}, "so_15589842_15589842_0": {"length": 7, "quality": 1.0, "section_id": 616}, "so_15589842_15590092_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 667}}}, "15590092": {"Id": "15590092", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15589842_15590092_0\">Is my interpretation correct [...]?</p>\n</blockquote>\n<p><strong>Yes.</strong></p>\n<p>Your interpretation is correct because of the Paragraph of the Standard that you quoted. A further confirmation comes from Paragraph 13.3.3.1.4/3 on reference binding:</p>\n<blockquote>\n<p id=\"so_15589842_15590092_1\">Except for an implicit object parameter, for which see 13.3.1, a standard conversion sequence cannot be\n  formed if it requires binding an lvalue reference other than a reference to a non-volatile const type to\n  an rvalue <strong>or binding an rvalue reference to an lvalue <em>other than</em> a function lvalue</strong>. [...]</p>\n</blockquote>\n<p>Paragraph 13.3.3.2/3 contains a further (indirect) confirmation:</p>\n<blockquote>\n<p id=\"so_15589842_15590092_2\">[...] Standard conversion sequence S1 is a better conversion sequence than standard conversion sequence S2 if</p>\n<p id=\"so_15589842_15590092_3\">\u2014 [...]</p>\n<p id=\"so_15589842_15590092_4\">\u2014 S1 and S2 are reference bindings (8.5.3) and S1 binds an lvalue reference to a function lvalue <strong>and S2 binds an rvalue reference to a function lvalue</strong>. [ <em>Example</em>:</p>\n<pre><code>int f(void(&amp;)()); // #1\nint f(void(&amp;&amp;)()); // #2\nvoid g();\nint i1 = f(g); // calls #1\n</code></pre>\n<p id=\"so_15589842_15590092_5\">\u2014<em>end example</em> ]</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-23T17:55:17.980", "Score": "9", "CreationDate": "2013-03-23T17:49:11.727", "ParentId": "15589842", "CommentCount": "2", "LastEditDate": "2013-03-23T17:55:17.980", "OwnerUserId": "1932150"}});