post_cb({"17106418": {"ParentId": "17106389", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>No. In the general case, they have unspecified values.</p>\n<p>If you don't like this behaviour, you can provide a constructor:</p>\n<pre><code>struct A {\n  double a;\n  double b;\n\n  A(): a(0.0), b(0.0) {}\n}\n</code></pre>\n", "OwnerUserId": "96780", "LastEditorUserId": "96780", "LastEditDate": "2013-06-14T10:47:24.530", "Id": "17106418", "Score": "3", "CreationDate": "2013-06-14T10:28:36.433", "LastActivityDate": "2013-06-14T10:47:24.530"}, "17106428": {"ParentId": "17106389", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_17106389_17106428_0\"><strong>8.5. Initializers [dcl.init]</strong> / <em>11</em>. </p>\n<p id=\"so_17106389_17106428_1\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, an\n  object with automatic or dynamic storage duration has indeterminate value. [ <em>Note:</em> Objects with static or\n  thread storage duration are zero-initialized, see 3.6.2. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>and (ordering reversed for readability):</p>\n<blockquote>\n<p id=\"so_17106389_17106428_2\"><strong>8.5. Initializers [dcl.init]</strong> / <em>6</em>.</p>\n<p id=\"so_17106389_17106428_3\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_17106389_17106428_4\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_17106389_17106428_5\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_17106389_17106428_6\">\u2014 <strong>otherwise, no initialization is performed.</strong> <em>[emphasis mine]</em></p>\n<p id=\"so_17106389_17106428_7\">If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class type\n  with a user-provided default constructor.</p>\n</blockquote>\n<p>They are <em>default initialized</em>. For builtin types like <code>int</code> or <code>double</code>, their value depends on where the struct is declared <em>(as a rule of thumb (but just as that): <strong>Assume they are always garbage unless initialized</strong>)</em>.</p>\n<p>In global scope or/and with <code>static</code> storage, they are all zeroes (incl. when the struct is a member of a struct which is at global scope).</p>\n<p>At function-local scope, they are full of garbage.</p>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    int x;\n    int y;\n};\n\nFoo foo;\n\nint main () {\n    Foo bar;\n\n    std::cout &lt;&lt; foo.x &lt;&lt; \":\" &lt;&lt; foo.y &lt;&lt; '\\n';\n    std::cout &lt;&lt; bar.x &lt;&lt; \":\" &lt;&lt; bar.y &lt;&lt; '\\n';\n}\n</code></pre>\n<p>This on the first run gives me </p>\n<pre><code>0:0\n-1077978680:12574708\n</code></pre>\n<p>On the second run, without recompilation, this gives me:</p>\n<pre><code>0:0\n-1075556168:12574708\n</code></pre>\n<p>A POD-struct can be initialized all zeroes using e.g. <code>memset</code> or just ...</p>\n<pre><code>Foo foo = {0}; // C and C++03\nFoo foo{0}; // C++11\n</code></pre>\n", "OwnerUserId": "76722", "LastEditorUserId": "76722", "LastEditDate": "2013-06-14T10:46:49.207", "Id": "17106428", "Score": "6", "CreationDate": "2013-06-14T10:29:15.320", "LastActivityDate": "2013-06-14T10:46:49.207"}, "17106446": {"ParentId": "17106389", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Not by default (unless it's a variable of static storage - that is, a <code>static</code> or global variable). </p>\n<p>There are a few ways to initialize a struct of this kind to \"zeros\":</p>\n<pre><code>A a = { 0.0, 0.0 };\nA a = { };\n\nA a = A();\n</code></pre>\n<p>or if you have a C++11 compatible compiler:</p>\n<pre><code>A a{0.0, 0.0};\nA a{}\n</code></pre>\n<p>or add a constructor to the <code>struct</code> definition:</p>\n<pre><code>struct A {\n  double a;\n  double b;\n  A() : a(0.0), b(0.0) {}\n};\n</code></pre>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2013-06-14T10:51:29.940", "Id": "17106446", "Score": "11", "CreationDate": "2013-06-14T10:30:04.910", "LastActivityDate": "2013-06-14T10:51:29.940"}, "17106389": {"CommentCount": "1", "ViewCount": "269", "CreationDate": "2013-06-14T10:27:17.840", "LastActivityDate": "2013-06-14T11:30:32.277", "Title": "Initializing member variables of a struct in c++", "AcceptedAnswerId": "17106446", "PostTypeId": "1", "Id": "17106389", "Score": "3", "Body": "<p>I have a struct with a few double values:</p>\n<pre><code>struct A {\n  double a;\n  double b;\n}\n</code></pre>\n<p>if I create a new struct, e.g. <code>A a</code>, are all the members (e.g. <code>a.a</code>) initialized to zeroes automatically in C++?</p>\n", "Tags": "<c++><struct><initialization>", "OwnerUserId": "5363", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_17106389_17106428_1": {"section_id": 3291, "quality": 0.76, "length": 19}, "so_17106389_17106428_4": {"section_id": 3286, "quality": 0.9230769230769231, "length": 12}, "so_17106389_17106428_3": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_17106389_17106428_7": {"section_id": 3286, "quality": 1.0, "length": 11}, "so_17106389_17106428_5": {"section_id": 3286, "quality": 1.0, "length": 5}}, "n3337": {"so_17106389_17106428_5": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_17106389_17106428_4": {"section_id": 3156, "quality": 1.0, "length": 13}, "so_17106389_17106428_3": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_17106389_17106428_7": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_17106389_17106428_1": {"section_id": 3161, "quality": 0.84, "length": 21}}, "n4659": {"so_17106389_17106428_1": {"section_id": 4053, "quality": 0.76, "length": 19}, "so_17106389_17106428_4": {"section_id": 4049, "quality": 0.6923076923076923, "length": 9}, "so_17106389_17106428_7": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}, "so_17106389_17106428_5": {"section_id": 4048, "quality": 1.0, "length": 5}}}});