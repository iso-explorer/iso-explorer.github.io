post_cb({"40705019": {"Id": "40705019", "PostTypeId": "2", "Body": "<p><code>decltype</code> returns the type of its argument. Using the following example:</p>\n<pre><code>class MyClass {\n\npublic:\n    int foo();\n    int bar();\n};\n</code></pre>\n<p>Both</p>\n<pre><code>decltype(&amp;MyClass::foo);\n</code></pre>\n<p>and</p>\n<pre><code>decltype(&amp;MyClass::bar);\n</code></pre>\n<p>is the same type: <code>int (MyClass::*)()</code>.</p>\n<p>When you default-initialize this type, the default initialization results in a <code>nullptr</code>. Hence the crash.</p>\n", "LastActivityDate": "2016-11-20T14:11:10.580", "CommentCount": "0", "CreationDate": "2016-11-20T14:11:10.580", "ParentId": "40704924", "Score": "0", "OwnerUserId": "3943312"}, "40705479": {"Id": "40705479", "PostTypeId": "2", "Body": "<p>When you value-initialize a pointer to member-function, you will receive a nullptr, of course.</p>\n<p>By the way, you can have multiple member function with the same type as you can see in Sam's answer.</p>\n<p>I don't know why do you need to put the <code>MemberFunc</code> to template parameter list of <code>Foo</code>.</p>\n<p>However, if you want to make a function to call it, this maybe a better approach in C++ before C++1z (use <code>auto</code> in C++1z is better match for this question):</p>\n<pre><code>class Foo {\n  MyClass object_;\npublic:\n  template&lt;class MemberFunc&gt;\n  void call(MemberFunc ptr) {\n    (object_.*ptr)();\n  }\n};\nint main() {\n  Foo foo;\n  foo.call(&amp;MyClass::doThings);\n}\n</code></pre>\n", "LastEditorUserId": "4115625", "LastActivityDate": "2016-11-20T15:00:26.963", "Score": "0", "CreationDate": "2016-11-20T14:54:57.653", "ParentId": "40704924", "CommentCount": "0", "OwnerUserId": "4115625", "LastEditDate": "2016-11-20T15:00:26.963"}, "40705029": {"Id": "40705029", "PostTypeId": "2", "Body": "<p>You can't instantiate a member function from its type. For example, consider the following class:</p>\n<pre><code>struct foo\n{\n    void bar(int){}\n    void baz(int){}\n};\n</code></pre>\n<p>Suppose you have a type <code>void (foo::*)(int)</code>. Which function would you like to get from it?</p>\n<p>As of C++1z, you'll be able to use <code>auto</code> to deduce non-type, non-template template parameters:</p>\n<pre><code>template&lt;auto f&gt; \nclass Foo {\n  MyClass object_;\n  void call() {\n    (object_.*f)();\n  }\n};\n\n\nint main() {\n  Foo&lt;&amp;MyClass::doThings&gt; foo;\n  foo.call();\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/LiGboi8rdUQP5BVR\" rel=\"nofollow noreferrer\">demo</a></p>\n<hr>\n<p>The only workaround for C++11/14 I can think of is using a macro:</p>\n<pre><code>#define type_value_pair(x) decltype(x), x\ntemplate&lt;class MemberFunc, MemberFunc f&gt; \nclass Foo {\n  MyClass object_;\n  void call() {\n    (object_.*f)();\n  }\n};\n\n\nint main() {\n  Foo&lt;type_value_pair(&amp;MyClass::doThings)&gt; foo;\n  foo.call();\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/j5DL3bgaPdiGdxcQ\" rel=\"nofollow noreferrer\">demo</a></p>\n<p>But I'd advise against using this, for readability reasons.</p>\n</hr>", "LastActivityDate": "2016-11-20T14:11:59.177", "CommentCount": "0", "CreationDate": "2016-11-20T14:11:59.177", "ParentId": "40704924", "Score": "1", "OwnerUserId": "2456565"}, "bq_ids": {"n4140": {"so_40704924_40705005_1": {"length": 5, "quality": 0.625, "section_id": 7104}, "so_40704924_40705005_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 369}}, "n3337": {"so_40704924_40705005_1": {"length": 5, "quality": 0.625, "section_id": 6848}, "so_40704924_40705005_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 359}}, "n4659": {"so_40704924_40705005_1": {"length": 5, "quality": 0.625, "section_id": 8605}, "so_40704924_40705005_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7709}}}, "40704924": {"ViewCount": "103", "Body": "<p>Lets say I have the follow code</p>\n<pre><code>template&lt;class MemberFunc&gt;\nclass Foo {\n  MyClass object_;\n  void call() {\n    auto ptr = MemberFunc{};\n    (object_.*ptr)();\n  }\n};\n\n\nint main() {\n  Foo&lt;decltype(&amp;MyClass::doThings)&gt; foo;\n  foo.call();\n}\n</code></pre>\n<p>This code does crash for me because ptr is 0. Why does the member function constructor returns 0?</p>\n<p>My workaround is the following but it involves code duplication. Is there no other way to just construct/instantiate the member function from the type? C++14 welcome.</p>\n<pre><code>template&lt;class MemberFunc, MemberFunc f&gt; \nclass Foo {\n  MyClass object_;\n  void call() {\n    (object_.*f)();\n  }\n};\n\n\nint main() {\n  Foo&lt;decltype(&amp;MyClass::doThings), &amp;MyClass::doThings&gt; foo;\n  foo.call();\n}\n</code></pre>\n", "AcceptedAnswerId": "40705005", "Title": "How to instantiate a member function pointer?", "CreationDate": "2016-11-20T14:02:00.767", "Id": "40704924", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-11-20T15:00:26.963", "Score": "2", "OwnerUserId": "783000", "Tags": "<c++><c++14>", "AnswerCount": "4"}, "40705005": {"Id": "40705005", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_40704924_40705005_0\">Why does the member function constructor returns 0?</p>\n</blockquote>\n<p>Because it's a pointer (<a href=\"http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_member_functions\" rel=\"nofollow noreferrer\">-to-member-function</a>), and <em>all</em> scalar types value-initialize to 0 (C++14 [dcl.init]/8.4).</p>\n<blockquote>\n<p id=\"so_40704924_40705005_1\">Is there no other way to just construct/instantiate the member function from the type?</p>\n</blockquote>\n<p>You can have multiple member functions with the same signature; how would it know which member function you want to refer to?</p>\n<p>The code you have is fine for C++14. In C++17, it can be shortened to the following:</p>\n<pre><code>template&lt;auto f&gt; \nclass Foo {\n  MyClass object_;\n  void call() {\n    (object_.*f)();\n  }\n};\n\nint main() {\n  Foo&lt;&amp;MyClass::doThings&gt; foo;\n  foo.call();\n}\n</code></pre>\n", "LastEditorUserId": "636019", "LastActivityDate": "2016-11-20T14:11:19.177", "Score": "4", "CreationDate": "2016-11-20T14:10:17.977", "ParentId": "40704924", "CommentCount": "2", "OwnerUserId": "636019", "LastEditDate": "2016-11-20T14:11:19.177"}});