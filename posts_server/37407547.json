post_cb({"37408242": {"Id": "37408242", "PostTypeId": "2", "Body": "<p>Its not much clear to me from the standard, but then, there is this written </p>\n<blockquote>\n<p id=\"so_37407547_37408242_0\">section 7.1.6.4 auto specifier<br/>\n  A program that uses auto in a context not explicitly allowed in this section is ill-formed.</p>\n</blockquote>\n<p>Better read the mentioned section of the standard for all the allowed contexts. </p>\n<p>Considering this, I believe g++ is correct and clang is wrong. But I could be wrong, there could be some separate section in standard which might be implying this context, but I could not find it.</p>\n", "LastActivityDate": "2016-05-24T08:31:10.857", "CommentCount": "2", "CreationDate": "2016-05-24T08:31:10.857", "ParentId": "37407547", "Score": "2", "OwnerUserId": "434233"}, "bq_ids": {"n4140": {"so_37407547_37408242_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5450}}, "n3337": {"so_37407547_37408242_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5244}}, "n4659": {"so_37407547_37408242_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 6877}}}, "37407547": {"ViewCount": "360", "Body": "<p>Is the following allowed by the standard?</p>\n<pre><code>#include &lt;iostream&gt;\n\nextern int a;\nauto a = 3;\n\nint main(int, char**)\n{\n    std::cout &lt;&lt; a &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/FSxXLayFv9fGwU5u\">clang</a> accepts the code.\n<a href=\"http://melpon.org/wandbox/permlink/EveSqAvJokWKOG4G\">g++</a> complains for conflicting declaration.</p>\n", "Title": "Can a variable be redeclared as auto that deduced to the same type?", "CreationDate": "2016-05-24T07:57:07.433", "LastActivityDate": "2016-05-24T09:54:21.123", "CommentCount": "9", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-05-24T07:57:55.130", "LastEditorUserId": "3953764", "Id": "37407547", "ClosedDate": "2016-05-24T09:35:41.277", "Score": "16", "OwnerUserId": "2969631", "Tags": "<c++><c++11><language-lawyer><extern><auto>", "AnswerCount": "2"}, "37408496": {"Id": "37408496", "PostTypeId": "2", "Body": "<p>Edit answer:\nAs mention in the comments. The problem in this case is that writting </p>\n<pre><code>external int a;\nauto a = 3;\n</code></pre>\n<p>is the same as writting </p>\n<pre><code>external int a;\nint a = 3;\n</code></pre>\n<p>that means you have a new definition of a and that causes an error.</p>\n<p>First answer:\nFor my understanding this breaks parts of the One definition rule. Specifically, I mean the following rule (in reference to MISRA C++ 2008) that says that an identifier with external linkage should always have only one definition. In your example you have a definition in the current file(<code>auto a = 3;</code>) and with external you also refer to a definition in another file.</p>\n", "LastEditorUserId": "6350154", "LastActivityDate": "2016-05-24T09:54:21.123", "Score": "-2", "CreationDate": "2016-05-24T08:45:12.743", "ParentId": "37407547", "CommentCount": "9", "OwnerUserId": "6350154", "LastEditDate": "2016-05-24T09:54:21.123"}});