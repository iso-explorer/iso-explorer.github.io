post_cb({"20440878": {"CommentCount": "3", "ViewCount": "155", "CreationDate": "2013-12-07T11:36:34.587", "LastActivityDate": "2013-12-07T22:00:38.530", "Title": "Multiple arguments in user-literals", "PostTypeId": "1", "Id": "20440878", "Score": "3", "Body": "<p>I've found this example on cppreference.com:</p>\n<pre><code>// used as conversion\ninline constexpr long double operator\"\" _deg ( long double deg )\n{\n    return deg*3.141592/180;\n}\n...\ndouble x = 90.0_deg; // x = 1.570796\n</code></pre>\n<p>But now I want to know, if I can give multiple arguments to that function. Here it is only <code>deg</code>. I mean something like that: <code>0.3_arg1_21arg2</code></p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2630015", "AnswerCount": "3"}, "20441127": {"ParentId": "20440878", "CommentCount": "0", "CreationDate": "2013-12-07T12:03:03.427", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "20441127", "Score": "0", "Body": "<p>You can not declare an arbitrary parameter list. Per \u00a7 13.5.8:</p>\n<blockquote>\n<p id=\"so_20440878_20441127_0\"><sup>3</sup> The declaration of a literal operator shall have a parameter-declaration-clause equivalent to one of the following:</p>\n</blockquote>\n<pre><code>const char*\nunsigned long long int\nlong double\nchar\nwchar_t\nchar16_t\nchar32_t\nconst char*, std::size_t\nconst wchar_t*, std::size_t\nconst char16_t*, std::size_t\nconst char32_t*, std::size_t\n</code></pre>\n<p>Your declaration only can use those list and you can use second argument for string literals which it will be set automatically.</p>\n", "LastActivityDate": "2013-12-07T12:03:03.427"}, "20440935": {"ParentId": "20440878", "CommentCount": "1", "CreationDate": "2013-12-07T11:42:21.743", "OwnerUserId": "4323", "PostTypeId": "2", "Id": "20440935", "Score": "0", "Body": "<p>No, there is no such feature.  Sorry to be the bearer of bad news!</p>\n", "LastActivityDate": "2013-12-07T11:42:21.743"}, "20441226": {"ParentId": "20440878", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-12-07T12:12:27.690", "Score": "5", "LastEditorUserId": "1968", "LastEditDate": "2013-12-07T22:00:38.530", "Id": "20441226", "OwnerUserId": "1968", "Body": "<p>This feature does\u2019t exist \u2013\u00a0but you can emulate it!</p>\n<p>For instance, you can make the following syntax work:</p>\n<pre><code>auto result = 0.3_arg1/21_arg2;\n</code></pre>\n<p>The <code>/</code> can be replaced by any overloadable operator of your choosing \u2013 maybe <code>,</code> would be a good choice, but beware of its low precedence. I would stick to something with a high precedence to ensure that this is parsed as if it were <em>one</em> literal (even though it isn\u2019t).</p>\n<p>Then, to make this work, you\u2019d implement something like this (compiled in my brain only, so no guarantee of correctness):</p>\n<pre><code>struct value_proxy_lhs { double d; };\nstruct value_proxy_rhs { double d; };\nstruct final_value { double a; double b; };\n\ninline constexpr value_proxy_lhs operator \"\"_arg1(double d) { return {d}; }\n\ninline constexpr value_proxy_rhs operator \"\"_arg2(double d) { return {d}; }\n\ninline constexpr final_value operator /(value_proxy_lhs lhs, value_proxy_rhs rhs) {\n    return {lhs.d, rhs.d};\n}\n</code></pre>\n<p>In a proper application you\u2019d probably hide the <code>value_proxy_*</code> classes as much as possible from the users so that they cannot accidentally produce incomplete values. \u2013 Unfortunately, I don\u2019t think there\u2019s a way of avoiding this completely. For instance, the language simply doesn\u2019t offer a way of forbidding something like <code>auto x{1_arg1};</code> to compile, as far as I know. Making the copy constructor <code>private</code> (and <code>final_value</code> a <code>friend</code>) would probably make the proxy classes non-POD and thus forbid using them as <code>constexpr</code> (AFAIR).</p>\n<p>As a real-world application I could imagine a date \u201cliteral\u201d:</p>\n<pre><code>auto date = 2013_yy/12_mm/07_dd;\n</code></pre>\n", "LastActivityDate": "2013-12-07T22:00:38.530"}, "bq_ids": {"n4140": {"so_20440878_20441127_0": {"section_id": 669, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_20440878_20441127_0": {"section_id": 659, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_20440878_20441127_0": {"section_id": 697, "quality": 0.8888888888888888, "length": 8}}}});