post_cb({"bq_ids": {"n4140": {"so_24165504_24165617_4": {"length": 22, "quality": 1.0, "section_id": 482}, "so_24165504_24165617_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 482}, "so_24165504_24165617_6": {"length": 23, "quality": 1.0, "section_id": 482}}, "n3337": {"so_24165504_24165617_4": {"length": 22, "quality": 1.0, "section_id": 473}, "so_24165504_24165617_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 473}, "so_24165504_24165617_6": {"length": 23, "quality": 1.0, "section_id": 473}}}, "24165504": {"ViewCount": "78", "Body": "<p>I'm trying to declare a member name which is constructor of base class as the following:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A{ };\n\nclass B: public A\n{\n    using A::A; //error: \u2018A::A\u2019 names constructor\n};\n\nint main()\n{\n}\n</code></pre>\n<p>Where is it specified that constructor cannot be accepted by using declaration? I'm looking for a corresponding quote from the Standard.</p>\n", "AcceptedAnswerId": "24165617", "Title": "Constructor nominated by using declaration", "CreationDate": "2014-06-11T14:26:52.960", "Id": "24165504", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-06-11T14:44:18.927", "Score": "0", "Tags": "<c++><class><constructor><using><language-lawyer>", "AnswerCount": "1"}, "24165617": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_24165504_24165617_0\">Where is it specified that constructor cannot be accepted by using declaration?</p>\n</blockquote>\n<p>Nowhere, because it can. See <strong>12 Special Member Functions</strong>:</p>\n<blockquote>\n<p id=\"so_24165504_24165617_1\"><strong>12.9 Inheriting constructors [class.inhctor]</strong> </p>\n<p id=\"so_24165504_24165617_2\">A using-declaration (7.3.3) that names a constructor implicitly declares a set of\n  inheriting constructors. The candidate set of inherited constructors from the class X named in the using-declaration consists of actual constructors and notional constructors that result from the transformation of defaulted parameters as follows:</p>\n<p id=\"so_24165504_24165617_3\">\u2014 all non-template constructors of X, and</p>\n<p id=\"so_24165504_24165617_4\">\u2014 for each non-template constructor of X that has at least one parameter with a default argument, the set of constructors that results from omitting any ellipsis parameter specification and successively omitting parameters with a default argument from the end of the parameter-type-list, and</p>\n<p id=\"so_24165504_24165617_5\">\u2014 all constructor templates of X, and</p>\n<p id=\"so_24165504_24165617_6\">\u2014 for each constructor template of X that has at least one parameter with a default argument, the set of constructor templates that results from omitting any ellipsis parameter specification and successively omitting parameters with a default argument from the end of the parameter-type-list.</p>\n<p id=\"so_24165504_24165617_7\">....</p>\n</blockquote>\n<p>Here's an example:</p>\n<pre><code>struct A\n{ \n  explicit A(int) {}    \n};\n\nstruct B: A\n{\n    using A::A;\n};\n\nint main()\n{\n    B b{42};\n}\n</code></pre>\n", "LastActivityDate": "2014-06-11T14:44:18.927", "LastEditorUserId": "661519", "Id": "24165617", "CommentCount": "2", "CreationDate": "2014-06-11T14:31:18.077", "ParentId": "24165504", "Score": "4", "OwnerUserId": "661519", "LastEditDate": "2014-06-11T14:44:18.927"}});