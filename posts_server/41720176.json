post_cb({"41720560": {"ParentId": "41720176", "CommentCount": "0", "CreationDate": "2017-01-18T13:20:55.447", "OwnerUserId": "3853544", "PostTypeId": "2", "Id": "41720560", "Score": "0", "Body": "<p>What you are experiencing is a result of <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion\" rel=\"nofollow noreferrer\">Implicit Conversion</a>.</p>\n<p>More specifically;</p>\n<blockquote>\n<p id=\"so_41720176_41720560_0\"><strong>...</strong></p>\n<p id=\"so_41720176_41720560_1\"><strong>Integral promotion</strong></p>\n<p id=\"so_41720176_41720560_2\">Prvalues of small integral types (such as char) may be converted to prvalues of larger integral types (such as int). In particular, arithmetic operators do not accept types smaller than int as arguments, and integral promotions are automatically applied after lvalue-to-rvalue conversion, if applicable. This conversion always preserves the value.</p>\n<p id=\"so_41720176_41720560_3\">The following implicit conversions are classified as integral promotions:</p>\n<ul>\n<li>signed char or signed short can be converted to int; </li>\n</ul>\n<p id=\"so_41720176_41720560_4\"><strong>...</strong> </p>\n</blockquote>\n<p>Which means when a signed char (eg a 'char') is compared to an integer its type gets promoted to an integer.</p>\n<p>On your system 'A' is defined as the value 0x41 or in decimal 65.</p>\n<p>Your switch statement takes in an integer, also 65, and compares it to 'A'.</p>\n<p>'A' is promoted to an integer and given the value 65.</p>\n<p>It is effectively doing the following:</p>\n<pre><code>int a = 65;\nchar b = 'A';\nif(a == static_cast&lt;int&gt;(b)){\n   ...\n}\n</code></pre>\n<p><strong>Note</strong> The value given to a char is implementation specific so this may not be true on another machine!</p>\n", "LastActivityDate": "2017-01-18T13:20:55.447"}, "41720285": {"ParentId": "41720176", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-18T13:08:03.967", "Score": "8", "LastEditorUserId": "4342498", "LastEditDate": "2017-01-18T13:13:28.127", "Id": "41720285", "OwnerUserId": "4342498", "Body": "<p><code>'A'</code> is a character literal.  It looks like an <code>A</code> but really it is mapped to some integer value depending on the character set.  In ASCII that value is <code>65</code>.  So what happens is the <code>'A'</code> is promoted to an <code>int</code> with the value determined by the character set (<code>65</code> in this case) and then it is compared to the value of <code>x</code>.  Since they have the same value <code>One</code> is printed.</p>\n<p>This is implementation defined behavior though.  C++ does not mandate what the character set should be so it is possible for this code to print out any of you other outputs.  It just depends on what value the character set maps <code>'A'</code> to.  This is why doing things like</p>\n<pre><code>char ch;\nstd::cin &gt;&gt; ch;\nif (ch == 65)\n...\n</code></pre>\n<p>Is bad because it relies on <a href=\"https://en.wikipedia.org/wiki/Magic_number_(programming)\" rel=\"nofollow noreferrer\">magic numbers</a> where as </p>\n<pre><code>char ch;\nstd::cin &gt;&gt; ch;\nif (ch == 'A')\n...\n</code></pre>\n<p>will always work since it removes relying on a specific character set.</p>\n", "LastActivityDate": "2017-01-18T13:13:28.127"}, "41720305": {"ParentId": "41720176", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-18T13:08:53.733", "Score": "1", "LastEditorUserId": "6710751", "LastEditDate": "2017-01-18T13:14:33.637", "Id": "41720305", "OwnerUserId": "6710751", "Body": "<p>Yes, it has to do with the fact that the ASCII value of A is 65.</p>\n<p>In the switch statement you use <code>x</code>, which is an integer, but all cases only provide characters (type <code>char</code>). So somewhere before the decision whether <code>x</code> equals <code>'A'</code>, the compiler has to make an implicit conversion from <code>char</code> to <code>int</code>, and casting <code>'A'</code> to <code>int</code> gives 65 - assuming that your compiler implementation uses ASCII and not some other character set.</p>\n", "LastActivityDate": "2017-01-18T13:14:33.637"}, "41721026": {"ParentId": "41720176", "CommentCount": "0", "CreationDate": "2017-01-18T13:42:52.457", "OwnerUserId": "5826535", "PostTypeId": "2", "Id": "41721026", "Score": "0", "Body": "<p>If you go to <a href=\"http://www.asciitable.com/\" rel=\"nofollow noreferrer\">http://www.asciitable.com/</a> then you will see that the capital character 'A', has an ASCII value of 65. When you use switch(x) and question the value 'A', which is a character, then the character is converted(typecasted) into an integer by its ASCII decimal value;</p>\n", "LastActivityDate": "2017-01-18T13:42:52.457"}, "41720269": {"ParentId": "41720176", "CommentCount": "0", "CreationDate": "2017-01-18T13:07:38.457", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "41720269", "Score": "5", "Body": "<h2><code>'A'</code> <em>is</em> 65.</h2>\n<p>Because your system is using the ASCII encoding for character literals, and character literals are numbers. You wrote <code>'A'</code> in your code, but actually (assuming ASCII) that means <code>(char)65</code>.</p>\n<p>And, obviously, 65 is 65.</p>\n<p>A value comparison is being performed, without requiring the types to be the same.</p>\n", "LastActivityDate": "2017-01-18T13:07:38.457"}, "41720979": {"ParentId": "41720176", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-18T13:40:55.343", "Score": "0", "LastEditorUserId": "7310344", "LastEditDate": "2017-01-21T14:59:44.457", "Id": "41720979", "OwnerUserId": "7310344", "Body": "<p>When you write any letter in between single apostrophes, you refer them as a char. This means they can be referred to as a numeric value. In your case, <strong>'A'</strong> refers to the ascii value of 65, while <strong>'B'</strong> refers to 66 and <strong>'C'</strong> refers to 67. The compiler then implicitly converts the int value into a char value where required, like in your case. See the example below:</p>\n<pre><code>    int i = 99; // This ca be any number ranging from and including 65-90 and 97-122 (only for uppercase/lowercase letters)\n    char s = i; // Variable s is assigned a character at the ascii value stored in variable i\n    cout &lt;&lt; s &lt;&lt; endl; // Outputting s gives us the letter/character, outputting i gives the decimal value as an int.\n</code></pre>\n<p>NOTE: If you write \"A\", then this is a string, and not a char value. Your compiler cannot make a conversion from int to string. For example, this piece of code will produce a compilation error:</p>\n<pre><code>    int i = 99; // This ca be any number ranging from and including 65-90 and 97-122 (only for uppercase/lowercase letters)\n    string s = i; // Here we are trying to store an int value in a string. This will fail\n    cout &lt;&lt; s &lt;&lt; endl; // Won't work\n</code></pre>\n<p>What you need to see here is that we can perform mathematical operations on an int value, which we cannot perform on a string. For example, we <strong>cannot</strong> do the following:</p>\n<pre><code>    string total = \"String a\" * \"String B\";\n</code></pre>\n<p>But we CAN do the following:</p>\n<pre><code>    int total = 5 * 6;\n</code></pre>\n<p>On the other hand, you can perform SOME mathematical operations on a char value, just like an int value, and we can also use an int value to refer to a certain char according to the ascii table; therefore, these 2 data types are compatible. For example this works:</p>\n<pre><code>    char s = 'A' + 2; // This results in the character C;\n</code></pre>\n<p>Hope this answers your question.</p>\n", "LastActivityDate": "2017-01-21T14:59:44.457"}, "41720176": {"CommentCount": "9", "ViewCount": "378", "PostTypeId": "1", "LastEditorUserId": "4342498", "CreationDate": "2017-01-18T13:02:51.340", "LastActivityDate": "2017-01-21T14:59:44.457", "Title": "Integer value of 'A'", "LastEditDate": "2017-01-18T13:39:47.490", "Id": "41720176", "Score": "0", "Body": "<p>I have written a program in c++ for switch cases to understand:</p>\n<pre><code> int main()\n  {\n    int x = 65;\n\n    switch(x)\n      {\n\n       case 'A':printf( \"One\" );\n              break;\n\n       case 'B': printf( \"Zero\" );\n              break;\n\n       case 'C': printf( \"Hello World\" );\n              break;\n\n       default: printf(\"Invalid\");\n\n      }\n   }\n</code></pre>\n<p>My Confusion is I have Declare my <code>int x = 65</code> </p>\n<p>and the output of this code is</p>\n<pre><code>One\n</code></pre>\n<p>How is it possible? Why it is relating to ASCII value of <code>65</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "7435786", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_41720176_41720882_0": {"section_id": 7210, "quality": 0.9629629629629629, "length": 26}, "so_41720176_41720882_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_41720176_41720560_3": {"section_id": 6186, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_41720176_41720882_0": {"section_id": 6954, "quality": 0.9629629629629629, "length": 26}, "so_41720176_41720882_1": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_41720176_41720560_3": {"section_id": 5947, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_41720176_41720882_0": {"section_id": 8719, "quality": 0.9629629629629629, "length": 26}, "so_41720176_41720882_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_41720176_41720560_3": {"section_id": 7689, "quality": 0.5714285714285714, "length": 4}}}, "41720882": {"ParentId": "41720176", "CommentCount": "0", "CreationDate": "2017-01-18T13:36:02.873", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "41720882", "Score": "1", "Body": "<p>Objects of type <code>char</code> including character literals belong to integer types and internally they are stored like integral values (codes) that represent characters.</p>\n<p>According to the C++ Standard (3.9.1 Fundamental types)</p>\n<blockquote>\n<p id=\"so_41720176_41720882_0\">1 Objects declared as characters(char) shall be large enough to store\n  any member of the implementation\u2019s basic character set. <strong>If a\n  character from this set is stored in a character object, the integral\n  value of that character object is equal to the value of the single\n  character literal form of that character.</strong></p>\n</blockquote>\n<p>and (4.5 Integral promotions)</p>\n<blockquote>\n<p id=\"so_41720176_41720882_1\">1 A prvalue of an integer type other than bool, char16_t, char32_t, or\n  wchar_t whose integer conversion rank (4.13) is less than the rank of\n  int can be converted to a prvalue of type int if int can represent all\n  the values of the source type; otherwise, the source prvalue can be\n  converted to a prvalue of type unsigned int.</p>\n</blockquote>\n<p>So when the expression in the switch statement </p>\n<pre><code>switch(x)\n</code></pre>\n<p>is evaluated its value is compared with the values converted to type int of each character literal used as label of the switch statement.</p>\n<p>Thus if characters in your system are internally represented by ASCII codes then for example the value 65 in decimal or 0x41 in hex represents character literal 'A'.</p>\n<p>Thus the comparison</p>\n<pre><code>x == 'A'\n</code></pre>\n<p>is equivalent to the comparison</p>\n<pre><code>x == 65\n</code></pre>\n", "LastActivityDate": "2017-01-18T13:36:02.873"}});