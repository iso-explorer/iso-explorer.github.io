post_cb({"bq_ids": {"n4140": {"so_31872991_31873347_3": {"length": 9, "quality": 1.0, "section_id": 303}, "so_31872991_31873347_0": {"length": 28, "quality": 0.509090909090909, "section_id": 5451}}, "n3337": {"so_31872991_31873347_3": {"length": 9, "quality": 1.0, "section_id": 294}, "so_31872991_31873347_0": {"length": 50, "quality": 0.9090909090909091, "section_id": 5245}}, "n4659": {"so_31872991_31873347_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 310}}}, "31887282": {"Id": "31887282", "PostTypeId": "2", "Body": "<p><code>auto myWidget1 = cw;</code> follows the third rule of template argument type deduction in Meyers book, which is pass by value. \nWhen you pass by value, cv-qualifiers and references are ignored, because you are getting a new copy of the object, so you don't really care if the old object that you copied from was const or a reference.</p>\n", "LastActivityDate": "2015-08-07T22:03:33.303", "CommentCount": "0", "CreationDate": "2015-08-07T22:03:33.303", "ParentId": "31872991", "Score": "1", "OwnerUserId": "5179631"}, "31872991": {"ViewCount": "348", "Body": "<p>I am reading Effective modern C++ from Scott Meyers. Item 1 contains the following example:</p>\n<pre><code>template&lt;typename T&gt;\nvoid f(T&amp; param);       // param is a reference\nint x = 27;             // x is an int\nconst int cx = x;       // cx is a const int\nf(cx);                  // T is const int,\n                        // param's type is const int&amp;\n</code></pre>\n<p>In Item 3 appears the following example:</p>\n<pre><code>Widget w;\nconst Widget&amp; cw = w;\nauto myWidget1 = cw;             // auto type deduction:\n                                 // myWidget1's type is Widget\n</code></pre>\n<p>Based on Item 1 I expected <code>myWidget1</code>'s type to be <code>const Widget</code>. Am I missing something?</p>\n", "AcceptedAnswerId": "31873347", "Title": "Const in auto type deduction", "CreationDate": "2015-08-07T08:26:52.940", "Id": "31872991", "CommentCount": "4", "LastEditDate": "2015-08-15T12:50:28.707", "PostTypeId": "1", "LastEditorUserId": "963864", "LastActivityDate": "2015-08-15T12:50:28.707", "Score": "1", "OwnerUserId": "4133947", "Tags": "<c++><c++11><reference><auto><effective-c++>", "AnswerCount": "2"}, "31873347": {"Id": "31873347", "PostTypeId": "2", "Body": "<p>In most cases <code>auto</code> follows the rules of template argument deduction:</p>\n<p>\u00a7 7.1.6.4 [dcl.spec.auto]/p6:</p>\n<blockquote>\n<p id=\"so_31872991_31873347_0\">Once the type of a <em>declarator-id</em> has been determined according to 8.3, the type of the declared variable\n  using the <em>declarator-id</em> is determined from the type of its initializer using the rules for template argument\n  deduction. Let <code>T</code> be the type that has been determined for a variable identifier <code>d</code>. Obtain <code>P</code> from <code>T</code> by\n  replacing the occurrences of <code>auto</code> with either a new invented type template parameter <code>U</code> or, if the initializer\n  is a <em>braced-init-list</em> (8.5.4), with <code>std::initializer_list&lt;U&gt;</code>. The type deduced for the variable <code>d</code> is then the deduced <code>A</code> determined using the rules of template argument deduction from a function call (14.8.2.1).</p>\n</blockquote>\n<p>\u00a7 14.8.2.1 [temp.deduct.call]/p2:</p>\n<blockquote>\n<p id=\"so_31872991_31873347_1\">If <code>P</code> is not a reference type:</p>\n<ul>\n<li><p id=\"so_31872991_31873347_2\">[...]</p></li>\n<li><p id=\"so_31872991_31873347_3\">If <code>A</code> is a cv-qualified type, the top level cv-qualifiers of <code>A</code>'s type <strong>are ignored for type deduction</strong>.</p></li>\n</ul>\n</blockquote>\n<p>If you want <code>myWidget1</code> to be of type <code>const Widget&amp;</code>, it should be declared as a reference type, e.g.:</p>\n<pre><code>auto&amp; myWidget1 = cw;\n//  ^\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/558ac8beddc01abd\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2015-08-07T21:27:15.653", "Score": "3", "CreationDate": "2015-08-07T08:44:26.643", "ParentId": "31872991", "CommentCount": "0", "OwnerUserId": "3953764", "LastEditDate": "2015-08-07T21:27:15.653"}});