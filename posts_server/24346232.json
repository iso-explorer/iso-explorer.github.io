post_cb({"bq_ids": {"n4140": {"so_24346232_24346324_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 955}}, "n3337": {"so_24346232_24346324_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 943}}}, "24346232": {"CreationDate": "2014-06-21T22:00:08.590", "ViewCount": "1674", "FavoriteCount": "2", "Id": "24346232", "AcceptedAnswerId": "24346324", "Score": "9", "Title": "std::vector: contiguous data and copy/move", "CommentCount": "10", "Body": "<p>I have two questions for the following code: <strong>1)</strong> Will the elements of <code>faces</code> be contiguous?\n<strong>2)</strong> Does <code>std::vector</code> copy or move <code>Face f</code> when inserting it? </p>\n<pre><code>#include &lt;vector&gt;    \nint main()\n{\n    struct Face {};\n    std::vector&lt;Face&gt; faces;\n\n    for (int i=0; i&lt;10; ++i)\n    {\n        Face f;\n\n        faces.push_back (f);\n    }\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><stdvector><contiguous>", "LastActivityDate": "2014-06-21T22:36:08.967", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1128551"}, "24346324": {"CreationDate": "2014-06-21T22:13:54.773", "CommentCount": "7", "Body": "<p>According to the standard \u00a7 23.3.6.1 Class template vector overview [vector.overview] :</p>\n<blockquote>\n<p id=\"so_24346232_24346324_0\"><em>The elements of a <code>vector</code> <strong>are stored contiguously</strong>, meaning that if <code>v</code> is a <code>vector&lt;T, Allocator&gt;</code> where <code>T</code> is some type other than <code>bool</code>, then it obeys the identity <code>&amp;v[n] == &amp;v[0] + n for all 0 &lt;= n &lt; v.size()</code>.</em></p>\n</blockquote>\n<p>As far as it concerns your second question in prior C++11 compilers <code>push_back</code> would copy the object you push back. </p>\n<p>After C++11  it depends because <code>push_back</code> has two overloads, one that takes an <code>lvalue</code> reference and another one that takes an <code>rvalue</code> reference. </p>\n<p>In your case It will be copied because you are passing the object as an <code>lvalue</code>. To ensure movement of the object you could use <code>std::move()</code>.</p>\n<pre><code>faces.push_back(std::move(f));\n</code></pre>\n", "Id": "24346324", "OwnerUserId": "2352671", "LastEditDate": "2014-06-21T22:36:08.967", "ParentId": "24346232", "LastActivityDate": "2014-06-21T22:36:08.967", "PostTypeId": "2", "Score": "18", "LastEditorUserId": "2352671"}});