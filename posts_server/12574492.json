post_cb({"bq_ids": {"n4140": {"so_12574492_12574492_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 6259}}, "n3337": {"so_12574492_12574492_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 6019}}, "n4659": {"so_12574492_12574492_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 7763}}}, "13908420": {"Id": "13908420", "PostTypeId": "2", "Body": "<p>Do not rely on one header including another, if you want something declared/defined in a specific header then you must include it.</p>\n<p>For the example you gave, with g++ there are actually two definitions of <code>ptrdiff_t</code> (and <code>size_t</code> for that matter). The first, in <code>namespace std</code>, that comes from <code>&lt;bits/c++config.h&gt;</code>. And the one in the global namespace from <code>&lt;stddef.h&gt;</code> (and so <code>&lt;cstddef&gt;</code>).</p>\n", "LastActivityDate": "2012-12-17T04:51:11.960", "CommentCount": "0", "CreationDate": "2012-12-17T04:51:11.960", "ParentId": "12574492", "Score": "3", "OwnerUserId": "22395"}, "18282466": {"Id": "18282466", "PostTypeId": "2", "Body": "<p>The problem is that you did not using the correct header. You should do </p>\n<pre><code>     #include &lt;cstddef&gt;\n</code></pre>\n<p>instead. However you use</p>\n<pre><code>        #include&lt;iostream&gt;\n</code></pre>\n<p>And that has a definition of \"std::ptrdiff_t\" in it indirectly. However, the global \"::ptrdiff_t\" is not defined in \"iostream\" and \"iostream\" did not include \"cstddef\" as you thought. Instead, \"iostream\" does include \"bits/c++config.h\". The actual \"std::ptrdiff_t\" is defined in that file.</p>\n<p>If you look at the content of the file \"cstddef\" you will find that is is only two \"useful\" lines there</p>\n<p>BTW, the above discussion is for GCC 4.6 and GCC 4.7. For GCC 4.4, \"iostream\" indrectly include \"cstddef\" therefore ptrdiff_t will be available in both namespaces (std and global).\n        #include \n        #include </p>\n<p>The latter line brings in the global \"::ptrdiff_t\" and the former defines the std namespace one. </p>\n", "LastEditorUserId": "1153165", "LastActivityDate": "2013-08-18T18:33:29.333", "Score": "1", "CreationDate": "2013-08-16T21:35:26.883", "ParentId": "12574492", "CommentCount": "0", "OwnerUserId": "1153165", "LastEditDate": "2013-08-18T18:33:29.333"}, "12574492": {"ViewCount": "1863", "Body": "<p>I was playing with <code>ptrdiff_t</code> and reading the C++11 standard when I came across this \"issue\". First, the facts:</p>\n<p>The type <code>ptrdiff_t</code> (just an example) is pulled from the Standard C library header <code>&lt;stddef.h&gt;</code> into <code>&lt;cstddef&gt;</code> (\u00a718.2/2). Section 17.6.1.2 tells us that declarations pulled from the C standard library will be within the <code>std</code> namespace:</p>\n<blockquote>\n<p id=\"so_12574492_12574492_0\">In the C++ standard library, however, the declarations (except for names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace <code>std</code>. It is\n  unspecified whether these names are first declared within the global namespace scope and are then injected into namespace <code>std</code> by explicit <em>using-declarations</em> (7.3.3).</p>\n</blockquote>\n<p>As it also says, the declarations may have been declared in global namespace first and then injected into <code>std</code>. So it would make sense, for my implementation, that the following compiles just fine:</p>\n<pre><code>#include &lt;cstddef&gt;\n\nint main(int argc, const char* argv[])\n{\n  std::ptrdiff_t x;\n  ptrdiff_t y;\n  return 0;\n}\n</code></pre>\n<p>My implementation (gcc 4.6.3) must have declared <code>ptrdiff_t</code> in the global namespace and then injected it into <code>std</code>. However, if I compile the following code, I get an error (notice the <code>&lt;iostream&gt;</code> include):</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, const char* argv[])\n{\n  std::ptrdiff_t x;\n  ptrdiff_t y;\n  return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_12574492_12574492_1\">main.cpp: In function \u2018int main(int, const char**)\u2019:<br>\n  main.cpp:6:3: error: \u2018ptrdiff_t\u2019 was not declared in this scope<br>\n  main.cpp:6:3: note: suggested alternatives:<br>\n  /usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h:156:28: note:   \u2018std::ptrdiff_t\u2019</br></br></br></p>\n</blockquote>\n<p>So, since <code>std::ptrdiff_t</code> is available, <code>&lt;iostream&gt;</code> must be including <code>&lt;cstddef&gt;</code> in some way (although it's not required to). But why is the global version not also available as it \nwas before? Can I not expect this injection to be consistent even when it's actually the same header? This seems like odd behaviour. Whether the injection occurs may be unspecified, but it should at least be either one way or the other, not both, right?</p>\n", "Title": "Inconsistent namespace injection for C library facilities headers", "CreationDate": "2012-09-24T23:49:49.330", "LastActivityDate": "2013-08-18T18:33:29.333", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "Id": "12574492", "Score": "1", "OwnerUserId": "150634", "Tags": "<c++><c++11><standards><header-files><c++-standard-library>", "AnswerCount": "2"}});