post_cb({"16242400": {"CommentCount": "0", "ViewCount": "961", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-04-26T17:52:08.957", "LastActivityDate": "2013-04-27T00:15:24.983", "Title": "Why can't I template overload?", "AcceptedAnswerId": "16242466", "LastEditDate": "2013-04-26T17:59:59.963", "Id": "16242400", "Score": "5", "Body": "<p>Why is it that this compiles:</p>\n<pre><code>class Testable {\npublic:\n    template &lt;bool flag&gt;\n    typename std::enable_if&lt;flag&gt;::type\n    void foo() { cout &lt;&lt; \"Yay\" &lt;&lt; endl; }\n\n    template &lt;bool flag&gt;\n    typename std::enable_if&lt;!flag&gt;::type\n    void foo() { cout &lt;&lt; \"Nay\" &lt;&lt; endl; }\n};\n</code></pre>\n<p>But not if I define both foos using default types like so:</p>\n<pre><code>    template &lt;bool flag, typename = typename std::enable_if&lt;flag&gt;::type&gt;\n    void foo() { cout &lt;&lt; \"Yay\" &lt;&lt; endl; } // (A)\n\n    template &lt;bool flag, typename = typename std::enable_if&lt;!flag&gt;::type&gt;\n    void foo() { cout &lt;&lt; \"Nay\" &lt;&lt; endl; } // (B)\n</code></pre>\n<p>I get this error (first line pointing to the definition of <code>(B)</code>, second one pointing to <code>(A)</code>):</p>\n<pre><code>error: 'template&lt;bool flag, class&gt; void Testable::foo()' cannot be overloaded\nerror: with 'template&lt;bool flag, class&gt;&gt; void Testable::foo()'\n</code></pre>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "2069064", "AnswerCount": "2"}, "16246977": {"ParentId": "16242400", "CommentCount": "0", "Body": "<p>As noted, two functions cannot have the same signature.</p>\n<p>However, I have a different fix.</p>\n<pre><code>template&lt;std::size_t&gt;\nstruct secret_enum { enum class type {}; };\ntemplate&lt;bool b, std::size_t n=0&gt;\nusing EnableIf = typename std::enable_if&lt; b, typename secret_enum&lt;n&gt;::type &gt;::type;\n\nclass Testable {\npublic:\n  template &lt;bool flag, EnableIf&lt;flag, 0&gt;...&gt;\n  void foo() { cout &lt;&lt; \"Yay\" &lt;&lt; endl; } // (A)\n\n  template &lt;bool flag, EnableIf&lt;!flag, 1&gt;...&gt;\n  void foo() { cout &lt;&lt; \"Nay\" &lt;&lt; endl; } // (B)\n};\n</code></pre>\n<p>where you enumerate your overloads with <code>0</code>, <code>1</code>, etc, which generates a possible type, which you then <code>...</code> to say \"0 or more of these\", and the types generated are basically impossible to generate <code>enum</code> instances.</p>\n<p>Sadly, this doesn't work in clang 3.2.  It does in gcc 4.8.</p>\n", "OwnerUserId": "1774667", "PostTypeId": "2", "Id": "16246977", "Score": "0", "CreationDate": "2013-04-27T00:15:24.983", "LastActivityDate": "2013-04-27T00:15:24.983"}, "bq_ids": {"n4140": {"so_16242400_16242466_0": {"section_id": 5768, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_16242400_16242466_0": {"section_id": 5541, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_16242400_16242466_0": {"section_id": 7225, "quality": 0.9285714285714286, "length": 13}}}, "16242466": {"ParentId": "16242400", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>The compiler complains because the <strong>two function templates have the same signature</strong>. Paragraph 1.3.18 of the C++11 Standard specifies what the signature of a function template is defined by:</p>\n<blockquote>\n<p id=\"so_16242400_16242466_0\"><code>&lt;function template&gt;</code> name, parameter type list (8.3.5), enclosing namespace (if any), return type, and\n  template parameter list</p>\n</blockquote>\n<p>As you can see, default template arguments are not part of the signature.</p>\n<p>You could work around this problem by changing your definition of <code>Testable</code> as follows:</p>\n<pre><code>class Testable {\npublic:\n    template &lt;bool flag, typename std::enable_if&lt;flag&gt;::type* = nullptr&gt;\n    void foo() { cout &lt;&lt; \"Yay\" &lt;&lt; endl; } // (A)\n\n    template &lt;bool flag, typename std::enable_if&lt;!flag&gt;::type* = nullptr&gt;\n    void foo() { cout &lt;&lt; \"Nay\" &lt;&lt; endl; } // (B)\n};\n</code></pre>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-04-26T18:02:59.760", "Id": "16242466", "Score": "5", "CreationDate": "2013-04-26T17:56:04.897", "LastActivityDate": "2013-04-26T18:02:59.760"}});