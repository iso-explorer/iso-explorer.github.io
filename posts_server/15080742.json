post_cb({"15080742": {"CommentCount": "4", "AcceptedAnswerId": "15080926", "ClosedDate": "2013-02-26T06:25:00.027", "CreationDate": "2013-02-26T03:15:28.340", "LastActivityDate": "2013-02-26T03:36:09.240", "PostTypeId": "1", "ViewCount": "718", "Title": "mapped null pointer value", "Id": "15080742", "Score": "0", "Body": "<p>In my code, I have a <code>std::map</code> that looks something like this:</p>\n<pre><code>std::map&lt;std::string, A*&gt; myMap;\n</code></pre>\n<p>where A is one of my custom classes.</p>\n<p>When I access a map element which does not exist via <code>operator[]</code> like so:</p>\n<pre><code>std::string s(\"hello\");\nA* pA = myMap[s];\n</code></pre>\n<p>I know that a new element will be created with that key but I would like the pointer to be initialized to NULL. In other words, if <code>myMap[s]</code> exists, a valid pointer should be returned. If not, I would like pA to be NULL after the above code executes.</p>\n<p>By default, will pA contain garbage if <code>myMap[s]</code> doesn't exit? How can I make it so that pA contains the value NULL if the element doesn't exit?</p>\n", "Tags": "<c++><map>", "OwnerUserId": "974967", "AnswerCount": "2"}, "15080926": {"ParentId": "15080742", "CommentCount": "1", "Body": "<p>Short Answer: Yes, your pointer can reliably be considered a <code>nullptr</code> on a new key lookup with no prior value.</p>\n<p>Long Answer:</p>\n<p>Per the standard:</p>\n<blockquote>\n<p id=\"so_15080742_15080926_0\"><strong>C++11 \u00a7 23.4.4.3,p5</strong></p>\n<p id=\"so_15080742_15080926_1\"><code>T&amp; operator[](key_type&amp;&amp; x);</code></p>\n<p id=\"so_15080742_15080926_2\"><em>Effects</em>: If there is no key equivalent to x in the map, inserts <code>value_type(std::move(x), T())</code> into the map.</p>\n</blockquote>\n<p>Note particularly the use of <strong><code>T()</code></strong>, where <code>T</code> in this case is your pointer type. This leads to...</p>\n<blockquote>\n<p id=\"so_15080742_15080926_3\"><strong>C++11 \u00a7 8.5,p10</strong></p>\n<p id=\"so_15080742_15080926_4\">An object whose initializer is an empty set of parentheses, i.e., <strong>()</strong>, shall be <strong>value-initialized</strong>.</p>\n</blockquote>\n<p>By the definition of <em>value initialization</em>:</p>\n<blockquote>\n<p id=\"so_15080742_15080926_5\"><strong>C++11 \u00a7 8.5,p7</strong></p>\n<p id=\"so_15080742_15080926_6\">To value-initialize an object of type T means:</p>\n<ul>\n<li><p id=\"so_15080742_15080926_7\">if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p></li>\n<li><p id=\"so_15080742_15080926_8\">if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is <strong>zero-initialized</strong> and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</p></li>\n<li><p id=\"so_15080742_15080926_9\">if T is an array type, then each element is value-initialized;</p></li>\n<li><p id=\"so_15080742_15080926_10\">otherwise, the object is <strong>zero-initialized.</strong></p></li>\n</ul>\n</blockquote>\n<p>Which brings us to what it means for your object-type to be zero-initialized:</p>\n<blockquote>\n<p id=\"so_15080742_15080926_11\"><strong>C++11 \u00a7 8.5,p5</strong></p>\n<p id=\"so_15080742_15080926_12\">To zero-initialize an object or reference of type T means:</p>\n<ul>\n<li><p id=\"so_15080742_15080926_13\"><strong>if T is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to T <sub>(103)</sub></strong></p></li>\n<li><p id=\"so_15080742_15080926_14\">if T is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</p></li>\n<li><p id=\"so_15080742_15080926_15\">if T is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zero- initialized and padding is initialized to zero bits;</p></li>\n<li><p id=\"so_15080742_15080926_16\">if T is an array type, each element is zero-initialized;</p></li>\n<li><p id=\"so_15080742_15080926_17\">if T is a reference type, no initialization is performed.</p></li>\n</ul>\n<p id=\"so_15080742_15080926_18\">103) As specified in 4.10, converting an integral constant expression whose value is 0 to a pointer type results in a <strong>null pointer value</strong>.</p>\n</blockquote>\n", "OwnerUserId": "1322972", "PostTypeId": "2", "Id": "15080926", "Score": "3", "CreationDate": "2013-02-26T03:36:09.240", "LastActivityDate": "2013-02-26T03:36:09.240"}, "bq_ids": {"n4140": {"so_15080742_15080926_4": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_15080742_15080926_8": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_15080742_15080926_17": {"section_id": 3285, "quality": 1.0, "length": 4}, "so_15080742_15080926_7": {"section_id": 3286, "quality": 0.7058823529411765, "length": 12}, "so_15080742_15080926_12": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_15080742_15080926_16": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_15080742_15080926_9": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_15080742_15080926_2": {"section_id": 1011, "quality": 0.8888888888888888, "length": 8}, "so_15080742_15080926_15": {"section_id": 3285, "quality": 0.875, "length": 14}, "so_15080742_15080926_6": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_15080742_15080926_18": {"section_id": 3285, "quality": 0.6666666666666666, "length": 10}, "so_15080742_15080926_14": {"section_id": 3285, "quality": 1.0, "length": 17}}, "n3337": {"so_15080742_15080926_4": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_15080742_15080926_8": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_15080742_15080926_17": {"section_id": 3155, "quality": 1.0, "length": 4}, "so_15080742_15080926_7": {"section_id": 3157, "quality": 0.9411764705882353, "length": 16}, "so_15080742_15080926_12": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_15080742_15080926_16": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_15080742_15080926_9": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_15080742_15080926_2": {"section_id": 996, "quality": 0.8888888888888888, "length": 8}, "so_15080742_15080926_15": {"section_id": 3155, "quality": 0.875, "length": 14}, "so_15080742_15080926_6": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_15080742_15080926_18": {"section_id": 3155, "quality": 0.8666666666666667, "length": 13}, "so_15080742_15080926_13": {"section_id": 3155, "quality": 0.9166666666666666, "length": 11}, "so_15080742_15080926_14": {"section_id": 3155, "quality": 1.0, "length": 17}}, "n4659": {"so_15080742_15080926_4": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_15080742_15080926_18": {"section_id": 4047, "quality": 0.6666666666666666, "length": 10}, "so_15080742_15080926_17": {"section_id": 4047, "quality": 1.0, "length": 4}, "so_15080742_15080926_2": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_15080742_15080926_7": {"section_id": 4049, "quality": 0.6470588235294118, "length": 11}, "so_15080742_15080926_8": {"section_id": 4049, "quality": 0.6875, "length": 11}, "so_15080742_15080926_12": {"section_id": 653, "quality": 0.8, "length": 4}, "so_15080742_15080926_16": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_15080742_15080926_9": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_15080742_15080926_14": {"section_id": 4047, "quality": 0.9411764705882353, "length": 16}, "so_15080742_15080926_15": {"section_id": 4047, "quality": 0.875, "length": 14}}}, "15080831": {"ParentId": "15080742", "CommentCount": "0", "Body": "<p>Yes new elements in map for embedded types like int or pointer are zero-initialized, so your pointer will be NULL.</p>\n", "OwnerUserId": "432358", "PostTypeId": "2", "Id": "15080831", "Score": "2", "CreationDate": "2013-02-26T03:24:56.720", "LastActivityDate": "2013-02-26T03:24:56.720"}});