post_cb({"21974678": {"CommentCount": "3", "ViewCount": "50", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-02-23T21:18:29.670", "LastActivityDate": "2014-02-23T21:27:22.353", "Title": "Conversion of default arguments not considered during overload selection?", "LastEditDate": "2017-05-23T12:28:44.600", "Id": "21974678", "Score": "3", "Body": "<p>I was trying to write a straightforward solution to this question: <a href=\"https://stackoverflow.com/q/21972652/103167\">array decay to pointer and overload resolution</a></p>\n<p>Clearly in the original, both overloads have equal conversion strength (exact match), so the non-template is preferred.  Indeed, if I change the other to a template, the call become ambiguous:</p>\n<pre><code>struct stg\n{\n    template&lt;typename T = void&gt;\n    stg(const char* const&amp; c_str, T* = 0);\n\n    template&lt;int N&gt;\n    stg(const char (&amp;str) [N]);\n};\n</code></pre>\n<p>So I wanted to introduce a user-defined conversion, which would be strictly worse than the exact match of the second overload.</p>\n<pre><code>struct stg\n{\n    template&lt;typename&gt; struct cvt { operator int() { return 0;} };\n\n    template&lt;typename T = void&gt;\n    stg(const char* const&amp; c_str, int = cvt&lt;T&gt;());\n\n    template&lt;int N&gt;\n    stg(const char (&amp;str) [N]);\n};\n</code></pre>\n<p>But <a href=\"http://ideone.com/XaPCMQ\" rel=\"nofollow noreferrer\">g++ says this is still ambiguous</a>.  Why does the user-defined conversion in the default argument not affect overload ranking?</p>\n", "Tags": "<c++><type-conversion><language-lawyer><overload-resolution><default-arguments>", "OwnerUserId": "103167", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_21974678_21974770_2": {"section_id": 601, "quality": 0.8695652173913043, "length": 20}, "so_21974678_21974770_1": {"section_id": 601, "quality": 1.0, "length": 10}, "so_21974678_21974770_0": {"section_id": 601, "quality": 1.0, "length": 12}, "so_21974678_21974770_3": {"section_id": 601, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_21974678_21974770_2": {"section_id": 591, "quality": 0.8695652173913043, "length": 20}, "so_21974678_21974770_1": {"section_id": 591, "quality": 1.0, "length": 10}, "so_21974678_21974770_0": {"section_id": 591, "quality": 1.0, "length": 12}, "so_21974678_21974770_3": {"section_id": 591, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_21974678_21974770_2": {"section_id": 627, "quality": 0.8695652173913043, "length": 20}, "so_21974678_21974770_0": {"section_id": 627, "quality": 1.0, "length": 12}, "so_21974678_21974770_1": {"section_id": 627, "quality": 1.0, "length": 10}, "so_21974678_21974770_3": {"section_id": 627, "quality": 0.8695652173913043, "length": 20}}}, "21974770": {"ParentId": "21974678", "CommentCount": "2", "Body": "<p>[over.match.viable]/2 (from &gt;n3797, github 5f7cb4)</p>\n<blockquote>\n<p id=\"so_21974678_21974770_0\">First, to be a viable function, a candidate function shall have enough\n  parameters to agree in number with the arguments in the list.</p>\n<ul>\n<li><p id=\"so_21974678_21974770_1\">If there are <em>m</em> arguments in the list, all candidate functions having\n  exactly <em>m</em> parameters are viable.</p></li>\n<li><p id=\"so_21974678_21974770_2\">A candidate function having fewer\n  than <em>m</em> parameters is viable only if it has an ellipsis in its\n  parameter list (8.3.5). For the purposes of overload resolution, any\n  argument for which there is no corresponding parameter is considered\n  to \u201cmatch the ellipsis\u201d (13.3.3.1.3).</p></li>\n<li><p id=\"so_21974678_21974770_3\">A candidate function having more than <em>m</em> parameters is viable only if the <em>(m+1)</em>-st parameter has a\n  default argument (8.3.6). <strong>For the purposes of overload resolution, the parameter list is truncated on the right, so that there are exactly <em>m</em> parameters.</strong></p></li>\n</ul>\n</blockquote>\n<p>[emphasis mine]</p>\n", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "21974770", "Score": "4", "CreationDate": "2014-02-23T21:27:06.230", "LastActivityDate": "2014-02-23T21:27:06.230"}});