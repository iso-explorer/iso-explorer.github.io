post_cb({"18242603": {"CommentCount": "0", "ViewCount": "64", "PostTypeId": "1", "LastEditorUserId": "1690864", "CreationDate": "2013-08-14T21:25:37.740", "LastActivityDate": "2013-08-14T22:28:15.097", "Title": "Should name lookup \"in the class of the object expression\" find members of that class?", "AcceptedAnswerId": "18242775", "LastEditDate": "2013-08-14T22:28:15.097", "Id": "18242603", "Score": "1", "Body": "<p>gcc accepts the following code, while clang rejects it.</p>\n<pre><code>struct S\n{\n    struct Type\n    {\n    };\n    operator Type()\n    {\n        return Type();\n    }\n};\nvoid f(S&amp; s)\n{\n    s.operator Type(); // error: unknown type name 'Type'\n}\n</code></pre>\n<p>The standard says <code>Type</code> is \"looked up in the class of the object expression\" <code>S</code>. It seems gcc includes the members of <code>S</code> in the search, while clang <strike>considers only <code>S</code> and its base classes</strike> doesn't. Which is correct?</p>\n<p>Relevant quote from C++ Working Draft N3337:</p>\n<blockquote>\n<h3>3.4.5 Class member access [basic.lookup.classref]/7</h3>\n<p id=\"so_18242603_18242603_0\">If the id-expression is a conversion-function-id, its conversion-type-id is <strong>first looked up in the class of the\n  object expression</strong> and the name, if found, is used. Otherwise it is looked up in the context of the entire\n  postfix-expression.</p>\n</blockquote>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "1690864", "AnswerCount": "1"}, "18242775": {"ParentId": "18242603", "CommentCount": "4", "Body": "<p>In this particular case gcc is right. The lookup rule dictates that lookup for <code>Type</code> should be performed first in the context of the type of the object then in the context of where the expression is used. The standard even provides an example, that although not exact is similar to yours:</p>\n<pre><code>struct A { };\nnamespace N {\n  struct A {\n    void g() { }\n    template &lt;class T&gt; operator T();\n  };\n}\nint main() {\n   N::A a;\n   a.operator A(); // calls N::A::operator N::A\n}\n</code></pre>\n<p>Lookup starts inside <code>::N::A</code> where it finds the injected name <code>A</code> and resolves it to be <code>::N::A</code>.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "18242775", "Score": "1", "CreationDate": "2013-08-14T21:39:30.953", "LastActivityDate": "2013-08-14T21:39:30.953"}, "bq_ids": {"n4140": {"so_18242603_18242603_0": {"section_id": 7132, "quality": 1.0, "length": 16}}, "n3337": {"so_18242603_18242603_0": {"section_id": 6876, "quality": 1.0, "length": 16}}, "n4659": {"so_18242603_18242603_0": {"section_id": 8633, "quality": 1.0, "length": 16}}}});