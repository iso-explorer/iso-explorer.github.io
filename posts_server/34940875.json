post_cb({"34941816": {"Id": "34941816", "PostTypeId": "2", "Body": "<p>The first one is not right. The compiler is just buggy and failed to diagnose it. <a href=\"http://eel.is/c++draft/temp.param#11\">[temp.param]/11</a>:</p>\n<blockquote>\n<p id=\"so_34940875_34941816_0\">A template parameter pack of a function template shall not be followed\n  by another template parameter unless that template parameter can be\n  deduced from the <em>parameter-type-list</em> of the function template or has a\n  default argument (14.8.2).</p>\n</blockquote>\n<hr>\n<p>If the function type <code>T(Args...)</code> is meaningful to the end-user, one way to fix this would be to use a partial specialization instead:</p>\n<pre><code>template&lt;class F, class Alloc&gt; class C; //undefined\ntemplate&lt;class T, class... Args, class Alloc&gt;\nclass C&lt;T(Args...), Alloc&gt; {\n    // implementation\n};\n</code></pre>\n<p>Depending on the actual requirements, type-erasing the allocator might also be worth considering.</p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2016-01-23T10:25:52.390", "Score": "11", "CreationDate": "2016-01-22T08:05:57.457", "ParentId": "34940875", "CommentCount": "4", "LastEditDate": "2016-01-23T10:25:52.390", "OwnerUserId": "2756719"}, "bq_ids": {"n4140": {"so_34940875_34940875_0": {"length": 5, "quality": 0.625, "section_id": 124}, "so_34940875_34941417_0": {"length": 11, "quality": 1.0, "section_id": 64}, "so_34940875_34941816_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 64}}, "n3337": {"so_34940875_34940875_0": {"length": 5, "quality": 0.625, "section_id": 4515}, "so_34940875_34941417_0": {"length": 11, "quality": 1.0, "section_id": 59}, "so_34940875_34941816_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 59}}, "n4659": {"so_34940875_34940875_0": {"length": 5, "quality": 0.625, "section_id": 128}, "so_34940875_34941417_0": {"length": 11, "quality": 1.0, "section_id": 66}, "so_34940875_34941816_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 66}}}, "34940875": {"ViewCount": "1988", "Body": "<p>I don't get the reason for which a parameter pack must be at the end of the parameter list if the latter is bound to a class, while the constraint is relaxed if the parameter list is part of a member method declaration.</p>\n<p>In other terms, this one compiles:</p>\n<pre><code>class C {\n    template&lt;typename T, typename... Args, typename S&gt;\n    void fn() { }\n};\n</code></pre>\n<p>The following one does not:</p>\n<pre><code>template&lt;typename T, typename... Args, typename S&gt;\nclass C { };\n</code></pre>\n<p>Why is the first case considered right and the second one is not?<br/>\nI mean, if it's legal syntax, shouldn't it be in both the cases?</p>\n<p>To be clear, the real problem is that I was defining a class similar to the following one:</p>\n<pre><code>template&lt;typename T, typename... Args, typename Allocator&gt;\nclass C { };\n</code></pre>\n<p>Having the allocator type as the last type would be appreciated, but I can work around it somehow (anyway, if you have a suggestion it's appreciated, maybe yours are far more elegant than mine!!).<br/>\nThat said, I got the error:</p>\n<blockquote>\n<p id=\"so_34940875_34940875_0\">parameter pack 'Args' must be at the end of the template parameter list</p>\n</blockquote>\n<p>So, I was just curious to fully understand why it's accepted in some cases, but it is not in some others.</p>\n<p><a href=\"https://stackoverflow.com/questions/13867429/why-am-i-getting-the-error-parameter-pack-f-must-be-at-the-end-of-the-templat\">Here</a> is a similar question, but it simply explains how to solve the problem and that was quite clear to me.</p>\n", "AcceptedAnswerId": "34941417", "Title": "Parameter pack must be at the end of the parameter list... When and why?", "CreationDate": "2016-01-22T07:04:49.150", "Id": "34940875", "CommentCount": "3", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:01:46.163", "LastEditorUserId": "-1", "LastActivityDate": "2016-02-02T01:43:05.153", "Score": "21", "OwnerUserId": "4987285", "Tags": "<c++><templates><c++11><variadic-templates>", "AnswerCount": "2"}, "34941417": {"Id": "34941417", "PostTypeId": "2", "Body": "<p>It is valid for function templates but only when argument deduction can help the compiler resolve the template parameters, as it stands your function template example is virtually useless because</p>\n<pre><code>template&lt;typename T, typename... Args, typename S&gt; void fn() { }\nint main() { fn&lt;int, int, int&gt;(); }\n</code></pre>\n<pre><code>test.cpp: In function 'int main()':\ntest.cpp:2:32: error: no matching function for call to 'fn()'\n int main() { fn&lt;int, int, int&gt;(); }\n                                ^\ntest.cpp:1:57: note: candidate: template&lt;class T, class ... Args, class S&gt; void fn()\n template&lt;typename T, typename... Args, typename S&gt; void fn() { }\n                                                         ^\ntest.cpp:1:57: note:   template argument deduction/substitution failed:\ntest.cpp:2:32: note:   couldn't deduce template parameter 'S'\n int main() { fn&lt;int, int, int&gt;(); }\n</code></pre>\n<p>the compiler has no way of determining which template parameters belong to the parameter pack, and which to <code>S</code>. In fact as @T.C. points out it should actually be a syntax error because a function template defined in this manner cannot ever be instantiated.</p>\n<p>A more useful function template would be something like</p>\n<pre><code>template&lt;typename T, typename... Args, typename S&gt; void fn(S s) { }\n</code></pre>\n<p>as now the compiler is able to unambiguously match the function parameter <code>s</code> with the template type <code>S</code>, with the side effect that <code>S</code> will <em>always</em> be deduced - all explicit template parameters after the first will belong to <code>Args</code>.</p>\n<p>None of this works for (primary) class templates, parameters aren't deduced and it's expressly forbidden:</p>\n<p>From draft n4567</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf</a></p>\n<p>[temp.param] / 11</p>\n<blockquote>\n<p id=\"so_34940875_34941417_0\">[...]If a <em>template-parameter</em> of a primary class template or alias\n  template is a template parameter pack, it shall be the last\n  <em>template-parameter</em>.[...]</p>\n</blockquote>\n<p>(if they were deduced it would be ambiguous as in the function template example).</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2016-02-02T01:43:05.153", "Score": "16", "CreationDate": "2016-01-22T07:40:07.670", "ParentId": "34940875", "CommentCount": "18", "LastEditDate": "2016-02-02T01:43:05.153", "OwnerUserId": "657267"}});