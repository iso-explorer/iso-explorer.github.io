post_cb({"11931452": {"CommentCount": "0", "AcceptedAnswerId": "11932088", "PostTypeId": "1", "ClosedDate": "2012-08-15T08:43:13.297", "LastEditorUserId": "-1", "CreationDate": "2012-08-13T09:26:19.553", "LastActivityDate": "2012-08-13T10:05:06.930", "LastEditDate": "2017-05-23T10:34:39.107", "ViewCount": "451", "FavoriteCount": "2", "Title": "Why aren't template type parameters inferred as 'const'?", "Id": "11931452", "Score": "7", "Body": "<blockquote>\n<p id=\"so_11931452_11931452_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6075093/deducing-references-to-const-from-rvalue-arguments\">deducing references to const from rvalue arguments</a> </br></p>\n</blockquote>\n<p>If I have</p>\n<pre><code>template&lt;class T&gt;\nvoid foo(T &amp;) { }\n</code></pre>\n<p>and I call it as <code>foo((const int)5)</code>, given that the argument is a <code>const int</code>, why doesn't the compiler automatically infer <code>T</code> to be <code>const int</code>?</p>\n", "Tags": "<c++><templates><const><type-parameter>", "OwnerUserId": "541686", "AnswerCount": "2"}, "11932088": {"ParentId": "11931452", "CommentCount": "6", "Body": "<p>It does, if it's given a const type.  Rvalues (prvalues in C++11) with\nnon-class types, however, are never cv-qualified, even if you try to say\nthey are: the expression <code>((const int)5)</code> has type <code>int</code>.  The reasoning\nhere is that cv-qualifications only apply to objects, and temporaries of\nnon-class types aren't objects, but pure values; cv-qualifications can't\napply, because there's nothing to be <code>const</code> or <code>volatile</code>. </p>\n<p>If you write:</p>\n<pre><code>int const i = 42;\nfoo( i );\n</code></pre>\n<p>, your template will instantiate with <code>T = int const</code>.  (As you\nwrote it, the code shouldn't compile, because the deduced type\nis <code>int</code>, so the function takes an <code>int&amp;</code>, which can't be\ninitialized with an rvalue.)</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "11932088", "Score": "6", "CreationDate": "2012-08-13T10:05:06.930", "LastActivityDate": "2012-08-13T10:05:06.930"}, "11931607": {"ParentId": "11931452", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>The type of an integer literal is <code>int</code>, not <code>const int</code>, according to C++03 Standard, clause 2.12.1.2.</p>\n<blockquote>\n<p id=\"so_11931452_11931607_0\">The type of an integer literal depends on its form, value, and suffix.\n  If it is decimal and has no suffix, it has the first of these types in\n  which its value can be represented: int, long  int;...</p>\n</blockquote>\n<p><strong>Update</strong></p>\n<p>Another relevant type deduction rule might be 14.8.2.1.2.</p>\n<blockquote>\n<p id=\"so_11931452_11931607_1\">If P is not a reference type:</p>\n<p id=\"so_11931452_11931607_2\">[...]</p>\n<p id=\"so_11931452_11931607_3\">\u2014 If A is a cv-qualified type, the top level cv-qualifiers of A\u2019s type\n  are ignored for type deduction.</p>\n<p id=\"so_11931452_11931607_4\">If P is a cv-qualified type, the top level cv-qualifiers of P\u2019s type\n  are ignored for type deduction. </p>\n<p id=\"so_11931452_11931607_5\">If P is a reference type, the type referred to by P is used for type\n  deduction.</p>\n</blockquote>\n<p>The code provided by OP wouldn't even compile because it's illegal to bind a non-const reference to rvalue.</p>\n", "OwnerUserId": "1345960", "LastEditorUserId": "1345960", "LastEditDate": "2012-08-13T09:50:54.350", "Id": "11931607", "Score": "8", "CreationDate": "2012-08-13T09:36:46.030", "LastActivityDate": "2012-08-13T09:50:54.350"}, "bq_ids": {"n4140": {"so_11931452_11931607_4": {"section_id": 303, "quality": 1.0, "length": 9}, "so_11931452_11931607_5": {"section_id": 304, "quality": 1.0, "length": 6}, "so_11931452_11931607_3": {"section_id": 303, "quality": 1.0, "length": 9}, "so_11931452_11931607_0": {"section_id": 5341, "quality": 0.55, "length": 11}}, "n3337": {"so_11931452_11931607_4": {"section_id": 294, "quality": 1.0, "length": 9}, "so_11931452_11931607_5": {"section_id": 295, "quality": 1.0, "length": 6}, "so_11931452_11931607_3": {"section_id": 294, "quality": 1.0, "length": 9}, "so_11931452_11931607_0": {"section_id": 5138, "quality": 0.55, "length": 11}}, "n4659": {"so_11931452_11931607_5": {"section_id": 311, "quality": 1.0, "length": 6}, "so_11931452_11931607_0": {"section_id": 6762, "quality": 0.55, "length": 11}, "so_11931452_11931607_4": {"section_id": 310, "quality": 0.7777777777777778, "length": 7}, "so_11931452_11931607_3": {"section_id": 310, "quality": 0.7777777777777778, "length": 7}}}});