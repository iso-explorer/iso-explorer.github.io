post_cb({"26972373": {"ViewCount": "1843", "Body": "<pre><code>const char * foo()\n{\n    return \"abcdef\";\n}\n\nint main()\n{\n    printf(\"%s\", foo());\n}\n</code></pre>\n<p>Can a conforming compiler decide to allocate <code>\"abcdef\"</code> on the stack? I.e. what in the standard forces the compiler to allocate it in the <code>.data</code> section?</p>\n", "AcceptedAnswerId": "26972528", "Title": "Can a const static string be allocated on the stack?", "CreationDate": "2014-11-17T12:07:01.067", "Id": "26972373", "CommentCount": "16", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-11-17T12:35:57.203", "LastEditorUserId": "3747990", "LastActivityDate": "2014-11-23T19:25:58.167", "Score": "21", "OwnerUserId": "748175", "Tags": "<c++><c><memory>", "AnswerCount": "5"}, "26972662": {"Id": "26972662", "PostTypeId": "2", "Body": "<p>Previous answers have already quoted from the standard, so I'll go with the logical approach instead.</p>\n<p>You can <strong>copy</strong> this literal string from the RO-data section into the stack <strong>every time</strong> the function is called:</p>\n<pre><code>const char* foo()\n{\n    const char str[] = \"abcdef\";\n    return str;\n}\n</code></pre>\n<p>But this function returns a pointer.</p>\n<p>And you most certainly <strong>do not</strong> want this pointer to contain an address in the stack.</p>\n<p>So it makes no sense to have that literal string allocated on the stack to begin with.</p>\n", "LastEditorUserId": "1382251", "LastActivityDate": "2014-11-17T12:46:28.037", "Score": "3", "CreationDate": "2014-11-17T12:24:13.480", "ParentId": "26972373", "CommentCount": "5", "OwnerUserId": "1382251", "LastEditDate": "2014-11-17T12:46:28.037"}, "26972500": {"Id": "26972500", "PostTypeId": "2", "Body": "<p>Referring to N1570 (C11 draft) <code>6.4.5/6</code> <em>String literals</em> (emphasis mine going forward):</p>\n<blockquote>\n<p id=\"so_26972373_26972500_0\">In translation phase 7, a byte or code of value zero is appended to each multibyte\n  character sequence that results from a string literal or literals.<sup>78)</sup>\n  The multibyte character sequence is then used to initialize an array\n  of <strong>static storage duration</strong> and length just sufficient to contain the\n  sequence. For character string literals, the array elements have type\n  <code>char</code>, and are initialized with the individual bytes of the multibyte\n  character sequence.</p>\n</blockquote>\n<p>This means that string literals have lifetime of whole execution of program, as mentioned in <code>6.2.4/3</code> <em>Storage durations of objects</em>:</p>\n<blockquote>\n<p id=\"so_26972373_26972500_1\">An object whose identifier is declared without the storage-class\n  specifier <code>_Thread_local</code>, and either with external or internal linkage or with the storage-class specifier <code>static</code>, has <em>static storage duration</em>. Its\n  lifetime is the <strong>entire execution</strong> of the program and its stored value\n  is initialized only once, <strong>prior to program startup</strong>.</p>\n</blockquote>\n<p>It's unlikely that compiler places them on stack, due to its nature (hint: preservation between functions' calls).</p>\n<p>Note that C Standard does not explicitely forbid to place string literals on the stack. In fact it does not even define such term as stack nor <code>.data</code> section. It's up to compiler, to choose whatever data placement, that is conformant with the Standard.</p>\n", "LastEditorUserId": "586873", "LastActivityDate": "2014-11-17T13:31:40.553", "Score": "6", "CreationDate": "2014-11-17T12:13:59.660", "ParentId": "26972373", "CommentCount": "0", "OwnerUserId": "586873", "LastEditDate": "2014-11-17T13:31:40.553"}, "26980280": {"Id": "26980280", "PostTypeId": "2", "Body": "<p>Everything of static duration must remain allocated until the program exits; it would be possible for such things to be located on the stack, but <em>only if they are allocated before any user code is executed</em>.  Such a design would be unusual, but might be advantageous in e.g. a plug-in architecture where it was desired to have several threads run a plug-in simultaneously and have every thread's instance behave completely independently.  If the architecture would have all instances of a plug-in share the same static data, then at least from the standpoint of the plug-in architecture, data which shouldn't be shared shouldn't be static.  While it might arguably be better to have each instance store its static data in a block of space requested from the heap, that would necessitate having each instance free up that block of space when it was done.  Having each plug-in instance allocate all its data on its stack (including a suitable-sized <code>char[]</code> that which would be subdivided to satisfy <code>malloc()</code> or <code>new</code> requests) prior to running user code would ensure that killing the thread associated with an instance would free up the storage associated with it.</p>\n", "LastActivityDate": "2014-11-17T19:21:21.887", "CommentCount": "2", "CreationDate": "2014-11-17T19:21:21.887", "ParentId": "26972373", "Score": "3", "OwnerUserId": "363751"}, "26972528": {"Id": "26972528", "PostTypeId": "2", "Body": "<p>From the C++ specification \u00a7 2.14.5/8 for string literals;</p>\n<blockquote>\n<p id=\"so_26972373_26972528_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of <em>n</em> <code>const char</code>\u201d, where <em>n</em> is the size of the string as defined below, and has <strong>static storage duration</strong> (3.7).</p>\n</blockquote>\n<p>It is also worthwhile mentioning this, <em>static storage duration</em>, applies to <em>all the string literals</em>; hence <code>L\"\"</code>, <code>u\"\"</code>, <code>U\"\"</code> etc; \u00a7 2.14.5/10-12.</p>\n<p>In turn, for the static storage duration \u00a7 3.7.1/1;</p>\n<blockquote>\n<p id=\"so_26972373_26972528_1\">All variables which do not have dynamic storage duration, do not have thread storage duration, and are not local have static storage duration. The storage for these entities <strong>shall last for the duration of the program</strong> (3.6.2, 3.6.3).</p>\n</blockquote>\n<p>Hence, your string <code>\"abcdef\"</code> shall exist for the duration of the program. The compiler can choose where to store it (and this may be a system constraint), but it must remain valid.</p>\n<p>For the C language specification (C11 draft n1570), string literals \u00a7 6.4.5/6;</p>\n<blockquote>\n<p id=\"so_26972373_26972528_2\">In translation phase 7, a byte or code of value zero is appended to each multibyte character sequence that results from a string literal or literals. The multibyte character sequence is then used to initialize an <strong>array of static storage duration</strong> and length just sufficient to contain the sequence. For character string literals, the array elements have type <code>char</code>, and are initialized with the individual bytes of the multibyte character sequence.</p>\n</blockquote>\n<p>And the static storage duration \u00a7 6.2.4/3;</p>\n<blockquote>\n<p id=\"so_26972373_26972528_3\">An object whose identifier is declared without the storage-class specifier <code>_Thread_local</code>, and either with external or internal linkage or with the storage-class specifier static, has static storage duration. <strong>Its lifetime is the entire execution of the program</strong> and its stored value is initialized only once, prior to program startup.</p>\n</blockquote>\n<p>The same rationale for the location applies (it will most likely be a system constraint), but must remain valid for the duration of the program.</p>\n", "LastEditorUserId": "3747990", "LastActivityDate": "2014-11-23T19:25:58.167", "Score": "25", "CreationDate": "2014-11-17T12:15:28.757", "ParentId": "26972373", "CommentCount": "2", "OwnerUserId": "3747990", "LastEditDate": "2014-11-23T19:25:58.167"}, "bq_ids": {"n4140": {"so_26972373_26972528_0": {"length": 26, "quality": 1.0, "section_id": 5356}, "so_26972373_26972528_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 7164}, "so_26972373_26972496_1": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_26972373_26972528_0": {"length": 26, "quality": 1.0, "section_id": 5153}, "so_26972373_26972528_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 6908}, "so_26972373_26972496_1": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_26972373_26972528_0": {"length": 26, "quality": 1.0, "section_id": 6781}, "so_26972373_26972528_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 8672}, "so_26972373_26972496_1": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "26972496": {"Id": "26972496", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_26972373_26972496_0\">what in the standard forces the compiler to allocate it on the .data\n  section?</p>\n</blockquote>\n<p>Nothing. But it can certainly not be on the stack, since pointers to a string literal must never be invalidated (as the literal has static storage duration<sup>1</sup>), and values on the stack get overwritten by other frames at some point. And objects with static storage duration usually lie on a section dedicated to that - the <code>.data</code> section.</p>\n<p>Under the as-if rule, he could put it on the stack if the observable behavior of the program doesn't change; That is very unlikely to happen though, since that wouldn't benefit the performance of the program in any way (and nonsensical relevant compilers are yet to be written).</p>\n<hr>\n<p><sup>1)</sup> [lex.string]/8:</p>\n<blockquote>\n<p id=\"so_26972373_26972496_1\">Ordinary string literals and UTF-8 string literals are also referred\n  to as narrow string literals. A narrow string literal has type \u201carray\n  of <em>n</em> <code>const char</code>\u201d, where <em>n</em> is the size of the string as defined below,\n  and <strong>has static storage duration</strong> (3.7).</p>\n</blockquote>\n</hr>", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-17T12:19:12.567", "Score": "6", "CreationDate": "2014-11-17T12:13:48.560", "ParentId": "26972373", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-11-17T12:19:12.567"}});