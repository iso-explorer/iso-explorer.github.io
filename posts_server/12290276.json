post_cb({"12290383": {"Id": "12290383", "PostTypeId": "2", "Body": "<p>The short of it is, you can't use a custom <code>class</code>, because the short string optimization may use a <code>union</code>.</p>\n<p>However, you can use an <code>enum</code> type.</p>\n<p>It's quite a bit of work to do properly, and you do need to implement <code>std::char_traits</code> for your type.</p>\n", "LastActivityDate": "2012-09-05T21:58:19.610", "CommentCount": "1", "CreationDate": "2012-09-05T21:58:19.610", "ParentId": "12290276", "Score": "2", "OwnerUserId": "464581"}, "bq_ids": {"n4140": {"so_12290276_12290372_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 1526}}, "n3337": {"so_12290276_12290372_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 1520}}, "n4659": {"so_12290276_12290372_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 1676}}}, "12290372": {"Id": "12290372", "PostTypeId": "2", "Body": "<p>From right the very first sentence of the description of the strings library <code>[strings.general]/1</code>:</p>\n<blockquote>\n<p id=\"so_12290276_12290372_0\">This Clause describes components for manipulating sequences of any non-array POD type. In this Clause such types are called char-like types, and objects of char-like types are called char-like objects or simply characters.</p>\n</blockquote>\n<p><code>CustomClass</code> is not a <code>char-like</code> type because it is not a POD type, and as a result it cannot be stored in a <code>basic_string</code>.</p>\n<p>The <code>libc++</code> implementation is failing to compile because it uses the short-string optimisation, and in doing so assumes that it is possible hold an array of <code>CharT</code> in a union without supplying a custom constructor.</p>\n", "LastActivityDate": "2012-09-05T21:57:41.863", "CommentCount": "1", "CreationDate": "2012-09-05T21:57:41.863", "ParentId": "12290276", "Score": "4", "OwnerUserId": "485561"}, "12290367": {"Id": "12290367", "PostTypeId": "2", "Body": "<p>As you said, the error message says</p>\n<pre><code>Call to implicitly-deleted default constructor of 'std::__1::basic_string, std::__1::allocator &gt;::__rep'\n</code></pre>\n<p>I'm pretty sure that <code>__rep</code> here is your <code>CustomClass</code>. It's saying it's trying to call the default constructor, but that's been implicitly deleted (by you providing your own constructor). I'm guessing that <code>basic_string</code> uses <code>std::is_default_constructible&lt;&gt;</code>. As such, you need to provide a default constructor using</p>\n<pre><code>CustomClass() = default;\n</code></pre>\n<p>as Mooing Duck suggested in the comments.</p>\n<p>It seems likely that it actually uses <code>std::is_trivially_default_constructible&lt;&gt;</code>, which imposes the restriction that your class must be trivially constructible as well.</p>\n", "LastActivityDate": "2012-09-05T21:57:22.420", "CommentCount": "10", "CreationDate": "2012-09-05T21:57:22.420", "ParentId": "12290276", "Score": "2", "OwnerUserId": "582"}, "12290276": {"ViewCount": "347", "Body": "<p>Ok, I'm usually all right at being able to read, understand and fix compiler errors. But with this one, I think I need help.</p>\n<p>I want to have a <code>std::basic_string&lt;CustomClass&gt;</code> where <code>CustomClass</code> is a class. I don't want to write custom char_traits and allocator classes for it, unless absolutely necessary (i.e. I want to use <code>std::char_traits&lt;CustomClass&gt;</code> and <code>std::allocator&lt;CustomClass&gt;</code> if possible).</p>\n<p>It compiles fine if I have no constructors in CustomClass. As soon as I add one, there are errors:</p>\n<p>Call to implicitly-deleted default constructor of <code>'std::__1::basic_string&lt;CustomClass, std::__1::char_traits&lt;CustomClass&gt;, std::__1::allocator&lt;CustomClass&gt; &gt;::__rep'</code></p>\n<pre><code>    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n    //#include &lt;vector&gt;\n\n    class CustomClass;\n\n    typedef std::basic_string&lt;CustomClass&gt; InstanceString;\n    typedef std::basic_string&lt;int&gt; IntString;\n\n    class CustomClass\n    {\n    public:\n        CustomClass()\n            : m_X()\n        {\n        }\n\n        CustomClass(const int x)\n            : m_X(x)\n        {\n        }\n\n    private:\n        int     m_X;\n    };\n\n    int main(int argc, const char * argv[])\n    {\n        // This compiles fine\n        IntString s1({1, 2, 5});\n\n        // This would compile fine if there were no explicit constructors in Instance\n        //InstanceString s2e = InstanceString({Instance(), Instance(), Instance()});\n\n        // This generates errors\n        InstanceString s2 = InstanceString({CustomClass(1), CustomClass(3), CustomClass(5)});\n\n        std::cout &lt;&lt; \"Hello, World!\\n\";\n        return 0;\n    }\n</code></pre>\n<p>I understand this probably has to do with implicit/explicit constructors, copy/move semantics and stuff like that.</p>\n<p>My question is:</p>\n<ul>\n<li>how do I get it to compile (i.e. what constructors/something should I add to the class)</li>\n<li>and how do I systematically figure out how to fix these types of compilation errors?</li>\n</ul>\n", "AcceptedAnswerId": "12290367", "Title": "How to get `std::basic_string<CustomClass>` to compile?", "CreationDate": "2012-09-05T21:48:47.730", "Id": "12290276", "CommentCount": "13", "LastEditDate": "2012-09-06T01:50:52.770", "PostTypeId": "1", "LastEditorUserId": "636019", "LastActivityDate": "2012-09-06T01:50:52.770", "Score": "0", "OwnerUserId": "622447", "Tags": "<c++><string><c++11><std><stdstring>", "AnswerCount": "3"}});