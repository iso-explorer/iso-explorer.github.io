post_cb({"5770757": {"ParentId": "5770634", "CommentCount": "3", "Body": "<p>Yes, copy elision is possible/allowed in both cases.</p>\n<p>In compiler terminology, the two cases are slightly different though. <code>return {\"House\", \"Horse\", \"Hen\"};</code> constructs an unnamed object, so regular RVO kicks in.</p>\n<p><code>return res;</code> is slightly more complex, because you are returning a named object which was already constructed earlier. This optimization is typically called NRVO (Named Return Value Optimization), and it is slightly less common for compilers to implement it.</p>\n<p>MSVC always implements RVO, and performs NRVO in release builds.</p>\n<p>I believe recent versions of GCC always perform both RVO and NRVO.</p>\n<p>By the way, I don't really see why your \u00b4if` would make a difference for RVO.</p>\n", "OwnerUserId": "33213", "PostTypeId": "2", "Id": "5770757", "Score": "3", "CreationDate": "2011-04-24T13:29:51.780", "LastActivityDate": "2011-04-24T13:29:51.780"}, "5770763": {"ParentId": "5770634", "CommentCount": "1", "Body": "<p>Yes, the compiler has specific instructions to treat <code>res</code> like an rvalue in this context, and <code>res</code> will be moved into <code>data</code>. Of course, the compiler could easily apply RVO/NRVO here anyway because it can statically determine that you never call the function with <code>nullptr</code>, and in addition, the function could be trivially transformed so that RVO/NRVO can be applied even if that couldn't be proven, and finally, that doesn't even prevent RVO/NRVO as the result can still be constructed in.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "5770763", "Score": "0", "CreationDate": "2011-04-24T13:30:43.120", "LastActivityDate": "2011-04-24T13:30:43.120"}, "bq_ids": {"n4140": {"so_5770634_5770634_0": {"section_id": 480, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_5770634_5770634_0": {"section_id": 471, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_5770634_5770634_0": {"section_id": 502, "quality": 0.9523809523809523, "length": 20}}}, "5770634": {"CommentCount": "0", "ViewCount": "333", "PostTypeId": "1", "LastEditorUserId": "701092", "CreationDate": "2011-04-24T13:03:13.220", "LastActivityDate": "2013-05-08T01:11:27.420", "Title": "Copy-elision of automatic variable for return", "AcceptedAnswerId": "5770757", "LastEditDate": "2013-05-08T01:11:27.420", "Id": "5770634", "Score": "4", "Body": "<p>I am wondering if in C++0x <em>\"12.8 Copying and Moving class objects [class.copy] paragraph 31\"</em> when <em>copy elision</em> happens, exactly:</p>\n<blockquote>\n<p id=\"so_5770634_5770634_0\">When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class object [...]. This elision of copy/move\n  operations, called copy elision, is permitted in the following circumstances [...]:</p>\n<ul>\n<li>in a return statement in a function with a class return type, when the expression is the name of a non-volatile automatic object [...] with the same cv-unqualified type as the function return type, the copy/move operation can be omitted by constructing\n  the automatic object directly into the function\u2019s return value</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>And now I wonder, if this allows in the following code to <strong>elude copy</strong></p>\n<pre><code>vector&lt;string&gt; gen(const char *fn) {\n    if(fn == nullptr)  // this should prevent RVO\n        return {\"House\", \"Horse\", \"Hen\"};\n    vector&lt;string&gt; res;\n    fillFromFile(res, fn);\n    return res;  // copy elision possible?\n}\nint main() {\n    vector&lt;string&gt; data = gen(\"users.dat\");\n}\n</code></pre>\n<p>Or does that rule <em>not</em> fot the example, and I have to do it explicit?</p>\n<pre><code>    return move(res);  // explicitly prevent copy\n</code></pre>\n<p>Note that my intention of the <code>if</code> was to eliminate the obvious <em>Return Value Optimization</em> (RVO).</p>\n<p>Or am I completely on the wrong track here? There was a change involving <code>return</code> and <em>move</em> that could use <em>rvalue references</em>, right?</p>\n", "Tags": "<c++><c++11><rvalue-reference><return-value-optimization><copy-elision>", "OwnerUserId": "472245", "AnswerCount": "2"}});