post_cb({"31683702": {"ParentId": "31683519", "CommentCount": "7", "CreationDate": "2015-07-28T17:52:59.417", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "31683702", "Score": "2", "Body": "<p>The reason it's ill-formed is because making it ill-formed allows implementations to reject <code>constexpr</code> function definitions that cannot possibly form constant expressions. Rejecting them early means getting more useful diagnostics.</p>\n<p>The reason no diagnostic is required is because it may be unrealistic for an implementation to determine that for each and every possible combination of arguments, the result is not a constant expression.</p>\n<p>The fact that ill-formed, no diagnostic required, effectively means the same thing as making the behaviour undefined seems to me as if it's unfortunate, but merely picked for lack of a better option. I'd be highly surprised if the intent would actually be to allow any arbitrary run-time behaviour, but there is no concept of \"may be diagnosed as an error, but if not, must behave as specified\" for any language feature in C++.</p>\n", "LastActivityDate": "2015-07-28T17:52:59.417"}, "31683519": {"CommentCount": "3", "ViewCount": "52", "PostTypeId": "1", "LastEditorUserId": "1272610", "CreationDate": "2015-07-28T17:43:41.563", "LastActivityDate": "2015-07-28T18:55:28.747", "Title": "Rationale for [dcl.constexpr]p5 in the c++ standard", "AcceptedAnswerId": "31683702", "LastEditDate": "2015-07-28T18:55:28.747", "Id": "31683519", "Score": "0", "Body": "<p>What is the rationale for [dcl.constexpr]p5 (<a href=\"http://eel.is/c++draft/dcl.constexpr#5\" rel=\"nofollow\">http://eel.is/c++draft/dcl.constexpr#5</a>)?</p>\n<blockquote>\n<p id=\"so_31683519_31683519_0\">For a non-template, non-defaulted constexpr function or a\n  non-template, non-defaulted, non-inheriting constexpr constructor, if\n  no argument values exist such that an invocation of the function or\n  constructor could be an evaluated subexpression of a core constant\n  expression ([expr.const]), or, for a constructor, a constant\n  initializer for some object ([basic.start.init]), the program is\n  ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>If a program violated this rule, declaring the offending function constexpr was useless. So what? Isn't it better to accept useless uses of the decl-specifier constexpr instead of triggering undefined behaviour (by no diagnostics required)? In addition to the problem with undefined behaviour we also have the additional complexity of having the rule [dcl.constexpr]p5 in the standard.</p>\n<p>An implementation can still provide useful diagnostic messages in some cases that it is able to detect (warnings by convention). Just like in the following case:</p>\n<pre><code>int main() { 0; }\n</code></pre>\n<p>The expression in main there is well-formed but useless. Some compilers issue a diagnostic message anyway (and they are allowed to) in the form of a warning.</p>\n<p>I understand that [dcl.constexpr]p5 cannot require diagnostics, so i'm not asking about that. I'm just asking about why this rule is even in the standard.</p>\n", "Tags": "<c++><function><language-lawyer><constexpr>", "OwnerUserId": "1272610", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31683519_31683519_0": {"section_id": 5421, "quality": 0.7575757575757576, "length": 25}}, "n4659": {"so_31683519_31683519_0": {"section_id": 6843, "quality": 0.7575757575757576, "length": 25}}}});