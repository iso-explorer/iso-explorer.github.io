post_cb({"bq_ids": {"n4140": {"so_27699118_27699260_10": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_27699118_27699260_13": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_27699118_27699260_16": {"length": 6, "quality": 1.0, "section_id": 3291}, "so_27699118_27699260_2": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_27699118_27699462_4": {"length": 21, "quality": 1.0, "section_id": 3291}, "so_27699118_27699260_9": {"length": 19, "quality": 0.6551724137931034, "section_id": 3296}, "so_27699118_27699260_8": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_27699118_27699260_3": {"length": 15, "quality": 0.9375, "section_id": 3287}, "so_27699118_27699260_0": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_27699118_27699462_3": {"length": 9, "quality": 1.0, "section_id": 3291}, "so_27699118_27699260_12": {"length": 19, "quality": 0.6551724137931034, "section_id": 3296}, "so_27699118_27699260_5": {"length": 15, "quality": 0.9375, "section_id": 3287}, "so_27699118_27699462_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 763}}, "n3337": {"so_27699118_27699260_10": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_27699118_27699260_12": {"length": 19, "quality": 0.6551724137931034, "section_id": 3166}, "so_27699118_27699260_13": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_27699118_27699260_5": {"length": 11, "quality": 0.6875, "section_id": 3157}, "so_27699118_27699260_2": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_27699118_27699462_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 750}, "so_27699118_27699260_9": {"length": 19, "quality": 0.6551724137931034, "section_id": 3166}, "so_27699118_27699260_8": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_27699118_27699260_3": {"length": 11, "quality": 0.6875, "section_id": 3157}, "so_27699118_27699260_0": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_27699118_27699260_16": {"length": 4, "quality": 0.6666666666666666, "section_id": 1972}}, "n4659": {"so_27699118_27699260_10": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_27699118_27699462_4": {"length": 21, "quality": 1.0, "section_id": 4053}, "so_27699118_27699260_12": {"length": 25, "quality": 0.8620689655172413, "section_id": 4048}, "so_27699118_27699260_13": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_27699118_27699260_5": {"length": 15, "quality": 0.9375, "section_id": 4049}, "so_27699118_27699462_3": {"length": 9, "quality": 1.0, "section_id": 4053}, "so_27699118_27699462_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 823}, "so_27699118_27699260_9": {"length": 25, "quality": 0.8620689655172413, "section_id": 4048}, "so_27699118_27699260_16": {"length": 6, "quality": 1.0, "section_id": 4053}, "so_27699118_27699260_3": {"length": 15, "quality": 0.9375, "section_id": 4049}, "so_27699118_27699260_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "27699118": {"ViewCount": "288", "Body": "<p>Does this code cause undefined behaviour:</p>\n<pre><code>#include &lt;vector&gt;\n\nstruct S\n{\n    S() {}\n\n    int x;\n};\n\nint main()\n{\n     std::vector&lt;S&gt; vec(5, S());\n}\n</code></pre>\n<p>Since <code>S()</code> default-initializes an automatic object, its contents are not zeroed first, so <code>x</code> would be indeterminate. Then the object containing indeterminate value is copied to each vector location.</p>\n<p><strong>Motivation:</strong> We might expect this to behave the same as <code>std::vector&lt;S&gt; vec(5);</code> which is not UB (since C++11), so this would be an easy mistake to make by accident. </p>\n<p>As referred to by Praetorian in comments, prior to C++11 <code>std::vector&lt;S&gt; vec(5);</code> was free to either do 5 default-initializations, or to use the copy-constructor for some or all of the items.</p>\n", "Title": "Vector of object containing uninitialized value", "CreationDate": "2014-12-30T03:06:16.293", "LastActivityDate": "2015-01-08T17:08:39.270", "CommentCount": "6", "LastEditDate": "2014-12-30T11:36:43.957", "PostTypeId": "1", "LastEditorUserId": "1708801", "Id": "27699118", "Score": "6", "OwnerUserId": "1505939", "Tags": "<c++><initialization><stdvector><undefined-behavior>", "AnswerCount": "2"}, "27699260": {"Id": "27699260", "PostTypeId": "2", "Body": "\n<p><strong>TL;DR</strong> Yes, this is Undefined Behavior.</p>\n<hr>\n<p>In your code you value-initialize a temporary:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>std::vector&lt;S&gt; vec(5, S());\n//                    ^^^\n</code></pre>\n<p>From \u00a78.5/10:</p>\n<blockquote>\n<p id=\"so_27699118_27699260_0\">An object whose initializer is an empty set of parentheses, i.e., <code>()</code>, shall be value-initialized.</p>\n</blockquote>\n<p>The definition for value-initialization is:</p>\n<blockquote>\n<p id=\"so_27699118_27699260_1\"><strong>\u00a78.5/8</strong></p>\n<p id=\"so_27699118_27699260_2\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<blockquote>\n<p id=\"so_27699118_27699260_5\">\u2014 if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a default constructor that is user-provided or deleted, then the object is default-initialized;</p>\n<p id=\"so_27699118_27699260_6\">\u2014 [..]</p>\n</blockquote>\n</blockquote>\n<p>Value-initialization does not include zero-initialization in this case because <code>S</code> has a user-declared default-constructor. So it is default-constructed.</p>\n<blockquote>\n<p id=\"so_27699118_27699260_7\"><strong>\u00a78.5/7</strong></p>\n<p id=\"so_27699118_27699260_8\">To default-initialize an object of type <code>T</code> means:</p>\n<blockquote>\n<p id=\"so_27699118_27699260_12\">\u2014 <strong>If <code>T</code> is a (possibly cv-qualified) class type (Clause 9), constructors are considered. The applicable constructors are enumerated (13.3.1.3), and the best one for the initializer <code>()</code> is chosen through overload resolution (13.3). The constructor thus selected is called, with an empty argument list, to initialize the object.</strong></p>\n<p id=\"so_27699118_27699260_13\">\u2014 If T is an array type, each element is default-initialized.</p>\n<p id=\"so_27699118_27699260_14\">\u2014 Otherwise, no initialization is performed.</p>\n</blockquote>\n</blockquote>\n<p>Since your default-constructor doesn't explicitly initialize <code>x</code>, it keep it's uninitialized garbage value. The default copy-constructor initializes the other elements with these values which is UB.</p>\n<blockquote>\n<p id=\"so_27699118_27699260_15\"><strong>\u00a78.5/12</strong></p>\n<p id=\"so_27699118_27699260_16\">If an indeterminate value is produced by an evaluation, the behavior is undefined</p>\n</blockquote>\n</hr>", "LastActivityDate": "2014-12-30T03:33:58.943", "CommentCount": "0", "CreationDate": "2014-12-30T03:33:58.943", "ParentId": "27699118", "Score": "2", "OwnerUserId": "701092"}, "27699462": {"Id": "27699462", "PostTypeId": "2", "Body": "<p>So taking into account the following comment by the OP:</p>\n<blockquote>\n<p id=\"so_27699118_27699462_0\">vector vec(5); is not UB (is it?) and we tend to think that (5) and\n  (5, S()) ought to do the same thing. I could see this mistake being\n  made by accident quite easily.</p>\n</blockquote>\n<p>The question boils down to if:</p>\n<pre><code>vector&lt;S&gt; vec(5);\n</code></pre>\n<p>is well defined then why is:</p>\n<pre><code>std::vector&lt;S&gt; vec(5, S());\n</code></pre>\n<p>undefined behavior?</p>\n<p>If we go to the cppreference section of <a href=\"http://en.cppreference.com/w/cpp/container/vector/vector\" rel=\"nofollow\">std::vector::vector</a> we can see in the first case it (<em>since C++11</em>) (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_27699118_27699462_1\">Constructs the container with count default-inserted instances of T.\n  <strong>No copies are made</strong>.</p>\n</blockquote>\n<p>while in the second case:</p>\n<blockquote>\n<p id=\"so_27699118_27699462_2\">Constructs the container with <strong>count copies</strong> of elements with value\n  value.</p>\n</blockquote>\n<p>The first case will default construct the elements and no copies are made while in the second case copies will be made and therefore we end up copying <code>x</code> to each element. Since the default constructor of <code>S</code> does not initialize <code>x</code>, it will have an <em>indeterminate value</em> and therefore we have undefined behavior since producing an <em>indeterminate value</em> invokes undefined behavior. </p>\n<p>Since C++14 section <code>8.5</code> paragraph <code>12</code> says:</p>\n<blockquote>\n<p id=\"so_27699118_27699462_3\">If an indeterminate value is produced by an evaluation, the behavior\n  is undefined except in the following cases</p>\n</blockquote>\n<p>with some exceptions in the case of <em>unsigned char</em> which does not apply in this case.</p>\n<p>We know that <code>x</code> has an indeterminate value from the same paragraph which says:</p>\n<blockquote>\n<p id=\"so_27699118_27699462_4\">When storage for an object with automatic or dynamic storage duration\n  is obtained, the object has an indeterminate value, and if no\n  initialization is performed for the object, that object retains an\n  indeterminate value until that value is replaced</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-01-08T17:08:39.270", "Score": "4", "CreationDate": "2014-12-30T04:07:15.173", "ParentId": "27699118", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2015-01-08T17:08:39.270"}});