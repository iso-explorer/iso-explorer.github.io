post_cb({"9892440": {"Id": "9892440", "PostTypeId": "2", "Body": "<p>The compiler automatically concatenates string literals written after each other (separated by white-space only).. It is as if you have written</p>\n<pre><code>const char version[] = \"version 0.8.0\";\n</code></pre>\n<p>EDIT: corrected pre-processor to compiler</p>\n", "LastActivityDate": "2012-03-27T15:16:21.653", "CommentCount": "1", "CreationDate": "2012-03-27T15:16:21.653", "ParentId": "9892369", "Score": "2", "OwnerUserId": "20322"}, "9892450": {"Id": "9892450", "PostTypeId": "2", "Body": "<p>Adjacent string literals are <a href=\"http://msdn.microsoft.com/en-us/library/69ze775t%28v=vs.80%29.aspx\" rel=\"nofollow\">concatenated</a>:</p>\n<blockquote>\n<p id=\"so_9892369_9892450_0\">When specifying string literals, adjacent strings are concatenated.\n  Therefore, this declaration:</p>\n<p id=\"so_9892369_9892450_1\">char szStr[] = \"12\" \"34\"; is identical to this declaration:</p>\n<p id=\"so_9892369_9892450_2\">char szStr[] = \"1234\"; This concatenation of adjacent strings makes it\n  easy to specify long strings across multiple lines:</p>\n<p id=\"so_9892369_9892450_3\">cout &lt;&lt; \"Four score and seven years \"<br>\n          \"ago, our forefathers brought forth \"<br>\n          \"upon this continent a new nation.\";</br></br></p>\n</blockquote>\n", "LastActivityDate": "2012-03-27T15:16:54.307", "CommentCount": "0", "CreationDate": "2012-03-27T15:16:54.307", "ParentId": "9892369", "Score": "2", "OwnerUserId": "1214731"}, "9892462": {"Id": "9892462", "PostTypeId": "2", "Body": "<p>Simply putting strings one after the other concatenates them at compile time, so:</p>\n<pre><code>\"Hello\" \", \" \"World!\" =&gt; \"Hello, World!\"\n</code></pre>\n<p>This is a strange usage of the feature, usually it is to allow <code>#define</code> strings to be used:</p>\n<pre><code>#define FOO \"World!\"\n\nputs(\"Hello, \" FOO);\n</code></pre>\n<p>Will compile to the same as:</p>\n<pre><code>puts(\"Hello, World!\");\n</code></pre>\n", "LastActivityDate": "2012-03-27T15:17:42.580", "CommentCount": "0", "CreationDate": "2012-03-27T15:17:42.580", "ParentId": "9892369", "Score": "0", "OwnerUserId": "611562"}, "9892426": {"Id": "9892426", "PostTypeId": "2", "Body": "<p>This is a basic feature of both C89 and C++98 called 'adjacent string concatenation' or thereabouts.</p>\n<p>Basically, if two string literals are adjacent to each other with no punctuation in between, they are merged into a single string, as your output shows.</p>\n<hr>\n<p>In the C++98 standard, section \u00a72.1 'Phases of translation [lex.phases]' says:</p>\n<blockquote>\n<p id=\"so_9892369_9892426_0\">6 Adjacent ordinary string literal tokens are concatenated. Adjacent wide string literal tokens are concatenated.</p>\n</blockquote>\n<p>This is after the preprocessor has completed.</p>\n<p>In the C99 standard, the corresponding section is \u00a75.1.2.1 'Translation Phases' and it says:</p>\n<blockquote>\n<p id=\"so_9892369_9892426_1\">6 Adjacent string literal tokens are concatenated.</p>\n</blockquote>\n<p>The wording would be very similar in any other C or C++ standard you can lay hands on (and I do recognize that both C++98 and C99 are superseded by C++11 and C11; I just don't have electronic copies of the final standards, yet).</p>\n</hr>", "LastEditorUserId": "15168", "LastActivityDate": "2012-03-27T15:30:23.883", "Score": "7", "CreationDate": "2012-03-27T15:16:02.610", "ParentId": "9892369", "CommentCount": "0", "OwnerUserId": "15168", "LastEditDate": "2012-03-27T15:30:23.883"}, "9892431": {"Id": "9892431", "PostTypeId": "2", "Body": "<p>Part of the C++ standard implementation states that string literals that are beside each other will be concatenated together. </p>\n<p><strong>Quotes from C and C++ Standard:</strong></p>\n<p>For C (quoting C99, but C11 has something similar in 6.4.5p5):</p>\n<blockquote>\n<p id=\"so_9892369_9892431_0\">(C99, 6.4.5p5) \"In translation phase 6, the multibyte character\n  sequences specified by any sequence of adjacent character and\n  identically-prefixed string literal tokens are concatenated into a\n  single multibyte character sequence.\"</p>\n</blockquote>\n<p>For C++:</p>\n<blockquote>\n<p id=\"so_9892369_9892431_1\">(C++11, 2.14.5p13) \"In translation phase 6 (2.2), adjacent string\n  literals are concatenated.\"</p>\n</blockquote>\n", "LastActivityDate": "2012-03-27T15:16:08.223", "CommentCount": "0", "CreationDate": "2012-03-27T15:16:08.223", "ParentId": "9892369", "Score": "6", "OwnerUserId": "702638"}, "bq_ids": {"n4140": {"so_9892369_9892431_1": {"length": 6, "quality": 0.75, "section_id": 5362}, "so_9892369_9892431_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 5313}, "so_9892369_9892426_1": {"length": 5, "quality": 1.0, "section_id": 5313}, "so_9892369_9892426_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5313}}, "n3337": {"so_9892369_9892431_1": {"length": 6, "quality": 0.75, "section_id": 5158}, "so_9892369_9892431_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 5110}, "so_9892369_9892426_1": {"length": 5, "quality": 1.0, "section_id": 5110}, "so_9892369_9892426_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5110}}, "n4659": {"so_9892369_9892431_1": {"length": 6, "quality": 0.75, "section_id": 6799}, "so_9892369_9892426_1": {"length": 5, "quality": 1.0, "section_id": 6737}, "so_9892369_9892426_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6737}}}, "9892422": {"Id": "9892422", "PostTypeId": "2", "Body": "<p>It's called string concatenation -- when you put two (or more) quoted strings next to each other in the source code with nothing between them, the compiler puts them together into a single string. This is most often used for long strings -- anything more than one line long:</p>\n<pre><code>char whatever[] = \"this is the first line of the string\\n\"\n    \"this is the second line of the string\\n\"\n    \"This is the third line of the string\";\n</code></pre>\n<p>Before string concatenation was invented, you had to do that with a rather clumsy line continuation, putting a backslash at the end of each line (and making sure it was the end, because most compilers wouldn't treat it as line continuation if there was any whitespace after the backslash). There was also ugliness with it throwing off indentation, because any whitespace at the beginning of subsequent lines might be included in the string.</p>\n<p>This can cause a minor problem if you intended to put a comma between the strings, such as when initializing an array of pointers to char. If you miss a comma, the compiler won't warn you about it -- you'll just get one string that includes what was intended to be two separate ones.</p>\n", "LastActivityDate": "2012-03-27T15:15:51.880", "CommentCount": "0", "CreationDate": "2012-03-27T15:15:51.880", "ParentId": "9892369", "Score": "9", "OwnerUserId": "179910"}, "9892369": {"ViewCount": "4297", "Body": "<p>This is one usage I found in a open source software.And I don't understant how it works.\nwhen I ouput it to the stdout,it was \"version 0.8.0\".</p>\n<pre><code>const char version[] = \" version \" \"0\" \".\" \"8\" \".\" \"0\";\n</code></pre>\n", "AcceptedAnswerId": "9892426", "Title": "const char* initialization", "CreationDate": "2012-03-27T15:13:03.563", "Id": "9892369", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-03-27T15:36:47.667", "Score": "8", "OwnerUserId": "1295846", "Tags": "<c++>", "AnswerCount": "7"}, "9892415": {"Id": "9892415", "PostTypeId": "2", "Body": "<pre><code>const char version[] = \" version \" \"0\" \".\" \"8\" \".\" \"0\";\n</code></pre>\n<p>is same as:</p>\n<pre><code>const char version[] = \" version 0.8.0\";\n</code></pre>\n<p>Compiler concatenates the <em>adjacent</em> pieces of string-literals, making one bigger piece of string-literal.</p>\n<p>As a sidenote, <code>const char*</code> (which is in your title) is not same as <code>char char[]</code> (which is in your posted code).</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2012-03-27T15:22:07.570", "Score": "3", "CreationDate": "2012-03-27T15:15:29.990", "ParentId": "9892369", "CommentCount": "0", "OwnerUserId": "415784", "LastEditDate": "2012-03-27T15:22:07.570"}});