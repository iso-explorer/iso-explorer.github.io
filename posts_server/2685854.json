post_cb({"2685880": {"Id": "2685880", "PostTypeId": "2", "Body": "<p>It would be infinitely recursive if you passed it in by value</p>\n", "LastActivityDate": "2010-04-21T19:16:06.637", "Score": "12", "CreationDate": "2010-04-21T19:16:06.637", "ParentId": "2685854", "CommentCount": "0", "OwnerUserId": "313137"}, "21427768": {"Id": "21427768", "PostTypeId": "2", "Body": "<p>It is very essential to pass objects as reference. If an object is passed as value to the Copy Constructor then its copy constructor would call itself, to copy the actual parameter to the formal parameter.\nThus an endless chain of call to the copy constructor will be initiated. This process would go on untill the system run out of memory.</p>\n<p>Hence, in a copy constructor, the parameter should always be passed as reference.</p>\n", "LastActivityDate": "2014-01-29T10:07:23.637", "Score": "0", "CreationDate": "2014-01-29T10:07:23.637", "ParentId": "2685854", "CommentCount": "0", "OwnerUserId": "2373677"}, "22301931": {"Id": "22301931", "PostTypeId": "2", "Body": "<p>If its not passed by reference then it would pass by value. If the argument is passed by value, its copy constructor would call itself to copy the actual parameter to formal parameter. This process would go on until the system runs out of memory.\nSo, we should pass it by reference , so that copy constructor does not get invoked. </p>\n", "LastActivityDate": "2014-03-10T13:46:20.610", "Score": "1", "CreationDate": "2014-03-10T13:46:20.610", "ParentId": "2685854", "CommentCount": "0", "OwnerUserId": "1777567"}, "2685871": {"Id": "2685871", "PostTypeId": "2", "Body": "<p>Because if it's not by reference, it's by value. To do that you make a copy, and to do that you call the copy constructor. But to do that, we need to make a new value, so we call the copy constructor, and so on...</p>\n<p>(You would have infinite recursion because \"to make a copy, you need to make a copy\".)</p>\n", "LastEditorUserId": "1201289", "LastActivityDate": "2012-06-21T08:10:40.003", "Score": "135", "CreationDate": "2010-04-21T19:14:41.770", "ParentId": "2685854", "CommentCount": "5", "LastEditDate": "2012-06-21T08:10:40.003", "OwnerUserId": "87234"}, "9676696": {"Id": "9676696", "PostTypeId": "2", "Body": "<p>whenever you call a function (example: int f(car c))\nwhich takes its arguments other than built-in data types (here car)\na requirement to copy the actual object supplied by the caller\nto the variable in the called function's parameter.<br>\nexample: car carobj; f(carobj);</br></p>\n<p>that is, copy carobj to c.</p>\n<p>carobj need to be coped to parameter c in function f.</p>\n<p>To achieve copying, copy constructor is called. </p>\n<p>In this case, function f called using pass by value or in other words, function f is declared to take pass by value.</p>\n<p>If function f takes pass by reference, then its declaration is int f(car &amp;c);</p>\n<p>In this case,  car carobj; f(carobj); does not need a copy constructor.</p>\n<p>In this case, c become alias of carobj.</p>\n<p>Using the above 2 scenarios, for your clarity i am summarising them as:\n1.  If a function declared to take a parameter as value of a object, then copy constructor of the object is called.\n2.  If a function declared to take a parameter as pass by reference, the parameter become alias of object supplied by caller. No need of copy constructor!</p>\n<p>Now the question is why pass by reference is required.  If copy constructor accepts reference, the receiving variable become aliases of supplied object.  Hence, no need of copy constructor (in this case, call to itself) to copy the value in caller supplied object to copy constructor's variable in argument list. </p>\n<p>Otherwise, if copy constructor takes caller supplied object as value, i.e. pass by value, then it need copy constructor of given object;  Hence, to get the supplied object from caller into our function itself (in this case copy constructor) we need to call copy constructor, which is nothing but calling the same function during function parameter initialization itself. This is the reason of passing a reference to copy constructor.</p>\n", "LastActivityDate": "2012-03-13T00:20:49.883", "Score": "3", "CreationDate": "2012-03-13T00:20:49.883", "ParentId": "2685854", "CommentCount": "1", "OwnerUserId": "1265351"}, "2685879": {"Id": "2685879", "PostTypeId": "2", "Body": "<p>Because pass-by-value would invoke the copy constructor :)</p>\n", "LastActivityDate": "2010-04-21T19:15:43.600", "Score": "54", "CreationDate": "2010-04-21T19:15:43.600", "ParentId": "2685854", "CommentCount": "1", "OwnerUserId": "302916"}, "bq_ids": {"n4140": {"so_2685854_2685975_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 455}}, "n3337": {"so_2685854_2685975_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 446}}, "n4659": {"so_2685854_2685975_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 478}}}, "2685854": {"ViewCount": "38538", "Body": "<p>Why must a copy constructor be passed its parameter by reference?</p>\n", "AcceptedAnswerId": "2685871", "Title": "Why should the copy constructor accept its parameter by reference in C++?", "CreationDate": "2010-04-21T19:12:41.860", "Id": "2685854", "CommentCount": "0", "FavoriteCount": "41", "PostTypeId": "1", "LastEditDate": "2011-12-05T00:12:43.353", "LastEditorUserId": "894284", "LastActivityDate": "2015-08-29T15:42:57.903", "Score": "84", "OwnerUserId": "275674", "Tags": "<c++><constructor><copy><copy-constructor><c++-faq>", "AnswerCount": "8"}, "2685975": {"Id": "2685975", "PostTypeId": "2", "Body": "<p>The alternative to pass-by-reference is pass-by-value. Pass-by-value is really pass-by-copy. The copy constructor is needed to make a copy.</p>\n<p>If you had to make a copy just to call the copy constructor, it would be a conundrum.</p>\n<p>(I think the infinite recursion would occur in the compiler and you'd never actually get such a program.)</p>\n<p>Besides <em>rational</em> reasons, it's forbidden by the standard in \u00a712.8/3:</p>\n<blockquote>\n<p id=\"so_2685854_2685975_0\">A declaration of a constructor for a\n  class X is ill-formed if its first\n  parameter is of type (optionally cv-\n  qualified) X and either there are no\n  other parameters or else all other\n  parameters have default arguments.</p>\n</blockquote>\n", "LastEditorUserId": "153285", "LastActivityDate": "2010-04-21T21:17:15.837", "Score": "16", "CreationDate": "2010-04-21T19:30:52.020", "ParentId": "2685854", "CommentCount": "5", "LastEditDate": "2010-04-21T21:17:15.837", "OwnerUserId": "153285"}, "32287799": {"Id": "32287799", "PostTypeId": "2", "Body": "<p>It is necessary to pass object as reference and not by value because if you pass it by value its copy is constructed using the copy constructor.This means the copy constructor would call itself to make copy.This process will go on until the compiler runs out of memory.</p>\n", "LastActivityDate": "2015-08-29T15:42:57.903", "Score": "0", "CreationDate": "2015-08-29T15:42:57.903", "ParentId": "2685854", "CommentCount": "0", "OwnerUserId": "5230702"}});