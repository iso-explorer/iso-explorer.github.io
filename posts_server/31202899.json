post_cb({"bq_ids": {"n4140": {"so_31202899_31203015_0": {"length": 14, "quality": 1.0, "section_id": 7093}}, "n3337": {"so_31202899_31203015_0": {"length": 14, "quality": 1.0, "section_id": 6837}}, "n4659": {"so_31202899_31203015_0": {"length": 14, "quality": 1.0, "section_id": 8594}}}, "31203015": {"Id": "31203015", "PostTypeId": "2", "Body": "<p>From N3337 [basic.lookup.unqual]/7:</p>\n<blockquote>\n<p id=\"so_31202899_31203015_0\">A name used in the definition of a class X outside of a member function body or nested class definition shall be declared in one of the following ways:</p>\n<ul>\n<li>before its use in class X or be a member of a base class of X, or...</li>\n</ul>\n</blockquote>\n<p>Because the trailing return type is part of the function <em>declaration</em> rather than the <em>definition</em>, it can't look ahead to see what else is declared in the class, so you need to declare that member above the function declaration.</p>\n", "LastActivityDate": "2015-07-03T09:16:06.710", "CommentCount": "0", "CreationDate": "2015-07-03T09:16:06.710", "ParentId": "31202899", "Score": "22", "OwnerUserId": "496161"}, "31202975": {"Id": "31202975", "PostTypeId": "2", "Body": "<p>Move the declaration of the member before the function like so:</p>\n<pre><code>#include &lt;vector&gt;\nstruct M\n{\n   // implementation\n   private:\n      std::vector&lt;int&gt; identities;\n   public:    \n   // interface\n     auto begin() -&gt; decltype(identities.begin())\n     {\n        return identities.begin();\n     }\n\n\n};\n</code></pre>\n", "LastActivityDate": "2015-07-03T09:14:15.257", "CommentCount": "0", "CreationDate": "2015-07-03T09:14:15.257", "ParentId": "31202899", "Score": "2", "OwnerUserId": "619295"}, "31203087": {"Id": "31203087", "PostTypeId": "2", "Body": "<p>If C++14 is available, you can omit the trailing return type, thus avoiding referencing a member outside function body and also making the code more compact:</p>\n<pre><code>auto begin() {\n    return identities.begin();\n}\n</code></pre>\n<p>In general it's more correct to use <code>decltype(auto)</code> for such forwarding methods, so return type can be a reference, though in this particular case it's the same (thanks to @Nawaz):</p>\n<pre><code>decltype(auto) begin() {\n    return identities.begin();\n}\n</code></pre>\n", "LastEditorUserId": "3959454", "LastActivityDate": "2015-07-03T09:50:46.837", "Score": "16", "CreationDate": "2015-07-03T09:18:55.807", "ParentId": "31202899", "CommentCount": "3", "OwnerUserId": "3959454", "LastEditDate": "2015-07-03T09:50:46.837"}, "31202899": {"ViewCount": "903", "Body": "<p>Trying to compile this simple class:</p>\n<pre><code>#include &lt;vector&gt;\nstruct M\n{\n// interface\n    auto begin() -&gt; decltype(identities.begin())\n    {\n        return identities.begin();\n    }\n// implementation\nprivate:\n    std::vector&lt;int&gt; identities;\n};\n</code></pre>\n<p>results in an error:</p>\n<pre><code>$ g++-510 where.cpp -std=c++11\nwhere.cpp:57:35: error: \u2018struct M\u2019 has no member named \u2018identities\u2019\n     auto begin() -&gt;decltype(this-&gt;identities.begin())\n                                   ^\nwhere.cpp:57:35: error: \u2018struct M\u2019 has no member named \u2018identities\u2019\n\n$ clang++ where.cpp -std=c++11 -Wall -pedantic -Wextra\nwhere.cpp:57:35: error: no member named 'identities' in 'M'\n    auto begin() -&gt;decltype(this-&gt;identities.begin())\n                            ~~~~  ^\n</code></pre>\n<p>Why doesn't <code>decltype</code> see the class member?</p>\n", "AcceptedAnswerId": "31203015", "Title": "Why does decltype not see the member declaration?", "CreationDate": "2015-07-03T09:10:41.593", "Id": "31202899", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-03T09:34:39.823", "LastEditorUserId": "2064196", "LastActivityDate": "2015-07-03T09:50:46.837", "ClosedDate": "2017-02-28T11:21:38.937", "Score": "25", "OwnerUserId": "2064196", "Tags": "<c++><c++11>", "AnswerCount": "3"}});