post_cb({"bq_ids": {"n4140": {"so_24155571_24155937_1": {"section_id": 3921, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_24155571_24155937_1": {"section_id": 3781, "quality": 0.7037037037037037, "length": 19}}, "n4659": {"so_24155571_24155937_1": {"section_id": 4807, "quality": 0.8888888888888888, "length": 24}}}, "24155571": {"CommentCount": "4", "AcceptedAnswerId": "24155937", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-06-11T05:57:54.993", "LastActivityDate": "2014-07-25T01:35:03.250", "LastEditDate": "2017-05-23T12:17:52.443", "ViewCount": "441", "FavoriteCount": "4", "Title": "How is 'A(tmpVector);' the same as 'A tmpVector;'?", "Id": "24155571", "Score": "11", "Body": "<p><a href=\"https://stackoverflow.com/questions/24155026/c-call-constructor-within-another-constructor-of-the-same-class\">This question</a> has this code snippet:</p>\n<pre><code>A::A(const char *pc) {\n    A(string(pc));\n}\n\nA::A(string s) {\n    vector&lt;string&gt; tmpVector;\n    tmpVector.push_back(s);\n    A(tmpVector); // &lt;-- error\n}\n\n// Constructor\nA::A(vector&lt;string&gt; filePathVector) {\n}\n</code></pre>\n<p>The problem is that <code>A(tmpVector);</code> conflicts with <code>vector&lt;string&gt; tmpVector;</code>:</p>\n<pre><code>error: conflicting declaration 'A  tmpVector'\nerror: 'tmpVector' has a previous declaration as 'std::vector&lt;std::basic_string&lt;char&gt; &gt; tmpVector'\n</code></pre>\n<p><a href=\"https://stackoverflow.com/a/24155042/65863\">The answer</a> says:</p>\n<blockquote>\n<p id=\"so_24155571_24155571_0\">This</p>\n<p id=\"so_24155571_24155571_1\">A(tmpVector);</p>\n<p id=\"so_24155571_24155571_2\">is the same as this</p>\n<p id=\"so_24155571_24155571_3\">A tmpVector; // but there is already an object called tmpVector</p>\n</blockquote>\n<p>With an added comment:</p>\n<blockquote>\n<p id=\"so_24155571_24155571_4\">In this context, the () are superfluous.</p>\n</blockquote>\n<p>My question is: why are the parenthesis superfluous?  What exactly in the C++11 spec makes that so?  I have not seen this before.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "65863", "AnswerCount": "1"}, "24155937": {"ParentId": "24155571", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From \u00a78 [dcl.decl] of the standard:</p>\n<blockquote>\n<p id=\"so_24155571_24155937_0\">Declarators have the syntax:</p>\n</blockquote>\n<pre><code>declarator:\n    ptr-declarator\n    noptr-declarator parameters-and-qualifiers trailing-return-type\nptr-declarator:\n    noptr-declarator\n    ptr-operator ptr-declarator\nnoptr-declarator:\n    declarator-id attribute-specifier-seq_opt\n    noptr-declarator parameters-and-qualifiers\n    noptr-declarator [ constant-expression_opt] attribute-specifier-seq_opt\n    ( ptr-declarator )\n</code></pre>\n<p>(Remainder of grammar omitted).</p>\n<p>In particular, note that </p>\n<ol>\n<li>A <code>ptr-declarator</code> is a <code>declarator</code>.</li>\n<li>Something of the form <code>( ptr-declarator )</code> is a <code>noptr-declarator</code> which in turn is a <code>ptr-declarator</code>.</li>\n</ol>\n<p>In other words, you can have as many pairs of parentheses as you want and it's still a declarator. Now this causes an ambiguity in cases like <code>T(x);</code>, which is resolved by \u00a76.8 [stmt.ambig] of the standard:</p>\n<blockquote>\n<p id=\"so_24155571_24155937_1\">There is an ambiguity in the grammar involving expression-statements\n  and declarations: An expression statement with a function-style\n  explicit type conversion (5.2.3) as its leftmost subexpression can be\n  indistinguishable from a declaration where the first declarator starts\n  with a (. In those cases the statement is a declaration.</p>\n</blockquote>\n<p>The example accompanying that paragraph directly covers this case:</p>\n<pre><code>class T {\n// ...\npublic:\n    T();\n    T(int);\n    T(int, int);\n};\n\nT(a);        // declaration\nT(*b)();     // declaration\nT(c)=7;      // declaration\nT(d),e,f=3;  // declaration\nextern int h;\nT(g)(h,2);   // declaration\n</code></pre>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-07-25T01:35:03.250", "Id": "24155937", "Score": "14", "CreationDate": "2014-06-11T06:24:44.907", "LastActivityDate": "2014-07-25T01:35:03.250"}});