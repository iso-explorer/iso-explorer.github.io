post_cb({"bq_ids": {"n4140": {"so_25094103_25094407_1": {"length": 30, "quality": 0.967741935483871, "section_id": 3344}, "so_25094103_25094103_0": {"length": 14, "quality": 1.0, "section_id": 3355}, "so_25094103_25094407_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 3356}}, "n3337": {"so_25094103_25094407_1": {"length": 30, "quality": 0.967741935483871, "section_id": 3214}, "so_25094103_25094103_0": {"length": 14, "quality": 1.0, "section_id": 3225}, "so_25094103_25094407_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 3226}}, "n4659": {"so_25094103_25094103_0": {"length": 14, "quality": 1.0, "section_id": 4122}, "so_25094103_25094407_3": {"length": 8, "quality": 0.6153846153846154, "section_id": 4110}}}, "25094103": {"ViewCount": "244", "Body": "<p>From the related c++ standard section : </p>\n<blockquote>\n<p id=\"so_25094103_25094103_0\">Referring to any non-static member or base class of an object in the handler for a function-try-block of a constructor or destructor for that object results in undefined behavior.</p>\n</blockquote>\n<p>eg. </p>\n<pre><code>T::~T() \n{\n      try {\n        this-&gt;nonstatic_member; // iff I read the quote correctly\n      } catch( ... ) {\n      }\n}\n</code></pre>\n<p>So why is this undefined behaviour ?</p>\n", "AcceptedAnswerId": "25094407", "Title": "ISO c++ 15.3.10 : Why is this undefined behaviour?", "CreationDate": "2014-08-02T10:36:51.940", "Id": "25094103", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-08-02T12:07:12.357", "Score": "4", "OwnerUserId": "2567683", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}, "25094407": {"Id": "25094407", "PostTypeId": "2", "Body": "<p>I think the reason why accessing non-static data members in a function-try-block of a <em>destructor</em> is that [except.ctor]/2 and [except.handle]/11 guarantee that all subobjects have already been destroyed when entering the catch-clause of said try-block:</p>\n<blockquote>\n<p id=\"so_25094103_25094407_0\"><strong>github draft from 2014-07-23, [except.ctor]/2</strong></p>\n<p id=\"so_25094103_25094407_1\">An object of any storage duration whose initialization or destruction\n  is terminated by an exception will have destructors executed for all\n  of its fully constructed subobjects (excluding the variant members of\n  a union-like class), that is, for subobjects for which the principal\n  constructor has completed execution and the destructor has not yet\n  begin execution.</p>\n<p id=\"so_25094103_25094407_2\"><strong>[except.handle]/11</strong></p>\n<p id=\"so_25094103_25094407_3\">[...] The base classes and non-variant members of\n  an object shall be destroyed before entering the handler of a\n  <em>function-try-block</em> of a destructor for that object.</p>\n</blockquote>\n<p>Therefore, whether we throw the exception in the dtor of the class itself, or in the dtor of a subobject: all subobjects will be destroyed.</p>\n<hr>\n<h2>Example 1:</h2>\n<pre><code>#include &lt;iostream&gt;\n\nstruct loud\n{\n    ~loud() { std::cout &lt;&lt; \"~loud()\\n\"; }\n};\n\nstruct T\n{\n    loud l;\n\n    ~T() noexcept(false)\n    try\n    {\n        std::cout &lt;&lt; \"throwing an int\\n\";\n        throw 42;\n    }catch(int)\n    {\n        std::cout &lt;&lt; \"caught an int\\n\";\n        throw;\n    }\n};\n\nint main()\n{\n    try\n    {\n        T t;\n    }catch(...)\n    {\n        std::cout &lt;&lt; \"caught an exception in main\\n\";\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre>throwing an int\n~loud()\ncaught an int\ncaught an exception in main\n</pre>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/5a34c055dcd27303\" rel=\"nofollow\">Live example</a></kbd></p>\n<hr>\n<h2>Example 2:</h2>\n<pre><code>#include &lt;iostream&gt;\n\nstruct loud\n{\n    loud() { std::cout &lt;&lt; \"loud()\\n\"; }\n    ~loud() { std::cout &lt;&lt; \"~loud()\\n\"; }\n};\n\nstruct A\n{\n    A() { std::cout &lt;&lt; \"A()\\n\"; }\n    ~A() noexcept(false) { std::cout &lt;&lt; \"~A()\\n\"; throw 42; }\n};\n\nstruct T\n{\n    loud l;\n    A a;\n\n    ~T() noexcept(false)\n    try\n    {\n    }catch(int)\n    {\n        std::cout &lt;&lt; \"caught an int\\n\";\n        throw;\n    }\n};\n\nint main()\n{\n    try\n    {\n        T t;\n    }catch(...)\n    {\n        std::cout &lt;&lt; \"caught an exception in main\\n\";\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre>loud()\nA()\n~A()\n~loud()\ncaught an int\ncaught an exception in main</pre>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/acb5140a81b1f6da\" rel=\"nofollow\">Live example</a></kbd></p>\n</hr></hr>", "LastEditorUserId": "420683", "LastActivityDate": "2014-08-02T12:07:12.357", "Score": "7", "CreationDate": "2014-08-02T11:11:58.570", "ParentId": "25094103", "CommentCount": "1", "OwnerUserId": "420683", "LastEditDate": "2014-08-02T12:07:12.357"}, "25094277": {"Id": "25094277", "PostTypeId": "2", "Body": "<p>With </p>\n<pre><code>struct S\n{\n    S() try\n    : m()\n    {\n\n    }\n    catch(...)\n    {\n        // this-&gt;non_static is UB\n    }\n\n    ~S()\n    try\n    {\n\n    }\n    catch(...)\n    {\n        // this-&gt;non_static is UB\n    }\nprivate:\n    Member m;\n};\n</code></pre>\n<p>When you are in the catch block you cannot be sure from where the exception come from and so which object is initialized/destroyed.</p>\n", "LastActivityDate": "2014-08-02T10:57:25.193", "CommentCount": "2", "CreationDate": "2014-08-02T10:57:25.193", "ParentId": "25094103", "Score": "2", "OwnerUserId": "2684539"}, "25094150": {"Id": "25094150", "PostTypeId": "2", "Body": "<p>A non-static member can be either yet non-created or already destroyed when the handler is processed.</p>\n<p>And your example does not demonstrate a function-try-block. It is a try-block inside the body of the destructor when neither subobject is yet destroyed.</p>\n<p>Here an example of a function-try block for a constructor</p>\n<pre><code>T::T(int ii, double id)\ntry : i(f(ii)), d(id) \n{\n   // constructor statements\n}\ncatch (...) \n{\n   // handles exceptions thrown from the ctor-initializer\n   // and from the constructor statements\n}\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-08-02T10:51:59.627", "Score": "5", "CreationDate": "2014-08-02T10:42:39.997", "ParentId": "25094103", "CommentCount": "2", "OwnerUserId": "2877241", "LastEditDate": "2014-08-02T10:51:59.627"}});