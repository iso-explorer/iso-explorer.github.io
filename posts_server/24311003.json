post_cb({"24311003": {"CommentCount": "0", "ViewCount": "114", "CreationDate": "2014-06-19T15:55:25.947", "LastActivityDate": "2014-06-19T16:20:51.950", "Title": "Encapsulate c++ Random Number Generator", "AcceptedAnswerId": "24311199", "PostTypeId": "1", "Id": "24311003", "Score": "0", "Body": "<p>I'm building something that requires me to </p>\n<pre><code>template&lt;D&gt;\nclass DistributionAdapter {\npublic:\n    /**\n     * @return number generated by the distribution function.\n     */\n    virtual D operator()(RANDOM_NUMBER_GENERATOR&amp; rng) = 0;\n};\n</code></pre>\n<p>RANDOM_NUMBER_GENERATOR is supposed to represent the class of random number generator in c++, either std::random_device or a pseudo random number generator. Can someone tell me how should I approach this, I don't know if random number generator in c++ have a common base type</p>\n", "Tags": "<c++><random><encapsulation>", "OwnerUserId": "3683889", "AnswerCount": "2"}, "24311199": {"ParentId": "24311003", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Section \u00a7 26.5.1.3 of the standard describes the requirements for random number <strong>generators</strong>.</p>\n<p>In particular, a generator must support the function call operator :</p>\n<blockquote>\n<p id=\"so_24311003_24311199_0\">g() T Returns a value in the closed interval [ G::min() , G::max() ] .\n  amortized constant</p>\n</blockquote>\n<p>So, although there is no base class shared by every single generator, the standard guarantees that the <code>operator()</code> will be present in each of them : you can call <code>rng()</code> in your function.</p>\n", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-06-19T16:20:51.950", "Id": "24311199", "Score": "0", "CreationDate": "2014-06-19T16:04:40.847", "LastActivityDate": "2014-06-19T16:20:51.950"}, "24311138": {"ParentId": "24311003", "CommentCount": "0", "Body": "<p>It's not entirely clear what you're asking, but here is a fairly easy to use function returning uniformly distributed random integers within a particular range.</p>\n<pre><code>#include &lt;random&gt;\n\n// random number generator from Stroustrup: \n// http://www.stroustrup.com/C++11FAQ.html#std-random\nint rand_int(int low, int high)\n{\n    static std::default_random_engine re {};\n    using Dist = std::uniform_int_distribution&lt;int&gt;;\n    static Dist uid {};\n    return uid(re, Dist::param_type{low,high});\n}\n</code></pre>\n", "OwnerUserId": "3191481", "PostTypeId": "2", "Id": "24311138", "Score": "0", "CreationDate": "2014-06-19T16:01:42.220", "LastActivityDate": "2014-06-19T16:01:42.220"}, "bq_ids": {"n4140": {"so_24311003_24311199_0": {"section_id": 3493, "quality": 1.0, "length": 8}}, "n3337": {"so_24311003_24311199_0": {"section_id": 3358, "quality": 1.0, "length": 8}}, "n4659": {"so_24311003_24311199_0": {"section_id": 4256, "quality": 1.0, "length": 8}}}});