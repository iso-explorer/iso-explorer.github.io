post_cb({"24868125": {"ParentId": "24867294", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-07-21T14:50:08.197", "Score": "5", "LastEditorUserId": "923854", "LastEditDate": "2014-07-23T15:12:01.667", "Id": "24868125", "OwnerUserId": "923854", "Body": "<p><code>std::result_of</code> is declared in C++11 [meta.trans.other] Table 57 as:</p>\n<pre><code>template &lt;class Fn, class... ArgTypes&gt; struct result_of&lt;Fn(ArgTypes...)&gt;;\n</code></pre>\n<p>and it requires that:</p>\n<blockquote>\n<p id=\"so_24867294_24868125_0\"><code>Fn</code> shall be a callable type (20.8.1), reference to function, or reference to callable type. The expression</p>\n<pre><code>decltype(INVOKE(declval&lt;Fn&gt;(), declval&lt;ArgTypes&gt;()...))\n</code></pre>\n<p id=\"so_24867294_24868125_1\">shall be well formed.</p>\n</blockquote>\n<p><em>callable type</em> is defined in [func.def]/3:</p>\n<blockquote>\n<p id=\"so_24867294_24868125_2\">A <em>callable type</em> is a function object type (20.8) or a pointer to member.</p>\n</blockquote>\n<p><em>function object type</em> is defined in [function.objects]/1:</p>\n<blockquote>\n<p id=\"so_24867294_24868125_3\">A <em>function object type</em> is an object type (3.9) that can be the type of the <em>postfix-expression</em> in a function call (5.2.2, 13.3.1.1). ...</p>\n</blockquote>\n<p>In your program, <code>f</code> is a reference to a function of type <code>int(int)</code>, so <code>T</code> is deduced to the function type <code>int(int)</code>. Note that a function type is <em>not</em> one of the valid options for the type <code>Fn</code> to be passed to <code>std::result_type</code>. A reference to function <em>is</em> an acceptable type, however: you should pass the full type of <code>Test</code>s parameter to <code>result_of</code> instead of only <code>T</code> (<a href=\"http://coliru.stacked-crooked.com/a/0d9621a00c6abf6c\" rel=\"nofollow\">Demo at Coliru</a>):</p>\n<pre><code>template&lt;typename T&gt;    \nvoid Test(const T&amp;)\n{\n    decltype(std::declval&lt;T&gt;()(std::declval&lt;int&gt;())) i1 = 1;\n    typename std::result_of&lt;const T&amp; (int)&gt;::type i2 = 2;\n}\n</code></pre>\n<p>Regarding the difference between the two forms, remember that <code>std::declval</code> always returns a reference type; specifically <code>std::declval&lt;T&gt;()</code> returns <code>T&amp;&amp;</code>. So</p>\n<pre><code>decltype(std::declval&lt;T&gt;()(std::declval&lt;int&gt;()))\n</code></pre>\n<p>is asking for the what type is returned when a <code>T&amp;&amp;</code> is invoked with an <code>int&amp;&amp;</code> argument.</p>\n", "LastActivityDate": "2014-07-23T15:12:01.667"}, "24868095": {"ParentId": "24867294", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-07-21T14:48:49.210", "Score": "4", "LastEditorUserId": "596781", "LastEditDate": "2014-07-21T14:57:41.470", "Id": "24868095", "OwnerUserId": "596781", "Body": "<p>[basic.compound] describes what function types look like in C++:</p>\n<blockquote>\n<p id=\"so_24867294_24868095_0\">\u2014 <em>functions</em>, which have parameters of given types and return <code>void</code> or references or objects of a given type</p>\n</blockquote>\n<p>Therefore, the return type part of a function type must not itself be a function type, and thus <code>T(int)</code> is not a valid type in the C++ type system when <code>T = int(int)</code>.</p>\n<p>Moreover, [dcl.fct]/8 clarifies:</p>\n<blockquote>\n<p id=\"so_24867294_24868095_1\">Functions shall not have a return type of type array or function</p>\n</blockquote>\n<p>Note also that the actual analogue of your <code>i1</code> line is <code>typename std::result_of&lt;T&gt;::type i2</code>.</p>\n", "LastActivityDate": "2014-07-21T14:57:41.470"}, "24867294": {"CommentCount": "4", "ViewCount": "579", "PostTypeId": "1", "LastEditorUserId": "3747990", "CreationDate": "2014-07-21T14:12:47.243", "LastActivityDate": "2014-07-23T15:12:01.667", "Title": "about std::result_of in c++11", "FavoriteCount": "2", "LastEditDate": "2014-07-21T14:46:50.503", "Id": "24867294", "Score": "2", "Body": "<p>As I know, a possible implementation of <code>std::result_of</code> is </p>\n<pre><code>template&lt;class F, class... ArgTypes&gt;\nstruct result_of&lt;F(ArgTypes...)&gt;\n{\n    typedef decltype(\n        std::declval&lt;F&gt;()(std::declval&lt;ArgTypes&gt;()...)\n        ) type;\n};\n</code></pre>\n<p>But when I use <code>std::result_of</code> I have some trouble.</p>\n<pre><code>int f(int x)\n{\n    return 0;\n}\n\ntemplate&lt;typename T&gt;    \nvoid Test(const T&amp; t)\n{\n    decltype(std::declval&lt;T&gt;()(std::declval&lt;int&gt;())) i1 = 1; // ok\n    typename std::result_of&lt;T(int)&gt;::type i2 = 2; // compile error:\n    // function returning a function\n    // I think this means the same thing just as above, right?\n}\n\nint main()\n{\n    Test(f);\n    return 0;\n}\n</code></pre>\n<p>What are the differences between these two forms?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1442372", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24867294_24868125_0": {"section_id": 5, "quality": 0.6, "length": 6}, "so_24867294_24868095_1": {"section_id": 3244, "quality": 1.0, "length": 7}, "so_24867294_24868125_3": {"section_id": 4548, "quality": 0.75, "length": 9}, "so_24867294_24868125_2": {"section_id": 4555, "quality": 0.75, "length": 6}, "so_24867294_24868095_0": {"section_id": 7221, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_24867294_24868125_0": {"section_id": 2, "quality": 0.6, "length": 6}, "so_24867294_24868095_1": {"section_id": 3117, "quality": 1.0, "length": 7}, "so_24867294_24868125_3": {"section_id": 4378, "quality": 0.75, "length": 9}, "so_24867294_24868125_2": {"section_id": 4385, "quality": 0.75, "length": 6}, "so_24867294_24868095_0": {"section_id": 6965, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_24867294_24868125_0": {"section_id": 5, "quality": 0.6, "length": 6}, "so_24867294_24868095_1": {"section_id": 4002, "quality": 1.0, "length": 7}, "so_24867294_24868125_3": {"section_id": 5922, "quality": 0.75, "length": 9}, "so_24867294_24868125_2": {"section_id": 5927, "quality": 0.75, "length": 6}, "so_24867294_24868095_0": {"section_id": 8730, "quality": 0.9090909090909091, "length": 10}}}});