post_cb({"23008491": {"ParentId": "23008320", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In else I hope you mean greater than or equal to.</p>\n<p>Opertor simply won't work as int64_t is meant to store values in limit (-2^63 to 2^63-1). If you want more range use unsigned version. For even more range use some readily available <a href=\"https://stackoverflow.com/questions/1047203/best-bignum-library-to-solve-project-euler-problems-in-c\">bignum</a> library or write one by yourself. (For example you can <a href=\"http://codepad.org/T2AcSJzN\" rel=\"nofollow noreferrer\">store large numbers in string</a> and comparision would become extremely easy)</p>\n", "OwnerUserId": "2659313", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:26:46.303", "Id": "23008491", "Score": "1", "CreationDate": "2014-04-11T09:20:52.763", "LastActivityDate": "2014-04-11T09:20:52.763"}, "23010167": {"ParentId": "23008320", "CommentCount": "2", "Body": "<p>The value <code>0x8000000000000000</code> is a large unsigned integer, 9223372036854775808 as a decimal.</p>\n<p>The maximum value that can be stored in a 64-bit signed integer, represented by INT_64_MAX or similar, is 9223372036854775807.</p>\n<p>The conversion of this value from unsigned to signed is covered in the standard at n3797 S4.7/3:</p>\n<blockquote>\n<p id=\"so_23008320_23010167_0\">If the destination type is signed, the value is unchanged if it can be represented in the destination type (and bit-field width); otherwise, the value is implementation-defined.</p>\n</blockquote>\n<p>Since it cannot be so represented, the behaviour is implementation-defined.</p>\n<p>What will actually happen on most implementations is that the bit value will be stored unchanged. Now val1 has a value that is outside the allowable range, and any use of it will result in Undefined Behaviour.</p>\n<p>In particular the comparison between two signed integers, one of which is outside the allowable range, cannot be reliably predicted. It will probably defer to a specific instruction in the underlying machine hardware, so you would have to inspect the generated code to determine which that would be. I can write the code and tell you what I find, but for a different compiler or different processor it might be different.</p>\n<p>Best advice is always to avoid Undefined Behaviour if you possibly can.</p>\n", "OwnerUserId": "1105562", "PostTypeId": "2", "Id": "23010167", "Score": "4", "CreationDate": "2014-04-11T10:34:09.267", "LastActivityDate": "2014-04-11T10:34:09.267"}, "23008478": {"ParentId": "23008320", "CommentCount": "2", "Body": "<p>According to C++11 \u00a75:</p>\n<blockquote>\n<p id=\"so_23008320_23008478_0\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, <strong>the behavior is undefined</strong>.</p>\n</blockquote>\n", "OwnerUserId": "2589776", "PostTypeId": "2", "Id": "23008478", "Score": "4", "CreationDate": "2014-04-11T09:20:23.470", "LastActivityDate": "2014-04-11T09:20:23.470"}, "23008320": {"CommentCount": "0", "ViewCount": "170", "PostTypeId": "1", "LastEditorUserId": "2659313", "CreationDate": "2014-04-11T09:13:47.190", "LastActivityDate": "2015-07-06T09:25:24.190", "Title": "how does comparison operator works in case of overflow", "FavoriteCount": "0", "LastEditDate": "2015-07-06T09:25:24.190", "Id": "23008320", "Score": "4", "Body": "<p>i have the following code : </p>\n<pre><code>int main() {\n   int64_t val1 = 0x8000000000000000;\n   int64_t val2 = 0x1c11223344556677;\n   if(val1 &gt; val2) {\n      std::cout &lt;&lt; \"Val1 is greater than val2\"&lt;&lt; std::endl;\n   }\n   else {\n      std::cout &lt;&lt; \"Val2 is greater than val1\"&lt;&lt; std::endl;\n   }\n   return 0;\n}\n</code></pre>\n<p>The get the print for else part of the code. </p>\n<p>i wanted to know how does comparison operator or for that matter any arithmetic operation work in case one of the value exceeds the max value ?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1105325", "AnswerCount": "4"}, "23008479": {"ParentId": "23008320", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The comparison operator works as usual: in this case, <code>val1</code> will be negative (its most significant bit is set!), so it will be less than <code>val2</code>, which is positive. </p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() {\n   int64_t val1 = 0x8000000000000000;\n   int64_t val2 = 0x1c11223344556677;\n   std::cout &lt;&lt; \"val1: \" &lt;&lt; val1 &lt;&lt; std::endl;\n   std::cout &lt;&lt; \"val2: \" &lt;&lt; val2 &lt;&lt; std::endl;\n   if(val1 &gt; val2) {\n      std::cout &lt;&lt; \"Val1 is greater than val2\"&lt;&lt; std::endl;\n   }\n   else {\n      std::cout &lt;&lt; \"Val2 is greater than val1\"&lt;&lt; std::endl;\n   }\n   return 0;\n}\n</code></pre>\n<p>Output (<a href=\"http://ideone.com/Jwj4ob\" rel=\"nofollow\">ideone</a>):</p>\n<pre><code>val1: -9223372036854775808\nval2: 2022435311251187319\nVal2 is greater than val1\n</code></pre>\n", "OwnerUserId": "600135", "LastEditorUserId": "600135", "LastEditDate": "2014-04-11T09:29:58.177", "Id": "23008479", "Score": "1", "CreationDate": "2014-04-11T09:20:31.487", "LastActivityDate": "2014-04-11T09:29:58.177"}, "bq_ids": {"n4140": {"so_23008320_23008478_0": {"section_id": 5937, "quality": 1.0, "length": 13}, "so_23008320_23010167_0": {"section_id": 32, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_23008320_23008478_0": {"section_id": 5709, "quality": 1.0, "length": 13}, "so_23008320_23010167_0": {"section_id": 29, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_23008320_23008478_0": {"section_id": 7421, "quality": 1.0, "length": 13}, "so_23008320_23010167_0": {"section_id": 32, "quality": 0.7857142857142857, "length": 11}}}});