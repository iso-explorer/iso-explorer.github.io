post_cb({"bq_ids": {"n4140": {"so_27348968_27348985_0": {"length": 4, "quality": 0.8, "section_id": 5497}}, "n3337": {"so_27348968_27348985_0": {"length": 4, "quality": 0.8, "section_id": 5283}}, "n4659": {"so_27348968_27348985_0": {"length": 4, "quality": 0.8, "section_id": 6931}}}, "27348968": {"ViewCount": "70", "Body": "<p>For example, I have a class <code>A</code> and a static method <code>foo</code> for the class. I have a namespace <code>nm</code> and want to introduce A::foo to the namespace. I try the following</p>\n<pre><code>namespace nm {\n    using A::foo;\n\n    void f()\n    {\n        foo(...); // use A::foo\n    }\n}\n</code></pre>\n<p>But cannot compile because A is not a namespace, thus using directive does not work here. Any way to implement this idea? I want to use it for QObject::tr and QObject::connect in my GUI project to save some space.</p>\n", "AcceptedAnswerId": "27348985", "Title": "How to introduce a static method of a class to a namespace?", "CreationDate": "2014-12-07T23:08:22.360", "Id": "27348968", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-12-07T23:11:19.730", "Score": "0", "OwnerUserId": "1899020", "Tags": "<c++><c++11><namespaces><using-directives>", "AnswerCount": "1"}, "27348985": {"Id": "27348985", "PostTypeId": "2", "Body": "<p>Not directly. [namespace.udecl]/8:</p>\n<blockquote>\n<p id=\"so_27348968_27348985_0\">A <em>using-declaration</em> for a class member shall be a <em>member-declaration</em>. [ <em>Example:</em></p>\n<pre><code>struct X {\n  int i;\n  static int s;\n}\n\nvoid f() {\n  using X::i; // error: X::i is a class member\n              // and this is not a member declaration.\n  using X::s; // error: X::s is a class member\n              // and this is not a member declaration.\n}\n</code></pre>\n<p id=\"so_27348968_27348985_1\"><em>\u2014 end example</em> ]</p>\n</blockquote>\n<p>But you can simulate <code>foo</code> using SFINAE and perfect forwarding:</p>\n<pre><code>template &lt;typename... Args&gt;\nauto foo(Args&amp;&amp;... args)\n  -&gt; decltype(A::foo(std::forward&lt;Args&gt;(args)...))\n{\n    return    A::foo(std::forward&lt;Args&gt;(args)...);\n}\n</code></pre>\n", "LastActivityDate": "2014-12-07T23:11:19.730", "Score": "3", "CreationDate": "2014-12-07T23:11:19.730", "ParentId": "27348968", "CommentCount": "2", "OwnerUserId": "3647361"}});