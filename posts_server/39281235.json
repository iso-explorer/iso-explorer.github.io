post_cb({"39281264": {"ParentId": "39281235", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>No, <code>sizeof( int() )</code> is ill-formed because <code>int()</code> is taken to be a <em>type-id</em>. Specifically, it's a function type, and <code>sizeof</code> cannot be applied to a function type.</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/dcl.ambig.res#2\">[dcl.ambig.res]/2</a>:</p>\n<blockquote>\n<p id=\"so_39281235_39281264_0\">An ambiguity can arise from the similarity between a function-style\n  cast and a <em>type-id</em>. The resolution is that any construct that could\n  possibly be a <em>type-id</em> in its syntactic context shall be considered a\n  <em>type-id</em>.</p>\n</blockquote>\n<p>with this exact example given:</p>\n<blockquote id=\"so_39281235_39281264_1\">\n<pre><code>void foo(signed char a) {\n    sizeof(int());                // type-id (ill-formed)\n    sizeof(int(a));               // expression\n    sizeof(int(unsigned(a)));     // type-id (ill-formed)\n</code></pre>\n</blockquote>\n", "OwnerUserId": "2756719", "LastEditorUserId": "827263", "LastEditDate": "2016-09-01T22:35:06.993", "Id": "39281264", "Score": "22", "CreationDate": "2016-09-01T21:38:03.970", "LastActivityDate": "2016-09-01T22:35:06.993"}, "39281235": {"CommentCount": "3", "CreationDate": "2016-09-01T21:35:16.737", "PostTypeId": "1", "AcceptedAnswerId": "39281264", "LastEditorUserId": "-1", "LastActivityDate": "2016-09-02T23:21:08.023", "LastEditDate": "2017-05-23T12:25:24.347", "ViewCount": "318", "FavoriteCount": "1", "Title": "Is sizeof(int()) a legal expression?", "Id": "39281235", "Score": "20", "Body": "<p>This question is inspired by <a href=\"https://stackoverflow.com/questions/39278200/is-sizeofvoid-a-legal-expression\">Is sizeof(void()) a legal expression?</a> but with an important difference as explained below.</p>\n<p>The expression in question is:</p>\n<pre><code>sizeof( int() )\n</code></pre>\n<p>In the C++ grammar there appears:</p>\n<blockquote>\n<p id=\"so_39281235_39281235_0\"><em>unary-expression:</em></p>\n<ul>\n<li><code>sizeof</code> <em>unary-expression</em></li>\n<li><code>sizeof (</code> <em>type-id</em> <code>)</code></li>\n</ul>\n</blockquote>\n<p>however, <code>( int() )</code> can match both of these cases with different meanings:</p>\n<ul>\n<li>As a <em>unary-expression</em>, it is a value-initialized <code>int</code> prvalue, surrounded in redundant parentheses</li>\n<li>As a <em>type-id</em>, it is the type of a function with no parameters returning <code>int</code>.</li>\n</ul>\n<p>In the semantic constraints for <code>sizeof</code>, i.e. C++14 [expr.sizeof]/1, it explains that the form <code>sizeof(</code> <em>type-id</em> <code>)</code> may not be applied to a function type.</p>\n<p>However I'm not sure whether the violation of that semantic constraint implies that <code>sizeof( int() )</code> is correct and uses the <code>sizeof</code> <em>unary-expression</em> form; or whether there is some other rule that disambiguates the two cases at an earlier stage of grammar matching.</p>\n<p>NB. For the other question <code>sizeof(void())</code>, neither interpretation is valid, so it could be argued that the compiler is correct to reject the expression with an error message indicating it matched the <em>type-id</em> form. However, gcc rejects <code>sizeof( int() )</code> with a message about <em>type-id</em>.</p>\n<p>To be clear, my question is: \"Is <code>sizeof( int() )</code> a legal expression?\", particularly on the detail of how the grammar matching works when both of the above bulleted cases match.</p>\n", "Tags": "<c++><language-lawyer><grammar>", "OwnerUserId": "1505939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39281235_39281264_0": {"section_id": 3202, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_39281235_39281264_0": {"section_id": 3076, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_39281235_39281264_0": {"section_id": 3963, "quality": 0.9444444444444444, "length": 17}}}});