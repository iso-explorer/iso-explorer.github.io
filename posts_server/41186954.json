post_cb({"41186954": {"CommentCount": "7", "ViewCount": "44", "PostTypeId": "1", "LastEditorUserId": "3312772", "CreationDate": "2016-12-16T14:51:07.473", "LastActivityDate": "2016-12-16T15:07:14.367", "Title": "Count function for ordered set/map", "LastEditDate": "2016-12-16T14:58:16.497", "Id": "41186954", "Score": "1", "Body": "<p><code>container.count(val)</code> - gives the frequency of \"val\" in container. Why count need to traverse till end for each value \"val\" in ordered set. My point is for ordered set/map, elements will be in order so we may get the final value of count even before reaching the end. I understand, this doesn't apply for other containers (list, vector etc.).</p>\n<p>Example :- </p>\n<pre><code>set&lt;int, less&lt;int&gt;&gt; s{1, 2, 3, 4, 5, 6};\nint cnt = s.count(2);  // return 1\n</code></pre>\n<p>Since set/map can have count as 0 or 1, once i reach 2 it should break the loop rather than traversing till end. Also, compiler knows the comparator (less or greater). Same can be done for multiset/multimap, only difference is count can be &gt;1.</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "3312772", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41186954_41187238_0": {"section_id": 763, "quality": 0.5714285714285714, "length": 8}}, "n3337": {"so_41186954_41187238_0": {"section_id": 750, "quality": 0.5714285714285714, "length": 8}}, "n4659": {"so_41186954_41187238_0": {"section_id": 802, "quality": 0.5714285714285714, "length": 8}}}, "41187238": {"ParentId": "41186954", "CommentCount": "0", "Body": "<p>From <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4618.pdf\" rel=\"nofollow noreferrer\">n4618</a>, \u00a7 23.2.6, page 848</p>\n<h3>Associative container requirements</h3>\n<blockquote>\n<p id=\"so_41186954_41187238_0\">Expression: <code>b.count(k)</code><br>\n  Return type: <code>size_type</code><br>\n  Assertion/note/pre-/post-condition: returns the number of elements with key equivalent to <code>k</code><br>\n  Complexity: <code>log(b.size()) + b.count(k)</code> </br></br></br></p>\n</blockquote>\n<p>This means that, by definition, these functions cannot count every element of the container before deciding what the count of <code>k</code> is.</p>\n", "OwnerUserId": "2700399", "PostTypeId": "2", "Id": "41187238", "Score": "2", "CreationDate": "2016-12-16T15:07:14.367", "LastActivityDate": "2016-12-16T15:07:14.367"}});