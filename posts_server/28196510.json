post_cb({"bq_ids": {"n4140": {"so_28196510_28197139_0": {"length": 18, "quality": 1.0, "section_id": 31}}, "n3337": {"so_28196510_28197139_0": {"length": 18, "quality": 1.0, "section_id": 28}}, "n4659": {"so_28196510_28197139_0": {"length": 18, "quality": 1.0, "section_id": 31}}}, "28196510": {"ViewCount": "198", "Body": "<p>I wanted to see what was happening behind the scenes when an <code>unsigned long long</code> was assigned the value of an <code>unsigned int</code>. I made a simple C++ program to try it out and moved all the io out of main():</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n\nvoid usage() {\n        std::cout &lt;&lt; \"Usage: ./u_to_ull &lt;unsigned int&gt;\\n\";\n        exit(0);\n}\n\nvoid atoiWarning(int foo) {\n        std::cout &lt;&lt; \"WARNING: atoi() returned \" &lt;&lt; foo &lt;&lt; \" and (unsigned int)foo is \" &lt;&lt;\n ((unsigned int)foo) &lt;&lt; \"\\n\";\n}\n\nvoid result(unsigned long long baz) {\n        std::cout &lt;&lt; \"Result as unsigned long long is \" &lt;&lt; baz &lt;&lt; \"\\n\";\n}\n\nint main(int argc, char** argv) {\n        if (argc != 2) usage();\n\n        int foo = atoi(argv[1]);\n        if (foo &lt; 0) atoiWarning(foo);\n\n        // Signed to unsigned\n        unsigned int bar = foo;\n\n        // Conversion\n        unsigned long long baz = -1;\n        baz = bar;\n\n        result(baz);\n\n        return 0;\n}\n</code></pre>\n<p>The resulting assembly produced this for main:</p>\n<pre><code>0000000000400950 &lt;main&gt;:\n  400950:       55                      push   %rbp\n  400951:       48 89 e5                mov    %rsp,%rbp\n  400954:       48 83 ec 20             sub    $0x20,%rsp\n  400958:       89 7d ec                mov    %edi,-0x14(%rbp)\n  40095b:       48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  40095f:       83 7d ec 02             cmpl   $0x2,-0x14(%rbp)\n  400963:       74 05                   je     40096a &lt;main+0x1a&gt;\n  400965:       e8 3a ff ff ff          callq  4008a4 &lt;_Z5usagev&gt;\n  40096a:       48 8b 45 e0             mov    -0x20(%rbp),%rax\n  40096e:       48 83 c0 08             add    $0x8,%rax\n  400972:       48 8b 00                mov    (%rax),%rax\n  400975:       48 89 c7                mov    %rax,%rdi\n  400978:       e8 0b fe ff ff          callq  400788 &lt;atoi@plt&gt;\n  40097d:       89 45 f0                mov    %eax,-0x10(%rbp)\n  400980:       83 7d f0 00             cmpl   $0x0,-0x10(%rbp)\n  400984:       79 0a                   jns    400990 &lt;main+0x40&gt;\n  400986:       8b 45 f0                mov    -0x10(%rbp),%eax\n  400989:       89 c7                   mov    %eax,%edi\n  40098b:       e8 31 ff ff ff          callq  4008c1 &lt;_Z11atoiWarningi&gt;\n  400990:       8b 45 f0                mov    -0x10(%rbp),%eax\n  400993:       89 45 f4                mov    %eax,-0xc(%rbp)\n  400996:       48 c7 45 f8 ff ff ff    movq   $0xffffffffffffffff,-0x8(%rbp)\n  40099d:       ff\n  40099e:       8b 45 f4                mov    -0xc(%rbp),%eax\n  4009a1:       48 89 45 f8             mov    %rax,-0x8(%rbp)\n  4009a5:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n  4009a9:       48 89 c7                mov    %rax,%rdi\n  4009ac:       e8 66 ff ff ff          callq  400917 &lt;_Z6resulty&gt;\n  4009b1:       b8 00 00 00 00          mov    $0x0,%eax\n  4009b6:       c9                      leaveq\n  4009b7:       c3                      retq\n</code></pre>\n<p>The <code>-1</code> from the C++ makes it clear that <code>-0x8(%rbp)</code> corresponds to <code>baz</code> (due to <code>$0xffffffffffffffff</code>). <code>-0x8(%rbp)</code> is written to by <code>%rax</code>, but the top four bytes of <code>%rax</code> appear to not have been assigned, <code>%eax</code>was assigned</p>\n<p>Does this suggest that the top 4 bytes of <code>-0x8(%rbp)</code> are undefined?</p>\n", "AcceptedAnswerId": "28197130", "Title": "Unsigned int to unsigned long long well defined?", "CreationDate": "2015-01-28T15:48:09.587", "Id": "28196510", "CommentCount": "8", "LastEditDate": "2015-02-10T11:49:19.253", "PostTypeId": "1", "LastEditorUserId": "194894", "LastActivityDate": "2015-02-10T11:49:19.253", "Score": "5", "OwnerUserId": "1722025", "Tags": "<c++><assembly><x86><x86-64><unsigned-integer>", "AnswerCount": "2"}, "28197139": {"Id": "28197139", "PostTypeId": "2", "Body": "<p>From C++98 (and C++11 seems to be unchanged) 4.7/2 (integral conversions - no promotions are relevant) we learn:</p>\n<blockquote>\n<p id=\"so_28196510_28197139_0\">If the destination type is unsigned, the resulting value is the least\n  unsigned integer congruent to the source integer (modulo 2n where n is\n  the number of bits used to represent the unsigned type).</p>\n</blockquote>\n<p>This clearly shows that as long as the source and destination are unsigned and the destination is at least as large as the source, the value will be unchanged. If the compiler generated code that failed to make the larger value equal, the compiler is buggy.</p>\n", "LastActivityDate": "2015-01-28T16:16:56.963", "CommentCount": "0", "CreationDate": "2015-01-28T16:16:56.963", "ParentId": "28196510", "Score": "3", "OwnerUserId": "251738"}, "28197130": {"Id": "28197130", "PostTypeId": "2", "Body": "<p>In the <a href=\"http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\" rel=\"nofollow\">Intel\u00ae 64 and IA-32 Architectures Software Developer Manuals</a>, volume 1, chapter 3.4.1.1 (General-Purpose Registers in 64-Bit Mode), it says</p>\n<blockquote>\n<p id=\"so_28196510_28197130_0\">32-bit operands generate a 32-bit result, zero-extended to a 64-bit result in the destination general-purpose register.</p>\n</blockquote>\n<p>So after <code>mov -0xc(%rbp),%eax</code>, the upper half of <code>rax</code> <em>is</em> defined, and it's zero.</p>\n<p>This also applies to the <code>87 C0</code> encoding of <code>xchg eax, eax</code>, but not to its <code>90</code> encoding (which is defined as <code>nop</code>, overruling the rule quoted above).</p>\n", "LastEditorUserId": "555045", "LastActivityDate": "2015-01-28T16:29:40.377", "Score": "5", "CreationDate": "2015-01-28T16:16:32.823", "ParentId": "28196510", "CommentCount": "1", "OwnerUserId": "555045", "LastEditDate": "2015-01-28T16:29:40.377"}});