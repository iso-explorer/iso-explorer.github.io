post_cb({"bq_ids": {"n4140": {"so_16910009_16910285_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 268}}, "n3337": {"so_16910009_16910285_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 259}}, "n4659": {"so_16910009_16910285_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 275}}}, "16910172": {"Id": "16910172", "PostTypeId": "2", "Body": "<p>There are several problems :</p>\n<ul>\n<li>you do not need to explicitly instantiate fully specialized template</li>\n<li>if you want to put your static method in the header, then use <code>inline</code>. Otherwise you will get multiple instances and linker problems</li>\n<li>template specializations you put in the header, and define methods in the source files</li>\n<li>if you do not want something to be called in a template, you don't need to define it. You'll get compiler errors, and that means catching errors earlier.</li>\n</ul>\n<hr>\n<pre><code>// TemplateTest.h\n#include&lt;iostream&gt;\n\ntemplate&lt;class T, class U&gt;\nstruct TemplateTest;\ntemplate&lt;&gt;\nstruct TemplateTest&lt;int, bool&gt;\n{\n    inline static void invoke()\n    {\n        std::cout &lt;&lt; \"invoke&lt;int, bool&gt;\" &lt;&lt; std::endl;   \n    }\n};\n\n// main.cpp\ninclude \"TemplateTest.h\"\n\nint main()\n{\n    TemplateTest&lt;int, bool&gt;::invoke();\n}\n</code></pre>\n<p>Another way is to change the header, and add the source file.</p>\n<pre><code>// TemplateTest.h\n#include&lt;iostream&gt;\n\ntemplate&lt;class T, class U&gt;\nstruct TemplateTest;\n\ntemplate&lt;&gt;\nstruct TemplateTest&lt;int, bool&gt;\n{\n    static void invoke();\n};\n\n// TemplateTest.cpp\n#include \"TemplateTest.h\"\nvoid TemplateTest&lt;int, bool&gt;::invoke()\n{\n  std::cout &lt;&lt; \"invoke&lt;int, bool&gt;\" &lt;&lt; std::endl;   \n}\n</code></pre>\n</hr>", "LastEditorUserId": "476681", "LastActivityDate": "2013-06-04T05:12:55.723", "Score": "3", "CreationDate": "2013-06-04T05:07:03.880", "ParentId": "16910009", "CommentCount": "3", "OwnerUserId": "476681", "LastEditDate": "2013-06-04T05:12:55.723"}, "16910009": {"ViewCount": "2896", "Body": "<p>I am struggling to access static member function defined inside class template. \nIn the header file TemplateTest.h  I defined the primary class Template as:</p>\n<pre><code>#include&lt;iostream&gt;\n\ntemplate&lt;class T, class U&gt;\nstruct TemplateTest\n{\npublic:\n    void static invoke();\n    /*{\n\n        std::cout &lt;&lt; \"Should not be called\" &lt;&lt; std::endl;\n\n    }*/\n};\n</code></pre>\n<p>Then Source File TemplateTester.cpp I put a specialization:</p>\n<pre><code>#include \"TemplateTest.h\"\n\ntemplate&lt;&gt;\nstruct TemplateTest&lt;int, bool&gt;\n{\n    static void invoke()\n    {\n        std::cout &lt;&lt; \"invoke&lt;int, bool&gt;\" &lt;&lt; std::endl;   \n    }\n};\n\ntemplate struct TemplateTest&lt;int, bool&gt;; //instantiate to resolve linker issue\n</code></pre>\n<p>I explicitly instantiated the class with  so linker resolves correctly.</p>\n<p>In the driver driver.cpp :</p>\n<pre><code>include \"TemplateTest.h\"\n\nint main()\n{\n    TemplateTest&lt;int, bool&gt;::invoke();\n    return 0;\n}\n</code></pre>\n<p>When I compile the TemplateTest.cpp with g++ it generates the object file correctly but when I try to link it to the driver class it gives my linker error \"undefined reference to `TemplateTest::invoke()\"</p>\n<p>I went through other related postings like <a href=\"https://stackoverflow.com/questions/9033450/specialization-of-static-method-template-in-class-template\">this one</a> but I am not trying access a function template. </p>\n<p>Any clue is much appreciated.</p>\n", "AcceptedAnswerId": "16910285", "Title": "static member function inside class template specialization", "CreationDate": "2013-06-04T04:47:56.990", "Id": "16910009", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:28:57.650", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-04T05:16:58.850", "Score": "7", "OwnerUserId": "775790", "Tags": "<c++><templates><static><instantiation><specialization>", "AnswerCount": "2"}, "16910285": {"Id": "16910285", "PostTypeId": "2", "Body": "<p>You are right that the object file you create from <code>TemplateTester.cpp</code> will contain a symbol for the specialization you provided. This is the case because any explicit specialization causes the template to be instantiated, and it is doubly the case because you even added an explicit instantiation (which is actually unnecessary).</p>\n<p>However, at the time when <code>driver.cpp</code> is compiled, the compiler does not know about the specialization, because you only include <code>TemplateTester.h</code>, and the specialization isn't mentioned there. So the compiler <em>instantiates</em> the template, of course not using the specialized definition, so you get your problem.</p>\n<p>The Standard says (Italics by me):</p>\n<blockquote>\n<p id=\"so_16910009_16910285_0\">(\u00a714.7.3/6) If a template, a member template or a member of a class template is explicitly specialized then that specialization shall be declared before the first use of that specialization that would cause an implicit instantiation to take place, <em>in every translation unit in which such a use occurs;</em> no diagnostic is required. If the program does not provide a definition for an explicit specialization and either the specialization is used in a way that would cause an implicit instantiation to take place or the member is a virtual member function, the program is ill-formed, no diagnostic required. An implicit instantiation is never generated for an explicit specialization that is declared but not defined. [...]</p>\n</blockquote>\n<p>So you need to make both, the declaration and the definition of the specialization known to the compiler when it works on <code>driver.cpp</code>. The best way of doing this is by adding the entire specialization to <code>TemplateTester.h</code>.</p>\n<p>Note, again, that an explicit instantiation is not actually required.</p>\n", "LastActivityDate": "2013-06-04T05:16:58.850", "CommentCount": "1", "CreationDate": "2013-06-04T05:16:58.850", "ParentId": "16910009", "Score": "5", "OwnerUserId": "777186"}});