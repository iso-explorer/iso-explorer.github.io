post_cb({"15814019": {"ParentId": "15813975", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You're pointing <code>c</code> to a string literal, most likely stored in the read only memory segment, you can't change it. Even if you <em>can</em> physically change it, as per the C spec:</p>\n<p>6.4.5 (String Literals)</p>\n<blockquote>\n<p id=\"so_15813975_15814019_0\">If the program attempts to modify [a string literal], the behavior is undefined.</p>\n</blockquote>\n<p>If you allocate memory on the heap (or stack) and then copy the string to that location, you can change it as you see fit.</p>\n", "OwnerUserId": "1348709", "LastEditorUserId": "1348709", "LastEditDate": "2013-04-04T14:31:33.863", "Id": "15814019", "Score": "3", "CreationDate": "2013-04-04T14:25:57.917", "LastActivityDate": "2013-04-04T14:31:33.863"}, "15814065": {"ParentId": "15813975", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Strings like <code>char * c = \"Hello\";</code> are string constants and are stored in read only data segment so you can't modify them [But some compilers do allow that]</p>\n<p>Heap allocated strings are not in read only segments and are hence free to be modified.</p>\n", "OwnerUserId": "2087705", "LastEditorUserId": "2087705", "LastEditDate": "2013-04-09T07:40:52.130", "Id": "15814065", "Score": "-1", "CreationDate": "2013-04-04T14:27:34.823", "LastActivityDate": "2013-04-09T07:40:52.130"}, "15813998": {"ParentId": "15813975", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>char* c = \"Hello World!\";\n</code></pre>\n<p>Here <code>c</code> is a pointer which point to a literal string so you can not modify it</p>\n<p>You can use this instead</p>\n<pre><code>char c[] = \"Hello World!\";\n*c = 'h',\n</code></pre>\n<p><code>c</code> here is an array of char and contains the chars of the string <code>\"Hello World!\"</code> so you can modify it.</p>\n", "OwnerUserId": "1003575", "LastEditorUserId": "1003575", "LastEditDate": "2013-04-04T14:32:57.453", "Id": "15813998", "Score": "3", "CreationDate": "2013-04-04T14:25:16.327", "LastActivityDate": "2013-04-04T14:32:57.453"}, "15814008": {"ParentId": "15813975", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><code>char* c = \"Hello World!\";</code> is a pointer to a string literal which is typically stored in a read-only memory segment. Attempting to modify it is undefined behaviour. Pointers to string literals such as this should more properly be defined as</p>\n<pre><code>const char *c = \"Hello World!\";\n</code></pre>\n<p>but the <code>const</code> is often omitted (in C, at least).</p>\n", "OwnerUserId": "253056", "LastEditorUserId": "253056", "LastEditDate": "2013-04-04T14:35:33.807", "Id": "15814008", "Score": "6", "CreationDate": "2013-04-04T14:25:29.787", "LastActivityDate": "2013-04-04T14:35:33.807"}, "15813975": {"CommentCount": "6", "ViewCount": "266", "PostTypeId": "1", "ClosedDate": "2013-04-04T14:37:05.080", "LastEditorUserId": "661519", "CreationDate": "2013-04-04T14:24:13.763", "LastActivityDate": "2013-04-09T07:40:52.130", "Title": "Access violation when overwriting c string", "AcceptedAnswerId": "15814008", "LastEditDate": "2013-04-04T14:27:13.900", "Id": "15813975", "Score": "0", "Body": "<p>I'm a little perplexed why the following blows up:</p>\n<pre><code>char* c = \"Hello World!\";\n*c = 'h';\n</code></pre>\n<p>When I allocate the string on the heap it works. So I'm just curious what wrong with my initial version.</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1391466", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_15813975_15814019_0": {"section_id": 526, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_15813975_15814019_0": {"section_id": 517, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_15813975_15814019_0": {"section_id": 547, "quality": 0.6666666666666666, "length": 4}}}, "15813999": {"ParentId": "15813975", "CommentCount": "1", "Body": "<p>Modifying string literals is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behaviour</a>. The main reason for that is that the compiler is permitted to place <code>\"Hello World!\"</code> in read-only memory.</p>\n<p>On the other hand, the following is fine:</p>\n<pre><code>char c[] = \"Hello World!\";\n*c = 'h';\n</code></pre>\n", "OwnerUserId": "367273", "PostTypeId": "2", "Id": "15813999", "Score": "2", "CreationDate": "2013-04-04T14:25:16.260", "LastActivityDate": "2013-04-04T14:25:16.260"}});