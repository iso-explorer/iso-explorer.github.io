post_cb({"15413119": {"ParentId": "15413037", "CommentCount": "0", "Body": "<p>A type is \"cv-unqualified\" if it doesn't have any cv-qualifiers. A cv-qualifer is either <code>const</code> or <code>volatile</code>.</p>\n", "OwnerUserId": "1568792", "PostTypeId": "2", "Id": "15413119", "Score": "24", "CreationDate": "2013-03-14T15:15:23.757", "LastActivityDate": "2013-03-14T15:15:23.757"}, "15413389": {"ParentId": "15413037", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><em><strong>cv-unqualified type</strong></em></p> is a type that hasn't been specified by any of <em>cv-qualifiers</em>. These define two basic properties of a type: <strong><em>constness</em></strong> and <strong><em>volatility</em></strong>. \nSee <em>C++03 3.9.3 CV-qualifiers \u00a71:</em>\n<blockquote>\n<p id=\"so_15413037_15413389_0\">A type mentioned in 3.9.1 and 3.9.2 is a <strong><em>cv-unqualified type</em></strong>. Each type which is a cv-unqualified complete or incomplete object type or is void (3.9) has three corresponding cv-qualified versions of its type:</p>\n<ul>\n<li>a <em>const-qualified</em> version,</li>\n<li>a <em>volatile-qualified</em> version, and</li>\n<li>a <em>const-volatile-qualified</em> version. </li>\n</ul>\n<p id=\"so_15413037_15413389_1\">The term object type (1.8) includes the cv-qualifiers specified when the object is created. </p>\n<p id=\"so_15413037_15413389_2\">The presence of a <strong><code>const</code></strong> specifier in a decl-specifier-seq declares an object of <strong><em>const-qualified</em></strong> object type; such object is called a <strong><code>const object</code></strong>.</p>\n<p id=\"so_15413037_15413389_3\">The presence of a <strong><code>volatile</code></strong> specifier in a decl-specifier-seq declares an object of <strong><em>volatilequalified</em></strong> object type; such object is called a <strong><code>volatile object</code></strong>.</p>\n<p id=\"so_15413037_15413389_4\">The presence of both cv-qualifiers in a declspecifier-seq declares an object of <strong><em>const-volatile-qualified</em></strong> object type; such object is called a <strong><code>const volatile object</code></strong>.</p>\n</blockquote>\n", "OwnerUserId": "1168156", "LastEditorUserId": "1168156", "LastEditDate": "2013-03-14T15:31:50.530", "Id": "15413389", "Score": "9", "CreationDate": "2013-03-14T15:26:46.873", "LastActivityDate": "2013-03-14T15:31:50.530"}, "15413151": {"ParentId": "15413037", "CommentCount": "0", "Body": "<p>Generally it means \"the same type, but with any cv-qualifier removed\", so (for example) the cv-unqualified version of <code>void volatile * const x</code> would be <code>void *x</code>.</p>\n<p>Note that here, however, I'm removing the cv-qualifiers from both the pointer itself <em>and</em> what it points at. In most cases, <code>cv-unqualified</code> will refer only to one object at a time, so a cv-unqualified version of the pointer itself would still be <code>void volatile *x</code>, whereas a cv-unqualfied version of what it points at would be <code>void *const x</code>.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "15413151", "Score": "2", "CreationDate": "2013-03-14T15:16:33.100", "LastActivityDate": "2013-03-14T15:16:33.100"}, "15413196": {"ParentId": "15413037", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>cv stands for <code>const</code> and <code>volatile</code> (and more rarely <code>mutable</code>), two attributes qualifying a type. You can manipulate them with <code>std::remove_const</code> and the like in C++11.</p>\n<p>The excellent cppreference site <a href=\"http://en.cppreference.com/w/cpp/language/cv\" rel=\"noreferrer\">gives you more</a> info.</p>\n<p>To answer your question, a cv-unqualified type either doesn't have or is stripped from its cv-qualifiers. For instance <code>int</code> is the cv-unqualified part of <code>const volatile int</code>.</p>\n<p><code>std::remove_cv&lt;T&gt;::type</code> is the cv-unqualified partof <code>T</code>.</p>\n", "OwnerUserId": "762488", "LastEditorUserId": "762488", "LastEditDate": "2013-03-14T15:36:39.003", "Id": "15413196", "Score": "6", "CreationDate": "2013-03-14T15:18:08.827", "LastActivityDate": "2013-03-14T15:36:39.003"}, "15413274": {"ParentId": "15413037", "CommentCount": "1", "Body": "<p>There are fundamental types and compound types. Fundamental types are the arithmetic types, <code>void</code>, and <code>std::nullptr_t</code>. Compound types are arrays, functions, pointers, references, classes, unions, enumerations, and pointers to non-static members.</p>\n<p>A <em>cv-unqualified</em> type is any of those types.</p>\n<p>For any cv-unqualified type, there are three corresponding <em>cv-qualified</em> types:</p>\n<ul>\n<li><em>const-qualified</em> - with the <code>const</code> cv-qualifier </li>\n<li><em>volatile-qualified</em> - with the <code>volatile</code> cv-qualifier </li>\n<li><em>const-volatile-qualified</em> - with both the <code>const</code> and <code>volatile</code> cv-qualifiers</li>\n</ul>\n<p>Note, however, that cv-qualifiers applied to an array type actually apply to its elements.</p>\n<p>The cv-qualified and cv-unqualified types are distinct. That is <code>int</code> is a distinct type from <code>const int</code>.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "15413274", "Score": "28", "CreationDate": "2013-03-14T15:21:08.900", "LastActivityDate": "2013-03-14T15:21:08.900"}, "bq_ids": {"n4140": {"so_15413037_15413389_0": {"section_id": 7225, "quality": 0.85, "length": 17}, "so_15413037_15413389_2": {"section_id": 7225, "quality": 0.5333333333333333, "length": 8}, "so_15413037_15413389_1": {"section_id": 7225, "quality": 0.8, "length": 8}, "so_15413037_15413389_4": {"section_id": 7225, "quality": 0.625, "length": 10}, "so_15413037_15413389_3": {"section_id": 7225, "quality": 0.5333333333333333, "length": 8}}, "n3337": {"so_15413037_15413389_0": {"section_id": 6969, "quality": 0.85, "length": 17}, "so_15413037_15413389_2": {"section_id": 6969, "quality": 0.8, "length": 12}, "so_15413037_15413389_1": {"section_id": 6969, "quality": 0.8, "length": 8}, "so_15413037_15413389_4": {"section_id": 6969, "quality": 0.8125, "length": 13}, "so_15413037_15413389_3": {"section_id": 6969, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_15413037_15413389_0": {"section_id": 8735, "quality": 0.8, "length": 16}, "so_15413037_15413389_3": {"section_id": 8735, "quality": 0.5333333333333333, "length": 8}, "so_15413037_15413389_4": {"section_id": 8735, "quality": 0.625, "length": 10}, "so_15413037_15413389_2": {"section_id": 8735, "quality": 0.5333333333333333, "length": 8}, "so_15413037_15413389_1": {"section_id": 8735, "quality": 0.8, "length": 8}}}, "15413037": {"CommentCount": "4", "AcceptedAnswerId": "15413274", "CreationDate": "2013-03-14T15:12:03.170", "LastActivityDate": "2013-03-14T15:36:39.003", "PostTypeId": "1", "ViewCount": "5060", "FavoriteCount": "8", "Title": "What does \"cv-unqualified\" mean in C++?", "Id": "15413037", "Score": "25", "Body": "<p>As from subject. I saw this terminology in a question I recently asked, and apparently it's a well established term, but I am not able to find anything on stackoverflow.</p>\n", "Tags": "<c++>", "OwnerUserId": "78374", "AnswerCount": "5"}});