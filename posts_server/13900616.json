post_cb({"bq_ids": {"n4140": {"so_13900616_13900722_0": {"length": 60, "quality": 0.9375, "section_id": 563}}, "n3337": {"so_13900616_13900722_0": {"length": 60, "quality": 0.9375, "section_id": 554}}, "n4659": {"so_13900616_13900722_0": {"length": 60, "quality": 0.9375, "section_id": 586}}}, "13900722": {"Id": "13900722", "PostTypeId": "2", "Body": "<p>This is handled in section 13.3 of the standard. Paragraph 13.3/1 states:</p>\n<blockquote>\n<p id=\"so_13900616_13900722_0\">Each of these contexts defines the set of candidate functions and the\n  list of arguments in its own unique way. But, once the candidate\n  functions and argument lists have been identified, the selection of\n  the best function is the same in all cases: \u2014 First, a subset of the\n  candidate functions\u2014those that have the proper number of arguments and\n  meet certain other conditions\u2014is selected to form a set of viable\n  functions (13.3.2). <strong>\u2014 Then the best viable function is selected based\n  on the implicit conversion sequences (13.3.3.1) needed to match each\n  argument to the corresponding parameter of each viable function.</strong></p>\n</blockquote>\n<p>The first one is a better match since it won't involve any implicit conversion.</p>\n", "LastActivityDate": "2012-12-16T11:13:03.293", "Score": "5", "CreationDate": "2012-12-16T11:13:03.293", "ParentId": "13900616", "CommentCount": "1", "OwnerUserId": "125672"}, "13900616": {"ViewCount": "476", "Body": "<p>Consider the following function declaration :</p>\n<pre><code>template&lt;typename T&gt; f(const T&amp; x); // Version 1\ntemplate&lt;typename T1, typename T2&gt; f(const MyClass&lt;T1, T2&gt;&amp; x); // Version 2\n</code></pre>\n<p>If I call <code>f</code> with a type with no relation with <code>MyClass</code>, the first version will be called. If I call <code>f</code> with a <code>MyClass</code> type (whatever the template parameters type are) then the second version will be called. But now, consider :</p>\n<pre><code>template&lt;typename T1, typename T2, typename T3&gt;\nMyDerivedClass : public MyClass&lt;T1, T2&gt; {};\n</code></pre>\n<p>What version of the function will be called for a <code>MyDerivedClass</code> type ?</p>\n", "AcceptedAnswerId": "13900722", "Title": "Function overloading and template deduction priority", "CreationDate": "2012-12-16T10:58:06.833", "Id": "13900616", "CommentCount": "1", "LastEditDate": "2012-12-16T13:42:09.477", "PostTypeId": "1", "LastEditorUserId": "882932", "LastActivityDate": "2012-12-16T13:42:09.477", "Score": "4", "OwnerUserId": "882932", "Tags": "<c++><class><templates><c++11><overloading>", "AnswerCount": "1"}});