post_cb({"7787124": {"ParentId": "7787059", "CommentCount": "1", "Body": "<p>The declaration of <code>MyClass::log</code> in the class definition gets <code>C++</code> linkage despite the <code>extern \"C\"</code>, because static class members simply don't exist in <code>C</code>. But for some reason, the definition of <code>MyClass::log</code> outside the class definition gets <code>C</code> linkage, which doesn't make much sense to me.  </p>\n<p>But you can get around the problem by removing the definition from the scope of the <code>extern \"C\"</code>. Why are you using <code>extern \"C\"</code>in a C++ file anyway?</p>\n", "OwnerUserId": "428857", "PostTypeId": "2", "Id": "7787124", "Score": "2", "CreationDate": "2011-10-16T20:33:23.600", "LastActivityDate": "2011-10-16T20:33:23.600"}, "bq_ids": {"n4140": {"so_7787059_7787059_0": {"section_id": 6007, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_7787059_7787059_0": {"section_id": 5775, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_7787059_7787059_0": {"section_id": 7506, "quality": 0.5714285714285714, "length": 4}}}, "7787059": {"CommentCount": "3", "ViewCount": "1553", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-10-16T20:21:50.280", "LastActivityDate": "2015-02-13T19:27:31.527", "Title": "g++ Undefined reference static member variable", "AcceptedAnswerId": "7787124", "LastEditDate": "2017-05-23T10:24:12.213", "Id": "7787059", "Score": "1", "Body": "<blockquote>\n<p id=\"so_7787059_7787059_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/272900/c-undefined-reference-to-static-class-member\">C++: undefined reference to static class member</a> </br></p>\n</blockquote>\n<p>I am Compiling this using g++ and a makefile. The g++ version is 4.1.2 20080704.</p>\n<p>Here is the simplified code which still contains the error:</p>\n<pre><code>#ifdef __cplusplus\nextern \"C\" \n{\n#endif\n\n class MyClass\n  {\n    public:\n    MyClass() {};\n    MyClass&amp; operator=(MyClass&amp;);\n    static MyClass&amp; instance() { return log; };\n\n    private:\n    static MyClass log;\n\n  }; \n\n//MyClass MyClass::log;\n\nint main()\n{\n  MyClass&amp; myClass = MyClass::instance();\n  return 0;\n}\n\n#ifdef __cplusplus\n} //extern \"C\" \n#endif\n</code></pre>\n<p>When I compile with 'g++ MyClass.cpp\" I get this error: \n'In Function MyClass::Instance()' : MyClass.cpp : 'Undefined reference to MyClass::log</p>\n<p>If I compile with 'g++ MyClass.cpp -c' It builds the object file, but linking that file causes the same error during linking. I tried defining the static variable with \"MyClass MyClass::log;\" after the class definition, but since it's compiling it in C, I don't think that will work. It gives an error message \"C++ linkage conflicts with new definition with C linkage\"</p>\n<p>I'm not sure how to solve this, I've been banging my head against this for a few days now. Any help is greatly appreciated.</p>\n<p>Extra background info:</p>\n<p>The original cpp file this is derived from contains \"Simulink-defined functions which must use the C-function syntax.\" I'd like to make as few changes as possible to the existing code. I'm not a C programmer, so I have limited understanding here. I do know that these functions are being used with simulink and everything compiles inside the matlab compiler. We are trying to export what simulink created so that we can integrate it in another program, but this is one of the many problems we have compiling. Hopefully that gives some better background info</p>\n", "Tags": "<c++><static><reference><g++><undefined>", "OwnerUserId": "778249", "AnswerCount": "1"}});