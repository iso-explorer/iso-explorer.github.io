post_cb({"bq_ids": {"n4140": {"so_17197000_17197000_0": {"length": 8, "quality": 1.0, "section_id": 6313}}, "n3337": {"so_17197000_17197000_0": {"length": 8, "quality": 1.0, "section_id": 6070}}, "n4659": {"so_17197000_17197000_0": {"length": 8, "quality": 1.0, "section_id": 7823}}}, "17197000": {"ViewCount": "3662", "Body": "<pre><code>#define A(a)  \"str\" ## a ## test\nA(_)\n</code></pre>\n<p>According to <code>17.6.4.3.5</code> in C++11 standard</p>\n<blockquote>\n<p id=\"so_17197000_17197000_0\">Literal suffix identifiers that do not start with an underscore are reserved for future standardization.</p>\n</blockquote>\n<p>the above code should produce <code>\"str\"_test</code> which is a <strong>valid</strong> preprocessing token and it's class <code>user-defined-string-literal</code>.</p>\n<p>clang 3.0 produce error when running in preprocessor mode via <code>-E</code>.</p>\n<p>clang gives:</p>\n<pre><code>pasting formed '\"str\"_', an invalid preprocessing token\nA(_)\n^\nnote: expanded from:\n#define A(a)  \"str\" ## a ## test\n                    ^\n\n\"str\"_test\n1 error generated.\n</code></pre>\n<p>i don't understand what steps made it decide that the result is not a invalid preprocessing token.</p>\n<p>Note: I'm writing a c++11 preprocessor.</p>\n", "AcceptedAnswerId": "17198637", "Title": "error: invalid preprocessing token", "CreationDate": "2013-06-19T16:54:23.693", "Id": "17197000", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-06-19T18:45:52.623", "LastEditorUserId": "235860", "LastActivityDate": "2013-06-19T18:45:52.623", "Score": "4", "OwnerUserId": "235860", "Tags": "<c++11>", "AnswerCount": "1"}, "17198637": {"Id": "17198637", "PostTypeId": "2", "Body": "<p>I <em>think</em> the code is valid C++11; it looks like you're using a compiler with incomplete C++11 support.</p>\n<p>Using g++ version 4.7.2 (with <code>-std=c++11</code>), this contrived program:</p>\n<pre><code>#include &lt;cstddef&gt;\n#include &lt;iostream&gt;\n\n#define A(a)  \"str\" ## a ## test\n\nconst char* operator\"\" _test(const char s[4], size_t size) {\n    return s;\n}\n\nint main() {\n    std::cout &lt;&lt; A(_) &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>compiles without error and produces this output:</p>\n<pre><code>str\n</code></pre>\n<p>clang++ version 3.0 is less happy; among other errors, it says:</p>\n<pre><code>c.cpp:11:18: error: pasting formed '\"str\"_', an invalid preprocessing token\n    std::cout &lt;&lt; A(_) &lt;&lt; \"\\n\";\n                 ^\nc.cpp:4:21: note: expanded from:\n#define A(a)  \"str\" ## a ## test\n                    ^\n</code></pre>\n", "LastActivityDate": "2013-06-19T18:27:37.390", "CommentCount": "2", "CreationDate": "2013-06-19T18:27:37.390", "ParentId": "17197000", "Score": "2", "OwnerUserId": "827263"}});