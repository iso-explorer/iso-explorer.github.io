post_cb({"bq_ids": {"n4140": {"so_27263729_27263916_0": {"length": 11, "quality": 1.0, "section_id": 6182}}, "n3337": {"so_27263729_27263916_0": {"length": 11, "quality": 1.0, "section_id": 5943}}, "n4659": {"so_27263729_27263916_0": {"length": 11, "quality": 1.0, "section_id": 7684}}}, "27263729": {"ViewCount": "210", "Body": "<p>Is there a way in C and C++ to cause functions returning <em>void</em> to be evaluated in unspecified order?</p>\n<p>I know that function arguments are evaluated in unspecified order so for functions not returning <em>void</em> this can be used to evaluate those functions in unspecified order:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint hi(void) {\n    puts(\"hi\");\n    return 0;\n}\n\nint bye(void) {\n    puts(\"bye\");\n    return 0;\n}\n\nint moo(void) {\n    puts(\"moo\");\n    return 0;\n}\n\nvoid dummy(int a, int b, int c) {}\n\nint main(void) {\n    dummy(hi(), bye(), moo());\n}\n</code></pre>\n<p>Legal C and C++ code compiled by a conforming compiler may print <code>hi</code>, <code>bye</code>, and <code>moo</code> in any order. This is <em>not</em> undefined behavior (<em>nasal demons would not be valid</em>), there is simply more than one but less than infinite valid outputs and a compliant compiler need not even be deterministic in what it produces.</p>\n<p>Is there any way to do this without the dummy return values?</p>\n<p><strong>Clarification:</strong>  This is an abstract question about C and C++. A better original phrasing might have been is there any context in which function evaluation order is unspecified for functions returning void? I'm not trying to solve a specific problem.</p>\n", "AcceptedAnswerId": "27263916", "Title": "Unordered function evaluation for functions returning void", "CreationDate": "2014-12-03T04:37:27.853", "Id": "27263729", "CommentCount": "13", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2014-12-03T19:06:58.530", "LastEditorUserId": "1708801", "LastActivityDate": "2014-12-03T19:06:58.530", "Score": "8", "OwnerUserId": "1128289", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "2"}, "27263916": {"Id": "27263916", "PostTypeId": "2", "Body": "<p>You can take advantage of the fact that the left hand side of a the comma operator is a discarded value expression (<em>void expression in C</em>) like this (<em><a href=\"http://coliru.stacked-crooked.com/a/96bc70b3d32ada4e\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>int main(void) {\n    dummy((hi(),0), (bye(),0), (moo(),0));\n}\n</code></pre>\n<p>From the draft C++ standard section <code>5.18</code> <em>Comma operator</em>:</p>\n<blockquote>\n<p id=\"so_27263729_27263916_0\">A pair of expressions separated by a comma is evaluated left-to-right; the left expression is a discarded-value expression (Clause 5).</p>\n</blockquote>\n<p>and C11 section <code>6.5.17</code> <em>Comma operator</em>:</p>\n<blockquote>\n<p id=\"so_27263729_27263916_1\">The left operand of a comma operator is evaluated as a void expression; there is a\n  sequence point between its evaluation and that of the right operand. Then the right\n  operand is evaluated; the result has its type and value.</p>\n</blockquote>\n<p>As Matt points out is is also possible to mix the above method with arithmetic operators to achieve unspecified order of evaluation:</p>\n<pre><code>(hi(),0) + (bye(),0) + (moo(),0) ;\n</code></pre>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-12-03T10:34:12.810", "Score": "9", "CreationDate": "2014-12-03T04:55:12.613", "ParentId": "27263729", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2014-12-03T10:34:12.810"}, "27263771": {"Id": "27263771", "PostTypeId": "2", "Body": "<p>Well there's always the obvious approach of putting pointers to the functions in a container, shuffling it up (or as suggested in a comment sorting it), and calling each item in the container. If you need to have the same behavior each run just make sure your seed is the same each time.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2014-12-03T05:11:52.923", "Score": "-1", "CreationDate": "2014-12-03T04:41:59.530", "ParentId": "27263729", "CommentCount": "4", "OwnerUserId": "251738", "LastEditDate": "2014-12-03T05:11:52.923"}});