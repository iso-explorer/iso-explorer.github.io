post_cb({"bq_ids": {"n4140": {"so_25661817_25661986_1": {"length": 40, "quality": 1.0, "section_id": 268}, "so_25661817_25661986_0": {"length": 127, "quality": 0.9921875, "section_id": 269}}, "n3337": {"so_25661817_25661986_1": {"length": 40, "quality": 1.0, "section_id": 259}, "so_25661817_25661986_0": {"length": 105, "quality": 0.8203125, "section_id": 260}}, "n4659": {"so_25661817_25661986_1": {"length": 40, "quality": 1.0, "section_id": 275}, "so_25661817_25661986_0": {"length": 127, "quality": 0.9921875, "section_id": 276}}}, "25661817": {"ViewCount": "423", "Body": "<p>I'm using CRT pattern and want the base class to see <code>typedef</code>s from the derived class. In <a href=\"https://stackoverflow.com/questions/6006614/c-static-polymorphism-crtp-and-using-typedefs-from-derived-classes\">this post</a>  @James McNellis suggested to do that using <code>base_traits</code> class and it works fine. But in the case described in that post the derived class itself is a template. This approach does not work in VS2010 when the derived class is not a template. </p>\n<pre><code>template &lt;class D&gt;\nstruct base_traits;\ntemplate &lt;class D&gt;\nstruct base\n{\n    typedef typename base_traits&lt;D&gt;::value_t value_t;\n};\n\nstruct derived : base&lt;derived&gt;\n{\n    typedef typename base_traits&lt;derived&gt;::value_t value_t;\n};\n\ntemplate&lt;&gt;\nstruct base_traits&lt;derived&gt;\n{\n    typedef int value_t;\n};\n</code></pre>\n<p>The above code gives lots of errors. The first one is:</p>\n<blockquote>\n<p id=\"so_25661817_25661817_0\">error C2027: use of undefined type 'base_traits</p>\n</blockquote>\n<p>on the line of the <code>base</code> class's typedef.</p>\n", "AcceptedAnswerId": "25661918", "Title": "Using typedefs of a non-template derived class in the base class when using CRTP", "CreationDate": "2014-09-04T09:26:36.523", "Id": "25661817", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:33:58.197", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-04T09:50:35.760", "Score": "2", "OwnerUserId": "509233", "Tags": "<c++><templates><crtp>", "AnswerCount": "2"}, "25661986": {"Id": "25661986", "PostTypeId": "2", "Body": "<p>\u00a714.7.3 [temp.expl.spec]/p7:</p>\n<blockquote>\n<p id=\"so_25661817_25661986_0\">The placement of explicit specialization declarations for function\n  templates, class templates, variable templates, member functions of\n  class templates, static data members of class templates, member\n  classes of class templates, member enumerations of class templates,\n  member class templates of class templates, member function templates\n  of class templates, static data member templates of class templates,\n  member functions of member templates of class templates, member\n  functions of member templates of non-template classes, static data\n  member templates of non-template classes, member function templates of\n  member classes of class templates, etc., and the placement of partial\n  specialization declarations of class templates, variable templates,\n  member class templates of non-template classes, static data member\n  templates of non-template classes, member class templates of class\n  templates, etc., can affect whether a program is well-formed according\n  to the relative positioning of the explicit specialization\n  declarations and their points of instantiation in the translation unit\n  as specified above and below. <strong>When writing a specialization, be\n  careful about its location; or to make it compile will be such a trial\n  as to kindle its self-immolation.</strong></p>\n</blockquote>\n<p>In particular (\u00a714.7.3 [temp.expl.spec]/p6),</p>\n<blockquote>\n<p id=\"so_25661817_25661986_1\">If a template [...] is explicitly specialized then that specialization\n  shall be declared before the first use of that specialization that\n  would cause an implicit instantiation to take place, in every\n  translation unit in which such a use occurs; no diagnostic is\n  required. If the program does not provide a definition for an\n  explicit specialization and [...] the specialization is used in a way\n  that would cause an implicit instantiation to take place [...], \n  the program is ill-formed, no diagnostic required.</p>\n</blockquote>\n<p>The explicit specialization <code>base_traits&lt;derived&gt;</code> must be declared and defined before the definition of <code>derived</code>, as otherwise both inheriting from <code>base&lt;derived&gt;</code> and using <code>base_traits&lt;derived&gt;::value_t</code> would trigger an implicit instantiation. Thus:</p>\n<pre><code>template &lt;class D&gt;\nstruct base_traits;\n\ntemplate &lt;class D&gt;\nstruct base\n{\n    typedef typename base_traits&lt;D&gt;::value_t value_t;\n};\n\nstruct derived;\n\ntemplate&lt;&gt;\nstruct base_traits&lt;derived&gt;\n{\n    typedef int value_t;\n};\n\nstruct derived : base&lt;derived&gt;\n{\n    typedef base_traits&lt;derived&gt;::value_t value_t;\n};\n</code></pre>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-09-04T09:42:13.247", "Score": "4", "CreationDate": "2014-09-04T09:33:53.340", "ParentId": "25661817", "CommentCount": "3", "OwnerUserId": "2756719", "LastEditDate": "2014-09-04T09:42:13.247"}, "25661918": {"Id": "25661918", "PostTypeId": "2", "Body": "<p><code>base_traits&lt;derived&gt;</code> must be declared and defined prior it's usage since it is needed for the implicit instancation of <code>base&lt;derived&gt;</code> (below, I forward declared <code>derived</code>) : </p>\n<pre><code>template &lt;class D&gt;\nstruct base_traits;\n\n\ntemplate &lt;class D&gt;\nstruct base\n{\n    typedef typename base_traits&lt;D&gt;::value_t value_t;\n};\n\nstruct derived;\n\ntemplate&lt;&gt;\nstruct base_traits&lt;derived&gt;\n{\n    typedef int value_t;\n};\n\nstruct derived : base&lt;derived&gt;\n{\n    typedef base_traits&lt;derived&gt;::value_t value_t;\n};\n\n\nint main(void)\n{\n    derived d;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/4e3427f2ef9ff643\" rel=\"nofollow\"><strong>Live demo</strong></a></p>\n", "LastEditorUserId": "3510483", "LastActivityDate": "2014-09-04T09:50:35.760", "Score": "6", "CreationDate": "2014-09-04T09:31:40.990", "ParentId": "25661817", "CommentCount": "3", "OwnerUserId": "3510483", "LastEditDate": "2014-09-04T09:50:35.760"}});