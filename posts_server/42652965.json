post_cb({"42652965": {"CommentCount": "3", "ViewCount": "237", "CreationDate": "2017-03-07T16:07:53.710", "LastActivityDate": "2017-03-07T17:44:24.103", "Title": "C++11 copy elison and exception (catch argument)", "PostTypeId": "1", "Id": "42652965", "Score": "4", "Body": "<p>After a code review we had an issue with copy elison in try/catch block.\nAfter reading this page : \n<a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\" rel=\"nofollow noreferrer\">cpp reference guide</a> and particularly this paragraph : </p>\n<blockquote>\n<p id=\"so_42652965_42652965_0\">When handling an exception, if the argument of the catch clause is of the same type (ignoring top-level cv-qualification) as the exception object thrown, the copy is omitted and the body of the catch clause accesses the exception object directly, as if caught by reference</p>\n</blockquote>\n<p>I thought that copy elision for the argument in the catch will be performed automatically but one of the reviewer run a simple test showing that copy elision was not performed by the compiler :</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n   A(){}\n   A(const A&amp;){\n    std::cout&lt;&lt;\"COPY CONSTRUCTOR\\n\";\n   }\n};\n\nint main()\n{\n    try {\n       throw A{};\n    } catch(A a) {\n       throw a;\n    }\n    return 0;\n }\n</code></pre>\n<p>When compiling with :</p>\n<pre><code>g++ a.cpp -std=c++11 -O3\n</code></pre>\n<p>I got the following output</p>\n<pre><code>COPY CONSTRUCTOR\nCOPY CONSTRUCTOR\nterminate called after throwing an instance of 'A'\nAborted (core dumped)\n</code></pre>\n<p>I was expecting an output similar to (only one call of the copy constructor when the exception is thrown) : </p>\n<pre><code>COPY CONSTRUCTOR\nterminate called after throwing an instance of 'A'\nAborted (core dumped)\n</code></pre>\n<p>The test has been run under Linux Ubuntu 16.04 with g++ version :</p>\n<pre><code> g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\n</code></pre>\n<p>Is the test case invalid or my understanding of the copy elision wrong ?\nThank you very much for your help</p>\n", "Tags": "<c++><c++11><exception><copy-constructor><copy-elision>", "OwnerUserId": "4345185", "AnswerCount": "1"}, "42653466": {"ParentId": "42652965", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2017-03-07T16:32:57.653", "Score": "3", "LastEditorUserId": "2079303", "LastEditDate": "2017-03-07T17:44:24.103", "Id": "42653466", "OwnerUserId": "2079303", "Body": "<blockquote>\n<blockquote>\n<p id=\"so_42652965_42653466_1\">When handling an exception, if the argument of the catch clause is of the same type (ignoring top-level cv-qualification) as the exception object thrown, the copy is omitted ...</p>\n</blockquote>\n</blockquote>\n<p>The wording on cppreference is overly strong. This is a list of cases where copy elision is <strong>permitted</strong>. That should read: \"The copy <em>can be</em> omitted\".</p>\n<p>It appears that the compiler didn't perform copy elision, even though it was permitted to.</p>\n<hr>\n<p>Relevant quotes from the standard (draft):</p>\n<blockquote>\n<p id=\"so_42652965_42653466_2\">[class.copy.elision] / 1</p>\n<p id=\"so_42652965_42653466_3\">... This elision of copy/move operations, called copy elision, is permitted in the following circumstances (which may be combined to eliminate multiple copies):</p>\n<p id=\"so_42652965_42653466_4\">[class.copy.elision] / 1.3</p>\n<p id=\"so_42652965_42653466_5\">when the exception-declaration of an exception handler (Clause [except]) declares an object of the same type (except for cv-qualification) as the exception object, the copy operation can be omitted by treating the exception-declaration as an alias for the exception object if the meaning of the program will be unchanged except for the execution of constructors and destructors for the object declared by the exception-declaration. [\u2009Note: There cannot be a move from the exception object because it is always an lvalue. \u2009\u2014\u2009end note\u2009]</p>\n</blockquote>\n</hr>", "LastActivityDate": "2017-03-07T17:44:24.103"}, "bq_ids": {"n4140": {"so_42652965_42653466_3": {"section_id": 480, "quality": 0.9333333333333333, "length": 14}, "so_42652965_42653466_5": {"section_id": 480, "quality": 0.8409090909090909, "length": 37}}, "n3337": {"so_42652965_42653466_3": {"section_id": 471, "quality": 0.9333333333333333, "length": 14}, "so_42652965_42653466_5": {"section_id": 471, "quality": 0.6818181818181818, "length": 30}}, "n4659": {"so_42652965_42653466_3": {"section_id": 502, "quality": 0.9333333333333333, "length": 14}, "so_42652965_42653466_0": {"section_id": 502, "quality": 0.5625, "length": 9}, "so_42652965_42653466_1": {"section_id": 502, "quality": 0.5625, "length": 9}, "so_42652965_42653466_5": {"section_id": 502, "quality": 0.9090909090909091, "length": 40}}}});