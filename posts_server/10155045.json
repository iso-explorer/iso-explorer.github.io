post_cb({"10155139": {"ParentId": "10155045", "CommentCount": "1", "Body": "<p>Simply because the standard says so (3.6.1):</p>\n<blockquote>\n<p id=\"so_10155045_10155139_0\">A program shall contain a global function called <code>main</code>. [...] The function shall not be overloaded.</p>\n</blockquote>\n<p>What you have is a valid function, but it's not the program entry point.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "10155139", "Score": "6", "CreationDate": "2012-04-14T16:14:55.713", "LastActivityDate": "2012-04-14T16:14:55.713"}, "10155067": {"ParentId": "10155045", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is due to how the linkage on the program that is compiled. Basically, it can not find <code>main</code> due to scope.</p>\n<p>The <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/basic.html\" rel=\"nofollow\">C++ standard</a> details why you can't have a static main in the section \"3.6 - Start and termination [basic.start]\", specifically \"3.6.1 - Main function [basic.start.main]\". Where it says</p>\n<blockquote>\n<p id=\"so_10155045_10155067_0\">All implementations shall allow both of the following definitions of main:</p>\n</blockquote>\n<pre><code>    int main() { /* ... */ }\n</code></pre>\n<blockquote>\n<p id=\"so_10155045_10155067_1\">and</p>\n</blockquote>\n<pre><code>    int main(int argc, char* argv[]) { /* ... */ }\n</code></pre>\n<p>A pdf of the standard is <a href=\"http://www-d0.fnal.gov/~dladams/cxx_standard.pdf\" rel=\"nofollow\">here</a>. It is on page 69 of the pdf.</p>\n<p>If you want your code like that to work you would need to do something such as</p>\n<pre><code>class Application\n{\npublic:\n    static int main(int argc, char** argv)\n    {\n        std::cin.get();\n    }\n};\n\nint main(int argc, char** argv)\n{\n    return Application::main(argc, argv);\n}\n</code></pre>\n", "OwnerUserId": "1157214", "LastEditorUserId": "1157214", "LastEditDate": "2012-04-14T16:21:29.260", "Id": "10155067", "Score": "1", "CreationDate": "2012-04-14T16:04:26.913", "LastActivityDate": "2012-04-14T16:21:29.260"}, "10155045": {"CommentCount": "1", "ViewCount": "155", "PostTypeId": "1", "LastEditorUserId": "897024", "CreationDate": "2012-04-14T16:01:05.703", "LastActivityDate": "2012-10-27T15:32:44.320", "LastEditDate": "2012-10-27T15:32:44.320", "AcceptedAnswerId": "10155139", "OwnerDisplayName": "user955249", "Title": "Why doesn't static main work in C++?", "Id": "10155045", "Score": "1", "Body": "<p>The code below doesn't work.  </p>\n<pre><code>#include&lt;iostream&gt;\nclass Application\n{\npublic:\n    static int main(int argc, char** argv)\n    {\n        std::cin.get();\n    }\n};\n</code></pre>\n<p>I thought that static member functions are just the same as normal functions, and static WinMain works fine. Why doesn't static main work?</p>\n<p>well, I think i somewhat got begin to understand, thank you for all the answers.</p>\n", "Tags": "<c++>", "AnswerCount": "5"}, "10155084": {"ParentId": "10155045", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The following code will work just fine (Although there's no benefit to it that I can think off the top of my head)</p>\n<pre><code>#include&lt;iostream&gt;\nclass Application\n{\npublic:\n    static int main(int argc, char** argv)\n    {\n        std::cin.get();\n        return 0;\n    }\n};\n\nint main(int argc, char** argv)\n{\n    return Application::main(argc, argv);\n}\n</code></pre>\n<p>Also note the <code>main</code> function in your original post is <strong>not</strong> <em>main</em> - its name is <code>Application::main</code> which is completely distinct from the global <code>main</code> - your compiler is expecting a function called <em>main</em> to exist in the global scope and not within a class or namespace. </p>\n", "OwnerUserId": "1301901", "LastEditorUserId": "1301901", "LastEditDate": "2012-04-14T16:13:01.090", "Id": "10155084", "Score": "1", "CreationDate": "2012-04-14T16:07:41.137", "LastActivityDate": "2012-04-14T16:13:01.090"}, "10155080": {"ParentId": "10155045", "CommentCount": "0", "Body": "<p>In your code, the static member <code>main()</code> exists in the scope of the class, which is fine as long as you don't expect it to be the entry-point (or start) of your program.</p>\n<p>The Standard requires the entry-point (i.e <em>standard</em> <code>main()</code>) to be defined in the global namespace. So you can do this:</p>\n<pre><code>int main(int argc, char** argv) //defined in the global namespace\n{\n    return Application::main(argc, argv);\n}\n</code></pre>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "10155080", "Score": "0", "CreationDate": "2012-04-14T16:07:21.847", "LastActivityDate": "2012-04-14T16:07:21.847"}, "10155106": {"ParentId": "10155045", "CommentCount": "0", "Body": "<p>Let's say you have two classes, <code>Application1</code> and <code>Application2</code>, both with public static functions called <code>main</code>, with the appropriate signatures. Which one should be picked? So that makes no sense.</p>\n<p>The C++ standard defines the <strong>free function</strong> <code>main</code> (with 2 possible signatures, if I remember correctly - argc/argv and no arguments) as the entry point to the program. Implementations are free to add their own (e.g. WinMain). So basically, static class functions are simply not defined to be entry points in the standard.</p>\n<p>You are of course free to forward your global <code>main</code> function's arguments to whatever internal main function you choose.</p>\n", "OwnerUserId": "48660", "PostTypeId": "2", "Id": "10155106", "Score": "0", "CreationDate": "2012-04-14T16:10:56.370", "LastActivityDate": "2012-04-14T16:10:56.370"}, "bq_ids": {"n4140": {"so_10155045_10155139_0": {"section_id": 7145, "quality": 0.75, "length": 6}}, "n3337": {"so_10155045_10155139_0": {"section_id": 6889, "quality": 0.75, "length": 6}, "so_10155045_10155067_0": {"section_id": 6890, "quality": 1.0, "length": 7}}, "n4659": {"so_10155045_10155139_0": {"section_id": 8646, "quality": 0.75, "length": 6}}}});