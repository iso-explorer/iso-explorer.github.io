post_cb({"bq_ids": {"n4140": {"so_14951200_14953545_0": {"length": 9, "quality": 1.0, "section_id": 7043}}, "n3337": {"so_14951200_14953545_0": {"length": 9, "quality": 1.0, "section_id": 6788}}, "n4659": {"so_14951200_14953545_0": {"length": 9, "quality": 1.0, "section_id": 8540}}}, "14953545": {"Id": "14953545", "PostTypeId": "2", "Body": "<p>The warning is because <code>name</code> will have a different address in each source file that <code>test.h</code> is included into.  Because it has internal linkage (<code>static</code>) each translation unit will get its own copy; they will not be unified by the linker.  This means that your code is equivalent to:</p>\n<pre><code>template&lt;int&gt; struct base { ... };\nstatic constexpr int val = some_value_different_in_every_source_file;\nstruct type: base&lt;val&gt; {};\n</code></pre>\n<p>Your code is legal <em>as presented</em>, but if you include <code>test.h</code> in another source file then it will violate the one-definition rule:</p>\n<blockquote>\n<h3>3.2 One de\ufb01nition rule [basic.def.odr]</h3>\n<p id=\"so_14951200_14953545_0\">[...]<br/>\n  6 - There can be more than one definition of a class type [...] provided [...]: [...]</p>\n<ul>\n<li>in each de\ufb01nition of <code>D</code>, corresponding names [...] can refer to a const object\n  with internal or no linkage [only] if [...] the value (but not the address) of the object is used [...]</li>\n</ul>\n</blockquote>\n<p>You're using the <em>address</em> of an object with internal linkage in the definition of a class type, so using it in more than one translation unit is undefined behaviour.</p>\n", "LastActivityDate": "2013-02-19T09:04:04.777", "CommentCount": "4", "CreationDate": "2013-02-19T09:04:04.777", "ParentId": "14951200", "Score": "2", "OwnerUserId": "567292"}, "14951200": {"ViewCount": "1646", "Body": "<p>I have the following example code which uses a string literal as a template parameter, such that the base class template can access the string.</p>\n<p>The code compiles, but I get a warning which I do not fully understand:</p>\n<blockquote>\n<p id=\"so_14951200_14951200_0\">warning: \u2018ns::bar::type\u2019 has a base \u2018ns::base&lt;((const char*)(&amp;\n  ns::bar::name))&gt;\u2019 whose type uses the anonymous namespace [enabled by\n  default]</p>\n</blockquote>\n<p>Working example code below:</p>\n<pre><code>// \"test.h\"\n#pragma once\n\nnamespace ns \n{\n    template &lt;char const* str&gt;\n    struct base\n    {\n        const char *name() const { return str; }\n    };\n\n    namespace bar \n    {\n        static constexpr char name[] = \"bar\";\n        struct type : base&lt;name&gt; {};                // &lt;-- this line here\n    }\n}\n\n// main.cpp\n#include &lt;iostream&gt;\n#include \"test.h\"\n\nint main()\n{\n    ns::bar::type f;\n    std::cout &lt;&lt; f.name() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>So my questions are:</p>\n<ol>\n<li>What does this warning mean?</li>\n<li>Is it safe to pass a string literal as a template parameter in the way that I am doing here?</li>\n</ol>\n<p>(Note this is with gcc 4.7.2)</p>\n", "AcceptedAnswerId": "14951459", "Title": "constexpr string literals in anonymous namespace?", "CreationDate": "2013-02-19T06:29:21.340", "Id": "14951200", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2013-02-19T09:04:04.777", "Score": "5", "OwnerUserId": "955273", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "2"}, "14951459": {"Id": "14951459", "PostTypeId": "2", "Body": "<p>The issue is do with the fact that <code>static constexpr char name[] = \"bar\";</code> has internal linkage.</p>\n<p><strong>Any type with internal linkage defined in a header will be a different type in every file that includes the header.</strong></p>\n<p>This is seldom the intention - hence the warning.</p>\n<p>The reason there is no warning for when this is done in a source file is because that type can't ever be referred to by more than one file - hence it will always be that one type. </p>\n", "LastActivityDate": "2013-02-19T06:50:45.110", "CommentCount": "3", "CreationDate": "2013-02-19T06:50:45.110", "ParentId": "14951200", "Score": "7", "OwnerUserId": "955273"}});