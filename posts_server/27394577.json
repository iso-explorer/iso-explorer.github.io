post_cb({"bq_ids": {"n4140": {"so_27394577_27394577_0": {"length": 8, "quality": 1.0, "section_id": 7043}, "so_27394577_27394577_3": {"length": 48, "quality": 0.9411764705882353, "section_id": 7043}, "so_27394577_27394577_1": {"length": 11, "quality": 1.0, "section_id": 7043}}, "n3337": {"so_27394577_27394577_0": {"length": 8, "quality": 1.0, "section_id": 6788}, "so_27394577_27394577_3": {"length": 46, "quality": 0.9019607843137255, "section_id": 6788}, "so_27394577_27394577_1": {"length": 11, "quality": 1.0, "section_id": 6788}}, "n4659": {"so_27394577_27394577_0": {"length": 8, "quality": 1.0, "section_id": 8540}, "so_27394577_27394577_3": {"length": 43, "quality": 0.8431372549019608, "section_id": 8540}, "so_27394577_27394577_1": {"length": 11, "quality": 1.0, "section_id": 8540}}}, "27394577": {"ViewCount": "28", "Body": "<p>I have a program linking of two different TUs as follows:</p>\n<p>main.cpp</p>\n<pre><code>int a = 6;\n\nstruct A\n{\n    int b = a;\n};\n\nint main(){ }\n</code></pre>\n<p>slave.cpp</p>\n<pre><code>static int a = 42;\n\nstruct A\n{\n    int b = a;\n};\n</code></pre>\n<p>I expect that linker will throw an error in that case, beacuse (<code>N3797::3.2/6</code> [basic.def.odr]):</p>\n<blockquote>\n<p id=\"so_27394577_27394577_0\">There can be more than one definition of a class type [...]</p>\n<p id=\"so_27394577_27394577_1\">Given such an entity named D defined in more than one translation\n  unit, then </p>\n<p id=\"so_27394577_27394577_2\">[...] </p>\n<p id=\"so_27394577_27394577_3\">\u2014 in each definition of D, corresponding names,\n  looked up according to 3.4, shall refer to an entity defined within\n  the definition of D, or shall refer to the same entity, after overload\n  resolution (13.3) and after matching of partial template\n  specialization (14.8.3), except that a name can refer to a\n  non-volatile const object with internal or no linkage if the object\n  has the same literal type in all definitions of D, and the object is\n  initialized with a constant expression (5.19), and the object is not\n  odr-used, and the object has the same value in all definitions of D;</p>\n<p id=\"so_27394577_27394577_4\">[...]</p>\n</blockquote>\n<p>So in my case <code>a</code> refers to the different entity in the different TUs, therefore it shouldn't be linked correctly. But in my case it does. I'm using <code>gcc -o bin main.o slave.o</code> with <code>gcc 4.7.2-2ubuntu1</code>. Is it a bug?</p>\n", "Title": "Definition of the same class in the different TUs", "CreationDate": "2014-12-10T06:29:37.383", "LastActivityDate": "2014-12-10T06:29:37.383", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "27394577", "Score": "1", "Tags": "<c++><gcc>", "AnswerCount": "0"}});