post_cb({"bq_ids": {"n4140": {"so_36342296_36342828_1": {"length": 7, "quality": 0.875, "section_id": 5420}, "so_36342296_36342828_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5420}, "so_36342296_36342296_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5420}}, "n3337": {"so_36342296_36342828_1": {"length": 7, "quality": 0.875, "section_id": 5215}, "so_36342296_36342828_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5215}, "so_36342296_36342296_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5215}}, "n4659": {"so_36342296_36342828_1": {"length": 8, "quality": 1.0, "section_id": 6842}, "so_36342296_36342828_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6842}, "so_36342296_36342296_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6842}}}, "36342296": {"ViewCount": "1144", "Body": "<p>The default constructor of <code>std::chrono::duration</code> is defined as follows:</p>\n<p><code>constexpr duration() = default;</code></p>\n<p>(For example, see <a href=\"http://en.cppreference.com/w/cpp/chrono/duration/duration\" rel=\"noreferrer\">cppreference.com</a> or the libstdc++ source.)</p>\n<p>However, <a href=\"http://en.cppreference.com/w/cpp/language/constexpr\" rel=\"noreferrer\">cppreference.com also says this</a> about <code>constexpr</code> constructors:</p>\n<blockquote>\n<p id=\"so_36342296_36342296_0\">A constexpr constructor must satisfy the following requirements:</p>\n<p id=\"so_36342296_36342296_1\">...</p>\n<p id=\"so_36342296_36342296_2\"><strong>every base class and every non-static member must be initialized</strong>, either in the constructors initialization list or by a member brace-or-equal initializer. In addition, every constructor involved must be a constexpr constructor and every clause of every brace-or-equal initializer must be a constant expression</p>\n</blockquote>\n<p>And in case I was confused about default constructors, <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor\" rel=\"noreferrer\">cppreference.com seems to say</a> that default constructors brought into being with <code>= default</code> aren't defined differently than implicit default constructors.  </p>\n<p>Yet, the <code>rep</code> type for (most) durations is a bare integer type.  So, shouldn't the explicit <code>= default</code> default constructor for <code>duration</code> be equivalent to</p>\n<p><code>constexpr duration() {}</code></p>\n<p>which of course would leave the integer member variable of type <code>duration::rep</code>  uninitialized?  And, in fact, isn't the standard behaviour of <code>duration</code> such that default-constructed values <em>are</em> uninitialized?  (But I can't find a reference that explicitly says this.)</p>\n<p>So how can the <code>= default</code> constructor for <code>duration</code> be <code>constexpr</code> if it leaves a non-static member variable uninitialized?  What am I missing?</p>\n", "AcceptedAnswerId": "36342828", "Title": "How can std::chrono::duration::duration() be constexpr?", "CreationDate": "2016-03-31T19:41:16.527", "Id": "36342296", "CommentCount": "8", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2016-03-31T20:46:52.437", "LastEditorUserId": "693212", "LastActivityDate": "2016-03-31T20:51:07.003", "Score": "16", "OwnerUserId": "693212", "Tags": "<c++><c++11><chrono>", "AnswerCount": "1"}, "36342828": {"Id": "36342828", "PostTypeId": "2", "Body": "<p>7.1.5 The <code>constexpr</code> specifier [dcl.constexpr] says:</p>\n<blockquote>\n<p id=\"so_36342296_36342828_0\">The definition of a <code>constexpr</code> constructor shall satisfy the\n  following requirements:</p>\n<ul>\n<li>the class shall not have any virtual base classes;</li>\n<li>for a defaulted copy/move constructor, the class shall not have a mutable subobject that is a variant member;</li>\n<li>each of the parameter types shall be a literal type;</li>\n<li>its function-body shall not be a function-try-block;</li>\n</ul>\n<p id=\"so_36342296_36342828_1\">In addition, either its function-body shall be = delete, or it shall\n  satisfy the following requirements:</p>\n<ul>\n<li>either its function-body shall be = default, or the compound-statement of its function-body shall satisfy the requirements\n  for a function-body of a constexpr function;</li>\n<li>every non-variant non-static data member and base class sub-object shall be initialized (12.6.2);</li>\n<li>if the class is a union having variant members (9.5), exactly one of them shall be initialized;</li>\n<li>if the class is a union-like class, but is not a union, for each of its anonymous union members having variant members, exactly one of\n  them shall be initialized;</li>\n<li>for a non-delegating constructor, every constructor selected to initialize non-static data members and base class sub-objects shall be\n  a constexpr constructor;</li>\n<li>for a delegating constructor, the target constructor shall be a constexpr constructor.</li>\n</ul>\n</blockquote>\n<p>In a nutshell, <code>= default</code> is a valid definition of a <code>constexpr</code> default constructor as long as the other requirements above are met.</p>\n<p>So how does this work with <em>uninitialized</em> constructions?</p>\n<p>It doesn't.</p>\n<p>For example:</p>\n<pre><code>constexpr seconds x1{};\n</code></pre>\n<p>The above works and initializes <code>x1</code> to <code>0s</code>.  However:</p>\n<pre><code>constexpr seconds x2;\n\nerror: default initialization of an object of const type 'const seconds'\n       (aka 'const duration&lt;long long&gt;') without a user-provided default\n        constructor\n    constexpr seconds x2;\n                      ^\n                        {}\n1 error generated.\n</code></pre>\n<p>So to create a <code>constexpr</code> default constructed <code>duration</code>, you must <em>zero-initialize</em> it.  And the <code>= default</code> implementation allows one to zero-initialize with the <code>{}</code>.</p>\n<p>Complete working demo:</p>\n<pre><code>template &lt;class Rep&gt;\nclass my_duration\n{\n    Rep rep_;\npublic:\n    constexpr my_duration() = default;\n};\n\n\nint\nmain()\n{\n    constexpr my_duration&lt;int&gt; x{};\n}\n</code></pre>\n<p><strong>Interesting Sidebar</strong></p>\n<p>I learned something in writing this answer, and wanted to share:</p>\n<p>I kept wondering why the following doesn't work:</p>\n<pre><code>using Rep = int;\n\nclass my_duration\n{\n    Rep rep_;\npublic:\n    constexpr my_duration() = default;\n};\n\n\nint\nmain()\n{\n    constexpr my_duration x{};\n}\n\nerror: defaulted definition of default constructor is not constexpr\n        constexpr my_duration() = default;\n        ^\n</code></pre>\n<p>Why does making this class a non-template break the <code>constexpr</code> default constructor?!</p>\n<p>Then I tried this:</p>\n<pre><code>using Rep = int;\n\nclass my_duration\n{\n    Rep rep_;\npublic:\n    my_duration() = default;  // removed constexpr\n};\n\n\nint\nmain()\n{\n    constexpr my_duration x{};\n}\n</code></pre>\n<p>And the compilers like it again.</p>\n<p>If there isn't already a CWG issue on this, there probably should be.  The behavior seems a bit inconsistent.  And this is probably just because we (the entire industry) are still learning about <code>constexpr</code>.</p>\n", "LastEditorUserId": "576911", "LastActivityDate": "2016-03-31T20:51:07.003", "Score": "11", "CreationDate": "2016-03-31T20:11:06.027", "ParentId": "36342296", "CommentCount": "8", "LastEditDate": "2016-03-31T20:51:07.003", "OwnerUserId": "576911"}});