post_cb({"2951305": {"ParentId": "2951273", "CommentCount": "0", "CreationDate": "2010-06-01T16:00:10.483", "Id": "2951305", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "10", "Body": "<p>This syntax:</p>\n<pre><code>virtual void Process() = 0 {};\n</code></pre>\n<p>is not legal C++, but is supported by VC++. Exactly why the Standard disallows this has never been obvious to me. Your second example is legal.</p>\n", "LastActivityDate": "2010-06-01T16:00:10.483"}, "2951273": {"CommentCount": "0", "AcceptedAnswerId": "2951294", "PostTypeId": "1", "LastEditorDisplayName": "anon", "CreationDate": "2010-06-01T15:56:10.667", "LastActivityDate": "2015-04-19T19:50:38.120", "LastEditDate": "2010-06-01T16:46:40.900", "ViewCount": "10190", "FavoriteCount": "5", "Title": "pure-specifier on function-definition", "Id": "2951273", "Score": "27", "Body": "<p>While compiling on GCC I get the <strong>error: pure-specifier on function-definition</strong>, but not when I compile the same code using VS2005.</p>\n<pre><code>class Dummy {   \n  //error: pure-specifier on function-definition, VS2005 compiles \n  virtual void Process() = 0 {};\n};\n</code></pre>\n<p>But when the definition of this pure virtual function is not inline, it works:</p>\n<pre><code>class Dummy\n{\n  virtual void Process() = 0;\n};\nvoid Dummy::Process()\n{} //compiles on both GCC and VS2005\n</code></pre>\n<p>What does the error means? Why cannot I do it inline? Is it legal to evade the compile issue as shown in the second code sample?</p>\n", "Tags": "<c++><abstract-class><pure-virtual>", "OwnerUserId": "355581", "AnswerCount": "6"}, "2951393": {"ParentId": "2951273", "LastEditDate": "2010-06-01T16:20:22.917", "CommentCount": "0", "CreationDate": "2010-06-01T16:09:10.307", "OwnerUserId": "106671", "LastEditorUserId": "106671", "PostTypeId": "2", "Id": "2951393", "Score": "0", "Body": "<p>You can certainly provide a body for pure virtual function. That function will be pointed to by that abstract class vtable. Otherwise the same slot will point to compiler-specific trap function like <code>__cxa_pure_virtual</code> for GCC. There's of course nothing about this in the standard.</p>\n", "LastActivityDate": "2010-06-01T16:20:22.917"}, "2951322": {"ParentId": "2951273", "LastEditDate": "2010-06-01T16:09:18.717", "CommentCount": "4", "CreationDate": "2010-06-01T16:01:42.540", "OwnerUserId": "350821", "LastEditorUserId": "350821", "PostTypeId": "2", "Id": "2951322", "Score": "4", "Body": "<p>Pure virtual functions <strong>in C++</strong> by definition have no definition <strong>in the declaration</strong>.</p>\n<p>You second code block is not avoiding the compiler issue.  It is implementing a pure virtual function the way it was intended.</p>\n<p>The question to ask is, why do you need to declare it pure virtual if you intend to have a default implementation?</p>\n", "LastActivityDate": "2010-06-01T16:09:18.717"}, "2951330": {"ParentId": "2951273", "CommentCount": "3", "Body": "<p>C++ Standard, 10.4/2:</p>\n<blockquote>\n<p id=\"so_2951273_2951330_0\">a function declaration cannot provide both a pure-specifier and a definition</p>\n</blockquote>\n", "OwnerUserId": "70930", "PostTypeId": "2", "Id": "2951330", "Score": "16", "CreationDate": "2010-06-01T16:03:16.143", "LastActivityDate": "2010-06-01T16:03:16.143"}, "2951294": {"ParentId": "2951273", "LastEditDate": "2010-06-01T16:10:46.557", "CommentCount": "4", "CreationDate": "2010-06-01T15:58:57.927", "OwnerUserId": "13313", "LastEditorUserId": "13313", "PostTypeId": "2", "Id": "2951294", "Score": "22", "Body": "<p>Ok, I've just learned something.  A pure virtual function must be declared as follows:</p>\n<pre><code>\nclass Abstract \n{\npublic:\n   virtual void pure_virtual() = 0;\n};\n</code></pre>\n<p>It may have a body, although it is illegal to include it at the point of declaration.  This means that to have a body the pure virtual function must be defined outside the class.  Note that even if it has a body, the function must still be overridden by any concrete classes derived from <code>Abstract</code>.  They would just have an option to call <code>Abstract::pure_virtual()</code> explicitly if they need to.</p>\n<p>The details are <a href=\"http://en.wikipedia.org/wiki/Virtual_function#C.2B.2B_2\" rel=\"noreferrer\">here</a>.</p>\n", "LastActivityDate": "2010-06-01T16:10:46.557"}, "29735032": {"ParentId": "2951273", "CommentCount": "0", "Body": "<p>This is gramatically disallowed - the declarator that can include <em>pure-specifiers</em>, i.e. <strong>the <em>member-declarator</em></strong>, only appears in declarations that aren't definitions. [class.mem]\n:</p>\n<blockquote>\n<p id=\"so_2951273_29735032_0\"><em>member-declaration</em>:<br>\n<strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq</em><sub>opt</sub>\n<em>decl-specifier-seq</em><sub>opt</sub> <em>member-declarator-list</em><sub>opt</sub> <code>;</code><br> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>function-definition</em><br/></br></strong>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]</br></p>\n<p id=\"so_2951273_29735032_1\"><em>member-declarator-list</em>:<br>   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>member-declarator</em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>member-declarator-list</em>\n  , <em>member-declarator</em></br></br></p>\n<p id=\"so_2951273_29735032_2\"><em>member-declarator</em>:<br>   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong><em>declarator\n  virt-specifier-seq</em><sub>opt</sub> <em>pure-specifier</em><sub>opt</sub></strong> <br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <em>declarator brace-or-equal-initializer</em><sub>opt</sub><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>identifier</em><sub>opt</sub> <em>attribute-specifier-seq</em><sub>opt</sub> <code>:</code> <em>constant-expression</em></br></br></br></p>\n</blockquote>\n<p>The grammar of <em>function-definition</em> does not include a <em>pure-specifier</em>, [dcl.fct.def.general]:</p>\n<blockquote>\n<p id=\"so_2951273_29735032_3\"><em>function-definition</em>:<br>\u00a0\u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq</em><sub>opt</sub>\n<em>decl-specifier-seq</em><sub>opt</sub> <em>declarator virt-specifier-seq</em><sub>opt</sub> <em>function-body</em></br></p>\n</blockquote>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "29735032", "Score": "2", "CreationDate": "2015-04-19T19:50:38.120", "LastActivityDate": "2015-04-19T19:50:38.120"}, "bq_ids": {"n4140": {"so_2951273_2951330_0": {"section_id": 7019, "quality": 1.0, "length": 7}}, "n3337": {"so_2951273_2951330_0": {"section_id": 6765, "quality": 1.0, "length": 7}}, "n4659": {"so_2951273_2951330_0": {"section_id": 8516, "quality": 1.0, "length": 7}}}});