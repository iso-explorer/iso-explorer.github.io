post_cb({"2573435": {"ViewCount": "6639", "Body": "<p>What's a better way to clear <code>cin</code> input? I thought <code>cin.clear</code> and <code>cin.ignore</code> was a good way?</p>\n<p>Code:</p>\n<pre><code> void clearInput()\n{   \n    cin.clear();\n    cin.ignore(1000,'\\n');\n    //cin.ignore( std::numeric_limits&lt;streamsize&gt;::max(), '\\n' );\n\n}\n</code></pre>\n<p>My teacher gave me this reply:</p>\n<blockquote>\n<p id=\"so_2573435_2573435_0\">this is basically saying that your\n  clearInput doesn't work FYI:  ignore\n  is NEVER a good idea as a way of\n  getting rid of all that remains on a\n  line</p>\n<p id=\"so_2573435_2573435_1\">and your failing this test is exactly\n  the reason why now go clear it the\n  correct way</p>\n</blockquote>\n<p>She has also told me this following:</p>\n<blockquote>\n<p id=\"so_2573435_2573435_2\">on ignore you need to guess at how\n  many characters you want to ignore If\n  you absolutely know your data and it\n  follows a strict format -- as in Excel\n  spreadsheets, ignore is really good. \n  If you are NOT in this type of file,\n  then you NEVER use ignore.  Question,\n  is your data well-formed?  If yes, use\n  ignore.  If not, don't use ignore.</p>\n<p id=\"so_2573435_2573435_3\">List ALL the way of getting data? 1)\n  there is extraction &gt;&gt;</p>\n<p id=\"so_2573435_2573435_4\">and there is also??????</p>\n<p id=\"so_2573435_2573435_5\">please list for me</p>\n</blockquote>\n", "AcceptedAnswerId": "2574787", "Title": "Clearing cin input: is cin.ignore not a good way?", "CreationDate": "2010-04-04T03:13:10.910", "Id": "2573435", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-09-26T00:08:25.080", "LastEditorUserId": "1288", "LastActivityDate": "2015-09-23T14:33:02.393", "Score": "8", "OwnerUserId": "306479", "Tags": "<c++>", "AnswerCount": "2"}, "2573572": {"Id": "2573572", "PostTypeId": "2", "Body": "<p>Copy-pasting from the standard,</p>\n<blockquote>\n<pre><code>basic_istream&lt;charT,traits&gt;&amp;\nignore(streamsize n = 1, int_type\ndelim = traits::eof());\n</code></pre>\n<p id=\"so_2573435_2573572_0\"><em>Effects:</em> Behaves as an unformatted\n  input function (as described in\n  27.6.1.3, paragraph 1). After constructing a sentry object,\n  extracts characters and discards them.\n  Characters are extracted until any of\n  the following occurs:</p>\n<ul>\n<li>if <code>n != numeric_limits&lt;streamsize&gt;::max()</code>\n  (18.2.1), <code>n</code> characters are extracted </li>\n<li>end-of-file occurs on the input sequence (in which case the function\n  calls <code>setstate(eofbit)</code>, which may\n  throw <code>ios_base::failure</code> (27.4.4.3));</li>\n<li><code>c == delim</code> for the next available input character <code>c</code> (in which case <code>c</code> is\n  extracted).</li>\n</ul>\n</blockquote>\n<p>You commented line with <code>numeric_limits&lt;&gt;::max</code> is superior, but it looks like you didn't want to use something you didn't completely understand, which is also good.</p>\n<p>The only thing someone could possibly want besides <code>ignore</code> is non-blocking behavior, i.e. don't wait for the user to press return if the terminal is in unbuffered mode. But that's just entirely unsupported by iostreams as far as I know.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2015-09-23T14:33:02.393", "Score": "5", "CreationDate": "2010-04-04T04:31:24.520", "ParentId": "2573435", "CommentCount": "2", "OwnerUserId": "153285", "LastEditDate": "2015-09-23T14:33:02.393"}, "bq_ids": {"n4140": {"so_2573435_2573572_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 2232}}, "n3337": {"so_2573435_2573572_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 2220}}, "n4659": {"so_2573435_2573572_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 2505}}}, "2574787": {"Id": "2574787", "PostTypeId": "2", "Body": "<p>Your teacher\u2019s reply are a bit unclear (at least to me).</p>\n<p>Concerning <code>ignore</code>, your teacher is wrong in principle: <code>ignore</code> is <a href=\"https://isocpp.org/wiki/faq/input-output#istream-and-ignore\" rel=\"nofollow noreferrer\">the standard idiom</a> of how to clear a stream (as shown by Potatocorn, this is even mentioned in the standard).</p>\n<p>However, it\u2019s important to notice that <code>cin.ignore(1000)</code> is <em>indeed</em> a bad way of doing this: this just presumes that there won\u2019t be more than 1000 characters in the buffer. Never use such a magic number in <code>ignore</code>.</p>\n<p>Instead, either use</p>\n<ol>\n<li><code>cin.rdbuf()-&gt;in_avail()</code> (i.e. the available number of chars in the read buffer)<sup>1)</sup>, or use</li>\n<li><code>numeric_limits&lt;streamsize&gt;::max()</code>.</li>\n</ol>\n<hr>\n<p><sup>1)</sup> Unfortunately, <code>in_avail</code> is broken on some recent VC (?) compilers so this method isn\u2019t very portable.</p>\n</hr>", "LastEditorUserId": "1938163", "LastActivityDate": "2015-09-23T00:04:27.357", "Score": "4", "CreationDate": "2010-04-04T14:51:36.670", "ParentId": "2573435", "CommentCount": "9", "OwnerUserId": "1968", "LastEditDate": "2015-09-23T00:04:27.357"}});