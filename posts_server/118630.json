post_cb({"119502": {"ParentId": "118630", "CommentCount": "0", "CreationDate": "2008-09-23T07:10:01.153", "OwnerUserId": "11215", "Id": "119502", "PostTypeId": "2", "OwnerDisplayName": "Jan de Vos", "Score": "1", "Body": "<p>My first thought is that the second version might be infinitessimally faster than the first, because no reference is pushed on the stack as an argument. However, this would be very compiler-dependant, and depends for instance on whether the compiler performs Named Return Value Optimization or not.</p>\n<p>Anyway, in case of any doubt, never choose for a very small performance gain that might not even exist and you more than likely won't need -- choose the clearest version, which is the first.</p>\n", "LastActivityDate": "2008-09-23T07:10:01.153"}, "118775": {"ParentId": "118630", "CommentCount": "1", "CreationDate": "2008-09-23T02:15:12.890", "OwnerUserId": "14065", "Id": "118775", "PostTypeId": "2", "OwnerDisplayName": "Martin York", "Score": "2", "Body": "<p>I would prefer the first form for readability.</p>\n<p>I had to think twice before I saw that the first parameter was being copied in. I was not expecting that. Therefore as both versions are probably just as efficient I would pick them one that is easier to read.</p>\n", "LastActivityDate": "2008-09-23T02:15:12.890"}, "119049": {"ParentId": "118630", "CommentCount": "1", "CreationDate": "2008-09-23T04:02:53.537", "OwnerUserId": "10431", "Id": "119049", "PostTypeId": "2", "OwnerDisplayName": "Keith Nicholas", "Score": "1", "Body": "<pre><code>const T operator+(const T&amp; lhs, const T&amp; rhs)\n{\n    return T(lhs)+=rhs;\n}\n</code></pre>\n<p>why not this if you want the terseness?</p>\n", "LastActivityDate": "2008-09-23T04:02:53.537"}, "118677": {"ParentId": "118630", "CommentCount": "0", "CreationDate": "2008-09-23T01:43:26.897", "OwnerUserId": "5927", "Id": "118677", "PostTypeId": "2", "OwnerDisplayName": "Corey Ross", "Score": "4", "Body": "<p>I'm not sure if there is much difference in the generated code for either.</p>\n<p>Between these two, I would (personally) prefer the first form since it better conveys the intention. This is with respect to both your reuse of the += operator and the idiom of passing templatized types by const&amp;.</p>\n", "LastActivityDate": "2008-09-23T01:43:26.897"}, "256351": {"ParentId": "118630", "CommentCount": "0", "CreationDate": "2008-11-02T01:09:16.730", "Id": "256351", "PostTypeId": "2", "OwnerDisplayName": "Ross", "Score": "0", "Body": "<p>Actually, the second is preferred. As stated in the c++ standard,</p>\n<blockquote>\n<p id=\"so_118630_256351_0\">3.7.2/2: Automatic storage duration</p>\n<p id=\"so_118630_256351_1\">If a named automatic object has\n  initialization or a destructor with\n  side effects, it shall not be\n  destroyed before the end of its block,\n  nor shall it be eliminated as an\n  optimization even if it appears to be\n  unused, except that a class object or\n  its copy may be eliminated as\n  specified in 12.8.</p>\n</blockquote>\n<p>That is, because an unnamed temporary object is created using a copy constructor, the compiler may not use the return value optimization. For the second case, however, the unnamed return value optimization is allowed. Note that if your compiler implements named return value optimization, the best code is</p>\n<pre><code>const T operator+(const T&amp; lhs, const T&amp; rhs)\n{\n    T temp(lhs);\n    temp +=rhs;\n    return temp;\n}\n</code></pre>\n", "LastActivityDate": "2008-11-02T01:09:16.730"}, "118664": {"CommentCount": "8", "CreationDate": "2008-09-23T01:39:58.807", "LastEditorUserId": "4281", "LastActivityDate": "2008-09-24T16:29:20.487", "ParentId": "118630", "PostTypeId": "2", "LastEditorDisplayName": "Kris K.", "LastEditDate": "2008-09-24T16:29:20.503", "Id": "118664", "Score": "2", "Body": "<p>With the edited question, the first form would be preferred.  The compiler will more likely optimize the return value (you could verify this by placing a breakpoint in the constructor for T).  The first form also takes both parameters as const, which would be more desirable.</p>\n<p>Research on the topic of <strong>return value optimization</strong>, such as this link as a quick example: <a href=\"http://www.cs.cmu.edu/~gilpin/c++/performance.html\" rel=\"nofollow noreferrer\">http://www.cs.cmu.edu/~gilpin/c++/performance.html</a></p>\n", "OwnerUserId": "4281", "OwnerDisplayName": "Kris K."}, "256361": {"ParentId": "118630", "CommentCount": "1", "CreationDate": "2008-11-02T01:20:44.477", "OwnerUserId": "23934", "Id": "256361", "PostTypeId": "2", "OwnerDisplayName": "Drew Hall", "Score": "0", "Body": "<p>I think that if you inlined them both (I would since they're just forwarding functions, and presumably the operator+=() function is out-of-line), you'd get near indistinguishable code generation.  That said, the first is more canonical.  The second version is needlessly \"cute\".</p>\n", "LastActivityDate": "2008-11-02T01:20:44.477"}, "118630": {"CommentCount": "0", "AcceptedAnswerId": "118664", "PostTypeId": "1", "LastEditorUserId": "164901", "LastEditorDisplayName": "JohnMcG", "CreationDate": "2008-09-23T01:29:26.383", "LastActivityDate": "2010-04-07T22:30:54.073", "AnswerCount": "7", "LastEditDate": "2010-04-07T22:30:54.073", "ViewCount": "1630", "FavoriteCount": "1", "Title": "What is the best signature for overloaded arithmetic operators in C++?", "Id": "118630", "Score": "1", "Body": "<p>I had assumed that the canonical form for operator+, assuming the existence of an overloaded operator+= member function, was like this:</p>\n<pre><code>const T operator+(const T&amp; lhs, const T&amp; rhs)\n{\n    return T(lhs) +=rhs;\n}\n</code></pre>\n<p>But it was pointed out to me that this would also work:</p>\n<pre><code>const T operator+ (T lhs, const T&amp; rhs)\n{\n    return lhs+=rhs;\n}\n</code></pre>\n<p>In essence, this form transfers creation of the temporary from the body of the implementation to the function call.</p>\n<p>It seems a little awkward to have different types for the two parameters, but is there anything wrong with the second form?  Is there a reason to prefer one over the other?</p>\n", "Tags": "<c++><operator-keyword>", "OwnerUserId": "1674", "OwnerDisplayName": "JohnMcG"}, "bq_ids": {"n4140": {"so_118630_256351_1": {"section_id": 7172, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_118630_256351_1": {"section_id": 6916, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_118630_256351_1": {"section_id": 8680, "quality": 0.7777777777777778, "length": 21}}}});