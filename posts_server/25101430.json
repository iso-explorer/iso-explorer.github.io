post_cb({"25101466": {"ParentId": "25101430", "CommentCount": "1", "Body": "<p>The compiler will first look for <code>begin</code> and <code>end</code> member <em>functions</em> in the class, before trying to look for global functions.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "25101466", "Score": "1", "CreationDate": "2014-08-03T03:52:18.290", "LastActivityDate": "2014-08-03T03:52:18.290"}, "25101430": {"CommentCount": "0", "ViewCount": "315", "CreationDate": "2014-08-03T03:45:01.617", "LastActivityDate": "2014-08-03T03:57:39.880", "Title": "begin/end member variables and range-based for-loop", "AcceptedAnswerId": "25101457", "PostTypeId": "1", "Id": "25101430", "Score": "2", "Body": "<p>The following code compiles fine as expected:</p>\n<pre><code>struct delimited_range {\n   int* b; int* e;\n};\n\nint* begin(delimited_range x) { return x.b; }\nint* end(delimited_range x) { return x.e; }\n\nint main() {\n   delimited_range r;\n   for (int x : r);\n}\n</code></pre>\n<p>However, if I change the member variables' names to <code>begin</code>/<code>end</code>, as in</p>\n<pre><code>struct delimited_range {\n   int* begin; int* end;\n};\n\nint* begin(delimited_range x) { return x.begin; }\nint* end(delimited_range x) { return x.end; }\n\nint main() {\n   delimited_range r;\n   for (int x : r);\n}\n</code></pre>\n<p>I get compilation errors in both GCC and Clang. My understanding was that, since <code>delimited_range</code> has no member <em>functions</em> <code>begin()</code> and <code>end()</code>, range-based for-loop should use non-member functions in both cases, but it seems that compilers are trying to use the member variables as functions.</p>\n<p>With GCC 4.8.3 I get</p>\n<pre><code>fail.cpp: In function \u2018int main()\u2019:\nfail.cpp:10:17: error: expression cannot be used as a function\n    for (int x : r);\n                 ^\nfail.cpp:10:17: error: expression cannot be used as a function\n</code></pre>\n<p>With Clang 3.4 I get</p>\n<pre><code>main.cpp:10:15: error: called object type 'int *' is not a function or function pointer\n   for (int x : r);\n              ^\nmain.cpp:10:15: note: when looking up 'begin' function for range expression of type 'delimited_range'\n   for (int x : r);\n              ^\n1 error generated.\n</code></pre>\n<p>Is this a bug in the compilers or in the standard?</p>\n", "Tags": "<c++11><for-loop>", "OwnerUserId": "3903076", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25101430_25101457_1": {"section_id": 3906, "quality": 0.9, "length": 9}, "so_25101430_25101457_2": {"section_id": 3906, "quality": 0.8888888888888888, "length": 8}, "so_25101430_25101457_3": {"section_id": 3906, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_25101430_25101457_1": {"section_id": 3766, "quality": 0.9, "length": 9}, "so_25101430_25101457_2": {"section_id": 3766, "quality": 0.8888888888888888, "length": 8}, "so_25101430_25101457_3": {"section_id": 3766, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_25101430_25101457_3": {"section_id": 4792, "quality": 0.7407407407407407, "length": 20}}}, "25101457": {"ParentId": "25101430", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In the context of \u00a76.5.4/1:</p>\n<blockquote>\n<p id=\"so_25101430_25101457_0\">For a range-based for statement of the form</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p id=\"so_25101430_25101457_1\">let <code>range-init</code> be equivalent to the expression surrounded by\n  parentheses <code>( expression )</code> and for a range-based for statement of\n  the form</p>\n<pre><code>for ( for-range-declaration : braced-init-list ) statement\n</code></pre>\n<p id=\"so_25101430_25101457_2\">let <code>range-init</code> be equivalent to the <code>braced-init-list</code>. In each\n  case, a range-based for statement is equivalent to</p>\n<pre><code>{\n    auto &amp;&amp; __range = range_expression ; \n    for (auto __begin = begin_expr,\n        __end = end_expr; \n        __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n}\n</code></pre>\n</blockquote>\n<p>and given that <code>_RangeT</code> is the type of the expression, the standard explains:</p>\n<blockquote>\n<p id=\"so_25101430_25101457_3\">if _RangeT is a class type, the unqualified-ids begin and end are looked up in the scope of class _RangeT as if by class member access lookup (3.4.5), and if either (or both) finds at least one declaration, begin- expr and end-expr are __range.begin() and __range.end(), respectively;</p>\n</blockquote>\n<p>It's not a compiler bug. The <code>begin</code> and <code>end</code> unqualified-ids are correctly looked up and selected. Unfortunately they are not functions in your case, therefore the compiler is supposed to trigger the error.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2014-08-03T03:57:39.880", "Id": "25101457", "Score": "2", "CreationDate": "2014-08-03T03:51:01.343", "LastActivityDate": "2014-08-03T03:57:39.880"}});