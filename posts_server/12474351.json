post_cb({"12474826": {"ParentId": "12474351", "LastEditDate": "2012-09-18T11:05:54.120", "CommentCount": "4", "CreationDate": "2012-09-18T10:09:52.093", "OwnerUserId": "13005", "LastEditorUserId": "13005", "PostTypeId": "2", "Id": "12474826", "Score": "8", "Body": "<p>It's a known bug in gcc, and they record that it's non-conforming since this bug blocks the uber-bug, \"C++98 conformance issues\".</p>\n<p><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=2316\" rel=\"noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=2316</a></p>\n<p>Check the creation date.</p>\n<p>There's some discussion towards the end, about the practicalities of introducing a fix. So the answer to your last question is \"both\": it's a bug <em>and</em> the bug has intentionally been left in for compatibility.</p>\n<p>Other compilers with the same issue might have made the error independently, but I think more likely they also know that it's wrong but want to be bug-compatible with gcc.</p>\n", "LastActivityDate": "2012-09-18T11:05:54.120"}, "12474351": {"CommentCount": "2", "CreationDate": "2012-09-18T09:41:35.913", "PostTypeId": "1", "AcceptedAnswerId": "12474826", "LastEditorUserId": "15168", "LastActivityDate": "2016-05-31T02:10:17.703", "LastEditDate": "2016-05-31T02:10:17.703", "ViewCount": "465", "FavoriteCount": "1", "Title": "Are extern \"C\" functions a separate type?", "Id": "12474351", "Score": "17", "Body": "<p>From the C++11 draft, 7.5 (para. 1):</p>\n<blockquote>\n<p id=\"so_12474351_12474351_0\">Two function types with different language\n  linkages are distinct types even if they are otherwise identical.</p>\n</blockquote>\n<p>So I can do overload based on language linkages:</p>\n<pre><code>extern \"C\" typedef void (*c_function)();\ntypedef void (*cpp_function)();\n\nvoid call_fun(c_function f)\n{\n}\nvoid call_fun(cpp_function f)\n{\n}\n\nextern \"C\" void my_c()\n{\n}\nvoid my_cpp()\n{\n}\nint main()\n{\n    call_fun(my_c);\n    call_fun(my_cpp);\n}\n</code></pre>\n<p>But, with GCC 4.7.1 this sample code gives the error messages:</p>\n<pre><code>test.cpp: In function 'void call_fun(cpp_function)':\ntest.cpp:7:6: error: redefinition of 'void call_fun(cpp_function)'\ntest.cpp:4:6: error: 'void call_fun(c_function)' previously defined here\n</code></pre>\n<p>And with CLang++ :</p>\n<pre><code>test.cpp:7:6: error: redefinition of 'call_fun'\nvoid call_fun(cpp_function f)\n     ^\ntest.cpp:4:6: note: previous definition is here\nvoid call_fun(c_function f)\n     ^\n</code></pre>\n<p>Now the questions:</p>\n<ul>\n<li><p>Is my understanding of the standard correct? Is this code valid?</p></li>\n<li><p>Does anybody know if these are bugs in the compilers or if they are intentionally doing it that way for compatibility purposes?</p></li>\n</ul>\n", "Tags": "<c++><function-pointers><function-overloading><extern-c>", "OwnerUserId": "865874", "AnswerCount": "3"}, "12474637": {"ParentId": "12474351", "CommentCount": "7", "Body": "<p>The code is clearly valid.  G++ (and a number of other compilers) are a\nbit lax (to put it mildly) about integrating the linkage into the type. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "12474637", "Score": "10", "CreationDate": "2012-09-18T09:58:15.760", "LastActivityDate": "2012-09-18T09:58:15.760"}, "12476818": {"ParentId": "12474351", "CommentCount": "1", "Body": "<p>For what it's worth, this code also fails to compile with default settings in VS2012:</p>\n<pre><code>(8) error C2084: function 'void call_fun(c_function)' already has a body\n(4) see previous definition of 'call_fun'\n(19) error C3861: 'call_fun': identifier not found\n(20) error C3861: 'call_fun': identifier not found\n</code></pre>\n", "OwnerUserId": "479574", "PostTypeId": "2", "Id": "12476818", "Score": "1", "CreationDate": "2012-09-18T12:14:09.773", "LastActivityDate": "2012-09-18T12:14:09.773"}, "bq_ids": {"n4140": {"so_12474351_12474351_0": {"section_id": 5517, "quality": 1.0, "length": 12}}, "n3337": {"so_12474351_12474351_0": {"section_id": 5303, "quality": 1.0, "length": 12}}, "n4659": {"so_12474351_12474351_0": {"section_id": 6952, "quality": 1.0, "length": 12}}}});