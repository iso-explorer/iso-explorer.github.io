post_cb({"48624140": {"Id": "48624140", "PostTypeId": "2", "Body": "<p>Undefined behavior is merely the programming language's lack of guarantees. But of course there could be other things dictating the program behavior and even in deterministic ways, such as documented compiler extensions or OS and CPU behavior. </p>\n<p>Therefore you cannot reason about undefined behavior from the programming language's point of view. The language will simply say that all bets are off and no behavior of the program is guaranteed.</p>\n<p>With a specific system in mind, you can reason about what will happen though. If this is a meaningful thing to do is another story. </p>\n<p>In your specific example, the typical system will <em>probably</em> just print some garbage indeed, and it is quite unlikely that the rest of the program will be affected. This isn't always the case of UB though. </p>\n", "LastActivityDate": "2018-02-05T13:53:29.193", "CommentCount": "0", "CreationDate": "2018-02-05T13:53:29.193", "ParentId": "48623709", "Score": "2", "OwnerUserId": "584518"}, "bq_ids": {"n4140": {"so_48623709_48623887_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5768}}, "n3337": {"so_48623709_48623887_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5541}}, "n4659": {"so_48623709_48623887_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 7225}}}, "48623785": {"Id": "48623785", "PostTypeId": "2", "Body": "<p>Once a statement with undefined behaviour is reached, then the behaviour of the entire program is undefined.</p>\n<p>Paradoxically, the behaviour of statements that have ran prior to that are undefined too.</p>\n", "LastActivityDate": "2018-02-05T13:34:14.083", "CommentCount": "2", "CreationDate": "2018-02-05T13:34:14.083", "ParentId": "48623709", "Score": "16", "OwnerUserId": "2380830"}, "48623887": {"Id": "48623887", "PostTypeId": "2", "Body": "<p>Once there is UB then nothing good can be expected. Standard says about it.  </p>\n<p>n1570-3.4.3 (P2):</p>\n<blockquote>\n<p id=\"so_48623709_48623887_0\">Possible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message). </p>\n</blockquote>\n<p>This behaviour holds for the entire program. </p>\n", "LastActivityDate": "2018-02-05T13:38:57.297", "CommentCount": "0", "CreationDate": "2018-02-05T13:38:57.297", "ParentId": "48623709", "Score": "1", "OwnerUserId": "2455888"}, "48623709": {"ViewCount": "225", "Body": "<p>Suppose that a programmer forgot to initialize one of his automatic variables, and that he used its value, thereby invoking undefined behavior.</p>\n<pre><code>...\nint i = 0, j;\n...\nprintf(\"value of 'j': %d\\n\", j);\n...\n...\nchar buf[256];\nfputs(\"Enter query:\", stdout);\nfgets(buf, sizeof(buf), stdin);\n... //process input\n... perform other tasks\n</code></pre>\n<p>The programmer noticed gibberish characters on the screen, and realized that his program is erroneous, but it did not crash and went on anyway.</p>\n<p>Supposing after this point, the program prompts the user for input and is expected to process it, display results, and perform other tasks all of which are independent from the uninitialized variable, is the programmer encouraged to discontinue the use of the program, fix the error, recompile, and run? Will the remainder of the program be inconsistent?</p>\n", "AcceptedAnswerId": "48623785", "Title": "If a part of the program exhibits undefined behavior, would it affect the remainder of the program?", "CreationDate": "2018-02-05T13:30:41.117", "LastActivityDate": "2018-02-05T23:18:41.090", "CommentCount": "5", "LastEditDate": "2018-02-05T13:35:21.943", "PostTypeId": "1", "LastEditorUserId": "8751754", "Id": "48623709", "Score": "6", "OwnerUserId": "2474248", "Tags": "<c++><c><undefined-behavior>", "AnswerCount": "4"}, "48633074": {"Id": "48633074", "PostTypeId": "2", "Body": "<p>The Standard presumes that programs run on an \"abstract machine\" which might arbitrarily behave in the most vexatious way possible, including time-travel, in any case where the Standard imposes no requirements.  Many real-world implementations to target real machines whose behavior is defined and documented in many cases where the C Standard imposes no requirements.  Unfortunately, some compiler writers are sloppy about making clear when their compiler will or will not behave in a fashion consistent with executing all of the steps of a program in sequence, and when it will or will not expose characteristic behaviors of the environment in cases where the Standard would allow but not require it to do so.</p>\n<p>If a compiler specifies how it stores automatic objects of type <code>int</code>, and such types have no trap representations, such specification may also imply how code like the above will behave if the implementation's generated code is always consistent with that spec.  The problem is that many implementations define how they store various objects, but don't indicate whether they store them in such fashion consistently or only in cases where the Standard would require it.</p>\n", "LastActivityDate": "2018-02-05T23:18:41.090", "CommentCount": "0", "CreationDate": "2018-02-05T23:18:41.090", "ParentId": "48623709", "Score": "0", "OwnerUserId": "363751"}});