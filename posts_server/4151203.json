post_cb({"4151620": {"Id": "4151620", "PostTypeId": "2", "Body": "<p>From the standard docs, <em>Sec 3.3.1</em></p>\n<blockquote>\n<p id=\"so_4151203_4151620_0\">Every name is introduced in some portion of program text called a declarative region, which is the largest part of the\n  program in which that name is valid, that is, in which that name may be used as an unqualified name to refer to the\n  same entity. In general, each particular name is valid only within some possibly discontiguous portion of program text\n  called its scope. To determine the scope of a declaration, it is sometimes convenient to refer to the potential scope of\n  a declaration. The scope of a declaration is <em>the same</em> as its potential scope <strong>unless the potential scope contains another\n  declaration of the same name.</strong> In that case, the potential scope of the declaration in <strong>the inner (contained) declarative\n  region is excluded from the scope of the declaration in the outer (containing) declarative region.</strong></p>\n</blockquote>\n<p>It might sound confusing in your first read, but it does answer your question.</p>\n<p>The potential scope is same as the scope of the declaration unless another (inner) declaration occurs. If occurred, the potential scope of the outer declaration is <em>removed</em> and <strong>just</strong> the inner declaration's holds.</p>\n<p>Hope am clear and it helps..</p>\n", "LastActivityDate": "2010-11-11T05:32:16.810", "CommentCount": "1", "CreationDate": "2010-11-11T05:32:16.810", "ParentId": "4151203", "Score": "2", "OwnerUserId": "249490"}, "4151278": {"Id": "4151278", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4151203_4151278_0\">Alright, I wanna know why this code is working, I just realized that I have two variables with the same name within the same scope.</p>\n</blockquote>\n<p>You seem confused about scopes.  They're not \"within the same\" scope... the for loop's k has it's own nested/inner scope.  More importantly, to see why the language allows it, consider:</p>\n<pre><code>#define DO_SOMETHING \\\n    do { for (int i = 1; i &lt;= 2; ++i) std::cout &lt;&lt; i &lt;&lt; '\\n'; } while (false)\n\nvoid f()\n{\n    for (int i = 1; i &lt;= 10; ++i)\n        DO_SOMETHING();\n}\n</code></pre>\n<p>Here, the text substituted by the macro \"DO_SOMETHING\" gets evaluated in the same scope as i.  If you're writing DO_SOMETHING, you may need its expansion to store something in a variable, and settle on the identifier <code>i</code> - obviously you have no way of knowing if it'll already exist in the calling context.  You could try to pick something more obscure, but you'd have people using such convoluted variable names that their code maintainability suffered, and regardless sooner or later there would be a clash.  So, the language just lets the inner scopes introduce variables with the same name: the innermost match is used until its scope exits.</p>\n<p>Even when you're not dealing with macros, it's a pain to have to stop and think about whether some outer scope is already using the same name.  If you know you just want a quick operation you can pop it an indepedent (nested) scope without considering that larger context (as long as you don't have code in there that actually wants to use the outer-scope variable: if you do then you can sometimes specify it explicitly (if it's scoped by namespaces and classes, but if it's in a function body you do end up needing to change your own loop variable's name (or create a reference or something to it before introducing your same-named variable)).</p>\n", "LastActivityDate": "2010-11-11T04:05:23.173", "CommentCount": "5", "CreationDate": "2010-11-11T04:05:23.173", "ParentId": "4151203", "Score": "4", "OwnerUserId": "410767"}, "4151263": {"Id": "4151263", "PostTypeId": "2", "Body": "<p>In C/C++ the variable  scope is limited by the <em>braces</em> so the following code is valid for the compiler:</p>\n<pre><code>int k()\n{ \n    int k;\n    {  \n        int k;\n        {\n           int k;               \n        }    \n    } \n} \n</code></pre>\n", "LastEditorUserId": "476200", "LastActivityDate": "2010-11-11T15:41:54.410", "Score": "0", "CreationDate": "2010-11-11T04:01:03.703", "ParentId": "4151203", "CommentCount": "1", "OwnerUserId": "476200", "LastEditDate": "2010-11-11T15:41:54.410"}, "bq_ids": {"n4140": {"so_4151203_4151620_0": {"length": 67, "quality": 0.9305555555555556, "section_id": 7044}}, "n3337": {"so_4151203_4151620_0": {"length": 67, "quality": 0.9305555555555556, "section_id": 6789}}, "n4659": {"so_4151203_4151620_0": {"length": 67, "quality": 0.9305555555555556, "section_id": 8541}}}, "4151226": {"Id": "4151226", "PostTypeId": "2", "Body": "<p>Because you are allowed to have two variables of the same name within the same scope, but not within the same declaration space.  The compiler takes the most-local variable of the appropriate name, similar to how you can 'hide' global variables of name X with a member variable of name X.  You should be getting a warning though.</p>\n", "LastActivityDate": "2010-11-11T03:51:01.633", "CommentCount": "4", "CreationDate": "2010-11-11T03:51:01.633", "ParentId": "4151203", "Score": "1", "OwnerUserId": "10247"}, "4151203": {"ViewCount": "4967", "Body": "<p>Alright, I wanna know why this code is working, I just realized that I have two variables with the same name within the same scope.</p>\n<p>I'm using g++ (gcc 4.4).</p>\n<pre><code>for(int k = 0 ; k &lt; n ; k++)\n    {\n        while(true)\n        {\n            i = Tools::randomInt(0, n);\n            bool exists = false;\n\n            for(int k = 0 ; k &lt; p_new_solution_size ; k++)\n                if( i == p_new_solution[k] )\n                {\n                    exists = true;\n                    break;\n                }\n            if(!exists)\n                break;\n        }\n\n        p_new_solution[p_new_solution_size] = i;\n        p_new_solution_size++;\n    }\n</code></pre>\n", "AcceptedAnswerId": "4151278", "Title": "Why is this c++ working? (variables with the same name)", "CreationDate": "2010-11-11T03:46:31.660", "Id": "4151203", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-11-11T15:41:54.410", "Score": "5", "OwnerUserId": "481232", "Tags": "<c++><scope>", "AnswerCount": "5"}, "4151215": {"Id": "4151215", "PostTypeId": "2", "Body": "<p>The <code>k</code> in the inner for loop shadows (or hides) the <code>k</code> in the outer for loop.  </p>\n<p>You can declare multiple variables with the same name at different scopes.  A very simple example would be the following:</p>\n<pre><code>int main()\n{\n    int a;       // 'a' refers to the int until it is shadowed or its block ends\n    { \n        float a; // 'a' refers to the float until the end of this block\n    }            // 'a' now refers to the int again\n}\n</code></pre>\n", "LastActivityDate": "2010-11-11T03:49:09.773", "CommentCount": "6", "CreationDate": "2010-11-11T03:49:09.773", "ParentId": "4151203", "Score": "9", "OwnerUserId": "151292"}});