post_cb({"17348661": {"ParentId": "17348622", "LastEditDate": "2013-06-27T16:44:58.640", "CommentCount": "1", "CreationDate": "2013-06-27T16:39:02.977", "OwnerUserId": "311966", "LastEditorUserId": "311966", "PostTypeId": "2", "Id": "17348661", "Score": "11", "Body": "<p><code>||</code> is the logical OR operator.  From C11 <em>s6.5.14 Logical OR operator</em></p>\n<blockquote>\n<p id=\"so_17348622_17348661_0\">The || operator shall yield 1 if either of its operands compare\n  unequal to 0; otherwise, it yields 0. The result has type int.</p>\n<p id=\"so_17348622_17348661_1\">...the || operator guarantees left-to-right evaluation;</p>\n</blockquote>\n<p>Applying this to the calculation for <code>w</code> we get</p>\n<pre><code>w = i || j || k  == (i || j) || k\n                 == (non-zero || non-zero) || 0\n                 == 1 || 0\n                 == 1\n</code></pre>\n<p>Calculations for <code>x</code>, <code>y</code>, <code>z</code> are similar.  C11 <em>s6.5.13.3</em> states that the result from the <code>&amp;&amp;</code> operator shall be 0 or 1.</p>\n", "LastActivityDate": "2013-06-27T16:44:58.640"}, "17348694": {"ParentId": "17348622", "LastEditDate": "2013-06-28T02:33:19.660", "CommentCount": "0", "CreationDate": "2013-06-27T16:40:45.800", "OwnerUserId": "1715716", "LastEditorUserId": "1715716", "PostTypeId": "2", "Id": "17348694", "Score": "2", "Body": "<p><code>||</code> is the logical <strong>OR</strong>.</p>\n<pre><code>w = i || j || k;\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>w = (i != 0) || (j != 0) || (k != 0);\n</code></pre>\n<p><code>i</code> is 4, which explains that <code>w</code> is true (which is evaluated to 1 as C uses integers to deal with booleans).</p>\n<p>The same is applicable to <code>&amp;&amp;</code> (the logical <strong>AND</strong>), etc.</p>\n", "LastActivityDate": "2013-06-28T02:33:19.660"}, "17348676": {"ParentId": "17348622", "CommentCount": "0", "Body": "<p>In C there is no \"strong\" built-in type for Boolean values, so integers are used instead. Results of evaluating logical expressions, such as ones using <code>||</code> and <code>&amp;&amp;</code>, can be assigned to integer variables.</p>\n<p>When a value is used in a logical operator, the Boolean interpretation is very straightforward: zeros are interpreted as <code>false</code>, while all non-zero values are interpreted as <code>true</code>.</p>\n<p>Now you should be able to figure out the expressions for yourself:</p>\n<ul>\n<li><code>i || j || k</code> evaluates as <code>1</code>, because <code>i</code> and <code>j</code> are not zeros</li>\n<li><code>i &amp;&amp; j &amp;&amp; k</code> evaluates as <code>0</code>, because <code>k</code> is zero,</li>\n<li>...and so on.</li>\n</ul>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "17348676", "Score": "6", "CreationDate": "2013-06-27T16:39:47.033", "LastActivityDate": "2013-06-27T16:39:47.033"}, "17348788": {"ParentId": "17348622", "CommentCount": "0", "Body": "<p>This is how conceptually it works:</p>\n<p>w = i || j || k;</p>\n<p>w = <strong>4 || -1</strong> || 0; //values replaced</p>\n<p>w = <strong>true || 0;</strong> //4 || -1 evaluates to true</p>\n<p>w = (true); //true is being assigned to integer</p>\n<p>w = 1; //0 is false, 1 is for true</p>\n", "OwnerUserId": "155755", "PostTypeId": "2", "Id": "17348788", "Score": "5", "CreationDate": "2013-06-27T16:44:59.457", "LastActivityDate": "2013-06-27T16:44:59.457"}, "17348622": {"CommentCount": "5", "ViewCount": "906", "PostTypeId": "1", "ClosedDate": "2013-09-27T13:27:52.167", "LastEditorUserId": "1237747", "CreationDate": "2013-06-27T16:37:19.237", "LastActivityDate": "2013-09-14T09:32:29.530", "LastEditDate": "2013-09-14T09:32:29.530", "AcceptedAnswerId": "17348661", "Title": "How || and && works", "Id": "17348622", "Score": "2", "Body": "<pre><code>main( ) {\n    int   i = 4, j = -1, k = 0, w, x, y, z ;\n    w = i || j || k ;\n    x = i &amp;&amp; j &amp;&amp; k ;\n    y = i || j &amp;&amp; k ;\n    z = i &amp;&amp; j || k ;\n    printf ( \"\\nw = %d x = %d y = %d z = %d\", w, x, y, z ) ;\n}\n</code></pre>\n<p>I'm just learning C and I came across this code. I honestly dont know what w, x, y and z are assigned to. Apparently the output is as follows:</p>\n<pre><code>w = 1 x = 0 y = 1 z = 1\n</code></pre>\n<p>How is 'w' equal to 1? I dont get it.</p>\n", "Tags": "<c++><c><variable-assignment>", "OwnerUserId": "2396933", "AnswerCount": "5"}, "17349291": {"ParentId": "17348622", "CommentCount": "0", "Body": "<p>It is logical operations.</p>\n<p>|| - means logical or, if at least one element is not 0, result is 1, otherwise its 0;\n&amp;&amp; - means logical and, if all elements are 1, result is 1, otherwise its 0;</p>\n<p>Logical and has higher priority, so:</p>\n<pre><code>x = 0 || 4 &amp;&amp; 0;\n</code></pre>\n<p>Would be 0, because:</p>\n<ol>\n<li>4&amp;&amp;0 = 0</li>\n<li>0||0 = 0.</li>\n</ol>\n<p>These operators are about full value of number. There are | and &amp; operators connected with bits.\nEverything about working and priority is the same, just short example:</p>\n<pre><code>uint8_t x = 2 || 4 &amp;&amp; 7;\n\n\n\n1. 4=00000100 and 7=00000111\n      00000100\n   &amp;  00000111\ngives:00000100\n 2. 2=00000010\n      00000010\n   |  00000100\ngives:00000110, it is 6\n</code></pre>\n<p>I hope it is helpful.</p>\n", "OwnerUserId": "1237747", "PostTypeId": "2", "Id": "17349291", "Score": "2", "CreationDate": "2013-06-27T17:11:20.167", "LastActivityDate": "2013-06-27T17:11:20.167"}, "bq_ids": {"n4140": {"so_17348622_17348661_1": {"section_id": 6163, "quality": 1.0, "length": 4}}, "n3337": {"so_17348622_17348661_1": {"section_id": 5924, "quality": 1.0, "length": 4}}, "n4659": {"so_17348622_17348661_1": {"section_id": 7660, "quality": 1.0, "length": 4}}}});