post_cb({"44653025": {"ParentId": "44641253", "CommentCount": "2", "Body": "<p>I believe this is a clang bug.</p>\n<p>The rules in [dcl.spec.auto] are, emphasis mine:</p>\n<blockquote>\n<p id=\"so_44641253_44653025_0\">If the declared return type of the function contains a placeholder type, the return type of the function is deduced from <strong>non-discarded</strong> <code>return</code> statements, if any, in the body of the function ([stmt.if]).</p>\n<p id=\"so_44641253_44653025_1\">[...]</p>\n<p id=\"so_44641253_44653025_2\">If a function with a declared return type that contains a placeholder type has multiple <strong>non-discarded</strong> <code>return</code> statements, the return type is deduced for each such return statement. If the type deduced is not the same in each deduction, the program is ill-formed.</p>\n</blockquote>\n<p>One or the other <code>return</code> statement in the lambda is discarded (the non-taken branch in <code>if constexpr</code> is called a <em>discarded statement</em>), which leaves only one non-discarded return statement, so the return type of the lambda should be simply deduced from that one left over. </p>\n<p>Moreover, clang is okay with just this:</p>\n<pre><code>template &lt;int A&gt;\nvoid f() {\n    [](auto...) {\n        if constexpr (A == 0)\n            return 42;\n        else\n            return 3.14;\n    }();\n}\n\nint main() {  \n    f&lt;0&gt;();\n    f&lt;1&gt;();\n}\n</code></pre>\n<p>So it's probably some bad interaction with how lambdas work in pack expressions. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "44653025", "Score": "3", "CreationDate": "2017-06-20T12:24:56.493", "LastActivityDate": "2017-06-20T12:24:56.493"}, "44641253": {"CommentCount": "4", "ViewCount": "190", "PostTypeId": "1", "LastEditorUserId": "3233393", "CreationDate": "2017-06-19T23:05:51.433", "LastActivityDate": "2017-06-20T12:24:56.493", "Title": "`if constexpr`, inside lambda, inside pack expansion -- compiler bug?", "FavoriteCount": "2", "LastEditDate": "2017-06-20T07:55:14.033", "Id": "44641253", "Score": "7", "Body": "<pre><code>clang version 5.0.0 (trunk 305664)\nTarget: x86_64-unknown-linux-gnu\n</code></pre>\n<p>The following code compiles successfully:</p>\n<pre><code>template &lt;int... A&gt;\nvoid f() {\n    ([](auto) {\n        if constexpr (A == 0)\n            return 42;\n        else\n            return 3.14;\n    }(0), ...);\n}\n\nint main() {\n    f&lt;0, 1&gt;();\n}\n</code></pre>\n<p>... but this one doesn't:</p>\n<pre><code>template &lt;int... A&gt;\nvoid f() {\n    ([](auto...) {            // Variadic lambda\n        if constexpr (A == 0)\n            return 42;\n        else\n            return 3.14;\n    }(), ...);                // No argument\n}\n\nint main() {\n    f&lt;0, 1&gt;();\n}\n</code></pre>\n<p>... yielding:</p>\n<pre><code>&lt;source&gt;:7:13: error: 'auto' in return type deduced as 'double' here but deduced as 'int' in earlier return statement\n            return 3.14;\n            ^\n&lt;source&gt;:3:6: note: in instantiation of function template specialization 'f()::(anonymous class)::operator()&lt;&gt;' requested here\n    ([](auto...) {            // Variadic lambda\n     ^\n&lt;source&gt;:12:5: note: in instantiation of function template specialization 'f&lt;0, 1&gt;' requested here\n    f&lt;0, 1&gt;();\n    ^\n</code></pre>\n<p>I wouldn't expect different behaviours between an empty argument pack and a dummy argument.</p>\n<p>Is there a reason to this discrepancy, or is this a compiler bug?</p>\n", "Tags": "<c++><language-lawyer><c++1z><clang++><compiler-bug>", "OwnerUserId": "3233393", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_44641253_44653025_0": {"section_id": 5446, "quality": 0.8823529411764706, "length": 15}, "so_44641253_44653025_2": {"section_id": 5453, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_44641253_44653025_0": {"section_id": 5541, "quality": 0.5294117647058824, "length": 9}}, "n4659": {"so_44641253_44653025_0": {"section_id": 6873, "quality": 0.9411764705882353, "length": 16}, "so_44641253_44653025_2": {"section_id": 6879, "quality": 1.0, "length": 24}}}});