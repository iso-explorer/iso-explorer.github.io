post_cb({"23966373": {"ParentId": "23966271", "CommentCount": "1", "Body": "<p>Function overloading only works if the functions are in the same namespace. That is, the name is looked up first by namespace, then by the function signature. In case I, there is a function named foo inside of the A namespace, so it tries to call that, but there is no definition of foo <em>in that namespace</em> which accepts an integer parameter.</p>\n<p>In any case, you can call the global foo function as follows:</p>\n<pre><code>int a = ::foo(5);\n</code></pre>\n<p>The double colon, with no namespace prefix accesses the global namespace. </p>\n", "OwnerUserId": "2543666", "PostTypeId": "2", "Id": "23966373", "Score": "0", "CreationDate": "2014-05-31T04:27:56.870", "LastActivityDate": "2014-05-31T04:27:56.870"}, "23966271": {"CommentCount": "1", "ViewCount": "41", "CreationDate": "2014-05-31T04:05:46.763", "LastActivityDate": "2014-05-31T06:01:47.993", "Title": "Overloaded function name lookup", "PostTypeId": "1", "Id": "23966271", "Score": "0", "Body": "<p>There are 3 examples:</p>\n<p>I.</p>\n<pre><code>int foo(int i){ return 0; }\n\nnamespace A\n{\n    int foo();\n    int a = foo(5);//Error: too many argument to function int a::foo()\n}\n</code></pre>\n<p>II.</p>\n<pre><code>namespace A\n{\n    int foo(int i){ return 0; }\n    int foo(){ return 1; }\n    int a = foo(5);//OK, Call A::foo(int)\n}\n</code></pre>\n<p>III</p>\n<pre><code>namespace A\n{\n    int foo(){ return 1; }\n    int foo(int i){ return 0; }\n    int a = foo(5);//OK, Call A::foo(int)\n}\n</code></pre>\n<p>What exactly rules used to determine the set of candidate functon? I thought that (3.4.1/1)</p>\n<blockquote>\n<p id=\"so_23966271_23966271_0\">name lookup ends as soon as a declaration is found for the name.</p>\n</blockquote>\n<p>It is unclear what declaration (<code>int foo(int)</code> or <code>int foo()</code>) will be found first in the cases II and III?</p>\n", "Tags": "<c++>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "23966948": {"ParentId": "23966271", "CommentCount": "0", "Body": "<p>From <strong>\u00a713-1 Overloading</strong>,</p>\n<blockquote>\n<p id=\"so_23966271_23966948_0\">When two or more di\ufb00erent declarations are speci\ufb01ed for a single name in the same scope, that name is said\n  to be overloaded. By extension, two declarations in the same scope that declare the same name but with\n  di\ufb00erent types are called overloaded declarations. Only function and function template declarations can be\n  overloaded; variable and type declarations cannot be overloaded.</p>\n</blockquote>\n<p>Since you have overloaded function declarations in the same namespace, unqualified name lookup finds matches the set of functions and stops. (I admit the standardese seem a bit incorrect here since it says \"as soon as <strong>a</strong> declaration is found for the name\".)</p>\n<p>So for <em>II</em> and <em>III</em>, unqualified name lookup finds the same set of overloaded functions.</p>\n<p>Extending <em>III</em> a bit further,</p>\n<pre><code>int foo(int i) { return 42; }\nnamespace A {\n  int foo() { return 1; }\n  int foo(int i) { return 0; }\n  int a = foo(5); // OK, Call A::foo(int)\n}\n</code></pre>\n<p>Now, it may seem as <strong>::foo(int)</strong> and <strong>A::foo(int)</strong> might be ambiguous but it's not because unqualified name lookup stops after finding <strong>A::foo()</strong> and <strong>A::foo(int)</strong>. Then it's up to overload resolution to pick the best viable function.</p>\n", "OwnerUserId": "2968284", "PostTypeId": "2", "Id": "23966948", "Score": "1", "CreationDate": "2014-05-31T06:01:47.993", "LastActivityDate": "2014-05-31T06:01:47.993"}, "bq_ids": {"n4140": {"so_23966271_23966948_0": {"section_id": 554, "quality": 0.8717948717948718, "length": 34}, "so_23966271_23966271_0": {"section_id": 7087, "quality": 1.0, "length": 7}}, "n3337": {"so_23966271_23966948_0": {"section_id": 545, "quality": 0.8717948717948718, "length": 34}, "so_23966271_23966271_0": {"section_id": 6831, "quality": 1.0, "length": 7}}, "n4659": {"so_23966271_23966948_0": {"section_id": 577, "quality": 0.8461538461538461, "length": 33}, "so_23966271_23966271_0": {"section_id": 8588, "quality": 1.0, "length": 7}}}});