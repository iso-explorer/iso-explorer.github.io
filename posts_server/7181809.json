post_cb({"7181905": {"ParentId": "7181809", "CommentCount": "1", "Body": "<p>No, because <em>unnamed namespaces</em> (that's what they're actually called) are defined like this in the C++ standard:</p>\n<blockquote>\n<p id=\"so_7181809_7181905_0\"><strong>7.3.1.1 Unnamed namespaces [namespace.unnamed]</strong></p>\n<p id=\"so_7181809_7181905_1\"><em>1.</em> An unnamed-namespace-definition behaves as if it were replaced by</p>\n<pre><code>    namespace unique { /* empty body */ }\n    using namespace unique;\n    namespace unique { namespace-body }\n</code></pre>\n<p id=\"so_7181809_7181905_2\">where all occurrences of unique in a translation unit are replaced by\n  the same identifier and this identifier differs from all other\n  identifiers in the entire program.</p>\n</blockquote>\n<p>So with your class it's equivalent to:</p>\n<pre><code>namespace SomeUniqueNameGeneratedByTheCompiler {}\nusing namespace SomeUniqueNameGeneratedByTheCompiler;\nnamespace SomeUniqueNameGeneratedByTheCompiler\n{    \n    class AnonymousHelperClass    \n    {    \n        // . . .     \n    };    \n}\n</code></pre>\n<p>So the full qualification of the <code>AnonymousHelperClass</code> class is <code>::SomeUniqueNameGeneratedByTheCompiler::AnonymousHelperClass</code>, not <code>::AnonymousHelperClass</code>. So even if you did this:</p>\n<pre><code>class AnonymousHelperClass; // Forward declaration\n\nclass C     \n{     \n  // ...     \nprivate:     \n  void Boing(AnonymousHelperClass &amp;helper);     \n};  \n</code></pre>\n<p>That forward declaration refers to a different <code>AnonymousHelperClass</code>. You could put the forward declaration in the <code>SomeUniqueNameGeneratedByTheCompiler</code> namespace, but since only the compiler knows this name, it can't be done.</p>\n", "OwnerUserId": "308661", "PostTypeId": "2", "Id": "7181905", "Score": "2", "CreationDate": "2011-08-24T20:32:29.793", "LastActivityDate": "2011-08-24T20:32:29.793"}, "7181809": {"CommentCount": "0", "ViewCount": "272", "CreationDate": "2011-08-24T20:23:30.587", "LastActivityDate": "2011-08-24T20:32:29.793", "Title": "Passing anonymous classes to private member functions", "AcceptedAnswerId": "7181861", "PostTypeId": "1", "Id": "7181809", "Score": "3", "Body": "<p>Is it possible to use a class defined in an anonymous namespace as a parameter in a private member function?  I haven\u2019t found a way to forward declare AnonymousHelperClass in the header.</p>\n<pre><code>// C.h\nclass C\n{\n  // ...\nprivate:\n  void Boing(AnonymousHelperClass &amp;helper);\n};\n</code></pre>\n<p>.  </p>\n<pre><code>// C.cpp\nnamespace\n{\n  class AnonymousHelperClass\n  {\n    // . . . \n  };\n}\n\nC::Boing(AnonymousHelperClass &amp;helper)\n{\n  // ...\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "910532", "AnswerCount": "2"}, "7181861": {"ParentId": "7181809", "CommentCount": "0", "Body": "<p>No, because there is no way to name the type in the header file.</p>\n<p>However, you could turn the private member function into a template:</p>\n<pre><code>// C.h\nclass C\n{\npublic:\n\n    void Foo();\n\nprivate:\n    template &lt;typename TAnonymousHelper&gt;\n    void Boing(TAnonymousHelper&amp;);\n};\n</code></pre>\n<p>Then define it in the source file and use it with the <code>AnonymousHelperClass</code>:</p>\n<pre><code>// C.cpp\n#include \"C.h\"\n\nnamespace\n{\n    class AnonymousHelperClass { };\n}\n\ntemplate &lt;typename TAnonymousHelper&gt;\nvoid C::Boing(TAnonymousHelper&amp; x) { }\n\nvoid C::Foo()\n{\n    AnonymousHelperClass x;\n    Boing(x);\n}\n</code></pre>\n<p>Though really, it's probably easier just to rework your logic such that the private member function can be a namespace-scope function in the .cpp file.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "7181861", "Score": "4", "CreationDate": "2011-08-24T20:28:25.563", "LastActivityDate": "2011-08-24T20:28:25.563"}, "bq_ids": {"n4140": {"so_7181809_7181905_2": {"section_id": 5482, "quality": 0.9333333333333333, "length": 14}, "so_7181809_7181905_1": {"section_id": 5482, "quality": 1.0, "length": 4}}, "n3337": {"so_7181809_7181905_2": {"section_id": 5268, "quality": 0.9333333333333333, "length": 14}, "so_7181809_7181905_1": {"section_id": 5268, "quality": 1.0, "length": 4}}, "n4659": {"so_7181809_7181905_2": {"section_id": 6917, "quality": 0.8666666666666667, "length": 13}, "so_7181809_7181905_1": {"section_id": 6917, "quality": 1.0, "length": 4}}}});