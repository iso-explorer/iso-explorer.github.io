post_cb({"26771692": {"CommentCount": "13", "ViewCount": "4122", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-11-06T04:23:02.713", "LastActivityDate": "2016-05-02T00:41:31.803", "Title": "Loop with a zero execution time", "FavoriteCount": "11", "LastEditDate": "2014-11-10T02:00:43.827", "Id": "26771692", "Score": "71", "Body": "<p>Is it possible to have a loop which has a zero execution time? I would think that even an empty loop should have an execution time since there is an overhead associated with it. </p>\n", "Tags": "<c++><c><optimization><execution-time><as-if>", "OwnerUserId": "3678189", "AnswerCount": "4"}, "26815087": {"ParentId": "26771692", "CommentCount": "0", "Body": "<p>As well as compiler optimisations, some CPU architectures, particularly DSPs, have <em>zero overhead looping</em>, whereby a loop with a fixed number of iterations is effectively optimised away by the hardware, see e.g. <a href=\"http://www.dsprelated.com/showmessage/20681/1.php\">http://www.dsprelated.com/showmessage/20681/1.php</a></p>\n", "OwnerUserId": "253056", "PostTypeId": "2", "Id": "26815087", "Score": "12", "CreationDate": "2014-11-08T08:02:22.897", "LastActivityDate": "2014-11-08T08:02:22.897"}, "26771708": {"ParentId": "26771692", "CommentCount": "0", "Body": "<p>Yes - if the compiler determines that the loop is dead code (will never execute) then it will not generate code for it.  That loop will have 0 execution time, although strictly speaking it doesn't exist at the machine code level.</p>\n", "OwnerUserId": "1638010", "PostTypeId": "2", "Id": "26771708", "Score": "52", "CreationDate": "2014-11-06T04:25:41.627", "LastActivityDate": "2014-11-06T04:25:41.627"}, "26881466": {"ParentId": "26771692", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_26771692_26881466_0\">The compiler is not obliged to evaluate the expression, or a portion of an expression, that has no side effects and whose result is discarded.</p>\n</blockquote>\n<p>Harbison and Steele, <a href=\"http://rads.stackoverflow.com/amzn/click/013089592X\" rel=\"nofollow\">C: A Reference Manual</a></p>\n", "OwnerUserId": "939050", "PostTypeId": "2", "Id": "26881466", "Score": "3", "CreationDate": "2014-11-12T07:28:53.290", "LastActivityDate": "2014-11-12T07:28:53.290"}, "26782247": {"ParentId": "26771692", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Yes, under the <em>as-if rule</em> the compiler is only obligated to emulate the observable behavior of the code, so if you have a loop that does not have any observable behavior then it can be optimized away completely and therefore will effectively have zero execution time.</p>\n<p><b>Examples</b></p>\n<p>For example the following code:</p>\n<pre><code>int main()\n{\n  int j = 0 ;\n  for( int i = 0; i &lt; 10000; ++i )\n  {\n    ++j ;\n  }\n}\n</code></pre>\n<p>compiled with <code>gcc 4.9</code> using the <code>-O3</code> flag basically ends up reducing to the following (<em><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22colouriseAsm%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22JYOwLgBAtghqAUBKAUAb2RCpICsIF4IAGCAbgwgDMB7AJ3i3CwONOYB4IBGI3otgNQDgEFJnSZMQvOUwBfZHKAAA%22%2C%22compiler%22%3A%22%2Fopt%2Fgcc-4.9.0%2Fbin%2Fg%2B%2B%22%2C%22options%22%3A%22-std%3Dc%2B%2B11%20-O2%20-fverbose-asm%20-fno-inline-small-functions%20%22%7D%5D%7D\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>main:\n  xorl  %eax, %eax  #\n  ret\n</code></pre>\n<p>Pretty much all optimizations allowed fall under the <em>as-if rule</em>, the only exception I am aware of is <a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\" rel=\"nofollow\">copy elison</a> which is allowed to effect the observable behavior.</p>\n<p>Some other examples would include <a href=\"http://isocpp.org/blog/2013/08/optimizing-c-code-dead-code-elimination-jim-hogg\" rel=\"nofollow\">dead code elimination</a> which can remove code that the compiler can prove will never be executed. For example even though the following loop does indeed contain a side effect it can be optimized out since we can prove it will never be executed (<em><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22colouriseAsm%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22AQ4YgSwOwYwGwK4BMCmwA8BnALkiB7AOgAsA%2BAKHNGGm2AFsBDaACgEorQBvT624AFbAAvMAAMwANy9QEAGYtgcxnExoO1ED02g5%2BAE6L%2BEEeMk0MwAIxjbY8wGoHJjTuDa3IAA77aC4ABEAKRIADpQAQA0gsBsUjI6TkLSngC%2BCcDp1KlAAAA%3D%3D%22%2C%22compiler%22%3A%22%2Fopt%2Fgcc-4.9.0%2Fbin%2Fg%2B%2B%22%2C%22options%22%3A%22-std%3Dc%2B%2B11%20-O3%20-fverbose-asm%20-fno-inline-small-functions%20%22%7D%5D%7D\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n  int j = 0 ;\n  if( false ) // The loop will never execute\n  {\n    for( int i = 0; i &lt; 10000; ++i )\n    {\n      printf( \"%d\\n\", j ) ;\n      ++j ;\n    }\n  }\n}\n</code></pre>\n<p>The loop will optimize away the same as the previous example. A more interesting example would be the case where a calculation in a loop can be deduced into a constant thereby avoiding the need for a loop(<em>not sure what optimization category this falls under</em>), for example:</p>\n<pre><code>int j = 0 ;\nfor( int i = 0; i &lt; 10000; ++i )\n{\n  ++j ;\n}\nprintf( \"%d\\n\", j ) ;\n</code></pre>\n<p>can be optimized away to (<em><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22colouriseAsm%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4DOAXOID2A6ACwD4AoE8DJAWwENwAKAShIG8SkOkKkArJAXiQAGJAG52nAGY4ATvS5hKIAcNFdUSAIxCdQtQGp9y5pyRtTHQ33GmAvhI4AHGRUnyARAFI4AHTDuAGl4kRjESWyAA%3D%22%2C%22compiler%22%3A%22%2Fopt%2Fgcc-4.9.0%2Fbin%2Fg%2B%2B%22%2C%22options%22%3A%22-std%3Dc%2B%2B11%20-O3%20-fverbose-asm%20-fno-inline-small-functions%20%22%7D%5D%7D\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>movl    $10000, %esi    #,\nmovl    $.LC0, %edi #,\nxorl    %eax, %eax  #\ncall    printf  #\n</code></pre>\n<p>We can see there is no loop involved.</p>\n<p><b>Where is as-if Rule covered in the standard</b></p>\n<p>The <em>as-if rule</em> is covered in the draft C99 standard section <code>5.1.2.3</code> <em>Program execution</em> which says:</p>\n<blockquote>\n<p id=\"so_26771692_26782247_0\">In the abstract machine, all expressions are evaluated as specified by\n  the semantics. An actual implementation need not evaluate part of an\n  expression if it can deduce that its value is not used and that no\n  needed side effects are produced (including any caused by calling a\n  function or accessing a volatile object).</p>\n</blockquote>\n<p>The <a href=\"http://en.cppreference.com/w/cpp/language/as_if\" rel=\"nofollow\">as-if rule</a> also applies to C++, <code>gcc</code> will produce the same result in C++ mode as well. The C++ draft standard covers this in section <code>1.9</code> <em>Program execution</em>:</p>\n<blockquote>\n<p id=\"so_26771692_26782247_1\">The semantic descriptions in this International Standard define a\n  parameterized nondeterministic abstract machine. This International\n  Standard places no requirement on the structure of conforming\n  implementations. In particular, they need not copy or emulate the\n  structure of the abstract machine. Rather, conforming implementations\n  are required to emulate (only) the observable behavior of the abstract\n  machine as explained below.5</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "6083675", "LastEditDate": "2016-05-02T00:41:31.803", "Id": "26782247", "Score": "119", "CreationDate": "2014-11-06T14:46:16.997", "LastActivityDate": "2016-05-02T00:41:31.803"}, "bq_ids": {"n4140": {"so_26771692_26782247_1": {"section_id": 5797, "quality": 0.8648648648648649, "length": 32}, "so_26771692_26782247_0": {"section_id": 5797, "quality": 0.5357142857142857, "length": 15}}, "n3337": {"so_26771692_26782247_1": {"section_id": 5570, "quality": 0.8648648648648649, "length": 32}, "so_26771692_26782247_0": {"section_id": 5570, "quality": 0.5357142857142857, "length": 15}}, "n4659": {"so_26771692_26782247_1": {"section_id": 7256, "quality": 0.8648648648648649, "length": 32}, "so_26771692_26782247_0": {"section_id": 7256, "quality": 0.5357142857142857, "length": 15}}}});