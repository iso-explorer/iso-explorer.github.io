post_cb({"12505410": {"ParentId": "12505401", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The call to <code>vector::reserve()</code> invalidates all existing iterators if it happens to require reallocation.</p>\n<p>To quote the C++ standard, 23.3.6.3[vector.capacity]</p>\n<blockquote>\n<p id=\"so_12505401_12505410_0\">Reallocation happens at this point if and only if the current capacity is less than the argument of reserve().\n  [...]\n  Reallocation invalidates all the references, pointers, and iterators referring to the elements in the sequence.</p>\n</blockquote>\n<p>EDIT: After the edit, you have a call to <code>vector::push_back()</code>, which also invalidates all iterators if it requires reallocation. <a href=\"https://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">Iterator invalidation rules</a> may be helpful.</p>\n", "OwnerUserId": "273767", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:29:50.037", "Id": "12505410", "Score": "5", "CreationDate": "2012-09-20T02:38:21.280", "LastActivityDate": "2012-09-20T02:48:09.637"}, "12505401": {"CommentCount": "0", "AcceptedAnswerId": "12505410", "LastEditDate": "2012-09-20T02:41:37.480", "LastEditorUserId": "1343005", "CreationDate": "2012-09-20T02:36:24.643", "LastActivityDate": "2012-09-20T02:48:09.637", "PostTypeId": "1", "ViewCount": "717", "Title": "Seg fault with iterators and vectors", "Id": "12505401", "OwnerUserId": "1343005", "Body": "<p>I seem to be having a problem displaying an item in a vector with an iterator. Possibly, I just need another set of eyes to look at it.</p>\n<pre><code>vector&lt;string&gt; tempVector;\nvector&lt;string&gt;::iterator it;\n\n\nit = tempVector.begin();\ntempVector.push_back(\"1\");\ncout &lt;&lt; *it;\n</code></pre>\n<p>I know this isn't the full code, but it's the only portion running. The output is a segfault. doesn't the iterator point to the beginning of the vector? I was expecting to get \"1\" to cout.</p>\n", "Tags": "<c++><vector>", "Score": "1", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_12505401_12505410_0": {"section_id": 1049, "quality": 0.5555555555555556, "length": 10}}}});