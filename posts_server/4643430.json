post_cb({"4643436": {"Id": "4643436", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4643430_4643436_0\">after allocation I get valid memory pointer, and prints valid number.</p>\n</blockquote>\n<p>Your provided code doesn't actually test this.</p>\n<p>When you do <code>p = &amp;a</code>, you're <em>reassigning</em> <code>p</code> <em>to point somewhere completely different</em>. Whatever it held before is irrelevant to the continued execution of the program.</p>\n", "LastActivityDate": "2011-01-10T03:22:59.697", "CommentCount": "0", "CreationDate": "2011-01-10T03:22:59.697", "ParentId": "4643430", "Score": "3", "OwnerUserId": "224346"}, "4643772": {"Id": "4643772", "PostTypeId": "2", "Body": "<p>From ISO/IEC 14882:2003(E), 5.3.4.7</p>\n<blockquote>\n<p id=\"so_4643430_4643772_0\">When the value of the expression in\n  a direct-new-declarator is zero, the\n  allocation function is called to\n  allocate an array with no elements.</p>\n</blockquote>\n<p>So you get a valid pointer, but you can't dereference it, and must still delete[] it.</p>\n", "LastActivityDate": "2011-01-10T04:51:17.920", "CommentCount": "0", "CreationDate": "2011-01-10T04:51:17.920", "ParentId": "4643430", "Score": "1", "OwnerUserId": "235698"}, "bq_ids": {"n4140": {"so_4643430_4643772_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 6088}}, "n3337": {"so_4643430_4643772_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5856}, "so_4643430_4643496_0": {"length": 24, "quality": 0.5454545454545454, "section_id": 5855}}, "n4659": {"so_4643430_4643772_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 7584}}}, "4643430": {"ViewCount": "1128", "Body": "<pre><code>int a = 10;\nint *p = new int[0];\n\np = &amp;a;\ncout &lt;&lt; *p &lt;&lt; endl;\n</code></pre>\n<p>In c++, what happens if allocate memory size by zero?</p>\n<p>after allocation I get valid memory pointer, and prints valid number.</p>\n<p>But I think new operator should return something like FAILD or NULL.</p>\n<p>Can anybody explain detail?</p>\n", "AcceptedAnswerId": "4643837", "Title": "Allocating memory by size zero in c++?", "CreationDate": "2011-01-10T03:20:42.060", "Id": "4643430", "CommentCount": "2", "LastEditDate": "2011-01-10T03:21:26.813", "PostTypeId": "1", "LastEditorUserId": "224346", "LastActivityDate": "2011-01-10T05:12:02.443", "Score": "0", "OwnerUserId": "197018", "Tags": "<c++><memory-management>", "AnswerCount": "5"}, "4643444": {"Id": "4643444", "PostTypeId": "2", "Body": "<p>You assign the pointer \"p\" at the chunk of \"a\" so p doesn't point to the zero size chunk anymore when you print it.</p>\n", "LastActivityDate": "2011-01-10T03:24:38.290", "CommentCount": "0", "CreationDate": "2011-01-10T03:24:38.290", "ParentId": "4643430", "Score": "1", "OwnerUserId": "565635"}, "4643837": {"Id": "4643837", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4643430_4643837_0\">In c++, what happens if allocate memory size by zero?</p>\n</blockquote>\n<p>A zero sized array is valid.<br>\nYou just can de-reference any members.  </br></p>\n<p>This is why the Greeks spent such a long time debating it thinking about zero as a number. But we can thank India at its great minds for eventually bringing zero as a number 0. It took them forever and aren't we glad they did, a lot of modern maths would not be possible without such a unique value.</p>\n<blockquote>\n<p id=\"so_4643430_4643837_1\">after allocation I get valid memory pointer,</p>\n</blockquote>\n<p>That is correct.<br>\nIf it failed it would throw an exception.</br></p>\n<blockquote>\n<p id=\"so_4643430_4643837_2\">and prints valid number.</p>\n</blockquote>\n<p>Your assignment: <code>p = &amp;a;</code> is probably not what you want. As this just leaks memory and set p to point at the variable a. What you were probably trying to do is:</p>\n<pre><code>(*p) = a;\n// or\np[0] = a;\n</code></pre>\n<p>This is undefined behavior.<br>\nAs you are assigning to values after the end of the array.</br></p>\n<blockquote>\n<p id=\"so_4643430_4643837_3\">But I think new operator should return something like FAILD or NULL.</p>\n</blockquote>\n<p>No.</p>\n<blockquote>\n<p id=\"so_4643430_4643837_4\">Can anybody explain detail?</p>\n</blockquote>\n<p>Yes.</p>\n", "LastEditorUserId": "14065", "LastActivityDate": "2011-01-10T05:12:02.443", "Score": "1", "CreationDate": "2011-01-10T05:06:10.823", "ParentId": "4643430", "CommentCount": "0", "OwnerUserId": "14065", "LastEditDate": "2011-01-10T05:12:02.443"}, "4643496": {"Id": "4643496", "PostTypeId": "2", "Body": "<p>From ISO/IEC 14882:2003(E), 5.3.4.6</p>\n<blockquote>\n<p id=\"so_4643430_4643496_0\">Every constant-expression in a direct-new-declarator shall be an integral constant expression (5.19) and evaluate to a strictly positive value. The expression in a direct-new-declarator shall have integral or enu- meration type (3.9.1) with a non-negative value. [Example: if n is a variable of type int, then new float[n][5] is well-formed (because n is the expression of a direct-new-declarator), but new float[5][n] is ill-formed (because n is not a constant-expression). If n is negative, the effect of new float[n][5] is undefined.]</p>\n</blockquote>\n<p>They are intelligent. Can zero be considered as <code>non-negative value</code> ? Might be yes, since it is compiling with no problems, I guess.</p>\n", "LastEditorUserId": "528724", "LastActivityDate": "2011-01-10T04:13:44.097", "Score": "1", "CreationDate": "2011-01-10T03:36:05.540", "ParentId": "4643430", "CommentCount": "3", "OwnerUserId": "528724", "LastEditDate": "2011-01-10T04:13:44.097"}});