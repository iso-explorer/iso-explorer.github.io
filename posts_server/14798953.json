post_cb({"14799057": {"ParentId": "14798953", "CommentCount": "0", "Body": "<p>\u00a75.2.7 Increment and decrement:</p>\n<blockquote>\n<p id=\"so_14798953_14799057_0\">The value of a post\ufb01x <code>++</code> expression is the value of its operand. <em>[ ... ]</em>\u00a0 <strong>The operand shall be a modi\ufb01able lvalue</strong>.</p>\n</blockquote>\n<p>The error you get in your C compilation helps to suggest that this is only a feature present in C++.</p>\n", "OwnerUserId": "701092", "PostTypeId": "2", "Id": "14799057", "Score": "0", "CreationDate": "2013-02-10T15:02:58.143", "LastActivityDate": "2013-02-10T15:02:58.143"}, "14799021": {"ParentId": "14798953", "CommentCount": "2", "Body": "<p>In C and C++, there are lvalue expressions which may be used on the left-hand side of the <code>=</code> operator and rvalue expressions which may not. C++ allows more things to be lvalues because it supports reference semantics.</p>\n<pre><code>++ a = 3; /* makes sense in C++ but not in C. */\n</code></pre>\n<p>The increment and decrement operators are similar to assignment, since they modify their argument.</p>\n<p>In C++03, <code>(++a)--</code> would cause undefined behavior because two operations which are not sequenced with respect to each other are modifying the same variable. (Even though one is \"pre\" and one is \"post\", they are unsequenced because there is no <code>,</code>, <code>&amp;&amp;</code>, <code>?</code>, or such.)</p>\n<p>In C++11, the expression now does what you would expect. But C11 does not change any such rules, it's a syntax error.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "14799021", "Score": "3", "CreationDate": "2013-02-10T14:58:09.393", "LastActivityDate": "2013-02-10T14:58:09.393"}, "14799079": {"ParentId": "14798953", "CommentCount": "0", "Body": "<p>For anybody who might want the precise details of the differences as they're stated in the standards, C99, \u00a76.5.3/2 says:</p>\n<blockquote>\n<p id=\"so_14798953_14799079_0\">The value of the operand of the prefix ++ operator is incremented. The result is the new\n  <strong>value</strong> of the operand after incrementation.</p>\n</blockquote>\n<p>By contrast, C++11, \u00a75.3.2/1 says:</p>\n<blockquote>\n<p id=\"so_14798953_14799079_1\">The result is the updated <em>operand</em>; it is an <strong>lvalue</strong>, and it is a bit-field if\n  the operand is a bit-field.</p>\n</blockquote>\n<p>[emphasis added, in both cases]</p>\n<p>Also note that although <code>(++a)--</code> gives undefined behavior (at least in C++03) when <code>a</code> is an <code>int</code>, if <code>a</code> is some user-defined type, so you're using your own overloads of <code>++</code> and <code>--</code>, the behavior will be defined -- in such a case, you're getting the equivalent of:</p>\n<pre><code>a.operator++().operator--(0);\n</code></pre>\n<p>Since each operator results in a function call (which can't overlap) you actually <em>do</em> have sequence points to force defined behavior (note that I'm not recommending its use, only noting that the behavior is actually defined in this case).</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "14799079", "Score": "2", "CreationDate": "2013-02-10T15:04:34.787", "LastActivityDate": "2013-02-10T15:04:34.787"}, "14798985": {"ParentId": "14798953", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In C the result of the prefix and postfix increment/decrement operators is not an lvalue.</p>\n<p>In C++ the result of the postfix increment/decrement operator is also not an lvalue but the result of the prefix increment/decrement operator is an lvalue.</p>\n<p>Now doing something like <code>(++a)--</code> in C++ is undefined behavior because you are modifying an object value twice between two sequence points.</p>\n<p><strong>EDIT:</strong> following up on @bames53 comment. It is undefined behavior in C++98/C++03 but the changes in C++11 on the idea of sequence points now makes this expression defined. </p>\n", "OwnerUserId": "1119701", "LastEditorUserId": "252000", "LastEditDate": "2013-02-10T18:02:02.483", "Id": "14798985", "Score": "12", "CreationDate": "2013-02-10T14:55:15.163", "LastActivityDate": "2013-02-10T18:02:02.483"}, "14798953": {"CommentCount": "8", "ViewCount": "403", "PostTypeId": "1", "LastEditorUserId": "179910", "CreationDate": "2013-02-10T14:52:27.057", "LastActivityDate": "2013-03-04T15:59:48.400", "Title": "Why is this valid in C++ but not in C?", "AcceptedAnswerId": "14798985", "LastEditDate": "2013-03-04T15:59:48.400", "Id": "14798953", "Score": "6", "Body": "<p>test.(c/cpp)</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char** argv)\n{\n  int a = 0, b = 0;\n  printf(\"a = %d, b = %d\\n\", a, b);\n  b = (++a)--;\n  printf(\"a = %d, b = %d\\n\", a, b);\n\n  return 0;\n}\n</code></pre>\n<p>If I save the above as a .cpp file, it compiles and outputs this upon execution:</p>\n<pre><code>a = 0, b = 0\na = 0, b = 1\n</code></pre>\n<p>However, if I save it as a .c file, I get the following error:</p>\n<pre><code>test.c:7:12: error: lvalue required as decrement operator.\n</code></pre>\n<p>Shouldn't the <code>(++a)</code> operation be resolved before the <code>(newValue)--</code> operation? Does anyone have any insight on this?</p>\n", "Tags": "<c++><c><language-lawyer><lvalue><incompatibility>", "OwnerUserId": "1174806", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_14798953_14799079_1": {"section_id": 6074, "quality": 0.875, "length": 7}, "so_14798953_14799057_0": {"section_id": 6009, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_14798953_14799079_1": {"section_id": 5842, "quality": 0.875, "length": 7}, "so_14798953_14799057_0": {"section_id": 5777, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_14798953_14799079_1": {"section_id": 7570, "quality": 0.875, "length": 7}, "so_14798953_14799057_0": {"section_id": 7508, "quality": 0.6363636363636364, "length": 7}}}});