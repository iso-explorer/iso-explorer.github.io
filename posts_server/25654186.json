post_cb({"bq_ids": {"n4140": {"so_25654186_25654229_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 3242}}, "n4659": {"so_25654186_25654229_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 3998}}}, "25654186": {"ViewCount": "921", "Body": "<p>When <code>T</code> is <code>double(float)const</code> I get this error when I try to use <code>function&lt;T&gt;</code>.</p>\n<pre><code>implicit instantiation of undefined template 'std::function&lt;double (float) const&gt;'\n</code></pre>\n<p>But it's OK when <code>T</code> is <code>double(float)</code>. I tried to use <code>std:: remove_cv&lt;T&gt;::type</code> to remove this <code>const</code>, but that doesn't work. And yes, I have <code>#include&lt;functional&gt;</code>.</p>\n<p>So my main question is: How to fix this and remove <code>const</code> so that I can put this function type into <code>std:: function</code>.?</p>\n<hr>\n<p>I came across this issue when working with the <code>operator()</code> method of lambdas, but I think this question is generally about any method type, not just for lambdas</p>\n<hr>\n<p>But my second question is: What does <code>double(float)const</code> even mean ?!! I can understand</p>\n<pre><code>double (ClassName::) (float) const\n</code></pre>\n<p>as it means the member function cannot modify its <code>ClassName</code> object. When I put this type into a template to remove the class type, then I get the <code>double(float)const</code> which is causing trouble.</p>\n<pre><code>template&lt;typename&gt;\nstruct DropClassType;\ntemplate&lt;typename Sig, typename C&gt;\nstruct DropClassType&lt;Sig (C::*)&gt; {\n  typedef Sig type_without_class;\n};\n</code></pre>\n<p>(clang 3.4.2. The errors from g++-4.9.1 are more cryptic, but basically the same)</p>\n</hr></hr>", "AcceptedAnswerId": "25654229", "Title": "trait to drop const from a member function type?", "CreationDate": "2014-09-03T21:47:25.853", "Id": "25654186", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-09-04T03:12:05.873", "Score": "9", "OwnerUserId": "146041", "Tags": "<c++><templates><const>", "AnswerCount": "2"}, "25654229": {"Id": "25654229", "PostTypeId": "2", "LastEditDate": "2014-09-04T03:12:05.873", "CommentCount": "3", "LastEditorUserId": "2756719", "LastActivityDate": "2014-09-04T03:12:05.873", "CreationDate": "2014-09-03T21:51:46.630", "ParentId": "25654186", "Score": "10", "Body": "<blockquote>\n<p id=\"so_25654186_25654229_0\">Why did I get the \"implicit instantiation of undefined template\" error?</p>\n</blockquote>\n<p><code>std::function</code> is defined as an undefined base template and a partial specialization that matches \"normal\" function types (\u00a720.9.11.2 [func.wrap.func]):</p>\n<pre><code>template&lt;class&gt; class function; // undefined\ntemplate&lt;class R, class... ArgTypes&gt;\nclass function&lt;R(ArgTypes...)&gt;  { /* ... */ };\n</code></pre>\n<p><code>double (float) const</code> doesn't match <code>R(ArgTypes...)</code>, so you get the undefined base template instead.</p>\n<hr>\n<blockquote>\n<p id=\"so_25654186_25654229_1\">How to fix this and remove const so that I can put this function type into <code>std::function</code>?</p>\n</blockquote>\n<p>The standard partial specialization trick. While we are at it, let's also remove <code>volatile</code>.</p>\n<pre><code>template&lt;class&gt; class rm_func_cv; // undefined\ntemplate&lt;class R, class... ArgTypes&gt;\nclass rm_func_cv&lt;R(ArgTypes...)&gt;  { using type = R(ArgTypes...); };\ntemplate&lt;class R, class... ArgTypes&gt;\nclass rm_func_cv&lt;R(ArgTypes...) const&gt;  { using type = R(ArgTypes...); };\ntemplate&lt;class R, class... ArgTypes&gt;\nclass rm_func_cv&lt;R(ArgTypes...) volatile&gt;  { using type = R(ArgTypes...); };\ntemplate&lt;class R, class... ArgTypes&gt;\nclass rm_func_cv&lt;R(ArgTypes...) const volatile&gt;  { using type = R(ArgTypes...); };\n</code></pre>\n<p>Similar tricks can be used to remove <em>ref-qualifiers</em>, of course.</p>\n<hr>\n<blockquote>\n<p id=\"so_25654186_25654229_2\">What does <code>double (float) const</code> even mean ?!!</p>\n</blockquote>\n<p>This is a rather obscure corner of the standard (\u00a78.3.5 [dcl.fct]/p6):</p>\n<blockquote>\n<p id=\"so_25654186_25654229_3\">A function type with a <em>cv-qualifier-seq</em> or a <em>ref-qualifier</em> (including\n  a type named by <em>typedef-name</em> (7.1.3, 14.1)) shall appear only as:</p>\n<ul>\n<li>the function type for a non-static member function,</li>\n<li>the function type to which a pointer to member refers,</li>\n<li>the top-level function type of a function typedef declaration or alias-declaration,</li>\n<li>the <em>type-id</em> in the default argument of a <em>type-parameter</em> (14.1), or</li>\n<li>the <em>type-id</em> of a <em>template-argument</em> for a <em>type-parameter</em> (14.3.1). </li>\n</ul>\n<p id=\"so_25654186_25654229_4\">[ <em>Example</em>:</p>\n<pre><code>    typedef int FIC(int) const;\n    FIC f; // ill-formed: does not declare a member function\n    struct S {\n      FIC f; // OK\n    };\n    FIC S::*pm = &amp;S::f; // OK\n</code></pre>\n<p id=\"so_25654186_25654229_5\">\u2014<em>end example</em> ]</p>\n</blockquote>\n<p>In short, it's basically \"half a type\" that you can use to declare a class member function or a pointer-to-member type (or pass as a template parameter).</p>\n</hr></hr>", "OwnerUserId": "2756719"}, "25654258": {"Id": "25654258", "PostTypeId": "2", "Body": "<pre><code>#include &lt;functional&gt;\n\ntemplate &lt;typename T&gt;\nstruct function_remove_const;\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct function_remove_const&lt;R(Args...)&gt;\n{\n    using type = R(Args...);\n};\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct function_remove_const&lt;R(Args...)const&gt;\n{\n    using type = R(Args...);\n};\n\nint main()\n{\n    std::function&lt;function_remove_const&lt;double(float)const&gt;::type&gt; f;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/1ugsSF\" rel=\"noreferrer\">Live demo link.</a></p>\n", "Score": "5", "LastActivityDate": "2014-09-03T21:54:08.013", "CreationDate": "2014-09-03T21:54:08.013", "ParentId": "25654186", "CommentCount": "0", "OwnerUserId": "3953764"}});