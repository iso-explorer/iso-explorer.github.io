post_cb({"bq_ids": {"n4140": {"so_18225721_18225722_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 3884}}, "n3337": {"so_18225721_18225722_0": {"length": 27, "quality": 0.9, "section_id": 3744}}, "n4659": {"so_18225721_18225722_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 4763}}}, "18225722": {"Id": "18225722", "PostTypeId": "2", "Body": "<p>No, this is actually correct behavior.</p>\n<blockquote>\n<h3>6.4 Selection statements [stmt.select]</h3>\n<p id=\"so_18225721_18225722_0\"><strong>A name introduced by a declaration in a condition</strong> (either introduced by the <code>type-specifier-seq</code> or the declarator of the condition) <strong>is in scope from its point of declaration until the end of the substatements</strong> controlled\n  by the condition. <strong>If the name is re-declared in the outermost block</strong> of a substatement controlled by the\n  condition, <strong>the declaration</strong> that re-declares the name is <strong>ill-formed.</strong> [ Example:</p>\n<pre><code>if (int x = f()) {\n    int x; // ill-formed, redeclaration of x\n}\nelse {\n    int x; // ill-formed, redeclaration of x\n}\n</code></pre>\n<p id=\"so_18225721_18225722_1\">\u2014 end example ]</p>\n</blockquote>\n<p>(Emphasis mine) </p>\n<p>This basically means that the scope of <code>i</code> begins in the condition, and ends after the <code>if</code>-block, where the <code>else</code>-block is part of the <code>if</code>-block, too.</p>\n<p>Your second problem with the nested <code>if</code> is based on the (wrong) assumption that an <code>else-if</code> is part of the introductory <code>if</code>, but it really isn't. The <code>if (int i=2)</code> is <em>the body of the first <code>else</code></em>!</p>\n<pre><code>     if (int i=1)\n          |\n         / \\\n        /   \\\n       /     \\\n      /       \\\n     /         \\\n   if-block   else\n               |\n           if(int i=2)\n             /    \\\n            /      \\\n           /        \\\n       if-block   throw i\n</code></pre>\n<p>What this means in turn:</p>\n<pre><code>int main () {\n    if (int i=1) {    \n    } else if (1) {\n        throw (i+2);\n    } else {\n        throw i;\n    }\n}\n</code></pre>\n<p>This code is valid, as the <code>i</code>-declaration is visible in <code>throw (i+2);</code>, but it is still valid to hide the first <code>i</code>, because in nested scopes, names can be overriden:</p>\n<pre><code>int main () {\n    if (int i=1) {    \n    } else if (int i=2) {\n        throw (i+2); // now refers to `int i=2`\n    } else {\n        throw i;\n    }\n}\n</code></pre>\n<p>So all in all, don't panic: Writing tokenizers or parsers or something using the pattern found in the last statement still works, the relevant new knowledge here is that any declaration in a condition spans the whole <code>if</code>-tree, but can be overriden in any nested <code>if</code>.</p>\n<p>Also, be assured that the following is still invalid (even though it was valid in old compilers):</p>\n<pre><code>if (int i=0) {}\nstd::cout &lt;&lt; i; // nope, not valid\n</code></pre>\n", "LastActivityDate": "2013-08-14T07:33:38.013", "CommentCount": "2", "CreationDate": "2013-08-14T07:33:38.013", "ParentId": "18225721", "Score": "14", "OwnerUserId": "76722"}, "18225721": {"ViewCount": "1646", "Body": "<p>Some refactoring led to a piece of code that led me to this minimal testcase:</p>\n<pre><code>int main () {\n    if (int i=1) {\n        /* IF-BLOCK */\n    } else {\n        throw i;\n    }\n}\n</code></pre>\n<p>This compiles fine. However, I always assumed that <code>i</code> is only visible to <code>IF-BLOCK</code>, but it seems that it's not. Is this a compiler bug?</p>\n<p>Also, why does the following work?</p>\n<pre><code>int main () {\n    if (int i=1) {\n    } else if (int i=2) {\n    } else {\n        throw i;\n    }\n}\n</code></pre>\n<p>Note the second <code>if</code> \"re-declares\" <code>i</code>. Another compiler bug?</p>\n", "AcceptedAnswerId": "18225722", "Title": "Scope of variable declared in condition", "CreationDate": "2013-08-14T07:33:38.013", "Id": "18225721", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-08-14T07:33:38.013", "Score": "9", "OwnerUserId": "76722", "Tags": "<c++><scope>", "AnswerCount": "1"}});