post_cb({"42362226": {"Id": "42362226", "PostTypeId": "2", "Body": "<p>If x is not set, setting y to 1 doesn't happen and vice versa. So, things here are indeed happening sequentially.</p>\n", "LastActivityDate": "2017-02-21T08:31:32.563", "CommentCount": "0", "CreationDate": "2017-02-21T08:31:32.563", "ParentId": "42179740", "Score": "0", "OwnerUserId": "1083220"}, "42180516": {"Id": "42180516", "PostTypeId": "2", "Body": "<p>I found this article written by Hans-J. Boehm illuminating:<br>\n<a href=\"http://www.hpl.hp.com/techreports/2009/HPL-2009-259html.html#races\" rel=\"nofollow noreferrer\">http://www.hpl.hp.com/techreports/2009/HPL-2009-259html.html#races</a></br></p>\n<blockquote>\n<p id=\"so_42179740_42180516_0\">We say that two ordinary memory operations conflict if they access the\n  same memory location (for example, variable or array element), and <strong>at</strong>\n<strong>least one of them writes to the location</strong>.</p>\n<p id=\"so_42179740_42180516_1\">We say that a program allows a data race on a particular set of inputs\n  if there is a <em>sequentially consistent execution</em>, that is an\n  <strong>interleaving of operations of the individual threads, in which two</strong>\n<strong>conflicting operations can be executed \"simultaneously\"</strong>. For our\n  purposes, two such operations can be executed \"simultaneously\", if\n  they occur next to each other in the interleaving, and correspond to\n  different threads.  </p>\n</blockquote>\n<p>And the article goes on to our point:  </p>\n<blockquote>\n<p id=\"so_42179740_42180516_2\">Our definition of data race is rather stringent: <strong>There must be an</strong>\n<strong>actual way to execute the original, untransformed program such that</strong>\n<strong>conflicting operations occur in parallel</strong>. This imposes a burden on\n  compilers not to \"break\" programs by introducing harmful data races.</p>\n</blockquote>\n<p>As stated in the article, which report the same example (and others):\n<em>There's no sequentially consistent execution of this program in which Thread 1 assigns to y</em>, <em>since x and y never become nonzero</em>.  Indeed you never satisfy the condition, so no one is writing to the variable that the other thread might be reading.</p>\n<p>To understand the difference with the case where a data race exists, try to think about the following example in the article:</p>\n<pre><code>y = ((x != 0)? 1 : y)  # Thread 1\ny = 2;                 # Thread 2\n</code></pre>\n<p>In this last case it's clear that can happen that y is assigned (write) to by Thread 1 while Thread 2 executes <code>y = 2;</code> (<code>y</code> is written to by Thread 1 no matter what). A data race can happen.</p>\n", "LastEditorUserId": "7282091", "LastActivityDate": "2017-02-11T20:05:34.983", "Score": "2", "CreationDate": "2017-02-11T19:51:50.473", "ParentId": "42179740", "CommentCount": "0", "OwnerUserId": "7282091", "LastEditDate": "2017-02-11T20:05:34.983"}, "42179740": {"ViewCount": "1660", "Body": "<p>A data race occurs when two threads access the same variable concurrently and at least one of the accesses is a write. </p>\n<p><a href=\"https://isocpp.org/wiki/faq/cpp11-language-concurrency\" rel=\"nofollow noreferrer\">https://isocpp.org/wiki/faq/cpp11-language-concurrency</a></p>\n<pre><code>// start with x==0 and y==0\nif (x) y = 1;   // Thread 1 \nif (y) x = 1;   // Thread 2 \n</code></pre>\n<blockquote>\n<p id=\"so_42179740_42179740_0\">Is there a problem here? More precisely, is there a data race? (No\n  there isn\u2019t).</p>\n</blockquote>\n<p>Why does the original article claim that there is no data race here?</p>\n", "AcceptedAnswerId": "42213312", "Title": "why there is no data-race in the following case?", "CreationDate": "2017-02-11T18:39:50.667", "Id": "42179740", "CommentCount": "0", "LastEditDate": "2017-03-10T22:39:58.940", "PostTypeId": "1", "LastEditorUserId": "3002139", "LastActivityDate": "2017-03-15T14:16:35.143", "Score": "9", "OwnerUserId": "391104", "Tags": "<c++><c++11><concurrency>", "AnswerCount": "5"}, "42179872": {"Id": "42179872", "PostTypeId": "2", "Body": "<p>Neither thread will be writing since neither variable is non-zero before the conditionals.</p>\n", "LastActivityDate": "2017-02-11T18:50:11.863", "CommentCount": "0", "CreationDate": "2017-02-11T18:50:11.863", "ParentId": "42179740", "Score": "13", "OwnerUserId": "7410358"}, "42213312": {"Id": "42213312", "PostTypeId": "2", "Body": "<p>Because <code>x</code> and <code>y</code> are both zero, the abstract machine defined by the C++ standard can't write to either memory location, so the only way this could be a problem is if the implementation decided to write to the memory location anyway.  For example, if it transformed </p>\n<pre><code>if (x) y = 1;\n</code></pre>\n<p>into</p>\n<pre><code>y = 1;\nif (!x) y = 0;\n</code></pre>\n<p>This is a potentially valid rewrite under the as-if rule since the observed behavior by any one thread is the same (C++14 1.9 [intro.execution])</p>\n<blockquote>\n<p id=\"so_42179740_42213312_0\">The semantic descriptions in this International Standard define a parameterized nondeterministic abstract\n  machine. This International Standard places no requirement on the structure of conforming implementations.\n  In particular, they need not copy or emulate the structure of the abstract machine. Rather, conforming\n  implementations are required to emulate (only) the observable behavior of the abstract machine as explained\n  below.</p>\n</blockquote>\n<p>This would in fact have been a valid rewrite prior to C++11, but since C++11, threads of execution are considered.  Because of this, the implementation is not allowed to make changes that would have different observed behavior across threads as long as no data race occurs in the abstract machine.</p>\n<p>There's a special note in the C++14 standard that applies here (C++14 1.10 [into.multithread] paragraph 22)</p>\n<blockquote>\n<p id=\"so_42179740_42213312_1\">[ Note: Compiler transformations that introduce assignments to a potentially shared memory location that\n  would not be modified by the abstract machine are generally precluded by this standard, since such an\n  assignment might overwrite another assignment by a different thread in cases in which an abstract machine\n  execution would not have encountered a data race. \n  ...</p>\n</blockquote>\n<p>Because of this, the rewrite isn't valid.  The implementation has to preserve the observed behavior that <code>x</code> and <code>y</code> are not modified, even across threads.  Therefore, there is no data race.</p>\n", "LastEditorUserId": "951890", "LastActivityDate": "2017-03-15T14:16:35.143", "Score": "9", "CreationDate": "2017-02-13T20:50:50.610", "ParentId": "42179740", "CommentCount": "0", "OwnerUserId": "951890", "LastEditDate": "2017-03-15T14:16:35.143"}, "42180225": {"Id": "42180225", "PostTypeId": "2", "Body": "<p>Data races are not static properties of your code. They are properties of the actual state of the program at execution time. So while that program <em>could be</em> in a state where the code would produce a data race, that's not the question.</p>\n<p>The question is, given the state of the system, will the code cause a data race? And since the program is in a state such that neither thread will write to either variable, then the code will not cause a data race.</p>\n<p>Data races aren't about what your code <em>might</em> do. It's about what they <em>will do</em>. Just as a function that takes a pointer isn't undefined behavior just because it uses the pointer without checking for NULL. It is only UB if someone passes a pointer that really is NULL.</p>\n", "LastActivityDate": "2017-02-11T19:24:17.497", "CommentCount": "0", "CreationDate": "2017-02-11T19:24:17.497", "ParentId": "42179740", "Score": "11", "OwnerUserId": "734069"}, "bq_ids": {"n4140": {"so_42179740_42213312_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 5797}, "so_42179740_42213312_1": {"length": 32, "quality": 0.9696969696969697, "section_id": 5836}}, "n3337": {"so_42179740_42213312_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 5570}, "so_42179740_42213312_1": {"length": 32, "quality": 0.9696969696969697, "section_id": 5606}}, "n4659": {"so_42179740_42213312_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 7256}, "so_42179740_42213312_1": {"length": 32, "quality": 0.9696969696969697, "section_id": 7298}}}});