post_cb({"bq_ids": {"n4140": {"so_30823696_30823823_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 7153}}, "n3337": {"so_30823696_30823823_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 6897}}, "n4659": {"so_30823696_30823823_0": {"length": 23, "quality": 0.6571428571428571, "section_id": 8657}}}, "30823823": {"Id": "30823823", "PostTypeId": "2", "Body": "<p>The question as stated is not very meaningful, because</p>\n<ul>\n<li><code>main</code> is not the machine code level entry point to the program (<code>main</code> is called by the same code that e.g. executes constructors of non-local static class type variables), and</li>\n<li>the notion of \u201cright after <code>main()</code> and before the executable statements\u201d isn't very meaningful: the executable statements are <em>in</em> <code>main</code>.</li>\n</ul>\n<p>Generally, in practice you can count on the static variable being initialized before <code>main</code> in your concrete example, but the standard does not guarantee that.</p>\n<p>C++11 \u00a73.6.2/4:</p>\n<blockquote>\n<p id=\"so_30823696_30823823_0\"><strong>\u201d</strong> It is implementation-defined whether the dynamic initialization of a non-local variable with static storage\n  duration is done before the first statement of <code>main</code>. If the initialization is deferred to some point in time\n  after the first statement of <code>main</code>, it shall occur before the first odr-use (3.2) of any function or variable\n  defined in the same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>It's a fine point whether the automatic call of <code>main</code> qualifies as <em>odr-use</em>. I would think not, because one special property of <code>main</code> is that it cannot be called (in valid code), and its address cannot be taken.</p>\n<p>Apparently the above wording is in support of dynamically loaded libraries, and constitutes the only support of such libraries.</p>\n<p>In particular, I would be wary of using thread local storage with dynamically loaded libraries, at least until I learned more about the guarantees offered by the standard in that respect.</p>\n", "LastActivityDate": "2015-06-13T21:41:47.757", "CommentCount": "2", "CreationDate": "2015-06-13T21:41:47.757", "ParentId": "30823696", "Score": "1", "OwnerUserId": "464581"}, "30823702": {"Id": "30823702", "PostTypeId": "2", "Body": "<p>Yes, objects with static storage duration are initialized before <code>main()</code>, so indeed the \"entry point\" is before <code>main()</code>. See e.g. <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/storage_duration</a></p>\n<p>In fact (although not recommended), you can run a whole program with a trivial <code>main(){}</code>, by putting everything in global instances. </p>\n", "LastActivityDate": "2015-06-13T21:27:34.760", "CommentCount": "2", "CreationDate": "2015-06-13T21:27:34.760", "ParentId": "30823696", "Score": "1", "OwnerUserId": "3093378"}, "30823696": {"ViewCount": "66", "Body": "<pre><code>class TestClass\n{\npublic:\n    int x, y;\n    TestClass();\n\n};\n\nTestClass::TestClass()\n{\n    cout &lt;&lt; \"TestClass ctor\" &lt;&lt; endl;\n}\n\nTestClass GlobalTestClass;\n\nint main()\n{   \n\n    cout &lt;&lt; \"main \" &lt;&lt; endl;\n\n\n    return 0;\n}\n</code></pre>\n<p>In this code as known first output will be <code>\"TestClass ctor\"</code>. </p>\n<p>My question: Does the ctor function call codes run before <code>main()</code> (I mean, does entry point change ?) , or right after <code>main()</code> and before the executable statements or is there different mechanism ? (Sorry for English)</p>\n", "AcceptedAnswerId": "30823823", "Title": "When is constructor's code of a class defined in global space running?", "CreationDate": "2015-06-13T21:26:06.580", "Id": "30823696", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-06-13T21:41:47.757", "Score": "0", "OwnerUserId": "3992973", "Tags": "<c++>", "AnswerCount": "2"}});