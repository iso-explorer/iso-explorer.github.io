post_cb({"44455752": {"PostTypeId": "2", "Body": "<p>This for loop's exit condition is <code>i</code>, <code>i</code> is an <code>int</code>, it is implicitly convertible to <code>bool</code> which means that the loop will run until <code>i == 0</code> (because <code>0</code> evaluates to <code>false</code>, any other value evaluates to <code>true</code>). The loop itself doesn't modify <code>i</code> though so if the body of the loop doesn't either then you have an infinite loop. </p>\n", "LastActivityDate": "2017-06-09T10:42:57.810", "Id": "44455752", "CommentCount": "0", "CreationDate": "2017-06-09T10:42:57.810", "ParentId": "44455682", "Score": "1", "OwnerUserId": "1870760"}, "44455762": {"PostTypeId": "2", "Body": "<p>The loop can be rewritten to</p>\n<pre><code>i = M;\nj = N;\nwhile(i) {\n    //...\n}\n</code></pre>\n", "LastActivityDate": "2017-06-09T10:43:20.977", "Id": "44455762", "CommentCount": "0", "CreationDate": "2017-06-09T10:43:20.977", "ParentId": "44455682", "Score": "1", "OwnerUserId": "3038619"}, "44455846": {"PostTypeId": "2", "Body": "<pre><code>for (i = M, j = N; i; ) {\n    // body\n}\n</code></pre>\n<p>is the same as:</p>\n<pre><code>i = M;\nj = N;\nwhile (i != 0) {\n    // body\n}\n</code></pre>\n<p>If <code>M != 0</code> and <code>i</code> doesn't change inside the <code>for</code> loop body you have an infinite loop.</p>\n", "LastActivityDate": "2017-06-09T10:48:03.903", "Id": "44455846", "CommentCount": "0", "CreationDate": "2017-06-09T10:48:03.903", "ParentId": "44455682", "Score": "0", "OwnerUserId": "5581801"}, "44491564": {"PostTypeId": "2", "Body": "<p><strong>Short Answer:</strong></p>\n<pre><code>for (i = M, j = N; i; )\n</code></pre>\n<p>The above for loop, initializes i to M, j to N, and loops till i is non-zero (or false). In case, the value of i is not changed within the for loop, the loop will execute indefinitely. </p>\n<p><strong>Long Answer:</strong></p>\n<p>In a for loop, there are three parts (from <a href=\"http://c0x.coding-guidelines.com/6.8.5.3.html\" rel=\"nofollow noreferrer\">C++ standard guidelines</a>)</p>\n<pre><code>for (clasue-1 ; expression-2; expression-3 )\n</code></pre>\n<p>where (emphasize on <strong>bold</strong> text)</p>\n<blockquote>\n<ul>\n<li><p id=\"so_44455682_44491564_0\">The expression &gt;expression-2 is the controlling expression that is\n  evaluated before each execution of the loop body.</p></li>\n<li><p id=\"so_44455682_44491564_1\">The expression expression-3 is evaluated as a void expression\n  after each execution of the loop body.</p></li>\n<li><p id=\"so_44455682_44491564_2\">If clause-1 is a declaration, the scope of any variables identifiers\n  it declares is the remainder of the declaration and the entire loop,\n  including the other two expressions. <strong>it is reached in the order of\n  execution before the first evaluation of the controlling expression</strong>.</p></li>\n<li><p id=\"so_44455682_44491564_3\"><strong>Both clause-1 and expression-3 can be omitted.</strong></p></li>\n</ul>\n</blockquote>\n<p>So in your case, </p>\n<p>clause-1 is </p>\n<blockquote>\n<p id=\"so_44455682_44491564_4\">i = M, j = N</p>\n</blockquote>\n<p>which is the declaration/initialization of i and j to be used within the for loop. </p>\n<p>expression-2 is</p>\n<blockquote>\n<p id=\"so_44455682_44491564_5\">i</p>\n</blockquote>\n<p>As expression-2 is supposed to be a boolean expression, the value of i governs the exit condition. Usually a value of 0 is considered false while all other values are true. So the loop will execute until the value of i is 0.</p>\n<p>So your loop translates to</p>\n<blockquote>\n<p id=\"so_44455682_44491564_6\">i = M; j = N;</p>\n<p id=\"so_44455682_44491564_7\">while(i) { // statements.  }</p>\n</blockquote>\n", "LastActivityDate": "2017-06-12T04:44:57.873", "Id": "44491564", "CommentCount": "0", "CreationDate": "2017-06-12T04:44:57.873", "ParentId": "44455682", "Score": "1", "OwnerUserId": "425280"}, "bq_ids": {"n4140": {"so_44455682_44491564_1": {"length": 6, "quality": 0.5454545454545454, "section_id": 5811}}, "n3337": {"so_44455682_44491564_1": {"length": 6, "quality": 0.5454545454545454, "section_id": 5584}}}, "44455682": {"ViewCount": "91", "Body": "<p>I've come across the following for in some code:</p>\n<pre><code>for (i = M, j = N; i; )\n</code></pre>\n<p><code>i,j,M,N</code> are all integers; what does the for do?</p>\n", "Title": "How does this for() work?", "CreationDate": "2017-06-09T10:39:58.127", "LastActivityDate": "2017-06-12T04:44:57.873", "CommentCount": "3", "LastEditDate": "2017-06-09T10:46:51.483", "PostTypeId": "1", "LastEditorUserId": "1055241", "Id": "44455682", "Score": "0", "OwnerUserId": "3502949", "Tags": "<c++><for-loop>", "AnswerCount": "6"}, "44455771": {"PostTypeId": "2", "Body": "<p>In C and C++ you can use <code>int</code> as a Boolean variable. Actually, in C it does not even exist a bool. </p>\n<p>The most common form of a for loop looks like this:</p>\n<pre><code>for(init; condition; increment)\n</code></pre>\n<p>It has three statements, so the second statement is simply something that can be evaluated to true or false, which an integer can.</p>\n", "LastActivityDate": "2017-06-09T10:45:23.600", "LastEditorUserId": "6699433", "Id": "44455771", "CommentCount": "0", "CreationDate": "2017-06-09T10:44:10.400", "ParentId": "44455682", "Score": "0", "OwnerUserId": "6699433", "LastEditDate": "2017-06-09T10:45:23.600"}, "44455753": {"PostTypeId": "2", "Body": "<p>it's the same as</p>\n<pre><code>i = M;\nj = N;\n\nwhile (i != 0) {\n  ...\n}\n</code></pre>\n", "LastActivityDate": "2017-06-09T17:56:06.180", "LastEditorUserId": "8024553", "Id": "44455753", "CommentCount": "4", "CreationDate": "2017-06-09T10:42:58.740", "ParentId": "44455682", "Score": "5", "OwnerUserId": "8024553", "LastEditDate": "2017-06-09T17:56:06.180"}});