post_cb({"13132223": {"ParentId": "13132075", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The answer to this question can be found in <code>[res.on.data.races]/3</code>:</p>\n<blockquote>\n<p id=\"so_13132075_13132223_0\">A C++ standard library function shall not directly or indirectly modify objects (1.10) accessible by threads other than the current thread unless the objects are accessed directly or indirectly via the function\u2019s non- const arguments, including this.</p>\n</blockquote>\n<p>Furthermore, <code>[container.requirements.dataraces]/1</code> states:</p>\n<blockquote>\n<p id=\"so_13132075_13132223_1\">For purposes of avoiding data races (<code>[res.on.data.races]</code>), implementations shall consider the following functions to be <code>const</code>: <code>begin</code>, <code>end</code>, <code>rbegin</code>, <code>rend</code>, <code>front</code>, <code>back</code>, <code>data</code>, <code>find</code>, <code>lower_bound</code>, <code>upper_bound</code>, <code>equal_range</code>, <code>at</code> and, except in associative or unordered associative containers, <code>operator[]</code>.</p>\n</blockquote>\n<p>Since <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/operator_at\" rel=\"noreferrer\">unordered_map::operator[]</a> is non-const, it is legal for an implementation to modify the <code>unordered_map</code> when a call to <code>operator[]</code> occurs. You should instead use <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/find\" rel=\"noreferrer\">unordered_map::find</a>, which is explicitly required to be treated as <code>const</code>, and hence will not modify the <code>unordered_map</code>:</p>\n<pre><code>map.find(key)-&gt;second = new vector&lt;MyClass*&gt;;\n</code></pre>\n<p>(As a side note, your suggested design looks like a recipe for memory leaks. Why not make it be a <code>unordered_map&lt;int, std::unique_ptr&lt;vector&lt;MyClass*&gt;&gt;&gt;</code>, or <code>unordered_map&lt;int,vector&lt;MyClass*&gt;&gt;</code>?)</p>\n", "OwnerUserId": "485561", "LastEditorUserId": "485561", "LastEditDate": "2012-12-19T16:00:22.550", "Id": "13132223", "Score": "11", "CreationDate": "2012-10-30T03:29:48.230", "LastActivityDate": "2012-12-19T16:00:22.550"}, "bq_ids": {"n4140": {"so_13132075_13132223_0": {"section_id": 6348, "quality": 0.8695652173913043, "length": 20}, "so_13132075_13132223_1": {"section_id": 717, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_13132075_13132223_0": {"section_id": 6105, "quality": 0.8695652173913043, "length": 20}, "so_13132075_13132223_1": {"section_id": 706, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_13132075_13132223_0": {"section_id": 7857, "quality": 0.8695652173913043, "length": 20}, "so_13132075_13132223_1": {"section_id": 748, "quality": 0.9259259259259259, "length": 25}}}, "13132075": {"CommentCount": "1", "AcceptedAnswerId": "13132223", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-10-30T03:08:11.013", "LastActivityDate": "2012-12-19T16:00:22.550", "LastEditDate": "2012-10-30T03:34:13.570", "ViewCount": "3623", "FavoriteCount": "3", "Title": "C++ stl unordered_map, thread safety where each thread accesses only it's own assigned key and may edit that value", "Id": "13132075", "Score": "9", "Body": "<p> \nHere is the scenario:</p>\n<p>1) using an <code>unordered_map&lt;int, vector&lt;MyClass*&gt;*&gt;</code> let's say I add keys 1, 2, ... 8<br>\n2) all keys are set with a vector at program initialization and nothing more is added or deleted<br>\n3) I have 8 threads, where thread1 accesses key[1], thread2 accesses key[2], ... thread8 accesses key[8] (i.e. the thread number can only access that key number and no other key)</br></br></p>\n<p>Sometimes I re-assign the value vector* to another heap allocated collection. (i.e. thread1 performs <code>key[1] = new vector&lt;MyClass*&gt;</code>)</p>\n<p>I believe this will be thread safe, am I correct? If not, I suppose I will use concurrent_unordered_map.</p>\n<p>thanks.</p>\n", "Tags": "<c++><c++11><thread-safety><unordered-map>", "OwnerUserId": "1781858", "AnswerCount": "1"}});