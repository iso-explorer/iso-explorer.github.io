post_cb({"17758417": {"ParentId": "17757446", "CommentCount": "2", "Body": "<pre><code>struct Foo {\n  template &lt;bool Y, typename D&gt;\n  struct Bar {};\n};\n\ntemplate &lt;typename D&gt;\nstruct Foo::Bar&lt;true, D&gt; {\n  struct Qux;\n};\n\ntemplate &lt;typename D&gt;\nstruct Foo::Bar&lt;true, D&gt;::Qux {\n  int x;\n};\n</code></pre>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "17758417", "Score": "-2", "CreationDate": "2013-07-20T03:42:16.293", "LastActivityDate": "2013-07-20T03:42:16.293"}, "17761209": {"ParentId": "17757446", "CommentCount": "0", "Body": "<p>Looks like you don't have a choice but to put that definition in namespace scope (or inside <code>Bar</code>). Paragraph 9/1 (n3337) says your code is illegal:</p>\n<blockquote>\n<p id=\"so_17757446_17761209_0\"><strong>If a <em>class-head-name</em> contains a <em>nested-name-speci\ufb01er</em></strong>, the <em>class-speci\ufb01er</em> shall refer to a class that was\n  previously declared directly in the class or namespace to which the <em>nested-name-speci\ufb01er</em> refers, or in an\n  element of the inline namespace set (7.3.1) of that namespace (i.e., not merely inherited or introduced by\n  a <em>using-declaration</em>), and <strong>the <em>class-speci\ufb01er</em> shall appear in a namespace enclosing the previous declaration.</strong>\n  In such cases, the <em>nested-name-speci\ufb01er</em> of the <em>class-head-name</em> of the de\ufb01nition shall not begin with a\n  <em>decltype-speci\ufb01er</em>.</p>\n</blockquote>\n", "OwnerUserId": "947836", "PostTypeId": "2", "Id": "17761209", "Score": "1", "CreationDate": "2013-07-20T10:22:37.453", "LastActivityDate": "2013-07-20T10:22:37.453"}, "17757446": {"CommentCount": "0", "AcceptedAnswerId": "17761209", "PostTypeId": "1", "LastEditorUserId": "1020667", "CreationDate": "2013-07-20T00:33:53.267", "LastActivityDate": "2013-07-20T10:22:37.453", "LastEditDate": "2013-07-20T00:40:50.373", "ViewCount": "607", "FavoriteCount": "0", "Title": "Defining incomplete struct of specialized class", "Id": "17757446", "Score": "3", "Body": "<p>I'm having problems declaring an incomplete struct inside a class specialization and later defining it.</p>\n<pre><code>struct Foo {\n    template &lt;bool Y, typename D&gt;\n    struct Bar {};\n\n    template &lt;typename D&gt;\n    struct Bar&lt;true, D&gt; {\n        struct Qux;\n    };\n\n    template &lt;typename D&gt;\n    struct Bar&lt;true, D&gt;::Qux { int x; };\n};\n</code></pre>\n<p>This code works in gcc, but fails in clang 3.3:</p>\n<pre><code>r.cpp:42:26: error: non-friend class member 'Qux' cannot have a qualified name\n    struct Bar&lt;true, D&gt;::Qux { int x; };\n           ~~~~~~~~~~~~~~^\n</code></pre>\n<p>If the code is written in namespace scope (without <code>struct Foo</code>), it works in clang too.</p>\n<p>On the other hand, if <code>struct Foo</code> is turned into a template, as follows, the code breaks in gcc-4.9 (unreleased), though it keeps working in gcc-4.7.</p>\n<pre><code>template &lt;typename X&gt;\nstruct Foo {\n    template &lt;bool Y, typename D&gt;\n    struct Bar {};\n\n    template &lt;typename D&gt;\n    struct Bar&lt;true, D&gt; {\n        struct Qux;\n    };\n\n    template &lt;typename D&gt;\n    struct Bar&lt;true, D&gt;::Qux { int x; };\n};\n</code></pre>\n<p>Clang fails with:</p>\n<pre><code>r.cpp:43:26: error: template specialization or definition requires a template parameter list corresponding to the nested type 'Bar&lt;true, type-parameter-1-0&gt;'\n    struct Bar&lt;true, D&gt;::Qux { int x; };\n                         ^\nr.cpp:43:26: error: non-friend class member 'Qux' cannot have a qualified name\n    struct Bar&lt;true, D&gt;::Qux { int x; };\n           ~~~~~~~~~~~~~~^\n2 errors generated.\n</code></pre>\n<p>Gcc-4.9 fails with a similar error:</p>\n<pre><code>r.cpp:43:26: error: too few template-parameter-lists\n     struct Bar&lt;true, D&gt;::Qux { int x; };\n                          ^\n</code></pre>\n", "Tags": "<c++><specialization><incomplete-type>", "OwnerUserId": "1020667", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17757446_17761209_0": {"section_id": 5855, "quality": 0.7837837837837838, "length": 29}}, "n3337": {"so_17757446_17761209_0": {"section_id": 5625, "quality": 0.7837837837837838, "length": 29}}, "n4659": {"so_17757446_17761209_0": {"section_id": 7334, "quality": 0.7837837837837838, "length": 29}}}});