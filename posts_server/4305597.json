post_cb({"bq_ids": {"n4140": {"so_4305597_4305758_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 6682}, "so_4305597_4305758_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 6682}, "so_4305597_4305758_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 6682}, "so_4305597_4305758_0": {"length": 5, "quality": 1.0, "section_id": 6682}, "so_4305597_4305758_5": {"length": 6, "quality": 0.6, "section_id": 6975}}, "n3337": {"so_4305597_4305758_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 6437}, "so_4305597_4305758_0": {"length": 5, "quality": 1.0, "section_id": 6437}, "so_4305597_4305758_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 6437}, "so_4305597_4305758_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 6437}, "so_4305597_4305758_5": {"length": 6, "quality": 0.6, "section_id": 5724}}, "n4659": {"so_4305597_4305758_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 8157}, "so_4305597_4305758_0": {"length": 5, "quality": 1.0, "section_id": 8157}, "so_4305597_4305758_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 8157}, "so_4305597_4305758_3": {"length": 13, "quality": 0.8666666666666667, "section_id": 8157}, "so_4305597_4305758_5": {"length": 6, "quality": 0.6, "section_id": 8474}}}, "4305719": {"Id": "4305719", "PostTypeId": "2", "Body": "<p>Right.</p>\n<p>Now reality check\u2026</p>\n<p>MinGW g++ 4.4.1:</p>\n<blockquote>\n<p id=\"so_4305597_4305719_0\">x.cpp: In function 'int main()':\n  x.cpp:3: error: 'void Base::foo()' is\n  inaccessible<br>\n  x.cpp:15: error: within\n  this context</br></p>\n</blockquote>\n<p>Visual C++ 10.0:</p>\n<blockquote>\n<p id=\"so_4305597_4305719_1\">x.cpp(15) : error C2248:\n  'Derived::foo' : cannot access private\n  member declared in class 'Derived'<br>\n          x.cpp(9) : see declaration of 'Derived::foo'<br>\n          x.cpp(6) : see declaration of 'Derived'</br></br></p>\n</blockquote>\n<p><a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"nofollow\">Comeau Online</a> 4.3.10.1:</p>\n<blockquote>\n<p id=\"so_4305597_4305719_2\">In strict mode, with -tused, Compile\n  succeeded (but remember, the Comeau\n  online compiler does not link).<br>\n  Compiled with C++0x extensions\n  enabled.</br></p>\n</blockquote>\n<p><em>Oops</em>. And Comeau is the one that's nearly always right! Well, turning off C++0x extensions, for C++98/C++03:</p>\n<blockquote>\n<p id=\"so_4305597_4305719_3\">In strict mode, with -tused, Compile\n  succeeded (but remember, the Comeau\n  online compiler does not link).<br>\n  Compiled with C++0x extensions\n  DISabled.</br></p>\n</blockquote>\n<p><strong>Oops!</strong></p>\n<p>Well, you biggie mine, as they say in Norway (literally translated to English).</p>\n<p>I'd try to report that to Comeau.</p>\n<p><strong>EDIT</strong>: since Prasoon has also answered, quoting the Holy Standard with his interpretation of that contradicting what I wrote above, well, OK, standadeese\u2026</p>\n<p>\u00a711.3/1 \"The access of a member of a base class can be changed in the derived class\u2026\", and so on, which is as clear as can be (no interpretation required). And with a concrete example. And normative text stating that that is equivalent to a <code>using</code> declaration.</p>\n<p>Cheers &amp; hth.,</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2010-11-29T16:43:47.793", "Score": "5", "CreationDate": "2010-11-29T16:23:32.250", "ParentId": "4305597", "CommentCount": "21", "OwnerUserId": "464581", "LastEditDate": "2010-11-29T16:43:47.793"}, "4305597": {"ViewCount": "1426", "Body": "<pre><code>class Base\n{\n    public: void foo(){}\n};\n\nclass Derived : public Base\n{\n    private:\n    using Base::foo;\n};\n\nint main()\n{\n   Derived d;\n   d.foo();\n}\n</code></pre>\n<p>Is the code legal? The declaration <code>using Base::foo</code> is in the private section of the derived class. So the call <code>d.foo()</code> shouldn't compile, am I right?</p>\n", "AcceptedAnswerId": "4305758", "Title": "Access to base class function", "CreationDate": "2010-11-29T16:09:52.210", "Id": "4305597", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2010-11-30T02:34:39.507", "Score": "11", "OwnerUserId": "524106", "Tags": "<c++><inheritance>", "AnswerCount": "3"}, "4305758": {"Id": "4305758", "PostTypeId": "2", "Body": "<p>The Standard in section 11.2/4 says</p>\n<blockquote>\n<p id=\"so_4305597_4305758_0\">A member m is accessible when named in class N if</p>\n<p id=\"so_4305597_4305758_1\">\u2014  m as a member of N is public, or</p>\n<p id=\"so_4305597_4305758_2\">\u2014  m as a member of N is private, and the reference occurs in a member or friend of class N, or</p>\n<p id=\"so_4305597_4305758_3\">\u2014  m as a member of N is protected, and the reference occurs in a member or friend  of  class N,  or  in  a\n  member or friend of a class P derived from N, where m as a member of P is private or protected, or</p>\n<p id=\"so_4305597_4305758_4\">\u2014  <strong>there exists a base class B of N that is accessible at the point of reference, and m is accessible when named in class B</strong>. </p>\n</blockquote>\n<p>However the Standard also says that</p>\n<blockquote>\n<p id=\"so_4305597_4305758_5\">\u00a711.3/1 \"The access of a member of a base class can be changed in the derived class.</p>\n</blockquote>\n<p>In your code the access of the member <code>foo</code> has been changed in the derived class. So the code shouldn't compile but <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#360\" rel=\"nofollow\"><strong>this is still an active issue with open status</strong></a>  So some compilers compile the code (Comeau and Intel C++) whereas g++ and MSVC++ (correctly) reject it.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-11-30T02:34:39.507", "Score": "1", "CreationDate": "2010-11-29T16:28:14.197", "ParentId": "4305597", "CommentCount": "13", "OwnerUserId": "165520", "LastEditDate": "2010-11-30T02:34:39.507"}, "4305724": {"Id": "4305724", "PostTypeId": "2", "Body": "<p><code>using</code> is a namespace declaration in this example (as opposed to a namespace <em>directive</em>). It is not a method declaration, as you seem to be intending to use it as.</p>\n<p>The method <code>foo()</code> is public in the <code>Base</code> class, and is still accessible in the <code>Derived</code> class.</p>\n<p>You seem to be intending to make the <code>foo()</code> of the <code>Base</code> class inaccessible. Although there might be a way to do this (I wouldn't know, I've never had a reason to attempt it), I suggest that this points out an error with the logic of your inheritance, and you may want to consider redesigning y our classes.</p>\n<p>If your <code>Derived</code> class isn't going to behave as a <code>Base</code> class, it shouldn't inherit from a <code>Base</code> class.</p>\n", "LastEditorUserId": "241536", "LastActivityDate": "2010-11-29T17:11:49.787", "Score": "0", "CreationDate": "2010-11-29T16:23:54.413", "ParentId": "4305597", "CommentCount": "15", "OwnerUserId": "103825", "LastEditDate": "2010-11-29T17:11:49.787"}});