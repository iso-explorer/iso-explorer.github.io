post_cb({"bq_ids": {"n4140": {"so_32271852_32273373_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6073}, "so_32271852_32273373_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}}, "n3337": {"so_32271852_32273373_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 5841}, "so_32271852_32273373_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 18}}, "n4659": {"so_32271852_32273373_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 7569}, "so_32271852_32273373_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}}}, "32271959": {"Id": "32271959", "PostTypeId": "2", "Body": "<p>all operands in expressions are promoted to at least <code>int</code>s, because <code>int</code> should represent 'natural' integral type for given architecture.</p>\n<p>So this warning is proper - type on right side of assignment will be <code>int</code> (for some people it might indicate place for optimization*), <code>static_cast</code> is a good solution (I would add mask for <code>0xFF</code> to it, just to be sure and properly state my intent).</p>\n<p>*) for example: one could negate 4 bytes at once, making better use of CPU. Some compilers might do it by them selfs. </p>\n", "LastActivityDate": "2015-08-28T13:14:37.377", "CommentCount": "0", "CreationDate": "2015-08-28T13:14:37.377", "ParentId": "32271852", "Score": "0", "OwnerUserId": "1630041"}, "32271852": {"ViewCount": "92", "Body": "<p>GCC 4.9.1 reports \"warning: conversion to \u2018unsigned char\u2019 from \u2018int\u2019 may alter its value [-Wconversion]\" with the following code</p>\n<pre><code>#include &lt;cstdlib&gt;\n\nint main( int , char*[] ) {\n  unsigned char *dest = new unsigned char[16];\n  const unsigned char *src = new unsigned char[16];\n  for( size_t i = 0; i != 16; ++i) {\n    dest[i] = ~(src[i]);\n  }\n  return 0;\n}\n</code></pre>\n<p>Obviously, both <code>src</code> and <code>dest</code> are both pointers to an array of <code>unsigned char</code> and I only want the latter to be the bit-wise negation of the former. For some strange reason the <code>~</code> operator seems to return an <code>int</code> and thus triggering the warning. Why? Is this intended behaviour?</p>\n<p>Of course, I know I could use a <code>static_cast&lt;unsigned char&gt;()</code> to prevent the warning, but I feel that something else is wrong and the warning should not be there in the first place.</p>\n", "Title": "Why does bit-wise negate operator \"~\" cast to int? (conversion to \u2018unsigned char\u2019 from \u2018int\u2019 may alter its value)", "CreationDate": "2015-08-28T13:08:52.607", "LastActivityDate": "2015-08-28T14:26:21.177", "CommentCount": "0", "PostTypeId": "1", "Id": "32271852", "Score": "0", "OwnerUserId": "2690527", "Tags": "<c++><type-conversion><bit-manipulation><compiler-warnings>", "AnswerCount": "2"}, "32273373": {"Id": "32273373", "PostTypeId": "2", "Body": "<p>I guess the literal answer is because the Standard says so. From [expr.unary.op]:</p>\n<blockquote>\n<p id=\"so_32271852_32273373_0\">The operand of <code>~</code> shall have integral or unscoped enumeration type; the result is the one\u2019s complement of its operand. Integral promotions are performed. <strong>The type of the result is the type of the promoted operand.</strong></p>\n</blockquote>\n<p>which, according to [conv.prom] is:</p>\n<blockquote>\n<p id=\"so_32271852_32273373_1\">A prvalue of an integer type other than <code>bool</code>, <code>char16_t</code>, <code>char32_t</code>, or <code>wchar_t</code> whose integer conversion\n  rank (4.13) is less than the rank of <code>int</code> can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all\n  the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n<p>And <code>int</code> has higher rank than <code>unsigned char</code>. So yes, it's intended behavior, and an explicit <code>static_cast</code> squelches the warning. </p>\n", "LastActivityDate": "2015-08-28T14:26:21.177", "CommentCount": "0", "CreationDate": "2015-08-28T14:26:21.177", "ParentId": "32271852", "Score": "2", "OwnerUserId": "2069064"}});