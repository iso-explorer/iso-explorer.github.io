post_cb({"8031823": {"CommentCount": "0", "AcceptedAnswerId": "8031859", "CreationDate": "2011-11-07T01:19:35.810", "LastActivityDate": "2011-11-07T01:27:08.973", "PostTypeId": "1", "ViewCount": "391", "FavoriteCount": "0", "Title": "What feature of C++ lets template classes refer to themselves without template arguments?", "Id": "8031823", "Score": "6", "Body": "<p>Given:</p>\n<pre><code>template &lt;typename T&gt;\nclass C {\n    C &amp; operator ++ () { ... }\n};\n</code></pre>\n<p>Why/how is <code>C</code> allowed to declare variables and functions of type <code>C</code> rather than being required to name <code>C&lt;T&gt;</code>?  I had not really thought about it before working on a template with many parameters that would make spelling out the \"self type\" inconvenient.</p>\n<p>Are there any quirks of this I should know about?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "479989", "AnswerCount": "3"}, "8031861": {"ParentId": "8031823", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_8031823_8031861_0\">Why/how is C allowed to declare variables and functions of type C rather than being required to name C?</p>\n</blockquote>\n<p>It's just specified like this. The name of the template is injected in its body and means the actual type (with arguments).</p>\n<blockquote>\n<p id=\"so_8031823_8031861_1\">Are there any quirks of this I should know about?</p>\n</blockquote>\n<p>Nothing serious. You just have to remember this doesn't work for base classes, so to do CRTP, you have to do</p>\n<pre><code>template &lt;class T&gt;\nclass A : public Base&lt;A&lt;T&gt; &gt; // not Base&lt;A&gt;\n</code></pre>\n", "OwnerUserId": "51831", "PostTypeId": "2", "Id": "8031861", "Score": "2", "CreationDate": "2011-11-07T01:27:08.973", "LastActivityDate": "2011-11-07T01:27:08.973"}, "8031843": {"ParentId": "8031823", "CommentCount": "0", "Body": "<p>It's just syntactic sugar.</p>\n<p>It is convenient to not have to change the signatures of your methods if you have to change the template parameters.</p>\n", "OwnerUserId": "232574", "PostTypeId": "2", "Id": "8031843", "Score": "2", "CreationDate": "2011-11-07T01:23:20.400", "LastActivityDate": "2011-11-07T01:23:20.400"}, "8031859": {"ParentId": "8031823", "CommentCount": "7", "Body": "<blockquote>\n<p id=\"so_8031823_8031859_0\"><code>[n3290: 14.6.1/1]:</code> Like normal (non-template) classes, <strong>class\n  templates have an injected-class-name (Clause 9)</strong>. The\n  injected-class-name can be used as a <em>template-name</em> or a <em>type-name</em>.\n  When it is used with a <em>template-argument-list</em>, as a\n  <em>template-argument</em> for a template <em>template-parameter</em>, or as the final identifier in the <em>elaborated-type-specifier</em> of a friend class\n  template declaration, it refers to the class template itself.\n  Otherwise, <strong>it is equivalent to the <em>template-name</em> followed by the\n  <em>template-parameters</em> of the class template enclosed in <code>&lt;&gt;</code>.</strong></p>\n</blockquote>\n<p>Ostensibly, it's merely a convenience feature.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "8031859", "Score": "6", "CreationDate": "2011-11-07T01:25:58.710", "LastActivityDate": "2011-11-07T01:25:58.710"}, "bq_ids": {"n4140": {"so_8031823_8031859_0": {"section_id": 179, "quality": 0.925, "length": 37}}, "n3337": {"so_8031823_8031859_0": {"section_id": 173, "quality": 0.925, "length": 37}}, "n4659": {"so_8031823_8031859_0": {"section_id": 184, "quality": 0.925, "length": 37}}}});