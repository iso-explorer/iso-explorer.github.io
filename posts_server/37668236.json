post_cb({"41351312": {"ParentId": "37668236", "CommentCount": "0", "Body": "<p>Seems like there is no explicit rationale, just that some proposals for additions to the standard were made and those proposals were accepted.</p>\n<p>At the very end of the document <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm\" rel=\"nofollow noreferrer\">N2672 Initializer List proposed wording</a> it just says:</p>\n<blockquote>\n<p id=\"so_37668236_41351312_0\">In 20.2 Utility components [utility] paragraph 1:</p>\n<p id=\"so_37668236_41351312_1\">This subclause contains some basic function and class templates that are used throughout the rest of the library.</p>\n<p id=\"so_37668236_41351312_2\">Header <code>&lt;utility&gt;</code> synopsis</p>\n<pre><code>     #include&lt;initializer_list&gt;\n      namespace std {\n</code></pre>\n</blockquote>\n<p>So, the authors of the paper saw <code>initializer_list</code> as a utility, and so it ought to be included with the <code>&lt;utility&gt;</code> header. And therefore it is.</p>\n<p>The paper didn't propose any changes to the <code>&lt;iterator&gt;</code> header, so none were made.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "41351312", "Score": "1", "CreationDate": "2016-12-27T19:47:51.040", "LastActivityDate": "2016-12-27T19:47:51.040"}, "bq_ids": {"n4140": {"so_37668236_41351312_1": {"section_id": 3925, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_37668236_41351312_1": {"section_id": 3785, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_37668236_41351312_1": {"section_id": 4811, "quality": 0.9090909090909091, "length": 10}}}, "37668236": {"CommentCount": "7", "ViewCount": "720", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-06-06T23:16:58.213", "LastActivityDate": "2016-12-27T19:47:51.040", "Title": "Why are these C++ headers specified to include <initializer_list>?", "FavoriteCount": "3", "LastEditDate": "2017-05-23T11:55:01.607", "Id": "37668236", "Score": "15", "Body": "<p>As can be seen from <a href=\"https://stackoverflow.com/a/26614984/481267\">https://stackoverflow.com/a/26614984/481267</a> the following headers are guaranteed by the standard to <code>#include &lt;initializer_list&gt;</code>:</p>\n<ul>\n<li>Everything in [containers]</li>\n<li><code>&lt;utility&gt;</code></li>\n<li><code>&lt;string&gt;</code></li>\n<li><code>&lt;algorithm&gt;</code></li>\n<li><code>&lt;random&gt;</code></li>\n<li><code>&lt;valarray&gt;</code></li>\n<li><code>&lt;regex&gt;</code></li>\n</ul>\n<p>Most of these headers declare at least one function that takes a <code>std::initializer_list&lt;E&gt;</code> argument, so it makes sense. However,</p>\n<ul>\n<li><code>&lt;array&gt;</code>, <code>&lt;stack&gt;</code>, and <code>&lt;queue&gt;</code> have no such functions, although perhaps it makes sense to treat all containers uniformly here.</li>\n<li><code>&lt;utility&gt;</code> has no such functions.</li>\n<li><code>&lt;iterator&gt;</code> does have functions with an <code>initializer_list</code> argument (<code>rbegin</code>, <code>rend</code>) but it's not specified to include <code>&lt;initializer_list&gt;</code>.</li>\n</ul>\n<p>What is the rationale behind these exceptions?</p>\n", "Tags": "<c++><initializer-list>", "OwnerUserId": "481267", "AnswerCount": "1"}});