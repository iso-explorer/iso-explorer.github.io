post_cb({"bq_ids": {"n4140": {"so_34481404_34481418_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3383}}, "n3337": {"so_34481404_34481418_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3252}}, "n4659": {"so_34481404_34481418_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4143}}}, "34481420": {"Id": "34481420", "PostTypeId": "2", "Body": "<p>Yes, they will be deallocated:</p>\n<ul>\n<li>First, their destructors, if any, are going to be invoked,</li>\n<li>Then their memory will be deallocated from the automatic storage area.</li>\n</ul>\n<p>The second part is commonly implemented by removing the stack frame in which the object is allocated.</p>\n<p>This feature is fundamental for implementing <a href=\"https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"nofollow\">RAII</a>, a technique for exception-safe resource management in C++. </p>\n<p><strong>Note:</strong> In case that there is no exception handler defined in your code the program is allowed to terminate without calling destructors, letting the operating system deal with the task of releasing the resources held by your program.</p>\n", "LastEditorUserId": "335858", "LastActivityDate": "2015-12-27T14:41:49.533", "Score": "1", "CreationDate": "2015-12-27T14:34:25.170", "ParentId": "34481404", "CommentCount": "0", "OwnerUserId": "335858", "LastEditDate": "2015-12-27T14:41:49.533"}, "34481431": {"Id": "34481431", "PostTypeId": "2", "Body": "<p>Local variables should be deallocated when an exception is thrown as the <code>throw</code> clause returns the function to calling function.</p>\n<p>Consider that your function <code>some_function()</code> is called by <code>main()</code>. In this case the <code>throw</code> clause returns the function back to <code>main</code> there by deallocating the local variable declared in <code>some_function</code> </p>\n", "LastActivityDate": "2015-12-27T14:35:11.950", "CommentCount": "0", "CreationDate": "2015-12-27T14:35:11.950", "ParentId": "34481404", "Score": "0", "OwnerUserId": "5676104"}, "34481404": {"ViewCount": "163", "Body": "<p>I wanted to know if objects allocated in a stack get deallocated when an exception is thrown.</p>\n<p>For example, in a function:</p>\n<pre><code>void some_function()\n{\n    int i;\n    std::string str;\n\n    throw std::runtime_error{\"Some error\"};\n}\n</code></pre>\n", "AcceptedAnswerId": "34481420", "Title": "C++ - Do local objects deallocate if an exception is thrown?", "CreationDate": "2015-12-27T14:31:27.070", "Id": "34481404", "CommentCount": "3", "LastEditDate": "2015-12-27T14:34:43.950", "PostTypeId": "1", "OwnerDisplayName": "user5494228", "LastEditorUserId": "464581", "LastActivityDate": "2015-12-27T14:41:49.533", "ClosedDate": "2015-12-27T14:37:49.850", "Score": "0", "Tags": "<c++><exception>", "AnswerCount": "3"}, "34481418": {"Id": "34481418", "PostTypeId": "2", "Body": "<p>Destructors of local objects are guaranteed to be invoked as part of <strong>stack unwinding</strong> if there is a handler for the exception.</p>\n<p>If there is no handler then it's up to the implementation:</p>\n\nC++11 \u00a715.5.1/2:\n\n<blockquote>\n<p id=\"so_34481404_34481418_0\"><strong>\u201d</strong> [\u2026] In the situation where no matching handler is found,\n  it is implementation-defined whether or not the stack is unwound before <code>std::terminate()</code> is called.</p>\n</blockquote>\n", "LastActivityDate": "2015-12-27T14:34:10.657", "CommentCount": "0", "CreationDate": "2015-12-27T14:34:10.657", "ParentId": "34481404", "Score": "3", "OwnerUserId": "464581"}});