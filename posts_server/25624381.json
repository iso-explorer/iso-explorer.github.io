post_cb({"bq_ids": {"n4140": {"so_25624381_25624381_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5483}}, "n3337": {"so_25624381_25624381_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5269}}}, "25624624": {"CommentCount": "0", "Body": "<p>Even without a header, you can have a .cpp file containing:</p>\n<pre><code>namespace X {\n    void f() { / ... / }\n}\n</code></pre>\n<p>Or you can have it in a header if it's included to only one translation unit</p>\n<p>Also, even if header is included in multiple translation units, it can be like this:</p>\n<pre><code>namespace {\n    namespace X {\n        void f() { / ... / }\n    }\n}\n</code></pre>\n", "CreationDate": "2014-09-02T13:29:16.070", "ParentId": "25624381", "Id": "25624624", "LastActivityDate": "2014-09-02T13:29:16.070", "PostTypeId": "2", "Score": "2", "OwnerUserId": "3959454"}, "25624381": {"CreationDate": "2014-09-02T13:18:04.953", "ViewCount": "116", "Id": "25624381", "AcceptedAnswerId": "25624776", "Score": "1", "Title": "I believe the example in \u00a77.3.1.2/1 is incorrect", "CommentCount": "3", "Body": "<p>\u00a77.3.1.2/1</p>\n<blockquote>\n<p id=\"so_25624381_25624381_0\">Members (including explicit specializations of templates (14.7.3)) of\n  a namespace can be defined within that namespace. [ Example:</p>\n<pre><code>namespace X {\n    void f() { / ... / }\n}\n</code></pre>\n</blockquote>\n<p>In order to define a function in a namespace you've got to use one of the specifiers: <code>static</code> or <code>inline</code>. Am I correct?</p>\n", "Tags": "<c++><c++11><namespaces><language-lawyer>", "LastActivityDate": "2014-09-02T13:36:43.773", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "2548699"}, "25624496": {"CreationDate": "2014-09-02T13:23:37.447", "CommentCount": "1", "Body": "<p>You can imagine you have a header file with declaration:</p>\n<pre><code>namespace X {\n    void f();\n}\n</code></pre>\n<p>And translation unit, including this header, with following content:</p>\n<pre><code>namespace X {\n    void f() { / ... / }\n}\n</code></pre>\n<p>as an alternative to:</p>\n<pre><code>void X::f() { / ... / }\n</code></pre>\n<p>Or a translation unit that includes nothing related to <code>X::f</code>, that both declares and defines the function:</p>\n<pre><code>namespace X {\n    void f() { / ... / }\n}\n</code></pre>\n", "Id": "25624496", "OwnerUserId": "3953764", "LastEditDate": "2014-09-02T13:28:40.193", "ParentId": "25624381", "LastActivityDate": "2014-09-02T13:28:40.193", "PostTypeId": "2", "Score": "3", "LastEditorUserId": "3953764"}, "25624776": {"CommentCount": "0", "Body": "<p>No. You can define it within a namespace with non-inline external linkage, as long as there's only one definition in the program (to meet the requirements of the One Definition Rule).</p>\n<p>Generally, this means you can define it like that within a source file (so that it's only defined once, in a single translation unit), but must declare it <code>inline</code> (or possibly <code>static</code>, or in an unnamed namespace, in unusual circumstances) if you define it in a header, which might be included by more than one translation unit. But this has nothing to do with whether or not the definition is inside its namespace.</p>\n", "CreationDate": "2014-09-02T13:36:43.773", "ParentId": "25624381", "Id": "25624776", "LastActivityDate": "2014-09-02T13:36:43.773", "PostTypeId": "2", "Score": "4", "OwnerUserId": "204847"}});