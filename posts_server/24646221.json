post_cb({"24646295": {"ParentId": "24646221", "LastEditDate": "2014-07-09T06:09:01.633", "CommentCount": "0", "CreationDate": "2014-07-09T05:58:13.117", "Score": "7", "LastEditorUserId": "153285", "PostTypeId": "2", "Id": "24646295", "OwnerUserId": "153285", "Body": "<p>It seems like you're veering into subjective territory, considering that C varargs are (usually) passed mechanically the same way as other arguments.</p>\n<p>The first few arguments are placed in CPU registers, under most ABIs. How many depends on the number of architectural registers; it may vary from two to ten. In C++, empty classes (such as overload dispatch tags) are usually omitted entirely. Loading data into registers is usually \"cheap as free.\"</p>\n<p>After registers, arguments are copied onto the stack. You could say this takes linear time, but such operations are not all created equal. If you are going to be calling a series of functions on the same arguments, you might consider packaging them together as a <code>struct</code> and passing that by reference.</p>\n<p>To literally answer your question, the maximum number of arguments is an implementation-defined quantity, meaning that the ISO standard requires your compiler manual to document it. The C++ standard also recommends (Annex B) that no implementation balk at less than <strong>256 arguments</strong>, which should be Enough For Anyone\u2122. C requires (\u00a75.2.4.1) support for at least <strong>127 arguments</strong>, although that requirement is normatively qualified such as to weaken it to only a recommendation.</p>\n", "LastActivityDate": "2014-07-09T06:09:01.633"}, "24646431": {"ParentId": "24646221", "CommentCount": "0", "CreationDate": "2014-07-09T06:07:39.230", "OwnerUserId": "3784886", "PostTypeId": "2", "Id": "24646431", "Score": "4", "Body": "<p>It is not really dirty, sometimes you can't avoid using 4+ arguments while maintaining stability and efficiency. If possible it should be minimized for sake of clarity (perhaps by use of structs), especially if you think that some function is becoming a god construct (function that runs most of the program, they should be avoided for sake of stability). If this is the case, functions that take larger numbers of arguments are pretty good indicators of such constructs.</p>\n", "LastActivityDate": "2014-07-09T06:07:39.230"}, "24646221": {"CommentCount": "11", "ViewCount": "6388", "PostTypeId": "1", "LastEditorUserId": "16287", "CreationDate": "2014-07-09T05:51:52.620", "LastActivityDate": "2014-07-09T15:02:23.693", "LastEditDate": "2014-07-09T07:04:49.530", "AcceptedAnswerId": "24646440", "FavoriteCount": "1", "Title": "How many arguments can theoretically be passed as parameters in c++ functions?", "Id": "24646221", "Score": "1", "Body": "<p>I was wondering if there was a limit on the number of parameters you can pass to a function.</p>\n<p>I'm just wondering because I have to maintain functions of 5+ arguments here at my jobs.  </p>\n<p>And is there a critical threshold in <code>nbArguments</code>, talking about performance, or is it linear? </p>\n", "Tags": "<c++><c><function><arguments>", "OwnerUserId": "1585121", "AnswerCount": "3"}, "24646440": {"ParentId": "24646221", "LastEditDate": "2014-07-09T06:20:44.407", "CommentCount": "2", "CreationDate": "2014-07-09T06:08:15.483", "Score": "7", "LastEditorUserId": "179910", "PostTypeId": "2", "Id": "24646440", "OwnerUserId": "179910", "Body": "<p>Neither the C nor C++ standard places an absolute requirement on the number of arguments/parameters you must be able to pass when calling a function, but the C standard suggests that an implementation should support at least 127 parameters/arguments (\u00a75.2.4.1/1), and the C++ standard suggests that it should support at least 256 parameters/arguments (\u00a7B/2).</p>\n<p>The precise wording from the C standard is:</p>\n<blockquote>\n<p id=\"so_24646221_24646440_0\">The implementation shall be able to translate and execute at least one program that\n  contains at least one instance of every one of the following limits.</p>\n</blockquote>\n<p>So, one such function must be successfully translated, but there's no guarantee that if <em>your</em> code attempts to do so that compilation will succeed (but it probably will, in a modern implementation).</p>\n<p>The C++ standard doesn't even go that far, only going so far as to say that:</p>\n<blockquote>\n<p id=\"so_24646221_24646440_1\">The bracketed number following each quantity is recommended as the minimum for that quantity. However, these quantities are only guidelines and do not determine compliance.</p>\n</blockquote>\n<p>As far as what's advisable: it depends. A few functions (especially those using variadic parameters/variadic templates) accept an arbitrary number of arguments of (more or less) arbitrary types. In this case, passing a relatively large number of parameters can make sense because each is more or less independent from the others (e.g., printing a list of items).</p>\n<p>When the parameters are more...interdependent, so you're not just passing a list or something on that order, I agree that the number should be considerably more limited. In C, I've seen a few go as high as 10 or so without being <em>terribly</em> unwieldy, but that's definitely starting to push the limit even at best. In C++, it's generally enough easier (and more common) to aggregate related items into a <code>struct</code> or <code>class</code> that I can't quite imagine that many parameters unless it was in a C-compatibility layer or something on that order, where a more...structured approach might force even more work on the user.</p>\n<p>In the end, it comes down to this: you're going to either have to pass a smaller number of items that are individually larger, or else break the function call up into multiple calls, passing a smaller number of parameters to each.</p>\n<p>The latter can tend to lead toward a stateful interface, that basically forces a number of calls in a more or less fixed order. You've reduced the complexity of a single call, but may easily have done little or nothing to reduce the overall complexity of the code.</p>\n<p>In the other direction, a large number of parameters <em>may</em> well mean that you've really defined the function to carry out a large number of related tasks instead of one clearly defined task. In this case, finding more specific tasks for individual functions to carry out, and passing a smaller set of parameters needed by each may well reduce the overall complexity of the code.</p>\n", "LastActivityDate": "2014-07-09T06:20:44.407"}, "bq_ids": {"n4140": {"so_24646221_24646440_1": {"section_id": 47, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_24646221_24646440_1": {"section_id": 48, "quality": 0.9285714285714286, "length": 13}}}});