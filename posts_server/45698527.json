post_cb({"45699358": {"ParentId": "45698527", "CommentCount": "9", "Body": "<p>The example is incorrect, <code>bind</code> does make a copy of its arguments unless you wrap it in <code>std::reference_wrapper</code> as the text correctly says, but that's not what the example shows. In the example, the argument <code>i</code> is passed to the functor returned by <code>bind</code>, not to <code>bind</code> itself. If the example had instead been the following, the value of <code>i</code> would've remained <code>2</code>.</p>\n<pre><code>auto inc = bind(incr, i);   // a copy of i is made\ninc(); // i stays 2; inc(i) incremented a local copy of i\n</code></pre>\n<p>In the example shown in the book, the argument <code>i</code> will be forwarded to <code>incr</code>, which will result in an lvalue reference to the original <code>i</code> being passed to the function, and the original <code>i</code> will be incremented.</p>\n<p>For the relevant standard quotes, from <em>23.14.11.3 \n<a href=\"http://eel.is/c++draft/func.bind.bind\" rel=\"noreferrer\">[func.bind.bind]</a>/10</em></p>\n<blockquote>\n<p id=\"so_45698527_45699358_0\">The values of the bound arguments <code>v1</code>, <code>v2</code>, \u2026, <code>vN</code> and their corresponding types <code>V1</code>, <code>V2</code>, \u2026, <code>VN</code> depend on the types <code>TDi</code> derived from the call to <code>bind</code> and the cv-qualifiers <em>cv</em> of the call wrapper <code>g</code> as follows:<br/>\n  ...<br/>\n  \u2014 if the value <code>j</code> of <code>is_\u00adplaceholder_\u00adv&lt;TDi&gt;</code> is not zero, the argument is <code>std\u200b::\u200bforward&lt;Uj&gt;(uj)</code> and its type <code>Vi</code> is <code>Uj&amp;&amp;</code>;</p>\n</blockquote>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "45699358", "Score": "10", "CreationDate": "2017-08-15T18:39:46.050", "LastActivityDate": "2017-08-15T18:39:46.050"}, "bq_ids": {"n4140": {"so_45698527_45699358_0": {"section_id": 4641, "quality": 0.7916666666666666, "length": 19}}, "n3337": {"so_45698527_45699358_0": {"section_id": 4452, "quality": 0.7916666666666666, "length": 19}}, "n4659": {"so_45698527_45699358_0": {"section_id": 6011, "quality": 0.7916666666666666, "length": 19}}}, "45698527": {"CommentCount": "5", "AcceptedAnswerId": "45699358", "PostTypeId": "1", "LastEditorUserId": "241631", "CreationDate": "2017-08-15T17:48:03.563", "LastActivityDate": "2017-08-16T05:57:02.560", "LastEditDate": "2017-08-16T05:57:02.560", "ViewCount": "398", "FavoriteCount": "1", "Title": "Mistake with bind in \"The C++ Programming Language [4th Edition] - Bjarne Stroustrup\"", "Id": "45698527", "Score": "14", "Body": "<p>I found this code in Bjarne Stroustrup's book:\n<a href=\"https://i.stack.imgur.com/IxS3i.png\" rel=\"nofollow noreferrer\"><img alt=\"Page screenshot\" src=\"https://i.stack.imgur.com/IxS3i.png\"/></a></p>\n<p>The problem with this code is that variable <code>i</code> does not stay at 2, it is incremented to 3. You can check it here: <a href=\"https://wandbox.org/permlink/p5JC1nOA4pIpsgXb\" rel=\"nofollow noreferrer\">https://wandbox.org/permlink/p5JC1nOA4pIpsgXb</a> </p>\n<p>We do not have to use the <code>std::ref()</code> to increment this variable. Is it a mistake in the book or something has been changed since C++11?</p>\n", "Tags": "<c++><c++11><bind>", "OwnerUserId": "8468471", "AnswerCount": "1"}});