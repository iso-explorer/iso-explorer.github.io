post_cb({"bq_ids": {"n4140": {"so_17515601_17515633_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 6348}}, "n3337": {"so_17515601_17515633_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 6105}}, "n4659": {"so_17515601_17515633_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 7857}}}, "17515601": {"ViewCount": "1095", "Body": "<blockquote>\n<p id=\"so_17515601_17515601_0\">Is it possible to use a <code>std::regex</code> object in multiple threads all using <code>std::sregex_iterator</code>, <code>std::regex_match</code>, etc.?</p>\n</blockquote>\n<p>For instance, would the following produce logical behaviour:</p>\n<pre><code>bool SomeFunc( const std::string&amp; szString1, const std::string&amp; szString2 ) \n{\n     static const std::regex regexTest( \"=== ([\\\\w]+) ===\", std::regex_constants::optimize );\n\n     std::future&lt;bool&gt; f = std::async( []( std::string szString ) {\n        return std::regex_match( szString, regexTest );  \n     }, szString1 );\n\n     bool b = std::regex_match( szString2, regexTest );\n\n     return (b &amp;&amp; f.get());\n}\n</code></pre>\n<p>I can't find anything which states whether using a <code>const std::regex</code> concurrently results in undefined behaviour or not. As far as I can tell, no edits are being made to the regex object so no undefined behaviour should be induced by using it concurrently?</p>\n<p>Thanks in advance!</p>\n", "AcceptedAnswerId": "17515633", "Title": "Concurrently using std::regex, defined behaviour?", "CreationDate": "2013-07-07T19:39:38.813", "Id": "17515601", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-07-07T19:43:17.830", "Score": "13", "OwnerUserId": "860566", "Tags": "<c++><regex><multithreading><c++11>", "AnswerCount": "1"}, "17515633": {"Id": "17515633", "PostTypeId": "2", "Body": "<p>Yes, a <code>const std::regex</code> is thread-safe. Actually any const method in the standard library is thread-safe, see:</p>\n<blockquote>\n<p id=\"so_17515601_17515633_0\">\u00a717.6.5.9/3. A C++ standard library function shall not directly or\n  indirectly modify objects (1.10) accessible by threads other than the\n  current thread unless the objects are accessed directly or indirectly\n  via the function\u2019s non-const arguments, including this.</p>\n</blockquote>\n", "LastActivityDate": "2013-07-07T19:43:17.830", "CommentCount": "21", "CreationDate": "2013-07-07T19:43:17.830", "ParentId": "17515601", "Score": "19", "OwnerUserId": "346804"}});