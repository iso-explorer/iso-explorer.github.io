post_cb({"bq_ids": {"n4140": {"so_48972763_48972763_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 196}, "so_48972763_48972763_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 175}}, "n3337": {"so_48972763_48972763_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 190}, "so_48972763_48972763_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 169}}, "n4659": {"so_48972763_48972763_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 202}, "so_48972763_48972763_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 180}}}, "48972763": {"ViewCount": "45", "Body": "<p><a href=\"http://www.eel.is/c++draft/temp.dep.type#7\" rel=\"nofollow noreferrer\">[temp.dep.type]/p7</a>:</p>\n<blockquote>\n<p id=\"so_48972763_48972763_0\">If a <em>qualified-id</em> in which the <em>nested-name-specifier</em> refers to the current instantiation is not a member of the current instantiation or a member of an unknown specialization, the program is ill-formed even if the template containing the <em>qualified-id</em> is not instantiated; no diagnostic required. Similarly, if the <em>id-expression</em> in a class member access expression for which the type of the object expression is the current instantiation does not refer to a member of the current instantiation or a member of an unknown specialization, the program is ill-formed even if the template containing the member access expression is not instantiated; no diagnostic required. [\u2009<em>Example</em>:</p>\n<pre><code>template&lt;class T&gt; class A {\n  typedef int type;\n  void f() {\n    A&lt;T&gt;::type i;               // OK: refers to a member of the current instantiation\n    typename A&lt;T&gt;::other j;     // error: neither a member of the current instantiation nor\n                                // a member of an unknown specialization\n  }\n};\n</code></pre>\n<p id=\"so_48972763_48972763_1\">\u2014\u2009<em>end example</em>\u2009]</p>\n</blockquote>\n<p><a href=\"http://www.eel.is/c++draft/temp.res#8\" rel=\"nofollow noreferrer\">[temp.res]/p8</a> (irrelevant part is omitted):</p>\n<blockquote>\n<p id=\"so_48972763_48972763_2\">Knowing which names are type names allows the syntax of every template to be checked. The program is ill-formed, no diagnostic required, if:</p>\n<ul>\n<li>no valid specialization can be generated for a template or a substatement of a constexpr if statement within a template and the template is not instantiated, or</li>\n</ul>\n<p id=\"so_48972763_48972763_3\">...</p>\n<p id=\"so_48972763_48972763_4\">[\u2009<em>Example</em>:</p>\n<pre><code>int j;\ntemplate&lt;class T&gt; class X {\n  void f(T t, int i, char* p) {\n    t = i;          // diagnosed if X\u200b::\u200bf is instantiated, and the assignment to t is an error\n    p = i;          // may be diagnosed even if X\u200b::\u200bf is not instantiated\n    p = j;          // may be diagnosed even if X\u200b::\u200bf is not instantiated\n  }\n  void g(T t) {\n    +;              // may be diagnosed even if X\u200b::\u200bg is not instantiated\n  }\n};\n</code></pre>\n<p id=\"so_48972763_48972763_5\">...</p>\n<p id=\"so_48972763_48972763_6\">\u2014\u2009<em>end example</em>\u2009]</p>\n</blockquote>\n<hr>\n<p>In my opinion, if the conditions in [temp.dep.type]/p7 are met, then no valid specialization can be generated for this template (for example, in the <em>example</em> of [temp.dep.type]/p7, no valid specialization can be generated for the declaration <code>typename A&lt;T&gt;::other j;</code>), thus the program is ill-formed; no diagnostic required according to [temp.res]/p8.</p>\n<p>So is [temp.dep.type]/p7 convered by [temp.res]/p8? If not, could you please give an example that [temp.dep.type]/p7 covers but [temp.res]/p8 does not cover?</p>\n</hr>", "Title": "Is [temp.dep.type]/p7 convered by [temp.res]/p8?", "CreationDate": "2018-02-25T11:09:57.457", "LastActivityDate": "2018-02-25T11:09:57.457", "CommentCount": "0", "PostTypeId": "1", "Id": "48972763", "Score": "2", "OwnerUserId": "5376789", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "0"}});