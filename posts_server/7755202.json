post_cb({"7755237": {"ParentId": "7755202", "CommentCount": "5", "CreationDate": "2011-10-13T13:57:10.643", "OwnerUserId": "212063", "PostTypeId": "2", "Id": "7755237", "Score": "10", "Body": "<p>This warning is useful for programmers that would mistakenly write <code>'test'</code> where they should have written <code>\"test\"</code>.</p>\n<p>This happen much more often than programmers that do actually want multi-char int constants.</p>\n", "LastActivityDate": "2011-10-13T13:57:10.643"}, "8845745": {"ParentId": "7755202", "CommentCount": "0", "CreationDate": "2012-01-13T03:58:29.770", "OwnerUserId": "14200", "PostTypeId": "2", "Id": "8845745", "Score": "9", "Body": "<p>If you're happy you know what you're doing and can accept the portability problems, on GCC for example you can disable the warning on the command line:</p>\n<pre><code>-Wno-multichar\n</code></pre>\n<p>I use this for my own apps to work with AVI and MP4 file headers for similar reasons to you.</p>\n", "LastActivityDate": "2012-01-13T03:58:29.770"}, "7755202": {"CommentCount": "5", "AcceptedAnswerId": "7755280", "PostTypeId": "1", "ClosedDate": "2014-09-16T17:39:04.803", "LastEditorUserId": "1498329", "CreationDate": "2011-10-13T13:54:26.527", "LastActivityDate": "2014-05-25T04:45:45.070", "LastEditDate": "2014-05-25T04:25:37.957", "ViewCount": "50801", "FavoriteCount": "2", "Title": "Multi-character constant warnings", "Id": "7755202", "Score": "19", "Body": "<p>Why is this a warning? I think there are many cases when is more clear to use multi-char int constants instead of \"no meaning\" numbers or instead of defining const variables with same value. When parsing wave/tiff/other file types is more clear to compare the read values with some 'EVAW', 'data', etc instead of their corresponding values.</p>\n<p>Sample code:</p>\n<pre><code>int waveHeader = 'EVAW';\n</code></pre>\n<p>Why does this give a warning?</p>\n", "Tags": "<c++><c><compiler-warnings><portability>", "OwnerUserId": "336578", "AnswerCount": "4"}, "7755280": {"ParentId": "7755202", "CommentCount": "1", "Body": "<p><a href=\"http://scarff.id.au/blog/2009/c-multi-character-character-constants/\" rel=\"noreferrer\">According to the standard</a> (\u00a76.4.4.4.10)</p>\n<blockquote>\n<p id=\"so_7755202_7755280_0\">The value of an integer character constant containing more than one\n  character (e.g., 'ab'), [...] is implementation-defined.</p>\n</blockquote>\n<pre><code>long x = '\\xde\\xad\\xbe\\xef'; // yes, single quotes\n</code></pre>\n<p>This is valid ISO 9899:1999 C.  It compiles without warning under <code>gcc</code> with <code>-Wall</code>, and a \u201cmulti-character character constant\u201d warning with <code>-pedantic</code>.</p>\n<p>From <a href=\"http://en.wikipedia.org/wiki/C_syntax#Character_constants\" rel=\"noreferrer\">Wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_7755202_7755280_1\">Multi-character constants (e.g. 'xy') are valid, although rarely\n  useful \u2014 they let one store several characters in an integer (e.g. 4\n  ASCII characters can fit in a 32-bit integer, 8 in a 64-bit one).\n  Since the order in which the characters are packed into one int is not\n  specified, portable use of multi-character constants is difficult.</p>\n</blockquote>\n<p>For portability sake, don't use multi-character constants with integral types.</p>\n", "Id": "7755280", "PostTypeId": "2", "OwnerDisplayName": "user195488", "Score": "24", "CreationDate": "2011-10-13T14:00:28.930", "LastActivityDate": "2011-10-13T14:00:28.930"}, "23852102": {"ParentId": "7755202", "CommentCount": "0", "CreationDate": "2014-05-25T04:45:45.070", "OwnerUserId": "1405588", "PostTypeId": "2", "Id": "23852102", "Score": "3", "Body": "<p>Even if you're willing to look up what behavior your implementation defines, multi-character constants will <em>still</em> vary with endianness.</p>\n<p>Better to use a (POD) struct { char[4] };  ... and then use a UDL like \"WAVE\"_4cc to easily construct instances of that class</p>\n", "LastActivityDate": "2014-05-25T04:45:45.070"}, "bq_ids": {"n4140": {"so_7755202_7755280_0": {"section_id": 551, "quality": 0.5454545454545454, "length": 6}}, "n3337": {"so_7755202_7755280_0": {"section_id": 542, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_7755202_7755280_0": {"section_id": 572, "quality": 0.5454545454545454, "length": 6}}}});