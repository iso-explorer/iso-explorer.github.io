post_cb({"46245956": {"Tags": "<c++><visual-c++><future>", "ViewCount": "131", "LastEditDate": "2017-09-15T19:19:10.027", "CreationDate": "2017-09-15T18:58:22.813", "LastEditorUserId": "503776", "Title": "Crash when assigning to std::future under MSVC's Debug mode", "CommentCount": "8", "AcceptedAnswerId": "46247405", "Score": "6", "OwnerUserId": "503776", "Id": "46245956", "LastActivityDate": "2017-09-15T20:59:55.903", "Body": "<p>The following code crashes in random intervals when built with MSVC under <code>Debug</code> mode, unlike the <code>Release</code>.</p>\n<pre><code>#include &lt;future&gt;\n\nusing namespace std;\n\nint main() {\n    auto l = [](){};\n    auto f = async(launch::async, l);\n\n    for (int i = 0; i &lt; 1000000; ++i)\n        f = async(launch::async, l);\n}\n</code></pre>\n<p>The console output says:</p>\n<blockquote>\n<p id=\"so_46245956_46245956_0\">f:\\dd\\vctools\\crt\\crtw32\\stdcpp\\thr\\mutex.c(51): mutex destroyed while\n  busy</p>\n</blockquote>\n<p>The full call stack is: <a href=\"https://pastebin.com/0g2ZF5C1\" rel=\"nofollow noreferrer\">https://pastebin.com/0g2ZF5C1</a></p>\n<p>Now obviously it's just a stress test, but am I doing something utterly stupid? It seems to me it's fine to reassign a new task to an existing future, as it's said that <code>operator=</code>:</p>\n<blockquote>\n<p id=\"so_46245956_46245956_1\">Releases any shared state and move-assigns the contents of other to\n  *this</p>\n</blockquote>\n<p>(Due to <a href=\"http://en.cppreference.com/w/cpp/thread/future/operator%3D\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/thread/future/operator%3D</a>).</p>\n<p>Is it a bug in MSVC's runtime?</p>\n<p>Remarkably, the program stops crashing if I manually call wait() before the assignment, thus making the loop into:</p>\n<pre><code>for (int i = 0; i &lt; 1000000; ++i) {\n    f.wait();\n    f = async(launch::async, l);\n}\n</code></pre>\n<p>Isn't <code>operator=</code> itself supposed to call <code>wait</code>?</p>\n<p>Background:</p>\n<p><code>_MSC_VER</code> equals <code>1911</code></p>\n<p>Code was built with help of: </p>\n<pre><code>Microsoft Visual Studio Community 2017 Preview(2)\nVersion 15.4.0 Preview 2.0\n</code></pre>\n<p>Just opened a brand new C++ project.</p>\n", "PostTypeId": "1", "FavoriteCount": "1", "AnswerCount": "1"}, "46247405": {"ParentId": "46245956", "Score": "1", "CreationDate": "2017-09-15T20:59:55.903", "Id": "46247405", "OwnerUserId": "5241642", "LastActivityDate": "2017-09-15T20:59:55.903", "Body": "<blockquote>\n<p id=\"so_46245956_46247405_0\">Isn't <code>operator=</code> itself supposed to call <code>wait</code>?</p>\n</blockquote>\n<p>I don't know whether it is <em>supposed</em> to, but a cursory glance at the MSVC15.3.4 implementation of <code>&lt;future&gt;</code> seems to strongly suggest it doesn't.</p>\n<pre><code>//User Code\nfuture f = /*...*/;\nf = /*...*/; //(1)\n</code></pre>\n<blockquote id=\"so_46245956_46247405_1\">\n<pre><code>//MSVC Code\nfuture&amp; operator=(future&amp;&amp; _Right) _NOEXCEPT //(1)\n    {   // assign from rvalue future object\n    _Mybase::operator=(_STD move(_Right)); //(2)\n    return (*this);\n    }\n_State_manager&amp; operator=(_State_manager&amp;&amp; _Other) //(2)\n    {   // assign from rvalue _Other\n    _Move_from(_Other); //(3)\n    return (*this);\n    }\nvoid _Move_from(_State_manager&amp; _Other) //(3)\n    {   // move stored associated asynchronous state object from _Other\n    if (this != _STD addressof(_Other))\n        {   // different, move\n        if (_Assoc_state)\n            _Assoc_state-&gt;_Release(); //(4)\n        _Assoc_state = _Other._Assoc_state;\n        _Other._Assoc_state = 0;\n        _Get_only_once = _Other._Get_only_once;\n        }\n    }\nvoid _Release() //(4)\n    {   // decrement reference count and destroy when zero\n    if (_MT_DECR(_Refs) == 0)\n        _Delete_this(); //(5)\n    }\nvoid _Delete_this() //(5)\n    {   // delete this object\n    if (_Deleter)\n        _Deleter-&gt;_Delete(this); //External Code\n    else\n        delete this;\n    }\n</code></pre>\n</blockquote>\n<p>Seeing as calling <code>wait</code> helps synchronize things and ensure that the <code>future</code> object is in a safe state to be modified, it might be better to include the <code>wait</code> statement. </p>\n", "PostTypeId": "2", "CommentCount": "0"}, "bq_ids": {"n4659": {"so_46245956_46245956_1": {"length": 4, "section_id": 3876, "quality": 0.6666666666666666}}}});