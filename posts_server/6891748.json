post_cb({"6892005": {"PostTypeId": "2", "Body": "<p>Your <code>Xhandler</code> routine throws an <code>int</code> exception after declaring that it won't throw <code>int</code> exceptions.  This is undefined, so anything might happen.</p>\n", "LastActivityDate": "2011-07-31T20:11:22.807", "Id": "6892005", "CommentCount": "0", "CreationDate": "2011-07-31T20:11:22.807", "ParentId": "6891748", "Score": "0", "OwnerUserId": "16406"}, "6891877": {"PostTypeId": "2", "Body": "<p>You did not specified the compiler. If you are using Microsoft visual C++ there is a note at <a href=\"http://msdn.microsoft.com/en-us/library/wfa0edys.aspx\" rel=\"nofollow\">Exception Specifications page</a> on the MSDN</p>\n<blockquote>\n<p id=\"so_6891748_6891877_0\">Visual C++ departs from the ANSI Standard in its implementation of exception specifications. The following table summarizes the Visual C++ implementation of exception specifications:</p>\n<p id=\"so_6891748_6891877_1\">...</p>\n<p id=\"so_6891748_6891877_2\">throw(type) - The function can throw an exception of type type. However, in Visual C++ .NET, this is interpreted as throw(...).</p>\n</blockquote>\n<p>When using g++ the process is terminated due unexpected exception when running your example.</p>\n", "LastActivityDate": "2011-07-31T19:48:40.870", "Id": "6891877", "CommentCount": "6", "CreationDate": "2011-07-31T19:48:40.870", "ParentId": "6891748", "Score": "2", "OwnerUserId": "776074"}, "6892003": {"PostTypeId": "2", "Body": "<p>Well, the reason the </p>\n<pre><code>catch(int i)  /*this catch statement must be ignored then,but it is running*/\n{\n    cout&lt;&lt;\"caught an integer\"; /*this is the output on the screen*/\n}\n</code></pre>\n<p>exception handler gets executed instead of the unexpected handler being called lies probably with your compiler.</p>\n<p>The standard conform behavior when an exception is thrown by a function with exception specification but the type of the thrown exception does not match the exception specification would be that the unexpected handler gets called. The default handler terminates the program.</p>\n<p>In reality many compilers ignore exception specifications and some might just issue some warnings telling you that. That the compilers ignore them is a good idea imho.</p>\n<p>An exception specification in C++ does not work the way you would like it to. An exception specification does not mean that the compiler guarantees that the function cannot throw any other exceptions besides the ones mentioned in the exception specification. In a standard conform compiler it just means that the compiler has to enforce the exception specification at runtime (if the exception being thrown matches the exception specification you are fine, if not you should end up in the unexpected handler)</p>\n<p>For more info on exception specifications and why you should avoid them see <a href=\"http://www.gotw.ca/publications/mill22.htm\" rel=\"nofollow\">here</a> (Herb Sutter explains there mostly that exception specifications in C++ are not what they should be/most people think they are). And you get some further links at the bottom of the page...</p>\n", "LastActivityDate": "2011-07-31T20:11:11.773", "Id": "6892003", "CommentCount": "0", "CreationDate": "2011-07-31T20:11:11.773", "ParentId": "6891748", "Score": "2", "OwnerUserId": "491260"}, "bq_ids": {"n4140": {"so_6891748_48395856_0": {"length": 23, "quality": 0.7931034482758621, "section_id": 3371}, "so_6891748_48395856_2": {"length": 66, "quality": 0.7021276595744681, "section_id": 3386}}, "n3337": {"so_6891748_48395856_0": {"length": 23, "quality": 0.7931034482758621, "section_id": 3241}, "so_6891748_48395856_2": {"length": 66, "quality": 0.7021276595744681, "section_id": 3255}}}, "6891748": {"ViewCount": "1773", "Body": "<p>i was dealing with the following code,&amp; got confused,please have a look at it</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;conio.h&gt;\n#include&lt;string.h&gt;\n\nusing namespace std;\n\nvoid Xhandler(int test) throw(char,double)  /*i am restricting an integer exception     here by not including it in the argument list of throw*/\n{\nif(test==0) throw test;\nif(test==1) throw 'a';\nif(test==2) throw 123.23;\n}\n\nint main()\n{\ncout&lt;\"start\";\n\ntry{\n    Xhandler(0);  \n}\n\ncatch(int i)  /*this catch statement must be ignored then,but it is running*/\n{\n    cout&lt;&lt;\"caught an integer\"; /*this is the output on the screen*/\n}\ncatch(char c)\n{\n    cout&lt;&lt;\"caught character\";\n}\ncatch(double a)\n{\n    cout&lt;&lt;\"caught double\";\n}\n\ncout&lt;&lt;\"end\";\n    _getch();\n    return 0;\n\n     }\n</code></pre>\n<p>the catch statement corresponding to int must be ignored(which is not ignored) &amp; program must have to be terminated as there is no matching catch statement left,but it is not so?</p>\n", "AcceptedAnswerId": "6891877", "Title": "exception handling(restricting exceptions)", "CreationDate": "2011-07-31T19:24:03.363", "Id": "6891748", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2018-01-23T06:59:45.357", "Score": "3", "OwnerUserId": "681929", "Tags": "<c++><exception-handling>", "AnswerCount": "4"}, "48395856": {"PostTypeId": "2", "Body": "<p>The reason of this behavior is as follow:\nIf the thrown exception don't match in the <code>type</code> specified exception type-list then <code>std::unexpected()</code> is called. Which further throws the appropriate exception type <em>based upon if <code>std::bad_exception</code> is included or not in exception type-list</em>.</p>\n<p>Following are excerpt from C++11 draft standard(Document Number: N3337):(Though draft standards are not final standard but it serves the purpose here)</p>\n<blockquote>\n<p id=\"so_6891748_48395856_0\"><strong>15.4 Exception specifications[9]</strong><br>\n  Whenever an exception is thrown and the search for a handler (15.3) encounters the outermost block of a function with an <code>exception-specification</code> that does not allow the exception, then,\n  \u2014 if the <code>exception-specification</code> is a <code>dynamic-exception-specification</code>, the function <code>std::unexpected()</code> is called (15.5.2),\n  \u2014 otherwise, the function <code>std::terminate()</code> is called (15.5.1).</br></p>\n<p id=\"so_6891748_48395856_1\"><code>[ Example:\n  void f() throw (X, Y) {\n  int n = 0;\n  if (n) throw X(); // OK\n  if (n) throw Z(); // also OK\n  throw W(); // will call std::unexpected()\n  }\n  \u2014end example ]</code></p>\n</blockquote>\n<p>Following excerpt defined behavior of <code>std::unexpected()</code> function:</p>\n<blockquote>\n<p id=\"so_6891748_48395856_2\"><strong>15.5.2 The <code>std::unexpected()</code> function</strong><br>\n  The <code>std::unexpected()</code> function shall not return, but it can throw (or re-throw) an exception. If it throws a new exception which is allowed by the exception specification which previously was violated, then the search for another handler will continue at the call of the function whose exception specification was violated. If it throws or rethrows an exception that the <code>dynamic-exception-specification</code> does not allow then the following happens: If the <code>dynamic-exception-specification</code> does not include the class <code>std::bad_- exception</code> (18.8.2) then the function <code>std::terminate()</code> is called, otherwise the thrown exception is replaced by an implementation-defined object of the type <code>std::bad_exception</code> and the search for another handler will continue at the call of the function whose <code>dynamic-exception-specification</code> was violated. Thus, a <code>dynamic-exception-specification</code> guarantees that only the listed exceptions will be thrown. If the <code>dynamic-exception-specification</code> includes the type <code>std::bad_exception</code> then any exception not on the list may be replaced by <code>std::bad_exception</code> within the function <code>std::unexpected()</code>.</br></p>\n</blockquote>\n", "LastActivityDate": "2018-01-23T06:59:45.357", "Id": "48395856", "CommentCount": "0", "CreationDate": "2018-01-23T06:59:45.357", "ParentId": "6891748", "Score": "0", "OwnerUserId": "8013471"}});