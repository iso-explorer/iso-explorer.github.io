post_cb({"18235907": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Just use this loop.</p>\n<pre><code>for(int i =0 ; i &lt; 100 ; i++) directory[i] =0;\n</code></pre>\n", "OwnerUserId": "2683070", "LastEditorUserId": "1009479", "LastEditDate": "2013-08-14T15:32:25.930", "Id": "18235907", "Score": "0", "CreationDate": "2013-08-14T15:28:09.083", "LastActivityDate": "2013-08-14T15:32:25.930"}, "39277893": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The reason that <code>int directory[100] = {-1}</code> doesn't work is because of what happens with <a href=\"http://en.cppreference.com/w/c/language/array_initialization\" rel=\"nofollow\">array initialization</a>.</p>\n<blockquote>\n<p id=\"so_2890598_39277893_0\">All array elements that are not initialized explicitly are initialized implicitly the same way as objects that have static storage duration.</p>\n</blockquote>\n<p><code>int</code>s which are <a href=\"http://en.cppreference.com/w/c/language/initialization#Implicit_initialization\" rel=\"nofollow\">implicitly initialized</a> are:</p>\n<blockquote>\n<p id=\"so_2890598_39277893_1\">initialized to unsigned zero</p>\n<p id=\"so_2890598_39277893_2\">All array elements that are not initialized explicitly are initialized implicitly the same way as objects that have static storage duration.</p>\n</blockquote>\n<p>C++11 introduced <a href=\"http://en.cppreference.com/w/cpp/iterator/begin\" rel=\"nofollow\"><code>begin</code></a> and <a href=\"http://en.cppreference.com/w/cpp/iterator/end\" rel=\"nofollow\"><code>end</code></a> which are specialized for arrays!</p>\n<p>This means that given an array (not just a pointer), like your <code>directory</code> you can use <a href=\"http://en.cppreference.com/w/cpp/algorithm/fill\" rel=\"nofollow\"><code>fill</code></a> as has been suggested in several answers:</p>\n<pre><code>fill(begin(directory), end(directory), -1)\n</code></pre>\n<p>Let's say that you write code like this, but then decide to reuse the functionality after having forgotten how you implemented it, but you decided to change the size of <code>directory</code> to 60. If you'd written code using <code>begin</code> and <code>end</code> then you're done.<br>\nIf on the other hand you'd done this: <strike><code>fill(directory, directory + 100, -1)</code></strike> then you'd better remember to change that 100 to a 60 as well or you'll get undefined behavior.</br></p>\n", "OwnerUserId": "2642059", "LastEditorUserId": "2642059", "LastEditDate": "2016-09-01T18:03:29.533", "Id": "39277893", "Score": "0", "CreationDate": "2016-09-01T17:46:55.520", "LastActivityDate": "2016-09-01T18:03:29.533"}, "2890604": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is working right.  That's how list initializers work.</p>\n<p>I believe 6.7.8.10 of the C99 standard covers this:</p>\n<blockquote>\n<p id=\"so_2890598_2890604_0\">If an object that has automatic\n  storage duration is not initialized\n  explicitly, its value is\n  indeterminate. If an object that has\n  static storage duration is not\n  initialized explicitly, then:</p>\n<ul>\n<li>if it has pointer type, it is initialized to a null pointer;</li>\n<li>if it has arithmetic type, it is initialized to (positive or unsigned)\n  zero;</li>\n<li>if it is an aggregate, every member is initialized (recursively) according\n  to these rules;</li>\n<li>if it is a union, the first named member is initialized (recursively)\n  according to these rules.</li>\n</ul>\n</blockquote>\n<p>If you need to make all the elements in an array the same non-zero value, you'll have to use a loop or <a href=\"http://www.cplusplus.com/reference/clibrary/cstring/memset/\" rel=\"nofollow noreferrer\">memset</a>.</p>\n<p>Also note that, unless you really know what you're doing, <a href=\"http://www.parashift.com/c++-faq-lite/containers.html#faq-34.1\" rel=\"nofollow noreferrer\">vectors are preferred over arrays in C++</a>:</p>\n<blockquote>\n<p id=\"so_2890598_2890604_1\">Here's what you need to realize about containers vs. arrays:</p>\n<ol>\n<li>Container classes make programmers more productive. So if you insist on using arrays while those around are willing to use container classes, you'll probably be less productive than they are (even if you're smarter and more experienced than they are!).</li>\n<li>Container classes let programmers write more robust code. So if you insist on using arrays while those around are willing to use container classes, your code will probably have more bugs than their code (even if you're smarter and more experienced).</li>\n<li>And if you're so smart and so experienced that you can use arrays as fast and as safe as they can use container classes, someone else will probably end up maintaining your code and they'll probably introduce bugs. Or worse, you'll be the only one who can maintain your code so management will yank you from development and move you into a full-time maintenance role \u2014 just what you always wanted!</li>\n</ol>\n</blockquote>\n<p>There's a lot more to the linked question; give it a read.</p>\n", "OwnerUserId": "126042", "LastEditorUserId": "126042", "LastEditDate": "2010-05-23T10:17:34.180", "Id": "2890604", "Score": "1", "CreationDate": "2010-05-23T03:36:20.967", "LastActivityDate": "2010-05-23T10:17:34.180"}, "2890609": {"ParentId": "2890598", "CommentCount": "0", "Body": "<p>use vector of int instead a array.</p>\n<pre><code>vector&lt;int&gt; directory(100,-1);                       // 100 ints with value 1\n</code></pre>\n", "OwnerUserId": "177584", "PostTypeId": "2", "Id": "2890609", "Score": "1", "CreationDate": "2010-05-23T03:37:28.680", "LastActivityDate": "2010-05-23T03:37:28.680"}, "2890613": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>I'm surprised at all the answers suggesting <code>vector</code>. They aren't even the same thing!</p>\n<p>Use <a href=\"http://en.cppreference.com/w/cpp/algorithm/fill\" rel=\"noreferrer\"><code>std::fill</code></a>, from <code>&lt;algorithm&gt;</code>:</p>\n<pre><code>int directory[100];\nstd::fill(directory, directory + 100, -1);\n</code></pre>\n<hr>\n<p>Not concerned with the question directly, but you might want a nice helper function when it comes to arrays:</p>\n<pre><code>template &lt;typename T, size_t N&gt;\nT* end(T (&amp;pX)[N])\n{\n    return pX + N;\n}\n</code></pre>\n<p>Giving:</p>\n<pre><code>int directory[100];\nstd::fill(directory, end(directory), -1);\n</code></pre>\n<p>So you don't need to list the size twice.</p>\n</hr>", "OwnerUserId": "87234", "LastEditorDisplayName": "user283145", "LastEditDate": "2013-08-28T10:05:16.610", "Id": "2890613", "Score": "31", "CreationDate": "2010-05-23T03:39:57.397", "LastActivityDate": "2013-08-28T10:05:16.610"}, "bq_ids": {"n4140": {"so_2890598_2890604_0": {"section_id": 3291, "quality": 0.625, "length": 10}}, "n3337": {"so_2890598_2890604_0": {"section_id": 6895, "quality": 0.625, "length": 10}}, "n4659": {"so_2890598_2890604_0": {"section_id": 4053, "quality": 0.625, "length": 10}}}, "2890603": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you had a smaller number of elements you could specify them one after the other.  Array initialization works by specifying each element, not by specifying a single value that applies for each element. </p>\n<pre><code>int x[3] = {-1, -1, -1 };\n</code></pre>\n<hr>\n<p>You could also use a vector and use the constructor to initialize all of the values.  You can later access the raw array buffer by specifying <code>&amp;v.front()</code></p>\n<pre><code>std::vector directory(100, -1);\n</code></pre>\n<hr>\n<p>There is a C way to do it also using <code>memset</code> or various other similar functions.  <code>memset</code> works for each char in your specified buffer though so it will work fine for values like <code>0</code> but may not work depending on how negative numbers are stored for <code>-1</code>.</p>\n<hr>\n<p>You can also use STL to initialize your array by using <a href=\"http://www.cplusplus.com/reference/algorithm/fill_n/\" rel=\"nofollow noreferrer\">fill_n</a>.  For a general purpose action to each element you could use for_each.</p>\n<pre><code>fill_n(directory, 100, -1);\n</code></pre>\n<hr>\n<p>Or if you really want you can go the lame way, you can do a for loop with 100 iterations and doing <code>directory[i] = -1;</code></p>\n</hr></hr></hr></hr>", "OwnerUserId": "3153", "LastEditorUserId": "3153", "LastEditDate": "2010-05-23T11:34:31.937", "Id": "2890603", "Score": "4", "CreationDate": "2010-05-23T03:35:51.170", "LastActivityDate": "2010-05-23T11:34:31.937"}, "41118807": {"ParentId": "2890598", "CommentCount": "0", "Body": "<p>I had the same question and I found how to do, the documentation give the following example :</p>\n<pre><code>std::array&lt;int, 3&gt; a1{ {1, 2, 3} }; // double-braces required in C++11 (not in C++14)\n</code></pre>\n<p>So I just tried :</p>\n<pre><code>std::array&lt;int, 3&gt; a1{ {1} }; // double-braces required in C++11 (not in C++14)\n</code></pre>\n<p>And it works all elements have 1 as value. It does not work with the = operator. It is maybe a C++11 issue.</p>\n", "OwnerUserId": "5669101", "PostTypeId": "2", "Id": "41118807", "Score": "0", "CreationDate": "2016-12-13T10:28:24.997", "LastActivityDate": "2016-12-13T10:28:24.997"}, "2891211": {"ParentId": "2890598", "CommentCount": "2", "Body": "<p>It does work right. Your expectation of the initialiser is incorrect. If you really wish to take this approach, you'll need 100 comma-separated -1s in the initialiser. But then what happens when you increase the size of the array?</p>\n", "OwnerUserId": "78845", "PostTypeId": "2", "Id": "2891211", "Score": "3", "CreationDate": "2010-05-23T09:28:42.153", "LastActivityDate": "2010-05-23T09:28:42.153"}, "27387400": {"ParentId": "2890598", "CommentCount": "0", "Body": "<p>the almighty memset() will do the job for array and std containers in C/C++/C++11/C++14 </p>\n", "OwnerUserId": "4015798", "PostTypeId": "2", "Id": "27387400", "Score": "0", "CreationDate": "2014-12-09T19:40:29.273", "LastActivityDate": "2014-12-09T19:40:29.273"}, "2890598": {"CommentCount": "1", "ViewCount": "26326", "CreationDate": "2010-05-23T03:32:29.047", "LastActivityDate": "2016-12-13T10:28:24.997", "Title": "How to initialize all elements in an array to the same number in C++", "FavoriteCount": "6", "PostTypeId": "1", "Id": "2890598", "Score": "12", "Body": "<p>I'm trying to initialize an int array with everything set at -1.</p>\n<p>I tried the following, but it doesn't work. It only sets the first value at -1.</p>\n<pre><code>int directory[100] = {-1};\n</code></pre>\n<p>Why doesn't it work right?</p>\n", "Tags": "<c++><arrays><g++>", "OwnerUserId": "209512", "AnswerCount": "13"}, "2890739": {"ParentId": "2890598", "CommentCount": "0", "Body": "<p>If you really need arrays, you can use boosts <a href=\"http://www.boost.org/doc/libs/1_43_0/doc/html/array.html\" rel=\"noreferrer\">array</a> class. It's assign member does the job:</p>\n<pre><code>boost::array&lt;int,N&gt; array; // boost arrays are of fixed size!\narray.assign(-1);\n</code></pre>\n", "OwnerUserId": "117820", "PostTypeId": "2", "Id": "2890739", "Score": "5", "CreationDate": "2010-05-23T05:19:16.390", "LastActivityDate": "2010-05-23T05:19:16.390"}, "2890734": {"CommentCount": "3", "CreationDate": "2010-05-23T05:16:07.027", "LastEditorUserId": "-1", "LastActivityDate": "2012-10-28T15:52:33.817", "ParentId": "2890598", "LastEditDate": "2017-05-23T11:55:03.917", "LastEditorDisplayName": "user283145", "PostTypeId": "2", "Id": "2890734", "Score": "5", "Body": "<p>I would suggest using <a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"nofollow noreferrer\"><code>std::array</code></a>. For three reasons:<br>\n 1. array provides <strong>runtime safety against index-out-of-bound</strong> in subscripting (i.e. <code>operator[]</code>) operations,<br>\n 2. array <strong>automatically carries the size</strong> without requiring to pass it separately<br>\n 3. And most importantly, array provides the <code>fill()</code> method that is required for\n    this problem</br></br></br></p>\n<pre><code>#include &lt;array&gt;\n#include &lt;assert.h&gt;\n\ntypedef std::array&lt; int, 100 &gt; DirectoryArray;\n\nvoid test_fill( DirectoryArray const &amp; x, int expected_value ) {\n    for( size_t i = 0; i &lt; x.size(); ++i ) {\n        assert( x[ i ] == expected_value );\n    }\n}\n\nint main() {\n    DirectoryArray directory;\n    directory.fill( -1 );\n    test_fill( directory, -1 );\n    return 0;\n}\n</code></pre>\n<p>Using array <em>requires</em> use of \"-std=c++0x\" for compiling (applies to the above code). </p>\n<p>If that is not available or if that is not an option, then the other options like std::fill() (as suggested by <a href=\"https://stackoverflow.com/users/87234/gman-save-the-unicorns\">GMan</a>) or hand coding the a fill() method may be opted.</p>\n", "OwnerUserId": "278326"}, "2890606": {"ParentId": "2890598", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Can't do what you're trying to do with a raw array (unless you explicitly list out all 100 <code>-1</code>s in the initializer list), you can do it with a <code>vector</code>:</p>\n<pre><code>vector&lt;int&gt; directory(100, -1);\n</code></pre>\n<p>Additionally, you can create the array and set the values to <code>-1</code> using one of the other methods mentioned.</p>\n", "OwnerUserId": "303180", "LastEditorUserId": "303180", "LastEditDate": "2010-05-23T04:26:29.900", "Id": "2890606", "Score": "0", "CreationDate": "2010-05-23T03:36:58.227", "LastActivityDate": "2010-05-23T04:26:29.900"}, "39277623": {"ParentId": "2890598", "CommentCount": "0", "Body": "<p>u simply use for loop as done below:-</p>\n<pre><code>for (int i=0; i&lt;100; i++)\n{ \na[i]= -1;\n}\n</code></pre>\n<p>as a result as u want u can get \nA[100]={-1,-1,-1..........(100 times)}</p>\n", "OwnerUserId": "6784486", "PostTypeId": "2", "Id": "39277623", "Score": "1", "CreationDate": "2016-09-01T17:30:05.693", "LastActivityDate": "2016-09-01T17:30:05.693"}});