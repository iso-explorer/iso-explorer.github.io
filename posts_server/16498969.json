post_cb({"16498976": {"Id": "16498976", "PostTypeId": "2", "Body": "<p>It has a similar syntax, except you remove the identifier from the pointer:</p>\n<pre><code>using FunctionPtr = void (*)();\n</code></pre>\n<p>Here is an <a href=\"http://ideone.com/dX3vQC\">Example</a></p>\n<p>If you want to \"take away the uglyness\", try what Xeo suggested:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nusing FunctionPtr = std::add_pointer&lt;void()&gt;::type;\n</code></pre>\n<p>And here is another <a href=\"http://ideone.com/Fol5OL\">demo</a>.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2014-01-26T02:37:20.340", "Score": "119", "CreationDate": "2013-05-11T15:50:50.503", "ParentId": "16498969", "CommentCount": "8", "LastEditDate": "2014-01-26T02:37:20.340", "OwnerUserId": "701092"}, "23740727": {"Id": "23740727", "PostTypeId": "2", "Body": "<p>The \"ugliness\" can also be taken away if you avoid typedef-ing a pointer:</p>\n<pre><code>void f() {}\nusing Function_t = void();    \nFunction_t* ptr = f;\nptr();\n</code></pre>\n<p><a href=\"http://ideone.com/e1XuYc\">http://ideone.com/e1XuYc</a> </p>\n", "LastActivityDate": "2014-05-19T14:45:26.447", "Score": "25", "CreationDate": "2014-05-19T14:45:26.447", "ParentId": "16498969", "CommentCount": "0", "OwnerUserId": "1044217"}, "bq_ids": {"n4140": {"so_16498969_16504831_0": {"length": 18, "quality": 0.9, "section_id": 3199}}, "n3337": {"so_16498969_16504831_0": {"length": 18, "quality": 0.9, "section_id": 3073}}, "n4659": {"so_16498969_16504831_0": {"length": 18, "quality": 0.9, "section_id": 3960}}}, "16498969": {"ViewCount": "28884", "Body": "<p>I'd like to write this</p>\n<pre><code>typedef void (*FunctionPtr)();\n</code></pre>\n<p>using <code>using</code>. How would I do that?</p>\n", "AcceptedAnswerId": "16498976", "Title": "How do I typedef a function pointer with the C++11 using syntax?", "CreationDate": "2013-05-11T15:50:22.960", "Id": "16498969", "CommentCount": "1", "FavoriteCount": "21", "PostTypeId": "1", "LastEditDate": "2013-05-11T15:51:59.920", "LastEditorUserId": "500104", "LastActivityDate": "2014-05-19T14:45:26.447", "Score": "114", "OwnerUserId": "256138", "Tags": "<c++><c++11><typedef>", "AnswerCount": "4"}, "16594458": {"Id": "16594458", "PostTypeId": "2", "Body": "<p>How about this syntax for clarity? (Note double parenthesis)</p>\n<pre><code>void func();\nusing FunctionPtr = decltype((func));\n</code></pre>\n", "LastActivityDate": "2013-05-16T18:06:12.293", "Score": "6", "CreationDate": "2013-05-16T18:06:12.293", "ParentId": "16498969", "CommentCount": "4", "OwnerUserId": "579584"}, "16504831": {"Id": "16504831", "PostTypeId": "2", "Body": "<p>You want a <code>type-id</code>, which is essentially exactly the same as a declaration except you delete the <code>declarator-id</code>.  The <code>declarator-id</code> is usually an identifier, and the name you are declaring in the equivilant declaration.</p>\n<p>For example:</p>\n<pre><code>int x\n</code></pre>\n<p>The <code>declarator-id</code> is <code>x</code> so just remove it:</p>\n<pre><code>int\n</code></pre>\n<p>Likewise:</p>\n<pre><code>int x[10]\n</code></pre>\n<p>Remove the <code>x</code>:</p>\n<pre><code>int[10]\n</code></pre>\n<p>For your example:</p>\n<pre><code>void (*FunctionPtr)()\n</code></pre>\n<p>Here the <code>declarator-id</code> is <code>FunctionPtr</code>. so just remove it to get the <code>type-id</code>:</p>\n<pre><code>void (*)()\n</code></pre>\n<p>This works because given a <code>type-id</code> you can always determine uniquely where the identifier would go to create a declaration.  From 8.1.1 in the standard:</p>\n<blockquote>\n<p id=\"so_16498969_16504831_0\">It is possible to identify uniquely the location in the [type-id] where the identifier would appear\n  if the construction were a [declaration]. The named type is then the same as the type of the\n  hypothetical identifier.</p>\n</blockquote>\n", "LastEditorUserId": "1131467", "LastActivityDate": "2013-05-12T06:42:40.667", "Score": "9", "CreationDate": "2013-05-12T06:36:44.477", "ParentId": "16498969", "CommentCount": "0", "LastEditDate": "2013-05-12T06:42:40.667", "OwnerUserId": "1131467"}});