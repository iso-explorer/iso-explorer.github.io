post_cb({"26344045": {"CommentCount": "0", "ViewCount": "560", "CreationDate": "2014-10-13T15:52:54.113", "LastActivityDate": "2014-10-13T16:10:12.907", "Title": "Smallest lexicographical value of a string", "AcceptedAnswerId": "26344075", "PostTypeId": "1", "Id": "26344045", "Score": "5", "Body": "<p>When comparing strings with operator &lt;, what is the <em>smallest</em> string?</p>\n<p>To be more specific, what is a string that is smaller (using &lt;) than any other string?</p>\n", "Tags": "<c++><string><c++11>", "OwnerUserId": "3650247", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26344045_26344075_2": {"section_id": 1812, "quality": 0.75, "length": 9}, "so_26344045_26344075_1": {"section_id": 1811, "quality": 0.85, "length": 17}}, "n3337": {"so_26344045_26344075_2": {"section_id": 1806, "quality": 0.75, "length": 9}, "so_26344045_26344075_1": {"section_id": 1805, "quality": 0.85, "length": 17}}, "n4659": {"so_26344045_26344075_2": {"section_id": 1981, "quality": 0.75, "length": 9}, "so_26344045_26344075_1": {"section_id": 1980, "quality": 0.75, "length": 15}}}, "26344075": {"ParentId": "26344045", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The empty string is the \"smallest\" of all strings - that is, it compares less than any non-empty string.</p>\n<p>\u00a721.4.8.4 [string::op&lt;]:</p>\n<blockquote>\n<pre><code>template&lt;class charT, class traits, class Allocator&gt;\nbool operator&lt; (const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,\n                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) noexcept;\n</code></pre>\n<p id=\"so_26344045_26344075_0\">1 <em>Returns</em>: <code>lhs.compare(rhs) &lt; 0</code>.</p>\n</blockquote>\n<p>\u00a721.4.7.9 [string::compare]:</p>\n<blockquote>\n<pre><code>int compare(const basic_string&amp; str) const noexcept;\n</code></pre>\n<p id=\"so_26344045_26344075_1\">1 <em>Effects</em>: Determines the effective length <code>rlen</code> of the strings to\n  compare as the smallest of <code>size()</code> and <code>str.size()</code>. The function\n  then compares the two strings by calling <code>traits::compare(data(),\n  str.data(), rlen)</code>. </p>\n<p id=\"so_26344045_26344075_2\">2 <em>Returns</em>: The nonzero result if the result of the\n  comparison is nonzero. Otherwise, returns a value as indicated in\n  Table 72.</p>\n<p id=\"so_26344045_26344075_3\">Table 72 \u2014 compare() results</p>\n<pre><code> Condition               Return Value\n size() &lt; str.size()     &lt; 0\n size() == str.size()    0\n size() &gt; str.size()     &gt; 0\n</code></pre>\n</blockquote>\n<p>For any comparison between an empty string <code>e</code> and a non-empty string <code>ne</code>, <code>rlen</code> is zero, in which case <code>traits::compare()</code> is specified to return zero<sup>*</sup>. Hence, the result of <code>e.compare(ne)</code> is always less than zero per table 72, and <code>e &lt; ne</code> is always true.</p>\n<hr>\n<p><sup>*</sup> <sub>The <code>compare()</code> function of character traits is specified to return zero if \"for each i in [0,n), <code>X::eq(p[i],q[i])</code> is true\" (\u00a721.2.1 [char.traits.require], Table 62); when <code>n == 0</code>, the range is empty, and the condition is vacuously true.</sub></p>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-10-13T16:10:12.907", "Id": "26344075", "Score": "9", "CreationDate": "2014-10-13T15:54:19.997", "LastActivityDate": "2014-10-13T16:10:12.907"}});