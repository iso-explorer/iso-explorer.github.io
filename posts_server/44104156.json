post_cb({"bq_ids": {"n4140": {"so_44104156_44104354_0": {"length": 45, "quality": 0.9375, "section_id": 6106}}, "n3337": {"so_44104156_44104354_0": {"length": 45, "quality": 0.9375, "section_id": 5872}}, "n4659": {"so_44104156_44104354_0": {"length": 45, "quality": 0.9375, "section_id": 7603}}}, "44104156": {"ViewCount": "56", "Body": "<pre><code>using namespace std;\n\nstruct data{\n\n    int id;\n    char name[50];\n    double fare;\n    bool connecting;\n    int priority;\n\n};\n\nstruct node{\n\n    data info;\n    node* Next;\n    node* Prev;\n\n    node(const int i, const char *n, const double f, const bool c, const int p){\n\n        info.id = i;\n        strcpy(info.name,n);\n        info.fare = f;\n        info.connecting = c;\n        info.priority = p;\n        Next = NULL;\n        Prev = NULL;\n    }\n};\n\nclass AirlineQueue{\n\n    private:\n\n        node* head;\n        node* prev;\n        node* next;\n\n    public:\n\n\n        AirlineQueue(){\n\n            prev = NULL;\n            next = NULL;\n        }\n\n        void addCustomer(node*);\n        node* delCustomer();     \n};\n\nvoid AirlineQueue::addCustomer(node* n){\n\n    if(prev == NULL){\n\n        prev = n;\n        next = n;\n\n    }\n    else {\n             node* tmp = prev;\n\n             if(n-&gt;info.id &gt; tmp-&gt;info.id){\n\n                 prev-&gt;Prev = n;\n                 n-&gt;Next = prev;\n                 prev = n;\n             }\n             else{\n\n                  while (n-&gt;info.id &lt; tmp-&gt;info.id)\n                  {\n                      if(tmp-&gt;Next == NULL)\n                          break;\n                      tmp = tmp-&gt;Next;            \n                  }\n\n                  if(tmp-&gt;Next == NULL &amp;&amp; n-&gt;info.id &lt; tmp-&gt;info.id){                  \n                      next-&gt;Next = n;\n                      n-&gt;Prev = next;\n                      next = n;\n                  }\n                  else{         \n                        tmp-&gt;Prev-&gt;Next = n;\n                        n-&gt;Prev = tmp-&gt;Prev;\n                        n-&gt;Next = tmp;\n                        tmp-&gt;Prev = n;\n                      }\n        }\n    }\n}\n\nnode* AirlineQueue::delCustomer(){\n\n    node* tmp;\n    if(next == NULL)\n        return NULL;\n\n    else if(next-&gt;Prev == NULL){\n\n             node* tmp2 = next;\n             tmp = tmp2;\n             prev = NULL;\n             next = NULL;\n             delete tmp2;\n             return tmp;\n         }\n         else{\n               node* tmp2 = next;\n               tmp = tmp2;\n               next = next-&gt;Prev;\n               next-&gt;Next = NULL;\n               delete tmp2;\n               return tmp;\n             }\n}\n\nvoid printQueue(node* h){\n\n    if(h == NULL){\n\n        std::cout &lt;&lt; \"No customer is in the queue at this moment. \" ;\n\n    }\n    else{\n\n          cout &lt;&lt; \"The customer ID is      \" &lt;&lt; h-&gt;info.id;\n          cout &lt;&lt; \"The customer's name is  \" &lt;&lt; h-&gt;info.name;\n          cout &lt;&lt; \"The ticket fare is      \" &lt;&lt; h-&gt;info.fare;\n          cout &lt;&lt; \"The priority of the customer is \" &lt;&lt; h-&gt;info.priority;\n          cout &lt;&lt; \"Whether the customer is connecting with the flight \" &lt;&lt; h-&gt;info.connecting;\n\n      }\n}\n\n\nint main(){\n\n    AirlineQueue * queue = new AirlineQueue();\n\n    node No1(100, \"Alice\", 1500.5,  1, 1);\n    node No2(101, \"Bill\",  1300.15, 0, 3);\n    node No3(103, \"Claire\",1100.45, 1, 4);\n    node No4(104, \"Dylan\", 1100.45, 0, 5);\n    node No5(105, \"Ellen\", 1100.45, 1, 2);\n    node No6(106, \"Faye\",  1100.45, 0, 7);\n    node No7(107, \"Garry\", 1100.45, 1, 3);\n    node No8(108, \"Hellen\",1100.45, 1, 6);\n    node No9(109, \"Ilene\", 1100.45, 0, 5);\n    node No10(110,\"Jenny\", 1100.45, 0, 7);\n\n    queue-&gt;addCustomer(&amp;No10);\n    queue-&gt;addCustomer(&amp;No3);\n    queue-&gt;addCustomer(&amp;No5);\n    queue-&gt;addCustomer(&amp;No7);\n    queue-&gt;addCustomer(&amp;No1);\n    queue-&gt;addCustomer(&amp;No9);\n    queue-&gt;addCustomer(&amp;No8);\n    queue-&gt;addCustomer(&amp;No6);\n    queue-&gt;addCustomer(&amp;No4);\n    queue-&gt;addCustomer(&amp;No2);\n\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n    printQueue(queue-&gt;delCustomer());\n\n    return 0;\n}\n</code></pre>\n", "Title": "C++ compile error, \"malloc: *** error for object: pointer being freed was not allocated\"", "CreationDate": "2017-05-22T03:20:39.083", "Id": "44104156", "CommentCount": "4", "LastEditDate": "2017-05-25T04:03:32.947", "PostTypeId": "1", "LastEditorUserId": "5377805", "LastActivityDate": "2017-05-25T04:03:32.947", "Tags": "<c++><pointers>", "Score": "-1", "OwnerUserId": "7984353", "ClosedDate": "2017-06-05T00:00:05.323", "AnswerCount": "1"}, "44104354": {"Id": "44104354", "PostTypeId": "2", "Body": "<p>You pass to the <code>addCustomer</code> method pointer to the <code>node</code> object with the automatic storage duration:    </p>\n<pre><code>node No10(110,\"Jenny\", 1100.45, 0, 7);\nqueue-&gt;addCustomer(&amp;No10);\n</code></pre>\n<p>Yet <code>delCustomer</code> uses <code>delete</code> operator. Since memory was not dynamically allocated, attempting to free its is an undefined behavior:</p>\n<blockquote>\n<p id=\"so_44104156_44104354_0\">In the first alternative (delete object), the value of the operand of\n  delete may be a null pointer value, a pointer to a non-array object\n  created by a previous new-expression, or a pointer to a subobject\n  ([intro.object]) representing a base class of such an object (Clause\n  [class.derived]). If not, the behavior is undefined. In the second\n  alternative (delete array), the value of the operand of delete may be\n  a null pointer value or a pointer value that resulted from a previous\n  array new-expression.82 If not, the behavior is undefined.</p>\n</blockquote>\n<p>Best approach would be to avoid direct memory management and use a smart pointers <code>std::unique_ptr</code> or <code>std::shared_ptr</code> instead.</p>\n", "LastActivityDate": "2017-05-22T03:46:48.823", "Score": "1", "CreationDate": "2017-05-22T03:46:48.823", "ParentId": "44104156", "CommentCount": "0", "OwnerUserId": "1609614"}});