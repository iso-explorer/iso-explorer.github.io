post_cb({"42203936": {"ParentId": "42203474", "CommentCount": "0", "CreationDate": "2017-02-13T12:21:32.957", "OwnerUserId": "4706785", "PostTypeId": "2", "Id": "42203936", "Score": "0", "Body": "<p><code>a</code> is an array, not a pointer.   They are not the same things.   However, the name <code>a</code> can be implicitly converted to a pointer (with the value <code>&amp;a[0]</code>).</p>\n<p>For example;</p>\n<pre><code>  int main()\n  {\n       int a[] = {1,2,3,4};\n       int *p = a;              //  p now has the value &amp;a[0]\n</code></pre>\n<p>Now, after this partial code snippet, assuming <code>i</code> is an integral value,  rules of the language amount to;</p>\n<ul>\n<li><code>a[i]</code> is equivalent to <code>*(a + i)</code> which is equivalent to <code>*(&amp;a[0] + i)</code></li>\n<li><code>p[i]</code> is equivalent to <code>*(p + i)</code></li>\n</ul>\n<p>Now, since <code>p</code> is equal to <code>&amp;a[0]</code> this means that <code>a[i]</code>, <code>*(a + i)</code>, <code>p[i]</code>, and <code>*(p + i)</code> are all equivalent.</p>\n<p>When calling <code>print_arrat(a, 4)</code> where <code>a</code> is the name of an array, then <code>a</code> is ALWAYS converted to a pointer.   This means <code>print_arrat()</code> is always passed a pointer.    And this means <code>*(array + i)</code> inside <code>print_arrat()</code> is the same as <code>a[i]</code> in the caller.</p>\n", "LastActivityDate": "2017-02-13T12:21:32.957"}, "42203903": {"ParentId": "42203474", "CommentCount": "0", "CreationDate": "2017-02-13T12:20:00.153", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "42203903", "Score": "0", "Body": "<p>This quote from the C++ Standard will make the point clear (5.2.1 Subscripting) </p>\n<blockquote>\n<p id=\"so_42203474_42203903_0\">1 A post\ufb01x expression followed by an expression in square brackets is\n  a post\ufb01x expression. <strong>One of the expressions shall have the type\n  \u201carray of T\u201d or \u201cpointer to T\u201d</strong> and the other shall have unscoped\n  enumeration or integral type. The result is of type \u201cT.\u201d The type \u201cT\u201d\n  shall be a completely-de\ufb01ned object type.64 The expression E1[E2] is\n  identical (by de\ufb01nition) to *((E1)+(E2)) [Note: see 5.3 and 5.7 for\n  details of * and + and 8.3.4 for details of arrays. \u2014end note], except\n  that in the case of an array operand, the result is an lvalue if that\n  operand is an lvalue and an xvalue otherwise.</p>\n</blockquote>\n", "LastActivityDate": "2017-02-13T12:20:00.153"}, "42203503": {"ParentId": "42203474", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2017-02-13T11:59:03.943", "Score": "0", "LastEditorUserId": "817643", "LastEditDate": "2017-02-13T12:24:31.900", "Id": "42203503", "OwnerUserId": "817643", "Body": "<p>Because in effect, while the subscript operator is defined on arrays, what happens is that they decay into pointers for the arithmetic to occur.</p>\n<p>Meaning if <code>a</code> is an array, semantically what happens is:</p>\n<p><code>int b = a[i]; =&gt; int *__tmp = a; int b = *(__tmp + i);</code></p>\n<p>However, once operator overloading comes into play, then it is no longer true that <code>a[i] == *(a + i)</code>. The right hand side may not even be defined.</p>\n", "LastActivityDate": "2017-02-13T12:24:31.900"}, "42205707": {"ParentId": "42203474", "CommentCount": "0", "CreationDate": "2017-02-13T13:52:40.803", "OwnerUserId": "2079303", "PostTypeId": "2", "Id": "42205707", "Score": "0", "Body": "<blockquote>\n<p id=\"so_42203474_42205707_0\">What I can't understand is: since I pass a pointer \"a\" into function, why can I use \"a\" in the format of a[i] like the second line of \"cout\"?</p>\n</blockquote>\n<p>Because subscript operator <code>a[i]</code> is defined for arrays and it is equivalent to <code>*(a+i)</code> by definition.</p>\n<p>In the line with <code>cout</code>, you use <code>array[i]</code> however, where <code>array</code> is a pointer. This is also allowed, because the subscript operator is also defined for pointers.</p>\n<blockquote>\n<p id=\"so_42203474_42205707_1\">Isn't \"a\" a pointer?</p>\n</blockquote>\n<p>No. <code>a</code> is an array. <code>array</code> is a pointer.</p>\n", "LastActivityDate": "2017-02-13T13:52:40.803"}, "42203474": {"CommentCount": "6", "ViewCount": "95", "PostTypeId": "1", "LastEditorUserId": "7219646", "CreationDate": "2017-02-13T11:57:22.170", "LastActivityDate": "2017-02-13T14:16:22.290", "Title": "passing pointers (the name of array) into function in C/C++", "AcceptedAnswerId": "42203936", "LastEditDate": "2017-02-13T14:16:22.290", "Id": "42203474", "Score": "0", "Body": "<p>Lets say we create an array like:</p>\n<pre><code>int a[4]={1,2,3,4};\n</code></pre>\n<p>Now <code>a</code> is the name of this array and also the pointer points to the first element <code>a[0]</code>. So when I want to call the elements in the array, I can use <code>a[ i ]</code> or <code>*(a+i)</code>.</p>\n<p>Now I have a function:</p>\n<pre><code>void print_array(int* array, int arraySize){\n    for(int i=0; i&lt;arraySize; i++){\n       cout&lt;&lt;*(array+i)&lt;&lt;endl;\n       cout&lt;&lt;array[i]&lt;&lt;endl;\n    }\n}\n</code></pre>\n<p>When I pass <code>a[4]={1,2,3,4}</code> into this function using <code>print_array(a,4)</code>, for the first line of <code>cout</code>, I fully understand because I use <code>*(a+i)</code> method to access data and <code>a</code> is the pointer I passed.</p>\n<p>What I can't understand is: since I pass a pointer <code>a</code> into function, why can I use <code>a</code> in the format of <code>a[i]</code> like the second line of <code>cout</code>? Isn't <code>a</code> a pointer? If <code>a</code> is a pointer why does <code>a[i]</code> work?</p>\n<p>This has confused me for a whole day. Any help will be much appreciated!</p>\n", "Tags": "<c++><arrays><pointers>", "OwnerUserId": "7557374", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_42203474_42203903_0": {"section_id": 5986, "quality": 0.7692307692307693, "length": 40}}, "n3337": {"so_42203474_42203903_0": {"section_id": 5754, "quality": 0.5576923076923077, "length": 29}}, "n4659": {"so_42203474_42203903_0": {"section_id": 7486, "quality": 0.7307692307692307, "length": 38}}}});