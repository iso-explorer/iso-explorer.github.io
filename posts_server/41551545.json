post_cb({"41551678": {"ParentId": "41551545", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the n4296 draft:</p>\n<p><em>8.4.2.1 Explicitly-defaulted functions:</em></p>\n<blockquote>\n<p id=\"so_41551545_41551678_0\">A function that is explicitly defaulted shall</p>\n<p id=\"so_41551545_41551678_1\">(1.1) \u2014 be a special member function,</p>\n<p id=\"so_41551545_41551678_2\">(1.2) \u2014 <strong>have the same declared function type</strong> (except for possibly\n  differing ref-qualifiers and except that in the case of a copy\n  constructor or copy assignment operator, the parameter type may be\n  \u201creference to non-const T\u201d, where T is the name of the member\n  function\u2019s class) <strong>as if it had been implicitly declared</strong>, and</p>\n<p id=\"so_41551545_41551678_3\">(1.3) \u2014 not have default arguments.</p>\n</blockquote>\n<p><em>12.8.10 Copying and moving class objects:</em></p>\n<blockquote>\n<p id=\"so_41551545_41551678_4\">The implicitly-declared move constructor for class X will have the form\n  X::X(X&amp;&amp;)</p>\n</blockquote>\n<hr>\n<p>As a consequence the line:</p>\n<pre><code>T(const T&amp;&amp;) = default;\n</code></pre>\n<p>is not valid because the implicitly-declared move constructor has the form of:</p>\n<pre><code>T(T&amp;&amp;)\n</code></pre>\n</hr>", "OwnerUserId": "5507349", "LastEditorUserId": "5507349", "LastEditDate": "2017-01-09T18:57:01.820", "Id": "41551678", "Score": "2", "CreationDate": "2017-01-09T15:47:11.690", "LastActivityDate": "2017-01-09T18:57:01.820"}, "41551545": {"CommentCount": "6", "AcceptedAnswerId": "41551678", "PostTypeId": "1", "LastEditorUserId": "5507349", "CreationDate": "2017-01-09T15:40:00.267", "LastActivityDate": "2017-01-09T18:57:39.400", "LastEditDate": "2017-01-09T18:57:39.400", "ViewCount": "91", "FavoriteCount": "2", "Title": "Default move constructor taking a const parameter", "Id": "41551545", "Score": "4", "Body": "<p>When defining a class, is the following valid?</p>\n<pre><code>T(const T&amp;&amp;) = default;\n</code></pre>\n<p>I was reading about move constructors <a href=\"http://en.cppreference.com/w/cpp/language/move_constructor\" rel=\"nofollow noreferrer\">here</a> and it explains how the default may still be implicitly declared:</p>\n<blockquote>\n<p id=\"so_41551545_41551545_0\">A class can have multiple move constructors, e.g. both <code>T::T(const T&amp;&amp;)</code>\n  and <code>T::T(T&amp;&amp;)</code>. If some user-defined move constructors are present, the\n  user may still force the generation of the implicitly declared move\n  constructor with the keyword default.</p>\n</blockquote>\n<p>At the bottom of the page it mentions defect report CWG 2171:</p>\n<blockquote>\n<p id=\"so_41551545_41551545_1\">CWG 2171  C++14<br>\n<code>X(const X&amp;&amp;) = default</code> was non-trivial, made trivial.</br></p>\n</blockquote>\n<p>Maybe the wiki entry just has a mistake and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2171\" rel=\"nofollow noreferrer\">CWG 2171</a> is only referring to a copy constructor, not a move constructor?</p>\n", "Tags": "<c++><c++11><constructor><language-lawyer>", "OwnerUserId": "1460794", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41551545_41551678_2": {"section_id": 3270, "quality": 1.0, "length": 30}, "so_41551545_41551678_4": {"section_id": 459, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_41551545_41551678_2": {"section_id": 3142, "quality": 1.0, "length": 30}, "so_41551545_41551678_4": {"section_id": 450, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_41551545_41551678_2": {"section_id": 4028, "quality": 1.0, "length": 30}, "so_41551545_41551678_4": {"section_id": 482, "quality": 0.7777777777777778, "length": 7}}}});