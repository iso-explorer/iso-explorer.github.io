post_cb({"bq_ids": {"n4140": {"so_18423201_18423229_0": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_18423201_18423229_0": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_18423201_18423229_0": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "18423201": {"ViewCount": "1404", "Body": "<p>Out of curiosity, I'm wondering what the real underlying type of a C++ string literal is.</p>\n<p>Depending on what I observe, I get different results.</p>\n<p>A typeid test like the following:</p>\n<pre><code>std::cout &lt;&lt; typeid(\"test\").name() &lt;&lt; std::endl;\n</code></pre>\n<p>shows me <code>char const[5]</code>.</p>\n<p>Trying to assign a string literal to an incompatible type like so (to see the given error):</p>\n<pre><code>wchar_t* s = \"hello\";\n</code></pre>\n<p>I get <code>a value of type \"const char *\" cannot be used to initialize an entity of type \"wchar_t *\"</code> from VS12's IntelliSense.</p>\n<p>But I don't see how it could be <code>const char *</code> as the following line is accepted by VS12:</p>\n<pre><code>char* s = \"Hello\";\n</code></pre>\n<p>I have read that this was allowed in pre-C++11 standards as it was for retro-compatibility with C, although modification of <code>s</code> would result in Undefined Behavior. I assume that this is simply VS12 having not yet implemented all of the C++11 standard and that this line would normally result in an error.</p>\n<p>Reading the C99 standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">from here</a>, 6.4.5.5) suggests that it should be an array:</p>\n<blockquote>\n<p id=\"so_18423201_18423201_0\">The multibyte character\n  sequence is then used to initialize <strong>an array</strong> of static storage duration and length just\n  suf\ufb01cient to contain the sequence.</p>\n</blockquote>\n<p>So, <strong>what is the type underneath a C++ string literal?</strong></p>\n<p>Thank you very much for your precious time.</p>\n", "AcceptedAnswerId": "18423227", "Title": "Type of a C++ string literal", "CreationDate": "2013-08-24T21:15:43.527", "Id": "18423201", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-08-24T21:28:45.240", "LastEditorUserId": "1968", "LastActivityDate": "2013-08-25T01:39:59.280", "Score": "5", "OwnerUserId": "395386", "Tags": "<c++><string><visual-studio-2012><c++11><types>", "AnswerCount": "3"}, "18423229": {"Id": "18423229", "PostTypeId": "2", "Body": "<p>The type of a string literal is <code>char const[N]</code> where <code>N</code> is the number of characters including the terminating null character. Although this type does <strong>not</strong> convert to <code>char*</code>, the C++ standard includes a clause allowing assignments of string literal to <code>char*</code>. This clause was added to support compatibility especially for C code which didn't have <code>const</code> back then.</p>\n<p>The relevant clause for the type in the standard is 2.14.5 [lex.string] paragraph 8:</p>\n<blockquote>\n<p id=\"so_18423201_18423229_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n", "LastActivityDate": "2013-08-24T21:19:17.010", "Score": "5", "CreationDate": "2013-08-24T21:19:17.010", "ParentId": "18423201", "CommentCount": "2", "OwnerUserId": "1120273"}, "18423227": {"Id": "18423227", "PostTypeId": "2", "Body": "<p>The type of a string literal is indeed <code>const char[SIZE]</code> where <code>SIZE</code> is the length of the string plus the null terminating character.</p>\n<p>The fact that you're sometimes seeing <code>const char*</code> is because of the usual array-to-pointer decay.</p>\n<blockquote>\n<p id=\"so_18423201_18423227_0\">But I don't see how it could be <code>const char *</code> as the following line is accepted by VS12:\n  <code>char* s = \"Hello\";</code></p>\n</blockquote>\n<p>This was correct behaviour in C++03 (as an exception to the usual const-correctness rules) but it has been deprecated since. A C++11 compliant compiler should not accept that code.</p>\n", "LastEditorUserId": "2070725", "LastActivityDate": "2013-08-24T21:29:00.447", "Score": "8", "CreationDate": "2013-08-24T21:18:56.810", "ParentId": "18423201", "CommentCount": "2", "LastEditDate": "2013-08-24T21:29:00.447", "OwnerUserId": "2070725"}, "18423243": {"Id": "18423243", "PostTypeId": "2", "Body": "<p>First off, the type of a C++ string literal is an array of <em>n</em> <code>const char</code>.  Secondly, if you want to initialise a wchar_t with a string literal you have to code:</p>\n<pre><code>wchar_t* s = L\"hello\"\n</code></pre>\n", "LastEditorUserId": "1312406", "LastActivityDate": "2013-08-25T01:39:59.280", "Score": "-1", "CreationDate": "2013-08-24T21:21:27.817", "ParentId": "18423201", "CommentCount": "7", "LastEditDate": "2013-08-25T01:39:59.280", "OwnerUserId": "1312406"}});