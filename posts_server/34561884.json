post_cb({"bq_ids": {"n4140": {"so_34561884_34675596_2": {"length": 14, "quality": 1.0, "section_id": 6185}, "so_34561884_34601508_0": {"length": 14, "quality": 1.0, "section_id": 6185}, "so_34561884_34675596_4": {"length": 7, "quality": 1.0, "section_id": 6185}, "so_34561884_34675596_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 62}, "so_34561884_34675596_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 87}}, "n3337": {"so_34561884_34675596_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 57}, "so_34561884_34675596_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 82}, "so_34561884_34675596_4": {"length": 7, "quality": 1.0, "section_id": 5946}}, "n4659": {"so_34561884_34675596_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}, "so_34561884_34601508_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}, "so_34561884_34675596_4": {"length": 7, "quality": 1.0, "section_id": 7687}, "so_34561884_34675596_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 90}, "so_34561884_34675596_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 64}}}, "34675596": {"Id": "34675596", "PostTypeId": "2", "Body": "<p>I'd say that clang is right:</p>\n<p>From the Standard:</p>\n<p>[temp.param] 14.1 #9</p>\n<blockquote>\n<p id=\"so_34561884_34675596_0\">9 A default template-argument is a template-argument (14.3) specified after = in a template-parameter. [...]</p>\n</blockquote>\n<p>And [temp.arg.nontype] 14.3.2</p>\n<blockquote>\n<p id=\"so_34561884_34675596_1\">1 A template-argument for a non-type template-parameter shall be a converted constant expression (5.20) of the type of the template-parameter.</p>\n</blockquote>\n<p>And [expr.const] 5.20</p>\n<blockquote>\n<p id=\"so_34561884_34675596_2\">2 A conditional-expression e is a core constant expression unless the evaluation of e, following the rules of the abstract machine (1.9), would evaluate one of the following expressions:</p>\n<p id=\"so_34561884_34675596_3\">[...]</p>\n<p id=\"so_34561884_34675596_4\">(2.3) \u2014 an invocation of an undefined constexpr function or an undefined constexpr constructor;</p>\n</blockquote>\n<p>Since <code>flag()</code> is declared but not defined, it is not a constant expression and 14.3.2 is violated.</p>\n", "LastActivityDate": "2016-01-08T11:07:50.657", "Score": "4", "CreationDate": "2016-01-08T11:07:50.657", "ParentId": "34561884", "CommentCount": "0", "OwnerUserId": "2173029"}, "34561884": {"ViewCount": "740", "Body": "<p>The following program compiles with GCC 5.2, but not with clang 3.6:</p>\n<pre><code>constexpr bool flag();\n\ntemplate &lt;bool b = flag()&gt;\nconstexpr bool test() \n{ \n    return b;\n}\n\nint main() \n{\n}\n</code></pre>\n<p>The error message I get with clang is:</p>\n<pre><code>main.cpp:3:20: error: non-type template argument is not a constant expression\ntemplate &lt;bool b = flag()&gt;\n                   ^~~~~~\nmain.cpp:3:20: note: undefined function 'flag' cannot be used in a constant expression\nmain.cpp:1:16: note: declared here\nconstexpr bool flag();\n               ^\nmain.cpp:4:16: error: no return statement in constexpr function\nconstexpr bool test() \n               ^\n</code></pre>\n<p>My question is: Who's right? Or, in other words: Is the program ill-formed?</p>\n", "AcceptedAnswerId": "34675596", "Title": "Is this error message correct: non-type template argument is not a constant expression", "CreationDate": "2016-01-02T02:02:33.630", "Id": "34561884", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-01-02T11:55:52.983", "LastEditorUserId": "1335865", "LastActivityDate": "2016-01-08T11:07:50.657", "Score": "15", "OwnerUserId": "1335865", "Tags": "<c++><templates><c++11><language-lawyer><constexpr>", "AnswerCount": "2"}, "34601508": {"Id": "34601508", "PostTypeId": "2", "Body": "<p>According to ISO C++14 Standard 5.19.2:</p>\n<blockquote>\n<p id=\"so_34561884_34601508_0\">A conditional-expression e is a core constant expression unless the\n  evaluation of e, following the rules of the abstract machine (1.9),\n  would evaluate one of the following expressions:</p>\n<ul>\n<li>this (5.1.1), except in a constexpr function or a constexpr constructor that is being evaluated as part of e;</li>\n<li>an invocation of a function other than a constexpr constructor for a literal class, a constexpr function, or an implicit invocation\n  of a trivial destructor (12.4) [ Note: Overload resolution (13.3) is applied as usual \u2014 end note ];</li>\n<li><strong>an invocation of an undefined constexpr function</strong> or an undefined constexpr constructor;</li>\n<li>(...)\n  Blockquote</li>\n</ul>\n</blockquote>\n<p>The result of any constexpr function call made prior to it definition is not a constant expression.</p>\n<p>Finally it seems that it is GCC bug.</p>\n", "LastActivityDate": "2016-01-04T23:05:39.703", "Score": "4", "CreationDate": "2016-01-04T23:05:39.703", "ParentId": "34561884", "CommentCount": "5", "OwnerUserId": "2488425"}});