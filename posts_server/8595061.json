post_cb({"8595523": {"ParentId": "8595061", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2011-12-21T19:55:30.287", "Score": "20", "LastEditorUserId": "204847", "LastEditDate": "2011-12-22T11:08:01.393", "Id": "8595523", "OwnerUserId": "204847", "Body": "<p>At the point at which you capture <code>g</code> by reference, it has been declared, so the name is available for use:</p>\n<blockquote>\n<p id=\"so_8595061_8595523_0\">3.3.2/1 The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its initializer</p>\n</blockquote>\n<p>You are allowed to use objects in limited ways before they are initialised - basically, anything that doesn't depend on the value is OK:</p>\n<blockquote>\n<p id=\"so_8595061_8595523_1\">3.8/6 before the lifetime of an object has started but after the storage which the object will occupy\n  has been allocated [...] any glvalue that refers to the original object may be used but only in limited\n  ways. [...] using the properties of the glvalue that do not depend on its value is well-defined.</p>\n</blockquote>\n<p>So by my understanding, what you are doing is well-defined.</p>\n<p>(Although, being ultrapedantic, I don't think it's specified when the storage for an automatic object is allocated, and 8.3.2/5 says that \"a reference shall be initialized to refer to a valid object\" without defining \"valid\", so there's scope to argue that it's not well-defined).</p>\n", "LastActivityDate": "2011-12-22T11:08:01.393"}, "8595061": {"CommentCount": "20", "AcceptedAnswerId": "8595523", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2011-12-21T19:14:27.093", "LastActivityDate": "2011-12-22T11:08:01.393", "LastEditDate": "2011-12-21T19:19:27.363", "ViewCount": "1034", "FavoriteCount": "10", "Title": "Is it valid for a lambda to, essentially, close over itself?", "Id": "8595061", "Score": "42", "Body": "<p>Is this lambda recursion valid?</p>\n<pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nint main() {\n   std::function&lt;int(int)&gt; g = [&amp;g](int k) {\n       return (k ? k * g(k-1) : 1);\n   };\n\n   std::cout &lt;&lt; g(10); // 3628800\n}\n</code></pre>\n<p>It <a href=\"http://www.ideone.com/iFCKf\">appears to compile and run ok</a>, but I'm nervous about closing over <code>g</code> in the same statement that I initialise it. Strict validity on a scale of 1-10...?</p>\n", "Tags": "<c++><lambda><c++11>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_8595061_8595523_1": {"section_id": 7194, "quality": 0.9642857142857143, "length": 27}, "so_8595061_8595523_0": {"section_id": 7049, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_8595061_8595523_1": {"section_id": 6938, "quality": 0.9642857142857143, "length": 27}, "so_8595061_8595523_0": {"section_id": 6794, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_8595061_8595523_1": {"section_id": 8703, "quality": 0.9642857142857143, "length": 27}, "so_8595061_8595523_0": {"section_id": 8546, "quality": 0.7857142857142857, "length": 11}}}});