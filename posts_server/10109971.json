post_cb({"10110104": {"PostTypeId": "2", "ParentId": "10109971", "Body": "<p>Since exceptions are copied, you should add a copy constructor to your test_exception object.  The exception thrown <em>is not</em> the same one as the one received by the catch.</p>\n", "CreationDate": "2012-04-11T16:31:43.100", "Score": "0", "CommentCount": "0", "Id": "10110104", "OwnerUserId": "79797", "LastActivityDate": "2012-04-11T16:31:43.100"}, "10110028": {"PostTypeId": "2", "ParentId": "10109971", "Body": "<p>Exceptions are copied (or in C++11, possibly moved) when they're thrown. Quoting C++11, \u00a715.1/3:</p>\n<blockquote>\n<p id=\"so_10109971_10110028_0\">A <em>throw-expression</em> initializes a temporary object, called the <em>exception object</em>, the type of which is determined by removing any top-level <em>cv-qualifiers</em> from the static type of the operand of throw and adjusting the type from \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d to \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>\u201d, respectively. The temporary is an lvalue and is used to initialize the variable named in the matching <em>handler</em>. If the type of the exception object would be an incomplete type or a pointer to an incomplete type other than (possibly cv-qualified) <code>void</code> the program is ill-formed. Except for these restrictions and the restrictions on type matching mentioned in 15.3, the operand of <code>throw</code> is treated exactly as a function argument in a call or the operand of a return statement.</p>\n</blockquote>\n<p>Because <code>test_exception</code> violates the <a href=\"https://stackoverflow.com/q/4172722/636019\">rule-of-three</a> (or for C++11, the <a href=\"https://stackoverflow.com/q/4782757/636019\">rule-of-five</a>), <code>test_exception::_msg</code> has already been deleted by the time you enter your <code>catch</code> block.</p>\n", "CreationDate": "2012-04-11T16:27:01.727", "Score": "3", "LastEditDate": "2017-05-23T12:20:15.673", "CommentCount": "1", "Id": "10110028", "OwnerUserId": "636019", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-11T16:32:06.750"}, "10109971": {"AcceptedAnswerId": "10110028", "OwnerUserId": "817339", "LastActivityDate": "2012-04-11T16:32:06.750", "CreationDate": "2012-04-11T16:24:24.403", "Score": "1", "CommentCount": "0", "Title": "Content of char pointer seems to get deleted while being passed to the catch block", "AnswerCount": "2", "PostTypeId": "1", "Tags": "<c++><visual-c++><exception><exception-handling>", "Body": "<p>I encountered a very strange (at least to me) behaviour of a exception class I have thrown. What I do is that I allocate memory via <code>new</code> for a string in the constructor of the exception class and fill it with characters. So far everything is fine. When debugging the code I can see in Visual Studio that the pointer actually has the right content.</p>\n<p>Now the weird thing happens. My next breakpoint is in the catch - block to which the exception is passed after being constructed and here I can see in the debugger that the content of the string contained in the exception object is severly corrupted. Even though the address didn't change at all! So it seems like the content of the string gets destructed. </p>\n<p>So I put a breakpoint into the exceptions destructor and really, it is being called before the catch - block is entered. This confuses me a lot since I learned to pass exceptions by reference to the catch block. But what good is that if the destructor gets called before I can access the dynamically created data... </p>\n<p>I constructed a minimal example that shows the situation I am in:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nclass test_exception {\npublic:\n    test_exception();\n    ~test_exception() {\n        delete[] _msg;\n    }\n\n    // Getter Functions\n    char* errorMessage() const {\n        return _msg; \n    }\nprivate:\n    char* _msg;\n};\n\ntest_exception::test_exception()\n{\n    _msg = new char[22];\n    strcpy(_msg, \"This is a test string\");\n}\n\nint main(int argc, char* argv[])\n{\n    try {\n        throw test_exception();\n    } catch (const test_exception&amp; err) {\n        std::cout &lt;&lt; err.errorMessage() &lt;&lt; std::endl;\n    }\n\n    std::cin.get();\n\n    return 0;\n}\n</code></pre>\n<p>It would be create if someone could tell me if it is weird MS behaviour or if I misunderstood how try - catch - blocks should be used.</p>\n", "Id": "10109971", "ViewCount": "210"}, "bq_ids": {"n3337": {"so_10109971_10110028_0": {"quality": 0.9393939393939394, "length": 62, "section_id": 3206}}}});