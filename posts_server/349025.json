post_cb({"349032": {"ParentId": "349025", "CommentCount": "0", "Body": "<p>Well ... Yes. They sort of have to be; the information that makes up the sequence of characters in each string has to be somewhere. If they were to be allocated dynamically and then initialized, where would the information used to to the initialization reside? Thus, it's more efficient to simply make the strings static, so that they are always available and valid once the program is done loading.</p>\n", "OwnerUserId": "28169", "Id": "349032", "PostTypeId": "2", "OwnerDisplayName": "unwind", "Score": "3", "CreationDate": "2008-12-08T09:51:58.123", "LastActivityDate": "2008-12-08T09:51:58.123"}, "349031": {"CommentCount": "0", "CreationDate": "2008-12-08T09:51:53.550", "LastEditorUserId": "11828", "LastActivityDate": "2008-12-08T09:57:08.813", "ParentId": "349025", "PostTypeId": "2", "LastEditorDisplayName": "James Hopkin", "LastEditDate": "2008-12-08T09:57:08.813", "Id": "349031", "Score": "37", "Body": "<p>Yes, string literals are valid for the entire duration of the program, even during the destruction of static objects.</p>\n<p>2.13.4/1 in the Standard says</p>\n<blockquote>\n<p id=\"so_349025_349031_0\">An ordinary string literal has type \"array of n const char\" and static storage duration.</p>\n</blockquote>\n<p>The Standard says of 'static storage duration' in 3.7.1/1:</p>\n<blockquote>\n<p id=\"so_349025_349031_1\">The storage for these objects shall last for the duration of the program.</p>\n</blockquote>\n", "OwnerUserId": "11828", "OwnerDisplayName": "James Hopkin"}, "349045": {"ParentId": "349025", "CommentCount": "1", "Body": "<p>String literals are stored in read-only segments of memory </p>\n", "OwnerUserId": "29515", "Id": "349045", "PostTypeId": "2", "OwnerDisplayName": "Zenzi", "Score": "-1", "CreationDate": "2008-12-08T09:59:06.483", "LastActivityDate": "2008-12-08T09:59:06.483"}, "349025": {"CommentCount": "0", "AcceptedAnswerId": "349030", "PostTypeId": "1", "LastEditorUserId": "2095", "LastEditorDisplayName": "Carl Seleborg", "CreationDate": "2008-12-08T09:47:29.130", "LastActivityDate": "2011-09-15T04:33:32.943", "AnswerCount": "4", "LastEditDate": "2008-12-08T10:07:50.960", "ViewCount": "11483", "FavoriteCount": "21", "Title": "Is a string literal in c++ created in static memory?", "Id": "349025", "Score": "33", "Body": "<p>Is a string literal in c++ created in static memory and destroyed only when the program exits?</p>\n", "Tags": "<c++><string><char>", "OwnerUserId": "22076", "OwnerDisplayName": "yesraaj"}, "bq_ids": {"n4140": {"so_349025_349031_0": {"section_id": 5356, "quality": 0.9, "length": 9}}, "n3337": {"so_349025_349031_0": {"section_id": 5153, "quality": 0.9, "length": 9}}, "n4659": {"so_349025_349031_0": {"section_id": 6781, "quality": 0.9, "length": 9}}}, "349030": {"CommentCount": "2", "CreationDate": "2008-12-08T09:51:46.657", "LastEditorUserId": "14860", "LastActivityDate": "2011-09-15T04:33:32.943", "ParentId": "349025", "PostTypeId": "2", "LastEditorDisplayName": "Pax", "LastEditDate": "2011-09-15T04:33:32.943", "Id": "349030", "Score": "34", "Body": "<p>Where it's created is an implementation decision by the compiler writer, really. Most likely, string literals will be stored in read-only segments of memory since they never change.</p>\n<p>In the old compiler days, you used to have static data like these literals and global but changeable data.  These were stored in the TEXT (code) segment and DATA (initialised data) segment.</p>\n<p>Even when you have code like <code>char *x = \"hello\";</code>, the <code>hello</code> string itself is stored in read-only memory while the variable <code>x</code> is on the stack (or elsewhere in writeable memory if it's a global). <code>x</code> just gets set to the address of the <code>hello</code> string. This allows all sorts of tricky things like string folding, so that \"invalid option\" (0x1000) and \"valid option\" (0x1002) can use the same memory block as follows:</p>\n<pre><code>+-&gt; plus:0   1   2   3   4   5   6   7   8   9   A   B   C   D   E\n|      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+\n0x1000 | i | n | v | a | l | i | d |   | o | p | t | i | o | n | \\0 |\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+----+\n</code></pre>\n<p>Keep in mind I don't mean read-only memory in terms of ROM, just memory that's dedicated to storing unchangeable stuff (which may be marked really read-only by the OS).</p>\n<p>They're also never destroyed until <code>main()</code> exits.</p>\n", "OwnerUserId": "14860", "OwnerDisplayName": "Pax"}});