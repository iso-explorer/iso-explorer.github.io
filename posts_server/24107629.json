post_cb({"24107763": {"ParentId": "24107629", "CommentCount": "1", "CreationDate": "2014-06-08T15:33:44.167", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "24107763", "Score": "1", "Body": "<p>If a <em>conversion-function-id</em> is explicitly used, as in the example's expression <code>c-&gt;operator Z()</code>, the lookup rules are the same as for any other class member.  The one trick there is the definition from section 3 paragraph 8:</p>\n<blockquote>\n<p id=\"so_24107629_24107763_0\">Two names are <em>the same</em> if</p>\n<ul>\n<li><p id=\"so_24107629_24107763_1\">they are <em>identifiers</em> composed of the same character sequence, or</p></li>\n<li><p id=\"so_24107629_24107763_2\">they are <em>operator-function-ids</em> formed with the same operator, or</p></li>\n<li><p id=\"so_24107629_24107763_3\">they are <em>conversion-function-ids</em> formed with the same type, or</p></li>\n<li><p id=\"so_24107629_24107763_4\">they are <em>template-ids</em> that refer to the same class or function, or</p></li>\n<li><p id=\"so_24107629_24107763_5\">they are the names of literal operators formed with the same literal suffix identifier.</p></li>\n</ul>\n</blockquote>\n<p>The third option here is why the name <code>operator Z</code> used in the expression finds the class member <code>C::operator Y()</code>.  It is a member in the accessed class with the same name as the expression's <em>conversion-function-id</em>.</p>\n", "LastActivityDate": "2014-06-08T15:33:44.167"}, "24107629": {"CommentCount": "0", "ViewCount": "51", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-08T15:23:17.290", "LastActivityDate": "2014-06-08T15:33:44.167", "PostTypeId": "1", "AcceptedAnswerId": "24107763", "Title": "Class member convertion function-id", "Id": "24107629", "Score": "0", "Body": "<p>I'm looking for a quote from the Stadard described the following behavior:</p>\n<p>The following rule is for <code>conversion-type-id</code> lookup (3.4.6/7):</p>\n<blockquote>\n<p id=\"so_24107629_24107629_0\">If the id-expression is a conversion-function-id, its\n  conversion-type-id is first looked up in the class of the object\n  expression and the name, if found, is used. Otherwise it is looked up\n  in the context of the entire postfix-expression.</p>\n</blockquote>\n<p>Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass J{ public: static const char a = 'j'; };\n\ntypedef J Y;\n\nclass C\n{\npublic:\n    operator Y(){ std::cout &lt;&lt; Y::a; }\n};\n\nint main()\n{ \n    typedef Y Z;\n    C *c= new C(); \n    c -&gt; operator Z(); //C::operator Y is invoked\n}\n</code></pre>\n<p>I don't understand that. The quote above doesn't describe that behavior. It describes the lookup for the <code>conversion-type-id</code> only, but it doesn't describe the <code>conversion-function-id</code> itself.</p>\n<p><strong>What is the lookup rule for</strong> <code>conversion-function-id</code>?</p>\n", "Tags": "<c++><language-lawyer><postfix-operator>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24107629_24107763_4": {"section_id": 7031, "quality": 1.0, "length": 6}, "so_24107629_24107763_5": {"section_id": 7031, "quality": 1.0, "length": 9}, "so_24107629_24107763_2": {"section_id": 7031, "quality": 1.0, "length": 5}, "so_24107629_24107629_0": {"section_id": 7132, "quality": 1.0, "length": 16}, "so_24107629_24107763_3": {"section_id": 7031, "quality": 1.0, "length": 5}, "so_24107629_24107763_1": {"section_id": 7031, "quality": 1.0, "length": 6}}, "n3337": {"so_24107629_24107763_4": {"section_id": 6777, "quality": 1.0, "length": 6}, "so_24107629_24107763_5": {"section_id": 6777, "quality": 1.0, "length": 9}, "so_24107629_24107763_2": {"section_id": 6777, "quality": 1.0, "length": 5}, "so_24107629_24107629_0": {"section_id": 6876, "quality": 1.0, "length": 16}, "so_24107629_24107763_3": {"section_id": 6777, "quality": 1.0, "length": 5}, "so_24107629_24107763_1": {"section_id": 6777, "quality": 1.0, "length": 6}}, "n4659": {"so_24107629_24107763_4": {"section_id": 8528, "quality": 1.0, "length": 6}, "so_24107629_24107763_5": {"section_id": 8528, "quality": 1.0, "length": 9}, "so_24107629_24107763_2": {"section_id": 8528, "quality": 1.0, "length": 5}, "so_24107629_24107629_0": {"section_id": 8633, "quality": 1.0, "length": 16}, "so_24107629_24107763_3": {"section_id": 8528, "quality": 1.0, "length": 5}, "so_24107629_24107763_1": {"section_id": 8528, "quality": 1.0, "length": 6}}}});