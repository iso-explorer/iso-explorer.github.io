post_cb({"15912543": {"Id": "15912543", "PostTypeId": "2", "Body": "<p>Generally, a return from <code>main</code> is not the end of your program, nor is entry to <code>main</code> the start.</p>\n<p>Usually, the linker that creates the final executable for your program marks some location, perhaps named <code>start</code>, as the place where execution is to begin. When the operating system loads your program and starts executing it, it starts execution at this place. There is code there that sets up an environment: Creates a stack, sets stream states, et cetera. Then this code calls <code>main</code>.</p>\n<p>When <code>main</code> returns, it returns to this special code. That code then performs various clean-up work that is required at the end of a C or C++ program, as described in <a href=\"https://stackoverflow.com/a/15911747/298225\">this answer</a>.</p>\n<p>If a program is terminated abruptly, this final code might not be executed.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-04-09T21:06:41.003", "Score": "2", "CreationDate": "2013-04-09T21:06:41.003", "ParentId": "15911517", "CommentCount": "0", "OwnerUserId": "298225", "LastEditDate": "2017-05-23T12:02:13.080"}, "15911517": {"ViewCount": "1572", "Body": "<p>Here is the code (valid C and C++)</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"asfd\");\n    // LINE 1\n    return 0;\n}\n</code></pre>\n<p>If in line 1 I put segfaulting expression the program would just crash without printing anything (as expected).</p>\n<p>But why is the above code printing \"asdf\" and not exiting without buffer being flushed? What is under the hood and why does it work as expected?</p>\n", "AcceptedAnswerId": "15911747", "Title": "Is there a guarantee of stdout auto-flush before exit? How does it work?", "CreationDate": "2013-04-09T20:08:27.073", "Id": "15911517", "CommentCount": "2", "LastEditDate": "2016-02-05T01:13:08.843", "PostTypeId": "1", "LastEditorUserId": "2149111", "LastActivityDate": "2016-02-05T01:13:08.843", "Score": "9", "OwnerUserId": "2149111", "Tags": "<c++><c><stdout><flush><autoflush>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_15911517_15911747_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 7149}, "so_15911517_15911747_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 6805}}, "n3337": {"so_15911517_15911747_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 6893}, "so_15911517_15911747_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 6560}}, "n4659": {"so_15911517_15911747_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 8650}}}, "15911747": {"Id": "15911747", "PostTypeId": "2", "Body": "<p>This is accomplished by these two sections in the C++ language specification:</p>\n<blockquote>\n<p id=\"so_15911517_15911747_0\"><strong>[basic.start.main]</strong></p>\n<p id=\"so_15911517_15911747_1\">A return statement in <code>main</code> has the effect of leaving the main function and calling <code>exit</code> with the return value as the argument.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_15911517_15911747_2\"><strong>[lib.support.start.term]</strong></p>\n<p id=\"so_15911517_15911747_3\">The function <code>exit</code> has additional behavior in this International Standard:</p>\n<ul>\n<li>...</li>\n<li>Next, all open C streams with unwritten buffered data are flushed.</li>\n<li>...</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2013-04-09T20:22:00.113", "CommentCount": "16", "CreationDate": "2013-04-09T20:22:00.113", "ParentId": "15911517", "Score": "15", "OwnerUserId": "902497"}, "15911722": {"Id": "15911722", "PostTypeId": "2", "Body": "<p>When <code>main()</code> exits, all open streams are closed... to include <code>stdout</code>. Closing the open stream flushes <code>stdout</code> and what you've written to the buffer gets committed with or without the newline.</p>\n", "LastActivityDate": "2013-04-09T20:20:42.123", "CommentCount": "0", "CreationDate": "2013-04-09T20:20:42.123", "ParentId": "15911517", "Score": "0", "OwnerUserId": "2192592"}});