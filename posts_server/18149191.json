post_cb({"18149278": {"Id": "18149278", "PostTypeId": "2", "Body": "<p>you only have to free if you use malloc or new</p>\n<p>EDIT:</p>\n<p>char* string = \"a string\"; memory allocation is static, and not good practice (if it will be constant the declaration should be a const char*)\nbecause this is in the stack when the function ends it should be destroyed along with the rest of the local variables and arguments.\nyou need to use specific malloc/free and new/delete when you allocate the memory for your variable like:\nchar *string = new char[64]; --&gt; delete string;\nchar *string = malloc(sizeof(char) * 64); --&gt; free(string); //this is not best practice unless you have to use C</p>\n", "LastEditorUserId": "2619525", "LastActivityDate": "2013-08-09T15:44:27.483", "Score": "-1", "CreationDate": "2013-08-09T14:36:42.223", "ParentId": "18149191", "CommentCount": "3", "OwnerUserId": "2619525", "LastEditDate": "2013-08-09T15:44:27.483"}, "18149236": {"Id": "18149236", "PostTypeId": "2", "Body": "<p>No, there is no leak.</p>\n<p>The literal string is stored in the program's data section, which is typically loaded into a read-only memory page.  All equivalent string literals will typically point to the same memory location -- it's a singleton, of sorts.</p>\n<pre><code>char const *a = \"hello\";\nchar const *b = \"hello\";\n\nprintf(\"%p %p\\n\", a, b);\n</code></pre>\n<p>This should display identical values for the two pointers, and successive calls to the same function should print the same values too.</p>\n<p>(Note that you should declare such variables as <code>char const *</code> -- pointer to constant character -- since the data is shared.  Modifying a string literal via a pointer is undefined behavior.  At best you will crash your program if the memory page is read-only, and at worst you will change the value of <em>every occurrence of that string literal in the entire program.</em>)</p>\n", "LastActivityDate": "2013-08-09T14:34:41.227", "CommentCount": "2", "CreationDate": "2013-08-09T14:34:41.227", "ParentId": "18149191", "Score": "1", "OwnerUserId": "501250"}, "18149264": {"Id": "18149264", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18149191_18149264_0\">My question is what happens to the array when the pointer dies? If I\n  execute the code above inside a function, does this mean I have a\n  memory leak after I exit the function?</p>\n</blockquote>\n<p>No there will be no memory leak and nothing happens to the array when the pointer dies.</p>\n<p>A memory leak could be possible only with dynamic allocation, via <code>malloc()</code>. When you're <code>malloc()</code> something, you have to <code>free()</code> it later. If you don't, there will be a memory leak.\nIn your case, it's a \"static allocation\": the allocation and free of this memory space will be freed automatically and you don't have to handle that.</p>\n", "LastActivityDate": "2013-08-09T14:36:09.570", "CommentCount": "0", "CreationDate": "2013-08-09T14:36:09.570", "ParentId": "18149191", "Score": "0", "OwnerUserId": "2432477"}, "18149943": {"Id": "18149943", "PostTypeId": "2", "Body": "<p>const char* s = \"Hello\"; is part of the code (program) - hence a constant never altered (unless you have some nasty mechanism altering code at runtime)</p>\n", "LastActivityDate": "2013-08-09T15:09:07.313", "CommentCount": "0", "CreationDate": "2013-08-09T15:09:07.313", "ParentId": "18149191", "Score": "1", "OwnerUserId": "2249683"}, "18149240": {"Id": "18149240", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18149191_18149240_0\">it lives for the entire duration of the program</p>\n</blockquote>\n<p>Exactly, formally it has <code>static</code> storage duration.</p>\n<blockquote>\n<p id=\"so_18149191_18149240_1\">what happens to the array when the pointer dies?</p>\n</blockquote>\n<p>Nothing.</p>\n<blockquote>\n<p id=\"so_18149191_18149240_2\">If I execute the code above inside a function, does this mean I have a memory leak after I exit the function?</p>\n</blockquote>\n<p>No, because of (1). (The array is only \"freed\" when the program exits.)</p>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2013-08-09T14:34:52.803", "Score": "6", "CreationDate": "2013-08-09T14:34:52.803", "ParentId": "18149191", "CommentCount": "1"}, "bq_ids": {"n4140": {"so_18149191_18149441_2": {"length": 4, "quality": 0.8, "section_id": 7164}, "so_18149191_18149441_1": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_18149191_18149441_2": {"length": 4, "quality": 0.8, "section_id": 6908}, "so_18149191_18149441_1": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_18149191_18149441_2": {"length": 4, "quality": 0.8, "section_id": 8672}, "so_18149191_18149441_1": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "18149441": {"Id": "18149441", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18149191_18149441_0\">does this mean I have a memory leak after I exit the function?</p>\n</blockquote>\n<p>No, there is no memory leak, string literals have static duration and will be freed when the program is done. Quote from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">C++ draft standard</a> section <code>2.14.5 String literals</code> subsection <code>8</code>:</p>\n<blockquote>\n<p id=\"so_18149191_18149441_1\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has static storage duration</p>\n</blockquote>\n<p>Section <code>3.7.1 Static storage duration</code> says:</p>\n<blockquote>\n<p id=\"so_18149191_18149441_2\">[...] The storage for these entities shall last for the duration of the program</p>\n</blockquote>\n<p>Note in C++, this line:</p>\n<pre><code>char *s = \"hello\";\n</code></pre>\n<p>uses a deprecated conversion see  <a href=\"https://stackoverflow.com/q/21529194/1708801\">C++ warning: deprecated conversion from string constant to \u2018char*\u2019 [-Wwrite-strings]</a> for more details.</p>\n<p>The correct way would be as follows:</p>\n<pre><code>const char *s = \"hello\";\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-06-17T11:54:23.460", "Score": "0", "CreationDate": "2013-08-09T14:45:21.877", "ParentId": "18149191", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:14:25.690"}, "18149191": {"ViewCount": "325", "Body": "<p>My understanding is that in C and C++, creating a character array by calling:</p>\n<pre><code>char *s = \"hello\";\n</code></pre>\n<p>actually creates two objects: a read-only character array that is created in static space, meaning that it lives for the entire duration of the program, and a pointer to that memory. The pointer is a local variable to its scope then dies.</p>\n<p>My question is what happens to the array when the pointer dies? If I execute the code above inside a function, does this mean I have a memory leak after I exit the function?</p>\n", "AcceptedAnswerId": "18149240", "Title": "char* Space Allocation", "CreationDate": "2013-08-09T14:32:33.320", "Id": "18149191", "CommentCount": "4", "LastEditDate": "2015-06-17T11:50:53.850", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-06-17T11:54:23.460", "Score": "0", "OwnerUserId": "1768702", "Tags": "<c++><memory-leaks><string-literals>", "AnswerCount": "6"}});