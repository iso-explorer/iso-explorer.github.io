post_cb({"30448214": {"ParentId": "30448182", "CommentCount": "3", "Body": "<p>Yes, it's perfectly safe. </p>\n<p>From [class.temporary]/4-5:</p>\n<blockquote>\n<p id=\"so_30448182_30448214_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression. The first context is when a default constructor is called [...]</p>\n<p id=\"so_30448182_30448214_1\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound <strong>persists\n  for the lifetime of the reference</strong> except:</p>\n<ul>\n<li>A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> [...]</li>\n<li>A temporary bound to a reference parameter in a function call [...]</li>\n<li>The lifetime of a temporary bound to the returned value in a function return statement [...]</li>\n<li>A temporary bound to a reference in a <em>new-initializer</em> [...]</li>\n</ul>\n</blockquote>\n<p>None of those exceptions apply. The temporary thus persists for the lifetime of the reference, <code>__range</code>, which is the entire loop.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "30448214", "Score": "19", "CreationDate": "2015-05-26T01:50:26.160", "LastActivityDate": "2015-05-26T01:50:26.160"}, "30448182": {"CommentCount": "0", "AcceptedAnswerId": "30448214", "ClosedDate": "2017-06-28T01:57:18.837", "CreationDate": "2015-05-26T01:45:31.627", "LastActivityDate": "2015-05-26T01:50:26.160", "PostTypeId": "1", "ViewCount": "1352", "Title": "Is it safe to use a C++11 range-based for-loop with an rvalue range-init?", "Id": "30448182", "Score": "21", "Body": "<p>Suppose I have a function that returns a <code>std::vector</code> by value:</p>\n<pre><code>std::vector&lt;int&gt; buildVector();\n</code></pre>\n<p>It would seem natural to iterate over the result using a range-based <code>for</code>:</p>\n<pre><code>for (int i : buildVector()) {\n  // ...\n}\n</code></pre>\n<p>Question: Is it safe to do so?</p>\n<p>My reading of the standard (actually, draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4431.pdf\" rel=\"noreferrer\">n4431</a>) suggests that it might not be, though I'm having a hard time believing that the committee failed to allow for this usage. I'm hoping that my reading is incorrect.</p>\n<p>Section 6.5.4 defines the range-based <code>for</code>:</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p>with the following desugaring:</p>\n<pre><code>{\n  auto &amp;&amp; __range = range-init;\n  for ( auto __begin = begin-expr,\n             __end = end-expr;\n        __begin != __end;\n        ++__begin ) {\n    for-range-declaration = *__begin;\n    statement\n  }\n}\n</code></pre>\n<p>where <code>range-init</code> is just <code>( expression )</code>, and at least for class types, <code>begin-expr</code> is either <code>__range.begin()</code> or <code>begin(__range)</code>, etc.</p>\n<p>In my <code>buildVector</code> example, I think the <code>range-init</code> produces a temporary, which the implementation is allowed to destroy immediately after the <code>__range</code> reference is bound. This would mean that the <code>__range</code> reference might already be dangling by the time <code>begin-expr</code> is evaluated.</p>\n<p>Certainly, it should always be safe to write this:</p>\n<pre><code>std::vector&lt;int&gt; notATemporary = buildVector();\nfor (int i : notATemporary) {\n  // ...\n}\n</code></pre>\n<p>But I'm hoping I don't have to add this to my list of gotchas.</p>\n", "Tags": "<c++><c++11><foreach>", "OwnerUserId": "2235690", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30448182_30448214_1": {"section_id": 382, "quality": 0.9047619047619048, "length": 19}, "so_30448182_30448214_0": {"section_id": 381, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_30448182_30448214_1": {"section_id": 373, "quality": 0.9047619047619048, "length": 19}, "so_30448182_30448214_0": {"section_id": 372, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_30448182_30448214_1": {"section_id": 397, "quality": 0.8571428571428571, "length": 18}, "so_30448182_30448214_0": {"section_id": 396, "quality": 0.8823529411764706, "length": 15}}}});