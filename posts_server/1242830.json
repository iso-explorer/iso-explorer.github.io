post_cb({"bq_ids": {"n4140": {"so_1242830_38990055_0": {"length": 15, "quality": 0.9375, "section_id": 438}}, "n3337": {"so_1242830_38990055_0": {"length": 15, "quality": 0.9375, "section_id": 429}}, "n4659": {"so_1242830_38990055_0": {"length": 15, "quality": 0.9375, "section_id": 458}}}, "1242845": {"Id": "1242845", "PostTypeId": "2", "Body": "<p>To quote the standard, for clarification:</p>\n<blockquote>\n<p id=\"so_1242830_1242845_0\">12.6.2.5</p>\n<p id=\"so_1242830_1242845_1\">Initialization shall proceed in the following order:</p>\n<p id=\"so_1242830_1242845_2\"><strong>...</strong></p>\n<ul>\n<li>Then, nonstatic data members shall be initialized in the order they were declared in the class definition\n  (again regardless of the order of the mem-initializers).</li>\n</ul>\n<p id=\"so_1242830_1242845_3\"><strong>...</strong></p>\n</blockquote>\n", "LastActivityDate": "2009-08-07T04:09:02.250", "CommentCount": "0", "CreationDate": "2009-08-07T04:09:02.250", "ParentId": "1242830", "Score": "168", "OwnerUserId": "87234"}, "1242835": {"Id": "1242835", "PostTypeId": "2", "Body": "<p>It depends on the order of member variable declaration in the class. So <code>a_</code> will be the first one, then <code>b_</code> will be the second one in your example.</p>\n", "LastActivityDate": "2009-08-07T04:04:02.840", "CommentCount": "2", "CreationDate": "2009-08-07T04:04:02.840", "ParentId": "1242830", "Score": "214", "OwnerUserId": "127893"}, "1242830": {"ViewCount": "44244", "Body": "<p>I have a constructor that takes some arguments.  I had assumed that they were constructed in the order listed, but in one case it appears they were being constructed in reverse resulting in an abort. When I reversed the arguments the program stopped aborting.  This is an example of the syntax I'm using.  The thing is, a_ needs to be initialized before b_ in this case.  Can you guarantee the order of construction? </p>\n<p>e.g.</p>\n<pre><code>class A\n{\n  public:\n    A(OtherClass o, string x, int y) :\n      a_(o), b_(a_, x, y) { }\n\n    OtherClass a_;\n    AnotherClass b_;\n};\n</code></pre>\n", "AcceptedAnswerId": "1242835", "Title": "Constructor initialization-list evaluation order", "CreationDate": "2009-08-07T04:00:01.723", "Id": "1242830", "CommentCount": "1", "FavoriteCount": "64", "PostTypeId": "1", "LastEditDate": "2012-02-29T21:13:45.783", "LastEditorUserId": "500104", "LastActivityDate": "2016-08-17T06:59:31.690", "Score": "197", "OwnerUserId": "134702", "Tags": "<c++><gcc><c++-faq>", "AnswerCount": "3"}, "38990055": {"Id": "38990055", "PostTypeId": "2", "Body": "<p>The <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4594.pdf\" rel=\"nofollow\">standard reference</a> for this now appears to be 12.6.2 section 13.3:</p>\n<blockquote>\n<p id=\"so_1242830_38990055_0\">(13.3) \u2014 Then, non-static data members are initialized in the order they were declared in the class definition\n  (again regardless of the order of the mem-initializers).</p>\n</blockquote>\n", "LastActivityDate": "2016-08-17T06:59:31.690", "CommentCount": "0", "CreationDate": "2016-08-17T06:59:31.690", "ParentId": "1242830", "Score": "4", "OwnerUserId": "2986156"}});