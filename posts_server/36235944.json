post_cb({"bq_ids": {"n4140": {"so_36235944_36236254_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 3996}, "so_36235944_36236254_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 3996}}, "n3337": {"so_36235944_36236254_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 3853}, "so_36235944_36236254_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 3853}}, "n4659": {"so_36235944_36236254_2": {"length": 8, "quality": 0.7272727272727273, "section_id": 4908}, "so_36235944_36236254_3": {"length": 8, "quality": 0.7272727272727273, "section_id": 4908}}}, "36235944": {"ViewCount": "70", "Body": "<p>Why my const ref becomes invalid in this code and how to avoid this? I can't copy, this is the bottleneck in my application.</p>\n<pre><code>class Foo {\npublic:\n    const std::string&amp; string() const {\n        return string;\n    }\n\nprivate:\n    std::string string = \"asdf\";\n};\n\nFoo foo;\nstd::vector&lt;std::pair&lt;const std::string&amp;, int&gt;&gt; invalid;\nfor (int i = 0; i &lt; 5; i++) {\n    invalid.emplace_back(std::make_pair(foo.string(), i);\n    // after this line invalid[i].first is invalid\n}\n</code></pre>\n", "AcceptedAnswerId": "36236337", "Title": "Why my const ref becomes invalid?", "CreationDate": "2016-03-26T13:37:36.023", "Id": "36235944", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2016-03-26T14:33:40.517", "Score": "0", "OwnerUserId": "3561614", "Tags": "<c++><reference><invalidation>", "AnswerCount": "2"}, "36236254": {"Id": "36236254", "PostTypeId": "2", "Body": "<p><code>make_pair</code> is returning a <code>pair&lt;std::string,int&gt;</code>, not a <code>pair&lt;const std::string&amp;, int&gt;</code> because the standard requires it to be that way.</p>\n<pre><code>template &lt;class T1, class T2&gt;\nconstexpr pair&lt;V1, V2&gt; make_pair(T1&amp;&amp; x, T2&amp;&amp; y);\n</code></pre>\n<blockquote>\n<p id=\"so_36235944_36236254_0\"><strong>\u00a7 20.3.3 - 8</strong></p>\n<p id=\"so_36235944_36236254_1\">Returns: <code>pair&lt;V1, V2&gt;(std::forward&lt;T1&gt;(x), std::forward&lt;T2&gt;(y));</code></p>\n<blockquote>\n<p id=\"so_36235944_36236254_3\">where <code>V1</code> and <code>V2</code> are determined as follows: Let Ui be <code>decay_t&lt;Ti&gt;</code> for each Ti. Then each Vi is X&amp;\n    if Ui equals <code>reference_wrapper</code>, otherwise Vi is Ui.</p>\n</blockquote>\n</blockquote>\n<p>This should work according to the standard:</p>\n<pre><code>invalid.emplace_back(std::make_pair(std::ref(foo.string()), i));\n</code></pre>\n<p>and this according to me:</p>\n<pre><code>invalid.emplace_back(decltype(invalid)::value_type(foo.string(), i));\n</code></pre>\n", "LastEditorUserId": "6053907", "LastActivityDate": "2016-03-26T14:33:40.517", "Score": "1", "CreationDate": "2016-03-26T14:11:04.193", "ParentId": "36235944", "CommentCount": "1", "OwnerUserId": "6053907", "LastEditDate": "2016-03-26T14:33:40.517"}, "36236337": {"Id": "36236337", "PostTypeId": "2", "Body": "<p>Igor Tandetnik already pointed out the problem in your code. FWIW, I don't think it's a good idea to have containers referencing other objects' members by reference in any case - there's an implicit dependence on the relative liftime of objects. You can consider using a <a href=\"https://stackoverflow.com/questions/17793333/difference-between-const-shared-ptrt-and-shared-ptrconst-t\"><code>shared_ptr</code> to <code>const string</code></a>, as in the following:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;                                                                                                                           \nclass Foo {\npublic:\n    const std::shared_ptr&lt;const std::string&gt; string() const {\n        return _string;\n    }   \n\nprivate:\n    std::shared_ptr&lt;std::string&gt; _string = std::make_shared&lt;std::string&gt;(\"asdf\");\n};  \n\nint main()\n{   \n    Foo foo;\n    std::vector&lt;std::pair&lt;std::shared_ptr&lt;const std::string&gt;, int&gt;&gt; invalid;\n    for (int i = 0; i &lt; 5; i++) {\n        invalid.emplace_back(std::make_pair(foo.string(), i));\n    }   \n}   \n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-03-26T14:18:24.790", "Score": "1", "CreationDate": "2016-03-26T14:18:24.790", "ParentId": "36235944", "CommentCount": "0", "OwnerUserId": "3510736", "LastEditDate": "2017-05-23T12:23:50.700"}});