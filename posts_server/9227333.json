post_cb({"9227388": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_9227333_9227388_0\">Is it posssible to use a1.size() in default parameter a2 definition?</p>\n</blockquote>\n<p>No. It is forbidden by the Standard. You cannot use function parameter to set the default value of other parameter.</p>\n<p>\u00a78.3.6/9 (C++03) explicitly says,</p>\n<blockquote>\n<p id=\"so_9227333_9227388_1\">Default arguments are evaluated each\n  time the function is called. <em>The order\n  of evaluation of function arguments is\n  unspecified</em>. <strong>Consequently, parameters\n  of a function shall not be used in\n  default argument expressions</strong>, even if\n  they are not evaluated.</p>\n</blockquote>\n<p>So the solution is: use overload:</p>\n<pre><code>template &lt;typename T&gt;\nvoid test(typename TAs&lt;T&gt;::Type a)\n{\n    test(a, typename TA&lt;T&gt;::Type(a.size()));\n}\n</code></pre>\n", "LastActivityDate": "2012-02-10T11:57:59.727", "Id": "9227388", "CommentCount": "0", "CreationDate": "2012-02-10T11:57:59.727", "ParentId": "9227333", "Score": "7", "OwnerUserId": "415784"}, "bq_ids": {"n4140": {"so_9227333_9227388_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 3260}}, "n3337": {"so_9227333_9227388_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 3132}}}, "9227333": {"ViewCount": "357", "Body": "<p>There is a structure TA</p>\n<pre><code>template &lt;typename T&gt;\nstruct TA\n{\n    typedef std::vector &lt;T&gt; Type;\n};\n</code></pre>\n<p>and test() function having a default parameter of the type TA.</p>\n<pre><code>template &lt;typename T&gt;\nvoid test ( typename TA&lt;T&gt;::Type a1, \n            typename TA&lt;T&gt;::Type a2 = typename TA&lt;T&gt;::Type(a1.size()) )\n{}\n</code></pre>\n<p>Is it posssible to use a1.size() in default parameter a2 definition?</p>\n<pre><code>int main()\n{\n    TA &lt;double&gt; ::Type a1;\n    test&lt;double&gt;(a1);\n}\n</code></pre>\n", "AcceptedAnswerId": "9227388", "Title": "C++ templates, vector.size used in default parameter definitoin", "CreationDate": "2012-02-10T11:52:24.720", "Id": "9227333", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-02-10T17:51:30.717", "LastEditorUserId": "90527", "LastActivityDate": "2012-02-10T17:51:30.717", "Score": "3", "OwnerUserId": "287693", "Tags": "<c++><templates><parameters><default><definition>", "AnswerCount": "2"}, "9227413": {"PostTypeId": "2", "Body": "<p>No. In general, a function argument can't be used outside the body of the function, and specifically can't be used in the default value of another parameter.</p>\n<p>You could get the same effect by overloading:</p>\n<pre><code>template &lt;typename T&gt;\nvoid test ( typename TAs&lt;T&gt;::Type a1, typename TA&lt;T&gt;::Type a2);\n\ntemplate &lt;typename T&gt;\nvoid test ( typename TAs&lt;T&gt;::Type a1)\n{\n    test(a1, typename TA&lt;T&gt;::Type(a1.size()));\n}\n</code></pre>\n", "LastActivityDate": "2012-02-10T12:00:10.050", "Id": "9227413", "CommentCount": "0", "CreationDate": "2012-02-10T12:00:10.050", "ParentId": "9227333", "Score": "5", "OwnerUserId": "204847"}});