post_cb({"bq_ids": {"n4140": {"so_38103578_38104223_7": {"length": 12, "quality": 0.5714285714285714, "section_id": 7208}, "so_38103578_38104223_13": {"length": 15, "quality": 1.0, "section_id": 401}, "so_38103578_38104223_12": {"length": 9, "quality": 1.0, "section_id": 401}, "so_38103578_38104223_9": {"length": 10, "quality": 0.9090909090909091, "section_id": 7208}, "so_38103578_38104223_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 4706}, "so_38103578_38104223_8": {"length": 8, "quality": 0.8, "section_id": 7208}}, "n3337": {"so_38103578_38104223_7": {"length": 12, "quality": 0.5714285714285714, "section_id": 6952}, "so_38103578_38104223_13": {"length": 15, "quality": 1.0, "section_id": 392}, "so_38103578_38104223_12": {"length": 9, "quality": 1.0, "section_id": 392}, "so_38103578_38104223_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 6952}, "so_38103578_38104223_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 4515}, "so_38103578_38104223_8": {"length": 7, "quality": 0.7, "section_id": 6952}}, "n4659": {"so_38103578_38104223_7": {"length": 18, "quality": 0.8571428571428571, "section_id": 8717}, "so_38103578_38104223_13": {"length": 15, "quality": 1.0, "section_id": 419}, "so_38103578_38104223_12": {"length": 9, "quality": 1.0, "section_id": 419}, "so_38103578_38104223_9": {"length": 11, "quality": 1.0, "section_id": 8717}, "so_38103578_38104223_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 8717}, "so_38103578_38104223_8": {"length": 10, "quality": 1.0, "section_id": 8717}}}, "38103578": {"ViewCount": "606", "Body": "<p>I am trying to learn a bit more on how to use C++ constant expressions in practice and created the following Matrix class template for illustration purposes:</p>\n<pre><code>#include &lt;array&gt;\n\ntemplate &lt;typename T, int numrows, int numcols&gt;\nclass Matrix{\npublic:\n    using value_type = T;\n    constexpr Matrix() : {}\n   ~Matrix(){}\n\n    constexpr Matrix(const std::array&lt;T, numrows*numcols&gt;&amp; a) :\n        values_(a){}\n\n    constexpr Matrix(const Matrix&amp; other) :\n        values_(other.values_){\n\n    }\n\n    constexpr const T&amp; operator()(int row, int col) const {\n        return values_[row*numcols+col];\n    }\n\n    T&amp; operator()(int row, int col){\n        return values_[row*numcols+col];\n    }\n\n    constexpr int rows() const {\n        return numrows;\n    }\n\n    constexpr int columns() const {\n        return numcols;\n    }\n\n\nprivate:\n    std::array&lt;T, numrows*numcols&gt; values_{};\n};\n</code></pre>\n<p>The idea is to have a simple Matrix class, which I can use for small matrices to evaluate Matrix expressions at compile time (note that I have not yet implemented the usual Matrix operators for addition and multiplication).</p>\n<p>When I try to initialize a Matrix instance as follows:</p>\n<pre><code>constexpr std::array&lt;double, 4&gt; a = {1,1,1,1};\nconstexpr Matrix&lt;double, 2, 2&gt; m(a);\n</code></pre>\n<p>I am getting the following error from the compiler (MS Visual C++ 14):</p>\n<pre><code>error: C2127: 'm': illegal initialization of 'constexpr' entity with a non-constant expression\n</code></pre>\n<p>Note sure what I am doing wrong...any help to make this work would be greatly appreciated! </p>\n", "AcceptedAnswerId": "38104223", "Title": "Why does the compiler complain about this not being a constexpr?", "CreationDate": "2016-06-29T15:10:29.943", "Id": "38103578", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-06-29T20:53:51.283", "LastEditorUserId": "826938", "LastActivityDate": "2016-06-29T20:53:51.283", "Score": "8", "OwnerUserId": "826938", "Tags": "<c++><c++11><visual-c++><constexpr>", "AnswerCount": "1"}, "38104223": {"Id": "38104223", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/basic.types#10\">[basic.types]/p10</a> states that:</p>\n<blockquote>\n<p id=\"so_38103578_38104223_0\">A type is a <em>literal type</em> if it is:</p>\n<ul>\n<li><p id=\"so_38103578_38104223_1\">possibly cv-qualified <code>void</code>; or</p></li>\n<li><p id=\"so_38103578_38104223_2\">a scalar type; or</p></li>\n<li><p id=\"so_38103578_38104223_3\">a reference type; or</p></li>\n<li><p id=\"so_38103578_38104223_4\">an array of literal type; or</p></li>\n<li><p id=\"so_38103578_38104223_5\">a possibly cv-qualified class type (Clause <a href=\"http://eel.is/c++draft/class\">[class]</a>) that has all of the following properties:</p>\n<ul>\n<li><p id=\"so_38103578_38104223_6\">it has a trivial destructor,</p></li>\n<li><p id=\"so_38103578_38104223_7\">it is either a closure type (<a href=\"http://eel.is/c++draft/expr.prim.lambda\">[expr.prim.lambda]</a>), an aggregate type (<a href=\"http://eel.is/c++draft/dcl.init.aggr\">[dcl.init.aggr]</a>), or has at least one constexpr constructor or constructor template (possibly inherited (<a href=\"http://eel.is/c++draft/namespace.udecl\">[namespace.udecl]</a>) from a base class) that is not a copy or move constructor,</p></li>\n<li><p id=\"so_38103578_38104223_8\">if it is a union, at least one of its non-static data members is of non-volatile literal type, and</p></li>\n<li><p id=\"so_38103578_38104223_9\">if it is not a union, all of its non-static data members and base classes are of non-volatile literal types.</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>where <a href=\"http://eel.is/c++draft/class.dtor#5\">[class.dtor]/p5</a> says that:</p>\n<blockquote>\n<p id=\"so_38103578_38104223_10\">A destructor is trivial if it is not user-provided and if:</p>\n<p id=\"so_38103578_38104223_11\"><sup>(5.4)</sup> \u2014 the destructor is not <code>virtual</code>,</p>\n<p id=\"so_38103578_38104223_12\"><sup>(5.5)</sup> \u2014 all of the direct base classes of its class have trivial destructors, and</p>\n<p id=\"so_38103578_38104223_13\"><sup>(5.6)</sup> \u2014 for all of the non-static data members of its class that are of class type (or array thereof), each such\n  class has a trivial destructor.</p>\n<p id=\"so_38103578_38104223_14\">Otherwise, the destructor is <em>non-trivial</em>.</p>\n</blockquote>\n<p>In other words, to declare a <code>constexpr</code> instance of <code>Matrix</code>, it must be a literal type, and to be a literal type, its destructor must be either <code>default</code>ed, or removed altogether, so:</p>\n<pre><code>~Matrix() = default;\n</code></pre>\n<p>or:</p>\n<pre> </pre>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2016-06-29T15:43:59.550", "Score": "13", "CreationDate": "2016-06-29T15:38:02.377", "ParentId": "38103578", "CommentCount": "2", "OwnerUserId": "3953764", "LastEditDate": "2016-06-29T15:43:59.550"}});