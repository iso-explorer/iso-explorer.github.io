post_cb({"31815203": {"ParentId": "31809347", "LastEditDate": "2015-08-05T08:51:46.973", "CommentCount": "0", "CreationDate": "2015-08-04T17:03:12.283", "OwnerUserId": "400547", "LastEditorUserId": "400547", "PostTypeId": "2", "Id": "31815203", "Score": "2", "Body": "<blockquote>\n<p id=\"so_31809347_31815203_0\">even though <code>v.at(idx)</code> could theoretically throw a <code>out_of_range</code> exception, but practically not due to the bounds check?</p>\n</blockquote>\n<p>Theoretically, it could not.</p>\n<p>If you're thinking theoretically about that function, then the bounds check is part of what you must consider about the theory of that function as a whole, and so the only theoretical way it could throw is if there was a condition in which <code>idx &gt;= v.size()</code> wasn't true and yet <code>v.at(idx)</code> threw.</p>\n<p>So in your statement that it \"could theoretically throw\" is wrong.</p>\n<p>(In practice it could throw, if you had a bug in the implementation of <code>at()</code> in use, but then you've got bigger problems and blowing up as <code>noexcept</code> could lead you to do is probably for the better).</p>\n", "LastActivityDate": "2015-08-05T08:51:46.973"}, "31809501": {"ParentId": "31809347", "CommentCount": "0", "Body": "<p>It is safe. Declaring a function <code>noexcept</code> would result in immediate program termination (by a call to <code>terminate()</code>) if an exception occurs. As long as no exception is thrown everything is fine.</p>\n", "OwnerUserId": "4953079", "PostTypeId": "2", "Id": "31809501", "Score": "9", "CreationDate": "2015-08-04T12:35:25.737", "LastActivityDate": "2015-08-04T12:35:25.737"}, "31809347": {"CommentCount": "10", "ViewCount": "1207", "PostTypeId": "1", "LastEditorUserId": "4342498", "CreationDate": "2015-08-04T12:26:44.797", "LastActivityDate": "2017-03-24T11:36:01.180", "Title": "Should a theoretically, but not practically, throwing function be declared noexcept?", "AcceptedAnswerId": "31809555", "LastEditDate": "2017-03-24T11:36:01.180", "Id": "31809347", "Score": "21", "Body": "<p>Is it safe to declare the following function <code>noexcept</code> even though <code>v.at(idx)</code> could theoretically throw a <code>out_of_range</code> exception, but practically not due to the bounds check?</p>\n<pre><code>int get_value_or_default(const std::vector&lt;int&gt;&amp; v, size_t idx) noexcept {\n    if (idx &gt;= v.size()) {\n        return -1;\n    }\n    return v.at(idx);\n}\n</code></pre>\n", "Tags": "<c++><function><noexcept>", "OwnerUserId": "387023", "AnswerCount": "5"}, "33350535": {"ParentId": "31809347", "CommentCount": "0", "Body": "<p>It is possible that someone in big-O organisation has done smart and derived his class from <code>std::vector&lt;int&gt;</code> and then overloaded both size() and at() to throw to his liking . Then somewhere in the code your function is called , but to everyone's surprise the program terminates instead of the exception being caught higher up.</p>\n<p>Far fetched indeed, but this not a question just about <code>std::vector&lt;int&gt;</code> ... , but about the programming practice behind.</p>\n<p>Unfortunately, you are assuming things about your input that cannot be guaranteed, and that is why it is <strong>unsafe</strong>; at least in large code domains.</p>\n", "OwnerUserId": "4345926", "PostTypeId": "2", "Id": "33350535", "Score": "0", "CreationDate": "2015-10-26T16:14:33.217", "LastActivityDate": "2015-10-26T16:14:33.217"}, "31809555": {"ParentId": "31809347", "CommentCount": "3", "Body": "<p>What is you definition of \"safe\"?  If you throw an exception in a function marked as<code>noexcept</code> or <code>noexcept(true)</code> then your program will be terminated (standard 15.4.9)</p>\n<blockquote>\n<p id=\"so_31809347_31809555_0\">Whenever an exception is thrown and the search for a handler (15.3) encounters the outermost block of a\n  function with an exception-specification that does not allow the exception, then,</p>\n<ul>\n<li>if the exception-specification is a dynamic-exception-specification, the function std::unexpected() is\n  called (15.5.2),</li>\n<li>otherwise, the function std::terminate() is called (15.5.1).</li>\n</ul>\n</blockquote>\n<p>As long as that is acceptable then you are fine.  If you can not tolerate the program terminating then it is not safe.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "31809555", "Score": "15", "CreationDate": "2015-08-04T12:38:16.643", "LastActivityDate": "2015-08-04T12:38:16.643"}, "31810239": {"ParentId": "31809347", "LastEditDate": "2015-08-04T14:53:27.373", "CommentCount": "3", "CreationDate": "2015-08-04T13:08:50.663", "OwnerUserId": "2692339", "LastEditorUserId": "147192", "PostTypeId": "2", "Id": "31810239", "Score": "4", "Body": "<p>We don't have the full scenario to determine <em>exactly</em> whether that function will be able to throw. </p>\n<hr>\n<p>Your assumptions are though correct: since you're doing what <code>std::vector::at</code> will anyway do, it is <em>unlikely</em> to be harmful in the given context. However, generally talking, such function <em>may</em> be subject of invalidating factors and thus potentially able to throw an exception. These could be threads, processes or signals that could interleave the execution to code that might modify <code>std::vector</code>, which can't handle that safely and neither can <code>std::vector::at</code>.</p>\n<p>If you want to consider those possibilities as well, you'll need to have something like</p>\n<pre><code>int get_value_or_default(const std::vector&lt;int&gt;&amp; v, size_t idx) noexcept       \n{\n    try { return v.at(idx); }\n    catch (std::out_of_range const&amp; e) { return -1; }\n}\n</code></pre>\n</hr>", "LastActivityDate": "2015-08-04T14:53:27.373"}, "bq_ids": {"n4140": {"so_31809347_31809555_0": {"section_id": 3371, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_31809347_31809555_0": {"section_id": 3241, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_31809347_31809555_0": {"section_id": 4133, "quality": 0.6666666666666666, "length": 10}}}});