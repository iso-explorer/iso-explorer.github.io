post_cb({"14666261": {"Id": "14666261", "PostTypeId": "2", "Body": "<p>One is a template and the other is not, they are definitely not the same.</p>\n<p>Overload resolution is designed to prefer a non-template over a templated function, everything else being equal.</p>\n", "LastActivityDate": "2013-02-02T20:35:12.027", "Score": "6", "CreationDate": "2013-02-02T20:35:12.027", "ParentId": "14666219", "CommentCount": "0", "OwnerUserId": "597607"}, "bq_ids": {"n4140": {"so_14666219_14666246_0": {"length": 22, "quality": 0.88, "section_id": 603}}, "n3337": {"so_14666219_14666246_0": {"length": 23, "quality": 0.92, "section_id": 593}}, "n4659": {"so_14666219_14666246_0": {"length": 22, "quality": 0.88, "section_id": 629}}}, "14666219": {"ViewCount": "2308", "Body": "<p>I have this code:</p>\n<pre><code>template&lt;\n    class T = const int &amp;\n&gt; void f(T) {}\n\nvoid f(const int &amp;) {}\n\nint main() {\n   f(0);\n}\n</code></pre>\n<p>Why does it call the second one instead of first? I would think of them as being the same but they're clearly not as I do not get a redefinition error.</p>\n", "AcceptedAnswerId": "14666246", "Title": "Why does overload of template and non-template function with the \"same signature\" call the non-template function?", "CreationDate": "2013-02-02T20:30:29.377", "Id": "14666219", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2013-03-23T10:39:01.470", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-23T10:39:01.470", "Score": "16", "OwnerUserId": "2030677", "Tags": "<c++><templates><c++11><overloading>", "AnswerCount": "2"}, "14666246": {"Id": "14666246", "PostTypeId": "2", "Body": "<p>Because the second overload is not a template. </p>\n<p>When a template function and a non-template function are both viable for resolving a function call, the non-template function is selected. </p>\n<p>From Paragraph 13.3.3/1 of the C++ 11 Standard:</p>\n<blockquote>\n<p id=\"so_14666219_14666246_0\">[...] Given these definitions, a viable function F1 is defined to be a <strong>better function</strong> than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), <strong>and then [...] F1 is a non-template function and F2 is a function template specialization</strong> [...]</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-02-02T20:42:16.250", "Score": "18", "CreationDate": "2013-02-02T20:34:08.003", "ParentId": "14666219", "CommentCount": "3", "LastEditDate": "2013-02-02T20:42:16.250", "OwnerUserId": "1932150"}});