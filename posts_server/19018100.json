post_cb({"bq_ids": {"n4140": {"so_19018100_19018329_0": {"length": 18, "quality": 0.6, "section_id": 5971}, "so_19018100_19018329_1": {"length": 4, "quality": 0.8, "section_id": 5972}}, "n3337": {"so_19018100_19018329_0": {"length": 27, "quality": 0.9, "section_id": 5739}, "so_19018100_19018329_1": {"length": 4, "quality": 0.8, "section_id": 5740}}, "n4659": {"so_19018100_19018329_0": {"length": 18, "quality": 0.6, "section_id": 7470}, "so_19018100_19018329_1": {"length": 4, "quality": 0.8, "section_id": 7471}}}, "19018329": {"Id": "19018329", "PostTypeId": "2", "Body": "<p>The standard guarantees that if you do a default capture, the only variables that will be captured by that default capture from the surrounding environment are those that you actually use inside the lambda.</p>\n<p>As such, specifying individual variables to capture acts as documentation of what you expect to use, but should never affect performance.</p>\n<p>For anybody who cares, the exact wording from the standard is (\u00a75.1.2/11, 12):</p>\n<blockquote>\n<p id=\"so_19018100_19018329_0\">11 If a lambda-expression has an associated capture-default and its compound-statement odr-uses (3.2) <code>this</code> or a variable with automatic storage duration and the odr-used entity is not explicitly captured, then the odr-used entity is said to be implicitly captured; such entities shall be declared within the reaching scope of the lambda expression. [<em>Note elided</em>]</p>\n<p id=\"so_19018100_19018329_1\">12 An entity is captured if it is captured explicitly or implicitly. [...]</p>\n</blockquote>\n<p>Summary: an implicit capture specification (<code>[=]</code> or <code>[&amp;]</code>) will only capture variables that are used in the lambda.</p>\n", "LastActivityDate": "2013-09-26T02:25:49.863", "CommentCount": "0", "CreationDate": "2013-09-26T02:25:49.863", "ParentId": "19018100", "Score": "17", "OwnerUserId": "179910"}, "19018100": {"ViewCount": "2227", "Body": "<pre><code>std::function&lt;int()&gt; void f1()\n{\n    int a, b, c, d, ..., x, y, z;\n\n    return [=] { return a + b + c; };\n}\n</code></pre>\n<p>vs.</p>\n<pre><code>std::function&lt;int()&gt; void f2()\n{\n    int a, b, c, d, ..., x, y, z;\n\n    return [a, b, c] { return a + b + c; };\n}\n</code></pre>\n<p>Needless to say, the former is shorter, handier, and more elegant than the latter.</p>\n<p>However, I still worry: </p>\n<p>From the performance viewpoint, is the latter always better than the former?</p>\n<p>Does the standard guarantee a lambda expression captures the necessary variables only? i.e. In the former example, only a, b, c are captured, the unused variables d, ..., x, y, z are not.</p>\n", "AcceptedAnswerId": "19018329", "Title": "Is it a bad practice to always capture all in a lambda expression?", "CreationDate": "2013-09-26T01:57:04.663", "Id": "19018100", "CommentCount": "7", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-09-30T23:48:56.667", "LastEditorUserId": "86989", "LastActivityDate": "2013-09-30T23:48:56.667", "ClosedDate": "2013-10-01T14:57:06.780", "Score": "13", "OwnerUserId": "508343", "Tags": "<c++><performance><c++11><coding-style><lambda>", "AnswerCount": "3"}, "19018197": {"Id": "19018197", "PostTypeId": "2", "Body": "<p>Semantically, you should only be importing those variables you actually need into the scope of your lambda. For anything other than built-in types you're also likely to want capture by reference as well. </p>\n", "LastActivityDate": "2013-09-26T02:10:12.917", "CommentCount": "5", "CreationDate": "2013-09-26T02:10:12.917", "ParentId": "19018100", "Score": "0", "OwnerUserId": "1435420"}, "19018175": {"Id": "19018175", "PostTypeId": "2", "Body": "<p>Not really... most other languages don't require (or even allow) you to specify what you want to capture either.  </p>\n<p>Let the compiler infer what's necessary when it can.<br>\nIt won't make a mistake, and it won't \"accidentally\" capture something unused inside the lambda.<br>\nIf you want to be explicit (sometimes that makes sense), that's what traditional functors are perfect for.</br></br></p>\n", "LastEditorUserId": "541686", "LastActivityDate": "2013-09-26T02:13:48.247", "Score": "1", "CreationDate": "2013-09-26T02:06:31.637", "ParentId": "19018100", "CommentCount": "0", "OwnerUserId": "541686", "LastEditDate": "2013-09-26T02:13:48.247"}});