post_cb({"bq_ids": {"n4140": {"so_33260200_33284053_0": {"length": 10, "quality": 1.0, "section_id": 5797}, "so_33260200_33284388_0": {"length": 65, "quality": 0.8552631578947368, "section_id": 370}, "so_33260200_33284053_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5797}}, "n3337": {"so_33260200_33284053_0": {"length": 10, "quality": 1.0, "section_id": 5570}, "so_33260200_33284388_0": {"length": 65, "quality": 0.8552631578947368, "section_id": 360}, "so_33260200_33284053_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5570}}, "n4659": {"so_33260200_33284053_0": {"length": 10, "quality": 1.0, "section_id": 7256}, "so_33260200_33284388_0": {"length": 66, "quality": 0.868421052631579, "section_id": 384}, "so_33260200_33284053_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 7256}}}, "33284053": {"Id": "33284053", "PostTypeId": "2", "Body": "<p>You cannot know how exactly how the compiler implements special members. More exactly, common compilers do not directly show it to you. You could imagine that a compiler could explicitely generate the source for those special members, but it is not required, and I do not know any that does it.</p>\n<p>The standard only specify:</p>\n<ul>\n<li>when those members should be automatically generated by the compiler (answered in this question)</li>\n<li>what those automatically generated members shall do</li>\n</ul>\n<p>The how is never specified because 1.9 Program execution [intro.execution] \u00a71 says</p>\n<blockquote>\n<p id=\"so_33260200_33284053_0\">...conforming implementations are required to emulate (only) <strong>the observable behavior</strong> of the abstract machine as explained below.</p>\n</blockquote>\n<p>(emphasize mine).</p>\n<p>and a note defines this as the <em>as-if rule</em>:</p>\n<blockquote>\n<p id=\"so_33260200_33284053_1\">This provision is sometimes called the \u201cas-if\u201d rule, because an implementation is free to disregard any requirement of this\n  International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the\n  observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can\n  deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.</p>\n</blockquote>\n", "LastActivityDate": "2015-10-22T14:53:35.973", "Score": "0", "CreationDate": "2015-10-22T14:53:35.973", "ParentId": "33260200", "CommentCount": "0", "OwnerUserId": "3545273"}, "33260200": {"ViewCount": "90", "Body": "<p><a href=\"https://en.wikipedia.org/wiki/Special_member_functions\" rel=\"nofollow noreferrer\">Special member functions - Wikipedia, the free encyclopedia</a> says that special member functions listed below will be automatically generated  if conditions are met.</p>\n<ul>\n<li>Default constructor</li>\n<li>Copy constructor</li>\n<li>Move constructor</li>\n<li>Copy assignment operator</li>\n<li>Move assignment operator</li>\n<li>Destructor</li>\n</ul>\n<p>Q1. How can I see the implementation of special member functions which compilers automatically generated?</p>\n<p>Q2. Does the implementations depend on compilers? Or is it defined by C++ standard?</p>\n<p>EDIT - My questions is <strong>how</strong> the compilers generate the functions, not <strong>when</strong>. I want to know the source code which compilers generate as correctly as possible. I don't think this question is duplicate of <a href=\"https://stackoverflow.com/questions/8621052/when-does-the-compiler-provide-definitions-for-the-special-members-of-a-class\">c++ - When does the compiler provide definitions for the special members of a class? - Stack Overflow</a>.</p>\n", "AcceptedAnswerId": "33284053", "Title": "How to know special member functions implementation compilers automatically generated?", "CreationDate": "2015-10-21T13:07:18.040", "Id": "33260200", "CommentCount": "5", "LastEditDate": "2017-05-23T12:14:41.173", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-22T15:08:32.950", "Score": "1", "OwnerUserId": "3279819", "Tags": "<c++>", "AnswerCount": "2"}, "33284388": {"Id": "33284388", "PostTypeId": "2", "Body": "<p>Well, I'll start with the default constructor. Maybe others can edit this and add info for other constructors etc. SO was meant to be a collaborative effort.</p>\n<h2>Default constructor.</h2>\n<p>Relevant standardese:</p>\n<b>C++14 \u00a712.1/5</b>\n<blockquote>\n<p id=\"so_33260200_33284388_0\"><strong>\u201d</strong> [\u2026] The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no <em>ctor-initializer</em> (12.6.2) and an empty <em>compound-statement</em>. If that user-written default constructor would be ill-formed, the program is ill-formed. If that user-written default constructor would satisfy the requirements of a <code>constexpr</code> constructor (7.1.5), the implicitly-defined default constructor is <code>constexpr</code>. Before the defaulted default constructor for a class is implicitly defined, all the non-user-provided default constructors for its base classes and its non-\n  static data members shall have been implicitly defined. [<em>Note:</em> An implicitly-declared default constructor has an <em>exception-specification</em> (15.4). An explicitly-defaulted definition might have an implicit <em>exception-\n  specification</em>, see 8.4. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>In effect, the generated default constructor for a class <code>T</code> looks like</p>\n<pre><code>T(){}\n</code></pre>\n<p>or</p>\n<pre><code>constexpr T(){}\n</code></pre>\n<p>depending on whether it <em>can</em> be <code>constexpr</code>.</p>\n<p>One important consequence is that members of built-in types are not initialized, and are therefore left with <em>indeterminate values</em>. Except for <code>char</code> types it's formally UB to use such values, although in practice, on modern machines it's just arbitrary values.</p>\n<p>One important consideration is that this does not affect value initialization, e.g. the effect of <code>T()</code>. It doesn't use the generated default constructor and ends up zero-initializing members of built-in types.</p>\n", "LastActivityDate": "2015-10-22T15:08:32.950", "Score": "0", "CreationDate": "2015-10-22T15:08:32.950", "ParentId": "33260200", "CommentCount": "0", "OwnerUserId": "464581"}});