post_cb({"5359954": {"Id": "5359954", "PostTypeId": "2", "Body": "<p>Obviously, it takes memory. And <code>int A::obj_s=0</code> is exactly what it does: it defines the variable along with it's memory. In fact, when we say we defined a variable <code>X</code>, that means we define a memory of <code>sizeof(X)</code>, and that memory region we label as <code>X</code>.</p>\n<hr>\n<p>More about static members:</p>\n<p><code>A::obj_s</code> is a static member of the class <code>A</code>. And static members exist without any instance. They're not part of instances of <code>A</code>. </p>\n<p>\u00a79.4.2/3 and 7 from the Standard,</p>\n<blockquote>\n<p id=\"so_5359930_5359954_0\"><strong>once the static data member has been\n  defined, it exists even if no objects\n  of its class have been created.</strong></p>\n<p id=\"so_5359930_5359954_1\">Static data members are initialized\n  and destroyed <strong>exactly like</strong> non-local\n  objects (3.6.2, 3.6.3).</p>\n</blockquote>\n<p>Read my complete answer here: </p>\n<p><a href=\"https://stackoverflow.com/questions/4842056/do-static-members-of-a-class-occupy-memory-if-no-object-of-that-class-is-created\">Do static members of a class occupy memory if no object of that class is created?</a></p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2011-03-19T04:09:02.833", "Score": "7", "CreationDate": "2011-03-19T03:57:36.003", "ParentId": "5359930", "CommentCount": "2", "OwnerUserId": "415784", "LastEditDate": "2017-05-23T12:16:52.823"}, "bq_ids": {"n4140": {"so_5359930_5359954_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 5911}, "so_5359930_5359954_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5907}}, "n3337": {"so_5359930_5359954_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 5683}, "so_5359930_5359954_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5679}}, "n4659": {"so_5359930_5359954_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 7393}, "so_5359930_5359954_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7389}}}, "5359930": {"ViewCount": "5202", "Body": "<p>I posted a question recently:\n<a href=\"https://stackoverflow.com/questions/5359718/initialization-of-static-class-members\">Initialization of Static Class members.</a></p>\n<p>Now please check this code:</p>\n<pre><code>#include&lt;iostream&gt;\nclass A\n{\n    static int obj_s;\npublic: \n    A()\n    {\n        obj_s++;\n        std::cout &lt;&lt; A::obj_s &lt;&lt; \"\\nObject(s) Created\\n\";\n    }\n};\n\nint A::obj_s = 0;\n\nint main()\n{\n}\n</code></pre>\n<p>Even though one has not created any object of Class A, making the member <code>obj_s</code> hold a value <code>0</code> - wouldn't it need memory since its getting defined?</p>\n", "AcceptedAnswerId": "5359954", "Title": "Memory Allocation of Static Members in a Class", "CreationDate": "2011-03-19T03:52:16.860", "Id": "5359930", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:31:59.093", "LastEditorUserId": "-1", "LastActivityDate": "2011-03-19T11:29:15.287", "Score": "7", "OwnerUserId": "418729", "Tags": "<c++><visual-c++><c++11>", "AnswerCount": "3"}, "5359945": {"Id": "5359945", "PostTypeId": "2", "Body": "<p>The member <code>obj_s</code> is static this means it is defined independently of the class.</p>\n<p>The line:</p>\n<pre><code>int A::obj_s=0;\n</code></pre>\n<p>Not only defines its value but also defines the memory it uses.<br>\nThat is why in the previous question you were getting a linker error (no space had been allocated for 'obj_s`. Now that you have added the line the compiler is defined the memory location(s) used by the object and the program now links.</br></p>\n", "LastActivityDate": "2011-03-19T03:55:50.547", "CommentCount": "2", "CreationDate": "2011-03-19T03:55:50.547", "ParentId": "5359930", "Score": "0", "OwnerUserId": "14065"}, "5359961": {"Id": "5359961", "PostTypeId": "2", "Body": "<p>Since the class is never instantiated, the constructor will be omitted at the link stage, and therefore probably so will the static member, since it is only ever referenced by the constructor.</p>\n<p>I'm not 100% sure of the above statement. My biggest uncertainty is whether the zero-initialisation constitutes a reference.</p>\n<p><strong>EDIT</strong>: Scratch that. I just tested and found that gcc emits the static object into the final executable, even when it isn't used at all.</p>\n<p><strong>EDIT 2</strong>: It just occurred to me that if the class's methods and static member are all defined in a separate compilation unit, they will in fact be elided from the final executable. They only pop up in the test case because the linker only prunes at the compilation-unit level, not individual symbols.</p>\n<p><strong>EDIT 3</strong>: No, scratch even that. It seems that gcc wants to link against every .o, even those that aren't referenced directly or indirectly by <code>main()</code>. You learn something new every day.</p>\n", "LastEditorUserId": "9990", "LastActivityDate": "2011-03-19T04:19:48.523", "Score": "0", "CreationDate": "2011-03-19T03:59:27.370", "ParentId": "5359930", "CommentCount": "0", "OwnerUserId": "9990", "LastEditDate": "2011-03-19T04:19:48.523"}});