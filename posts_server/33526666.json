post_cb({"33526666": {"CommentCount": "0", "AcceptedAnswerId": "33526987", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-11-04T16:12:26.160", "LastActivityDate": "2015-11-04T16:28:18.570", "LastEditDate": "2015-11-04T16:28:18.570", "ViewCount": "1294", "FavoriteCount": "4", "Title": "Can I override a virtual function with a pure virtual one?", "Id": "33526666", "Score": "25", "Body": "<p>I have three classes: <code>B</code>, <code>D</code> and <code>G</code>.  <code>D</code> is a <code>B</code> and <code>G</code> is a <code>D</code>.  Both <code>B</code> and <code>D</code> are abstract.  <code>B</code> is from a third party.</p>\n<p><code>B</code> has a non-pure, virtual method that <code>G</code> needs to implement (to be a <code>D</code>).  Can I <strong>and is it good practice to</strong> redefine/override a virtual function to be pure virtual?</p>\n<p>Example:</p>\n<pre><code>class B // from a third party\n{\npublic:\n   virtual void foo();\n};\n\nclass D : public B\n{\npublic:\n   void foo() override = 0; // allowed by gcc 4.8.2\n   virtual void bar() = 0;\n};\n\nclass G : public D\n{\npublic:\n   // forgot to reimplement foo\n   void bar() override;\n};\n\nint main()\n{\n   G test;  // compiler error is desired\n}\n</code></pre>\n<p>To the question of \"can I?\" gcc allows it, but I do not have the terms/vocabulary to verify the behavior is part of the standard or is undefined and happens to work today.</p>\n", "Tags": "<c++><c++11><virtual><language-lawyer><pure-virtual>", "OwnerUserId": "1229250", "AnswerCount": "2"}, "33526834": {"ParentId": "33526666", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2015-11-04T16:18:55.597", "Score": "2", "LastEditorUserId": "2877241", "LastEditDate": "2015-11-04T16:25:01.650", "Id": "33526834", "OwnerUserId": "2877241", "Body": "<p>If you compile the code with a more modern compiler then you'll get the following error messages that explain the problem</p>\n<pre><code>prog.cc:23:6: error: variable type 'G' is an abstract class\n   G test;  // compiler error is desired\n     ^\nprog.cc:10:9: note: unimplemented pure virtual method 'foo' in 'G'\n   void foo() override = 0; // allowed by gcc 4.8.2\n        ^\n1 error generated.\n</code></pre>\n<p>As for the Standard then (10.3 Virtual functions)</p>\n<blockquote>\n<p id=\"so_33526666_33526834_0\">11 A virtual function <strong>declared in a class</strong> shall be defined, <strong>or\n  declared pure</strong> (10.4) in that class, or both; but no diagnostic is\n  required (3.2).</p>\n</blockquote>\n", "LastActivityDate": "2015-11-04T16:25:01.650"}, "bq_ids": {"n4140": {"so_33526666_33526834_0": {"section_id": 7012, "quality": 0.9230769230769231, "length": 12}, "so_33526666_33526987_2": {"section_id": 7022, "quality": 0.8235294117647058, "length": 14}, "so_33526666_33526987_0": {"section_id": 447, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_33526666_33526987_0": {"section_id": 438, "quality": 0.5714285714285714, "length": 4}, "so_33526666_33526987_2": {"section_id": 6768, "quality": 0.8235294117647058, "length": 14}, "so_33526666_33526834_0": {"section_id": 6758, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_33526666_33526987_0": {"section_id": 469, "quality": 0.5714285714285714, "length": 4}, "so_33526666_33526987_2": {"section_id": 8519, "quality": 0.8235294117647058, "length": 14}, "so_33526666_33526834_0": {"section_id": 8509, "quality": 0.8461538461538461, "length": 11}}}, "33526987": {"ParentId": "33526666", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2015-11-04T16:26:27.517", "Score": "23", "LastEditorUserId": "434551", "LastEditDate": "2015-11-04T16:27:33.790", "Id": "33526987", "OwnerUserId": "434551", "Body": "<p>You asked:</p>\n<blockquote>\n<p id=\"so_33526666_33526987_0\">Can I override a virtual function with a pure virtual one?</p>\n</blockquote>\n<p>The answer is: Yes, you can. From the C++11 standard:</p>\n<blockquote>\n<p id=\"so_33526666_33526987_1\"><strong>10.4 Abstract classes</strong></p>\n<p id=\"so_33526666_33526987_2\">5 [ <em>Note:</em> An abstract class can be derived from a class that is not abstract, and a pure virtual function may override a virtual function which is not pure. \u2014<em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2015-11-04T16:27:33.790"}});