post_cb({"bq_ids": {"n4140": {"so_40176585_40176800_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5425}}, "n3337": {"so_40176585_40176800_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5220}}, "n4659": {"so_40176585_40176800_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6847}}}, "40176800": {"Id": "40176800", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_40176585_40176800_0\"><code>N3337 [dcl.constexpr]/9:</code> A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. [...]</p>\n</blockquote>\n<p>Since you declared <code>k</code> as <code>constexpr</code>, it is also declared as <code>const</code>, so the <code>const int&amp;</code> is selected in overload resolution. </p>\n", "LastActivityDate": "2016-10-21T12:33:31.720", "CommentCount": "0", "CreationDate": "2016-10-21T12:33:31.720", "ParentId": "40176585", "Score": "2", "OwnerUserId": "496161"}, "40177373": {"Id": "40177373", "PostTypeId": "2", "Body": "<pre><code>foo(1);\n</code></pre>\n<p>In this case a temporary variable with the value <code>1</code> is passed to the function <code>foo</code>, hence non-const rvalue.</p>\n<pre><code>/*static*/ constexpr int k = 1;\nfoo(k);\n</code></pre>\n<p>Here a named const variable with the value <code>1</code> is passed to the function <code>foo</code>, hence const lvalue. The <code>static</code> keyword has no effect on a <code>constexpr</code> variable at function scope.</p>\n<blockquote>\n<p id=\"so_40176585_40177373_0\">What exactly is a constexpr variable treated as?</p>\n</blockquote>\n<p>When used in an expression that is not a constant expression, a <code>constexpr</code> variable is just a <code>const</code> variable.</p>\n<blockquote>\n<p id=\"so_40176585_40177373_1\">Why does a constexpr at class scope fail to be passed to a function taking universal reference?!</p>\n</blockquote>\n<p>You are getting a linker error because you odr-used the variable without defining it. You need a definition of <code>F::k</code> at namespace scope in exactly one translation unit, just like you did for <code>static const</code> member variables in C++98.</p>\n", "LastActivityDate": "2016-10-21T13:01:35.247", "CommentCount": "0", "CreationDate": "2016-10-21T13:01:35.247", "ParentId": "40176585", "Score": "1", "OwnerUserId": "1639256"}, "40176585": {"ViewCount": "167", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nvoid foo(int&amp; k) { std::cout &lt;&lt; \"int&amp;\\n\"; }\nvoid foo(int&amp;&amp; k) { std::cout &lt;&lt; \"int&amp;&amp;\\n\"; }\nvoid foo(const int&amp; k) { std::cout &lt;&lt; \"const int&amp;\\n\"; }\nvoid foo(const int&amp;&amp; k) { std::cout &lt;&lt; \"const int&amp;&amp;\\n\"; }    \nint main() {\n  static  constexpr int k = 1;\n  foo(k);\n  foo(1);\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>const int&amp;\nint&amp;&amp;\n</code></pre>\n<p>What exactly is a constexpr variable treated as?\nThe overload for <code>foo</code> gives <code>const int&amp;</code>.</p>\n<p>Edit: Moving on with constexpr being deduced as <code>const T&amp;</code>;</p>\n<p><strong>Why does a constexpr at class scope fail to be passed to a function taking universal reference?!</strong></p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T&gt;\nvoid goo(T&amp;&amp; k) {\n  static_assert(std::is_same&lt;decltype(k), const int&amp;&gt;::value, \"k is const int&amp;\");\n}\n\nclass F {\n  static  constexpr int k = 1;\npublic:\n  void kk2 () { goo(k); }\n};\n\nint main () {\n  F a;\n  a.kk2();\n}\n</code></pre>\n<p>The above fails to compile giving error <code>undefined reference to F::k</code>\nHowever the below passes:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T&gt;\nvoid goo(T&amp;&amp; k) {\n  static_assert(std::is_same&lt;decltype(k), const int&amp;&gt;::value, \"k is const int&amp;\");\n}\n\nint main() {\n  static  constexpr int k = 1;\n  goo(k);\n}\n</code></pre>\n", "AcceptedAnswerId": "40177373", "Title": "What is the deduced type of a constexpr?", "CreationDate": "2016-10-21T12:22:43.577", "Id": "40176585", "CommentCount": "1", "LastEditDate": "2016-10-21T12:46:18.917", "PostTypeId": "1", "LastEditorUserId": "2777063", "LastActivityDate": "2016-10-21T13:01:35.247", "Score": "8", "OwnerUserId": "2777063", "Tags": "<c++><c++11><templates><overloading><constexpr>", "AnswerCount": "2"}});