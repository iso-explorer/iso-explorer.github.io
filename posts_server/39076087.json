post_cb({"39076087": {"Tags": "<c++11><lambda>", "ViewCount": "28", "LastEditDate": "2016-08-22T09:40:23.360", "CreationDate": "2016-08-22T09:38:38.327", "LastEditorUserId": "6140624", "Title": "return a lambda capturing function paramter reference", "CommentCount": "2", "AcceptedAnswerId": "39076216", "Score": "1", "OwnerUserId": "6140624", "Id": "39076087", "LastActivityDate": "2016-08-22T09:44:21.723", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nstd::function&lt;void(void)&gt; makeLambda(int param)\n{\n    return [&amp;param](){cout &lt;&lt; param &lt;&lt; endl;};\n}\n\nint main()\n{\n    auto callback = makeLambda(5);\n    callback();\n}\n</code></pre>\n<p>Based on <a href=\"http://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow\" title=\"lamdba\">lambda description</a> as following, it looks the program will cause an undefined behavior because when callback is invoked, the captured var, function parameter, is out-of-scope. But I see it always can print 5.</p>\n<p>My g++ version is gcc-4.9.1.</p>\n<blockquote>\n<p id=\"so_39076087_39076087_0\">Dangling references</p>\n<p id=\"so_39076087_39076087_1\">If an entity is captured by reference, implicitly or explicitly, and\n  the function call operator of the closure object is invoked after the\n  entity's lifetime has ended, undefined behavior occurs. The C++\n  closures do not extend the lifetimes of the captured references.</p>\n<p id=\"so_39076087_39076087_2\">Same applies to the lifetime of the object pointed to by the captured\n  this pointer.</p>\n</blockquote>\n<p>Can anyone help me understand why it can work?</p>\n", "PostTypeId": "1", "AnswerCount": "1"}, "39076216": {"ParentId": "39076087", "Score": "2", "CreationDate": "2016-08-22T09:44:21.723", "Id": "39076216", "OwnerUserId": "496161", "LastActivityDate": "2016-08-22T09:44:21.723", "Body": "<p>As you note, this is undefined behaviour. Anything can happen, including appearing to work. If you switch compiler, change flags, forget to do the dishes, or get up an hour later, you could get completely different results.</p>\n<p>As an example, Clang <a href=\"http://coliru.stacked-crooked.com/a/7fdf9f70130e0955\" rel=\"nofollow\">prints 32767</a> for some version and set of flags.</p>\n", "PostTypeId": "2", "CommentCount": "1"}, "bq_ids": {"n4659": {"so_39076087_39076087_2": {"length": 4, "section_id": 8704, "quality": 0.5714285714285714}}}});