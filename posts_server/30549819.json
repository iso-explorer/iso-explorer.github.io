post_cb({"30549819": {"CommentCount": "0", "ViewCount": "2164", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-05-30T18:26:20.230", "LastActivityDate": "2015-05-30T18:37:27.947", "Title": "Can I use an array in a case statement?", "AcceptedAnswerId": "30549858", "LastEditDate": "2015-05-30T18:37:27.947", "Id": "30549819", "Score": "3", "Body": "<p>I would like to use an array of const int in a switch/case statement in C++. Is it possible? So far I've tried something like:</p>\n<pre><code>int main()\n{\n    int const tab[3] = {1,2,3};\n    int value(2);\n    switch(value)\n    {\n        case tab[1]:\n            cout &lt;&lt; \"result is: \" &lt;&lt; tab[0]&lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>However the compiler keeps telling me:</p>\n<pre><code>.../main.cpp|11|error: the value of \u2018tab\u2019 is not usable in a constant expression\n</code></pre>\n<p>Well I declared my array as \"int const\", isn't it enough?</p>\n", "Tags": "<c++><arrays><switch-statement><case>", "OwnerUserId": "4956865", "AnswerCount": "2"}, "30549853": {"ParentId": "30549819", "CommentCount": "0", "CreationDate": "2015-05-30T18:30:54.170", "OwnerUserId": "3789604", "PostTypeId": "2", "Id": "30549853", "Score": "2", "Body": "<p>No you don't need <code>const</code>, you need <code>constexpr</code>. Rewrite your code with :</p>\n<pre><code>int main()\n{\n    constexpr int tab[3] = {1,2,3};\n    int value(2);\n    switch(value)\n    {\n        case tab[1]:\n            cout &lt;&lt; \"result is: \" &lt;&lt; tab[0]&lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>Since you need value of <code>tab</code> at compile time it should be a <code>constexpr</code> expression. Also every <code>case</code> statement takes <em>constant-expression</em> <strong>not</strong> <em>constant-value</em>. <code>const</code> will make it <em>constant-value</em>, whereas <code>constexpr</code> will make it <em>constant-expression</em>.</p>\n", "LastActivityDate": "2015-05-30T18:30:54.170"}, "30549858": {"ParentId": "30549819", "CommentCount": "4", "CreationDate": "2015-05-30T18:31:40.193", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "30549858", "Score": "6", "Body": "<p>Every <code>case</code> statement must take a <em>constant-expression</em>, which is defined as:</p>\n<blockquote>\n<p id=\"so_30549819_30549858_0\">A <em>conditional-expression</em> <em>e</em> is a <em>core constant expression</em> unless the evaluation of <em>e</em>, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions:</p>\n<ul>\n<li>[...]</li>\n<li>an lvalue-to-rvalue conversion (4.1) unless it is applied to\n  <ul>\n<li>a non-volatile glvalue of integral or enumeration type that refers to a non-volatile const object with\n  a preceding initialization, initialized with a constant expression <em>[ Note:</em> a string literal (2.14.5)\n  corresponds to an array of such objects. <em>\u2014end note ]</em>, or</li>\n<li>a non-volatile glvalue that refers to a non-volatile object defined with <code>constexpr</code>, or that refers\n  to a non-mutable sub-object of such an object, or</li>\n<li>a non-volatile glvalue of literal type that refers to a non-volatile object whose lifetime began\n  within the evaluation of e;</li>\n</ul></li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Your case is an lvalue-to-rvalue conversion, but none of those three bullet points apply, so <code>tab[1]</code> is not a core constant expression. However, that second sub-bullet point offers us a clue: what if the object were defined with <code>constexpr</code>! That would make <code>tab[1]</code> a constant expression, and thus, this compiles:</p>\n<pre><code>constexpr int tab[3] = {1,2,3};\nint value(2);\nswitch(value)\n{\n    case tab[1]:\n        cout &lt;&lt; \"result is: \" &lt;&lt; tab[0]&lt;&lt; endl;\n}\n</code></pre>\n<p><code>const</code> doesn't make an object a constant expression. It just makes it non-mutable. Note that the following is totally valid code:</p>\n<pre><code>int x;\ncin &gt;&gt; x;\nconst int y = x; // obviously, y can't be a constant expression\n</code></pre>\n", "LastActivityDate": "2015-05-30T18:31:40.193"}, "bq_ids": {"n4140": {"so_30549819_30549858_0": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_30549819_30549858_0": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}}}});