post_cb({"30309295": {"Id": "30309295", "PostTypeId": "2", "Body": "<p>Calling the assignment operator on a thread checks to see if the thread is <code>joinable()</code> if it is then <code>std::terminate()</code> is called.  If it is not then it assigns the state of the thread on the right hand side to the thread being assigned to.  It then leaves the thread on the right hand side in a default constructed state.</p>\n<p>This is called a move assignment.  The actual assignment operator is deleted.</p>\n", "LastActivityDate": "2015-05-18T17:20:25.097", "CommentCount": "0", "CreationDate": "2015-05-18T17:20:25.097", "ParentId": "30309174", "Score": "2", "OwnerUserId": "4342498"}, "30309285": {"Id": "30309285", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30309174_30309285_0\">assigning to a joined <code>std::thread</code> object should call its destructor</p>\n</blockquote>\n<p>No it shouldn't! Destructors are only called when objects are destroyed, hence the name.</p>\n<blockquote>\n<p id=\"so_30309174_30309285_1\">and represents a legitimate operation</p>\n</blockquote>\n<p>It's fine as long as the thread is not joinable (as is the case in your example). Otherwise, <code>terminate</code> will be called.</p>\n<p>If you were to read the standard, rather than dubious online \"documentation\", you'd find in [thread.thread.assign]</p>\n<blockquote>\n<p id=\"so_30309174_30309285_2\"><em>Effects:</em> If <code>joinable()</code>, calls <code>terminate()</code>. Otherwise, assigns the state of <code>x</code> to <code>*this</code> and sets <code>x</code> to a default constructed state.</p>\n</blockquote>\n", "LastActivityDate": "2015-05-18T17:19:52.270", "CommentCount": "0", "CreationDate": "2015-05-18T17:19:52.270", "ParentId": "30309174", "Score": "5", "OwnerUserId": "204847"}, "30309174": {"ViewCount": "131", "Body": "<p>From what I could gather in C++ online documentation, assigning to a joined <em>std::thread</em> object should call its destructor and represents a legitimate operation. Is this the case?</p>\n<p>Here some example to show what I mean:</p>\n<pre><code>#include &lt;thread&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n    vector&lt;thread&gt; tvec;\n    for(int = 0; i &lt; 3; ++i)\n    {\n        tvec.push_back(thread(foo));\n    }\n    for(size_t i = 0; i &lt; 3; ++i)\n    {\n        tvec[i].join();\n        tvec[i] = thread(foo); // is this ok?\n    }\n    for(auto&amp; t : tvec)\n    {\n        t.join();\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "30309285", "Title": "Is it ok to replace std::thread objects?", "CreationDate": "2015-05-18T17:13:05.180", "Id": "30309174", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-05-18T17:20:25.097", "Score": "0", "OwnerUserId": "1948945", "Tags": "<c++><variable-assignment><stdthread>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30309174_30309285_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 2718}}, "n3337": {"so_30309174_30309285_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 2679}}, "n4659": {"so_30309174_30309285_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 3458}, "so_30309174_30309285_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 4799}}}});