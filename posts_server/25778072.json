post_cb({"bq_ids": {"n4140": {"so_25778072_25778194_0": {"length": 39, "quality": 0.975, "section_id": 5920}, "so_25778072_25778139_0": {"length": 6, "quality": 0.75, "section_id": 5914}, "so_25778072_25778072_0": {"length": 21, "quality": 1.0, "section_id": 5920}}, "n3337": {"so_25778072_25778139_0": {"length": 6, "quality": 0.75, "section_id": 5686}, "so_25778072_25778072_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 5692}}, "n4659": {"so_25778072_25778194_0": {"length": 35, "quality": 0.875, "section_id": 7413}, "so_25778072_25778139_0": {"length": 6, "quality": 0.75, "section_id": 4048}, "so_25778072_25778072_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 7413}}}, "25778193": {"Id": "25778193", "PostTypeId": "2", "Body": "<p>No, your attempted clarification is wrong.  Here is a union-like class X:</p>\n<pre><code>struct X\n{\n    int a;\n    union {\n        double b;\n        long c;\n    };\n};\n</code></pre>\n<p><code>X::a</code> is a non-static data member of a union-like class <code>X</code> that is not an anonymous union.  But it most definitely is NOT a variant member.</p>\n<p>All non-static data members of a union are variant members.  For union-like classes which are not unions, only those nested within union subobjects are variant members.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2014-09-11T02:43:56.123", "Score": "5", "CreationDate": "2014-09-11T02:38:02.513", "ParentId": "25778072", "CommentCount": "0", "LastEditDate": "2014-09-11T02:43:56.123", "OwnerUserId": "103167"}, "25778194": {"Id": "25778194", "PostTypeId": "2", "Body": "<p>Seems like <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">latest publicly avalable draft</a> (2013-10-13) have a more refined definition, quote:</p>\n<blockquote>\n<p id=\"so_25778072_25778194_0\">A <em>union-like class</em> is a union or a class that has an anonymous union\n  as a direct member. A union-like class X has a set of <em>variant\n  members</em>. If <code>X</code> is a union, a non-static data member of <code>X</code> that is\n  not an anonymous union is a variant member of <code>X</code>. In addition, a\n  non-static data member of an anonymous union that is a member of <code>X</code>\n  is also a variant member of <code>X</code>. At most one variant member of a union\n  may have a <em>brace-or-equal-initializer</em>. Example:</p>\n</blockquote>\n<pre><code>union U {\n    int x = 0;\n    union { };\n    union {\n        int z;\n        int y = 1; // error: initialization for second variant member of U\n    };\n};\n</code></pre>\n<p>As for the question, the bolded part is actually defines what is a <em>variant member</em>, which a <em>union-like class</em> has to have (by having a <code>union</code> as a direct member) to be a <em>union-like class</em>.</p>\n", "LastEditorUserId": "735446", "LastActivityDate": "2014-09-11T02:57:20.690", "Score": "0", "CreationDate": "2014-09-11T02:38:10.927", "ParentId": "25778072", "CommentCount": "2", "LastEditDate": "2014-09-11T02:57:20.690", "OwnerUserId": "735446"}, "25778139": {"Id": "25778139", "PostTypeId": "2", "Body": "<p>I feel your pain, it takes many years of cognitive damage caused by looking over standards documents, to be able to correctly parse that sort of stuff.</p>\n<blockquote>\n<p id=\"so_25778072_25778139_0\">only if it is a union can it have a non-static variant member that is not an anonymous union?</p>\n</blockquote>\n<p>Not quite.</p>\n<p>It's not saying that <em>only</em> the union version of a union-like class can have the non-static blah blah blah.</p>\n<p>What it's saying is both can <em>have</em> it (technically, it's not <em>saying</em> that but it's declining to refute the possibility), but only the union version will have it treated as \"a variant member of X\".</p>\n", "LastActivityDate": "2014-09-11T02:32:52.900", "Score": "2", "CreationDate": "2014-09-11T02:32:52.900", "ParentId": "25778072", "CommentCount": "0", "OwnerUserId": "14860"}, "25778072": {"ViewCount": "167", "Body": "<p>\u00a79.5/9 from the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_25778072_25778072_0\">A <em>union-like class</em> is a union or a class that has an anonymous union as a direct member. A union-like class <code>X</code> has a set of <em>variant members</em>. <strong>If <code>X</code> is a <code>union</code>, a non-static data member of <code>X</code> that is not an anonymous union is a variant member of <code>X</code>.</strong></p>\n</blockquote>\n<p>Is the part in bold saying that between a union-like class that is either a class or a union, only if it is a union can it have a non-static variant member that is not an anonymous union? If this is so, why? And what practical difference does it make in code?</p>\n<p>I'm actually questioning whether this statement meant to say \"If <code>X</code> is a <em>union-like class</em>...\". It would make full sense to me then.</p>\n<p>Either way, this clause has been bugging me for the past few days and I wish to fully comprehend what it is stating.</p>\n", "AcceptedAnswerId": "25778193", "Title": "Potentially ambiguous statement in \u00a79.5/8", "CreationDate": "2014-09-11T02:25:18.730", "Id": "25778072", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-09-11T02:57:20.690", "Score": "5", "OwnerUserId": "701092", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}});