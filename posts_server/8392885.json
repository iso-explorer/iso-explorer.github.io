post_cb({"8392919": {"Id": "8392919", "PostTypeId": "2", "Body": "<p>Nothing is <em>always</em> inlined (unless your compiler has an attribute or private keyword to force it to do so...at which point you're writing $(COMPILER)-flavored C++ rather than standard C++).  Very long functions,  recursive functions, and a few other things generally aren't inlined.</p>\n<p>The compiler can choose not to inline stuff if it determines that doing so will degrade performance, unreasonably increase the object file's size, or make things work incorrectly.  Or if it's optimizing for size instead of speed.  Or if you ask it not to.  Or if it doesn't like your shirt.  Or if it's feeling lazy today, cause it compiled too much last night.  Or for any other reason.  Or for no reason at all.</p>\n", "LastEditorUserId": "319403", "LastActivityDate": "2011-12-05T23:47:17.793", "Score": "4", "CreationDate": "2011-12-05T22:40:17.897", "ParentId": "8392885", "CommentCount": "8", "OwnerUserId": "319403", "LastEditDate": "2011-12-05T23:47:17.793"}, "8392950": {"Id": "8392950", "PostTypeId": "2", "Body": "<p>There is no - single answer to this question. Compilers are smart beasts. You can specifically use the inline words if you want, but this doesn't mean that the compiler will actually inline the function. </p>\n<p>Inline is there to help the developer with optmization. It hints at the compiler that something should be inlined, but these hints are generally ignored nowadays, since compilers can do better at register assignment and deciding when to inline functions (in fact, a compiler can either inline or not inline a function at different times). Code generation on modern processors is far more complicated than on the more deterministic ones common when Ritchie was inventing C.</p>\n<p>What the word means now, in C++, is that it can have multiple identical definitions, and needs to be defined in every translation unit that uses it. (In other words, you need to make sure it can be inlined.) You can have an inline function in a header with no problems, and member functions defined in a class definition are automatically effectively inline.</p>\n<p>That said, I used to work with a greenhills compiler, and it actually obeyed my will more than it disobeyed it :).. It's up to the compiler, really.</p>\n", "LastActivityDate": "2011-12-05T22:42:49.877", "CommentCount": "0", "CreationDate": "2011-12-05T22:42:49.877", "ParentId": "8392885", "Score": "2", "OwnerUserId": "880096"}, "8393102": {"Id": "8393102", "PostTypeId": "2", "Body": "<p>Section [9.3], Member functions, of the C++98 Standard states:</p>\n<blockquote>\n<p id=\"so_8392885_8393102_0\">A member function may be defined (8.4) in its class definition, in which case it is an <em>inline</em> member function (7.1.2).</p>\n</blockquote>\n<p>Thus, it has always been the case that marking member functions defined in the class definition explicitly <code>inline</code> is unnecessary.</p>\n<p>On the <code>inline</code> function specifier, the Standard states:</p>\n<blockquote>\n<p id=\"so_8392885_8393102_1\">A function declaration (8.3.5, 9.3, 11.4) with an <code>inline</code> specifier declares an <em>inline function</em>. The inline specifier indicates to the [C++ compiler] that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. [However, a C++ compiler] is not required to perform this inline substitution at the point of call;</p>\n</blockquote>\n<p>So, it is up to the compiler whether it will actually inline the definition of the function rather than call it via the usual function call mechanism.</p>\n", "LastActivityDate": "2011-12-05T22:57:19.860", "CommentCount": "0", "CreationDate": "2011-12-05T22:57:19.860", "ParentId": "8392885", "Score": "4", "OwnerUserId": "196844"}, "bq_ids": {"n4140": {"so_8392885_8393102_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5881}, "so_8392885_8393068_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5402}, "so_8392885_8393102_1": {"length": 27, "quality": 0.8181818181818182, "section_id": 5402}, "so_8392885_8393068_2": {"length": 10, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_8392885_8393102_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5652}, "so_8392885_8393068_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5197}, "so_8392885_8393068_2": {"length": 10, "quality": 1.0, "section_id": 5199}, "so_8392885_8393102_1": {"length": 27, "quality": 0.8181818181818182, "section_id": 5197}}, "n4659": {"so_8392885_8393102_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 7364}, "so_8392885_8393068_1": {"length": 40, "quality": 0.8888888888888888, "section_id": 6849}, "so_8392885_8393068_2": {"length": 10, "quality": 1.0, "section_id": 6853}, "so_8392885_8393102_1": {"length": 27, "quality": 0.8181818181818182, "section_id": 6849}}}, "8393068": {"Id": "8393068", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8392885_8393068_0\">7.1.2 Function specifiers</p>\n<p id=\"so_8392885_8393068_1\">A function declaration (8.3.5, 9.3, 11.4) with an inline specifier\n  declares an inline function. The inline specifier indicates to the\n  implementation that inline substitution of the function body at the\n  point of call is to be preferred to the usual function call mechanism.\n  An implementation is not required to perform this inline substitution\n  at the point of call; however, even if this inline substitution is\n  omitted, the other rules for inline functions defined by 7.1.2 shall\n  still be respected.</p>\n</blockquote>\n<p>So, the compiler is not required to actually 'inline' any function.</p>\n<p>However, the standard also says, </p>\n<blockquote>\n<p id=\"so_8392885_8393068_2\">An inline function with external linkage shall have the same address in all translation units.</p>\n</blockquote>\n<p>Member functions normally have external linkage (one exception is when the member function belongs to a 'local' class), so inline functions must have a unique address for cases where the address of the function is taken. In this case, the compiler will arrange for the linker to throw away all but one instance of a non-inlined copy of the function and fix-up all address references to the function to be to the one that's kept.  </p>\n", "LastActivityDate": "2011-12-05T22:54:15.607", "CommentCount": "1", "CreationDate": "2011-12-05T22:54:15.607", "ParentId": "8392885", "Score": "11", "OwnerUserId": "12711"}, "8392983": {"Id": "8392983", "PostTypeId": "2", "Body": "<p>The <code>inline</code> keyword deals with c++ definition of a function.  The compiler may inline object code where ever it wants.</p>\n<p>Functions defined inline (eg they use the <code>inline</code> keyword), create object code for the function in every compilation unit.  Those functions are marked as special so the linker knows to only use one.</p>\n<p>See <a href=\"https://stackoverflow.com/a/1759575/28817\">this answer</a> for more specifics.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-12-05T22:46:19.567", "Score": "1", "CreationDate": "2011-12-05T22:46:19.567", "ParentId": "8392885", "CommentCount": "0", "OwnerUserId": "28817", "LastEditDate": "2017-05-23T12:30:18.523"}, "8392930": {"Id": "8392930", "PostTypeId": "2", "Body": "<p>It doesn't have to be inlined, no; it's just like if you specified <code>inline</code> explicitly.</p>\n<p><strike>When you write <code>inline</code>, you promise that this method won't be called from translation units where it isn't defined, and therefore, that it can have <a href=\"http://en.wikipedia.org/wiki/Linkage_%28software%29\" rel=\"nofollow\">internal linkage</a> (so the linker won't connect one object-file's reference to it to another object-file's definition of it).</strike> [This paragraph was wrong. I'm leaving it intact, just struck-out, so that the below comments will still make sense.]</p>\n", "LastEditorUserId": "978917", "LastActivityDate": "2011-12-07T12:57:50.037", "Score": "1", "CreationDate": "2011-12-05T22:41:16.260", "ParentId": "8392885", "CommentCount": "5", "OwnerUserId": "978917", "LastEditDate": "2011-12-07T12:57:50.037"}, "8392885": {"ViewCount": "1542", "Body": "<blockquote>\n<p id=\"so_8392885_8392885_0\"><strong>Edit</strong>: I've restored the original title but really what I should have asked was this: 'How do C++ linkers handle class methods which have been defined in multiple object files'</p>\n</blockquote>\n<p>Say I have a C++ class defined in a header along these lines:</p>\n<pre><code>class Klass\n{\n    int Obnoxiously_Large_Method()\n    {\n        //many thousands of lines of code here\n    }\n}\n</code></pre>\n<p>If I compile some C++ code which uses 'Obnoxiously_Large_Method' in several locations, will the resulting object file always inline the code for 'Obnoxiously_Large_Method' or will it optimise for size (for example, when using g++ -Os) and create a single instance of 'Obnoxiously_Large_Method' and use it like a normal function?, if so, how do linkers resolve the collisions between other object files which have instantiated the same function?. Is there some arcane C++ namespace Juju which keeps the separate object instances of method from colliding with each other?</p>\n", "AcceptedAnswerId": "8393068", "Title": "Are C++ class methods defined in the header always inlined?", "CreationDate": "2011-12-05T22:37:35.320", "Id": "8392885", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-12-05T23:18:05.517", "LastEditorUserId": "396458", "LastActivityDate": "2011-12-07T12:57:50.037", "Score": "8", "OwnerUserId": "300745", "Tags": "<c++><header><linker>", "AnswerCount": "6"}});