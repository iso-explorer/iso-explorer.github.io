post_cb({"4331965": {"Id": "4331965", "PostTypeId": "2", "Body": "<p>There's only one function in C++ that can be overloaded by return type, the implicit conversion operator special function, named <code>operator T()</code> (with <code>T</code> varying).</p>\n", "LastActivityDate": "2010-12-02T05:24:27.620", "CommentCount": "0", "CreationDate": "2010-12-02T05:24:27.620", "ParentId": "4331837", "Score": "0", "OwnerUserId": "103167"}, "4332342": {"Id": "4332342", "PostTypeId": "2", "Body": "<p>No, you can't overload based on the return type.</p>\n<p>From standard docs., Sec <em>13.1.2</em>,</p>\n<blockquote>\n<p id=\"so_4331837_4332342_0\">\u2014 <strong>Function declarations that differ only in the return type cannot be overloaded.</strong></p>\n</blockquote>\n<p>And regarding your library, each function might belong to a different namespace or else it ain't possible either.</p>\n", "LastActivityDate": "2010-12-02T06:36:13.287", "CommentCount": "0", "CreationDate": "2010-12-02T06:36:13.287", "ParentId": "4331837", "Score": "0", "OwnerUserId": "249490"}, "4331837": {"ViewCount": "14922", "Body": "<blockquote>\n<p id=\"so_4331837_4331837_0\"><strong>Possible Duplicates:</strong><br>\n<a href=\"https://stackoverflow.com/questions/442026/function-overloading-by-return-type\">Function overloading by return type?</a><br>\n<a href=\"https://stackoverflow.com/questions/226144/puzzle-overload-a-c-function-according-to-the-return-value\">Puzzle: Overload a C++ function according to the return value</a> </br></br></p>\n</blockquote>\n<p>Because I have a library which exposes a bunch of functions in the form of: </p>\n<pre><code>bool GetVal();\ndouble GetVal();\nint GetVal();\nlong GetVal();\n//So on.\n</code></pre>\n<p>And now I have to wrap these. I'd rather not rewrite the same set of functions again. I'd like to do something like</p>\n<pre><code>template&lt;class T&gt;\nT GetVal(){}\n</code></pre>\n<p>But I can't seem to get this working. Any ideas?</p>\n", "AcceptedAnswerId": "4332084", "Title": "Why can't functions be overloaded by return type?", "CreationDate": "2010-12-02T04:59:05.370", "LastActivityDate": "2010-12-02T06:36:13.287", "CommentCount": "4", "LastEditDate": "2017-05-23T11:54:31.983", "PostTypeId": "1", "Tags": "<c++><types><return><function-overloading>", "Id": "4331837", "AnswerCount": "5", "Score": "7", "OwnerUserId": "466694", "ClosedDate": "2010-12-02T08:23:34.513", "LastEditorUserId": "-1"}, "4331877": {"Id": "4331877", "PostTypeId": "2", "Body": "<p>You can try</p>\n<ol>\n<li><code>template &lt;typename T&gt; T GetVal(T) {...}</code> instead (using a dummy variable to perform resolution)</li>\n<li>Use type conversions</li>\n</ol>\n<p>Or just use the simplistic <code>GetValBool</code> etc.</p>\n", "LastActivityDate": "2010-12-02T05:06:40.927", "CommentCount": "2", "CreationDate": "2010-12-02T05:06:40.927", "ParentId": "4331837", "Score": "0", "OwnerUserId": "288222"}, "bq_ids": {"n4140": {"so_4331837_4332342_0": {"length": 7, "quality": 1.0, "section_id": 557}}, "n3337": {"so_4331837_4332342_0": {"length": 7, "quality": 1.0, "section_id": 548}}, "n4659": {"so_4331837_4332342_0": {"length": 7, "quality": 1.0, "section_id": 580}}}, "4332226": {"Id": "4332226", "PostTypeId": "2", "Body": "<p>The return type of functions is not a part of the mangled name which is generated by the compiler for uniquely identifying each function. The<br>\nNo of arguments<br>\nType of arguments &amp;<br>\nSequence of arguments<br>\nare the parameters which are used to generate the unique mangled name for each function. It is on the basis of these unique mangled names that compiler can understand which function to call even if the names are same(overloading).Hence.....</br></br></br></br></p>\n", "LastActivityDate": "2010-12-02T06:13:14.977", "CommentCount": "3", "CreationDate": "2010-12-02T06:13:14.977", "ParentId": "4331837", "Score": "2", "OwnerUserId": "452307"}, "4332084": {"Id": "4332084", "PostTypeId": "2", "Body": "<p>You can't overload on return types as it is not mandatory to use the return value of the functions in a function call expression.</p>\n<p>For example, I can just say</p>\n<pre><code>GetVal();\n</code></pre>\n<p>What does the compiler do now?</p>\n", "LastActivityDate": "2010-12-02T05:47:45.027", "CommentCount": "8", "CreationDate": "2010-12-02T05:47:45.027", "ParentId": "4331837", "Score": "15", "OwnerUserId": "418110"}});