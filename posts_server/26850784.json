post_cb({"26851159": {"Id": "26851159", "PostTypeId": "2", "Body": "<p>GCC and Clang are right. Within <code>Foo::tester</code>, an unqualified use of <code>Bar</code> unambiguously refers to <code>Foo::Bar</code>.</p>\n<p>Unqualified lookup is specified by C++11 3.4.1/1:</p>\n<blockquote>\n<p id=\"so_26850784_26851159_0\">the scopes are searched for a declaration in the order listed in each of the\n  respective categories; name lookup ends as soon as a declaration is found for the name.</p>\n</blockquote>\n<p>The scopes searched for the use of a name in a function are listed in 3.4.1/6:</p>\n<blockquote>\n<p id=\"so_26850784_26851159_1\">A name used in the definition of a function [...] that is a member of namespace N [...] shall be declared before its use in the block [...] or, shall be declared before its use in namespace N or, if N is a nested namespace, shall be declared before its use in one of N\u2019s  enclosing namespaces.</p>\n</blockquote>\n<p>In this case, the function is a member of <code>Foo</code>, so <code>Foo</code> is searched before the enclosing (global) namespace, which includes the unnamed namespace. <code>Foo::Bar</code> is found there, and lookup ends.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2014-11-10T19:17:08.423", "Score": "3", "CreationDate": "2014-11-10T19:11:56.120", "ParentId": "26850784", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2014-11-10T19:17:08.423"}, "bq_ids": {"n4140": {"so_26850784_26851159_0": {"length": 15, "quality": 1.0, "section_id": 7087}, "so_26850784_26851159_1": {"length": 24, "quality": 1.0, "section_id": 7092}}, "n3337": {"so_26850784_26851159_0": {"length": 15, "quality": 1.0, "section_id": 6831}, "so_26850784_26851159_1": {"length": 24, "quality": 1.0, "section_id": 6836}}, "n4659": {"so_26850784_26851159_0": {"length": 15, "quality": 1.0, "section_id": 8588}, "so_26850784_26851159_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 8593}}}, "26850784": {"ViewCount": "103", "Body": "<p>Should a reference to a name that exists in both an unnamed namespace and the local named namespace result in a error for ambiguity or is the resolution well-defined?  I'm seeing the following work fine on G++ and Clang, less well on MSVC.</p>\n<pre><code>namespace Foo\n{\n    class Bar\n    {\n    public:\n        int x;\n    };\n}\n\nnamespace\n{\n    class Bar\n    {\n    public:\n        int y;\n    };\n}\n\nnamespace Foo\n{\n\nvoid tester()\n{\n    Bar b;\n}\n\n}\n\nint main()\n{\n    Foo::tester();\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "26851159", "Title": "Unnamed and Named Namespace Resolution", "CreationDate": "2014-11-10T18:49:10.293", "Id": "26850784", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-11-10T19:17:08.423", "Score": "5", "OwnerUserId": "405051", "Tags": "<c++><namespaces>", "AnswerCount": "1"}});