post_cb({"bq_ids": {"n4140": {"so_25044767_25044767_0": {"length": 9, "quality": 0.75, "section_id": 6168}, "so_25044767_25044958_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6168}}, "n3337": {"so_25044767_25044767_0": {"length": 9, "quality": 0.75, "section_id": 5929}, "so_25044767_25044958_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 5929}}, "n4659": {"so_25044767_25044767_0": {"length": 9, "quality": 0.75, "section_id": 7665}, "so_25044767_25044958_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 7665}}}, "25044767": {"ViewCount": "94", "Body": "<p>In C++ operator ?: can be an lvalue if second and third argument is lvalue of same type, for example:</p>\n<pre><code>int foo = 0, bar = 1;\nbool condition = true;\n(condition ? foo : bar) = 42; // correct\n</code></pre>\n<p>Also it is possible to throw something in this operator: </p>\n<pre><code>bar = (condition ? foo : throw 42); // still correct\n</code></pre>\n<p>But this code doesn't compile because left expression is not an lvalue:</p>\n<pre><code>(condition ? foo : throw 42) = bar; // compile error\n</code></pre>\n<p>I check this fact in C++ standart and read this:</p>\n<blockquote>\n<p id=\"so_25044767_25044767_0\">The second or the third operand (but not both) is a throw-expression\n  (15.1); the result is of the type of the other and <strong>is an rvalue</strong>.</p>\n</blockquote>\n<p>What explanation for this rule?</p>\n", "AcceptedAnswerId": "25044958", "Title": "Why operator ?: lost lvalue-ness if second or third argument is throwing expression?", "CreationDate": "2014-07-30T18:56:36.510", "Id": "25044767", "CommentCount": "4", "LastEditDate": "2014-07-30T19:02:26.830", "PostTypeId": "1", "LastEditorUserId": "3290628", "LastActivityDate": "2014-07-30T19:07:46.353", "Score": "3", "OwnerUserId": "3290628", "Tags": "<c++>", "AnswerCount": "2"}, "25044914": {"Id": "25044914", "PostTypeId": "2", "Body": "<p><code>throw</code> has lower precedence than <code>?:</code> and <code>=</code>.  What you're effectively saying is</p>\n<p><code>condition ? foo : throw (42 = bar);</code></p>\n<p>Obviously <code>42</code> is not assignable as an rvalue.</p>\n<p>Source:  <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/operator_precedence</a></p>\n<p>(Answer refers to syntax of original question...)</p>\n", "LastActivityDate": "2014-07-30T19:05:05.687", "CommentCount": "2", "CreationDate": "2014-07-30T19:05:05.687", "ParentId": "25044767", "Score": "-1", "OwnerUserId": "3830929"}, "25044958": {"Id": "25044958", "PostTypeId": "2", "Body": "<p>This is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1560\">CWG defect 1560</a>. Quoting the defect report:</p>\n<blockquote>\n<p id=\"so_25044767_25044958_0\">A glvalue appearing as one operand of a <em>conditional-expression</em> in\n  which the other operand is a <em>throw-expression</em> is converted to a\n  prvalue, regardless of how the conditional-expression is used: [...]\n  This seems to be gratuitous and surprising.</p>\n</blockquote>\n<p>This is fixed by the resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1550\">CWG 1550</a>, now [expr.cond]/2.1 says:</p>\n<blockquote>\n<p id=\"so_25044767_25044958_1\">[If] The second or the third operand (but not both) is a (possibly\n  parenthesized) <em>throw-expression</em>; the result is\n  of the type and value category of the other.</p>\n</blockquote>\n<p>So it should work with a recent compiler.</p>\n", "LastActivityDate": "2014-07-30T19:07:44.567", "CommentCount": "4", "CreationDate": "2014-07-30T19:07:44.567", "ParentId": "25044767", "Score": "5", "OwnerUserId": "420683"}});