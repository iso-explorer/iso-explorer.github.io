post_cb({"36226045": {"Id": "36226045", "PostTypeId": "2", "Body": "<p>Since all the parameters are evaluated <em>before</em> the function is invoked, an exception, emitted by a parameter's constructor, would not violate <code>noexcept</code> contract of the function itself.</p>\n<p>To confirm this, here's what I've tried, approximating your example:</p>\n<pre><code>class A\n{\npublic:\n    A(const char *)\n    {\n        throw std::exception();\n    }\n};\n\nvoid f(A a) noexcept\n{\n\n}\n\nint main()\n{   \n    try\n    {\n        f(\"hello\");\n    }\n    catch(std::exception&amp;)\n    {\n        cerr&lt;&lt; \"Fizz...\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>The output, unsurprisingly, was <code>Fizz...</code> and the program exited normally.</p>\n", "LastEditorUserId": "1051764", "LastActivityDate": "2016-03-25T18:53:36.277", "Score": "4", "CreationDate": "2016-03-25T18:48:12.653", "ParentId": "36225823", "CommentCount": "0", "OwnerUserId": "1051764", "LastEditDate": "2016-03-25T18:53:36.277"}, "36226546": {"Id": "36226546", "PostTypeId": "2", "Body": "<p>C++ has two kinds of exception specifications:</p>\n<h3><em>dynamic-exception-specification</em> (deprecated)</h3>\n<p>which looks like this:</p>\n<pre><code>void foo() throw(x, y, z)\n</code></pre>\n<p>In this case, if an exception is thrown within <code>foo</code> that is not in the set x, y or z, then <code>std::unexpected()</code> is called. By default, this will call <code>std::terminate()</code> but you can interpose yourself by setting your own unexpected handler, which may even throw an x, y or z in order to allow the program to continue. Of course, no-one ever does this.</p>\n<h3><em>noexcept-specification</em> (since c++11)</h3>\n<p>which looks like this:</p>\n<pre><code>void foo() noexcept(); // allowed to throw exceptions\nvoid foo() noexcept(true); // allowed to throw exceptions\nvoid foo() noexcept(false); // not allowed to throw exceptions\n</code></pre>\n<p>This is where it gets interesting because the behaviour is <em>different</em> if <code>foo() noexcept(true)</code> does actually throw an exception. The standard mandates that <code>std::terminate()</code> shall be called.</p>\n<p>You have no opportunity to catch the exception or otherwise correct the situation. A solemn promise was made and broken - end of program.</p>\n<h3>From \u00a715.4  [except.spec]</h3>\n<blockquote>\n<p id=\"so_36225823_36226546_0\">10 Whenever an exception of type E is thrown and the search for a handler (15.3) encounters the outermost\n  block of a function with an exception specification that does not allow E, then,</p>\n<p id=\"so_36225823_36226546_1\">(10.1) \u2014 if the function definition has a dynamic-exception-specification, the function std::unexpected() is\n  called (15.5.2),</p>\n<p id=\"so_36225823_36226546_2\">(10.2) \u2014 otherwise, the function std::terminate() is called (15.5.1)</p>\n</blockquote>\n", "LastEditorUserId": "2015579", "LastActivityDate": "2016-03-25T19:27:48.473", "Score": "0", "CreationDate": "2016-03-25T19:22:08.193", "ParentId": "36225823", "CommentCount": "0", "OwnerUserId": "2015579", "LastEditDate": "2016-03-25T19:27:48.473"}, "bq_ids": {"n4140": {"so_36225823_36226546_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 3371}, "so_36225823_36226546_0": {"length": 12, "quality": 0.75, "section_id": 3371}, "so_36225823_36226546_1": {"length": 5, "quality": 0.625, "section_id": 3371}}, "n3337": {"so_36225823_36226546_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 3241}, "so_36225823_36226546_0": {"length": 12, "quality": 0.75, "section_id": 3241}, "so_36225823_36226546_1": {"length": 5, "quality": 0.625, "section_id": 3241}}, "n4659": {"so_36225823_36226546_0": {"length": 11, "quality": 0.6875, "section_id": 4133}}}, "36225823": {"ViewCount": "189", "Body": "<p>Given the following class declaration:</p>\n<pre><code>class phone_number\n{\npublic:\n    explicit phone_number( std::string number ) noexcept( std::is_nothrow_move_constructible&lt; std::string &gt;::value );\n}\n\nphone_number::phone_number( std::string number ) noexcept( std::is_nothrow_move_constructible&lt; std::string &gt;::value )\n    : m_originalNumber{ std::move( number ) }\n{\n\n}\n</code></pre>\n<p>Will the following line of code end up calling <code>std::terminate()</code> immediately due to the noexcept specification if an exception is thrown from the string constructor?</p>\n<pre><code>const phone_number phone(\"(123) 456-7890\");\n</code></pre>\n", "AcceptedAnswerId": "36226045", "Title": "Will an exception thrown from a noexcept function parameter's constructor immediately result in a call to std::terminate()?", "CreationDate": "2016-03-25T18:33:59.107", "Id": "36225823", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-03-25T19:27:48.473", "Score": "3", "OwnerUserId": "1181561", "Tags": "<c++><c++11><exception><noexcept>", "AnswerCount": "2"}});