post_cb({"8338152": {"ParentId": "8338121", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's for charsets that don't have <code>[</code>.</p>\n<blockquote>\n<p id=\"so_8338121_8338152_0\">\u00a76.4.6-3 (C99)</p>\n<p id=\"so_8338121_8338152_1\">In all aspects of the language, the six tokens</p>\n<pre><code>&lt;: :&gt; &lt;% %&gt; %: %:%:\n</code></pre>\n<p id=\"so_8338121_8338152_2\">behave, respectively, the same as the six tokens</p>\n<pre><code>[  ]  {  }  #  ##\n</code></pre>\n</blockquote>\n", "OwnerUserId": "714501", "LastEditorUserId": "714501", "LastEditDate": "2011-12-01T08:25:11.470", "Id": "8338152", "Score": "8", "CreationDate": "2011-12-01T08:04:13.820", "LastActivityDate": "2011-12-01T08:25:11.470"}, "8338121": {"CommentCount": "2", "AcceptedAnswerId": "8338187", "PostTypeId": "1", "ClosedDate": "2011-12-03T16:40:13.430", "LastEditorUserId": "-1", "CreationDate": "2011-12-01T08:00:54.397", "LastActivityDate": "2011-12-01T08:25:11.470", "LastEditDate": "2017-05-23T12:29:46.240", "ViewCount": "586", "FavoriteCount": "3", "Title": "What is the significance of the <: syntax in C?", "Id": "8338121", "Score": "4", "Body": "<blockquote>\n<p id=\"so_8338121_8338121_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3952648/cannot-begin-a-template-argument-list\">&lt;: cannot begin a template argument list</a> </br></p>\n</blockquote>\n<p>Did you know that</p>\n<pre><code>int a&lt;:10:&gt;;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>int a[10];\n</code></pre>\n<p>?</p>\n<p>I was writing some piece of code, where in I have a global namespace and a restricted namespace, say NS1 for now. I have a class called Module in my global namespace and I import some other libraries in NS1, which have a class called Module too. I was trying to create a std::list of my Module, i.e. ::Module inside a function in NS1 and doing so, I got this compilation error</p>\n<pre><code>std::list&lt;::Module*&gt; &amp;myModule;\n\ngenllvm.cpp:60:11: error: \u2018&lt;::\u2019 cannot begin a template-argument list\n./genllvm.cpp:60:11: note: \u2018&lt;:\u2019 is an alternate spelling for \u2018[\u2019. Insert whitespace between \u2018&lt;\u2019 and \u2018::\u2019\n./genllvm.cpp:60:11: note: (if you use \u2018-fpermissive\u2019 G++ \n</code></pre>\n<p>What is the significance of this \"&lt;:\" syntax?</p>\n", "Tags": "<c++><c><gcc>", "OwnerUserId": "524784", "AnswerCount": "4"}, "8338167": {"ParentId": "8338121", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's a mostly historic thing to deal with terminal and code page limitations.</p>\n<p>Read the short <a href=\"http://en.wikipedia.org/wiki/Digraphs_and_trigraphs\" rel=\"nofollow\">Wikipedia article on digraphs and trigraphs</a>.</p>\n", "OwnerUserId": "1088", "LastEditorUserId": "1088", "LastEditDate": "2011-12-01T08:12:18.857", "Id": "8338167", "Score": "2", "CreationDate": "2011-12-01T08:06:05.853", "LastActivityDate": "2011-12-01T08:12:18.857"}, "8338190": {"ParentId": "8338121", "CommentCount": "0", "Body": "<p>It's called <a href=\"http://en.wikipedia.org/wiki/Digraph_%28computing%29#C\" rel=\"nofollow\">digraph</a>. It was used for when terminals didn't have some of the characters used by C.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "8338190", "Score": "1", "CreationDate": "2011-12-01T08:08:00.490", "LastActivityDate": "2011-12-01T08:08:00.490"}, "bq_ids": {"n4140": {"so_8338121_8338187_0": {"section_id": 5322, "quality": 1.0, "length": 16}}, "n3337": {"so_8338121_8338187_0": {"section_id": 5119, "quality": 1.0, "length": 16}}, "n4659": {"so_8338121_8338187_0": {"section_id": 6743, "quality": 0.9375, "length": 15}}}, "8338187": {"ParentId": "8338121", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Its call alternative tokens. C++ have several of them:</p>\n<pre><code> &lt;%     {\n %&gt;     }\n &lt;:     [\n :&gt;     ]\n %:     #\n %:%:   ##\n and    &amp;&amp;\n bitor  |\n or     ||\n xor    \u02c6\n compl  ~\n bitand &amp;\n and_eq &amp;=\n or_eq  |=\n xor_eq \u02c6=\n not    !\n not_eq !=\n</code></pre>\n<p>You can seen some of the alternative token consists of letters. So you can write <code>if (a&lt;b and b&lt;c)</code> in a compiler which can correctly handle them. Their existence is for lack of symbols in keyboards or character sets. The alternative tokens are never replaced with the primary one (unlike trigraphs), but them behave the same as the primary one.</p>\n<p>However, C++0x require special treatment for <code>&lt;::</code> (2.5p3):</p>\n<blockquote>\n<p id=\"so_8338121_8338187_0\">Otherwise, if the next three characters are &lt;:: and the subsequent\n  character is neither : nor &gt;, the &lt; is treated as a preprocessor token\n  by itself and not as the first character of the alternative token &lt;:.</p>\n</blockquote>\n<p>So that <code>SomeTemplate&lt;::SomeClass&gt;</code> can be correctly handled.</p>\n", "OwnerUserId": "1058916", "LastEditorUserId": "1058916", "LastEditDate": "2011-12-01T08:20:56.203", "Id": "8338187", "Score": "10", "CreationDate": "2011-12-01T08:07:35.337", "LastActivityDate": "2011-12-01T08:20:56.203"}});