post_cb({"bq_ids": {"n4140": {"so_18258745_18258857_1": {"length": 70, "quality": 0.8333333333333334, "section_id": 6009}, "so_18258745_18258857_0": {"length": 31, "quality": 0.8857142857142857, "section_id": 6074}, "so_18258745_18258986_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 597}}, "n3337": {"so_18258745_18258857_1": {"length": 70, "quality": 0.8333333333333334, "section_id": 5777}, "so_18258745_18258857_0": {"length": 31, "quality": 0.8857142857142857, "section_id": 5842}, "so_18258745_18258986_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5714}}, "n4659": {"so_18258745_18258857_1": {"length": 64, "quality": 0.7619047619047619, "section_id": 7508}, "so_18258745_18258857_0": {"length": 24, "quality": 0.6857142857142857, "section_id": 7570}, "so_18258745_18258986_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 620}}}, "18258857": {"Id": "18258857", "PostTypeId": "2", "Body": "<p>Compiler see <code>++(*s)++</code> as <code>++((*s)++)</code>, as post-increment has higher precedence than pre-increment. After post-incrementation, <code>(*s)++</code> becomes an r-value and it can't be further pre-incremented (here).<br>\nAnd yes it is not a case of UB (at least in C).<br>\nAnd also read this <a href=\"https://stackoverflow.com/a/17850934/2455888\">answer</a>.</br></br></p>\n<p>For L2 in <strong>C++</strong> not giving error because<br>\n<strong>C++11: 5.3.2 Increment and decrement</strong> says:  </br></p>\n<blockquote>\n<p id=\"so_18258745_18258857_0\">The <strong>operand of prefix ++</strong> is modified by adding 1, or set to true if it is bool (this use is deprecated). The\n  operand shall be a modifiable lvalue. The type of the operand shall be an arithmetic type or a pointer to a completely-defined object type. <strong>The result is the updated operand; it is an lvalue</strong>, and it is a bit-field if the operand is a bit-field. If x is not of type bool, the expression ++x is equivalent to x+=1.</p>\n</blockquote>\n<p><strong>C++11:5.2.6 Increment and decrement</strong> says:</p>\n<blockquote>\n<p id=\"so_18258745_18258857_1\">The <strong>value of a postfix ++ expression</strong> is the value of its operand. [ Note: the value obtained is a copy of the original value \u2014end note ] The operand shall be a modifiable lvalue. The type of the operand shall be an arithmetic type or a pointer to a complete object type. The value of the operand object is modified by adding 1 to it, unless the object is of type bool, in which case it is set to true. The value computation of the ++ expression is sequenced before the modification of the operand object. With respect to an indeterminately-sequenced function call, the operation of postfix\n  ++ is a single evaluation. [ Note: Therefore, a function call shall not intervene between the lvalue-to-rvalue conversion and the side effect associated with any single postfix ++ operator. \u2014end note ] <strong>The result is a\n  prvalue</strong>. The type of the result is the cv-unqualified version of the type of the operand.</p>\n</blockquote>\n<p>and also on <a href=\"http://msdn.microsoft.com/en-us/library/e1e3921c.aspx\" rel=\"nofollow noreferrer\">MSDN site</a> it is stated that:</p>\n<blockquote>\n<p id=\"so_18258745_18258857_2\">The operands to <strong>postfix</strong> increment and postfix decrement operators must be modifiable (not const) l-values of arithmetic or pointer type. The type of the result is the same as that of the postfix-expression, but <strong>it is no longer an l-value</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-15T19:55:17.073", "Score": "4", "CreationDate": "2013-08-15T18:06:23.717", "ParentId": "18258745", "CommentCount": "9", "OwnerUserId": "2455888", "LastEditDate": "2017-05-23T10:31:53.527"}, "18258745": {"ViewCount": "1416", "Body": "<p>I am looking for an explanation of how lines L1 and L2 in the code snippet below differ w.r.t <code>l-values</code>, i.e, Why am I getting the: <code>C2105 error</code> in L1, but not in L2? </p>\n<pre><code>*s = 'a';\nprintf(\"%c\\n\", *s );\n//printf(\"%c\\n\", ++(*s)++ ); //L1 //error C2105: '++' needs l-value\nprintf(\"%c\\n\", (++(*s))++);  //L2\nprintf(\"%c\\n\", (*s) );\n</code></pre>\n<p>Note: I got the above result when the code was compiled as a .cpp file. Now, on compilation as .c file, I get the same error C2105 on both lines L1 and L2. Why does L2 compile in C++, and not in C is another mystery :(.   </p>\n<p>If its of any help, I'm using Visual C++ Express Edition.  </p>\n", "AcceptedAnswerId": "18258857", "Title": "L-Value, Pointer arithmetic", "CreationDate": "2013-08-15T17:59:09.790", "Id": "18258745", "CommentCount": "10", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-08-15T20:09:30.840", "LastEditorUserId": "1673391", "LastActivityDate": "2013-08-15T20:09:30.840", "ClosedDate": "2013-08-15T20:40:54.820", "Score": "3", "OwnerUserId": "1462314", "Tags": "<c++><c><lvalue><pointer-arithmetic>", "AnswerCount": "2"}, "18258986": {"Id": "18258986", "PostTypeId": "2", "Body": "<p><strong>For completeness and quotes from C++ documentation:</strong></p>\n<p>Looking at L2, the prefix-increment/decrement returns an l-value. Hence, no error when performing the post-increment. From the C++ documentation for prefix-increment/decrement:</p>\n<blockquote>\n<p id=\"so_18258745_18258986_0\">The result is an l-value of the same type as the operand.</p>\n</blockquote>\n<p>Looking at L1, it becomes:</p>\n<pre><code>++( ( *s )++ )\n</code></pre>\n<p>... after operand precedence. The post-increment operator by definition evaluates the expression (returning an r-value) and then mutates it. From C++ documentation for post-increment/decrement:</p>\n<blockquote>\n<p id=\"so_18258745_18258986_1\">The type of the result is the same as that of the postfix-expression, but it is no longer an l-value.</p>\n</blockquote>\n<p>... and you cannot prefix-increment/decrement an r-value, hence error.</p>\n<p><strong>References:</strong></p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/e1e3921c.aspx\" rel=\"nofollow\">Postfix Operand Doc</a>.</li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dy3d35h8.aspx\" rel=\"nofollow\">Prefix Operand Doc</a>.</li>\n</ul>\n", "LastEditorUserId": "2648745", "LastActivityDate": "2013-08-15T18:24:38.087", "Score": "1", "CreationDate": "2013-08-15T18:13:25.977", "ParentId": "18258745", "CommentCount": "7", "OwnerUserId": "2648745", "LastEditDate": "2013-08-15T18:24:38.087"}});