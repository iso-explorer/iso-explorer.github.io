post_cb({"bq_ids": {"n4140": {"so_24442849_24442934_0": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_24442849_24442934_0": {"length": 5, "quality": 1.0, "section_id": 82}}}, "24443706": {"PostTypeId": "2", "Body": "<p>I'm not sure exactly what your requirements are, but I suppose you're trying to model specific hardware registers. Will this satisfy your needs?</p>\n<pre><code>#include &lt;cstdint&gt;\ntemplate&lt; uintptr_t x &gt; struct y {\n  int *const b;\n  y() : b(reinterpret_cast&lt;int*&gt;(x)) {}\n};      \n\nint main() {\n  y&lt; 42 &gt; c;\n  return *c.b;  \n}\n</code></pre>\n", "LastActivityDate": "2014-06-27T03:59:17.977", "Id": "24443706", "CommentCount": "0", "CreationDate": "2014-06-27T03:59:17.977", "ParentId": "24442849", "Score": "0", "OwnerUserId": "1566221"}, "24442849": {"ViewCount": "569", "Body": "<p>Say I have a template class declared as follows:</p>\n<pre><code>template&lt; int *x &gt; struct y { int *b; y() { b = x; }}\n</code></pre>\n<p>I do need the template parameter to be a constant memory address - it is an embedded code.\nIf I try to instantiate it like this: (compiler is gcc 4.8.1 with -std=gnu++11)</p>\n<pre><code>y&lt; 1 &gt; c;   \n</code></pre>\n<p>I will get an error \"could not convert template argument '1' to 'int*'\" and that's fine and according to standard. I understand it. </p>\n<p>My problem is that casting to pointers does not work either:</p>\n<pre><code>y&lt; (int *)1 &gt; d;\ny&lt; reinterpret_cast&lt;int *&gt;(1) &gt; e;\n</code></pre>\n<blockquote>\n<p id=\"so_24442849_24442849_0\">error: could not convert template argument '1u' to 'int*' </p>\n</blockquote>\n<p>in both cases. Why is that? Template argument is already converted, isn't it?</p>\n", "Title": "\"could not convert template argument\" error for pointer parameters even with cast", "CreationDate": "2014-06-27T01:56:28.407", "LastActivityDate": "2014-06-27T03:59:17.977", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-06-27T01:57:41.123", "LastEditorUserId": "1783614", "Id": "24442849", "Score": "6", "OwnerUserId": "3781341", "Tags": "<c++><templates><pointers>", "AnswerCount": "2"}, "24442934": {"Id": "24442934", "PostTypeId": "2", "Body": "<p>This is not allowed as per the C++ standard, section \u00a714.3.2</p>\n<blockquote>\n<p id=\"so_24442849_24442934_0\"><strong>A template-argument for a non-type, non-template template-parameter shall be one of:</strong></p>\n<ul>\n<li>an integral constant-expression of integral or enumeration type; or</li>\n<li>the name of a non-type template-parameter; or</li>\n<li>the address of an object or function with <strong>external linkage</strong>, including function templates and function template-ids but excluding\n  non-static class members, expressed as &amp; id-expression where the &amp; is\n  optional if the name refers to a function or array, or if the\n  corresponding template-parameter is a reference;\n  or</li>\n<li>a pointer to member expressed as described in 5.3.1</li>\n</ul>\n</blockquote>\n<hr>\n<p><strong>Solution</strong> :</p>\n<p>Use a variable with <strong>external linkage</strong> as the template parameter :</p>\n<pre><code>template&lt; int *x &gt; struct y \n{\n    int *b;\n    y() { b = x; }\n};\n\nextern int i;     // Extern\nstatic int j = 1; // Static\nint z = 1;        // Global\n\nint main() {\n    y&lt; &amp;i &gt; c1;\n    y&lt; &amp;j &gt; c2;\n    y&lt; &amp;z &gt; c3;\n    return 0;\n}\n</code></pre>\n<p>Live example <a href=\"http://ideone.com/cthi8P\" rel=\"nofollow\">here</a>.</p>\n</hr>", "LastEditorUserId": "3510483", "LastActivityDate": "2014-06-27T02:16:13.010", "CommentCount": "0", "CreationDate": "2014-06-27T02:10:30.633", "ParentId": "24442849", "Score": "2", "OwnerUserId": "3510483", "LastEditDate": "2014-06-27T02:16:13.010"}});