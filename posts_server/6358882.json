post_cb({"6359067": {"ParentId": "6358882", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>No, it's not possible.</p>\n<p>There is no syntax with which you can provide explicit template parameters to a constructor template. You can only provide explicit template parameters for the class template as a whole.</p>\n<p>The following text from <code>[temp.arg.explicit]</code> (2003 wording, 14.8.1/5) covers the scenario. Though the clause is non-normative, it serves to explain to us that, as an inherent restriction of the grammar, this is not possible:</p>\n<blockquote>\n<p id=\"so_6358882_6359067_0\">Note: because the explicit template\n  argument list follows the function\n  template name, and <strong>because</strong> conversion\n  member function templates and\n  <strong>constructor member function templates\n  are called without using a function\n  name</strong>, <strong>there is no way to provide an\n  explicit template argument list for\n  these function templates</strong>.</p>\n</blockquote>\n<p>This, partially, comes out of the fact that you never actually invoke the constructor explicitly yourself. When you write, say, <code>A()</code> you are not calling the constructor like a function, even though it looks as if you are (\"conversion member function templates and constructor member function templates are called without using a function name\").</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2011-06-15T14:27:49.147", "Id": "6359067", "Score": "2", "CreationDate": "2011-06-15T14:11:09.070", "LastActivityDate": "2011-06-15T14:27:49.147"}, "6359036": {"ParentId": "6358882", "CommentCount": "1", "Body": "<p>I think he want to know how to instantiate this class with C as SomeType:</p>\n<pre><code>template&lt;typename A&gt;\nclass foo\n{\n    template&lt;typename B, typename C&gt;\n    foo(B b)\n    {\n        C c;\n    }\n};\n</code></pre>\n<p>I don't know if this is possible.</p>\n", "OwnerUserId": "336578", "PostTypeId": "2", "Id": "6359036", "Score": "0", "CreationDate": "2011-06-15T14:09:16.060", "LastActivityDate": "2011-06-15T14:09:16.060"}, "bq_ids": {"n4140": {"so_6358882_6359067_0": {"section_id": 114, "quality": 0.9375, "length": 30}}, "n3337": {"so_6358882_6359067_0": {"section_id": 109, "quality": 0.9375, "length": 30}}, "n4659": {"so_6358882_6359067_0": {"section_id": 118, "quality": 0.9375, "length": 30}}}, "6358882": {"CommentCount": "2", "AcceptedAnswerId": "6359067", "PostTypeId": "1", "ClosedDate": "2011-06-15T14:21:42.753", "LastEditorUserId": "-1", "CreationDate": "2011-06-15T13:59:31.257", "LastActivityDate": "2011-06-17T15:34:03.253", "LastEditDate": "2017-05-23T11:55:37.977", "ViewCount": "325", "FavoriteCount": "1", "Title": "Template constructor weirdness", "Id": "6358882", "Score": "1", "Body": "<blockquote>\n<p id=\"so_6358882_6358882_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2861839/can-the-template-parameters-of-a-constructor-be-explicitly-specified\">Can the template parameters of a constructor be explicitly specified?</a> </br></p>\n</blockquote>\n<p>following up on my previous <a href=\"https://stackoverflow.com/questions/6357394/c-call-specific-template-constructor-of-template-class\">question</a>, (I found this situation in edit 2)</p>\n<p>Laid out simple in code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Printer\n{\n  Printer() { std::cout &lt;&lt; \"secret code\" &lt;&lt; std::endl; }\n};\n\ntemplate &lt;class A&gt;\nstruct Class\n{\n  template &lt;class B, class C&gt;\n  Class(B arg)\n  {\n      C c; /* the 'secret code' should come from here */\n      std::cout &lt;&lt; arg &lt;&lt; std::endl;\n  }\n\n  Class(double arg) { std::cout &lt;&lt; \"double\" &lt;&lt; std::endl; }\n  Class(float arg) { std::cout &lt;&lt; \"float\" &lt;&lt; std::endl; }\n\n  /* this forbids the use of printer in the first parameter */\n  Class(Printer printer) { throw std::exception(); /* here be dragons */ }\n};\n\nint main()\n{\n  Class&lt;int&gt; c(1.0f);\n  Class&lt;int&gt;* ptr = new Class&lt;int&gt;((double)2.0f);\n  return 0;\n}\n\n// Can anyone print 'secret code' while creating an object of type 'Class' ?\n</code></pre>\n<p>Detailed: For a template constructor, can you specify a template argument which is not part of the constructor's arguments when an object get's instantiated?</p>\n<p>I think this deserves a question of its own.</p>\n", "Tags": "<c++><templates><constructor>", "OwnerUserId": "501074", "AnswerCount": "2"}});