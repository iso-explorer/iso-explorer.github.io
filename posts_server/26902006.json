post_cb({"26902006": {"CommentCount": "3", "ViewCount": "220", "CreationDate": "2014-11-13T05:34:11.660", "LastActivityDate": "2014-11-22T19:24:37.643", "PostTypeId": "1", "AcceptedAnswerId": "26913128", "FavoriteCount": "1", "Title": "May the elements in a std::vector have a throwing destructor?", "Id": "26902006", "Score": "6", "Body": "<p>When I look at the <a href=\"http://en.cppreference.com/w/cpp/concept/Container\"><code>Container</code></a> requirements on cppreference it lists <a href=\"http://en.cppreference.com/w/cpp/concept/Destructible\"><code>Destructible</code></a> as a requirement for <code>value_type</code>. This seems to imply that destructors of container elements may not throw.</p>\n<p>I haven't been able to find a citation for this requirement in the C++14 standard (haven't looked in older versions). The only thing I can find is that <code>value_type</code> must be <a href=\"http://en.cppreference.com/w/cpp/concept/Erasable\"><code>Erasable</code></a> which doesn't imply any exception safety at all.</p>\n<p>So my question is, may the elements in a <code>std::vector</code> have a throwing destructor? If not, what section in the standard prohibits it?</p>\n<hr>\n<p>P.S.: Don't worry, I'm not planning to create types with throwing destructors. I'm just writing a standard-conforming implementation and trying to get exception safety right.</p>\n</hr>", "Tags": "<c++><standards-compliance>", "OwnerUserId": "565635", "AnswerCount": "2"}, "26904184": {"ParentId": "26902006", "LastEditDate": "2014-11-22T19:24:37.643", "CommentCount": "5", "CreationDate": "2014-11-13T08:18:19.547", "OwnerUserId": "1381108", "LastEditorUserId": "1381108", "PostTypeId": "2", "Id": "26904184", "Score": "1", "Body": "<p>Yes.<sup>\u2020</sup> The standard says this in general requirements:</p>\n<p><sub><code>[C++11: \u00a723.2.1/10]:</code></sub></p>\n<blockquote>\n<p id=\"so_26902006_26904184_0\">Unless otherwise specified (see 23.2.4.1, 23.2.5.1, 23.3.3.4, and\n  23.3.6.5) all container types defined in this Clause meet the following additional requirements:</p>\n<p id=\"so_26902006_26904184_1\">\u2014 no erase(), clear(), pop_back() or pop_front() function throws an exception.</p>\n</blockquote>\n<p>Using the <code>clear</code> function as an example (due to it not being an exception to the general requirement) it has the following requirements:</p>\n<blockquote>\n<p id=\"so_26902006_26904184_2\">Destroys all elements in a. Invalidates all references, pointers, and iterators referring to the elements of a and may invalidate the past-the-end iterator. Post: <code>a.empty()</code> returns <code>true</code></p>\n</blockquote>\n<p>Which means that it essentially calls the <code>std::allocator_traits&lt;Alloc&gt;::destroy</code> on all elements. Which delegates over to <code>t-&gt;~T()</code> if <code>a.destroy(t)</code> is unavailable. However this implicitly guarantees that neither <code>a.destroy(t)</code> nor <code>t-&gt;~T()</code> should throw because it'll violate <code>clear</code>'s strong <code>noexcept</code> specification:</p>\n<pre><code>// \u00a7 23.3.6.1\nvoid clear() noexcept;\n</code></pre>\n<p>So through deduction we could assert that destructors can throw but they have to be suppressed through some mechanism such as wrapping them in a try-catch block.</p>\n<p>\u2020: Upon further inspection, it seems that destructors <em>can</em> throw but the exceptions have to be suppressed as stated in the comments below.</p>\n", "LastActivityDate": "2014-11-22T19:24:37.643"}, "26913128": {"ParentId": "26902006", "LastEditDate": "2014-11-13T16:08:15.580", "CommentCount": "0", "CreationDate": "2014-11-13T16:02:29.363", "OwnerUserId": "923854", "LastEditorUserId": "923854", "PostTypeId": "2", "Id": "26913128", "Score": "4", "Body": "<p>N4140 [res.on.functions]/2 states:</p>\n<blockquote>\n<p id=\"so_26902006_26913128_0\">In particular, the effects are undefined in the following cases:</p>\n<p id=\"so_26902006_26913128_1\">(2.1) \u2014 for replacement functions (18.6.1), if the installed replacement function does not implement the semantics of the applicable Required behavior: paragraph.</p>\n<p id=\"so_26902006_26913128_2\">(2.2) \u2014 for handler functions (18.6.2.3, 18.8.3.1, D.11.1), if the installed handler function does not implement the semantics of the applicable Required behavior: paragraph</p>\n<p id=\"so_26902006_26913128_3\">(2.3) \u2014 for types used as template arguments when instantiating a template component, if the operations on the type do not implement the semantics of the applicable Requirements subclause (17.6.3.5, 23.2, 24.2, 26.2). Operations on such types can report a failure by throwing an exception unless otherwise specified.</p>\n<p id=\"so_26902006_26913128_4\">(2.4) \u2014 <strong>if any replacement function or handler function or destructor operation exits via an \n  exception, unless specifically allowed in the applicable Required behavior: paragraph.</strong></p>\n<p id=\"so_26902006_26913128_5\">(2.5) \u2014 if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>Which is a bit obscure, but saves a lot of space that would otherwise be wasted on \"<code>T</code> must meet the Destructible requirements\" statements throughout the library clauses.</p>\n<p>Notably, this does not imply that elements of a <code>std::vector</code> can't have a throwing destructor; it only means that said destructor must never throw when called from the standard library. So e.g. this program is conforming:</p>\n<pre><code>#include &lt;vector&gt;\n\nstruct A {\n  bool throw_an_int = false;\n  ~A() noexcept(false) {\n    if (throw_an_int) throw 42;\n  }\n};\n\nint main() {\n  try {\n    A a; \n    a.throw_an_int = true;\n    std::vector&lt;A&gt; lots_of_As(42);\n  } catch(int&amp;) {}\n}\n</code></pre>\n", "LastActivityDate": "2014-11-13T16:08:15.580"}, "bq_ids": {"n4140": {"so_26902006_26913128_2": {"section_id": 6324, "quality": 0.6666666666666666, "length": 10}, "so_26902006_26904184_0": {"section_id": 712, "quality": 0.7058823529411765, "length": 12}, "so_26902006_26904184_1": {"section_id": 712, "quality": 1.0, "length": 7}, "so_26902006_26913128_5": {"section_id": 6324, "quality": 1.0, "length": 11}, "so_26902006_26913128_0": {"section_id": 6324, "quality": 1.0, "length": 5}, "so_26902006_26913128_4": {"section_id": 6324, "quality": 0.8666666666666667, "length": 13}, "so_26902006_26904184_2": {"section_id": 723, "quality": 0.9444444444444444, "length": 17}, "so_26902006_26913128_1": {"section_id": 6324, "quality": 0.7692307692307693, "length": 10}, "so_26902006_26913128_3": {"section_id": 6324, "quality": 0.8214285714285714, "length": 23}}, "n3337": {"so_26902006_26913128_2": {"section_id": 6081, "quality": 0.6666666666666666, "length": 10}, "so_26902006_26913128_1": {"section_id": 6081, "quality": 0.7692307692307693, "length": 10}, "so_26902006_26904184_1": {"section_id": 701, "quality": 1.0, "length": 7}, "so_26902006_26913128_5": {"section_id": 6081, "quality": 1.0, "length": 11}, "so_26902006_26904184_0": {"section_id": 701, "quality": 0.7058823529411765, "length": 12}, "so_26902006_26904184_2": {"section_id": 712, "quality": 0.9444444444444444, "length": 17}, "so_26902006_26913128_0": {"section_id": 6081, "quality": 1.0, "length": 5}, "so_26902006_26913128_4": {"section_id": 6081, "quality": 0.8666666666666667, "length": 13}, "so_26902006_26913128_3": {"section_id": 6081, "quality": 0.8214285714285714, "length": 23}}, "n4659": {"so_26902006_26904184_2": {"section_id": 754, "quality": 0.9444444444444444, "length": 17}, "so_26902006_26913128_2": {"section_id": 7834, "quality": 0.6666666666666666, "length": 10}, "so_26902006_26904184_0": {"section_id": 741, "quality": 0.7058823529411765, "length": 12}, "so_26902006_26904184_1": {"section_id": 741, "quality": 1.0, "length": 7}, "so_26902006_26913128_5": {"section_id": 7834, "quality": 1.0, "length": 11}, "so_26902006_26913128_4": {"section_id": 7834, "quality": 0.8666666666666667, "length": 13}, "so_26902006_26913128_0": {"section_id": 7834, "quality": 1.0, "length": 5}, "so_26902006_26913128_1": {"section_id": 7834, "quality": 0.7692307692307693, "length": 10}, "so_26902006_26913128_3": {"section_id": 7834, "quality": 0.8214285714285714, "length": 23}}}});