post_cb({"bq_ids": {"n4140": {"so_19887425_19887425_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 252}}, "n3337": {"so_19887425_19887425_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 243}}, "n4659": {"so_19887425_19887425_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 259}}}, "19888725": {"Id": "19888725", "PostTypeId": "2", "Body": "<p>Well, the closest I can think of is:</p>\n<pre><code>namespace A {\n  class B {\n  public:\n    enum Value { VALUE1 = 1, VALUE2 = 2 };\n  };\n};\n\nconst A::B::Value VALUE1 = A::B::VALUE1;\n\nint main () {\n  return VALUE1;\n}\n</code></pre>\n<p>but its rather tedious and error prone and absolutely not worth it. :)</p>\n", "LastActivityDate": "2013-11-10T10:38:51.060", "CommentCount": "1", "CreationDate": "2013-11-10T10:38:51.060", "ParentId": "19887425", "Score": "0", "OwnerUserId": "390807"}, "19889238": {"Id": "19889238", "PostTypeId": "2", "Body": "<p>There are two reasons why your approaches fail:</p>\n<ol>\n<li><p>The first reason has been described by B\u0408\u043e\u0432\u0438\u045b: You cannot introduce the name of a nested type in a namespace scope, see [namespace.udecl]/8.</p></li>\n<li><p>When you write <code>using A::B::Value;</code>, only the name of the <code>enum</code> itself will be introduced in the current scope, <strong>not</strong> the name of all enumerators. This allows things like:</p>\n<pre><code>namespace Values { enum Value{ VALUE1, VALUE2 }; }\nusing Values::Value;  // don't pollute my scope with the enumerators\n\nValue v = Values::VALUE1;\n</code></pre></li>\n</ol>\n<p>The second issue can be solved by introducing the enumerators individually:</p>\n<pre><code>namespace A\n{\n    namespace B\n    {\n        enum Value\n        {\n              VALUE1\n            , VALUE2\n        };\n    }\n}\n\nint main()\n{\n    using A::B::Value;\n    using A::B::VALUE1;\n    using A::B::VALUE2;\n\n    Value v = VALUE1;\n    v = VALUE2;\n}\n</code></pre>\n<p>Alternatively, as <a href=\"https://stackoverflow.com/users/743382/hvd\">hvd</a> suggested <a href=\"https://stackoverflow.com/questions/19887425/how-to-do-using-of-weak-enums-in-c11#comment29586525_19887459\">in a comment</a>, you can use a using-directive to introduce all names of a namespace:</p>\n<pre><code>namespace A\n{\n    namespace B\n    {\n        enum Value\n        {\n              VALUE1\n            , VALUE2\n        };\n    }\n}\n\nint main()\n{\n    using namespace A::B;\n\n    Value v = VALUE1;\n    v = VALUE2;\n}\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-11-10T11:37:34.450", "Score": "2", "CreationDate": "2013-11-10T11:37:34.450", "ParentId": "19887425", "CommentCount": "1", "OwnerUserId": "420683", "LastEditDate": "2017-05-23T12:12:40.637"}, "19887459": {"Id": "19887459", "PostTypeId": "2", "Body": "<p>To put is simply : it is not possible, because enum is defined in the class.</p>\n<p>If you change the <code>class B</code> into <code>namespace B</code>:</p>\n<pre><code>namespace A {\n\nnamespace B {\n  enum Value {\n    VALUE1 = 1,\n    VALUE2 = 2,\n  };\n};\n\n}\n</code></pre>\n<p>then it would be possible to do (as you wrote in your code):</p>\n<pre><code>using A::B::Value\n</code></pre>\n", "LastActivityDate": "2013-11-10T07:53:35.510", "CommentCount": "5", "CreationDate": "2013-11-10T07:53:35.510", "ParentId": "19887425", "Score": "3", "OwnerUserId": "476681"}, "19887425": {"ViewCount": "314", "Body": "<p>I have enum definition inside a class in the header:</p>\n<pre><code>namespace A {\n\nclass B {\n public:\n  enum Value {\n    VALUE1 = 1,\n    VALUE2 = 2,\n  };\n};\n\n}\n</code></pre>\n<p>And I want to use its values in a source file without prefix, like this:</p>\n<pre><code>#include \"header\"\n\nint main() {\n  someFn(VALUE1);\n\n  return 0;\n}\n</code></pre>\n<p>I have tried to <code>using A::B::Value;</code> but clang gives an error:</p>\n<blockquote>\n<p id=\"so_19887425_19887425_0\">using declaration can not refer to class member</p>\n</blockquote>\n<hr>\n<p>Even if I move enum outside of a class:</p>\n<pre><code>namespace A {\n\nenum Value {\n  VALUE1 = 1,\n  VALUE2 = 2,\n};    \n\n}\n</code></pre>\n<p>and do <code>using A::Value;</code>, the error is gone, but the compiler complains about <code>VALUE1</code>:</p>\n<blockquote>\n<p id=\"so_19887425_19887425_1\">use of undeclared identifier 'VALUE1'</p>\n</blockquote>\n<p>Is there way to use values of enum without any prefixes, if the enum is defined somewhere else? - Using <code>#define</code>s is out of question.</p>\n<p>If there is no way, then what is a possible issue about implementing such behavior in C++ Standard?</p>\n</hr>", "AcceptedAnswerId": "19889238", "Title": "How to do `using` of weak enums in C++11?", "CreationDate": "2013-11-10T07:48:07.407", "Id": "19887425", "CommentCount": "0", "LastEditDate": "2013-11-10T09:00:23.610", "PostTypeId": "1", "LastEditorUserId": "377393", "LastActivityDate": "2013-11-10T11:37:34.450", "Score": "4", "OwnerUserId": "377393", "Tags": "<c++><c++11><enums><using>", "AnswerCount": "4"}, "19887547": {"Id": "19887547", "PostTypeId": "2", "Body": "<p>Enums are treated in a manner similar to classes. Think of it as trying to do the following:</p>\n<pre><code>class Value\n{\npublic:\n    static const int VALUE1 = 0;\n};\n\nusing Value::VALUE1; // ERROR class-qualified name\n</code></pre>\n<p>In short: You can't make enum values visible this way with a <code>using</code> statement.</p>\n", "LastActivityDate": "2013-11-10T08:04:46.817", "CommentCount": "0", "CreationDate": "2013-11-10T08:04:46.817", "ParentId": "19887425", "Score": "0", "OwnerUserId": "368519"}});