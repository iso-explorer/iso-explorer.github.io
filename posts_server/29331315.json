post_cb({"29331787": {"Id": "29331787", "PostTypeId": "2", "Body": "<p>You have used a pre c++11 standard compiler. The older standard had a problem letting the parser disambiguate a pair of closing angle brackets <code>&gt;&gt;</code> used in a nested template type specifier, from the <code>operator&gt;&gt;()</code>. Thus you had to write a space between them.</p>\n<p>The samples like <code>&gt;&gt;&gt;</code> or <code>&gt;&gt;*</code> are falling under a different case for the old parsers, thus they work without error message.</p>\n<hr>\n<p><sub>I have to admit, I don't actually know what exactly was done in the c++11 (the current) standards definitions, that this situation can be clearly disambiguated by a c++11 compliant parser.</sub></p>\n</hr>", "LastEditorUserId": "1413395", "LastActivityDate": "2015-03-30T21:20:49.757", "Score": "3", "CreationDate": "2015-03-29T16:36:52.853", "ParentId": "29331315", "CommentCount": "3", "OwnerUserId": "1413395", "LastEditDate": "2015-03-30T21:20:49.757"}, "29331315": {"ViewCount": "469", "Body": "<p>Eclipse (Luna, 4.4.2) tells me that I have a syntax error on the following line:</p>\n<pre><code>static_cast&lt;Vec&lt;int, DIM&gt;&gt;(a.mul(b));\n</code></pre>\n<p>I remembered that double closing angle brackets <code>&gt;&gt;</code> can lead to problems with some compilers, so I put a blank in between: <code>&gt; &gt;</code>. The syntax error disappears.</p>\n<p>BUT I have many <code>&gt;&gt;</code> in my program where no syntax error is detected, such as:</p>\n<pre><code>Node&lt;Element&lt;DIM&gt;&gt; * e= a.get();\n</code></pre>\n<p>Why do I get an error the above mentioned specific case? This is NOT a duplicate to <a href=\"https://stackoverflow.com/questions/29329860/error-varname-was-not-declared-in-this-scope\">error: 'varName' was not declared in this scope</a>, since I'm specifically asking why my compiler does accept a <code>&gt;&gt;</code> sometimes, but not always.</p>\n", "AcceptedAnswerId": "29331787", "Title": "Double closing angle brackets (>>) generate syntax error in SPECIFIC case", "CreationDate": "2015-03-29T15:54:04.883", "Id": "29331315", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:31:15.870", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-30T21:36:03.323", "Score": "3", "OwnerUserId": "2109064", "Tags": "<c++><eclipse><templates><c++11><language-lawyer>", "AnswerCount": "2"}, "29356768": {"Id": "29356768", "PostTypeId": "2", "Body": "<p>The \"right angle bracket fix\" is found in \u00a714.2 [temp.names]/p3 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_29331315_29356768_0\">When parsing a <em>template-argument-list</em>, the first non-nested <code>&gt;</code> is\n  taken as the ending delimiter rather than a greater-than operator.\n  <strong>Similarly, the first non-nested <code>&gt;&gt;</code> is treated as two consecutive but\n  distinct <code>&gt;</code> tokens, the first of which is taken as the end of the\n  <em>template-argument-list</em> and completes the\n  <em>template-id</em>. [ <em>Note</em>: The second <code>&gt;</code> token produced by this replacement rule may terminate an enclosing\n  <em>template-id</em> construct or it may be part of a different construct (e.g. a cast).\u2014<em>end note</em> ]</strong></p>\n</blockquote>\n<p>If the <code>static_cast</code> is otherwise valid, then both pieces of code in the OP are perfectly valid in C++11 and perfectly invalid in C++03. If your IDE reports an error on one but not the other, then it's a bug with that IDE.</p>\n<p>It's difficult (and also somewhat pointless) for us to speculate on the source of the bug. A potential cause can be that the second <code>&gt;</code> are closing different constructs (the first case it's closing a cast, the second is closing a template argument list) and the parser's implementation somehow missed the \"second <code>&gt;</code> being part of a different construct\" case. But that's just wild speculation.</p>\n", "LastActivityDate": "2015-03-30T21:36:03.323", "CommentCount": "0", "CreationDate": "2015-03-30T21:36:03.323", "ParentId": "29331315", "Score": "1", "OwnerUserId": "2756719"}, "bq_ids": {"n4140": {"so_29331315_29356768_0": {"length": 38, "quality": 0.8444444444444444, "section_id": 71}}, "n3337": {"so_29331315_29356768_0": {"length": 38, "quality": 0.8444444444444444, "section_id": 66}}, "n4659": {"so_29331315_29356768_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 73}}}});