post_cb({"14970093": {"Id": "14970093", "PostTypeId": "2", "Body": "<p>I think the idea is that a source file normally consists of zero or more lines, and each line consists of a sequence of non-new-line characters followed by a new-line.  Any source file not meeting that requirement needs special handling (so you don't get lines composed of text from two different source files).</p>\n<p>An empty C++ source file is not particularly <em>useful</em>, but there's no point in forbidding it. The quoted clause isn't about distinguishing between an empty file and a file consisting of just one new-line (there should be no real difference between them).</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2013-02-20T00:57:27.783", "Score": "2", "CreationDate": "2013-02-20T00:15:12.293", "ParentId": "14969771", "CommentCount": "1", "OwnerUserId": "827263", "LastEditDate": "2013-02-20T00:57:27.783"}, "14970285": {"Id": "14970285", "PostTypeId": "2", "Body": "<p>i guess this means that every line ends with \\n, while empty file has no lines</p>\n", "LastActivityDate": "2013-02-20T00:34:14.053", "CommentCount": "2", "CreationDate": "2013-02-20T00:34:14.053", "ParentId": "14969771", "Score": "2", "OwnerUserId": "2088034"}, "14970038": {"Id": "14970038", "PostTypeId": "2", "Body": "<p>The preprocessor can be used to construct things besides program source, and a blank line can be significant -- it's often used to separate paragraphs in text, for instance.</p>\n", "LastActivityDate": "2013-02-20T00:10:16.963", "CommentCount": "0", "CreationDate": "2013-02-20T00:10:16.963", "ParentId": "14969771", "Score": "1", "OwnerUserId": "1290731"}, "14970087": {"Id": "14970087", "PostTypeId": "2", "Body": "<p>This is to specifically support the 1994 winning entry in the international obfuscated C code contest in the category \"worst abuse of rules\": <a href=\"http://www.ioccc.org/1994/smr.hint\">The world's smallest self-replicating program. Guaranteed.</a></p>\n", "LastActivityDate": "2013-02-20T00:14:47.923", "CommentCount": "3", "CreationDate": "2013-02-20T00:14:47.923", "ParentId": "14969771", "Score": "5", "OwnerUserId": "24937"}, "bq_ids": {"n4140": {"so_14969771_14970757_0": {"length": 26, "quality": 1.0, "section_id": 5313}, "so_14969771_14969771_0": {"length": 60, "quality": 0.9523809523809523, "section_id": 5313}}, "n3337": {"so_14969771_14970757_0": {"length": 26, "quality": 1.0, "section_id": 5110}, "so_14969771_14969771_0": {"length": 62, "quality": 0.9841269841269841, "section_id": 5110}}, "n4659": {"so_14969771_14970757_0": {"length": 26, "quality": 1.0, "section_id": 6737}, "so_14969771_14969771_0": {"length": 60, "quality": 0.9523809523809523, "section_id": 6737}}}, "14970757": {"Id": "14970757", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14969771_14970757_0\">\"A source file that is not empty and that does not end in a new-line character, or that ends in a new-line character immediately preceded by a backslash character before any such splicing takes place, shall be processed as if an additional new-line character were appended to the file.\"</p>\n<p id=\"so_14969771_14970757_1\">The second part of translation phase 2 (section 2.2.2 in N3485) basically says that if a source file does not end in a newline character, the compiler should treat it as if it did. </p>\n</blockquote>\n<p>No - it says that if the file \"is not empty\" AND does not end in a newline, then a newline is added</p>\n<blockquote>\n<p id=\"so_14969771_14970757_2\">However, if I'm reading it correctly it makes an explicit exception for empty source files, which remain empty.</p>\n</blockquote>\n<p>Agreed.</p>\n<blockquote>\n<p id=\"so_14969771_14970757_3\">I haven't been able to figure out any situations in which it would make a difference whether a source file was empty or consisted of only a newline character.  I'm hoping someone can shed some light on the reasoning behind this requirement.</p>\n</blockquote>\n<p>Consider a header file called \"header.h\" with last line as below <em>with no trailing newline</em>:</p>\n<pre><code>#endif  // #ifndef INCLUDED_HEADER_H\n</code></pre>\n<p>Say another.cc includes it as follows:</p>\n<pre><code>#include \"header.h\"\n#include \"another.h\"\n</code></pre>\n<p>When another.cc is parsed, the text from header.h is substituted for the line specifying its inclusion.  Done naively, that would result in:</p>\n<pre><code>#endif  // #ifndef INCLUDED_HEADER_H#include \"another.h\"\n</code></pre>\n<p>Obvious, the compiler would then fail to act on <code>#include \"another.h\"</code>, considering it part of the comment begun in header.h.</p>\n<p>So, the rule for incomplete rules avoids these problems (which could be terribly hard to spot).</p>\n<p>If the file was empty anyway, this problem doesn't manifest: there's nothing like the <code>#endif</code> to be prepended to the next line in the including file....</p>\n", "LastActivityDate": "2013-02-20T01:27:23.577", "CommentCount": "2", "CreationDate": "2013-02-20T01:27:23.577", "ParentId": "14969771", "Score": "0", "OwnerUserId": "410767"}, "14969771": {"ViewCount": "582", "Body": "<p>The second part of translation phase 2 (section 2.2.2 in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">N3485</a>) basically says that if a source file does not end in a newline character, the compiler should treat it as if it did. </p>\n<p>However, if I'm reading it correctly it makes an explicit exception for empty source files, which remain empty.</p>\n<p>The exact text (with added emphasis) is:</p>\n<blockquote>\n<p id=\"so_14969771_14969771_0\">Each instance of a backslash character (<code>\\</code>) immediately followed by a new-line character is deleted, splicing physical source lines to form logical source lines. Only the last backslash on any physical source line shall be eligible for being part of such a splice. If, as a result, a character sequence that matches the syntax of a universal-character-name is produced, the behavior is undefined. <em>A source file that is not empty and that does not end in a new-line character, or that ends in a new-line character immediately preceded by a backslash character before any such splicing takes place, shall be processed as if an additional new-line character were appended to the file</em>.</p>\n</blockquote>\n<p>I haven't been able to figure out any situations in which it would make a difference whether a source file was empty or consisted of only a newline character.</p>\n<p>I'm hoping someone can shed some light on the reasoning behind this requirement.</p>\n", "AcceptedAnswerId": "14970093", "Title": "What's the utility of an empty C++ file?", "CreationDate": "2013-02-19T23:45:17.240", "Id": "14969771", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-07-03T20:01:01.500", "LastEditorUserId": "894885", "LastActivityDate": "2014-07-03T20:01:01.500", "Score": "6", "OwnerUserId": "894885", "Tags": "<c++><language-lawyer>", "AnswerCount": "5"}});