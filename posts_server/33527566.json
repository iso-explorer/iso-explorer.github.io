post_cb({"33527644": {"Id": "33527644", "PostTypeId": "2", "Body": "<p>Per 5.3.3 [expr.sizeof]</p>\n<blockquote>\n<p id=\"so_33527566_33527644_0\">The sizeof operator yields the number of bytes in the object representation of its operand. The operand is either an expression, which is an unevaluated operand (Clause 5), or a parenthesized type-id. The sizeof operator shall not be applied to an expression that has function or incomplete type, to an enumeration\n  type whose underlying type is not fixed before all its enumerators have been declared, to the parenthesized name of such types, or to a glvalue that designates a bit-field. <strong><em>sizeof(char), sizeof(signed char) and sizeof(unsigned char) are 1.</em></strong>[...]</p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>So no matter how many bits a <code>char</code> takes up its size is always 1</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-11-04T17:06:54.703", "Score": "3", "CreationDate": "2015-11-04T16:58:13.260", "ParentId": "33527566", "CommentCount": "4", "LastEditDate": "2015-11-04T17:06:54.703", "OwnerUserId": "4342498"}, "33527633": {"Id": "33527633", "PostTypeId": "2", "Body": "<p>The <code>sizeof</code> operator yields the size of a type in <em>bytes</em>, where a byte is defined to be the size of a <code>char</code>. So <code>sizeof(char)</code> is always 1 by definition, regardless of how many <em>bits</em> <code>char</code> has on a given platform.</p>\n<p>This applies to both C and C++.</p>\n<hr>\n<p>From the C11 standard, <strong>6.5.3.4</strong></p>\n<blockquote id=\"so_33527566_33527633_0\">\n<ol start=\"2\">\n<li>The <code>sizeof</code> operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. The size is determined from the type of the operand....\n  <br/></li>\n</ol>\n</blockquote>\n<p>Then,</p>\n<blockquote id=\"so_33527566_33527633_1\">\n<ol start=\"4\">\n<li>When <code>sizeof</code> is applied to an operand that has type <code>char</code>, <code>unsigned char</code>, or <code>signed char</code>, (or a qualified version thereof) the result is 1.</li>\n</ol>\n</blockquote>\n<p>From the C++11 standard, <strong>5.3.3</strong></p>\n<blockquote id=\"so_33527566_33527633_2\">\n<ol>\n<li>The <code>sizeof</code> operator yields the number of bytes in the object representation of its operand. The operand is either an expression, which is an unevaluated operand (Clause 5), or a parenthesized <em>type-id</em>.... ... <strong><code>sizeof(char)</code>, <code>sizeof(signed char)</code> and <code>sizeof(unsigned char)</code> are 1.</strong></li>\n</ol>\n</blockquote>\n<p>(emphasis mine)</p>\n</hr>", "LastEditorUserId": "661519", "LastActivityDate": "2015-11-04T18:02:09.680", "Score": "12", "CreationDate": "2015-11-04T16:57:55.770", "ParentId": "33527566", "CommentCount": "13", "LastEditDate": "2015-11-04T18:02:09.680", "OwnerUserId": "661519"}, "33527822": {"Id": "33527822", "PostTypeId": "2", "Body": "<p>The question should have been -- Suppose in a hypothetical machine, the <code>word size(size of registers)</code> is 32 bits. What would sizeof(char) return?</p>\n<p>And answer will be <code>1 byte</code>.</p>\n<blockquote>\n<p id=\"so_33527566_33527822_0\">In computing, word is a term for the natural unit of data used by a\n  particular processor design. A word is a fixed-sized piece of data\n  handled as a unit by the instruction set or the hardware of the\n  processor. The number of bits in a word (the word size, word width, or\n  word length) is an important characteristic of any specific processor\n  design or computer architecture. -- <a href=\"https://en.wikipedia.org/wiki/Word_%28computer_architecture%29\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Word_%28computer_architecture%29</a></p>\n</blockquote>\n<p>In you case <code>word-size</code> will be 32 bits. Also</p>\n<blockquote>\n<p id=\"so_33527566_33527822_1\">Historically, the byte was the number of bits used to encode a single\n  character of text in a computer and for this reason it is the smallest\n  addressable unit of memory in many computer architectures. -- <a href=\"https://en.wikipedia.org/wiki/Byte\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Byte</a></p>\n</blockquote>\n<p>1 byte is smallest addressable unit of memory, it cat be 8 bit , 9 bits or 16 bits anything that hardware spec chooses.</p>\n<p>As far as <code>sizeof</code> is concerned it first determines the type of argument, eventually computes the size in bytes. So, following two C++ statements will produce same result.</p>\n<pre><code>  int n;\n  std::cout&lt;&lt;sizeof(int);\n  std::cout&lt;&lt;sizeof(n);\n</code></pre>\n", "LastEditorUserId": "4373992", "LastActivityDate": "2015-11-04T18:22:14.100", "Score": "-1", "CreationDate": "2015-11-04T17:06:50.000", "ParentId": "33527566", "CommentCount": "7", "LastEditDate": "2015-11-04T18:22:14.100", "OwnerUserId": "4373992"}, "33527671": {"Id": "33527671", "PostTypeId": "2", "Body": "<p><code>sizeof(x)</code> is returning the size of  <code>x</code> expressed in units of size of <code>char</code>.</p>\n", "LastActivityDate": "2015-11-04T16:59:29.080", "Score": "2", "CreationDate": "2015-11-04T16:59:29.080", "ParentId": "33527566", "CommentCount": "0", "OwnerUserId": "4253229"}, "bq_ids": {"n4140": {"so_33527566_33527644_0": {"length": 49, "quality": 0.9423076923076923, "section_id": 6076}, "so_33527566_33527633_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 6076}}, "n3337": {"so_33527566_33527644_0": {"length": 48, "quality": 0.9230769230769231, "section_id": 5844}, "so_33527566_33527633_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 5844}}, "n4659": {"so_33527566_33527644_0": {"length": 36, "quality": 0.6923076923076923, "section_id": 7572}, "so_33527566_33527633_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 7572}}}, "33527566": {"ViewCount": "686", "Body": "<p>I was learning C++ and come across the following question. I'm just a beginner and I got confused. Isn't sizeof() function supposed to return the size of the datatype? Why could a data object has different size from its sizeof()? I don't understand the explanation of the answer. </p>\n<p>Suppose in a hypothetical machine, the size of char is 32 bits. What would sizeof(char) return?</p>\n<p>a) 4</p>\n<p>b) 1</p>\n<p>c) Implementation dependent</p>\n<p>d) Machine dependent</p>\n<p>Answer:b</p>\n<p>Explanation: The standard does NOT require a char to be 8-bits, but does require that sizeof(char) return 1.</p>\n", "AcceptedAnswerId": "33527633", "Title": "The difference between size of datatype and sizeof(data type)", "CreationDate": "2015-11-04T16:55:00.483", "Id": "33527566", "CommentCount": "33", "LastEditDate": "2015-11-04T17:14:31.380", "PostTypeId": "1", "LastEditorUserId": "661519", "LastActivityDate": "2015-11-04T18:22:14.100", "Score": "4", "OwnerUserId": "5175084", "Tags": "<c++><c>", "AnswerCount": "6"}, "33527695": {"Id": "33527695", "PostTypeId": "2", "Body": "<p>You're just confused with the <strong>difference</strong> between <strong>bytes</strong> and <strong>octets</strong>.</p>\n<p>A byte is the size of one character. This yields to the always true <code>sizeof(char) == 1</code>, because <code>sizeof</code> return the size in <strong>bytes</strong></p>\n<p>While an <strong>octet</strong> consists out of <strong>8 bits</strong>.</p>\n<p>On almost all modern platforms, the size of a byte is coincidentally the same as of an octet. That's the reason why it's a common error to mix them up, even book authors and professors are doing this. </p>\n", "LastEditorUserId": "3537677", "LastActivityDate": "2015-11-04T17:06:51.720", "Score": "3", "CreationDate": "2015-11-04T17:00:46.050", "ParentId": "33527566", "CommentCount": "5", "LastEditDate": "2015-11-04T17:06:51.720", "OwnerUserId": "3537677"}, "33527985": {"Id": "33527985", "PostTypeId": "2", "Body": "<p>There are no machines where sizeof(char) is 4. It's always 1 byte. That byte might contain 32 bits, but as far as the C compiler is concerned, it's one byte.</p>\n<p>The correct name for \"8 bits\" is octet. The C Standard uses the word \"byte\" for an object that is the size of a char. Others may use the word \"byte\" in different ways, often when they mean \"octet\", but in C (and C++, or Objective-C) it means \"object the size of a char\". A char may be more than 8 bits, or more than one octet, but it's always one byte.</p>\n", "LastActivityDate": "2015-11-04T17:15:21.560", "Score": "0", "CreationDate": "2015-11-04T17:15:21.560", "ParentId": "33527566", "CommentCount": "0", "OwnerUserId": "2649104"}});