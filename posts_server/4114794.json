post_cb({"7379027": {"ParentId": "4114794", "CommentCount": "5", "CreationDate": "2011-09-11T14:55:23.033", "OwnerUserId": "761090", "PostTypeId": "2", "Id": "7379027", "Score": "0", "Body": "<p>Since there is no <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a> in the statement, the result is undefined, much like for the <code>i=i++</code> example quoted at that wikipedia page.</p>\n<p>Otherwise said, nothing specifies, whether the compiler should first evaluate everything, then assign, or do evaluate-assign for each element separately and in which order.</p>\n", "LastActivityDate": "2011-09-11T14:55:23.033"}, "4160654": {"ParentId": "4114794", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2010-11-12T00:38:11.280", "Score": "-2", "LastEditorUserId": "231717", "LastEditDate": "2011-09-11T23:40:41.970", "Id": "4160654", "OwnerUserId": "231717", "Body": "<p><strong>Old Answer (misses the point):</strong></p>\n<p>I checked the current C++0x draft, and there i found the sentence 8.5.1.17 which says:</p>\n<blockquote>\n<p id=\"so_4114794_4160654_0\">17 The full-expressions in an\n  <em>initializer-clause</em> are evaluated in\n  the order in which they appear.</p>\n</blockquote>\n<p>So while this sentence is not part of the C++ Standard from 2003, im quite sure that this should be working in any up to date compiler, if this is part of C++0x.</p>\n<p><strong>Edit:</strong><br>\nThe comments made me rethink this matter. This line only ensures that the <code>QPointF</code> objects are created in the order in which they occur in the array initialization (relevant if the element constructors have observable side-effects). The problem is, the value of <code>points</code> is indeterminate during its array initialization. So there cant be a guarantee for a valid value of <code>points[0]</code> either, at least not if you rely on the standard.</br></p>\n", "LastActivityDate": "2011-09-11T23:40:41.970"}, "4114825": {"ParentId": "4114794", "CommentCount": "0", "CreationDate": "2010-11-06T19:39:33.330", "OwnerUserId": "206328", "PostTypeId": "2", "Id": "4114825", "Score": "2", "Body": "<p>from <a href=\"http://www.comeaucomputing.com/pcgi-bin/compiler.cgi\" rel=\"nofollow\">http://www.comeaucomputing.com/pcgi-bin/compiler.cgi</a>:</p>\n<pre><code>Copyright 1988-2008 Comeau Computing.  All rights reserved.\nMODE:strict errors C++ C++0x_extensions\n\n\"ComeauTest.c\", line 8: warning: variable \"points\" is used before its value is set\n      points[0] // is this line valid (according to the C++ standard)?\n</code></pre>\n", "LastActivityDate": "2010-11-06T19:39:33.330"}, "4114794": {"CommentCount": "4", "AcceptedAnswerId": "7378683", "PostTypeId": "1", "LastEditorUserId": "231717", "CreationDate": "2010-11-06T19:30:29.073", "LastActivityDate": "2011-09-11T23:40:41.970", "LastEditDate": "2010-11-12T00:24:58.040", "ViewCount": "405", "FavoriteCount": "0", "Title": "array initialization, is referencing a previous element ok?", "Id": "4114794", "Score": "8", "Body": "<pre><code>const QPointF points[] =\n{\n    QPointF(r.left() - i, r.top() - i),\n    QPointF(r.right() + i, r.top() - i),\n    QPointF(r.right() + i, r.bottom() + i),\n    QPointF(r.left() - i, r.bottom() + i),\n    points[0] // is this line valid (according to the C++ standard)?\n};\n</code></pre>\n<p>While this compiles with the MS Visual Studio Compiler, i am not sure if this is valid code according to the C++ Standard.</p>\n<p>Quotes from the Standard would be <strong>highly appreciated.</strong></p>\n", "Tags": "<c++><arrays><initialization><standards>", "OwnerUserId": "231717", "AnswerCount": "4"}, "7378683": {"ParentId": "4114794", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2011-09-11T13:55:56.297", "Score": "2", "LastEditorUserId": "560648", "LastEditDate": "2011-09-11T14:18:41.873", "Id": "7378683", "OwnerUserId": "560648", "Body": "<p><sub>C++03/C++11 answer</sub></p>\n<hr>\n<p>No, it's not.</p>\n<p>On the right-hand side of the <code>=</code>, <code>points</code> does exist<sup>1</sup> but the initialiser is only applied after all its operands have been evaluated.</p>\n<ul>\n<li><p>If <code>points</code> is at namespace scope (and thus has static storage duration and has been zero-initialized<sup>2</sup>), then this is \"safe\" but your use of <code>points[0]</code> there is going to give you <code>0</code>, rather than <code>QPointF(r.left() - i, r.top() - i)</code> again.</p></li>\n<li><p>If <code>points</code> has automatic storage duration \u2014 it has not yet been initialised so your use of <code>points[0]</code> is attempting to use an uninitialised variable, where <code>points[0]</code> has an indeterminate value... which is bad<sup>3</sup>.</p></li>\n</ul>\n<p>It's difficult to provide standard references for this, other than to say that there is nothing in <code>8.5 \"Initializers\"</code> that explicitly makes this possible, and rules elsewhere fill in the rest.</p>\n<hr>\n<blockquote>\n<p id=\"so_4114794_7378683_0\"><sup>1</sup> <code>[n3290: 3.3.2/1]:</code> <strong>The point of declaration for a name is immediately after its complete declarator</strong> (Clause 8) and before its initializer (if any), except as noted below. [ <em>Example:</em></p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_4114794_7378683_1\">Here the second <code>x</code> is initialized with its own <strong>(indeterminate)</strong> value. <em>\u2014end example</em> ]</p>\n<p id=\"so_4114794_7378683_2\"><sup>2</sup> <code>[n3290: 3.6.2/2]:</code> Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5)\n  before any other initialization takes place. [..]</p>\n<p id=\"so_4114794_7378683_3\"><sup>3</sup> <code>[n3290: 17.6.3.3/2]:</code> [..] [ <em>Note:</em> Operations\n  involving indeterminate values may cause undefined behavior. <em>\u2014end note</em> ]</p>\n</blockquote>\n</hr></hr>", "LastActivityDate": "2011-09-11T14:18:41.873"}, "bq_ids": {"n4140": {"so_4114794_7378683_2": {"section_id": 7151, "quality": 0.7647058823529411, "length": 13}, "so_4114794_7378683_3": {"section_id": 6283, "quality": 0.6153846153846154, "length": 8}, "so_4114794_4160654_0": {"section_id": 3326, "quality": 0.5714285714285714, "length": 4}, "so_4114794_7378683_1": {"section_id": 7049, "quality": 0.7777777777777778, "length": 7}, "so_4114794_7378683_0": {"section_id": 7049, "quality": 0.7368421052631579, "length": 14}}, "n3337": {"so_4114794_7378683_2": {"section_id": 6895, "quality": 0.7647058823529411, "length": 13}, "so_4114794_7378683_3": {"section_id": 6043, "quality": 0.6153846153846154, "length": 8}, "so_4114794_4160654_0": {"section_id": 3196, "quality": 0.5714285714285714, "length": 4}, "so_4114794_7378683_0": {"section_id": 6794, "quality": 0.7368421052631579, "length": 14}, "so_4114794_7378683_1": {"section_id": 6794, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_4114794_7378683_2": {"section_id": 4051, "quality": 0.5294117647058824, "length": 9}, "so_4114794_7378683_3": {"section_id": 7790, "quality": 0.6153846153846154, "length": 8}, "so_4114794_4160654_0": {"section_id": 4092, "quality": 0.5714285714285714, "length": 4}, "so_4114794_7378683_0": {"section_id": 8546, "quality": 0.7368421052631579, "length": 14}, "so_4114794_7378683_1": {"section_id": 8546, "quality": 0.7777777777777778, "length": 7}}}});