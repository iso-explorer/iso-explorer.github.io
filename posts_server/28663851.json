post_cb({"bq_ids": {"n4140": {"so_28663851_28664441_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 3255}}, "n3337": {"so_28663851_28664441_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 3127}}, "n4659": {"so_28663851_28664441_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 4013}}}, "28663851": {"ViewCount": "53", "Body": "<p>For default parameter in the method, we only need to declare it in the header file, I want to know why we don't need to specify it in the implementation as well?</p>\n<p>method1(int i, int j=2)</p>\n", "Title": "why we only need to declare in the header file for default parameter?", "CreationDate": "2015-02-22T22:05:18.223", "LastActivityDate": "2015-02-22T23:09:09.303", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "Id": "28663851", "Score": "2", "OwnerUserId": "1136700", "Tags": "<c++>", "AnswerCount": "2"}, "28663945": {"Id": "28663945", "PostTypeId": "2", "Body": "<p>Because default parameters are handled in the caller. The compiler automatically adds missing parameters according to the header. The function itself doesn't need that information, and providing it twice would only call for inconsistencies. If you want to have it also in the implementation, you might put it in comments, but you will then have to keep it in sync (e.g. <code>method1(int i, int j /*=2*/)</code>. As an alternative, you can provide two overloads, so that the missing parameter is added by the implementation</p>\n<pre><code>method1(int i, int j);\nmethod1(int i);\n\nmethod1(int i, int j) { ... }\nmethod1(int i) { method1(i, 2); }\n</code></pre>\n<p>This might slightly decrease performance, because the compiler might not be able to inline the 1-arg call, whereas it always can with default parameters.</p>\n", "LastEditorUserId": "2653222", "LastActivityDate": "2015-02-22T22:34:05.740", "Score": "5", "CreationDate": "2015-02-22T22:13:53.690", "ParentId": "28663851", "CommentCount": "2", "OwnerUserId": "2653222", "LastEditDate": "2015-02-22T22:34:05.740"}, "28664441": {"Id": "28664441", "PostTypeId": "2", "Body": "<p>The default values for parameters are supposed to supply missing arguments that the caller didn't provide. So the compiler has to add them when the function is called.  </p>\n<p>Moreover, the standard explicitely foressees that different set of default values could be used in different scopes: </p>\n<blockquote>\n<p id=\"so_28663851_28664441_0\"><strong>8.3.6/4:</strong>  (...) default arguments can be added in later declarations of a function in the same scope. Declarations in\n  different scopes have completely distinct sets of default arguments.\n  That is, declarations in inner scopes do not acquire default arguments\n  from declarations in outer scopes, and vice versa. In a given function\n  declaration, each parameter subsequent to a parameter with a default\n  argument shall have a default argument supplied in this or a previous\n  declaration or shall be a function parameter pack.</p>\n</blockquote>\n<p>So in short:  in different scopes (and compilation units) you can use different set of default values, but within any given scope, you cannot redefine these default values. </p>\n<p>A little example to illustrate this:  </p>\n<pre><code>void foo(int i = 10, int j = 20);    // declare default parameters \n\nvoid test()                          // entering a new scope \n{\n    void foo(int i = 5, int j = 10);    // redeclared in scope of the test function\n    cout &lt;&lt; \"Call foo within test(): \";\n    foo();                             // called with the default values OF THE SCOPE: 5 10  \n}\n\n// void foo(int i = 8, int j = 20);    // FORBIDDEN ! can't redeclare  different parameters in global scope as it was already declared before\n\nint main(int ac, char**av) \n{\n    cout &lt;&lt; \"Call foo within main(): \"; \n    foo();                      // called with the default value of global scope : 10 20 \n    test(); \n}\n\nvoid foo(int i, int j) {  // not allowed to redeclare defaults here\n    cout &lt;&lt; \"FOO with \" &lt;&lt; i &lt;&lt; \" and \" &lt;&lt; j &lt;&lt; endl; \n}\n</code></pre>\n<p>However use this possibility of multiple default with care, because for practical reasons, you generally have the function declared in one header only, and if you have ir redeclared with in several places, it makes the whole stuff more difficult to maintain. </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-02-22T23:09:09.303", "Score": "0", "CreationDate": "2015-02-22T23:03:42.350", "ParentId": "28663851", "CommentCount": "0", "OwnerUserId": "3723423", "LastEditDate": "2015-02-22T23:09:09.303"}});