post_cb({"16374286": {"ParentId": "16373831", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Why can there be an initializer in the class definition?</p>\n<p>Concerning the two exceptions for <code>const</code> and <code>constexpr</code> static data members:</p>\n<p>[class.static.data]/3</p>\n<blockquote>\n<p id=\"so_16373831_16374286_0\">[ Note: In both these cases, the member may appear in constant expressions. \u2014 end note ]</p>\n</blockquote>\n<p>I.e. with an initializer, you may use them in constant expressions, e.g.</p>\n<pre><code>struct s\n{\n    static std::size_t const len = 10;\n    int arr[len];\n};\nstd::size_t const s::len;\n</code></pre>\n<p>If <code>len</code> wasn't initialized in the class definition, the compiler couldn't easily know its value in the next line to define the length of <code>arr</code>.</p>\n<p>One could argue about allowing initializers for of non-<code>const</code>, non-<code>constexpr</code> static data members in the class definition, but this could interfere with the initialization order:</p>\n<p>[basic.start.init]/2</p>\n<blockquote>\n<p id=\"so_16373831_16374286_1\">Definitions of explicitly specialized class template static data members have ordered initialization. Other class template static data members (i.e., implicitly or explicitly instantiated specializations) have unordered initialization. <strong>Other non-local variables with static storage duration have ordered initialization.</strong></p>\n</blockquote>\n<p>That is, the order of the definitions including initializers is important. The order of (dynamic) initialization of non-local objects is only defined within a translation unit, this is another reason why there has to be a definition including initializer for non-<code>const</code>, non-<code>constexpr</code> static data members.</p>\n<hr>\n<p>What's the point of this extra definition?</p>\n<p>This has already been answered in the comments IMO. You might want to add the ODR, that is, as a name with external linkage, the static data member must (only) be defined in one translation unit (if it's ODR-used). It's up to the programmer to choose this translation unit.</p>\n</hr>", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2013-05-04T12:46:00.353", "Id": "16374286", "Score": "6", "CreationDate": "2013-05-04T12:26:19.520", "LastActivityDate": "2013-05-04T12:46:00.353"}, "16373831": {"CommentCount": "5", "AcceptedAnswerId": "16374286", "CreationDate": "2013-05-04T11:35:30.393", "LastActivityDate": "2013-05-04T12:46:00.353", "PostTypeId": "1", "ViewCount": "9095", "FavoriteCount": "4", "Title": "In-class initialization of static data members", "Id": "16373831", "Score": "9", "Body": "<p>In C++, <code>static</code> members may not be initialized in the class body with these exceptions:</p>\n<ul>\n<li><code>static</code> members of <code>const</code> integral type <strong>can</strong> be</li>\n<li><code>static</code> members of <code>constexpr</code> literal type <strong>must</strong> be</li>\n</ul>\n<p>Can you explain why these exceptions? </p>\n<p>Also, this holds:</p>\n<blockquote>\n<p id=\"so_16373831_16373831_0\">Even if a <code>const static</code> data member is initialized in the class body, that member ordinarily should be defined outside the class definition.</p>\n</blockquote>\n<p>This I never understood at all. What's the point of this extra definition?</p>\n<p>Just trying to get some intuitions here.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2308693", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16373831_16373831_0": {"section_id": 5907, "quality": 0.5714285714285714, "length": 8}, "so_16373831_16374286_1": {"section_id": 7151, "quality": 1.0, "length": 33}, "so_16373831_16374286_0": {"section_id": 5908, "quality": 0.7, "length": 7}}, "n3337": {"so_16373831_16373831_0": {"section_id": 5679, "quality": 0.5714285714285714, "length": 8}, "so_16373831_16374286_1": {"section_id": 6895, "quality": 1.0, "length": 33}, "so_16373831_16374286_0": {"section_id": 5680, "quality": 0.7, "length": 7}}, "n4659": {"so_16373831_16373831_0": {"section_id": 7390, "quality": 0.6428571428571429, "length": 9}}}});