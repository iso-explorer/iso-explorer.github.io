post_cb({"bq_ids": {"n4140": {"so_32799078_32799263_0": {"length": 38, "quality": 0.95, "section_id": 5333}}, "n3337": {"so_32799078_32799263_0": {"length": 38, "quality": 0.95, "section_id": 5130}}, "n4659": {"so_32799078_32799263_2": {"length": 10, "quality": 1.0, "section_id": 6754}, "so_32799078_32799263_0": {"length": 38, "quality": 0.95, "section_id": 6754}, "so_32799078_32799263_5": {"length": 5, "quality": 1.0, "section_id": 6754}, "so_32799078_32799263_4": {"length": 5, "quality": 1.0, "section_id": 6754}, "so_32799078_32799263_8": {"length": 4, "quality": 1.0, "section_id": 6754}, "so_32799078_32799263_9": {"length": 18, "quality": 1.0, "section_id": 6754}}}, "32799349": {"Id": "32799349", "PostTypeId": "2", "Body": "<p>G++ doesn't support Unicode characters in the source yet:</p>\n<ul>\n<li><a href=\"https://gcc.gnu.org/wiki/FAQ#utf8_identifiers\" rel=\"nofollow\">What is the status of adding the UTF-8 support for identifier names in GCC?</a></li>\n</ul>\n<p>Notably, the errors generated by your program are for the individual octets of the UTF-8 encoding, not for the Unicode character they represent.  <code>\u2260</code> is being seen as three bytes: <code>\\342\\211\\240</code> and <code>\u00ab</code> as two: <code>\\302\\253</code>.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2015-09-26T16:34:00.460", "Score": "2", "CreationDate": "2015-09-26T16:28:54.660", "ParentId": "32799078", "CommentCount": "0", "OwnerUserId": "103167", "LastEditDate": "2015-09-26T16:34:00.460"}, "32799263": {"Id": "32799263", "PostTypeId": "2", "Body": "<p>The C++ Standard requires (section 2.10):</p>\n<blockquote>\n<p id=\"so_32799078_32799263_0\">An identi\ufb01er is an arbitrarily long sequence of letters and digits. <strong>Each universal-character-name in an identifier shall designate a character whose encoding in ISO 10646 falls into one of the ranges specified in E.1.</strong> The initial element shall not be a universal-character-name designating a character whose encoding falls into one of the ranges specified in E.2. Upper- and lower-case letters are different. All characters are significant.</p>\n</blockquote>\n<p>And E.1:</p>\n<blockquote>\n<p id=\"so_32799078_32799263_1\"><strong>Ranges of characters allowed <code>[charname.allowed]</code></strong></p>\n<ul>\n<li><p id=\"so_32799078_32799263_2\">00A8, 00AA, 00AD, 00AF, 00B2-00B5, 00B7-00BA, 00BC-00BE, 00C0-00D6, 00D8-00F6, 00F8-00FF</p></li>\n<li><p id=\"so_32799078_32799263_3\">0100-167F, 1681-180D, 180F-1FFF</p></li>\n<li><p id=\"so_32799078_32799263_4\">200B-200D, 202A-202E, 203F-2040, 2054, 2060-206F</p></li>\n<li><p id=\"so_32799078_32799263_5\">2070-218F, 2460-24FF, 2776-2793, 2C00-2DFF, 2E80-2FFF</p></li>\n<li><p id=\"so_32799078_32799263_6\">3004-3007, 3021-302F, 3031-303F</p></li>\n<li><p id=\"so_32799078_32799263_7\">3040-D7FF</p></li>\n<li><p id=\"so_32799078_32799263_8\">F900-FD3D, FD40-FDCF, FDF0-FE44, FE47-FFFD</p></li>\n<li><p id=\"so_32799078_32799263_9\">10000-1FFFD, 20000-2FFFD, 30000-3FFFD, 40000-4FFFD, 50000-5FFFD,\n  60000-6FFFD, 70000-7FFFD, 80000-8FFFD, 90000-9FFFD, A0000-AFFFD,\n  B0000-BFFFD, C0000-CFFFD, D0000-DFFFD, E0000-EFFFD\n  0300-036F, 1DC0-1DFF, 20D0-20FF, FE20-FE2F</p></li>\n</ul>\n</blockquote>\n<p>Your angle brackets are 0x300A and 0x300B, which are not included.  Not equal is 0x2260, also disallowed.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2015-09-26T16:38:42.880", "Score": "1", "CreationDate": "2015-09-26T16:21:16.260", "ParentId": "32799078", "CommentCount": "3", "OwnerUserId": "103167", "LastEditDate": "2015-09-26T16:38:42.880"}, "32799078": {"ViewCount": "875", "Body": "<p>I heard that it is possible to use unicode variable names using the <code>-fextended-identifiers</code> flag in <code>gcc</code>. So I made a test program in C++ but it does not compile.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#define \u00ac !\n#define \u2260 !=\n#define \u00ab &lt;&lt;\n#define \u00bb &gt;&gt;\n\n/* uniq: remove duplicate lines from stdin */\nint main() {\n    std::string s;\n    std::string t = \"\";\n    while (cin \u00bb s) {\n        if (s \u2260 t)\n            cout \u00ab s;\n        t = s;\n    }\n    return 0;\n}\n</code></pre>\n<p>I get these errors:</p>\n<pre><code>g++ -fextended-identifiers -g3 -o a main.cpp\nmain.cpp:10:3: error: stray \u2018\\342\u2019 in program\n   if (s \u2260 t)\n   ^\nmain.cpp:10:3: error: stray \u2018\\211\u2019 in program\nmain.cpp:10:3: error: stray \u2018\\240\u2019 in program\nmain.cpp:11:4: error: stray \u2018\\302\u2019 in program\n    cout \u00ab s;\n    ^\nmain.cpp:11:4: error: stray \u2018\\253\u2019 in program\n</code></pre>\n<p>What is going on? Aren't these macro names supposed to work with <code>-fextended-identifiers</code>?</p>\n", "AcceptedAnswerId": "32799263", "Title": "Why doesn't these unicode variable names work with -fextended-identifiers? \u00ab, \u00bb and \u2260", "CreationDate": "2015-09-26T16:02:39.343", "LastActivityDate": "2015-09-26T16:38:42.880", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "Tags": "<c++><gcc><unicode><variable-names>", "Id": "32799078", "Score": "1", "OwnerUserId": "3787875", "ClosedDate": "2015-09-26T16:31:14.173", "AnswerCount": "2"}});