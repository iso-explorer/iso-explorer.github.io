post_cb({"42472844": {"ParentId": "42472795", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The object of <code>A</code> gets created implicitly. To avoid such confusing cases, declare constructor <a href=\"http://en.cppreference.com/w/cpp/language/explicit\" rel=\"nofollow noreferrer\"><code>explicit</code></a>. It is also considered as a good practice in general.</p>\n<pre><code>explicit A(int n = 0)\n</code></pre>\n<p>The standard (<code>N4140 12.3.1/1</code>) says:</p>\n<blockquote>\n<p id=\"so_42472795_42472844_0\">A constructor declared without the <em>function-specifier</em> <code>explicit</code> specifies a conversion from the types of its\n  parameters to the type of its class. Such a constructor is called a <em>converting constructor</em>. [ <em>Example:</em></p>\n<pre><code>struct X {\n    X(int);\n    X(const char*, int =0);\n    X(int, int);\n};\n\nvoid f(X arg) {\n    X a = 1; // a = X(1)\n    X b = \"Jessie\"; // b = X(\"Jessie\",0)\n    a = 2; // a = X(2)\n    f(3); // f(X(3))\n    f({1, 2}); // f(X(1,2))\n}\n</code></pre>\n<p id=\"so_42472795_42472844_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "3246555", "LastEditorUserId": "3246555", "LastEditDate": "2017-02-26T19:32:03.277", "Id": "42472844", "Score": "4", "CreationDate": "2017-02-26T19:03:20.593", "LastActivityDate": "2017-02-26T19:32:03.277"}, "42472795": {"CommentCount": "2", "ViewCount": "77", "PostTypeId": "1", "LastEditorUserId": "2721822", "CreationDate": "2017-02-26T18:59:43.460", "LastActivityDate": "2017-02-26T19:32:03.277", "Title": "converting constructor: How do you explain a function given different arguments in c++", "AcceptedAnswerId": "42472844", "LastEditDate": "2017-02-26T19:16:50.907", "Id": "42472795", "Score": "0", "Body": "<p>I am trying to understand the following code. My problem is with the function f(). I don't understand why when we passed an integer argument we didn't have a compilation error.</p>\n<p>The function  <code>void f(const A &amp;a1, const A &amp;a2 = A())</code> has two const parameters which are passed as reference to class A. in the main function we call f(3). I really didn't understand what happened exactly.</p>\n<p>i couldn't find a correct title for the question. Is there a technical word for what is happening in here?</p>\n<hr>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    A(int n = 0)\n        : m_n(n)\n    {\n        std::cout &lt;&lt; 'd';\n    }\n\n    A(const A&amp; a)\n        : m_n(a.m_n)\n    {\n        std::cout &lt;&lt; 'c';\n    }\n\nprivate:\n    int m_n;\n};\n\nvoid f(const A &amp;a1, const A &amp;a2 = A())\n{\n}\n\nint main()\n{\n    A a(2), b;\n    const A c(a), &amp;d = c, e = b;\n    b = d;\n    A *p = new A(c), *q = &amp;a;\n    static_cast&lt;void&gt;(q);\n    delete p;\n    f(3);\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n</hr>", "Tags": "<c++>", "OwnerUserId": "2721822", "AnswerCount": "3"}, "42472871": {"ParentId": "42472795", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In c++, a constructor with only one parameter is known as a <em>converting constructor</em>. The reason the function doesn't complain is because the copy operation needed to pass the value into <code>a1</code> is making use of <code>A(int n = 0)</code> implicitly.</p>\n<p>Stop this from happening by marking it <code>explicit</code></p>\n<pre><code>explicit A(int n = 0)\n</code></pre>\n<p>As a side note; it is generally considered good practise to always mark single parameter constructors explicit unless you really want that behaviour (why?!)</p>\n", "OwnerUserId": "3104399", "LastEditorUserId": "3104399", "LastEditDate": "2017-02-26T19:08:42.980", "Id": "42472871", "Score": "5", "CreationDate": "2017-02-26T19:06:27.797", "LastActivityDate": "2017-02-26T19:08:42.980"}, "bq_ids": {"n4140": {"so_42472795_42472844_0": {"section_id": 388, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_42472795_42472844_0": {"section_id": 379, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_42472795_42472844_0": {"section_id": 405, "quality": 0.8888888888888888, "length": 16}}}, "42472974": {"ParentId": "42472795", "CommentCount": "0", "Body": "<p>There exists a constructor for class A that takes an int so this constructor can be used to convert the parameter to the correct type. The compiler is allowed to do this once for each parameter.\nPrefixing the <strong>explicit</strong> keyword to the constructor prevents the compiler from using that constructor for implicit conversions\nSolution:\ndefine</p>\n<pre><code>explicit A(int n = 0)\n</code></pre>\n", "OwnerUserId": "7515649", "PostTypeId": "2", "Id": "42472974", "Score": "3", "CreationDate": "2017-02-26T19:15:11.640", "LastActivityDate": "2017-02-26T19:15:11.640"}});