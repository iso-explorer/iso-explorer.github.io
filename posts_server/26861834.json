post_cb({"26862270": {"Id": "26862270", "PostTypeId": "2", "Body": "<p>It will be more clear if to consider standard class <code>std::array</code> It is declared the following way</p>\n<pre><code>template &lt;class T, size_t N &gt;\nstruct array;\n</code></pre>\n<p>As it is seen it has two template parameters: type parameter T and non-type parameter N. Why is N a non-type parameter? Because its type is already defined and is equal to <code>size_t</code>. For this non-type parameter <code>N</code> you have to supply some constant value. For example</p>\n<pre><code>std::array&lt;int, 10&gt; aq1;\nstd::array&lt;double, 20&gt; a2;\n</code></pre>\n<p><code>T</code> is a type parameter because we have to supply a type as a template argument that to instantiate an object of this class. We may not supply a value as for example</p>\n<pre><code>std::array&lt;10, 10&gt; a3;\n</code></pre>\n<p>though 10 is integer literal of type int. But we may write</p>\n<pre><code>std::array&lt;decltype( 10 ), 10&gt; a4;\n</code></pre>\n<p>Compare the first template argument setting and the second template argument setting.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-11-11T11:55:02.783", "Score": "0", "CreationDate": "2014-11-11T10:05:54.870", "ParentId": "26861834", "CommentCount": "2", "LastEditDate": "2014-11-11T11:55:02.783", "OwnerUserId": "2877241"}, "26861908": {"Id": "26861908", "PostTypeId": "2", "Body": "<p>I am not part of the committee, but I would say the reason is that while you could easily describe arguments for non-type template parameters of type <code>int</code> or even <code>const char *</code> as a value, it gets less clear for a non-type template parameter of reference type, e.g. <code>std::string &amp;</code>. The argument for that parameter is an object, not its value.</p>\n", "LastActivityDate": "2014-11-11T09:48:29.043", "Score": "4", "CreationDate": "2014-11-11T09:48:29.043", "ParentId": "26861834", "CommentCount": "3", "OwnerUserId": "1782465"}, "26861834": {"ViewCount": "832", "Body": "<p>In the C++ template terminology we have non-type template parameters, type template parameters, and template template parameters (and then the same list with arguments).</p>\n<p>Why is it called <em>non-type</em>? Isn't it a <em>value</em>? Shouldn't it be \"value template parameter\"? </p>\n<p>Do I miss anything if I think of them as value template parameters?</p>\n<p>Note: out of curiosity, I checked the documentation of the D language, and they call it value.</p>\n", "AcceptedAnswerId": "26862026", "Title": "Why is it called \"non-type\" template parameter?", "CreationDate": "2014-11-11T09:43:44.443", "Id": "26861834", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-11-11T11:55:02.783", "Score": "14", "OwnerUserId": "650405", "Tags": "<c++><templates><non-type>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_26861834_26862026_1": {"length": 35, "quality": 0.8333333333333334, "section_id": 7202}}, "n3337": {"so_26861834_26862026_1": {"length": 35, "quality": 0.8333333333333334, "section_id": 6946}}, "n4659": {"so_26861834_26862026_1": {"length": 35, "quality": 0.8333333333333334, "section_id": 8711}}}, "26862026": {"Id": "26862026", "PostTypeId": "2", "Body": "<p>\"value\" has a very specific non-intuitive definition in C++ that does not necessarily apply to non-type template arguments:</p>\n<blockquote>\n<p id=\"so_26861834_26862026_0\"><strong>3.9 Types [basic.types]</strong></p>\n<p id=\"so_26861834_26862026_1\">4 The <em>object representation</em> of an object of type <code>T</code> is the sequence of <em>N</em> <code>unsigned char</code> objects taken up by the object of type <code>T</code>, where <em>N</em> equals <code>sizeof(T)</code>. The <em>value representation</em> of an object is the set of bits that hold the value of type <code>T</code>. <strong>For trivially copyable types, the value representation is a set of bits in the object representation that determines a <em>value</em>, which is one discrete element of an implementation-defined set of values.</strong></p>\n</blockquote>\n<p>Even though the C++ standard does occasionally use the word \"value\" informally, it's good that they haven't done so here. A non-type template argument type does not need to be trivially copyable. Specifically, as Mike Seymour commented on the question, it could be a reference type.</p>\n<p>That said, I do feel I should note that I don't think the term \"non-type template parameter\" is a correct one. It used to be, but we now have template template parameters, which aren't types, but also aren't non-type template parameters.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2014-11-11T10:07:46.500", "Score": "12", "CreationDate": "2014-11-11T09:54:42.463", "ParentId": "26861834", "CommentCount": "3", "LastEditDate": "2014-11-11T10:07:46.500", "OwnerUserId": "743382"}});