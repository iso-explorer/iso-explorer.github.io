post_cb({"1389403": {"ParentId": "1389337", "CommentCount": "4", "Body": "<p>In C++ nothing prevent an inline function to have a static variable and the compiler has to arrange to make that variable common between all translation units (like it has to do it for template instantiation static class members and static function variables).  7.1.2/4</p>\n<blockquote>\n<p id=\"so_1389337_1389403_0\">A <code>static</code> variable in an <code>extern inline</code> function always refer to the same object.</p>\n</blockquote>\n<p>Note that in C, inline functions can't have static variables (nor reference to object with internal linkage).</p>\n", "OwnerUserId": "136208", "PostTypeId": "2", "Id": "1389403", "Score": "10", "CreationDate": "2009-09-07T13:17:43.800", "LastActivityDate": "2009-09-07T13:17:43.800"}, "1389567": {"ParentId": "1389337", "CommentCount": "1", "Body": "<p>I've tried the code that the OP posted with VS2008 in four ways and there doesn't seem to be a problem with the static instance of <code>MyClass</code> inside <code>MyClass::Instance()</code>.</p>\n<ol>\n<li><code>Instance()</code> is defined in\nMyClass.cpp:  This is the normal way\neverything is fine.</li>\n<li><code>Instance()</code> is defined only inside the\nclass declaration.  This is the\nalternative and everything is fine.</li>\n<li><code>Instance()</code> is defined <code>inline</code>\noutside the class, but in the header\nand everything is fine.</li>\n<li>as 3. but without the <code>inline</code> and\nthe linker says there are mutiple definitions of\n<code>Instance()</code></li>\n</ol>\n<p>I think that the book author is concerned with 4. above and knows that the static instance of MyClass will be taken care of in a program that compiles and links.</p>\n", "OwnerUserId": "4834", "PostTypeId": "2", "Id": "1389567", "Score": "1", "CreationDate": "2009-09-07T14:01:27.410", "LastActivityDate": "2009-09-07T14:01:27.410"}, "bq_ids": {"n4140": {"so_1389337_1389403_0": {"section_id": 5404, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_1389337_1389403_0": {"section_id": 5199, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_1389337_1389403_0": {"section_id": 6853, "quality": 0.7777777777777778, "length": 7}}}, "1389337": {"CommentCount": "1", "AcceptedAnswerId": "1389403", "CreationDate": "2009-09-07T13:01:37.320", "LastActivityDate": "2009-09-07T14:01:27.410", "PostTypeId": "1", "ViewCount": "5258", "FavoriteCount": "5", "Title": "Singletons via static instance in C++ -- into source or into header files?", "Id": "1389337", "Score": "8", "Body": "<p>Cheers,</p>\n<p>I ran into this chunk of code in \"Programming Game AI by Example\":</p>\n<pre><code>/* ------------------ MyClass.h -------------------- */\n#ifndef MY_SINGLETON\n#define MY_SINGLETON\n\nclass MyClass\n{\nprivate:\n\n  // member data\n  int m_iNum;\n\n  //constructor is private\n  MyClass(){}\n\n  //copy ctor and assignment should be private\n  MyClass(const MyClass &amp;);\n  MyClass&amp; operator=(const MyClass &amp;);\n\npublic:\n\n  //strictly speaking, the destructor of a singleton should be private but some\n  //compilers have problems with this so I've left them as public in all the\n  //examples in this book\n  ~MyClass();\n\n  //methods\n  int GetVal()const{return m_iNum;}\n  static MyClass* Instance();\n};\n\n#endif\n\n/* -------------------- MyClass.cpp ------------------- */\n\n//this must reside in the cpp file; otherwise, an instance will be created\n//for every file in which the header is included\nMyClass* MyClass::Instance()\n{\n  static MyClass instance;\n\n  return &amp;instance;\n}\n</code></pre>\n<p>I am confused by the matter-of-fact statement by the author that the statically declared variable inside a function in header would result in declaring multiple, separate static variables <code>instance</code>. I don't think I've seen this behavior in my usual implementations of <code>getInstance()</code> function which I regularly put into headers (except that I like playing with pointers and initializing the singleton upon first use). I'm using GCC for my work.</p>\n<p>So what does the standard say? What do non-compliant compilers say? Is the author's statement correct, and if so, can you name some compilers which would create multiple instances if <code>getInstance()</code> were declared in headers?</p>\n", "Tags": "<c++><singleton><compiler-construction>", "OwnerUserId": "39974", "AnswerCount": "2"}});