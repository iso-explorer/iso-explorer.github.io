post_cb({"3455706": {"CommentCount": "0", "ViewCount": "185", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2010-08-11T06:11:41.327", "LastActivityDate": "2015-11-21T16:59:54.653", "Title": "The order of data in memory", "AcceptedAnswerId": "3455812", "LastEditDate": "2015-11-21T16:59:54.653", "Id": "3455706", "Score": "5", "Body": "<p>A few simple questions.</p>\n<pre><code>const int gFirst;\nconst int gSecond;\n\nstruct Data\n{\n    static int First;\n    static int Second;\n\n    int first;\n    int second;\n};\n\nData data;\n</code></pre>\n<p>Is it guaranteed that the following statements are true?</p>\n<ol>\n<li><code>&amp;gFirst &lt; &amp;gSecond</code> </li>\n<li><code>&amp;Data::First &lt; &amp;Data::Second</code> </li>\n<li><code>&amp;data.first &lt; &amp;data.second</code></li>\n</ol>\n", "Tags": "<c++><pointers><memory><order>", "OwnerUserId": "313853", "AnswerCount": "2"}, "3455812": {"ParentId": "3455706", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2010-08-11T06:28:49.230", "Score": "8", "LastEditorUserId": "87234", "LastEditDate": "2010-08-11T06:34:46.317", "Id": "3455812", "OwnerUserId": "87234", "Body": "<p>1) This result is unspecified.<br>\n2) This result is unspecified.*<br>\n3) Yes.  </br></br></p>\n<p>The relevant section in the standard is \u00a75.9/2. Relational comparisons between the pointers <code>p</code> and <code>q</code> are only specified when:</p>\n<ul>\n<li><code>p</code> and <code>q</code> point to the same object or function, point to one past the end of the same array, or both are null. In this case, <code>p &lt;= q</code> and <code>p &gt;= q</code> are true, and <code>p &lt; q</code> and <code>p &gt; q</code> are false.</li>\n<li><code>p</code> and <code>q</code> point to nonstatic data members of the same object, the pointer to the later declared member compares greater. (Note, this comparison cannot be between access specifiers.)</li>\n<li><code>p</code> and <code>q</code> point to elements within the same array or one past the end of the array, the pointer to the element with the higher subscript or to one past the end of the array compares greater.</li>\n<li><code>p</code> and <code>q</code> point to data members of the same union object, in which case they compare equal. </li>\n</ul>\n<p>In all other cases, the result is not specified.</p>\n<p><sub>*Because they are static, they (obviously) do not get the \"nonstatic member\" rules. They will be defined in some translation unit, and therefore are just like any other pointer. (Unspecified.)\n</sub></p>\n<hr>\n<p><strong>Note!</strong> There is a way to get total ordering, and that is via <code>std::less&lt;void*&gt;</code> (and all the other comparative function objects.)</p>\n<p>This is in \u00a720.3.3/8:</p>\n<blockquote>\n<p id=\"so_3455706_3455812_0\">For templates <code>greater</code>, <code>less</code>, <code>greater_equal</code>, and <code>less_equal</code>, the specializations for any\n  pointer type yield a total order, even if the built-in operators <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> do not.</p>\n</blockquote>\n<p>So while you don't know if <code>std::less&lt;void*&gt;(&amp;gFirst, &amp;gSecond)</code> is <code>true</code> or <code>false</code>, you are guaranteed:</p>\n<pre><code>std::less&lt;void*&gt;(&amp;gFirst, &amp;gSecond) ==\n    std::greater&lt;void*&gt;(&amp;gSecond, &amp;gFirst);\nstd::less&lt;void*&gt;(&amp;Data::First, &amp;Data::Second) ==\n    std::greater&lt;void*&gt;(&amp;Data::Second, &amp;Data::First);\n</code></pre>\n<p>Which can prove useful.</p>\n</hr>", "LastActivityDate": "2010-08-11T06:34:46.317"}, "bq_ids": {"n4140": {"so_3455706_3455812_0": {"section_id": 4605, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_3455706_3455812_0": {"section_id": 4423, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_3455706_3455812_0": {"section_id": 5962, "quality": 0.7333333333333333, "length": 11}}}, "3455758": {"ParentId": "3455706", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2010-08-11T06:19:45.850", "Score": "6", "LastEditorUserId": "14065", "LastEditDate": "2010-08-11T06:36:03.007", "Id": "3455758", "OwnerUserId": "14065", "Body": "<p>The answer:</p>\n<pre><code>1) Not guaranteed.\n   But probably.\n   But the order of initialization is guaranteed.\n2) No. \n   You just have the declaration here.  \n   You need to to define the instances in a source file.\n   Then they will behave the same way as the objects in (1).\n3) Yes.\n</code></pre>\n", "LastActivityDate": "2010-08-11T06:36:03.007"}});