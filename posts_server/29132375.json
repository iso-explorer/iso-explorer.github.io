post_cb({"29132713": {"ParentId": "29132375", "CommentCount": "0", "CreationDate": "2015-03-18T21:08:26.937", "OwnerUserId": "65863", "PostTypeId": "2", "Id": "29132713", "Score": "1", "Body": "<blockquote>\n<p id=\"so_29132375_29132713_0\">Is this code equivalent to the above:</p>\n</blockquote>\n<p>I would think so, yes, because you are essentially doing <code>: x(x)</code>, just using a pointer to read the current value of <code>x</code> as the input value, but <code>x</code> has not been initialized yet.</p>\n", "LastActivityDate": "2015-03-18T21:08:26.937"}, "29133610": {"ParentId": "29132375", "LastEditDate": "2017-05-23T12:21:57.300", "CommentCount": "0", "CreationDate": "2015-03-18T22:06:19.957", "Score": "2", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "29133610", "OwnerUserId": "1708801", "Body": "<p>C++14 makes it clear that using an <a href=\"https://stackoverflow.com/q/23415661/1708801\">indeterminate value is undefined behavior</a>, from section <code>8.5</code> (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_29132375_29133610_0\">If no initializer is specified for an object, the object is\n  default-initialized. <strong>When storage for an object with automatic or\n  dynamic storage duration is obtained, the object has an indeterminate\n  value, and if no initialization is performed for the object, that\n  object retains an indeterminate value until that value is replaced</strong>\n  (5.17 [expr.ass]). [Note: Objects with static or thread storage\n  duration are zero-initialized, see 3.6.2 [basic.start.init]. \u2014end\n  note] <strong>If an indeterminate value is produced by an evaluation, the\n  behavior is undefined except in the following cases</strong>:</p>\n</blockquote>\n<p>The only exceptions being in the case of unsigned char. Which is probably why they changed the example section 3.3.2 from:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p>To:</p>\n<pre><code>unsigned char x = 12;\n{ unsigned char x = x; }\n</code></pre>\n<p>I do not see any exceptions that would exclude your example.</p>\n<p><code>x</code> has an indeterminate value until it is initialized but then you access its value during the initialization which invokes undefined behavior.</p>\n", "LastActivityDate": "2015-03-19T14:12:54.790"}, "29132375": {"CommentCount": "1", "ViewCount": "92", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-03-18T20:49:40.343", "LastActivityDate": "2015-08-06T17:37:24.840", "Title": "Initializing member variable with pointer to itself", "AcceptedAnswerId": "29133610", "LastEditDate": "2015-08-06T17:37:24.840", "Id": "29132375", "Score": "4", "Body": "<p>I've heard that the following is valid and leaves <code>x</code> uninitialized as if it were <code>int x;</code>:</p>\n<pre><code>int x = x;\n</code></pre>\n<p>What about this? Is this code equivalent to the above:</p>\n<pre><code>struct Foo\n{\n    Foo(int Foo::*p) : x(this-&gt;*p) { }\n    int x;\n};\n\nint main() {\n    Foo f(&amp;Foo::x);\n}\n</code></pre>\n<p>Is <code>f.x</code> still uninitialized? Do I have undefined behavior?</p>\n", "Tags": "<c++><initialization><undefined-behavior><pointer-to-member>", "OwnerUserId": "1594090", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29132375_29133610_0": {"section_id": 3291, "quality": 0.8367346938775511, "length": 41}}, "n4659": {"so_29132375_29133610_0": {"section_id": 4053, "quality": 0.8367346938775511, "length": 41}}}});