post_cb({"23214184": {"CommentCount": "7", "ViewCount": "80", "PostTypeId": "1", "LastEditorUserId": "619570", "CreationDate": "2014-04-22T08:20:13.477", "LastActivityDate": "2014-04-22T09:07:21.863", "Title": "protected affectation operator and public copy-ctor", "LastEditDate": "2014-04-22T09:07:21.863", "Id": "23214184", "Score": "0", "Body": "<p><strong>Firstly:</strong></p>\n<p>What are the possible reasons for which a class have is:</p>\n<ul>\n<li><code>operator =</code> protected</li>\n<li><code>copy-ctor</code> public ?</li>\n</ul>\n<p><strong>Secondly</strong>:</p>\n<p>Consider the following design:</p>\n<pre><code>class WeirdDesign\n{\n  public :\n    WeirdDesign(const WeirdDesign&amp; ){}\n\n  protected:\n    WeirdDesign&amp; operator=(const WeirdDesign&amp;){}\n};\n\nstruct A\n{\n  typedef std::vector&lt;WeirdDesign&gt; mytype;\n\n  void method(const mytype&amp; elements)\n  {\n    // access to elements\n  }\n};\n\nclass B\n{ \n   void inserter()\n   {\n      std::unordered_map &lt; std::string,  A::mytype &gt; mymap;\n      mymap.insert(std::make_pair(\"0\", A::mytype())); //fail at linking\n\n      A().method(mymap.find(\"0\")-&gt;second);\n   }\n};\n</code></pre>\n<p>When I try to insert a element inside <code>B::mymap_</code>, the linker fail to resolve the <code>operator=</code> of <code>WeirdDesign</code> ? Why ?</p>\n", "Tags": "<c++><copy>", "OwnerUserId": "619570", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23214184_23214949_0": {"section_id": 743, "quality": 0.7058823529411765, "length": 12}}, "n3337": {"so_23214184_23214949_0": {"section_id": 732, "quality": 0.7058823529411765, "length": 12}}, "n4659": {"so_23214184_23214949_0": {"section_id": 801, "quality": 0.7058823529411765, "length": 12}}}, "23214949": {"ParentId": "23214184", "CommentCount": "0", "Body": "<p>Some operations of standard containers require that the value type will be CopyAssignable. An example of such an operattion of std::vector is member function <code>insert</code>. </p>\n<p>The same is valid for standard associative containers. In paragraph #7 of section 23.2.4 Associative containers of the C++ Standard there is note</p>\n<blockquote>\n<p id=\"so_23214184_23214949_0\">[ Note: For example, in some cases key_type and mapped_type are\n  required to be CopyAssignable even though the associated value_type,\n  pair, is not CopyAssignable. \u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "23214949", "Score": "0", "CreationDate": "2014-04-22T08:58:18.823", "LastActivityDate": "2014-04-22T08:58:18.823"}});