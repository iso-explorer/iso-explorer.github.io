post_cb({"26956276": {"ParentId": "26956176", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><a href=\"http://eel.is/c++draft/class.friend#9.sentence-1\" rel=\"nofollow noreferrer\">[class.friend]/9</a>:</p>\n<blockquote>\n<p id=\"so_26956176_26956276_0\">A name nominated by a friend declaration shall be accessible in the\n  scope of the class containing the friend declaration.</p>\n</blockquote>\n<p>The reason is quite simple; <code>private</code> members shall obey a clear and definite rule:</p>\n<blockquote>\n<p id=\"so_26956176_26956276_1\">A member of a class can be</p>\n<ul>\n<li><code>private</code>; that is, its name can be used only by members and friends of the class in which it is declared.</li>\n</ul>\n</blockquote>\n<p>Allowing private members to be named in declarations inside unrelated classes would violate this rule: it enables another class to <strong>depend on an implementation detail</strong> without being explicitly allowed to. This becomes problematic, for instance, when changing a private member's name, type or signature, or removing it entirely; that's intended not to break the interface of that class.</p>\n<p>This can be circumvented by making the entirety of <code>x</code> a friend of <code>y</code>:</p>\n<pre><code>class x {\n    void xx() {}\n};\n\nclass y {\n    friend x;\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/adceca44035b434f\" rel=\"nofollow noreferrer\"><strong>Demo</strong></a>.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2017-10-27T20:04:27.003", "Id": "26956276", "Score": "12", "CreationDate": "2014-11-16T11:10:18.210", "LastActivityDate": "2017-10-27T20:04:27.003"}, "26956176": {"CommentCount": "4", "AcceptedAnswerId": "26956276", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-16T10:56:35.593", "LastActivityDate": "2017-10-27T20:04:27.003", "LastEditDate": "2016-03-18T10:31:47.520", "ViewCount": "2140", "FavoriteCount": "3", "Title": "Why can't a PRIVATE member function be a friend function of another class?", "Id": "26956176", "Score": "19", "Body": "<pre><code>class x\n{\n    void xx() {}\n};\n\nclass y\n{\n    friend void x::xx();\n};\n</code></pre>\n<p>This results in an error like </p>\n<blockquote>\n<p id=\"so_26956176_26956176_0\">error: friend function 'xx' is a private member of 'x'</p>\n</blockquote>\n<p>Why can't I declare a private member function to be a friend of another class?</p>\n", "Tags": "<c++><class><language-lawyer><friend><access-rights>", "OwnerUserId": "2164155", "AnswerCount": "2"}, "26956296": {"ParentId": "26956176", "CommentCount": "6", "Body": "<p>The idea of making <code>x::xx</code> <code>private</code> is supposed to be that <code>x::xx</code> is an implementation detail that other classes should not be relying on. It doesn't just mean that <code>x::xx</code> cannot be called by other classes, it means, or rather it should mean, that e.g. renaming <code>x::xx</code> to <code>x::xy</code> shouldn't break anything other than the class itself, and the class's friends.</p>\n<p>In your case, renaming <code>x::xx</code> to <code>x::xy</code> would cause class <code>y</code> to have an error, even though it is not a friend of <code>x</code>.</p>\n<p>A way to avoid that is to make <code>y</code> a friend of <code>x</code>, so that <code>y</code> can access <code>x</code>'s <code>private</code> members. It can then declare <code>x::xx</code> as a <code>friend</code>.</p>\n<p>(Note: the more direct answer to the question \"Why does the compiler not allow this?\" is \"Because the standard does not allow this.\", which naturally leads to the follow-up question \"Why does the standard not allow this?\". I'm attempting to answer that follow-up question.)</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "26956296", "Score": "13", "CreationDate": "2014-11-16T11:13:11.200", "LastActivityDate": "2014-11-16T11:13:11.200"}, "bq_ids": {"n4140": {"so_26956176_26956276_0": {"section_id": 6692, "quality": 1.0, "length": 10}}, "n3337": {"so_26956176_26956276_0": {"section_id": 6447, "quality": 1.0, "length": 10}}, "n4659": {"so_26956176_26956276_0": {"section_id": 8167, "quality": 1.0, "length": 10}}}});