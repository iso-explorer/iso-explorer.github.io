post_cb({"4444784": {"Id": "4444784", "PostTypeId": "2", "Body": "<p>If you want to do this, then do it the way everybody understands immediately without having to browse the standard: </p>\n<pre><code>MemoryManager()\n  // no initialization here\n{\n  lastPair_ = currentPair_ = firstPair_ = nullptr;\n}\n</code></pre>\n<p>However, I don't really see what this buys you over </p>\n<pre><code>MemoryManager()\n  : lastPair_(), currentPair_(), firstPair_()\n{}\n</code></pre>\n<p>which does exactly the same in only about half a dozen more characters. </p>\n", "LastEditorUserId": "140719", "LastActivityDate": "2010-12-14T22:36:22.107", "Score": "1", "CreationDate": "2010-12-14T22:07:24.640", "ParentId": "4438689", "CommentCount": "11", "OwnerUserId": "140719", "LastEditDate": "2010-12-14T22:36:22.107"}, "4438752": {"Id": "4438752", "PostTypeId": "2", "Body": "<p><strong>No</strong>, but it doesn't matter. Your code does not depend on the order in which <code>currentPair_</code> and <code>firstPair_</code> are zeroed. </p>\n", "LastEditorUserId": "207177", "LastActivityDate": "2010-12-14T11:51:52.713", "Score": "-1", "CreationDate": "2010-12-14T11:41:07.510", "ParentId": "4438689", "CommentCount": "6", "OwnerUserId": "15416", "LastEditDate": "2010-12-14T11:51:52.713"}, "4438738": {"Id": "4438738", "PostTypeId": "2", "Body": "<p><strong>Yes</strong>. As shown in your code, the members will be initialized in the same order they are <em>declared in the struct/class definition</em> (the order of initializers in the constructor definition is irrelevant, at best you will get a warning telling you they are in an incorrect order). </p>\n<blockquote>\n<p id=\"so_4438689_4438738_0\">12.6.2 \u00a75: Then, nonstatic data members shall be initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p>\n</blockquote>\n<p><strike>Note that this is only true for variables that are part of the same access specifier, so for instance variables found in a <code>public:</code> specifier may be initialized before or after those found in a <code>private:</code> specifier (the <code>struct</code> counts as a <code>public:</code> specifier, of course).</strike></p>\n<p>EDIT: the above paragraph was incorrect, I was thinking of allocation, not initialization: </p>\n<blockquote>\n<p id=\"so_4438689_4438738_1\">9.2 \u00a712: Nonstatic data members of a (non-union) class declared without an intervening access-specifier are allocated so that later members have higher addresses within a class object. The order of allocation of nonstatic data members separated by an access-specifier is unspecified (class.access.spec).</p>\n</blockquote>\n<p>However, the more conventional way has a reason to exist, namely that if the order of declaration of the variables changes (for instance, due to refactoring), the code will not break silently. People don't readily assume the order of declaration is relevant, unless a warning tells them otherwise.</p>\n", "LastEditorUserId": "236047", "LastActivityDate": "2010-12-14T12:28:14.643", "Score": "1", "CreationDate": "2010-12-14T11:39:35.427", "ParentId": "4438689", "CommentCount": "12", "OwnerUserId": "236047", "LastEditDate": "2010-12-14T12:28:14.643"}, "4443548": {"Id": "4443548", "PostTypeId": "2", "Body": "<p>For this specific example, the initialization order for members is irrelevant.  The following constructor would have the same behaviour as the one in the question:</p>\n<pre><code>MemoryManager():firstPair_(lastPair_ = currentPair_ = nullptr)\n{/*e.b.*/}\n</code></pre>\n<p>This is because the members are <a href=\"http://en.wikipedia.org/wiki/Plain_old_data_structure\" rel=\"nofollow\">POD</a> and so are not default initialized by the constructor at all (12.6.2/4 C++ '03):</p>\n<blockquote>\n<p id=\"so_4438689_4443548_0\">If a given nonstatic data member or base class is not named by a mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no ctor-initializer), then</p>\n<ul>\n<li>If the entity is a nonstatic data member of (possibly cv-qualified) class type (or array thereof) or a base class, and the entity class is a non-POD class, the entity is default-initialized (8.5). If the entity is a non- static data member of a const-qualified type, the entity class shall have a user-declared default constructor.</li>\n<li>Otherwise, the entity is not initialized. If the entity is of const-qualified type or reference type, or of a (possibly cv-qualified) POD class type (or array thereof) containing (directly or indirectly) a member of a const-qualified type, the program is ill-formed.</li>\n</ul>\n</blockquote>\n<p>For the raw pointer members above, the 'otherwise' bullet applies.</p>\n<p>Now, even if the members did have class type, say:</p>\n<pre><code>class MbrType {\npublic:\n  MbrType();\n  MbrType(int *);\n  MbrType(MbrType const &amp;);\n  MbrType &amp; operator=(MbrType const &amp;);\n};\n</code></pre>\n<p>Then, the constructor as you've written it would result in the members having the values that you expect, but a non optimizing compiler would be allowed to implement your constructor as:</p>\n<pre><code>MemoryManager()\n: firstPair_ ()  // implicit call to default constructor\n, currentPair_ () // implicit call to default constructor\n, lastPair_(currentPair_.operator=(firstPair_.operator=(MbrType (nullptr))))\n{/*e.b.*/}\n</code></pre>\n<p>Resulting in 6 calls rather than 3.</p>\n", "LastEditorUserId": "11698", "LastActivityDate": "2010-12-14T20:28:46.603", "Score": "0", "CreationDate": "2010-12-14T19:54:17.110", "ParentId": "4438689", "CommentCount": "9", "OwnerUserId": "11698", "LastEditDate": "2010-12-14T20:28:46.603"}, "bq_ids": {"n4140": {"so_4438689_4438738_1": {"length": 20, "quality": 0.7407407407407407, "section_id": 5873}, "so_4438689_4438738_0": {"length": 15, "quality": 0.9375, "section_id": 438}, "so_4438689_4443548_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 435}}, "n3337": {"so_4438689_4438738_1": {"length": 20, "quality": 0.7407407407407407, "section_id": 5644}, "so_4438689_4438738_0": {"length": 15, "quality": 0.9375, "section_id": 429}, "so_4438689_4443548_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 427}}, "n4659": {"so_4438689_4438738_1": {"length": 20, "quality": 0.7407407407407407, "section_id": 7356}, "so_4438689_4438738_0": {"length": 15, "quality": 0.9375, "section_id": 458}, "so_4438689_4443548_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 454}}}, "4442351": {"Id": "4442351", "PostTypeId": "2", "Body": "<p>As John Dibling has remarked, your construct is technically correct for the given concrete example, but it's brittle and it's hard to understand for many programmers.</p>\n<p>Brittleness:</p>\n<ul>\n<li><p>Can fail if order of declaration is changed.</p></li>\n<li><p>Can fail if the init list is changed.</p></li>\n</ul>\n<p>To evaluate such constructs on your own, keep this idea foremost in your mind: code is not about instructing the compiler to do your bidding, it is about communicating your intent to others (and perhaps your later self).</p>\n<p>Hence, try to write <em>clear</em> code.</p>\n<p>Cheers &amp; hth.,</p>\n", "LastActivityDate": "2010-12-14T17:49:44.803", "CommentCount": "3", "CreationDate": "2010-12-14T17:49:44.803", "ParentId": "4438689", "Score": "4", "OwnerUserId": "464581"}, "4438689": {"ViewCount": "382", "Body": "<p>I wonder if construction like this (initialization list) has well defined EO (evaluation order):</p>\n<pre><code>struct MemoryManager\n    {\n        Pair* firstPair_;//&lt;-beg\n        Pair* currentPair_;\n        Pair* lastPair_;//&lt;-end\n\n        MemoryManager():lastPair_(currentPair_ = firstPair_ = nullptr)\n            {/*e.b.*/}\n};\n</code></pre>\n<p>If yes I personally would prefer this way to the more conventional:</p>\n<pre><code>    MemoryManager():firstPair_(nullptr),\n                    currentPair_(nullptr),\n                    lastPair_(nullptr)\n    {/*e.b*/}\n</code></pre>\n", "AcceptedAnswerId": "4438738", "Title": "Order of evaluation", "CreationDate": "2010-12-14T11:34:50.933", "Id": "4438689", "CommentCount": "25", "PostTypeId": "1", "LastActivityDate": "2010-12-14T22:36:22.107", "Score": "1", "OwnerUserId": "207177", "Tags": "<c++><order-of-evaluation>", "AnswerCount": "5"}});