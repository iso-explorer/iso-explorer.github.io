post_cb({"bq_ids": {"n4140": {"so_13756649_13756699_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 3236}}, "n3337": {"so_13756649_13756699_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 3109}}, "n4659": {"so_13756649_13756699_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 3992}}}, "13756699": {"Id": "13756699", "PostTypeId": "2", "Body": "<p>Your first interpretation is correct.</p>\n<p>Such declarations are best parsed using the <strong>Right Left rule</strong>, which you can read <a href=\"http://www.informit.com/articles/article.aspx?p=31783&amp;seqNum=7\" rel=\"nofollow\">here</a> and <a href=\"http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html\" rel=\"nofollow\">here</a></p>\n<p>$8.3.4 from the C++ draft Standard:\n...</p>\n<blockquote>\n<p id=\"so_13756649_13756699_0\">Example: consider int x[3][5]; Here x is a 3 \u00d7 5 array of integers.</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_13756649_13756699_1\">Note: It follows from all this that arrays in C++ are stored <strong>row-wise</strong>\n  (last subscript varies fastest) and that the first subscript in the\n  declaration helps determine the amount of storage consumed by an array\n  but plays no other part in subscript calculations. \u2014end note ]</p>\n</blockquote>\n<p>Note C++ does not have operator[][]. It has only operator[]</p>\n", "LastEditorUserId": "418110", "LastActivityDate": "2012-12-07T04:06:44.677", "Score": "1", "CreationDate": "2012-12-07T03:59:55.317", "ParentId": "13756649", "CommentCount": "0", "OwnerUserId": "418110", "LastEditDate": "2012-12-07T04:06:44.677"}, "13756743": {"Id": "13756743", "PostTypeId": "2", "Body": "<p>I find it easiest to think of the \"rows\" and \"columns\" in a multidimensional array rather than trying to get my mind around \"arrays of arrays\". This has the convenient property that <em>I</em> decide which index is the rows and which is the columns. In other words, I can think of <code>int arr[3][4];</code> as a 2D array either with 3 rows and 4 columns or with 4 rows and 3 columns. As long as my code is consistent with my mental view of the array, all will work out fine. However, if half-way through a program I switch views, things will start breaking.</p>\n<p>With that said, usually I prefer to think of this example as 3 rows and 4 columns since this is similar to the mathematical notation in linear algebra where rows are listed first.</p>\n", "LastActivityDate": "2012-12-07T04:05:05.787", "CommentCount": "2", "CreationDate": "2012-12-07T04:05:05.787", "ParentId": "13756649", "Score": "0", "OwnerUserId": "1440565"}, "13756649": {"ViewCount": "545", "Body": "<p>We have the code:</p>\n<pre><code>int arr[3][4];\n</code></pre>\n<p>So <code>arr</code> is: </p>\n<ol>\n<li><p>An array of 3 elements, and every element is an array of 4 int.</p></li>\n<li><p>An array of 4 elements, and every element is an array of 3 int.</p></li>\n</ol>\n<p>which one is right and why? How does it work with higher dimensional array? I suppose this is concerning operator precedence and associativity.</p>\n", "AcceptedAnswerId": "13756699", "Title": "C++ multi-dimensional array", "CreationDate": "2012-12-07T03:54:36.307", "Id": "13756649", "CommentCount": "1", "LastEditDate": "2012-12-07T04:35:37.800", "PostTypeId": "1", "OwnerDisplayName": "user955249", "LastEditorUserId": "418110", "LastActivityDate": "2012-12-07T04:35:37.800", "Score": "1", "Tags": "<c++><c><syntax><multidimensional-array><operators>", "AnswerCount": "2"}});