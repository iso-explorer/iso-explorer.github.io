post_cb({"bq_ids": {"n4140": {"so_24114697_24114859_2": {"length": 34, "quality": 0.85, "section_id": 62}, "so_24114697_24114859_1": {"length": 34, "quality": 0.85, "section_id": 62}}, "n3337": {"so_24114697_24114859_2": {"length": 34, "quality": 0.85, "section_id": 57}, "so_24114697_24114859_1": {"length": 34, "quality": 0.85, "section_id": 57}}, "n4659": {"so_24114697_24114859_2": {"length": 34, "quality": 0.85, "section_id": 64}, "so_24114697_24114859_1": {"length": 34, "quality": 0.85, "section_id": 64}}}, "24114697": {"ViewCount": "430", "Body": "<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt; typename T = char &gt;\nstruct Foo {\n        void bar();\n};\n\ntemplate&lt; typename T = int &gt;\nvoid Foo&lt; T &gt;::bar() {\n    std::cout &lt;&lt; typeid( T ).name() &lt;&lt; std::endl;\n}\n\nint main() {\n    Foo&lt;&gt; x1;\n    Foo&lt; double &gt; x2;\n    x1.bar();\n    x2.bar();\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>char\ndouble\n</code></pre>\n<p><code>char</code> is hiding the <code>int</code> here, why is that?</p>\n<p>Is it even possible to have multiple different template arguments for the same class?\n(Guess not)But why doesn't yell the compiler then?</p>\n<hr>\n<p><a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/892125/ill-formed-default-template-argument-not-throwing-error\" rel=\"nofollow\">http://connect.microsoft.com/VisualStudio/feedback/details/892125/ill-formed-default-template-argument-not-throwing-error</a></p>\n</hr>", "AcceptedAnswerId": "24114859", "Title": "Default template argument in method hidden behind class default template argument", "CreationDate": "2014-06-09T06:22:44.823", "Id": "24114697", "CommentCount": "4", "LastEditDate": "2014-06-10T13:27:18.350", "PostTypeId": "1", "LastEditorUserId": "3087952", "LastActivityDate": "2014-06-10T13:27:18.350", "Score": "3", "OwnerUserId": "3087952", "Tags": "<c++><templates>", "AnswerCount": "1"}, "24114859": {"Id": "24114859", "PostTypeId": "2", "Body": "<h3>ill-formed snippet</h3>\n<p>The code provided in your post is ill-formed as stated by the C++ Standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a>):</p>\n<blockquote>\n<p id=\"so_24114697_24114859_0\"><code>14.1p9</code> <strong>Template parameters</strong> <code>[temp.param]</code></p>\n<blockquote>\n<p id=\"so_24114697_24114859_2\">A <em>default template-argument</em> is a <em>template-argument</em> (14.3) specified after <code>=</code> in a <em>template-paraemter</em>. A default <em>template-argument</em> may be specified for any kind of <em>template-parameter</em> (type, non-type, template) that is not a template parameter pack (14.5.3). A default <em>template-argument</em> may be specified in a template declaration. [ <strong>Note</strong>: <strong>&gt;&gt;</strong>] A default <em>template-argument</em> shall not be specified in the <em>template-parameter-lists</em> of the definition of a member of a class template that appears outside of the member's class. [ <strong>&lt;&lt;</strong> :<strong>Note</strong> ]</p>\n</blockquote>\n</blockquote>\n<hr>\n<h3>Conclusion</h3>\n<p>With the above quotation in mind we can draw the conclusion that the compiler you are using is faulty; it's not conformant to the rules set out by the Standard, the snippet should not be accepted.</p>\n<hr>\n<h3>What are the reason behind the Standard disallowing such construct?</h3>\n<p>Honestly this most probably boils down to <em>\"well, it doesn't make sense to allow it\"</em>.</p>\n<p>Since the type of <code>x1</code> (and with that the type of <code>T</code>) is known at the type of declaration (<code>Foo&lt;&gt;</code> <em>=&gt;</em> <code>F&lt;char&gt;</code>), a potential <em>default template-argument</em> when defining a member of the class is useless; it will never be required, nor will it be used.</p>\n</hr></hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-09T08:16:31.767", "Score": "4", "CreationDate": "2014-06-09T06:36:12.770", "ParentId": "24114697", "CommentCount": "5", "OwnerUserId": "1090079", "LastEditDate": "2014-06-09T08:16:31.767"}});