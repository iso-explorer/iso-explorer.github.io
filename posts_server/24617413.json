post_cb({"bq_ids": {"n4140": {"so_24617413_24617413_9": {"length": 15, "quality": 0.8333333333333334, "section_id": 296}, "so_24617413_24617413_1": {"length": 35, "quality": 0.813953488372093, "section_id": 295}, "so_24617413_24617413_8": {"length": 15, "quality": 0.8333333333333334, "section_id": 296}, "so_24617413_24617413_4": {"length": 35, "quality": 0.813953488372093, "section_id": 295}}, "n3337": {"so_24617413_24617413_9": {"length": 15, "quality": 0.8333333333333334, "section_id": 287}, "so_24617413_24617413_1": {"length": 35, "quality": 0.813953488372093, "section_id": 286}, "so_24617413_24617413_8": {"length": 15, "quality": 0.8333333333333334, "section_id": 287}, "so_24617413_24617413_4": {"length": 35, "quality": 0.813953488372093, "section_id": 286}}, "n4659": {"so_24617413_24617413_9": {"length": 15, "quality": 0.8333333333333334, "section_id": 303}, "so_24617413_24617413_1": {"length": 35, "quality": 0.813953488372093, "section_id": 302}, "so_24617413_24617413_8": {"length": 15, "quality": 0.8333333333333334, "section_id": 303}, "so_24617413_24617413_4": {"length": 35, "quality": 0.813953488372093, "section_id": 302}}}, "24617592": {"Id": "24617592", "PostTypeId": "2", "Body": "<p>If you had two functions</p>\n<pre><code>void f(int x);\nvoid g(const int x);\n</code></pre>\n<p>then both functions would have the same function type. This type is denoted <code>void(int)</code>, and a function pointer of type <code>void (*)(int)</code> would be able to point to either function.</p>\n<p>This is what is meant when we say that the top-level <code>const</code>-qualifiers on the parameters to a function do not affect the <em>type of the function</em>.</p>\n<p>However, this does not mean that the <code>const</code> is meaningless. In the definition of <code>f</code>, you would be able to modify <code>x</code>, but in the definition of <code>g</code>, you would not be able to modify <code>x</code>, since <code>x</code> has type <code>const int</code>.</p>\n", "LastActivityDate": "2014-07-07T18:43:44.187", "CommentCount": "2", "CreationDate": "2014-07-07T18:43:44.187", "ParentId": "24617413", "Score": "6", "OwnerUserId": "481267"}, "24617478": {"Id": "24617478", "PostTypeId": "2", "Body": "<p>Consider:</p>\n<pre><code>template &lt;class T&gt; void f(T t) { t = 5; }\n</code></pre>\n<p><code>f&lt;int&gt;</code> is well-formed, but <code>f&lt;const int&gt;</code> is not, because it attempts to assign to a <code>const</code> variable.</p>\n<p>See: <a href=\"https://stackoverflow.com/questions/117293/use-of-const-for-function-parameters\">Use of 'const' for function parameters</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-07-07T18:37:54.627", "Score": "7", "CreationDate": "2014-07-07T18:37:54.627", "ParentId": "24617413", "CommentCount": "2", "OwnerUserId": "567292", "LastEditDate": "2017-05-23T12:08:06.410"}, "24617413": {"ViewCount": "281", "Body": "\n<p>I'm struggling to understand this rule, specially the sentences in bold below (my emphasis):</p>\n<p>Consider the comment #2 in the snippet below: what does it mean to say that the function type is <code>f(int)</code>, but <code>t</code> is <code>const</code>?</p>\n<blockquote>\n<p id=\"so_24617413_24617413_0\"><strong><code>\u00a714.8.2/3</code></strong>:</p>\n<blockquote>\n<p id=\"so_24617413_24617413_4\">After this substitution is performed, the function parameter type adjustments described in 8.3.5 are performed.\n    [ Example: A parameter type of \u201c<code>void ()(const int, int[5])</code>\u201d becomes \u201c<code>void(*)(int,int*)</code>\u201d.\n    \u2014end example ] [ Note: <strong>A top-level qualifier in a function parameter declaration does not affect the function\n    type but still affects the type of the function parameter variable within the function. \u2014end note</strong> ] [ Example:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>template &lt;class T&gt; void f(T t);\ntemplate &lt;class X&gt; void g(const X x);\ntemplate &lt;class Z&gt; void h(Z, Z*);\nint main() {\n    // #1: function type is f(int), t is non const\n    f&lt;int&gt;(1);\n    // #2: function type is f(int), t is const\n    f&lt;const int&gt;(1);\n    // #3: function type is g(int), x is const\n    g&lt;int&gt;(1);\n    // #4: function type is g(int), x is const\n    g&lt;const int&gt;(1);\n    // #5: function type is h(int, const int*)\n    h&lt;const int&gt;(1,0);\n</code></pre>\n<p id=\"so_24617413_24617413_5\">}</p>\n<p id=\"so_24617413_24617413_6\">\u2014end example ]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p id=\"so_24617413_24617413_7\"><strong><code>\u00a714.8.2/4</code></strong>:</p>\n<blockquote>\n<p id=\"so_24617413_24617413_9\">[ Note: <strong><code>f&lt;int&gt;(1)</code> and <code>f&lt;const int&gt;(1)</code> call distinct functions even\n    though both of the functions called have the same function type.</strong> \u2014end\n    note ]</p>\n</blockquote>\n</blockquote>\n", "AcceptedAnswerId": "24617478", "Title": "What is the meaning of 14.8.2 paragraphs 3 and 4 in the C++ Standard?", "CreationDate": "2014-07-07T18:34:18.470", "Id": "24617413", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-07T19:06:16.117", "LastEditorUserId": "701092", "LastActivityDate": "2014-07-07T19:06:16.117", "Score": "7", "OwnerUserId": "3694387", "Tags": "<c++><templates><c++11>", "AnswerCount": "2"}});