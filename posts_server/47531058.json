post_cb({"47531084": {"ParentId": "47531058", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-11-28T11:59:42.960", "Score": "21", "LastEditorUserId": "2380830", "LastEditDate": "2017-11-28T12:13:51.800", "Id": "47531084", "OwnerUserId": "2380830", "Body": "<p><code>volatile</code> is a <em>qualifier</em> just like <code>const</code>. It's more than a mere hint to the compiler.</p>\n<p><code>std::min</code> expects the two parameters to have exactly the same types and qualifiers. So in your case it issues a diagnostic.</p>\n<p>Since you are allowed to <em>introduce</em> qualifiers, you could indulge in a little hand-holding and write</p>\n<pre><code>std::min&lt;volatile int&gt;(i, j)\n</code></pre>\n", "LastActivityDate": "2017-11-28T12:13:51.800"}, "47531058": {"CommentCount": "8", "AcceptedAnswerId": "47531084", "PostTypeId": "1", "LastEditorUserId": "369450", "CreationDate": "2017-11-28T11:58:28.603", "LastActivityDate": "2017-11-28T16:22:24.983", "LastEditDate": "2017-11-28T16:22:24.983", "ViewCount": "870", "FavoriteCount": "1", "Title": "Why is volatile not compiling with std::min", "Id": "47531058", "Score": "11", "Body": "<p>Why is following code not compilable (gcc-5.4.0)?</p>\n<pre><code>volatile int i{100};\nint j{200};\nstd::cout &lt;&lt; std::min(i, j);\n</code></pre>\n<p>I mean I see the compiler error:</p>\n<blockquote>\n<p id=\"so_47531058_47531058_0\">error: no matching function for call to \u2018min(volatile int&amp;, int&amp;)\u2019</p>\n</blockquote>\n<p>Isn't volatile just hint to compiler, that the variable could change from outside of the program?</p>\n<pre><code>std::min(int(i), j);\n</code></pre>\n<p>Is of course working. But shouldn't original work too? </p>\n", "Tags": "<c++><gcc><volatile>", "OwnerUserId": "3532240", "AnswerCount": "2"}, "47531227": {"ParentId": "47531058", "CommentCount": "10", "CreationDate": "2017-11-28T12:05:56.713", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "47531227", "Score": "11", "Body": "<p>As @Bathsheba pointed out, type deduction on the two arguments must give the same type.</p>\n<p>But for the sake of completeness <code>std::min</code> is also overloaded to accept a <code>std::initializer_list</code>. The elements of it are subject to copy initialization, so top level cv-qualifiers are immaterial. So this will work:</p>\n<pre><code>std::cout &lt;&lt; std::min({i, j});\n</code></pre>\n<p>Just bear in mind that it performs copies, and doesn't accept or return references.</p>\n", "LastActivityDate": "2017-11-28T12:05:56.713"}, "bq_ids": {"n4140": {"so_47531058_47531058_0": {"section_id": 6805, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_47531058_47531058_0": {"section_id": 6560, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_47531058_47531058_0": {"section_id": 8296, "quality": 0.5714285714285714, "length": 4}}}});