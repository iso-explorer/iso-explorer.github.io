post_cb({"3431735": {"CommentCount": "4", "AcceptedAnswerId": "3431811", "PostTypeId": "1", "LastEditorUserId": "206328", "CreationDate": "2010-08-07T19:17:13.400", "LastActivityDate": "2010-08-07T20:04:18.820", "LastEditDate": "2010-08-07T19:28:05.703", "ViewCount": "458", "FavoriteCount": "0", "Title": "C++ standard, overloaded function resolution/matching", "Id": "3431735", "Score": "7", "Body": "<p>Does C++ standard guarantee the following?:</p>\n<pre><code>template&lt;typename T&gt;\nvoid function(T (&amp;)[1]);\n\ntemplate&lt;typename T&gt;\nvoid function(T*);\n\nint a[1];\nfunction(a); // first function gets called, not second version\n</code></pre>\n", "Tags": "<c++><standards>", "OwnerUserId": "206328", "AnswerCount": "1"}, "3431811": {"ParentId": "3431735", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Yes, this is guaranteed, but the reason is different than what GMan says. The \"array of length 1\" overload will be selected because it is more specialized than the second in template functions partial order. Basically, it means that an argument in the form <code>T(&amp;)[1]</code> will always match the second template argument in the form <code>T*</code>, so the first overload will always be selected when conversion sequences don't decide.</p>\n<p>From 13.3.3:</p>\n<blockquote>\n<p id=\"so_3431735_3431811_0\">Given these definitions, a viable\n  function F1 is defined to be a better\n  function than another viable function\n  F2 if for all arguments i, ICSi(F1) is\n  not a worse conversion sequence than\n  ICSi(F2), and then</p>\n<ul>\n<li><p id=\"so_3431735_3431811_1\">for some argument j, ICSj(F1) is a better conversion sequence than\n  ICSj(F2), or, if not that,</p></li>\n<li><p id=\"so_3431735_3431811_2\">F1 is a non-template function and F2 is a template function specialization,\n  or, if not that,</p></li>\n<li><p id=\"so_3431735_3431811_3\">F1 and F2 are template functions, and the function template for F1 is\n  more specialized than the tem- plate\n  for F2 according to the partial\n  ordering rules described in 14.5.5.2,\n  or, if not that,</p></li>\n</ul>\n<p id=\"so_3431735_3431811_4\">...</p>\n</blockquote>\n<p>Normal functions are only affected by the first item; when any template functions are in the set of candidate functions, the second or third item can decide. The reason we want it like that is we want to be able to write seemingly ambiguous templated overloads. Eg.</p>\n<pre><code>template &lt;class T&gt; void f(T);\ntemplate &lt;class T&gt; void f(T*);\n</code></pre>\n<p>would otherwise be ambiguous for <code>int*</code>. In C++0x, you can even write declarations like:</p>\n<pre><code>template &lt;class ...Ts&gt;           void f(const Ts&amp;... args);\ntemplate &lt;class T, class ... Ts&gt; void f(const T&amp; a, const Ts&amp;... args);\n</code></pre>\n<p>and the second will be selected whenever there is at least one argument.</p>\n", "OwnerUserId": "51831", "LastEditorUserId": "51831", "LastEditDate": "2010-08-07T20:04:18.820", "Id": "3431811", "Score": "6", "CreationDate": "2010-08-07T19:48:25.763", "LastActivityDate": "2010-08-07T20:04:18.820"}, "bq_ids": {"n4140": {"so_3431735_3431811_3": {"section_id": 603, "quality": 0.7333333333333333, "length": 11}, "so_3431735_3431811_1": {"section_id": 603, "quality": 0.75, "length": 6}, "so_3431735_3431811_0": {"section_id": 603, "quality": 0.85, "length": 17}, "so_3431735_3431811_2": {"section_id": 126, "quality": 1.0, "length": 5}}, "n3337": {"so_3431735_3431811_3": {"section_id": 593, "quality": 0.7333333333333333, "length": 11}, "so_3431735_3431811_1": {"section_id": 593, "quality": 0.75, "length": 6}, "so_3431735_3431811_0": {"section_id": 593, "quality": 0.85, "length": 17}, "so_3431735_3431811_2": {"section_id": 106, "quality": 0.8, "length": 4}}, "n4659": {"so_3431735_3431811_3": {"section_id": 629, "quality": 0.7333333333333333, "length": 11}, "so_3431735_3431811_1": {"section_id": 629, "quality": 0.75, "length": 6}, "so_3431735_3431811_0": {"section_id": 629, "quality": 0.85, "length": 17}, "so_3431735_3431811_2": {"section_id": 131, "quality": 1.0, "length": 5}}}});