post_cb({"27419396": {"ParentId": "27419071", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The main function is just a symbol for the entry point, and is mostly implementation defined. The C++ standard only requires implementations to accept 2 signatures, <code>int main()</code> and <code>int main(int, char**)</code>. </p>\n<p>The C++ standard does say that the function <code>main</code> shall not be used within a program, so it's not correct to say it can be called recursively either.</p>\n<p>You also don't always need a <code>main</code> function, for example when compiling libraries you wouldn't include it.</p>\n<p>But the answer is much simpler than all that. A function definition is where you define the function body, which for <code>main</code> (like any function) you define in the user code. Hence it is user-defined.</p>\n<p>It's worth noting that User-defined function is sometimes used to refer to functions in libraries, it's not something I've heard with regards to C++, but other languages refer to UDFs as being user-submitted libraries.</p>\n", "OwnerUserId": "611562", "LastEditorUserId": "611562", "LastEditDate": "2014-12-11T11:00:15.577", "Id": "27419396", "Score": "2", "CreationDate": "2014-12-11T09:30:05.700", "LastActivityDate": "2014-12-11T11:00:15.577"}, "27419071": {"CommentCount": "7", "ViewCount": "126", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-12-11T09:13:38.047", "LastActivityDate": "2014-12-11T11:00:15.577", "Title": "Function type of main()", "AcceptedAnswerId": "27419648", "LastEditDate": "2017-05-23T12:05:52.317", "Id": "27419071", "Score": "0", "Body": "<p>Is main a user-defined function or built -in function? Or is it both? </p>\n<p>Like if I say declaration of main is predefined and definition is user defined, can I say it is both built-in and user-defined?</p>\n<p>There is a discussion here:\n<a href=\"https://stackoverflow.com/questions/4700427/is-main-a-user-defined-function#\">Is main() a User-Defined Function?</a></p>\n<p>But I could not understand what they concluded with, or rather to be exact I was not satisfied with the answers. I differ from the above discussion on that link that main cannot be called. It can be called, but SHOULDN'T be called (correct me if this notion is wrong!).</p>\n", "Tags": "<c++><c>", "OwnerUserId": "4340824", "AnswerCount": "4"}, "27419648": {"ParentId": "27419071", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The C11 standard lists two kinds of environments: <em>freestanding environmen</em>t, meaning an embedded system or operative system, and <em>hosted enviroment</em>, meaning a program running on top of an OS.</p>\n<blockquote>\n<p id=\"so_27419071_27419648_0\">5.1.2.1 Freestanding environment</p>\n<p id=\"so_27419071_27419648_1\">In a freestanding environment (in which C program execution may take\n  place without any benefit of an operating system), the name and type\n  of the function called at program startup are implementation-defined.</p>\n</blockquote>\n<p>In other words, in freestanding environments, the function called at startup could be called anything, and have any form. Most common is <code>void main (void)</code>.</p>\n<p>From C11, the chapter regarding hosted environment:</p>\n<blockquote>\n<p id=\"so_27419071_27419648_2\">5.1.2.2.1 Program startup</p>\n<p id=\"so_27419071_27419648_3\">The function called at program startup is named main. The\n  implementation declares no prototype for this function.</p>\n</blockquote>\n<p>The \"implementation\" means the compiler, so the compiler declares no such function. It is up to the user (programmer) to do so. This can be done in the form <code>int main (void)</code> or <code>int main(int argc, char *argv[])</code> or in any implementation-defined way specified by the compiler. In any case, the function is defined by the user.</p>\n<p>C++ is a bit stricter and enforces any of the two forms, and allows no implementation-defined version of main. From C++03 3.6.1:</p>\n<blockquote>\n<p id=\"so_27419071_27419648_4\">An implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined. All implementations\n  shall allow both of the following definitions of main:</p>\n<p id=\"so_27419071_27419648_5\"><code>int main() { /* ... */ }</code></p>\n<p id=\"so_27419071_27419648_6\">and</p>\n<p id=\"so_27419071_27419648_7\"><code>int main(int argc, char* argv[]) { /* ... */ }</code></p>\n</blockquote>\n<hr>\n<p>Regarding whether main can be called or not: I don't believe there is anything in the C standard preventing this, even though calling main makes no sense whatsoever. Since it has no prototype, the only way to call it would be recursively, which is just a plain stupid thing to do, but quite possible.</p>\n<p>In C++, calling main() was explicitly banned from C++03 and later standards:</p>\n<blockquote>\n<p id=\"so_27419071_27419648_8\">The function main shall not be used (3.2) within a program. The\n  linkage (3.5) of main is implementation-defined. A program that\n  declares main to be inline or static is ill-formed.</p>\n</blockquote>\n</hr>", "OwnerUserId": "584518", "LastEditorUserId": "584518", "LastEditDate": "2014-12-11T09:56:16.663", "Id": "27419648", "Score": "3", "CreationDate": "2014-12-11T09:41:57.657", "LastActivityDate": "2014-12-11T09:56:16.663"}, "27419137": {"ParentId": "27419071", "CommentCount": "0", "Body": "<p>I think it is user-defined. While the signatur of the method and the naming has to follow the standard, the implementation of the function is user-defined.</p>\n<p>That makes the function a user-defined function.</p>\n<p>Also there are no build-in functions as far as I know in C and C++. There are some standard libraries that add library functions. But those functions are not build into the languages.</p>\n", "OwnerUserId": "1312793", "PostTypeId": "2", "Id": "27419137", "Score": "1", "CreationDate": "2014-12-11T09:17:21.823", "LastActivityDate": "2014-12-11T09:17:21.823"}, "bq_ids": {"n4140": {"so_27419071_27419648_1": {"section_id": 5775, "quality": 0.5333333333333333, "length": 8}, "so_27419071_27419648_4": {"section_id": 7146, "quality": 0.75, "length": 18}, "so_27419071_27419648_8": {"section_id": 7147, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_27419071_27419648_1": {"section_id": 5548, "quality": 0.5333333333333333, "length": 8}, "so_27419071_27419648_4": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}, "so_27419071_27419648_8": {"section_id": 6891, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_27419071_27419648_1": {"section_id": 7232, "quality": 0.5333333333333333, "length": 8}, "so_27419071_27419648_4": {"section_id": 8647, "quality": 0.75, "length": 18}, "so_27419071_27419648_8": {"section_id": 8648, "quality": 0.7692307692307693, "length": 10}}}, "27420038": {"ParentId": "27419071", "CommentCount": "0", "Body": "<p>In C++ the standard [section 3.6.1] says that <code>main</code> shall be the entry point (except in freestanding envs., rares!), should not be predefined, can't be overloaded and shall not be called in the program (no recursive call even indirectly).</p>\n<p>In C, the standard defines the concept of initial call to <code>main</code> to define what the return value of the main is intended for. [section 5.1.2.2.3]. There is no explicit rule that forbids a recursive call to the <code>main</code>. There is also no predefined prototype for it even if it is common to have define it with zero or two arguments.</p>\n", "OwnerUserId": "719263", "PostTypeId": "2", "Id": "27420038", "Score": "0", "CreationDate": "2014-12-11T10:03:19.090", "LastActivityDate": "2014-12-11T10:03:19.090"}});