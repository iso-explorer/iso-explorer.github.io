post_cb({"3515026": {"Id": "3515026", "PostTypeId": "2", "Body": "<p>Globals in a translation unit (usually that corresponds to a  <code>.c</code> file) are initialized in order, so this is safe. You only get problems is you have globals in different object files that depend on each other.</p>\n<p>This is specified in the standard in <strong>\u00a73.6.2/2</strong>:</p>\n<blockquote>\n<p id=\"so_3514991_3515026_0\">Variables with ordered initialization defined within a single translation unit shall be initialized in the order of their definitions in the translation unit.</p>\n</blockquote>\n<p>Global variables have ordered initialization as long as they aren't declared <code>static</code>.</p>\n", "LastEditorUserId": "56338", "LastActivityDate": "2010-08-18T18:27:19.370", "Score": "4", "CreationDate": "2010-08-18T17:49:16.077", "ParentId": "3514991", "CommentCount": "1", "OwnerUserId": "56338", "LastEditDate": "2010-08-18T18:27:19.370"}, "3515027": {"Id": "3515027", "PostTypeId": "2", "Body": "<p>Order guaranteed yes.</p>\n<p>Safe: Questionable. Depends what you mean by safe.<br>\nBut as written it is portable and will not crash on any compiler I know.</br></p>\n", "LastActivityDate": "2010-08-18T17:49:33.310", "CommentCount": "0", "CreationDate": "2010-08-18T17:49:33.310", "ParentId": "3514991", "Score": "2", "OwnerUserId": "14065"}, "3514991": {"ViewCount": "281", "Body": "<p>Is this portable or at least safe to use with g++?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstruct c {};\nstd::vector&lt;c*&gt; v;\nstruct i : c { i () { v.push_back (this); } } a, b, c;\n\nint main () {\n  std::cout &lt;&lt; v.size () &lt;&lt; \"\\n\"; // outputs 3 with g++\n}\n</code></pre>\n<p><strong>EDIT:</strong></p>\n<p>Ok, what I need turned out to be a bit harder: The same code with templates:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntemplate &lt; typename T &gt; struct c {};\ntemplate &lt; typename T &gt; struct cv { static std::vector&lt;c&lt;T&gt;*&gt; v; };\ntemplate &lt; typename T &gt; std::vector&lt;c&lt;T&gt;*&gt; cv&lt;T&gt;::v;\ntemplate &lt; typename T &gt; struct i : c&lt;T&gt; { i () { cv&lt;T&gt;::v.push_back (this); } };\n\ncv&lt;int&gt; dummy; // even this won't initialize cv&lt;int&gt;::v\ni&lt;int&gt; a, b, d;\n\nint main () {\n  std::cout &lt;&lt; cv&lt;int&gt;::v.size () &lt;&lt; \"\\n\"; // outputs 0 :-(\n}\n</code></pre>\n<p>How could I fix this to work as above?</p>\n<p><strong>EDIT 2:</strong></p>\n<p>Here is an ugly fix with macros (I hope there is a better way to do it):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntemplate &lt; typename T &gt; struct c {};\ntemplate &lt; typename T &gt; struct cv;\n#define INITCV(X) \\\n  struct v##X { static std::vector&lt;c&lt;X&gt;*&gt; v; }; \\\n  std::vector&lt;c&lt;X&gt;*&gt; v##X::v; \\\n  template &lt;&gt; struct cv&lt;X&gt; { typedef v##X V; }\ntemplate &lt; typename T &gt; struct i : c&lt;T&gt; { i () { cv&lt;T&gt;::V::v.push_back (this); } };\n\nINITCV(int);\ni&lt;int&gt; a, b, d;\n\nint main () {\n  std::cout &lt;&lt; cv&lt;int&gt;::V::v.size () &lt;&lt; \"\\n\"; // outputs 3 again :-)\n}\n</code></pre>\n<p>(BTW, should I have posted a new question instead of the edits?)</p>\n", "AcceptedAnswerId": "3516147", "Title": "c++ initialization order of globals", "CreationDate": "2010-08-18T17:45:49.970", "Id": "3514991", "CommentCount": "0", "LastEditDate": "2010-08-18T19:05:24.660", "PostTypeId": "1", "LastEditorUserId": "407423", "LastActivityDate": "2010-08-18T19:56:00.373", "Score": "1", "OwnerUserId": "407423", "Tags": "<c++><initialization><g++><portability><global>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_3514991_3516147_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 257}, "so_3514991_3515026_0": {"length": 14, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_3514991_3516147_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 248}, "so_3514991_3515026_0": {"length": 14, "quality": 1.0, "section_id": 6895}}, "n4659": {"so_3514991_3516147_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 264}, "so_3514991_3515026_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 8655}}}, "3516147": {"Id": "3516147", "PostTypeId": "2", "Body": "<p>For your updated question, I haven't waded through the standard to find out when members of implicitly-instantiated templates are supposed to be initialized, but <em>explicit</em> instantiation does seem to be the solution:</p>\n<pre><code>template class cv&lt;int&gt;; // Not a dummy. Declares the template like a class.\n</code></pre>\n<p>Standardese at 14.7.2/7:</p>\n<blockquote>\n<p id=\"so_3514991_3516147_0\">The explicit instantiation of a class\n  template specialization implies the\n  instantiation of all of its members\n  not previously explicitly specialized\n  in the translation unit containing the\n  explicit instantiation.</p>\n</blockquote>\n", "LastActivityDate": "2010-08-18T19:56:00.373", "CommentCount": "0", "CreationDate": "2010-08-18T19:56:00.373", "ParentId": "3514991", "Score": "0", "OwnerUserId": "153285"}});