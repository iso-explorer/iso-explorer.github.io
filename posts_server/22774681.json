post_cb({"22775256": {"Id": "22775256", "PostTypeId": "2", "Body": "<p>What you are doing is perfectly standard C++ code, although I don't think it is particularly easy to read or maintain. If we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>6.4</code> <em>Selection statements</em> the grammar for switch statement is as follows:</p>\n<pre><code>switch ( condition ) statement\n</code></pre>\n<p>statements include labels, if, while, for etc... and section <code>6.4.2</code> <em>The switch statement</em> poses no restrictions that would preclude the code that you are showing.</p>\n<p>Case labels are just like the labels used with a <em>goto</em>, which is covered in section <code>6.1</code> <em>Labeled statement</em> but they are restricted to being used in a <em>switch statement</em>:</p>\n<blockquote>\n<p id=\"so_22774681_22775256_0\">Case labels and default labels shall occur only in switch statements.</p>\n</blockquote>\n<p>and section <code>6.7</code> says we can transfer into a block given some restrictions such as not bypassing a declaration with an initialization:</p>\n<blockquote>\n<p id=\"so_22774681_22775256_1\">It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A program that jumps<sup>87</sup> from a point where a variable with automatic storage duration is not in scope to a point where it is in scope is ill-formed unless the variable has scalar type, class type with a trivial default constructor and a trivial destructor, a cv-qualified version of one of these types, or an array of one of the preceding types and is declared without an initializer (8.5).</p>\n</blockquote>\n<p>footnote <code>87</code> says:</p>\n<blockquote>\n<p id=\"so_22774681_22775256_2\">The transfer from the condition of a switch statement to a case label is considered a jump in this respect.</p>\n</blockquote>\n<p>Probably, one of the most famous and strangest uses of a switch statement would be <a href=\"http://en.wikipedia.org/wiki/Duff%27s_device\" rel=\"nofollow\">Duff's device</a> which has an embedded <code>while</code> loop:</p>\n<pre><code>void send( int *to, const int *from, int  count)\n{\n        int n = (count + 7) / 8;\n        switch(count % 8) \n        {\n            case 0: do {    *to = *from++;   // &lt;- Scope start\n            case 7:         *to = *from++;\n            case 6:         *to = *from++;\n            case 5:         *to = *from++;\n            case 4:         *to = *from++;\n            case 3:         *to = *from++;\n            case 2:         *to = *from++;\n            case 1:         *to = *from++;\n                        } while(--n &gt; 0);    // &lt;- Scope end\n        }\n}\n</code></pre>\n", "LastEditorUserId": "2705293", "LastActivityDate": "2014-04-01T02:04:36.997", "Score": "4", "CreationDate": "2014-04-01T01:35:18.040", "ParentId": "22774681", "CommentCount": "1", "OwnerUserId": "1708801", "LastEditDate": "2014-04-01T02:04:36.997"}, "bq_ids": {"n4140": {"so_22774681_22775256_1": {"length": 39, "quality": 0.9512195121951219, "section_id": 3918}, "so_22774681_22775256_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3918}, "so_22774681_22775256_0": {"length": 7, "quality": 1.0, "section_id": 3879}}, "n3337": {"so_22774681_22775256_1": {"length": 39, "quality": 0.9512195121951219, "section_id": 3778}, "so_22774681_22775256_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3778}, "so_22774681_22775256_0": {"length": 7, "quality": 1.0, "section_id": 3739}}, "n4659": {"so_22774681_22775256_1": {"length": 40, "quality": 0.975609756097561, "section_id": 4804}, "so_22774681_22775256_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 4804}, "so_22774681_22775256_0": {"length": 7, "quality": 1.0, "section_id": 4768}}}, "22774681": {"ViewCount": "478", "Body": "<p>G++ accepts this code and it behaves as I'd expect it to:</p>\n<pre><code>#include &lt;cassert&gt;\n\nvoid example (int value, bool condition) {\n\n  switch (value) {\n  case 0:\n    if (condition) {\n  case 1:\n      assert(condition || value == 1);\n    } else {\n      assert(!condition &amp;&amp; value == 0);\n    }\n    assert(value == 0 || value == 1);\n  }\n\n}\n\nint main () {\n  example(0, false);\n  example(1, false);\n  example(0, true);\n  example(1, true);\n}\n</code></pre>\n<p>Maybe this is a silly basic question but, code smell aside, is it valid C++ to put a <code>case</code> label inside an <code>if...else</code> block, and will all well-behaved compilers correctly generate code that will jump over the <code>else</code> block when entered through <code>case 1</code>?</p>\n", "AcceptedAnswerId": "22775112", "Title": "Embedding a case label in an if...else statement", "CreationDate": "2014-04-01T00:30:08.540", "Id": "22774681", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-04-01T00:47:33.087", "LastEditorUserId": "616460", "LastActivityDate": "2014-04-22T04:12:55.107", "Score": "6", "OwnerUserId": "616460", "Tags": "<c++>", "AnswerCount": "2"}, "22775112": {"Id": "22775112", "PostTypeId": "2", "Body": "<p>As far as C++ is concerned (draft N3936):</p>\n<ul>\n<li>case and default labels in themselves do not alter the flow of control, <strong>which continues unimpeded across such labels</strong>.</li>\n<li>Usually, the substatement that is the subject of a switch is compound and case and default labels appear on the top-level statements contained within the (compound) substatement, <strong>but this is not required</strong>.(\u00a7 6.4.2 - 6)</li>\n<li><strong>It is possible to transfer into a block</strong>, but not in a way that bypasses declarations with initialization. (\u00a7 6.7 - 3)</li>\n</ul>\n<p>What you are doing is technically ok, of course that doesn't mean you should.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-04-22T04:12:55.107", "Score": "5", "CreationDate": "2014-04-01T01:16:28.193", "ParentId": "22774681", "CommentCount": "1", "OwnerUserId": "657267", "LastEditDate": "2014-04-22T04:12:55.107"}});