post_cb({"37325439": {"ParentId": "37325293", "CommentCount": "2", "Body": "<p>The \"implementation\" refers to the \"implementation of the C++ language\". It consists of everything needed to execute a C++ program: A compiler, a standard library, hardware on which to execute, an operating system, a visualization system, input, etc.</p>\n<p>The restriction in question means that your compiler may predefine names of the reserved form without telling you, or your standard library implementation may do so. For example, your standard library may define a macro <code>__Foo</code>, so if you tried to use <code>__Foo</code> as an identifier in your source code, you'd actually end up with the macro replacement.</p>\n<p>The purpose of reserved names is to give your compiler and standard library freedom to express functionality in plain C++ without worrying about introducing name clashes with user code.</p>\n<p>For a vivid example of how this is used in practice, just look at any header file of your standard library implementation.</p>\n<p>Some reserved names have actually been made into well-defined, publicly available facilities: <code>__FILE__</code>, <code>__cplusplus</code>, <code>__VA_ARGS__</code>, to name a few. The C language (which has the same rules for reserved identifies) has been using reserved names exclusively to introduce new keywords (e.g. <code>_Bool</code>).</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "37325439", "Score": "7", "CreationDate": "2016-05-19T13:55:37.150", "LastActivityDate": "2016-05-19T13:55:37.150"}, "37325351": {"ParentId": "37325293", "CommentCount": "0", "Body": "<p>Means exactly this. It means, that you are only allowed to create such names if you are providing a compiler or standard library implementation.</p>\n", "OwnerUserId": "5245033", "PostTypeId": "2", "Id": "37325351", "Score": "7", "CreationDate": "2016-05-19T13:52:46.547", "LastActivityDate": "2016-05-19T13:52:46.547"}, "bq_ids": {"n4140": {"so_37325293_37326614_0": {"section_id": 6335, "quality": 1.0, "length": 7}, "so_37325293_37325293_1": {"section_id": 6307, "quality": 1.0, "length": 8}}, "n3337": {"so_37325293_37326614_0": {"section_id": 6092, "quality": 1.0, "length": 7}, "so_37325293_37325293_1": {"section_id": 6064, "quality": 1.0, "length": 8}}, "n4659": {"so_37325293_37326614_0": {"section_id": 7845, "quality": 1.0, "length": 7}, "so_37325293_37325293_1": {"section_id": 7844, "quality": 0.625, "length": 5}}}, "37326614": {"ParentId": "37325293", "CommentCount": "0", "Body": "<p><strong>Implementation</strong> here means the combination of compiler(say gcc, msvc and so on), the standard library (says what features are included in the language), Operating System(Windows, Mac etc) and hardware(Intel,ARM and so on).<br/></p>\n<p>Depending upon the implementation, certain <strong>values</strong> are defined which the compiler uses to produce the object code that is specific to the implementation. For example </p>\n<pre><code>__TARGET_ARCH_ARM is defined by RealView #Matches first case\n_M_ARM is defined by Visual Studio #Matches second case\n</code></pre>\n<p>to identify the CPU manufacturer.</p>\n<p>In short these clauses are meant to discourage you from using macros of mentioned format. <br/></p>\n<p>In fact, <strong>n3797-&gt;17.6.5.3 Restrictions on macro definitions</strong> says, if you wish to define macros of the aforementioned formats they are :</p>\n<blockquote>\n<p id=\"so_37325293_37326614_0\">suitable for use in #if preprocessing directives, unless explicitly\n  stated otherwise.</p>\n</blockquote>\n<p>Example :</p>\n<pre><code>#ifndef _M_ARM\n#define _M_ARM // Say you're compiling for another platform\n#endif\n</code></pre>\n<p><strong>Note</strong> </p>\n<p>Macros, reserved for implementation, are not restricted to the format mentioned in question. For instance <code>__arm__</code> is defined by gcc to identify the manufacturer.</p>\n", "OwnerUserId": "1620779", "PostTypeId": "2", "Id": "37326614", "Score": "4", "CreationDate": "2016-05-19T14:41:31.797", "LastActivityDate": "2016-05-19T14:41:31.797"}, "37325293": {"CommentCount": "2", "ViewCount": "233", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-05-19T13:50:47.460", "LastActivityDate": "2016-05-19T14:41:31.797", "Title": "Meaning of \"reserved for the implementation\"", "AcceptedAnswerId": "37326614", "LastEditDate": "2017-05-23T11:44:04.873", "Id": "37325293", "Score": "3", "Body": "<p>Reading the anwser from <a href=\"https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier\">What are the rules about using an underscore in a c identifier</a> I stumbled across the follwing quotation: </p>\n<blockquote>\n<p id=\"so_37325293_37325293_0\">From the 2003 C++ Standard:</p>\n<h3>17.4.3.2.1 Global names [lib.global.names]</h3>\n<p id=\"so_37325293_37325293_1\">Certain sets of names and function signatures are always reserved to the implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (_ _) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>\n</ul>\n<p id=\"so_37325293_37325293_2\"><sup>165)</sup> Such names are also reserved in namespace ::std (17.4.3.1). </p>\n</blockquote>\n<p>What exactly is meant with <strong>reserved for the implementation</strong>?</p>\n", "Tags": "<c++>", "OwnerUserId": "4884487", "AnswerCount": "3"}});