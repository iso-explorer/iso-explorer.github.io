post_cb({"33397544": {"Id": "33397544", "PostTypeId": "2", "Body": "<p>this snippets is taken from <a href=\"http://hackage.haskell.org/package/com-1.2.1/src/cbits/AutoPrimSrc.c\" rel=\"nofollow\">http://hackage.haskell.org/package/com-1.2.1/src/cbits/AutoPrimSrc.c</a> </p>\n<p>the <b>Hackage.org</b> says:</p>\n<blockquote>\n<p id=\"so_33396728_33397544_0\">Hackage is the Haskell community's central package archive of open\n  source software.</p>\n</blockquote>\n<p>but please check the authors permissions</p>\n<pre><code>void writeVarWord64( unsigned int hi, unsigned int lo, VARIANT* v )\n{\n   ULONGLONG r;\n\n   r = (ULONGLONG)hi;\n   r &gt;&gt;= 32;\n   r += (ULONGLONG)lo;\n\n   if (!v) return;\n   VariantInit(v);\n   v-&gt;vt = VT_DECIMAL;\n   v-&gt;decVal.Lo64  = r;\n   v-&gt;decVal.Hi32  = 0;\n   v-&gt;decVal.sign  = 0;\n   v-&gt;decVal.scale = 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-10-28T17:22:23.943", "CommentCount": "0", "CreationDate": "2015-10-28T17:22:23.943", "ParentId": "33396728", "Score": "1", "OwnerUserId": "4487286"}, "33398483": {"Id": "33398483", "PostTypeId": "2", "Body": "<p>The internal representation for <code>DECIMAL</code> is not a double precision floating point value, it is integer instead with sign/scale options. If you are going to initialize <code>DECIMAL</code> parts, you should initialize these fields - 96-bit integer value, scale, sign, then you get valid decimal <code>VARIANT</code> value.</p>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms221061\" rel=\"nofollow\"><code>DECIMAL</code> on MSDN</a>:</p>\n<ul>\n<li>scale - The number of decimal places for the number. Valid values are from 0 to 28. So 12.345 is represented as 12345 with a scale of 3.</li>\n<li>sign - Indicates the sign; 0 for positive numbers or DECIMAL_NEG for negative numbers. So -1 is represented as 1 with the DECIMAL_NEG bit set.</li>\n<li>Hi32 - The high 32 bits of the number.</li>\n<li>Lo64 - The low 64 bits of the number. This is an _int64.</li>\n</ul>\n<p>Your questions:</p>\n<blockquote>\n<p id=\"so_33396728_33398483_0\">is it totally safe to use double to store all possible decimal values?</p>\n</blockquote>\n<p>You cannot initialize as double directly (e.g. <code>VT_R8</code>), but you can initialize as double variant and use variant conversion API to convert to <code>VT_DECIMAL</code>. A small rounding can be applied to value.</p>\n<blockquote>\n<p id=\"so_33396728_33398483_1\">if not, how can I convert the decimal to a long double?</p>\n<p id=\"so_33396728_33398483_2\">How to convert a decimal to string? (using the &lt;&lt; operator, sprintf is also good for me)</p>\n</blockquote>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms221258\" rel=\"nofollow\"><code>VariantChangeType</code></a> can convert decimal variant to variant of another type, including integer, double, string - you provide the type to convert to. Vice versa, you can also convert something different to decimal.</p>\n", "LastActivityDate": "2015-10-28T18:08:18.723", "CommentCount": "1", "CreationDate": "2015-10-28T18:08:18.723", "ParentId": "33396728", "Score": "3", "OwnerUserId": "868014"}, "33397263": {"Id": "33397263", "PostTypeId": "2", "Body": "<p>If I understood Microsoft's documentation (<a href=\"https://msdn.microsoft.com/en-us/library/cc234586.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/cc234586.aspx</a>) correctly, VT_DECIMAL is an exact 92-bit integer value with a fixed scale and precision. In that case you can't store this without loss of information in a float, a double or a 64-bit integer variable.</p>\n<p>You're best bet would be to store it in a 128-bit integer like __int128 but I don't know the level of compiler support for it. I'm also not sure you will be able to just cast one to the other without resorting to some bit manipulations.</p>\n", "LastActivityDate": "2015-10-28T17:07:36.633", "CommentCount": "0", "CreationDate": "2015-10-28T17:07:36.633", "ParentId": "33396728", "Score": "1", "OwnerUserId": "5422455"}, "bq_ids": {"n4140": {"so_33396728_33398483_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 5348}}, "n3337": {"so_33396728_33398483_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 5145}}, "n4659": {"so_33396728_33398483_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 6773}}}, "33397487": {"Id": "33397487", "PostTypeId": "2", "Body": "<p>\"Safe\" isn't exactly the correct word, the point of DECIMAL is to not introduce rounding errors due to base conversions.  Calculations are done in base 10 instead of base 2.  That makes them slow but accurate, the kind of accuracy that an accountant likes.  He won't have to chase a billionth-of-a-penny mismatches.</p>\n<p>Use _variant_t::ChangeType() to make conversions.  Pass <code>VT_R8</code> to convert to double precision.  Pass <code>VT_BSTR</code> to convert to a string, the kind that the accountant likes.  No point in chasing <code>long double</code>, that 10-byte FPU type is history.</p>\n", "LastActivityDate": "2015-10-28T17:19:32.050", "CommentCount": "2", "CreationDate": "2015-10-28T17:19:32.050", "ParentId": "33396728", "Score": "1", "OwnerUserId": "17034"}, "33396728": {"ViewCount": "551", "Body": "<p>I'm trying to write a wrapper to ADO. </p>\n<p>A <code>DECIMAL</code> is one type a <code>COM VARIANT</code> can be, when the <code>VARIANT</code> type is <code>VT_DECIMAL</code>.</p>\n<p>I'm trying to put it in c native data type, and keep the variable value.\nit seem that the correct type is long double, but I get \"no suitable conversion error\".</p>\n<p>For example: </p>\n<pre><code>_variant_t v;\n...\n\nif(v.vt == VT_DECIMAL)\n{\n  double d = (double)v; //this works but I'm afraid can be loss of data...\n  long double ld1 = (long double)v; //error: more then one conversion from variant to long double applied.\n  long double ld2 = (long double)v.decVal; //error: no suitable conversion function from decimal to long double exist.  \n}\n</code></pre>\n<p>So my questions are: </p>\n<ol>\n<li><p>is it totally safe to use double to store all possible decimal values?</p></li>\n<li><p>if not, how can I convert the decimal to a long double?</p></li>\n<li><p>How to convert a decimal to string? (using the &lt;&lt; operator, <code>sprintf</code> is also good for me)</p></li>\n</ol>\n", "AcceptedAnswerId": "33398483", "Title": "What is the correct type in c\\c++ to store a COM's VT_DECIMAL?", "CreationDate": "2015-10-28T16:41:36.037", "Id": "33396728", "CommentCount": "6", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-10-28T17:01:26.557", "LastEditorUserId": "4774918", "LastActivityDate": "2015-10-28T18:18:03.450", "Score": "3", "OwnerUserId": "2852165", "Tags": "<c++><com><decimal><ado>", "AnswerCount": "5"}, "33397284": {"Id": "33397284", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33396728_33397284_0\">Is it totally safe to use double to store all possible decimal values?</p>\n</blockquote>\n<p>It actually depends what you mean by <em>safe</em>. If you mean \"is there any risk of introducing some degree of conversion imprecision?\", yes there is a risk. The internal representations are far too different to guarantee perfect conversion, and conversion noise is likely to be introduced.</p>\n<blockquote>\n<p id=\"so_33396728_33397284_1\">How can I convert the decimal to a long double / a string?</p>\n</blockquote>\n<p>It depends (again) of what you want to do with the object:</p>\n<ul>\n<li>For floating-point computation, see @Gread.And.Powerful.Oz's link to the following answer:  <a href=\"https://stackoverflow.com/questions/24891663/c-converting-variant-decimal-to-double-value\">C++ converting Variant Decimal to Double Value</a></li>\n<li>For display, see <a href=\"https://msdn.microsoft.com/en-us/library/ew0bcz27.aspx\" rel=\"nofollow noreferrer\">MSDN documentation</a> on string conversion</li>\n</ul>\n<p>For storage without any conversion imprecision, you should probably store the decimal as a scaled integer of the form <code>pair&lt;long long,short&gt;</code>, where <code>first</code> holds the 96-bits mantissa and <code>second</code> holds the number of digits to the right of the decimal point. This representation is as close as possible to the decimal's internal representation, will not introduce any conversion imprecision and won't waste CPU resources on integer-to-string formatting.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-28T18:18:03.450", "Score": "1", "CreationDate": "2015-10-28T17:08:56.503", "ParentId": "33396728", "CommentCount": "2", "OwnerUserId": "5482150", "LastEditDate": "2017-05-23T12:08:12.503"}});