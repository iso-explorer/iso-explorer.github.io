post_cb({"1239480": {"PostTypeId": "2", "Body": "<p>The problem that one wanted to solve with that rule is the one of dynamic loading.  The allowance isn't restricted to dynamic loading and formally could happen for other cases.  I don't know an implementation which use it for anything else than dynamic loading.</p>\n", "LastActivityDate": "2009-08-06T14:59:48.560", "Id": "1239480", "CommentCount": "0", "CreationDate": "2009-08-06T14:59:48.560", "ParentId": "1239235", "Score": "1", "OwnerUserId": "136208"}, "1239397": {"PostTypeId": "2", "Body": "<p>Let's review a pseudocode:</p>\n<p>In DLL:</p>\n<pre><code>static int ItsDllVar = 1;\nint EXPORTED_FUNCTION() { return ItsDllVar; }\n</code></pre>\n<p>In application:</p>\n<pre><code>static int AppVar1 = 2;\nstatic int AppVar2 = EXPORTED_FUNCTION() + AppVar1;\n</code></pre>\n<p>So according to static initializing AppVar2 gets 1+2=3</p>\n<p>Lazy initialization applicable for local static variables (regardless of DLL)</p>\n<pre><code>int f()\n{\n    static int local_i = 5;//it get's 5 only after visiting f()\n    return local_i;\n}\n</code></pre>\n", "LastActivityDate": "2009-08-06T14:48:46.927", "Id": "1239397", "CommentCount": "0", "CreationDate": "2009-08-06T14:48:46.927", "ParentId": "1239235", "Score": "0", "OwnerUserId": "149818"}, "1239457": {"PostTypeId": "2", "Body": "<p>The standard has the following in 3.6.2/3:</p>\n<blockquote>\n<p id=\"so_1239235_1239457_0\">It is implementation-defined whether or not the dynamic initialization (8.5, 9.4, 12.1, 12.6.1) of an object of\n  namespace scope is done before the first statement of main. If the initialization is deferred to some point\n  in time after the first statement of main, it shall occur before the first use of any function or object defined\n  in the same translation unit as the object to be initialized.</p>\n</blockquote>\n<p><s>But o</s> Of course you can <s>never officially</s> tell when the initialization takes place <s>since the initialization will occur before you access the variable!</s> as follows:</p>\n<pre><code>// t1.cc\n#include &lt;iostream&gt;\nint i1 = 0;\n\nint main () {\n  std::cout &lt;&lt; i1 &lt;&lt; std::endl\n\n// t2.cc\nextern int i1;\nint i2 = ++i1;\n</code></pre>\n<p>I can conform that g++ 4.2.4 at least appears to perform the initialization of 'i2' before main.</p>\n", "LastActivityDate": "2009-08-06T15:41:31.047", "LastEditorUserId": "11698", "Id": "1239457", "CommentCount": "8", "CreationDate": "2009-08-06T14:56:46.943", "ParentId": "1239235", "Score": "6", "OwnerUserId": "11698", "LastEditDate": "2009-08-06T15:41:31.047"}, "bq_ids": {"n4140": {"so_1239235_1239457_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 7153}}, "n3337": {"so_1239235_1239457_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 6897}}}, "1239235": {"ViewCount": "3464", "Body": "<p>I'm used to thinking of all initialization of globals/static-class-members as happening before the first line of main(). But I recently read somewhere that the standard allows initialization to happen later to \"assist with dynamic loading of modules.\" I could see this being true when dynamic linking: I wouldn't expect a global initialized in a library to be initialized before I dlopen'ed the library. However, within a grouping of statically linked together translation units (my app's direct .o files) I would find this behavior very unintuitive. Does this only happen lazily when dynamically linking or can it happen at any time? (or was what I read just wrong? ;)</p>\n", "AcceptedAnswerId": "1239457", "Title": "How lazy can C++ global initialization be?", "CreationDate": "2009-08-06T14:26:06.167", "Id": "1239235", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-09-16T18:31:46.753", "Score": "9", "OwnerUserId": "50385", "Tags": "<c++><static><initialization><global-variables><dynamic-linking>", "AnswerCount": "4"}, "18834872": {"PostTypeId": "2", "Body": "<p>I think this is what happened in my case with g++ 4.7 and CMake (not sure if this is a relevant detail regarding CMake). I have a code that registers a function in the factory. It relies on the constructor calling from a globally initialized variable. </p>\n<p>When this code was in the <strong>statically linked library</strong> the initialization didn't happen! It is now working fine, when I moved it to the object files that linked directly (i.e., they are not combined into a library first).</p>\n<p>So, I suspect that you are correct.</p>\n", "LastActivityDate": "2013-09-16T18:31:46.753", "Id": "18834872", "CommentCount": "0", "CreationDate": "2013-09-16T18:31:46.753", "ParentId": "1239235", "Score": "0", "OwnerUserId": "2120401"}});