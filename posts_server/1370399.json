post_cb({"1370399": {"CommentCount": "0", "ViewCount": "1187", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2009-09-02T22:06:50.823", "LastActivityDate": "2009-09-02T22:42:14.510", "Title": "c++: function arg char** is not the same as char*[]", "FavoriteCount": "1", "LastEditDate": "2017-05-23T12:13:37.770", "Id": "1370399", "Score": "4", "Body": "<p>I am using g++.  I am using code that had a <code>main(int,char**)</code>, renamed so I can call it.  I looked at <a href=\"https://stackoverflow.com/questions/779910/should-i-use-char-argv-or-char-argv-in-c\">Should I use char** argv or char* argv[] in C?</a>, where <code>char**</code> is said to be equivalent to <code>char* []</code>.  This does not appear to be true in c++ function calls.  For example:</p>\n<pre><code>void f1(char** p){;}\n\nvoid f2(char* p[]){\n\n   f1(p);\n\n //...`\n\n}\n</code></pre>\n<p>fails with the compiler complaining \"cannot convert <code>char (*)[]</code> to <code>char**</code>...\"  The references I look to say that arrays are converted to pointers for the call, but this does not seem to be the case as:</p>\n<pre><code>void f3(char* [] p);\n\nchar caa[16][16];  \nf3(caa);\n</code></pre>\n<p>also fails.   I had assumed that as long as the levels of indirection were the same (e.g. <code>char*** ptr</code> and <code>char[][][] carray</code> ) the types were interchangeable.</p>\n<p>Can someone provide a reference I can review that clarifies these issues?</p>\n<p>Thanks.</p>\n", "Tags": "<c++><arrays><pointers><arguments>", "OwnerUserId": "155245", "AnswerCount": "2"}, "1370451": {"ParentId": "1370399", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>This still holds true in C++. If your compiler complains as you describe for your first case, it is non-conformant.</p>\n<p>To explain your second case, it is important to understand what actually happens. An expression of array type is implicitly convertible to a corresponding pointer type, i.e.: <code>T[n]</code> -&gt; <code>T*</code>. However, if <code>T</code> itself is an array, this case isn't treated specially, and array-to-pointer decay <em>does not propagate</em>. So <code>T*[n]</code> decays to <code>T**</code>, but <code>T[x][y]</code> will only decay to <code>T[y]*</code>, and no further.</p>\n<p>From implementation perspective this makes sense, because decaying further, if allowed, would give <code>T**</code>, which is pointer to pointer; whereas 2D C arrays aren't implemented as jagged arrays (i.e. array of pointers to arrays) - they form a single contiguous memory block. So, there's no <code>T*</code> \"inside\" the array to take an address of to give you a <code>T**</code>. For the allowed cases, a typical implementation simply takes the address of the array as a whole and converts it to type of pointer to single element (when underlying pointer representation is the same for all types, as is usually the case, this convertion is a no-op at run time).</p>\n<p>The normative reference here is ISO C++03, 4.2[conv.array]/1:</p>\n<blockquote>\n<p id=\"so_1370399_1370451_0\">An lvalue or rvalue of type \u201carray of N T\u201d or \u201carray of unknown bound of T\u201d can be converted to an rvalue of type \u201cpointer to T.\u201d The result is a pointer to the first element of the array.</p>\n</blockquote>\n", "OwnerUserId": "111335", "LastEditorUserId": "111335", "LastEditDate": "2009-09-02T22:42:14.510", "Id": "1370451", "Score": "12", "CreationDate": "2009-09-02T22:19:16.117", "LastActivityDate": "2009-09-02T22:42:14.510"}, "1370530": {"ParentId": "1370399", "CommentCount": "2", "Body": "<blockquote>\n<pre><code>void f2(char* p[]){\n</code></pre>\n<p id=\"so_1370399_1370530_0\">the compiler complaining \"<code>cannot convert char (*)[] to char**...</code>\"</p>\n</blockquote>\n<p>Strange.  <code>char(*)[]</code> is a <strong>pointer to array of chars</strong>,  but in your code snippet the function has <code>char *p[]</code> argument, what means <strong>array of pointers to char</strong>!  These types are indeed different (because array elements have different sizes), let alone your code snippet perfectly compiles.  You really have misspelled something.</p>\n<p><em>Sherlock Holmes mode</em>: or is there a typedef involved? ;-)</p>\n<pre><code>void f1(char** p){;}\n\ntypedef char type[];\nvoid f2(type * p){\n   f1(p);\n}\n</code></pre>\n<p>This really doesn't compile and yields the error you referred to.</p>\n", "OwnerUserId": "158676", "PostTypeId": "2", "Id": "1370530", "Score": "1", "CreationDate": "2009-09-02T22:42:12.233", "LastActivityDate": "2009-09-02T22:42:12.233"}, "bq_ids": {"n4140": {"so_1370399_1370451_0": {"section_id": 11, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_1370399_1370451_0": {"section_id": 8, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_1370399_1370451_0": {"section_id": 12, "quality": 0.8888888888888888, "length": 16}}}});