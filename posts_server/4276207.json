post_cb({"4276232": {"Id": "4276232", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4276207_4276232_0\">Is C/C++ .......</p>\n</blockquote>\n<p>There's no language named C/C++.</p>\n<blockquote>\n<p id=\"so_4276207_4276232_1\">bool type always guaranteed to be 0 or 1 when typecast'ed to int?</p>\n</blockquote>\n<p>In C++ yes because section $4.5/4 says</p>\n<blockquote>\n<p id=\"so_4276207_4276232_2\">An rvalue of type bool can be converted to an rvalue of type int, with false becoming zero and true becoming one.</p>\n</blockquote>\n<p>.</p>\n<blockquote>\n<p id=\"so_4276207_4276232_3\"><code>int c = 3 + b;</code> // 4 or 5?</p>\n</blockquote>\n<p>The value of c will be 4 </p>\n", "LastActivityDate": "2010-11-25T10:55:58.187", "CommentCount": "5", "CreationDate": "2010-11-25T10:55:58.187", "ParentId": "4276207", "Score": "20", "OwnerUserId": "165520"}, "4276239": {"Id": "4276239", "PostTypeId": "2", "Body": "<p>Yes:</p>\n<p>In C++ (\u00a74.5/4):</p>\n<blockquote>\n<p id=\"so_4276207_4276239_0\">An rvalue of type bool can be\n  converted to an rvalue of type int,\n  with false becoming zero and true\n  becoming one.</p>\n</blockquote>\n<p>In C, when a value is converted to <code>_Bool</code>, it becomes 0 or 1 (\u00a76.3.1.2/1):</p>\n<blockquote>\n<p id=\"so_4276207_4276239_1\">When any scalar value is converted to\n  _Bool, the result is 0 if the value compares equal to 0; otherwise, the\n  result is 1.</p>\n</blockquote>\n<p>When converting to <code>int</code>, it's pretty straight-forward.  <code>int</code> can hold 0 and 1, so there's no change in value (\u00a76.3.1.3).</p>\n", "LastEditorUserId": "47773", "LastActivityDate": "2010-11-25T11:21:21.163", "Score": "42", "CreationDate": "2010-11-25T10:56:44.497", "ParentId": "4276207", "CommentCount": "2", "OwnerUserId": "47773", "LastEditDate": "2010-11-25T11:21:21.163"}, "16175459": {"Id": "16175459", "PostTypeId": "2", "Body": "<p>One more example when you are out of the safe boat:</p>\n<pre><code>  bool b = false;\n  *(reinterpret_cast&lt;char*&gt;(&amp;b)) = 0xFF;\n  int from_bool = b;\n  cout &lt;&lt; from_bool &lt;&lt; \" is \" &lt;&lt; (b ? \"true\" : \"false\");\n</code></pre>\n<p>Output (g++ (GCC) 4.4.7):</p>\n<pre><code>  255 is true\n</code></pre>\n<p>To be added to the <a href=\"https://stackoverflow.com/a/4276293/23715\">FredOverflow's example</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-04-23T17:24:47.670", "Score": "7", "CreationDate": "2013-04-23T17:24:47.670", "ParentId": "4276207", "CommentCount": "0", "OwnerUserId": "23715", "LastEditDate": "2017-05-23T12:02:16.157"}, "4276237": {"Id": "4276237", "PostTypeId": "2", "Body": "<p>There is no bool type in C pre C99 (Such as C90), however the bool type in C99/C++ is always guaranteed to be 0 or 1.</p>\n<p>In C, all boolean operation are guaranteed to return either 0 or 1, whether the bool type is defined or not.</p>\n<p>So <code>a &amp;&amp; b</code> or <code>!a</code> or <code>a || b</code> will always return 0 or 1 in C or C++ regardless of the type of <code>a</code> and <code>b</code>.</p>\n", "LastEditorUserId": "15416", "LastActivityDate": "2010-11-25T15:14:35.820", "Score": "3", "CreationDate": "2010-11-25T10:56:29.947", "ParentId": "4276207", "CommentCount": "3", "OwnerUserId": "42303", "LastEditDate": "2010-11-25T15:14:35.820"}, "bq_ids": {"n4140": {"so_4276207_4276232_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5054}, "so_4276207_4276293_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 7215}, "so_4276207_4276239_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 26}, "so_4276207_4276232_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 26}}, "n3337": {"so_4276207_4276232_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 4851}, "so_4276207_4276293_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6959}, "so_4276207_4276239_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 23}, "so_4276207_4276232_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 23}}, "n4659": {"so_4276207_4276232_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6475}, "so_4276207_4276293_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 8724}, "so_4276207_4276239_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 26}, "so_4276207_4276232_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 26}}}, "4276293": {"Id": "4276293", "PostTypeId": "2", "Body": "<p>Well, not <em>always</em>...</p>\n<pre><code>const int n = 100;\nbool b[n];\nfor (int i = 0; i &lt; n; ++i)\n{\n    int x = b[i];\n    if (x &amp; ~1)\n    {\n        std::cout &lt;&lt; x &lt;&lt; ' ';\n    }\n}\n</code></pre>\n<p>Output on my system:</p>\n<pre><code>28 255 34 148 92 192 119 46 165 192 119 232 26 195 119 44 255 34 96 157 192 119\n8 47 78 192 119 41 78 192 119 8 250 64 2 194 205 146 124 192 73 64 4 255 34 56 2\n55 34 224 255 34 148 92 192 119 80 40 190 119 255 255 255 255 41 78 192 119 66 7\n8 192 119 192 73 64 240 255 34 25 74 64 192 73 64\n</code></pre>\n<p>The reason for this apparently weird output is laid out in the standard, 3.9.1 \u00a76:</p>\n<blockquote>\n<p id=\"so_4276207_4276293_0\">Values of type <code>bool</code> are either <code>true</code> or <code>false</code>. Using a <code>bool</code> value in ways described by this International Standard as \"undefined\", such as by <strong>examining the value of an uninitialized automatic object, might cause it to behave as if it is neither <code>true</code> nor <code>false</code></strong>.</p>\n</blockquote>\n", "LastEditorUserId": "252000", "LastActivityDate": "2010-11-25T11:46:20.540", "Score": "15", "CreationDate": "2010-11-25T11:02:40.970", "ParentId": "4276207", "CommentCount": "15", "OwnerUserId": "252000", "LastEditDate": "2010-11-25T11:46:20.540"}, "4276207": {"ViewCount": "30487", "Body": "<p>Many compilers seem to be keeping only 0 or 1 in bool values, but I'm not sure this will always work:</p>\n<pre><code>int a = 2;\nbool b = a;\nint c = 3 + b; // 4 or 5?\n</code></pre>\n", "AcceptedAnswerId": "4276239", "Title": "Is C/C++ bool type always guaranteed to be 0 or 1 when typecast'ed to int?", "CreationDate": "2010-11-25T10:52:35.133", "Id": "4276207", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-04-25T07:36:32.757", "LastEditorUserId": "597657", "LastActivityDate": "2017-09-24T08:06:34.227", "Score": "37", "OwnerUserId": "478742", "Tags": "<c++><c><boolean>", "AnswerCount": "5"}});