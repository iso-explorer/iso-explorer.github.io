post_cb({"bq_ids": {"n4140": {"so_8549362_8549519_1": {"length": 35, "quality": 0.9210526315789473, "section_id": 5504}, "so_8549362_8549519_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5504}}, "n3337": {"so_8549362_8549519_1": {"length": 35, "quality": 0.9210526315789473, "section_id": 5290}, "so_8549362_8549519_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5290}}, "n4659": {"so_8549362_8549519_1": {"length": 32, "quality": 0.8421052631578947, "section_id": 6938}, "so_8549362_8549519_0": {"length": 23, "quality": 0.7666666666666667, "section_id": 6938}}}, "8549362": {"ViewCount": "1084", "Body": "<p>I try to compile the following code with clang (version 3.0), but it gives me this error</p>\n<pre><code>error: no matching member function for call to 'a'\n</code></pre>\n<p>in the call <code>__a.a&lt;0&gt;()</code>. Then I try with g++ (version 4.2.1) and it compiles and works as expected (print out <code>1 2</code>).</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n  template &lt;int&gt; int a() { return 1; }\n};\n\nstruct B: A {\n  using A::a;\n  template &lt;int,int&gt; int a() { return 2; }\n};\n\nint main(int, char **) {\n  B __a;\n  std::cout &lt;&lt; __a.a&lt;0&gt;() &lt;&lt; \" \"  &lt;&lt; __a.a&lt;0,0&gt;() &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>I try to look to the standard but I have not found anything that explains which is the correct behavior of compiler. Now, my question is which is the correct behavior, and if clang works correctly, how I can modify my code to work as expected?</p>\n", "AcceptedAnswerId": "8549519", "Title": "Inheritance and member-function templates overloading", "CreationDate": "2011-12-18T02:09:21.187", "Id": "8549362", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2011-12-18T02:53:47.440", "Score": "3", "OwnerUserId": "235120", "Tags": "<c++><templates><inheritance><method-overloading>", "AnswerCount": "1"}, "8549519": {"Id": "8549519", "PostTypeId": "2", "Body": "<p>Digging through both the C++03 and C++11 standard, it doesn't look good for your code to be valid and well-formed. C++03 seems to have allowed this, while a change in the wording of the C++11 standard seems to have disallowed this.</p>\n<p><code>\u00a77.3.3 [namespace.udecl] (Both standards)</code></p>\n<blockquote>\n<p id=\"so_8549362_8549519_0\">p12 (C++03) When a <em>using-declaration</em> brings names from a base class into a derived class scope, member functions in the derived class override and/or hide member functions with the same name and parameter types in a base class (rather than conflicting).</p>\n</blockquote>\n<p>Note that this wording doesn't mention any member function templates.</p>\n<blockquote>\n<p id=\"so_8549362_8549519_1\">p15 (C++11) When a <em>using-declaration</em> brings names from a base class into a derived class scope, member functions and member function templates in the derived class override and/or hide member functions and member function templates with the same name, parameter-type-list (8.3.5), cv-qualification, and <em>ref-qualifier</em> (if any) in a base class (rather than conflicting).</p>\n</blockquote>\n<p>Note the mentioning of member function templates in the new wording. Also note, that the list that determines if a derived class member overrides / hides a base class member doesn't mention the <em>template-parameter-list</em> of the member function template as an identifying point, it is being ignored for this purpose.</p>\n<p>I might be interpreting this completely wrong, but it seems Clang is the conforming compiler here, and GCC aswell as MSVC10 are non-conforming according to the new wording.</p>\n", "LastActivityDate": "2011-12-18T02:53:47.440", "CommentCount": "0", "CreationDate": "2011-12-18T02:53:47.440", "ParentId": "8549362", "Score": "2", "OwnerUserId": "500104"}});