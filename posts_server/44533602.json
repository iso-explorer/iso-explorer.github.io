post_cb({"bq_ids": {"n4140": {"so_44533602_44533715_1": {"length": 4, "quality": 1.0, "section_id": 3298}, "so_44533602_44533715_5": {"length": 4, "quality": 0.6666666666666666, "section_id": 3298}, "so_44533602_44533715_3": {"length": 6, "quality": 1.0, "section_id": 3298}, "so_44533602_44533715_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3298}}, "n3337": {"so_44533602_44533715_1": {"length": 4, "quality": 1.0, "section_id": 3168}, "so_44533602_44533715_5": {"length": 4, "quality": 0.6666666666666666, "section_id": 3168}, "so_44533602_44533715_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3168}, "so_44533602_44533715_3": {"length": 6, "quality": 1.0, "section_id": 3168}}, "n4659": {"so_44533602_44533715_1": {"length": 4, "quality": 1.0, "section_id": 6103}, "so_44533602_44533715_2": {"length": 4, "quality": 0.8, "section_id": 4063}, "so_44533602_44533715_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 4063}, "so_44533602_44533715_0": {"length": 12, "quality": 0.631578947368421, "section_id": 4063}, "so_44533602_44533715_3": {"length": 6, "quality": 1.0, "section_id": 4063}}}, "44533648": {"Id": "44533648", "PostTypeId": "2", "Body": "<p>That's not a constructor for <code>A</code>. That's aggregate initialization. </p>\n<p>Anyway, you are doomed.  While <code>B</code> is-a <code>A</code>, there is no way to pass initialization through <code>B</code> to <code>A</code> without a constructor. There may be some voodoo and witchcraft to make it look like you are initializing <code>A</code> through <code>B</code>, but it would be better to just write some nice, clean code like a <code>B</code> constructor that initializes <code>A</code></p>\n<pre><code>struct B : A\n{\n    B(int val):A{val}\n    {\n    }\n};\n</code></pre>\n<p>Now obviously <code>B</code> has a constructor and </p>\n<pre><code>B b{22};\n</code></pre>\n<p>is valid.</p>\n", "LastEditorUserId": "4581301", "LastActivityDate": "2017-06-14T00:51:38.920", "Score": "1", "CreationDate": "2017-06-14T00:44:32.617", "ParentId": "44533602", "CommentCount": "0", "OwnerUserId": "4581301", "LastEditDate": "2017-06-14T00:51:38.920"}, "44533602": {"ViewCount": "71", "Body": "<p>Is it at all possible to have the second instantiation work somehow? I've tried combinations of <code>using</code> and <code>= default</code> but to no avail.</p>\n<pre><code>struct A\n{\n    int i;\n};\n\nstruct B : A\n{};\n\nA a{11}; // This works.\nB b{22}; // \"No matching constructor\".\n</code></pre>\n", "AcceptedAnswerId": "44533648", "Title": "Can I instantiate a struct through its base's default constructor?", "CreationDate": "2017-06-14T00:37:35.423", "Id": "44533602", "CommentCount": "2", "LastEditDate": "2017-06-14T01:12:11.410", "PostTypeId": "1", "LastEditorUserId": "2877241", "LastActivityDate": "2017-06-14T01:12:11.410", "Score": "1", "OwnerUserId": "1300177", "Tags": "<c++><class><initialization><c++14><c++1z>", "AnswerCount": "2"}, "44533715": {"Id": "44533715", "PostTypeId": "2", "Body": "<p>According to the C++ 2014 Standard (8.5.1 Aggregates):</p>\n<blockquote>\n<p id=\"so_44533602_44533715_0\">1 An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no private or protected non-static data members\n  (Clause 11), <strong>no base classes</strong> (Clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>However According to the C++ 2017 Standard (8.6.1 Aggregates):</p>\n<blockquote>\n<p id=\"so_44533602_44533715_1\">1 An aggregate is an array or a class (Clause 9) with</p>\n<p id=\"so_44533602_44533715_2\">(1.1) \u2014 no user-provided, explicit, or inherited constructors (12.1),</p>\n<p id=\"so_44533602_44533715_3\">(1.2) \u2014 no private or protected non-static data members (Clause 11),</p>\n<p id=\"so_44533602_44533715_4\">(1.3) \u2014 no virtual functions (10.3), and</p>\n<p id=\"so_44533602_44533715_5\">(1.4) \u2014 no virtual, private, or protected base classes (10.1).</p>\n</blockquote>\n<p>As you can see, the C++ 2017 Standard removes the restriction that aggregates shall not have base classes. So the code will not be compiled by a compiler that does not support the C++ 2017 Standard.</p>\n<p>You need to declare explicitly a constructor that excepts an argument for the class <code>B</code> yourself.</p>\n", "LastEditorUserId": "4433546", "LastActivityDate": "2017-06-14T01:06:33.693", "Score": "4", "CreationDate": "2017-06-14T00:53:02.077", "ParentId": "44533602", "CommentCount": "3", "OwnerUserId": "2877241", "LastEditDate": "2017-06-14T01:06:33.693"}});