post_cb({"1567761": {"Id": "1567761", "PostTypeId": "2", "Body": "<p>main needs a return type.</p>\n<p>class Another needs a terminating semi-colon.</p>\n<p>class Another needs its members to be public.</p>\n<p>Also, methods aren't generally considered invisible; the methods were inaccessible without the public access keyword.</p>\n", "LastActivityDate": "2009-10-14T17:23:01.497", "Score": "2", "CreationDate": "2009-10-14T17:23:01.497", "ParentId": "1567730", "CommentCount": "3", "OwnerUserId": "103912"}, "1567759": {"Id": "1567759", "PostTypeId": "2", "Body": "<p>I think you are just missing a public: at the top of the Another definition.  For questions like this it is usually helpful to post the error messages that you are getting.</p>\n", "LastActivityDate": "2009-10-14T17:22:51.520", "Score": "0", "CreationDate": "2009-10-14T17:22:51.520", "ParentId": "1567730", "CommentCount": "0", "OwnerUserId": "110672"}, "1567762": {"Id": "1567762", "PostTypeId": "2", "Body": "<p>I cleaned up your code to this:</p>\n<pre><code>template &lt;int a&gt;\nclass Test {\npublic:\n    Test() {}\n    int MyMethod1() { return a; }\n};\n\ntemplate &lt;int b&gt;\nclass Another : public Test&lt;b&gt;\n{\npublic:\n    Another() {}\n    void MyMethod2() {\n        MyMethod1();\n    }\n};\n\n\nint main()\n{\n    Another&lt;5&gt; a;\n    a.MyMethod1();\n    a.MyMethod2();\n}\n</code></pre>\n<p>And compiled with <code>-fpermissive</code> with no problems (you can probably resolve this issue).  </p>\n", "LastActivityDate": "2009-10-14T17:23:05.023", "Score": "1", "CreationDate": "2009-10-14T17:23:05.023", "ParentId": "1567730", "CommentCount": "3", "OwnerUserId": "130641"}, "bq_ids": {"n4140": {"so_1567730_1567867_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 190}}, "n3337": {"so_1567730_1567867_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 184}}, "n4659": {"so_1567730_1567867_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 195}}}, "1567730": {"ViewCount": "11687", "Body": "<p>When a template publicly inherits from another template, aren't the base public methods supposed to be accessible?</p>\n<pre><code>template &lt;int a&gt;\nclass Test {\npublic:\n    Test() {}\n    int MyMethod1() { return a; }\n};\n\ntemplate &lt;int b&gt;\nclass Another : public Test&lt;b&gt;\n{\npublic:\n    Another() {}\n    void MyMethod2() {\n        MyMethod1();\n    }\n};\n\nint main()\n{\n    Another&lt;5&gt; a;\n    a.MyMethod1();\n    a.MyMethod2();\n}\n</code></pre>\n<p>Well, GCC craps out on this... I must be missing something totally obvious (brain melt). Help?</p>\n", "Title": "Inheritance and templates in C++ - why are methods invisible?", "CreationDate": "2009-10-14T17:17:27.797", "LastActivityDate": "2015-06-18T19:50:49.863", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2009-10-14T17:31:09.077", "LastEditorUserId": "140719", "Id": "1567730", "Score": "18", "OwnerUserId": "190026", "Tags": "<c++><inheritance><templates>", "AnswerCount": "5"}, "1567781": {"Id": "1567781", "PostTypeId": "2", "Body": "<p>This is part of the rules concerning dependent names. <code>Method1</code> is not a dependent name in the scope of <code>Method2</code>. So the compiler doesn't look it up in dependent base classes. </p>\n<p>There two ways to fix that: Using <code>this</code> or specifying the base type. More details on this <a href=\"https://stackoverflow.com/questions/1527849/how-do-you-understand-dependent-names-in-c/1528010#1528010\">very recent post</a> or at the <a href=\"https://isocpp.org/wiki/faq/templates#nondependent-name-lookup-members\" rel=\"noreferrer\">C++ FAQ</a>. Also notice that you missed the public keyword and a semi-colon. Here's a fixed version of your code.</p>\n<pre><code>\ntemplate &lt;int a&gt;\nclass Test {\npublic:\n    Test() {}\n    int MyMethod1() { return a; }\n};\n\ntemplate &lt;int b&gt;\nclass Another : public Test&lt;b&gt;\n{\npublic:\n    Another() {}\n    void MyMethod2() {\n        Test&lt;b&gt;::MyMethod1();\n    }\n};\n\nint main()\n{\n    Another&lt;5&gt; a;\n    a.MyMethod1();\n    a.MyMethod2();\n}\n\n</code></pre>\n", "LastEditorUserId": "396967", "LastActivityDate": "2015-06-18T19:50:49.863", "Score": "27", "CreationDate": "2009-10-14T17:25:55.260", "ParentId": "1567730", "CommentCount": "6", "LastEditDate": "2015-06-18T19:50:49.863", "OwnerUserId": "155191"}, "1567867": {"Id": "1567867", "PostTypeId": "2", "Body": "<p>You should fully qualify <code>MyMethod1</code>. C++ Standard clearly states this in 14.6.2/3:</p>\n<blockquote>\n<p id=\"so_1567730_1567867_0\">In the definition of a class template or a member of a class template, if a base class of the class template depends on a template-parameter, the base class scope is not examined during unqualified name lookup either at the point of definition of the class template or member or during an instantiation of the class template or member.</p>\n</blockquote>\n<p>So, you should write:</p>\n<pre><code>void MyMethod2() {\n    Test&lt;b&gt;::MyMethod1();\n}\n</code></pre>\n", "LastActivityDate": "2009-10-14T17:43:13.517", "Score": "12", "CreationDate": "2009-10-14T17:43:13.517", "ParentId": "1567730", "CommentCount": "1", "OwnerUserId": "123111"}});