post_cb({"20639183": {"ParentId": "20638968", "CommentCount": "0", "Body": "<p><code>A()</code> uses <em>value initialisation</em>. As you've noticed, this behaves differently depending on whether <code>A</code> has a user-declared default constructor.</p>\n<ul>\n<li>If it does, then that is called. Any member not explicitly initialised by the constructor will be left uninitialised. For automatic or temporary objects like this, that means they will not be touched, and will contain whatever garbage happened to be in memory.</li>\n<li>If it doesn't, then each member will be value initialised. For most fundamental types, value-initialisation sets them to zero.</li>\n</ul>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "20639183", "Score": "1", "CreationDate": "2013-12-17T16:15:12.210", "LastActivityDate": "2013-12-17T16:15:12.210"}, "20639122": {"ParentId": "20638968", "CommentCount": "0", "Body": "<p><code>FrameA()</code> will value-initialize the object (\u00a75.2.3/2):</p>\n<blockquote>\n<p id=\"so_20638968_20639122_0\">The expression <code>T()</code>, where <code>T</code> is a <em>simple-type-specifier</em> or <em>typename-specifier</em> for a non-array complete object type or the (possibly cv-qualified) <code>void</code> type, creates a prvalue of the specified type, which is value-initialized</p>\n</blockquote>\n<p>Value-initializing a non-union class type that doesn't have a user-provided constructor will zero-initialize it (\u00a78.5/7):</p>\n<blockquote>\n<p id=\"so_20638968_20639122_1\">if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</p>\n</blockquote>\n<p>This zero-initializes each of its members.</p>\n<p>Value-initializing a class type that does have a user-provided constructor will simply called the constructor (which in your case, does not initialise the array) (\u00a78.5/7):</p>\n<blockquote>\n<p id=\"so_20638968_20639122_2\">if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</p>\n</blockquote>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "20639122", "Score": "3", "CreationDate": "2013-12-17T16:12:36.757", "LastActivityDate": "2013-12-17T16:12:36.757"}, "20638968": {"CommentCount": "2", "ViewCount": "714", "PostTypeId": "1", "LastEditorUserId": "2190129", "CreationDate": "2013-12-17T16:04:59.467", "LastActivityDate": "2013-12-18T01:28:25.263", "Title": "Does default constructor zero-initialize member array variable?", "AcceptedAnswerId": "20639122", "LastEditDate": "2013-12-18T01:28:25.263", "Id": "20638968", "Score": "4", "Body": "<p>When I examine following program with it's output, I found quite confusing that to get a FrameA object by return value:  </p>\n<ol>\n<li>when <em>a empty ctor is defined, the member array field is remain uninitialized</em> </li>\n<li><p>when <em>let the compiler generate the ctor, the member array field is initialized to all 0</em> </p>\n<pre><code>auto a = f();       // f() --&gt; return A();\n</code></pre></li>\n</ol>\n<p>Given following <a href=\"http://sscce.org/\" rel=\"nofollow\">SSCCE</a></p>\n<pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int MAX = 9999999;\n\nstruct FrameA {\n  // FrameA() {}\n  // FrameA(const FrameA &amp;v) { memcpy(data, v.data, sizeof(data)); }\n  char data[1000];\n};\n\nFrameA f(int i) { return FrameA(); }\n\nint test(int odd) {\n  int sum = 0;\n  auto begin = chrono::steady_clock::now();\n  for (int i = 0; i &lt; MAX; ++i) {\n    auto v = f(odd);\n    sum += v.data[0] + v.data[330];\n  }\n  auto end = chrono::steady_clock::now();\n  cout &lt;&lt; chrono::duration_cast&lt;chrono::milliseconds&gt;(end - begin).count()\n       &lt;&lt; \" (milliseconds)\" &lt;&lt; endl;\n  return sum;\n}\n\nint _tmain(int argc, _TCHAR *argv[]) {\n  test(0);\n  test(1);\n  return 0;\n}\n</code></pre>\n<p>When defined an empty ctor, the output is like:</p>\n<blockquote>\n<p id=\"so_20638968_20638968_0\">g++ v4.8.1</p>\n<p id=\"so_20638968_20638968_1\">72 (milliseconds)<br>\n  73 (milliseconds)  </br></p>\n</blockquote>\n<p>But use compiler generated ctor, the output is:</p>\n<blockquote>\n<p id=\"so_20638968_20638968_2\">g++ v4.8.1</p>\n<p id=\"so_20638968_20638968_3\">1401 (milliseconds)<br>\n  1403 (milliseconds)  </br></p>\n</blockquote>\n<p>I also tested on VC12, the result is similar.</p>\n<p>After examine the assembly, I found when using compiler generated ctor:</p>\n<pre><code>  for (int i = 0; i &lt; MAX; ++i) {\n    auto v = f(odd);\n00A31701  push        3E8h  \n00A31706  lea         eax,[ebp-3F8h]  \n00A3170C  push        0  \n00A3170E  push        eax  \n00A3170F  call        _memset (0A32460h)               ;; memset FrameA to 0\n    sum += v.data[0] + v.data[330];\n00A31714  movsx       eax,byte ptr [ebp-3F8h] \n</code></pre>\n<p>But using an empty ctor won't call <code>memset</code> to set the array in FrameA to zero.</p>\n<p>Is there any explanation to this?</p>\n<p>BTW, I searched the C++ 11 draft n3242, but Chap 8.5 <code>zero-initialize</code> and <code>default-initialize</code> seems doesn't covered this case. Is there anything I missed?</p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "2190129", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_20638968_20639122_0": {"section_id": 6000, "quality": 0.8888888888888888, "length": 16}, "so_20638968_20639122_1": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_20638968_20639122_2": {"section_id": 3286, "quality": 0.7058823529411765, "length": 12}}, "n3337": {"so_20638968_20639122_0": {"section_id": 5768, "quality": 0.8888888888888888, "length": 16}, "so_20638968_20639122_1": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_20638968_20639122_2": {"section_id": 3157, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_20638968_20639122_1": {"section_id": 4049, "quality": 0.6875, "length": 11}, "so_20638968_20639122_2": {"section_id": 4049, "quality": 0.6470588235294118, "length": 11}}}, "20639131": {"ParentId": "20638968", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Whe you construct an object of type <code>T</code> with the default constructor, i.e., using <code>T()</code>  you get <em>value-initialization</em> or <em>default construction</em> depending on how <code>T</code> is defined:</p>\n<ol>\n<li>If <code>T</code> doesn't have a default constructor or has a defaulted default constructor the compiler take care of initialization: the compiler value-initializes all members. For a built-in type value-initialization means that it is <em>zero-initialized</em>, i.e., the values receive their corresponding suitable zero representation.</li>\n<li>If <code>T</code> has a non-defaulted default constructor the programmer of <code>T</code> takes over responsibility of initializing members. The members are either listed in the member initializer list and initialized correspondingly or they are <em>default initialized</em>. Default initialization for built-in types means that nothing happens, i.e., these member get uninitialized.</li>\n</ol>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2013-12-17T16:18:33.690", "Id": "20639131", "Score": "3", "CreationDate": "2013-12-17T16:13:02.703", "LastActivityDate": "2013-12-17T16:18:33.690"}});