post_cb({"bq_ids": {"n4140": {"so_42506850_42507317_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 7070}}, "n3337": {"so_42506850_42507317_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 6814}}, "n4659": {"so_42506850_42507317_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 8567}}}, "42507138": {"Id": "42507138", "PostTypeId": "2", "Body": "<p>Place of QSharedPointer info2;</p>\n<p>is important. \n'info2' should be defined before using it into decltype (<a href=\"http://en.cppreference.com/w/cpp/language/decltype\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/decltype</a>).</p>\n<p>Next would not work either:</p>\n<pre><code>void f() {\n    d();\n}\n\nvoid d() {\n}\n</code></pre>\n", "LastActivityDate": "2017-02-28T11:09:42.680", "CommentCount": "1", "CreationDate": "2017-02-28T11:09:42.680", "ParentId": "42506850", "Score": "0", "OwnerUserId": "6439571"}, "42507317": {"Id": "42507317", "PostTypeId": "2", "Body": "<p>I believe this part of the standard is relevant <strong>[basic.scope.class]/1.1</strong>:</p>\n<blockquote>\n<p id=\"so_42506850_42507317_0\">The potential scope of a name declared in a class consists not only of the declarative region following the\n  name\u2019s point of declaration, but also of all function bodies, default arguments,\n  exception-specification\n  s,\n  and\n  brace-or-equal-initializers\n  of non-static data members in that class (including such things in nested\n  classes).</p>\n</blockquote>\n<p>Note that it only mentions <strong>default</strong> arguments. So this works since the decltype is referred in a default argument:</p>\n<pre><code>Method(QSharedPointer&lt;int&gt; info1 = decltype(info2)())\n</code></pre>\n<p>And this also works since it's inside a body:</p>\n<pre><code>Method(&lt;...&gt;)\n{\n    decltype(info2) info3;\n}\n</code></pre>\n<p>However your example does not work because such a placement of a decltype is not covered by the paragraph I quoted, thus the name <code>info2</code> is considered out of scope.</p>\n", "LastActivityDate": "2017-02-28T11:17:32.337", "CommentCount": "0", "CreationDate": "2017-02-28T11:17:32.337", "ParentId": "42506850", "Score": "1", "OwnerUserId": "1490355"}, "42506850": {"ViewCount": "173", "Body": "<p>Why this code is incorrect?</p>\n<pre><code>class Method\n{\npublic:\n   Method(decltype(info2) info1);\n   virtual ~Method(){}\nprotected:\n  QSharedPointer&lt;info&gt; info2;\n};\n</code></pre>\n<p>But this code is correct:</p>\n<pre><code>class Method\n{\npublic:\n   virtual ~Method(){}\nprotected:\n  QSharedPointer&lt;info&gt; info2;\npublic:\n  Method(decltype(info2) info1);   \n};\n</code></pre>\n<p>why place of class constructor is important?\nI thought that place of definition class constructor isnt important.</p>\n", "Title": "Placing class constructor", "CreationDate": "2017-02-28T10:56:48.873", "LastActivityDate": "2017-02-28T11:17:32.337", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "ClosedDate": "2017-02-28T11:20:29.480", "Id": "42506850", "Score": "5", "OwnerUserId": "5673058", "Tags": "<c++><c++11><constructor>", "AnswerCount": "2"}});