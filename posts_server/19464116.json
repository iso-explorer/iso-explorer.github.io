post_cb({"19464146": {"Id": "19464146", "PostTypeId": "2", "Body": "<p>Yes and No.</p>\n<p>It depends on where you put the <code>const</code> specifier.</p>\n<p>When defining member functions, this is possible (Yes-part):</p>\n<pre><code>int f() { /*code*/ }         //invoke this function on non-const object\nint f() const { /*code*/ }   //ok : invoke this function on const object\n</code></pre>\n<p>Note that in the absence of the <em>first</em> function, even non-const object will invoke the second function (i.e <code>const</code> member function) and in the absence of the <em>second</em> function, you wouldn't be able to invoke the first function on <code>const</code> objects!</p>\n<p>But this is <strong>not</strong> possible (No-part):</p>\n<pre><code>int g() { /*code*/ }\nconst int g() { /*code*/ } //error: redefinition \n</code></pre>\n<p>irrespective of whether they're member functions or free functions.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2013-10-19T08:44:52.057", "Score": "4", "CreationDate": "2013-10-19T08:39:45.540", "ParentId": "19464116", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2013-10-19T08:44:52.057"}, "19464360": {"Id": "19464360", "PostTypeId": "2", "Body": "<p>Per \u00a7 13.1 / 2:</p>\n<p>It's not possible to put <code>const</code> in return-type to overload:</p>\n<blockquote>\n<p id=\"so_19464116_19464360_0\">Function declarations that differ only in the return type cannot be\n  overloaded.</p>\n</blockquote>\n<pre><code>int func();\nconst int func(); // Error\n</code></pre>\n<p>\u00a0</p>\n<p>It's not possible to put <code>const</code> in parameter-list to overload:</p>\n<blockquote>\n<p id=\"so_19464116_19464360_1\">Parameter declarations that differ only in the presence or absence of\n  const and/or volatile are equivalent.</p>\n</blockquote>\n<pre><code>void func(int x);\nvoid func(const int x); // Error\n</code></pre>\n<p>\u00a0</p>\n<p>BUT, it's possible:</p>\n<blockquote>\n<p id=\"so_19464116_19464360_2\">const and volatile type-specifiers buried within a parameter type\n  specification are significant and can be used to distinguish\n  overloaded function declarations.</p>\n</blockquote>\n<pre><code>void func(int &amp;x);\nvoid func(const int &amp;x); // OK\n</code></pre>\n<p>\u00a0</p>\n<p>And, it's possible to put <code>const</code> at end of method declaration to distinguish overloads:</p>\n<pre><code>int func();\nint func() const; // OK\n</code></pre>\n", "LastActivityDate": "2013-10-19T09:09:09.113", "CommentCount": "2", "CreationDate": "2013-10-19T09:09:09.113", "ParentId": "19464116", "Score": "1", "OwnerUserId": "952747"}, "19464116": {"ViewCount": "121", "Body": "<p>whether it is possible to overload function by const specifier. That is, we have two functions, one constant the other is not, can we say that the constant function overloaded non-const function ?</p>\n", "AcceptedAnswerId": "19464360", "Title": "It is possible to overload function by const specifier?", "CreationDate": "2013-10-19T08:35:12.907", "Id": "19464116", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-10-19T09:09:09.113", "Score": "1", "OwnerUserId": "1886376", "Tags": "<c++><function><const><overloading>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_19464116_19464360_1": {"length": 9, "quality": 1.0, "section_id": 558}, "so_19464116_19464360_0": {"length": 7, "quality": 1.0, "section_id": 557}, "so_19464116_19464360_2": {"length": 14, "quality": 1.0, "section_id": 558}}, "n3337": {"so_19464116_19464360_1": {"length": 9, "quality": 1.0, "section_id": 549}, "so_19464116_19464360_2": {"length": 14, "quality": 1.0, "section_id": 549}, "so_19464116_19464360_0": {"length": 7, "quality": 1.0, "section_id": 548}}, "n4659": {"so_19464116_19464360_1": {"length": 9, "quality": 1.0, "section_id": 581}, "so_19464116_19464360_2": {"length": 14, "quality": 1.0, "section_id": 581}, "so_19464116_19464360_0": {"length": 7, "quality": 1.0, "section_id": 580}}}});