post_cb({"21539788": {"Id": "21539788", "PostTypeId": "2", "Body": "<p>No, this is not allowed the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"noreferrer\">draft C++ standard</a> in section <code>3.6.1</code> <em>Main function</em> paragraph <em>3</em> says:</p>\n<blockquote>\n<p id=\"so_21539744_21539788_0\">[...]A program that defines main as deleted or that declares main to be inline, static, or constexpr is ill-formed.[...]</p>\n</blockquote>\n<p><code>main</code> has to be a run-time function and as <a href=\"https://stackoverflow.com/questions/21539744/why-main-can-not-be-a-constexpr#comment32527813_21539787\">Lightness says</a> it makes no sense since you can't optimize <code>main</code> away.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-02-12T01:32:49.747", "Score": "34", "CreationDate": "2014-02-03T23:12:01.170", "ParentId": "21539744", "CommentCount": "6", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T10:29:08.513"}, "21539744": {"ViewCount": "1306", "Body": "<p>When you attempt to use constexpr with <code>main</code> like this:</p>\n<pre><code>constexpr int main()\n</code></pre>\n<p>gcc and clang complain:</p>\n<blockquote>\n<p id=\"so_21539744_21539744_0\">error: cannot declare '::main' to be inline</p>\n<p id=\"so_21539744_21539744_1\">error: 'main' is not allowed to be declared constexpr</p>\n</blockquote>\n<p>Let's see what requirements for constexpr function are:</p>\n<p>A constexpr function must satisfy the following requirements:</p>\n<ul>\n<li>it must not be virtual</li>\n<li>its return type must be LiteralType</li>\n<li>each of its parameters must be literal type</li>\n</ul>\n<p>What is LiteralType?</p>\n<p>A literal type is any of the following</p>\n<ul>\n<li>void(since c++14)</li>\n<li>scalar type</li>\n<li>reference type</li>\n<li>an array of literal type</li>\n</ul>\n<p>What must the function body include? </p>\n<ul>\n<li>null statements</li>\n<li>static_assert declarations</li>\n<li>typedef declarations and alias declarations that do not define classes or enumerations</li>\n<li>using declarations</li>\n<li>using directives</li>\n<li>exactly one return statement that contains only literal values, constexpr variables and functions. </li>\n</ul>\n<p>The following examples:</p>\n<pre><code>constexpr int main() { ; }\n\nconstexpr int main() { return 42; }\n\nconstexpr int main() {\n// main defaults to return 0 \n}\n</code></pre>\n<p>seems to fit all these requirements. Also with that, <code>main</code> is special function that runs at start of program before everything else. You can run constexpr functions from main, and in order for something marked constexpr to be constexpr, it must be run in a constexpr context.</p>\n<p>So why is <code>main</code> not allowed to be a constexpr?</p>\n", "AcceptedAnswerId": "21539788", "Title": "Why main can not be a constexpr?", "CreationDate": "2014-02-03T23:09:24.277", "Id": "21539744", "CommentCount": "6", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-07-27T17:18:52.150", "LastEditorUserId": "1708801", "LastActivityDate": "2014-07-28T09:38:33.327", "Score": "19", "OwnerUserId": "3267823", "Tags": "<c++><c++11><main><language-lawyer><constexpr>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_21539744_21539788_0": {"length": 9, "quality": 1.0, "section_id": 7147}}, "n3337": {"so_21539744_21539788_0": {"length": 9, "quality": 1.0, "section_id": 6891}}, "n4659": {"so_21539744_21539788_0": {"length": 9, "quality": 1.0, "section_id": 8648}}}, "24992396": {"Id": "24992396", "PostTypeId": "2", "Body": "<p>In my opinion the reason is that it makes no sense to declare <code>main()</code> as a <code>constexpr</code> and the standards committee want the C++ programming language to make sense.</p>\n<p>The function <code>main()</code> is a special function that deals with program entry-point initialization - it is not sensible to use it to calculate compile-time values.</p>\n", "LastActivityDate": "2014-07-28T09:38:33.327", "CommentCount": "0", "CreationDate": "2014-07-28T09:38:33.327", "ParentId": "21539744", "Score": "1", "OwnerUserId": "3807729"}, "21539797": {"Id": "21539797", "PostTypeId": "2", "Body": "<p>It doesn't make any sense to declare main as <code>constexpr</code> for two reasons: 1) It is a run-time function. 2) it may not be called from other functions or recursively. </p>\n", "LastEditorUserId": "845092", "LastActivityDate": "2014-02-04T00:35:08.720", "Score": "14", "CreationDate": "2014-02-03T23:12:27.653", "ParentId": "21539744", "CommentCount": "4", "OwnerUserId": "2877241", "LastEditDate": "2014-02-04T00:35:08.720"}, "21539787": {"Id": "21539787", "PostTypeId": "2", "Body": "<p>The standard gives the precise signature for <code>main</code>, so the compiler is allowed to reject other signatures. Even more specifically, it prescribes that <code>main</code> cannot be <code>constexpr</code>, <code>static</code>, or some other things.</p>\n<p>If you're wondering <em>why</em>, the compiler is allowed to insert code at the beginning of <code>main</code> (to do stuff like initialize global variables, etc.) which could make it non-<code>constexpr</code> (which is why e.g. a program is not allowed to call main explicitly).</p>\n", "LastActivityDate": "2014-02-03T23:11:57.140", "CommentCount": "13", "CreationDate": "2014-02-03T23:11:57.140", "ParentId": "21539744", "Score": "24", "OwnerUserId": "3175411"}});