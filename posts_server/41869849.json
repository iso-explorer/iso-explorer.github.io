post_cb({"41869849": {"CommentCount": "8", "ViewCount": "97", "CreationDate": "2017-01-26T08:58:52.753", "LastActivityDate": "2017-01-26T09:07:34.547", "Title": "Is the number of static variables limited in C++", "AcceptedAnswerId": "41870007", "PostTypeId": "1", "Id": "41869849", "Score": "1", "Body": "<p>I was talking with developpers from a platform which are claiming to support C++, but they said, in the same breath, that the number of static variables that are cleand-up at programm exit is bound to a magic number (i think they said 32 on their platform), they say that is conform with the C++ standard.</p>\n<p>Is this correct?</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "1235183", "AnswerCount": "2"}, "41870007": {"ParentId": "41869849", "CommentCount": "0", "Body": "<p>The standard says that all destructors <em>must</em> be called if they have side effects.</p>\n<blockquote>\n<p id=\"so_41869849_41870007_0\"><code>[basic.start.term]/1:</code> Destructors (12.4) for initialized objects (that is, objects whose lifetime (3.8) has begun) with static storage\n  duration are called as a result of returning from main and as a result of calling std::exit (18.5). [...]</p>\n<p id=\"so_41869849_41870007_1\"><code>[basic.stc.static]/2:</code> If a variable with static storage duration has initialization or a destructor with side effects, it shall not be\n  eliminated even if it appears to be unused, except that a class object or its copy/move may be eliminated\n  as specified in 12.8.\n  The keyword static can be used to declare a local variable with static storage duration.</p>\n</blockquote>\n<p>However, the rules on standards compliance do allow for some leeway when it comes to implementation limits:</p>\n<blockquote>\n<p id=\"so_41869849_41870007_2\"><code>[intro.compilance]/2.1:</code> If a program contains no violations of the rules in this International Standard, a conforming implementation shall, <strong>within its resource limits</strong>, accept and correctly execute that program.</p>\n</blockquote>\n<p>A hard limit on the number of static variables allowed may seem odd, but common implementations have hard limits on all sorts of things, e.g. template instantiation depth.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "41870007", "Score": "6", "CreationDate": "2017-01-26T09:07:34.547", "LastActivityDate": "2017-01-26T09:07:34.547"}, "41869922": {"ParentId": "41869849", "CommentCount": "3", "Body": "<p>If there is a limit in the static variables cleaned-up at program exit, it surely is NOT mandated by the C++ language standard.  </p>\n<p>Depending on the platform, compiler and runtime library, there may be however be some limitation, i.e. on embedded platforms with small CPU capabilities and/or strict memory constraints.</p>\n", "OwnerUserId": "1242646", "PostTypeId": "2", "Id": "41869922", "Score": "2", "CreationDate": "2017-01-26T09:03:02.667", "LastActivityDate": "2017-01-26T09:03:02.667"}, "bq_ids": {"n4140": {"so_41869849_41870007_0": {"section_id": 7156, "quality": 0.85, "length": 17}, "so_41869849_41870007_1": {"section_id": 7165, "quality": 0.625, "length": 20}, "so_41869849_41870007_2": {"section_id": 5770, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_41869849_41870007_0": {"section_id": 6900, "quality": 0.85, "length": 17}, "so_41869849_41870007_1": {"section_id": 6909, "quality": 0.625, "length": 20}, "so_41869849_41870007_2": {"section_id": 5543, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_41869849_41870007_0": {"section_id": 8661, "quality": 0.65, "length": 13}, "so_41869849_41870007_1": {"section_id": 8673, "quality": 0.625, "length": 20}, "so_41869849_41870007_2": {"section_id": 7227, "quality": 0.8666666666666667, "length": 13}}}});