post_cb({"bq_ids": {"n4140": {"so_2444734_2444902_0": {"length": 24, "quality": 0.96, "section_id": 5895}}, "n3337": {"so_2444734_2444902_0": {"length": 24, "quality": 0.96, "section_id": 5666}}, "n4659": {"so_2444734_2444902_0": {"length": 24, "quality": 0.96, "section_id": 7378}}}, "2444734": {"ViewCount": "7680", "Body": "<p>What is the purpose of a <code>volatile</code> member function in C++?</p>\n", "Title": "What is the purpose of a volatile member function in C++?", "CreationDate": "2010-03-15T02:24:13.967", "LastActivityDate": "2010-03-15T10:26:10.160", "CommentCount": "7", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2010-03-15T10:26:10.160", "LastEditorUserId": "177222", "Id": "2444734", "Score": "17", "OwnerUserId": "293666", "Tags": "<c++><volatile>", "AnswerCount": "2"}, "2444902": {"Id": "2444902", "PostTypeId": "2", "Body": "<p>To answer the question about what it means to have a 'volatile member function' (which may or may not be what was originally intended by the person who posted the question), marking a member function as <code>const</code> or <code>volatile</code> (or a combined <code>const volatile</code>) applies those qualifiers to the <code>this</code> pointer used in the function. As stated by the standard (9.2.1 \"The <code>this</code> pointer\"):</p>\n<blockquote>\n<p id=\"so_2444734_2444902_0\">The type of this in a member function of a <code>class X</code> is <code>X*</code>.  If the member function is declared <code>const</code>, the type of this is <code>const X*</code>, if the member function is declared <code>volatile</code>, the type of <code>this</code> is <code>volatile X*</code>, and if the member function is declared <code>const volatile</code>, the type of this is <code>const volatile X*</code>.</p>\n</blockquote>\n<p>So by marking the member function as <code>volatile</code> you'd be making any access to the non-static data members of the object within that member function as <code>volatile</code>.</p>\n", "LastActivityDate": "2010-03-15T03:20:18.757", "CommentCount": "1", "CreationDate": "2010-03-15T03:20:18.757", "ParentId": "2444734", "Score": "20", "OwnerUserId": "12711"}, "2444774": {"Id": "2444774", "PostTypeId": "2", "Body": "<p>EDIT:</p>\n<p>This answer was posted when the question was about the volatile keyword.  Question seems to have been changed by a third party.</p>\n<p>ORIGINAL:</p>\n<p>Volatile informs the compiler that it should not assume that the value it just put in the variable marked as volatile will be there next time it uses it... that it must check the current value before using it again.</p>\n<p>One example is if the variable represents a memory location that might be changed by another process.</p>\n<p>Here's an example (been ages since I did C++ so please forgive any minor syntax issues):</p>\n<pre><code>volatile int x;\n\nint DoSomething()\n{\n    x = 1;\n\n    DoSomeOtherStuff();\n\n    return x+1; // Don't just return 2 because we stored a 1 in x.  \n                // Check to get its current value\n}\n</code></pre>\n", "LastEditorUserId": "141172", "LastActivityDate": "2010-03-15T02:54:33.770", "Score": "6", "CreationDate": "2010-03-15T02:36:03.470", "ParentId": "2444734", "CommentCount": "8", "OwnerUserId": "141172", "LastEditDate": "2010-03-15T02:54:33.770"}});