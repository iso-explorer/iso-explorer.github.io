post_cb({"16067610": {"ParentId": "16067127", "CommentCount": "0", "CreationDate": "2013-04-17T18:38:49.833", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "16067610", "Score": "1", "Body": "<p>Your Python code isn't doing what you think it's doing. You're reading the entire file into the string <code>f</code>, then iterating through it, producing single character strings instead of lines.</p>\n<p>However even if you did it the proper way and used <code>readlines</code> or iterated the file object directly, you'd still have the same problem with trailing newlines being retained. The reason comes from this statement in the <a href=\"http://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects\" rel=\"nofollow\">Input and Output Tutorial</a>:</p>\n<blockquote>\n<p id=\"so_16067127_16067610_0\"><code>f.readline()</code> reads a single line from the file; a newline character (\\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn\u2019t end in a newline. This makes the return value unambiguous; if <code>f.readline()</code> returns an empty string, the end of the file has been reached, while a blank line is represented by '\\n', a string containing only a single newline.</p>\n</blockquote>\n<p>C++ uses a different method of signalling the end of file, so it doesn't need to retain this distinction and is free to lose the trailing newline. This is usually more convenient.</p>\n", "LastActivityDate": "2013-04-17T18:38:49.833"}, "16067231": {"ParentId": "16067127", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-04-17T18:15:46.863", "Score": "4", "LastEditorUserId": "846892", "LastEditDate": "2013-04-17T18:27:08.587", "Id": "16067231", "OwnerUserId": "1071623", "Body": "<p>By default, <code>ifstream::getline</code> uses <code>'\\n'</code> as the delimiter for end of line.  It discards the delimiter so what you are seeing is what you would expect. </p>\n", "LastActivityDate": "2013-04-17T18:27:08.587"}, "bq_ids": {"n4140": {"so_16067127_16067283_0": {"section_id": 1855, "quality": 1.0, "length": 8}}, "n3337": {"so_16067127_16067283_0": {"section_id": 1849, "quality": 1.0, "length": 8}}, "n4659": {"so_16067127_16067283_0": {"section_id": 2028, "quality": 1.0, "length": 8}}}, "16067283": {"ParentId": "16067127", "CommentCount": "0", "CreationDate": "2013-04-17T18:18:54.963", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "16067283", "Score": "4", "Body": "<p>As per the specification of <code>std::getline()</code> [string.io]\u00a77:</p>\n<blockquote>\n<p id=\"so_16067127_16067283_0\">extracts characters from is and appends them to str ... until any of\n  the following occurs:</p>\n<ul>\n<li>...</li>\n<li>traits::eq(c, delim) for the next available input character c (in which case, c is <strong>extracted but not appended</strong>)</li>\n</ul>\n</blockquote>\n<p>(Emphasis mine).</p>\n<p>This means that when <code>getline</code> encounters the delimiter (<code>\\n</code> by default), it removes it from the stream, but does not store it in the string.</p>\n<p>And as to directly answer your \"why\" question: because it's designed that way.</p>\n", "LastActivityDate": "2013-04-17T18:18:54.963"}, "16067127": {"CommentCount": "17", "AcceptedAnswerId": "16067283", "ClosedDate": "2013-04-18T03:17:42.837", "CreationDate": "2013-04-17T18:10:01.140", "LastActivityDate": "2013-04-17T18:38:49.833", "PostTypeId": "1", "ViewCount": "183", "Title": "why is c++ excluding \\n while python is not", "Id": "16067127", "Score": "2", "Body": "<p>I wrote up a piece of trivial code to output sum total of ascii value, in both c++ and python, given an input file.</p>\n<p>The c++ piece seems to have excluded '\\n' while the python piece did include '\\n' as part of its calculation, for the same input text file.</p>\n<p>I was wondering if there is any step in my code that I overlooked.</p>\n<p>code pieces:</p>\n<pre><code>    import sys\n\n    try:\n         f=open(sys.argv[1]).read()\n    except:\n        print \" file not found \\n\"  \n        sys.exit()\n    sum=0\n    for line in f:\n       for character in line:\n          try:\n        if character=='\\n':\n            pass\n        else:\n            print character\n            sum+=ord(character)\n\n    except:\n        print \"failed \\n\"\n        pass\n\n\n     print \"The sum is %d \\n\" %sum\n</code></pre>\n<p>ANd the c++ piece is :</p>\n<pre><code>    #include \"iostream\"\n    #include \"fstream\"\n    #include \"string\"\n    int k;\n    int main(int argc, char *argv[])\n    {\n    int sum=0;\n    std::string line;\n    std::ifstream myfile (argv[1]);\n    if (myfile.is_open())\n      {while (myfile.good())\n        {\n        getline (myfile,line);\n        for (k=0;k&lt;(line.length());k++)\n            {\n                sum=sum+int(line[k]);\n            }\n    }\nstd::cout&lt;&lt;\" The total sum is : \" &lt;&lt;sum&lt;&lt;std::endl;\n}\n  else std::cout&lt;&lt; \"Unable to open file \";\n  return 0;\n  }\n</code></pre>\n", "Tags": "<c++><python>", "OwnerUserId": "2151629", "AnswerCount": "3"}});