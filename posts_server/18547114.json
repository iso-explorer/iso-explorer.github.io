post_cb({"18547129": {"Id": "18547129", "PostTypeId": "2", "Body": "<p>Yes, <code>argv[argc]==NULL</code> is guaranteed.  See <em>C11 5.1.2.2.1 Program startup</em> (my emphasis)</p>\n<blockquote>\n<p id=\"so_18547114_18547129_0\">If they are declared, the parameters to the main function shall obey\n  the following constraints:</p>\n<p id=\"so_18547114_18547129_1\">The value of argc shall be nonnegative.\n  <strong>argv[argc] shall be a null\n  pointer.</strong></p>\n</blockquote>\n<p>Providing <code>argc</code> therefore isn't vital but is still useful.  Amongst other things, it allows for quick checking that the correct number of arguments has been passed.</p>\n<p>Edit: The question has been amended to include C++.  n3337 draft <em>3.6.1 Main function</em> says</p>\n<blockquote>\n<p id=\"so_18547114_18547129_2\">2 ...argc shall be the number of arguments passed to the program from\n  the environment in which the program is run. .... The value of argc\n  shall be non-negative. <strong>The value of argv[argc] shall be 0</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "311966", "LastActivityDate": "2013-09-01T08:45:46.420", "Score": "97", "CreationDate": "2013-08-31T10:28:10.420", "ParentId": "18547114", "CommentCount": "3", "LastEditDate": "2013-09-01T08:45:46.420", "OwnerUserId": "311966"}, "18556803": {"Id": "18556803", "PostTypeId": "2", "Body": "<p>We \"need\" it, because it's required by various standards.</p>\n<p>We are free to ignore the value completely, but since it is first parameter of <code>main</code>, we must have it in parameter list. In C++ (and probably non-standard C dialects), you can just omit the parameter name, like this C++ snippet (easy to convert to C):</p>\n<pre><code>#include &lt;stdio.h&gt; // C-compatible include, guarantees puts in global namespace\n\n// program will print contents of argv, one item per line, starting from argv[0]\n\nint main(int /*argc*/, char *argv[]) { // uncomment argc for C\n\n    //(void)argc; // uncomment statement for C\n\n    for (int i=0; argv[i]; ++i) {\n        puts(argv[i]);\n    }\n\n    return 0;\n}\n</code></pre>\n<p>In standard C, with common warnings settings, unused parameter generates warning, which can be fixed by a statement like <code>(void)argc;</code> which causes the name to be used without generating any code.</p>\n<p><code>argc</code> is nice to have, because otherwise many programs would need to walk thorugh the parameters to get the count. Also, in many programming languages with arrays that have length, there isn't any <code>argc</code> parameter, there's just an array with the items.</p>\n", "LastEditorUserId": "1717300", "LastActivityDate": "2013-09-04T05:42:43.057", "Score": "6", "CreationDate": "2013-09-01T08:55:01.323", "ParentId": "18547114", "CommentCount": "2", "LastEditDate": "2013-09-04T05:42:43.057", "OwnerUserId": "1717300"}, "bq_ids": {"n4140": {"so_18547114_18547129_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 7146}, "so_18547114_18547129_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 7146}}, "n3337": {"so_18547114_18547129_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 6890}, "so_18547114_18547129_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6890}}, "n4659": {"so_18547114_18547129_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 8647}, "so_18547114_18547129_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 8647}}}, "18548159": {"Id": "18548159", "PostTypeId": "2", "Body": "<p>It's for historical reasons, and compatibility with old code. Originally, there was not a guarantee that there would exist a null pointer as the last element of the argv array. But argc has <em>always</em> existed.</p>\n", "LastEditorUserId": "1856694", "LastActivityDate": "2013-08-31T12:55:12.827", "Score": "17", "CreationDate": "2013-08-31T12:31:57.667", "ParentId": "18547114", "CommentCount": "2", "LastEditDate": "2013-08-31T12:55:12.827", "OwnerUserId": "1856694"}, "18547114": {"ViewCount": "4964", "Body": "<p>It seems that the <code>argv[argc]</code> is always <code>NULL</code>, so I think we can traverse the argument list without <code>argc</code>. A single <code>while</code> loop will do this.</p>\n<p>If there is always a <code>NULL</code> at the end of <code>argv</code>, why do we need an <code>argc</code>?</p>\n", "AcceptedAnswerId": "18547129", "Title": "Why do we need argc while there is always a null at the end of argv?", "CreationDate": "2013-08-31T10:26:52.503", "Id": "18547114", "CommentCount": "9", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2013-09-03T19:19:50.483", "LastEditorUserId": "1350209", "LastActivityDate": "2013-09-04T05:42:43.057", "Score": "106", "OwnerUserId": "1365960", "Tags": "<c++><c><main>", "AnswerCount": "4"}, "18548359": {"Id": "18548359", "PostTypeId": "2", "Body": "<p>Yes, <code>argv[argc]</code> is guaranteed to be a null pointer. <code>argc</code> is used for convenience.</p>\n<p>Quoting the official explanation from C99 Rationale, note the words <strong>redundant check</strong>:</p>\n<blockquote>\n<h3><a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf\">Rationale for International Standard \u2014 Programming Languages \u2014 C</a> \u00a75.1.2.2.1 <em>Program startup</em></h3>\n<p id=\"so_18547114_18548359_0\">The specification of <code>argc</code> and <code>argv</code> as arguments to <code>main</code> recognizes extensive prior practice. <code>argv[argc]</code> is required to be a null pointer to provide a redundant check for the end of the list, also on the basis of common practice. </p>\n</blockquote>\n", "LastEditorUserId": "1009479", "LastActivityDate": "2013-09-03T07:26:50.423", "Score": "41", "CreationDate": "2013-08-31T12:53:11.237", "ParentId": "18547114", "CommentCount": "0", "LastEditDate": "2013-09-03T07:26:50.423", "OwnerUserId": "1009479"}});