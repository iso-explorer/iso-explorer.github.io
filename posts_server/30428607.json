post_cb({"bq_ids": {"n4140": {"so_30428607_30428700_1": {"section_id": 653, "quality": 0.9814814814814815, "length": 53}}, "n3337": {"so_30428607_30428700_1": {"section_id": 643, "quality": 0.9814814814814815, "length": 53}}, "n4659": {"so_30428607_30428700_1": {"section_id": 681, "quality": 0.9814814814814815, "length": 53}}}, "30428756": {"ParentId": "30428607", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You can't declare an operator overloaded function that takes pointers as arguments.<br>\nConsider doing this instead:  </br></p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct strDum {\n    int a;\n    int b;\n};\n\ntemplate &lt;typename T&gt;\nbool operator!= (strDum const&amp; p, T const&amp; number) {\n    return p.b != number;\n}\n\n//may want to include other operators like == as well\n\nint main(void) {\n\n    strDum *test = new strDum;\n    if (*test != 0){\n        // data member did not equal zero ...\n    }\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "908939", "LastEditorUserId": "908939", "LastEditDate": "2015-05-24T21:59:50.323", "Id": "30428756", "Score": "0", "CreationDate": "2015-05-24T21:56:31.577", "LastActivityDate": "2015-05-24T21:59:50.323"}, "30428607": {"CommentCount": "4", "ViewCount": "87", "PostTypeId": "1", "LastEditorUserId": "3337677", "CreationDate": "2015-05-24T21:37:24.063", "LastActivityDate": "2015-05-24T22:21:53.543", "Title": "Strange compile error when overloading operator !=", "AcceptedAnswerId": "30428756", "LastEditDate": "2015-05-24T22:21:53.543", "Id": "30428607", "Score": "0", "Body": "<p>I have created my own version of <code>operator !=</code> so that I can use <code>p != NULL</code> instead of <code>p-&gt;b == 0</code>.  However, when compiling it (g++ v4.7.3 on Ubuntu 12.04), I get the error:</p>\n<pre><code>$ g++ -std=c++11 te2b.cc\nte2b.cc:8:41: error: \u2018bool operator!=(strDum*, void*)\u2019 must have an argument of class or enumerated type\n</code></pre>\n<p>Here is the code snippet:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nstruct strDum {\n    int a;\n    int b;\n};\nbool operator!= (strDum *p, void *unused) {\n    return p-&gt;b != 0;\n}\n\nint main(void) {\n    strDum *x = (strDum*) malloc(sizeof(strDum) * 4);\n    x[0].a = 10; x[0].b = 20;\n    x[1].a = 100; x[1].b = 200;\n    x[2].a = 1000; x[2].b = 0;\n    strDum *y;\n    for (y=x; y!= NULL; y++) {\n        printf(\"%5d %5d\\n\", y-&gt;a, y-&gt;b);\n    }\n    return 0;\n}\n</code></pre>\n<p>Any ideas?  </p>\n<p>By the way, I prefer <code>p != NULL</code> to <code>p-&gt;b == 0</code> because the structure strDum and the criteria may change frequently (<code>p != NULL</code> may become <code>p-&gt;c == 0</code>)</p>\n<p><strong>UPDATE1</strong></p>\n<p>As the declaration <code>bool operator!= (strDum *p, void *unused)</code> shows,  p is only going to be compared with \"NULL\". </p>\n", "Tags": "<c++>", "OwnerUserId": "3337677", "AnswerCount": "2"}, "30428700": {"ParentId": "30428607", "CommentCount": "1", "Body": "<p>You can not declare an operator which only takes pointers as arguments. From the standard:</p>\n<blockquote>\n<p id=\"so_30428607_30428700_0\"><strong>13.5.6 Overloaded operators [over.oper]</strong></p>\n<p id=\"so_30428607_30428700_1\">An operator function shall either be a non-static member function or\n  be a non-member function that <strong>has at least one parameter whose type is\n  a class, a reference to a class, an enumeration, or a reference to an\n  enumeration.</strong> It is not possible to change the precedence, grouping, or\n  number of operands of operators. The meaning of the operators\n  = , (unary) &amp; , and , (comma), predefined for each type, can be changed for specific class and enumeration types by defining operator\n  functions that implement these operators. Operator functions are\n  inherited in the same manner as other base class functions.</p>\n</blockquote>\n", "OwnerUserId": "1593297", "PostTypeId": "2", "Id": "30428700", "Score": "4", "CreationDate": "2015-05-24T21:49:19.623", "LastActivityDate": "2015-05-24T21:49:19.623"}});