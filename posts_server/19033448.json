post_cb({"19033546": {"Id": "19033546", "PostTypeId": "2", "Body": "<p>Your address space is broken up into segments you can access, and segments you can't.</p>\n<p><code>&amp;a</code> is the address of <code>a</code>, which is in your address space. <code>*p</code> is not.</p>\n", "LastActivityDate": "2013-09-26T16:21:23.797", "CommentCount": "0", "CreationDate": "2013-09-26T16:21:23.797", "ParentId": "19033448", "Score": "1", "OwnerUserId": "23771"}, "19033481": {"Id": "19033481", "PostTypeId": "2", "Body": "<p>You need to allocate a block of memory (e.g., using <code>malloc()</code>) before you can use that block of memory.\nIf you access a byte that was not allocated, you'll receive SIG_SEGV (segmentation fault). If you are lucky enough that the address is inside an allocated memory block, usually there's no problem accessing it.</p>\n", "LastActivityDate": "2013-09-26T16:18:36.147", "CommentCount": "0", "CreationDate": "2013-09-26T16:18:36.147", "ParentId": "19033448", "Score": "0", "OwnerUserId": "2131505"}, "19037004": {"Id": "19037004", "PostTypeId": "2", "Body": "<p>As far as I can tell this is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> since this requires an <em>Lvalue-to-rvalue conversion</em> if we first look at the draft C++ standard section <code>5.3.1</code> <em>Unary Operators</em> paragraph <em>1</em> says(emphasis mine):</p>\n<blockquote>\n<p id=\"so_19033448_19037004_0\">The unary * operator performs indirection: the expression to which it is applied shall be a pointer to an object type, or a pointer to a function type and the <strong>result is an lvalue</strong> referring to the object or function to which the expression points. [...]</p>\n</blockquote>\n<p>so the result of <code>*p</code> is an <em>lvalue</em> but since it will be converted to an <em>rvalue</em> we now look at section <code>4.1</code> <em>Lvalue-to-rvalue conversion</em> paragraph <em>1</em> it says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19033448_19037004_1\">[...]<strong>If the object to which the glvalue refers is not an object of type T</strong> and is not an object of a type derived from T, <strong>or if the object is uninitialized</strong>, a program that necessitates <strong>this conversion has undefined behavior</strong>.[...]</p>\n</blockquote>\n<p>So if <code>0x12345678</code> does not contain an <code>int</code> then this is undefined.</p>\n<p>In general the operating system will not allow a process to access an address not allocated to you process and in most <em>Unix-like</em> systems this will cause a segmentation fault.</p>\n", "LastActivityDate": "2013-09-26T19:29:00.233", "CommentCount": "0", "CreationDate": "2013-09-26T19:29:00.233", "ParentId": "19033448", "Score": "0", "OwnerUserId": "1708801"}, "bq_ids": {"n4140": {"so_19033448_19037004_0": {"length": 19, "quality": 0.95, "section_id": 6064}, "so_19033448_19037004_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 5768}}, "n3337": {"so_19033448_19037004_0": {"length": 19, "quality": 0.95, "section_id": 5832}, "so_19033448_19037004_1": {"length": 14, "quality": 1.0, "section_id": 5}}, "n4659": {"so_19033448_19037004_0": {"length": 18, "quality": 0.9, "section_id": 7560}, "so_19033448_19037004_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 7225}}}, "19033448": {"ViewCount": "1015", "Body": "<p>I'm trying to learn pointers by creating a script that allows me to read the memory from a given location. </p>\n<pre><code># include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n  int *p, a=5;\n  p=(int*)0x12345678;\n  cout &lt;&lt; &amp;a &lt;&lt; \"\\n\";\n  cout &lt;&lt; *p &lt;&lt; \"\\n\";  \n}\n</code></pre>\n<p>The first <code>cout</code> gives <code>0xbfe08368</code>. The second <code>cout</code> results in the following error:</p>\n<pre><code>\"segmentation fault, core dumped\"\n</code></pre>\n<p>which I understand means that the data can't be read from that memory address. Why is that? Is whatever data allocated there not an int? I've also tried <code>p = (char*)0x12345678</code>, and <em>float</em>, but I still get the same result. How to make it work?</p>\n", "Title": "Attempt to read from a specific memory address", "CreationDate": "2013-09-26T16:16:35.850", "LastActivityDate": "2013-09-27T12:23:31.640", "CommentCount": "5", "LastEditDate": "2013-09-27T12:23:31.640", "PostTypeId": "1", "LastEditorUserId": "1708801", "Id": "19033448", "Score": "0", "OwnerUserId": "2812393", "Tags": "<c++><segmentation-fault>", "AnswerCount": "4"}, "19033523": {"Id": "19033523", "PostTypeId": "2", "Body": "<p>If you get a segfault it means that part of the address space hasn't been allocated by the system to your program (which is not the same as your program allocating memory for an object).</p>\n<p>System-wide memory gets allocated to your program whole pages at a time (typically 4kb), and in turn <code>malloc/new</code> use those memory pages to allocate their own memory blocks (which the system knows nothing about).</p>\n<p>Keywords for more information / research on your part are: <em>virtual address space</em> / <em>paging</em>.</p>\n", "LastEditorUserId": "2070725", "LastActivityDate": "2013-09-26T16:27:23.673", "Score": "1", "CreationDate": "2013-09-26T16:20:23.280", "ParentId": "19033448", "CommentCount": "0", "OwnerUserId": "2070725", "LastEditDate": "2013-09-26T16:27:23.673"}});