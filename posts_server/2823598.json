post_cb({"bq_ids": {"n4140": {"so_2823598_2823624_0": {"length": 24, "quality": 0.7272727272727273, "section_id": 39}}, "n3337": {"so_2823598_2823624_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 36}}, "n4659": {"so_2823598_2823624_0": {"length": 24, "quality": 0.7272727272727273, "section_id": 39}}}, "2823598": {"ViewCount": "313", "Body": "<p>I'm wondering if anyone can explain the following to me:  If I write</p>\n<pre><code>int i = 0;\nfloat* pf = i;\n</code></pre>\n<p>I get a compile error (gcc 4.2.1):</p>\n<pre><code>error: invalid conversion from \u2018int\u2019 to \u2018float*\u2019\n</code></pre>\n<p>Makes sense - they are obviously two completely different types.  But if instead I write</p>\n<pre><code>const int i = 0;\nfloat* pf = i;\n</code></pre>\n<p>It compiles without error.  Why should the 'const' make a difference on the right hand side of the assignment?  Isn't part of the idea of the 'const' keyword to be able to enforce type constraints for constant values?</p>\n<p>Any explanation I have been able to come up with feels kind of bogus.  And none of my explanations also explain the fact that</p>\n<pre><code>const int i = 1;\nfloat* pf = i;\n</code></pre>\n<p>fails to compile.  Can anyone offer an explanation?</p>\n", "Title": "Assigning a pointer variable to a const int in C++?", "CreationDate": "2010-05-12T23:54:26.940", "LastActivityDate": "2010-05-13T00:04:57.537", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Id": "2823598", "Score": "9", "OwnerUserId": "322544", "Tags": "<c++><pointers><const>", "AnswerCount": "1"}, "2823624": {"Id": "2823624", "PostTypeId": "2", "Body": "<p>Your second example simply happens to be covered by the conversion rules as specified in <em>\u00a74.10/1</em> (C++03):</p>\n<blockquote>\n<p id=\"so_2823598_2823624_0\">A null pointer constant is an integral constant expression (5.19) rvalue of integer type that evaluates to zero. A null pointer constant can be converted to a pointer type; the result is the null pointer value of that type and is distinguishable from every other value of pointer to object or pointer to function type.</p>\n</blockquote>\n", "LastActivityDate": "2010-05-13T00:00:55.720", "CommentCount": "0", "CreationDate": "2010-05-13T00:00:55.720", "ParentId": "2823598", "Score": "10", "OwnerUserId": "168225"}});