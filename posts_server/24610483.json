post_cb({"24611006": {"ParentId": "24610483", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As usual, the compiler is just trying to keep you from shooting yourself in the foot. That's why you cannot just pass an <code>int</code> to a function expecting an enum. The compiler will rightfully complain, because the <code>int</code> might not match any valid <code>enum</code> value.</p>\n<p>By adding the cast you basically tell the compiler <em>'Shut up, I know what I am doing'</em>. What you are communicating here is that you are sure that the value you pass in is 'within the range of the enumeration values'. And you better make sure that is the case, or you are on a one-way trip to undefined-behavior-land.</p>\n<p>If this is so dangerous, then why doesn't the compiler add a runtime check for the integer value? The reason is, as so often with C++, performance. Maybe you just <em>know</em> from the surrounding program logic that the int value will always be valid and you absolutely cannot waste <em>any</em> time on stupid runtime checks. From a language-design point of view, this might not be the most reasonable default to chose, especially when your goal is writing robust code. But that's just how C++ works: A developer should never have to pay for functionality that they might not want to use.</p>\n", "OwnerUserId": "577603", "LastEditorUserId": "577603", "LastEditDate": "2014-07-07T12:54:19.450", "Id": "24611006", "Score": "3", "CreationDate": "2014-07-07T12:49:18.967", "LastActivityDate": "2014-07-07T12:54:19.450"}, "24610483": {"CommentCount": "3", "ViewCount": "1441", "CreationDate": "2014-07-07T12:19:25.507", "LastActivityDate": "2014-07-07T12:54:19.450", "Title": "static_cast on integer to enum conversion", "AcceptedAnswerId": "24611006", "PostTypeId": "1", "Id": "24610483", "Score": "1", "Body": "<p>There is some function that takes in an enum as argument</p>\n<pre><code>void myfunc(myEnum input);\n</code></pre>\n<p>As I understand, if I have to give an integer to this function, it is advised to explicitly cast it to enum, the reason being all integers may not be valid enum values.</p>\n<p>As per <strong><a href=\"http://msdn.microsoft.com/en-us/library/c36yw7x9%28v=vs.120%29.aspx\" rel=\"nofollow\">MSDN</a></strong> </p>\n<blockquote>\n<p id=\"so_24610483_24610483_0\">\"The static_cast operator can explicitly convert an integral value to\n  an enumeration type. If the value of the integral type does not fall\n  within the range of enumeration values, the resulting enumeration\n  value is undefined.\"</p>\n</blockquote>\n<p>and as per the C++ standards <strong>5.2.9 Static cast -&gt; 10</strong></p>\n<blockquote>\n<p id=\"so_24610483_24610483_1\">\"A value of integral or enumeration type can be explicitly converted\n  to an enumeration type. The value is unchanged if the original value\n  is within the range of the enumeration values (7.2). Otherwise, the\n  resulting value is unspecified (and might not be in that range).\"</p>\n</blockquote>\n<p>So what's the point using <code>static_cast</code> in this scenario? Is there some option that would raise exceptions on values outside the enum range (other than writing explicit code for that)?</p>\n", "Tags": "<c++><casting><enums><static-cast>", "OwnerUserId": "278910", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24610483_24610483_1": {"section_id": 6036, "quality": 0.9583333333333334, "length": 23}, "so_24610483_24610483_0": {"section_id": 6036, "quality": 0.5217391304347826, "length": 12}}, "n3337": {"so_24610483_24610483_1": {"section_id": 5804, "quality": 0.9583333333333334, "length": 23}, "so_24610483_24610483_0": {"section_id": 5804, "quality": 0.5217391304347826, "length": 12}}, "n4659": {"so_24610483_24610483_1": {"section_id": 7535, "quality": 0.8333333333333334, "length": 20}}}});