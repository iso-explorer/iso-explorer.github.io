post_cb({"28338958": {"Id": "28338958", "PostTypeId": "2", "Body": "<p>13.3.3.2/2</p>\n<blockquote>\n<p id=\"so_28338760_28338958_0\">When comparing the basic forms of implicit conversion sequences (as\n  defined in 13.3.3.1)</p>\n<p id=\"so_28338760_28338958_1\">a standard conversion sequence (13.3.3.1.1) is a better conversion\n  sequence than a user-defined con- version sequence or an ellipsis\n  conversion sequence, and</p>\n<p id=\"so_28338760_28338958_2\">a user-defined conversion sequence (13.3.3.1.2) is a better conversion\n  sequence than an ellipsis conver- sion sequence (13.3.3.1.3).</p>\n</blockquote>\n<p>13.3.3.1/3</p>\n<blockquote>\n<p id=\"so_28338760_28338958_3\">A well-formed implicit conversion sequence is one of the following\n  forms: \u2014 a standard conversion sequence (13.3.3.1.1),</p>\n<p id=\"so_28338760_28338958_4\">\u2014 a user-defined conversion sequence (13.3.3.1.2), or</p>\n<p id=\"so_28338760_28338958_5\">\u2014 an ellipsis conversion sequence (13.3.3.1.3).</p>\n</blockquote>\n<p>13.3.3.1/8</p>\n<blockquote>\n<p id=\"so_28338760_28338958_6\">If no conversions are required to match an argument to a parameter\n  type, the implicit conversion sequence is the standard conversion\n  sequence consisting of the identity conversion (13.3.3.1.1).</p>\n</blockquote>\n<p>13.3.3.1.2/1</p>\n<blockquote>\n<p id=\"so_28338760_28338958_7\">A user-defined conversion sequence consists of an initial standard\n  conversion sequence followed by a user- defined conversion (12.3)\n  followed by a second standard conversion sequence. If the user-defined\n  conversion is specified by a conversion function (12.3.2), the initial\n  standard conversion sequence converts the source type to the implicit\n  object parameter of the conversion function.</p>\n</blockquote>\n<p>There are two variants for compiler, if compare operator is defined:</p>\n<p>1) Let </p>\n<pre><code>IF = Identity(f)\n</code></pre>\n<p>Call:</p>\n<pre><code>IF.operator &lt;(int)\n</code></pre>\n<p>2) Let:</p>\n<pre><code>IF = Identity(f);\nconverted_int = Identity(IF.operator int());\n</code></pre>\n<p>Call:</p>\n<pre><code>operator &lt; (converted_int, int);\n</code></pre>\n<p>Implicit-conversion sequence is better than user-conversion sequence.\nThere are two many words in standard about overload resolution for quotes, if you want you can read par 13.3, or just 13.3.3[over.best.ics].</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-02-05T08:33:12.340", "Score": "3", "CreationDate": "2015-02-05T08:04:10.977", "ParentId": "28338760", "CommentCount": "8", "OwnerUserId": "1498580", "LastEditDate": "2015-02-05T08:33:12.340"}, "bq_ids": {"n4140": {"so_28338760_28338958_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 638}, "so_28338760_28338958_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 638}, "so_28338760_28338958_3": {"length": 9, "quality": 0.9, "section_id": 608}, "so_28338760_28338958_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 613}, "so_28338760_28338958_7": {"length": 29, "quality": 0.8787878787878788, "section_id": 620}, "so_28338760_28338958_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 638}}, "n3337": {"so_28338760_28338958_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 628}, "so_28338760_28338958_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 628}, "so_28338760_28338958_3": {"length": 9, "quality": 0.9, "section_id": 598}, "so_28338760_28338958_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 603}, "so_28338760_28338958_7": {"length": 29, "quality": 0.8787878787878788, "section_id": 610}, "so_28338760_28338958_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 628}}, "n4659": {"so_28338760_28338958_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 666}, "so_28338760_28338958_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 666}, "so_28338760_28338958_3": {"length": 9, "quality": 0.9, "section_id": 634}, "so_28338760_28338958_6": {"length": 14, "quality": 0.9333333333333333, "section_id": 639}, "so_28338760_28338958_7": {"length": 29, "quality": 0.8787878787878788, "section_id": 646}, "so_28338760_28338958_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 666}}}, "28338760": {"ViewCount": "120", "Body": "<p>Consider the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Foo {\npublic:\n    int k;\n\n    operator int() {\n        cout &lt;&lt; \"convert int\" &lt;&lt; endl;\n        return k;\n    }\n\n#if USE_COMPARE\n    bool operator &lt; (int rhs) {\n        cout &lt;&lt; \"compare with\" &lt;&lt; endl;\n        return (k &lt; rhs);\n    }\n#endif\n};\n\nint main()\n{\n    Foo f;\n    f.k = 3;\n    int m = 5;\n\n\n    if (f &lt; m) {\n        cout &lt;&lt; 1 &lt;&lt; endl;\n        return 1;\n    }\n    cout &lt;&lt; 0 &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>When <code>USE_COMPARE</code> is defined, the comparison of <code>if (f&lt;m)</code> will use the compare operator overload.  If <code>USE_COMPARE</code> is not defined, it will convert <code>f</code> from <code>Foo</code> to <code>int</code>, and then do the integer compare.  It seems to me that the compare operator overload is in higher priority than the conversion operator.  Could any one confirm this in the C++ standard point of view?</p>\n<p>Yet I think it's nature that the compare operator should take priority. But please answer the question in the perspective of C++ standard.</p>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "28338958", "Title": "C++ priority of compare operator overload vs conversion operator", "CreationDate": "2015-02-05T07:51:13.673", "Id": "28338760", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-02-05T08:33:12.340", "Score": "4", "OwnerUserId": "4007560", "Tags": "<c++><operator-overloading><operator-precedence>", "AnswerCount": "1"}});