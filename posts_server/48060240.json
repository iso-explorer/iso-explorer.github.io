post_cb({"bq_ids": {"n4140": {"so_48060240_48060240_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 5795}, "so_48060240_48060310_1": {"length": 14, "quality": 1.0, "section_id": 7239}}, "n3337": {"so_48060240_48060240_0": {"length": 24, "quality": 0.8571428571428571, "section_id": 5568}, "so_48060240_48060310_1": {"length": 14, "quality": 1.0, "section_id": 6983}}, "n4659": {"so_48060240_48060240_0": {"length": 28, "quality": 1.0, "section_id": 7254}, "so_48060240_48060310_1": {"length": 14, "quality": 1.0, "section_id": 8748}}}, "48060240": {"ViewCount": "98", "Body": "<p>Compiler generates code assuming that an <code>int</code> can be aliased by an <code>unsigned int</code>. The folowing code:</p>\n<pre><code>int f(int&amp; a, unsigned int&amp; b){\n    a=10;\n    b=12;\n    return a;\n}\nint f(int&amp; a, double&amp; b){\n    a=10;\n    b=12;\n    return a;\n}\n</code></pre>\n<p>generates the folowing assembly, using Clang5 (similar code is produced by GCC or ICC):</p>\n<pre><code>f(int&amp;, unsigned int&amp;): # @f(int&amp;, unsigned int&amp;)\n  mov dword ptr [rdi], 10\n  mov dword ptr [rsi], 12\n  mov eax, dword ptr [rdi]    #return value must be loaded since rdi might equal rsi\n  ret\nf(int&amp;, double&amp;): # @f(int&amp;, double&amp;)\n  mov dword ptr [rdi], 10\n  movabs rax, 4622945017495814144\n  mov qword ptr [rsi], rax\n  mov eax, 10        #return value is a direct value.\n  ret\n</code></pre>\n<p>In the example above, in the first overload <code>f</code> the return value (in <code>eax</code> register) is either 10 or 12 if <code>b</code> and <code>a</code> refer to the same object. In the second overload, <code>a</code> and <code>b</code> cannot refer to the same object so the return value is always 10.</p>\n<p>The strict aliasing rule is expressed by this paragraph of the C++ standard, <a href=\"http://eel.is/c++draft/intro.object#8\" rel=\"nofollow noreferrer\">[intro.object]/8</a>:</p>\n<blockquote>\n<p id=\"so_48060240_48060240_0\">[...] Two objects <em>a</em> and <em>b</em> with overlapping lifetimes that are not bit-fields may have the same address if one is nested within the other, or if at least one is a base class subobject of zero size and they are of different types; otherwise, they have distinct addresses.</p>\n</blockquote>\n<p>So according to this rule, an <code>int</code> cannot be aliased by an <code>unsigned int</code>.</p>\n<p>Questions:</p>\n<ol>\n<li><p>Is there an exception to this rule in the C++ standard that would allow aliasing of <code>int</code> by <code>unsigned int</code>?</p></li>\n<li><p>If not, why all compilers assume this possibility?</p></li>\n</ol>\n", "AcceptedAnswerId": "48060310", "Title": "Can an int be aliased as an unsigned int?", "CreationDate": "2018-01-02T11:34:44.743", "LastActivityDate": "2018-01-02T11:54:03.440", "CommentCount": "3", "LastEditDate": "2018-01-02T11:54:03.440", "PostTypeId": "1", "LastEditorUserId": "5632316", "Id": "48060240", "Tags": "<c++><language-lawyer><strict-aliasing>", "Score": "3", "OwnerUserId": "5632316", "ClosedDate": "2018-01-02T11:46:43.373", "AnswerCount": "1"}, "48060310": {"Id": "48060310", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48060240_48060310_0\">Is there an exception to this rule in the C++ standard that would allow aliasing of int by unsigned int?</p>\n</blockquote>\n<p>Yes, it's <a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.lval#8\" rel=\"nofollow noreferrer\">[basic.lval]/8</a>:</p>\n<blockquote>\n<p id=\"so_48060240_48060310_1\">If a program attempts to access the stored value of an object through\n  a glvalue of other than one of the following types the behavior is\n  undefined:</p>\n<ul>\n<li>a type that is the signed or unsigned type corresponding to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2018-01-02T11:39:00.763", "Score": "4", "CreationDate": "2018-01-02T11:39:00.763", "ParentId": "48060240", "CommentCount": "0", "OwnerUserId": "817643"}});