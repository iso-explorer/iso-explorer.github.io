post_cb({"19347791": {"Id": "19347791", "PostTypeId": "2", "Body": "<p>The <em>declaration</em> of special member functions (default constructors, copy constructor, etc.) always happens as part of the class definition. So both of your examples are the same with regards to <code>Base</code> having a declared default constructor.</p>\n<p>A separate question is when a special member function is implicitly <em>defined</em>. This is usually deferred until an actual ODR-use of the member function.</p>\n", "LastActivityDate": "2013-10-13T16:59:27.260", "CommentCount": "0", "CreationDate": "2013-10-13T16:59:27.260", "ParentId": "19347729", "Score": "3", "OwnerUserId": "596781"}, "bq_ids": {"n4140": {"so_19347729_19347782_0": {"length": 18, "quality": 1.0, "section_id": 369}, "so_19347729_19347782_1": {"length": 21, "quality": 1.0, "section_id": 370}}, "n3337": {"so_19347729_19347782_0": {"length": 18, "quality": 1.0, "section_id": 359}, "so_19347729_19347782_1": {"length": 21, "quality": 1.0, "section_id": 360}}, "n4659": {"so_19347729_19347782_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 381}, "so_19347729_19347782_1": {"length": 21, "quality": 1.0, "section_id": 384}}}, "19347729": {"ViewCount": "340", "Body": "<p>I know that compiler will generate a default constructor if we don't declare it.</p>\n<p>And \"when\" is the point I got confused.</p>\n<p>A:</p>\n<pre><code>class Base {};\nint main()\n{\n    return 0;   \n}\n</code></pre>\n<p>B:</p>\n<pre><code>class Base {};\nint main()\n{\n    Base b;   // Declare a Base object.\n    return 0;\n}\n</code></pre>\n<p>The A and B difference is only that B declares a real object of Base.\nAt my point, only when we declare a real object and the compiler finds no constructors does it generate a default constructor.</p>\n<p>My question is that:</p>\n<ol>\n<li><p>Will code fragment A generate a default constructor of Base?</p></li>\n<li><p>Does any tool help to check the result? I use Visual Studio 2010, and /d1 reportAllClassLayout seems useless. </p></li>\n</ol>\n", "AcceptedAnswerId": "19347782", "Title": "\"When\" does the compiler implicitly declare a default constructor?", "CreationDate": "2013-10-13T16:52:26.790", "Id": "19347729", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-10-13T19:11:38.820", "LastEditorUserId": "815724", "LastActivityDate": "2013-10-13T19:11:38.820", "Score": "4", "OwnerUserId": "1357672", "Tags": "<c++><visual-studio-2010><constructor>", "AnswerCount": "2"}, "19347782": {"Id": "19347782", "PostTypeId": "2", "Body": "<p>Quoting C++11.</p>\n<p><code>[class.ctor]\u00a75</code>:</p>\n<blockquote>\n<p id=\"so_19347729_19347782_0\">A default constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared as defaulted (8.4).</p>\n</blockquote>\n<p><code>[class.ctor]\u00a76</code>:</p>\n<blockquote>\n<p id=\"so_19347729_19347782_1\">A default constructor that is defaulted and not defined as deleted is <em>implicitly defined</em> when it is odr-used (3.2) to create an object of its class type (1.8) or when it is explicitly defaulted after its first declaration.</p>\n</blockquote>\n<p>This means that it's declared when your class is defined, and defined (as <code>inline</code>) when it's first used in the given translation unit.</p>\n<p>In your case, this means that code fragment <code>A</code> will contain a declaration (but not a definition) of the default constructor, while fragment <code>B</code> will contain both.</p>\n", "LastActivityDate": "2013-10-13T16:58:35.667", "CommentCount": "2", "CreationDate": "2013-10-13T16:58:35.667", "ParentId": "19347729", "Score": "6", "OwnerUserId": "1782465"}});