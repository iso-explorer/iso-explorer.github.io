post_cb({"bq_ids": {"n4140": {"so_21617975_21618411_0": {"length": 7, "quality": 0.875, "section_id": 744}}, "n3337": {"so_21617975_21618411_0": {"length": 7, "quality": 0.875, "section_id": 733}}, "n4659": {"so_21617975_21618411_0": {"length": 7, "quality": 0.875, "section_id": 802}}}, "21618411": {"Id": "21618411", "PostTypeId": "2", "Body": "<p>I decided this was interesting enough (an outright bug in the standard that lasted 13 years) to add as an answer.</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/open/n2356/lib-containers.html#lib.associative.requirements\" rel=\"nofollow\">Section 23.1.2 of the C++03 specification</a> says, concerning the \"hinted\" version <code>insert(p,t)</code>, that the complexity is:</p>\n<blockquote>\n<p id=\"so_21617975_21618411_0\">logarithmic in general, but amortized constant if <strong>t</strong> is inserted right after <strong>p</strong></p>\n</blockquote>\n<p>What this means is that if you insert <code>n</code> elements in <em>sorted</em> order, providing the correct hint each time, then the total time will be <code>O(n)</code>, not <code>O(n log n)</code>. Even though some individual insertions will take logarithmic time, the average time per insertion will still be constant.</p>\n<p>C++11 finally fixed the wording to read \"right before <strong>p</strong>\" instead of \"right after <strong>p</strong>\", which is almost certainly what was meant in the first place... And the corrected wording actually makes it possible to use the \"hint\" when inserting elements in either forward or reverse order (i.e. passing <code>container.end()</code> or <code>container.begin()</code> as the hint).</p>\n", "LastActivityDate": "2014-02-07T02:53:48.623", "CommentCount": "4", "CreationDate": "2014-02-07T02:53:48.623", "ParentId": "21617975", "Score": "2", "OwnerUserId": "768469"}, "21617975": {"ViewCount": "150", "Body": "<p>I have a vector of  pairs ordered by key in decrementing order.\nI want to efficiently transform it to a map.\nThis is what I currently do:</p>\n<pre><code>int size = vect.size();\nfor (int i = 0; i &lt; size; i++)\n    map[vect[i].key] = vect[i];\n</code></pre>\n<p>Is there a point in traversing the vector backwards and inserting values with lowest keys first? I'm not sure how insert works internally and whether it even matters...</p>\n<p>How about using map constructor and just passing the vector into that instead of looping? This would be recreating the map, vs doing map.clear() that I currently do between runs.</p>\n<p>I read a few other SO answers about [key]=val being about the same as insert() but none deal with insertion order.</p>\n", "AcceptedAnswerId": "21618111", "Title": "Efficiently inserting values into a map. Better incrementing or decrementing keys?", "CreationDate": "2014-02-07T02:08:30.923", "Id": "21617975", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2014-02-07T02:53:48.623", "Score": "2", "OwnerUserId": "1151202", "Tags": "<c++><stl>", "AnswerCount": "2"}, "21618111": {"Id": "21618111", "PostTypeId": "2", "Body": "<p><code>std::map</code> is usually implemented as <a href=\"http://en.wikipedia.org/wiki/Red%E2%80%93black_tree\" rel=\"nofollow\">Red-Black Tree</a>. Therefore, it doesn't really matter whether you increment or decrement the keys. It will still perform a search with <a href=\"http://en.wikipedia.org/wiki/Big_O_notation\" rel=\"nofollow\">O(log n)</a> complexity and rebalancing.</p>\n<p>What you can do to speed up your insertion is use either <a href=\"http://en.cppreference.com/w/cpp/container/map/insert\" rel=\"nofollow\">insert</a> or <a href=\"http://en.cppreference.com/w/cpp/container/map/emplace_hint\" rel=\"nofollow\">emplace_hint</a> with \"hint\", which is an iterator used as a suggestion as to where to insert the new element.</p>\n<p>Constructing map with a range won't make a difference.</p>\n<p>It is hard to recommend the best data structure for you without knowing details about the program  and data it handles. Generally, RB-tree is the best you can get for general case (and that's why it is an implementation of choice for <code>std::map</code>).</p>\n<p>Hope it helps. Good Luck!</p>\n", "OwnerDisplayName": "user405725", "LastActivityDate": "2014-02-07T02:21:06.937", "Score": "2", "CreationDate": "2014-02-07T02:21:06.937", "ParentId": "21617975", "CommentCount": "4"}});