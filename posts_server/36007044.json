post_cb({"36007044": {"ViewCount": "1324", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/data\">cppreference</a> has this note for <code>std::vector::data</code>:</p>\n<blockquote>\n<p id=\"so_36007044_36007044_0\">Returns pointer to the underlying array serving as element storage. The pointer is such that range <code>[data(); data() + size())</code> <strong>is always a valid range, even if the container is empty.</strong></p>\n</blockquote>\n<p>What does \"valid range\" mean here exactly?  What will <code>data()</code> return if the vector is zero-length?</p>\n<p>Specifically, for a zero-length vector:</p>\n<ol>\n<li>Can <code>data()</code> ever be a null pointer?</li>\n<li>Can it be safely dereferenced? (Even if it points to junk.)</li>\n<li>Is it guaranteed to be different between two different (zero-length) vectors?</li>\n</ol>\n<p>I am working with a C library that takes arrays and won't allow a null pointer even for a zero-length array.  However, it does not actually dereference the array storage pointer if the array length is zero, it just checks whether it is <code>NULL</code>.  I want to make sure that I can safely pass <code>data()</code> to this C library, so the only relevant question is (1) above.  (2) and (3) are just out of curiosity in case a similar situation comes up.</p>\n<hr>\n<p><strong>Update</strong></p>\n<p>Based on comments that were not turned into answers, we can try the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main() {\n    vector&lt;int&gt; v;\n    cout &lt;&lt; v.data() &lt;&lt; endl;\n\n    v.push_back(1);\n    cout &lt;&lt; v.data() &lt;&lt; endl;\n\n    v.pop_back();\n    cout &lt;&lt; v.data() &lt;&lt; endl;\n\n    v.shrink_to_fit();\n    cout &lt;&lt; v.data() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>With my compiler it output:</p>\n<pre><code>0x0\n0x7f896b403300\n0x7f896b403300\n0x0\n</code></pre>\n<p>This shows that:</p>\n<ul>\n<li><p><code>data()</code> can indeed be a null pointer, thus the answers are (1) yes (2) no (3) no</p></li>\n<li><p>but it is not <em>always</em> a null pointer for a zero-size vector</p></li>\n</ul>\n<p>Yes, obviously I should have tried this before asking.</p>\n</hr>", "AcceptedAnswerId": "36007338", "Title": "What does vec.data() return if vec.size() == 0?", "CreationDate": "2016-03-15T09:20:04.327", "Id": "36007044", "CommentCount": "12", "LastEditDate": "2016-03-15T10:10:16.060", "PostTypeId": "1", "LastEditorUserId": "695132", "LastActivityDate": "2016-03-15T20:15:45.547", "Score": "27", "OwnerUserId": "695132", "Tags": "<c++><vector>", "AnswerCount": "3"}, "36007338": {"Id": "36007338", "PostTypeId": "2", "Body": "<p>Too long for a comment so posting here.</p>\n<p>I expected the iterators to be nullptr for an empty sequence so I tested it.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nvoid pr(std::vector&lt;int&gt;&amp; v){\n    std::cout &lt;&lt; &amp;*v.begin() &lt;&lt; \", \" &lt;&lt; &amp;*v.end() &lt;&lt; \"\\n\";\n} \n// technically UB, but for this experiment I don't feel too bad about it.\n// Thanks @Revolver    \nint main(int argc, char** argv) {\n    std::vector&lt;int&gt; v1;\n    std::vector&lt;int&gt; v2;\n\n    pr(v1);\n    pr(v2);\n\n    return 0;\n}\n</code></pre>\n<p>And this does indeed print</p>\n<pre><code>0, 0\n0, 0 \n</code></pre>\n<p>Now for an empty container the only reasonable operation for a valid range is <code>begin() == end()</code>. And no, junk can't be dereferenced so *v.begin() is not a concern. </p>\n", "LastEditorUserId": "451600", "LastActivityDate": "2016-03-15T20:15:45.547", "Score": "6", "CreationDate": "2016-03-15T09:32:37.320", "ParentId": "36007044", "CommentCount": "7", "OwnerUserId": "451600", "LastEditDate": "2016-03-15T20:15:45.547"}, "36007537": {"Id": "36007537", "PostTypeId": "2", "Body": "<p>From the standard:</p>\n<blockquote>\n<p id=\"so_36007044_36007537_0\"><strong>23.3.6.4</strong> <strong>[vector.data]</strong></p>\n<p id=\"so_36007044_36007537_1\">T* data() noexcept; </p>\n<p id=\"so_36007044_36007537_2\">const T* data() const noexcept; </p>\n<p id=\"so_36007044_36007537_3\">Returns: A pointer such that <strong>[data(),data() + size()) is a valid range</strong>. For a\n  non-empty vector, data() == &amp;front().</p>\n</blockquote>\n<p>So it's allowed to be null for an empty vector but not necessarily dereferencable nor unique.</p>\n", "LastEditorUserId": "1312406", "LastActivityDate": "2016-03-15T09:54:50.250", "Score": "5", "CreationDate": "2016-03-15T09:41:01.837", "ParentId": "36007044", "CommentCount": "2", "OwnerUserId": "1312406", "LastEditDate": "2016-03-15T09:54:50.250"}, "bq_ids": {"n4140": {"so_36007044_36007884_1": {"length": 10, "quality": 1.0, "section_id": 5560}, "so_36007044_36007537_3": {"length": 8, "quality": 0.6666666666666666, "section_id": 984}}, "n3337": {"so_36007044_36007884_1": {"length": 10, "quality": 1.0, "section_id": 5342}, "so_36007044_36007537_3": {"length": 8, "quality": 0.6666666666666666, "section_id": 969}}, "n4659": {"so_36007044_36007884_1": {"length": 10, "quality": 1.0, "section_id": 7007}, "so_36007044_36007537_3": {"length": 8, "quality": 0.6666666666666666, "section_id": 1047}}}, "36007884": {"Id": "36007884", "PostTypeId": "2", "Body": "<p>\"valid range\" is defined by [iterator.requirements.general]/7 (C++14):</p>\n<blockquote>\n<p id=\"so_36007044_36007884_0\">\"Range <code>[i,j)</code> is valid if and only if <code>j</code> is reachable from <code>i</code>\".  </p>\n</blockquote>\n<p>Luckily C++ defines that adding <code>0</code> to a null pointer yields a null pointer. So, is a null pointer <em>reachable</em> from a null pointer ?  This is defined  by point 6 of the same section:</p>\n<blockquote>\n<p id=\"so_36007044_36007884_1\">An iterator <code>j</code> is called <em>reachable</em> from an iterator <code>i</code> if and only if there is a finite sequence of applications of the expression <code>++i</code> that makes <code>i == j</code>.</p>\n</blockquote>\n<p>A zero-length sequence is a finite sequence, therefore <code>data()</code> may return a null pointer.</p>\n<p>Accordingly the answers to your questions are:</p>\n<blockquote id=\"so_36007044_36007884_2\">\n<ol>\n<li>Can <code>data()</code> ever be a null pointer?</li>\n</ol>\n</blockquote>\n<p><strong>Yes</strong></p>\n<blockquote id=\"so_36007044_36007884_3\">\n<ol start=\"2\">\n<li>Can it be safely dereferenced? (Even if it points to junk.)</li>\n</ol>\n</blockquote>\n<p><strong>No</strong></p>\n<blockquote id=\"so_36007044_36007884_4\">\n<ol start=\"3\">\n<li>Is it guaranteed to be different between two different (zero-length) vectors?</li>\n</ol>\n</blockquote>\n<p><strong>No</strong></p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2016-03-15T20:09:38.207", "Score": "21", "CreationDate": "2016-03-15T09:55:39.400", "ParentId": "36007044", "CommentCount": "7", "OwnerUserId": "1505939", "LastEditDate": "2016-03-15T20:09:38.207"}});