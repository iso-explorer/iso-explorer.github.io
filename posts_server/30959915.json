post_cb({"bq_ids": {"n4140": {"so_30959915_30959988_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 3308}, "so_30959915_30959988_2": {"length": 16, "quality": 0.8421052631578947, "section_id": 3308}, "so_30959915_30959988_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 3308}}, "n3337": {"so_30959915_30959988_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 3178}, "so_30959915_30959988_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 3178}, "so_30959915_30959988_2": {"length": 16, "quality": 0.8421052631578947, "section_id": 3178}}, "n4659": {"so_30959915_30959988_0": {"length": 43, "quality": 0.8775510204081632, "section_id": 4074}, "so_30959915_30959988_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 4074}, "so_30959915_30959988_2": {"length": 16, "quality": 0.8421052631578947, "section_id": 4074}}}, "30960015": {"Id": "30960015", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30959915_30960015_0\">Which compiler is right?</p>\n</blockquote>\n<p>Both compilers are right. <em>Brace-elision</em> is a feature that allows an aggregate to be initialized by a single pair of braces. Each member suboject is initialized with as many <em>initializer-clauses</em> as necessary. This is to allow a more convenient form of initialization.</p>\n<blockquote>\n<p id=\"so_30959915_30960015_1\">What's the reason that Clangs warns me?</p>\n</blockquote>\n<p>Clang is being helpful by warning you because while you are able to elide the braces, it isn't always clear how the aggregate will be initialized if you aren't careful. You have to be certain which initializer-clauses pertain to which member subobjects.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2015-06-21T04:15:37.013", "Score": "0", "CreationDate": "2015-06-20T23:57:42.590", "ParentId": "30959915", "CommentCount": "3", "OwnerUserId": "701092", "LastEditDate": "2015-06-21T04:15:37.013"}, "30959915": {"ViewCount": "448", "Body": "<p>When I compile the following piece of code with CLANG:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n\nint main() {\n  std::array&lt;int, 2&gt; a = {1, 2};\n  std::array&lt;int, 2&gt; b = {2, 1};\n  std::array&lt;int, 2&gt; c;\n  std::transform(a.begin(), a.end(), b.begin(), c.begin(), std::multiplies&lt;int&gt;());\n  for(auto &amp;&amp;i : c) std::cout &lt;&lt; i &lt;&lt; \" \";\n  std::cout &lt;&lt; std::endl;\n}\n</code></pre>\n<p>by issuing the command:</p>\n<blockquote>\n<p id=\"so_30959915_30959915_0\"><em>clang++ -std=c++14 -O2 -Wall -pedantic -pthread main.cpp</em></p>\n</blockquote>\n<p>It issues the warning:</p>\n<blockquote>\n<p id=\"so_30959915_30959915_1\"><em>warning: suggest braces around initialization of subobject\n  [-Wmissing-braces]</em></p>\n</blockquote>\n<p><a href=\"http://coliru.stacked-crooked.com/a/8928e269043d5f50\" rel=\"nofollow\"><strong>CLANG DEMO</strong></a></p>\n<p>However, GCC compiles this program with out issuing a warning at all.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/9fba77c24cd2eed0\" rel=\"nofollow\"><strong>GCC DEMO</strong></a></p>\n<h2>Q:</h2>\n<ol>\n<li>Which compiler is right?</li>\n<li>What's the reason that Clangs warns me?</li>\n</ol>\n", "Title": "Clang warns me when I aggregate initialize an array while gcc doesn't", "CreationDate": "2015-06-20T23:39:44.447", "LastActivityDate": "2015-06-21T04:15:37.013", "CommentCount": "3", "LastEditDate": "2015-06-20T23:54:27.017", "PostTypeId": "1", "LastEditorUserId": "2069064", "Id": "30959915", "Score": "2", "OwnerUserId": "2352671", "Tags": "<c++><c++11><gcc><clang><stdarray>", "AnswerCount": "2"}, "30959988": {"Id": "30959988", "PostTypeId": "2", "Body": "<p>In some cases, braces can be elided. This is one of those cases. The outer-most braces for initializing <code>a</code> and <code>b</code> are optional. It is syntactically correct either way - but it's clearer to just include them. Clang is just warning you (warning, not error) about this - it's a perfectly valid warning. And as <a href=\"https://stackoverflow.com/questions/30959915/clang-warns-me-when-i-aggrate-initialize-an-array-while-gcc-doesnt/30959988#comment49952545_30959915\">chris</a>, points out, with <code>-Wmissing-braces</code>, gcc issues the same warning. Ultimately, both compilers accept the code, which is correct; it is, after all, a valid program. That's all that matters. </p>\n<p>From [dcl.init.aggr]:</p>\n<blockquote>\n<p id=\"so_30959915_30959988_0\">Braces can be elided in an <em>initializer-list</em> as follows. If the <em>initializer-list</em> begins with a left brace, then\n  the succeeding <em>comma-separated</em> list of <em>initializer-clauses</em> initializes the members of a subaggregate; it is\n  erroneous for there to be more <em>initializer-clauses</em> than members. If, however, the <em>initializer-list</em> for a subaggregate\n  does not begin with a left brace, then only enough <em>initializer-clauses</em> from the list are taken to\n  initialize the members of the subaggregate; any remaining <em>initializer-clauses</em> are left to initialize the next\n  member of the aggregate of which the current subaggregate is a member. <em>[ Example:</em></p>\n<pre><code>float y[4][3] = {\n    { 1, 3, 5 },\n    { 2, 4, 6 },\n    { 3, 5, 7 },\n};\n</code></pre>\n<p id=\"so_30959915_30959988_1\">is a completely-braced initialization: <code>1</code>, <code>3</code>, and <code>5</code> initialize the first row of the array <code>y[0]</code>, namely <code>y[0][0]</code>,\n  <code>y[0][1]</code>, and <code>y[0][2]</code>. Likewise the next two lines initialize <code>y[1]</code> and <code>y[2]</code>. The initializer ends early and\n  therefore <code>y[3]</code>s elements are initialized as if explicitly initialized with an expression of the form <code>float()</code>,\n  that is, are initialized with <code>0.0</code>. In the following example, braces in the <em>initializer-list</em> are elided; however\n  the <em>initializer-list</em> has the same effect as the completely-braced <em>initializer-list</em> of the above example,</p>\n<pre><code>float y[4][3] = {\n    1, 3, 5, 2, 4, 6, 3, 5, 7\n};\n</code></pre>\n<p id=\"so_30959915_30959988_2\">The initializer for <code>y</code> begins with a left brace, but the one for <code>y[0]</code> does not, therefore three elements from\n  the list are used. Likewise the next three are taken successively for <code>y[1]</code> and <code>y[2]</code>. <em>\u2014end example ]</em></p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-06-20T23:51:34.477", "Score": "1", "CreationDate": "2015-06-20T23:51:34.477", "ParentId": "30959915", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T10:27:45.743"}});