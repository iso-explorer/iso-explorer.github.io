post_cb({"bq_ids": {"n4140": {"so_6390756_6390756_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 710}}, "n3337": {"so_6390756_6390756_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 699}}, "n4659": {"so_6390756_6390756_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 739}}}, "6390756": {"ViewCount": "831", "Body": "<p>From N3290, [container.requirements.general]:</p>\n<blockquote>\n<p id=\"so_6390756_6390756_0\">The expression <code>a.swap(b)</code>, for containers a and b of a standard container type other than <code>array</code>, shall exchange the values of a and b without invoking any move, copy, or swap operations on the individual container elements.</p>\n</blockquote>\n<p>How do this interact with small string optimization? Did they forget to add <code>std::string</code> too?</p>\n", "AcceptedAnswerId": "6390927", "Title": "std::string \u2014 small string optimization and swap", "CreationDate": "2011-06-17T19:21:50.763", "Id": "6390756", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-11-16T22:26:30.183", "LastEditorUserId": "636019", "LastActivityDate": "2014-05-23T22:03:54.333", "Score": "11", "OwnerUserId": "277176", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "6390927": {"Body": "<p>(Reposting from comment)</p>\n<p><code>std::string</code> is not a container \u2013 the fact that <code>basic_string</code> is not described in the <code>Containers library</code> chapter (\u00a723) of the FDIS is a good clue. ;-]</p>\n", "CreationDate": "2011-06-17T19:40:26.590", "ParentId": "6390756", "CommentCount": "3", "LastEditDate": "2014-05-23T22:03:54.333", "Id": "6390927", "PostTypeId": "2", "LastActivityDate": "2014-05-23T22:03:54.333", "LastEditorUserId": "636019", "CommunityOwnedDate": "2011-06-17T19:40:26.590", "Score": "11", "OwnerUserId": "636019"}});