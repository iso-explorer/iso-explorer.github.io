post_cb({"bq_ids": {"n4140": {"so_48894453_48894534_0": {"length": 21, "quality": 0.5526315789473685, "section_id": 5941}}, "n3337": {"so_48894453_48894534_0": {"length": 21, "quality": 0.5526315789473685, "section_id": 5712}}, "n4659": {"so_48894453_48894534_0": {"length": 24, "quality": 0.631578947368421, "section_id": 7425}}}, "48894453": {"ViewCount": "192", "Body": "<p>I am having an issue with code failing to compile for an external library I am using.  I believe that library compiles fine with gcc, but it fails to compile for me with clang.</p>\n<p>I can recreate the issue as follows</p>\n<pre><code>template &lt;class T&gt;\nclass A {\npublic:\n    struct B {\n        int a;\n    };\n\n    void test();\n\nprivate:\n    T _t;\n};\n\ntemplate &lt;class T&gt;\nvoid A&lt;T&gt;::test()\n{\n    printf(\"Result %d\", std::numeric_limits&lt;decltype(B::a)&gt;::max());\n}\n\nint main(int argc, char** argv)\n{\n    auto t = A&lt;int&gt;();\n    t.test();\n    return 0;\n}\n</code></pre>\n<p>This fails to compile on clang with the following error</p>\n<pre><code>error: invalid use of non-static data member 'a' printf(\"Result %d\", std::numeric_limits&lt;decltype(B::a)&gt;::max());\n</code></pre>\n<p>My questions are as follows:  </p>\n<ul>\n<li><p>What is the expected behavior?  </p></li>\n<li><p>decltype on non-static members was added in c++11.  Does this apply to those declared in template classes?  </p></li>\n<li><p>Is this a compiler bug?  Or an example of non-conformant code working with gcc?</p></li>\n</ul>\n", "AcceptedAnswerId": "48894534", "Title": "decltype fails on struct member declared in template class", "CreationDate": "2018-02-20T21:24:00.647", "LastActivityDate": "2018-02-20T21:43:30.563", "CommentCount": "5", "LastEditDate": "2018-02-20T21:43:30.563", "PostTypeId": "1", "LastEditorUserId": "6525260", "Id": "48894453", "Score": "4", "OwnerUserId": "6372862", "Tags": "<c++><c++11><templates><gcc><clang++>", "AnswerCount": "1"}, "48894534": {"Id": "48894534", "PostTypeId": "2", "Body": "<p>It was a bug in old version of Clang, and fixed in Clang 3.9.0:\n<a href=\"https://godbolt.org/g/zqFxL2\" rel=\"noreferrer\">https://godbolt.org/g/zqFxL2</a></p>\n<p>Normative Standarteese:</p>\n<blockquote>\n<p id=\"so_48894453_48894534_0\">8.2.3: In some contexts, unevaluated operands appear ([expr.prim.req],\n  [expr.typeid], [expr.sizeof], [expr.unary.noexcept],\n  <strong>[dcl.type.simple]</strong>, [temp]). An unevaluated operand is not evaluated.\n  [\u2009Note: In an unevaluated operand, <strong>a non-static class member may be\n  named ([expr.prim])</strong> and naming of objects or functions does not, by\n  itself, require that a definition be provided ([basic.def.odr]). An\n  unevaluated operand is considered a full-expression. \u2014\u2009end note\u2009]</p>\n</blockquote>\n", "LastEditorUserId": "5245033", "LastActivityDate": "2018-02-20T21:34:22.067", "Score": "10", "CreationDate": "2018-02-20T21:29:44.423", "ParentId": "48894453", "CommentCount": "0", "OwnerUserId": "5245033", "LastEditDate": "2018-02-20T21:34:22.067"}});