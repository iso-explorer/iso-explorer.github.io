post_cb({"33095439": {"CommentCount": "1", "ViewCount": "60", "CreationDate": "2015-10-13T06:18:06.457", "LastActivityDate": "2015-10-13T06:26:29.470", "Title": "Templates vs Similar Non-Template Functions", "PostTypeId": "1", "Id": "33095439", "Score": "0", "Body": "<p>I had created a Template Specialized function and a non template function with the same arguments. Since effectively both are same functions, I was not sure how C++ compiler would run it as now it has two same functions, one is a template specialized the other is a non template one. I was expecting this would result in a compiler error as compiler would find two functions with the same parameters and return type (In this case void foo(string) ). But looks like the non template version is the one that executes when this is called. \nSo is there a precedence when this is done?</p>\n<p>Kindly let me know if I have misunderstood.</p>\n<p>Code: This prints 'String Non-Template'</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nvoid foo(T input)\n{\n    cout &lt;&lt;\"Generic Template\"&lt;&lt;endl;    \n}\n\ntemplate&lt;&gt;\nvoid foo&lt;string&gt;(string input)\n{\n    cout &lt;&lt;\"String Template\"&lt;&lt;endl;\n}\n\nvoid foo(string input)\n{\n    cout &lt;&lt;\"String Non-Template\"&lt;&lt;endl;\n}\n\nint main() {\n\n    string input = \"abc\";\n    foo(input);\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "5439461", "AnswerCount": "1"}, "33095469": {"ParentId": "33095439", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>A regular function is always preferred over a function template, even a specialization of the function template.</p>\n<p>From the C++ Standard:</p>\n<blockquote>\n<p id=\"so_33095439_33095469_0\"><strong>13.3.3 Best viable function [over.match.best]</strong></p>\n<p id=\"so_33095439_33095469_1\">1 Define ICSi(F) as follows:</p>\n<p id=\"so_33095439_33095469_2\">...</p>\n<p id=\"so_33095439_33095469_3\">Given these definitions, a viable function <code>F1</code> is defined to be a better function than another viable function <code>F2</code> if for all arguments <code>i</code>, <code>ICSi(F1)</code> is not a worse conversion sequence than <code>ICSi(F2)</code>, and then</p>\n<p id=\"so_33095439_33095469_4\">...</p>\n<p id=\"so_33095439_33095469_5\">-- <code>F1</code> is a non-template function and <code>F2</code> is a function template specialization, or, if not that,</p>\n</blockquote>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-10-13T06:26:29.470", "Id": "33095469", "Score": "2", "CreationDate": "2015-10-13T06:20:13.043", "LastActivityDate": "2015-10-13T06:26:29.470"}, "bq_ids": {"n4140": {"so_33095439_33095469_5": {"section_id": 111, "quality": 1.0, "length": 5}, "so_33095439_33095469_3": {"section_id": 603, "quality": 0.85, "length": 17}}, "n3337": {"so_33095439_33095469_5": {"section_id": 106, "quality": 1.0, "length": 5}, "so_33095439_33095469_3": {"section_id": 593, "quality": 0.85, "length": 17}}, "n4659": {"so_33095439_33095469_5": {"section_id": 115, "quality": 1.0, "length": 5}, "so_33095439_33095469_3": {"section_id": 629, "quality": 0.85, "length": 17}}}});