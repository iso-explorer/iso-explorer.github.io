post_cb({"45268954": {"CommentCount": "1", "AcceptedAnswerId": "45269409", "PostTypeId": "1", "LastEditorUserId": "2411320", "CreationDate": "2017-07-23T19:11:26.070", "LastActivityDate": "2017-08-25T12:21:30.210", "LastEditDate": "2017-08-25T12:21:30.210", "ViewCount": "181", "FavoriteCount": "0", "Title": "Constexpr conditions for constructor", "Id": "45268954", "Score": "7", "Body": "<p>On <a href=\"http://en.cppreference.com/w/cpp/language/constexpr\" rel=\"noreferrer\">this</a> site, it is specified that:</p>\n<blockquote>\n<p id=\"so_45268954_45268954_0\">\"A constexpr function must satisfy the following requirements:</p>\n<p id=\"so_45268954_45268954_1\">[...]</p>\n<p id=\"so_45268954_45268954_2\">there exists at least one set of argument values such that an invocation of the function could be an evaluated subexpression of a core constant expression (<strong>for constructors, use in a constant initializer is sufficient</strong>) (since C++14). No diagnostic is required for a violation of this bullet.\"</p>\n</blockquote>\n<p>What is the meaning of the bolded statement?</p>\n", "Tags": "<c++><oop><c++14><constexpr>", "OwnerUserId": "3766405", "AnswerCount": "1"}, "45269409": {"ParentId": "45268954", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Looking at the <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1911\" rel=\"nofollow noreferrer\">linked defect report</a></p>\n<pre><code>struct X {\n    std::unique_ptr&lt;int&gt; p;\n    constexpr X() { }\n};\n</code></pre>\n<p>Before C++14, this would be ill-formed due to <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.constexpr#5\" rel=\"nofollow noreferrer\">[dcl.constexpr]</a></p>\n<blockquote>\n<p id=\"so_45268954_45269409_0\">For a constexpr constructor, if no argument values exist such that after function invocation substitution, every constructor call and full-expression in the mem-initializers would be a constant expression (including conversions), the program is ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>Which mandates that there exists some argument (in this case, only the empty set) that can create a constant expression for the invocation of <code>X::X</code>, as in</p>\n<pre><code>constexpr X x;  // must be valid before C++14\n</code></pre>\n<p>Since <code>std::unique_ptr</code> isn't a literal type, it has a non-trivial destructor, this is impossible. Yet the defect report proposed that <code>constexpr</code> constructors should still be well-formed in such cases due to this kind of use case</p>\n<pre><code>X x;  // not constexpr, but initialization should be constant\n</code></pre>\n<p>Hence the rewording</p>\n<blockquote>\n<p id=\"so_45268954_45269409_1\">For a constexpr function or constexpr constructor that is neither defaulted nor a template, if no argument values exist such that an invocation of the function or constructor could be an evaluated subexpression of a core constant expression, or, <strong>for a constructor, a constant initializer for some object</strong> , the program is ill-formed, no diagnostic required.</p>\n</blockquote>\n<p>Translated, it means: a <code>constexpr</code> constructor is well-formed as long as it is a <code>constexpr</code> function, and its member initializations are also <code>constexpr</code> functions, even if the type itself can never be <code>constexpr</code>.</p>\n", "OwnerUserId": "4832499", "LastEditorUserId": "4832499", "LastEditDate": "2017-07-29T19:24:25.057", "Id": "45269409", "Score": "4", "CreationDate": "2017-07-23T20:04:19.710", "LastActivityDate": "2017-07-29T19:24:25.057"}, "bq_ids": {"n4140": {"so_45268954_45269409_1": {"section_id": 5421, "quality": 0.6666666666666666, "length": 20}, "so_45268954_45268954_0": {"section_id": 3957, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_45268954_45269409_1": {"section_id": 5216, "quality": 0.5333333333333333, "length": 16}, "so_45268954_45269409_0": {"section_id": 5216, "quality": 0.9583333333333334, "length": 23}, "so_45268954_45268954_0": {"section_id": 5214, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_45268954_45269409_1": {"section_id": 6843, "quality": 0.9666666666666667, "length": 29}, "so_45268954_45268954_0": {"section_id": 6841, "quality": 0.8333333333333334, "length": 5}, "so_45268954_45268954_2": {"section_id": 6843, "quality": 0.5555555555555556, "length": 15}}}});