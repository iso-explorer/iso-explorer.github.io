post_cb({"7225952": {"ParentId": "7225914", "CommentCount": "7", "CreationDate": "2011-08-29T04:05:48.773", "OwnerUserId": "485561", "PostTypeId": "2", "Id": "7225952", "Score": "7", "Body": "<p>From the <code>c++0x</code> draft:</p>\n<p>\u00a723.2.2/1:</p>\n<blockquote>\n<p id=\"so_7225914_7225952_0\">For purposes of avoiding data races (17.6.5.9), implementations shall consider the following functions to be const: begin, end, rbegin, rend, front, back, data, find, lower_bound, upper_bound, equal_range, at and, except in associative or unordered associative containers, operator[].</p>\n</blockquote>\n<p>Note that <code>c++03</code> does not say anything about multi-threading, but as you say, most implementations use RB-trees, which will not rebalance on a read operation.</p>\n", "LastActivityDate": "2011-08-29T04:05:48.773"}, "7226055": {"ParentId": "7225914", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2011-08-29T04:26:56.490", "Score": "3", "LastEditorUserId": "649233", "LastEditDate": "2011-08-29T13:57:13.017", "Id": "7226055", "OwnerUserId": "233522", "Body": "<p>Read functions on maps etc. are required to have a <strong>const</strong> function defined. Hence you get the guarantee that the object hasn't changed.</p>\n<p>This is true both for C++11 ( 23.4.4.1 ) as well as C++03 ( 23.3.1 ).</p>\n<p><strong>23.2.2</strong> of the new C++11 standard may be of special interest here:</p>\n<blockquote>\n<ol>\n<li><p id=\"so_7225914_7226055_0\">For purposes of avoiding data races (17.6.5.9), implementations shall\n  consider the following functions to be const: begin, end, rbegin,\n  rend, front, back, data, find, lower_bound, upper_bound, equal_range,\n  at and, except in associative or unordered associative containers,\n  operator[]. </p></li>\n<li><p id=\"so_7225914_7226055_1\">Notwithstanding (17.6.5.9), implementations are required\n  to avoid data races when the contents of the contained object in\n  different elements in the same sequence, excepting <code>vector&lt;bool&gt;</code>, are\n  modified concurrently.</p></li>\n</ol>\n</blockquote>\n", "LastActivityDate": "2011-08-29T13:57:13.017"}, "7225914": {"CommentCount": "2", "AcceptedAnswerId": "7225952", "PostTypeId": "1", "LastEditorUserId": "501557", "CreationDate": "2011-08-29T03:56:22.607", "LastActivityDate": "2012-02-04T22:08:22.623", "LastEditDate": "2012-02-04T22:08:22.623", "ViewCount": "594", "FavoriteCount": "1", "Title": "Is std::map allowed to re-balance after read-only operations (like a Splay tree)", "Id": "7225914", "Score": "5", "Body": "<p>Some binary tree data structures (such as <a href=\"http://en.wikipedia.org/wiki/Splay_tree\" rel=\"nofollow\">Splay</a> trees) will re-balance on reads to move recently accessed items toward the root, such that the subsequent look-up time may be reduced.</p>\n<p>Are the standard containers (<code>std::map</code>, <code>std::set</code>) allowed to do this?</p>\n<p>At least one concern is thread safety. Previously, I'd thought that as long as you were only doing read-only operations on standard containers, it was safe to do this from multiple threads without introducing mutexes/locks etc. Maybe I need to re-think this?</p>\n<p>I know that <em>typically</em> red-black trees are used for the standard tree containers, and that these data structures aren't usually modified on reads. But would a hypothetical implementation that did modify be conforming?</p>\n<p>My c++-standards-foo needs improvement, but I'm not sure whether the current standard addresses thread-safety for containers. Is this different in <code>c++0x</code>?</p>\n", "Tags": "<c++><c++11><splay-tree>", "OwnerUserId": "566274", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_7225914_7226055_1": {"section_id": 718, "quality": 0.8947368421052632, "length": 17}, "so_7225914_7225952_0": {"section_id": 717, "quality": 0.9259259259259259, "length": 25}, "so_7225914_7226055_0": {"section_id": 717, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_7225914_7225952_0": {"section_id": 706, "quality": 0.9259259259259259, "length": 25}, "so_7225914_7226055_1": {"section_id": 707, "quality": 0.9473684210526315, "length": 18}, "so_7225914_7226055_0": {"section_id": 706, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_7225914_7225952_0": {"section_id": 748, "quality": 0.9259259259259259, "length": 25}, "so_7225914_7226055_1": {"section_id": 749, "quality": 0.8947368421052632, "length": 17}, "so_7225914_7226055_0": {"section_id": 748, "quality": 0.9259259259259259, "length": 25}}}});