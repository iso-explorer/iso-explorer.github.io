post_cb({"8984268": {"ParentId": "8984013", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No. I am on the road and don't have a standard to quote with me, but sfinae takes places in the phase of compilation where the compiler checks if the name exists at all, and in a later phase access control takes place.</p>\n<p>This is similar to overload resolution, where all names are considered, and a match that is private is better, but won't compile, although there is another match that would be \"ok\" but not private.</p>\n<p><strong>Addition:</strong></p>\n<p>Core issue 1170 says:</p>\n<blockquote>\n<p id=\"so_8984013_8984268_0\">1170 Access checking during template argument deduction<br>\n  Section: 14.8.2  [temp.deduct]<br>\n  Status: FDIS     Submitter: Adamczyk     Date: 2010-08-03</br></br></p>\n<p id=\"so_8984013_8984268_1\">[Voted into the WP at the March, 2011 meeting.]</p>\n<p id=\"so_8984013_8984268_2\">According to 14.8.2 [temp.deduct] paragraph 8,</p>\n<blockquote>\n<p id=\"so_8984013_8984268_8\">Access checking is not done as part of the substitution process. Consequently, when deduction succeeds, an access error could still\n    result when the function is instantiated. </p>\n</blockquote>\n<p id=\"so_8984013_8984268_4\">This mimics the way access checking is done in overload resolution.\n  However, experience has shown that this exemption of access errors\n  from deduction failure significantly complicates the Standard library,\n  so this rule should be changed.</p>\n<p id=\"so_8984013_8984268_5\">Proposed resolution (January, 2011):</p>\n<p id=\"so_8984013_8984268_6\">Change 14.8.2 [temp.deduct] paragraph 8 as follows:</p>\n<blockquote>\n<p id=\"so_8984013_8984268_9\">If a substitution results in an invalid type or expression, type deduction fails. An invalid type or expression is one that would be\n    ill-formed if written using the substituted arguments. [Note: Access\n    checking is not done as part of the substitution process. \u2014end note]\n    Consequently, when deduction succeeds, an access error could still\n    result when the function is instantiated. Only invalid types...</p>\n</blockquote>\n</blockquote>\n<p>So my interpretation is that this is impossible in C++03, but C++11 made it possible.</p>\n", "OwnerUserId": "833362", "LastEditorUserId": "833362", "LastEditDate": "2012-01-24T09:33:40.290", "Id": "8984268", "Score": "5", "CreationDate": "2012-01-24T09:11:20.423", "LastActivityDate": "2012-01-24T09:33:40.290"}, "8984264": {"ParentId": "8984013", "CommentCount": "2", "Body": "<p>I don't think so. </p>\n<blockquote>\n<p id=\"so_8984013_8984264_0\">11/4 \"Member access control\" (C++03):</p>\n<p id=\"so_8984013_8984264_1\">The interpretation of a given construct is established without regard\n  to access control.  If the interpretation established makes use of\n  inaccessible member names or base classes, the construct is\n  ill-formed.</p>\n</blockquote>\n<p>So overload resolution occurs first, then access control is applied.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "8984264", "Score": "2", "CreationDate": "2012-01-24T09:10:50.397", "LastActivityDate": "2012-01-24T09:10:50.397"}, "8984379": {"ParentId": "8984013", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes.</p>\n<p><strong>EDIT:</strong> C++11 Standard quote from <strong>\u00a714.8.2 [temp.deduct]</strong></p>\n<blockquote>\n<p id=\"so_8984013_8984379_0\"><strong>8/</strong> If a substitution results in an invalid type or expression, type deduction fails. An invalid type or expression is one that would be ill-formed if written using the substituted arguments. <em>[ Note: Access checking is done as part of the substitution process. \u2014end note ]</em></p>\n</blockquote>\n<p>This suggests to me that <code>private</code> can trigger an SFINAE error. Reading on:</p>\n<blockquote>\n<p id=\"so_8984013_8984379_1\">Only invalid types and expressions in the immediate context of the function type and its template parameter types can result in a deduction failure. <em>[ Note: The evaluation\n  of the substituted types and expressions can result in side effects such as the instantiation of class template specializations and/or function template specializations, the generation of implicitly-defined functions, etc. Such side effects are not in the \u201cimmediate context\u201d and can result in the program being ill-formed.\u2014end note ]</em></p>\n</blockquote>\n<p>The \"immediate context\" is not so clear to me... but it does not contradict my point :)</p>\n<p><strong>end of EDIT</strong></p>\n<p>So it seems to me that it will error out in an SFINAE way, this is further confirmed by this excerpt from Clang:</p>\n<pre><code>// clang/Basic/DiagnosticIDs.h:185-209\n\n  /// \\brief Enumeration describing how the the emission of a diagnostic should\n  /// be treated when it occurs during C++ template argument deduction.\n  enum SFINAEResponse {\n    /// \\brief The diagnostic should not be reported, but it should cause\n    /// template argument deduction to fail.\n    ///\n    /// The vast majority of errors that occur during template argument\n    /// deduction fall into this category.\n    SFINAE_SubstitutionFailure,\n\n    /// \\brief The diagnostic should be suppressed entirely.\n    ///\n    /// Warnings generally fall into this category.\n    SFINAE_Suppress,\n\n    /// \\brief The diagnostic should be reported.\n    ///\n    /// The diagnostic should be reported. Various fatal errors (e.g.,\n    /// template instantiation depth exceeded) fall into this category.\n    SFINAE_Report,\n\n    /// \\brief The diagnostic is an access-control diagnostic, which will be\n    /// substitution failures in some contexts and reported in others.\n    SFINAE_AccessControl\n  };\n</code></pre>\n<p>There are special cases with regard to Access Control in the case of SFINAE.</p>\n", "OwnerUserId": "147192", "LastEditorUserId": "476681", "LastEditDate": "2012-01-24T10:15:20.067", "Id": "8984379", "Score": "11", "CreationDate": "2012-01-24T09:21:01.917", "LastActivityDate": "2012-01-24T10:15:20.067"}, "24941959": {"ParentId": "8984013", "CommentCount": "0", "Body": "<p>Here is an example that implements is_comparable and handles a potentially private operator==. g++-4.7 chokes on this, but g++-4.8 and clang++ 3.4 handle it correctly in C++11 mode.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n// is_comparable trait\ntemplate&lt;class T&gt;\nclass is_comparable {\n  template&lt;typename U&gt; static char (&amp;check (int))[1 + sizeof (decltype (\n    std::declval&lt;U&gt;() == std::declval&lt;U&gt;() // trait check\n  ))];\n  template&lt;typename&gt;   static char (&amp;check (...))[1];\npublic:\n  static constexpr const bool value = sizeof (check&lt;T&gt; (0)) != 1;\n};\n// tests\nclass Diff1 {};          // non-comparable\nclass Diff2 {            // non-comprable, since member is private\n  bool operator== (const Diff2&amp;);\n};\nstruct EqM { bool operator== (EqM); };  // comparable\nstruct EqG {};                          // comparable\nbool operator== (const EqG&amp;, const EqG&amp;);\nint\nmain ()\n{\n  std::cout &lt;&lt; \"is_comparable:\";\n  std::cout &lt;&lt; \" void=\" &lt;&lt; is_comparable&lt;void&gt;::value;\n  std::cout &lt;&lt; \" Diff1=\" &lt;&lt; is_comparable&lt;Diff1&gt;::value;\n  std::cout &lt;&lt; \" Diff2=\" &lt;&lt; is_comparable&lt;Diff2&gt;::value;\n  std::cout &lt;&lt; \" int=\" &lt;&lt; is_comparable&lt;int&gt;::value;\n  std::cout &lt;&lt; \" EqM=\" &lt;&lt; is_comparable&lt;EqM&gt;::value;\n  std::cout &lt;&lt; \" EqG=\" &lt;&lt; is_comparable&lt;EqG&gt;::value;\n  std::cout &lt;&lt; \"\\n\";\n  return 0;\n}\n// $ clang++ is_comparable.cc -std=c++11 &amp;&amp; ./a.out\n// is_comparable: void=0 Diff1=0 Diff2=0 int=1 EqM=1 EqG=1\n</code></pre>\n", "OwnerUserId": "3866742", "PostTypeId": "2", "Id": "24941959", "Score": "1", "CreationDate": "2014-07-24T19:06:04.813", "LastActivityDate": "2014-07-24T19:06:04.813"}, "8984013": {"CommentCount": "16", "AcceptedAnswerId": "8984379", "PostTypeId": "1", "LastEditorUserId": "1774667", "CreationDate": "2012-01-24T08:46:01.527", "LastActivityDate": "2014-07-24T19:06:04.813", "LastEditDate": "2013-02-18T15:01:21.613", "ViewCount": "841", "FavoriteCount": "2", "Title": "Can SFINAE detect private access violations?", "Id": "8984013", "Score": "14", "Body": "<p>I wonder whether if i test for some member of a class and the member is private what will sfinae respond? Will it error out hard or will it say ok or will it error out in the sfinae way?</p>\n", "Tags": "<c++><language-lawyer><sfinae>", "OwnerUserId": "34509", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_8984013_8984264_1": {"section_id": 6668, "quality": 0.9473684210526315, "length": 18}, "so_8984013_8984379_1": {"section_id": 300, "quality": 0.8979591836734694, "length": 44}, "so_8984013_8984268_8": {"section_id": 300, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984379_0": {"section_id": 300, "quality": 0.8888888888888888, "length": 24}, "so_8984013_8984268_3": {"section_id": 300, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984268_9": {"section_id": 300, "quality": 0.6666666666666666, "length": 28}, "so_8984013_8984268_7": {"section_id": 300, "quality": 0.6666666666666666, "length": 28}}, "n3337": {"so_8984013_8984264_1": {"section_id": 6423, "quality": 0.9473684210526315, "length": 18}, "so_8984013_8984379_1": {"section_id": 291, "quality": 0.8979591836734694, "length": 44}, "so_8984013_8984268_8": {"section_id": 291, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984379_0": {"section_id": 291, "quality": 0.8888888888888888, "length": 24}, "so_8984013_8984268_3": {"section_id": 291, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984268_9": {"section_id": 291, "quality": 0.6666666666666666, "length": 28}, "so_8984013_8984268_7": {"section_id": 291, "quality": 0.6666666666666666, "length": 28}}, "n4659": {"so_8984013_8984264_1": {"section_id": 8143, "quality": 0.9473684210526315, "length": 18}, "so_8984013_8984268_7": {"section_id": 307, "quality": 0.6666666666666666, "length": 28}, "so_8984013_8984268_8": {"section_id": 307, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984379_1": {"section_id": 307, "quality": 0.8163265306122449, "length": 40}, "so_8984013_8984379_0": {"section_id": 307, "quality": 0.8888888888888888, "length": 24}, "so_8984013_8984268_3": {"section_id": 307, "quality": 0.5555555555555556, "length": 10}, "so_8984013_8984268_9": {"section_id": 307, "quality": 0.6666666666666666, "length": 28}}}});