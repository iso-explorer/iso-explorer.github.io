post_cb({"36574253": {"ParentId": "30152687", "CommentCount": "0", "Body": "<p>May be This small example will help you understand  nontrivial function in the context of [basic.def.odr]/3   </p>\n<pre><code>struct C { \n        int l; \n        constexpr C(int _l) : l(_l) { } \n        constexpr C(const C&amp;c) : q(c.l* 2) { } \n      }; \n\n      int main(void) { \n        constexpr C c(42); \n        constexpr int m= c.l; \n        struct K{ \n         int foo() { return c.l; } \n        } l; \n        return l.foo(); \n      } \n</code></pre>\n<p>If You look at the follwowing line in standard</p>\n<p><strong>applying the lvalue-to-rvalue conversion (4.1) to x yields a constant expression (5.19) that does not invoke any nontrivial functions</strong></p>\n<p>Here c satisfies the requirements for appearing in a constant expression, \nbut applying the lvalue-to-rvalue conversion to a invokes a \nnon-trivial function. </p>\n<p><strong>Why It invokes a non-trivial function?</strong></p>\n<p><em>When an lvalue-to-rvalue conversion occurs in an unevaluated operand or a subexpression thereof the value contained in the referenced object is not accessed. Otherwise, if the glvalue has a class type, the conversion copy-initializes a temporary of type T from the glvalue and the result of the conversion is a prvalue for the temporary</em></p>\n<p>So a prvalue is created using the copy constructor of class C and since Copy constructor is user Declared, It is non-Trivial and Hence c is not ODR-used here </p>\n<p><strong>A copy/move assignment operator for class X is trivial if it is not user-provided, its parameter-type-list is equivalent to the parameter-type-list of an implicit declaration</strong></p>\n<p>I hope this example clarifies your doubt</p>\n", "OwnerUserId": "4279701", "PostTypeId": "2", "Id": "36574253", "Score": "0", "CreationDate": "2016-04-12T13:06:54.397", "LastActivityDate": "2016-04-12T13:06:54.397"}, "30152687": {"CommentCount": "0", "AcceptedAnswerId": "30152747", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-05-10T14:40:52.293", "LastActivityDate": "2016-04-12T13:06:54.397", "LastEditDate": "2015-05-10T16:36:11.023", "ViewCount": "1562", "FavoriteCount": "3", "Title": "What is a trivial function?", "Id": "30152687", "Score": "13", "Body": "<p>[basic.def.odr]/3 makes a reference to the term \"nontrivial function\", whose definition I couldn't find in the Standard (N4140).</p>\n<p>[basic.def.odr]/3  </p>\n<blockquote>\n<p id=\"so_30152687_30152687_0\">A variable x whose name appears as a potentially-evaluated expression\n  ex is odr-used by ex unless applying the lvalue-to-rvalue conversion\n  (4.1) to x yields a constant expression (5.19) that does not invoke\n  any nontrivial functions and, if x is an object, ex is an element of\n  the set of potential results of an expression e, where either the\n  lvalue-to-rvalue conversion (4.1) is applied to e, or e is a\n  discarded-value expression (Clause 5).</p>\n</blockquote>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "1042389", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30152687_30152747_5": {"section_id": 474, "quality": 1.0, "length": 5}, "so_30152687_30152747_4": {"section_id": 474, "quality": 1.0, "length": 12}, "so_30152687_30152747_0": {"section_id": 369, "quality": 1.0, "length": 4}, "so_30152687_30152747_2": {"section_id": 461, "quality": 1.0, "length": 11}, "so_30152687_30152747_1": {"section_id": 369, "quality": 1.0, "length": 4}, "so_30152687_30152687_0": {"section_id": 7040, "quality": 0.9375, "length": 30}, "so_30152687_30152747_3": {"section_id": 461, "quality": 1.0, "length": 4}}, "n3337": {"so_30152687_30152747_5": {"section_id": 465, "quality": 1.0, "length": 5}, "so_30152687_30152747_0": {"section_id": 359, "quality": 1.0, "length": 4}, "so_30152687_30152747_3": {"section_id": 452, "quality": 1.0, "length": 4}, "so_30152687_30152747_1": {"section_id": 359, "quality": 1.0, "length": 4}}, "n4659": {"so_30152687_30152747_5": {"section_id": 495, "quality": 0.8, "length": 4}, "so_30152687_30152687_0": {"section_id": 8537, "quality": 0.9375, "length": 30}}}, "30152747": {"ParentId": "30152687", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>\"non-trivial function\" is the complement of \"trivial special member function\". There are definitions for what a trivial and non-trivial default/copy/move constructor, copy/move assignment operator or destructor is - traits that only appertain to special member functions, and decide whether e.g. these need to be called under certain circumstances.</p>\n<p>The definitions for these can be found in chapter \u00a712.</p>\n<p><strong>Default constructor</strong>, \u00a712.1/4:</p>\n<blockquote>\n<p id=\"so_30152687_30152747_0\">A default constructor is <em>trivial</em> if it is not user-provided and if:</p>\n<ul>\n<li>its class has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>no non-static data member of its class has a brace-or-equal-initializer, and</li>\n<li>all the direct base classes of its class have trivial default constructors, and</li>\n<li>for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default\n  constructor.</li>\n</ul>\n<p id=\"so_30152687_30152747_1\">Otherwise, the default constructor is <em>non-trivial</em>.</p>\n</blockquote>\n<p><strong>Copy/move constructors</strong>, \u00a712.8/12:</p>\n<blockquote>\n<p id=\"so_30152687_30152747_2\">A copy/move constructor for class X is <em>trivial</em> if it is not\n  user-provided, its <em>parameter-type-list</em> is equivalent to the\n  <em>parameter-type-list</em> of an implicit declaration, and if</p>\n<ul>\n<li>class <code>X</code> has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>class <code>X</code> has no non-static data members of volatile-qualified type, and</li>\n<li>the constructor selected to copy/move each direct base class subobject is trivial, and</li>\n<li>for each non-static data member of <code>X</code> that is of class type (or array thereof), the constructor selected to copy/move that member is\n  trivial;</li>\n</ul>\n<p id=\"so_30152687_30152747_3\">otherwise the copy/move constructor is <em>non-trivial</em>.</p>\n</blockquote>\n<p><strong>Copy/move assignment operator</strong>, \u00a712.8/26:</p>\n<blockquote>\n<p id=\"so_30152687_30152747_4\">A copy/move assignment operator for class <code>X</code> is <em>trivial</em> if it is\n  not user-provided, its <em>parameter-type-list</em> is equivalent to the\n  <em>parameter-type-list</em> of an implicit declaration, and if</p>\n<ul>\n<li>class <code>X</code> has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>class <code>X</code> has no non-static data members of volatile-qualified type, and</li>\n<li>the assignment operator selected to copy/move each direct base class</li>\n<li>for each non-static data member of <code>X</code> that is of class type (or array thereof), the assignment operator selected to copy/move that\n  member is trivial;</li>\n</ul>\n<p id=\"so_30152687_30152747_5\">otherwise the copy/move assignment operator is <em>non-trivial</em>.</p>\n</blockquote>\n<p><strong>Destructor</strong>, \u00a712.4/5:</p>\n<blockquote>\n<p id=\"so_30152687_30152747_6\">A destructor is <em>trivial</em> if it is not user-provided and if:</p>\n<ul>\n<li>the destructor is not virtual,</li>\n<li>all of the direct base classes of its class have trivial destructors, and</li>\n<li>for all of the non-static data members of its class that are of class type (or array thereof), each such class has a trivial\n  destructor.</li>\n</ul>\n<p id=\"so_30152687_30152747_7\">Otherwise, the destructor is <em>non-trivial</em></p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-05-10T14:58:31.783", "Id": "30152747", "Score": "8", "CreationDate": "2015-05-10T14:45:53.277", "LastActivityDate": "2015-05-10T14:58:31.783"}});