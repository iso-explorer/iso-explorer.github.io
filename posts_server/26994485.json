post_cb({"26994485": {"CommentCount": "0", "ViewCount": "1167", "PostTypeId": "1", "LastEditorUserId": "3972491", "CreationDate": "2014-11-18T12:33:58.603", "LastActivityDate": "2014-11-18T12:55:44.743", "Title": "Can conversion functions be non-member functions", "AcceptedAnswerId": "26994566", "LastEditDate": "2014-11-18T12:51:39.827", "Id": "26994485", "Score": "4", "Body": "<p>Is it possible to define the casting operator from one type to another type outside of the class definition as a non-member function? I know it is possible for other operators like operator- but It is not possible with cast operators. For example for two classes A and B, I tried to define the casting operator outside of the A and B scopes as follows:</p>\n<pre><code>operator A(const B&amp; b)\n{\n    A a(....);\n    return a;\n}\n</code></pre>\n", "Tags": "<c++><casting><operator-overloading>", "OwnerUserId": "3972491", "AnswerCount": "2"}, "26994566": {"ParentId": "26994485", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-11-18T12:38:25.600", "Score": "6", "LastEditorUserId": "596781", "LastEditDate": "2014-11-18T12:55:44.743", "Id": "26994566", "OwnerUserId": "596781", "Body": "<p>No, conversion functions must be member functions.</p>\n<p>From C++11, [class.conv.fct]/1:</p>\n<blockquote>\n<p id=\"so_26994485_26994566_0\">A <strong>member function</strong> of a class <code>X</code> having no parameters with a name of the form [<code>operator</code> <em>conversion-type-id</em>] specifies a conversion from <code>X</code> to the type specified by the <em>conversion-type-id</em>. Such functions are called conversion functions.</p>\n</blockquote>\n<p>There are no other conversion functions, in particular there are no non-member conversion functions.</p>\n", "LastActivityDate": "2014-11-18T12:55:44.743"}, "bq_ids": {"n4140": {"so_26994485_26994566_0": {"section_id": 391, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_26994485_26994566_0": {"section_id": 382, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_26994485_26994566_0": {"section_id": 408, "quality": 0.9473684210526315, "length": 18}}}, "26994537": {"ParentId": "26994485", "CommentCount": "3", "CreationDate": "2014-11-18T12:36:54.900", "OwnerUserId": "4047092", "PostTypeId": "2", "Id": "26994537", "Score": "0", "Body": "<p>Conversion operators are specific to class i.e they provide a means to convert your-defined type to some other type. So, they must be the member of a class for which they are serving purpose :-</p>\n<p>for e.g:-</p>\n<pre><code>class Rational\n{\n  public:\n     operator double ();\n};\n</code></pre>\n<p>Here operator double provide a means to convert Rational object to double. </p>\n", "LastActivityDate": "2014-11-18T12:36:54.900"}});