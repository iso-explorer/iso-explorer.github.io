post_cb({"17359235": {"CommentCount": "6", "ViewCount": "3332", "CreationDate": "2013-06-28T07:13:41.413", "LastActivityDate": "2013-06-28T08:45:23.963", "Title": "Size of array has non-integral type when using c++11 enum class", "PostTypeId": "1", "Id": "17359235", "Score": "6", "Body": "<p>I used this code:</p>\n<pre><code>enum E {\n    E1, E2, E3, MaxNum\n};\n\nconst char * ENames[ MaxNum ] = {\n    \"E1\", \"E2\", \"E3\"\n};\n</code></pre>\n<p>and had no problem.\nNow I want to use \"modern\" <code>enum class</code>. The code now looks like this:</p>\n<pre><code>enum class E {\n    E1, E2, E3, MaxNum\n};\n\nconst char * ENames[ E::MaxNum ] = {\n    \"E1\", \"E2\", \"E3\"\n};\n</code></pre>\n<p>and got an error</p>\n<blockquote>\n<p id=\"so_17359235_17359235_0\">error: size of array \u2018ENames\u2019 has non-integral type \u2018E\u2019</p>\n<p id=\"so_17359235_17359235_1\">error: too many initializers for \u2018const char* [1]\u2019</p>\n</blockquote>\n<p>Q: why <code>enum class</code> does become non-integral in c++11, while usual enum is integral ?</p>\n<p>What is a decision of a problem ? How can I declare an array with size, that is one of enumeration in <code>enum class</code> ?</p>\n<p>Here - <a href=\"http://ideone.com/SNHTYe\" rel=\"noreferrer\">http://ideone.com/SNHTYe</a> - is a simple example.</p>\n<p>Thank you.</p>\n", "Tags": "<c++11><enums>", "OwnerUserId": "667266", "AnswerCount": "2"}, "17360707": {"ParentId": "17359235", "CommentCount": "2", "CreationDate": "2013-06-28T08:45:23.963", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "17360707", "Score": "7", "Body": "<blockquote>\n<p id=\"so_17359235_17360707_0\">Q: why <code>enum class</code> does become non-integral in c++11, while usual enum is integral ?</p>\n</blockquote>\n<p>Because it's not a \"usual enum\", it's more strongly-typed</p>\n<blockquote>\n<p id=\"so_17359235_17360707_1\">How can I declare an array with size, that is one of enumeration in enum class ?</p>\n</blockquote>\n<p>Why do you want to anyway?  You could use a <code>static_cast</code> but the solution to your problem is \"don't do that\".</p>\n<p>If you want an enum of fixed underlying type then do that, don't use a scoped enum:</p>\n<pre><code>enum E : uint16_t {\n    E1, E2, E3, MaxNum\n};\n\nconst char * ENames[ MaxNum ] = {\n    \"E1\", \"E2\", \"E3\"\n};\n</code></pre>\n", "LastActivityDate": "2013-06-28T08:45:23.963"}, "17359774": {"ParentId": "17359235", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-06-28T07:47:12.633", "Score": "5", "LastEditorUserId": "12711", "LastEditDate": "2013-06-28T07:59:06.850", "Id": "17359774", "OwnerUserId": "12711", "Body": "<p>C++11 5.19/3 \"Constant expressions\"</p>\n<blockquote>\n<p id=\"so_17359235_17359774_0\">An integral constant expression is a literal constant expression of integral or <strong>unscoped</strong> enumeration type. </p>\n</blockquote>\n<p>Scoped enumerations are not integral constant expressions. And an array dimension (if specified) must be \"an integral constant expression and its value shall be greater than zero\" (8.3.4/1 \"Arrays\").</p>\n<p>I suspect that the rationale for this is that scoped enums do not implicitly convert to <code>int</code>.</p>\n<p>To work around the problem, you could static cast the scoped enum to an <code>int</code> as suggested by user2523017, or use the pre-C++11 methods of scoping enum names:</p>\n<pre><code>namespace E {\nenum {\n      E1, E2, E3, MaxNum\n    };\n}\n</code></pre>\n<p>or:</p>\n<pre><code>struct E {\nenum {\n      E1, E2, E3, MaxNum\n    };\n};\n</code></pre>\n", "LastActivityDate": "2013-06-28T07:59:06.850"}, "bq_ids": {"n4140": {"so_17359235_17360707_1": {"section_id": 300, "quality": 0.5555555555555556, "length": 5}, "so_17359235_17359774_0": {"section_id": 3329, "quality": 0.7, "length": 7}}, "n3337": {"so_17359235_17360707_1": {"section_id": 291, "quality": 0.5555555555555556, "length": 5}, "so_17359235_17359774_0": {"section_id": 5947, "quality": 0.9, "length": 9}}, "n4659": {"so_17359235_17360707_1": {"section_id": 307, "quality": 0.5555555555555556, "length": 5}, "so_17359235_17359774_0": {"section_id": 4095, "quality": 0.7, "length": 7}}}});