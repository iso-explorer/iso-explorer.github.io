post_cb({"3414273": {"ParentId": "3414233", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>signed int</code> is the same as <code>int</code> and specifies an integer value that can have both positive and negative values.</p>\n<p><code>unsigned int</code> on the other hand can only have positive values, so the greatest positive value is much larger than that of a <code>signed int</code>.</p>\n", "OwnerUserId": "192308", "LastEditorUserId": "192308", "LastEditDate": "2010-08-05T12:10:10.630", "Id": "3414273", "Score": "1", "CreationDate": "2010-08-05T11:38:44.640", "LastActivityDate": "2010-08-05T12:10:10.630"}, "3414233": {"CommentCount": "0", "ViewCount": "1083", "CreationDate": "2010-08-05T11:30:42.300", "LastActivityDate": "2010-08-05T13:49:19.640", "Title": "Is an int the same as unsigned or signed?", "AcceptedAnswerId": "3414252", "PostTypeId": "1", "Id": "3414233", "Score": "10", "Body": "<p>Is an int the same type as unsigned or signed?</p>\n", "Tags": "<c++>", "OwnerUserId": "336635", "AnswerCount": "5"}, "3414268": {"ParentId": "3414233", "CommentCount": "1", "Body": "<p>C++ Standard 3.9.1/2:</p>\n<blockquote>\n<p id=\"so_3414233_3414268_0\">There are four <strong><em>signed integer types</em></strong>: \u201csigned char\u201d, \u201cshort int\u201d, \u201cint\u201d, and \u201clong int.\u201d &lt;...&gt;</p>\n</blockquote>\n<p>C++ Standard 3.9.1/3:</p>\n<blockquote>\n<p id=\"so_3414233_3414268_1\">For each of the signed integer types, there exists a corresponding (<em>but different</em>) <strong><em>unsigned integer type</em></strong>:\n  \u201cunsigned char\u201d, \u201cunsigned short int\u201d, \u201cunsigned int\u201d, and \u201cunsigned long\n  int,\u201d &lt;...&gt;</p>\n</blockquote>\n<p>So, <code>sizeof(int)</code> is equal to <code>sizeof(unsigned)</code>. But <code>boost::is_same&lt; int, unsigned &gt;::value</code> is false.</p>\n", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "3414268", "Score": "12", "CreationDate": "2010-08-05T11:37:45.610", "LastActivityDate": "2010-08-05T11:37:45.610"}, "3414252": {"ParentId": "3414233", "CommentCount": "3", "Body": "<p>Plain <code>int</code> is the same as <code>signed</code> is the same as <code>signed int</code></p>\n", "OwnerUserId": "5597", "PostTypeId": "2", "Id": "3414252", "Score": "15", "CreationDate": "2010-08-05T11:33:25.573", "LastActivityDate": "2010-08-05T11:33:25.573"}, "3414278": {"ParentId": "3414233", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>ints</code> are signed by default, as are <code>longs</code>.  </p>\n<p>So, <code>int</code>, <code>signed</code> and <code>signed int</code> are the same thing.</p>\n<p>Similarly <code>long</code> and <code>signed long</code> are the same.</p>\n<p><code>chars</code> on the other hand, don't have a default.  Implementations can consider them signed or unsigned (many have a command line switch to choose).  <code>char</code>, <code>signed char</code> and <code>unsigned char</code> are considered three distinct types for overload resolution, template instaniation and other places.</p>\n", "OwnerUserId": "12725", "LastEditorUserId": "12725", "LastEditDate": "2010-08-05T13:49:19.640", "Id": "3414278", "Score": "3", "CreationDate": "2010-08-05T11:39:09.740", "LastActivityDate": "2010-08-05T13:49:19.640"}, "3414254": {"ParentId": "3414233", "CommentCount": "0", "Body": "<p><code>int</code>s are signed by default.</p>\n", "OwnerUserId": "319403", "PostTypeId": "2", "Id": "3414254", "Score": "2", "CreationDate": "2010-08-05T11:33:46.973", "LastActivityDate": "2010-08-05T11:33:46.973"}, "bq_ids": {"n4140": {"so_3414233_3414268_1": {"section_id": 7212, "quality": 0.9565217391304348, "length": 22}, "so_3414233_3414268_0": {"section_id": 7211, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_3414233_3414268_1": {"section_id": 6956, "quality": 0.9565217391304348, "length": 22}, "so_3414233_3414268_0": {"section_id": 6955, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_3414233_3414268_1": {"section_id": 8721, "quality": 0.9565217391304348, "length": 22}, "so_3414233_3414268_0": {"section_id": 8720, "quality": 0.8333333333333334, "length": 10}}}});