post_cb({"bq_ids": {"n4140": {"so_45035913_45036404_2": {"length": 21, "quality": 0.525, "section_id": 3345}, "so_45035913_45036404_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 3340}}, "n3337": {"so_45035913_45036404_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 3251}}, "n4659": {"so_45035913_45036404_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 4142}}}, "45036404": {"Id": "45036404", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45035913_45036404_0\">shouldn't it catch everything?</p>\n</blockquote>\n<p>Only if the handler is reached. There are situations where an exception can not be caught and <code>std::terminate</code> is called instead.</p>\n<blockquote>\n<p id=\"so_45035913_45036404_1\">[except.throw]/7 If the exception handling mechanism, after completing the initialization of the exception object but before\n  the activation of a handler for the exception, calls a function that exits via an exception, std::terminate\n  is called</p>\n<p id=\"so_45035913_45036404_2\">[except.ctor]/1 As control passes from the point where an exception is thrown to a handler, destructors are invoked by a\n  process, specified in this section, called stack unwinding. If a destructor directly invoked by stack unwind-\n  ing exits with an exception, std::terminate is called (15.5.1). [ Note: Consequently, destructors should\n  generally catch exceptions and not let them propagate out of the destructor. \u2014 end note ]</p>\n</blockquote>\n", "LastActivityDate": "2017-07-11T13:48:14.950", "CommentCount": "0", "CreationDate": "2017-07-11T13:48:14.950", "ParentId": "45035913", "Score": "2", "OwnerUserId": "2079303"}, "45035913": {"ViewCount": "85", "Body": "<p>I am calling a function which comes from a static library, it threw nlopt exception, so I used the following code to locate the exception.</p>\n<pre><code>    try\n    {\n        reg_info(\"Before GP\");\n        omp_set_num_threads(1);\n        GP predictor(train_in, train_out);\n        predictor.set_noise_lower_bound(1e-3);\n        reg_info(\"Before Train\");\n        predictor.train();\n        reg_info(\"After Train\");\n        reg_info(\"Before Predict\");\n        predictor.predict(pred_in, pred_y, pred_s2);\n        reg_info(\"After Predict\");\n        reg_info(\"After GP\");\n    }\n    catch(...)\n    {\n        reg_info(\"Exception\");\n    }\n</code></pre>\n<p>But I got the following output message:</p>\n<pre><code> Info  : Before GP\n Info  : Before Train\nterminate called after throwing an instance of 'nlopt::forced_stop'\n  what():  nlopt forced stop\n</code></pre>\n<p>It seems that the <code>predictor.train();</code> threw the exception, but why didn't it caught by <code>catch(...)</code>? shouldn't it catch everything?</p>\n<p>It looked at the source code of <code>GP::train()</code>, it did throw an <code>nlopt::forced_stop()</code> exception that is not properly caught, but still, I don't understand why the <code>catch(...)</code> didn't catch it successfully. </p>\n", "Title": "Why isn't my exception caught", "CreationDate": "2017-07-11T13:26:37.780", "LastActivityDate": "2017-07-12T02:47:18.027", "CommentCount": "11", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-07-12T02:47:18.027", "LastEditorUserId": "2299477", "Id": "45035913", "Score": "1", "OwnerUserId": "2299477", "Tags": "<c++><c++11><exception><exception-handling>", "AnswerCount": "1"}});