post_cb({"bq_ids": {"n4140": {"so_16542291_16542385_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 5850}, "so_16542291_16542385_7": {"length": 11, "quality": 0.7857142857142857, "section_id": 5850}, "so_16542291_16542385_11": {"length": 13, "quality": 1.0, "section_id": 461}, "so_16542291_16542385_9": {"length": 6, "quality": 0.75, "section_id": 369}, "so_16542291_16542385_12": {"length": 4, "quality": 1.0, "section_id": 461}, "so_16542291_16542385_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 5850}, "so_16542291_16542385_10": {"length": 9, "quality": 1.0, "section_id": 461}, "so_16542291_16542385_0": {"length": 4, "quality": 1.0, "section_id": 4706}, "so_16542291_16542385_6": {"length": 7, "quality": 0.7777777777777778, "section_id": 5850}, "so_16542291_16542385_8": {"length": 5, "quality": 1.0, "section_id": 461}}, "n3337": {"so_16542291_16542385_6": {"length": 8, "quality": 0.8888888888888888, "section_id": 5620}, "so_16542291_16542385_7": {"length": 11, "quality": 0.7857142857142857, "section_id": 5620}, "so_16542291_16542385_0": {"length": 4, "quality": 1.0, "section_id": 4515}, "so_16542291_16542385_9": {"length": 6, "quality": 0.75, "section_id": 359}, "so_16542291_16542385_12": {"length": 4, "quality": 1.0, "section_id": 452}, "so_16542291_16542385_11": {"length": 13, "quality": 1.0, "section_id": 452}, "so_16542291_16542385_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 5620}, "so_16542291_16542385_10": {"length": 9, "quality": 1.0, "section_id": 452}, "so_16542291_16542385_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 5620}, "so_16542291_16542385_8": {"length": 5, "quality": 1.0, "section_id": 452}}, "n4659": {"so_16542291_16542385_6": {"length": 6, "quality": 0.6666666666666666, "section_id": 7329}, "so_16542291_16542385_7": {"length": 11, "quality": 0.7857142857142857, "section_id": 7329}, "so_16542291_16542385_11": {"length": 13, "quality": 1.0, "section_id": 484}, "so_16542291_16542385_9": {"length": 6, "quality": 0.75, "section_id": 383}, "so_16542291_16542385_10": {"length": 9, "quality": 1.0, "section_id": 484}, "so_16542291_16542385_8": {"length": 5, "quality": 1.0, "section_id": 484}, "so_16542291_16542385_0": {"length": 4, "quality": 1.0, "section_id": 6103}}}, "16542291": {"ViewCount": "1878", "Body": "<p>When would these give a different answer, and when would this difference be useful, if at all?</p>\n", "AcceptedAnswerId": "16542385", "Title": "What is the difference between is_trivially_copyable and is_trivially_copy_constructible?", "CreationDate": "2013-05-14T11:43:46.047", "Id": "16542291", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-05-14T12:04:45.077", "Score": "19", "OwnerUserId": "256138", "Tags": "<c++><c++11><typetraits>", "AnswerCount": "1"}, "16542385": {"Id": "16542385", "PostTypeId": "2", "Body": "<p>The former tests for the <em>trivially copyable</em> property, which in few words means that the type is <code>memcpy</code>-safe.</p>\n<blockquote>\n<p id=\"so_16542291_16542385_0\">A trivially copyable class is a class that:</p>\n<p id=\"so_16542291_16542385_1\">\u2014 has no non-trivial copy constructors (12.8),</p>\n<p id=\"so_16542291_16542385_2\">\u2014 has no non-trivial move constructors (12.8),</p>\n<p id=\"so_16542291_16542385_3\">\u2014 has no non-trivial copy assignment operators (13.5.3, 12.8),</p>\n<p id=\"so_16542291_16542385_4\">\u2014 has no non-trivial move assignment operators (13.5.3, 12.8), and</p>\n<p id=\"so_16542291_16542385_5\">\u2014 has a trivial destructor (12.4).</p>\n<p id=\"so_16542291_16542385_6\">A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable.</p>\n<p id=\"so_16542291_16542385_7\">[ <em>Note:</em> In particular, a trivially copyable or trivial class does not have virtual functions\n  or virtual base classes.<em>\u2014end note</em> ]</p>\n</blockquote>\n<p>The latter tests for the presence of a <em>trivial copy constructor</em>, which incidentally is a requirement for the <em>trivially copyable</em> property. It basically implies that the copy constructor for the type performs a bitwise copy.</p>\n<blockquote>\n<p id=\"so_16542291_16542385_8\">A copy/move constructor for class X is trivial if it is not user-provided and if</p>\n<p id=\"so_16542291_16542385_9\">\u2014 class X has no virtual functions (10.3) and no virtual base classes (10.1), and</p>\n<p id=\"so_16542291_16542385_10\">\u2014 the constructor selected to copy/move each direct base class subobject is trivial, and</p>\n<p id=\"so_16542291_16542385_11\">\u2014 for each non-static data member of X that is of class type (or array thereof), the constructor\n  selected to copy/move that member is trivial;</p>\n<p id=\"so_16542291_16542385_12\">otherwise the copy/move constructor is non-trivial.</p>\n</blockquote>\n<p>It is easy to fabricate a type that provides different results for these traits:</p>\n<pre><code>struct foo {\n    foo(foo const&amp;) = default; // this is a trivial copy constructor\n    ~foo(); // this is a non-trivial destructor\n};\n</code></pre>\n", "LastEditorUserId": "46642", "LastActivityDate": "2013-05-14T12:04:45.077", "Score": "14", "CreationDate": "2013-05-14T11:48:17.647", "ParentId": "16542291", "CommentCount": "7", "OwnerUserId": "46642", "LastEditDate": "2013-05-14T12:04:45.077"}});