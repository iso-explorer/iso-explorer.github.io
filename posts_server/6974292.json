post_cb({"bq_ids": {"n4140": {"so_6974292_6974415_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6036}}, "n3337": {"so_6974292_6974415_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5804}}, "n4659": {"so_6974292_6974415_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7535}}}, "6974292": {"ViewCount": "405", "Body": "<p>If I have a strongly-typed enum, with say, underlying type <code>int</code>, is it ok to cast an <code>int</code> value that does not match any enumerator to the enum type?</p>\n<pre><code>enum e1 : int { x = 0, y = 1 };\nenum class e2 : int { x = 0, y = 1 };\n\nint main() {\n        e1 foo = static_cast&lt;e1&gt;(42); // is this UB?\n        e2 bar = static_cast&lt;e2&gt;(42);\n}\n</code></pre>\n", "AcceptedAnswerId": "6974415", "Title": "Is it safe to cast arbitrary values of the underlying type to a strongly-typed enum type?", "CreationDate": "2011-08-07T17:02:46.227", "Id": "6974292", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-08-24T02:39:43.577", "LastEditorUserId": "46642", "LastActivityDate": "2011-08-24T02:39:43.577", "Score": "14", "OwnerUserId": "46642", "Tags": "<c++><enums><c++11>", "AnswerCount": "1"}, "6974415": {"Id": "6974415", "PostTypeId": "2", "Body": "<p>From n3290, 5.2.9 Static cast [expr.static.cast]:</p>\n<blockquote>\n<p id=\"so_6974292_6974415_0\">10 A value of integral or enumeration type can be explicitly converted\n  to an enumeration type. The value is unchanged if the original value\n  is within the range of the enumeration values (7.2). Otherwise, the\n  resulting value is unspecified (and might not be in that range). [...]</p>\n</blockquote>\n<p><em>Enumeration type</em> comprises both those types that are declared with <code>enum</code> and those that are declared with <code>enum class</code> or <code>enum struct</code>, which the Standard calls respectively <em>unscoped</em> enumerations and <em>scoped</em> enumerations. Described in more details in 7.2 Enumeration declarations [dcl.enum].</p>\n<p>The <em>values</em> of an enumeration type are not be confused with its <em>enumerators</em>. In your case, since the enumerations you declared all have <code>int</code> as their underlying types their range of values is the same as that of <code>int</code>: from <code>INT_MIN</code> to <code>INT_MAX</code> (inclusive).</p>\n<p>Since <code>42</code> has type <code>int</code> and is obviously a value of <code>int</code> the behaviour is defined.</p>\n", "LastEditorUserId": "726300", "LastActivityDate": "2011-08-07T17:36:00.180", "Score": "16", "CreationDate": "2011-08-07T17:21:41.040", "ParentId": "6974292", "CommentCount": "1", "OwnerUserId": "726300", "LastEditDate": "2011-08-07T17:36:00.180"}});