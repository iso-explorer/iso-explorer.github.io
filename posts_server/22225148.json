post_cb({"22225148": {"CommentCount": "2", "AcceptedAnswerId": "22225238", "PostTypeId": "1", "LastEditorUserId": "729541", "CreationDate": "2014-03-06T12:52:34.417", "LastActivityDate": "2014-03-06T13:15:25.027", "LastEditDate": "2014-03-06T13:06:21.583", "ViewCount": "828", "FavoriteCount": "2", "Title": "What does \" for (const auto &s : strs) {} \" mean?", "Id": "22225148", "Score": "2", "Body": "<p>What does <code>for (const auto &amp;s : strs)</code> mean? What is the function of colon <code>:</code>? </p>\n<pre><code>vector&lt;string&gt; &amp;strs;\nfor (const auto &amp;s : strs){\n   //\n}\n</code></pre>\n", "Tags": "<c++><c++11><for-loop><stl><range>", "OwnerUserId": "3044752", "AnswerCount": "2"}, "22225313": {"ParentId": "22225148", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to <strong>6.5.4 The range-based for statement [stmt.ranged]</strong> the statement</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p>is equivalent to </p>\n<pre><code>{\n    auto &amp;&amp; __range = range-init;\n    for (auto __begin = begin-expr, __end = end-expr; __begin != __end; ++__begin ) {\n       for-range-declaration = *__begin;\n       statement\n    }\n}\n</code></pre>\n<p>In other words, the compiler will expand it to a regular for-loop going from the <code>begin()</code> and <code>end()</code> of the expression. </p>\n<p>There are some conditions about name lookup of <code>begin-expr</code> and <code>end-expr</code>, but all Standard Library containers (such as your <code>std::vector</code>), <code>std::initializer_list</code>, raw arrays  and anything with member or non-member <code>begin()</code> and <code>end()</code> functions in the right namespace will be accepted.</p>\n<p>The <code>:</code> is simply the syntax to separate the declaration of what you use inside the loop from the expression which you loop over. </p>\n", "OwnerUserId": "819272", "LastEditorUserId": "819272", "LastEditDate": "2014-03-06T13:05:48.523", "Id": "22225313", "Score": "3", "CreationDate": "2014-03-06T13:00:10.693", "LastActivityDate": "2014-03-06T13:05:48.523"}, "bq_ids": {"n4140": {"so_22225148_22225238_2": {"section_id": 3906, "quality": 0.7368421052631579, "length": 14}, "so_22225148_22225238_3": {"section_id": 3906, "quality": 0.5333333333333333, "length": 8}}, "n3337": {"so_22225148_22225238_2": {"section_id": 3766, "quality": 0.7368421052631579, "length": 14}, "so_22225148_22225238_3": {"section_id": 3766, "quality": 0.5333333333333333, "length": 8}}, "n4659": {"so_22225148_22225238_2": {"section_id": 4792, "quality": 0.5789473684210527, "length": 11}, "so_22225148_22225238_3": {"section_id": 4792, "quality": 0.5333333333333333, "length": 8}}}, "22225238": {"ParentId": "22225148", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It's actually a C++11 feature called \"range-based for-loops\".</p>\n<p>In this case, it's basically an easier-to-write replacement for:</p>\n<pre><code>// Let's assume this vector is not empty.\nvector&lt;string&gt; strs;\n\nconst vector&lt;string&gt;::iterator end_it = strs.end();\n\nfor (vector&lt;string&gt;::iterator it = strs.begin(); it != end_it; ++it) {\n  const string&amp; s = *it;\n  // Some code here...\n}\n</code></pre>\n<p>The <code>:</code> is part of the <a href=\"http://en.cppreference.com/w/cpp/language/range-for\" rel=\"nofollow\">new syntax</a>.</p>\n<p>On the left you basically have a variable declaration that will be bound to the elements of the vector and one the right you have the variable to iterate on (also called \"range expression\").</p>\n<p>Here is an excerpt of the linked documentation that explains the prerequisites for the range-expressions:</p>\n<blockquote>\n<p id=\"so_22225148_22225238_0\">range_expression is evaluated to determine the sequence or range to iterate. Each element of the sequence, in turn, is dereferenced and assigned to the variable with the type and name given in range_declaration.</p>\n<p id=\"so_22225148_22225238_1\">begin_expr and end_expr are defined as follows:</p>\n<p id=\"so_22225148_22225238_2\">If __range is an array, then begin_expr is __range and end_expr is (__range + __bound), where __bound is the number of elements in the array (if the array has unknown size or is of an incomplete type, the program is ill-formed)</p>\n<p id=\"so_22225148_22225238_3\">If __range's type is a class type with either or both a begin or an end member function, then begin_expr is __range.begin() and end_expr is __range.end();</p>\n<p id=\"so_22225148_22225238_4\">Otherwise, begin_expr is begin(__range) and end_expr is end(__range), which are found via argument-dependent lookup with std as an associated namespace.</p>\n</blockquote>\n<p>Note that thanks to all this, range-based for loops also support iterating over C arrays as <code>std::begin</code>/<code>std::end</code> works with those too.</p>\n", "OwnerUserId": "279259", "LastEditorUserId": "279259", "LastEditDate": "2014-03-06T13:15:25.027", "Id": "22225238", "Score": "8", "CreationDate": "2014-03-06T12:56:38.160", "LastActivityDate": "2014-03-06T13:15:25.027"}});