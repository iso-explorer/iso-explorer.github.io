post_cb({"27256619": {"CommentCount": "5", "ViewCount": "61", "PostTypeId": "1", "LastEditorUserId": "1139697", "CreationDate": "2014-12-02T18:41:26.490", "LastActivityDate": "2014-12-02T18:59:52.707", "Title": "Why can I connect this struct in boost::signals2?", "AcceptedAnswerId": "27256682", "LastEditDate": "2014-12-02T18:54:31.203", "Id": "27256619", "Score": "-3", "Body": "<p>The <a href=\"http://www.boost.org/doc/libs/1_39_0/doc/html/signals2.html\" rel=\"nofollow\">boost signals2</a> library contains the following code in its <a href=\"http://www.boost.org/doc/libs/1_39_0/doc/html/signals2/tutorial.html\" rel=\"nofollow\">tutorial</a>:</p>\n<pre><code>struct HelloWorld\n{\n  void operator()() const\n  {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n  }\n};\n</code></pre>\n<pre><code>boost::signals2::signal&lt;void ()&gt; sig;\n\nHelloWorld hello;\nsig.connect(hello); (*)\n\nsig();\n</code></pre>\n<p>However, I cannot grasp why this works. As far as I can see, <code>connect</code> should get a <code>void()</code> method, but instead it gets a <code>HelloWorld&amp;</code> in (*). Why does this even work?</p>\n", "Tags": "<c++><boost><struct>", "OwnerUserId": "654019", "AnswerCount": "2"}, "27256682": {"ParentId": "27256619", "CommentCount": "0", "Body": "<p>The struct is popularly known as a \"functor\".</p>\n<p>In fact it's a regular object overloading the <em>function call operator</em> (<code>operator()</code>), so you can do:</p>\n<pre><code>struct X { void operator()(int x) { std::cout &lt;&lt; x &lt;&lt; \"\\n\"; } };\n\nint main() {\n    X printer;\n    printer(3);\n}\n</code></pre>\n<p>which will print <code>3</code> to <code>std::cout</code>.</p>\n<hr>\n<p>Boost Signals2 accepts any \"callable object\". </p>\n<p>This includes </p>\n<ul>\n<li>functors</li>\n<li>function pointers</li>\n<li>any object with an implicit conversion to function pointers</li>\n<li>... </li>\n</ul>\n<p>Refer to e.g. <a href=\"http://en.cppreference.com/w/cpp/concept/Callable\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/concept/Callable</a> for more information</p>\n</hr>", "OwnerUserId": "85371", "PostTypeId": "2", "Id": "27256682", "Score": "3", "CreationDate": "2014-12-02T18:45:37.747", "LastActivityDate": "2014-12-02T18:45:37.747"}, "27256786": {"ParentId": "27256619", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-12-02T18:51:57.953", "Id": "27256786", "LastEditDate": "2014-12-02T18:59:52.707", "OwnerDisplayName": "user3920237", "Score": "1", "Body": "<p>First of all, <code>HelloWorld</code> has a \"function call\" operator, as described in [over.call]:</p>\n<blockquote>\n<p id=\"so_27256619_27256786_0\"><code>operator()</code> shall be a non-static member function with an arbitrary\n  number of parameters. It can have default arguments. It implements the\n  function call syntax</p>\n<p id=\"so_27256619_27256786_1\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>postfix-expression</em>\n  ( <em>expression-list</em><sub>opt</sub> )</p>\n<p id=\"so_27256619_27256786_2\">where the postfix-expression evaluates to a class object and the\n  possibly empty <em>expression-list</em> matches the parameter list of an\n  <code>operator()</code> member function of the class. Thus, a call <code>x(arg1,...)</code>\n  is interpreted as <code>x.operator()(arg1, ...)</code> for a class object <code>x</code> of\n  type <code>T</code> if<code>T::operator()(T1, T2, T3)</code> exists and if the operator is\n  selected as the best match function by the overload resolution\n  mechanism (13.3.3).</p>\n</blockquote>\n<p>You passed an <em>instance</em> of the struct, and <code>sig()</code> will invoke <code>operator()</code> on the instance.</p>\n<p>See the <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/signals/tutorial.html#idp425136992\" rel=\"nofollow\">tutorial</a> in the boost documentation.</p>\n", "LastActivityDate": "2014-12-02T18:59:52.707", "LastEditorUserId": "1139697"}, "bq_ids": {"n4140": {"so_27256619_27256786_0": {"section_id": 662, "quality": 1.0, "length": 15}, "so_27256619_27256786_2": {"section_id": 662, "quality": 0.9117647058823529, "length": 31}}, "n3337": {"so_27256619_27256786_0": {"section_id": 652, "quality": 1.0, "length": 15}, "so_27256619_27256786_2": {"section_id": 652, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_27256619_27256786_0": {"section_id": 690, "quality": 1.0, "length": 15}, "so_27256619_27256786_2": {"section_id": 690, "quality": 0.9117647058823529, "length": 31}}}});