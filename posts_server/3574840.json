post_cb({"3574840": {"CommentCount": "0", "ViewCount": "709", "CreationDate": "2010-08-26T12:00:05.293", "LastActivityDate": "2013-04-11T08:49:27.577", "Title": "Does reinterpret_cast store a copy of object pointer?", "AcceptedAnswerId": "3575249", "PostTypeId": "1", "Id": "3574840", "Score": "0", "Body": "<p>when a reinterpret_cast is applied to a class object, it returns a LONG_PTR. is it some sort of handle to a temporary object pointer stored somewhere in memory?</p>\n", "Tags": "<c++>", "OwnerUserId": "431815", "AnswerCount": "4"}, "3575162": {"ParentId": "3574840", "CommentCount": "0", "CreationDate": "2010-08-26T12:48:49.740", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3575162", "Score": "0", "Body": "<p>$5.2.10/1</p>\n<blockquote>\n<p id=\"so_3574840_3575162_0\">\"The result of the expression\n  reinterpret_cast(v) is the result\n  of converting the expression v to type\n  T. <strong>If T is a reference type, the\n  result is an lvalue; otherwise, the\n  result is an rvalue</strong> and the\n  lvalue-torvalue (4.1),\n  array-to-pointer (4.2), and\n  function-to-pointer (4.3) standard\n  conversions are performed on the the\n  expression v.\"</p>\n</blockquote>\n<p>So the answer to your question is that it depends on if 'v' is an lvalue or 'rvalue.</p>\n", "LastActivityDate": "2010-08-26T12:48:49.740"}, "3574868": {"ParentId": "3574840", "CommentCount": "0", "CreationDate": "2010-08-26T12:05:24.570", "OwnerUserId": "420892", "PostTypeId": "2", "Id": "3574868", "Score": "0", "Body": "<p><code>LONG_PTR</code> is not a standard type and reinterpret_cast&lt;&gt;() is not even a real function but something that will take place a compile time.</p>\n<p>So no, nothing happens in memory.</p>\n", "LastActivityDate": "2010-08-26T12:05:24.570"}, "3574870": {"ParentId": "3574840", "CommentCount": "0", "CreationDate": "2010-08-26T12:06:14.653", "OwnerUserId": "252408", "PostTypeId": "2", "Id": "3574870", "Score": "1", "Body": "<p>reinterpret_cast is used to reinterpret the value written in the memory at the location pointed to your pointer as another type of object. The memory pointed by the pointer remains the same, the only thing that changes is how you interpret the value written.</p>\n<p>Also, I would like to remember that usually reinterpret_cast is evil, and must be avoided except there is really no other option.</p>\n", "LastActivityDate": "2010-08-26T12:06:14.653"}, "bq_ids": {"n4140": {"so_3574840_3575162_0": {"section_id": 6040, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_3574840_3575162_0": {"section_id": 5808, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_3574840_3575162_0": {"section_id": 7539, "quality": 0.8095238095238095, "length": 17}}}, "3575249": {"ParentId": "3574840", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2010-08-26T12:58:50.640", "Score": "2", "LastEditorUserId": "410767", "LastEditDate": "2013-04-11T08:49:27.577", "Id": "3575249", "OwnerUserId": "410767", "Body": "<p>The question's not so well worded.  I can't think of any manner of object for which <code>reinterpret_cast&lt;LONG_PTR&gt;(object)</code> would work, assuming <code>LONG_PTR</code> is some pointer type (it's not Standard C++), and object is a class instance (the C++ Standard considers variables of built in types to be objects too - that could work).</p>\n<p>You may be thinking of:</p>\n<pre><code>My_Class my_object;\n\n// convert an arbitrary value to a pointer\nreintrepret_cast&lt;LONG_PTR&gt;(1234)\n</code></pre>\n<p>In this case, <code>1234</code> is never a run-time \"object\" - not even a temporary int in memory - it's just a number that the compiler converts to a <code>LONG_PTR</code> as if you'd used <code>static_cast&lt;&gt;</code>.  You can think of this as \"give me a <code>LONG_PTR</code> with this value\".</p>\n<p>You could reinterpret to a reference-to-object:</p>\n<pre><code>// get a LONG_PTR extracted from memory [&amp;my_object...&amp;my_object+1)\nreintrepret_cast&lt;LONG_PTR&amp;&gt;(my_object);\n</code></pre>\n<p>In this case, the pointer returned doesn't necessarily refer to any object that your program has, or even to memory that your program can access.  There is no temporary created there for your convenience (as per your question).  You're simply telling the compiler that <code>sizeof(LONG_PTR)</code> bytes starting at the base address of <code>my_object</code> ought to contain a <code>LONG_PTR</code>.  Hopefully <code>my_object</code> or other code has set it somehow to point somewhere useful, or to a recognisable sentinel value like <code>NULL</code>.  Think of this as \"give me a reference to the <code>LONG_PTR</code> bits already stored in the front of <code>my_object</code>, letting me treat them as a <code>LONG_PTR</code> and forget all about <code>my_object</code>\" - you'd better hope those bits/bytes are aligned in memory in a way your CPU can handle, or you could get <code>SIGBUS</code> or equivalent.</p>\n<p>You can also reinterpret a pointer-to-object to a <code>LONG_PTR</code></p>\n<pre><code>// get LONG_PTR that points at my_object's base address\nreintrepret_cast&lt;LONG_PTR*&gt;(&amp;my_object);\n</code></pre>\n<p>In this case, you know the returned value does point somewhere in your program, to valid memory, although if <code>sizeof(LONG_PTR)</code> is greater than <code>sizeof(my_object)</code>, then not all the memory it addresses is within <code>my_object</code>: any remainder could be from another variable, the stack, or again be inaccessible.  Think \"give me a <code>LONG_PTR</code> aimed at <code>my_object</code>'s memory, which should (or will if you write to it) hold the -value- that a <code>LONG_PTR</code> normally addresses (perhaps a \"LONG\", or perhaps <code>LONG_PTR</code> is a generic pointer of a particular bit-size?)\".</p>\n<p>Note these are all very different.</p>\n<p>More generally, <code>reinterpret_cast</code> returns whatever type you pass as a template argument, which may or may not be your <code>LONG_PTR</code>, but there's certainly nothing inherently in <code>reinterpret_cast&lt;&gt;</code> that relates to your <code>LONG_PTR</code> type.</p>\n", "LastActivityDate": "2013-04-11T08:49:27.577"}});