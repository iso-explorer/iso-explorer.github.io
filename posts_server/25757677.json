post_cb({"25757677": {"CommentCount": "0", "ViewCount": "49", "OwnerDisplayName": "user2953119", "CreationDate": "2014-09-10T05:07:25.620", "LastActivityDate": "2014-09-10T05:17:46.290", "PostTypeId": "1", "AcceptedAnswerId": "25757793", "Title": "Undefined behavior caused by not proper memory reusing", "Id": "25757677", "Score": "1", "Body": "<p>The standard cite the following example (3.8/7 N3797):</p>\n<pre><code>struct C \n{\n    int i;\n    void f();\n    const C&amp; operator=( const C&amp; );\n};\n\nconst C&amp; C::operator=( const C&amp; other) \n{\n    if ( this != &amp;other ) \n    {\n        this-&gt;~C(); // lifetime of *this ends\n        new (this) C(other); // new object of type C created\n        f(); // well-defined\n    }\nreturn *this;\n}\n\nC c1;\nC c2;\nc1 = c2; // well-defined\nc1.f(); // well-defined; c1 refers to a new object of type C\n</code></pre>\n<p>Is there UB if we implement <code>operator=</code> as follows:</p>\n<pre><code>const C&amp; C::operator=( const C&amp; other) \n{\n    if ( this != &amp;other ) \n    {                        // Note that there is no more explcicitly destructor call,\n                             // since at the time of memory reusing the lifetime of \n                             // this is still going on\n        new (this) C(other); // new object of type C created\n        f(); // well-defined\n    }\nreturn *this;\n}\n</code></pre>\n<p>Relevant quote is:</p>\n<blockquote>\n<p id=\"so_25757677_25757677_0\">If, <strong>after the lifetime</strong> of an object <strong>has ended</strong> and <strong>before the storage</strong>\n  which the object occupied <strong>is reused or released</strong>, a new object is\n  created at the storage location which the original object occupied, a\n  pointer that pointed to the original object, a reference that referred\n  to the original object, or the name of the original object will\n  automatically refer to the new object and, once the lifetime of the\n  new object has started, can be used to manipulate the new object</p>\n</blockquote>\n<p>There is no rule for: <strong>\"Creating a new object at the storage location than an object occupies\"</strong>. \nMeanwhile, we have a suitable rule for a <code>const</code> object. And it is clear:</p>\n<p>Section 3.8/9:</p>\n<blockquote>\n<p id=\"so_25757677_25757677_1\"><strong>Creating a new object at the storage location that a const object</strong> with\n  static, thread, or automatic storage duration <strong>occupies</strong> or, at the\n  storage location that such a const object used to occupy before its\n  lifetime ended results in undefined behavior.</p>\n</blockquote>\n", "Tags": "<c++><constructor>", "AnswerCount": "1"}, "25757793": {"ParentId": "25757677", "CommentCount": "5", "Body": "<p>The relevant rule is this:</p>\n<blockquote>\n<p id=\"so_25757677_25757793_0\"><strong>3.8/4</strong> A program may end the lifetime of any object by reusing the storage which the object occupies or by\n  explicitly calling the destructor for an object of a class type with a non-trivial destructor. For an object\n  of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly\n  before the storage which the object occupies is reused or released; however, if there is no explicit call to\n  the destructor or if a <em>delete-expression</em> (5.3.5) is not used to release the storage, the destructor shall not be\n  implicitly called and any program that depends on the side effects produced by the destructor has undefined\n  behavior.</p>\n</blockquote>\n<p>Your example, as written, is legal because <code>C</code> has a trivial destructor.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "25757793", "Score": "4", "CreationDate": "2014-09-10T05:17:33.333", "LastActivityDate": "2014-09-10T05:17:33.333"}, "bq_ids": {"n4140": {"so_25757677_25757793_0": {"section_id": 7192, "quality": 0.9423076923076923, "length": 49}, "so_25757677_25757677_1": {"section_id": 7197, "quality": 1.0, "length": 26}, "so_25757677_25757677_0": {"section_id": 7195, "quality": 1.0, "length": 43}}, "n3337": {"so_25757677_25757793_0": {"section_id": 6936, "quality": 0.9423076923076923, "length": 49}, "so_25757677_25757677_1": {"section_id": 6941, "quality": 1.0, "length": 26}, "so_25757677_25757677_0": {"section_id": 6939, "quality": 1.0, "length": 43}}, "n4659": {"so_25757677_25757677_1": {"section_id": 8706, "quality": 0.9230769230769231, "length": 24}, "so_25757677_25757793_0": {"section_id": 8701, "quality": 0.9423076923076923, "length": 49}, "so_25757677_25757677_0": {"section_id": 8704, "quality": 1.0, "length": 43}}}});