post_cb({"30329758": {"ViewCount": "810", "Body": "<p><strong>Question:</strong> Is an ignored return value destructed immediately or at the moment going out of scope.?</p>\n<p>The code below returns for my compiler</p>\n<p>Output:</p>\n<blockquote>\n<p id=\"so_30329758_30329758_0\">Who makes it, has no need of it.</p>\n<p id=\"so_30329758_30329758_1\">Who buys it, has no use for it.</p>\n<p id=\"so_30329758_30329758_2\">Who uses it can neither see nor feel it.</p>\n<p id=\"so_30329758_30329758_3\">What is it?</p>\n</blockquote>\n<p>Therefore the ignored value is destructed immediatly. But is this compiler specific or standard-behavior?</p>\n<pre><code>struct foo\n{\n   ~foo()\n   {\n      std::cout &lt;&lt; \"Who makes it, has no need of it. \\n\"\n                &lt;&lt; \"Who buys it, has no use for it. \\n\";\n   }\n}\n\nfoo createFoo()\n{\n   return foo();\n}\n\nint main(int argc, char* argv[])\n{\n     createFoo();\n     std::cout &lt;&lt; \"Who uses it can neither see nor feel it.\\n\"\n               &lt;&lt; \"What is it?\"; \n}\n</code></pre>\n", "AcceptedAnswerId": "30329879", "Title": "C++: Is the ignored return value destruction behavior well-defined", "CreationDate": "2015-05-19T15:22:09.617", "Id": "30329758", "CommentCount": "0", "LastEditDate": "2015-05-19T15:47:01.517", "PostTypeId": "1", "LastEditorUserId": "3051", "LastActivityDate": "2015-05-19T17:28:12.020", "Score": "20", "OwnerUserId": "1235183", "Tags": "<c++><language-lawyer>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_30329758_30330008_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 5944}, "so_30329758_30330052_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 380}}, "n3337": {"so_30329758_30330008_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 5715}, "so_30329758_30330052_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 371}}, "n4659": {"so_30329758_30330008_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 7429}, "so_30329758_30330052_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 395}}}, "30329879": {"Id": "30329879", "PostTypeId": "2", "Body": "<p>The returned temporary is destroyed immediately after the full expression completes <em>except</em> if its lifetime is extended by being bound to an rvalue or const lvalue reference.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2015-05-19T17:28:12.020", "Score": "15", "CreationDate": "2015-05-19T15:26:47.230", "ParentId": "30329758", "CommentCount": "5", "OwnerUserId": "251738", "LastEditDate": "2015-05-19T17:28:12.020"}, "30330052": {"Id": "30330052", "PostTypeId": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">\u00a712.2 /3</a> </p>\n<blockquote>\n<p id=\"so_30329758_30330052_0\"><strong>Temporary objects are destroyed as the last step\n  in evaluating the full-expression</strong> (1.9) that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception. The value computations and side effects of destroying\n  a temporary object are associated only with the full-expression, not with any specific subexpression.</p>\n</blockquote>\n<p>Exceptions are for constructor arguments, and for binding references to a temporary. (\u00a712.3/4f.)</p>\n", "LastActivityDate": "2015-05-19T15:34:39.103", "CommentCount": "2", "CreationDate": "2015-05-19T15:34:39.103", "ParentId": "30329758", "Score": "4", "OwnerUserId": "31317"}, "30330008": {"Id": "30330008", "PostTypeId": "2", "Body": "<p>In the standard 5.11 has</p>\n<blockquote>\n<p id=\"so_30329758_30330008_0\">In some contexts, an expression only appears for its side effects. Such an expression is called a discarded-value\n  expression. The expression is evaluated and its value is discarded.</p>\n</blockquote>\n<p>So when the expression ends the value is then discarded and if it is a class type then the destructor is called.</p>\n", "LastActivityDate": "2015-05-19T15:32:37.860", "CommentCount": "1", "CreationDate": "2015-05-19T15:32:37.860", "ParentId": "30329758", "Score": "5", "OwnerUserId": "4342498"}});