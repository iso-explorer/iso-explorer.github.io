post_cb({"36274522": {"CommentCount": "0", "ViewCount": "118", "CreationDate": "2016-03-29T02:51:30.010", "LastActivityDate": "2016-03-29T03:05:28.717", "Title": "C++ - Invalid delete from valgrind", "AcceptedAnswerId": "36274543", "PostTypeId": "1", "Id": "36274522", "Score": "2", "Body": "<p>I have a low level template class, and another class which contains a pointer to an instance of this class.  The code compiles correctly, but I run into the below error when running it through valgrind:</p>\n<pre><code>==2642== Invalid free() / delete / delete[] / realloc()\n==2642==    at 0x4C2A360: operator delete(void*) (vg_replace_malloc.c:507)\n==2642==    by 0x4125B4: List&lt;std::string&gt;::~List() (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n==2642==    by 0x411CB0: Obj3::~Obj3() (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n==2642==    by 0x410AC1: main (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n==2642==  Address 0x5a02878 is 8 bytes inside a block of size 88 alloc'd\n==2642==    at 0x4C298A0: operator new[](unsigned long) (vg_replace_malloc.c:389)\n==2642==    by 0x4124FE: List&lt;std::string&gt;::List() (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n==2642==    by 0x411BC6: Obj3::Obj3(std::string, std::string, std::string, std::string, std::string) (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n==2642==    by 0x41065A: main (in /home/alex/Documents/Documents/cpp/object_module/obj_test)\n</code></pre>\n<p>You can find the class files below, please note that I've stripped out code not relevant to memory assignment.</p>\n<p>Here's the List class:</p>\n<pre><code>#ifndef LIST_H\n#define LIST_H\n\ntemplate &lt;class T&gt;\nclass List\n{\n  T *int_array;\n  ...\n  public:\n    List() {int_array=new T[10];}\n    ~List() {delete int_array;}\n    ...\n};\n#endif\n</code></pre>\n<p>Here's the Obj3 class:</p>\n<pre><code>#ifndef OBJ3_H\n#define OBJ3_H\n\n#include &lt;string&gt;\n#include \"list.h\"\n\nclass Obj3\n{\n    private:\n        //A list of scenes\n        List &lt;std::string&gt; *scene_list;\n        ...\n    public:\n            //Constructors &amp; Destructor\n            Obj3() {scene_list = new List &lt;std::string&gt;;}\n            ~Obj3() {delete scene_list;}\n            ...\n#endif\n</code></pre>\n<p>And, finally, the main method:</p>\n<pre><code>#include \"obj3.h\"\n\nvoid print_obj_attributes(Obj3&amp; obj)\n{\nstd::cout &lt;&lt; obj.get_name() &lt;&lt; std::endl;\n...\n}\n\nint main()\n{\nObj3 obj2;\nstd::cout &lt;&lt; \"Object 2\" &lt;&lt; std::endl;\nprint_obj_attributes(obj2);\n}\n</code></pre>\n<p>The entire program executes, and then the error is encountered.</p>\n", "Tags": "<c++><class><object><valgrind>", "OwnerUserId": "2649657", "AnswerCount": "2"}, "36274543": {"ParentId": "36274522", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You should use <code>delete[]</code> because you used <code>new[]</code> for <code>int_array</code>:</p>\n<pre><code>...\npublic:\n  List() {int_array=new T[10];}\n  ~List() {delete[] int_array;}\n                 ~~\n...\n</code></pre>\n<p>BTW: What you're doing is UB. $5.3.5/2 Delete [expr.delete] (emphasized by me):</p>\n<blockquote>\n<p id=\"so_36274522_36274543_0\">In the first alternative (<strong>delete object</strong>), the value of the operand of\n  delete may be a null pointer value, a pointer to a <strong>non-array object</strong>\n  created by a previous new-expression, or a pointer to a subobject\n  (1.8) representing a base class of such an object (Clause 10). If not,\n  the behavior is <strong>undefined</strong>.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-03-29T03:05:28.717", "Id": "36274543", "Score": "4", "CreationDate": "2016-03-29T02:54:18.320", "LastActivityDate": "2016-03-29T03:05:28.717"}, "36274592": {"ParentId": "36274522", "CommentCount": "0", "Body": "<p>The error message is giving you the clue: if you create an array you delete it with:</p>\n<pre><code>delete[] int_array;\n</code></pre>\n<p>What you currently have:</p>\n<pre><code>delete int_array;\n</code></pre>\n<p>Will only delete the pointer pointing to the head of the array.</p>\n", "OwnerUserId": "5916150", "PostTypeId": "2", "Id": "36274592", "Score": "0", "CreationDate": "2016-03-29T02:59:19.030", "LastActivityDate": "2016-03-29T02:59:19.030"}, "bq_ids": {"n4140": {"so_36274522_36274543_0": {"section_id": 6106, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_36274522_36274543_0": {"section_id": 5872, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_36274522_36274543_0": {"section_id": 7603, "quality": 0.9629629629629629, "length": 26}}}});