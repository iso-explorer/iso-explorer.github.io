post_cb({"bq_ids": {"n4140": {"so_21072061_21072181_0": {"length": 31, "quality": 0.96875, "section_id": 5908}}, "n3337": {"so_21072061_21072181_0": {"length": 31, "quality": 0.96875, "section_id": 5680}}, "n4659": {"so_21072061_21072181_0": {"length": 24, "quality": 0.75, "section_id": 7390}}}, "21072061": {"ViewCount": "223", "Body": "<p>The following C++11 program produces an undefined reference to <code>S&lt;42&gt;::s</code> error in both gcc and clang...</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;int i&gt; struct S;\n\ntemplate&lt;&gt; struct S&lt;42&gt; { static constexpr char s[] = \"foo\"; };\n\nint main()\n{\n    std::cout &lt;&lt; S&lt;42&gt;::s &lt;&lt; std::endl;\n}\n</code></pre>\n<p>By adding the following extra declaration (<a href=\"https://stackoverflow.com/questions/8016780/undefined-reference-to-static-constexpr-char\">related question</a>) to the program...</p>\n<pre><code>constexpr char S&lt;42&gt;::s[];\n</code></pre>\n<p>...it suppresses the error, and the program compiles.</p>\n<p>Where in the standard does it specify that a program without that extra declaration is ill-formed?  Which rules are in play here exactly?</p>\n", "AcceptedAnswerId": "21072181", "Title": "C++11: standard ref for constexpr member of template specialization needing extra declaration?", "CreationDate": "2014-01-12T06:47:14.477", "Id": "21072061", "CommentCount": "0", "LastEditDate": "2017-05-23T10:25:01.077", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-12T07:05:27.840", "Score": "3", "OwnerUserId": "1131467", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "21072181": {"Id": "21072181", "PostTypeId": "2", "Body": "<p>\u00a7 9.4.2/3:</p>\n<blockquote>\n<p id=\"so_21072061_21072181_0\">A <code>static</code> data member of literal type can be declared in the class definition with the <code>constexpr</code> specifier; if so, its declaration shall specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression. <strong>The member shall still be defined in a namespace scope if it is odr-used (3.2) in the program and the namespace scope definition shall not contain an initializer.</strong></p>\n</blockquote>\n<p>[emphasis added]</p>\n<p>It looks to me like when you print out the value in <code>main</code> that's an odr-use, so the compilers are right: the definition is required.</p>\n", "LastActivityDate": "2014-01-12T07:05:27.840", "CommentCount": "0", "CreationDate": "2014-01-12T07:05:27.840", "ParentId": "21072061", "Score": "3", "OwnerUserId": "179910"}});