post_cb({"31560073": {"CommentCount": "1", "ViewCount": "152", "CreationDate": "2015-07-22T10:07:30.960", "LastActivityDate": "2015-07-22T23:21:40.480", "Title": "Can someone explain this C++ program.The result is weird :(", "AcceptedAnswerId": "31562511", "PostTypeId": "1", "Id": "31560073", "Score": "0", "Body": "<p>This is a problem in a test. I expect the result is 1:1 but run it and get the answer 1:5, although I've debug it in Visual C++ 2013 and see the value of the adress which 'a' point to is 1 (the last '1' in 1:1)</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint fact(int *a)\n{\n    if (*a &lt;= 1)\n    {\n        return a[0];\n    }\n    else\n    {\n        return a[0] * fact(&amp;(--*a));\n    }\n}\nint main()\n{\n    int *a = new int;\n    *a = 5;\n    cout &lt;&lt; fact(a) &lt;&lt; \":\" &lt;&lt; *a;\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><visual-c++><c++14>", "OwnerUserId": "5142903", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31560073_31562511_2": {"section_id": 5811, "quality": 1.0, "length": 22}, "so_31560073_31562511_1": {"section_id": 5811, "quality": 1.0, "length": 8}}, "n3337": {"so_31560073_31562511_2": {"section_id": 5584, "quality": 1.0, "length": 22}, "so_31560073_31562511_1": {"section_id": 5584, "quality": 1.0, "length": 8}}, "n4659": {"so_31560073_31562511_2": {"section_id": 7272, "quality": 0.7272727272727273, "length": 16}, "so_31560073_31562511_1": {"section_id": 7272, "quality": 1.0, "length": 8}}}, "31560224": {"ParentId": "31560073", "CommentCount": "2", "Body": "<p>Why do you need to change the value given to function when you can simply use local value?</p>\n<pre><code>int fact(int a)\n{\n    if (a &lt; 2)\n    {\n        return a;\n    }\n    else\n    {\n        return a * fact(a-1);\n    }\n}\n</code></pre>\n", "OwnerUserId": "4386321", "PostTypeId": "2", "Id": "31560224", "Score": "3", "CreationDate": "2015-07-22T10:13:29.313", "LastActivityDate": "2015-07-22T10:13:29.313"}, "31561908": {"ParentId": "31560073", "CommentCount": "0", "Body": "<p>This depends on the compiler. how they handle the temp. values and preecedence of operators.\nEg: on solaris CC the out put is 24:1. on some compilers it will be 120:5 .</p>\n<p>The correct answer must be 120:1. Here is how</p>\n<p>fact called for :5\nelse part. a[0] : 5   return value = 5 * fact(4) =  120</p>\n<p>fact called for :4\nelse part. a[0] : 4   return value = 4*fact(3) = 4* 6 = 24</p>\n<p>fact called for :3\nelse part. a[0] : 3   return value = 3 * fact(2)  = 3*2 = 6</p>\n<p>fact called for :2\nelse part. a[0] : 2   return value = 2*fact(1) = 2*1 = 2</p>\n<p>fact called for :1<br>\nif part . a[0] = 1    return value = 1</br></p>\n", "OwnerUserId": "4886231", "PostTypeId": "2", "Id": "31561908", "Score": "0", "CreationDate": "2015-07-22T11:32:53.370", "LastActivityDate": "2015-07-22T11:32:53.370"}, "31562511": {"ParentId": "31560073", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Your program has undefined behaviour. So it could do anything.</p>\n<p>Your \"full expressions\"</p>\n<pre><code>a[0] * fact(&amp;(--*a));\ncout &lt;&lt; fact(a) &lt;&lt; \":\" &lt;&lt; *a;\n</code></pre>\n<p>do not each have a defined sequence of evaluation for an access of an object (<code>a[0]</code> &amp; <code>*a</code>) and a side effect (<code>--*a</code> &amp; <code>fact(a)</code>). This runs afoul of \u00a71.9/15 of the standard:</p>\n<blockquote>\n<p id=\"so_31560073_31562511_0\">Except where noted,</p>\n</blockquote>\n<p>[operators <code>?:</code>, <code>&amp;&amp;</code>, <code>||</code> and <code>,</code>]</p>\n<blockquote>\n<p id=\"so_31560073_31562511_1\">evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.  </p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_31560073_31562511_2\">If a side effect on a scalar object is unsequenced relative to either<br>\n  (a) another side effect on the same scalar object<br>\n  or<br>\n  (b) a value computation using the value of the same scalar object,<br>\n  the behavior is undefined.</br></br></br></br></p>\n</blockquote>\n<p>See <a href=\"https://stackoverflow.com/a/4183735/3404097\">this answer</a> and its question. (Where I got this quote from the standard.)</p>\n<p>One could guess that the compiler, which can detect this violation, makes <code>fact</code> just return 1 without affecting <code>*a</code>, so that <code>fact(*a)</code> returns 1 and <code>*a</code> returns 5. But that's just a guess, and the code could do anything. (You could look at the assembler code to get some idea of what's going on.)</p>\n<p>Programs that have the behaviour that you want involve more temporaries, simpler statements, simpler function specs and simpler program structure. It is not hard to write correct code <em>if</em> you know what not to write and check that you haven't written it. To help you:</p>\n<ul>\n<li>set your compiler options to report more warnings and errors and <em>read its output</em> (much of undefined behaviour can be and is statically detectable by the compiler)</li>\n<li>as you read &amp; write explicitly identify the input &amp; output specification of every function and (sub) expression/statement</li>\n<li>keep explicitly educating yourself about good design</li>\n<li>keep explicitly educating yourself about the language</li>\n</ul>\n", "OwnerUserId": "3404097", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:58:19.717", "Id": "31562511", "Score": "2", "CreationDate": "2015-07-22T12:01:12.547", "LastActivityDate": "2015-07-22T23:21:40.480"}});