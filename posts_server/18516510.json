post_cb({"18516510": {"CommentCount": "0", "AcceptedAnswerId": "18516546", "PostTypeId": "1", "LastEditorUserId": "68587", "CreationDate": "2013-08-29T16:38:52.707", "LastActivityDate": "2013-08-29T17:12:35.260", "LastEditDate": "2013-08-29T16:41:53.533", "ViewCount": "574", "FavoriteCount": "1", "Title": "Sequence point from function call?", "Id": "18516510", "Score": "7", "Body": "<p>This is yet another sequence-point question, but a rather simple one:</p>\n<pre><code>#include &lt;stdio.h&gt;\nvoid f(int p, int) {\n  printf(\"p: %d\\n\", p);\n}\n\nint g(int* p) {\n  *p = 42;\n  return 0;\n}\n\nint main() {\n  int p = 0;\n  f(p, g(&amp;p));\n  return 0;\n}\n</code></pre>\n<p>Is this undefined behaviour? Or does the call to <code>g(&amp;p)</code> act as a sequence point?</p>\n", "Tags": "<c++><c><undefined-behavior><sequence-points>", "OwnerUserId": "1935175", "AnswerCount": "2"}, "18516546": {"ParentId": "18516510", "CommentCount": "2", "CreationDate": "2013-08-29T16:40:42.137", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "18516546", "Score": "9", "Body": "<p>No. It doesn't invoke <em>undefined</em> behavior. It is just <em>unspecified</em>, as the order in which the function arguments are evaluated is unspecified in the Standard. So the output could be <code>0</code> or <code>42</code> depending on the evaluation order decided by your compiler.</p>\n", "LastActivityDate": "2013-08-29T16:40:42.137"}, "18516712": {"ParentId": "18516510", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-08-29T16:50:17.673", "Score": "4", "LastEditorUserId": "1708801", "LastEditDate": "2013-08-29T17:12:35.260", "Id": "18516712", "OwnerUserId": "1708801", "Body": "<p>The behavior of the program is unspecified since we don't know the order of evaluation of the function arguments, from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> <code>1.9</code> <em>Program execution paragraph 3</em>:</p>\n<blockquote>\n<p id=\"so_18516510_18516712_0\">Certain other aspects and operations of the abstract machine are described in this International Standard <strong>as unspecified (for example, order of evaluation of arguments to a function).</strong> Where possible, this International Standard defines a set of allowable behaviors. [...]</p>\n</blockquote>\n<p>and all side effects from the arguments are sequenced before the function is entered, from section <code>5.2.2</code> <em>Function call paragraph 8</em>:</p>\n<blockquote>\n<p id=\"so_18516510_18516712_1\">[ Note: The evaluations of the postfix expression and of the argument expressions are all unsequenced relative to one another. <strong>All side effects of argument expression evaluations are sequenced before the function is entered</strong> (see 1.9). \u2014end note ]</p>\n</blockquote>\n<p>As for <code>C</code> both points are covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">C99 draft standard</a> in section <code>6.5.2.2</code> <em>Function calls paragraph 10</em>:</p>\n<blockquote>\n<p id=\"so_18516510_18516712_2\">The order of evaluation of the function designator, the actual arguments, and\n  subexpressions within the actual arguments is unspecified, but there is a sequence point\n  before the actual call.</p>\n</blockquote>\n<p>So in both <code>C</code> and <code>C++</code> you can end up with either <code>f(0,0)</code> or <code>f(42,0)</code>.</p>\n", "LastActivityDate": "2013-08-29T17:12:35.260"}, "bq_ids": {"n4140": {"so_18516510_18516712_1": {"section_id": 5995, "quality": 0.72, "length": 18}, "so_18516510_18516712_0": {"section_id": 5799, "quality": 0.8260869565217391, "length": 19}}, "n3337": {"so_18516510_18516712_1": {"section_id": 5763, "quality": 0.84, "length": 21}, "so_18516510_18516712_0": {"section_id": 5572, "quality": 0.9130434782608695, "length": 21}}, "n4659": {"so_18516510_18516712_0": {"section_id": 7258, "quality": 0.8260869565217391, "length": 19}}}});