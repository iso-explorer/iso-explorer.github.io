post_cb({"27489923": {"LastActivityDate": "2014-12-15T19:47:55.710", "CommentCount": "10", "Body": "<p>The standard explicitly forbids an exception specification from appearing in a <code>typedef</code> or an alias declaration. But it also states that the exception specifier may appear in a function pointer type.</p>\n<p><em>\u00a715.4/2</em> <strong>[except.spec]</strong></p>\n<blockquote>\n<p id=\"so_27489558_27489923_0\"><strong>An <em>exception-specification</em> shall appear only on</strong> a function declarator for a function type, <strong>pointer to function type</strong>, reference to function type, or pointer to member function type that is the top-level type of a declaration or definition, or on such a type appearing as a parameter or return type in a function declarator. <strong>An <em>exception-specification</em> shall not appear in a <code>typedef</code> declaration or <em>alias-declaration</em></strong>.</p>\n</blockquote>\n<p>And if a pointer to function does have an exception specification, then that function pointer must always be assigned a function type that has a compatible exception specification.</p>\n<p><em>\u00a715.4/5</em></p>\n<blockquote>\n<p id=\"so_27489558_27489923_1\"><code>...</code> A similar restriction applies to assignment to and initialization of pointers to\n  functions, pointers to member functions, and references to functions: <strong>the target entity shall allow at least the exceptions allowed by the source value in the assignment or initialization</strong>. <code>...</code></p>\n</blockquote>\n<p>Using these two, you can get the <code>noexcept</code> specification into the function pointer type in a roundabout fashion.</p>\n<pre><code>void (*foo_ptr)(void *) noexcept = nullptr;\nusing function_type = decltype(foo_ptr);\n</code></pre>\n<p>Now, you cannot assign a function without a <code>noexcept(true)</code> specification to a function pointer of type <code>function_type</code>. <a href=\"http://coliru.stacked-crooked.com/a/4032a29e3bca040b\" rel=\"nofollow\">clang will fail to compile</a> the code with the error</p>\n<blockquote>\n<p id=\"so_27489558_27489923_2\">error: target exception specification is not superset of source</p>\n</blockquote>\n", "CreationDate": "2014-12-15T17:45:20.857", "LastEditDate": "2014-12-15T19:47:55.710", "ParentId": "27489558", "Id": "27489923", "LastEditorUserId": "241631", "PostTypeId": "2", "Score": "9", "OwnerUserId": "241631"}, "27489558": {"CreationDate": "2014-12-15T17:23:05.180", "ViewCount": "747", "Id": "27489558", "AcceptedAnswerId": "27489923", "Score": "8", "Title": "How do I create an alias for a noexcept function pointer?", "LastEditorUserId": "3561240", "CommentCount": "3", "Body": "<p>I'd like to do this:</p>\n<pre><code>using function_type = void (*)(void*)noexcept;\n</code></pre>\n<p>But I get an error \"exception specifications are not allowed in type aliases.\" (clang in version 6.1 of Xcode)</p>\n<p>Is there a workaround to create an alias with a noexcept specifier?</p>\n<p>I'm looking for something that works as defined by the language (not an extension) for cross-platform capabilities.</p>\n", "Tags": "<c++><c++11><function-pointers><noexcept>", "LastEditDate": "2014-12-15T17:30:20.547", "LastActivityDate": "2014-12-15T19:47:55.710", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "3561240"}, "27490076": {"CommentCount": "0", "Body": "<p>An alternative to Praetorian's answer, which doesn't involve declaring a variable:</p>\n<pre><code>void unused_function(void*)noexcept;\nusing function_type = decltype(&amp;unused_function);\n</code></pre>\n<p>The <code>unused_function</code> is declared, but not defined.</p>\n", "CreationDate": "2014-12-15T17:53:49.700", "ParentId": "27489558", "Id": "27490076", "LastActivityDate": "2014-12-15T17:53:49.700", "PostTypeId": "2", "Score": "3", "OwnerUserId": "3561240"}, "bq_ids": {"n4140": {"so_27489558_27489923_0": {"length": 33, "quality": 1.0, "section_id": 3364}, "so_27489558_27489923_1": {"length": 22, "quality": 1.0, "section_id": 3367}}, "n3337": {"so_27489558_27489923_0": {"length": 33, "quality": 1.0, "section_id": 3234}, "so_27489558_27489923_1": {"length": 22, "quality": 1.0, "section_id": 3237}}}});