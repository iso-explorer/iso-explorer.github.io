post_cb({"13464482": {"ParentId": "13464387", "CommentCount": "0", "Body": "<p>The standard doesn't make a distinction between scoped and unscoped enumerations when it comes to the value of the first enumerator that doesn't specify an initializer.</p>\n<p>From \u00a77.2/2 <strong>[dcl.enum]</strong></p>\n<blockquote>\n<p id=\"so_13464387_13464482_0\">The enumeration type declared with an <em>enum-key</em> of only <code>enum</code> is an\n  unscoped enumeration, and its <em>enumerators</em> are <em>unscoped enumerators</em>.\n  The <em>enum-keys</em> <code>enum class</code> and <code>enum struct</code> are semantically equivalent;\n  an enumeration type declared with one of these is a <em>scoped\n  enumeration</em>, and its <em>enumerators</em> are <em>scoped enumerators</em>. [...] <strong>If the\n  first <em>enumerator</em> has no <em>initializer</em>, the value of the corresponding\n  constant is zero</strong>. [...]</p>\n</blockquote>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "13464482", "Score": "6", "CreationDate": "2012-11-19T23:49:47.707", "LastActivityDate": "2012-11-19T23:49:47.707"}, "13464468": {"ParentId": "13464387", "CommentCount": "0", "Body": "<p>The initialization for the enum values didn't change: Unless you give a different initial value, they will start with zero and count up from the previous value. The relevant section is in 7.2 [dcl.enum] paragraph 2:</p>\n<blockquote>\n<p id=\"so_13464387_13464468_0\">If the first enumerator has no initializer, the value of the corresponding constant is zero. An enumerator-definition without an initializer gives the enumerator the value obtained by increasing the value of the previous enumerator by one.</p>\n</blockquote>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "13464468", "Score": "5", "CreationDate": "2012-11-19T23:48:01.243", "LastActivityDate": "2012-11-19T23:48:01.243"}, "13464387": {"CommentCount": "3", "ViewCount": "759", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-11-19T23:39:56.730", "LastActivityDate": "2012-11-20T03:26:19.900", "Title": "Are the new typesafe enums defined to begin at 0?", "AcceptedAnswerId": "13464486", "LastEditDate": "2012-11-20T03:26:19.900", "Id": "13464387", "Score": "2", "Body": "<p>Given the following C++11 code</p>\n<pre><code>enum class Foods {\n  Apple,\n  Pear,\n  Banana\n};\n</code></pre>\n<p>will</p>\n<pre><code>std::cout &lt;&lt; (unsigned int)Foods::Apple &lt;&lt; std::endl;\n</code></pre>\n<p>output 0?</p>\n<p>This is true for MSVC 2012 and gcc 4.7.0 however I'm more interested in what the C++11 standard specifies we may rely on. That is, can portable code depend on enumerations defaulting to 0 for the value of the first item? </p>\n", "Tags": "<c++><enums><c++11>", "OwnerUserId": "439902", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_13464387_13464468_0": {"section_id": 5461, "quality": 1.0, "length": 18}, "so_13464387_13464482_0": {"section_id": 5461, "quality": 0.8378378378378378, "length": 31}, "so_13464387_13464486_0": {"section_id": 5461, "quality": 1.0, "length": 18}}, "n3337": {"so_13464387_13464468_0": {"section_id": 5248, "quality": 1.0, "length": 18}, "so_13464387_13464482_0": {"section_id": 5248, "quality": 0.8378378378378378, "length": 31}, "so_13464387_13464486_0": {"section_id": 5248, "quality": 1.0, "length": 18}}, "n4659": {"so_13464387_13464468_0": {"section_id": 6895, "quality": 1.0, "length": 18}, "so_13464387_13464482_0": {"section_id": 6895, "quality": 0.7837837837837838, "length": 29}, "so_13464387_13464486_0": {"section_id": 6895, "quality": 1.0, "length": 18}}}, "13464486": {"ParentId": "13464387", "CommentCount": "0", "Body": "<p>Yes, they are. It's in \u00a77.2/2:</p>\n<blockquote>\n<p id=\"so_13464387_13464486_0\">[...] If the first enumerator has no initializer, the value of the corresponding constant is zero. An enumerator-definition without an initializer gives the enumerator the value obtained by increasing the value of the previous enumerator by one.</p>\n</blockquote>\n<p>This section covers both <code>enum class</code> declarations and regular <code>enum</code> declarations</p>\n", "OwnerUserId": "1030301", "PostTypeId": "2", "Id": "13464486", "Score": "4", "CreationDate": "2012-11-19T23:49:54.447", "LastActivityDate": "2012-11-19T23:49:54.447"}});