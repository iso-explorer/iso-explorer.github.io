post_cb({"bq_ids": {"n4140": {"so_7214623_7215486_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5968}, "so_7214623_7215486_1": {"length": 21, "quality": 0.84, "section_id": 5969}}, "n3337": {"so_7214623_7215486_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5737}, "so_7214623_7215486_1": {"length": 23, "quality": 0.92, "section_id": 5738}}, "n4659": {"so_7214623_7215486_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7466}, "so_7214623_7215486_1": {"length": 21, "quality": 0.84, "section_id": 7467}}}, "7215486": {"Id": "7215486", "PostTypeId": "2", "Body": "<p>5.1.2/9:</p>\n<blockquote>\n<p id=\"so_7214623_7215486_0\">The reaching scope of a local lambda expression is the set of\n  enclosing scopes up to and including the innermost enclosing function\n  and its parameters.</p>\n</blockquote>\n<p>and 5.1.2/10:</p>\n<blockquote>\n<p id=\"so_7214623_7215486_1\">The identifiers in a capture-list are looked up using the usual rules\n  for unqualified name lookup (3.4.1); each such lookup shall find a\n  variable with automatic storage duration declared in the reaching\n  scope of the local lambda expression.</p>\n</blockquote>\n<p>As <code>num</code> is neither declared in any function scope nor has automatic storage duration, it cannot be captured. Thus VS is right and g++ is wrong.</p>\n", "LastActivityDate": "2011-08-27T15:28:28.387", "CommentCount": "1", "CreationDate": "2011-08-27T15:28:28.387", "ParentId": "7214623", "Score": "7", "OwnerUserId": "775806"}, "7214780": {"Id": "7214780", "PostTypeId": "2", "Body": "<p>Standard says the following (5.1.2):</p>\n<p>The identifiers in a capture-list are looked up using the usual rules for unqualified name lookup (3.4.1); each\n   such lookup shall find a variable with automatic storage duration declared in the reaching scope of the local\n    lambda expression.</p>\n<p>To my understanding GCC compiler is right because 'num' is in the reaching scope at the point of lambda declaration.</p>\n", "LastActivityDate": "2011-08-27T13:14:24.507", "CommentCount": "1", "CreationDate": "2011-08-27T13:14:24.507", "ParentId": "7214623", "Score": "0", "OwnerUserId": "861232"}, "7214623": {"ViewCount": "6358", "Body": "<p>For example:</p>\n<pre><code>class Example\n{\npublic:\n    explicit Example(int n) : num(n) {}\n    void addAndPrint(vector&lt;int&gt;&amp; v) const\n    {\n        for_each(v.begin(), v.end(), [num](int n) { cout &lt;&lt; num + n &lt;&lt; \" \"; });\n    }\nprivate:\n    int num;\n};\n\nint main()\n{\n    vector&lt;int&gt; v = { 0, 1, 2, 3, 4 };\n\n    Example ex(1);\n    ex.addAndPrint(v);\n    return 0;\n}\n</code></pre>\n<p>When you compile and run this in MSVC2010 you get the following error:</p>\n<p><strong>error C3480: 'Example::num': a lambda capture variable must be from an enclosing function scope</strong></p>\n<p>However, with g++ 4.6.2 (prerelease) you get:</p>\n<p><strong>1 2 3 4 5</strong></p>\n<p>Which compiler is right according to the standard draft?</p>\n", "AcceptedAnswerId": "7215486", "Title": "Rule for lambda capture variable", "CreationDate": "2011-08-27T12:42:13.687", "Id": "7214623", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2012-05-29T15:03:16.463", "LastEditorUserId": "500104", "LastActivityDate": "2012-05-29T15:03:16.463", "Score": "7", "OwnerUserId": "906773", "Tags": "<c++><visual-c++><lambda><c++11><g++>", "AnswerCount": "2"}});