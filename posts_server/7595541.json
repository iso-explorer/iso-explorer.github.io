post_cb({"bq_ids": {"n4140": {"so_7595541_7595541_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 14}, "so_7595541_7595654_1": {"length": 15, "quality": 0.9375, "section_id": 7228}}, "n3337": {"so_7595541_7595654_1": {"length": 15, "quality": 0.9375, "section_id": 6972}, "so_7595541_7595541_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 11}}, "n4659": {"so_7595541_7595654_1": {"length": 14, "quality": 0.875, "section_id": 8738}, "so_7595541_7595541_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 19}}}, "7595541": {"ViewCount": "174", "Body": "<p>From (4.4/1 ) It reads </p>\n<blockquote>\n<p id=\"so_7595541_7595541_0\">An rvalue of type \u201cpointer to cv1 T\u201d can be converted to an rvalue of\n  type \u201cpointer to cv2 T\u201d if \u201ccv2 T\u201d is more cv-qualified than \u201ccv1 T.\u201d</p>\n</blockquote>\n<p>I don't know where the standard defines 'more cv-qualifield' type but as I understood a declarator with const is more cv-qualified than than a non-const.</p>\n<p>For following conversions, how does the quote from standard fits in or how you know which one is less or more cv-qualifed?</p>\n<pre><code>int *const c1 = 0;\nint const* c2 = 0;\nconst int *const c3 = 0;\n\nc1 = c2; // allowed\nc1 = c3; // allowed\n</code></pre>\n<p><strong>Update:</strong></p>\n<pre><code>c2 = c1;\nc2 = c3;\n</code></pre>\n", "AcceptedAnswerId": "7595609", "Title": "const qualification conversion", "CreationDate": "2011-09-29T09:54:34.483", "Id": "7595541", "CommentCount": "1", "LastEditDate": "2011-09-29T10:13:31.550", "PostTypeId": "1", "LastEditorUserId": "187543", "LastActivityDate": "2011-09-29T10:13:31.550", "Score": "3", "OwnerUserId": "187543", "Tags": "<c++><const><implicit-conversion><qualifiers>", "AnswerCount": "3"}, "7595654": {"Id": "7595654", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_7595541_7595654_0\">I don't know where the standard defines 'more cv-qualifield' type</p>\n</blockquote>\n<p>It is \u00a73.9.3/4</p>\n<blockquote>\n<p id=\"so_7595541_7595654_1\">There is a (partial) ordering on cv-qualifiers, so that a type can be said to be <strong>more cv-qualified</strong> than another. Table 6 shows the relations that constitute this ordering.</p>\n<p id=\"so_7595541_7595654_2\">Table 6\u2014relations on const and volatile</p>\n<hr>\n<pre><code>no cv-qualifier  &lt;  const  \nno cv-qualifier  &lt;  volatile   \nno cv-qualifier  &lt;  const volatile   \nconst            &lt;  const volatile   \nvolatile         &lt;  const volatile  \n</code></pre>\n</hr></blockquote>\n<p>That is, </p>\n<ul>\n<li><code>const T</code> is <em>more cv-qualified</em> than <code>T</code>.</li>\n<li><code>volatile T</code> is <em>more cv-qualified</em> than <code>T</code>.</li>\n<li><code>const volatile T</code> is <em>more cv-qualified</em> than <code>T</code>.</li>\n<li><code>const volatile T</code> is <em>more cv-qualified</em> than <code>const T</code>.</li>\n<li><code>const volatile T</code> is <em>more cv-qualified</em> than <code>volatile T</code>.</li>\n</ul>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-09-29T10:10:49.320", "Score": "2", "CreationDate": "2011-09-29T10:02:18.143", "ParentId": "7595541", "CommentCount": "2", "OwnerUserId": "415784", "LastEditDate": "2011-09-29T10:10:49.320"}, "7595609": {"Id": "7595609", "PostTypeId": "2", "Body": "<p>Table 6 in 3.9.3/4 gives the partial ordering of cv-qualifiers and 3.9.3/4 also gives the definition of <em>more cv-qualified</em>.</p>\n<ul>\n<li><em>no cv-qualifier</em> &lt; <code>const</code></li>\n<li><em>no cv-qualifier</em> &lt; <code>volatile</code></li>\n<li><em>no cv-qualifier</em> &lt; <code>const volatile</code></li>\n<li><code>const</code> &lt; <code>const volatile</code></li>\n<li><code>volatile</code> &lt; <code>const volatile</code></li>\n</ul>\n", "LastActivityDate": "2011-09-29T09:59:45.063", "CommentCount": "5", "CreationDate": "2011-09-29T09:59:45.063", "ParentId": "7595541", "Score": "5", "OwnerUserId": "19563"}, "7595582": {"Id": "7595582", "PostTypeId": "2", "Body": "<p>Since <code>c1</code> is a <code>const</code> pointer variable (which is different to a pointer to constant data), it cannot be modified. Therefore, both assignments are illegal. </p>\n<p>What the standard refers to is this case:</p>\n<pre><code>int *d1 = 0;\nconst int* d2 = d1; // d2 is more cv-qualified than d1\nconst volatile int* d3 = d1; // d3 is more cv-qualified than d2\n</code></pre>\n", "LastActivityDate": "2011-09-29T09:57:55.547", "CommentCount": "0", "CreationDate": "2011-09-29T09:57:55.547", "ParentId": "7595541", "Score": "4", "OwnerUserId": "234053"}});