post_cb({"22621380": {"CommentCount": "0", "ViewCount": "316", "CreationDate": "2014-03-24T21:53:12.047", "LastActivityDate": "2014-03-24T22:29:04.193", "Title": "Change a variable reference after his initialization", "AcceptedAnswerId": "22621436", "PostTypeId": "1", "Id": "22621380", "Score": "3", "Body": "<p>In the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf%E2%80%8E\" rel=\"nofollow\">C++ standard</a> you can read that (8.5.3.2 pag.202)</p>\n<blockquote>\n<p id=\"so_22621380_22621380_0\">\"A reference cannot be changed to refer to another object after\n  initialization.\"</p>\n</blockquote>\n<p>but what about the following code</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main(int argc, const char * argv[])\n{\n    int i = 1;\n    int &amp;j = i;\n\n    j = 2; // Ok, now i == 2\n\n    int k = 3;\n\n    j = std::ref(k);\n\n    std::cout &lt;&lt; \"j = \" &lt;&lt; j &lt;&lt; \", i = \" &lt;&lt; i &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>that produces this output</p>\n<pre><code>j = 3, i = 3\n</code></pre>\n<p>is it realy wrong? is a compiler's \"feature\" or a C++ language's \"feature\"? I compiled this code's fragment either on mac (LLVM 5.1) and windows (VS2010).  </p>\n", "Tags": "<c++><c++11><standards>", "OwnerUserId": "3009071", "AnswerCount": "1"}, "22621436": {"ParentId": "22621380", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-03-24T21:56:17.747", "Score": "7", "LastEditorUserId": "1692107", "LastEditDate": "2014-03-24T22:29:04.193", "Id": "22621436", "OwnerUserId": "1692107", "Body": "<p>The line </p>\n<pre><code> j = std::ref(k);\n</code></pre>\n<p>Has exactly the same effect has</p>\n<pre><code> j = k\n</code></pre>\n<p>That is the reference <code>std::ref(k)</code> is implicitly dereferenced before assignement to <code>k</code> that is also to <code>i</code>. So no wonder the behavior you are seeing. As a proof, just change your code as</p>\n<pre><code>int i = 1;\nint &amp;j = i;\nj = 2; // Ok, now i == 2\nint k = 3;\nj = std::ref(k);\nstd::cout &lt;&lt; \"j = \" &lt;&lt; j &lt;&lt; \", i = \" &lt;&lt; i &lt;&lt; std::endl;\nk = 5;\nstd::cout &lt;&lt; \"j = \" &lt;&lt; j &lt;&lt; \", i = \" &lt;&lt; i &lt;&lt; std::endl;\n</code></pre>\n<p>Then the output is</p>\n<pre><code>j = 3, i = 3\nj = 3, i = 3\n</code></pre>\n<p>which shows that <code>j</code> is not a reference to <code>k</code>. Changing <code>k</code> doesn't change <code>j</code>.  </p>\n", "LastActivityDate": "2014-03-24T22:29:04.193"}, "bq_ids": {"n4140": {"so_22621380_22621380_0": {"section_id": 3318, "quality": 1.0, "length": 8}}, "n3337": {"so_22621380_22621380_0": {"section_id": 3188, "quality": 1.0, "length": 8}}, "n4659": {"so_22621380_22621380_0": {"section_id": 4084, "quality": 1.0, "length": 8}}}});