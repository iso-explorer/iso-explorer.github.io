post_cb({"21468844": {"ParentId": "21468642", "CommentCount": "0", "Body": "<p>When you insert an object into a vector, a copy of the object is (normally) made using the object's copy constructor. Your copy constructor does nothing, so the <code>energy</code> value of the copied photon is left uninitialized. To fix this, make the copy constructor of <code>Photon</code> copy over the <code>energy</code> value from the original photon.</p>\n<pre><code>Photon::Photon(const Photon&amp; orig): energy(orig.energy) {\n    // etc.\n}\n</code></pre>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "21468844", "Score": "3", "CreationDate": "2014-01-30T22:32:16.703", "LastActivityDate": "2014-01-30T22:32:16.703"}, "21468950": {"ParentId": "21468642", "PostTypeId": "2", "CommentCount": "9", "Body": "<p><code>push_back</code> makes use of <code>Photon</code>'s copy constructor, at the moment it appears that does nothing so it would result in a <code>Photon</code> that has randomly initialized values.</p>\n<p>If you're on a compiler that supports C++11 you can skip implementing one by just defining it as </p>\n<pre><code>Photon(const Photon&amp;) = default;\n</code></pre>\n<p>in your header, this tells the compiler that you want a full copy of the entire object. If you don't define one the compiler will generate one for you. There are readability reasons however that would encourage using defaulting however.</p>\n<p>In this particular case if your compiler supports C++11 you can always just use <code>emplace_back</code> and construct the object in place in the vector.</p>\n<pre><code>photons.emplace_back(data);\n</code></pre>\n", "OwnerUserId": "332733", "LastEditorUserId": "332733", "LastEditDate": "2014-01-30T23:15:34.923", "Id": "21468950", "Score": "4", "CreationDate": "2014-01-30T22:39:26.527", "LastActivityDate": "2014-01-30T23:15:34.923"}, "21469852": {"ParentId": "21468642", "CommentCount": "0", "Body": "<h3>Short</h3>\n<p>You just want to remove the copy-constructor of your class <code>Photon::Photon(const Photon&amp; orig) {}</code> and it should work.</p>\n<p><em>Note: You can also remove the destructor since you probably don't need it.</em></p>\n<p><em>Note2: A default copy constructor (which will be auto-generated if you remove yours) requires the members of <code>Photon</code> to either be trivially copyable or to have a copy constructor on their own.</em></p>\n<h2>The problem</h2>\n<p>In fact your <code>Photon</code> copy constructor is empty. Therefore every fundamental-type value or POD is default initialized (with random values).</p>\n<p>The standard says:</p>\n<h3>C++11, [class.base.init], 12.6.2/8</h3>\n<blockquote>\n<p id=\"so_21468642_21469852_0\">In a non-delegating constructor, if a given non-static data member is not designated by a\n  mem-initializer-id (<strong>including the case where there is no mem-initializer-list because the constructor has no ctor-initializer</strong>) and the entity is not a virtual base class of an abstract class (10.4), then:</p>\n<p id=\"so_21468642_21469852_1\">[...]</p>\n<ul>\n<li>otherwise, the entity is <strong>default-initialized</strong>.</li>\n</ul>\n</blockquote>\n<p>What means default initialized here?</p>\n<h3>C++11, 8.5/11</h3>\n<blockquote>\n<p id=\"so_21468642_21469852_2\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, <strong>an object with automatic or dynamic storage duration has indeterminate value.</strong></p>\n</blockquote>\n<p>That means if you do not provide a <em>member-initializer-list</em> for your (copy)constructor and if you do not assign meaningful values in the (copy)constructor, you'll end up having garbage in your values after the (copy)constructor is done.</p>\n<p>So in the line <code>photons.push_back(p);</code> you copy p into the vector where you'll end up having a garbage-initialized entry.</p>\n<h2>Solution</h2>\n<p>So my advice is a follows: Strip the following functions and design a default constructor providing meaningful values for the members.</p>\n<p><em>Remove:</em></p>\n<pre><code>Photon::Photon(const Photon&amp; orig) {}\nPhoton::~Photon() {}\n</code></pre>\n<p><em>Add:</em></p>\n<pre><code>Photo::Photon (void) : \n  momentum(/*any value required by Momentum constructor*/), \n  energy(0.0) \n{\n}\n</code></pre>\n<p>You don't need the destructor since you don't manage resources. Therefore, you also do not need to provide a copy constructor since the compiler will simply provide one for you that will copy each member of your Photon class.</p>\n<p>Your example using <code>push_back</code> should work then but you can also use <code>emplace_back</code> if you use a C++11 compiler since the will just \"hand-over\" its parameters to a suitable constructor.</p>\n<p>Instead of</p>\n<pre><code>Photon p(data); // the string data is parsed in constructor\nphotons.push_back(p);\n</code></pre>\n<p>you can also just</p>\n<pre><code>photons.emplace_back(data); \n</code></pre>\n<p>You won't make any copies here since the new object in the vector will be constructed using the data string in place.</p>\n<h3>Note on defaulting the copy constructor in C++11</h3>\n<pre><code>Photon(const Photon&amp;) = default;\n</code></pre>\n<p>The explicit defaulting of the copy constructor is not more readable in my opinion but you may want to explicitly default it if you do not want it to be public but protected (or even private). </p>\n<p>Implicit constructors, destructors and assignment operators are <code>inline public</code> members of their class by default.</p>\n", "OwnerUserId": "951423", "PostTypeId": "2", "Id": "21469852", "Score": "3", "CreationDate": "2014-01-30T23:41:58.237", "LastActivityDate": "2014-01-30T23:41:58.237"}, "21468642": {"CommentCount": "3", "ViewCount": "610", "PostTypeId": "1", "LastEditorUserId": "1576523", "CreationDate": "2014-01-30T22:19:55.640", "LastActivityDate": "2014-01-30T23:41:58.237", "Title": "C++ push_back into array changes object's variables", "AcceptedAnswerId": "21468950", "LastEditDate": "2014-01-30T22:28:35.863", "Id": "21468642", "Score": "1", "Body": "<p>I am new to C++, and am doing a physics project with it.\nThere is a problem that I've run into:\nI have made a <strong><code>Photon</code></strong> class that has a member var called <strong><code>energy</code></strong> (float).\nIn a loop (which parses a txt file of values), when ever I create a new <strong><code>Photon</code></strong>, I assign it a certain <strong><code>energy</code></strong> (as a string - which I later convert to float) through a constructor.\nThen I push the <strong><code>photon</code></strong> into the a <strong>Photon vector</strong>. When I <strong><code>cout</code></strong> the energies right after <strong><code>Photon</code></strong> creation, they are as expected, and correspond correctly to txt file.</p>\n<p>But, immediately after the loop when I loop again through the <strong>vector of Photons</strong>, and print <code>photons[i].energy</code>, the values are weirdly changed - some of them even <strong><code>NaN</code></strong>!</p>\n<pre><code>void Event::addPhoton(string data) {\n    Photon p(data); // the string data is parsed in constructor\n    cout &lt;&lt; \"the energy: \" &lt;&lt; p.energy &lt;&lt; \" \\n\"; // energies output here are correct\n    photons.push_back(p);\n\n    // BUG somewhere here\n    cout &lt;&lt; \"Update: Just added a photon. Current photon energies: ***\" &lt;&lt; endl;\n    for (int i = 0; i &lt; photons.size(); i++) {\n        cout &lt;&lt; photons[i].energy &lt;&lt; \", \"; // here, values have changed !!\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>\n<p>Any ideas?</p>\n<p>Update - Photon class:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n\n#include \"Photon.h\"\n\nPhoton::Photon() {\n\n}\n\nPhoton::Photon(const Photon&amp; orig) {\n}\n\nPhoton::~Photon() {\n}\n\nPhoton::Photon(string data) {\n    setData(data);\n    std::cout &lt;&lt; \"Set photon energy to \" &lt;&lt; energy &lt;&lt; std::endl;\n}\n\n//parse momentum, energy values .. from data string\nvoid Photon::setData(string data) {\n    std::cout &lt;&lt; \"datastring\" &lt;&lt; data &lt;&lt; std::endl;\n    string delimiter = \" \";\n    size_t pos = 0;\n    string token;\n    vector&lt;string&gt; values;\n\n    size_t numDels = std::count(data.begin(), data.end(), ' ');\n\n    ///while ((pos = data.find(delimiter)) != string::npos ) {\n    for (int i = 0; i &lt; numDels+1; i++) {\n        pos = data.find(delimiter);\n        token = data.substr(0, pos);\n        values.push_back(token);\n        data.erase(0, pos + delimiter.length());\n    }\n\n    momentum = Momentum(atof(values[0].c_str()), atof(values[1].c_str()), atof(values[2].c_str()));\n\n    energy = atof(values[3].c_str());\n}\n\nfloat Photon::getEnergy() {\n    return energy;\n}\n</code></pre>\n", "Tags": "<c++><vector><physics>", "OwnerUserId": "1576523", "AnswerCount": "4"}, "21468752": {"ParentId": "21468642", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You need to give us the code, that produces the bug.</p>\n<p>By the way the energy member should be float.\nIf your input source is a text file, the energy values should be parsed to a floating point number (float or double) before being passed to the Photon constructor.</p>\n<p>If you just want to achieve a memberwise copying you can even omit the copy constructor. The C++ compiler will generate one for you.</p>\n", "OwnerUserId": "2056153", "LastEditorUserId": "2056153", "LastEditDate": "2014-01-30T22:40:13.773", "Id": "21468752", "Score": "2", "CreationDate": "2014-01-30T22:26:22.457", "LastActivityDate": "2014-01-30T22:40:13.773"}, "bq_ids": {"n4140": {"so_21468642_21469852_0": {"section_id": 435, "quality": 0.7083333333333334, "length": 17}, "so_21468642_21469852_2": {"section_id": 3291, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_21468642_21469852_0": {"section_id": 427, "quality": 0.9583333333333334, "length": 23}, "so_21468642_21469852_2": {"section_id": 3161, "quality": 1.0, "length": 14}}, "n4659": {"so_21468642_21469852_0": {"section_id": 454, "quality": 0.7083333333333334, "length": 17}, "so_21468642_21469852_2": {"section_id": 4053, "quality": 0.8571428571428571, "length": 12}}}});