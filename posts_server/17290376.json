post_cb({"17290474": {"ParentId": "17290376", "CommentCount": "0", "Body": "<p>C++11 Standard says:</p>\n<blockquote id=\"so_17290376_17290474_0\">\n7.1.6.1<br/>\n(...)<br/>\n4 Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const\nobject during its lifetime (3.8) results in undefined behavior.\n</blockquote>\n<p>That means, that you cannot expect anything, when attempting to do this. It may work, it may not, exception may be thrown, program may be terminated, depending on how designers of your compiler designed it.</p>\n", "OwnerUserId": "453803", "PostTypeId": "2", "Id": "17290474", "Score": "1", "CreationDate": "2013-06-25T06:22:29.970", "LastActivityDate": "2013-06-25T06:22:29.970"}, "17290376": {"CommentCount": "7", "AcceptedAnswerId": "17290493", "PostTypeId": "1", "ClosedDate": "2013-06-25T20:22:25.487", "LastEditorUserId": "1414696", "CreationDate": "2013-06-25T06:17:42.363", "LastActivityDate": "2013-06-25T07:02:53.297", "LastEditDate": "2013-06-25T07:02:53.297", "ViewCount": "2060", "FavoriteCount": "1", "Title": "C++ const_cast does not remove the const-ness of variable", "Id": "17290376", "Score": "-3", "Body": "<p>I tried executing the following program.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\nconst int a = 0;\ncout &lt;&lt; &amp;a &lt;&lt;endl;\nint* ptr = const_cast&lt;int*&gt;(&amp;a);\n*ptr = 2;\ncout &lt;&lt; ptr &lt;&lt;endl;\ncout &lt;&lt; *ptr &lt;&lt;endl;\ncout &lt;&lt; a &lt;&lt;endl;\nreturn 0;\n}\n</code></pre>\n<p>The output was:</p>\n<pre><code>   0xbf92ebd8\n   0xbf92ebd8\n   2\n   0\n</code></pre>\n<p>From what I know, const_cast makes <em>a</em> mutable, so that, it can be changed. The change is reflected when I display *ptr, but the change is not reflected in <em>a</em>. \nCan anyone explain ?</p>\n<p>EDIT:\nThanks for all the answers. I get it that I am observing an undefined behavior. And, I was initially confusing between <em>mutable</em> and *const_cast*.\nBut then, could you tell me for what all scenarios, do we use const_cast?</p>\n", "Tags": "<c++><pointers><casting><const-cast>", "OwnerUserId": "1414696", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17290376_17290493_0": {"section_id": 6057, "quality": 0.9090909090909091, "length": 20}, "so_17290376_17290474_0": {"section_id": 5433, "quality": 0.8947368421052632, "length": 17}, "so_17290376_17290493_2": {"section_id": 5768, "quality": 0.9259259259259259, "length": 25}, "so_17290376_17290493_1": {"section_id": 5433, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_17290376_17290493_0": {"section_id": 5825, "quality": 0.9090909090909091, "length": 20}, "so_17290376_17290474_0": {"section_id": 5228, "quality": 0.8947368421052632, "length": 17}, "so_17290376_17290493_2": {"section_id": 5541, "quality": 0.9259259259259259, "length": 25}, "so_17290376_17290493_1": {"section_id": 5228, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_17290376_17290493_0": {"section_id": 7555, "quality": 0.9090909090909091, "length": 20}, "so_17290376_17290474_0": {"section_id": 6861, "quality": 0.8947368421052632, "length": 17}, "so_17290376_17290493_2": {"section_id": 7225, "quality": 0.9259259259259259, "length": 25}, "so_17290376_17290493_1": {"section_id": 6861, "quality": 0.9444444444444444, "length": 17}}}, "17290493": {"ParentId": "17290376", "CommentCount": "0", "Body": "<p>From <code>C++03 5.2.1 const_cast /7</code>:</p>\n<blockquote>\n<p id=\"so_17290376_17290493_0\">[Note: Depending on the type of the object, <strong>a write operation through the pointer, lvalue or pointer to data member resulting from a const_cast that casts away a const-qualifier may produce undefined behavior</strong> (7.1.5.1). ]</p>\n</blockquote>\n<p>In <code>7.1.5.1 The cv-qualifiers /4</code>:</p>\n<blockquote>\n<p id=\"so_17290376_17290493_1\">Except that any class member declared mutable (7.1.1) can be modified, <strong>any attempt to modify a const object during its lifetime (3.8) results in undefined behavior.</strong></p>\n</blockquote>\n<p>And, in the terms and definitions section:</p>\n<blockquote>\n<p id=\"so_17290376_17290493_2\">[Note: permissible undefined behavior ranges from <strong>ignoring the situation completely with unpredictable results,</strong> to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p>Minor changes have been made in the latest standard but the general idea still holds. Bottom line, don't do that.</p>\n", "OwnerUserId": "14860", "PostTypeId": "2", "Id": "17290493", "Score": "4", "CreationDate": "2013-06-25T06:24:25.720", "LastActivityDate": "2013-06-25T06:24:25.720"}});