post_cb({"32022085": {"Id": "32022085", "PostTypeId": "2", "Body": "<p>According to <strong><em>ISO IEC 14882:2011(E)</em></strong></p>\n<blockquote>\n<p id=\"so_32021860_32022085_0\"><strong>\u00a7 18.2</strong> 6 The type size_t is an implementation-defined unsigned integer type that is large enough to contain the size in bytes of any\n  object.</p>\n</blockquote>\n<p>That makes <code>std::size_t</code> the natural choice when writing library code that deals with dynamic allocation, particularly with <em>arrays</em> and containers that manage <em>arrays</em>.</p>\n<p>However in your <em>own</em> code, if you <em>know</em> your <em>array</em> is never going to be larger than 15-20 elements (<em>for example</em>) then there is no need to work with <code>std::size_t</code> wide values if you prefer to use something smaller.</p>\n", "LastActivityDate": "2015-08-15T06:06:16.290", "Score": "4", "CreationDate": "2015-08-15T06:06:16.290", "ParentId": "32021860", "CommentCount": "0", "OwnerUserId": "3807729"}, "32022322": {"Id": "32022322", "PostTypeId": "2", "Body": "<h2>TL;DR</h2>\n<p>Do not use <code>unsigned</code> for size/index unless you're forced to for some reason.  In C/C++ <code>unsigned</code> does NOT mean <code>non-negative</code>.</p>\n<p>The face that <code>size_t</code> is an <code>unsigned</code> type in the language and standard library is a <strong>design mistake</strong> explainable only with the historical context of the time when the decision was taken (CPUs were 16-bit back then but RAM was getting large).</p>\n<p>See</p>\n<p><a href=\"https://stackoverflow.com/a/3260179/320726\">https://stackoverflow.com/a/3260179/320726</a>\n<a href=\"https://stackoverflow.com/a/24104825/320726\">https://stackoverflow.com/a/24104825/320726</a>\n<a href=\"https://stackoverflow.com/a/18248537/320726\">https://stackoverflow.com/a/18248537/320726</a>\n<a href=\"https://stackoverflow.com/a/31089063/320726\">https://stackoverflow.com/a/31089063/320726</a>\n<a href=\"https://stackoverflow.com/a/30799874/320726\">https://stackoverflow.com/a/30799874/320726</a>\n<a href=\"https://stackoverflow.com/a/3029941/320726\">https://stackoverflow.com/a/3029941/320726</a></p>\n<p>for more details and examples of bugs that using an unsigned type to represent a quantity may introduce...</p>\n<p><strong>PS</strong>: Unfortunately for reasons that are not clear to me, saying something totally obvious like that the difference of two non-negative values can be negative is seen as a personal offence by a curiously high percentage of C/C++ \"experts\". If you like to be with the majority more than you like to be right then probably jumping on the \"<code>size_t</code> being unsigned is the best idea since sliced bread\" bandwagon is a viable option.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-15T08:36:54.483", "Score": "2", "CreationDate": "2015-08-15T06:49:48.637", "ParentId": "32021860", "CommentCount": "2", "LastEditDate": "2017-05-23T12:14:40.750", "OwnerUserId": "320726"}, "32195955": {"Id": "32195955", "PostTypeId": "2", "Body": "<p>Lots of very good answers... But to keep it simple</p>\n<blockquote>\n<p id=\"so_32021860_32195955_0\">According to\u00a0ISO IEC 14882:2011(E)</p>\n</blockquote>\n<p>\u00a7 18.2\u00a06 The type size_t is an implementation-defined unsigned integer type that is large enough to contain the size in bytes of any object.</p>\n<p>Use it, if you know for sure that you are dealing with unsigned integers. For most part you array indexes fit the bill.</p>\n<p>Secondly it is useful when code needs to be platform neutral. Like on a 16bit processor vs 32bit vs 64bit processor unsigned integer will be of different size and hence better to use size_t. Hence extensively used in libraries.</p>\n", "LastActivityDate": "2015-08-25T05:12:22.453", "Score": "1", "CreationDate": "2015-08-25T05:12:22.453", "ParentId": "32021860", "CommentCount": "0", "OwnerUserId": "2322379"}, "bq_ids": {"n4140": {"so_32021860_32022085_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 6708}}, "n3337": {"so_32021860_32022085_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 6463}}, "n4659": {"so_32021860_32022085_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 8183}}}, "32021905": {"Id": "32021905", "PostTypeId": "2", "Body": "<p><code>size_t</code> is an abstraction. You should not be worrying about which primitive type it maps to. Every container has its own <code>size_type</code> type which is usually used to convey the size of the container. In most cases it is a typedef of the allocator class used in the container. Many containers use unsigned primitives but I have seen many external libraries just using <code>signed int</code> as their <code>size_type</code> It is simply an attempt to standardize the size types used in containers. The purpose of <code>size_t</code> is not to be used with a native array. It is meant to be used to return the size of a container or anything that has a \"size\". You most certainly don't want to be making a 'native' array so big that it has more elements than the maximum value of an <code>int</code> </p>\n", "OwnerDisplayName": "user4386938", "LastActivityDate": "2015-08-15T05:37:13.090", "Score": "1", "CreationDate": "2015-08-15T05:37:13.090", "ParentId": "32021860", "CommentCount": "2"}, "32021860": {"ViewCount": "441", "Body": "<p>I'm confused about <code>size_t</code>. I know it's an unsigned type..right?\nMy question is, when should it be used. Is there a reason why it should be used with a regular array? I mean one would have to declare the array size to be really huge, so huge that a regular unsigned or signed wouldn't be able to handle it. And then a <code>size_t</code> would be able to deal with it right? Can someone give me an example?</p>\n", "Title": "C++ - should you size_t with a regular array?", "CreationDate": "2015-08-15T05:29:55.927", "LastActivityDate": "2015-08-25T05:12:22.453", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-08-15T06:46:18.650", "LastEditorUserId": "408351", "Id": "32021860", "Score": "6", "OwnerUserId": "5154086", "Tags": "<c++><arrays><size-t>", "AnswerCount": "4"}});