post_cb({"bq_ids": {"n4140": {"so_12847272_12848540_1": {"length": 6, "quality": 1.0, "section_id": 3296}, "so_12847272_12848540_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 3296}, "so_12847272_12847286_3": {"length": 11, "quality": 1.0, "section_id": 386}, "so_12847272_12847286_1": {"length": 17, "quality": 0.85, "section_id": 384}, "so_12847272_12848540_5": {"length": 12, "quality": 1.0, "section_id": 593}, "so_12847272_12847286_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 385}, "so_12847272_12848540_3": {"length": 19, "quality": 1.0, "section_id": 593}, "so_12847272_12848540_0": {"length": 23, "quality": 0.92, "section_id": 3296}, "so_12847272_12847286_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 383}, "so_12847272_12848540_4": {"length": 21, "quality": 0.875, "section_id": 593}}, "n3337": {"so_12847272_12848540_6": {"length": 45, "quality": 0.9, "section_id": 599}, "so_12847272_12848540_1": {"length": 6, "quality": 1.0, "section_id": 3166}, "so_12847272_12848540_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 3166}, "so_12847272_12847286_1": {"length": 17, "quality": 0.85, "section_id": 375}, "so_12847272_12848540_4": {"length": 21, "quality": 0.875, "section_id": 583}, "so_12847272_12848540_5": {"length": 12, "quality": 1.0, "section_id": 583}, "so_12847272_12847286_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 376}, "so_12847272_12848540_3": {"length": 19, "quality": 1.0, "section_id": 583}, "so_12847272_12848540_0": {"length": 23, "quality": 0.92, "section_id": 3166}, "so_12847272_12847286_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 374}, "so_12847272_12847286_3": {"length": 11, "quality": 1.0, "section_id": 377}}, "n4659": {"so_12847272_12847286_3": {"length": 11, "quality": 1.0, "section_id": 403}, "so_12847272_12848540_1": {"length": 6, "quality": 1.0, "section_id": 4058}, "so_12847272_12848540_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 4058}, "so_12847272_12847286_1": {"length": 17, "quality": 0.85, "section_id": 401}, "so_12847272_12848540_5": {"length": 12, "quality": 1.0, "section_id": 616}, "so_12847272_12847286_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 402}, "so_12847272_12848540_3": {"length": 19, "quality": 1.0, "section_id": 616}, "so_12847272_12848540_0": {"length": 23, "quality": 0.92, "section_id": 4058}, "so_12847272_12847286_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 400}, "so_12847272_12848540_4": {"length": 22, "quality": 0.9166666666666666, "section_id": 616}}}, "12848540": {"Id": "12848540", "PostTypeId": "2", "Body": "<p>Since this construction is perfectly legal </p>\n<pre><code>A a4((C()));\n</code></pre>\n<p>problem is, that you use copy initization. Really, your example is equal to</p>\n<pre><code>A a4((A(C()));\n</code></pre>\n<p>8.5/16\n<blockquote><p id=\"so_12847272_12848540_0\">\nThe semantics of initializers are as follows. The destination type is the type of the object or reference being\ninitialized and the source type is the type of the initializer expression. If the initializer is not a single (possibly\nparenthesized) expression, the source type is not defined.</p>\n<p id=\"so_12847272_12848540_1\">If the destination type is a (possibly cv-qualified) class type:</p>\n<p id=\"so_12847272_12848540_2\">\u2014 Otherwise (i.e., for the remaining copy-initialization cases), user-defined conversion sequences\nthat can convert from the source type to the destination type or (when a conversion function\nis used) to a derived class thereof are enumerated as described in 13.3.1.4, and the best one is\nchosen through overload resolution (13.3).</p></blockquote></p>\n<p>13.3.1.4/1\n<blockquote><p id=\"so_12847272_12848540_3\">\nUnder the conditions specified in 8.5, as part of a copy-initialization of an object of class type, a user-defined\nconversion can be invoked to convert an initializer expression to the type of the object being initialized.</p>\n<p id=\"so_12847272_12848540_4\">Overload resolution is used to select the user-defined conversion to be invoked. Assuming that \u201ccv1 T\u201d is\nthe type of the object being initialized, with T a class type, the candidate functions are selected as follows:\n\u2014 The converting constructors (12.3.1) of T are candidate functions.</p>\n<p id=\"so_12847272_12848540_5\">\u2014 When the type of the initializer expression is a class type \u201ccv S\u201d, the non-explicit conversion functions of\nS and its base classes are considered.</p></blockquote></p>\n<p>13.3.3.1/4\n<blockquote><p id=\"so_12847272_12848540_6\">\nHowever, when considering the argument of a constructor or user-defined conversion function that is a\ncandidate by 13.3.1.3 when invoked for the copying/moving of the temporary in the second step of a class\ncopy-initialization, by 13.3.1.7 when passing the initializer list as a single argument or when the initializer\nlist has exactly one element and a conversion to some class X or reference to (possibly cv-qualified) X is\nconsidered for the first parameter of a constructor of X, or by <strong>13.3.1.4</strong>, 13.3.1.5, or 13.3.1.6 in all cases, <strong>only\nstandard conversion sequences and ellipsis conversion sequences are considered.</strong></p></blockquote></p>\n<p>Your user-defined conversion (C -&gt; B) is not considered in this case.</p>\n", "LastActivityDate": "2012-10-11T21:08:04.600", "CommentCount": "0", "CreationDate": "2012-10-11T21:08:04.600", "ParentId": "12847272", "Score": "1", "OwnerUserId": "1498580"}, "12847286": {"Id": "12847286", "PostTypeId": "2", "Body": "<p>There is no multi-step <em>user-defined</em> implicit conversion.</p>\n<pre><code>int -&gt; bool -&gt; A\n</code></pre>\n<p>is allowed because the <code>int-&gt;bool</code> conversion isn't user-defined.</p>\n<h3>12.3 Conversions [class.conv]</h3>\n<blockquote>\n<p id=\"so_12847272_12847286_0\">1 Type conversions of class objects can be specified by constructors\n  and by conversion functions. These conversions are called user-defined\n  conversions and are used for implicit type conversions (clause 4), for\n  initialization (8.5), and for explicit type conversions (5.4, 5.2.9).</p>\n<p id=\"so_12847272_12847286_1\">2 User-defined conversions are applied only where they are unambiguous\n  (10.2, 12.3.2). Conversions obey the access control rules (clause 11).\n  Access control is applied after ambiguity resolution (3.4). </p>\n<p id=\"so_12847272_12847286_2\">3 [ Note:\n  See 13.3 for a discussion of the use of conversions in function calls\n  as well as examples below. \u2014end note ] </p>\n<p id=\"so_12847272_12847286_3\"><strong>4 At most one user-defined\n  conversion (constructor or conversion function) is implicitly applied\n  to a single value.</strong></p>\n</blockquote>\n", "LastActivityDate": "2012-10-11T19:44:28.310", "CommentCount": "2", "CreationDate": "2012-10-11T19:44:28.310", "ParentId": "12847272", "Score": "9", "OwnerUserId": "673730"}, "12847272": {"ViewCount": "1424", "Body": "<pre><code>class C {\npublic:\n    C() { }\n};\n\nclass B {\npublic:\n    B(C c) { }\n    B() { }\n};\n\nclass A {\npublic:\n    A(bool b) { }\n    A(B b) { }\n};\n\nint main() {\n    A a1 = true; // bool -&gt; A        is allowed\n    A a2 = B();  // B -&gt; A           is allowed\n\n    A a3 = 7;    // int -&gt; bool -&gt; A is allowed\n    A a4 = C();  // C -&gt; B -&gt; A      isn't allowed\n}\n</code></pre>\n<p>Why I can use two-step implicit conversion with <code>bool</code> but can't use it with <code>C</code>?\nWhat is the general rule describing multistep implicit conversion?</p>\n", "AcceptedAnswerId": "12847286", "Title": "Multiple implicit conversions on custom types not allowed?", "CreationDate": "2012-10-11T19:43:19.960", "Id": "12847272", "CommentCount": "0", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-10-11T19:47:57.193", "LastEditorDisplayName": "user166390", "LastActivityDate": "2012-10-11T21:08:04.600", "Score": "9", "OwnerUserId": "897090", "Tags": "<c++><type-conversion><implicit-conversion>", "AnswerCount": "2"}});