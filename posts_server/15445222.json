post_cb({"bq_ids": {"n4140": {"so_15445222_15445222_0": {"length": 5, "quality": 1.0, "section_id": 2691}}, "n3337": {"so_15445222_15445222_0": {"length": 5, "quality": 1.0, "section_id": 2653}}, "n4659": {"so_15445222_15445222_0": {"length": 5, "quality": 1.0, "section_id": 3431}}}, "15445222": {"ViewCount": "16430", "Body": "<p><strong>C++11</strong></p>\n<p>I am trying to make a <code>vector</code> of <code>std::thread</code>s. The combination of the following three points says I can.</p>\n<p>1.) According to <a href=\"http://en.cppreference.com/w/cpp/thread/thread/thread\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/thread/thread/thread</a>,\n    <code>thread</code>\u2019s default constructor creates a </p>\n<blockquote>\n<p id=\"so_15445222_15445222_0\">thread object which does not represent a thread.</p>\n</blockquote>\n<p>2.) According to <a href=\"http://en.cppreference.com/w/cpp/thread/thread/operator%3D\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/thread/thread/operator%3D</a>, <code>thread</code>\u2019s <code>operator=</code> </p>\n<blockquote>\n<p id=\"so_15445222_15445222_1\">Assigns the state of [the parameter, which\n          is a thread rvalue reference] to [the calling thread] using move\n          semantics.</p>\n</blockquote>\n<p>3.) According to\n    <a href=\"http://en.cppreference.com/w/cpp/container/vector/vector\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/container/vector/vector</a>, passing\n        only a size type variable to a vector constructor will construct </p>\n<blockquote>\n<p id=\"so_15445222_15445222_2\">the container with [the specified number of] value-initialized (default constructed, for\n  classes) instances of T. No copies are made.</p>\n</blockquote>\n<p><strong>So, I did this:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n\nvoid foo()\n{\n    std::cout &lt;&lt; \"Hello\\n\";\n    return;\n}\n\nint main()\n{\n    std::vector&lt;std::thread&gt; vecThread(1);\n    vecThread.at(0) = std::thread(foo);\n    vecThread.at(0).join();\n    return 0;\n}\n</code></pre>\n<p>This runs as expected in VC11 and <a href=\"http://liveworkspace.org/code/4phwIB$0\" rel=\"noreferrer\">g++ 4.8.0 (online compiler here)</a> as seen in the following:</p>\n<p><strong>Console Output:</strong></p>\n<pre><code>Hello\n</code></pre>\n<p><strong>Then I tried it in clang 3.2, by toggling the compiler menu on the same webpage, which gives:</strong></p>\n<pre><code>stderr: \npure virtual method called\nterminate called without an active exception\n</code></pre>\n<p>When a thread object\u2014that represents a thread\u2014goes out of scope before being <code>join()</code>ed or <code>detach()</code>ed, the program will be forced to terminate. I have <code>join()</code>ed <code>vecThread.at(0)</code>, so the only thing left in question is the temporary thread</p>\n<p><code>std::thread(foo);</code></p>\n<p>in the</p>\n<p><code>vecThread.at(0) = std::thread(foo);</code></p>\n<p>assignment.</p>\n<p>However, according to the web reference, threads can only be assigned by moving a thread rvalue reference. I cannot think of any way to <code>join()</code> or <code>detach()</code> a temporary thread object.</p>\n<p>So if clang\u2019s output is correct, then what is the use of <code>thread</code>\u2019s <code>operator=</code>? Or is this a clang compiler bug?</p>\n<p>In g++ 4.8.0, changing the line</p>\n<p><code>vecThread.at(0) = std::thread(foo)</code></p>\n<p>to</p>\n<p><code>vecThread.at(0) = std::thread{foo}</code></p>\n<p>(replacing parentheses with braces) still gives the expected <code>Hello</code> output.</p>\n<p>However, changing the line to <code>vecThread.at(0) = {foo}</code> makes it complain:</p>\n<p><strong>g++ 4.8.0's complaint on braces:</strong></p>\n<blockquote>\n<p id=\"so_15445222_15445222_3\">error: converting to 'std::thread' from initializer list would use\n  explicit constructor 'std::thread::thread(_Callable&amp;&amp;, _Args&amp;&amp; ...)\n  [with _Callable = void (&amp;)(); _Args = {}]'\n       vecThread.at(0) = {foo};</p>\n</blockquote>\n<p>which is too advanced\u2014I don\u2019t know what it means.</p>\n<p>Making the same change in clang gives the even more advanced:</p>\n<p><strong>clang 3.2's complaint on braces:</strong></p>\n<pre><code>error: no viable overloaded '='\nvecThread.at(0) = {foo};\n...\nnote: candidate function not viable: cannot convert initializer list\nargument to 'const std::thread'\nthread&amp; operator=(const thread&amp;) = delete;\n...\nnote: candidate function not viable: cannot convert initializer list\nargument to 'std::thread'\nthread&amp; operator=(thread&amp;&amp; __t) noexcept\n</code></pre>\n<p>and I don\u2019t know what that means either.</p>\n<p>I cannot use VC11 to corroborate the above</p>\n<p><code>vecThread.at(0) = {foo}</code></p>\n<p>problems because VC11, as of the November 2012 CTP compiler, does not support uniform initialization syntax on the Standard Library.</p>\n", "AcceptedAnswerId": "15446434", "Title": "vector of std::threads", "CreationDate": "2013-03-16T03:26:29.550", "Id": "15445222", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-03-16T09:00:11.033", "Score": "13", "OwnerUserId": "2090317", "Tags": "<c++><multithreading><vector><c++11><stdthread>", "AnswerCount": "1"}, "15446434": {"Id": "15446434", "PostTypeId": "2", "Body": "<p>Your first example is correct. Throwing an exception is a known <a href=\"http://llvm.org/bugs/show_bug.cgi?id=12730\" rel=\"nofollow noreferrer\">bug</a>, when you using clang with libstdc++. To solve it, you have to install libc++(llvm version of c++ library). See an example of compiling with libc++ below</p>\n<pre><code>#include &lt;thread&gt;\n\nint main()\n{\n    std::thread t([] () {});\n    t.join();\n    return 0;\n}\n</code></pre>\n<p><code>$ clang++ -std=c++11 -stdlib=libc++ main.cpp -o main -lc++ -lsupc++ -lpthread</code></p>\n<p>P.S. See <a href=\"https://stackoverflow.com/questions/10297291/clang-3-1-libc-compile-error\">here</a>, why is the flag <code>-lsupc++</code> required too.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-16T09:00:11.033", "Score": "7", "CreationDate": "2013-03-16T06:49:56.907", "ParentId": "15445222", "CommentCount": "0", "OwnerUserId": "1532460", "LastEditDate": "2017-05-23T12:09:14.080"}});