post_cb({"13359582": {"CommentCount": "4", "ViewCount": "1044", "PostTypeId": "1", "LastEditorUserId": "743214", "CreationDate": "2012-11-13T11:01:05.643", "LastActivityDate": "2012-11-13T12:18:47.723", "Title": "Release and Acquire with std::mutex", "AcceptedAnswerId": "13359813", "LastEditDate": "2012-11-13T12:18:47.723", "Id": "13359582", "Score": "4", "Body": "<p>This is a question about the C++ standard. I only have access to the draft standard so if this is different in the official one, I apologise. Also if I've misunderstood how this works please feel free to correct me.</p>\n<p>Assume I have two threads, one writing to a string and one making a copy of the contents of that string. I protect access to them using a <code>std::mutex myMutex;</code>\n<em>I know you should in general use the RAII classes for locks, I just used lock and unlock explicitly to make the example more explicit.</em></p>\n<pre><code>// Global variable\nstd::string message;\nstd::mutex myMutex;\n\n// Thread one\nmyMutex.lock();\nmessage = \"Hello\";\nmyMutex.unlock();\n\n// Thread two\nmyMutex.lock();\nstd::string copy = message;\nmyMutex.unlock();\n</code></pre>\n<p>My understanding is that in order for this to work reliably between threads, thread one must perform a <em>Release</em> operation after setting the string, and thead two must perform an <em>Acquire</em> before reading the string.</p>\n<p>Reading the draft standard for C++11 I can't see anything that states that <code>std::mutex</code> does this, although it's fairly obvious that it's expected to or the mutex would be useless for anything.</p>\n<p>Can someone point me to the relevent section to look at? The wording in the standard is often not exactly clear to a casual reader :)</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "417292", "AnswerCount": "1"}, "13359813": {"ParentId": "13359582", "CommentCount": "1", "Body": "<p>Per 30.4.1.2p11,</p>\n<blockquote>\n<p id=\"so_13359582_13359813_0\"><em>Synchronization</em>: Prior <code>unlock()</code> operations on the same object shall synchronize with (1.10) [<code>m.lock()</code>].</p>\n</blockquote>\n<p>Under 1.10p5,</p>\n<blockquote>\n<p id=\"so_13359582_13359813_1\">[...] For example, a call that acquires a mutex will perform an acquire operation\n  on the locations comprising the mutex. Correspondingly, a call that releases the same mutex will perform a release operation on those same locations. Informally, performing a release operation on <em>A</em> forces prior side effects on other memory locations to become visible to other threads that later perform a consume or an acquire operation on <em>A</em>. [...]</p>\n</blockquote>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "13359813", "Score": "8", "CreationDate": "2012-11-13T11:16:03.007", "LastActivityDate": "2012-11-13T11:16:03.007"}, "bq_ids": {"n4140": {"so_13359582_13359813_1": {"section_id": 5818, "quality": 0.9772727272727273, "length": 43}, "so_13359582_13359813_0": {"section_id": 2813, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_13359582_13359813_1": {"section_id": 5589, "quality": 0.9772727272727273, "length": 43}, "so_13359582_13359813_0": {"section_id": 2719, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_13359582_13359813_1": {"section_id": 7279, "quality": 0.9772727272727273, "length": 43}, "so_13359582_13359813_0": {"section_id": 3551, "quality": 0.6666666666666666, "length": 6}}}});