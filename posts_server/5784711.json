post_cb({"5784711": {"ViewCount": "1489", "Body": "<p>I have to make two projects with different names. Both projects will share the same code.</p>\n<p>So I started replacing the places that call the old name to a preprocessor in stdafx.h called APP_NAME</p>\n<p>In stdafx.h I put </p>\n<pre><code>#define APP_NAME _T(\"My name\") \n</code></pre>\n<p>And when I find code like</p>\n<pre><code>function(parm1,_T(\"My old name have a error\"));\n</code></pre>\n<p>I want to replace with </p>\n<pre><code>function(parm1, APP_NAME _T(\" have a error\"));\n</code></pre>\n<p>But, a lot of errors appear when mixing wide ( T(\"x\") or L\"\") with pure narrow (\"\")</p>\n<blockquote>\n<p id=\"so_5784711_5784711_0\">error C2308: concatenating mismatched strings</p>\n</blockquote>\n<p>Is it possible to do any preprocessor magic to overcome it?</p>\n", "Title": "How make a preprocessor string that work with both narrow and wide", "CreationDate": "2011-04-26T00:29:56.463", "LastActivityDate": "2016-06-20T22:21:35.607", "CommentCount": "0", "LastEditDate": "2016-06-20T22:21:35.607", "PostTypeId": "1", "LastEditorUserId": "4370109", "Id": "5784711", "Score": "5", "OwnerUserId": "556771", "Tags": "<c++><string><c-preprocessor>", "AnswerCount": "4"}, "5784795": {"Id": "5784795", "PostTypeId": "2", "Body": "<p>You cannot mix narrow and wide strings.  However, if you consistently use _T() then everything will work.  Make sure both projects and all compilation units have the same setting for UNICODE which controls whether _T() will be \"\" or L\"\".</p>\n", "LastActivityDate": "2011-04-26T00:46:31.867", "Score": "0", "CreationDate": "2011-04-26T00:46:31.867", "ParentId": "5784711", "CommentCount": "0", "OwnerUserId": "105568"}, "5784933": {"Id": "5784933", "PostTypeId": "2", "Body": "<p>Move the <code>_T</code> to where the macro is used, because that's where the correct encoding is known.</p>\n<pre><code>#define APP_NAME \"My name\"\nfunction(parm1, _T(APP_NAME) _T(\" have a error\"));\n</code></pre>\n<hr>\n<p>But you shouldn't actually have to, this is a bug in Visual C++ 2010.  C++0x requires that (section <code>[lex.string]</code>):</p>\n<blockquote>\n<p id=\"so_5784711_5784933_0\">In translation phase 6 (2.2), adjacent string literals are concatenated.  If both string literals have the same <em>encoding-prefix</em>, the resulting concatenated string literal has that <em>encoding-prefix</em>.  <strong>If one string literal has no <em>encoding-prefix</em>, it is treated as a string literal of the same <em>encoding-prefix</em> as the other operand</strong>.  If a UTF-8 string literal token is adjacent to a wide string literal token, the program is ill-formed.  Any other concatenations are conditionally supported with implementation-de\ufb01ned behavior.  [ <em>Note</em>:  This concatena- tion is an interpretation, not a conversion. Because the interpretation happens in translation phase 6 (after each character from a literal has been translated into a value from the appropriate character set), a string literal\u2019s initial rawness has no e\ufb00ect on the interpretation or well-formedness of the concatenation.  \u2014 <em>end note</em> ]</p>\n</blockquote>\n</hr>", "LastEditorUserId": "103167", "LastActivityDate": "2011-04-26T01:19:54.173", "Score": "2", "CreationDate": "2011-04-26T01:14:32.720", "ParentId": "5784711", "CommentCount": "0", "LastEditDate": "2011-04-26T01:19:54.173", "OwnerUserId": "103167"}, "bq_ids": {"n4140": {"so_5784711_5784933_0": {"length": 66, "quality": 0.8571428571428571, "section_id": 5362}}, "n3337": {"so_5784711_5784933_0": {"length": 68, "quality": 0.8831168831168831, "section_id": 5158}}, "n4659": {"so_5784711_5784933_0": {"length": 56, "quality": 0.7272727272727273, "section_id": 6786}}}, "5784794": {"Id": "5784794", "PostTypeId": "2", "Body": "<p>Have a <code>APP_NAME</code> and a <code>APP_NAME_W</code>, one narrow and one wide. Use whichever one is appropriate in that context.</p>\n", "LastActivityDate": "2011-04-26T00:46:30.900", "Score": "0", "CreationDate": "2011-04-26T00:46:30.900", "ParentId": "5784711", "CommentCount": "0", "OwnerUserId": "321772"}, "5784813": {"Id": "5784813", "PostTypeId": "2", "Body": "<p>Perhaps the problem is that you define a macro APP_NAME but then use NAME later. If that is not the real problem, then you simply need to consistently use _T(\"...\") so that all strings will be prefixed correctly (and assuming _T expands to nothing more than a wide or narrow qualified string in your environment).</p>\n", "LastActivityDate": "2011-04-26T00:48:58.787", "Score": "2", "CreationDate": "2011-04-26T00:48:58.787", "ParentId": "5784711", "CommentCount": "0", "OwnerUserId": "673612"}});