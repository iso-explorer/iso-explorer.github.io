post_cb({"bq_ids": {"n4140": {"so_41523989_41524059_0": {"length": 4, "quality": 0.8, "section_id": 7064}}, "n3337": {"so_41523989_41524059_0": {"length": 4, "quality": 0.8, "section_id": 6808}}, "n4659": {"so_41523989_41524059_0": {"length": 4, "quality": 0.8, "section_id": 8561}}}, "41524059": {"Id": "41524059", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_41523989_41524059_0\">[..] that variables declared in the condition of a while statement [..]</p>\n</blockquote>\n<p>That's not possible.</p>\n<p>Using a <code>for</code> statement allows to declare a variable like this</p>\n<pre><code>for(int a = 0; a &lt; 5; a++) {\n    // Use a\n}\n// a is not visible anymore\n</code></pre>\n<p>If you use a <code>while</code> loop, it is visible</p>\n<pre><code>int a = 0;\nwhile(a &lt; 5) {\n    // Use a\n    a++;\n}\n// a still visible\n</code></pre>\n", "LastEditorUserId": "6779010", "LastActivityDate": "2017-01-31T08:19:06.397", "Score": "4", "CreationDate": "2017-01-07T17:02:05.850", "ParentId": "41523989", "CommentCount": "0", "LastEditDate": "2017-01-31T08:19:06.397", "OwnerUserId": "6779010"}, "41523989": {"ViewCount": "431", "Body": "<p>I was always under the impression that a variable declared in <em>any</em> kind of loop statement is scoped to that statement alone. And a little poking around in similar questions seems to confirm this idea. So I am puzzled by the following excerpt from Stroustrup's <em>A Tour of C++</em> (\u00a74.2.3 Initializing Containers p. 38):</p>\n<p>\"The <code>push_back()</code> is useful for input of arbitrary numbers of elements. For example:</p>\n<pre><code>Vector read(istream&amp; is) {\n    Vector v;\n    for (double d; is&gt;&gt;d;) // read floating-point values into d\n        v.push_back(d); // add d to v\n    return v;\n}\n</code></pre>\n<p>The input loop is terminated by an end-of-file or a formatting error. Until that happens, each number\nread is added to the <code>Vector</code> so that at the end, <code>v</code>\u2019s size is the number of elements read. <strong>I used a <code>for</code>-statement rather than the more conventional <code>while</code>-statement to keep the scope of <code>d</code> limited to the loop.</strong>\"</p>\n<p>This seems to imply that variables declared in the condition of a <code>while</code> statement persist outside the statement body.</p>\n", "AcceptedAnswerId": "41524094", "Title": "scope of variables in loops", "CreationDate": "2017-01-07T16:57:31.690", "Id": "41523989", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-01-31T08:19:06.397", "Score": "1", "OwnerUserId": "5876856", "Tags": "<c++><scope>", "AnswerCount": "2"}, "41524094": {"Id": "41524094", "PostTypeId": "2", "Body": "<p>Let's examine that loop:</p>\n<pre><code>for (double d; is&gt;&gt;d;) // read floating-point values into d\n    v.push_back(d); // add d to v\n</code></pre>\n<p>Here we have:</p>\n<ul>\n<li>a declaration of <code>d</code></li>\n<li>a loop condition</li>\n<li>an empty \"do on each iteration\" expression</li>\n</ul>\n<p>And, yes, <code>d</code> is limited in scope to the <code>for</code> loop.</p>\n<p>Now try writing a <code>while</code> loop to do the same job, keeping <code>d</code> limited in scope. You won't be able to, because there's no place to put a declaration in the preamble of a <code>while</code>. Only <code>for</code> has that feature. A <code>while</code> only has a condition.</p>\n<p>That doesn't mean the scoping rules are different for <code>while</code>; it only means that it is not possible to write this code using <code>while</code>. There <em>aren't</em> any \"variables declared in the condition of a <code>while</code> statement\".</p>\n", "LastActivityDate": "2017-01-07T17:04:33.267", "Score": "4", "CreationDate": "2017-01-07T17:04:33.267", "ParentId": "41523989", "CommentCount": "4", "OwnerUserId": "560648"}});