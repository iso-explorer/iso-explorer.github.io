post_cb({"35564836": {"ParentId": "35561075", "CommentCount": "1", "Body": "<p>Standards:</p>\n<blockquote>\n<p id=\"so_35561075_35564836_0\">Declarators [dcl.decl]:<br>\n  Each init-declarator in a declaration is analyzed separately as if it was in a declaration by itself.</br></p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class A {\npublic:\n    A(std::string const &amp;s): name(s) \n    { \n        std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; '\\n'; \n    }\n    std::string name;\n};\n\nauto main() -&gt; int\n{\n    A a(\"a\"), b(\"b\");\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>I am a\nI am b\n</code></pre>\n", "OwnerUserId": "3677097", "PostTypeId": "2", "Id": "35564836", "Score": "6", "CreationDate": "2016-02-22T22:03:02.627", "LastActivityDate": "2016-02-22T22:03:02.627"}, "35561144": {"ParentId": "35561075", "CommentCount": "0", "Body": "<p><strong>a</strong> will be created first and then <strong>b</strong>.</p>\n<p>Commas in this case <strong>will be used as separators</strong> and not as operators. </p>\n<p>For example from wikipedia :</p>\n<pre><code>    /**\n      *  Commas act as separators in this line, not as an operator.\n      *  Results: a=1, b=2, c=3, i=0\n      */\n     int a=1, b=2, c=3, i=0;\n</code></pre>\n", "OwnerUserId": "1475228", "PostTypeId": "2", "Id": "35561144", "Score": "8", "CreationDate": "2016-02-22T18:30:59.910", "LastActivityDate": "2016-02-22T18:30:59.910"}, "35561242": {"ParentId": "35561075", "CommentCount": "11", "Body": "<p>From 8 Declarators  [dcl.decl] 3:</p>\n<blockquote>\n<p id=\"so_35561075_35561242_0\">Each init-declarator in a declaration is analyzed separately as if it was in a declaration by itself.</p>\n</blockquote>\n<p>It goes on to say </p>\n<blockquote>\n<p id=\"so_35561075_35561242_1\">A declaration with several declarators is usually equivalent to the corresponding sequence of declarations each with a single\n  declarator. That is\n  <code>T D1, D2, ... Dn;</code>\n  is usually equivalent to\n  <code>T D1; T D2; ... T Dn;</code>\n  where <code>T</code> is a decl-specifier-seq and each <code>Di</code> is an init-declarator. An exception occurs when a name introduced by one of\n  the declarators hides a type name used by the decl-specifiers, so that when the same decl-specifiers are used in a subsequent\n  declaration, they do not have the same meaning.</p>\n</blockquote>\n<p>You can say that they are constructed from left to right.</p>\n", "OwnerUserId": "2883245", "PostTypeId": "2", "Id": "35561242", "Score": "78", "CreationDate": "2016-02-22T18:35:52.150", "LastActivityDate": "2016-02-22T18:35:52.150"}, "35561262": {"ParentId": "35561075", "CommentCount": "4", "Body": "<p>C++ spec chapter 8 [dcl.decl], says:</p>\n<blockquote>\n<p id=\"so_35561075_35561262_0\">Each <em>init-declarator</em> in a declaration is analyzed separately as if it\n  was in a declaration by itself. (100)</p>\n</blockquote>\n<p>Footnote (100) goes on to say:</p>\n<blockquote>\n<p id=\"so_35561075_35561262_1\">(100) A declaration with several declarators is usually equivalent to the\n  corresponding sequence of declarations each with a single declarator.\n  That is</p>\n<pre><code>T D1, D2, ... Dn;\n</code></pre>\n<p id=\"so_35561075_35561262_2\">is usually equivalent to</p>\n<pre><code> T D1; T D2; ... T Dn;\n</code></pre>\n</blockquote>\n<p>...and then names some exceptions, none of which apply in such simple cases.</p>\n<p>So the answer to your question is that the objects are constructed in the order you list them. And no, it is not a comma operator.</p>\n", "OwnerUserId": "768469", "PostTypeId": "2", "Id": "35561262", "Score": "52", "CreationDate": "2016-02-22T18:36:37.087", "LastActivityDate": "2016-02-22T18:36:37.087"}, "35561075": {"CommentCount": "12", "AcceptedAnswerId": "35561242", "PostTypeId": "1", "LastEditorUserId": "2883245", "CreationDate": "2016-02-22T18:26:24.197", "LastActivityDate": "2016-11-07T12:27:49.773", "LastEditDate": "2016-11-07T12:27:49.773", "ViewCount": "4171", "FavoriteCount": "3", "Title": "If two objects are declared in a single line, in what order are they constructed?", "Id": "35561075", "Score": "63", "Body": "<p>Let's say a class has been defined as </p>\n<pre><code>class A {\n//.....\n};\n</code></pre>\n<p>and now I am creating two objects as </p>\n<pre><code>A a,b;\n</code></pre>\n<p>In what order are <code>a</code> and <code>b</code> created? Is it defined by the standard?</p>\n", "Tags": "<c++><language-lawyer><declaration><object-construction>", "OwnerUserId": "2711672", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_35561075_35561262_1": {"section_id": 3196, "quality": 0.8461538461538461, "length": 11}, "so_35561075_35561262_0": {"section_id": 3196, "quality": 0.8888888888888888, "length": 8}, "so_35561075_35561242_1": {"section_id": 3196, "quality": 0.9736842105263158, "length": 37}, "so_35561075_35561242_0": {"section_id": 3196, "quality": 1.0, "length": 8}, "so_35561075_35564836_0": {"section_id": 3196, "quality": 0.8, "length": 8}}, "n3337": {"so_35561075_35561262_1": {"section_id": 3070, "quality": 0.8461538461538461, "length": 11}, "so_35561075_35561262_0": {"section_id": 3070, "quality": 0.8888888888888888, "length": 8}, "so_35561075_35561242_1": {"section_id": 3070, "quality": 0.9736842105263158, "length": 37}, "so_35561075_35561242_0": {"section_id": 3070, "quality": 1.0, "length": 8}, "so_35561075_35564836_0": {"section_id": 3070, "quality": 0.8, "length": 8}}, "n4659": {"so_35561075_35561262_1": {"section_id": 3958, "quality": 0.8461538461538461, "length": 11}, "so_35561075_35561262_0": {"section_id": 3958, "quality": 0.8888888888888888, "length": 8}, "so_35561075_35561242_1": {"section_id": 3958, "quality": 0.9473684210526315, "length": 36}, "so_35561075_35561242_0": {"section_id": 3958, "quality": 1.0, "length": 8}, "so_35561075_35564836_0": {"section_id": 3958, "quality": 0.8, "length": 8}}}, "35561149": {"ParentId": "35561075", "CommentCount": "0", "Body": "<p>The order is the written order, from left to right. Also, it's not the comma operator, but simply a list of declarators. When a user-defined comma operator is used, order is in fact unspecified.</p>\n<p>See <a href=\"http://en.cppreference.com/w/cpp/language/operator_other#Built-in_comma_operator\">comma operator</a> and <a href=\"http://en.cppreference.com/w/cpp/language/declarations#Declarators\">declarators</a>.</p>\n", "OwnerUserId": "602372", "PostTypeId": "2", "Id": "35561149", "Score": "11", "CreationDate": "2016-02-22T18:31:07.773", "LastActivityDate": "2016-02-22T18:31:07.773"}});