post_cb({"3961251": {"Id": "3961251", "PostTypeId": "2", "Body": "<p>Four character literals, I've seen and used. They map to 4 bytes = one 32 bit word. It's very useful for debugging purposes as said above. They can be used in a switch/case statement with ints, which is nice.</p>\n<p>This (4 Chars) is pretty standard (ie supported by GCC and VC++ at least), although results (actual values compiled) may vary from one implementation to another.</p>\n<p>But over 4 chars? I wouldn't use.</p>\n<p>UPDATE: From the C4 page: \"For our simple actions, we'll just provide an enumeration of some values, which is done in C4 by specifying four-character constants\". So they are using 4 chars literals, as was my case.</p>\n", "LastEditorUserId": "428381", "LastActivityDate": "2010-10-19T08:52:58.540", "Score": "5", "CreationDate": "2010-10-18T16:39:06.123", "ParentId": "3960954", "CommentCount": "5", "OwnerUserId": "428381", "LastEditDate": "2010-10-19T08:52:58.540"}, "34571914": {"Id": "34571914", "PostTypeId": "2", "Body": "<p>In <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4527.pdf\" rel=\"nofollow\" title=\"C++14 specification\">C++14 specification draft N4527</a> section 2.13.3, entry 2:</p>\n<blockquote>\n<p id=\"so_3960954_34571914_0\">... An ordinary character literal that contains more than one c-char is a multicharacter literal. A multicharacter literal, or an ordinary character literal containing a single c-char not representable in the execution character set, is conditionally-supported, has type int, and has an implementation-defined value.</p>\n</blockquote>\n<p>Previous answers to your question pertained mostly on real machines that did support multicharacter literals. Specifically, on platforms where <code>int</code> is 4 bytes, four-byte multicharacter is fine and can be used for convenience, as per Ferrucio's mem dump example. But, as there is no guarantee that this will ever work or work the same way on other platforms, <strong>use of multicharacter literals should be deprecated for portable programs</strong>.</p>\n", "LastActivityDate": "2016-01-02T23:45:42.873", "CommentCount": "1", "CreationDate": "2016-01-02T23:45:42.873", "ParentId": "3960954", "Score": "3", "OwnerUserId": "2936728"}, "3961008": {"Id": "3961008", "PostTypeId": "2", "Body": "<p>It makes it easier to pick out values in a memory dump.</p>\n<p>Example:</p>\n<pre><code>enum state { waiting, running, stopped };\n</code></pre>\n<p>vs.</p>\n<pre><code>enum state { waiting = 'wait', running = 'run.', stopped = 'stop' };\n</code></pre>\n<p>a memory dump after the following statement:</p>\n<pre><code>s = stopped;\n</code></pre>\n<p>might look like:</p>\n<pre><code>00 00 00 02 . . . .\n</code></pre>\n<p>in the first case, vs:</p>\n<pre><code>73 74 6F 70 s t o p\n</code></pre>\n<p>using multicharacter literals. (of course whether it says 'stop' or 'pots' depends on byte ordering)</p>\n", "LastEditorUserId": "4086", "LastActivityDate": "2014-01-11T15:39:14.387", "Score": "23", "CreationDate": "2010-10-18T16:08:56.797", "ParentId": "3960954", "CommentCount": "9", "OwnerUserId": "4086", "LastEditDate": "2014-01-11T15:39:14.387"}, "bq_ids": {"n4140": {"so_3960954_34571914_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 5343}}, "n3337": {"so_3960954_34571914_0": {"length": 16, "quality": 0.5925925925925926, "section_id": 5140}}, "n4659": {"so_3960954_34571914_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6765}}}, "3960954": {"ViewCount": "6520", "Body": "<p>I didn't know that C and C++ allow <a href=\"http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.jsp?topic=%2Fcom.ibm.vacpp6m.doc%2Flanguage%2Fref%2Fclrc02ccon.htm\" rel=\"noreferrer\"><code>multicharacter literal</code></a>: not 'c' (of type <em>int</em> in C and <em>char</em> in C++), but 'tralivali' (of type <em>int</em>!)</p>\n<pre><code>enum\n{\n    ActionLeft = 'left',\n    ActionRight = 'right',\n    ActionForward = 'forward',\n    ActionBackward = 'backward'\n};\n</code></pre>\n<p>Standard says:</p>\n<blockquote>\n<p id=\"so_3960954_3960954_0\">C99 6.4.4.4p10: \"The value of an\n  integer character constant containing\n  more than one character (e.g., 'ab'),\n  or containing a character or escape\n  sequence that does not map to a\n  single-byte execution character, is\n  implementation-defined.\"</p>\n</blockquote>\n<p>I found they are widely used in <a href=\"http://www.terathon.com/wiki/index.php/Simple_Actions_-_%27Hello_World%27_redux\" rel=\"noreferrer\">C4 engine</a>. But I suppose they are not safe when we are talking about platform-independend serialization. Thay can be confusing also because look like strings. So what is multicharacter literal's scope of usage, are they useful for something? Are they in C++ just for compatibility with C code? Are they considered to be a bad feature as <em>goto</em> operator or not?</p>\n", "AcceptedAnswerId": "3961219", "Title": "C++ multicharacter literal", "CreationDate": "2010-10-18T16:03:18.937", "Id": "3960954", "CommentCount": "4", "FavoriteCount": "14", "PostTypeId": "1", "LastActivityDate": "2016-01-02T23:45:42.873", "Score": "38", "OwnerUserId": "288406", "Tags": "<c++><c><syntax><literals>", "AnswerCount": "5"}, "3961219": {"Id": "3961219", "PostTypeId": "2", "Body": "<p>I don't know how extensively this is used, but \"implementation-defined\" is a big red-flag to me. As far as I know, this could mean that the implementation could choose to ignore your character designations and just assign normal incrementing values if it wanted. It may do something \"nicer\", but you can't rely on that behavior across compilers (or even compiler versions). At least \"goto\" has predictable (if undesirable) behavior...</p>\n<p>That's my 2c, anyway.</p>\n<p>Edit: on \"implementation-defined\":</p>\n<p>From <a href=\"http://www2.research.att.com/~bs/glossary.html\" rel=\"noreferrer\">Bjarne Stroustrup's C++ Glossary</a>:</p>\n<blockquote>\n<p id=\"so_3960954_3961219_0\">implementation defined - an aspect of\n  C++'s semantics that is defined for\n  each implementation rather than\n  specified in the standard for every\n  implementation. An example is the size\n  of an int (which must be at least 16\n  bits but can be longer). Avoid\n  implementation defined behavior\n  whenever possible. See also:\n  undefined. TC++PL C.2.</p>\n</blockquote>\n<p>also...</p>\n<blockquote>\n<p id=\"so_3960954_3961219_1\">undefined - an aspect of C++'s\n  semantics for which no reasonable\n  behavior is required. An example is\n  dereferencing a pointer with the value\n  zero. Avoid undefined behavior. See\n  also: implementation defined. TC++PL\n  C.2.</p>\n</blockquote>\n<p>I believe this means the comment is correct: it should at least compile, although anything beyond that is not specified. Note the advice in the definition, also.</p>\n", "LastEditorUserId": "26240", "LastActivityDate": "2010-10-18T16:51:57.203", "Score": "17", "CreationDate": "2010-10-18T16:35:27.320", "ParentId": "3960954", "CommentCount": "5", "OwnerUserId": "26240", "LastEditDate": "2010-10-18T16:51:57.203"}, "32684175": {"Id": "32684175", "PostTypeId": "2", "Body": "<p>Multicharacter literals allow one to specify <code>int</code> values via the equivalent representation in characters.  Useful for enums, FourCC codes and tags, and non-type template parameters.  With a multicharacter literal, a <a href=\"https://en.wikipedia.org/wiki/FourCC\" rel=\"nofollow\">FourCC code</a> can be typed directly into the source, which is handy.</p>\n<p>The implementation in gcc is described at <a href=\"https://gcc.gnu.org/onlinedocs/cpp/Implementation-defined-behavior.html\" rel=\"nofollow\">https://gcc.gnu.org/onlinedocs/cpp/Implementation-defined-behavior.html</a> .  Note that the value is truncated to the size of the type <code>int</code>, so <code>'efgh' == 'abcdefgh'</code> if your ints are 4 chars wide, although gcc will issue a warning on the literal that overflows.</p>\n<p>Unfortunately, gcc will issue a warning on <em>all</em> multi-character literals if <code>-pedantic</code> is passed, as their behavior is implementation-defined.  As you can see above, it is perhaps possible for equality of two multi-character literals to change if you switch implementations.</p>\n", "LastActivityDate": "2015-09-20T20:50:55.560", "CommentCount": "0", "CreationDate": "2015-09-20T20:50:55.560", "ParentId": "3960954", "Score": "2", "OwnerUserId": "5306611"}});