post_cb({"3608004": {"ParentId": "3607974", "CommentCount": "0", "Body": "<p>That's normal, you can't really assign values to char tables that way (there are numerous different solutions, sprintf or strcpy for instance). But this is a C problem, not C++.</p>\n<p>Since you're coding in C++, you should use std::string to manage your strings (and the c_str() method if you need those strings converted in char tables).</p>\n", "OwnerUserId": "395863", "PostTypeId": "2", "Id": "3608004", "Score": "3", "CreationDate": "2010-08-31T10:08:40.903", "LastActivityDate": "2010-08-31T10:08:40.903"}, "3608154": {"ParentId": "3607974", "CommentCount": "0", "Body": "<p>I'm sorry to say that C++ is a bit unintuitive here.  You can say:</p>\n<pre><code>char name[10] = \"abcd\";\n</code></pre>\n<p>and, given your definition above:</p>\n<pre><code>buffer buf = { \"NDS\", \"3174\" };\n</code></pre>\n<p>The latter relies on a one-to-one correspondence between fields in the structure and values in the list, so I've had to reverse the order used in your assignments.</p>\n<p>But, you can't do your</p>\n<pre><code>buf.ProjectName = \"abcde\";\n</code></pre>\n<p>What that actually requests in C++ is that buf.ProjectName be loaded with a pointer to memory containing the character data \"abcde\".  You can't do that though, as ProjectName itself is another buffer for character data, and not of pointer-to-character-data.</p>\n<p>So, when you have a source and destination area containing NUL-terminated strings (Google ASCIIZ if necessary), you need to use a support function to copy from one to the other:</p>\n<pre><code>strcpy(buf.ProjectName, \"name\");\n</code></pre>\n<p>If ProjectName's dimension is too small, then your string may overwrite memory that the compiler hasn't reserved for ProjectName, probably causing a crash or erroneous output.  You can protect against this - if the relative sizes of the strings isn't obviously ok - using <code>strncpy(buf.ProjectName, \"name\", sizeof buf.ProjectName)</code>.  Unfortunately, this means <code>buf.ProjectName</code> may not hold the full expected value, making it of dubious use.</p>\n<p>C++ improves over this way of handling textual data - which is inherited from C - with the std::string class.  You can simple do this:</p>\n<pre><code>#include &lt;string&gt;\nstruct Buffer\n{\n    std::string project_name_;\n    std::string project_id_;\n};\nBuffer b;\nb.project_name_ = \"abcde\"; // works with string literals.\nb.project_id_ = b.project_name_;  // can copy from std::string to std::string\n</code></pre>\n", "OwnerUserId": "410767", "PostTypeId": "2", "Id": "3608154", "Score": "1", "CreationDate": "2010-08-31T10:33:19.310", "LastActivityDate": "2010-08-31T10:33:19.310"}, "3608062": {"ParentId": "3607974", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Let's look at the first case:</p>\n<pre><code>buffer buf; \nbuf.ProjectID = \"3174\"; \nbuf.ProjectName = \"NDS\"; \n</code></pre>\n<blockquote>\n<p id=\"so_3607974_3608062_0\">$2.13.4/1 - \"An ordinary string\n  literal has type \u201carray of n const\n  char\u201d and static storage duration\n  (3.7)\"</p>\n</blockquote>\n<p>The type of <code>\"3174\"</code> is <code>char const [5]</code> and type of \"NDS\" is <code>char const [4]</code>. While trying to attempt the assignment to <code>'buf.ProjectID'</code>, the compiler has to essentially convert from <code>'char const [5]'</code> to <code>'char const [20]'</code>. This conversion is not allowed by C++ rules. In fact, a more appropriate error message is thrown in your next attempt.</p>\n<blockquote>\n<p id=\"so_3607974_3608062_1\">$8.3.4/5 - '[Note: conversions\n  affecting lvalues of array type are\n  described in 4.2. Objects of array\n  types <strong>cannot be modified</strong>, see 3.10. ]\". </p>\n</blockquote>\n<p>In other words it means, that name of an array is non modifiable lvalue (which is what the 2nd compiler message says).</p>\n<blockquote>\n<p id=\"so_3607974_3608062_2\">$5.17- \"There are several assignment\n  operators, all of which group\n  right-to-left. All require a\n  <strong>modifiable lvalue</strong> as their left\n  operand, and the type of an assignment\n  expression is that of its left\n  operand.\"</p>\n</blockquote>\n<p>So here is the summary:</p>\n<p>For the assignment expression to work, the left hand side should be a modifiable LValue expression. However an array is a non modifiable Lvalue expression. Hence it can not be assigned to.</p>\n", "OwnerUserId": "418110", "LastEditorUserId": "418110", "LastEditDate": "2010-08-31T10:35:55.770", "Id": "3608062", "Score": "3", "CreationDate": "2010-08-31T10:18:57.537", "LastActivityDate": "2010-08-31T10:35:55.770"}, "3607998": {"ParentId": "3607974", "CommentCount": "0", "Body": "<p>You have to copy the string into the array:</p>\n<pre><code>strcpy(buf.ProjectName, \"3174\");\n</code></pre>\n<p>Be careful with the length of the strings being copied into the arrays</p>\n", "OwnerUserId": "20367", "PostTypeId": "2", "Id": "3607998", "Score": "7", "CreationDate": "2010-08-31T10:08:12.020", "LastActivityDate": "2010-08-31T10:08:12.020"}, "3608001": {"ParentId": "3607974", "CommentCount": "2", "Body": "<p>You can not assign strings like that in C++. You need to use the function such as <code>strcpy</code> to copy the string. Or better still use the class <code>std::string</code></p>\n", "OwnerUserId": "39742", "PostTypeId": "2", "Id": "3608001", "Score": "4", "CreationDate": "2010-08-31T10:08:19.740", "LastActivityDate": "2010-08-31T10:08:19.740"}, "3607974": {"CommentCount": "1", "ViewCount": "5839", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-08-31T10:04:12.307", "LastActivityDate": "2010-08-31T10:35:55.770", "Title": "error C2440: '=' : cannot convert from 'char [5]' to 'char [20]'", "AcceptedAnswerId": "3607998", "LastEditDate": "2017-05-23T12:31:48.467", "Id": "3607974", "Score": "3", "Body": "<p>This is linked to my previous <a href=\"https://stackoverflow.com/questions/3606933/how-to-send-a-structure-using-sendto\">post</a></p>\n<p>Wher I created a Struct :</p>\n<pre><code>struct buffer\n{\n    char ProjectName[20];\n       char ProjectID[20];\n};\n</code></pre>\n<p>Now while I am trying to assign values to it:</p>\n<pre><code>buffer buf;\nbuf.ProjectID = \"3174\";\nbuf.ProjectName = \"NDS\";\n</code></pre>\n<p>I am getting this error:</p>\n<pre><code>error C2440: '=' : cannot convert from 'char [5]' to 'char [20]'\n</code></pre>\n<p>and to resolve this I tried decreasing the size of  structure as below(must not be the way to do it) :</p>\n<pre><code>struct buffer\n{\n\n    char ProjectName[4];\n    char ProjectID[5];\n};\n</code></pre>\n<p>and the get <code>error C2106: '=' : left operand must be l-value</code></p>\n", "Tags": "<c++><visual-c++><struct>", "OwnerUserId": "291224", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_3607974_3608062_0": {"section_id": 5356, "quality": 0.8181818181818182, "length": 9}, "so_3607974_3608062_2": {"section_id": 6173, "quality": 0.6666666666666666, "length": 14}, "so_3607974_3608062_1": {"section_id": 3232, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_3607974_3608062_0": {"section_id": 5153, "quality": 0.8181818181818182, "length": 9}, "so_3607974_3608062_2": {"section_id": 5934, "quality": 0.6666666666666666, "length": 14}, "so_3607974_3608062_1": {"section_id": 3105, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_3607974_3608062_0": {"section_id": 6781, "quality": 0.8181818181818182, "length": 9}, "so_3607974_3608062_2": {"section_id": 7675, "quality": 0.7619047619047619, "length": 16}, "so_3607974_3608062_1": {"section_id": 3989, "quality": 0.6666666666666666, "length": 10}}}});