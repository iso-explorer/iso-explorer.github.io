post_cb({"bq_ids": {"n4140": {"so_5497987_5498038_1": {"length": 14, "quality": 1.0, "section_id": 428}}, "n3337": {"so_5497987_5498038_1": {"length": 14, "quality": 1.0, "section_id": 420}}, "n4659": {"so_5497987_5498038_1": {"length": 14, "quality": 1.0, "section_id": 446}}}, "5498038": {"Id": "5498038", "PostTypeId": "2", "Body": "<p>You can't use the initializer list - you'll need to use assignment in the ctor.</p>\n<pre><code>union subid_u\n{\n    subid_u(uint32_t gid_, uint32_t sid_) {\n      detail.gid = gid_;\n      detail.sid = sid_;\n    }\n    ...\n};\n</code></pre>\n<p>This limitation is a result of combining two facts:</p>\n<p>9.5/1 snippet:</p>\n<blockquote>\n<p id=\"so_5497987_5498038_0\">An object of a class with a\n  non-trivial constructor (12.1), a\n  non-trivial copy constructor (12.8), a\n  non-trivial destructor (12.4), or a\n  non-trivial copy assignment operator\n  (13.5.3, 12.8) cannot be a member of a\n  union, nor can an array of such\n  objects.</p>\n</blockquote>\n<p>12.6.2/1 snippet:</p>\n<blockquote>\n<p id=\"so_5497987_5498038_1\">In the definition of a constructor for\n  a class, initializers for direct and\n  virtual base subobjects and nonstatic\n  data members can be specified by a\n  ctor-initializer,</p>\n</blockquote>\n<p>So, you can only initialize direct member variables in an initializer list (allowing you to initialize detail but not detail's members), and you cannot have a class with a constructor as a union member.</p>\n", "LastEditorUserId": "616700", "LastActivityDate": "2011-03-31T10:01:43.083", "Score": "1", "CreationDate": "2011-03-31T09:53:59.703", "ParentId": "5497987", "CommentCount": "0", "LastEditDate": "2011-03-31T10:01:43.083", "OwnerUserId": "616700"}, "5497987": {"ViewCount": "2345", "Body": "<p>I have created a union comprising a uint64_t and a struct. I would like the union constructor to construct the inner struct but I can't seem to get it working. Here's a couple of variations I have tried:</p>\n<pre><code>union subid_u\n{\n    inline subid_u(uint32_t gid_, uint32_t sid_)\n        : detail.gid(gid_), detail.sid(sid_) {}\n\n    struct detail_t\n    {\n        uint32_t gid;\n        uint32_t sid;\n    };\n\n    detail_t    detail;\n    uint64_t    subscriptionID;\n};\n//main.cpp: In constructor 'subid_u::subid_u(uint32_t, uint32_t)':\n//main.cpp:7: error: expected `(' before '.' token\n//main.cpp:7: error: expected `{' before '.' token\n\n\nunion subid_u\n{\n    inline subid_u(uint32_t gid_, uint32_t sid_)\n        : detail(gid_, sid_) {}\n\n    struct detail_t\n    {\n        inline detail_t(uint32_t g, uint32_t s)\n            : gid(g), sid(s) {}\n\n        uint32_t gid;\n        uint32_t sid;\n    };\n\n    detail_t    detail;\n    uint64_t    subscriptionID;\n};\n//main.cpp:18: error: member 'subid_u::detail_t subid_u::detail' with constructor not allowed in union\n</code></pre>\n", "AcceptedAnswerId": "5498052", "Title": "Constructing struct within union", "CreationDate": "2011-03-31T09:49:40.377", "Id": "5497987", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-09-25T23:29:26.690", "LastEditorUserId": "718379", "LastActivityDate": "2012-09-25T23:29:26.690", "Score": "1", "OwnerUserId": "551283", "Tags": "<c++><struct><unions>", "AnswerCount": "2"}, "5498052": {"Id": "5498052", "PostTypeId": "2", "Body": "<p>You can't initialise members of members like that: you'd have to have a constructor in <code>detail</code> and invoke that from <code>subid_u</code>'s ctor-initialiser.</p>\n<pre><code>union subid_u\n{\n    inline subid_u(uint32_t gid, uint32_t sid) : detail(gid, sid) {}\n\n    struct detail_t\n    {\n        detail_t(uint32_t gid, uint32_t sid) : gid(gid), sid(sid) {}\n        uint32_t gid;\n        uint32_t sid;\n    };\n\n    detail_t    detail;\n    uint64_t    subscriptionID;\n};\n</code></pre>\n<p>So you tried that, and got your second error. Yes, it doesn't make sense for a complex object to be in a union.</p>\n<p>Instead of initialisation, use assignment (and I'd <em>never</em> usually recommend this!)</p>\n<pre><code>union subid_u\n{\n    inline subid_u(uint32_t gid_, uint32_t sid_) {\n        detail.gid = gid_;\n        detail.sid = sid_;\n    }\n\n    struct detail_t\n    {\n        uint32_t gid;\n        uint32_t sid;\n    };\n\n    detail_t    detail;\n    uint64_t    subscriptionID;\n};\n</code></pre>\n<p>Problem solved...?</p>\n<p>In C++0x you'll be able to do this:</p>\n<pre><code>union subid_u\n{\n    inline subid_u(uint32_t gid, uint32_t sid) : detail{gid, sid} {}\n\n    struct detail_t\n    {\n        uint32_t gid;\n        uint32_t sid;\n    };\n\n    detail_t    detail;\n    uint64_t    subscriptionID;\n};\n</code></pre>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-03-31T10:35:59.323", "Score": "4", "CreationDate": "2011-03-31T09:55:00.343", "ParentId": "5497987", "CommentCount": "3", "LastEditDate": "2011-03-31T10:35:59.323", "OwnerUserId": "560648"}});