post_cb({"14005158": {"Id": "14005158", "PostTypeId": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1395\" rel=\"noreferrer\">This is considered a defect in the current standard</a>. Even the standard itself relies on non-variadic templates to be partially ordered before variadic ones in the specification of <code>std::common_type</code>:</p>\n<p><code>\u00a720.9.7.6 [meta.trans.other] p3</code></p>\n<blockquote>\n<p id=\"so_14005020_14005158_0\">The nested typedef <code>common_type::type</code> shall be defined as follows:</p>\n</blockquote>\n<pre><code>template &lt;class ...T&gt; struct common_type;\n\ntemplate &lt;class T&gt;\nstruct common_type&lt;T&gt; {\n  typedef T type;\n};\n\ntemplate &lt;class T, class U&gt;\nstruct common_type&lt;T, U&gt; {\n  typedef decltype(true ? declval&lt;T&gt;() : declval&lt;U&gt;()) type;\n};\n\ntemplate &lt;class T, class U, class... V&gt;\nstruct common_type&lt;T, U, V...&gt; {\n  typedef typename common_type&lt;typename common_type&lt;T, U&gt;::type, V...&gt;::type type;\n};\n</code></pre>\n<p>Specifically <code>common_type&lt;T, U&gt;</code> vs <code>common_type&lt;T, U, V...&gt;</code>.</p>\n", "LastActivityDate": "2012-12-22T17:55:26.150", "CommentCount": "0", "CreationDate": "2012-12-22T17:55:26.150", "ParentId": "14005020", "Score": "13", "OwnerUserId": "500104"}, "bq_ids": {"n4140": {"so_14005020_14005158_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4725}, "so_14005020_14005020_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 161}}, "n3337": {"so_14005020_14005158_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4532}, "so_14005020_14005020_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 155}}, "n4659": {"so_14005020_14005020_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 165}}}, "14005020": {"ViewCount": "605", "Body": "<p>The following code compiles in both gcc 4.7.2 and MSVC-11.0:</p>\n<pre><code>template &lt;typename T&gt;\nvoid foo(T bar) {}\n\ntemplate &lt;typename T, typename... Args&gt;\nvoid foo(T bar, Args... args) {}\n\nint main()\n{\n    foo(0); // OK\n}\n</code></pre>\n<p>Why? I think that it's must be ambiguous call:</p>\n<p><strong>ISO/IEC 14882:2011</strong></p>\n<blockquote>\n<p id=\"so_14005020_14005020_0\">14.5.6.2 Partial ordering of function templates [temp.func.order]</p>\n</blockquote>\n<p>5 ...</p>\n<pre><code>[ Example:\n\ntemplate&lt;class T, class... U&gt; void f(T, U...); // #1\n\ntemplate&lt;class T &gt; void f(T); // #2\n\ntemplate&lt;class T, class... U&gt; void g(T*, U...); // #3\n\ntemplate&lt;class T &gt; void g(T); // #4\n\nvoid h(int i) {\n\nf(&amp;i); // error: ambiguous\n\ng(&amp;i); // OK: calls #3\n\n}\n\n\u2014end example ]\n</code></pre>\n", "Title": "variadic templates - ambiguous call", "CreationDate": "2012-12-22T17:37:47.113", "LastActivityDate": "2012-12-22T18:02:32.047", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-12-22T18:02:32.047", "LastEditorUserId": "500104", "Id": "14005020", "Score": "11", "OwnerUserId": "1608835", "Tags": "<c++><templates><c++11><language-lawyer><variadic-templates>", "AnswerCount": "2"}, "14005182": {"Id": "14005182", "PostTypeId": "2", "Body": "<p>Yep, you're right! That's a compiler \"feature\", and quite possibly a <em>deliberate</em> one since the committee has suggested, in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1395\" rel=\"nofollow\">issue #1395</a>, that this case <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/comp.lang.c++.moderated/EHIBDm43faM\" rel=\"nofollow\"><em>should</em> be accepted</a> and, as such, it seems likely that in future standards (or even a TR) it <em>will</em> be.</p>\n", "LastActivityDate": "2012-12-22T17:57:37.673", "CommentCount": "0", "CreationDate": "2012-12-22T17:57:37.673", "ParentId": "14005020", "Score": "3", "OwnerUserId": "560648"}});