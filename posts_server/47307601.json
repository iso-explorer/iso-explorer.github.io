post_cb({"47307768": {"Id": "47307768", "PostTypeId": "2", "Body": "<blockquote id=\"so_47307601_47307768_0\">\n<ul>\n<li>Why doesn't allowed default argument for array subscript operator?</li>\n<li>Why does allowed default argument for function call operator?</li>\n</ul>\n</blockquote>\n<p>Mainly because the C++ grammar says so. According to A.4 [gram.expr]:</p>\n<blockquote id=\"so_47307601_47307768_1\">\n<pre><code>postfix-expression --&gt; postfix-expression [ expr-or-braced-init-list ] \n                   --&gt; postfix-expression ( expression-list opt ) \n                   --&gt; simple-type-specifier (expression-list opt) \n                   --&gt; typename-specifier ( expression-list opt )\n</code></pre>\n</blockquote>\n<p>The parameters for braces are optional, the ones for brackets not.\nAs suggested in the comment, note that brackets are required to take exactly <em>one</em> parameter whereas the braces can take an arbitrary number of parameters.</p>\n<p>Also consider songyuanyao's answer for an explicit statement from the standard.</p>\n", "LastEditorUserId": "7703564", "LastActivityDate": "2017-11-15T15:22:55.950", "Score": "13", "CreationDate": "2017-11-15T12:44:12.240", "ParentId": "47307601", "CommentCount": "1", "OwnerUserId": "7703564", "LastEditDate": "2017-11-15T15:22:55.950"}, "47310704": {"Id": "47310704", "PostTypeId": "2", "Body": "<p>I suppose you are really asking <em>why</em> the standard allows one and not the other. The <strong>reason is mainly to do with what people expect</strong>, rather than some technical logic that precludes a default in one case but not the other:</p>\n<p>It's a matter of what people expect the [] operator to mean. Normally it means \"Get the element at [...]\" where we use an int or some other type to make a specific query about a member of a collection. We are always interested in asking about a specific member, and we always have a specific query in mind.</p>\n<p>Now consider what a default argument means. Often it means \"you can specify this, but if not I'll assume this default\". This works great for certain functions, and people are used to it.</p>\n<p>Changing this would probably make a lot of people scratch their heads when they see <code>int x = vec[]</code></p>\n", "LastActivityDate": "2017-11-15T15:03:03.690", "CommentCount": "0", "CreationDate": "2017-11-15T15:03:03.690", "ParentId": "47307601", "Score": "2", "OwnerUserId": "233076"}, "47308767": {"Id": "47308767", "PostTypeId": "2", "Body": "<p>The operators (both overloading of user-defined-types and for inbuilt types) are intended to let people use notations familiar from mathematics, logic and general usage (though <code>&lt;&lt;</code> and <code>&gt;&gt;</code> have seen double-service as streaming operators, and notational compromises had to be made given the limited characters near-universally available on computers).  To turn around and allow variations on the intuitive, familiar notations (such as implied arguments) seems counter-productive.</p>\n<p><code>operator()</code> is different though in that it's there to abstract away differences between \"calling\" (through) an object and calling a hard-coded function - it needs to support default arguments to do that properly.</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2017-11-15T13:38:43.523", "Score": "1", "CreationDate": "2017-11-15T13:33:04.237", "ParentId": "47307601", "CommentCount": "0", "OwnerUserId": "410767", "LastEditDate": "2017-11-15T13:38:43.523"}, "47307601": {"ViewCount": "682", "Body": "<p>In the following code, I have provided <strong>default arguments</strong> for <strong>array subscript operator</strong>.</p>\n<pre><code>struct st \n{\n    int operator[](int x = 0)\n    {\n        // code here\n    }\n};\n</code></pre>\n<p>But, compiler generated an error :</p>\n<pre><code>error: 'int st::operator[](int)' cannot have default arguments\n     int operator[](int x = 0)\n</code></pre>\n<p>But, If I provide default arguments for <strong>function call</strong> operator.</p>\n<pre><code>struct st \n{\n    int operator()(int x = 0)\n    {\n        // code here\n    }\n};\n</code></pre>\n<p>It's working fine.</p>\n<p>So, I have a questions:</p>\n<ul>\n<li>Why doesn't allowed default arguments for the array subscript operator?</li>\n<li>Why does allowed default arguments for the function call operator?</li>\n</ul>\n", "AcceptedAnswerId": "47308482", "Title": "Provide default arguments for subscript operator and function call operator", "CreationDate": "2017-11-15T12:35:20.887", "Id": "47307601", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-11-16T05:06:36.050", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-16T05:06:36.050", "Score": "12", "OwnerUserId": "6935629", "Tags": "<c++><operator-overloading><operators><language-lawyer><default-arguments>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_47307601_47308482_2": {"length": 11, "quality": 1.0, "section_id": 662}, "so_47307601_47308482_1": {"length": 7, "quality": 1.0, "section_id": 466}, "so_47307601_47308482_0": {"length": 26, "quality": 1.0, "section_id": 655}, "so_47307601_47307768_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 5984}}, "n3337": {"so_47307601_47308482_2": {"length": 11, "quality": 1.0, "section_id": 652}, "so_47307601_47308482_1": {"length": 7, "quality": 1.0, "section_id": 457}, "so_47307601_47308482_0": {"length": 26, "quality": 1.0, "section_id": 645}, "so_47307601_47307768_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 5752}}, "n4659": {"so_47307601_47308482_2": {"length": 11, "quality": 1.0, "section_id": 690}, "so_47307601_47308482_1": {"length": 7, "quality": 1.0, "section_id": 489}, "so_47307601_47308482_0": {"length": 26, "quality": 1.0, "section_id": 683}, "so_47307601_47307768_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 7484}}}, "47308482": {"Id": "47308482", "PostTypeId": "2", "Body": "<p>The standard states it quite clearly.</p>\n<p>The default arguments are not allowed in <a href=\"http://eel.is/c++draft/over.oper#8\" rel=\"noreferrer\">operator overloading</a> of <a href=\"http://eel.is/c++draft/over.oper#over.sub-1\" rel=\"noreferrer\">subscripting operator</a>.</p>\n<blockquote>\n<p id=\"so_47307601_47308482_0\">An operator function cannot have default arguments, except where explicitly stated below. Operator functions cannot have more or fewer parameters than the number required for the corresponding operator, as described in the rest of this subclause.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_47307601_47308482_1\"><code>operator[]</code> shall be a non-static member function with exactly one parameter. </p>\n</blockquote>\n<p>While for <a href=\"http://eel.is/c++draft/over.oper#over.call-1\" rel=\"noreferrer\">function call operator</a></p>\n<blockquote>\n<p id=\"so_47307601_47308482_2\"><code>operator()</code> shall be a non-static member function with an arbitrary number of parameters. It can have default arguments.</p>\n</blockquote>\n<p>Overloaded operators try to follow the same behavior of the built-in ones; with the built-in subscript operator the (only one) index is always required, it doesn't have <em>default arguments</em>. Then the overloaded operator is not allowed to have default arguments either. On the other hand, functions are always fine to take arbitrary number of parameters and have default arguments.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2017-11-15T15:33:57.187", "Score": "13", "CreationDate": "2017-11-15T13:20:18.567", "ParentId": "47307601", "CommentCount": "7", "OwnerUserId": "3309790", "LastEditDate": "2017-11-15T15:33:57.187"}});