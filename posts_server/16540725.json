post_cb({"bq_ids": {"n4140": {"so_16540725_16540757_2": {"length": 56, "quality": 0.9824561403508771, "section_id": 3376}, "so_16540725_16540757_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 399}, "so_16540725_16540757_4": {"length": 4, "quality": 0.8, "section_id": 2420}}, "n3337": {"so_16540725_16540757_2": {"length": 49, "quality": 0.8596491228070176, "section_id": 3246}, "so_16540725_16540757_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 390}, "so_16540725_16540757_4": {"length": 4, "quality": 0.8, "section_id": 2405}}, "n4659": {"so_16540725_16540757_4": {"length": 4, "quality": 0.8, "section_id": 2695}}}, "16540725": {"ViewCount": "1732", "Body": "<p>any idea why \nvirtual ~exception() throw() is in C++98,\nbut \nvirtual ~exception() is in C++11?</p>\n<p>What's the design decision that allows C++11 to throw in the destructor of the class <code>exception</code>?</p>\n<p>From <a href=\"http://www.cplusplus.com/reference/exception/exception/\" rel=\"nofollow\">here</a>:</p>\n<p>c++98:</p>\n<pre><code>class exception {\npublic:\n  exception () throw();\n  exception (const exception&amp;) throw();\n  exception&amp; operator= (const exception&amp;) throw();\n  virtual ~exception() throw();\n  virtual const char* what() const throw();\n}\n</code></pre>\n<p>c++11:</p>\n<pre><code>class exception {\npublic:\n  exception () noexcept;\n  exception (const exception&amp;) noexcept;\n  exception&amp; operator= (const exception&amp;) noexcept;\n  virtual ~exception();\n  virtual const char* what() const noexcept;\n}\n</code></pre>\n", "AcceptedAnswerId": "16540757", "Title": "C++11 Exception's destructor allows to throw now?", "CreationDate": "2013-05-14T10:24:28.680", "Id": "16540725", "CommentCount": "3", "LastEditDate": "2013-05-14T14:59:29.853", "PostTypeId": "1", "LastEditorUserId": "1131467", "LastActivityDate": "2013-05-14T15:35:03.263", "Score": "13", "OwnerUserId": "1880729", "Tags": "<c++><exception><c++11><destructor><c++98>", "AnswerCount": "1"}, "16540757": {"Id": "16540757", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16540725_16540757_0\">What's the desing decision makes C++11 allow to throw in the destructor of the class <code>exception</code>?</p>\n</blockquote>\n<p>There was no such design decision (fortunately!). In C++11, even explicitly declared destructors are qualified as <code>noexcept</code> by default. This can be evinced from paragraph 12.4/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16540725_16540757_1\">A declaration of a destructor that does not have an <em>exception-specification</em> is implicitly considered to have\n  the same <em>exception-specification</em> as an implicit declaration (15.4).</p>\n</blockquote>\n<p>And from paragraph 15.4/14, which specifies what exception specification an implicit declaration has:</p>\n<blockquote>\n<p id=\"so_16540725_16540757_2\">An inheriting constructor (12.9) and an implicitly declared special member function (Clause 12) have an\n  exception-specification. If <code>f</code> is an inheriting constructor or an <strong>implicitly declared</strong> default constructor, copy\n  constructor, move constructor, <strong>destructor</strong>, copy assignment operator, or move assignment operator, its implicit\n  exception-specification specifies the type-id <code>T</code> if and only if <code>T</code> is allowed by the exception-specification\n  of a function directly invoked by f\u2019s implicit definition; <code>f</code> allows all exceptions if any function it directly\n  invokes allows all exceptions, and <strong><code>f</code> has the exception-specification <code>noexcept(true)</code> if every function it directly\n  invokes allows no exceptions</strong>.</p>\n</blockquote>\n<p>Together, the above two paragraphs guarantee (given the declaration you quoted of <code>exception</code>'s destructor) that the destructor of <code>exception</code> won't throw. </p>\n<p>This is also explicitly stated in paragraphs 18.8.1/7-8 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16540725_16540757_3\"><code>virtual ~exception();</code></p>\n<p id=\"so_16540725_16540757_4\">7 <em>Effects</em>: Destroys an object of class exception.</p>\n<p id=\"so_16540725_16540757_5\">8 <em>Remarks</em>: <strong>Does not throw any exceptions</strong>.</p>\n</blockquote>\n<p>Notice, that dynamic exception specifications (such as <code>throw()</code>) are deprecated in C++11. Per \u00a7 D.4/1 of the Annex D:</p>\n<blockquote>\n<p id=\"so_16540725_16540757_6\">The use of <em>dynamic-exception-specifications</em> is deprecated.</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-14T15:35:03.263", "Score": "28", "CreationDate": "2013-05-14T10:26:11.783", "ParentId": "16540725", "CommentCount": "4", "OwnerUserId": "1932150", "LastEditDate": "2013-05-14T15:35:03.263"}});