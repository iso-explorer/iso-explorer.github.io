post_cb({"3588116": {"ParentId": "3571771", "CommentCount": "0", "Body": "<p>The OS X <code>&lt;ctype.h&gt;</code> header protects the non-standard inline versions with a check that you are not compiling in standards mode.</p>\n<p>If you don't tell the compiler you want conformance, you don't get conformance.  This is true on almost all platforms, though in different ways.</p>\n<p>If you want all the niceties of extensions and what not, and so don't want to require strict conformance, you can define <code>_DONT_USE_CTYPE_INLINE_</code> before including the header and you will get non-inline versions of the functions with external linkage.</p>\n", "OwnerUserId": "142434", "PostTypeId": "2", "Id": "3588116", "Score": "3", "CreationDate": "2010-08-27T21:07:15.600", "LastActivityDate": "2010-08-27T21:07:15.600"}, "3571771": {"CommentCount": "1", "AcceptedAnswerId": "3571776", "PostTypeId": "1", "LastEditorUserId": "13430", "CreationDate": "2010-08-26T03:04:10.123", "LastActivityDate": "2010-08-27T21:07:15.600", "LastEditDate": "2010-08-27T20:58:24.377", "ViewCount": "457", "FavoriteCount": "1", "Title": "Are all functions in the c++ standard library required have external linkage?", "Id": "3571771", "Score": "10", "Body": "<p>So I've got an app which compiles fine on windows, linux and a few variations of unix. I recently decided to port it to OSX when I ran into a snag.</p>\n<p>I have a template which looks like this:</p>\n<pre><code>template&lt;int (&amp;F)(int)&gt;\nint safe_ctype(unsigned char c) { return F(c); }\n</code></pre>\n<p>the idea being to prevent sign extension from crashing certain implementations when given input values above <code>0x7f</code>. It is typically used like this:</p>\n<pre><code>safe_ctype&lt;std::isspace&gt;(ch);\n</code></pre>\n<p>This unfortunately doesn't work on OSX (using gcc 4.2). The error has to do with <code>std::isspace</code> not having external linkage and therefore not applicable for templates. It turns out that on OSX, the <code>ctype.h</code> header has all functions (through macros) marked <code>static inline</code>.</p>\n<p>Here's my question:</p>\n<p><strong>Is it permitted by any relevant standard for functions in the C++ (in this case the parts inherited from C's) standard library to not have external linkage?</strong></p>\n<p><strong>EDIT:</strong></p>\n<p>I've heard back from apple. Apparently they have a macro to control this behavior. Defining <code>_DONT_USE_CTYPE_INLINE_</code> prevents the ctype functions from being static inline.</p>\n", "Tags": "<c++><c><standard-library><linkage>", "OwnerUserId": "13430", "AnswerCount": "3"}, "3571821": {"ParentId": "3571771", "CommentCount": "3", "Body": "<p>How about using \"cctype\" (i mean within angle brackets) instead of \"ctype.h\" Anyways,  would be an old-styed header I guess.</p>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3571821", "Score": "0", "CreationDate": "2010-08-26T03:18:53.040", "LastActivityDate": "2010-08-26T03:18:53.040"}, "bq_ids": {"n4140": {"so_3571771_3571776_0": {"section_id": 6271, "quality": 0.6666666666666666, "length": 4}, "so_3571771_3571776_1": {"section_id": 5882, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_3571771_3571776_0": {"section_id": 6031, "quality": 0.6666666666666666, "length": 4}, "so_3571771_3571776_1": {"section_id": 5653, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_3571771_3571776_0": {"section_id": 7777, "quality": 0.6666666666666666, "length": 4}, "so_3571771_3571776_1": {"section_id": 701, "quality": 0.5714285714285714, "length": 4}}}, "3571776": {"ParentId": "3571771", "CommentCount": "1", "Body": "<p>C++03 \u00a717.4.2.2/1 says:</p>\n<blockquote>\n<p id=\"so_3571771_3571776_0\">Entities in the C++ Standard Library have external linkage.</p>\n</blockquote>\n<p>The same is true in C:  C99 \u00a77.1.2/6 says:</p>\n<blockquote>\n<p id=\"so_3571771_3571776_1\">Any declaration of a library function shall have external linkage.</p>\n</blockquote>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "3571776", "Score": "18", "CreationDate": "2010-08-26T03:06:15.063", "LastActivityDate": "2010-08-26T03:06:15.063"}});