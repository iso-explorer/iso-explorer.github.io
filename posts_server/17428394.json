post_cb({"bq_ids": {"n4140": {"so_17428394_17488350_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5938}, "so_17428394_17437848_0": {"length": 5, "quality": 1.0, "section_id": 593}, "so_17428394_17437848_1": {"length": 5, "quality": 1.0, "section_id": 3321}}, "n3337": {"so_17428394_17488350_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5710}, "so_17428394_17437848_0": {"length": 5, "quality": 1.0, "section_id": 3191}, "so_17428394_17437848_1": {"length": 5, "quality": 1.0, "section_id": 3191}}, "n4659": {"so_17428394_17488350_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 7422}, "so_17428394_17437848_0": {"length": 5, "quality": 1.0, "section_id": 616}, "so_17428394_17437848_1": {"length": 5, "quality": 1.0, "section_id": 4087}}}, "17437848": {"Id": "17437848", "PostTypeId": "2", "Body": "<p><strong>Short story:</strong></p>\n<p><code>T&amp;</code> is <em>not</em> reference-compatible with <code>T</code>, however that is not relevant.</p>\n<p><code>T</code> is reference-compatible with <code>T</code> (itself).  That fact is used to apply 8.5.3p5.  Note the first few words of 8.5.3p5 <em>\"A reference <strong>to</strong> type cv1 T1...\"</em>.  So <code>cv1 T1 is T</code>, not <code>cv1 T1 is T&amp;</code>.</p>\n<p><strong>Long story:</strong></p>\n<pre><code>T&amp; r = t;\n</code></pre>\n<p><code>t</code> is an expression of type <code>T</code> (references are striped from expressions.  The type of the expression <code>t</code> is not <code>lvalue-reference to T</code> despite the fact that the type of the variable it names is) with a value category <code>lvalue</code>.</p>\n<p><code>T&amp;r = t;</code> is a declaration that declares and initializes a variable <code>r</code> of type <code>lvalue-reference to T</code>, copy-initialized with the previously mentioned expression.</p>\n<p>The action of this initialization is a direct reference binding.</p>\n<p>In this case <code>T</code> is both reference-related and reference-compatible with itself as it is the <em>same type</em> with the <em>same cv qualification</em>.</p>\n<p>8.5.3p4 just defines these two type relationships.</p>\n<p>Now, look again at 8.5.3p5 rewritten to your specific example:</p>\n<blockquote>\n<p id=\"so_17428394_17437848_0\">A <strong>reference to type \u201cT\u201d</strong> is initialized by an <strong>expression of type \u201cT\u201d</strong>:</p>\n<ul>\n<li><p id=\"so_17428394_17437848_1\">If the reference is an lvalue reference and the initializer expression</p></li>\n<li><ul>\n<li>is an <strong>lvalue</strong>, and <strong>\u201cT\u201d is reference-compatible with \u201cT\u201d</strong></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>So the <code>T</code> here is the value type, not that reference type.</p>\n", "LastEditorUserId": "1131467", "LastActivityDate": "2013-07-03T01:33:17.963", "Score": "2", "CreationDate": "2013-07-03T00:22:51.687", "ParentId": "17428394", "CommentCount": "0", "OwnerUserId": "1131467", "LastEditDate": "2013-07-03T01:33:17.963"}, "17488350": {"Id": "17488350", "PostTypeId": "2", "Body": "<p>The initializer in the expression `T&amp; r = t;\" has type T, not T&amp;, by 5/5 in the Standard as follows:</p>\n<blockquote>\n<p id=\"so_17428394_17488350_0\">If an expression initially has the type \u201creference to T\u201d (8.3.2,\n  8.5.3), the type is adjusted to T prior to any further analysis. The expression designates the object or function denoted by the reference,\n  and the expression is an lvalue or an xvalue, depending on the\n  expression.</p>\n</blockquote>\n", "LastActivityDate": "2013-07-05T11:56:25.623", "CommentCount": "0", "CreationDate": "2013-07-05T11:56:25.623", "ParentId": "17428394", "Score": "2", "OwnerUserId": "2337207"}, "17428394": {"ViewCount": "91", "Body": "<p>Given</p>\n<pre><code>T w;\nT&amp; t = w;\n</code></pre>\n<p>how do I establish, using 8.5.3p4 and p5, that <code>r</code> binds to <code>t</code> below, i.e., that <code>T</code> is reference-compatible with <code>T&amp;</code>?</p>\n<pre><code>T&amp; r = t;\n</code></pre>\n<p>Observe that <code>T</code> is not the same type as <code>T&amp;</code>, neither a base class of <code>T&amp;</code>, and so according to 8.5.3p4 we can't say that <code>T</code> is reference-related to <code>T&amp;</code>. </p>\n", "AcceptedAnswerId": "17488350", "Title": "Using 8.5.3p4 in the Standard, how do I establish that T is reference-compatible to a T&?", "CreationDate": "2013-07-02T14:33:57.177", "Id": "17428394", "CommentCount": "6", "LastEditDate": "2013-07-02T14:37:07.197", "PostTypeId": "1", "LastEditorUserId": "1774667", "LastActivityDate": "2013-07-05T11:56:25.623", "Score": "1", "OwnerUserId": "1042389", "Tags": "<c++><c++11><standards><language-lawyer>", "AnswerCount": "2"}});