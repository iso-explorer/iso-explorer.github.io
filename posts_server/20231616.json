post_cb({"20232699": {"Id": "20232699", "PostTypeId": "2", "Body": "<p>In C language, global const variable has its address, while in c++ it is seen as a compile-time constant and put into symbol table so it is unique.</p>\n<p>Hi, Chinese buddy :D</p>\n", "LastActivityDate": "2013-11-27T02:17:01.820", "CommentCount": "4", "CreationDate": "2013-11-27T02:17:01.820", "ParentId": "20231616", "Score": "1", "OwnerUserId": "2439506"}, "bq_ids": {"n4140": {"so_20231616_20232726_0": {"length": 11, "quality": 0.6111111111111112, "section_id": 7136}}, "n3337": {"so_20231616_20232726_0": {"length": 11, "quality": 0.6111111111111112, "section_id": 6880}}, "n4659": {"so_20231616_20232726_0": {"length": 11, "quality": 0.6111111111111112, "section_id": 8637}}}, "20231616": {"ViewCount": "106", "Body": "<p>common.h</p>\n<pre><code>int i=10\n\ncpp one:\ninclude \"common.h\"\n\n\ncpp two:\ninclude \"common.h\"\n</code></pre>\n<p>will show multiple definitions error,</p>\n<p>but I change the code :  from int i=10 to const int i=10, it is OK.\nMy question is why const it is OK? what's the difference.</p>\n<p>PS: I know the reason for why only int i=10 isn't ok, but I doesn't know why const i is ok?</p>\n", "Title": "why const x is ok when multi include it", "CreationDate": "2013-11-27T02:04:59.627", "LastActivityDate": "2013-11-27T02:54:55.400", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Id": "20231616", "Score": "1", "OwnerUserId": "1288446", "Tags": "<c++><const>", "AnswerCount": "3"}, "20232726": {"Id": "20232726", "PostTypeId": "2", "Body": "<p>This is because <code>const</code>-qualified declarations in a namespace scope have <em>internal</em> linkage by default:</p>\n<blockquote>\n<p id=\"so_20231616_20232726_0\">7.1.5.1.2. An object declared in namespace scope with a const-qualified type has internal linkage unless it is explicitly declared extern or unless it was previously declared to have external linkage.</p>\n</blockquote>\n<p>Objects with internal linkage are not \"visible\" to the linker, so when you have the same declaration in several translation units, the linker would not notice. This makes sense, because all integer constants with the same value are identical to each other.</p>\n<p>Objects without <code>const</code> qualifier, on the other hand, have external linkage. This is what causes multiple definition error during the link time.</p>\n", "LastActivityDate": "2013-11-27T02:20:05.317", "CommentCount": "2", "CreationDate": "2013-11-27T02:20:05.317", "ParentId": "20231616", "Score": "3", "OwnerUserId": "335858"}, "20232640": {"Id": "20232640", "PostTypeId": "2", "Body": "<p>a global const object doesn't need any storage.</p>\n", "LastActivityDate": "2013-11-27T02:09:31.263", "CommentCount": "1", "CreationDate": "2013-11-27T02:09:31.263", "ParentId": "20231616", "Score": "2", "OwnerUserId": "153891"}});