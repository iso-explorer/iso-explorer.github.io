post_cb({"bq_ids": {"n4140": {"so_7027523_7028318_0": {"length": 23, "quality": 0.92, "section_id": 6365}}, "n3337": {"so_7027523_7028318_0": {"length": 23, "quality": 0.92, "section_id": 6122}}, "n4659": {"so_7027523_7028318_0": {"length": 23, "quality": 0.92, "section_id": 7876}}}, "7028318": {"Id": "7028318", "PostTypeId": "2", "Body": "<p>17.6.5.15 [lib.types.movedfrom]</p>\n<blockquote>\n<p id=\"so_7027523_7028318_0\">Objects of types defined in the C++ standard library may be moved from\n  (12.8). Move operations may be explicitly specified or implicitly\n  generated. Unless otherwise specified, such moved-from objects shall\n  be placed in a valid but unspecified state.</p>\n</blockquote>\n<p>When an object is in an unspecified state, you can perform any operation on the object which has no preconditions.  If there is an operation with preconditions you wish to perform, you can not directly perform that operation because you do not know if the unspecified-state of the object satisfies the preconditions.</p>\n<p>Examples of operations that <em>generally</em> do not have preconditions:</p>\n<ul>\n<li>destruction</li>\n<li>assignment</li>\n<li>const observers such as <code>get</code>, <code>empty</code>, <code>size</code></li>\n</ul>\n<p>Examples of operations that <em>generally</em> do have preconditions:</p>\n<ul>\n<li>dereference</li>\n<li>pop_back</li>\n</ul>\n<p>This answer now appears in video format here: <a href=\"http://www.youtube.com/watch?v=vLinb2fgkHk&amp;t=47m10s\" rel=\"noreferrer\">http://www.youtube.com/watch?v=vLinb2fgkHk&amp;t=47m10s</a></p>\n", "LastEditorUserId": "576911", "LastActivityDate": "2016-10-25T14:40:01.013", "Score": "86", "CreationDate": "2011-08-11T15:09:57.783", "ParentId": "7027523", "CommentCount": "15", "OwnerUserId": "576911", "LastEditDate": "2016-10-25T14:40:01.013"}, "7027695": {"Id": "7027695", "PostTypeId": "2", "Body": "<p>Moved-from objects exist in an unspecified, but valid, state. That suggests that whilst the object might not be capable of doing much anymore, all of its member functions should still exhibit defined behaviour \u2014 including <code>operator=</code> \u2014 and all its members in a defined state- and it still requires destruction. The Standard gives no specific definitions because it would be unique to each UDT, but you might be able to find specifications for Standard types. Some like containers are relatively obvious \u2014 they just move their contents around and an empty container is a well-defined valid state. Primitives don't modify the moved-from object.</p>\n<p>Side note: I believe it's <code>T c = std::move(a)</code> so that if the move constructor (or copy constructor if no move is provided) is explicit the function will fail.</p>\n", "LastEditorUserId": "658087", "LastActivityDate": "2016-03-26T09:09:59.843", "Score": "43", "CreationDate": "2011-08-11T14:30:45.773", "ParentId": "7027523", "CommentCount": "5", "OwnerUserId": "298661", "LastEditDate": "2016-03-26T09:09:59.843"}, "7027523": {"ViewCount": "7027", "Body": "<p>Does the standard define precisely what I can do with an object once it has been moved from? I used to think that all you can do with a moved-from object is do destruct it, but that would not be sufficient.</p>\n<p>For example, take the function template <code>swap</code> as defined in the standard library:</p>\n<pre><code>template &lt;typename T&gt;\nvoid swap(T&amp; a, T&amp; b)\n{\n    T c = std::move(a); // line 1\n    a = std::move(b);   // line 2: assignment to moved-from object!\n    b = std::move(c);   // line 3: assignment to moved-from object!\n}\n</code></pre>\n<p>Obviously, it must be possible to assign to moved-from objects, otherwise lines 2 and 3 would fail. So what else can I do with moved-from objects? Where exactly can I find these details in the standard?</p>\n<p>(By the way, why is it <code>T c = std::move(a);</code> instead of <code>T c(std::move(a));</code> in line 1?)</p>\n", "AcceptedAnswerId": "7027695", "Title": "What can I do with a moved-from object?", "CreationDate": "2011-08-11T14:19:12.767", "Id": "7027523", "CommentCount": "1", "FavoriteCount": "23", "PostTypeId": "1", "LastActivityDate": "2016-10-25T14:40:01.013", "Score": "104", "OwnerUserId": "252000", "Tags": "<c++><c++11><variable-assignment><swap><move-semantics>", "AnswerCount": "2"}});