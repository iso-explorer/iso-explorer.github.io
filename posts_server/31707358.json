post_cb({"31707358": {"CommentCount": "7", "AcceptedAnswerId": "31707753", "CreationDate": "2015-07-29T17:34:36.797", "LastActivityDate": "2015-07-29T18:42:07.307", "PostTypeId": "1", "ViewCount": "92", "FavoriteCount": "1", "Title": "Can the same entity be declared in two different namespaces?", "Id": "31707358", "Score": "2", "Body": "<p>I have a question about \u00a77.3.4/6 in the c++ standard:</p>\n<blockquote>\n<p id=\"so_31707358_31707358_0\">If name lookup finds a declaration for a name in two different\n  namespaces, and the declarations do not declare the same entity and do\n  not declare functions, the use of the name is ill-formed.</p>\n</blockquote>\n<p>Is seems to suggest that there are cases where the same entity is declared in two different namespaces. Else the wording \"and the declarations do not declare the same entity\" would not have been needed.</p>\n<p>Any examples of such situations? Remember that using-declarations are not declaring any entity. They are just referring to a declaration of an entity done elsewhere (possibly indirectly via other using-declarations). Using-declarations are introducing their name into a declarative region however, but that is another thing.</p>\n<p>Remember also that using-directives are not declaring any entities either.</p>\n<p>An finally observe that out of line definitions (definitions using qualified names) for namespace members are not declaring anything in the namespace where they occur, but only in the target namespace.</p>\n", "Tags": "<c++><namespaces><declaration><language-lawyer>", "OwnerUserId": "1272610", "AnswerCount": "3"}, "31707646": {"ParentId": "31707358", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Yes, with <code>extern</code>. From [dcl.link]:</p>\n<blockquote>\n<p id=\"so_31707358_31707646_0\">Two declarations for a function\n  with C language linkage with the same function name (ignoring the namespace names that qualify it) that\n  appear in different namespace scopes refer to the same function. <strong>Two declarations for a variable with C\n  language linkage with the same name (ignoring the namespace names that qualify it) that appear in different\n  namespace scopes refer to the same variable.</strong></p>\n</blockquote>\n<p>For example:</p>\n<pre><code>namespace A {\n    extern \"C\" int x;\n}\n\nnamespace B {\n    extern \"C\" int x;\n}\n\nextern \"C\" {\n    int x;\n}\n\nnamespace D {\n    using namespace A;\n    using namespace B;\n}\n</code></pre>\n<p><code>A::x</code> and <code>B::x</code> (and <code>::x</code>) are all the same entity. As a result, <code>D::x</code> is not ill-formed. </p>\n<hr/>\n<p>Upon further reflection, with a combo of <em>using-declaration</em>s and <em>using-directive</em>s, we can come up with an easier example that doesn't rely on <code>extern</code>:</p>\n<pre><code>namespace A {\n    int i;   \n}\n\nnamespace B {\n    using A::i;\n}\n\nnamespace C {\n    using A::i;\n}\n\nnamespace D {\n    using namespace B;\n    using namespace C;\n}\n\nint main() {\n    D::i = 4; // name lookup finds `i` declared in two different namespaces,\n              // B and C. However, both of those declarations refer to the\n              // same entity, A::i\n}\n</code></pre>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-07-29T18:42:07.307", "Id": "31707646", "Score": "3", "CreationDate": "2015-07-29T17:49:52.797", "LastActivityDate": "2015-07-29T18:42:07.307"}, "bq_ids": {"n4140": {"so_31707358_31707753_3": {"section_id": 5490, "quality": 0.9, "length": 9}, "so_31707358_31707646_0": {"section_id": 5522, "quality": 1.0, "length": 37}, "so_31707358_31707753_0": {"section_id": 5490, "quality": 1.0, "length": 8}, "so_31707358_31707358_0": {"section_id": 5514, "quality": 1.0, "length": 17}}, "n3337": {"so_31707358_31707753_6": {"section_id": 5724, "quality": 0.6666666666666666, "length": 4}, "so_31707358_31707358_0": {"section_id": 5300, "quality": 1.0, "length": 17}, "so_31707358_31707646_0": {"section_id": 5308, "quality": 1.0, "length": 37}, "so_31707358_31707753_3": {"section_id": 5276, "quality": 0.9, "length": 9}, "so_31707358_31707753_0": {"section_id": 5276, "quality": 1.0, "length": 8}, "so_31707358_31707753_2": {"section_id": 5724, "quality": 0.6666666666666666, "length": 4}, "so_31707358_31707753_5": {"section_id": 5724, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_31707358_31707646_0": {"section_id": 6957, "quality": 1.0, "length": 37}, "so_31707358_31707358_0": {"section_id": 6949, "quality": 1.0, "length": 17}, "so_31707358_31707753_3": {"section_id": 6924, "quality": 0.6, "length": 6}, "so_31707358_31707753_0": {"section_id": 6924, "quality": 0.875, "length": 7}}}, "31707912": {"ParentId": "31707358", "CommentCount": "1", "Body": "<pre><code>namespace A{\nvoid fun(){}\n}\nnamespace B{\nvoid fun(){}\n}\nint main()\n{\nusing namespace A;\nusing namespace B;\nfun()//ambiguous call here because this entity is present in both the namespaces \n\n}\n</code></pre>\n<p>In above code call to fun is ambiguous as look up will not able to find the correct fun to call .\nSecond example is below :</p>\n<pre><code>namespace N { namespace A {int i;} }\n\nstruct A {static int i;};\n\nusing namespace N;\n\nint i = A::i; \n</code></pre>\n<p>In later case ,call is ambiguous as entity 'A' is present in both the namespaces (N and global namespace) .\nHope this will help</p>\n", "OwnerUserId": "5170218", "PostTypeId": "2", "Id": "31707912", "Score": "-2", "CreationDate": "2015-07-29T18:03:21.167", "LastActivityDate": "2015-07-29T18:03:21.167"}, "31707753": {"ParentId": "31707358", "CommentCount": "5", "Body": "<p>But using declarations do declare names for entities.  From the C++11 standard, \u00a77.3.3[namespace.udecl]/1:</p>\n<blockquote>\n<p id=\"so_31707358_31707753_0\">A using-declaration introduces a name into the declarative region in which the using-declaration appears.</p>\n<blockquote>\n<p id=\"so_31707358_31707753_4\"><em>using-declaration</em>:<br/></p>\n<blockquote>\n<p id=\"so_31707358_31707753_6\"><code>using typename</code><sub><em>opt</em></sub> <em>nested-name-specifier unqualified-id</em> <code>;</code><br/>\n<code>using ::</code> <em>unqualified-id</em> <code>;</code><br/></p>\n</blockquote>\n</blockquote>\n<p id=\"so_31707358_31707753_3\"><strong>The member name specified in a using-declaration is declared in the declarative region in which the using-declaration appears.</strong></p>\n</blockquote>\n", "OwnerUserId": "5165306", "PostTypeId": "2", "Id": "31707753", "Score": "0", "CreationDate": "2015-07-29T17:55:48.180", "LastActivityDate": "2015-07-29T17:55:48.180"}});