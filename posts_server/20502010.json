post_cb({"bq_ids": {"n4140": {"so_20502010_20502010_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 467}}, "n3337": {"so_20502010_20502010_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 458}}, "n4659": {"so_20502010_20502010_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 490}}}, "20502010": {"ViewCount": "580", "Body": "<p>From PNaCl, I use libstdc++ to compile same code. But I want use shared_ptr and I obtain this error :</p>\n<pre><code>error: call to implicitly-deleted copy constructor of\n</code></pre>\n<p>This problem have issue :</p>\n<p><a href=\"https://stackoverflow.com/questions/7964360/using-stdshared-ptr-with-clang-and-libstdc\">Using std::shared_ptr with clang++ and libstdc++</a></p>\n<p>I understand, but I don't know how resolve this. I quote the solution :</p>\n<blockquote>\n<p id=\"so_20502010_20502010_0\">Adding a defaulted copy constructor and copy assignment operator to shared_ptr will fix the problem.</p>\n</blockquote>\n<p>I add this in shared_ptr.h:</p>\n<pre><code>shared_ptr(const shared_ptr&amp;) noexcept = default;\n</code></pre>\n<p>But compiler returns now this error :</p>\n<pre><code>F:/nacl_sdk/pepper_31/toolchain/win_pnacl/usr/include/c++/4.6.2/bits/shared_ptr.\nh:268:19: error:\n  exception specification of explicitly defaulted copy assignment operator\n  does not match the calculated one\n  shared_ptr&amp; operator=(const shared_ptr&amp;) noexcept = default;\n              ^\n</code></pre>\n<p>In this chain of error, I finish here.</p>\n<p>Somebody have tips, please?</p>\n", "AcceptedAnswerId": "20502699", "Title": "Clang 4.6.2, use shared_ptr", "CreationDate": "2013-12-10T18:06:16.913", "Id": "20502010", "CommentCount": "0", "LastEditDate": "2017-05-23T10:32:17.393", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-10T18:42:07.983", "Score": "1", "OwnerUserId": "2703673", "Tags": "<c++><clang><shared-ptr><google-nativeclient>", "AnswerCount": "1"}, "20502699": {"Id": "20502699", "PostTypeId": "2", "Body": "<p>I was able to repro your bug with this simple test case:</p>\n<pre><code>#include &lt;memory&gt;\n\nint main() {\n  std::shared_ptr&lt;int&gt; foo;\n  std::shared_ptr&lt;int&gt; bar(foo);\n  std::shared_ptr&lt;int&gt; baz;\n  baz = foo;\n  return 0;\n}\n</code></pre>\n<p>Building with <code>pnacl-clang++ -std=c++11 -stdlib=libstdc++ test.cc</code></p>\n<p>The easiest way to fix it it is to use libc++ instead of libstdc++:</p>\n<p><code>pnacl-clang++ -std=c++11 -stdlib=libc++ test.cc</code></p>\n<p>This is \"experimental\" in pepper_31, but will be the default in pepper_33 and higher (which is currently pepper_canary). See <a href=\"https://groups.google.com/forum/#!topic/native-client-discuss/0spfg6O04FM\" rel=\"nofollow\">https://groups.google.com/forum/#!topic/native-client-discuss/0spfg6O04FM</a> for more info about this switch.</p>\n<p>I was also able to hack two headers to make it work with libstdc++:</p>\n<p>In bits/shared_ptr.h:</p>\n<pre><code>template&lt;typename _Tp&gt;\nclass shared_ptr : public __shared_ptr&lt;_Tp&gt;\n{\npublic:\n  shared_ptr(const shared_ptr&amp;) = default;\n  shared_ptr&amp; operator =(const shared_ptr&amp;) = default;\n  ...\n</code></pre>\n<p>In bits/shared_ptr_base.h:</p>\n<pre><code>template&lt;typename _Tp, _Lock_policy _Lp&gt;\nclass __shared_ptr\n{\npublic:\n  __shared_ptr(const __shared_ptr&amp;) = default;\n  __shared_ptr&amp; operator =(const __shared_ptr&amp;) = default;\n  ...\n</code></pre>\n<p>IMO, using libc++ is a better solution here. :)</p>\n", "LastActivityDate": "2013-12-10T18:42:07.983", "CommentCount": "3", "CreationDate": "2013-12-10T18:42:07.983", "ParentId": "20502010", "Score": "1", "OwnerUserId": "2453058"}});