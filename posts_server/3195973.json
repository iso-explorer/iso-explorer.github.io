post_cb({"bq_ids": {"n4140": {"so_3195973_3196065_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 1443}, "so_3195973_3196071_0": {"length": 32, "quality": 0.8648648648648649, "section_id": 1443}}, "n3337": {"so_3195973_3196065_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 1437}, "so_3195973_3196071_0": {"length": 32, "quality": 0.8648648648648649, "section_id": 1437}}, "n4659": {"so_3195973_3196065_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 1581}, "so_3195973_3196071_0": {"length": 32, "quality": 0.8648648648648649, "section_id": 1581}}}, "3195973": {"ViewCount": "1013", "Body": "<p>What's the return of the algorithm std:set_union when one or both input containers are multisets with duplicated objects? Do dups get lost?</p>\n<p>Let's suppose for example:</p>\n<pre><code>multiset&lt;int&gt; ms1;\nms1.insert(1);\nms1.insert(1);\nms1.insert(1);\nms1.insert(2);\nms1.insert(3);\n\nmultiset&lt;int&gt; ms2;\nms2.insert(1);\nms2.insert(1);\nms2.insert(2);\nms2.insert(2);\nms2.insert(4);\n\nvector&lt;int&gt; v(10);\nset_union( ms1.begin(), ms1.end(), ms2.begin(), ms2.end(), v.begin() );\n</code></pre>\n<p>What would the output be?</p>\n", "AcceptedAnswerId": "3196065", "Title": "set_union with multiset containers?", "CreationDate": "2010-07-07T14:56:31.833", "Id": "3195973", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-07-07T15:45:32.450", "Score": "5", "OwnerUserId": "311151", "Tags": "<c++><stl><containers><stl-algorithm>", "AnswerCount": "3"}, "3196071": {"Id": "3196071", "PostTypeId": "2", "Body": "<p>From the C++ standard, \u00a725.3.5/1: </p>\n<blockquote>\n<p id=\"so_3195973_3196071_0\">This section defines all the basic set operations on sorted structures. They also work with multisets (23.3.4) containing multiple copies of equivalent elements. The semantics of the  set operations are generalized to multisets in a standard way by defining union() to contain the maximum number of occurrences of every element, intersection() to contain the minimum, and so on.</p>\n</blockquote>\n", "LastActivityDate": "2010-07-07T15:07:25.037", "Score": "2", "CreationDate": "2010-07-07T15:07:25.037", "ParentId": "3195973", "CommentCount": "0", "OwnerUserId": "179910"}, "3196032": {"Id": "3196032", "PostTypeId": "2", "Body": "<p>From the <a href=\"http://www.sgi.com/tech/stl/set_union.html\" rel=\"nofollow noreferrer\">documentation of std::set_union</a> (emphasis added).</p>\n<blockquote>\n<p id=\"so_3195973_3196032_0\">In the simplest case, set_union performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in [first1, last1), [first2, last2), or both. <em>The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears m times in [first1, last1) and n times in [first2, last2) (where m or n may be zero), then it appears max(m,n) times in the output range.</em> [1] Set_union is stable, meaning both that the relative order of elements within each input range is preserved, and that if an element is present in both input ranges it is copied from the first range rather than the second.</p>\n</blockquote>\n<p>It will appear <code>max(m,n)</code> times where <code>m</code> is the number of times it occurs in <code>ms1</code> and <code>n</code> is the number of times it occurs in <code>ms2</code>.</p>\n", "LastActivityDate": "2010-07-07T15:04:10.257", "Score": "2", "CreationDate": "2010-07-07T15:04:10.257", "ParentId": "3195973", "CommentCount": "0", "OwnerUserId": "303180"}, "3196065": {"Id": "3196065", "PostTypeId": "2", "Body": "<p>From the standard, 25.3.5:</p>\n<blockquote>\n<p id=\"so_3195973_3196065_0\">The semantics of the set operations are generalised to multisets in a standard way by defining <code>union()</code> to contain the maximum number of occurrences of every element, <code>intersection()</code> to contain the minimum, and so on.</p>\n</blockquote>\n<p>So in your example, the result will be (1,1,1,2,2,3,4,0,0,0), since you initialised the vector with length 10.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2010-07-07T15:45:32.450", "Score": "4", "CreationDate": "2010-07-07T15:06:59.993", "ParentId": "3195973", "CommentCount": "0", "LastEditDate": "2010-07-07T15:45:32.450", "OwnerUserId": "204847"}});