post_cb({"5987276": {"ParentId": "5987213", "CommentCount": "1", "Body": "<p>From paragraph 3 of the same section:</p>\n<blockquote>\n<p id=\"so_5987213_5987276_0\">The potential scope of a template\n  parameter name begins at its point of\n  declaration (3.3.2) and ends at the\n  end of its declarative region. [\n  <em>Note</em>: This implies that a <em>template-parameter</em> can be used in the declaration of subsequent\n  <em>template-parameters</em> and their default arguments but cannot be used\n  in preceding <em>template-parameters</em> or\n  their default arguments. For example,</p>\n<pre><code>template&lt;class T, T* p, class U = T&gt; class X { /* ... */ };\ntemplate&lt;class T&gt; void f(T* p = new T);\n</code></pre>\n<p id=\"so_5987213_5987276_1\">This also implies that a\n  <em>template-parameter</em> can be used in the specification of base classes. For\n  example,</p>\n<pre><code>template&lt;class T&gt; class X : public Array&lt;T&gt; { /* ... */ };\ntemplate&lt;class T&gt; class Y : public T { /* ... */ };\n</code></pre>\n<p id=\"so_5987213_5987276_2\">The use of a template parameter as a\n  base class implies that a class used\n  as a template argument must be defined\n  and not just declared when the class\n  template is instantiated. \u2014<em>end note</em>\n  ]</p>\n</blockquote>\n", "OwnerUserId": "310574", "PostTypeId": "2", "Id": "5987276", "Score": "2", "CreationDate": "2011-05-13T04:36:33.170", "LastActivityDate": "2011-05-13T04:36:33.170"}, "5988726": {"ParentId": "5987213", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_5987213_5988726_0\">3.3.1 : The <em>scope</em> of a declaration is the\n  same as its <em>potential scope</em> unless\n  the <em>potential scope</em> contains another\n  declaration of the same name. In that\n  case, the <em>potential scope</em> of the\n  declaration in the inner (contained)\n  declarative region is excluded from\n  the <em>scope</em> of the declaration in the\n  outer (containing) declarative region.</p>\n</blockquote>\n<p>Normally, this refers to cases like this:</p>\n<pre><code>void Foo(int i) {\n  {\n    int i = 5;\n    std::cout &lt;&lt; i;\n  }\n  std::cout &lt;&lt; i;\n};\n</code></pre>\n<p>The potential scope of the second <code>i</code> is excluded from the scope of the first <code>i</code>. In other words, this describes precisely where name hiding applies. The bit you quote says that template names can be hidden, too.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "5988726", "Score": "2", "CreationDate": "2011-05-13T07:35:41.757", "LastActivityDate": "2011-05-13T07:35:41.757"}, "bq_ids": {"n4140": {"so_5987213_5987276_0": {"section_id": 7075, "quality": 0.8611111111111112, "length": 31}, "so_5987213_5987213_0": {"section_id": 7077, "quality": 0.96, "length": 24}, "so_5987213_5988726_0": {"section_id": 7044, "quality": 0.9333333333333333, "length": 28}, "so_5987213_5987276_1": {"section_id": 7075, "quality": 0.8, "length": 8}, "so_5987213_5987276_2": {"section_id": 7075, "quality": 0.85, "length": 17}}, "n3337": {"so_5987213_5987276_0": {"section_id": 6819, "quality": 0.8611111111111112, "length": 31}, "so_5987213_5987213_0": {"section_id": 6821, "quality": 0.96, "length": 24}, "so_5987213_5988726_0": {"section_id": 6789, "quality": 0.9333333333333333, "length": 28}, "so_5987213_5987276_1": {"section_id": 6819, "quality": 0.8, "length": 8}, "so_5987213_5987276_2": {"section_id": 6819, "quality": 0.85, "length": 17}}, "n4659": {"so_5987213_5987276_0": {"section_id": 8576, "quality": 0.8611111111111112, "length": 31}, "so_5987213_5987213_0": {"section_id": 8578, "quality": 0.96, "length": 24}, "so_5987213_5987276_2": {"section_id": 8576, "quality": 0.85, "length": 17}, "so_5987213_5988726_0": {"section_id": 8541, "quality": 0.9333333333333333, "length": 28}, "so_5987213_5987276_1": {"section_id": 8576, "quality": 0.8, "length": 8}}}, "5987213": {"CommentCount": "3", "AcceptedAnswerId": "5988726", "PostTypeId": "1", "LastEditorUserId": "310574", "CreationDate": "2011-05-13T04:26:06.113", "LastActivityDate": "2011-05-13T07:35:41.757", "LastEditDate": "2011-05-13T04:33:28.790", "ViewCount": "367", "FavoriteCount": "2", "Title": "What is the potential scope of a template parameter?", "Id": "5987213", "Score": "1", "Body": "<p>A point from ISO draft n3290 section 3.3.9 paragraph 5:</p>\n<blockquote>\n<p id=\"so_5987213_5987213_0\">Because the name of a template parameter cannot be redeclared within its potential\n      scope (14.6.1), a template parameter\u2019s scope is often its potential scope. However,\n      it is still possible for a template parameter name to be hidden;</p>\n</blockquote>\n<p>What does \"potential scope\" mean in this context? Can anybody provide an example of such?</p>\n<p>draft link n3290: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3290.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3290.pdf</a></p>\n", "Tags": "<c++><templates><scope><c++11>", "OwnerUserId": "751747", "AnswerCount": "2"}});