post_cb({"45932408": {"ParentId": "45930605", "CommentCount": "2", "CreationDate": "2017-08-29T06:43:23.553", "OwnerUserId": "7162924", "PostTypeId": "2", "Id": "45932408", "Score": "0", "Body": "<p>maximum number depend on stack size. ex, if stack size = 1Mb --&gt; size of int a[xx][xx][xx][xx][xx] must &lt; 1Mb</p>\n", "LastActivityDate": "2017-08-29T06:43:23.553"}, "45930658": {"ParentId": "45930605", "LastEditDate": "2017-08-29T05:37:16.020", "CommentCount": "0", "CreationDate": "2017-08-29T04:24:40.137", "Score": "1", "LastEditorUserId": "3796113", "PostTypeId": "2", "Id": "45930658", "OwnerUserId": "3796113", "Body": "<p>It is not hard to understand that it is only limited by the amount of memory your machine has. You can take 100 (n)dimensional array also.<sup>1</sup></p>\n<p>Note: your code is accessing a memory out of the bound which is undefined behavior.</p>\n<p><sub>1.standard specifies a minimum limit of 12 in case of C and 256 in case of c++11.(This information is added after discussion with Jonathan leffler.My earlier answer only points out the maximum limits which is constrained my machine memory. </sub></p>\n", "LastActivityDate": "2017-08-29T05:37:16.020"}, "45930605": {"CommentCount": "3", "ViewCount": "181", "PostTypeId": "1", "LastEditorUserId": "2684539", "CreationDate": "2017-08-29T04:17:28.887", "LastActivityDate": "2017-08-29T07:50:12.333", "Title": "What is the maximum number of dimensions allowed for an array, and why?", "FavoriteCount": "1", "LastEditDate": "2017-08-29T07:50:12.333", "Id": "45930605", "Score": "5", "Body": "<p>What is the maximum number of dimensions that you can use when declaring an array?</p>\n<p>For Example.</p>\n<pre><code>#include &lt;iostream.h&gt;\n#include &lt;conio.h&gt;\n{\n       int a[3][3][3][4][3];\n       a[2][2][2][2][2] = 9;\n}\n</code></pre>\n<hr>\n<p>So, how many dimensions can we declare on an array.\nWhat is limitation of it?\nAnd what is reason behind it?</p>\n</hr>", "Tags": "<c++><c>", "OwnerUserId": "8375997", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_45930605_45930788_2": {"section_id": 47, "quality": 0.5833333333333334, "length": 7}, "so_45930605_45930788_6": {"section_id": 47, "quality": 0.9166666666666666, "length": 22}, "so_45930605_45930788_5": {"section_id": 46, "quality": 0.975609756097561, "length": 40}, "so_45930605_45930788_8": {"section_id": 47, "quality": 1.0, "length": 12}}, "n4659": {"so_45930605_45930788_8": {"section_id": 48, "quality": 1.0, "length": 12}, "so_45930605_45930788_2": {"section_id": 48, "quality": 0.5833333333333334, "length": 7}, "so_45930605_45930788_5": {"section_id": 47, "quality": 0.975609756097561, "length": 40}, "so_45930605_45930788_6": {"section_id": 48, "quality": 0.9166666666666666, "length": 22}}}, "45930788": {"ParentId": "45930605", "LastEditDate": "2017-08-29T05:48:08.877", "CommentCount": "14", "CreationDate": "2017-08-29T04:40:41.230", "Score": "11", "LastEditorUserId": "15168", "PostTypeId": "2", "Id": "45930788", "OwnerUserId": "15168", "Body": "<h2>ISO/IEC 9899:2011 \u2014 C</h2>\n<p>In C, the C11 standard requires:</p>\n<blockquote>\n<h3>5.2.4.1 Translation limits</h3>\n<p id=\"so_45930605_45930788_0\">The implementation shall be able to translate and execute at least one program that\n  contains at least one instance of every one of the following limits:<sup>18)</sup></p>\n<ul>\n<li><p id=\"so_45930605_45930788_1\">\u2026</p></li>\n<li><p id=\"so_45930605_45930788_2\">12 pointer, array, and function declarators (in any combinations) modifying an\n  arithmetic, structure, union, or <code>void</code> type in a declaration.</p></li>\n<li><p id=\"so_45930605_45930788_3\">\u2026</p></li>\n</ul>\n<p id=\"so_45930605_45930788_4\"><sup>18)</sup> Implementations should avoid imposing fixed translation limits whenever possible.</p>\n</blockquote>\n<p>That means that to be a standard-compliant compiler, it must allow at least 12 array dimensions on a simple type like <code>int</code>, but should avoid imposing any limit if at all possible.  The C90 and C99 standards also required the same limit.</p>\n<h2>ISO/IEC 14882:2011 \u2014 C++</h2>\n<p>For C++11, the equivalent information is:</p>\n<blockquote>\n<h3>Annex B (informative) Implementation quantities [implimits]</h3>\n<p id=\"so_45930605_45930788_5\">Because computers are finite, C++ implementations are inevitably limited in the size of the programs they\n  can successfully process. Every implementation shall document those limitations where known. This documentation\n  may cite fixed limits where they exist, say how to compute variable limits as a function of available\n  resources, or say that fixed limits do not exist or are unknown.</p>\n<p id=\"so_45930605_45930788_6\">2 The limits may constrain quantities that include those described below or others. The bracketed number\n  following each quantity is recommended as the minimum for that quantity. However, these quantities are\n  only guidelines and do not determine compliance.</p>\n<ul>\n<li><p id=\"so_45930605_45930788_7\">\u2026</p></li>\n<li><p id=\"so_45930605_45930788_8\">Pointer, array, and function declarators (in any combination) modifying a class, arithmetic, or incomplete\n  type in a declaration [256].</p></li>\n<li><p id=\"so_45930605_45930788_9\">\u2026</p></li>\n</ul>\n</blockquote>\n<p>Thus, in C++, the recommendation is that you should be able to use at least 256 dimensions in an array declaration.</p>\n<hr>\n<p>Note that even after you've got the compiler to accept your code, there will ultimately be limits imposed by the memory on the machine where the code is run.  The standards specify the minimum number of dimensions that the compiler must allow (over-specify in the C++ standard; the mind boggles at the thought of a 256-dimensional array).  The intention is that you shouldn't run into a problem \u2014 use as many dimensions as you need.  (Can you imagine working with the source code for a 64-dimensional array, let alone anything more \u2014 the individual expressions in the source would be horrid to behold, let alone write, read, modify.)</p>\n</hr>", "LastActivityDate": "2017-08-29T05:48:08.877"}});