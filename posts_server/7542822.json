post_cb({"bq_ids": {"n4140": {"so_7542822_27759993_1": {"length": 72, "quality": 0.8888888888888888, "section_id": 6364}}, "n3337": {"so_7542822_27759993_1": {"length": 72, "quality": 0.8888888888888888, "section_id": 6121}}, "n4659": {"so_7542822_27759993_1": {"length": 72, "quality": 0.8888888888888888, "section_id": 7875}}}, "7542822": {"ViewCount": "703", "Body": "<p>C++0x has two predefined <code>error_category</code> objects: <code>generic_category()</code> and <code>system_category()</code>. From what I have understood so far, <code>system_category()</code> should be used for errors returned by the operating system, and <code>generic_category()</code> should be used for the generic values found in <code>std::errc</code>, which correspond to <code>errno</code> values.</p>\n<p>However, what should be done on Unix-like systems, where <code>errno</code> values <em>are</em> the errors returned by the operating system? Should I use <code>system_category()</code> (which would be wrong on non-Unix-like systems, needing an <code>#ifdef</code>), or should I use <code>generic_category()</code> (which would be wrong on Unix-like systems for non-standard <code>errno</code> values)?</p>\n", "Title": "Should I use system_category or generic_category for errno on Unix?", "CreationDate": "2011-09-25T00:24:39.110", "LastActivityDate": "2015-01-03T22:01:05.810", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "Id": "7542822", "Score": "5", "OwnerUserId": "28258", "Tags": "<unix><error-handling><c++11><errno><system-error>", "AnswerCount": "2"}, "27759993": {"Id": "27759993", "PostTypeId": "2", "Body": "<p>You are meant to report errors from OS (any one, including POSIX-based OSes such as Unix) using <code>system_category()</code> as C++ standard library functions do - see the quote from C++11 standard below:</p>\n<blockquote>\n<p id=\"so_7542822_27759993_0\">17.6.5.14 Value of error codes [value.error.codes]</p>\n<p id=\"so_7542822_27759993_1\">1 Certain functions in the C++ standard library report errors via a std::error_code (19.5.2.1) object. <strong>That\n  object\u2019s category() member shall return std::system_category() for errors originating from the operating\n  system</strong>, or a reference to an implementation-defined error_category object for errors originating\n  elsewhere. The implementation shall define the possible values of value() for each of these error categories.\n  [ Example: For operating systems that are based on POSIX, implementations are encouraged to define the\n  std::system_category() values as identical to the POSIX errno values, with additional values as defined\n  by the operating system\u2019s documentation. Implementations for operating systems that are not based\n  on POSIX are encouraged to define values identical to the operating system\u2019s values. For errors that do\n  not originate from the operating system, the implementation may provide enums for the associated values.\n  \u2014end example ]</p>\n</blockquote>\n", "LastActivityDate": "2015-01-03T22:01:05.810", "CommentCount": "1", "CreationDate": "2015-01-03T22:01:05.810", "ParentId": "7542822", "Score": "1", "OwnerUserId": "1997715"}, "7542904": {"Id": "7542904", "PostTypeId": "2", "Body": "<p>You should not use <code>system_category</code> unless you are in fact the operating system (or reporting an error from an OS-specific function). The category describes where the error originates from, not necessarily what the error code means. So it is perfectly legitimate to have the set of possible error codes from <code>system_category</code> be the same as <code>generic_category</code>.</p>\n", "LastActivityDate": "2011-09-25T00:48:17.467", "CommentCount": "3", "CreationDate": "2011-09-25T00:48:17.467", "ParentId": "7542822", "Score": "1", "OwnerUserId": "734069"}});