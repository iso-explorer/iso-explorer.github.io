post_cb({"5123393": {"Id": "5123393", "PostTypeId": "2", "Body": "<p>Though I'm not 100% sure this is strictly standard conforming,\nthe following code can be compiled by ideone(gcc-4.3.4) and Comeau online:</p>\n<pre><code>template&lt; class &gt;\nclass Foo {\n  int m;\n public:\n  template&lt; class U &gt; int f( Foo&lt;U&gt; const&amp; p ) const { return p.m; }\n  template&lt; class U &gt; template&lt; class V &gt;\n  friend int Foo&lt;U&gt;::f( Foo&lt;V&gt; const&amp; ) const;\n};\n\nvoid bar() {\n  Foo&lt;int&gt; fi;\n  Foo&lt;double&gt; fd;\n  fd.f( fi );\n}\n</code></pre>\n<p>Hope this helps.</p>\n", "LastActivityDate": "2011-02-25T22:27:17.077", "Score": "0", "CreationDate": "2011-02-25T22:27:17.077", "ParentId": "5118371", "CommentCount": "4", "OwnerUserId": "547710"}, "bq_ids": {"n4140": {"so_5118371_5118371_0": {"length": 8, "quality": 1.0, "section_id": 130}}, "n3337": {"so_5118371_5118371_0": {"length": 8, "quality": 1.0, "section_id": 124}}, "n4659": {"so_5118371_5118371_0": {"length": 8, "quality": 1.0, "section_id": 134}}}, "5118523": {"Id": "5118523", "PostTypeId": "2", "Body": "<p>I think you have to say <code>template &lt;&gt;</code> before the friend declaration so it knows you're friending a specialization.</p>\n<p>EDIT: I can't get any error with your code, even making an instantiation and calling <code>g</code>. Can you post a minimal set of actual code that's causing the error, along with the error message?</p>\n", "LastActivityDate": "2011-02-25T14:42:35.873", "Score": "0", "CreationDate": "2011-02-25T14:42:35.873", "ParentId": "5118371", "CommentCount": "2", "OwnerUserId": "251738"}, "5118371": {"ViewCount": "1440", "Body": "<pre><code>template &lt;typename T&gt; class Foo;    \ntemplate &lt;typename T&gt; int g(Foo&lt;T&gt; const&amp;);\n\ntemplate &lt;typename T&gt; class Foo\n{\npublic:\n    template &lt;typename U&gt; int f(Foo&lt;U&gt; const&amp; p) const { return p.m; }\n\n    // which friend declaration will allow the above function to compile? The\n    // next one doesn't work.\n    template &lt;typename U&gt; friend void Foo&lt;U&gt;::template f&lt;T&gt;(Foo&lt;T&gt; const&amp;) const;\n\n    // while this one work for g().\n    friend int g&lt;T&gt;(Foo&lt;T&gt; const&amp;);\n\nprivate:\n    int m;\n};\n\ntemplate &lt;typename T&gt; int g(Foo&lt;T&gt; const&amp; p) { return p.m; }\n\n// Let's call them\nvoid bar()\n{\n    Foo&lt;int&gt; fi;\n    Foo&lt;double&gt; fd;\n    fd.f(fi);\n    g(fi);\n}\n</code></pre>\n<p>The above doesn't compile with g++ nor Como.  g() is here to show what I would like to do with f().</p>\n<p>For instance, here are g++ messages:</p>\n<pre><code>foo.cpp:11: error: invalid use of template-id \u2018f&lt;T&gt;\u2019 in declaration of primary template\nfoo.cpp: In member function \u2018int Foo&lt;T&gt;::f(const Foo&lt;U&gt;&amp;) const [with U = int, T = double]\u2019:\nfoo.cpp:27:   instantiated from here\nfoo.cpp:17: error: \u2018int Foo&lt;int&gt;::m\u2019 is private\nfoo.cpp:7: error: within this context\n</code></pre>\n<p>and como's one:</p>\n<pre><code>\"ComeauTest.c\", line 11: error: an explicit template argument list is not allowed on\n          this declaration\n      template &lt;typename U&gt; friend void Foo&lt;U&gt;::template f&lt;T&gt;(Foo&lt;T&gt; const&amp;) const;\n                                        ^\n\n\"ComeauTest.c\", line 7: error: member \"Foo&lt;T&gt;::m [with T=int]\" (declared at line 17)\n          is inaccessible\n      template &lt;typename U&gt; int f(Foo&lt;U&gt; const&amp; p) const { return p.m; }\n                                                                    ^\n          detected during instantiation of \"int Foo&lt;T&gt;::f(const Foo&lt;U&gt; &amp;)\n                    const [with T=double, U=int]\" at line 27\n\n2 errors detected in the compilation of \"ComeauTest.c\".\n</code></pre>\n<p>Variants suggested by the error messages didn't either.</p>\n<p>BTW, I know of the obvious work around</p>\n<pre><code>template &lt;typename U&gt; friend class Foo&lt;U&gt;;\n</code></pre>\n<p>Edit:</p>\n<p>14.5.4/5 (of n3225, 14.5.3/6 of C++98 is similar but the following text is clearer in n3225) starts by</p>\n<blockquote>\n<p id=\"so_5118371_5118371_0\">A member of a class template may be declared friend of a non-template class...</p>\n</blockquote>\n<p>which could imply that a member of a class template may not be declared friend of a template class but my first interpretation would that this sentence was an introduction for the following explanations (mainly they apply to any specialisation, explicit or not, given that the prototype is correct).</p>\n", "Title": "make another instatiation's friend of a template class", "CreationDate": "2011-02-25T14:25:55.400", "LastActivityDate": "2011-02-26T16:39:54.480", "CommentCount": "2", "LastEditDate": "2011-02-26T16:39:54.480", "PostTypeId": "1", "LastEditorUserId": "136208", "Id": "5118371", "Score": "2", "OwnerUserId": "136208", "Tags": "<c++><templates><friend>", "AnswerCount": "2"}});