post_cb({"12764649": {"Id": "12764649", "PostTypeId": "2", "Body": "<p>The standard guarantees arithmetic on unsigned integer types to be arithmetic modulo <code>2^N</code> where <code>N</code> is the number of value bits in the type, so the arithmetic will be correct.</p>\n<p>Section 3.9.1 (4) of the n3376 draft of the C++11 standard:</p>\n<blockquote>\n<p id=\"so_12764629_12764649_0\">Unsigned integers, declared unsigned, shall obey the laws of arithmetic modulo 2<sup>n</sup> where <code>n</code> is the number of bits in the value representation of that particular size of integer.<sup>46)</sup></p>\n<p id=\"so_12764629_12764649_1\"><sup>46)</sup>This implies that unsigned arithmetic does not overflow because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting unsigned integer type.</p>\n</blockquote>\n", "LastEditorUserId": "1011995", "LastActivityDate": "2012-10-06T23:10:21.070", "Score": "4", "CreationDate": "2012-10-06T23:05:18.140", "ParentId": "12764629", "CommentCount": "4", "OwnerUserId": "1011995", "LastEditDate": "2012-10-06T23:10:21.070"}, "bq_ids": {"n4140": {"so_12764629_12764649_0": {"length": 13, "quality": 0.8125, "section_id": 7213}, "so_12764629_12764649_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 7213}}, "n3337": {"so_12764629_12764649_0": {"length": 15, "quality": 0.9375, "section_id": 6957}, "so_12764629_12764649_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 6957}}, "n4659": {"so_12764629_12764649_0": {"length": 13, "quality": 0.8125, "section_id": 8722}, "so_12764629_12764649_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 8722}}}, "12764629": {"ViewCount": "1053", "Body": "<p>Im currently implementing a RC4 decryption and as this algorithm only operates on numbers between 0-255, I want to write as safe code as possible and properly use <code>unsigned char</code> variables instead of plain <code>int</code> ones.</p>\n<p>Well, this although confronted me with a situation i cannot fortell what will happen.</p>\n<p>Given are 3 vars <code>i</code>, <code>j</code>, <code>k</code>:</p>\n<pre><code>unsigned char i = 150;\nunsigned char j = 155;\nunsigned char k = 0;\n</code></pre>\n<p>Will the expression <code>k = (i + j) % 256</code> properly set <code>k</code> to <code>49</code> or to <code>255</code> as <code>i+j</code> gets truncated?</p>\n<p>Edit: fixed a \"j\" being spelled as \"k\"</p>\n", "AcceptedAnswerId": "12764649", "Title": "Arithmetic with unsigned char", "CreationDate": "2012-10-06T23:01:36.243", "Id": "12764629", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-07T08:27:31.570", "LastEditorUserId": "878307", "LastActivityDate": "2012-10-07T08:27:31.570", "Score": "1", "OwnerUserId": "878307", "Tags": "<c++><math><types>", "AnswerCount": "1"}});