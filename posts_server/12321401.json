post_cb({"12322093": {"PostTypeId": "2", "Body": "<p>The definitive answer is that all compilers do static initialization\nbefore <code>main</code>, <em>unless</em> the objects are in a DLL which is loaded later.\nIn practice, it's (almost) impossible to meet the requirements in the\ntext you cite otherwise.  (Think of what happens if there is a cycle.) </p>\n", "LastActivityDate": "2012-09-07T16:33:52.233", "Id": "12322093", "CommentCount": "0", "CreationDate": "2012-09-07T16:33:52.233", "ParentId": "12321401", "Score": "5", "OwnerUserId": "649665"}, "bq_ids": {"n4140": {"so_12321401_12321401_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 7153}}, "n3337": {"so_12321401_12321401_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 6897}}}, "12321401": {"ViewCount": "571", "Body": "<p>C++03 Standard <em>[basic.start.init] point 3</em> states:</p>\n<blockquote>\n<p id=\"so_12321401_12321401_0\">It is implementation-defined whether or not the dynamic\n  initialization (8.5, 9.4, 12.1, 12.6.1) of an object of namespace\n  scope is done before the first statement of main. If the\n  initialization is deferred to some point in time after the first\n  statement of main, it shall occur before the first use of any\n  function or object defined in the same translation unit as the\n  object to be initialized.</p>\n</blockquote>\n<p>Microsoft Compilers, according to <a href=\"http://msdn.microsoft.com/en-US/library/0e519f64%28v=vs.80%29\" rel=\"nofollow noreferrer\">Additional Startup Considerations</a>, perform the initialization prior to <code>main()</code>.</p>\n<p>I have been unable to obtain documentation stating the behaviour for GNU and Sun Forte compilers.</p>\n<p>Can anyone:</p>\n<ol>\n<li>Point me in the direction of documentation that describes the behaviour of the GNU and Forte compilers with respect to dynamic initialization (I have checked the GCC manual and found nothing relating to dynamic initialization).</li>\n<li>Comment on the thread-safety of deferred dynamic initialization (if two threads attempt to invoke a function from the same translation unit that contains a non-local object).</li>\n</ol>\n<hr>\n<p>FWIW, I observed the behaviour of GNU's g++ and SUN's CC and both performed the initalization prior to main though I don't accept this as a definitive answer. (<em>I can post the very simple code I used to observe if anyone is interested but I felt the question is long enough</em>)</p>\n</hr>", "AcceptedAnswerId": "12322093", "Title": "Dynamic Initialization", "CreationDate": "2012-09-07T15:45:56.413", "Id": "12321401", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-09-07T16:33:52.233", "Score": "4", "OwnerUserId": "1033896", "Tags": "<c++>", "AnswerCount": "1"}});