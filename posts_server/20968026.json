post_cb({"bq_ids": {"n4140": {"so_20968026_20968544_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 6185}, "so_20968026_20968544_0": {"length": 17, "quality": 1.0, "section_id": 6186}, "so_20968026_20968544_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6185}}, "n3337": {"so_20968026_20968544_2": {"length": 15, "quality": 0.625, "section_id": 5946}, "so_20968026_20968544_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5947}, "so_20968026_20968544_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6787}}, "n4659": {"so_20968026_20968544_2": {"length": 17, "quality": 0.7083333333333334, "section_id": 7687}, "so_20968026_20968544_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7688}, "so_20968026_20968544_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 7687}}}, "20968327": {"Id": "20968327", "PostTypeId": "2", "Body": "<p>The simple answer is that the standard says that <code>\"abcdef\"[0]</code> is not a constant expression.  Logically, the compiler could probably work it out, but the standard doesn't list it in the allowed operations.  Evaluation of the expression involves an lvalue to rvalue conversion, and only a very limited number of lvalue to rvalue conversions are allowed.  (Actually, it may be legal in C++11.  But if this is the case, it would be a new feature, and possibly not implemented by your compiler.)</p>\n", "LastActivityDate": "2014-01-07T09:42:54.860", "CommentCount": "3", "CreationDate": "2014-01-07T09:42:54.860", "ParentId": "20968026", "Score": "1", "OwnerUserId": "649665"}, "20968026": {"ViewCount": "170", "Body": "<p>Hi and happy new year to everyone,</p>\n<p>I have some troubles passing passing a \"const char\" parameter in templates even in the last versi\u00f3n Compiler Nov 2013 CTP of Visual C++! This is the simple code that doesn't work in the latest Visual C++ compiler but yes with \"g++\" with the option \"std=c++x0\",</p>\n<pre><code>#include &lt;stdlib.h&gt;\n\n\ntemplate&lt;char _parameterChar&gt;\nclass A\n{\n    char varChar;\npublic:\n    A(){ varChar = _parameterChar; }\n    ~A(){}\n};\n\n\nint main(int argc, char* argv[])\n{\n    const char a_1 = 'a';\n    const char a_2 = \"abcdef\"[0]; // This instruction gets a constant 'a'.\n\n\n    A&lt;'a'&gt; first_A; // compile ok!\n    A&lt;a_1&gt; second_A; // compile ok!\n    A&lt;a_2&gt; third_A; // ---&gt;  This not compiles!! Why not ?!?!?!\n\n    return 0;\n}\n</code></pre>\n<p>Visual C++ compiler gives that error,</p>\n<pre><code>error C2971: 'A' : template parameter '_parameterChar' : 'a_2' : a local variable cannot be used as a non-type argument\n</code></pre>\n<p>I think that is a restricci\u00f3n of compiler, because \"abcdef\"[0], you could get the const char 'a' at compile time, isn't it ?</p>\n", "Title": "Some trouble passing a \"const char\" parameter in templates even in Visual C++ Compiler Nov 2013 CTP", "CreationDate": "2014-01-07T09:29:33.940", "LastActivityDate": "2014-01-07T09:53:49.660", "CommentCount": "9", "PostTypeId": "1", "Id": "20968026", "Score": "2", "OwnerUserId": "2713470", "Tags": "<c++><templates><parameter-passing>", "AnswerCount": "2"}, "20968544": {"Id": "20968544", "PostTypeId": "2", "Body": "<p>James Kanze says the \"abcdef\"[0] is not a constant expression, but I think it is from standard.</p>\n<p>standard 5.19.3</p>\n<blockquote>\n<p id=\"so_20968026_20968544_0\">An integral constant expression is an expression of integral or\n  unscoped enumeration type, <strong>implicitly converted to a prvalue</strong>, where\n  the converted expression is a core constant expression.</p>\n</blockquote>\n<p>standard 5.19.2</p>\n<blockquote>\n<p id=\"so_20968026_20968544_1\">an lvalue-to-rvalue conversion (is not a core constant expression) unless it is applied to:</p>\n<p id=\"so_20968026_20968544_2\">a non-volatile glvalue of integral or enumeration type that refers to\n  a non-volatile const object with a preceding initialization,\n  initialized with a constant expression <strong>[ Note: a string literal\n  (2.14.5) corresponds to an array of such objects. \u2014end note ]</strong>,</p>\n</blockquote>\n", "LastActivityDate": "2014-01-07T09:53:49.660", "CommentCount": "4", "CreationDate": "2014-01-07T09:53:49.660", "ParentId": "20968026", "Score": "1", "OwnerUserId": "534498"}});