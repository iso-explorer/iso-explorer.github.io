post_cb({"bq_ids": {"n4140": {"so_12596158_12596333_2": {"length": 81, "quality": 0.7232142857142857, "section_id": 3325}, "so_12596158_12596333_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 3298}}, "n3337": {"so_12596158_12596333_2": {"length": 104, "quality": 0.9285714285714286, "section_id": 3195}, "so_12596158_12596333_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3168}}, "n4659": {"so_12596158_12596333_2": {"length": 70, "quality": 0.625, "section_id": 4091}, "so_12596158_12596333_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 4063}}}, "12596333": {"Id": "12596333", "PostTypeId": "2", "Body": "<p>Your class does not qualify as an Aggregate because it has <code>private</code> non-static data members.</p>\n<blockquote>\n<p id=\"so_12596158_12596333_0\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), <strong>no private or protected non-static data members (Clause 11)</strong>, no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p><strong>EDIT:</strong> </p>\n<blockquote>\n<p id=\"so_12596158_12596333_1\">For objects of non aggregate classes if only some of the data members are initialized, will the rest be value initialized(assigned with 0)?      </p>\n</blockquote>\n<p>The rules are specified in:    </p>\n<p><strong>C++11 8.5.4 List-initialization [dcl.init.list] Para 3:</strong> </p>\n<blockquote>\n<p id=\"so_12596158_12596333_2\">List-initialization of an object or reference of type T is defined as follows:<br>\n  \u2014 If the initializer list has no elements and T is a class type with a default      constructor, the object is value-initialized.<br>\n  \u2014 Otherwise, if T is an aggregate, aggregate initialization is performed (8.5.1).<br>\n  \u2014 Otherwise, if T is a specialization of std::initializer_list, an initializer_list object is constructed as described below and used to initialize the object according to the rules for initialization of an object from a class of the same type (8.5).<br>\n  \u2014 Otherwise, if T is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution (13.3, 13.3.1.7). If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed.<br>\n  \u2014 Otherwise, if T is a reference type, a prvalue temporary of the type referenced by T is list-initialized, and the reference is bound to that temporary. [ Note: As usual, the binding will fail and the program is ill-formed if the reference type is an lvalue reference to a non-const type. \u2014end note ]<br>\n  \u2014 Otherwise, if the initializer list has a single element, the object or reference is initialized from that element; if a narrowing conversion (see below) is required to convert the element to T, the program is ill-formed.<br>\n  \u2014 Otherwise, if the initializer list has no elements, the object is value-initialized.<br>\n  \u2014 Otherwise, the program is ill-formed.</br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>Your program falls in none of the scenarios mentioned and hence falls under the the ill formed case.</p>\n", "LastEditorUserId": "452307", "LastActivityDate": "2012-09-26T07:44:56.780", "Score": "3", "CreationDate": "2012-09-26T07:06:51.327", "ParentId": "12596158", "CommentCount": "3", "OwnerUserId": "452307", "LastEditDate": "2012-09-26T07:44:56.780"}, "12596320": {"Id": "12596320", "PostTypeId": "2", "Body": "<p>You have to declare constructor with 4 arguments like </p>\n<pre><code>A(int i = 10, float f = 10.0f, int c = 45, float d = 10.0f):\ni(i), f(f), c(c), d(d)\n{\n\n}\n</code></pre>\n<p>Now you can initialize your a variable with braces</p>\n", "LastActivityDate": "2012-09-26T07:06:09.877", "CommentCount": "1", "CreationDate": "2012-09-26T07:06:09.877", "ParentId": "12596158", "Score": "0", "OwnerUserId": "1223007"}, "12596158": {"ViewCount": "596", "Body": "<p>I am going through this question:<a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special/7189821#7189821\">Aggregates and pods</a>\nWhen an object of  class in C++ with user defined default constructor, has only some of it's data members initialized,will the rest of data members be value initialized?\nFollowing is the program I tried resulting in compilation error:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A {\npublic:\n    A() {\n        i=10;\n        f = 10.0f;\n        c = 45;\n        d = 10.0;\n    }\n\n    void show() {\n        cout &lt;&lt; i &lt;&lt; \"\\t\" &lt;&lt; f &lt;&lt; \"\\t\" &lt;&lt; c &lt;&lt; \"\\t\" &lt;&lt; d&lt;&lt;\"\\n\";\n    }\n\nprivate:\n    int i;\n    float f;\n    char c;\n    double d;\n};\n\nint main() {\n    A a={20,20.0f};\n    a.show();\n}\n</code></pre>\n", "AcceptedAnswerId": "12596333", "Title": "Value initialization for non aggregate class with user defined constructor", "CreationDate": "2012-09-26T06:55:59.410", "Id": "12596158", "CommentCount": "0", "LastEditDate": "2017-05-23T11:48:15.377", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-26T07:44:56.780", "Score": "1", "OwnerUserId": "1696337", "Tags": "<c++>", "AnswerCount": "2"}});