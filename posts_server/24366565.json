post_cb({"24366565": {"ViewCount": "144", "Body": "<p>i want to wrap the bind class template into an seperate namespace:</p>\n<pre><code>namespace my_space {\ntemplate&lt;typename... R&gt; using bind = std::bind&lt;R...&gt;;\n}\n</code></pre>\n<p>and get an error:</p>\n<pre><code>error: 'bind&lt;R ...&gt;' in namespace 'std' does not name a type.\n</code></pre>\n<p>how am i able to do so? a small example can be found <a href=\"http://coliru.stacked-crooked.com/a/97055364dca672f9\" rel=\"nofollow\">here</a>.</p>\n", "AcceptedAnswerId": "24367452", "Title": "How can't I wrap a function (std::bind) into a namespaces?", "CreationDate": "2014-06-23T12:58:01.103", "Id": "24366565", "CommentCount": "5", "LastEditDate": "2014-09-01T11:44:51.867", "PostTypeId": "1", "LastEditorUserId": "1810087", "LastActivityDate": "2014-09-01T11:44:51.867", "Score": "3", "OwnerUserId": "1810087", "Tags": "<c++><bind><wrapper>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24366565_24367452_2": {"length": 8, "quality": 1.0, "section_id": 5490}}, "n3337": {"so_24366565_24367452_2": {"length": 8, "quality": 1.0, "section_id": 5276}}, "n4659": {"so_24366565_24367452_2": {"length": 7, "quality": 0.875, "section_id": 6924}}}, "24367204": {"Id": "24367204", "PostTypeId": "2", "Body": "<p>If you're really keeping the template parameters as the original has them, then simply bring the name in:</p>\n<pre><code>namespace my_space {\n  using std::bind;\n}\n</code></pre>\n", "LastActivityDate": "2014-06-23T13:28:12.163", "Score": "2", "CreationDate": "2014-06-23T13:28:12.163", "ParentId": "24366565", "CommentCount": "0", "OwnerUserId": "1782465"}, "24366855": {"Id": "24366855", "PostTypeId": "2", "Body": "<p>I don't know if you can get that to work with using, but an alternative might be wrapping via perfect-forwarding. Any good compiler would optimize the wrapper away.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>namespace my_space {\n    template&lt;class... Args&gt;\n    auto bind(Args&amp;&amp;... args) -&gt; decltype( std::bind(std::forward&lt;Args&gt;(args)...) )\n    {\n        return std::bind(std::forward&lt;Args&gt;(args)...);\n    }\n}\n</code></pre>\n<p>In C++14 you can even drop the <code>-&gt; decltype( std::bind(std::forward&lt;Args&gt;(args)...) )</code> part.</p>\n<p>A working example can be found <a href=\"http://coliru.stacked-crooked.com/a/07e6dd47962319a2\" rel=\"nofollow\">here</a></p>\n", "LastActivityDate": "2014-06-23T13:12:02.883", "Score": "3", "CreationDate": "2014-06-23T13:12:02.883", "ParentId": "24366565", "CommentCount": "0", "OwnerUserId": "243870"}, "24367452": {"Id": "24367452", "PostTypeId": "2", "Body": "<h3>Why your code does not work</h3>\n<p>Your code doesn't compile because <code>std::bind</code> is a <em>function</em>, not a <em>type</em>. You can declare aliases using <code>using</code> only for types. </p>\n<p>While <code>g++</code> diagnostic is not exactly the best, Clang++ would have <a href=\"http://coliru.stacked-crooked.com/a/c643db52430a0f99\" rel=\"nofollow\">given you</a> the following error:</p>\n<blockquote>\n<p id=\"so_24366565_24367452_0\">error: expected a type</p>\n</blockquote>\n<p>which is much clearer*.</p>\n<h3>What you can do</h3>\n<p>Thankfully you can just import the <code>std::bind</code> name using:</p>\n<pre><code>namespace my_space {\n    using std::bind;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/4649b0d585f08185\" rel=\"nofollow\"><kbd>Live demo</kbd></a></p>\n<p>This is specifically defined in:</p>\n<blockquote>\n<p id=\"so_24366565_24367452_1\"><strong>\u00a77.3.3/1</strong> The <code>using</code> declaration [namespace.alias]</p>\n<p id=\"so_24366565_24367452_2\">A using-declaration introduces a name into the declarative region in which the using-declaration appears.</p>\n</blockquote>\n<p><sub>* Personal opinion.</sub></p>\n", "LastEditorUserId": "493122", "LastActivityDate": "2014-06-23T15:41:24.657", "Score": "7", "CreationDate": "2014-06-23T13:38:58.063", "ParentId": "24366565", "CommentCount": "4", "LastEditDate": "2014-06-23T15:41:24.657", "OwnerUserId": "493122"}});