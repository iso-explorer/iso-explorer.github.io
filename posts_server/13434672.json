post_cb({"13543214": {"Id": "13543214", "PostTypeId": "2", "Body": "<p>If you forbit implicit typecasting to boolean, the compiler has to check if there is an operator|| defined wich takes a boolean. This is (hopefully!) not defined because it would break shortcuts. So he has to check if there is an conversion-operator defined that gives it something defined for the global ||-operator. Could you solve this problem by adding a conversion-operator to bool, BOOL or int (wich is the same anyway^^)\u2026? </p>\n<p><code>operator bool() {return this != null &amp;&amp; this != 0xcccccccc;}</code></p>\n<p>This BTW would be just a hack, it would be better to provide a logical meaningful conversion.</p>\n<p>Im shure there is a constant defined for 0xcccccccc marking uninitialized Memory in debug mode, but i dont know it.</p>\n", "LastEditorUserId": "673496", "LastActivityDate": "2012-11-24T16:59:20.000", "Score": "0", "CreationDate": "2012-11-24T16:43:35.790", "ParentId": "13434672", "CommentCount": "1", "LastEditDate": "2012-11-24T16:59:20.000", "OwnerUserId": "673496"}, "13434672": {"ViewCount": "1327", "Body": "<p>Why do Visual Studio 2010 and Visual Studio 2012 fail to compile this code?</p>\n<p>Codepad.org, Xcode, gcc, LLVM, Clang all have no problem but Visual Studio poops the bed:</p>\n<pre><code>struct S {\n  template &lt;class T&gt; inline operator T () const { return T (); }\n};\nint main () {\n  // NOTE: \"S()\" denotes construction in these examples\n  struct F {\n    void operator() (bool) { }\n    static void toint (int) { }\n    static void tostr (char const*) { }\n  };\n  bool b1 = S (); // Okay\n  bool b2 (S ()); // Okay\n  F () (S ());    // Okay\n  F::toint (S ());// Okay\n  F::tostr (S ());// Okay\n\n  S () || false;  // Error: error C2676: binary '||' : 'vf::S' does\n                  // not define this operator or a conversion to a type\n                  // acceptable to the predefined operator\n  return 0;\n}\n</code></pre>\n<p>Adding the <code>explicit</code> keyword doesn't change a thing for gcc or clang. The error message produced is:</p>\n<pre><code>error C2676: binary '||' : 'S' does not define this operator or a\n  conversion to a type acceptable to the predefined operator\n</code></pre>\n", "Title": "Visual Studio fails to instantiate cast (conversion) operator template (T=bool) in the context of boolean operations", "CreationDate": "2012-11-17T20:53:00.387", "LastActivityDate": "2013-03-24T02:29:26.427", "CommentCount": "26", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-11-24T21:00:49.293", "LastEditorUserId": "150679", "Id": "13434672", "Score": "12", "OwnerUserId": "150679", "Tags": "<c++><visual-studio-2010><visual-c++><c++11><visual-studio-2012>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13434672_13543853_1": {"length": 6, "quality": 0.75, "section_id": 384}, "so_13434672_13543853_4": {"length": 10, "quality": 0.8333333333333334, "section_id": 2}, "so_13434672_13543853_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 6163}, "so_13434672_13543853_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 387}, "so_13434672_13543853_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 602}}, "n3337": {"so_13434672_13543853_1": {"length": 6, "quality": 0.75, "section_id": 375}, "so_13434672_13543853_4": {"length": 10, "quality": 0.8333333333333334, "section_id": 2}, "so_13434672_13543853_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5924}, "so_13434672_13543853_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 378}, "so_13434672_13543853_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 592}}, "n4659": {"so_13434672_13543853_1": {"length": 6, "quality": 0.75, "section_id": 401}, "so_13434672_13543853_4": {"length": 10, "quality": 0.8333333333333334, "section_id": 2}, "so_13434672_13543853_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 7660}, "so_13434672_13543853_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 404}, "so_13434672_13543853_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 628}}}, "13543853": {"Id": "13543853", "PostTypeId": "2", "Body": "<p>It's a bug, at least in C++03 (not sure about C++11).</p>\n<p>According to the overload resolution rules in C++03 \u00a713.3.1.2, the built-in <code>||</code> operator is selected, since no user-defined <code>||</code> operator is defined for <code>S</code>.</p>\n<p>\u00a75.15/1 says:</p>\n<blockquote>\n<p id=\"so_13434672_13543853_0\">The <code>||</code> operator groups left-to-right. The operands are both implicitly converted to <code>bool</code> (clause 4). [...]</p>\n</blockquote>\n<p>\u00a712.3/2 says:</p>\n<blockquote>\n<p id=\"so_13434672_13543853_1\">User-defined conversions are applied only where they are unambiguous (10.2, 12.3.2). [...]</p>\n</blockquote>\n<p>\u00a712.3/5:</p>\n<blockquote>\n<p id=\"so_13434672_13543853_2\">User-defined conversions are used implicitly only if they are unambiguous.  [...] Function overload resolution (13.3.3) selects the best conversion function to perform the conversion.</p>\n</blockquote>\n<p>\u00a713.3.2/3:</p>\n<blockquote>\n<p id=\"so_13434672_13543853_3\">Second, for <code>F</code> to be a viable function, there shall exist for each argument an implicit conversion sequence (13.3.3.1) that converts that argument to the corresponding parameter of <code>F</code>.</p>\n</blockquote>\n<p>Clearly <code>S</code> defines a user-defined conversion to <code>bool</code>.  The built-in <code>||</code> operator is a viable function for the overload resolution, and since it's the only one, it's the best.  So the expression is well-formed.</p>\n<p>Also of note is \u00a74/3, which says:</p>\n<blockquote>\n<p id=\"so_13434672_13543853_4\">An expression <code>e</code> can be implicitly converted to a type <code>T</code> if and only if the declaration \u201c<code>T t=e;</code>\u201d is well- formed, for some invented temporary variable <code>t</code> (8.5). [...]</p>\n</blockquote>\n<p>So I'm curious whether Visual Studio also produces an error for the statement <code>bool b = S();</code>.</p>\n", "LastActivityDate": "2012-11-24T17:48:06.227", "CommentCount": "0", "CreationDate": "2012-11-24T17:48:06.227", "ParentId": "13434672", "Score": "3", "OwnerUserId": "9530"}});