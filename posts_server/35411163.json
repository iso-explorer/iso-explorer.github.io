post_cb({"35411163": {"ViewCount": "265", "Body": "<p>Consider the code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo\n{\n    Foo(int){}\n    operator bool() const\n    {\n        return true;\n    }\n};\n\nint main()\n{\n    if(Foo foo{42})\n    {\n        std::cout &lt;&lt; \"ok\\n\";\n    }\n}\n</code></pre>\n<p>It compiles fine under gcc5. However, if I replace the line <code>if(Foo foo{42})</code> with </p>\n<pre><code>if(Foo foo(42))\n</code></pre>\n<p>I get a compile-time error:</p>\n<blockquote>\n<p id=\"so_35411163_35411163_0\">error: expected primary-expression before 'foo'</p>\n</blockquote>\n<p>What's going on here? There is no vexing parse imo, so why using braces work?</p>\n", "AcceptedAnswerId": "35411289", "Title": "Why vexing parse in an if condition?", "CreationDate": "2016-02-15T13:52:52.083", "Id": "35411163", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "ClosedDate": "2016-02-15T13:59:16.223", "LastActivityDate": "2017-05-28T07:56:28.070", "Score": "3", "OwnerUserId": "3093378", "Tags": "<c++><c++11><most-vexing-parse>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35411163_35411289_0": {"length": 8, "quality": 0.8, "section_id": 3882}}, "n3337": {"so_35411163_35411289_0": {"length": 8, "quality": 0.8, "section_id": 3742}}}, "35411289": {"Id": "35411289", "PostTypeId": "2", "Body": "<p>The syntax for a <em>condition</em> does not include classic constructor invocation.</p>\n\nC++11 \u00a76.4/1:\n\n<blockquote>\n<p id=\"so_35411163_35411289_0\"><i>condition:</i><br>\n  \u00a0\u00a0\u00a0\u00a0<i>expression</i><br>\n  \u00a0\u00a0\u00a0\u00a0<i>attribute-specifier-seq<sub>opt</sub> decl-specifier-seq declarator</i> <code>=</code> <i>initializer-clause</i><br>\n  \u00a0\u00a0\u00a0\u00a0<i>attribute-specifier-seq<sub>opt</sub> decl-specifier-seq declarator braced-init-list</i></br></br></br></p>\n</blockquote>\n<p>This is used in <code>if</code>, <code>switch</code>, <code>while</code> and <code>do</code>. I was surprised to now discover that it's used in <code>switch</code>. I never thought of that as a condition.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-02-15T14:07:06.960", "CommentCount": "2", "CreationDate": "2016-02-15T13:57:46.423", "ParentId": "35411163", "Score": "6", "OwnerUserId": "464581", "LastEditDate": "2016-02-15T14:07:06.960"}});