post_cb({"35120763": {"CommentCount": "2", "ViewCount": "77", "CreationDate": "2016-01-31T23:20:36.750", "LastActivityDate": "2016-02-04T15:45:27.170", "Title": "IO-performing functions called in same statement: Undefined or unspecified?", "AcceptedAnswerId": "35204933", "PostTypeId": "1", "Id": "35120763", "Score": "6", "Body": "<p>I am starting to learn C++ from C++ Primer (5th edition).  Working through the chapter on expressions, I came up with an example program that has me wondering:</p>\n<pre><code>int f1()\n{\n    cout &lt;&lt; \"f1\\n\";\n    return 1;\n}\n\nint f2()\n{\n    cout &lt;&lt; \"f2\\n\";\n    return 2;\n}\n\nint main() {\n    int i = f1() + f2();\n    return 0;\n}\n</code></pre>\n<p>I am unsure whether this program invokes undefined or merely unspecified behavior.  I know that the order in which functions <code>f1</code> and <code>f2</code> are called is unspecified.  Each function writes to standard output as a side effect, so at best, the order in which the lines are printed is unspecified.  At worst, this invokes undefined behavior.</p>\n<p>I know the answer lies somewhere in the C++ standard, but it is quite technical for my current level of understanding.  A gentler explanation would be much appreciated.</p>\n", "Tags": "<c++>", "OwnerUserId": "515941", "AnswerCount": "2"}, "35204933": {"ParentId": "35120763", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<h2><a href=\"http://en.cppreference.com/w/cpp/language/ub\" rel=\"nofollow\">Unspecified Behavior</a></h2>\n<p id=\"so_35120763_35204933_0\">The behavior of the program varies between implementations and the conforming implementation is not required to document the effects of each behavior. For example, <strong>order of evaluation</strong>, whether identical string literals are distinct, the amount of array allocation overhead, etc. Each unspecified behavior results in one of a set of valid results.</p>\n<h2><a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow\">Order of Evaluation</a></h2>\n<p id=\"so_35120763_35204933_1\">[T]here is no concept of left-to-right or right-to-left evaluation in C++. This is not to be confused with left-to-right and right-to-left associativity of operators: the expression f1() + f2() + f3() is parsed as (f1() + f2()) + f3() due to left-to-right associativity of operator+, but <strong>the function call to f3 may be evaluated first, last, or between f1() or f2() at run time.</strong></p>\n</blockquote>\n<p>If order is important, you do</p>\n<pre><code>int a = f1();\nint b = f2();\nint i = a + b;\n</code></pre>\n<p>If order isn't important, then the code is perfectly fine.</p>\n", "OwnerUserId": "602372", "LastEditorUserId": "602372", "LastEditDate": "2016-02-04T15:45:27.170", "Id": "35204933", "Score": "2", "CreationDate": "2016-02-04T15:26:18.240", "LastActivityDate": "2016-02-04T15:45:27.170"}, "bq_ids": {"n4140": {"so_35120763_35204414_0": {"section_id": 5811, "quality": 0.9459459459459459, "length": 35}}, "n3337": {"so_35120763_35204414_0": {"section_id": 5584, "quality": 0.8108108108108109, "length": 30}}, "n4659": {"so_35120763_35204414_3": {"section_id": 7273, "quality": 0.9259259259259259, "length": 25}, "so_35120763_35204414_0": {"section_id": 7272, "quality": 0.7837837837837838, "length": 29}}}, "35204414": {"ParentId": "35120763", "CommentCount": "1", "Body": "<p>The topic of \"undefined behavior\" is quite the nuisance on the site. For quite a while, there were many questions asking \"Is this undefined behavior?\" and answerers rushing to say \"yes\" when it actually wasn't the case. I believe what you're thinking of are cases like this:</p>\n<blockquote>\n<p id=\"so_35120763_35204414_0\">The value computations of the operands of an operator are sequenced\n  before the value computation of the result of the operator. If a side\n  effect on a scalar object is unsequenced relative to either another\n  side effect on the same scalar object or a value computation using the\n  value of the same scalar object, and they are not potentially\n  concurrent (1.10), the behavior is undefined.</p>\n<p id=\"so_35120763_35204414_1\">[ <em>Example:</em></p>\n<pre><code>void f(int, int);\nvoid g(int i, int* v) {\n  i = v[i++];        // the behavior is undefined\n  i = 7, i++, i++;   // i becomes 9\n\n  i = i++ + 1;       // the behavior is undefined\n  i = i + 1;         // the value of i is incremented\n\n  f(i = -1, i = -1); // the behavior is undefined\n}\n</code></pre>\n<p id=\"so_35120763_35204414_2\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>Both modifying an object and calling a library I/O function are side effects. Other than that, there is no relation whatsoever that implies your example has undefined behavior.</p>\n<p>The other problem I have are answerers who would rather dump a bunch of nice-sounding standardese that is more difficult to parse than the human-friendly version. As a result, people tend to miss the bigger picture. Here is an example:</p>\n<blockquote>\n<p id=\"so_35120763_35204414_3\">\u00a71.9/15 For each function invocation <em>F</em> , for every evaluation <em>A</em>\n  that occurs within <em>F</em> and every evaluation <em>B</em> that does not occur\n  within <em>F</em> but is evaluated on the same thread and as part of the same\n  signal handler (if any), either <em>A</em> is sequenced before <em>B</em> or <em>B</em> is\n  sequenced before <em>A</em>.</p>\n</blockquote>\n<p>Translation: If <em>A</em> and <em>B</em> would not otherwise be sequenced, then they are indeterminately sequenced. By definition, <em>indeterminately sequenced</em> means they can occur in <strong>any order</strong> but may not overlap.</p>\n<p>Furthermore, in inexact terms, the operands of the <code>+</code> operator are unsequenced. So <code>+</code> does not represent a \"sequence point\". Therefore, <code>f1()</code> and <code>f2()</code> are indeterminately sequenced and you can infer that it's unspecified behavior.</p>\n<p>TL;DR: Forget the standard, focus on learning the language. You get too bogged down into details and you lose sight of the bigger picture and confuse things. <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow\">Here's a human-friendly treatise on the subject</a></p>\n", "OwnerUserId": "5883629", "PostTypeId": "2", "Id": "35204414", "Score": "0", "CreationDate": "2016-02-04T15:01:10.273", "LastActivityDate": "2016-02-04T15:01:10.273"}});