post_cb({"31804618": {"CommentCount": "5", "ViewCount": "249", "PostTypeId": "1", "LastEditorUserId": "183120", "CreationDate": "2015-08-04T08:45:14.970", "LastActivityDate": "2015-08-04T09:22:58.473", "Title": "Will a static_assert in a POD ruin the POD?", "AcceptedAnswerId": "31804848", "LastEditDate": "2015-08-04T09:16:50.980", "Id": "31804618", "Score": "5", "Body": "<p>I was just wondering... Let's say I have a POD structure in C++. If I would put a <code>static_assert</code> in there, will it ruin the fact that it's a POD?</p>\n<p>I know I can easily put it somewhere else, I'm just asking because I'm interested if I should or shouldn't do this...</p>\n<p>In other words (more specific):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstruct A \n{\n    void* ptr;\n\n    static_assert(sizeof(void*) == 8, \"Pointer should have size 8; platform unsupported\");\n};\n\nint main()\n{\n    // Is it guaranteed that this will evaluate to 'true'?\n    std::cout &lt;&lt; std::is_pod&lt;A&gt;::value &lt;&lt; std::endl;\n}\n</code></pre>\n", "Tags": "<c++><types><assert><static-assert>", "OwnerUserId": "1031591", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31804618_31804848_0": {"section_id": 5382, "quality": 1.0, "length": 33}}, "n3337": {"so_31804618_31804848_0": {"section_id": 5176, "quality": 1.0, "length": 33}}, "n4659": {"so_31804618_31804848_0": {"section_id": 6806, "quality": 0.9090909090909091, "length": 30}}}, "31804848": {"ParentId": "31804618", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C++11 a type is deemed <a href=\"http://en.cppreference.com/w/cpp/types/is_pod\" rel=\"nofollow\">POD</a> if it's</p>\n<ul>\n<li><a href=\"http://en.cppreference.com/w/cpp/types/is_trivial\" rel=\"nofollow\">trivial</a> (a scalar type, a trivially copyable class with a trivial default constructor, or array of such type/class)</li>\n<li><a href=\"http://en.cppreference.com/w/cpp/types/is_standard_layout\" rel=\"nofollow\">standard layout</a> (has no virtual functions, no virtual base classes, etc.)</li>\n</ul>\n<p>Basically nothing that would hinder copying objects as if they're just constituted by raw bytes.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/static_assert\" rel=\"nofollow\"><code>static_assert</code></a>s are there to validate something at compile-time and doesn't change the object layout or the triviality (or the lack thereof) in constructing, copying, etc. of an object. Hence adding any number of static asserts to a type (struct/class) shouldn't change the POD-ness of it.</p>\n<p>You can check if the compiler is considering a type as POD using <code>std::is_pod&lt;T&gt;::value</code>. This wouldn't change before and after adding <code>static_assert</code>s to it.</p>\n<p>This is all that the standard says regarding <code>static_assert</code>s. From <strong>[dcl.dcl]</strong>:</p>\n<blockquote>\n<p id=\"so_31804618_31804848_0\">In a <em>static_assert-declaration</em> the <em>constant-expression</em> shall be a constant expression that can be contextually converted to <code>bool</code>. If the value of the expression when so converted is true, the declaration has no effect. Otherwise, the program is ill-formed, and the resulting diagnostic message (1.4) shall include the text of the string-literal, except that characters not in the basic source character set (2.3) are not required to appear in the diagnostic message.</p>\n</blockquote>\n", "OwnerUserId": "183120", "LastEditorUserId": "183120", "LastEditDate": "2015-08-04T09:22:58.473", "Id": "31804848", "Score": "4", "CreationDate": "2015-08-04T08:56:25.023", "LastActivityDate": "2015-08-04T09:22:58.473"}});