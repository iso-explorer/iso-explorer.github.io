post_cb({"bq_ids": {"n4140": {"so_17132114_17132624_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 241}, "so_17132114_17132624_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 233}}, "n3337": {"so_17132114_17132624_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 233}, "so_17132114_17132624_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 226}}, "n4659": {"so_17132114_17132624_2": {"length": 7, "quality": 0.5384615384615384, "section_id": 55}, "so_17132114_17132624_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 243}}}, "17132624": {"Id": "17132624", "PostTypeId": "2", "Body": "<p>From <a href=\"http://publib.boulder.ibm.com/infocenter/compbgpl/v9v111/index.jsp?topic=/com.ibm.xlcpp9.bg.doc/language_ref/implicit_instantiation.htm\" rel=\"nofollow noreferrer\">IBM C++ compilers reference</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17132114_17132624_0\">If the compiler implicitly instantiates a class template that contains static members, <em>those static members are <strong>not</strong> implicitly instantiated</em>. The compiler will instantiate a static member <em>only when the compiler needs the static member's definition</em>.</p>\n</blockquote>\n<p>So to force the compiler to effectively instantiate <code>GenTest&lt;int&gt;::OnePerType</code> and <code>GenTest&lt;double&gt;::OnePerType</code>, you have to reference them somehow. For example you can add <code>(void)&amp;OnePerType;</code> in the constructor (live example: <a href=\"http://ideone.com/CWNr7U\" rel=\"nofollow noreferrer\">http://ideone.com/CWNr7U</a>).</p>\n<hr>\n<p><em>Edit:</em> Thanks to <a href=\"https://stackoverflow.com/questions/18570632/initialization-of-static-member-variables-for-template-classes#comment27324893_18570632\">chris.schuette</a> here's a quote from the C++ Standard (checked for N3337), \u00a7 14.7.1 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17132114_17132624_1\">1 (...) The implicit instantiation of a class template specialization causes the implicit instantiation of the declarations, <em>but not of the definitions or default arguments</em>, of the class member functions, member classes, scoped member enumerations, <em>static data members</em> and member templates; (...)</p>\n<p id=\"so_17132114_17132624_2\">8 The implicit instantiation of a class template <em>does not cause any static data members of that class to be\n  implicitly instantiated</em>.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-09-02T10:51:49.167", "Score": "1", "CreationDate": "2013-06-16T11:03:22.593", "ParentId": "17132114", "CommentCount": "1", "LastEditDate": "2017-05-23T10:32:14.403", "OwnerUserId": "688659"}, "17132114": {"ViewCount": "447", "Body": "<p>In c# static members are unique for each generic class like in this example</p>\n<pre><code>using System;\n\n//A generic class\npublic class GenTest&lt;T&gt;\n{\n  //A static variable - will be created for each type on refraction\n  static CountedInstances OnePerType = new CountedInstances();\n\n  //a data member\n  private T mT;\n\n  //simple constructor\n  public GenTest(T pT)\n  {\n    mT = pT;\n  }\n}\n\n//a class\npublic class CountedInstances\n{\n  //Static variable - this will be incremented once per instance\n  public static int Counter;\n\n  //simple constructor\n  public CountedInstances()\n  {\n    //increase counter by one during object instantiation\n    CountedInstances.Counter++;\n    Console.WriteLine(Counter);\n  }\n}\n\npublic class staticTest {\n  static void Main(string[] args) {\n    //main code entry point\n    //at the end of execution, CountedInstances{{Not a typo|.}}Counter = 2\n    GenTest&lt;int&gt; g1 = new GenTest&lt;int&gt;(1);\n    GenTest&lt;int&gt; g11 = new GenTest&lt;int&gt;(11);\n    GenTest&lt;int&gt; g111 = new GenTest&lt;int&gt;(111);\n    GenTest&lt;double&gt; g2 = new GenTest&lt;double&gt;(1.0);\n  }\n}\n</code></pre>\n<p>from <a href=\"http://en.wikipedia.org/wiki/Generic_programming\" rel=\"nofollow noreferrer\">http://en.wikipedia.org/wiki/Generic_programming</a></p>\n<p>What about c++? I have tried out to check that myself but translation to c++ seems to ignore the static member.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass CountedInstances {\npublic:\n  static int Counter;\n  CountedInstances() {\n    Counter++;\n    cout &lt;&lt; Counter &lt;&lt; endl;\n  }\n};\n\nint CountedInstances::Counter = 0;\n\ntemplate&lt;class T&gt; class GenTest {\n  static CountedInstances OnePerType;\n  T mT;\npublic:\n  GenTest(T pT) {\n    mT = pT;\n  }\n};\n\ntemplate&lt;class T&gt; CountedInstances GenTest&lt;T&gt;::OnePerType = CountedInstances();\n\nint main() {\n  GenTest&lt;int&gt; g1(1);\n  GenTest&lt;int&gt; g11(11);\n  GenTest&lt;int&gt; g111(111);\n  GenTest&lt;double&gt; g2(1.0);\n  cout &lt;&lt; CountedInstances::Counter &lt;&lt; endl;\n  //CountedInstances c1;\n  //CountedInstances c2;\n}\n</code></pre>\n<p>In this <a href=\"https://stackoverflow.com/a/2220990/499321\">answer</a> I can see that in c++ static members are unique for each specialization, however, my code seems legit but the static member <code>OnePerType</code> is ignored.</p>\n<p>I thought that for each <code>GenTest&lt;&gt;</code> Counter will be printed what happens only when I create objects of type <code>CountedInstances</code> as in the comment. Why is that?</p>\n", "AcceptedAnswerId": "17132624", "Title": "non-constant static members in template/generic class - c++ vs c#", "CreationDate": "2013-06-16T10:05:08.967", "Id": "17132114", "CommentCount": "2", "LastEditDate": "2017-05-23T12:29:13.357", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-09-02T10:51:49.167", "Score": "1", "OwnerUserId": "499321", "Tags": "<c#><c++><templates><generics>", "AnswerCount": "1"}});