post_cb({"21158278": {"CommentCount": "2", "ViewCount": "1702", "CreationDate": "2014-01-16T09:46:31.957", "LastActivityDate": "2014-01-16T10:23:17.823", "Title": "What is the lifetime and scope of dynamically allocated memory using new operator inside a class method?", "PostTypeId": "1", "Id": "21158278", "Score": "1", "Body": "<p>I have a class with a method allocating some memory using new operator, can other members of class can excess that memory? How about outside the class?</p>\n", "Tags": "<c++><oop><dynamic-memory-allocation>", "OwnerUserId": "2614516", "AnswerCount": "3"}, "21158410": {"ParentId": "21158278", "CommentCount": "0", "Body": "<p>Untill you destory the object exist it remains in memory, furthermore if you provide a pointer to that object (or more common use get/set functions) it can be accessed from outside the class.</p>\n", "OwnerUserId": "3192947", "PostTypeId": "2", "Id": "21158410", "Score": "3", "CreationDate": "2014-01-16T09:52:23.483", "LastActivityDate": "2014-01-16T09:52:23.483"}, "bq_ids": {"n4140": {"so_21158278_21158309_2": {"section_id": 7173, "quality": 0.6470588235294118, "length": 11}, "so_21158278_21158405_0": {"section_id": 7173, "quality": 0.8823529411764706, "length": 30}}, "n3337": {"so_21158278_21158309_2": {"section_id": 6917, "quality": 0.6470588235294118, "length": 11}, "so_21158278_21158405_0": {"section_id": 6917, "quality": 0.8823529411764706, "length": 30}}, "n4659": {"so_21158278_21158309_2": {"section_id": 8681, "quality": 0.6470588235294118, "length": 11}, "so_21158278_21158405_0": {"section_id": 8681, "quality": 0.8823529411764706, "length": 30}}}, "21158309": {"ParentId": "21158278", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <code>new</code> operator is same as <code>malloc()</code> in pure C. It's lifetime is until it gets freed as you would do with <code>delete</code>!</p>\n<p>quote from C99 7.20.3 :</p>\n<blockquote>\n<p id=\"so_21158278_21158309_0\">The lifetime of an allocated object extends\n  from the allocation until the deallocation.</p>\n</blockquote>\n<p>In c++98 standard it is said this way:</p>\n<blockquote>\n<p id=\"so_21158278_21158309_1\">3.7.3 </p>\n<p id=\"so_21158278_21158309_2\">Dynamic storage duration [basic.stc.dynamic]\n  1 Objects can be created dynamically during program execution (1.9), using newexpressions\n  (5.3.4), and\n  destroyed using deleteexpressions\n  (5.3.5).</p>\n</blockquote>\n<p><strong>EDIT</strong></p>\n<p>This would even mean, its lifetime could exceed even the program lifetime.\nCommon Operating systems release the memory for you if you didn't do so.</p>\n<p>But the standards don't say that the implementation has to care about not freed memory after programm termination, doesn't matter there would be any sense for.</p>\n", "OwnerUserId": "2003898", "LastEditorUserId": "2003898", "LastEditDate": "2014-01-16T10:23:17.823", "Id": "21158309", "Score": "2", "CreationDate": "2014-01-16T09:47:57.570", "LastActivityDate": "2014-01-16T10:23:17.823"}, "21158405": {"ParentId": "21158278", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In general, dynamically allocated memory will \"live\" as long as you don't explicitly deallocate it with <code>delete</code> or <code>delete[]</code>. </p>\n<p>As far as the <em>scope</em> is concerned: there's no such a thing as a scope for dynamically allocated memory. We usually talk about <em>scope</em> for automatic memory (because automatic memory will be deallocated at the end of the scope). The rules for the scope of the pointer to the dynamically allocated memory, on the other hand, are the same as any other automatic object.</p>\n<p>In the C++ Standard (N3797 draft) this is specified at \u00a73.7.4/1:</p>\n<blockquote>\n<p id=\"so_21158278_21158405_0\">Objects can be created dynamically during program execution (1.9), using <em>new-expressions</em> (5.3.4), and destroyed using <em>delete-expressions</em> (5.3.5). A C++ implementation provides access to, and management of, dynamic storage via the global allocation functions <code>operator new</code> and <code>operator new[]</code> and the global deallocation functions operator <code>delete</code> and <code>operator delete[]</code>.</p>\n</blockquote>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2014-01-16T09:58:50.607", "Id": "21158405", "Score": "5", "CreationDate": "2014-01-16T09:52:10.000", "LastActivityDate": "2014-01-16T09:58:50.607"}});