post_cb({"39961748": {"ParentId": "39961702", "CommentCount": "0", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/vector/vector/vector/\" rel=\"nofollow\">here</a>:</p>\n<blockquote>\n<p id=\"so_39961702_39961748_0\">The container keeps an internal copy of alloc, which is used to allocate and deallocate storage for its elements, and to construct and destroy them (as specified by its allocator_traits). </p>\n</blockquote>\n<p>So, if I'm not wrong, what you're asking for is the default.</p>\n", "OwnerUserId": "6040181", "PostTypeId": "2", "Id": "39961748", "Score": "0", "CreationDate": "2016-10-10T15:31:30.090", "LastActivityDate": "2016-10-10T15:31:30.090"}, "39961770": {"ParentId": "39961702", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>An allocator must be CopyConstructible without exceptions, and afterwards <code>a1 == a2</code> must hold (meaning they share the same memory pool). I strongly suggest reading <a href=\"http://en.cppreference.com/w/cpp/concept/Allocator\" rel=\"nofollow\">this page on the Allocator concept</a>.</p>\n<p><code>std::vector</code> stores a copy of the allocator you give it.</p>\n<p>So if you properly implement your allocator to be safe to copy, there will be no problem with your given code.</p>\n", "OwnerUserId": "565635", "LastEditorUserId": "565635", "LastEditDate": "2016-10-10T15:41:18.533", "Id": "39961770", "Score": "3", "CreationDate": "2016-10-10T15:32:47.243", "LastActivityDate": "2016-10-10T15:41:18.533"}, "39961702": {"CommentCount": "10", "ViewCount": "77", "CreationDate": "2016-10-10T15:28:38.537", "LastActivityDate": "2016-10-10T15:41:18.533", "Title": "Returning vectors that use custom allocators", "PostTypeId": "1", "Id": "39961702", "Score": "1", "Body": "<p>Suppose you developed an optimized <strong>custom allocator</strong> that you want to use with <code>std::vector</code> (for example, for small allocations the custom allocator gets memory from the stack instead of the heap, kind of like <code>std::string</code>'s SSO; or it allocates big chunks of memory using e.g. <code>VirtualAlloc</code> on Windows, and then single allocations are carved from inside a chunk just increasing a pointer).</p>\n<pre><code>typedef std::vector&lt;T, OptimizedAllocator&lt;T&gt;&gt; OptimizedVector;\n</code></pre>\n<p>How to use it in a context where you are returning a vector from a function, like this?</p>\n<pre><code>OptimizedVector DoSomething() \n{\n    OptimizedVector&lt;int&gt;::allocator_type alloc{};\n    OptimizedVector&lt;int&gt; v{alloc};\n\n    // Do stuff...\n\n    return v;\n} \n</code></pre>\n<p>At the end of the function's scope, the allocator object is destroyed, so the returned vector could contain garbage, right?</p>\n<p>An alternative might be to pass the allocator object as a reference to each function as an additional parameter, but that's kind of ugly...</p>\n<p>Is there a way to safely <em>\"embed\"</em> the allocator object in the vector?</p>\n<p>How do you solve this problem?</p>\n", "Tags": "<c++><vector><stl><allocator>", "OwnerUserId": "1629821", "AnswerCount": "3"}, "39961806": {"ParentId": "39961702", "CommentCount": "0", "Body": "<p>The allocator is kept by copy as defined by the standard:</p>\n<blockquote>\n<p id=\"so_39961702_39961806_0\">n4140 \u00a723.2.1 [container.requirements.general]/8</p>\n<p id=\"so_39961702_39961806_1\">Unless otherwise specified, all containers defined in this clause\n  obtain memory using an allocator [...] A copy of this allocator is\n  used for any memory allocation performed [...]</p>\n</blockquote>\n<p><code>vector</code> is not \"otherwise specified\".</p>\n<p>This also means that your allocator should support copying and probably be a handle for the real allocator if it needs state.</p>\n", "OwnerUserId": "2456565", "PostTypeId": "2", "Id": "39961806", "Score": "2", "CreationDate": "2016-10-10T15:35:21.290", "LastActivityDate": "2016-10-10T15:35:21.290"}, "bq_ids": {"n4140": {"so_39961702_39961806_1": {"section_id": 709, "quality": 0.9375, "length": 15}}, "n3337": {"so_39961702_39961806_1": {"section_id": 698, "quality": 0.9375, "length": 15}}, "n4659": {"so_39961702_39961806_1": {"section_id": 738, "quality": 0.9375, "length": 15}}}});