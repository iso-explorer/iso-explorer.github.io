post_cb({"23368705": {"Id": "23368705", "PostTypeId": "2", "Body": "<p>Here is my interpretation: In \u00a73.3.1/3 the standard says:</p>\n<blockquote>\n<p id=\"so_23367912_23368705_0\">The names declared by a declaration are introduced into the scope in which the declaration  occurs, except that the presence of a friend specifier (11.3), certain uses of the elaborated-type-specifier (7.1.6.3), and using-directives (7.3.4) alter this general behavior.</p>\n</blockquote>\n<p>As <code>extern</code> declarations are not listed as exception, the name is introduced in the block scope, which is why you get the error when you try to redeclare it.</p>\n<p>The paragraph you quoted says </p>\n<blockquote>\n<p id=\"so_23367912_23368705_1\">but they do not introduce new names into that scope.</p>\n</blockquote>\n<p>which is a bit ambiguous, as both block scope and namespace scope are mentioned. The standard would contradict itself if it referred to block scope, so I assume that namespace scope is meant.</p>\n", "LastActivityDate": "2014-04-29T15:16:31.963", "Score": "0", "CreationDate": "2014-04-29T15:16:31.963", "ParentId": "23367912", "CommentCount": "2", "OwnerUserId": "3578084"}, "23368809": {"Id": "23368809", "PostTypeId": "2", "Body": "<p>I believe this is mostly covered by \u00a73.5/6.</p>\n<p>In particular:</p>\n<blockquote>\n<p id=\"so_23367912_23368809_0\">The name of a function declared in block scope and <em>the name of a variable declared by a block scope extern declaration have linkage.</em> If there is a visible declaration of an entity with linkage having the same name and type, ignoring entities declared outside the innermost enclosing namespace scope, the block scope declaration declares that same entity and receives the linkage of the previous declaration. If there is more than one such matching entity, the program is ill-formed. Otherwise, if no matching entity is found, the block scope entity\n  receives external linkage.</p>\n</blockquote>\n<p>So, the <code>extern int w;</code> declares a <code>w</code> that has linkage (external linkage, in this case, since no matching entity is visible at that point).</p>\n<p>Then you attempt to define a local <code>w</code> which has no linkage (by \u00a73.5/8).</p>\n<p>That gives two declarations of the same name at the same scope, but with different linkages. That's prohibited by \u00a73.3.1/4:</p>\n<blockquote>\n<p id=\"so_23367912_23368809_1\">Given a set of declarations in a single declarative region, each of which specifies the same unqualified name,</p>\n<ul>\n<li>they shall all refer to the same entity, or all refer to functions and function templates; or</li>\n<li>exactly one declaration shall declare a class name or enumeration name that is not a typedef name\n  and the other declarations shall all refer to the same variable or enumerator, or all refer to functions and function templates; in this case the class name or enumeration name is hidden (3.3.10).</li>\n</ul>\n</blockquote>\n<p>Neither refers to a function, function template, class name, or enumeration name, so none of these \"escape clauses\" applies. The two declarations must refer to the same entity, which must have both external linkage and no linkage. Since that's impossible, the code is ill-formed.</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2014-04-29T15:44:34.277", "Score": "7", "CreationDate": "2014-04-29T15:21:32.007", "ParentId": "23367912", "CommentCount": "4", "LastEditDate": "2014-04-29T15:44:34.277", "OwnerUserId": "179910"}, "bq_ids": {"n4140": {"so_23367912_23367912_0": {"length": 6, "quality": 1.0, "section_id": 7047}, "so_23367912_23367912_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 7059}, "so_23367912_23368809_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 7139}, "so_23367912_23367912_1": {"length": 51, "quality": 0.8947368421052632, "section_id": 7047}, "so_23367912_23368705_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 7046}, "so_23367912_23368705_1": {"length": 7, "quality": 1.0, "section_id": 7059}, "so_23367912_23368809_1": {"length": 11, "quality": 1.0, "section_id": 7047}}, "n3337": {"so_23367912_23367912_0": {"length": 6, "quality": 1.0, "section_id": 6792}, "so_23367912_23367912_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 6803}, "so_23367912_23368809_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 6883}, "so_23367912_23367912_1": {"length": 51, "quality": 0.8947368421052632, "section_id": 6792}, "so_23367912_23368705_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 6791}, "so_23367912_23368705_1": {"length": 7, "quality": 1.0, "section_id": 6803}, "so_23367912_23368809_1": {"length": 11, "quality": 1.0, "section_id": 6792}}, "n4659": {"so_23367912_23367912_0": {"length": 6, "quality": 1.0, "section_id": 8544}, "so_23367912_23367912_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 8556}, "so_23367912_23368809_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 8640}, "so_23367912_23367912_1": {"length": 51, "quality": 0.8947368421052632, "section_id": 8544}, "so_23367912_23368705_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 8543}, "so_23367912_23368705_1": {"length": 7, "quality": 1.0, "section_id": 8556}, "so_23367912_23368809_1": {"length": 11, "quality": 1.0, "section_id": 8544}}}, "23367912": {"ViewCount": "360", "Body": "<p>clang, gcc and VS2013 all complain about redefinition of <code>w</code> in <code>main()</code>, but I couldn't find in the Standard anything disallowing this.</p>\n<pre><code>namespace N {\n    extern int j;\n    int j;\n}\n\nint main()\n{\n    extern int w;\n    int w;\n}\n</code></pre>\n<p>These paragraphs say something about the use of an <code>extern</code> declaration in block scope, but they don't seem to justify the error message:</p>\n<p>\u00a73.3.1/4</p>\n<blockquote>\n<p id=\"so_23367912_23367912_0\">Given a set of declarations in a single declarative region, ...</p>\n<p id=\"so_23367912_23367912_1\">[ Note: These restrictions apply to the declarative region into which\n  a name is introduced, which is not necessarily the same as the region\n  in which the declaration occurs. In particular,\n  elaborated-type-specifiers (7.1.6.3) and friend declarations (11.3)\n  may introduce a (possibly not visible) name into an enclosing\n  namespace; these restrictions apply to that region. <strong>Local extern\n  declarations (3.5) may introduce a name into the declarative region\n  where the declaration appears and also introduce a (possibly not\n  visible) name into an enclosing namespace</strong>; these restrictions apply to\n  both regions. \u2014end note ]</p>\n</blockquote>\n<p>\u00a73.3.2/10</p>\n<blockquote>\n<p id=\"so_23367912_23367912_2\">[ Note: Friend declarations refer to functions or classes that are\n  members of the nearest enclosing namespace, but they do not introduce\n  new names into that namespace (7.3.1.2). Function declarations at\n  block scope and <strong>variable declarations with the extern specifier at\n  block scope refer to declarations that are members of an enclosing\n  namespace, but they do not introduce new names into that scope</strong>. \u2014end\n  note ]</p>\n</blockquote>\n", "AcceptedAnswerId": "23368809", "Title": "Use of extern in block scope", "CreationDate": "2014-04-29T14:42:16.003", "Id": "23367912", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2014-04-29T15:44:34.277", "Score": "11", "OwnerUserId": "2548699", "Tags": "<c++><c++11><language-lawyer><extern>", "AnswerCount": "2"}});