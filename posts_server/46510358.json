post_cb({"bq_ids": {"n4140": {"so_46510358_46510398_1": {"length": 8, "quality": 1.0, "section_id": 49}, "so_46510358_46510386_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5908}}, "n3337": {"so_46510358_46510398_1": {"length": 8, "quality": 1.0, "section_id": 44}, "so_46510358_46510386_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5680}}, "n4659": {"so_46510358_46510398_1": {"length": 8, "quality": 1.0, "section_id": 50}, "so_46510358_46510386_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 3965}}}, "46510386": {"Id": "46510386", "PostTypeId": "2", "Body": "<p>Yes, <a href=\"http://en.cppreference.com/w/cpp/language/type_alias#Explanation\" rel=\"nofollow noreferrer\">alias template</a> could only be declared at class scope or namespace scope.</p>\n<blockquote>\n<p id=\"so_46510358_46510386_0\">Like any template declaration, an alias template can only be declared at class scope or namespace scope.</p>\n</blockquote>\n<p>BTW: You should declare a <a href=\"http://en.cppreference.com/w/cpp/language/template_parameters#Non-type_template_parameter\" rel=\"nofollow noreferrer\">non-type template parameter</a> for your alias template <code>Array</code>, e.g.</p>\n<pre><code>template &lt;std::size_t N&gt;\nusing Array = std::array&lt;std::uint8_t, N&gt;;\n</code></pre>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2017-10-01T08:05:54.443", "Score": "2", "CreationDate": "2017-10-01T08:00:42.693", "ParentId": "46510358", "CommentCount": "3", "OwnerUserId": "3309790", "LastEditDate": "2017-10-01T08:05:54.443"}, "46510398": {"Id": "46510398", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_46510358_46510398_0\">Is this not allowed in functions and if so why?</p>\n</blockquote>\n<p>Yup. Because the C++ standard explicitly prohibits it for all templates. <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp#2\" rel=\"nofollow noreferrer\">[temp]/2</a> says:</p>\n<blockquote>\n<p id=\"so_46510358_46510398_1\">A <em>template-declaration</em> can appear only as a namespace scope or class\n  scope declaration.</p>\n</blockquote>\n<p>The rationale is probably to not make the already fragile template specification more susceptible to ODR violations. Even now, the order of appearance for specializations can make programs ill-formed or well-formed somewhat unexpectedly.</p>\n<p>The crux of the matter is that we don't really need function scope templates, IMO.</p>\n", "LastActivityDate": "2017-10-01T08:03:03.477", "CommentCount": "0", "CreationDate": "2017-10-01T08:03:03.477", "ParentId": "46510358", "Score": "2", "OwnerUserId": "817643"}, "46510358": {"ViewCount": "17", "Body": "<p>I'm attempting to do</p>\n<pre><code>template &lt;typename N&gt;\nusing Array = std::array&lt;std::uint8_t, N&gt;;\n</code></pre>\n<p>Within a function, but clang spits out an error: <em>expected expression.</em></p>\n<p>For example</p>\n<pre><code>void func()\n{\n    template &lt;typename T&gt;\n    using Vec = std:vector&lt;T&gt;;\n}\n</code></pre>\n<p>will result in this error.</p>\n<p>Is this not allowed in functions and if so why? Thanks</p>\n", "AcceptedAnswerId": "46510386", "Title": "Cannot declare a templated type alias in a function", "CreationDate": "2017-10-01T07:56:18.737", "Id": "46510358", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-10-01T08:05:54.443", "Score": "1", "OwnerUserId": "3989259", "Tags": "<c++><templates>", "AnswerCount": "2"}});