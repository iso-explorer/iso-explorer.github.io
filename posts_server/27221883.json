post_cb({"bq_ids": {"n4140": {"so_27221883_27222359_3": {"length": 10, "quality": 1.0, "section_id": 5433}, "so_27221883_27222359_4": {"length": 7, "quality": 1.0, "section_id": 5425}}, "n3337": {"so_27221883_27222359_3": {"length": 10, "quality": 1.0, "section_id": 5228}, "so_27221883_27222359_4": {"length": 7, "quality": 1.0, "section_id": 5220}}, "n4659": {"so_27221883_27222359_3": {"length": 10, "quality": 1.0, "section_id": 6861}, "so_27221883_27222359_4": {"length": 7, "quality": 1.0, "section_id": 6847}}}, "27222359": {"Id": "27222359", "PostTypeId": "2", "Body": "<p>He states in the beginning of the section:</p>\n<blockquote>\n<p id=\"so_27221883_27222359_0\">C++ supports two notions of immutability</p>\n</blockquote>\n<p>and he lists <em>const</em> and <em>constexpr</em>, I don't believe he is attempting to say that <em>constexpr</em> ensures immutability better than <em>const</em> they just have different features, although I admit the fact the sentence cites section <code>10.4</code> <em>Constant Expressions</em>  does seem to imply that, that interpretation is inconsistent with the rest of the text. </p>\n<p>A variable that is <code>const</code> is immutable in that scope but may not be <code>const</code> in the larger scope(<em>for example a const reference parameter to a function</em>) and that is perhaps a subtle distinction he is attempting to make, he says that <code>const</code>:</p>\n<blockquote>\n<p id=\"so_27221883_27222359_1\">is used primarily to specify interfaces</p>\n</blockquote>\n<p>whereas <code>constexpr</code>:</p>\n<blockquote>\n<p id=\"so_27221883_27222359_2\">This is used primarily to specify constants, to allow placement of data in read-only memory</p>\n</blockquote>\n<p>Any variable that is <code>constexpr</code> should be evaluated at compile time and thus usable where constant expressions are required whereas a variable that is passed as <code>const</code> to a function does not have to be <code>const</code> outside that scope.</p>\n<p>Sure you can cast away <em>constness</em> using <code>const_cast</code> but attempting to modify a <code>const</code> object is undefined behavior and so it is no less immutable than <code>constexpr</code> in that sense, from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++11 standard</a> section <code>7.1.6.1</code> <em>The cv-qualifiers</em>:</p>\n<blockquote>\n<p id=\"so_27221883_27222359_3\">any attempt to modify a const object during its lifetime (3.8) results in undefined behavior</p>\n</blockquote>\n<p>Jonathan Wakely notes that a <em>constexpr</em> variable like <em>const</em> variables can have a <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1405\" rel=\"nofollow\">mutable member</a> but that member can not be used in a constant expression.</p>\n<p>Note that a <em>constexpr</em> variable is also <em>const</em>, from the draft C++11 standard section <code>7.1.5</code> <em>The constexpr specifier</em>:</p>\n<blockquote>\n<p id=\"so_27221883_27222359_4\">A constexpr specifier used in an object declaration declares the\n  object as const.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-12-08T15:15:12.950", "Score": "10", "CreationDate": "2014-12-01T05:45:00.953", "ParentId": "27221883", "CommentCount": "5", "OwnerUserId": "1708801", "LastEditDate": "2014-12-08T15:15:12.950"}, "27225637": {"Id": "27225637", "PostTypeId": "2", "Body": "<p><code>const</code> dosn't ensure bitwise constness, e.g. as classes can have mutable members (typical example would be a private mutex for internal synchronization) and you can <code>const_cast</code> away the constness from a pointer.</p>\n<p><code>constexpr</code> declares a constant variable or function that can be calculated at compile time, which implies some restrictions on what the object can be, but I believe, the keyword itself doesn't provide any additional guarantees during runtime compared to <code>const</code>. \nSee also <a href=\"http://compgroups.net/comp.std.c++/defect-report-constexpr-and-mutable-members-of-l/2126042\">this</a> discussion.</p>\n", "LastEditorUserId": "2881849", "LastActivityDate": "2014-12-01T10:07:10.047", "Score": "5", "CreationDate": "2014-12-01T09:49:53.410", "ParentId": "27221883", "CommentCount": "5", "OwnerUserId": "2881849", "LastEditDate": "2014-12-01T10:07:10.047"}, "27221883": {"ViewCount": "1608", "Body": "<p><em>The C++ Programming Language Fourth Edition - Bjarne Stroustrup: (emphasis mine)</em></p>\n<p><strong><em>2.2.3. Constants</em></strong> </p>\n<blockquote>\n<p id=\"so_27221883_27221883_0\">In a few places, constant expressions are required by language rules\n  (e.g., array bounds (\u00a72.2.5, \u00a77.3), case labels (\u00a72.2.4, \u00a79.4.2), some\n  template arguments (\u00a725.2), and constants declared using constexpr).\n  In other cases, compile-time evaluation is important for performance.\n  <strong><em>Independently of performance issues, the notion of immutability (of an object with an unchangeable state) is an important design concern\n  (\u00a710.4).</em></strong></p>\n</blockquote>\n<p>It seems that Stroustrup is suggesting here that <code>constexpr</code> ensures immutability of an object better than a traditional <code>const</code> declaration. Is this correct? Are there ways in which <code>constexpr</code> can be more secure/less volatile than <code>const</code>, or does Stroustrup simply mean that since there are ways to use <code>constexpr</code> that are not supported with <code>const</code> (see <strong><a href=\"https://stackoverflow.com/questions/6016771/is-constexpr-really-needed\">Is constexpr really needed?</a></strong>), in those cases immutability can be ensured using <code>constexpr</code>?</p>\n", "AcceptedAnswerId": "27222359", "Title": "Is a constexpr more \"constant\" than const?", "CreationDate": "2014-12-01T04:51:38.683", "Id": "27221883", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:52:47.610", "LastEditorUserId": "-1", "LastActivityDate": "2014-12-08T15:15:12.950", "Score": "11", "OwnerUserId": "712579", "Tags": "<c++11><const><immutability><constexpr>", "AnswerCount": "2"}});