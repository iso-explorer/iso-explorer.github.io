post_cb({"26270470": {"CommentCount": "10", "ViewCount": "129", "OwnerDisplayName": "user2953119", "CreationDate": "2014-10-09T04:43:04.513", "LastActivityDate": "2014-10-09T05:14:09.587", "PostTypeId": "1", "AcceptedAnswerId": "26270518", "Title": "Can sizeof(int) = 1 on either 32 or 64 bit platforms?", "Id": "26270470", "Score": "1", "Body": "<p>In the section <code>N3797::3.9.1/2 [basic.fundamental]</code> there is:</p>\n<blockquote>\n<p id=\"so_26270470_26270470_0\">There are five standard signed integer types : \u201c<code>signed char</code>\u201d, \u201c<code>short</code>\n<code>int</code>\u201d, \u201c<code>int</code>\u201d, \u201c<code>long int</code>\u201d, and \u201c<code>long long int</code>\u201d. In this list, each type\n  provides at least as much storage as those preceding it in the list.</p>\n</blockquote>\n<p>The standard explicitly defines size of <code>char, unsigned char, signed char</code> is 1. And that the size of plain <code>int</code>s depends on <code>INT_MIN</code> and <code>INT_MAX</code> as far as I understand not-standartized. So is it possible for implementation to define <code>INT_MIN</code> and <code>INT_MAX</code> such that <code>sizeof(int) = 1;</code>?</p>\n", "Tags": "<c++>", "AnswerCount": "2"}, "26270510": {"ParentId": "26270470", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-10-09T04:46:06.983", "Score": "6", "LastEditorUserId": "1405588", "LastEditDate": "2014-10-09T05:14:09.587", "Id": "26270510", "OwnerUserId": "1405588", "Body": "<p>Yes. It is entirely possible for <code>signed char</code>, <code>short</code>, <code>int</code>, <code>long</code>, and <code>long long</code> to all have the same 64-bit representation, which will have size 1.</p>\n<p>The only effect this has on the standard library is to <a href=\"http://en.cppreference.com/w/c/types/integer\" rel=\"nofollow\">remove some typedefs from <code>stdint.h</code></a> - specifically, <code>int8_t</code>, <code>int16_t</code>, <code>int32_t</code>, <code>int64_t</code>, <code>uint8_t</code>, <code>uint16_t</code>, <code>uint32_t</code>, <code>uint64_t</code>. Note that <code>uint8_least_t</code> and <code>uint8_fast_t</code>, etc., will still be provided.</p>\n<p>Edit: add @user657267's link: <a href=\"http://en.cppreference.com/w/cpp/language/types\" rel=\"nofollow\">1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</a>, which also includes the specific bit size requirements (though note that only the value ranges are normative)</p>\n<p>The following value ranges must be supported:</p>\n<ul>\n<li><code>signed char</code>: -(2<sup>7</sup>-1) to 2<sup>7</sup>-1</li>\n<li><code>unsigned char</code>: 0 to 2<sup>8</sup>-1</li>\n<li><code>signed short</code>: -(2<sup>15</sup>-1) to 2<sup>15</sup>-1</li>\n<li><code>unsigned short</code>: 0 to 2<sup>16</sup>-1</li>\n<li><code>signed int</code>: -(2<sup>15</sup>-1) to 2<sup>15</sup>-1</li>\n<li><code>unsigned int</code>: 0 to 2<sup>16</sup>-1</li>\n<li><code>signed long</code>: -(2<sup>31</sup>-1) to 2<sup>31</sup>-1</li>\n<li><code>unsigned long</code>: 0 to 2<sup>32</sup>-1</li>\n<li><code>signed long long</code>: -(2<sup>63</sup>-1) to 2<sup>63</sup>-1</li>\n<li><code>unsigned long long</code>: 0 to 2<sup>64</sup>-1</li>\n</ul>\n<p>Edit: inlined more information from the links</p>\n", "LastActivityDate": "2014-10-09T05:14:09.587"}, "bq_ids": {"n4140": {"so_26270470_26270470_0": {"section_id": 7211, "quality": 1.0, "length": 25}}, "n3337": {"so_26270470_26270470_0": {"section_id": 6955, "quality": 1.0, "length": 25}}, "n4659": {"so_26270470_26270470_0": {"section_id": 8720, "quality": 0.96, "length": 24}}}, "26270518": {"ParentId": "26270470", "CommentCount": "2", "Body": "<p>Yes, as long as a byte has at least 16 bits, since that's the minimum size of <code>int</code>.</p>\n<p>This is common on DSP architectures, which typically only allow access to, for example, 32-bit words of memory, and no smaller units.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "26270518", "Score": "4", "CreationDate": "2014-10-09T04:46:38.033", "LastActivityDate": "2014-10-09T04:46:38.033"}});