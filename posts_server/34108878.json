post_cb({"bq_ids": {"n4140": {"so_34108878_34108878_1": {"length": 4, "quality": 0.8, "section_id": 500}}, "n3337": {"so_34108878_34108878_1": {"length": 4, "quality": 0.8, "section_id": 491}}}, "34112516": {"CommentCount": "3", "Body": "<p>The Concepts TS only defines behavior for determining the satisfaction of the associated constraints of a declaration; there's no provision for referring to a concept name outside of associated constraints. So strictly speaking, <code>std::cout &lt;&lt; C&lt;int&gt;</code> and <code>std::cout &lt;&lt; C&lt;A&gt;</code> are both ill-formed.</p>\n<p>EWG decided in Kona to allow this as a new feature:</p>\n<blockquote>\n<p id=\"so_34108878_34112516_0\">Straw poll: SF | F | N | A | SA</p>\n<ul>\n<li>Should we allow evaluation of concepts anywhere? 8 | 6 | 2 | 0 | 0</li>\n<li>Should we allow the presence and evaluation of a requires-expression in any expression? 1 | 2 | 10 | 3 | 1\n  \n  <ul>\n<li>Note that without the first poll, the second poll would change.</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>but there is no wording yet to specify its behavior.</p>\n<p>GCC currently allows concepts-as-expressions as an (I believe undocumented) extension. I find it quite likely that this feature will be specified so that <code>C&lt;X...&gt;</code> evaluates to <code>false</code> when substitution of <code>X...</code> into the initializer of <code>C</code> fails to produce a valid expression, and otherwise has the value of the expression so obtained. That seems like the sane way to do this, and is consistent with the implementation in GCC.</p>\n", "CreationDate": "2015-12-06T00:19:15.533", "ParentId": "34108878", "Id": "34112516", "LastActivityDate": "2015-12-06T00:19:15.533", "PostTypeId": "2", "Score": "4", "OwnerUserId": "923854"}, "34108878": {"CreationDate": "2015-12-05T17:55:28.123", "ViewCount": "147", "FavoriteCount": "1", "Id": "34108878", "AcceptedAnswerId": "34112516", "Score": "8", "Title": "In concept definitions, are substitution failures allowed outside of a requires expression?", "LastEditorUserId": "4447365", "CommentCount": "0", "Body": "<p>Consider this code:</p>\n<pre><code>#include &lt;type_traits&gt;                                           \n#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt; concept bool C1 = std::is_same&lt;T, int&gt;::value; \n\ntemplate &lt;class T&gt; concept bool C2 =  \n    C1&lt;decltype(std::declval&lt;T&gt;() + std::declval&lt;T&gt;())&gt;; \n\nstruct A {};                   \n\nint main() { \n  std::cout &lt;&lt; C2&lt;int&gt;; \n  std::cout &lt;&lt; C2&lt;A&gt;;                                                 \n  return 0;                                                           \n}\n</code></pre>\n<p>GCC compiles it <a href=\"http://melpon.org/wandbox/permlink/xQC9StRPbGlHTV48\" rel=\"noreferrer\">fine</a> and prints 10. </p>\n<p>But <em>\u00a714.10.1.2 Predicate constraints [temp.constr.pred]</em> of <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4553.pdf\" rel=\"noreferrer\">N4553</a> says</p>\n<blockquote>\n<p id=\"so_34108878_34108878_0\">A predicate constraint is a constraint that evaluates a constant expression E (5.19). </p>\n</blockquote>\n<p>and then </p>\n<blockquote>\n<p id=\"so_34108878_34108878_1\">After substitution, E shall have type bool. </p>\n</blockquote>\n<p>Since <code>C1&lt;decltype(std::declval&lt;A&gt;() + std::declval&lt;A&gt;())&gt;</code> is a substitution failure, rather than having type bool, does that mean the program should be ill-formed?</p>\n", "Tags": "<c++><c++1z><c++-concepts>", "LastEditDate": "2015-12-05T19:51:38.423", "LastActivityDate": "2015-12-06T00:19:15.533", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "4447365"}});