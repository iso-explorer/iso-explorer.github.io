post_cb({"bq_ids": {"n4140": {"so_14556336_14556421_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 2573}}, "n3337": {"so_14556336_14556421_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 2538}}, "n4659": {"so_14556336_14556421_0": {"length": 10, "quality": 0.6666666666666666, "section_id": 3310}}}, "14556421": {"Id": "14556421", "PostTypeId": "2", "Body": "<p>In C++ (as of n3376) errno is defined as a macro if you include &lt;cerrno&gt; otherwise if you include &lt;errno.h&gt; it is whatever it is defined in C (an int I suspect given the above (but you need to look at the C standard (As per Alok below: \"It is unspecified whether errno is a macro or an identifier\"))).</p>\n<h2>n3376:</h2>\n<h3>19.4 Error numbers [errno]</h3>\n<blockquote>\n<p id=\"so_14556336_14556421_0\">The header &lt;cerrno&gt; is described in Table 43. Its contents are the same as the POSIX header &lt;errno.h&gt;, except that errno shall be defined as a macro.</p>\n</blockquote>\n", "LastEditorUserId": "14065", "LastActivityDate": "2013-01-28T06:27:04.050", "Score": "2", "CreationDate": "2013-01-28T06:15:04.760", "ParentId": "14556336", "CommentCount": "3", "OwnerUserId": "14065", "LastEditDate": "2013-01-28T06:27:04.050"}, "14556425": {"Id": "14556425", "PostTypeId": "2", "Body": "<p>Check out <a href=\"http://www.cplusplus.com/reference/cerrno/errno/\" rel=\"nofollow\">http://www.cplusplus.com/reference/cerrno/errno/</a> .It appears the standard defines errno as a macro for c++.</p>\n<blockquote>\n<p id=\"so_14556336_14556425_0\">This macro expands to a modifiable lvalue of type int, therefore it can be both read and modified by a program.</p>\n<p id=\"so_14556336_14556425_1\">In C++, errno is always declared as a macro, but in C it may also be implemented as an int object with external linkage.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/error/errno\" rel=\"nofollow\">cppreference</a> adds some more details with respect to C++11.</p>\n<blockquote>\n<p id=\"so_14556336_14556425_2\">errno is a preprocessor macro that expands to a static(until C++11) / thread-local(since C++11) modifiable lvalue of type int. </p>\n</blockquote>\n", "LastActivityDate": "2013-01-28T06:15:33.227", "CommentCount": "13", "CreationDate": "2013-01-28T06:15:33.227", "ParentId": "14556336", "Score": "-1", "OwnerUserId": "1520364"}, "14556336": {"ViewCount": "898", "Body": "<p>I have seen this code:</p>\n<pre><code>#if !defined(errno)\nextern int errno;\n#endif\n</code></pre>\n<p>So my question is whether <code>errno</code> is int or macro , because with <code>#if</code> if can check macro defined or not and after we are doing <code>extern int errno;</code></p>\n<p>in errno.h it is defined like this</p>\n<pre><code>#ifdef  _ERRNO_H\n\n/* Declare the `errno' variable, unless it's defined as a macro by\n   bits/errno.h.  This is the case in GNU, where it is a per-thread\n   variable.  This redeclaration using the macro still works, but it\n   will be a function declaration without a prototype and may trigger\n   a -Wstrict-prototypes warning.  */\n#ifndef errno\nextern int errno;\n#endif\n\n\n#endif \n</code></pre>\n", "Title": "errno is int or macro in errno.h", "CreationDate": "2013-01-28T06:07:40.147", "LastActivityDate": "2013-01-28T07:42:23.513", "CommentCount": "2", "LastEditDate": "2013-01-28T07:42:23.513", "PostTypeId": "1", "LastEditorUserId": "1622022", "Id": "14556336", "Score": "3", "OwnerUserId": "1622022", "Tags": "<c++>", "AnswerCount": "2"}});