post_cb({"9936080": {"ParentId": "9936011", "CommentCount": "2", "Body": "<p>Both of your functions are ill formed. The difference between them is that your <code>func1</code> violates the rules about how the <code>return</code> statement can be used while your <code>func2</code> is undefined behavior. The <code>return</code> statement in your <code>func1</code> is illegal and an implementation must diagnose this. The lack of a return statement in your <code>func2</code> is undefined behavior. Most compilers will diagnose this, but none have to.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "9936080", "Score": "2", "CreationDate": "2012-03-30T02:10:02.800", "LastActivityDate": "2012-03-30T02:10:02.800"}, "9936011": {"CommentCount": "4", "CreationDate": "2012-03-30T01:58:28.603", "PostTypeId": "1", "AcceptedAnswerId": "9936084", "LastEditorUserId": "839689", "LastActivityDate": "2017-07-13T06:54:10.537", "LastEditDate": "2017-07-13T06:54:10.537", "ViewCount": "5313", "FavoriteCount": "3", "Title": "If a function returns no value, with a valid return type, is it okay to for the compiler to throw garbage?", "Id": "9936011", "Score": "10", "Body": "<p>If a function has a return type other than <code>void</code>, and the function does not return anything, then I guess the compiler returns a garbage value (possibly seen as an uninitialized value). It happens at compile time, so why shouldn't it throw an error?</p>\n<p>For example,</p>\n<pre><code>int func1() {\n    return; // error\n}\n\nint func2() {\n    // does not return anything\n}\n</code></pre>\n<p>The second <code>func2</code> should throw an error, but it does not. Is there a reason for it? My thinking was such that, it can be seen as an uninitialized value, so if we need to throw an error in the second case, then we need to throw error, if an value is uninitialized, say</p>\n<pre><code>  int i;  // error\n  int i = 6;  // okay\n</code></pre>\n<p>Any thoughts, or is this a duplicate question? I appreciate your help.</p>\n", "Tags": "<c++><c><return-value><initialization><garbage>", "OwnerUserId": "1070338", "AnswerCount": "4"}, "9936090": {"ParentId": "9936011", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C, quoting <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\">N1256</a> 6.9.1p12:</p>\n<blockquote>\n<p id=\"so_9936011_9936090_0\">If the <strong>}</strong> that terminates a function is reached, and the value of the\n  function call is used by the caller, the behavior is undefined.</p>\n</blockquote>\n<p>So it's legal (but a bad idea) for a non-void function to fail to return a value, but if it does so <em>and</em> the caller attempts to use the result, the behavior is undefined.  Note that it doesn't necessarily just return some arbitrary value; as far as the standard is concerned, anything is possible.</p>\n<p>Pre-ANSI C didn't have the <code>void</code> keyword, so the way to write a function that didn't return a value was to leave out the return type, making it implicitly return <code>int</code>.  Requiring a <code>return</code> statement in a value-returning function would have broken old code.  It would also have required extra analysis by the compiler to determine that <em>all</em> code paths hit a <code>return</code> statement; such analysis is reasonable for modern compilers, but might have been an excessive burden when C was first standardized.</p>\n<p>C++ is slightly more strict.  In C++:</p>\n<blockquote>\n<p id=\"so_9936011_9936090_1\">Flowing off the end of a function is equivalent to a <strong>return</strong> with\n  no value; this results in undefined behavior in a value-returning\n  function.</p>\n</blockquote>\n<p>so the behavior is undefined whether the caller attempts to use the (nonexistent) result or not.</p>\n<p>C and C++ compilers certainly <em>can</em> warn about missing <code>return</code> statements, or about control paths that fall off the end of a function without executing a <code>return</code> statement, but the respective standards do not require them to do so.</p>\n", "OwnerUserId": "827263", "LastEditorUserId": "827263", "LastEditDate": "2012-03-30T02:16:59.967", "Id": "9936090", "Score": "9", "CreationDate": "2012-03-30T02:11:06.080", "LastActivityDate": "2012-03-30T02:16:59.967"}, "9936084": {"ParentId": "9936011", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In C++, such code has undefined behaviour:</p>\n<blockquote>\n<p id=\"so_9936011_9936084_0\">[stmt.return]/2 ... Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function. ...</p>\n</blockquote>\n<p>Most compilers will produce a warning for code similar to that in the question.</p>\n<p>The C++ standard does not require this to be a compile time error because in the general case it would be very difficult to correctly determine whether the code actually runs off the end of the function, or if the function exits through an exception (or a longjmp or similar mechanism).</p>\n<p>Consider</p>\n<pre><code>int func3() {\n    func4();\n}\n</code></pre>\n<p>If <code>func4()</code> throws, then this code is totally fine. The compiler might not be able to see the definition of <code>func4()</code> (because of separate compilation), and so cannot know whether it will throw or not.</p>\n<p>Furthermore, even if the compiler can prove that <code>func4()</code> does not throw, it would still have to prove that <code>func3()</code> actually gets called before it could legitimately reject the program. Such analysis requires inspection of the entire program, which is incompatible with separate compilation, and which is not even possible in the general case.</p>\n", "OwnerUserId": "485561", "LastEditorUserId": "1737", "LastEditDate": "2013-04-30T10:36:34.097", "Id": "9936084", "Score": "15", "CreationDate": "2012-03-30T02:10:29.827", "LastActivityDate": "2013-04-30T10:36:34.097"}, "9936077": {"ParentId": "9936011", "CommentCount": "3", "Body": "<p>In C, it is actually legal for a non-void function to finish without returning a value, <em>as long as the calling code doesn't try to use the return value</em>.</p>\n<p>On the other hand a <code>return</code> statement without an expression is not allowed to appear in a non-void function.</p>\n<p>The relevant parts of the C99 standard are \u00a76.9.1 for the first case:</p>\n<blockquote>\n<p id=\"so_9936011_9936077_0\">If the <code>}</code> that terminates a function is reached, and the value of the\n  function call is used by the caller, the behavior is undefined.</p>\n</blockquote>\n<p>and \u00a76.8.6.4 for the second case:</p>\n<blockquote>\n<p id=\"so_9936011_9936077_1\">A <code>return</code> statement without an expression shall only appear in a\n  function whose return type is <code>void</code>.</p>\n</blockquote>\n", "OwnerUserId": "134633", "PostTypeId": "2", "Id": "9936077", "Score": "4", "CreationDate": "2012-03-30T02:09:20.640", "LastActivityDate": "2012-03-30T02:09:20.640"}, "bq_ids": {"n4140": {"so_9936011_9936090_0": {"section_id": 7182, "quality": 0.6666666666666666, "length": 6}, "so_9936011_9936090_1": {"section_id": 3913, "quality": 1.0, "length": 12}, "so_9936011_9936084_0": {"section_id": 3913, "quality": 0.9230769230769231, "length": 12}, "so_9936011_9936077_1": {"section_id": 3913, "quality": 0.7777777777777778, "length": 7}, "so_9936011_9936077_0": {"section_id": 7182, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_9936011_9936090_0": {"section_id": 6926, "quality": 0.6666666666666666, "length": 6}, "so_9936011_9936090_1": {"section_id": 3773, "quality": 1.0, "length": 12}, "so_9936011_9936084_0": {"section_id": 3773, "quality": 0.9230769230769231, "length": 12}, "so_9936011_9936077_1": {"section_id": 3773, "quality": 0.7777777777777778, "length": 7}, "so_9936011_9936077_0": {"section_id": 6926, "quality": 0.6666666666666666, "length": 6}}, "n4659": {"so_9936011_9936090_0": {"section_id": 3923, "quality": 0.6666666666666666, "length": 6}, "so_9936011_9936090_1": {"section_id": 4799, "quality": 0.75, "length": 9}, "so_9936011_9936084_0": {"section_id": 4799, "quality": 0.6923076923076923, "length": 9}, "so_9936011_9936077_1": {"section_id": 4799, "quality": 0.7777777777777778, "length": 7}, "so_9936011_9936077_0": {"section_id": 3923, "quality": 0.6666666666666666, "length": 6}}}});