post_cb({"40978274": {"ParentId": "40978251", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-12-05T15:59:05.850", "Score": "4", "LastEditorUserId": "3612433", "LastEditDate": "2016-12-05T16:03:07.350", "Id": "40978274", "OwnerUserId": "3612433", "Body": "<p>In C++ (and many other languages) there is no difference as any non zero value is \"truey\" and zero itself is \"falsey\".</p>\n", "LastActivityDate": "2016-12-05T16:03:07.350"}, "40978251": {"CommentCount": "3", "ViewCount": "137", "PostTypeId": "1", "LastEditorUserId": "6178493", "CreationDate": "2016-12-05T15:57:47.863", "LastActivityDate": "2016-12-05T16:28:25.470", "Title": "Is there a difference between if (intVar) and if (intVar != 0)?", "AcceptedAnswerId": "40978340", "LastEditDate": "2016-12-05T16:10:01.537", "Id": "40978251", "Score": "1", "Body": "<p>I'm interested in knowing if there is a difference between these two if blocks in c ++.\nIt would be very useful if with the answer you can cite some reference.</p>\n<pre><code>if ( intVar!= 0 )\n{\n  //Do something\n}\n</code></pre>\n<p>and</p>\n<pre><code>if (intVar)\n{\n  //Do samething\n}\n</code></pre>\n<p>Where <code>intVar</code>, could be any type of integer variable with any value.</p>\n<p>[EDIT] On the subject \"duplicated question\". I did not find any question about this in which the if statement is involved.</p>\n", "Tags": "<c++>", "OwnerUserId": "6178493", "AnswerCount": "3"}, "40978340": {"ParentId": "40978251", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-12-05T16:03:02.480", "Score": "6", "LastEditorUserId": "6255513", "LastEditDate": "2016-12-05T16:28:25.470", "Id": "40978340", "OwnerUserId": "6255513", "Body": "<p>The type of the expression required in the <code>if</code> condition is boolean. The expression <code>intVar!=0</code> is already boolean, the expression <code>intVar</code> has type <code>int</code> and requires an implicit conversion to boolean. As it happens the conversion rules for <code>int</code> to <code>bool</code> are precisely that anything non-zero maps to <code>true</code> and zero maps to <code>false</code>, so the resultant expression evaluation is exactly the same.</p>\n<p>Sometimes writing the full <code>intVar!=0</code> can add clarity (for example, to make it clear you're not evaluating a pointer type for <code>nullptr</code> but rather an integral type for zero), whereas other times it doesn't - it really depends on the context.</p>\n<p>Regarding requested references, I will use the <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4606.pdf\" rel=\"nofollow noreferrer\">standard</a>. The section relating to conversions [conv.bool]:</p>\n<blockquote>\n<p id=\"so_40978251_40978340_0\"><strong>4.14 Boolean conversions</strong> </p>\n<p id=\"so_40978251_40978340_1\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a\n  prvalue of type bool. A zero value, null pointer value, or null member\n  pointer value is converted to false; any other value is converted to\n  true</p>\n</blockquote>\n", "LastActivityDate": "2016-12-05T16:28:25.470"}, "40978649": {"ParentId": "40978251", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-12-05T16:18:35.080", "Score": "5", "LastEditorUserId": "5470596", "LastEditDate": "2016-12-05T16:24:00.427", "Id": "40978649", "OwnerUserId": "5470596", "Body": "<p>Additionally to other's answers (and for fun), I'd like to say that for an <code>intVar</code> of a user-defined type defining an implicit conversion operator to <code>int</code> and another to <code>bool</code>, the two expression could have a different behaviour:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Celcius\n{\n    int _value;\npublic:\n    Celcius(int value) : _value(value) {}\n    operator int() { return _value; }\n    operator bool() { return _value &gt; -273; }\n};\n\nint main()\n{\n    Celcius waterBoilingPoint(0);\n\n    if (waterBoilingPoint != 0) { // false\n        std::cout &lt;&lt; \"This is not Standard Conditions for Temperature and Pressure!\\n\";\n    }\n\n    if (waterBoilingPoint) { // true\n        std::cout &lt;&lt; \"This is not 0K (pun intended).\\n\";\n    }\n}\n</code></pre>\n<p>But this is an edge case I wouldn't jump into.</p>\n", "LastActivityDate": "2016-12-05T16:24:00.427"}, "bq_ids": {"n4140": {"so_40978251_40978340_1": {"section_id": 44, "quality": 1.0, "length": 28}}, "n3337": {"so_40978251_40978340_1": {"section_id": 41, "quality": 1.0, "length": 28}}, "n4659": {"so_40978251_40978340_1": {"section_id": 45, "quality": 1.0, "length": 28}}}});