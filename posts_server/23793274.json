post_cb({"bq_ids": {"n4140": {"so_23793274_23793369_0": {"length": 15, "quality": 0.9375, "section_id": 87}}, "n3337": {"so_23793274_23793369_0": {"length": 15, "quality": 0.9375, "section_id": 82}}}, "23793274": {"ViewCount": "155", "Body": "<p>In my program, I am using a home-brewed <code>FFT</code>. To try to improve performance, I am trying to calculate the complex factors at compile time using templates. The part of the code that produces an error is</p>\n<pre><code>typedef std::complex&lt;double&gt; Complex;\ntypedef std::valarray&lt;Complex&gt; CArray;\n\nvoid fft(CArray&amp; x){\n    const size_t N = x.size();\n    if(N==1){return;}\n\n    CArray even = x[std::slice(0,N/2,2)];\n    CArray odd = x[std::slice(1,N/2,2)];\n\n    fft(even);\n    fft(odd);\n\n    for(size_t k=0; k&lt;N/2; k++){\n        Complex t = Twiddle&lt;N,k&gt;::value() * odd[k];\n        x[k] = even[k] + t;\n        x[k+N/2] = even[k] - t;\n    }\n}\n</code></pre>\n<p>where <code>Twiddle&lt; N,k&gt;</code> is </p>\n<pre><code>template &lt;size_t N, size_t k, typename T=std::complex&lt;double&gt; &gt;\nstruct Twiddle;\n\ntemplate &lt;size_t N, size_t k&gt;\nstruct Twiddle&lt;N,k,std::complex&lt;double&gt; &gt;{\n    static std::complex&lt;double&gt; value(){\n        return std::complex&lt;double&gt;(Cos&lt;N,k&gt;::value(),Sin&lt;N,k&gt;::value());\n    }\n};\n</code></pre>\n<p><code>Cos</code> and <code>Sin</code> are templated in similar ways, and they use recursion to get their values. They work well. However, when I try to compile the code, the <code>FFT</code> section produces errors. The exact wording of the errors is:  </p>\n<blockquote>\n<p id=\"so_23793274_23793274_0\">'N' cannot appear in a constant-expression<br>\n     'k' cannot appear in a constant-expression<br>\n     template argument 1 is invalid<br>\n     template argument 2 is invalid </br></br></br></p>\n</blockquote>\n<p>Any help would be appreciated.</p>\n", "Title": "Template argument invalid; cannot appear in constant expression", "CreationDate": "2014-05-21T20:35:37.150", "LastActivityDate": "2014-05-21T20:41:07.193", "CommentCount": "2", "LastEditDate": "2014-05-21T20:40:21.840", "PostTypeId": "1", "LastEditorUserId": "1324", "Id": "23793274", "Score": "0", "OwnerUserId": "3662349", "Tags": "<c++><templates>", "AnswerCount": "1"}, "23793369": {"PostTypeId": "2", "Body": "<p>According to the C++ Standard (section 14.3.2 Template non-type arguments)</p>\n<blockquote>\n<p id=\"so_23793274_23793369_0\">1 A template-argument for a non-type, non-template template-parameter\n  shall be one of: \u2014 for a non-type template-parameter of integral or\n  enumeration type, a converted <strong>constant expression</strong> (5.19) of the\n  type of the template-parameter;</p>\n</blockquote>\n", "LastActivityDate": "2014-05-21T20:41:07.193", "Id": "23793369", "CommentCount": "2", "CreationDate": "2014-05-21T20:41:07.193", "ParentId": "23793274", "Score": "0", "OwnerUserId": "2877241"}});