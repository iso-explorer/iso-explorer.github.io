post_cb({"bq_ids": {"n4140": {"so_47957584_47957601_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6536}, "so_47957584_47957601_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6536}}, "n3337": {"so_47957584_47957601_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6291}, "so_47957584_47957601_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6291}}, "n4659": {"so_47957584_47957601_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 8018}, "so_47957584_47957601_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 8018}}}, "47957584": {"ViewCount": "93", "Body": "<p>The following program is from a google tutorial and it's pretty straightforward, except when I input a decimal number.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n  int input_var = 0;\n  do {\n    cout &lt;&lt; \"Enter a number (-1 = quit): \";\n\n    if (!(cin &gt;&gt; input_var)) {\n      cout &lt;&lt; \"You entered a non-numeric. Exiting...\" &lt;&lt; endl;\n      break;\n    }\n\n    if (input_var != -1) {\n      cout &lt;&lt; \"You entered \" &lt;&lt; input_var &lt;&lt; endl;\n    }\n\n  } while (input_var != -1);\n\n  cout &lt;&lt; \"All done.\" &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>if the input is an int (not -1) it outputs:</p>\n<pre><code>Enter a number (-1 = quit): 5\nYou entered 5\nEnter a number (-1 = quit):\n</code></pre>\n<p>if it is a non-numeric:</p>\n<pre><code>Enter a number (-1 = quit): p\nYou entered a non-numeric. Exiting...\nAll done.\n</code></pre>\n<p>and that's exactly how it is supposed to work, but if it is a decimal number:</p>\n<pre><code>Enter a number (-1 = quit): 5.9\nYou entered 5\nEnter a number (-1 = quit): You entered a non-numeric. Exiting...\nAll done.\n</code></pre>\n<p>I know how c++ behaves if you assign a <code>double</code> or a <code>float</code> to an <code>int</code> and in this case it outputs the truncated decimal number the first time and <code>cin</code> does not become <code>false</code> but the second iteration it does not even accept an input.</p>\n<p>I would understand if it didn't accept it from the very beginning or if it just truncated the decimal and behaved the same as if it had had an <code>int</code> as input but why does it behave differently the first loop and differently the second loop?</p>\n", "AcceptedAnswerId": "47957601", "Title": "Why does if(!(cin >> int)) accept a decimal number in the first iteration but not the other ones?", "CreationDate": "2017-12-24T02:18:06.293", "Id": "47957584", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-12-24T02:42:44.390", "Score": "1", "OwnerUserId": "5146037", "Tags": "<c++><if-statement><int><decimal><cin>", "AnswerCount": "2"}, "47957650": {"Id": "47957650", "PostTypeId": "2", "Body": "<pre><code>cin &gt;&gt; input_var;\n</code></pre>\n<p>This is an operation of the operator <code>&gt;&gt;</code> and this operator return cin. However, when this cin is passed to a conditional statement such as <code>if</code> or <code>while</code> a special function of the <code>istreat</code> is called to evaluate a <code>true</code> or <code>false</code> value from the <code>cin</code>. This function check whether <code>cin</code> encounter and <code>EOR</code> or it receive a value what it suppose to receive. Remember <code>&gt;&gt;</code> is an over loaded operator and in your case the operator is called for an integer value. But, when you input a non integer value (<code>double</code> in your case), it detects and results a false. </p>\n<p>Though, the result cannot be produce in the opposite way, that is when your <code>input_var</code> is double in type and you input an integer, <code>cin</code> evaluate it as double, however, <code>cin</code> do not truncate the numbers after decimal for <code>int</code> variable.   </p>\n", "LastActivityDate": "2017-12-24T02:36:56.917", "Score": "0", "CreationDate": "2017-12-24T02:36:56.917", "ParentId": "47957584", "CommentCount": "0", "OwnerUserId": "1004589"}, "47957601": {"Id": "47957601", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47957584_47957601_0\">I know how C++ behaves if you assign a <code>double</code> or a <code>float</code> to an <code>int</code> and in this case it outputs the truncated decimal number.</p>\n</blockquote>\n<p>That is not actually what's happening here. There is no assigning of a <code>float</code> or <code>double</code> value to your <code>int</code>. When you attempt to <em>input</em> an integer of <code>5.9</code>, it successfully gets the <code>5</code> bit and stops there, leaving <code>.9</code> in the input stream. At no stage have you extracted the full <code>5.9</code> from the input stream and truncated it to an integer for putting into <code>input_var</code>.</p>\n<p>Then, on the <em>next</em> iteration, it finds <code>.9</code>, figures out that it's not a valid integer, and acts accordingly, the same as when you entered <code>p</code>.</p>\n<p>This is covered in C++14, section <code>22.4.2.1 num_get()</code> in excruciating detail but the bottom line is in stage 3 of that description:</p>\n<blockquote>\n<p id=\"so_47957584_47957601_1\">The sequence of chars accumulated in stage 2 (the field) is converted to a numeric value by the rules of one of the functions declared in the header <code>&lt;cstdlib&gt;</code>:</p>\n<p id=\"so_47957584_47957601_2\">For a signed integer value, the function <code>strtoll</code>.</p>\n</blockquote>\n<p>I won't go into <em>too</em> much detail on the way <code>strtoll</code> works since it would require stepping through quite a few sections of ISO C99 as well. Suffice to say that it ends up at section <code>6.4.4 Constants</code> which states the allowable characters to have in an integer, and where the character <code>.</code> makes no appearance at all.</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2017-12-24T02:42:44.390", "Score": "4", "CreationDate": "2017-12-24T02:23:07.797", "ParentId": "47957584", "CommentCount": "0", "OwnerUserId": "14860", "LastEditDate": "2017-12-24T02:42:44.390"}});