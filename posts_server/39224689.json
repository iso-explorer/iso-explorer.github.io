post_cb({"39224809": {"Id": "39224809", "PostTypeId": "2", "Body": "<p>Yes, the name of parameters used in declaration and definition doesn't have to be the same. Instead, the type of parameters (and order), should be the same. In fact, parameter names are not necessary especially in function declaration, even in definition they also could be omitted if you don't use them.</p>\n<p><a href=\"http://eel.is/c++draft/dcl.fct#13\" rel=\"nofollow noreferrer\">$8.3.5/13 Functions\n[dcl.fct]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39224689_39224809_0\">An identifier can optionally be provided as a parameter name; if present in a function definition (<a href=\"http://eel.is/c++draft/dcl.fct.def\" rel=\"nofollow noreferrer\">[dcl.fct.def]</a>), it names a parameter. [ Note: In particular, parameter names are also optional in function definitions and <strong>names used for a parameter in different declarations and the definition of a function need not be the same</strong>. If a parameter name is present in a function declaration that is not a definition, it cannot be used outside of its function declarator because that is the extent of its potential scope ([<a href=\"http://eel.is/c++draft/basic.scope.proto\" rel=\"nofollow noreferrer\">basic.scope.proto</a>]).  \u2014 end note ]</p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/dcl.fct#8\" rel=\"nofollow noreferrer\">$8.3.5/8 Functions\n[dcl.fct]</a>:</p>\n<blockquote>\n<p id=\"so_39224689_39224809_1\">The return type, <strong>the parameter-type-list</strong>, the <a href=\"http://eel.is/c++draft/dcl.decl#ref-qualifier\" rel=\"nofollow noreferrer\"><em>ref-qualifier</em></a>, the <a href=\"http://eel.is/c++draft/dcl.decl#cv-qualifier-seq\" rel=\"nofollow noreferrer\"><em>cv-qualifier-seq</em></a>, and whether the function has a non-throwing <a href=\"http://eel.is/c++draft/except.spec#exception-specification\" rel=\"nofollow noreferrer\"><em>exception-specification</em></a>, but not the default arguments (<a href=\"http://eel.is/c++draft/dcl.fct.default\" rel=\"nofollow noreferrer\">[dcl.fct.default]</a>) or the exception specification (<a href=\"http://eel.is/c++draft/except.spec\" rel=\"nofollow noreferrer\">[except.spec]</a>), are part of the function type.</p>\n</blockquote>\n<p>Note that the parameter-type-list, not including their names, is part of the function type.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-08-30T14:06:19.830", "Score": "9", "CreationDate": "2016-08-30T10:19:14.527", "ParentId": "39224689", "CommentCount": "0", "LastEditDate": "2016-08-30T14:06:19.830", "OwnerUserId": "3309790"}, "bq_ids": {"n4140": {"so_39224689_39224809_1": {"length": 11, "quality": 0.55, "section_id": 3242}, "so_39224689_39224809_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 3247}}, "n3337": {"so_39224689_39224809_1": {"length": 11, "quality": 0.55, "section_id": 3115}, "so_39224689_39224809_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 3120}}, "n4659": {"so_39224689_39224809_1": {"length": 11, "quality": 0.55, "section_id": 4000}, "so_39224689_39224809_0": {"length": 42, "quality": 0.8936170212765957, "section_id": 4005}}}, "39224689": {"ViewCount": "181", "Body": "<p>I found a program which uses different parameters in function prototyping and declaring, so I made a basic program.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid add(int a, int b);\n\nint main()\n{\n     add(3,4);\n}\n\nvoid add(int c, int d){\n    int e = c + d;\n    cout &lt;&lt; e &lt;&lt; endl;\n}\n</code></pre>\n<p>I run this program and it works. Does that mean it isn't necessary to same parameter name in both \"function prototyping\" and in \"function declaring\"?</p>\n", "Title": "Different parameter name in function prototype", "CreationDate": "2016-08-30T10:13:27.520", "LastActivityDate": "2016-08-30T14:10:07.117", "CommentCount": "1", "LastEditDate": "2016-08-30T14:10:07.117", "PostTypeId": "1", "LastEditorUserId": "3309790", "Id": "39224689", "Score": "5", "OwnerUserId": "6560197", "Tags": "<c++><function><parameters><names>", "AnswerCount": "1"}});