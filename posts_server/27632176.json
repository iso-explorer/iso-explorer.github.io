post_cb({"27632572": {"Id": "27632572", "PostTypeId": "2", "Body": "<p>Your range is incorrect</p>\n<blockquote>\n<p id=\"so_27632176_27632572_0\">bmin is zero if emin is non-negative and <strong>\u2212(bmax + K)</strong> otherwise.</p>\n</blockquote>\n<p>bmax = 3 (i.e. 2<sup>2</sup> -1), therefore bmin = -(3 + 0) or -3</p>\n<blockquote>\n<p id=\"so_27632176_27632572_1\">What does that mean? What should that interval tell us about?</p>\n</blockquote>\n<p>As footnote 96 informs you:</p>\n<blockquote>\n<p id=\"so_27632176_27632572_2\">96) This set of values is used to define promotion and conversion semantics for the enumeration type. It does not preclude an expression of enumeration type from having a value that falls outside this range.</p>\n</blockquote>\n<p>Since the underlying type of enums is always integral, the range also implicitly limits the number of usable distinct values for any given <code>enum</code> (in this case 7, but see below for what happens when values are outside this range). </p>\n<p>This formula results in the smallest possible type that can hold every value being selected as the underlying type. It also allows values of an <code>enum</code> with a range shorter than its underlying type to be packed into bitfields.</p>\n<blockquote>\n<p id=\"so_27632176_27632572_3\">We can't assign a value from the interval to a variable of the enumeration type</p>\n</blockquote>\n<p>Yes you can</p>\n<pre><code>A a = static_cast&lt;A&gt;(2);\n</code></pre>\n<p>If you cast an integer outside the enum's range however you will end up with an unspecified (i.e. worthless, but valid) value</p>\n<p>[expr.static.cast]</p>\n<blockquote>\n<p id=\"so_27632176_27632572_4\">10 A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting value is unspecified (and might not be in that range).[...]</p>\n</blockquote>\n<p>Defect <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1766\" rel=\"nofollow\">1766</a> has strengthened this to undefined behaviour in the next version of the standard</p>\n<blockquote>\n<p id=\"so_27632176_27632572_5\">10 A value of integral or enumeration type can be explicitly converted to a complete enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the behavior is undefined. [...]</p>\n</blockquote>\n<p>Either way you almost always shouldn't be casting integers to enums in the first place.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-12-24T08:34:02.383", "Score": "1", "CreationDate": "2014-12-24T06:32:06.347", "ParentId": "27632176", "CommentCount": "0", "OwnerUserId": "657267", "LastEditDate": "2014-12-24T08:34:02.383"}, "bq_ids": {"n4140": {"so_27632176_27632572_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 6036}, "so_27632176_27632572_5": {"length": 18, "quality": 0.8181818181818182, "section_id": 6036}, "so_27632176_27632572_2": {"length": 18, "quality": 0.9473684210526315, "section_id": 5467}, "so_27632176_27632176_0": {"length": 42, "quality": 0.7924528301886793, "section_id": 5467}}, "n3337": {"so_27632176_27632572_4": {"length": 23, "quality": 0.9583333333333334, "section_id": 5804}, "so_27632176_27632572_5": {"length": 18, "quality": 0.8181818181818182, "section_id": 5804}, "so_27632176_27632572_2": {"length": 18, "quality": 0.9473684210526315, "section_id": 5253}, "so_27632176_27632176_0": {"length": 42, "quality": 0.7924528301886793, "section_id": 5253}}, "n4659": {"so_27632176_27632572_4": {"length": 20, "quality": 0.8333333333333334, "section_id": 7535}, "so_27632176_27632572_5": {"length": 21, "quality": 0.9545454545454546, "section_id": 7535}, "so_27632176_27632572_2": {"length": 18, "quality": 0.9473684210526315, "section_id": 6901}, "so_27632176_27632176_0": {"length": 42, "quality": 0.7924528301886793, "section_id": 6901}}}, "27632176": {"ViewCount": "97", "Body": "<p>The following piece of text is from the <code>C++14 N4296 working draft 7.2/8 [dcl.enum]</code>:</p>\n<blockquote>\n<p id=\"so_27632176_27632176_0\">For an enumeration whose underlying type is fixed, the values of the\n  enumeration are the values of the underlying type. Otherwise, for an\n  enumeration where <code>emin</code> is the smallest enumerator and <code>emax</code> is the\n  largest, the values of the enumeration are the values in the range\n  bmin to bmax, defined as follows: Let <code>K</code> be 1 for a two\u2019s complement\n  representation and 0 for a one\u2019s complement or sign-magnitude\n  representation. bmax is the smallest value greater than or equal to\n  <code>max(|emin| \u2212 K, |emax|)</code> and equal to <code>2M \u2212 1</code>, where M is a non-negative\n  integer. <code>bmin</code> is zero if <code>emin</code> is non-negative and <code>\u2212(bmax + K)</code>\n  otherwise.</p>\n</blockquote>\n<p>Let's consider how it works by example. The enum declared below has non-fixed underlying type:</p>\n<pre><code>enum E { x = -2, y = 2 }\n</code></pre>\n<p>Assume that implementation defines <code>signed magnitude</code> representation, therfore <code>K = 0</code>. Now <code>emin = -2, emax = 2</code> and <code>bmax = 2^2 -1 = 3</code>, <code>bmin = 2</code>. Therefore values of the enumeration are from range from 2 to 3. What does that mean? What should that interval tell us about? We can't assign a value from the interval to a variable of the enumeration type. Watch:</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum A { x = -2, y = 2 };\n\nA a = 2; // cannot initialize a variable of type 'A' with an rvalue of type 'int'\nA b = 3; // cannot initialize a variable of type 'A' with an rvalue of type 'int'\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/07bf944539486224\" rel=\"nofollow\">DEMO</a></strong></p>\n", "AcceptedAnswerId": "27632572", "Title": "Motivation of the enumeration range definition with non-fixed type", "CreationDate": "2014-12-24T05:54:16.400", "Id": "27632176", "CommentCount": "0", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-12-24T08:34:02.383", "Score": "1", "Tags": "<c++><enums>", "AnswerCount": "1"}});