post_cb({"bq_ids": {"n4140": {"so_1448596_1448673_0": {"length": 55, "quality": 0.8208955223880597, "section_id": 665}}, "n3337": {"so_1448596_1448673_0": {"length": 58, "quality": 0.8656716417910447, "section_id": 655}}, "n4659": {"so_1448596_1448673_0": {"length": 55, "quality": 0.8208955223880597, "section_id": 693}}}, "1448673": {"Id": "1448673", "PostTypeId": "2", "Body": "<p>The following operators (delimitted by space) can be overloaded as non-member functions:</p>\n<pre><code>new delete new[] delete[] + - * / % \u02c6 &amp; | \u02dc ! &lt; &gt; += -= *= /= %= \u02c6=  \n&amp;= |= &lt;&lt; &gt;&gt; &gt;&gt;= &lt;&lt;= == != &lt;= &gt;= &amp;&amp; || ++ -- , -&gt;* \n</code></pre>\n<p>The following have to be non-static member functions: </p>\n<pre><code>-&gt; () [] = \n</code></pre>\n<p>The following can not be overloaded:</p>\n<pre><code>. .* :: ?: # ##\n</code></pre>\n<p>conversion operators also have to be member functions.</p>\n<p>And just because it has a '=' in it does not mean it cannot be overloaded as a non-member operator.  The following is well-formed:</p>\n<pre><code>struct A { };\nA operator +=(A,A) { return A(); }\nA a = A()+=A();\n</code></pre>\n<p>And the prefix and postfix increment and decrement operators can indeed be defined as non-members:</p>\n<blockquote>\n<p id=\"so_1448596_1448673_0\">13.5.7 The user-defined function called operator++ implements the prefix and postfix ++ operator. If this function is a member function with no parameters, or a non-member function with one parameter of class or enumeration type, it defines the prefix increment operator ++ for objects of that type. If the function is a member function with one parameter (which shall be of type int) or a non-member function with two parameters (the second of which shall be of type int), it defines the postfix increment operator ++ for objects of that type. When the postfix increment is called as a result of using the ++ operator, the int \n  argument will have value zero.<br>\n  The prefix and postfix decrement operators -- are handled analogously</br></p>\n</blockquote>\n<p>Clause 13.5 in the Standard covers this.</p>\n<p>Hope this helps.</p>\n", "LastEditorUserId": "51103", "LastActivityDate": "2009-09-19T14:55:32.657", "Score": "4", "CreationDate": "2009-09-19T14:39:26.887", "ParentId": "1448596", "CommentCount": "2", "OwnerUserId": "51103", "LastEditDate": "2009-09-19T14:55:32.657"}, "1448596": {"ViewCount": "417", "Body": "<p>Besides 'new', 'delete', '&lt;&lt;' &amp; '&gt;&gt;' operators, what other operators can be overloaded in C++ outside of a class context?</p>\n", "AcceptedAnswerId": "1448673", "Title": "operator overloading in C++", "CreationDate": "2009-09-19T13:57:43.633", "Id": "1448596", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2009-09-19T14:55:32.657", "Score": "2", "OwnerUserId": "179189", "Tags": "<c++><operator-overloading>", "AnswerCount": "2"}, "1448608": {"Id": "1448608", "PostTypeId": "2", "Body": "<p>Operators that can be overloaded (comma used as delimiter):</p>\n<p><code>+, -, *, /, %, ^, &amp;, |, ~, !, =, &lt;, &gt;, +=, -=, *=, /=, %=, ^=, &amp;=, |=,  &gt;&gt;=, &lt;&lt;=, \n!=, &lt;=, &gt;=, &amp;&amp;, ||, ++, --, -&gt;* , (i.e., comma operator), -&gt;, [], (), new[], delete[]</code></p>\n<p>Operators that can not be overloaded:\n<code>., .*, ::, ?:</code></p>\n<p>Operators where overloading function must be declared as a class method:\n<code>(), [], -&gt;, any assignment operator</code>\n(as the commenters noted)</p>\n", "LastEditorUserId": "108030", "LastActivityDate": "2009-09-19T14:13:40.870", "Score": "4", "CreationDate": "2009-09-19T14:04:36.910", "ParentId": "1448596", "CommentCount": "8", "OwnerUserId": "108030", "LastEditDate": "2009-09-19T14:13:40.870"}});