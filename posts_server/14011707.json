post_cb({"14011707": {"CommentCount": "11", "AcceptedAnswerId": "14011722", "PostTypeId": "1", "ClosedDate": "2012-12-26T01:45:40.537", "LastEditorUserId": "-1", "CreationDate": "2012-12-23T14:22:09.643", "LastActivityDate": "2012-12-23T14:45:26.230", "LastEditDate": "2017-05-23T12:18:46.387", "ViewCount": "185", "FavoriteCount": "1", "Title": "Why it works? C++ memory management", "Id": "14011707", "Score": "5", "Body": "<blockquote>\n<p id=\"so_14011707_14011707_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1006214/why-the-below-piece-of-code-is-not-crashing-though-i-have-deleted-the-object\">Why the below piece of code is not crashing , though i have deleted the object?</a> </br></p>\n</blockquote>\n<p>Today i found out that i know nothing about C++ memory management. Please take a look at this piece of code:</p>\n<pre><code>class A\n{\n public:\n     A(){std::cout &lt;&lt; \"constructor called\" &lt;&lt; this &lt;&lt; std::endl;}\n    ~A(){std::cout &lt;&lt; \"destructor called\" &lt;&lt; this &lt;&lt; std::endl;}\n      void test (){std::cout &lt;&lt; \"test\" &lt;&lt; this &lt;&lt; std::endl;}\n };\n\n int main(int argc, char *argv[])\n{\nQCoreApplication a(argc, argv);\n\nA *aa = new A();\n\ndelete aa;\naa-&gt;test();\naa-&gt;test();\naa-&gt;test();\nstd::cout &lt;&lt; \"still works\\n\";\nreturn a.exec();\n}\n</code></pre>\n<p>Why doesn't it crash? Why it still continues executing despite destructor was called? When i call <code>test</code> method i deal with memory that doesn't belong to the app any more. </p>\n<p>What is more surprising is it still works even if I insert <code>aa = NULL;</code> right after <code>delete aa;</code>. <code>test</code> method gets called all right. I need to confess that i'm totally confused. What is the purpose of destructors and assigning NULL if it has no effect?  </p>\n", "Tags": "<c++><memory-management>", "OwnerUserId": "994107", "AnswerCount": "3"}, "14011722": {"ParentId": "14011707", "PostTypeId": "2", "CommentCount": "2", "Body": "<h2>Why this works?</h2>\n<p>There are two ways to answer your question:</p>\n<h2>Technical Answer:</h2>\n<p>Your code has an <strong>Undefined Behavior</strong>.<br>\nIt dereferences a <code>NULL</code> or a <code>delete</code>ed pointer. As per the C++ standard both invoke Undefined Behavior. It works or not is pointless.<br>\nUndefined behavior means that any behavior is possible and it may or may not crash but it means that your program cannot be expected to give any well defined output. It simply means that any behavior is possible and it may not be consistent or well defined.</br></br></p>\n<h2>Practical Answer:</h2>\n<p>It doesn't crash because the compiler does not actually derefence <code>this</code> while calling member function. Unless the function is an <code>virtual</code> function the compiler converts the member function call to a usual function call by passing <code>this</code> as the first parameter to the function. It can do so because the compiler can exactly determine which function to call at compile time itself. So practically, calling the member function through deleted or <code>NULL</code> pointer does not dereference the <code>this</code>(<em>which is invalid if its <code>NULL</code> or <code>delete</code>ed</em>). Further, the <code>this</code> is dereferenced only if any member is accessed inside the function body.<br>\nIn your case you never access any member inside the function body and hence it does not crash.<br>\nAdd a member and dereference it inside your function and it should definitely crash.</br></br></p>\n<p>Regardless, of what is said in practical answer technical answer is above and over everything Since standard says that.</p>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2012-12-23T14:45:26.230", "Id": "14011722", "Score": "10", "CreationDate": "2012-12-23T14:24:13.773", "LastActivityDate": "2012-12-23T14:45:26.230"}, "14011726": {"ParentId": "14011707", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>That is just undefined behavior, which includes the possibility of a big crash!</p>\n<p>Not much more to say, but a quote from the standard may help on the meaning of <strong>undefined behavior</strong>:</p>\n<h3> 1.3.24 undefined behavior</h3>\n<blockquote>\n<p id=\"so_14011707_14011726_0\">behavior for which this International Standard imposes no requirements [ Note: Undefined\n  behavior may be expected when this International Standard omits any\n  explicit definition of behavior or when a program uses an erroneous\n  construct or erroneous data. Permissible undefined behavior ranges\n  from ignoring the situation completely with unpredictable results, to\n  behaving during translation or program execution in a documented\n  manner characteristic of the environment (with or without the issuance\n  of a diagnostic message), to terminating a translation or execution\n  (with the issuance of a diagnostic message). Many erroneous program\n  constructs do not engender undefined behavior; they are required to be\n  diagnosed. \u2014 end note ]</p>\n</blockquote>\n", "OwnerUserId": "528313", "LastEditorUserId": "528313", "LastEditDate": "2012-12-23T14:40:33.983", "Id": "14011726", "Score": "2", "CreationDate": "2012-12-23T14:24:23.057", "LastActivityDate": "2012-12-23T14:40:33.983"}, "bq_ids": {"n4140": {"so_14011707_14011726_0": {"section_id": 5768, "quality": 0.9166666666666666, "length": 55}}, "n3337": {"so_14011707_14011726_0": {"section_id": 5541, "quality": 0.9166666666666666, "length": 55}}, "n4659": {"so_14011707_14011726_0": {"section_id": 7225, "quality": 0.9166666666666666, "length": 55}}}, "14011719": {"ParentId": "14011707", "PostTypeId": "2", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_14011707_14011719_0\">Why doesn't it crash?</p>\n</blockquote>\n<p>You are invoking <strong>undefined behaviour</strong> by dereferencing a deleted pointer. Undefined behaviour means your program can do <em>anything</em>. Anything includes not crashing. </p>\n<p>If undefined behaviour always meant that your program immediately crashed then it would be easy to debug and fix. One of the nastiest problems with undefined behaviour is that the program can appear to work correctly when you test it and then when you ship it to your customers they get unusual behaviour which you are unable to reproduce. You should always avoid invoking undefined behaviour even if things seem to work on your machine.</p>\n", "OwnerUserId": "61974", "LastEditorUserId": "61974", "LastEditDate": "2012-12-23T14:29:18.367", "Id": "14011719", "Score": "3", "CreationDate": "2012-12-23T14:23:50.567", "LastActivityDate": "2012-12-23T14:29:18.367"}});