post_cb({"bq_ids": {"n4140": {"so_7255281_7256320_1": {"length": 10, "quality": 0.5882352941176471, "section_id": 224}, "so_7255281_7256320_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 224}, "so_7255281_7256320_2": {"length": 12, "quality": 0.6666666666666666, "section_id": 224}, "so_7255281_7256320_4": {"length": 37, "quality": 0.9487179487179487, "section_id": 224}}, "n3337": {"so_7255281_7256320_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 217}, "so_7255281_7256320_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 217}, "so_7255281_7256320_2": {"length": 15, "quality": 0.8333333333333334, "section_id": 217}, "so_7255281_7256320_4": {"length": 39, "quality": 1.0, "section_id": 217}}, "n4659": {"so_7255281_7256320_1": {"length": 10, "quality": 0.5882352941176471, "section_id": 232}, "so_7255281_7256320_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 232}, "so_7255281_7256320_2": {"length": 12, "quality": 0.6666666666666666, "section_id": 232}, "so_7255281_7256320_4": {"length": 37, "quality": 0.9487179487179487, "section_id": 232}}}, "7256320": {"Id": "7256320", "PostTypeId": "2", "Body": "<p>GCC (and Clang) are right. MSVC would get it wrong because it does not implement the look-up correctly.</p>\n<p>There is, it seems, a misunderstanding from your colleague. The rules for look-up are:</p>\n<ul>\n<li>the Base template function need be declared before it is called from a definition</li>\n<li>the Specialized template function need be declared before it is instantiated</li>\n</ul>\n<p><em>Note: those rules apply for free-functions, within a class no forward declaration is required</em></p>\n<p>Note that because a definition also acts as a declaration it is unnecessary, in your example, to forward declare the <code>int</code> version.</p>\n<p>Correct example:</p>\n<pre><code>template &lt;typename T&gt; void foo(T);             // declare foo&lt;T&gt;\n\ntemplate &lt;typename T&gt; void bar(T t) { foo(t); }// call foo&lt;T&gt; (dependent context)\n\ntemplate &lt;&gt; void foo&lt;int&gt;(int);                // declare specialiaztion foo&lt;int&gt;\n\nvoid bar(int i) { foo(i); }                    // instantiate foo&lt;T&gt; with int\n                                               // which is the specialization\n</code></pre>\n<p>If there is base template available, this is an error. If the specialization is not declared prior to the instantiation, it won't be used, and this may, subsequently, mean a violation of the ODR rule (if another instantiation uses the specialization).</p>\n<p>From the Standard (C++0x FDIS):</p>\n<blockquote>\n<p id=\"so_7255281_7256320_0\"><strong>14.6.4.2</strong></p>\n<p id=\"so_7255281_7256320_1\"><strong>1.</strong> For a function call that depends on a template parameter, the candidate functions are found using the usual lookup rules (3.4.1, 3.4.2, 3.4.3) except that:</p>\n<p id=\"so_7255281_7256320_2\">\u2014 For the part of the lookup using unqualified name lookup (3.4.1) or qualified name lookup (3.4.3), only function declarations from the template definition context are found.</p>\n<p id=\"so_7255281_7256320_3\">\u2014 For the part of the lookup using associated namespaces (3.4.2), only function declarations found in either the template definition context or the template instantiation context are found.</p>\n<p id=\"so_7255281_7256320_4\">If the function name is an unqualified-id and the call would be ill-formed or would find a better match had the lookup within the associated namespaces considered all the function declarations with external linkage introduced in those namespaces in all translation units, not just considering those declarations found in the template definition and template instantiation contexts, then the program has undefined behavior.</p>\n</blockquote>\n<p>Note that the paragraphs referred to are for regular functions.</p>\n", "LastEditorUserId": "105672", "LastActivityDate": "2011-08-31T12:06:46.123", "Score": "8", "CreationDate": "2011-08-31T11:32:20.323", "ParentId": "7255281", "CommentCount": "2", "LastEditDate": "2011-08-31T12:06:46.123", "OwnerUserId": "147192"}, "7255281": {"ViewCount": "7219", "Body": "<p>I recently created this example code to illustrate C++11 variadic template function usage.</p>\n<pre><code>template &lt;typename Head, typename... Tail&gt; void foo (Head, Tail...);\ntemplate &lt;typename... Tail&gt; void foo (int, Tail...);\nvoid foo () {}\n\ntemplate &lt;typename... Tail&gt;\nvoid foo (int x, Tail... tail)\n{\n    std :: cout &lt;&lt; \"int:\" &lt;&lt; x;\n    foo (tail...);\n}\n\ntemplate &lt;typename Head, typename... Tail&gt;\nvoid foo (Head x, Tail... tail)\n{\n    std :: cout &lt;&lt; \" ?:\" &lt;&lt; x;\n    foo (tail...);\n}\n\nfoo (int (123), float (123)); // Prints \"int:123 ?:123.0\"\n</code></pre>\n<p>If the first two lines which forward-declare <code>foo</code> are omitted then this prints <code>int:123int:123</code> instead. This surprised a certain experienced and knowledgeable C++ programmer.</p>\n<p>He was convinced the forward-declarations shouldn't be necessary because the body won't be instantiated until the second phase of two-phase lookup. He thinks the compiler (gcc 4.6) has a bug.</p>\n<p>I believe the compiler is right because the two <code>foo</code> are <a href=\"http://www.gotw.ca/publications/mill17.htm\" rel=\"noreferrer\">different base template functions</a> and the choice of base template needs to be locked-in during the first phase or else you could violate the one-definition rule by instantiating <code>foo</code> before all versions of it have been defined and then again afterwards (consider how the linker assumes that redundant template function definitions are identical, interchangeable, and discardable).</p>\n<p>So, who is right?</p>\n<hr>\n<p>The above-linked GOTW nicely explains how and why function templates don't partially specialise, but the existence of variadic template functions seems to add to the confusion -- the intuition that <code>foo&lt;int,Tail...&gt;</code> should be a partial specialisation of <code>foo&lt;Head,Tail...&gt;</code> is stronger than that intuition for non-variadic functions, at least to me.</p>\n</hr>", "AcceptedAnswerId": "7256320", "Title": "Necessity of forward-declaring template functions", "CreationDate": "2011-08-31T09:50:15.070", "Id": "7255281", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-08-31T12:06:46.123", "Score": "13", "OwnerUserId": "458742", "Tags": "<c++><c++11><variadic-functions><variadic-templates><one-definition-rule>", "AnswerCount": "2"}, "7256266": {"Id": "7256266", "PostTypeId": "2", "Body": "<p>Two-phase lookup will find:</p>\n<ul>\n<li>functions which are visible at the point of definition, and</li>\n<li>functions which can be found by ADL at the point of instantiation.</li>\n</ul>\n<p><code>template &lt;typename Head, typename... Tail&gt; void foo (Head x, Tail... tail)</code> can't be found by ADL, so if isn't visible at the point of definition it won't be found at all.</p>\n<p>In other words, GCC is right.</p>\n", "LastActivityDate": "2011-08-31T11:27:23.387", "Score": "6", "CreationDate": "2011-08-31T11:27:23.387", "ParentId": "7255281", "CommentCount": "0", "OwnerUserId": "611142"}});