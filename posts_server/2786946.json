post_cb({"2786946": {"CommentCount": "0", "AcceptedAnswerId": "2786963", "CreationDate": "2010-05-07T07:33:19.210", "LastActivityDate": "2014-10-15T11:00:41.590", "PostTypeId": "1", "ViewCount": "6536", "FavoriteCount": "8", "Title": "C++ invoke explicit template constructor", "Id": "2786946", "Score": "34", "Body": "<p>Can you tell me how to invoke template constructor explicitly (in initializer list)?\nfor example:</p>\n<pre><code>struct T { \n    template&lt;class&gt; T();\n};\n\nstruct U {\n    U() : t&lt;void&gt;() {} //does not work\n    T t;\n};\n</code></pre>\n<p>thanks</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "206328", "AnswerCount": "1"}, "2786963": {"ParentId": "2786946", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>It's not possible. The Standard also has a note on this at <code>14.8.1/7</code></p>\n<blockquote>\n<p id=\"so_2786946_2786963_0\">[Note: because the explicit template argument list follows the function template name, and because conversion member function templates and constructor member function templates are called without using a function name, there is no way to provide an explicit template argument list for these function templates. ]</p>\n</blockquote>\n<p>If you can live with it, you can work it around</p>\n<pre><code>struct T { \n    template&lt;class U&gt; T(identity&lt;U&gt;);\n};\n\nstruct U {\n    U() : t(identity&lt;void&gt;()) {}\n    T t;\n};\n</code></pre>\n<p>Given <code>identity</code> like it's defined in boost</p>\n<pre><code>template&lt;typename T&gt; struct identity { typedef T type; };\n</code></pre>\n", "OwnerUserId": "34509", "LastEditorUserId": "3959454", "LastEditDate": "2014-10-15T11:00:41.590", "Id": "2786963", "Score": "34", "CreationDate": "2010-05-07T07:38:01.637", "LastActivityDate": "2014-10-15T11:00:41.590"}, "bq_ids": {"n4140": {"so_2786946_2786963_0": {"section_id": 114, "quality": 0.9375, "length": 30}}, "n3337": {"so_2786946_2786963_0": {"section_id": 109, "quality": 0.9375, "length": 30}}, "n4659": {"so_2786946_2786963_0": {"section_id": 118, "quality": 0.9375, "length": 30}}}});