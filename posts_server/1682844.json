post_cb({"1682885": {"PostTypeId": "2", "Body": "<p>When you refer to a template that is a member of dependent type, you have to prepend it with a keyword <code>template</code>. This is how the call to <code>getResult</code> inside <code>printStuff</code> should look</p>\n<pre><code>size_t value = a.template getResult&lt;B&gt;();\n</code></pre>\n<p>This is similar to using the keyword <code>typename</code> when referring to nested typenames in a dependent type. For some reason, the bit about <code>typename</code> with nested types is rather well-known, but the similar requirement for <code>template</code> with nested templates is relatively unknown.</p>\n<p>Note that the general syntax structure is a bit different though. The <code>typename</code> is always put in front of the full name of the type, while <code>template</code> is inserted in the middle.</p>\n<p>Again, this is only necessary when you are accessing a template member of a <em>dependent type</em>, which in the above example would be <code>A</code> in <code>printStuff</code>. When you call <code>foo.getResult&lt;&gt;</code> in <code>main</code> the type of <code>foo</code> is not dependent, so there's no need to include the <code>template</code> keyword.</p>\n", "LastActivityDate": "2009-12-07T06:35:39.320", "LastEditorUserId": "187690", "Id": "1682885", "CommentCount": "5", "CreationDate": "2009-11-05T19:13:26.023", "ParentId": "1682844", "Score": "35", "OwnerUserId": "187690", "LastEditDate": "2009-12-07T06:35:39.320"}, "bq_ids": {"n4140": {"so_1682844_1682959_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 72}}, "n3337": {"so_1682844_1682959_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 67}}}, "1682844": {"ViewCount": "2977", "Body": "<p>This is a minimal test case of some code that I actually have. It fails when it tries to evaluate <code>a.getResult&lt;B&gt;()</code>:</p>\n<pre><code>test.cpp: In function 'void printStuff(const A&amp;)':\ntest.cpp:6: error: expected primary-expression before '&gt;' token\ntest.cpp:6: error: expected primary-expression before ')' token\n</code></pre>\n<p>The code is:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt; class A, class B&gt;\nvoid printStuff( const A&amp; a)\n{\n    size_t value = a.getResult&lt;B&gt;();\n    std::cout &lt;&lt; value &lt;&lt; std::endl;\n}\n\nstruct Firstclass {\n    template&lt; class X &gt;\n    size_t getResult() const {\n        X someInstance;\n        return sizeof(someInstance);\n    }\n};\n\nint main(int, char**) {\n    Firstclass foo;\n\n    printStuff&lt;Firstclass, short int&gt;(foo);\n    printStuff&lt;Firstclass, double&gt;(foo);\n\n    std::cout &lt;&lt; foo.getResult&lt; double &gt;() &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>If I comment out the <code>printStuff</code> function and where it's called, the <code>foo.getResult&lt; double &gt;()</code> call compiles fine and does what is expected.</p>\n<p>Any idea what's going on? I've been working with extensively templated code for a while and have never encountered anything like this.</p>\n", "AcceptedAnswerId": "1682885", "Title": "Templates: template function not playing well with class's template member function", "CreationDate": "2009-11-05T19:04:52.093", "Id": "1682844", "CommentCount": "0", "FavoriteCount": "8", "PostTypeId": "1", "LastActivityDate": "2009-12-07T06:35:39.320", "Score": "21", "OwnerUserId": "118160", "Tags": "<c++><templates>", "AnswerCount": "2"}, "1682959": {"PostTypeId": "2", "Body": "<p>Your code is ill-formed according to C++ Standard 14.2/4:</p>\n<blockquote>\n<p id=\"so_1682844_1682959_0\">When the name of a member template specialization appears after <code>.</code> or <code>-&gt;</code> in a <em>postfix-expression</em>, or after <em>nested-name-specifier</em> in a <em>qualified-id</em>, and the postfix-expression or qualified-id explicitly depends on a template-parameter (14.6.2), the member template name must be prefixed by the keyword <code>template</code>. Otherwise the name is assumed to name a non-template.</p>\n</blockquote>\n<p>So, you should write <code>size_t value = a.template getResult&lt;B&gt;();</code></p>\n", "LastActivityDate": "2009-11-05T19:28:53.637", "Id": "1682959", "CommentCount": "0", "CreationDate": "2009-11-05T19:28:53.637", "ParentId": "1682844", "Score": "8", "OwnerUserId": "123111"}});