post_cb({"bq_ids": {"n4140": {"so_33241984_33242422_1": {"length": 53, "quality": 0.9137931034482759, "section_id": 3336}, "so_33241984_33242688_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 3338}}, "n3337": {"so_33241984_33242688_1": {"length": 63, "quality": 0.9264705882352942, "section_id": 3206}, "so_33241984_33242688_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 3208}}, "n4659": {"so_33241984_33242688_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 4105}}}, "33242422": {"Id": "33242422", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33241984_33242422_0\">my claim is that catching e by reference is not valid since e is a member of w and w is not alive in the catch scope.</p>\n</blockquote>\n<p>Your claim is incorrect. <code>throw e;</code> throws a copy of the member, and that copy is valid in catch's scope.</p>\n<p>\u00a7 15.1 / 3 (n3797 draft):</p>\n<blockquote>\n<p id=\"so_33241984_33242422_1\"><strong>Throwing an exception copy-initializes (\n  8.5\n  ,\n   12.8\n  ) a temporary object</strong>, called the\n  exception object\n  .  The\n  temporary is an lvalue and is used to initialize the variable named in the matching\n  handler\n  (\n  15.3\n  ). If the\n  type of the exception object would be an incomplete type or a pointer to an incomplete type other than\n  (possibly cv-qualified)\n  void\n  the program is ill-formed. Evaluating a\n  throw-expression\n  with an operand throws\n  an exception; the type of the exception object is determined by removing any top-level\n  cv-qualifiers\n  from the\n  static type of the operand and adjusting the type from \u201carray of\n  T\n  \u201d or \u201cfunction returning\n  T\n  \u201d to \u201cpointer to\n  T\n  \u201d or \u201cpointer to function returning\n  T\n  ,\u201d respectively.</p>\n</blockquote>\n<p>Catching by const reference is the preferred way to catch exceptions. It allows catching derivatives of <code>std::exception</code> without slicing the exception object.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2015-10-20T17:17:16.503", "Score": "7", "CreationDate": "2015-10-20T16:54:19.507", "ParentId": "33241984", "CommentCount": "8", "OwnerUserId": "2079303", "LastEditDate": "2015-10-20T17:17:16.503"}, "33242135": {"Id": "33242135", "PostTypeId": "2", "Body": "<p>If the constructor fails/throws, w doesn't exist. So \"w.throwException()\" is not valid. </p>\n", "LastActivityDate": "2015-10-20T16:39:58.007", "CommentCount": "2", "CreationDate": "2015-10-20T16:39:58.007", "ParentId": "33241984", "Score": "-4", "OwnerUserId": "5293624"}, "33241984": {"ViewCount": "339", "Body": "<p>I have the following C++ code</p>\n<pre><code>template &lt;class E&gt;\nclass ExceptionWrapper {\npublic:\n    explicit ExceptionWrapper(const E&amp; e): e(e) {}\n\n    void throwException() {\n        throw e;\n    }\n\nprivate:\n    E e;\n};\n\n...\ntry {\n    ExceptionWrapper&lt;E&gt; w(...);\n    w.throwException();\n} catch (const E&amp; e) {\n    ...\n}\n...\n</code></pre>\n<p>Question: is this code valid? I could argue that returning a reference to the class member is almost always not valid (and I am sure everybody agrees with this statement). However, my colleague claims that this is not the case with <code>throw</code>.</p>\n<p>P.S. after changing <code>catch (const E&amp; e)</code> to <code>catch (E e)</code> a nasty bug seemingly disappeared which strengthens my position - that this code is <em>not</em> valid.</p>\n", "AcceptedAnswerId": "33242422", "Title": "C++ throwing class members", "CreationDate": "2015-10-20T16:30:37.247", "Id": "33241984", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-10-20T16:44:21.137", "LastEditorUserId": "2456771", "LastActivityDate": "2015-10-20T17:17:16.503", "Score": "8", "OwnerUserId": "2456771", "Tags": "<c++><exception><reference>", "AnswerCount": "3"}, "33242688": {"Id": "33242688", "PostTypeId": "2", "Body": "<p>I think the relevant point is :</p>\n<blockquote>\n<p id=\"so_33241984_33242688_0\">15.1. <strong>Throwing an exception:</strong></p>\n<p id=\"so_33241984_33242688_1\"><em>p3.</em> <strong>A throw-expression initializes a temporary object</strong>, called the exception object, the type of which is determined\n  by removing any top-level cv-qualifiers from the static type of the operand of throw and adjusting the type\n  from \u201carray of T\u201d or \u201cfunction returning T\u201d to \u201cpointer to T\u201d or \u201cpointer to function returning T\u201d, respectively.\n  <strong>The temporary is an lvalue and is used to initialize the variable named in the matching handler (15.3).</strong> If\n  the type of the exception object would be an incomplete type or a pointer to an incomplete type other\n  than (possibly cv-qualified) void the program is ill-formed. Except for these restrictions and the restrictions\n  on type matching mentioned in 15.3, <strong>the operand of throw is treated exactly as a function argument in a\n  call (5.2.2) or the operand of a return statement.</strong></p>\n</blockquote>\n<p>This is from the <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">draft for c++11</a>, emphasis mine.</p>\n<p>It basically means there is a temporary object created from the argument of <code>throw</code>. Just like there was a function <code>E f(){return private_e;}</code>, and that temporary is used as the argument for the appropriate handler. So you would have two possible copies actually if you didn't catch by reference.</p>\n<p>Probably also relevant:</p>\n<blockquote>\n<p id=\"so_33241984_33242688_2\"><em>p5.</em> When the thrown object is a class object, the copy/move constructor and the destructor shall be accessible,\n  even if the copy/move operation is elided (12.8).</p>\n</blockquote>\n", "LastActivityDate": "2015-10-20T17:08:39.243", "CommentCount": "0", "CreationDate": "2015-10-20T17:08:39.243", "ParentId": "33241984", "Score": "2", "OwnerUserId": "1133179"}});