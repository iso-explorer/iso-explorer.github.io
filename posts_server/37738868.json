post_cb({"37738978": {"ParentId": "37738868", "CommentCount": "0", "Body": "<p>From [dcl.init.list]:</p>\n<blockquote>\n<p id=\"so_37738868_37738978_0\">An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation\n  allocated a temporary array of <code>N</code> elements of type <code>const E</code>, where <code>N</code> is the number of elements in the\n  initializer list. Each element of that array is copy-initialized with the corresponding element of the initializer\n  list, and the <code>std::initializer_list&lt;E&gt;</code> object is constructed to refer to that array.</p>\n</blockquote>\n<p>That should answer both of your questions: copying the <code>initializer_list</code> doesn't copy the underlying elements, and the underlying elements are <code>const</code> so you cannot modify them. </p>\n<blockquote>\n<p id=\"so_37738868_37738978_1\">How can I fix it if I wish to change the value inside the <code>initializer_list</code>?</p>\n</blockquote>\n<p>Don't use an <code>initializer_list&lt;int&gt;</code>. Use an <code>array&lt;int, 3&gt;</code> or <code>vector&lt;int&gt;</code> or some other container. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "37738978", "Score": "5", "CreationDate": "2016-06-10T02:23:09.720", "LastActivityDate": "2016-06-10T02:23:09.720"}, "37738917": {"ParentId": "37738868", "CommentCount": "0", "Body": "<p>From the <a href=\"http://en.cppreference.com/w/cpp/utility/initializer_list\" rel=\"nofollow\">cppreference</a> article</p>\n<pre><code>Copying a std::initializer_list does not copy the underlying objects.\n</code></pre>\n", "OwnerUserId": "2981588", "PostTypeId": "2", "Id": "37738917", "Score": "0", "CreationDate": "2016-06-10T02:14:51.230", "LastActivityDate": "2016-06-10T02:14:51.230"}, "37738868": {"CommentCount": "1", "ViewCount": "97", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2016-06-10T02:06:50.483", "LastActivityDate": "2016-06-10T02:24:16.873", "Title": "C++11: Does std::initializer_list store anonymous array? Is it mutable?", "AcceptedAnswerId": "37738978", "LastEditDate": "2016-06-10T02:24:16.873", "Id": "37738868", "Score": "0", "Body": "<p>Does the C++ standard say that <code>std::initializer_list&lt;T&gt;</code> is a reference to a local anonymous array? If it says, then we should never return such an object. Any section in the standard say so?</p>\n<p>Another question, are the underlying objects of a <code>std::initializer_list&lt;T&gt;</code> mutable? I tried to modify it:</p>\n<pre><code>#include &lt;initializer_list&gt;\nint main()\n{\n    auto a1={1,2,3};\n    auto a2=a1;//copy or reference?\n    for(auto&amp; e:a1)\n        ++e;//error\n    for(auto&amp; e:a2)\n        cout&lt;&lt;e;\n    return 0;\n}\n</code></pre>\n<p>But compiled with error : error: increment of read-only reference 'e'</p>\n<p>How can I fix it if I wish to change the value inside the initializer_list?</p>\n", "Tags": "<arrays><c++11><mutable><initializer-list><anonymous>", "OwnerUserId": "5890784", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37738868_37738978_0": {"section_id": 3327, "quality": 1.0, "length": 31}}, "n3337": {"so_37738868_37738978_0": {"section_id": 3197, "quality": 0.9354838709677419, "length": 29}}, "n4659": {"so_37738868_37738978_0": {"section_id": 4093, "quality": 0.8709677419354839, "length": 27}}}});