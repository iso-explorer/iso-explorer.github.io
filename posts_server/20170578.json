post_cb({"20170589": {"ParentId": "20170578", "CommentCount": "0", "Body": "<p>class members default to private.\nList them as public, or make Foo a struct (because struct members default to public) and the above works, else main isnt permitted to access b, and offsetof is considered an access.</p>\n", "OwnerUserId": "3015815", "PostTypeId": "2", "Id": "20170589", "Score": "0", "CreationDate": "2013-11-24T03:02:14.990", "LastActivityDate": "2013-11-24T03:02:14.990"}, "20170578": {"CommentCount": "5", "ViewCount": "579", "CreationDate": "2013-11-24T03:00:40.687", "LastActivityDate": "2013-11-24T04:17:35.770", "Title": "offsetof on standard-layout class?", "AcceptedAnswerId": "20170763", "PostTypeId": "1", "Id": "20170578", "Score": "1", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\nclass Foo\n{\n    int a;\n    int b;\n    float c;\n};\nint main()\n{\n    Foo foo;\n    std::cout &lt;&lt; offsetof(Foo, b) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>The above code could not compile using gcc-4.8.2 or vc++11. The error message is could not access private member b in class Foo. </p>\n<p>But according to the standard, offsetof should support standard-layout class and Foo is a standard-layout class.</p>\n<p>Is this a defect of gcc-4.8.2 or vc++11, or my understanding of the c++ standard is wrong?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "193251", "AnswerCount": "3"}, "20170763": {"ParentId": "20170578", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><em>offsetof</em> is defined as a <em>macro</em> and therefore it can not bypass the access controls and gain access to <em>private members</em>, we can see that this is the case by going to draft C++ standard section <code>17.6.1.2</code> <em>Headers</em> paragraph <em>5</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_20170578_20170763_0\">Names which are defined as macros in C <strong>shall be defined as macros in the C++ standard</strong> library, even if C grants license for implementation as functions. [ Note: The names defined as macros in C include the following: assert, <strong>offsetof</strong>, setjmp, va_arg, va_end, and va_start. \u2014end note ]</p>\n</blockquote>\n<p><b>Update</b></p>\n<p>So there are hacks that can allow you to access the private member of a class in a standard way but if we go back to the C99 draft standard which the draft C++ standard falls back on for <em>offsetof</em> then we see in section <code>7.17</code> <em>Common definitions </em> paragraph <em>3</em> says (<em>emphasis mine</em>):</p>\n<pre><code>   offsetof(type, member-designator)\n</code></pre>\n<blockquote>\n<p id=\"so_20170578_20170763_1\">which expands to an integer constant expression that has type size_t, the value of\n  which is the offset in bytes, to the structure member (designated by member-designator),\n  from the beginning of its structure (designated by type). The type and member designator\n  <strong>shall be such that given</strong></p>\n</blockquote>\n<pre><code>   static type t;\n</code></pre>\n<blockquote>\n<p id=\"so_20170578_20170763_2\">then the <strong>expression &amp;(t.member-designator) evaluates to an address constant</strong>.</p>\n</blockquote>\n<p>which won't be the case if you are trying to access a <em>private member</em> from outside the class.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-11-24T04:17:35.770", "Id": "20170763", "Score": "1", "CreationDate": "2013-11-24T03:32:58.113", "LastActivityDate": "2013-11-24T04:17:35.770"}, "bq_ids": {"n4140": {"so_20170578_20170763_0": {"section_id": 6260, "quality": 0.8461538461538461, "length": 22}}, "n3337": {"so_20170578_20170763_0": {"section_id": 6020, "quality": 0.8461538461538461, "length": 22}, "so_20170578_20170763_2": {"section_id": 5947, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_20170578_20170763_0": {"section_id": 7764, "quality": 0.8461538461538461, "length": 22}}}, "20170719": {"ParentId": "20170578", "CommentCount": "0", "Body": "<p><strong>Data members in a class are private by default</strong>. they can be accessed from main only if it is declared under <strong>public</strong>.Or you can access them from main by <strong>declaring a function in the class under public</strong> and calling it from main. since the functions in the class can access the data members from the class,you can get access to the private data members.</p>\n", "OwnerUserId": "2299439", "PostTypeId": "2", "Id": "20170719", "Score": "1", "CreationDate": "2013-11-24T03:25:16.983", "LastActivityDate": "2013-11-24T03:25:16.983"}});