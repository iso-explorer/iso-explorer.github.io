post_cb({"35506593": {"Id": "35506593", "PostTypeId": "2", "Body": "<p>Python supports arbitrary precision arithmetic, C++ does not. </p>\n<p>Moreover, according to the Standard <strong>[expr.shift]</strong>:</p>\n<blockquote>\n<p id=\"so_35506314_35506593_0\">The behavior is undefined if the right operand is negative, or greater\n  than or equal to the length in bits of the promoted left operand.</p>\n</blockquote>\n<p>In order to use big integers in C++ you may use Boost library, which provides wrappers to different libraries with long arithmetic implementations:</p>\n<pre><code>#include &lt;boost/multiprecision/gmp.hpp&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    boost::multiprecision::mpz_int one(1);\n    std::cout &lt;&lt; (one &lt;&lt; 180) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Prints</p>\n<pre><code>1532495540865888858358347027150309183618739122183602176\n</code></pre>\n", "LastActivityDate": "2016-02-19T13:32:38.110", "CommentCount": "0", "CreationDate": "2016-02-19T13:32:38.110", "ParentId": "35506314", "Score": "5", "OwnerUserId": "1532460"}, "35506611": {"Id": "35506611", "PostTypeId": "2", "Body": "<p>You can do this using a <a href=\"http://en.cppreference.com/w/cpp/utility/bitset\">std::bitset</a>:</p>\n<pre><code>std::bitset&lt;200&gt; bits = 1; // 200 bits long\nbits &lt;&lt;= 180;\n</code></pre>\n<p>How useful that is depends on what you want to do with it. It can't be converted to a single build-in type because they are not large enough. But there are other potentially useful operations that can be performed on it.</p>\n", "LastActivityDate": "2016-02-19T13:33:38.850", "CommentCount": "0", "CreationDate": "2016-02-19T13:33:38.850", "ParentId": "35506314", "Score": "6", "OwnerUserId": "3807729"}, "bq_ids": {"n4140": {"so_35506314_35506593_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6146}}, "n3337": {"so_35506314_35506593_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5909}}, "n4659": {"so_35506314_35506593_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7642}}}, "35506314": {"ViewCount": "167", "Body": "<p>I'm wonder how to shift left value in C++.\nFor example:</p>\n<pre><code>1 &lt;&lt; 180\n</code></pre>\n<p>and I beleve that result of that should be:</p>\n<pre><code>1532495540865888858358347027150309183618739122183602176\n</code></pre>\n<p>(tested in python [1 &lt;&lt; 180]);</p>\n", "AcceptedAnswerId": "35506593", "Title": "C++ shift left with big value", "CreationDate": "2016-02-19T13:19:09.897", "Id": "35506314", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-02-19T13:35:13.027", "Score": "3", "OwnerUserId": "3700585", "Tags": "<c++><shift>", "AnswerCount": "4"}, "35506450": {"Id": "35506450", "PostTypeId": "2", "Body": "<p>Integers (or longs) are stored in 32bits and can therefore not be shifted 180.\nIf you need the exact value, try to write/download a class that manages big integers.\nOtherwise, use a double and call pow(2,180). It has an accuracy 0f 15 digits</p>\n", "LastActivityDate": "2016-02-19T13:26:00.230", "CommentCount": "2", "CreationDate": "2016-02-19T13:26:00.230", "ParentId": "35506314", "Score": "0", "OwnerUserId": "3375670"}, "35506520": {"Id": "35506520", "PostTypeId": "2", "Body": "<p>In C++ (as in C) a left-shift by a value larger than the number of bits in the shifted operand's type actually gives undefined behaviour.</p>\n<p>In this case you are shifting an <code>int</code> value which is most likely 32 bits in size left by a value greater than 32, hence, the behaviour is undefined.</p>\n<p>If you need to deal with integers larger than the word size on your machine, you're probably going to need to use a library. <a href=\"https://gmplib.org/\" rel=\"nofollow\">GMP</a> is one option.</p>\n", "LastEditorUserId": "388661", "LastActivityDate": "2016-02-19T13:35:13.027", "Score": "1", "CreationDate": "2016-02-19T13:29:15.203", "ParentId": "35506314", "CommentCount": "0", "OwnerUserId": "388661", "LastEditDate": "2016-02-19T13:35:13.027"}});