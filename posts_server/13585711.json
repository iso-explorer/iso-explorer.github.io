post_cb({"13586272": {"Id": "13586272", "PostTypeId": "2", "Body": "<p>I'll risk downvotes becase i think you are doing it to understand pointers.  </p>\n<p>Maybe , what you were expecting was something like this :<br>\n<code>int * x=reinterpret_cast&lt;int *&gt;(p);<br>\n        x++;<br>\n        cout&lt;&lt;*reinterpret_cast&lt;float *&gt;(x);</br></br></code> </br></p>\n<p>Which works, and probably will work on most of the compilers you come across. However, there are many reasons why you must not be doing something like this. </p>\n<p><a href=\"http://www.gotw.ca/gotw/076.htm\" rel=\"nofollow noreferrer\">Uses and Abuses of Access Rights </a> is a <strong>must</strong> read.</p>\n<p>Also note that the standard clearly comments on the order of members separated by access specifier. From <a href=\"https://stackoverflow.com/questions/916600/can-a-c-compiler-re-order-elements-in-a-struct\">another</a> sof answer :</p>\n<blockquote>\n<p id=\"so_13585711_13586272_0\">Nonstatic data members of a (non-union) class declared without an\n  intervening access-specifier are allocated so that later members have\n  higher addresses within a class object. The order of allocation of\n  nonstatic data members separated by an access-specifier \n  is unspecified\n  (11.1)</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-27T14:22:23.130", "Score": "2", "CreationDate": "2012-11-27T14:22:23.130", "ParentId": "13585711", "CommentCount": "6", "OwnerUserId": "988966", "LastEditDate": "2017-05-23T11:44:35.243"}, "13585830": {"Id": "13585830", "PostTypeId": "2", "Body": "<p>If you want/need to access them, make them <code>public</code>. That's the point of <code>public</code>, it means the user of the class is allowed to see and change the things that are <code>public</code>.</p>\n<p>Someone will probably tell you that this \"breaks encapsulation.\" However, if you just need the class to hold a few values, and you don't need to do anything fancy, making data members public is not an issue.</p>\n", "LastActivityDate": "2012-11-27T13:58:23.803", "CommentCount": "2", "CreationDate": "2012-11-27T13:58:23.803", "ParentId": "13585711", "Score": "1", "OwnerUserId": "603688"}, "13586457": {"Id": "13586457", "PostTypeId": "2", "Body": "<p>At the risk of being down-voted by language lawyers, here is a bit of hacker's advice for you in hope that it might be interesting. Private members are not meant to be accessed from outside of the class and class's friends. However, if you absolutely must access those member fields of the class, a hack like this could work:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass vivek {\n    int   i;\n    float d;\n\n  public:\n    vivek() : i(4), d(4.44) {}\n    ~vivek() {}\n};\n\nint main()\n{\n    vivek viku;\n    struct badhack {\n        int   i;\n        float d;\n    } *h = (sizeof(badhack) == sizeof viku ? (badhack*)&amp;viku\n            : ((badhack*)((char*)&amp;viku + sizeof(void*))));\n    std::cout &lt;&lt; \"i=\" &lt;&lt; h-&gt;i &lt;&lt; \", d=\" &lt;&lt; h-&gt;d &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Note the game with sizeof's \u2014 that is just an example of determining a virtual table that takes <code>sizeof(void*)</code> bytes and is a first implicit field in the class shall there be any virtual members. If you do not do that and a class happens to have a virtual table, then data offsets will get screwed up and the trick won't work, so that's why we adjust offset by <code>sizeof(void*)</code> bytes in order to avoid that problem. Now, this is not defined by the standard and is compiler-specific, but I have never ran into a compiler that implements virtual tables differently as this is the most efficient way. </p>\n<p>Another option would be as simple as this:</p>\n<pre><code>#include &lt;iostream&gt;\n\n#define class struct\n#define private public\n\nclass vivek {\n    int   i;\n    float d;\n\n  public:\n    vivek() : i(4), d(4.44) {}\n    ~vivek() {}\n};\n\nint main()\n{\n    vivek viku;\n    std::cout &lt;&lt; \"i=\" &lt;&lt; viku.i &lt;&lt; \", d=\" &lt;&lt; viku.d &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>Note, however, that above most likely will not work for member functions. Compilers these day are smart and mangle function names differently depending on their access level.</p>\n<p>And please do not use tricks like these unless it is necessary to save someone's life and you are willing to sacrifice yours in return.</p>\n", "OwnerDisplayName": "user405725", "LastActivityDate": "2012-11-27T14:31:58.573", "Score": "1", "CreationDate": "2012-11-27T14:31:58.573", "ParentId": "13585711", "CommentCount": "1"}, "13586131": {"Id": "13586131", "PostTypeId": "2", "Body": "<p>While it's extremely hacky, it <em>is</em> possible, because <code>vivek</code> is a standard-layout struct. This means you can do this:</p>\n<pre><code>#include &lt;iostream&gt;\n\n// copied from original\nclass vivek {\n  int i;\n  float d;\npublic:\n  vivek() {i = 4; d = 4.44; }\n  ~vivek() { cout&lt;&lt;\"destructor\"&lt;&lt;i; }\n  int get() { return i; }\n};\n\nstruct vivek_sneaky_accessor {\n  int i;\n  float d;\n};\n\nint main() {\n  vivek v;\n  vivek_sneaky_accessor *acc = reinterpret_cast&lt;vivek_sneaky_accessor*&gt;(&amp;v);\n  std::cout &lt;&lt; acc-&gt;d;\n  return 0;\n}\n</code></pre>\n<p>This relies on [class] points 7 and 8 (definition of <em>standard-layout struct</em>) and on [class.mem] points 17 and 20 (layout-compatibility of standard-layout structs).</p>\n<p><strong>Disclaimer</strong> I am in no way advocating this as a reasonable thing to do. I am just saying that it is actually possible.</p>\n", "LastActivityDate": "2012-11-27T14:14:30.147", "CommentCount": "1", "CreationDate": "2012-11-27T14:14:30.147", "ParentId": "13585711", "Score": "1", "OwnerUserId": "1782465"}, "13586471": {"Id": "13586471", "PostTypeId": "2", "Body": "<p>While it is certainly possible to treat your object as a sequence of bytes and fiddle with those bytes directly, it is a very bad idea. The whole point of having classes and objects is to save you the trouble of having to think about how the data are actually laid out in the memory.</p>\n", "LastActivityDate": "2012-11-27T14:32:30.730", "CommentCount": "0", "CreationDate": "2012-11-27T14:32:30.730", "ParentId": "13585711", "Score": "0", "OwnerUserId": "13313"}, "bq_ids": {"n4140": {"so_13585711_13586272_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 5873}}, "n3337": {"so_13585711_13586272_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 5644}}, "n4659": {"so_13585711_13586272_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 7356}}}, "13585759": {"Id": "13585759", "PostTypeId": "2", "Body": "<p>In class <code>vivek</code></p>\n<pre><code>public:\n  float getD() {\n    return this -&gt; d;\n  }\n</code></pre>\n<p>And invoke it in your code like this:</p>\n<pre><code>std::cout &lt;&lt; (p -&gt; getD()) &lt;&lt; std::endl;\n</code></pre>\n", "LastActivityDate": "2012-11-27T13:54:06.197", "CommentCount": "0", "CreationDate": "2012-11-27T13:54:06.197", "ParentId": "13585711", "Score": "1", "OwnerUserId": "1248275"}, "13585711": {"ViewCount": "1158", "Body": "<p>Inside main.cpp</p>\n<pre><code>class vivek\n{\n    int i;\n    float d;\npublic:\n    vivek()\n    {\n        i = 4;\n        d = 4.44;\n    }\n    ~vivek()\n    {\n        cout &lt;&lt; \"destructor\" &lt;&lt; i;\n    }\n    int get()\n    {\n        return i;\n    }\n};\n\nint main()\n{\n    vivek *viku = new vivek;\n    vivek *p;\n\n    p = viku;\n    cout &lt;&lt; (*(int*) (p));\n    getchar();\n\n    return 0;\n}\n</code></pre>\n<p>Through above code i can able to access variable i , but i want to know how can i access the variable d .</p>\n<p>I know this concept shall not be advisable since it violates encapsulation .. But i just want to know how we can do this ?</p>\n", "AcceptedAnswerId": "13586131", "Title": "Accessing the private data inside main function", "CreationDate": "2012-11-27T13:50:55.857", "Id": "13585711", "CommentCount": "5", "LastEditDate": "2012-11-27T14:24:27.657", "PostTypeId": "1", "LastEditorUserId": "1334073", "LastActivityDate": "2012-11-28T15:10:47.433", "Score": "0", "OwnerUserId": "1334073", "Tags": "<c++>", "AnswerCount": "6"}});