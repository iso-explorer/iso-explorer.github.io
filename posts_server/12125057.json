post_cb({"12125696": {"LastActivityDate": "2012-08-25T21:25:19.923", "CreationDate": "2012-08-25T21:12:34.407", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_12125057_12125696_0\">Are these bugs in C++ regex, or am I doing something wrong?</p>\n</blockquote>\n<p>gcc doesn't support <code>&lt;regex&gt;</code> as noted in the other answer. As for the other problems, your problem is you are passing <strong>temporary string objects</strong>. Change your code to the following:</p>\n<pre><code>smatch sm1;\nstring s1(\"abhelloworld.jpg\");\nregex_search(s1, sm1, regex(\"(.*)jpg\"));\ncout &lt;&lt; sm1[1] &lt;&lt; endl;\nsmatch sm2;\nstring s2(\"hell.g\");\nregex_search(s2, sm2, regex(\"(.*)g\"));\ncout &lt;&lt; sm2[1] &lt;&lt; endl;\n</code></pre>\n<p>Your original example compiles because <code>regex_search</code> takes a const reference which temporary objects can bind to, however, <code>smatch</code> only stores iterators into your temporary object which no longer exists. The solution is to not pass temporaries.</p>\n<p>If you look in the C++ standard at [\u00a7 28.11.3/5], you will find the following:</p>\n<blockquote>\n<p id=\"so_12125057_12125696_1\">Returns: The result of regex_search(s.begin(), s.end(), m, e, flags).</p>\n</blockquote>\n<p>What this means is that internally, only <em>iterators</em> to your passed in string are used, so if you pass in a temporary, iterators to that temporary object will be used which are invalid and the actual temporary itself is <em>not stored</em>.</p>\n", "Id": "12125696", "LastEditDate": "2012-08-25T21:25:19.923", "ParentId": "12125057", "OwnerUserId": "906773", "PostTypeId": "2", "Score": "6", "LastEditorUserId": "906773"}, "bq_ids": {"n4140": {"so_12125057_12125696_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 5245}}, "n3337": {"so_12125057_12125696_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 5042}}}, "12125057": {"CreationDate": "2012-08-25T19:37:29.873", "ViewCount": "3390", "Id": "12125057", "AcceptedAnswerId": "12125696", "Score": "4", "Title": "C++ regex string capture", "CommentCount": "0", "Body": "<p>Tring to get C++ regex string capture to work.  I have tried all four combinations of Windows vs. Linux, Boost vs. native C++ 0x11.  The sample code is:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;boost/regex.hpp&gt;\n//#include &lt;regex&gt;\n\nusing namespace std;\nusing namespace boost;\n\nint main(int argc, char** argv)\n{\n    smatch sm1;\n    regex_search(string(\"abhelloworld.jpg\"), sm1, regex(\"(.*)jpg\"));\n    cout &lt;&lt; sm1[1] &lt;&lt; endl;\n    smatch sm2;\n    regex_search(string(\"hell.g\"), sm2, regex(\"(.*)g\"));\n    cout &lt;&lt; sm2[1] &lt;&lt; endl;\n}\n</code></pre>\n<p>The closest that works is g++ (4.7) with Boost (1.51.0).  There, the first cout outputs the expected <code>abhelloworld.</code> but nothing from the second cout.</p>\n<p>g++ 4.7 with -std=gnu++11 and <code>&lt;regex&gt;</code> instead of <code>&lt;boost/regex.hpp&gt;</code> produces no output.</p>\n<p>Visual Studio 2012 using native <code>&lt;regex&gt;</code> yields an exception regarding incompatible string iterators.</p>\n<p>Visual Studio 2008 with Boost 1.51.0 and <code>&lt;boost/regex.hpp&gt;</code> yields an exception regarding \"Standard C++ Libraries Invalid argument\".</p>\n<p>Are these bugs in C++ regex, or am I doing something wrong?</p>\n", "Tags": "<c++><regex><visual-studio><boost><g++>", "LastActivityDate": "2012-08-25T21:25:19.923", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1624911"}, "12125073": {"CommentCount": "2", "Body": "<p>GCC doesn't support <code>&lt;regex&gt;</code> yet. Refer to the <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011\" rel=\"nofollow\">Manual</a></p>\n", "CreationDate": "2012-08-25T19:39:50.797", "ParentId": "12125057", "Id": "12125073", "LastActivityDate": "2012-08-25T19:39:50.797", "PostTypeId": "2", "Score": "0", "OwnerUserId": "1381108"}});