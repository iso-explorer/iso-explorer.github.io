post_cb({"20877983": {"ParentId": "20877837", "CommentCount": "0", "Body": "<p>There is vector::data() exposing the array allocated. Hence it is fair to assume that any operation on the vector equivalent to any modification on vector::data() will not effect memory allocation.</p>\n", "OwnerUserId": "2249683", "PostTypeId": "2", "Id": "20877983", "Score": "1", "CreationDate": "2014-01-02T07:04:25.467", "LastActivityDate": "2014-01-02T07:04:25.467"}, "20877878": {"ParentId": "20877837", "CommentCount": "0", "Body": "<p>Any non-const operation on the vector might modify it. Any O(n) operation (like push_back) on the vector may cause the underlying data to be relocated. You can click into the various pages on <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow\">cppreference</a> to see what the big-Oh notation is for the operations you intend to use.</p>\n<p>Calls to size and the subscript operator must complete in O(1) time, and so the vector would not reallocate its buffer.</p>\n", "OwnerUserId": "2843835", "PostTypeId": "2", "Id": "20877878", "Score": "0", "CreationDate": "2014-01-02T06:57:39.660", "LastActivityDate": "2014-01-02T06:57:39.660"}, "20877982": {"ParentId": "20877837", "CommentCount": "0", "Body": "<p>From the remarks on <code>vector::reserve()</code> in C++11 23.3.6.3 \"vector capacity\":</p>\n<blockquote>\n<p id=\"so_20877837_20877982_0\">It is guaranteed that no reallocation takes place during insertions\n  that happen after a call to <code>reserve()</code> until the time when an insertion\n  would make the size of the vector greater than the value of\n  <code>capacity()</code>.</p>\n</blockquote>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "20877982", "Score": "5", "CreationDate": "2014-01-02T07:04:20.960", "LastActivityDate": "2014-01-02T07:04:20.960"}, "bq_ids": {"n4140": {"so_20877837_20877982_0": {"section_id": 972, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_20877837_20877982_0": {"section_id": 961, "quality": 1.0, "length": 22}}, "n4659": {"so_20877837_20877982_0": {"section_id": 1034, "quality": 0.9090909090909091, "length": 20}}}, "20877837": {"CommentCount": "0", "ViewCount": "73", "CreationDate": "2014-01-02T06:55:27.183", "LastActivityDate": "2014-01-02T07:04:25.467", "Title": "Will `std::vector` do anything I haven't asked it to", "AcceptedAnswerId": "20877982", "PostTypeId": "1", "Id": "20877837", "Score": "1", "Body": "<p>In C++, if I initialize a <code>std::vector v(100);</code> and never try to <code>resize()</code> nor <code>reserve()</code> it, is the <code>capacity()</code> guaranteed to stay the same all the time? I want to make sure that no memory alloc/freeing/realloc/etc is going on for perforance reasons. (Yes, it would affect performance; my functions are called all the time, and they <em>must</em> returrn quickly).</p>\n<p>Resuming it all:</p>\n<pre><code>std::vector&lt;float&gt; v;\n// somehow, `v' is initialized to have 100 elements\nvoid f() { // this function must return _very_ quickly\n    /* do some processing, without ever calling v.resize() or v.reserve(), but\n       accesing v.size() and v[i] all the time */\n    /* it is guaranteed that no system calls (such as memory management)\n       will take place here? */\n} // no objects on the stack whose destroyers might try to `delete' anything.\n</code></pre>\n", "Tags": "<c++><vector><capacity>", "OwnerUserId": "3067276", "AnswerCount": "3"}});