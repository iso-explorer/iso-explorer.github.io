post_cb({"22739577": {"Id": "22739577", "PostTypeId": "2", "Body": "<p>The problem is that here:</p>\n<pre><code>typedef struct stack_gt* stack_gt;\n</code></pre>\n<p>you are giving <code>stack_gt</code> a different type, while this works fine:</p>\n<pre><code>typedef struct stack_gt* stack_gtB;\n</code></pre>\n<p><code>clang</code> gives us a nicer error message:</p>\n<blockquote>\n<p id=\"so_22739408_22739577_0\">error: typedef redefinition with different types ('struct stack_gt *' vs 'stack_gt')</p>\n</blockquote>\n<p>This is covered in the draft C++ standard section <code>7.1.3</code> <em>The typedef specifier</em> paragraph <em>6</em>:</p>\n<blockquote>\n<p id=\"so_22739408_22739577_1\">In a given scope, a typedef specifier shall not be used to redefine the name of any type declared in that scope to refer to a different type. [ Example:</p>\n</blockquote>\n<pre><code>class complex { / ... / };\ntypedef int complex; // error: redefinition\n</code></pre>\n<blockquote>\n<p id=\"so_22739408_22739577_2\">\u2014end example ]</p>\n</blockquote>\n<p>Using the same name though is fine, so this would be ok:</p>\n<pre><code>   typedef struct stack_gt stack_gt;\n</code></pre>\n<p>covered in paragraph <em>3</em>:</p>\n<blockquote>\n<p id=\"so_22739408_22739577_3\">In a given non-class scope, a typedef specifier can be used to redefine the name of any type declared in that scope to refer to the type to which it already refers. [ Example:</p>\n</blockquote>\n<pre><code>typedef struct s { / ... / } s;\ntypedef int I; \ntypedef int I;\ntypedef I I;\n</code></pre>\n<blockquote>\n<p id=\"so_22739408_22739577_4\">\u2014end example ]</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-03-30T03:07:13.757", "Score": "2", "CreationDate": "2014-03-30T02:30:21.683", "ParentId": "22739408", "CommentCount": "4", "OwnerUserId": "1708801", "LastEditDate": "2014-03-30T03:07:13.757"}, "bq_ids": {"n4140": {"so_22739408_22739577_3": {"length": 15, "quality": 0.9375, "section_id": 5409}, "so_22739408_22739577_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 5412}}, "n3337": {"so_22739408_22739577_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 5207}, "so_22739408_22739577_3": {"length": 15, "quality": 0.9375, "section_id": 5204}}, "n4659": {"so_22739408_22739577_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6834}, "so_22739408_22739577_3": {"length": 15, "quality": 0.9375, "section_id": 6831}}}, "22740043": {"Id": "22740043", "PostTypeId": "2", "Body": "<p>Another idea:</p>\n<pre><code> #ifdef __cplusplus\n\n extern \"C\" {\n typedef void * stack_gt\n\n #else\n\n typedef struct stack_gt* stack_gt;\n\n #endif\n</code></pre>\n<p>This is ugly, but you don't need to rewrite any other part of the code, only this header included in <code>C++</code> . It is only used as an opaque pointer in <code>C++</code> anyways, and <code>C</code> doesn't notice.</p>\n", "LastActivityDate": "2014-03-30T03:51:16.187", "CommentCount": "0", "CreationDate": "2014-03-30T03:51:16.187", "ParentId": "22739408", "Score": "1", "OwnerUserId": "875023"}, "22739408": {"ViewCount": "182", "Body": "<p><code>main.c</code></p>\n<pre><code>#include \"stackg.h\"\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p><code>stackg.h</code></p>\n<pre><code>#ifndef STACKG_H\n#define STACKG_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct stack_gt* stack_gt;\n\nstack_gt stkg_init(\n                  void* (*alloc)(const void* data, const int size),\n                  void (*dealloc)(void* data),\n                  void (*copy)(void* data_d, const void* data_s),\n                  const int size\n                  );\nvoid stkg_free(stack_gt s);\nint stkg_is_empty(stack_gt s);\nint stkg_is_full(stack_gt s);\nconst int stkg_size(const stack_gt s);\nvoid stkg_clear(stack_gt s);\nint stkg_push(stack_gt s, const void* data);\nint stkg_pop(stack_gt s, void* data);\nint stkg_peek(stack_gt s, void* data);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n</code></pre>\n<p>The above program compiles successfully with the GCC compiler, but in MSVC2008 it gives the following error :</p>\n<pre><code>error C2040: 'stack_gt *' differs in levels of indirection from 'stack_gt'\n</code></pre>\n<p>What should I tell MSVC to make it compile the program without changing anything in the code?</p>\n<h3>Edit</h3>\n<p>Error occurs at line 8 of <code>stackg.h</code> :: <code>typedef struct stack_gt* stack_gt;</code></p>\n<h3>Edit 2</h3>\n<p>If nothing else, I'll go with <code>typedef struct _stack_gt* stack_gt;</code></p>\n", "Title": "Opaque pointer in MSVC generates compiler error", "CreationDate": "2014-03-30T02:01:58.870", "LastActivityDate": "2014-11-07T01:09:53.690", "CommentCount": "7", "LastEditDate": "2014-11-07T01:09:53.690", "PostTypeId": "1", "LastEditorUserId": "1167346", "Id": "22739408", "Score": "2", "OwnerUserId": "1167346", "Tags": "<c++><c><visual-c++><compiler-errors><opaque-pointers>", "AnswerCount": "2"}});