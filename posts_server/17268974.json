post_cb({"bq_ids": {"n4140": {"so_17268974_17269073_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5455}}, "n4659": {"so_17268974_17269073_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 6881}}}, "17269073": {"Id": "17269073", "PostTypeId": "2", "LastEditDate": "2017-05-23T10:29:40.590", "CommentCount": "0", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-24T07:23:25.790", "CreationDate": "2013-06-24T06:17:04.270", "ParentId": "17268974", "Score": "17", "Body": "<p>According to the paper it was proposed in, <a href=\"https://stackoverflow.com/questions/17248462/is-there-any-way-to-output-the-actual-array-in-c/17248538#comment25000518_17248462\">N3638</a>, it is explicitly valid to do so. </p>\n<p>Relevant snippet:</p>\n<pre class=\"lang-none prettyprint-override\"><code>[ Example:\n\nauto x = 5;                  // OK: x has type int\nconst auto *v = &amp;x, u = 6;   // OK: v has type const int*, u has type const int\nstatic auto y = 0.0;         // OK: y has type double\nauto int r;                  // error: auto is not a storage-class-specifier\nauto f() -&gt; int;             // OK: f returns int\nauto g() { return 0.0; }     // OK: g returns double\nauto h();                    // OK, h's return type will be deduced when it is defined\n\u2014 end example ]\n</code></pre>\n<p>However it goes on to say:</p>\n<blockquote>\n<p id=\"so_17268974_17269073_0\">If the type of an entity with an undeduced placeholder type is needed to determine the type of an expression, the program is ill-formed. But once a return statement has been seen in a function, the return type deduced from that statement can be used in the rest of the function, including in other return statements.</p>\n</blockquote>\n<pre class=\"lang-none prettyprint-override\"><code>[ Example:\n\nauto n = n; // error, n's type is unknown\nauto f();\nvoid g() { &amp;f; } // error, f's return type is unknown\nauto sum(int i) {\n  if (i == 1)\n    return i;  // sum's return type is int\n  else\n    return sum(i-1)+i; // OK, sum's return type has been deduced\n}\n\u2014end example]\n</code></pre>\n<p>So the fact that you used it before it was defined causes it to error. </p>\n", "OwnerUserId": "1381108"}, "17268974": {"ViewCount": "1779", "LastEditDate": "2014-08-19T05:57:37.010", "AcceptedAnswerId": "17269073", "Title": "How do I declare a function whose return type is deduced?", "CreationDate": "2013-06-24T06:08:59.253", "LastActivityDate": "2014-08-19T05:57:37.010", "CommentCount": "1", "Body": "<p>Consider this <strong>C++1y</strong> code (<a href=\"http://coliru.stacked-crooked.com/view?id=71b6b439065cbb52a47d72fee80e9f6d-0f11904895a20602a6e5ca9f4b5b0039\" rel=\"nofollow noreferrer\">LIVE EXAMPLE</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n\nauto foo();\n\nint main() {\n    std::cout &lt;&lt; foo();   // ERROR!\n}\n\nauto foo() {\n    return 1234;\n}\n</code></pre>\n<p>The compiler (GCC 4.8.1) generously shoots out this error:</p>\n<blockquote>\n<p id=\"so_17268974_17268974_0\">main.cpp: In function \u2018int main()\u2019:<br>\n  main.cpp:8:18: error: use of \u2018auto foo()\u2019 before deduction of \u2018auto\u2019<br>\n       std::cout &lt;&lt; foo();<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^</br></br></br></p>\n</blockquote>\n<p><strong>How do I forward-declare <code>foo()</code> here?</strong> Or maybe more appropriately, <strong>is it possible to forward-declare <code>foo()</code>?</strong></p>\n<hr>\n<p>I've also tried compiling code where I tried to declare <code>foo()</code> in the <code>.h</code> file, defined <code>foo()</code> just like the one above in a <code>.cpp</code> file, included the <code>.h</code> in my <code>main.cpp</code> file containing <code>int main()</code> and the call to <code>foo()</code>, and built them.</p>\n<p>The same error occurred.</p>\n</hr>", "PostTypeId": "1", "LastEditorUserId": "1381108", "Id": "17268974", "AnswerCount": "1", "Score": "12", "OwnerUserId": "1619294", "Tags": "<c++><auto><c++14>", "FavoriteCount": "2"}});