post_cb({"43883848": {"Id": "43883848", "PostTypeId": "2", "Body": "<p>A declaration presents a symbol name to the compiler. A definition is a declaration that allocates space for the symbol.</p>\n<pre><code>int f(int x); // function declaration (I know f exists)\n\nint f(int x) { return 2*x; } // declaration and definition\n</code></pre>\n", "LastActivityDate": "2017-05-10T04:54:23.080", "CommentCount": "0", "CreationDate": "2017-05-10T04:54:23.080", "ParentId": "1410563", "Score": "0", "OwnerUserId": "1797000"}, "1410596": {"Id": "1410596", "PostTypeId": "2", "Body": "<p><strong>Declaration</strong></p>\n<blockquote>\n<p id=\"so_1410563_1410596_0\">Declarations tell the compiler that a\n  program element or name exists. A\n  declaration introduces one or more\n  names into a program. Declarations can\n  occur more than once in a program.\n  Therefore, classes, structures,\n  enumerated types, and other\n  user-defined types can be declared for\n  each compilation unit.</p>\n</blockquote>\n<p><strong>Definition</strong></p>\n<blockquote>\n<p id=\"so_1410563_1410596_1\">Definitions specify what code or data\n  the name describes. A name must be\n  declared before it can be used.</p>\n</blockquote>\n", "LastActivityDate": "2009-09-11T12:35:30.420", "CommentCount": "7", "CreationDate": "2009-09-11T12:35:30.420", "ParentId": "1410563", "Score": "29", "OwnerUserId": "142822"}, "1410575": {"Id": "1410575", "PostTypeId": "2", "Body": "<p>From wiki.answers.com:</p>\n<p>The term declaration means (in C) that you are telling the compiler about type, size and in case of function declaration, type and size of its parameters of any variable, or user defined type or function in your program. <em>No</em> space is reserved in memory for any variable in case of declaration. However compiler knows how much space to reserve in case a variable of this type is created.</p>\n<p>for example, following are all declarations: </p>\n<pre><code>extern int a; \nstruct _tagExample { int a; int b; }; \nint myFunc (int a, int b);\n</code></pre>\n<p>Definition on the other hand means that in additions to all the things that declaration does, space is also reserved in memory. You can say \"DEFINITION = DECLARATION + SPACE RESERVATION\" following are examples of definition: </p>\n<pre><code>int a; \nint b = 0; \nint myFunc (int a, int b) { return a + b; } \nstruct _tagExample example; \n</code></pre>\n<p>see <a href=\"http://wiki.answers.com/Q/What_is_the_difference_between_declaration_and_a_definition_in_C\" rel=\"noreferrer\">Answers</a>.</p>\n", "LastEditorUserId": "203458", "LastActivityDate": "2013-04-24T13:06:44.540", "Score": "12", "CreationDate": "2009-09-11T12:30:09.723", "ParentId": "1410563", "CommentCount": "9", "OwnerUserId": "5731", "LastEditDate": "2013-04-24T13:06:44.540"}, "1411064": {"Id": "1411064", "PostTypeId": "2", "Body": "<p>From the C99 standard, 6.7(5):</p>\n<p>A declaration specifies the interpretation and attributes of a set of identifiers. A <em>definition</em> of an identifier is a declaration for that identifier that:</p>\n<ul>\n<li>for an object, causes storage to be reserved for that object;</li>\n<li>for a function, includes the function body;</li>\n<li>for an enumeration constant or typedef name, is the (only) declaration of the\nidentifier.</li>\n</ul>\n<p>From the C++ standard, 3.1(2):</p>\n<p>A declaration is a <em>definition</em> unless it declares a function without specifying the function's body, it contains the extern specifier or a linkage-specification and neither an initializer nor a function-body, it declares a static data member in a class declaration, it is a class name declaration, or it is a typedef declaration, a using-declaration, or a using-directive.</p>\n<p>Then there are some examples.</p>\n<p>So interestingly (or not, but I'm slightly surprised by it), <code>typedef int myint;</code> is a definition in C99, but only a declaration in C++.</p>\n", "LastActivityDate": "2009-09-11T14:03:38.850", "CommentCount": "13", "CreationDate": "2009-09-11T14:03:38.850", "ParentId": "1410563", "Score": "17", "OwnerUserId": "13005"}, "bq_ids": {"n4140": {"so_1410563_1410632_0": {"length": 5, "quality": 1.0, "section_id": 5857}, "so_1410563_1411005_0": {"length": 14, "quality": 0.875, "section_id": 7033}, "so_1410563_1411005_1": {"length": 14, "quality": 1.0, "section_id": 7038}}, "n3337": {"so_1410563_1410632_0": {"length": 5, "quality": 1.0, "section_id": 5627}, "so_1410563_1411005_0": {"length": 14, "quality": 0.875, "section_id": 6779}, "so_1410563_1411005_1": {"length": 14, "quality": 1.0, "section_id": 6784}}, "n4659": {"so_1410563_1410632_0": {"length": 5, "quality": 1.0, "section_id": 7336}, "so_1410563_1411005_0": {"length": 14, "quality": 0.875, "section_id": 8530}, "so_1410563_1411005_1": {"length": 14, "quality": 1.0, "section_id": 8535}}}, "41256812": {"Id": "41256812", "PostTypeId": "2", "Body": "<p>Whenever we write function after the main function, compiler will through the error since it does not have any idea about the function at the time of calling function. If we provide prototype declaration of function then we compiler will not look for the definition.</p>\n<pre><code>int sum(int,int);\nmain()\n{\nint res = sum(10,20);\n}\nint sum(int n1,int n2)\n{\nreturn(n1+n2);\n}\n</code></pre>\n<p>In the above example , first line is called as function declaration.</p>\n<pre><code>int sum(int,int);\n</code></pre>\n<p><strong>Declaring Variable</strong></p>\n<p>Whenever we write declaration statement then memory will not be allocated for the variable. Variable declaration will randomly specify the memory location.</p>\n<pre><code>int ivar;\nfloat fvar;\n</code></pre>\n<p><strong>Variable Declaration Vs Definition Differentiation Parameters</strong></p>\n<p><strong>A. Space Reservation :</strong></p>\n<p>Whenever we declare a variable then space will not be reserved for the variable.\nWhenever we declare a variable then compiler will not look for other details such as definition of the variable.</p>\n<p>Declaration is handy way to write code in which actual memory is not allocated.</p>\n<pre><code>struct book  {\n    int pages;\n    float price;\n    char *bname;\n};\n</code></pre>\n<p>In the above declaration memory is not allocated. Whenever we define a variable then memory will be allocated for the variable.</p>\n<pre><code>struct book b1;\n</code></pre>\n<p><strong>B. What it does ?</strong></p>\n<ol>\n<li>Declaration will identify the data type of the identifier.</li>\n<li>Definition of the variable will assign some value to it.</li>\n</ol>\n", "LastActivityDate": "2016-12-21T06:53:21.247", "CommentCount": "0", "CreationDate": "2016-12-21T06:53:21.247", "ParentId": "1410563", "Score": "0", "OwnerUserId": "4205572"}, "1410632": {"Id": "1410632", "PostTypeId": "2", "Body": "<p>A <strong><em>declaration</em></strong> introduces an identifier and describes its type, be it a type, object, or function. A declaration is <strong><em>what the compiler needs</em></strong> to accept references to that identifier. These are declarations: </p>\n<pre><code>extern int bar;\nextern int g(int, int);\ndouble f(int, double); // extern can be omitted for function declarations\nclass foo; // no extern allowed for type declarations\n</code></pre>\n<p>A <strong><em>definition</em></strong> actually instantiates/implements this identifier. It's <strong><em>what the linker needs</em></strong> in order to link references to those entities. These are definitions corresponding to the above declarations: </p>\n<pre><code>int bar;\nint g(int lhs, int rhs) {return lhs*rhs;}\ndouble f(int i, double d) {return i+d;}\nclass foo {};\n</code></pre>\n<p>A definition can be used in the place of a declaration. </p>\n<p>An identifier can be <em>declared</em> as often as you want. Thus, the following is legal in C and C++: </p>\n<pre><code>double f(int, double);\ndouble f(int, double);\nextern double f(int, double); // the same as the two above\nextern double f(int, double);\n</code></pre>\n<p>However, it must be <em>defined</em> exactly once. If you forget to define something that's been declared and referenced somewhere, then the linker doesn't know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn't know <em>which</em> of the definitions to link references to and complains about duplicated symbols. </p>\n<hr>\n<p>Since the debate what is a class <em>declaration</em> vs. a class <em>definition</em> in C++ keeps coming up (in answers and comments to other questions) , I'll paste a quote from the C++ standard here.<br>\nAt 3.1/2, C++03 says:</br></p>\n<blockquote>\n<p id=\"so_1410563_1410632_0\">A declaration is a definition unless it [...] is a class name declaration [...].</p>\n</blockquote>\n<p>3.1/3 then gives a few examples. Amongst them:</p>\n<pre>\n[Example: [...]\nstruct S { int a; int b; }; // defines S, S::a, and S::b [...]\nstruct S; // declares S\n\u2014end example\n</pre>\n<p>To sum it up: The C++ standard considers <code>struct x;</code> to be a <em>declaration</em> and <code>struct x {};</code> a <em>definition</em>. (In other words, <strong><em>\"forward declaration\" a misnomer</em></strong>, since there are no other forms of class declarations in C++.) </p>\n<p>Thanks to <a href=\"https://stackoverflow.com/users/34509/johannes-schaub-litb\">litb (Johannes Schaub)</a> who dug out the actual chapter and verse in one of his answers. </p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-06-13T06:10:43.013", "Score": "648", "CreationDate": "2009-09-11T12:43:03.240", "ParentId": "1410563", "CommentCount": "26", "OwnerUserId": "140719", "LastEditDate": "2017-05-23T12:26:33.380"}, "3342321": {"Id": "3342321", "PostTypeId": "2", "Body": "<p>A declaration introduces a name into the program; a definition provides a unique description of an entity (e.g. type, instance, and function). Declarations can be repeated in a given scope, it introduces a name in a given scope. There must be exactly one definition of every object, function or class used in a C++ program.\nA declaration is a definition unless:</p>\n<pre><code>* it declares a function without specifying its body,\n* it contains an extern specifier and no initializer or function body,\n* it is the declaration of a static class data member without a class definition,\n* it is a class name definition,\n* it is a typedef declaration.\n</code></pre>\n<p>A definition is a declaration unless:</p>\n<pre><code>* it defines a static class data member,\n* it defines a non-inline member function.\n</code></pre>\n", "LastActivityDate": "2010-07-27T09:41:21.593", "CommentCount": "3", "CreationDate": "2010-07-27T09:41:21.593", "ParentId": "1410563", "Score": "0", "OwnerUserId": "401519"}, "1412496": {"Id": "1412496", "PostTypeId": "2", "Body": "<p>There are interesting edge cases in C++ (some of them in C too). Consider</p>\n<pre><code>T t;\n</code></pre>\n<p>That can be a definition or a declaration, depending on what type <code>T</code> is:</p>\n<pre><code>typedef void T();\nT t; // declaration of function \"t\"\n\nstruct X { \n  T t; // declaration of function \"t\".\n};\n\ntypedef int T;\nT t; // definition of object \"t\".\n</code></pre>\n<p>In C++, when using templates, there is another edge case. </p>\n<pre><code>template &lt;typename T&gt;\nstruct X { \n  static int member; // declaration\n};\n\ntemplate&lt;typename T&gt;\nint X&lt;T&gt;::member; // definition\n\ntemplate&lt;&gt;\nint X&lt;bool&gt;::member; // declaration!\n</code></pre>\n<p>The last declaration was <em>not</em> a definition. It's the declaration of an explicit specialization of the static member of <code>X&lt;bool&gt;</code>. It tells the compiler: \"If it comes to instantiating <code>X&lt;bool&gt;::member</code>, then don't instantiate the definition of the member from the primary template, but use the definition found elsewhere\". To make it a definition, you have to supply an initializer</p>\n<pre><code>template&lt;&gt;\nint X&lt;bool&gt;::member = 1; // definition, belongs into a .cpp file.\n</code></pre>\n", "LastActivityDate": "2009-09-11T18:15:37.810", "CommentCount": "0", "CreationDate": "2009-09-11T18:15:37.810", "ParentId": "1410563", "Score": "40", "OwnerUserId": "34509"}, "26908152": {"Id": "26908152", "PostTypeId": "2", "Body": "<p>The concept of Declaration and Definition will form a pitfall when you are using the extern storage class because your definition will be in some other location and you are declaring the variable in your local code file (page). One difference between C and C++ is that in C you the declarations are done normally at the beginning of a function or code page. In C++ it's not like that. You can declare at a place of your choice.</p>\n", "LastEditorUserId": "15168", "LastActivityDate": "2015-08-30T15:25:13.827", "Score": "0", "CreationDate": "2014-11-13T11:44:27.080", "ParentId": "1410563", "CommentCount": "1", "OwnerUserId": "4233968", "LastEditDate": "2015-08-30T15:25:13.827"}, "1411005": {"Id": "1411005", "PostTypeId": "2", "Body": "<p>From the C++ standard section 3.1:</p>\n<blockquote>\n<p id=\"so_1410563_1411005_0\">A <strong>declaration</strong> introduces names into a translation unit or redeclares names introduced by previous\n  declarations. A declaration specifies the interpretation and attributes of these names.</p>\n</blockquote>\n<p>The next paragraph states (emphasis mine) that a declaration <strong>is a definition</strong> unless...</p>\n<p>... it declares a function without specifying the function\u2019s body</p>\n<pre><code>void sqrt(double);  // declares sqrt\n</code></pre>\n<p>... it declares a static member within a class definition</p>\n<pre><code>struct X\n{\n    int a;         // defines a\n    static int b;  // declares b\n};\n</code></pre>\n<p>... it declares a class name</p>\n<pre><code>class Y;\n</code></pre>\n<p>... it contains the <code>extern</code> keyword without an initializer or function body</p>\n<pre><code>extern const int i = 0;  // defines i\nextern int j;  // declares j\nextern \"C\"\n{\n    void foo();  // declares foo\n}\n</code></pre>\n<p>... or is a <code>typedef</code> or <code>using</code> statement.</p>\n<pre><code>typedef long LONG_32;  // declares LONG_32\nusing namespace std;   // declares std\n</code></pre>\n<p>Now for the big reason why it's important to understand the difference between a declaration and definition: the <strong>One Definition Rule</strong>.  From section 3.2.1 of the C++ standard:</p>\n<blockquote>\n<p id=\"so_1410563_1411005_1\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n", "LastEditorUserId": "1858225", "LastActivityDate": "2014-07-28T22:18:17.853", "Score": "151", "CreationDate": "2009-09-11T13:53:50.610", "ParentId": "1410563", "CommentCount": "4", "OwnerUserId": "46821", "LastEditDate": "2014-07-28T22:18:17.853"}, "1411340": {"Id": "1411340", "PostTypeId": "2", "Body": "<p>Couldnt you state in the most general terms possible, that a declaration is an identifier in which no storage is allocated and a definition actually allocates storage from a declared identifier? </p>\n<p>One interesting thought - a template cannot allocate storage until the class or function is linked with the type information.  So is the template identifier a declaration or definition?  It should be a declaration since no storage is allocated, and you are simply 'prototyping' the template class or function.</p>\n", "OwnerDisplayName": "user154171", "LastActivityDate": "2009-09-11T14:46:45.193", "Score": "2", "CreationDate": "2009-09-11T14:46:45.193", "ParentId": "1410563", "CommentCount": "2"}, "17329051": {"Id": "17329051", "PostTypeId": "2", "Body": "<h2>C++11 Update</h2>\n<p>Since I don't see an answer pertinent to C++11 here's one.</p>\n<p>A declaration is a <em>definition</em> unless it declares a/n:</p>\n<ul>\n<li>opaque enum - <code>enum X : int;</code></li>\n<li>template parameter - <em>T</em> in <code>template&lt;typename T&gt; class MyArray;</code></li>\n<li>parameter declaration - <em>x</em> and <em>y</em> in <code>int add(int x, int y);</code></li>\n<li>alias declaration - <code>using IntVector = std::vector&lt;int&gt;;</code></li>\n<li>static assert declaration - <code>static_assert(sizeof(int) == 4, \"Yikes!\")</code></li>\n<li>attribute declaration (implementation-defined)</li>\n<li>empty declaration <code>;</code></li>\n</ul>\n<p>Additional clauses inherited from C++03 by the above list:</p>\n<ul>\n<li>function declaration - <em>add</em> in <code>int add(int x, int y);</code></li>\n<li>extern specifier containing declaration or a linkage specifier - <code>extern int a;</code> or <code>extern \"C\" { ... };</code></li>\n<li>static data member in a class - <em>x</em> in <code>class C { static int x; };</code></li>\n<li>class/struct declaration - <code>struct Point;</code></li>\n<li>typedef declaration - <code>typedef int Int;</code></li>\n<li>using declaration - <code>using std::cout;</code></li>\n<li>using directive - <code>using namespace NS;</code></li>\n</ul>\n<p>A template-declaration is a declaration. A template-declaration is also a definition if its declaration defines a function, a class, or a static data member.</p>\n<p>Examples from the standard which differentiates between declaration and definition that I found helpful in understanding the nuances between them:</p>\n<pre><code>// except one all these are definitions\nint a;                                  // defines a\nextern const int c = 1;                 // defines c\nint f(int x) { return x + a; }          // defines f and defines x\nstruct S { int a; int b; };             // defines S, S::a, and S::b\nstruct X {                              // defines X\n    int x;                              // defines non-static data member x\n    static int y;                       // DECLARES static data member y\n    X(): x(0) { }                       // defines a constructor of X\n};\nint X::y = 1;                           // defines X::y\nenum { up , down };                     // defines up and down\nnamespace N { int d; }                  // defines N and N::d\nnamespace N1 = N;                       // defines N1\nX anX;                                  // defines anX\n\n\n// all these are declarations\nextern int a;                           // declares a\nextern const int c;                     // declares c\nint f(int);                             // declares f\nstruct S;                               // declares S\ntypedef int Int;                        // declares Int\nextern X anotherX;                      // declares anotherX\nusing N::d;                             // declares N::d\n\n\n// specific to C++11 - these are not from the standard\nenum X : int;                           // declares X with int as the underlying type\nusing IntVector = std::vector&lt;int&gt;;     // declares IntVector as an alias to std::vector&lt;int&gt;\nstatic_assert(X::y == 1, \"Oops!\");      // declares a static_assert which can render the program ill-formed or have no effect like an empty declaration, depending on the result of expr\ntemplate &lt;class T&gt; class C;             // declares template class C\n;                                       // declares nothing\n</code></pre>\n", "LastEditorUserId": "183120", "LastActivityDate": "2013-06-28T19:41:16.577", "Score": "11", "CreationDate": "2013-06-26T19:43:06.960", "ParentId": "1410563", "CommentCount": "0", "OwnerUserId": "183120", "LastEditDate": "2013-06-28T19:41:16.577"}, "22360066": {"Id": "22360066", "PostTypeId": "2", "Body": "<p>Find similar answers here: <a href=\"http://sickprogrammersarea.blogspot.in/2014/03/technical-interview-questions-on-c_6.html\" rel=\"nofollow\">Technical Interview Questions in C</a></p>\n<p>A <strong>declaration</strong> provides a name to the program; a <strong>definition</strong> provides a unique description of an entity (e.g. type, instance, and function) within the program. Declarations can be repeated in a given scope, it introduces a name in a given scope. </p>\n<p>A declaration is a definition unless</p>\n<ul>\n<li>Declaration declares a function without specifying its body,</li>\n<li>Declaration contains an extern specifier and no initializer or function body,</li>\n<li>Declaration is the declaration of a static class data member without a class definition,</li>\n<li>Declaration is a class name definition,</li>\n</ul>\n<p>A definition is a declaration unless:</p>\n<ul>\n<li>Definition defines a static class data member,</li>\n<li>Definition defines a non-inline member function.</li>\n</ul>\n", "LastEditorUserId": "15168", "LastActivityDate": "2014-12-18T07:47:52.263", "Score": "2", "CreationDate": "2014-03-12T18:01:50.223", "ParentId": "1410563", "CommentCount": "0", "OwnerUserId": "3240133", "LastEditDate": "2014-12-18T07:47:52.263"}, "10196705": {"Id": "10196705", "PostTypeId": "2", "Body": "<p>Rule of thumb:</p>\n<ul>\n<li><p>A <strong>declaration</strong> tells the compiler how to interpret the variable's data in memory. This is needed for every access.</p></li>\n<li><p>A <strong>definition</strong> reserves the memory to make the variable existing. This has to happen exactly once before first access.</p></li>\n</ul>\n", "LastActivityDate": "2012-04-17T18:15:50.063", "CommentCount": "1", "CreationDate": "2012-04-17T18:15:50.063", "ParentId": "1410563", "Score": "2", "OwnerUserId": "1328780"}, "1412523": {"Id": "1412523", "PostTypeId": "2", "Body": "<p>Declaration \"Somewhere, there exists a foo\".</p>\n<p>Definition: \"...and here it is!\"</p>\n", "LastActivityDate": "2009-09-11T18:20:35.663", "CommentCount": "1", "CreationDate": "2009-09-11T18:20:35.663", "ParentId": "1410563", "Score": "94", "OwnerUserId": "20481"}, "14134340": {"Id": "14134340", "PostTypeId": "2", "Body": "<p>Declaration means give name and type to a variable (in case of variable declaration) \neg: </p>\n<pre><code> int i;  \n</code></pre>\n<p>or give name,return type and parameter(s) type to a function without body(in case of function declaration)</p>\n<p>eg:  </p>\n<pre><code>int max(int, int);\n</code></pre>\n<p>whereas definition means assign value to a variable (in case of variable definition).\neg:</p>\n<pre><code>i = 20;\n</code></pre>\n<p>or provide/add body(functionality) to a function is called function definition.</p>\n<p>eg: </p>\n<pre><code> int max(int a, int b)\n {\n    if(a&gt;b)   return a;\n    return b;  \n }\n</code></pre>\n<p>many time declaration and definition can be done together as:</p>\n<pre><code>int i=20;   \n</code></pre>\n<p>and</p>\n<pre><code>int max(int a, int b)\n{\n    if(a&gt;b)   return a;\n    return b;    \n} \n</code></pre>\n<p>In above cases we define and declare variable i and function max()</p>\n", "LastActivityDate": "2013-01-03T06:54:23.507", "CommentCount": "6", "CreationDate": "2013-01-03T06:54:23.507", "ParentId": "1410563", "Score": "1", "OwnerUserId": "1944816"}, "9885710": {"Id": "9885710", "PostTypeId": "2", "Body": "<p>Difference between declaring and defining with functions:\nThe prototype statement for a function declares it, i.e. tells the compiler about the function - its name, return type, and number and type of its parameters.\nThe function header, followed by the body of the function, defines the function - giving the details of the steps to perform the function operation.</p>\n<p>Ex.</p>\n<p>Code:</p>\n<pre><code>//Declare\nint foo(int);\n\n//Define\nint foo(int){\n...\n}\n</code></pre>\n<p>With Respect to Variables:\nFor automatic and register variables, there is no difference between definition and declaration.\nThe process of declaring an automatic or a register variable defines the variable name and allocates appropriate memory.</p>\n<p>However, for external variables:\nBecause memory for a variable must be allocated only once, to ensure that access to the variable always refers to the same cell.\nall variables must be defined once and only once.</p>\n<p>If an external variable is to be used in a file other than the one in which it is defined, a mechanism is needed to \"connect\" such a use with the uniquely defined external variable cell allocated for it. This process of connecting the references of the same external variable in different files, is called resolving the references.</p>\n<p>It may be defined and declared with a declaration statement outside any function, with no storage class specifier. Such a declaration allocates memory for the variable. A declaration statement may also be used to simply declare a variable name with the extern storage class specifier at the beginning of the declaration. Such a declaration specifies that the variable is defined elsewhere, i.e. memory for this variable is allocated in another file. Thus, access to an external variable in a file other than the one in which it is defined is possible if it is declared with the keyword extern; no new memory is allocated. Such a declaration tells the compiler that the variable is defined elsewhere, and the code is compiled with the external variable left unresolved. The reference to the external variable is resolved during the linking process.</p>\n<p>Ex.</p>\n<p>Code</p>\n<pre><code>//file1.c\nextern char stack[10];\nextern int stkptr;\n....\n\n//file2.c\nchar stack[10];\nint stkptr;\n....\n</code></pre>\n<p>These declarations tell the compiler that the variables stack[] and stkptr are defined elsewhere, usually in some other file. If the keyword extern were omitted, the variables would be considered to be new ones and memory would be allocated for them. Remember, access to the same external variable defined in another file is possible only if the keyword extern is used in the declaration. </p>\n", "LastActivityDate": "2012-03-27T08:19:11.443", "CommentCount": "1", "CreationDate": "2012-03-27T08:19:11.443", "ParentId": "1410563", "Score": "0", "OwnerUserId": "1312147"}, "46548256": {"Id": "46548256", "PostTypeId": "2", "Body": "<p>To understand the difference between declaration and definition we need to see the assembly code:</p>\n<pre><code>uint8_t   ui8 = 5;  |   movb    $0x5,-0x45(%rbp)\nint         i = 5;  |   movl    $0x5,-0x3c(%rbp)\nuint32_t ui32 = 5;  |   movl    $0x5,-0x38(%rbp)\nuint64_t ui64 = 5;  |   movq    $0x5,-0x10(%rbp)\ndouble   doub = 5;  |   movsd   0x328(%rip),%xmm0        # 0x400a20\n                        movsd   %xmm0,-0x8(%rbp)\n</code></pre>\n<p>and this is only definition:</p>\n<pre><code>ui8 = 5;   |   movb    $0x5,-0x45(%rbp)\ni = 5;     |   movl    $0x5,-0x3c(%rbp)\nui32 = 5;  |   movl    $0x5,-0x38(%rbp)\nui64 = 5;  |   movq    $0x5,-0x10(%rbp)\ndoub = 5;  |   movsd   0x328(%rip),%xmm0        # 0x400a20\n               movsd   %xmm0,-0x8(%rbp)\n</code></pre>\n<p>As you can see nothing change.</p>\n<p>Declaration is different from definition because it gives information used only by the compiler. For example uint8_t tell the compiler to use asm function movb.</p>\n<p>See that:</p>\n<pre><code>uint def;                  |  no instructions\nprintf(\"some stuff...\");   |  [...] callq   0x400450 &lt;printf@plt&gt;\ndef=5;                     |  movb    $0x5,-0x45(%rbp)\n</code></pre>\n<p>Declaration haven't an equivalent instruction because it is no something to be executed.</p>\n<p>Furthermore declaration tells the compiler the scope of the variable.</p>\n<p>We can say that declaration is an information used by the compiler to establish the correct use of the variable and for how long some memory belongs to certain variable.</p>\n", "LastActivityDate": "2017-10-03T15:30:37.030", "CommentCount": "0", "CreationDate": "2017-10-03T15:30:37.030", "ParentId": "1410563", "Score": "1", "OwnerUserId": "6135025"}, "46843603": {"Id": "46843603", "PostTypeId": "2", "Body": "<p>A variable is <strong>declared</strong> when the compiler is informed that a variable exists (and this is its type); it does not allocate the storage for the variable at that point.</p>\n<p>A variable is <strong>defined</strong> when the compiler allocates the storage for the variable.</p>\n", "LastActivityDate": "2017-10-20T06:37:37.593", "CommentCount": "0", "CreationDate": "2017-10-20T06:37:37.593", "ParentId": "1410563", "Score": "0", "OwnerUserId": "5999064"}, "4622563": {"Id": "4622563", "PostTypeId": "2", "Body": "<p>definition means actual function written &amp; declaration means simple declare function \nfor e.g. </p>\n<pre><code>void  myfunction(); //this is simple declaration\n</code></pre>\n<p>and </p>\n<pre><code>void myfunction()\n{\n some statement;    \n}\n</code></pre>\n<p>this is definition of function myfunction </p>\n", "OwnerDisplayName": "user565367", "LastEditorUserId": "168175", "LastActivityDate": "2011-09-02T18:46:47.310", "Score": "3", "CreationDate": "2011-01-07T04:42:05.307", "ParentId": "1410563", "CommentCount": "1", "LastEditDate": "2011-09-02T18:46:47.310"}, "39949479": {"Id": "39949479", "PostTypeId": "2", "Body": "<p>My favorite example is \"int Num = 5\" here your variable is 1. defined as int 2. declared as Num and 3. instantiated with a value of five. We</p>\n<ul>\n<li>Define the type of an object, which may be built-in or a class or struct.</li>\n<li>Declare the name of an object, so anything with a name has been declared which includes Variables, Funtions, etc.</li>\n</ul>\n<p>A class or struct allows you to change how objects will be defined when it is later used. For example</p>\n<ul>\n<li>One may declare a heterogeneous variable or array which are not specifically defined.</li>\n<li>Using an offset in C++ you may define an object which does not have a declared name.</li>\n</ul>\n<p>When we learn programming these two terms are often confused because we often do both at the same time. </p>\n", "LastActivityDate": "2016-10-09T23:15:02.627", "CommentCount": "1", "CreationDate": "2016-10-09T23:15:02.627", "ParentId": "1410563", "Score": "0", "OwnerUserId": "564588"}, "41463559": {"Id": "41463559", "PostTypeId": "2", "Body": "<p><strong>Declaration :</strong> </p>\n<pre><code>int a; // this declares the variable 'a' which is of type 'int'\n</code></pre>\n<p>Thus declaration associates the variable with a type.</p>\n<p>Following are some examples of declaration.</p>\n<pre><code>int a;\nfloat b;\ndouble c;\n</code></pre>\n<p>Now <strong>function declaration :</strong></p>\n<pre><code>int fun(int a,int b); \n</code></pre>\n<p>Note the semicolon at the end of function so it says it is only a declaration. Compiler knows that somewhere in the program that function will be <strong>defined</strong> with that prototype. Now if the compiler gets a function call something like this </p>\n<pre><code>int b=fun(x,y,z);\n</code></pre>\n<p>Compiler will throw an error saying that there is no such function. Because it doesn't has any prototype for that function.</p>\n<p>Note the difference between two programs.</p>\n<p><strong>Program 1</strong></p>\n<pre><code>#include &lt;stdio.h&gt;\nvoid print(int a)\n{\n     printf(\"%d\",a);\n}\nmain()\n{\n    print(5);\n}\n</code></pre>\n<p>In this, print function is declared and defined as well. Since function call is coming after the definition. Now see the next program.</p>\n<p><strong>Program 2</strong></p>\n<pre><code> #include &lt;stdio.h&gt;\n void print(int a); // In this case this is essential\n main()\n {\n    print(5);\n }\n void print(int a)\n {\n     printf(\"%d\",a);\n }\n</code></pre>\n<p>It is essential because function call precedes definition so compiler must know whether there is any such function. So we declare the function which will inform the compiler.</p>\n<p><strong>Definition  :</strong> </p>\n<p>This part of defining a function is called Definition. It says what to do inside the function. </p>\n<pre><code>void print(int a)\n{\n    printf(\"%d\",a);\n}\n</code></pre>\n<p>Now with the variables.</p>\n<pre><code>int a; //declaration\na=10; //definition \n</code></pre>\n<p>Some times declaration and definition are grouped into a single statement like this.</p>\n<pre><code>int a=10;\n</code></pre>\n", "LastActivityDate": "2017-01-04T12:13:02.063", "CommentCount": "0", "CreationDate": "2017-01-04T12:13:02.063", "ParentId": "1410563", "Score": "3", "OwnerUserId": "5349104"}, "1410563": {"ViewCount": "231128", "Body": "<p>The meaning of both eludes me.</p>\n", "AcceptedAnswerId": "1410632", "Title": "What is the difference between a definition and a declaration?", "CreationDate": "2009-09-11T12:27:12.883", "Id": "1410563", "CommentCount": "11", "FavoriteCount": "380", "PostTypeId": "1", "LastEditDate": "2017-03-09T18:49:36.663", "LastEditorUserId": "6850771", "LastActivityDate": "2017-10-20T06:37:37.593", "Score": "637", "OwnerUserId": "142168", "Tags": "<c><declaration><terminology><definition><c++-faq>", "AnswerCount": "23"}, "17437044": {"Id": "17437044", "PostTypeId": "2", "Body": "<p>This is going to sound really cheesy, but it's the best way I've been able to keep the terms straight in my head:</p>\n<p>Declaration: Picture Thomas Jefferson giving a speech... \"I HEREBY DECLARE THAT THIS FOO EXISTS IN THIS SOURCE CODE!!!\"</p>\n<p>Definition: picture a dictionary, you are looking up Foo and what it actually means.</p>\n", "LastActivityDate": "2013-07-02T22:46:52.293", "CommentCount": "0", "CreationDate": "2013-07-02T22:46:52.293", "ParentId": "1410563", "Score": "1", "OwnerUserId": "2457733"}});