post_cb({"29635532": {"CommentCount": "5", "ViewCount": "1040", "PostTypeId": "1", "LastEditorUserId": "331059", "CreationDate": "2015-04-14T19:11:01.760", "LastActivityDate": "2015-04-14T20:03:31.753", "Title": "How to properly explicitly instantiate a template class with fully-specialized members?", "LastEditDate": "2015-04-14T19:25:35.663", "Id": "29635532", "Score": "4", "Body": "<p>Let's say we have the following files:</p>\n<p>foo.h</p>\n<pre><code>namespace ns\n{\n    template &lt;typename T&gt;\n    class Foo\n    {\n    public:\n        Foo();\n\n        ~Foo();\n\n        void DoIt();\n    };\n}\n</code></pre>\n<p>foo.cpp</p>\n<pre><code>#include \"foo.h\"\n\n#include &lt;iostream&gt;\n\nnamespace ns\n{\n    template &lt;typename T&gt;\n    Foo&lt;T&gt;::Foo() { std::cout &lt;&lt; \"Being constructed.\" &lt;&lt; std::endl; }\n\n    template &lt;typename T&gt;\n    Foo&lt;T&gt;::~Foo() { std::cout &lt;&lt; \"Being destroyed.\" &lt;&lt; std::endl; }\n\n    template &lt;&gt;\n    void Foo&lt;int&gt;::DoIt()\n    {\n        std::cout &lt;&lt; \"Int\" &lt;&lt; std::endl;\n    }\n\n    template &lt;&gt;\n    void Foo&lt;double&gt;::DoIt()\n    {\n        std::cout &lt;&lt; \"Double\" &lt;&lt; std::endl;\n    }\n\n    template class Foo&lt;int&gt;;\n    template class Foo&lt;double&gt;;\n}\n</code></pre>\n<p>Is that the correct way to do explicit instantiation, assuming the type will only ever be used with int or double as type parameters? Or do you need to declare the explicit specialization in the header file as well?</p>\n<p>Doing it the way I've shown works with visual studio, but a coworker has been having problems with GCC (Although I've just checked, and I think that's due to something else, but I'll post this question anyway)</p>\n", "Tags": "<c++><template-specialization><explicit-instantiation>", "OwnerUserId": "331059", "AnswerCount": "1"}, "29635789": {"ParentId": "29635532", "PostTypeId": "2", "CommentCount": "15", "Body": "<p>[temp.expl.spec]/p6 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_29635532_29635789_0\">If a template, a member template or a member of a class template is\n  explicitly specialized then <strong>that specialization shall be declared\n  before the first use of that specialization that would cause an\n  implicit instantiation to take place, in every translation unit in\n  which such a use occurs</strong>; no diagnostic is required.</p>\n</blockquote>\n<p>In fact, if you combine them inside a single TU, both clang and gcc <a href=\"http://coliru.stacked-crooked.com/a/b6c257d3fbee97a2\" rel=\"nofollow\">will issue an error</a>. You need to declare these explicit specializations.</p>\n<hr>\n<p>And since we are really close to it, I'll just quote [temp.expl.spec]/p7 as well, because I can:</p>\n<blockquote>\n<p id=\"so_29635532_29635789_1\">The placement of explicit specialization declarations for function\n  templates, class templates, variable templates, member functions of\n  class templates, static data members of class templates, member\n  classes of class templates, member enumerations of class templates,\n  member class templates of class templates, member function templates\n  of class templates, static data member templates of class templates,\n  member functions of member templates of class templates, member\n  functions of member templates of non-template classes, static data\n  member templates of non-template classes, member function templates of\n  member classes of class templates, etc., and the placement of partial\n  specialization declarations of class templates, variable templates,\n  member class templates of non-template classes, static data member\n  templates of non-template classes, member class templates of class\n  templates, etc., can affect whether a program is well-formed according\n  to the relative positioning of the explicit specialization\n  declarations and their points of instantiation in the translation unit\n  as specified above and below. When writing a specialization, be\n  careful about its location; or to make it compile will be such a trial\n  as to kindle its self-immolation.</p>\n</blockquote>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-04-14T20:03:31.753", "Id": "29635789", "Score": "5", "CreationDate": "2015-04-14T19:26:22.570", "LastActivityDate": "2015-04-14T20:03:31.753"}, "bq_ids": {"n4140": {"so_29635532_29635789_1": {"section_id": 269, "quality": 0.9921875, "length": 127}, "so_29635532_29635789_0": {"section_id": 268, "quality": 1.0, "length": 29}}, "n3337": {"so_29635532_29635789_1": {"section_id": 260, "quality": 0.8203125, "length": 105}, "so_29635532_29635789_0": {"section_id": 259, "quality": 1.0, "length": 29}}, "n4659": {"so_29635532_29635789_1": {"section_id": 276, "quality": 0.9921875, "length": 127}, "so_29635532_29635789_0": {"section_id": 275, "quality": 1.0, "length": 29}}}});