post_cb({"39992802": {"ParentId": "39992588", "CommentCount": "1", "Body": "<p>The wording has simply been moved into the description for <code>operator delete</code>:</p>\n<blockquote>\n<p id=\"so_39992588_39992802_0\"><code>[new.delete.single]/12:</code> Requires: <code>ptr</code> shall be a null pointer or its value shall represent the address of a block of memory allocated by an earlier call to a (possibly replaced) <code>operator new(std::size_t)</code> or <code>operator new(std::size_t, std::align_val_t)</code> which has not been invalidated by an intervening call to <code>operator delete</code>.</p>\n</blockquote>\n<p>See <a href=\"https://github.com/cplusplus/draft/commit/e51a2152599bce93d72b371590d03960f99f85e3#diff-9ad056ad00075480a9b6f87f89842dafR1820\" rel=\"nofollow\">here</a> for the change in the GitHub repo. There is similar wording for the array version. Nothing has changed semantically, it's just the way it's expressed in the standard.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "39992802", "Score": "1", "CreationDate": "2016-10-12T07:26:53.710", "LastActivityDate": "2016-10-12T07:26:53.710"}, "39993006": {"ParentId": "39992588", "CommentCount": "0", "Body": "<p>In any event, that paragraph deals with allocation/deallocation functions. Mismatched <code>new</code>/<code>delete</code> expressions are handled in <a href=\"https://timsong-cpp.github.io/cppwp/expr.delete#2\" rel=\"nofollow\">[expr.delete]/2</a>, which remains intact:</p>\n<blockquote>\n<p id=\"so_39992588_39993006_0\">In the first alternative (delete object), the value of the operand of\n  delete may be a null pointer value, a pointer to a non-array object\n  created by a previous <em>new-expression</em>, or a pointer to a subobject\n  ([intro.object]) representing a base class of such an object (Clause\n  [class.derived]). If not, the behavior is undefined. In the second\n  alternative (delete array), the value of the operand of delete may be\n  a null pointer value or a pointer value that resulted from a previous\n  array <em>new-expression</em>.<sup>82</sup> If not, the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "39993006", "Score": "4", "CreationDate": "2016-10-12T07:36:45.923", "LastActivityDate": "2016-10-12T07:36:45.923"}, "39992588": {"CommentCount": "2", "ViewCount": "148", "PostTypeId": "1", "LastEditorUserId": "3919155", "CreationDate": "2016-10-12T07:13:17.177", "LastActivityDate": "2016-10-12T08:15:12.447", "Title": "Mismatched delete no longer undefined behavior?", "AcceptedAnswerId": "39993006", "LastEditDate": "2016-10-12T08:15:12.447", "Id": "39992588", "Score": "2", "Body": "<p>I noticed that the <a href=\"https://github.com/cplusplus/draft\" rel=\"nofollow\">C++ draft</a> as of <a href=\"https://github.com/cplusplus/draft/commit/e51a2152599bce93d72b371590d03960f99f85e3\" rel=\"nofollow\">e51a2152</a> no longer includes the following wording:</p>\n<blockquote>\n<p id=\"so_39992588_39992588_0\">the behavior is undefined if the value supplied to <code>operator delete(void*)</code> in the standard library is not one of the values returned by a previous invocation of either <code>operator new(std::size_t)</code> or <code>operator new(std::size_t, const std::nothrow_t&amp;)</code> in the standard library, and the behavior is undefined if the value supplied to <code>operator delete[](void*)</code> in the standard library is not one of the values returned by a previous invocation of either <code>operator new[](std::size_t)</code> or <code>operator new[](std::size_t, const std::nothrow_t&amp;)</code> in the standard library.</p>\n</blockquote>\n<p>Does this mean that code like </p>\n<pre><code>int * const p = new int[42];\ndelete p; // instead of delete[] p;\n</code></pre>\n<p>will no longer have undefined behavior, or am I missing something?</p>\n", "Tags": "<c++><language-lawyer><dynamic-memory-allocation><delete-operator><c++1z>", "OwnerUserId": "3919155", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_39992588_39992802_0": {"section_id": 6823, "quality": 0.5555555555555556, "length": 15}, "so_39992588_39993006_0": {"section_id": 6106, "quality": 0.8958333333333334, "length": 43}, "so_39992588_39992588_0": {"section_id": 7182, "quality": 1.0, "length": 40}}, "n3337": {"so_39992588_39992802_0": {"section_id": 6578, "quality": 0.5555555555555556, "length": 15}, "so_39992588_39993006_0": {"section_id": 5872, "quality": 0.8958333333333334, "length": 43}, "so_39992588_39992588_0": {"section_id": 6926, "quality": 1.0, "length": 40}}, "n4659": {"so_39992588_39992802_0": {"section_id": 8315, "quality": 0.9259259259259259, "length": 25}, "so_39992588_39993006_0": {"section_id": 7603, "quality": 0.8958333333333334, "length": 43}}}});