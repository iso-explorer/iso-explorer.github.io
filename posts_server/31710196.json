post_cb({"31710283": {"Id": "31710283", "PostTypeId": "2", "Body": "<p>This question is sort of a non-starter, since <a href=\"https://stackoverflow.com/questions/21934810/why-a-class-has-only-one-destructor\">you can only have one destructor</a> anyway. Why would you need to add a <code>default</code> specifier?</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-29T20:16:23.100", "Score": "-4", "CreationDate": "2015-07-29T20:16:23.100", "ParentId": "31710196", "CommentCount": "2", "LastEditDate": "2017-05-23T11:52:23.577", "OwnerUserId": "2209008"}, "bq_ids": {"n4140": {"so_31710196_31710727_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7019}}, "n3337": {"so_31710196_31710727_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6765}}, "n4659": {"so_31710196_31710727_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 8516}}}, "31710727": {"Id": "31710727", "PostTypeId": "2", "Body": "<p>No, it is not possible.</p>\n<p>By declaring the member function with the <code>= default</code> specifier, you are providing a function definition.</p>\n<p>From the working draft of the C++14 standard (N3936):</p>\n<blockquote>\n<p id=\"so_31710196_31710727_0\">\u00a7 10.4 Note: A function declaration cannot provide both a pure-specifier and a definition</p>\n</blockquote>\n<p><a href=\"https://github.com/cplusplus/draft/raw/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf\" rel=\"nofollow\">https://github.com/cplusplus/draft/raw/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf</a></p>\n", "LastEditorUserId": "1628701", "LastActivityDate": "2015-07-29T21:18:51.590", "Score": "2", "CreationDate": "2015-07-29T20:43:55.450", "ParentId": "31710196", "CommentCount": "3", "LastEditDate": "2015-07-29T21:18:51.590", "OwnerUserId": "1628701"}, "31710196": {"ViewCount": "347", "Body": "<p>Is it possible to declare a destructor as pure virtual and use the default keyword? For example, I can't seem to make code like this work:</p>\n<pre><code>class MyClass\n{\npublic:\n  // Is there a way to combine pure virtual and default?\n  virtual ~ MyClass() = 0,default;\n};\n</code></pre>\n<p>One can of course later do:</p>\n<pre><code>MyClass::~ MyClass() = default;\n</code></pre>\n<p>Also, if the destructor is not pure virtual, the default keyword does work when it follows the declaration.</p>\n", "AcceptedAnswerId": "31710654", "Title": "Pure Virtual Destructor with Default Keyword", "CreationDate": "2015-07-29T20:10:58.647", "Id": "31710196", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-29T21:18:51.590", "Score": "3", "OwnerUserId": "1599766", "Tags": "<c++><c++11><virtual-functions>", "AnswerCount": "3"}, "31710654": {"Id": "31710654", "PostTypeId": "2", "Body": "<p><strong>No.</strong></p>\n<p>You will have to write a separate definition and <code>default</code> it there, as you've shown.</p>\n<p>The presence of a <em>pure-specifier</em> precludes the presence of a definition at the same location, even when that definition is just a <code>= default</code>.</p>\n", "LastActivityDate": "2015-07-29T20:39:52.107", "Score": "7", "CreationDate": "2015-07-29T20:39:52.107", "ParentId": "31710196", "CommentCount": "0", "OwnerUserId": "560648"}});