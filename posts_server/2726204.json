post_cb({"bq_ids": {"n4140": {"so_2726204_2726221_1": {"length": 6, "quality": 0.75, "section_id": 6306}}, "n3337": {"so_2726204_2726221_1": {"length": 6, "quality": 0.75, "section_id": 6063}}, "n4659": {"so_2726204_2726221_1": {"length": 6, "quality": 0.75, "section_id": 7817}}}, "2726383": {"Id": "2726383", "PostTypeId": "2", "Body": "<p>Working from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"noreferrer\">2005-10-19 C++ working draft</a> (since I don't have a standard handy):</p>\n<p>Section 16.3 defines the grammar for <code>#define</code> to be <code>#define identifier replacement-list-newline</code> (object-like macros) or one of several constructions beginning with <code>#define identifier lparen</code> (function-like macros). <code>identifier</code>s are defined in section 2.10 to be <code>identifier-nondigit | identifier identifier-nondigit | identifier digit</code>. Section 2.11 indicates that a certain list of <em>identifiers</em> are unconditionally treated as keywords in phase 7 of compilation (section 2.1), and I conclude that they are therefore not treated specially in phase 4, which is preprocessor expansion. <strong>Thus, it appears that the standard requires the preprocessor to allow you to redefine language keywords (listed in Section 2.11)</strong>.</p>\n<p>However, the preprocessor has a keyword of its own, namely <code>defined</code>, as well as a list of predefined macros (Section 16.8). Section 16.8 states that the behavior is undefined if you redefine these, but does not prohibit the preprocessor from recognizing these as macro names.</p>\n", "LastActivityDate": "2010-04-28T02:02:57.490", "CommentCount": "11", "CreationDate": "2010-04-28T02:02:57.490", "ParentId": "2726204", "Score": "5", "OwnerUserId": "197788"}, "2726221": {"Id": "2726221", "PostTypeId": "2", "Body": "<p>In C++, the closest thing to forbidding <code>#define</code>ing a keyword is \u00a717.4.3.1.1/2, which only disallows it in a translation unit that includes a standard library header:</p>\n<blockquote>\n<p id=\"so_2726204_2726221_0\">A translation unit that includes a header shall not contain any macros that define names declared or defined in that header.  Nor shall such a translation unit define macros for names lexically identical to keywords.</p>\n</blockquote>\n<p><s>The second sentence of that paragraph has been changed in C++0x to outright forbid <code>#define</code>ing a keyword (C++0x FCD \u00a717.6.3.3.1):</s></p>\n<blockquote>\n<p id=\"so_2726204_2726221_1\">A translation unit shall not #define or #undef names lexically identical to keywords.\n  </p></blockquote>\n<p><strong>Edit:</strong>  As pointed out by Ken Bloom in <a href=\"https://stackoverflow.com/questions/2726204/c-preprocessor-define-ing-a-keyword-is-it-standards-conforming/2726383#2726383\">comments to his answer</a>, the rules have not changed in C++0x; the text has just been rearranged to confuse people like me.  :-)</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-05-15T19:24:16.700", "Score": "20", "CreationDate": "2010-04-28T01:10:16.370", "ParentId": "2726204", "CommentCount": "8", "OwnerUserId": "151292", "LastEditDate": "2017-05-23T12:13:51.553"}, "2726204": {"ViewCount": "3609", "Body": "<p>Help settle the debate that's going on in the comments at <a href=\"https://stackoverflow.com/questions/2725044/can-i-assume-booltrue-int1-for-any-c-compiler/2725063#2725063\">this question about bool and 1</a>:</p>\n<p>Can a standards-conforming C++ preprocessor allow one to use <code>#define</code> to redefine a language keyword? If so, must a standards-conforming C++ preprocessor allow this?</p>\n<p>If a C++ program redefines a language keyword, can that program itself be standards conforming?</p>\n", "AcceptedAnswerId": "2726221", "Title": "C++ preprocessor #define-ing a keyword. Is it standards conforming?", "CreationDate": "2010-04-28T01:04:58.270", "Id": "2726204", "CommentCount": "1", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:08:44.500", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-31T03:45:51.523", "Score": "16", "OwnerUserId": "197788", "Tags": "<c++><c-preprocessor>", "AnswerCount": "2"}});