post_cb({"31404809": {"CommentCount": "0", "AcceptedAnswerId": "31404833", "PostTypeId": "1", "LastEditorUserId": "3747990", "CreationDate": "2015-07-14T11:03:40.260", "LastActivityDate": "2015-07-14T13:04:11.780", "LastEditDate": "2015-07-14T13:04:11.780", "ViewCount": "1371", "FavoriteCount": "2", "Title": "What is an empty template argument <> while creating an object?", "Id": "31404809", "Score": "12", "Body": "<p>Here is some valid syntax:</p>\n<pre><code>std::uniform_real_distribution&lt;&gt; randomizer(0, 100);\n</code></pre>\n<p>How does it work, does it automatically deduce the object template? Why is it necessary to write <code>&lt;&gt;</code> at the end of the type? Can I not remove the <code>&lt;&gt;</code> and it will be the same?</p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "163394", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31404809_31404833_0": {"section_id": 79, "quality": 0.9375, "length": 15}}, "n3337": {"so_31404809_31404833_0": {"section_id": 74, "quality": 0.9375, "length": 15}}, "n4659": {"so_31404809_31404833_0": {"section_id": 81, "quality": 0.9375, "length": 15}}}, "31404833": {"ParentId": "31404809", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Typically this can be used and works when the first and succeeding, or only, parameter has a default template argument (type or value if it is an integral). An additional case is when there is a template argument pack and it is empty.</p>\n<p>The <code>&lt;&gt;</code> is still needed to identify it as a template type.</p>\n<p>In this <a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution\">case the type is declared as</a>;</p>\n<pre><code>template &lt;class RealType = double&gt;\nclass uniform_real_distribution;\n</code></pre>\n<p>Hence the default <code>RealType</code> for the template class <code>uniform_real_distribution</code> is <code>double</code>. It amounts to <code>std::uniform_real_distribution&lt;double&gt;</code>.</p>\n<hr>\n<p>With reference to the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4527.pdf\">C++ WD n4527</a>, \u00a714.3/4 (Template arguments)</p>\n<blockquote>\n<p id=\"so_31404809_31404833_0\">When template argument packs or default <em>template-arguments</em> are used, a <em>template-argument</em> list can be empty. In that case the empty <code>&lt;&gt;</code> brackets shall still be used as the <em>template-argument-list</em>. [ <em>Example:</em></p>\n<pre><code>template&lt;class T = char&gt; class String;\nString&lt;&gt;* p; // OK: String&lt;char&gt;\nString* q;   // syntax error\n\ntemplate&lt;class ... Elements&gt; class Tuple;\nTuple&lt;&gt;* t; // OK: Elements is empty\nTuple* u;   // syntax error\n</code></pre>\n<p id=\"so_31404809_31404833_1\"><em>- end example</em> ]</p>\n</blockquote>\n</hr>", "OwnerUserId": "3747990", "LastEditorUserId": "3747990", "LastEditDate": "2015-07-14T11:28:39.907", "Id": "31404833", "Score": "19", "CreationDate": "2015-07-14T11:05:10.100", "LastActivityDate": "2015-07-14T11:28:39.907"}, "31404898": {"ParentId": "31404809", "CommentCount": "0", "Body": "<p>The class has the following declaration</p>\n<pre><code>template&lt;class RealType = double&gt;\nclass uniform_real_distribution;\n</code></pre>\n<p>As you can see it has default template argument of type <code>double</code></p>\n<p>So this declaration</p>\n<pre><code>std::uniform_real_distribution&lt;&gt; randomizer(0, 100);\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>std::uniform_real_distribution&lt;double&gt; randomizer(0, 100);\n</code></pre>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "31404898", "Score": "4", "CreationDate": "2015-07-14T11:08:21.807", "LastActivityDate": "2015-07-14T11:08:21.807"}});