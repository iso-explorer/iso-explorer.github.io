post_cb({"24261674": {"ParentId": "24260456", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>The rules are in the C++ standard. You can download free drafts from links <a href=\"https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents/4653479#4653479\">here</a>.</p>\n<p>Appendices A.6 and A.7 have the full grammar specification. The description of declarators is in chapter <code>[dcl]</code>. See section <code>[dcl.ptr]</code> in particular, e.g. #1:</p>\n<blockquote>\n<p id=\"so_24260456_24261674_0\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<p id=\"so_24260456_24261674_1\"><code>*</code> <em>attribute-specifier-seq</em><sub>opt</sub> <em>cv-qualifier-seq</em><sub>opt</sub> <code>D1</code></p>\n<p id=\"so_24260456_24261674_2\">and the type of the identifier in the declaration <code>T D1</code> is \u201c<em>derived-declarator-type-list</em> <code>T</code>,\u201d then the type of the identifier of <code>D</code> is \u201c<em>derived-declarator-type-list cv-qualifier-seq</em> pointer to <code>T</code>.\u201d The <em>cv-qualifiers</em> apply to the pointer and not to the object pointed to. Similarly, the optional <em>attribute-specifier-seq</em> (7.6.1) appertains to the pointer and not to the object pointed to.</p>\n</blockquote>\n<p>The rest of that section contains a bunch of clarifying examples.</p>\n", "OwnerUserId": "1505939", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:57:34.993", "Id": "24261674", "Score": "2", "CreationDate": "2014-06-17T10:40:05.817", "LastActivityDate": "2014-06-17T10:49:47.310"}, "24261020": {"ParentId": "24260456", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>A <a href=\"http://en.cppreference.com/w/cpp/language/cv\" rel=\"nofollow noreferrer\"><strong>pragmatic online reference</strong></a> of the syntax for const pointer declarations saves you downloading some 1400 pages of a <a href=\"https://stackoverflow.com/a/4653479/2932052\">draft version of any C++ Standard</a> (a SO-community-maintained list). </p>\n<p>The formal grammar is covered in <strong>Appendix A</strong> of the book <strong>The C++ Programming Language</strong> by <strong>Bjarne Stroustrup</strong> <a href=\"http://en.wikipedia.org/wiki/Special:BookSources/0321563840\" rel=\"nofollow noreferrer\">ISBN 0-321-563840</a> (every former edition will do, too). In chapter 5.4.1 (of the 3rd edition), Bjarne Stroustrup describes the reason behind this syntax diversity as follows: </p>\n<blockquote>\n<p id=\"so_24260456_24261020_0\">The declarator operator that makes a pointer constant is <code>*const</code>. There is no <code>const*</code> declarator operator, so a <code>const</code> appearing before the <code>*</code> is taken to be part of the base type. </p>\n</blockquote>\n<h2>Ask your C++ compiler!</h2>\n<p>It's most likely that compiler implementers don't like<sup>[1]</sup> this \"feature\": if you try the following declaration,</p>\n<pre><code>const char const * const a;\n</code></pre>\n<p>you'll see that there are special rules implemented in your C++ compiler, and it will probably tell you about it. The GNU GCC compiler for example states</p>\n<blockquote>\n<p id=\"so_24260456_24261020_1\">error: duplicate 'const'</p>\n</blockquote>\n<hr>\n<p><sup>[1]</sup> ...but this anger seems negligible compared with that created by <a href=\"http://en.cppreference.com/w/cpp/language/integer_literal#The_type_of_the_literal\" rel=\"nofollow noreferrer\">unsigned long literals...</a></p>\n</hr>", "OwnerUserId": "2932052", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:49:34.010", "Id": "24261020", "Score": "1", "CreationDate": "2014-06-17T10:05:41.883", "LastActivityDate": "2014-06-17T13:01:55.433"}, "24260526": {"ParentId": "24260456", "CommentCount": "5", "Body": "<p>The rule is <em>very</em> simple, if the <code>const</code> is on the <em>right-hand-side</em> of the <code>*</code>: it's the pointer that's <code>const</code>.  If the <code>const</code> is on the <em>left-hand-side</em> of the <code>*</code> then the object that's being pointed to is <code>const</code>.</p>\n", "OwnerUserId": "1312406", "PostTypeId": "2", "Id": "24260526", "Score": "1", "CreationDate": "2014-06-17T09:44:13.787", "LastActivityDate": "2014-06-17T09:44:13.787"}, "24260456": {"CommentCount": "8", "ViewCount": "133", "PostTypeId": "1", "ClosedDate": "2014-06-17T14:22:21.130", "LastEditorUserId": "-1", "CreationDate": "2014-06-17T09:40:26.083", "LastActivityDate": "2014-06-18T14:52:38.780", "Title": "What syntax rules explain how C++ compilers process the const keyword in variable declarations", "LastEditDate": "2017-05-23T12:21:26.207", "Id": "24260456", "Score": "-4", "Body": "<pre><code>char * const a;\nconst char * a;\n</code></pre>\n<p>One is a constant pointer to a char. The other is a pointer to a char const.</p>\n<p>I think there is a specific way. Something like order of execution. I think there should be brackets around or something.</p>\n<p>Can anyone explain to me why the pointer is const on one and not the other?</p>\n<pre><code>char * const a, for example.\n</code></pre>\n<p>Does that become <code>(char *) const a</code></p>\n<p>Or </p>\n<p><code>const char * a</code></p>\n<p>Is it <code>(const (char *)) a</code></p>\n<p>In <a href=\"https://stackoverflow.com/questions/1143262/what-is-the-difference-between-const-int-const-int-const-int-const\">What is the difference between const int*, const int * const, and int const *?</a> I got a bunch of explanations that do not seem to make sense.</p>\n<p>One explanation is to read it backward.</p>\n<p>Another explanation is to split the * and see if the const is on the right or left.</p>\n<p>Then there is another bizare theory of doing it clockwise </p>\n<p><a href=\"http://c-faq.com/decl/spiral.anderson.html\" rel=\"nofollow noreferrer\">http://c-faq.com/decl/spiral.anderson.html</a></p>\n<p>The rules do not seem like the real actual formal rule. I am not even sure if the rule holds for even more complex types. Not to mention the rules only work in english. </p>\n<p>Okay, what's the actual formal rule here and what's the reference?</p>\n<p>I think there has to be a simpler rule on why this is so.</p>\n<p>For example, does the word const apply to the left or right? Can we put brackets like I suggest?</p>\n", "Tags": "<c++><syntax><const>", "OwnerUserId": "700663", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24260456_24261674_2": {"section_id": 3214, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_24260456_24261674_2": {"section_id": 3088, "quality": 0.8333333333333334, "length": 20}}, "n4659": {"so_24260456_24261674_2": {"section_id": 3971, "quality": 0.8333333333333334, "length": 20}}}});