post_cb({"47438863": {"CommentCount": "1", "ViewCount": "105", "CreationDate": "2017-11-22T15:51:05.283", "LastActivityDate": "2017-11-23T02:42:28.033", "Title": "What value should `std::stringstream::fail()` return after reading then writing? (gcc vs clang)", "PostTypeId": "1", "Id": "47438863", "Score": "8", "Body": "<p>Consider the following code snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nint main()\n{\n    std::stringstream ss;\n    ss &lt;&lt; \"12345\";\n    unsigned short s;\n    ss &gt;&gt; s;\n    ss &lt;&lt; \"foo\";\n\n    std::cout &lt;&lt; std::boolalpha\n              &lt;&lt; \"\\nss.eof()  = \" &lt;&lt; ss.eof()\n              &lt;&lt; \"\\nss.good() = \" &lt;&lt; ss.good()\n              &lt;&lt; \"\\nss.bad()  = \" &lt;&lt; ss.bad()\n              &lt;&lt; \"\\nss.fail() = \" &lt;&lt; ss.fail()\n              &lt;&lt; \"\\nss.str()  = \" &lt;&lt; ss.str();\n}\n</code></pre>\n<hr>\n<p>clang++ trunk prints the following result:</p>\n<blockquote id=\"so_47438863_47438863_0\">\n<pre><code>ss.eof()  = true\nss.good() = false\nss.bad()  = false\nss.fail() = false\nss.str()  = 12345\n</code></pre>\n</blockquote>\n<p><a href=\"https://wandbox.org/permlink/6WLJhkpnmMbM49fm\" rel=\"noreferrer\"><strong>on wandbox</strong></a></p>\n<hr>\n<p>g++ trunk prints the following result:</p>\n<blockquote id=\"so_47438863_47438863_1\">\n<pre><code>ss.eof()  = true\nss.good() = false\nss.bad()  = false\nss.fail() = true\nss.str()  = 12345\n</code></pre>\n</blockquote>\n<p><a href=\"https://wandbox.org/permlink/RcAGQjV55MnG7jPq\" rel=\"noreferrer\"><strong>on wandbox</strong></a></p>\n<hr>\n<p>As you can see, the value of <code>ss.fail()</code> is different between the two compilers. What does the Standard say regarding the behavior of <code>std::stringstream</code> in this case? Is it implementation-defined to set <code>failbit</code>/<code>badbit</code> when writing to a stream that has already been consumed?</p>\n</hr></hr></hr>", "Tags": "<c++><language-lawyer><iostream><sstream>", "OwnerUserId": "598696", "AnswerCount": "1"}, "47439311": {"ParentId": "47438863", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2017-11-22T16:13:39.747", "Score": "3", "LastEditorUserId": "3309790", "LastEditDate": "2017-11-23T02:42:28.033", "Id": "47439311", "OwnerUserId": "3309790", "Body": "<p>Gcc is correct. <code>std::stringstream</code> inherits from <code>std::basic_ostream</code>, and according to the behavior of <a href=\"http://eel.is/c++draft/ostream.formatted#ostream.inserters.character-4\" rel=\"nofollow noreferrer\"><code>operator&lt;&lt;(std::basic_ostream)</code></a> (which is invoked from <code>ss &lt;&lt; \"foo\";</code>),</p>\n<blockquote>\n<p id=\"so_47438863_47439311_0\">Effects: Behaves like a formatted inserter (as described in [ostream.formatted.reqmts]) of out.</p>\n</blockquote>\n<p>And from <a href=\"http://eel.is/c++draft/ostream.formatted.reqmts#1\" rel=\"nofollow noreferrer\">\u00a730.7.5.2.1/1 Common requirements [ostream.formatted.reqmts]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_47438863_47439311_1\">Each formatted output function begins execution by constructing an object of class sentry. If this object returns true when converted to a value of type bool, the function endeavors to generate the requested output. <strong>If the generation fails, then the formatted output function does setstate(ios_\u00adbase\u200b::\u200bfailbit)</strong>, which might throw an exception.</p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/ostream::sentry\" rel=\"nofollow noreferrer\">\u00a730.7.5.1.3 Class basic_\u00adostream\u200b::\u200bsentry [ostream::sentry]</a>:</p>\n<blockquote>\n<p id=\"so_47438863_47439311_2\">If os.good() is nonzero, prepares for formatted or unformatted output.\n  If os.tie() is not a null pointer, calls os.tie()-&gt;flush().</p>\n<p id=\"so_47438863_47439311_3\">If, after any preparation is completed, os.good() is true, ok_\u00ad ==\n  true otherwise, ok_\u00ad == false. During preparation, the constructor may\n  call setstate(failbit) (which may throw ios_\u00adbase\u200b::\u200b\u200bfailure\n  ([iostate.flags]))</p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/iostate.flags\" rel=\"nofollow noreferrer\">\u00a730.5.5.4 basic_\u00adios flags functions [iostate.flags]</a>:</p>\n<blockquote>\n<p id=\"so_47438863_47439311_4\">iostate rdstate() const;<br>\n  Returns: The error state of the stream buffer.</br></p>\n<p id=\"so_47438863_47439311_5\">bool good() const;<br>\n  Returns: rdstate() == 0</br></p>\n<p id=\"so_47438863_47439311_6\">bool eof() const;<br>\n  Returns: true if eofbit is set in rdstate().</br></p>\n</blockquote>\n<p><code>eofbit</code> has been set in this case, then <code>std::basic_ios::good</code> returns nonzero and causes writing failed (as the result showed), then <code>failbit</code> should be set.</p>\n", "LastActivityDate": "2017-11-23T02:42:28.033"}, "bq_ids": {"n4140": {"so_47438863_47439311_0": {"section_id": 2306, "quality": 0.75, "length": 6}, "so_47438863_47439311_2": {"section_id": 2277, "quality": 1.0, "length": 11}, "so_47438863_47439311_3": {"section_id": 2278, "quality": 0.9, "length": 18}, "so_47438863_47439311_1": {"section_id": 2287, "quality": 1.0, "length": 34}}, "n3337": {"so_47438863_47439311_0": {"section_id": 2290, "quality": 0.75, "length": 6}, "so_47438863_47439311_2": {"section_id": 2265, "quality": 1.0, "length": 11}, "so_47438863_47439311_3": {"section_id": 2266, "quality": 0.9, "length": 18}, "so_47438863_47439311_1": {"section_id": 2275, "quality": 1.0, "length": 34}}, "n4659": {"so_47438863_47439311_0": {"section_id": 2580, "quality": 0.75, "length": 6}, "so_47438863_47439311_2": {"section_id": 2550, "quality": 1.0, "length": 11}, "so_47438863_47439311_3": {"section_id": 2551, "quality": 0.9, "length": 18}, "so_47438863_47439311_1": {"section_id": 2560, "quality": 1.0, "length": 34}}}});