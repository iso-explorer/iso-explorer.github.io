post_cb({"20816117": {"CommentCount": "5", "AcceptedAnswerId": "20816214", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-12-28T15:20:59.070", "LastActivityDate": "2013-12-28T16:01:30.097", "LastEditDate": "2017-05-23T11:46:49.243", "ViewCount": "499", "FavoriteCount": "5", "Title": "Are deleted constructors \"accessible\"?", "Id": "20816117", "Score": "15", "Body": "<p>A deleted answer on <a href=\"https://stackoverflow.com/q/20815921/560648\">this question</a> about a deleted move constructor quotes <a href=\"http://en.cppreference.com/w/cpp/types/is_move_constructible\" rel=\"nofollow noreferrer\">cppreference.com as saying</a> that the <code>is_move_constructible</code> trait should succeed as long as a move constructor is \"accessible\", even if it's not \"usable\".</p>\n<p>The standard in fact requires that move-construction of the argument type be well-formed, so the answer was not quite right.</p>\n<p>Now, the standard repeatedly uses the term \"accessible\" in relation to constructors referring to actual constructibility. For example:</p>\n<blockquote>\n<p id=\"so_20816117_20816117_0\"><code>[C++11 8.5/6]:</code> To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly <em>cv-qualified</em>) class type (Clause 9), the default constructor for <code>T</code> is called (and <strong>the initialization is ill-formed if <code>T</code> has no accessible default constructor</strong>);</li>\n<li>if <code>T</code> is an array type, each element is <em>default-initialized</em>;</li>\n<li>otherwise, no initialization is performed.</li>\n</ul>\n<p id=\"so_20816117_20816117_1\">If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>However, I can't find anywhere in the standard that states categorically whether a <code>delete</code>d, explicitly-defined constructor is \"accessible\" or not.</p>\n<p>A different [non-normative] quote seems to suggest that <code>delete</code>d-ness and accessibility are orthogonal:</p>\n<blockquote>\n<p id=\"so_20816117_20816117_2\"><code>[C++11: 12.2/1]:</code> <em>[..] [ Note:</em> even if there is no call to the destructor or copy/move constructor, all the semantic restrictions, such as accessibility (Clause 11) and whether the function is deleted (8.4.3), shall be satisfied. <em>[..]</em></p>\n</blockquote>\n<ul>\n<li>Have I missed a passage?</li>\n<li>If not, should the cppreference.com page be corrected? Can you suggest a better wording?</li>\n<li>Should the standard be clearer about this either way?</li>\n</ul>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "560648", "AnswerCount": "2"}, "20816449": {"ParentId": "20816117", "CommentCount": "0", "Body": "<p>I don't want to address what the cppreference website says, but as far as the standard is concerned, constructibility is not defined in terms of \"accessible constructors\". Rather, the primary definition is that of <code>is_constructible</code>, which is (C++11, 20.9.4.3/6):</p>\n<blockquote>\n<pre><code>is_constructible&lt;T, Args...&gt;\n</code></pre>\n<p id=\"so_20816117_20816449_0\">shall be satisfied\n  if and only if the following variable definition would be well-formed for some invented variable <code>t</code>:</p>\n<pre><code>T t(create&lt;Args&gt;()...);\n</code></pre>\n<p id=\"so_20816117_20816449_1\">Access checking is performed as if in a context unrelated to <code>T</code> and any of the <code>Args</code>. Only the validity of the immediate context of the variable initialization is considered.</p>\n</blockquote>\n<p>So the well-formedness of the hypothetical expression on the last line of code is the defining charac\u00adter\u00adistic for the constructibility traits. And that works hand-in-hand with the clause that says that using a de\u00adleted function leads to an ill-formed program.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "20816449", "Score": "12", "CreationDate": "2013-12-28T16:01:30.097", "LastActivityDate": "2013-12-28T16:01:30.097"}, "20816214": {"ParentId": "20816117", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>From the second quote in the question, I'd say that accessibility is not affected by <code>delete</code>dness, and that the first quote actually doesn't <em>at all</em> cover the case that such a constructor may be <code>delete</code>d.</p>\n<p>This scenario is instead covered by a sort of \"catch-all\" requirement in the definition of <code>delete</code>:</p>\n<blockquote>\n<p id=\"so_20816117_20816214_0\"><code>[C++11: 8.4.3/2]:</code> A program that refers to a deleted function implicitly or explicitly, other than to declare it, is ill-formed. <em>[ Note:</em> This includes calling the function implicitly or explicitly and forming a pointer or pointer-to-member to the function. It applies even for references in expressions that are not potentially-evaluated. If a function is overloaded, it is referenced only if the function is selected by overload resolution. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>So, cppreference.com could probably do with a note that there is a further criterion that applies to the <code>is_move_constructible</code> trait, than simply whether the move constructor is accessible. And there's a further problem here, which is that <a href=\"http://en.cppreference.com/w/cpp/concept/MoveConstructible\" rel=\"nofollow noreferrer\"><code>MoveConstructible</code></a> can be satisfied by <code>CopyConstructible</code> too<sup>\u2020</sup>, so even the move constructor on its own is not strictly necessary.</p>\n<p>This all raises another interesting point, though, that any possible implementation of <code>is_move_constructible</code> must surely \"refer\" to the deleted move constructor, which renders the program ill-formed as stated in the quote above. Still, I suppose with SFINAE tricks an implementation can avoid actually becoming ill-formed.</p>\n<hr>\n<p><sup><sup>\u2020</sup> \"A type with no move ctor at all but with a copy-ctor is move-constructible (constructible from an rvalue).\" \u2014 <em><a href=\"https://stackoverflow.com/users/420683/dyp\">DyP</a></em></sup></p>\n</hr>", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:18.990", "Id": "20816214", "Score": "9", "CreationDate": "2013-12-28T15:32:21.290", "LastActivityDate": "2013-12-28T15:56:42.667"}, "bq_ids": {"n4140": {"so_20816117_20816117_0": {"section_id": 3286, "quality": 0.6666666666666666, "length": 4}, "so_20816117_20816214_0": {"section_id": 3277, "quality": 0.8333333333333334, "length": 30}, "so_20816117_20816449_1": {"section_id": 4710, "quality": 0.9166666666666666, "length": 11}, "so_20816117_20816449_0": {"section_id": 4710, "quality": 1.0, "length": 9}, "so_20816117_20816117_1": {"section_id": 3286, "quality": 1.0, "length": 11}}, "n3337": {"so_20816117_20816117_0": {"section_id": 3156, "quality": 0.6666666666666666, "length": 4}, "so_20816117_20816117_1": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_20816117_20816117_2": {"section_id": 369, "quality": 0.8, "length": 16}, "so_20816117_20816449_0": {"section_id": 4518, "quality": 1.0, "length": 9}, "so_20816117_20816449_1": {"section_id": 4518, "quality": 0.9166666666666666, "length": 11}, "so_20816117_20816214_0": {"section_id": 3148, "quality": 0.8333333333333334, "length": 30}}, "n4659": {"so_20816117_20816214_0": {"section_id": 4035, "quality": 0.8333333333333334, "length": 30}, "so_20816117_20816449_1": {"section_id": 6107, "quality": 0.9166666666666666, "length": 11}, "so_20816117_20816117_1": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}, "so_20816117_20816449_0": {"section_id": 6107, "quality": 1.0, "length": 9}}}});