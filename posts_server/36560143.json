post_cb({"bq_ids": {"n4140": {"so_36560143_36560446_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 5341}}, "n3337": {"so_36560143_36560446_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 5138}}, "n4659": {"so_36560143_36560446_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 6762}}}, "36560143": {"ViewCount": "146", "Body": "<p>Reading Stanley Lippman's \"C++ Primer\", I learned that by default decimal integer literals are signed (smallest type of <code>int</code>, <code>long</code> or <code>long long</code> in which the literal's value fits) whereas octal and hexadecimal literals can be either signed or unsigned (smallest type of <code>int</code>, <code>unsigned int</code>, <code>long</code>, <code>unsigned long</code>, <code>long long</code> or <code>unsigned long long</code> in which the literal's value fits) . </p>\n<p>What's the reason for treating those literals differently? </p>\n<p>Edit: I'm trying to provide some context</p>\n<pre><code>int main()\n{\n    auto dec = 4294967295;\n    auto hex = 0xFFFFFFFF;\n    return 0;\n}\n</code></pre>\n<p>Debugging following code in Visual Studio shows that the type of <code>dec</code> is <code>unsigned long</code> and that the type of <code>hex</code> is <code>unsigned int</code>.<br>\nThis contradicts what I've read but still: both variables represent the same value but are of different types. That's confusing me. </br></p>\n", "AcceptedAnswerId": "36560446", "Title": "Why are decimal and hexadecimal integer literals treated differently?", "CreationDate": "2016-04-11T22:07:05.843", "Id": "36560143", "CommentCount": "13", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-04-11T22:42:04.553", "LastEditorUserId": "6186928", "LastActivityDate": "2016-04-12T00:38:35.130", "Score": "5", "OwnerUserId": "6186928", "Tags": "<c++>", "AnswerCount": "1"}, "36560446": {"Id": "36560446", "PostTypeId": "2", "Body": "<p>C++.2011 changed its promotions rules from C++.2003. This change is documented in \u00a7C.2.1 [diff.cpp03.lex] :</p>\n<blockquote>\n<p id=\"so_36560143_36560446_0\">2.14.2<br>\n<strong>Change</strong>: Type of integer literals<br>\n<strong>Rationale</strong>: C99 compatibility</br></br></p>\n</blockquote>\n<p>The C Standard, both C.1999 and C.2011, defines the conversions in \u00a76.4.4.1. (C++.2011 \u00a72.14.2 essentially copies the content from the C Standard.)</p>\n<blockquote>\n<p id=\"so_36560143_36560446_1\">The type of an integer constant is the first of the corresponding list in which its value can\n  be represented.<p id=\"so_36560143_36560446_2\"><a href=\"https://i.stack.imgur.com/3QIKBm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/3QIKBm.png\"/></a><br>\n<sub><a href=\"https://i.stack.imgur.com/3QIKB.png\" rel=\"nofollow noreferrer\">larger image</a></sub></br></p>\n</p></blockquote>\n<p>The C.1999 rationale gives the following explanation:</p>\n<blockquote>\n<p id=\"so_36560143_36560446_3\">The C90 rule that the default type of a decimal integer constant is either <code>int</code>, <code>long</code>, or\n  <code>unsigned long</code>, depending on which type is large enough to hold the value without overflow,\n  <strong><em>simplifies the use of constants.</em></strong> The choices in C99 are <code>int</code>, <code>long</code> and <code>long long</code>.\n  C89 added the suffixes <code>U</code> and <code>u</code> to specify unsigned numbers. C99 adds <code>LL</code> to specify <code>long long</code>.</p>\n<p id=\"so_36560143_36560446_4\">Unlike decimal constants, octal and hexadecimal constants too large to be <code>int</code>s are typed as\n  <code>unsigned int</code> if within range of that type, since it is <strong><em>more likely that they represent bit\n  patterns or masks, which are generally best treated as unsigned, rather than \u201creal\u201d numbers</em></strong>. </p>\n</blockquote>\n", "LastEditorUserId": "315052", "LastActivityDate": "2016-04-12T00:38:35.130", "Score": "5", "CreationDate": "2016-04-11T22:30:41.227", "ParentId": "36560143", "CommentCount": "2", "OwnerUserId": "315052", "LastEditDate": "2016-04-12T00:38:35.130"}});