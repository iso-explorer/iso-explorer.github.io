post_cb({"bq_ids": {"n4140": {"so_11174129_11174627_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 444}, "so_11174129_11174627_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 441}}, "n3337": {"so_11174129_11174627_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 435}, "so_11174129_11174627_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 432}}, "n4659": {"so_11174129_11174627_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 467}, "so_11174129_11174627_0": {"length": 28, "quality": 0.8484848484848485, "section_id": 461}}}, "11174627": {"Id": "11174627", "PostTypeId": "2", "Body": "<p>Yes, your use of member function in initialization list is valid and complies with the standard.</p>\n<p>Data members are initialized in the order of their declaration (and that's the reason why they should appear in the initialization list in the order of their declaration - the rule that you followed in your example). <code>N_</code> is initialized first and you could have passed this data member to <code>fill_arr</code>. <code>fill_arr</code> is called before constructor but because this function does not access uninitialized data members (it does not access data members at all) its call is considered safe.</p>\n<p>Here are some relevant excepts from the latest draft (N3242=11-0012) of the C++ standard: </p>\n<blockquote>\n<p id=\"so_11174129_11174627_0\">\u00a7 12.6.2.13: Member functions (including virtual member functions,\n  10.3) can be called for an object under construction.(...) However, if these operations are performed in a ctor-initializer (or in a function\n  called directly or indirectly from a ctor-initializer) before all the\n  mem-initializers for base classes have completed, the result of the\n  operation is undefined. Example:</p>\n</blockquote>\n<pre><code>class A { public:    A(int); };\n\nclass B : public A {\n   int j;\npublic:\n   int f();\n   B() : A(f()), // undefined: calls member function\n                 // but base A not yet initialized\n   j(f()) { }    // well-defined: bases are all initialized\n};\n\nclass C {\npublic:\n   C(int);\n};\n\nclass D : public B, C {\n   int i;\npublic:\n   D() : C(f()), // undefined: calls member function\n                 // but base C not yet initialized\n   i(f()) { } // well-defined: bases are all initialized\n};\n</code></pre>\n<blockquote>\n<p id=\"so_11174129_11174627_1\">\u00a712.7.1: For an object with a non-trivial constructor, referring to\n  any non-static member or base class of the object before the\n  constructor begins execution results in undefined behavior. Example</p>\n</blockquote>\n<pre><code>struct W { int j; };\nstruct X : public virtual W { };\nstruct Y {\n   int *p;\n   X x;\n   Y() : p(&amp;x.j) { // undefined, x is not yet constructed\n   }\n};\n</code></pre>\n", "LastActivityDate": "2012-06-24T02:51:57.770", "CommentCount": "0", "CreationDate": "2012-06-24T02:51:57.770", "ParentId": "11174129", "Score": "28", "OwnerUserId": "404421"}, "11174129": {"ViewCount": "10996", "Body": "<p>OK, member variables <a href=\"https://stackoverflow.com/questions/10720377/can-member-variables-be-used-to-initialize-other-members-in-an-initialization-li\">can be used</a> to initialize other member variables in an initialization list (with care taken about the initialization order etc). What about member functions? To be specific, is this snippet legal according to the C++ standard?</p>\n<pre><code>struct foo{\n  foo(const size_t N) : N_(N),  arr_(fill_arr(N)) { \n    //arr_ = fill_arr(N); // or should I fall back to this one?\n  }\n\n  std::vector&lt;double&gt; fill_arr(const size_t N){\n    std::vector&lt;double&gt; arr(N);\n    // fill in the vector somehow\n    return arr;\n  }\n\n  size_t N_;\n  std::vector&lt;double&gt; arr_;\n  // other stuff\n};\n</code></pre>\n", "AcceptedAnswerId": "11174627", "Title": "can member functions be used to initialize member variables in an initialization list?", "CreationDate": "2012-06-24T00:40:30.453", "Id": "11174129", "CommentCount": "3", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:47:23.107", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-18T09:00:02.507", "Score": "25", "OwnerUserId": "143765", "Tags": "<c++><initialization-list>", "AnswerCount": "2"}, "11174229": {"Id": "11174229", "PostTypeId": "2", "Body": "<p><strong>While initializing objects in the initialization list, the object is not yet fully constructed.</strong><br>\n If those function tries to access the part of the object which is not yet constructed then that is a undefined behavior else its fine.<br>\nsee <a href=\"https://stackoverflow.com/a/3899583/981787\">this answer</a>.</br></br></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-24T01:08:03.260", "Score": "2", "CreationDate": "2012-06-24T00:59:51.483", "ParentId": "11174129", "CommentCount": "5", "OwnerUserId": "981787", "LastEditDate": "2017-05-23T10:31:13.300"}});