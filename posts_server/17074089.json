post_cb({"17074539": {"ParentId": "17074089", "CommentCount": "2", "Body": "<p>clang is correct.  It looks like somebody on the gcc team misread or misimplemented:</p>\n<p>7.1.5/1:</p>\n<blockquote>\n<p id=\"so_17074089_17074539_0\">If any declaration of a function or function template has <code>constexpr</code> specifier, then all its declarations shall contain the <code>constexpr</code> specifier.</p>\n</blockquote>\n<p><code>Foo::kVal</code> is obviously not a function or function template.  I don't see anything else in the Standard requiring use of <code>constexpr</code> to be consistent from one declaration to the next.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "17074539", "Score": "5", "CreationDate": "2013-06-12T20:17:56.140", "LastActivityDate": "2013-06-12T20:17:56.140"}, "17074272": {"ParentId": "17074089", "CommentCount": "1", "Body": "<p>You don't need to declare twice. </p>\n<pre><code>class Foo {\n  public:\n   static constexpr double kVal = 0.25f;\n};\n</code></pre>\n<p>Is all that is needed. </p>\n", "OwnerUserId": "1459360", "PostTypeId": "2", "Id": "17074272", "Score": "-1", "CreationDate": "2013-06-12T20:01:48.130", "LastActivityDate": "2013-06-12T20:01:48.130"}, "bq_ids": {"n4140": {"so_17074089_17074539_0": {"section_id": 5417, "quality": 1.0, "length": 13}}, "n3337": {"so_17074089_17074539_0": {"section_id": 5212, "quality": 1.0, "length": 13}}, "n4659": {"so_17074089_17074539_0": {"section_id": 6839, "quality": 1.0, "length": 13}}}, "17074089": {"CommentCount": "0", "ViewCount": "471", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-06-12T19:52:08.527", "LastActivityDate": "2013-06-12T20:17:56.140", "Title": "Error: redeclaration differs in \u2018constexpr\u2019", "AcceptedAnswerId": "17074539", "LastEditDate": "2013-06-12T19:55:22.690", "Id": "17074089", "Score": "6", "Body": "<p>Clang accepts this code, but GCC rejects it:</p>\n<pre><code>class Foo {\n public:\n  static constexpr double kVal = 0.25f;\n};\n\nconst double Foo::kVal;\n</code></pre>\n<p>(Using clang 3.0 and g++ 4.6.3)</p>\n<pre><code>~$ clang++ foo.cc -std=c++11 -c \n[ok]\n~$ g++ foo.cc -std=c++0x -c \nfoo.cc:6:19: error: redeclaration \u2018Foo::kVal\u2019 differs in \u2018constexpr\u2019\nfoo.cc:3:34: error: from previous declaration \u2018Foo::kVal\u2019\nfoo.cc:6:19: error: declaration of \u2018constexpr const double Foo::kVal\u2019 outside of class is not definition [-fpermissive]\n</code></pre>\n<p>Which interpretation is correct?</p>\n", "Tags": "<c++><c++11><g++><constexpr><clang++>", "OwnerUserId": "19750", "AnswerCount": "2"}});