post_cb({"44477276": {"ParentId": "44477167", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>With an unsigned integral value <code>unsigned int i</code>, a condition like <code>i &gt; -1</code> can never become true, whereas a condition <code>i != -1</code> can become true. The reason is that integral literal <code>-1</code>, when promoted to an unsigned value, is actually the same as <code>MAX_UNSIGNED</code>. And it is then easy to see that a value of type <code>unsigned int</code> can never be greater than <code>MAX_UNSIGNED</code>, whereas it can happen that it is <code>!= MAX_UNSIGNED</code>.</p>\n<p>Try the following code:</p>\n<pre><code>unsigned int ui = -1;\nprintf(\"ui:%u ; MAX_UNSINGED: %u\\n\", ui, UINT_MAX);\n\nbool onegreaterMinusOne = (1 &gt; ui);\nprintf(\"1 &gt; -1 in unsigned realm? %s\\n\", (onegreaterMinusOne ? \"True\" : \"False\"));\n\nunsigned int anotherUI = 0;\nprintf(\"0 != -1 in unsigned realm? %s\\n\", (anotherUI != ui) ? \"True\" : \"False\");\n\nanotherUI--;\nprintf(\"--anotherUI != -1 in unsigned realm? %s\\n\", (anotherUI != ui) ? \"True\" : \"False\");\n</code></pre>\n<p>Output:</p>\n<pre><code>ui:4294967295 ; MAX_UNSINGED: 4294967295\n1 &gt; -1 in unsigned realm? False\n0 != -1 in unsigned realm? True\n--anotherUI != -1 in unsigned realm? False\n</code></pre>\n<p>A little bit subtle is the last thing, where <code>unsigned int anotherUI=0; anotherUI--;</code> is evaluated (this corresponds to the last step in your first loop), because one might ask if \"an unsigned underflow is defined behaviour\". The answer is yes, as taken from the C++-standard (and copied from <a href=\"https://stackoverflow.com/a/7221449/2630032\">this SO answer</a>\n):</p>\n<blockquote>\n<p id=\"so_44477167_44477276_0\">[...] A computation involving unsigned operands can never overflow,\n  because a result that cannot be represented by the resulting unsigned\n  integer type is reduced modulo the number that is one greater than the\n  largest value that can be represented by the resulting type. (ISO/IEC\n  9899:1999 (E) \u00a76.2.5/9)</p>\n</blockquote>\n<p>So <code>(unsigned)0 - (unsigned)1</code> equals <code>-1 modulo UINT_MAX+1</code>, or in other words, <code>UINT_MAX</code>.</p>\n", "OwnerUserId": "2630032", "LastEditorUserId": "2630032", "LastEditDate": "2017-06-10T19:44:20.130", "Id": "44477276", "Score": "0", "CreationDate": "2017-06-10T19:29:38.410", "LastActivityDate": "2017-06-10T19:44:20.130"}, "44477167": {"CommentCount": "4", "ViewCount": "51", "CreationDate": "2017-06-10T19:17:57.463", "LastActivityDate": "2017-06-10T19:44:20.130", "Title": "Why is this for loop iteration not printing anything vs the other?", "PostTypeId": "1", "Id": "44477167", "Score": "-3", "Body": "<p>2 Loops - just a simple string reversal.</p>\n<p>However, I have an issue when I use two different end states. I just wanna' know why it's not printing anything.</p>\n<pre><code>for (unsigned int i = a.length() - 1; i != -1; i--)\n    {\n        b += a[i];\n    }\n    cout &lt;&lt; a &lt;&lt; \"\\n\" &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p>vs</p>\n<pre><code>for (unsigned int i = a.length() - 1; i &gt; -1; i--)\n    {\n        b += a[i];\n    }\n    cout &lt;&lt; a &lt;&lt; \"\\n\" &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p>The second will not print anything - looking for an explanation why.</p>\n<p>Sorry for the noob question, but certainly curious. Thank you!</p>\n", "Tags": "<c++><string>", "OwnerUserId": "8132441", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_44477167_44477276_0": {"section_id": 7213, "quality": 0.7333333333333333, "length": 22}}, "n3337": {"so_44477167_44477276_0": {"section_id": 6957, "quality": 0.7333333333333333, "length": 22}}, "n4659": {"so_44477167_44477276_0": {"section_id": 8722, "quality": 0.7333333333333333, "length": 22}}}});