post_cb({"bq_ids": {"n4140": {"so_30172355_30172469_3": {"length": 20, "quality": 0.9090909090909091, "section_id": 7170}}, "n3337": {"so_30172355_30172469_3": {"length": 20, "quality": 0.9090909090909091, "section_id": 6914}}, "n4659": {"so_30172355_30172469_3": {"length": 17, "quality": 0.7727272727272727, "section_id": 8678}}}, "30172355": {"ViewCount": "67", "Body": "<p>I am reading the following piece of code as explained by the comments.</p>\n<pre><code>#include &lt;memory&gt;\n\nstruct myClass {\n    ~myClass() {\n        cout &lt;&lt; \"dtor\" &lt;&lt; endl;\n    }\n};\n\nvoid myFunc() {\n    shared_ptr&lt;myClass&gt; sp2;\n    {\n        shared_ptr&lt;myClass&gt; sp( new myClass);\n        myClass&amp; obj = *sp;\n        sp2 = sp; // OK, resource shared\n        myClass&amp; obj2 = *sp; // OK, both pointers point to same resource\n        // sp destroyed here, yet no freeing: sp2 still alive\n    }\n    cout &lt;&lt; \"out of inner block\" &lt;&lt; endl;\n    // sp2 destroyed here, reference count goes to 0, memory is freed\n}\n</code></pre>\n<p>My question is, how come both pointers point to same resource for <code>myClass&amp; obj2 = *sp;</code>?  And why is <code>sp</code> destroyed at point where we reach the comment <code>// sp2 destroyed here, reference count goes to 0, memory is freed</code>? </p>\n", "AcceptedAnswerId": "30172469", "Title": "when the shared pointers gets destroyed?", "CreationDate": "2015-05-11T16:00:01.767", "Id": "30172355", "CommentCount": "1", "LastEditDate": "2015-05-12T01:03:03.183", "PostTypeId": "1", "LastEditorUserId": "47453", "LastActivityDate": "2015-05-12T01:03:03.183", "Score": "-1", "OwnerUserId": "2345484", "Tags": "<c++><c++11><shared-ptr>", "AnswerCount": "1"}, "30172469": {"Id": "30172469", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30172355_30172469_0\">My question is that how come both pointers point to same resource for <code>myClass&amp; obj2 = *sp;</code>?</p>\n</blockquote>\n<p>That does not make sense. They probably meant:</p>\n<pre><code>myClass&amp; obj2 = *sp2; // OK, both pointers point to same resource\n                 ^^^ sp2, not sp\n</code></pre>\n<blockquote>\n<p id=\"so_30172355_30172469_1\">And why <code>sp</code> is destroyed at the the place where as commented?</p>\n</blockquote>\n<p>That's because <code>sp</code> is constructed in a nested scope introduced by </p>\n<pre><code>shared_ptr&lt;myClass&gt; sp2;\n{  // This starts a new scope\n  ....\n} // This ends the scope\n</code></pre>\n<p>At the end of the nested scope, all automatic variables are destructed.</p>\n<p>From the standard:</p>\n<blockquote>\n<p id=\"so_30172355_30172469_2\"><strong>3.7.3 Automatic storage duration [basic.stc.auto]</strong></p>\n<p id=\"so_30172355_30172469_3\">1 Block-scope variables explicitly declared <code>register</code> or not explicitly declared <code>static</code> or <code>extern</code> have automatic storage duration. The storage for these entities lasts until the block in which they are created exits.</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2015-05-11T16:20:18.317", "Score": "1", "CreationDate": "2015-05-11T16:05:31.233", "ParentId": "30172355", "CommentCount": "8", "OwnerUserId": "434551", "LastEditDate": "2015-05-11T16:20:18.317"}});