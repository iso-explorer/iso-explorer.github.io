post_cb({"bq_ids": {"n4140": {"so_39290088_39290209_0": {"length": 4, "quality": 1.0, "section_id": 4352}}, "n4659": {"so_39290088_39290209_0": {"length": 4, "quality": 1.0, "section_id": 5614}}}, "39290209": {"Id": "39290209", "PostTypeId": "2", "LastEditDate": "2016-09-02T14:18:43.427", "CommentCount": "0", "LastEditorUserId": "224671", "LastActivityDate": "2016-09-02T14:18:43.427", "CreationDate": "2016-09-02T10:29:36.670", "ParentId": "39290088", "Score": "8", "Body": "<p>If the standard library is conforming to C++14 then yes it <em>has</em> to do this (use <code>new T[size]</code>). From C++14 \u00a720.8.1.4[unique.ptr.create]/4:</p>\n<blockquote>\n<p id=\"so_39290088_39290209_0\"><code>template &lt;class T&gt; unique_ptr&lt;T&gt; make_unique(size_t n);</code></p>\n<ul>\n<li><em>Returns</em>: <code>unique_ptr&lt;T&gt;(new remove_extent_t&lt;T&gt;[n]())</code>. </li>\n</ul>\n</blockquote>\n", "OwnerUserId": "224671"}, "39290088": {"ViewCount": "170", "LastEditDate": "2016-09-02T12:48:38.327", "Body": "<p>Does</p>\n<pre><code>std::make_unique&lt;double[]&gt;(1000)\n</code></pre>\n<p><em>allways</em> value-initialize the elements? Well, I looked into the implementation and <code>clang</code> as well as <code>g++</code> are using </p>\n<pre><code>new T[size]()\n</code></pre>\n<p>doing value-initialization.</p>\n<p>But I can't find that a conforming implementation of C++14 / 17 <em>has</em> to do this.</p>\n", "Title": "std::make_unique<T[]>(size) value-initialization", "CreationDate": "2016-09-02T10:22:47.237", "LastActivityDate": "2016-09-02T14:18:43.427", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditorUserId": "1916893", "Id": "39290088", "Score": "7", "OwnerUserId": "3359751", "Tags": "<c++><c++11><c++14>", "AnswerCount": "1"}});