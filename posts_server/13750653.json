post_cb({"13750653": {"CommentCount": "0", "AcceptedAnswerId": "13750694", "PostTypeId": "1", "LastEditorUserId": "774499", "CreationDate": "2012-12-06T19:02:20.860", "LastActivityDate": "2012-12-12T00:02:30.250", "LastEditDate": "2012-12-06T19:46:56.393", "ViewCount": "177", "FavoriteCount": "1", "Title": "How to interpret the \"point of declaration\" for \"const int i=2; { int i[i]; }\" - an example from the C++ standard?", "Id": "13750653", "Score": "5", "Body": "<p>I am studying the C++ standard to understand order of operations, expressions, statements, and side effects.</p>\n<p>A related issue is the \"point of declaration\" for a name.  In section \u00a73.3.2.1 of the C++11 standard, the standard states:</p>\n<blockquote>\n<p id=\"so_13750653_13750653_0\">The point of declaration for a name is immediately after its complete\n  declarator (Clause 8) and before its initializer (if any)...</p>\n</blockquote>\n<p>The following paragraph adds a note with an example:</p>\n<blockquote>\n<p id=\"so_13750653_13750653_1\">Note: a name from an outer scope remains visible up to the point of\n  declaration of the name that hides it.</p>\n</blockquote>\n<p>... with the example</p>\n<pre><code>const int i = 2;\n{ int i[i]; }\n</code></pre>\n<p>and the comment states that this code sample \"declares a block-scope array of two integers.\"</p>\n<p>I would like to be able to look at the sample code and, by applying the definition of \"point of declaration\" along with the note regarding visibility of a name from an outer scope, be able to look at that code and come to the logical conclusion, myself, that it is well-formed code that does what it appears to do.</p>\n<p>However, I cannot understand how to look at this code and arrive at this conclusion, based on these definitions and rules.</p>\n<p>Reading from left-to-right, the declaration of the <code>i[]</code> array seems to appear before the use of <code>i</code> from the outer scope, so the meaning of \"remains visible <em>up to the point of declaration</em>\" cannot mean in a reading-left-to-right sense.</p>\n<p>\"<em>Up to the point of declaration</em>\" must mean something along the lines of an \"order of operations\" sense.</p>\n<p>What definition or rule in the C++ standard dictates that in an array declaration, the \"point of declaration\" of the array name occurs \"after\" the expression inside the square brackets?  What exactly is meant by \"after\" in this case?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "368896", "AnswerCount": "2"}, "13750712": {"ParentId": "13750653", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The point of declaration is <em>immediately after</em> the <em>complete</em> declarator.  Therefore, the outer <code>i</code> is not yet hidden inside the declarator itself.</p>\n", "OwnerUserId": "385844", "LastEditorUserId": "385844", "LastEditDate": "2012-12-12T00:02:30.250", "Id": "13750712", "Score": "1", "CreationDate": "2012-12-06T19:07:00.933", "LastActivityDate": "2012-12-12T00:02:30.250"}, "bq_ids": {"n4140": {"so_13750653_13750653_0": {"section_id": 7049, "quality": 0.8461538461538461, "length": 11}, "so_13750653_13750653_1": {"section_id": 7050, "quality": 0.9, "length": 9}}, "n3337": {"so_13750653_13750653_0": {"section_id": 6794, "quality": 0.8461538461538461, "length": 11}, "so_13750653_13750653_1": {"section_id": 6795, "quality": 0.9, "length": 9}}, "n4659": {"so_13750653_13750653_0": {"section_id": 8546, "quality": 0.8461538461538461, "length": 11}, "so_13750653_13750653_1": {"section_id": 8547, "quality": 0.9, "length": 9}}}, "13750694": {"ParentId": "13750653", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>\"complete declarator\" --&gt; Declarator includes the <code>[]</code> and their contents. That is, the complete declarator above is <code>i[i]</code>, so it gets declared only after that.</p>\n", "OwnerUserId": "1816548", "LastEditorUserId": "150634", "LastEditDate": "2012-12-06T19:13:57.640", "Id": "13750694", "Score": "11", "CreationDate": "2012-12-06T19:05:36.563", "LastActivityDate": "2012-12-06T19:13:57.640"}});