post_cb({"16642027": {"CommentCount": "1", "ViewCount": "87", "CreationDate": "2013-05-20T03:15:15.537", "LastActivityDate": "2013-05-20T03:31:10.200", "Title": "C++ function declarations", "AcceptedAnswerId": "16642148", "PostTypeId": "1", "Id": "16642027", "Score": "3", "Body": "<p>I'm a newbie to C++. I don't understand why it is okay (i.e. why the compiler allows it) for 1 function to be declared twice. For example, the following code is legal:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint hello();\nint hello();\n\nint main(){\n    cout &lt;&lt; \"hello, world\" &lt;&lt; endl;\n}\n\nint hello(){\n    return 1;\n}\n</code></pre>\n<p>Why does the compiler not complain?</p>\n", "Tags": "<c++><include>", "OwnerUserId": "2380088", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_16642027_16642148_1": {"section_id": 7047, "quality": 0.9090909090909091, "length": 20}, "so_16642027_16642148_0": {"section_id": 7038, "quality": 1.0, "length": 14}, "so_16642027_16642126_0": {"section_id": 5812, "quality": 0.5294117647058824, "length": 9}}, "n3337": {"so_16642027_16642148_1": {"section_id": 6792, "quality": 0.9090909090909091, "length": 20}, "so_16642027_16642148_0": {"section_id": 6784, "quality": 1.0, "length": 14}, "so_16642027_16642126_0": {"section_id": 5585, "quality": 0.5294117647058824, "length": 9}}, "n4659": {"so_16642027_16642148_1": {"section_id": 8544, "quality": 0.9090909090909091, "length": 20}, "so_16642027_16642148_0": {"section_id": 8535, "quality": 1.0, "length": 14}, "so_16642027_16642126_0": {"section_id": 7275, "quality": 0.5294117647058824, "length": 9}}}, "16642126": {"ParentId": "16642027", "CommentCount": "0", "CreationDate": "2013-05-20T03:28:02.883", "OwnerUserId": "550927", "PostTypeId": "2", "Id": "16642126", "Score": "0", "Body": "<p>Your doubt will be cleared by \"One Definition Rule\".  It is defined in the ISO C++ Standard (ISO/IEC 14882) 2003, at section 3.2.</p>\n<p>It states that:</p>\n<blockquote>\n<p id=\"so_16642027_16642126_0\">In any translation unit, a template, type, function, or object can\n  have no more than one definition. Some of these can have any number of\n  declarations.</p>\n</blockquote>\n<p>Read more about it on Wikipedia (<a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">http://en.wikipedia.org/wiki/One_Definition_Rule</a>)</p>\n", "LastActivityDate": "2013-05-20T03:28:02.883"}, "16642148": {"ParentId": "16642027", "CommentCount": "0", "CreationDate": "2013-05-20T03:31:10.200", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "16642148", "Score": "1", "Body": "<p>In C and C++ forward declarations are very weak. They provide a formal \"promise\" to the compiler that if a function with a specified signature appears at all, it would have the signature that you specify. The function is not even guaranteed to appear: unless you call or otherwise reference the declared function, the compiler is not going to complain that there is a declaration with no definition. The standard requires compilers to treat identical forward declarations as a single declaration.</p>\n<p>Unlike definitions which must be unique according to the single definition rule</p>\n<blockquote>\n<p id=\"so_16642027_16642148_0\">3.2 No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template</p>\n</blockquote>\n<p>declarations are merely required to refer to the same definition, i.e. be equivalent to each other:</p>\n<blockquote>\n<p id=\"so_16642027_16642148_1\">3.3.4 Given a set of declarations in the same declarative region, each of which specifies the same unqualified name, they shall all refer to the same entity, or all refer to functions or function templates, [...]</p>\n</blockquote>\n", "LastActivityDate": "2013-05-20T03:31:10.200"}});