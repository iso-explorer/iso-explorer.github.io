post_cb({"bq_ids": {"n4140": {"so_40238484_40238583_3": {"length": 14, "quality": 1.0, "section_id": 3298}, "so_40238484_40238583_1": {"length": 5, "quality": 1.0, "section_id": 775}, "so_40238484_40238583_6": {"length": 4, "quality": 0.8, "section_id": 3308}, "so_40238484_40238583_8": {"length": 5, "quality": 1.0, "section_id": 3308}}, "n3337": {"so_40238484_40238583_3": {"length": 14, "quality": 1.0, "section_id": 3168}, "so_40238484_40238583_1": {"length": 5, "quality": 1.0, "section_id": 762}, "so_40238484_40238583_6": {"length": 5, "quality": 1.0, "section_id": 3178}, "so_40238484_40238583_8": {"length": 4, "quality": 0.8, "section_id": 417}}, "n4659": {"so_40238484_40238583_3": {"length": 10, "quality": 0.7142857142857143, "section_id": 4063}, "so_40238484_40238583_6": {"length": 4, "quality": 0.8, "section_id": 4074}, "so_40238484_40238583_8": {"length": 5, "quality": 1.0, "section_id": 4074}}}, "40238484": {"ViewCount": "267", "Body": "<p>In order to initialize a <code>std::array</code> with some values, you need to use this approach:</p>\n<pre><code>std::array&lt;int,3&gt; an_array{{3,4,5}};\n</code></pre>\n<p>I am aware of the reason that we need two curly braces (one for <code>std::array</code> and the the other for the inner <code>c-style array</code>).</p>\n<p><strong>My question:</strong> Why, by standard, <code>std::array</code> does not contain an initializer-list constructor that directly initialize the inner <code>c-style array</code>? Is not more eyes-friendly to be initialized as:</p>\n<pre><code>std::array&lt;int,3&gt; an_array{3,4,5};\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p>This information is from <a href=\"http://en.cppreference.com/w/cpp/container/array\">http://en.cppreference.com/w/cpp/container/array</a>. I thought my compiler is allowing the second version directly as non-standard extension. Now, I am not even sure what is the standard exactly about this case.</p>\n<blockquote>\n<p id=\"so_40238484_40238484_0\">// construction uses aggregate initialization</p>\n<p id=\"so_40238484_40238484_1\"><code>std::array&lt;int, 3&gt; a1{ {1, 2, 3} };</code> // double-braces required in C++11 (not in C++14)</p>\n</blockquote>\n", "AcceptedAnswerId": "40238583", "Title": "Why std::array does not contain an initializer-list constructor", "CreationDate": "2016-10-25T11:14:50.760", "LastActivityDate": "2016-10-25T11:46:15.943", "CommentCount": "4", "LastEditDate": "2016-10-25T11:28:49.800", "PostTypeId": "1", "Tags": "<c++><arrays><c++11>", "Id": "40238484", "AnswerCount": "1", "Score": "7", "OwnerUserId": "4523099", "ClosedDate": "2016-10-25T12:21:06.253", "LastEditorUserId": "4523099"}, "40238583": {"Id": "40238583", "PostTypeId": "2", "Body": "<p>The standard defines <code>std::array</code> as follows (N3337 for C++11, but the quoted parts are identical in N4140):</p>\n<blockquote>\n<p id=\"so_40238484_40238583_0\">\u00a723.3.2.1 [array.overview]/2</p>\n<p id=\"so_40238484_40238583_1\">An array is an aggregate that can be initialized with the syntax</p>\n<pre><code>array&lt;T, N&gt; a = { initializer-list };\n</code></pre>\n</blockquote>\n<p>and an aggregate is defined as:</p>\n<blockquote>\n<p id=\"so_40238484_40238583_2\">\u00a78.5.1 [dcl.init.aggr]/1</p>\n<p id=\"so_40238484_40238583_3\">An aggregate is an array or a class with no user-provided\n  constructors, no private or protected non-static data members, no base\n  classes, and no virtual functions.</p>\n</blockquote>\n<p>So it cannot have a user-defined constructor, which an <code>initializer_list</code> one would be.</p>\n<hr>\n<p>Additionally, C++11 defines brace elision only for the <code>T x = { a }</code> syntax:</p>\n<blockquote>\n<p id=\"so_40238484_40238583_4\">\u00a78.5.1 [dcl.init.aggr]/11</p>\n<p id=\"so_40238484_40238583_5\">In a declaration of the form</p>\n<pre><code>T x = { a };\n</code></pre>\n<p id=\"so_40238484_40238583_6\">braces can be elided in an <em>initializer-list</em> as follows. [...]</p>\n</blockquote>\n<p>whereas C++14 (N4140) lifts this requirement:</p>\n<blockquote>\n<p id=\"so_40238484_40238583_7\">\u00a78.5.1 [dcl.init.aggr]/11</p>\n<p id=\"so_40238484_40238583_8\">Braces can be elided in an <em>initializer-list</em> as follows. [...]</p>\n</blockquote>\n<p>So the following is perfectly valid C++14 and above:</p>\n<pre><code>std::array&lt;int,3&gt; an_array{3,4,5}\n</code></pre>\n</hr>", "LastEditorUserId": "2456565", "LastActivityDate": "2016-10-25T11:46:15.943", "Score": "6", "CreationDate": "2016-10-25T11:20:04.903", "ParentId": "40238484", "CommentCount": "6", "OwnerUserId": "2456565", "LastEditDate": "2016-10-25T11:46:15.943"}});