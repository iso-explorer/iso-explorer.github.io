post_cb({"21071717": {"CommentCount": "6", "ViewCount": "100", "PostTypeId": "1", "LastEditorUserId": "1237832", "CreationDate": "2014-01-12T05:41:19.207", "LastActivityDate": "2014-01-12T06:14:23.717", "Title": "The strange behaviour when using c++ specialization template", "AcceptedAnswerId": "21071880", "LastEditDate": "2014-01-12T05:53:17.963", "Id": "21071717", "Score": "2", "Body": "<p>I am newbie in programming with c++ template. I have 3 code files</p>\n<p>main.cpp</p>\n<pre><code>#include \"template_test.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    mytest&lt;int&gt; mt;\n    mt.method(1);\n\n    system(\"pause\");\n\n    return 0;\n}\n</code></pre>\n<p>template_test.h</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;class T&gt;\nclass mytest\n{\npublic:\n\n    void method(T input){}\n};\n\n\ntemplate&lt;&gt;\nvoid mytest&lt;int&gt;::method(int input)\n{\n    cout &lt;&lt; \"ok\" &lt;&lt; endl;\n}\n</code></pre>\n<p>template_test.cpp</p>\n<pre><code>#include \"template_test.h\"\n\n//empty\n</code></pre>\n<p>The code takes effective in VS2013. However when I change my code to 2 sitiuations, there are both something wrong with my code.</p>\n<p>1.The first is with the linker error code.</p>\n<p>main.cpp</p>\n<pre><code>#include \"template_test.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    mytest&lt;int&gt; mt;\n    mt.method(1);\n\n    system(\"pause\");\n\n    return 0;\n}\n</code></pre>\n<p>template_test.h</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;class T&gt;\nclass mytest\n{\npublic:\n\n    void method(T input);\n};\n\ntemplate&lt;class T&gt;\nvoid mytest&lt;T&gt;::method(T input)\n{\n    cout &lt;&lt; \" \" &lt;&lt; endl;\n}//explicit specialization here\n\ntemplate&lt;&gt;\nvoid mytest&lt;int&gt;::method(int input)\n{\n    cout &lt;&lt; \"ok\" &lt;&lt; endl;\n}\n</code></pre>\n<p>template_test.cpp</p>\n<pre><code>#include \"template_test.h\"\n\n//empty\n</code></pre>\n<p>2.The second output nothing instead of the correct answer 'ok'.</p>\n<p>main.cpp</p>\n<pre><code>#include \"template_test.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    mytest&lt;int&gt; mt;\n    mt.method(1);\n\n    system(\"pause\");\n\n    return 0;\n}\n</code></pre>\n<p>template_test.h</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;class T&gt;\nclass mytest\n{\npublic:\n\n    void method(T input){}\n};\n</code></pre>\n<p>template_test.cpp</p>\n<pre><code>#include \"template_test.h\"\n\ntemplate&lt;&gt;\nvoid mytest&lt;int&gt;::method(int input)\n{\n    cout &lt;&lt; \"ok\" &lt;&lt; endl;\n}//move from .h to .cpp file here\n</code></pre>\n<p>The strange behaviour of c++ template makes me confused. So, what's the problem?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1237832", "AnswerCount": "2"}, "21071880": {"ParentId": "21071717", "CommentCount": "0", "CreationDate": "2014-01-12T06:14:23.717", "OwnerUserId": "777186", "PostTypeId": "2", "Id": "21071880", "Score": "3", "Body": "<p>The <strong>first problem</strong> is caused by the fact that your explicit specialization</p>\n<pre><code>template&lt;&gt;\nvoid mytest&lt;int&gt;::method(int input)\n{\n    cout &lt;&lt; \"ok\" &lt;&lt; endl;\n}\n</code></pre>\n<p>is defined in the header file <em>and</em> outside the class definition <em>and</em> without the keyword <code>inline</code>.</p>\n<p>An explicit specialization causes an actual function (rather than a mere template) to be defined. That definition will occur in every translation unit, so if you compile <code>template_test.cpp</code> and <code>main.cpp</code> separately, the definition of the function will be included in both object files, causing a multiple-definition error at linking time (because it's a violation of the ODR, the one-definition-rule).</p>\n<p>You best avoid this either by including the function definition inside the class template definition (by specializing the entire class template for <code>int</code>), or using the keyword <code>inline</code>:</p>\n<pre><code>template&lt;&gt;\ninline void mytest&lt;int&gt;::method(int input)\n{\n    cout &lt;&lt; \"ok\" &lt;&lt; endl;\n}\n</code></pre>\n<p>The <strong>second problem</strong> is caused by the fact that a template specialization must always be declared before it is used:</p>\n<blockquote>\n<p id=\"so_21071717_21071880_0\">(14.7.3/6) If a template, a member template or a member of a class template is explicitly specialized then that specialization shall be declared before the first use of that specialization that would cause an implicit instantiation to take place, in every translation unit in which such a use occurs; no diagnostic is required. If the program does not provide a definition for an explicit specialization and either the specialization is used in a way that would cause an implicit instantiation to take place or the member is a virtual member function, the program is ill-formed, no diagnostic required. An implicit instantiation is never generated for an explicit specialization that is declared but not defined. [...]</p>\n</blockquote>\n<p>Since your <code>main.cpp</code> includes the header file, but not the .cpp file, the declaration of the template specialization is not known when it is used in <code>main.cpp</code>. You solve this best by including the specialization in the header file, either inside the class template definition (by specializing the entire class template for <code>int</code>), or using the keyword <code>inline</code> outside the class template definition.</p>\n", "LastActivityDate": "2014-01-12T06:14:23.717"}, "bq_ids": {"n4140": {"so_21071717_21071880_0": {"section_id": 268, "quality": 0.9833333333333333, "length": 59}}, "n3337": {"so_21071717_21071880_0": {"section_id": 259, "quality": 0.9833333333333333, "length": 59}}, "n4659": {"so_21071717_21071880_0": {"section_id": 275, "quality": 0.9833333333333333, "length": 59}}}, "21071860": {"ParentId": "21071717", "CommentCount": "1", "CreationDate": "2014-01-12T06:09:51.340", "OwnerUserId": "534498", "PostTypeId": "2", "Id": "21071860", "Score": "0", "Body": "<p>You second question first. Remember a rule when using template. Do not separate the template implementation to a cpp file. Make them all in one .h file.</p>\n<p>You first code compiles fine in my VC2012, I am not sure what's wrong with VC2013.</p>\n", "LastActivityDate": "2014-01-12T06:09:51.340"}});