post_cb({"27668269": {"CommentCount": "2", "AcceptedAnswerId": "27668438", "CreationDate": "2014-12-27T14:39:13.440", "LastActivityDate": "2016-09-14T10:15:09.563", "PostTypeId": "1", "ViewCount": "1023", "FavoriteCount": "2", "Title": "Does a default constructor always initialize all members?", "Id": "27668269", "Score": "14", "Body": "<p>I could swear I don't remember having seen this before, and I'm having trouble believing my eyes:</p>\n<p>Does an implicitly-defined default constructor for a non-aggregate class initialize its members or no?</p>\n<p>In Visual C++, when I run this innocent-looking code...</p>\n<pre><code>#include &lt;string&gt;\nstruct S { int a; std::string b; };\nint main() { return S().a; }\n</code></pre>\n<p>... to my astonishment, it returns a non-zero value! But if I remove field <code>b</code>, then it returns zero.</p>\n<p>I've tried this on all versions of VC++ I can get my hands on, and it seems to do this on all of them.</p>\n<p>But when I try it on Clang and GCC, the values are initialized to zero, whether I try it in C++98 mode or C++11 mode.</p>\n<p>What's the correct behavior? Is it not guaranteed to be zero?</p>\n", "Tags": "<c++><visual-c++><constructor><initialization><default-constructor>", "OwnerUserId": "541686", "AnswerCount": "2"}, "27668438": {"ParentId": "27668269", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>Quoting C++11:</p>\n<blockquote>\n<p id=\"so_27668269_27668438_0\"><strong>5.2.3 Explicit type conversion (functional notation) [expr.type.conv]</strong></p>\n<p id=\"so_27668269_27668438_1\">2 The expression <code>T()</code>, where <code>T</code> is a <em>simple-type-specifier</em> or <em>typename-specifier</em> for a non-array complete object type or the (possibly cv-qualified) <code>void</code> type, creates a prvalue of the specified type,which is value-initialized (8.5; no initialization is done for the <code>void()</code> case). [...]</p>\n<p id=\"so_27668269_27668438_2\"><strong>8.5 Initializers [dcl.init]</strong></p>\n<p id=\"so_27668269_27668438_3\">7 To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>...</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>'s implicitly-declared default constructor is non-trivial, that constructor is called.</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>So in C++11, <code>S().a</code> should be zero: the object is zero-initialized before the constructor gets called, and the constructor never changes the value of <code>a</code> to anything else.</p>\n<p>Prior to C++11, value initialization had a different description. Quoting N1577 (roughly C++03):</p>\n<blockquote>\n<p id=\"so_27668269_27668438_4\">To <em>value-initialize</em> an object of type T means:</p>\n<ul>\n<li>...</li>\n<li>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of <code>T</code> is value-initialized;</li>\n<li>...</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n</blockquote>\n<p>Here, value initialization of <code>S</code> did not call any constructor, but caused value initialization of its <code>a</code> and <code>b</code> members. Value initialization of that <code>a</code> member, then, caused zero initialization of that specific member. In C++03, the result was also guaranteed to be zero.</p>\n<p>Even earlier than that, going to the very first standard, C++98:</p>\n<blockquote>\n<p id=\"so_27668269_27668438_5\">The expression <code>T()</code>, where <code>T</code> is a <em>simple-type-specifier</em> (7.1.5.2) for a non-array complete object type or the (possibly cv-qualified) <code>void</code> type, creates an rvalue of the specified type, whose value is determined by default-initialization (8.5; no initialization is done for the <code>void()</code> case).</p>\n</blockquote>\n<p><b></b></p>\n<blockquote>\n<p id=\"so_27668269_27668438_6\">To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a non-POD class type (clause 9), the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>...</li>\n<li>otherwise, the storage for the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p>So based on that very first standard, VC++ is correct: when you add a <code>std::string</code> member, <code>S</code> becomes a non-POD type, and non-POD types don't get zero initialization, they just have their constructor called. The implicitly generated default constructor for <code>S</code> does not initialise the <code>a</code> member.</p>\n<p>So all compilers can be said to be correct, just following different versions of the standard.</p>\n<p>As reported by @Columbo in the comments, later versions of VC++ do cause the <code>a</code> member to be initialized, in accordance with more recent versions of the C++ standard.</p>\n", "OwnerUserId": "743382", "LastEditorUserId": "743382", "LastEditDate": "2014-12-27T15:34:54.910", "Id": "27668438", "Score": "13", "CreationDate": "2014-12-27T15:00:40.210", "LastActivityDate": "2014-12-27T15:34:54.910"}, "27668327": {"ParentId": "27668269", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><sub>(All quotes in the first section are from N3337, C++11 FD with editorial changes)</sub></p>\n<p>I cannot reproduce the behavior with the <a href=\"http://rextester.com/SNWE52483\" rel=\"nofollow noreferrer\">VC++ on rextester</a>. Presumably the bug (see below) is already fixed in the version they are using, but not in yours - @Drop reports that the latest release, VS 2013 Update 4, fails the assertion - while the VS 2015 preview passes them.</p>\n<p>Just to avoid misunderstandings: <code>S</code> is indeed an aggregate. [dcl.init.aggr]/1:</p>\n<blockquote>\n<p id=\"so_27668269_27668327_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no private or protected non-static data members\n  (Clause 11), no base classes (Clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>That is irrelevant though.<br>\nThe semantics of value initialization are important. [dcl.init]/11:</br></p>\n<blockquote>\n<p id=\"so_27668269_27668327_1\">An object whose initializer is an empty set of parentheses, i.e.,\n  <code>()</code>, shall be value-initialized.</p>\n</blockquote>\n<p>[dcl.init]/8:</p>\n<blockquote>\n<p id=\"so_27668269_27668327_2\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a\n       default constructor that is user-provided or deleted, then the object is default-initialized;</li>\n<li><strong>if <code>T</code> is a (possibly cv-qualified) class type without a user-provided or deleted default constructor, then the object is zero-initialized</strong> and the semantic constraints for default-initialization are checked, and if <code>T</code> has a non-trivial default constructor, the object is default-initialized;</li>\n<li>[..]</li>\n</ul>\n</blockquote>\n<p>Clearly this holds regardless of whether <code>b</code> is in <code>S</code> or not. So at least in C++11 in both cases <code>a</code> should be zero. <a href=\"http://coliru.stacked-crooked.com/a/64f2a81f6e0cd49d\" rel=\"nofollow noreferrer\">Clang and GCC show the correct behavior</a>.</p>\n<hr>\n<p>And now let's have a look at the C++03 FD:</p>\n<blockquote>\n<p id=\"so_27668269_27668327_3\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a class type (clause 9) with a user-declared constructor (12.1) [..]</li>\n<li><strong>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class\n  component of <code>T</code> is value-initialized;</strong></li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li><strong>otherwise, the object is zero-initialized</strong></li>\n</ul>\n</blockquote>\n<p>That is, even in C++03 (where the above quote in [dcl.init]/11 also exists in /7), <code>a</code> should be <code>0</code> in both cases.<br>\nAgain, <a href=\"http://coliru.stacked-crooked.com/a/08eab888d8f32c70\" rel=\"nofollow noreferrer\">both GCC and Clang are correct</a> with -std=c++03.</br></p>\n<p>As shown in <a href=\"https://stackoverflow.com/a/27668438/3647361\">hvd's answer</a>, your version is compliant for C++98, and C++98 only.</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:27.760", "Id": "27668327", "Score": "10", "CreationDate": "2014-12-27T14:46:26.903", "LastActivityDate": "2014-12-27T15:35:52.820"}, "bq_ids": {"n4140": {"so_27668269_27668327_0": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}, "so_27668269_27668327_3": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_27668269_27668438_4": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_27668269_27668327_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_27668269_27668438_6": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_27668269_27668438_3": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_27668269_27668438_0": {"section_id": 367, "quality": 0.5714285714285714, "length": 4}, "so_27668269_27668438_5": {"section_id": 6000, "quality": 0.8, "length": 20}, "so_27668269_27668327_1": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_27668269_27668438_1": {"section_id": 6000, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_27668269_27668327_0": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}, "so_27668269_27668327_3": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_27668269_27668438_4": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_27668269_27668327_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_27668269_27668438_6": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_27668269_27668438_3": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_27668269_27668438_0": {"section_id": 356, "quality": 0.5714285714285714, "length": 4}, "so_27668269_27668438_5": {"section_id": 5768, "quality": 0.68, "length": 17}, "so_27668269_27668327_1": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_27668269_27668438_1": {"section_id": 5768, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_27668269_27668327_0": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}, "so_27668269_27668438_0": {"section_id": 379, "quality": 0.5714285714285714, "length": 4}, "so_27668269_27668327_1": {"section_id": 4052, "quality": 1.0, "length": 7}}}});