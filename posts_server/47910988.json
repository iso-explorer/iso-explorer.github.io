post_cb({"47911395": {"Id": "47911395", "PostTypeId": "2", "Body": "<p>As you pointed out, 2.11 states that a <em>core constant expression</em> must not evaluate to:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_47910988_47911395_0\">an id-expression that refers to a variable or data member of reference type unless the reference has a preceding initialization and\n  either</p>\n<ul>\n<li>it is initialized with a constant expression or</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>And further expr.const#6:</p>\n<blockquote>\n<p id=\"so_47910988_47911395_1\">A constant expression is either a glvalue core constant expression\n  that refers to an entity that is a permitted result of a constant\n  expression (as defined below), or a prvalue core constant expression\n  whose value satisfies the following constraints: </p>\n<p id=\"so_47910988_47911395_2\">...</p>\n<p id=\"so_47910988_47911395_3\">An entity is a permitted result of a constant expression if it is an\n  object with static storage duration that is either not a temporary\n  object or is a temporary object whose value satisfies the above\n  constraints, or it is a function.</p>\n</blockquote>\n<p>From my reading of this, it means that the RHS of <code>const X&amp; r =</code> (substitute X for some type) must either be an object with static storage duration <strong>or</strong> a temporary object that meets the above criteria. Since an <code>int</code> does not fit either an object of class type, a pointer type or class/array type, it does not qualify.</p>\n", "LastActivityDate": "2017-12-20T17:26:07.363", "CommentCount": "0", "CreationDate": "2017-12-20T17:26:07.363", "ParentId": "47910988", "Score": "1", "OwnerUserId": "9123744"}, "47912705": {"Id": "47912705", "PostTypeId": "2", "Body": "<p>In this statement:</p>\n<pre><code>const int&amp; ri = 0;\n</code></pre>\n<p><code>0</code> is a prvalue, but <code>ri</code> isn't initialized from that prvalue. The prvalue first undergoes a <a href=\"http://eel.is/c++draft/dcl.init#ref-5.2.1\" rel=\"noreferrer\">temporary materialization conversion</a> and the reference is bound to the resulting glvalue. Since <code>ri</code> is bound to this materialized glvalue, and not directly to the prvalue like you (I) suspected, the relevant restrictions are not the prvalue core constant expression restrictions (which <code>0</code> does satisfy) but rather the <em>glvalue</em> core constant expression restrictions - that the entity be a <a href=\"http://eel.is/c++draft/expr.const#6\" rel=\"noreferrer\"><em>permitted result of a constant expression</em></a>. That restriction, spelled with slightly improved clarity, is:</p>\n<blockquote>\n<p id=\"so_47910988_47912705_0\">either an object with static storage duration that is: </p>\n<ul>\n<li>not a temporary object, or</li>\n<li>a temporary object whose value satisfies the above constraints,</li>\n</ul>\n<p id=\"so_47910988_47912705_1\">or it is a function.</p>\n</blockquote>\n<p>Our glvalue <em>is</em> a temporary object whose value satisfies \"the above constraints\" (\"above\" here referring to the prvalue core constant restrictions, which <code>int</code> trivially satisfies), but it does <em>not</em> have static storage duration.</p>\n<p>Not having static storage duration \u2192 the entity is not a permitted result of a constant expression \u2192 the glvalue expression not a constant expression \u2192  <code>ri</code> wasn't initialized with a constant expression \u2192 <code>ri</code> can't be used in a core constant expression \u2192 the declaration of <code>i</code> is ill-formed. </p>\n<p>The same argument holds for appropriate class types as well. </p>\n", "LastActivityDate": "2017-12-20T18:58:16.817", "CommentCount": "2", "CreationDate": "2017-12-20T18:58:16.817", "ParentId": "47910988", "Score": "5", "OwnerUserId": "2069064"}, "bq_ids": {"n4140": {"so_47910988_47912705_0": {"length": 5, "quality": 1.0, "section_id": 6187}, "so_47910988_47911395_0": {"length": 11, "quality": 1.0, "section_id": 6185}, "so_47910988_47911395_1": {"length": 14, "quality": 0.5833333333333334, "section_id": 6187}}, "n3337": {"so_47910988_47912705_0": {"length": 4, "quality": 0.8, "section_id": 82}, "so_47910988_47911395_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5946}}, "n4659": {"so_47910988_47912705_0": {"length": 5, "quality": 1.0, "section_id": 7690}, "so_47910988_47911395_0": {"length": 11, "quality": 1.0, "section_id": 7687}, "so_47910988_47911395_1": {"length": 24, "quality": 1.0, "section_id": 7690}, "so_47910988_47911395_3": {"length": 20, "quality": 1.0, "section_id": 7690}}}, "47910988": {"ViewCount": "169", "Body": "<p>As a followup to <a href=\"https://stackoverflow.com/q/47908885/2069064\">this question</a>, gcc and clang both consider this program ill-formed:</p>\n<pre><code>int main() {\n    const int&amp; ri = 0;\n    constexpr int i = ri;\n}\n</code></pre>\n<p>The error is about the value of <code>ri</code> being unusable in a constant expression. <code>0</code> is certainly a core constant expression, and as a prvalue core constant expression seems to satisfy <a href=\"http://eel.is/c++draft/expr.const#6\" rel=\"noreferrer\">these constraints</a> (trivially, since <code>int</code> isn't of class, pointer, or array type). So shouldn't <code>ri</code> satisfy <a href=\"http://eel.is/c++draft/expr.const#2.11\" rel=\"noreferrer\">this criteria</a>?</p>\n<p>The same is true if I use a prvalue literal of class type:</p>\n<pre><code>struct X { };\nint main() {\n    const X&amp; rx = X{};\n    constexpr X x = rx;\n}\n</code></pre>\n", "Title": "Reference initialization and constant expressions", "CreationDate": "2017-12-20T17:00:05.973", "LastActivityDate": "2017-12-20T18:58:16.817", "CommentCount": "10", "PostTypeId": "1", "Id": "47910988", "Score": "7", "OwnerUserId": "2069064", "Tags": "<c++><language-lawyer><c++17>", "AnswerCount": "2"}});