post_cb({"bq_ids": {"n4140": {"so_27977700_27977700_0": {"section_id": 5499, "quality": 1.0, "length": 10}}, "n3337": {"so_27977700_27977700_0": {"section_id": 5285, "quality": 1.0, "length": 10}}, "n4659": {"so_27977700_27977700_0": {"section_id": 6933, "quality": 1.0, "length": 10}}}, "27977700": {"CommentCount": "7", "CreationDate": "2015-01-16T05:16:03.273", "PostTypeId": "1", "ClosedDate": "2015-01-16T05:28:12.207", "LastEditorUserId": "15168", "LastActivityDate": "2015-01-16T05:24:53.973", "AnswerCount": "0", "LastEditDate": "2015-01-16T05:24:53.973", "ViewCount": "32", "FavoriteCount": "1", "Title": "Using redeclaration within a block scope", "Id": "27977700", "Score": "1", "Body": "<p>Here is the code which causes a compile-time error:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint a;\n\nvoid f()\n{\n    using ::a;\n    using ::a; //'a' is already declared in this scope. \n}\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/323bc5fd7274f88b\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>What the standard says is (<code>N4296::7.3.3/10 [namespace.udecl]</code>):</p>\n<blockquote>\n<p id=\"so_27977700_27977700_0\">A using-declaration is a declaration and can therefore be used\n  repeatedly where (and only where) multiple declarations are allowed.</p>\n</blockquote>\n<p>So, I supposed that any redeclaration is ill-formed in the block scope. But the program</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid f()\n{\n    extern int a;\n    extern int a;\n}\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/eb5351182c8066b9\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>works fine. So why is the using redeclaration actually prevented from appearing twice in the block scope?    </p>\n", "Tags": "<c++><using-declaration>", "OwnerDisplayName": "user2953119"}});