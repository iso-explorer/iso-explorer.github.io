post_cb({"24253610": {"ParentId": "24253584", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-06-16T23:20:01.013", "Score": "13", "LastEditorUserId": "50079", "LastEditDate": "2014-06-17T07:58:35.767", "Id": "24253610", "OwnerUserId": "50079", "Body": "<p>The standard allows for this behavior, although it doesn't guarantee it. From 3.7.2/2 [basic.stc.thread]:</p>\n<blockquote>\n<p id=\"so_24253584_24253610_0\">A variable with thread storage duration shall be initialized before\n  its first odr-use (3.2) and, if constructed, shall be destroyed on\n  thread exit.</p>\n</blockquote>\n<p>It's also possible that the objects are constructed at some other time (e.g. on program startup), as \"before first use\" means \"at any point as long as it is before\" rather than does \"just before\".</p>\n", "LastActivityDate": "2014-06-17T07:58:35.767"}, "24253584": {"CommentCount": "0", "AcceptedAnswerId": "24253610", "CreationDate": "2014-06-16T23:17:13.993", "LastActivityDate": "2014-06-17T07:58:35.767", "PostTypeId": "1", "ViewCount": "1774", "FavoriteCount": "2", "Title": "When is a `thread_local` global variable initialized?", "Id": "24253584", "Score": "12", "Body": "<p>Consider the following example (lock guards on <code>cout</code> omitted for simplicity).</p>\n<pre><code>#include &lt;future&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nstruct C\n{\n  C() { cout &lt;&lt; \"C constructor\\n\";}\n  ~C() { cout &lt;&lt; \"C destructor\\n\";}\n};\n\nthread_local C foo;\n\nint main()\n{\n   int select;\n   cin &gt;&gt; select;\n   future&lt;void&gt; f[10];\n   for ( int i = 0;i &lt; 10; ++i)\n       f[i] = async( launch::async,[&amp;](){ if (select) foo; } );\n   return 0;\n}\n</code></pre>\n<p>On both clang and gcc, this program outputs nothing if the user writes '0', while it prints <code>Constructor</code>/<code>Destructor</code> 10 times if the user inputs a non zero number. \nAdditionally clang complains about an obvious non used expression result.</p>\n<p>Since a <code>thread_local</code> storage life-time is supposed to span the entire thread's life, I expected the <code>foo</code> variable to be initialized in every thread regardless of the user input. </p>\n<p>I might want to have a <code>thread-local</code> variable for the sole purpose of having a side-effect in the constructor, does the standard mandates that a <code>thread_local</code> object is initialized on its first use?</p>\n", "Tags": "<c++><multithreading><c++11><thread-local>", "OwnerUserId": "666785", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24253584_24253610_0": {"section_id": 7169, "quality": 1.0, "length": 13}}, "n3337": {"so_24253584_24253610_0": {"section_id": 6913, "quality": 1.0, "length": 13}}, "n4659": {"so_24253584_24253610_0": {"section_id": 8677, "quality": 1.0, "length": 13}}}});