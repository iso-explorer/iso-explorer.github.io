post_cb({"31094491": {"ParentId": "31091674", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_31091674_31094491_0\">Can array members be initialized self-referentially?</p>\n</blockquote>\n<p>Yes.</p>\n<pre><code>struct c {\n    int a[3];\n    c() : a{4, a[0], 3} {} // a[0] is initialized to 4.\n                           // a[1] is initialized to whatever a[0] is. (4)\n                           // a[2] is initialized to 3.\n};\n</code></pre>\n<p>But consider this example:</p>\n<pre><code>struct c {\n    int a[3];\n    c() : a{a[1], 4, a[1]} {} // a[0] is initialized to whatever a[1] is.(Garbage value)\n                              // a[1] is initialized to 4.\n                              // a[2] is initialized to what a[1] is now (4).\n};\n</code></pre>\n<p>Here the first element in <code>a</code> will be whatever value is in <code>a[1]</code>,\n which will most likely be garbage value.\n Second element is initialized to <code>4</code> and third element is initialized \n to what is now in <code>a[1]</code>, which is the value <code>4</code>.</p>\n<p>Also, when you don't list all the elements in the array inside the <code>{}</code>,\n elements that aren't listed, will be default initialized:</p>\n<pre><code>struct c {\n    int a[5]; // notice the size\n    c() : a{a[1], 2, 3, 4}{}  // a[0] will get value that is in a[1]\n                              // but since a[1] has garbage value,\n                              // it will be default initialized to 0.\n                              // a[1] = 2\n                              // a[2] = 3\n                              // a[3] = 4\n                              // a[4] is not listed and will get 0.\n};\n</code></pre>\n<p>However, listing an element already initialized will give you the value you want. <br>Using above example:</br></p>\n<pre><code>struct c {\n    int a[5];\n    c() : a{1, a[0], 3, 4}{}  // a[0] = 1\n                              // a[1] = 1\n                              // a[2] = 3\n                              // a[3] = 4\n                              // a[4] is not listed and will get 0.\n};\n</code></pre>\n", "OwnerUserId": "3677097", "LastEditorUserId": "3677097", "LastEditDate": "2015-06-28T04:44:31.593", "Id": "31094491", "Score": "11", "CreationDate": "2015-06-27T23:14:58.640", "LastActivityDate": "2015-06-28T04:44:31.593"}, "31091674": {"CommentCount": "1", "AcceptedAnswerId": "31094491", "PostTypeId": "1", "LastEditorUserId": "3425536", "CreationDate": "2015-06-27T17:48:17.100", "LastActivityDate": "2015-06-28T04:44:31.593", "LastEditDate": "2015-06-27T17:52:55.827", "ViewCount": "562", "FavoriteCount": "2", "Title": "Can array members be initialized self-referentially?", "Id": "31091674", "Score": "22", "Body": "<p>Consider the following code in which we initialize part of <code>D</code> based on another part of <code>D</code>:</p>\n<pre><code>struct c {\n    c() : D{rand(), D[0]} {}\n    int D[2];\n};\n\nint main() {\n    c C;\n    assert(C.D[0] == C.D[1]);\n}\n</code></pre>\n<p>Is the above program well-defined? Can we safely use one part of the same array to initialize another part of it?</p>\n", "Tags": "<c++><c++11><array-initialization><member-initialization>", "OwnerUserId": "3425536", "AnswerCount": "4"}, "31091854": {"ParentId": "31091674", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_31091674_31091854_0\">It is not a good practice to write <code>D{rand(),D[0]}</code>, because when the\n  constructor will run it is not necessary that first rand() will be\n  executed then D[0], it all depends on the compiler, D[0] could be\n  executed first, in that case d[1] will contain garbage value. It\n  completely depends on the compiler, it can compile the second argument\n  first and then the first argument or vice-versa, executing this\n  statement might result in unknown behavior.</p>\n</blockquote>\n", "OwnerUserId": "5008514", "LastEditorUserId": "5008514", "LastEditDate": "2015-06-27T18:09:00.253", "Id": "31091854", "Score": "0", "CreationDate": "2015-06-27T18:06:19.530", "LastActivityDate": "2015-06-27T18:09:00.253"}, "31091931": {"ParentId": "31091674", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">cppreference.com</a>:</p>\n<blockquote>\n<p id=\"so_31091674_31091931_0\">The effects of aggregate initialization are:</p>\n<p id=\"so_31091674_31091931_1\">Each array element or non-static class member, in order of array\n  subscript/appearance in the class definition, is copy-initialized from\n  the corresponding clause of the initializer list.</p>\n</blockquote>\n<p>Your code seems fine.\nHowever is somehow confusing.</p>\n", "OwnerUserId": "952747", "LastEditorUserId": "952747", "LastEditDate": "2015-06-27T19:07:23.497", "Id": "31091931", "Score": "2", "CreationDate": "2015-06-27T18:14:38.020", "LastActivityDate": "2015-06-27T19:07:23.497"}, "bq_ids": {"n4140": {"so_31091674_31091803_0": {"section_id": 3304, "quality": 1.0, "length": 12}}, "n3337": {"so_31091674_31091803_0": {"section_id": 3174, "quality": 0.75, "length": 9}}, "n4659": {"so_31091674_31091803_0": {"section_id": 4070, "quality": 1.0, "length": 12}}}, "31091803": {"ParentId": "31091674", "CommentCount": "3", "Body": "<p>When aggregates (including arrays) are initialized from a braced list, each aggregate element is initialized from the corresponding element of the list (\"in increasing subscript or member order\"). Even though I can't find an exact rule that says that each element initialization is sequenced after the preceding one, there's an example in the Standard that clearly implies that this is the intended meaning. The example is in  [dcl.init.aggr]:</p>\n<blockquote>\n<pre><code>struct S { int a; const char* b; int c; int d = b[a]; };\nS ss = { 1, \"asdf\" };\n</code></pre>\n<p id=\"so_31091674_31091803_0\">initializes <code>ss.a</code> with <code>1</code>, <code>ss.b</code> with <code>\"asdf\"</code>, <code>ss.c</code> with the value of an expression of the form <code>int{}</code> (that is, <code>0</code>), and <code>ss.d</code> with the value of <code>ss.b[ss.a]</code> (that is, <code>\u2019s\u2019</code>)</p>\n</blockquote>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "31091803", "Score": "16", "CreationDate": "2015-06-27T18:01:40.307", "LastActivityDate": "2015-06-27T18:01:40.307"}});