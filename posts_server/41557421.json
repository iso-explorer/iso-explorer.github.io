post_cb({"bq_ids": {"n4140": {"so_41557421_41557463_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 986}, "so_41557421_41557463_1": {"length": 23, "quality": 1.0, "section_id": 969}}, "n3337": {"so_41557421_41557463_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 971}, "so_41557421_41557463_1": {"length": 23, "quality": 1.0, "section_id": 958}}, "n4659": {"so_41557421_41557463_3": {"length": 18, "quality": 0.9473684210526315, "section_id": 1049}, "so_41557421_41557463_1": {"length": 23, "quality": 1.0, "section_id": 1031}}}, "41557421": {"ViewCount": "93", "Body": "<p>The main issue with vectors and pointers to their elements is that they can be reallocated in memory whenever a <code>push_back</code> is called, rendering the pointer invalid.</p>\n<p>I am trying to implement a suffix trie, where I store a data structure <code>node</code> in a vector of nodes. I know that for a string of size <em>n</em> the number <em>n(n+1)/2</em> is an upperbound for the number of nodes in the trie. </p>\n<p>So will the code</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>std::string T = \"Hello StackOverflow!\";\nstd::vector&lt;Node&gt; nodes;\n\nint n = T.length();\nnodes.reserve(n*(n+1)/2);\n</code></pre>\n<p>guarantee that any pointers I create referring to elements of <code>nodes</code> will not be invalidated? i.e. will this guarantee that the vector is not reallocated?</p>\n<hr>\n<p><strong>Edit</strong>: I've implemented this and I keep getting the following error at runtime.</p>\n<pre><code>terminate called after throwing an instance of 'std::out_of_range'\nwhat():  basic_string::at: __n (which is 0) &gt;= this-&gt;size() (which is 0)\nAborted (core dumped)\n</code></pre>\n<p>Any ideas what could be causing this?</p>\n</hr>", "Title": "Vectors and Pointers", "CreationDate": "2017-01-09T21:38:16.973", "LastActivityDate": "2017-01-09T22:01:26.960", "CommentCount": "3", "LastEditDate": "2017-01-09T22:01:26.960", "PostTypeId": "1", "LastEditorUserId": "5664775", "Id": "41557421", "Score": "2", "OwnerUserId": "5664775", "Tags": "<c++><pointers><vector>", "AnswerCount": "2"}, "41557465": {"Id": "41557465", "PostTypeId": "2", "Body": "<p>You can be certain that your pointers will not be invalidated if you are careful. See <a href=\"http://en.cppreference.com/w/cpp/container/vector/push_back\" rel=\"nofollow noreferrer\">std::vector::push_back</a>. It says this about invalidation : </p>\n<blockquote>\n<p id=\"so_41557421_41557465_0\"><strong>If the new size() is greater than capacity()</strong> then all iterators and references (including the past-the-end iterator) are invalidated. Otherwise only the past-the-end iterator is invalidated.</p>\n</blockquote>\n<p>Simply make sure you do not <code>push_back</code> beyond capacity or call other methods that may invalidate. A list of methods that invalidate is available <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow noreferrer\">here</a> in section 'Iterator invalidation'.</p>\n", "LastActivityDate": "2017-01-09T21:41:17.410", "Score": "2", "CreationDate": "2017-01-09T21:41:17.410", "ParentId": "41557421", "CommentCount": "5", "OwnerUserId": "7359094"}, "41557463": {"Id": "41557463", "PostTypeId": "2", "Body": "<p>According to the standard (<code>N4140</code>):</p>\n<blockquote>\n<p id=\"so_41557421_41557463_0\"><strong>23.3.6.3 vector capacity</strong><br>\n  ....</br></p>\n<pre><code>void reserve(size_type n);\n</code></pre>\n<p id=\"so_41557421_41557463_1\">....<br>\n  After <code>reserve()</code>, <code>capacity()</code> is greater or equal to the argument of reserve if\n  reallocation happens; and equal to the previous value of <code>capacity()</code> otherwise. Reallocation happens\n  at this point if and only if the current capacity is less than the argument of <code>reserve()</code>.</br></p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_41557421_41557463_2\"><strong>23.3.6.5 vector modifiers</strong><br>\n  ....</br></p>\n<pre><code>void push_back(const T&amp; x);\nvoid push_back(T&amp;&amp; x);\n</code></pre>\n<p id=\"so_41557421_41557463_3\"><em>Remarks:</em> Causes reallocation if the new size is greater than the old capacity. If no reallocation happens,\n  all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n", "LastEditorUserId": "3246555", "LastActivityDate": "2017-01-09T21:50:53.277", "Score": "5", "CreationDate": "2017-01-09T21:41:09.620", "ParentId": "41557421", "CommentCount": "4", "LastEditDate": "2017-01-09T21:50:53.277", "OwnerUserId": "3246555"}});