post_cb({"5151831": {"ParentId": "5150680", "CommentCount": "0", "Body": "<p>If you would like to write:</p>\n<p>MyClassObject = MyFriendObject;</p>\n<p>Then you would want to implement a constructor that takes a const reference to the friend class as it's parameter.</p>\n", "OwnerUserId": "623133", "PostTypeId": "2", "Id": "5151831", "Score": "0", "CreationDate": "2011-03-01T08:01:51.387", "LastActivityDate": "2011-03-01T08:01:51.387"}, "5150680": {"CommentCount": "0", "ViewCount": "1718", "PostTypeId": "1", "LastEditorUserId": "552792", "CreationDate": "2011-03-01T05:03:31.740", "LastActivityDate": "2016-12-28T08:26:21.770", "Title": "Overloading assignment operator", "FavoriteCount": "1", "LastEditDate": "2011-03-01T05:06:18.930", "Id": "5150680", "Score": "0", "Body": "<p>We can overload assignment operator as a normal function, but we cannot overload assignment operator as a friend function. Why?</p>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "635396", "AnswerCount": "4"}, "41358115": {"ParentId": "5150680", "CommentCount": "0", "Body": "<p>You cannot \"extend\" the assignment operator with a \"free function\" outside the class, but you <em>can</em> design the class so it will allow it:</p>\n<p>Data.h</p>\n<pre><code>class Data {\npublic:\n    Data&amp; operator=(const Data&amp; lhs) { /*...*/; return *this; }\n    template &lt;typename T&gt; Data&amp; operator=(const T&amp; lhs) {\n        return assign(*this, lhs); // Magic right here...\n    }\nprivate:\n    // ...\n};\n</code></pre>\n<p>Point.h</p>\n<pre><code>class Point {\npublic:\n    float x,y;\n    Point&amp; operator=(const Point&amp; lhs) { x = lhs.x, y = lhs.y; return *this; }\n    template &lt;typename T&gt; Point&amp; operator=(const T&amp; lhs) {\n        return assign(*this, lhs); // Magic right here...\n    }\n};\n</code></pre>\n<p>Assignment.h</p>\n<pre><code>Data&amp; assign(const Data&amp; lhs, const Point&amp; rhs) {\n    lhs[\"x\"] = rhs.x;\n    lhs[\"y\"] = rhs.y;\n    return lhs;\n}\n\nPoint&amp; assign(const Point&amp; lhs, const Data&amp; rhs) {\n    rhs.query(\"x\", lhs.x) || rhs.query(0, lhs.x);\n    rhs.query(\"y\", lhs.y) || rhs.query(1, lhs.y);\n    return lhs;\n}\n</code></pre>\n", "OwnerUserId": "1783320", "PostTypeId": "2", "Id": "41358115", "Score": "0", "CreationDate": "2016-12-28T08:26:21.770", "LastActivityDate": "2016-12-28T08:26:21.770"}, "5150998": {"ParentId": "5150680", "CommentCount": "0", "Body": "<p>Because the C++ Standard says so, Article 13.5.3/1:</p>\n<blockquote>\n<p id=\"so_5150680_5150998_0\">An assignment operator shall be\n  implemented by a non-static member\n  function with exactly one parameter.\n  Because a copy assignment operator\n  operator= is implicitly declared for a\n  class if not declared by the user\n  (12.8), a base class assignment\n  operator is always hidden by the copy\n  assignment operator of the derived\n  class.</p>\n</blockquote>\n<p>That's all you really need to know. A friend function is not a member function, so it cannot be used to overload the assignment operator.</p>\n", "OwnerUserId": "491645", "PostTypeId": "2", "Id": "5150998", "Score": "4", "CreationDate": "2011-03-01T05:53:32.347", "LastActivityDate": "2011-03-01T05:53:32.347"}, "bq_ids": {"n4140": {"so_5150680_5150998_0": {"section_id": 660, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_5150680_5150998_0": {"section_id": 650, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_5150680_5150998_0": {"section_id": 688, "quality": 0.967741935483871, "length": 30}}}, "9041760": {"ParentId": "5150680", "CommentCount": "0", "Body": "<p>The difference between <strong>overloading by friend function</strong> and <strong>overloading by member function</strong> is that the calling object must be the first operand in <strong>overloading by member function</strong>, while there is no restriction in <strong>overloading by friend function</strong>. This is the reason behind the standard. Similarly, some other operators requiring the first operand to be the calling function must be overloaded using member functions (examples:  <code>=, [], -&gt;,</code> and <code>( )</code>). </p>\n", "OwnerUserId": "1154908", "PostTypeId": "2", "Id": "9041760", "Score": "0", "CreationDate": "2012-01-28T00:11:44.827", "LastActivityDate": "2012-01-28T00:11:44.827"}});