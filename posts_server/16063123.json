post_cb({"16067393": {"ParentId": "16063123", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><strong>Update:</strong> The situation got a bit more complicated after the resolution of <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1684\" rel=\"nofollow noreferrer\">CWG DR 1684</a> removed the requirement quoted below. Some more information can be found in <a href=\"https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/aA3BsR4ZuoE/discussion\" rel=\"nofollow noreferrer\">this discussion on the std-discussion mailing list</a> and in the related question <a href=\"https://stackoverflow.com/q/27496004/420683\">Why isn't `std::initializer_list` defined as a literal type?</a></p>\n<hr>\n<p>[decl.constexpr]/8:</p>\n<blockquote>\n<p id=\"so_16063123_16067393_0\">A constexpr specifier for a non-static member function that is not a constructor declares that member function to be const (9.3.1). [...] The class of which that function is a member shall be a literal type (3.9).</p>\n</blockquote>\n<p>Therefore, the changes of N3471 guarantee <code>std::initializer_list</code> will be a literal type.</p>\n<hr>\n<p>Note the <code>constexpr</code> ctor alone doesn't require <code>std::initializer_list</code> to be a literal type, see [dcl.constexpr]/4+8. Side note: An object of non-literal type with <code>constexpr</code> ctor can be initialized during <em>constant initialization</em> [basic.start.init]/2] (part of <em>static initialization</em>, performed before any <em>dynamic initialization</em>).</p>\n</hr></hr>", "OwnerUserId": "420683", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:29:34.220", "Id": "16067393", "Score": "8", "CreationDate": "2013-04-17T18:25:49.047", "LastActivityDate": "2015-01-25T22:17:07.583"}, "16063123": {"CommentCount": "1", "CreationDate": "2013-04-17T14:43:23.713", "PostTypeId": "1", "AcceptedAnswerId": "16067393", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-25T22:17:07.583", "LastEditDate": "2017-05-23T12:02:54.123", "ViewCount": "3091", "FavoriteCount": "5", "Title": "Is it legal to declare a constexpr initializer_list object?", "Id": "16063123", "Score": "19", "Body": "<p>As a question that came up during the discussion of <a href=\"https://stackoverflow.com/q/16023262/420683\">this SO question</a>:</p>\n<p>Is it legal, maybe with <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html\" rel=\"nofollow noreferrer\">N3471</a>, to declare a <code>constexpr std::initializer_list</code> object? Example:</p>\n<pre><code>constexpr std::initializer_list&lt;int&gt; my_list{};\n</code></pre>\n<hr>\n<p>Why I think it may not be legal: <code>initializer_list</code> would have to be a literal type; but are there any guarantees that it is a literal type?</p>\n<p>Citations from N3485.</p>\n<p>[dcl.constexpr]/9:</p>\n<blockquote>\n<p id=\"so_16063123_16063123_0\">A constexpr specifier used in an object declaration declares the object as const. Such an object shall have\n  literal type and shall be initialized.</p>\n</blockquote>\n<p>literal types requirements, [basic.types]/10, sub-bullet class types:</p>\n<blockquote id=\"so_16063123_16063123_1\">\n<ul>\n<li>a class type (Clause 9) that has all of the following properties:\n  \n  <ul>\n<li>it has a trivial destructor,</li>\n<li>every constructor call and full-expression in the brace-or-equal-initializers for non-static data members (if any) is a constant expression (5.19),</li>\n<li>it is an aggregate type (8.5.1) or has at least one constexpr constructor or constructor template that is not a copy or move constructor, and</li>\n<li>all of its non-static data members and base classes are of non-volatile literal types.</li>\n</ul></li>\n</ul>\n</blockquote>\n<hr>\n<p>Bonus points ;) for answering if</p>\n<pre><code>constexpr std::initializer_list&lt;int&gt; my_list = {1,2,3,4,5};\n</code></pre>\n<p>is legal (with references). Though I think this is covered by the above + [dcl.init.list]/5</p>\n</hr></hr>", "Tags": "<c++><c++11><language-lawyer><initializer-list><constexpr>", "OwnerUserId": "420683", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16063123_16063123_0": {"section_id": 5425, "quality": 1.0, "length": 13}, "so_16063123_16063123_1": {"section_id": 7208, "quality": 0.7073170731707317, "length": 29}}, "n3337": {"so_16063123_16067393_0": {"section_id": 5219, "quality": 0.8823529411764706, "length": 15}, "so_16063123_16063123_0": {"section_id": 5220, "quality": 1.0, "length": 13}, "so_16063123_16063123_1": {"section_id": 6952, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_16063123_16063123_0": {"section_id": 6847, "quality": 1.0, "length": 13}, "so_16063123_16063123_1": {"section_id": 8717, "quality": 0.7073170731707317, "length": 29}}}});