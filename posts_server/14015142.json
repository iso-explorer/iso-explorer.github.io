post_cb({"bq_ids": {"n4140": {"so_14015142_14015173_0": {"length": 4, "quality": 0.8, "section_id": 3263}}, "n3337": {"so_14015142_14015173_0": {"length": 4, "quality": 0.8, "section_id": 3135}}}, "14015142": {"CreationDate": "2012-12-23T22:17:30.613", "ViewCount": "267", "Id": "14015142", "AcceptedAnswerId": "14015173", "Score": "25", "Title": "Is 'auto a_class::f(...) -> T const' ambiguous in the grammar?", "LastEditorUserId": "500104", "CommentCount": "0", "Body": "<p>How should the below member function prototype be interpreted in C++11?</p>\n<pre><code>class C {\n public:\n  auto f(...) -&gt; T const;\n}\n</code></pre>\n<p>It would seem to me that it could either be a const member function of the class C, or a non-const member function which returns a const value of type T.  </p>\n<p>I know I could just write the function as</p>\n<pre><code>T const f(...);\n</code></pre>\n<p>or</p>\n<pre><code>T f(...) const;\n</code></pre>\n<p>However, I want to be consistent with how I declare functions, so I decided to use the new C++11 <code>auto f(...) -&gt; RetType</code> way everywhere.</p>\n", "Tags": "<c++><c++11><trailing-return-type>", "LastEditDate": "2012-12-23T22:39:03.380", "LastActivityDate": "2012-12-23T22:39:03.380", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1925599"}, "14015173": {"LastActivityDate": "2012-12-23T22:28:58.453", "CreationDate": "2012-12-23T22:23:17.140", "CommentCount": "2", "Body": "<p>The trailing-return-type comes <em>after</em> cv- and ref-qualifiers of a non-static member function. This means the example in the question is the same as <code>T const f(...);</code>.</p>\n<p><code>\u00a78.4.1 [dcl.fct.def.general] p2</code></p>\n<blockquote>\n<p id=\"so_14015142_14015173_0\">The declarator in a function-definition shall have the form</p>\n<p id=\"so_14015142_14015173_1\"><code>D1</code> ( <em>parameter-declaration-clause</em> ) <em>cv-qualifier-seq<sub>opt</sub> ref-qualifier<sub>opt</sub> exception-specification<sub>opt</sub> attribute-specifier-seq<sub>opt</sub> trailing-return-type<sub>opt</sub></em></p>\n</blockquote>\n<p>To declare a <code>const</code> member function, you'd write <code>auto f(...) const -&gt; T const;</code>.</p>\n", "Id": "14015173", "LastEditDate": "2012-12-23T22:28:58.453", "ParentId": "14015142", "OwnerUserId": "500104", "PostTypeId": "2", "Score": "29", "LastEditorUserId": "500104"}});