post_cb({"41667112": {"Id": "41667112", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_41667039_41667112_0\">Why is <code>LinkedList::List* LinkedList::getMiddleNode()</code> necessary after\n  we already included <em>LinkedList.h</em>? As I understand include, it should\n  import all file variables (which is struct List), and declarations.</p>\n</blockquote>\n<p>Apart from the possibility of defining non-member functions separate from its declaration elsewhere; what if you have multiple visible class with the same function name? How do you separately define its member functions out of class? So, that's C++'s way to define a member function outside a class definition. To quote (emphasis mine):</p>\n<blockquote>\n<p id=\"so_41667039_41667112_1\"><strong><a href=\"http://eel.is/c++draft/class.mem#class.mfct-4\" rel=\"nofollow noreferrer\">[class.mem/4]</a>:</strong> If the definition of a member function is lexically outside its class\n  definition, <strong>the member function name shall be qualified by its class\n  name using the \u200b::\u200b operator.</strong> <em>[\u2009Note:</em> A name used in a member function\n  definition (that is, in the parameter-declaration-clause including the\n  default arguments ([dcl.fct.default]) or in the member function body)\n  is looked up as described in [basic.lookup]. \u2009<em>\u2014\u2009end note\u2009] [\u2009Example:</em></p>\n<pre><code>struct X {\n  typedef int T;\n  static T count;\n  void f(T);\n};\nvoid X::f(T t = count) { }\n</code></pre>\n<p id=\"so_41667039_41667112_2\">The member function <code>f</code> of <code>class X</code> is defined in global scope; the\n  notation <code>X\u200b::\u200bf</code> specifies that the function <code>f</code> is a member of <code>class X</code>\n  and in the scope of <code>class X</code>. In the function definition, the parameter\n  type <code>T</code> refers to the typedef member <code>T</code> declared in <code>class X</code> and the\n  default argument count refers to the static data member count declared\n  in <code>class X</code>. *\u2009\u2014\u2009end example\u2009]*</p>\n</blockquote>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2017-01-15T22:48:01.200", "Score": "0", "CreationDate": "2017-01-15T22:39:05.613", "ParentId": "41667039", "CommentCount": "0", "OwnerUserId": "1621391", "LastEditDate": "2017-01-15T22:48:01.200"}, "bq_ids": {"n4140": {"so_41667039_41667112_1": {"length": 30, "quality": 0.8108108108108109, "section_id": 5884}, "so_41667039_41667112_2": {"length": 32, "quality": 0.9142857142857143, "section_id": 5884}}, "n3337": {"so_41667039_41667112_1": {"length": 30, "quality": 0.8108108108108109, "section_id": 5655}, "so_41667039_41667112_2": {"length": 32, "quality": 0.9142857142857143, "section_id": 5655}}, "n4659": {"so_41667039_41667112_1": {"length": 30, "quality": 0.8108108108108109, "section_id": 7367}, "so_41667039_41667112_2": {"length": 32, "quality": 0.9142857142857143, "section_id": 7367}}}, "41667073": {"Id": "41667073", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_41667039_41667073_0\">Why is LinkedList::List* LinkedList::getMiddleNode() necessary after we already included LinkedList.h? </p>\n</blockquote>\n<p>Because compiler needs to know that you are defining method of class <code>LinkedList</code> and not a standalone function. Nobody would stop you to declare/define standalone function as well as method like this:</p>\n<pre><code>class LinkedList {\npublic:\n    LinkedList::List* LinkedList::getMiddleNode();\n    ...\n};\n\nLinkedList::List* getMiddleNode();\n</code></pre>\n<p>How would you tell compiler which one is which?</p>\n", "LastEditorUserId": "432358", "LastActivityDate": "2017-01-15T22:37:02.970", "Score": "1", "CreationDate": "2017-01-15T22:33:43.217", "ParentId": "41667039", "CommentCount": "1", "OwnerUserId": "432358", "LastEditDate": "2017-01-15T22:37:02.970"}, "41667039": {"ViewCount": "48", "Body": "<p>Why is LinkedList::List* LinkedList::getMiddleNode() necessary after we already included LinkedList.h? As I understand include, it should import all file variables (which is struct List), and declarations.</p>\n<p>Here's the header file.   </p>\n<pre><code>class LinkedList{\n\nprivate:\n    struct List {\n        int num;\n\n        List* next;\n    };\n    List* head;\n\npublic:\n    ...\n    ...\n    List* getMiddleNode();\n};\n</code></pre>\n<p>Now here's the CPP File.</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"LinkedList.h\"\n\nLinkedList::List* LinkedList::getMiddleNode() {\n    ...\n    ...\n    return node;\n}\n</code></pre>\n", "Title": "Why Is Scope Resolution Operator Needed In CPP File", "CreationDate": "2017-01-15T22:30:09.887", "LastActivityDate": "2017-01-15T22:48:01.200", "CommentCount": "1", "PostTypeId": "1", "Id": "41667039", "Score": "0", "OwnerUserId": "7422661", "Tags": "<c++><scope><include>", "AnswerCount": "2"}});