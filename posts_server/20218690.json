post_cb({"20218690": {"CommentCount": "13", "AcceptedAnswerId": "20218942", "PostTypeId": "1", "LastEditorUserId": "757345", "CreationDate": "2013-11-26T13:41:57.033", "LastActivityDate": "2013-11-26T14:35:50.903", "LastEditDate": "2013-11-26T14:35:50.903", "ViewCount": "382", "FavoriteCount": "0", "Title": "program execution is not started at main()", "Id": "20218690", "Score": "7", "Body": "<p>I developed many years in C and only now discovered that a program can execute code prior to main() function.\nHere is a code example</p>\n<pre><code>int generateNum(){\n    // Some malicious code here...\n    return 5;\n}\n\nstatic int someArray[] = {generateNum(),generateNum()}  \n\nint main(){\n     // Some code here...\n}\n</code></pre>\n<p>The function <code>generateNum()</code> is called twice before <code>main()</code>.</p>\n<p>My questions are </p>\n<ol>\n<li>Who calls generateNum()? I know that on Windows it is crtexe()</li>\n<li>Is this behavior standardized on different platforms: Windows/Linux/Android/iOS?</li>\n<li>How can I get more information about this behavior? I want to search in Google, but I don't know how to describe it. </li>\n<li>Can I do anything I want inside the generateNum()? I mean, can I call malloc()? What about fopen() and fwrite()?  Can I open a socket and send information over UDP? Eventually I can abuse this function and even call to main() from it :-)</li>\n</ol>\n", "Tags": "<c++>", "OwnerUserId": "757345", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20218690_20218759_0": {"section_id": 7145, "quality": 1.0, "length": 7}, "so_20218690_20218759_2": {"section_id": 7145, "quality": 0.9230769230769231, "length": 36}}, "n3337": {"so_20218690_20218759_0": {"section_id": 6889, "quality": 1.0, "length": 7}, "so_20218690_20218759_2": {"section_id": 6889, "quality": 0.9230769230769231, "length": 36}}, "n4659": {"so_20218690_20218759_0": {"section_id": 8646, "quality": 0.7142857142857143, "length": 5}, "so_20218690_20218759_2": {"section_id": 8646, "quality": 0.8717948717948718, "length": 34}}}, "20218942": {"ParentId": "20218690", "CommentCount": "5", "CreationDate": "2013-11-26T13:52:22.187", "OwnerUserId": "1948143", "PostTypeId": "2", "Id": "20218942", "Score": "7", "Body": "<ol>\n<li>C++ guarantees that such initialisations take place before <code>main</code>. This can be taken care of by the operating system loader/linker, or by some special module linked against the object file that contained <code>main</code>.  For gcc, this is described here:  <a href=\"http://gcc.gnu.org/onlinedocs/gccint/Initialization.html\">http://gcc.gnu.org/onlinedocs/gccint/Initialization.html</a></li>\n<li>Not quite.  C++11, 3.6.2.4 (basic.start.init): <em>It is implementation-defined whether the dynamic initialization of a non-local variable with static storage duration is done before the first statement of main.</em>  Note that initialization takes place before you can ever access that value, though, especially before there is any notion of reference to an entity in the same compilation unit.</li>\n<li>[basic.start.init] in the language standard is what you want to have a look at.  The behaviour here is <em>dynamic initialization</em> for variables with <em>static storage duration</em>.</li>\n</ol>\n", "LastActivityDate": "2013-11-26T13:52:22.187"}, "20218759": {"ParentId": "20218690", "CommentCount": "0", "CreationDate": "2013-11-26T13:45:36.583", "OwnerUserId": "418729", "PostTypeId": "2", "Id": "20218759", "Score": "7", "Body": "<blockquote>\n<p id=\"so_20218690_20218759_0\">A program shall contain a global function called main, <em>which is the designated start of the program.</em></p>\n</blockquote>\n<p>It doesn't say that no code executes before <code>main</code> is called. Full quote:</p>\n<blockquote>\n<p id=\"so_20218690_20218759_1\">3.6.1  Main function                                [basic.start.main]</p>\n<p id=\"so_20218690_20218759_2\">1 A  program  shall  contain a global function called main, which is\n  the   designated start of the program.  It is implementation-defined\n  whether   a  program  in a freestanding environment is required to\n  define a main   function.  [Note: in a freestanding environment,\n  start-up and termination  is  implementation-defined;  <em>start-up \n  contains the execution of   constructors for objects of namespace\n  scope with static storage  duration;  termination  contains  the\n  execution of destructors for objects   with static storage duration</em>. \n  ]</p>\n</blockquote>\n", "LastActivityDate": "2013-11-26T13:45:36.583"}});