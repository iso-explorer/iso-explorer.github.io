post_cb({"bq_ids": {"n4140": {"so_46612216_46612267_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6047}}, "n3337": {"so_46612216_46612267_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5815}}, "n4659": {"so_46612216_46612267_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 7546}}}, "46612267": {"Id": "46612267", "PostTypeId": "2", "Body": "<p>Strictly speaking, the C++ standard doesn't require an implementation to support conversion of function pointers to an opaque object pointer (<code>void*</code>). You've probably been told <code>void*</code> can point to anything, but that \"anything\" isn't necessarily functions.</p>\n<p>Since this feature is only conditionally supported, there's no telling how such a conversion will take place. It could be that your implementation will only convert to and from <code>void*</code> whilst preserving the value (that's the minimum requirement the standard places). But the value need not be the same in both pointer representations.</p>\n<p>To quote the latest C++ standard draft on this, <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.reinterpret.cast#8\" rel=\"noreferrer\">[expr.reinterpret.cast]/8</a>:</p>\n<blockquote>\n<p id=\"so_46612216_46612267_0\">Converting a function pointer to an object pointer type or vice versa\n  is conditionally-supported. The meaning of such a conversion is\n  implementation-defined, except that if an implementation supports\n  conversions in both directions, converting a prvalue of one type to\n  the other type and back, possibly with different cv-qualification,\n  shall yield the original pointer value.</p>\n</blockquote>\n", "LastActivityDate": "2017-10-06T18:57:59.360", "CommentCount": "0", "CreationDate": "2017-10-06T18:57:59.360", "ParentId": "46612216", "Score": "8", "OwnerUserId": "817643"}, "46612216": {"ViewCount": "58", "Body": "<p>I have a function, say </p>\n<pre><code>void myfunc()\n</code></pre>\n<p>and if I declare a pointer and assign it the function's address as follows</p>\n<pre><code>void *test_pointer = (void*) &amp;myfunc;\n</code></pre>\n<p>and go in debug mode with Visual Studio, I will get the following from the watch window</p>\n<pre><code>Name                       Value\n&amp;myfunc                    0x000000013fc06570\ntest_pointer               0x000000013fa4786f\n</code></pre>\n<p>Now I would expect these two values to be identical, why is it not the case?</p>\n", "AcceptedAnswerId": "46612267", "Title": "Pointer assigned function address shows a different value than function address", "CreationDate": "2017-10-06T18:54:13.720", "Id": "46612216", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-10-06T18:57:59.360", "Score": "2", "OwnerUserId": "3208430", "Tags": "<c++>", "AnswerCount": "1"}});