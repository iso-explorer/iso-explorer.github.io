post_cb({"17909386": {"CommentCount": "0", "AcceptedAnswerId": "17909531", "ClosedDate": "2013-07-29T07:12:52.883", "CreationDate": "2013-07-28T14:47:52.260", "LastActivityDate": "2013-07-28T14:59:40.123", "PostTypeId": "1", "ViewCount": "165", "Title": "Forward declaring the mapped type of a map and C++11", "Id": "17909386", "Score": "3", "Body": "<p>Most C++ compilers I've worked with accept the following</p>\n<pre><code>#include &lt;map&gt;\n\nstruct A;\n\nstruct B\n{\n    typedef std::map&lt;int,A&gt;::iterator iterator;\n    std::map&lt;int,A&gt; test;\n};\n\nstruct A\n{\n};\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>however, Apple clang 4.0 compiled with</p>\n<pre><code>clang++ test.cpp -o test -std=c++11 -stdlib=libc++\n</code></pre>\n<p>produces a collection of errors that imply A must be a complete type before std::map can be used. Is this a defect in the libc++ implementation of map, a new requirement imposed by C++11 or a bad assumption on my part?</p>\n", "Tags": "<c++><c++11><clang>", "OwnerUserId": "205587", "AnswerCount": "1"}, "17909531": {"ParentId": "17909386", "CommentCount": "1", "Body": "<p>According to the requirements in 17.6.4.8 [res.on.functions] paragraph 2 it states:</p>\n<blockquote>\n<p id=\"so_17909386_17909531_0\">In particular, the effects are undefined in the following cases: ... if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>Few components explicitly state that template arguments are allowed to be incomplete. That, is you are making an assumption which is not covered by the standard.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "17909531", "Score": "4", "CreationDate": "2013-07-28T14:59:40.123", "LastActivityDate": "2013-07-28T14:59:40.123"}, "bq_ids": {"n4140": {"so_17909386_17909531_0": {"section_id": 6324, "quality": 1.0, "length": 16}}, "n3337": {"so_17909386_17909531_0": {"section_id": 6081, "quality": 1.0, "length": 16}}, "n4659": {"so_17909386_17909531_0": {"section_id": 7834, "quality": 1.0, "length": 16}}}});