post_cb({"14778312": {"ParentId": "14778269", "CommentCount": "0", "Body": "<p>It is called the <em>bitwise complement operator</em> in C.</p>\n<p>It inverts all bits of the (promoted) operand (a <code>0</code> becomes a <code>1</code> and a <code>1</code> becomes a <code>0</code>).</p>\n<pre><code>if (~mask == 0){...}\n</code></pre>\n<p>This checks if all bits of <code>mask</code> are set to <code>1</code>.</p>\n", "OwnerUserId": "1119701", "PostTypeId": "2", "Id": "14778312", "Score": "1", "CreationDate": "2013-02-08T17:44:03.667", "LastActivityDate": "2013-02-08T17:44:03.667"}, "14778293": {"ParentId": "14778269", "CommentCount": "1", "Body": "<p>it's a bitwise not. It inverts all of the bits of the variable.\nIn this case your if will be true if all of the bits of \"mask\" are 1.</p>\n", "OwnerUserId": "417292", "PostTypeId": "2", "Id": "14778293", "Score": "4", "CreationDate": "2013-02-08T17:42:59.177", "LastActivityDate": "2013-02-08T17:42:59.177"}, "14778726": {"ParentId": "14778269", "CommentCount": "0", "Body": "<p>its bitwise not....it gives the complement of the given number's binary representation!\nlike if you write\n    b=(~a);\nand a is equal to say 11 whose binary representation is 0000 1011...the it'll gives\n...b=1111 0100 in binary</p>\n", "OwnerUserId": "1940905", "PostTypeId": "2", "Id": "14778726", "Score": "0", "CreationDate": "2013-02-08T18:09:07.910", "LastActivityDate": "2013-02-08T18:09:07.910"}, "14778304": {"ParentId": "14778269", "CommentCount": "0", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/Bitwise_operation#NOT\" rel=\"nofollow\">It's a bitwise not operation.</a> </p>\n<p>(And it's called a \"tilde\".)</p>\n", "Id": "14778304", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "0", "CreationDate": "2013-02-08T17:43:41.860", "LastActivityDate": "2013-02-08T17:43:41.860"}, "14778292": {"ParentId": "14778269", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>It's a <a href=\"http://en.wikipedia.org/wiki/Tilde#Computer_languages\" rel=\"nofollow noreferrer\"><em>tilde</em></a> and in C++ it means <a href=\"http://en.wikipedia.org/wiki/Bitwise_operation#NOT\" rel=\"nofollow noreferrer\"><em>bitwise NOT</em></a>.</strong></p>\n<p>For an eight-bit unsigned integer named <code>mask</code> with the following bit representation:</p>\n<pre><code>0010 1100\n</code></pre>\n<p>the value of <code>~mask</code> is:</p>\n<pre><code>1101 0011\n</code></pre>\n<p>Notice how all the bits have been flipped.</p>\n<p>For your <code>if</code> condition (<code>~mask == 0</code>) to evaluate to true:</p>\n<pre><code>~mask: 0000 0000\n mask: 1111 1111\n</code></pre>\n<p>In such a case, <code>mask</code> has the value <code>255</code>.</p>\n<p>Apply the same logic to integers of different bit-widths and signedness, as appropriate.</p>\n<p><sup>(<strong>Note:</strong> In reality, if your system has 32-bit <code>int</code>s, <code>~mask</code> will be 32-bit even if <code>mask</code> was 8-bit. This is because <code>~</code> performs <em>integral promotion</em>. However, I ignore this fact for the above simple examples.)</sup></p>\n<hr>\n<p>Here's the formal definition:</p>\n<blockquote>\n<p id=\"so_14778269_14778292_0\"><code>[C++11: 5.3.1/10]:</code> <strong>The operand of <code>\u02dc</code> shall have integral or unscoped enumeration type; the result is the one\u2019s complement of its operand.</strong> Integral promotions are performed. The type of the result is the type of the promoted operand. There is an ambiguity in the <em>unary-expression</em> <code>\u02dcX()</code>, where <code>X</code> is a <em>class-name</em> or <em>decltype-specifier</em>. The ambiguity is resolved in favor of treating <code>\u02dc</code> as a unary complement rather than treating <code>\u02dcX</code> as referring to a destructor.</p>\n</blockquote>\n<p>As the passage reminds us, do not confuse <em>bitwise NOT</em> for <a href=\"https://stackoverflow.com/questions/1395506/in-c-what-does-a-tilde-before-a-function-name-signify\">the leading character in the name of a class destructor</a>. It's interesting that <code>~</code> was chosen for destructors; arguably it's because one could perceive a destructor as the opposite (i.e. logical <em>NOT</em>) of a constructor.</p>\n</hr>", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:59.137", "Id": "14778292", "Score": "8", "CreationDate": "2013-02-08T17:42:41.780", "LastActivityDate": "2013-02-08T17:54:48.070"}, "bq_ids": {"n4140": {"so_14778269_14778292_0": {"section_id": 6073, "quality": 0.8780487804878049, "length": 36}}, "n3337": {"so_14778269_14778292_0": {"section_id": 5841, "quality": 0.8780487804878049, "length": 36}}, "n4659": {"so_14778269_14778292_0": {"section_id": 7569, "quality": 0.7560975609756098, "length": 31}}}, "14778269": {"CommentCount": "2", "ViewCount": "360", "CreationDate": "2013-02-08T17:41:19.787", "LastActivityDate": "2013-02-08T18:09:07.910", "Title": "what does the wiggle sign mean in c/c++?", "AcceptedAnswerId": "14778292", "PostTypeId": "1", "Id": "14778269", "Score": "0", "Body": "<pre><code>if (~mask == 0){...}\n</code></pre>\n<p>I have encountered this thing in one of the .cpp files, and I wonder what is does ~ mean in c/c++?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "961936", "AnswerCount": "5"}});