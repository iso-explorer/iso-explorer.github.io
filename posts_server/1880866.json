post_cb({"1880883": {"CommentCount": "0", "Body": "<p>This is not possible</p>\n", "CreationDate": "2009-12-10T13:08:46.837", "ParentId": "1880866", "Id": "1880883", "LastActivityDate": "2009-12-10T13:08:46.837", "PostTypeId": "2", "Score": "3", "OwnerUserId": "125672"}, "18994512": {"CommentCount": "0", "Body": "<p>Your first idea might be to do something like this :</p>\n<pre><code>void something(int a, int b=-1, int c=-1){\n    if(b == -1)\n        b = a;\n    if(c == -1)\n        c = b;\n}\n</code></pre>\n<p>I used -1 because this function only works with positive values. But what if someone uses my class and makes a mistake which ends up sending -1 to the method? It would still compile and execute, but the result would be unpredictable for the user. So the smart thing to do would be to remove any default argument and instead make a bunch of methods with the same name like this:</p>\n<pre><code>void something(int a, int b, int c){\n    /* Do something with a, b and c */\n}\n\nvoid something(int a){\n    something(a, a, a);\n}\n\nvoid something(int a, int b){\n    something(a, b, b);\n}\n</code></pre>\n<p>It doesn't really take much longer to code, and if someone uses it in a programming interface with auto-complete features, it will show the 3 possible prototypes.</p>\n", "CreationDate": "2013-09-25T00:58:03.010", "ParentId": "1880866", "Id": "18994512", "LastActivityDate": "2013-09-25T00:58:03.010", "PostTypeId": "2", "Score": "1", "OwnerUserId": "2813263"}, "1880916": {"LastActivityDate": "2009-12-10T23:30:42.617", "CommentCount": "2", "Body": "<p>I do not think you can do that as that is an illegal syntax. But however, consult the C99 standard in pdf format (<strong>n1136.pdf</strong>). </p>\n<p>However, you may get around this by using <code>static</code> as in declaring the variables static and using them within the function <code>f</code></p>\n<pre>\nstatic int global_a;\n\n/* In some other spot where you are calling f(), do this beforehand */\n/* global_a = 4; f(); */\n\nvoid f(void){\n   int a = global_a;\n   b = c = a;\n   /* ..... */\n}\n</pre>\n<p><strong>Kudos to Michael Burr for pointing out my error!</strong> :)</p>\n<p>It sounds like you need to rethink your code and change it around for something like that.</p>\n<p>Hope this helps,\nBest regards,\nTom.</p>\n", "CreationDate": "2009-12-10T13:15:30.667", "LastEditDate": "2009-12-10T23:30:42.617", "ParentId": "1880866", "Id": "1880916", "LastEditorUserId": "206367", "PostTypeId": "2", "Score": "1", "OwnerUserId": "206367"}, "1880866": {"CreationDate": "2009-12-10T13:05:40.843", "ViewCount": "6250", "FavoriteCount": "3", "Id": "1880866", "AcceptedAnswerId": "1880898", "Score": "33", "Title": "C/C++ default argument set as a previous argument", "LastEditorUserId": "5771029", "CommentCount": "1", "Body": "<p>I was unable to find a clear answer to this although that might be because I was not using the proper search terms so please redirect me if that is the case.  Is it possible to use previous arguments in a functions parameter list as the default value for later arguments in the parameter list?  For instance,</p>\n<pre><code>void f( int a, int b = a, int c = b );\n</code></pre>\n<p>If this is possible are there any rules of use?  Any difference between C and C++?</p>\n", "Tags": "<c++><function><arguments>", "LastEditDate": "2017-06-20T20:17:30.490", "LastActivityDate": "2017-06-20T20:17:30.490", "PostTypeId": "1", "AnswerCount": "7", "OwnerUserId": "225002"}, "bq_ids": {"n4140": {"so_1880866_1880877_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 3260}}, "n3337": {"so_1880866_1880877_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3132}}}, "1880877": {"CreationDate": "2009-12-10T13:08:10.853", "ParentId": "1880866", "LastEditorDisplayName": "anon", "Id": "1880877", "LastEditorUserId": "52041", "CommentCount": "0", "Body": "<p>No, that is not legal C++. This is specified in section 8.3.6/9 of the C++ Standard:</p>\n<blockquote>\n<p id=\"so_1880866_1880877_0\">Default arguments are evaluated each\n  time the function is called.  The\n  order of evaluation of function arguments\n  is unspecified.  Consequently,\n  parameters of a function shall not be\n  used in default argument expressions,\n  even if they are not evaluated.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_1880866_1880877_1\">int f(int a, int b = a);  // error:\n  parameter a used as default argument</p>\n</blockquote>\n<p>And C89 at least does not support default parameter values.</p>\n", "OwnerDisplayName": "anon", "LastEditDate": "2016-04-19T20:13:52.153", "LastActivityDate": "2016-04-19T20:13:52.153", "PostTypeId": "2", "Score": "25"}, "1880895": {"CommentCount": "3", "Body": "<p>As a potential workaround, you could do:</p>\n<pre><code>const int defaultValue = -999; // or something similar\n\nvoid f( int a, int b = defaultValue, int c = defaultValue )\n{\n    if (b == defaultValue) { b = a; }\n    if (c == defaultValue) { c = b; }\n\n    //...\n}\n</code></pre>\n", "CreationDate": "2009-12-10T13:10:39.673", "ParentId": "1880866", "Id": "1880895", "LastActivityDate": "2009-12-10T13:10:39.673", "PostTypeId": "2", "Score": "7", "OwnerUserId": "33686"}, "1880887": {"CommentCount": "0", "Body": "<p>No, you cannot do that.<br>You will surely get an error \"Local variable may not appear in this context\". </br></p>\n", "CreationDate": "2009-12-10T13:09:31.297", "ParentId": "1880866", "Id": "1880887", "LastActivityDate": "2009-12-10T13:09:31.297", "PostTypeId": "2", "Score": "2", "OwnerUserId": "165520"}, "1880898": {"CommentCount": "2", "Body": "<p>The answer is no, you can't. You could get the behaviour you want using overloads:</p>\n<pre><code>void f(int a, int b, int c);\ninline void f(int a, int b) { f(a,b,b); }\ninline void f(int a)        { f(a,a,a); }\n</code></pre>\n<p>As for the last question, C doesn't allow default parameters at all.</p>\n", "CreationDate": "2009-12-10T13:10:48.647", "ParentId": "1880866", "Id": "1880898", "LastActivityDate": "2009-12-10T13:10:48.647", "PostTypeId": "2", "Score": "52", "OwnerUserId": "204847"}});