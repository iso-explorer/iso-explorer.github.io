post_cb({"38899278": {"ParentId": "38898935", "CommentCount": "0", "Body": "<p>Nope, this behavior is expected and standard.</p>\n<p>The rational is that <a href=\"http://en.cppreference.com/w/cpp/utility/pair\" rel=\"nofollow\">std::pair</a> actually forms a struct, therefore both its types must be complete before instantiation.</p>\n", "OwnerUserId": "2217769", "PostTypeId": "2", "Id": "38899278", "Score": "1", "CreationDate": "2016-08-11T14:32:25.840", "LastActivityDate": "2016-08-11T14:32:25.840"}, "38898935": {"CommentCount": "0", "ViewCount": "310", "PostTypeId": "1", "LastEditorUserId": "6386155", "CreationDate": "2016-08-11T14:17:38.803", "LastActivityDate": "2017-08-03T17:59:42.283", "Title": "Forward declaration of objects with STL containers", "AcceptedAnswerId": "38899219", "LastEditDate": "2017-08-03T17:59:42.283", "Id": "38898935", "Score": "3", "Body": "<p>Consider the following code snippet, where the first line serves only as forward declaration</p>\n<pre><code> class A;\n</code></pre>\n<p>followed by defining new class</p>\n<pre><code>class B\n{\n vector&lt;A&gt; Av;  //line 1\n map&lt;int, A&gt; Am;  //line 2\n pair&lt;int, A&gt; Ap; //line 3\n};\n</code></pre>\n<p>line 1 and line 2 seems to be fine with the forward declaration (which may tell me that those container use pointer type of implementation) where as line 3 does not seem to compile on VS2012.</p>\n<p>My question is that behavior dictated by the standard or specific to the compiler I am using?</p>\n<p>Thanks</p>\n", "Tags": "<c++><visual-studio-2012><stl><forward-declaration><std-pair>", "OwnerUserId": "6386155", "AnswerCount": "3"}, "38899219": {"ParentId": "38898935", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The relevant rules for the standard library types are in [res.on.functions]:</p>\n<blockquote>\n<p id=\"so_38898935_38899219_0\">In particular, the effects are undefined in the following cases: [...] if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>This:</p>\n<pre><code>vector&lt;A&gt; Av;\n</code></pre>\n<p>is fine. <code>std::vector</code> is allowed to be instantiated with an incomplete type, as long as it becomes complete before you use any of the members. There is an explicit exception for this in the standard in [vector.overview]:</p>\n<blockquote>\n<p id=\"so_38898935_38899219_1\">An incomplete type <code>T</code> may be used when instantiating <code>vector</code> if the allocator satisfies the allocator completeness\n  requirements 17.6.3.5.1. <code>T</code> shall be complete before any member of the resulting specialization of vector\n  is referenced.</p>\n</blockquote>\n<p>There is similar wording for <code>std::list</code> and <code>std::forward_list</code>.</p>\n<p>This:</p>\n<pre><code>map&lt;int, A&gt; Am;\n</code></pre>\n<p>is ill-formed. <code>std::map</code> requires a complete type at point of instantiation as per the first quote. There is no exception for this container in the way that there is for <code>vector</code>.</p>\n<p>This:</p>\n<pre><code>pair&lt;int, A&gt; Ap;\n</code></pre>\n<p>cannot possibly ever work, since <code>pair</code> is just a simply struct with two members. In order to have a member of type <code>A</code>, you need a complete type.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2016-08-11T14:40:00.720", "Id": "38899219", "Score": "5", "CreationDate": "2016-08-11T14:30:07.703", "LastActivityDate": "2016-08-11T14:40:00.720"}, "38899440": {"ParentId": "38898935", "CommentCount": "0", "Body": "<p>[<em>As supplemental instruction to Barry's answer</em>]</p>\n<p>According to the standard (C++17), only <code>std::vector</code>, <code>std::list</code> and <code>std::forward_list</code> could be used with incomplete type when instantiating.</p>\n<p><a href=\"http://eel.is/c++draft/vector.overview#3\" rel=\"nofollow\">$23.3.11.1/3 Class template vector overview\n[vector.overview]</a>:</p>\n<blockquote>\n<p id=\"so_38898935_38899440_0\">An incomplete type <code>T</code> may be used when instantiating <code>vector</code> if the allocator satisfies the allocator completeness requirements [allocator.requirements.completeness]. <code>T</code> shall be complete before any member of the resulting specialization of <code>vector</code> is referenced.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/forwardlist.overview#4\" rel=\"nofollow\">$23.3.9.1/4 Class template forward_list overview\n[forwardlist.overview]</a>:</p>\n<blockquote>\n<p id=\"so_38898935_38899440_1\">An incomplete type <code>T</code> may be used when instantiating <code>forward_list</code> if the allocator satisfies the allocator completeness requirements [allocator.requirements.completeness]. <code>T</code> shall be complete before any member of the resulting specialization of <code>forward_list</code> is referenced.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/list.overview#3\" rel=\"nofollow\">$23.3.10.1/3 Class template list overview\n[list.overview]</a>:</p>\n<blockquote>\n<p id=\"so_38898935_38899440_2\">An incomplete type <code>T</code> may be used when instantiating <code>list</code> if the allocator satisfies the allocator completeness requirements [allocator.requirements.completeness]. <code>T</code> shall be complete before any member of the resulting specialization of <code>list</code> is referenced.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "38899440", "Score": "1", "CreationDate": "2016-08-11T14:39:21.067", "LastActivityDate": "2016-08-11T14:39:21.067"}, "bq_ids": {"n4140": {"so_38898935_38899219_0": {"section_id": 6324, "quality": 1.0, "length": 16}}, "n3337": {"so_38898935_38899219_0": {"section_id": 6081, "quality": 1.0, "length": 16}}, "n4659": {"so_38898935_38899440_1": {"section_id": 886, "quality": 0.9473684210526315, "length": 18}, "so_38898935_38899219_0": {"section_id": 7834, "quality": 1.0, "length": 16}, "so_38898935_38899219_1": {"section_id": 1018, "quality": 0.9473684210526315, "length": 18}, "so_38898935_38899440_0": {"section_id": 1018, "quality": 0.9473684210526315, "length": 18}, "so_38898935_38899440_2": {"section_id": 964, "quality": 0.9473684210526315, "length": 18}}}});